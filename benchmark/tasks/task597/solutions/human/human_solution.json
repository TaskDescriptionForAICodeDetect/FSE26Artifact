[
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\n#include <cstdlib>\nusing namespace std;\n\nint main(){\n  double c1x, c1y, c1r, c2x, c2y, c2r;\n  scanf(\"%lf %lf %lf\", &c1x, &c1y, &c1r);\n  scanf(\"%lf %lf %lf\", &c2x, &c2y, &c2r);\n  if(sqrt(pow(c1x-c2x,2) + pow(c1y-c2y,2)) > c1r + c2r) printf(\"4\\n\");\n  else if(sqrt(pow(c1x-c2x,2) + pow(c1y-c2y,2)) == c1r + c2r) printf(\"3\\n\");\n  else if(sqrt(pow(c1x-c2x,2) + pow(c1y-c2y,2)) > abs(c1r - c2r) && sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2)) < c1r + c2r) printf(\"2\\n\");\n  else if(sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2)) == abs(c1r - c2r)) printf(\"1\\n\");\n  else printf(\"0\\n\");\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nint main() {\n\tfloat c1[3];\n\tfloat c2[3];\n\tfloat d;\n\t\n\tcin >> c1[0] >> c1[1] >> c1[2];\n\tcin >> c2[0] >> c2[1] >> c2[2];\n\t\n\td = sqrt(pow(abs(c1[0]-c2[0]), 2) + pow(abs(c1[1]-c2[1]), 2));\n\t\n\tif(d > c1[2] + c2[2]){\n\t    cout << 4 << endl;\n\t}else if(d == c1[2] + c2[2]){\n\t    cout << 3 << endl;\n\t}else if(d < c1[2] + c2[2] && d > abs(c1[2] - c2[2])){\n\t    cout << 2 << endl;\n\t}else if(d == abs(c1[2] - c2[2])){\n\t    cout << 1 << endl;\n\t}else{\n\t    cout << 0 << endl;\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\nint main(){\n  int x1,y1,r1,x2,y2,r2;\n  cin>>x1>>y1>>r1>>x2>>y2>>r2;\n  int x=(x1-x2),y=(y1-y2),r=r1+r2,rd=r1-r2;\n  int ans=0;\n  if(x*x+y*y>r*r)ans=4;\n  else if(x*x+y*y==r*r)ans=3;\n  else if(x*x+y*y>rd*rd)ans=2;\n  else if(x*x+y*y==rd*rd)ans=1;\n  cout<<ans<<endl;\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define rep(i,n) for(int i=0;(i)<(n);++(i))\nusing namespace std;\n\n// Description: ????????????\n// Verifyed: various problem\nusing namespace placeholders;\nusing R = long double;\nconst R EPS = 1e-9L; // [-1000,1000]->EPS=1e-8 [-10000,10000]->EPS=1e-7\ninline int sgn(const R& r) {return (r > EPS) - (r < -EPS);}\ninline R sq(R x) {return sqrt(max(x, 0.0L));}\n\nconst R INF = 1E40L;\nconst R PI = acos(-1.0L);\nusing P = complex<R>;\nusing L = struct {P s, t;};\nusing VP = vector<P>;\nusing C = struct {P c; R r;};\n\n#define at(a,i) (a[(i + a.size()) % a.size()])\n\nauto& operator >> (istream& is, P& p) { R x, y; is >> x >> y, p = P(x, y); return is;}\nauto& operator << (ostream& os, P& p) { os << real(p) << \" \" << imag(p); return os;}\n\nnamespace std {\nbool operator <  (const P& a, const P& b) { return sgn(real(a - b)) ? real(a - b) < 0 : sgn(imag(a - b)) < 0;}\nbool operator == (const P& a, const P& b) { return sgn(real(a - b)) == 0 && sgn(imag(a - b)) == 0;}\n}\n\ninline R dot(P o, P a, P b) {return real(conj(a - o) * (b - o));}\ninline R det(P o, P a, P b) {return imag(conj(a - o) * (b - o));}\ninline P vec(L l) {return l.t - l.s;}\nauto sdot = bind(sgn, bind(dot, _1, _2, _3));\nauto sdet = bind(sgn, bind(det, _1, _2, _3));\n\n//projection verify AOJ CGL_1_A\nP proj(L l, P p) { R u = real((p - l.s) / vec(l)); return (1 - u) * l.s + u * l.t;}\n\n// vertical parallel\n// verified: AOJ CGL_2_A\nbool vertical(L a, L b) {return sdot(0, vec(a), vec(b)) == 0;}\nbool parallel(L a, L b) {return sdet(0, vec(a), vec(b)) == 0;}\nbool eql(L a, L b) { return parallel(a, b) and sdet(a.s, a.t, b.s) == 0;}\n\n// crossing determination\n// verified: AOJ CGL_2_B\nbool iss(L a, L b) {\n\tint sa = sdet(a.s, a.t, b.s) * sdet(a.s, a.t, b.t);\n\tint sb = sdet(b.s, b.t, a.s) * sdet(b.s, b.t, a.t);\n\treturn max(sa, sb) < 0;\n}\n\n// crossing point\n// verified: AOJ CGL_2_C\nP cross(L a, L b) {\n\tR u = det(a.s, b.s, b.t) / det(0, vec(a), vec(b));\n\treturn (1 - u) * a.s + u * a.t;\n}\n\n// distance\n// verified: AOJ CGL_2_D\nR dsp(L l, P p) {\n\tP h = proj(l, p);\n\tif (sdot(l.s, l.t, p) <= 0) h = l.s;\n\tif (sdot(l.t, l.s, p) <= 0) h = l.t;\n\treturn abs(p - h);\n}\n\nR dss(L a, L b) {return iss(a, b) ? 0 : min({dsp(a, b.s), dsp(a, b.t), dsp(b, a.s), dsp(b, a.t)});}\n\n// Polygon\n\n// area\n// verified: AOJ 1100 CGL_3_A\nR area(const VP& pol) {\n\tR sum = 0.0;\n\trep(i, pol.size()) sum += det(0, at(pol, i), at(pol, i + 1));\n\treturn abs(sum / 2.0L);\n}\n\n// convex_polygon determination\n// verified: CGL_3_B\nbool is_convex(const VP& pol) {\n\trep(i, pol.size())if (sdet(at(pol, i), at(pol, i + 1), at(pol, i + 2)) < 0) return false;\n\treturn true;\n}\n\n// polygon realation determination  in  2 on 1 out 0???(possible non-convex)\n// verified: AOJ CGL_3-C\nint in_polygon(const VP& pol, const P& p) {\n\tint res = 0;\n\tauto simag = [](const P & p) {return sgn(imag(p));};\n\trep(i, pol.size()) {\n\t\tP a = at(pol, i), b = at(pol, i + 1);\n\t\tif (sdet(p, a, b) == 0 and sdot(p, a, b) <= 0) return 1;\n\t\tbool f = simag(p - a) >= 0, s = simag(p - b) < 0;\n\t\tif (simag(b - a)*sdet(a, b, p) == 1 and f == s) res += (2 * f - 1);\n\t}\n\treturn res ? 2 : 0;\n}\n\n// polygon realation determination???(possible non-convex)\n// verified: not AOJ 2514\nbool in_polygon(const VP& pol, const L& l) {\n\tVP check = {l.s, l.t};\n\trep(i, pol.size()) {\n\t\tL edge = {at(pol, i), at(pol, i + 1)};\n\t\tif (iss(l, edge)) check.emplace_back(cross(l, edge));\n\t}\n\n\tauto cmp_x = [](P a, P b)->bool{\n\t\tint sr = sgn(real(a - b)), si = sgn(imag(a - b));\n\t\treturn sr ? sr < 0 : si < 0;\n\t};\n\n\tsort(begin(check), end(check), cmp_x);\n\trep(i, check.size() - 1) {\n\t\tP m = (at(check, i) + at(check, i + 1)) / 2.0L;\n\t\tif (in_polygon(pol, m) == false) return false;\n\t}\n\treturn true;\n}\n\n// convex_cut\n// verified: AOJ CGL_4_C\nVP convex_cut(const VP& pol, const L& l) {\n\tVP res;\n\trep(i, pol.size()) {\n\t\tP a = at(pol, i), b = at(pol, i + 1);\n\t\tint da = sdet(l.s, l.t, a), db = sdet(l.s, l.t, b);\n\t\tif (da >= 0) res.emplace_back(a);\n\t\tif (da * db < 0) res.emplace_back(cross({a, b}, l));\n\t}\n\treturn res;\n}\n\n// farthest point pair Verify AOJ CGL_4_B\nR fpp(VP pol) {\n\tint n = pol.size(), i = 0, j = 0;\n\tif (n <= 2) return abs(pol[0] - pol[1]);\n\tR res = 0.0;\n\n\tauto cmp_x = [](P a, P b)->bool{\n\t\tint sr = sgn(real(a - b)), si = sgn(imag(a - b));\n\t\treturn sr ? sr < 0 : si < 0;\n\t};\n\n\trep(k, n) {\n\t\tif (!cmp_x(pol[i], pol[k]))i = k;\n\t\tif (cmp_x(pol[j], pol[k]))j = k;\n\t}\n\n\tint si = i, sj = j;\n\twhile (i != sj || j != si) {\n\t\tres = max(res, abs(pol[i] - pol[j]));\n\t\tif (sdet(0, vec(L{at(pol, i), at(pol, i + 1)}), vec(L{at(pol, j), at(pol, j + 1)})) < 0)\n\t\t\ti = (i + 1) % n;\n\t\telse\n\t\t\tj = (j + 1) % n;\n\t}\n\treturn res;\n}\n\n// closest point pair Verify AOJ CGL_5_A\nR iscp(VP a, int flag = 1) {\n\tconst int n = a.size(), m = n / 2;\n\tif (n <= 1) return INF;\n\n\tauto cmp_x = [](P a, P b)->bool{\n\t\tint sr = sgn(real(a - b)), si = sgn(imag(a - b));\n\t\treturn sr ? sr < 0 : si < 0;\n\t};\n\n\tif (flag) sort(begin(a), end(a), cmp_x);\n\n\tVP b(begin(a), begin(a) + m), c(begin(a) + m, end(a));\n\tR x = real(a[m]), d = min(iscp(b, 0), iscp(c, 0));\n\n\n\tauto cmp_y = [](P a, P b)->bool{\n\t\tint sr = sgn(real(a - b)), si = sgn(imag(a - b));\n\t\treturn si ? si < 0 : sr < 0;\n\t};\n\n\tsort(begin(a), end(a), cmp_y);\n\tdeque<P> e;\n\n\tfor (auto &p : a) {\n\t\tif (abs(real(p) - x) >= d) continue;\n\n\t\tfor (auto &q : e) {\n\t\t\tif (imag(p - q) >= d) break;\n\t\t\td = min(d, abs(p - q));\n\t\t}\n\t\te.push_front(p);\n\t}\n\treturn d;\n}\n\n// Circle // verified: AOJ 1183\nenum RCC {OUT = 2, ON_OUT = 1, ISC = 0, ON_IN = -1, IN = -2};\nint rcc(C a, C b) { R d = abs(a.c - b.c); return sgn(d - a.r - b.r) + sgn(d - abs(a.r - b.r));}\n\n// circle crossing determination\nbool iisc(C c, P p, int end = 0) {return sgn(abs(p - c.c) - c.r) <= -end;}\nbool ics(C c, L s, int end = 0) {return sgn(dsp(s, c.c) - c.r) <= -end;}\nbool icsc(C c, L l, int end = 0) {\n\treturn ics(c, l) and sgn(max(abs(l.s - c.c), abs(l.t - c.c)) - c.r) <= 0;\n}\n\n// common area between circles\nR area(C a, C b) {\n\tint r = rcc(a, b);\n\tif (r >= ON_OUT) return 0.0L;\n\tif (r <= ON_IN) return min(norm(a.r), norm(b.r)) * PI;\n\tR d = abs(b.c - a.c), rc = (norm(d) + norm(a.r) - norm(b.r)) / (2.0 * d);\n\tR t = acos(rc / a.r), p = acos((d - rc) / b.r);\n\treturn norm(a.r) * t + norm(b.r) * p - d * a.r * sin(t);\n}\n\n// cross point between circle and line\n// verified: AOJ CGL_7_D\nP cir(C c, R t) {return c.c + polar(c.r, t);}\nVP cross(C c, L l) {\n\tP h = proj(l, c.c);\n\tP e = polar(sq(norm(c.r) - norm(h - c.c)), arg(vec(l)));\n\treturn VP{h - e, h + e};\n}\n\n// cross point between circles\n// verified: AOJ CGL_7_E\nVP cross(C a, C b) {\n\tP d = b.c - a.c;\n\tP w = (norm(d) + norm(a.r) - norm(b.r)) / (2.0L * norm(d)) * d;\n\treturn cross(a, {a.c + w, a.c + w + 1il * d});\n}\n\n// circle tangent\n// verified: AOJ CGL_7_F\nL tan(C c, P p) {return L{p, p + 1il * (p - c.c)};}\n\nP helper(C c, P d, R r, P j) {\n\tP tmp = sq(norm(d) - norm(r)) * j;\n\tP dir = (r + tmp) / norm(d) * d;\n\treturn c.c + c.r * dir;\n}\n\nVP contact(C c, P p) {\n\tVP ret;\n\tP d = p - c.c;\n\tfor (P j : { -1il, 1il}) ret.emplace_back(helper(c, d, c.r, j));\n\tsort(begin(ret), end(ret));\n\tret.erase(unique(begin(ret), end(ret)), end(ret));\n\treturn ret;\n}\n\n// circle tangent\n// Verified: AOJ CGL_7_G\nVP contact(C a, C b) {\n\tVP ret;\n\tP d = b.c - a.c;\n\tfor (int s : { -1, 1}) {\n\t\tif (rcc(a, b) >= s) {\n\t\t\tfor (P j : { -1i, 1i}) {\n\t\t\t\tR r = a.r + s * b.r;\n\t\t\t\tret.emplace_back(helper(a, d, r, j));\n\t\t\t}\n\t\t}\n\t}\n\tsort(begin(ret), end(ret));\n\tret.erase(unique(begin(ret), end(ret)), end(ret));\n\treturn ret;\n}\n/*\n// common area of circle and polygon\nR area(R r, P a, P b) {\n\treturn sgn(abs((a + b) / 2.0l) - r) <= 0 ? det(0, a, b) / 2.0l : norm(r) * arg(b - a) / 2.0l;\n}\n\nR area(C c, VP pol) {\n\tR res = 0;\n\trep(i, pol.size()){\n\t\tR r = c.r;\n\t\tP a = at(pol, i) - c.c , b = at(pol, i + 1) - c.c;\n\t\tif (sgn(min({r, abs(a), abs(b), abs(b - a)})) == 0) continue;\n\n\t\tVP isc = cross(C{0.0l, r}, L{a, b});\n\t\tif (sdot(a, isc[0], isc[1]) <= 0 and sdot(b, isc[0], isc[1]) <= 0) \n\t\t\tres += area(r, a, b);\n\t\telse \n\t\t\tres += area(r, a, isc[0]) + area(r, isc[0], isc[1]) + area(r, isc[1], b);\n\t}\n\treturn res;\n}\n*/int main(void){\n\tC a,b;\n\tcin >> a.c >> a.r >> b.c >> b.r;\n\tcout << rcc(a,b)+2\t<< endl;\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define REP(i,first,last) for(int i=first;i<=last;++i)\n#define DOW(i,first,last) for(int i=first;i>=last;--i)\nusing namespace std;\nlong long Random(long long a)\n{\n\treturn (1ll*rand()*rand()+rand())%a;\n}\nlong long Random(long long f,long long e)\n{\n\treturn f+Random(e-f+1);\n}\ndouble Sqr(double a)\n{\n\treturn a*a;\n}\nconst double PI=3.14159265358979323846264338327950288419716939;\nstruct Point\n{\n\tdouble x,y;\n\tPoint(double fx=0,double fy=0)\n\t{\n\t\tx=fx;\n\t\ty=fy;\n\t}\n\tvoid Read()\n\t{\n\t\tscanf(\"%lf%lf\",&x,&y);\n\t}\n\tvoid Write()\n\t{\n\t\tprintf(\"%.9lf %.9lf\",x,y);\n\t}\n\tdouble operator ^(Point const b)const\n\t{\n\t\treturn x*b.x+y*b.y;\n\t}\n\tdouble operator |(Point const b)const\n\t{\n\t\treturn x*b.y-b.x*y;\n\t}\n\tdouble operator ==(Point const b)const\n\t{\n\t\treturn sqrt((x-b.x)*(x-b.x)+(y-b.y)*(y-b.y));\n\t}\n\tPoint operator *(double const b)const\n\t{\n\t\treturn Point(x*b,y*b);\n\t}\n\tPoint operator +(Point const b)const\n\t{\n\t\treturn Point(x+b.x,y+b.y);\n\t}\n\tPoint operator -(Point const b)const\n\t{\n\t\treturn Point(x-b.x,y-b.y);\n\t}\n\tbool operator !=(Point const b)const\n\t{\n\t\tif(1e-5<=fabs(x-b.x))\n\t\t{\n\t\t\treturn 1;\n\t\t}\n\t\tif(1e-5<=fabs(y-b.y))\n\t\t{\n\t\t\treturn 1;\n\t\t}\n\t\treturn 0;\n\t}\n};\nPoint Symmetrical(Point a,Point m=Point(0,0))\n{\n\treturn Point(m.x*2-a.x,m.y*2-a.y);\n}\n/**\n *      /\n *   a /\n *    m\n *   / b\n *  /\n *\n *    a\n *\n * ---m-----\n *\n *    b\n * return b;\n */\nstruct Vector\n{\n\tPoint a,b;\n\tVector(Point f=Point(0,0),Point e=Point(0,0))\n\t{\n\t\ta=f;\n\t\tb=e;\n\t}\n\tdouble operator ^(Vector const c)const\n\t{\n\t\treturn (a.x-b.x)*(c.a.x-c.b.x)+(c.a.y-c.b.y)*(a.y-b.y);\n\t}\n\tdouble operator |(Vector const c)const\n\t{\n\t\treturn (a.x-b.x)*(c.a.y-c.b.y)-(c.a.x-c.b.x)*(a.y-b.y);\n\t}\n};\nstruct Circle\n{\n\tPoint core;\n\tdouble radius;\n\tCircle(Point c=Point(0,0),double r=0)\n\t{\n\t\tcore=c;\n\t\tradius=r;\n\t}\n};\nPoint ProjectivePoint(Point a,Vector b)\n{\n\tdouble c=Vector(b.a,a)^Vector(b.a,b.b);\n\tc/=(b.a==b.b)*(b.a==b.b);\n\treturn (b.b-b.a)*c+b.a;\n}\n/**\n *     *\n *     |\n *     |\n * *---m-----*\n *\n *         *\n *         |\n *         |\n * *----*  m\n * return m;\n */\ndouble PointToVector(Point a,Vector b)\n{\n\tPoint c=ProjectivePoint(a,b);\n\tif(\n\t\t(\n\t\t\t(b.a.x<=c.x)==(c.x<=b.b.x)\n\t\t)\n\t\t&&\n\t\t(\n\t\t\t(b.a.y<=c.y)==(c.y<=b.b.y)\n\t\t)\n\t)\n\t{\n\t\treturn a==c;\n\t}\n\treturn min(a==b.a,a==b.b);\n}\n/**\n *   *\n *   |\n * *------*\n *\n *           *\n *          /\n *  *------*\n * return min_dis;\n */\nbool InRectangle(Point a,Point b,Point c)\n{\n\treturn\n\tmin(b.x,c.x)<=a.x&&a.x<=max(b.x,c.x)\n\t&&\n\tmin(b.y,c.y)<=a.y&&a.y<=max(b.y,c.y);\n}\n/**\n *   a\n *  b---*\n *  |   |\n *  *---c\n *  return 0;\n *\n *  b---*\n *  |a  |\n *  *---c\n *  return 1;\n */\nbool RectangleIntersection(Point a0,Point a1,Point b0,Point b1)\n{\n\tint zx=fabs(a0.x+a1.x-b0.x-b1.x);\n\tint zy=fabs(a0.y+a1.y-b0.y-b1.y);\n\tint x=fabs(a0.x-a1.x)+fabs(b0.x-b1.x);\n\tint y=fabs(a0.y-a1.y)+fabs(b0.y-b1.y);\n\tif(zx<=x&&zy<=y)\n\t{\n\t\treturn 1;\n\t}\n\treturn 0;\n}\n/**\n *  *---*\n *  |   |\n *  *---*\n *\n *    *--*\n *    |  |\n *    |  |\n *    *--*\n * return 0;\n *\n *  *---*\n *  | *-+*\n *  *-+-*|\n *    |  |\n *    *--*\n * return 1;\n */\nbool Intersect(Vector a,Vector b)\n{\n\tdouble a_aa=a|Vector(a.a,b.a);\n\tdouble a_ab=a|Vector(a.a,b.b);\n\tdouble b_aa=b|Vector(b.a,a.a);\n\tdouble b_ab=b|Vector(b.a,a.b);\n\tif((a_aa==0||a_ab==0||((a_aa<0)^(a_ab<0)))&&(b_aa==0||b_ab==0||((b_aa<0)^(b_ab<0))))\n\t{\n\t\treturn RectangleIntersection(a.a,a.b,b.a,b.b);\n\t}\n\treturn 0;\n}\n/**\n *      *\n *     /\n *    /*\n *   /  \\\n *  /    \\\n * *      *\n * return 0;\n *\n *      *\n *  *  /\n *   \\/\n *   /\\\n *  /  \\\n * *    *\n * return 1;\n */\nPoint QueryIntersect(Vector a,Vector b)\n{\n\tVector u(a.a,b.a);\n\tVector v(b.a,b.b);\n\tVector w(a.a,a.b);\n\tdouble c=(w|u)/(v|w);\n\treturn Point(b.a.x+(b.b.x-b.a.x)*c,b.a.y+(b.b.y-b.a.y)*c);\n}\n/**\n *        *\n * *     /\n *  \\   /\n *   \\ /\n *    m\n *   / \\\n *  *   \\\n *       *\n * return m;\n */\ndouble VectorToVector(Vector a,Vector b)\n{\n\tif(Intersect(a,b))\n\t{\n\t\treturn 0.0;\n\t}\n\treturn min\n\t(\n\t\tmin(PointToVector(a.a,b),PointToVector(a.b,b)),\n\t\tmin(PointToVector(b.a,a),PointToVector(b.b,a))\n\t);\n}\n/**\n *   *----*\n *     |\n * *--------*\n *\n * *-----*\n *        \\\n *         *-----*\n * return min_dis;\n */\nCircle CircleCore(Point a,Point b,Point c)\n{\n\tdouble a1=2*(b.x-a.x);\n\tdouble b1=2*(b.y-a.y);\n\tdouble c1=Sqr(b.x)+Sqr(b.y)-Sqr(a.x)-Sqr(a.y);\n\tdouble a2=2*(c.x-b.x);\n\tdouble b2=2*(c.y-b.y);\n\tdouble c2=Sqr(c.x)+Sqr(c.y)-Sqr(b.x)-Sqr(b.y);\n\tPoint core=Point\n\t(\n\t\t((c1*b2)-(c2*b1))/((a1*b2)-(a2*b1)),\n\t\t((a1*c2)-(a2*c1))/((a1*b2)-(a2*b1))\n\t);\n\treturn Circle(core,core==a);\n}\n/**\n *\n *\n *       a\n *  p   /|\n *     / |\n *    /  |\n *   c---b\n * (dis(p,a)=dis(p,b)=dis(p,c))\n * return p;\n */\nint PolygonPoint(Point a,Point point[],int n)\n{\n\tpoint[n+1]=point[1];\n\tbool now=0;\n\tREP(i,1,n)\n\t{\n\t\tif(Intersect(Vector(a,Point(1e6,a.y)),Vector(point[i],point[i+1])))\n\t\t{\n\t\t\tif(\n\t\t\t\t(PointToVector(a,Vector(point[i],point[i+1]))<=1e-5))\n\t\t\t{\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\tif((a.y<point[i].y)^(a.y<point[i+1].y))\n\t\t\t{\n\t\t\t\tnow^=1;\n\t\t\t}\n\t\t}\n\t}\n\tif(now==0)\n\t{\n\t\treturn 0;\n\t}\n\treturn 2;\n}\n/**\n *       *---*\n *      /     \\\n *     *   a   *\n *      \\     /\n *       *---*\n * return 2;\n *\n *       *---*\n *      /     \\\n *     *       * a\n *      \\     /\n *       *---*\n * return 0;\n *\n *       *---*\n *      /     \\\n *     *       *\n *      \\     /\n *       *-a-*\n * return 1;\n */\ndouble Area(Point point[],int n)\n{\n\tdouble result=0;\n\tREP(i,2,n)\n\t{\n\t\tresult+=point[i-1]|point[i];\n\t}\n\tresult+=point[n]|point[1];\n\treturn fabs(result)/2.0;\n}\n/**\n *       *---*\n *      /   /\n *     *   *---*\n *      \\     /\n *       *---*\n * return area;\n */\ndouble Perimeter(Point point[],int n)\n{\n\tdouble result=0;\n\tREP(i,2,n)\n\t{\n\t\tresult+=(point[i-1]==point[i]);\n\t}\n\treturn result+(point[1]==point[n]);\n}\n/**\n *       *---*\n *      /   /\n *     *   *---*\n *      \\     /\n *       *---*\n * return perimeter;\n */\nbool CheckConvexHull(Point point[],int n)\n{\n\tdouble first=0,c;\n\tpoint[++n]=point[1];\n\tREP(i,1,n-1)\n\t{\n\t\tif(!first)\n\t\t{\n\t\t\tfirst=Vector(point[i],point[i+1])|Vector(point[i+1],point[i+2]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc=(Vector(point[i],point[i+1])|Vector(point[i+1],point[i+2]));\n\t\t\tif(c!=0&&((first<0)^(c<0)))\n\t\t\t{\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t}\n\treturn 1;\n}\n/**\n *       *---*\n *      /   /\n *     *   *---*\n *      \\     /\n *       *---*\n * return 0;\n *\n *       *---*\n *      /     \\\n *     *       *\n *      \\     /\n *       *---*\n * return 1;\n */\nPoint f_point;\nbool Cmp(Point a,Point b)\n{\n\tdouble c=Vector(f_point,a)|Vector(f_point,b);\n\tif(0<c)\n\t{\n\t\treturn 1;\n\t}\n\tif(c==0&&(f_point==a)<(f_point==b))\n\t{\n\t\treturn 1;\n\t}\n\treturn 0;\n}\nint GetConvexHull(Point point[],Point st[],int n)\n{\n\tREP(i,2,n)\n\t{\n\t\tif(point[i].y<point[1].y||point[i].y==point[1].y&&point[i].x<point[1].x)\n\t\t{\n\t\t\tswap(point[i],point[1]);\n\t\t}\n\t}\n\tf_point=point[1];\n\tsort(point+2,point+1+n,Cmp);\n\tint top=1;\n\tst[1]=point[1];\n\tREP(i,2,n)\n\t{\n\t\twhile(1<top&&(Vector(st[top-1],st[top])|Vector(st[top],point[i]))<=0)\n\t\t{\n\t\t\t--top;\n\t\t}\n\t\tst[++top]=point[i];\n\t}\n\treturn top;\n}\n/**\n *       *   *\n *\n *     *   *   *\n *\n *       *   *\n *         |\n *         V\n *       *---*\n *      /     \\\n *     *   *   *\n *      \\     /\n *       *---*\n */\ndouble GetDiam(Point point[],int n)\n{\n\tdouble result=0;\n\tif(n==2)\n\t{\n\t\treturn point[1]==point[2];\n\t}\n\tpoint[++n]=point[1];\n\tint top=2;\n\tREP(i,1,n)\n\t{\n\t\twhile(\n\t\t\t(Vector(point[i],point[top])|Vector(point[top],point[i+1]))\n\t\t\t>\n\t\t\t(Vector(point[i],point[top+1])|Vector(point[top+1],point[i+1]))\n\t\t\t)\n\t\t{\n\t\t\ttop++;\n\t\t\tif(top==n+1)\n\t\t\t{\n\t\t\t\ttop=1;\n\t\t\t}\n\t\t}\n\t\tresult=max(result,max(point[i]==point[top],point[i+1]==point[top]));\n\t}\n\treturn result;\n}\n/**\n *       *---*\n *      / \\   \\\n *     *   \\   *\n *      \\   \\ /\n *       *---*\n * return max_dis;\n */\nint main()\n{\n\tCircle a,b;\n\ta.core.Read();\n\tscanf(\"%lf\",&a.radius);\n\tb.core.Read();\n\tscanf(\"%lf\",&b.radius);\n\tdouble dis=a.core==b.core;\n\tint answer=0;\n\tif(a.radius+b.radius<dis)\n\t{\n\t\tprintf(\"4\\n\");\n\t\treturn 0;\n\t}\n\tif(a.radius+b.radius==dis)\n\t{\n\t\tprintf(\"3\\n\");\n\t\treturn 0;\n\t}\n\tif(fabs(a.radius-b.radius)<dis)\n\t{\n\t\tprintf(\"2\\n\");\n\t\treturn 0;\n\t}\n\tif(fabs(a.radius-b.radius)==dis)\n\t{\n\t\tprintf(\"1\\n\");\n\t\treturn 0;\n\t}\n\tprintf(\"0\\n\");\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <sstream>\n#include <cstdio>\n#include <stdlib.h>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <math.h>\nusing namespace std;\n\nint main(){\n  int c[2][3],r,r_;\n  double d;\n  cin>>c[0][0]>>c[0][1]>>c[0][2];\n  cin>>c[1][0]>>c[1][1]>>c[1][2];\n  d = pow(pow((c[0][0]-c[1][0]),2) + pow(c[0][1]-c[1][1],2),0.5);\n  r = c[0][2]+c[1][2];\n  r_ = abs(c[0][2]-c[1][2]);\n  //cout <<d<<\" \"<<r<<\" \"<<r_<<endl;\n  if(d>r) cout<<\"4\"<<endl;\n  else if (d == r) cout<<\"3\"<<endl;\n  else if (r_ == d) cout<<\"1\"<<endl;\n  else if (r_ < d && d < r) cout<<\"2\"<<endl;\n  else if (r_ > d) cout<<\"0\"<<endl;\n  //cout <<d<<\" \"<<r<<\" \"<<r_<<endl;\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ntemplate <class T> inline bool chmax(T &a, T b) {\n    if(a < b) {\n        a = b;\n        return 1;\n    }\n    return 0;\n}\ntemplate <class T> inline bool chmin(T &a, T b) {\n    if(a > b) {\n        a = b;\n        return 1;\n    }\n    return 0;\n}\ntypedef long long int ll;\n\n#define ALL(v) (v).begin(), (v).end()\n#define RALL(v) (v).rbegin(), (v).rend()\n#define endl \"\\n\"\nconst double EPS = 1e-10;\nconst int INF = 1 << 30;\nconst ll LLINF = 1LL << 60;\nconst double PI = acos(-1);\nconst int MOD = 1000000007;\nconst int dx[4] = {1, 0, -1, 0};\nconst int dy[4] = {0, 1, 0, -1};\n\n//-------------------------------------\n\nnamespace geometry {\n// Point : 複素数型を位置ベクトルとして扱う\n// 実軸(real)をx軸、挙軸(imag)をy軸として見る\nusing Point = complex<double>;\n\ninline bool equal(const double &a, const double &b) {\n    return fabs(a - b) < EPS;\n}\n\n// 単位ベクトル(unit vector)を求める\nPoint unitVector(const Point &a) { return a / abs(a); }\n\n// 法線ベクトル(normal vector)を求める\n// 90度回転した単位ベクトルをかける\n// -90度がよければPoint(0, -1)をかける\nPoint normalVector(const Point &a) { return a * Point(0, 1); }\n\n// 内積(dot product) : a・b = |a||b|cosΘ\ndouble dot(const Point &a, const Point &b) {\n    return (a.real() * b.real() + a.imag() * b.imag());\n}\n\n// 外積(cross product) : a×b = |a||b|sinΘ\ndouble cross(const Point &a, const Point &b) {\n    return (a.real() * b.imag() - a.imag() * b.real());\n}\n\n// 点pを反時計回りにtheta度回転\nPoint rotate(const Point &p, const double &theta) {\n    return Point(cos(theta) * p.real() - sin(theta) * p.imag(),\n                 sin(theta) * p.real() + cos(theta) * p.imag());\n}\n\n// ラジアン->度\ndouble radianToDegree(const double &radian) { return radian * 180.0 / PI; }\n\n// 度->ラジアン\ndouble degreeToRadian(const double &degree) { return degree * PI / 180.0; }\n\n// 点の回転方向\n// 点a, b, cの位置関係について(aが基準点)\nint ccw(const Point &a, Point b, Point c) {\n    b -= a, c -= a;\n    // 点a, b, c が\n    // 反時計回りの時、\n    if(cross(b, c) > EPS) {\n        return 1;\n    }\n    // 時計回りの時、\n    if(cross(b, c) < -EPS) {\n        return -1;\n    }\n    // c, a, bがこの順番で同一直線上にある時、\n    if(dot(b, c) < 0) {\n        return 2;\n    }\n    // a, b, cがこの順番で同一直線上にある場合、\n    if(norm(b) < norm(c)) {\n        return -2;\n    }\n    // cが線分ab上にある場合、\n    return 0;\n}\n\n// Line : 直線を表す構造体\n// b - a で直線・線分を表せる\nstruct Line {\n    Point a, b;\n    Line() = default;\n    Line(Point a, Point b) : a(a), b(b) {}\n    // Ax+By=C\n    Line(double A, double B, double C) {\n        if(equal(A, 0)) {\n            a = Point(0, C / B), b = Point(1, C / B);\n        } else if(equal(B, 0)) {\n            b = Point(C / A, 0), b = Point(C / A, 1);\n        } else {\n            a = Point(0, C / B), b = Point(C / A, 0);\n        }\n    }\n};\n\n// Segment : 線分を表す構造体\n// Lineと同じ\nstruct Segment : Line {\n    Segment() = default;\n\n    Segment(Point a, Point b) : Line(a, b) {}\n};\n\n// Circle : 円を表す構造体\n// pが中心の位置ベクトル、rは半径\nstruct Circle {\n    Point p;\n    double r;\n\n    Circle() = default;\n\n    Circle(Point p, double r) : p(p), r(r) {}\n};\n\n// 2直線の直交判定 : a⊥b <=> dot(a, b) = 0\nbool isOrthogonal(const Line &a, const Line &b) {\n    return equal(dot(a.b - a.a, b.b - b.a), 0);\n}\n// 2直線の平行判定 : a//b <=> cross(a, b) = 0\nbool isParallel(const Line &a, const Line &b) {\n    return equal(cross(a.b - a.a, b.b - b.a), 0);\n}\n\n// 点cが直線ab上にあるか\nbool isPointOnLine(const Point &a, const Point &b, const Point &c) {\n    return isParallel(Line(a, b), Line(a, c));\n}\n\n// 点cが\"線分\"ab上にあるか\nbool isPointOnSegment(const Point &a, const Point &b, const Point &c) {\n    // |a-c| + |c-b| <= |a-b| なら線分上\n    return (abs(a - c) + abs(c - b) < abs(a - b) + EPS);\n}\n\n// 直線lと点pの距離を求める\ndouble distanceBetweenLineAndPoint(const Line &l, const Point &p) {\n    return abs(cross(l.b - l.a, p - l.a)) / abs(l.b - l.a);\n}\n\n// 線分lと点pの距離を求める\n// 定義：点pから「線分lのどこか」への最短距離\ndouble distanceBetweenSegmentAndPoint(const Segment &l, const Point &p) {\n    if(dot(l.b - l.a, p - l.a) < EPS) {\n        return abs(p - l.a);\n    }\n    if(dot(l.a - l.b, p - l.b) < EPS) {\n        return abs(p - l.b);\n    }\n    return abs(cross(l.b - l.a, p - l.a)) / abs(l.b - l.a);\n}\n\n// 直線s, tの交点の計算\nPoint crossPoint(const Line &s, const Line &t) {\n    double d1 = cross(s.b - s.a, t.b - t.a);\n    double d2 = cross(s.b - s.a, s.b - t.a);\n    if(equal(abs(d1), 0) && equal(abs(d2), 0)) {\n        return t.a;\n    }\n    return t.a + (t.b - t.a) * (d2 / d1);\n}\n\n// 線分s, tの交点の計算\nPoint crossPoint(const Segment &s, const Segment &t) {\n    return crossPoint(Line(s), Line(t));\n}\n\n// 線分sと線分tが交差しているかどうか\nbool isIntersect(const Segment &s, const Segment &t) {\n    return ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 &&\n           ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0;\n}\n\n// 線分sとtの距離\ndouble distanceBetweenSegments(const Segment &s, const Segment &t) {\n    if(isIntersect(s, t)) {\n        return (double)(0);\n    }\n    double ans = distanceBetweenSegmentAndPoint(s, t.a);\n    chmin(ans, distanceBetweenSegmentAndPoint(s, t.b));\n    chmin(ans, distanceBetweenSegmentAndPoint(t, s.a));\n    chmin(ans, distanceBetweenSegmentAndPoint(t, s.b));\n    return ans;\n}\n\n// 射影(projection)\n// 直線(線分)lに点pから引いた垂線の足を求める\nPoint projection(const Line &l, const Point &p) {\n    double t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n    return l.a + (l.a - l.b) * t;\n}\n\nPoint projection(const Segment &l, const Point &p) {\n    double t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n    return l.a + (l.a - l.b) * t;\n}\n\n// 反射(reflection)\n// 直線lを対称軸として点pと線対称の位置にある点を求める\nPoint reflection(const Line &l, const Point &p) {\n    return p + (projection(l, p) - p) * 2.0;\n}\n\n// 2つの円の交差判定\n// 返り値は共通接線の数\nint isIntersect(const Circle &c1, const Circle &c2) {\n    double d = abs(c1.p - c2.p);\n    // 2つの円が離れている場合\n    if(d > c1.r + c2.r + EPS) {\n        return 4;\n    }\n    // 外接している場合\n    if(equal(d, c1.r + c2.r)) {\n        return 3;\n    }\n    // 内接している場合\n    if(equal(d, abs(c1.r - c2.r))) {\n        return 1;\n    }\n    // 内包している場合\n    if(d < abs(c1.r - c2.r) - EPS) {\n        return 0;\n    }\n    return 2;\n}\n\n// 2つの円の交点\nvector<Point> crossPoint(const Circle &c1, const Circle &c2) {\n    vector<Point> res;\n    int mode = isIntersect(c1, c2);\n    // 2つの中心の距離\n    double d = abs(c1.p - c2.p);\n    // 2円が離れている場合\n    if(mode == 4) {\n        return res;\n    }\n    // 1つの円がもう1つの円に内包されている場合\n    if(mode == 0) {\n        return res;\n    }\n    // 2円が外接する場合\n    if(mode == 3) {\n        double t = c1.r / (c1.r + c2.r);\n        res.emplace_back(c1.p + (c2.p - c1.p) * t);\n        return res;\n    }\n    // 内接している場合\n    if(mode == 1) {\n        if(c2.r < c1.r - EPS) {\n            res.emplace_back(c1.p + (c2.p - c1.p) * (c1.r / d));\n        } else {\n            res.emplace_back(c2.p + (c1.p - c2.p) * (c2.r / d));\n        }\n        return res;\n    }\n    // 2円が重なる場合\n    double rc1 = (c1.r * c1.r + d * d - c2.r * c2.r) / (2 * d);\n    double rs1 = sqrt(c1.r * c1.r - rc1 * rc1);\n    if(c1.r - abs(rc1) < EPS) {\n        rs1 = 0;\n    }\n    Point e12 = (c2.p - c1.p) / abs(c2.p - c1.p);\n    res.emplace_back(c1.p + rc1 * e12 + rs1 * e12 * Point(0, 1));\n    res.emplace_back(c1.p + rc1 * e12 + rs1 * e12 * Point(0, -1));\n    return res;\n}\n\n// 点pが円cの内部(円周上も含む)に入っているかどうか\nbool isInCircle(const Circle &c, const Point &p) {\n    double d = abs(c.p - p);\n    return (equal(d, c.r) || d < c.r - EPS);\n}\n\n// ----------- ↓多角形 -------------\n\n// 多角形の面積を求める\ndouble PolygonArea(const vector<Point> &p) {\n    double res = 0;\n    int n = p.size();\n    for(int i = 0; i < n - 1; i++) {\n        res += cross(p[i], p[i + 1]);\n    }\n    res += cross(p[n - 1], p[0]);\n    return res * 0.5;\n}\n\n// 凸多角形かどうか\nbool isConvex(const vector<Point> &p) {\n    int n = p.size();\n    int now, pre, nxt;\n    for(int i = 0; i < n; i++) {\n        pre = (i - 1 + n) % n;\n        nxt = (i + 1) % n;\n        now = i;\n        if(ccw(p[pre], p[now], p[nxt]) == -1) {\n            return false;\n        }\n    }\n    return true;\n}\n\n} // namespace geometry\n\nusing namespace geometry;\n\nint main() {\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    cout << fixed << setprecision(15);\n    vector<Circle> c(2);\n    for(int i = 0; i < 2; i++) {\n        double x, y, r;\n        cin >> x >> y >> r;\n        c[i] = Circle(Point(x, y), r);\n    }\n    cout << isIntersect(c[0], c[1]) << endl;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n \nint main()\n{\n    int c1x = 0, c1y = 0, c1r = 0, c2x = 0, c2y = 0, c2r = 0;\n    double d = 0;\n \n    cin >> c1x >> c1y >> c1r >> c2x >> c2y >> c2r;\n \n    d = sqrt(pow(c1x - c2x, 2) + pow(c1y - c2y, 2));\n \n    if (d > c1r + c2r)\n        cout << 4 << endl;\n    else if (d == c1r + c2r)\n        cout << 3 << endl;\n    else if (d > abs(c1r - c2r) && d < c1r + c2r)\n        cout << 2 << endl;\n    else if (d == abs(c1r - c2r))\n        cout << 1 << endl;\n    else\n        cout << 0 << endl;\n \n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\nusing namespace std;\n#include<cstdio>\n#include<cmath>\n\nint main()\n{\n\tdouble dx, dy, d;\n\tdouble c1x, c1y, c1r, c2x, c2y, c2r;\n\tscanf(\"%lf %lf %lf %lf %lf %lf\", &c1x, &c1y, &c1r, &c2x, &c2y, &c2r);\n\tdx = c1x - c2x;\n\tdy = c1y - c2y;\n\td = sqrt(dx * dx + dy * dy);\n\tif(d < c1r + c2r){ printf(\"4\\n\"); }\n\telse if(d == c1r + c2r){ printf(\"3\\n\"); }\n\telse{\n\t\tif(c1r < c2r) swap(c1r, c2r);\n\t\tif(d > c1r - c2r){ printf(\"2\\n\"); }\n\t\telse if(d == c1r - c2r){ printf(\"1\\n\"); }\n\t\telse{ printf(\"0\\n\"); }\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "// includes\n#include <bits/stdc++.h>\n\n// macros\n#define ll long long int\n#define pb emplace_back\n#define mk make_pair\n#define pq priority_queue\n#define FOR(i, a, b) for(int i=(a);i<(b);++i)\n#define rep(i, n) FOR(i, 0, n)\n#define rrep(i, n) for(int i=((int)(n)-1);i>=0;i--)\n#define irep(itr, st) for(auto itr = (st).begin(); itr != (st).end(); ++itr)\n#define irrep(itr, st) for(auto itr = (st).rbegin(); itr != (st).rend(); ++itr)\n#define vrep(v, i) for(int i = 0; i < (v).size(); i++)\n#define all(x) (x).begin(),(x).end()\n#define sz(x) ((int)(x).size())\n#define UNIQUE(v) v.erase(unique(v.begin(), v.end()), v.end())\n#define FI first\n#define SE second\n#define dump(a, n) for(int i = 0; i < n; i++)cout << a[i] << \"\\n \"[i + 1 != n];\n#define dump2(a, n, m) for(int i = 0; i < n; i++)for(int j = 0; j < m; j++)cout << a[i][j] << \"\\n \"[j + 1 != m];\n#define bit(n) (1LL<<(n))\n#define INT(n) int n; cin >> n;\n#define LL(n) ll n; cin >> n;\n#define DOUBLE(n) double n; cin >> n;\nusing namespace std;\n\n//  types\ntypedef pair<int, int> P;\ntypedef pair<ll, int> Pl;\ntypedef pair<ll, ll> Pll;\ntypedef pair<double, double> Pd;\ntypedef complex<double> cd;\n \n// constants\nconst int inf = 1e9;\nconst ll linf = 1LL << 50;\nconst double EPS = 1e-10;\nconst int mod = 1e9 + 7;\nconst int dx[4] = {-1, 0, 1, 0};\nconst int dy[4] = {0, -1, 0, 1};\n\n// solve\ntemplate <class T>bool chmax(T &a, const T &b){if(a < b){a = b; return 1;} return 0;}\ntemplate <class T>bool chmin(T &a, const T &b){if(a > b){a = b; return 1;} return 0;}\ntemplate <typename T> istream &operator>>(istream &is, vector<T> &vec){for(auto &v: vec)is >> v; return is;}\ntemplate <typename T> ostream &operator<<(ostream &os, const vector<T>& vec){for(int i = 0; i < vec.size(); i++){ os << vec[i]; if(i + 1 != vec.size())os << \" \";} return os;}\ntemplate <typename T> ostream &operator<<(ostream &os, const set<T>& st){for(auto itr = st.begin(); itr != st.end(); ++itr){ os << *itr; auto titr = itr; if(++titr != st.end())os << \" \";} return os;}\ntemplate <typename T> ostream &operator<<(ostream &os, const unordered_set<T>& st){for(auto itr = st.begin(); itr != st.end(); ++itr){ os << *itr; auto titr = itr; if(++titr != st.end())os << \" \";} return os;}\ntemplate <typename T> ostream &operator<<(ostream &os, const multiset<T>& st){for(auto itr = st.begin(); itr != st.end(); ++itr){ os << *itr; auto titr = itr; if(++titr != st.end())os << \" \";} return os;}\ntemplate <typename T> ostream &operator<<(ostream &os, const unordered_multiset<T>& st){for(auto itr = st.begin(); itr != st.end(); ++itr){ os << *itr; auto titr = itr; if(++titr != st.end())os << \" \";} return os;}\ntemplate <typename T1, typename T2> ostream &operator<<(ostream &os, const pair<T1, T2> &p){os << p.first << \" \" << p.second; return os;}\ntemplate <typename T1, typename T2> ostream &operator<<(ostream &os, const map<T1, T2> &mp){for(auto itr = mp.begin(); itr != mp.end(); ++itr){ os << itr->first << \":\" << itr->second; auto titr = itr; if(++titr != mp.end())os << \" \"; } return os;}\ntemplate <typename T1, typename T2> ostream &operator<<(ostream &os, const unordered_map<T1, T2> &mp){for(auto itr = mp.begin(); itr != mp.end(); ++itr){ os << itr->first << \":\" << itr->second; auto titr = itr; if(++titr != mp.end())os << \" \"; } return os;}\n\nstruct point2d{\n  double x, y;\n  point2d(){}\n  point2d(double x, double y): x(x), y(y){}\n  point2d operator+(const point2d &r) const{\n    return point2d(x + r.x, y + r.y);\n  }\n  point2d operator-(const point2d &r) const{\n    return point2d(x - r.x, y - r.y);\n  }\n  point2d& operator+=(const point2d &r){\n    *this = *this + r;\n    return *this;\n  }\n  point2d& operator-=(const point2d &r){\n    *this = *this - r;\n    return *this;\n  }\n  bool operator==(const point2d &r) const{\n    return abs(x - r.x) < EPS && abs(y - r.y) < EPS;\n  }\n  bool operator!=(const point2d &r) const{\n    return !(*this == r);\n  }\n  bool operator<(const point2d &r) const{\n    if(abs(x - r.x) >= EPS)return x < r.x;\n    return y < r.y;\n  }\n};\n\npoint2d operator*(double x, const point2d &p){\n  return point2d(x * p.x, x * p.y);\n}\n\npoint2d operator/(const point2d &p, double x){\n  return point2d(p.x / x, p.y / x);\n}\n\ndouble norm(const point2d &a){\n  return sqrt(a.x * a.x + a.y * a.y);\n}\n\ndouble dis(const point2d &a, const point2d &b){\n  point2d c = a - b;\n  return norm(c);\n}\n\ndouble inner_product(const point2d &a, const point2d &b){\n  return a.x * b.x + a.y * b.y;\n}\n\ndouble outer_product(const point2d &a, const point2d &b){\n  return a.x * b.y - a.y * b.x;\n}\n\ndouble cosine(const point2d &a, const point2d &b){\n  return inner_product(a, b) / norm(a) / norm(b);\n}\n\ndouble cross(const point2d &o, const point2d &a, const point2d &b){\n  return outer_product(a - o, b - o);\n}\n\nstruct circle{\n  point2d c;\n  double r;\n  circle(){}\n  circle(point2d c, double r): c(c), r(r){}\n};\n\nenum circle_crossing_state{\n  NOTCROSS = 4,\n  CIRCUMSCRIBE = 3,\n  INTERSECT = 2,\n  INSCRIBED = 1,\n  INCLUDED = 0,\n};\n\ncircle_crossing_state circle_crossing(const circle &a, const circle &b){\n  double d = dis(a.c, b.c);\n  cout << setprecision(20);\n  if(d > a.r + b.r + EPS)return NOTCROSS;\n  if(abs(d - (a.r + b.r)) < EPS)return CIRCUMSCRIBE;\n  if(abs(d - abs(a.r - b.r)) < EPS)return INSCRIBED;\n  if(d + EPS < abs(a.r - b.r))return INCLUDED;\n  return INTERSECT;\n}\n\nint main(int argc, char const* argv[])\n{\n  ios_base::sync_with_stdio(false);\n  cin.tie(0);\n  cout << fixed << setprecision(20);\n  INT(x); INT(y); INT(z);\n  circle c1(point2d(x, y), z);\n  cin >> x >> y >> z;\n  circle c2(point2d(x, y), z);\n  cout << circle_crossing(c1, c2) << endl;\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define EPS (1e-8)\nusing namespace std;\ntypedef complex<double> P;\n\nstruct Circle{\n  P c; //中心点\n  double r; //半径\n  Circle(P c=P(0,0), double r=0):c(c),r(r){}\n};\n\nint IntersectionCC(Circle a,Circle b){\n  int res=0;\n  double dis=abs(a.c-b.c),R=a.r+b.r;\n  if(dis>R+EPS)res++;\n  if(dis>R-EPS)res++;\n  if(dis>abs(a.r-b.r)+EPS)res++;\n  if(dis>abs(a.r-b.r)-EPS)res++;\n  return res;\n}\n\nint main(){\n  int a,b;\n  Circle c[2];\n  for(int i=0;i<2;i++){\n    cin>>a>>b>>c[i].r;\n    c[i].c=P(a,b);\n  }\n  cout<<IntersectionCC(c[0],c[1])<<endl;\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "/* Header {{{ */\n#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long readtype;\ntypedef long long var;\ntypedef long double let;\n\nreadtype read() {\n  readtype a = 0, c = getchar(), s = 0;\n  while (!isdigit(c)) s |= c == '-', c = getchar();\n  while (isdigit(c)) a = a * 10 + c - 48, c = getchar();\n  return s ? -a : a;\n}\n\n#ifdef LOCAL_LOGGER\n#define logger(...) fprintf(stderr, __VA_ARGS__)\n#define abortif(v, ...) if (v) {logger(\"Error in Line %d, Function '%s()'.\\nInfo: \", __LINE__, __FUNCTION__); logger(__VA_ARGS__); exit(0);}\n#else\n#define logger(...);\n#define abortif(v, ...);\n#endif\n/* }}} */\n\nconst let EPS = 1e-8;\n\nint sign(let x) { return (x < -EPS) ? -1 : (x > EPS ? 1 : 0); }\n\nstruct Point {\n  let x, y;\n  let dist() {\n    return sqrt(x * x + y * y);\n  }\n\n  friend Point operator - (Point a, Point b) {\n    return (Point) {a.x - b.x, a.y - b.y};\n  }\n\n  Point operator ~ () {\n    return (Point) {x, -y};\n  }\n\n  Point Rotate(let sink, let cosk) {\n    return (Point) {\n      x * cosk - y * sink, x * sink + y * cosk\n    };\n  }\n\n  Point Rotate(Point k) {\n    let z = k.dist();\n    if (!z) return *this;\n    return Rotate(k.y / z, k.x / z);\n  }\n};\n\ntypedef Point Vec;\n\nstruct Circle {\n  Point o;\n  let r;\n\n  friend Circle operator - (Circle a, Vec b) {\n    return (Circle) {a.o - b, a.r};\n  }\n\n  Circle Rotate(Vec v) {\n    return (Circle) {o.Rotate(v), r};\n  }\n\n  friend int Relate(Circle a, Circle b) {\n    Circle c = (b - a.o).Rotate(~(b.o - a.o));\n    if (sign(c.o.x + c.r - a.r) < 0 && sign(c.o.x - c.r + a.r) > 0) return 0;\n    if (sign(c.o.x + c.r - a.r) > 0 && sign(c.o.x - c.r + a.r) < 0) return 0;\n    if (sign(c.o.x + c.r - a.r) == 0 || sign(c.o.x - c.r + a.r) == 0) return 1;\n    if (sign(c.o.x - c.r - a.r) == 0 || sign(c.o.x + c.r + a.r) == 0) return 3;\n    if (sign(c.o.x - c.r - a.r) > 0 || sign(c.o.x + c.r + a.r) < 0) return 4;\n    return 2;\n  }\n};\n\nPoint ReadPoint() {\n  Point p;\n  scanf(\"%Lf%Lf\", &p.x, &p.y);\n  return p;\n}\n\nCircle ReadCircle() {\n  Circle c;\n  c.o = ReadPoint();\n  scanf(\"%Lf\", &c.r);\n  return c;\n}\nint main() {\n// #ifndef ONLINE_JUDGE\n//   freopen(\"CGL_7_A.in\", \"r\", stdin);\n//   freopen(\"CGL_7_A.out\", \"w\", stdout);\n// #endif\n// #ifdef LOCAL_LOGGER\n//   freopen(\"CGL_7_A.log\", \"w\", stderr);\n// #endif\n  Circle a = ReadCircle(), b = ReadCircle();\n  printf(\"%d\\n\", Relate(a, b));\n  return 0;\n}\n\n/* ==== Makefile ==== {{{\nCompileAndRun:\n\tmake Compile\n\tmake Run\n\nCompile:\n\tg++ -o CGL_7_A CGL_7_A.cpp -g -Wall -DLOCAL_LOGGER\n\nCompileUF:\n\tg++ -o CGL_7_A CGL_7_A.cpp -g -Wall -DLOCAL_LOGGER -fsanitize=undefined\n\nRun:\n\t./CGL_7_A < CGL_7_A.in > CGL_7_A.out\n==================\n}}} */\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<vector>\nusing namespace std;\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\nstatic const int SEPARETED = 4;\nstatic const int CIRCUMSCRIBED = 3;\nstatic const int INTERSECTED = 2;\nstatic const int INSCRIBED = 1;\nstatic const int INCLUDED = 0;\n \nclass Point{\n\tpublic:\n\t\tdouble x, y;\n \n\t\tPoint(double x = 0, double y = 0): x(x), y(y) {}\n \n\t\tPoint operator + (Point p){ return Point(x + p.x, y + p.y);}\n\t\tPoint operator - (Point p){ return Point(x - p.x, y - p.y);}\n\t\tPoint operator * (double a){ return Point(a * x, a * y);}\n\t\tPoint operator / (double a){ return Point(x / a, y / a);}\n \n\t\tdouble abs(){ return sqrt(norm());}\n\t\tdouble norm(){ return x * x + y * y;}\n \n\t\tbool operator < (const Point &p) const{\n\t\t\treturn x != p.x ? x < p.x : y < p.y;\n\t\t}\n \n\t\tbool operator == (const Point &p) const{\n\t\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t\t}\n};\nclass Circle{\n\tpublic:\n\t\tPoint c;\n\t\tdouble r;\n\t\tCircle(Point c = Point(), double r = 0.0): c(c), r(r) {}\n};\ndouble getDistance(Point a, Point b){\n\treturn (a - b).abs();\n}\nint intersection(Circle c1, Circle c2){\n\tdouble distanceBetweenCenter = getDistance(c1.c, c2.c);\n\tif(distanceBetweenCenter > c1.r + c2.r) return SEPARETED;\n\tif(equals(distanceBetweenCenter, c1.r + c2.r)) return CIRCUMSCRIBED;\n\tif(equals(distanceBetweenCenter, fabs(c1.r - c2.r))) return INSCRIBED;\n\tif(distanceBetweenCenter < fabs(c1.r - c2.r)) return INCLUDED;\n\n\treturn INTERSECTED;\n}\n\nint main(){\n\tCircle c1, c2;\n\tcin >> c1.c.x >> c1.c.y >> c1.r;\n\tcin >> c2.c.x >> c2.c.y >> c2.r;\n\tcout << intersection(c1, c2) << endl;\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n//#include \"GC_template.h\"\nusing namespace std;\n\nnamespace CG{\n    const double eps = 1e-8;\n    int sgn(double x) {\n        if (x < -eps) return -1;\n        if (x > eps) return 1;\n        return 0;\n    }\n\n    struct point {\n        double x, y;\n        point() = default;\n        point(double x, double y) : x(x), y(y) {}\n        point(const point &) = default;\n    };\n\n    typedef point vector;\n\n    point operator + (const point &A, const vector &B) {return point(A.x+B.x,A.y+B.y);}\n    vector operator - (const point &A, const point &B) {return vector(A.x-B.x,A.y-B.y);}\n    double operator * (const vector &A, const vector &B) {return A.x*B.x+A.y*B.y;}\n    vector operator * (const vector &A, double r) {return vector(A.x*r,A.y*r);}\n    vector operator * (double r, const vector &A) {return vector(A.x*r,A.y*r);}\n    vector operator / (const vector &A, double r) {return vector(A.x/r,A.y/r);}\n    double cross (const vector &A, const vector &B) {return A.x*B.y-A.y*B.x;}\n\n    double sqr(double x) {return x*x;}\n    double sqr_length(const vector &A) {return sqr(A.x)+sqr(A.y);}\n    double length(const vector &A) {return sqrt(sqr_length(A));}\n    double sqr_dist(const point &A,const point &B) {return sqr(A.x-B.x)+sqr(A.y-B.y);}\n    double dist(const point &A,const point &B) {return sqrt(sqr_dist(A,B));}\n    vector rot(const vector &A,double theta) {return vector(A.x*cos(theta)-A.y*sin(theta),A.x*sin(theta)+A.y*cos(theta));}\n    vector lerp(const vector &A, const vector &B, double t) {return A*(1-t)+B*t;}\n    bool quadartic(double A, double B, double C,std::vector<double> &vec) {\n        double det = sqr(B) - 4*A*C;\n        if(det < 0) return 0;\n        if(sgn(det) == 0) vec.push_back(-B/(2*A));\n        else {\n            vec.push_back((-B-sqrt(det))/(2*A));\n            vec.push_back((-B+sqrt(det))/(2*A));\n            if(A<0) std::swap(vec[0],vec[1]);\n        }\n        return 1;\n    }\n\n    struct segment {\n        point a, b;\n        vector v;\n        segment() = default;\n        segment(const point &a, const point &b) : a(a), b(b), v(b - a) {};\n        segment(const segment &) = default;\n    };\n\n    typedef segment line;\n\n    bool point_in_segment(const point &p, const segment &s) {\n        return sgn(cross(s.b-s.a,p-s.a)) == 0 && sgn((p-s.a)*(p-s.b)) <= 0;\n    }\n\n    struct circle {\n        point O;\n        double r;\n        circle() = default;\n        circle(const point &O, double r) : O(O), r(r) {};\n        circle(const circle &) = default;\n    };\n    const double pi = acos(-1);\n\n    int get_tangents(const point &p, const circle &cir, std::vector<line> &vec) {\n        vector u = p-cir.O;\n        double l = dist(p,cir.O);\n        if(sgn(l-cir.r) < 0) return 0;\n        if(sgn(l-cir.r) == 0) {\n            vec.emplace_back(p,p+rot(u,pi/2));\n            return 1;\n        }\n        double theta = asin(cir.r/l);\n        vec.emplace_back(p,p+rot(u,theta));\n        vec.emplace_back(p,p+rot(u,-theta));\n        return 2;\n    }\n\n    int get_tangents(circle A, circle B, std::vector<line> &vec) {\n        if (A.r < B.r) std::swap(A, B);\n        double l = dist(A.O, B.O);\n        if (sgn(l) == 0 && sgn(A.r - B.r) == 0) return -1;\n        if (sgn(A.r - B.r - l) > 0) return 0;\n        if (sgn(A.r - B.r - l) == 0) {\n            vec.emplace_back(lerp(A.O, B.O, A.r / l), rot(B.O - A.O, pi / 2));\n            return 1;\n        }\n\n        {\n            double theta = acos((A.r - B.r) / l);\n            vector unit = (A.O - B.O) / l;\n            vec.emplace_back(A.O + (A.r * rot(unit, theta)), B.O + (B.r * rot(unit, theta)));\n            vec.emplace_back(A.O + (A.r * rot(unit, -theta)), B.O + (B.r * rot(unit, -theta)));\n        }\n\n        {\n            if (sgn(A.r + B.r - l) > 0) return 2;\n            if (sgn(A.r + B.r - l) == 0) {\n                vec.emplace_back(lerp(A.O, B.O, A.r / l), rot(A.O - B.O, pi / 2));\n                return 3;\n            }\n            double theta = acos((A.r + B.r) / l);\n            vector unit = (A.O - B.O) / l;\n            vec.emplace_back(A.O + (A.r * rot(unit, theta)), B.O + (B.r * rot(unit, theta)));\n            vec.emplace_back(A.O + (A.r * rot(unit, -theta)), B.O + (B.r * rot(unit, -theta)));\n            return 4;\n        }\n    }\n\n    int circle_line_intersection(const circle &c, const line &l,std::vector<point> &vec) {\n        vector d = l.v;\n        double A = d * d, B = d * (l.a - c.O) * 2, C = sqr_dist(l.a, c.O) - sqr(c.r);\n        std::vector<double> vect;\n        int t = quadartic(A, B, C, vect);\n        if (t == 0) return 0;\n        for (auto v : vect)\n            vec.emplace_back(lerp(l.a, l.b, v));\n        return t;\n    }\n\n    int circle_circle_intersection(circle A, circle B,std::vector<point> &vec) {\n        if (A.r < B.r) std::swap(A, B);\n        double l = dist(A.O, B.O);\n        if (sgn(l) == 0) {\n            if (sgn(A.r - B.r) == 0) return -1;\n            else return 0;\n        }\n        if (sgn(A.r + B.r - l) < 0 || sgn(A.r - B.r - l) > 0) return 0;\n        double theta = acos((sqr(A.r) + sqr(l) - sqr(B.r)) / (2 * A.r * l));\n        if (sgn(A.r + B.r - l) == 0) {\n            vec.emplace_back(lerp(A.O, B.O, A.r / l));\n            return 1;\n        }\n        vector unit = (A.O - B.O) / l;\n        vec.emplace_back(A.r * rot(unit, theta));\n        vec.emplace_back(A.r * rot(unit, -theta));\n    }\n}\n\n\nint main() {\n    CG::circle A,B;\n    double a,b,c;\n    cin >> a >> b >> c;\n    A.O = CG::point(a,b);A.r = c;\n    cin >> a >> b >> c;\n    B.O = CG::point(a,b);B.r = c;\n    vector<CG::line> vec;\n    cout << CG::get_tangents(A,B,vec) << endl;\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nvoid solve()\n{\n  int x1, x2, y1, y2, r1, r2;\n  cin >> x1 >> y1 >> r1;\n  cin >> x2 >> y2 >> r2;\n  int dist2 = (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);\n  int rrrr2 = (r1 + r2) * (r1 + r2);\n\n  if(dist2 > rrrr2) {\n    cout << 4 << endl;\n  } else if(dist2 == rrrr2) {\n    cout << 3 << endl;\n  } else if(dist2 > (r1 - r2) * (r1 - r2)) {\n    cout << 2 << endl;\n  } else if(dist2 == (r1 - r2) * (r1 - r2)) {\n    cout << 1 << endl;\n  } else {\n    cout << 0 << endl;\n  }\n}\n\nint main()\n{\n  cin.tie(0);\n  ios::sync_with_stdio(false);\n  solve();\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define eps 1e-9\n#define nmax 200\n#define f(c,a,b) for(int c=a; c<=b; c++)\n\nusing namespace std;\ntypedef double db;\nstruct P{\n    db x, y;\n    P(){}\n    P(db x, db y) : x(x) , y(y) {}\n    P operator - (P a){ return P(x-a.x, y-a.y); }\n    db times(P a){ return x*a.y-y*a.x; }\n    db clen() { return x*x+y*y; }\n}po[nmax];\n\nint sign(db x) { return (x<-eps) ? -1 : x>eps; }\n\nint inc(P c1, db r1, P c2, db r2){\n    db dis = (c1-c2).clen();\n    int x1 = sign( (r1+r2)*(r1+r2)-dis ), x2=sign( (r1-r2)*(r1-r2)-dis );\n    //printf(\"%lf %lf %lf %d\\n\",r1,r2,dis, x1);\n    if(x1 == 0) return 3;\n    else if(x1 == -1) return 4;\n    else {\n        if(x2 == 0) return 1;\n        else if(x2 == 1) return 0;\n        else return 2;\n    }\n}\n\nint main(){\n    //freopen(\"owo.in\",\"r\",stdin);\n    P c1, c2; \n    db r1, r2;\n    cin >> c1.x >> c1.y >> r1;\n    cin >> c2.x >> c2.y >> r2;\n    cout << inc(c1, r1, c2, r2) << endl;\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n\nusing namespace std;\n\nconst double EPS = 1e-8, PI = acos(-1);\n\ninline bool eq(double a, double b) { return fabs(b - a) < EPS; }\n\nusing Point = complex< double >;\n\nistream &operator>>(istream &is, Point &p) {\n  double a, b;\n  is >> a >> b;\n  p = Point(a, b);\n  return is;\n}\n\nostream &operator<<(ostream &os, Point &p) {\n  os << fixed << setprecision(10) << p.real() << \" \" << p.imag();\n}\n\nPoint rotate(double theta, const Point &p) {\n  return Point(cos(theta) * p.real() - sin(theta) * p.imag(), sin(theta) * p.real() + cos(theta) * p.imag());\n}\n\ndouble radian_to_degree(double r) {\n  return (r * 180.0 / PI);\n}\n\ndouble degree_to_radian(double d) {\n  return (d * PI / 180.0);\n}\n\ndouble get_angle(const Point &a, const Point &b, const Point &c) {\n  const Point v(b - a), w(c - b);\n  double alpha = atan2(v.imag(), v.real()), beta = atan2(w.imag(), w.real());\n  if(alpha > beta) swap(alpha, beta);\n  double theta = (beta - alpha);\n  return min(theta, 2 * acos(-1) - theta);\n}\n\nnamespace std {\n  bool operator<(const Point &a, const Point &b) {\n    return a.real() != b.real() ? a.real() < b.real() : a.imag() < b.imag();\n  }\n}\n\n\nstruct Line {\n  Point a, b;\n\n  Line() {}\n\n  Line(Point a, Point b) : a(a), b(b) {}\n\n  Line(double A, double B, double C) // Ax + By = C\n  {\n    if(eq(A, 0)) a = Point(0, C / B), b = Point(1, C / B);\n    else if(eq(B, 0)) b = Point(C / A, 0), b = Point(C / A, 1);\n    else a = Point(0, C / B), b = Point(C / A, 0);\n  }\n\n  friend ostream &operator<<(ostream &os, Line &p) {\n    return os << p.a << \" to \" << p.b;\n  }\n\n  friend istream &operator>>(istream &is, Line &a) {\n    return is >> a.a >> a.b;\n  }\n};\n\nstruct Segment : Line {\n  Segment() {}\n\n  Segment(Point a, Point b) : Line(a, b) {}\n};\n\nstruct Circle {\n  Point p;\n  double r;\n\n  Circle() {}\n\n  Circle(Point p, double r) : p(p), r(r) {}\n};\n\nusing Points = vector< Point >;\nusing Polygon = vector< Point >;\nusing Segments = vector< Segment >;\nusing Lines = vector< Line >;\nusing Circles = vector< Circle >;\n\ndouble cross(const Point &a, const Point &b) {\n  return real(a) * imag(b) - imag(a) * real(b);\n}\n\ndouble dot(const Point &a, const Point &b) {\n  return real(a) * real(b) + imag(a) * imag(b);\n}\n\nint ccw(const Point &a, Point b, Point c) {\n  b = b - a, c = c - a;\n  if(cross(b, c) > EPS) return +1;  // \"COUNTER_CLOCKWISE\"\n  if(cross(b, c) < -EPS) return -1; // \"CLOCKWISE\"\n  if(dot(b, c) < 0) return +2;      // \"ONLINE_BACK\"\n  if(norm(b) < norm(c)) return -2;  // \"ONLINE_FRONT\"\n  return 0;                         // \"ON_SEGMENT\"\n}\n\nbool parallel(const Line &a, const Line &b) {\n  return abs(cross(a.b - a.a, b.b - b.a)) < EPS;\n}\n\nbool orthogonal(const Line &a, const Line &b) {\n  return abs(dot(a.a - a.b, b.a - b.b)) < EPS;\n}\n\nPoint projection(const Line &l, const Point &p) {\n  double t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n  return l.a + (l.a - l.b) * t;\n}\n\nPoint projection(const Segment &l, const Point &p) {\n  double t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n  return l.a + (l.a - l.b) * t;\n}\n\nPoint reflection(const Line &l, const Point &p) {\n  return p + (projection(l, p) - p) * 2.0;\n}\n\nbool Intersect(const Line &l, const Point &p) {\n  return abs(ccw(l.a, l.b, p)) != 1;\n}\n\n\nbool intersect(const Line &l, const Line &m) {\n  return abs(cross(l.b - l.a, m.b - m.a)) > EPS || abs(cross(l.b - l.a, m.b - l.a)) < EPS;\n}\n\nbool intersect(const Segment &s, const Point &p) {\n  return ccw(s.a, s.b, p) == 0;\n}\n\nbool intersect(const Line &l, const Segment &s) {\n  return cross(l.b - l.a, s.a - l.a) * cross(l.b - l.a, s.b - l.a) < EPS;\n}\n\ndouble distance(const Line &l, const Point &p);\n\nbool intersect(const Circle &c, const Line &l) {\n  return distance(l, c.p) <= c.r + EPS;\n}\n\nbool intersect(const Circle &c, const Point &p) {\n  return abs(abs(p - c.p) - c.r) < EPS;\n}\n\nbool intersect(const Segment &s, const Segment &t) {\n  return ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 && ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0;\n}\n\nint intersect(const Circle &c, const Segment &l) {\n  if(norm(projection(l, c.p) - c.p) - c.r * c.r > EPS) return 0;\n  const double d1 = abs(c.p - l.a), d2 = abs(c.p - l.b);\n  if(d1 < c.r + EPS && d2 < c.r + EPS) return 0;\n  if(d1 < c.r - EPS && d2 > c.r + EPS || d1 > c.r + EPS && d2 < c.r - EPS) return 1;\n  const Point h = projection(l, c.p);\n  if(dot(l.a - h, l.b - h) < 0) return 2;\n  return 0;\n}\n\nint intersect(Circle c1, Circle c2) {\n  if(c1.r < c2.r) swap(c1, c2);\n  double d = abs(c1.p - c2.p);\n  if(c1.r + c2.r < d) return 4;\n  if(eq(c1.r + c2.r, d)) return 3;\n  if(c1.r - c2.r < d) return 2;\n  if(eq(c1.r - c2.r, d)) return 1;\n  return 0;\n}\n\ndouble distance(const Point &a, const Point &b) {\n  return abs(a - b);\n}\n\ndouble distance(const Line &l, const Point &p) {\n  return abs(p - projection(l, p));\n}\n\ndouble distance(const Line &l, const Line &m) {\n  return intersect(l, m) ? 0 : distance(l, m.a);\n}\n\ndouble distance(const Segment &s, const Point &p) {\n  Point r = projection(s, p);\n  if(intersect(s, r)) return abs(r - p);\n  return min(abs(s.a - p), abs(s.b - p));\n}\n\ndouble distance(const Segment &a, const Segment &b) {\n  if(intersect(a, b)) return 0;\n  return min({distance(a, b.a), distance(a, b.b), distance(b, a.a), distance(b, a.b)});\n}\n\ndouble distance(const Line &l, const Segment &s) {\n  if(intersect(l, s)) return 0;\n  return min(distance(l, s.a), distance(l, s.b));\n}\n\nPoint crosspoint(const Line &l, const Line &m) {\n  double A = cross(l.b - l.a, m.b - m.a);\n  double B = cross(l.b - l.a, l.b - m.a);\n  if(abs(A) < EPS && abs(B) < EPS) return m.a;\n  return m.a + (m.b - m.a) * B / A;\n}\n\nPoint crosspoint(const Segment &l, const Segment &m) {\n  double A = cross(l.b - l.a, m.b - m.a);\n  double B = cross(l.b - l.a, l.b - m.a);\n  if(abs(A) < EPS && abs(B) < EPS) return m.a;\n  return m.a + (m.b - m.a) * B / A;\n}\n\npair< Point, Point > crosspoint(const Circle &c, const Line l) {\n  Point hp = projection(l, c.p), h = hp - c.p;\n  const double d2 = norm(h);\n  Point v = (l.b - l.a) * sqrt(c.r * c.r - d2) / abs(l.b - l.a);\n  return {hp - v, hp + v};\n}\n\npair< Point, Point > crosspoint(const Circle &c, const Segment &l) {\n  Line aa = Line(l.a, l.b);\n  if(intersect(c, l) == 2) return crosspoint(c, aa);\n  auto ret = crosspoint(c, aa);\n  if(dot(l.a - ret.first, l.b - ret.first) < 0) ret.second = ret.first;\n  else ret.first = ret.second;\n  return ret;\n}\n\npair< Point, Point > crosspoint(const Circle &c1, const Circle &c2) {\n  double d = abs(c1.p - c2.p);\n  double a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n  double t = atan2(c2.p.imag() - c1.p.imag(), c2.p.real() - c1.p.real());\n  Point p1 = c1.p + Point(cos(t + a) * c1.r, sin(t + a) * c1.r);\n  Point p2 = c1.p + Point(cos(t - a) * c1.r, sin(t - a) * c1.r);\n  return {p1, p2};\n}\n\nbool is_convex(const Polygon &p) {\n  int n = (int) p.size();\n  for(int i = 0; i < n; i++) {\n    if(ccw(p[(i + n - 1) % n], p[i], p[(i + 1) % n]) == -1) return false;\n  }\n  return true;\n}\n\nPolygon convex_hull(Polygon &p) {\n  int n = (int) p.size(), k = 0;\n  if(n <= 2) return p;\n  sort(p.begin(), p.end());\n  vector< Point > ch(2 * n);\n  for(int i = 0; i < n; ch[k++] = p[i++]) {\n    while(k >= 2 && cross(ch[k - 1] - ch[k - 2], p[i] - ch[k - 1]) < 0) --k;\n  }\n  for(int i = n - 2, t = k + 1; i >= 0; ch[k++] = p[i--]) {\n    while(k >= t && cross(ch[k - 1] - ch[k - 2], p[i] - ch[k - 1]) < 0) --k;\n  }\n  ch.resize(k - 1);\n  return ch;\n}\n\nenum {\n  OUT, ON, IN\n};\n\nint contains(const Polygon &Q, const Point &p) {\n  bool in = false;\n  for(int i = 0; i < Q.size(); i++) {\n    Point a = Q[i] - p, b = Q[(i + 1) % Q.size()] - p;\n    if(a.imag() > b.imag()) swap(a, b);\n    if(a.imag() <= 0 && 0 < b.imag() && cross(a, b) < 0) in = !in;\n    if(cross(a, b) == 0 && dot(a, b) <= 0) return ON;\n  }\n  return in ? IN : OUT;\n}\n\n\nbool merge_if_able(Segment &s1, Segment s2) {\n  if(abs(cross(s1.b - s1.a, s2.b - s2.a)) > EPS) return false;\n  if(ccw(s1.a, s2.a, s1.b) == 1 || ccw(s1.a, s2.a, s1.b) == -1) return false;\n  if(ccw(s1.a, s1.b, s2.a) == -2 || ccw(s2.a, s2.b, s1.a) == -2) return false;\n  s1 = Segment(min(s1.a, s2.a), max(s1.b, s2.b));\n  return true;\n}\n\nvoid merge_segments(vector< Segment > &segs) {\n  for(int i = 0; i < segs.size(); i++) {\n    if(segs[i].b < segs[i].a) swap(segs[i].a, segs[i].b);\n  }\n  for(int i = 0; i < segs.size(); i++) {\n    for(int j = i + 1; j < segs.size(); j++) {\n      if(merge_if_able(segs[i], segs[j])) {\n        segs[j--] = segs.back(), segs.pop_back();\n      }\n    }\n  }\n}\n\nvector< vector< int > > segment_arrangement(vector< Segment > &segs, vector< Point > &ps) {\n  vector< vector< int > > g;\n  int N = (int) segs.size();\n  for(int i = 0; i < N; i++) {\n    ps.emplace_back(segs[i].a);\n    ps.emplace_back(segs[i].b);\n    for(int j = i + 1; j < N; j++) {\n      const Point p1 = segs[i].b - segs[i].a;\n      const Point p2 = segs[j].b - segs[j].a;\n      if(cross(p1, p2) == 0) continue;\n      if(intersect(segs[i], segs[j])) {\n        ps.emplace_back(crosspoint(segs[i], segs[j]));\n      }\n    }\n  }\n  sort(begin(ps), end(ps));\n  ps.erase(unique(begin(ps), end(ps)), end(ps));\n\n  int M = (int) ps.size();\n  g.resize(M);\n  for(int i = 0; i < N; i++) {\n    vector< int > vec;\n    for(int j = 0; j < M; j++) {\n      if(intersect(segs[i], ps[j])) {\n        vec.emplace_back(j);\n      }\n    }\n    for(int j = 1; j < vec.size(); j++) {\n      g[vec[j - 1]].push_back(vec[j]);\n      g[vec[j]].push_back(vec[j - 1]);\n    }\n  }\n  return (g);\n}\n\nPolygon convex_cut(Polygon &U, Line l) {\n  Polygon ret;\n  for(int i = 0; i < U.size(); i++) {\n    Point now = U[i], nxt = U[(i + 1) % U.size()];\n    if(ccw(l.a, l.b, now) != -1) ret.push_back(now);\n    if(ccw(l.a, l.b, now) * ccw(l.a, l.b, nxt) < 0) {\n      ret.push_back(crosspoint(Line(now, nxt), l));\n    }\n  }\n  return (ret);\n}\n\ndouble area2(const Polygon &p) {\n  double A = 0;\n  for(int i = 0; i < p.size(); ++i) {\n    A += cross(p[i], p[(i + 1) % p.size()]);\n  }\n  return A;\n}\n\ndouble convex_diameter(Polygon &p) {\n  int N = (int) p.size();\n  int is = 0, js = 0;\n  for(int i = 1; i < N; i++) {\n    if(p[i].imag() > p[is].imag()) is = i;\n    if(p[i].imag() < p[js].imag()) js = i;\n  }\n  double maxdis = norm(p[is] - p[js]);\n\n  int maxi, maxj, i, j;\n  i = maxi = is;\n  j = maxj = js;\n  do {\n    if(cross(p[(i + 1) % N] - p[i], p[(j + 1) % N] - p[j]) >= 0) {\n      j = (j + 1) % N;\n    } else {\n      i = (i + 1) % N;\n    }\n    if(norm(p[i] - p[j]) > maxdis) {\n      maxdis = norm(p[i] - p[j]);\n      maxi = i;\n      maxj = j;\n    }\n  } while(i != is || j != js);\n  return sqrt(maxdis);\n}\n\ndouble closest_pair(Points ps) {\n  if(ps.size() <= 1) throw (0);\n\n  auto compare_y = [&](const Point &a, const Point &b) {\n    return imag(a) < imag(b);\n  };\n  vector< Point > beet(ps.size());\n\n  function< double(int, int) > rec = [&](int left, int right) {\n    if(right - left <= 1) return 1e18;\n    int mid = (left + right) >> 1;\n    auto x = real(ps[mid]);\n    auto ret = min(rec(left, mid), rec(mid, right));\n    inplace_merge(begin(ps) + left, begin(ps) + mid, begin(ps) + right, compare_y);\n    int ptr = 0;\n    for(int i = left; i < right; i++) {\n      if(abs(real(ps[i]) - x) >= ret) continue;\n      for(int j = 0; j < ptr; j++) {\n        auto luz = ps[i] - beet[ptr - j - 1];\n        if(imag(luz) >= ret) break;\n        ret = min(ret, abs(luz));\n      }\n      beet[ptr++] = ps[i];\n    }\n    return ret;\n  };\n  return rec(0, (int) ps.size());\n}\n\n\nint main() {\n  Circle c, d;\n  cin >> c.p >> c.r;\n  cin >> d.p >> d.r;\n  cout << intersect(c, d) << endl;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define TemplateVersion \"3.4.0\"\n// Useful Marcos\n//====================START=====================\n// Compile use C++11 and above\n#ifdef LOCAL\n#define debug(args...)                           \\\n    {                                            \\\n        string _s = #args;                       \\\n        replace(_s.begin(), _s.end(), ',', ' '); \\\n        stringstream _ss(_s);                    \\\n        istream_iterator<string> _it(_ss);       \\\n        err(_it, args);                          \\\n    }\nvoid err(istream_iterator<string> it)\n{\n}\ntemplate <typename T, typename... Args>\nvoid err(istream_iterator<string> it, T a, Args... args)\n{\n    cerr << *it << \" = \" << a << endl;\n    err(++it, args...);\n}\n#define MSG cout << \"Finished\" << endl\n#else\n#define debug(args...)\n#define MSG\n#endif\n#if __cplusplus >= 201703L\ntemplate <typename... Args>\nvoid readln(Args &... args)\n{\n    ((cin >> args), ...);\n}\ntemplate <typename... Args>\nvoid writeln(Args... args)\n{\n    ((cout << args << \" \"), ...);\n    cout << endl;\n}\n#elif __cplusplus >= 201103L\nvoid readln()\n{\n}\ntemplate <typename T, typename... Args>\nvoid readln(T &a, Args &... args)\n{\n    cin >> a;\n    readln(args...);\n}\nvoid writeln()\n{\n    cout << endl;\n}\ntemplate <typename T, typename... Args>\nvoid writeln(T a, Args... args)\n{\n    cout << a << \" \";\n    writeln(args...);\n}\n#endif\n#if __cplusplus >= 201103L\n#define FOR(_i, _begin, _end) for (auto _i = _begin; _i < _end; _i++)\n#define FORR(_i, _begin, _end) for (auto _i = _begin; _i > _end; _i--)\n#else\n#define FOR(_i, _begin, _end) for (int _i = (int)_begin; _i < (int)_end; _i++)\n#define FORR(_i, _begin, _end) for (int _i = (int)_begin; _i > (int)_end; _i--)\n#define nullptr NULL\n#endif\n#if __cplusplus >= 201103L\n#define VIS(_kind, _name, _size) \\\n    vector<_kind> _name(_size);  \\\n    for (auto &i : _name)        \\\n        cin >> i;\n#else\n#define VIS(_kind, _name, _size)    \\\n    vector<_kind> _name;            \\\n    _name.resize(_size);            \\\n    for (int i = 0; i < _size; i++) \\\n        cin >> _name[i];\n#endif\n// alias\n#define mp make_pair\n#define pb push_back\n#define eb emplace_back\n#define all(x) (x).begin(), (x).end()\n#define tcase() \\\n    int T;      \\\n    cin >> T;   \\\n    FOR(kase, 1, T + 1)\n// Swap max/min\ntemplate <typename T>\nbool smax(T &a, const T &b)\n{\n    if (a > b)\n        return false;\n    a = b;\n    return true;\n}\ntemplate <typename T>\nbool smin(T &a, const T &b)\n{\n    if (a < b)\n        return false;\n    a = b;\n    return true;\n}\n// ceil divide\ntemplate <typename T>\nT cd(T a, T b)\n{\n    return (a + b - 1) / b;\n}\n// min exchange\ntemplate <typename T>\nbool se(T &a, T &b)\n{\n    if (a < b)\n        return false;\n    swap(a, b);\n    return true;\n}\n// A better MAX choice\nconst int INF = 0x3f3f3f3f;\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int, int> pii;\ntypedef vector<int> vi;\ntypedef vector<ll> vll;\ntypedef set<int> si;\ntypedef vector<string> cb;\n//====================END=====================\n\n// Constants here\nconst double EPS = 1e-8;\nconst double PI = acos(-1);\nconst double FAC = 1e-18;\n\ntypedef double db;\n\nint sgn(db x)\n{\n    if (abs(x) < EPS)\n        return 0;\n    if (x < 0)\n        return -1;\n    return 1;\n}\n\ninline db sqr(db x) { return x * x; }\n\n// Point/Vector\nstruct Point\n{\n    db x, y;\n\n    Point() : x(0.0), y(0.0) {}\n\n    Point(db _x, db _y) : x(_x), y(_y) {}\n\n    bool operator==(const Point &p)\n    {\n        return sgn(x - p.x) == 0 && sgn(y - p.y) == 0;\n    }\n\n    bool operator<(const Point &p)\n    {\n        int c = sgn(x - p.x);\n        if (c)\n            return c == -1;\n        return sgn(y - p.y) == -1;\n    }\n\n    Point operator+(const Point &p) { return Point(x + p.x, y + p.y); }\n    Point operator-(const Point &p) { return Point(x - p.x, y - p.y); }\n    Point operator*(db d) { return Point(x * d, y * d); }\n    Point operator/(db d) { return Point(x / d, y / d); }\n\n    db operator^(const Point &p) { return x * p.y - y * p.x; }\n    db operator*(const Point &p) { return x * p.x + y * p.y; }\n\n    db dis(const Point &p) { return (*this - p).len(); }\n    db alpha() { return atan2(y, x); }\n\n    Point unit() { return *this / len(); }\n    Point scale(db r) { return unit() * r; }\n\n    Point rotCC() { return Point(-y, x); }\n    Point rotCL() { return Point(y, -x); }\n\n    Point rot(Point p, db angle)\n    {\n        Point v = *this - p;\n        db c = cos(angle), s = sin(angle);\n        return Point(p.x + v.x * c - v.y * s, p.y + v.x * s + v.y * c);\n    }\n\n    db len() { return hypot(x, y); }\n    db len2() { return x * x + y * y; }\n\n    db rad(Point a, Point b)\n    {\n        Point ap = a - *this, bp = b - *this;\n        return abs(atan2(abs(ap ^ bp), ap * bp));\n    }\n\n    void read() { cin >> x >> y; }\n    void write() { cout << x << ' ' << y; }\n    void Debug() { cerr << \"Point: (\" << x << \", \" << y << \")\\n\"; }\n};\n\n// Line\nstruct Line\n{\n    Point s, e;\n\n    Line(){};\n\n    Line(Point _s, Point _e) : s(_s), e(_e) {}\n\n    Line(Point p, db angle)\n    {\n        s = p;\n        if (sgn(angle - PI / 2))\n            e = (s + Point(1, tan(angle)));\n        else\n            e = (s + Point(0, 1));\n    }\n\n    //ax+by+c=0\n    Line(db a, db b, db c)\n    {\n        if (sgn(a) == 0)\n        {\n            s = Point(0, -c / b);\n            e = Point(1, -c / b);\n        }\n        else if (sgn(b) == 0)\n        {\n            s = Point(-c / a, 0);\n            e = Point(-c / a, 1);\n        }\n        else\n        {\n            s = Point(0, -c / b);\n            e = Point(1, -(c + a) / b);\n        }\n    }\n\n    db len() { return s.dis(e); }\n    db angle()\n    {\n        db ans = atan2(e.y - s.y, e.x - s.x);\n        if (sgn(ans) == -1)\n            ans += PI;\n        if (sgn(ans - PI) == 0)\n            ans -= PI;\n        return ans;\n    }\n\n    // 1 -> On Counter-clockwise\n    // 2 -> On Clockwise\n    // 3 -> On Line BUT MAY NOT ON THE SEGMENT!\n    int relation(Point p)\n    {\n        int c = sgn((p - s) ^ (e - s));\n        if (c < 0)\n            return 1;\n        else if (c > 0)\n            return 2;\n        return 3;\n    }\n\n    bool checkOn(Point p) { return relation(p) == 3 && sgn((p - s) ^ (p - e)) <= 0; }\n\n    bool parallel(Line l) { return sgn((e - s) ^ (l.e - l.s)) == 0; }\n\n    // 0 -> Not Intersect\n    // 1 -> Informal\n    // 2 -> Formal Intersection\n    int crossSS(Line l)\n    {\n        int d1 = sgn((e - s) ^ (l.s - s));\n        int d2 = sgn((e - s) ^ (l.e - s));\n        int d3 = sgn((l.e - l.s) ^ (s - l.s));\n        int d4 = sgn((l.e - l.s) ^ (e - l.s));\n        if ((d1 ^ d2) == -2 && (d3 ^ d4) == -2)\n            return 2;\n        return (d1 == 0 && sgn((l.s - s) * (l.s - e)) <= 0) ||\n               (d2 == 0 && sgn((l.e - s) * (l.e - e)) <= 0) ||\n               (d3 == 0 && sgn((s - l.s) * (s - l.e)) <= 0) ||\n               (d4 == 0 && sgn((e - l.s) * (e - l.e)) <= 0);\n    }\n\n    // 0 -> Not Intersect\n    // 1 -> Informal\n    // 2 -> Formal Intersection\n    int crossLS(Line l)\n    {\n        int d1 = sgn((e - s) ^ (l.s - s));\n        int d2 = sgn((e - s) ^ (l.e - s));\n        if ((d1 ^ d2) == -2)\n            return 2;\n        return (d1 == 0 || d2 == 0);\n    }\n\n    // 0 -> Parallel\n    // 1 -> Same\n    // 2 -> Intersect\n    int crossLL(Line l)\n    {\n        if (this->parallel(l))\n            return l.relation(s) == 3;\n        return 2;\n    }\n\n    Point intersec(Line l)\n    {\n        db a1 = (l.e - l.s) ^ (s - l.s);\n        db a2 = (l.e - l.s) ^ (e - l.s);\n        return Point((s.x * a2 - e.x * a1) / (a2 - a1), (s.y * a2 - e.y * a1) / (a2 - a1));\n    }\n\n    db disPL(Point p) { return abs((p - s) ^ (e - s)) / len(); }\n    db disPS(Point p)\n    {\n        if (sgn((p - s) * (e - s)) < 0 || sgn((p - e) * (s - e)) < 0)\n            return min(p.dis(s), p.dis(e));\n        return disPL(p);\n    }\n    db disSS(Line l) { return min(min(disPS(l.s), disPS(l.e)), min(l.disPS(s), l.disPS(e))); }\n\n    Point proj(Point p) { return s + ((e - s) * ((e - s) * (p - s))) / ((e - s).len2()); }\n    Point refl(Point p)\n    {\n        Point q = proj(p);\n        return Point(2 * q.x - p.x, 2 * q.y - p.y);\n    }\n\n    bool operator==(Line l) { return s == l.s && e == l.e; }\n\n    void adjust()\n    {\n        if (e < s)\n            swap(s, e);\n    }\n\n    void read()\n    {\n        s.read();\n        e.read();\n    }\n\n    void Debug() { cerr << \"Line: Start: (\" << s.x << \", \" << s.y << \") End: (\" << e.x << \", \" << e.y << \")\\n\"; }\n};\n\n// Circle\nstruct Circle\n{\n    Point p;\n    db r;\n\n    Circle(){};\n\n    Circle(Point _p, db _r) : p(_p), r(_r) {}\n\n    Circle(db x, db y, db _r) : p({x, y}), r(_r) {}\n\n    Circle(Point a, Point b, Point c, bool in = false)\n    {\n        if (!in)\n        {\n            Line u = Line((a + b) / 2, (a + b) / 2 + (b - a).rotCC());\n            Line v = Line((b + c) / 2, (b + c) / 2 + (c - b).rotCC());\n            p = u.intersec(v);\n            r = p.dis(a);\n        }\n        else\n        {\n            Line u, v;\n            db m = atan2(b.y - a.y, b.x - a.x), n = atan2(c.y - a.y, c.x - a.x);\n            u.s = a;\n            u.e = a + Point(cos((n + m) / 2), sin((n + m) / 2));\n            v.s = b;\n            m = atan2(a.y - b.y, a.x - b.x), n = atan2(c.y - b.y, c.x - b.x);\n            v.e = b + Point(cos((n + m) / 2), sin((n + m) / 2));\n            p = u.intersec(v);\n            r = Line(a, b).disPS(p);\n        }\n    }\n\n    bool operator==(const Circle &c) { return p == c.p && sgn(r - c.r) == 0; }\n\n    bool operator<(const Circle &c) { return (p < c.p) || (p == c.p && sgn(r - c.r) < 0); }\n\n    db area() { return PI * r * r; }\n\n    db cir() { return 2 * PI * r; }\n\n    // 0 -> Outside\n    // 1 -> On\n    // 2 -> Inside\n    int relationP(Point v)\n    {\n        db dis = v.dis(p);\n        if (sgn(dis - r) < 0)\n            return 2;\n        else if (sgn(dis - r) == 0)\n            return 1;\n        return 0;\n    }\n\n    // The number of intersections\n    int relationS(Line l)\n    {\n        db dis = l.disPS(p);\n        if (sgn(dis - r) < 0)\n            return 2;\n        else if (sgn(dis - r) == 0)\n            return 1;\n        return 0;\n    }\n\n    // The number of intersections\n    int relationL(Line l)\n    {\n        db dis = l.disPL(p);\n        if (sgn(dis - r) < 0)\n            return 2;\n        else if (sgn(dis - r) == 0)\n            return 1;\n        return 0;\n    }\n\n    // 1 -> Inside\n    // 2 -> Internally-tangent\n    // 3 -> Intersect\n    // 4 -> Externally-tangent\n    // 5 -> Disjoint\n    int relationC(Circle c)\n    {\n        db d = p.dis(c.p);\n        if (sgn(d - r - c.r) > 0)\n            return 5;\n        if (sgn(d - r - c.r) == 0)\n            return 4;\n        db l = abs(r - c.r);\n        if (sgn(d - r - c.r) < 0 && sgn(d - l) > 0)\n            return 3;\n        if (sgn(d - l) == 0)\n            return 2;\n        // TODO: Check if this one is necessary\n        // if (sgn(d - l) < 0)\n        return 1;\n    }\n\n    // The return value is the number of intersections\n    int crossC(Circle c, Point &p1, Point &p2)\n    {\n        int re = relationC(c);\n        if (re == 1 || re == 5)\n            return 0;\n        db d = p.dis(c.p), l = (d * d + r * r - c.r * c.r) / (2.0 * d), h = sqrt(r * r - l * l);\n        Point tmp = p + (c.p - p).scale(l);\n        p1 = tmp + (c.p - p).rotCC().scale(h);\n        p2 = tmp + (c.p - p).rotCL().scale(h);\n        if (re == 2 || re == 4)\n            return 1;\n        return 2;\n    }\n\n    // Same as above\n    int crossL(Line l, Point &p1, Point &p2)\n    {\n        if (this->relationL(l) != 0)\n            return 0;\n        Point a = l.proj(p);\n        db d = l.disPL(p);\n        d = sqrt(r * r - d * d);\n        if (sgn(d) == 0)\n        {\n            p1 = a;\n            p2 = a;\n            return 1;\n        }\n        p1 = a + (l.e - l.s).scale(d);\n        p2 = a - (l.e - l.s).scale(d);\n        return 2;\n    }\n\n    int tangent(Point q, Line &u, Line &v)\n    {\n        int x = relationP(q);\n        if (x == 2)\n            return 0;\n        if (x == 1)\n        {\n            u = Line(q, q + (q - p).rotCC());\n            v = u;\n            return 1;\n        }\n        db d = p.dis(q);\n        db l = r * r / d;\n        db h = sqrt(r * r - l * l);\n        u = Line(q, p + ((q - p).scale(l) + (q - p).rotCC().scale(h)));\n        v = Line(q, p + ((q - p).scale(l) + (q - p).rotCL().scale(h)));\n        return 2;\n    }\n\n    // The area of intersecting space\n    // With circle c\n    db area(Circle c)\n    {\n        int re = relationC(c);\n        if (re >= 4)\n            return 0;\n        if (re <= 2)\n            return min(area(), c.area());\n        db d = p.dis(c.p);\n        db hf = (r + c.r + d) / 2.0;\n        db ss = 2 * sqrt(hf * (hf - r) * (hf - c.r) * (hf - d));\n        db a1 = acos((r * r + d * d - c.r * c.r) / (2.0 * r * d));\n        a1 = a1 * r * r;\n        db a2 = acos((c.r * c.r + d * d - r * r) / (2.0 * c.r * d));\n        a2 = a2 * c.r * c.r;\n        return a1 + a2 - ss;\n    }\n\n    // The area of intersecting space\n    // With triangle PAB\n    db area(Point a, Point b)\n    {\n        if (sgn((p - a) ^ (p - b)) == 0)\n            return 0.0;\n        Point q[5];\n        int len = 0;\n        q[len++] = a;\n        Line l(a, b);\n        Point p1, p2;\n        if (crossL(l, q[1], q[2]) == 2)\n        {\n            if (sgn((a - q[1]) * (b - q[1])) < 0)\n                q[len++] = q[1];\n            if (sgn((a - q[2]) * (b - q[2])) < 0)\n                q[len++] = q[2];\n        }\n        q[len++] = b;\n        if (len == 4 && sgn((q[0] - q[1]) * (q[2] - q[1])) > 0)\n            swap(q[1], q[2]);\n        double res = 0;\n        for (int i = 0; i < len - 1; i++)\n        {\n            if (relationP(q[i]) == 0 || relationP(q[i + 1]) == 0)\n            {\n                double arg = p.rad(q[i], q[i + 1]);\n                res += r * r * arg / 2.0;\n            }\n            else\n                res += fabs((q[i] - p) ^ (q[i + 1] - p)) / 2.0;\n        }\n        return res;\n    }\n\n    // Two circle whose center are a and b respectivelly\n    static int GetCircle(Point a, Point b, db r, Circle &c1, Circle &c2)\n    {\n        Circle x(a, r), y(b, r);\n        int t = x.crossC(y, c1.p, c2.p);\n        if (!t)\n            return 0;\n        c1.r = c2.r = r;\n        return t;\n    }\n\n    // The circle which tangent is l and point p on it\n    static int GetCircle(Line l, Point p, db r, Circle &c1, Circle &c2)\n    {\n        db dis = l.disPL(p);\n        if (sgn(dis - r * 2) > 0)\n            return 0;\n        if (sgn(dis) == 0)\n        {\n            c1.p = p + ((l.e - l.s).rotCC().scale(r));\n            c2.p = p + ((l.e - l.s).rotCL().scale(r));\n            c1.r = c2.r = r;\n            return 2;\n        }\n        Line u1 = Line((l.s + (l.e - l.s).rotCC().scale(r)), (l.e + (l.e - l.s).rotCC().scale(r)));\n        Line u2 = Line((l.s + (l.e - l.s).rotCL().scale(r)), (l.e + (l.e - l.s).rotCL().scale(r)));\n        Circle cc(p, r);\n        Point p1, p2;\n        if (!cc.crossL(u1, p1, p2))\n            cc.crossL(u2, p1, p2);\n        c1 = Circle(p1, r);\n        if (p1 == p2)\n        {\n            c2 = c1;\n            return 1;\n        }\n        c2 = Circle(p2, r);\n        return 2;\n    }\n\n    // u and v are the common tangent of the four circles\n    static int GetCircle(Line u, Line v, db r, Circle &c1, Circle &c2, Circle &c3, Circle &c4)\n    {\n        if (u.parallel(v))\n            return 0;\n        Line u1 = Line(u.s + (u.e - u.s).rotCC().scale(r), u.e + (u.e - u.s).rotCC().scale(r));\n        Line u2 = Line(u.s + (u.e - u.s).rotCL().scale(r), u.e + (u.e - u.s).rotCL().scale(r));\n        Line v1 = Line(v.s + (v.e - v.s).rotCC().scale(r), v.e + (v.e - v.s).rotCC().scale(r));\n        Line v2 = Line(v.s + (v.e - v.s).rotCL().scale(r), v.e + (v.e - v.s).rotCL().scale(r));\n        c1.r = c2.r = c3.r = c4.r = r;\n        c1.p = u1.intersec(v1);\n        c2.p = u1.intersec(v2);\n        c3.p = u2.intersec(v1);\n        c4.p = u2.intersec(v2);\n        return 4;\n    }\n\n    // Tangent with circle cx and cy\n    static int GetCircle(Circle cx, Circle cy, db r, Circle &c1, Circle &c2)\n    {\n        Circle x(cx.p, r + cx.r), y(cy.p, r + cy.r);\n        int t = x.crossC(y, c1.p, c2.p);\n        if (!t)\n            return 0;\n        c1.r = c2.r = r;\n        return t;\n    }\n\n    void read()\n    {\n        p.read();\n        cin >> r;\n    }\n\n    void Debug() { cerr << \"Circle: Center: (\" << p.x << \", \" << p.y << \") Radius: \" << r << '\\n'; }\n};\n\n// Pre-Build Function\ninline void build()\n{\n}\n\n// Actual Solver\ninline void solve()\n{\n    Circle c1, c2;\n    c1.read();\n    c2.read();\n    int re = c1.relationC(c2);\n    if (re)\n        cout << re - 1 << '\\n';\n}\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n    cout.tie(nullptr);\n\n#ifdef LOCAL\n    clock_t _begin = clock();\n#endif\n\n    build();\n    solve();\n\n#ifdef LOCAL\n    cerr << \"Time elapsed: \" << (double)(clock() - _begin) * 1000 / CLOCKS_PER_SEC << \"ms.\" << endl;\n#endif\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\nusing Int = long long;\n//BEGIN CUT HERE\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n#define PI 3.141592653589793238\n \n// COUNTER CLOCKWISE\nstatic const int CCW_COUNTER_CLOCKWISE = 1;\nstatic const int CCW_CLOCKWISE = -1;\nstatic const int CCW_ONLINE_BACK = 2;\nstatic const int CCW_ONLINE_FRONT = -2;\nstatic const int CCW_ON_SEGMENT = 0;\n\n//Intercsect Circle & Circle\nstatic const int ICC_SEPERATE = 4;\nstatic const int ICC_CIRCUMSCRIBE = 3;\nstatic const int ICC_INTERSECT = 2;\nstatic const int ICC_INSCRIBE = 1;\nstatic const int ICC_CONTAIN = 0;\n\nstruct Point{\n  double x,y;\n  Point(){}\n  Point(double x,double y) :x(x),y(y){}\n  Point operator+(Point p) {return Point(x+p.x,y+p.y);}\n  Point operator-(Point p) {return Point(x-p.x,y-p.y);}\n  Point operator*(double k){return Point(x*k,y*k);}\n  Point operator/(double k){return Point(x/k,y/k);}\n  double norm(){return x*x+y*y;}\n  double abs(){return sqrt(norm());}\n\n  bool operator < (const Point &p) const{\n    return x!=p.x?x<p.x:y<p.y;\n    //grid-point only\n    //return !equals(x,p.x)?x<p.x:!equals(y,p.y)?y<p.y:0;\n  }\n\n  bool operator == (const Point &p) const{\n    return fabs(x-p.x)<EPS && fabs(y-p.y)<EPS;\n  }\n};\n\nistream &operator >> (istream &is,Point &p){\n  is>>p.x>>p.y;\n  return is;\n}\n\nostream &operator << (ostream &os,Point p){\n  os<<fixed<<setprecision(12)<<p.x<<\" \"<<p.y;\n  return os;\n}\n\nbool sort_x(Point a,Point b){\n  return a.x!=b.x?a.x<b.x:a.y<b.y;\n}\n\nbool sort_y(Point a,Point b){\n  return a.y!=b.y?a.y<b.y:a.x<b.x;\n}\n\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\nistream &operator >> (istream &is,Polygon &p){\n  for(int i=0;i<(int)p.size();i++) cin>>p[i];\n  return is;\n}\n\nstruct Segment{\n  Point p1,p2;\n  Segment(){}\n  Segment(Point p1, Point p2):p1(p1),p2(p2){}\n};\ntypedef Segment Line;\n\nistream &operator >> (istream &is,Segment &s){\n  is>>s.p1>>s.p2;\n  return is;\n}\n\nstruct Circle{\n  Point c;\n  double r;\n  Circle(){}\n  Circle(Point c,double r):c(c),r(r){}\n};\n\nistream &operator >> (istream &is,Circle &c){\n  is>>c.c>>c.r;\n  return is;\n}\n\ndouble norm(Vector a){\n  return a.x*a.x+a.y*a.y;\n}\ndouble abs(Vector a){\n  return sqrt(norm(a));\n}\ndouble dot(Vector a,Vector b){\n  return a.x*b.x+a.y*b.y;\n}\ndouble cross(Vector a,Vector b){\n  return a.x*b.y-a.y*b.x;\n}\n\nPoint orth(Point p){return Point(-p.y,p.x);}\n\nbool isOrthogonal(Vector a,Vector b){\n  return equals(dot(a,b),0.0);\n}\n\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n  return isOrthogonal(a1-a2,b1-b2);\n}\n\nbool isOrthogonal(Segment s1,Segment s2){\n  return equals(dot(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n\nbool isParallel(Vector a,Vector b){\n  return equals(cross(a,b),0.0);\n}\n\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n  return isParallel(a1-a2,b1-b2);\n}\n\nbool isParallel(Segment s1,Segment s2){\n  return equals(cross(s1.p2-s1.p1,s2.p2-s2.p1),0.0); \n}\n\nPoint project(Segment s,Point p){\n  Vector base=s.p2-s.p1;\n  double r=dot(p-s.p1,base)/norm(base);\n  return s.p1+base*r;\n}\n\nPoint reflect(Segment s,Point p){\n  return p+(project(s,p)-p)*2.0;\n}\n\ndouble arg(Vector p){\n  return atan2(p.y,p.x);\n}\n\nVector polar(double a,double r){\n  return Point(cos(r)*a,sin(r)*a);\n}\n\nint ccw(Point p0,Point p1,Point p2);\nbool intersectSS(Point p1,Point p2,Point p3,Point p4);\nbool intersectSS(Segment s1,Segment s2);\nbool intersectPS(Polygon p,Segment l);\nint intersectCC(Circle c1,Circle c2);\nbool intersectSC(Segment s,Circle c);\ndouble getDistanceLP(Line l,Point p);\ndouble getDistanceSP(Segment s,Point p);\ndouble getDistanceSS(Segment s1,Segment s2);\nPoint getCrossPointSS(Segment s1,Segment s2);\nPoint getCrossPointLL(Line l1,Line l2);\nPolygon getCrossPointCL(Circle c,Line l);\nPolygon getCrossPointCC(Circle c1,Circle c2);\nint contains(Polygon g,Point p);\nPolygon andrewScan(Polygon s);\nPolygon convex_hull(Polygon ps);\ndouble diameter(Polygon s);\nbool isConvex(Polygon p);\ndouble area(Polygon s);\nPolygon convexCut(Polygon p,Line l);\nLine bisector(Point p1,Point p2);\nVector translate(Vector v,double theta);\nvector<Line> corner(Line l1,Line l2);\n\nint ccw(Point p0,Point p1,Point p2){\n  Vector a = p1-p0;\n  Vector b = p2-p0;\n  if(cross(a,b) > EPS) return CCW_COUNTER_CLOCKWISE;\n  if(cross(a,b) < -EPS) return CCW_CLOCKWISE;\n  if(dot(a,b) < -EPS) return CCW_ONLINE_BACK;\n  if(a.norm()<b.norm()) return CCW_ONLINE_FRONT;\n  return CCW_ON_SEGMENT;\n}\n\nbool intersectSS(Point p1,Point p2,Point p3,Point p4){\n  return (ccw(p1,p2,p3)*ccw(p1,p2,p4) <= 0 &&\n\t  ccw(p3,p4,p1)*ccw(p3,p4,p2) <= 0 );\n}\n\nbool intersectSS(Segment s1,Segment s2){\n  return intersectSS(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n\nbool intersectPS(Polygon p,Segment l){\n  int n=p.size();\n  for(int i=0;i<n;i++)\n    if(intersectSS(Segment(p[i],p[(i+1)%n]),l)) return 1;\n  return 0;\n}\n\nint intersectCC(Circle c1,Circle c2){\n  if(c1.r<c2.r) swap(c1,c2);\n  double d=abs(c1.c-c2.c);\n  double r=c1.r+c2.r;\n  if(equals(d,r)) return ICC_CIRCUMSCRIBE;\n  if(d>r) return ICC_SEPERATE;\n  if(equals(d+c2.r,c1.r)) return ICC_INSCRIBE;\n  if(d+c2.r<c1.r) return ICC_CONTAIN;\n  return ICC_INTERSECT;\n}\n\nbool intersectSC(Segment s,Circle c){\n  double d=getDistanceSP(s,c.c);\n  return d<=c.r;\n}\n\ndouble getDistanceLP(Line l,Point p){\n  return abs(cross(l.p2-l.p1,p-l.p1)/abs(l.p2-l.p1));\n}\n\ndouble getDistanceSP(Segment s,Point p){\n  if(dot(s.p2-s.p1,p-s.p1) < 0.0 ) return abs(p-s.p1);\n  if(dot(s.p1-s.p2,p-s.p2) < 0.0 ) return abs(p-s.p2);\n  return getDistanceLP(s,p);\n}\n\ndouble getDistanceSS(Segment s1,Segment s2){\n  if(intersectSS(s1,s2)) return 0.0;\n  return min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),\n\t     min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n}\n\nPoint getCrossPointSS(Segment s1,Segment s2){\n  Vector base=s2.p2-s2.p1;\n  double d1=abs(cross(base,s1.p1-s2.p1));\n  double d2=abs(cross(base,s1.p2-s2.p1));\n  double t=d1/(d1+d2);\n  return s1.p1+(s1.p2-s1.p1)*t;\n}\n\nPoint getCrossPointLL(Line l1,Line l2){\n  double a=cross(l1.p2-l1.p1,l2.p2-l2.p1);\n  double b=cross(l1.p2-l1.p1,l1.p2-l2.p1);\n  if(abs(a)<EPS&&abs(b)<EPS) return l2.p1;\n  return l2.p1+(l2.p2-l2.p1)*(b/a);\n}\n\nPolygon getCrossPointCL(Circle c,Line l){\n  Polygon ps;\n  Point pr=project(l,c.c);\n  Vector e=(l.p2-l.p1)/abs(l.p2-l.p1);\n  if(equals(getDistanceLP(l,c.c),c.r)){\n    ps.emplace_back(pr);\n    return ps;\n  }\n  double base=sqrt(c.r*c.r-norm(pr-c.c));\n  ps.emplace_back(pr+e*base);\n  ps.emplace_back(pr-e*base);\n  return ps;\n}\n\nPolygon getCrossPointCC(Circle c1,Circle c2){\n  Polygon p(2);\n  double d=abs(c1.c-c2.c);\n  double a=acos((c1.r*c1.r+d*d-c2.r*c2.r)/(2*c1.r*d));\n  double t=arg(c2.c-c1.c);\n  p[0]=c1.c+polar(c1.r,t+a);\n  p[1]=c1.c+polar(c1.r,t-a);\n  return p;\n}\n\n// IN:2 ON:1 OUT:0\nint contains(Polygon g,Point p){\n  int n=g.size();\n  bool x=false;\n  for(int i=0;i<n;i++){\n    Point a=g[i]-p,b=g[(i+1)%n]-p;\n    if(fabs(cross(a,b)) < EPS && dot(a,b) < EPS) return 1;\n    if(a.y>b.y) swap(a,b);\n    if(a.y < EPS && EPS < b.y && cross(a,b) > EPS ) x = !x;\n  }\n  return (x?2:0);\n}\n\nPolygon andrewScan(Polygon s){\n  Polygon u,l;\n  if(s.size()<3) return s;\n  sort(s.begin(),s.end());\n  u.push_back(s[0]);\n  u.push_back(s[1]);\n  l.push_back(s[s.size()-1]);\n  l.push_back(s[s.size()-2]);\n  for(int i=2;i<(int)s.size();i++){\n    for(int n=u.size();n>=2&&ccw(u[n-2],u[n-1],s[i])!=CCW_CLOCKWISE;n--){\n      u.pop_back();\n    }\n    u.push_back(s[i]);\n  } \n  for(int i=s.size()-3;i>=0;i--){\n    for(int n=l.size();n>=2&&ccw(l[n-2],l[n-1],s[i])!=CCW_CLOCKWISE;n--){\n      l.pop_back();\n    }\n    l.push_back(s[i]);\n  }\n  reverse(l.begin(),l.end());\n  for(int i=u.size()-2;i>=1;i--) l.push_back(u[i]);\n  return l;\n} \n\nPolygon convex_hull(Polygon ps){\n  int n=ps.size();\n  sort(ps.begin(),ps.end(),sort_y);\n  int k=0;\n  Polygon qs(n*2);\n  for(int i=0;i<n;i++){\n    while(k>1&&cross(qs[k-1]-qs[k-2],ps[i]-qs[k-1])<0) k--;\n    qs[k++]=ps[i];\n  }\n  for(int i=n-2,t=k;i>=0;i--){\n    while(k>t&&cross(qs[k-1]-qs[k-2],ps[i]-qs[k-1])<0) k--;\n    qs[k++]=ps[i];\n  }\n  qs.resize(k-1);\n  return qs;\n}\n\ndouble diameter(Polygon s){\n  Polygon p=s;\n  int n=p.size();\n  if(n==2) return abs(p[0]-p[1]);\n  int i=0,j=0;\n  for(int k=0;k<n;k++){\n    if(p[i]<p[k]) i=k;\n    if(!(p[j]<p[k])) j=k;\n  }\n  double res=0;\n  int si=i,sj=j;\n  while(i!=sj||j!=si){\n    res=max(res,abs(p[i]-p[j]));\n    if(cross(p[(i+1)%n]-p[i],p[(j+1)%n]-p[j])<0.0){\n      i=(i+1)%n;\n    }else{\n      j=(j+1)%n;\n    }\n  }\n  return res;\n}\n\nbool isConvex(Polygon p){\n  bool f=1;\n  int n=p.size();\n  for(int i=0;i<n;i++){\n    int t=ccw(p[(i+n-1)%n],p[i],p[(i+1)%n]);\n    f&=t!=CCW_CLOCKWISE;\n  }\n  return f;\n}\n\ndouble area(Polygon s){\n  double res=0;\n  for(int i=0;i<(int)s.size();i++){\n    res+=cross(s[i],s[(i+1)%s.size()])/2.0;\n  }\n  return abs(res);\n}\n\ndouble area(Circle c1,Circle c2){\n  double d=abs(c1.c-c2.c);\n  if(c1.r+c2.r<=d+EPS) return 0;\n  if(d<=abs(c1.r-c2.r)){\n    double r=min(c1.r,c2.r);\n    return PI*r*r;\n  }\n  double rc=(d*d+c1.r*c1.r-c2.r*c2.r)/(2*d);\n  double th=acos(rc/c1.r);\n  double ph=acos((d-rc)/c2.r);\n  return c1.r*c1.r*th+c2.r*c2.r*ph-d*c1.r*sin(th);\n}\n\nPolygon convexCut(Polygon p,Line l){\n  Polygon q;\n  for(int i=0;i<(int)p.size();i++){\n    Point a=p[i],b=p[(i+1)%p.size()];\n    if(ccw(l.p1,l.p2,a)!=-1) q.push_back(a);\n    if(ccw(l.p1,l.p2,a)*ccw(l.p1,l.p2,b)<0)\n      q.push_back(getCrossPointLL(Line(a,b),l));\n  }\n  return q;\n}\n\nLine bisector(Point p1,Point p2){\n  Circle c1=Circle(p1,abs(p1-p2)),c2=Circle(p2,abs(p1-p2));\n  Polygon p=getCrossPointCC(c1,c2);\n  if(cross(p2-p1,p[0]-p1)>0) swap(p[0],p[1]);\n  return Line(p[0],p[1]);\n}\n\nVector translate(Vector v,double theta){\n  Vector res;\n  res.x=cos(theta)*v.x-sin(theta)*v.y;\n  res.y=sin(theta)*v.x+cos(theta)*v.y;\n  return res;\n}\n\nvector<Line> corner(Line l1,Line l2){\n  vector<Line> res;\n  if(isParallel(l1,l2)){\n    double d=getDistanceLP(l1,l2.p1)/2.0;\n    Vector v1=l1.p2-l1.p1;\n    v1=v1/v1.abs()*d;\n    Point p=l2.p1+translate(v1,90.0*(PI/180.0));\n    double d1=getDistanceLP(l1,p);\n    double d2=getDistanceLP(l2,p);\n    if(abs(d1-d2)>d){\n      p=l2.p1+translate(v1,-90.0*(PI/180.0));\n    }\n    res.push_back(Line(p,p+v1));\n  }else{\n    Point p=getCrossPointLL(l1,l2);\n    Vector v1=l1.p2-l1.p1,v2=l2.p2-l2.p1;\n    v1=v1/v1.abs();\n    v2=v2/v2.abs();\n    res.push_back(Line(p,p+(v1+v2)));\n    res.push_back(Line(p,p+translate(v1+v2,90.0*(PI/180.0))));\n  }\n  return res;\n}\n\nPolygon tangent(Circle c1,Point p2){\n  Circle c2=Circle(p2,sqrt(norm(c1.c-p2)-c1.r*c1.r));\n  Polygon p=getCrossPointCC(c1,c2);\n  sort(p.begin(),p.end());\n  return p;\n}\n\nvector<Line> tangent(Circle c1,Circle c2){\n  vector<Line> ls;\n  if(c1.r<c2.r) swap(c1,c2);\n  double g=norm(c1.c-c2.c);\n  if(equals(g,0)) return ls;\n  Point u=(c2.c-c1.c)/sqrt(g);\n  Point v=orth(u);\n  for(int s=1;s>=-1;s-=2){\n    double h=(c1.r+s*c2.r)/sqrt(g);\n    if(equals(1-h*h,0)){\n      ls.emplace_back(c1.c+u*c1.r,c1.c+(u+v)*c1.r);\n    }else if(1-h*h>0){\n      Point uu=u*h,vv=v*sqrt(1-h*h);\n      ls.emplace_back(c1.c+(uu+vv)*c1.r,c2.c-(uu+vv)*c2.r*s);\n      ls.emplace_back(c1.c+(uu-vv)*c1.r,c2.c-(uu-vv)*c2.r*s);\n    }\n  }\n  \n  return ls;\n}\n\n//END CUT HERE\n\n//Projection\nsigned AOJ_CGL1A(){\n  Point p1,p2;\n  cin>>p1>>p2;\n  int q;\n  cin>>q;\n  while(q--){\n    Point p;\n    cin>>p;\n    cout<<project(Line(p1,p2),p)<<endl;\n  }\n  return 0;\n}\n/*\n  verified on 2017/12/31\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_A&lang=jp\n*/\n\n//Reflect\nsigned AOJ_CGL1B(){\n  Point p1,p2;\n  cin>>p1>>p2;\n  int q;\n  cin>>q;\n  while(q--){\n    Point p;\n    cin>>p;\n    cout<<reflect(Line(p1,p2),p)<<endl;\n  }\n  return 0;\n}\n/*\n  verified on 2017/12/31\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_B&lang=jp\n*/\n\n//CCW\nsigned AOJ_CGL1C(){\n  Point p0,p1;\n  cin>>p0>>p1;\n  int q;\n  cin>>q;\n  while(q--){\n    Point p2;\n    cin>>p2;\n    int t=ccw(p0,p1,p2);\n    if(t==CCW_COUNTER_CLOCKWISE) cout<<\"COUNTER_CLOCKWISE\"<<endl;\n    if(t==CCW_CLOCKWISE) cout<<\"CLOCKWISE\"<<endl;\n    if(t==CCW_ONLINE_BACK) cout<<\"ONLINE_BACK\"<<endl;\n    if(t==CCW_ONLINE_FRONT) cout<<\"ONLINE_FRONT\"<<endl;\n    if(t==CCW_ON_SEGMENT) cout<<\"ON_SEGMENT\"<<endl;\n  }\n  return 0;\n}\n/*\n  verified on 2017/12/31\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_C&lang=jp\n*/\n\n//Parallel / Orthogonal\nsigned AOJ_CGL2A(){\n  int q;\n  cin>>q;\n  while(q--){\n    Point p0,p1,p2,p3;\n    cin>>p0>>p1>>p2>>p3;\n    if(isParallel(Line(p0,p1),Line(p2,p3))) cout<<2<<endl;\n    else if(isOrthogonal(Line(p0,p1),Line(p2,p3))) cout<<1<<endl;\n    else cout<<0<<endl;\n  }\n  return 0;\n}\n/*\n  verified on 2017/12/31\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_A&lang=jp\n*/\n\n//intersectSS\nsigned AOJ_CGL2B(){\n  int q;\n  cin>>q;\n  while(q--){\n    Point p0,p1,p2,p3;\n    cin>>p0>>p1>>p2>>p3;\n    cout<<(intersectSS(Segment(p0,p1),Segment(p2,p3)))<<endl;\n  }\n  return 0;\n}\n/*\n  verified on 2017/12/31\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_B&lang=jp\n*/\n\n//cross point\nsigned AOJ_CGL2C(){\n  int q;\n  cin>>q;\n  while(q--){\n    Point p0,p1,p2,p3;\n    cin>>p0>>p1>>p2>>p3;\n    cout<<getCrossPointSS(Segment(p0,p1),Segment(p2,p3))<<endl;\n  }\n  return 0;\n}\n/*\n  verified on 2017/12/31\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_C&lang=jp\n*/\n\n//distanceSS\nsigned AOJ_CGL2D(){\n  int q;\n  cin>>q;\n  while(q--){\n    Point p0,p1,p2,p3;\n    cin>>p0>>p1>>p2>>p3;\n    printf(\"%.12f\\n\",getDistanceSS(Segment(p0,p1),Segment(p2,p3)));\n  }\n  return 0;\n}\n/*\n  verified on 2017/12/31\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_D&lang=jp\n*/\n\n//area of Polygon\nsigned AOJ_CGL3A(){\n  int n;\n  cin>>n;\n  Polygon p(n);\n  for(int i=0;i<n;i++) cin>>p[i];\n  printf(\"%.1f\\n\",area(p));\n  return 0;\n}\n/*\n  verified on 2017/12/31\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_3_A&lang=jp\n*/\n\n\n//isConvex\nsigned AOJ_CGL3B(){\n  int n;\n  cin>>n;\n  Polygon p(n);\n  for(int i=0;i<n;i++) cin>>p[i];\n  cout<<isConvex(p)<<endl;\n  return 0;\n}\n/*\n  verified on 2017/12/31\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_3_B&lang=jp\n*/\n\n\n\n//contains\nsigned AOJ_CGL3C(){\n  int n;\n  cin>>n;\n  Polygon p(n);\n  for(int i=0;i<n;i++) cin>>p[i];\n  int q;\n  cin>>q;\n  while(q--){\n    Point r;\n    cin>>r;\n    cout<<contains(p,r)<<endl;\n  }\n  return 0;\n}\n/*\n  verified on 2017/12/31\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_3_C\n*/\n\n\n//convex hull\nsigned AOJ_CGL4A(){\n  int n;\n  cin>>n;\n  Polygon p(n);\n  for(int i=0;i<n;i++) cin>>p[i];\n  Polygon q=convex_hull(p);\n  cout<<q.size()<<endl;\n  for(Point v:q) cout<<v.x<<\" \"<<v.y<<endl;\n  return 0;\n}\n/*\n  verified on 2017/12/31\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_4_A&lang=jp\n*/\n\n//diameter of Polygon\nsigned AOJ_CGL4B(){\n  int n;\n  cin>>n;\n  Polygon p(n);\n  for(int i=0;i<n;i++) cin>>p[i];\n  printf(\"%.12f\\n\",diameter(p));\n  return 0;\n}\n/*\n  verified on 2017/12/31\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_4_B&lang=jp\n*/\n\n//convexCut:\nsigned AOJ_CGL4C(){\n  int n;\n  cin>>n;\n  Polygon g(n);\n  for(int i=0;i<n;i++) cin>>g[i];\n  Polygon p=andrewScan(g);\n  int q;\n  cin>>q;\n  while(q--){\n    Line l;\n    cin>>l.p1>>l.p2;\n    printf(\"%.12f\\n\",area(convexCut(p,l)));\n  }\n  return 0;\n}\n/*\n  verified on 2017/12/31\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_4_C&lang=jp\n*/\n\n\n//intersectCC\nsigned AOJ_CGL7A(){\n  Circle c1,c2;\n  cin>>c1>>c2;\n  cout<<intersectCC(c1,c2)<<endl;\n  return 0;\n}\n/*\n  verified on 2017/12/31\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_7_A\n*/\n\n//Common Tangent\nsigned AOJ_CGL7G(){\n  Circle c1,c2;\n  cin>>c1>>c2;\n  auto ls=tangent(c1,c2);\n  Polygon ps;\n  for(auto l:ls) ps.emplace_back(getCrossPointCL(c1,l)[0]);\n  sort(ps.begin(),ps.end());\n  for(auto p:ps) cout<<p<<endl;\n  return 0;\n}\n/*\n  verified on 2017/12/31\n  http://judge.u-aizu.ac.jp/onlinejudge//description.jsp?id=CGL_7_G&lang=jp\n*/\n\nsigned main(){\n  //AOJ_CGL1A();\n  //AOJ_CGL1B();\n  //AOJ_CGL1C();\n\n  //AOJ_CGL2A();\n  //AOJ_CGL2B();\n  //AOJ_CGL2C();\n  //AOJ_CGL2D();\n  \n  //AOJ_CGL3A();\n  //AOJ_CGL3B();\n  //AOJ_CGL3C();\n  \n  //AOJ_CGL4A();\n  //AOJ_CGL4B();\n  //AOJ_CGL4C();\n\n  \n  AOJ_CGL7A();\n  //AOJ_CGL7D();\n  //AOJ_CGL7E();\n  //AOJ_CGL7G();\n  \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define int long long   // <-----!!!!!!!!!!!!!!!!!!!\n\n#define rep(i,n) for (int i=0;i<(n);++i)\n#define rep2(i,a,b) for (int i=(a);i<(b);++i)\n#define rrep(i,n) for (int i=(n)-1;i>=0;--i)\n#define rrep2(i,a,b) for (int i=(a)-1;i>=b;--i)\n#define chmin(a,b) (a)=min((a),(b));\n#define chmax(a,b) (a)=max((a),(b));\n#define all(a) (a).begin(),(a).end()\n#define rall(a) (a).rbegin(),(a).rend()\n#define printV(v) cout<<(#v)<<\":\";for(auto(x):(v)){cout<<\" \"<<(x);}cout<<endl;\n#define printVS(vs) cout<<(#vs)<<\":\"<<endl;for(auto(s):(vs)){cout<<(s)<< endl;}\n#define printVV(vv) cout<<(#vv)<<\":\"<<endl;for(auto(v):(vv)){for(auto(x):(v)){cout<<\" \"<<(x);}cout<<endl;}\n#define printP(p) cout<<(#p)<<(p).first<<\" \"<<(p).second<<endl;\n#define printVP(vp) cout<<(#vp)<<\":\"<<endl;for(auto(p):(vp)){cout<<(p).first<<\" \"<<(p).second<<endl;}\n\ninline void output(){ cout << endl; }\ntemplate<typename First, typename... Rest>\ninline void output(const First& first, const Rest&... rest) {\n    cout << first << \" \"; output(rest...);\n}\n\nusing ll = long long;\nusing Pii = pair<int, int>;\nusing TUPLE = tuple<int, int, int>;\nusing vi = vector<int>;\nusing vvi = vector<vi>;\nusing vvvi = vector<vvi>;\nconst int inf = 1e9;\nconst int mod = 1e9 + 9;\nusing Graph = vector<vector<int>>;\n\ntypedef complex<double> P;\ntypedef vector<P> G;\n#define here(g, i) g[i]\n#define next(g, i) g[(i + 1) % g.size()]\n#define prev(g, i) g[(i - 1 + g.size()) % g.size()]\nconst double EPS = 1e-8;\nconst double INF = 1e12;\nconst double PI = acos(-1);\ninline int sgn(double a, double b = 0) { return a < b - EPS ? -1 : a > b + EPS ? 1 : 0; }\n\nstruct C {\n    P p;\n    double r;\n    C(){}\n    C(P _p, double _r) : p(_p), r(_r) {}\n    C(double _x, double _y, double _r) : p(_x, _y), r(_r) {}\n    void print() {\n        cerr << p.real() << \" \" << p.imag() << \" \" << r << endl;\n    }\n};\n\nP readP() {\n    double x, y;\n    cin >> x >> y;\n    return P(x, y);\n}\n\nC readC() {\n    double x, y, r;\n    cin >> x >> y >> r;\n    return C(x, y, r);\n}\n\nint relationCC(C c1, C c2) {\n    double d = abs(c1.p - c2.p);\n    if (sgn(d, c1.r + c2.r) == 1)       return 4; // distant\n    if (sgn(d, c1.r + c2.r) == 0)       return 3; // touch outside\n    if (sgn(d, abs(c1.r - c2.r)) == -1) return 0; // c1 in c2\n    if (sgn(d, abs(c1.r - c2.r)) == 0)  return 1; // c1 touches in c2\n    return 2; // two crosspoints\n}\n\nmain() {\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(0);\n\n    C c1 = readC();\n    C c2 = readC();\n    cout << relationCC(c1, c2) << endl;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nusing lint = long long int;\ntemplate<class T = int> using V = vector<T>;\ntemplate<class T = int> using VV = V< V<T> >;\ntemplate<class T> void assign(V<T>& v, int n, const T& a = T()) { v.assign(n, a); }\ntemplate<class T, class... U> void assign(V<T>& v, int n, const U&... u) { v.resize(n); for (auto&& i : v) assign(i, u...); }\n\nconst double eps = 1e-10;\nconst double inf = 1e+10;\nconst double pi = acos(-1.0);\nint sgn(double a) { return a < -eps ? -1 : a > eps; }\nusing P = complex<double>;\nnamespace std {\n  istream& operator>>(istream& i, P& p) { double x, y; i >> x >> y; p = P(x, y); return i; }\n  ostream& operator<<(ostream& o, const P& p) { o << real(p) << ' ' << imag(p); return o; }\n  bool operator<(const P& p, const P& q) { return sgn(real(p) - real(q)) ? sgn(real(p) - real(q)) < 0 : sgn(imag(p) - imag(q)) < 0; }\n  bool operator>(const P& p, const P& q) { return q < p; }\n  bool operator<=(const P& p, const P& q) { return !(p > q); }\n  bool operator>=(const P& p, const P& q) { return !(p < q); }\n}\nbool eq(const P& p, const P& q) { return !(p < q) and !(p > q); }\ndouble dot(const P& p, const P& q) { return real(conj(p) * q); }\ndouble cross(const P& p, const P& q) { return imag(conj(p) * q); }\n\nint intCC(const P& o1, double r1, const P& o2, double r2) {\n  double d = abs(o1 - o2);\n  if (sgn(d - (r1 + r2)) > 0) return 4;\n  if (sgn(d - (r1 + r2)) == 0) return 3;\n  if (sgn(d - abs(r1 - r2)) > 0) return 2;\n  if (sgn(d - abs(r1 - r2)) == 0) return 1;\n  return 0;\n}\n\nint main() {\n  cin.tie(NULL); ios::sync_with_stdio(false);\n  P o1, o2; double r1, r2; cin >> o1 >> r1 >> o2 >> r2;\n  cout << intCC(o1, r1, o2, r2) << '\\n';\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <algorithm>\n#include <cmath>\n#include <vector>\n#include <cassert>\n\nusing namespace std;\n\nconst double EPS = 1e-8;\n\nint dcmp(double d) {\n    if (fabs(d) < EPS) {\n        return 0;\n    } else {\n        return d < 0 ? -1 : 1;\n    }\n}\n\nstruct Vector {\n    double x, y;\n\n    Vector(double x = 0, double y = 0) : x(x), y(y) {\n    }\n\n    bool operator<(const Vector& other) const {\n        return dcmp(x - other.x) < 0 || (dcmp(x - other.x) == 0 && dcmp(y - other.y) < 0);\n    }\n};\n\ntypedef Vector Point;\n\ndouble dot(const Vector& a, const Vector& b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(const Vector& a, const Vector& b) {\n    return a.x * b.y - a.y * b.x;\n}\n\nVector operator+(const Vector& a, const Vector& b) {\n    return Vector(a.x + b.x, a.y + b.y);\n}\n\nVector operator-(const Vector& a, const Vector& b) {\n    return Vector(a.x - b.x, a.y - b.y);\n}\n\nVector operator*(const Vector& a, const double& p) {\n    return Vector(a.x * p, a.y * p);\n}\n\ndouble angle(const Vector& a) {\n    return atan2(a.y, a.x);\n}\n\ndouble length(const Vector& a) {\n    return sqrt(dot(a, a));\n}\n\nstruct Circle {\n    Point c;\n    double r;\n\n    Circle(double x = 0, double y = 0, double r = 0) : c(Point(x, y)), r(r) {\n    }\n\n    Point point(double rad) const {\n        return Point(c.x + r * cos(rad), c.y + r * sin(rad));\n    }\n};\n\nint intersect(const Circle& a, const Circle& b) {\n    int count = 0;\n    Vector v = b.c - a.c;\n    double d = length(v);\n\n    if (dcmp(d - a.r - b.r) > 0) {\n        count = 4;\n    } else if (dcmp(d - a.r - b.r) == 0) {\n        count = 3;\n    } else if (dcmp(d - fabs(a.r - b.r)) < 0) {\n        count = 0;\n    } else if (dcmp(d - fabs(a.r - b.r)) == 0) {\n        count = 1;\n    } else {\n        count = 2;\n    }\n    return count;\n}\n\nint main() {\n    double x, y, r;\n    cin >> x >> y >> r;\n    Circle c1(x, y, r);\n\n    cin >> x >> y >> r;\n    Circle c2(x, y, r);\n\n    int ans = intersect(c1, c2);\n\n    cout << fixed << setprecision(8);\n\n    cout << ans << endl;\n\n    return 0;\n\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nstruct F {\n\tlong long a, b;\n\tF() {}\n\tF(long long _a, long long _b) : a(_a), b(_b) {}\n\tF operator + (const F &f) {\n\t\tlong long x = a * f.a, y = b * f.a + a * f.b;\n\t\tlong long g = __gcd(x, y);\n\t\treturn F(x / g, y / g);\n\t}\n\tF operator - (const F &f) {\n\t\tlong long x = a * f.a, y = b * f.a - a * f.b;\n\t\tlong long g = __gcd(x, y);\n\t\treturn F(x / g, y / g);\n\t}\n\tF operator * (const F &f) {\n\t\tlong long x = a * f.a, y = b * f.b;\n\t\tlong long g = __gcd(x, y);\n\t\treturn F(x / g, y / g);\n\t}\n\tF operator / (const F &f) {\n\t\tlong long x = a * f.b, y = b * f.a;\n\t\tlong long g = __gcd(x, y);\n\t\treturn F(x / g, y / g);\n\t}\n};\nconst double pi = acos(-1);\nconst double eps = 1e-8;\ninline int sign(double a) {\n\treturn a < -eps ? -1 : a > eps;\n}\ninline int cmp(double a, double b) {\n\treturn sign(a - b);\n}\ndouble add(double a, double b) {\n\tif (abs(a + b) < eps * (abs(a) + abs(b))) return 0;\n\treturn a + b;\n}\ntypedef int data;\nstruct P {\n\tdata x, y;\n\tP() {}\n\tP(data x, data y) : x(x), y(y) {}\n\tP operator + (const P &p) { return P(x + p.x, y + p.y); }\n\tP operator - (const P &p) { return P(x - p.x, y - p.y); }\n\tP operator * (data d) { return P(x * d, y * d); }\n\tP operator / (data d) { return P(x / d, y / d); }\n\tdata dot(const P &p) { return x * p.x + y * p.y; }\n\tdata det(const P &p) { return x * p.y - y * p.x; }\n\tdouble disto(const P &p) { return (*this - p).abs(); }\n\tdouble alpha() { return atan2(y, x); }\n\tdouble abs() { return sqrt(abs2()); }\n\tdata abs2() { return x * x + y * y; }\n\tP rot90() { P(-y, x); }\n\tP unit() { return *this / abs(); }\n\tbool operator < (P p) const {\n\t\tint c = cmp(x, p.x);\n\t\tif (c) return c == -1;\n\t\treturn cmp(y, p.y) == -1;\n\t}\n\tfriend istream& operator>>(istream &in, P &p) {\n\t\tin >> p.x >> p.y;\n\t\treturn in;\n\t}\n\tfriend ostream& operator<<(ostream& out, P &p) {\n\t\tout << p.x << ' ' << p.y;\n\t\treturn out;\n\t}\n};\nP projection(P p1, P p2, P q) {\n\tP dir = p2 - p1;\n\treturn p1 + dir * (dir.dot(q - p1) / dir.abs2());\n}\nP reflection(P p1, P p2, P q) {\n\treturn projection(p1, p2, q) * 2 - q;\n}\nbool is_midddle(data a, data m, data b) {\n\treturn sign(a - m) == 0 || sign(b - m) == 0 || (a < m != b < m);\n}\nbool is_midddle(P a, P m, P b) {\n\treturn is_midddle(a.x, m.x, b.x) && is_midddle(a.y, m.y, b.y);\n}\nbool on_seg(P p1, P p2, P q) {\n\treturn sign((p1 - q).det(p2 - q)) == 0 && (p1 - q).dot(p2 - q) <= 0;\n\t// return (p1 - q).det(p2 - q) == 0 && is_middle(p1, q, p2);\n}\nbool intersect(data l1, data r1, data l2, data r2) {\n\tif (l1 > r1) swap(l1, r1);\n\tif (l2 > r2) swap(l2, r2);\n\treturn cmp(r1, l2) != -1 && cmp(r2, l1) != -1;\n}\nbool intersect(P p1, P p2, P q1, P q2) {\n\treturn intersect(p1.x, p2.x, q1.x, q2.x) && intersect(p1.y, p2.y, q1.y, q2.y)\n\t       && sign((p2 - p1).det(q1 - p1)) * sign((p2 - p1).det(q2 - p1)) <= 0\n\t       && sign((q2 - q1).det(p1 - q1)) * sign((q2 - q1).det(q2 - q1)) <= 0;\n}\nP seg_intersection(P p1, P p2, P q1, P q2) {\n\tdata a1 = (q2 - q1).det(p1 - q1), a2 = -(q2 - p1).det(p2 - q1);\n\treturn (p1 * a2 + p2 * a1) / (a1 + a2);\n}\nP line_intersection(P p1, P p2, P q1, P q2) {\n\treturn p1 + (p2 - p1) * ((q2 - q1).det(q1 - p1) / (q2 - q1).det(p2 - p1));\n}\ndata nearest(P p1, P p2, P q) {\n\tP h = projection(p1, p2, q);\n\tif (is_midddle(p1, h, p2)) return q.disto(h);\n\treturn min(p1.disto(q), p2.disto(q));\n}\ndata seg_dist(P p1, P p2, P q1, P q2) {\n\tif (intersect(p1, p2, q1, q2)) return 0;\n\treturn min(min(nearest(p1, p2, q1), nearest(p1, p2, q2)), min(nearest(q1, q2, p1), nearest(q1, q2, p2)));\n}\ndata area(vector<P> &ps) {\n\tdata res = 0;\n\tint n = ps.size();\n\tfor (int i = 0; i < n; i++) {\n\t\tres += ps[i].det(ps[(i + 1) % n]);\n\t}\n\treturn abs(res / 2);\n}\nbool is_convex(vector<P> &ps) {\n\tint n = ps.size();\n\tfor (int i = 0; i < n; i++) {\n\t\tdata a1 = (ps[(i + 1) % n] - ps[i]).det(ps[(i + 2) % n] - ps[(i + 1) % n]);\n\t\tdata a2 = (ps[(i + 2) % n] - ps[(i + 1) % n]).det(ps[(i + 3) % n] - ps[(i + 2) % n]);\n\t\tif (a1 * a2 < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint contain(vector<P> &ps, P p) {\n\tint n = ps.size(), res = 0;\n\tfor (int i = 0; i < n; i++) {\n\t\tP u = ps[i], v = ps[(i + 1) % n];\n\t\tif (on_seg(u, v, p)) return 1;\n\t\tif (cmp(u.y, v.y) <= 0) swap(u, v);\n\t\tif (cmp(p.y, u.y) > 0 || cmp(p.y, v.y) <= 0) continue;\n\t\tres ^= (u - p).det(v - p) > 0;\n\t}\n\treturn res * 2;\n\t//2:inside 1:on_seg 0:outside\n}\nvector<P> convex_hull(vector<P> &ps) {\n\tint n = ps.size();\n\tsort(ps.begin(), ps.end());\n\tint k = 0;\n\tvector<P> qs(n << 1);\n\tfor (int i = 0; i < n; i++) {\n\t\twhile (k > 1 && sign((qs[k - 1] - qs[k - 2]).det(ps[i] - qs[k - 1])) <= 0) k--;\n\t\tqs[k++] = ps[i];\n\t}\n\tfor (int i = n - 2, t = k; i >= 0; i--) {\n\t\twhile (k > t && sign((qs[k - 1] - qs[k - 2]).det(ps[i] - qs[k - 1])) <= 0) k--;\n\t\tqs[k++] = ps[i];\n\t}\n\tqs.resize(k - 1);\n\treturn qs;\n}\nvector<P> convex_hull_nonstrict(vector<P> &ps) {\n\tint n = ps.size();\n\tsort(ps.begin(), ps.end());\n\tint k = 0;\n\tvector<P> qs(n << 1);\n\tfor (int i = 0; i < n; i++) {\n\t\twhile (k > 1 && sign((qs[k - 1] - qs[k - 2]).det(ps[i] - qs[k - 1])) < 0) k--;\n\t\tqs[k++] = ps[i];\n\t}\n\tfor (int i = n - 2, t = k; i >= 0; i--) {\n\t\twhile (k > t && sign((qs[k - 1] - qs[k - 2]).det(ps[i] - qs[k - 1])) < 0) k--;\n\t\tqs[k++] = ps[i];\n\t}\n\tqs.resize(k - 1);\n\treturn qs;\n}\ndata convex_diameter(vector<P> &ps) {\n\tint n = ps.size();\n\tif (n <= 1) return 0;\n\tint is = 0, js = 0;\n\tfor (int k = 1; k < n; k++) {\n\t\tis = ps[k] < ps[is] ? k : is;\n\t\tjs = ps[js] < ps[k] ? k : js;\n\t}\n\tint i = is, j = js;\n\tdouble res = ps[i].disto(ps[j]);\n\tdo {\n\t\tif ((ps[(i + 1) % n] - ps[i]).det(ps[(j + 1) % n] - ps[j]) >= 0) {\n\t\t\t(++j) %= n;\n\t\t} else {\n\t\t\t(++i) %= n;\n\t\t}\n\t\tres = max(res, ps[i].disto(ps[j]));\n\t} while (i != is || j != js);\n\treturn res;\n}\nvector<P> convex_cut(vector<P> &ps, P q1, P q2) {\n\tvector<P> qs;\n\tint n = ps.size();\n\tfor (int i = 0; i < n; i++) {\n\t\tP p1 = ps[i], p2 = ps[(i + 1) % n];\n\t\tint d1 = sign((q2 - q1).det(p1 - q1)), d2 = sign((q2 - q1).det(p2 - q1));\n\t\tif (d1 >= 0) qs.push_back(p1); // left-half\n\t\tif (d1 * d2 < 0) qs.push_back(line_intersection(p1, p2, q1, q2));\n\t}\n\treturn qs;\n}\ndata closest_pair(vector<P> &ps, int l, int r) {\n\t// ps should be sorted before this\n\tif (r - l <= 5) {\n\t\tdouble res = 1e100;\n\t\tfor (int i = l; i < r; i++) {\n\t\t\tfor (int j = l; j < i; j++) {\n\t\t\t\tres = min(res, ps[i].disto(ps[j]));\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n\tint m = (l + r) >> 1;\n\tdouble res = min(closest_pair(ps, l, m), closest_pair(ps, m, r));\n\tvector<P> qs;\n\tfor (int i = l; i < r; i++) {\n\t\tif (abs(ps[i].x - ps[m].x) <= res) {\n\t\t\tqs.push_back(ps[i]);\n\t\t}\n\t}\n\tsort(qs.begin(), qs.end(), [](const P & a, const P & b) { return a.y < b.y; });\n\tfor (int i = 1, sz = qs.size(); i < sz; i++) {\n\t\tfor (int j = i - 1; j >= 0 && qs[j].y >= qs[i].y - res; j--) {\n\t\t\tres = min(res, qs[i].disto(qs[j]));\n\t\t}\n\t}\n\treturn res;\n}\nP circum_center(P p0, P p1, P p2) {\n\tdouble a1 = p1.x - p0.x, b1 = p1.y - p0.y, c1 = (a1 * a1 + b1 * b1) / 2;\n\tdouble a2 = p2.x - p0.x, b2 = p2.y - p0.y, c2 = (a2 * a2 + b2 * b2) / 2;\n\tdouble d = a1 * b2 - a2 * b1;\n\treturn P(p0.x + (c1 * b2 - c2 * b1) / d, p0.y + (a1 * c2 - a2 * c1) / d);\n}\n\nint main() {\n#ifdef LOCAL_DEFINE\n\t//freopen(\"data.in\", \"rt\", stdin);\n\t//freopen(\"data.out\", \"w\", stdout);\n\tauto _start = chrono::high_resolution_clock::now();\n#endif\n\n\tios::sync_with_stdio(false);\n\tcin.tie(0);\n\tcout << fixed << setprecision(15);\n\tP c0, c1;\n\tint r0, r1;\n\tcin >> c0 >> r0 >> c1 >> r1;\n\tint d = (c0 - c1).abs2();\n\tif(d > (r0 + r1) * (r0 + r1)) {\n\t\tcout << \"4\\n\";\n\t} else if(d == (r0 + r1) * (r0 + r1)) {\n\t\tcout << \"3\\n\";\n\t} else if(d == abs(r0 - r1) * abs(r0 - r1)) {\n\t\tcout << \"1\\n\";\n\t} else if(d < abs(r0 - r1) * abs(r0 - r1)) {\n\t\tcout << \"0\\n\";\n\t} else {\n\t\tcout << \"2\\n\";\n\t}\n\n#ifdef LOCAL_DEFINE\n\tauto _end = chrono::high_resolution_clock::now();\n\tcerr << \"elapsed time: \" << chrono::duration<double, milli>(_end - _start).count() << \" ms\\n\";\n#endif\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define f first\n#define s second\n#define mp make_pair\n#define pi M_PI\n#define inf 1<<30\n#define eps (1e-11)\n#define equals(a,b) (fabs((a)-(b))<eps)\nusing namespace std;\n\nclass Point{\npublic:\n  double x,y;\n  Point(double x=0,double y=0):x(x),y(y){}\n\n  Point operator+(Point p){ return Point(x+p.x,y+p.y);}\n  Point operator-(Point p){ return Point(x-p.x,y-p.y);}\n  Point operator*(double k){ return Point(x*k,y*k);}\n  Point operator/(double k){ return Point(x/k,y/k);}\n  bool operator<(Point p)const{ return (x!=p.x ? x<p.x : y<p.y);}\n  bool operator==(Point p)const{ return fabs(x-p.x)<eps && fabs(y-p.y)<eps;}\n\n  double abs(){ return sqrt(norm());}\n  double norm(){ return (x*x+y*y);}\n};\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\nclass Circle{\npublic:\n  Point c;\n  double r;\n  Circle(Point c=Point(),double r=0.0):c(c),r(r){}\n};\n\ndouble norm(Vector a){ return (a.x*a.x+a.y*a.y);}\ndouble abs(Vector a){ return sqrt(norm(a));}\n\nint intersect(Circle a,Circle b){\n  double dis=abs(a.c-b.c),sumr=a.r+b.r,minr=min(a.r,b.r),maxr=max(a.r,b.r);\n  if((sumr-dis)<-eps)return 4;\n  if(equals(sumr,dis))return 3;\n  if((maxr-dis)<-eps)return 2;\n  if(equals(dis+minr,maxr))return 1;\n  return 0;\n}\n\nint main()\n{\n  Circle c1,c2;\n\n  cin>>c1.c.x>>c1.c.y>>c1.r;\n  cin>>c2.c.x>>c2.c.y>>c2.r;\n\n  cout<<intersect(c1,c2)<<endl;\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <stack>\n#include <math.h>\n\nusing namespace std;\n\nstruct Point{\n\tdouble x,y;\n};\n\nint main(){\n\n\tdouble c1x,c1y,c1r,c2x,c2y,c2r,dist;\n\n\tscanf(\"%lf %lf %lf\",&c1x,&c1y,&c1r);\n\tscanf(\"%lf %lf %lf\",&c2x,&c2y,&c2r);\n\n\tdist = sqrt((c1x-c2x)*(c1x-c2x)+(c1y-c2y)*(c1y-c2y));\n\n\tif(dist > c1r + c2r){\n\t\tprintf(\"4\\n\");\n\t}else if(fabs(dist - (c1r+c2r)) < 0.00000001){\n\t\tprintf(\"3\\n\");\n\t}else{\n\t\tif(c1r > c2r){\n\t\t\tif(dist < c1r){\n\t\t\t\tif(fabs(c1r-(dist+c2r)) < 0.00000001){\n\t\t\t\t\tprintf(\"1\\n\");\n\t\t\t\t}else{\n\t\t\t\t\tif(dist < (c1r-c2r)){\n\t\t\t\t\t\tprintf(\"0\\n\");\n\t\t\t\t\t}else{\n\t\t\t\t\t\tprintf(\"2\\n\");\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}else{\n\t\t\t\tprintf(\"2\\n\");\n\t\t\t}\n\n\t\t}else{\n\t\t\tif(dist < c2r){\n\t\t\t\tif(fabs(c2r-(dist+c1r)) < 0.00000001){\n\t\t\t\t\tprintf(\"1\\n\");\n\t\t\t\t}else{\n\t\t\t\t\tif(dist < (c2r-c1r)){\n\t\t\t\t\t\tprintf(\"0\\n\");\n\t\t\t\t\t}else{\n\t\t\t\t\t\tprintf(\"2\\n\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tprintf(\"2\\n\");\n\t\t\t}\n\t\t}\n\n\t}\n\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n\nusing namespace std;\n\ndouble eps = 1e-9;\n\ndouble eq(double a,double b)\n{\n    return abs(a-b)<eps;\n}\n\nint main()\n{\n    int x1,y1,r1;\n    int x2,y2,r2;\n\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n\n    cin>>x1>>y1>>r1;\n    cin>>x2>>y2>>r2;\n\n    if(r1>r2) swap(r1,r2);\n\n    double d = sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));\n\n    int ans = 2;\n\n    if(d>r1+r2+eps) ans = 4;\n    if(eq(r1+r2,d)) ans = 3;\n    if(eq(r2-r1,d)) ans = 1;\n    if(d+r1<r2-eps) ans = 0;\n\n    cout<<ans<<endl;\n\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\nint main(){\n  int cx1,cy1,r1;\n  int cx2,cy2,r2;\n  cin>>cx1>>cy1>>r1;\n  cin>>cx2>>cy2>>r2;\n\n  int dx=cx1-cx2;\n  int dy=cy1-cy2;\n  \n  auto sq=[](auto x){return x*x;};\n  int sd=sq(dx)+sq(dy);\n  \n  if(sd>sq(r1+r2)){\n    cout<<4<<endl;\n    return 0;\n  }\n\n  if(sd==sq(r1+r2)){\n    cout<<3<<endl;\n    return 0;\n  }\n  \n  if(sd<sq(r1-r2)){\n    cout<<0<<endl;\n    return 0;\n  }\n  \n  if(sd==sq(r1-r2)){\n    cout<<1<<endl;\n    return 0;\n  }\n  \n  cout<<2<<endl;\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "// #include {{{\n#include <iostream>\n#include <cassert>\n#include <cstring>\n#include <cstdlib>\n#include <cstdio>\n#include <cctype>\n#include <cmath>\n#include <ctime>\n#include <queue>\n#include <set>\n#include <map>\n#include <stack>\n#include <string>\n#include <bitset>\n#include <vector>\n#include <complex>\n#include <algorithm>\nusing namespace std;\n// }}}\n// #define {{{\ntypedef long long ll;\ntypedef double db;\ntypedef pair<int,int> pii;\ntypedef vector<int> vi;\n#define de(x) cout << #x << \"=\" << x << endl\n#define rep(i,a,b) for(int i=a;i<(b);++i)\n#define per(i,a,b) for(int i=(b)-1;i>=(a);--i)\n#define all(x) (x).begin(),(x).end()\n#define sz(x) (int)(x).size()\n#define mp make_pair\n#define pb push_back\n#define fi first\n#define se second\n// }}}\n\ntypedef db T;\nconst db eps = 1e-8;\nint sgn(T x){return (x>eps)-(x<-eps);}\nstruct P{\n    T x,y;\n    P(){} P(T x,T y):x(x),y(y){}\n    void read(){scanf(\"%lf%lf\",&x,&y);}\n    P operator - (const P&b) const {return P(x-b.x,y-b.y);}\n    P operator + (const P&b) const {return P(x+b.x,y+b.y);}\n    T operator * (const P&b) const {return x*b.x+y*b.y;}\n    P operator * (const T&k) const {return P(x*k,y*k);}\n    T operator ^ (const P&b) const {return x*b.y-y*b.x;}\n    bool operator < (const P&b) const {return sgn(y-b.y)?y<b.y:x<b.x;}\n};\nT abs(P x){return sqrt(x*x);}\nstruct C{\n    P o;T r;\n    void read(){o.read();scanf(\"%lf\",&r);}\n};\nint relation(C A,C B){\n    T dis = abs(A.o - B.o);\n    if(sgn(dis - (A.r + B.r)) == 1) return 4;\n    if(sgn(dis - (A.r + B.r)) == 0) return 3;\n    if(sgn(dis - fabs(A.r - B.r)) == 1) return 2;\n    if(sgn(dis - fabs(A.r - B.r)) == 0) return 1;\n    return 0;\n}\n\nint main(){\n    C o1 , o2;\n    o1.read();\n    o2.read();\n    printf(\"%d\\n\",relation(o1,o2));\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> P;\ntypedef complex<double> V;\ntypedef vector<P> vecP;\ntypedef pair<P,P> L;\ntypedef pair<P,P> S;\ntypedef pair<P,double> C;\nconst double eps=1e-8;\nconst double PI=acos(-1);\nconst double PI2=PI*2.0;\n\nnamespace std{\n  bool operator < (const P &a,const P &b){\n    return (a.real()!=b.real()?\n            a.real() <b.real():\n            a.imag() <b.imag());\n  }\n};\n\nV normal(V a){\n  assert( abs(a)>0 );\n  return a/abs(a);\n}\n\ndouble Sqrt( double x ){\n  if(x<0)return 0;\n  else return sqrt(x);\n}\n\nP Vector(L a){\n  return a.second-a.first;\n}\n\nbool eq(double a,double b){\n  return (-eps<a-b&&a-b<eps);\n}\n\nbool eq(P a,P b){\n  return ( eq(a.real(),b.real()) && eq(a.imag(),b.imag()) );\n}\n\ndouble dot(P a,P b){\n  return real(b*conj(a));\n}\n\ndouble cross(P a,P b){\n  return imag(b*conj(a));\n}\n\ndouble getArg(P a,P b){\n  return arg(b*conj(a));\n}\n\ndouble getTime(V a,V b){\n  assert( eq(cross(a,b),0) );\n  return ( dot(a,b) < 0 ? -1.0 : 1.0 ) * abs(b) / abs(a);\n}\n\n\nP project(P a,P b,P c){\n  b-=a,c-=a;\n  return a+b*real(c/b);\n}\n\nP reflect(P a,P b,P c){\n  b-=a,c-=a;\n  return a+b*conj(c/b);\n}\n\nint ccw(P a,P b,P c){\n  P ab=b-a,ac=c-a;\n  P k=ac*conj(ab);\n  if(k.imag()>0)return 1;\n  if(k.imag()<0)return -1;\n  if(k.real()<0)return 2;\n  if(abs(ab)<abs(ac))return -2;\n  return 0;\n}\n\nbool isParallel(P a,P b){\n  return eq(0, cross(a,b));\n}\n\nbool isParallel(S a,S b){\n  return eq(0, cross( Vector(a) , Vector(b) ) );\n}\n\nbool onLP(L l,P p){\n  P a=l.first, b=l.second;\n  return eq(0, cross(b-a,p-a));\n}\n\nbool onSP(S s,P p){\n  P a=s.first, b=s.second;\n  return eq( abs(b-a) , abs(a-p)+abs(b-p) );\n}\n\nbool isCrossSS(S s0,S s1){\n  P a=s0.first, b=s0.second;\n  P c=s1.first, d=s1.second;\n  int f0 = ccw(a,b,c) * ccw(a,b,d);\n  int f1 = ccw(c,d,a) * ccw(c,d,b);\n  return (f0<=0 && f1<=0);\n}\n\nbool isCrossLS(L l,S s){\n  P a=l.first, b=l.second;\n  P c=s.first, d=s.second;\n  return ( ccw(a,b,c) * ccw(a,b,d) <= 0 );\n}\n\ndouble distLP(L l,P p){\n  P a=l.first, b=l.second;\n  double res = cross(b-a,p-a) / abs(b-a);\n  return abs(res);\n}\n\ndouble distSP(S s,P p){\n  P a=s.first, b=s.second;\n  if( dot(b-a,p-a) < eps )return abs(p-a);\n  if( dot(a-b,p-b) < eps )return abs(p-b);\n  return distLP(s,p);\n}\n\ndouble distSS(S s0,S s1){\n  if( isCrossSS(s0,s1) )return 0;\n  double res0 = min( distSP( s0, s1.first ) , distSP(s0, s1.second) );\n  double res1 = min( distSP( s1, s0.first ) , distSP(s1, s0.second) );\n  return min(res0,res1);\n}\n\nP getCrossLL(L l0,L l1){\n  P a=l0.first, b=l0.second;\n  P c=l1.first, d=l1.second;\n  a-=d;b-=d;c-=d;\n  return d+a+(b-a)*imag(a/c)/imag(a/c-b/c);\n}\n\n\n \nint inPolygon(vecP &t,P p){\n  int n=t.size();\n  double sum=0;\n  for(int i=0;i<n;i++){\n    P a=t[i],b=t[(i+1==n?0:i+1)];\n    if( ccw(a,b,p)==0 )return 1;\n    sum+= getArg(a-p,b-p);\n  }\n  if( abs(sum) < eps )return 0;\n  else return 2;\n}\n\nvecP andrewScan(vecP &t){\n  int N=t.size(),C=0;\n  vecP R(N);\n  for(int i=0;i<N;i++){\n    while(2<=C&&ccw(R[C-2],R[C-1],t[i])==-1)C--;\n    R[C++]=t[i];\n  }\n  vecP res(C);\n  for(int i=0;i<C;i++)res[i]=R[i];\n  return res;\n}\n \nvecP convexHull(vecP &t){\n  sort(t.begin(),t.end());\n  vecP u=andrewScan(t);\n  reverse(t.begin(),t.end());\n  vecP l=andrewScan(t);\n  for(int i=1;i+1<(int)l.size();i++)u.push_back(l[i]);\n  return u;\n}\n\nvecP cutConvex(vecP &t,L l){\n  P a=l.first, b=l.second;\n  int N=t.size();\n  vecP res;\n  for(int i=0;i<N;i++){\n    P c=t[i],d=t[(i+1)%N];\n    int C=ccw(a,b,c),D=ccw(a,b,d);\n    if(C!=-1)res.push_back(c);\n    if(C==-D&&abs(C)==1)res.push_back(getCrossLL( l ,L(c,d) ));\n  }\n  return res;\n}\n\nP getVector(const vecP &t, int id){\n  int n=t.size();\n  return t[ (id+1)%n ] - t[id%n];\n}\n\ndouble convex_diameter(vecP &t) {\n  int n = t.size();\n  int is = 0, js = 0;\n  for (int i = 1; i < n; ++i) {\n    if (imag(t[i]) > imag(t[is])) is = i;\n    if (imag(t[i]) < imag(t[js])) js = i;\n  }\n  double maxd = norm(t[is]-t[js]);\n \n  int i, maxi, j, maxj;\n  i = maxi = is;\n  j = maxj = js;\n  do {\n    \n    if (cross( getVector(t,i), getVector(t,j)) >= 0) j = (j+1) % n;\n    \n    else i = (i+1) % n;\n    if (norm(t[i]-t[j]) > maxd) {\n      maxd = norm(t[i]-t[j]);\n      maxi = i; maxj = j;\n    }\n  } while (i != is || j != js);\n  return sqrt(maxd); /* farthest pair is (maxi, maxj). */\n}\n\nbool compare_y(const P &a,const P &b){\n  return a.imag() < b.imag();\n}\n\ndouble closest_pair(P *a, int n){\n  if(n <= 1) return 1e30;\n  int m = n / 2;\n  double x = a[m].real();\n  double d = min(closest_pair(a, m), closest_pair(a + m, n - m));\n  inplace_merge(a, a + m, a + n, compare_y);\n  vector<P> b;\n  for(int i=0;i<n;i++){\n    if( abs(a[i].real() - x) >= d) continue;\n    for(int j=0;j<(int)b.size();j++){\n      double dx = real(a[i] - b[b.size() - j - 1]);\n      double dy = imag(a[i] - b[b.size() - j - 1]);\n      if(dy >= d) break;\n      d = min(d, sqrt(dx * dx + dy * dy));\n    }\n    b.push_back(a[i]);\n  }\n  return d;\n}\n\nP _pool[200005];\ndouble minDist(vecP &t){\n  int n=t.size();\n  for(int i=0;i<n;i++)_pool[i]=t[i];\n  sort( _pool, _pool+n);\n  return closest_pair(_pool, n);\n}\n\nint getStateCC(C a,C b){\n  double ar=a.second, br=b.second;\n  double dist=abs(a.first-b.first);\n  if(dist>ar+br+eps)return 4;\n  if(dist>ar+br-eps)return 3;\n  if(dist>abs(ar-br)+eps)return 2;\n  if(dist>abs(ar-br)-eps)return 1;\n  return 0;\n}\n\nP getCrossCC(C a,C b){\n  P p1=a.first, p2=a.second;\n  double r1=a.second, r2=b.second;\n  double cA = (r1*r1+norm(p1-p2)-r2*r2) / (2.0*r1*abs(p1-p2));\n  return p1+(p2-p1)/abs(p1-p2)*r1*P(cA,Sqrt(1.0-cA*cA));\n}\n\nS getTangentCP(C a,P p){\n  P base=a.first-p;\n  double ar=a.second;\n  double w=Sqrt(norm(base)-ar*ar);\n  P s=p+base*P(w,ar)/norm(base)*w;\n  P t=p+base*P(w,-ar)/norm(base)*w;\n  return S(s,t);\n}\n\nS getInTangent(C a,C b,double flg=1.0){\n  P ap=a.first,bp=b.first;\n  double ar=a.second,br=b.second;\n  \n  P base=bp-ap;\n  double w=ar+br;\n  double h=Sqrt(norm(base)-w*w);\n  P k=base*P(w,h*flg)/norm(base);\n  return S(ap+k*ar,bp-k*br);\n}\n  \nS getOutTangent(C a,C b,double flg=1.0){\n  P ap=a.first,bp=b.first;\n  double ar=a.second,br=b.second;\n  \n  P base=bp-ap;\n  double h=br-ar;\n  \n  double w=Sqrt(norm(base)-h*h);\n  P k=base*P(w,h*flg)/norm(base)*P(0,flg);\n  return S(ap+k*ar,bp+k*br);\n}\n  \nvector<S> getTangent(C a,C b){\n  P ap=a.first,bp=b.first;\n  double ar=a.second,br=b.second;\n  \n  vector<S> res;\n  double dist=abs(ap-bp);\n    \n  if(dist>ar+br+eps)\n    res.push_back(getInTangent(a,b,1));\n  \n  if(dist>ar+br-eps)\n    res.push_back(getInTangent(a,b,-1));\n  \n  if(dist>abs(ar-br)+eps)\n    res.push_back(getOutTangent(a,b,1));\n  \n  if(dist>abs(ar-br)-eps)\n    res.push_back(getOutTangent(a,b,-1));\n  \n  return res;\n}\n\n\nvecP getCrossCS(C cir,S s, bool debug=false){\n  P a=s.first, b=s.second;\n  double cr=cir.second;\n  P cp=cir.first;\n  \n  vecP res;\n  P base=b-a,  target=project(a,b,cp);\n  \n  double length=abs(base), h=abs(cp-target);\n  base/=length;\n  \n  if(cr+eps<h)return res;\n  double w=Sqrt(cr*cr-h*h);\n  double L=getTime( normal(b-a) ,target-a)-w,  R=L+w*2.0;\n  \n  if( -eps<L && L< length+eps )res.push_back(a+base*L);\n  if( eq(L,R) )return res;\n  if( -eps<R && R< length+eps )res.push_back(a+base*R);\n  return res;\n}\n \ndouble getArea(C c,P a,P b){\n  P cp=c.first;\n  double cr=c.second;\n  \n  P va=cp-a,  vb=cp-b;\n  double A=abs(va), B=abs(vb);\n  double f=cross(va,vb), d=distSP( S(a,b) ,cp), res=0;\n  \n  if( eq(0, f ) )return 0;\n  if(A<cr+eps&&B<cr+eps)return f*0.5;\n  if(d>cr-eps)return cr*cr*PI*getArg(va,vb)/PI2;\n   \n  vecP u=getCrossCS(c, S(a,b) );\n  \n  assert( !u.empty() );\n  u.insert(u.begin(), a),  u.push_back(b);\n \n  for(int i=0;i+1<(int)u.size();i++) res+=getArea(c,u[i],u[i+1]);\n  return res;\n}\n \ndouble getCrossArea(vecP t,C c){\n  int n=t.size();\n  if(n<3)return 0;\n  double res=0;\n  for(int i=0;i<n;i++){\n    P a=t[i], b=t[(i+1)%n];\n    res+=getArea(c,a,b);\n  }\n  return res;\n}\n\n\ndouble calcArea(const vecP &t){\n  double res=0;\n  int n=t.size();\n  for(int i=0;i<n;i++){\n    res+= cross( t[ (i+1)%n ],t[i] );\n  }\n  return abs(res)*0.5;\n}\n\nP input(){\n  double x,y;\n  cin>>x>>y;\n  return P(x,y);\n}\n\nvoid pr(P p,string str){\n  printf(\"%.10f %.10f\",p.real(),p.imag());\n  cout<<str;\n}\n\n\nint main(){\n\n  C a,b;\n  a.first=input();\n  cin>>a.second;\n\n  b.first=input();\n  cin>>b.second;\n\n  cout<< getStateCC(a,b) <<endl;\n  \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n\n/*\nint main(){\n  int i=0, p=0, sum=0;\n  for(i=0;i<10;i++){\n    scanf(\"%d\" ,&p);\n    sum += p;\n  }\n  \n  printf(\"%d\\n\" , sum);\n  return 0;\n}\n*/\n\nint isEq(double a, double b){\n  return labs(a-b)<0.001;\n}\n\nint main(){\n  int c1x, c1y, c1r, c2x, c2y, c2r;\n  double br, sr; // Big Radius, Small Radius\n  scanf(\"%d %d %d\" ,&c1x ,&c1y, &c1r);\n  scanf(\"%d %d %d\" ,&c2x ,&c2y, &c2r);\n\n  double dist = sqrt(pow(c1x-c2x, 2) + pow(c1y-c2y, 2));\n  double rad  = sqrt(pow(c1r+c2r, 2));\n  if(c1r>c2r){\n    br = c1r; sr = c2r;\n  }else{\n    br = c2r; sr = c1r;\n  }\n  br = sqrt(pow(br,2));\n  sr = sqrt(pow(sr,2));\n  if(isEq(dist,rad)){\n    printf(\"3\\n\");\n  }else if(dist>rad){\n    printf(\"4\\n\");\n  }else if( isEq((dist+sr),br) ){\n    printf(\"1\\n\");\n  }else if( (dist+sr) > br ){\n    printf(\"2\\n\");\n  }else{\n    printf(\"0\\n\");\n  }\n\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<sstream>\n#include<algorithm>\n#include<climits>\n#include<cmath>\n#include<cstdio>\n#include<cstdlib>\n#include<ctime>\n#include<cfloat>\n#include<functional>\n#include<map>\n#include<string>\n#include<cstring>\n#include<vector>\n#include<queue>\n#include<stack>\n#include<deque>\n#include<set>\n#include<bitset>\n#include<list>\n#include<numeric>\n#include<complex>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int, int> i_i;\ntypedef pair<long long, int> ll_i;\ntypedef pair<double, int> d_i;\ntypedef pair<long long, long long> ll_ll;\ntypedef pair<double, double> d_d;\n\n#define PI 3.141592653589793238462643383279\n#define mod 1000000007LL\n#define rep(i, n) for(i = 0;i < n;++i)\n#define rep1(i, n) for(i = 1;i < n;++i)\n#define rep2d(i, j, n) for(i = 0;i < n;++i)for(j = i + 1;j < n;++j)\n#define per(i, n) for(i = n - 1;i > -1;--i)\n#define int(x) int x; scanf(\"%d\",&x)\n#define int2(x, y) int x, y; scanf(\"%d%d\",&x, &y)\n#define int3(x, y, z) int x, y, z; scanf(\"%d%d%d\",&x, &y, &z)\n#define scn(n, a) rep(i, n)cin >> a[i]\n#define sc2n(n, a, b) rep(i, n)cin >> a[i] >> b[i]\n#define pri(x) cout << x << \"\\n\"\n#define pri2(x, y) cout << x << \" \" << y << \"\\n\"\n#define pri3(x, y, z) cout << x << \" \" << y << \" \" << z << \"\\n\"\n#define pb push_back\n#define mp make_pair\n#define all(a) (a).begin(),(a).end()\n#define endl \"\\n\"\n#define kabe puts(\"---------------------------\")\n#define kara puts(\"\")\n#define debug(x) cout << \" --- \" << x << \"\\n\"\n#define debug2(x, y) cout << \" --- \" << x << \" \" << y << \"\\n\"\n#define debug3(x, y, z) cout << \" --- \" << x << \" \" << y << \" \" << z << \"\\n\"\n#define X first\n#define Y second\n#define eps 0.00000000001\n#define prid(x) printf(\"%.15lf\\n\", x)\n\ndouble xmax, xmin, ymax, ymin;\nstruct vec{\n  double x, y;\n  vec operator+(const vec& a) const { return (vec){x + a.x, y + a.y}; }\n  vec operator-(const vec& a) const { return (vec){x - a.x, y - a.y}; }\n  vec sca(double t){ return (vec){t * x, t * y}; }\n  double dot(vec a){ return x * a.x + y * a.y; }\n  double cross(vec a){ return x * a.y - y * a.x; }\n  double norm(){ return sqrt(x * x + y * y); }\n  double norm2(){ return x * x + y * y; }\n  //double ppdist(vec p){ return sqrt( (p.x - x) * (p.x - x) + (p.y - y) * (p.y - y) ); }\n  //double ppdist2(vec p){ return (p.x - x) * (p.x - x) + (p.y - y) * (p.y - y); }\n};\nstruct line{\n  vec a, b;\n  vec getvec(){ return b - a; }\n  vec proj(vec p){ return a + (b - a).sca((p - a).dot(b - a) / (b - a).dot(b - a)); }\n  vec vref(vec p){ return proj(p).sca(2.0) - p; }\n  int ccw(vec p){\n    vec q = p - a, ba = b - a;\n    if(ba.cross(q) > 0)return 1; //ccw\n    if(ba.cross(q) < 0)return -1; //cw\n    if(ba.dot(q) < 0)return -2; //back\n    if(ba.dot(ba) < q.dot(q))return 2; //front\n    return 0; //on\n  }\n  bool paral(line l){ return abs(l.getvec().cross(getvec())) < eps; }\n  bool orth(line l){ return abs(l.getvec().dot(getvec())) < eps; }\n  bool intersec(line l){\n    bool res0 = (ccw(l.a) * ccw(l.b) == 4); //syukutai\n    bool res1 = (getvec().cross(l.a - a) * getvec().cross(l.b - a)) <= eps;\n    bool res2 = (l.getvec().cross(a - l.a) * l.getvec().cross(b - l.a)) <= eps;\n    return !res0 && res1 && res2;\n  }\n  vec crosspoint(line l){\n    return a + getvec().sca((l.a - a).cross(l.getvec()) / getvec().cross(l.getvec()));\n  }\n  double pldist(vec p){\n    double res = min((a - p).norm2(), (b - p).norm2());\n    vec h = proj(p);\n    if((a - h).dot(b - h) < 0)res = min(res, (h - p).norm2());\n    return sqrt(res);\n  }\n  double lldist(line l){\n    if(intersec(l))return 0.0;\n    return min(min(pldist(l.a), pldist(l.b)), min(l.pldist(a), l.pldist(b)));\n  }\n};\nstruct polygon{\n  vector<vec> p;  //ccw\n  double area(){\n    double res = 0.0;\n    for(int i = 0;i < p.size();++i)res += p[i].cross(p[(i + 1) % p.size()]);\n    return res / 2.0;\n  }\n  bool isconv(){\n    for(int i = 0;i < p.size();++i)\n    if((p[(i + 1) % p.size()] - p[i]).cross(p[(i + 2) % p.size()] - p[i]) < -eps)return false;\n    return true;\n  }\n  int isin(vec a){\n    line l = (line){a, a + (vec){xmax - xmin, 0.0}};\n    int cnt = 0, n = p.size();\n    for(int i = 0;i < n;++i){\n      line tmp = (line){p[i], p[(i + 1) % n]};\n      if(tmp.ccw(a) == 0)return 1; //on line\n      if(l.intersec(tmp)){\n        ++cnt;\n        if(l.ccw(p[i]) == 0 && l.ccw(p[(i + 1) % n]) * l.ccw(p[(i + n - 1) % n]) == -1)++cnt;\n        if(l.paral(tmp)){\n          ++cnt;\n          if(l.ccw(p[(i + 2) % n]) * l.ccw(p[(i + n - 1) % n]) == -1)++cnt;\n        }\n      }\n    }\n    return (cnt & 1) * 2;  //2:in 0:out\n  }\n};\nstruct circle{\n  vec o;\n  double r;\n  int intersec(circle c){\n    double d = (o - c.o).norm(), rp = r + c.r, rm = abs(r - c.r);\n    if(abs(rp - d) < eps)return 3;\n    if(rp < d + eps)return 4;\n    if(abs(rm - d) < eps)return 1;\n    if(rm < d + eps)return 2;\n    return 0;\n  }\n};\n\nsigned main(void){\n  int i, j, k;\n  for(;;){\n    circle c, d;\n    cin >> c.o.x >> c.o.y >> c.r >> d.o.x >> d.o.y >> d.r;\n    pri(c.intersec(d));\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "\n\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> P;\ndouble eps=1e-10;\n  \nstruct C{\n  P p;\n  double r;\n  C(P p,double r=1):p(p),r(r){}\n};\n  \nint getState(C a,C b){\n  double dist=abs(a.p-b.p);\n  if(dist>a.r+b.r+eps)return 4;\n  if(dist>a.r+b.r-eps)return 3;\n  if(dist>abs(a.r-b.r)+eps)return 2;\n  if(dist>abs(a.r-b.r)-eps)return 1;\n  return 0;\n}\n  \nint main(){\n  double ax,ay,ar,bx,by,br;\n  cin>>ax>>ay>>ar>>bx>>by>>br;\n  cout<<getState(C(P(ax,ay),ar),C(P(bx,by),br))<<endl;\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\nusing namespace std;\n#include<cstdio>\n#include<cmath>\n\nint main()\n{\n    double dx, dy, d;\n    double c1x, c1y, c1r, c2x, c2y, c2r;\n    scanf(\"%lf %lf %lf %lf %lf %lf\", &c1x, &c1y, &c1r, &c2x, &c2y, &c2r);\n    dx = c1x - c2x;\n    dy = c1y - c2y;\n    d = sqrt(dx * dx + dy * dy);\n    if(d > c1r + c2r){ printf(\"4\\n\"); }\n    else if(d == c1r + c2r){ printf(\"3\\n\"); }\n    else{\n        if(c1r < c2r) swap(c1r, c2r);\n        if(d > c1r - c2r){ printf(\"2\\n\"); }\n        else if(d == c1r - c2r){ printf(\"1\\n\"); }\n        else{ printf(\"0\\n\"); }\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\nusing Int = long long;\n//BEGIN CUT HERE\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n#define PI 3.141592653589793238\n \n// COUNTER CLOCKWISE\nstatic const int CCW_COUNTER_CLOCKWISE = 1;\nstatic const int CCW_CLOCKWISE = -1;\nstatic const int CCW_ONLINE_BACK = 2;\nstatic const int CCW_ONLINE_FRONT = -2;\nstatic const int CCW_ON_SEGMENT = 0;\n\n//Intercsect Circle & Circle\nstatic const int ICC_SEPERATE = 4;\nstatic const int ICC_CIRCUMSCRIBE = 3;\nstatic const int ICC_INTERSECT = 2;\nstatic const int ICC_INSCRIBE = 1;\nstatic const int ICC_CONTAIN = 0;\n\nstruct Point{\n  double x,y;\n  Point(){}\n  Point(double x,double y) :x(x),y(y){}\n  Point operator+(Point p) {return Point(x+p.x,y+p.y);}\n  Point operator-(Point p) {return Point(x-p.x,y-p.y);}\n  Point operator*(double k){return Point(x*k,y*k);}\n  Point operator/(double k){return Point(x/k,y/k);}\n  double norm(){return x*x+y*y;}\n  double abs(){return sqrt(norm());}\n\n  bool operator < (const Point &p) const{\n    return x!=p.x?x<p.x:y<p.y;\n    //grid-point only\n    //return !equals(x,p.x)?x<p.x:!equals(y,p.y)?y<p.y:0;\n  }\n\n  bool operator == (const Point &p) const{\n    return fabs(x-p.x)<EPS && fabs(y-p.y)<EPS;\n  }\n};\n\nistream &operator >> (istream &is,Point &p){\n  is>>p.x>>p.y;\n  return is;\n}\n\nostream &operator << (ostream &os,Point p){\n  os<<fixed<<setprecision(12)<<p.x<<\" \"<<p.y;\n  return os;\n}\n\nbool sort_x(Point a,Point b){\n  return a.x!=b.x?a.x<b.x:a.y<b.y;\n}\n\nbool sort_y(Point a,Point b){\n  return a.y!=b.y?a.y<b.y:a.x<b.x;\n}\n\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\nistream &operator >> (istream &is,Polygon &p){\n  for(int i=0;i<(int)p.size();i++) cin>>p[i];\n  return is;\n}\n\nstruct Segment{\n  Point p1,p2;\n  Segment(){}\n  Segment(Point p1, Point p2):p1(p1),p2(p2){}\n};\ntypedef Segment Line;\n\nistream &operator >> (istream &is,Segment &s){\n  is>>s.p1>>s.p2;\n  return is;\n}\n\nstruct Circle{\n  Point c;\n  double r;\n  Circle(){}\n  Circle(Point c,double r):c(c),r(r){}\n};\n\nistream &operator >> (istream &is,Circle &c){\n  is>>c.c>>c.r;\n  return is;\n}\n\ndouble norm(Vector a){\n  return a.x*a.x+a.y*a.y;\n}\ndouble abs(Vector a){\n  return sqrt(norm(a));\n}\ndouble dot(Vector a,Vector b){\n  return a.x*b.x+a.y*b.y;\n}\ndouble cross(Vector a,Vector b){\n  return a.x*b.y-a.y*b.x;\n}\n\nPoint orth(Point p){return Point(-p.y,p.x);}\n\nbool isOrthogonal(Vector a,Vector b){\n  return equals(dot(a,b),0.0);\n}\n\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n  return isOrthogonal(a1-a2,b1-b2);\n}\n\nbool isOrthogonal(Segment s1,Segment s2){\n  return equals(dot(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n\nbool isParallel(Vector a,Vector b){\n  return equals(cross(a,b),0.0);\n}\n\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n  return isParallel(a1-a2,b1-b2);\n}\n\nbool isParallel(Segment s1,Segment s2){\n  return equals(cross(s1.p2-s1.p1,s2.p2-s2.p1),0.0); \n}\n\nPoint project(Segment s,Point p){\n  Vector base=s.p2-s.p1;\n  double r=dot(p-s.p1,base)/norm(base);\n  return s.p1+base*r;\n}\n\nPoint reflect(Segment s,Point p){\n  return p+(project(s,p)-p)*2.0;\n}\n\ndouble arg(Vector p){\n  return atan2(p.y,p.x);\n}\n\nVector polar(double a,double r){\n  return Point(cos(r)*a,sin(r)*a);\n}\n\nint ccw(Point p0,Point p1,Point p2);\nbool intersectSS(Point p1,Point p2,Point p3,Point p4);\nbool intersectSS(Segment s1,Segment s2);\nbool intersectPS(Polygon p,Segment l);\nint intersectCC(Circle c1,Circle c2);\nbool intersectSC(Segment s,Circle c);\ndouble getDistanceLP(Line l,Point p);\ndouble getDistanceSP(Segment s,Point p);\ndouble getDistanceSS(Segment s1,Segment s2);\nPoint getCrossPointSS(Segment s1,Segment s2);\nPoint getCrossPointLL(Line l1,Line l2);\nPolygon getCrossPointCL(Circle c,Line l);\nPolygon getCrossPointCC(Circle c1,Circle c2);\nint contains(Polygon g,Point p);\nPolygon andrewScan(Polygon s);\nPolygon convex_hull(Polygon ps);\ndouble diameter(Polygon s);\nbool isConvex(Polygon p);\ndouble area(Polygon s);\nPolygon convexCut(Polygon p,Line l);\nLine bisector(Point p1,Point p2);\nVector translate(Vector v,double theta);\nvector<Line> corner(Line l1,Line l2);\n\nint ccw(Point p0,Point p1,Point p2){\n  Vector a = p1-p0;\n  Vector b = p2-p0;\n  if(cross(a,b) > EPS) return CCW_COUNTER_CLOCKWISE;\n  if(cross(a,b) < -EPS) return CCW_CLOCKWISE;\n  if(dot(a,b) < -EPS) return CCW_ONLINE_BACK;\n  if(a.norm()<b.norm()) return CCW_ONLINE_FRONT;\n  return CCW_ON_SEGMENT;\n}\n\nbool intersectSS(Point p1,Point p2,Point p3,Point p4){\n  return (ccw(p1,p2,p3)*ccw(p1,p2,p4) <= 0 &&\n\t  ccw(p3,p4,p1)*ccw(p3,p4,p2) <= 0 );\n}\n\nbool intersectSS(Segment s1,Segment s2){\n  return intersectSS(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n\nbool intersectPS(Polygon p,Segment l){\n  int n=p.size();\n  for(int i=0;i<n;i++)\n    if(intersectSS(Segment(p[i],p[(i+1)%n]),l)) return 1;\n  return 0;\n}\n\nint intersectCC(Circle c1,Circle c2){\n  if(c1.r<c2.r) swap(c1,c2);\n  double d=abs(c1.c-c2.c);\n  double r=c1.r+c2.r;\n  if(equals(d,r)) return ICC_CIRCUMSCRIBE;\n  if(d>r) return ICC_SEPERATE;\n  if(equals(d+c2.r,c1.r)) return ICC_INSCRIBE;\n  if(d+c2.r<c1.r) return ICC_CONTAIN;\n  return ICC_INTERSECT;\n}\n\nbool intersectSC(Segment s,Circle c){\n  double d=getDistanceSP(s,c.c);\n  return d<=c.r;\n}\n\ndouble getDistanceLP(Line l,Point p){\n  return abs(cross(l.p2-l.p1,p-l.p1)/abs(l.p2-l.p1));\n}\n\ndouble getDistanceSP(Segment s,Point p){\n  if(dot(s.p2-s.p1,p-s.p1) < 0.0 ) return abs(p-s.p1);\n  if(dot(s.p1-s.p2,p-s.p2) < 0.0 ) return abs(p-s.p2);\n  return getDistanceLP(s,p);\n}\n\ndouble getDistanceSS(Segment s1,Segment s2){\n  if(intersectSS(s1,s2)) return 0.0;\n  return min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),\n\t     min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n}\n\nPoint getCrossPointSS(Segment s1,Segment s2){\n  Vector base=s2.p2-s2.p1;\n  double d1=abs(cross(base,s1.p1-s2.p1));\n  double d2=abs(cross(base,s1.p2-s2.p1));\n  double t=d1/(d1+d2);\n  return s1.p1+(s1.p2-s1.p1)*t;\n}\n\nPoint getCrossPointLL(Line l1,Line l2){\n  double a=cross(l1.p2-l1.p1,l2.p2-l2.p1);\n  double b=cross(l1.p2-l1.p1,l1.p2-l2.p1);\n  if(abs(a)<EPS&&abs(b)<EPS) return l2.p1;\n  return l2.p1+(l2.p2-l2.p1)*(b/a);\n}\n\nPolygon getCrossPointCL(Circle c,Line l){\n  Polygon ps;\n  Point pr=project(l,c.c);\n  Vector e=(l.p2-l.p1)/abs(l.p2-l.p1);\n  if(equals(getDistanceLP(l,c.c),c.r)){\n    ps.emplace_back(pr);\n    return ps;\n  }\n  double base=sqrt(c.r*c.r-norm(pr-c.c));\n  ps.emplace_back(pr+e*base);\n  ps.emplace_back(pr-e*base);\n  return ps;\n}\n\nPolygon getCrossPointCC(Circle c1,Circle c2){\n  Polygon p(2);\n  double d=abs(c1.c-c2.c);\n  double a=acos((c1.r*c1.r+d*d-c2.r*c2.r)/(2*c1.r*d));\n  double t=arg(c2.c-c1.c);\n  p[0]=c1.c+polar(c1.r,t+a);\n  p[1]=c1.c+polar(c1.r,t-a);\n  return p;\n}\n\n// IN:2 ON:1 OUT:0\nint contains(Polygon g,Point p){\n  int n=g.size();\n  bool x=false;\n  for(int i=0;i<n;i++){\n    Point a=g[i]-p,b=g[(i+1)%n]-p;\n    if(fabs(cross(a,b)) < EPS && dot(a,b) < EPS) return 1;\n    if(a.y>b.y) swap(a,b);\n    if(a.y < EPS && EPS < b.y && cross(a,b) > EPS ) x = !x;\n  }\n  return (x?2:0);\n}\n\nPolygon andrewScan(Polygon s){\n  Polygon u,l;\n  if(s.size()<3) return s;\n  sort(s.begin(),s.end());\n  u.push_back(s[0]);\n  u.push_back(s[1]);\n  l.push_back(s[s.size()-1]);\n  l.push_back(s[s.size()-2]);\n  for(int i=2;i<(int)s.size();i++){\n    for(int n=u.size();n>=2&&ccw(u[n-2],u[n-1],s[i])!=CCW_CLOCKWISE;n--){\n      u.pop_back();\n    }\n    u.push_back(s[i]);\n  } \n  for(int i=s.size()-3;i>=0;i--){\n    for(int n=l.size();n>=2&&ccw(l[n-2],l[n-1],s[i])!=CCW_CLOCKWISE;n--){\n      l.pop_back();\n    }\n    l.push_back(s[i]);\n  }\n  reverse(l.begin(),l.end());\n  for(int i=u.size()-2;i>=1;i--) l.push_back(u[i]);\n  return l;\n} \n\nPolygon convex_hull(Polygon ps){\n  int n=ps.size();\n  sort(ps.begin(),ps.end(),sort_y);\n  int k=0;\n  Polygon qs(n*2);\n  for(int i=0;i<n;i++){\n    while(k>1&&cross(qs[k-1]-qs[k-2],ps[i]-qs[k-1])<0) k--;\n    qs[k++]=ps[i];\n  }\n  for(int i=n-2,t=k;i>=0;i--){\n    while(k>t&&cross(qs[k-1]-qs[k-2],ps[i]-qs[k-1])<0) k--;\n    qs[k++]=ps[i];\n  }\n  qs.resize(k-1);\n  return qs;\n}\n\ndouble diameter(Polygon s){\n  Polygon p=s;\n  int n=p.size();\n  if(n==2) return abs(p[0]-p[1]);\n  int i=0,j=0;\n  for(int k=0;k<n;k++){\n    if(p[i]<p[k]) i=k;\n    if(!(p[j]<p[k])) j=k;\n  }\n  double res=0;\n  int si=i,sj=j;\n  while(i!=sj||j!=si){\n    res=max(res,abs(p[i]-p[j]));\n    if(cross(p[(i+1)%n]-p[i],p[(j+1)%n]-p[j])<0.0){\n      i=(i+1)%n;\n    }else{\n      j=(j+1)%n;\n    }\n  }\n  return res;\n}\n\nbool isConvex(Polygon p){\n  bool f=1;\n  int n=p.size();\n  for(int i=0;i<n;i++){\n    int t=ccw(p[(i+n-1)%n],p[i],p[(i+1)%n]);\n    f&=t!=CCW_CLOCKWISE;\n  }\n  return f;\n}\n\ndouble area(Polygon s){\n  double res=0;\n  for(int i=0;i<(int)s.size();i++){\n    res+=cross(s[i],s[(i+1)%s.size()])/2.0;\n  }\n  return abs(res);\n}\n\ndouble area(Circle c1,Circle c2){\n  double d=abs(c1.c-c2.c);\n  if(c1.r+c2.r<=d+EPS) return 0;\n  if(d<=abs(c1.r-c2.r)){\n    double r=min(c1.r,c2.r);\n    return PI*r*r;\n  }\n  double rc=(d*d+c1.r*c1.r-c2.r*c2.r)/(2*d);\n  double th=acos(rc/c1.r);\n  double ph=acos((d-rc)/c2.r);\n  return c1.r*c1.r*th+c2.r*c2.r*ph-d*c1.r*sin(th);\n}\n\nPolygon convexCut(Polygon p,Line l){\n  Polygon q;\n  for(int i=0;i<(int)p.size();i++){\n    Point a=p[i],b=p[(i+1)%p.size()];\n    if(ccw(l.p1,l.p2,a)!=-1) q.push_back(a);\n    if(ccw(l.p1,l.p2,a)*ccw(l.p1,l.p2,b)<0)\n      q.push_back(getCrossPointLL(Line(a,b),l));\n  }\n  return q;\n}\n\nLine bisector(Point p1,Point p2){\n  Circle c1=Circle(p1,abs(p1-p2)),c2=Circle(p2,abs(p1-p2));\n  Polygon p=getCrossPointCC(c1,c2);\n  if(cross(p2-p1,p[0]-p1)>0) swap(p[0],p[1]);\n  return Line(p[0],p[1]);\n}\n\nVector translate(Vector v,double theta){\n  Vector res;\n  res.x=cos(theta)*v.x-sin(theta)*v.y;\n  res.y=sin(theta)*v.x+cos(theta)*v.y;\n  return res;\n}\n\nvector<Line> corner(Line l1,Line l2){\n  vector<Line> res;\n  if(isParallel(l1,l2)){\n    double d=getDistanceLP(l1,l2.p1)/2.0;\n    Vector v1=l1.p2-l1.p1;\n    v1=v1/v1.abs()*d;\n    Point p=l2.p1+translate(v1,90.0*(PI/180.0));\n    double d1=getDistanceLP(l1,p);\n    double d2=getDistanceLP(l2,p);\n    if(abs(d1-d2)>d){\n      p=l2.p1+translate(v1,-90.0*(PI/180.0));\n    }\n    res.push_back(Line(p,p+v1));\n  }else{\n    Point p=getCrossPointLL(l1,l2);\n    Vector v1=l1.p2-l1.p1,v2=l2.p2-l2.p1;\n    v1=v1/v1.abs();\n    v2=v2/v2.abs();\n    res.push_back(Line(p,p+(v1+v2)));\n    res.push_back(Line(p,p+translate(v1+v2,90.0*(PI/180.0))));\n  }\n  return res;\n}\n\nPolygon tangent(Circle c1,Point p2){\n  Circle c2=Circle(p2,sqrt(norm(c1.c-p2)-c1.r*c1.r));\n  Polygon p=getCrossPointCC(c1,c2);\n  sort(p.begin(),p.end());\n  return p;\n}\n\nvector<Line> tangent(Circle c1,Circle c2){\n  vector<Line> ls;\n  if(c1.r<c2.r) swap(c1,c2);\n  double g=norm(c1.c-c2.c);\n  if(equals(g,0)) return ls;\n  Point u=(c2.c-c1.c)/sqrt(g);\n  Point v=orth(u);\n  for(int s=1;s>=-1;s-=2){\n    double h=(c1.r+s*c2.r)/sqrt(g);\n    if(equals(1-h*h,0)){\n      ls.emplace_back(c1.c+u*c1.r,c1.c+(u+v)*c1.r);\n    }else if(1-h*h>0){\n      Point uu=u*h,vv=v*sqrt(1-h*h);\n      ls.emplace_back(c1.c+(uu+vv)*c1.r,c2.c-(uu+vv)*c2.r*s);\n      ls.emplace_back(c1.c+(uu-vv)*c1.r,c2.c-(uu-vv)*c2.r*s);\n    }\n  }\n  \n  return ls;\n}\n\n//END CUT HERE\n\n//Projection\nsigned AOJ_CGL1A(){\n  Point p1,p2;\n  cin>>p1>>p2;\n  int q;\n  cin>>q;\n  while(q--){\n    Point p;\n    cin>>p;\n    cout<<project(Line(p1,p2),p)<<endl;\n  }\n  return 0;\n}\n/*\n  verified on 2017/12/31\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_A&lang=jp\n*/\n\n//Reflect\nsigned AOJ_CGL1B(){\n  Point p1,p2;\n  cin>>p1>>p2;\n  int q;\n  cin>>q;\n  while(q--){\n    Point p;\n    cin>>p;\n    cout<<reflect(Line(p1,p2),p)<<endl;\n  }\n  return 0;\n}\n/*\n  verified on 2017/12/31\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_B&lang=jp\n*/\n\n//CCW\nsigned AOJ_CGL1C(){\n  Point p0,p1;\n  cin>>p0>>p1;\n  int q;\n  cin>>q;\n  while(q--){\n    Point p2;\n    cin>>p2;\n    int t=ccw(p0,p1,p2);\n    if(t==CCW_COUNTER_CLOCKWISE) cout<<\"COUNTER_CLOCKWISE\"<<endl;\n    if(t==CCW_CLOCKWISE) cout<<\"CLOCKWISE\"<<endl;\n    if(t==CCW_ONLINE_BACK) cout<<\"ONLINE_BACK\"<<endl;\n    if(t==CCW_ONLINE_FRONT) cout<<\"ONLINE_FRONT\"<<endl;\n    if(t==CCW_ON_SEGMENT) cout<<\"ON_SEGMENT\"<<endl;\n  }\n  return 0;\n}\n/*\n  verified on 2017/12/31\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_C&lang=jp\n*/\n\n//Parallel / Orthogonal\nsigned AOJ_CGL2A(){\n  int q;\n  cin>>q;\n  while(q--){\n    Point p0,p1,p2,p3;\n    cin>>p0>>p1>>p2>>p3;\n    if(isParallel(Line(p0,p1),Line(p2,p3))) cout<<2<<endl;\n    else if(isOrthogonal(Line(p0,p1),Line(p2,p3))) cout<<1<<endl;\n    else cout<<0<<endl;\n  }\n  return 0;\n}\n/*\n  verified on 2017/12/31\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_A&lang=jp\n*/\n\n//intersectSS\nsigned AOJ_CGL2B(){\n  int q;\n  cin>>q;\n  while(q--){\n    Point p0,p1,p2,p3;\n    cin>>p0>>p1>>p2>>p3;\n    cout<<(intersectSS(Segment(p0,p1),Segment(p2,p3)))<<endl;\n  }\n  return 0;\n}\n/*\n  verified on 2017/12/31\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_B&lang=jp\n*/\n\n//cross point\nsigned AOJ_CGL2C(){\n  int q;\n  cin>>q;\n  while(q--){\n    Point p0,p1,p2,p3;\n    cin>>p0>>p1>>p2>>p3;\n    cout<<getCrossPointSS(Segment(p0,p1),Segment(p2,p3))<<endl;\n  }\n  return 0;\n}\n/*\n  verified on 2017/12/31\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_C&lang=jp\n*/\n\n//distanceSS\nsigned AOJ_CGL2D(){\n  int q;\n  cin>>q;\n  while(q--){\n    Point p0,p1,p2,p3;\n    cin>>p0>>p1>>p2>>p3;\n    printf(\"%.12f\\n\",getDistanceSS(Segment(p0,p1),Segment(p2,p3)));\n  }\n  return 0;\n}\n/*\n  verified on 2017/12/31\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_D&lang=jp\n*/\n\n//area of Polygon\nsigned AOJ_CGL3A(){\n  int n;\n  cin>>n;\n  Polygon p(n);\n  for(int i=0;i<n;i++) cin>>p[i];\n  printf(\"%.1f\\n\",area(p));\n  return 0;\n}\n/*\n  verified on 2017/12/31\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_3_A&lang=jp\n*/\n\n\n//isConvex\nsigned AOJ_CGL3B(){\n  int n;\n  cin>>n;\n  Polygon p(n);\n  for(int i=0;i<n;i++) cin>>p[i];\n  cout<<isConvex(p)<<endl;\n  return 0;\n}\n/*\n  verified on 2017/12/31\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_3_B&lang=jp\n*/\n\n\n\n//contains\nsigned AOJ_CGL3C(){\n  int n;\n  cin>>n;\n  Polygon p(n);\n  for(int i=0;i<n;i++) cin>>p[i];\n  int q;\n  cin>>q;\n  while(q--){\n    Point r;\n    cin>>r;\n    cout<<contains(p,r)<<endl;\n  }\n  return 0;\n}\n/*\n  verified on 2017/12/31\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_3_C\n*/\n\n\n//convex hull\nsigned AOJ_CGL4A(){\n  int n;\n  cin>>n;\n  Polygon p(n);\n  for(int i=0;i<n;i++) cin>>p[i];\n  Polygon q=convex_hull(p);\n  cout<<q.size()<<endl;\n  for(Point v:q) cout<<v.x<<\" \"<<v.y<<endl;\n  return 0;\n}\n/*\n  verified on 2017/12/31\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_4_A&lang=jp\n*/\n\n//diameter of Polygon\nsigned AOJ_CGL4B(){\n  int n;\n  cin>>n;\n  Polygon p(n);\n  for(int i=0;i<n;i++) cin>>p[i];\n  printf(\"%.12f\\n\",diameter(p));\n  return 0;\n}\n/*\n  verified on 2017/12/31\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_4_B&lang=jp\n*/\n\n//convexCut:\nsigned AOJ_CGL4C(){\n  int n;\n  cin>>n;\n  Polygon g(n);\n  for(int i=0;i<n;i++) cin>>g[i];\n  Polygon p=andrewScan(g);\n  int q;\n  cin>>q;\n  while(q--){\n    Line l;\n    cin>>l.p1>>l.p2;\n    printf(\"%.12f\\n\",area(convexCut(p,l)));\n  }\n  return 0;\n}\n/*\n  verified on 2017/12/31\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_4_C&lang=jp\n*/\n\n\n//intersectCC\nsigned AOJ_CGL7A(){\n  Circle c1,c2;\n  cin>>c1>>c2;\n  cout<<intersectCC(c1,c2)<<endl;\n  return 0;\n}\n/*\n  verified on 2017/12/31\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_7_A\n*/\n\n//Common Tangent\nsigned AOJ_CGL7G(){\n  Circle c1,c2;\n  cin>>c1>>c2;\n  auto ls=tangent(c1,c2);\n  Polygon ps;\n  for(auto l:ls) ps.emplace_back(getCrossPointCL(c1,l)[0]);\n  sort(ps.begin(),ps.end());\n  for(auto p:ps) cout<<p<<endl;\n  return 0;\n}\n/*\n  verified on 2017/12/31\n  http://judge.u-aizu.ac.jp/onlinejudge//description.jsp?id=CGL_7_G&lang=jp\n*/\n\nsigned main(){\n  //AOJ_CGL1A();\n  //AOJ_CGL1B();\n  //AOJ_CGL1C();\n\n  //AOJ_CGL2A();\n  //AOJ_CGL2B();\n  //AOJ_CGL2C();\n  //AOJ_CGL2D();\n  \n  //AOJ_CGL3A();\n  //AOJ_CGL3B();\n  //AOJ_CGL3C();\n  \n  //AOJ_CGL4A();\n  //AOJ_CGL4B();\n  //AOJ_CGL4C();\n\n  \n  //AOJ_CGL7A();\n  //AOJ_CGL7D();\n  //AOJ_CGL7E();\n  //AOJ_CGL7G();\n  \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\n\nusing namespace std;\n\nconst double eps = 1e-15;\n\nclass Point {\npublic:\n    double x, y;\n    Point(double _x = 0., double _y = 0.) : x(_x), y(_y) {}\n};\n\nistream& operator >> (istream& in, Point& P)\n{\n    in >> P.x >> P.y;\n    return in;\n}\n\ndouble Dist(const Point& P, const Point& Q)\n{\n    double dx = P.x - Q.x;\n    double dy = P.y - Q.y;\n    return sqrt(dx * dx + dy * dy);\n}\n\nclass Circle {\npublic:\n    Point c;\n    double r;\n    Circle(const Point& _c = Point(), double _r = 0.) : c(_c), r(_r) {}\n};\n\nistream& operator >> (istream& in, Circle& C)\n{\n    in >> C.c >> C.r;\n    return in;\n}\n\nint CircStatus(const Circle& C1, const Circle& C2)\n{\n    double d = Dist(C1.c, C2.c);\n    if (d > C1.r + C2.r + eps) {\n        return 4;\n    } else if (d > C1.r + C2.r -eps) {\n        return 3;\n    } else if (d > fabs(C1.r - C2.r) + eps) {\n        return 2;\n    } else if (d > fabs(C1.r - C2.r) - eps) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n\nint main()\n{\n    Circle C1, C2;\n    cin >> C1 >> C2;\n\n    cout << CircStatus(C1, C2) << endl;\n    \n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#include<vector>\n#include<stack>\n#include<queue>\n#include<list>\n#include<string>\n#include<cstring>\n#include<cstdlib>\n#include<cstdio>\n#include<cmath>\n#include<ctime>\nusing namespace std;\n\ntypedef long long ll;\n\nbool debug = false;\nconst int NIL = -1;\nconst int INF = 1000000000;\nconst int NUM = 100010;\nconst double eps = 1e-10;\nclock_t START, END;\n\nint X, Y, E;\n\n//basic defitition\nstruct Point {\n\tdouble x, y;\n\tPoint(double x = 0, double y = 0) :x(x), y(y) {}\n};\ntypedef Point Vector;\nVector operator + (Vector A, Vector B) { return Vector(A.x + B.x, A.y + B.y); }\nVector operator - (Point A, Point B) { return Vector(A.x - B.x, A.y - B.y); }\nVector operator * (Vector A, double p) { return Vector(A.x * p, A.y * p); }\nVector operator / (Vector A, double p) { return Vector(A.x / p, A.y / p); }\nbool operator < (const Point& a, const Point& b) { return a.x < b.x || (a.x == b.x && a.y < b.y); }\nint dcmp(double x) { if (fabs(x) < eps)return 0; else return x < 0 ? -1 : 1; }\nbool operator == (const Point& a, const Point& b) { return dcmp(a.x - b.x) == 0 && dcmp(a.y - b.y) == 0; }\nstruct Line {\n\tPoint p;\n\tVector v;\n\tLine(Point p, Vector v) :p(p), v(v) {}\n\tPoint point(double t) { return p + v * t; }\n\t//Line move(double d) { return Line(p + Normal(v) * d, v); }\n};\n// basic operator\ndouble Dot(Vector A, Vector B) { return A.x * B.x + A.y * B.y; }\ndouble Length(Vector A) { return sqrt(Dot(A, A)); }\ndouble Angle(Vector A, Vector B) { return acos(Dot(A, B) / Length(A) / Length(B)); }\ndouble Cross(Vector A, Vector B) { return A.x * B.y - A.y * B.x; }\ndouble Area2(Point A, Point B, Point C) { return Cross(B - A, C - A); }\nVector Rotate(Vector A, double rad) { return Vector(A.x * cos(rad) - A.y * sin(rad), A.x * sin(rad) + A.y * cos(rad)); }\nVector Normal(Vector A) { double L = Length(A); return Vector(-A.y / L, A.x / L); } //A is not zero vector\n//point and line\nPoint GetLineIntersection(Point P, Vector v, Point Q, Vector w) {\n\tVector u = P - Q;\n\tdouble t = Cross(w, u) / Cross(v, w);\n\treturn P + v * t;\n}//two lines only have one intersection and Cross(v,w) is not zero\ndouble DistanceToLine(Point P, Point A, Point B) {\n\tVector v1 = B - A, v2 = P - A;\n\treturn fabs(Cross(v1, v2)) / Length(v1);\n}\ndouble DistanceToSegment(Point P, Point A, Point B) {\n\tif (A == B) return Length(P - A);\n\tVector v1 = B - A, v2 = P - A, v3 = P - B;\n\tif (dcmp(Dot(v1, v2)) < 0) return Length(v2);\n\telse if (dcmp(Dot(v1, v3)) > 0) return Length(v3);\n\telse return fabs(Cross(v1, v2)) / Length(v1);\n}\nPoint GetLineProjection(Point P, Point A, Point B) {\n\tVector v = B - A;\n\treturn A = v * (Dot(v, P - A) / Dot(v, v));\n}\nbool SegmentProperIntersection(Point a1, Point a2, Point b1, Point b2) {\n\tdouble c1 = Cross(a2 - a1, b1 - a1), c2 = Cross(a2 - a1, b2 - a1), c3 = Cross(b2 - b1, a1 - b1), c4 = Cross(b2 - b1, a2 - b1);\n\treturn dcmp(c1) * dcmp(c2) < 0 && dcmp(c3) * dcmp(c4) < 0;\n}\nbool OnSegment(Point p, Point a1, Point a2) {\n\treturn dcmp(Cross(a1 - p, a2 - p)) == 0 && dcmp(Dot(a1 - p, a2 - p)) <= 0;\n}\ndouble angle(Vector v) { return atan2(v.y, v.x); }\n//polygon\ndouble ConvexPolygonArea(Point* p, int n) {\n\tdouble area = 0;\n\tfor (int i = 1; i < n - 1; i++)\n\t\tarea = Cross(p[i] - p[0], p[i + 1] - p[0]);\n\treturn area / 2;\n}\n//circle\nstruct Circle {\n\tPoint c;\n\tdouble r;\n\tCircle(Point c, double r) :c(c), r(r) {}\n\tPoint point(double a) { return Point(c.x + cos(a) * r, c.y + sin(a) * r); }\n};\nint getLineCircleIntersection(Line L, Circle C, double& t1, double& t2, vector<Point>& sol) {\n\tdouble a = L.v.x, b = L.p.x - C.c.x, c = L.v.y, d = L.p.y - C.c.y;\n\tdouble e = a * a + c * c, f = 2 * (a * b + c * d), g = b * b + d * d - C.r * C.r;\n\tdouble delta = f * f - 4 * e * g;\n\tif (dcmp(delta) < 0)\n\t\treturn 0;\n\tif (dcmp(delta) == 0) {\n\t\tt1 = t2 = -f / (2 * e);\n\t\tsol.push_back(L.point(t1));\n\t\treturn 1;\n\t}\n\tt1 = (-f - sqrt(delta)) / (2 * e);\n\tsol.push_back(L.point(t1));\n\tt2 = (-f + sqrt(delta)) / (2 * e);\n\tsol.push_back(L.point(t2));\n\treturn 2;\n}\nint getCircleCircleIntersection(Circle C1, Circle C2, vector<Point>& sol) {\n\tdouble d = Length(C1.c - C2.c);\n\tif (dcmp(d) == 0) {\n\t\tif (dcmp(C1.r - C2.r) == 0) return -1;\n\t\treturn 0;\n\t}\n\tif (dcmp(C1.r + C2.r - d) < 0) return 0;\n\tif (dcmp(fabs(C1.r - C2.r) - d) > 0) return 0;\n\tdouble a = angle(C2.c - C1.c);\n\tdouble da = acos((C1.r * C1.r + d * d - C2.r * C2.r) / (2 * C1.r * d));\n\tPoint p1 = C1.point(a - da), p2 = C1.point(a + da);\n\tsol.push_back(p1);\n\tif (p1 == p2) return 1;\n\tsol.push_back(p2);\n\treturn 2;\n}\nint getTangents(Circle A, Circle B) {\n\tint cnt = 0;\n\tif (A.r < B.r)\n\t\tswap(A, B);\n\tdouble d2 = (A.c.x - B.c.x) * (A.c.x - B.c.x) + (A.c.y - B.c.y) * (A.c.y - B.c.y);\n\tdouble rdiff = A.r - B.r;\n\tdouble rsum = A.r + B.r;\n\tif (dcmp(d2 - rdiff * rdiff) == -1)\n\t\treturn 0;\n\telse if (dcmp(d2 - rdiff * rdiff) == 0)\n\t\treturn 1;\n\telse if (dcmp(d2 - rsum * rsum) == 0)\n\t\treturn 3;\n\telse if (dcmp(d2 - rsum * rsum) == 1)\n\t\treturn 4;\n\telse return 2;\n}\n\n\nint main(void)\n{\n\tif (debug) {\n\t\tSTART = clock();\n\t\tfreopen(\"in29.txt\", \"r\", stdin);\n\t\tfreopen(\"out.txt\", \"w\", stdout);\n\t}\n\tint ans;\n\tPoint O;\n\tdouble r;\n\tscanf(\"%lf%lf%lf\", &O.x, &O.y, &r);\n\tCircle C1(O, r);\n\tscanf(\"%lf%lf%lf\", &O.x, &O.y, &r);\n\tCircle C2(O, r);\n\tans = getTangents(C1, C2);\n\tprintf(\"%d\\n\", ans);\n\tif (debug) {\n\t\tEND = clock();\n\t\tdouble endtime = (double)(END - START) / 1000;\n\t\tprintf(\"total time = %lf s\", endtime);\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define rep(i, n) REP(i, 0, n)\n#define REP(i, s, e) for(int i = (int)(s); i < (int)(e); i++)\n#define pb push_back\n\n#define X real()\n#define Y imag()\n#define x(p) real(p)\n#define y(p) imag(p)\n#define curr(P, i) P[i]\n#define next(P, i) P[(i+1)%P.size()]\n#define prev(P, i) P[(i+P.size()-1)%P.size()]\n\nconst double EPS = 1e-8;\nconst double INF = 1e12;\nconst double PI = acos(-1);\ntypedef complex<double> P;\ntypedef complex<double> point;\nnamespace std {\n\tbool operator < (const P& a, const P& b) {\n\t\treturn real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n\t}\n}\ndouble cross(const P& a, const P& b) {\n\treturn imag(conj(a)*b);\n}\ndouble dot(const P& a, const P& b) {\n\treturn real(conj(a)*b);\n}\n\nstruct L : public vector<P> {\n\tL(const P &a, const P &b) {\n\t\tpush_back(a); push_back(b);\n\t}\n};\n\ntypedef vector<P> G;\ntypedef vector<P> polygon;\n\nstruct C {\n\tP p; double r;\n\tC(const P &p, double r) : p(p), r(r) { }\n};\n//??????????????????\nint ccw(P a, P b, P c) {\n\tb -= a; c -= a;\n\tif (cross(b, c) > 0)   return +1;       // counter clockwise\n\tif (cross(b, c) < 0)   return -1;       // clockwise\n\tif (dot(b, c) < 0)     return +2;       // c--a--b on line\n\tif (norm(b) < norm(c)) return -2;       // a--b--c on line\n\treturn 0;\n}\n\nbool intersectLL(const L &l, const L &m) {\n\treturn abs(cross(l[1]-l[0], m[1]-m[0])) > EPS || // non-parallel\n\t\t\tabs(cross(l[1]-l[0], m[0]-l[0])) < EPS;   // same line\n}\nbool intersectLS(const L &l, const L &s) {\n\treturn cross(l[1]-l[0], s[0]-l[0])*       // s[0] is left of l\n\t\t\tcross(l[1]-l[0], s[1]-l[0]) < EPS; // s[1] is right of l\n}\nbool intersectLP(const L &l, const P &p) {\n\treturn abs(cross(l[1]-p, l[0]-p)) < EPS;\n}\nbool intersectSS(const L &s, const L &t) {\n  return ccw(s[0],s[1],t[0])*ccw(s[0],s[1],t[1]) <= 0 &&\n         ccw(t[0],t[1],s[0])*ccw(t[0],t[1],s[1]) <= 0;\n}\nbool intersectSP(const L &s, const P &p) {\n\treturn abs(s[0]-p)+abs(s[1]-p)-abs(s[1]-s[0]) < EPS; // triangle inequality\n}\nP projection(const L &l, const P &p) {\n\tdouble t = dot(p-l[0], l[0]-l[1]) / norm(l[0]-l[1]);\n\treturn l[0] + t*(l[0]-l[1]);\n}\nP reflection(const L &l, const P &p) {\n\treturn p + 2.0 * (projection(l, p) - p);\n}\ndouble distanceLP(const L &l, const P &p) {\n\treturn abs(p - projection(l, p));\n}\ndouble distanceLL(const L &l, const L &m) {\n\treturn intersectLL(l, m) ? 0 : distanceLP(l, m[0]);\n}\ndouble distanceLS(const L &l, const L &s) {\n\tif (intersectLS(l, s)) return 0;\n\treturn min(distanceLP(l, s[0]), distanceLP(l, s[1]));\n}\ndouble distanceSP(const L &s, const P &p) {\n\tconst P r = projection(s, p);\n\tif (intersectSP(s, r)) return abs(r - p);\n\treturn min(abs(s[0] - p), abs(s[1] - p));\n}\ndouble distanceSS(const L &s, const L &t) {\n\tif (intersectSS(s, t)) return 0;\n\treturn min(min(distanceSP(s, t[0]), distanceSP(s, t[1])),\n\t\t\tmin(distanceSP(t, s[0]), distanceSP(t, s[1])));\n}\nP crosspoint(const L &l, const L &m) {\n\tdouble A = cross(l[1] - l[0], m[1] - m[0]);\n\tdouble B = cross(l[1] - l[0], l[1] - m[0]);\n\tif (abs(A) < EPS && abs(B) < EPS) return m[0]; // same line\n\tif (abs(A) < EPS) assert(false); // !!!PRECONDITION NOT SATISFIED!!!\n\treturn m[0] + B / A * (m[1] - m[0]);\n}\n// enum { OUT, ON, IN };\n// int contains(const G& pol, const P& p){\n// \tif(pol.size() < 2) return OUT;\n// \tif(intersectSP({pol[0], pol[1]}, p)) return ON;\n// \tbool f = cross(pol[1]-pol[0], p - pol[0]) > 0;\n// \tfor(int i = 1; i < pol.size(); i++) {\n// \t\tauto& now = curr(pol, i);\n// \t\tauto& nxt = next(pol, i);\n// \t\tif(intersectSP({nxt, now}, p)) return ON;\n// \t\tif(f^(cross(nxt-now, p-now)>0)) return OUT;\n// \t}\n// \treturn IN;\n// }\n//??????????§???¢?????????????????????(polygon??????????¨???????)\nenum { OUT, ON, IN };\nint contains(const polygon& P, const point& p) {\n\tbool in = false;\n\tfor (int i = 0; i < P.size(); ++i) {\n\t\tpoint a = curr(P,i) - p, b = next(P,i) - p;\n\t\tif (imag(a) > imag(b)) swap(a, b);\n\t\tif (imag(a) <= 0 && 0 < imag(b))\n\t\t\tif (cross(a, b) < 0) in = !in;\n\t\tif (cross(a, b) == 0 && dot(a, b) <= 0) return ON;\n\t}\n\treturn in ? IN : OUT;\n}\nbool contains(const polygon& a, const polygon& b) {\n\trep(i, a.size()) if(contains(b, a[i]) == OUT) return false;\n\treturn true;\n}\n//????????´???????£???????????????????(??????????????£???????????????)\nenum{NO_HIT, HIT, A_IN_B, B_IN_A};\nint isHit(const polygon& a, const polygon& b){\n\tif(contains(a, b)) return A_IN_B;\n\tif(contains(b, a)) return B_IN_A;\n\trep(i, a.size()) rep(j, b.size()){\n\t\tL la(curr(a, i), next(a, i)), lb(curr(b, j), next(b, j));\n\t\tif(intersectSS(la, lb)) return HIT;\n\t}\n\treturn NO_HIT;\n}\n\n//point???theta???????????¢\npoint spinP(const point& p, double theta, double ext = 1.0) {\n\treturn p*P(cos(theta),sin(theta))*ext;\n}\n\npoint makeP(double r, double arg) {return P(r*cos(arg), r*sin(arg));}\n\n//?????¨????????????????±???????\nvector<P> crossPoint(const C& a, const C& b){\n\tdouble d = abs(b.p-a.p);\n\tdouble arg = atan2(y(b.p-a.p), x(b.p-a.p));\n\tdouble arg2 = acos((d*d+a.r*a.r-b.r*b.r)/(2*d*a.r));\n\tif(abs(arg2)<EPS) return {a.r*makeP(1.0, arg)+a.p};\n\tif(abs(a.r-b.r)<d && d < a.r+b.r) return {a.r*makeP(1.0, arg+arg2)+a.p, a.r*makeP(1.0, arg-arg2)+a.p};\n\treturn {};\n}\n\n//????????±?????\\???\nvector<L> comonTang(C c1, C c2) {\n\tvector<L> ret;\n\tif(c1.r > c2.r) swap(c1, c2);\n\tP sub = c1.p;\n\tc1.p -= sub;\n\tc2.p -= sub;\n\tdouble theta = atan2(c2.p.Y, c2.p.X);\n\n\tc2.p = spinP(c2.p, -theta);\n\tint signX = 0;\n\tif(c2.p.X > 0) signX = 1;\n\tif(c2.p.X < 0) signX = -1;\n\n\tdouble x = abs(c2.p.X), r1 = c1.r, r2 = c2.r;\n\tif(abs(x*x -(r2 - r1) * (r2 - r1))<EPS) {\n\t\tdouble theta2 = asin((r2-r1)/x);\n\t\tret.pb({spinP({0, r1}, theta2), spinP({sqrt(x*x-(r2-r1)*(r2-r1)), r1}, theta2)});\n\t}\n\telse if(x*x > (r2 - r1) * (r2 - r1)) {\n\t\tdouble theta2 = asin((r2-r1)/x);\n\t\tret.pb({spinP({0, r1}, theta2), spinP({sqrt(x*x-(r2-r1)*(r2-r1)), r1}, theta2)});\n\t\tret.pb({spinP({0, -r1}, -theta2), spinP({sqrt(x*x-(r2-r1)*(r2-r1)), -r1}, -theta2)});\n\t}\n\tif(abs(r1+r2-x)<EPS) {\n\t\tdouble theta3 = PI / 2 - acos((r1+r2)/x);\n\t\tdouble len = sqrt((r1*x)*(r1*x)/(r1+r2)/(r1+r2)-r1*r1) + sqrt((r2*x)*(r2*x)/(r1+r2)/(r1+r2)-r2*r2);\n\t\tret.pb({spinP({0, r1}, -theta3), spinP({len, r1}, -theta3)});\n\t}\n\telse if(x > r1+r2) {\n\t\tdouble theta3 = PI / 2 - acos((r1+r2)/x);\n\t\tdouble len = sqrt((r1*x)*(r1*x)/(r1+r2)/(r1+r2)-r1*r1) + sqrt((r2*x)*(r2*x)/(r1+r2)/(r1+r2)-r2*r2);\n\t\tret.pb({spinP({0, r1}, -theta3), spinP({len, r1}, -theta3)});\n\t\tret.pb({spinP({0, -r1}, -theta3), spinP({len, -r1}, theta3)});\n\t}\n\n\tfor(auto& l : ret) {\n\t\tif(signX == -1) l[1] = {-l[1].X, l[1].Y};\n\t\tl[0] = spinP(l[0], theta);\n\t\tl[1] = spinP(l[1], theta);\n\t\tl[0] += sub;\n\t\tl[1] += sub;\n\t}\n\treturn ret;\n}\n\ndouble getArea(const polygon& pol) {\n\tint n = pol.size();\n\tdouble s = 0.0;\n\tfor(int i = 0; i < n; i++) {\n\t\tint now = i, nxt = (i + 1) % n;\n\t\ts += (pol[now].X - pol[nxt].X) * (pol[now].Y + pol[nxt].Y);\n\t}\n\treturn abs(s/2.0);\n}\n\n//?????? - convex hull\nvector<point> convex_hull(vector<point> ps) {\n\tint n = ps.size(), k = 0;\n\tsort(ps.begin(), ps.end());\n\tvector<point> ch(2*n);\n  \tfor (int i = 0; i < n; ch[k++] = ps[i++]) // lower-hull\n  \t\twhile (k >= 2 && ccw(ch[k-2], ch[k-1], ps[i]) == -1) --k;\n  \tfor (int i = n-2, t = k+1; i >= 0; ch[k++] = ps[i--]) // upper-hull\n  \t\twhile (k >= t && ccw(ch[k-2], ch[k-1], ps[i]) == -1) --k;\n  \tch.resize(k-1);\n  \treturn ch;\n}\n//???????¨??????????polygon????????????????????????\t\t\tCGL_3_B\nbool isHull(const G& g) {\n\tint n = g.size();\n\tif(n < 3) return false;\n\trep(i, n) if(ccw(prev(g, i), curr(g, i), next(g, i)) == -1) return false;\n\treturn true;\n}\n\nint main() {\n\tvector<C> c;\n\trep(i, 2) {\n\t\tdouble x, y, r;\n\t\tcin >> x >> y >> r;\n\t\tc.pb({P(x, y), r});\n\t}\n\tcout << comonTang(c[0], c[1]).size() << endl;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n\nenum IntersectionType{\n  INCLUDED = 0,\n  INSCRIBED = 1,\n  INTERSECTED = 2,\n  CIRCUMSCRIBED = 3,\n  NOT_INTERSECTED = 4,\n};\n\nstruct Circle2D{\n  int JudgeIntersection(const Circle2D& another){\n    const auto distance = std::hypot(x - another.x, y - another.y);\n    const auto sumRadius = r + another.r;\n    if(distance == sumRadius){\n      return CIRCUMSCRIBED;\n    }\n    if(distance > sumRadius){\n      return NOT_INTERSECTED;\n    }\n    const auto smallerRadius = r < another.r ? r : another.r;\n    const auto greaterRadius = r > another.r ? r : another.r;\n    const auto sumDistSmaller = distance + smallerRadius;\n    if(sumDistSmaller < greaterRadius){\n      return INCLUDED;\n    }\n    if(sumDistSmaller > greaterRadius){\n      return INTERSECTED;\n    }\n    return INSCRIBED;\n  }\n  double x;\n  double y;\n  double r;\n};\n\nint main(){\n  Circle2D c1;\n  Circle2D c2;\n  std::cin >> c1.x >> c1.y >> c1.r;\n  std::cin >> c2.x >> c2.y >> c2.r;\n  std::cout << c1.JudgeIntersection(c2) << std::endl;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define rep(i,n) for(int i=0;(i)<(n);++(i))\nusing namespace std;\n\n// Description: ????????????\n// Verifyed: various problem\nusing namespace placeholders;\nusing R = long double;\nconst R EPS = 1e-9L; // [-1000,1000]->EPS=1e-8 [-10000,10000]->EPS=1e-7\ninline int sgn(const R& r) {return (r > EPS) - (r < -EPS);}\ninline R sq(R x) {return sqrt(max(x, 0.0L));}\n\nconst R INF = 1E40L;\nconst R PI = acos(-1.0L);\nusing P = complex<R>;\nusing L = struct {P s, t;};\nusing VP = vector<P>;\nusing C = struct {P c; R r;};\n\n#define at(a,i) (a[(i + a.size()) % a.size()])\n\nauto& operator >> (istream& is, P& p) { R x, y; is >> x >> y, p = P(x, y); return is;}\nauto& operator << (ostream& os, P& p) { os << real(p) << \" \" << imag(p); return os;}\n\nnamespace std {\t\n\tbool operator <  (const P& a, const P& b) { return sgn(real(a - b)) ? real(a - b) < 0 : sgn(imag(a - b)) < 0;}\n\tbool operator == (const P& a, const P& b) { return sgn(real(a - b)) == 0 && sgn(imag(a - b)) == 0;}\n}\n\ninline R dot(P o, P a, P b) {return real(conj(a - o) * (b - o));}\ninline R det(P o, P a, P b) {return imag(conj(a - o) * (b - o));}\ninline P vec(L l) {return l.t - l.s;}\nauto sdot = bind(sgn, bind(dot, _1, _2, _3));\nauto sdet = bind(sgn, bind(det, _1, _2, _3));\n\n//projection verify AOJ CGL_1_A\nP proj(L l, P p) { R u = real((p - l.s) / vec(l)); return (1 - u) * l.s + u * l.t;}\n\n// vertical parallel\n// verified: AOJ CGL_2_A\nbool vertical(L a, L b) {return sdot(0, vec(a), vec(b)) == 0;}\nbool parallel(L a, L b) {return sdet(0, vec(a), vec(b)) == 0;}\nbool eql(L a, L b) { return parallel(a, b) and sdet(a.s, a.t, b.s) == 0;}\n\n// crossing determination\n// verified: AOJ CGL_2_B\nbool iss(L a, L b) {\n\tint sa = sdet(a.s, a.t, b.s) * sdet(a.s, a.t, b.t);\n\tint sb = sdet(b.s, b.t, a.s) * sdet(b.s, b.t, a.t);\n\treturn max(sa, sb) < 0;\n}\n\n// crossing point\n// verified: AOJ CGL_2_C\nP cross(L a, L b) {\n\tR u = det(a.s, b.s, b.t) / det(0, vec(a), vec(b));\n\treturn (1 - u) * a.s + u * a.t;\n}\n\n// distance\n// verified: AOJ CGL_2_D\nR dsp(L l, P p) {\n\tP h = proj(l, p);\n\tif (sdot(l.s, l.t, p) <= 0) h = l.s;\n\tif (sdot(l.t, l.s, p) <= 0) h = l.t;\n\treturn abs(p - h);\n}\n\nR dss(L a, L b) {return iss(a, b) ? 0 : min({dsp(a, b.s), dsp(a, b.t), dsp(b, a.s), dsp(b, a.t)});}\n\n// Polygon\n\n// area\n// verified: AOJ 1100 CGL_3_A\nR area(const VP& pol) {\n\tR sum = 0.0;\n\trep(i, pol.size()) sum += det(0, at(pol, i), at(pol, i + 1));\n\treturn abs(sum / 2.0L);\n}\n\n// convex_polygon determination\n// verified: CGL_3_B\nbool is_convex(const VP& pol) {\n\trep(i, pol.size())if (sdet(at(pol, i), at(pol, i + 1), at(pol, i + 2)) < 0) return false;\n\treturn true;\n}\n\n// polygon realation determination  in  2 on 1 out 0???(possible non-convex)\n// verified: AOJ CGL_3-C\nint in_polygon(const VP& pol, const P& p) {\n\tint res = 0;\n\tauto simag = [](const P & p) {return sgn(imag(p));};\n\trep(i, pol.size()) {\n\t\tP a = at(pol, i), b = at(pol, i + 1);\n\t\tif (sdet(p, a, b) == 0 and sdot(p, a, b) <= 0) return 1;\n\t\tbool f = simag(p - a) >= 0, s = simag(p - b) < 0;\n\t\tif (simag(b - a)*sdet(a, b, p) == 1 and f == s) res += (2 * f - 1);\n\t}\n\treturn res ? 2 : 0;\n}\n\n// polygon realation determination???(possible non-convex)\n// verified: not AOJ 2514\nbool in_polygon(const VP& pol, const L& l) {\n\tVP check = {l.s, l.t};\n\trep(i, pol.size()) {\n\t\tL edge = {at(pol, i), at(pol, i + 1)};\n\t\tif (iss(l, edge)) check.emplace_back(cross(l, edge));\n\t}\n\n\tauto cmp_x = [](P a, P b)->bool{\n\t\tint sr = sgn(real(a - b)), si = sgn(imag(a - b));\n\t\treturn sr ? sr < 0 : si < 0;\n\t};\n\n\tsort(begin(check), end(check), cmp_x);\n\trep(i, check.size() - 1) {\n\t\tP m = (at(check, i) + at(check, i + 1)) / 2.0L;\n\t\tif (in_polygon(pol, m) == false) return false;\n\t}\n\treturn true;\n}\n\n// convex_cut\n// verified: AOJ CGL_4_C\nVP convex_cut(const VP& pol, const L& l) {\n\tVP res;\n\trep(i, pol.size()) {\n\t\tP a = at(pol, i), b = at(pol, i + 1);\n\t\tint da = sdet(l.s, l.t, a), db = sdet(l.s, l.t, b);\n\t\tif (da >= 0) res.emplace_back(a);\n\t\tif (da * db < 0) res.emplace_back(cross({a, b}, l));\n\t}\n\treturn res;\n}\n\n// farthest point pair Verify AOJ CGL_4_B\nR fpp(VP pol) {\n\tint n = pol.size(), i = 0, j = 0;\n\tif (n <= 2) return abs(pol[0] - pol[1]);\n\tR res = 0.0;\n\n\tauto cmp_x = [](P a, P b)->bool{\n\t\tint sr = sgn(real(a - b)), si = sgn(imag(a - b));\n\t\treturn sr ? sr < 0 : si < 0;\n\t};\n\n\trep(k, n) {\n\t\tif (!cmp_x(pol[i], pol[k]))i = k;\n\t\tif (cmp_x(pol[j], pol[k]))j = k;\n\t}\n\n\tint si = i, sj = j;\n\twhile (i != sj || j != si) {\n\t\tres = max(res, abs(pol[i] - pol[j]));\n\t\tif (sdet(0, vec(L{at(pol, i), at(pol, i + 1)}), vec(L{at(pol, j), at(pol, j + 1)})) < 0)\n\t\t\ti = (i + 1) % n;\n\t\telse\n\t\t\tj = (j + 1) % n;\n\t}\n\treturn res;\n}\n\n// closest point pair Verify AOJ CGL_5_A\nR iscp(VP a, int flag = 1) {\n\tconst int n = a.size(), m = n / 2;\n\tif (n <= 1) return INF;\n\n\tauto cmp_x = [](P a, P b)->bool{\n\t\tint sr = sgn(real(a - b)), si = sgn(imag(a - b));\n\t\treturn sr ? sr < 0 : si < 0;\n\t};\n\n\tif (flag) sort(begin(a), end(a), cmp_x);\n\n\tVP b(begin(a), begin(a) + m), c(begin(a) + m, end(a));\n\tR x = real(a[m]), d = min(iscp(b, 0), iscp(c, 0));\n\n\n\tauto cmp_y = [](P a, P b)->bool{\n\t\tint sr = sgn(real(a - b)), si = sgn(imag(a - b));\n\t\treturn si ? si < 0 : sr < 0;\n\t};\n\n\tsort(begin(a), end(a), cmp_y);\n\tdeque<P> e;\n\n\tfor (auto &p : a) {\n\t\tif (abs(real(p) - x) >= d) continue;\n\n\t\tfor (auto &q : e) {\n\t\t\tif (imag(p - q) >= d) break;\n\t\t\td = min(d, abs(p - q));\n\t\t}\n\t\te.push_front(p);\n\t}\n\treturn d;\n}\n\n// Circle // verified: AOJ 1183\nenum RCC {OUT = 2, ON_OUT = 1, ISC = 0, ON_IN = -1, IN = -2};\nint rcc(C a, C b) { R d = abs(a.c - b.c); return sgn(d - a.r - b.r) + sgn(d - abs(a.r - b.r));}\n\n// circle crossing determination\nbool icp(C c, P p, int end = 0) {return sgn(abs(p - c.c) - c.r) <= -end;}\nbool ics(C c, L s, int end = 0) {\n\tif (sgn(dsp(s, c.c) - c.r) > end) return false;\n\tif (icp(c, s.s, end) and icp(c, s.t, end)) return false;\n\treturn true;\n}\n// common area between circles\nR area(C a, C b) {\n\tint r = rcc(a, b);\n\tif (r >= ON_OUT) return 0.0L;\n\tif (r <= ON_IN) return min(norm(a.r), norm(b.r)) * PI;\n\tR d = abs(b.c - a.c), rc = (norm(d) + norm(a.r) - norm(b.r)) / (2.0 * d);\n\tR t = acos(rc / a.r), p = acos((d - rc) / b.r);\n\treturn norm(a.r) * t + norm(b.r) * p - d * a.r * sin(t);\n}\n\n// cross point between circle and line\n// verified: AOJ CGL_7_D\nP cir(C c, R t) {return c.c + polar(c.r, t);}\nVP cross(C c, L l) {\n\tP h = proj(l, c.c);\n\tP e = polar(sq(norm(c.r) - norm(h-c.c)), arg(vec(l)));\n\treturn VP{h - e, h + e};\n}\n\n// cross point between circles\n// verified: AOJ CGL_7_E\nVP cross(C a, C b) {\n\tP d = b.c - a.c;\n\tP w = (norm(d) + norm(a.r) - norm(b.r)) / (2.0L * norm(d)) * d; \n\treturn cross(a, {a.c + w, a.c + w + 1il * d});\n}\n\n// circle tangent\n// verified: AOJ CGL_7_F\nL tan(C c, P p) {return L{p, p + 1il * (p - c.c)};}\n\nP helper(C c, P d, R r, P j) {\n\tP tmp = sq(norm(d) - norm(r)) * j;\n\tP dir = (r + tmp) / norm(d) * d;\n\treturn c.c + c.r * dir;\n}\n\nVP contact(C c, P p) {\n\tVP ret;\n\tP d = p - c.c;\n\tfor (P j : { -1il, 1il}) ret.emplace_back(helper(c, d, c.r, j));\n\tsort(begin(ret), end(ret));\n\tret.erase(unique(begin(ret), end(ret)), end(ret));\n\treturn ret;\n}\n\n// circle tangent\n// Verified: AOJ CGL_7_G\nVP contact(C a, C b) {\n\tVP ret;\n\tP d = b.c - a.c;\n\tfor (int s : { -1, 1}) {\n\t\tif (rcc(a, b) >= s) {\n\t\t\tfor (P j : { -1i, 1i}) {\n\t\t\t\tR r = a.r + s * b.r;\n\t\t\t\tret.emplace_back(helper(a, d, r, j));\n\t\t\t}\n\t\t}\n\t}\n\tsort(begin(ret), end(ret));\n\tret.erase(unique(begin(ret), end(ret)), end(ret));\n\treturn ret;\n}\n\n// common area of circle and polygon\n// verified: AOJ CGL_7_H\nR area_helper(C c, P a, P b) {\n\tif (icp(c, a) and icp(c, b)) return det(0, a, b) / 2.0l;\n\treturn norm(c.r) * arg(conj(a)*b) / 2.0l;\n}\n\nR area(C c, P a, P b) {\n\tL l = {a, b};\n\n\tif (sgn(min({c.r, abs(a), abs(b), abs(b - a)})) == 0) return 0.0;\n\tif (ics(c, l)==false) return area_helper(c, a, b);\n\t\n\tR res = 0.0; VP ary;\n\tary.push_back(a);\n\tfor (auto &p : cross(c, l)) if(sdot(p, a, b) < 0) ary.push_back(p);\n\tary.push_back(b);\n\t\n\trep(i, ary.size()-1) res += area_helper(c, at(ary, i), at(ary, i + 1));\n\treturn res;\n}\n\nR area(C c, VP pol) {\n\tR res = 0;\n\trep(i, pol.size()) {\n\t\tP a = at(pol, i) - c.c , b = at(pol, i + 1) - c.c;\n\t\tres += area(C{0.0L, c.r}, a, b);\n\t}\n\treturn res;\n}\nint main(void){\n\tC a,b;\n\tcin >> a.c >> a.r >> b.c >> b.r;\n\tcout << rcc(a,b)+2\t<< endl;\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <math.h>\nint main() {\n    int c1x, c1y, c1r, c2x, c2y, c2r;\n    scanf(\"%d %d %d\", &c1x, &c1y, &c1r);\n    scanf(\"%d %d %d\", &c2x, &c2y, &c2r);\n\n    if(c1r<c2r){\n        if(sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2)) > c1r + c2r) printf(\"4¥n\");\n        else if(sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2)) == c1r + c2r) printf(\"3\");\n        else if((c2r-c1r<sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2))) && (sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2)) < c1r + c2r)) printf(\"2\");\n        else if(sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2)) == c2r-c1r) printf(\"1\");\n        else if(sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2)) < c2r-c1r) printf(\"0\");\n\n\n    }\n\n    else{\n        if(sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2)) > c1r + c2r) printf(\"4\");\n        else if(sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2)) == c1r + c2r) printf(\"3\");\n        else if(((c1r-c2r<sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2))) && (sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2)) < c1r + c2r))) printf(\"2\");\n        else if(sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2)) == c1r-c2r) printf(\"1\");\n        else if(sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2)) < c1r-c2r) printf(\"0\");\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nconst double inf = 30000;\nconst double eps = 1e-8;\nconst int N = 2e5 + 100;\nint sgn (double x) {\n    if (fabs (x) < eps) return 0;\n    if (x < 0) return -1;\n    return 1;\n}\nstruct point {\n    double x, y;\n    point () {}\n    point (double _x, double _y) {\n        x = _x, y = _y;\n    }\n    void input () {\n        scanf (\"%lf %lf\", &x, &y);\n    }\n    point operator - (const point &b) const {\n        return point (x - b.x, y - b.y);\n    }\n    bool operator == (const point &b) const {\n        return sgn (x - b.x) == 0 && sgn (y - b.y) == 0;\n    }\n    bool operator < (const point &b) const {\n        if (sgn (y - b.y) == 0) return x < b.x;\n        return y < b.y;\n    }\n    double operator * (const point &b) const {\n        return x * b.x + y * b.y;\n    }\n    double operator ^ (const point &b) const {\n        return x * b.y - y * b.x;\n    }\n    point operator / (const double &b) const {\n        return point (x / b, y / b);\n    }\n    point operator * (const double &b) const {\n        return point (x * b, y * b);\n    }\n    point operator + (const point &b) const {\n        return point (x + b.x, y + b.y);\n    }\n    double cross (point a, point b) {\n        return (point (a - *this) ^ point (b - *this));\n    }\n    double dot (point a, point b) {\n        return (point (a - *this) * point (b - *this));\n    }\n    double len () {\n        return hypot (x, y);\n    }\n    bool on_seg (point a, point b) {///点是否在线段ab上\n        return sgn (cross (a, b)) == 0 && dot (a, b) <= 0;\n    }\n} ps[N], num[N];\n///两线段的交点\npoint spp (point s1, point e1, point s, point e) {\n    if (s.dot (e, s1) > s.dot (e, e1)) swap (s1, e1);\n    point p = e - s;\n    double len = p.len ();\n    double a = fabs (s.cross (e, s1)) / len;\n    double b = fabs (s.cross (e, e1)) / len;\n    double a1 = s.dot (e, s1) / len;\n    double b1 = s.dot (e, e1) / len;\n    double k = a1 + fabs(a1 - b1) / (a + b) * a;\n    p = p / len, p = p * k, p = p + s;\n    return p;\n}\n///两线段是否相交\nbool seg (point a, point b, point c, point d) {\n    if (a.on_seg (c, d)) return true;\n    if (a.cross (b, d) * a.cross (b, c) < 0 && c.cross (d, b) * c.cross (d, a) < 0) return true;\n    return false;\n}\n/// 点的投影是否在线段ab上\n//bool check (point p, point a, point b) {\n//    point x = b - a;\n//    double k = x.len ();\n//    double u = a.dot (p, b) / k;\n//    x = (x / k) * u;\n//    x = x + a;\n//    if (x.on_seg (a, b)) return true;\n//    return false;\n//}\n//struct polygon {\n//    int n;\n//    point ps[N];\n//    void input () {\n//        cin >> n;\n//        for (int i = 0; i < n; i++) ps[i].input ();\n//    }\n//    ///排序规则\n//    struct cmp {\n//        point p;\n//        cmp (point _p) {\n//            p = _p;\n//        }\n//        bool operator () (const point &aa, const point &bb) {\n//            point a = aa, b = bb;\n//            int d = sgn (p.cross (a, b));\n//            if (d == 0) return point (a - p).len () < point (b - p).len ();\n//            else return d > 0;\n//        }\n//    };\n//    ///排序\n//    void norm () {\n//        point mi = ps[0];\n//        for (int i = 0; i < n; i++) mi = min (mi, ps[i]);\n//        sort (ps, ps + n, cmp (mi));\n//    }\n//    ///求凸包\n////    void getconvex (polygon &convex) {\n////        sort (ps, ps + n);\n////        int &top = convex.n;\n////        top = 0;\n////        convex.ps[top++] = ps[0];\n////        for (int i = 1; i < n; i++) {\n////            while (top >= 2 && convex.ps[top - 2].cross (convex.ps[top - 1], ps[i]) < 0) top--;\n////            convex.ps[top++] = ps[i];\n////        }\n////        int t = 0;\n////        for (int i = n - 2; i >= 0; i--) {\n////            while (t && convex.ps[top - 2].cross (convex.ps[top - 1], ps[i]) < 0) top--, t--;\n////            if (!i) break;\n////            convex.ps[top++] = ps[i];\n////            t++;\n////        }\n////    }\n//    ///几何面积\n//    double mianji () {\n//        if (n < 2) return 0;\n//        double ans = 0;\n//        ps[n] = ps[0];\n//        for (int i = 1; i <= n; i++) ans += point (0, 0).cross (ps[i - 1], ps[i]);\n//        return ans;\n//    }\n//} dd, ans;\nstruct circle {\n    point p;\n    double r;\n    circle () {}\n    circle (point _p, double _r) {\n        p = _p, r = _r;\n    }\n    void input () {\n        p.input ();\n        scanf (\"%lf\", &r);\n    }\n} cr1, cr2;\nint main () {\n    cr1.input (), cr2.input ();\n    double len = point (cr1.p - cr2.p).len ();\n    if (sgn (cr1.r + cr2.r - len) < 0) cout << 4 << endl;\n    else if (sgn (cr1.r + cr2.r - len) == 0) cout << 3 << endl;\n    else {\n        if ((abs (cr1.r - cr2.r) - len) == 0) cout << 1 << endl;\n        else if ((abs (cr1.r - cr2.r) - len) > 0) cout << 0 << endl;\n        else cout << 2 << endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n#define pu push\n#define pb push_back\n#define mp make_pair\n#define eps 1e-10\n#define Vector Point\n#define INF 2000000000\n#define DOUBLE_INF 1e50\n#define sq(x) ((x)*(x))\n#define fi first\n#define sec second\n#define all(x) (x).begin(),(x).end()\n#define EQ(a,b) (abs((a)-(b))<eps)\n\n// Geometry Library\n// written by okuraofvegetable\n\ninline double add(double a,double b){\n\tif(abs(a+b)<eps*(abs(a)+abs(b)))return 0;\n\treturn a+b;\n}\n\nstruct Point{\n\tdouble x,y;\n\tPoint() {}\n\tPoint(double x,double y) : x(x),y(y){}\n\tPoint operator + (Point p){return Point(add(x,p.x),add(y,p.y));}\n\tPoint operator - (Point p){return Point(add(x,-p.x),add(y,-p.y));}\n\tPoint operator * (double d){return Point(x*d,y*d);}\n\tdouble dot(Point p){return add(x*p.x,y*p.y);}\n\tdouble det(Point p){return add(x*p.y,-y*p.x);}\n\tdouble norm(){return sqrt(x*x+y*y);}\n\tdouble norm2(){return x*x+y*y;}\n\tdouble dist(Point p){return ((*this)-p).norm();}\n\tdouble dist2(Point p){return sq(x-p.x)+sq(y-p.y);}\n\tPoint vert(){return Point(y,-x);}\n\tvoid dump(const char* msg=\"\"){printf(\"%s%.12f %.12f\\n\",msg,x,y);return;}\n\t\n\t// following functions for vector operation\n\n\t// signed area of triange (0,0) (x,y) (p.x,p.y)\n\tdouble area(Point p){\n\t\treturn (x*p.y-p.x*y)/2.0;\n\t}\n};\n// direction a -> b -> c\n// verified AOJ CGL_1_C\nenum {\n\tCOUNTER_CLOCKWISE,\n\tCLOCKWISE,\n\tONLINE_BACK,\n\tONLINE_FRONT,\n\tON_SEGMENT\n};\nint ccw(Point a,Point b,Point c){\n\tVector p = b-a;\n\tVector q = c-a;\n\tif(p.det(q)>0.0)return COUNTER_CLOCKWISE; // counter clockwise\n\tif(p.det(q)<0.0)return CLOCKWISE; // clockwise\n\tif(p.dot(q)<0.0)return ONLINE_BACK; // c--a--b online_back\n\tif(p.norm()<q.norm())return ONLINE_FRONT; // a--b--c online_front \n\treturn ON_SEGMENT;// a--c--b on_segment\n}\nstruct Line{\n\tPoint a,b;\n\tLine(){}\n\tLine(Point a,Point b):a(a),b(b){}\n\tbool on(Point q){\n\t\treturn (a-q).det(b-q)==0; \n\t}\n\t// folloing 2 functions verified AOJ CGL_2_A\n\tbool is_parallel(Line l){return (a-b).det(l.a-l.b)==0;}\n\tbool is_orthogonal(Line l){return (a-b).dot(l.a-l.b)==0;}\n\tPoint intersection(Line l){\n\t\tassert(!is_parallel(l));\n\t\treturn a+(b-a)*((l.b-l.a).det(l.a-a)/(l.b-l.a).det(b-a));\n\t}\n\t// projection of p to this line\n\t// verified AOJ CGL_1_A\n\tPoint projection(Point p){\n\t\treturn (b-a)*((b-a).dot(p-a)/(b-a).norm2())+a;\n\t}\n\t// reflection point of p onto this line\n\t// verified AOJ CGL_1_B\n\tPoint refl(Point p){\n\t\tPoint proj = projection(p);\n\t\treturn p+((proj-p)*2.0);\n\t}\n};\nstruct Segment{\n\tPoint a,b;\n\tSegment(){}\n\tSegment(Point a,Point b):a(a),b(b){}\n\tLine line(){\n\t\treturn Line(a,b);\n\t}\n\tbool on(Point q){\n\t\treturn ((a-q).det(b-q)==0&&(a-q).dot(b-q)<=0); \n\t}\n\t// verified AOJ CGL_2_B\n\tbool is_intersect(Segment s){\n\t\tif(line().is_parallel(s.line())){\n\t\t\tif(on(s.a)||on(s.b))return true;\n\t\t\tif(s.on(a)||s.on(b))return true;\n\t\t\treturn false;\n\t\t}\n\t\tPoint p = line().intersection(s.line());\n\t\tif(on(p)&&s.on(p))return true;\n\t\telse return false;\n\t}\n\tbool is_intersect(Line l){\n\t\tif(line().is_parallel(l)){\n\t\t\tif(l.on(a)||l.on(b))return true;\n\t\t\telse return false;\n\t\t}\n\t\tPoint p = line().intersection(l);\n\t\tif(on(p))return true;\n\t\telse return false;\n\t}\n\t// following 2 distance functions verified AOJ CGL_2_D\n\tdouble distance(Point p){\n\t\tdouble res = DOUBLE_INF;\n\t\tPoint q = line().projection(p);\n\t\tif(on(q))res = min(res,p.dist(q));\n\t\tres = min(res,min(p.dist(a),p.dist(b)));\n\t\treturn res;\n\t}\n\tdouble distance(Segment s){\n\t\tif(is_intersect(s))return 0.0;\n\t\tdouble res = DOUBLE_INF;\n\t\tres = min(res,s.distance(a));\n\t\tres = min(res,s.distance(b));\n\t\tres = min(res,this->distance(s.a));\n\t\tres = min(res,this->distance(s.b));\n\t\treturn res;\n\t}\n};\n\n// Polygon \n\ntypedef vector<Point> Polygon;\n// verified AOJ CGL_3_A\n// Polygon don't need to be convex\ndouble area(Polygon& pol){\n\tvector<Point> vec;\n\tdouble res = 0.0;\n\tint M = pol.size();\n\tfor(int i=0;i<M;i++){\n\t\tres += (pol[i]-pol[0]).area(pol[(i+1)%M]-pol[0]);\t\n\t}\n\treturn res;\n}\nbool is_convex(Polygon& pol){\n\tint n = pol.size();\n\tfor(int i=0;i<n-1;i++){\n\t\tif(ccw(pol[i],pol[i+1],pol[(i+2)%n])==CLOCKWISE){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n// vecrified AOJ CGL_3_C\nenum {OUT,ON,IN};\nint contained(Polygon& pol,Point p){\n\tint n = pol.size();\n\tPoint outer(1e9,p.y);\n\tSegment s = Segment(outer,p);\n\tint cnt = 0;\n\tfor(int i=0;i<n;i++){\n\t\tSegment e = Segment(pol[i],pol[(i+1)%n]);\n\t\tif(e.on(p))return ON;\n\t\tVector a = pol[i]-p;\n\t\tVector b = pol[(i+1)%n]-p;\n\t\tif(a.y>b.y)swap(a,b);\n\t\tif(a.y<=0.0&&b.y>0.0){\n\t\t\tif(a.det(b)<0.0)cnt++;\n\t\t}\n\t}\n\tif((cnt&1)==1)return IN;\n\telse return OUT;\n}\n// compare function for convex_hull\n// sort points by (x-y) lexicographical order.\n// you can change (y-x) order with no change in convex_hull\nbool comp(const Point& p,const Point& q){\n\tif(p.x!=q.x)return p.x<q.x;\n\telse return p.y<q.y;\n}\n// Convex hull\n// if you want not to contain points on boundary,\n// change while(....<=0.0)\n// verified AOJ CGL_4_A\nPolygon convex_hull(vector<Point> ps){\n\tsort(all(ps),comp);\n\tint k = 0;\n\tint n = ps.size();\n\tPolygon qs(2*n);\n\tfor(int i=0;i<n;i++){\n\t\twhile(k>1&&(qs[k-1]-qs[k-2]).det(ps[i]-qs[k-1])<0.0)k--;\n\t\tqs[k++]=ps[i];\n\t}\n\tfor(int i=n-2,t=k;i>=0;i--){\n\t\twhile(k>t&&(qs[k-1]-qs[k-2]).det(ps[i]-qs[k-1])<0.0)k--;\n\t\tqs[k++]=ps[i];\n\t}\n\tqs.resize(k-1);\n\treturn qs;\n}\n// Caliper method\n// verified AOJ CGL_4_B\ndouble convex_diameter(Polygon& cv){\n\tint i=0,j=0;\n\tint n = cv.size();\n\tfor(int k=0;k<n;k++){\n\t\tif(!comp(cv[i],cv[k]))i=k;\n\t\tif(comp(cv[j],cv[k]))j=k;\n\t}\n\tint si=i,sj=j;\n\tdouble res = 0.0;\n\twhile(i!=sj||j!=si){\n\t\tres = max(res,cv[i].dist(cv[j]));\n\t\tif((cv[(i+1)%n]-cv[i]).det(cv[(j+1)%n]-cv[j])<0.0)i=(i+1)%n;\n\t\telse j=(j+1)%n;\n\t}\n\treturn res;\n}\n// Cut conovex polygon by a line and return left polygon\n// verified AOJ CGL_4_C\nPolygon convex_cut(Polygon& cv,Line l){\n\tint n = cv.size();\n\tPolygon left; \n\tfor(int i=0;i<n;i++){\n\t\tSegment e = Segment(cv[i],cv[(i+1)%n]);\n\t\tif(ccw(l.a,l.b,cv[i])!=CLOCKWISE)left.pb(cv[i]);\n\t\tif(e.is_intersect(l)){\n\t\t\tif(!e.line().is_parallel(l)){\n\t\t\t\tleft.pb(e.line().intersection(l));\n\t\t\t}\n\t\t}\n\t}\n\treturn left;\n}\n// distance between closest pair\n// verified CGL_5_A\nbool comp_y(const Point& p,const Point& q){\n\treturn p.y<q.y;\n}\ndouble closest_pair(vector<Point>::iterator a,int n){\n\tif(n<=1)return DOUBLE_INF;\n\tint m = n/2;\n\tdouble x = (a+m)->x;\n\tdouble d = min(closest_pair(a,m),closest_pair(a+m,n-m));\n\tinplace_merge(a,a+m,a+n,comp_y);\n\tvector<Point> b;\n\tfor(int i=0;i<n;i++){\n\t\tdouble ax = (a+i)->x;\n\t\tdouble ay = (a+i)->y;\n\t\tif(abs(ax-x)>=d)continue;\n\t\tfor(int j=0;j<b.size();j++){\n\t\t\tdouble dx = ax-b[b.size()-1-j].x;\n\t\t\tdouble dy = ay-b[b.size()-1-j].y;\n\t\t\tif(dy>=d)break;\n\t\t\td = min(d,sqrt(dx*dx+dy*dy));\n\t\t}\n\t\tb.pb(*(a+i));\n\t}\n\treturn d;\n}\ndouble closest_pair(vector<Point> a){\n\tsort(all(a),comp);\n\treturn closest_pair(a.begin(),(int)a.size());\n}\n\n// Circle\n\n// relation between two circles\n// each value as integer corresponds to\n// the number of common tangent lines\nenum {\n\tINCLUDE,\n\tINSCRIBED,         // in japanese \"naisetsu\"\n\tINTERSECT,\n\tCIRCUMSCRIBED,     // in japanese \"gaisetsu\"\n\tNOT_CROSS,\n};\n\nstruct Circle{\n\tPoint center;\n\tdouble r;\n\tCircle(){}\n\tCircle(Point c,double r):center(c),r(r){}\n\tint is_intersect(Circle c){\n\t\tdouble cd = center.dist(c.center);\n\t\tif(EQ(cd,r+c.r))return CIRCUMSCRIBED;\n\t\tif(EQ(cd,abs(r-c.r)))return INSCRIBED;\n\t\tif(cd>r+c.r)return NOT_CROSS;\n\t\telse if(cd>abs(r-c.r))return INTERSECT;\n\t\telse return INCLUDE;\n\t}\n};\n\n// for input\nPoint input_point(){\n\tPoint p;\n\tcin >> p.x >> p.y;\n\treturn p;\n}\nSegment input_segment(){\n\tPoint a,b;\n\ta = input_point();\n\tb = input_point();\n\treturn Segment(a,b);\n}\nLine input_line(){\n\tPoint a,b;\n\ta = input_point();\n\tb = input_point();\n\treturn Line(a,b);\n}\nCircle input_circle(){\n\tPoint c = input_point();\n\tdouble d;\n\tcin >> d;\n\treturn Circle(c,d);\n}\n\nint main(){\n\tCircle c1 = input_circle();\n\tCircle c2 = input_circle();\n\tcout << c1.is_intersect(c2) << endl;\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint check(double cx1, double cy1, double r1,\n          double cx2, double cy2, double r2){\n\n  double distance = sqrt((cx2 - cx1)*(cx2 - cx1) + (cy2 - cy1)*(cy2 - cy1));\n\n  if(distance == r1 + r2) return 3;\n  if(distance == abs(r1 - r2)) return 1;\n  if(abs(r1 - r2) < distance && distance < r1 + r2) return 2;\n  if(distance > r1 + r2) return 4;\n  if(distance < abs(r1 - r2)) return 0;\n}\n\nint main(){\n  double cx1 = 0, cy1 = 0, r1 = 0;\n  double cx2 = 0, cy2 = 0, r2 = 0;\n  cin >> cx1;\n  cin >> cy1;\n  cin >> r1;\n\n  cin >> cx2;\n  cin >> cy2;\n  cin >> r2;\n\n  // cout << cx1 << \" \" << cy1 << \" \" << r1 << endl;\n  // cout << cx2 << \" \" << cy2 << \" \" << r2 << endl;\n\n  cout << check(cx1, cy1, r1, cx2, cy2, r2) << endl;\n\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\n#pragma GCC optimize(\"Ofast\")\n\n// Begin Header {{{\nusing namespace std;\n\n#ifndef DEBUG\n#define dump(...)\n#endif\n\n#define all(x) x.begin(), x.end()\n#define rep(i, b, e) for (intmax_t i = (b), i##_limit = (e); i < i##_limit; ++i)\n#define reps(i, b, e) for (intmax_t i = (b), i##_limit = (e); i <= i##_limit; ++i)\n#define repr(i, b, e) for (intmax_t i = (b), i##_limit = (e); i >= i##_limit; --i)\n#define var(Type, ...) Type __VA_ARGS__; input(__VA_ARGS__)\n\nconstexpr size_t    operator\"\"_zu(unsigned long long value) { return value; };\nconstexpr intmax_t  operator\"\"_jd(unsigned long long value) { return value; };\nconstexpr uintmax_t operator\"\"_ju(unsigned long long value) { return value; };\n\nconstexpr int INF = 0x3f3f3f3f;\nconstexpr intmax_t LINF = 0x3f3f3f3f3f3f3f3f_jd;\n\ntemplate <class T, class Compare = less<>>\nusing MaxHeap = priority_queue<T, vector<T>, Compare>;\ntemplate <class T, class Compare = greater<>>\nusing MinHeap = priority_queue<T, vector<T>, Compare>;\n\ninline void input() {}\ntemplate <class Head, class... Tail>\ninline void input(Head&& head, Tail&&... tail) {\n    cin >> head;\n    input(forward<Tail>(tail)...);\n}\n\ntemplate <class T>\ninline istream& operator>>(istream &is, vector<T> &vec) {\n    for (auto &e: vec) {\n        is >> e;\n    }\n    return is;\n}\n\ninline void output() { cout << \"\\n\"; }\ntemplate <class Head, class... Tail>\ninline void output(Head&& head, Tail&&... tail) {\n    cout << head;\n    if (sizeof...(tail)) {\n        cout << \" \";\n    }\n    output(forward<Tail>(tail)...);\n}\n\ntemplate <class T>\ninline ostream& operator<<(ostream &os, const vector<T> &vec) {\n    static constexpr const char *delim[] = {\" \", \"\"};\n    for (const auto &e: vec) {\n        os << e << delim[&e == &vec.back()];\n    }\n    return os;\n}\n\ntemplate <class T>\ninline vector<T> makeVector(const T &initValue, size_t sz) {\n    return vector<T>(sz, initValue);\n}\n\ntemplate <class T, class... Args>\ninline auto makeVector(const T &initValue, size_t sz, Args... args) {\n    return vector<decltype(makeVector<T>(initValue, args...))>(sz, makeVector<T>(initValue, args...));\n}\n\ntemplate <class Func>\nclass FixPoint : Func {\npublic:\n    explicit constexpr FixPoint(Func&& f) noexcept : Func(forward<Func>(f)) {}\n\n    template <class... Args>\n    constexpr decltype(auto) operator()(Args&&... args) const {\n        return Func::operator()(*this, std::forward<Args>(args)...);\n    }\n};\n\ntemplate <class Func>\nstatic inline constexpr decltype(auto) makeFixPoint(Func&& f) noexcept {\n    return FixPoint<Func>{forward<Func>(f)};\n}\n\ntemplate <class Container>\nstruct reverse_t {\n    Container &c;\n    reverse_t(Container &c) : c(c) {}\n    auto begin() { return c.rbegin(); }\n    auto end() { return c.rend(); }\n};\n\ntemplate <class Container>\nauto reversed(Container &c) {\n    return reverse_t<Container>(c);\n}\n\ntemplate <class T>\ninline bool chmax(T &a, const T &b) noexcept {\n    return b > a && (a = b, true);\n}\n\ntemplate <class T>\ninline bool chmin(T &a, const T &b) noexcept {\n    return b < a && (a = b, true);\n}\n\ntemplate <class T>\ninline T diff(const T &a, const T &b) noexcept {\n    return a < b ? b - a : a - b;\n}\n// End Header }}}\n\n// Geometry {{{\nconst long double EPS = 1e-10;\nconst long double PI = acos(-1);\n\nstatic const int CCW_COUNTER_CLOCKWISE = 1;\nstatic const int CCW_CLOCKWISE = -1;\nstatic const int CCW_ONLINE_BACK = 2;\nstatic const int CCW_ONLINE_FRONT = -2;\nstatic const int CCW_ON_SEGMENT = 0;\n\nstatic const int ICC_SEPARATE = 4;\nstatic const int ICC_CIRCUMSCRIBE = 3;\nstatic const int ICC_INTERSECT = 2;\nstatic const int ICC_INSCRIBE = 1;\nstatic const int ICC_CONTAIN = 0;\n\nstruct Real {\n    long double x;\n\n    Real(long double x = 0) : x(x) {}\n    Real(const Real& rhs) { x = rhs.x; }\n\n    Real operator+(const Real& rhs) const { return Real(x + rhs.x); }\n    Real& operator+=(const Real& rhs) { return x += rhs.x, *this; }\n    Real operator-(const Real& rhs) const { return Real(x - rhs.x); }\n    Real& operator-=(const Real& rhs) { return x -= rhs.x, *this; }\n    Real operator*(const Real& rhs) const { return Real(x * rhs.x); }\n    Real& operator*=(const Real& rhs) { return x *= rhs.x, *this; }\n    Real operator/(const Real& rhs) const { return Real(x / rhs.x); }\n    Real& operator/=(const Real& rhs) { return x /= rhs.x, *this; }\n    Real operator-() const { return Real(-x); }\n    Real& operator++() { return ++x, *this; }\n    Real& operator--() { return --x, *this; }\n    Real operator++(int) { Real tmp(x); return ++x, tmp; }\n    Real operator--(int) { Real tmp(x); return --x, tmp; }\n    bool operator==(const Real& rhs) const { return fabs(x - rhs.x) < EPS; }\n    bool operator!=(const Real& rhs) const { return !(*this == rhs); }\n    bool operator<(const Real& rhs) const { return (*this == rhs) ? false : x < rhs.x; }\n    bool operator>(const Real& rhs) const { return (*this == rhs) ? false : x > rhs.x; }\n    bool operator<=(const Real& rhs) const { return (*this == rhs) ? true : x < rhs.x; }\n    bool operator>=(const Real& rhs) const { return (*this == rhs) ? true : x > rhs.x; }\n\n    friend istream& operator>>(istream& is, Real& rhs) {\n        is >> rhs.x;\n        return is;\n    }\n    friend ostream& operator<<(ostream& os, const Real& rhs) {\n        os << rhs.x;\n        return os;\n    }\n\n    friend Real pow(const Real& n, const Real& p) { return pow(n.x, p.x); }\n    friend Real pow(Real n, intmax_t p) {\n        Real ret = 1;\n        for (; p > 0; p >>= 1) {\n            if (p & 1) ret *= n;\n            n *= n;\n        }\n        return ret;\n    }\n    friend Real abs(const Real& rhs) { return abs(rhs.x); }\n    friend Real sin(const Real& rhs) { return sin(rhs.x); }\n    friend Real cos(const Real& rhs) { return cos(rhs.x); }\n    friend Real tan(const Real& rhs) { return tan(rhs.x); }\n    friend Real asin(const Real& rhs) { return asin(rhs.x); }\n    friend Real acos(const Real& rhs) { return acos(rhs.x); }\n    friend Real atan(const Real& rhs) { return atan(rhs.x); }\n    friend Real atan2(const Real& lhs, const Real& rhs) { return atan2(lhs.x, rhs.x); }\n    friend Real sqrt(const Real& rhs) { return sqrt(rhs.x); }\n    friend Real ceil(const Real& rhs) { return ceil(rhs.x); }\n    friend Real floor(const Real& rhs) { return floor(rhs.x); }\n    friend Real round(const Real& rhs) { return round(rhs.x); }\n};\n\nusing real_t = Real;\n\nstruct Point {\n    real_t x, y;\n\n    Point(real_t x = 0, real_t y = 0) : x(x), y(y) {}\n\n    Point operator+(const Point& rhs) const { return Point(x + rhs.x, y + rhs.y); }\n    Point operator-(const Point& rhs) const { return Point(x - rhs.x, y - rhs.y); }\n    Point operator*(const real_t& rhs) const { return Point(x * rhs, y * rhs); }\n    Point operator/(const real_t& rhs) const { return Point(x / rhs, y / rhs); }\n    Point operator-() const { return Point(-x, -y); }\n    bool operator==(const Point& rhs) const { return x == rhs.x && y == rhs.y; }\n    bool operator!=(const Point& rhs) const { return !(*this == rhs); }\n    bool operator<(const Point& rhs) const { return (x == rhs.x) ? y < rhs.y : x < rhs.x; }\n    bool operator>(const Point& rhs) const { return (x == rhs.x) ? y > rhs.y : x > rhs.x; }\n    bool operator<=(const Point& rhs) const { return (*this == rhs) ? true : *this < rhs; }\n    bool operator>=(const Point& rhs) const { return (*this == rhs) ? true : *this > rhs; }\n\n    friend istream& operator>>(istream& is, Point& rhs) {\n        is >> rhs.x >> rhs.y;\n        return is;\n    }\n    friend ostream& operator<<(ostream& os, const Point& rhs) {\n        os << rhs.x << ' ' << rhs.y;\n        return os;\n    }\n};\n\nusing Vector = Point;\nusing Polygon = vector<Point>;\n\nreal_t norm(const Vector& a) { return a.x * a.x + a.y * a.y; }\nreal_t len(const Vector& a) { return sqrt(norm(a)); }\nreal_t dot(const Vector& a, const Vector& b) { return a.x * b.x + a.y * b.y; }\nreal_t cross(const Vector& a, const Vector& b) { return a.x * b.y - a.y * b.x; }\n\nstruct Segment {\n    Point p1, p2;\n\n    Segment(Point p1 = Point(), Point p2 = Point()) : p1(p1), p2(p2) {}\n\n    bool operator==(const Segment& rhs) const { return p1 == rhs.p1 && p2 == rhs.p2; }\n    bool operator!=(const Segment& rhs) const { return !(*this == rhs); }\n\n    friend istream& operator>>(istream& is, Segment& rhs) {\n        is >> rhs.p1 >> rhs.p2;\n        return is;\n    }\n    friend ostream& operator<<(ostream& os, const Segment& rhs) {\n        os << rhs.p1 << ' ' << rhs.p2;\n        return os;\n    }\n};\n\nusing Line = Segment;\n\nstruct Circle {\n    Point c;\n    real_t r;\n\n    Circle(Point c = Point(), real_t r = 0) : c(c), r(r) {}\n\n    bool operator==(const Circle& rhs) const { return c == rhs.c && r == rhs.r; }\n    bool operator!=(const Circle& rhs) const { return !(*this == rhs); }\n\n    friend istream& operator>>(istream& is, Circle& rhs) {\n        is >> rhs.c >> rhs.r;\n        return is;\n    }\n    friend ostream& operator<<(ostream& os, const Circle& rhs) {\n        os << rhs.c << rhs.r;\n        return os;\n    }\n};\n\nreal_t len(const Segment& s) { return len(s.p1 - s.p2); }\n\nbool isParallel(const Vector& a, const Vector& b) {\n    return cross(a, b) == 0.0;\n}\nbool isParallel(const Point& a1, const Point& a2, const Point& b1, const Point& b2) {\n    return isParallel(a1 - a2, b1 - b2);\n}\nbool isParallel(const Segment& s1, const Segment& s2) {\n    return isParallel(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\nbool isOrthogonal(const Vector& a, const Vector& b) {\n    return dot(a, b) == 0.0;\n}\nbool isOrthogonal(const Point& a1, const Point& a2, const Point& b1, const Point& b2) {\n    return isOrthogonal(a1 - a2, b1 - b2);\n}\nbool isOrthogonal(const Segment& s1, const Segment& s2) {\n    return isOrthogonal(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\nPoint project(const Segment& s, const Point& p) {\n    const Vector base = s.p2 - s.p1;\n    const Vector hypo = p - s.p1;\n    const real_t r = dot(hypo, base) / norm(base);\n    return s.p1 + base * r;\n}\n\nPoint reflect(const Segment& s, const Point& p) {\n    return p + (project(s, p) - p) * 2.0;\n}\n\nint ccw(const Point& p0, const Point& p1, const Point& p2);\nbool intersectSS(const Point& p1, const Point& p2, const Point& p3, const Point& p4);\nbool intersectSS(const Segment& s1, const Segment& s2);\nbool intersectGS(const Polygon& g, const Segment& s);\nint intersectCC(Circle c1, Circle c2);\nbool intersectSC(const Segment& s, const Circle& c);\nreal_t getDistancePP(const Point& p1, const Point& p2);\nreal_t getDistanceLP(const Line& l, const Point& p);\nreal_t getDistanceSP(const Segment& s, const Point& p);\nreal_t getDistanceSS(const Segment& s1, const Segment& s2);\nPolygon getCrossPointCL(const Circle& c, const Line& l);\nPoint getCrossPoint(const Segment& s1, const Segment& s2);\nreal_t area(const Polygon& g);\n\nint ccw(const Point& p0, const Point& p1, const Point& p2) {\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if (cross(a, b) > 0.0) return CCW_COUNTER_CLOCKWISE;\n    if (cross(a, b) < 0.0) return CCW_CLOCKWISE;\n    if (dot(a, b) < 0) return CCW_ONLINE_BACK;\n    if (norm(a) < norm(b)) return CCW_ONLINE_FRONT;\n    return CCW_ON_SEGMENT;\n}\n\nbool intersectSS(const Point& p1, const Point& p2, const Point& p3, const Point& p4) {\n    return ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 && ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0;\n}\n\nbool intersectSS(const Segment& s1, const Segment& s2) {\n    return intersectSS(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\nbool intersectGS(const Polygon& g, const Segment& s) {\n    const size_t N = g.size();\n    for (size_t i = 0; i < N; ++i) {\n        if (intersectSS(Segment(g[i], g[(i + 1) % N]), s)) return true;\n    }\n    return false;\n}\n\nint intersectCC(Circle c1, Circle c2) {\n    if (c1.r < c2.r) swap(c1, c2);\n    const real_t d = len(c1.c - c2.c);\n    const real_t r = c1.r + c2.r;\n    if (d == r) return ICC_CIRCUMSCRIBE;\n    if (d > r) return ICC_SEPARATE;\n    if (d + c2.r == c1.r) return ICC_INSCRIBE;\n    if (d + c2.r < c1.r) return ICC_CONTAIN;\n    return ICC_INTERSECT;\n}\n\nbool intersectSC(const Segment& s, const Circle& c) {\n    return getDistanceSP(s, c.c) <= c.r;\n}\n\nreal_t getDistancePP(const Point& p1, const Point& p2) {\n    return len(p2 - p1);\n}\n\nreal_t getDistanceLP(const Line& l, const Point& p) {\n    return abs(cross(l.p2 - l.p1, p - l.p1) / len(l.p2 - l.p1));\n}\n\nreal_t getDistanceSP(const Segment& s, const Point& p) {\n    if (dot(s.p2 - s.p1, p - s.p1) < 0.0) return getDistancePP(p, s.p1);\n    if (dot(s.p1 - s.p2, p - s.p2) < 0.0) return getDistancePP(p, s.p2);\n    return getDistanceLP(s, p);\n}\n\nreal_t getDistanceSS(const Segment& s1, const Segment& s2) {\n    if (intersectSS(s1, s2)) return 0.0;\n    const real_t opt1 = getDistanceSP(s1, s2.p1);\n    const real_t opt2 = getDistanceSP(s1, s2.p2);\n    const real_t opt3 = getDistanceSP(s2, s1.p1);\n    const real_t opt4 = getDistanceSP(s2, s1.p2);\n    return min({opt1, opt2, opt3, opt4});\n}\n\nPoint getCrossPointSS(const Segment& s1, const Segment& s2) {\n    Vector base = s2.p2 - s2.p1;\n    const real_t d1 = abs(cross(base, s1.p1 - s2.p1));\n    const real_t d2 = abs(cross(base, s1.p2 - s2.p1));\n    const real_t t = d1 / (d1 + d2);\n    return s1.p1 + (s1.p2 - s1.p1) * t;\n}\n\nPolygon getCrossPointCL(const Circle& c, const Line& l) {\n    Polygon ps;\n    const Point pr = project(l, c.c);\n    const Vector e = (l.p2 - l.p1) / len(l.p2 - l.p1);\n    if (getDistanceLP(l, c.c) == c.r) {\n        ps.emplace_back(pr);\n        return ps;\n    }\n    const real_t base = sqrt(c.r * c.r - norm(pr - c.c));\n    ps.emplace_back(pr + e * base);\n    ps.emplace_back(pr - e * base);\n    return ps;\n}\n\nreal_t area(const Polygon& g) {\n    const size_t N = g.size();\n    real_t res = 0;\n    for (size_t i = 0; i < g.size(); ++i) {\n        res += cross(g[i], g[(i + 1) % N]) / 2.0;\n    }\n    return res;\n}\n// }}}\n\nsigned main() {\n    ios_base::sync_with_stdio(false);\n    cin.tie(nullptr);\n    cout.setf(ios_base::fixed);\n    cout.precision(10);\n\n    var(Circle, c1, c2);\n    output(intersectCC(c1, c2));\n\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cmath>\n\nusing namespace std;\n\nint number_of_tangent_line(int array1[], int array2[]);\n\nint main() {\n  int c1[3], c2[3];\n  int ntl;\n\n  for (int i = 0; i < 3; i++) {\n    cin >> c1[i];\n  }\n\n  for (int i = 0; i < 3; i++) {\n    cin >> c2[i];\n  }\n\n  ntl = number_of_tangent_line(c1,c2);\n  cout << ntl << endl;\n  return 0;\n}\n\nint number_of_tangent_line(int c1[], int c2[]){\n  int p = c2[0]-c1[0];\n  int q = c2[1]-c1[1];\n  float r1 = c1[2];\n  float r2 = c2[2];\n  float x[4] = {0};\n  float y[4] = {0};\n  int a = 0;\n\n  if((pow(p,2)+pow(q,2) == 0)) return a;\n\n  x[0] = (r1*p*(r1+r2)+q*sqrt((pow(p,2)+pow(q,2))-pow((r1+r2),2)))/(pow(p,2)+pow(q,2));\n  y[0] = (r1*q*(r1+r2)-p*sqrt((pow(p,2)+pow(q,2))-pow((r1+r2),2)))/(pow(p,2)+pow(q,2));\n  //cout << x[0] << y[0] << endl;\n  if(x[0] >= -1000 && x[0] <= 1000 && y[0] >= -1000 && y[0] <= 1000) a++;\n\n\n  x[1] = (r1*p*(r1+r2)-q*sqrt((pow(p,2)+pow(q,2))-pow((r1+r2),2)))/(pow(p,2)+pow(q,2));\n  y[1] = (r1*q*(r1+r2)+p*sqrt((pow(p,2)+pow(q,2))-pow((r1+r2),2)))/(pow(p,2)+pow(q,2));\n  //cout << x[1] << y[1] << endl;\n  if(x[1] >= -1000 && x[1] <= 1000 && y[1] >= -1000 && y[1] <= 1000) a++;\n  if(x[1] == x[0] && y[1] == y[0]) a--;\n\n  x[2] = (r1*p*(r1-r2)+q*sqrt((pow(p,2)+pow(q,2))-pow((r1-r2),2)))/(pow(p,2)+pow(q,2));\n  y[2] = (r1*q*(r1-r2)-p*sqrt((pow(p,2)+pow(q,2))-pow((r1-r2),2)))/(pow(p,2)+pow(q,2));\n  //cout << x[2] << y[2] << endl;\n  if(x[2] >= -1000 && x[2] <= 1000 && y[2] >= -1000 && y[2] <= 1000) a++;\n\n  x[3] = (r1*p*(r1-r2)-q*sqrt((pow(p,2)+pow(q,2))-pow((r1-r2),2)))/(pow(p,2)+pow(q,2));\n  y[3] = (r1*q*(r1-r2)+p*sqrt((pow(p,2)+pow(q,2))-pow((r1-r2),2)))/(pow(p,2)+pow(q,2));\n  //cout << x[3] << y[3] << endl;\n  if(x[3] >= -1000 && x[3] <= 1000 && y[3] >= -1000 && y[3] <= 1000) a++;\n  if(x[3] == x[2] && y[3] == y[2]) a--;\n\n  return a;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<math.h>\nusing namespace std;\n\nint main(){\n\t\n\tint c1x,c1y,c1r,c2x,c2y,c2r;\n\tdouble xsa,ysa;\n\tcin>>c1x>>c1y>>c1r;\n\tcin>>c2x>>c2y>>c2r;\n\txsa = c1x-c2x;\n\tysa = c1y-c2y;\n\tif((sqrt(xsa*xsa+ysa*ysa) + c1r == c2r) || (sqrt(xsa*xsa+ysa*ysa) + c2r == c1r)) cout<<\"1\\n\";\n\telse if(sqrt(xsa*xsa+ysa*ysa) + c1r < c2r || sqrt(xsa*xsa+ysa*ysa) + c2r < c1r) cout<<\"0\\n\";\n\telse if(xsa*xsa+ysa*ysa > (c1r+c2r)*(c1r+c2r)) cout<<\"4\\n\";\n\telse if(xsa*xsa+ysa*ysa == (c1r+c2r)*(c1r+c2r)) cout<<\"3\\n\";\n\telse if(xsa*xsa+ysa*ysa < (c1r+c2r)*(c1r+c2r)) cout<<\"2\\n\";\n\treturn 0;\n\t}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define int long long\n#define uint unsigned int\n#define pii pair<int, int>\n#define FOR(i,a,b) for(int i=(a);i<(b);++i)\n#define FORR(i,a,b) for(int i=(a);i>=(b);--i)\n#define REP(i,n) FOR(i,0,n)\n#define REPR(i,n) FORR(i,n,0)\n#define ALL(c) ((c).begin(),(c).end())\n#define PB(a) push_back(a)\n#define EMPB(...) emplace_back(__VA_ARGS__)\n#define EMP(...) emplace(__VA_ARGS__)\n#define MP(a,b) make_pair(a,b)\n#define MT(...) make_tuple(__VA_ARGS__)\n#define ZERO(a) memset(a,0,sizeof(a))\n#define MINUS(a) memset(a,0xff,sizeof(a))\n#define MINF(a) memset(a,0x3f,sizeof(a))\n#define PW(n) (1LL<<(n))\nusing namespace std;\ntemplate <class T> inline bool CHMIN(T& a, T b) { if(a>b) { a=b; return 1; } return 0; }\ntemplate <class T> inline bool CHMAX(T& a, T b) { if(a<b) { a=b; return 1; } return 0; }\ntemplate <class T> inline void SORT(T& a) { sort(ALL(a)); }\ntemplate <class T> inline void REV(T& a) { reverse(ALL(a)); }\ntemplate <class T> inline void UNI(T& a) { SORT(a); a.erase(unique(ALL(a)),a.end()); }\ntemplate <class S, class T> ostream& operator<<(ostream& os, const pair<S,T> a) {\n  return os << a.first << ' ' << a.second;\n}\nconst int MOD = 1000000007;\n// const int INF = 0x3f3f3f3f3f3f3f3f;\n// const double EPS = 1e-10;\n/* ---------------------------------------------------------------------------------------------------- */\n\n/* 基本要素 */\nusing D = double; // 座標値の型 doubleかlong double\nusing P = complex<D>; // Point\nusing L = pair<P,P>;  // Line\nusing VP = vector<P>;\nconst double EPS = 1e-8;  // 許容誤差\nconst double INF = 1e12;\n#define X real()\n#define Y imag()\n#define LT(n,m) ((n)+EPS<(m)) // n < m ?\n#define LE(n,m) ((n)-EPS<(m)) // n <= m ?\n#define GT(n,m) LT(m,n) // n > m ?\n#define GE(n,m) LE(m,n) // n >= m ?\n#define EQ(n,m) (abs((n)-(m))<EPS)\n#define NE(n,m) !EQ(n,m)\n#define rep(i,n) for (int i=0;i<(n);++i)\n\nnamespace std {\n  istream& operator >> (istream& is, P& p) {\n    D F, S;\n    is >> F >> S;\n    p = P(F,S);\n    return is;\n  }\n}\n\n// 内積\nD dot(P a, P b) {\n  return (conj(a)*b).X;\n}\n// 外積\nD cross(P a, P b) {\n  return (conj(a)*b).Y;\n}\n// 点aから見た、点bから点cへの方向\nint ccw(P a, P b, P c) {\n  b -= a; c -= a;\n  if (GT(cross(b,c),0)) return +1;  // counter clockwise\n  if (LT(cross(b,c),0)) return -1;  // clockwise\n  if (LT(dot(b,c),0)) return +2;  // c--a--b on line\n  if (LT(norm(b),norm(c))) return -2; // a--b--c on line or a==b\n  return 0;                     // a--c--b on line or a==c or b==c\n}\n\n// 円と円\nint isecCC(P c1, D r1, P c2, D r2) {\n  if (r1 < r2) swap(c1,c2), swap(r1,r2);\n  D d = abs(c1-c2);\n  if (GT(d-r1-r2,0)) return 4;  // 交差なし\n  if (EQ(d-r1-r2,0)) return 3;  // 外接\n  if (EQ(r1-r2-d,0)) return 1;  // 内接\n  if (GT(r1-r2-d,0)) return 0;  // 包含\n  return 2; // 交差\n}\n\nsigned main() {\n  cin.tie(0);\n  ios_base::sync_with_stdio(false);\n  cout << fixed << setprecision(10);\n\n  P c1,c2;\n  D r1,r2;\n  cin >> c1 >> r1 >> c2 >> r2;\n  cout << isecCC(c1,r1,c2,r2) << endl;\n  \n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <array>\n#include <assert.h>\n#include <bitset>\n#include <chrono>\n#include <cmath>\n#include <complex>\n#include <cstring>\n#include <functional>\n#include <fstream>\n#include <iomanip>\n#include <iostream>\n#include <istream>\n\n#include <map>\n#include <math.h>\n#include <numeric>\n#include <ostream>\n#include <queue>\n#include <set>\n#include <stack>\n#include <string>\n#include <unordered_map>\n#include <unordered_set>\n#include <vector>\n\nnamespace asl\n{\n    \n    template <typename numeric_type>\n    class point\n    {\n    public:\n        numeric_type x, y;\n\n        point(numeric_type x = 0, numeric_type y = 0) : x(x), y(y) {}\n\n        point<numeric_type> &operator-=(const point<numeric_type> &ri)\n        {\n            x -= ri.x;\n            y -= ri.y;\n            return *this;\n        }\n\n        friend point<numeric_type> operator-(const point<numeric_type> &a, const point<numeric_type> &b)\n        {\n            return point<numeric_type>(a) -= b;\n        }\n\n    };\n\n    template <typename numeric_type>\n    std::istream &operator>>(std::istream &is, point<numeric_type> &p)\n    {\n        return is >> p.x >> p.y;\n    }\n\n    template <typename numeric_type>\n    numeric_type norm(point<numeric_type> a)\n    {\n        return a.x * a.x + a.y * a.y;\n    }\n\n    template <typename numeric_type, typename float_type = double>\n    float_type abs(point<numeric_type> a)\n    {\n        return sqrtl(norm(a));\n    }\n\n    template <const int eps_exp = 9>\n    int sign(double v)\n    {\n        const double eps = std::pow(10, -eps_exp);\n\n        if (v < -eps)\n            return -1;\n        else if (v > eps)\n            return +1;\n        else\n            return 0;\n    }\n\n} \n\n#include <stdint.h>\n\n#include <experimental/optional>\n\nnamespace asl\n{\n    template <typename numeric_type>\n    class circle\n    {\n    public:\n        point<numeric_type> p;\n        numeric_type r;\n    };\n\n    template <typename numeric_type>\n    std::istream &operator>>(std::istream &is, circle<numeric_type> &c)\n    {\n        return is >> c.p >> c.r;\n    }\n\n    enum CircleCircleRelation\n    {\n        Contains = 0,\n        Inscribed = 1,\n        Intersect = 2,\n        Circumscribed = 3,\n        Separate = 4,\n        Equal = 5,\n    };\n\n    template <typename numeric_type, typename float_type = double>\n    CircleCircleRelation intersect_circle_circle_status(const circle<numeric_type> &c, const circle<numeric_type> &d)\n    {\n        float_type dist = abs(c.p - d.p);\n\n        switch (sign(dist - c.r - d.r))\n        {\n        case +1:\n            return CircleCircleRelation::Separate;\n        case 0:\n            return CircleCircleRelation::Circumscribed;\n        }\n\n        switch (sign(dist - std::abs(c.r - d.r)))\n        {\n        case -1:\n            return CircleCircleRelation::Contains;\n        case 0:\n            return sign(dist) == 0 ? CircleCircleRelation::Equal : CircleCircleRelation::Inscribed;\n        }\n\n        return CircleCircleRelation::Intersect;\n    }\n\n} \n\n#include <random>\n\n#define endl '\\n'\n\nusing namespace std;\nusing namespace asl;\n\nint main()\n{\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n\n    circle<double> c1, c2;\n    cin >> c1 >> c2;\n\n    cout << intersect_circle_circle_status(c1, c2) << endl;\n\n    return 0;\n}\n\n\n\n"
  },
  {
    "language": "C++",
    "code": "#ifndef _WIN32\n#include<iostream>\n#endif\n#include<complex>\n#include<utility>\n#include<tuple>\n#include<vector>\nusing namespace std;\n#define IL inline\n#define REP(i,n) for(int(i)=0;(i)<(n);i++)\n#define X real()\n#define Y imag()\ntypedef double D;\ntypedef bool B;\ntypedef complex<D> P;\ntypedef pair<P, P>L;\ntypedef pair<P, P>LS;\ntypedef pair<P, D>C;\n#define DCc(a,b,c) P (a);D (b);tie(a,b)=c;\nconst D EPS = 1e-8;\n\nIL B is_C_C(C p, C q){\n\tDCc(cp, rp, p);\n\tDCc(cq, rq, q);\n\tD d = abs(cp - cq);\n\treturn abs(rp - rq) - d< EPS&&rp + rq - d>-EPS;\n}\n\nIL LS cross_C_C(C p, C q){\n\tDCc(cp, rp, p);\n\tDCc(cq, rq, q);\n\tD d = abs(cp - cq);\n\tD rc = (d*d + rp*rp - rq*rq);\n\tD rs = sqrt(rp*rp - rc*rc);\n\tP diff = (cq - cp) / d;\n\treturn{ cp + P(rc, rs)*diff, cp + P(rc, -rs)*diff };\n}\n\nIL vector<L> tangent_line(C c, P p){\n\tvector<L> res;\n\tDCc(cp, r, c);\n\tP v = p - cp;\n\tD dist = abs(v);\n\tif (dist>r + EPS){\n\t\tdouble _cos = r / dist;\n\t\tdouble _sin = sqrt(1.0 - _cos*_cos);\n\t\tv = v*(r / dist);\n\t\t{\n\t\t\tP e = P(_cos*v.X - _sin*v.Y, _sin*v.X + _cos*v.Y);\n\t\t\tres.push_back({ p, cp + e });\n\t\t}\n\t\t{\n\t\t\tP e = P(_cos*v.X + _sin*v.Y, -_sin*v.X + _cos*v.Y);\n\t\t\tres.push_back({ p, cp + e });\n\t\t}\n\t}\n\telse if(abs(dist-r)<EPS){\n\t\tdouble _cos = r / dist;\n\t\tdouble _sin = sqrt(1.0 - _cos*_cos);\n\t\tP e = P(_cos*v.X - _sin*v.Y, _sin*v.X + _cos*v.Y);\n\t\tres.push_back({ p, cp + e });\n\t}\n\treturn res;\n}\n\nIL vector<L>inner_common_tangent_line(C p, C q){\n\tvector<L> res;\n\tDCc(Mp, Rp, p);\n\tDCc(Mq, Rq, q);\n\tD dist = abs(Mp - Mq);\n\tif (dist > Rp + Rq - EPS){\n\t\tP mid = (Mq*Rp + Mp*Rq) / (Rp + Rq);\n\t\tres = tangent_line(p, mid);\n\t}\n\treturn res;\n}\n\nIL vector<L>outer_common_tangent_line(C p, C q){\n\tvector<L> res;\n\tDCc(Mp, Rp, p);\n\tDCc(Mq, Rq, q);\n\tP v = Mp - Mq;\n\tD dist = abs(v);\n\tif (dist > Rp - Rq + EPS){\n\t\tif (abs(Rp - Rq) < EPS){\n\t\t\tP e = v*P(0, 1);\n\t\t\te = e / dist;\n\t\t\tres.push_back(L(Mp + e, Mq + e));\n\t\t\tres.push_back(L(Mp - e, Mq - e));\n\t\t}\n\t\telse{\n\t\t\tP mid = Mp + (Mq - Mp)*Rp / (Rp - Rq);\n\t\t\tres = tangent_line(p, mid);\n\t\t}\n\t}\n\treturn res;\n}\n\n\nint main(){\n\tint a1, b1, r1;\n\tint a2, b2, r2;\n\tcin >> a1 >> b1 >> r1;\n\tcin >> a2 >> b2 >> r2;\n\tauto v = inner_common_tangent_line(C(P(a1, b1), r1), C(P(a2, b2), r2));\n\tauto v2= outer_common_tangent_line(C(P(a1, b1), r1), C(P(a2, b2), r2));\n\t/*REP(i, v.size()){\n\t\tcout << v[i].first << \" \" << v[i].second << endl;\n\t}\n\tREP(i, v2.size()){\n\t\tcout << v2[i].first << \" \" << v2[i].second << endl;\n\t}*/\n\tcout << v.size() + v2.size() << endl;\n\t//cout << now << endl;\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cmath>\nusing namespace std;\nstruct Circle { double x, y, r; };\nint main() {\n    Circle p, q;\n    cin >> p.x >> p.y >> p.r;\n    cin >> q.x >> q.y >> q.r;\n    double double dist = sqrt((p.x - q.x)*(p.x - q.x) + (p.y - q.y)*(p.y - q.y));\n    if (dist > p.r + q.r)cout << \"4\" << endl;\n    else if (dist == p.r + q.r) {\n        cout << \"3\" << endl;\n    }\n    else if (p.r <= q.r) {\n        if (p.r + dist == q.r)cout << \"1\" << endl;\n        if (p.r + dist < q.r)cout << \"0\" << endl;\n        if (p.r + dist > q.r)cout << \"2\" << endl;\n    }\n    else {\n        if (q.r + dist == p.r)cout << \"1\" << endl;\n        if (q.r + dist < p.r)cout << \"0\" << endl;\n        if (q.r + dist > p.r)cout << \"2\" << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h> //std==c++14\nusing namespace std;\n \n#define EPS (1e-10)\n#define equals(a,b) ( fabs(a-b) < EPS )\n#define PI 3.141592653589793238\n\n// COUNTER CLOCKWISE\nstatic const int CCW_COUNTER_CLOCKWISE = 1;\nstatic const int CCW_CLOCKWISE = -1;\nstatic const int CCW_ONLINE_BACK = 2;\nstatic const int CCW_ONLINE_FRONT = -2;\nstatic const int CCW_ON_SEGMENT = 0;\n\n//Intersect Circle and Circle\nstatic const int ICC_SEPARATE = 4;//離れている\nstatic const int ICC_CIRCUMSCRIBE = 3;//外接\nstatic const int ICC_INTERSECT = 2;// 交わる\nstatic const int ICC_INSCRIBE = 1;// 内接\nstatic const int ICC_CONTAIN = 0;//内包\n\nstruct point{\n\tdouble x,y;\n\t//construct\n\tpoint() {} \n\tpoint(double x,double y):x(x),y(y){}\n\t//演算子\n\tpoint operator + (point p) { return point(x+p.x,y+p.y); }\n\tpoint operator - (point p) { return point(x-p.x,y-p.y); }\n\tpoint operator * (double k) { return point(x*k,y*k); }\n\tpoint operator / (double k) { return point(x/k,y/k); }\n\tpoint operator / (point p) { return point( (x*p.x + y*p.y)/p.norm()  , (-x*p.y + y*p.x)/p.norm() ) ; }\n\tbool operator < (point p) { return x!=p.x ? x<p.x : y<p.y; }\n\tbool operator == (point p) { return equals(x,p.x) && equals(y,p.y) ; }\n\t//function\n\tdouble arg() { return atan2(y,x) ; }\n\tdouble norm(){return x*x+y*y; }\n\tdouble abs() { return sqrt(norm() ) ;}\n\tdouble dot(point p) { return p.x*x + p.y*y; }\n\tdouble cross(point p) { return x*p.y - y*p.x; }\n\n\t//input output\n\tvoid input(){cin>>x>>y;}\n\tvoid polar(double r,double theta){ x = r*cos(theta), y= r*sin(theta) ; }\n\tvoid print(){cout<<x<<' '<<y<<endl;};\n\n};\n\nbool sort_x(point a,point b){\n\treturn a.x!=b.x?a.x<b.x:a.y<b.y ;\n}\nbool sort_y(point a,point b){\n\treturn a.y!=b.y?a.y<b.y:a.x<b.x ;\n}\n\ntypedef vector<point> polygon;\n\nstruct segment{\n\tpoint s,t;\n\tsegment() {}\n\tsegment(point s,point t) : s(s),t(t){}\n\tvoid input(){s.input(),t.input(); }\n};\ntypedef segment line;\n\nstruct circle{\n\tpoint c;\n\tdouble r;\n\tcircle() {}\n\tcircle(point c,double r) : c(c),r(r){}\n\tvoid input(){c.input(); cin>>r; }\n};\n\ndouble norm(point a){\treturn a.norm(); }\ndouble abs(point a){ return a.abs(); }\ndouble arg(point a){ return a.arg(); }\ndouble dot(point a,point b) { return a.x*b.x + a.y*b.y ; }\ndouble cross(point a,point b) { return a.x * b.y - a.y * b.x ; }\npoint polar(double r,double theta){ point a; a.polar(r,theta); return a; }\npoint orth(point p){ return point(-p.y,p.x); }\n\n//isOrthgonal 垂直\nbool isOrthogonal(point a,point b) { return equals(dot(a,b), 0.0 ) ; }\nbool isOrthogonal(point a,point b,point c,point d) { return isOrthogonal(a-b,c-d) ; }\nbool isOrthogonal(line l1,line l2 ){ return isOrthogonal(l1.t-l1.s,l2.t-l2.s); }\n//isParallel 平行\nbool isParallel(point a,point b) { return equals(cross(a,b), 0.0) ; }\nbool isParallel(point a,point b,point c,point d) { return isParallel(a-b,c-d); }\nbool isParallel(line l1,line l2) { return isParallel(l1.t-l1.s,l2.t-l2.s) ; }\n\npoint project(line l,point p){\n\tpoint base = l.t-l.s;\n\tdouble r = dot(p-l.s,base) / norm(base) ;\n\treturn l.s + base*r;\n}\npoint reflect(line l,point p){\n\treturn p + (project(l,p) - p) *2.0;\n}\n\nint ccw(point p0,point p1,point p2){\n\tpoint a = p1-p0;\n\tpoint b = p2-p0;\n\tif(cross(a,b) > EPS ) return CCW_COUNTER_CLOCKWISE ;\n\tif(cross(a,b) < -EPS ) return CCW_CLOCKWISE;\n\tif(dot(a,b) < -EPS ) return CCW_ONLINE_BACK;\n\tif(a.norm() < b.norm() ) return CCW_ONLINE_FRONT;\n\treturn CCW_ON_SEGMENT;\n}\n\n\n//intersect\nbool intersect(point p1,point p2,point p3,point p4){return (ccw(p1,p2,p3)*ccw(p1,p2,p4) <= 0 && ccw(p3,p4,p1)*ccw(p3,p4,p2) <= 0 ) ; }\nbool intersect(line l1,line l2) { return intersect(l1.s,l1.t,l2.s,l2.t) ; }\nbool intersect(polygon p,line l){\n\tint n = p.size();\n\tfor(int i=0;i<n;i++)  if(intersect(line(p[i],p[(i+1)%n] ) , l ) ) return true;\n\treturn false;\n}\nint intersect(circle c1,circle c2){\n\tif(c1.r < c2.r) swap(c1,c2);\n\tdouble d = abs(c1.c-c2.c);\n\tdouble r = c1.r + c2.r;\n\tif(equals(d,r) ) return ICC_CIRCUMSCRIBE;\n\tif(d > r ) return ICC_SEPARATE;\n\tif(equals(d+c2.r,c1.r) ) return ICC_INSCRIBE;\n\tif( d + c2.r < c1.r ) return ICC_CONTAIN;\n\treturn ICC_INTERSECT;\n}\n\n//bool intersectsc(line l,circle c){ return distancesp(l,c.c) <= c.r ; } distanceののち\nint intersectcs(circle c,line l ){// 0\t\t1\t\t2\n\tif(norm(project(l,c.c) - c.c )  - c.r*c.r  > EPS ) return 0;\n\tdouble d1 = abs(c.c-l.s),d2  = abs(c.c-l.t);\n\tif(d1 < c.r + EPS && d2 < c.r + EPS ) return 0;\n\tif( (d1<c.r - EPS && d2 > c.r +EPS) || (d1 > c.r +EPS &&d2 < c.r -EPS ) ) return 1;\n\tpoint h = project(l,c.c) ;\n\tif(dot(l.s-h,l.t-h) < 0 ) return 2;\n\treturn 0;\n}\n\n//distance\n//line point\ndouble distancelp(line l,point p){ return abs(cross(l.t-l.s,p-l.s)/ abs(l.t-l.s)  ); }\n//segment point\ndouble distancesp(line l,point p){ \n\tif(dot(l.t-l.s,p-l.s) < 0.0 ) return abs(p-l.s);\n\tif(dot(l.s-l.t,p-l.t) < 0.0 ) return abs(p-l.t);\n\treturn distancelp(l,p);\n}\n//segment segment \ndouble distancess(line l1,line l2){\n\tif(intersect(l1,l2) ) return 0.0;\n\treturn min( min(distancesp(l1,l2.s) ,distancesp(l1,l2.t) ) , min(distancesp(l2,l1.s),distancesp(l2,l1.t)  ) );\n}\n\nbool intersectsc(line l,circle c){ return distancesp(l,c.c) <= c.r ; }\n\n//crosspoint \n//segment segment\npoint crosspointss(line l1,line l2){\n\tfor(int k=0;k<2;k++){\n\t\tif(distancesp(l1,l2.s) < EPS ) return l2.s;\n\t\tif(distancesp(l1,l2.t) < EPS ) return l2.t;\n\t\tswap(l1,l2);\n\t}\n\tpoint base = l2.t-l2.s;\n\tdouble d1 = abs(cross(base,l1.s-l2.s) );\n\tdouble d2 = abs(cross(base,l1.t-l2.s) );\n\tdouble t = d1/(d1+d2);\n\treturn l1.s + (l1.t-l1.s) * t;\n}\n//line line\npoint crosspointll(line l1,line l2){\n\tdouble a = cross(l1.t-l1.s,l2.t-l2.s);\n\tdouble b = cross(l1.t-l1.s,l1.t-l2.s);\n\tif(abs(a) < EPS && abs(b) < EPS ) return l2.s;\n\treturn l2.s + (l2.t-l2.s) * (b/a) ;\n}\n//circle line\npolygon crosspointCL(circle c,line l){\n\tpolygon ps;\n\tpoint pr = project(l,c.c);\n\tpoint e = (l.t - l.s) / abs(l.t-l.s) ;\n\tif(distancelp(l,c.c) > c.r ) return ps;//付け足した\n\tif(equals(distancelp(l,c.c),c.r) ){\n\t\tps.emplace_back(pr);\n\t}\n\tdouble base = sqrt(c.r*c.r - norm(pr-c.c) );\n\tps.emplace_back(pr + e*base ) ;\n\tps.emplace_back(pr - e*base ) ;\n\treturn ps;\n}\n//circle segment\npolygon crosspointCS(circle c,line l ){\n\tpolygon res = crosspointCL(c,l);\n\tif(intersectcs(c,l) == 2 ) return res;\n\tif(res.size() > 1u ){//一つのみ削る\n\t\tif(dot(l.s-res[0] ,l.t-res[0] ) > 0) swap(res[0],res[1] );\n\t\tres.pop_back();\n\t}\n\treturn res;\n}\npolygon crosspointcc(circle c1,circle c2){\n\tpolygon p(2);\n\tdouble d = abs(c1.c-c2.c);\n\tdouble a = acos( (c1.r *c1.r + d*d -c2.r*c2.r) /(2*c1.r*d ) );\n\tdouble t = arg(c2.c-c1.c);\n\tp[0] = c1.c + polar(c1.r,t+a);\n\tp[1] = c1.c + polar(c1.r,t-a);\n\treturn p;\n}\n\nint contains(polygon g,point p) { //IN:2 ON:1 OUT:0\n    int n = g.size();\n    bool f = false;\n    for(int i=0;i<n;i++){\n\tpoint a = g[i] - p,b = g[(i+1)%n] - p;\n\tif( fabs(cross(a,b) ) < EPS && dot(a,b) < EPS) return 1;\n\tif( a.y > b.y ) swap(a,b);\n\tif( a.y < EPS && EPS < b.y && cross(a,b) > EPS ) f = !f;\n    }\n    return (f?2:0) ;\n}\n\npolygon andrewscan(polygon &s){ //convex hull\n\tpolygon u,l;\n\tif(s.size() < 3) return s;\n\t//sort(s.begin(),s.end() );\n\t//最も左で最も右の点にする\n\tsort(s.begin(),s.end(),sort_y);\n\tu.push_back(s[0]);\n\tu.push_back(s[1]);\n\tl.push_back(s[s.size()-1]);\n\tl.push_back(s[s.size()-2]);\n\tfor(int i=2;i<s.size();i++){\n\t\tfor(int n = u.size();n>=2&&ccw(u[n-2],u[n-1],s[i]) != CCW_CLOCKWISE;n--)//凸包の辺上を含めない\n\t\t//for(int n = u.size();n>=2&&ccw(u[n-2],u[n-1],s[i]) == CCW_COUNTER_CLOCKWISE;n--)//凸包の辺上を含める場合\n\t\tu.pop_back();\n\t\tu.push_back(s[i]);\n\t}\n\tfor(int i=s.size()-3;i>=0;i--){\n\t\tfor(int n=l.size();n>=2&&ccw(l[n-2],l[n-1],s[i]) != CCW_CLOCKWISE;n--)//凸包の辺上を含めない\t\n\t\t//for(int n=l.size();n>=2&&ccw(l[n-2],l[n-1],s[i]) == CCW_COUNTER_CLOCKWISE;n--)//凸包の辺上を含める場合\n\t\tl.pop_back();\n\t\tl.push_back(s[i]);\n\t}\n\treverse(l.begin(),l.end());\n\tfor(int i=u.size()-2;i>=1;i--)l.push_back(u[i]);\n\treturn l;\n\t//最も左で最も右の点にする\n\t/*point mini = l[0];\n\tint base = 0;\n\tfor(int i=0;i<l.size();i++)\n\t    if(mini.y > l[i].y || (mini.y==l[i].y && mini.x > l[i].x ) ){\n\t\t\tmini = l[i];\n\t\t\tbase = i;\n\t    }\n\tpolygon res;\n\tfor(int i=0;i<l.size();i++)res.push_back( l[(i+base)%l.size()] );\n\treturn res;*/\n}\n\ndouble diameter(polygon &s){\n\tpolygon p = s;\n\tint n = p.size();\n\tif(n==2) return abs(p[0]-p[1]);\n\tint i=0,j=0;\n\tfor(int k=0;k<n;k++){\n\t\tif(p[i] < p[k]) i = k;\n\t\tif(!(p[j]<p[k]) ) j = k;\n\t}\n\tdouble res = 0;\n\tint si = i,sj = j;\n\twhile( i != sj || j != si ){\n\t\tres = max(res,abs(p[i]-p[j]) );\n\t\tif(cross(p[(i+1)%n]-p[i],p[(j+1)%n]-p[j] ) < 0.0) i = (i+1)%n;\n\t\telse j = (j+1)%n;\n\t}\n\treturn res;\n}\nbool isconvex(polygon p){\n\tbool f = 1;\n\tint n = p.size();\n\tfor(int i=0;i<n;i++){\n\t\tint t = ccw(p[(i+n-1)%n],p[i],p[(i+1)%n] );\n\t\tf&= t!=CCW_CLOCKWISE;\n\t}\n\treturn f;\n}\ndouble area(polygon p){\n\tdouble res =  0.0;\n\tfor(int i=0;i<p.size();i++) res += cross(p[i],p[ (i+1)%p.size() ]);\n\treturn res/2.0;\n}\ndouble area(circle c1,circle c2){\n\tdouble d = abs(c1.c-c2.c);\n\tif(c1.r + c2.r <= d + EPS ) return 0.0;\n\tif(d<=abs(c1.r-c2.r) ){\n\t\tdouble r = min(c1.r,c2.r);\n\t\treturn PI*r*r;\n\t}\n\tdouble rc = (d*d + c1.r*c1.r -c2.r*c2.r)/(2*d);\n\tdouble th = acos(rc/c1.r);\n\tdouble ph = acos( (d-rc)/c2.r);\n\treturn c1.r*c1.r*th + c2.r*c2.r*ph - d * c1.r * sin(th) ;\n}\n\npolygon convex_cut(polygon p,line l){\n\tpolygon q;\n\tint n = p.size();\n\tfor(int i=0;i<n;i++){\n\t\tpoint a = p[i] , b = p[(i+1)%n];\n\t\tif(ccw(l.s,l.t,a) != -1 ) q.push_back(a);\n\t\tif(ccw(l.s,l.t,a) * ccw(l.s,l.t,b) < 0) q.push_back(crosspointss(line(a,b),l) );\n\t}\n\treturn q;\n}\n//[s,t) 再帰 devide and conquer\ndouble inf  = 1e10;\ndouble closest_pair_dac(polygon &p,int s,int t,double &res){\n\tif(t-s<=1)return inf;\n\tif(t-s==2){\n\t\tsort(p.begin()+s,p.begin()+t,sort_y);\n\t\treturn (p[s]-p[s+1]).abs();\n\t}\n\tint mid = (s+t)/2;\n\tdouble x = p[mid].x;\n\tres = min(closest_pair_dac(p,s,mid,res),closest_pair_dac(p,mid,t,res) );\n\tauto it = p.begin();\n\tauto its = it+s,itm = it+mid,itt = it + t;\n\tinplace_merge(its,itm,itt,sort_y);\n\tvector<point> tmp;\n\tfor(int i=s;i<t;i++){\n\t\tif(abs(p[i].x-x) >= res) continue;\n\t\tfor(int j=tmp.size()-1;j>=0;j--){\n\t\t\tpoint d = p[i]-tmp[j];\n\t\t\tif(d.y >= res) break;\n\t\t\tres = min( res , d.abs() );\n\t\t}\n\t\ttmp.push_back(p[i]);\n\t}\n\treturn res;\n}\ndouble closest_pair(polygon &p){\n\tdouble res = inf;\n\tsort(p.begin(),p.end());\n\treturn  closest_pair_dac(p,0,p.size(),res);\n}\n\nint main(){\n    \tcircle c1,c2;\n\tc1.input();\n\tc2.input();\n\tcout<<intersect(c1,c2)<<endl;\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\n#include <cstdlib>\nusing namespace std;\n\nint main(){\n  double c1x, c1y, c1r, c2x, c2y, c2r;\n  scanf(\"%lf %lf %lf\", &c1x, &c1y, &c1r);\n  scanf(\"%lf %lf %lf\", &c2x, &c2y, &c2r);\n  if(sqrt(pow(c1x-c2x,2) + pow(c1y-c2y,2)) > c1r + c2r) printf(\"4\");\n  else if(sqrt(pow(c1x-c2x,2) + pow(c1y-c2y,2)) == c1r + c2r) printf(\"3\");\n  else if(sqrt(pow(c1x-c2x,2) + pow(c1y-c2y,2)) > abs(c1r - c2r) && sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2)) < c1r + c2r) printf(\"2\");\n  else if(sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2)) == abs(c1r - c2r)) printf(\"1\");\n  else printf(\"0\");\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\n\nint main()\n{\n  int c1x, c1y, c1r;\n  int c2x, c2y, c2r;\n\n  std::cin >> c1x >> c1y >> c1r;\n  std::cin >> c2x >> c2y >> c2r;\n\n  double d;\n\n  d = sqrt( (c1x-c2x) * (c1x-c2x) + (c1y-c2y) * (c1y-c2y) );\n\n  if( d > (c1r+c2r) )\n    std::cout << \"4\" << std::endl;\n  \n  /*\n  if( fabs(c1r+c2r-d) <= 0.000000001 )\n  std::cout << \"3\" << std::endl;\n  */\n\n  if( d == (c1r+c2r) )\n    std::cout << \"3\" << std::endl;\n  \n  if( fabs(c1r-c2r) < d && d < (c1r+c2r) )\n    std::cout << \"2\" << std::endl;\n  \n  /*\n  if( fabs( d - fabs(c1r-c2r) ) <= 0.000000001 )\n  std::cout << \"1\" << std::endl;\n  */\n\n  if( d == fabs(c1r-c2r) )\n    std::cout << \"1\" << std::endl;\n  \n  if( d < fabs(c1r-c2r) )\n    std::cout << \"0\" << std::endl;\n\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define rep(i,n) for(int i=0;i<int(n);++i)\nusing namespace std;\n\n#define _all(arg) begin(arg),end(arg)\n#define uniq(arg) (sort(_all(arg)),(arg).erase(unique(_all(arg)),end(arg)),arg)\n#define getidx(ary,key) lower_bound(_all(ary),key)-begin(ary)\n\ntemplate<class T>void reg(vector<T> &ary,const T &elem){ary.emplace_back(elem);}\ntemplate<class T>bool chmin(T &a, const T &b) {return (b<a)?(a=b,1):0;}\ntemplate<class T>bool chmax(T &a, const T &b) {return (a<b)?(a=b,1):0;}\n\nusing R=long double; // __float128\nconst R EPS = 1E-8; // [-100:100]->EPS=1e-9 [-1000:1000]->EPS=1e-8 [-10000:10000]->EPS=1e-7\nconst R INF = 1E40;\nconst R PI = acos(R(-1));\ninline int sgn(const R& r){ return (r > EPS) - (r < -EPS);}\ninline R sq(R x){return sqrt(max<R>(x,0.0));}\n\nusing P=complex<R>;\nusing VP=vector<P>;\n\nnamespace std{\n\tbool operator <  (const P& a,const P& b){ return sgn(real(a-b))?real(a-b)<0:sgn(imag(a-b))<0;}\n\tbool operator == (const P& a,const P& b){ return sgn(real(a-b))==0 && sgn(imag(a-b))==0;}\n}\n\nusing L=struct{P s,t;};\n\ninline R dot(P o,P a,P b){a-=o,b-=o; return real(conj(a)*b);}\ninline R det(P o,P a,P b){a-=o,b-=o; return imag(conj(a)*b);}\n\nenum CCW{ LEFT = 1,RIGHT = 2,BACK = 4,FRONT = 8,ON = 16};\ninline int ccw(P o,P a, P b) {\n\tif (sgn(det(o,a,b)) > 0) return LEFT;\n\tif (sgn(det(o,a,b)) < 0) return RIGHT;\n\tif (sgn(dot(o,a,b)) < 0) return BACK;\n\tif (sgn(norm(a-o)-norm(b-o)) < 0) return FRONT;\n\treturn ON;\n}\n\n// above prepared template\n\nP proj(P o,P a,P b){ a-=o,b-=o; return a*real(b/a);}\nP proj(L l,P p){l.t-=l.s,p-=l.s;return l.s+l.t*real(p/l.t);}\nP refl(L l,P p){ return R(2.0)*proj(l,p)-p;}\n\nbool iss(L a,L b,int end=0){\n\tint s1=ccw(a.s,a.t,b.s)|ccw(a.s,a.t,b.t);\n\tint s2=ccw(b.s,b.t,a.s)|ccw(b.s,b.t,a.t);\n\tif(end) return (s1&s2)==(LEFT|RIGHT);\n\treturn (s1|s2)&ON || (s1&s2)==(LEFT|RIGHT);\n}\n\nP cross(L a,L b){\n\tR s1=det(a.s,b.s,b.t),s2=s1+det(a.t,b.t,b.s);\n\treturn a.s+s1/s2*(a.t-a.s);\n}\n\nR dsp(L s,P p){\n\tif(sgn(dot(s.s,s.t,p))<=0) return abs(p-s.s);\n\tif(sgn(dot(s.t,s.s,p))<=0) return abs(p-s.t);\n\treturn abs(det(s.s,s.t,p))/abs(s.t-s.s);\n}\n\nR dss(L a,L b){return iss(a,b)?0:min({dsp(a,b.s),dsp(a,b.t),dsp(b,a.s),dsp(b,a.t)});}\n\n\nusing C=struct{P c;R r;};\nenum RCC{OUT=4,ON_OUT=3,ISC=2,ON_IN=1,IN=0};\nint rcc(C a,C b){ R d=abs(a.c-b.c);return 2+sgn(d-a.r-b.r)+sgn(d-abs(a.r-b.r));}\n\nbool icp(C c,P p,int end=0){return sgn(norm(p-c.c)-norm(c.r))<=-end;}\n// dsp\nbool ics(C c,L s,int end=0){return sgn(dsp(s,c.c)-c.r)<=-end;}\nbool icsc(C c,L l,int end=0){return ics(c,l) && sgn(max(norm(l.s-c.c),norm(l.t-c.c))-norm(c.r))<=0;}\n\nR cc_area(C a,C b){\n\tint r=rcc(a,b);\n    if(r<=ON_OUT) return 0.0;  \n    if(r>=ON_IN) return min(norm(a.r),norm(b.r))*PI;\n    R d=abs(b.c-a.c),rc=(norm(d)+ norm(a.r) - norm(b.r))/(2.0*d),t=acos(rc/a.r),p=acos((d-rc)/b.r);\n    return norm(a.r)*t+norm(b.r)*p-d*a.r*sin(t);\n}\n\n// proj\nVP pcl(C c, L l){P h=proj(l,c.c),e=(l.t-l.s)/abs(l.t-l.s)*sq(norm(c.r)-norm(h-c.c));return VP{h-e,h+e};}\n// pcl\nVP pcc(C a,C b){P d=b.c-a.c,w=(norm(d)+norm(a.r)-norm(b.r))/(2.0*norm(d))*d,h=a.c+w,e=w*P(0,1);return pcl(a,{h-e,h+e});}\n\nL tan(C c,P p){P d=(p-c.c)*P(0,1);return L{p-d,p+d};}\n\n// reg sq\nVP contact(C c,P p){\n\tVP ret; R d=abs(p-c.c); \n\trep(i,2) reg(ret,c.c+(c.r+P(0,2*i-1)*sq(norm(d)-norm(c.r)))*c.r*(p-c.c)/norm(d));\n\treturn uniq(ret);\n}\n\n// reg sq rcc\nVP contact(C a,C b){\n\tVP ret; R d=abs(a.c-b.c);\n\trep(i,2) if(rcc(a,b)<=8-6*i) rep(j,2){\n\t\tR r=a.r+(2*i-1)*b.r;\n\t\treg(ret,a.c+(r+P(0,2*j-1)*sq(norm(d)-norm(r)))*a.r*(b.c-a.c)/norm(d));\n\t}\n\treturn uniq(ret);\n}\n\n\nint main(void){\n\tC a,b;\n\t{\n\t\tint x,y,r;\n\t\tcin >> x >> y >> r;\n\t\ta=C({P(x,y),R(r)});\n\t\tcin >> x >> y >> r;\n\t\tb=C({P(x,y),R(r)});\n\t}\n\tcout << rcc(a,b) << endl;\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\n\nint main()\n{\n  int c1x, c1y, c1r;\n  int c2x, c2y, c2r;\n\n  std::cin >> c1x >> c1y >> c1r;\n  std::cin >> c2x >> c2y >> c2r;\n\n  //std::cout << c1x << c1y << c1r << std::endl << c2x << c2y << c2r;\n\n  double d;\n\n  d = sqrt( (c1x-c2x) * (c1x-c2x) + (c1y-c2y) * (c1y-c2y) );\n\n  //std::cout << c1x << c1y << c1r << std::endl << c2x << c2y << c2r << std::endl << d;\n\n  if( d > (c1r+c2r) )\n    std::cout << \"4\";\n\n  if( fabs(c1r+c2r-d) <= 0.000000001 )\n    std::cout << \"3\";\n\n  if( fabs(c1r-c2r) < d && d < (c1r+c2r) )\n    std::cout << \"2\";\n\n  if( fabs( d - fabs(c1r-c2r) ) <= 0.000000001 )\n  std::cout << \"1\";\n\n  if( d < fabs(c1r-c2r) )\n    std::cout << \"0\";\n\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <stdio.h>\n#include <cmath>\nusing namespace std;\n\nint main(){\n    int c1x, c1y, c1r, c2x, c2y, c2r;\n    scanf(\"%d %d %d\",&c1x,&c1y,&c1r);\n    scanf(\"%d %d %d\",&c2x,&c2y,&c2r);\n\n    if(pow(c1x-c2x,2)+pow(c1y-c2y,2) > pow(c1r+c2r,2)) cout << 4 << endl;\n    else if(pow(c1x-c2x,2)+pow(c1y-c2y,2) == pow(c1r+c2r,2)) cout << 3 << endl;\n    else if((pow(c1x-c2x,2)+pow(c1y-c2y,2) < pow(c1r+c2r,2)) && (pow(c1x-c2x,2)+pow(c1y-c2y,2) > pow(c1r-c2r,2))) cout << 2 << endl;\n    else if(pow(c1x-c2x,2)+pow(c1y-c2y,2) == pow(c1r-c2r,2)) cout << 1 << endl;\n    else cout << 0 << endl;\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <string>\n#include <cstring>\n#include <deque>\n#include <list>\n#include <queue>\n#include <stack>\n#include <vector>\n#include <utility>\n#include <algorithm>\n#include <map>\n#include <set>\n#include <complex>\n#include <cmath>\n#include <limits>\n#include <climits>\n#include <ctime>\n#include <cassert>\nusing namespace std;\n\n#define rep(i,a,n) for(int i=a; i<n; i++)\n#define repr(i,a,n) for(int i=a; i>=n; i--)\n#define pb(a) push_back(a)\n#define fr first\n#define sc second\n#define INF 999999999\n\n#define X real()\n#define Y imag()\n#define EPS (1e-10)\n#define EQ(a,b) (abs((a) - (b)) < EPS)\n#define EQV(a,b) ( EQ((a).X, (b).X) && EQ((a).Y, (b).Y) )\n#define LE(n, m) ((n) < (m) + EPS)\n#define GE(n, m) ((n) + EPS > (m))\n\ntypedef vector<int> VI;\ntypedef vector<VI> MAT;\ntypedef pair<int, int> pii;\ntypedef long long int ll;\n\ntypedef complex<double> P;\ntypedef pair<P, P> L;\ntypedef pair<P, double> C;\n\nint dy[]={0, 0, 1, -1};\nint dx[]={1, -1, 0, 0};\nint const MOD = 1000000007;\n\nnamespace std {\n    bool operator<(const P& a, const P& b) {\n        return a.X != b.X ? a.X < b.X : a.Y < b.Y;\n    }\n}\n\n// ??? c1 ??¨??? c2 ???????????¢???\nint intersectCC(C c1, C c2){\n    P c1p = c1.first, c2p = c2.first;\n    double c1r = c1.second, c2r = c2.second;\n    long double d = abs(c1p - c2p), r1 = c1r, r2 = c2r;\n    if(r1 + r2 < d)            return  0; // ??¢????????????\n    if(abs(r1 + r2 - d) < EPS) return -2; // ?????\\\n    if(abs(d + r1 - r2) < EPS) return +1; // c1 ??? c2 ????????§?????\\\n    if(abs(d + r2 - r1) < EPS) return -1; // c2 ??? c1 ????????§?????\\\n    if(d + r1 < r2)            return +3; // c1 ??? c2 ??????\n    if(d + r2 < r1)            return -3; // c2 ??? c1 ??????\n    return 2; // 2?????????????????????\n}\n\nint main() {\n    C a, b;\n    cin >> a.fr.X >> a.fr.Y >> a.sc >> b.fr.X >> b.fr.Y >> b.sc;\n    map<int, int> m;\n    m[0] = 4;\n    m[-2] = 3;\n    m[2] = 2;\n    m[1] = 1;\n    m[-1] = 1;\n    m[3] = 0;\n    m[-3] = 0;\n    cout << m[intersectCC(a, b)] << endl;\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <utility>\n#include <vector>\n#include <complex>\n#include <cmath>\n#include <algorithm>\n#include <set>\n\nusing namespace std;\n\nstatic const double EPS=1e-12;\nstatic const double INF=1e24;\n\nusing Point=complex<double>;\nusing Plane=vector<Point>;\nusing Polygon=vector<Point>;\n\nbool operator<(const Point &a, const Point &b) {\n    return real(a)!=real(b)? real(a)<real(b) : imag(a)<imag(b);\n}\n\ndouble cross_prod(const Point &a, const Point &b) {\n    return imag(conj(a)*b);\n}\n\ndouble dot_prod(const Point &a, const Point &b) {\n    return real(conj(a)*b);\n}\n\nstruct LineSeg: public pair<Point, Point> {\n    LineSeg() {}\n    LineSeg(const Point &a, const Point &b) {\n        first = a;\n        second = b;\n    }\n};\n\nstruct Circle {\n    Point p;\n    double r;\n    Circle() {}\n    Circle(const Point &p, const double r): p(p), r(r) {}\n};\n\nsize_t num_ctangent(const Circle &c1, const Circle &c2) {\n    double d=abs(c1.p-c2.p);\n    double r=min(c1.r, c2.r), R=max(c1.r, c2.r);\n    if (R+r < d) {\n        return 4;\n    } else if (abs(R+r-d) < EPS) {\n        return 3;\n    } else if (abs(R-r-d) < EPS) {\n        return 1;\n    } else if (R-r > d) {\n        return 0;\n    } else {\n        return 2;\n    }\n}\n\nint main() {\n    double x, y, r;\n    scanf(\"%lf %lf %lf\", &x, &y, &r);\n    Circle c1(Point(x, y), r);\n\n    scanf(\"%lf %lf %lf\", &x, &y, &r);\n    Circle c2(Point(x, y), r);\n\n    printf(\"%zu\\n\", num_ctangent(c1, c2));\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ntemplate<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return true; } return false; }\ntemplate<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return true; } return false; }\nusing ll = long long;\nusing P = pair<ll, ll>;\nconst long double PI = acos(-1.0L);\nll GCD(ll a, ll b) { return b?GCD(b, a%b):a; }\nll LCM(ll a, ll b) { return a/GCD(a, b)*b; }\n\nusing CP = complex<long double>;\n\nconst long double EPS = 1e-10;     // 許容する誤差ε\n#define EQ(a, b) (abs((a)-(b)) < EPS)   // 2つのスカラーが等しいかどうか\n#define EQV(a, b) (EQ((a).real(), (b).real()) && EQ((a).imag(), (b).imag()))    // 2つのベクトルが等しいかどうか\n\n// double length = abs(a);     // ベクトルaの絶対値\n// double distance = abs(a-b);     // 2点a,b間の距離\n// CP b = a/abs(a);    // ベクトルaの単位ベクトル\n// CP n1 = a*CP(0,+1); CP n2 = a*CP(0,-1);  // ベクトルaの法線ベクトル\n// CP un1 = (a*CP(0,+1)/abs(a)); CP un2 = (a*CP(0,-1)/abs(a));  // ベクトルaの単位法線ベクトル\n\n// 内積(dot product) : a・b = |a||b|cosΘ\nlong double dot(CP a, CP b) {\n    return (a.real()*b.real() + a.imag()*b.imag());\n}\n\n// 外積(cross product) : a×b = |a||b|sinΘ\nlong double cross(CP a, CP b) {\n    return (a.real()*b.imag() - a.imag()*b.real());\n}\n\n// 2直線の直交判定 : a⊥b ⇔ dot(a,b) = 0\nint is_orthogonal(CP a1, CP a2, CP b1, CP b2) {\n    return EQ(dot(a1-a2, b1-b2), 0.0);\n}\n\n// 2直線の平行判定 : a//b ⇔ cross(a,b) = 0\nint is_parallel(CP a1, CP a2, CP b1, CP b2) {\n    return EQ(cross(a1-a2, b1-b2), 0.0);\n}\n\n// 点cが直線a,b上にあるかないか\nint is_point_on_line(CP a, CP b, CP c) {\n    return EQ(cross(b-a, c-a), 0.0);\n}\n\n// 点cが線分a,b上にあるかないか\nint is_point_on_lines(CP a, CP b, CP c) {\n    // |a-c|+|c-b| <= |a-b|なら線分上\n    return (abs(a-c)+abs(c-b) < abs(a-b)+EPS);\n}\n\n// a1,a2を端点とする線分とb1,b2を端点とする線分の交差判定\nint is_intersected_lines(CP a1, CP a2, CP b1, CP b2) {\n    if(is_parallel(a1, a2, b1, b2)) {\n        // 平行なので線分の重なり判定\n        return is_point_on_lines(a1, a2, b1) || is_point_on_lines(a1, a2, b2) ||\n               is_point_on_lines(b1, b2, a1) || is_point_on_lines(b1, b2, a2);\n    }\n    return (cross(a2-a1, b1-a1)*cross(a2-a1, b2-a1) < EPS) &&\n           (cross(b2-b1, a1-b1)*cross(b2-b1, a2-b1) < EPS);\n}\n\n// a1,a2を端点とする線分とb1,b2を端点とする線分の交点計算\nCP intersection_lines(CP a1, CP a2, CP b1, CP b2) {\n    CP b = b2-b1;\n    long double d1 = abs(cross(b, a1-b1));\n    long double d2 = abs(cross(b, a2-b1));\n    long double t = d1/(d1+d2);\n    return a1+(a2-a1)*t;\n}\n\n// a1,a2を通る直線とb1,b2を通る直線の交差判定\nint is_intersected_line(CP a1, CP a2, CP b1, CP b2) {\n    return !EQ(cross(a1-a2, b1-b2), 0.0);\n}\n\n// a1,a2を通る直線とb1,b2を通る直線の交点計算(平行ではない前提)\nCP intersection_line(CP a1, CP a2, CP b1, CP b2) {\n    CP a = a2-a1; CP b = b2-b1;\n    return a1 + a*cross(b, b1-a1)/cross(b, a);\n}\n\n// 点a,bを通る直線と点cとの距離\nlong double distance_line_p(CP a, CP b, CP c) {\n    return abs(cross(b-a, c-a))/abs(b-a);\n}\n\n// 点a,bを端点とする線分と点cとの距離\nlong double distance_lines_p(CP a, CP b, CP c) {\n    if(dot(b-a, c-a) < EPS) return abs(c-a);\n    if(dot(a-b, c-b) < EPS) return abs(c-b);\n    return abs(cross(b-a, c-a))/abs(b-a);\n}\n\n// 点a1,a2を端点とする線分と点b1,b2を端点とする線分の最短距離\nlong double distance_lines_lines(CP a1, CP a2, CP b1, CP b2) {\n    long double res = 1e18;\n    if(is_intersected_lines(a1, a2, b1, b2)) return 0.0L;\n    res = min(res, distance_lines_p(a1, a2, b1));\n    res = min(res, distance_lines_p(a1, a2, b2));\n    res = min(res, distance_lines_p(b1, b2, a1));\n    res = min(res, distance_lines_p(b1, b2, a2));\n    return res;\n}\n\n// s,tを通る直線に対する点pの射影\nCP projection(CP s, CP t, CP p) {\n    if(EQV(s, t)) return s;\n    CP base = t-s;\n    return s + base*(dot(p-s, base)/norm(base));\n}\n\n// s,tを通る直線に対する点pの反射\nCP reflection(CP s, CP t, CP p) {\n    CP tmp = projection(s, t, p) - p;\n    return p + tmp*2.0L;\n}\n\n// n多角形の面積計算\nlong double polygon_area(const vector<CP> &v) {\n    int n = v.size();\n    long double res = 0;\n    for(int i = 0; i < n; ++i) {\n        res += cross(v[(i+n-1)%n], v[(i+n)%n]);\n    }\n    return fabsl(res)/2.0L;\n}\n\n// n多角形の凸性判定\nint is_convex(const vector<CP> &v) {\n    int n = v.size();\n    for(int i = 0; i < n; ++i) {\n        if(cross(v[(i+1)%n]-v[i], v[(i+2)%n]-v[(i+1)%n]) < -EPS) return 0;\n    }\n    return 1;\n}\n\n// 凸包\nvector<CP> convex_hull(vector<CP> &v) {\n    // x座標→y座標で頂点をソート\n    auto lmd = [&](const CP &l, const CP &r) {\n        if(l.imag() != r.imag()) return l.imag() < r.imag();\n        return l.real() < r.real();\n        return l.imag() < r.imag();\n    };\n    vector<CP> res;     // 凸包を構成する頂点\n    int n = v.size();\n    sort(v.begin(), v.end(), lmd);\n    int k = 0;\n    res.resize(n*2);\n    // 下側凸包\n    for(int i = 0; i < n; ++i) {\n        while(k > 1 && cross(res[k-1]-res[k-2], v[i]-res[k-1]) < 0) {\n            --k;\n        }\n        res[k++] = v[i];\n    }\n    // 上側凸包\n    for(int i = n-2, t = k; i >= 0; --i) {\n        while(k > t && cross(res[k-1]-res[k-2], v[i]-res[k-1]) < 0) {\n            --k;\n        }\n        res[k++] = v[i];\n    }\n    res.resize(k-1);\n    return res;\n}\n\n// 凸多角形の直径\nlong double convex_diameter(vector<CP> &v) {\n    vector<CP> cv = convex_hull(v);\n    int n = cv.size();\n    if(n == 2) return abs(cv[0]-cv[1]);     // 凸包が潰れている例外処理\n    int i = 0, j = 0;   // x軸方向に最も遠い点対\n    for(int k = 0; k < n; ++k) {\n        if(cv[k].real() < cv[i].real()) i = k;\n        if(cv[k].real() > cv[j].real()) j = k;\n    }\n    long double res = 0;\n    int si = i, sj = j;\n    while(i != sj || j != si) {     // 180度回転で終了\n        res = max(res, abs(cv[i]-cv[j]));\n        if(cross(cv[(i+1)%n]-cv[i], cv[(j+1)%n]-cv[j]) < 0) {\n            (++i) %= n;\n        }else {\n            (++j) %= n;\n        }\n    }\n    return res;\n}\n\n// 凸多角形を点s,tを通る直線で切断(左側が取得できる)\nvector<CP> convex_cut(const vector<CP> &v, const CP &s, const CP &t) {\n    vector<CP> res;\n    int n = v.size();\n    for(int i = 0; i < n; ++i) {\n        CP nows = v[i], nowt = v[(i+1)%n];\n        if(cross(t-s, nows-s) >= -EPS) res.emplace_back(nows);\n        if(cross(t-s, nows-s)*cross(t-s, nowt-s) < 0) {\n            res.emplace_back(intersection_line(s, t, nows, nowt));\n        }\n    }\n    return res;\n}\n\n// n多角形に対する点pの包含関係(自己交差多角形は例外)\nint contain_polygon_point(const vector<CP> &v, CP p) {\n    int contain = 0, on_segment = 0;\n    int n = v.size();\n    for(int i = 0; i < n; ++i) {\n        on_segment |= is_point_on_lines(v[i], v[(i+1)%n], p);   // 辺上判定\n        CP s = v[i]-p, t = v[(i+1)%n]-p;\n        if(s.imag() > t.imag()) swap(s, t);     // 下側を基準にする\n        if(s.imag()*t.imag() <= 0 && t.imag() > 0 && cross(s, t) > 0) {\n            contain = !contain;     // 交差回数が奇数なら内側\n        }\n    }\n    if(on_segment) return 1;    // 辺上\n    if(contain) return 2;       // 内側\n    return 0;       // 外側\n}\n\n// 最近点対距離\nlong double closest_pair(vector<CP> &v, int l = -1, \n                         int r = -1, bool reqsqrt = 0) {\n    if(l == r && l == -1) {\n        l = 0; r = v.size(); reqsqrt = 1;\n        // x座標→y座標で昇順ソート\n        auto lmd = [&](const CP &l, const CP &r) {\n            if(l.real() != r.real()) return l.real() < r.real();\n            return l.imag() < r.imag();\n        };\n        sort(v.begin(), v.end(), lmd);\n    }\n    if(r-l < 2) return 1e18;    // 2点存在しない\n    if(r-l == 2) {      // ちょうど2点の時\n        if(v[l].imag() > v[l+1].imag()) swap(v[l], v[l+1]);\n        if(reqsqrt) return abs(v[l]-v[l+1]);\n        return norm(v[l]-v[l+1]);\n    }\n    // 2点以上に関して分割統治法\n    int mid = (l+r)/2;\n    long double x = v[mid].real();  // 分断する線のx座標\n    // 左半分，右半分について再帰，同一領域内の最小距離resを求める\n    long double res = min(closest_pair(v, l, mid), closest_pair(v, mid, r));\n    auto f = [](CP pl, CP pr) { return pl.imag() < pr.imag(); };\n    inplace_merge(v.begin()+l, v.begin()+mid, v.begin()+r, f);\n    vector<CP> tmp;\n    // 異なる領域の2点について最小距離res未満で探索\n    for(int i = l; i < r; ++i) {\n        long double dx = abs(v[i].real()-x);\n        int tsize = tmp.size();\n        if(dx*dx >= res) continue;\n        for(int j = 0; j < tsize; ++j) {\n            CP delta = v[i]-tmp[tsize-1-j];\n            if(delta.imag()*delta.imag() >= res) break;\n            res = min(res, norm(delta));\n        }\n        tmp.emplace_back(v[i]);\n    }\n    if(reqsqrt) res = sqrtl(res);\n    return res;\n}\n\n// 円の表現\nstruct Circle {\n    CP o;\n    long double r;\n    Circle(long double _x = 0.0L, long double _y = 0.0L,\n           long double _r = 0.0L)\n        : o(CP(_x, _y)), r(_r) {}\n    Circle(CP _o, long double _r = 0.0) : o(_o), r(_r) {}\n};\n\n// 2円の位置関係\nint is_cross_circles(Circle l, Circle r) {\n    long double distlr = abs(l.o-r.o);\n    if(l.r+r.r+EPS < distlr) return 4;         // 交点無し外側\n    if(r.r+distlr+EPS < l.r) return -2;          // 交点無し内側(R in L)\n    if(l.r+distlr+EPS < r.r) return 2;          // 交点無し内側(L in R)\n    if(abs(l.r+r.r-distlr) < EPS) return 3;    // 外接\n    if(abs(l.r+distlr-r.r) < EPS) return -1;     // 内接(R in L)\n    if(abs(r.r+distlr-l.r) < EPS) return 1;     // 内接(L in R)\n    return 0;                                   // 2点で交わる\n}\n\n// 3点の位置関係を判定\nint calc_clockwise(CP p0, CP p1, CP p2) {\n    CP x = p1-p0, y = p2-p0;\n    if(cross(x, y) > EPS) return 1;     // \"COUNTER_CLOCKWISE\"\n    if(cross(x, y) < -EPS) return -1;   // \"CLOCKWISE\"\n    if(dot(x, y) < 0) return 2;         // \"ONLINE_BACK\"\n    if(norm(x) < norm(y)) return -2;    // \"ONLINE_FRONT\"\n    return 0;                           // \"ON_SEGMENT\" \n}\n\nint main() {\n    long double a, b, c;\n    cin >> a >> b >> c;\n    long double d, e, f;\n    cin >> d >> e >> f;\n    CP x(a, b), y(d, e);\n    int flg = is_cross_circles(Circle(x, c), Circle(y, f));\n    if(flg == 0) cout << 2 << endl;\n    else if(flg == 1 || flg == -1) cout << 1 << endl;\n    else if(flg == 2 || flg == -2) cout << 0 << endl;\n    else if(flg == 3) cout << 3 << endl;\n    else cout << 4 << endl;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define GET_MACRO(_1,_2,_3,_4,_5,_6,_7,_8,NAME,...) NAME\n#define pr(...) cerr<< GET_MACRO(__VA_ARGS__,pr8,pr7,pr6,pr5,pr4,pr3,pr2,pr1)(__VA_ARGS__) <<endl\n#define pr1(a) (#a)<<\"=\"<<(a)<<\" \"\n#define pr2(a,b) pr1(a)<<pr1(b)\n#define pr3(a,b,c) pr1(a)<<pr2(b,c)\n#define pr4(a,b,c,d) pr1(a)<<pr3(b,c,d)\n#define pr5(a,b,c,d,e) pr1(a)<<pr4(b,c,d,e)\n#define pr6(a,b,c,d,e,f) pr1(a)<<pr5(b,c,d,e,f)\n#define pr7(a,b,c,d,e,f,g) pr1(a)<<pr6(b,c,d,e,f,g)\n#define pr8(a,b,c,d,e,f,g,h) pr1(a)<<pr7(b,c,d,e,f,g,h)\n#define prArr(a) {cerr<<(#a)<<\"={\";int i=0;for(auto t:(a))cerr<<(i++?\", \":\"\")<<t;cerr<<\"}\"<<endl;}\nusing namespace std;\nusing Int = long long;\nusing _int = int;\nusing ll = long long;\nusing Double = long double;\nconst Int INF = (1LL<<60)+1e9; // ~ 1.15 * 1e18\nconst Int mod = (1e9)+7;\nconst Double EPS = 1e-8;\nconst Double PI = 6.0 * asin((Double)0.5);\nusing P = pair<Int,Int>;\ntemplate<class T> T Max(T &a,T b){return a=max(a,b);}\ntemplate<class T> T Min(T &a,T b){return a=min(a,b);}\ntemplate<class T1, class T2> ostream& operator<<(ostream& o,pair<T1,T2> p){return o<<\"(\"<<p.first<<\",\"<<p.second<<\")\";}\ntemplate<class T1, class T2, class T3> ostream& operator<<(ostream& o,tuple<T1,T2,T3> t){\n  return o<<\"(\"<<get<0>(t)<<\",\"<<get<1>(t)<<\",\"<<get<2>(t)<<\")\";}\ntemplate<class T1, class T2> istream& operator>>(istream& i,pair<T1,T2> &p){return i>>p.first>>p.second;}\ntemplate<class T> ostream& operator<<(ostream& o,vector<T> a){Int i=0;for(T t:a)o<<(i++?\" \":\"\")<<t;return o;}\ntemplate<class T> istream& operator>>(istream& i,vector<T> &a){for(T &t:a)i>>t;return i;}\n//INSERT ABOVE HERE\n\n\nsigned main(){\n  srand((unsigned)time(NULL));\n  cin.tie(0);\n  ios_base::sync_with_stdio(0);\n  cout << fixed << setprecision(12);\n\n  Int a, b, c;\n  Int x, y, z;\n  cin>>a>>b>>c;\n  cin>>x>>y>>z;\n\n  auto check= [&](){\n    Int Dis = (a - x) * (a - x) + (b - y) * (b - y);\n    Int r = (c - z) * (c - z);\n    Int R =  (c + z) * (c + z);\n    if(Dis > R) return 4;\n    if(Dis == R) return 3;\n    if(Dis == r ) return 1;\n    if(Dis < r) return 0;\n    return 2;\n  };\n\n  Int ans = check();\n  cout<<ans<<endl;\n\n  \n    \n\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <cassert>\n#include <climits>\n#include <cmath>\n#include <complex>\n#include <cstring>\n#include <ctime>\n#include <iomanip>\n#include <map>\n#include <queue>\n#include <set>\n#include <tuple>\nusing namespace std;\ntypedef long long ll;\n#define _ << \" \" <<\n#define all(X) (X).begin(), (X).end()\n#define len(X) (X).size()\n#define Pii pair<int, int>\n#define Pll pair<ll, ll>\n#define Tiii tuple<int, int, int>\n#define Tlll tuple<ll, ll, ll>\n\ndouble eps = 1e-8;\n\nstruct point /* vec */ {\n    double x, y;\n    point operator+(const point &p) {\n        return {x + p.x, y + p.y};\n    }\n    point operator-(const point &p) {\n        return {x - p.x, y - p.y};\n    }\n};\n\nstruct line {\n    // ax + by + c = 0\n    double a, b, c;\n};\n\nstruct circle {\n    point p;\n    double r;\n};\n\ndouble dot(point P, point Q) {\n    return P.x*Q.x + P.y*Q.y;\n}\n\ndouble cross_2d(point P, point Q) {\n    return P.x*Q.y - P.y*Q.x;\n}\n\ndouble points_distance(point A, point B, int deg) {\n    point C = B - A;\n    return pow(C.x*C.x + C.y*C.y, 0.5 * deg);\n}\n\nline line_2points(point P, point Q) {\n    return {P.y - Q.y, Q.x - P.x, P.x*Q.y - P.y*Q.x};\n}\n\npoint lines_intersection(line l, line m) {\n    if (abs(l.a*m.b - l.b*m.a) < eps) {\n        assert(-1);\n    }\n    return {- (l.b*m.c - l.c*m.b) / (l.b*m.a - l.a*m.b),\n            - (l.a*m.c - l.c*m.a) / (l.a*m.b - l.b*m.a)};\n}\n\nbool line_same(line l, line m) {\n    if (l.c * m.c == 0) {\n        if (l.c == m.c) {\n            if (l.b * m.b == 0) {\n                if (l.b == m.b) return 1;\n                else return 0;\n            }\n            else return l.a / l.b == m.a / m.b; \n        }\n        else return 0;\n    }\n    else return l.a / l.c == m.a / m.c && l.b / l.c == m.b / m.c;\n}\n\nbool on_line(point P, point Q, point R) {\n    if (P.x > Q.x) swap(P, Q);\n    if (P.y > Q.y) swap(P.y, Q.y);\n    return (P.x <= R.x && R.x <= Q.x && P.y <= R.y && R.y <= Q.y);\n}\n\ndouble point_line_distance(point P, line l) {\n    return abs(l.a * P.x + l.b * P.y + l.c) / sqrt(l.a*l.a + l.b*l.b);\n}\n\ndouble point_segment_distance(point p1, point p2, point q) {\n    if (dot(q - p1, p2 - p1) <= 0) return points_distance(p1, q, 1);\n    else if (dot(q - p2, p1 - p2) <= 0) return points_distance(p2, q, 1);\n    else return point_line_distance(q, line_2points(p1, p2));\n}\n\ndouble is_segments_intersect(point p1, point p2, point q1, point q2) {\n    line s0 = line_2points(p1, p2);\n    line s1 = line_2points(q1, q2);\n    if (abs(s0.a*s1.b - s0.b*s1.a) < eps) {\n        if (p1.x > p2.x) swap(p1, p2);\n        if (p1.y > p2.y) swap(p1.y, p2.y);\n        if (q1.x > q2.x) swap(q1, q2);\n        if (q1.y > q2.y) swap(q1.y, q2.y);\n        if (line_same(s0, s1)) {\n            return (q1.x <= p2.x && p1.x <= q2.x && q1.y <= p2.y && p1.y <= q2.y);\n        }\n        else return 0;\n    }\n    return cross_2d(p2 - p1, q1 - p1) * cross_2d(p2 - p1, q2 - p1) < eps\n        && cross_2d(q2 - q1, p1 - q1) * cross_2d(q2 - q1, p2 - q1) < eps;\n}\n\nvector<point> circles_intersection(circle A, circle B) {\n    vector<point> ret;\n    point X = A.p;\n    B.p = B.p - A.p;\n    A.p = {0, 0};\n\n    if (points_distance(A.p, B.p, 2) - pow(A.r + B.r, 2) > eps) return ret;\n\n    double K = (B.p.x*B.p.x + B.p.y*B.p.y + A.r*A.r - B.r*B.r) / 2;\n    double SQ = (B.p.x*B.p.x + B.p.y*B.p.y)*A.r*A.r - K * K;\n    double DS = points_distance(A.p, B.p, 2);\n    //cerr << K _ SQ _ DS << endl;\n    if (SQ < 0) return ret;\n    if (abs(SQ) < eps) {\n        ret.push_back({K*B.p.x / DS + X.x, K*B.p.y / DS + X.y});\n        return ret;\n    }\n    ret.push_back({(K*B.p.x + B.p.y*sqrt(SQ)) / DS + X.x,\n                   (K*B.p.y - B.p.x*sqrt(SQ)) / DS + X.y});\n    ret.push_back({(K*B.p.x - B.p.y*sqrt(SQ)) / DS + X.x,\n                   (K*B.p.y + B.p.x*sqrt(SQ)) / DS + X.y});\n    return ret;\n}\n \nint main() {\n    circle A, B;\n    cin >> A.p.x >> A.p.y >> A.r;\n    cin >> B.p.x >> B.p.y >> B.r;\n    vector<point> vec = circles_intersection(A, B);\n    if (vec.size() == 2) cout << 2 << endl;\n    else if (vec.size() == 1) {\n        if (points_distance(A.p, B.p, 2) == pow(A.r + B.r, 2)) {\n            cout << 3 << endl;\n        }\n        else cout << 1 << endl;\n    }\n    else {\n        if (points_distance(A.p, B.p, 2) > pow(A.r + B.r, 2)) {\n            cout << 4 << endl;\n        }\n        else cout << 0 << endl;\n    }\n    /*\n    for (auto &i : vec) {\n        cout << i.x _ i.y << endl;\n    }*/\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define f first\n#define s second\n#define mp make_pair\n#define pi M_PI\n#define inf 1<<30\n#define eps (1e-11)\n#define equals(a,b) (fabs((a)-(b))<eps)\nusing namespace std;\n\nclass Point{\npublic:\n  double x,y;\n  Point(double x=0,double y=0):x(x),y(y){}\n\n  Point operator+(Point p){ return Point(x+p.x,y+p.y);}\n  Point operator-(Point p){ return Point(x-p.x,y-p.y);}\n  Point operator*(double k){ return Point(x*k,y*k);}\n  Point operator/(double k){ return Point(x/k,y/k);}\n  bool operator<(Point p)const{ return (x!=p.x ? x<p.x : y<p.y);}\n  bool operator==(Point p)const{ return fabs(x-p.x)<eps && fabs(y-p.y)<eps;}\n\n  double abs(){ return sqrt(norm());}\n  double norm(){ return (x*x+y*y);}\n};\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\nclass Circle{\npublic:\n  Point c;\n  double r;\n  Circle(Point c=Point(),double r=0.0):c(c),r(r){}\n};\n\ndouble norm(Vector a){ return (a.x*a.x+a.y*a.y);}\ndouble abs(Vector a){ return sqrt(norm(a));}\n\nint intersect(Circle a,Circle b){\n  double dis=abs(a.c-b.c),sumr=a.r+b.r,minr=min(a.r,b.r),maxr=max(a.r,b.r);\n  if((sumr-dis)<-eps)return 4;\n  if(equals(sumr,dis))return 3;\n  if((minr-dis)<-eps)return 2;\n  if(equals(dis+minr,maxr))return 1;\n  return 0;\n}\n\nint main()\n{\n  Circle c1,c2;\n\n  cin>>c1.c.x>>c1.c.y>>c1.r;\n  cin>>c2.c.x>>c2.c.y>>c2.r;\n\n  cout<<intersect(c1,c2)<<endl;\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <stack>\n#include <math.h>\n\nusing namespace std;\n\nstruct Point{\n\tdouble x,y;\n};\n\nint main(){\n\n\tdouble c1x,c1y,c1r,c2x,c2y,c2r,dist;\n\n\tscanf(\"%lf %lf %lf\",&c1x,&c1y,&c1r);\n\tscanf(\"%lf %lf %lf\",&c2x,&c2y,&c2r);\n\n\tdist = sqrt((c1x-c2x)*(c1x-c2x)+(c1y-c2y)*(c1y-c2y));\n\n\tif(dist > c1r + c2r){\n\t\tprintf(\"4\\n\");\n\t}else if(fabs(dist - (c1r+c2r)) < 0.00000001){\n\t\tprintf(\"3\\n\");\n\t}else{\n\t\tif(c1r > c2r){\n\t\t\tif(dist < c1r){\n\t\t\t\tif(fabs(c1r-(dist+c2r)) < 0.00000001){\n\t\t\t\t\tprintf(\"1\\n\");\n\t\t\t\t}else{\n\t\t\t\t\tif(dist < (c1r-c2r)){\n\t\t\t\t\t\tprintf(\"0\\n\");\n\t\t\t\t\t}else{\n\t\t\t\t\t\tprintf(\"2\\n\");\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}else{\n\t\t\t\tprintf(\"2\\n\");\n\t\t\t}\n\n\t\t}else{\n\t\t\tif(dist < c2r){\n\t\t\t\tif(fabs(c2r-(dist+c1r)) < 0.00000001){\n\t\t\t\t\tprintf(\"1\\n\");\n\t\t\t\t}else{\n\t\t\t\t\tif(dist < (c2r-c1r)){\n\t\t\t\t\t\tprintf(\"0\\n\");\n\t\t\t\t\t}else{\n\t\t\t\t\t\tprintf(\"2\\n\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tprintf(\"2\\n\");\n\t\t\t}\n\t\t}\n\n\t}\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n#define fi first\n#define se second\n#define mp make_pair\n#define pb push_back\n#define rep(i, a, b) for(int i = (a); i < (b); ++i)\n#define per(i, a, b) for(int i = (b) - 1; i >= (a); --i)\n#define sz(a) (int)a.size()\n#define de(c) cout << #c << \" = \" << c << endl\n#define dd(c) cout << #c << \" = \" << c << \" \"\n#define all(a) a.begin(), a.end()\n#define pw(x) (1ll<<(x))\n#define endl \"\\n\"\ntypedef long long ll;\ntypedef double db;\ntypedef pair<int, int> pii;\ntypedef vector<int> vi;\n\ntypedef db T;\nconst db eps = 1e-9 , pi = acosl(-1.);\nint sgn(T x){return (x>eps)-(x<-eps);}\nstruct P{\n  T x,y; P(){} P(T x,T y):x(x),y(y){}\n  P operator - (const P&b) const {return P(x-b.x,y-b.y);}\n  P operator + (const P&b) const {return P(x+b.x,y+b.y);}\n  T operator * (const P&b) const {return x*b.x+y*b.y;}\n  T operator / (const P&b) const {return x*b.y-y*b.x;}\n  P operator * (const T&k) const {return P(x*k,y*k);}\n  P operator / (const T&k) const {return P(x/k,y/k);}\n\tbool operator < (const P&b) const {return sgn(x-b.x)?x<b.x:y<b.y;}\n\tbool operator == (const P&b) const{return !sgn(x-b.x)&&!sgn(y-b.y);}\n\tP rot90(){return P(-y,x);}\n};\nT norm(P a){return a*a;}\nT abs(P a) {return sqrtl(norm(a));}\nP proj(P p,P a,P b){return (b-a)*((p-a)*(b-a)/norm(b-a))+a;}\nP reflect(P p,P a,P b){return proj(p,a,b)*2-p;}\nT cross(P o,P a,P b){return (a-o)/(b-o);}\nint crossOp(P o,P a,P b){return sgn(cross(o,a,b));}\nbool onPS(P p,P s,P t){return sgn((t-s)/(p-s))==0&&sgn((p-s)*(p-t))<=0;}\nstruct L{ P s,t;L(){} L(P s,P t):s(s),t(t){}};\nP insLL(L a,L b){ // line x line\n\tP s = a.s - b.s , v = a.t - a.s , w = b.t - b.s;\n\tdb k1 = s / w , k2 = w / v;\n\tif(sgn(k2) == 0) return abs(b.s - a.s) < abs(b.t - a.s) ? b.s : b.t;\n\treturn a.s + v * (k1 / k2);\n}\nbool isSS(L a,L b){ // seg x seg , replace x->y to accelerate\n\tT c1=(a.t-a.s)/(b.s-a.s),c2=(a.t-a.s)/(b.t-a.s);\n\tT c3=(b.t-b.s)/(a.s-b.s),c4=(b.t-b.s)/(a.t-b.s);\n\treturn sgn(c1) * sgn(c2) <= 0 && sgn(c3) * sgn(c4) <= 0 &&\n\t\tsgn(max(a.s.x,a.t.x) - min(b.s.x,b.t.x)) >= 0 &&\n\t\tsgn(max(b.s.x,b.t.x) - min(a.s.x,a.t.x)) >= 0 &&\n\t\tsgn(max(a.s.y,a.t.y) - min(b.s.y,b.t.y)) >= 0 &&\n\t\tsgn(max(b.s.y,b.t.y) - min(a.s.y,a.t.y)) >= 0;\n}\ndb disPL(P p,L a){return fabs((a.t-a.s)/(p-a.s)) / abs(a.t-a.s);}\ndb disPS(P p,L a){ // p x seg dis\n\tif(sgn((a.t-a.s)*(p-a.s)) == -1) return abs(p-a.s);\n\tif(sgn((a.s-a.t)*(p-a.t)) == -1) return abs(p-a.t);\n\treturn disPL(p,a);\n}\ndb disSS(L a,L b){ // seg x seg dis\n\tif(isSS(a,b)) return 0;\n\treturn min(min(disPS(a.s,b),disPS(a.t,b)),min(disPS(b.s,a),disPS(b.t,a)));\n}\ntypedef vector<P> polygon;\npolygon convex(polygon A){ // counter-clockwise , < : <=180 , <= : <180\n  int n=sz(A),m=0;\n  polygon B;B.resize(n<<1);\n  sort(all(A));\n  rep(i,0,n){\n    while(m > 1 && sgn((B[m-1]-B[m-2])/(A[i]-B[m-2]))<0) --m;\n    B[m++]=A[i];\n  }\n  int k = m;\n  per(i,0,n-1){\n    while(m > k && sgn((B[m-1]-B[m-2])/(A[i]-B[m-2]))<0) --m;\n    B[m++]=A[i];\n  }\n  B.resize(m);\n  if(sz(B) > 1) B.pop_back();\n  return B;\n}\nT area(polygon A) { // multiple 2 with integer type\n\tT res=0;\n\trep(i,0,sz(A)) res+=A[i]/(A[(i+1)%sz(A)]);\n\treturn fabs(res) / 2;\n}\nbool isconvex(polygon A){ // counter-clockwise\n\tbool ok=1;int n=sz(A);\n\trep(i,0,2) A.pb(A[i]);\n\trep(i,0,n) ok&=((A[i+1]-A[i])/(A[i+2]-A[i]))>=0;\n\treturn ok;\n}\nint inPpolygon(P p,polygon A){ // -1 : on , 0 : out , 1 : in\n\tint res=0;\n\trep(i,0,sz(A)){\n\t\tP u=A[i],v=A[(i+1)%sz(A)];\n\t\tif(onPS(p,u,v)) return -1;\n\t\tT cross = sgn((v-u)/(p-u)) , d1 = sgn(u.y-p.y) , d2 = sgn(v.y-p.y);\n\t\tif(cross > 0 && d1 <= 0 && d2 > 0) ++res;\n\t\tif(cross < 0 && d2 <= 0 && d1 > 0) --res;\n\t}\n\treturn res != 0;\n}\nT diameter(polygon A) { // longest distance\n  int n=sz(A);if(n <= 1) return 0;\n  int l=0,r=0;rep(i,1,n) (A[i]<A[l])&&(l=i),(A[r]<A[i])&&(r=i);\n  db res=abs(A[l]-A[r]);int i=l,j=r;\n  do (++((A[(i+1)%n]-A[i])/(A[(j+1)%n]-A[j])>=0?j:i))%=n,\n    res=max(res,abs(A[i]-A[j]));\n  while(i!=l||j!=r);\n  return res;\n}\npolygon convexCut(polygon A,P s,P t){ // counter-clockwise , left hand of st\n\tint n=sz(A);\n\tpolygon B;\n\trep(i,0,n){\n\t\tP u=A[i],v=A[(i+1)%n];\n\t\tint d1 = sgn((t-s)/(u-s)) , d2 = sgn((t-s)/(v-s));\n\t\tif(d1 >= 0) B.pb(u);\n\t\tif(d1 * d2 < 0) B.pb(insLL(L(u,v),L(s,t)));\n\t}\n\treturn B;\n}\nnamespace NearestPoints{\n  T solve(int l,int r,vector<P>&p){\n    if(l == r) return 1e100;\n    int m=(l+r)>>1;\n    T Xm = p[m].x , lim = min(solve(l,m,p) , solve(m+1,r,p));\n    inplace_merge(p.begin()+l,p.begin()+m+1,p.begin()+r+1,[&](P a,P b){return a.y<b.y;});\n    vector<P> V;\n    rep(i,l,r+1) if(fabs(p[i].x - Xm) <= lim) V.pb(p[i]);\n    rep(i,0,sz(V)) rep(j,i+1,sz(V)){\n      if(fabs(V[j].y - V[i].y) >= lim) break;\n      T dis = abs(V[i]-V[j]);\n      lim = min(lim,dis);\n    }\n    return lim;\n  }\n  T solve(vector<P> A){\n    sort(all(A),[&](P a,P b){return a.x<b.x;});\n    return solve(0,sz(A)-1,A);\n  }\n}\nstruct C{\n\tP o;T r;C(){} C(P o,T r):o(o),r(r){}\n\tbool operator == (const C&b) const {return o==b.o&&sgn(r-b.r)==0;}\n};\nint relCC(C A,C B){\n\tT dis = abs(A.o - B.o);\n\tif(sgn(dis - (A.r + B.r)) == 1) return 4;\n\tif(sgn(dis - (A.r + B.r)) == 0) return 3;\n\tif(sgn(dis - fabs(A.r - B.r)) == 1) return 2;\n\tif(sgn(dis - fabs(A.r - B.r)) == 0) return 1;\n\treturn 0;\n}\n\nC o[2];\nP p[2];\ndb r[2];\n\nint main() {\n\tstd::ios::sync_with_stdio(0);\n\tstd::cin.tie(0);\n\t//\tfreopen(\"a.in\", \"r\", stdin);\n\t//\tfreopen(\"a.out\", \"w\", stdout);\n\tcout << setiosflags(ios::fixed);\n\tcout << setprecision(10);\n\trep(i, 0, 2) {\n\t\tcin >> p[i].x >> p[i].y >> r[i];\n\t\to[i] = C(p[i], r[i]);\n\t}\n\tcout << relCC(o[0], o[1]) << endl;\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<iomanip>\n#include<cmath>\n#include<vector>\n#include<algorithm>\n\nusing namespace std;\n\nconst double EPS = 1e-10;\nbool equals(double a, double b){ return (fabs(a) - fabs(b)) < EPS;};\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nstatic const int NOTCROSS = 4;\nstatic const int CIRCUMSCRIBED = 3; \nstatic const int INTERSECT = 2;\nstatic const int INSCRIBED = 1;\nstatic const int INCLUDE = 0;\n\nclass Point{\npublic:\n\tdouble x, y;\n\t\n\tPoint(double x = 0, double y = 0): x(x), y(y) {}\n\tPoint(const Point &p) { x = p.x; y = p.y;};\n\t\n\tPoint operator + (const Point &p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (const Point &p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (const double &a) { return Point(x * a, y * a); }\n\tPoint operator / (const double &a) { return Point(x / a, y / a); }\n\t\n\tPoint & operator = (const Point& p) {x = p.x; y = p.y; return *this;};\n\tPoint & operator += (const Point& p) {x += p.x; y += p.y; return *this;};\n\tPoint & operator -= (const Point& p) {x -= p.x; y -= p.y; return *this;};\n\tPoint & operator *= (const Point& p) {x *= p.x; y *= p.y; return *this;};\n\tPoint & operator /= (const Point& p) {x /= p.x; y /= p.y; return *this;};\n\t\n\tbool operator < (const Point &p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\t\n\tbool operator > (const Point &p) const {\n\t\treturn x != p.x ? x > p.x : y > p.y;\n\t}\n\t\n\tbool operator == (const Point &p) const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n\t\n\tdouble abs() { return sqrt(norm()); };\n\tdouble norm() { return x * x + y * y;};\n};\n\ntypedef Point Vector;\n\n\ndouble norm(Vector a){\n\treturn a.x * a.x + a.y * a.y;\n}\n\ndouble abs(Vector a){\n\treturn sqrt(norm(a));\n}\n\ndouble dot(Vector a, Vector b){\n\treturn a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b){\n\treturn a.x * b.y - a.y * b.x;\n}\n\nstruct Segment{\n\tPoint p1, p2;\n};\n\ntypedef Segment Line;\n\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0): c(c), r(r) {}\n};\n\ntypedef vector<Point> Polygon;\n\n\n\nbool isOrthogonal(Vector a, Vector b){\n\treturn equals(dot(a,b), 0.0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2){\n\treturn isOrthogonal(a1 - a2, b1 - b2);\n}\n\nbool isOrthogonal(Segment s1, Segment s2){\n\treturn equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n\nbool isParallel(Vector a, Vector b){\n\treturn equals(cross(a, b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2){\n\treturn isParallel(a1 - a2, b1 - b2);\n}\n\nbool isPrallel(Segment s1, Segment s2){\n\treturn equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n\nint ccw(Point p0, Point p1, Point p2){\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif(cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif(cross(a, b) < -EPS) return CLOCKWISE;\n\tif(dot(a, b) < - EPS) return ONLINE_BACK;\n\tif(a.norm() < b.norm()) return ONLINE_FRONT;\n\t\n\treturn ON_SEGMENT;\n}\n\nbool intersect(Point p1, Point p2, Point p3, Point p4){\n\treturn (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 && ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\n\nbool intersect(Segment s1, Segment s2){\n\treturn intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\nint intersect(Circle c1, Circle c2){\n\tdouble dis = abs(c1.c - c2.c);\n\t\n\tif(dis > c1.r + c2.r + EPS) return NOTCROSS;\n\tif(fabs(dis - c1.r - c2.r) < EPS) return CIRCUMSCRIBED;\n\tif(dis > fabs(c1.r - c2.r) + EPS) return INTERSECT;\n\tif(fabs(dis - fabs(c1.r - c2.r)) < EPS) return INSCRIBED;\n\treturn INCLUDE;\n}\n\ndouble getDistace(Point a, Point b){\n\treturn abs(a - b);\n}\n\ndouble getDistanceLP(Line l, Point p){\n\treturn abs(cross(l.p2 - l.p1, p - l.p1)) / abs(l.p2 - l.p1);\n}\n\ndouble getDistanceSP(Segment s, Point p){\n\tif(dot(s.p2 - s.p1, p - s.p1) < 0.0) return abs(p - s.p1);\n\tif(dot(s.p1 - s.p2, p - s.p2) < 0.0) return abs(p - s.p2);\n\treturn getDistanceLP(s, p);\n}\n\ndouble getDistance(Segment s1, Segment s2){\n\tif(intersect(s1, s2)) return 0.0;\n\treturn min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)), min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\nPoint getCrosPoint(Segment s1, Segment s2){\n\tVector base = s2.p2 - s2.p1;\n\tdouble d1 = abs(cross(base, s1.p1 - s2.p1));\n\tdouble d2 = abs(cross(base, s1.p2 - s2.p1));\n\tdouble t = d1 / (d1 + d2);\n\treturn s1.p1 + (s1.p2 - s1.p1) * t;\n}\n\n\n\nsigned main(){\n\tcin.tie(0);\n\tios::sync_with_stdio(false);\n\tcout<<fixed<<setprecision(10);\n\t\n\tCircle c1, c2;\n\tint ans;\n\t\n\tcin>>c1.c.x>>c1.c.y>>c1.r;\n\tcin>>c2.c.x>>c2.c.y>>c2.r;\n\t\n\tcout<<intersect(c1, c2)<<endl;;\n\t\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define lb long double\n#define eps 1e-10\nusing namespace std;\nstruct Po{lb x,y;};\nstruct circ{Po x;lb r;}c1,c2;\nvoid get(Po &x){scanf(\"%Lf %Lf\",&x.x,&x.y);}\nPo operator -(Po x,Po y){return (Po){x.x-y.x,x.y-y.y};}\nlb que(Po x){return sqrtl(x.x*x.x+x.y*x.y);}\nint main(){\n\tget(c1.x);scanf(\"%Lf\",&c1.r);\n\tget(c2.x);scanf(\"%Lf\",&c2.r);\n\tlb dis=que(c1.x-c2.x);\n\tif (dis>c1.r+c2.r+eps) puts(\"4\");\n\telse if (fabs(dis-c1.r-c2.r)<eps)puts(\"3\");\n\telse if (dis>fabs(c1.r-c2.r)+eps)puts(\"2\");\n\telse if (fabs(dis-fabs(c1.r-c2.r))<eps) puts(\"1\");\n\telse puts(\"0\");\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\n#include<cmath>\n#include<algorithm>\n#include<iomanip>\nusing namespace std;\nconst double EPS=1e-10;\n\nbool equals(double a,double b)\n{\n\treturn a>b?a-b<EPS:b-a<EPS;\n}\n\nclass Point\n{\npublic:\n\tdouble x;\n\tdouble y;\n\tPoint(double inx=0.0,double iny=0.0):x(inx),y(iny){}\n\tPoint operator+(const Point &p){return Point(x+p.x,y+p.y);}\n\tPoint operator-(const Point &p){return Point(x-p.x,y-p.y);}\n\tPoint operator*(const double k){return Point(x*k,y*k);}\n\tPoint operator/(const double k){return Point(x/k,y/k);}\n\tPoint operator=(const Point &p){x=p.x;y=p.y;return *this;}\n\tbool operator<(const Point &p)const{return x!=p.x?x<p.x:y<p.y;}\n\tbool operator==(const Point &p)const{return equals(x,p.x)&&equals(y,p.y);}\n\tdouble norm()\n\t{\n\t\treturn x*x+y*y;\n\t}\n\tdouble abs()\n\t{\n\t\treturn sqrt(norm());\n\t}\n};\n\ntypedef Point Vector;\n\nclass Segment\n{\npublic:\n\tPoint p1;\n\tPoint p2;\n\tVector getvector()\n\t{\n\t\treturn p2-p1;\n\t}\n};\n\ntypedef Segment Line;\n\nclass Circle\n{\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point inc=Point(),double inr=0.0):c(inc),r(inr){}\n};\n\ntypedef vector<Point> Polygon;\n\ndouble dot(Vector a,Vector b)\n{\n\treturn a.x*b.x+a.y*b.y;\n}\n\ndouble cross(Vector a,Vector b)\n{\n\treturn a.x*b.y-a.y*b.x;\n}\nconst int counter_clockwise=1;\nconst int clockwise=-1;\nconst int on_segment=0;\nconst int online_back=2;\nconst int online_front=-2;\n\ndouble norm(Vector a)\n{\n\treturn a.x*a.x+a.y*a.y;\n}\n\ndouble abs(Vector a)\n{\n\treturn sqrt(norm(a));\n}\n\nbool isorthogonal(Vector a,Vector b)\n{\n\treturn equals(dot(a,b),0.0);\n}\n\nbool isorthogonal(Point a1,Point a2,Point b1,Point b2)\n{\n\treturn isorthogonal(a1-a2,b1-b2);\n}\n\nbool isorthogonal(Segment s1,Segment s2)\n{\n\treturn equals(dot(s1.getvector(),s2.getvector()),0.0);\n}\n\nbool isparallel(Vector a,Vector b)\n{\n\treturn equals(cross(a,b),0.0);\n}\n\nbool isparallel(Point a1,Point a2,Point b1,Point b2)\n{\n\treturn isparallel(a1-a2,b1-b2);\n}\n\nbool isparallel(Segment s1,Segment s2)\n{\n\treturn equals(cross(s1.getvector(),s2.getvector()),0.0);\n}\n\nPoint project(Segment s,Point p)\n{\n\tVector base=s.getvector();\n\tdouble r=dot(p-s.p1,base)/norm(base);\n\treturn s.p1+base*r;\n}\n\nPoint reflect(Segment s,Point p)\n{\n\treturn project(s,p)*2.0-p;//p+(project(s,p)-p)*2.0\n}\n\ndouble getdistance(Point a,Point b)\n{\n\treturn abs(a-b);\n}\n\ndouble getdistancelp(Line l,Point p)//Line,Point\n{\n\tdouble s=abs(cross(l.p2-l.p1,p-l.p1));\n\treturn s/abs(l.getvector());\n}\n\ndouble getdistancesp(Segment s,Point p)\n{\n\tif(dot(s.getvector(),p-s.p1)<0.0)return abs(p-s.p1);\n\telse if(dot(s.p1-s.p2,p-s.p2)<0.0)return abs(p-s.p2);\n\telse return getdistancelp(s,p);\n}\n\nint ccw(Point p0,Point p1,Point p2)\n{\n\tVector a=p1-p0;\n\tVector b=p2-p0;\n\tif(cross(a,b)>EPS)return counter_clockwise;\n\telse if(cross(a,b)<-EPS)return clockwise;\n\telse if(dot(a,b)<-EPS)return online_back;\n\telse if(a.norm()<b.norm())return online_front;\n\telse return on_segment;\n}\n\nbool intersect(Point p1,Point p2,Point p3,Point p4)\n{\n\treturn ccw(p1,p2,p3)*ccw(p1,p2,p4)<=0&&ccw(p3,p4,p1)*ccw(p3,p4,p2)<=0;\n}\n\nbool intersect(Segment s1,Segment s2)\n{\n\treturn intersect(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n\ndouble getdistance(Segment s1,Segment s2)\n{\n\tif(intersect(s1,s2))return 0.0;\n\telse return min(min(getdistancesp(s1,s2.p1),getdistancesp(s1,s2.p2)),\n\t\t\tmin(getdistancesp(s2,s1.p1),getdistancesp(s2,s1.p2)));\n}\n\nPoint getcrosspoint(Segment s1,Segment s2)\n{\n\tVector base=s2.getvector();\n\tdouble d1=abs(cross(base,s1.p1-s2.p1));\n\tdouble d2=abs(cross(base,s1.p2-s2.p1));\n\tdouble t=d1/(d1+d2);\n\treturn s1.p1+s1.getvector()*t;\n}\n\npair<Point,Point> getcrosspoint(Circle c,Line l)\n{\n\tVector pr=project(l,c.c);\n\tVector e=l.getvector()/abs(l.getvector());\n\tdouble base=sqrt(c.r*c.r-norm(pr-c.c));\n\treturn make_pair(pr+e*base,pr-e*base);\n}\n\ndouble arg(Vector p)\n{\n\treturn atan2(p.y,p.x);\n}\n\nPoint polar(double r,double theta)\n{\n\treturn Point(r*cos(theta),r*sin(theta));\n}\n\npair<Point,Point> getcrosspoint(Circle c1,Circle c2)\n{\n\tdouble d=abs(c2.c-c1.c);\n\tdouble a=acos((c1.r*c1.r+d*d-c2.r*c2.r)/(2.0*c1.r*d));\n\tdouble t=arg(c2.c-c1.c);\n\treturn make_pair(c1.c+polar(c1.r,t+a),c1.c+polar(c1.r,t-a));\n}\ndouble area(Polygon p)\n{\n\tint n=p.size();\n\tdouble sum=0.0;\n\tfor(int i=0;i<n;i++)sum+=0.5*cross(p[i],p[(i+1)%n]);\n\treturn sum<0.0?-sum:sum;\n}\nint intersect(Circle c1,Circle c2)\n{\n\tdouble d=abs(c2.c-c1.c);\n\tif(equals(d,c1.r+c2.r))return 3;\n\telse if(d>c1.r+c2.r)return 4;\n\telse if(equals(d,abs(c1.r-c2.r)))return 1;\n\telse if(d>abs(c1.r-c2.r))return 2;\n\telse return 0;\n}\n\nint main() {\n\tCircle c1,c2;\n\tcin>>c1.c.x>>c1.c.y>>c1.r>>c2.c.x>>c2.c.y>>c2.r;\n\tcout<<intersect(c1,c2)<<endl;\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define EPS 1e-10\n#define PI 3.141592653589793238\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n#define rep(i,n) for(int i=0;i<n;++i)\ntypedef long long ll;\nusing namespace std;\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\n//Intercsect Circle & Circle\nstatic const int ICC_SEPERATE = 4;\nstatic const int ICC_CIRCUMSCRIBE = 3;\nstatic const int ICC_INTERSECT = 2;\nstatic const int ICC_INSCRIBE = 1;\nstatic const int ICC_CONTAIN = 0;\n\n// 点\nstruct Point {\n    double x,y;\n    Point(){}\n    Point(double x, double y) : x(x),y(y){}\n    Point operator+(Point p) {return Point(x+p.x, y+p.y);}\n    Point operator-(Point p) {return Point(x-p.x, y-p.y);}\n    Point operator*(double k){return Point(x*k,y*k);}\n    Point operator/(double k){return Point(x/k,y/k);}\n    double norm(){return x*x+y*y;}\n    double abs(){sqrt(norm());}\n    bool operator == (const Point &p) const {return equals(x,p.x)&&equals(y,p.y);}\n    bool operator < (const Point &p) const {\n        return x!=p.x?x<p.x:y<p.y;\n        //grid-point only\n        //return !equals(x,p.x)?x<p.x:!equals(y,p.y)?y<p.y:0;\n    }\n};\n\ntypedef Point P;\ntypedef vector<Point> Polygon;\n\ndouble norm(P a){return a.x*a.x+a.y*a.y;}\ndouble abs(P a){return sqrt(norm(a));}\n\n// 線分\nstruct Segment {\n    Point p1,p2;\n    Segment(){}\n    Segment(Point p1, Point p2):p1(p1),p2(p2){}\n};\n\ntypedef Segment Line;\n\nstruct Circle {\n    Point c;\n    double r;\n    Circle(){}\n    Circle(Point c, double r):c(c),r(r){}\n};\n\n// 法線ベクトル\nPoint normal(Point p){return Point(-p.y,p.x);}\n\n// 内積\ndouble dot(Point a, Point b) {return a.x*b.x + a.y*b.y;}\n\n// 外積\ndouble cross(Point a, Point b) {return a.x*b.y-a.y*b.x;}\n// 2直線の直行判定\nbool is_orthogonal(Point a1, Point a2, Point b1, Point b2) {\n    return equals(dot(a1-a2, b1-b2), 0.0);\n}\n// 2直線の平行判定\nbool is_parallel(Point a1, Point a2, Point b1, Point b2) {\n    return equals(cross(a1-a2, b1-b2), 0.0);\n}\n// 点cが直線ab上にあるかないか\nbool is_point_on_INF_line(Point a, Point b, Point c) {\n    return equals(cross(b-a,c-a), 0.0);\n}\n// 点cが線分ab上にあるかないか\nbool is_point_on_LIMITED_line(Point a, Point b, Point c) {\n    return (Point(a-c).abs()+Point(c-b).abs() < Point(a-b).abs() + EPS);\n}\n// 直線と点の距離\ndouble distance_l_p(Point a, Point b, Point c) {return abs(cross(b-a, c-a)) / (b-a).abs();}\n\n// 点a,bを端点とする線分と点cとの距離\ndouble distance_ls_p(Point a, Point b, Point c) {\n    if (dot(b-a, c-a) < EPS) return (c-a).abs();\n    if (dot(a-b, c-b) < EPS) return (c-b).abs();\n    return abs(cross(b-a, c-a)) / (b-a).abs();\n}\n\n// 点が線分のどちら側にあるかを計算\nint ccw(Point p0,Point p1,Point p2) {\n    P a = p1-p0;\n    P b = p2-p0;\n    if(cross(a,b) > EPS) return COUNTER_CLOCKWISE;\n    if(cross(a,b) < -EPS) return CLOCKWISE;\n    if(dot(a,b) < -EPS) return ONLINE_BACK;\n    if(a.norm()<b.norm()) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\n// a1,a2を端点とする線分とb1,b2を端点とする線分の交差判定\nbool intersectSS(Point p1, Point p2, Point p3, Point p4) {\n    return (ccw(p1,p2,p3)*ccw(p1,p2,p4) <= 0&&ccw(p3,p4,p1)*ccw(p3,p4,p2) <= 0 );\n}\n\n// a1,a2を端点とする線分とb1,b2を端点とする線分の交差判定\nbool intersectSS(Segment s1, Segment s2) {\n    return intersectSS(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n\n// 多角形と線分の交差判定\nbool intersectPS(Polygon p,Segment l) {\n    int n=p.size();\n    for(int i=0;i<n;i++)\n    if(intersectSS(Segment(p[i],p[(i+1)%n]),l)) return 1;\n    return 0;\n}\n\n// 円と円の交差判定(共通接線の数)\nint intersectCC(Circle c1,Circle c2) {\n    if(c1.r<c2.r) swap(c1,c2);\n    double d=abs(c1.c-c2.c);\n    double r=c1.r+c2.r;\n    if(equals(d,r)) return ICC_CIRCUMSCRIBE;\n    if(d>r) return ICC_SEPERATE;\n    if(equals(d+c2.r,c1.r)) return ICC_INSCRIBE;\n    if(d+c2.r<c1.r) return ICC_CONTAIN;\n    return ICC_INTERSECT;\n}\n\nint main() {\n    double x0,y0,r0,x1,y1,r1;\n    cin>>x0>>y0>>r0>>x1>>y1>>r1;\n    Circle c0(Point(x0,y0),r0),c1(Point(x1,y1),r1);\n    cout<<intersectCC(c0,c1)<<endl;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define rep(i,n) for(int i=0;(i)<(n);++(i))\nusing namespace std;\n\n// Description: ????????????\n// Verifyed: various problem\nusing namespace placeholders;\nusing R = long double;\nconst R EPS = 1e-9L; // [-1000,1000]->EPS=1e-8 [-10000,10000]->EPS=1e-7\ninline int sgn(const R& r) {return (r > EPS) - (r < -EPS);}\ninline R sq(R x) {return sqrt(max(x, 0.0L));}\n\nconst R INF = 1E40L;\nconst R PI = acos(-1.0L);\nusing P = complex<R>;\nusing L = struct {P s, t;};\nusing VP = vector<P>;\nusing C = struct {P c; R r;};\n\n#define at(a,i) (a[(i + a.size()) % a.size()])\n\nauto& operator >> (istream& is, P& p) { R x, y; is >> x >> y, p = P(x, y); return is;}\nauto& operator << (ostream& os, P& p) { os << real(p) << \" \" << imag(p); return os;}\n\nnamespace std {\nbool operator <  (const P& a, const P& b) { return sgn(real(a - b)) ? real(a - b) < 0 : sgn(imag(a - b)) < 0;}\nbool operator == (const P& a, const P& b) { return sgn(real(a - b)) == 0 && sgn(imag(a - b)) == 0;}\n}\n\ninline R dot(P o, P a, P b) {return real(conj(a - o) * (b - o));}\ninline R det(P o, P a, P b) {return imag(conj(a - o) * (b - o));}\ninline P vec(L l) {return l.t - l.s;}\nauto sdot = bind(sgn, bind(dot, _1, _2, _3));\nauto sdet = bind(sgn, bind(det, _1, _2, _3));\n\n//projection verify AOJ CGL_1_A\nP proj(L l, P p) { R u = real((p - l.s) / vec(l)); return (1 - u) * l.s + u * l.t;}\n\n// vertical parallel\n// verified: AOJ CGL_2_A\nbool vertical(L a, L b) {return sdot(0, vec(a), vec(b)) == 0;}\nbool parallel(L a, L b) {return sdet(0, vec(a), vec(b)) == 0;}\nbool eql(L a, L b) { return parallel(a, b) and sdet(a.s, a.t, b.s) == 0;}\n\n// crossing determination\n// verified: AOJ CGL_2_B\nbool iss(L a, L b) {\n\tint sa = sdet(a.s, a.t, b.s) * sdet(a.s, a.t, b.t);\n\tint sb = sdet(b.s, b.t, a.s) * sdet(b.s, b.t, a.t);\n\treturn max(sa, sb) < 0;\n}\n\n// crossing point\n// verified: AOJ CGL_2_C\nP cross(L a, L b) {\n\tR u = det(a.s, b.s, b.t) / det(0, vec(a), vec(b));\n\treturn (1 - u) * a.s + u * a.t;\n}\n\n// distance\n// verified: AOJ CGL_2_D\nR dsp(L l, P p) {\n\tP h = proj(l, p);\n\tif (sdot(l.s, l.t, p) <= 0) h = l.s;\n\tif (sdot(l.t, l.s, p) <= 0) h = l.t;\n\treturn abs(p - h);\n}\n\nR dss(L a, L b) {return iss(a, b) ? 0 : min({dsp(a, b.s), dsp(a, b.t), dsp(b, a.s), dsp(b, a.t)});}\n\n// Polygon\n\n// area\n// verified: AOJ 1100 CGL_3_A\nR area(const VP& pol) {\n\tR sum = 0.0;\n\trep(i, pol.size()) sum += det(0, at(pol, i), at(pol, i + 1));\n\treturn abs(sum / 2.0L);\n}\n\n// convex_polygon determination\n// verified: CGL_3_B\nbool is_convex(const VP& pol) {\n\trep(i, pol.size())if (sdet(at(pol, i), at(pol, i + 1), at(pol, i + 2)) < 0) return false;\n\treturn true;\n}\n\n// polygon realation determination  in  2 on 1 out 0???(possible non-convex)\n// verified: AOJ CGL_3-C\nint in_polygon(const VP& pol, const P& p) {\n\tint res = 0;\n\tauto simag = [](const P & p) {return sgn(imag(p));};\n\trep(i, pol.size()) {\n\t\tP a = at(pol, i), b = at(pol, i + 1);\n\t\tif (sdet(p, a, b) == 0 and sdot(p, a, b) <= 0) return 1;\n\t\tbool f = simag(p - a) >= 0, s = simag(p - b) < 0;\n\t\tif (simag(b - a)*sdet(a, b, p) == 1 and f == s) res += (2 * f - 1);\n\t}\n\treturn res ? 2 : 0;\n}\n\n// polygon realation determination???(possible non-convex)\n// verified: not AOJ 2514\nbool in_polygon(const VP& pol, const L& l) {\n\tVP check = {l.s, l.t};\n\trep(i, pol.size()) {\n\t\tL edge = {at(pol, i), at(pol, i + 1)};\n\t\tif (iss(l, edge)) check.emplace_back(cross(l, edge));\n\t}\n\n\tauto cmp_x = [](P a, P b)->bool{\n\t\tint sr = sgn(real(a - b)), si = sgn(imag(a - b));\n\t\treturn sr ? sr < 0 : si < 0;\n\t};\n\n\tsort(begin(check), end(check), cmp_x);\n\trep(i, check.size() - 1) {\n\t\tP m = (at(check, i) + at(check, i + 1)) / 2.0L;\n\t\tif (in_polygon(pol, m) == false) return false;\n\t}\n\treturn true;\n}\n\n// convex_cut\n// verified: AOJ CGL_4_C\nVP convex_cut(const VP& pol, const L& l) {\n\tVP res;\n\trep(i, pol.size()) {\n\t\tP a = at(pol, i), b = at(pol, i + 1);\n\t\tint da = sdet(l.s, l.t, a), db = sdet(l.s, l.t, b);\n\t\tif (da >= 0) res.emplace_back(a);\n\t\tif (da * db < 0) res.emplace_back(cross({a, b}, l));\n\t}\n\treturn res;\n}\n\n// farthest point pair Verify AOJ CGL_4_B\nR fpp(VP pol) {\n\tint n = pol.size(), i = 0, j = 0;\n\tif (n <= 2) return abs(pol[0] - pol[1]);\n\tR res = 0.0;\n\n\tauto cmp_x = [](P a, P b)->bool{\n\t\tint sr = sgn(real(a - b)), si = sgn(imag(a - b));\n\t\treturn sr ? sr < 0 : si < 0;\n\t};\n\n\trep(k, n) {\n\t\tif (!cmp_x(pol[i], pol[k]))i = k;\n\t\tif (cmp_x(pol[j], pol[k]))j = k;\n\t}\n\n\tint si = i, sj = j;\n\twhile (i != sj || j != si) {\n\t\tres = max(res, abs(pol[i] - pol[j]));\n\t\tif (sdet(0, vec(L{at(pol, i), at(pol, i + 1)}), vec(L{at(pol, j), at(pol, j + 1)})) < 0)\n\t\t\ti = (i + 1) % n;\n\t\telse\n\t\t\tj = (j + 1) % n;\n\t}\n\treturn res;\n}\n\n// closest point pair Verify AOJ CGL_5_A\nR iscp(VP a, int flag = 1) {\n\tconst int n = a.size(), m = n / 2;\n\tif (n <= 1) return INF;\n\n\tauto cmp_x = [](P a, P b)->bool{\n\t\tint sr = sgn(real(a - b)), si = sgn(imag(a - b));\n\t\treturn sr ? sr < 0 : si < 0;\n\t};\n\n\tif (flag) sort(begin(a), end(a), cmp_x);\n\n\tVP b(begin(a), begin(a) + m), c(begin(a) + m, end(a));\n\tR x = real(a[m]), d = min(iscp(b, 0), iscp(c, 0));\n\n\n\tauto cmp_y = [](P a, P b)->bool{\n\t\tint sr = sgn(real(a - b)), si = sgn(imag(a - b));\n\t\treturn si ? si < 0 : sr < 0;\n\t};\n\n\tsort(begin(a), end(a), cmp_y);\n\tdeque<P> e;\n\n\tfor (auto &p : a) {\n\t\tif (abs(real(p) - x) >= d) continue;\n\n\t\tfor (auto &q : e) {\n\t\t\tif (imag(p - q) >= d) break;\n\t\t\td = min(d, abs(p - q));\n\t\t}\n\t\te.push_front(p);\n\t}\n\treturn d;\n}\n\n// Circle // verified: AOJ 1183\nenum RCC {OUT = 2, ON_OUT = 1, ISC = 0, ON_IN = -1, IN = -2};\nint rcc(C a, C b) { R d = abs(a.c - b.c); return sgn(d - a.r - b.r) + sgn(d - abs(a.r - b.r));}\n\n// circle crossing determination\nbool iisc(C c, P p, int end = 0) {return sgn(abs(p - c.c) - c.r) <= -end;}\nbool ics(C c, L s, int end = 0) {return sgn(dsp(s, c.c) - c.r) <= -end;}\nbool icsc(C c, L l, int end = 0) {\n\treturn ics(c, l) and sgn(max(abs(l.s - c.c), abs(l.t - c.c)) - c.r) <= 0;\n}\n\n// common area between circles\nR area(C a, C b) {\n\tint r = rcc(a, b);\n\tif (r >= ON_OUT) return 0.0L;\n\tif (r <= ON_IN) return min(norm(a.r), norm(b.r)) * PI;\n\tR d = abs(b.c - a.c), rc = (norm(d) + norm(a.r) - norm(b.r)) / (2.0 * d);\n\tR t = acos(rc / a.r), p = acos((d - rc) / b.r);\n\treturn norm(a.r) * t + norm(b.r) * p - d * a.r * sin(t);\n}\n\n// cross point between circle and line\n// verified: AOJ CGL_7_D\nP cir(C c, R t) {return c.c + polar(c.r, t);}\nVP cross(C c, L l) {\n\tP h = proj(l, c.c);\n\tP e = polar(sq(norm(c.r) - norm(h - c.c)), arg(vec(l)));\n\treturn VP{h - e, h + e};\n}\n\n// cross point between circles\n// verified: AOJ CGL_7_E\nVP cross(C a, C b) {\n\tP d = b.c - a.c;\n\tP w = (norm(d) + norm(a.r) - norm(b.r)) / (2.0L * norm(d)) * d;\n\treturn cross(a, {a.c + w, a.c + w + 1il * d});\n}\n\n// circle tangent\n// verified: AOJ CGL_7_F\nL tan(C c, P p) {return L{p, p + 1il * (p - c.c)};}\n\nP helper(C c, P d, R r, P j) {\n\tP tmp = sq(norm(d) - norm(r)) * j;\n\tP dir = (r + tmp) / norm(d) * d;\n\treturn c.c + c.r * dir;\n}\n\nVP contact(C c, P p) {\n\tVP ret;\n\tP d = p - c.c;\n\tfor (P j : { -1il, 1il}) ret.emplace_back(helper(c, d, c.r, j));\n\tsort(begin(ret), end(ret));\n\tret.erase(unique(begin(ret), end(ret)), end(ret));\n\treturn ret;\n}\n\n// circle tangent\n// Verified: AOJ CGL_7_G\nVP contact(C a, C b) {\n\tVP ret;\n\tP d = b.c - a.c;\n\tfor (int s : { -1, 1}) {\n\t\tif (rcc(a, b) >= s) {\n\t\t\tfor (P j : { -1i, 1i}) {\n\t\t\t\tR r = a.r + s * b.r;\n\t\t\t\tret.emplace_back(helper(a, d, r, j));\n\t\t\t}\n\t\t}\n\t}\n\tsort(begin(ret), end(ret));\n\tret.erase(unique(begin(ret), end(ret)), end(ret));\n\treturn ret;\n}\n\n// common area of circle and polygon\nR area(R r, P a, P b) {\n\treturn sgn(abs((a + b) / 2.0l) - r) <= 0 ? det(0, a, b) / 2.0l : norm(r) * arg(b - a) / 2.0l;\n}\n\nR area(C c, VP pol) {\n\tR res = 0;\n\trep(i, pol.size()){\n\t\tR r = c.r;\n\t\tP a = at(pol, i) - c.c , b = at(pol, i + 1) - c.c;\n\t\tif (sgn(min({r, abs(a), abs(b), abs(b - a)})) == 0) continue;\n\n\t\tVP isc = cross(C{0.0l, r}, L{a, b});\n\t\tif (sdot(a, isc[0], isc[1]) <= 0 and sdot(b, isc[0], isc[1]) <= 0) \n\t\t\tres += area(r, a, b);\n\t\telse \n\t\t\tres += area(r, a, isc[0]) + area(r, isc[0], isc[1]) + area(r, isc[1], b);\n\t}\n\treturn res;\n}\nint main(void){\n\tC a,b;\n\tcin >> a.c >> a.r >> b.c >> b.r;\n\tcout << rcc(a,b)+2\t<< endl;\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cmath>\nusing namespace std;\nstruct Circle { long double x, y, r; };\nint main() {\n\tCircle p, q;\n\tcin >> p.x >> p.y >> p.r;\n\tcin >> q.x >> q.y >> q.r;\n\tlong double dist = sqrt((p.x - q.x)*(p.x - q.x) + (p.y - q.y)*(p.y - q.y));\n\tif (dist > p.r + q.r)cout << \"4\" << endl;\n\telse if (dist == p.r + q.r) {\n\t\tcout << \"3\" << endl;\n\t}\n\telse if (p.r <= q.r) {\n\t\tif (p.r + dist == q.r)cout << \"1\" << endl;\n\t\tif (p.r + dist < q.r)cout << \"0\" << endl;\n\t\tif (p.r + dist > q.r)cout << \"2\" << endl;\n\t}\n\telse {\n\t\tif (q.r + dist == p.r)cout << \"1\" << endl;\n\t\tif (q.r + dist < p.r)cout << \"0\" << endl;\n\t\tif (q.r + dist > p.r)cout << \"2\" << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<math.h>\n#include<stdlib.h>\nusing namespace std;\n\nint main() {\n\tint c1x, c2x, c1y, c2y, c1r, c2r;\n\t\n\tcin >> c1x >> c1y >> c1r;\n\tcin >> c2x >> c2y >> c2r;\n\n\tdouble dist;\n\n\tdist = sqrt((c1x - c2x)*(c1x - c2x) + (c1y - c2y)*(c1y - c2y));\n\n\tif (dist > c1r + c2r)\tcout << \"4\" << endl;\n\telse if (dist == c1r + c2r)\tcout << \"3\" << endl;\n\telse if (dist == abs(c1r - c2r))\tcout << \"1\" << endl;\n\telse if (dist < abs(c1r - c2r))\tcout << \"0\" << endl;\n\telse cout << \"2\" << endl;\n\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\nconst double EPS = 1e-8;\nconst double INF = 1e12;\nconst double PI = acos(-1);\n\nusing Point = complex<double>;\nusing Polygon = vector<Point>;\n\ninline int sgn(const double &a) { return (a < -EPS ? -1 : (a > EPS ? 1 : 0)); }\n\ninline bool eq(const Point &a, const Point &b) { return abs(a - b) < EPS; }\n\nnamespace std {\ninline bool operator<(const Point &a, const Point &b) {\n    if (sgn(a.real() - b.real()))\n        return sgn(a.real() - b.real()) < 0;\n    return sgn(a.imag() - b.imag()) < 0;\n}\n} // namespace std\n\ndouble dot(const Point &a, const Point &b) { return real(conj(a) * b); }\n\ndouble det(const Point &a, const Point &b) { return imag(conj(a) * b); }\n\nstruct Line {\n    Point p1, p2;\n\n    Line(Point p1 = Point(), Point p2 = Point()) : p1(p1), p2(p2) {}\n\n    bool operator<(const Line &rhs) const {\n        if (eq(p2, rhs.p2))\n            return p1 < rhs.p1;\n        return p2 < rhs.p2;\n    }\n    bool operator==(const Line &rhs) const {\n        return (eq(p1, rhs.p1) && eq(p2, rhs.p2)) ||\n               (eq(p1, rhs.p2) && eq(p2, rhs.p1));\n    }\n};\n\ninline Point curr(const Polygon &p, const int &i) { return p[i % p.size()]; }\n\ninline Point next(const Polygon &p, const int &i) {\n    return p[(i + 1) % p.size()];\n}\n\ninline Point prev(const Polygon &p, const int &i) {\n    return p[(i + p.size() - 1) % p.size()];\n}\n\nstruct Circle {\n    Point p;\n    double r;\n    Circle(Point p = Point(), double r = 0) : p(p), r(r) {}\n};\n\nint intersectCC(Circle a, Circle b) {\n    double dsq = norm(a.p - b.p);\n    double rs = (a.r + b.r) * (a.r + b.r);\n    double rd = (a.r - b.r) * (a.r - b.r);\n    if (sgn(dsq - rs) == 1) // 重なっていない\n        return 4;\n    else if (sgn(rs - dsq) == 0)\n        return 3;\n    else if (sgn(rs - dsq) > 0 && sgn(dsq - rd) > 0)\n        return 2;\n    else if (sgn(dsq - rd) == 0)\n        return 1;\n    else\n        return 0;\n}\n\nint main(){\n    double c1x, c1y, c1r, c2x, c2y, c2r;\n    cin >> c1x >> c1y >> c1r >> c2x >> c2y >> c2r;\n    cout << intersectCC(Circle(Point(c1x, c1y), c1r), Circle(Point(c2x, c2y), c2r)) << endl;\n\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define int long long\nusing namespace std;\n\nsigned main(){\n  \n  int cx1, cy1, r1;\n  int cx2, cy2, r2;\n  \n  cin>>cx1>>cy1>>r1;\n  cin>>cx2>>cy2>>r2;\n  \n  int X = cx1 - cx2, Y = cy1 - cy2;\n  \n  int d2 = X * X + Y * Y;\n  \n  int A = r1 + r2, B = r1 - r2;\n  int A2 = A * A, B2 = B * B;\n  \n  if( A2 < d2 ) cout<<4<<endl;\n  else if( A2 == d2 ) cout<<3<<endl;\n  else if( d2 == B2 ) cout<<1<<endl;\n  else if( d2 < B2 ) cout<<0<<endl;\n  else cout<<2<<endl;\n  \n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <string>\n#include <cstdio>\n#include <algorithm>\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\nusing namespace std;\n\n//点を表す構造体\nclass Point{\npublic:\n  double x, y;\n\n  Point(double x=0, double y=0){\n    this->x = x;\n    this->y = y;\n  }\n\n  Point operator+(const Point &seg2){\n    return Point(x+seg2.x, y+seg2.y);\n  }\n\n  Point operator-(const Point &seg2){\n    return Point(x-seg2.x, y-seg2.y);\n  }\n\n  Point operator*(const double k){\n    return Point(x*k, y*k);\n  }\n\n  Point &operator=(const Point &p){\n    x = p.x;\n    y = p.y;\n    return *this;\n  }\n\n  bool operator < (const Point &p) const{\n    return x != p.x? x<p.x : y<p.y;\n  }\n\n  bool operator == (const Point &p) const{\n    return equals(x, p.x) && equals(y, p.y);\n  }\n\n  static double getDistance(Point p1, Point p2){\n    return sqrt(pow(p2.x-p1.x, 2) + pow(p2.y-p1.y, 2));\n  }\n};\n\n//ベクトルを点の別表記でも表せるようにしておく\nclass Vector : public Point{\npublic:\n  Vector() : Point() {}\n\n  Vector(double x, double y) : Point(x, y) {}\n\n  Vector(Point p) : Point(){\n    x = p.x;\n    y = p.y;\n  }\n\n  double norm(){\n    return x*x + y*y;\n  }\n\n  double abs(){\n    return sqrt(norm());\n  }\n\n  static double dot(Vector a, Vector b){\n    return a.x*b.x + a.y*b.y;\n  }\n\n  static double cross(Vector a, Vector b){\n    return a.x*b.y - a.y*b.x;\n  }\n\n  static bool isOrthogonal(Vector a, Vector b){\n    return equals(dot(a, b), 0.0);\n  }\n\n  static bool isParallel(Vector a, Vector b){\n    return equals(cross(a, b), 0.0);\n  }\n};\n\n//線分(ベクトルを用いて)を表す構造体。両端の点が定義されている点に注意\nclass Segment{\npublic:\n  Point p1, p2;\n\n  Segment(Point p1, Point p2){\n    this->p1 = p1;\n    this->p2 = p2;\n    x = p2.x-p1.x;\n    y = p2.y-p1.y;\n  }\n\n  static bool isOrthogonal(Segment a, Segment b){\n    return equals(dot(a, b), 0.0);\n  }\n\n  static bool isParallel(Segment a, Segment b){\n    return equals(cross(a, b), 0.0);\n  }\n\nprivate:\n  int x, y;\n  static double dot(Segment a, Segment b){\n    return a.x*b.x + a.y*b.y;\n  }\n\n  static double cross(Segment a, Segment b){\n    return a.x*b.y - a.y*b.x;\n  }\n};\n\ntypedef Segment Line;\n\nclass Circle{\npublic:\n  Point c;\n  double r;\n  Circle(Point c = Point(), double r = 0.0): c(c), r(r){}\n  static int intersect(Circle c1, Circle c2){\n    double d = Point::getDistance(c1.c, c2.c);\n\n    int ans;\n    if(c1.r + c2.r < d) ans = 4;\n    else if(c1.r + c2.r ==d) ans = 3;\n    else if(fabs(c1.r-c2.r) < d && c1.r+c2.r > d) ans = 2;\n    else if(equals(fabs(c1.r-c2.r), d)) ans = 1;\n    else  ans = 0;\n\n    return ans;\n  }\n};\n\nclass Polygon{\npublic:\n  Point* ver;\n  int size;\n  Polygon(int size){\n    this->size = size;\n    ver = new Point[size];\n  }\n  ~Polygon(){\n    delete[] ver;\n  }\n\n  double area(){\n    double ans=0.0;\n\n    Vector a, b;\n    for(int i=0; i<size; i++){\n      a=ver[i%size]; b=ver[(i+1)%size];\n      ans += Vector::cross(a, b)/2;\n    }\n\n    return ans;\n  }\n\n  bool isConvex(){\n    bool isC = true;\n\n    for(int i=0; i<size; i++){\n      Vector a = ver[(i+1)%size]-ver[i%size], b = ver[(i+2)%size]-ver[i%size];\n      if(Vector::cross(a, b)<-EPS){\n        isC = false;\n        break;\n      }\n    }\n\n    return isC;\n  }\n};\n\nclass Tryangle : public Polygon{\npublic:\n  Tryangle(Point p1, Point p2, Point p3) : Polygon(3){\n    ver[0] = p1;\n    ver[1] = p2;\n    ver[3] = p3;\n  }\n  double area(){\n    Vector a = ver[1]-ver[0], b = ver[2]-ver[0];\n    return fabs(Vector::cross(a, b))/2.0;\n  }\n};\n\nstring ccw_str(Point p0, Point p1, Point p2){\n  //enum res {COUNTER_CLOCKWISE=0, CLOCKWISE, ONLINE_BACK, ONLINE_FRONT, ON_SEGMENT};\n  Vector a = p1-p0;\n  Vector b = p2-p0;\n  if(Vector::cross(a, b) > EPS) return \"COUNTER_CLOCKWISE\";\n  if(Vector::cross(a, b) < -EPS) return \"CLOCKWISE\";\n  if(Vector::dot(a, b) < -EPS) return \"ONLINE_BACK\";\n  if(a.norm() < b.norm()) return \"ONLINE_FRONT\";\n  return \"ON_SEGMENT\";\n}\n\nint ccw_int(Point p0, Point p1, Point p2){\n  enum res {COUNTER_CLOCKWISE=-1, CLOCKWISE=1, ONLINE_BACK=2, ONLINE_FRONT=-2, ON_SEGMENT=0};\n  Vector a = p1-p0;\n  Vector b = p2-p0;\n  if(Vector::cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n  if(Vector::cross(a, b) < -EPS) return CLOCKWISE;\n  if(Vector::dot(a, b) < -EPS) return ONLINE_BACK;\n  if(a.norm() < b.norm()) return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\n\nPoint project(Segment s, Point p){\n  Vector base = s.p2-s.p1;\n  double r = Vector::dot(p - s.p1, base) / base.norm();\n  return s.p1 + base*r;\n}\n\nPoint reflect(Segment s, Point p){\n  Point pro = project(s, p);\n  return p + (pro-p)*2.0;\n}\n\nbool intersect(Point p1, Point p2, Point p3, Point p4){\n  return ccw_int(p1, p2, p3)*ccw_int(p1, p2, p4)<=0 && ccw_int(p3, p4, p1)*ccw_int(p3, p4, p2)<=0;\n}\n\nbool intersect(Segment s1, Segment s2){\n  return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\nPoint crossPoint(Point p1, Point p2, Point p3, Point p4){\n  Vector base = p2-p1;\n  double d1 = fabs(Vector::cross(base, p4-p1))/fabs(base.abs());\n  double d2 = fabs(Vector::cross(base, p3-p1))/fabs(base.abs());\n  double t = d1/(d1+d2);\n  Point x = p4 + (p3-p4)*t;\n  return x;\n}\n\ndouble getDistance(Point p1, Point p2){\n  Vector base=p2-p1;\n  return base.abs();\n}\n\ndouble getDistance(Point p, Segment s){\n  double dot1, dot2;\n  Vector base = s.p2-s.p1;\n  dot1 = Vector::dot(base, p-s.p1);\n  dot2 = Vector::dot(base*(-1.0), p-s.p2);\n\n  double ans;\n  if(dot1<-EPS) ans = getDistance(s.p1, p);\n  else if(dot2<-EPS) ans = getDistance(s.p2, p);\n  else ans = fabs(Vector::cross(p-s.p1, base))/base.abs();\n\n  return ans;\n}\n\ndouble getDistance(Segment s1, Segment s2){\n  double ans;\n  if(intersect(s1, s2)) ans = 0.0;\n  else {\n    ans = min(min(getDistance(s1.p1, s2), getDistance(s1.p2, s2)),\n                  min(getDistance(s2.p1, s1), getDistance(s2.p2, s1)));\n  }\n  return ans;\n}\n\nint main(){\n  double c1x, c1y, c1r, c2x, c2y, c2r;\n  cin >> c1x >> c1y >> c1r >> c2x >> c2y >> c2r;\n  Circle c1(Point(c1x, c1y), c1r), c2(Point(c2x, c2y), c2r);\n\n  cout << Circle::intersect(c1, c2) << endl;\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define op operator\nstruct poi {\n\tint x, y;\n\tvoid r() { cin >> x >> y; }\n\tpoi op -(poi p) {\n\t\treturn {x - p.x, y - p.y};\n\t}\n\tint len2() { return x * x + y * y; }\n};\nint sqr(int x) { return x * x; }\n\nint solve(poi o1, int r1, poi o2, int r2) {\n\tint d = (o1 - o2).len2();\n\tif(d > sqr(r1 + r2)) return 4;\n\tif(d == sqr(r1 + r2)) return 3;\n\tif(d > sqr(r1 - r2)) return 2;\n\tif(d == sqr(r1 - r2)) return 1;\n\treturn 0;\n}\n\nint main() {\n\tpoi o1, o2; o1.r(); o2.r();\n\tint r1, r2; cin >> r1 >> r2;\n\tcout << solve(o1, r1, o2, r2) << '\\n';\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\nint main(){\n  double ax,ay,ar;\n  double bx,by,br;\n  \n  cin>>ax>>ay>>ar;\n  cin>>bx>>by>>br;\n\n  double dist = sqrt( (ax-bx)*(ax-bx) + (ay-by)*(ay-by) );\n\n  if( ar+br < dist ){\n    cout<<4<<endl;\n  }else if( ar+br == dist ){\n    cout<<3<<endl;\n  }else if( abs(ar-br) < dist ){\n    cout<<2<<endl;\n  }else if( abs(ar-br) == dist ){\n    cout<<1<<endl;\n  }else{\n    cout<<0<<endl;\n  }\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint main(){\n    int c1x, c1y, c1r, c2x, c2y, c2r;\n    scanf(\"%d %d %d\",&c1x,&c1y,&c1r);\n    scanf(\"%d %d %d\",&c2x,&c2y,&c2r);\n\n    if(pow(c1x-c2x,2)+pow(c1y-c2y,2) > pow(c1r+c2r,2)) cout << 4 << endl;\n    else if(pow(c1x-c2x,2)+pow(c1y-c2y,2) == pow(c1r+c2r,2)) cout << 3 << endl;\n    else if((pow(c1x-c2x,2)+pow(c1y-c2y,2) < pow(c1r+c2r,2)) && (pow(c1x-c2x,2)+pow(c1y-c2y,2) > pow(c1r-c2r,2))) cout << 2 << endl;\n    else if(pow(c1x-c2x,2)+pow(c1y-c2y,2) == pow(c1r-c2r,2)) cout << 1 << endl;\n    else cout << 0 << endl;\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> Point;\ntypedef pair<Point, Point> Line;\ntypedef vector<Point> Poly; \ntypedef pair<Point, double> Circle;\nconst double EPS = 1e-10;\n\n// 2つの円の衝突判定 (共通接線の個数)\nint intersection(Circle a, Circle b){\n    double d = abs(a.first - b.first);\n    if(a.second + b.second + EPS < d) return 4; // outside\n    if(b.second + d + EPS < a.second) return 0; // B in A\n    if(a.second + d + EPS < b.second) return 0; // A in B\n    if(abs(a.second + b.second - d) < EPS) return 3; // 外接\n    if(abs(b.second + d - a.second) < EPS) return 1; // 内接 B in A\n    if(abs(a.second + d - b.second) < EPS) return 1; // 内接 A in B\n    return 2; // 2点で交わる\n}\n\nint main(){\n    Circle a, b;\n    double x, y, r;\n    cin >> x >> y >> r;\n    a = {{x, y}, r};\n    cin >> x >> y >> r;\n    b = {{x, y}, r};\n    cout << intersection(a, b) << endl;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nnamespace LCY{\n\t#define double long double\n\tconst double EPS=1e-10;\n\tconst double Pi=acos(-1.0);\n\tinline int dcmp(double x){if(fabs(x)<EPS)return 0;return (x<0)?-1:1;}\n\tstruct Point{double x,y;Point(double _x=0,double _y=0){x=_x;y=_y;}};\n\tstruct Vector{double x,y;Vector(double _x=0,double _y=0){x=_x;y=_y;}};\n\t\n\tVector operator - (Point a,Point b){return Vector(a.x-b.x,a.y-b.y);}\n\tVector operator * (Vector a,double d){return Vector(a.x*d,a.y*d);}\n\tPoint operator + (Point a,Vector b){return Point(a.x+b.x,a.y+b.y);}\n\t\n\tinline double dot(Vector a,Vector b){return a.x*b.x+a.y*b.y;}\n\tinline double cross(Vector a,Vector b){return a.x*b.y-a.y*b.x;}\n\tinline double norm(Vector a){return dot(a,a);}\n\tinline double abs(Vector a){return std::sqrt(norm(a));}\n\t\n\tstruct Line{\n\t\tPoint p1,p2;\n\t\tLine(Point _p1=Point(0,0),Point _p2=Point(0,0)){p1=_p1;p2=_p2;}\n\t};\n\tinline bool is_parallel(Line l1,Line l2){return dcmp(cross(l2.p2-l2.p1,l1.p2-l1.p1))==0;}\n\tinline bool is_vertical(Line l1,Line l2){return dcmp(dot(l2.p2-l2.p1,l1.p2-l1.p1))==0;}\n\t\n\tPoint project(Line l,Point p){\n\t\tVector base=l.p2-l.p1;\n\t\tdouble r=dot(p-l.p1,base)/norm(base);\n\t\treturn l.p1+base*r;\n\t}\n\tPoint reflect(Line l,Point p){\n\t\tPoint q=project(l,p);\n\t\tVector v=p-q;v.x=-v.x;v.y=-v.y;\n\t\treturn q+v;\n\t}\n\tint ccw(Vector v1,Vector v2){\n\t\tif(dcmp(cross(v1,v2))>0)return 1;//COUNTER_CLOCKWISE\n\t\telse if(dcmp(cross(v1,v2))<0)return 2;//CLOCKWISE\n\t\telse{\n\t\t\tif(dcmp(dot(v1,v2))<0)return 3;//ONLINE_BACK\n\t\t\telse{\n\t\t\t\tif(dcmp(norm(v1)-norm(v2))<0)return 4;//ONLINE_FRONT\n\t\t\t\telse return 5;//ON_SEGMENT\n\t\t\t}\n\t\t}\n\t}\n\tinline bool is_inter(Line l1,Line l2){\n\t\tbool flag=1;\n\t\tint t1=ccw(l1.p2-l1.p1,l2.p1-l1.p1),t2=ccw(l1.p2-l1.p1,l2.p2-l1.p1);\n\t\tif(t1==5 || t2==5) return true;\n\t\telse if(t1==t2)return false;\n\t\telse if(t1>=3 && t2<=2) return false;\n\t\telse if(t1<=2 && t2>=3) return false;\n\t\tstd::swap(l1,l2);\n\t\tt1=ccw(l1.p2-l1.p1,l2.p1-l1.p1),t2=ccw(l1.p2-l1.p1,l2.p2-l1.p1);\n\t\tif(t1==5 || t2==5) return true;\n\t\telse if(t1==t2)return false;\n\t\telse if(t1>=3 && t2<=2) return false;\n\t\telse if(t1<=2 && t2>=3) return false;\n\t\treturn true;\n\t}\n\tinline Point line_intersection(Line l1,Line l2){\n\t\tif(is_parallel(l1,l2)) return Point(233,233);\n\t\tVector u=l1.p1-l2.p1,v=l1.p2-l1.p1,w=l2.p2-l2.p1;\n\t\tdouble t=cross(w,u)/cross(v,w);\n\t\treturn l1.p1+v*t;\n\t}\n\tinline Point segment_intersection(Line l1,Line l2){\n\t\tif(!is_inter(l1,l2)) return Point(233,233);\n\t\treturn line_intersection(l1,l2);\n\t}\n\tinline double line_point_distance(Line l,Point p){\n\t\treturn std::abs(cross(l.p2-l.p1,p-l.p1))/abs(l.p2-l.p1);\n\t}\n\tinline double segment_point_distance(Line l,Point p){\n\t\tif(dcmp(dot(l.p2-l.p1,p-l.p1))<0) return abs(p-l.p1);\n\t\tif(dcmp(dot(l.p1-l.p2,p-l.p2))<0) return abs(p-l.p2);\n\t\treturn line_point_distance(l,p);\n\t}\n\tinline double segment_distance(Line l1,Line l2){\n\t\t#define spd segment_point_distance\n\t\tif(is_inter(l1,l2))return 0.0;\n\t\treturn std::min(std::min(spd(l1,l2.p1),spd(l1,l2.p2)),std::min(spd(l2,l1.p1),spd(l2,l1.p2)));\n\t}\n\tdouble area(std::vector<Point> &Q){\n\t\tint n=Q.size();\n\t\tdouble ans=0;\n\t\tPoint o=Point(0.0,0.0);\n\t\tfor(int i=0;i<n;++i)ans+=cross(Q[i]-o,Q[(i+1)%n]-o)/2.0;\n\t\treturn ans;\n\t}\n\tdouble circumference(std::vector<Point> &Q){\n\t\tint n=Q.size();\n\t\tdouble ans=0;\n\t\tfor(int i=0;i<n;++i)ans+=abs(Q[i]-Q[(i+1)%n]);\n\t\treturn ans;\n\t}\n\tbool is_convex(std::vector<Point> &Q){\n\t\tint n=Q.size();\n\t\tPoint o=Point(0.0,0.0);\n\t\tfor(int i=0;i<n;++i){\n\t\t\tPoint lst=Q[(i+n-1)%n],now=Q[i],nxt=Q[(i+1)%n];\n\t\t\tif(ccw(now-lst,nxt-lst)==2)return false;\n\t\t}\n\t\treturn true;\n\t}\n\tint in_convex(std::vector<Point> &Q,Point p){\n\t\tint n=Q.size();\n\t\tPoint pp=Point(p.x+100000.0,p.y+Pi*100000.0);\n\t\tVector v=pp-p;\n\t\tint cnt=0;\n\t\tfor(int i=0;i<n;++i){\n\t\t\tPoint p1=Q[i],p2=Q[(i+1)%n];\n\t\t\tif(dcmp(cross(p1-p,p2-p))==0 && dcmp(dot(p1-p,p2-p))<=0)return 1;\n\t\t\tPoint x=line_intersection(Line(p,pp),Line(p1,p2));\n\t\t\tif(x.x==233 && x.y==233)continue;\n\t\t\tif(ccw(p1-x,p2-x)!=3)continue;\n\t\t\tif(dcmp(x.x-p.x)<0)continue;\n\t\t\tcnt++;\n\t\t}\n\t\treturn (cnt&1)?2:0;\n\t}\n\tbool cmp_x(Point a,Point b){return dcmp(a.x-b.x)<0||(dcmp(a.x-b.x)==0 && dcmp(a.y-b.y)<0);}\n\tbool cmp_y(Point a,Point b){return dcmp(a.y-b.y)<0||(dcmp(a.y-b.y)==0 && dcmp(a.x-b.x)>0);}\n\tstd::vector<Point> get_convex(std::vector<Point> &Q){\n\t\tstd::vector<Point> sta;\n\t\tsort(Q.begin(),Q.end(),cmp_y);\n\t\tint n=Q.size();\n\t\tfor(int i=0;i<n;++i){\n\t\t\twhile(sta.size()>=2 && dcmp(cross(sta[sta.size()-1]-sta[sta.size()-2],Q[i]-sta[sta.size()-2]))<0)sta.pop_back();\n\t\t\tsta.push_back(Q[i]);\n\t\t}\n\t\tint t=sta.size();\n\t\tfor(int i=n-2;i>=0;--i){\n\t\t\twhile(sta.size()>t && dcmp(cross(sta[sta.size()-1]-sta[sta.size()-2],Q[i]-sta[sta.size()-2]))<0)sta.pop_back();\n\t\t\tsta.push_back(Q[i]);\n\t\t}\n\t\tsta.pop_back();\n\t\treturn sta;\n\t}\n\tdouble diameter(std::vector<Point> &Q){\n\t\tif(Q.size()<=1)return 0;\n\t\tif(Q.size()==2)return abs(Q[1]-Q[0]);\n\t\tint i=0,j=0,n=Q.size();\n\t\tfor(int k=0;k<n;++k){\n\t\t\tif(cmp_x(Q[i],Q[k])) i=k;\n\t\t\tif(!cmp_x(Q[j],Q[k])) j=k;\n\t\t}\n\t\tdouble ans=0.0;\n\t\tint si=i,sj=j;\n\t\twhile(i!=sj || j!=si){\n\t\t\tans=std::max(ans,abs(Q[i]-Q[j]));\n\t\t\tif(dcmp(cross(Q[(i+1)%n]-Q[i],Q[(j+1)%n]-Q[j]))>0)j=(j+1)%n;\n\t\t\telse i=(i+1)%n;\n\t\t}\n\t\treturn ans;\n\t}\n\tdouble closest_pair(Point *Q,int n){\n\t\tif(n<=1)return 1e9;\n\t\tint m=n/2;\n\t\tdouble x=Q[m].x;\n\t\tdouble d=std::min(closest_pair(Q,m),closest_pair(Q+m,n-m));\n\t\tstd::vector<Point> q;\n\t\tint i=0,j=m;\n\t\twhile(i<m && j<n){\n\t\t\tif(cmp_y(Q[i],Q[j]))q.push_back(Q[i++]);\n\t\t\telse q.push_back(Q[j++]);\n\t\t}\n\t\twhile(i<m)q.push_back(Q[i++]);\n\t\twhile(j<n)q.push_back(Q[j++]);\n\t\tfor(int i=0;i<n;++i)Q[i]=q[i];\n\t\tq.clear();\n\t\t\n\t\tfor(int i=0;i<n;++i){\n\t\t\tif(dcmp(std::fabs(Q[i].x-x)-d)>=0)continue;\n\t\t\tfor(int j=q.size()-1;j>=0;--j){\n\t\t\t\td=std::min(d,abs(Q[i]-q[j]));\n\t\t\t\tif(dcmp(Q[i].y-q[j].y)-d>=0)break;\n\t\t\t}\n\t\t\tq.push_back(Q[i]);\n\t\t}\n\t\treturn d;\n\t}\n\t\n\tstruct Circle{Point o;double r;Circle(Point _o=0,double _r=0){o=_o;r=_r;}};\n\tinline int circle_ccw(Circle c1,Circle c2){\n\t\tif(dcmp(abs(c1.o-c2.o)-(c1.r+c2.r))>0) return 4;\n\t\tif(dcmp(abs(c1.o-c2.o)-(c1.r+c2.r))==0)return 3;\n\t\tif(c1.r<c2.r)std::swap(c1,c2);\n\t\tif(dcmp(abs(c1.o-c2.o)-(c1.r-c2.r))>0) return 2;\n\t\tif(dcmp(abs(c1.o-c2.o)-(c1.r-c2.r))==0)return 1;\n\t\treturn 0;\n\t}\n}\nusing namespace LCY;\nusing namespace std;\nPoint Q[1000005];\nint main(){\n\tPoint p1,p2;double r1,r2;cin>>p1.x>>p1.y>>r1>>p2.x>>p2.y>>r2;cout<<circle_ccw(Circle(p1,r1),Circle(p2,r2))<<endl;\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\n\n\n\nint main() {\n    float x1 = 0;\n    float y1 = 0;\n    float r1 = 7;\n\n    float x2 = 0;\n    float y2 = 0;\n    float r2 = 1;\n\n    std::cin >> x1 >> y1 >> r1;\n    std::cin >> x2 >> y2 >> r2;\n\n    float d = sqrt(pow((x1 - x2),2) + pow((y1 - y2),2)); // TODO: provide type safety\n\n    if((r1 + r2) < d){\n        std::cout << 4 << std::endl;\n    }\n    else if((r1 + r2) > d){\n        if(abs(r1 - r2) == d){\n            std::cout << 1 << std::endl;\n            return 0;\n        }else if(abs(r1 - r2) > d){\n            std::cout << 0 << std::endl;\n            return 0;\n        }\n        std::cout << 2 << std::endl;\n    }\n    else std::cout << 3 << std::endl;\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define f first\n#define s second\n#define mp make_pair\n#define pi M_PI\n#define inf 1<<30\n#define eps (1e-11)\n#define equals(a,b) (fabs((a)-(b))<eps)\nusing namespace std;\n\nclass Point{\npublic:\n  double x,y;\n  Point(double x=0,double y=0):x(x),y(y){}\n\n  Point operator+(Point p){ return Point(x+p.x,y+p.y);}\n  Point operator-(Point p){ return Point(x-p.x,y-p.y);}\n  Point operator*(double k){ return Point(x*k,y*k);}\n  Point operator/(double k){ return Point(x/k,y/k);}\n  bool operator<(Point p)const{ return (x!=p.x ? x<p.x : y<p.y);}\n  bool operator==(Point p)const{ return fabs(x-p.x)<eps && fabs(y-p.y)<eps;}\n\n  double abs(){ return sqrt(norm());}\n  double norm(){ return (x*x+y*y);}\n};\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\nclass Circle{\npublic:\n  Point c;\n  double r;\n  Circle(Point c=Point(),double r=0.0):c(c),r(r){}\n};\n\ndouble norm(Vector a){ return (a.x*a.x+a.y*a.y);}\ndouble abs(Vector a){ return sqrt(norm(a));}\n\nint intersect(Circle a,Circle b){\n  double dis=abs(a.c-b.c),sumr=a.r+b.r,minr=min(a.r,b.r),maxr=max(a.r,b.r);\n  if((sumr-dis)<-eps)return 4;\n  if(equals(sumr,dis))return 3;\n  if((maxr-(dis+minr))<-eps)return 2;\n  if(equals(dis+minr,maxr))return 1;\n  return 0;\n}\n\nint main()\n{\n  Circle c1,c2;\n\n  cin>>c1.c.x>>c1.c.y>>c1.r;\n  cin>>c2.c.x>>c2.c.y>>c2.r;\n\n  cout<<intersect(c1,c2)<<endl;\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint main(){\nint cx1 = 0;\nint cy1 = 0;\nint cx2 = 0;\nint cy2 = 0;\nint r1 = 0;\nint r2 = 0;\n\ncin>>cx1>>cy1>>r1;\ncin>>cx2>>cy2>>r2;\n\nint r_a = r1 + r2;\nint r_d = abs(r1 - r2);\nint dx = abs(cx1 - cx2);\nint dy = abs(cy1 - cy2);\n\ndouble dist = sqrt(dx*dx + dy*dy);\n\nif(dist > (double)r_a)\n{\n    cout << \"4\" << endl;\n}\n\nif(dist == (double)r_a)\n{\n    cout << \"3\" << endl;\n}\n\nif(dist < (double)r_a && dist > (double)r_d)\n{\n    cout << \"2\" << endl;\n}\n\nif(dist == (double)r_d)\n{\n    cout << \"1\" << endl;\n}\n\nif(dist < (double)r_d)\n{\n    cout << \"0\" << endl;\n}\n\nreturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define MST(a,b) memset(a,b,sizeof(a))\n#define pb push_back\n#define eb emplace_back\n#define rep(i,a,b) for(int i = a ; i < b ; ++i)\n#define per(i,a,b) for(int i = a ; i > b ; --i)\n#define ALL(v) v.begin(),v.end()\n#define ft first\n#define sd second\nusing namespace std;\n\ntypedef long long LL;\ntypedef pair<int,int> pii;\ntemplate<class T> void show(T *x,int len,int s = 0) {for(int i = s ; i < s+len-1 ; ++i) cerr << x[i] << ' ';cerr << x[s+len-1] << endl;}\nvoid debug() {cerr << endl;}\ntemplate <typename T, typename... Args> void debug(T x,Args... args) {cerr << x << ' ';debug(args...);}\n\nnamespace fast_IO{\n\tconst int maxbuff = 1<<17;\n\tchar ibuff[maxbuff],obuff[maxbuff];\n\tinline char Getchar(){\n\t    static char *p1=ibuff,*p2=ibuff;\n\t\tif(p1 == p2) {\n\t    \tp1 = ibuff;\n\t    \tp2 = ibuff+fread(ibuff,1,maxbuff,stdin);\n\t    \tif(p1 == p2) return -1;\n\t    }\n\t    return *p1++;\n\t}\n\n\tint optr = 0;\n\tinline void Putchar(char c) {\n\t\tif(optr == maxbuff) {fwrite(obuff,1,optr,stdout);optr = 0;}\n\t\tobuff[optr++] = c;\n\t}\n\n\tinline void Flush() {\n\t\tfwrite(obuff,1,optr,stdout);\n\t}\n\n\ttemplate<class T>\n\t\tinline int read(T &x) {\n\t\t\tx = 0;\n\t\t\tchar c = Getchar();\n\t\t\tif(c == EOF) return -1;\n\t\t\tfor( ; (c < '0' || c > '9') && c != EOF ; c = Getchar());\n\t\t\tif(c == EOF) return -1;\n\t\t\tfor( ; c >= '0' && c <= '9' ; c = Getchar()) x = x*10+c-'0';\n\t\t\treturn 0;\n\t\t}\n\n\ttemplate<class T>\n\t\tinline void write(const T &x,int tag = 0) {\n\t\t\tif(!x) {\n\t\t\t\tif(!tag) Putchar(x+'0');\n\t\t\t\treturn ;\n\t\t\t}\n\t\t\twrite(x/10,1);\n\t\t\tPutchar(x%10+'0');\n\t\t}\n\n\ttemplate<class T>\n\t\tinline void writeln(const T &x) {\n\t\t\twrite(x);Putchar('\\n');\n\t\t}\n\n\ttemplate<class T>\n\t\tinline void writesp(const T &x) {\n\t\t\twrite(x);Putchar(' ');\n\t\t}\n}\ntemplate<class T>\ninline void cmin(T &A,const T &B) {A = (A<B?A:B);}\ntemplate<class T>\ninline void cmax(T &A,const T &B) {A = (A>B?A:B);}\nint sqr(int x) {return x*x;}\nint main() {\n\t#ifdef LOCAL\n\t//freopen(\"input.txt\",\"r\",stdin);\n\t//freopen(\"output.txt\",\"w\",stdout);\n\t#endif\n\tint c1[4],c2[4];\n\tfor(int i = 1 ; i <= 3 ; ++i) cin >> c1[i];\n\tfor(int i = 1 ; i <= 3 ; ++i) cin >> c2[i];\n\tint dist = (c1[1]-c2[1])*(c1[1]-c2[1])+(c1[2]-c2[2])*(c1[2]-c2[2]);\n\tif(dist > sqr(c1[3]+c2[3])) puts(\"4\");\n\telse if(dist == sqr(c1[3]+c2[3])) puts(\"3\");\n\telse if(dist == sqr(c1[3]-c2[3])) puts(\"1\");\n\telse if(dist < sqr(c1[3]+c2[3]) && dist > sqr(c1[3]-c2[3])) puts(\"2\");\n\telse puts(\"0\");\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <algorithm>\n#include <functional>\n#include <vector>\n#include <utility>\n#include <cstring>\n#include <iomanip>\n#include <numeric>\n#include <cmath>\n#include <cassert>\n#include <complex>\nusing namespace std;\nusing ll = long long;\nconst int INF = 1<<30;\nconst int MOD = 1e9 + 7;\nconst double EPS = 1e-8;\nconst double PI = acos(-1);\ninline bool equals(double a, double b) { return abs(b - a) < EPS; }\n\nusing Point = complex<double>;\nnamespace std { bool operator < (const Point &a, const Point &b) { return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b); } }\ninline double dot(const Point &a, const Point &b) { return real(a) * real(b) + imag(a) * imag(b); }\ninline double cross(const Point &a, const Point &b) { return real(a) * imag(b) - imag(a) * real(b); }\n\nstruct Line\n{\n    Point a, b;\n    Line(Point a, Point b) : a(a), b(b) {}\n};\nstruct Segment : Line { Segment(Point a, Point b) : Line(a, b) {} };\nstruct Circle\n{\n    Point p; double r;\n    Circle(Point p, double r) : p(p), r(r) {}\n};\n\ninline bool isParallel(const Line &a, const Line &b) { return equals(cross(a.b - a.a, b.b - b.a), 0.0); }\ninline bool isOrthogonal(const Line &a, const Line &b) { return equals(dot(a.a - a.b, b.a - b.b), 0.0); }\ntemplate<typename T = Line>\ninline Point getProjection(const T &l, const Point &p)\n{\n    double t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n    return l.a + (l.a - l.b) * t;\n}\ninline Point getReflection(const Line &l, const Point &p) { return p + (getProjection(l, p) - p) * 2.0; }\n//位置関係\ninline int ccw(const Point &a, Point b, Point c)\n{\n    b = b - a, c = c - a;\n    if(cross(b, c) > EPS) return 1;\n    if(cross(b, c) < -EPS) return -1;\n    if(dot(b, c) < 0) return 2;\n    if(norm(b) < norm(c)) return -2;\n    return 0;\n}\n//点、直線、線分の交差\ninline bool isIntersect(const Line &l, const Point &p) { return abs(ccw(l.a, l.b, p)) != 1; }\ninline bool isIntersect(const Line &l, const Line &m) { return abs(cross(l.b - l.a, m.b - m.a)) > EPS || abs(cross(l.b - l.a, m.b - l.a)) < EPS; }\ninline bool isIntersect(const Segment &s, const Point &p) { return ccw(s.a, s.b, p) == 0; }\ninline bool isIntersect(const Line &l, const Segment &s) { return cross(l.b - l.a, s.a - l.a) * cross(l.b - l.a, s.b - l.a) < EPS; }\ninline bool isIntersect(const Segment &s, const Segment &t) { return ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 && ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0; }\n//距離\ninline double getDistance(const Point &a, const Point &b) { return abs(a - b); }\ninline double getDistance(const Line &l, const Point &p) { return abs(p - getProjection(l, p)); }\ninline double getDistance(const Segment &s, const Point &p)\n{\n    Point r = getProjection(s, p);\n    if(isIntersect(s, r)) return abs(r - p);\n    return min(abs(s.a - p), abs(s.b - p));\n}\ninline double getDistance(const Line &l, const Line &m) { return isIntersect(l, m) ? 0 : getDistance(l, m.a); }\ninline double getDistance(const Segment &s1, const Segment &s2)\n{\n    if(isIntersect(s1, s2)) return 0;\n    return min({getDistance(s1, s2.a), getDistance(s1, s2.b), getDistance(s2, s1.a), getDistance(s2, s1.b)});\n}\ninline double getDistance(const Line &l, const Segment &s)\n{\n    if(isIntersect(l, s)) return 0;\n    return min(getDistance(l, s.a), getDistance(l, s.b));\n}\ninline bool isIntersect(const Circle &c, const Point &p) { return abs(abs(p - c.p) - c.r) < EPS; }\ninline bool isIntersect(const Circle &c, const Line &l) { return getDistance(l, c.p) <= c.r + EPS; }\ninline int isIntersect(const Circle &c, const Segment &l)\n{\n    if(norm(getProjection(l, c.p) - c.p) - c.r * c.r > EPS) return 0;\n    auto d1 = abs(c.p - l.a), d2 = abs(c.p - l.b);\n    if(d1 < c.r + EPS && d2 < c.r + EPS) return 0;\n    if(d1 < c.r - EPS && d2 > c.r + EPS || d1 > c.r + EPS && d2 < c.r - EPS) return 1;\n    const Point h = getProjection(l, c.p);\n    if(dot(l.a - h, l.b - h) < 0) return 2;\n    return 0;\n}\n//２つの円の共通接線の数\ninline int isIntersect(Circle c1, Circle c2)\n{\n    if(c1.r < c2.r) swap(c1, c2);\n    double d = abs(c1.p - c2.p);\n    if(c1.r + c2.r < d) return 4; //離れている\n    if(equals(c1.r + c2.r, d)) return 3; //外接する\n    if(c1.r - c2.r < d) return 2;//交わる\n    if(equals(c1.r - c2.r, d)) return 1;//内接する\n    return 0;//どちらかが内包する\n}\n//交差する点\ninline Point getCrossPoint(const Line &l, const Line &m)\n{\n    double a = cross(l.b - l.a, m.b - m.a), b = cross(l.b - l.a, l.b - m.a);\n    if(equals(abs(a), 0.0) and equals(abs(b), 0.0)) return m.a;\n    return m.a + (m.b - m.a) * b / a;\n}\ninline Point getCrossPoint(const Segment &l, const Segment &m) { return getCrossPoint(Line(l), Line(m)); }\n\nsigned main(void)\n{\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    double x1, y1, r1; cin >> x1 >> y1 >> r1;\n    double x2, y2, r2; cin >> x2 >> y2 >> r2;\n    cout << isIntersect(Circle(Point(x1, y1), r1), Circle(Point(x2, y2), r2)) << endl;\n    return 0;\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdlib>\n#include <math.h>\nusing namespace std;\n\n\n/*void solve(){\n}*/\nint main(){\n\nint x1,y1,r1;\nint x2,y2,r2;\n\ncin>>x1>>y1>>r1;\ncin>>x2>>y2>>r2;\n\ndouble distance;\n\n\ndistance=sqrt( (x2-x1)*(x2-x1)+(y2-y1)*(y2-y1) );\nif(distance>r1+r2){\n    cout<<\"4\"<<endl;\n}\nelse if(distance==r1+r2){\n    cout<<\"3\"<<endl;\n}\nelse if(distance==abs(r2-r1)){\n    cout<<\"1\"<<endl;\n}\nelse if(distance<abs(r2-r1)){\n    cout<<\"0\"<<endl;\n}\nelse{\n    cout<<\"2\"<<endl;\n}\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "//#define NDEBUG\n#include \"bits/stdc++.h\"\n#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <unordered_set>\n#include <array>\n#include <random>\n#ifdef _MSC_VER\n#include <ppl.h>\n//#include <boost/multiprecision/cpp_dec_float.hpp>\n//#include <boost/multiprecision/cpp_int.hpp>\n//#include <boost/rational.hpp>\n//#include <opencv2/core.hpp>\n//#include <opencv2/imgproc.hpp>\n//#include <opencv2/highgui.hpp>\n//#else\n//#include <omp.h>\n#endif\n\n\nusing namespace std;\n\n#define DUMPOUT cerr\n#define dump(...) DUMPOUT<<\"  \";DUMPOUT<<#__VA_ARGS__<<\" :[\"<<__LINE__<<\":\"<<__FUNCTION__<<\"]\"<<endl;DUMPOUT<<\"    \";dump_func(__VA_ARGS__)\n\nusing uint = unsigned; using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using pdd = pair<double, double>; using pss = pair<string, string>;\ntemplate <typename _KTy, typename _Ty> ostream& operator << (ostream& o, const pair<_KTy, _Ty>& m) { o << \"{\" << m.first << \", \" << m.second << \"}\"; return o; }\ntemplate <typename _KTy, typename _Ty> ostream& operator << (ostream& o, const map<_KTy, _Ty>& m) { if (m.empty()) { o << \"{ }\"; return o; } o << \"{\" << *m.begin(); for (auto itr = ++m.begin(); itr != m.end(); itr++) { o << \", \" << *itr; } o << \"}\"; return o; }\ntemplate <typename _KTy, typename _Ty> ostream& operator << (ostream& o, const unordered_map<_KTy, _Ty>& m) { if (m.empty()) { o << \"{ }\"; return o; } o << \"{\" << *m.begin(); for (auto itr = ++m.begin(); itr != m.end(); itr++) { o << \", \" << *itr; } o << \"}\"; return o; }\ntemplate <typename _Ty> ostream& operator << (ostream& o, const vector<_Ty>& v) { if (v.empty()) { o << \"{ }\"; return o; } o << \"{\" << v.front(); for (auto itr = ++v.begin(); itr != v.end(); itr++) { o << \", \" << *itr; } o << \"}\"; return o; }\ntemplate <typename _Ty> ostream& operator << (ostream& o, const deque<_Ty>& v) { if (v.empty()) { o << \"{ }\"; return o; } o << \"{\" << v.front(); for (auto itr = ++v.begin(); itr != v.end(); itr++) { o << \", \" << *itr; } o << \"}\"; return o; }\ntemplate <typename _Ty> ostream& operator << (ostream& o, const set<_Ty>& s) { if (s.empty()) { o << \"{ }\"; return o; } o << \"{\" << *(s.begin()); for (auto itr = ++s.begin(); itr != s.end(); itr++) { o << \", \" << *itr; } o << \"}\"; return o; }\ntemplate <typename _Ty> ostream& operator << (ostream& o, const unordered_set<_Ty>& s) { if (s.empty()) { o << \"{ }\"; return o; } o << \"{\" << *(s.begin()); for (auto itr = ++s.begin(); itr != s.end(); itr++) { o << \", \" << *itr; }\to << \"}\"; return o; }\ntemplate <typename _Ty> ostream& operator << (ostream& o, const stack<_Ty>& s) { if (s.empty()) { o << \"{ }\"; return o; } stack<_Ty> t(s); o << \"{\" << t.top(); t.pop(); while (!t.empty()) { o << \", \" << t.top(); t.pop(); } o << \"}\";\treturn o; }\ntemplate <typename _Ty> ostream& operator << (ostream& o, const list<_Ty>& l) { if (l.empty()) { o << \"{ }\"; return o; } o << \"{\" << l.front(); for (auto itr = ++l.begin(); itr != l.end(); ++itr) { o << \", \" << *itr; } o << \"}\"; return o; }\ntemplate <typename _KTy, typename _Ty> istream& operator >> (istream& is, pair<_KTy, _Ty>& m) { is >> m.first >> m.second; return is; }\ntemplate <typename _Ty> istream& operator >> (istream& is, vector<_Ty>& v) { for (size_t t = 0; t < v.size(); t++) is >> v[t]; return is; }\ntemplate <typename _Ty> istream& operator >> (istream& is, deque<_Ty>& v) { for (size_t t = 0; t < v.size(); t++) is >> v[t]; return is; }\nnamespace aux { // print tuple\n  template<typename Ty, unsigned N, unsigned L> struct tp { static void print(ostream& os, const Ty& v) { os << get<N>(v) << \", \"; tp<Ty, N + 1, L>::print(os, v); } };\n  template<typename Ty, unsigned N> struct tp<Ty, N, N> { static void print(ostream& os, const Ty& v) { os << get<N>(v); } };\n}\n\ntemplate<typename... Tys> ostream& operator<<(ostream& os, const tuple<Tys...>& t) { os << \"{\"; aux::tp<tuple<Tys...>, 0, sizeof...(Tys) - 1>::print(os, t); os << \"}\"; return os; }\n\ntemplate<typename A, size_t N, typename T> inline void Fill(A(&array)[N], const T& val) { fill((T*)array, (T*)(array + N), val); }\n\ntemplate <typename ... Args>\nstd::string format(const std::string& fmt, Args ... args) {\n  size_t len = std::snprintf(nullptr, 0, fmt.c_str(), args ...);\n  std::vector<char> buf(len + 1);\n  std::snprintf(&buf[0], len + 1, fmt.c_str(), args ...);\n  return std::string(&buf[0], &buf[0] + len);\n}\n\nvoid dump_func() { DUMPOUT << endl; }\ntemplate <class Head, class... Tail> void dump_func(Head&& head, Tail&&... tail) { DUMPOUT << head; if (sizeof...(Tail) == 0) { DUMPOUT << \" \"; } else { DUMPOUT << \", \"; } dump_func(move(tail)...); }\n\n#define PI 3.14159265358979323846\n#define EPS 1e-8\n#define rep(t,n) for(int t=0;t<(n);++t)\n#define ALL(j) (j).begin(), (j).end()\n#define SZ(j) ((int)(j).size())\n#define fake false\n\nclass Timer {\npublic:\n  double t = 0;\n  Timer() {}\n  static double time() {\n#ifdef _MSC_VER\n    return __rdtsc() / 2.8e9;\n#else\n    unsigned long long a, d;\n    __asm__ volatile(\"rdtsc\"\n      : \"=a\"(a), \"=d\"(d));\n    return (d << 32 | a) / 2.8e9;\n#endif\n  }\n  void measure() { t = time() - t; }\n  double elapsedMs() { return (time() - t) * 1000.0; }\n} timer;\n\nstruct Xorshift {\n  uint64_t x = 88172645463325252LL;\n  unsigned next_int() {\n    x = x ^ (x << 7);\n    return x = x ^ (x >> 9);\n  }\n  unsigned next_int(unsigned mod) {\n    x = x ^ (x << 7);\n    x = x ^ (x >> 9);\n    return x % mod;\n  }\n  unsigned next_int(unsigned l, unsigned r) {\n    x = x ^ (x << 7);\n    x = x ^ (x >> 9);\n    return x % (r - l + 1) + l;\n  }\n  double next_double() {\n    return double(next_int()) / UINT_MAX;\n  }\n} rnd;\n\ntemplate<typename T>\nvoid shuffle_vector(vector<T>& v, Xorshift& rnd) {\n  int n = v.size();\n  for (int i = n - 1; i >= 1; i--) {\n    int r = rnd.next_int(i);\n    swap(v[i], v[r]);\n  }\n}\n\n\n\nnamespace geom {\n  constexpr double eps = 1e-8;\n\n  /* point */\n  struct Point {\n    double x, y;\n    Point() : x(0.0), y(0.0) {}\n    Point(double x, double y) : x(x), y(y) {}\n    Point operator+(const Point& p) const { return Point(this->x + p.x, this->y + p.y); }\n    Point operator-(const Point& p) const { return Point(this->x - p.x, this->y - p.y); }\n    Point operator-() const { return Point(-this->x, -this->y); }\n    Point& operator+=(const Point& p) { return *this = *this + p; }\n    Point& operator-=(const Point& p) { return *this = *this - p; }\n    bool operator==(const Point& p) const { return x == p.x && y == p.y; }\n    bool operator!=(const Point& p) const { return !(*this == p); }\n    bool operator<(const Point& p) const { return x == p.x ? y < p.y : x < p.x; }\n    bool operator<=(const Point& p) const { return *this == p || *this < p; }\n    bool operator>(const Point& p) const { return !(*this <= p); }\n    bool operator>=(const Point& p) const { return !(*this < p); }\n    double length() const { return std::sqrt(x * x + y * y); }\n    double length2() const { return x * x + y * y; }\n    double distance(const Point& p) const { return sqrt(pow(x - p.x, 2.0) + pow(y - p.y, 2.0)); }\n    friend std::ostream& operator<<(std::ostream& o, const Point& p) {\n      o << '(' << p.x << ',' << p.y << ')';\n      return o;\n    }\n    friend std::istream& operator>>(std::istream& i, Point& p) {\n      i >> p.x >> p.y;\n      return i;\n    }\n  };\n  \n  /* vector */\n  using Vector = Point;\n  double cross_product(const Vector& v1, const Vector& v2) {\n    return v1.x * v2.y - v2.x * v1.y;\n  }\n  double inner_product(const Vector& v1, const Vector& v2) {\n    return v1.x * v2.x + v1.y * v2.y;\n  }\n  enum struct ccw_t {\n    COUNTER_CLOCKWISE,\n    CLOCKWISE,\n    ONLINE_BACK,\n    ONLINE_FRONT,\n    ON_SEGMENT\n  };\n  ccw_t ccw(const Point& p0, const Point& p1, const Point& p2) {\n    Vector v1 = p1 - p0, v2 = p2 - p0;\n    if (cross_product(v1, v2) > eps) return ccw_t::COUNTER_CLOCKWISE;\n    if (cross_product(v1, v2) < -eps) return ccw_t::CLOCKWISE;\n    if (inner_product(v1, v2) < -eps) return ccw_t::ONLINE_BACK;\n    if (v1.length2() < v2.length2()) return ccw_t::ONLINE_FRONT;\n    return ccw_t::ON_SEGMENT;\n  }\n\n  /* line */\n  struct Line {\n    Point p1, p2;\n    Line() {}\n    Line(const Point& p1, const Point& p2) : p1(p1), p2(p2) {}\n    Line(double x1, double y1, double x2, double y2) : p1(Point(x1, y1)), p2(Point(x2, y2)) {}\n    Vector to_vector() const { return p2 - p1; }\n    Point projection(const Point& p) const {\n      Vector v12(p2 - p1);\n      double det = v12.length2();\n      double a = v12.y * p1.x - v12.x * p1.y, b = v12.y * p.y + v12.x * p.x;\n      double x = v12.y * a + v12.x * b, y = v12.y * b - v12.x * a;\n      return Point(x / det, y / det);\n    }\n    Point reflection(const Point& p) const {\n      Point proj = projection(p);\n      return proj + proj - p;\n    }\n    double distance(const Point& p) const {\n      return projection(p).distance(p);\n    }\n    bool is_parallel(const Line& l) const {\n      return abs(cross_product(this->to_vector(), l.to_vector())) < eps;\n    }\n    bool is_orthogonal(const Line& l) const {\n      return abs(inner_product(this->to_vector(), l.to_vector())) < eps;\n    }\n    Point intersection(const Line& l) const {\n      Point p0(this->p1), p1(this->p2), p2(l.p1), p3(l.p2);\n      Vector v01(p1 - p0), v23(p3 - p2);\n      double det = cross_product(v01, v23);\n      double a = v01.y * p0.x - v01.x * p0.y, b = v23.y * p2.x - v23.x * p2.y;\n      double x = v01.x * b - v23.x * a;\n      double y = v01.y * b - v23.y * a;\n      return Point(x / det, y / det);\n    }\n    friend std::ostream& operator<<(std::ostream& o, const Line& l) {\n      o << '(' << l.p1 << ',' << l.p2 << ')';\n      return o;\n    }\n    friend std::istream& operator>>(std::istream& i, Line& l) {\n      i >> l.p1 >> l.p2;\n      return i;\n    }\n  };\n\n  /* segment */\n  using Segment = Line;\n  bool is_intersect_segments(const Segment& s1, const Segment& s2) {\n    Vector v2 = s2.to_vector(), p1(s1.p1 - s2.p1), p2(s1.p2 - s2.p1);\n    if (cross_product(v2, p1) * cross_product(v2, p2) > eps) return false;\n    Vector v1 = s1.to_vector(), p3(s2.p1 - s1.p1), p4(s2.p2 - s1.p1);\n    if (cross_product(v1, p3) * cross_product(v1, p4) > eps) return false;\n    if (inner_product(s2.p1 - s1.p1, s2.p2 - s1.p1) < eps) return true;\n    if (inner_product(s2.p1 - s1.p2, s2.p2 - s1.p2) < eps) return true;\n    if (inner_product(s1.p1 - s2.p1, s1.p2 - s2.p1) < eps) return true;\n    if (inner_product(s1.p1 - s2.p2, s1.p2 - s2.p2) < eps) return true;\n    return false;\n  }\n  bool is_intersect_segment_line(const Segment s, const Line& l) {\n    if (l.is_parallel(s)) return false;\n    Vector vst = l.to_vector();\n    Point ps = l.p1;\n    return cross_product(vst, s.p1 - ps) * cross_product(vst, s.p2 - ps) < eps;\n  }\n  double segment_distance(const Segment& s, const Point& p) {\n    Point proj = s.projection(p);\n    if (ccw(s.p1, proj, s.p2) == ccw_t::ONLINE_FRONT) return p.distance(proj);\n    return min(p.distance(s.p1), p.distance(s.p2));\n  }\n  double segment_distance(const Segment& s1, const Segment& s2) {\n    if (is_intersect_segments(s1, s2)) return 0.0;\n    return min({\n      segment_distance(s1, s2.p1), segment_distance(s1, s2.p2),\n      segment_distance(s2, s1.p1), segment_distance(s2, s1.p2)\n      });\n  }\n\n  /* polygon */\n  using Polygon = std::vector<Point>;\n  double area(const Polygon& poly) {\n    if (poly.size() <= 2) return 0;\n    Point b(DBL_MAX, DBL_MAX);\n    for (const Point& p : poly) {\n      b.x = min(b.x, p.x); b.y = min(b.y, p.y);\n    }\n    b.x -= 1.0; b.y -= 1.0;\n    int n = (int)poly.size();\n    double area = 0.0;\n    for (int i = 0; i < n; i++) {\n      area += cross_product(poly[i] - b, poly[(i + 1) % n] - b) * 0.5;\n    }\n    return area;\n  }\n  bool is_convex(const Polygon& poly) {\n    if (poly.size() <= 2) return false;\n    int n = (int)poly.size();\n    for (int i = 0; i < n; i++) {\n      if (ccw(poly[i], poly[(i + 1) % n], poly[(i + 2) % n]) == ccw_t::CLOCKWISE) {\n        return false;\n      }\n    }\n    return true;\n  }\n  enum struct poly_t {\n    EXTERNAL = 0,\n    ON_SEGMENT = 1,\n    INTERNAL = 2\n  };\n  poly_t is_inside(const Point& p, const Polygon& poly) {\n    int n = (int)poly.size();\n    double rad = 0.0;\n    for (int i = 0; i < n; i++) {\n      const Point& p1 = poly[i];\n      const Point& p2 = poly[(i + 1) % n];\n      double d1 = p.distance(p1), d2 = p.distance(p2);\n      if (segment_distance(Segment(p1, p2), p) < eps) return poly_t::ON_SEGMENT;\n      Vector v1(p1 - p), v2(p2 - p);\n      double r = atan2(cross_product(v1, v2), inner_product(v1, v2));\n      rad += r;\n    }\n    return rad < eps ? poly_t::EXTERNAL : poly_t::INTERNAL;\n  }\n\n  /* convex hull */\n  using Hull = Polygon;\n  Hull convex_hull(std::vector<Point> points, bool strict = true) {\n    double e = strict ? eps : -eps;\n    std::sort(points.begin(), points.end());\n    int n = (int)points.size(), k = 0;\n    Hull hull(2 * n);\n    for (int i = 0; i < n; i++) {\n      while (k > 1 && cross_product(hull[k - 1] - hull[k - 2], points[i] - hull[k - 1]) < e) k--;\n      hull[k++] = points[i];\n    }\n    for (int i = n - 2, t = k; i >= 0; i--) {\n      while (k > t && cross_product(hull[k - 1] - hull[k - 2], points[i] - hull[k - 1]) < e) k--;\n      hull[k++] = points[i];\n    }\n    hull.resize(k - 1);\n    return hull;\n  }\n  double convex_diameter(const Hull& hull) {\n    int n = (int)hull.size();\n    if (n == 2) return hull.front().distance(hull.back());\n    int i = 0, j = 0;\n    for (int k = 0; k < n; k++) {\n      if (hull[k] < hull[i]) i = k;\n      if (hull[j] < hull[k]) j = k;\n    }\n    double d = 0.0;\n    int si = i, sj = j;\n    while (i != sj || j != si) {\n      d = max(d, hull[i].distance(hull[j]));\n      if (cross_product(hull[(i + 1) % n] - hull[i], hull[(j + 1) % n] - hull[j]) < 0.0) {\n        i = (i + 1) % n;\n      }\n      else {\n        j = (j + 1) % n;\n      }\n    }\n    return d;\n  }\n  std::pair<Hull, Hull> convex_cut(const Hull& hull, const Line& l) {\n    int n = (int)hull.size(), i = -1, j = -1;\n    Point pi, pj;\n    for (int k = 0; k < n; k++) {\n      Segment s(hull[k], hull[(k + 1) % n]);\n      if (is_intersect_segment_line(s, l)) {\n        if (cross_product(l.to_vector(), s.to_vector()) < 0) {\n          i = k;\n          pi = l.intersection(s);\n        }\n        else {\n          j = k;\n          pj = l.intersection(s);\n        }\n      }\n    }\n    if (i < 0) {\n      // no cut: 左か右か判定\n      if (cross_product(l.to_vector(), hull.front() - l.p1) > 0) {\n        // left\n        return std::make_pair(hull, Hull());\n      }\n      else {\n        return std::make_pair(Hull(), hull);\n      }\n    }\n    Hull left({ pi, pj }), right({ pj, pi });\n    for (int k = (j + 1) % n, e = (i + 1) % n; k != e; k = (k + 1) % n) {\n      if(left.back().distance(hull[k]) > eps) left.push_back(hull[k]);\n    }\n    for (int k = (i + 1) % n, e = (j + 1) % n; k != e; k = (k + 1) % n) {\n      if(right.back().distance(hull[k]) > eps) right.push_back(hull[k]);\n    }\n    if (left.front().distance(left.back()) < eps) left.pop_back();\n    if (right.front().distance(right.back()) < eps) right.pop_back();\n    return std::make_pair(left, right);\n  }\n\n  /* closest pair : 逐次構成法 */\n  double closest_pair_incremental(std::vector<Point> ps) {\n    using ll = long long;\n    using Grid = std::unordered_map<ll, std::vector<Point>>;\n    // for random\n    uint64_t x = 88172645463325252LL;\n    auto rnd = [&x](int mod) { x = x ^ (x << 7); x = x ^ (x >> 9); return unsigned(x % mod); };\n    // shuffle\n    int n = (int)ps.size();\n    for (int i = n - 1; i >= 1; i--) {\n      int j = (int)rnd(i);\n      std::swap(ps[i], ps[j]);\n    }\n    // set bounding box\n    double x_min = DBL_MAX, x_max = DBL_MIN;\n    double y_min = DBL_MAX, y_max = DBL_MIN;\n    for (const Point& p : ps) {\n      x_min = min(x_min, p.x); x_max = max(x_max, p.x);\n      y_min = min(y_min, p.y); y_max = max(y_max, p.y);\n    }\n    x_min -= eps; x_max += eps; y_min -= eps; y_max += eps;\n    // grid generator\n    double delta = ps[0].distance(ps[1]);\n    auto generate_grid = [&](int sz, double delta) {\n      ll h = (int)ceil((y_max - y_min) / delta);\n      ll w = (int)ceil((x_max - x_min) / delta);\n      Grid grid;\n      for (int i = 0; i < sz; i++) {\n        double x = ps[i].x, y = ps[i].y;\n        ll ix = (ll)floor((x - x_min) / delta);\n        ll iy = (ll)floor((y - y_min) / delta);\n        grid[iy * w + ix].push_back(ps[i]);\n      }\n      return std::make_tuple(h, w, std::move(grid)); \n    };\n    // 幅 delta のグリッド構築\n    ll h, w;\n    Grid grid;\n    tie(h, w, grid) = generate_grid(2, delta);\n    for (int k = 2; k < n; k++) {\n      // d_i = d(p_i, S_i) を計算\n      double x = ps[k].x, y = ps[k].y;\n      ll ix = (ll)floor((x - x_min) / delta);\n      ll iy = (ll)floor((y - y_min) / delta);\n      // 近傍のみ調べればいい\n      double ndelta = delta;\n      for (ll i = max(iy - 1, 0LL); i <= min(iy + 1, h - 1); i++) {\n        for (ll j = max(ix - 1, 0LL); j <= min(ix + 1, w - 1); j++) {\n          if (!grid.count(i * w + j)) continue;\n          for (const auto& p : grid[i * w + j]) {\n            ndelta = std::min(ndelta, ps[k].distance(p));\n          }\n        }\n      }\n      if (ndelta < delta) {\n        // update grid\n        delta = ndelta;\n        tie(h, w, grid) = generate_grid(k + 1, delta);\n      }\n      else {\n        // insert point\n        grid[iy * w + ix].push_back(ps[k]);\n      }\n    }\n    return delta;\n  }\n\n  /* closest pair : 篩法 */\n  double closest_pair_sieve(const std::vector<Point>& ps) {\n    using ll = long long;\n    using Grid = std::unordered_map<ll, std::vector<Point>>;\n    // init grid\n    Grid grid;\n    for (const Point& p : ps) grid[0].push_back(p);\n    // for random\n    uint64_t x = 88172645463325252LL;\n    auto rnd = [&x](int mod) { x = x ^ (x << 7); x = x ^ (x >> 9); return unsigned(x % mod); };\n    // set bounding box\n    double x_min = DBL_MAX, x_max = DBL_MIN;\n    double y_min = DBL_MAX, y_max = DBL_MIN;\n    for (const Point& p : ps) {\n      x_min = min(x_min, p.x); x_max = max(x_max, p.x); \n      y_min = min(y_min, p.y); y_max = max(y_max, p.y);\n    }\n    x_min -= eps; x_max += eps; y_min -= eps; y_max += eps;\n    // grid updator\n    auto update_grid = [&](const Grid& grid, double delta, bool erase_mode = true) {\n      int erased = 0;\n      ll h = (ll)ceil((y_max - y_min) / delta);\n      ll w = (ll)ceil((x_max - x_min) / delta);\n      Grid ngrid;\n      for (auto it = grid.begin(); it != grid.end(); ++it) {\n        for (const Point& p : it->second) {\n          ll ix = (ll)floor((p.x - x_min) / delta);\n          ll iy = (ll)floor((p.y - y_min) / delta);\n          ngrid[iy * w + ix].push_back(p);\n        }\n      }\n      if (erase_mode) {\n        // 孤立点の除去\n        auto it = ngrid.begin();\n        while (it != ngrid.end()) {\n          if (it->second.size() >= 2) { ++it; continue; }\n          ll pos = it->first, iy = pos / w, ix = pos % w;\n          // 8 近傍に点がなければ、削除する\n          bool found = [&]() {\n            for (ll i = max(0LL, iy - 1); i <= min(h - 1, iy + 1); i++) {\n              for (ll j = max(0LL, ix - 1); j <= min(w - 1, ix + 1); j++) {\n                if (i == iy && j == ix) continue;\n                if (ngrid.count(i * w + j)) {\n                  return true;\n                }\n              }\n            }\n            return false;\n          } ();\n          if (!found) {\n            it = ngrid.erase(ngrid.find(pos));\n            erased++;\n          }\n          else ++it;\n        }\n      }\n      return make_tuple(erased, h, w, std::move(ngrid));\n    };\n    // elimination phase\n    int n = (int)ps.size(), erased;\n    ll h = 1, w = 1;\n    double delta = DBL_MAX;\n    while (n) {\n      // ランダムに点を選ぶ\n      auto it = std::next(grid.begin(), rnd((int)grid.size()));\n      ll pos = it->first;\n      auto& cands = it->second;\n      int i = rnd((int)cands.size());\n      Point selected = cands[i];\n      // 一旦消す\n      cands.erase(cands.begin() + i);\n      // pos 周辺を探索\n      ll iy = pos / w, ix = pos % w;\n      for (ll i = max(0LL, iy - 1); i <= min(h - 1, iy + 1); i++) {\n        for (ll j = max(0LL, ix - 1); j <= min(w - 1, ix + 1); j++) {\n          if (!grid.count(i * w + j)) continue;\n          for (const auto& p : grid[i * w + j]) {\n            delta = min(delta, selected.distance(p));\n          }\n        }\n      }\n      // 元に戻す\n      cands.push_back(selected);\n      // 幅 delta / 8 で grid を作成\n      delta /= 8;\n      tie(erased, h, w, grid) = update_grid(grid, delta);\n      n -= erased;\n    }\n    delta *= 8;\n    // 最終的な delta で最近点対探索\n    // reset grid\n    for (const Point& p : ps) grid[0].push_back(p);\n    tie(erased, h, w, grid) = update_grid(grid, delta, false);\n    // find closest points\n    delta = DBL_MAX;\n    for (auto it = grid.begin(); it != grid.end(); ++it) {\n      ll pos = it->first;\n      auto& cands = it->second;\n      // 自身の近傍\n      for (int i = 0; i < (int)cands.size() - 1; i++) {\n        for (int j = i + 1; j < cands.size(); j++) {\n          delta = min(delta, cands[i].distance(cands[j]));\n        }\n      }\n      // 周辺を探索\n      ll iy = pos / w, ix = pos % w;\n      for (ll i = max(0LL, iy - 1); i <= min(h - 1, iy + 1); i++) {\n        for (ll j = max(0LL, ix - 1); j <= min(w - 1, ix + 1); j++) {\n          if (i == iy && j == ix) continue;\n          if (!grid.count(i * w + j)) continue;\n          for (const auto& p1 : cands) {\n            for (const auto& p2 : grid[i * w + j]) {\n              delta = min(delta, p1.distance(p2));\n            }\n          }\n        }\n      }\n    }\n    return delta;\n  }\n\n  /* closest pair: 分割統治法 */\n  double closest_pair_impl(std::vector<Point>& ps, int l, int r) {\n    static const auto cmp_y = [](const Point& a, const Point& b) { return a.y < b.y; };\n    int n = r - l, m = (l + r) >> 1;\n    if (n <= 1) return DBL_MAX;\n    double x = ps[m].x;\n    double d = min(closest_pair_impl(ps, l, m), closest_pair_impl(ps, m, r));\n    std::inplace_merge(ps.begin() + l, ps.begin() + m, ps.begin() + r, cmp_y);\n    std::vector<Point> b;\n    for (int i = 0; i < n; i++) {\n      if (abs(ps[i + l].x - x) >= d) continue;\n      for (int j = (int)b.size() - 1; j >= 0; j--) {\n        double dx = ps[i + l].x - b[j].x, dy = ps[i + l].y - b[j].y;\n        if (dy >= d) break;\n        d = min(d, sqrt(dx * dx + dy * dy));\n      }\n      b.push_back(ps[i + l]);\n    }\n    return d;\n  }\n  double closest_pair(std::vector<Point> ps) {\n    std::sort(ps.begin(), ps.end());\n    return closest_pair_impl(ps, 0, (int)ps.size());\n  }\n\n  /* circle */\n  struct Circle {\n    double x, y, r;\n    Circle() {}\n    Circle(double x, double y, double r) : x(x), y(y), r(r) {}\n    friend std::ostream& operator<<(std::ostream& o, const Circle& c) {\n      o << '(' << c.x << ',' << c.y << ',' << c.r << ')';\n      return o;\n    }\n    friend std::istream& operator>>(std::istream& i, Circle& c) {\n      i >> c.x >> c.y >> c.r;\n      return i;\n    }\n    int tangent_lines(const Circle& c) const {\n      double d = center().distance(c.center());\n      if (abs(r + c.r - d) < eps) return 3;\n      if (abs(abs(r - c.r) - d) < eps) return 1;\n      if (r + c.r < d) return 4;\n      if (d < abs(r - c.r)) return 0;\n      return 2;\n    }\n    Point center() const {\n      return Point(x, y);\n    }\n  };\n}\n\n\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n\n  using namespace geom;\n\n  Circle c1, c2;\n  cin >> c1 >> c2;\n\n  cout << c1.tangent_lines(c2) << endl;\n\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <cmath>\n#include <cstdio>\n#include <iostream>\n#include <vector>\n\nusing namespace std;\n\ntypedef long long ll;\n\nconst double EPS = 1e-9;\nconst double PI = acos(-1);\n\nint sign(double x) {\n    if (fabs(x) < EPS) {\n        return 0;\n    } else if (x > 0) {\n        return 1;\n    } else {\n        return -1;\n    }\n}\n\nint dcmp(double x, double y) {\n    return sign(x - y);\n}\n\ndouble cosLaw(double a, double b, double c) {\n    return acos((a * a + b * b - c * c) / (2 * a * b));\n}\n\nstruct Vector;\ntypedef Vector Point;\nstruct Line;\nstruct Circle;\n\nstruct Vector {\n    double x;\n    double y;\n\n    explicit Vector(double x = 0, double y = 0);\n\n    Vector operator+(const Vector &rhs) const;\n    Vector operator-() const;\n    Vector operator-(const Vector &rhs) const;\n    Vector operator*(double d) const;\n    Vector operator/(double d) const;\n\n    bool operator==(const Vector &rhs) const;\n    bool operator!=(const Vector &rhs) const;\n    bool operator<(const Vector &rhs) const;\n    bool operator>(const Vector &rhs) const;\n    bool operator<=(const Vector &rhs) const;\n    bool operator>=(const Vector &rhs) const;\n\n    friend std::ostream &operator<<(std::ostream &os, const Vector &vector);\n\n    double dot(const Vector &rhs) const;\n    double cross(const Vector &rhs) const;\n    double length() const;\n    double angle() const;\n    double angle(const Vector &rhs) const;\n    Vector rotate(double rad) const;\n    Vector normal() const;\n    double getDistanceTo(const Point &rhs) const;\n};\n\nstruct Line {\n    Point a;\n    Point b;\n\n    Line(double x1 = 0, double y1 = 0, double x2 = 0, double y2 = 0);\n    Line(const Point &a = Point(), const Point &b = Point());\n\n    double getDistanceTo(const Point &rhs) const;\n    Point getIntersection(const Line &rhs) const;\n    Point getProjection(const Point &rhs) const;\n    Point getReflection(const Point &rhs) const;\n    bool contains(const Point &rhs) const;\n    bool intersects(const Line &rhs) const;\n};\n\nstruct Circle {\n    Point center;\n    double r;\n\n    enum class IntersectsLine {\n        NOT_CROSS,\n        TANGENT,\n        INTERSECT\n    };\n\n    enum class IntersectsCircle {\n        NOT_CROSS,\n        CIRCUMSCRIBED,\n        INTERSECT,\n        INSCRIBED,\n        INCLUDED\n    };\n\n    explicit Circle(double x = 0, double y = 0, double r = 0);\n    explicit Circle(const Point &c = Point(), double r = 0);\n    Circle(const Point &a, const Point &b, const Point &c);\n\n    double area() const;\n    double circumstance() const;\n    bool contains(const Point &rhs, bool onLine = true) const;\n    IntersectsLine intersects(const Line &rhs) const;\n    IntersectsCircle intersects(const Circle &rhs) const;\n    double getDistanceTo(const Circle &rhs) const;\n    Point point(double a) const;\n    std::vector<Point> getIntersections(const Circle &rhs) const;\n    std::vector<Point> getIntersections(const Line &rhs) const;\n    double getAreaOfOverlap(const Circle &rhs) const;\n};;\n\nVector::Vector(double x, double y) : x(x), y(y) {}\n\nVector Vector::operator+(const Vector &rhs) const {\n    return Vector(x + rhs.x, y + rhs.y);\n}\n\nVector Vector::operator-() const {\n    return Vector(-x, -y);\n}\n\nVector Vector::operator-(const Vector &rhs) const {\n    return *this + -rhs;\n}\n\nVector Vector::operator*(double d) const {\n    return Vector(x * d, y * d);\n}\n\nVector Vector::operator/(double d) const {\n    return Vector(x / d, y / d);\n}\n\n\nbool Vector::operator==(const Vector &rhs) const {\n    return dcmp(x, rhs.x) == 0 && dcmp(y, rhs.y) == 0;\n}\n\nbool Vector::operator!=(const Vector &rhs) const {\n    return !(rhs == *this);\n}\n\nbool Vector::operator<(const Vector &rhs) const {\n    if (dcmp(x, rhs.x) != 0) {\n        return dcmp(x, rhs.x) < 0;\n    } else {\n        return dcmp(y, rhs.y) < 0;\n    }\n}\n\nbool Vector::operator>(const Vector &rhs) const {\n    return rhs < *this;\n}\n\nbool Vector::operator<=(const Vector &rhs) const {\n    return !(rhs < *this);\n}\n\nbool Vector::operator>=(const Vector &rhs) const {\n    return !(*this < rhs);\n}\n\nstd::ostream &operator<<(std::ostream &os, const Vector &vector) {\n    os << \"(\" << vector.x << \", \" << vector.y << \")\";\n    return os;\n}\n\ndouble Vector::dot(const Vector &rhs) const {\n    return x * rhs.x + y * rhs.y;\n}\n\ndouble Vector::cross(const Vector &rhs) const {\n    return x * rhs.y - rhs.x * y;\n}\n\ndouble Vector::length() const {\n    return sqrt(dot(*this));\n}\n\ndouble Vector::angle() const {\n    return atan2(y, x);\n}\n\ndouble Vector::angle(const Vector &rhs) const {\n    return acos(dot(rhs) / length() / rhs.length());\n}\n\nVector Vector::rotate(double rad) const {\n    return Vector(x * cos(rad) - y * sin(rad), x * sin(rad) + y * cos(rad));\n}\n\nVector Vector::normal() const {\n    double l = length();\n    return Vector(-y / l, x / l);\n}\n\ndouble Vector::getDistanceTo(const Point &rhs) const {\n    return sqrt(pow(x - rhs.x, 2) + pow(y - rhs.y, 2));\n}\n\nLine::Line(double x1, double y1, double x2, double y2) : a(x1, y1), b(x2, y2) {}\n\nLine::Line(const Point &a, const Point &b) : a(a), b(b) {}\n\ndouble Line::getDistanceTo(const Point &rhs) const {\n    const Vector &v1 = b - a;\n    const Vector &v2 = rhs - a;\n    return fabs(v1.cross(v2) / v1.length());\n}\n\nPoint Line::getIntersection(const Line &rhs) const {\n    if (!intersects(rhs)) {\n        return Point();\n    }\n    Vector u = a - rhs.a;\n    Vector v = b - a;\n    Vector w = rhs.b - rhs.a;\n    double t = w.cross(u) / v.cross(w);\n    return a + v * t;\n}\n\nPoint Line::getProjection(const Point &rhs) const {\n    const Vector &v = b - a;\n    return a + v * (v.dot(rhs - a) / v.dot(v));\n}\n\nPoint Line::getReflection(const Point &rhs) const {\n    // TODO get reflection\n    return Point();\n}\n\nbool Line::contains(const Point &rhs) const {\n    Point p1 = a;\n    Point p2 = b;\n    if (p1 == rhs) {\n        p1 = p1 + (p2 - p1) * 2;\n    } else if (p2 == rhs) {\n        p2 = p2 + (p1 - p2) * 2;\n    }\n    return sign((p2 - rhs).cross(p1 - rhs)) == 0;\n}\n\nbool Line::intersects(const Line &rhs) const {\n    return dcmp((b - a).angle(), (rhs.b - rhs.a).angle()) != 0;\n}\n\nCircle::Circle(double x, double y, double r) : center(x, y), r(r) {}\n\nCircle::Circle(const Point &c, double r) : center(c), r(r) {}\n\nCircle::Circle(const Point &a, const Point &b, const Point &c) {\n    double a1 = b.x - a.x;\n    double b1 = b.y - a.y;\n    double c1 = (a1 * a1 + b1 * b1) / 2;\n    double a2 = c.x - a.x;\n    double b2 = c.y - a.y;\n    double c2 = (a2 * a2 + b2 * b2) / 2;\n    double d = a1 * b2 - a2 * b1;\n    center = Point(a.x + (c1 * b2 - c2 * b1) / d, a.y + (a1 * c2 - a2 * c1) / d);\n    r = center.getDistanceTo(a);\n}\n\nbool Circle::contains(const Point &rhs, bool onLine) const {\n    double dis = center.getDistanceTo(rhs);\n    if (onLine) {\n        return dcmp(dis, r) <= 0;\n    } else {\n        return dcmp(dis, r) < 0;\n    }\n}\n\ndouble Circle::getDistanceTo(const Circle &rhs) const {\n    return center.getDistanceTo(rhs.center);\n}\n\nPoint Circle::point(double a) const {\n    return Point(center.x + cos(a) * r, center.y + sin(a) * r);\n}\n\nstd::vector<Point> Circle::getIntersections(const Circle &rhs) const {\n    std::vector<Point> res;\n    double d = getDistanceTo(rhs);\n    if (sign(d) == 0) {\n        return res;\n    } else if (dcmp(r + rhs.r, d) < 0) {\n        return res;\n    } else if (dcmp(fabs(r - rhs.r), d) > 0) {\n        return res;\n    }\n\n    double a = (rhs.center - center).angle();\n    double da = acos((r * r + d * d - rhs.r * rhs.r) / (2 * r * d));\n    Point p1 = point(a - da);\n    Point p2 = point(a + da);\n    res.push_back(p1);\n    if (p1 != p2) {\n        res.push_back(p2);\n    }\n    return res;\n}\n\nstd::vector<Point> Circle::getIntersections(const Line &rhs) const {\n    std::vector<Point> res;\n    IntersectsLine pos = intersects(rhs);\n    switch (pos) {\n        case IntersectsLine::INTERSECT: {\n            Point u = rhs.getProjection(center);\n            Vector v = (rhs.b - rhs.a);\n            v = v / v.length();\n            double d = sqrt(pow(r, 2) - pow(u.getDistanceTo(center), 2));\n            v = v * d;\n            res.push_back(u + v);\n            res.push_back(u - v);\n            break;\n        }\n        case IntersectsLine::TANGENT: {\n            res.push_back(rhs.getProjection(center));\n            break;\n        }\n        case IntersectsLine::NOT_CROSS: {\n            break;\n        }\n    }\n    return res;\n}\n\ndouble Circle::getAreaOfOverlap(const Circle &rhs) const {\n    double d = getDistanceTo(rhs);\n    if (dcmp(r + rhs.r, d) <= 0) {\n        return 0;\n    } else if (dcmp(fabs(r - rhs.r), d) >= 0) {\n        double radius = std::min(r, rhs.r);\n        return PI * radius * radius;\n    }\n    double angle1 = cosLaw(r, d, rhs.r);\n    double angle2 = cosLaw(rhs.r, d, r);\n    double s1 = area() * angle1 * 2 / (2 * PI);\n    double s2 = rhs.area() * angle2 * 2 / (2 * PI);\n    double s3 = 2 * 0.5 * r * d * sin(angle1);\n    return s1 + s2 - s3;\n}\n\ndouble Circle::area() const {\n    return PI * r * r;\n}\n\ndouble Circle::circumstance() const {\n    return 2 * PI * r;\n}\n\nCircle::IntersectsLine Circle::intersects(const Line &rhs) const {\n    double d = rhs.getDistanceTo(center);\n    int res = dcmp(d, r);\n    if (res == 0) {\n        return IntersectsLine::TANGENT;\n    } else if (res > 0) {\n        return IntersectsLine::NOT_CROSS;\n    } else {\n        return IntersectsLine::INTERSECT;\n    }\n}\n\nCircle::IntersectsCircle Circle::intersects(const Circle &rhs) const {\n    double d = getDistanceTo(rhs);\n    if (dcmp(r + rhs.r, d) < 0) {\n        return IntersectsCircle::NOT_CROSS;\n    } else if (dcmp(r + rhs.r, d) == 0) {\n        return IntersectsCircle::CIRCUMSCRIBED;\n    } else if (dcmp(fabs(r - rhs.r), d) == 0) {\n        return IntersectsCircle::INSCRIBED;\n    } else if (dcmp(fabs(r - rhs.r), d) > 0) {\n        return IntersectsCircle::INCLUDED;\n    } else {\n        return IntersectsCircle::INTERSECT;\n    }\n}\n\nint main() {\n//    freopen(\"data.in\", \"r1\", stdin);\n\n    int x1, y1, r1;\n    int x2, y2, r2;\n    while (~scanf(\"%d%d%d\", &x1, &y1, &r1)) {\n        scanf(\"%d%d%d\", &x2, &y2, &r2);\n        int res;\n        switch (Circle(x1, y1, r1).intersects(Circle(x2, y2, r2))) {\n            case Circle::IntersectsCircle::NOT_CROSS:\n                res = 4;\n                break;\n            case Circle::IntersectsCircle::CIRCUMSCRIBED:\n                res = 3;\n                break;\n            case Circle::IntersectsCircle::INTERSECT:\n                res = 2;\n                break;\n            case Circle::IntersectsCircle::INSCRIBED:\n                res = 1;\n                break;\n            case Circle::IntersectsCircle::INCLUDED:\n                res = 0;\n                break;\n        }\n        printf(\"%d\\n\", res);\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n#define r(i,n) for(int i=0;i<n;i++)\n#define R(i,a,n) for(int i=a;i<n;i++)\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n//CCW??¨///////////////////////////////////\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n/////////////////////////////////////////\nclass Point{\n  public:\n  double x,y;\n  Point(double x=0,double y=0):x(x),y(y){}\n  Point operator + (Point p){return Point(x+p.x,y+p.y);}\n  Point operator - (Point p){return Point(x-p.x,y-p.y);}\n  Point operator * (double a){return Point(a*x,a*y);}\n  Point operator / (double a){return Point(x/a,y/a);}\n\n  bool operator < (const Point &p) const{\n    return x!=p.x?x<p.x:y<p.y;\n  }\n  bool operator == (const Point &p) const{\n    return fabs(x-p.x)<EPS&&fabs(y-p.y)<EPS;\n  }\n};\nstruct Circle{\n  Point c;\n  double r;\n};\ntypedef Point vect;\nstruct seg{Point p1,p2;};\n//????????´????????????\ndouble norm(Point p){return p.x*p.x+p.y*p.y;}\n//??¶???????????????absolute  ?????????????????¶?????????\ndouble abs(Point p){return sqrt(norm(p));}\n//?????????????????????????????????\ndouble dot(Point a,Point b){\n  return a.x*b.x+a.y*b.y;\n}\n//?????? ????????????????????????\ndouble cross(Point a,Point b){\n  return a.x*b.y-a.y*b.x;\n}\n//??´?????????????????¨?????\\?????????????????????\nbool C90(seg s1,seg s2){\n  return equals(dot(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n//????????????????????¨?????\\??????????????????????????????????????????\nbool C0(seg s1,seg s2){\n  return equals(cross(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n//?°???± ??????????????´???????????????\nPoint project(seg s,Point p){\n  Point base = s.p2-s.p1;\n  double r=dot(p-s.p1,base) / norm(base);\n  return s.p1+base*r;\n}\n//????°??????????????????????\nPoint reflection(seg s,Point p){\n  return  p+(project(s,p)-p)*2.0;\n}\n//2???????????¢   ???????????????\ndouble getDistancePP(Point a,Point b){\n  return abs(a-b);\n}\n//??´??????????????¢(????°?)???????????????\ndouble getDistanceLP(seg l,Point p){\n  return abs(cross(l.p2-l.p1,p-l.p1)/abs(l.p2-l.p1));\n}\n//?????????????????¢??????????????????\ndouble getDistanceSP(seg s,Point p){\n  if(dot(s.p2-s.p1,p-s.p1)<0.0)return abs(p-s.p1);\n  if(dot(s.p1-s.p2,p-s.p2)<0.0)return abs(p-s.p2);\n  return getDistanceLP(s,p);\n}\n//????¨?????????????????¨??????????????????????????????????\nint CCW(Point p0,Point p1,Point p2){\n  Point a=p1-p0;\n  Point b=p2-p0;\n  if(cross(a,b)>EPS)return COUNTER_CLOCKWISE;\n  if(cross(a,b)<-EPS)return CLOCKWISE;\n  if(dot(a,b)<-EPS)return ONLINE_BACK;\n  if(norm(a)<norm(b))return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\n//????????????????????????????????????????????§?\\????\nbool intersect(Point p1,Point p2,Point p3,Point p4){\n  return(CCW(p1,p2,p3)*CCW(p1,p2,p4)<=0&&CCW(p3,p4,p1)*CCW(p3,p4,p2)<=0);\n}\nbool intersect(seg s1,seg s2){\n  return intersect(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n//2??????????§???¢?????\\??????????????????...????????????????????????\nbool squareintersect(seg s1,seg s2){\n  if(s1.p2.x<s2.p1.x||s2.p2.x<s1.p1.x)return 0;\n  if(s1.p2.y<s2.p1.y||s2.p2.y<s1.p1.y)return 0;\n  return 1;\n}\n//??????????????¢?????????????????????????????§??¨???????????????\ndouble getDistance(seg s1,seg s2){\n  if(intersect(s1,s2))return 0.0;\n  return min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),\n    min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n}\n//??????????????????????????????(?´????????`)\nPoint getCrossPoint(seg s1,seg s2){\n  Point base=s2.p2-s2.p1;\n  double d1=abs(cross(base,s1.p1-s2.p1));\n  double d2=abs(cross(base,s1.p2-s2.p1));\n  double t=d1/(d1+d2);\n  return s1.p1+(s1.p2-s1.p1)*t;\n}\n//???????£????????????¢??????????????¢??????????????????????????\\????????????????????§???????????£???????????????????????????????????§?????????????????????\nint intersectCC(Circle a,Circle b){\n  double dist=abs(a.c-b.c);\n  if(dist>a.r+b.r+EPS)return 4;\n  if(dist>a.r+b.r-EPS)return 3;\n  if(dist>abs(a.r-b.r)+EPS)return 2;\n  if(dist>abs(a.r-b.r)-EPS)return 1;\n  return 0;\n}\n//?????¨??´???????????????2?????? (LINE)\nseg getCrossPoint(Circle c,seg l){\n  //assert(intersect(cc,l));\n  Point pr=project(l,c.c);\n  Point e=(l.p2-l.p1)/abs(l.p2-l.p1);\n  double base =sqrt(c.r*c.r-norm(pr-c.c));\n  seg pp;pp.p1=(pr+e*base);pp.p2=(pr-e*base);\n  return pp;\n}\n//?????¨??´??????Line??????????????°\nint getCircleLine(Circle c,seg l){\n  seg a=getCrossPoint(c,l);\n  if(isnan(a.p1.x)&&isnan(a.p2.y))return 0;\n  else if(a.p1.x==a.p2.x&&a.p1.y==a.p2.y)return 1;\n  else return 2;\n}\n//??????\nPoint gaishin(Point a, Point b, Point c){\n  double a1,a2,b1,b2,c1,c2;\n  a1=2*(b.x-a.x);b1=2*(b.y-a.y);c1=a.x*a.x-b.x*b.x+a.y*a.y-b.y*b.y;\n  a2=2*(c.x-a.x);b2=2*(c.y-a.y);c2=a.x*a.x-c.x*c.x+a.y*a.y-c.y*c.y;\n  Point p;p.x=(b1*c2-b2*c1)/(a1*b2-a2*b1);p.y=(c1*a2-c2*a1)/(a1*b2-a2*b1);\n  return p;\n}\n//2??????????????????\ndouble arg(Point p){return atan2(p.y,p.x);}\nPoint polar(double a,double r){return Point(cos(r)*a,sin(r)*a);}\nseg getCrossPoints(Circle c1,Circle c2){\n  //assert(intersect(c1,c2));\n  double d=abs(c1.c-c2.c);\n  double a=acos((c1.r*c1.r+d*d-c2.r*c2.r)/(2*c1.r*d));\n  double t=arg(c2.c-c1.c);\n  seg s;s.p2=c1.c+polar(c1.r,t+a);s.p1=c1.c+polar(c1.r,t-a);\n  return s;\n}\n//???????????? ????????????->2 ??????->1  ????????\\???->0\ntypedef vector<Point> Polygon;\nint contains(Polygon g, Point p) {\n  int n=g.size();\n  bool x=false;\n  for(int i=0;i<n;i++) {\n    Point a=g[i]-p,b=g[(i+1)%n]-p;\n    if(abs(cross(a, b)) < EPS && dot(a, b) < EPS)return 1;\n    if(a.y>b.y)swap(a,b);\n    if(a.y<EPS&&EPS<b.y&&cross(a,b)>EPS)x=!x;\n  }\n  return x ? 2 : 0;\n}\n//?????¢?????¢???\ndouble Area(Polygon p) {\n  double a=0;\n  for(int i=0;i<p.size();i++)a+=cross(p[i],p[(i+1)%p.size()]);\n  return a/2;\n}\nbool isConvex(Polygon p){\n  for(int i=0;i<p.size();i++){\n    if(CCW(p[(i+1)%p.size()],p[i%p.size()],p[(i+2)%p.size()])==1)return false;\n  }\n  return true;\n}\nPolygon andrewScan(Polygon s) {\n  Polygon l, u;\n  if(s.size()<3)return s;\n  sort(s.begin(),s.end());\n  u.push_back(s[0]);\n  u.push_back(s[1]);\n  l.push_back(s[s.size()-1]);\n  l.push_back(s[s.size()-2]);\n  for(int i=2;i<s.size();i++){\n    for(int n=u.size();n>=2&&CCW(u[n-2],u[n-1],s[i])!=-1&&CCW(u[n-2],u[n-1],s[i])!=ONLINE_FRONT;n--){\n      u.pop_back();\n    }\n    u.push_back(s[i]);\n  }\n  for(int i=s.size()-3;i>=0;i--){\n    for(int n=l.size();n>=2&&CCW(l[n-2],l[n-1],s[i])!=-1&&CCW(l[n-2],l[n-1],s[i])!=ONLINE_FRONT;n--){\n      l.pop_back();\n    }\n    l.push_back(s[i]);\n  }\n  reverse(l.begin(),l.end());\n  for( int i=u.size()-2;i>=1;i--)l.push_back(u[i]);\n  return l;\n}\nint main(){\n  Circle c1,c2;\n  cin>>c1.c.x>>c1.c.y>>c1.r;\n  cin>>c2.c.x>>c2.c.y>>c2.r;\n  cout<<intersectCC(c1,c2)<<endl;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint intersection(int cx1, int cy1, int r1, int cx2, int cy2, int r2);\n\nint main(){\n  int cx1, cy1, r1;\n  int cx2, cy2, r2;\n\n  cin >> cx1 >> cy1 >> r1;\n  cin >> cx2 >> cy2 >> r2;\n\n  cout << intersection(cx1, cy1, r1, cx2, cy2, r2) << endl;\n\n\n  return 0;\n}\n\nint intersection(int cx1, int cy1, int r1, int cx2, int cy2, int r2){\n  float d = 0.0;\n\n  d = (cx2 - cx1) * (cx2 - cx1) + (cy2 - cy1) * (cy2 - cy1);\n  d = sqrt(d);\n\n  if(d > (r1 + r2)){\n    return 4;\n  }\n  else if(d == (r1 + r2)){\n    return 3;\n  }\n  else if(d < (r1 + r2) && d > abs(r1 - r2)){\n    return 2;\n  }\n  else if(d == abs(r1 - r2)){\n    return 1;\n  }\n  else return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<complex>\n#include<vector>\n#include<iomanip>\n#include<algorithm>\n#include<cmath>\n\nusing namespace std;\n\nconst double PI=acos(-1);\nconst double EPS=1e-10;\ntypedef complex<double> P;\ntypedef vector<P> G;\n#define shosu(x) fixed<<setprecision(x)\n#define diff(P,i) (P[(i+1)%P.size()] - P[i])\n\nstruct L : public vector<P> {\n  L(const P &a, const P &b) {\n    push_back(a); push_back(b);\n  }\n  L(){;}\n};\nstruct C {\n  P c;double r;\n  C(const P &c,double r):c(c),r(r){}\n};\n\nnamespace std{//演算子の定義\n  bool operator < (const P& a,const P& b) {\n    return real(a)!= real(b) ? real(a) < real(b) : imag(a) < imag(b);\n    //return imag(a) != imag(b) ? imag(a) < imag(b) : real(a) < real(b)\n  }\n  bool operator == (const P& a,const P& b) {\n    return a.real()==b.real() && a.imag()==b.imag();\n  }\n}\n\ndouble dot(P a,P b) {\n  return real(conj(a)*b);\n}\n\ndouble cross(P a,P b) {\n  return imag(conj(a)*b);\n}\n\nint ccw(P a, P b, P c) { //3点の関係性\n  b -= a; c -= a;\n  if (cross(b, c) > 0)   return +1;       // counter clockwise\n  if (cross(b, c) < 0)   return -1;       // clockwise\n  if (dot(b, c) < 0)     return +2;       // c--a--b on line\n  if (norm(b) < norm(c)) return -2;       // a--b--c on line\n  return 0;                               // a--c--b on line\n}\n\nP projection(const L &l, const P &p) { //pの直線l上の射影の点\n  double t=dot(p-l[0],l[0]-l[1])/norm(l[0]-l[1]);\n  return l[0]+t*(l[0]-l[1]);\n}\n\nP reflection(const L &l, const P &p) { //点pの直線lに関して対称な点\n  return p+2.0*(projection(l,p)-p);\n}\n\nbool isorthogonal(const L &l, const L &m) { //2直線の直交判定\n  return fabs(dot(l[1]-l[0], m[1]-m[0])) < EPS;\n}\n\nbool isparallel(const L &l, const L &m) { //2直線の平行判定\n  return fabs(cross(l[1]-l[0],m[1]-m[0])) < EPS;\n}\n\nbool intersectLL(const L &l, const L &m) { //2直線の交差判定\n  return !isparallel(l,m);\n}\n\nbool intersectSS(const L &s, const L &t) { //2線分の交差判定(完全に交差してないとだめ)\n  return ccw(s[0],s[1],t[0])*ccw(s[0],s[1],t[1]) <= 0 &&\n         ccw(t[0],t[1],s[0])*ccw(t[0],t[1],s[1]) <= 0;\n}\n\nbool intersectSP(const L &s, const P &p) { //直線と点の交差判定\n  return abs(s[0]-p)+abs(s[1]-p)-abs(s[1]-s[0]) < EPS; // 三角不等式\n}\n\n\nP turn(P p,double t){ // 回転\n    return p*exp(P(.0,t*PI/180.0));\n}\n\n\nvector<L> tangentCC(C a,C b){ //2円の接線\n\tif(a.r < b.r) swap(a,b);\n\tdouble d = abs(a.c - b.c);\n\tvector<L> l;\n\tif(d < EPS) return l;\n\tif(a.r + b.r < d - EPS){ //離れている\n\t\tdouble t = acos((a.r + b.r)/d);\n\t\tt = t * 180 / PI;\n\t\tl.push_back(L(a.c + turn(a.r/d*(b.c-a.c), t), b.c + turn(b.r / d * (a.c-b.c), t)));\n\t\tl.push_back(L(a.c + turn(a.r/d*(b.c-a.c), -t), b.c + turn(b.r / d * (a.c-b.c), -t)));\n\t}else if(a.r + b.r < d + EPS){ //外接\n\t\tP p = a.c + a.r / d * (b.c - a.c);\n\t\tl.push_back(L(p, p + turn(b.c - a.c, 90)));\n\t}\n\tif(abs(a.r - b.r) < d - EPS){ //交わっている\n\t\tdouble t1 = acos((a.r - b.r) / d);\n\t\tt1 = t1 * 180 / PI;\n\t\tdouble t2 = 180 - t1;\n\t\tl.push_back(L(a.c + turn(a.r / d * (b.c-a.c), t1), b.c + turn(b.r / d * (a.c - b.c), -t2)));\n\t\tl.push_back(L(a.c + turn(a.r / d * (b.c - a.c), -t1),b.c + turn(b.r / d * (a.c - b.c), t2)));\n\t}else if(abs(a.r - b.r) < d + EPS){ //内接\n\t\tP p = a.c + a.r / d * (b.c - a.c);\n\t\tl.push_back(L(p, p + turn(b.c - a.c, 90)));\n\t}\n\treturn l;\n}\n\nP crosspointSS(const L &a, const L &b) { //2線分の交点\ndouble t1=abs(cross(a[1]-a[0],b[0]-a[0]));\ndouble t2=abs(cross(a[1]-a[0],b[1]-a[0]));\nreturn b[0]+(b[1]-b[0])*t1/(t1+t2);\n}\n\nP crosspointLL(const L &l, const L &m) { //2直線の交点\n  double A = cross(l[1] - l[0], m[1] - m[0]);\n  double B = cross(l[1] - l[0], l[1] - m[0]);\n  if (abs(A) < EPS && abs(B) < EPS) return m[0]; // same line\n  return m[0] + B / A * (m[1] - m[0]);\n}\n\ndouble distancePP(const P &p, const P &q){ //2点間の距離\n  return hypot(p.real()-q.real(), p.imag()-q.imag());\n}\n\ndouble distanceSP(const L &s, const P &p) {//直線と点との距離\n  const P r = projection(s, p);\n  if (intersectSP(s, r)) return abs(r - p);\n  return min(abs(s[0] - p), abs(s[1] - p));\n}\n\ndouble distanceSS(const L &s, const L &t) {//2線分の距離\n  if (intersectSS(s, t)) return 0;\n  return min(min(distanceSP(s, t[0]), distanceSP(s, t[1])),\n             min(distanceSP(t, s[0]), distanceSP(t, s[1])));\n}\n\ndouble area(const G &g) { //多角形の面積\n    double S =0;\n    for(int i = 0; i < g.size(); i++){\n        S +=(cross(g[i],g[(i+1)%g.size()]));\n    }\n    return abs(S/2.0);\n}\n\nbool isconvex(const G &g) { //凸かどうか(全ての内角の大きさが180度以下)\n\tint n = g.size();\n  for(int i = 0; i < n; i++)\n    if(ccw(g[(i+n-1)%n], g[i%n], g[(i+1)%n])==-1) return false;\n\treturn true;\n}\n\nint inconvex(const G& g, const P& p) { //多角形と点の関係\n\tbool in = false;\n\tint n = g.size();\n\tfor(int i = 0; i < n; i++){\n\t\tP a = g[i%n] - p;\n\t\tP b = g[(i+1)%n] - p;\n\t\tif(imag(a) > imag(b)) swap(a, b);\n\t\tif(imag(a) < EPS && 0 < imag(b))if(cross(a,b) < 0)in = !in;\n\t\tif(abs(cross(a,b)) < EPS && dot(a,b) < EPS) return 1;//ON\n\t}\n\treturn in ? 2 : 0;//IN : OUT;\n}\n\nG convex_hull(G &ps) { // 凸包(点集合 P の全ての点を含む最小の凸多角形)\n  int n = ps.size(), k = 0;\n\tsort(ps.begin(), ps.end());\n\tG ch(2*n);\n\tfor(int i = 0; i < n; ch[k++] = ps[i++])//lower-hull\n\t\twhile(k >= 2 && ccw(ch[k-2],ch[k-1],ps[i]) == -1) --k;//<=0  ->  ==-1\n\tfor(int i = n-2,t = k+1; i >= 0; ch[k++] = ps[i--])//upper-hull\n\t\twhile(k >= t && ccw(ch[k-2],ch[k-1],ps[i]) == -1) --k;//\n\tch.resize(k-1);\n\treturn ch;\n}\n\ndouble convex_diameter(const G &pt) { //凸多角形の直径(最遠頂点対間距離)\n  const int n = pt.size();\n  int is = 0, js = 0;\n  for (int i = 1; i < n; ++i) {\n    if (imag(pt[i]) > imag(pt[is])) is = i;\n    if (imag(pt[i]) < imag(pt[js])) js = i;\n  }\n  double maxd = norm(pt[is] - pt[js]);\n\n  int i, maxi, j, maxj;\n  i = maxi = is;\n  j = maxj = js;\n  do {\n    if (cross(diff(pt,i), diff(pt,j)) >= 0) j = (j+1) % n;\n    else i = (i+1) % n;\n    if (norm(pt[i] - pt[j]) > maxd) {\n      maxd = norm(pt[i] - pt[j]);\n      maxi = i; maxj = j;\n    }\n  } while (i != is || j != js);\n  return sqrt(maxd); /* farthest pair is (maxi, maxj). */\n}//convex_diameter(g)\n\n\nG convex_cut(const G& g, const L& l) { //凸多角形の切断\n  G Q;\n  for (int i = 0; i < g.size(); ++i) {\n    P a = g[i], b = g[(i+1)%g.size()];\n    if (ccw(l[0], l[1], a) != -1) Q.push_back(a);\n    if (ccw(l[0], l[1], a)*ccw(l[0], l[1], b) < 0)\n      Q.push_back(crosspointLL(L(a,b), l));\n  }\n  return Q;\n}\n\n\nP inP(){\n  double x,y;\n  cin >> x >> y;\n  P p(x,y);\n  return p;\n}\n\nL inL(){\n  P p1 = inP();\n  P p2 = inP();\n  L l(p1,p2);\n  return l;\n}\n\nC inC(){\n  P p = inP();\n  double r;\n  cin >> r;\n  C c(p,r);\n  return c;\n}\n\nint main(){\n\n  C c1 = inC();\n  C c2 = inC();\n\n  cout << (tangentCC(c1,c2)).size() << endl;\n\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint find_circles_relationship(int x1, int y1, int r1, int x2, int y2, int r2){\n\tfloat center_distance = sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));\n\tfloat sum_radius = r1 + r2;\n\tfloat min_radius = min(r1, r2);\n\tfloat max_radius = max(r1, r2);\n\n\tint relationship;\n\tif(center_distance > sum_radius){\n\t\trelationship = 4;\n\t}else if(center_distance == sum_radius){\n\t\trelationship = 3;\n\t}else{\n\t\tif(min_radius + center_distance == max_radius){\n\t\t\trelationship = 1;\n\t\t}else if(min_radius + center_distance < max_radius){\n\t\t\trelationship = 0;\n\t\t}else{\n\t\t\trelationship = 2;\n\t\t}\n\t}\n\treturn relationship;\n}\n\nint main(){\n\tint x1, y1, r1;\n\tint x2, y2, r2;\n\tcin >> x1 >> y1 >> r1;\n\tcin >> x2 >> y2 >> r2;\n\tcout << find_circles_relationship(x1, y1, r1, x2, y2, r2) << endl;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <cmath>\n#include <array>\n#include <algorithm>\n#include <cassert>\n#include <vector>\n\nusing Number = double;\n\nconst Number EPS = 1e-10;\nconst Number INF = 1e10;\nconst Number PI = acos(-1.0);\n\ninline int sign(Number x) { return (x < -EPS) ? -1 : (x > EPS) ? +1 : 0; }\ninline bool equal(Number a, Number b) { return sign(a - b) == 0; }\n\n// change between degree and radian\ninline Number to_radian(const Number degree) { return degree * PI / 180.0; }\ninline Number to_degree(const Number radian) { return radian * 180.0 / PI; }\n\n\n/**\n * Point in two dimensional\n */\nclass Point {\npublic:\n    Number x, y;\n\n    Point() {}\n    Point(Number x, Number y) : x(x), y(y) {}\n\n    // Arithmetic operator between points\n    Point operator+(const Point &rhs) const {\n        return Point(this->x + rhs.x, this->y + rhs.y);\n    }\n    Point operator-(const Point &rhs) const {\n        return Point(this->x - rhs.x, this->y - rhs.y);\n    }\n    Point operator*(const Point &rhs) const { // cross product between points\n        return Point(this->x * rhs.x - this->y * rhs.y,\n                     this->x * rhs.y + this->y * rhs.x);\n    }\n\n    // Unary operator and compound assignment operator\n    Point operator-() const {\n        return Point(-this->x, -this->y);\n    }\n    Point& operator+=(const Point &rhs) {\n        return *this = *this + rhs;\n    }\n    Point& operator-=(const Point &rhs) {\n        return *this = *this - rhs;\n    }\n\n    // Arithmetic operator between point and number\n    Point operator*(Number rhs) const {\n        return Point(this->x * rhs, this->y * rhs);\n    }\n    Point operator/(Number rhs) const {\n        return Point(this->x / rhs, this->y / rhs);\n    }\n\n    // Comparison operation\n    bool operator==(const Point &rhs) const {\n        return sign(this->x - rhs.x) == 0 && sign(this->y - rhs.y) == 0;\n    }\n    bool operator<(const Point &rhs) const {\n        return (this->x < rhs.x) || (this->x == rhs.x && this->y < rhs.y);\n    }\n\n    // Other operator\n    Number abs(void) const {\n        return sqrt(this->x * this->x + this->y * this->y);\n    }\n    Number abs2(void) const {\n        return this->x * this->x + this->y * this->y;\n    }\n    Number arg(void) const {\n        return atan2(this->y, this->x);\n    }\n    Number dot(const Point &rhs) {\n        return this->x * rhs.x + this->y * rhs.y;\n    }\n    Point rotate90(void) const {\n        return Point(-this->y, this->x);\n    }\n    Point rotate(double angle) const {\n        return Point(cos(angle) * this->x - sin(angle) * this->y,\n                     sin(angle) * this->x + cos(angle) * this->y);\n    }\n\n};\ninline Number dot(const Point &p1, const Point &p2) {\n    return p1.x * p2.x + p1.y * p2.y;\n}\ninline Number abs_cross(const Point &p1, const Point &p2) {\n    return p1.x * p2.y - p1.y * p2.x;\n}\n// Output of a point\nstd::ostream& operator<<(std::ostream &os, const Point &p) {\n    return os << p.x << ' ' << p.y;\n}\n// Input of a point\nstd::istream& operator>>(std::istream &is, Point &p) {\n    return is >> p.x >> p.y;\n}\n\n// Counter-Clockwise predicate (a, b, c)\nenum CCW {\n    COUNTER_CLOCKWISE = 1,      // counter clockwise\n    CLOCKWISE         = -1,     // clockwise\n    ONLINE_FRONT      = 2,      // a--c--b on line\n    ONLINE_BACK       = -2,      // c--a--b on line\n    ON_SEGMENT        = 0,     // a--b--c on line\n};\nCCW ccw(const Point &a, Point b, Point c) {\n    b -= a;  c -= a;\n    if (abs_cross(b, c) > EPS) return COUNTER_CLOCKWISE;\n    if (abs_cross(b, c) < -EPS) return CLOCKWISE;\n    if (dot(b, c) < 0)       return ONLINE_BACK;\n    if (b.abs2() < c.abs2())   return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\n\n/**\n * Line in two dimensional\n */\nclass Line : public std::array<Point, 2> {\npublic:\n    Line() {}\n    Line(const Point &p1, const Point &p2) {\n        (*this)[0] = p1;\n        (*this)[1] = p2;\n    }\n};\n// Input of a line\nstd::istream& operator>>(std::istream &is, Line &l) {\n    return is >> l[0] >> l[1];\n}\nstd::ostream& operator<<(std::ostream &os, const Line &l) {\n    return os << l[0] << ' ' << l[1];\n}\ninline CCW ccw(const Line &l, const Point &p) {\n    return ccw(l[0], l[1], p);\n}\n\n\n/**\n * Segment in two dimensional\n */\nclass Segment : public Line {\npublic:\n    Segment() {}\n    Segment(const Point &p1, const Point &p2) : Line(p1, p2) {}\n};\n\n\n/**\n * Circle in two dimensional\n */\nclass Circle : public Point {\npublic:\n    Number r;\n    Circle() {}\n    Circle(const Point &p, Number r = 0.0) : Point(p), r(r) {}\n};\n// Input of a circle\nstd::istream& operator>>(std::istream &is, Circle &c) {\n    return is >> c.x >> c.y >> c.r;\n}\n\n\n\n/**\n * Intersection testing\n */\nPoint Projection(const Line &l, const Point &p) {\n    Point dir = l[1] - l[0];\n    Number t = dot(p - l[0], dir) / dir.abs2();\n    return l[0] + dir * t;\n}\ninline Point Reflection(const Line &l, const Point &p) {\n    return Projection(l, p) * 2.0 - p;\n}\n\ninline bool IsOrthogonal(const Line &l1, const Line &l2) {\n    return equal(dot(l1[0] - l1[1], l2[0] - l2[1]), 0.0);\n}\ninline bool IsParallel(const Line &l1, const Line &l2) {\n    return equal(abs_cross(l1[0] - l1[1], l2[0] - l2[1]), 0.0);\n}\n\ninline bool IsIntersect(const Line &l, const Point &p) {\n    return abs(ccw(l[0], l[1], p)) != 1;\n}\ninline bool IsIntersect(const Segment &s, const Point &p) {\n    return ccw(s[0], s[1], p) == 0;\n}\ninline bool IsIntersect(const Line &l1, const Line l2) {\n    return !IsParallel(l1, l2) || IsParallel(l1, Line(l1[0], l2[0]));\n}\ninline bool IsIntersect(const Line &l, const Segment &s) {\n    return abs_cross(l[1] - l[0], s[0] - l[0]) *\n        abs_cross(l[1] - l[0], s[1] - l[0]) < EPS;\n}\ninline bool IsIntersect(const Segment &s1, const Segment &s2) {\n    return ccw(s1[0], s1[1], s2[0]) * ccw(s1[0], s1[1], s2[1]) <= 0 &&\n        ccw(s2[0], s2[1], s1[0]) * ccw(s2[0], s2[1], s1[1]) <= 0;\n}\ninline bool IsIntersect(const Circle &c, const Point &p) { // p is in interior or boundary\n    return (c - p).abs() <= c.r + EPS;\n}\ninline bool IsIntersect(const Circle &c, const Line &l) {\n    return IsIntersect(c, Projection(l, c));\n}\ninline bool IsIntersect(const Circle &c1, const Circle &c2) {\n    return (c1 - c2).abs() <= c1.r + c2.r && abs(c1.r - c2.r) <= (c1 - c2).abs();\n}\n\n\n/**\n * Distance and Intersection point\n */\ninline Number Distance(const Point &p1, const Point &p2) {\n    return (p1 - p2).abs();\n}\ninline Number Distance(const Line &l, const Point &p) {\n    return (p - Projection(l, p)).abs();\n}\ninline Number Distance(const Segment &s, const Point &p) {\n    if (sign(dot(s[1] - s[0], p - s[0])) == -1) return (p - s[0]).abs();\n    if (sign(dot(s[0] - s[1], p - s[1])) == -1) return (p - s[1]).abs();\n    return (p - Projection(s, p)).abs();\n}\ninline Number Distance(const Line &l1, const Line &l2) {\n    return IsIntersect(l1, l2) ? 0 : Distance(l1, l2[0]);\n}\ninline Number Distance(const Line &l, const Segment &s) {\n    if (IsIntersect(l, s)) return 0.0;\n    return std::min(Distance(l, s[0]), Distance(l, s[1]));\n}\ninline Number Distance(const Segment &s1, const Segment &s2) {\n    if (IsIntersect(s1, s2)) return 0.0;\n    return std::min({Distance(s1, s2[0]), Distance(s1, s2[1]),\n                Distance(s2, s1[0]), Distance(s2, s1[1])});\n}\n\nPoint CrossPoint(const Line &s1, const Line &s2) {\n    Point base = s2[1] - s2[0];\n    Number d1 = abs(abs_cross(base, s1[0] - s2[0]));\n    Number d2 = abs(abs_cross(base, s1[1] - s2[0]));\n    Number t = d1 / (d1 + d2);\n    return s1[0] + (s1[1] - s1[0]) * t;\n}\nstd::pair<Point, Point> CrossPoint(const Circle &c, const Line &l) {\n    assert(IsIntersect(c, l));\n    Point mid = Projection(l, c);\n    Point e = (l[1] - l[0]) / (l[1] - l[0]).abs();\n    Number len = sqrt(c.r * c.r - (mid - c).abs2());\n    return std::make_pair(mid + e * len, mid - e * len);\n}\nstd::pair<Point, Point> CrossPoint(const Circle &c1, const Circle &c2) {\n    assert(IsIntersect(c1, c2));\n    Number d = Distance(c1, c2);\n    Number r1_cos = (d * d + c1.r * c1.r - c2.r * c2.r) / (2.0 * d);\n    Number h = sqrt(c1.r * c1.r - r1_cos * r1_cos);\n    Point base = c1 + (c2 - c1) * r1_cos / d;\n    Point dir = (c2 - c1).rotate90() * h / d;\n    return std::make_pair(base + dir, base - dir);\n}\n\n// the tangent line from a point to a circle\nstd::vector<Point> TangentPoint(const Circle &c, const Point &p) {\n    Number x = (p - c).abs2();\n    Number d = x - c.r * c.r;\n    if (sign(d) == -1) // no point\n        return std::vector<Point>();\n    d = std::max(d, 0.0);\n    Point q1 = (p - c) * (c.r * c.r / x);\n    Point q2 = ((p - c) * (-c.r * sqrt(d) / x)).rotate90();\n\n    if (q2 == Point(0, 0)) return {c + q1};\n\n    return {c + q1 - q2, c + q1 + q2};\n}\n// common tangent lines to two circles\nstd::vector<Line> CommonTangent(const Circle &c1, const Circle &c2) {\n    std::vector<Line> list;\n    // caluculate outer tangent\n    if (equal(c1.r, c2.r)) {\n        Point dir = c2 - c1;\n        dir = (dir * (c1.r / dir.abs())).rotate90();\n        list.emplace_back(Line(c1 + dir, c2 + dir));\n        list.emplace_back(Line(c1 - dir, c2 - dir));\n    }\n    else {\n        Point p = (c1 * (-c2.r)) + (c2 * c1.r);\n        p = p * (1 / (c1.r - c2.r));\n        std::vector<Point> ps = TangentPoint(c1, p);\n        std::vector<Point> qs = TangentPoint(c2, p);\n        const int N = std::min(ps.size(), qs.size());\n        for (int i = 0; i < N; ++i)\n            list.emplace_back(Line(ps[i], qs[i]));\n    }\n\n    // caluculate inner tangent\n    Point p = (c1 * c2.r) + (c2 * c1.r);\n    p = p * (1 / (c1.r + c2.r));\n    std::vector<Point> ps = TangentPoint(c1, p);\n    std::vector<Point> qs = TangentPoint(c2, p);\n    const int N = std::min(ps.size(), qs.size());\n    for (int i = 0; i < N; ++i)\n        list.emplace_back(Line(ps[i], qs[i]));\n\n    return list;\n}\n\n\nint main()\n{\n    std::cout << std::fixed << std::setprecision(15);\n\n    Circle c1, c2;\n\n    std::cin >> c1 >> c2;\n    std::cout << CommonTangent(c1, c2).size() << '\\n';\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <math.h>\n\nint main(int argc, const char * argv[]) {\n\n    int c1x, c1y, c1r, c2x, c2y, c2r;\n    scanf(\"%d %d %d\", &c1x, &c1y, &c1r);\n    scanf(\"%d %d %d\", &c2x, &c2y, &c2r);\n    \n    if(c1r<c2r){\n        if(sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2)) > c1r + c2r) printf(\"4\\n\");\n        else if(sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2)) == c1r + c2r) printf(\"3\\n\");\n        else if((c2r-c1r<sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2))) && (sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2)) < c1r + c2r)) printf(\"2\\n\");\n        else if(sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2)) == c2r-c1r) printf(\"1\\n\");\n        else if(sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2)) < c2r-c1r) printf(\"0\\n\");\n        \n        \n    }\n    \n    else{\n        if(sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2)) > c1r + c2r) printf(\"4\\n\");\n        else if(sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2)) == c1r + c2r) printf(\"3\\n\");\n        else if(((c1r-c2r<sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2))) && (sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2)) < c1r + c2r))) printf(\"2\\n\");\n        else if(sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2)) == c1r-c2r) printf(\"1\\n\");\n        else if(sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2)) < c1r-c2r) printf(\"0\\n\");\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\nusing namespace std;\n\nint main() {\n\tint x1, y1, r1;\n\tint x2, y2, r2;\n\n\tcin >> x1 >> y1 >> r1;\n\tcin >> x2 >> y2 >> r2;\n\t\n\tint X = sqrt(pow(x1-x2, 2) + pow(y1-y2, 2));\n\t\n\tif(r1+r2 < X){\n\t\tcout << 4 << endl;\n\t} else if(X == r1+r2){\n\t\tcout << 3 << endl;\n\t} else if(abs(r1-r2) < X){\n\t\tcout << 2 << endl;\n\t} else if(X == abs(r1-r2)){\n\t\tcout << 1 << endl;\n\t} else{\n\t\tcout << 0 << endl;\n\t}\n\t\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\nusing namespace std;\n\n#define POW(x) ((x) * (x))\n\nint main() {\n  int c1x, c1y, c1r;\n  int c2x, c2y, c2r;\n\n  cin >> c1x >> c1y >> c1r;\n  cin >> c2x >> c2y >> c2r;\n\n  if (POW(c1x - c2x) + POW(c1y - c2y) > POW(c1r + c2r))\n    cout << 4 << endl;\n  else if (POW(c1x - c2x) + POW(c1y - c2y) == POW(c1r + c2r))\n    cout << 3 << endl;\n  else if (POW(c1x - c2x) + POW(c1y - c2y) == POW(c1r - c2r))\n    cout << 1 << endl;\n  else if (POW(c1x - c2x) + POW(c1y - c2y) < POW(c1r - c2r))\n    cout << 0 << endl;\n  else\n    cout << 2 << endl;\n\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n#include<math.h>\n#include<algorithm>\n#include<queue>\n#include<iostream>\n#include<set>\n#include<map>\n#define re register\n#define ll long long\n#define sqr(a) ((a)*(a))\nusing namespace std;\ninline int gi(){\n    int f=1,sum=0;char ch=getchar();\n    while(ch>'9'|| ch<'0'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0' && ch<='9'){sum=(sum<<3)+(sum<<1)+ch-'0';ch=getchar();}\n    return sum*f;\n}\nconst double eps=1e-10,Pi=acos(-1.0);\nstruct node{\n    double x,y;\n    node operator+(node b){return (node){x+b.x,y+b.y};}\n    node operator-(node b){return (node){x-b.x,y-b.y};}\n    node operator*(double b){return (node){x*b,y*b};}\n    double len(){return sqrt(x*x+y*y);}\n\tdouble real(){return x*x+y*y;}\t\n};\nint fh(double a){return fabs(a)<eps?0:a>eps?1:-1;}\nnode corner(node a,double B){return (node){a.x*cos(B)-a.y*sin(B),a.y*cos(B)+a.x*sin(B)};}\ndouble cross(node a,node b){return a.x*b.y-a.y*b.x;}\ndouble dot(node a,node b){return a.x*b.x+a.y*b.y;}\ndouble distance(node a,node b){return (a-b).len();}\nnode projection(node p1,node p2,node p){node v=p2-p1;return p1+v*(dot(v,p-p1)/dot(v,v));}\nnode reflection(node p1,node p2,node p){node P=projection(p1,p2,p);P=P*2-p;return P;}\nvoid Counter_Clockwise(node p1,node p2,node p){\n    if(cross(p2-p1,p-p1)>eps){puts(\"COUNTER_CLOCKWISE\");return;}\n    if(cross(p2-p1,p-p1)<-eps){puts(\"CLOCKWISE\");return;}\n    if(dot(p2-p1,p-p1)<-eps){puts(\"ONLINE_BACK\");return;}\n    if(dot(p2-p1,p2-p1)>=dot(p-p1,p2-p1)){puts(\"ON_SEGMENT\");return;}\n    puts(\"ONLINE_FRONT\");\n}\nbool insegment(node A,node B,node p){\n    if(fh(cross(B-A,p-A)))return false;\n    return ((fh(p.x-A.x)>=0 && fh(B.x-p.x)>=0) || (fh(p.x-A.x)<=0 && fh(B.x-p.x)<=0)) && ((fh(p.y-A.y)>=0 && fh(B.y-p.y)>=0) || (fh(p.y-A.y)<=0 && fh(B.y-p.y)<=0));\n}\nint parallel(node A1,node A2,node B1,node B2){\n    if(!fh(cross(B2-B1,A2-A1)))return 2;\n    if(!fh(dot(B2-B1,A2-A1)))return 1;\n    return 0;\n}\nbool intersection(node A1,node A2,node B1,node B2){\n    if(!fh(cross(B2-B1,A2-A1))){\n        if(insegment(A1,A2,B1) || insegment(A1,A2,B2) || insegment(B1,B2,A1) || insegment(B1,B2,A2))return true;\n        return false;\n    }\n    return fh(cross(A1-B1,B2-B1)*cross(A2-B1,B2-B1))<=0 && (fh(cross(B1-A1,A2-A1)*cross(B2-A1,A2-A1))<=0);\n}\nnode getintersection(node A1,node A2,node B1,node B2){\n    node v=A2-A1;\n    return A1+v*(cross(B2-B1,B1-A1)/cross(B2-B1,A2-A1));\n}\ndouble distance(node A1,node A2,node B1,node B2){\n    if(intersection(A1,A2,B1,B2))return 0.0;\n    node p;double ans=1e18;\n    ans=min(ans,(A1-B1).len());ans=min(ans,(A1-B2).len());ans=min(ans,(A2-B1).len());ans=min(ans,(A2-B2).len());\n    p=projection(A1,A2,B1);\n    if(insegment(A1,A2,p))ans=min(ans,(B1-p).len());\n    p=projection(A1,A2,B2);\n    if(insegment(A1,A2,p))ans=min(ans,(B2-p).len());\n    p=projection(B1,B2,A1);\n    if(insegment(B1,B2,p))ans=min(ans,(A1-p).len());\n    p=projection(B1,B2,A2);\n    if(insegment(B1,B2,p))ans=min(ans,(A2-p).len());\n    return ans;\n}\ndouble area(node *p,int n){\n    double area=0;\n    for(int i=1;i<n;i++){\n\t\tarea+=cross(p[i],p[i+1]);\n\t}\n    area+=cross(p[n],p[1]);\n    return area*0.5;\n}\nbool is_convex(node *p,int n){\n    for(int i=2;i<n;i++)if(cross(p[i]-p[i-1],p[i+1]-p[i-1])<0)return false;\n    if(cross(p[n]-p[n-1],p[1]-p[n-1])<0)return false;\n    if(cross(p[1]-p[n],p[2]-p[n])<0)return false;\n    return true;\n}\nint inConvex(node O,node *p,int n){\n    int cnt=0;\n    for(int i=0;i<n;i++){\n        if(insegment(p[i],p[(i+1)%n],O))return 1;\n        node A=p[i]-O,B=p[(i+1)%n]-O;\n        if(A.y>B.y)swap(A,B);\n        if(A.y<eps && B.y>eps && cross(A,B)>eps)cnt++;\n    }\n    return cnt&1?2:0;\n}\nbool cmp(node a,node b){return a.y<b.y || (!fh(a.y-b.y) && a.x<b.x);}\nbool cmp1(node a,node b){return a.x<b.x || (!fh(a.x-b.x) && a.y<b.y);}\nbool cmp2(node a,node b){return atan2(a.y,a.x)<atan2(b.y,b.x) || (!fh(atan2(a.y,a.x)-atan2(b.y,b.x)) && a.x>b.x);}\ndouble Diameter(node *p,int n){\n    int id=1;double ans=0;\n    for(int i=0;i<n;i++){\n        node p1=p[i],p2=p[(i+1)%n];\n        for(int nxt=(id+1)%n;fh(fabs(cross(p[nxt]-p1,p2-p1))-fabs(cross(p[id]-p1,p2-p1)))>=0;id=nxt,nxt=(nxt+1)%n);\n        ans=max(ans,max((p[id]-p1).len(),(p[id]-p2).len()));\n    }\n    return ans;\n}\ndouble cutarea(node *p,int n,node A1,node A2){\n\tnode c[200010];int tot=0;\n\tfor(int i=0;i<n;i++){\n\t\tnode p1=p[i],p2=p[(i+1)%n];\n\t\tnode P=getintersection(p1,p2,A1,A2);\n\t\tif(insegment(p1,p2,P))c[++tot]=P;\n\t\tif(cross(A2-A1,p2-A1)>-eps)c[++tot]=p2;\n\t}\n\treturn area(c,tot);\n}\ndouble Closest_Pair(node *p,int n){\n\tdouble ang=(rand()%360+1)*1./360*Pi/2,ans=1e18;\n\tfor(int i=1;i<=n;i++)p[i]=corner(p[i],ang);\n\tsort(p+1,p+n+1,cmp1);\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=1;j<=200 && i+j<=n;j++)\n\t\t\tans=min(ans,distance(p[i],p[i+j]));\n\treturn ans;\n}\nstruct circle{\n\tnode o;double r;\n};\nint Intersection_of_Circles(circle c1,circle c2){\n\tif((c1.o-c2.o).real()-sqr(c1.r+c2.r)>eps)return 4;\n\tif((c1.o-c2.o).real()-sqr(c1.r+c2.r)>-eps)return 3;\n\tif((c1.o-c2.o).real()-sqr(c1.r-c2.r)<-eps)return 0;\n\tif((c1.o-c2.o).real()-sqr(c1.r-c2.r)<eps)return 1;\n\treturn 2;\n}\nint main(){\n\tcircle c1,c2;\n\tc1.o.x=gi();c1.o.y=gi();c1.r=gi();\n\tc2.o.x=gi();c2.o.y=gi();c2.r=gi();\n\tprintf(\"%d\\n\",Intersection_of_Circles(c1,c2));\n    return 0;\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nstruct Circle{\n    int x;\n    int y;\n    int r;\n};\n\nbool operator == (Circle, Circle);\nbool operator != (Circle, Circle);\n\nint main(){\n    Circle c1, c2;\n    double D;\n    int Sr;\n    \n    //cout << \"Input Data\" << endl;\n    cin >> c1.x >> c1.y >> c1.r;\n    cin >> c2.x >> c2.y >> c2.r;\n    \n    if(!(-1000 <= c1.x && c1.x <= 1000) || !(-1000 <= c1.y && c1.y <= 1000) || !(-1000 <= c2.x && c2.x <= 1000) || !(-1000 <= c2.y && c2.y <= 1000))\n        return -1;\n    if(!(1 <= c1.r && c1.r <= 1000) || !(1 <= c2.r && c2.r <= 1000))\n        return -1;\n    if(c1 == c2)\n        return -1;\n    \n    D = sqrt(pow(c1.x - c2.x, 2) + pow(c1.y - c2.y, 2));\n    Sr = c1.r + c2.r;\n    \n    if(D > Sr)\n        cout << \"4\" << endl;\n    else if(D < Sr){\n        if(D < abs(c1.r - c2.r))\n            cout << \"0\" << endl;\n        else if(D > abs(c1.r - c2.r))\n            cout << \"2\" << endl;\n        else\n            cout << \"1\" << endl;\n    }\n    else\n        cout << \"3\" << endl;\n        \n    \n    return 0;\n}\n\n\nbool operator == (Circle c1, Circle c2){\n    return c1.x == c2.x && c1.y == c2.y && c1.r == c2.r;\n}\n\nbool operator != (Circle c1, Circle c2){\n    return !(c1.x == c2.x && c1.y == c2.y && c1.r == c2.r);\n}\n\n"
  },
  {
    "language": "C++",
    "code": "\n#include <stdio.h>\n\nint main(){\n\n  int i=0, x[2], y[2], r[2], rplus, rminus,rdistance;\n\n  while(i<2){\n    scanf(\"%d%d%d\", &x[i],&y[i],&r[i]);\n    i++;\n  }\n\n  rdistance = (x[0]-x[1])*(x[0]-x[1]) +\t(y[0]-y[1])*(y[0]-y[1]); //２乗すればsqrtが不要               \n  rplus = (r[0]+r[1])*(r[0]+r[1]);\n  rminus = (r[0]-r[1])*(r[0]-r[1]); //２乗して、|r1-r2|の絶対値を必要なくしている.他も２乗する.       \n\n  if(rdistance > rplus)\tprintf(\"4\\n\");\n  else if(rdistance == rplus) printf(\"3\\n\");\n  else if(rminus < rdistance &&\trdistance < rplus) printf(\"2\\n\");\n  else if(rdistance == rminus) printf(\"1\\n\");\n  else if(rdistance < rminus) printf(\"0\\n\");\n\n\n\n  return 0;\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\nusing uint = unsigned int;\nusing ll = long long;\nusing ull = unsigned long long;\nconstexpr ll TEN(int n) { return (n==0) ? 1 : 10*TEN(n-1); }\ntemplate<class T> using V = vector<T>;\ntemplate<class T> using VV = V<V<T>>;\n\ntemplate<class T> ostream& operator<<(ostream& os, const V<T> &v) {\n    os << \"[\"; for (auto p: v) os << p << \", \"; os << \"]\";\n    return os;\n}\n\nusing D = double;\nconst D PI = acos(D(-1)), EPS = 1e-10;\n\nint sgn(D a) { return (abs(a) <= EPS) ? 0 : (a < 0 ? -1 : 1); }\nint sgn(D a, D b) { return sgn(a-b); }\n//relative sign\n// int rsgn(D a, D f) {\n//     if (abs(a) <= f*EPS) return 0;\n//     return (a < 0) ? -1 : 1;\n// }\nstruct Pt2 {\n    D x, y;\n    Pt2() : x(0), y(0) {}\n    Pt2(D _x, D _y) : x(_x), y(_y) {}\n    Pt2 operator+(const Pt2 &r) const { return Pt2(x+r.x, y+r.y); }\n    Pt2 operator-(const Pt2 &r) const { return Pt2(x-r.x, y-r.y); }\n    Pt2 operator*(const Pt2 &r) const { return Pt2(x*r.x-y*r.y, x*r.y+y*r.x); }\n\n    Pt2 operator*(const D &r) const { return Pt2(x*r, y*r); }\n    Pt2 operator/(const D &r) const { return Pt2(x/r, y/r); }\n\n    Pt2& operator+=(const Pt2 &r) { return *this=*this+r; }\n    Pt2& operator-=(const Pt2 &r) { return *this=*this-r; }\n    Pt2& operator*=(const Pt2 &r) { return *this=*this*r; }\n    Pt2& operator*=(const D &r) { return *this=*this*r; }\n    Pt2& operator/=(const D &r) { return *this=*this/r; }\n    \n    Pt2 operator-() const { return Pt2(-x, -y); }\n\n    bool operator<(const Pt2 &r) const { return 2*sgn(x, r.x)+sgn(y, r.y)<0; }\n    bool operator==(const Pt2 &r) const { return sgn((*this-r).rabs()) == 0; }\n\n    D norm() const { return x*x + y*y; }\n    D abs() const { return sqrt(norm()); }\n    D rabs() const { return max(std::abs(x), std::abs(y)); } // robust abs\n    D arg() const { return atan2(y, x); }\n\n    pair<D, D> to_pair() const { return make_pair(x, y); }\n    static Pt2 polar(D le, D th) { return Pt2(le*cos(th), le*sin(th)); }\n};\nostream& operator<<(ostream& os, const Pt2 &p) {\n    return os << \"P(\" << p.x << \", \" << p.y << \")\";\n}\nusing P = Pt2;\n\nstruct L {\n    P s, t;\n    L() {}\n    L(P _s, P _t) : s(_s), t(_t) {}\n    P vec() const { return t-s; }\n    D abs() const { return vec().abs(); }\n    D arg() const { return vec().arg(); }\n};\nostream& operator<<(ostream& os, const L &l) {\n    return os << \"L(\" << l.s << \", \" << l.t << \")\";\n}\n\nD cross(P a, P b) { return a.x*b.y - a.y*b.x; }\nD dot(P a, P b) { return a.x*b.x + a.y*b.y; }\n// cross(a, b) is too small?\nint sgncrs(P a, P b) {\n    D cr = cross(a, b);\n    if (abs(cr) <= (a.rabs() + b.rabs()) * EPS) return 0;\n    return (cr < 0) ? -1 : 1;\n}\n\n// -2, -1, 0, 1, 2 : front, clock, on, cclock, back\nint ccw(P b, P c) {\n    int s = sgncrs(b, c);\n    if (s) return s;\n    if (!sgn(c.rabs()) || !sgn((c-b).rabs())) return 0;\n    if (dot(b, c) < 0) return 2;\n    if (dot(-b, c-b) < 0) return -2;\n    return 0;\n}\nint ccw(P a, P b, P c) { return ccw(b-a, c-a); }\nint ccw(L l, P p) { return ccw(l.s, l.t, p); }\n\nstruct C {\n    P p; D r;\n    C() {}\n    C(P _p, D _r) : p(_p), r(_r) {}\n};\n\n//共通接線\nint tangent(const C &c, const C &d, L &l, L &r, bool inter) {\n    D di = (d.p - c.p).abs(), ar = (d.p - c.p).arg();\n    if (sgn(di) == 0) {\n        assert(sgn(c.r - d.r)); // prohibit same circles\n        return 0;\n    }\n    D costh = c.r + (inter ? d.r : -d.r);\n    int si = sgn(abs(costh), di); costh /= di;\n    if (si == 1) return 0;\n    else if (si == 0) costh = sgn(costh);\n    D th = acos(costh);\n    P base;\n    base = P::polar(1, ar-th);\n    l = L(c.p + base * c.r, d.p + base * d.r * (inter ? -1 : 1));\n    base = P::polar(1, ar+th);\n    r = L(c.p + base * c.r, d.p + base * d.r * (inter ? -1 : 1));\n    if (si == 0) {\n        l.t += P::polar(1, ar + PI/2);\n        r.t += P::polar(1, ar + PI/2);\n        return 1;\n    }\n    return 2;\n}\n\nint main() {\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    cout << setprecision(20) << fixed;\n\n    C c1, c2;\n    cin >> c1.p.x >> c1.p.y >> c1.r;    \n    cin >> c2.p.x >> c2.p.y >> c2.r;\n    L buf1, buf2;\n    cout << tangent(c1, c2, buf1, buf2, false) + tangent(c1, c2, buf1, buf2, true) << endl;\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\nusing namespace std;\n\n\nfloat c1x, c1y, c1r, c2x, c2y, c2r;\n\nint judge(){\n\tfloat x = max(c1x,c2x) - min(c1x,c2x);\n\tfloat y = max(c1y,c2y) - min(c1y,c2y);\n\tfloat r = hypot(x,y);\n\tif(r > c1r + c2r){\n\t\treturn 4;\n\t}\n\telse if(r == c1r + c2r){\n\t\treturn 3;\n\t}\n\telse if(r == max(c1r,c2r) - min(c1r,c2r)){\n\t\treturn 1;\n\t}\n\telse if(r < max(c1r,c2r) - min(c1r,c2r)){\n\t\treturn 0;\n\t}\n\telse{\n\t\treturn 2;\n\t}\n}\n\n\nint main(){\n\tcin >> c1x >> c1y >> c1r;\n\tcin >> c2x >> c2y >> c2r;\n\tcout << judge() << endl;\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <algorithm>\n#include <cmath>\n#include <vector>\n#include <cassert>\n\nusing namespace std;\n\nconst double EPS = 1e-8;\n\nint dcmp(double d) {\n    if (fabs(d) < EPS) {\n        return 0;\n    } else {\n        return d < 0 ? -1 : 1;\n    }\n}\n\nstruct Vector {\n    double x, y;\n\n    Vector(double x = 0, double y = 0) : x(x), y(y) {\n    }\n\n    bool operator<(const Vector& other) const {\n        return dcmp(x - other.x) < 0 || (dcmp(x - other.x) == 0 && dcmp(y - other.y) < 0);\n    }\n};\n\ntypedef Vector Point;\n\ndouble dot(const Vector& a, const Vector& b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(const Vector& a, const Vector& b) {\n    return a.x * b.y - a.y * b.x;\n}\n\nVector operator+(const Vector& a, const Vector& b) {\n    return Vector(a.x + b.x, a.y + b.y);\n}\n\nVector operator-(const Vector& a, const Vector& b) {\n    return Vector(a.x - b.x, a.y - b.y);\n}\n\nVector operator*(const Vector& a, const double& p) {\n    return Vector(a.x * p, a.y * p);\n}\n\ndouble angle(const Vector& a) {\n    return atan2(a.y, a.x);\n}\n\ndouble length(const Vector& a) {\n    return sqrt(dot(a, a));\n}\n\nstruct Circle {\n    Point c;\n    double r;\n\n    Circle(double x = 0, double y = 0, double r = 0) : c(Point(x, y)), r(r) {\n    }\n\n    Point point(double rad) const {\n        return Point(c.x + r * cos(rad), c.y + r * sin(rad));\n    }\n};\n\nint intersect(const Circle& a, const Circle& b) {\n    int count = 0;\n    Vector v = b.c - a.c;\n    double d = length(v);\n\n    if (dcmp(d - a.r - b.r) > 0) {\n        count = 4;\n    } else if (dcmp(d - a.r - b.r) == 0) {\n        count = 3;\n    } else if (dcmp(d - fabs(a.r - b.r)) < 0) {\n        count = 0;\n    } else if (dcmp(d - fabs(a.r - b.r)) == 0) {\n        count = 1;\n    } else {\n        count = 2;\n    }\n    return count;\n}\n\nint main() {\n    double x, y, r;\n    cin >> x >> y >> r;\n    Circle c1(x, y, r);\n\n    cin >> x >> y >> r;\n    Circle c2(x, y, r);\n\n    int ans = intersect(c1, c2);\n\n    cout << fixed << setprecision(8);\n\n    if (ans == 4) {\n        cout << \"FOUR\" << endl;\n    }\n    else {\n        cout << ans << endl;\n    }\n\n    return 0;\n\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n\nusing namespace std;\nshort int result = 0;\nshort int *color; /*\n    0 - black\n    1 - grey\n    2 - white\n*/\n\nvector<short int> *g; // Graph\n\nvoid DFS(short int v){\n    int node;\n    color[v] = 1;\n\n    for(short int i = 0; i < g[v].size(); i++){\n        node = g[v].at(i);\n\n        if(color[node] == 1){\n            result = 1;\n        }\n        if(color[node] == 2){\n            DFS(node);\n        }\n    }\n    color[v] = 0;\n\n};\n\n\nint main() {\n\n    short int E; // number of transitions\n    short int s, t; // transitions\n    short int V; // number of nodes\n\n    // get properties of Graph\n    cin >> V >> E;\n\n    color = new short int[V];\n    g = new vector<short int>[V];\n\n\n    // fill Graph\n    for(short int i = 0; i < E; i++){\n        cin >> s >> t;\n        g[s].push_back(t);\n    }\n    for(short int i = 0; i < V; i++){\n        color[i] = 2;\n    }\n    for(short int i = 0; i < V; i++){\n        if(color[i] == 2){\n            DFS(i);\n        }\n    }\n\n    cout << result << endl;\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <cstdlib>\n\nusing namespace std;\n//float abs_func(float x) {\n//    if (x>0) {\n//        return x;\n//    } else {\n//        return -x;\n//    }\n//}\nint main()\n{\n    float cx1, cy1, r1, cx2, cy2, r2;\n    cin >> cx1 >> cy1 >> r1 >> cx2 >> cy2 >> r2;\n    float d = sqrt(pow(cx1-cx2, 2) + pow(cy1-cy2, 2));\n    if (r1 + r2 < d) {\n        cout << \"4\\n\";\n    } else if (r1 + r2 == d) {\n        cout << \"3\\n\";\n    } else { // r1 + r2 > d\n        float sub = abs(r1-r2);\n        if (sub < d) {\n            cout << \"2\\n\";\n        } else if (sub == d) {\n            cout << \"1\\n\";\n        } else { // |r1-r2| > d\n            cout << \"0\\n\";\n        }\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n\nconst double inf=1e20;\n\ninline int sign(const double &x){\n    if(x>EPS) return 1;\n    else if(x<-EPS) return -1;\n    return 0;\n}\n\n/*   点  */\nstruct Point{\n    double x,y;\n\n    Point(double x=0,double y=0):x(x),y(y){}\n\n    Point operator + (Point p) { return Point(x+p.x,y+p.y); }\n    Point operator - (Point p) { return Point(x-p.x,y-p.y); }\n    Point operator * (double k) { return Point(k*x,k*y); }\n    Point operator / (double k) { return Point(x/k,y/k); }\n\n    //向量的大小\n    inline double abs(){ return sqrt(norm()); }\n    inline double norm() { return x*x+y*y; }\n\n    bool operator < (const Point & p) const{\n        return x!=p.x?x<p.x:y<p.y;\n    }\n\n    bool operator == (const Point & p) const {\n        return fabs(x-p.x)<EPS&&fabs(y-p.y)<EPS;\n    }\n};\n\n//两点间的距离\ninline double getDistance(Point a,Point b){\n    return (a-b).abs();\n}\n\n/*   向量  */\ntypedef Point Vector;\n\n//向量a和b的内积\ndouble dot(Vector a,Vector b){\n    return a.x*b.x+a.y*b.y;\n}\n//向量a和b的外积\ndouble cross(Vector a,Vector b){\n    return a.x*b.y-a.y*b.x;\n}\n\n// *********圆***********\nstruct Circle{\n    Point c;\n    double r;\n    Circle(Point c = Point() ,double r = 0.0 ):c(c),r(r){}\n};\n\n//两个圆的位置关系\nconst int SEPARATION = 4;        //相离\nconst int EXTERNAL_CUT = 3;      //外切\nconst int INTERSECTION = 2;      //相交\nconst int INTERNAL_CUT = 1;      //内切\nconst int INCLUDE = 0;           //内含\n\nint getCircleToCircle(Circle c1,Circle c2){\n    double dis=getDistance(c1.c,c2.c);\n    if(c1.r+c2.r<dis){\n        return SEPARATION;\n    }else if(c1.r+c2.r==dis){\n        return EXTERNAL_CUT;\n    }else {\n        if(sign(fabs(c1.r-c2.r)-dis)==0) return INTERNAL_CUT;\n        else if(sign(fabs(c1.r-c2.r)-dis)==1) return INCLUDE;\n        return INTERSECTION;\n    }\n}\n\n\nint main(){\n    double x,y,r;\n    scanf(\"%lf%lf%lf\",&x,&y,&r);\n    Circle c1(Point(x,y),r);\n    scanf(\"%lf%lf%lf\",&x,&y,&r);\n    Circle c2(Point(x,y),r);\n    printf(\"%d\\n\",getCircleToCircle(c1,c2));\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#ifdef ONLINE_JUDGE\n\t#include <boost/multiprecision/cpp_int.hpp>\n\t#include <boost/multiprecision/cpp_dec_float.hpp>\n\tusing bll = boost::multiprecision::cpp_int;\n\tusing bdouble = boost::multiprecision::cpp_dec_float_100;\n#endif\n#ifdef LOCAL_DEV\n\tvoid debug_impl() { std::cerr << std::endl; }\n\ttemplate<typename Head, typename... Tail> void debug_impl(Head head, Tail... tail) { std::cerr << \" \" << head << (sizeof...(tail) ? \",\" : \"\"); debug_impl(tail...); }\n\t#define debug(...) { std::cerr << std::boolalpha << \"(\" << #__VA_ARGS__ << \") =\"; debug_impl(__VA_ARGS__); std::cerr << std::noboolalpha; }\n#else\n\t#define debug(...) {}\n#endif\n#ifdef LOCAL_TEST\n\t#define BOOST_STACKTRACE_USE_ADDR2LINE\n\t#define BOOST_STACKTRACE_ADDR2LINE_LOCATION /usr/local/opt/binutils/bin/addr2line\n\t#define _GNU_SOURCE\n\t#include <boost/stacktrace.hpp>\n\ttemplate<typename T> class dvector : public std::vector<T> {\n\tpublic:\n\t\tdvector() : std::vector<T>() {}\n\t\texplicit dvector(size_t n, const T& value = T()) : std::vector<T>(n, value) {}\n\t\tdvector(const std::vector<T>& v) : std::vector<T>(v) {}\n\t\tdvector(const std::initializer_list<T> il) : std::vector<T>(il) {}\n\t\tdvector(const typename std::vector<T>::iterator first, const typename std::vector<T>::iterator last) : std::vector<T>(first, last) {}\n\t\tdvector(const std::string::iterator first, const std::string::iterator last) : std::vector<T>(first, last) {}\n\t\tT& operator[](size_t n) {\n\t\t\ttry { return this->at(n); } catch (const std::exception& e) {\n\t\t\t\tstd::cerr << boost::stacktrace::stacktrace() << std::endl; return this->at(n);\n\t\t\t}\n\t\t}\n\t\tconst T& operator[](size_t n) const {\n\t\t\ttry { return this->at(n); } catch (const std::exception& e) {\n\t\t\t\tstd::cerr << boost::stacktrace::stacktrace() << std::endl; return this->at(n);\n\t\t\t}\n\t\t}\n\t};\n\tclass dbool {\n\tprivate:\n\t\tbool boolvalue;\n\tpublic:\n\t\tdbool() : boolvalue(false) {}\n\t\tdbool(bool b) : boolvalue(b) {}\n\t\tdbool(const dbool &b) : boolvalue(b.boolvalue) {}\n\t\toperator bool&() { return boolvalue; }\n\t\toperator const bool&() const { return boolvalue; }\n\t};\n\ttemplate<typename T> std::ostream& operator<<(std::ostream& s, const dvector<T>& v) {\n\t\tfor (int i = 0, len = v.size(); i < len; ++i){ s << v[i]; if (i < len - 1) s << \"\\t\"; } return s; }\n\ttemplate<typename T> std::ostream& operator<<(std::ostream& s, const dvector< dvector<T> >& vv) {\n\t\tfor (int i = 0, len = vv.size(); i < len; ++i){ s << vv[i] << std::endl; } return s; }\n\ttemplate<typename T> std::ostream& operator<<(std::ostream& s, const std::set<T>& se) {\n\t\ts << \"{ \"; for (auto itr = se.begin(); itr != se.end(); ++itr){ s << (*itr) << \"\\t\"; } s << \"}\"; return s; }\n\ttemplate<typename T> std::ostream& operator<<(std::ostream& s, const std::multiset<T>& se) {\n\t\ts << \"{ \"; for (auto itr = se.begin(); itr != se.end(); ++itr){ s << (*itr) << \"\\t\"; } s << \"}\"; return s; }\n\ttemplate<typename T1, typename T2> std::ostream& operator<<(std::ostream& s, const std::map<T1, T2>& m) {\n\t\ts << \"{\" << std::endl; for (auto itr = m.begin(); itr != m.end(); ++itr){ s << \"\\t\" << (*itr).first << \" : \" << (*itr).second << std::endl; } s << \"}\"; return s; }\n\ttemplate<typename T1, typename T2> std::ostream& operator<<(std::ostream& s, const std::pair<T1, T2>& p) { \n\t\treturn s << \"(\" << p.first << \", \" << p.second << \")\"; }\n\t#define vector dvector\n\t#define bool dbool\n\tclass SIGFPE_exception : std::exception {};\n\tclass SIGSEGV_exception : std::exception {};\n\tvoid catch_SIGFPE(int e) { std::cerr << boost::stacktrace::stacktrace() << std::endl; throw SIGFPE_exception();\t}\n\tvoid catch_SIGSEGV(int e) { std::cerr << boost::stacktrace::stacktrace() << std::endl; throw SIGSEGV_exception(); }\n\tsigned convertedmain();\n\tsigned main() { signal(SIGFPE, catch_SIGFPE); signal(SIGSEGV, catch_SIGSEGV); return convertedmain(); }\n\t#define main() convertedmain()\n#endif\n//#define int long long\nusing ll = long long;\n//constexpr int INF = 1e9;//INT_MAX=(1<<31)-1=2147483647\nconstexpr ll INF = (ll)1e18;//(1LL<<63)-1=9223372036854775807\nconstexpr ll MOD = (ll)1e9 + 7;\nconstexpr double EPS = 1e-9;\nconstexpr ll dx[4] = {1LL, 0LL, -1LL, 0LL};\nconstexpr ll dy[4] = {0LL, 1LL, 0LL, -1LL};\nconstexpr ll dx8[8] = {1LL, 0LL, -1LL, 0LL, 1LL, 1LL, -1LL, -1LL};\nconstexpr ll dy8[8] = {0LL, 1LL, 0LL, -1LL, 1LL, -1LL, 1LL, -1LL};\n#define rep(i, n)   for(ll i=0, i##_length=(n); i< i##_length; ++i)\n#define repeq(i, n) for(ll i=1, i##_length=(n); i<=i##_length; ++i)\n#define rrep(i, n)   for(ll i=(n)-1; i>=0; --i)\n#define rrepeq(i, n) for(ll i=(n)  ; i>=1; --i)\n#define all(v) (v).begin(), (v).end()\n#define rall(v) (v).rbegin(), (v).rend()\nvoid p() { std::cout << '\\n'; }\ntemplate<typename Head, typename... Tail> void p(Head head, Tail... tail) { std::cout << head << (sizeof...(tail) ? \" \" : \"\"); p(tail...); }\ntemplate<typename T> inline void pv(vector<T> &v) { for(ll i=0, N=v.size(); i<N; i++) std::cout << v[i] << \" \\n\"[i==N-1]; }\ntemplate<typename T> inline T gcd(T a, T b) { return b ? gcd(b,a%b) : a; }\ntemplate<typename T> inline T lcm(T a, T b) { return a / gcd(a,  b) * b; }\ntemplate<typename T> inline bool chmax(T &a, T b) { return a < b && (a = b, true); }\ntemplate<typename T> inline bool chmin(T &a, T b) { return a > b && (a = b, true); }\ntemplate<typename T> inline void uniq(vector<T> &v) { v.erase(unique(v.begin(), v.end()), v.end()); }\n\n/*-----8<-----template-----8<-----*/\n\n//doubleにおける == 判定\ninline double equals(double a,double b){ return std::abs(a-b)<EPS; }\n\n//点、ベクトル\nclass Point {\npublic:\n\tdouble x,y;\n\tPoint(double x=0., double y=0.) : x(x), y(y) {}\n\tPoint operator + (Point p) {return Point(x+p.x, y+p.y);}\n\tPoint operator - (Point p) {return Point(x-p.x, y-p.y);}\n\tPoint operator * (Point p) {return Point(x*p.x, y*p.y);}\n\tPoint operator / (Point p) {return Point(x/p.x, y/p.y);}\n\tPoint operator + (double n) {return Point(x+n, y+n);}\n\tPoint operator - (double n) {return Point(x-n, y-n);}\n\tPoint operator * (double n) {return Point(x*n, y*n);}\n\tPoint operator / (double n) {return Point(x/n, y/n);}\n\n\tdouble abs(){ return sqrt(norm()); }\n\tdouble norm(){ return x*x + y*y; }\n\n\tbool operator < (const Point &p) const {\n\t\treturn x!=p.x ? x<p.x : y<p.y;\n\t}\n\tbool operator == (const Point &p) const {\n\t\treturn std::abs(x-p.x)<EPS && std::abs(y-p.y)<EPS;\n\t}\n\t\n};\nusing Vector = Point;\nstd::ostream& operator<<(std::ostream& s, const Point& p) {\n\treturn s << \"(\" << p.x << \", \" << p.y << \")\";\n}\n\n//線分、直線\nclass Segment {\npublic:\n\tPoint p1,p2;\n\tSegment() {}\n\tSegment(Point p1, Point p2) : p1(p1), p2(p2) {}\n\t// Ax + By + C = 0 を満たす直線\n\tSegment(double A, double B, double C) {\n\t\tif (std::abs(A) < EPS && std::abs(B) < EPS) {\n\t\t\tabort();\n\t\t} else if (std::abs(A) < EPS) {\n\t\t\t*this = Segment(Point(0, -C / B), Point(1, -C / B));\n\t\t} else if (std::abs(B) < EPS) {\n\t\t\t*this = Segment(Point(-C / A, 0), Point(-C / A, 1));\n\t\t} else {\n\t\t\t*this = Segment(Point(0, -C / B), Point(-C / A, 0));\n\t\t}\n\t}\n\tbool operator == (const Segment &p) const {\n\t\treturn p1==p.p1 && p2==p.p2;\n\t}\n};\nusing Line = Segment;\nstd::ostream& operator<<(std::ostream& s, const Segment& se) {\n\treturn s << \"(\" << se.p1 << \", \" << se.p2 << \")\";\n}\n\n//点を回転させる\n//角度radはラジアンで指定すること\nVector rotate(Vector a, double rad){\n\treturn Vector(a.x*cos(rad)-a.y*sin(rad), a.x*sin(rad)+a.y*cos(rad));\n}\n//90度左回転させたベクトルを返す\nVector rotate90(Vector a){\n\treturn Vector(-a.y, a.x);\n}\n//180度回転させたベクトルを返す\nVector rotate180(Vector a){\n\treturn Vector(-a.x, -a.y);\n}\n//ベクトルの内積\ndouble dot(Vector a, Vector b){\n\treturn a.x*b.x + a.y*b.y;\n}\n//ベクトルの外積\ndouble cross(Vector a, Vector b){\n\treturn a.x*b.y - a.y*b.x;\n}\n//ベクトルa,bの角度を[0, π]の範囲で返す\ndouble angle(Vector a,Vector b){\n\treturn acos(dot(a,b)/a.abs()/b.abs());\n}\n//直交判定\nbool isOrthogonal(Vector a,Vector b){\n\treturn equals(dot(a,b), 0.0);\n}\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n\treturn isOrthogonal(a1-a2, b1-b2);\n}\nbool isOrthogonal(Segment s1,Segment s2){\n\treturn equals(dot(s1.p2-s1.p1, s2.p2-s2.p1), 0.0);\n}\n//平行判定\nbool isParallel(Vector a,Vector b){\n\treturn equals(cross(a,b), 0.0);\n}\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n\treturn isParallel(a1-a2, b1-b2);\n}\nbool isParallel(Segment s1,Segment s2){\n\treturn equals(cross(s1.p2-s1.p1, s2.p2-s2.p1), 0.0);\n}\n//射影\nPoint project(Segment s,Point p){\n\tVector base = s.p2-s.p1;\n\tdouble r = dot(p-s.p1, base)/base.norm();\n\treturn base*r + s.p1;\n}\n//反射\nPoint reflect(Segment s,Point p){\n\treturn p + (project(s,p)-p)*2;\n}\n\n//p0,p1,p2が反時計回りになる\nstatic constexpr int COUNTER_CLOCKWISE = 1;\n//p0,p1,p2が時計回りになる\nstatic constexpr int CLOCKWISE = -1;\n//p2,p0,p1がこの順で同一直線上にある\nstatic constexpr int ONLINE_BACK = 2;\n//p0,p1,p2がこの順で同一直線上にある\nstatic constexpr int ONLINE_FRONT = -2;\n//p2が線分p0p1上にある\nstatic constexpr int ON_SEGMENT = 0;\n/*\n\t\t\t\t\tCOUNTER_CLOCKWISE\n\n ONLINE_BACK -- [p0 -- ON_SEGMENT -- p1] --- ONLINE_FRONT\n\n\t\t\t\t\t\tCLOCKWISE\n*/\nint ccw(Point p0, Point p1, Point p2){\n\tVector a=p1-p0;\n\tVector b=p2-p0;\n\tif(cross(a,b)>EPS)return COUNTER_CLOCKWISE;\n\tif(cross(a,b)<-EPS)return CLOCKWISE;\n\tif(dot(a,b)<-EPS)return ONLINE_BACK;\n\tif(a.norm()<b.norm())return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\n//線分p1p2と線分p3p4の交差判定\n//端点が他方の線分上にある場合、線分二つが平行に重なる場合も交差しているとみなす\nbool intersect(Point p1, Point p2, Point p3, Point p4){\n\treturn (ccw(p1,p2,p3)*ccw(p1,p2,p4)<=0 && ccw(p3,p4,p1)*ccw(p3,p4,p2)<=0);\n}\nbool intersect(Segment s1, Segment s2){\n\treturn intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\n//二点間の距離\ndouble getDistance(Point a,Point b){\n\treturn (a-b).abs();\n}\n//点と直線の距離\ndouble getDistanceLP(Line l,Point p){\n\treturn std::abs(cross(l.p2-l.p1, p-l.p1)) / (l.p2-l.p1).abs();\n}\n//点と線分の距離\ndouble getDistanceSP(Segment s,Point p){\n\tif(dot(s.p2-s.p1, p-s.p1)<0.)return (p-s.p1).abs();\n\tif(dot(s.p1-s.p2, p-s.p2)<0.)return (p-s.p2).abs();\n\treturn getDistanceLP(s,p);\n}\n//線分と線分の距離\ndouble getDistance(Segment s1,Segment s2){\n\tif(intersect(s1,s2))return 0.;\n\treturn min({getDistanceSP(s1,s2.p1), getDistanceSP(s1,s2.p2), getDistanceSP(s2,s1.p1), getDistanceSP(s2,s1.p2)});\n}\n\n//線分s1と線分s2の交点\nPoint getCrossPoint(Segment s1, Segment s2){\n    double A = cross(s1.p2 - s1.p1, s2.p2 - s2.p1);\n    double B = cross(s1.p2 - s1.p1, s1.p2 - s2.p1);\n    if (std::abs(A) < EPS && std::abs(B) < EPS) return s1.p1;// same line\n    if (std::abs(A) < EPS) assert(false);// !!!PRECONDITION NOT SATISFIED!!!\n    return s2.p1 + (s2.p2 - s2.p1) * B / A;\n}\n\n//円\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\t//c:中心の点、r=半径\n\tCircle(Point c=Point(), double r=0.) : c(c), r(r) {}\n\tbool operator == (const Circle &circle) const {\n\t\treturn c==circle.c && std::abs(r-circle.r)<EPS;\n\t}\n};\nstd::ostream& operator<<(std::ostream& s, const Circle& c) {\n\treturn s << \"(c = \" << c.c << \", r = \" << c.r << \")\";\n}\n\n//円cと線分lの交点の数を返す\nint hasCrossPoints(Circle c, Line l){\n\tdouble dis = getDistanceLP(l,c.c);\n\tif(equals(dis,c.r))return 1;\n\tif(dis < c.r)return 2;\n\treturn 0;\n}\n//円cと線分lの交点を返す\n/*\npair<Point,Point> getCrossPointCL(Circle c, Line l){\n\tassert(getDistanceLP(l,c.c) < c.r+EPS);\n\tVector pr=project(l, c.c);\n\tVector e=(l.p2-l.p1)/(l.p2-l.p1).abs();\n\tdouble base=sqrt(c.r*c.r-(pr-c.c).norm());\n\treturn {pr+e*base, pr-e*base};\n}\n*/\nvector<Point> getCrossPointCL(Circle &c, Line &l) {\n\tvector<Point> res;\n\tdouble d = getDistanceLP(l, c.c); // 中心と直線の距離\n\tif (std::abs(d - c.r) < EPS) { // 触れている\n\t\tres.push_back(project(l, c.c));\n\t\treturn res;\n\t}\n\tif (d > c.r) return res; // 離れている\n\tPoint h = project(l, c.c);\n\tPoint u = (l.p2 - l.p1) * sqrt(c.r * c.r - d * d) / (l.p2 - l.p1).abs();\n\tres.push_back(h + u);\n\tres.push_back(h - u);\n\treturn res;\n}\n\n//円の交差判定\n// 0 : 離れている\n// 1 : c1 が c2 の中で内接\n//-1 : c2 が c1 の中で内接\n// 2 : 2つの交点を持つ\n//-2 : 外接\n// 3 : c1 が c2 の中\n//-3 : c2 が c1 の中\nint intersectCC(Circle &c1, Circle &c2) {\n\tdouble d = (c1.c - c2.c).abs();\n\tif (c1.r + c2.r < d) return 0;\t\t\t\t   // 離れている\n\tif (std::abs(c1.r + c2.r - d) < EPS) return -2;  // 外接\n\tif (std::abs(d + c1.r - c2.r) < EPS) return +1;  // c1 が c2 の中で内接\n\tif (std::abs(d + c2.r - c1.r) < EPS) return -1;  // c2 が c1 の中で内接\n\tif (d + c1.r < c2.r) return +3;\t\t\t\t  // c1 が c2 の中\n\tif (d + c2.r < c1.r) return -3;\t\t\t\t  // c2 が c1 の中\n\treturn 2;\t\t\t\t\t\t\t\t\t// 2つの交点を持つ\n}\n\nvector<Point> crosspointCC(Circle &c1, Circle &c2) {\n\tvector<Point> res;\n\tdouble r1 = c1.r, r2 = c2.r, d = (c1.c - c2.c).abs();\n\tif (c1.c == c2.c) return res; // 中心が同じ\n\tint i = intersectCC(c1, c2);\n\tif (i == +1 || i == -1) { // 内接\n\t\tif (r2 < r1)\n\t\t\tres.push_back(c1.c + (c2.c - c1.c) * r1 / d);\n\t\telse\n\t\t\tres.push_back(c2.c + (c1.c - c2.c) * r2 / d);\n\t\treturn res;\n\t}\n\tif (i == -2) { // 外接\n\t\tres.push_back((c1.c * c1.r + c2.c * c2.r) / (c1.r + c2.r));\n\t\treturn res;\n\t}\n\tif (i == 0 || i == +3 || i == -3) { // 共通部分なし || 内部\n\t\treturn res;\n\t}\n\t// 2つの交点を持つ\n\tPoint p = c1.c - c2.c;\n\tdouble A = -2. * p.x, B = 2 * p.y;\n\tdouble C = (c1.c).abs() - (c2.c).abs() - r1 * r1 + r2 * r2;\n\tLine l(A, B, C);\n\treturn getCrossPointCL(c1, l);  // Ax + By + C = 0\n}\n\n\n//ベクトルpとx軸との角度を返す 返却値の範囲[-π, π]\ninline double arg(Vector p){ return atan2(p.y, p.x); }\ninline double arg(Line l){ return arg(Point(l.p1.x-l.p2.x, l.p1.y-l.p2.y)); }\n//大きさa, x軸との角度rのベクトルを返す\ninline Vector polar(double a, double r){ return Point(cos(r)*a, sin(r)*a); }\n//円c1と円c2の交点を返す\npair<Point,Point> getCrossPoints(Circle c1, Circle c2){\n\tassert(getDistance(c1.c,c2.c) < c1.r+c2.r+EPS);\n\tdouble d = (c1.c-c2.c).abs();\n\tdouble a = acos((c1.r*c1.r+d*d-c2.r*c2.r)/(c1.r*d*2.));\n\tdouble t = arg(c2.c-c1.c);\n\treturn {c1.c+polar(c1.r,t+a), c1.c+polar(c1.r,t-a)};\n}\n\nusing Polygon = vector<Point>;\n//多角形gと点pの内包関係を返す\nstatic constexpr int INSIDE = 2;\nstatic constexpr int ONLINE = 1;\nstatic constexpr int OUTSIDE = 0;\nll contains(Polygon &g, Point p){\n\tll n=g.size();\n\tbool x=false;\n\tfor(ll i=0; i<n; i++){\n\t\tPoint a=g[i]-p, b=g[(i+1)%n]-p;\n\t\tif(std::abs(cross(a,b)) < EPS && dot(a,b) < EPS) return ONLINE;\n\t\tif(a.y > b.y) swap(a,b);\n\t\tif(a.y < EPS && EPS < b.y && cross(a,b) > EPS) x=!x;\n\t}\n\treturn (x ? INSIDE : OUTSIDE);\n}\n\n//点の集合sに対する凸包を返す \nPolygon andrewScan(Polygon &s){\n\tPolygon u,l;\n\tif(s.size()<3) return s;\n\tsort(s.begin(), s.end());\n\tu.push_back(s[0]);\n\tu.push_back(s[1]);\n\tl.push_back(s[s.size()-1]);\n\tl.push_back(s[s.size()-2]);\n\n\tfor(ll i=2; i<(ll)s.size(); i++){\n\t\tfor(ll n=u.size(); n>=2 && ccw(u[n-2],u[n-1],s[i])==COUNTER_CLOCKWISE; n--){\n\t\t\tu.pop_back();\n\t\t}\n\t\tu.push_back(s[i]);\n\t}\n\tfor(ll i=s.size()-3; i>=0; i--){\n\t\tfor(ll n=l.size(); n>=2 && ccw(l[n-2],l[n-1],s[i])==COUNTER_CLOCKWISE; n--){\n\t\t\tl.pop_back();\n\t\t}\n\t\tl.push_back(s[i]);\n\t}\n\n\treverse(l.begin(), l.end());\n\tfor(ll i=u.size()-2; i>=1; i--)l.push_back(u[i]);\n\treturn l;\n}\n\n//線分の集合sの交点の数を返す\nclass EndPoint {\npublic:\n\tPoint p;\n\tll seg,st; //入力線分のID, 端点の種類\n\tEndPoint() {}\n\tEndPoint(Point p, ll seg, ll st) : p(p), seg(seg), st(st) {}\n\n\tbool operator < (const EndPoint &ep) const {\n\t\tif(p.y == ep.p.y) return st < ep.st;\n\t\treturn p.y < ep.p.y;\n\t}\n};\nvector<Point> manhattanIntersection(vector<Segment> &S){\n\tstatic const int BOTTOM = 0;\n\tstatic const int LEFT = 1;\n\tstatic const int RIGHT = 2;\n\tstatic const int TOP = 3;\n\tll n=S.size();\n\tvector<EndPoint> EP(2*n);\n\tfor(ll i=0,k=0; i<n; i++){\n\t\tif(S[i].p1.y==S[i].p2.y){\n\t\t\tif(S[i].p1.x>S[i].p2.x) swap(S[i].p1, S[i].p2);\n\t\t}else if(S[i].p1.y > S[i].p2.y){\n\t\t\tswap(S[i].p1, S[i].p2);\n\t\t}\n\n\t\tif(S[i].p1.y==S[i].p2.y){\n\t\t\tEP[k++]=EndPoint(S[i].p1, i, LEFT);\n\t\t\tEP[k++]=EndPoint(S[i].p2, i, RIGHT);\n\t\t}else{\n\t\t\tEP[k++]=EndPoint(S[i].p1, i, BOTTOM);\n\t\t\tEP[k++]=EndPoint(S[i].p2, i, TOP);\n\t\t}\n\t}\n\n\tsort(EP.begin(), EP.end());\n\n\tset<ll> BT;\n\tBT.insert(INF);\n\tvector<Point> ans;\n\tfor(ll i=0; i<2*n; i++){\n\t\tif(EP[i].st==TOP){\n\t\t\tBT.erase(EP[i].p.x);\n\t\t}else if(EP[i].st==BOTTOM){\n\t\t\tBT.insert(EP[i].p.x);\n\t\t}else if(EP[i].st==LEFT){\n\t\t\tauto b=BT.lower_bound(S[EP[i].seg].p1.x);\n\t\t\tauto e=BT.upper_bound(S[EP[i].seg].p2.x);\n\t\t\tfor(; b!=e; advance(b,1)){\n\t\t\t\tans.push_back(Point(*b,EP[i].p.y));\n\t\t\t}\n\t\t\t\n\t\t}\n\t}\n\treturn ans;\n}\n\n//最小包含円(pointvの点を内部に含む半径最小の円)を返す\n//ハックのあるコンテストではseedに time(0), random_device()() を渡した方がよい\nCircle minimumBoundingCircle(vector<Point> &pointv, ll seed = 2326) {\n\tconst ll n = pointv.size();\n\tassert(n >= 1);\n\tif (n == 1) {\n\t\treturn Circle(pointv[0], 0.);\n\t}\n\n\tstd::mt19937 mt(seed);\n\tstd::shuffle(pointv.begin(), pointv.end(), mt);\n\t// std::random_shuffle(left, right); // simple but deprecated\n\n\tauto make_circle_3 = [](Point &a, Point &b, Point &c) -> Circle {\n\t\tdouble A = (b - c).norm();\n\t\tdouble B = (c - a).norm();\n\t\tdouble C = (a - b).norm();\n\t\tdouble S = cross(b - a, c - a);\n\t\tPoint p = (a * A * (B + C - A) + b * B * (C + A - B)  + c * C * (A + B - C)) / (S * S * 4.);\n\t\tdouble r2 = (p - a).abs();\n\t\treturn Circle(p, r2);\n\t};\n\n\tauto make_circle_2 = [](Point &a, Point &b) -> Circle {\n\t\tPoint c = (a + b) / 2.;\n\t\tdouble r2 = (a - c).abs();\n\t\treturn Circle(c, r2);\n\t};\n\n\tauto in_circle = [](Point &a, Circle &c) -> bool {\n\t\treturn (a - c.c).norm() <= c.r * c.r + EPS;\n\t};\n\n\tCircle c = make_circle_2(pointv[0], pointv[1]);\n\n\t// MiniDisc\n\tfor (ll i = 2; i < n; ++i) {\n\t\tif (!in_circle(pointv[i], c)) {\n\t\t\t// MiniDiscWithPoint\n\t\t\tc = make_circle_2(pointv[0], pointv[i]);\n\t\t\tfor (ll j = 1; j < i; ++j) {\n\t\t\t\tif (!in_circle(pointv[j], c)) {\n\t\t\t\t\t// MiniDiscWith2Points\n\t\t\t\t\tc = make_circle_2(pointv[i], pointv[j]);\n\t\t\t\t\tfor (ll k = 0; k < j; ++k) {\n\t\t\t\t\t\tif (!in_circle(pointv[k], c)) {\n\t\t\t\t\t\t\tc = make_circle_3(pointv[i], pointv[j], pointv[k]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn c;\n}\n\n\n//最近点対(距離が最小の2点)を返す\n//関数適用後、pointsには破壊的操作(y座標によるソート)が行われる点に注意\n//使うときは closest_pair(points) を呼んでください\ntemplate<class iter>\npair<double, pair<Point,Point>> closest_pair_core(iter left, iter right) {\n\t\tll n = distance(left, right);\n\t\tif (n == 1) {\n\t\t\treturn {numeric_limits<double>::max(), {*left, *left}};\n\t\t}\n\t\tif (n == 2) {\n\t\t\tif(left[0].y > left[1].y) swap(left[0], left[1]);\n\t\t\treturn {(left[0]-left[1]).abs(), {left[0], left[1]}};\n\t\t}\n        \n\t\titer middle = next(left, n/2);\n        double x = middle->x;\n\t\tpair<double, pair<Point,Point>> d1 = closest_pair_core(left, middle);\n\t\tpair<double, pair<Point,Point>> d2 = closest_pair_core(middle, right);\n\t\tpair<double, pair<Point,Point>> d = (d1.first < d2.first) ? d1 : d2;\n\n\t\tstd::inplace_merge(left, middle, right,\n\t\t\t[](const Point &a, const Point &b) { return a.y < b.y; });\n\n\t\tvector<iter> around;\n\t\tfor(iter i = left; i != right; ++i){\n            if(std::abs(i->x - x) >= d.first) continue;\n            for(auto j = around.rbegin(); j != around.rend(); ++j){\n                double dx = i->x - (*j)->x;\n                double dy = i->y - (*j)->y;\n                if (dy >= d.first) break;\n                double absval = sqrt(dx * dx + dy * dy);\n                if (d.first > absval) {\n                    d = {absval, {*i, **j}};\n                }\n            }\n            around.push_back(i);\n\t\t}\n\t\treturn d;\n}\npair<Point,Point> closest_pair(vector<Point> &points){\n\tsort(points.begin(), points.end());\n\treturn closest_pair_core(points.begin(), points.end()).second;\n}\n\n//pointsで囲まれた領域の面積を返す\ndouble area2(vector<Point>& points) {\n\tdouble s = 0;\n\tll n = points.size();\n\tfor (int i = 0; i < n; ++i) s += cross(points[i], points[(i + 1) % n]);\n\treturn s / 2.;\n}\n\n//キャリパー法により、凸多角形の中から最も遠い2点を返す\npair<Point,Point> convex_diameter(vector<Point> &ps) {\n\tll n = ps.size();\n\tll i = min_element(ps.begin(), ps.end()) - ps.begin();\n\tll j = max_element(ps.begin(), ps.end()) - ps.begin();\n\tll maxI, maxJ;\n\tdouble maxD = 0;\n\tfor(ll k=0; k<2*n; k++) {\n\t\tif(maxD < (ps[i] - ps[j]).norm()) {\n\t\t\tmaxD = (ps[i] - ps[j]).norm();\n\t\t\tmaxI = i;\n\t\t\tmaxJ = j;\n\t\t}\n\t\tif(cross(ps[i] - ps[(i+1) % n], ps[(j+1) % n] - ps[j]) <= 0) j = (j+1) % n;\n\t\telse i = (i+1) % n;\n\t}\n\treturn {ps[maxI], ps[maxJ]};\n}\n\n//多角形pointsを直線lで切り，新しく出来た2つの多角形を求める\n//直線lの進行方向に対して左側の多角形のみ返す\nvector<Point> convex_cut(vector<Point> &points, Line &l) {\n\tvector<Point> res;\n\tll n = points.size();\n\tfor (ll i = 0; i < n; ++i) {\n\t\tPoint A = points[i], B = points[(i + 1) % n];\n\t\tif (ccw(l.p1, l.p2, A) != CLOCKWISE) res.push_back(A);\n\t\tif (ccw(l.p1, l.p2, A) * ccw(l.p1, l.p2, B) < 0) res.push_back(getCrossPoint(Line(A, B), l));\n\t}\n\treturn res;\n}\n\n/*-----8<-----library-----8<-----*/\n\n\n\n//http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_A&lang=ja\nvoid CGL_2_A(){\n\tll N;\n\tcin>>N;\n\tvector<ll> ans(N,0);\n\trep(i,N){\n\t\tdouble x0,y0,x1,y1,x2,y2,x3,y3;\n\t\tcin>>x0>>y0>>x1>>y1>>x2>>y2>>x3>>y3;\n\t\tPoint p0(x0,y0),p1(x1,y1),p2(x2,y2),p3(x3,y3);\n\t\tll t=0;\n\t\tif(isOrthogonal(p0,p1,p2,p3)){\n\t\t\tt=1;\n\t\t}else if(isParallel(p0,p1,p2,p3)){\n\t\t\tt=2;\n\t\t}\n\t\tans[i]=t;\n\t}\n\trep(i,N)p(ans[i]);\n}\n\n//http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_A&lang=ja\nvoid CGL_1_A(){\n\tdouble x0,y0,x1,y1;\n\tcin>>x0>>y0>>x1>>y1;\n\tLine l(Point(x0,y0),Point(x1,y1));\n\tll Q;\n\tcin>>Q;\n\tvector<Point> ans(Q,0);\n\trep(i,Q){\n\t\tdouble xq,yq;\n\t\tcin>>xq>>yq;\n\t\tPoint po(xq,yq);\n\t\tPoint t=project(l,po);\n\t\tans[i]=t;\n\t}\n\tcout.setf(ios::fixed), cout.precision(20);\n\trep(i,Q){\n\t\tcout<<ans[i].x<<' '<<ans[i].y<<'\\n';\n\t}\n}\n\n//http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_B&lang=ja\nvoid CGL_1_B(){\n\tdouble x0,y0,x1,y1;\n\tcin>>x0>>y0>>x1>>y1;\n\tLine l(Point(x0,y0),Point(x1,y1));\n\tll Q;\n\tcin>>Q;\n\tvector<Point> ans(Q,0);\n\trep(i,Q){\n\t\tdouble xq,yq;\n\t\tcin>>xq>>yq;\n\t\tPoint po(xq,yq);\n\t\tPoint t=reflect(l,po);\n\t\tans[i]=t;\n\t}\n\tcout.setf(ios::fixed), cout.precision(20);\n\trep(i,Q){\n\t\tcout<<ans[i].x<<' '<<ans[i].y<<'\\n';\n\t}\n}\n\n//http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_D&lang=ja\nvoid CGL_2_D(){\n\tll Q;\n\tcin>>Q;\n\tvector<double> ans(Q,0);\n\trep(i,Q){\n\t\tdouble x0,y0,x1,y1,x2,y2,x3,y3;\n\t\tcin>>x0>>y0>>x1>>y1>>x2>>y2>>x3>>y3;\n\t\tSegment s0(Point(x0,y0),Point(x1,y1)), s1(Point(x2,y2),Point(x3,y3));\n\t\tdouble t=getDistance(s0,s1);\n\t\tans[i]=t;\n\t}\n\tcout.setf(ios::fixed), cout.precision(20);\n\trep(i,Q)p(ans[i]);\n}\n\n//http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_C&lang=ja\nvoid CGL_1_C(){\n\tdouble x0,y0,x1,y1;\n\tcin>>x0>>y0>>x1>>y1;\n\tPoint p0(x0,y0),p1(x1,y1);\n\tll Q;\n\tcin>>Q;\n\tvector<string> ans(Q,\"\");\n\tmap<ll,string> m;\n\tm[1]=\"COUNTER_CLOCKWISE\";\n\tm[-1]=\"CLOCKWISE\";\n\tm[2]=\"ONLINE_BACK\";\n\tm[-2]=\"ONLINE_FRONT\";\n\tm[0]=\"ON_SEGMENT\";\n\trep(i,Q){\n\t\tdouble xq,yq;\n\t\tcin>>xq>>yq;\n\t\tPoint pq(xq,yq);\n\t\tll t=ccw(p0,p1,pq);\n\t\tans[i]=m[t];\n\t}\n\trep(i,Q)p(ans[i]);\n}\n\n//http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_B&lang=ja\nvoid CGL_2_B(){\n\tll Q;\n\tcin>>Q;\n\tvector<ll> ans(Q,0);\n\trep(i,Q){\n\t\tdouble x0,y0,x1,y1,x2,y2,x3,y3;\n\t\tcin>>x0>>y0>>x1>>y1>>x2>>y2>>x3>>y3;\n\t\tPoint p0(x0,y0),p1(x1,y1),p2(x2,y2),p3(x3,y3);\n\t\tbool t=intersect(p0,p1,p2,p3);\n\t\tans[i]=t ? 1 : 0;\n\t}\n\trep(i,Q)p(ans[i]);\t\n}\n\n//http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_C&lang=ja\nvoid CGL_2_C(){\n\tll Q;\n\tcin>>Q;\n\tvector<Point> ans(Q,0);\n\trep(i,Q){\n\t\tdouble x0,y0,x1,y1,x2,y2,x3,y3;\n\t\tcin>>x0>>y0>>x1>>y1>>x2>>y2>>x3>>y3;\n\t\tPoint p0(x0,y0),p1(x1,y1),p2(x2,y2),p3(x3,y3);\n\t\tSegment s0(p0,p1),s1(p2,p3);\n\t\tPoint t=getCrossPoint(s0,s1);\n\t\tans[i]=t;\n\t}\n\tcout.setf(ios::fixed), cout.precision(20);\n\trep(i,Q)p(ans[i].x,ans[i].y);\n}\n\n//http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_7_D&lang=ja\nvoid CGL_7_D(){\n\tll cx,cy,r,Q;\n\tcin>>cx>>cy>>r>>Q;\n\tCircle c(Point(cx,cy),r);\n\tvector<pair<Point,Point>> ans(Q);\n\trep(i,Q){\n\t\tdouble x0,y0,x1,y1;\n\t\tcin>>x0>>y0>>x1>>y1;\n\t\tPoint p0(x0,y0),p1(x1,y1);\n\t\tLine l(p0,p1);\n\t\tll count=hasCrossPoints(c,l);\n\t\tif(count==0)exit(1);\n\t\tvector<Point> tv=getCrossPointCL(c,l);\n\t\tpair<Point,Point> t;\n\t\tif(tv.size()==2)t={tv[0],tv[1]};\n\t\telse t={tv[0],tv[0]};\n\t\tif(t.first.x>t.second.x || (equals(t.first.x,t.second.x) && t.first.y>t.second.y))swap(t.first,t.second);\n\t\tans[i]=t;\n\t}\n\tcout.setf(ios::fixed), cout.precision(20);\n\trep(i,Q)p(ans[i].first.x, ans[i].first.y, ans[i].second.x, ans[i].second.y);\n}\n\n//http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_7_E&lang=ja\nvoid CGL_7_E(){\n\tdouble c0x,c0y,r0,c1x,c1y,r1;\n\tcin>>c0x>>c0y>>r0>>c1x>>c1y>>r1;\n\tCircle c0(Point(c0x,c0y), r0), c1(Point(c1x,c1y), r1);\n\tpair<Point,Point> t=getCrossPoints(c0, c1);\n\tif(t.first.x>t.second.x || (equals(t.first.x,t.second.x) && t.first.y>t.second.y))swap(t.first,t.second);\n\tcout.setf(ios::fixed), cout.precision(20);\n\tp(t.first.x, t.first.y, t.second.x, t.second.y);\n}\n\n//http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_3_C&lang=ja\nvoid CGL_3_C(){\n\tll N;\n\tcin>>N;\n\tvector<Point> g(N);\n\trep(i,N)cin>>g[i].x>>g[i].y;\n\tll Q;\n\tcin>>Q;\n\tvector<ll> ans(Q,0);\n\trep(i,Q){\n\t\tll x,y;\n\t\tcin>>x>>y;\n\t\tll t=contains(g,Point(x,y));\n\t\tans[i]=t;\n\t}\n\trep(i,Q)p(ans[i]);\n}\n\n//http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_4_A&lang=ja\nvoid CGL_4_A(){\n\tll N;\n\tcin>>N;\n\tvector<Point> g(N);\n\trep(i,N)cin>>g[i].x>>g[i].y;\n\tvector<Point> ch=andrewScan(g);\n\tprintf(\"%lld\\n\",(ll)ch.size());\n\tll f=0;\n\trepeq(i,ch.size()-1){\n\t\tif(ch[f].y>ch[i].y || (ch[f].y==ch[i].y && ch[f].x>ch[i].x)){\n\t\t\tf=i;\n\t\t}\n\t}\n\trep(i,ch.size()){\n\t\tprintf(\"%lld %lld\\n\",(ll)ch[(i+f)%ch.size()].x, (ll)ch[(i+f)%ch.size()].y);\n\t}\n}\n\n//http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_6_A&lang=ja\nvoid CGL_6_A(){\n\tll N;\n\tcin>>N;\n\tvector<Segment> a(N);\n\trep(i,N)cin>>a[i].p1.x>>a[i].p1.y>>a[i].p2.x>>a[i].p2.y;\n\tvector<Point> ans=manhattanIntersection(a);\n\tp(ans.size());\n}\n\n//https://atcoder.jp/contests/abc151/tasks/abc151_f\nvoid ABC151F() {\n\tll N;\n\tcin>>N;\n\tvector<double> x(N,0),y(N,0);\n\trep(i, N) { cin>>x[i]>>y[i]; }\n\tvector<Point> v;\n\trep(i,N){\n\t\tv.emplace_back(x[i],y[i]);\n\t}\n\tCircle ans=minimumBoundingCircle(v);\n\tcout.setf(ios::fixed), cout.precision(20);\n\tp(ans.r);\n}\n\n//http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_5_A&lang=ja\nvoid CGL_5_A() {\n\tll N;\n\tcin>>N;\n\tvector<double> x(N,0),y(N,0);\n\trep(i, N) { cin>>x[i]>>y[i]; }\n\tvector<Point> v;\n\trep(i,N){\n\t\tv.emplace_back(x[i],y[i]);\n\t}\n\tpair<Point,Point> anspr=closest_pair(v);\n\tdouble ans=getDistance(anspr.first, anspr.second);\n\tcout.setf(ios::fixed), cout.precision(20);\n\tp(ans);\n}\n\n//http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_3_A&lang=ja\nvoid CGL_3_A(){\n\tll N;\n\tcin>>N;\n\tvector<double> x(N,0),y(N,0);\n\trep(i, N) { cin>>x[i]>>y[i]; }\n\tvector<Point> v;\n\trep(i,N){\n\t\tv.emplace_back(x[i],y[i]);\n\t}\n\tdouble ans=area2(v);\n\tcout.setf(ios::fixed), cout.precision(1);\n\tp(ans);\n}\n\n//http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_3_B&lang=ja\nvoid CGL_3_B(){\n\tll N;\n\tcin>>N;\n\tvector<double> x(N,0),y(N,0);\n\trep(i, N) { cin>>x[i]>>y[i]; }\n\tvector<Point> v;\n\trep(i,N){\n\t\tv.emplace_back(x[i],y[i]);\n\t}\n\tif(N==3){\n\t\tll cc=ccw(v[0],v[1],v[2]);\n\t\tif(cc!=CLOCKWISE && cc!=COUNTER_CLOCKWISE){\n\t\t\tp(1);return;\n\t\t}\n\t}\n\tvector<Point> convex=andrewScan(v);\n\tif(v.size()==convex.size())p(1);\n\telse p(0);\n}\n\n//http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_4_B&lang=ja\nvoid CGL_4_B(){\n\tll N;\n\tcin>>N;\n\tvector<double> x(N,0),y(N,0);\n\trep(i, N) { cin>>x[i]>>y[i]; }\n\tvector<Point> v;\n\trep(i,N){\n\t\tv.emplace_back(x[i],y[i]);\n\t}\n\tpair<Point,Point> anspr=convex_diameter(v);\n\tcout.setf(ios::fixed), cout.precision(20);\n\tp(getDistance(anspr.first, anspr.second));\n}\n\n//http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_4_C&lang=ja\nvoid CGL_4_C(){\n\tll N;\n\tcin>>N;\n\tvector<double> x(N,0),y(N,0);\n\trep(i, N) { cin>>x[i]>>y[i]; }\n\tvector<Point> v;\n\trep(i,N){\n\t\tv.emplace_back(x[i],y[i]);\n\t}\n\tll Q;\n\tcin>>Q;\n\tvector<double> ans(Q,0);\n\trep(i,Q){\n\t\tll s1,s2,t1,t2;\n\t\tcin>>s1>>s2>>t1>>t2;\n\t\tLine l(Point(s1,s2),Point(t1,t2));\n\t\tvector<Point> cutv=convex_cut(v,l);\n\t\tdouble a=area2(cutv);\n\t\tdebug(cutv,a);\n\t\tans[i]=a;\n\t}\n\tcout.setf(ios::fixed), cout.precision(20);\n\trep(i,Q)p(ans[i]);\n}\n\nvoid CGL_7_A(){\n\tmap<ll,ll> m;\n\tm[0]=4;\n\tm[1]=1;\n\tm[-1]=1;\n\tm[2]=2;\n\tm[-2]=3;\n\tm[3]=0;\n\tm[-3]=0;\n\tll c1x,c1y,c1r,c2x,c2y,c2r;\n\tcin>>c1x>>c1y>>c1r>>c2x>>c2y>>c2r;\n\tCircle c1(Point(c1x,c1y),c1r), c2(Point(c2x,c2y),c2r);\n\tp(m[intersectCC(c1,c2)]);\n}\n\nsigned main() {\n\t//CGL_2_A();\n\t//CGL_1_A();\n\t//CGL_1_B();\n\t//CGL_2_D();\n\t//CGL_1_C();\n\t//CGL_2_B();\n\t//CGL_2_C();\n\t//CGL_7_D();\n\t//CGL_7_E();\n\t//CGL_3_C();\n\t//CGL_4_A();\n\t//CGL_6_A();\n\t//ABC151F();\n\t//CGL_5_A();\n\t//CGL_3_A();\n\t//CGL_3_B();\n\t//CGL_4_B();\n\t//CGL_4_C();\n\tCGL_7_A();\n\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "/*include*/\n#include<iostream>\n#include<string>\n#include<algorithm>\n#include<map>\n#include<set>\n#include<utility>\n#include<vector>\n#include<cmath>\n#include<cstdio>\n#include<complex>\n#define loop(i,a,b) for(int i=a;i<b;i++) \n#define rep(i,a) loop(i,0,a)\n#define rp(a) while(a--)\n#define pb push_back\n#define mp make_pair\n#define it ::iterator\n#define all(in) in.begin(),in.end()\nconst double PI=acos(-1);\nconst double EPS=1e-10;\nconst double inf=1e8;\nusing namespace std;\ntypedef complex<double> P;\ntypedef vector<P> G;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\n\nstruct L : public vector<P> {\n  L(const P &a, const P &b) {\n    push_back(a); push_back(b);\n  }\n};\nstruct C{\n\tP c;double r;\n\tC(const P &c,double r):c(c),r(r){}\n};\n#define curr(P, i) P[i]\n#define next(P, i) P[(i+1)%P.size()]\n#define diff(P, i) (next(P, i) - curr(P, i))\nnamespace std {\n\tbool operator < (const P& a, const P& b) {\n\t\treturn real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n\t\t//return imag(a) != imag(b) ? imag(a) < imag(b) : real(a) < real(b);  \n\t}\n\tbool operator == (const P& a, const P& b) {\n\t\treturn a.real()==b.real()&&a.imag()==b.imag();\n\t}\n}\nP pin(){\n\tdouble x,y;\n\tchar d;\n\tcin>>x>>y;\n\tP p(x,y);\n\treturn p;\n}\nvoid PIN(P* a,int n){\n\trep(i,n)a[i]=pin();\n}\ndouble dot(P a,P b){\n\treturn real(conj(a)*b);\n}\ndouble cross(P a,P b){\n\treturn imag(conj(a)*b);\n}\nint ccw(P a, P b, P c) {\n  b -= a; c -= a;\n  if (cross(b, c) > 0)   return +1;       // counter clockwise\n  if (cross(b, c) < 0)   return -1;       // clockwise\n  if (dot(b, c) < 0)     return +2;       // c--a--b on line\n  if (norm(b) < norm(c)) return -2;       // a--b--c on line\n  return 0;\n}\nP projection(L a,P p){\n\tdouble t=dot(p-a[0],a[0]-a[1])/norm(a[0]-a[1]);\n\treturn a[0]+t*(a[0]-a[1]);\n}\nP reflection(L a,P p){\n\treturn p+2.0*(projection(a,p)-p);\n}\nbool intersectLL(const L &l, const L &m) {\n  return abs(cross(l[1]-l[0], m[1]-m[0])) > EPS || // non-parallel\n         abs(cross(l[1]-l[0], m[0]-l[0])) < EPS;   // same line\n}\nbool intersectLS(const L &l, const L &s) {\n  return cross(l[1]-l[0], s[0]-l[0])*       // s[0] is left of l\n         cross(l[1]-l[0], s[1]-l[0]) < EPS; // s[1] is right of l\n}\nbool intersectLP(const L &l, const P &p) {\n  return abs(cross(l[1]-p, l[0]-p)) < EPS;\n}\nbool intersectSS(const L &s, const L &t) {\n  return ccw(s[0],s[1],t[0])*ccw(s[0],s[1],t[1]) <= 0 &&\n         ccw(t[0],t[1],s[0])*ccw(t[0],t[1],s[1]) <= 0;\n}\nbool intersectSP(const L &s, const P &p) {\n  return abs(s[0]-p)+abs(s[1]-p)-abs(s[1]-s[0]) < EPS; // triangle inequality\n}\ndouble distanceLP(const L &l, const P &p) {\n\treturn abs(p - projection(l, p));\n}\ndouble distanceLL(const L &l, const L &m) {\n  return intersectLL(l, m) ? 0 : distanceLP(l, m[0]);\n}\ndouble distanceLS(const L &l, const L &s) {\n  if (intersectLS(l, s)) return 0;\n  return min(distanceLP(l, s[0]), distanceLP(l, s[1]));\n}\ndouble distanceSP(const L &s, const P &p) {\n  const P r = projection(s, p);\n  if (intersectSP(s, r)) return abs(r - p);\n  return min(abs(s[0] - p), abs(s[1] - p));\n}\ndouble distanceSS(const L &s, const L &t) {\n  if (intersectSS(s, t)) return 0;\n  return min(min(distanceSP(s, t[0]), distanceSP(s, t[1])),\n             min(distanceSP(t, s[0]), distanceSP(t, s[1])));\n}\n/*bool intersectCS(C c,const L &l){\n    return (distanceLP(l,c.c) < c.r+EPS &&\n            (c.r < abs(c.c-l[0]) + EPS || c.r < abs(c.c-l[1]) + EPS));\n}*/\nint intersectCS(C c,L &l){\n\tif(norm(projection(l,c.c)-c.c)-c.r*c.r>EPS)return 0;\n\tconst double d1=abs(c.c-l[0]),d2=abs(c.c-l[1]);\n\tif(d1<c.r+EPS&&d2<c.r+EPS)return 0;\n\tif(d1<c.r-EPS&&d2>c.r+EPS||d1>c.r+EPS&&d2<c.r-EPS)return 1;\n\tconst P h=projection(l,c.c);\n\tif(dot(l[0]-h,l[1]-h)<0)return 2;\n\treturn 0;\n}\nP crosspointSS(L a,L b){\n\tdouble t1=abs(cross(a[1]-a[0],b[0]-a[0]));\n\tdouble t2=abs(cross(a[1]-a[0],b[1]-a[0]));\n\treturn b[0]+(b[1]-b[0])*t1/(t1+t2);\n}\nL crosspointCL(C c,L l){\n\tP pr=projection(l,c.c);\n\tP e=(l[1]-l[0])/abs(l[1]-l[0]);\n\tdouble t=sqrt(c.r*c.r-norm(pr-c.c));\n\tP a=pr+t*e;\n\tP b=pr-t*e;\n\tif(b<a)swap(a,b);\n\treturn L(a,b);\n}\nL crosspointCS(C c,L l){\n\tif(intersectCS(c,l)==2)return crosspointCL(c,l);\n\tL ret=crosspointCL(c,l);\n\tif(dot(l[0]-ret[0],l[1]-ret[0])<0)ret[1]=ret[0];\n\telse ret[0]=ret[1];\n\treturn ret;\n}\nL crosspointCC(C a,C b){\n\tP tmp=b.c-a.c;\n\tdouble d=abs(tmp);\n\tdouble q=acos((a.r*a.r+d*d-b.r*b.r)/(2*a.r*d));\n\tdouble t=arg(tmp);//atan(tmp.imag()/tmp.real());\n\tP p1=a.c+polar(a.r,t+q);\n\tP p2=a.c+polar(a.r,t-q);\n\tif(p2<p1)swap(p1,p2);\n\treturn L(p1,p2);\n}\nP crosspointLL(const L &l, const L &m) {\n  double A = cross(l[1] - l[0], m[1] - m[0]);\n  double B = cross(l[1] - l[0], l[1] - m[0]);\n  if (abs(A) < EPS && abs(B) < EPS) return m[0]; // same line\n  return m[0] + B / A * (m[1] - m[0]);\n}\ndouble area(const G &g){\n    double S =0;\n    for(int i =0;i <g.size();i++){\n        S +=(cross(g[i],g[(i+1)%g.size()]));\n    }\n    return abs(S/2.0);\n}\nbool isconvex(const G &g){\n\tint n=g.size();\n\trep(i,n)if(ccw(g[(i+n-1)%n],g[i%n],g[(i+1)%n])==-1)return false;\n\treturn true;\n}\nint inconvex(const G& g, const P& p) {\n\tbool in = false;\n\tint n=g.size();\n\trep(i,n){\n\t\tP a=g[i%n]-p;\n\t\tP b=g[(i+1)%n]-p;\n\t\tif(imag(a)>imag(b))swap(a, b);\n\t\tif(imag(a)<=0&&0<imag(b))if(cross(a,b)<0)in=!in;\n\t\tif(cross(a,b)==0&&dot(a,b)<=0)return 1;//ON\n\t}\n\treturn in?2:0;//IN : OUT;\n}\nG convex_hull(G &ps) {\n    int n=ps.size(),k=0;\n\tsort(ps.begin(), ps.end());\n\tG ch(2*n);\n\tfor(int i=0;i<n;ch[k++]=ps[i++])//lower-hull\n\t\twhile(k>=2&&ccw(ch[k-2],ch[k-1],ps[i])==-1)--k;//<=0  ->  ==-1\n\tfor(int i=n-2,t=k+1;i>=0;ch[k++]=ps[i--])//upper-hull\n\t\twhile(k>=t&&ccw(ch[k-2],ch[k-1],ps[i])==-1)--k;//\n\tch.resize(k-1);\n\treturn ch;\n}\ndouble convex_diameter(const G &pt) {\n  const int n = pt.size();\n  int is = 0, js = 0;\n  for (int i = 1; i < n; ++i) {\n    if (imag(pt[i]) > imag(pt[is])) is = i;\n    if (imag(pt[i]) < imag(pt[js])) js = i;\n  }\n  double maxd = norm(pt[is]-pt[js]);\n\n  int i, maxi, j, maxj;\n  i = maxi = is;\n  j = maxj = js;\n  do {\n    if (cross(diff(pt,i), diff(pt,j)) >= 0) j = (j+1) % n;\n    else i = (i+1) % n;\n    if (norm(pt[i]-pt[j]) > maxd) {\n      maxd = norm(pt[i]-pt[j]);\n      maxi = i; maxj = j;\n    }\n  } while (i != is || j != js);\n  return sqrt(maxd); /* farthest pair is (maxi, maxj). */\n}//convex_diameter(g)\nG convex_cut(const G& g, const L& l) {\n  G Q;\n  for (int i = 0; i < g.size(); ++i) {\n    P a= curr(g, i), b= next(g, i);\n    if (ccw(l[0], l[1], a) != -1) Q.push_back(a);\n    if (ccw(l[0], l[1], a)*ccw(l[0], l[1], b) < 0)\n      Q.push_back(crosspointLL(L(a,b), l));\n  }\n  return Q;\n}\nP turn(P p,double t){\n\treturn p*exp(P(.0,t*PI/180.0));\n}\nvector<L> tangentCC(C a,C b){\n\tif(a.r<b.r)swap(a,b);\n\tdouble d=abs(a.c-b.c);\n\tvector<L>l;\n\tif(d<EPS)return l;\n\tif(a.r+b.r<d-EPS){//hanareteiru\n\t\tdouble t=acos((a.r+b.r)/d);\n\t\tt=t*180/PI;\n\t\tl.pb(L(a.c+turn(a.r/d*(b.c-a.c),t),b.c+turn(b.r/d*(a.c-b.c),t)));\n\t\tl.pb(L(a.c+turn(a.r/d*(b.c-a.c),-t),b.c+turn(b.r/d*(a.c-b.c),-t)));\n\t}else if(a.r+b.r<d+EPS){//kuttuiteiru soto\n\t\tP p=a.c+a.r/d*(b.c-a.c);\n\t\tl.pb(L(p,p+turn(b.c-a.c,90)));\n\t}\n\tif(abs(a.r-b.r)<d-EPS){//majiwatteiru\n\t\tdouble t1=acos((a.r-b.r)/d);\n\t\tt1=t1*180/PI;\n\t\tdouble t2=180-t1;\n\t\tl.pb(L(a.c+turn(a.r/d*(b.c-a.c),t1),b.c+turn(b.r/d*(a.c-b.c),-t2)));\n\t\tl.pb(L(a.c+turn(a.r/d*(b.c-a.c),-t1),b.c+turn(b.r/d*(a.c-b.c),t2)));\n\t}else if(abs(a.r-b.r)<d+EPS){//kuttuiteiru uti\n\t\tP p=a.c+a.r/d*(b.c-a.c);\n\t\tl.pb(L(p,p+turn(b.c-a.c,90)));\n\t}\n\treturn l;\n}\nvoid printL(const L &out){\n\tprintf(\"%.9f %.9f %.9f %.9f\\n\",out[0].real(),out[0].imag(),out[1].real(),out[1].imag());\n}\nC CIN(){\n\tP p=pin();\n\tdouble r;\n\tcin>>r;\n\treturn C(p,r);\n}\nbool para(L a,L b){\n\treturn (abs(cross(a[1]-a[0],b[1]-b[0]))<EPS);\n}\nint main(){\n\tP p=pin();double r;cin>>r;\n\tC c1(p,r);\n\tp=pin();cin>>r;\n\tC c2(p,r);\n\tcout<<(tangentCC(c1,c2)).size()<<endl;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint main()\n{\n\tint c1x = 0, c1y = 0, c1r = 0, c2x = 0, c2y = 0, c2r = 0;\n\tdouble d = 0;\n\n\tcin >> c1x >> c1y >> c1r >> c2x >> c2y >> c2r;\n\n\td = sqrt(pow(c1x - c2x, 2) + pow(c1y - c2y, 2));\n\n\tif (d > c1r + c2r)\n\t\tcout << 4 << endl;\n\telse if (d == c1r + c2r)\n\t\tcout << 3 << endl;\n\telse if (d > abs(c1r - c2r) && d < c1r + c2r)\n\t\tcout << 2 << endl;\n\telse if (d == abs(c1r - c2r))\n\t\tcout << 1 << endl;\n\telse\n\t\tcout << 0 << endl;\n\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#line 1 \"test/geometry/intersection_circles.test.cpp\"\n#define PROBLEM \"http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_7_A\"\n\n#include <bits/stdc++.h>\nusing namespace std;\nusing lint = long long;\n\n#line 1 \"test/geometry/../../library/geometry/geometry.cpp\"\nconst double eps = 1e-10;\ninline bool eq(double a, double b) { return fabs(a - b) < eps; }\nconst double pi = acos(-1);\n\nstruct Point {\n    double x, y;\n    Point() {}\n    Point(double x, double y) : x(x), y(y) {}\n    Point operator+(const Point &p) const { return Point(x + p.x, y + p.y); }\n    Point operator-(const Point &p) const { return Point(x - p.x, y - p.y); }\n    Point operator*(double k) const { return Point(x * k, y * k); }\n    Point operator/(double k) const { return Point(x / k, y / k); }\n};\nistream &operator>>(istream &is, Point &p) {\n    is >> p.x >> p.y;\n    return is;\n}\nostream &operator<<(ostream &os, Point p) {\n    os << fixed << setprecision(10) << p.x << \" \" << p.y;\n    return os;\n}\nbool sort_x(Point a, Point b) { return a.x != b.x ? a.x < b.x : a.y < b.y; }\nbool sort_y(Point a, Point b) { return a.y != b.y ? a.y < b.y : a.x < b.x; }\nbool sort_t(Point a, Point b) { return atan2(a.y, a.x) < atan2(b.y, a.y); }\nPoint rotate(double theta, const Point &p) {\n    return Point(cos(theta) * p.x - sin(theta) * p.y, sin(theta) * p.x + cos(theta) * p.y);\n}\ndouble radian_to_degree(double r) { return (r * 180.0 / pi); }\ndouble degree_to_radian(double d) { return (d * pi / 180.0); }\n\nstruct Line {\n    Point a, b;\n    Line() {}\n    Line(Point a, Point b) : a(a), b(b) {}\n    Line(double A, double B, double C) { // Ax + By = C\n        if (eq(A, 0))\n            a = Point(0, C / B), b = Point(1, C / B);\n        else if (eq(B, 0))\n            a = Point(C / A, 0), b = Point(C / A, 1);\n        else\n            a = Point(0, C / B), b = Point(C / A, 0);\n    }\n    Point vec() const { return b - a; }\n};\nstruct Segment : Line {\n    Segment() {}\n    Segment(Point a, Point b) : Line(a, b) {}\n};\n\nstruct Circle {\n    Point p;\n    double r;\n    Circle() {}\n    Circle(Point p, double r) : p(p), r(r) {}\n};\ndouble norm(const Point &a) { return a.x * a.x + a.y * a.y; }\ndouble abs(const Point &a) { return sqrt(norm(a)); }\ndouble cross(const Point &a, const Point &b) { return a.x * b.y - a.y * b.x; }\ndouble dot(const Point &a, const Point &b) { return a.x * b.x + a.y * b.y; }\n\nPoint project(Line l, Point p) {\n    double t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n    return l.a + (l.a - l.b) * t;\n}\nPoint reflect(Line l, Point p) { return p + (project(l, p) - p) * 2; }\nbool parallel(Line a, Line b) { return eq(cross(a.vec(), b.vec()), 0.0); }\nbool orthogonal(Line a, Line b) { return eq(dot(a.vec(), b.vec()), 0.0); }\nint ccw(const Point &a, Point b, Point c) {\n    b = b - a, c = c - a;\n    if (cross(b, c) > eps)\n        return +1; // \"COUNTER_CLOCKWISE\"\n    if (cross(b, c) < -eps)\n        return -1; // \"CLOCKWISE\"\n    if (dot(b, c) < 0)\n        return +2; // \"ONLINE_BACK\"\n    if (norm(b) < norm(c))\n        return -2; // \"ONLINE_FRONT\"\n    return 0;      // \"ON_SEGMENT\"\n}\nbool intersect(const Line &l, const Point &p) { return abs(ccw(l.a, l.b, p)) != 1; }\nbool intersect(const Line &l, const Line &m) { return !parallel(l, m) || abs(cross(l.vec(), m.b - l.a)) < eps; }\nbool intersect(const Segment &s, const Point &p) { return ccw(s.a, s.b, p) == 0; }\nbool intersect(const Line &l, const Segment &s) { return cross(l.vec(), s.a - l.a) * cross(l.vec(), s.b - l.a) < eps; }\ndouble distance(const Line &l, const Point &p);\nbool intersect(const Circle &c, const Line &l) { return distance(l, c.p) <= c.r + eps; }\nbool intersect(const Circle &c, const Point &p) { return abs(abs(p - c.p) - c.r) < eps; }\nbool intersect(const Segment &s, const Segment &t) {\n    return ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 && ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0;\n}\nint intersect(const Circle &c, const Segment &l) {\n    if (norm(project(l, c.p) - c.p) - c.r * c.r > eps)\n        return 0;\n    auto d1 = abs(c.p - l.a), d2 = abs(c.p - l.b);\n    if (d1 < c.r + eps && d2 < c.r + eps)\n        return 0;\n    if ((d1 < c.r - eps && d2 > c.r + eps) || (d1 > c.r + eps && d2 < c.r - eps))\n        return 1;\n    const Point h = project(l, c.p);\n    if (dot(l.a - h, l.b - h) < 0)\n        return 2;\n    return 0;\n}\nint intersect(Circle c1, Circle c2) {\n    if (c1.r < c2.r)\n        swap(c1, c2);\n    double d = abs(c1.p - c2.p);\n    if (c1.r + c2.r < d)\n        return 4; // do not cross\n    if (eq(c1.r + c2.r, d))\n        return 3; // circumscribed\n    if (c1.r - c2.r < d)\n        return 2; // intersect\n    if (eq(c1.r - c2.r, d))\n        return 1; // inscribed\n    return 0;     // one circle includes another\n}\n\ndouble distance(const Point &a, const Point &b) { return abs(a - b); }\ndouble distance(const Line &l, const Point &p) { return abs(p - project(l, p)); }\ndouble distance(const Line &l, const Line &m) { return intersect(l, m) ? 0 : distance(l, m.a); }\ndouble distance(const Segment &s, const Point &p) {\n    Point r = project(s, p);\n    if (intersect(s, r))\n        return abs(r - p);\n    return min(abs(s.a - p), abs(s.b - p));\n}\ndouble distance(const Segment &a, const Segment &b) {\n    if (intersect(a, b))\n        return 0;\n    return min({distance(a, b.a), distance(a, b.b), distance(b, a.a), distance(b, a.b)});\n}\ndouble distance(const Line &l, const Segment &s) {\n    if (intersect(l, s))\n        return 0;\n    return min(distance(l, s.a), distance(l, s.b));\n}\nPoint crosspoint(const Line &l, const Line &m) {\n    double A = cross(l.vec(), m.vec());\n    double B = cross(l.vec(), l.b - m.a);\n    if (eq(abs(A), 0.0) && eq(abs(B), 0.0))\n        return m.a;\n    return m.a + (m.b - m.a) * B / A;\n}\nPoint crosspoint(const Segment &l, const Segment &m) { return crosspoint(Line(l), Line(m)); }\npair<Point, Point> crosspoint(const Circle &c, const Line l) {\n    Point pr = project(l, c.p);\n    Point e  = (l.b - l.a) / abs(l.b - l.a);\n    if (eq(distance(l, c.p), c.r))\n        return {pr, pr};\n    double base = sqrt(c.r * c.r - norm(pr - c.p));\n    return {pr - e * base, pr + e * base};\n}\npair<Point, Point> crosspoint(const Circle &c, const Segment &l) {\n    Line aa = Line(l.a, l.b);\n    if (intersect(c, l) == 2)\n        return crosspoint(c, aa);\n    auto ret = crosspoint(c, aa);\n    if (dot(l.a - ret.first, l.b - ret.first) < 0)\n        ret.second = ret.first;\n    else\n        ret.first = ret.second;\n    return ret;\n}\npair<Point, Point> crosspoint(const Circle &c1, const Circle &c2) {\n    double d = abs(c1.p - c2.p);\n    double a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n    double t = atan2(c2.p.y - c1.p.y, c2.p.x - c1.p.x);\n    Point p1 = c1.p + Point(cos(t + a) * c1.r, sin(t + a) * c1.r);\n    Point p2 = c1.p + Point(cos(t - a) * c1.r, sin(t - a) * c1.r);\n    return {p1, p2};\n}\nvector<Point> convex_hull(vector<Point> &p) {\n    int n = (int)p.size(), k = 0;\n    if (n <= 2)\n        return p;\n    sort(p.begin(), p.end(), sort_x);\n    vector<Point> ch(2 * n);\n    for (int i = 0; i < n; ch[k++] = p[i++]) {\n        while (k >= 2 && cross(ch[k - 1] - ch[k - 2], p[i] - ch[k - 1]) < -eps)\n            --k;\n    }\n    for (int i = n - 2, t = k + 1; i >= 0; ch[k++] = p[i--]) {\n        while (k >= t && cross(ch[k - 1] - ch[k - 2], p[i] - ch[k - 1]) < -eps)\n            --k;\n    }\n    ch.resize(k - 1);\n    return ch;\n}\n#line 8 \"test/geometry/intersection_circles.test.cpp\"\n\nint main() {\n    cin.tie(nullptr);\n    ios::sync_with_stdio(false);\n    Circle c1, c2;\n    cin >> c1.p.x >> c1.p.y >> c1.r;\n    cin >> c2.p.x >> c2.p.y >> c2.r;\n    cout << intersect(c1, c2) << \"\\n\";\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <vector>\n#include <cstdio>\n\nusing namespace std;\n\nconst int INF = 10000;\n\nint v, e;\n\n//edge src and dst\nvector<int> s, t;\n\n//bellman-ford\nbool check( int start ){\n\n    vector<int> dist( v, INF );\n\n    dist[start] = 0;\n    \n    int n = 0;\n    for ( ; n<v; ++n ) {\n\n\tbool update = false;\n\t\n\tfor ( int i=0; i<e; ++i ) {\n\n\t    int from = s[i];\n\t    int to = t[i];\n\n\t    if ( dist[from] != INF && dist[from] - 1 < dist[to] ) {\n\t\tdist[to] = dist[from] - 1;\n\t\tupdate = true;\n\t    }\n\t}\n\n\tif ( !update ) break;\n    }\n\n    return n == v;\n}\n\nint main(){\n\n    scanf(\"%d %d\", &v, &e);\n\n    s.resize( v );\n    t.resize( v );\n    \n    for ( int i=0; i<e; ++i ) {\n\tscanf(\"%d %d\", &s[i], &t[i]);\n    }\n    \n    for ( int i=0; i<v; ++i ) {\n\tif ( check( i ) ) {\n\t    printf(\"1\\n\");\n\t    return 0;\n\t}\n    }\n\n    printf(\"0\\n\");\n    \n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\n#define _overload(_1,_2,_3,name,...) name\n#define _rep(i,n) _range(i,0,n)\n#define _range(i,a,b) for(int i=int(a);i<int(b);++i)\n#define rep(...) _overload(__VA_ARGS__,_range,_rep,)(__VA_ARGS__)\n\n#define _rrep(i,n) _rrange(i,n,0)\n#define _rrange(i,a,b) for(int i=int(a)-1;i>=int(b);--i)\n#define rrep(...) _overload(__VA_ARGS__,_rrange,_rrep,)(__VA_ARGS__)\n\n#define _all(arg) begin(arg),end(arg)\n#define uniq(arg) sort(_all(arg)),(arg).erase(unique(_all(arg)),end(arg))\n#define getidx(ary,key) lower_bound(_all(ary),key)-begin(ary)\n#define clr(a,b) memset((a),(b),sizeof(a))\n#define bit(n) (1LL<<(n))\n#define popcount(n) (__builtin_popcountll(n))\n\nusing namespace std;\n\ntemplate<class T>bool chmax(T &a, const T &b) { return (a<b)?(a=b,1):0;}\ntemplate<class T>bool chmin(T &a, const T &b) { return (b<a)?(a=b,1):0;}\n\nusing ll=long long;\nusing R=long double;\nconst R EPS=1e-9L; // [-1000,1000]->EPS=1e-8 [-10000,10000]->EPS=1e-7\ninline int sgn(const R& r){return(r > EPS)-(r < -EPS);}\ninline R sq(R x){return sqrt(max(x,0.0L));}\n\nconst int dx[8]={1,0,-1,0,1,-1,-1,1};\nconst int dy[8]={0,1,0,-1,1,1,-1,-1};\n\n// Description: ????????????\n// Verifyed: various problem \nconst R INF = 1E40L;\nconst R PI = acos(-1.0L);\nusing P=complex<R>;\nconst P O=0.0L;\nusing L=struct{P s,t;};\nusing VP=vector<P>;\nusing C=struct{P c;R r;};\n\nistream& operator >> (istream& is,P& p){ R x,y;is >> x >> y; p=P(x,y); return is;}\nostream& operator << (ostream& os,P& p){ os << real(p) << \" \" << imag(p); return os;}\n\ninline R dot(P o,P a,P b){return real(conj(a-o)*(b-o));}\ninline R det(P o,P a,P b){return imag(conj(a-o)*(b-o));}\ninline int sdot(P o,P a,P b){return sgn(dot(o,a,b));}\ninline int sdet(P o,P a,P b){return sgn(det(o,a,b));}\n\n//projection verify AOJ CGL_1_A\nP proj(L l,P p){ R u=real((p-l.s)/(l.t-l.s)); return (1-u)*l.s+u*l.t;}\n\n\n// Circle // verified: AOJ 1183 \nenum RCC{OUT=2,ON_OUT=1,ISC=0,ON_IN=-1,IN=-2};\nint rcc(C a,C b){ R d=abs(a.c-b.c);return sgn(d-a.r-b.r)+sgn(d-abs(a.r-b.r));}\n\n/*\n// circle crossing determination\nbool icp(C c,P p,int end=0){return sgn(norm(p-c.c)-norm(c.r))<=-end;}\nbool ics(C c,L s,int end=0){return sgn(dsp(s,c.c)-c.r)<=-end;}\nbool icsc(C c,L l,int end=0){\n\treturn ics(c,l) && sgn(max(norm(l.s-c.c),norm(l.t-c.c))-norm(c.r))<=0;\n}\n\n// common area between circles\nR area(C a,C b){\n\tint r=rcc(a,b);\n    if(r>=ON_OUT) return 0.0;  \n    if(r<=ON_IN) return min(norm(a.r),norm(b.r))*PI;\n    R d=abs(b.c-a.c),rc=(norm(d)+ norm(a.r) - norm(b.r))/(2.0*d);\n    R t=acos(rc/a.r),p=acos((d-rc)/b.r);\n    return norm(a.r)*t+norm(b.r)*p-d*a.r*sin(t);\n}\n\n// cross point between circle and line \n// verified: AOJ CGL_7_D\nP cir(C c,R t){return c.c+polar(c.r,t);}\nVP cross(C c, L l){\n\tP h=proj(l,c.c),e=polar(sq(norm(c.r)-norm(h-c.c),arg(l.t-l.s)));\n\treturn VP{h-e,h+e};\n}\n\n// cross point between circles\n// verified: AOJ CGL_7_E\nVP cross(C a,C b){\n\tP d=b.c-a.c;\n\tP w=(norm(d)+norm(a.r)-norm(b.r))/(2.0*norm(d))*d;\n\treturn cross(a,{a.c+w-P(0,1)*w,a.c+w+P(0,1)*w});\n}\n\n// circle tangent \n// verified: AOJ CGL_7_F\n\nL tan(C c,P p){P d=1i*(p-c.c);return L{p-d,p+d};}\nVP contact(C c,P p){\n\tVP ret; R d=abs(p-c.c);\n\tfor(P &s:{-1i,1i})\n\trep(i,2) reg(ret,c.c+(c.r+s*sq(norm(d)-norm(c.r)))*c.r*(p-c.c)/norm(d));\n\treturn uniq(ret);\n}\n\n// circle tangent \n// Verified: AOJ CGL_7_G\nVP contact(C a,C b){\n\tVP ret; R d=abs(a.c-b.c);\n\tfor(int &i:{-1,1})if(rcc(a,b)>=i) for(int &j:{-1i,1i}){\n\t\tR r=a.r+i*b.r;\n\t\treg(ret,a.c+(r+j*sq(norm(d)-norm(r)))*a.r*(b.c-a.c)/norm(d));\n\t}\n\treturn uniq(ret);\n}\n*/\n\nint main(void){\n\tC a,b;\n\tcin >> a.c >> a.r >> b.c >> b.r;\n\tcout << rcc(a,b)+2\t<< endl;\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "/*<<head>> {{{*/\n#include <bits/stdc++.h>\n#include <algorithm>\n#include <iostream>\n#include <cstring>\n#include <vector>\n#include <cstdio>\n#include <string>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <set>\n#include <map>\nusing namespace std;\ntypedef double db;\ntypedef long long ll;\ntypedef vector<int> vi;\ntypedef pair<int,int> pii;\n#define dd(x) cout << #x << \" = \" << x << \", \"\n#define de(x) cout << #x << \" = \" << x << endl\n#define rep(i,a,b) for(int i=(a);i<(b);++i)\n#define per(i,a,b) for(int i=(b)-1;i>=(a);--i)\n#define all(x) (x).begin(),(x).end()\n#define sz(x) (int)(x).size()\n#define mp make_pair\n#define pb push_back\n#define fi first\n#define se second\n//INF = 1 061 109 567 ; INF + INF = 2 122 219 134 ;\n//LINF = 4 557 430 888 798 830 399 ; LINF + LINF = 9 114 861 777 597 660 798 ;\nconst int INF = 0x3f3f3f3f;     // -INF: 0xc0   abs(-INF) = INF + 1\nconst ll LINF = 0x3f3f3f3f3f3f3f3f;\n/*}}}*/                         // zr, zm\nconst int MOD = (int)1e9+7;     // when MOD = 1e9+7, inv2 = 500000004\nconst int N = (int)-1;\n\n// ------- 变量 ------- //\n\n/* 注意\n  1. 点、向量\n    1. 如果角度出现 -pi ，可以加上 2pi 修正为 pi\n    2. atan2(y, x) 的参数是浮点数时，可能出现 -pi ，如 atan2(-0.0, -1.0)\n  2. 线段、直线\n    1. 线段严格相交定义为：每条线段的两个端点落在另一条线段两边，形象来说，就是可以在图形里看到四个端点和一个交点\n*/\n\ntypedef db T;  // 大部分情况下使用 db\nconst T eps = 1e-7, pi = acosl(-1.);\nint sgn(T x) { return (x > eps) - (x < -eps); }\nbool inMid(T l, T x, T r) { return sgn(l - x) * sgn(r - x) <= 0; }  // 数 x 在区间 [l, r] 内（包括边界）\n\n// 点、向量\nstruct P {\n    T x, y; P () {} P(T x, T y) : x(x), y(y) {}\n    P operator + (const P &b) const { return P(x + b.x, y + b.y); }  // 向量加\n    P operator - (const P &b) const { return P(x - b.x, y - b.y); }  // 向量减\n    T operator * (const P &b) const { return x * b.x + y * b.y; }    // 向量点积\n    T operator / (const P &b) const { return x * b.y - y * b.x; }    // 向量叉积\n    P operator * (const T &k) const { return P(x * k, y * k); }      // 向量数乘\n    P operator / (const T &k) const { return P(x / k, y / k); }      // 向量数除\n    bool operator < (const P &b) const { return sgn(x - b.x) ? x < b.x : y < b.y; }  // 左小右大，下小上大\n    bool operator == (const P &b) const { return !sgn(x - b.x) && !sgn(y - b.y); }   // 向量相等\n    P rot(T t) { return P(x * cos(t) - y * sin(t), x * sin(t) + y * cos(t)); }  // 向量逆时针旋转 t 弧度\n    P rot90() { return P(-y, x); }           // 向量逆时针旋转 90 度\n    T arg() const { return atan2(y, x); }   // 方位角 (-pi, pi]\n    T abs() { return sqrt(x * x + y * y); }  // 向量模长\n    T abs2() { return x * x + y * y; }       // 向量模长的平方\n    P unit() { return (*this) / abs(); }     // 单位向量\n    void scan() { T tx, ty; scanf(\"%lf%lf\", &tx, &ty); x = tx; y = ty; }  // 输入\n    void print() { printf(\"%.11lf %.11lf\\n\", x, y); }                      // 输出\n    P toR() { return (sgn(x) == -1 || !sgn(x) && sgn(y) == -1) ? (*this)*(-1) : (*this); }  // 若向量在 2 3 象限，则取相反向量\n    bool isUp() const { return sgn(y) == 1 || !sgn(y) && sgn(x) == -1; }                    // 向量是否在 1 2 象限\n};\nT dis(P a, P b) { return (b - a).abs(); }   // 点 a 到点 b 的距离\nP symmetry(P p, P a) { return a + a - p; }  // 点 p 关于点 a 的中心对称点\nT cross(P o, P a, P b) { return (a - o) / (b - o); }         // 向量 oa 与 ob 的叉积\nint crossSgn(P o, P a, P b) { return sgn(cross(o, a, b)); }  // 向量 oa 与 ob 的叉积符号\nT rad(P a, P b) { return atan2(a / b, a * b); }             // 向量 a 与 b 的夹角（弧度制）\nbool order(const P &a, const P &b) { return a.isUp() < b.isUp() || a.isUp() == b.isUp() && sgn(a/b) > 0; }  // 极角排序\n\n// 线段、直线\nstruct L { P s, t; L () {} L(P s, P t) : s(s), t(t) {} };\nbool onPS(P p, L a) { return sgn((a.t-a.s)/(p-a.s))==0 && sgn((p-a.s)*(p-a.t))<=0; }   // 点 p 是否在线段 a 上\nbool inRec(P p, L a) { return inMid(a.s.x, p.x, a.t.x) && inMid(a.s.y, p.y, a.t.y); }  // 点 p 在以直线 a 为对角线的矩形内\nP proj(P p, L a) { return (a.t-a.s) * ( (p-a.s) * (a.t-a.s) / (a.t-a.s).abs2() ) + a.s; }  // 点 p 关于直线 a 的投影点\nP reflect(P p, L a) { return proj(p, a) * 2 - p; }                                         // 点 p 关于直线 a 的对称点\nbool xSSr(const L &a, const L &b) {  // 线段 a 和线段 b 严格相交\n    T c1 = (a.t-a.s) / (b.s-a.s), c2 = (a.t-a.s) / (b.t-a.s);\n    T c3 = (b.t-b.s) / (a.s-b.s), c4 = (b.t-b.s) / (a.t-b.s);\n    return sgn(c1) * sgn(c2) < 0 && sgn(c3) * sgn(c4) < 0;\n}\nbool xSS(L a, L b) {                 // 线段 a 和线段 b 不严格相交\n    T c1 = (a.t-a.s) / (b.s-a.s), c2 = (a.t-a.s) / (b.t-a.s);\n    T c3 = (b.t-b.s) / (a.s-b.s), c4 = (b.t-b.s) / (a.t-b.s);\n    return sgn(c1) * sgn(c2) <= 0 && sgn(c3) * sgn(c4) <= 0 &&\n           sgn(max(a.s.x,a.t.x) - min(b.s.x,b.t.x)) >= 0 &&\n           sgn(max(b.s.x,b.t.x) - min(a.s.x,a.t.x)) >= 0 &&\n           sgn(max(a.s.y,a.t.y) - min(b.s.y,b.t.y)) >= 0 &&\n           sgn(max(b.s.y,b.t.y) - min(a.s.y,a.t.y)) >= 0;\n}\nbool xSL(L a, L b) {  // 线段 a 与直线 b 相交 ( 不严格 : <= ; 严格 : < )\n    return sgn( (b.t - b.s) / (a.s - b.s) ) * sgn( (b.t - b.s) / (a.t - b.s) ) <= 0;\n}\nP xLL(L a, L b) {  // 直线 a 和直线 b 的交点\n    T s1 = (b.t - b.s) / (a.s - b.s), s2 = -( (b.t - b.s) / (a.t - b.s) );\n    return (a.s * s2 + a.t * s1) / (s1 + s2);\n}\nT disPL(P p, L a) { return fabs( (a.t-a.s) / (p-a.s) ) / (a.t-a.s).abs(); }  // 点 p 到直线 a 的距离\nT disPS(P p, L a) {                                                          // 点 p 到线段 a 的距离\n    return sgn( (a.t-a.s) * (p-a.s) ) * sgn( (a.s-a.t) * (p-a.t) ) == 1\n           ? disPL(p, a) : min( (p-a.s).abs(), (p-a.t).abs() );\n}\nT disSS(L a, L b){                                                           // 线段 a 到线段 b 的距离\n    if (xSS(a,b)) return 0;\n    return min( min( disPS(a.s,b), disPS(a.t,b) ), min( disPS(b.s,a), disPS(b.t,a) ) );\n}\nT disLL(L a, L b) { return (a.t-a.s) / (b.t-b.s) ? 0 : disPL(a.s, b); }      // 直线 a 到直线 b 的距离\n\n// 多边形、凸包\ntypedef vector<P> polygon;\npolygon Convex(polygon A) {  // 求凸包，逆时针排序（ 内角 <180 : (<=) ; 内角 <=180 : (<) ）\n    int n = sz(A); if (n <= 1) return A;\n    sort(all(A));\n    polygon B;\n    for (int i = 0; i < n; B.pb(A[i++]))\n        while (sz(B) > 1 && crossSgn(B[sz(B)-2], B.back(), A[i]) < 0) B.pop_back();  // 更改这里的 <\n    for (int i = n - 2, t = sz(B); i >= 0; B.pb(A[i--]))\n        while (sz(B) > t && crossSgn(B[sz(B)-2], B.back(), A[i]) < 0) B.pop_back();  // 同上\n    B.pop_back(); return B;\n}\nT area(polygon A) {  // 多边形 A 的面积，整型可以返回面积的两倍，保持精度\n    T res = 0;\n    rep(i, 0, sz(A)) res += A[i] / A[ (i+1) % sz(A) ];\n    return fabs(res) / 2;\n}\nbool isConvex(polygon A) {  // 多边形 A 是否是凸包，要求 A 的点集按逆时针排序\n    rep(i, 0, 2) A.pb(A[i]);\n    rep(i, 0, sz(A)-2) if ( sgn( (A[i+1]-A[i]) / (A[i+2]-A[i]) ) < 0 ) return 0;\n    return 1;\n}\nint inPPo(P p, polygon A) {  // 点和多边形关系 ( 2 : in , 1 : on , 0 : out )\n    int res = 0; A.pb(A[0]);\n    rep(i, 1, sz(A)) {\n        P u = A[i-1], v = A[i];\n        if (onPS(p, L(u, v))) return 1;\n        if (sgn(u.y - v.y) > 0) swap(u, v);\n        if (sgn(u.y - p.y) >= 0 || sgn(v.y - p.y) < 0) continue;\n        if (crossSgn(v, u, p) < 0) res ^= 1;\n    }\n    return res << 1;\n}\nT ConvexDiameter(polygon A) {  // 凸包 A 的直径，即凸包 A 上的最远点对\n    int now = 0, n = sz(A); T res = 0;\n    if (n <= 1) return 0;\n    rep(i, 0, sz(A)) {\n        now = max(now, i);\n        while (1) {\n            T t1 = dis(A[i], A[now%n]), t2 = dis(A[i], A[(now+1)%n]);\n            res = max(res, max(t1, t2));\n            if (t2 > t1) now++; else break;\n        }\n    }\n    return res;\n}\npolygon ConvexCut(polygon A, L a) {  // 半平面 a 切割凸包 A 形成的凸包（直线 a 逆时针方向）\n    int n = sz(A); A.pb(A[0]); polygon res;\n    rep(i, 0, n) {\n        int w1 = crossSgn(a.s, a.t, A[i]), w2 = crossSgn(a.s, a.t, A[i+1]);\n        if (w1 >= 0) res.pb(A[i]);\n        if (w1 * w2 < 0) res.pb(xLL(a, L(A[i], A[i+1])));\n    }\n    return res;\n}\nT _closePP(polygon &A, int l, int r) {  // 调用下面的 closePP(A)\n    if (r - l < 6) {\n        T res = 1e20;\n        rep(i, l, r+1) rep(j, i+1, r+1) res = min(res, dis(A[i], A[j]));\n        return res;\n    }\n    int m = l + r >> 1;\n    T res = min(_closePP(A, l, m), _closePP(A, m+1, r));\n    polygon B; rep(i, l, r+1) if (fabs(A[i].x - A[m].x) < res) B.pb(A[i]);\n    sort(all(B), [&](P p1, P p2){ return p1.y < p2.y; });\n    rep(i, 0, sz(B)) for (int j = i+1; j < sz(B) && B[j].y - B[i].y < res; j++)\n        res = min(res, dis(B[i], B[j]));\n    return res;\n}\nT closePP(polygon A) {  // 点集 A 中的最近点对\n    sort(all(A), [&](P a, P b){ return a.x < b.x; });\n    return _closePP(A, 0, sz(A)-1);\n}\n\nstruct C { P o; T r; C () {} C (P o, T r) : o(o), r(r) {} };\n\nint relCC(C A, C B) {\n    T dis = (A.o - B.o).abs();\n    if (sgn(dis - (A.r + B.r)) == 1) return 4;\n    if (sgn(dis - (A.r + B.r)) == 0) return 3;\n    if (sgn(dis - fabs(A.r - B.r)) == 1) return 2;\n    if (sgn(dis - fabs(A.r - B.r)) == 0) return 1;\n    return 0;\n}\n\nC getC(P a,P b,P c){  // 三点确定一个圆 （ 三角形外接圆 ）\n    T a1 = b.x - a.x, b1 = b.y - a.y, c1 = (a1 * a1 + b1 * b1) / 2;\n    T a2 = c.x - a.x, b2 = c.y - a.y, c2 = (a2 * a2 + b2 * b2) / 2;\n    T d = a1 * b2 - a2 * b1;\n    P o = P(a.x + (c1 * b2 - c2 * b1) / d, a.y + (a1 * c2 - a2 * c1) / d);\n    return C(o, dis(a, o));\n}\n\n// ------- 函数 ------- //\n\nvoid Init() { \n}\n\nint Solve() {\n    P p[2]; int r[2];\n    rep(i, 0, 2) {\n        p[i].scan();\n        scanf(\"%d\", r+i);\n    }\n    C c1(p[0], r[0]), c2(p[1], r[1]);\n    return printf(\"%d\\n\", relCC(c1, c2));\n}\n\n// ------- main ------- //\n\nint main ()\n{\n    //ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);\n    //freopen(\"in.txt\", \"r\", stdin);\n    //freopen(\"out.txt\", \"w\", stdout);\n\n    //Pre();\n    //int t; scanf(\"%d\", &t); while (t--) {\n    //while (~scanf(\"\", )) {\n    //while(fgets(s, N, stdin)) {   // 注意 fgets 会读入换行符\n        //if (n == 0) break;\n        //static int kase = 0; printf(\"Case %d: \", ++kase);\n        Init();\n        Solve();\n        //if (t) puts(\"\");\n    //}\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\n#include<iomanip>\n#include<cmath>\n#include<algorithm>\n#include<cassert>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nstruct Point;\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\nstruct Circle;\nstruct Segment;\ntypedef Segment Line;\ndouble norm(Point a);\ndouble abs(Point a);\ndouble dot(Vector a, Vector b);\ndouble cross(Vector a, Vector b);\ndouble getDistance(Point a, Point b);\ndouble getDistanceLP(Line l, Point p);\ndouble getDistanceSP(Segment s, Point p);\ndouble getDistance(Segment s1, Segment s2);\nbool isOrthogonal(Vector a, Vector b);\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2);\nbool isOrthogonal(Segment s1, Segment s2);\nbool isParallel(Vector a, Vector b);\nbool isParallel(Point a1, Point a2, Point b1, Point b2);\nbool isParallel(Segment s1, Segment s2);\nint ccw(Point p0, Point p1, Point p2);\nbool intersect(Point p1, Point p2, Point p3, Point p4);\nbool intersect(Segment s1, Segment s2);\nbool intersect(Circle c, Line l); // 誤差の検証をしていない\nbool intersect(Circle c1, Circle c2); // 誤差の検証をしていない\n\nPoint project(Segment s, Point p);\nPoint reflect(Segment s, Point p);\nPoint getCrossPoint(Segment s1, Segment s2);\npair<Point,Point> getCrossPoints(Circle c, Line l);\npair<Point,Point> getCrossPoints(Circle c1, Circle c2); // 誤差の検証をしていない\npair<Point,Point> getContactPoints(Circle c, Point p); // 接点 点は円の外部\n\ndouble area(Polygon g); // convexでなくてもよい. absを消せば符号付き面積\nbool isConvex(Polygon g); // O(n^2) 線形時間アルゴリズムが存在するらしい\nint contains(Polygon g, Point p);\n\ndouble arg(Vector p);   // 偏角\nVector polar(double a, double r); // 極座標系->ベクトル\n\nPolygon andrewScan(Polygon g); // 凸包の辺上の点も含めたければ!=CLOCKWISEを==COUNTER_CLOCKWISEに\ndouble convexDiameter(Polygon g); // gはconvex \n\n\nstruct Point{\n    double x, y;\n\n    Point(double x = 0, double y = 0) : x(x), y(y) {}\n\n    Point operator + (Point p){ return Point(x+p.x, y+p.y); }\n    Point operator - (Point p){ return Point(x-p.x, y-p.y); }\n    Point operator * (double a){ return Point(a*x, a*y); }\n    Point operator / (double a){ return Point(x/a, y/a); }\n\n    double abs() { return sqrt(norm()); }\n    double norm() { return x*x + y*y; }\n\n    bool operator < (const Point &p) const{\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point &p) const{\n        return fabs(x-p.x) < EPS && fabs(y-p.y) < EPS;\n    }\n};\n\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\nstruct Circle{\n    Point c;\n    double r;\n    Circle(Point c = Point(), double r = 0.0) : c(c), r(r) {}\n};\n\nstruct Segment{\n    Point p1, p2;\n    Segment(Point p1, Point p2) : p1(p1), p2(p2) {}\n};\n\ntypedef Segment Line;\n\n\ndouble norm(Point a){\n    return a.x * a.x + a.y * a.y;\n}\n\ndouble abs(Point a){\n    return sqrt(norm(a));\n}\n\ndouble dot(Vector a, Vector b){\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b){\n    return a.x * b.y - a.y * b.x;\n}\n\ndouble getDistance(Point a, Point b){\n    return abs(a - b);\n}\n\ndouble getDistanceLP(Line l, Point p){\n    return abs(cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1));\n}\n\ndouble getDistanceSP(Segment s, Point p){\n    if(dot(s.p2-s.p1, p-s.p1) < 0.0)    return abs(p-s.p1);\n    if(dot(s.p1-s.p2, p-s.p2) < 0.0)    return abs(p-s.p2);\n    return getDistanceLP(s, p);\n}\n\ndouble getDistance(Segment s1, Segment s2){\n    if(intersect(s1, s2))   return 0.0;\n    return min({getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2), \n                getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)});\n}\n\n\nbool isOrthogonal(Vector a, Vector b){\n    return equals(dot(a, b), 0.0);\n}\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2){\n    return isOrthogonal(a1-a2, b1-b2);\n}\nbool isOrthogonal(Segment s1, Segment s2){\n    return equals(dot(s1.p2-s1.p1, s2.p2-s2.p1), 0.0);\n}\nbool isParallel(Vector a, Vector b){\n    return equals(cross(a, b), 0.0);\n}\nbool isParallel(Point a1, Point a2, Point b1, Point b2){\n    return isParallel(a1-a2, b1-b2);\n}\nbool isParallel(Segment s1, Segment s2){\n    return equals(cross(s1.p2-s1.p1, s2.p2-s2.p1), 0.0);\n}\n\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;   // p2->p0->p1\nstatic const int ONLINE_FRONT = -2; // p0->p1->p2\nstatic const int ON_SEGMENT = 0;    // p0->p2->p1\nint ccw(Point p0, Point p1, Point p2){\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if(cross(a, b) > EPS)   return COUNTER_CLOCKWISE;\n    if(cross(a, b) < -EPS)  return CLOCKWISE;\n    if(dot(a, b) < -EPS)    return ONLINE_BACK;\n    if(norm(a) < norm(b))   return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\nbool intersect(Point p1, Point p2, Point p3, Point p4){\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n            ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\nbool intersect(Segment s1, Segment s2){\n    return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\nbool intersect(Circle c, Line l){\n    return getDistanceLP(l, c.c) < c.r+EPS;\n}\nbool intersect(Circle c1, Circle c2){\n    return abs(c1.r-c2.r) <= getDistance(c1.c, c2.c) && getDistance(c1.c, c2.c) < c1.r+c2.r+EPS;\n}\n\nPoint project(Segment s, Point p){\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / norm(base);\n    return s.p1 + base * r;\n}\n\nPoint reflect(Segment s, Point p){\n    return p + (project(s, p) - p) * 2.0;\n}\n\nPoint getCrossPoint(Segment s1, Segment s2){\n    Vector base = s2.p2 - s2.p1;\n    double d1 = abs(cross(base, s1.p1-s2.p1));\n    double d2 = abs(cross(base, s1.p2-s2.p1));\n    double t = d1 / (d1 + d2);\n    return s1.p1 + (s1.p2 - s1.p1) * t;\n}\n\npair<Point,Point> getCrossPoints(Circle c, Line l){\n    assert(intersect(c, l));\n    Vector pr = project(l, c.c);\n    Vector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);\n    double base = sqrt(c.r * c.r - norm(pr - c.c));\n    return make_pair(pr + e*base, pr - e*base);\n}\n\npair<Point,Point> getCrossPoints(Circle c1, Circle c2){\n    assert(intersect(c1, c2));\n    double d = abs(c1.c - c2.c);\n    double a = acos( (c1.r*c1.r + d*d - c2.r*c2.r)/(2*c1.r*d) );\n    double t = arg(c2.c - c1.c);\n    return make_pair(c1.c + polar(c1.r, t+a), c1.c + polar(c1.r, t-a));\n}\n\npair<Point,Point> getContactPoints(Circle c, Point p){\n    assert(c.r < getDistance(c.c, p));\n    double d = getDistance(c.c, p);\n    return getCrossPoints(c, Circle(p, sqrt(d*d-c.r*c.r)));\n}\n\ndouble area(Polygon g){\n    int n = g.size();\n    Point o(0.0, 0.0);\n    double s = 0.0;\n    for(int i = 0; i < n; i++)  s += cross(g[i]-o, g[(i+1)%n]-o);\n    return abs(s) / 2.0;\n}\n\nbool isConvex(Polygon g){\n    bool ret = true;\n    int n = g.size();\n    for(int i = 0; i < n; i++){\n        for(int j = i+1; j < n; j++){\n            if(cross(g[i]-g[(i+n-1)%n], g[j]-g[(i+n-1)%n]) < -EPS || cross(g[(i+1)%n]-g[i], g[j]-g[i]) < -EPS){\n                ret = false;\n            }\n        }\n    }\n    return ret;\n}\n\nstatic const int IN = 2;\nstatic const int ON = 1;\nstatic const int OUT = 0;\nint contains(Polygon g, Point p){\n    int n = g.size();\n    bool x = false;\n    for(int i = 0; i < n; i++){\n        Point a = g[i] - p, b = g[(i+1)%n] - p;\n        if(abs(cross(a, b)) < EPS && dot(a, b) < EPS)   return ON;\n        if(a.y > b.y)   swap(a, b);\n        if(a.y < EPS && EPS < b.y && cross(a, b) > EPS) x = !x;\n    }\n    return x ? IN : OUT;\n}\n\n\ndouble arg(Vector p){\n    return atan2(p.y, p.x);\n}\n\nVector polar(double a, double r){\n    return Point(a * cos(r), a * sin(r));\n}\n\n\nPolygon andrewScan(Polygon g){\n    Polygon u, l;\n    if(g.size() < 3)    return g;\n    sort(g.begin(), g.end());\n    u.push_back(g[0]);\n    u.push_back(g[1]);\n    l.push_back(g[g.size()-1]);\n    l.push_back(g[g.size()-2]);\n\n    // upper\n    for(int i = 2; i < g.size(); i++){\n        for(int n = u.size(); n >= 2 && ccw(u[n-2], u[n-1], g[i]) != CLOCKWISE; n--){\n            u.pop_back();\n        }\n        u.push_back(g[i]);\n    }\n\n    // lower\n    for(int i = g.size()-3; i >= 0; i--){\n        for(int n = l.size(); n >= 2 && ccw(l[n-2], l[n-1], g[i]) != CLOCKWISE; n--){\n            l.pop_back();\n        }\n        l.push_back(g[i]);\n    }\n\n    reverse(l.begin(), l.end());\n    for(int i = u.size()-2; i >= 1; i--)    l.push_back(u[i]);\n\n    return l;\n}\n\ndouble convexDiameter(Polygon g){\n    double d = 0.0;\n    int n = g.size();\n    int is = 0, js = 0;\n    for(int i = 1; i < n; i++){\n        if(g[i].y > g[is].y)    is = i;\n        if(g[i].y < g[js].y)    js = i;\n    }\n    d = getDistance(g[is], g[js]);\n\n    int i = is, j = js, maxi = is, maxj = js;\n    do{\n        if(cross(g[(i+1)%n]-g[i], g[(j+1)%n]-g[j]) >= 0.0)  j = (j+1)%n;\n        else    i = (i+1)%n;\n        if(getDistance(g[i], g[j]) > d){\n            d = getDistance(g[i], g[j]);\n            maxi = i, maxj = j;\n        }\n    }while(i != is || j != js);\n\n    return d; // farthest pair is (maxi, maxj).\n}\n\n\n\nint main(){\n    double a[6];\n    for(int i = 0; i < 6; i++)  cin >> a[i];\n    Circle b(Point(a[0],a[1]),a[2]), c(Point(a[3],a[4]),a[5]);\n    double d = getDistance(b.c, c.c);\n    if(d < fabs(b.r-c.r))       cout << 0 << endl;\n    else if(d == fabs(b.r-c.r)) cout << 1 << endl;\n    else if(d < b.r+c.r)        cout << 2 << endl;\n    else if(d == b.r+c.r)       cout << 3 << endl;\n    else                        cout << 4 << endl;\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n//point\ntypedef complex<double> P;\nnamespace std {\n\tbool operator < (const P& a, const P& b) {\n\t\treturn real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n\t}\n\tbool cmp_y(const P &a, const P &b){\n\t\treturn a.imag() != b.imag() ? a.imag() < b.imag() : a.real() < b.real();\n\t}\n}\ndouble cross(const P& a, const P& b) {\n\treturn imag(conj(a)*b);\n}\ndouble dot(const P& a, const P& b) {\n\treturn real(conj(a)*b);\n}\n// circle\nstruct C {\n\tP p; double r;\n\tC(const P& p, double r) : p(p), r(r) {}\n};\n\nint intersectCC(const C& a, const C& b) {\n\tdouble dist = sqrt(norm(a.p-b.p)), r1 = a.r + b.r, r2 = abs(a.r - b.r);\n\tif(r1 < dist) return 4;\t\t//??\\?????????\n\tif(dist == r1) return 3;\t//?????\\\n\tif(r2 < dist && dist < r1) return 2; //?????????\n\tif(dist == r2) return 1; //?????\\\n\treturn 0;\t//??????\n}\n\nint main() {\n\tdouble x1, y1, r1, x2, y2, r2;\n\tcin >> x1 >> y1 >> r1 >> x2 >> y2 >> r2;\n\tC c1(P{x1, y1}, r1), c2(P{x2, y2}, r2);\n\tcout << intersectCC(c1, c2) << endl;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cmath>\n#include<iostream>\n#include<algorithm>\n#include<iomanip>\n#include<vector>\n#include<cassert>\n\nusing namespace std;\n\nnamespace geometry2d {\n\n\t//eps　浮動小数点誤差\n\tconst double EPS = 1e-10;\n\n\t//a > 0ならば+1, a == 0ならば0, a < 0ならば-1　を返す。　基本的にEPS込みの評価はこれで行う。\n\t//不等式は、加減算に直してこれに適用する。\n\tint sgn(const double a) {\n\t\treturn (a < -EPS ? -1 : (a > EPS ? +1 : 0));\n\t}\n\n\tstruct Point {\n\t\t//2次元ベクトルのクラス\n\n\t\tdouble x, y;\n\t\tPoint(double _x, double _y) {\n\t\t\tx = _x, y = _y;\n\t\t}\n\t\tPoint() {\n\t\t\tx = 0, y = 0;\n\t\t}\n\n\t\tPoint operator+() const {\n\t\t\treturn *this;\n\t\t}\n\t\tPoint operator-() const {\n\t\t\treturn{ -x, -y };\n\t\t}\n\t\tPoint operator+ (const Point& b) const {\n\t\t\treturn{ x + b.x, y + b.y };\n\t\t}\n\t\tPoint operator- (const Point& b) const {\n\t\t\treturn{ x - b.x, y - b.y };\n\t\t}\n\t\tPoint operator* (const double b) const {\n\t\t\treturn{ x * b, y * b };\n\t\t}\n\t\tPoint operator/ (const double b) const {\n\t\t\treturn{ x / b, y / b };\n\t\t}\n\t\tPoint operator+= (const Point& b) {\n\t\t\tx += b.x, y += b.y;\n\t\t\treturn *this;\n\t\t}\n\t\tPoint operator-= (const Point& b) {\n\t\t\tx -= b.x, y -= b.y;\n\t\t\treturn *this;\n\t\t}\n\t\tPoint operator*= (const double b) {\n\t\t\tx *= b, y *= b;\n\t\t\treturn *this;\n\t\t}\n\t\tPoint operator/= (const double b) {\n\t\t\tx /= b, y /= b;\n\t\t\treturn *this;\n\t\t}\n\t\tbool operator== (const Point& b) {\n\t\t\treturn b.x == x && b.y == y;\n\t\t}\n\n\t\tdouble lengthSquare() const {\n\t\t\treturn (x * x + y * y);\n\t\t}\n\t\tdouble length() const {\n\t\t\treturn std::sqrt(lengthSquare());\n\t\t}\n\t\tdouble dot(const Point& b) const {\n\t\t\treturn x * b.x + y * b.y;\n\t\t}\n\t\tdouble cross(const Point& b) const {\n\t\t\t//Generally, cross product is vector, but in 2D, cross product is also scalar.\n\t\t\treturn x * b.y - y * b.x;\n\t\t}\n\t\tdouble distanceFrom(const Point& b) const {\n\t\t\treturn std::sqrt((x - b.x) * (x - b.x) + (y - b.y) * (y - b.y));\n\t\t}\n\t\tPoint normalized() const {\n\t\t\treturn{ x / length(), y / length() };\n\t\t}\n\t\tbool isZero() const {\n\t\t\treturn sgn(x) == 0 && sgn(y) == 0;\n\t\t}\n\t\t//単位法線ベクトル\n\t\tPoint normalUnitVector() const {\n\t\t\treturn{ -normalized().y, normalized().x };\n\t\t}\n\t\t//(0, 0)中心にarg(弧度法)回転した座標\n\t\tPoint rotation(double arg) const {\n\t\t\tdouble cs = cos(arg), sn = sin(arg);\n\t\t\treturn Point(x * cs - y * sn, x * sn + y * cs);\n\t\t}\n\t\t//(0, 0)中心の円上に乗ってるとしたときの、偏角\n\t\tdouble angle() const {\n\t\t\treturn atan2(y, x);\n\t\t}\n\t};\n\n\tinline Point operator*(double a, const Point& b) {\n\t\treturn{ b.x * a, b.y * a };\n\t}\n\n\ttemplate <class Char>\n\tinline std::basic_ostream<Char>& operator <<(std::basic_ostream<Char>& os, const Point& v)\n\t{\n\t\treturn os << Char('(') << v.x << Char(',') << v.y << Char(')');\n\t}\n\n\ttemplate <class Char>\n\tinline std::basic_istream<Char>& operator >> (std::basic_istream<Char>& is, Point& v)\n\t{\n\t\treturn is >> v.x >> v.y;\n\t}\n\n\t//幾何ライブラリにおいて、解なしのような状態の時に返される点の値\n\tconst Point error_val = { 114514.0, -191981.0 };\n\n\tinline bool operator==(const Point& a, const Point& b) {\n\t\treturn (sgn(a.x - b.x) == 0 && sgn(a.y - b.y) == 0);\n\t}\n\n\t//第一にx, 第二にyを小さい順にソートするためのオーバーロード\n\tinline bool operator<(const Point& a, const Point& b) {\n\t\tif (sgn(a.x - b.x) != 0)return sgn(a.x - b.x) < 0;\n\t\telse return sgn(a.y - b.y) < 0;\n\t}\n\n\t/*\n\t3点A, B, Cの位置関係を返す関数 A, Bがすべて異なった点であるのが前提\n\t//ABから見てBCは左に曲がるのなら +1\n\t//ABから見てBCは右に曲がるのなら -1\n\t//ABC(CBA)の順番で一直線上に並ぶなら +2\n\t//ACB(BCA)の順番で一直線上に並ぶなら 0\n\tBAC(CAB)の順番で一直線上に並ぶなら -2\n\t*/\n\tint iSP(const Point& a, const Point& b, const Point& c) {\n\t\tint flg = sgn((b - a).cross(c - a));\n\t\tif (flg == 1) {\n\t\t\treturn +1;\n\t\t}\n\t\telse if (flg == -1) {\n\t\t\treturn -1;\n\t\t}\n\t\telse {\n\t\t\t//ABC(CBA)\n\t\t\tif (sgn((b - a).dot(c - b)) > 0)\n\t\t\t\treturn +2;\n\t\t\t//BAC(CAB)\n\t\t\telse if (sgn((a - b).dot(c - a)) > 0)\n\t\t\t\treturn -2;\n\t\t\t//ACB(BCA)　CがA or Bと一致しても、こっちに含まれる。\n\t\t\telse\n\t\t\t\treturn 0;\n\t\t}\n\t}\n\n\t//直線に関する操作や判定\n\tnamespace line2d {\n\n\t\t//向きつき直線を想定。Segment\n\t\tstruct Line {\n\n\t\t\t//直線の通る二点。有向直線でないのならば、beginやendに違いはない。\n\t\t\tPoint begin, end;\n\n\t\t\tLine() {\n\t\t\t\tbegin = Point(), end = Point();\n\t\t\t}\n\n\t\t\tLine(const Point& b, const Point& e) {\n\t\t\t\tbegin = b, end = e;\n\t\t\t}\n\n\t\t\t//ax+by+c=0\n\t\t\tLine(const double a, const double b, const double c) {\n\t\t\t\tif (sgn(a) == 0 && sgn(b) == 0) {\n\t\t\t\t\tassert(-1);\n\t\t\t\t}\n\n\t\t\t\tif (sgn(b) == 0) {\n\t\t\t\t\t//ax+c=0になる。\n\t\t\t\t\tbegin = Point(-c / a, 0.0);\n\t\t\t\t\tend = Point(-c / a, 1.0);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t//y=-(ax+c)/b　傾きは-a/bで、y切片が-c/b\n\t\t\t\t\tbegin = Point(0, -c / b);\n\t\t\t\t\tend = Point(1.0, -(a + c) / b);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tPoint vec() const {\n\t\t\t\treturn end - begin;\n\t\t\t}\n\n\t\t\tPoint countervec() const {\n\t\t\t\treturn begin - end;\n\t\t\t}\n\n\t\t};\n\n\n\t\t//線分の場合、Lineと同じものになるが、はっきりと区別する\n\t\ttypedef Line Segment;\n\n\n\t\t//直線の交点を返す。交わってなければ、error_valを返す。\n\t\tPoint lineIntersection(const Line& l1, const Line& l2) {\n\t\t\tif (sgn(l1.vec().cross(l2.vec())) == 0)return error_val;\n\n\t\t\tPoint ret;\n\t\t\tret = l1.begin + l1.vec() *\n\t\t\t\tabs((l2.end - l1.begin).cross(l2.vec()) / l1.vec().cross(l2.vec()));\n\t\t\treturn ret;\n\t\t}\n\n\t\t//線分が共通部分を持つかどうか？と線分の交点を返す。共通部分がない、もしくは交点が一意ではないなら、error_valを返す。\n\t\t//trueなら、共通部分を持つ。falseなら、共通部分を持たない。\n\t\tpair<bool, Point> segmentIntersection(const Segment& s1, const Segment& s2) {\n\n\t\t\tif (iSP(s1.begin, s1.end, s2.begin) * iSP(s1.begin, s1.end, s2.end) <= 0 &&\n\t\t\t\tiSP(s2.begin, s2.end, s1.begin) * iSP(s2.begin, s2.end, s1.end) <= 0) {\n\n\t\t\t\t//平行ならば、交点は定まらない。(完全に重なってるので)\n\t\t\t\tif (s1.vec().cross(s2.vec()) == 0)\n\t\t\t\t\treturn make_pair(true, error_val);\n\t\t\t\telse //そうでないのなら、lineIntersection()で交点を返しておく。\n\t\t\t\t\treturn make_pair(true, lineIntersection(s1, s2));\n\n\t\t\t}\n\t\t\treturn make_pair(false, error_val);\n\t\t}\n\n\n\t\t//点と直線の距離。引数は、点、直線上の2点\n\t\tdouble distanceBetweenPointAndLine(const Point& p, const Line& l) {\n\t\t\treturn abs(l.vec().cross(p - l.begin) / l.vec().length());\n\t\t}\n\n\t\t//点と線分の距離。引数は、点、線分の両端\n\t\tdouble distanceBetweenPointAndSegment(const Point& p, const Segment& s) {\n\t\t\tif (sgn(s.vec().dot(p - s.begin)) < 0 || sgn(s.countervec().dot(p - s.end)) < 0) {\n\t\t\t\t//下した垂線は線分の上にはない\n\t\t\t\treturn min(p.distanceFrom(s.begin), p.distanceFrom(s.end));\n\t\t\t}\n\t\t\treturn distanceBetweenPointAndLine(p, s);\n\t\t}\n\n\t\t//二線分間の距離\n\t\tdouble distanceBetweenSegmentAndSegment(const Segment& s1, const Segment& s2) {\n\t\t\tif (segmentIntersection(s1, s2).first)return 0;//交点を持つ\n\n\t\t\tdouble ans = distanceBetweenPointAndSegment(s1.begin, s2);\n\t\t\tans = min(ans, distanceBetweenPointAndSegment(s1.end, s2));\n\t\t\tans = min(ans, distanceBetweenPointAndSegment(s2.begin, s1));\n\t\t\tans = min(ans, distanceBetweenPointAndSegment(s2.end, s1));\n\t\t\treturn ans;\n\t\t}\n\n\t\t//正射影\n\t\t//引数は点A, B, Cで、BAベクトルの直線BC上の正射影を求める。\n\t\tPoint projection(const Point& a, const Line& l) {\n\t\t\tPoint ret;\n\t\t\tret = l.begin +\n\t\t\t\tl.vec().normalized() * (a - l.begin).dot(l.vec()) / l.vec().length();\n\t\t\treturn ret;\n\t\t}\n\n\t\t//鏡映変換。引数は点A, B, Cで、直線BCにおいて、Aと線対称な点を求める。\n\t\tPoint reflection(const Point& a, const Line& l) {\n\t\t\tPoint ret;\n\t\t\tret = a + 2 * (projection(a, l) - a);\n\t\t\treturn ret;\n\t\t}\n\t}\n\n\tnamespace circle2d {\n\n\t\tstruct Circle {\n\t\t\tPoint center;\n\t\t\tdouble r;\n\t\t\t\n\t\t\tCircle() {\n\t\t\t\tcenter = Point();\n\t\t\t\tr = 0;\n\t\t\t}\n\n\t\t\tCircle(const Point& C, const double& R) {\n\t\t\t\tcenter = C, r = R;\n\t\t\t}\n\t\t};\n\n\t\t//直線と円の交点を返す。1つ目のbool値は、trueなら交わっている、falseならば交わってない。\n\t\t//falseならば、2つ目のペアは共にerror_valとなる。\n\t\t//trueならば、2つ交点を返す。(1つしか持たない場合でも、2つ同じものを返す)\n\t\tpair<bool, pair<Point, Point>> lineAndCircleIntersection(const Circle& c, const line2d::Line& l) {\n\t\t\t//交点を持たない\n\t\t\tif (sgn(line2d::distanceBetweenPointAndLine(c.center, l) - c.r) > 0) {\n\t\t\t\treturn make_pair(false, make_pair(error_val, error_val));\n\t\t\t}\n\t\t\telse if (sgn(line2d::distanceBetweenPointAndLine(c.center, l)) == 0) {\n\t\t\t\t//中心を通るなら\n\t\t\t\tpair<Point, Point> ret;\n\t\t\t\tret.first = c.center + l.vec().normalized() * c.r;\n\t\t\t\tret.second = c.center - l.vec().normalized() * c.r;\n\t\t\t\treturn make_pair(true, ret);\n\t\t\t}\n\t\t\telse {\n\n\t\t\t\t//垂線の足\n\t\t\t\tPoint H = line2d::projection(c.center, l);\n\t\t\t\tpair<Point, Point> ret;\n\n\t\t\t\tret.first = H + (c.center - H).normalUnitVector() *\n\t\t\t\t\tsqrt(max(0.0, pow(c.r, 2) - pow(line2d::distanceBetweenPointAndLine(c.center, l), 2)));\n\t\t\t\tret.second = H - (c.center - H).normalUnitVector() *\n\t\t\t\t\tsqrt(max(0.0, pow(c.r, 2) - pow(line2d::distanceBetweenPointAndLine(c.center, l), 2)));\n\t\t\t\treturn make_pair(true, ret);\n\t\t\t}\n\t\t}\n\n\t\t/*2つの円の位置関係を返す。交点を持つのなら、その交点も返す。\n\t\t1つ目のintの意味は下の通り\n\t\t円AがBを内包してる。+1\n\t\t円BがAを内包してる。-1\n\t\t円AとBは内接してる。0\n\t\t円AとBは2つの交点を持つ。+2\n\t\t円AとBは外接してる。+3\n\t\t円AとBは交わらない+4\n\t\t交点が存在しないのなら、error_val2つが返される。\n\t\t*/\n\t\tpair<int, pair<Point, Point>> intersectionCircleAndCircle(const Circle& c1, const Circle& c2) {\n\t\t\tPoint d = c2.center - c1.center;\n\t\t\tpair<Point, Point> ret;\n\t\t\tint mode;\n\n\t\t\t//遠すぎて交点を持たない or　内包してる\n\t\t\tif (sgn(d.length() - c1.r - c2.r) > 0 || sgn(d.length() - abs(c1.r - c2.r)) < 0) {\n\t\t\t\tif (sgn(d.length() - c1.r - c2.r) > 0)mode = +4;\n\t\t\t\telse {\n\t\t\t\t\tif (sgn(c1.r - c2.r) > 0)mode = +1;\n\t\t\t\t\telse mode = -1;\n\t\t\t\t}\n\t\t\t\tret = make_pair(error_val, error_val);\n\t\t\t\treturn make_pair(mode, ret);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif(sgn(d.length() - c1.r - c2.r) == 0)mode = +3;\n\t\t\t\telse if (sgn(d.length() - (c1.r + c2.r)) < 0 && \n\t\t\t\t\tsgn(d.length() - abs(c1.r - c2.r)) > 0)mode = +2;\n\t\t\t\telse mode = 0;\n\t\t\t}\n\t\t\tdouble AH = (pow(c1.r, 2) - pow(c2.r, 2) + d.lengthSquare()) / (2.0 * d.length());\n\t\t\tdouble CH = sqrt(max(0.0, pow(c1.r, 2) - pow(AH, 2)));\n\t\t\tret.first = c1.center + d.normalized() * AH + d.normalUnitVector() * CH;\n\t\t\tret.second = c1.center + d.normalized() * AH - d.normalUnitVector() * CH;\n\t\t\treturn make_pair(mode, ret);\n\t\t}\n\t}\n\n}\n\nint main() {\n\tgeometry2d::circle2d::Circle c1, c2;\n\tcin >> c1.center >> c1.r >> c2.center >> c2.r;\n\tauto ret = geometry2d::circle2d::intersectionCircleAndCircle(c1, c2);\n\n\tif (abs(ret.first) == 1)cout << 0 << endl;\n\telse if (ret.first == 0)cout << 1 << endl;\n\telse if (ret.first == 2)cout << 2 << endl;\n\telse if (ret.first == 3)cout << 3 << endl;\n\telse cout << 4 << endl;\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "using namespace std;\n#include<iostream>\n#include<algorithm>\n#include<vector>\n#include<cmath>\n#include<iomanip>\nconst double EPS=1e-10;\nbool eq(double a,double b){return abs(a-b)<EPS;}\nstruct Point{\n\tdouble x,y;\n\tPoint(double x_=0,double y_=0):x(x_),y(y_){}\n\tPoint operator-()const{return Point(-x,-y);}\n\tPoint operator+(const Point&p)const{return Point(x+p.x,y+p.y);}\n\tPoint operator-(const Point&p)const{return Point(x-p.x,y-p.y);}\n\tPoint operator*(const double k)const{return Point(x*k,y*k);}\n\tPoint operator/(const double k)const{return Point(x/k,y/k);}\n\tbool operator<(const Point&p)const{return eq(x,p.x)?y<p.y:x<p.x;}\n\tbool operator==(const Point&p)const{return eq(x,p.x)&&eq(y,p.y);}\n};\nistream&operator>>(istream&is,Point&p){return is>>p.x>>p.y;}\nostream&operator<<(ostream&os,const Point&p){return os<<fixed<<setprecision(9)<<p.x<<' '<<p.y;}\nstruct Line{\n\tPoint p1,p2;\n\tLine(Point p1_=Point(),Point p2_=Point()):p1(p1_),p2(p2_){}\n};\nstruct Segment:Line{\n\tSegment(Point p1_=Point(),Point p2_=Point()):Line(p1_,p2_){}\n};\nstruct Circle{\n\tPoint o;\n\tdouble r;\n\tCircle(Point o_=Point(),double r_=0):o(o_),r(r_){}\n};\nusing Polygon=vector<Point>;\n//function list begin\nPoint vec(const Line&);\ndouble norm(const Point&);\ndouble norm(const Line&);\ndouble abs(const Point&);\ndouble abs(const Line&);\ndouble arg(const Point&);\ndouble arg(const Line&);\ndouble arg(const Point&,const Point&,const Point&);//a->b->c\ndouble dot(const Point&,const Point&);\ndouble cross(const Point&,const Point&);\nPoint polar(const double,const double);\nPoint rotate(const Point&,const double);\nenum{ONLINE_FRONT=-2,CLOCKWISE=-1,ON_SEGMENT=0,COUNTER_CLOCKWISE=1,ONLINE_BACK=2};\nint ccw(const Point&,const Point&,const Point&);\nint ccw(const Line&,const Point&);\nbool orthogonal(const Point&,const Point&);\nbool orthogonal(const Line&,const Line&);\nbool parallel(const Point&,const Point&);\nbool parallel(const Line&,const Line&);\nbool intersect(const Line&,const Point&);\nbool intersect(const Line&,const Line&);\nbool intersect(const Segment&,const Point&);\nbool intersect(const Segment&,const Segment&);\nbool intersect(const Line&,const Segment&);\nbool intersect(const Segment&,const Line&);\nbool intersect(const Circle&,const Point&);\nint intersect(const Circle&,const Line&);//count contacts\nint intersect(const Circle&,const Segment&);\nint intersect(const Circle&,const Circle&);\ndouble distance(const Point&,const Point&);\ndouble distance(const Line&,const Point&);\ndouble distance(const Line&,const Line&);\ndouble distance(const Segment&,const Point&);\ndouble distance(const Segment&,const Segment&);\ndouble distance(const Line&,const Segment&);\ndouble distance(const Segment&,const Line&);\ndouble distance(const Circle&,const Point&);\ndouble distance(const Circle&,const Line&);\ndouble distance(const Circle&,const Segment&);\ndouble distance(const Circle&,const Circle&);\nPoint projection(const Line&,const Point&);\nPoint reflection(const Line&,const Point&);\nPoint crosspoint(const Line&,const Line&);\npair<Point,Point>crosspoint(const Circle&,const Line&);\npair<Point,Point>crosspoint(const Circle&,const Segment&);\npair<Point,Point>crosspoint(const Circle&,const Circle&);\npair<Point,Point>tangent(const Circle&,const Point&);\nvector<Line>tangent(const Circle&,const Circle&);\nbool is_convex(const Polygon&);\nPolygon convex_full(Polygon,bool=false);\nenum{OUT,ON,IN};\nint contain(const Polygon&,const Point&);\nint contain(const Circle&,const Point&);\nPolygon convex_cut(const Polygon&,const Line&);\ndouble diameter(const Polygon);\ndouble area(const Polygon&);\ndouble area(const Polygon&,const Line&);\ndouble area(const Polygon&,const Circle&);\n//function list end\nPoint vec(const Line&s){return s.p2-s.p1;}\ndouble norm(const Point&p){return p.x*p.x+p.y*p.y;}\ndouble norm(const Line&s){return norm(vec(s));}\ndouble abs(const Point&p){return hypot(p.x,p.y);}\ndouble abs(const Line&s){return abs(vec(s));}\ndouble arg(const Point&p){return atan2(p.y,p.x);}\ndouble arg(const Line&s){return arg(vec(s));}\ndouble arg(const Point&a,const Point&b,const Point&c){\n\tdouble A=arg(b-a),B=arg(c-b);\n\tdouble theta=abs(A-B);\n\treturn min(theta,2*M_PI-theta);\n}\ndouble dot(const Point&a,const Point&b){return a.x*b.x+a.y*b.y;}\ndouble cross(const Point&a,const Point&b){return a.x*b.y-a.y*b.x;}\nPoint polar(const double r,const double theta){return Point(cos(theta),sin(theta))*r;}\nPoint rotate(const Point&p,const double theta){\n\treturn Point(p.x*cos(theta)-p.y*sin(theta),p.x*sin(theta)+p.y*cos(theta));\n}\nint ccw(const Point&a,const Point&b,const Point&c){\n\tPoint p=b-a,q=c-a;\n\treturn cross(p,q)>EPS?COUNTER_CLOCKWISE\n\t\t:cross(p,q)<-EPS?CLOCKWISE\n\t\t:dot(p,q)<0?ONLINE_BACK\n\t\t:norm(p)<norm(q)?ONLINE_FRONT\n\t\t:ON_SEGMENT;\n}\nint ccw(const Line&s,const Point&p){return ccw(s.p1,s.p2,p);}\nbool orthogonal(const Point&a,const Point&b){return eq(dot(a,b),0);}\nbool orthogonal(const Line&s,const Line&t){return orthogonal(vec(s),vec(t));}\nbool parallel(const Point&a,const Point&b){return eq(cross(a,b),0);}\nbool parallel(const Line&s,const Line&t){return parallel(vec(s),vec(t));}\nbool intersect(const Line&s,const Point&p){return eq(cross(vec(s),p-s.p1),0);}\nbool intersect(const Line&s,const Line&t){return !parallel(s,t)||intersect(s,t.p1);}\nbool intersect(const Segment&s,const Point&p){return ccw(s,p)==ON_SEGMENT;}\nbool intersect(const Segment&s,const Segment&t){\n\treturn ccw(s,t.p1)*ccw(s,t.p2)<=0&&ccw(t,s.p1)*ccw(t,s.p2)<=0;\n}\nbool intersect(const Line&s,const Segment&t){\n\treturn cross(vec(s),t.p1-s.p1)*cross(vec(s),t.p2-s.p1)<EPS;\n}\nbool intersect(const Segment&s,const Line&t){return intersect(t,s);}\nbool intersect(const Circle&c,const Point&p){return eq(distance(c.o,p),c.r);}\nint intersect(const Circle&c,const Line&s){\n\tdouble d=distance(s,c.o);\n\treturn eq(d,c.r)?1:d<c.r?2:0;\n}\nint intersect(const Circle&c,const Segment&s){\n\tPoint h=projection(s,c.o);\n\tdouble d1=distance(c.o,s.p1),d2=distance(c.o,s.p2);\n\treturn distance(c.o,h)>c.r+EPS?0\n\t\t:d1<c.r-EPS&&d2<c.r-EPS?0\n\t\t:d1<c.r-EPS&&d2>c.r+EPS||d1>c.r+EPS&&d2<c.r-EPS?1\n\t\t:intersect(s,h)?distance(c.o,h)<c.r-EPS?2:1\n\t\t:0;\n}\nint intersect(const Circle&a,const Circle&b){\n\tdouble d=distance(a.o,b.o);\n\treturn eq(d,a.r+b.r)?3:d>a.r+b.r?4:eq(d,abs(a.r-b.r))?1:d>abs(a.r-b.r)?2:0;\n}\ndouble distance(const Point&a,const Point&b){return abs(a-b);}\ndouble distance(const Line&s,const Point&p){return distance(p,projection(s,p));}\ndouble distance(const Line&s,const Line&t){return intersect(s,t)?0:distance(s,t.p1);}\ndouble distance(const Segment&s,const Point&p){\n\treturn distance(p,\n\t\tdot(vec(s),p-s.p1)<0?s.p1\n\t\t:dot(-vec(s),p-s.p2)<0?s.p2\n\t\t:projection(s,p)\n\t);\n}\ndouble distance(const Segment&s,const Segment&t){\n\treturn intersect(s,t)?0:min({\n\t\tdistance(s,t.p1),distance(s,t.p2),\n\t\tdistance(t,s.p1),distance(t,s.p2)\n\t});\n}\ndouble distance(const Line&s,const Segment&t){\n\treturn intersect(s,t)?0:min(distance(s,t.p1),distance(s,t.p2));\n}\ndouble distance(const Segment&s,const Line&t){return distance(t,s);}\ndouble distance(const Circle&c,const Point&p){return abs(distance(c.o,p)-c.r);}\ndouble distance(const Circle&c,const Line&s){return max(distance(s,c.o)-c.r,0.);}\ndouble distance(const Circle&c,const Segment&s){\n\tPoint h=projection(s,c.o);\n\tdouble d1=distance(c.o,s.p1),d2=distance(c.o,s.p2);\n\treturn intersect(c,s)?0\n\t\t:d1<c.r-EPS&&d2<c.r-EPS?c.r-max(d1,d2)\n\t\t:intersect(s,h)?distance(c.o,h)-c.r\n\t\t:min(distance(c.o,s.p1),distance(c.o,s.p2))-c.r;\n}\ndouble distance(const Circle&a,const Circle&b){return max(distance(a.o,b.o)-a.r-b.r,0.);}\nPoint projection(const Line&s,const Point&p){\n\treturn s.p1+vec(s)*dot(p-s.p1,vec(s))/norm(s);\n}\nPoint reflection(const Line&s,const Point&p){return projection(s,p)*2-p;}\nPoint crosspoint(const Line&s,const Line&t){\n\tdouble d1=abs(cross(vec(s),t.p1-s.p1));\n\tdouble d2=abs(cross(vec(s),t.p2-s.p1));\n\treturn t.p1+vec(t)*(d1/(d1+d2));\n}\npair<Point,Point>crosspoint(const Circle&c,const Line&s){\n\tPoint h=projection(s,c.o);\n\tPoint e=vec(s)/abs(s)*sqrt(c.r*c.r-norm(h-c.o));\n\treturn minmax(h-e,h+e);\n}\npair<Point,Point>crosspoint(const Circle&c,const Segment&s){\n\tpair<Point,Point>p=crosspoint(c,Line(s));\n\treturn intersect(c,s)==2?p\n\t\t:intersect(s,p.first)?make_pair(p.first,p.first)\n\t\t:make_pair(p.second,p.second);\n}\npair<Point,Point>crosspoint(const Circle&a,const Circle&b){\n\tdouble d=distance(a.o,b.o);\n\tdouble alpha=acos((a.r*a.r+d*d-b.r*b.r)/(2*a.r*d));\n\tdouble theta=arg(b.o-a.o);\n\treturn minmax(a.o+polar(a.r,theta+alpha),a.o+polar(a.r,theta-alpha));\n}\npair<Point,Point>tangent(const Circle&c,const Point&p){\n\treturn crosspoint(c,Circle(p,sqrt(norm(c.o-p)-c.r*c.r)));\n}\nvector<Line>tangent(const Circle&a,const Circle&b){\n\tvector<Line>ret;\n\tdouble g=distance(a.o,b.o);\n\tif(eq(g,0))return ret;\n\tPoint u=(b.o-a.o)/g;\n\tPoint v=rotate(u,M_PI/2);\n\tfor(int s:{-1,1}){\n\t\tdouble h=(a.r+b.r*s)/g;\n\t\tif(eq(h,0))ret.emplace_back(a.o+u*a.r,a.o+u*a.r+v);\n\t\telse if(1-h*h>0){\n\t\t\tPoint U=u*h,V=v*sqrt(1-h*h);\n\t\t\tret.emplace_back(a.o+(U+V)*a.r,b.o-(U+V)*b.r*s);\n\t\t\tret.emplace_back(a.o+(U-V)*a.r,b.o-(U-V)*b.r*s);\n\t\t}\n\t}\n\treturn ret;\n}\nbool is_convex(const Polygon&P){\n\tfor(int i=0;i<P.size();i++)\n\t\tif(ccw(P[i],P[(i+1)%P.size()],P[(i+2)%P.size()])==CLOCKWISE)return false;\n\treturn true;\n}\nPolygon convex_full(Polygon P,bool ONSEG){\n\tif(P.size()<=2)return P;\n\tsort(P.begin(),P.end());\n\tPolygon ret(2*P.size());\n\tint k=0,t;\n\tif(ONSEG){\n\t\tfor(const Point&p:P){\n\t\t\twhile(k>=2&&ccw(ret[k-2],ret[k-1],p)==CLOCKWISE)k--;\n\t\t\tret[k++]=p;\n\t\t}\n\t\tt=k;\n\t\tfor(int i=P.size()-2;i>=0;i--){\n\t\t\twhile(k>=t+1&&ccw(ret[k-2],ret[k-1],P[i])==CLOCKWISE)k--;\n\t\t\tret[k++]=P[i];\n\t\t}\n\t}\n\telse{\n\t\tfor(const Point&p:P){\n\t\t\twhile(k>=2&&ccw(ret[k-2],ret[k-1],p)!=COUNTER_CLOCKWISE)k--;\n\t\t\tret[k++]=p;\n\t\t}\n\t\tt=k;\n\t\tfor(int i=P.size()-2;i>=0;i--){\n\t\t\twhile(k>=t+1&&ccw(ret[k-2],ret[k-1],P[i])!=COUNTER_CLOCKWISE)k--;\n\t\t\tret[k++]=P[i];\n\t\t}\n\t}\n\tret.resize(k-1);\n\tint mi=0;\n\tfor(int i=1;i<k-1;i++)\n\t\tif(eq(ret[mi].y,ret[i].y)?ret[mi].x>ret[i].x:ret[mi].y>ret[i].y)mi=i;\n\trotate(ret.begin(),ret.begin()+mi,ret.end());\n\treturn ret;\n}\nint contain(const Polygon&P,const Point&p){\n\tbool in=false;\n\tfor(int i=0;i<P.size();i++){\n\t\tSegment s(P[i],P[(i+1)%P.size()]);\n\t\tif(intersect(s,p))return ON;\n\t\telse{\n\t\t\tPoint a=s.p1-p,b=s.p2-p;\n\t\t\tif(a.y>b.y)swap(a,b);\n\t\t\tif(a.y<EPS&&EPS<b.y&&cross(a,b)>EPS)in=!in;\n\t\t}\n\t}\n\treturn in?IN:OUT;\n}\nint contain(const Circle&c,const Point&p){\n\tdouble d=distance(c.o,p);\n\treturn eq(d,c.r)?ON:d<c.r?IN:OUT;\n}\nPolygon convex_cut(const Polygon&P,const Line&s){\n\tPolygon ret;\n\tfor(int i=0;i<P.size();i++){\n\t\tSegment t(P[i],P[(i+1)%P.size()]);\n\t\tif(ccw(s,t.p1)!=CLOCKWISE)ret.push_back(t.p1);\n\t\tif(!parallel(s,t)&&!intersect(s,t.p1)\n\t\t\t&&!intersect(s,t.p2)&&intersect(s,t))ret.push_back(crosspoint(s,t));\n\t}\n\treturn ret;\n}\ndouble diameter(Polygon P){\n\tif(!is_convex(P))P=convex_full(P);\n\tint mi=0,Mi=0;\n\tfor(int i=1;i<P.size();i++){\n\t\tif(P[i].x<P[mi].x)mi=i;\n\t\tif(P[i].x>P[Mi].x)Mi=i;\n\t}\n\tdouble ret=0;\n\tint sm=mi,sM=Mi;\n\twhile(mi!=sM||Mi!=sm){\n\t\tret=max(ret,norm(P[mi]-P[Mi]));\n\t\tif(cross(P[(mi+1)%P.size()]-P[mi],P[(Mi+1)%P.size()]-P[Mi])<0)mi=(mi+1)%P.size();\n\t\telse Mi=(Mi+1)%P.size();\n\t}\n\treturn sqrt(ret);\n}\ndouble area(const Polygon&P){\n\tdouble ret=0;\n\tfor(int i=0;i<P.size();i++)ret+=cross(P[i],P[(i+1)%P.size()]);\n\treturn ret/2;\n}\ndouble area(const Polygon&P,const Line&s){return area(convex_cut(P,s));}\ndouble area(const Polygon&P,const Circle&c){}\nmain(){\n\tCircle a,b;\n\tcin>>a.o>>a.r>>b.o>>b.r;\n\tcout<<intersect(a,b)<<endl;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\n#include <complex>\n\nusing namespace std;\n\nint main() {\n\tint x1, y1, r1;\n\tint x2, y2, r2;\n\t\n\tcin >> x1 >> y1 >> r1;\n\tcin >> x2 >> y2 >> r2;\n\t\n\tint X = sqrt(pow(x1-x2, 2) + pow(y1-y2, 2));\n\t\n\tif(r1+r2 < X){\n\t\tcout << 4 << endl;\n\t} else if(X == r1+r2){\n\t\tcout << 3 << endl;\n\t} else if(abs(r1-r2) < X){\n\t\tcout << 2 << endl;\n\t} else if(X == abs(r1-r2)){\n\t\tcout << 1 << endl;\n\t} else{\n\t\tcout << 0 << endl;\n\t}\n\t\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#include <cmath>\n\nusing namespace std;\ntypedef long long ll;\n//typedef unsigned long long ll;\n\n#define rep(i, n) for (int i = 0; i < (n); ++i)\n//#define rep(i, n) for (ll i = 0; i < (n); ++i)\n//#define sz(x) ll(x.size())\n//typedef pair<ll, int> P;\n//typedef pair<ll, ll> P;\n//const double INF = 1e10;\n//const ll INF = LONG_LONG_MAX / 100;\n//const ll INF = (1ll << 31) - 1;\n//const ll INF = 1e15;\nconst ll MINF = LONG_LONG_MIN;\n//const int INF = INT_MAX / 10;\n#define cmin(x, y) x = min(x, y)\n#define cmax(x, y) x = max(x, y)\n//typedef pair<int, int> P;\n//typedef pair<double, double> P;\n\n//bool contain(set<P> &s, P a) { return s.find(a) != s.end(); }\n\n//ifstream myfile(\"C:\\\\Users\\\\riku\\\\Downloads\\\\0_00.txt\");\n//ofstream outfile(\"log.txt\");\n//outfile << setw(6) << setfill('0') << prefecture << setw(6) << setfill('0') << rank << endl;\n// std::cout << std::bitset<8>(9);\nconst int mod = 1000000007;\ntypedef priority_queue<long long, vector<long long>, greater<long long>> PQ_ASK;\n\n\nvoid print_line(vector<string> &line) {\n    if (line.size() == 0ll) {\n        cout << endl;\n        return;\n    }\n    for (ll i = 0; i < line.size(); i++) {\n        cout << line[i];\n        if (i == line.size() - 1) cout << endl;\n        else cout << ' ';\n    }\n}\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nstruct Point {\n    double x, y;\n\n    Point(double x = 0, double y = 0) : x(x), y(y) {}\n\n    Point operator+(Point p) { return Point(x + p.x, y + p.y); }\n\n    Point operator-(Point p) { return Point(x - p.x, y - p.y); }\n\n    Point operator*(double a) { return Point(a * x, a * y); }\n\n    Point operator/(double a) { return Point(x / a, y / a); }\n\n    double abs() { return sqrt(norm()); }\n\n    double norm() { return x * x + y * y; }\n\n    bool operator<(const Point &p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator==(const Point &p) const {\n        return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n    }\n};\n\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\n\nstatic const int IN = 2;\nstatic const int ON = 1;\nstatic const int OUT = 0;\n\ndouble dot(Vector a, Vector b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n    return a.x * b.y - a.y * b.x;\n}\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;   // p2->p0->p1\nstatic const int ONLINE_FRONT = -2; // p0->p1->p2\nstatic const int ON_SEGMENT = 0;    // p0->p2->p1\n\ndouble norm(Point a) {\n    return a.x * a.x + a.y * a.y;\n}\n\nint ccw(Point p0, Point p1, Point p2) {\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n    if (cross(a, b) < -EPS) return CLOCKWISE;\n    if (dot(a, b) < -EPS) return ONLINE_BACK;\n    if (norm(a) < norm(b)) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\nPolygon f(Polygon g) {\n    Polygon u, l;\n    if (g.size() < 3) return g;\n    sort(g.begin(), g.end());\n    u.push_back(g[0]);\n    u.push_back(g[1]);\n    l.push_back(g[g.size() - 1]);\n    l.push_back(g[g.size() - 2]);\n\n    // upper\n    for (int i = 2; i < g.size(); i++) {\n        for (int n = u.size(); n >= 2 && ccw(u[n - 2], u[n - 1], g[i]) == COUNTER_CLOCKWISE; n--) {\n            u.pop_back();\n        }\n        u.push_back(g[i]);\n    }\n\n    // lower\n    for (int i = g.size() - 3; i >= 0; i--) {\n        for (int n = l.size(); n >= 2 && ccw(l[n - 2], l[n - 1], g[i]) == COUNTER_CLOCKWISE; n--) {\n            l.pop_back();\n        }\n        l.push_back(g[i]);\n    }\n\n    reverse(l.begin(), l.end());\n    for (int i = u.size() - 2; i >= 1; i--) l.push_back(u[i]);\n\n    return l;\n}\n\n\ndouble abs(Point a) {\n    return sqrt(norm(a));\n}\n\n\ndouble getDistance(Point a, Point b) {\n    return abs(a - b);\n}\n\n\ndouble convexDiameter(Polygon g) {\n    double d = 0.0;\n    int n = g.size();\n    int is = 0, js = 0;\n    for (int i = 1; i < n; i++) {\n        if (g[i].y > g[is].y) is = i;\n        if (g[i].y < g[js].y) js = i;\n    }\n    d = getDistance(g[is], g[js]);\n\n    int i = is, j = js, maxi = is, maxj = js;\n    do {\n        if (cross(g[(i + 1) % n] - g[i], g[(j + 1) % n] - g[j]) >= 0.0) j = (j + 1) % n;\n        else i = (i + 1) % n;\n        if (getDistance(g[i], g[j]) > d) {\n            d = getDistance(g[i], g[j]);\n            maxi = i, maxj = j;\n        }\n    } while (i != is || j != js);\n\n    return d;\n}\n\nstruct Segment {\n    Point p1, p2;\n\n    Segment(Point p1, Point p2) : p1(p1), p2(p2) {}\n};\n\ntypedef Segment Line;\n\nbool isParallel(Vector a, Vector b) {\n    return equals(cross(a, b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n    return isParallel(a1 - a2, b1 - b2);\n}\n\nbool isParallel(Segment s1, Segment s2) {\n    return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n            ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\n\nbool intersect(Segment s1, Segment s2) {\n    return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\n\nPoint getCrossPoint(Segment s1, Segment s2) {\n    Vector base = s2.p2 - s2.p1;\n    double d1 = abs(cross(base, s1.p1 - s2.p1));\n    double d2 = abs(cross(base, s1.p2 - s2.p1));\n    double t = d1 / (d1 + d2);\n    return s1.p1 + (s1.p2 - s1.p1) * t;\n}\n\n\nPolygon andrewScan(Polygon g) {\n    Polygon u, l;\n    if (g.size() < 3) return g;\n    sort(g.begin(), g.end());\n    u.push_back(g[0]);\n    u.push_back(g[1]);\n    l.push_back(g[g.size() - 1]);\n    l.push_back(g[g.size() - 2]);\n\n    // upper\n    for (int i = 2; i < g.size(); i++) {\n        for (int n = u.size(); n >= 2 && ccw(u[n - 2], u[n - 1], g[i]) != CLOCKWISE; n--) {\n            u.pop_back();\n        }\n        u.push_back(g[i]);\n    }\n\n    // lower\n    for (int i = g.size() - 3; i >= 0; i--) {\n        for (int n = l.size(); n >= 2 && ccw(l[n - 2], l[n - 1], g[i]) != CLOCKWISE; n--) {\n            l.pop_back();\n        }\n        l.push_back(g[i]);\n    }\n\n    reverse(l.begin(), l.end());\n    for (int i = u.size() - 2; i >= 1; i--) l.push_back(u[i]);\n\n    return l;\n}\n\n\ndouble area(Polygon g) {\n    if (g.size() < 3) return 0;\n    int n = g.size();\n    Point o(0.0, 0.0);\n    double s = 0.0;\n    for (int i = 0; i < n; i++) s += cross(g[i] - o, g[(i + 1) % n] - o);\n    return abs(s) / 2.0;\n}\n\nconst double INF = 1e10;\n\ntypedef pair<double, double> p;\np v[100000];\n\nbool comp_y(p a, p b) {\n    return a.second < b.second;\n}\n\ndouble closest_pair(p *a, int n) {\n    if (n <= 1) return INF;\n\n    int m = n / 2;\n    double x = a[m].first;\n    double d = min(closest_pair(a, m), closest_pair(a + m, n - m)); // x軸で区切られた範囲内での頂点対のみ考慮\n    inplace_merge(a, a + m, a + n, comp_y); // ソート済みの[a, a+m)と[a+m, a+n)をy座標基準でマージ\n\n    vector<p> b; // 直線 x = a[m].firstから距離d未満の点を入れる\n    for (int i = 0; i < n; i++) {\n        if (fabs(a[i].first - x) >= d) continue; // そもそもx座標の差がd以上の点は論外\n\n        // bに入っている頂点を末尾から、y座標の差がd以上になるまで見ていく\n        // y座標降順で見ていき、d以上離れた時点で打ち切り\n        for (int j = 0; j < b.size(); j++) {\n            double dx = a[i].first - b[b.size() - 1 - j].first;\n            double dy = a[i].second - b[b.size() - 1 - j].second;\n            if (dy >= d) break;\n            d = min(d, sqrt(dx * dx + dy * dy));\n        }\n\n        b.push_back(a[i]);\n    }\n    return d;\n}\n\n\nstruct STsum{\nprivate:\n    int n;\n    vector<int> dat;\npublic:\n    STsum(int siz){\n        n = 1;\n        while(n < siz)   n *= 2;\n        dat.resize(2*n-1, 0);\n    }\n\n    void update(int x, int val){\n        x += (n-1);\n        dat[x] += val;\n        while(x > 0){\n            x = (x-1)/2;\n            dat[x] = dat[2*x+1]+dat[2*x+2];\n        }\n    }\n\n    // focus on k-th node, who controls [l, r)\n    int query(int a, int b, int k = 0, int l = 0, int r = -1){\n        if(r < 0)   r = n;\n        if(r <= a || b <= l)    return 0;\n        if(a <= l && r <= b)    return dat[k];\n\n        int lx = query(a, b, 2*k+1, l, (l+r)/2);\n        int rx = query(a, b, 2*k+2, (l+r)/2, r);\n        return lx+rx;\n    }\n};\n\nstruct Circle{\n    Point c;\n    double r;\n    Circle(Point c = Point(), double r = 0.0) : c(c), r(r) {}\n};\n\n\nint main(){\n    double a[6];\n    for(int i = 0; i < 6; i++)  cin >> a[i];\n    Circle b(Point(a[0],a[1]),a[2]), c(Point(a[3],a[4]),a[5]);\n    double d = getDistance(b.c, c.c);\n    if(d < fabs(b.r-c.r))       cout << 0 << endl;\n    else if(d == fabs(b.r-c.r)) cout << 1 << endl;\n    else if(d < b.r+c.r)        cout << 2 << endl;\n    else if(d == b.r+c.r)       cout << 3 << endl;\n    else                        cout << 4 << endl;\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define inf 1<<29\n#define linf (1e16)\n#define eps (1e-8)\n#define Eps (1e-12)\n#define mod 1000000007\n#define pi acos(-1.0)\n#define phi (1.0+sqrt(5.0))/2.0\n#define f first\n#define s second\n#define mp make_pair\n#define pb push_back\n#define all(a) (a).begin(),(a).end()\n#define pd(a) printf(\"%.10f\\n\",(double)(a))\n#define pld(a) printf(\"%.10Lf\\n\",(ld)(a))\n#define FOR(i,a,b) for(int i=(a);i<(b);i++)\n#define RFOR(i,a,b) for(int i=(a)-1;(b)<=i;i--)\n#define Unique(v) v.erase(unique(all(v)),v.end())\n#define equals(a,b) (fabs((a)-(b))<eps)\nusing namespace std;\ntypedef long double ld;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int,int> pii;\ntypedef pair<int,double> pid;\ntypedef pair<double,int> pdi;\ntypedef pair<double,double> pdd;\ntypedef vector<int> vi;\ntypedef vector<pii> vpi;\n\nclass Point{\npublic:\n  double x,y;\n  Point(double x=0,double y=0):x(x),y(y){}\n\n  Point operator+(Point p){ return Point(x+p.x,y+p.y);}\n  Point operator-(Point p){ return Point(x-p.x,y-p.y);}\n  Point operator*(double k){ return Point(x*k,y*k);}\n  Point operator/(double k){ return Point(x/k,y/k);}\n  bool operator<(Point p)const{ \n    return equals(x,p.x) ? y-p.y<-eps : x-p.x<-eps; }\n  bool operator==(Point p)const{ \n    return fabs(x-p.x)<eps && fabs(y-p.y)<eps;}\n\n  double abs(){ return sqrt(norm());}\n  double norm(){ return (x*x+y*y);}\n};\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\ndouble norm(Vector a){ return (a.x*a.x+a.y*a.y);}\ndouble abs(Vector a){ return sqrt(norm(a));}\ndouble dot(Vector a,Vector b){ return (a.x*b.x+a.y*b.y);}\ndouble cross(Vector a,Vector b){ return (a.x*b.y-a.y*b.x);}\n\nclass Circle{\npublic:\n  Point c;\n  double r;\n  Circle(Point c=Point(),double r=0.0):c(c),r(r){}\n};\n\nint intersect(Circle a,Circle b){\n  double d=abs(a.c-b.c);\n  if(a.r<b.r)swap(a,b);\n  if(a.r+b.r+eps<=d)return 4;\n  if(a.r+b.r-eps<=d)return 3;\n  if(a.r-b.r+eps<=d)return 2;\n  if(a.r-b.r-eps<=d)return 1;\n  return 0;\n}\n\nint main()\n{\n  Circle a,b;\n  cin>>a.c.x>>a.c.y>>a.r;\n  cin>>b.c.x>>b.c.y>>b.r;\n  cout<<intersect(a,b)<<endl;\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#define __USE_MINGW_ANSI_STDIO 0\n#include <bits/stdc++.h>\n\nusing namespace std;\nusing ll = long long;\n#define int ll\nusing VI = vector<int>;\nusing VVI = vector<VI>;\nusing PII = pair<int, int>;\n\n#define FOR(i, a, n) for (ll i = (ll)a; i < (ll)n; ++i)\n#define REP(i, n) FOR(i, 0, n)\n#define ALL(x) x.begin(), x.end()\n#define PB push_back\n\nconst ll LLINF = (1LL<<60);\nconst int INF = (1LL<<30);\nconst int MOD = 1000000007;\n\ntemplate <typename T> T &chmin(T &a, const T &b) { return a = min(a, b); }\ntemplate <typename T> T &chmax(T &a, const T &b) { return a = max(a, b); }\ntemplate <typename T> bool IN(T a, T b, T x) { return a<=x&&x<b; }\ntemplate<typename T> T ceil(T a, T b) { return a/b + !!(a%b); }\ntemplate<class S,class T>\nostream &operator <<(ostream& out,const pair<S,T>& a){\n  out<<'('<<a.first<<','<<a.second<<')';\n  return out;\n}\ntemplate<class T>\nostream &operator <<(ostream& out,const vector<T>& a){\n  out<<'[';\n  REP(i, a.size()) {out<<a[i];if(i!=a.size()-1)out<<',';}\n  out<<']';\n  return out;\n}\n\nint dx[] = {0, 1, 0, -1}, dy[] = {1, 0, -1, 0};\n\nconst double EPS = 1e-8;\n\nusing R = long double;\nusing P = complex<R>;\nusing L = pair<P,P>;\nusing G = vector<P>;\nstruct C {\n  P c; R r;\n  C() {}\n  C(const P &a, const R &b) : c(a), r(b) {}\n};\nstruct S : public L {\n  S() {}\n  S(const P &a, const P &b) : L(a,b) {}\n};\n\ninline int sgn(const R& r) { return (r>EPS) - (r<-EPS); }\ninline R dot(const P& a, const P& b) {\n  return real(a)*real(b) + imag(a)*imag(b);\n}\ninline R det(const P& a, const P& b) {\n  return real(a)*imag(b) - imag(a)*real(b);\n}\ninline P vec(const L& l) {return l.second - l.first;}\nnamespace std {\n\tbool operator < (const P& a, const P& b) {\n\t\treturn sgn(real(a-b)) ? real(a-b) < 0 : sgn(imag(a-b)) < 0;\n\t}\n\tbool operator == (const P& a, const P& b) {\n\t\treturn sgn(real(a-b)) == 0 && sgn(imag(a-b)) == 0;\n\t}\n  bool cmp_y (const P& a, const P& b) {\n    return sgn(imag(a-b)) ? imag(a-b) < 0 : sgn(real(a-b)) < 0;\n  }\n}\n\n// P,L,Sについて入力\ninline istream& operator>>(istream& is, P& p) {\n  R x, y;\n  is >> x >> y;\n  p = P(x, y);\n  return is;\n}\ninline istream& operator>>(istream& is, L& l) {\n  P a, b;\n  is >> a >> b;\n  l = L(a, b);\n  return is;\n}\ninline istream& operator>>(istream& is, S& s) {\n  P a, b;\n  is >> a >> b;\n  s = S(a, b);\n  return is;\n}\n\n// 射影\nP projection(const L &l, const P &p) {\n  R t = dot(p-l.first, l.first-l.second) / norm(l.first-l.second);\n  return l.first + t*(l.first-l.second);\n}\n// 反射\nP reflection(const L &l, const P &p) {\n  return p + (R)2 * (projection(l, p) - p);\n}\n\n// 線分abから見たcの位置\nenum CCW{LEFT=1, RIGHT=2, BACK=4, FRONT=8, ON_SEG=16};\nint ccw(P a, P b, P c) {\n\tP p = (c-a)/(b-a);\n\tif(sgn(imag(p)) > 0) return LEFT;\n\tif(sgn(imag(p)) < 0) return RIGHT;\n\tif(sgn(real(p)) < 0) return BACK;\n\tif(sgn(real(p)-1) > 0) return FRONT;\n\treturn ON_SEG;\n}\n\n// 垂直,平行\ninline bool vertical(L a, L b) {return sgn(dot(vec(a), vec(b))) == 0;}\ninline bool parallel(L a, L b) {return sgn(det(vec(a), vec(b))) == 0;}\ninline bool eal(L a, L b) {return vertical(a,b) && parallel(a,b);}\n\n// 交差判定\ntemplate<bool strict=false> inline bool intersect(const L&l1, const L&l2) {\n  if(strict) return sgn(det(vec(l1),vec(l2))) != 0;\n  return sgn(det(vec(l1),vec(l2))) != 0 || l1 == l2;\n}\ntemplate<bool strict=false> inline bool intersect(const L&l, const S&s) {\n  if(strict) det(s.first, vec(l)) * det(s.second, vec(l)) < 0;\n  return det(s.first, vec(l)) * det(s.second, vec(l)) <= 0;\n}\ntemplate<bool strict=false> inline bool intersect(const S&s1, const S&s2) {\n  int ccw1 = ccw(s1.first, s1.second, s2.first) | ccw(s1.first, s1.second, s2.second);\n  int ccw2 = ccw(s2.first, s2.second, s1.first) | ccw(s2.first, s2.second, s1.second);\n  if(strict) return (ccw1 & ccw2) == (LEFT | RIGHT);\n  return (ccw1 & ccw2) == (LEFT | RIGHT) || ((ccw1 | ccw2) & ON_SEG);\n}\ntemplate<bool strict=false> inline bool intersect(const S&s, const P&p) {\n  return ccw(s.first, s.second, p) == ON_SEG;\n}\ntemplate<bool strict=false> inline bool intersect(const L&l, const P&p) {\n  return ccw(l.first, l.second, p) == ON_SEG ||\n          ccw(l.first, l.second, p) == FRONT ||\n          ccw(l.first, l.second, p) == BACK;\n}\nint intersect(const C& a, const C& b) {\n\tR dist = sqrt(norm(a.c-b.c)), r1 = a.r + b.r, r2 = abs(a.r - b.r);\n\tif(sgn(r1-dist) < 0)  return 4;\t// 円が離れている\n\tif(sgn(r1-dist) == 0) return 3;\t// 外接\n\tif(sgn(r2-dist) < 0 && sgn(dist-r1) < 0) return 2; // 交差\n\tif(sgn(dist-r2) == 0) return 1; // 内接\n\treturn 0;\t// 内部に含む\n}\n\n// 交点 交差判定を先にすること!!!\ninline P crosspoint(const L& l1, const L& l2) {\n  R ratio = det(vec(l2), l2.first-l1.first)/det(vec(l2),vec(l1));\n  return l1.first + vec(l1)*ratio;\n}\n\n// 距離\nR dist(const S& s, const P& p) {\n  P q = projection(s, p);\n  if(sgn(dot(s.second-s.first, p-s.first)) <= 0) q = s.first;\n  if(sgn(dot(s.first-s.second, p-s.second)) <= 0) q = s.second;\n  return abs(p-q);\n}\nR dist(const S& a, const S& b) {\n  if(intersect(a, b)) return 0;\n  return min({dist(a, b.first), dist(a, b.second), dist(b, a.first), dist(b, a.second)});\n}\n\n// 面積 頂点が反時計回りに並んでいること\nR area(const G& pol) {\n  R ret = 0.0;\n  REP(i, pol.size()) ret += det(pol[i], pol[(i+1)%pol.size()]);\n  return (ret/2.0);\n}\n\n// 凸性の判定\nbool isConvex(const G& pol) {\n  REP(i, pol.size()) {\n    if(sgn(det(pol[(i+1)%pol.size()]-pol[i], pol[(i+2)%pol.size()]-pol[i])) < 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// 多角形と点の内包\n// 2→in 1→on 0→out\nint inPolygon(const G& pol, const P& p) {\n  bool in = false;\n  for (int i = 0; i < pol.size(); ++i) {\n  \tP a = pol[i] - p, b = pol[(i+1)%pol.size()] - p;\n    if (imag(a) > imag(b)) swap(a, b);\n    cout << i << \" \" << det(a, b) << endl;\n    if (imag(a) <= 0 && 0 < imag(b) && sgn(det(a, b)) < 0) {\n      cout << \"rev\" << endl;\n      in = !in;\n    }\n    if (sgn(det(a, b)) == 0 && sgn(dot(a, b)) <= 0) return 1;\n  }\n  return in ? 2 : 0;\n}\n\n// 凸包 3点が一直線上に並ぶときに注意\n// 凸包のうち一番左にある頂点の中で一番下の頂点から時計回り\nG convex_hull(G ps) {\n  int n = ps.size(), k = 0;\n  sort(ps.begin(), ps.end());\n  G r(2*n);\n  for(int i=0; i<n; i++){\n    while(k>1 && sgn(det(r[k-1]-r[k-2], ps[i]-r[k-2])) < 0) k--;\n    r[k++] = ps[i];\n  }\n  for(int i=n-2,t=k; i>=0; i--){\n    while(k>t && sgn(det(r[k-1]-r[k-2], ps[i]-r[k-2])) < 0) k--;\n    r[k++] = ps[i];\n  }\n  r.resize(k-1);\n  return r;\n}\n\nsigned main(void)\n{\n  cin.tie(0);\n  ios::sync_with_stdio(false);\n\n  vector<C> c(2);\n  REP(i, 2) {\n    P p; R r;\n    cin >> p >> r;\n    c[i] = {p, r};\n  }\n\n  cout << intersect(c[0], c[1]) << endl;\n\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<sstream>\n#include<algorithm>\n#include<climits>\n#include<cmath>\n#include<cstdio>\n#include<cstdlib>\n#include<ctime>\n#include<cfloat>\n#include<functional>\n#include<map>\n#include<string>\n#include<cstring>\n#include<vector>\n#include<queue>\n#include<stack>\n#include<deque>\n#include<set>\n#include<bitset>\n#include<list>\n#include<numeric>\n#include<complex>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int, int> i_i;\ntypedef pair<long long, int> ll_i;\ntypedef pair<double, int> d_i;\ntypedef pair<long long, long long> ll_ll;\ntypedef pair<double, double> d_d;\n\n#define PI 3.141592653589793238462643383279\n#define mod 1000000007LL\n#define rep(i, n) for(i = 0;i < n;++i)\n#define rep1(i, n) for(i = 1;i < n;++i)\n#define rep2d(i, j, n) for(i = 0;i < n;++i)for(j = i + 1;j < n;++j)\n#define per(i, n) for(i = n - 1;i > -1;--i)\n#define int(x) int x; scanf(\"%d\",&x)\n#define int2(x, y) int x, y; scanf(\"%d%d\",&x, &y)\n#define int3(x, y, z) int x, y, z; scanf(\"%d%d%d\",&x, &y, &z)\n#define scn(n, a) rep(i, n)cin >> a[i]\n#define sc2n(n, a, b) rep(i, n)cin >> a[i] >> b[i]\n#define pri(x) cout << x << \"\\n\"\n#define pri2(x, y) cout << x << \" \" << y << \"\\n\"\n#define pri3(x, y, z) cout << x << \" \" << y << \" \" << z << \"\\n\"\n#define pb push_back\n#define mp make_pair\n#define all(a) (a).begin(),(a).end()\n#define endl \"\\n\"\n#define kabe puts(\"---------------------------\")\n#define kara puts(\"\")\n#define debug(x) cout << \" --- \" << x << \"\\n\"\n#define debug2(x, y) cout << \" --- \" << x << \" \" << y << \"\\n\"\n#define debug3(x, y, z) cout << \" --- \" << x << \" \" << y << \" \" << z << \"\\n\"\n#define X first\n#define Y second\n#define eps 0.00000000001\n#define prid(x) printf(\"%.15lf\\n\", x)\n\ndouble xmax, xmin, ymax, ymin;\nstruct vec{\n  double x, y;\n  vec operator+(const vec& a) const { return (vec){x + a.x, y + a.y}; }\n  vec operator-(const vec& a) const { return (vec){x - a.x, y - a.y}; }\n  vec sca(double t){ return (vec){t * x, t * y}; }\n  double dot(vec a){ return x * a.x + y * a.y; }\n  double cross(vec a){ return x * a.y - y * a.x; }\n  double norm(){ return sqrt(x * x + y * y); }\n  double norm2(){ return x * x + y * y; }\n  //double ppdist(vec p){ return sqrt( (p.x - x) * (p.x - x) + (p.y - y) * (p.y - y) ); }\n  //double ppdist2(vec p){ return (p.x - x) * (p.x - x) + (p.y - y) * (p.y - y); }\n};\nstruct line{\n  vec a, b;\n  vec getvec(){ return b - a; }\n  vec proj(vec p){ return a + (b - a).sca((p - a).dot(b - a) / (b - a).dot(b - a)); }\n  vec vref(vec p){ return proj(p).sca(2.0) - p; }\n  int ccw(vec p){\n    vec q = p - a, ba = b - a;\n    if(ba.cross(q) > 0)return 1; //ccw\n    if(ba.cross(q) < 0)return -1; //cw\n    if(ba.dot(q) < 0)return -2; //back\n    if(ba.dot(ba) < q.dot(q))return 2; //front\n    return 0; //on\n  }\n  bool paral(line l){ return abs(l.getvec().cross(getvec())) < eps; }\n  bool orth(line l){ return abs(l.getvec().dot(getvec())) < eps; }\n  bool intersec(line l){\n    bool res0 = (ccw(l.a) * ccw(l.b) == 4); //syukutai\n    bool res1 = (getvec().cross(l.a - a) * getvec().cross(l.b - a)) <= eps;\n    bool res2 = (l.getvec().cross(a - l.a) * l.getvec().cross(b - l.a)) <= eps;\n    return !res0 && res1 && res2;\n  }\n  vec crosspoint(line l){\n    return a + getvec().sca((l.a - a).cross(l.getvec()) / getvec().cross(l.getvec()));\n  }\n  double pldist(vec p){\n    double res = min((a - p).norm2(), (b - p).norm2());\n    vec h = proj(p);\n    if((a - h).dot(b - h) < 0)res = min(res, (h - p).norm2());\n    return sqrt(res);\n  }\n  double lldist(line l){\n    if(intersec(l))return 0.0;\n    return min(min(pldist(l.a), pldist(l.b)), min(l.pldist(a), l.pldist(b)));\n  }\n};\nstruct polygon{\n  vector<vec> p;  //ccw\n  double area(){\n    double res = 0.0;\n    for(int i = 0;i < p.size();++i)res += p[i].cross(p[(i + 1) % p.size()]);\n    return res / 2.0;\n  }\n  bool isconv(){\n    for(int i = 0;i < p.size();++i)\n    if((p[(i + 1) % p.size()] - p[i]).cross(p[(i + 2) % p.size()] - p[i]) < -eps)return false;\n    return true;\n  }\n  int isin(vec a){\n    line l = (line){a, a + (vec){xmax - xmin, 0.0}};\n    int cnt = 0, n = p.size();\n    for(int i = 0;i < n;++i){\n      line tmp = (line){p[i], p[(i + 1) % n]};\n      if(tmp.ccw(a) == 0)return 1; //on line\n      if(l.intersec(tmp)){\n        ++cnt;\n        if(l.ccw(p[i]) == 0 && l.ccw(p[(i + 1) % n]) * l.ccw(p[(i + n - 1) % n]) == -1)++cnt;\n        if(l.paral(tmp)){\n          ++cnt;\n          if(l.ccw(p[(i + 2) % n]) * l.ccw(p[(i + n - 1) % n]) == -1)++cnt;\n        }\n      }\n    }\n    return (cnt & 1) * 2;  //2:in 0:out\n  }\n};\nstruct circle{\n  vec o;\n  double r;\n  int intersec(circle c){\n    double d = (o - c.o).norm(), rp = r + c.r, rm = abs(r - c.r);\n    if(abs(rp - d) < eps)return 3;\n    if(rp < d + eps)return 4;\n    if(abs(rm - d) < eps)return 1;\n    if(rm < d + eps)return 2;\n    return 0;\n  }\n};\n\nsigned main(void){\n  int i, j, k;\n  circle c, d;\n  cin >> c.o.x >> c.o.y >> c.r >> d.o.x >> d.o.y >> d.r;\n  pri(c.intersec(d));\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#include<iostream>\n#include<stdlib.h>\n#include<math.h> \nusing namespace std;\n\n\nint main(){\n\tint x1=0,y1=0,c1=0,x2=0,y2=0,c2=0;\n\tscanf(\"%d%d%d\",&x1,&y1,&c1);\n\tscanf(\"%d%d%d\",&x2,&y2,&c2);\n\tint dist=0;\n\tdist=sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));\nif(c1<c2){\n\tint temp=c1;\n\tc1=c2;\n\tc2=temp;\n}\n\tif(dist<c1-c2){\n\t\tprintf(\"0\\n\");\n\t}\n\telse if(dist>(c1-c2)&&dist<(c1+c2)){\n\t\tprintf(\"2\\n\");\n\t}\n\telse if(dist>(c1+c2)){\n\t\tprintf(\"4\\n\");\n\t}\n\telse if(dist==c1+c2){\n\t\tprintf(\"3\\n\");\n\t}\n\telse if(dist==(c1-c2)){\n\t\tprintf(\"1\\n\");\n\t}\n}\n\n"
  },
  {
    "language": "C++",
    "code": "/*\n　　　  ∧＿∧　やあ\n　　 （´・ω・｀)　　　　　/　　　　　ようこそ、バーボンハウスへ。\n　　 ／∇y:::::＼　　　 [￣]　　　　　このテキーラはサービスだから、まず飲んで落ち着いて欲しい。\n　　 |:⊃:|:::::|　　　|──|\n￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣|　うん、「また」なんだ。済まない。\n￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣|￣　  仏の顔もって言うしね、謝って許してもらおうとも思っていない。\n￣￣￣￣￣￣￣￣￣￣￣￣￣￣／|\n　　　　∇　∇　∇　∇　　　／.／|　　　でも、この提出を見たとき、君は、きっと言葉では言い表せない\n　　　　┴　┴　┴　┴　／ ／　  |　　　「ときめき」みたいなものを感じてくれたと思う。\n￣￣￣￣￣￣￣￣￣￣|／　　  |　　　殺伐としたコンテストの中で、そういう気持ちを忘れないで欲しい\n￣￣￣￣￣￣￣￣￣￣　　　　 |　　　そう思って、この提出を投げたんだ。\n　　　(⊆⊇)　(⊆⊇)　(⊆⊇)　　|\n　    ||　　 ||　　||　　|　　　 じゃあ、判定を聞こうか。\n　　.／|＼　／|＼ ／|＼\n*/\n\n#include <iostream>\n#include <cstdlib>\n#include <algorithm>\n#include <array>\n#include <bitset>\n#include <climits>\n#include <cmath>\n#include <cstdio>\n#include <list>\n#include <map>\n#include <numeric>\n#include <queue>\n#include <set>\n#include <string>\n#include <vector>\nusing namespace std;\n#define fst first\n#define snd second\n#define mp make_pair\n#define ALL(obj) (obj).begin(),(obj).end()\n#define FOR(i,a,b) for(int i=(a);i<(b);i++)\n#define RFOR(i,a,b) for(int i = (b-1);i>=a;i--)\n#define REP(i,n)  FOR(i,0,n)\n#define RREP(i,n) RFOR(i,0,n) \n#define SIZE(x) ((int)(x).size())\n#define debug(x) cerr << #x << \" -> \" << x << \" (line:\" << __LINE__ << \")\" << '\\n';\n#define debugpair(x, y) cerr << \"(\" << #x << \", \" << #y << \") -> (\" << x << \", \" << y << \") (line:\" << __LINE__ << \")\" << '\\n';\ntypedef long long lint;\ntypedef pair<int, int> pint;\ntypedef pair<lint, lint> plint;\ntypedef vector<lint> vec;\ntypedef vector<vector<lint>> matrix;\ntypedef priority_queue<lint> p_que;\ntypedef priority_queue<lint, vector<lint>, greater<lint>> p_que_rev;\nconst lint INF = INT_MAX;\nconst lint LINF = LLONG_MAX;\nconst lint MOD = 1000000000 + 7;\nconst double EPS = 1e-6;\nconst double PI = acos(-1);\nconst int di[]{0, -1, 0, 1, -1, -1, 1, 1};\nconst int dj[]{1, 0, -1, 0, 1, -1, -1, 1};\n\nlint gcd(lint a, lint b) {\n    lint r;\n    while (b != 0) {\n        r = a % b;\n        a = b; \n        b = r;\n    }\n    return a;\n}\n\nlint lcm(lint a, lint b) {\n    return (a / gcd(a, b)) * b;\n}\n\nlint power(lint x, lint n, lint mod = MOD) {\n    lint ret = 1;\n    while(n > 0) {\n        if(n & 1){\n            (ret *= x) %= mod;\n        }\n        (x *= x) %= mod;\n        n >>= 1;\n    }\n    return ret;\n}\n\nvector<lint> make_power(int n, lint base){\n    lint num = 1;\n    vector<lint> ret;\n    for (int i=0; i<=n; ++i){\n        ret.push_back(num);\n        num *= base;\n    }\n    return ret;\n}\n\nint main()\n{\n    cin.tie(0);\n    ios_base::sync_with_stdio(false);\n    int c1x, c1y, c1r, c2x, c2y, c2r;\n    cin >> c1x >> c1y >> c1r >> c2x >> c2y >> c2r;\n    double dist = sqrt((c1x - c2x) * (c1x - c2x) + (c1y - c2y) * (c1y - c2y));\n    if(dist > c1r + c2r){\n        cout << 4 << endl;\n    }\n    else if(abs(dist - c1r - c2r) < EPS){\n        cout << 3 << endl;\n    }\n    else if(abs(dist + c1r - c2r) < EPS || (abs(dist + c2r - c1r) < EPS)){\n        cout << 1 << endl;\n    }\n    else if(c1r > dist + c2r || c2r > dist + c1r){\n        cout << 0 << endl;\n    }\n    else {\n        cout << 2 << endl;\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <iomanip>\n#include <map>\n#include <set>\n#include <queue>\n#include <stack>\n#include <numeric>\n#include <bitset>\n#include <cmath>\n\nstatic const int MOD = 1000000007;\nusing ll = long long;\nusing u32 = uint32_t;\nusing namespace std;\n\ntemplate<class T> constexpr T INF = ::numeric_limits<T>::max() / 32 * 15 + 208;\n\nusing real = double;\nreal EPS = 1e-10;\nstruct Point {\n    real x, y;\n    Point& operator+=(const Point a) { x += a.x; y += a.y;  return *this; }\n    Point& operator-=(const Point a) { x -= a.x; y -= a.y;  return *this; }\n    Point& operator*=(const real k) { x *= k; y *= k;  return *this; }\n    Point& operator/=(const real k) { x /= k; y /= k;  return *this; }\n    Point operator+(const Point a) const {return Point(*this) += a; }\n    Point operator-(const Point a) const {return Point(*this) -= a; }\n    Point operator*(const real k) const {return Point(*this) *= k; }\n    Point operator/(const real k) const {return Point(*this) /= k; }\n    bool operator<(const Point &a) const { return (x != a.x ? x < a.x : y < a.y); }\n    explicit Point(real a = 0, real b = 0) : x(a), y(b) {};\n};\n\nbool sorty(Point a, Point b){\n    return (a.y != b.y ? a.y < b.y : a.x < b.x);\n}\n\nistream& operator>> (istream& s, Point& P){\n    s >> P.x >> P.y;\n    return s;\n}\n\ninline real dot(Point a, Point b){ return a.x*b.x + a.y*b.y; }\ninline real cross(Point a, Point b){ return a.x*b.y - a.y*b.x; }\ninline real abs(Point a){ return sqrt(dot(a, a)); }\n\nstatic constexpr int COUNTER_CLOCKWISE = 1;\nstatic constexpr int CLOCKWISE = -1;\nstatic constexpr int ONLINE_BACK = 2;\nstatic constexpr int ONLINE_FRONT = -2;\nstatic constexpr int ON_SEGMENT = 0;\n\nint ccw(Point a, Point b, Point c){\n    b -= a; c -= a;\n    if(cross(b, c) > EPS) return COUNTER_CLOCKWISE;\n    if(cross(b, c) < -EPS) return CLOCKWISE;\n    if(dot(b, c) < 0) return ONLINE_BACK;\n    if(abs(b) < abs(c)) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\nstruct Segment {\n    Point a, b;\n    Segment(Point x, Point y) : a(x), b(y) {};\n};\n\nstruct Line {\n    Point a, b;\n    Line(Point x, Point y) : a(x), b(y) {};\n};\n\nstruct Circle{\n    Point c; real r;\n    Circle(Point c, real r): c(c), r(r) {};\n};\n\nbool intersect(Segment s, Segment t){\n    return (ccw(s.a, s.b, t.a)*ccw(s.a, s.b, t.b) <= 0 &&\n            ccw(t.a, t.b, s.a)*ccw(t.a, t.b, s.b) <= 0);\n}\n\nstatic constexpr int CONTAIN = 0;\nstatic constexpr int INSCRIBE = 1;\nstatic constexpr int INTERSECT = 2;\nstatic constexpr int CIRCUMSCRIBED = 3;\nstatic constexpr int SEPARATE = 4;\n\nint intersect(Circle c1, Circle c2){\n    if(c1.r < c2.r) swap(c1, c2);\n    real d = abs(c1.c-c2.c);\n    real r = c1.r + c2.r;\n    if(fabs(d-r) < EPS) return CIRCUMSCRIBED;\n    if(d > r) return SEPARATE;\n    if(fabs(d+c2.r-c1.r) < EPS) return INSCRIBE;\n    if(d+c2.r < c1.r) return CONTAIN;\n    return INTERSECT;\n}\n\nreal distance(Segment s, Point c){\n    if(dot(s.b-s.a, c-s.a) < EPS) return abs(c-s.a);\n    if(dot(s.a-s.b, c-s.b) < EPS) return abs(c-s.b);\n    return abs(cross(s.b-s.a, c-s.a)) / abs(s.a-s.b);\n}\n\nreal distance(Segment s, Segment t){\n    if(intersect(s, t)) return 0.0;\n    return min({distance(s, t.a), distance(s, t.b),\n                distance(t, s.a), distance(t, s.b)});\n}\n\n\n\nPoint crossPoint(Segment s, Segment t){\n    real d1 = cross(s.b-s.a, t.b-t.a);\n    real d2 = cross(s.b-s.a, s.b-t.a);\n    if(fabs(d1) < EPS && fabs(d2) < EPS) return t.a;\n    return t.a+(t.b-t.a)*d2/d1;\n}\n\nPoint crossPoint(Line s, Line t){\n    real d1 = cross(s.b-s.a, t.b-t.a);\n    real d2 = cross(s.b-s.a, s.b-t.a);\n    if(fabs(d1) < EPS && fabs(d2) < EPS) return t.a;\n    return t.a+(t.b-t.a)*d2/d1;\n}\n\n\nPoint project(Segment s, Point p){\n    Point Q = s.b-s.a;\n    return s.a + Q*(dot(p-s.a, Q) / dot(Q, Q));\n}\n\nPoint refrect(Segment s, Point p){\n    Point Q = project(s, p);\n    return Q*2-p;\n}\n\nbool isOrthogonal(Segment s, Segment t){\n    return fabs(dot(s.b-s.a, t.b-t.a)) < EPS;\n}\n\nbool isparallel(Segment s, Segment t){\n    return fabs(cross(s.b-s.a, t.b-t.a)) < EPS;\n}\n\nusing Polygon = vector<Point>;\n\nreal area(Polygon v){\n    if(v.size() < 3) return 0.0;\n    real ans = 0.0;\n    for (int i = 0; i < v.size(); ++i) {\n        ans += cross(v[i], v[(i+1)%v.size()]);\n    }\n    return ans/2;\n}\n\nPolygon convex_hull(Polygon v){\n    int n = v.size();\n    sort(v.begin(),v.end(), sorty);\n    int k = 0;\n    Polygon ret(n*2);\n    for (int i = 0; i < n; ++i) {\n        while(k > 1 && cross(ret[k-1]-ret[k-2], v[i]-ret[k-1]) < 0) k--;\n        ret[k++] = v[i];\n    }\n    for(int i = n-2, t=k; i >= 0; i--){\n        while(k > t && cross(ret[k-1]-ret[k-2], v[i]-ret[k-1]) < 0) k--;\n        ret[k++] = v[i];\n    }\n    ret.resize(k-1);\n    return ret;\n}\n\nbool isconvex(Polygon v){\n    int n = v.size();\n    for (int i = 0; i < n; ++i) {\n        if(ccw(v[(i+n-1)%n], v[i], v[(i+1)%n]) == CLOCKWISE) return false;\n    }\n    return true;\n}\n\nint contains(Polygon v, Point p){\n    int n = v.size();\n    bool x = false;\n    static constexpr int IN = 2;\n    static constexpr int ON = 1;\n    static constexpr int OUT = 0;\n    for (int i = 0; i < n; ++i) {\n        Point a = v[i]-p, b = v[(i+1)%n]-p;\n        if(fabs(cross(a, b)) < EPS && dot(a, b) < EPS) return ON;\n        if(a.y > b.y) swap(a, b);\n        if(a.y < EPS && EPS < b.y && cross(a, b) > EPS) x = !x;\n    }\n    return (x?IN:OUT);\n}\n\nreal diameter(Polygon v){\n    int n = v.size();\n    if(n == 2) return abs(v[0]-v[1]);\n    int i = 0, j = 0;\n    for (int k = 0; k < n; ++k) {\n        if(v[i] < v[k]) i = k;\n        if(!(v[j] < v[k])) j = k;\n    }\n    real ret = 0;\n    int si = i, sj = j;\n    while(i != sj || j != si){\n        ret = max(ret, abs(v[i]-v[j]));\n        if(cross(v[(i+1)%n]-v[i], v[(j+1)%n]-v[j]) < 0.0) i = (i+1)%n;\n        else j = (j+1)%n;\n    }\n    return ret;\n}\n\nPolygon convexCut(Polygon v, Line l){\n    Polygon q;\n    int n = v.size();\n    for (int i = 0; i < n; ++i) {\n        Point a = v[i], b = v[(i+1)%n];\n        if(ccw(l.a, l.b, a) != -1) q.push_back(a);\n        if(ccw(l.a, l.b, a)*ccw(l.a, l.b, b) < 0){\n            q.push_back(crossPoint(Line(a, b), l));\n        }\n    }\n    return q;\n}\n\nreal closest_pair(Polygon &v, int l = 0, int r = -1){\n    if(!(~r)){\n        r = v.size();\n        sort(v.begin(),v.end());\n    }\n    if(r - l < 2) {\n        return abs(v.front()-v.back());\n    }\n    int mid = (l+r)/2;\n    real p = v[mid].x;\n    real d = min(closest_pair(v, l, mid), closest_pair(v, mid, r));\n    inplace_merge(v.begin()+l, v.begin()+mid, v.begin()+r, sorty);\n    Polygon u;\n    for (int i = l; i < r; ++i) {\n        if(fabs(v[i].x-p) >= d) continue;\n        for (int j = 0; j < u.size(); ++j) {\n            real dy = v[i].y-next(u.rbegin(), j)->y;\n            if(dy >= d) break;\n            d = min(d, abs(v[i]-*next(u.rbegin(), j)));\n        }\n        u.emplace_back(v[i]);\n    }\n    return d;\n}\n\nint main() {\n    Point a, b;\n    real p, q;\n    cin >> a >> p >> b >> q;\n    Circle c1(a, p), c2(b, q);\n    cout << intersect(c1, c2) << \"\\n\";\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nconstexpr double EPS = 1e-10;\nbool equals(double a, double b) { return (abs(a - b) < EPS); }\n\nstruct V2 {\n\tdouble x, y;\n\tV2(double x = 0, double y = 0) : x(x), y(y) {}\n\t\n\tV2 operator + (V2 p) const { return (V2(x + p.x, y + p.y)); }\n\tV2 operator - (V2 p) const { return (V2(x - p.x, y - p.y)); }\n\tV2 operator * (double r) const { return (V2(x * r, y * r)); }\n\tV2 operator / (double r) const { return (V2(x / r, y / r)); }\n\t\n\tdouble norm() const { return (sqrt(sqrNorm())); }\n\tdouble sqrNorm() const { return (x*x + y*y); }\n\t\n\tbool operator < (const V2 &p) const { \n\t\treturn (x != p.x ? x < p.x : y < p.y); \n\t}\n\tbool operator == (const V2 &p) const {\n\t\treturn (equals(x, p.x) && equals(y, p.y));\n\t}\n\n\tV2 rotate90() const { return (V2(y, -x)); }\n\tV2 normalized() const { return (*this / norm()); }\n\n\tdouble dot(const V2 &p) const { return (x*p.x + y*p.y); }\n\tdouble cross(const V2 &p) const { return (x*p.y - y*p.x); }\n\tdouble arg() const { return (atan2(y, x)); }\n};\nV2 polar(double r, double a) { return (V2(cos(a) * r, sin(a) * r)); }\n\nusing Polygon = vector<V2>;\nstruct Segment {\n\tV2 p1, p2;\n\tSegment() {}\n\tSegment(V2 p1, V2 p2) : p1(p1), p2(p2) {}\n};\n\nusing Line = Segment;\nstruct Circle {\n\tV2 o;\n\tdouble r;\n\tCircle() {}\n\tCircle(V2 o, double r) : o(o), r(r) {}\n\n\tint intersects(const Circle &c) {\n\t\tdouble d = (o-c.o).norm();\n\t\tif (d + c.r < r) return (0);\n\t\tif (d + r < c.r) return (0);\n\t\tif (equals(d + c.r, r)) return (1);\n\t\tif (equals(d + r, c.r)) return (-1);\n\t\tif (r + c.r < d) return (4);\n\t\tif (equals(r + c.r, d)) return (3);\n\t\treturn (2);\n\t}\n\n\tvector<V2> crossPoints(const Circle &c) {\n\t\tint inter = intersects(c);\n\t\tif (inter != 2 && inter != 3) return (vector<V2>());\n\t\tdouble d = (c.o-o).norm();\n\t\tdouble t = (c.o-o).arg();\n\t\tif (inter == 3) return ((vector<V2>){o + (c.o-o).normalized() * r});\n\n\t\tdouble a = acos((r*r + d*d - c.r*c.r) / (2*r*d));\n\t\treturn ((vector<V2>){o + polar(r, t+a), o + polar(r, t-a)});\n\t}\n};\n\nint main() {\n\tCircle c1, c2;\n\tdouble x1, y1, r1;\n\tdouble x2, y2, r2;\n\tcin >> x1 >> y1 >> r1;\n\tcin >> x2 >> y2 >> r2;\n\tc1 = Circle(V2(x1, y1), r1);\n\tc2 = Circle(V2(x2, y2), r2);\n\t\n\tcout << abs(c1.intersects(c2)) << endl;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#include<math.h>\n\nint main(){\n\t\tdouble a,b,r1,d,e,r2;\n\t\tscanf(\"%lf%lf%lf%lf%lf%lf\",&a,&b,&r1,&d,&e,&r2);\n\n\t\tdouble di=sqrt((a-d)*(a-d)+(b-e)*(b-e));\n\n\t\tif(di+r1<r2)printf(\"0\\n\");\n\t\telse if(di+r2<r1)printf(\"0\\n\");\n\t\telse if(di==r2+r1)printf(\"3\\n\");\n\t\telse if(di>r2+r1)printf(\"4\\n\");\n    else if(di+r2==r1)printf(\"1\\n\");\n    else if(di+r1==r2)printf(\"1\\n\");\n    else printf(\"2\\n\");\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\n\nint main()\n{\n  int c1x, c1y, c1r;\n  int c2x, c2y, c2r;\n\n  std::cin >> c1x >> c1y >> c1r;\n  std::cin >> c2x >> c2y >> c2r;\n\n  double d;\n\n  d = sqrt( (c1x-c2x) * (c1x-c2x) + (c1y-c2y) * (c1y-c2y) );\n\n  if( d > (c1r+c2r) )\n    std::cout << \"4\";\n  \n  /*\n  if( fabs(c1r+c2r-d) <= 0.000000001 )\n    std::cout << \"3\";\n  */\n\n  if( d == (c1r+c2r) )\n    std::cout << \"3\";\n  \n  if( fabs(c1r-c2r) < d && d < (c1r+c2r) )\n    std::cout << \"2\";\n  \n  /*\n  if( fabs( d - fabs(c1r-c2r) ) <= 0.000000001 )\n  std::cout << \"1\";\n  */\n\n  if( d == fabs(c1r-c2r) )\n  std::cout << \"1\";\n  \n  if( d < fabs(c1r-c2r) )\n    std::cout << \"0\";\n\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef pair<ll, ll> pll;\n#define INF 1<<30\n#define LINF 1LL<<60\n\ntypedef long double ld;\ntypedef complex<ld> Point;\nconst ld eps = 1e-9, pi = acos(-1.0);\nnamespace std {\n\tbool operator<(const Point &lhs, const Point &rhs) {\n\t\tif (lhs.real() < rhs.real() - eps) return true;\n\t\tif (lhs.real() > rhs.real() + eps) return false;\n\t\treturn lhs.imag() < rhs.imag();\n\t}\n}\nPoint input_point() { ld x, y; cin >> x >> y; return Point(x, y); } // ????????\\???\nbool eq(ld a, ld b) { return (abs(a - b) < eps); } // ????????????????????????\nld dot(Point a, Point b) { return real(conj(a) * b); } // ??????\nld cross(Point a, Point b) { return imag(conj(a) * b); } // ??????\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t // ??´????????????\nclass Line {\npublic:\n\tPoint a, b;\n\tLine() : a(Point(0, 0)), b(Point(0, 0)) {}\n\tLine(Point a, Point b) : a(a), b(b) {}\n\tPoint operator[](const int _num) {\n\t\tif (_num == 0)return a;\n\t\telse if (_num == 1)return b;\n\t\telse assert(false);\n\t}\n};\n\n// ????????????\nclass Circle {\npublic:\n\tPoint p;\n\tld r;\n\tCircle() : p(Point(0, 0)), r(0) {}\n\tCircle(Point p, ld r) : p(p), r(r) {}\n};\n\n/* ??? */\n\n// ?????¨????????\\???\nvector<Line> tangent_cp(Circle c, Point p) {\n\tvector<Line> ret;\n\tPoint v = c.p - p;\n\tld d = abs(v);\n\tld l = sqrt(norm(v) - c.r * c.r);\n\tif (isnan(l)) { return ret; }\n\tPoint v1 = v * Point(l / d, c.r / d);\n\tPoint v2 = v * Point(l / d, -c.r / d);\n\tret.push_back(Line(p, p + v1));\n\tif (l < eps) return ret;\n\tret.push_back(Line(p, p + v2));\n\treturn ret;\n}\n\n// ?????¨????????\\???\nvector<Line> tangent_cc(Circle c1, Circle c2) {\n\tvector<Line> ret;\n\tif (abs(c1.p - c2.p) - (c1.r + c2.r) > -eps) {\n\t\tPoint center = (c1.p * c2.r + c2.p * c1.r) / (c1.r + c2.r);\n\t\tret = tangent_cp(c1, center);\n\t}\n\tif (abs(c1.r - c2.r) > eps) {\n\t\tPoint out = (-c1.p * c2.r + c2.p * c1.r) / (c1.r - c2.r);\n\t\tvector<Line> nret = tangent_cp(c1, out);\n\t\tret.insert(ret.end(), nret.begin(), nret.end());\n\t}\n\telse {\n\t\tPoint v = c2.p - c1.p;\n\t\tv /= abs(v);\n\t\tPoint q1 = c1.p + v * Point(0, 1) * c1.r;\n\t\tPoint q2 = c1.p + v * Point(0, -1) * c1.r;\n\t\tret.push_back(Line(q1, q1 + v));\n\t\tret.push_back(Line(q2, q2 + v));\n\t}\n\treturn ret;\n}\n\nint main(void) {\n\tcin.tie(0); ios::sync_with_stdio(false);\n\tPoint p = input_point(); ld r; cin >> r;\n\tCircle c1(p, r);\n\tp = input_point(); cin >> r;\n\tCircle c2(p, r);\n\tcout << tangent_cc(c1, c2).size() << endl;\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "# include \"bits/stdc++.h\"\nusing namespace std;\nusing LL = long long;\nusing ULL = unsigned long long;\nconst double PI = acos(-1);\ntemplate<class T>constexpr T INF() { return ::std::numeric_limits<T>::max(); }\ntemplate<class T>constexpr T HINF() { return INF<T>() / 2; }\ntemplate <typename T_char>T_char TL(T_char cX) { return tolower(cX); };\ntemplate <typename T_char>T_char TU(T_char cX) { return toupper(cX); };\ntypedef pair<LL, LL> pii;\nconst int vy[] = { -1, -1, -1, 0, 1, 1, 1, 0 }, vx[] = { -1, 0, 1, 1, 1, 0, -1, -1 };\nconst int dx[4] = { 0,1,0,-1 }, dy[4] = { 1,0,-1,0 };\nint popcnt(unsigned long long n) { int cnt = 0; for (int i = 0; i < 64; i++)if ((n >> i) & 1)cnt++; return cnt; }\nint d_sum(LL n) { int ret = 0; while (n > 0) { ret += n % 10; n /= 10; }return ret; }\nint d_cnt(LL n) { int ret = 0; while (n > 0) { ret++; n /= 10; }return ret; }\nLL gcd(LL a, LL b) { if (b == 0)return a; return gcd(b, a%b); };\nLL lcm(LL a, LL b) { LL g = gcd(a, b); return a / g*b; };\n# define ALL(qpqpq)           (qpqpq).begin(),(qpqpq).end()\n# define UNIQUE(wpwpw)        sort(ALL((wpwpw)));(wpwpw).erase(unique(ALL((wpwpw))),(wpwpw).end())\n# define LOWER(epepe)         transform(ALL((epepe)),(epepe).begin(),TL<char>)\n# define UPPER(rprpr)         transform(ALL((rprpr)),(rprpr).begin(),TU<char>)\n# define FOR(i,tptpt,ypypy)   for(LL i=(tptpt);i<(ypypy);i++)\n# define REP(i,upupu)         FOR(i,0,upupu)\n# define INIT                 std::ios::sync_with_stdio(false);std::cin.tie(0)\n# pragma warning(disable:4996)\n\n//定義系\n\ndouble EPS = 1e-10;\n\n//誤差を考慮して足し算を行う\ndouble add(double a, double b) {\n\tif (abs(a + b) < EPS*(abs(a) + abs(b)))return 0;\n\treturn a + b;\n}\n\n//Point\nstruct Point {\n\tdouble x, y;\n\tPoint() {}\n\tPoint(double x, double y) :x(x), y(y) {\n\t}\n\tPoint operator + (Point p) {\n\t\treturn Point(add(x, p.x), add(y, p.y));\n\t}\n\tPoint operator - (Point p) {\n\t\treturn Point(add(x, -p.x), add(y, -p.y));\n\t}\n\tPoint operator * (double d) {\n\t\treturn Point(x*d, y*d);\n\t}\n\tPoint operator / (double d) {\n\t\treturn Point(x / d, y / d);\n\t}\n\t//内積\n\tdouble dot(Point p) {\n\t\treturn add(x*p.x, y*p.y);\n\t}\n\t//外積\n\tdouble det(Point p) {\n\t\treturn add(x*p.y, -y*p.x);\n\t}\n\t//点の大小比較\n\tbool operator <(const Point &p)const {\n\t\tif (fabs(add(x, -p.x)) < EPS)return y < p.y;\n\t\treturn x < p.x;\n\t}\n\tbool operator ==(const Point &p)const {\n\t\treturn fabs(x - p.x) < EPS&&fabs(y - p.y) < EPS;\n\t}\n};\n\n//ベクトル。使い分けるといいかも\ntypedef Point Vector;\n\n//ベクトルの大きさの2乗\ndouble norm(Vector p) {\n\treturn p.x*p.x + p.y*p.y;\n}\n\n//ベクトルの大きさ\ndouble abs(Vector p) {\n\treturn sqrt(norm(p));\n}\n\n//線分\nstruct Segment {\n\tPoint p1, p2;\n};\n\n//直線\ntypedef Segment Line;\n\n//中心c,半径rの円\nstruct Circle {\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0) :c(c), r(r) {}\n};\n\n//多角形\ntypedef vector<Point> Polygon;\n\n//頂点集合\ntypedef vector<Point> Points;\n\n\n\n\n//計算・アルゴリズム系\n\n\n//反時計回りCCW\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (a.det(b) > EPS)return COUNTER_CLOCKWISE;\n\tif (a.det(b) < -EPS)return CLOCKWISE;\n\tif (a.dot(b) < -EPS)return ONLINE_BACK;\n\tif (norm(a) < norm(b))return ONLINE_FRONT;\n\n\treturn ON_SEGMENT;\n}\n\n//線分p1p2と線分p3p4の交差判定\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n\treturn (ccw(p1, p2, p3)*ccw(p1, p2, p4) <= 0 && ccw(p3, p4, p1)*ccw(p3, p4, p2) <= 0);\n}\nbool intersect(Segment s1, Segment s2) {\n\treturn intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\nstatic const int ICC_SEPERATE = 4;\nstatic const int ICC_CIRCUMSCRIBE = 3;\nstatic const int ICC_INTERSECT = 2;\nstatic const int ICC_INSCRIBE = 1;\nstatic const int ICC_CONTAIN = 0;\n\n//円と円の交差判定\nint intersect(Circle c1, Circle c2) {\n\tif (c1.r<c2.r) swap(c1, c2);\n\tdouble d = abs(c1.c - c2.c);\n\tdouble r = c1.r + c2.r;\n\tif (d == r) return ICC_CIRCUMSCRIBE;\n\tif (d>r) return ICC_SEPERATE;\n\tif (d + c2.r== c1.r) return ICC_INSCRIBE;\n\tif (d + c2.r<c1.r) return ICC_CONTAIN;\n\treturn ICC_INTERSECT;\n}\n\n//ベクトルa,bの直交判定\nbool isOrthogonal(Vector a, Vector b) {\n\treturn a.dot(b) == 0.0;\n}\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n\treturn isOrthogonal(a1 - a2, b1 - b2);\n}\nbool isOrthogonal(Segment s1, Segment s2) {\n\treturn (s1.p2 - s1.p1).dot(s2.p2 - s2.p1) == 0.0;\n}\n\n//ベクトルa,bの並行判定\nbool isParallel(Vector a, Vector b) {\n\treturn a.det(b) == 0.0;\n}\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n\treturn isParallel(a1 - a2, b1 - b2);\n}\nbool isParallel(Segment s1, Segment s2) {\n\treturn (s1.p2 - s1.p1).det(s2.p2 - s2.p1) == 0.0;\n}\n\n//射影(点p1と点p2を通る直線に点pから垂線を引いた交点xを求める)\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = (p - s.p1).dot(base) / norm(base);\n\treturn s.p1 + base*r;\n}\n\n//反射(点p1と点p2を通る直線を対象軸として点pと線対称の位置にある点xを求める)\nPoint reflect(Segment s, Point p) {\n\treturn p + (project(s, p) - p)*2.0;\n}\n\n//点aと点bの距離\ndouble getDistance(Point a, Point b) {\n\treturn abs(a - b);\n}\n\n//直線lと点pの距離\ndouble getDistanceLP(Line l, Point p) {\n\treturn abs((l.p2 - l.p1).det(p - l.p1) / abs(l.p2 - l.p1));\n}\n\n//線分sと点pの距離\ndouble getDistanceSP(Segment s, Point p) {\n\tif ((s.p2 - s.p1).dot(p - s.p1) < 0.0)return abs(p - s.p1);\n\tif ((s.p1 - s.p2).dot(p - s.p2) < 0.0)return abs(p - s.p2);\n\treturn getDistanceLP(s, p);\n}\n\n//線分s1と線分s2の距離\ndouble getDistance(Segment s1, Segment s2) {\n\tif (intersect(s1, s2))return 0.0;\n\treturn min({ getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2), getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2) });\n}\n\n//線分s1と線分s2の交点\nPoint getCrossPoint(Segment l, Segment m) {\n\tdouble d1 = (l.p2 - l.p1).det( m.p2 - m.p1);\n\tdouble d2 = (l.p2 - l.p1).det( l.p2 - m.p1);\n\tif (abs(d1) < EPS && abs(d2) < EPS) return m.p1;\n\treturn m.p1 + (m.p2 - m.p1) * d2 / d1;\n}\n\n//円cと線分lの交点\npair<Point, Point>getCrossPoints(Circle c, Line l) {\n\tVector pr = project(l, c.c);\n\tVector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);\n\tdouble base = sqrt(c.r*c.r - norm(pr - c.c));\n\treturn make_pair(pr + e*base, pr - e*base);\n}\n\n//円c1と円c2の交点\ndouble arg(Vector p) { return atan2(p.y, p.x); }\nVector polar(double a, double r) { return Point(cos(r)*a, sin(r)*a); }\npair<Point, Point>getCrossPoints(Circle c1, Circle c2) {\n\tdouble d = abs(c1.c - c2.c);\n\tdouble a = acos((c1.r*c1.r + d*d - c2.r*c2.r) / (2 * c1.r*d));\n\tdouble t = arg(c2.c - c1.c);\n\treturn make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n}\n\n//点の内包 0:in,1:on,2:out\nint contains(Polygon g, Point p) {\n\tint n = g.size();\n\tbool x = false;\n\tfor (int i = 0; i < n; i++) {\n\t\tPoint a = g[i] - p, b = g[(i + 1) % n] - p;\n\t\tif (abs(a.det(b)) < EPS&&a.dot(b) < EPS) return 1;\n\t\tif (a.y > b.y)swap(a, b);\n\t\tif (a.y < EPS&&EPS < b.y&&EPS < a.det(b))x = !x;\n\t}\n\treturn (x ? 2 : 0);\n}\n\n//凸包を求める\nPolygon convex_hull(Polygon s) {\n\tPolygon u, l;\n\tif (s.size() <= 2)return s;\n\tsort(s.begin(), s.end(), [](const Point &p1, const Point &p2) {return p1.y == p2.y ? p1.x<p2.x : p1.y<p2.y; });\n\tu.push_back(s[0]);\n\tu.push_back(s[1]);\n\tl.push_back(s[s.size() - 1]);\n\tl.push_back(s[s.size() - 2]);\n\n\tfor (int i = 2; i<s.size(); i++){\n\t\tfor (int n = u.size(); n >= 2 && ccw(u[n - 2], u[n - 1], s[i]) != CLOCKWISE&&ccw(u[n - 2], u[n - 1], s[i]) != ONLINE_FRONT; n--){\n\t\t\tu.pop_back();\n\t\t}\n\t\tu.push_back(s[i]);\n\t}\n\n\tfor (int i = s.size() - 3; i >= 0; i--){\n\t\tfor (int n = l.size(); n >= 2 && ccw(l[n - 2], l[n - 1], s[i]) != CLOCKWISE&&ccw(l[n - 2], l[n - 1], s[i]) != ONLINE_FRONT; n--){\n\t\t\tl.pop_back();\n\t\t}\n\t\tl.push_back(s[i]);\n\t}\n\n\treverse(l.begin(), l.end());\n\tfor (int i = u.size() - 2; i >= 1; i--)l.push_back(u[i]);\n\n\treturn l;\n}\n\n//y座標の昇順でマージするための比較関数\nbool compare_y(Point a, Point b) {\n\treturn a.y < b.y;\n}\n\n//最近点対\ndouble closest_pair(Point *a, int n) {\n\tif (n <= 1)return INF<double>();\n\tsort(a, a + n);\n\tint m = n / 2;\n\tdouble x = a[m].x;\n\tdouble d = min({ closest_pair(a,m),closest_pair(a + m,n - m) });//p,qが違う区間にある\n\tinplace_merge(a, a + m, a + n, compare_y);//2つのソートされた列をマージ\n\n\t\t\t\t\t\t\t\t\t\t\t  //p,qが同じ区間にある\n\tPoints b;//直線から距離d未満の頂点を入れていく\n\tfor (int i = 0; i < n; i++) {\n\t\tif (add(fabs(add(a[i].x, -x)), -d) >= 0.0)continue;\n\n\t\t//bに入っている頂点を、末尾からy座標の差がd以上になるまで見ていく\n\t\tfor (int j = 0; j < b.size(); j++) {\n\t\t\tPoint dd;\n\t\t\tdd.x = add(a[i].x, -b[b.size() - j - 1].x);\n\t\t\tdd.y = add(a[i].y, -b[b.size() - j - 1].y);\n\t\t\tif (add(dd.y, -d) >= 0.0)break;\n\t\t\td = min(d, abs(dd));\n\t\t}\n\t\tb.emplace_back(a[i]);\n\t}\n\treturn d;\n}\n\n//多角形の面積\ndouble area(Polygon p) {\n\tint n = p.size();\n\tdouble sum = 0.0;\n\tfor (int i = 0; i < n; i++) {\n\t\tsum = add(sum,0.5*p[i].det(p[(i + 1) % n]));\n\t}\n\treturn sum < 0.0 ? -sum : sum;\n}\n\n//凸性判定\nbool is_convex(Polygon p) {\n\tfor (int i = 0; i < p.size(); i++) {\n\t\tif (ccw(p[(i - 1 + p.size()) % p.size()], p[i], p[(i + 1) % p.size()]) == -1)return false;\n\t}\n\treturn true;\n}\n\n//切断\nPolygon convex_cut(Polygon p, Line l) {\n\tPolygon ret;\n\tfor (int i = 0; i < p.size(); i++) {\n\t\tPoint cur = p[i], nxt = p[(i + 1) % p.size()];\n\t\tif (ccw(l.p1, l.p2, cur) != -1)ret.emplace_back(cur);\n\t\tif (ccw(l.p1, l.p2, cur)*ccw(l.p1, l.p2, nxt) < 0) {\n\t\t\tSegment seg;\n\t\t\tseg.p1 = cur;\n\t\t\tseg.p2 = nxt;\n\t\t\tret.emplace_back(getCrossPoint(seg, l));\n\t\t}\n\t}\n\treturn ret;\n}\n\n//端点の種類\n# define BOTTOM 0\n# define LEFT 1\n# define RIGHT 2\n# define TOP 3\n\nclass EndPoint {\npublic:\n\tPoint p;\n\tint seg, st;//入力線分のID,端点の種類\n\tEndPoint() {}\n\tEndPoint(Point p, int seg, int st) :p(p), seg(seg), st(st) {}\n\n\tbool operator <(const EndPoint &ep)const {\n\t\t//y座標が小さい順に整列\n\t\tif (p.y == ep.p.y) {\n\t\t\treturn st < ep.st;//yが同一の場合は、下端点、左端点、右端点、上端点の順に調べる\n\t\t}\n\t\telse {\n\t\t\treturn p.y < ep.p.y;\n\t\t}\n\t}\n};\n\nEndPoint EP[202020];//端点のリスト\n\n//線分交差問題（マンハッタン幾何）\n\nint ManhattanIntersection(vector<Segment> s) {\n\tint n = s.size();\n\tfor (int i = 0, k = 0; i < n; i++) {\n\t\t//端点p1,p2が左下を基準に並ぶように調整\n\t\tif (s[i].p1.y == s[i].p2.y) {\n\t\t\tif(s[i].p1.x>s[i].p2.x)swap(s[i].p1, s[i].p2);\n\t\t}\n\t\telse if (s[i].p1.y > s[i].p2.y)swap(s[i].p1, s[i].p2);\n\n\t\tif (s[i].p1.y == s[i].p2.y) {//水平線分を端点リストに追加\n\t\t\tEP[k++] = EndPoint(s[i].p1, i, LEFT);\n\t\t\tEP[k++] = EndPoint(s[i].p2, i, RIGHT);\n\t\t}\n\t\telse {//垂直線分を端点リストに追加\n\t\t\tEP[k++] = EndPoint(s[i].p1, i, BOTTOM);\n\t\t\tEP[k++] = EndPoint(s[i].p2, i, TOP);\n\t\t}\n\t}\n\tsort(EP, EP + 2 * n);//端点のy座標に関して昇順に整列\n\n\tset<LL> bt;//二分探索木\n\tbt.insert(1010101010);\n\tint cnt = 0;\n\n\tfor (int i = 0; i < 2 * n; i++) {\n\t\tif (EP[i].st == TOP) {\n\t\t\tbt.erase(EP[i].p.x);//上端点を削除\n\t\t}\n\t\telse if (EP[i].st == BOTTOM) {\n\t\t\tbt.insert(EP[i].p.x);\n\t\t}\n\t\telse if (EP[i].st == LEFT) {\n\t\t\tset<LL>::iterator b = bt.lower_bound(s[EP[i].seg].p1.x);\n\t\t\tset<LL>::iterator e = bt.upper_bound(s[EP[i].seg].p2.x);\n\t\t\tcnt += distance(b, e);//bとeの距離（点の数）を加算\n\t\t}\n\t}\n\treturn cnt;\n}\n\n\nint main() {\n\tCircle c1, c2;\n\tcin >> c1.c.x >> c1.c.y >> c1.r >> c2.c.x >> c2.c.y >> c2.r;\n\tcout << intersect(c1, c2) << endl;\n}\n"
  },
  {
    "language": "C++",
    "code": "//By Vlgd\n#include<bits/stdc++.h>\n#define EPS (1e-10)\n#define equals(a,b) fabs((a)-(b))<EPS\nusing namespace std;\nclass Point{\npublic:\n\tdouble x,y;\n\tPoint(double x=0,double y=0):x(x),y(y){}\n\tPoint operator +(Point p){return Point(x+p.x,y+p.y);}\n\tPoint operator -(Point p){return Point(x-p.x,y-p.y);}\n\tPoint operator *(double a){return Point(a*x,a*y);}\n\tPoint operator /(double a){return Point(x/a,y/a);}\n\tdouble norm(){return x*x+y*y;}\n\tdouble abs(){return sqrt(norm());}\n\tbool operator <(const Point &p){\n\t\treturn x!=p.x?x<p.x:y<p.y;\n\t}\n\tbool operator ==(const Point &p){\n\t\treturn fabs(x-p.x)<EPS && fabs(y-p.y)<EPS;\n\t}\n};\nclass Circle{\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c=Point(),double r=0):c(c),r(r){}\n};\ntypedef Point Vector;\nstruct Segment{Point p1,p2;};\ntypedef Segment Line;\nint intersection(Circle c1,Circle c2){\n\tdouble dis=(c1.c-c2.c).abs();\n\tdouble R=c1.r+c2.r;\n\tif(dis>c1.r+c2.r) return 4;\n\tif(dis==c1.r+c2.r) return 3;\n\tif(dis>fabs(c1.r-c2.r)) return 2;\n\tif(dis==fabs(c1.r-c2.r)) return 1;\n\telse return 0; \n}\nmain(){\n\tint cx,cy,r;\n\tscanf(\"%d%d%d\",&cx,&cy,&r);\n\tPoint p1(cx,cy);\n\tCircle c1(p1,r);\n\tscanf(\"%d%d%d\",&cx,&cy,&r);\n\tPoint p2(cx,cy);\n\tCircle c2(p2,r);\n\tprintf(\"%d\\n\",intersection(c1,c2));\n} \n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i,a,n) for(int i=(a);i<(n);i++)\n#define per(i,a,n) for(int i=(n)-1;i>=(a);i--)\n#define MP make_pair\n\ntypedef double db;\n\nconst db EPS = 1e-8;\n\ninline int sign(db a) {\n\treturn a < -EPS ? -1 : a > EPS;\n}\n\ninline int cmp(db a, db b){\n\treturn sign(a-b);\n}\n\nstruct P {\n\tdb x, y;\n\tP() {\n\t}\n\tP(db _x, db _y) :\n\t\t\tx(_x), y(_y) {\n\t}\n\tP operator+(P p) {\n\t\treturn P(x + p.x, y + p.y);\n\t}\n\tP operator-(P p)  {\n\t\treturn P(x - p.x, y - p.y);\n\t}\n\tP operator*(db d) {\n\t\treturn P(x * d, y * d);\n\t}\n\tP operator/(db d) {\n\t\treturn P(x / d, y / d);\n\t}\n\tbool operator<(P p) const {\n\t\tint c = sign(x - p.x);\n\t\tif (c)\n\t\t\treturn c == -1;\n\t\treturn sign(y - p.y) == -1;\n\t}\n\tdb dot(P p) {\n\t\treturn x * p.x + y * p.y;\n\t}\n\tdb det(P p) {\n\t\treturn x * p.y - y * p.x;\n\t}\n\tdb distTo(P p) { return (*this-p).abs(); }\n\n\tdb alpha() {\n\t\treturn atan2(y, x);\n\t}\n\tvoid read() {\n\t\tcin>>x>>y;\n\t}\n\tdb abs() {\n\t\treturn sqrt(abs2());\n\t}\n\tdb abs2() {\n\t\treturn x * x + y * y;\n\t}\n\tP rot90(){\n\t\treturn P(-y,x);\n\t}\n};\n\n#define cross(p1,p2,p3) ((p2.x-p1.x)*(p3.y-p1.y)-(p3.x-p1.x)*(p2.y-p1.y))\n#define crossOp(p1,p2,p3) sign(cross(p1,p2,p3))\n\nP isLL(P p1, P p2, P q1, P q2) {\n\tdb a1 = cross(q1, q2, p1), a2 = -cross(q1, q2, p2);\n\treturn (p1 * a2 + p2 * a1) / (a1 + a2);\n}\n\nbool intersect(db l1,db r1,db l2,db r2){\n\tif(l1>r1) swap(l1,r1); if(l2>r2) swap(l2,r2); \n\treturn !( cmp(r1,l2) == -1 || cmp(r2,l1) == -1 );\n}\n\nbool isSS(P p1, P p2, P q1, P q2){\n    return intersect(p1.x,p2.x,q1.x,q2.x) && intersect(p1.y,p2.y,q1.y,q2.y) && \n    crossOp(p1,p2,q1) * crossOp(p1,p2,q2) <= 0 && crossOp(q1,q2,p1)\n            * crossOp(q1,q2,p2) <= 0;\n}\n\nbool isMiddle(db a, db m, db b) {\n    return sign(a - m) == 0 || sign(b - m) == 0 || (a < m != b < m);\n}\n \nbool isMiddle(P a, P m, P b) {\n    return isMiddle(a.x, m.x, b.x) && isMiddle(a.y, m.y, b.y);\n}\n\nbool onSeg(P p1, P p2, P q){\n\treturn crossOp(p1,p2,q) == 0 && isMiddle(p1, q, p2);\n}\n\nP proj(P p1, P p2, P q) {\n    P dir = p2 - p1;\n    return p1 + dir * (dir.dot(q - p1) / dir.abs2());\n}\n\nP reflect(P p1, P p2, P q){\n\treturn proj(p1,p2,q) * 2 - q;\n}\n\ndb nearest(P p1,P p2,P q){\n\tP h = proj(p1,p2,q);\n\tif(isMiddle(p1,h,p2))\n\t\treturn q.distTo(h);\n\treturn min(p1.distTo(q),p2.distTo(q));\n}\n\ndb disSS(P p1, P p2, P q1, P q2){\n\tif(isSS(p1,p2,q1,q2)) return 0;\n\treturn min(min(nearest(p1,p2,q1),nearest(p1,p2,q2)), min(nearest(q1,q2,p1),nearest(q1,q2,p2)) );\n}\n\ndb getrad(P p1,P p2){\n\treturn atan2l(p1.det(p2),p1.dot(p2));\n}\n\ndb incircle(P p1, P p2, P p3){\n\tdb A = p1.distTo(p2);\n\tdb B = p2.distTo(p3);\n\tdb C = p3.distTo(p1);\n\treturn sqrtl(A*B*C/(A+B+C));\n}\n\n//polygon\n\ndb area(vector<P> ps){\n\tdb ret = 0; rep(i,0,ps.size()) ret += ps[i].det(ps[(i+1)%ps.size()]); \n\treturn abs(ret/2);\n}\n\nint contain(vector<P> ps, P p){ //2:inside,1:on_seg,0:outside\n\tint n = ps.size(), ret = 0;\t\n\trep(i,0,n){\n\t\tP u=ps[i],v=ps[(i+1)%n];\n\t\tif(onSeg(u,v,p)) return 1;\n\t\tif(cmp(u.y,v.y)<=0) swap(u,v);\n\t\tif(cmp(p.y,u.y) >0 || cmp(p.y,v.y) <= 0) continue;\n\t\tret ^= crossOp(p,u,v) > 0;\n\t}\n\treturn ret*2;\n}\n\nvector<P> convexHull(vector<P> ps) {\n    int n = ps.size(); if(n <= 1) return ps;\n    sort(ps.begin(), ps.end());\n    vector<P> qs(n * 2); int k = 0;\n    for (int i = 0; i < n; qs[k++] = ps[i++]) \n        while (k > 1 && crossOp(qs[k - 2], qs[k - 1], ps[i]) <= 0) --k;\n    for (int i = n - 2, t = k; i >= 0; qs[k++] = ps[i--])\n       \twhile (k > t && crossOp(qs[k - 2], qs[k - 1], ps[i]) <= 0) --k;\n    qs.resize(k - 1);\n    return qs;\n}\n\nvector<P> convexHullNonStrict(vector<P> ps) {\n\t//caution: need to unique the points first\n    int n = ps.size(); if(n <= 1) return ps;\n    sort(ps.begin(), ps.end());\n    vector<P> qs(n * 2); int k = 0;\n    for (int i = 0; i < n; qs[k++] = ps[i++]) \n        while (k > 1 && crossOp(qs[k - 2], qs[k - 1], ps[i]) < 0) --k;\n    for (int i = n - 2, t = k; i >= 0; qs[k++] = ps[i--])\n       \twhile (k > t && crossOp(qs[k - 2], qs[k - 1], ps[i]) < 0) --k;\n    qs.resize(k - 1);\n    return qs;\n}\n\ndb convexDiameter(vector<P> ps){\n\tint n = ps.size(); if(n <= 1) return 0;\n\tint is = 0, js = 0; rep(k,1,n) is = ps[k]<ps[is]?k:is, js = ps[js] < ps[k]?k:js;\n\tint i = is, j = js;\n\tdb ret = ps[i].distTo(ps[j]);\n\tdo{\n\t\tif((ps[(i+1)%n]-ps[i]).det(ps[(j+1)%n]-ps[j]) >= 0)\n\t\t\t(++j)%=n;\n\t\telse\n\t\t\t(++i)%=n;\n\t\tret = max(ret,ps[i].distTo(ps[j]));\n\t}while(i!=is || j!=js);\n\treturn ret;\n}\n\nvector<P> convexCut(const vector<P>&ps, P q1, P q2) {\n\tvector<P> qs;\n\tint n = ps.size();\n\trep(i,0,n){\n\t\tP p1 = ps[i], p2 = ps[(i+1)%n];\n\t\tint d1 = crossOp(q1,q2,p1), d2 = crossOp(q1,q2,p2);\n\t\tif(d1 >= 0) qs.push_back(p1);\n\t\tif(d1 * d2 < 0) qs.push_back(isLL(p1,p2,q1,q2));\n\t}\n\treturn qs;\n}\n\n//min_dist\n\ndb min_dist(vector<P>&ps,int l,int r){\n\tif(r-l<=5){\n\t\tdb ret = 1e100;\n\t\trep(i,l,r) rep(j,l,i) ret = min(ret,ps[i].distTo(ps[j]));\n\t\treturn ret;\n\t}\n\tint m = (l+r)>>1;\n\tdb ret = min(min_dist(ps,l,m),min_dist(ps,m,r));\n\tvector<P> qs; rep(i,l,r) if(abs(ps[i].x-ps[m].x)<= ret) qs.push_back(ps[i]);\n\tsort(qs.begin(), qs.end(),[](P a,P b) -> bool {return a.y<b.y; });\n\trep(i,1,qs.size()) for(int j=i-1;j>=0&&qs[j].y>=qs[i].y-ret;--j) ret = min(ret,qs[i].distTo(qs[j]));\n\treturn ret;\n}\n\nint type(P o1,double r1,P o2,double r2){\n\tdouble d = o1.distTo(o2);\n\tif(cmp(d,r1+r2) == 1) return 4;\n\tif(cmp(d,r1+r2) == 0) return 3;\n\tif(cmp(d,abs(r1-r2)) == 1) return 2;\n\tif(cmp(d,abs(r1-r2)) == 0) return 1;\n\treturn 0;\n}\n\nint main(){\n\tP o1;double r1;\n\tP o2;double r2;\n\to1.read();cin>>r1;\n\to2.read();cin>>r2;\n\tcout<<type(o1,r1,o2,r2)<<endl;\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\n\nusing namespace std;\n\nconst double eps = 1e-10;\n\nclass Point {\npublic:\n    double x, y;\n    Point(double _x = 0., double _y = 0.) : x(_x), y(_y) {}\n};\n\nistream& operator >> (istream& in, Point& P)\n{\n    in >> P.x >> P.y;\n    return in;\n}\n\ndouble Dist(const Point& P, const Point& Q)\n{\n    double dx = P.x - Q.x;\n    double dy = P.y - Q.y;\n    return sqrt(dx * dx + dy * dy);\n}\n\nclass Circle {\npublic:\n    Point c;\n    double r;\n    Circle(const Point& _c = Point(), double _r = 0.) : c(_c), r(_r) {}\n};\n\nistream& operator >> (istream& in, Circle& C)\n{\n    in >> C.c >> C.r;\n    return in;\n}\n\nint CircStatus(const Circle& C1, const Circle& C2)\n{\n    double d = Dist(C1.c, C2.c);\n    if (d > C1.r + C2.r + eps) {\n        return 4;\n    } else if (d > C1.r + C2.r -eps) {\n        return 3;\n    } else if (d > fabs(C1.r - C2.r) + eps) {\n        return 2;\n    } else if (d > fabs(C1.r - C2.r) - eps) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n\nint main()\n{\n    Circle C1, C2;\n    cin >> C1 >> C2;\n\n    cout << CircStatus(C1, C2) << endl;\n    \n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n#define PI 3.141592653589793238\n#define int long long\n \nusing namespace std;\n\n// COUNTER CLOCKWISE\nstatic const int CCW_COUNTER_CLOCKWISE = 1;\nstatic const int CCW_CLOCKWISE = -1;\nstatic const int CCW_ONLINE_BACK = 2;\nstatic const int CCW_ONLINE_FRONT = -2;\nstatic const int CCW_ON_SEGMENT = 0;\n\n//Intercsect Circle & Circle\nstatic const int ICC_SEPERATE = 4;\nstatic const int ICC_CIRCUMSCRIBE = 3;\nstatic const int ICC_INTERSECT = 2;\nstatic const int ICC_INSCRIBE = 1;\nstatic const int ICC_CONTAIN = 0;\n\nstruct Point{\n  double x,y;\n  Point(){}\n  Point(double x,double y) :x(x),y(y){}\n  Point operator+(Point p) {return Point(x+p.x,y+p.y);}\n  Point operator-(Point p) {return Point(x-p.x,y-p.y);}\n  Point operator*(double k){return Point(x*k,y*k);}\n  Point operator/(double k){return Point(x/k,y/k);}\n  double norm(){return x*x+y*y;}\n  double abs(){return sqrt(norm());}\n\n  bool operator < (const Point &p) const{\n    return x!=p.x?x<p.x:y<p.y;\n  }\n\n  bool operator == (const Point &p) const{\n    return fabs(x-p.x)<EPS && fabs(y-p.y)<EPS;\n  }\n};\n\nistream &operator >> (istream &is,Point &p){\n  is>>p.x>>p.y;\n  return is;\n}\n\nostream &operator << (ostream &os,Point p){\n  os<<fixed<<setprecision(12)<<p.x<<\" \"<<p.y;\n  return os;\n}\n\nbool sort_x(Point a,Point b){\n  return a.x!=b.x?a.x<b.x:a.y<b.y;\n}\n\nbool sort_y(Point a,Point b){\n  return a.y!=b.y?a.y<b.y:a.x<b.x;\n}\n\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\nstruct Segment{\n  Point p1,p2;\n  Segment(){}\n  Segment(Point p1, Point p2):p1(p1),p2(p2){}\n};\ntypedef Segment Line;\n\nistream &operator >> (istream &is,Segment &s){\n  is>>s.p1>>s.p2;\n  return is;\n}\n\nstruct Circle{\n  Point c;\n  double r;\n  Circle(){}\n  Circle(Point c,double r):c(c),r(r){}\n};\n\nistream &operator >> (istream &is,Circle &c){\n  is>>c.c>>c.r;\n  return is;\n}\n\ndouble norm(Vector a){\n  return a.x*a.x+a.y*a.y;\n}\ndouble abs(Vector a){\n  return sqrt(norm(a));\n}\ndouble dot(Vector a,Vector b){\n  return a.x*b.x+a.y*b.y;\n}\ndouble cross(Vector a,Vector b){\n  return a.x*b.y-a.y*b.x;\n}\n\nbool isOrthogonal(Vector a,Vector b){\n  return equals(dot(a,b),0.0);\n}\n\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n  return isOrthogonal(a1-a2,b1-b2);\n}\n\nbool isOrthogonal(Segment s1,Segment s2){\n  return equals(dot(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n\nbool isParallel(Vector a,Vector b){\n  return equals(cross(a,b),0.0);\n}\n\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n  return isParallel(a1-a2,b1-b2);\n}\n\nbool isParallel(Segment s1,Segment s2){\n  return equals(cross(s1.p2-s1.p1,s2.p2-s2.p1),0.0); \n}\n\nPoint project(Segment s,Point p){\n  Vector base=s.p2-s.p1;\n  double r=dot(p-s.p1,base)/norm(base);\n  return s.p1+base*r;\n}\n\nPoint reflect(Segment s,Point p){\n  return p+(project(s,p)-p)*2.0;\n}\n\nint ccw(Point p0,Point p1,Point p2){\n  Vector a = p1-p0;\n  Vector b = p2-p0;\n  if(cross(a,b) > EPS) return CCW_COUNTER_CLOCKWISE;\n  if(cross(a,b) < -EPS) return CCW_CLOCKWISE;\n  if(dot(a,b) < -EPS) return CCW_ONLINE_BACK;\n  if(a.norm()<b.norm()) return CCW_ONLINE_FRONT;\n  return CCW_ON_SEGMENT;\n}\n\nbool intersectSS(Point p1,Point p2,Point p3,Point p4){\n  return (ccw(p1,p2,p3)*ccw(p1,p2,p4) <= 0 &&\n\t  ccw(p3,p4,p1)*ccw(p3,p4,p2) <= 0 );\n}\n\nbool intersectSS(Segment s1,Segment s2){\n  return intersectSS(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n\nint intersectCC(Circle c1,Circle c2){\n  if(c1.r<c2.r) swap(c1,c2);\n  double d=abs(c1.c-c2.c);\n  double r=c1.r+c2.r;\n  if(equals(d,r)) return ICC_CIRCUMSCRIBE;\n  if(d>r) return ICC_SEPERATE;\n  if(equals(d+c2.r,c1.r)) return ICC_INSCRIBE;\n  if(d+c2.r<c1.r) return ICC_CONTAIN;\n  return ICC_INTERSECT;\n}\n\ndouble getDistanceLP(Line l,Point p){\n  return abs(cross(l.p2-l.p1,p-l.p1)/abs(l.p2-l.p1));\n}\n\ndouble getDistanceSP(Segment s,Point p){\n  if(dot(s.p2-s.p1,p-s.p1) < 0.0 ) return abs(p-s.p1);\n  if(dot(s.p1-s.p2,p-s.p2) < 0.0 ) return abs(p-s.p2);\n  return getDistanceLP(s,p);\n}\n\ndouble getDistanceSS(Segment s1,Segment s2){\n  if(intersectSS(s1,s2)) return 0.0;\n  return min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),\n\t     min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n}\n\nPoint getCrossPointSS(Segment s1,Segment s2){\n  Vector base=s2.p2-s2.p1;\n  double d1=abs(cross(base,s1.p1-s2.p1));\n  double d2=abs(cross(base,s1.p2-s2.p1));\n  double t=d1/(d1+d2);\n  return s1.p1+(s1.p2-s1.p1)*t;\n}\n\nPoint getCrossPointLL(Line l1,Line l2){\n  double a=cross(l1.p2-l1.p1,l2.p2-l2.p1);\n  double b=cross(l1.p2-l1.p1,l1.p2-l2.p1);\n  if(abs(a)<EPS&&abs(b)<EPS) return l2.p1;\n  return l2.p1+(l2.p2-l2.p1)*(b/a);\n}\n\npair<Point,Point> getCrossPoints(Circle c,Line l){\n  Vector pr=project(l,c.c);\n  Vector e=(l.p2-l.p1)/abs(l.p2-l.p1);\n  double base=sqrt(c.r*c.r-norm(pr-c.c));\n  return make_pair(pr+e*base,pr-e*base);\n}\n\n\ndouble arg(Vector p){\n  return atan2(p.y,p.x);\n}\n\nVector polar(double a,double r){\n  return Point(cos(r)*a,sin(r)*a);\n}\n\npair<Point,Point> getCrossPoints(Circle c1,Circle c2){\n  double d=abs(c1.c-c2.c);\n  double a=acos((c1.r*c1.r+d*d-c2.r*c2.r)/(2*c1.r*d));\n  double t=arg(c2.c-c1.c);\n  return make_pair(c1.c+polar(c1.r,t+a),c1.c+polar(c1.r,t-a));\n}\n\nint contains(Polygon g,Point p){\n  int n=g.size();\n  bool x=false;\n  for(int i=0;i<n;i++){\n    Point a=g[i]-p,b=g[(i+1)%n]-p;\n    if(fabs(cross(a,b)) < EPS && dot(a,b) < EPS) return 1;\n    if(a.y>b.y) swap(a,b);\n    if(a.y < EPS && EPS < b.y && cross(a,b) > EPS ) x = !x;\n  }\n  return (x?2:0);\n}\n\nPolygon andrewScan(Polygon s){\n  Polygon u,l;\n  if(s.size()<3) return s;\n  sort(s.begin(),s.end());\n  u.push_back(s[0]);\n  u.push_back(s[1]);\n  l.push_back(s[s.size()-1]);\n  l.push_back(s[s.size()-2]);\n  for(int i=2;i<(int)s.size();i++){\n    for(int n=u.size();n>=2&&ccw(u[n-2],u[n-1],s[i])!=CCW_CLOCKWISE;n--){\n      u.pop_back();\n    }\n    u.push_back(s[i]);\n  } \n  for(int i=s.size()-3;i>=0;i--){\n    for(int n=l.size();n>=2&&ccw(l[n-2],l[n-1],s[i])!=CCW_CLOCKWISE;n--){\n      l.pop_back();\n    }\n    l.push_back(s[i]);\n  }\n  reverse(l.begin(),l.end());\n  for(int i=u.size()-2;i>=1;i--) l.push_back(u[i]);\n  return l;\n} \n\nPolygon convex_hull(Polygon ps){\n  int n=ps.size();\n  sort(ps.begin(),ps.end(),sort_y);\n  int k=0;\n  Polygon qs(n*2);\n  for(int i=0;i<n;i++){\n    while(k>1&&cross(qs[k-1]-qs[k-2],ps[i]-qs[k-1])<0) k--;\n    qs[k++]=ps[i];\n  }\n  for(int i=n-2,t=k;i>=0;i--){\n    while(k>t&&cross(qs[k-1]-qs[k-2],ps[i]-qs[k-1])<0) k--;\n    qs[k++]=ps[i];\n  }\n  qs.resize(k-1);\n  return qs;\n}\n\ndouble diameter(Polygon s){\n  Polygon p=s;\n  int n=p.size();\n  if(n==2) return abs(p[0]-p[1]);\n  int i=0,j=0;\n  for(int k=0;k<n;k++){\n    if(p[i]<p[k]) i=k;\n    if(!(p[j]<p[k])) j=k;\n  }\n  double res=0;\n  int si=i,sj=j;\n  while(i!=sj||j!=si){\n    res=max(res,abs(p[i]-p[j]));\n    if(cross(p[(i+1)%n]-p[i],p[(j+1)%n]-p[j])<0.0){\n      i=(i+1)%n;\n    }else{\n      j=(j+1)%n;\n    }\n  }\n  return res;\n}\n\nbool isConvex(Polygon p){\n  bool f=1;\n  int n=p.size();\n  for(int i=0;i<n;i++){\n    int t=ccw(p[(i+n-1)%n],p[i],p[(i+1)%n]);\n    f&=t!=CCW_CLOCKWISE;\n  }\n  return f;\n}\n\ndouble area(Polygon s){\n  double res=0;\n  for(int i=0;i<(int)s.size();i++){\n    res+=cross(s[i],s[(i+1)%s.size()])/2.0;\n  }\n  return abs(res);\n}\n\nPolygon convexCut(Polygon p,Line l){\n  Polygon q;\n  for(int i=0;i<(int)p.size();i++){\n    Point a=p[i],b=p[(i+1)%p.size()];\n    if(ccw(l.p1,l.p2,a)!=-1) q.push_back(a);\n    if(ccw(l.p1,l.p2,a)*ccw(l.p1,l.p2,b)<0)\n      q.push_back(getCrossPointLL(Line(a,b),l));\n  }\n  return q;\n}\n\nLine bisector(Point p1,Point p2){\n  Circle c1=Circle(p1,abs(p1-p2)),c2=Circle(p2,abs(p1-p2));\n  pair<Point,Point> p=getCrossPoints(c1,c2);\n  if(cross(p2-p1,p.first-p1)>0) swap(p.first,p.second);\n  return Line(p.first,p.second);\n}\n\nVector translate(Vector v,double theta){\n  Vector res;\n  res.x=cos(theta)*v.x-sin(theta)*v.y;\n  res.y=sin(theta)*v.x+cos(theta)*v.y;\n  return res;\n}\n\nvector<Line> corner(Line l1,Line l2){\n  vector<Line> res;\n  if(isParallel(l1,l2)){\n    double d=getDistanceLP(l1,l2.p1)/2.0;\n    Vector v1=l1.p2-l1.p1;\n    v1=v1/v1.abs()*d;\n    Point p=l2.p1+translate(v1,90.0*(PI/180.0));\n    double d1=getDistanceLP(l1,p);\n    double d2=getDistanceLP(l2,p);\n    if(abs(d1-d2)>d){\n      p=l2.p1+translate(v1,-90.0*(PI/180.0));\n    }\n    res.push_back(Line(p,p+v1));\n  }else{\n    Point p=getCrossPointLL(l1,l2);\n    Vector v1=l1.p2-l1.p1,v2=l2.p2-l2.p1;\n    v1=v1/v1.abs();\n    v2=v2/v2.abs();\n    res.push_back(Line(p,p+(v1+v2)));\n    res.push_back(Line(p,p+translate(v1+v2,90.0*(PI/180.0))));\n  }\n  return res;\n}\n\nsigned main(){\n  Circle c1,c2;\n  cin>>c1>>c2;\n  cout<<intersectCC(c1,c2)<<endl;\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define rep(i,n) for(int i=0;i<int(n);++i)\nusing namespace std;\n\n#define _all(arg) begin(arg),end(arg)\n#define uniq(arg) (sort(_all(arg)),(arg).erase(unique(_all(arg)),end(arg)),arg)\n#define getidx(ary,key) lower_bound(_all(ary),key)-begin(ary)\n\ntemplate<class T>void reg(vector<T> &ary,const T &elem){ary.emplace_back(elem);}\ntemplate<class T>bool chmin(T &a, const T &b) {return (b<a)?(a=b,1):0;}\ntemplate<class T>bool chmax(T &a, const T &b) {return (a<b)?(a=b,1):0;}\n\nusing R=long double; // __float128\nconst R EPS = 1E-8; // [-100:100]->EPS=1e-9 [-1000:1000]->EPS=1e-8 [-10000:10000]->EPS=1e-7\nconst R INF = 1E40;\nconst R PI = acos(R(-1));\ninline int sgn(const R& r){ return (r > EPS) - (r < -EPS);}\ninline R sq(R x){return sqrt(max<R>(x,0.0));}\n\nusing P=complex<R>;\nusing VP=vector<P>;\n\nnamespace std{\n\tbool operator <  (const P& a,const P& b){ return sgn(real(a-b))?real(a-b)<0:sgn(imag(a-b))<0;}\n\tbool operator == (const P& a,const P& b){ return sgn(real(a-b))==0 && sgn(imag(a-b))==0;}\n}\n\nusing L=struct{P s,t;};\n\ninline R dot(P o,P a,P b){a-=o,b-=o; return real(conj(a)*b);}\ninline R det(P o,P a,P b){a-=o,b-=o; return imag(conj(a)*b);}\n\nenum CCW{ LEFT = 1,RIGHT = 2,BACK = 4,FRONT = 8,ON = 16};\ninline int ccw(P o,P a, P b) {\n\tif (sgn(det(o,a,b)) > 0) return LEFT;\n\tif (sgn(det(o,a,b)) < 0) return RIGHT;\n\tif (sgn(dot(o,a,b)) < 0) return BACK;\n\tif (sgn(norm(a-o)-norm(b-o)) < 0) return FRONT;\n\treturn ON;\n}\n\n// above prepared template\n\nP proj(P o,P a,P b){ a-=o,b-=o; return a*real(b/a);}\nP proj(L l,P p){l.t-=l.s,p-=l.s;return l.s+l.t*real(p/l.t);}\nP refl(L l,P p){ return R(2.0)*proj(l,p)-p;}\n\nbool iss(L a,L b,int end=0){\n\tint s1=ccw(a.s,a.t,b.s)|ccw(a.s,a.t,b.t);\n\tint s2=ccw(b.s,b.t,a.s)|ccw(b.s,b.t,a.t);\n\tif(end) return (s1&s2)==(LEFT|RIGHT);\n\treturn (s1|s2)&ON || (s1&s2)==(LEFT|RIGHT);\n}\n\nP cross(L a,L b){\n\tR s1=det(a.s,b.s,b.t),s2=s1+det(a.t,b.t,b.s);\n\treturn a.s+s1/s2*(a.t-a.s);\n}\n\nR dsp(L s,P p){\n\tif(sgn(dot(s.s,s.t,p))<=0) return abs(p-s.s);\n\tif(sgn(dot(s.t,s.s,p))<=0) return abs(p-s.t);\n\treturn abs(det(s.s,s.t,p))/abs(s.t-s.s);\n}\n\nR dss(L a,L b){return iss(a,b)?0:min({dsp(a,b.s),dsp(a,b.t),dsp(b,a.s),dsp(b,a.t)});}\n\n\nusing C=struct{P c;R r;};\nenum RCC{OUT=4,ON_OUT=3,ISC=2,ON_IN=1,IN=0};\nint rcc(C a,C b){ R d=abs(a.c-b.c);return 2+sgn(d-a.r-b.r)+sgn(d-abs(a.r-b.r));}\n\nbool icp(C c,P p,int end=0){return sgn(norm(p-c.c)-norm(c.r))<=-end;}\n// dsp\nbool ics(C c,L s,int end=0){return sgn(dsp(s,c.c)-c.r)<=-end;}\nbool icsc(C c,L l,int end=0){return ics(c,l) && sgn(max(norm(l.s-c.c),norm(l.t-c.c))-norm(c.r))<=0;}\n\nR cc_area(C a,C b){\n\tint r=rcc(a,b);\n    if(r<=ON_OUT) return 0.0;  \n    if(r>=ON_IN) return min(norm(a.r),norm(b.r))*PI;\n    R d=abs(b.c-a.c),rc=(norm(d)+ norm(a.r) - norm(b.r))/(2.0*d),t=acos(rc/a.r),p=acos((d-rc)/b.r);\n    return norm(a.r)*t+norm(b.r)*p-d*a.r*sin(t);\n}\n\n// proj\nVP pcl(C c, L l){P h=proj(l,c.c),e=(l.t-l.s)/abs(l.t-l.s)*sq(norm(c.r)-norm(h-c.c));return VP{h-e,h+e};}\n// pcl\nVP pcc(C a,C b){P d=b.c-a.c,w=(norm(d)+norm(a.r)-norm(b.r))/(2.0*norm(d))*d,h=a.c+w,e=w*P(0,1);return pcl(a,{h-e,h+e});}\n\nL tan(C c,P p){P d=(p-c.c)*P(0,1);return L{p-d,p+d};}\n\n// reg sq\nVP contact(C c,P p){\n\tVP ret; R d=abs(p-c.c); \n\trep(i,2) reg(ret,c.c+(c.r+P(0,2*i-1)*sq(norm(d)-norm(c.r)))*c.r*(p-c.c)/norm(d));\n\treturn uniq(ret);\n}\n\n// reg sq rcc\nVP contact(C a,C b){\n\tVP ret; R d=abs(a.c-b.c);\n\trep(i,2) if(rcc(a,b)<=8-6*i) rep(j,2){\n\t\tR r=a.r+(2*i-1)*b.r;\n\t\treg(ret,a.c+(r+P(0,2*j-1)*sq(norm(d)-norm(r)))*a.r*(b.c-a.c)/norm(d));\n\t}\n\treturn uniq(ret);\n}\n\n\nint main(void){\n\tC a,b;\n\t{\n\t\tint x,y,r;\n\t\tcin >> x >> y >> r;\n\t\ta={P(x,y),r};\n\t\tcin >> x >> y >> r;\n\t\tb={P(x,y),r};\n\t}\n\tcout << rcc(a,b) << endl;\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint main() {\n\tint c1x, c1y, c1r;\n\tint c2x, c2y, c2r;\n\n\tcin >> c1x;\n\tcin >> c1y;\n\tcin >> c1r;\n\n\tcin >> c2x;\n\tcin >> c2y;\n\tcin >> c2r;\n\n\tint X = (c1x - c2x) * (c1x - c2x);\n\tint Y = (c1y - c2y) * (c1y - c2y);\n\n\tdouble dis;\n\tdouble  sumR, difR;\n\n\tdis = sqrt(X+Y);\n\tsumR = c1r + c2r;\n\n\tif (c1r > c2r)\n\t\tdifR = c1r - c2r;\n\telse\n\t\tdifR = c2r - c1r;\n\n\n\tif (dis > sumR)\n\t\tcout << 4 << endl;\n\n\telse if (dis == sumR)\n\t\tcout << 3 << endl;\n\n\telse if (difR < dis && dis < sumR)\n\t\tcout << 2 << endl;\n\n\telse if (dis == difR)\n\t\tcout << 1 << endl;\n\n\telse\n\t\tcout << 0 << endl;\n\n\treturn 0;\n\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <fstream>\n#include <string>\n#include <iomanip>\n#include <math.h>\n#include <stdbool.h>\n#include <algorithm>\n#include <vector>\n#include <map>\nusing namespace std;\n\nclass Point {\n    public:\n    double x, y;\n\n    Point(double x = 0, double y = 0): x(x), y(y) {}\n\n    Point operator + (Point p) { return Point(x+p.x, y+p.y); }\n    Point operator - (Point p) { return Point(x-p.x, y-p.y); }\n    Point operator * (double a) { return Point(a*x, a*y); }\n    Point operator / (double a) { return Point(x/a, y/a); }\n\n    double abs() {return sqrt(norm()); }\n    double norm() {return x*x + y*y; }\n};\n\nclass Circle {\n    public:\n    double r;\n    Point c;\n\n    Circle(double r = 0, Point c = Point()): r(r) {}\n};\n\nint main(){\n    #if 0\n    std::ifstream in(\"input.txt\");\n    std::cin.rdbuf(in.rdbuf());\n    #endif\n\n    Circle c1, c2;\n    cin >> c1.c.x >> c1.c.y >> c1.r;\n    cin >> c2.c.x >> c2.c.y >> c2.r;\n\n    double d = ( c1.c - c2.c ).abs();\n    double r1 = c1.r;\n    double r2 = c2.r;\n    if ( r1 < r2 ) swap(r1,r2);\n\n    if ( d > r1 + r2 ) cout << 4 << endl;\n    else if ( d == r1 + r2 ) cout << 3 << endl;\n    else if ( d  > r1 - r2 ) cout << 2 << endl;\n    else if ( d == r1 - r2 ) cout << 1 << endl;\n    else cout << 0 << endl;\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <fstream>\n#include <string>\n#include <sstream>\n#include <cstdlib>\n\n\n#include <stdio.h>\n#include <math.h>\n\n#include <sys/time.h>\n\nint main()\n{\n  int c1x, c1y, c1r;\n  int c2x, c2y, c2r;\n\n  std::cin >> c1x >> c1y >> c1r;\n  std::cin >> c2x >> c2y >> c2r;\n\n  //std::cout << c1x << c1y << c1r << std::endl << c2x << c2y << c2r;\n\n  double d;\n\n  d = sqrt( (c1x-c2x) * (c1x-c2x) + (c1y-c2y) * (c1y-c2y) );\n\n  //std::cout << c1x << c1y << c1r << std::endl << c2x << c2y << c2r << std::endl << d;\n\n  if( d > (c1r+c2r) )\n    std::cout << \"4\";\n\n  if( fabs(c1r+c2r-d) <= 0.000000001 )\n    std::cout << \"3\";\n\n  if( fabs(c1r-c2r) < d && d < (c1r+c2r) )\n    std::cout << \"2\";\n\n  if( fabs( d - fabs(c1r-c2r) ) <= 0.000000001 )\n  std::cout << \"1\";\n\n  if( d < fabs(c1r-c2r) )\n    std::cout << \"0\";\n\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <algorithm>\nusing namespace std;\nconst double EPS = 1e-9;\n\nbool eq(double a, double b) {\n\treturn abs(a - b) < EPS;\n}\n\nint main(void) {\n\tint x[2], y[2], r[2];\n\tfor (int i = 0; i < 2; i++) cin >> x[i] >> y[i] >> r[i];\n\tdouble d = sqrt(pow(x[1] - x[0], 2) + pow(y[1] - y[0], 2));\n\tif (d > r[0] + r[1]) cout << 4 << endl;\n\telse if(eq(d, r[0] + r[1])) cout << 3 << endl;\n\telse {\n\t\tint r_small = min(r[0], r[1]);\n\t\tint r_large = max(r[0], r[1]);\n\t\tif (eq(r_small + d, r_large)) cout << 1 << endl;\n\t\telse if (r_small + d > r_large) cout << 2 << endl;\n\t\telse cout << 0 << endl;\n\t}\n}\n\n// r0 + r1 > d ==> r0 - d\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <vector>\n#include <utility>\n#define EPS 1e-10\nusing namespace std;\ntypedef long long ll;\nstruct Point{\n\tdouble x,y;\n\tPoint(double x = 0.0,double y = 0.0): x(x),y(y) {}\n\tPoint operator + (Point p){\n\t\treturn Point(x + p.x,y + p.y);\n\t}\n\tPoint operator - (Point p){\n\t\treturn Point(x - p.x,y - p.y);\n\t}\n\tPoint operator * (double lambda){\n\t\treturn Point(x * lambda,y * lambda);\n\t}\n\tPoint operator / (double lambda){\n\t\treturn Point(x / lambda,y / lambda);\n\t}\n\tdouble norm(){\n\t\treturn x * x + y * y;\n\t}\n\tdouble abs_(){\n\t\treturn sqrt(norm());\n\t}\n\tbool operator == (const Point &p)const\n\t{\n\t\treturn abs(x - p.x) < EPS && abs(y - p.y) < EPS;\n\t}\n\tbool operator < (const Point &p)const\n\t{\n\t\tif(abs(x - p.x) < EPS) return y - p.y < -EPS;\n\t\telse return x - p.x < EPS;\n\t}\n};\ntypedef Point Vector;\nstruct Segment{\n\tPoint p1,p2;\n\tSegment(Point p1 = Point(),Point p2 = Point()): p1(p1),p2(p2) {}\n};\ntypedef Segment Line;\nstruct Circle{\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(),double r = 0.0): c(c),r(r) {}\n};\ntypedef vector<Point> Polygon;\nint coTanNum(Circle a,Circle b){\n\tif(a.r < b.r) swap(a,b);\n\tdouble d = (a.c - b.c).abs_(),rdif = a.r - b.r,rsum = a.r + b.r;\n\tif(d < rdif - EPS) return 0;\n\tif(abs(d - rdif) < EPS) return 1;\n\tif(d < rsum - EPS) return 2;\n\tif(abs(d - rsum) < EPS) return 3;\n\treturn 4;\n}\nCircle a,b;\nint main(){\n\tscanf(\"%lf%lf%lf%lf%lf%lf\",&a.c.x,&a.c.y,&a.r,&b.c.x,&b.c.y,&b.r);\n\tprintf(\"%d\\n\",coTanNum(a,b));\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n#define fi first\n#define se second\n#define mp make_pair\n#define pb push_back\n#define rep(i, a, b) for(int i = (a); i < (b); ++i)\n#define per(i, a, b) for(int i = (b) - 1; i >= (a); --i)\n#define sz(a) (int)a.size()\n#define de(c) cout << #c << \" = \" << c << endl\n#define dd(c) cout << #c << \" = \" << c << \" \"\n#define all(a) a.begin(), a.end()\n#define pw(x) (1ll<<(x))\n#define endl \"\\n\"\ntypedef long long ll;\ntypedef double db;\ntypedef pair<int, int> pii;\ntypedef vector<int> vi;\n\ntypedef db T;\nconst db eps = 1e-9 , pi = acosl(-1.);\nint sgn(T x){return (x>eps)-(x<-eps);}\nstruct P{\n  T x,y; P(){} P(T x,T y):x(x),y(y){}\n  P operator - (const P&b) const {return P(x-b.x,y-b.y);}\n  P operator + (const P&b) const {return P(x+b.x,y+b.y);}\n  T operator * (const P&b) const {return x*b.x+y*b.y;}\n  T operator / (const P&b) const {return x*b.y-y*b.x;}\n  P operator * (const T&k) const {return P(x*k,y*k);}\n  P operator / (const T&k) const {return P(x/k,y/k);}\n\tbool operator < (const P&b) const {return sgn(x-b.x)?x<b.x:y<b.y;}\n\tbool operator == (const P&b) const{return !sgn(x-b.x)&&!sgn(y-b.y);}\n\tP rot90(){return P(-y,x);}\n};\nT norm(P a){return a*a;}\nT abs(P a) {return sqrtl(norm(a));}\nP proj(P p,P a,P b){return (b-a)*((p-a)*(b-a)/norm(b-a))+a;}\nP reflect(P p,P a,P b){return proj(p,a,b)*2-p;}\nT cross(P o,P a,P b){return (a-o)/(b-o);}\nint crossOp(P o,P a,P b){return sgn(cross(o,a,b));}\nbool onPS(P p,P s,P t){return sgn((t-s)/(p-s))==0&&sgn((p-s)*(p-t))<=0;}\nstruct L{ P s,t;L(){} L(P s,P t):s(s),t(t){}};\nP insLL(L a,L b){ // line x line\n\tP s = a.s - b.s , v = a.t - a.s , w = b.t - b.s;\n\tdb k1 = s / w , k2 = w / v;\n\tif(sgn(k2) == 0) return abs(b.s - a.s) < abs(b.t - a.s) ? b.s : b.t;\n\treturn a.s + v * (k1 / k2);\n}\nbool isSS(L a,L b){ // seg x seg , replace x->y to accelerate\n\tT c1=(a.t-a.s)/(b.s-a.s),c2=(a.t-a.s)/(b.t-a.s);\n\tT c3=(b.t-b.s)/(a.s-b.s),c4=(b.t-b.s)/(a.t-b.s);\n\treturn sgn(c1) * sgn(c2) <= 0 && sgn(c3) * sgn(c4) <= 0 &&\n\t\tsgn(max(a.s.x,a.t.x) - min(b.s.x,b.t.x)) >= 0 &&\n\t\tsgn(max(b.s.x,b.t.x) - min(a.s.x,a.t.x)) >= 0 &&\n\t\tsgn(max(a.s.y,a.t.y) - min(b.s.y,b.t.y)) >= 0 &&\n\t\tsgn(max(b.s.y,b.t.y) - min(a.s.y,a.t.y)) >= 0;\n}\ndb disPL(P p,L a){return fabs((a.t-a.s)/(p-a.s)) / abs(a.t-a.s);}\ndb disPS(P p,L a){ // p x seg dis\n\tif(sgn((a.t-a.s)*(p-a.s)) == -1) return abs(p-a.s);\n\tif(sgn((a.s-a.t)*(p-a.t)) == -1) return abs(p-a.t);\n\treturn disPL(p,a);\n}\ndb disSS(L a,L b){ // seg x seg dis\n\tif(isSS(a,b)) return 0;\n\treturn min(min(disPS(a.s,b),disPS(a.t,b)),min(disPS(b.s,a),disPS(b.t,a)));\n}\ntypedef vector<P> polygon;\npolygon convex(polygon A){ // counter-clockwise , < : <=180 , <= : <180\n  int n=sz(A),m=0;\n  polygon B;B.resize(n<<1);\n  sort(all(A));\n  rep(i,0,n){\n    while(m > 1 && sgn((B[m-1]-B[m-2])/(A[i]-B[m-2]))<0) --m;\n    B[m++]=A[i];\n  }\n  int k = m;\n  per(i,0,n-1){\n    while(m > k && sgn((B[m-1]-B[m-2])/(A[i]-B[m-2]))<0) --m;\n    B[m++]=A[i];\n  }\n  B.resize(m);\n  if(sz(B) > 1) B.pop_back();\n  return B;\n}\nT area(polygon A) { // multiple 2 with integer type\n\tT res=0;\n\trep(i,0,sz(A)) res+=A[i]/(A[(i+1)%sz(A)]);\n\treturn fabs(res) / 2;\n}\nbool isconvex(polygon A){ // counter-clockwise\n\tbool ok=1;int n=sz(A);\n\trep(i,0,2) A.pb(A[i]);\n\trep(i,0,n) ok&=((A[i+1]-A[i])/(A[i+2]-A[i]))>=0;\n\treturn ok;\n}\nint inPpolygon(P p,polygon A){ // -1 : on , 0 : out , 1 : in\n\tint res=0;\n\trep(i,0,sz(A)){\n\t\tP u=A[i],v=A[(i+1)%sz(A)];\n\t\tif(onPS(p,u,v)) return -1;\n\t\tT cross = sgn((v-u)/(p-u)) , d1 = sgn(u.y-p.y) , d2 = sgn(v.y-p.y);\n\t\tif(cross > 0 && d1 <= 0 && d2 > 0) ++res;\n\t\tif(cross < 0 && d2 <= 0 && d1 > 0) --res;\n\t}\n\treturn res != 0;\n}\nT diameter(polygon A) { // longest distance\n  int n=sz(A);if(n <= 1) return 0;\n  int l=0,r=0;rep(i,1,n) (A[i]<A[l])&&(l=i),(A[r]<A[i])&&(r=i);\n  db res=abs(A[l]-A[r]);int i=l,j=r;\n  do (++((A[(i+1)%n]-A[i])/(A[(j+1)%n]-A[j])>=0?j:i))%=n,\n    res=max(res,abs(A[i]-A[j]));\n  while(i!=l||j!=r);\n  return res;\n}\npolygon convexCut(polygon A,P s,P t){ // counter-clockwise , left hand of st\n\tint n=sz(A);\n\tpolygon B;\n\trep(i,0,n){\n\t\tP u=A[i],v=A[(i+1)%n];\n\t\tint d1 = sgn((t-s)/(u-s)) , d2 = sgn((t-s)/(v-s));\n\t\tif(d1 >= 0) B.pb(u);\n\t\tif(d1 * d2 < 0) B.pb(insLL(L(u,v),L(s,t)));\n\t}\n\treturn B;\n}\nnamespace NearestPoints{\n  T solve(int l,int r,vector<P>&p){\n    if(l == r) return 1e100;\n    int m=(l+r)>>1;\n    T Xm = p[m].x , lim = min(solve(l,m,p) , solve(m+1,r,p));\n    inplace_merge(p.begin()+l,p.begin()+m+1,p.begin()+r+1,[&](P a,P b){return a.y<b.y;});\n    vector<P> V;\n    rep(i,l,r+1) if(fabs(p[i].x - Xm) <= lim) V.pb(p[i]);\n    rep(i,0,sz(V)) rep(j,i+1,sz(V)){\n      if(fabs(V[j].y - V[i].y) >= lim) break;\n      T dis = abs(V[i]-V[j]);\n      lim = min(lim,dis);\n    }\n    return lim;\n  }\n  T solve(vector<P> A){\n    sort(all(A),[&](P a,P b){return a.x<b.x;});\n    return solve(0,sz(A)-1,A);\n  }\n}\nstruct C{\n\tP o;T r;C(){} C(P o,T r):o(o),r(r){}\n\tbool operator == (const C&b) const {return o==b.o&&sgn(r-b.r)==0;}\n};\nint relCC(C A,C B){\n\tT dis = abs(A.o - B.o);\n\tif(sgn(dis - (A.r + B.r)) == 1) return 4;\n\tif(sgn(dis - (A.r + B.r)) == 0) return 3;\n\tif(sgn(dis - fabs(A.r - B.r)) == 1) return 2;\n\tif(sgn(dis - fabs(A.r - B.r)) == 0) return 1;\n\treturn 0;\n}\n\nC o[2];\nP p[2];\ndb r[2];\n\nint main() {\n\tstd::ios::sync_with_stdio(0);\n\tstd::cin.tie(0);\n\t//\tfreopen(\"a.in\", \"r\", stdin);\n\t//\tfreopen(\"a.out\", \"w\", stdout);\n\tcout << setiosflags(ios::fixed);\n\tcout << setprecision(10);\n\trep(i, 0, 2) {\n\t\tcin >> p[i].x >> p[i].y >> r[i];\n\t\to[i] = C(p[i], r[i]);\n\t}\n\tcout << relCC(o[0], o[1]) << endl;\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define op operator\nstruct poi {\n\tint x, y;\n\tvoid r() { cin >> x >> y; }\n\tpoi op -(poi p) {\n\t\treturn {x - p.x, y - p.y};\n\t}\n\tint len2() { return x * x + y * y; }\n};\nint sqr(int x) { return x * x; }\n\nint solve(poi o1, int r1, poi o2, int r2) {\n\tint d = (o1 - o2).len2();\n\tif(d > sqr(r1 + r2)) return 4;\n\tif(d == sqr(r1 + r2)) return 3;\n\tif(d > sqr(r1 - r2)) return 2;\n\tif(d == sqr(r1 - r2)) return 1;\n\treturn 0;\n}\n\nint main() {\n\tpoi o1, o2; int r1, r2;\n\to1.r(); cin >> r1;\n\to2.r(); cin >> r2;\n\tcout << solve(o1, r1, o2, r2) << '\\n';\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cmath>\nusing namespace std;\n\nint main(){\n    int x1, y1, r1, x2, y2, r2;\n    cin >> x1 >> y1 >> r1 >> x2 >> y2 >> r2;\n\n    int dist = (x1-x2)*(x1-x2) + (y1-y2)*(y1-y2);\n    int r = (r1+r2)*(r1+r2);\n    int rd = (max(r1,r2)-min(r1,r2))*(max(r1,r2)-min(r1,r2));\n\n    if(dist > r)    cout << 4 << endl;\n    else if(dist == r)  cout << 3 << endl;\n    else if(dist == rd) cout << 1 << endl;\n    else if(dist < rd)  cout << 0 << endl;\n    else                cout << 2 << endl;\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nconst int MAXN = 50000 + 10;\nconst double pi = acos(-1.0);\nconst double inf = 1e100;\nconst double eps = 1e-12;\n\ntypedef struct point vec; //向量vec\nstruct point { //点的基本数据结构\n    double x, y;\n    point(double _x = 0, double _y = 0)\n        : x(_x)\n        , y(_y)\n    {\n    }\n    point operator*(const point& i_T) const\n    {\n        return point(x * i_T.x, y * i_T.y);\n    }\n    point operator*(double u) const\n    {\n        return point(x * u, y * u);\n    }\n    bool operator==(const point& i_T) const\n    {\n        return x == i_T.x && y == i_T.y;\n    }\n    point operator/(double u) const\n    {\n        return point(x / u, y / u);\n    }\n    point operator+(const point& i_T)\n    {\n        return point(x + i_T.x, y + i_T.y);\n    }\n    point operator-(const point& i_T)\n    {\n        return point(x - i_T.x, y - i_T.y);\n    }\n    friend bool operator<(point a, point b)\n    {\n        return fabs(a.x - b.x) < eps ? a.y < b.y : a.x < b.x;\n    }\n    friend ostream& operator<<(ostream& out, point& a)\n    {\n        //cout << a.x << ' ' << a.y;\n        printf(\"%.8f %.8f\", a.x + eps, a.y + eps);\n        return out;\n    }\n    friend istream& operator>>(istream& in, point& a)\n    {\n        in >> a.x >> a.y;\n        return in;\n    }\n};\nstruct cirles {\n    point o;\n    double r;\n    cirles(point _o = point(), double _r = 0.0)\n        : r(_r)\n        , o(_o)\n    {\n    }\n    point Point(double t) //圆上任意一点\n    {\n        return point(o.x + r * cos(t), o.y + r * sin(t));\n    }\n    friend istream& operator>>(istream& in, cirles& a)\n    {\n        in >> a.o >> a.r;\n        return in;\n    }\n    friend ostream& operator<<(ostream& out, cirles& a)\n    {\n        out << a.o << ' ' << a.r;\n        return out;\n    }\n};\ndouble changdu(vec a) //向量长度\n{\n    return sqrt(a.x * a.x + a.y * a.y);\n}\nvec xiangliang_xuanzhuan(vec a, double pi) //将向量按照起点旋转逆时针pi,\n{\n    double x, y;\n    x = cos(pi) * a.x - sin(pi) * a.y;\n    y = sin(pi) * a.x + cos(pi) * a.y;\n    return vec(x, y);\n}\nint dayu_dengyu(double x, double y)\n{\n    if (fabs(x - y) < eps || x > y)\n        return 1;\n    return 0;\n}\nint bijiao(double x, double y)\n{\n    if (fabs(x - y) < eps)\n        return 0;\n    if (x > y)\n        return 1;\n    return -1;\n}\nint zhengfu(double d) //判断正负\n{\n    if (fabs(d) < eps)\n        return 0;\n    if (d > 0)\n        return 1;\n    return -1;\n}\npoint u[10], v[10];\nint yuanyuan_gongqiexian(cirles a, cirles b)\n{\n    int cnt = 0;\n    if (a.r < b.r) {\n        swap(a, b);\n        swap(u, v);\n    }\n    double l = changdu(a.o - b.o);\n    double rdiff = a.r - b.r;\n    double rsum = a.r + b.r;\n    if (zhengfu(l - rdiff) < 0)\n        return 0;\n    double base = atan2((b.o - a.o).y, (b.o - a.o).x);\n    if (zhengfu(l) == 0)\n        return -1;\n    if (zhengfu(l - rdiff) == 0) {\n        u[cnt] = v[cnt] = a.Point(base);\n        cnt++;\n        return 1;\n    }\n    double ang = acos((a.r - b.r) / l);\n    u[cnt] = a.Point(base + ang);\n    v[cnt] = b.Point(base + ang);\n    cnt++;\n    u[cnt] = a.Point(base - ang);\n    v[cnt] = b.Point(base - ang);\n    cnt++;\n    if (zhengfu(l - rsum) == 0) {\n        u[cnt] = v[cnt] = a.Point(base);\n        cnt++;\n    } else if (zhengfu(l - rsum) > 0) {\n        double ang = acos((a.r + b.r) / l);\n        u[cnt] = a.Point(base + ang);\n        v[cnt] = b.Point(pi + base + ang);\n        cnt++;\n        u[cnt] = a.Point(base - ang);\n        v[cnt] = b.Point(pi + base - ang);\n        cnt++;\n    }\n    return cnt;\n}\nint main()\n{\n    //freopen(\"txt.txt\", \"w\", stdout);\n    cirles a, b;\n    cin >> a >> b;\n    int cnt = yuanyuan_gongqiexian(a, b);\n    /*if (cnt == 0)\n        return 0;\n    sort(u, u + cnt);\n    for (int i = 0; i < cnt; i++)\n        cout << u[i] << endl;*/\n    cout<<cnt<<endl;\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nusing ld = long double;\nconst ld eps = 1e-8, pi = acos(-1.0);\n\nbool eq(ld a, ld b) {\n\treturn abs(a - b) < eps;\n}\n\nusing Point = complex<ld>;\nclass Line {\npublic:\n\tPoint a, b;\n};\nclass Circle {\npublic:\n\tPoint p;\n\tld r;\n};\n\nint nct(Circle c1, Circle c2) {\n\tint d = abs(c1.p - c2.p);\n\tld r1 = max(c1.r, c2.r), r2 = min(c1.r, c2.r);\n\tif (d > r1 + r2 + eps) return 4;\n\tif (eq(d, r1 + r2)) return 3;\n\tif (d > r1 - r2 + eps) return 2;\n\tif (eq(d, r1 - r2)) return 1;\n\treturn 0;\n}\n\nint main()\n{\n\tld x1, x2, y1, y2, r1, r2;\n\tcin >> x1 >> y1 >> r1 >> x2 >> y2 >> r2;\n\tCircle c1 = { (Point) { x1, y1 }, r1 };\n\tCircle c2 = { (Point) { x2, y2 }, r2 };\n\tcout << nct(c1, c2) << endl;\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n \nusing ld = long double;\nconst ld eps = 1e-8, pi = acos(-1.0);\n \nbool eq(ld a, ld b) {\n    return abs(a - b) < eps;\n}\n \nusing Point = complex<ld>;\nclass Line {\npublic:\n    Point a, b;\n};\nclass Circle {\npublic:\n    Point p;\n    ld r;\n};\n \nint nct(Circle c1, Circle c2) {\n    ld d = abs(c1.p - c2.p);\n    ld r1 = max(c1.r, c2.r), r2 = min(c1.r, c2.r);\n    if (d > r1 + r2 + eps) return 4;\n    if (eq(d, r1 + r2)) return 3;\n    if (d > r1 - r2 + eps) return 2;\n    if (eq(d, r1 - r2)) return 1;\n    return 0;\n}\n \nint main()\n{\n    ld x1, x2, y1, y2, r1, r2;\n    cin >> x1 >> y1 >> r1 >> x2 >> y2 >> r2;\n    Circle c1 = { (Point) { x1, y1 }, r1 };\n    Circle c2 = { (Point) { x2, y2 }, r2 };\n    cout << nct(c1, c2) << endl;\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std ;\n\n#define pb(n) push_back(n)\n#define fi first\n#define se second\n#define all(r) begin(r),end(r)\n#define vmax(ary) *max_element(all(ary))\n#define vmin(ary) *min_element(all(ary))\n#define debug(x) cout<<#x<<\": \"<<x<<endl\n#define fcout(n) cout<<fixed<<setprecision((n))\n#define scout(n) cout<<setw(n)\n#define vary(type,name,size,init) vector< type> name(size,init)\n#define vvl(v,w,h,init) vector<vector<ll>> v(w,vector<ll>(h,init))\n#define mp(a,b) make_pair(a,b)\n\n#define rep(i,n) for(int i = 0; i < (int)(n);++i)\n#define REP(i,a,b) for(int i = (a);i < (int)(b);++i)\n#define repi(it,array) for(auto it = array.begin(),end = array.end(); it != end;++it)\n#define repa(n,array) for(auto &n :(array))\n\nusing ll = long long;\nusing pii = pair<int,int> ;\nusing pll = pair<ll,ll> ;\n\nconstexpr ll inf = ((1<<30)-1)*2+1 ;\nconst double EPS = 1e-8;\nconst double INF = 1e12;\ntypedef complex<double> P;//????´???°????????¢?????????????????¨?§£???\nnamespace std {\n  bool operator < (const P& a, const P& b) {//x????????????\n    return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n  }\n  bool sorty(const P& a, const P& b) {//y????????????\n    return imag(a) != imag(b) ? imag(a) < imag(b) : real(a) < real(b);\n  }\n  bool same(const P& a, const P& b) {\n    P p = a - b;\n    if(abs(real(p)) < EPS && abs(imag(p)) < EPS){\n      return true;\n    }\n    return false;\n  }\n}\ndouble cross(const P& a, const P& b) {//??????\n  return imag(conj(a)*b);\n}\ndouble dot(const P& a, const P& b) {//??????\n  return real(conj(a)*b);\n}\n\nstruct L : public vector<P> {//??´???\n  L(){};\n  L(const P &a, const P &b) {\n    push_back(a); push_back(b);\n  }\n};\n\ntypedef vector<P> G;\n\nstruct C {//???\n  P p; double r;\n  C(){};\n  C(const P &p, double r) : p(p), r(r) { }\n};\nint ccw(P a, P b, P c) {//3????????????????????§????????§??????????????????\n  b -= a; c -= a;\n  if (cross(b, c) > 0)   return +1;       // counter clockwise\n  if (cross(b, c) < 0)   return -1;       // clockwise\n  if (dot(b, c) < 0)     return +2;       // c--a--b on line\n  if (norm(b) < norm(c)) return -2;       // a--b--c on line\n  return 0; // a--c--b on line\n}\nint linejudge(const L &ab,const L &cd){ //2??´???????????¢???\n  P a = ab[1] - ab[0],b = cd[1] - cd[0];\n  if(abs(cross(a,b)) < EPS){ // Parallel\n    return 2;\n  }\n  else if(abs(dot(a,b)) < EPS){ //Orthogonal\n    return 1;\n  }\n  return 0;\n}\n// L:line,S:segment,P:point\nbool intersectLL(const L &l, const L &m) {\n  return abs(cross(l[1]-l[0], m[1]-m[0])) > EPS || // non-parallel\n    abs(cross(l[1]-l[0], m[0]-l[0])) < EPS;   // same line\n}\nbool intersectLS(const L &l, const L &s) {\n  return cross(l[1]-l[0], s[0]-l[0])*       // s[0] is left of l\n    cross(l[1]-l[0], s[1]-l[0]) < EPS; // s[1] is right of l\n}\nbool intersectLP(const L &l, const P &p) {\n  return abs(cross(l[1]-p, l[0]-p)) < EPS;\n}\nbool intersectSS(const L &s, const L &t) {\n  return ccw(s[0],s[1],t[0])*ccw(s[0],s[1],t[1]) <= 0 &&\n    ccw(t[0],t[1],s[0])*ccw(t[0],t[1],s[1]) <= 0;\n}\nbool intersectSP(const L &s, const P &p) {\n  return abs(s[0]-p)+abs(s[1]-p)-abs(s[1]-s[0]) < EPS; // triangle inequality\n}\n// L & P intersection\nP projection(const L &l, const P &p) {\n  double t = dot(p-l[0], l[0]-l[1]) / norm(l[0]-l[1]);\n  return l[0] + t*(l[0]-l[1]);\n}\n// L????????????P???????°????\nP reflection(const L &l, const P &p) {\n  return p + 2.0 * (projection(l, p) - p);\n}\ndouble distanceLP(const L &l, const P &p) {\n  return abs(p - projection(l, p));\n}\ndouble distanceLL(const L &l, const L &m) {\n  return intersectLL(l, m) ? 0 : distanceLP(l, m[0]);\n}\ndouble distanceLS(const L &l, const L &s) {\n  if (intersectLS(l, s)) return 0;\n  return min(distanceLP(l, s[0]), distanceLP(l, s[1]));\n}\ndouble distanceSP(const L &s, const P &p) {\n  const P r = projection(s, p);\n  if (intersectSP(s, r)) return abs(r - p);\n  return min(abs(s[0] - p), abs(s[1] - p));\n}\ndouble distanceSS(const L &s, const L &t) {\n  if (intersectSS(s, t)) return 0;\n  return min(min(distanceSP(s, t[0]), distanceSP(s, t[1])), min(distanceSP(t, s[0]), distanceSP(t, s[1])));\n}\ndouble distancePP(const P &p,const P &q){\n  return abs(p - q) ;\n}\nP crosspoint(const L &l, const L &m) {\n  double A = cross(l[1] - l[0], m[1] - m[0]);\n  double B = cross(l[1] - l[0], l[1] - m[0]);\n  if (abs(A) < EPS && abs(B) < EPS) return m[0]; // same line\n  if (abs(A) < EPS) assert(false); // !!!PRECONDITION NOT SATISFIED!!!\n  return m[0] + B / A * (m[1] - m[0]);\n}\nP verticalvector(const P &a,const P &b){//2???????????????????????????????????????\n  if(a.real() == b.real()){\n    return {1.0,0};\n  }\n  if(a.imag() == b.imag()){\n    return {0,1.0};\n  }\n  P p = a - b;\n  P res = {-p.imag(),p.real()};\n  return res / abs(p);\n}\npair<P,P> crosspointCircle(const C &a,const C &b){\n  P m = (a.p+b.p)/2.0;\n  P vv = verticalvector(a.p,b.p);\n  double u = sqrt( a.r * a.r - norm(a.p - b.p) / 4.0);\n  P A = m + u * vv,B = m - u * vv;\n  return mp(A,B);\n}\n// a < b : -1, a > b : 1, a == b : 0\ninline int sgn(double a, double b = 0) { return a < b - EPS ? -1 : a > b + EPS ? 1 : 0; }\nint circle_judge(const C &a,const C &b){ // return tangent count\n  double d = distancePP(a.p,b.p);\n  double e = a.r,f = b.r;\n  if(sgn(d,e+f) == 1) return 4;\n  if(sgn(d,e+f) == 0) return 3;\n  if(sgn(d,abs(e-f)) == -1) return 0;\n  if(sgn(d,abs(e-f)) == 0 ) return 1;\n  return 2;\n}\n\nint main(){\n  cin.tie(0);\n  ios::sync_with_stdio(false);\n  double x,y,r;\n  cin >> x >> y >> r;\n  C c1(P(x,y),r); \n  cin >> x >> y >> r;\n  C c2(P(x,y),r); \n  std::cout << circle_judge(c1,c2) << std::endl;\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <cmath>\n#include <complex>\n#include <iomanip>\n#include <iostream>\n#include <vector>\nusing namespace std;\n\nconst double EPS = 1e-8, PI = acos(-1);\n\ninline bool eq(double a, double b) {\n  return fabs(b - a) < EPS;\n}\n\nusing Point = complex<double>;\nistream &operator>>(istream &is, Point &p) {\n  double a, b;\n  is >> a >> b;\n  p = Point(a, b);\n  return is;\n}\nostream &operator<<(ostream &os, Point &p) {\n  os << fixed << setprecision(10) << p.real() << \" \" << p.imag();\n}\n\nnamespace std {\nbool operator<(const Point &a, const Point &b) {\n  return a.real() != b.real() ? a.real() < b.real() : a.imag() < b.imag();\n}\n} // namespace std\n\nPoint rotate(double theta, const Point &p) {\n  return Point(cos(theta) * p.real() - sin(theta) * p.imag(), sin(theta) * p.real() + cos(theta) * p.imag());\n}\n\ndouble cross(const Point &a, const Point &b) {\n  return a.real() * b.imag() - a.imag() * b.real();\n}\n\ndouble dot(const Point &a, const Point &b) {\n  return a.real() * b.real() + a.imag() * b.imag();\n}\n\ndouble RadianToDegree(double r) {\n  return (r * 180.0 / PI);\n}\n\ndouble DegreeToRadian(double d) {\n  return (d * PI / 180.0);\n}\n\ndouble GetAngle(const Point &a, const Point &b, const Point &c) {\n  const Point v(b - a), w(c - b);\n  double alpha = atan2(v.imag(), v.real()), beta = atan2(w.imag(), w.real());\n  if (alpha > beta) swap(alpha, beta);\n  double theta = (beta - alpha);\n  return min(theta, 2 * acos(-1) - theta);\n}\n\nstruct Line {\n  Point a, b;\n\n  Line(){};\n  Line(Point a, Point b) : a(a), b(b){};\n\n  // Ax + By = C\n  Line(double A, double B, double C) {\n    if (eq(A, 0)) {\n      a = Point(0, C / B);\n      b = Point(1, C / B);\n    } else if (eq(B, 0)) {\n      a = Point(C / A, 0);\n      b = Point(C / A, 1);\n    } else {\n      a = Point(0, C / B);\n      b = Point(C / A, 0);\n    }\n  }\n\n  friend ostream &operator<<(ostream &os, Line &p) {\n    return os << p.a << \" to \" << p.b;\n  }\n\n  friend istream &operator>>(istream &is, Line &a) {\n    return is >> a.a >> a.b;\n  }\n};\n\nstruct Segment {\n  Point a, b;\n\n  Segment(){};\n  Segment(Point a, Point b) : a(a), b(b){};\n\n  friend ostream &operator<<(ostream &os, Segment &p) {\n    return os << p.a << \" to \" << p.b;\n  }\n\n  friend istream &operator>>(istream &is, Segment &a) {\n    return is >> a.a >> a.b;\n  }\n};\n\nstruct Circle {\n  Point p;\n  double r;\n\n  Circle(){};\n\n  Circle(Point p, double r) : p(p), r(r){};\n};\n\nusing Polygon = vector<Point>;\nusing Points = vector<Point>;\nusing Segments = vector<Segment>;\nusing Lines = vector<Line>;\nusing Circles = vector<Circle>;\nusing PointPoint = pair<Point, Point>;\n\nint ccw(const Point &a, Point b, Point c) {\n  b = b - a, c = c - a;\n  if (cross(b, c) > EPS) return +1;  // \"COUNTER_CLOCKWISE\"\n  if (cross(b, c) < -EPS) return -1; // \"CLOCKWISE\"\n  if (dot(b, c) < 0) return +2;      // \"ONLINE_BACK\"\n  if (norm(b) < norm(c)) return -2;  // \"ONLINE_FRONT\"\n  return 0;                          // \"ON_SEGMENT\"\n}\n\nbool Parallel(const Line &a, const Line &b) {\n  return abs(cross(a.b - a.a, b.b - b.a)) < EPS;\n}\n\nbool Orthogonal(const Line &a, const Line &b) {\n  return abs(dot(a.a - a.b, b.a - b.b)) < EPS;\n}\n\nPoint Projection(const Line &l, const Point &p) {\n  double t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n  return l.a + (l.a - l.b) * t;\n}\nPoint Projection(const Segment &l, const Point &p) {\n  double t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n  return l.a + (l.a - l.b) * t;\n}\n\nPoint Reflection(const Line &l, const Point &p) {\n  return p + (Projection(l, p) - p) * 2.0;\n}\n\ndouble Distance(const Point &a, const Point &b) {\n  return abs(a - b);\n}\n\ndouble Distance(const Line &l, const Point &p) {\n  return abs(p - Projection(l, p));\n}\n\nbool Intersect(const Line &l, const Line &m);\ndouble Distance(const Line &l, const Line &m) {\n  return Intersect(l, m) ? 0 : Distance(l, m.a);\n}\n\nbool Intersect(const Segment &s, const Point &p);\ndouble Distance(const Segment &s, const Point &p) {\n  Point r = Projection(s, p);\n  if (Intersect(s, r)) return abs(r - p);\n  return min(abs(s.a - p), abs(s.b - p));\n}\n\nbool Intersect(const Segment &s, const Segment &t);\ndouble Distance(const Segment &a, const Segment &b) {\n  if (Intersect(a, b)) return 0;\n  return min(min(Distance(a, b.a), Distance(a, b.b)), min(Distance(b, a.a), Distance(b, a.b)));\n}\n\nbool Intersect(const Line &l, const Segment &s);\ndouble Distance(const Line &l, const Segment &s) {\n  if (Intersect(l, s)) return 0;\n  return min(Distance(l, s.a), Distance(l, s.b));\n}\n\nbool Intersect(const Line &l, const Point &p) {\n  return abs(ccw(l.a, l.b, p)) != 1;\n}\n\nbool Intersect(const Line &l, const Line &m) {\n  return abs(cross(l.b - l.a, m.b - m.a)) > EPS || abs(cross(l.b - l.a, m.b - l.a)) < EPS;\n}\n\nbool Intersect(const Segment &s, const Point &p) {\n  return ccw(s.a, s.b, p) == 0;\n}\n\nbool Intersect(const Line &l, const Segment &s) {\n  return cross(l.b - l.a, s.a - l.a) * cross(l.b - l.a, s.b - l.a) < EPS;\n}\n\nbool Intersect(const Segment &s, const Segment &t) {\n  return ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 && ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0;\n}\n\ndouble Distance(const Line &l, const Point &p);\nbool Intersect(const Circle &c, const Line &l) {\n  return Distance(l, c.p) <= c.r + EPS;\n}\n\nbool Intersect(const Circle &c, const Point &p) {\n  return abs(abs(p - c.p) - c.r) < EPS;\n}\n\nint Intersect(const Circle &c, const Segment &l) {\n  if (norm(Projection(l, c.p) - c.p) - c.r * c.r > EPS) return 0;\n  const double d1 = abs(c.p - l.a), d2 = abs(c.p - l.b);\n  if (d1 < c.r + EPS && d2 < c.r + EPS) return 0;\n  if (d1 < c.r - EPS && d2 > c.r + EPS || d1 > c.r + EPS && d2 < c.r - EPS) return 1;\n  const Point h = Projection(l, c.p);\n  if (dot(l.a - h, l.b - h) < 0) return 2;\n  return 0;\n}\n\n// えーこれどうしよう\n// https://onlinejudge.u-aizu.ac.jp/#/courses/library/4/CGL/7/CGL_7_A\n// e- shaberitakunainode\n// 4 : c1, c2 が離れている\n// 3 : c1, c2 が外接する\n// 2 : c1, c2 が交わる\n// 1 : c1, c2 が内接する\n// 0 : 片方がもう片方を内包する\n// en no sessenn no houteisiki wo tokeba yosa sou desuga\n// hutuu ni yari masu\nint Intersect(Circle c1, Circle c2) {\n  if (c1.r < c2.r) swap(c1, c2);\n  double d = Distance(c1.p, c2.p);\n  // cerr << \"dist : \" << d << endl;\n  if (c1.r + c2.r < d) return 4;\n  if (eq(c1.r + c2.r, d)) return 3;\n  if (c1.r - c2.r < d) return 2;\n  if (eq(c1.r - c2.r, d)) return 1;\n  return 0;\n}\nint main() {\n  Circle c1, c2;\n  cin >> c1.p >> c1.r;\n  cin >> c2.p >> c2.r;\n  // cerr << c1.p << endl;\n  // cerr << c2.p << endl;\n  cout << Intersect(c1, c2) << endl;\n}\n\nPoint Crosspoint(const Line &l, const Line &m) {\n  double A = cross(l.b - l.a, m.b - m.a);\n  double B = cross(l.b - l.a, l.b - m.a);\n  if (abs(A) < EPS && abs(B) < EPS) return m.a;\n  return m.a + (m.b - m.a) * B / A;\n}\n\nPoint Crosspoint(const Segment &l, const Segment &m) {\n  double A = cross(l.b - l.a, m.b - m.a);\n  double B = cross(l.b - l.a, l.b - m.a);\n  if (abs(A) < EPS && abs(B) < EPS) return m.a;\n  return m.a + (m.b - m.a) * B / A;\n}\n\nPointPoint Crosspoint(const Circle &c, const Line l) {\n  Point hp = Projection(l, c.p), h = hp - c.p;\n  const double d2 = norm(h);\n  Point v = (l.b - l.a) * sqrt(c.r * c.r - d2) / abs(l.b - l.a);\n  return PointPoint(hp - v, hp + v);\n}\n\nPointPoint Crosspoint(const Circle &c, const Segment &l) {\n  Line aa = Line(l.a, l.b);\n  if (Intersect(c, l) == 2) return Crosspoint(c, aa);\n  PointPoint ret = Crosspoint(c, aa);\n  if (dot(l.a - ret.first, l.b - ret.first) < 0)\n    ret.second = ret.first;\n  else\n    ret.first = ret.second;\n  return ret;\n}\n\nPointPoint Crosspoint(const Circle &c1, const Circle &c2) {\n  double d = abs(c1.p - c2.p);\n  double a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n  double t = atan2(c2.p.imag() - c1.p.imag(), c2.p.real() - c1.p.real());\n  Point p1 = c1.p + Point(cos(t + a) * c1.r, sin(t + a) * c1.r);\n  Point p2 = c1.p + Point(cos(t - a) * c1.r, sin(t - a) * c1.r);\n  return (PointPoint(p1, p2));\n}\n\nbool IsConvex(const Polygon &p) {\n  int n = p.size();\n  for (int i = 0; i < n; i++) {\n    if (ccw(p[(i + n - 1) % n], p[i], p[(i + 1) % n]) == -1) return false;\n  }\n  return true;\n}\n\nPolygon Convex_Hull(Polygon &p) {\n  int n = p.size(), k = 0;\n  if (n >= 3) {\n    sort(p.begin(), p.end());\n    vector<Point> ch(2 * n);\n    for (int i = 0; i < n; ch[k++] = p[i++]) {\n      while (k >= 2 && cross(ch[k - 1] - ch[k - 2], p[i] - ch[k - 1]) < 0) --k;\n    }\n    for (int i = n - 2, t = k + 1; i >= 0; ch[k++] = p[i--]) {\n      while (k >= t && cross(ch[k - 1] - ch[k - 2], p[i] - ch[k - 1]) < 0) --k;\n    }\n    ch.resize(k - 1);\n    return ch;\n  } else {\n    return p;\n  }\n}\n\nenum { OUT, ON, IN };\nint Contains(const Polygon &Q, const Point &p) {\n  bool in = false;\n  for (int i = 0; i < Q.size(); i++) {\n    Point a = Q[i] - p, b = Q[(i + 1) % Q.size()] - p;\n    if (a.imag() > b.imag()) swap(a, b);\n    if (a.imag() <= 0 && 0 < b.imag() && cross(a, b) < 0) in = !in;\n    if (cross(a, b) == 0 && dot(a, b) <= 0) return ON;\n  }\n  return in ? IN : OUT;\n}\n\nbool MergeIfAble(Segment &s1, Segment s2) {\n  if (abs(cross(s1.b - s1.a, s2.b - s2.a)) > EPS) return false;\n  if (ccw(s1.a, s2.a, s1.b) == 1 || ccw(s1.a, s2.a, s1.b) == -1) return false;\n  if (ccw(s1.a, s1.b, s2.a) == -2 || ccw(s2.a, s2.b, s1.a) == -2) return false;\n  s1 = Segment(min(s1.a, s2.a), max(s1.b, s2.b));\n  return true;\n}\n\nvoid MergeSegments(vector<Segment> &segs) {\n  for (int i = 0; i < segs.size(); i++) {\n    if (segs[i].b < segs[i].a) swap(segs[i].a, segs[i].b);\n  }\n  for (int i = 0; i < segs.size(); i++) {\n    for (int j = i + 1; j < segs.size(); j++) {\n      if (MergeIfAble(segs[i], segs[j])) {\n        segs[j--] = segs.back(), segs.pop_back();\n      }\n    }\n  }\n}\n\nvector<vector<int>> SegmentArrangement(vector<Segment> &segs, vector<Point> &ps) {\n  vector<vector<int>> g;\n  const int N = (int)segs.size();\n  for (int i = 0; i < N; i++) {\n    ps.emplace_back(segs[i].a);\n    ps.emplace_back(segs[i].b);\n    for (int j = i + 1; j < N; j++) {\n      const Point p1 = segs[i].b - segs[i].a;\n      const Point p2 = segs[j].b - segs[j].a;\n      if (cross(p1, p2) == 0) continue;\n      if (Intersect(segs[i], segs[j])) {\n        ps.emplace_back(Crosspoint(segs[i], segs[j]));\n      }\n    }\n  }\n  sort(begin(ps), end(ps));\n  ps.erase(unique(begin(ps), end(ps)), end(ps));\n\n  const int M = (int)ps.size();\n  g.resize(M);\n  for (int i = 0; i < N; i++) {\n    vector<int> vec;\n    for (int j = 0; j < M; j++) {\n      if (Intersect(segs[i], ps[j])) {\n        vec.emplace_back(j);\n      }\n    }\n    for (int j = 1; j < vec.size(); j++) {\n      g[vec[j - 1]].push_back(vec[j]);\n      g[vec[j]].push_back(vec[j - 1]);\n    }\n  }\n  return (g);\n}\n\nPolygon ConvexCut(Polygon &U, Line l) {\n  Polygon ret;\n  for (int i = 0; i < U.size(); i++) {\n    Point now = U[i], nxt = U[(i + 1) % U.size()];\n    if (ccw(l.a, l.b, now) != -1) ret.push_back(now);\n    if (ccw(l.a, l.b, now) * ccw(l.a, l.b, nxt) < 0) {\n      ret.push_back(Crosspoint(Line(now, nxt), l));\n    }\n  }\n  return (ret);\n}\n\ndouble Area2(const Polygon &p) {\n  double A = 0;\n  for (int i = 0; i < p.size(); ++i) {\n    A += cross(p[i], p[(i + 1) % p.size()]);\n  }\n  return A;\n}\n\ndouble Convex_Diameter(Polygon &p) {\n  int n = p.size();\n  int is = 0, js = 0;\n  for (int i = 1; i < n; i++) {\n    if (p[i].imag() > p[is].imag()) is = i;\n    if (p[i].imag() < p[js].imag()) js = i;\n  }\n  double maxdis = norm(p[is] - p[js]);\n\n  int maxi, maxj, i, j;\n  i = maxi = is;\n  j = maxj = js;\n  do {\n    if (cross(p[(i + 1) % n] - p[i], p[(j + 1) % n] - p[j]) >= 0) {\n      j = (j + 1) % n;\n    } else {\n      i = (i + 1) % n;\n    }\n    if (norm(p[i] - p[j]) > maxdis) {\n      maxdis = norm(p[i] - p[j]);\n      maxi = i;\n      maxj = j;\n    }\n  } while (i != is || j != js);\n  return sqrt(maxdis);\n}\n\nPointPoint Closer(PointPoint a, PointPoint b) {\n  return Distance(a.first, a.second) < Distance(b.first, b.second) ? a : b;\n}\n\nPointPoint ClosestPairUtil(Points &ps, int l, int r) {\n  if (r - l == 2) {\n    return PointPoint(ps[l], ps[l + 1]);\n  }\n  if (r - l == 3) {\n    PointPoint a(ps[l], ps[l + 1]), b(ps[l + 1], ps[l + 2]), c(ps[l], ps[l + 2]);\n    return Closer(a, Closer(b, c));\n  }\n\n  int mid = (l + r) / 2;\n  Point midPoint = ps[mid];\n  PointPoint res = Closer(ClosestPairUtil(ps, l, mid), ClosestPairUtil(ps, mid, r));\n  double d = Distance(res.first, res.second);\n\n  Points pos[2];\n  for (int i = l; i < r; ++i) {\n    if (abs(ps[i].real() - midPoint.real()) < d) pos[i < mid].push_back(ps[i]);\n  }\n  for (const auto &i : pos[0]) {\n    for (const auto &j : pos[1]) {\n      if (Distance(i, j) < d) {\n        d = Distance(i, j);\n        res = PointPoint(i, j);\n      }\n    }\n  }\n\n  return res;\n}\n\nPointPoint ClosestPair(Points ps) {\n  if (ps.size() <= 1) exit(-1);\n  for (int i = 0; i < ps.size(); ++i) {\n    ps[i] = rotate(0.1, ps[i]);\n  }\n  sort(ps.begin(), ps.end());\n\n  if (ps.size() == 2) return PointPoint(ps[0], ps[1]);\n  PointPoint res = ClosestPairUtil(ps, 0, ps.size());\n  res.first = rotate(-0.1, res.first);\n  res.second = rotate(-0.1, res.second);\n  return res;\n}\n\n// int main() {}\n\n// Projection\n// verified https://onlinejudge.u-aizu.ac.jp/#/courses/library/4/CGL/1/CGL_1_A\n// int main() {\n//   Line l;\n//   cin >> l;\n//\n//   int q;\n//   cin >> q;\n//   while (q--) {\n//     Point p;\n//     cin >> p;\n//     Point ans = Projection(l, p);\n//     cout << ans << endl;\n//   }\n// }\n\n// Reflection\n// verified https://onlinejudge.u-aizu.ac.jp/#/courses/library/4/CGL/1/CGL_1_B\n// int main() {\n//   Line l;\n//   cin >> l;\n//\n//   int q;\n//   cin >> q;\n//   while (q--) {\n//     Point p;\n//     cin >> p;\n//     Point ans = Reflection(l, p);\n//     cout << ans << endl;\n//   }\n// }\n\n// ccw\n// verified https://onlinejudge.u-aizu.ac.jp/#/courses/library/4/CGL/1/CGL_1_C\n// int main() {\n//   const vector<string> ans{\"ONLINE_FRONT\", \"CLOCKWISE\", \"ON_SEGMENT\", \"COUNTER_CLOCKWISE\", \"ONLINE_BACK\"};\n//   Point p0, p1;\n//   cin >> p0 >> p1;\n//\n//   int q;\n//   cin >> q;\n//   while (q--) {\n//     Point p2;\n//     cin >> p2;\n//     cout << ans[ccw(p0, p1, p2) + 2] << endl;\n//   }\n// }\n\n// Parallel and Orthogonal\n// verified https://onlinejudge.u-aizu.ac.jp/#/courses/library/4/CGL/2/CGL_2_A\n// int main() {\n//   int n;\n//   cin >> n;\n//   while (n--) {\n//     Line a, b;\n//     cin >> a >> b;\n//     if (Parallel(a, b))\n//       puts(\"2\");\n//     else if (Orthogonal(a, b))\n//       puts(\"1\");\n//     else\n//       puts(\"0\");\n//   }\n// }\n\n// Intersect(S, S)\n// verified https://onlinejudge.u-aizu.ac.jp/#/courses/library/4/CGL/2/CGL_2_B\n// int main() {\n//   int q;\n//   cin >> q;\n//   while (q--) {\n//     Segment a, b;\n//     cin >> a >> b;\n//     cout << Intersect(a, b) << endl;\n//   }\n// }\n\n// Crosspoint(S, S)\n// verified https://onlinejudge.u-aizu.ac.jp/#/courses/library/4/CGL/2/CGL_2_C\n// int main() {\n//   int q;\n//   cin >> q;\n//   while (q--) {\n//     Segment a, b;\n//     cin >> a >> b;\n//     Point ans = Crosspoint(a, b);\n//     cout << ans << endl;\n//   }\n// }\n\n// Distance(S, S);\n// verified https://onlinejudge.u-aizu.ac.jp/#/courses/library/4/CGL/2/CGL_2_D\n// int main() {\n//   int q;\n//   cin >> q;\n//   while (q--) {\n//     Segment a, b;\n//     cin >> a >> b;\n//     cout << fixed << setprecision(10) << Distance(a, b) << endl;\n//   }\n// }\n\n// Area2\n// verified https://onlinejudge.u-aizu.ac.jp/#/courses/library/4/CGL/3/CGL_3_A\n// int main() {\n//   int n;\n//   cin >> n;\n//   Polygon p(n);\n//   for (auto &i : p) cin >> i;\n//\n//   cout << fixed << setprecision(1) << Area2(p) / 2.0 << endl;\n// }\n\n// IsConvex\n// verified https://onlinejudge.u-aizu.ac.jp/#/courses/library/4/CGL/3/CGL_3_B\n// int main() {\n//   int n;\n//   cin >> n;\n//   Polygon p(n);\n//   for (auto &i : p) cin >> i;\n//\n//   cout << IsConvex(p) << endl;\n// }\n\n// Contains\n// verified https://onlinejudge.u-aizu.ac.jp/#/courses/library/4/CGL/3/CGL_3_C\n// int main() {\n//   int n;\n//   cin >> n;\n//   Polygon p(n);\n//   for (auto &i : p) cin >> i;\n//\n//   int q;\n//   cin >> q;\n//   while (q--) {\n//     Point a;\n//     cin >> a;\n//\n//     cout << Contains(p, a) << endl;\n//   }\n// }\n\n// Convex_Hull\n// verified https://onlinejudge.u-aizu.ac.jp/#/courses/library/4/CGL/4/CGL_4_A\n// int main() {\n//   int n;\n//   cin >> n;\n//   Polygon p;\n//   for (int i = 0; i < n; ++i) {\n//     int a, b;\n//     cin >> a >> b;\n//     p.push_back(Point(a, b));\n//   }\n//\n//   p = Convex_Hull(p);\n//   cout << p.size() << endl;\n//\n//   // 最悪\n//   Point minp = p[0];\n//   int idx = 0;\n//   for (int i = 0; i < p.size(); ++i) {\n//     if (p[i].imag() < minp.imag() ? true : p[i].imag() == minp.imag() && p[i].real() < minp.real()) {\n//       minp = p[i];\n//       idx = i;\n//     }\n//   }\n//\n//   for (int i = 0; i < p.size(); ++i) {\n//     Point latte = p[(i + idx) % p.size()];\n//     cout << latte.real() << \" \" << latte.imag() << endl;\n//   }\n// }\n\n// Convex_Diameter\n// verified https://onlinejudge.u-aizu.ac.jp/#/courses/library/4/CGL/4/CGL_4_B\n// int main() {\n//   int n;\n//   cin >> n;\n//\n//   Polygon p(n);\n//   for (auto &i : p) cin >> i;\n//\n//   cout << fixed << setprecision(10) << Convex_Diameter(p) << endl;\n// }\n\n// ConvexCut\n// verified https://onlinejudge.u-aizu.ac.jp/#/courses/library/4/CGL/4/CGL_4_C\n// int main() {\n//   int n;\n//   cin >> n;\n//\n//   Polygon p(n);\n//   for (auto &i : p) cin >> i;\n//\n//   int q;\n//   cin >> q;\n//   while (q--) {\n//     Line l;\n//     cin >> l;\n//\n//     cout << fixed << setprecision(10) << Area2(ConvexCut(p, l)) / 2 << endl;\n//   }\n// }\n\n// ClosestPair\n// verified https://onlinejudge.u-aizu.ac.jp/#/courses/library/4/CGL/5/CGL_5_A\n// int main() {\n//   int n;\n//   cin >> n;\n//\n//   Points p(n);\n//   for (auto &i : p) cin >> i;\n//   sort(p.begin(), p.end());\n//   PointPoint pp = ClosestPair(p);\n//   cout << fixed << setprecision(10) << Distance(pp.first, pp.second) << endl;\n//   // cerr << pp.first << \" \" << pp.second << endl;\n// }\n\n// Intersect(C, C)\n// えーIntersect(C, C)がなかった\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n\n#define BLACK 0\n#define GRAY 1\n#define WHITE 2\n\nusing namespace std;\n\nvoid DFS(int);\n\nint ans = 0, color[100];\n//vector <int> color;                                                                                 \nvector< vector<int> > v;\n\nint main(){\n\n  int V, E, s, t, start;\n\n  cin >> V >> E;\n  cin >> s >> t;\n  start = s;\n\n  v.resize(V);\n\n  v[s].push_back(t);\n  for(int i=0; i<V-1; i++){\n    cin >> s >> t;\n    v[s].push_back(t);\n    color[s] = WHITE;\n    color[t] = WHITE;\n  }\n\n  DFS(start);\n\n  cout << ans << endl;\n\n  //cout << V << E << endl;                                                                           \n\n}\n\nvoid DFS(int u){\n  int a;\n\n  //  color[u] = GRAY; //colorをvector宣言した時segmentation fault                        \n  // color[u].push_back(GRAY);                                                                        \n  color[u] = GRAY;\n\n  for(int i = 0; i < v[u].size(); i++){\n    a = v[u][i];\n    if(color[a] == GRAY) ans = 1;\n    else if(color[a] == WHITE) DFS(a);\n  }\n  color[u] = BLACK;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n// type {{{\nusing ll = long long;\nusing ull = unsigned long long;\nusing ld = long double;\nusing P = pair<int,int>;\nusing vi = vector<int>;\nusing vll = vector<ll>;\nusing vvi = vector<vector<int>>;\nusing vvll = vector<vector<ll>>;\n// }}}\n// macro {{{\n// }}}\n// debug {{{\ntemplate<typename T>\nostream& operator<<(ostream& os, const vector<T>& v) {\n    os << \"[\";\n    for (int i=0; i<(((int)(v).size())); ++i) {\n        if (i) os << \", \";\n        os << v[i];\n    }\n    return os << \"]\";\n}\ntemplate<typename T, typename U>\nostream& operator<<(ostream& os, const pair<T, U>& p) {\n    return os << \"(\" << p.first << \" \" << p.second << \")\";\n}\n// }}}\n// chmax, chmin {{{\ntemplate<class T>\nbool chmax(T& a, const T& b) {\n    if (a < b) { a = b; return true; }\n    return false;\n}\ntemplate<class T>\nbool chmin(T& a, const T& b) {\n    if (b < a) { a = b; return true; }\n    return false;\n}\n// }}}\n// constants {{{\nconst ll MOD = 1e9+7;\nconst ld EPS = 1e-9;\n// }}}\nusing Real = double;\nconst Real PI = acos(-1);\nusing Point = complex<Real>;\nnamespace std {\n    bool operator<(const Point& a, const Point& b) {\n        if (a.real() == b.real()) return a.imag() < b.imag();\n        return a.real() < b.real();\n    }\n}\nstruct Line {\n    Point a, b;\n    Line() {}\n    Line(const Point& a, const Point& b) : a(a), b(b) {}\n    friend ostream& operator<<(ostream& os, Line& l) {\n        return os << \"[\" << l.a << \",\" << l.b << \"]\";\n    }\n};\nstruct Segment : Line {\n    Segment() = default;\n    Segment(const Point& a, const Point& b) : Line(a, b) {}\n};\ninline bool eq(Real a, Real b) { return abs(b - a) < EPS; }\nReal radian_to_degree(Real r) {\n    return r * 180.0 / PI;\n}\nReal degree_to_radian(Real d) {\n    return d * PI / 180.0;\n}\nPoint rotate(const Point &p, Real theta) {\n    return p * polar((Real)1.0, theta);\n}\nReal cross(const Point& a, const Point& b) {\n    return a.real() * b.imag() - a.imag() * b.real();\n}\nReal dot(const Point& a, const Point& b) {\n    return a.real() * b.real() + a.imag() * b.imag();\n}\nPoint projection(const Line& l, const Point& p) {\n    Real A = dot(l.b - l.a, p - l.a),\n         B = dot(l.a - l.b, p - l.b);\n    return (A * l.b + B * l.a) / (A + B);\n}\nbool parallel(const Line& l1, const Line& l2) {\n    return eq(cross(l1.a - l1.b, l2.a - l2.b), 0.0);\n}\nbool orthogonal(const Line& l1, const Line& l2) {\n    return eq(dot(l1.a - l1.b, l2.a - l2.b), 0.0);\n}\nconst int COUNTER_CLOCKWISE = 1,\n          CLOCKWISE = -1,\n          ONLINE_BACK = 2,\n          ONLINE_FRONT = -2,\n          ON_SEGMENT = 0;\nint ccw(const Point& a, Point b, Point c) {\n    b = b - a, c = c - a;\n    if (cross(b, c) > EPS) return COUNTER_CLOCKWISE;\n    if (cross(b, c) < -EPS) return CLOCKWISE;\n    if (dot(b, c) < 0) return ONLINE_BACK;\n    if (norm(b) < norm(c)) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\nbool intersected(const Line& l, const Point& p) {\n    return abs(ccw(l.a, l.b, p)) != 1;\n}\nbool intersected(const Segment& s, const Point& p) {\n    return ccw(s.a, s.b, p) == 0;\n}\nbool intersected(const Line& l, const Segment& s) {\n    return cross(l.b - l.a, s.a - l.a) * cross(l.b - l.a, s.b - l.a) < EPS;\n}\nbool intersected(const Segment& s1, const Segment& s2) {\n    return ccw(s1.a, s1.b, s2.a) * ccw(s1.a, s1.b, s2.b) <= 0 and\n           ccw(s2.a, s2.b, s1.a) * ccw(s2.a, s2.b, s1.b) <= 0;\n}\nReal distance(const Line& l, const Point& p) {\n    return abs(p - projection(l, p));\n}\nReal distance(const Segment& s, const Point& p) {\n    Point r = projection(s, p);\n    if (intersected(s, r)) return abs(r - p);\n    return min(abs(s.a - p), abs(s.b - p));\n}\nReal distance(const Line &l, const Segment &s) {\n    if (intersected(l, s)) return 0;\n    return min(distance(l, s.a), distance(l, s.b));\n}\nReal distance(const Segment& s1, const Segment& s2) {\n    if (intersected(s1, s2)) return 0.0;\n    return min({ distance(s1, s2.a), distance(s1, s2.b),\n                 distance(s2, s1.a), distance(s2, s1.b) });\n}\nPoint crosspoint(const Line& l1, const Line& l2) {\n    Real A = cross(l2.a - l1.a, l2.b - l1.a),\n         B = cross(l2.b - l1.b, l2.a - l1.b);\n    return (A * l1.b + B * l1.a) / (A + B);\n}\nstruct Circle {\n    Point p;\n    Real r;\n    Circle() {}\n    Circle(const Point& p, Real r) : p(p), r(r) {}\n};\nint intersected(Circle c1, Circle c2) {\n    if (c1.r < c2.r) swap(c1, c2);\n    Real d = abs(c1.p - c2.p);\n    if (c1.r + c2.r < d) return 4;\n    if (eq(c1.r + c2.r, d)) return 3;\n    if (c1.r - c2.r < d) return 2;\n    if (eq(c1.r - c2.r, d)) return 1;\n    return 0;\n}\npair<Point,Point> crosspoint(const Circle& c1, const Circle& c2) {\n    Real d = abs(c2.p - c1.p), t = arg(c2.p - c1.p);\n    Real a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n    return { c1.p + polar(c1.r, t + a),\n             c1.p + polar(c1.r, t - a) };\n}\nint main()\n{\n    double x1, y1, r1, x2, y2, r2;\n    cin >> x1 >> y1 >> r1 >> x2 >> y2 >> r2;\n    cout << intersected(\n                Circle(Point(x1, y1), r1),\n                Circle(Point(x2, y2), r2)) << endl;\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\nusing namespace std;\n\nint main() {\n    int c1x,c2x,c1y,c2y,c1r,c2r;\n    int d,r1,r2;\n\n    cin >> c1x >> c1y >> c1r;\n    cin >> c2x >> c2y >> c2r;\n\n    d = (c1x-c2x)*(c1x-c2x)+(c1y-c2y)*(c1y-c2y);\n    r1 = (c1r+c2r)*(c1r+c2r);\n    r2 = (c1r-c2r)*(c1r-c2r);\n\n    if(d > r1) cout << 4 << endl;\n    else if(d == r1) cout << 3 << endl;\n    else if(d < r1 && d > r2) cout << 2 << endl;\n    else if(d == r2) cout << 1 << endl;\n    else cout << 0 << endl;\n\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint intersections(double d, int r1, int r2) {\n    if (d > r1 + r2) { return 4; }\n    if (d == r1 + r2) { return 3; }\n    if (d > r2 - r1) { return 2; }\n    if (d == r2 - r1) { return 1; }\n    if (d < r2 - r1) { return 0; }\n    return -1;\n}\n\ndouble dist(double c1x, double c1y, double c2x, double c2y) {\n    return sqrt(pow((c2x - c1x), 2) + pow((c2y - c1y), 2));\n}\n\nint main()\n{\n    double c1x, c1y, c2x, c2y;\n    int  c1r, c2r;\n    cin >> c1x >> c1y>> c1r >> c2x >> c2y >> c2r;\n    double d = dist(c1x, c1y, c2x, c2y);\n    int ans = c1r < c2r ? intersections(d, c1r, c2r) : intersections(d, c2r, c1r);\n    cout << ans << '\\n';\n    return 0;\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <vector>\n#include <string>\n#include <utility>\n#include <set>\n#include <map>\n#include <cmath>\n#include <queue>\n#include <cstdio>\n#define rep(i,n) for(int i = 0; i < n; ++i)\n#define rep1(i,n) for(int i = 1; i <= n; ++i)\n#define F first\n#define S second\nusing namespace std;\ntemplate<class T>bool chmax(T &a, const T &b) { if(a < b){ a = b; return 1; } return 0; }\ntemplate<class T>bool chmin(T &a, const T &b) { if(a > b){ a = b; return 1; } return 0; }\nusing ll = long long;\nusing pi = pair<int,int>;\nconst double EPS = 1e-10;\nstruct Point {\n  double x;\n  double y;\n\n  Point() : x(0.0),y(0.0){} \n  Point(double _x,double _y) :x(_x),y(_y){}  \n  \n  Point operator+(const Point& other) const { return { x + other.x , y + other.y }; }\n  Point operator-(const Point& other) const { return { x - other.x , y - other.y }; }\n  bool operator==(const Point& other) const { return (abs(x - other.x) < EPS && abs(y - other.y) < EPS ); }\n  \n  double dot(const Point& other) const { return x * other.x + y * other.y; }\n  double cross(const Point& other) const { return x * other.y - y * other.x; }\n  double length() const { return sqrt(x * x + y * y); }\n};\n// A とB のなす角θ cosθ, sinθ を返す\ndouble Cos(const Point A, const Point B) { return A.dot(B) / (A.length()*B.length()); }\ndouble Sin(const Point A, const Point B) { return A.cross(B) / (A.length()*B.length()); }\n\n// 線分AB上に点Cがあるかどうかの判定\nbool IsOnLine(const Point A, const Point B, const Point C) {  return abs(Sin(A - C, B - C)) < EPS && Cos(A - C, B - C) < 0; }\n\n// 線分の交差判定\nbool CrossCheck(const Point a, const Point b, const Point c, const Point d) {\n  if(a == c || a == d || b == c || b == d) return true; // 端点が等しい場合はtrue\n  Point AB = b - a, AC = c - a, AD = d - a;\n  Point CA = a - c, CB = b - c, CD = d - c;\n  double s = AB.cross(AC) * AB.cross(AD);\n  double t = CD.cross(CA) * CD.cross(CB);\n\n  if(abs(Sin(AB, CD)) < EPS) { // 平行のとき\n    if(abs(Sin(AB, AC)) < EPS) { // 同一直線上にあるか？\n      return (CA.dot(CB) - EPS < 0 || (a - d).dot(b - d) - EPS < 0 || AC.dot(AD) - EPS < 0);\n    }\n    else return false;\n  }\n  else return s < EPS && t < EPS;\n}\n\ndouble Dist(const Point &a, const Point &b) { return (a - b).length(); }\n\nstruct Circle {\n  Point p;\n  double r;\n\n  Circle() : p({0,0}), r(0) {}\n  Circle(Point p, double r) : p(p), r(r) {}\n};\n\nint CrossCheckCircle(Circle a, Circle b) {\n  double d = Dist(a.p, b.p);\n  if(abs(a.r - b.r) > d) return 0;\n  else if(abs(abs(a.r - b.r) - d) < EPS) return 1;\n  \n  if(a.r + b.r < d) return 4;\n  else if(abs(a.r + b.r - d) < EPS) return 3;\n  else return 2;\n}\n\nint main()\n{\n  Circle c1, c2;\n  cin >> c1.p.x >> c1.p.y >> c1.r;\n  cin >> c2.p.x >> c2.p.y >> c2.r;\n  cout << CrossCheckCircle(c1, c2) << \"\\n\";\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define mm(a,b) memset(a,b,sizeof(a))\n#define ACCELERATE (ios::sync_with_stdio(false),cin.tie(0))\n#define pii pair<int,int>\n#define pdd pair<double,double>\n#define pll pair<long long,long long>\n#define mp make_pair\n#define pb push_back\n#define fi first\n#define se second\n#define rep(i,a,b) for(int i=(a);i<=(b);i++)\n#define per(i,a,b) for(int i=(a);i>=(b);i--)\n#define rush() int T;scanf(\"%d\",&T);while(T--)\n#define debug(x) cout<<#x<<\": \"<<x<<endl\n#define sc(a) scanf(\"%d\",&a)\n#define sc2(a,b) scanf(\"%d%d\",&a,&b)\n#define sc3(a,b,c) scanf(\"%d%d%d\",&a,&b,&c)\n#define pf(x) printf(\"%d\\n\",x)\n#define pf2(x,y) printf(\"%d %d\\n\",x,y)\n#define pf3(x,y,z) printf(\"%d %d %d\\n\",x,y,z)\n#define all(x) (x).begin(),(x).end()\n#define PI acos(-1.0)\n#define E exp(1.0)\n#define db double\n#define ll long long\n#define ld long double\n#define ull unsigned long long\n//#define io\nusing namespace std;\nconst int inf=0x3f3f3f3f;\nconst ll INF=0x3f3f3f3f3f3f3f3f;\n//#define gc getchar\n//char buf[1<<21],*p1=buf,*p2=buf;\n//inline int gc(){return p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++;}\n//inline int read()\n//{\n//    int ret=0,f=0;char c=gc();\n//    while(!isdigit(c)){if(c=='-')f=1;c=gc();}\n//    while(isdigit(c)){ret=ret*10+c-48;c=gc();}\n//    if(f)return -ret;return ret;\n//}\nconst int N=1e2+5;\nconst db EPS=1e-10;\ninline int sign(db a){return a<-EPS?-1:a>EPS;}\ninline int cmp(db a,db b){return sign(a-b);}\ninline db sqr(db x){return x*x;}\nstruct Point{\n    db x,y;\n    Point(){}\n    Point(db _x,db _y):x(_x),y(_y){}\n    void input(){scanf(\"%lf%lf\",&x,&y);}\n    void output(){printf(\"%.10f %.10f\\n\",x,y);}\n    bool operator == (Point b)const{\n        return sign(x-b.x)==0&&sign(y-b.y)==0;\n    }\n    bool operator < (Point b)const{\n        return sign(x-b.x)==0?sign(y-b.y)<0:x<b.x;\n    }\n    Point operator + (const Point &b)const{\n        return Point(x+b.x,y+b.y);\n    }\n    Point operator - (const Point &b)const{\n        return Point(x-b.x,y-b.y);\n    }\n    db operator ^ (const Point &b)const{\n        return x*b.y-y*b.x;\n    }\n    db operator * (const Point &b)const{\n        return x*b.x+y*b.y;\n    }\n    db len(){return hypot(x,y);}\n    db len2(){return x*x+y*y;}\n    db distance(Point p){return hypot(x-p.x,y-p.y);}\n    Point operator * (const db &k)const{\n        return Point(x*k,y*k);\n    }\n    Point operator / (const db &k)const{\n        return Point(x/k,y/k);\n    }\n    db rad(Point a,Point b){\n        Point p=*this;\n        return fabs(atan2(fabs((a-p)^(b-p)),(a-p)*(b-p)));\n    }\n    Point unit(){return *this/len();}\n    Point trunc(db r){\n        db l=len();\n        if(!sign(l))return *this;\n        r/=l;\n        return Point(x*r,y*r);\n    }\n    Point rotleft(){return Point(-y,x);}\n    Point rotright(){return Point(y,-x);}\n    Point rotate(Point p,db angle){\n        Point v=(*this)-p;\n        db c=cos(angle),s=sin(angle);\n        return Point(p.x+v.x*c-v.y*s,p.y+v.x*s+v.y*c);\n    }\n};\n#define cross(p1,p2,p3) ((p2.x-p1.x)*(p3.y-p1.y)-(p3.x-p1.x)*(p2.y-p1.y))\n#define crossOp(p1,p2,p3) sign(cross(p1,p2,p3))\nstruct Line{\n    Point s,e;\n    Line(){}\n    Line(Point _s,Point _e):s(_s),e(_e){}\n    bool operator == (Line v){\n        return (s==v.s)&&(e==v.e);\n    }\n    Line(Point p,db angle){\n        s=p;\n        if(sign(angle-PI/2)==0)e=(s+Point(0,1));\n        else e=(s+Point(1,tan(angle)));\n    }\n    Line(db a,db b,db c){\n        if(sign(a)==0){\n            s=Point(0,-c/b);e=Point(1,-c/b);\n        }else if(sign(b)==0){\n            s=Point(-c/a,0);e=Point(-c/a,1);\n        }else{\n            s=Point(0,-c/b);e=Point(1,(-c-a)/b);\n        }\n    }\n    void input(){s.input();e.input();}\n    void adjust(){if(e<s)swap(s,e);}\n    db length(){return s.distance(e);}\n    //[0,PI)\n    db angle(){\n        db k=atan2(e.y-s.y,e.x-s.x);\n        if(sign(k)<0)k+=PI;\n        if(sign(k-PI)==0)k-=PI;\n        return k;\n    }\n    //line|1 on the left|2 on the right|3 on line|\n    int relation(Point p){\n        int c=sign((p-s)^(e-s));\n        if(c<0)return 1;\n        else if(c>0)return 2;\n        else return 3;\n    }\n    bool pointonseg(Point p){\n        return sign((p-s)^(e-s))==0&&sign((p-s)*(p-e))<=0;\n    }\n    bool parallel(Line v){\n        return sign((e-s)^(v.e-v.s))==0;\n    }\n    //|0 not intersect|1 non-standard|2 intersect|\n    int segcrossseg(Line v){\n        int d1=sign((e-s)^(v.s-s));\n        int d2=sign((e-s)^(v.e-s));\n        int d3=sign((v.e-v.s)^(s-v.s));\n        int d4=sign((v.e-v.s)^(e-v.s));\n        if((d1^d2)==-2&&(d3^d4)==-2)return 2;\n        return (d1==0&&sign((v.s-s)*(v.s-e))<=0)||\n            (d2==0&&sign((v.e-s)*(v.e-e))<=0)||\n            (d3==0&&sign((s-v.s)*(s-v.e))<=0)||\n            (d4==0&&sign((e-v.s)*(e-v.e))<=0);\n    }\n    //|0 not intersect|1 non-standard|2 intersect|\n    int linecrossseg(Line v){\n        int d1=sign((e-s)^(v.s-s));\n        int d2=sign((e-s)^(v.e-s));\n        if((d1^d2)==-2)return 2;\n        return (d1==0||d2==0);\n    }\n    //|0 parallel|1 coincides|2 intersect|\n    int linecrossline(Line v){\n        if((*this).parallel(v))return v.relation(s)==3;\n        return 2;\n    }\n    //要保证两直线不平行或重合\n    Point crosspoint(Line v){\n        db a1=(v.e-v.s)^(s-v.s);\n        db a2=(v.e-v.s)^(e-v.s);\n        return Point((s.x*a2-e.x*a1)/(a2-a1),(s.y*a2-e.y*a1)/(a2-a1));\n    }\n    db dispointtoline(Point p){\n        return fabs((p-s)^(e-s))/length();\n    }\n    db dispointtoseg(Point p){\n        if(sign((p-s)*(e-s))<0||sign((p-e)*(s-e))<0)return min(p.distance(s),p.distance(e));\n        return dispointtoline(p);\n    }\n    //前提是两线段不相交，相交距离就是0了\n    db dissegtoseg(Line v){\n        return min(min(dispointtoseg(v.s),dispointtoseg(v.e)),min(v.dispointtoseg(s),v.dispointtoseg(e)));\n    }\n    Point lineprog(Point p){\n\t\treturn s + ( ((e-s)*((e-s)*(p-s)))/((e-s).len2()) );\n\t}\n\tPoint symmetrypoint(Point p){\n\t\tPoint q = lineprog(p);\n\t\treturn Point(2*q.x-p.x,2*q.y-p.y);\n\t}\n};\nstruct circle{\n    Point p;\n    db r;\n    circle(){}\n    circle(Point _p,db _r):p(_p),r(_r){}\n    circle(db _x,db _y,db _r){\n        p=Point(_x,_y);r=_r;\n    }\n    //三角形的外接圆\n    circle(Point a,Point b,Point c){\n        Line u=Line((a+b)/2,((a+b)/2)+((b-a).rotleft()));\n        Line v=Line((b+c)/2,((b+c)/2)+((c-b).rotleft()));\n        p=u.crosspoint(v);\n        r=p.distance(a);\n    }\n    //三角形的内切圆\n    circle(Point a,Point b,Point c,bool t){\n        Line u,v;\n        db m=atan2(b.y-a.y,b.x-a.x),n=atan2(c.y-a.y,c.x-a.x);\n        u.s=a;\n        u.e=u.s+Point(cos((n+m)/2),sin((n+m)/2));\n        m=atan2(a.y-b.y,a.x-b.x),n=atan2(c.y-b.y,c.x-b.x);\n        v.s=b;\n        v.e=v.s+Point(cos((n+m)/2),sin((n+m)/2));\n        p=u.crosspoint(v);\n        r=Line(a,b).dispointtoseg(p);\n    }\n    void input(){\n        p.input();\n        scanf(\"%lf\",&r);\n    }\n    void output(){\n        printf(\"%2.f %.2f %.2f\\n\",p.x,p.y,p,r);\n    }\n    bool operator == (circle v){\n        return (p==v.p)&&sign(r-v.r)==0;\n    }\n    bool operator < (circle v)const{\n        return ((p<v.p)||((p==v.p)&&sign(r-v.r)<0));\n    }\n    db area(){return PI*r*r;}\n    db circumference(){return 2*PI*r;}\n    //|0 not|1 on|2 in|\n    int relation(Point b){\n        db dst=b.distance(p);\n        if(sign(dst-r)<0)return 2;\n        else if(sign(dst-r)==0)return 1;\n        return 0;\n    }\n    //|0 not|1 on|2 in|\n    int relationseg(Line v){\n        db dst=v.dispointtoseg(p);\n        if(sign(dst-r)<0)return 2;\n        else if(sign(dst-r)==0)return 1;\n        return 0;\n    }\n    //|1 内含|2 内切|3 相交|4 外切|5 相离|\n    int relationcircle(circle v){\n        db d=p.distance(v.p);\n        if(sign(d-r-v.r)>0)return 5;\n        if(sign(d-r-v.r)==0)return 4;\n        db l=fabs(r-v.r);\n        if(sign(d-r-v.r)<0&&sign(d-l)>0)return 3;\n        if(sign(d-l)==0)return 2;\n        if(sign(d-l)<0)return 1;\n    }\n};\n\t//`求两个圆的交点，返回0表示没有交点，返回1是一个交点，2是两个交点`\n\t//`需要relationcircle`\n\t//`测试：UVA12304`\n//\tint pointcrosscircle(circle v,Point &p1,Point &p2){\n//\t\tint rel = relationcircle(v);\n//\t\tif(rel == 1 || rel == 5)return 0;\n//\t\tdouble d = p.distance(v.p);\n//\t\tdouble l = (d*d+r*r-v.r*v.r)/(2*d);\n//\t\tdouble h = sqrt(r*r-l*l);\n//\t\tPoint tmp = p + (v.p-p).trunc(l);\n//\t\tp1 = tmp + ((v.p-p).rotleft().trunc(h));\n//\t\tp2 = tmp + ((v.p-p).rotright().trunc(h));\n//\t\tif(rel == 2 || rel == 4)\n//\t\t\treturn 1;\n//\t\treturn 2;\n//\t}\n//\t//`求直线和圆的交点，返回交点个数`\n//\tint pointcrossline(Line v,Point &p1,Point &p2){\n//\t\tif(!(*this).relationline(v))return 0;\n//\t\tPoint a = v.lineprog(p);\n//\t\tdouble d = v.dispointtoline(p);\n//\t\td = sqrt(r*r-d*d);\n//\t\tif(sgn(d) == 0){\n//\t\t\tp1 = a;\n//\t\t\tp2 = a;\n//\t\t\treturn 1;\n//\t\t}\n//\t\tp1 = a + (v.e-v.s).trunc(d);\n//\t\tp2 = a - (v.e-v.s).trunc(d);\n//\t\treturn 2;\n//\t}\n//\t//`得到过a,b两点，半径为r1的两个圆`\n//\tint gercircle(Point a,Point b,double r1,circle &c1,circle &c2){\n//\t\tcircle x(a,r1),y(b,r1);\n//\t\tint t = x.pointcrosscircle(y,c1.p,c2.p);\n//\t\tif(!t)return 0;\n//\t\tc1.r = c2.r = r;\n//\t\treturn t;\n//\t}\n//\t//`得到与直线u相切，过点q,半径为r1的圆`\n//\t//`测试：UVA12304`\n//\tint getcircle(Line u,Point q,double r1,circle &c1,circle &c2){\n//\t\tdouble dis = u.dispointtoline(q);\n//\t\tif(sgn(dis-r1*2)>0)return 0;\n//\t\tif(sgn(dis) == 0){\n//\t\t\tc1.p = q + ((u.e-u.s).rotleft().trunc(r1));\n//\t\t\tc2.p = q + ((u.e-u.s).rotright().trunc(r1));\n//\t\t\tc1.r = c2.r = r1;\n//\t\t\treturn 2;\n//\t\t}\n//\t\tLine u1 = Line((u.s + (u.e-u.s).rotleft().trunc(r1)),(u.e + (u.e-u.s).rotleft().trunc(r1)));\n//\t\tLine u2 = Line((u.s + (u.e-u.s).rotright().trunc(r1)),(u.e + (u.e-u.s).rotright().trunc(r1)));\n//\t\tcircle cc = circle(q,r1);\n//\t\tPoint p1,p2;\n//\t\tif(!cc.pointcrossline(u1,p1,p2))cc.pointcrossline(u2,p1,p2);\n//\t\tc1 = circle(p1,r1);\n//\t\tif(p1 == p2){\n//\t\t\tc2 = c1;\n//\t\t\treturn 1;\n//\t\t}\n//\t\tc2 = circle(p2,r1);\n//\t\treturn 2;\n//\t}\n//\t//`同时与直线u,v相切，半径为r1的圆`\n//\t//`测试：UVA12304`\n//\tint getcircle(Line u,Line v,double r1,circle &c1,circle &c2,circle &c3,circle &c4){\n//\t\tif(u.parallel(v))return 0;//两直线平行\n//\t\tLine u1 = Line(u.s + (u.e-u.s).rotleft().trunc(r1),u.e + (u.e-u.s).rotleft().trunc(r1));\n//\t\tLine u2 = Line(u.s + (u.e-u.s).rotright().trunc(r1),u.e + (u.e-u.s).rotright().trunc(r1));\n//\t\tLine v1 = Line(v.s + (v.e-v.s).rotleft().trunc(r1),v.e + (v.e-v.s).rotleft().trunc(r1));\n//\t\tLine v2 = Line(v.s + (v.e-v.s).rotright().trunc(r1),v.e + (v.e-v.s).rotright().trunc(r1));\n//\t\tc1.r = c2.r = c3.r = c4.r = r1;\n//\t\tc1.p = u1.crosspoint(v1);\n//\t\tc2.p = u1.crosspoint(v2);\n//\t\tc3.p = u2.crosspoint(v1);\n//\t\tc4.p = u2.crosspoint(v2);\n//\t\treturn 4;\n//\t}\n//\t//`同时与不相交圆cx,cy相切，半径为r1的圆`\n//\t//`测试：UVA12304`\n//\tint getcircle(circle cx,circle cy,double r1,circle &c1,circle &c2){\n//\t\tcircle x(cx.p,r1+cx.r),y(cy.p,r1+cy.r);\n//\t\tint t = x.pointcrosscircle(y,c1.p,c2.p);\n//\t\tif(!t)return 0;\n//\t\tc1.r = c2.r = r1;\n//\t\treturn t;\n//\t}\n//\n//\t//`过一点作圆的切线(先判断点和圆的关系)`\n//\t//`测试：UVA12304`\n//\tint tangentline(Point q,Line &u,Line &v){\n//\t\tint x = relation(q);\n//\t\tif(x == 2)return 0;\n//\t\tif(x == 1){\n//\t\t\tu = Line(q,q + (q-p).rotleft());\n//\t\t\tv = u;\n//\t\t\treturn 1;\n//\t\t}\n//\t\tdouble d = p.distance(q);\n//\t\tdouble l = r*r/d;\n//\t\tdouble h = sqrt(r*r-l*l);\n//\t\tu = Line(q,p + ((q-p).trunc(l) + (q-p).rotleft().trunc(h)));\n//\t\tv = Line(q,p + ((q-p).trunc(l) + (q-p).rotright().trunc(h)));\n//\t\treturn 2;\n//\t}\n//\t//`求两圆相交的面积`\n//\tdouble areacircle(circle v){\n//\t\tint rel = relationcircle(v);\n//\t\tif(rel >= 4)return 0.0;\n//\t\tif(rel <= 2)return min(area(),v.area());\n//\t\tdouble d = p.distance(v.p);\n//\t\tdouble hf = (r+v.r+d)/2.0;\n//\t\tdouble ss = 2*sqrt(hf*(hf-r)*(hf-v.r)*(hf-d));\n//\t\tdouble a1 = acos((r*r+d*d-v.r*v.r)/(2.0*r*d));\n//\t\ta1 = a1*r*r;\n//\t\tdouble a2 = acos((v.r*v.r+d*d-r*r)/(2.0*v.r*d));\n//\t\ta2 = a2*v.r*v.r;\n//\t\treturn a1+a2-ss;\n//\t}\n//\t//`求圆和三角形pab的相交面积`\n//\t//`测试：POJ3675 HDU3982 HDU2892`\n//\tdouble areatriangle(Point a,Point b){\n//\t\tif(sgn((p-a)^(p-b)) == 0)return 0.0;\n//\t\tPoint q[5];\n//\t\tint len = 0;\n//\t\tq[len++] = a;\n//\t\tLine l(a,b);\n//\t\tPoint p1,p2;\n//\t\tif(pointcrossline(l,q[1],q[2])==2){\n//\t\t\tif(sgn((a-q[1])*(b-q[1]))<0)q[len++] = q[1];\n//\t\t\tif(sgn((a-q[2])*(b-q[2]))<0)q[len++] = q[2];\n//\t\t}\n//\t\tq[len++] = b;\n//\t\tif(len == 4 && sgn((q[0]-q[1])*(q[2]-q[1]))>0)swap(q[1],q[2]);\n//\t\tdouble res = 0;\n//\t\tfor(int i = 0;i < len-1;i++){\n//\t\t\tif(relation(q[i])==0||relation(q[i+1])==0){\n//\t\t\t\tdouble arg = p.rad(q[i],q[i+1]);\n//\t\t\t\tres += r*r*arg/2.0;\n//\t\t\t}\n//\t\t\telse{\n//\t\t\t\tres += fabs((q[i]-p)^(q[i+1]-p))/2.0;\n//\t\t\t}\n//\t\t}\n//\t\treturn res;\n//\t}\n//};\ncircle c1,c2;\nint main()\n{\n    #ifdef io\n    freopen(\"in.txt\",\"r\",stdin);\n    #endif\n    c1.input();c2.input();\n    int t=c1.relationcircle(c2);\n    if(t==5)puts(\"4\");\n    else if(t==4)puts(\"3\");\n    else if(t==3)puts(\"2\");\n    else if(t==2)puts(\"1\");\n    else puts(\"0\");\n    return 0;\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cmath>\n#define E 1e-10\nusing namespace std;\n\nint main()\n{\n    double a[3], b[3], d;\n\n    cin >> a[0] >> a[1] >> a[2];\n    cin >> b[0] >> b[1] >> b[2];\n\n    d = sqrt( pow( a[0] - b[0], 2 ) + pow( a[1] - b[1], 2 ) );\n\n    if( d > a[2] + b[2] )\n        cout << 4 << endl;\n    else if( fabs( d - a[2] - b[2] ) < E )\n        cout << 3 << endl;\n    else if( fabs( d + a[2] - b[2] ) < E || fabs( d + b[2] - a[2] ) < E )\n        cout << 1 << endl;\n    else if( d + a[2] < b[2] || d + b[2] < a[2] )\n        cout << 0 << endl;\n    else\n        cout << 2 << endl;\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define rep(i,n) for(int i=0;(i)<(n);++(i))\nusing namespace std;\n\n// Description: ????????????\n// Verifyed: various problem\nusing namespace placeholders;\nusing R = long double;\nconst R EPS = 1e-9L; // [-1000,1000]->EPS=1e-8 [-10000,10000]->EPS=1e-7\ninline int sgn(const R& r) {return (r > EPS) - (r < -EPS);}\ninline R sq(R x) {return sqrt(max(x, 0.0L));}\n\nconst R INF = 1E40L;\nconst R PI = acos(-1.0L);\nusing P = complex<R>;\nusing L = struct {P s, t;};\nusing VP = vector<P>;\nusing C = struct {P c; R r;};\n\n#define at(a,i) (a[(i + a.size()) % a.size()])\n\nauto& operator >> (istream& is, P& p) { R x, y; is >> x >> y, p = P(x, y); return is;}\nauto& operator << (ostream& os, P& p) { os << real(p) << \" \" << imag(p); return os;}\n\nnamespace std {\nbool operator <  (const P& a, const P& b) { return sgn(real(a - b)) ? real(a - b) < 0 : sgn(imag(a - b)) < 0;}\nbool operator == (const P& a, const P& b) { return sgn(real(a - b)) == 0 && sgn(imag(a - b)) == 0;}\n}\n\ninline R dot(P o, P a, P b) {return real(conj(a - o) * (b - o));}\ninline R det(P o, P a, P b) {return imag(conj(a - o) * (b - o));}\ninline P vec(L l) {return l.t - l.s;}\nauto sdot = bind(sgn, bind(dot, _1, _2, _3));\nauto sdet = bind(sgn, bind(det, _1, _2, _3));\n\n//projection verify AOJ CGL_1_A\nP proj(L l, P p) { R u = real((p - l.s) / vec(l)); return (1 - u) * l.s + u * l.t;}\n\n// vertical parallel\n// verified: AOJ CGL_2_A\nbool vertical(L a, L b) {return sdot(0, vec(a), vec(b)) == 0;}\nbool parallel(L a, L b) {return sdet(0, vec(a), vec(b)) == 0;}\nbool eql(L a, L b) { return parallel(a, b) and sdet(a.s, a.t, b.s) == 0;}\n\n// crossing determination\n// verified: AOJ CGL_2_B\nbool iss(L a, L b) {\n\tint sa = sdet(a.s, a.t, b.s) * sdet(a.s, a.t, b.t);\n\tint sb = sdet(b.s, b.t, a.s) * sdet(b.s, b.t, a.t);\n\treturn max(sa, sb) < 0;\n}\n\n// crossing point\n// verified: AOJ CGL_2_C\nP cross(L a, L b) {\n\tR u = det(a.s, b.s, b.t) / det(0, vec(a), vec(b));\n\treturn (1 - u) * a.s + u * a.t;\n}\n\n// distance\n// verified: AOJ CGL_2_D\nR dsp(L l, P p) {\n\tP h = proj(l, p);\n\tif (sdot(l.s, l.t, p) <= 0) h = l.s;\n\tif (sdot(l.t, l.s, p) <= 0) h = l.t;\n\treturn abs(p - h);\n}\n\nR dss(L a, L b) {return iss(a, b) ? 0 : min({dsp(a, b.s), dsp(a, b.t), dsp(b, a.s), dsp(b, a.t)});}\n\n// Polygon\n\n// area\n// verified: AOJ 1100 CGL_3_A\nR area(const VP& pol) {\n\tR sum = 0.0;\n\trep(i, pol.size()) sum += det(0, at(pol, i), at(pol, i + 1));\n\treturn abs(sum / 2.0L);\n}\n\n// convex_polygon determination\n// verified: CGL_3_B\nbool is_convex(const VP& pol) {\n\trep(i, pol.size())if (sdet(at(pol, i), at(pol, i + 1), at(pol, i + 2)) < 0) return false;\n\treturn true;\n}\n\n// polygon realation determination  in  2 on 1 out 0???(possible non-convex)\n// verified: AOJ CGL_3-C\nint in_polygon(const VP& pol, const P& p) {\n\tint res = 0;\n\tauto simag = [](const P & p) {return sgn(imag(p));};\n\trep(i, pol.size()) {\n\t\tP a = at(pol, i), b = at(pol, i + 1);\n\t\tif (sdet(p, a, b) == 0 and sdot(p, a, b) <= 0) return 1;\n\t\tbool f = simag(p - a) >= 0, s = simag(p - b) < 0;\n\t\tif (simag(b - a)*sdet(a, b, p) == 1 and f == s) res += (2 * f - 1);\n\t}\n\treturn res ? 2 : 0;\n}\n\n// polygon realation determination???(possible non-convex)\n// verified: not AOJ 2514\nbool in_polygon(const VP& pol, const L& l) {\n\tVP check = {l.s, l.t};\n\trep(i, pol.size()) {\n\t\tL edge = {at(pol, i), at(pol, i + 1)};\n\t\tif (iss(l, edge)) check.emplace_back(cross(l, edge));\n\t}\n\n\tauto cmp_x = [](P a, P b)->bool{\n\t\tint sr = sgn(real(a - b)), si = sgn(imag(a - b));\n\t\treturn sr ? sr < 0 : si < 0;\n\t};\n\n\tsort(begin(check), end(check), cmp_x);\n\trep(i, check.size() - 1) {\n\t\tP m = (at(check, i) + at(check, i + 1)) / 2.0L;\n\t\tif (in_polygon(pol, m) == false) return false;\n\t}\n\treturn true;\n}\n\n// convex_cut\n// verified: AOJ CGL_4_C\nVP convex_cut(const VP& pol, const L& l) {\n\tVP res;\n\trep(i, pol.size()) {\n\t\tP a = at(pol, i), b = at(pol, i + 1);\n\t\tint da = sdet(l.s, l.t, a), db = sdet(l.s, l.t, b);\n\t\tif (da >= 0) res.emplace_back(a);\n\t\tif (da * db < 0) res.emplace_back(cross({a, b}, l));\n\t}\n\treturn res;\n}\n\n// farthest point pair Verify AOJ CGL_4_B\nR fpp(VP pol) {\n\tint n = pol.size(), i = 0, j = 0;\n\tif (n <= 2) return abs(pol[0] - pol[1]);\n\tR res = 0.0;\n\n\tauto cmp_x = [](P a, P b)->bool{\n\t\tint sr = sgn(real(a - b)), si = sgn(imag(a - b));\n\t\treturn sr ? sr < 0 : si < 0;\n\t};\n\n\trep(k, n) {\n\t\tif (!cmp_x(pol[i], pol[k]))i = k;\n\t\tif (cmp_x(pol[j], pol[k]))j = k;\n\t}\n\n\tint si = i, sj = j;\n\twhile (i != sj || j != si) {\n\t\tres = max(res, abs(pol[i] - pol[j]));\n\t\tif (sdet(0, vec(L{at(pol, i), at(pol, i + 1)}), vec(L{at(pol, j), at(pol, j + 1)})) < 0)\n\t\t\ti = (i + 1) % n;\n\t\telse\n\t\t\tj = (j + 1) % n;\n\t}\n\treturn res;\n}\n\n// closest point pair Verify AOJ CGL_5_A\nR iscp(VP a, int flag = 1) {\n\tconst int n = a.size(), m = n / 2;\n\tif (n <= 1) return INF;\n\n\tauto cmp_x = [](P a, P b)->bool{\n\t\tint sr = sgn(real(a - b)), si = sgn(imag(a - b));\n\t\treturn sr ? sr < 0 : si < 0;\n\t};\n\n\tif (flag) sort(begin(a), end(a), cmp_x);\n\n\tVP b(begin(a), begin(a) + m), c(begin(a) + m, end(a));\n\tR x = real(a[m]), d = min(iscp(b, 0), iscp(c, 0));\n\n\n\tauto cmp_y = [](P a, P b)->bool{\n\t\tint sr = sgn(real(a - b)), si = sgn(imag(a - b));\n\t\treturn si ? si < 0 : sr < 0;\n\t};\n\n\tsort(begin(a), end(a), cmp_y);\n\tdeque<P> e;\n\n\tfor (auto &p : a) {\n\t\tif (abs(real(p) - x) >= d) continue;\n\n\t\tfor (auto &q : e) {\n\t\t\tif (imag(p - q) >= d) break;\n\t\t\td = min(d, abs(p - q));\n\t\t}\n\t\te.push_front(p);\n\t}\n\treturn d;\n}\n\n// Circle // verified: AOJ 1183\nenum RCC {OUT = 2, ON_OUT = 1, ISC = 0, ON_IN = -1, IN = -2};\nint rcc(C a, C b) { R d = abs(a.c - b.c); return sgn(d - a.r - b.r) + sgn(d - abs(a.r - b.r));}\n\n// circle crossing determination\nbool iisc(C c, P p, int end = 0) {return sgn(abs(p - c.c) - c.r) <= -end;}\nbool ics(C c, L s, int end = 0) {return sgn(dsp(s, c.c) - c.r) <= -end;}\nbool icsc(C c, L l, int end = 0) {\n\treturn ics(c, l) and sgn(max(abs(l.s - c.c), abs(l.t - c.c)) - c.r) <= 0;\n}\n\n// common area between circles\nR area(C a, C b) {\n\tint r = rcc(a, b);\n\tif (r >= ON_OUT) return 0.0L;\n\tif (r <= ON_IN) return min(norm(a.r), norm(b.r)) * PI;\n\tR d = abs(b.c - a.c), rc = (norm(d) + norm(a.r) - norm(b.r)) / (2.0 * d);\n\tR t = acos(rc / a.r), p = acos((d - rc) / b.r);\n\treturn norm(a.r) * t + norm(b.r) * p - d * a.r * sin(t);\n}\n\n// cross point between circle and line\n// verified: AOJ CGL_7_D\nP cir(C c, R t) {return c.c + polar(c.r, t);}\nVP cross(C c, L l) {\n\tP h = proj(l, c.c);\n\tP e = polar(sq(norm(c.r) - norm(h - c.c)), arg(vec(l)));\n\treturn VP{h - e, h + e};\n}\n\n// cross point between circles\n// verified: AOJ CGL_7_E\nVP cross(C a, C b) {\n\tP d = b.c - a.c;\n\tP w = (norm(d) + norm(a.r) - norm(b.r)) / (2.0L * norm(d)) * d;\n\treturn cross(a, {a.c + w, a.c + w + 1il * d});\n}\n\n// circle tangent\n// verified: AOJ CGL_7_F\nL tan(C c, P p) {return L{p, p + 1il * (p - c.c)};}\n\nP helper(C c, P d, R r, P j) {\n\tP tmp = sq(norm(d) - norm(r)) * j;\n\tP dir = (r + tmp) / norm(d) * d;\n\treturn c.c + c.r * dir;\n}\n\nVP contact(C c, P p) {\n\tVP ret;\n\tP d = p - c.c;\n\tfor (P j : { -1il, 1il}) ret.emplace_back(helper(c, d, c.r, j));\n\tsort(begin(ret), end(ret));\n\tret.erase(unique(begin(ret), end(ret)), end(ret));\n\treturn ret;\n}\n\n// circle tangent\n// Verified: AOJ CGL_7_G\nVP contact(C a, C b) {\n\tVP ret;\n\tP d = b.c - a.c;\n\tfor (int s : { -1, 1}) {\n\t\tif (rcc(a, b) >= s) {\n\t\t\tfor (P j : { -1i, 1i}) {\n\t\t\t\tR r = a.r + s * b.r;\n\t\t\t\tret.emplace_back(helper(a, d, r, j));\n\t\t\t}\n\t\t}\n\t}\n\tsort(begin(ret), end(ret));\n\tret.erase(unique(begin(ret), end(ret)), end(ret));\n\treturn ret;\n}\n\n// common area of circle and polygon\nR area(R r, P a, P b) {\n\treturn sgn(abs((a + b) / 2.0l) - r) <= 0 ? det(0, a, b) / 2.0l : norm(r) * arg(b - a) / 2.0l;\n}\n\nR area(C c, VP pol) {\n\tR res = 0;\n\trep(i, pol.size()){\n\t\tR r = c.r;\n\t\tP a = at(pol, i) - c.c , b = at(pol, i + 1) - c.c;\n\t\tif (sgn(min({r, abs(a), abs(b), abs(b - a)})) == 0) continue;\n\n\t\tVP isc = cross(C{0.0l, r}, L{a, b});\n\t\tif (sdot(a, isc[0], isc[1]) <= 0 and sdot(b, isc[0], isc[1]) <= 0) \n\t\t\tres += area(r, a, b);\n\t\telse \n\t\t\tres += area(r, a, isc[0]) + area(r, isc[0], isc[1]) + area(r, isc[1], b);\n\t}\n\treturn res;\n}\nint main(void){\n\tC a,b;\n\tcin >> a.c >> a.r >> b.c >> b.r;\n\tcout << rcc(a,b)+2\t<< endl;\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\nusing namespace std;\n\nint dist(const int& x1, const int& y1, const int& x2, const int& y2){\n    return (x1-x2)*(x1-x2)+(y1-y2)*(y1-y2);\n}\nint main(){\n    int cx1, cy1, r1, cx2, cy2, r2;\n    cin >> cx1 >> cy1 >> r1 >> cx2 >> cy2 >> r2;\n    int rs = (r1+r2)*(r1+r2);\n    int rd = (r1-r2)*(r1-r2);\n    int d = dist(cx1, cy1, cx2, cy2);\n    if(d > rs) cout << 4 << endl;\n    else if(d == rs) cout << 3 << endl;\n    else if(d < rs && d > rd) cout << 2 << endl;\n    else if(d == rd) cout << 1 << endl;\n    else cout << 0 << endl;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <fstream>\n#include <string>\n#include <iomanip>\n#include <math.h>\n\nusing namespace std;\n\ndouble Dist(double x1, double y1, double x2, double y2)\n{\n    return sqrt(pow((x2 - x1), 2) + pow((y2 - y1), 2));\n}\n\nlong CGL_7_A()\n{\n    long iRcF = 0;\n\tdouble c1x = 0, c1y = 0, c1r = 0;\n    cin >> c1x >> c1y >> c1r;\n\tdouble c2x = 0, c2y = 0, c2r = 0;\n    cin >> c2x >> c2y >> c2r;\n    double dTolCoinc = 0.000001;\n    double dDist = Dist(c1x, c1y, c2x, c2y);\n    if ( dDist - (c1r + c2r) > dTolCoinc ) {\n        cout << 4 << endl;\n    } else if ( fabs(dDist - (c1r + c2r)) <= dTolCoinc ) {\n        cout << 3 << endl;\n    } else if ( dDist - fabs(c1r - c2r) > dTolCoinc ) {\n        cout << 2 << endl;\n    } else if ( fabs(dDist - fabs(c1r - c2r)) <= dTolCoinc) {\n        cout << 1 << endl;\n    } else {\n        cout << 0 << endl;\n    }\n    return 0;\n}\n\n#define AOJ_CGL_7_A\n\nint main() {\n#ifdef AOJ_CGL_1_A\n    CGL_1_A();\n#endif\n#ifdef AOJ_CGL_1_B\n    CGL_1_B();\n#endif\n#ifdef AOJ_CGL_4_A\n    CGL_4_A();\n#endif\n#ifdef AOJ_CGL_7_A\n    CGL_7_A();\n#endif\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\n\nint main(){\n\n  double x1,x2,y1,y2,r1,r2;\n  \n  cin >> x1 >> y1 >> r1 >> x2 >> y2 >> r2;\n\n  double dist = sqrt((x2-x1)*(x2-x1) + (y2-y1)*(y2-y1));\n\n  if      ( r1+r2  < dist ) cout << 4 << endl;\n  else if ( r1+r2 == dist ) cout << 3 << endl;\n  else if ( fabs(r1-r2)  < dist ) cout << 2 << endl;\n  else if ( fabs(r1-r2) == dist ) cout << 1 << endl;\n  else                      cout << 0 << endl;\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define FOR(i,a,b) for(int i=(a);i<(b);++i)\n#define rep(i,n)   FOR(i,0,n)\n#define pb emplace_back\ntypedef long long ll;\ntypedef pair<int,int> pint;\n\ndouble PI=acos(-1.0);\n#define eps (1e-10)\nstruct Point{\n    double x,y;\n    Point(){}\n    Point(double x,double y):x(x),y(y){}\n    Point operator+(Point p) {return Point(x+p.x,y+p.y);}\n    Point operator-(Point p) {return Point(x-p.x,y-p.y);}\n    Point operator*(Point p) {return Point(x*p.x-y*p.y,x*p.y+y*p.x);}\n    Point operator*(double k){return Point(x*k,y*k);}\n    Point operator/(double k){return Point(x/k,y/k);}\n    double norm(){return x*x+y*y;}\n    double abs(){return sqrt(norm());}\n    bool operator == (const Point &p) const{return fabs(x-p.x)<eps && fabs(y-p.y)<eps;}\n    double arg(){return atan2(y,x);}\n    double dot(Point p){return x*p.x+y*p.y;}\n    double det(Point p){return x*p.y-y*p.x;}\n};\nstruct Circle{\n    double r;\n    Point p;\n    Circle(){}\n    Circle(Point p,double r):p(p),r(r){}\n};\nbool isIntersectCC(Circle c1,Circle c2){\n    return (c1.p-c2.p).abs()<=c1.r+c2.r+eps;\n}\nint isIntersectCC2(Circle c1,Circle c2){\n    double dist=(c1.p-c2.p).abs();\n    double sub=abs(c1.r-c2.r);\n    if(dist>c1.r+c2.r+eps) return 4; //not cross\n    if(dist>c1.r+c2.r-eps) return 3; //外接\n    if(dist>sub+eps) return 2;//intersect\n    if(dist>sub-eps) return 1;//内接\n    return 0;//include\n}\nint main(){\n    double x1,y1,r1,x2,y2,r2;\n    cin>>x1>>y1>>r1>>x2>>y2>>r2;\n    cout<<isIntersectCC2(Circle(Point(x1,y1),r1),Circle(Point(x2,y2),r2))<<endl;\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\n#define PB          push_back\n#define PF          push_front\n#define MP          make_pair\n#define FI          first\n#define SE          second\n#define SIZE( A )   int( ( A ).size( ) )\n#define ALL( A )    ( A ).begin( ), ( A ).end( )\n#define ALLR( A )   ( A ).rbegin( ), ( A ).rend( )\n\nusing namespace std;\n\ntypedef long long           ll;\ntypedef unsigned long long  ull;\ntypedef double              lf;\ntypedef pair< int, int >    pii;\ntypedef pair< ll, ll >      pll;\ntypedef vector< bool >      vb;\ntypedef vector< lf >        vd;\ntypedef vector< ll >        vll;\ntypedef vector< int >       vi;\ntypedef vector< pii >       vpii;\n\nconst int MAXN = int( 1e5 )+10;\nconst int MOD  = int( 360 );\nconst int oo   = INT_MAX;\nconst lf EPS = 1e-9;\n\nstruct pt {\n  lf x, y;\n  pt( ) { }\n  pt( lf x, lf y ) : x( x ), y ( y ) { }\n};\n\ninline lf x( pt P ) { return P.x; }\ninline lf y( pt P ) { return P.y; }\n\nistream& operator >> ( istream& in, pt& p ) {\n  lf x,y; in >> x >> y;\n  p = pt(x,y); return in;\n}\n\nostream& operator << ( ostream& out, const pt& p ) {\n  out << double(p.x) << \" \" << double(p.y);\n  return out;\n}\n\npt operator + ( const pt& A, const pt& B ) {\n  return pt( x(A)+x(B), y(A)+y(B) );\n}\n\npt operator - ( const pt& A, const pt& B ) {\n  return pt( x(A)-x(B), y(A)-y(B) );\n}\n\npt operator * ( const lf& B, const pt& A ) {\n  return pt( x(A)*B, y(A)*B );\n}\n\npt operator * ( const pt& A, const lf& B ) {\n  return pt( x(A)*B, y(A)*B  );\n}\n\npt operator / ( const pt& A, const lf& B ) {\n  return { x(A)/B, y(A)/B };\n}\n\ninline lf dot( pt A, pt B ) {\n  return x(A)*x(B) + y(A)*y(B);\n}\n\ninline lf cross( pt A, pt B ) {\n  return x(A)*y(B) - y(A)*x(B);\n}\n\ninline lf norm( pt A ) {\n  return x(A)*x(A) + y(A)*y(A);\n}\n\ninline lf abs( pt A ) {\n  return sqrt( norm(A) );\n}\n\ninline lf dist ( pt A, pt B ) { return abs( B - A ); }\n\ninline bool same ( lf a, lf b ) {\n  return a+EPS > b && b+EPS > a;\n}\n\ninline bool samePt ( pt A, pt B ) {\n  return same ( x(A), x(B) ) && same ( y(A), y(B) );\n}\n\nlf distToLine (pt p, pt A, pt B, pt &c) {\n  lf u = dot( p-A , B-A ) / norm( B-A );\n  c = A + u*( B-A );\n  return dist( p , c );\n}\n\npt refPoint(pt X, pt A, pt B) {\n  pt aux; distToLine(X, A, B, aux);\n  return X + lf(2.0)*(aux-X);\n}\n\nint intersectionCircles( pt c1, lf r1, pt c2, lf r2, pt &p1, pt &p2 ) {\n  if( samePt( c1, c2 ) && same(r1,r2) ) return -1;\n  ll sr = (ll)(r1 + r2) * (ll)(r1 + r2);\n  ll dr = (ll)(r1 - r2) * (ll)(r1 - r2);\n  ll d = (ll)(x(c2) - x(c1)) * (ll)(x(c2) - x(c1)) + (ll)(y(c2) - y(c1)) * (ll)(y(c2) - y(c1)) ;\n  if( d < dr || d > sr ) return 0;\n  if (d == sr || d == dr) {\n    p1 = p2 = c1 + (c2-c1)/norm(c2-c1) * r1;\n    return 1;\n  }\n  p1.x = (r1*r1 - r2*r2 + (lf)d ) / (2.0*sqrtl((lf)d)) ;\n  p1.y = sqrtl ( r1*r1 - x(p1)*x(p1) ) ;\n  p2 = refPoint( p1, c1, c2 );\n  return 2;\n}\n\npt c1,c2, p1,p2;\nlf r1,r2;\n\nint main( ) {\n\n  #ifdef LOCAL\n    freopen( \"input\", \"r\", stdin );\n    //freopen( \"output\", \"w\", stdout );\n  #else\n    //freopen( \"input\", \"r\", stdin );\n    //freopen( \"output\", \"w\", stdout );\n    ios_base::sync_with_stdio( 0 );\n    cin.tie( 0 );\n  #endif\n  while( cin >> c1 >> r1 >> c2 >> r2 ) {\n    if( norm( c2-c1 ) > (r1+r2)*(r1+r2) ) {\n      cout << \"4\\n\";\n      continue;\n    }\n    if( norm( c2-c1 ) == (r1+r2)*(r1+r2) ) {\n      cout << \"3\\n\";\n      continue;\n    }\n    int r = intersectionCircles( c1, r1, c2, r2, p1, p2 );\n    if( r == 2 ) {\n      cout << \"2\\n\";\n      continue;\n    }\n    if( r == 1 ) {\n      cout << \"1\\n\";\n      continue;\n    }\n    cout << \"0\\n\";\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<cstring>\n#include<vector>\n#include<set>\n#include<queue>\n#include<cstdlib>\n#include<algorithm>\n\nusing namespace std;\n#define pb push_back\n#define mp make_pair\n#define SZ(x) (int)(x).size()\n\ntypedef long long LL;\ntypedef pair<int, int> pii;\ntypedef pair<double, double> pdd;\ntypedef pair<LL, LL> pll;\n\nconst double eps = 1e-10;\nconst double PI = acos(-1.0);\n//const double PI = 3.14159265358979323846264338327950288419716939937510\nint dcmp(const double &x) { if (fabs(x) < eps) return 0; return x < 0 ? -1 : 1; }\nconst int MOD = 1e9 + 7;\nconst int INF = 2e9;\nconst double INF_d = 1e64;\n\ntemplate<class T> \nT qmod(T a, T b){ T ret = 1; while (b){ if (b & 1) ret *= a; b >>= 1; a *= a; } return ret; }\ntemplate<class T>\nT gcd(T a, T b){ return !b ? a : gcd(b, a % b); }\ntemplate<class T>\nT ex_gcd(T a, T b, T &x, T &y){\n    if (!b){ x = 1, y = 0; return a; }\n    T t, ret;\n    ret = ex_gcd(b, a % b, x, y);\n    t = x, x = y, y = t - a / b * y;\n    return ret;\n}\ntemplate<class T>\nT inv(T t, T p){ return t == 1 ? 1 : (p - p / t) * inv(p % t, p) % p; }\n// head\n\ntypedef double db;\n\nstruct point{\n    db x, y;\n    point(){}\n    point(db a, db b): x(a), y(b){}\n    point operator + (const point &p){ return point(x + p.x, y + p.y); }\n    point operator - (const point &p){ return point(x - p.x, y - p.y); }\n    point operator * (const db &k){ return point(x * k, y * k); }\n    point operator / (const db &k){ return point(x / k, y / k); }\n    db operator ^ (const point &p){ return x * p.y - y * p.x; } // cross product\n    db operator * (const point &p){ return x * p.x + y * p.y; } // dot product\n    bool operator == (const point &p){ return !dcmp(x - p.x) && !dcmp(y - p.y); }\n    bool operator != (const point &p){ return dcmp(x - p.x) || dcmp(y - p.y); }\n    bool operator < (const point &p){ return x == p.x ? y < p.y : x < p.x; }\n    void read(){\n        scanf(\"%lf%lf\", &x, &y);\n    }\n    void print(){\n        printf(\"%.10f %.10f\\n\", x, y);\n    }\n    point rotate(db &ang){ return point(x * cos(ang) - y * sin(ang), y * cos(ang) + x * sin(ang)); }\n    point norm() { return point(-y, x); }\n    db len() { return sqrt(x * x + y * y); }\n    db len2(){ return x * x + y * y; }\n};\n\npoint err = point(INF_d, INF_d);\ndb rad(point A, point B){ return atan2((A ^ B), (A * B)); }// the ang(in rad) of two vectors A and B\n\npoint proj_SP(point A, point B, point P){ // projection point of P in segment AB\n    point AB = B - A, AP = P - A;\n    return A + AB * (AP * AB / AB.len2());\n}\n\npoint refl_SP(point A, point B, point P){ // reflection point of P int segment AB\n    return proj_SP(A, B, P) * 2 - P;\n}\n\nstruct line{\n    point p[2], u;\n    line(){}\n    line(point s, point t){\n        p[0] = s, p[1] = t;\n        u = p[1] - p[0];\n    }\n    point get_point(double t){\n        return point(p[0] + u * t);\n    }\n};\n\nbool parallel(line L1, line L2){ // check whether two lines L1 and L2 are parallel\n    return !dcmp(L1.u ^ L2.u);\n}\n\nbool orthogonal(line L1, line L2){ // check whether two lines L1 and L2 are orthogonal\n    return !dcmp(L1.u * L2.u);\n}\n\npair<bool, point> inter_LL(line L1, line L2){ // calculate the intersection of two lines L1 and L2\n    if (parallel(L1, L2)) return mp(false, err);\n    double t = ((L2.p[0] - L1.p[0]) ^ L2.u) / (L1.u ^ L2.u);\n    return mp(true, L1.get_point(t));\n}\n\nbool one_dimention_check(db a, db b, db c, db d){ // check whether two one-dimention segments has intersection\n    if (dcmp(a - b) > 0) swap(a, b);\n    if (dcmp(c - d) > 0) swap(c, d);\n    return dcmp(b - c) >= 0 && dcmp(a - d) <= 0; \n}\n\nbool check_SS(point A, point B, point C, point D){ // check whether two segments AB and CD has intersection\n    bool flag = one_dimention_check(A.x, B.x, C.x, D.x) && one_dimention_check(A.y, B.y, C.y, D.y);\n    double a = dcmp((A - C) ^ (D - C)), b = dcmp((B - C) ^ (D - C)),\n            c = dcmp((C - A) ^ (B - A)), d = dcmp((D - A) ^ (B - A));\n    return flag && dcmp(a * b) <= 0 && dcmp(c * d) <= 0;\n}\n// calculate the intersection point of two segments, first check and then call inter_LL to get the cross point\n\nbool inmid(db a, db b, db c){  // check whether a <= c <= b\n    return dcmp(dcmp(b - c) * dcmp(a - c)) <= 0; \n}\n\nbool inmid(point A, point B, point P){ // check whether point P is in the rectangle of segment AB\n    return inmid(A.x, B.x, P.x) && inmid(A.y, B.y, P.y);\n}\n\ndb dis_SP(point A, point B, point P){ // the minimum distance from a point P to segment AB\n    point p_proj = proj_SP(A, B, P);\n    if (inmid(A, B, p_proj)) return (P - p_proj).len();\n    else return min((P - A).len(), (P - B).len());\n}\n\ndb dis_SS(point A, point B, point C, point D){ // the minimum distance from two segments AB and CD\n    db res = INF_d;\n    if (check_SS(A, B, C, D)) res = 0;\n    res = min(res, dis_SP(A, B, C));\n    res = min(res, dis_SP(A, B, D));\n    res = min(res, dis_SP(C, D, A));\n    res = min(res, dis_SP(C, D, B));\n    return res;\n}\n\ndb poly_Area(point *poly, int n){ // calc the area of a simple polygon poly, n is the number of points.\n    //the points should be in clockwise or counter_clockwise.\n    db res = 0.0;\n    for (int i = 1; i < n - 1; i++){\n        res += (poly[i] - poly[0]) ^ (poly[i + 1] - poly[0]);\n    }\n    return fabs(res) / 2;\n}\n\nbool is_Convex(point *poly, int n){ // check whether a polygon is a convex polygon. Make sure points are in counter-clockwised order.\n    poly[n] = poly[0];\n    if (n < 3) return 1;\n    for (int i = 1; i < n; i++){\n        int tmp_dir = dcmp((poly[i] - poly[i - 1]) ^ (poly[(i + 1) % n] - poly[i]));\n        if (tmp_dir < 0) return 0;\n    }\n    return 1;\n}\n\nbool is_PonS(point A, point B, point P){ // check whether a point P is on a segment AB\n    return inmid(A, B, P) && !dcmp((P - A) ^ (B - A));\n}\n\nint is_PinPoly(point *poly, int n, point P){ // check the position relation of a point and polygon.\n    // 0: outside, 1: on a segment, 2: inside\n    int pd = 0;\n    for (int i = 0; i < n; i++){\n        point u = poly[i], v = poly[(i + 1) % n];\n        if (is_PonS(u, v, P)) return 1;\n        if (dcmp(u.y - v.y) > 0) swap(u, v);\n        if (dcmp(u.y - P.y) >= 0 || dcmp(v.y - P.y) < 0) continue;\n        if (dcmp((u - v) ^ (P - v)) < 0) pd ^= 1;\n    }\n    return pd << 1;\n}\n\nbool cmpxy(const point &a, const point &b){ // compare x first, then y. from small -> large\n    return a.x == b.x ? a.y < b.y : a.x < b.x;\n}\n\nbool cmpyx(const point &a, const point &b){ // compare x first, then y. from small -> large\n    return a.y == b.y ? a.x < b.x : a.y < b.y;\n}\n\nint get_convexhull(point *p, int n, point *ch){ // get the convexhull of given polygon p\n    // pay attention to when m = 0, 1, 2 as the return value\n    sort(p, p + n, cmpyx); // may be changed by the requirement of problem\n    int m = 0;\n    for (int i = 0; i < n; i++){\n        while (m > 1 && dcmp((ch[m - 1] - ch[m - 2]) ^ (p[i] - ch[m - 2])) < 0) m--;\n        ch[m++] = p[i];\n    }\n    int k = m;\n    for (int i = n - 2; i >= 0; i--){\n        while (m > k && dcmp((ch[m - 1] - ch[m - 2]) ^ (p[i] - ch[m - 2])) < 0) m--;\n        ch[m++] = p[i];\n    }\n    if (n > 1) m--;\n    return m;\n}\n\ndb convexhull_diameter(point *ch, int n){ // calculate the diameter of a give convexhull\n    if (n < 2) return 0;\n    int is, js; is = js = 0;\n    for (int i = 0; i < n; i++){\n        is = ch[i] < ch[is] ? i : is;\n        js = ch[js] < ch[i] ? i : js;\n    }\n    int i = is, j = js;\n    db ret = (ch[is] - ch[js]).len();\n    do{\n        if (dcmp((ch[(i + 1) % n] - ch[i]) ^ (ch[(j + 1) % n] - ch[j])) > 0){\n            j = (j + 1) % n;\n        }\n        else{\n            i = (i + 1) % n;\n        }\n        ret = max(ret, (ch[i] - ch[j]).len());\n    } while (i != is || j != js);\n    return ret;\n}\n\nint convexhull_cut(point *ch, int n, point P, point Q, point *new_ch){\n    int m = 0;\n    for (int i = 0; i < n; i++){\n        int d1 = dcmp((Q - P) ^ (ch[i] - P)), d2 = dcmp((Q - P) ^ (ch[(i + 1) % n] - P));\n        if (d1 >= 0) new_ch[m++] = ch[i];\n        if (d1 * d2 < 0) new_ch[m++] = inter_LL(line(P, Q), line(ch[i], ch[(i + 1) % n])).second;\n    }\n    return m;\n}\n\ndb cloest_pair(point *p, int l, int r){ // find the distance of cloest pair of points in p\n//please make sure that p is sorted by x coordinate | sort(p, p + n, cmpxy);\n//this is nlognlogn, if need nlogn, replace the sort with a merge sort.\n    if (r - l <= 5){ db cloest = INF_d;\n        for (int i = l; i < r; i++) for (int j = i + 1; j < r; j++) cloest = min(cloest, (p[i] - p[j]).len());\n        return cloest;\n    }\n    else{\n        int mid = (l + r) >> 1; db cloest = min(cloest_pair(p, l, mid), cloest_pair(p, mid, r));\n        vector<point> v; v.clear();\n        for (int i = l; i < r; i++) if (fabs(p[i].x - p[mid].x) <= cloest) v.pb(p[i]); sort(v.begin(), v.end(), cmpyx);\n        for (int i = 0; i < SZ(v); i++) for (int j = i + 1; j < SZ(v) && dcmp(v[j].y - v[i].y - cloest) < 0; j++)\n                cloest = min(cloest, (v[i] - v[j]).len());\n        return cloest;\n    }\n}\n\nstruct circle{\n    point o; double r;\n    circle(){}\n    circle(point a, double b): o(a), r(b){}\n    void read(){\n        o.read(), scanf(\"%lf\", &r);\n    }\n    int inside(point p){ // 1: inside, 2: on the circle, 0: outside\n        int sgn = dcmp((o - p).len() - r) < 0; if (sgn < 0) return 1; if (!sgn) return 2; return 0;\n    }\n};\n\nint check_CC(circle C1, circle C2){\n    db d =(C1.o - C2.o).len();\n    if (dcmp(d - C1.r - C2.r) > 0) return 4;\n    if (!dcmp(d - C1.r - C2.r)) return 3;\n    if (!dcmp(d - fabs(C1.r - C2.r))) return 1;\n    if (dcmp(d - fabs(C1.r - C2.r)) > 0 && dcmp(d - C1.r - C2.r) < 0) return 2;\n    return 0;\n}\n\nconst int N = 1e5 + 7;\nint n, m, num;\npoint p[N], x, ch[N], y;\ncircle cir[2];\n\nint main(){\n    for (int i = 0; i < 2; i++){\n        cir[i].read();\n    }\n    printf(\"%d\\n\", check_CC(cir[0], cir[1]));\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "// InterestingLSY\n// 2659723130\n// 《幽灵公主》是真的好看！\n#include <bits/stdc++.h>\nusing namespace std;\n#define il inline\n#define elif else if\n\n// Type\n#define ld double\n#define ll long long\n#define ull unsigned ll\n\n// Vector\n#define vc vector\n#define Pb push_back\n#define Pf push_front\n#define Eb emplace_back\n#define All(x) x.begin(),x.end()\n#define AllRev(x) x.rbegin(),x.rend()\n\n// Memory\n#define Ms(_data) memset(_data,0,sizeof(_data))\n#define Msn(_data,_num) memset(_data,_num,sizeof(_data))\n\n// Template\n#define _cl class\n#define _tp template\n#define _tyn typename\n\n// Pair\n#define Mp make_pair\n#define F first\n#define S second\n#define pii pair<int,int>\n#define pli pair<ll,int>\n#define pil pair<int,ll>\n#define pll pair<ll,ll>\n\n// Loop\n#define For(i,j) for( int (i) = 1 ; (i) <= (j) ; ++(i) )\n#define For0(i,j) for( int (i) = 0 ; (i) < (j) ; ++(i) )\n#define Forx(i,j,k) for( int (i) = (j) ; (i) <= (k) ; ++(i) )\n#define Forstep(i,j,k,st) for( int (i) = (j) ; (i) <= (k) ; (i) += (st) )\n#define fOR(i,j) for( int (i) = (j) ; (i) >= 1 ; --(i) )\n#define fOR0(i,j) for( int (i) = (j)-1 ; (i) >= 0 ; --(i) )\n#define fORx(i,j,k) for( int (i) = (k) ; (i) >= (j) ; --(i) )\n\n// Read\nstruct InputReader{\n\t#define bs 1048576\n\tchar buf[bs]; int p;\n\til InputReader(){ p = bs; }\n\til void Flush(){ p = 0; fread(buf,1,bs,stdin); }\n\til char C(){ if(p >= bs) Flush(); return buf[p++]; }\n\til char Readnum(){ char ch = C(); while( !isdigit(ch) && ch != '-' ) ch = C(); return ch; }\n\til void Readalpha( char &c ){ c = C(); while( !isalpha(c) ) c = C(); }\n\tint operator() (){\n\t\tint ans = 0, fu = 1; char ch = Readnum();\n\t\tif( ch == '-' ) fu = -1, ch = C();\n\t\twhile( ch >= '0' && ch <= '9' ){\n\t\t\tans = ans*10 + ch-'0';\n\t\t\tch = C();\n\t\t}\n\t\treturn ans * fu;\n\t}\n\tll Readll(){\n\t\tll ans = 0LL, fu = 1LL; char ch = Readnum();\n\t\tif( ch == '-' ) fu = -1LL, ch = C();\n\t\twhile( ch >= '0' && ch <= '9' ){\n\t\t\tans = ans*10LL + ch-'0';\n\t\t\tch = C();\n\t\t}\n\t\treturn ans * fu;\n\t}\n\til void Readstring( string &x ){\n\t\tx.clear(); char ch = C();\n\t\twhile( !isdigit(ch)  &&  !isalpha(ch)  &&  ch != '#'  &&  ch != '.' ) ch = C();\n\t\twhile( isdigit(ch)  ||  isalpha(ch)  ||  ch == '#'  ||  ch == '.' ){\n\t\t\tx += ch;\n\t\t\tch = C();\n\t\t}\n\t}\n\til void Readchstring( char s[] ){\n\t\tint len = 0; char ch = C();\n\t\twhile( !isdigit(ch)  &&  !isalpha(ch)  /*&&  ch != '*'  &&  ch != '?'*/ ) ch = C();\n\t\twhile( isdigit(ch)  ||  isalpha(ch)  /*||  ch == '*'  ||  ch == '?'*/ ){\n\t\t\ts[len++] = ch;\n\t\t\tch = C();\n\t\t}\n\t\ts[len] = '\\0';\n\t}\n\til void Specialread( char &c ){\n\t\tc = C();\n\t\twhile( !isdigit(c) && !isalpha(c) && c != '#'  &&  c != '.'  &&  c != '='  &&  c != 'B' ) c = C();\n\t}\n\t#undef bs\n}In;\nil void Read( int &x ){ x = In(); }\nil void Read( int &x, int &y ){ x = In(); y = In(); }\nil void Read( int &x1 , int &x2 , int &x3 ){ x1 = In(); x2 = In(); x3 = In(); }\nil void Read( int &x1 , int &x2 , int &x3 , int &x4 ){ x1 = In(); x2 = In(); x3 = In(); x4 = In(); }\nil void Read( ll &x ){ x = In.Readll(); }\nil void Read( ll &x, ll &y ){ x = In.Readll(); y = In.Readll(); }\nil void Read( ll &x1 , ll &x2 , ll &x3 ){ x1 = In.Readll(); x2 = In.Readll(); x3 = In.Readll(); }\nil void Read( ll &x1 , ll &x2 , ll &x3 , ll &x4 ){ x1 = In.Readll(); x2 = In.Readll(); x3 = In.Readll(); x4 = In.Readll(); }\n_tp<_tyn T> void Read( T a[] , int st , int ed ){ Forx(i,st,ed) Read(a[i]); }\n#define iRead(k) int k; Read(k);\n#define iRead2(a,b) iRead(a); iRead(b);\n#define iRead3(a,b,c) iRead2(a,b); iRead(c);\n#define iRead4(a,b,c,d) iRead2(a,b); iRead2(c,d);\n#define lRead(k) ll k; Read(k);\n#define lRead2(a,b) lRead(a); lRead(b);\n#define lRead3(a,b,c) lRead2(a,b); lRead(c);\n#define lRead4(a,b,c,d) lRead2(a,b); lRead2(c,d);\n\n// File\n#define Fin(a) freopen(a,\"r\",stdin)\n#define Fout(a) freopen(a,\"w\",stdout)\nil void FILEIO(){\n\t#ifdef intLSY\n\t\tFin(\"in.in\");\n\t#endif\n}\nil void FILEIO( string pname ){\n\t#ifndef intLSY\n\t\tFin((pname+\".in\").c_str());\n\t\tFout((pname+\".out\").c_str());\n\t#else\n\t\tFin(\"in.in\");\n\t#endif\n}\nil void FILEIO_OICONTEST( string pname ){\n\tFin((pname+\".in\").c_str());\n\t#ifndef intLSY\n\t\tFout((pname+\".out\").c_str());\n\t#endif\n}\nvoid Printtime(){\n\t#ifdef intLSY\n\t\tdouble _timeuse = clock()* 1000.0 / CLOCKS_PER_SEC;\n\t\tfprintf(stderr,\"\\n\\nTime usage:\\n%.0lf ms\\n\",_timeuse);\n\t#endif\n}\nvoid END(){ Printtime(); exit(0); }\n_tp<_tyn T>void END( T mes ){ cout << mes << endl; END(); }\n\n// Debug\n#define B cerr << \"BreakPoint\" << endl;\n#define O(x) cerr << #x << \" \" << (x) << endl;\n#define o(x) cerr << #x << \" \" << (x) << \"  \";\n#define Msz(x) cerr << \"Sizeof \" << #x << \" \" << sizeof(x)/1024/1024 << \" MB\" << endl;\n_tp<_tyn T>void Print( T a[] , int s , int t , char sp = ' ' , char ed = '\\n' ){\n\tif( s > t ) return;\n\tfor( int i = s ; i < t ; i++ )\n\t\tcout << a[i] << sp;\n\tcout << a[t] << ed;\n\tcout.flush();\n}\n_tp<_tyn T>void Print( T a , int s = 0 , int t = -1 , char sp = ' ' , char ed = '\\n' ){\n\tif( t == -1 ) t = a.size()-1;\n\tfor( int i = s ; i <= t ; i++ )\n\t\tcout << a[i] << sp;\n\tcout << ed;\n\tcout.flush();\n}\n\n// Optimize\n#define Max(a,b) ((a)>(b)?(a):(b))\n#define Min(a,b) ((a)<(b)?(a):(b))\n#define Mymax(a,b) (a) = max((a),(b))\n#define Mymin(a,b) (a) = min((a),(b))\n#define MyMax(a,b) (a) = Max((a),(b))\n#define MyMin(a,b) (a) = Min((a),(b))\n#define INF (0x3f3f3f3f)\n#define LINF ((long long)(0x3f3f3f3f3f3f3f3f))\n#define Sqr(x) ((x)*(x))\n#define Lowbit(a) ((a)&(-(a)))\nvc<int> Range( int l , int r ){\n\tvc<int> ret{};\n\tForx(i,l,r) ret.Pb(i);\n\treturn ret;\n}\nmt19937 Rand(0xe38195e38293*time(0));\t// さん\n///////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////\n#undef ld\n#define ld long double\nconst ld Eps = 1e-10;\nstruct Point{ ld x,y; };\nil Point operator+( const Point &a , const Point &b ){ return {a.x+b.x,a.y+b.y}; }\nil Point operator-( const Point &a , const Point &b ){ return {a.x-b.x,a.y-b.y}; }\nil auto operator^( const Point &a , const Point &b ){ return a.x*b.x + a.y*b.y; }\nil auto operator*( const Point &a , const Point &b ){ return a.x*b.y - b.x*a.y; }\nil Point operator*( const Point &a , const ld &b ){ return {a.x*b,a.y*b}; }\nil bool operator==( const Point &a , const Point &b ){ return a.x == b.x and a.y == b.y; }\nil ld Dis( const Point &a , const Point &b ){ return sqrt((ld)Sqr(a.x-b.x)+Sqr(a.y-b.y)); }\nil ld Dis2( const Point &a , const Point &b ){ return Sqr(a.x-b.x)+Sqr(a.y-b.y); }\nostream& operator<<( ostream &out , const Point &p ){\n\tout << p.x << \" \" << p.y << \"  \";\n\treturn out;\n}\nil bool OnSeg( const Point &a , const Point &b , const Point &c ){\n\tPoint ab = b-a, ac = c-a;\n\tif( fabs(ab*ac) > Eps ) return 0;\n\tif( (ab^ac) < -Eps ) return 0;\n\tif( fabs(ab.y*ab.y+ab.x*ab.x) > fabs(ac.y*ac.y+ac.x*ac.x) ) return 0;\n\t// cout << a.x << \" \" << a.y << \"  \" << b.x << \" \" << b.y << \"  \" << c.x << \" \" << c.y << endl;\n\treturn 1;\n}\nbool Ins( Point p1 , Point p2 , Point p3 , Point p4 ){\n\tif( p1 == p3 or p1 == p4 or p2 == p3 or p2 == p4 ) return 1;\n\tif( OnSeg(p1,p3,p2) or OnSeg(p1,p4,p2) or OnSeg(p3,p1,p4) or OnSeg(p3,p2,p4) ) return 1;\n\tif( ((p2-p1)*(p3-p1)<-Eps) == ((p2-p1)*(p4-p1)<-Eps) ) return 0;\n\tif( ((p4-p3)*(p1-p3)<-Eps) == ((p4-p3)*(p2-p3)<-Eps) ) return 0;\n\treturn 1;\n}\nPoint InsPoint( Point p1 , Point p2 , Point p3 , Point p4 ){\n\tld d1 = (ld)abs((p2-p3)*(p3-p1)) / Dis(p1,p2);\n\tld d2 = (ld)abs((p2-p4)*(p4-p1)) / Dis(p1,p2);\n\tld ratio = d1 / (d1+d2);\n\treturn (p4-p3)*ratio + p3;\n}\nPoint H( Point a , Point b , Point p ){\n\tPoint ab = b-a;\n\tld dis2 = Dis2(a,b);\n\tPoint ret = a + ab * (((p-a)^ab)/dis2);\n\treturn ret;\n}\nld Distance( Point p1 , Point p2 , Point p3 , Point p4 ){\n\tif(Ins(p1,p2,p3,p4)) return 0;\n\tld ans = min({ Dis(p1,p3) , Dis(p1,p4) , Dis(p2,p3) , Dis(p2,p4) });\n\tauto Check = [&]( Point a , Point b , Point p ){\n\t\tPoint h = H(a,b,p);\n\t\tif(!OnSeg(a,h,b)) return;\n\t\tld tans = Dis(h,p);\n\t\tMymin(ans,tans);\n\t};\n\tCheck(p1,p2,p3);\n\tCheck(p1,p2,p4);\n\tCheck(p3,p4,p1);\n\tCheck(p3,p4,p2);\n\treturn ans;\n}\n\nint main(){\n\tFILEIO();\n\n\tiRead3(x1,y1,r1);\n\tiRead3(x2,y2,r2);\n\n\tint dis2 = Sqr(x1-x2) + Sqr(y1-y2);\n\tif( Sqr(r1+r2) < dis2 ) END(\"4\");\n\tif( Sqr(r1+r2) == dis2 ) END(\"3\");\n\tif( r1 < r2 ){\n\t\tswap(r1,r2);\n\t\tswap(x1,x2);\n\t\tswap(y1,y2);\n\t}\n\tif( Sqr(r1-r2) == dis2 ) END(\"1\");\n\tif( Sqr(r1-r2) > dis2 ) END(\"0\");\n\tEND(\"2\");\n\n\tEND();\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <vector>\n#include <set>\n#include <cmath>\n#include <cstdio>\n#include <numeric>\n#include <functional>\n\nusing namespace std;\n\n//BEGIN\n#define EPS 1e-10\n#define equals(a, b) (fabs(a - b) < EPS)\n#define Pi 3.141592653589793238\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nstruct Point {\n\tdouble x, y;\n\n\tPoint() {}\n\tPoint(double x, double y) :x(x), y(y) {}\n\n\tPoint operator+(const Point& p) const { return Point(x + p.x, y + p.y); }\n\tPoint operator-(const Point& p) const { return Point(x - p.x, y - p.y); }\n\tPoint operator*(const double& k) const { return Point(x * k, y * k); }\n\tPoint operator/(const double& k) const { return Point(x / k, y / k); }\n\n\tfriend istream& operator>>(istream& is, Point& p) {\n\t\tis >> p.x >> p.y;\n\t\treturn is;\n\t}\n\n\tbool operator==(const Point& p) const { return (fabs(x - p.x) < EPS && fabs(y - p.y) < EPS); }\n\tbool operator<(const Point& p) const { return (x != p.x ? x < p.x : y < p.y); }\n\n\tdouble norm() { return x * x + y * y; }\n\tdouble abs() { return sqrt(norm()); }\n};\n\ntypedef Point Vector;\n\ndouble norm(Vector a) { return a.x * a.x + a.y * a.y; }\ndouble abs(Vector a) { return sqrt(norm(a)); }\ndouble dot(Vector a, Vector b) { return a.x * b.x + a.y * b.y; }\ndouble cross(Vector a, Vector b) { return a.x * b.y - a.y * b.x; }\n\nbool isParallel(Vector a, Vector b) { return equals(cross(a, b), 0.0); }\nbool isOrthogonal(Vector a, Vector b) { return equals(dot(a, b), 0.0); }\n\nstruct EndPoint {\n\tPoint p;\n\tint seg, st;\n\n\tEndPoint() {}\n\tEndPoint(Point p, int seg, int st) :p(p), seg(seg), st(st) {}\n\n\tbool operator<(const EndPoint& ep) const {\n\t\tif (p.y == ep.p.y) return st < ep.st;\n\t\treturn p.y < ep.p.y;\n\t}\n};\n\nstruct Segment {\n\tPoint p1, p2;\n\n\tSegment() {}\n\tSegment(Point p1, Point p2) :p1(p1), p2(p2) {}\n\n\tfriend istream& operator>>(istream& is, Segment& s) {\n\t\tis >> s.p1 >> s.p2;\n\t\treturn is;\n\t}\n};\n\ntypedef Segment Line;\n\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / base.norm();\n\treturn s.p1 + base * r;\n}\n\nPoint reflect(Segment s, Point p) {\n\treturn p + (project(s, p) - p) * 2.0;\n}\n\nstruct Circle {\n\tPoint c;\n\tdouble r;\n\n\tCircle() {}\n\tCircle(Point c, double r) :c(c), r(r) {}\n};\n\ntypedef vector<Point> Polygon;\n\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0, b = p2 - p0;\n\tif (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS) return CLOCKWISE;\n\tif (dot(a, b) < -EPS) return ONLINE_BACK;\n\tif (a.norm() < b.norm()) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\nbool intersectSS(Point p1, Point p2, Point p3, Point p4) {\n\treturn (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n\t\t\tccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\nbool intersectSS(Segment s1, Segment s2) {\n\treturn intersectSS(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\nint intersectCS(Circle c, Segment s) {\n\tif (norm(project(s, c.c) - c.c) - c.r * c.r > EPS) return 0;\n\tdouble d1 = abs(c.c - s.p1), d2 = abs(c.c - s.p2);\n\tif (d1 < c.r + EPS && d2 < c.r + EPS) return 0;\n\tif ((d1 < c.r - EPS && d2 > c.r + EPS) || (d1 > c.r + EPS && d2 < c.r - EPS)) return 1;\n\tPoint h = project(s, c.c);\n\tif (dot(s.p1 - h, s.p2 - h) < 0) return 2;\n\treturn 0;\n}\n\nint intersectCC(Circle c1, Circle c2) {\n\tif (c1.r < c2.r) swap(c1, c2);\n\tdouble d = abs(c1.c - c2.c);\n\tdouble r = c1.r + c2.r;\n\tif (equals(d, r)) return 3;\n\tif (d > r) return 4;\n\tif (equals(d + c2.r, c1.r)) return 1;\n\tif (d + c2.r < c1.r) return 0;\n\treturn 2;\n}\n\ndouble getDistanceLP(Line l, Point p) {\n\treturn abs(cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1));\n}\n\ndouble getDistanceSP(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0) return abs(p - s.p1);\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0) return abs(p - s.p2);\n\treturn getDistanceLP(s, p);\n}\n\ndouble getDistanceSS(Segment s1, Segment s2) {\n\tif (intersectSS(s1, s2)) return 0.0;\n\treturn min({ getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2),\n\t\t\t   getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2) });\n}\n\nPoint getCrossPointLL(Line l1, Line l2) {\n\tdouble a = cross(l1.p2 - l1.p1, l2.p2 - l2.p1);\n\tdouble b = cross(l1.p2 - l1.p1, l1.p2 - l2.p1);\n\tif (abs(a) < EPS && abs(b) < EPS) return l2.p1;\n\treturn l2.p1 + (l2.p2 - l2.p1) * (b / a);\n}\n\nPoint getCrossPointSS(Segment s1, Segment s2) {\n\tVector base = s2.p2 - s2.p1;\n\tdouble d1 = abs(cross(base, s1.p1 - s2.p1));\n\tdouble d2 = abs(cross(base, s1.p2 - s2.p1));\n\treturn s1.p1 + (s1.p2 - s1.p1) * (d1 / (d1 + d2));\n}\n\nvector<Point> getCrossPointCL(Circle c, Line l) {\n\tvector<Point> ps;\n\tVector pr = project(l, c.c);\n\tVector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);\n\tif (equals(getDistanceLP(l, c.c), c.r)) {\n\t\tps.push_back(pr);\n\t\treturn ps;\n\t}\n\tdouble base = sqrt(c.r * c.r - norm(pr - c.c));\n\tps.push_back(pr + e * base); ps.push_back(pr - e * base);\n\treturn ps;\n}\n\nvector<Point> getCrossPointCS(Circle c, Segment s) {\n\tLine l(s);\n\tvector<Point> ps = getCrossPointCL(c, l);\n\tif (intersectCS(c, s) == 2) return ps;\n\tif (dot(l.p1 - ps[0], l.p2 - ps[0]) < 0) ps[1] = ps[0];\n\telse ps[0] = ps[1];\n\treturn ps;\n}\n\ndouble arg(Vector p) { return atan2(p.y, p.x); }\nPoint polar(double a, double r) { return Point(cos(r) * a, sin(r) * a); }\n\nvector<Point> getCrossPointCC(Circle c1, Circle c2) {\n\tdouble d = abs(c1.c - c2.c);\n\tdouble a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n\tdouble t = arg(c2.c - c1.c);\n\tvector<Point> ps;\n\tps.push_back(c1.c + polar(c1.r, t + a)); ps.push_back(c1.c + polar(c1.r, t - a));\n\treturn ps;\n}\n\nvector<Point> tangentCP(Circle c, Point p) {\n\treturn getCrossPointCC(c, Circle(p, sqrt(norm(c.c - p) - c.r * c.r)));\n}\n\nvector<Line> tangentCC(Circle c1, Circle c2) {\n\tvector<Line> ls;\n\tif (c1.r < c2.r) swap(c1, c2);\n\tdouble g = norm(c1.c - c2.c);\n\tif (equals(g, 0)) return ls;\n\tPoint u = (c2.c - c1.c) / sqrt(g);\n\tPoint v = Point(-u.y, u.x);\n\tfor (int s = 1; s >= -1; s -= 2) {\n\t\tdouble h = (c1.r + s * c2.r) / sqrt(g);\n\t\tif (equals(1, h * h)) ls.push_back(Line(c1.c + u * c1.r, c1.c + (u + v) * c1.r));\n\t\telse if (1 - h * h > 0) {\n\t\t\tPoint uu = u * h, vv = v * sqrt(1 - h * h);\n\t\t\tls.push_back(Line(c1.c + (uu + vv) * c1.r, c2.c - (uu + vv) * c2.r * s));\n\t\t\tls.push_back(Line(c1.c + (uu - vv) * c1.r, c2.c - (uu - vv) * c2.r * s));\n\t\t}\n\t}\n\treturn ls;\n}\n\n// IN:2,ON:1,OUT:0\nint contains(Polygon g, Point p) {\n\tint n = g.size();\n\tbool x = false;\n\tfor (int i = 0; i < n; ++i) {\n\t\tPoint a = g[i] - p, b = g[(i + 1) % n] - p;\n\t\tif (abs(cross(a, b)) < EPS && dot(a, b) < EPS) return 1;\n\t\tif (a.y > b.y) swap(a, b);\n\t\tif (a.y < EPS && EPS < b.y && cross(a, b) > EPS) x = !x;\n\t}\n\treturn (x ? 2 : 0);\n}\n\nbool isConvex(Polygon p) {\n\tint n = p.size();\n\tfor (int i = 0; i < n; ++i)\n\t\tif (ccw(p[(i - 1 + n) % n], p[i], p[(i + 1) % n]) == CLOCKWISE) return false;\n\treturn true;\n}\n\nPolygon convexHull(Polygon p) {\n\tint n = p.size();\n\tsort(p.begin(), p.end(),\n\t\t [](const Point& a, const Point& b) {return (a.y != b.y ? a.y < b.y : a.x < b.x); });\n\tPolygon a(2 * n);\n\tint k = 0;\n\tfor (int i = 0; i < n; ++i) {\n\t\twhile (k > 1 && cross(a[k - 1] - a[k - 2], p[i] - a[k - 1]) < 0) k--;\n\t\ta[k++] = p[i];\n\t}\n\tfor (int i = n - 2, t = k; i >= 0; --i) {\n\t\twhile (k > t && cross(a[k - 1] - a[k - 2], p[i] - a[k - 1]) < 0) k--;\n\t\ta[k++] = p[i];\n\t}\n\ta.resize(k - 1);\n\treturn a;\n}\n\ndouble area(Polygon p) {\n\tdouble res = 0;\n\tfor (int i = 0; i < (int)p.size(); ++i)\n\t\tres += cross(p[i], p[(i + 1) % p.size()]) / 2.0;\n\treturn res;\n}\n\ndouble area(Polygon p, Circle c) {\n\tif (p.size() < 3) return 0.0;\n\tfunction<double(Circle, Point, Point)> dfs = [&](Circle c, Point a, Point b) {\n\t\tVector va = c.c - a, vb = c.c - b;\n\t\tdouble f = cross(va, vb), res = 0;\n\t\tif (equals(f, 0.0)) return res;\n\t\tif (max(abs(va), abs(vb)) < c.r + EPS) return f;\n\t\tVector d(dot(va, vb), cross(va, vb));\n\t\tif (getDistanceSP(Segment(a, b), c.c) > c.r - EPS)\n\t\t\treturn c.r * c.r * atan2(d.y, d.x);\n\t\tauto u = getCrossPointCS(c, Segment(a, b));\n\t\tvector<Point> ps{ a,u[0],u[1],b };\n\t\tfor (int i = 1; i < ps.size(); ++i) res += dfs(c, ps[i - 1], ps[i]);\n\t\treturn res;\n\t};\n\tdouble res = 0;\n\tfor (int i = 0; i < (int)p.size(); ++i) res += dfs(c, p[i], p[(i + 1) % p.size()]);\n\treturn res / 2;\n}\n\ndouble convexDiameter(Polygon p) {\n\tint n = p.size();\n\tif (n == 2) return abs(p[0] - p[1]);\n\tint i = 0, j = 0;\n\tfor (int k = 0; k < n; ++k) {\n\t\tif (p[i] < p[k]) i = k;\n\t\tif (!(p[j] < p[k])) j = k;\n\t}\n\tdouble res = 0;\n\tint ti = i, tj = j;\n\twhile (i != tj || j != ti) {\n\t\tres = max(res, abs(p[i] - p[j]));\n\t\tif (cross(p[(i + 1) % n] - p[i], p[(j + 1) % n] - p[j]) < 0.0)\n\t\t\ti = (i + 1) % n;\n\t\telse j = (j + 1) % n;\n\t}\n\treturn res;\n}\n\nPolygon convexCut(Polygon p, Line l) {\n\tPolygon q;\n\tfor (int i = 0; i < (int)p.size(); ++i) {\n\t\tPoint a = p[i], b = p[(i + 1) % p.size()];\n\t\tif (ccw(l.p1, l.p2, a) != CLOCKWISE) q.push_back(a);\n\t\tif (ccw(l.p1, l.p2, a) * ccw(l.p1, l.p2, b) < 0)\n\t\t\tq.push_back(getCrossPointLL(Line(a, b), l));\n\t}\n\treturn q;\n}\n\ndouble closestPair(vector<Point> ps) {\n\tsort(ps.begin(), ps.end());\n\tvector<Point> a(ps.size());\n\tfunction<double(int, int)> solve = [&](int l, int r) {\n\t\tif (r - l < 2) return 1e18;\n\t\tint mid = (l + r) >> 1;\n\t\tdouble x = ps[mid].x;\n\t\tdouble d = min(solve(l, mid), solve(mid, r));\n\t\tinplace_merge(ps.begin() + l, ps.begin() + mid, ps.begin() + r,\n\t\t\t\t\t  [](const Point& a, const Point& b) {return a.y < b.y; });\n\t\tint ptr = 0;\n\t\tfor (int i = l; i < r; ++i) {\n\t\t\tif (abs(ps[i].x - x) >= d) continue;\n\t\t\tfor (int j = 0; j < ptr; ++j) {\n\t\t\t\tPoint luz = ps[i] - a[ptr - j - 1];\n\t\t\t\tif (luz.y >= d) break;\n\t\t\t\td = min(d, abs(luz));\n\t\t\t}\n\t\t\ta[ptr++] = ps[i];\n\t\t}\n\t\treturn d;\n\t};\n\treturn solve(0, ps.size());\n}\n\nint manhattanIntersection(vector<Segment> ss) {\n\tconst int INF = numeric_limits<int>::max();\n\tconst int BOTTOM = 0, LEFT = 1, RIGHT = 2, TOP = 3;\n\tint n = ss.size();\n\tvector<EndPoint> ep;\n\tfor (int i = 0; i < n; ++i) {\n\t\tif (ss[i].p1.y == ss[i].p2.y) {\n\t\t\tif (ss[i].p1.x > ss[i].p2.x) swap(ss[i].p1, ss[i].p2);\n\t\t\tep.push_back(EndPoint(ss[i].p1, i, LEFT));\n\t\t\tep.push_back(EndPoint(ss[i].p2, i, RIGHT));\n\t\t} else {\n\t\t\tif (ss[i].p1.y > ss[i].p2.y) swap(ss[i].p1, ss[i].p2);\n\t\t\tep.push_back(EndPoint(ss[i].p1, i, BOTTOM));\n\t\t\tep.push_back(EndPoint(ss[i].p2, i, TOP));\n\t\t}\n\t}\n\tsort(ep.begin(), ep.end());\n\tset<int> st;\n\tst.insert(INF);\n\tint cnt = 0;\n\tfor (int i = 0; i < 2 * n; ++i) {\n\t\tif (ep[i].st == TOP) st.erase(ep[i].p.x);\n\t\telse if (ep[i].st == BOTTOM) st.insert(ep[i].p.x);\n\t\telse if (ep[i].st == LEFT) {\n\t\t\tauto b = st.lower_bound(ss[ep[i].seg].p1.x);\n\t\t\tauto e = st.upper_bound(ss[ep[i].seg].p2.x);\n\t\t\tcnt += distance(b, e);\n\t\t}\n\t}\n\treturn cnt;\n}\n//END\n\n\n\n\n\n\n\n\n\n\n\n\n\nvoid CGL1A() {\n\tSegment s; cin >> s;\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tPoint p; cin >> p;\n\t\tPoint a = project(s, p);\n\t\tprintf(\"%.10f %.10f\\n\", a.x, a.y);\n\t}\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/1/CGL_1_A\n*/\nvoid CGL1B() {\n\tSegment s; cin >> s;\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tPoint p; cin >> p;\n\t\tPoint a = reflect(s, p);\n\t\tprintf(\"%.10f %.10f\\n\", a.x, a.y);\n\t}\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/1/CGL_1_B\n*/\nvoid CGL1C() {\n\tPoint p0, p1, p2; cin >> p0 >> p1;\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tcin >> p2;\n\t\tint a = ccw(p0, p1, p2);\n\t\tif (a == COUNTER_CLOCKWISE) cout << \"COUNTER_CLOCKWISE\";\n\t\telse if (a == CLOCKWISE) cout << \"CLOCKWISE\";\n\t\telse if (a == ONLINE_BACK) cout << \"ONLINE_BACK\";\n\t\telse if (a == ONLINE_FRONT) cout << \"ONLINE_FRONT\";\n\t\telse cout << \"ON_SEGMENT\";\n\t\tcout << endl;\n\t}\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/1/CGL_1_C\n*/\nvoid CGL2A() {\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tVector p0, p1, p2, p3;\n\t\tcin >> p0 >> p1 >> p2 >> p3;\n\t\tif (isParallel(p1 - p0, p3 - p2)) cout << 2;\n\t\telse if (isOrthogonal(p1 - p0, p3 - p2)) cout << 1;\n\t\telse cout << 0;\n\t\tcout << endl;\n\t}\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/2/CGL_2_A\n*/\nvoid CGL2B() {\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tSegment s1, s2;\n\t\tcin >> s1 >> s2;\n\t\tcout << (intersectSS(s1, s2) ? 1 : 0) << endl;\n\t}\n}/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/2/CGL_2_B\n*/\nvoid CGL2C() {\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tSegment s1, s2;\n\t\tcin >> s1 >> s2;\n\t\tPoint a = getCrossPointLL(s1, s2);\n\t\tprintf(\"%.10f %.10f\\n\", a.x, a.y);\n\t}\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/2/CGL_2_C\n*/\nvoid CGL2D() {\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tSegment s1, s2;\n\t\tcin >> s1 >> s2;\n\t\tprintf(\"%.10f\\n\", getDistanceSS(s1, s2));\n\t}\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/2/CGL_2_D\n*/\nvoid CGL3A() {\n\tint n; cin >> n;\n\tPolygon p(n);\n\tfor (auto& a : p) cin >> a;\n\tprintf(\"%.1f\\n\", area(p));\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/3/CGL_3_A\n*/\nvoid CGL3B() {\n\tint n; cin >> n;\n\tPolygon p(n);\n\tfor (auto& a : p) cin >> a;\n\tcout << (isConvex(p) ? 1 : 0) << endl;\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/3/CGL_3_B\n*/\nvoid CGL3C() {\n\tint n; cin >> n;\n\tPolygon g(n);\n\tfor (auto& a : g) cin >> a;\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tPoint p; cin >> p;\n\t\tcout << contains(g, p) << endl;\n\t}\n}/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/3/CGL_3_C\n*/\nvoid CGL4A() {\n\tint n; cin >> n;\n\tPolygon p(n);\n\tfor (auto& a : p) cin >> a;\n\tPolygon t = convexHull(p);\n\tcout << t.size() << endl;\n\tfor (auto a : t) cout << a.x << \" \" << a.y << endl;\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/4/CGL_4_A\n*/\nvoid CGL4B() {\n\tint n; cin >> n;\n\tPolygon p(n);\n\tfor (auto& a : p) cin >> a;\n\tprintf(\"%.10f\\n\", convexDiameter(p));\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/4/CGL_4_B\n*/\nvoid CGL4C() {\n\tint n; cin >> n;\n\tPolygon p(n);\n\tfor (auto& a : p) cin >> a;\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tLine l; cin >> l;\n\t\tprintf(\"%.10f\\n\", area(convexCut(p, l)));\n\t}\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/4/CGL_4_C\n*/\nvoid CGL5A() {\n\tint n; cin >> n;\n\tvector<Point> ps(n);\n\tfor (auto& a : ps) cin >> a;\n\tprintf(\"%.10f\\n\", closestPair(ps));\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/5/CGL_5_A\n*/\nvoid CGL6A() {\n\tint n; cin >> n;\n\tvector<Segment> ss(n);\n\tfor (auto& a : ss) cin >> a;\n\tcout << manhattanIntersection(ss) << endl;\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/6/CGL_6_A\n*/\nvoid CGL7A() {\n\tCircle c1, c2; cin >> c1.c >> c1.r >> c2.c >> c2.r;\n\tcout << intersectCC(c1, c2) << endl;\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/7/CGL_7_A\n*/\n\nvoid CGL7D() {\n\tCircle c; cin >> c.c.x >> c.c.y >> c.r;\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tLine l; cin >> l.p1.x >> l.p1.y >> l.p2.x >> l.p2.y;\n\t\tauto a = getCrossPointCL(c, l);\n\t\tsort(a.begin(), a.end());\n\t\tprintf(\"%.10f %.10f %.10f %.10f\\n\", a[0].x, a[0].y, a[1].x, a[1].y);\n\t}\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/7/CGL_7_D\n*/\nvoid CGL7E() {\n\tCircle c1; cin >> c1.c.x >> c1.c.y >> c1.r;\n\tCircle c2; cin >> c2.c.x >> c2.c.y >> c2.r;\n\tauto a = getCrossPointCC(c1, c2);\n\tsort(a.begin(), a.end());\n\tprintf(\"%.10f %.10f %.10f %.10f\\n\", a[0].x, a[0].y, a[1].x, a[1].y);\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/7/CGL_7_E\n*/\nvoid CGL7F() {\n\tPoint p; cin >> p;\n\tCircle c; cin >> c.c >> c.r;\n\tauto a = tangentCP(c, p);\n\tsort(a.begin(), a.end());\n\tprintf(\"%.10f %.10f\\n%.10f %.10f\\n\", a[0].x, a[0].y, a[1].x, a[1].y);\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/7/CGL_7_F\n*/\nvoid CGL7G() {\n\tCircle c1, c2; cin >> c1.c >> c1.r >> c2.c >> c2.r;\n\tauto a = tangentCC(c1, c2);\n\tvector<Point> ps;\n\tfor (auto e : a) ps.push_back(getCrossPointCL(c1, e)[0]);\n\tsort(ps.begin(), ps.end());\n\tfor (auto e : ps) printf(\"%.10f %.10f\\n\", e.x, e.y);\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/7/CGL_7_G\n*/\nvoid CGL7H() {\n\tint n; cin >> n;\n\tCircle c; c.c = Point(0, 0); cin >> c.r;\n\tPolygon p(n);\n\tfor (auto& a : p) cin >> a;\n\tprintf(\"%.10f\\n\", area(p, c));\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/7/CGL_7_H\n*/\n\nint main() {\n\t//CGL1A();\n\t//CGL1B();\n\t//CGL1C();\n\t//CGL2A();\n\t//CGL2B();\n\t//CGL2C();\n\t//CGL2D();\n\t//CGL3A();\n\t//CGL3B();\n\t//CGL3C();\n\t//CGL4A();\n\t//CGL4B();\n\t//CGL4C();\n\t//CGL5A();\n\t//CGL6A();\n    CGL7A();\n\t//CGL7D();\n\t//CGL7E();\n\t//CGL7F();\n\t//CGL7G();\n\t//CGL7H();\n\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n//#define int long long\n\nusing namespace std;\nusing LL = long long;\nusing P = pair<int, int>;\nusing Tapris = tuple<int, int, int>;\n\n#define FOR(i, a, n) for(int i = (int)(a); i < (int)(n); ++i)\n#define REP(i, n) FOR(i, 0, n)\n\n#define pb(a) push_back(a)\n#define all(x) (x).begin(),(x).end()\n\nconst int INF = (int)1e9;\nconst LL INFL = (LL)1e15;\nconst int MOD = 1e9 + 7;\n\nint dy[]={0, 0, 1, -1, 0};\nint dx[]={1, -1, 0, 0, 0};\n\ntypedef long double LD;\ntypedef complex<LD> Point;\ntypedef pair<Point, Point> Line;\ntypedef vector<Point> Polygon;\nconst LD EPS = 1e-10;\n#define X real() // x座標を取得\n#define Y imag() // y座標を取得\n#define LE(n,m) ((n) < (m) + EPS)\n#define GE(n,m) ((n) + EPS > (m))\n#define EQ(n,m) (abs((n)-(m)) < EPS)\n\n// 内積 Dot(a, b) = |a||b|cosθ\nLD Dot(Point a, Point b){\n    return (conj(a)*b).X;\n}\n\n// 外積 Cross(a, b) = |a||b|sinθ\nLD Cross(Point a, Point b){\n    return (conj(a)*b).Y;\n}\n\nint CCW(Point a, Point b, Point c){\n    b -= a; c -= a;\n    if (Cross(b, c) > 0)   return +1;       // counter clockwise\n    if (Cross(b, c) < 0)   return -1;       // clockwise\n    if (Dot(b, c) < 0)     return +2;       // c--a--b on line\n    if (norm(b) < norm(c)) return -2;       // a--b--c on line\n    return 0;\n}\n\n//*********************************************\n//          点と線(Point and Line)            *\n//*********************************************\n\n// 交差判定 (Isec) ****************************\n// 点　 := 平面座標にある点\n// 直線 := 点と点を通るどこまでも続く線\n// 線分 := 点と点を結んでその両端で止まっている線\n\n// 直線と点\nbool IsecLP(Point a1, Point a2, Point b){\n    return abs(CCW(a1, a2, b)) != 1;\n}\n\n// 直線と直線\nbool IsecLL(Point a1, Point a2, Point b1, Point b2) {\n    return !IsecLP(a2-a1, b2-b1, 0) || IsecLP(a1, b1, b2);\n}\n\n// 直線と線分\nbool IsecLS(Point a1, Point a2, Point b1, Point b2) {\n    return Cross(a2-a1, b1-a1) * Cross(a2-a1, b2-a1) < EPS;\n}\n\n// 線分と線分\nbool IsecSS(Point a1, Point a2, Point b1, Point b2) {\n    return CCW(a1, a2, b1)*CCW(a1, a2, b2) <= 0 && CCW(b1, b2, a1)*CCW(b1, b2, a2) <= 0;\n}\n\n// 線分と点\nbool IsecSP(Point a1, Point a2, Point b) {\n    return !CCW(a1, a2, b);\n}\n\n// ********************************************\n\n\n// 距離 (Dist) ********************************\n// 点pの直線aへの射影点を返す\nPoint Proj(Point a1, Point a2, Point p){\n    return a1 + Dot(a2-a1, p-a1) / norm(a2-a1) * (a2-a1);\n}\n\n// 点pの直線aへの反射点を返す\nPoint Reflection(Point a1, Point a2, Point p){\n    return 2.0L*Proj(a1, a2, p) - p;\n}\n\n// 点と点\nLD DistPP(Point a, Point b){\n    return abs(a-b);\n}\n\n// 直線と点\nLD DistLP(Point a1, Point a2, Point p){\n    return abs(Proj(a1, a2, p) - p);\n}\n\n// 直線と直線\nLD DistLL(Point a1, Point a2, Point b1, Point b2) {\n    return IsecLL(a1, a2, b1, b2) ? 0 : DistLP(a1, a2, b1);\n}\n\n// 直線と線分\nLD DistLS(Point a1, Point a2, Point b1, Point b2) {\n    return IsecLS(a1, a2, b1, b2) ? 0 : min(DistLP(a1, a2, b1), DistLP(a1, a2, b2));\n}\n\n// 線分と点\nLD DistSP(Point a1, Point a2, Point p) {\n    if(Dot(a2-a1,p-a1) < EPS) return abs(p-a1);\n    if(Dot(a1-a2,p-a2) < EPS) return abs(p-a2);\n    return abs(Cross(a2-a1,p-a1)) / abs(a2-a1);\n}\n\n// 線分と線分\nLD DistSS(Point a1, Point a2, Point b1, Point b2) {\n    if(IsecSS(a1, a2, b1, b2)) return 0;\n    return min(min(DistSP(a1, a2, b1), DistSP(a1, a2, b2)), min(DistSP(b1, b2, a1), DistSP(b1, b2, a2)));\n}\n\n// ********************************************\n\n\n// 2直線の交点 (CrossPoint) *******************\nPoint CrossPointLL(Point a1, Point a2, Point b1, Point b2){\n    LD d1 = Cross(b2-b1, b1-a1);\n    LD d2 = Cross(b2-b1, a2-a1);\n    if (EQ(d1, 0) && EQ(d2, 0)) return a1;\n    if (EQ(d2, 0)) throw \"not exist crosspoint\";\n    return a1 + d1/d2 * (a2-a1);\n}\n// ********************************************\n\n\n//*********************************************\n//             多角形(Polygon)                *\n//*********************************************\n\nnamespace std {\n    bool operator < (Point a, Point b){\n        return a.X != b.X ? a.X < b.X : a.Y < b.Y;\n    }\n}\n\n// 多角形の面積 (PolygonErea) *****************\nLD PolygonErea(Polygon p){\n    LD area = 0;\n    int n = p.size();\n    for(int i = 0; i < n; i++){\n        area += Cross(p[i], p[(i+1) % n]);\n    }\n    return area / 2;\n}\n// ********************************************\n\n\n// 凸性判定 (IsConvex) ************************\nbool IsConvex(Polygon pol){\n    int n = pol.size();\n    for(int i = 0; i < n; i++){\n        if(CCW(pol[i], pol[(i+1) % n], pol[(i+2) % n]) == -1) return false;\n    }\n    return true;\n}\n// ********************************************\n\n\n// 多角形-点包含関係 (PolygonPointContainment)\nint PolygonPointContainment(Polygon pol, Point p){\n    enum {OUT, ON, IN};\n    bool in = false;\n    int n = pol.size();\n    for(int i = 0; i < n; i++){\n        Point a = pol[i] - p, b = pol[(i+1) % n] - p;\n        if(a.Y > b.Y) swap(a, b);\n        if(a.Y <= 0 && 0 < b.Y && Cross(a, b) < 0) in = !in;\n        if(Cross(a, b) == 0 && Dot(a, b) <= 0) return ON;\n    }\n    return in ? IN : OUT;\n}\n// ********************************************\n\n\n//*********************************************\n//          凸多角形(ConvexPolygon)           *\n//*********************************************\n\n// 凸包[θ<=180] (ConvexHull) *****************\nPolygon ConvexHull(Polygon pol){\n    int n = pol.size(), k = 0;\n    sort(pol.begin(), pol.end());\n    Polygon ch(2*n);\n    for(int i = 0; i < n; ch[k++] = pol[i++])\n        while(k >= 2 && CCW(ch[k-2], ch[k-1], pol[i]) == -1) --k;\n\n    for(int i = n-2, t = k+1; i >= 0; ch[k++] = pol[i--])\n        while(k >= t && CCW(ch[k-2], ch[k-1], pol[i]) == -1) --k;\n\n    ch.resize(k-1);\n    return ch;\n}\n// ********************************************\n\n// 凸包[θ<180] (ConvexHull2) *****************\nPolygon ConvexHull2(Polygon pol){\n    int n = pol.size(), k = 0;\n    sort(pol.begin(), pol.end());\n    Polygon ch(2*n);\n    for(int i = 0; i < n; ch[k++] = pol[i++])\n        while(k >= 2 && CCW(ch[k-2], ch[k-1], pol[i]) <= 0) --k;\n\n    for(int i = n-2, t = k+1; i >= 0; ch[k++] = pol[i--])\n        while(k >= t && CCW(ch[k-2], ch[k-1], pol[i]) <= 0) --k;\n\n    ch.resize(k-1);\n    return ch;\n}\n// ********************************************\n\n// 凸多角形の直径 (ConvexPolygonDiameter) *****\npair<int, int> ConvexPolygonDiameter(Polygon cpol){\n    int n = cpol.size();\n    int is = 0, js = 0;\n    for (int i = 1; i < n; ++i) {\n        if (imag(cpol[i]) > imag(cpol[is])) is = i;\n        if (imag(cpol[i]) < imag(cpol[js])) js = i;\n    }\n    LD maxd = norm(cpol[is]-cpol[js]);\n\n    int i, maxi, j, maxj;\n    i = maxi = is;\n    j = maxj = js;\n    do{\n        if(Cross(cpol[(i+1)%n] - cpol[i], cpol[(j+1)%n] - cpol[j]) >= 0) j = (j+1) % n;\n        else i = (i+1) % n;\n        if(norm(cpol[i]-cpol[j]) > maxd) {\n            maxd = norm(cpol[i]-cpol[j]);\n            maxi = i; maxj = j;\n        }\n    } while(i != is || j != js);\n    return make_pair(maxi, maxj);\n}\n// ********************************************\n\n\n// 凸多角形の切断 (ConvexPolygonCut) **********\nPolygon ConvexPolygonCut(Polygon cpol, Line l){\n    int n = cpol.size();\n    Polygon q;\n    for(int i = 0; i < n; i++){\n        Point a = cpol[i], b = cpol[(i+1)%n];\n        if(CCW(l.first, l.second, a) != -1) q.push_back(a);\n        if(CCW(l.first, l.second, a) * CCW(l.first, l.second, b) < 0) q.push_back(CrossPointLL(a, b, l.first, l.second));\n    }\n    return q;\n}\n// ********************************************\n\n\n// 凸多角形-点包含関係 (ConvexPolygonPointContainment)\nint ConvexPolygonPointContainment(Polygon cpol, Point p){\n    enum {OUT, ON, IN};\n    int n = cpol.size();\n    Point g = (cpol[0] + cpol[n/3] + cpol[2*n/3]) / 3.0L;\n    int a = 0, b = n;\n    while(a+1 < b){\n        int c = (a + b) / 2;\n        if(Cross(cpol[a]-g, cpol[c]-g) > 0){\n            if(Cross(cpol[a]-g, p-g) > 0 && Cross(cpol[c]-g, p-g) < 0) b = c;\n            else a = c;\n        }else{\n            if(Cross(cpol[a]-g, p-g) < 0 && Cross(cpol[c]-g, p-g) > 0) a = c;\n            else b = c;\n        }\n    }\n    b %= n;\n    if(Cross(cpol[a]-p, cpol[b]-p) < 0) return OUT;\n    if(Cross(cpol[a]-p, cpol[b]-p) > 0) return IN;\n    return ON;\n}\n// ********************************************\n\n// 最近点対 (ClosestPair) *********************\npair<Point, Point> ClosestPair(Polygon p){\n    int n = p.size();\n    sort(p.begin(), p.end(), [](Point p, Point q) { return p.Y < q.Y; });\n    \n    auto u = p[0], v = p[1];\n    auto best = Dot(u-v, u-v);\n    auto update = [&](Point p, Point q) {\n        auto dist = Dot(p-q, p-q);\n        if (best > dist) { best = dist; u = p; v = q; }\n    };\n    set<Point> S; S.insert(u); S.insert(v);\n    for (int l = 0, r = 2; r < n; ++r) {\n        if (S.count(p[r])) return {p[r], p[r]};\n        if ((p[l].Y-p[r].Y)*(p[l].Y-p[r].Y) > best) S.erase(p[l++]);\n        auto i = S.insert(p[r]).first;\n        for (auto j = i; ; ++j) {\n            if (j == S.end() || (i->X-j->X)*(i->X-j->X) > best) break;\n            if (i != j) update(*i, *j);\n        }\n        for (auto j = i; ; --j) {\n            if (i != j) update(*i, *j);\n            if (j == S.begin() || (i->X-j->X)*(i->X-j->X) > best) break;\n        }\n    }\n    return make_pair(u, v);\n}\n// ********************************************\n\n\n//*********************************************\n//                円(Circle)                  *\n//*********************************************\ntypedef pair<Point, LD> Circle;\n\n// 円と円の交差判定 ***************************\nint IsecCC(Circle c1, Circle c2){\n    // 0: 包含, 1: 内接, 2: 2点で交わる, 3: 外接, 4: 離れている\n    enum{INCLUSION, INSCRIBED, INTERSECT, CIRCUMSCRIBED, LEAVE};\n    LD d = DistPP(c1.first, c2.first);\n    if(d > c1.second + c2.second) return LEAVE;\n    else if(EQ(d, c1.second + c2.second)) return CIRCUMSCRIBED;\n    else if(abs(c1.second - c2.second) < d && d < c1.second + c2.second) return INTERSECT;\n    else if(EQ(d, abs(c1.second - c2.second))) return INSCRIBED;\n    else return INCLUSION;\n}\n// ********************************************\n\n\n\n/************** using variables ***************/\nPolygon p;\nCircle c[2];\nint n;\nint q;\n/**********************************************/\n\nsigned main(){\n    REP(i, 2){\n        LD xp, yp, r;\n        cin >> xp >> yp >> r;\n        c[i] = Circle(Point(xp, yp), r);\n    }\n    cout << IsecCC(c[0], c[1]) << endl;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\n#define rep(i,n) for(int i=0;i<(int)(n);i++)\n#define FOR(i,n,m) for(int i=(int)(n); i<=(int)(m); i++)\n#define RFOR(i,n,m) for(int i=(int)(n); i>=(int)(m); i--)\n#define ITR(x,c) for(__typeof(c.begin()) x=c.begin();x!=c.end();x++)\n#define RITR(x,c) for(__typeof(c.rbegin()) x=c.rbegin();x!=c.rend();x++)\n#define setp(n) fixed << setprecision(n)\n\ntemplate<class T> bool chmax(T &a, const T &b) { if (a<b) { a=b; return 1; } return 0; }\ntemplate<class T> bool chmin(T &a, const T &b) { if (a>b) { a=b; return 1; } return 0; }\n\n#define ll long long\n#define vll vector<ll>\n#define vi vector<int>\n#define pll pair<ll,ll>\n#define pi pair<int,int>\n\n#define all(a) (a.begin()),(a.end())\n#define rall(a) (a.rbegin()),(a.rend())\n#define fi first\n#define se second\n#define pb push_back\n#define mp make_pair\n#define ins insert\n\nusing namespace std;\n\n//-------------------------------------------------\n//--Geometry Template (Plane)\n//-------------------------------------------------\n\nusing lf = double;\nconst lf EPS = 1e-9;\nconst lf PI = acos(-1);\n\n#define sgn(x) (((x)<-EPS)?-1:((x)>EPS)?1:0)\n#define EQ(x,y) (sgn((y)-(x))==0)\n\nstruct V {\n    lf x,y;\n    V(){}\n    V(lf x, lf y):x(x),y(y){}\n    V(const V &v):x(v.x),y(v.y){}\n    V& operator+=(const V &v){x+=v.x; y+=v.y; return *this;}\n    V& operator-=(const V &v){x-=v.x; y-=v.y; return *this;}\n    V& operator*=(lf k){x*=k; y*=k; return *this;}\n    V& operator/=(lf k){x/=k; y/=k; return *this;}\n    V operator+(const V &v){return V(*this)+=v;}\n    V operator-(const V &v){return V(*this)-=v;}\n    V operator*(lf k){return V(*this)*=k;}\n    V operator/(lf k){return V(*this)/=k;}\n    V operator-(){return V(-x,-y);}\n    lf sq(){return x*x+y*y;}\n    lf norm(){return sqrt(sq());}\n    V unit(){return V(*this)/=norm();}\n    lf arg(){return atan2(y,x);}\n    V rot(lf c, lf s){return V(x*c-y*s,x*s+y*c);}\n    V rot(lf a){return rot(sin(a),cos(a));}\n    V rot90(){return V(-y,x);}\n    bool operator<(const V &v){\n        if (sgn(x-v.x)) return sgn(x-v.x)<0;\n        return sgn(y-v.y)<0;\n    }\n    friend ostream& operator<<(ostream &os, const V &v){return os<<'('<<v.x<<\", \"<<v.y<<')';}\n};\n\nlf dot(const V &a, const V &b){return a.x*b.x+a.y*b.y;}\nlf det(const V &a, const V &b){return a.x*b.y-a.y*b.x;}\n\nint ccw(V a, V b, V c){\n    b-=a; c-=a;\n    if (sgn(det(b,c))>0) return 1;\n    else if(sgn(det(b,c))<0) return -1;\n    else if(sgn(dot(b,c))<0) return 2;\n    else if(sgn(b.norm()-c.norm())<0) return -2;\n    return 0;\n}\n\nstruct Line {\n    V p,q;\n    Line(){}\n    Line(const V &p, const V &q):p(p),q(q){}\n    Line(const Line &l):Line(l.p,l.q){}\n    V unit(){return (q-p).unit();}\n    lf arg(){return (q-p).arg();}\n    Line rot(lf c, lf s){return Line(p.rot(c,s),q.rot(c,s));}\n    Line rot(lf a){return Line(p.rot(a),q.rot(a));}\n    Line rot90(){return Line(p.rot90(),q.rot90());}\n};\n\nstruct Segment : Line {\n    Segment(){}\n    Segment(const V &p, const V &q):Line(p,q){}\n    Segment(const Segment &s):Line(s){}\n    lf sq(){return (Line::q-Line::p).sq();}\n    lf norm(){return (Line::q-Line::p).norm();}\n};\n\n// functions about lines\nbool parallel(const V &a, const V &b){return EQ(det(a,b),0.0);}\nbool parallel(Line &a, Line &b){return EQ(det(a.q-a.p,b.q-b.p),0.0);}\nbool orthogonal(const V &a, const V &b){return EQ(dot(a,b),0.0);}\nbool orthogonal(Line &a, Line &b){return EQ(dot(a.q-a.p,b.q-b.p),0.0);}\n\nbool samel(Line &a, Line &b){return parallel(a,b)&&EQ(det(a.q-a.p,b.p-a.p),0.0);}\nbool insec(Line &a, Line &b){return !parallel(a,b);}\nbool insec(Segment &a, Segment &b){\n    int c1 = ccw(a.p,a.q,b.p)*ccw(a.p,a.q,b.q);\n    int c2 = ccw(b.p,b.q,a.p)*ccw(b.p,b.q,a.q);\n    return (c1<=0 && c2<=0);\n}\nbool insec(Line &a, Segment &b){return ccw(a.p,a.q,b.p)*ccw(a.p,a.q,b.q)<=0;}\n\n// use only if lines have intersection\nV cpoint(Line &a, Line &b){\n    V r(a.q-a.p);\n    r *= det(b.p-a.p,b.q-b.p)/det(a.q-a.p,b.q-b.p);\n    return a.p+r;\n}\n\nlf distance(V &a, V &b){return (b-a).norm();}\nlf distance(Line &l, V &v){return abs(det((l.q-l.p).unit(),v-l.p));}\nlf distance(Line &a, Line &b){return (parallel(a,b))?distance(a,b.p):0.0;}\nlf distance(Segment &s, V &v){\n    if (sgn(dot(s.q-s.p,v-s.p))<0) return distance(s.p,v);\n    else if(sgn(dot(s.p-s.q,v-s.q))<0) return distance(s.q,v);\n    return distance((Line&)s,v);\n}\nlf distance(Segment &a, Segment &b){\n    if (insec(a,b)) return 0.0;\n    lf A=min(distance(a,b.p),distance(a,b.q));\n    lf B=min(distance(b,a.p),distance(b,a.q));\n    return min(A,B);\n}\nlf distance(Line &a, Segment &b){\n    if (insec(a,b)) return 0.0;\n    return min(distance(a,b.p),distance(a,b.q));\n}\n\nV subdiv(V &a, V &b, lf m, lf n){return (a*n+b*m)/(m+n);}\nV outside(V &a, V &b, lf m, lf n){return (-a*n+b*m)/(m-n);}\nV ppfoot(Line &l, V &v){\n    V u = (l.q-l.p).unit();\n    return l.p+u*dot(u,v-l.p);\n}\nV reflect(Line &l, V &v){\n    V f = ppfoot(l,v);\n    return f+(f-v);\n}\n\nLine vbsector(V &a, V &b){\n    V m = (a+b)/2;\n    return Line(m, m+(b-a).rot90());\n}\nLine absector(V &c, V &a, V &b){\n    lf m=(a-c).norm(), n=(b-c).norm();\n    return Line(c,subdiv(a,b,m,n));\n}\nLine perpend(V &c, V &a, V &b){return Line(c,c+(b-a).rot90());}\n\n//-------------------------------------------------\n//--Polygon (depends on Geometry Template)\n//-------------------------------------------------\n\n//anti-clockwise\nstruct Polygon {\n    vector<V> ps; int n;\n    Polygon():n(0){}\n    Polygon(int n):n(n),ps(n){}\n    void push(const V &v){ps.push_back(v), n++;}\n    void pop(){ps.pop_back(), n--;}\n    V& operator[](int k){return ps[k%n];}\n};\n\nlf area(Polygon &p){\n    lf ret=0.0;\n    for(int i=0; i<p.n; i++)\n        ret+=det(p[i],p[i+1])/2;\n    return ret;\n}\n\nV gravity(Polygon &p){\n    V ret(0,0); lf wsum=0.0;\n    for(int i=0; i<p.n; i++){\n        lf w = det(p[i],p[i+1]);\n        ret+=(p[i]+p[i+1])/3*w;\n        wsum+=w;\n    }\n    return ret/wsum;\n}\n\nbool convex(Polygon &p){\n    for(int i=0; i<p.n; i++)\n        if (sgn(det(p[i]-p[i+1],p[i+1]-p[i+2]))<0) return false;\n    return true;\n}\n\nPolygon convex_full(vector<V> &ps){\n    Polygon ret;\n    sort(ps.begin(), ps.end());\n    for(int i=0; i<ps.size(); i++){\n        while(ret.n>1 && sgn(det(ret[ret.n-1]-ret[ret.n-2],ps[i]-ret[ret.n-1]))<=0) ret.pop();\n        ret.push(ps[i]);\n    }\n    for(int i=ps.size()-2, t=ret.n; i>=0; i--){\n        while(ret.n>t && sgn(det(ret[ret.n-1]-ret[ret.n-2],ps[i]-ret[ret.n-1]))<=0) ret.pop();\n        ret.push(ps[i]);\n    }\n    ret.pop();\n    return ret;\n}\n\nPolygon convex_cut(Polygon &p, Line &l){\n    Polygon ret;\n    for(int i=0; i<p.n; i++){\n        if (ccw(l.p,l.q,p[i])!=-1) ret.push(p[i]);\n        if (ccw(l.p,l.q,p[i])*ccw(l.p,l.q,p[i+1])==-1){\n            Segment s(p[i+1],p[i]);\n            ret.push(cpoint(l,s));\n        }\n    }\n    return ret;\n}\n\n// OUT=0, ON=1, IN=2\nint contain(Polygon &p, const V &v){\n    int ret=0;\n    for(int i=0; i<p.n; i++){\n        V a=p[i]-v, b=p[i+1]-v;\n        if (a.y>b.y) swap(a,b);\n        if (sgn(a.y)<0 && sgn(b.y)>=0 && sgn(det(a,b))<0) ret=2-ret;\n        if (EQ(det(a,b),0.0) && sgn(dot(a,b))<=0) return 1;\n    }\n    return ret;\n}\n\n//-------------------------------------------------\n//--Circle (depends on Geometry Template)\n//-------------------------------------------------\n\nstruct Circle {\n    V p; lf r;\n    Circle(){}\n    Circle(const V &v, lf r):p(v),r(r){}\n    Circle(const Circle &c):p(c.p),r(c.r){}\n    lf area(){return r*r*PI;}\n    lf area(lf t){return r*r*t/2;}\n};\n\n// functons about circles\nbool contain(Circle &c, V &v){return sgn(distance(v,c.p)-c.r)<=0;}\nbool contain(Circle &c, Segment &s){\n    return sgn(max(distance(s.p,c.p),distance(s.q,c.p))-c.r)<=0;\n}\nbool insec(Circle &c, Line &l){return sgn(distance(l,c.p)-c.r)<=0;}\nbool insec(Circle &c, Segment &s){\n    return sgn(distance(s,c.p)-c.r)<=0 && sgn(max(distance(s.p,c.p),distance(s.q,c.p))-c.r)>=0;\n}\n\nvector<V> cpoint(Circle &a, Circle &b){\n    vector<V> ret;\n    V ab(b.p-a.p);\n    lf d = ab.norm(), dd = ab.sq();\n    lf c = (a.r*a.r+dd-b.r*b.r)/(2.0*a.r*d);\n    if (sgn(abs(c)-1.0)>0) return ret;\n    if (EQ(abs(c),1.0)){\n        c = (c>0)?1:-1;\n        ret.push_back(a.p+ab.unit().rot(c,0)*a.r);\n    }else{\n        lf s = sqrt(1.0-c*c);\n        ret.push_back(a.p+ab.unit().rot(c,s)*a.r);\n        ret.push_back(a.p+ab.unit().rot(c,-s)*a.r);\n    }\n    return ret;\n}\n\nvector<V> cpoint(Circle &c, Line &l){\n    vector<V> ret;\n    lf d = distance(l,c.p);\n    if (sgn(d-c.r)>0) return ret;\n    V h = ppfoot(l,c.p);\n    if (EQ(d,c.r)){\n        ret.push_back(h);\n    }else{\n        V r = (l.q-l.p).unit()*sqrt(c.r*c.r-d*d);\n        ret.push_back(h+r);\n        ret.push_back(h-r);\n    }\n    return ret;\n}\n\nvector<V> tangent(Circle &c, const V &v){\n    lf rr=(c.p-v).sq()-c.r*c.r;\n    if (sgn(rr)<0) return vector<V>();\n    Circle c2(v,sqrt(rr));\n    return cpoint(c,c2);\n}\n\nvector<V> tangent(Circle &a, Circle &b){\n    vector<V> ret, t;\n    ret = tangent(a, subdiv(a.p,b.p,a.r,b.r));\n    if (!EQ(a.r,b.r)){\n        t = tangent(a, outside(a.p,b.p,a.r,b.r));\n    }else{\n        V r = (b.p-a.p).unit().rot90()*a.r;\n        t.push_back(a.p+r);\n        t.push_back(a.p-r);\n        // Line l = perpend(a.p,a.p,b.p);\n        // t = cpoint(a,l);\n    }\n    for(auto p:t) ret.push_back(p);\n    return ret;\n}\n\nlf carea(Circle &a, Circle &b){\n    lf d = distance(a.p,b.p);\n    if (sgn(d+a.r-b.r)<=0) return a.area();\n    if (sgn(d+b.r-a.r)<=0) return b.area();\n    auto cps = cpoint(a,b);\n    if (cps.size()<2) return 0.0;\n    lf t1 = acos(dot((cps[1]-a.p).unit(),(cps[0]-a.p).unit()));\n    if (sgn(det(cps[1]-a.p,cps[0]-a.p))<0) t1=2*PI-t1;\n    lf t2 = acos(dot((cps[0]-b.p).unit(),(cps[1]-b.p).unit()));\n    if (sgn(det(cps[0]-b.p,cps[1]-b.p))<0) t2=2*PI-t2;\n    return a.area(t1)+b.area(t2)-d*(cps[1]-cps[0]).norm()/2;\n}\n\n//-------------------------------------------------\n\nint main(void)\n{\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    cout<<setp(12);\n    int x,y,r; cin>>x>>y>>r;\n    Circle c1(V(x,y),r);\n    cin>>x>>y>>r;\n    Circle c2(V(x,y),r);\n    auto cps = tangent(c1,c2);\n    cout<<cps.size()<<endl;\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i,n) for(int i=0;i<n;++i)\n\ntypedef complex<double> Point;\ntypedef pair<Point, Point> Line;\nconst double EPS = 1e-5;\n#define LE(n,m) ((n) < (m) + EPS)\n\nvector<Line> tangentLines(Point a, double ar, Point b, double br) {\n  vector<Line> ls;\n  double d = abs(b-a);\n  rep (i,2) {\n    double sin = (ar - (1-i*2)*br) / d;\n    if (!LE(sin*sin, 1)) break;\n    double cos = sqrt(max(1 - sin*sin, 0.0));\n    rep (j,2) {\n      Point n = (b-a) * Point(sin, (1-j*2)*cos) / d;\n      ls.push_back(Line(a + ar*n, b + (1-i*2)*br*n));\n      if (cos < EPS) break;  // ??????????????\\?????????????????????????????????????????????????????????\n    }\n  }\n  return ls;\n}\n\nint main(void){\n    double c1x,c1y,c1r,c2x,c2y,c2r;\n    cin>>c1x>>c1y>>c1r>>c2x>>c2y>>c2r;\n    cout<<tangentLines(Point(c1x,c1y),c1r,Point(c2x,c2y),c2r).size()<<endl;\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<vector>\n#include<algorithm>\n#include<utility>\n#include<numeric>\n#include<iostream>\n#include<array>\n#include<string>\n#include<sstream>\n#include<stack>\n#include<queue>\n#include<list>\n#include<functional>\n#include<set>\n#include<complex>\n#include<complex>\n#define _USE_MATH_DEFINES\n\n#include<math.h>\n#include<map>\n\n#define INF 200000000\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef pair<ll, ll> pll;\ntypedef pair<ll, int> pli;\ntypedef pair<double, double> pdd;\n\nenum\n{\n\tBOTTOM,\n\tLEFT,\n\tRIGHT,\n\tTOP\n};\n\nstruct P\n{\n\tdouble x, y;\n\tP(double x,double y) :x(x), y(y) {}\n\tP() :P(0, 0) {}\n\tP operator+(const P& v)const\n\t{\n\t\treturn P(x + v.x, y + v.y);\n\t}\n\tP operator-(const P& v)const\n\t{\n\t\treturn P(x - v.x, y - v.y);\n\t}\n\tP operator*(const double v)const\n\t{\n\t\treturn P(x*v, y*v);\n\t}\n\tbool operator==(const P& v)const\n\t{\n\t\treturn abs(x - v.x) <= 0.0000000000001&&abs(y - v.y) <= 0.00000000000001;\n\t}\n\tbool operator!=(const P& v)const\n\t{\n\t\treturn abs(x - v.x) > 0.0000000000001 || abs(y - v.y) > 0.00000000000001;\n\t}\n\n\tdouble dot(const P& v)const\n\t{\n\t\treturn x*v.x + y*v.y;\n\t}\n\tdouble cross(const P& v)const\n\t{\n\t\treturn x*v.y - y*v.x;\n\t}\n\tdouble length()const\n\t{\n\t\treturn sqrt(x*x + y*y);\n\t}\n\tdouble length2()const\n\t{\n\t\treturn (x*x + y*y);\n\t}\n\t\n\tbool operator<(const P& v)const\n\t{\n\t\treturn x<v.x || (x == v.x) && y < v.y;\n\t}\n\tbool operator>(const P& v)const\n\t{\n\t\treturn x>v.x || (x == v.x) && y > v.y;\n\t}\n};\n\nint main()\n{\n\tcin.tie(0);\n\tios::sync_with_stdio(false);\n\n\tdouble x1, y1, r1, x2, y2, r2;\n\tcin >> x1 >> y1 >> r1 >> x2 >> y2 >> r2;\n\tP p1(x1, y1), p2(x2, y2);\n\n\tif ((p1 - p2).length() > (r1 + r2))\n\t{\n\t\tcout << \"4\" << endl;\n\t}\n\telse if ((p1 - p2).length() == (r1 + r2))\n\t{\n\t\tcout << \"3\" << endl;\n\t}\n\telse\n\t{\n\t\tif (((p1 - p2).length() + min(r1, r2)) < max(r1, r2))\n\t\t{\n\t\t\tcout << \"0\" << endl;\n\t\t}\n\t\telse if (((p1 - p2).length() + min(r1, r2)) == max(r1, r2))\n\t\t{\n\t\t\tcout << \"1\" << endl;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcout << \"2\" << endl;\n\t\t}\n\t}\n\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "////////////////////\n// ???????????????\n#include<cmath>\n#include<algorithm>\n#include<cassert>\n////////////////////\n// ??¨????????¢???\nusing D = double;\n////////////////////\n// ?????°\nconst D EPS = 1e-9;                // |EPS|???????????°???0??¨????????±???\nenum POSITION {ONLINE_FRONT = -2, CLOCKWISE, ON_SEGMENT, COUNTER_CLOCKWISE, ONLINE_BACK};   // 3??????????????¢???\n////////////////////\n// ?§???????\nstruct Point {\n  D x, y;\n  Point(const D d = 0.0) : x(d), y(d) {}\n  Point(const D x, const D y) : x(x), y(y) {}\n};\nstruct Segment {\n  Point initial, terminal;\n  Segment(const Point& initial, const Point& terminal) : initial(initial), terminal(terminal) {}\n  Segment(const D x1, const D y1, const D x2, const D y2) : initial(x1, y1), terminal(x2, y2) {}\n};\nstruct Line {\n  Point initial, terminal;\n  Line(const Point& initial, const Point& terminal) : initial(initial), terminal(terminal) {}\n  Line(const D x1, const D y1, const D x2, const D y2) : initial(x1, y1), terminal(x2, y2) {}\n  Line(const Segment& s) : initial(s.initial), terminal(s.terminal) {}\n};\n////////////////////\n// ????£?\nbool relative_equal(const D d1, const D d2) {return d1 == 0 ? std::abs(d2) < EPS : std::abs((d1 - d2) / d1) < EPS;}\n// ??????????????????????????????\nbool operator==(const Point& lhs, const Point& rhs) {return relative_equal(lhs.x, rhs.x) && relative_equal(lhs.y, rhs.y);}\nbool operator<(const Point& lhs, const Point& rhs) {return relative_equal(lhs.x, rhs.x) ? lhs.y < rhs.y : lhs.x < rhs.x;}\nbool operator>(const Point& lhs, const Point& rhs) {return relative_equal(lhs.x, rhs.x) ? lhs.y > rhs.y : lhs.x > rhs.x;}\nbool operator!=(const Point& lhs, const Point& rhs) {return !(lhs == rhs);}\nbool operator<=(const Point& lhs, const Point& rhs) {return !(lhs > rhs);}\nbool operator>=(const Point& lhs, const Point& rhs) {return !(lhs < rhs);}\nconst Point operator+(const Point& lhs, const Point& rhs) {return Point(lhs.x + rhs.x, lhs.y + rhs.y);}\nconst Point operator-(const Point& lhs, const Point& rhs) {return Point(lhs.x - rhs.x, lhs.y - rhs.y);}\nconst Point operator*(const Point& lhs, const Point& rhs) {return Point(lhs.x * rhs.x, lhs.y * rhs.y);}\nconst Point operator/(const Point& lhs, const Point& rhs) {return Point(lhs.x / rhs.x, lhs.y / rhs.y);}\nconst Point operator-(const Point& p) {return Point(-p.x, -p.y);}\n// ???\nD abs(const Point& p) {return std::hypot(p.x, p.y);}\nD norm(const Point& p) {return p.x * p.x + p.y * p.y;}\nD dot(const Point& a, const Point& b) {return a.x * b.x + a.y * b.y;}\nD cross(const Point& a, const Point& b) {return a.x * b.y - a.y * b.x;}\n// const Point normalize(const Point& p) {return p / abs(p);}\n// const Point normal(const Point& p) {return normalize(Point(-p.y, p.x));}\n// ??´???\nbool parallel(const Line& l1, const Line& l2) {return relative_equal(0.0, cross(l2.terminal - l2.initial, l1.terminal - l1.initial));}\nbool orthogonal(const Line& l1, const Line& l2) {return relative_equal(0.0, dot(l2.terminal - l2.initial, l1.terminal - l1.initial));}\n// 3??????????????¢???\nPOSITION ccw(const Point& a, const Point& b, const Point& p) {\n  Point v1 = b - a;\n  Point v2 = p - a;\n  if(cross(v1, v2) >= EPS) return COUNTER_CLOCKWISE;\n  if(cross(v1, v2) <= -EPS) return CLOCKWISE;\n  if(dot(v1, v2) <= -EPS) return ONLINE_BACK;\n  if(norm(v1) < norm(v2)) return ONLINE_FRONT;              // ????????????: norm(v1)<norm(v2)+EPS?????¨WrongAnswer\n  return ON_SEGMENT;\n}\n// ????????????\nbool intersect(const Point& p1, const Point& p2) {return p1 == p2;}\nbool intersect(const Point& p, const Segment& s) {return abs(p - s.initial) + abs(p - s.terminal) - abs(s.initial - s.terminal) <= EPS;}\nbool intersect(const Segment& s, const Point& p) {return intersect(p, s);}\nbool intersect(const Point& p, const Line& l) {return !parallel(Line(p, l.initial), Line(p, l.terminal));}\nbool intersect(const Line& l, const Point& p) {return intersect(p, l);}\nbool intersect(const Segment& s1, const Segment& s2) {\n  return ccw(s1.initial, s1.terminal, s2.initial) * ccw(s1.initial, s1.terminal, s2.terminal) <= 0\n      && ccw(s2.initial, s2.terminal, s1.initial) * ccw(s2.initial, s2.terminal, s1.terminal) <= 0;\n}\nbool intersect(const Segment& s, const Line& l) {\n  auto v1 = l.terminal - l.initial;\n  auto v2 = s.initial  - l.initial;\n  auto v3 = s.terminal - l.initial;\n  return cross(v1, v2) * cross(v1, v3) <= EPS;\n}\nbool intersect(const Line& l, const Segment& s) {return intersect(s, l);}\nbool intersect(const Line& l1, const Line& l2) {return !parallel(l1, l2) || intersect(l1.initial, l2);}\n// ???????§????\nPoint rotate(const Point& p, const D a) {return Point(p.x * std::cos(a) - p.y * std::sin(a), p.x * std::sin(a) + p.y * std::cos(a));}\nPoint projection(const Point& p, const Line& l) {\n  auto v = l.initial - l.terminal;\n  return l.initial + dot(p - l.initial, v) / norm(v) * v;\n}\nPoint projection(const Line& l, const Point& p) {return projection(p, l);}\nPoint reflection(const Point& p, const Line& l) {return p + 2 * (projection(p, l) - p);}\nPoint reflection(const Line& l, const Point& p) {return reflection(p, l);}\n// ?????¢\nD distance(const Point& p1, const Point& p2) {\n  auto p = p1 - p2;\n  return hypot(p.x, p.y);\n}\nD distance(const Point& p, const Segment& s) {\n  auto r = projection(s, p);\n  return intersect(r, s) ? distance(p, r) : std::min(distance(p, s.initial), distance(p, s.terminal));\n}\nD distance(const Segment& s, const Point& p) {return distance(p, s);}\nD distance(const Point& p, const Line& l) {return distance(p, projection(p, l));}\nD distance(const Line& l, const Point& p) {return distance(p, l);}\nD distance(const Segment& s1, const Segment& s2) {\n  return intersect(s1, s2) ? 0.0 : std::min({distance(s1, s2.initial), distance(s1, s2.terminal), distance(s2, s1.initial), distance(s2, s1.terminal)});\n}\nD distance(const Segment& s, const Line& l) {return intersect(s, l) ? 0.0 : std::min(distance(s.initial, l), distance(s.terminal, l));}\nD distance(const Line& l,const Segment& s) {return distance(s, l);}\nD distance(const Line& l1, const Line& l2) {return intersect(l1, l2) ? 0.0 : distance(l1.initial, l2);}\n// ??????\nconst Point crosspoint(const Line& l1, const Line& l2) {\n  assert(intersect(l1, l2));\n  if(parallel(l1, l2)) return l1.initial;                   // ???????????¨???l1????§?????????????\n  D A = cross(l1.terminal - l1.initial, l2.terminal - l2.initial);\n  D B = cross(l1.terminal - l1.initial, l1.terminal - l2.initial);\n  return l2.initial + B / A * (l2.terminal - l2.initial);\n}\nconst Point crosspoint(const Segment& s, const Line& l) {\n  assert(intersect(s, l));\n  if(parallel(s, l)) return s.initial;\n  return crosspoint(Line(s), l);\n}\nconst Point crosspoint(const Line& l, const Segment& s) {return crosspoint(s, l);}\nconst Point crosspoint(const Segment& s1, const Segment& s2) {\n  assert(intersect(s1, s2));\n  if(parallel(s1, s2)) {                                    // ???????????¨?????????????????????????????????\n    if(intersect(s1.initial,  s2)) return s1.initial;\n    if(intersect(s1.terminal, s2)) return s1.terminal;\n    if(intersect(s2.initial,  s1)) return s2.initial;\n    if(intersect(s2.terminal, s1)) return s2.terminal;\n  }\n  return crosspoint(Line(s1), Line(s2));\n}\n// ???????????°??¨\n#include<iostream>\nstd::ostream& operator<<(std::ostream& os, const Point& p) {os<<\"point: \"; os<<\"(\"<<p.x<<\",\"<<p.y<<\")\"; return os;}\nstd::ostream& operator<<(std::ostream& os, const Segment& s) {os<<\"segment: \"; os<<s.initial<<\" - \"<<s.terminal; return os;}\nstd::ostream& operator<<(std::ostream& os, const Line& l) {os<<\"line: \"; os<<l.initial<<\" - \"<<l.terminal; return os;}\n////////////////////////////////////////////////////////////////////////////////\n// ???\n#include<vector>\nconst D PI = std::acos(-1);\nstruct Circle {\n  Point center;\n  D radius;\n  Circle(const Point& center = 0, const D radius = 0) : center(center), radius(radius) {}\n  Circle(const D x, const D y, const D radius) : center(x, y), radius(radius) {}\n};\nD area(const Circle& c) {return PI * c.radius * c.radius;}\nbool contain(const Circle& c, const Point& p) {\n  D d = abs(p - c.center);\n  if(relative_equal(c.radius, d)) return true;\n  return d < c.radius;\n}\nbool contain(const Point& p, const Circle& c) {return contain(c, p);}\nstd::vector<Point> crosspoint(const Circle& c, const Line& l) {\n  std::vector<Point> cp;\n  Point v = projection(c.center, l) - c.center;\n  if(!contain(c, v)) return cp;\n  if(relative_equal(abs(v), 0)) {\n    Point p = l.initial - c.center;\n    if(p == 0) p = l.terminal - c.center;\n    p = (c.radius * p / abs(p));\n    cp.push_back(p);\n    cp.push_back(-p);\n    return cp;\n  }\n  D angle = acos(abs(v) / c.radius);\n  for(D a: {angle, -angle}) cp.push_back(c.radius * (rotate(v, a) / abs(v)));\n  return cp;\n}\nstd::vector<Point> crosspoint(const Line& l, const Circle& c) {return crosspoint(c, l);}\nint tangent(const Circle& c1, const Circle& c2) {\n  D d = abs(c1.center - c2.center);\n  D r = c1.radius + c2.radius;\n  if(relative_equal(d, r)) return 3;    // ?????\\\n  if(r < d) return 4;                   // ?????¢\n  r = std::abs(c1.radius - c2.radius);\n  if(relative_equal(d, r)) return 1;    // ?????\\\n  if(r < d) return 2;                   // ??????\n  return 0;                             // ??????\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// ????§???¢\n//   ????????????????????°??????????????´??? ??? ?????¢???????´????edge(void)???O(????????°)???edge().begin()????????£????????????????????????????????????????????????\n#include<vector>\n#include<algorithm>\n#include<numeric>\n#include<cmath>\n#include<utility>\nclass Polygon {\npublic:\n  // ??¨???\n  void add(const Point& p);\n  void clear();\n  // ?????±\n  int size() const;\n  Point vertex(const int n) const;\n  Segment edge(const int n) const;\n  const std::vector<Point>& vertex() const;\n  const std::vector<Segment>& edge() const;\n  // ??????\n  bool touch(const Point& p) const;\n  bool intersect(const Point& p) const;\n  D area() const;\n  bool convex() const;\n  // ???????§???¢\n  const Polygon convex_hull() const;\n  D convex_diameter() const;\n  const Polygon convex_cut(const Line& l) const;\nprivate:\n  std::vector<Point> vertex_;\n  std::vector<Segment> edge_;\n};\n// ??¨???\nvoid Polygon::add(const Point& p) {\n  if(!vertex_.empty()) {\n    if(!edge_.empty()) edge_.pop_back();\n    edge_.push_back(Segment(vertex_.back(), p));\n    edge_.push_back(Segment(p, vertex_.front()));\n  }\n  vertex_.push_back(p);\n}\nvoid Polygon::clear() {\n  vertex_.clear();\n  edge_.clear();\n};\n// ?????±\nint Polygon::size() const {return vertex_.size();}\nPoint Polygon::vertex(const int n) const {return vertex_.at(n);}\nSegment Polygon::edge(const int n) const {return edge_.at(n);}\nconst std::vector<Point>& Polygon::vertex() const {return vertex_;}\nconst std::vector<Segment>& Polygon::edge() const {return edge_;}\n// ??????\nbool Polygon::touch(const Point& p) const {\n  return std::any_of(std::begin(edge()), std::end(edge()), [=](const Segment& s) {return ccw(s.initial, s.terminal, p) == ON_SEGMENT;});\n}\nbool Polygon::intersect(const Point& p) const {\n  bool in = false;                    // p=(x,y)??????(INF,y)???????????´?????¨????§???¢??¨????????????????????° mod 2\n  for(const auto& e: edge()) {\n    if(::intersect(p, e)) return true;\n    Point a = e.initial  - p;\n    Point b = e.terminal - p;\n    if(a.y > b.y) std::swap(a, b);\n    if(a.y < EPS && EPS <= b.y && cross(a, b) < EPS) in = !in;\n  }\n  return in;\n}\nD Polygon::area() const {\n  return std::abs(std::accumulate(std::begin(edge()), std::end(edge()), 0.0, [=](const D sum, const Segment& e){return sum + cross(e.initial, e.terminal);})) / 2.0;\n}\nbool Polygon::convex() const {\n  bool positive = false;\n  bool negative = false;\n  for(int i = 0; i < size(); ++i) {\n    auto position = ccw(vertex(i), vertex((i + 1) % size()), vertex((i + 2) % size()));\n    positive |= position == CLOCKWISE;\n    negative |= position == COUNTER_CLOCKWISE;\n    if(negative && positive) return false;\n  }\n  return true;\n}\n// ???????§???¢\n// Andrew's Monotone Chain: O(n log n)\nconst Polygon Polygon::convex_hull() const {\n  auto original = vertex();\n  std::sort(std::begin(original), std::end(original));\n  original.insert(std::end(original), original.rbegin() + 1, original.rend());\n  std::vector<Point> point;\n  for(const auto& p: original) {\n    while(point.size() >= 2 && ccw(point[point.size() - 2], point.back(), p) == CLOCKWISE) point.pop_back();\n    point.push_back(p);\n  }\n  Polygon convex_hull;\n  point.pop_back();\n  for(const auto& p: point) convex_hull.add(p);\n  return convex_hull;\n}\n// Rotating calipers: O(n)\nD Polygon::convex_diameter() const {\n  auto point = vertex();\n  int p, q, start_p, start_q, max_p, max_q;\n  p = start_p = max_p = std::min_element(std::begin(point), std::end(point)) - std::begin(point);\n  q = start_q = max_q = std::max_element(std::begin(point), std::end(point)) - std::begin(point);\n  D max_d = norm(vertex(p) - vertex(q));\n  do {\n    if(cross(vertex((p + 1) % size()) - vertex(p), vertex((q + 1) % size()) - vertex(q)) >= 0) q = (q + 1) % size();\n    else p = (p + 1) % size();\n    if(norm(vertex(p) - vertex(q)) > max_d) {\n      max_d = norm(vertex(p) - vertex(q));\n      max_p = p;\n      max_q = q;\n    }\n  } while(start_p != q || start_q != p);\n  return std::sqrt(max_d);\n}\nconst Polygon Polygon::convex_cut(const Line& l) const {\n  Polygon result;\n  for(const auto& e: edge()) {\n    if(ccw(l.initial, l.terminal, e.initial) == COUNTER_CLOCKWISE) result.add(e.initial);\n    if(::intersect(e, l)) result.add(crosspoint(e, l));\n  }\n  return result;\n}\n////////////////////////////////////////////////////////////////////////////////\n#include<bits/stdc++.h>\nusing namespace std;\nint main() {\n  Circle c1, c2;\n  cin >> c1.center.x >> c1.center.y >> c1.radius;\n  cin >> c2.center.x >> c2.center.y >> c2.radius;\n  cout << tangent(c1, c2) << endl;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#ifndef Geometry_Complex_hpp\n#define Geometry_Complex_hpp\n\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n\n//BEGIN CUT HERE\nnamespace Geometry{\n#define F first\n#define S second\n  typedef long double D;\n  typedef complex<long double> P;\n  typedef pair<P,D> C;\n\n  const D EPS=1e-9;\n  const D PI=asin(1)*2;\n  const D INF=1e18;\n\n  static bool comp(const P &p1,const P &p2){\n    if(p1.real()==p2.real()){return p1.imag()<p2.imag();}\n    return p1.real()<p2.real();\n  }\n\n  static bool comp_y(const P &p1,const P &p2){\n    if(p1.imag()==p2.imag()){return p1.real()<p2.real();}\n    return p1.imag()<p2.imag();\n  }\n\n  static bool eqls(const P &p1,const P &p2){\n    return abs(p1-p2)<EPS;\n  }\n\n  D dot(P p1,P p2){\n    return p1.real()*p2.real()+p1.imag()*p2.imag();\n  }\n\n  D cross(P p1,P p2){\n    return p1.real()*p2.imag()-p1.imag()*p2.real();\n  }\n\n  P project(P vec,P x){\n    return vec*(x/vec).real();\n  }\n\n  P project(P p1,P p2,P x){\n    return p1+project(p2-p1,x-p1);\n  }\n\n  P reflect(P vec,P x){\n    return vec*conj(x/vec);\n  }\n\n  P reflect(P p1,P p2,P x){\n    return p1+reflect(p2-p1,x-p1);\n  }\n\n  bool intersectSL(P p1,P p2,P vec){\n    vec/=abs(vec); p1/=vec; p2/=vec;\n    return (p1.imag()<EPS && p2.imag()>-EPS)\n      || (p1.imag()>-EPS && p2.imag()<EPS);\n  }\n\n  bool intersectSL(P p1,P p2,P p3,P p4){\n    return intersectSL(p1-p4,p2-p4,p3-p4);\n  }\n\n  bool intersectSS(P p1,P p2,P p3,P p4){\n    if(dot(p2-p1,p3-p1)<-EPS && dot(p2-p1,p4-p1)<-EPS){return false;}\n    if(dot(p1-p2,p3-p2)<-EPS && dot(p1-p2,p4-p2)<-EPS){return false;}\n    return intersectSL(p1,p2,p3,p4) && intersectSL(p3,p4,p1,p2);\n  }\n\n  D distLP(P vec,P x){\n    return abs((x/vec).imag())*abs(vec);\n  }\n\n  D distLP(P p1,P p2,P x){\n    return distLP(p2-p1,x-p1);\n  }\n\n  D distSP(P p1,P p2,P x){\n    if(dot(p2-p1,x-p1)<-EPS){return abs(x-p1);}\n    if(dot(p1-p2,x-p2)<-EPS){return abs(x-p2);}\n    return distLP(p1,p2,x);\n  }\n\n  D distSS(P p1,P p2,P p3,P p4){\n    if(intersectSS(p1,p2,p3,p4)){return 0.0;}\n    return min({distSP(p1,p2,p3),distSP(p1,p2,p4),\n                distSP(p3,p4,p1),distSP(p3,p4,p2)});\n  }\n\n  P crosspointLL(P p1,P p2,P vec){\n    if(abs(cross(p2-p1,vec))<EPS){return vec;}\n    return vec*cross(p2-p1,p2)/cross(p2-p1,vec);\n  }\n\n  P crosspointLL(P p1,P p2,P p3,P p4){\n    return p4+crosspointLL(p1-p4,p2-p4,p3-p4);\n  }\n\n  P crosspointSS(P p1,P p2,P p3,P p4){\n    if(distSP(p1,p2,p3)<EPS){return p3;}\n    if(distSP(p1,p2,p4)<EPS){return p4;}\n    return crosspointLL(p1,p2,p3,p4);\n  }\n\n  bool intersectShL(P p1,P p2,P vec){\n    vec/=abs(vec);\n    return intersectSL(p1,p2,vec) &&\n      crosspointLL(p1/vec,p2/vec,vec/vec).real()>-EPS;\n  }\n\n  bool intersectShL(P p1,P p2,P p3,P p4){\n    return intersectShL(p1-p3,p2-p3,p4-p3);\n  }\n\n  //1::in,0::on edge,-1::out\n  int contain(const vector<P> &poly,const P &p){\n    vector<P> A={{65537,96847},{-24061,6701},{56369,-86509},\n                 {-93763,-78049},{56957,10007}};\n    int s=A.size();\n    vector<bool> cnt(s,false);\n    for(int i=0;i<(int)poly.size();i++){\n      int k=(i+1)%poly.size();\n      if(distSP(poly[i],poly[k],p)<EPS){return 0;}\n      for(int j=0;j<s;j++){\n        if(intersectShL(poly[i],poly[k],p,p+A[j])){cnt[j]=!cnt[j];}\n      }\n    }\n    int in=0;\n    for(int j=0;j<s;j++){if(cnt[j]){in++;}}\n    return in>s/2?1:-1;\n  }\n\n  vector<P> convexcut(const vector<P> &poly,P p1,P p2){\n    vector<P> ret;\n    for(int i=0;i<(int)poly.size();i++){\n      int j=(i+1)%poly.size();\n      if(cross(p2-p1,poly[i]-p1)>-EPS){ret.push_back(poly[i]);}\n      if(intersectSL(poly[i],poly[j],p1,p2) &&\n         distLP(p1,p2,poly[i])>EPS && distLP(p1,p2,poly[j])>EPS){\n        ret.push_back(crosspointLL(poly[i],poly[j],p1,p2));\n      }\n    }\n    return ret;\n  }\n\n  D area(const vector<P> &poly){\n    D ans=0;\n    for(int i=2;i<(int)poly.size();i++){\n      ans+=cross(poly[i-1]-poly[0],poly[i]-poly[0]);\n    }\n    return abs(ans)/2;\n  }\n\n  vector<P> convexhull(vector<P> pts){\n    vector<P> ret;\n    sort(pts.begin(),pts.end(),comp);\n    auto fnc=\n      [&](){\n        for(auto &I:pts){\n          if(!ret.empty() && abs(I-ret.back())<EPS){continue;}\n          while(ret.size()>1){\n            P A=ret.back()-ret[ret.size()-2];\n            P B=I-ret.back();\n            if(cross(A,B)<-EPS){\n              ret.pop_back();\n            }else if(abs(cross(A,B))<EPS && dot(A,B)>EPS){\n              ret.pop_back();\n            }else{\n              break;\n            }\n          }\n          ret.push_back(I);\n        }\n      };\n    fnc();\n    reverse(pts.begin(),pts.end());\n    fnc();\n    if(ret.size()>1 && ret[0]==ret.back()){ret.pop_back();}\n    return ret;\n  }\n\n  //4::seperate,3::circumscribe,2::intersect,\n  //1::inscribe,0::contain,-1::same\n  int intersectCC(C c1,C c2){\n    D d=abs(c1.F-c2.F),r=c1.S+c2.S,dif=abs(c2.S-c1.S);\n    if(d<EPS && dif<EPS){return -1;}\n    if(d-r>EPS){return 4;}\n    if(d-r>-EPS){return 3;}\n    if(d-dif>EPS){return 2;}\n    if(d-dif>-EPS){return 1;}\n    return 0;\n  }\n\n  vector<P> crosspointLC(P p1,P p2,C c){\n    vector<P> ret;\n    P pr=project(p1,p2,c.F);\n    D d=distLP(p1,p2,c.F);\n    if(d-c.S>EPS){return ret;}\n    if(d-c.S>-EPS){ret.push_back(pr); return ret;}\n    P vec=p2-p1; vec*=sqrt(c.S*c.S-d*d)/abs(vec);\n    ret.push_back(pr-vec);\n    ret.push_back(pr+vec);\n    return ret;\n  }\n\n  vector<P> crosspointSC(P p1,P p2,C c){\n    vector<P> ret;\n    for(auto &I:crosspointLC(p1,p2,c)){\n      if(distSP(p1,p2,I)<EPS){ret.push_back(I);}\n    }\n    return ret;\n  }\n\n  vector<P> crosspointCC(C c1,C c2){\n    vector<P> ret;\n    P vec=c2.F-c1.F;\n    D base=(c1.S*c1.S+norm(vec)-c2.S*c2.S)/(2*abs(vec));\n    D h=sqrt(c1.S*c1.S-base*base);\n    vec/=abs(vec);\n    ret.push_back(c1.F+vec*P(base,-h));\n    ret.push_back(c1.F+vec*P(base,h));\n    return ret;\n  }\n\n  vector<P> tangentCP(C c,P p){\n    return crosspointCC(c,C(p,sqrt(norm(c.F-p)-c.S*c.S)));\n  }\n\n  vector<pair<P,P>> tangentCC(C c1,C c2){\n    vector<pair<P,P>> ret;\n    P d=c2.F-c1.F;\n    for(D i:{-1,1}){\n      D r=c1.S+c2.S*i;\n      if(intersectCC(c1,c2)>i+1){\n        for(P s:{-1i,1i}){\n          P p=r+s*sqrt(norm(d)-norm(r));\n          ret.emplace_back(c1.F+d*c1.S/norm(d)*p,\n                           c2.F-d*i*c2.S/norm(d)*p);\n        }\n      }\n    }\n    return ret;\n  }\n\n  D area(const vector<P> &poly,C c){\n    D ret=0;\n    for(int i=0;i<(int)poly.size();i++){\n      P a=poly[i]-c.F,b=poly[(i+1)%poly.size()]-c.F;\n      if(abs(a)<c.S+EPS && abs(b)<c.S+EPS){\n        ret+=cross(a,b);\n      }else{\n        vector<P> A=crosspointSC(a,b,{0,c.S});\n        if(A.empty()){ret+=c.S*c.S*arg(b/a);}\n        else{\n          ret+=(abs(a)<c.S?\n                cross(a,A[0]):\n                c.S*c.S*arg(A[0]/a));\n          ret+=(abs(b)<c.S?\n                cross(A.back(),b):\n                c.S*c.S*arg(b/A.back()));\n          ret+=cross(A[0],A.back());\n        }\n      }\n    }\n    return abs(ret)/2;\n  }\n\n  //counter-clockwise\n  D diameter(const vector<P> &poly){\n    D ret=0;\n    ll l=0,r=0,n=poly.size();\n    if(n==2){return abs(poly[0]-poly[1]);}\n    for(int i=0;i<n;i++){\n      if(comp(poly[l],poly[i])){l=i;}\n      if(comp(poly[i],poly[r])){r=i;}\n    }\n    ll sl=r,sr=l;\n    while(sl!=l || sr!=r){\n      ret=max(ret,abs(poly[r]-poly[l]));\n      if(cross(poly[(l+1)%n]-poly[l],\n               poly[(r+1)%n]-poly[r])<0){\n        (++l)%=n;\n      }else{\n        (++r)%=n;\n      }\n    }\n    return ret;\n  }\n\n  D closestpair(vector<P> pt){\n    sort(pt.begin(),pt.end(),comp);\n    D ret=INF;\n    int N=pt.size();\n    for(int i=1;i<N;i<<=1){\n      for(int j=0;i+j<N;j+=i*2){\n        int m=i+j;\n        vector<P> R;\n        D l=-INF,r=INF;\n        for(int k=j;k<m;k++){l=max(l,pt[k].real());}\n        for(int k=0;m+k<N && k<i;k++){r=min(r,pt[m+k].real());}\n        for(int k=0;m+k<N && k<i;k++){\n          if(pt[m+k].real()-l<ret){R.push_back(pt[m+k]);}\n        }\n        int idx=0;\n        for(int k=j;k<m;k++){\n          if(r-pt[k].real()>ret){continue;}\n          int M=R.size();\n          while(idx<M && pt[k].imag()-R[idx].imag()>ret){idx++;}\n          for(int s=idx;s<M && R[s].imag()-pt[k].imag()<ret;s++){\n            ret=min(ret,abs(R[s]-pt[k]));\n          }\n        }\n        auto ed=(j+i*2<N?pt.begin()+j+2*i:pt.end());\n        inplace_merge(pt.begin()+j,pt.begin()+m,ed,comp_y);\n      }\n    }\n    return ret;\n  }\n\n  P centerofgravity(const vector<P> &pt){\n    P ret(0,0);\n    D wt=0;\n    for(int i=2;i<(int)pt.size();i++){\n      D w2=cross(pt[i-1]-pt[0],pt[i]-pt[0]);\n      P p=(pt[0]+pt[i-1]+pt[i])/(D)3;\n      wt+=w2;\n      ret+=p*w2;\n    }\n    return ret/wt;\n  }\n\n  void segment_arrangement(const vector<pair<P,P>> &L,\n                           vector<pair<int,int>> &seg,vector<P> &pt){\n    int N=L.size();\n    for(int i=0;i<N;i++){\n      pt.push_back(L[i].F);\n      pt.push_back(L[i].S);\n      for(int j=i+1;j<N;j++){\n        if(intersectSS(L[i].F,L[i].S,L[j].F,L[j].S)){\n          pt.push_back(crosspointSS(L[i].F,L[i].S,L[j].F,L[j].S));\n        }\n      }\n    }\n    auto le=[](P a,P b){return eqls(a,b)?false:comp(a,b);};\n    sort(pt.begin(),pt.end(),le);\n    pt.erase(unique(pt.begin(),pt.end(),eqls),pt.end());\n    for(auto &I:L){\n      vector<pair<D,int>> on;\n      for(int j=0;j<(int)pt.size();j++){\n        if(distSP(I.F,I.S,pt[j])<EPS){\n          on.emplace_back(abs(pt[j]-I.F),j);\n        }\n      }\n      sort(on.begin(),on.end());\n      for(int j=1;j<(int)on.size();j++){\n        seg.emplace_back(on[j-1].S,on[j].S);\n      }\n    }\n    sort(seg.begin(),seg.end());\n    seg.erase(unique(seg.begin(),seg.end()),seg.end());\n  }\n\n  vector<P> convex_of_segments(const vector<pair<P,P>> &L){\n    vector<pair<int,int>> seg;\n    vector<P> pt;\n    segment_arrangement(L,seg,pt);\n    vector<vector<int>> edge(pt.size());\n    for(auto &I:seg){\n      edge[I.F].push_back(I.S);\n      edge[I.S].push_back(I.F);\n    }\n    vector<P> ret;\n    function<void(int,int)> dfs=\n      [&](int v,int pre){\n        if(pre!=-1 && v==0){return;}\n        ret.push_back(pt[v]);\n        vector<pair<D,int>> nx;\n        for(auto &u:edge[v]){\n          P dom=(pre==-1||eqls(pt[v],pt[pre]))?P(1):pt[v]-pt[pre];\n          D a=arg((pt[u]-pt[v])/dom);\n          if(abs(a+PI)<EPS){a=PI;}\n          nx.emplace_back(a,u);\n        }\n        sort(nx.begin(),nx.end());\n        dfs(nx[0].S,v);\n      };\n    dfs(0,-1);\n    return ret;\n  }\n\n  istream & operator >> (istream &i,P &p){\n    D x,y; i>>x>>y; p={x,y}; return i;\n  }\n  istream & operator >> (istream &i,C &p){\n    D x,y; i>>x>>y>>p.S; p.F={x,y}; return i;\n  }\n};\n\nusing namespace Geometry;\n//END CUT HERE\n\n\n#endif /*Geometry_Complex_hpp*/\n\nusing namespace std;\ntypedef unsigned long long int ull;\ntypedef long long int ll;\ntypedef pair<ll,ll> pll;\ntypedef long double D;\ntypedef complex<D> P;\n#define F first\n#define S second\nconst ll MOD=1000000007;\n//const ll MOD=998244353;\n\n\n\ntemplate<typename T,typename U>istream & operator >> (istream &i,pair<T,U> &A){i>>A.F>>A.S; return i;}\ntemplate<typename T>istream & operator >> (istream &i,vector<T> &A){for(auto &I:A){i>>I;} return i;}\ntemplate<typename T,typename U>ostream & operator << (ostream &o,const pair<T,U> &A){o<<A.F<<\" \"<<A.S; return o;}\ntemplate<typename T>ostream & operator << (ostream &o,const vector<T> &A){ll i=A.size(); for(auto &I:A){o<<I<<(--i?\" \":\"\");} return o;}\n\n#define PROBLEM \"http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_7_A\"\n//#define ERROR \"0.00000001\"\n\nint main(){\n    cout<<fixed<<setprecision(12);\n    pair<P,D> c1,c2;\n    cin>>c1>>c2;\n    cout<<intersectCC(c1,c2)<<endl;\n    \n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint intersections(double dDist, int nR1, int nR2) {\n    if (dDist > nR1 + nR2)  { return 4; }\n    if (dDist == nR1 + nR2) { return 3; }\n    if (dDist > nR2 - nR1)  { return 2; }\n    if (dDist == nR2 - nR1) { return 1; }\n    if (dDist < nR2 - nR1)  { return 0; }\n    return -1;\n}\n\ndouble dist(double dC1x, double dC1y, double dC2x, double dC2y) {\n    return sqrt(pow((dC2x - dC1x), 2) + pow((dC2y - dC1y), 2));\n}\n\nint main()\n{\n    double dC1x, dC1y, dC2x, dC2y;\n    int  nC1r, nC2r;\n    cin >> dC1x >> dC1y>> nC1r >> dC2x >> dC2y >> nC2r;\n    double dDist = dist(dC1x, dC1y, dC2x, dC2y);\n    int nAns = nC1r < nC2r ? intersections(dDist, nC1r, nC2r) : intersections(dDist, nC2r, nC1r);\n    cout << nAns << '\\n';\n    return 0;\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define EPS (1e-8)\nusing namespace std;\ntypedef complex<double> P;\n\nstruct Circle{\n  P c; //中心点\n  double r; //半径\n  Circle(P c=P(0,0), double r=0):c(c),r(r){}\n};\n\nint IntersectionCC(Circle a,Circle b){\n  int res=0;\n  double dis=abs(a.c-b.c),R=a.r+b.r;\n  if(dis>R+EPS)res++;\n  if(dis>R-EPS)res++;\n  if(dis>abs(a.r-b.r)+EPS)res++;\n  if(dis>abs(a.r-b.r)-EPS)res++;\n  return res;\n}\n\nint main(){\n  int a,b;\n  Circle c[2];\n  for(int i=0;i<2;i++){\n    cin>>a>>b>>c[i].r;\n    c[i].c=P(a,b);\n  }\n  cout<<IntersectionCC(c[0],c[1])<<endl;\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define For(i, a, b) for(int (i)=(a); (i)<(b); ++(i))\n#define rFor(i, a, b) for(int (i)=(a)-1; (i)>=(b); --(i))\n#define rep(i, n) For((i), 0, (n))\n#define rrep(i, n) rFor((i), (n), 0)\n#define fi first\n#define se second\nusing namespace std;\ntypedef long long lint;\ntypedef unsigned long long ulint;\ntypedef pair<int, int> pii;\ntypedef complex<double> xy_t;\ntypedef pair<xy_t, int> pci;\ntypedef vector<lint> poly;\ntemplate<class T>bool chmax(T &a, const T &b){if(a<b){a=b; return true;} return false;}\ntemplate<class T>bool chmin(T &a, const T &b){if(a>b){a=b; return true;} return false;}\n\nconstexpr lint mod = 1e9+7;\nconstexpr lint INF = mod*mod;\nconstexpr int MAX = 100010;\n\nconstexpr double eps=1e-9;\n\ninline int sgn(double x){\n    if(x<-eps) return -1;\n    if(x>eps) return 1;\n    return 0;\n}\n\ninline bool EQ(double x, double y){\n    return sgn(x-y)==0;\n}\n\ninline bool GE(double x, double y){\n    return sgn(x-y)==1;\n}\n\ninline bool LE(double x, double y){\n    return sgn(x-y)==-1;\n}\n\ninline bool GEQ(double x, double y){\n    return sgn(x-y)>=0;\n}\n\ninline bool LEQ(double x, double y){\n    return sgn(x-y)<=0;\n}\n\nstruct Point{\n    double x, y;\n    Point(double x, double y): x(x), y(y){}\n\n    Point operator+(const Point &p){\n        return {x+p.x, y+p.y};\n    }\n\n    Point operator-(const Point &p){\n        return {x-p.x, y-p.y};\n    }\n\n    Point operator*(const double k){\n        return {k*x, k*y};\n    }\n\n    Point operator/(const double k){\n        return {x/k, y/k};\n    }\n\n    double operator*(const Point &p){\n        return x*p.x+y*p.y;\n    }\n\n    double operator^(const Point &p){\n        return x*p.y-y*p.x;\n    }\n\n    bool operator==(const Point &p){\n        return EQ(x, p.x) && EQ(y, p.y);\n    }\n};\n\nusing Vec=Point;\nusing pdi=pair<double, int>;\n\ndouble abs(Point p){\n    return hypot(p.x, p.y);\n}\n\ndouble arg(Point p){\n    return atan2(p.y, p.x);\n}\n\nconstexpr int CCW_COUNTER_CLOCKWISE=1;\nconstexpr int CCW_CLOCKWISE=-1;\nconstexpr int CCW_ONLINE_BACK=-2;\nconstexpr int CCW_ONLINE_FRONT=2;\nconstexpr int CCW_ON_SEGMENT=0;\n\ninline int ccw(Point a, Point b, Point c){\n    Vec v=b-a, w=c-a;\n    if(GE(v^w, 0)) return CCW_COUNTER_CLOCKWISE;\n    if(LE(v^w, 0)) return CCW_CLOCKWISE;\n    if(LE(v*w, 0)) return CCW_ONLINE_BACK;\n    if(LE((a-b)*(c-b), 0)) return CCW_ONLINE_FRONT;\n    return CCW_ON_SEGMENT;\n}\n\nbool isParallel(Vec v, Vec w){\n    return EQ(v^w, 0);\n}\n\nbool isOrthogonal(Vec v, Vec w){\n    return EQ(v*w, 0);\n}\n\nbool intersectSS(Point a, Point b, Point c, Point d){\n    return ccw(a, b, c)*ccw(a, b, d)<=0 && ccw(c, d, a)*ccw(c, d, b)<=0;\n}\n\nPoint getCrossPointLL(Point a, Vec v, Point b, Vec w){\n    double t=((b-a)^w)/(v^w);\n    return a+v*t;\n}\n\ndouble getDistanceLP(Point a, Vec v, Point p){\n    return abs(v^(p-a)/abs(v));\n}\n\ndouble getDistanceSP(Point a, Point b, Point p){\n    if(LE((b-a)*(p-a), 0)) return abs(p-a);\n    if(LE((a-b)*(p-b), 0)) return abs(p-b);\n    return getDistanceLP(a, b-a, p);\n}\n\ndouble getDistanceLL(Point a, Vec v, Point b, Vec w){\n    if(isParallel(v, w)) return getDistanceLP(a, v, b);\n    return 0;\n}\n\ndouble getDistanceLS(Point a, Vec v, Point c, Point d){\n    Point b=a+v;\n    if(ccw(a, b, c)*ccw(a, b, d)<=0) return 0;\n    return min(getDistanceLP(a, v, c), getDistanceLP(a, v, d));\n}\n\ndouble getDistanceSS(Point a, Point b, Point c, Point d){\n    if(intersectSS(a, b, c, d)) return 0;\n    return min({getDistanceSP(a, b, c), getDistanceSP(a, b, d),\n                getDistanceSP(c, d, a), getDistanceSP(c, d, b)});\n}\n\nint intersectCC(Point c1, double r1, Point c2, double r2){\n    if(r1<r2){\n        swap(c1, c2);\n        swap(r1, r2);\n    }\n    double d=abs(c1-c2), r=r1+r2;\n    if(GE(d, r)) return 4;\n    if(EQ(d, r)) return 3;\n    if(EQ(d+r2, r1)) return 1;\n    if(LE(d+r2, r1)) return 0;\n    return 2;\n}\n\nint main(){\n    double c1x, c1y, r1;\n    scanf(\"%lf%lf%lf\", &c1x, &c1y, &r1);\n    double c2x, c2y, r2;\n    scanf(\"%lf%lf%lf\", &c2x, &c2y, &r2);\n    printf(\"%d\\n\", intersectCC(Point(c1x, c1y), r1, Point(c2x, c2y), r2));\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <sstream>\n#include <cstdio>\n#include <stdlib.h>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <math.h>\nusing namespace std;\n\nint main(){\n  int c[2][3],r,r_;\n  double d;\n  cin>>c[0][0]>>c[0][1]>>c[0][2];\n  cin>>c[1][0]>>c[1][1]>>c[1][2];\n  d = pow(pow((c[0][0]-c[1][0]),2) + pow(c[0][1]-c[1][1],2),0.5);\n  r = c[0][2]+c[1][2];\n  r_ = abs(c[0][2]-c[1][2]);\n  //cout <<d<<\" \"<<r<<\" \"<<r_<<endl;\n  if(d>r) cout<<\"4\"<<endl;\n  else if (d == r) cout<<\"3\"<<endl;\n  else if (r_ == d) cout<<\"1\"<<endl;\n  else if (r_ < d && d < r) cout<<\"2\"<<endl;\n  else if (r_ > d) cout<<\"0\"<<endl;\n  //cout <<d<<\" \"<<r<<\" \"<<r_<<endl;\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define ll long long\n#define INF 1000000005\n#define MOD 1000000007\n#define EPS 1e-10\n#define rep(i,n) for(int i=0;i<n;++i)\n\nusing namespace std;\n\ntypedef complex<double> C;\n\nnamespace std\n{\n    bool operator < (const C& a, const C& b) {\n        return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n    }\n}\n\nstruct L : public vector<C>\n{\n    L(const C a, const C b) {\n        push_back(a); push_back(b);\n    }\n};\n\n//??????\ndouble cross(const C& a, const C& b)\n{\n    return imag(conj(a)*b);\n}\n//??????\ndouble dot(const C& a, const C& b)\n{\n    return real(conj(a)*b);\n}\n\n\nint ccw(C a, C b, C c)\n{\n    b -= a; c -= a;\n    if (cross(b, c) > 0)   return +1;       // counter clockwise\n    if (cross(b, c) < 0)   return -1;       // clockwise\n    if (dot(b, c) < 0)     return +2;       // c--a--b on line\n    if (norm(b) < norm(c)) return -2;       // a--b--c on line\n    return 0;\n}\n//??´???????????????????????????(????????´??????True)\nbool intersectLL(const L &l, const L &m)\n{\n    return abs(cross(l[1]-l[0], m[1]-m[0])) > EPS || abs(cross(l[1]-l[0], m[0]-l[0])) < EPS;\n}\n//??´?????¨?????????????????????(????????±??????????????¨??????)\nbool intersectLS(const L &l, const L &s)\n{\n    return cross(l[1]-l[0], s[0]-l[0]) * cross(l[1]-l[0], s[1]-l[0]) < EPS;\n}\n//??´?????¨????????????(??±???)??????\nbool intersectLP(const L &l, const C p)\n{\n    return abs(cross(l[1]-p, l[0]-p)) < EPS;\n}\n//??????????????????????????????(????????±??????????????¨??????)\nbool intersectSS(const L &s, const L &t)\n{\n    return ccw(s[0],s[1],t[0])*ccw(s[0],s[1],t[1]) <= 0 && ccw(t[0],t[1],s[0])*ccw(t[0],t[1],s[1]) <= 0;\n}\n//????????¨????????????(??±???)??????\nbool intersectSP(const L &s, const C p)\n{\n    return abs(s[0]-p)+abs(s[1]-p)-abs(s[1]-s[0]) < EPS;\n}\n//???p?????´???l???????°???±\nC projection(const L &l, const C p)\n{\n    double t = dot(p-l[0], l[0]-l[1]) / norm(l[0]-l[1]);\n    return l[0] + t*(l[0]-l[1]);\n}\n//???p?????´???l????????¨??????????§°?§????\nC reflection(const L &l, const C p)\n{\n    return p + (projection(l, p) - p)*2.0;\n}\n//?????¨??´???????????¢\ndouble distanceLP(const L &l, const C p)\n{\n    return abs(p - projection(l, p));\n}\n//??´?????¨??´???????????¢\ndouble distanceLL(const L &l, const L &m)\n{\n    return intersectLL(l, m) ? 0 : distanceLP(l, m[0]);\n}\n//??´?????¨??????????????¢\ndouble distanceLS(const L &l, const L &s)\n{\n    if (intersectLS(l, s)) return 0;\n    return min(distanceLP(l, s[0]), distanceLP(l, s[1]));\n}\n//????????¨???????????¢\ndouble distanceSP(const L &s, const C p)\n{\n    const C r = projection(s, p);\n    if (intersectSP(s, r)) return abs(r - p);\n    return min(abs(s[0] - p), abs(s[1] - p));\n}\n//????????¨??????????????¢\ndouble distanceSS(const L &s, const L &t)\n{\n    if (intersectSS(s, t)) return 0;\n    return min(min(distanceSP(s, t[0]), distanceSP(s, t[1])),min(distanceSP(t, s[0]), distanceSP(t, s[1])));\n}\n//??´???????????????????????????\nC crosspoint(const L &l, const L &m)\n{\n    double A = cross(l[1] - l[0], m[1] - m[0]);\n    double B = cross(l[1] - l[0], l[1] - m[0]);\n    //????????´????????¨???\n    if(abs(A) < EPS && abs(B) < EPS){\n        return m[0];\n    }\n    return m[0] + B / A * (m[1] - m[0]);\n}\n//?????????????????????\nL circle_circle_intersect(const C& c1, const double r1, const C& c2, const double r2) {\n  C a = conj(c2-c1), b = (r2*r2-r1*r1-(c2-c1)*conj(c2-c1)), c = r1*r1*(c2-c1);\n  C d = b*b-4.0*a*c;\n  C z1 = (-b+sqrt(d))/(2.0*a)+c1, z2 = (-b-sqrt(d))/(2.0*a)+c1;\n  return L(z1, z2);\n}\n//??????????±???????\nvector<C> convex_hull(vector<C> ps)\n{\n    int n = ps.size(), k = 0;\n    sort(ps.begin(), ps.end());\n    vector<C> ch(2*n);\n    for (int i = 0; i < n; ch[k++] = ps[i++]){\n        while (k >= 2 && ccw(ch[k-2], ch[k-1], ps[i]) <= 0) k--;\n    }\n    for (int i = n-2, t = k+1; i >= 0; ch[k++] = ps[i--]){\n        while (k >= t && ccw(ch[k-2], ch[k-1], ps[i]) <= 0) k--;\n    }\n    ch.resize(k-1);\n    return ch;\n}\n//?????§??????\nbool isconvex(const vector<C> &ps)\n{\n    rep(i,ps.size()){\n        if (ccw(ps[(i+ps.size()-1) % ps.size()],ps[i],ps[(i+1) % ps.size()])) return false;\n    }\n    return true;\n}\n//????§???¢?????¢???\ndouble area(const vector<C> &ps)\n{\n    double A = 0;\n    rep(i,ps.size()){\n        A += cross(ps[i],ps[(i+1) % ps.size()]);\n    }\n    return A / 2.0;\n}\n//???????§???¢?????´?????§???????????????????????´????????¢\nvector<C> convex_cut(const vector<C> &ps, const L &l)\n{\n    vector<C> Q;\n    rep(i,ps.size()){\n        C A = ps[i], B = ps[(i+1)%ps.size()];\n        if (ccw(l[0], l[1], A) != -1) Q.push_back(A);\n        if (ccw(l[0], l[1], A)*ccw(l[0], l[1], B) < 0)\n            Q.push_back(crosspoint(L(A, B), l));\n    }\n    return Q;\n}\n//??????????§???¢???????????????????????????(0??????????????????,1?????????,2???????????????)\nint contains(const vector<C>& ps, const C& p)\n{\n    bool flag = false;\n    rep(i,ps.size()) {\n        C a = ps[i] - p, b = ps[(i+1)%ps.size()] - p;\n        if (imag(a) > imag(b)) swap(a, b);\n        if (imag(a) <= 0 && 0 < imag(b)){\n            if (cross(a, b) < 0) flag = !flag;\n        }\n        if (cross(a, b) == 0 && dot(a, b) <= 0) return 1;\n  }\n  return flag ? 2 : 0;\n}\n//???????§???¢?????´???????±???????(?????£????????????)\n//maxi,maxj?????????????????¨??????\ndouble convex_diameter(const vector<C> &ps)\n{\n    const int n = ps.size();\n    int is = 0, js = 0;\n    for (int i = 1; i < n; ++i) {\n        if (imag(ps[i]) > imag(ps[is])) is = i;\n        if (imag(ps[i]) < imag(ps[js])) js = i;\n    }\n    double maxd = abs(ps[is]-ps[js]);\n    int i, maxi, j, maxj;\n    i = maxi = is;\n    j = maxj = js;\n    do{\n        if (cross(ps[(i+1)%ps.size()]-ps[i],ps[(j+1)%ps.size()]-ps[j]) >= 0) j = (j+1) % n;\n        else i = (i+1) % n;\n        if (abs(ps[i]-ps[j]) > maxd) {\n            maxd = abs(ps[i]-ps[j]);\n            maxi = i; maxj = j;\n        }\n    } while (i != is || j != js);\n    return maxd;\n}\n//????????????????±???????\ndouble closest_pair(C *a, int n)\n{\n    if(n<=1) return INF;\n    int m=n/2;\n    double x=a[m].real();\n    double d=min(closest_pair(a,m),closest_pair(a+m,n-m));\n    inplace_merge(a,a+m,a+n,[](C c1,C c2){return c1.imag() != c2.imag() ? c1.imag() < c2.imag() : c1.real() < c2.real();});\n    vector<C> b;\n    rep(i,n){\n        if(abs(x-a[i].real())>=d) continue;\n        rep(j,b.size()){\n            C dp=a[i]-b[b.size()-1-j];\n            if(dp.imag()>=d) break;\n            d=min(d,abs(dp));\n        }\n        b.push_back(a[i]);\n    }\n    return d;\n}\ndouble compute_shortest(C *a,int n)\n{\n    sort(a,a+n);\n    return closest_pair(a,n);\n}\n//2??????????????¢????????????(????????????2??????????????±?????\\????????°)\nint getstateCC(C c1,double r1,C c2,double r2)\n{\n    double d=abs(c1-c2);\n    if(d>r1+r2+EPS)return 4;\n    if(d>r1+r2-EPS)return 3;\n    if(d>abs(r1-r2)+EPS)return 2;\n    if(d>abs(r1-r2)-EPS)return 1;\n    return 0;\n}\n//2????????±????????\\???????±???????\nL getintangent(C c1,double r1,C c2,double r2,double flg)\n{\n    C base=c2-c1;\n    double w=r1+r2;\n    double h=norm(base)-w*w;\n    h = (h>0)?sqrt(h):0;\n    C k=base*C(w,h*flg)/norm(base);\n    return L(c1+k*r1,c2-k*r2);\n}\n//2????????±????????\\???????±???????\nL getouttangent(C c1,double r1,C c2,double r2,double flg)\n{\n    C base=c2-c1;\n    double h=r2-r1;\n    double w=norm(base)-h*h;\n    w = (w>0)?sqrt(w):0;\n    C k=base*C(w,h*flg)/norm(base)*C(0,flg);\n    return L(c1+k*r1,c2+k*r2);\n}\n//2????????±?????\\???????±???????\nvector<L> gettangentCC(C c1,double r1,C c2,double r2)\n{\n    vector<L> res;\n    double d=abs(c1-c2);\n    if(d>r1+r2+EPS)  res.push_back(getintangent(c1,r1,c2,r2,1));\n    if(d>r1+r2-EPS)  res.push_back(getintangent(c1,r1,c2,r2,-1));\n    if(d>abs(r1-r2)+EPS)    res.push_back(getouttangent(c1,r1,c2,r2,1));\n    if(d>abs(r1-r2)-EPS)    res.push_back(getouttangent(c1,r1,c2,r2,-1));\n    return res;\n}\n\nint main()\n{\n    int a,b,c,d,e,f;\n    cin >> a >> b >> c >> d >> e >> f;\n    cout << getstateCC(C(a,b),c,C(d,e),f) << \"\\n\";\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <iostream>\n#include <cmath>\n#include <string>\n#include <cstring>\n#include <algorithm>\n#include <vector>\n#include <queue>\nusing namespace std;\ntypedef long long ll;\nconst int inf = 0x3f3f3f3f;\n#define dbg(x...) do { cout << \"\\033[32;1m\" << #x <<\" -> \"; err(x); } while (0)\nvoid err() { cout << \"\\033[39;0m\" << endl; }\ntemplate<class T, class... Ts> void err(const T& arg,const Ts&... args) { cout << arg << \" \"; err(args...); }\nconst int N = 100 + 5;\ntypedef double db;\nconst db eps = 1e-8;\nint sgn(db x){\n    if(fabs(x) < eps) return 0;\n    if(x < 0) return -1;\n    return 1;\n}\nstruct Point{\n    db x, y;\n    Point(){}\n    Point(db x, db y):x(x), y(y){}\n    void input(){\n        //如果为longdouble则需要改为Lf\n        scanf(\"%lf%lf\",&x, &y);\n    }\n    db distance(Point p){\n        return hypot(x - p.x, y - p.y);\n    }\n};\nstruct circle{\n    Point p;\n    db r;\n    circle(){}\n    circle(Point p, db r):p(p), r(r){}\n    void input(){\n        p.input();\n        // 注意类型\n        scanf(\"%lf\", &r);\n    }\n    /*\n        两圆的关系\n        5 相离\n        4 外切\n        3 相交\n        2 内切\n        1 内含\n    */\n    int relationcircle(circle v){\n        db d = p.distance(v.p);\n        if(sgn(d - r - v.r) > 0) return 5;\n        if(sgn(d - r - v.r) == 0) return 4;\n        db l = fabs(r - v.r);\n        if(sgn(d - r - v.r) < 0 && sgn(d - l) > 0) return 3;\n        if(sgn(d - l) == 0) return 2;\n        if(sgn(d - l) < 0) return 1;\n    }\n} c1, c2;\n\nint main(){\n    c1.input();\n    c2.input();\n    int res = c1.relationcircle(c2);\n    printf(\"%d\\n\", res-1);\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\n\nint main()\n{\n  int c1x, c1y, c1r;\n  int c2x, c2y, c2r;\n\n  std::cin >> c1x >> c1y >> c1r;\n  std::cin >> c2x >> c2y >> c2r;\n\n  double d;\n\n  d = sqrt( (c1x-c2x) * (c1x-c2x) + (c1y-c2y) * (c1y-c2y) );\n\n  if( d > (c1r+c2r) )\n    std::cout << \"4\" << std::endl;\n  \n  /*\n  if( fabs(c1r+c2r-d) <= 0.000000001 )\n  std::cout << \"3\" << std::endl;\n  */\n\n  if( d == (c1r+c2r) )\n    std::cout << \"3\";\n  \n  if( fabs(c1r-c2r) < d && d < (c1r+c2r) )\n    std::cout << \"2\" << std::endl;\n  \n  /*\n  if( fabs( d - fabs(c1r-c2r) ) <= 0.000000001 )\n  std::cout << \"1\" << std::endl;\n  */\n\n  if( d == fabs(c1r-c2r) )\n    std::cout << \"1\" << std::endl;\n  \n  if( d < fabs(c1r-c2r) )\n    std::cout << \"0\" << std::endl;\n\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\n#define PB          push_back\n#define PF          push_front\n#define MP          make_pair\n#define FI          first\n#define SE          second\n#define SIZE( A )   int( ( A ).size( ) )\n#define ALL( A )    ( A ).begin( ), ( A ).end( )\n#define ALLR( A )   ( A ).rbegin( ), ( A ).rend( )\n\nusing namespace std;\n\ntypedef long long           ll;\ntypedef unsigned long long  ull;\ntypedef double              lf;\ntypedef pair< int, int >    pii;\ntypedef pair< ll, ll >      pll;\ntypedef vector< bool >      vb;\ntypedef vector< lf >        vd;\ntypedef vector< ll >        vll;\ntypedef vector< int >       vi;\ntypedef vector< pii >       vpii;\n\nconst int MAXN = int( 1e5 )+10;\nconst int MOD  = int( 360 );\nconst int oo   = INT_MAX;\nconst lf EPS = 1e-9;\nconst lf PI = acos(-1.0);\n\nstruct pt {\n  lf x, y;\n  pt( ) { }\n  pt( lf x, lf y ) : x( x ), y ( y ) { }\n};\n\ninline lf x( pt P ) { return P.x; }\ninline lf y( pt P ) { return P.y; }\n\nistream& operator >> ( istream& in, pt& p ) {\n  lf x,y; in >> x >> y;\n  p = pt(x,y); return in;\n}\n\nostream& operator << ( ostream& out, const pt& p ) {\n  out << double(p.x) << \" \" << double(p.y);\n  return out;\n}\n\npt operator + ( const pt& A, const pt& B ) {\n  return pt( x(A)+x(B), y(A)+y(B) );\n}\n\npt operator - ( const pt& A, const pt& B ) {\n  return pt( x(A)-x(B), y(A)-y(B) );\n}\n\npt operator * ( const lf& B, const pt& A ) {\n  return pt( x(A)*B, y(A)*B );\n}\n\npt operator * ( const pt& A, const lf& B ) {\n  return pt( x(A)*B, y(A)*B  );\n}\n\npt operator * ( const pt& A, const pt& B ) {\n  return pt( x(A)*x(B)-y(A)*y(B), x(A)*y(B)+y(A)*x(B) );\n}\n\npt operator / ( const pt& A, const lf& B ) {\n  return pt( x(A)/B, y(A)/B );\n}\n\ninline lf dot( pt A, pt B ) {\n  return x(A)*x(B) + y(A)*y(B);\n}\n\ninline lf cross( pt A, pt B ) {\n  return x(A)*y(B) - y(A)*x(B);\n}\n\ninline lf norm( pt A ) {\n  return x(A)*x(A) + y(A)*y(A);\n}\n\ninline lf abs( pt A ) {\n  return sqrt( norm(A) );\n}\n\ninline lf arg( pt A ) {\n  return atan2( y(A), x(A) );\n}\n\ninline pt exp( pt A ) {\n  return pt( exp( x(A) )*cos( y(A) ), exp( x(A) )*sin( y(A) ) ) ;\n}\n\ninline bool same ( lf a, lf b ) {\n  return a+EPS > b && b+EPS > a;\n}\n\ninline bool samePt ( pt A, pt B ) {\n  return same ( x(A), x(B) ) && same ( y(A), y(B) );\n}\n\ninline pt rot ( pt p, lf ang ) { return p * exp ( pt(0,1) * ang ); }\n\ninline lf dist ( pt A, pt B ) { return abs( B - A ); }\n\nlf distToLine (pt p, pt A, pt B, pt &c) {\n  lf u = dot( p-A , B-A ) / norm( B-A );\n  c = A + u*( B-A );\n  return dist( p , c );\n}\n\npt refPoint(pt X, pt A, pt B) {\n  pt aux; distToLine(X, A, B, aux);\n  return X + lf(2.0)*(aux-X);\n}\n\nint intersectionCircles( pt c1, lf r1, pt c2, lf r2, pt &p1, pt &p2 ) {\n  if( samePt( c1, c2 ) && same(r1,r2) ) return -1;\n  lf sr = (r1 + r2) * (r1 + r2);\n  lf dr = (r1 - r2) * (r1 - r2);\n  lf d = norm( c2-c1 );\n  if( d+EPS < dr || d > sr+EPS ) return 0;\n  if ( same(d,sr) || same(d,dr) ) {\n    p1 = p2 = c1 + (c2-c1)/sqrt(d) * r1;\n    return 1;\n  }\n  pt tmp;\n  tmp.x = (r1*r1 - r2*r2 + d ) / (2.0*sqrt(d)) ;\n  tmp.y = sqrt( r1*r1 - tmp.x*tmp.x ) ;\n  lf ang = arg( c2 - c1 );\n  p1 = rot( tmp, ang ) + c1;\n  p2 = refPoint( p1, c1, c2 );\n  return 2;\n}\n\npt c1,c2, p1,p2;\nlf r1,r2;\n\nint main( ) {\n\n  #ifdef LOCAL\n    freopen( \"input\", \"r\", stdin );\n    //freopen( \"output\", \"w\", stdout );\n  #else\n    //freopen( \"input\", \"r\", stdin );\n    //freopen( \"output\", \"w\", stdout );\n    ios_base::sync_with_stdio( 0 );\n    cin.tie( 0 );\n  #endif\n  while( cin >> c1 >> r1 >> c2 >> r2 ) {\n    if( norm( c2-c1 ) > (r1+r2)*(r1+r2) ) {\n      cout << \"4\\n\";\n      continue;\n    }\n    if( norm( c2-c1 ) == (r1+r2)*(r1+r2) ) {\n      cout << \"3\\n\";\n      continue;\n    }\n    int r = intersectionCircles( c1, r1, c2, r2, p1, p2 );\n    if( r == 2 ) {\n      cout << \"2\\n\";\n      continue;\n    }\n    if( r == 1 ) {\n      cout << \"1\\n\";\n      continue;\n    }\n    cout << \"0\\n\";\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n\nconst double inf=1e20;\n\ninline int sign(const double &x){\n    if(x>EPS) return 1;\n    else if(x<-EPS) return -1;\n    return 0;\n}\n\n/*   点  */\nstruct Point{\n    double x,y;\n\n    Point(double x=0,double y=0):x(x),y(y){}\n\n    Point operator + (Point p) { return Point(x+p.x,y+p.y); }\n    Point operator - (Point p) { return Point(x-p.x,y-p.y); }\n    Point operator * (double k) { return Point(k*x,k*y); }\n    Point operator / (double k) { return Point(x/k,y/k); }\n\n    //向量的大小\n    inline double abs(){ return sqrt(norm()); }\n    inline double norm() { return x*x+y*y; }\n\n    bool operator < (const Point & p) const{\n        return x!=p.x?x<p.x:y<p.y;\n    }\n\n    bool operator == (const Point & p) const {\n        return fabs(x-p.x)<EPS&&fabs(y-p.y)<EPS;\n    }\n};\n\n//两点间的距离\ninline double getDistance(Point a,Point b){\n    return (a-b).abs();\n}\n\n/*   向量  */\ntypedef Point Vector;\n\n//向量a和b的内积\ndouble dot(Vector a,Vector b){\n    return a.x*b.x+a.y*b.y;\n}\n//向量a和b的外积\ndouble cross(Vector a,Vector b){\n    return a.x*b.y-a.y*b.x;\n}\n\n/*   线段  */\nstruct Segment{\n    Point p1,p2;\n};\n\n//点p在线段s上的投影\nPoint project(Segment s,Point p){\n    Vector base = s.p2-s.p1;\n    double r=dot(p-s.p1,base)/base.norm();\n    return s.p1+base*r;\n}\n\nPoint reflect(Segment s,Point p){\n    return p+(project(s,p)-p)*2.0;\n}\n\n/*   直线  */\ntypedef Segment Line;\n\n//点到直线的距离\ndouble getDistanceLP(Line l,Point p){\n    return abs(cross(l.p2-l.p1,p-l.p1)/(l.p2-l.p1).abs());\n}\n\n//点到线段的距离\ndouble getDistanceSP(Segment s,Point p){\n    if(dot(s.p2-s.p1,p-s.p1)<0.0) return (p-s.p1).abs();\n    if(dot(s.p1-s.p2,p-s.p2)<0.0) return (p-s.p2).abs();\n    return getDistanceLP(s,p);\n}\n\n//判断p2与向量p1-p0的位置关系\n\nconst int COUNTER_CLOCKWISE = -1;   //逆时针\nconst int CLOCKWISE = 1;            //顺时针\nconst int ON_SEGMENT = 0;           //在线段上\nconst int ONLINE_BACK = 2;          //p2在向量p1-p0的反方向延长线上\nconst int ONLINE_FRONT = -2;        //p2在向量p1-p0的正方向延长线上\n\nint ccw(Point p0,Point p1,Point p2){\n    Vector a=p1-p0;\n    Vector b=p2-p0;\n    if(cross(a,b)>EPS) return COUNTER_CLOCKWISE;\n    if(cross(a,b)<-EPS) return CLOCKWISE;\n    if(dot(a,b)<-EPS) return ONLINE_BACK;\n    if(a.norm()<b.norm()) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\n//判断线段p1p2与线段p3p4是否相交\nbool intersect(Point p1,Point p2,Point p3,Point p4){\n    return ( ccw(p1,p2,p3)*ccw(p1,p2,p4)<=0 &&\n             ccw(p3,p4,p1)*ccw(p3,p4,p2)<=0 );\n}\n\nbool intersect(Segment s1,Segment s2){\n    return intersect(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n\n//线段与线段的距离\ndouble getDistance(Segment s1,Segment s2){\n    if(intersect(s1,s2)) return 0.0;\n    return min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),\n               min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n}\n\n//两个线段的交点(对于直线跟线段也适用，但注意base是在直线上)\nPoint getCrossPoint(Segment s1,Segment s2){\n    Vector base=s2.p2-s2.p1;\n    double d1=abs(cross(base,s1.p1-s2.p1));\n    double d2=abs(cross(base,s1.p2-s2.p1));\n    double t=d1/(d1+d2);\n    return s1.p1+(s1.p2-s1.p1)*t;\n}\n\n/* 直线正交\n * 判断向量a，b是否正交 =》a，b的内积为0\n */\nbool isOrthogonal(Vector a,Vector b){\n    return equals(dot(a,b),0.0);\n}\n\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n    return isOrthogonal(a1-a2,b1-b2);\n}\n\n/* 直线平行\n * 判断向量a，b是否平行 =》a，b的内积为0\n */\nbool isParallel(Vector a,Vector b){\n    return equals(cross(a,b),0.0);\n}\n\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n    return isParallel(a1-a2,b1-b2);\n}\n\n// *********圆***********\nstruct Circle{\n    Point c;\n    double r;\n    Circle(Point c = Point() ,double r = 0.0 ):c(c),r(r){}\n};\n\n//两个圆的位置关系\nconst int SEPARATION = 4;        //相离\nconst int EXTERNAL_CUT = 3;      //外切\nconst int INTERSECTION = 2;      //相交\nconst int INTERNAL_CUT = 1;      //内切\nconst int INCLUDE = 0;           //内含\n\nint getCircleToCircle(Circle c1,Circle c2){\n    double dis=getDistance(c1.c,c2.c);\n    if(c1.r+c2.r<dis){\n        return SEPARATION;\n    }else if(c1.r+c2.r==dis){\n        return EXTERNAL_CUT;\n    }else {\n        if(sign(fabs(c1.r-c2.r)-dis)==0) return INTERNAL_CUT;\n        else if(sign(fabs(c1.r-c2.r)-dis)==1) return INCLUDE;\n        return INTERSECTION;\n    }\n}\n\n/* 圆与直线的交点\n * 交点为一个的时候返回两个相同的点\n * 没有交点则退出\n */\n\nbool intersect(Circle c,Line l){\n    return sign(getDistanceLP(l,c.c)-c.r)<=0;\n}\n\npair<Point,Point> getCrossPoints(Circle c,Line l){\n    assert(intersect(c,l));         //没有交点\n    Point pr=project(l,c.c);\n    Vector e=(l.p2-l.p1)/(l.p2-l.p1).abs();\n    double base=sqrt(c.r*c.r-(pr-c.c).norm());\n    return make_pair(pr+e*base,pr-e*base);\n}\n\n\n//圆与圆的交点\n\nbool intersect(Circle c1,Circle c2){\n    return sign(getDistance(c1.c,c2.c)-(c1.r+c2.r))<=0;\n}\n\ndouble arg(Vector p){\n    return atan2(p.y,p.x);// double atan2(double y,double x) 返回的是原点至点(x,y)的方位角，即与 x 轴的夹角。返回值的单位为弧度，取值范围为(-PI,PI]\n}\n\nVector polar(double r,double a){\n    return Point(cos(a)*r,sin(a)*r);\n}\n\npair<Point,Point> getCrossPoints(Circle c1,Circle c2){\n    assert(intersect(c1,c2));\n    double d=(c1.c-c2.c).abs();\n    double a=acos((c1.r*c1.r+d*d-c2.r*c2.r)/(2*c1.r*d));\n    double t=arg(c2.c-c1.c);\n    return make_pair(c1.c+polar(c1.r,t+a),c1.c+polar(c1.r,t-a));\n}\n\n/*   多边形  */\ntypedef vector<Point> Polygon;\n\n//点的****内包*****(判断点与多边形的关系)\n//多边形内返回2\n//多边形上返回1\n//多边形外返回0\nint contains(Polygon g,Point p){\n    int n=g.size();\n    bool x=false;\n    for(int i=0;i<n;i++){\n        Point a=g[i]-p,b=g[(i+1)%n]-p;\n        if(abs(cross(a,b))<EPS&&dot(a,b)<EPS) return 1;\n        if(a.y>b.y) swap(a,b);\n        if(a.y<EPS&&EPS<b.y&&cross(a,b)>EPS) x=!x;\n    }\n    return (x?2:0);\n}\n\n/* *******凸包*****(包含点集合p中所有点的最小凸多边形)\n * 输出凸多边形最下端最左侧的顶点为起点,按逆时针方向依次输出坐标。\n * 安德鲁算法 O(n*logn)\n */\n\ndouble Area(Point p0,Point p1,Point p2){\n    return (p1.x-p0.x)*(p2.y-p0.y)-(p2.x-p0.x)*(p1.y-p0.y);\n}\n\nPolygon andrewscanf(Polygon s){\n    int n=s.size();\n    sort(s.begin(),s.end());    //x从小到大，x相同的y从小到大\n    Polygon u;\n    //构建凸包上部\n    for(int i=0;i<n;i++){\n        for(int j=u.size();j>=2&&Area(u[j-2],u[j-1],s[i]) <= EPS;j--){\n            u.pop_back();\n        }\n        u.push_back(s[i]);\n    }\n    //构建凸包下部\n    int tmp=u.size()+1;\n    for(int i=n-2;i>=0;i--){\n        for(int j=u.size();j>=tmp&&Area(u[j-2],u[j-1],s[i]) <= EPS;j--){\n            u.pop_back();\n        }\n        u.push_back(s[i]);\n    }\n    //按顺序生成凸包点的序列\n    if(n>1) u.pop_back();               //开始点多加入了一次\n    return u;\n}\n\n//旋转卡壳*-------》计算凸包直径\ndouble RC(Polygon v){\n    double res=0;\n    int n=v.size();\n    int k=1;\n    for(int i=0;i<n;i++){\n        while(sign(Area(v[i],v[(i+1)%n],v[(k+1)%n])-Area(v[i],v[(i+1)%n],v[k%n]))==1) k=(k+1)%n;\n        res=max(res,max((v[i]-v[k]).abs(),(v[(i+1)%n]-v[k]).abs()));\n    }\n    return res;\n}\n\n//  平面上最近点对。（分治  nlognlogn）\nPoint a[100005],b[100005];\n\ninline bool CmpY(Point a,Point b){\n    return a.y<b.y;\n}\n\ndouble Divide_Conquer(int l,int r){\n    if(l==r) return inf;\n    if(l+1==r) return getDistance(a[l],a[r]);\n    int mid=l+r>>1;\n    double ans=min(Divide_Conquer(l,mid),Divide_Conquer(mid+1,r));\n    int len=0;\n    for(int i=l;i<=r;i++){\n        if(fabs(a[mid].x-a[i].x)<=ans) b[len++]=a[i];\n    }\n    sort(b,b+len,CmpY);\n    for(int i=0;i<len;i++){\n        for(int j=i+1;j<len&&(b[j].y-b[i].y<ans);j++){\n            ans=min(ans,getDistance(b[i],b[j]));\n        }\n    }\n    return ans;\n}\n\ninline void solve(int n){\n    sort(a,a+n);\n    printf(\"%.10f\\n\",Divide_Conquer(0,n-1));\n}\n\n\nint main(){\n    double x,y,r;\n    scanf(\"%lf%lf%lf\",&x,&y,&r);\n    Circle c1(Point(x,y),r);\n    scanf(\"%lf%lf%lf\",&x,&y,&r);\n    Circle c2(Point(x,y),r);\n    printf(\"%d\\n\",getCircleToCircle(c1,c2));\n    return 0;\n}\n\n\n\n\n\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\n#include <cstdlib>\nusing namespace std;\n\nint main(){\n  double c1x, c1y, c1r, c2x, c2y, c2r;\n  scanf(\"%lf %lf %lf\", &c1x, &c1y, &c1r);\n  scanf(\"%lf %lf %lf\", &c2x, &c2y, &c2r);\n  if(sqrt(pow(c1x-c2x,2) + pow(c1y-c2y,2)) > c1r + c2r) printf(\"4\\n\");\n  else if(sqrt(pow(c1x-c2x,2) + pow(c1y-c2y,2)) == c1r + c2r) printf(\"3\\n\");\n  else if(sqrt(pow(c1x-c2x,2) + pow(c1y-c2y,2)) > abs(c1r - c2r) && sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2)) < c1r + c2r) printf(\"2\\n\");\n  else if(sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2)) == abs(c1r - c2r)) printf(\"1\\n\");\n  else printf(\"0\\n\");\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i, n) for (int i = 0; i < (int)(n); i++)\n#define rrep(i, n) for (int i = (int)(n - 1); i >= 0; i--)\n#define all(x) (x).begin(), (x).end()\n#define sz(x) int(x.size())\n#define get_unique(x) x.erase(unique(all(x)), x.end());\ntypedef long long ll;\ntypedef complex<double> Complex;\nconst int INF = 1e9;\nconst ll MOD = 1e9 + 7;\nconst ll LINF = 1e18;\ntemplate <class T>\nbool chmax(T &a, const T &b) {\n    if (a < b) {\n        a = b;\n        return 1;\n    }\n    return 0;\n}\ntemplate <class T>\nbool chmin(T &a, const T &b) {\n    if (b < a) {\n        a = b;\n        return 1;\n    }\n    return 0;\n}\ntemplate <class T>\nvector<T> make_vec(size_t a) {\n    return vector<T>(a);\n}\ntemplate <class T, class... Ts>\nauto make_vec(size_t a, Ts... ts) {\n    return vector<decltype(make_vec<T>(ts...))>(a, make_vec<T>(ts...));\n}\n\nstruct Circle {\n    double x, y, r;\n};\n\n\nint CommonTangent(Circle c1, Circle c2) {\n    double x1, y1, r1, x2, y2, r2;\n    x1 = c1.x, y1 = c1.y, r1 = c1.r;\n    x2 = c2.x, y2 = c2.y, r2 = c2.r;\n    double d = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);\n    if (d > (r1 + r2) * (r1 + r2)) return 4;\n    if (d == (r1 + r2) * (r1 + r2)) return 3;\n    if (d > (r1 - r2) * (r1 - r2)) return 2;\n    if (d == (r1 - r2) * (r1 - r2)) return 1;\n    return 0;\n}\n\nint main() {\n    cout << fixed << setprecision(20);\n    Circle c1, c2;\n    cin >> c1.x >> c1.y >> c1.r;\n    cin >> c2.x >> c2.y >> c2.r;\n    cout << CommonTangent(c1, c2) << endl;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\nconst double eps=1e-9;\nstruct dot{\n\tdouble x,y;\n\tdouble len(){return sqrt(x*x+y*y);}\n\tdot(double a=0.0,double b=0.0){x=a,y=b;}\n\tdot operator +(const dot&b)const {return dot(x+b.x,y+b.y);}\n\tdot operator -(const dot&b)const {return dot(x-b.x,y-b.y);}\n\tdot operator *(const double&z)const {return dot(x*z,y*z);}\n\tbool operator <(const dot&b)const {return (y<b.y)||(y==b.y&&x<b.x);}\n\tbool operator ==(const dot&b)const {return fabs(x-b.x)<eps&&fabs(y-b.y)<eps;}\t\n\tbool operator !=(const dot&b)const {return fabs(x-b.x)>=eps||fabs(y-b.y)>=eps;}\n\tvoid read(){scanf(\"%lf%lf\",&x,&y);} \n};\nstruct line{\n\tdot x1,x2;\n\tvoid read(){x1.read();x2.read();};\n\tline(dot a=dot(0.0,0.0),dot b=dot(0.0,0.0)){x1=a,x2=b;} \n\tdot getdot(){return x2-x1;}\n};\ndouble chaji(dot x,dot y){\n\treturn x.x*y.y-x.y*y.x;\n}\ndouble neiji(dot x,dot y){\n\treturn x.x*y.x+x.y*y.y;\n}\ndouble cos(dot x,dot y){\n\tif (!x.len()||!y.len())return 0;\n\treturn neiji(x,y)/x.len()/y.len();\n}\ndot Projection(dot x,line y){//求x关于直线y的投影点（垂足） \n\ty.x2=y.x2-y.x1;\n\tx=x-y.x1;\n\tdouble len=cos(x,y.x2)*x.len()/y.x2.len();\n\ty.x2=y.x2*len;\n\treturn y.x2+y.x1;\n}\ndot Reflection(dot x,line y){//求x关于直线y的对称点 \n\tdot z=Projection(x,y);\n\treturn z*2-x;\n}\nint Counter_Clockwise(dot x,line y){//求两个向量的五种关系 \n\tx=x-y.x1;y.x2=y.x2-y.x1;\n\tif (chaji(y.x2,x)!=0){\n\t\tif (chaji(y.x2,x)>0)return 1;\n\t\treturn 2;\n\t} \n\tif (fabs(cos(x,y.x2)+1)<eps)return 3;\n\tif (x.len()>y.x2.len())return 4;\n\treturn 5;\n} \nint Parallel_Orthogonal(line x,line y){//求两个直线是垂直还是平行还是其他 \n\tdot a=x.getdot(),b=y.getdot();\n\tif (chaji(a,b)==0)return 2;\n\tif (neiji(a,b)==0)return 1;\n\treturn 0;\n}\nint Intersection(line x,line y){//求两条线段是否相交 \n\tint Minx1=min(x.x1.x,x.x2.x),Maxx1=max(x.x1.x,x.x2.x);\n\tint Minx2=min(y.x1.x,y.x2.x),Maxx2=max(y.x1.x,y.x2.x);\n\tint Miny1=min(x.x1.y,x.x2.y),Maxy1=max(x.x1.y,x.x2.y);\n\tint Miny2=min(y.x1.y,y.x2.y),Maxy2=max(y.x1.y,y.x2.y);\n\tif (Minx1>Maxx2||Minx2>Maxx1)return 0;\n\tif (Miny1>Maxy2||Miny2>Maxy1)return 0;\n\tif (chaji(x.getdot(),y.x1-x.x1)*chaji(x.getdot(),y.x2-x.x1)>0)return 0;\n\tif (chaji(y.getdot(),x.x1-y.x1)*chaji(y.getdot(),x.x2-y.x1)>0)return 0;\n\treturn 1;\n}\nint Intersection2(line x,line y){//求线段和直线是否相交 \n\tif (chaji(y.getdot(),x.x1-y.x1)*chaji(y.getdot(),x.x2-y.x1)>0)return 0;\n\treturn 1;\n}\ndot CrossPoint(line x,line y){//求两条线段的交点 \n\tif (fabs(cos(x.getdot(),y.getdot())-1)<eps||fabs(cos(x.getdot(),y.getdot())+1)<eps){\n\t\tif (x.x1<x.x2)swap(x.x1,x.x2);\n\t\tif (y.x1<y.x2)swap(y.x1,y.x2);\n\t\tif (x.x2<y.x2)return y.x2;\n\t\telse return x.x2;\n\t}\n\telse {\n\t\tif (x.x2.x-x.x1.x==0){\n\t\t\tdouble k2=(y.x2.y-y.x1.y)/(y.x2.x-y.x1.x),b2=y.x2.y-y.x2.x*k2;\n\t\t\treturn dot(x.x2.x,x.x2.x*k2+b2);\n\t\t}\n\t\tif (y.x2.x-y.x1.x==0){\n\t\t\tdouble k1=(x.x2.y-x.x1.y)/(x.x2.x-x.x1.x),b1=x.x2.y-x.x2.x*k1;\n\t\t\treturn dot(y.x2.x,y.x2.x*k1+b1);\t\t\t\n\t\t}\n\t\tdouble k1=(x.x2.y-x.x1.y)/(x.x2.x-x.x1.x),b1=x.x2.y-x.x2.x*k1;\n\t\tdouble k2=(y.x2.y-y.x1.y)/(y.x2.x-y.x1.x),b2=y.x2.y-y.x2.x*k2;\n\t\tdot ans;\n\t\tans.x=(b2-b1)/(k1-k2);ans.y=ans.x*k1+b1;\n\t\treturn ans;\n\t}\n} \ndouble Dis(dot x,dot y){//点到点的距离 \n\treturn sqrt((x.x-y.x)*(x.x-y.x)+(x.y-y.y)*(x.y-y.y));\n}\ndouble dist(line x,dot y){//点到线段的距离 \n\tdot P=Projection(y,x);\n\tdouble k=neiji(x.getdot(),P-x.x1)/neiji(x.getdot(),x.getdot());\n\tif (k<=0)return Dis(x.x1,y);\n\tif (k>=1)return Dis(x.x2,y);\n\treturn Dis(y,P);\n}\ndouble Distance(line x,line y){//线段之间距离 \n\treturn min(min(dist(x,y.x1),dist(x,y.x2)),min(dist(y,x.x1),dist(y,x.x2)));\n}\nstruct polygon{\n\tvector<dot > A;\n\tdouble S(){//多边形面积\n\t\tdouble ans=0;\n\t\tfor (int i=0;i+1<A.size();i++)ans+=chaji(A[i],A[i+1])/2;\n\t\tif (A.size()>1)ans+=chaji(A[A.size()-1],A[0])/2;\n\t\treturn ans;\t\t\n\t}\n\tdouble C(){//多边形周长 \n\t\tdouble ans=0;\n\t\tfor (int i=0;i+1<A.size();i++)ans+=Dis(A[i],A[i+1]);\n\t\tif (A.size()>1)ans+=Dis(A[A.size()-1],A[0]);\n\t\treturn ans;\n\t}\n\tvoid read(){\n\t\tint n;scanf(\"%d\",&n);A.resize(n);\n\t\tfor (int i=0;i<n;i++)A[i].read();\n\t}\n\tint Is_Convex(){//是否是凸多边形 \n\t\tfor (int i=0;i<A.size();i++)\n\t\t\tif (chaji(A[(i+1)%A.size()]-A[i],A[(i+2)%A.size()]-A[(i+1)%A.size()])<0)\n\t\t\t\treturn 0;\n\t\treturn 1;\n\t}\n}G;\nint PolygonPointContainment(polygon G,dot x){//射线和多边形的关系\n\tfor (int i=0;i<G.A.size();i++)\n\t\tif (Counter_Clockwise(x,line(G.A[i],G.A[(i+1)%G.A.size()]))==5)return 1;\n\tfor (int i=0;i<G.A.size();i++)\n\t\tif (x==G.A[i])return 1;\n\tdouble k=sqrt(2)+1,b=x.y-x.x*k;\n\tdot x2=dot(-1000000000,-1000000000*k+b);line R=line(x,x2);\n\tint ans=0;\n\tfor (int i=0;i<G.A.size();i++)\n\t\tif (Intersection(R,line(G.A[i],G.A[(i+1)%G.A.size()])))ans++;\n\tif (ans&1)return 2;\n\treturn 0;\t\n}\nint isclock(dot x,dot y,dot z){//是否顺时针 \n\treturn chaji(z-x,y-x)<0;\n}\npolygon Convex_Hull(polygon G){//求凸包 \n\tpolygon ans1,ans2;\n\tsort(G.A.begin(),G.A.end());\n\tans1.A.push_back(G.A[0]);ans1.A.push_back(G.A[1]);\n\tfor (int i=2;i<G.A.size();i++){\n\t\twhile (ans1.A.size()>=2&&isclock(ans1.A[ans1.A.size()-2],ans1.A[ans1.A.size()-1],G.A[i]))\n\t\t\tans1.A.pop_back();\n\t\tans1.A.push_back(G.A[i]);\t\n\t}\n\tans2.A.push_back(G.A[G.A.size()-1]);ans2.A.push_back(G.A[G.A.size()-2]);\n\tfor (int i=G.A.size()-3;i>=0;i--){\n\t\twhile (ans2.A.size()>=2&&isclock(ans2.A[ans2.A.size()-2],ans2.A[ans2.A.size()-1],G.A[i]))\n\t\t\tans2.A.pop_back();\n\t\tans2.A.push_back(G.A[i]);\t\t\n\t}\n\tfor (int i=1;i<ans2.A.size()-1;i++)ans1.A.push_back(ans2.A[i]);\n\treturn ans1;\n}\ndouble DiameterofaConvexPolygon(polygon G){//求直径 \n\tint l=0,r=1,flag=1;\n\tdouble ans=Dis(G.A[0],G.A[1]);\n\twhile (l!=0||flag){\n\t\tflag=0;\n\t\twhile (Dis(G.A[l],G.A[r])<=Dis(G.A[l],G.A[(r+1)%G.A.size()])){\n\t\t\tr=(r+1)%G.A.size();\n\t\t\tans=max(ans,Dis(G.A[l],G.A[r]));\n\t\t}\n\t\tl=(l+1)%G.A.size();\n\t\tans=max(ans,Dis(G.A[l],G.A[r]));\n\t}\n\treturn ans;\n}\ndouble Convex_Cut(polygon G,line x){//求多边形在线的左边的部分 \n\tpolygon ans;line y=x;\n\tfor (int i=0;i<G.A.size();i++){\n\t\tif (chaji(y.x2-y.x1,G.A[i]-y.x1)>=0)ans.A.push_back(G.A[i]);\n\t\tif (Intersection2(line(G.A[i],G.A[(i+1)%G.A.size()]),y))\n\t\t\tans.A.push_back(CrossPoint(line(G.A[i],G.A[(i+1)%G.A.size()]),y));\t\n\t}\n\treturn ans.S();\n}\nint cmp2(int x,int y){\n\treturn G.A[x]<G.A[y];\n}\ndouble ClosestPair(int l,int r){//求平面最近点对 \n    double d=1e20;vector<int > ans;\n    if (l==r)return d;\n    if (l+1==r)return Dis(G.A[l],G.A[r]);\n    int mid=(l+r)/2; \n    double d1=ClosestPair(l,mid),d2=ClosestPair(mid+1,r);\n    d=min(d1,d2);\n    for (int i=l;i<=r;i++)\n        if (fabs(G.A[mid].x-G.A[i].x)<=d)ans.push_back(i);\n    sort(ans.begin(),ans.end(),cmp2);\n    for (int i=0;i<ans.size();i++)\n        for (int j=i+1;j<ans.size()&&G.A[ans[j]].y-G.A[ans[i]].y<d;j++)\n\t\t\td=min(d,Dis(G.A[ans[i]],G.A[ans[j]]));\n    return d;\n}\nint cmp(dot x,dot y){\n\treturn x.x<y.x||(x.x==y.x&&x.y<y.y);\n}\nstruct cricle{\n\tdot x;\n\tint r;\n\tvoid read(){\n\t\tx.read();\n\t\tscanf(\"%d\",&r);\n\t}\n};\nint IntersectionofCircles(cricle x,cricle y){//求两个圆的公切线个数 \n\tif (x.r+y.r<Dis(x.x,y.x))return 4;\n\tif (x.r+y.r==Dis(x.x,y.x))return 3;\n\tif (fabs(x.r-y.r)<Dis(x.x,y.x))return 2;\n\tif (fabs(x.r-y.r)==Dis(x.x,y.x))return 1;\n\treturn 0;\n}\nint main(){\n\tcricle x,y;\n\tx.read();y.read();\n\tprintf(\"%d\\n\",IntersectionofCircles(x,y));\n}\n"
  },
  {
    "language": "C++",
    "code": "/// Geometry INT\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long LL;\n\ninline int sign(const LL x) {\n\tif (x < 0) {\n\t\treturn -1;\n\t}\n\tif (x > 0) {\n\t\treturn 1;\n\t}\n\treturn 0;\n}\n\nstruct point {\n\tLL x, y;\n\tpoint() {}\n\tpoint(LL _x, LL _y) : x(_x), y(_y) {}\n};\n\nbool operator < (const point &P, const point &Q) {\n\tif (P.y != Q.y) {\n\t\treturn P.y < Q.y;\n\t}\n\treturn P.x < Q.x;\n}\n\nbool operator == (const point &P, const point &Q) {\n\treturn !(P < Q) && !(Q < P);\n}\n\nstruct compare_x {\n\tbool operator () (const point &P, const point &Q) {\n\t\tif (P.x != Q.x) {\n\t\t\treturn P.x < Q.x;\n\t\t}\n\t\treturn P.y < Q.y;\n\t}\n};\n\nvoid normalize(point &P) {\n\tassert(P.x != 0 || P.y != 0);\n\tLL g = __gcd(abs(P.x), abs(P.y));\n\tP.x /= g;\n\tP.y /= g;\n\tif (P.x < 0 || (P.x == 0 && P.y < 0)) {\n\t\tP.x = -P.x;\n\t\tP.y = -P.y;\n\t}\n}\n\ninline int half_plane(const point &P) {\n\tif (P.y != 0) {\n\t\treturn sign(P.y);\n\t}\n\treturn sign(P.x);\n}\n\npoint operator + (const point &P, const point &Q) {\n\treturn point(P.x + Q.x, P.y + Q.y);\n}\n\npoint operator - (const point &P, const point &Q) {\n\treturn point (P.x - Q.x, P.y - Q.y);\n}\n\npoint operator * (const point &P, const LL k) {\n\treturn point(P.x * k, P.y * k);\n}\n\npoint operator / (const point &P, const LL k) {\n\tassert(k != 0 && P.x % k == 0 && P.y % k == 0);\n\treturn point(P.x / k, P.y / k);\n}\n\ninline LL dot(const point &P, const point &Q) {\n\treturn P.x * Q.x + P.y * Q.y;\n}\n\ninline LL cross(const point &P, const point &Q) {\n\treturn P.x * Q.y - P.y * Q.x;\n}\n\ninline LL dist2(const point &P, const point &Q) {\n\tLL dx = P.x - Q.x;\n\tLL dy = P.y - Q.y;\n\treturn dx * dx + dy * dy;\n}\n\ninline bool is_in(LL x, LL a, LL b) {\n\tif (a > b) {\n\t\tswap(a, b);\n\t}\n\treturn (a <= x && x <= b);\n}\n\ninline bool is_in(const point &P, const point &A, const point &B) {\n\tif (cross(B - A, P - A) != 0) {\n\t\treturn false;\n\t}\n\treturn (is_in(P.x, A.x, B.x) && is_in(P.y, A.y, B.y));\n}\n\ninline bool segment_segment_intersect(const point &A, const point &B, const point &C, const point &D) {\n\tif (cross(B - A, D - C) == 0) { // lines are parallel\n\t\treturn (is_in(A, C, D) || is_in(B, C, D) || is_in(C, A, B) || is_in(D, A, B));\n\t}\n\tif (sign(cross(C - A, B - A)) * sign(cross(D - A, B - A)) > 0) {\n\t\treturn false;\n\t}\n\tif (sign(cross(A - C, D - C)) * sign(cross(B - C, D - C)) > 0) {\n\t\treturn false;\n\t}\n\treturn true;\n}\n\ninline bool is_convex(const vector <point> &polygon) {\n\tint n = polygon.size();\n\tassert(n >= 3);\n\tfor (int i = 0; i < n; i++) {\n\t\tint j = (i + 1) % n;\n\t\tint k = (i + 2) % n;\n\t\tif (sign(cross(polygon[j] - polygon[i], polygon[k] - polygon[i])) < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst int OUT = 0;\nconst int ON = 1;\nconst int IN = 2;\n/// 0 outside, 1 boundary, 2 inside\ninline int point_inside_polygon(const point &P, const vector <point> &polygon) {\n\tint n = polygon.size();\n\tint cnt = 0;\n\tfor (int i = 0; i < n; i++) {\n\t\tpoint A = polygon[i];\n\t\tpoint B = polygon[(i + 1) % n];\n\t\tif (is_in(P, A, B)) {\n\t\t\treturn ON;\n\t\t}\n\t\tif (B.y < A.y) {\n\t\t\tswap(A, B);\n\t\t}\n\t\tif (P.y < A.y || B.y <= P.y || A.y == B.y) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (sign(cross(B - A, P - A)) > 0) {\n\t\t\tcnt++;\n\t\t}\n\t}\n\tif (cnt & 1) {\n\t\treturn IN;\n\t}\n\treturn OUT;\n}\n\nstruct compare_angle {\n\tpoint O;\n\tcompare_angle() {}\n\tcompare_angle(point _O) {\n\t\tO = _O;\n\t}\n\tbool operator () (const point &P, const point &Q) {\n\t\tif (half_plane(P - O) != half_plane(Q - O)) {\n\t\t\treturn half_plane(P - O) < half_plane(Q - O);\n\t\t}\n\t\tint c = sign(cross(P - O, Q - O));\n\t\tif (c != 0) {\n\t\t\treturn (c > 0);\n\t\t}\n\t\treturn dist2(P, O) < dist2(Q, O);\n\t}\n};\n\n/// !!! no se como mantener los puntos colineales del convex hull\n/// not tested\nvector <point> convex_hull_graham_scan(vector <point> pts) {\n\tsort(pts.begin(), pts.end());\n\tint n = pts.size();\n\tsort(++pts.begin(), pts.end(), compare_angle(pts[0]));\n\tvector <point> ch(n);\n\tint top = 0;\n\tfor (int i = 0; i < n; i++) {\n\t\twhile (top >= 2 && cross(ch[top - 1] - ch[top - 2], pts[i] - ch[top - 2]) < 0) {\n\t\t\ttop--;\n\t\t}\n\t\tch[top++] = pts[i];\n\t}\n\tch.resize(top);\n\treturn ch;\n}\n\nvector <point> convex_hull_monotone_chain(vector <point> pts) {\n\tsort(pts.begin(), pts.end());\n\tint n = pts.size();\n\tvector <point> ch(2 * n);\n\tint top = 0;\n\tfor (int i = 0; i < n; i++) {\n\t\twhile (top >= 2 && cross(ch[top - 1] - ch[top - 2], pts[i] - ch[top - 2]) < 0) {\n\t\t\ttop--;\n\t\t}\n\t\tch[top++] = pts[i];\n\t}\n\tint size = top;\n\tfor (int i = n - 2; i >= 0; i--) {\n\t\twhile (top - size >= 1 && cross(ch[top - 1] - ch[top - 2], pts[i] - ch[top - 2]) < 0) {\n\t\t\ttop--;\n\t\t}\n\t\tch[top++] = pts[i];\n\t}\n\tif (ch[0] == ch[top - 1]) {\n\t\ttop--;\n\t}\n\tch.resize(top);\n\treturn ch;\n}\n\nint count_commont_tangents(point C1, LL r1, point C2, LL r2) {\n\tLL d2 = dist2(C1, C2);\n\t// if (r1 > r2) {\n\t\t// swap(C1, C2);\n\t\t// swap(r1, r2);\n\t// }\n\tif (d2 > (r1 + r2) * (r1 + r2)) {\n\t\treturn 4;\n\t}\n\tif (d2 == (r1 + r2) * (r1 + r2)) {\n\t\treturn 3;\n\t}\n\tif (d2 < (r1 - r2) * (r1 - r2)) {\n\t\treturn 0;\n\t}\n\tif (d2 == (r1 - r2) * (r1 - r2)) {\n\t\treturn 1;\n\t}\n\treturn 2;\n}\n\nvoid normalize_convex(vector <point> &polygon) {\n\tpolygon.erase(unique(polygon.begin(), polygon.end()), polygon.end());\n\twhile (polygon.size() > 1 && polygon[0] == polygon.back()) {\n\t\tpolygon.pop_back();\n\t}\n\trotate(polygon.begin(), min_element(polygon.begin(), polygon.end()), polygon.end());\n\tint ptr = 1;\n\tfor (int i = 1; i < polygon.size(); i++) {\n\t\tif (is_in(polygon[i], polygon[i - 1], polygon[i + 1 == polygon.size() ? 0 : i + 1]));\n\t\tpolygon[ptr++] = polygon[i];\n\t}\n\tpolygon.resize(ptr);\n}\n\n// apply normalize_convex before\ninline int inside_convex(const point &P, const vector <point> &polygon) {\n\tint n = polygon.size();\n\tassert(n >= 3);\n\tif (cross(P - polygon[0], polygon[1] - polygon[0]) > 0) {\n\t\treturn OUT;\n\t}\n\tif (cross(polygon[n - 1] - polygon[0], P - polygon[0]) > 0) {\n\t\treturn OUT;\n\t}\n\tif (cross(P - polygon[0], polygon[1] - polygon[0]) == 0) {\n\t\treturn (is_in(P, polygon[0], polygon[1]) ? ON : OUT);\n\t}\n\tif (cross(polygon[n - 1] - polygon[0], P - polygon[0]) == 0) {\n\t\treturn (is_in(P, polygon[0], polygon[n - 1]) ? ON : OUT);\n\t}\n\tint lo = 2;\n\tint hi = n - 1;\n\tint pos = hi;\n\twhile (lo <= hi) {\n\t\tint mid = (lo + hi) >> 1;\n\t\tif (cross(P - polygon[0], polygon[mid] - polygon[0]) >= 0) {\n\t\t\tpos = mid;\n\t\t\thi = mid - 1;\n\t\t} else {\n\t\t\tlo = mid + 1;\n\t\t}\n\t}\n\tint s = sign(cross(polygon[pos] - polygon[pos - 1], P - polygon[pos - 1]));\n\tif (s == 0) {\n\t\treturn ON;\n\t}\n\treturn ((s > 0) ? IN : OUT);\n}\n\n//http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_B\n// test OK\nvoid test_segment_segment_intersection() {\n\tint q;\n\tcin >> q;\n\twhile (q--) {\n\t\tpoint A, B, C, D;\n\t\tcin >> A.x >> A.y >> B.x >> B.y >> C.x >> C.y >> D.x >> D.y;\n\t\tcout << (segment_segment_intersect(A, B, C, D) ? \"1\" : \"0\") << \"\\n\";\n\t}\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_3_B\n// test OK\nvoid test_is_convex() {\n\tint n;\n\tcin >> n;\n\tvector <point> polygon(n);\n\tfor (int i = 0; i < n; i++) {\n\t\tcin >> polygon[i].x >> polygon[i].y;\n\t}\n\tcout << (is_convex(polygon) ? \"1\" : \"0\") << \"\\n\";\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_3_C\n// test OK\nvoid test_point_inside_polygon() {\n\tint n;\n\tcin >> n;\n\tvector <point> polygon(n);\n\tfor (int i = 0; i < n; i++) {\n\t\tcin >> polygon[i].x >> polygon[i].y;\n\t}\n\tint q;\n\tcin >> q;\n\twhile (q--) {\n\t\tpoint P;\n\t\tcin >> P.x >> P.y;\n\t\tcout << point_inside_polygon(P, polygon) << \"\\n\";\n\t}\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_A\n// test ok\nvoid test_parallel_orthogonal() {\n\tint q;\n\tcin >> q;\n\twhile (q--) {\n\t\tpoint A, B, C, D;\n\t\tcin >> A.x >> A.y >> B.x >> B.y >> C.x >> C.y >> D.x >> D.y;\n\t\tint answer = 0;\n\t\tif (cross(B - A, D - C) == 0) {\n\t\t\tanswer = 2;\n\t\t} else if (dot(B - A, D - C) == 0) {\n\t\t\tanswer = 1;\n\t\t}\n\t\tcout << answer << \"\\n\";\n\t}\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_4_A\n// test ok\nvoid test_convex_hull() {\n\tint n;\n\tcin >> n;\n\tvector <point> pts(n);\n\tfor (int i = 0; i < n; i++) {\n\t\tcin >> pts[i].x >> pts[i].y;\n\t}\n\tvector <point> answer = convex_hull_monotone_chain(pts);\n\tcout << answer.size() << \"\\n\";\n\tfor (int i = 0; i < answer.size(); i++) {\n\t\tcout << answer[i].x << \" \" << answer[i].y << \"\\n\";\n\t}\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_C\n// test OK\nvoid test_counter_clockwise() {\n\tpoint A, B;\n\tcin >> A.x >> A.y >> B.x >> B.y;\n\tint q;\n\tcin >> q;\n\twhile (q--) {\n\t\tpoint C;\n\t\tcin >> C.x >> C.y;\n\t\tint s = sign(cross(B - A, C - A));\n\t\tif (s != 0) {\n\t\t\tcout << ((s > 0) ? \"COUNTER_CLOCKWISE\" : \"CLOCKWISE\") << \"\\n\";\n\t\t} else {\n\t\t\tif (dot(B - A, C - A) < 0) {\n\t\t\t\tcout << \"ONLINE_BACK\\n\";\n\t\t\t} else {\n\t\t\t\tcout << (dist2(A, B) < dist2(A, C) ? \"ONLINE_FRONT\" : \"ON_SEGMENT\") << \"\\n\";\n\t\t\t}\n\t\t}\n\t}\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/status.jsp#submit/CGL_7/A\n// test ???\nvoid test_count_common_tangents() {\n\tpoint C1, C2;\n\tLL r1, r2;\n\tcin >> C1.x >> C1.y >> r1 >> C2.x >> C2.y >> r2;\n\tint answer = count_commont_tangents(C1, r1, C2, r2);\n\tcout << answer << \"\\n\";\n}\n\nint main() {\n\tios::sync_with_stdio(false);\n\tcin.tie(0);\n\n\t// test_segment_segment_intersection();\n\t// test_is_convex();\n\t// test_point_inside_polygon();\n\t// test_parallel_orthogonal();\n\t// test_convex_hull();\n\t// test_counter_clockwise();\n\ttest_count_common_tangents();\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define syosu(x) fixed<<setprecision(x)\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int,int> P;\ntypedef pair<double,double> pdd;\ntypedef pair<ll,ll> pll;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef vector<double> vd;\ntypedef vector<vd> vvd;\ntypedef vector<ll> vl;\ntypedef vector<vl> vvl;\ntypedef vector<string> vs;\ntypedef vector<P> vp;\ntypedef vector<vp> vvp;\ntypedef vector<pll> vpll;\ntypedef pair<int,P> pip;\ntypedef vector<pip> vip;\nconst int inf=1<<30;\nconst ll INF=1ll<<60;\nconst double pi=acos(-1);\nconst double eps=1e-9;\nconst ll mod=1e9+7;\nconst int dx[4]={0,1,0,-1},dy[4]={1,0,-1,0};\n\ntypedef complex<double> C;\ntypedef pair<C,C> pp;\ntypedef vector<C> VP;\ntypedef vector<pp> VPP;\n#define eq(a,b) (fabs(a-b)<eps)\n#define veq(a,b) (eq(a.real(),b.real())&&eq(a.imag(),b.imag()))\nconst C O{0,0};\n\nvoid In(C& p){\n\tdouble x,y;\n\tcin>>x>>y;\n\tp=C(x,y);\n}\n\nvoid Out(C p){\n\tcout<<(int)p.real()<<' '<<(int)p.imag()<<endl;\n}\n\ndouble Dot(C p,C q){\n\treturn p.real()*q.real()+p.imag()*q.imag();\n}\n\ndouble Det(C p,C q){\n\treturn p.real()*q.imag()-q.real()*p.imag();\n}\n\nint Circles(C a,double r,C b,double R){\n\tint t=abs(a-b);\n\tif(t<abs(R-r)) return 0;\n\tif(t==abs(R-r)) return 1;\n\tif(t<R+r) return 2;\n\tif(t==R+r) return 3;\n\treturn 4;\n}\n\nC a,b;\ndouble r,R;\n\nint main(){\n\tIn(a);cin>>r;\n\tIn(b);cin>>R;\n\tcout<<Circles(a,r,b,R)<<endl;\n\t\n}\n"
  },
  {
    "language": "C++",
    "code": "from math import sqrt\n\nx1, y1, r1 = map(float, input().split())\nx2, y2, r2 = map(float, input().split())\n\nd = sqrt((x1 - x2)**2 + (y1 - y2)**2)\ng = max(r1 - r2, r2 - r1)\n\nif d <  g:\n    print(0)\n\nif d == g:\n    print(1)\n\nif d >  g:\n    if d <  r1 + r2: print(2)\n    if d == r1 + r2: print(3)\n    if d >  r1 + r2: print(4)\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<string>\n#include<algorithm>\n#include<cmath>\n#include<vector>\n#include<stack>\n#include<climits>\n#include<cstring>\n#include<queue>\n#include<complex>\nusing namespace std;\n\ntypedef complex<double> P;\n\nstruct C {\n    P p; double r;\n    C(const P &p, double r) : p(p), r(r) { }\n};\n\nconst double EPS = 1e-8;\n\nnamespace std {\n  bool operator < (const P& a, const P& b) {\n    return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n  }\n}\n\nint intersection(C &c1, C &c2){\n    if(c1.r > c2.r) swap(c1, c2);\n\n    P p1 = c1.p;\n    P p2 = c2.p;\n    double r1 = c1.r;\n    double r2 = c2.r;\n\n    double centDist = sqrt(norm(p1 - p2));\n    if(r1 + r2 < centDist - EPS) return 4;\n    if(abs(r1 + r2 - centDist) <= EPS) return 3;\n    if(r1 + r2 > centDist + EPS){\n        if( r2 - r1 < centDist - EPS ) return 2;\n        if( abs(r2 - r1 - centDist) <= EPS ) return 1;\n        if( r2 - r1 > centDist + EPS ) return 0;\n    }\n\n}\n\nint main(){\n    double c1x, c1y, c1r, c2x, c2y, c2r;\n    cin >> c1x >> c1y >> c1r >> c2x >> c2y >> c2r;\n    P p1(c1x, c1y);\n    P p2(c2x, c2y);\n    C c1(p1, c1r);\n    C c2(p2, c2r);\n    cout << intersection(c1, c2) << endl;\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n#define F first\n#define S second\n#define pii pair<int, int>\n#define eb emplace_back\n#define all(v) v.begin(), v.end()\n#define rep(i, n) for (int i = 0; i < (n); ++i)\n#define rep3(i, l, n) for (int i = l; i < (n); ++i)\n#define chmax(a, b) a = (a >= b ? a : b)\n#define chmin(a, b) a = (a <= b ? a : b)\n#define sz(v) (int)v.size()\n#define inf (int)(1e9+7)\n#define ceil(a, b) a / b + !!(a % b)\nll pow(ll a, int b) { return b ? pow(a * a, b / 2) * (b % 2 ? a : 1) : 1; }\ntemplate<typename T> T gcd(T a, T b) { if (b == 0) return a; return gcd(b, a % b); }\n\nusing P = complex<double>;\nstruct S { P p1, p2; };\ndouble dot(P a, P b) { return real(conj(a) * b); }\ndouble cross(P a, P b) { return imag(conj(a) * b); }\nconst double eps = 1e-8;\n\ndouble norm(P a) { return real(a) * real(a) + imag(a) * imag(a); }\ndouble abs(P a) { return sqrt(norm(a)); }\n\nint main() {\n    double x1, y1, r1, x2, y2, r2;\n    cin >> x1 >> y1 >> r1 >> x2 >> y2 >> r2;\n    \n    P p0 = P(x1, y1), p1 = P(x2, y2);\n    \n    if (abs(max(r1, r2) - min(r1, r2) - abs(p0 - p1)) < eps) cout << 1 << endl; // 内接\n    else if (max(r1, r2) - min(r1, r2) - abs(p0 - p1) > eps) cout << 0 << endl; // 内包\n    else if (abs(p0 - p1) < r1 + r2) cout << 2 << endl; // 交わる\n    else if (abs(p0 - p1) == r1 + r2) cout << 3 << endl; // 外接\n    else if (abs(p0 - p1) > r1 + r2) cout << 4 << endl; // 離れてる\n    \n}\n\n"
  },
  {
    "language": "C++",
    "code": "\n//be naame khodaa\n#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef long double ld;\ntypedef pair <int, int> pii;\ntypedef complex<ld> PT;\ntypedef vector<PT> Poly;\ntypedef pair<PT, PT> LS;\n#define F first\n#define S second\n#define X real()\n#define Y imag()\n#define pb push_back\n\ninline int in(){int x, y; y = scanf(\"%d\", &x); return x; }\n\nconst ld EPS = 1e-12;\n\nconst int ON = 0, LEFT = 1, RIGHT = -1, BACK = -2, FRONT = 2, IN = 3, OUT = -3;\n\ninline bool Geq(ld a, ld b){ return a - b > -EPS; }\ninline bool Grt(ld a, ld b){ return a - b > EPS; }\ninline bool Leq(ld a, ld b){ return a - b < EPS; }\ninline bool Lss(ld a, ld b){ return a - b < -EPS; }\ninline bool Equ(ld a, ld b){ return abs(a-b) < EPS; }\n\nistream& operator>> (istream& is, complex<ld>& p){\n\tld val; is >> val; p.real(val); is >> val; p.imag(val); return is;\n}\nbool byX(const PT &a, const PT &b){\n\tif (Equ(a.X, b.X)) return Lss(a.Y, b.Y);\n\treturn Lss(a.X, b.X);\n}\nbool byY(const PT &a, const PT &b){\n\tif (Equ(a.Y, b.Y)) return Lss(a.X, b.X);\n\treturn Lss(a.Y, b.Y);\n}\nstruct cmpXY{ bool operator ()(const PT &a, const PT &b){ return byX(a, b); } };\nstruct cmpYX{ bool operator ()(const PT &a, const PT &b){ return byY(a, b); } };\n\nld dot(PT a, PT b){ return real(conj(a)*b); }\nld cross(PT a, PT b){ return imag(conj(a)*b); }\nld sqlen(PT a){ return dot(a, a); }\nld len(PT a){ return sqrt(sqlen(a)); }\n\n//projection of c on ab\nPT proj(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\treturn a + b*real(c/b);\n}\n\n//reflection of c toward ab\nPT reflect(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\treturn a + conj(c/b)*b;\n}\n\n//rotate b with center=a theta radian\nPT rotate(PT a, PT b, ld theta){\n\treturn (b-a)*polar<ld>(1, theta) + a;\n}\n\n//relative position of c toward ab\nint relpos(PT a, PT b, PT c){\n\tb -= a; c -= a; c /= b;\n\tif (Grt(c.imag(), 0)) return LEFT;\n\tif (Lss(c.imag(), 0)) return RIGHT;\n\tif (Lss(c.real(), 0)) return BACK;\n\tif (Grt(c.real(), 1)) return FRONT;\n\treturn ON;\n}\n\n//sign of cross product of ab and ac\nint side(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\tld cr = (c/b).Y;\n\treturn Grt(cr, 0) ? 1 : (Lss(cr, 0) ? -1 : 0);\n}\n\n//if two line segments intersect\nbool intersect(PT a, PT b, PT c, PT d){\n\tint as = side(c, d, a), bs = side(c, d, b), cs = side(a, b, c), ds = side(a, b, d);\n\tif (as && as == bs || cs && cs == ds) return false;\n\telse if (as || bs || cs || ds) return true;\n\tfor (int j = 0; j < 2; j++, swap(a, c), swap(b, d)){\n\t\tld mx = min(a.X, b.X), Mx = max(a.X, b.X), my = min(a.Y, b.Y), My = max(a.Y, b.Y);\n\t\tfor (int k = 0; k < 2; k++, swap(c, d))\n\t\t\tif (Geq(c.X, mx) && Leq(c.X, Mx) && Geq(c.Y, my) && Leq(c.Y, My))\n\t\t\t\treturn true;\n\t}\n\treturn false;\n}\n\n//intersection of two non-parallel lines\nPT intersection(PT a, PT b, PT c, PT d){\n\tld c1 = cross(b-a, c-a), c2 = cross(b-a, d-a);\n\treturn (c1*d - c2*c)/(c1-c2);\n}\n\n//distance of a point from a line segment\nld distLSP(PT a, PT b, PT c){\n\tint rpos = relpos(a, b, proj(a, b, c));\n\tif (rpos == BACK) return len(c-a);\n\tif (rpos == FRONT) return len(c-b);\n\tb -= a, c -= a;\n\treturn abs(cross(b, c)/len(b));\n}\n\n//distance between two line segments\nld distLS(PT a, PT b, PT c, PT d){\n\tif (intersect(a, b, c, d)) return 0;\n\treturn min(min(distLSP(a, b, c), distLSP(a, b, d)), min(distLSP(c, d, a), distLSP(c, d, b)));\n}\n\nld signedArea(Poly &po){\n\tint n = po.size();\n\tld res = 0;\n\tfor (int i = 0; i < n; i++)\n\t\tres += cross(po[i], po[(i+1)%n]);\n\treturn res/2;\n}\n\nld area(Poly &poly){\n\treturn abs(signedArea(poly));\n}\n\n//angles less than or equal to 180\nbool isConvex(Poly &po){\n\tint n = po.size();\n\tbool neg = false, pos = false;\n\tfor (int i = 0; i < n; i++){\n\t\tint rpos = relpos(po[i], po[(i+1)%n], po[(i+2)%n]);\n\t\tif (rpos == LEFT) pos = true;\n\t\tif (rpos == RIGHT) neg = true;\n\t}\t\n\treturn (neg&pos) == false;\n}\n\nint crossingN(Poly &po, PT a){\n\tint n = po.size();\n\tPT b = a;\n\tfor (PT p : po)\n\t\tb.real(max(b.X, p.X));\n\tint cn = 0;\n\tfor (int i = 0; i < n; i++){\n\t\tPT p = po[i], q = po[(i+1)%n];\n\t\tif (intersect(a, b, p, q) && (side(a, b, p) == 1 || side(a, b, q) == 1))\n\t\t\tcn++;\n\t}\n\treturn cn;\n}\n\nint windingN(Poly &po, PT a){\n\tint n = po.size();\n\tPT b = a;\n\tfor (PT p : po)\n\t\tb.real(max(b.X, p.X));\n\tint wn = 0;\n\tfor (int i = 0; i < n; i++){\n\t\tPT p = po[i], q = po[(i+1)%n];\n\t\tif (intersect(a, b, p, q)){\n\t\t\tint ps = side(a, b, p), qs = side(a, b, q);\n\t\t\tif (qs >= 0) wn++;\n\t\t\tif (ps >= 0) wn--;\n\t\t}\n\t}\n\treturn wn;\n}\n\n//returns IN, ON or OUT\nint pointInPoly(Poly &po, PT a){\n\tint n = po.size();\n\tfor (int i = 0; i < n; i++)\n\t\tif (relpos(po[i], po[(i+1)%n], a) == ON)\n\t\t\treturn ON;\t\n\treturn (crossingN(po, a)%2 ? IN : OUT);\n\t//return (windingN(po, a) ? IN : OUT);\n}\n\nPoly getHull(Poly &po, bool lower){\n\tsort(po.begin(), po.end(), cmpXY());\n\tPoly res;\n\tint n = res.size();\n\tfor (auto p : po){\n\t\twhile (n >= 2 && side(res[n-2], res[n-1], p) == (lower ? RIGHT : LEFT))\n\t\t\tres.pop_back(), n--;\n\t\tres.pb(p), n++;\n\t}\n\treturn res;\n}\n\nPoly convexHull(Poly &po){\n\tint n = po.size();\n\tPoly lower = getHull(po, true),\n\t\t upper = getHull(po, false);\n\tPoly res = lower;\n\tfor (int i = (int)upper.size()-2; i; i--)\n\t\tres.pb(upper[i]);\n\treturn res;\n}\n\n//Given some points (at least two)\npair <PT, PT> nearestPair(Poly &po){\n\tint n = po.size();\n\tsort(po.begin(), po.end(), cmpXY());\n\tmultiset <PT, cmpYX> s;\n\tld rad = len(po[1]-po[0]);\n\tpair <PT, PT> res = {po[0], po[1]};\n\tint l = 0, r = 0;\n\tfor (int i = 0; i < n; i++){\n\t\twhile (l < r && Geq(po[i].X - po[l].X, rad))\n\t\t\ts.erase(po[l++]);\n\t\twhile (r < i && Leq(po[r].X, po[i].X))\n\t\t\ts.insert(po[r++]);\n\t\tfor (auto it = s.lower_bound(PT(po[i].X, po[i].Y-rad)); it != s.end(); it++){\n\t\t\tif (Grt(it->Y, po[i].Y+rad))\n\t\t\t\tbreak;\n\t\t\tld cur = len(po[i] - (*it));\n\t\t\tif (Lss(cur, rad)){\n\t\t\t\trad = cur;\n\t\t\t\tres = {*it, po[i]};\n\t\t\t}\n\t\t}\n\t}\n\treturn res;\n}\n\n//Given Convex Polygon having at least one point\npair <PT, PT> farthestPair(Poly &po){\n\tint n = po.size();\n\tpair <PT, PT> res = {po[0], po[0]};\n\tint j = 0;\n\tfor (int i = 0; i < n; i++){\n\t\twhile (Grt(len(po[(j+1)%n] - po[i]), len(po[j] - po[i])))\n\t\t\tj = (j+1)%n;\n\t\tif (Grt(len(po[j]-po[i]), len(res.S-res.F)))\n\t\t\tres = {po[i], po[j]};\n\t}\n\treturn res;\n}\n\nld diameter(Poly &po){\n\tauto p = farthestPair(po);\n\treturn len(p.S-p.F);\n}\n\nld radius(Poly &po){\n\tauto p = nearestPair(po);\n\treturn len(p.S-p.F);\n}\n\n//Cuts polygon with line ab and returns the left cut polygon\nPoly convexCut(Poly &po, PT a, PT b){\n\tint n = po.size();\n\tPoly res;\n\tfor (int i = 0; i < n; i++){\n\t\tif (side(a, b, po[i]) >= 0) \n\t\t\tres.pb(po[i]);\n\t\tif (abs(side(a, b, po[i]) - side(a, b, po[(i+1)%n])) == 2)\n\t\t\tres.pb(intersection(a, b, po[i], po[(i+1)%n]));\n\t}\n\treturn res;\n}\n\n//Sweep Line Example\nvoid SweepLine(){\n\tvector <PT> adds, rems;\n\tvector <LS> query;\n\tfor (int i = in(); i; i--){\n\t\tPT p, q;\n\t\tcin >> p >> q;\n\t\tif (Equ(p.Y, q.Y)){\n\t\t\tif (Lss(q.X, p.X))\n\t\t\t\tswap(p, q);\n\t\t\tadds.pb(p);\n\t\t\trems.pb(q);\n\t\t}\n\t\telse{\n\t\t\tif (Lss(q.Y, p.Y))\n\t\t\t\tswap(p, q);\n\t\t\tquery.pb({p, q});\n\t\t}\n\t}\n\tsort(adds.begin(), adds.end(), [](PT a, PT b){ return byX(a, b); });\n\tsort(rems.begin(), rems.end(), [](PT a, PT b){ return byX(a, b); });\n\tsort(query.begin(), query.end(), [](LS a, LS b){ return byX(a.F, b.F); });\n\tmultiset <ld> ys;\n\tint iadd = 0, irem = 0;\n\tint ans = 0;\n\tfor (auto p : query){\n\t\twhile (iadd < adds.size() && Leq(adds[iadd].X, p.F.X))\n\t\t\tys.insert(adds[iadd++].Y);\n\t\twhile (irem < rems.size() && Lss(rems[irem].X, p.F.X) && ys.find(rems[irem].Y) != ys.end())\n\t\t\tys.erase(ys.find(rems[irem++].Y));\n\t\tint cur = distance(ys.lower_bound(p.F.Y), ys.upper_bound(p.S.Y));\n\t\tans += cur;\n\t}\n\tcout << ans << endl;\n}\n\ntypedef struct Circle{\n\tPT C;\n\tld R;\n} CL;\n\nint tangentCnt(CL c1, CL c2){\n\tld d = len(c1.C-c2.C);\n\tif (Grt(d, c1.R+c2.R)) return 4;\n\tif (Equ(d, c1.R+c2.R)) return 3;\n\tif (Lss(d, c1.R+c2.R) && Grt(d, abs(c1.R-c2.R))) return 2;\n\tif (Equ(d, abs(c1.R-c2.R))) return 1;\n\treturn 0;\n}\n\nint main(){\t\n\tCL c1, c2;\n\tcin >> c1.C >> c1.R >> c2.C >> c2.R;\n\tcout << tangentCnt(c1, c2) << endl;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> P;\ndouble eps=1e-10;\n \nstruct C{\n  P p;\n  double r;\n  C(P p,double r=1):p(p),r(r){}\n};\n \nint getState(C a,C b){\n  double dist=abs(a.p-b.p);\n  if(dist>a.r+b.r+eps)return 4;\n  if(dist>a.r+b.r-eps)return 3;\n  if(dist>abs(a.r-b.r)+eps)return 2;\n  if(dist>abs(a.r-b.r)-eps)return 1;\n  return 0;\n}\n \nint main(){\n  double ax,ay,ar,bx,by,br;\n  cin>>ax>>ay>>ar>>bx>>by>>br;\n  cout<<getState(C(P(ax,ay),ar),C(P(bx,by),br))<<endl;\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std ;\n\n#define pb(n) push_back(n)\n#define fi first\n#define se second\n#define all(r) begin(r),end(r)\n#define vmax(ary) *max_element(all(ary))\n#define vmin(ary) *min_element(all(ary))\n#define debug(x) cout<<#x<<\": \"<<x<<endl\n#define fcout(n) cout<<fixed<<setprecision((n))\n#define scout(n) cout<<setw(n)\n#define vary(type,name,size,init) vector< type> name(size,init)\n#define vvl(v,w,h,init) vector<vector<ll>> v(w,vector<ll>(h,init))\n#define mp(a,b) make_pair(a,b)\n\n#define rep(i,n) for(int i = 0; i < (int)(n);++i)\n#define REP(i,a,b) for(int i = (a);i < (int)(b);++i)\n#define repi(it,array) for(auto it = array.begin(),end = array.end(); it != end;++it)\n#define repa(n,array) for(auto &n :(array))\n\nusing ll = long long;\nusing pii = pair<int,int> ;\nusing pll = pair<ll,ll> ;\n\nconstexpr ll inf = ((1<<30)-1)*2+1 ;\nconst double EPS = 1e-8;\nconst double INF = 1e12;\ntypedef complex<double> P;//????´???°????????¢?????????????????¨?§£???\nnamespace std {\n  bool operator < (const P& a, const P& b) {//x????????????\n    return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n  }\n  bool sorty(const P& a, const P& b) {//y????????????\n    return imag(a) != imag(b) ? imag(a) < imag(b) : real(a) < real(b);\n  }\n  bool same(const P& a, const P& b) {\n    P p = a - b;\n    if(abs(real(p)) < EPS && abs(imag(p)) < EPS){\n      return true;\n    }\n    return false;\n  }\n}\ndouble cross(const P& a, const P& b) {//??????\n  return imag(conj(a)*b);\n}\ndouble dot(const P& a, const P& b) {//??????\n  return real(conj(a)*b);\n}\n\nstruct L : public vector<P> {//??´???\n  L(){};\n  L(const P &a, const P &b) {\n    push_back(a); push_back(b);\n  }\n};\n\ntypedef vector<P> G;\n\nstruct C {//???\n  P p; double r;\n  C(){};\n  C(const P &p, double r) : p(p), r(r) { }\n};\nint ccw(P a, P b, P c) {//3????????????????????§????????§??????????????????\n  b -= a; c -= a;\n  if (cross(b, c) > 0)   return +1;       // counter clockwise\n  if (cross(b, c) < 0)   return -1;       // clockwise\n  if (dot(b, c) < 0)     return +2;       // c--a--b on line\n  if (norm(b) < norm(c)) return -2;       // a--b--c on line\n  return 0; // a--c--b on line\n}\nint linejudge(const L &ab,const L &cd){ //2??´???????????¢???\n  P a = ab[1] - ab[0],b = cd[1] - cd[0];\n  if(abs(cross(a,b)) < EPS){ // Parallel\n    return 2;\n  }\n  else if(abs(dot(a,b)) < EPS){ //Orthogonal\n    return 1;\n  }\n  return 0;\n}\n// L:line,S:segment,P:point\nbool intersectLL(const L &l, const L &m) {\n  return abs(cross(l[1]-l[0], m[1]-m[0])) > EPS || // non-parallel\n    abs(cross(l[1]-l[0], m[0]-l[0])) < EPS;   // same line\n}\nbool intersectLS(const L &l, const L &s) {\n  return cross(l[1]-l[0], s[0]-l[0])*       // s[0] is left of l\n    cross(l[1]-l[0], s[1]-l[0]) < EPS; // s[1] is right of l\n}\nbool intersectLP(const L &l, const P &p) {\n  return abs(cross(l[1]-p, l[0]-p)) < EPS;\n}\nbool intersectSS(const L &s, const L &t) {\n  return ccw(s[0],s[1],t[0])*ccw(s[0],s[1],t[1]) <= 0 &&\n    ccw(t[0],t[1],s[0])*ccw(t[0],t[1],s[1]) <= 0;\n}\nbool intersectSP(const L &s, const P &p) {\n  return abs(s[0]-p)+abs(s[1]-p)-abs(s[1]-s[0]) < EPS; // triangle inequality\n}\n// L & P intersection\nP projection(const L &l, const P &p) {\n  double t = dot(p-l[0], l[0]-l[1]) / norm(l[0]-l[1]);\n  return l[0] + t*(l[0]-l[1]);\n}\n// L????????????P???????°????\nP reflection(const L &l, const P &p) {\n  return p + 2.0 * (projection(l, p) - p);\n}\ndouble distanceLP(const L &l, const P &p) {\n  return abs(p - projection(l, p));\n}\ndouble distanceLL(const L &l, const L &m) {\n  return intersectLL(l, m) ? 0 : distanceLP(l, m[0]);\n}\ndouble distanceLS(const L &l, const L &s) {\n  if (intersectLS(l, s)) return 0;\n  return min(distanceLP(l, s[0]), distanceLP(l, s[1]));\n}\ndouble distanceSP(const L &s, const P &p) {\n  const P r = projection(s, p);\n  if (intersectSP(s, r)) return abs(r - p);\n  return min(abs(s[0] - p), abs(s[1] - p));\n}\ndouble distanceSS(const L &s, const L &t) {\n  if (intersectSS(s, t)) return 0;\n  return min(min(distanceSP(s, t[0]), distanceSP(s, t[1])), min(distanceSP(t, s[0]), distanceSP(t, s[1])));\n}\ndouble distancePP(const P &p,const P &q){\n  return abs(p - q) ;\n}\nP crosspoint(const L &l, const L &m) {\n  double A = cross(l[1] - l[0], m[1] - m[0]);\n  double B = cross(l[1] - l[0], l[1] - m[0]);\n  if (abs(A) < EPS && abs(B) < EPS) return m[0]; // same line\n  if (abs(A) < EPS) assert(false); // !!!PRECONDITION NOT SATISFIED!!!\n  return m[0] + B / A * (m[1] - m[0]);\n}\nP verticalvector(const P &a,const P &b){//2???????????????????????????????????????\n  if(a.real() == b.real()){\n    return {1.0,0};\n  }\n  if(a.imag() == b.imag()){\n    return {0,1.0};\n  }\n  P p = a - b;\n  P res = {-p.imag(),p.real()};\n  return res / abs(p);\n}\npair<P,P> crosspointCircle(const C &a,const C &b){\n  P m = (a.p+b.p)/2.0;\n  P vv = verticalvector(a.p,b.p);\n  double u = sqrt( a.r * a.r - norm(a.p - b.p) / 4.0);\n  P A = m + u * vv,B = m - u * vv;\n  return mp(A,B);\n}\n\nint circle_judge(const C &a,const C &b){\n  double d = a.r + b.r;\n  double R = max(a.r,b.r),r = min(a.r,b.r);\n  d = d * d;\n  double p = norm(a.p-b.p);\n  if(p > d){\n    return 4; // don't cross\n  }\n  if(abs(p - d) < EPS){\n    return 3; // \n  }\n  if(abs(R - sqrt(p) - r) < EPS){\n    return 1;\n  }\n  if(p < r * r){\n    return 0;\n  }\n  if(p < d){\n    return 2; // cross 2point\n  }\n}\n\nint main(){\n  cin.tie(0);\n  ios::sync_with_stdio(false);\n  double x,y,r;\n  cin >> x >> y >> r;\n  C c1(P(x,y),r); \n  cin >> x >> y >> r;\n  C c2(P(x,y),r); \n  std::cout << circle_judge(c1,c2) << std::endl;\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "\n//be naame khodaa\n#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef long double ld;\ntypedef pair <int, int> pii;\ntypedef complex<ld> PT;\ntypedef vector<PT> Poly;\ntypedef pair<PT, PT> LS;\n#define F first\n#define S second\n#define X real()\n#define Y imag()\n#define pb push_back\n\ninline int in(){int x, y; y = scanf(\"%d\", &x); return x; }\n\nconst ld EPS = 1e-12;\n\nconst int ON = 0, LEFT = 1, RIGHT = -1, BACK = -2, FRONT = 2, IN = 3, OUT = -3;\n\ninline bool Geq(ld a, ld b){ return a - b > -EPS; }\ninline bool Grt(ld a, ld b){ return a - b > EPS; }\ninline bool Leq(ld a, ld b){ return a - b < EPS; }\ninline bool Lss(ld a, ld b){ return a - b < -EPS; }\ninline bool Equ(ld a, ld b){ return abs(a-b) < EPS; }\n\nistream& operator>> (istream& is, complex<ld>& p){\n\tld val; is >> val; p.real(val); is >> val; p.imag(val); return is;\n}\nbool byX(const PT &a, const PT &b){\n\tif (Equ(a.X, b.X)) return Lss(a.Y, b.Y);\n\treturn Lss(a.X, b.X);\n}\nbool byY(const PT &a, const PT &b){\n\tif (Equ(a.Y, b.Y)) return Lss(a.X, b.X);\n\treturn Lss(a.Y, b.Y);\n}\nstruct cmpXY{ bool operator ()(const PT &a, const PT &b){ return byX(a, b); } };\nstruct cmpYX{ bool operator ()(const PT &a, const PT &b){ return byY(a, b); } };\n\nld dot(PT a, PT b){ return real(conj(a)*b); }\nld cross(PT a, PT b){ return imag(conj(a)*b); }\nld sqlen(PT a){ return dot(a, a); }\nld len(PT a){ return sqrt(sqlen(a)); }\n\n//projection of c on ab\nPT proj(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\treturn a + b*real(c/b);\n}\n\n//reflection of c toward ab\nPT reflect(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\treturn a + conj(c/b)*b;\n}\n\n//rotate b with center=a theta radian\nPT rotate(PT a, PT b, ld theta){\n\treturn (b-a)*polar<ld>(1, theta) + a;\n}\n\n//relative position of c toward ab\nint relpos(PT a, PT b, PT c){\n\tb -= a; c -= a; c /= b;\n\tif (Grt(c.imag(), 0)) return LEFT;\n\tif (Lss(c.imag(), 0)) return RIGHT;\n\tif (Lss(c.real(), 0)) return BACK;\n\tif (Grt(c.real(), 1)) return FRONT;\n\treturn ON;\n}\n\n//sign of cross product of ab and ac\nint side(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\tld cr = (c/b).Y;\n\treturn Grt(cr, 0) ? 1 : (Lss(cr, 0) ? -1 : 0);\n}\n\n//if two line segments intersect\nbool intersect(PT a, PT b, PT c, PT d){\n\tint as = side(c, d, a), bs = side(c, d, b), cs = side(a, b, c), ds = side(a, b, d);\n\tif (as && as == bs || cs && cs == ds) return false;\n\telse if (as || bs || cs || ds) return true;\n\tfor (int j = 0; j < 2; j++, swap(a, c), swap(b, d)){\n\t\tld mx = min(a.X, b.X), Mx = max(a.X, b.X), my = min(a.Y, b.Y), My = max(a.Y, b.Y);\n\t\tfor (int k = 0; k < 2; k++, swap(c, d))\n\t\t\tif (Geq(c.X, mx) && Leq(c.X, Mx) && Geq(c.Y, my) && Leq(c.Y, My))\n\t\t\t\treturn true;\n\t}\n\treturn false;\n}\n\n//intersection of two non-parallel lines\nPT intersection(PT a, PT b, PT c, PT d){\n\tld c1 = cross(b-a, c-a), c2 = cross(b-a, d-a);\n\treturn (c1*d - c2*c)/(c1-c2);\n}\n\n//distance of a point from a line segment\nld distLSP(PT a, PT b, PT c){\n\tint rpos = relpos(a, b, proj(a, b, c));\n\tif (rpos == BACK) return len(c-a);\n\tif (rpos == FRONT) return len(c-b);\n\tb -= a, c -= a;\n\treturn abs(cross(b, c)/len(b));\n}\n\n//distance between two line segments\nld distLS(PT a, PT b, PT c, PT d){\n\tif (intersect(a, b, c, d)) return 0;\n\treturn min(min(distLSP(a, b, c), distLSP(a, b, d)), min(distLSP(c, d, a), distLSP(c, d, b)));\n}\n\nld signedArea(Poly &po){\n\tint n = po.size();\n\tld res = 0;\n\tfor (int i = 0; i < n; i++)\n\t\tres += cross(po[i], po[(i+1)%n]);\n\treturn res/2;\n}\n\nld area(Poly &poly){\n\treturn abs(signedArea(poly));\n}\n\n//angles less than or equal to 180\nbool isConvex(Poly &po){\n\tint n = po.size();\n\tbool neg = false, pos = false;\n\tfor (int i = 0; i < n; i++){\n\t\tint rpos = relpos(po[i], po[(i+1)%n], po[(i+2)%n]);\n\t\tif (rpos == LEFT) pos = true;\n\t\tif (rpos == RIGHT) neg = true;\n\t}\t\n\treturn (neg&pos) == false;\n}\n\nint crossingN(Poly &po, PT a){\n\tint n = po.size();\n\tPT b = a;\n\tfor (PT p : po)\n\t\tb.real(max(b.X, p.X));\n\tint cn = 0;\n\tfor (int i = 0; i < n; i++){\n\t\tPT p = po[i], q = po[(i+1)%n];\n\t\tif (intersect(a, b, p, q) && (side(a, b, p) == 1 || side(a, b, q) == 1))\n\t\t\tcn++;\n\t}\n\treturn cn;\n}\n\nint windingN(Poly &po, PT a){\n\tint n = po.size();\n\tPT b = a;\n\tfor (PT p : po)\n\t\tb.real(max(b.X, p.X));\n\tint wn = 0;\n\tfor (int i = 0; i < n; i++){\n\t\tPT p = po[i], q = po[(i+1)%n];\n\t\tif (intersect(a, b, p, q)){\n\t\t\tint ps = side(a, b, p), qs = side(a, b, q);\n\t\t\tif (qs >= 0) wn++;\n\t\t\tif (ps >= 0) wn--;\n\t\t}\n\t}\n\treturn wn;\n}\n\n//returns IN, ON or OUT\nint pointInPoly(Poly &po, PT a){\n\tint n = po.size();\n\tfor (int i = 0; i < n; i++)\n\t\tif (relpos(po[i], po[(i+1)%n], a) == ON)\n\t\t\treturn ON;\t\n\treturn (crossingN(po, a)%2 ? IN : OUT);\n\t//return (windingN(po, a) ? IN : OUT);\n}\n\nPoly getHull(Poly &po, bool lower){\n\tsort(po.begin(), po.end(), cmpXY());\n\tPoly res;\n\tint n = res.size();\n\tfor (auto p : po){\n\t\twhile (n >= 2 && side(res[n-2], res[n-1], p) == (lower ? RIGHT : LEFT))\n\t\t\tres.pop_back(), n--;\n\t\tres.pb(p), n++;\n\t}\n\treturn res;\n}\n\nPoly convexHull(Poly &po){\n\tint n = po.size();\n\tPoly lower = getHull(po, true),\n\t\t upper = getHull(po, false);\n\tPoly res = lower;\n\tfor (int i = (int)upper.size()-2; i; i--)\n\t\tres.pb(upper[i]);\n\treturn res;\n}\n\n//Given some points (at least two)\npair <PT, PT> nearestPair(Poly &po){\n\tint n = po.size();\n\tsort(po.begin(), po.end(), cmpXY());\n\tmultiset <PT, cmpYX> s;\n\tld rad = len(po[1]-po[0]);\n\tpair <PT, PT> res = {po[0], po[1]};\n\tint l = 0, r = 0;\n\tfor (int i = 0; i < n; i++){\n\t\twhile (l < r && Geq(po[i].X - po[l].X, rad))\n\t\t\ts.erase(po[l++]);\n\t\twhile (r < i && Leq(po[r].X, po[i].X))\n\t\t\ts.insert(po[r++]);\n\t\tfor (auto it = s.lower_bound(PT(po[i].X, po[i].Y-rad)); it != s.end(); it++){\n\t\t\tif (Grt(it->Y, po[i].Y+rad))\n\t\t\t\tbreak;\n\t\t\tld cur = len(po[i] - (*it));\n\t\t\tif (Lss(cur, rad)){\n\t\t\t\trad = cur;\n\t\t\t\tres = {*it, po[i]};\n\t\t\t}\n\t\t}\n\t}\n\treturn res;\n}\n\n//Given Convex Polygon having at least one point\npair <PT, PT> farthestPair(Poly &po){\n\tint n = po.size();\n\tpair <PT, PT> res = {po[0], po[0]};\n\tint j = 0;\n\tfor (int i = 0; i < n; i++){\n\t\twhile (Grt(len(po[(j+1)%n] - po[i]), len(po[j] - po[i])))\n\t\t\tj = (j+1)%n;\n\t\tif (Grt(len(po[j]-po[i]), len(res.S-res.F)))\n\t\t\tres = {po[i], po[j]};\n\t}\n\treturn res;\n}\n\nld diameter(Poly &po){\n\tauto p = farthestPair(po);\n\treturn len(p.S-p.F);\n}\n\nld radius(Poly &po){\n\tauto p = nearestPair(po);\n\treturn len(p.S-p.F);\n}\n\n//Cuts polygon with line ab and returns the left cut polygon\nPoly convexCut(Poly &po, PT a, PT b){\n\tint n = po.size();\n\tPoly res;\n\tfor (int i = 0; i < n; i++){\n\t\tif (side(a, b, po[i]) >= 0) \n\t\t\tres.pb(po[i]);\n\t\tif (abs(side(a, b, po[i]) - side(a, b, po[(i+1)%n])) == 2)\n\t\t\tres.pb(intersection(a, b, po[i], po[(i+1)%n]));\n\t}\n\treturn res;\n}\n\n//Sweep Line Example\nvoid SweepLine(){\n\tvector <PT> adds, rems;\n\tvector <LS> query;\n\tfor (int i = in(); i; i--){\n\t\tPT p, q;\n\t\tcin >> p >> q;\n\t\tif (Equ(p.Y, q.Y)){\n\t\t\tif (Lss(q.X, p.X))\n\t\t\t\tswap(p, q);\n\t\t\tadds.pb(p);\n\t\t\trems.pb(q);\n\t\t}\n\t\telse{\n\t\t\tif (Lss(q.Y, p.Y))\n\t\t\t\tswap(p, q);\n\t\t\tquery.pb({p, q});\n\t\t}\n\t}\n\tsort(adds.begin(), adds.end(), [](PT a, PT b){ return byX(a, b); });\n\tsort(rems.begin(), rems.end(), [](PT a, PT b){ return byX(a, b); });\n\tsort(query.begin(), query.end(), [](LS a, LS b){ return byX(a.F, b.F); });\n\tmultiset <ld> ys;\n\tint iadd = 0, irem = 0;\n\tint ans = 0;\n\tfor (auto p : query){\n\t\twhile (iadd < adds.size() && Leq(adds[iadd].X, p.F.X))\n\t\t\tys.insert(adds[iadd++].Y);\n\t\twhile (irem < rems.size() && Lss(rems[irem].X, p.F.X) && ys.find(rems[irem].Y) != ys.end())\n\t\t\tys.erase(ys.find(rems[irem++].Y));\n\t\tint cur = distance(ys.lower_bound(p.F.Y), ys.upper_bound(p.S.Y));\n\t\tans += cur;\n\t}\n\tcout << ans << endl;\n}\n\ntypedef struct Circle{\n\tPT C;\n\tld R;\n} CL;\n\nint tangentCnt(CL c1, CL c2){\n\tld d = len(c1.C-c2.C);\n\tif (Grt(d, c1.R+c2.R)) return 4;\n\tif (Equ(d, c1.R+c2.R)) return 3;\n\tif (Lss(d, c1.R+c2.R) && Grt(d, abs(c1.R-c2.R))) return 2;\n\tif (Equ(d, abs(c1.R-c2.R))) return 1;\n\treturn 0;\n}\n\nint main(){\t\n\tCL c1, c2;\n\tcin >> c1.C >> c1.R >> c2.C >> c2.R;\n\tcout << tangentCnt(c1, c2) << endl;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i,n) for(int i = 0; i < (int)n; i++)\n\nconst double eps = 1e-10;\n\nstruct Point {\n  double x, y;\n  Point(double x = 0.0, double y = 0.0) : x(x), y(y) {}  \n  double norm() {return sqrt(x*x + y*y);}\n};\n\nPoint operator + (const Point &p, const Point &q) {return Point(p.x + q.x, p.y + q.y);}\nPoint operator - (const Point &p, const Point &q) {return Point(p.x - q.x, p.y - q.y);}\ndouble operator * (const Point &p, const Point q) {return p.x * q.x + p.y * q.y;}\nbool operator == (const Point &p, const Point &q) {return (abs(p.x - q.x) < eps && abs(p.y - q.y) < eps);}\nbool operator != (const Point &p, const Point &q) {return !(p == q);}\ndouble cross(const Point &p, const Point &q) {return p.x*q.y - p.y*q.x;}\ndouble dist(const Point &p, const Point &q) {return (p-q).norm();}\n\nstruct Segment {\n  Point p , q;\n  Segment(Point p = Point(0.0,0.0), Point q = Point(0.0,0.0)) : p(p), q(q) {}\n};\n\nstruct Line {\n  double a, b, c;\n  Line(double a, double b, double c) : a(a), b(b), c(c) {}\n  Line(Point p, Point q) {\n    a = q.y - p.y;\n    b = p.x - q.x;\n    c = q.x * p.y - p.x * q.y;\n  }\n};\n\nstruct Circle {\n  double r;\n  Point p;\n  Circle(Point p = Point(0.0, 0.0), double r = 0.0) : p(p), r(r) {}\n};\n\n// ★点の直線への射影\nPoint projection (Point p, Line l) {\n  double x = p.x - l.a * (l.a*p.x + l.b*p.y + l.c) / (l.a*l.a + l.b*l.b);\n  double y = p.y - l.b * (l.a*p.x + l.b*p.y + l.c) / (l.a*l.a + l.b*l.b);\n  return Point(x,y);\n}\n\n// ★直線について線対称な点\nPoint reflection(Point p, Line l) {\n  double x = p.x - 2.0 * l.a * (l.a*p.x + l.b*p.y + l.c) / (l.a*l.a + l.b*l.b);\n  double y = p.y - 2.0 * l.b * (l.a*p.x + l.b*p.y + l.c) / (l.a*l.a + l.b*l.b);\n  return Point(x,y);\n}\n\n// ★点の線分からの回転方向\nint ccw(Point p, Point p1, Point p2) {\n  p1 = p1 - p; p2 = p2 - p;\n  if(cross(p1,p2) > eps) return 1; \n  if(cross(p1,p2) < -eps) return -1; \n  if(p1 * p2 < 0) return 2; \n  if(p1.norm() < p2.norm()) return -2; \n  return 0; \n}\n\n// ★点が線分上にあるか判定\nbool on_segment(Point p, Segment s) {\n  return (ccw(s.p,s.q,p) == 0 ? true : false);\n}\n\n// ★線分の交差判定\nbool segment_segment_cross(const Segment l, const Segment s) {\n  return ccw(l.p,l.q,s.p) * ccw(l.p,l.q,s.q) <= 0 && ccw(s.p,s.q,l.p) * ccw(s.p,s.q,l.q) <= 0;\n}\n\n// ★直線の平行・直交判定 (平行:2 直交:1 その他:0)\nint line_parallel_orthogonal(Line l, Line s) {\n  if(abs(l.a*s.a + l.b*s.b) < eps) return 1;\n  else if(abs(l.a*s.b - l.b*s.a) < eps) return 2;\n  else return 0;\n}\n\n// ★直線と直線の交点 \nvector<Point> line_line_cross(Line l, Line s) {\n  vector<Point> vp;\n  if(line_parallel_orthogonal(l,s) != 2) {\n    Point p;\n    p.x = (l.b*s.c - s.b*l.c) / (l.a*s.b - s.a*l.b);\n    p.y = (-l.a*s.c + s.a*l.c) / (l.a*s.b - s.a*l.b);\n    vp.push_back(p);\n  }\n  return vp;\n}\n\n// ★点と直線の距離\ndouble point_line_dist(Point p, Line l) {\n  return abs(l.a*p.x + l.b*p.y + l.c) / sqrt(l.a*l.a + l.b*l.b);\n}\n\n// ★点と線分の距離\ndouble point_segment_dist(Point p, Segment s) {\n  Point h = projection(p,Line(s.p,s.q));\n  if(on_segment(h,s)) return dist(p,h);\n  else return min(dist(p,s.p),dist(p,s.q));\n}\n\n// ★線分と線分の距離\ndouble segment_segment_dist(Segment l, Segment s) {\n  if(segment_segment_cross(l,s)) return 0.0;\n  else return min({point_segment_dist(l.p,s),point_segment_dist(l.q,s),point_segment_dist(s.p,l),point_segment_dist(s.q,l)});\n}\n\n// 直線と直線の距離\ndouble line_line_dist(Line l, Line s) {\n  if(line_parallel_orthogonal(l,s) != 2) return 0.0;\n  else if(abs(s.a) < eps) return point_line_dist(Point(0.0,-s.c/s.b),l);\n  else return point_line_dist(Point(-s.c/s.a,0),l);\n}\n\n// 直線と線分の距離\ndouble line_segment_dist(Line l, Segment s) {\n  Point a, b;\n  if(abs(l.a) < eps) a = Point(0.0,-l.c/l.b), b = Point(1.0,-l.c/l.b);\n  else if(abs(l.b) < eps) a = Point(-l.c/l.a,0.0), b = Point(-l.c/l.a,0.0);\n  else a = Point(0.0,-l.c/l.b), b = Point(-l.c/l.a,0);\n\n  if(ccw(a,b,s.p) * ccw(a,b,s.q) <= 0) return 0.0;\n  else return min(point_line_dist(s.p,l),point_line_dist(s.q,l));\n}\n\n// 円と円の交差判定 (離れる:4 外接:3 交わる:2 内接:1 内包:0)\nint circle_circle_pos(Circle c, Circle d) {\n  if(dist(c.p,d.p) >= c.r + d.r + eps) return 4;\n  else if(abs(dist(c.p,d.p) - c.r - d.r) < eps) return 3;\n  else if(dist(c.p,d.p) >= abs(c.r-d.r) + eps) return 2;\n  else if(abs(dist(c.p,d.p) - abs(c.r-d.r)) < eps) return 1;\n  else return 0; \n}\n\n// ★円と直線の交点\nvector<Point> circle_line_cross(Circle c, Line l) {\n  vector<Point> vp;\n  Point h = projection(c.p,l);\n\n  double d = l.a*c.p.x + l.b*c.p.y + l.c;\n  double q = c.r*c.r - d*d / (l.a*l.a + l.b*l.b);\n  if(q >= eps) {\n    Point p1, p2;\n    p1.x = h.x + sqrt(q) * l.b / sqrt(l.a*l.a + l.b*l.b);\n    p1.y = h.y - sqrt(q) * l.a / sqrt(l.a*l.a + l.b*l.b);\n    p2.x = h.x - sqrt(q) * l.b / sqrt(l.a*l.a + l.b*l.b);\n    p2.y = h.y + sqrt(q) * l.a / sqrt(l.a*l.a + l.b*l.b);\n    vp.push_back(p1);\n    vp.push_back(p2);\n  } else if(abs(q) < eps) {\n    vp.push_back(h);\n  }\n  return vp;\n} \n\n// 円と円の交点\nvector<Point> circle_circle_cross(Circle c, Circle d) {\n  Line l(2.0*(c.p.x-d.p.x),2.0*(c.p.y-d.p.y),-c.p.x*c.p.x+d.p.x*d.p.x-c.p.y*c.p.y+d.p.y*d.p.y+c.r*c.r-d.r*d.r);\n  return circle_line_cross(c,l);\n}\n\nint main() {\n  Circle c, d;\n  cin >> c.p.x >> c.p.y >> c.r;\n  cin >> d.p.x >> d.p.y >> d.r;\n  cout << circle_circle_pos(c,d) << endl;\n}\n"
  },
  {
    "language": "C++",
    "code": "#ifndef _WIN32\n#include<iostream>\n#endif\n#include<complex>\n#include<utility>\n#include<tuple>\n#include<vector>\nusing namespace std;\n#define IL inline\n#define REP(i,n) for(int(i)=0;(i)<(n);i++)\n#define X real()\n#define Y imag()\ntypedef double D;\ntypedef bool B;\ntypedef complex<D> P;\ntypedef pair<P, P>L;\ntypedef pair<P, P>LS;\ntypedef pair<P, D>C;\n#define DCc(a,b,c) P (a);D (b);tie(a,b)=c;\nconst D EPS = 1e-8;\n\nIL B is_C_C(C p, C q){\n\tDCc(cp, rp, p);\n\tDCc(cq, rq, q);\n\tD d = abs(cp - cq);\n\treturn abs(rp - rq) - d< EPS&&rp + rq - d>-EPS;\n}\n\nIL LS cross_C_C(C p, C q){\n\tDCc(cp, rp, p);\n\tDCc(cq, rq, q);\n\tD d = abs(cp - cq);\n\tD rc = (d*d + rp*rp - rq*rq);\n\tD rs = sqrt(rp*rp - rc*rc);\n\tP diff = (cq - cp) / d;\n\treturn{ cp + P(rc, rs)*diff, cp + P(rc, -rs)*diff };\n}\n\nIL vector<L> tangent_line(C c, P p){\n\tvector<L> res;\n\tDCc(cp, r, c);\n\tP v = p - cp;\n\tD dist = abs(v);\n\tif (dist>r + EPS){\n\t\tdouble _cos = r / dist;\n\t\tdouble _sin = sqrt(1.0 - _cos*_cos);\n\t\tv = v*(r / dist);\n\t\t{\n\t\t\tP e = P(_cos*v.X - _sin*v.Y, _sin*v.X + _cos*v.Y);\n\t\t\tres.push_back({ p, cp + e });\n\t\t}\n\t\t{\n\t\t\tP e = P(_cos*v.X + _sin*v.Y, -_sin*v.X + _cos*v.Y);\n\t\t\tres.push_back({ p, cp + e });\n\t\t}\n\t}\n\telse if(abs(dist-r)<EPS){\n\t\tdouble _cos = r / dist;\n\t\tdouble _sin = sqrt(1.0 - _cos*_cos);\n\t\tP e = P(_cos*v.X - _sin*v.Y, _sin*v.X + _cos*v.Y);\n\t\tres.push_back({ p, cp + e });\n\t}\n\treturn res;\n}\n\nIL vector<L>inner_common_tangent_line(C p, C q){\n\tvector<L> res;\n\tDCc(Mp, Rp, p);\n\tDCc(Mq, Rq, q);\n\tD dist = abs(Mp - Mq);\n\tif (dist > Rp + Rq - EPS){\n\t\tP mid = (Mq*Rp + Mp*Rq) / (Rp + Rq);\n\t\tres = tangent_line(p, mid);\n\t}\n\treturn res;\n}\n\nIL vector<L>outer_common_tangent_line(C p, C q){\n\tvector<L> res;\n\tDCc(Mp, Rp, p);\n\tDCc(Mq, Rq, q);\n\tP v = Mp - Mq;\n\tD dist = abs(v);\n\tif (dist > Rp - Rq - EPS){\n\t\tif (abs(Rp - Rq) < EPS){\n\t\t\tP e = v*P(0, 1);\n\t\t\te = e / dist;\n\t\t\tres.push_back(L(Mp + e, Mq + e));\n\t\t\tres.push_back(L(Mp - e, Mq - e));\n\t\t}\n\t\telse{\n\t\t\tP mid = Mp + (Mq - Mp)*Rp / (Rp - Rq);\n\t\t\tres = tangent_line(p, mid);\n\t\t}\n\t}\n\treturn res;\n}\n\n\nint main(){\n\tint a1, b1, r1;\n\tint a2, b2, r2;\n\tcin >> a1 >> b1 >> r1;\n\tcin >> a2 >> b2 >> r2;\n\tauto v = inner_common_tangent_line(C(P(a1, b1), r1), C(P(a2, b2), r2));\n\tauto v2= outer_common_tangent_line(C(P(a1, b1), r1), C(P(a2, b2), r2));\n\t/*REP(i, v.size()){\n\t\tcout << v[i].first << \" \" << v[i].second << endl;\n\t}\n\tREP(i, v2.size()){\n\t\tcout << v2[i].first << \" \" << v2[i].second << endl;\n\t}*/\n\tcout << v.size() + v2.size() << endl;\n\t//cout << now << endl;\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "// {{{ header\n#include <bits/stdc++.h>\nusing namespace std;\n\nusing i8   = int8_t;\nusing u8   = uint8_t;\nusing i16  = int16_t;\nusing u16  = uint16_t;\nusing i32  = int32_t;\nusing u32  = uint32_t;\nusing i64  = int64_t;\nusing u64  = uint64_t;\nusing i128 = __int128_t;\nusing u128 = __uint128_t;\n\nusing f32  = float;\nusing f64  = double;\nusing f80  = __float80;\nusing f128 = __float128;\n// }}}\n\nconstexpr i64 INF = 1'010'000'000'000'000'000LL;\n\nconstexpr i64 MOD = 1'000'000'007LL;\n\nconstexpr f64 EPS = 1e-12;\n\nconstexpr f64 PI = 3.14159265358979323846;\n\n// {{{ util\n#define FOR(i, start, end) for(i64 i = (start), i##_end=(end); i < i##_end; ++i)\n#define REP(i, n) FOR(i, 0, n)\n\n#define ALL(f,c,...) (([&](decltype((c)) cccc) { return (f)(begin(cccc), end(cccc), ## __VA_ARGS__); })(c))\n#define SLICE(f,c,l,r,...) (([&](decltype((c)) cccc, decltype((l)) llll, decltype((r)) rrrr) {\\\n    auto iiii = llll <= rrrr ? begin(cccc)+llll : end(cccc);\\\n    auto jjjj = llll <= rrrr ? begin(cccc)+rrrr : end(cccc);\\\n    return (f)(iiii, jjjj, ## __VA_ARGS__);\\\n})(c,l,r))\n\n#define GENERIC(f) ([](auto&&... args) -> decltype(auto) { return (f)(forward<decltype(args)>(args)...); })\n\ntemplate<typename C>\ni64 SIZE(const C& c) { return static_cast<i64>(c.size()); }\n\ntemplate<typename T, size_t N>\ni64 SIZE(const T (&)[N]) { return static_cast<i64>(N); }\n\nbool is_odd (i64 x) { return x % 2 != 0; }\nbool is_even(i64 x) { return x % 2 == 0; }\n\ntemplate<typename T> i64 cmp(T x, T y) { return (y<x) - (x<y); }\ntemplate<typename T> i64 sgn(T x) { return cmp(x, T(0)); }\n\n// Haskell の divMod と同じ\npair<i64,i64> divmod(i64 a, i64 b) {\n    i64 q = a / b;\n    i64 r = a % b;\n    if((b>0 && r<0) || (b<0 && r>0)) {\n        --q;\n        r += b;\n    }\n    return {q,r};\n}\n\ni64 div_ceil(i64 a, i64 b) {\n    i64 q = a / b;\n    i64 r = a % b;\n    if((b>0 && r>0) || (b<0 && r<0))\n        ++q;\n    return q;\n}\n\ni64 div_floor(i64 a, i64 b) {\n    return divmod(a,b).first;\n}\n\ni64 modulo(i64 a, i64 b) {\n    return divmod(a,b).second;\n}\n\nbool feq(f64 x, f64 y, f64 eps=EPS) {\n    return fabs(x-y) < eps;\n}\n\ntemplate<typename T, typename U>\nbool chmax(T& xmax, const U& x) {\n    if(xmax < x) {\n        xmax = x;\n        return true;\n    }\n    return false;\n}\n\ntemplate<typename T, typename U>\nbool chmin(T& xmin, const U& x) {\n    if(x < xmin) {\n        xmin = x;\n        return true;\n    }\n    return false;\n}\n\ntemplate<typename InputIt>\nauto SUM(InputIt first, InputIt last) {\n    using T = typename iterator_traits<InputIt>::value_type;\n    return accumulate(first, last, T());\n}\n\ntemplate<typename ForwardIt, typename UnaryOperation>\nForwardIt transform_self(ForwardIt first, ForwardIt last, UnaryOperation op) {\n    return transform(first, last, first, op);\n}\n\ntemplate<typename C>\nvoid UNIQ(C& c) {\n    c.erase(ALL(unique,c), end(c));\n}\n\ntemplate<typename BinaryFunc, typename UnaryFunc>\nauto ON(BinaryFunc bf, UnaryFunc uf) {\n    return [bf,uf](const auto& x, const auto& y) {\n        return bf(uf(x), uf(y));\n    };\n}\n\ntemplate<typename F>\nauto LT_ON(F f) { return ON(less<>(), f); }\n\ntemplate<typename F>\nauto GT_ON(F f) { return ON(greater<>(), f); }\n\ntemplate<typename T>\nvoid RD(T& x) {\n    cin >> x;\n#ifdef PROCON_LOCAL\n    assert(cin);\n#endif\n}\n\ntemplate<typename T>\nvoid RD(vector<T>& v, i64 n) {\n    v.reserve(n);\n    REP(_, n) {\n        T e; RD(e);\n        v.emplace_back(e);\n    }\n}\n\ntemplate<typename T>\nostream& operator<<(ostream& out, const vector<T>& v) {\n    for(auto first = begin(v), it = first; it != end(v); ++it) {\n        if(it != first)\n            out << ' ';\n        out << *it;\n    }\n    return out;\n}\n\ntemplate<typename T1, typename T2>\nostream& operator<<(ostream& out, const pair<T1,T2>& p) {\n    return out << '(' << p.first << ',' << p.second << ')';\n}\n\nvoid PRINT() {}\n\ntemplate<typename T, typename... TS>\nvoid PRINT(const T& x, const TS& ...args) {\n    cout << x;\n    if(sizeof...(args)) {\n        cout << ' ';\n        PRINT(args...);\n    }\n}\n\ntemplate<typename... TS>\nvoid PRINTLN(const TS& ...args) {\n    PRINT(args...);\n    cout << '\\n';\n}\n\ntemplate<typename T>\nvoid DBG_IMPL(i64 line, const char* expr, const T& value) {\n#ifdef PROCON_LOCAL\n    cerr << \"[L \" << line << \"]: \";\n    cerr << expr << \" = \" << value << \"\\n\";\n#endif\n}\n\n#define DBG(expr) DBG_IMPL(__LINE__, #expr, (expr))\n// }}}\n\n// {{{ init\nstruct ProconInit {\n    static constexpr int IOS_PREC = 15;\n    static constexpr bool AUTOFLUSH = false;\n\n    ProconInit() {\n        cin.tie(nullptr);\n        ios::sync_with_stdio(false);\n        cout << fixed << setprecision(IOS_PREC);\n#ifdef PROCON_LOCAL\n        cerr << fixed << setprecision(IOS_PREC);\n#endif\n        if(AUTOFLUSH)\n            cout << unitbuf;\n    }\n} PROCON_INIT;\n// }}}\n\nstruct Vector {\n    f64 x, y;\n\n    Vector() : Vector(0,0) {}\n    Vector(f64 xx, f64 yy) : x(xx), y(yy) {}\n\n    const Vector operator-() const {\n        return Vector(-x,-y);\n    }\n    Vector& operator+=(const Vector& rhs) {\n        x += rhs.x;\n        y += rhs.y;\n        return *this;\n    }\n    Vector& operator-=(const Vector& rhs) {\n        x -= rhs.x;\n        y -= rhs.y;\n        return *this;\n    }\n    Vector& operator*=(f64 rhs) {\n        x *= rhs;\n        y *= rhs;\n        return *this;\n    }\n    Vector& operator/=(f64 rhs) {\n        x /= rhs;\n        y /= rhs;\n        return *this;\n    }\n\n    f64 norm() const { return x*x + y*y; }\n    f64 abs() const { return sqrt(norm()); }\n\n    Vector unit() const { return Vector(*this) /= this->abs(); }\n};\n\nconst Vector operator+(const Vector& lhs, const Vector& rhs) { return Vector(lhs) += rhs; }\nconst Vector operator-(const Vector& lhs, const Vector& rhs) { return Vector(lhs) -= rhs; }\nconst Vector operator*(const Vector& lhs, f64 rhs) { return Vector(lhs) *= rhs; }\nconst Vector operator*(f64 lhs, const Vector& rhs) { return Vector(rhs) *= lhs; }\nconst Vector operator/(const Vector& lhs, f64 rhs) { return Vector(lhs) /= rhs; }\n\nbool operator==(const Vector& lhs, const Vector& rhs) {\n    return feq(lhs.x,rhs.x) && feq(lhs.y,rhs.y);\n}\n\nf64 geo_dot(const Vector& lhs, const Vector& rhs) {\n    return lhs.x*rhs.x + lhs.y*rhs.y;\n}\n\nf64 geo_cross(const Vector& lhs, const Vector& rhs) {\n    return lhs.x*rhs.y - lhs.y*rhs.x;\n}\n\nVector geo_rotate(const Vector& v, f64 t) {\n    return Vector(v.x*cos(t)-v.y*sin(t), v.x*sin(t)+v.y*cos(t));\n}\n\nenum ABC {\n    ABC_CCW        =  1,\n    ABC_CW         = -1,\n    ABC_ON_BACK    =  2,\n    ABC_ON_FRONT   = -2,\n    ABC_ON_SEGMENT =  0,\n};\n\nABC geo_abc(const Vector& a, const Vector& b, const Vector& c) {\n    Vector x = b - a;\n    Vector y = c - a;\n    f64 cross = geo_cross(x,y);\n    if(cross > 0) return ABC_CCW;\n    if(cross < 0) return ABC_CW;\n    f64 dot = geo_dot(x,y);\n    if(dot < 0) return ABC_ON_BACK;\n    if(x.norm() < y.norm()) return ABC_ON_FRONT;\n    return ABC_ON_SEGMENT;\n}\n\nenum Containment {\n    CONT_IN,\n    CONT_ON,\n    CONT_OUT,\n};\n\nostream& operator<<(ostream& out, const Vector& v) {\n    return out << \"Vector(\" << v.x << \",\" << v.y << \")\";\n}\n\nstruct Segment {\n    Vector p1, p2;\n\n    Segment(const Vector& pp1, const Vector& pp2) : p1(pp1), p2(pp2) {}\n    Segment(f64 x1, f64 y1, f64 x2, f64 y2) : p1(Vector(x1,y1)), p2(Vector(x2,y2)) {}\n\n    Vector vec() const { return p2 - p1; }\n\n    f64 norm() const { return vec().norm(); }\n    f64 abs() const { return vec().abs(); }\n};\n\nostream& operator<<(ostream& out, const Segment& seg) {\n    out << \"Segment(\";\n    out << \"(\" << seg.p1.x << \",\" << seg.p1.y << \")\";\n    out << \",\";\n    out << \"(\" << seg.p2.x << \",\" << seg.p2.y << \")\";\n    out << \")\";\n    return out;\n}\n\nstruct Line {\n    Vector p1, p2;\n\n    Line(const Vector& pp1, const Vector& pp2) : p1(pp1), p2(pp2) {}\n    Line(f64 x1, f64 y1, f64 x2, f64 y2) : p1(Vector(x1,y1)), p2(Vector(x2,y2)) {}\n    explicit Line(const Segment& seg) : p1(seg.p1), p2(seg.p2) {}\n\n    Vector vec() const { return p2 - p1; }\n};\n\nostream& operator<<(ostream& out, const Line& line) {\n    out << \"Line(\";\n    out << \"(\" << line.p1.x << \",\" << line.p1.y << \")\";\n    out << \",\";\n    out << \"(\" << line.p2.x << \",\" << line.p2.y << \")\";\n    out << \")\";\n    return out;\n}\n\nstruct Circle {\n    Vector c;\n    f64 r;\n\n    Circle(const Vector& cc, f64 rr) : c(cc), r(rr) {}\n};\n\nostream& operator<<(ostream& out, const Circle& cir) {\n    out << \"Circle(\";\n    out << \"(\" << cir.c.x << \",\" << cir.c.y << \")\";\n    out << \",\";\n    out << cir.r;\n    out << \")\";\n    return out;\n}\n\nstruct Polygon {\n    vector<Vector> ps;\n\n    explicit Polygon(const vector<Vector>& ps_arg) : ps(ps_arg) {}\n\n    f64 area_2x() const {\n        i64 n = SIZE(ps);\n        if(n < 3) return 0;\n        f64 sum = 0;\n        REP(i, n) {\n            sum += geo_cross(cur(i), nex(i));\n        }\n        return fabs(sum);\n    }\n    f64 area() const { return area_2x() / 2; }\n\n    // 凸性判定(全ての内角が180度以下)\n    // 3点が同一直線上にあるケースは許容する(この辺ちょっと怪しい)\n    // 2角形以下の場合 false を返す\n    bool is_convex() const {\n        i64 n = SIZE(ps);\n        if(n < 3) return false;\n        i64 abc = 0;\n        REP(i, n) {\n            ABC abc_cur = geo_abc(pre(i), cur(i), nex(i));\n            if(abc_cur != ABC_CCW && abc_cur != ABC_CW) continue;\n            if(abc_cur*abc == -1) return false;\n            abc = abc_cur;\n        }\n        return true;\n    }\n\n    // 点の包含判定\n    // 2角形以下の場合 CONT_OUT を返す\n    Containment containment(const Vector& p) const {\n        i64 n = SIZE(ps);\n        if(n < 3) return CONT_OUT;\n        i64 cnt = 0;\n        REP(i, n) {\n            Vector a = cur(i) - p;\n            Vector b = nex(i) - p;\n            if(feq(geo_cross(a,b),0) && geo_dot(a,b) <= 0) return CONT_ON;\n            if(a.y > b.y) swap(a,b);\n            if(a.y <= 0 && b.y > 0 && geo_cross(a,b) > 0) ++cnt;\n        }\n        return is_odd(cnt) ? CONT_IN : CONT_OUT;\n    }\n\n    Vector cur(i64 i) const { return ps[i]; }\n    Vector pre(i64 i) const { return ps[modulo(i-1,SIZE(ps))]; }\n    Vector nex(i64 i) const { return ps[modulo(i+1,SIZE(ps))]; }\n};\n\nostream& operator<<(ostream& out, const Polygon& poly) {\n    out << \"Polygon(\";\n    i64 n = SIZE(poly.ps);\n    REP(i, n) {\n        const Vector& p = poly.ps[i];\n        out << \"(\" << p.x << \",\" << p.y << \")\";\n        if(i != n-1)\n            out << \",\";\n    }\n    out << \")\";\n    return out;\n}\n\nVector geo_project(const Line& line, const Vector& p) {\n    Vector v = line.vec();\n    f64 r = geo_dot(p-line.p1, v) / v.norm();\n    return line.p1 + r*v;\n}\n\nbool geo_intersect(const Segment& x, const Segment& y) {\n    return geo_abc(x.p1,x.p2,y.p1) * geo_abc(x.p1,x.p2,y.p2) <= 0 &&\n           geo_abc(y.p1,y.p2,x.p1) * geo_abc(y.p1,y.p2,x.p2) <= 0;\n}\n\nbool geo_intersect(const Circle& cir1, const Circle& cir2) {\n    return (cir1.c-cir2.c).norm() <= pow(cir1.r+cir2.r,2);\n}\n\nf64 geo_distance(const Line& line, const Vector& p) {\n    Vector v = line.vec();\n    return fabs(geo_cross(v,p-line.p1)) / v.abs();\n}\n\nf64 geo_distance(const Segment& seg, const Vector& p) {\n    if(geo_dot( seg.vec(), p-seg.p1) < 0) return (p-seg.p1).abs();\n    if(geo_dot(-seg.vec(), p-seg.p2) < 0) return (p-seg.p2).abs();\n    return geo_distance(Line(seg), p);\n}\n\nf64 geo_distance(const Segment& seg1, const Segment& seg2) {\n    if(geo_intersect(seg1,seg2)) return 0;\n    return min({\n        geo_distance(seg1, seg2.p1),\n        geo_distance(seg1, seg2.p2),\n        geo_distance(seg2, seg1.p1),\n        geo_distance(seg2, seg1.p2),\n    });\n}\n\nbool geo_intersect(const Circle& cir, const Line& line) {\n    return geo_distance(line, cir.c) <= cir.r;\n}\n\n// 交差判定は既に行われているとする\n// FIXME: 2線分が重なる場合を考慮してない\nVector geo_crosspoint(const Segment& seg1, const Segment& seg2) {\n    Vector v = seg2.vec();\n    f64 d1 = fabs(geo_cross(v, seg1.p1-seg2.p1));\n    f64 d2 = fabs(geo_cross(v, seg1.p2-seg2.p1));\n    return seg1.p1 + (d1/(d1+d2))*seg1.vec();\n}\n\n// 2直線が重なる場合、la.p1 を返す\n// 2直線が平行かつ重ならない場合エラー(先に交差判定すること)\nVector geo_crosspoint(const Line& la, const Line& lb) {\n    Vector a = la.vec();\n    Vector b = lb.vec();\n    f64 d1 = geo_cross(b, lb.p1-la.p1);\n    f64 d2 = geo_cross(b, a);\n    if(feq(d2, 0)) {  // 2直線が平行\n        if(feq(d1, 0)) return la.p1;  // 2直線が重なっている\n        assert(false);\n    }\n    return la.p1 + d1/d2*a;\n}\n\n// 接する場合も同じ座標2つを返す\nvector<Vector> geo_crosspoints(const Circle& cir, const Line& line) {\n    if(!geo_intersect(cir,line)) return {};\n    Vector p = geo_project(line, cir.c);\n    Vector e = line.vec().unit();\n    f64 t = sqrt(cir.r*cir.r - (p-cir.c).norm());\n    return { p+t*e, p-t*e };\n}\n\n// 接する場合も同じ座標2つを返す\nvector<Vector> geo_crosspoints(const Circle& cir1, const Circle& cir2) {\n    if(!geo_intersect(cir1,cir2)) return {};\n    Vector v = cir2.c - cir1.c;\n    f64 d = v.abs();\n    f64 t = acos((cir1.r*cir1.r + d*d - cir2.r*cir2.r) / (2*cir1.r*d));\n    return {\n        cir1.c + geo_rotate(v, t) / d * cir1.r,\n        cir1.c + geo_rotate(v,-t) / d * cir1.r,\n    };\n}\n\n// 凸包 (Andrew's Monotone Chain)\n//\n// * 始点はy座標最小のもののうちx座標最小のもの\n// * 反時計回り\n// * 辺上の点を含む\nPolygon geo_convex_hull(vector<Vector> ps) {\n    i64 n = SIZE(ps);\n    assert(n >= 3);\n\n    vector<Vector> res;\n    res.reserve(n);\n\n    ALL(sort, ps, ON(less<>(), [](const Vector& p) { return make_pair(p.y,p.x); }));\n\n    auto step = [&res](const Vector& p) {\n        while(SIZE(res) >= 2) {\n            i64 k = SIZE(res);\n            // 辺上の点を含めたくなければ \"!= ABC_CW\" を \"== ABC_CCW\" に変える\n            if(geo_abc(res[k-2],res[k-1],p) != ABC_CW) break;\n            res.pop_back();\n        }\n        res.emplace_back(p);\n    };\n\n    // lower hull\n    for(i64 i = 0; i < n; ++i) {\n        step(ps[i]);\n    }\n    // upper hull\n    for(i64 i = n-2; i >= 0; --i) {\n        step(ps[i]);\n    }\n    // 始点が重複するので削除\n    res.pop_back();\n\n    return Polygon(res);\n}\n\n// 凸多角形の直径 (Rotating Calipers)\n//\n// (直径の2乗, index_端点1, index_端点2) を返す\n// convex は凸多角形でなければならない\ntuple<f64,i64,i64> geo_convex_diameter_sq(const Polygon& convex) {\n    const auto& ps = convex.ps;\n    i64 n = SIZE(ps);\n\n    auto cmp_y = ON(less<>(), [](const Vector& p) { return p.y; });\n    i64 istart = ALL(max_element, ps, cmp_y) - begin(ps);\n    i64 jstart = ALL(min_element, ps, cmp_y) - begin(ps);\n\n    auto nex = [n](i64 i) { return modulo(i+1,n); };\n\n    f64 d2max = (ps[istart]-ps[jstart]).norm();\n    i64 i, imax, j, jmax;\n    i = imax = istart;\n    j = jmax = jstart;\n    do {\n        Vector vi = ps[nex(i)] - ps[i];\n        Vector vj = ps[nex(j)] - ps[j];\n        if(geo_cross(vi,vj) >= 0)\n            j = nex(j);\n        else\n            i = nex(i);\n        if(chmax(d2max, (ps[i]-ps[j]).norm())) {\n            imax = i;\n            jmax = j;\n        }\n    } while(i != istart || j != jstart);\n\n    //return { d2max, imax, jmax };\n    // AOJの場合はこっち\n    return make_tuple(d2max, imax, jmax);\n}\n\n// 凸多角形の切断\n//\n// convex は凸多角形でなければならない\nPolygon geo_convex_cut(const Polygon& convex, const Line& line) {\n    const vector<Vector>& ps = convex.ps;\n    i64 n = SIZE(ps);\n    auto nex = [n](i64 i) { return modulo(i+1,n); };\n\n    vector<Vector> res;\n    REP(i, n) {\n        // ps[i] が直線より左または直線上なら ps[i] を追加\n        ABC abc_a = geo_abc(line.p1, line.p2, ps[i]);\n        if(abc_a != ABC_CW)\n            res.emplace_back(ps[i]);\n        // ps[i] が直線より左、かつ ps[i+1] が直線より右なら交点を追加\n        ABC abc_b = geo_abc(line.p1, line.p2, ps[nex(i)]);\n        if(abc_a*abc_b < 0)\n            res.emplace_back(geo_crosspoint(line, Line(ps[i],ps[nex(i)])));\n    }\n    return Polygon(res);\n}\n\n// geo_closest_pair() 下請け\n// [first,last) はx座標に関してソート済であること\ntemplate<typename RandomIt>\ntuple<f64,RandomIt,RandomIt> geo_closest_pair_sq_impl(RandomIt first, RandomIt last) {\n    i64 n = last - first;\n    if(n <= 1)\n        //return { DBL_MAX, last, last };\n        // AOJの場合はこっち\n        return make_tuple(DBL_MAX, last, last);\n\n    auto mid = first + n/2;\n    f64 x = mid->x;\n    auto res = min(geo_closest_pair_sq_impl(first,mid), geo_closest_pair_sq_impl(mid,last));\n    inplace_merge(first, mid, last, LT_ON([](const Vector& p) { return p.y; }));\n\n    vector<RandomIt> around;\n    for(auto i = first; i != last; ++i) {\n        f64 d = x - i->x;\n        if(d*d >= get<0>(res)) continue;\n        for(auto j = around.rbegin(); j != around.rend(); ++j) {\n            f64 dx = i->x - (*j)->x;\n            f64 dy = i->y - (*j)->y;\n            if(dy*dy >= get<0>(res)) break;\n            f64 cur = dx*dx + dy*dy;\n            if(cur < get<0>(res))\n                //res = { cur, i, *j };\n                // AOJの場合はこっち\n                res = make_tuple(cur, i, *j);\n        }\n        around.emplace_back(i);\n    }\n\n    return res;\n}\n\n// 最近点対\n//\n// (距離の2乗, index_端点1, index_端点2) を返す\n// SIZE(ps) < 2 ならエラー\n// O(nlogn)\ntuple<f64,i64,i64> geo_closest_pair_sq(vector<Vector> ps) {\n    assert(SIZE(ps) >= 2);\n\n    ALL(sort, ps, LT_ON([](const Vector& p) { return p.x; }));\n\n    auto res = ALL(geo_closest_pair_sq_impl, ps);\n    auto i = get<1>(res) - begin(ps);\n    auto j = get<2>(res) - begin(ps);\n    //return { get<0>(res), i, j };\n    // AOJの場合はこっち\n    return make_tuple(get<0>(res), i, j);\n}\n\nvoid RD(Vector& v) {\n    RD(v.x);\n    RD(v.y);\n}\n\n//--------------------------------------------------------------------\n\nenum CircleRelation {\n    CIRS_IN        = 0,\n    CIRS_TOUCH_IN  = 1,\n    CIRS_CROSS     = 2,\n    CIRS_TOUCH_OUT = 3,\n    CIRS_OUT       = 4,\n    CIRS_SAME      = 5,\n};\n\nCircleRelation geo_circle_relation(const Circle& cir1, const Circle& cir2) {\n    f64 d = (cir2.c-cir1.c).norm();\n    f64 a = pow(cir1.r+cir2.r, 2);\n    f64 b = pow(cir1.r-cir2.r, 2);\n    if(feq(d, a)) {\n        return CIRS_TOUCH_OUT;\n    }\n    else if(feq(d, b)) {\n        return feq(d,0) ? CIRS_SAME : CIRS_TOUCH_IN;\n    }\n    else if(a < d) {\n        return CIRS_OUT;\n    }\n    else if(b < d && d < a) {\n        return CIRS_CROSS;\n    }\n    else {  // d < b\n        return CIRS_IN;\n    }\n}\n\nvoid solve() {\n    Vector c1; f64 r1; RD(c1); RD(r1);\n    Circle cir1(c1,r1);\n    Vector c2; f64 r2; RD(c2); RD(r2);\n    Circle cir2(c2,r2);\n\n    CircleRelation ans = geo_circle_relation(cir1, cir2);\n\n    PRINTLN(ans);\n}\n\nsigned main() {\n    \n\n    solve();\n\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <cstdio>\n#include <algorithm>\n#include <vector>\nusing namespace std;\nconst double eps = 1e-8;\nconst double pi = acos(-1.0);\nconst int inf = 0x3f3f3f3f;\ntypedef long long ll;\nint sgn(double x){\n    if(fabs(x)<eps){\n        return 0;\n    }\n    if(x<0){\n        return -1;\n    }else{\n        return 1;\n    }\n}\nstruct Point{\n    double x,y;\n    Point(){}\n    Point(double _x,double _y){\n        x = _x;\n        y = _y;\n    }\n    void input(){\n        scanf(\"%lf%lf\",&x,&y);\n    }\n    double distance(Point p){\n        return hypot(x-p.x,y-p.y);\n    }\n};\nstruct circle{\n    Point p;\n    double r;\n    circle(){}\n    circle(Point _p,double _r){\n        p = _p;\n        r = _r;\n    }\n    circle(double x,double y,double _r){\n        p = Point(x,y);\n        r = _r;\n    }\n    void input(){\n        p.input();\n        scanf(\"%lf\",&r);\n    }\n    //两圆的关系\n    //5 相离\n    //4 外切\n    //3 相交\n    //2 内切\n    //1 内含\n    int relationcircle(circle v){\n        double d = p.distance(v.p);\n        if(sgn(d-r-v.r)>0){\n            return 5;\n        }\n        if(sgn(d-r-v.r)==0){\n            return 4;\n        }\n        double l = fabs(r-v.r);\n        if(sgn(d-r-v.r)<0&&sgn(d-l)>0){\n            return 3;\n        }\n        if(sgn(d-l)==0){\n            return 2;\n        }\n        if(sgn(d-l)<0){\n            return 1;\n        }\n    }\n};\nint main(){\n    circle c1,c2;\n    c1.input();\n    c2.input();\n    printf(\"%d\\n\",c1.relationcircle(c2)-1);\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cmath>\n#include<vector>\n#include<map>\n#include<set>\n#include<string>\n#include<queue>\n#include<stack>\nusing namespace std;\n#define MOD 1000000007\n#define INF (1<<29)\n#define EPS (1e-10)\ntypedef long long Int;\ntypedef pair<Int, Int> P;\n\n#define max(x, y) ((x)>(y)?(x):(y))\n#define min(x, y) ((x)<(y)?(x):(y))\n\nclass Vec{\npublic:\n  double x, y;\n  Vec(double x = 0, double y = 0):x(x),y(y){}\n\n  Vec &read(){\n    cin >> x >> y;\n    return *this;\n  }\n\n  void print(){\n    printf(\"%.10lf %.10lf\\n\", x, y);\n  }\n\n  bool operator<(const Vec &other){\n    if(x < other.x)return true;\n    if(x == other.x && y < other.y)return true;\n    return false;\n  }\n  \n  Vec operator+(const Vec &other)\n  {\n    Vec result = *this;\n    result.x += other.x;\n    result.y += other.y;\n    return result;\n  }\n\n  Vec operator-(const Vec &other)\n  {\n    Vec result = *this;\n    result.x -= other.x;\n    result.y -= other.y;\n    return result;\n  }\n\n  Vec operator*(const double &k)\n  {\n    Vec result = *this;\n    result.x *= k;\n    result.y *= k;\n    return result;\n  }\n\n  Vec operator/(const double &k)\n  {\n    Vec result = *this;\n    result.x /= k;\n    result.y /= k;\n    return result;\n  } \n  \n  double cross(const Vec &other)\n  {\n    return x*other.y - y*other.x;\n  }\n\n  double dot(const Vec &other){\n    return x*other.x + y*other.y;\n  }\n  \n  bool operator==(const Vec &other) const\n  {\n    return abs(x - other.x) < EPS && abs(y - other.y) < EPS;\n  }\n\n  double norm()\n  {\n    return sqrt(x*x+y*y);\n  }\n\n  double norm2()\n  {\n    return x*x+y*y;\n  }\n\n  Vec standard(){\n    Vec result = *this;\n    return result/result.norm();\n  }\n};\n\n//cw:1, ccw:-1, other:0\nInt CCW(Vec a, Vec b, Vec c){\n  b = b - a;\n  c = c - a;\n  if(b.cross(c) > EPS)return -1;\n  if(b.cross(c) < -EPS)return 1;\n  return 0;\n}\n\ndouble dist(Vec a, Vec b){\n  return (a-b).norm();\n}\n\n\nint main(){\n  Vec c1, c2;\n  double r1, r2;\n  c1.read();cin >> r1;\n  c2.read();cin >> r2;\n  Vec d = c1 - c2;\n\n  if(d.norm2() > (r1+r2)*(r1+r2))cout << 4 << endl;\n  else if(d.norm2() == (r1+r2)*(r1+r2))cout << 3 << endl;\n  else if(d.norm2() == (r1 - r2)*(r1 - r2))cout << 1 << endl;\n  else if(d.norm2() < (r1 - r2)*(r1 - r2))cout << 0 << endl;\n  else cout << 2 << endl;  \n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cmath>\nusing namespace std;\nstruct Circle { double x, y, r; };\nint main() {\n    Circle p, q;\n    cin >> p.x >> p.y >> p.r;\n    cin >> q.x >> q.y >> q.r;\n    double dist = sqrt((p.x - q.x)*(p.x - q.x) + (p.y - q.y)*(p.y - q.y));\n    if (dist > p.r + q.r)cout << \"4\" << endl;\n    else if (dist == p.r + q.r) {\n        cout << \"3\" << endl;\n    }\n    else if (p.r <= q.r) {\n        if (p.r + dist == q.r)cout << \"1\" << endl;\n        if (p.r + dist < q.r)cout << \"0\" << endl;\n        if (p.r + dist > q.r)cout << \"2\" << endl;\n    }\n    else {\n        if (q.r + dist == p.r)cout << \"1\" << endl;\n        if (q.r + dist < p.r)cout << \"0\" << endl;\n        if (q.r + dist > p.r)cout << \"2\" << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\n#define FOR(i,bg,ed) for(int i=(bg);i<(ed);i++)\n#define REP(i,n) FOR(i,0,n)\n#define ALL(v) (v).begin(),(v).end()\n#define fi first\n#define se second\n#define pb push_back\n\n#define IL inline \nnamespace geo {\n    typedef double D;\n    typedef bool B;\n    typedef complex<D> P;\n#define X real()\n#define Y imag()\n    B comp(const P& l, const P& r){ return (l.X == r.X) ? l.Y < r.Y : l.X < r.X; }\n    typedef pair<P, P> L;  //line\n    typedef pair<P, P> LS; //line segment\n    typedef pair<P, D> C;  //circle\n    typedef vector<P> Poly;\n    const D EPS = 1e-8;\n    //Decompotision Macro\n#define DCl(a,b,l) P (a),(b);tie(a,b)=l; \n#define DCc(a,b,c) P (a);D (b);tie(a,b)=c; \n    \n    //A dot B\n    IL D dot(P a, P b) { return a.X*b.X + a.Y*b.Y; }\n    //A cross B\n    IL D cross(P a, P b) { return a.X*b.Y - a.Y*b.X; }\n    IL D ccw(P a,P b,P c){\n        return cross(b - a, c - a);\n    }\n\n    IL int sgn(P a,P b, P c){\n        if(cross(b-a,c-a) > EPS)return 1;\n        if(cross(b-a,c-a) < -EPS)return -1;\n        if(dot(b-a,c-a) < -EPS)return 2; // b-a-c\n        if(dot(a-b,c-b) < -EPS)return -2; // a-b-c\n        return 0;\n    }\n    IL D signed_distance_P_L(P p, L l) {\n        DCl(a,b,l);\n        return ccw(a,b,p)/ abs(b - a);\n    }\n    \n    IL D distance_P_L(P p, L l) {\n        return abs(signed_distance_P_L(p,l));\n    }\n\n    IL D distance_P_LS(P p, LS ls) {\n        DCl(a,b,ls);\n        if (dot(b - a, p - a) < EPS) return abs(p - a);\n        if (dot(a - b, p - b) < EPS) return abs(p - b);\n        return abs(cross(b - a, p - a)) / abs(b - a);\n    }\n\n    \n    IL B is_L_L(L p, L q) {\n        DCl(a,b,p);\n        DCl(c,d,q);\n        return\n            abs(cross(a - b, c - d)) > EPS ||\n            abs(cross(a - b ,d - b)) < EPS;\n    }\n    IL B is_L_LS(L l, LS ls) {\n        DCl(a,b,l);\n        DCl(c,d,ls);\n        return ccw(a,b,c)*ccw(a,b,d)<EPS;\n    }\n    IL B is_LS_LS(LS p, LS q) {\n        DCl(a,b,p);\n        DCl(c,d,q);\n        return sgn(a,b,c)*sgn(a,b,d) <= 0\n            && sgn(c,d,a)*sgn(c,d,b) <= 0;\n    }\n\n    IL D distance_LS_LS(LS p,LS q){\n        if(is_LS_LS(p,q))return 0;\n        return min({\n                distance_P_LS(p.fi,q),\n                distance_P_LS(p.se,q),\n                distance_P_LS(q.fi,p),\n                distance_P_LS(q.se,p)    \n                    });\n    }\n\n    //caution: have to use isintersected_L_L before this function\n    IL P cross_point_L_L(L p, L q) {\n        DCl(a,b,p);\n        D d1 = signed_distance_P_L(a, q);\n        D d2 = signed_distance_P_L(b, q);\n        return (a * d2 - b * d1) / (d2 - d1);\n    }\n    \n    IL B is_C_C(C p, C q) {\n        DCc(cp,rp,p);\n        DCc(cq,rq,q);\n        D d = abs(cp - cq);\n        return abs(rp - rq) - d <EPS &&\n                                 rp + rq - d > -EPS;\n    }\n    IL LS cross_C_C(C p, C q) {\n        DCc(cp,rp,p);\n        DCc(cq,rq,q);\n        D d = abs(cp - cq);\n        D rc = (d*d + rp*rp - rq*rq) / (2 * d);\n        D rs = sqrt(rp*rp - rc*rc);\n        P diff = (cq - cp) / d;\n        return {cp + P(rc, rs)*diff, cp + P(rc, -rs)*diff};\n    }\n    IL Poly convex_hull(Poly& p) {\n        int n = p.size();\n        Poly res(2 * n);\n        int k = 0, t;\n        sort(ALL(p),comp);\n        REP(i,n) {\n            while (k > 1 && ccw(res[k-2],res[k-1],p[i]) < EPS)k--;\n            res[k++] = p[i];\n        }\n        t = k;\n        REP(j,n-1){\n            int i= n - 2 - j;\n            while (k > t && ccw(res[k - 2],res[k - 1], p[i]) < EPS)k--;\n            res[k++] = p[i];\n        }\n        res.resize(k - 1);\n        return res;\n    }\n    IL B convex_in(Poly& l,P& p) {\n        int a = 0, b = l.size(), c;\n        D A, C;\n        P g = (l[a] + l[b - 1] + l[b / 2]) / 3.0;\n        while (b - a > 1) {\n            c = (a + b) / 2;\n            A = cross(l[a] - g, p - l[a]);\n            C = cross(l[c] - g, p - l[c]);\n            if (cross(l[a] - g, l[c] - g) >= 0) {\n                if (A > -EPS&&C < -EPS)b = c;\n                else a = c;\n            }\n            else {\n                if (C < -EPS || A > -EPS)b = c;\n                else a = c;\n            }\n        }\n        return(cross(l[b%l.size()] - l[a], p - l[b%l.size()]) > -EPS);\n    }\n    IL D convex_area(Poly& l) {\n        double res = 0;\n        int n = l.size();\n        FOR(i,2,n)\n            res += (abs(cross(l[i - 1] - l[0], l[i] - l[i - 1]))) / 2.0;\n        return res;\n    }\n    inline vector<L> tangent_line(C c, P p) {\n        vector<L> res;\n        DCc(cp,r,c);\n        P v = p - cp;\n        D dist = abs(v);\n        if (dist - r > -EPS) {\n            double _cos = r / dist;\n            double _sin = sqrt(1.0 - _cos*_cos);\n            v = v * (r / dist);\n            {\n                P e = P(_cos * v.X - _sin * v.Y, _sin*v.X + _cos*v.Y);\n                res.push_back({p, cp + e});\n            }\n            if(dist-r > EPS){\n                P e = P( _cos*v.X + _sin*v.Y ,-_sin*v.X + _cos*v.Y );\n                res.push_back({p, cp + e});\n            }\n        }\n        return res;\n    }\n    IL vector<L> inner_common_tangent_line(C p, C q) {\n        vector<L> res;\n        DCc(Mp,Rp,p);\n        DCc(Mq,Rq,q);\n        D dist = abs(Mp - Mq);\n        if (dist - (Rp + Rq) > -EPS) {\n            P mid = (Mq*Rp + Mp*Rq) / (Rp + Rq);\n            res = tangent_line(p, mid);\n        }\n        return res;\n    }\n    inline vector<L> outer_common_tangent_line(C p, C q) {\n        vector<L> res;\n        DCc(Mp,Rp,p);\n        DCc(Mq,Rq,q);\n        P v = Mp - Mq;\n        D dist = abs(v);\n        if (dist - abs(Rp - Rq) >- EPS) {\n            if (abs(Rp - Rq) < EPS) {\n                P e = v*P( 0, 1 );\n                e = e / dist;\n                res.pb(L(Mp + e, Mq + e));\n                res.pb(L(Mp - e, Mq - e));\n            }\n            else {\n                P mid = Mp + (Mq - Mp) * Rp / (Rp - Rq);\n                res = tangent_line(p, mid);\n            }\n        }\n        return res;\n    }\n}\nusing namespace geo;\nint main(){\n    int a1, b1, r1;\n    int a2, b2, r2;\n    cin >> a1 >> b1 >> r1;\n    cin >> a2 >> b2 >> r2;\n    auto v = inner_common_tangent_line(C(P(a1, b1), r1), C(P(a2, b2), r2));\n    auto v2= outer_common_tangent_line(C(P(a1, b1), r1), C(P(a2, b2), r2));\n    cout << v.size() + v2.size() << endl;\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\ntemplate<class T> using vec = vector<T>;\ntemplate<class T> using vvec = vector<vec<T>>;\nusing R = double;\nusing P = complex<R>;\n#define x real()\n#define y imag()\nconst R eps = 1e-9,PI = acos(-1);\n\nbool equal(R a,R b){return abs(b-a)<eps;}\nbool equal0(R a){return equal(a,0.0);}\n\nP operator*(const P& p,const R& d){\n    return P(p.x*d,p.y*d);\n}\n\nistream &operator>>(istream& is,P& p){\n    R a,b;\n    is >> a >> b;\n    p = P(a,b);\n    return is;\n}\n\nostream &operator<<(ostream& os,P& p){\n    os << fixed << setprecision(10) << p.real() << \" \" << p.imag();\n}\n//内積\ndouble dot(P a,P b) {return (conj(a)*b).real();}\n//外積\ndouble cross(P a,P b) {return (conj(a)*b).imag();}\n\nstruct L{\n    P a,b;\n    L(P a,P b):a(a),b(b){}\n    L(R A,R B,R C){\n        if(equal(A,0)) a = P(0,C/B),b = P(1,C/B);\n        else if(equal(B,0)) b = P(C/A,0),b = P(C/A,1);\n        else a = P(0,C/B),b = P(C/A,0);\n    }\n};\n\nstruct S:L{\n    S(P a,P b):L(a,b){}\n};\n\nusing Polygon = vec<P>;\n\nstruct C{\n    P p;\n    R r;\n    C(P p,R r):p(p),r(r){}\n};\n//pをbに射影\nP projection(P p,P b) {return b*dot(p,b)/norm(b);}\n\n//pとp1 to p2 に射影\nP projection(L l,P p){\n    p -= l.a; l.b -= l.a;\n    P proj = projection(p,l.b);\n    return l.a+proj;\n}\n\n//点の回転方向を判定\nint ccw(P p0,P p1,P p2){\n    p1 -= p0,p2 -= p0;\n    if(cross(p1,p2)>eps) return 1; //\"COUNTER_CLOCKWISE\"\n    if(cross(p1,p2)<-eps) return -1; //\"CLOCKWISE\"\n    if(dot(p1,p2)<0) return 2; //\"ONLINE_BACK\"\n    if(norm(p1)<norm(p2)) return -2; //\"ONLINE_FRONT\"\n    return 0; //\"ON_SEGMENT\"\n}\n\nbool is_parallel(L l1,L l2){\n    return equal0(cross(l1.b-l1.a,l2.b-l2.a));\n}\n\nbool is_orthogonal(L l1,L l2){\n    return equal0(dot(l1.b-l1.a,l2.b-l2.a));\n}\n\n//pをlに関して対称移動\nP reflection(L l,P p){\n    P pj = projection(l,p);\n    return 2.0*pj-p;\n}\n\n\nR dist(L l,P p);\nR dist(P a,P b);\n//pがl上にあるか\nbool is_online(L l,P p){\n    return abs(ccw(l.a,l.b,p))!=1;\n}\n\nbool is_onsegment(S s,P p){\n    return ccw(s.a,s.b,p)==0;\n}\n\n//線分の交差判定\nbool intersect(S s,S t){\n    return ccw(s.a,s.b,t.a)*ccw(s.a,s.b,t.b)<=0 && ccw(t.a,t.b,s.a)*ccw(t.a,t.b,s.b)<=0;\n}\n\n//円と直線の交差判定\nbool intersect(C c,L l){\n    return dist(l,c.p)<=c.r+eps;\n}\n\n//点が円周上にあるか\nbool on_circle(C c,P p){\n    return abs(abs(p-c.p)-c.r)<eps;\n}\n\n/*円と直線の関係\n交点をいくつもつか？\n*/\nbool intersect(C c,S s){\n    if(norm(projection(s,c.p)-c.p)-c.r*c.r>eps) return 0;\n    R d1 = dist(c.p,s.a),d2 = dist(c.p,s.b);\n    if(d1<c.r+eps && d2<c.r+eps) return 0;\n    if(d1<c.r-eps && d2>c.r+eps || d1>c.r-eps && d2<c.r+eps) return 1;\n    const P h = projection(s,c.p);\n    if(dot(s.a-h,s.b-h)<0) return 2;\n    return 0;\n}\n\n/*円と円の関係\n4:交点を持たない\n3:外接する\n2:2つの相異なる交点をもつ\n1:内接する\n0:一方がもう一方の内部にある\n*/\nint intersect(C c1,C c2){\n    if(c1.r<c2.r) swap(c1,c2);\n    R d = dist(c1.p,c2.p);\n    if(c1.r+c2.r<d) return 4;\n    if(equal(c1.r+c2.r,d)) return 3;\n    if(c1.r-c2.r<d) return 2;\n    if(equal(c1.r-c2.r,d)) return 1;\n    return 0;\n}\n\n//2直線の交点\nP crosspoint(L l1,L l2){\n    R a = cross(l1.b-l1.a,l2.b-l2.a);\n    R b = cross(l1.b-l1.a,l1.b-l2.a);\n    if(equal0(abs(a)) && equal0(abs(b))) return l2.a;\n    return l2.a+(l2.b-l2.a)*b/a;\n}\n\nP crosspoint(S s1, S s2){\n    return crosspoint(L(s1),L(s2));\n}\n\nR dist(P a,P b){\n    return abs(a-b);\n}\n\nR dist(L l,P p){\n    return abs(p-projection(l,p));\n}\n\nR dist(L l1,L l2){\n    return is_parallel(l1,l2)? 0:dist(l1,l2.a);\n}\n\nR dist(S s,P p){\n    P r = projection(s,p);\n    if(is_onsegment(s,r)) return abs(r-p);\n    return min(dist(s.a,p),dist(s.b,p));\n}\n\nR dist (S s1,S s2){\n    if(intersect(s1,s2)) return 0;\n    return min({dist(s1,s2.a),dist(s1,s2.b),\n    dist(s2,s1.a),dist(s2,s1.b)});\n}\n\nR area_of_polygon(Polygon& v){\n    int n = v.size();\n    R res = 0;\n    for(int i=0;i+2<n;i++){\n        res += cross(v[i+1]-v[0],v[i+2]-v[0]);\n    }\n    return res/2;\n}\n\nbool is_convex(Polygon& v){\n    int n = v.size();\n    for(int i=0;i<n;i++){\n        P a = v[i%n],b = v[(i+1)%n],c = v[(i+2)%n];\n        if(cross(b-a,c-a)<-eps) return false;\n    }\n    return true;\n}\n\nenum{\n    OUT,ON,IN\n};\n\n//点pと多角形vの関係\nint contains(Polygon& v,P p){\n    bool in = false;\n    int n = v.size();\n    for(int i=0;i<n;i++){\n        P a = v[i]-p,b = v[(i+1)%n]-p;\n        if(a.y>b.y) swap(a,b);\n        if(a.y<=0 && 0<b.y && cross(a,b)<0) in = !in;\n        if(is_onsegment(S(a,b),P(0,0))) return ON;\n    }\n    return in? IN:OUT;\n}\n\nPolygon convex_hull(Polygon& v){\n    int n = v.size();\n    Polygon res;\n    sort(v.begin(),v.end(),[](P& a,P& b){\n        return (a.x!=b.x? a.x<b.x:a.y<b.y);\n    });\n    for(int i=0;i<n;i++){\n        if(i<2){\n            res.push_back(v[i]);\n            continue;\n        }\n        while(true){\n            int s = res.size();\n            if(s<2){\n                res.push_back(v[i]);\n                break;\n            }\n            R c = cross(res[s-1]-res[s-2],v[i]-res[s-2]);\n            if(c<-eps){\n                res.pop_back();\n            }else{\n                res.push_back(v[i]);\n                break;\n            }\n        }\n    }\n    reverse(v.begin(),v.end());\n    for(int i=0;i<n;i++){\n        while(true){\n            int s = res.size();\n            if(v[i]==res.back()) break;\n            if(s<2){\n                res.push_back(v[i]);\n                break;\n            }\n            R c = cross(res[s-1]-res[s-2],v[i]-res[s-2]);\n            if(c<-eps){\n                res.pop_back();\n            }else{\n                res.push_back(v[i]);\n                break;\n            }\n        }\n    }\n    res.pop_back();\n    return res;\n}\n\nR convex_diameter(Polygon v){\n    int n = v.size();\n    int l = 0,r = 0;\n    for(int i=1;i<n;i++){\n        if(v[i].y>v[l].y) l = i;\n        if(v[i].y<v[r].y) r = i;\n    }\n    R res = abs(v[l]-v[r]);\n    int i = l,mai = l,j = r,maj = r;\n    do{\n        if(cross(v[(i+1)%n]-v[i],v[(j+1)%n]-v[j])>=0) j = (j+1)%n;\n        else i = (i+1)%n;\n        if(abs(v[i]-v[j])>res){\n            res = abs(v[i]-v[j]);\n            mai = i; maj = j;\n        }\n    }while(i!=l || j!=r);\n    return res;\n}\n\nPolygon convex_cut(Polygon& v,L l){\n    Polygon res;\n    int n = v.size();\n    for(int i=0;i<n;i++){\n        P now = v[i],ne = v[(i+1)%n];\n        if(ccw(l.a,l.b,now)!=-1) res.push_back(now);\n        if(ccw(l.a,l.b,now)*ccw(l.a,l.b,ne)<0){\n            res.push_back(crosspoint(L(now,ne),l));\n        }\n    }\n    return res;\n}\n\n\n\nint main(){\n    P p1,p2;\n    R r1,r2;\n    cin >> p1 >> r1;\n    cin >> p2 >> r2;\n    cout << intersect(C(p1,r1),C(p2,r2)) << endl;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n// conj(x) : complex conjugate,(0,1)->(0,-1)\n// abs(x) : dist between(0,0) and x\n// norm(x) : abs(x) * abs(x)\n// arg(x) : argment,[-PI,PI]\nusing CP = complex<long double>;\n#define X real()\n#define Y imag()\nconst long double PI = acos(-1.0L);\nconst long double EPS = 1e-10;\nbool operator==(const CP &l, const CP &r) {\n  return norm(l - r) <= EPS * EPS;\n}\n// cos a\nlong double costh(long double a, long double b,\n                  long double c) {\n  return (b * b + c * c - a * a) / (2.0L * b * c);\n}\n\n// dot(a,b) = |a||b|cos x\nlong double dot(CP a, CP b) { return (conj(a) * b).X; }\n// cross(a,b) : area of parallelogram\n// sign : a-> b ,counter clockwise? + : -\nlong double cross(CP a, CP b) { return (conj(a) * b).Y; }\nlong double corner(CP a, CP b) {\n  //[0,PI]\n  return acos(dot(a, b) / (abs(a) * abs(b)));\n}\nbool equalP(CP a, CP b) { return norm(a - b) <= EPS * EPS; }\n\nCP projectionLP(CP s, CP t, CP p) {\n  if(s == t) return s;\n  CP base = t - s;\n  long double r = dot(p - s, base) / norm(base);\n  return s + base * r;\n}\n\nCP reflectionLP(CP s, CP t, CP p) {\n  CP tmp = (projectionLP(s, t, p) - p);\n  tmp *= 2;\n  return p + tmp;\n}\n\nint calc_clockwiseSP(CP s, CP t, CP p) {\n  t -= s;\n  p -= s;\n  if(cross(t, p) > EPS) return 1;   // \"COUNTER_CLOCKWISE\"\n  if(cross(t, p) < -EPS) return -1; //\"CLOCK_WISE\"\n  if(dot(t, p) < 0) return 2;       // \"ONLINE_BACK\"\n  if(norm(t) < norm(p)) return -2;  // \"ONLINE_FRONT\"\n  return 0;                         // \"ON_SEGMENT\"\n}\n\nint parallel_orthogonalLL(CP s, CP t, CP a, CP b) {\n  t -= s;\n  b -= a;\n  if(abs(cross(t, b)) <= EPS) return 2; // \"parallel\"\n  if(abs(dot(t, b)) <= EPS) return 1;   // \"orthogonal\"\n  return 0;\n}\n\nCP intersectionLL(CP a, CP b, CP c, CP d) {\n  return a + (b - a) * (cross(d - c, c - a) /\n                        cross(d - c, b - a));\n}\n\nbool on_segSP(CP s, CP t, CP p) {\n  // if not use end point, dot(s - p, t - p) < 0\n  return abs(cross(s - p, t - p)) <= EPS &&\n         dot(s - p, t - p) <= 0;\n}\n\n// crossing segments? (a,b) and (c,d)\nbool iscrossSS(CP a, CP b, CP c, CP d) {\n  // parallel\n  if(abs(cross(a - b, c - d)) <= EPS) {\n    return on_segSP(a, b, c) || on_segSP(a, b, d) ||\n           on_segSP(c, d, a) || on_segSP(c, d, b);\n  }\n  CP isp = intersectionLL(a, b, c, d);\n  return on_segSP(a, b, isp) && on_segSP(c, d, isp);\n}\n\nlong double distLP(CP s, CP t, CP p) {\n  return abs(cross(t - s, p - s) / abs(t - s));\n}\n\nlong double distSP(CP s, CP t, CP p) {\n  if(dot(t - s, p - s) < 0) return abs(p - s);\n  if(dot(s - t, p - t) < 0) return abs(p - t);\n  return distLP(s, t, p);\n}\n\nlong double distSS(CP a, CP b, CP c, CP d) {\n  long double res = 1e18;\n  if(iscrossSS(a, b, c, d)) return 0.0L;\n  res = min(res, distSP(a, b, c));\n  res = min(res, distSP(a, b, d));\n  res = min(res, distSP(c, d, a));\n  res = min(res, distSP(c, d, b));\n  return res;\n}\n\n// counter clockwise\nbool is_convex(const vector<CP> &pol) {\n  int n = pol.size();\n  for(int i = 0; i < n; ++i)\n    if(cross(pol[(i + 1) % n] - pol[i],\n             pol[(i + 2) % n] - pol[(i + 1) % n]) < -EPS)\n      return 0;\n  return 1;\n}\n\nvector<CP> convex_hull(vector<CP> &ps) {\n  auto lmd = [&](const CP &l, const CP &r) {\n    if(l.X != r.X) return l.X < r.X;\n    return l.Y < r.Y;\n  };\n  vector<CP> qs;\n  int psize = ps.size();\n  sort(ps.begin(), ps.end(), lmd);\n  int k = 0;\n  qs.resize(psize * 2);\n  for(int i = 0; i < psize; ++i) {\n    while(k > 1 && cross(qs[k - 1] - qs[k - 2],\n                         ps[i] - qs[k - 1]) <= 0)\n      --k;\n    qs[k++] = ps[i];\n  }\n  for(int i = psize - 2, t = k; i >= 0; --i) {\n    while(k > t && cross(qs[k - 1] - qs[k - 2],\n                         ps[i] - qs[k - 1]) <= 0)\n      --k;\n    qs[k++] = ps[i];\n  }\n  qs.resize(k - 1);\n  return qs;\n}\n\nlong double convex_diameter(vector<CP> &pol) {\n  vector<CP> v = pol;\n  v = convex_hull(v);\n  int n = v.size(), i = 0, j = 0;\n  if(n < 2) return 0.0L;\n  if(n == 2) return abs(v[0] - v[1]);\n  for(int k = 0; k < n; ++k) {\n    if(v[k].X < v[i].X) i = k;\n    if(v[k].X > v[j].X) j = k;\n  }\n  long double res = 0;\n  int si = i, sj = j;\n  while(i != sj || j != si) {\n    res = max(res, abs(v[i] - v[j]));\n    if(cross(v[(i + 1) % n] - v[i], v[(j + 1) % n] - v[j]) <\n       0)\n      (++i) %= n;\n    else\n      (++j) %= n;\n  }\n  return res;\n}\n\nvector<CP> convex_cut(const vector<CP> &pol, const CP &s,\n                      const CP &t) {\n  vector<CP> res;\n  int n = pol.size();\n  for(int i = 0; i < n; ++i) {\n    CP nows = pol[i], nowt = pol[(i + 1) % n];\n    if(cross(t - s, nows - s) >= -EPS) res.push_back(nows);\n    if(cross(t - s, nows - s) * cross(t - s, nowt - s) < 0)\n      res.push_back(intersectionLL(s, t, nows, nowt));\n  }\n  return res;\n}\n\nstruct Circle {\n  CP o;\n  long double r;\n  Circle(long double _x = 0.0L, long double _y = 0.0L,\n         long double _r = 0.0L)\n      : o(CP(_x, _y)), r(_r) {}\n  Circle(CP _o, long double _r = 0.0) : o(_o), r(_r) {}\n};\n\n// number of tangents\nint iscrossCC(Circle l, Circle r) {\n  long double distlr = abs(l.o - r.o);\n  if(distlr - (l.r + r.r) > EPS)\n    return 4; // not touch\n  else if(abs(distlr - (l.r + r.r)) <= EPS)\n    return 3; // circumscription\n  else if(max(l.r, r.r) - (distlr + min(l.r, r.r)) < -EPS)\n    return 2; // cross\n  else if(max(l.r, r.r) - (distlr + min(l.r, r.r)) <= EPS)\n    return 1; // inscribed\n  else        // contain\n    return 0;\n}\n\nvoid intersectionCC(Circle c1, Circle c2, CP &res1,\n                    CP &res2) {\n  long double d = abs(c1.o - c2.o);\n  long double arg = acos(costh(c2.r, c1.r, d));\n  res1 = (c2.o - c1.o) * CP(cos(arg), sin(arg));\n  res1 *= c1.r / abs(res1);\n  res1 += c1.o;\n  res2 = reflectionLP(c1.o, c2.o, res1);\n  if(res1.X > res2.X ||\n     (res1.X == res2.X && res1.Y > res2.Y))\n    swap(res1, res2);\n}\n\nvoid intersectionCL(Circle ci, CP s, CP t, CP &res1,\n                    CP &res2) {\n  res1 = res2 = projectionLP(s, t, ci.o);\n  long double r = sqrtl(ci.r * ci.r - norm(res1 - ci.o));\n  t -= s;\n  t *= r / abs(t);\n  res1 += t;\n  res2 -= t;\n  if(res1.X > res2.X ||\n     (res1.X == res2.X && res1.Y > res2.Y))\n    swap(res1, res2);\n}\n\nvoid contactCP(Circle ci, CP p, CP &res1, CP &res2) {\n  long double d = abs(ci.o - p);\n  if(abs(d - ci.r) <= EPS) {\n    res1 = res2 = p;\n    return;\n  }\n  else if(d < ci.r) {\n    res1 = res2 = CP(-1e18, -1e18);\n    return;\n  }\n  long double arg = asin(ci.r / d);\n  res1 = (ci.o - p) * CP(cos(arg), sin(arg));\n  res1 *= (d * cos(arg)) / abs(res1);\n  res1 += p;\n  res2 = reflectionLP(p, ci.o, res1);\n  if(res1.X > res2.X ||\n     (res1.X == res2.X && res1.Y > res2.Y))\n    swap(res1, res2);\n}\n\nlong double polygonarea(const vector<CP> &pol) {\n  int n = pol.size();\n  long double res = 0;\n  for(int i = 0; i < n; ++i)\n    res += (pol[(i - 1 + n) % n].X - pol[(i + 1) % n].X) *\n           pol[i].Y;\n  return res / 2.0L;\n}\n\nint containPolP(vector<CP> &pol, CP p) {\n  bool con = 0, onseg = 0;\n  int n = pol.size();\n  for(int i = 0; i < n; ++i) {\n    onseg |= on_segSP(pol[i], pol[(i + 1) % n], p);\n    CP s = pol[i] - p, t = pol[(i + 1) % n] - p;\n    if(s.Y > t.Y) swap(s, t);\n    if(s.Y * t.Y <= 0 && t.Y > 0 && cross(s, t) < 0)\n      con = !con;\n  }\n  if(onseg) return 1;\n  if(con) return 2;\n  return 0;\n}\n\nint main() {\n  long long a, b, c, d, e, f;\n  cin >> a >> b >> c >> d >> e >> f;\n  CP x(a, b), y(d, e);\n  cout << iscrossCC(Circle(x, c), Circle(y, f)) << endl;\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n#define ALL(x) x.begin(),x.end()\n#define rep(i,n) for(int i=0;i<(n);i++)\n#define debug(v) cout<<#v<<\":\";for(auto x:v){cout<<x<<' ';}cout<<endl;\n#define INF 1000000000\n#define mod 1000000007\nusing ll=long long;\nconst ll LINF=1001002003004005006ll;\nint dx[]={1,0,-1,0};\nint dy[]={0,1,0,-1};\nll gcd(ll a,ll b){return b?gcd(b,a%b):a;}\ntemplate<class T>bool chmax(T &a,const T &b){if(a<b){a=b;return true;}return false;}\ntemplate<class T>bool chmin(T &a,const T &b){if(b<a){a=b;return true;}return false;}\n\n//////////////////////////////////////////////////////\nusing Real=double;\nusing Point=complex<Real>;\nconst Real EPS=1e-10;\nconst Real pi=acosl(-1);\n//入出力補助\nistream &operator>>(istream &is,Point &p){\n    Real a,b;\n    is>>a>>b;\n    p=Point(a,b);\n    return is;\n}\nostream &operator<<(ostream &os,Point &p){\n    return os<<fixed<<setprecision(12)<<p.real()<<' '<<p.imag();\n}\n\ninline bool eq(Real a,Real b){\n    return fabs(a-b)<EPS;\n}\nPoint operator*(const Point &p,const Real &d){\n    return Point(real(p)*d,imag(p)*d);\n}\nstruct Line{\n    Point p1,p2;\n    Line(Point p1,Point p2):p1(p1),p2(p2){}\n \n    //Ax + By = C\n    Line(Real A,Real B,Real C){\n       if(eq(A,0))     p1=Point(0,C/B),p2=Point(1,C/B);\n       else if(eq(B,0))p1=Point(C/A,0),p2=Point(C/A,1);\n       else            p1=Point(0,C/B),p2=Point(C/A,0);\n    }\n};\nstruct Segment:Line{\n   Segment()=default;\n   Segment(Point p1,Point p2):Line(p1,p2){}\n};\nstruct Circle{\n    Point center;\n    Real r;\n    Circle(Point center,Real r):center(center),r(r){}\n};\n/////////////////////////////////////////////////////////\n\n \n// 点 p を反時計回りに theta 回転\nPoint rotate(Real theta,const Point &p) {\n    return Point(cos(theta)*p.real()-sin(theta)*p.imag(),sin(theta)*p.real()+cos(theta)*p.imag());\n}\n \nReal radian_to_degree(Real r){\n    return r*180.0/pi;\n}\n\nReal degree_to_radian(Real d){\n    return d*pi/180.0;\n}\n\n//三角形の面積，サラスの公式\nReal area_triangle(Point a,Point b,Point c){\n    Point x=b-a,y=c-a;\n    return fabs(x.real()*y.imag()-x.imag()*y.real())/2;\n}\n \n//v\n//外積\nReal cross(Point a,Point b){\n    return real(a)*imag(b)-imag(a)*real(b);\n}\n//v\n//内積\nReal dot(Point a,Point b) {\n    return real(a)*real(b)+imag(a)*imag(b);\n}\n \n//v\n//平行判定，外積0かをみる\nbool parallel(Line a,Line b){\n    return eq(cross(a.p1-a.p2,b.p1-b.p2),0.0);\n}\n//v\n//垂直判定，内積0かをみる\nbool orthogonal(Line a,Line b){\n    return eq(dot(a.p1-a.p2,b.p1-b.p2),0.0);\n}\n\n//v\n//正射影，pからlに下した垂線の足を求める\nPoint projection(Line l,Point p){\n    //ベクトルl上のどの位置に垂線の足が来るか求める\n    Real k=dot(l.p1-l.p2,p-l.p1)/norm(l.p1-l.p2);\n    return l.p1+(l.p1-l.p2)*k;\n}\nPoint projection(Segment l,Point p){\n    Real k=dot(l.p1-l.p2,p-l.p1)/norm(l.p1-l.p2);\n    return l.p1+(l.p1-l.p2)*k;\n}\n \n//v\n//反射，直線lに関し点pと線対称な点を返す\nPoint reflection(Line l,Point p){\n    Point h=projection(l,p);\n    return (p+(h-p)+(h-p));\n}\nPoint reflection(Segment l,Point p){\n    Point h=projection(l,p);\n    return (p+(h-p)+(h-p));\n}\n\n//二点間の距離\nReal dis(Point a,Point b){\n    return abs(a-b);\n} \n//点と直線の距離\nReal dis(Line l,Point p){\n    return abs(p-projection(l,p));\n}\n \n//v\n//COUNTER CLOCKWISE，返す値は↓を参照\n//https://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/all/CGL_1_C\nint ccw(Point a,Point b,Point c){\n    b-=a;c-=a;\n    if(cross(b,c)>EPS)       return  1;//COUNTER CLOCKWISE\n    else if(cross(b,c)<-EPS) return -1;//CLOCKWISE\n    else if(dot(b,c)<0)      return  2;//c--a--b ONLINE BACK\n    else if(norm(b)<norm(c)) return -2;//a--b--c ONLINE FRONT\n    else                     return  0;//a--c--b ON SEGMENT\n}\n \n//v\n//3点が作る三角形の外心\n//面積0の三角形を渡すと分母に面積があるので壊れるかも\nPoint circumcenter(Point A,Point B,Point C){\n    Real S=area_triangle(A,B,C);\n    Real a=dis(B,C),b=dis(A,C),c=dis(A,B);\n    return A*(a*a*(b*b+c*c-a*a)/(16*S*S))+B*(b*b*(c*c+a*a-b*b)/(16*S*S))+C*(c*c*(a*a+b*b-c*c)/(16*S*S));\n}\n \n//交差判定\n//直線状に乗るか\nbool intersect(Line l,Point p){\n    return abs(ccw(l.p1,l.p2,p))!=1;\n}\n//直線の交差判定，外積\nbool intersect(Line l1,Line l2){\n    return abs(cross(l1.p2-l1.p1,l2.p2-l2.p1))>EPS or\n        abs(cross(l1.p2-l1.p1,l2.p2-l1.p1))<EPS;\n}\n//線分に点が乗るかの判定，ccw\nbool intersect(Segment s,Point p){\n    return ccw(s.p1,s.p2,p)==0;\n}\n//直線と線分の交差判定\nbool intersect(Line l,Segment s){\n    return cross(l.p2-l.p1,s.p1-l.p1)*cross(l.p2-l.p1,s.p2-l.p1)<EPS;\n}\n//円と直線の交差判定\nbool intersect(Circle c,Line l){\n    return dis(l,c.center)<=c.r+EPS;\n}\n//円上かどうか，内部かどうかではない\nbool intersect(Circle c,Point p){\n    return abs(abs(p-c.center)-c.r)<EPS;\n}\n//v\n//線分と線分の交差判定\nbool intersect(Segment s,Segment t){\n    return ccw(s.p1,s.p2,t.p1)*ccw(s.p1,s.p2,t.p2) <=0 and\n        ccw(t.p1,t.p2,s.p1)*ccw(t.p1,t.p2,s.p2)<=0;\n}\n//線分と円の交差判定，交点の個数を返す\nint intersect(Circle c,Segment l){\n    Point h=projection(l,c.center);\n    //直線まるっと円の外側\n    if(norm(h-c.center)-c.r*c.r>EPS)    return 0;\n    Real d1=abs(c.center-l.p1),d2=abs(c.center-l.p2);\n    //線分が円内\n    if(d1<c.r+EPS and d2<c.r+EPS) return 0;\n    if((d1<c.r-EPS and d2>c.r+EPS) or (d2<c.r-EPS and d1>c.r+EPS)) return 1;\n    //円の外部にまるまるはみ出ていないか\n    if(dot(l.p1-h,l.p2-h)<0) return 2;\n    return 0;\n}\n//円と円の位置関係，共通接線の個数を返す\nint intersect(Circle c1,Circle c2){\n    if(c1.r<c2.r) swap(c1,c2);\n    Real d=abs(c1.center-c2.center);\n    //2円が離れている\n    if(c1.r+c2.r<d)     return 4;\n    //2円が外接する\n    if(eq(c1.r+c2.r,d)) return 3;\n    //2円が交わる\n    if(c1.r-c2.r<d)     return 2;\n    //円が内接する\n    if(eq(c1.r-c2.r,d)) return 1;\n    //内包\n                        return 0;\n}\n\n//交点\n//線分の交点はintersectをチェックしてokなら直線の交点をやる\n//intersectをチェックすること\n//v\nPoint crosspoint(Line l,Line m){\n    Real A=cross(m.p2-m.p1,m.p1-l.p1);\n    Real B=cross(m.p2-m.p1,l.p2-l.p1);\n    if(eq(A,0) and eq(B,0)) return l.p1;\n    if(eq(B,0))             throw \"NAI\";\n    return l.p1+A/B*(l.p2-l.p1);    \n}\nPoint crosspoint(Segment l,Segment m){\n    return crosspoint(Line(l),Line(m));\n}\nvector<Point> crosspoint(Circle c,Line l){\n    vector<Point> ret;\n    Point h=projection(l,c.center);\n    Real d=sqrt(c.r*c.r-norm(h-c.center));\n    Point e=(l.p2-l.p1)*(1/abs(l.p2-l.p1));\n    if(c.r*c.r+EPS<norm(h-c.center)) return ret;\n    if(eq(dis(l,c.center),c.r)){\n        ret.push_back(h);\n        return ret;\n    }\n    ret.push_back(h+e*d);ret.push_back(h-e*d);\n    return ret;\n}\n//要verify，\nvector<Point> crosspoint(Circle c,Segment s){\n    Line l=Line(s.p1,s.p2);\n    int ko=intersect(c,s);\n    if(ko==2) return crosspoint(c,l);\n    vector<Point> ret;\n    if(ko==0) return ret;\n    ret=crosspoint(c,l);\n    if(ret.size()==1) return ret;\n    vector<Point> rret;\n    //交点で挟める方を返す\n    if(dot(s.p1-ret[0],s.p2-ret[0])<0)  rret.push_back(ret[0]);\n    else                                rret.push_back(ret[1]);\n    return rret;\n}\nvector<Point> crosspoint(Circle c1,Circle c2){\n    vector<Point> ret;\n    int isec=intersect(c1,c2);\n    if(isec==0 or isec==4) return ret;\n    Real d=abs(c1.center-c2.center);\n    Real a=acos((c1.r*c1.r+d*d-c2.r*c2.r)/(2*c1.r*d));\n    Real t=atan2(c2.center.imag()-c1.center.imag(),c2.center.real()-c1.center.real());\n    ret.push_back(c1.center+Point(cos(t+a)*c1.r,sin(t+a)*c1.r));\n    ret.push_back(c1.center+Point(cos(t-a)*c1.r,sin(t-a)*c1.r));\n    return ret;\n}\n\n\n//v\n//最小包含円を返す　計算量は期待値O(n)\nCircle MinimumBoundingCircle(vector<Point> v){\n   int n=v.size();\n  \n   //ランダムシャッフル．いぢわるされたくないもんだ\n   mt19937 mt(time(0));\n   shuffle(v.begin(),v.end(),mt);\n \n   Circle ret(0,0);\n   //2点で円を作る\n   auto make_circle2=[&](Point a,Point b){\n       return Circle((a+b)*0.5,dis(a,b)/2);\n   };\n   //3点で円を作る\n   auto make_circle3=[&](Point A,Point B,Point C){\n       Point cent=circumcenter(A,B,C);\n       return Circle(cent,dis(cent,A));\n   };\n   auto isIn=[&](Point a){\n       return dis(ret.center,a)<ret.r+EPS;\n   };\n \n   ret=make_circle2(v[0],v[1]);\n   for(int i=2;i<n;i++){\n       //v[i]が円に入っていないなら\n       if(!isIn(v[i])){\n           //円内にないなら点v[i]は必ず円周上に来る\n           ret=make_circle2(v[0],v[i]);\n           for(int j=1;j<i;j++){\n               if(!isIn(v[j])){\n                   //この時iとjが円周上を考える\n                   ret=make_circle2(v[i],v[j]);\n                   //最後の1点の決定\n                   for(int k=0;k<j;k++){\n                       if(!isIn(v[k])){\n                           ret=make_circle3(v[i],v[j],v[k]);\n                       }\n                   }\n               }\n           }\n       }\n   }\n   return ret;\n}\n\n\nsigned main(){\n    cin.tie(0);\n    ios::sync_with_stdio(0);\n    cout<<fixed<<setprecision(12);\n\n    Point p1,p2;Real r1,r2;\n    cin>>p1>>r1>>p2>>r2;\n    cout<<intersect(Circle(p1,r1),Circle(p2,r2))<<endl;\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cmath>\n#include <algorithm>\n#include <vector>\nnamespace Random_Number{\n\tunsigned int seed = 19260817;\n\tvoid srnd(unsigned int x){ seed = x; }\n\tunsigned int rnd(){\n\t\treturn seed ^= seed << 19, seed ^= seed >> 7, seed ^= seed << 1;\n\t}\n}\nusing namespace Random_Number;\nnamespace Geometry{\n\tconst int COUNTER_CLOCKWISE = 1, CLOCKWISE = 2, ONLINE_BACK = 3, ONLINE_FRONT = 4, ON_SEGMENT = 5;\n\tconst double eps = 1e-9, pi = 3.14159265358979323846;\n\tbool equal(double a, double b){ return fabs(a - b) < eps; }\n\tstruct point{\n\t\tdouble x, y;\n\t\tpoint(){}\n\t\tpoint(double _x, double _y){ x = _x, y = _y; }\n\t\tpoint operator * (const double &la) const { return point(x * la, y * la); }\n\t\tpoint operator / (const double &la) const { return point(x / la, y / la); }\n\t\tpoint operator + (const point &rhs) const { return point(x + rhs.x, y + rhs.y); }\n\t\tpoint operator - (const point &rhs) const { return point(x - rhs.x, y - rhs.y); }\n\t\tbool operator < (const point &rhs) const { return x < rhs.x || (x == rhs.x && y < rhs.y); }\n\t\tbool operator > (const point &rhs) const { return x > rhs.x || (x == rhs.x && y > rhs.y); }\n\t\tbool operator == (const point &rhs) const { return equal(x, rhs.x) && equal(y, rhs.y); }\n\t\tdouble len2() const { return x * x + y * y; }\n\t\tdouble len() const { return sqrt(len2()); }\n\t\tpoint unit() const { return *this / len(); }\n\t\tpoint unit2() const { return *this / len2(); }\n\t\tfriend double distance(const point &a, const point &b){ return (a - b).len(); }\n\t\tfriend double distance2(const point &a, const point &b){ return (a - b).len2(); }\n\t\tfriend double dot(const point &a, const point &b){ return a.x * b.x + a.y * b.y; }\n\t\tfriend double cross(const point &a, const point &b){ return a.x * b.y - a.y * b.x; }\n\t\tvoid read(){ scanf(\"%lf%lf\", &x, &y); }\n\t\tvoid print(char ch = '\\n') const { printf(\"%.10lf %.10lf\", x, y), putchar(ch); }\n\t\tpoint rotation(double th) const { return point(x * cos(th) - y * sin(th), y * cos(th) + x * sin(th)); }\n\t\tfriend double angle(const point &a, const point &b){ return atan2(cross(a, b), dot(a, b)); }\n\t};\n\tstruct line{\n\t\tpoint a, b;\n\t\tline(){}\n\t\tline(point _a, point _b){ a = _a, b = _b; }\n\t\tvoid read(){ a.read(), b.read(); }\n\t\tvoid print(char ch1 = ' ', char ch2 = '\\n') const { a.print(ch1), b.print(ch2); }\n\t\tpoint projection(const point &p) const { return a + (b - a).unit2() * dot(p - a, b - a); }\n\t\tpoint reflection(const point &p) const { return projection(p) * 2 - p; }\n\t\tint direction(const point &p) const {\n\t\t\tdouble t = cross(b - a, p - a);\n\t\t\tif (t >= eps) return 1;\n\t\t\tif (t <= -eps) return 2;\n\t\t\tdouble l1 = dot(p - a, b - a), l2 = dot(b - a, b - a);\n\t\t\tif (l1 <= -eps) return 3;\n\t\t\tif (l1 > l2) return 4;\n\t\t\treturn 5;\n\t\t}\n\t\tfriend bool parallel(const line &a, const line &b){ return equal(cross(a.b - a.a, b.b - b.a), 0); }\n\t\tfriend bool orthogonal(const line &a, const line &b){ return equal(dot(a.b - a.a, b.b - b.a), 0); }\n\t\tfriend std :: vector<point> line_cross_point(const line &a, const line &b){\n\t\t\tif (parallel(a, b)) return {};\n\t\t\tpoint u = a.a - b.a, v = a.b - a.a, w = b.b - b.a;\n\t\t\treturn {a.a + v * (cross(w, u) / cross(v, w))};\n\t\t}\n\t\tfriend bool segment_intersection(const line &a, const line &b){\n\t\t\tif (std :: min(a.a.x, a.b.x) >= std :: max(b.a.x, b.b.x) + eps) return 0;\n\t\t\tif (std :: min(b.a.x, b.b.x) >= std :: max(a.a.x, a.b.x) + eps) return 0;\n\t\t\tif (std :: min(a.a.y, a.b.y) >= std :: max(b.a.y, b.b.y) + eps) return 0;\n\t\t\tif (std :: min(b.a.y, b.b.y) >= std :: max(a.a.y, a.b.y) + eps) return 0;\n\t\t\tdouble t1, t2;\n\t\t\tt1 = cross(b.a - a.a, a.b - a.a), t2 = cross(b.b - a.a, a.b - a.a);\n\t\t\tif ((t1 >= eps && t2 >= eps) || (t1 <= -eps && t2 <= -eps)) return 0;\n\t\t\tt1 = cross(a.a - b.a, b.b - b.a), t2 = cross(a.b - b.a, b.b - b.a);\n\t\t\tif ((t1 >= eps && t2 >= eps) || (t1 <= -eps && t2 <= -eps)) return 0;\n\t\t\treturn 1;\n\t\t}\n\t\tfriend double distance_ps(const point &p, const line &l){\n\t\t\tdouble l1 = dot(p - l.a, l.b - l.a), l2 = dot(l.b - l.a, l.b - l.a);\n\t\t\tif (l1 > l2) return distance(p, l.b);\n\t\t\tif (l1 < 0) return distance(p, l.a);\n\t\t\treturn fabs(cross(l.b - l.a, p - l.a)) / distance(l.a, l.b);\n\t\t}\n\t\tfriend double distance_ss(const line &a, const line &b){\n\t\t\tif (segment_intersection(a, b)) return 0;\n\t\t\treturn std :: min(std :: min(distance_ps(a.a, b), distance_ps(a.b, b)), \n\t\t\tstd :: min(distance_ps(b.a, a), distance_ps(b.b, a)));\n\t\t}\n\t};\n\tstruct polygon{\n\t\tstd :: vector<point> g;\n\t\tpolygon(){}\n\t\tpolygon(int n){ g.resize(n); }\n\t\tpolygon(const std :: vector<point> &_g){ g = _g; }\n\t\tvoid read(){\n\t\t\tint n;\n\t\t\tscanf(\"%d\", &n), g.resize(n);\n\t\t\tfor (register int i = 0; i < n; ++i) g[i].read();\n\t\t}\n\t\tvoid print(){\n\t\t\tprintf(\"%d\\n\", g.size());\n\t\t\tfor (register int i = 0; i < g.size(); ++i) g[i].print();\n\t\t}\n\t\tvoid clear(){ g.clear(); }\n\t\tvoid resize(int n){ g.resize(n); }\n\t\tint size() const { return g.size(); }\n\t\tvoid push_back(point x){ return g.push_back(x); }\n\t\tvoid pop_back(){ g.pop_back(); }\n\t\tpoint& operator [] (int x){ return g[x]; }\n\t\tconst point& operator [] (int x) const { return g[x]; }\n\t\tdouble directed_area() const {\n\t\t\tint n = g.size();\n\t\t\tdouble s = 0;\n\t\t\tfor (register int i = 0; i < n; ++i) s += cross(g[i], g[(i + 1) % n]);\n\t\t\treturn s / 2;\n\t\t}\n\t\tbool is_convex() const {\n\t\t\tint n = g.size();\n\t\t\tfor (register int i = 0; i < n; ++i)\n\t\t\t\tif (cross(g[(i + 1) % n] - g[i], g[(i - 1 + n) % n] - g[i]) <= -eps) return 0;\n\t\t\treturn 1;\n\t\t}\n\t\tint point_containment(const point &a) const {\n\t\t\tdouble k = sqrt(1.0 * rnd() / rnd());\n\t\t\tline l = line(a, point(a.x + 1e9, a.y + 1e9 * k));\n\t\t\tint n = g.size(), s = 0;\n\t\t\tfor (register int i = 0; i < n - 1; ++i)\n\t\t\t\tif (line(g[i], g[i + 1]).direction(a) == 5) return 1;\n\t\t\tif (line(g[n - 1], g[0]).direction(a) == 5) return 1;\n\t\t\tfor (register int i = 0; i < n - 1; ++i)\n\t\t\t\tif (segment_intersection(l, line(g[i], g[i + 1]))) ++s;\n\t\t\tif (segment_intersection(l, line(g[n - 1], g[0]))) ++s;\n\t\t\tif (s & 1) return 2; else return 0;\n\t\t}\n\t\tvoid convex_hull(std :: vector<point> f){\n\t\t\tg.clear();\n\t\t\tint n = f.size();\n\t\t\tstd :: sort(f.begin(), f.end());\n\t\t\tstd :: vector<point> p;\n\t\t\tp.push_back(f[0]);\n\t\t\tfor (register int i = 1; i < n; ++i){\n\t\t\t\twhile (p.size() > 1 && cross(f[i] - p.back(), *(++p.rbegin()) - p.back()) <= -eps)\n\t\t\t\t\tp.pop_back();\n\t\t\t\tp.push_back(f[i]);\n\t\t\t}\n\t\t\tfor (register int i = 0; i < p.size() - 1; ++i) g.push_back(p[i]);\n\t\t\tstd :: reverse(f.begin(), f.end());\n\t\t\tp.clear(), p.push_back(f[0]);\n\t\t\tfor (register int i = 1; i < n; ++i){\n\t\t\t\twhile (p.size() > 1 && cross(f[i] - p.back(), *(++p.rbegin()) - p.back()) <= -eps)\n\t\t\t\t\tp.pop_back();\n\t\t\t\tp.push_back(f[i]);\n\t\t\t}\n\t\t\tfor (register int i = 0; i < p.size() - 1; ++i) g.push_back(p[i]);\n\t\t\tf = g, n = f.size(), g.clear();\n\t\t\tint t = 0;\n\t\t\tfor (register int i = 1; i < n; ++i)\n\t\t\t\tif (f[i].y < f[t].y || (f[i].y == f[t].y && f[i].x < f[t].x)) t = i;\n\t\t\tfor (register int i = t; i < n; ++i) g.push_back(f[i]);\n\t\t\tfor (register int i = 0; i < t; ++i) g.push_back(f[i]);\n\t\t}\n\t\tdouble convex_diamater() const {\n\t\t\tint n = g.size();\n\t\t\tdouble ans = 0;\n\t\t\tfor (register int i = 0, j = 0; i < n; ++i){\n\t\t\t\twhile (cross(g[i] - g[j], g[(i + 1) % n] - g[j])\n\t\t\t\t  < cross(g[i] - g[(j + 1) % n], g[(i + 1) % n] - g[(j + 1) % n]) + eps)\n\t\t\t\t\tj = (j + 1) % n;\n\t\t\t\tans = std :: max(ans, distance(g[j], g[i]));\n\t\t\t\tans = std :: max(ans, distance(g[j], g[(i + 1) % n]));\n\t\t\t}\n\t\t\treturn ans;\n\t\t}\n\t\tpolygon convex_cut(const line &l) const {\n\t\t\tpolygon res;\n\t\t\tint n = g.size();\n\t\t\tfor (register int i = 0; i < g.size(); ++i){\n\t\t\t\tpoint u = g[i], v = g[(i + 1) % n];\n\t\t\t\tif (cross(l.b - l.a, u - l.a) > -eps){\n\t\t\t\t\tres.push_back(u);\n\t\t\t\t\tif (cross(l.b - l.a, v - l.a) <= -eps) res.push_back(line_cross_point(line(u, v), l)[0]);\n\t\t\t\t}\n\t\t\t\telse if (cross(l.b - l.a, v - l.a) >= eps) res.push_back(line_cross_point(line(u, v), l)[0]);\n\t\t\t}\n\t\t\treturn res;\n\t\t}\n\t};\n\tstruct circle{\n\t\tpoint o;\n\t\tdouble r;\n\t\tcircle(){}\n\t\tcircle(point _o, double _r){ o = _o, r = _r; }\n\t\tvoid read(){ o.read(), scanf(\"%lf\", &r); }\n\t\tvoid print(char ch = '\\n') const { printf(\"%.10lf %.10lf %.10lf\", o.x, o.y, r), putchar(ch); }\n\t\tint circle_intersection(const circle &c) const {\n\t\t\tdouble d = distance(o, c.o);\n\t\t\tif (d >= r + c.r + eps) return 4;\n\t\t\tif (equal(d, r + c.r)) return 3;\n\t\t\tif (d >= fabs(r - c.r) + eps) return 2;\n\t\t\tif (equal(d, fabs(r - c.r))) return 1;\n\t\t\treturn 0;\n\t\t}\n\t\tstd :: vector<point> directed_line_cross_point(const line &l) const {\n\t\t\tpoint p = line(l.a, l.b).projection(o), v = (l.b - l.a).unit();\n\t\t\tdouble d = distance(p, o);\n\t\t\tif (d >= r + eps) return {};\n\t\t\tdouble t = sqrt(r * r - (p - o).len2());\n\t\t\tif (equal(t, 0)) return {p};\n\t\t\telse return {p - v * t, p + v * t};\n\t\t}\n\t\tstd :: vector<point> circle_cross_point(const circle &c) const {\n\t\t\tdouble d = distance(o, c.o);\n\t\t\tif (d <= fabs(r - c.r) - eps || d >= r + c.r + eps) return {};\n\t\t\tdouble x = (r * r - c.r * c.r + d * d) / (d * 2), h = sqrt(r * r - x * x);\n\t\t\tpoint p = (c.o - o).unit() * x, v = (c.o - o).unit().rotation(pi / 2) * h;\n\t\t\tif (v == point(0, 0)) return {p}; else return {p - v, p + v};\n\t\t}\n\t\tstd :: vector<point> tangent(const point &p) const {\n\t\t\tdouble d = distance(o, p);\n\t\t\tif (d <= r - eps) return {};\n\t\t\tif (equal(d, r)) return {p};\n\t\t\treturn circle_cross_point(circle(p, sqrt(d * d - r * r)));\n\t\t}\n\t\tstd :: vector<point> common_tangent_out(const circle &c) const {\n\t\t\tif (equal(r, c.r)){\n\t\t\t\tpoint p = (c.o - o).unit().rotation(pi / 2) * r;\n\t\t\t\treturn {o - p, o + p};\n\t\t\t}\n\t\t\tpoint p = (o * c.r - c.o * r) / (c.r - r);\n\t\t\treturn tangent(p);\n\t\t}\n\t\tstd :: vector<point> common_intangent_in(const circle &c) const {\n\t\t\tpoint p = (o * c.r + c.o * r) / (r + c.r);\n\t\t\treturn tangent(p);\n\t\t}\n\t\tdouble directed_triangle_intersection(const point &a, const point &b) const {\n\t\t\tbool ta = a.x * a.x + a.y * a.y < r * r + eps, tb = b.x * b.x + b.y * b.y < r * r + eps;\n\t\t\tstd :: vector<point> t = circle(point(0, 0), r).directed_line_cross_point(line(b, a));\n\t\t\tif (ta == 1 && tb == 1) return cross(a, b) / 2;\n\t\t\tif (ta == 1 && tb == 0) return angle(t.front(), b) * r * r / 2 + cross(a, t.front()) / 2;\n\t\t\tif (ta == 0 && tb == 1) return angle(a, t.back()) * r * r / 2 + cross(t.back(), b) / 2;\n\t\t\tdouble s = angle(a, b) * r * r / 2;\n\t\t\tif (distance_ps(point(0, 0), line(a, b)) > r - eps) return s;\n\t\t\treturn s + angle(t.front(), t.back()) * r * r / 2 - cross(t.front(), t.back()) / 2;\n\t\t}\n\t\tdouble directed_polygon_intersection(const polygon &g) const {\n\t\t\tint n = g.size();\n\t\t\tdouble s = 0;\n\t\t\tfor (register int i = 0; i < n; ++i)\n\t\t\t\ts += directed_triangle_intersection(g[i] - o, g[(i + 1) % n] - o);\n\t\t\treturn s;\n\t\t}\n\t};\n}\nusing namespace Geometry;\npoint p, t;\nline l, m;\npolygon g;\ncircle c, d;\nstd :: vector<point> v, res;\nint n, q;\ndouble r;\nvoid CGL_1_A(){\n\tl.read(), scanf(\"%d\", &q);\n\twhile (q--) p.read(), l.projection(p).print();\n}\nvoid CGL_1_B(){\n\tl.read(), scanf(\"%d\", &q);\n\twhile (q--) p.read(), l.reflection(p).print();\n}\nvoid CGL_1_C(){\n\tl.read(), scanf(\"%d\", &q);\n\twhile (q--){\n\t\tp.read();\n\t\tint t = l.direction(p);\n\t\tif (t == COUNTER_CLOCKWISE) puts(\"COUNTER_CLOCKWISE\");\n\t\tif (t == CLOCKWISE) puts(\"CLOCKWISE\");\n\t\tif (t == ONLINE_BACK) puts(\"ONLINE_BACK\");\n\t\tif (t == ONLINE_FRONT) puts(\"ONLINE_FRONT\");\n\t\tif (t == ON_SEGMENT) puts(\"ON_SEGMENT\");\n\t}\n}\nvoid CGL_2_A(){\n\tscanf(\"%d\", &q);\n\twhile (q--){\n\t\tl.read(), m.read();\n\t\tif (parallel(l, m)) puts(\"2\");\n\t\telse if (orthogonal(l, m)) puts(\"1\");\n\t\telse puts(\"0\");\n\t}\n}\nvoid CGL_2_B(){\n\tscanf(\"%d\", &q);\n\twhile (q--){\n\t\tl.read(), m.read();\n\t\tif (segment_intersection(l, m)) puts(\"1\");\n\t\telse puts(\"0\");\n\t}\n}\nvoid CGL_2_C(){\n\tscanf(\"%d\", &q);\n\twhile (q--){\n\t\tl.read(), m.read();\n\t\tline_cross_point(l, m)[0].print();\n\t}\n}\nvoid CGL_2_D(){\n\tscanf(\"%d\", &q);\n\twhile (q--){\n\t\tl.read(), m.read();\n\t\tprintf(\"%.10lf\\n\", distance_ss(l, m));\n\t}\n}\nvoid CGL_3_A(){\n\tg.read(), printf(\"%.1lf\\n\", g.directed_area());\n}\nvoid CGL_3_B(){\n\tg.read(), printf(\"%d\\n\", g.is_convex());\n}\nvoid CGL_3_C(){\n\tg.read();\n\tscanf(\"%d\", &q);\n\twhile (q--){\n\t\tp.read();\n\t\tprintf(\"%d\\n\", g.point_containment(p));\n\t}\n}\nvoid CGL_4_A(){\n\tscanf(\"%d\", &n), v.resize(n);\n\tfor (register int i = 0; i < n; ++i) v[i].read();\n\tg.convex_hull(v);\n\tprintf(\"%d\\n\", g.size());\n\tfor (register int i = 0; i < g.size(); ++i) printf(\"%d %d\\n\", int(g[i].x), int(g[i].y));\n}\nvoid CGL_4_B(){\n\tg.read(), printf(\"%.10lf\\n\", g.convex_diamater());\n}\nvoid CGL_4_C(){\n\tg.read();\n\tscanf(\"%d\", &q);\n\twhile (q--){\n\t\tl.read();\n\t\tprintf(\"%.10lf\\n\", g.convex_cut(l).directed_area());\n\t}\n}\nvoid CGL_7_A(){\n\tc.read(), d.read(), printf(\"%d\\n\", c.circle_intersection(d));\n}\nvoid CGL_7_H(){\n\tint n;\n\tdouble r;\n\tscanf(\"%d%lf\", &n, &r);\n\tpolygon g(n);\n\tfor (register int i = 0; i < n; ++i) g[i].read();\n\tprintf(\"%.10lf\\n\", fabs(circle(point(0, 0), r).directed_polygon_intersection(g)));\n}\nint main(){\n\tCGL_7_A();\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\n\nusing namespace std;\n\ntemplate <typename T>\nvoid printv(const vector<T> &v)\n{\n    int sz = v.size();\n    for (int i = 0; i < sz; i++)\n    {\n        cout << v[i] << \" \\n\"[i == sz - 1];\n    }\n}\n\nusing ld = long double;\nusing Point = std::complex<ld>;\n\nconst ld eps = 1e-9, pi = acos(-1.0);\n\nnamespace std\n{\nbool operator<(const Point &lhs, const Point &rhs)\n{\n    if (lhs.real() < rhs.real() - eps)\n        return true;\n    if (lhs.real() > rhs.real() + eps)\n        return false;\n    return lhs.imag() < rhs.imag();\n}\n} // namespace std\n\nPoint input_point()\n{\n    ld x, y;\n    std::cin >> x >> y;\n    return Point(x, y);\n}\n\nbool eq(ld a, ld b)\n{\n    return (abs(a - b) < eps);\n}\n\nld dot(Point a, Point b)\n{\n    return real(conj(a) * b);\n}\n\nld cross(Point a, Point b)\n{\n    return imag(conj(a) * b);\n}\n\n// CCW::counter clockwise\nint ccw(Point a, Point b, Point c)\n{\n    b -= a;\n    c -= a;\n    if (cross(b, c) > eps)\n        return 1; // a,b,c : counter-clockwise\n    if (cross(b, c) < -eps)\n        return -1; // a,b,c : clockwise\n    if (dot(b, c) < 0)\n        return 2; // c,a,b : on a line\n    if (norm(b) < norm(c))\n        return -2; // a,b,c : on a line\n    return 0;      // a,c,b : on a line\n}\n\nclass Line\n{\npublic:\n    Point a, b;\n    Line() : a(Point(0, 0)), b(Point(0, 0)) {}\n    Line(Point a, Point b) : a(a), b(b) {}\n};\n\nld dot(Line l, Line m)\n{\n    return dot((l.a - l.b), (m.a - m.b));\n}\n\nclass Circle\n{\npublic:\n    Point p;\n    ld r;\n    Circle() : p(Point(0, 0)), r(0) {}\n    Circle(Point p, ld r) : p(p), r(r) {}\n};\n\n// l:line, m:line が交点を持つか\nbool isis_ll(Line l, Line m)\n{\n    return !eq(cross(l.b - l.a, m.b - m.a), 0);\n}\n\n// l:line, s:segment\nbool isis_ls(Line l, Line s)\n{\n    return isis_ll(l, s) &&\n           (cross(l.b - l.a, s.a - l.a) * cross(l.b - l.a, s.b - l.a) < eps);\n}\n\n// s:segment, t:segment\nbool isis_ss(Line s, Line t)\n{\n    return ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 &&\n           ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0;\n}\n\n// p が l:line 上に存在するか\nbool isis_lp(Line l, Point p)\n{\n    return (abs(cross(l.b - p, l.a - p)) < eps);\n}\n\nbool isis_sp(Line s, Point p)\n{\n    return (abs(s.a - p) + abs(s.b - p) - abs(s.b - s.a) < eps);\n}\n\n// p から l に下ろした足との交点\nPoint proj(Line l, Point p)\n{\n    ld t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n    return l.a + t * (l.a - l.b);\n}\n\n// l:line, t:line の交点\nPoint is_ll(Line l, Line m)\n{\n    Point lv = l.b - l.a, mv = m.b - m.a;\n    assert(cross(lv, mv) != 0);\n    return l.a + lv * cross(mv, m.a - l.a) / cross(mv, lv);\n}\n\n// p, l:line の距離\nld dist_lp(Line l, Point p)\n{\n    return abs(p - proj(l, p));\n}\n\nld dist_ll(Line l, Line m)\n{\n    return isis_ll(l, m) ? 0 : dist_lp(l, m.a);\n}\n\nld dist_ls(Line l, Line s)\n{\n    return isis_ls(l, s) ? 0 : std::min(dist_lp(l, s.a), dist_lp(l, s.b));\n}\n\nld dist_sp(Line s, Point p)\n{\n    Point r = proj(s, p);\n    return isis_sp(s, r) ? abs(r - p) : std::min(abs(s.a - p), abs(s.b - p));\n}\n\nld dist_ss(Line s, Line t)\n{\n    if (isis_ss(s, t))\n        return 0;\n    return std::min({dist_sp(s, t.a), dist_sp(s, t.b), dist_sp(t, s.a), dist_sp(t, s.b)});\n}\n\n// a, b の垂直二等分線. a -> b を90度反時計回り回転\nLine bisector(Point a, Point b)\n{\n    Point mid = (a + b) * Point(0.5, 0);\n    return Line(mid, mid + (b - a) * Point(0, pi / 2));\n}\n\n// 直線 l, m のなす角を求める\nld degree_ll(Line l, Line m)\n{\n    ld cos_shita = dot(l, m) / (abs(l.b - l.a) * abs(m.b - m.a));\n    if (cos_shita < -1.0)\n        cos_shita = -1.0;\n    if (cos_shita > 1.0)\n        cos_shita = 1.0;\n    ld shita = acos(cos_shita);\n    // shita = sita * 180.0 / PI;\n    return shita;\n}\n\n// c1, c2 の交点\nstd::vector<Point> is_cc(Circle c1, Circle c2)\n{\n    std::vector<Point> res;\n    ld d = abs(c1.p - c2.p);\n    ld rc = (d * d + c1.r * c1.r - c2.r * c2.r) / (2 * d);\n    ld dfr = c1.r * c1.r - rc * rc;\n    if (abs(dfr) < eps)\n        dfr = 0.0;\n    else if (dfr < 0.0)\n        return res; // no intersection\n    ld rs = sqrt(dfr);\n    Point diff = (c2.p - c1.p) / d;\n    res.emplace_back(c1.p + diff * Point(rc, rs));\n    if (dfr != 0.0)\n        res.emplace_back(c1.p + diff * Point(rc, -rs));\n    return res;\n}\n\nstd::vector<Point> is_lc(Circle c, Line l)\n{\n    std::vector<Point> res;\n    ld d = dist_lp(l, c.p);\n    if (d < c.r + eps)\n    {\n        ld len = (d > c.r) ? 0.0 : sqrt(c.r * c.r - d * d); //safety;\n        Point nor = (l.a - l.b) / abs(l.a - l.b);\n        res.emplace_back(proj(l, c.p) + len * nor);\n        res.emplace_back(proj(l, c.p) - len * nor);\n    }\n    return res;\n}\n\nstd::vector<Point> is_sc(Circle c, Line l)\n{\n    std::vector<Point> v = is_lc(c, l), res;\n    for (Point p : v)\n        if (isis_sp(l, p))\n            res.emplace_back(p);\n    return res;\n}\n\n// p から c への接線\nstd::vector<Line> tangent_cp(Circle c, Point p)\n{\n    std::vector<Line> ret;\n    Point v = c.p - p;\n    ld d = abs(v);\n    ld l = sqrt(norm(v) - c.r * c.r);\n    if (std::isnan(l))\n    {\n        return ret;\n    }\n    Point v1 = v * Point(l / d, c.r / d);\n    Point v2 = v * Point(l / d, -c.r / d);\n    ret.emplace_back(Line(p, p + v1));\n    if (l < eps)\n        return ret;\n    ret.emplace_back(Line(p, p + v2));\n    return ret;\n}\n\n// c1, c2 の共通接線\nstd::vector<Line> tangent_cc(Circle c1, Circle c2)\n{\n    std::vector<Line> ret;\n    if (abs(c1.p - c2.p) - (c1.r + c2.r) > -eps)\n    {\n        Point center = (c1.p * c2.r + c2.p * c1.r) / (c1.r + c2.r);\n        ret = tangent_cp(c1, center);\n    }\n    if (abs(c1.r - c2.r) > eps)\n    {\n        Point out = (-c1.p * c2.r + c2.p * c1.r) / (c1.r - c2.r);\n        std::vector<Line> nret = tangent_cp(c1, out);\n        ret.insert(ret.end(), nret.begin(), nret.end());\n    }\n    else\n    {\n        Point v = c2.p - c1.p;\n        v /= abs(v);\n        Point q1 = c1.p + v * Point(0, 1) * c1.r;\n        Point q2 = c1.p + v * Point(0, -1) * c1.r;\n        ret.emplace_back(Line(q1, q1 + v));\n        ret.emplace_back(Line(q2, q2 + v));\n    }\n    return ret;\n}\n\nusing Polygon = std::vector<Point>;\n\nld area(const Polygon &p)\n{\n    ld res = 0;\n    int n = p.size();\n    for (int i = 0; i < n; i++)\n    {\n        res += cross(p[i], p[(i + 1) % n]);\n    }\n    return res / 2;\n}\n\nbool is_counter_clockwise(const Polygon &poly)\n{\n    ld angle = 0;\n    int n = poly.size();\n    for (int i = 0; i < n; i++)\n    {\n        Point a = poly[i], b = poly[(i + 1) % n], c = poly[(i + 2) % n];\n        angle += arg((c - b) / (b - a));\n    }\n    return angle > eps;\n}\n\n// 0 => out\n// 1 => on\n// 2 => in\nint is_in_polygon(const Polygon &poly, Point p)\n{\n    ld angle = 0;\n    int n = poly.size();\n    for (int i = 0; i < n; i++)\n    {\n        Point a = poly[i], b = poly[(i + 1) % n];\n        if (isis_sp(Line(a, b), p))\n            return 1;\n        angle += arg((b - p) / (a - p));\n    }\n    return eq(angle, 0) ? 0 : 2;\n}\n\n// 凸包\nPolygon convex_hull(std::vector<Point> ps)\n{\n    int n = ps.size();\n    int k = 0;\n    sort(ps.begin(), ps.end());\n    Polygon ch(2 * n);\n    for (int i = 0; i < n; ch[k++] = ps[i++])\n        while (k >= 2 && ccw(ch[k - 2], ch[k - 1], ps[i]) <= 0)\n            --k;\n    for (int i = n - 2, t = k + 1; i >= 0; ch[k++] = ps[i--])\n        while (k >= t && ccw(ch[k - 2], ch[k - 1], ps[i]) <= 0)\n            --k;\n    ch.resize(k - 1);\n    return ch;\n}\n\n// 凸包カット\nPolygon convex_cut(const Polygon &ps, Line l)\n{\n    int n = ps.size();\n    Polygon Q;\n    for (int i = 0; i < n; i++)\n    {\n        Point A = ps[i], B = ps[(i + 1) % n];\n        Line m = Line(A, B);\n        if (ccw(l.a, l.b, A) != -1)\n            Q.emplace_back(A);\n        if (ccw(l.a, l.b, A) * ccw(l.a, l.b, B) < 0 && isis_ll(l, m))\n            Q.emplace_back(is_ll(l, m));\n    }\n    return Q;\n}\n\nvoid add_point(std::vector<Point> &ps, Point p)\n{\n    for (Point q : ps)\n        if (abs(q - p) < eps)\n            return;\n    ps.emplace_back(p);\n}\n\n// Voronoi 図: http://judge.u-aizu.ac.jp/onlinejudge/review.jsp?rid=3668810\n// polygon を ps でボロノイ分割する時の ps[index] に割り当てられる多角形\nPolygon voronoi(const Polygon &polygon, const std::vector<Point> &ps, int index)\n{\n    Polygon p = polygon;\n    int n = ps.size();\n    for (int j = 0; j < n; j++)\n    {\n        if (index == j)\n            continue;\n        Line l = bisector(ps[index], ps[j]);\n        p = convex_cut(p, l);\n    }\n    return p;\n}\n\nvoid solve_cgl_1_a()\n{\n    auto p1 = input_point(), p2 = input_point();\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        auto p = input_point();\n        auto ret = proj(Line(p1, p2), p);\n        cout << fixed << setprecision(10) << ret.real() << \" \" << ret.imag() << endl;\n    }\n}\n\nvoid solve_cgl_1_b()\n{\n    auto p1 = input_point(), p2 = input_point();\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        auto p = input_point();\n        auto ret = proj(Line(p1, p2), p);\n        cout << fixed << setprecision(10) << 2 * ret.real() - p.real() << \" \" << 2 * ret.imag() - p.imag() << endl;\n    }\n}\n\nvoid solve_cgl_1_c()\n{\n    auto p0 = input_point(), p1 = input_point();\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        auto p2 = input_point();\n        int ret = ccw(p0, p1, p2);\n        if (ret == 1)\n            cout << \"COUNTER_CLOCKWISE\" << endl;\n        else if (ret == -1)\n            cout << \"CLOCKWISE\" << endl;\n        else if (ret == 2)\n            cout << \"ONLINE_BACK\" << endl;\n        else if (ret == -2)\n            cout << \"ONLINE_FRONT\" << endl;\n        else\n            cout << \"ON_SEGMENT\" << endl;\n    }\n}\n\nvoid solve_cgl_2_a()\n{\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        auto p0 = input_point(), p1 = input_point(), p2 = input_point(), p3 = input_point();\n        Line l(p0, p1), m(p2, p3);\n        if (!isis_ll(l, m))\n        {\n            cout << 2 << endl;\n        }\n        else if (eq(dot(l.b - l.a, m.b - m.a), 0))\n        {\n            cout << 1 << endl;\n        }\n        else\n        {\n            cout << 0 << endl;\n        }\n    }\n}\n\nvoid solve_cgl_2_b()\n{\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        auto p0 = input_point(), p1 = input_point(), p2 = input_point(), p3 = input_point();\n        Line s1(p0, p1), s2(p2, p3);\n        cout << (isis_ss(s1, s2) ? 1 : 0) << endl;\n    }\n}\n\nvoid solve_cgl_2_c()\n{\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        auto p0 = input_point(), p1 = input_point(), p2 = input_point(), p3 = input_point();\n        Line s1(p0, p1), s2(p2, p3);\n        auto ret = is_ll(s1, s2);\n        cout << fixed << setprecision(10) << ret.real() << \" \" << ret.imag() << endl;\n    }\n}\n\nvoid solve_cgl_2_d()\n{\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        auto p0 = input_point(), p1 = input_point(), p2 = input_point(), p3 = input_point();\n        Line s1(p0, p1), s2(p2, p3);\n        cout << fixed << setprecision(10) << dist_ss(s1, s2) << endl;\n    }\n}\n\nvoid solve_cgl_3_a()\n{\n    Polygon p;\n    int n;\n    cin >> n;\n    for (int i = 0; i < n; i++)\n    {\n        p.push_back(input_point());\n    }\n    cout << fixed << setprecision(10) << area(p) << endl;\n}\n\nvoid solve_cgl_3_b()\n{\n    Polygon p;\n    int n;\n    cin >> n;\n    for (int i = 0; i < n; i++)\n    {\n        p.push_back(input_point());\n    }\n    auto cv = convex_hull(p);\n    cout << (eq(area(p), area(cv)) ? 1 : 0) << endl;\n}\n\nvoid solve_cgl_3_c()\n{\n    Polygon ps;\n    int n;\n    cin >> n;\n    for (int i = 0; i < n; i++)\n    {\n        ps.push_back(input_point());\n    }\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        auto p = input_point();\n        int ret = is_in_polygon(ps, p);\n        cout << ret << endl;\n    }\n}\n\nvoid solve_cgl_4_a()\n{\n    int n;\n    cin >> n;\n    Polygon ps;\n    for (int i = 0; i < n; i++)\n    {\n        ps.push_back(input_point());\n    }\n    auto ret = convex_hull(ps);\n    cout << ret.size() << endl;\n    for (auto p : ret)\n    {\n        cout << (int)p.real() << \" \" << (int)p.imag() << endl;\n    }\n}\n\n// cgl_4_b: 凸多角形の直径\n\nvoid solve_cgl_4_c()\n{\n    int n;\n    cin >> n;\n    Polygon ps;\n    for (int i = 0; i < n; i++)\n    {\n        ps.push_back(input_point());\n    }\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        auto p0 = input_point(), p1 = input_point();\n        auto l = Line(p0, p1);\n        auto ret = convex_cut(ps, l);\n        cout << fixed << setprecision(10) << area(ret) << endl;\n    }\n}\n\n// cgl_5_a: 最近点対\n\n// cgl_6_a: 線分交差\n\nvoid solve_cgl_7_a()\n{\n    auto p0 = input_point();\n    ld r0, r1;\n    cin >> r0;\n    auto p1 = input_point();\n    cin >> r1;\n    Circle c0(p0, r0), c1(p1, r1);\n    auto ls = tangent_cc(c0, c1);\n    cout << ls.size() << endl;\n}\n\nvoid solve_cgl_7_d()\n{\n    auto p = input_point();\n    ld r;\n    cin >> r;\n    Circle c(p, r);\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        auto p0 = input_point(), p1 = input_point();\n        Line l(p0, p1);\n        auto ret = is_lc(c, l);\n        assert(ret.size() <= 2);\n        sort(ret.begin(), ret.end());\n        cout << ret[0].real() << \" \" << ret[0].imag();\n        if (ret.size() == 2)\n        {\n            cout << \" \" << ret[1].real() << \" \" << ret[1].imag();\n        }\n        cout << endl;\n    }\n}\n\nvoid solve_cgl_7_e()\n{\n    auto p0 = input_point();\n    ld r0, r1;\n    cin >> r0;\n    auto p1 = input_point();\n    cin >> r1;\n    Circle c0(p0, r0), c1(p1, r1);\n    auto ret = is_cc(c0, c1);\n    if ((int)ret.size() == 1)\n        ret.push_back(ret[0]);\n    sort(ret.begin(), ret.end());\n    cout << ret[0].real() << \" \" << ret[0].imag() << \" \" << ret[1].real() << \" \" << ret[1].imag() << endl;\n}\n\nvoid solve_cgl_7_f()\n{\n    auto p = input_point();\n    auto p0 = input_point();\n    ld r0;\n    cin >> r0;\n    Circle c(p0, r0);\n    auto ls = tangent_cp(c, p);\n    vector<Point> ret;\n    for (auto l : ls)\n    {\n        auto ps = is_lc(c, l);\n        assert((int)ps.size() == 1);\n        ret.push_back(ps[0]);\n    }\n    sort(ret.begin(), ret.end());\n    cout << ret[0].real() << \" \" << ret[0].imag() << \" \" << ret[1].real() << \" \" << ret[1].imag() << endl;\n}\n\nvoid solve_cgl_7_g()\n{\n    ld r0, r1;\n    auto p0 = input_point();\n    cin >> r0;\n    auto p1 = input_point();\n    cin >> r1;\n    Circle c0(p0, r0), c1(p1, r1);\n    auto ls = tangent_cc(c0, c1);\n    vector<Point> ret;\n    for (auto l : ls)\n    {\n        auto ps = is_sc(c0, l);\n        assert((int)ps.size() == 1);\n        ret.push_back(ps[0]);\n    }\n    sort(ret.begin(), ret.end());\n    for (auto p : ret)\n    {\n        cout << fixed << setprecision(10) << p.real() << \" \" << p.imag() << endl;\n    }\n}\n\n// cgl_7_h: 円と多角形の共通部分(は?)\n// 参考実装: http://judge.u-aizu.ac.jp/onlinejudge/review.jsp?rid=2114290\n\nint main()\n{\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n\n    solve_cgl_7_a();\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#include<math.h> \n \n using namespace std;\n \n double dDistance(const double &x0, const double &y0, const double &x1, const double &y1){\n     return sqrt( (x1 - x0) * (x1 - x0) + (y1 - y0) * (y1 - y0) );\n }\n \n int main(){\n     const double dTolerance = 1.0e-10;\n     double c1x,c1y,c1r,c2x,c2y,c2r;\n     scanf(\"%lf %lf %lf\", &c1x, &c1y, &c1r);\n     scanf(\"%lf %lf %lf\", &c2x, &c2y, &c2r);\n     \n     double dDist = dDistance(c1x, c1y, c2x, c2y);\n     if ( dDist > c1r + c2r + dTolerance ) {\n         printf(\"4\\n\");\n     } else if ( fabs( dDist - (c1r + c2r) ) < dTolerance ) {\n         printf(\"3\\n\");\n     } else if ( dDist - fabs(c1r - c2r) < -dTolerance ) {\n         printf(\"0\\n\");\n     } else if ( fabs( dDist - fabs(c1r - c2r) ) < dTolerance ) {\n         printf(\"1\\n\");\n     } else {\n         printf(\"2\\n\");\n     }\n     return 0;\n }\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define rep(i,n) for(int i=0;i<int(n);++i)\nusing namespace std;\n\n#define _all(arg) begin(arg),end(arg)\n#define uniq(arg) (sort(_all(arg)),(arg).erase(unique(_all(arg)),end(arg)),arg)\n#define getidx(ary,key) lower_bound(_all(ary),key)-begin(ary)\n\ntemplate<class T>void reg(vector<T> &ary,const T &elem){ary.emplace_back(elem);}\ntemplate<class T>bool chmin(T &a, const T &b) {return (b<a)?(a=b,1):0;}\ntemplate<class T>bool chmax(T &a, const T &b) {return (a<b)?(a=b,1):0;}\n\nusing R=long double; // __float128\nconst R EPS = 1E-8; // [-100:100]->EPS=1e-9 [-1000:1000]->EPS=1e-8 [-10000:10000]->EPS=1e-7\nconst R INF = 1E40;\nconst R PI = acos(R(-1));\ninline int sgn(const R& r){ return (r > EPS) - (r < -EPS);}\ninline R sq(R x){return sqrt(max<R>(x,0.0));}\n\nusing P=complex<R>;\nusing VP=vector<P>;\n\nnamespace std{\n\tbool operator <  (const P& a,const P& b){ return sgn(real(a-b))?real(a-b)<0:sgn(imag(a-b))<0;}\n\tbool operator == (const P& a,const P& b){ return sgn(real(a-b))==0 && sgn(imag(a-b))==0;}\n}\n\nusing L=struct{P s,t;};\n\ninline R dot(P o,P a,P b){a-=o,b-=o; return real(conj(a)*b);}\ninline R det(P o,P a,P b){a-=o,b-=o; return imag(conj(a)*b);}\n\nenum CCW{ LEFT = 1,RIGHT = 2,BACK = 4,FRONT = 8,ON = 16};\ninline int ccw(P o,P a, P b) {\n\tif (sgn(det(o,a,b)) > 0) return LEFT;\n\tif (sgn(det(o,a,b)) < 0) return RIGHT;\n\tif (sgn(dot(o,a,b)) < 0) return BACK;\n\tif (sgn(norm(a-o)-norm(b-o)) < 0) return FRONT;\n\treturn ON;\n}\n\n// above prepared template\n\nP proj(P o,P a,P b){ a-=o,b-=o; return a*real(b/a);}\nP proj(L l,P p){l.t-=l.s,p-=l.s;return l.s+l.t*real(p/l.t);}\nP refl(L l,P p){ return R(2.0)*proj(l,p)-p;}\n\nbool iss(L a,L b,int end=0){\n\tint s1=ccw(a.s,a.t,b.s)|ccw(a.s,a.t,b.t);\n\tint s2=ccw(b.s,b.t,a.s)|ccw(b.s,b.t,a.t);\n\tif(end) return (s1&s2)==(LEFT|RIGHT);\n\treturn (s1|s2)&ON || (s1&s2)==(LEFT|RIGHT);\n}\n\nP cross(L a,L b){\n\tR s1=det(a.s,b.s,b.t),s2=s1+det(a.t,b.t,b.s);\n\treturn a.s+s1/s2*(a.t-a.s);\n}\n\nR dsp(L s,P p){\n\tif(sgn(dot(s.s,s.t,p))<=0) return abs(p-s.s);\n\tif(sgn(dot(s.t,s.s,p))<=0) return abs(p-s.t);\n\treturn abs(det(s.s,s.t,p))/abs(s.t-s.s);\n}\n\nR dss(L a,L b){return iss(a,b)?0:min({dsp(a,b.s),dsp(a,b.t),dsp(b,a.s),dsp(b,a.t)});}\n\n\nusing C=struct{P c;R r;};\nenum RCC{OUT=4,ON_OUT=3,ISC=2,ON_IN=1,IN=0};\nint rcc(C a,C b){ R d=abs(a.c-b.c);return 2+sgn(d-a.r-b.r)+sgn(d-abs(a.r-b.r));}\n\nbool icp(C c,P p,int end=0){return sgn(norm(p-c.c)-norm(c.r))<=-end;}\n// dsp\nbool ics(C c,L s,int end=0){return sgn(dsp(s,c.c)-c.r)<=-end;}\nbool icsc(C c,L l,int end=0){return ics(c,l) && sgn(max(norm(l.s-c.c),norm(l.t-c.c))-norm(c.r))<=0;}\n\nR cc_area(C a,C b){\n\tint r=rcc(a,b);\n    if(r<=ON_OUT) return 0.0;  \n    if(r>=ON_IN) return min(norm(a.r),norm(b.r))*PI;\n    R d=abs(b.c-a.c),rc=(norm(d)+ norm(a.r) - norm(b.r))/(2.0*d),t=acos(rc/a.r),p=acos((d-rc)/b.r);\n    return norm(a.r)*t+norm(b.r)*p-d*a.r*sin(t);\n}\n\n// proj\nVP pcl(C c, L l){P h=proj(l,c.c),e=(l.t-l.s)/abs(l.t-l.s)*sq(norm(c.r)-norm(h-c.c));return VP{h-e,h+e};}\n// pcl\nVP pcc(C a,C b){P d=b.c-a.c,w=(norm(d)+norm(a.r)-norm(b.r))/(2.0*norm(d))*d,h=a.c+w,e=w*P(0,1);return pcl(a,{h-e,h+e});}\n\nL tan(C c,P p){P d=(p-c.c)*P(0,1);return L{p-d,p+d};}\n\n// reg sq\nVP contact(C c,P p){\n\tVP ret; R d=abs(p-c.c); \n\trep(i,2) reg(ret,c.c+(c.r+P(0,2*i-1)*sq(norm(d)-norm(c.r)))*c.r*(p-c.c)/norm(d));\n\treturn uniq(ret);\n}\n\n// reg sq rcc\nVP contact(C a,C b){\n\tVP ret; R d=abs(a.c-b.c);\n\trep(i,2) if(rcc(a,b)<=8-6*i) rep(j,2){\n\t\tR r=a.r+(2*i-1)*b.r;\n\t\treg(ret,a.c+(r+P(0,2*j-1)*sq(norm(d)-norm(r)))*a.r*(b.c-a.c)/norm(d));\n\t}\n\treturn uniq(ret);\n}\n\n\nint main(void){\n\tC a,b;\n\t{\n\t\tint x,y,r;\n\t\tcin >> x >> y >> r;\n\t\ta=C({P(x,y),r});\n\t\tcin >> x >> y >> r;\n\t\tb=C({P(x,y),r});\n\t}\n\tcout << rcc(a,b) << endl;\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\nusing u64 = uint_fast64_t; \nusing pii =  pair<int, int>;\nusing pll =  pair<long long, long long>;\n#define rep(i, n) for(int i = 0; i < (n); ++i)\n#define all(x) (x).begin(),(x).end()\nconstexpr char ln =  '\\n';\n//////////////////////////////////////////////////////////////////////////////\n\n// 精度が足りないときはlong double\nusing DD = double;\nconstexpr DD EPS = 1e-11;\nconst DD PI = acos(DD(-1));\ninline int sgn(DD a) {return (a < -EPS) ? -1 : (a > EPS) ? 1 : 0;}\n\n//点\nstruct Point {\n    DD x, y;\n    Point (DD x = 0, DD y = 0): x(x), y(y) {}\n\n    Point operator+(const Point &p) const { return Point(*this) += p;}\n    Point operator-(const Point &p) const { return Point(*this) -= p;}\n    Point operator*(const Point &p) const { return Point(*this) *= p;}\n    Point operator*(DD a) const { return Point(*this) *= a;}\n    Point operator/(DD a) const { return Point(*this) /= a;}\n    Point& operator+=(const Point &p) { x += p.x; y += p.y; return *this;}\n    Point& operator-=(const Point &p) { x -= p.x; y -= p.y; return *this;}\n    Point& operator*=(const Point &p) { DD u = x*p.x - y*p.y; DD v = x*p.y + y*p.x; x = u; y = v; return *this;}\n    Point& operator*=(DD a) { x *= a; y *= a; return *this;}\n    Point& operator/=(DD a) { x /= a; y /= a; return *this;}\n    bool operator==(const Point &p) const { return !sgn(x - p.x) && !sgn(y - p.y);}\n    bool operator!=(const Point &p) const { return sgn(x - p.x) || sgn(y - p.y);}\n    bool operator<(const Point &p) const {\n        if (sgn(x - p.x)) return sgn(x - p.x) < 0;\n        return sgn(y - p.y) < 0;\n    }\n    friend istream& operator>>(istream& is, Point& p) { is >> p.x >> p.y; return is;}\n    friend ostream& operator<<(ostream& os, const Point& p) { os << p.x << \" \" << p.y; return os;}\n\n    DD norm() { return x*x + y*y;}\n    DD abs() { return sqrt(norm());}\n    DD arg() { return atan2(y,x);}\n};\n\n//ベクトル\nusing Vector = Point;\n\ninline DD norm(const Vector &a) { return a.x * a.x + a.y * a.y;}\ninline DD abs(const Vector &a) { return sqrt(norm(a));}\ninline DD dot(const Vector &a, const Vector &b) { return a.x * b.x + a.y * b.y;}\ninline DD cross(const Vector &a, const Vector &b) { return a.x * b.y - a.y * b.x;}\ninline Point rot(const Point &p, DD ang) { return Point(cos(ang) * p.x - sin(ang) * p.y, sin(ang) * p.x + cos(ang) * p.y);}\ninline Point rot90(const Point &p) { return Point(-p.y, p.x);}\ninline DD arg(const Vector &p) { return atan2(p.y, p.x);}\n//象限\nint ort(const Point &a) {\n    if (sgn(norm(a))) {\n        if (sgn(a.y) > 0) return sgn(a.x) > 0 ? 1 : 2;\n        return sgn(a.x) > 0 ? 4 : 3;\n    }\n    return 0;\n}\nbool xsort(const Point &a, const Point &b) {\n    if (sgn(a.x - b.x)) return sgn(a.x - b.x) < 0;\n    return sgn(a.y - b.y) < 0;\n}\nbool ysort(const Point &a, const Point &b) {\n    if (sgn(a.y - b.y)) return sgn(a.y - b.y) < 0;\n    return sgn(a.x - b.x) < 0;\n}\n\nbool argsortcross(const Point &a, const Point &b) {\n    int ao = ort(a), bo = ort(b);\n    if (ao != bo) return ao < bo;\n    return sgn(cross(a,b)) > 0;\n}\n\nbool argsortatan2(const Point &a, const Point &b) {\n    return sgn(atan2(b.y, b.x) - atan2(a.y, a.x)) > 0;\n}\n\n//線分\nstruct Segment {\n    Point p1,p2;\n    Segment() {};\n    Segment(Point p1, Point p2) : p1(p1),p2(p2) {}\n};\n\n//直線\nusing Line = Segment;\n\n// 円\nstruct Circle {\n    Point c;\n    DD r;\n    Circle(){}\n    Circle(Point c, DD r): c(c), r(r) {}\n    friend istream& operator >>(istream& is, Circle& C) { is >> C.c >> C.r; return is;}\n    friend ostream& operator <<(ostream& os, const Circle& C) { os << C.c << \" \" << C.r; return os;}\n};\n\n//多角形\nusing Polygon = vector<Point>;\n\n//点の進行方向\nint ccw(const Point &p0, const Point &p1, const Point &p2) {\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if (sgn(cross(a,b)) > 0) return 1; //p0,p1から見てp2は左側(反時計回り)\n    if (sgn(cross(a,b)) < 0) return -1; //p0,p1から見てp2は右側(時計回り)\n    if (sgn(dot(a,b)) < 0) return 2; //p2-p0-p1の順に一直線上\n    if (sgn(norm(b) - norm(a)) > 0) return -2; //p0-p1-p2の順に一直線上\n    return 0; //p0-p2-p1の順に一直線上\n}\n\n//直線の交差判定 交差する場合1, 平行な場合0, 同一直線のとき-1\nint intersectLP(const Vector &a, const Vector &b) {\n    if (sgn(cross(a,b))) return 1;\n    if (sgn(dot(a,b))) return 0;\n    return -1;\n} \nint intersectLP(const Point &p1, const Point &p2, const Point &p3, const Point &p4) {return intersectLP(p2-p1,p4-p3);}\nint intersectLP(const Line &l1, const Line &l2) {return intersectLP(l1.p1,l1.p2,l2.p1,l2.p2);}\n\n//直線の平行判定\nbool isParallel(const Vector &a, Vector &b) {return intersectLP(a,b) <= 0;}\nbool isParallel(const Point &p1, const Point &p2, const Point &p3, const Point &p4) {return intersectLP(p1,p2,p3,p4) <= 0;}\nbool isParallel(const Line &l1, const Line &l2) {return intersectLP(l1,l2) <= 0;}\n\n//直線の直交判定\nbool isOrthogonal(const Vector &a, const Vector &b) {return !sgn(dot(a,b));}\nbool isOrthogonal(const Point &p1, const Point &p2, const Point &p3, const Point &p4) {return isOrthogonal(p2-p1,p4-p3);}\nbool isOrthogonal(const Line &l1, const Line &l2) {return isOrthogonal(l1.p1,l1.p2,l2.p1,l2.p2);}\n\n//線分の交差判定\nbool intersectSP(const Point &p1, const Point &p2, const Point &p3, const Point &p4) { return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 && ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);}\nbool intersectSP(const Segment &s1, const Segment &s2) { return intersectSP(s1.p1, s1.p2, s2.p1, s2.p2);}\n\n//直線と線分の交差判定\nbool intersectLSP(const Line &l, const Segment &s) {return ccw(l.p1,l.p2,s.p1)*ccw(l.p1,l.p2,s.p2) <= 0;}\n\n//直線と直線の交点\nPoint getCrossPointLP(const Line &l1, const Line &l2) {\n    assert(intersectLP(l1,l2)==1);\n    return l1.p1 + (l1.p2-l1.p1)*cross(l2.p1-l1.p1,l2.p2-l2.p1)/cross(l1.p2-l1.p1,l2.p2-l2.p1);\n}\n\n//線分と線分の交点\nPoint getCrossPointSP(const Segment &s1, const Segment &s2) {\n    assert(intersectSP(s1,s2));\n    return getCrossPointLP(s1,s2);\n}\n\n//射影\nPoint project(const Segment &s, const Point &p) {\n    Vector base = s.p2 - s.p1;\n    DD r = dot(p - s.p1, base) / norm(base);\n    return s.p1 + base * r;\n}\n\n//線対称\nPoint reflect(const Segment &s, const Point &p) {return p + (project(s,p) - p) * 2;}\n\n//点と直線の距離\nDD getDistanceLP(const Line &l, const Point &p) { return abs(cross(l.p2 - l.p1,p - l.p1) / abs(l.p2 - l.p1));}\n\n//点と線分の距離\nDD getDistanceSP(const Segment &s, const Point &p) {\n    if (sgn(dot(s.p2 - s.p1,p - s.p1)) < 0) return abs(p - s.p1);\n    if (sgn(dot(s.p1 - s.p2,p - s.p2)) < 0) return abs(p - s.p2);\n    return getDistanceLP(s, p);\n}\n\n//直線と直線の距離\nDD getDistanceLP(const Line &l1, const Line &l2) {\n    if (intersectLP(l1,l2)) return 0;\n    return getDistanceLP(l1,l2.p1);\n}\n\n//直線と線分の距離\nDD getDistanceLSP(const Line &l, const Segment &s) {\n    if (intersectLSP(l,s)) return 0;\n    return min(getDistanceLP(l,s.p1),getDistanceLP(l,s.p2));\n}\n\n//線分と線分の距離\nDD getDistanceSP(const Segment &s1, const Segment &s2) {\n    if (intersectSP(s1, s2)) return 0;\n    return min({getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2), getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)});\n}\n\n//円と直線の交差判定\nbool intersectLP(const Circle &c, const Line &l) { return sgn(getDistanceLP(l, c.c) - c.r) <= 0;}\n//円と線分の交差判定\nbool intersectSP(const Circle &c, const Segment &s) {\n    return sgn(getDistanceSP(s,c.c) - c.r) <= 0 && sgn(max(abs(s.p1 - c.c),abs(s.p2 - c.c)) - c.r) >= 0;\n}\n//円と円の交差判定\nint intersect(const Circle &c1, const Circle &c2) {\n    if (sgn(abs(c1.c - c2.c) - (c1.r + c2.r)) > 0) return 4;     //2つの円が離れている場合\n    if (!sgn(abs(c1.c - c2.c) - (c1.r + c2.r))) return 3;        //2つの円が外接する場合\n    if (sgn(fabs(c1.r - c2.r) - abs(c1.c - c2.c)) > 0) return 0; //一方がもう一方を内包する場合\n    if (!sgn(fabs(c1.r - c2.r) - abs(c1.c - c2.c))) return 1;    //2つの円が内接する場合\n    return 2;                                                    //2つの円が交わる場合\n}\n\n//円と直線の交点\npair<Point, Point> getCrossPoints(const Circle &c, const Line &l) {\n    assert(intersectLP(c,l));\n    Vector pr = project(l, c.c);\n    Vector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);\n    DD base = sqrt(c.r * c.r - norm(pr - c.c));\n    return make_pair(pr + e * base, pr - e * base);\n}\n\nVector polar(DD a, DD r) { return Point(cos(r) * a, sin(r) * a);}\n\n//円と円の交点\npair<Point, Point> getCrossPoints(const Circle &c1, const Circle &c2) {\n    assert(intersect(c1, c2));\n    DD d = abs(c1.c - c2.c);\n    DD a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (DD(2) * c1.r * d));\n    DD t = arg(c2.c - c1.c);\n    return make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n}\n\n//多角形の面積\nDD area(const Polygon &g) {\n    const int N = g.size();\n    DD ret = 0;\n    for (int i = 0; i < N; ++i) {\n        ret += cross(g[i],g[(i+1)%N]);\n    }\n    return fabs(ret)/2;\n}\n\n//凸性判定\nbool isConvex(const Polygon &g) {\n    const int N = g.size();\n    for (int i = 0; i < N; ++i) {\n        if (ccw(g[i],g[(i+1)%N],g[(i+2)%N]) == -1) return 0;\n    }\n    return 1;\n}\n\n// 多角形-点の包含判定\nint containment(const Polygon &g, const Point &p) {\n    const int N = g.size();\n    DD ang = 0;\n    for (int i = 0; i < N; i++) {\n        if (!ccw(g[i],g[(i+1)%N],p)) return 1; // pがgの辺上に存在する\n        ang += atan2(cross(g[(i+1)%N] - p, g[i] - p), dot(g[(i+1)%N] - p, g[i] - p));\n    }\n    if (sgn(ang)) return 2; // pがgに含まれる\n    return 0; // pがgに含まれない\n}\n\n//凸包\nPolygon andrewScan(Polygon s) {\n    Polygon u,l;\n    const int N = s.size();\n    if (N < 3) return s;\n    sort(s.begin(), s.end(), xsort);\n    u.emplace_back(s[0]);\n    u.emplace_back(s[1]);\n    l.emplace_back(s[N-1]);\n    l.emplace_back(s[N-2]);\n    \n    for (int i = 2; i < s.size(); ++i) {\n        // 凸包上の点も含めるなら ccw() == 1\n        for (int n = u.size(); n >= 2 && ccw(u[n-2],u[n-1],s[i]) != -1; --n) {\n            u.pop_back();\n        }\n        u.emplace_back(s[i]);\n    }\n\n    for (int i = N - 3; i >= 0; --i) {\n        // 凸包上の点も含めるなら ccw() == 1\n        for (int n = l.size(); n >= 2 && ccw(l[n-2], l[n-1], s[i]) != -1; --n) {\n            l.pop_back();\n        }\n        l.emplace_back(s[i]);\n    }\n\n    reverse(l.begin(), l.end());\n    for (int i = u.size() - 2; i >= 1; --i) l.emplace_back(u[i]);\n\n    return l;\n}\n\n//最遠点対\nDD farthestpointpair(const Polygon &g) {\n    const int N = g.size();\n    if (N == 2) return abs(g[1] - g[0]);\n    int i = 0, j = 0;\n    for (int k = 0; k < N; ++k) {\n        if (g[k].y > g[i].y) i = k;\n        if (g[k].y < g[j].y) j = k;\n    }\n\n    DD ret = 0;\n    int si = i, sj = j;\n    while (i != sj || j != si) {\n        ret = max(ret, abs(g[i]-g[j]));\n        if (cross(g[(i+1)%N] - g[i], g[(j+1)%N] - g[j]) < -EPS) {\n            i = (i+1)%N;\n        } else {\n            j = (j+1)%N;\n        }\n    }\n\n    return ret;\n}\n\n/////////////////////////////////////////////////////////////////////////////////////////////\n\nvoid CGL_1_A() {\n    Point p1,p2; cin >> p1 >> p2;\n    Line l(p1,p2);\n    int Q; cin >> Q;\n    while (Q--) {\n        Point p; cin >> p;\n        cout << project(l,p) << ln;\n    }\n}\n\nvoid CGL_1_B() {\n    Point p1,p2; cin >> p1 >> p2;\n    Line l(p1,p2);\n    int Q; cin >> Q;\n    while (Q--) {\n        Point p; cin >> p;\n        cout << reflect(l,p) << ln;\n    }\n}\n\nvoid CGL_1_C() {\n    Point p0,p1; cin >> p0 >> p1;\n    int Q; cin >> Q;\n    while (Q--) {\n        Point p2; cin >> p2;\n        int v = ccw(p0,p1,p2);\n        string ans;\n        if (v==1) ans = \"COUNTER_CLOCKWISE\";\n        if (v==-1) ans = \"CLOCKWISE\";\n        if (v==2) ans = \"ONLINE_BACK\";\n        if (v==-2) ans = \"ONLINE_FRONT\";\n        if (v==0) ans = \"ON_SEGMENT\";\n        cout << ans << ln;\n    }\n}\n\nvoid CGL_2_A() {\n    int Q; cin >> Q;\n    while (Q--) {\n        Point p0,p1,p2,p3; cin >> p0 >> p1 >> p2 >> p3;\n        if (isParallel(p0,p1,p2,p3)) cout << 2 << ln;\n        else if (isOrthogonal(p0,p1,p2,p3)) cout << 1 << ln;\n        else cout << 0 << ln;\n    }\n}\n\nvoid CGL_2_B() {\n    int Q; cin >> Q;\n    while (Q--) {\n        Point p0,p1,p2,p3; cin >> p0 >> p1 >> p2 >> p3;\n        cout << intersectSP(p0,p1,p2,p3) << ln;\n    }\n}\n\nvoid CGL_2_C() {\n    int Q; cin >> Q;\n    while (Q--) {\n        Point p0,p1,p2,p3; cin >> p0 >> p1 >> p2 >> p3;\n        Segment s0(p0,p1), s1(p2,p3);\n        cout << getCrossPointSP(s0,s1) << ln;\n    }\n}\n\nvoid CGL_2_D() {\n    int Q; cin >> Q;\n    while (Q--) {\n        Point p0,p1,p2,p3; cin >> p0 >> p1 >> p2 >> p3;\n        Segment s0(p0,p1), s1(p2,p3);\n        cout << getDistanceSP(s0,s1) << ln;\n    }\n}\n\nvoid CGL_3_A() {\n    int N; cin >> N;\n    Polygon P(N);\n    rep(i,N) cin >> P[i];\n\n    cout << fixed << setprecision(1) << area(P) << ln;\n}\n\nvoid CGL_3_B() {\n    int N; cin >> N;\n    Polygon P(N);\n    rep(i,N) cin >> P[i];\n\n    cout << isConvex(P) << ln;\n}\n\nvoid CGL_3_C() {\n    int N; cin >> N;\n    Polygon P(N);\n    rep(i,N) cin >> P[i];\n\n    int Q; cin >> Q;\n    while (Q--) {\n        Point p; cin>> p;\n        cout << containment(P,p) << ln;\n    }\n}\n\nvoid CGL_7_A() {\n    Circle c1,c2; cin >> c1 >> c2;\n    cout << intersect(c1,c2) << ln;\n}\n\nint main() {\n    ios::sync_with_stdio(false); cin.tie(nullptr);\n    cout << fixed << setprecision(20);\n    //CGL_1_A();\n    //CGL_1_B();\n    //CGL_1_C();\n    //CGL_2_A();\n    //CGL_2_B();\n    //CGL_2_C();\n    //CGL_2_D();\n    //CGL_3_A();\n    //CGL_3_B();\n    //CGL_3_C();\n    CGL_7_A();\n}\n\n/*\n  verified on 2020/06/02\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_A&lang=ja\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_B&lang=ja\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_C&lang=ja\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_A&lang=ja\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_B&lang=ja\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_C&lang=ja\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_D&lang=ja\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_3_A&lang=ja\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_3_B&lang=ja\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_7_A&lang=ja\n*/\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define f first\n#define s second\n#define mp make_pair\n#define pi M_PI\n#define inf 1<<30\n#define eps (1e-11)\n#define equals(a,b) (fabs((a)-(b))<eps)\nusing namespace std;\n\nclass Point{\npublic:\n  double x,y;\n  Point(double x=0,double y=0):x(x),y(y){}\n\n  Point operator+(Point p){ return Point(x+p.x,y+p.y);}\n  Point operator-(Point p){ return Point(x-p.x,y-p.y);}\n  Point operator*(double k){ return Point(x*k,y*k);}\n  Point operator/(double k){ return Point(x/k,y/k);}\n  bool operator<(Point p)const{ return (x!=p.x ? x<p.x : y<p.y);}\n  bool operator==(Point p)const{ return fabs(x-p.x)<eps && fabs(y-p.y)<eps;}\n\n  double abs(){ return sqrt(norm());}\n  double norm(){ return (x*x+y*y);}\n};\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\nclass Circle{\npublic:\n  Point c;\n  double r;\n  Circle(Point c=Point(),double r=0.0):c(c),r(r){}\n};\n\ndouble norm(Vector a){ return (a.x*a.x+a.y*a.y);}\ndouble abs(Vector a){ return sqrt(norm(a));}\n\nint intersect(Circle a,Circle b){\n  double dis=abs(a.c-b.c),sumr=a.r+b.r,minr=min(a.r,b.r),maxr=max(a.r,b.r);\n  if((sumr-dis)<-eps)return 4;\n  if(equals(sumr,dis))return 3;\n  if((maxr-dis)<eps)return 2;\n  if(equals(dis+minr,maxr))return 1;\n  return 0;\n}\n\nint main()\n{\n  Circle c1,c2;\n\n  cin>>c1.c.x>>c1.c.y>>c1.r;\n  cin>>c2.c.x>>c2.c.y>>c2.r;\n\n  cout<<intersect(c1,c2)<<endl;\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "/*\n幾何\nhttps://gist.github.com/zeptometer/3719669\n複素数平面による幾何ライブラリ←もっと短くなる可能生アリ\nhttp://osrehun.hatenadiary.jp/entry/2016/12/31/145827\n\n*/\n#include <bits/stdc++.h>\nusing namespace std;\n\nusing DD=double;\n\n\n#define EPS 1e-10\n#define eq(a,b) (abs( (a) - (b) )<EPS)\nconst DD PI=acosl(-1.0);\nconstexpr DD INF=1LL<<62;\n\n//点\nusing P=complex<DD>;\n//ベクトル\nusing V=P;\n//線分\nstruct Segment{\n    P a,b;\n    Segment()=default;\n    Segment(P a,P b) :a(a),b(b){}\n    Segment(DD ax,DD ay,DD bx,DD by):a(ax,ay),b(bx,by){}\n\n};\n//直線\nusing Line=Segment;\n//円\nstruct Circle{\n    P p;\n    DD r;\n    Circle()=default;\n    Circle(P p,DD r):p(p),r(r){}\n};\nusing Polygon=vector<P>;\n\n//++++++++++++++++基本計算++++++++++++++//\ninline DD torad(const DD &deg){return deg*PI/180;}\ninline DD todeg(const DD &rad){return rad*180/PI;}\n//内積\ninline DD dot(const V &a,const V &b){\n    return real(a*conj(b));\n}\n//外積\ninline DD cross(const V &a,const V &b){\n    return imag(conj(a)*b);\n}\n//ベクトルvを反時計回りにr度回転\ninline V rotate(const V &v,const DD r){\n    return v*V(cos(r),sin(r));\n}\ninline bool xy(const P &a,const P &b){\n    if(real(a)+EPS<=real(b)) return true;\n    if(eq(real(a),real(b)) && imag(a)+EPS<imag(b)) return true;\n    return false;\n}\ninline bool yx(const P &a,const P &b){\n    if(imag(a)+EPS<imag(b)) return true;\n    if(eq(imag(a),imag(b)) && real(a)+EPS<real(b)) return true;\n    return false;\n}\n\n//++++++++++++++++平行や直交+++++++++++++++//\ninline bool isOrthogonal(const V &a,const V &b){\n    return eq(dot(a,b),0.0);\n}\ninline bool isOrthogonal(const Segment &a,const Segment &b){\n    return eq(dot(a.a-a.b,b.a-b.b),0);\n}\ninline bool isParallel(const V &a,const V &b){\n    return eq(cross(a,b),0.0);\n}\ninline bool isParallel(const Segment &a,const Segment &b){\n    return eq(cross(a.a-a.b,b.a-b.b),0);\n}\n//線分a-bに対してcがどの位置にあるか\n//ccwの簡略版 反時計回り:1 時計回り:-1 直線上:0\ninline int ccw(const P &a,const P &b,const P &c){\n    DD cr=cross(b-a,c-a);\n    if(cr>EPS) return 1;\n    if(cr<-EPS) return -1;\n    return 0;\n}\n\n//線分a-bに対してcがどの位置にあるか\n//反時計回り:1　時計回り:-1 直線上(a,b,c:-2 a,c,b:0 c,a,b:2) \ninline int ccwH(P a,P b,P c){\n    b-=a;c-=a;\n    if(cross(b,c)>EPS) return 1;\n    if(cross(b,c)<-EPS) return -1;\n    if(dot(b,c)<-EPS) return 2;\n    if(norm(b)<norm(c)) return -2;\n    return 0;\n}\n\n\n//+++++++++++++++射影+++++++++++++++++++++//\ninline P project(const P &p,const Segment &s){\n    V base=s.b-s.a;\n    DD r=dot(p-s.a,base)/norm(base);\n    return s.a+base*r;\n}\ninline P reflect(const P &p,const Segment &s){\n    return p+(project(p,s)-p)*2.0;\n}\n/*++++++++++点との距離++++++++++++++++++*/\n//点と直線の距離\ninline DD dis(const P &p,const Line &l){return abs(cross(l.b-l.a,p-l.a))/abs(l.b-l.a);}\n//点と線分の距離\ninline DD disPS(const P &p,const Segment &s){\n    if( dot(s.b-s.a,p-s.a)<0.0 ) return abs(p-s.a);\n    if( dot(s.a-s.b,p-s.b)<0.0 ) return abs(p-s.b);\n    return dis(p,s); //点と直線の距離\n}\n\n\n//+++++++++++++++線分と直線+++++++++++++++++//\n\n//線分a-b,c-dは交差するか?\ninline bool intersect(const P &a,const P &b,const P &c,const P &d){\n    return(ccwH(a,b,c)*ccwH(a,b,d)<=0 && ccwH(c,d,a)*ccwH(c,d,b)<=0);\n}\n//線分s,tは交差するか？\ninline bool intersect(const Segment &s,const Segment &t){\n    return intersect(s.a,s.b,t.a,t.b);\n}\n//線分と線分の交点\n//これをやる前にintersectで判定\ninline P crossPoint(const Segment &s,const Segment &t){\n    V base=t.b-t.a;\n    DD d1=abs(cross(base,s.a-t.a));\n    DD d2=abs(cross(base,s.b-t.a));\n    DD r=d1/(d1+d2);\n    return s.a+(s.b-s.a)*r;\n}\n//線分と線分の距離\ninline DD dis(const Segment &s,const Segment t){\n    if(intersect(s,t)) return 0.0;\n    return min(min(disPS(t.a,s),disPS(t.b,s)),min(disPS(s.a,t),disPS(s.b,t)) );\n}\n\n//+++++++++++円++++++++++++++++//\n\n//円cと直線lの交点\n//abs(l,c.p)<c.r+EPSが必要\npair<P,P> crossPoint(const Line &l,const Circle &c){\n    P pr=project(c.p,l);\n    V e=(l.b-l.a)/(abs(l.b-l.a));\n    DD base=sqrt(c.r*c.r-norm(pr-c.p));\n    return make_pair(pr+e*base,pr-e*base);\n}\n//線分sと円cの交点\nvector<P> crossPointSC(const Segment &s,const Circle &c){\n    vector<P> ret;\n    if(dis(c.p,s)>=c.r+EPS) return ret;\n    auto p=crossPoint(s,c);\n    if(dot(p.first-s.a,s.b-s.a)>0 && dot(p.first-s.b,s.a-s.b)>0) ret.push_back(p.first);\n    if(dot(p.second-s.a,s.b-s.a)>0 && dot(p.second-s.b,s.a-s.b)>0) ret.push_back(p.second);\n    if(xy(s.a,s.b)) sort(ret.begin(),ret.end(),xy);\n    else sort(ret.rbegin(),ret.rend(),xy);\n    return ret;\n}\n\n//共通接線の数\n//離れている:4 外接:3 交わる:2 内接:1 内包:0\ninline int intersect(const Circle &a,const Circle &b){\n    DD d=abs(a.p-b.p);\n    if(d>a.r+b.r+EPS) return 4;\n    if(eq(d,a.r+b.r)) return 3;\n    if(eq(d,abs(a.r-b.r))) return 1;\n    if(d<abs(a.r-b.r)-EPS) return 0;\n    return 2;\n}\n\n//円c1と円c2の交点\n//これを使う前に交点があるかどうかを判定する\nvector<P> crossPoint(const Circle &a,const Circle &b){\n    vector<P> ret;\n    if(abs(a.p-b.p)<a.r+b.r+EPS) return ret;\n    DD d=abs(a.p-b.p);\n    DD s=acos((a.r*a.r+d*d-b.r*b.r)/(2*a.r*d));\n    DD t=arg(b.p-a.p);\n    if(eq(s,0)) ret.emplace_back(a.p+polar(a.r,t+s));\n    else ret.emplace_back(a.p+polar(a.r,t+s)),ret.emplace_back(a.p+polar(a.r,t-s));\n    return ret;\n}\n\n//pがcの外にあるかの判定が必要\nvector<P> TanLine(const P &p,const Circle &c){\n    vector<P> ret;\n    DD d=abs(p-c.p);\n    if(d<=c.r-EPS) return ret;\n    if(eq(d,c.r)){\n        ret.push_back(p);\n        return ret;\n    } \n    return crossPoint(c,Circle(p,sqrt(d*d-c.r*c.r)));\n}\n//https://ei1333.github.io/luzhiled/snippets/geometry/template.html\n//↑すごい。丸写し\n//円c1,c2の共通接線\n//接点をつないで線にしている(１個だけ追加するときに注意)\nvector<Line> TanLine(Circle a,Circle b){\n    vector<Line> ret;\n    if(a.r<b.r) swap(a,b);\n    DD g=abs(a.p-b.p);\n    if(eq(g,0)) return ret;\n    V u=(b.p-a.p)/g;\n    V v=rotate(u,PI*0.5);\n    for(DD s:{-1,1}){\n        DD h=(a.r+s*b.r)/g;\n        if(eq(1-h*h,0)){\n            ret.emplace_back(a.p+u*a.r,a.p+(u+v)*a.r);\n        }else if(1-h*h>0){\n            V uu=u*h,vv=v*sqrt(1-h*h);\n            ret.emplace_back(a.p+(uu+vv)*a.r,b.p-(uu+vv)*b.r*s);\n            ret.emplace_back(a.p+(uu-vv)*a.r,b.p-(uu-vv)*b.r*s);\n        }\n    }\n    return ret;\n}\n\n/*+++++++++++++++++++三角形+++++++++++++++++*/\n//外心\n//isParallel()を使って判定を忘れずに\nP circumcenter(const P &a,const P &b,const P &c){\n    P ab=(a+b)/2.0,bc=(b+c)/2.0;\n    Segment s(ab,ab+polar(1.0,arg(b-a)+PI*0.5));\n    Segment t(bc,bc+polar(1.0,arg(c-b)+PI*0.5));\n    return crossPoint(s,t);\n}\n\n/*+++++++++++++++++++多角形+++++++++++++++++++*/\n//IN:2 ON:1 OUT:0\n//点がどの位置にあるか\nint contains(const P &p,const Polygon &g){\n    int n=(int)g.size();\n    bool x=false;\n    for(int i=0;i<n;i++){\n        V a=g[i]-p,b=g[(i+1)%n]-p;\n        if(eq(cross(a,b),0) && dot(a,b)<EPS) return 1;\n        if(imag(a)>imag(b)) swap(a,b);\n        if(imag(a)<EPS && EPS<imag(b) && cross(a,b)>EPS) x=!x;\n    }\n    return (x?2:0);\n}\n//凸性判定\nbool isConvex(const Polygon &g){\n    int n=(int)g.size();\n    int flag=0;\n    int t;\n    for(int i=0;i<n;i++){\n        V a(g[(i+1)%n]-g[i]),b(g[(i+2)%n]-g[i]);\n        if(cross(a,b)>EPS) t=1;\n        else if(cross(a,b)<-EPS) t=-1;\n        else continue;\n        if(flag==-t) return false;\n        flag=t;\n    }\n    return true;\n}\n\n//凸包　アンドリューのアルゴリズム\n//https://github.com/drken1215/algorithm/blob/master/Geometry/All.cpp←螺旋本より早そう\n//j=1:返上の点を含まない　j=-1:含む\n//反時計回りの多角形を返す\n//sはソートされる\nPolygon ConvexHull(Polygon &s,const int j){\n    int sz=(int)s.size();\n    if(sz<3) return s;\n    sort(s.begin(),s.end(),yx);\n\n    int n=0;\n    Polygon res(2*sz);\n    for(int i=0;i<sz;i++){\n        while(n>=2 && cross(res[n-1]-res[n-2],s[i]-res[n-2])<EPS*j){\n            n--;\n        }\n        res[n]=s[i];\n        n++;\n    }\n    int t=n+1;\n    for(int i=sz-2;i>=0;i--){\n        while(n>=t && cross(res[n-1]-res[n-2],s[i]-res[n-2])<EPS*j){\n            n--;\n        }\n        res[n]=s[i];\n        n++;\n    }\n    res.resize(n-1);\n    return res;\n}\n\n//符号付き面積\n//反時計回りの図形なら正\n//https://imagingsolution.net/math/calc_n_point_area/\nDD Area(const Polygon &g){\n    DD ret=0.0;\n    int n=(int)g.size();\n    for(int i=0;i<n;i++){\n        ret+=cross(g[i],g[(i+1)%n]);\n    }\n    return ret/2.0L;\n}\n\n//反時計回り\n//理解が浅い←大体分かった（本当か？）\nDD Diameter(Polygon g){\n    g=ConvexHull(g,1);\n    int gz=g.size();\n    int m=0,M=0;\n    for(int i=1;i<gz;i++){\n        if(imag(g[i])<imag(g[m])) m=i;\n        if(imag(g[i])>imag(g[M])) M=i;\n    }\n    DD ret=0;\n    int sm=m,sM=M;\n    while(m!=sM || M!=sm){\n        ret=max(ret,norm(g[m]-g[M]));\n        if(cross(g[(m+1)%gz]-g[m],g[(M+1)%gz]-g[M])<0) m=(m+1)%gz;\n        else M=(M+1)%gz;\n    }\n    return sqrt(ret);\n}\n\n//凸多角形gをlで切断\n//l.p1-l.p2の左側\n//gは反時計回り→反時計回りで返す\n//時計回り→時計回り\nPolygon ConvexCut(const Polygon &g,const Line &l){\n    Polygon ret;\n    int gz=(int)g.size();\n    for(int i=0;i<gz;i++){\n        P now=g[i],next=g[(i+1)%gz];\n        if(ccw(l.a,l.b,now)>=0) ret.push_back(now);\n        if(ccw(l.a,l.b,now)*ccw(l.a,l.b,next)<0){\n            ret.push_back(crossPoint(Line(now,next),l));\n        }\n    }\n    return ret;\n}\n\ninline DD calc(const P &a,const P &b,const DD &r,const bool triangle){\n    if(triangle) return cross(a,b);\n    else return r*r*arg(b-a);\n}\n\nDD calcArea(const DD &r,const P &a,const P &b){\n    if(eq(abs(a-b),0)) return 0;\n    bool ina=abs(a)<r+EPS;\n    bool inb=abs(b)<r+EPS;\n    if(ina && inb) return cross(a,b);\n    auto cr=crossPointSC(Segment(a,b),Circle((0,0),r));\n    if(cr.empty()) return calc(a,b,r,false);\n    auto s=cr[0],t=cr.back();\n    return calc(s,t,r,true)+calc(a,s,r,ina)+calc(t,b,r,inb);\n}\n\n//円と多角形の共通部分の面積\n//http://drken1215.hatenablog.com/entry/2020/02/02/091000\nDD Area(const Circle &c,const Polygon &g){\n    DD ret=0.0;\n    int gz=g.size();\n    if(gz<3) return ret;\n    for(int i=0;i<gz;i++){\n        P a=g[i]-c.p,b=g[(i+1)%gz]-c.p;\n        ret+=calcArea(c.r,g[i]-c.p,g[(i+1)%gz]-c.p);\n    }\n    return ret/2.0;\n}\n\n//++++なんか凄いの+++++++++++++++\n\n//最近点対\nDD RecClosetPair(Polygon::iterator it,const int n){\n    if(n<=1) return INF;\n    int m=n/2;\n    DD x=real(it[m]);\n    DD d=min(RecClosetPair(it,m),RecClosetPair(it+m,n-m));\n    inplace_merge(it,it+m,it+n,yx);\n    Polygon v;\n    for(int i=0;i<n;i++){\n        if(abs(real(it[i])-x)>=d) continue;\n        for(int j=0;j<v.size();j++){\n            DD dy=imag(it[i])-imag(v[v.size()-1-j]);\n            if(dy>=d) break;\n            DD dx=real(it[i])-real(v[v.size()-1-j]);\n            d=min(d,sqrt(dx*dx+dy*dy));\n        }\n        v.push_back(it[i]);\n    }\n    return d;\n}\n\nDD ClosetPair(Polygon g){\n    sort(g.begin(),g.end(),xy);\n    return RecClosetPair(g.begin(),g.size());\n}\n\n\n\n\nsigned main(){\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr); \n    cout<<fixed<<setprecision(10);\n\n    DD cx,cy,r;\n    cin>>cx>>cy>>r;\n    Circle c1(P(cx,cy),r);\n    cin>>cx>>cy>>r;\n    Circle c2(P(cx,cy),r);\n    cout<<intersect(c1,c2)<<endl;\n}\n\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nint main() {\n    float c1[3];\n    float c2[3];\n    float d;\n\n    cin >> c1[0] >> c1[1] >> c1[2];\n    cin >> c2[0] >> c2[1] >> c2[2];\n\n    d = sqrt(pow(abs(c1[0]-c2[0]), 2) + pow(abs(c1[1]-c2[1]), 2));\n\n    if(d > c1[2] + c2[2]){\n        cout << 4 << endl;\n    }else if(d == c1[2] + c2[2]){\n        cout << 3 << endl;\n    }else if(d < c1[2] + c2[2] && d > abs(c1[2] - c2[2])){\n        cout << 2 << endl;\n    }else if(d == abs(c1[2] - c2[2])){\n        cout << 1 << endl;\n    }else{\n        cout << 0 << endl;\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#include<iostream>\n#include<iomanip>\n#include<algorithm>\n#include<bitset>\n#include<cassert>\n#include<cctype>\n#include<cmath>\n#include<cstdio>\n#include<cstring>\n#include<functional>\n#include<limits>\n#include<list>\n#include<map>\n#include<set>\n#include<stack>\n#include<string>\n#include<sstream>\n#include<queue>\n#include<vector>\nusing namespace std;\n\n#define MOD 1000000007\n#define INF 0x3f3f3f3f\n#define INFL 0x3f3f3f3f3f3f3f3fLL\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n\n//0?¬?\nclass Point {\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0) :x(x), y(y) {}\n\n\tPoint operator+(Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator-(Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator*(double a) { return Point(a * x, a * y); }\n\tPoint operator/(double a) { return Point(x / a, y / a); }\n\tbool operator<(const Point &p)const { return x != p.x ? x < p.x : y < p.y; }\n\tbool operator==(const Point &p)const { return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS; }\n\n\tdouble abs() { return sqrt(norm()); }\n\tdouble norm() { return x*x + y*y; }\n\n\t//Vector????????¢\n\tPoint rotate(double rad) { return Point(x*cos(rad) - y*sin(rad), x*sin(rad) + y*cos(rad)); }\n};\ninline ostream &operator << (ostream &os, const Point &p) { os << p.x << \" \" << p.y; return os; }\ninline istream &operator >> (istream &is, Point &p) { double x, y; is >> x >> y; p = Point(x, y); return is; }\n\n//1?¬?\ntypedef Point Vector;\n\nclass Segment {\npublic:\n\tPoint p1, p2;\n\tSegment(Point p1 = Point(), Point p2 = Point(1, 1)) :p1(p1), p2(p2) {}\n\tVector vec() { return p2 - p1; }\n};\ntypedef Segment Line;\n\n//2?¬?\nclass Circle {\npublic:\n\tPoint c; //center\n\tdouble r; //radius\n\tCircle(Point c = Point(), double r = 0.0) :c(c), r(r) {}\n};\ntypedef vector<Point> Polygon;\n\n//?????? dot product\ndouble dot(Vector a, Vector b) { return a.x*b.x + a.y*b.y; }\n//?????? cross product\ndouble cross(Vector a, Vector b) { return a.x*b.y - a.y*b.x; }\n\n//????????¢??? radian ??? ??? degree\ndouble rad(double deg) { return M_PI*deg / 180; }\n//????§? argument\ndouble arg(Vector p) { return atan2(p.y, p.x); }\n//?\\???¢??? polar form\nVector polar(double r, double a) { return Point(cos(a)*r, sin(a)*r); }\n\n//??´?????????\nbool isOrthogonal(Vector a, Vector b) { return equals(dot(a, b), 0.0); }\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) { return isOrthogonal(a1 - a2, b1 - b2); }\nbool isOrthogonal(Segment s1, Segment s2) { return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0); }\n\n//????????????\nbool isParallel(Vector a, Vector b) { return equals(cross(a, b), 0.0); }\nbool isParallel(Point a1, Point a2, Point b1, Point b2) { return isParallel(a1 - a2, b1 - b2); }\nbool isParallel(Segment s1, Segment s2) { return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0); }\n\n//?°???±\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / base.norm();\n\treturn s.p1 + base*r;\n}\n//????°?\nPoint reflect(Segment s, Point p) { return p + (project(s, p) - p)*2.0; }\n\n//??????(p0,p1)????????????p2???????????¢???\nenum { ONLINE_FRONT = -2, CLOCKWISE, ON_SEGMENT, COUNTER_CLOCKWISE, ONLINE_BACK };\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0, b = p2 - p0;\n\tif (cross(a, b) > EPS)return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS)return CLOCKWISE;\n\tif (dot(a, b) < -EPS)return ONLINE_BACK; //p2 p0 p1\n\tif (a.norm() < b.norm())return ONLINE_FRONT; //p0 p1 p2\n\treturn ON_SEGMENT;\n}\n\n//??´?????¨??´??????????????????\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n\treturn (ccw(p1, p2, p3)*ccw(p1, p2, p4) <= 0 &&\n\t\tccw(p3, p4, p1)*ccw(p3, p4, p2) <= 0);\n}\nbool intersect(Segment s1, Segment s2) { return intersect(s1.p1, s1.p2, s2.p1, s2.p2); }\n//(?????????????¶????)\n\n//2??????????????¢\ndouble getDistance(Point a, Point b) { return (a - b).abs(); }\n//??´?????¨???????????¢\ndouble getDistanceLP(Line l, Point p) { return abs(cross(l.p2 - l.p1, p - l.p1) / (l.p2 - l.p1).abs()); }\n//????????¨???????????¢\ndouble getDistanceSP(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0)return (p - s.p1).abs();\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0)return (p - s.p2).abs();\n\treturn getDistanceLP(s, p);\n}\n//????????¨??????????????¢\ndouble getDistance(Segment s1, Segment s2) {\n\tif (intersect(s1, s2))return 0.0;\n\treturn\tmin(\n\t\tmin(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n\t\tmin(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2))\n\t);\n}\n\n//?????¨??´??????????????????\nbool intersect(Circle c, Line l) { return getDistanceLP(l, c.c) <= c.r; }\n//?????¨???????????????????????±?????\\????????° 4???-1??????\nint intersect(Circle c1, Circle c2) {\n\tint d = getDistance(c1.c, c2.c);\n\tif (d > c1.r + c2.r)return -1;//4\n\tif (d == c1.r + c2.r)return 3;\n\tif (d + c1.r == c2.r || d + c2.r == c1.r)return 1;\n\tif (d + c1.r < c2.r || d + c2.r < c1.r)return 0;\n\treturn 2;\n}\n\n//????????¨???????????????\nPoint getCrossPoint(Segment s1, Segment s2) {\n\tassert(intersect(s1, s2));\n\tVector base = s2.p2 - s2.p1;\n\tdouble a1 = abs(cross(base, s1.p1 - s2.p1)); //area1\n\tdouble a2 = abs(cross(base, s1.p2 - s2.p1)); //area2\n\tdouble t = a1 / (a1 + a2);\n\treturn s1.p1 + (s1.p2 - s1.p1)*t;\n}\n//??´?????¨??´????????????\n//Point getCrossPointLL(Line l1, Line l2) {}\n\n//?????¨??´????????????\npair<Point, Point> getCrossPoints(Circle c, Line l) {\n\tassert(intersect(c, l));\n\tVector pr = project(l, c.c);\n\tVector e = (l.p2 - l.p1) / (l.p2 - l.p1).abs();\n\tdouble base = sqrt(c.r*c.r - (pr - c.c).norm());\n\treturn make_pair(pr + e*base, pr - e*base);\n}\n//?????¨????????????\npair<Point, Point> getCrossPoints(Circle c1, Circle c2) {\n\tassert(intersect(c1, c2));\n\tdouble d = (c1.c - c2.c).abs();\n\tdouble a = acos((c1.r*c1.r + d*d - c2.r*c2.r) / (2 * c1.r*d));\n\tdouble t = arg(c2.c - c1.c);\n\treturn make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n}\n\n//????????????\nenum { OUT = 0, ON, IN };\nint contains(Polygon g, Point p) {\n\tint n = g.size();\n\tbool x = false;\n\tfor (int i = 0; i < n; i++) {\n\t\tPoint a = g[i] - p, b = g[(i + 1) % n] - p;\n\t\tif (abs(cross(a, b)) < EPS&&dot(a, b) < EPS)return ON;\n\t\tif (a.y > b.y)swap(a, b);\n\t\tif (a.y < EPS&&EPS<b.y&&cross(a, b)>EPS)x = !x;\n\t}\n\treturn (x ? IN : OUT);\n}\n\n//????§???¢?????¢???\ndouble area(Polygon g) {\n\tdouble a = 0;\n\tfor (size_t i = 0; i < g.size(); i++)\n\t\ta += cross(g[i], g[(i + 1) % g.size()]);\n\treturn a / 2.0;\n}\n\n//?????§????????????????¨??????????\nbool isConvex(Polygon g) {\n\tfor (int i = 0; i < g.size(); i++)\n\t\tif (ccw(g[i], g[(i + 1) % g.size()], g[(i + 2) % g.size()]) == CLOCKWISE)\n\t\t\treturn false;\n\treturn true;\n}\n\nint main() {\n\tCircle c1, c2;\n\tcin >> c1.c >> c1.r >> c2.c >> c2.r;\n\tcout << (intersect(c1, c2) == -1 ? 4 : intersect(c1, c2)) << endl;\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <iostream>\n#include <string>\n#include <sstream>\n#include <stack>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <map>\n#include <set>\n#include <cstdlib>\n#include <bitset>\n#include <tuple>\n#include <assert.h>\n#include <deque>\n#include <bitset>\n#include <iomanip>\n#include <limits>\n#include <chrono>\n#include <random>\n#include <array>\n#include <unordered_map>\n#include <functional>\n#include <complex>\n#include <numeric>\ntemplate<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return 1; } return 0; }\ntemplate<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return 1; } return 0; }\nconstexpr long long MAX = 5100000;\nconstexpr long long INF = 1LL << 60;\nconstexpr int inf = 1000000007;\n//constexpr long long mod = 1000000007LL;\nconstexpr long long mod = 998244353LL;\nconst long double PI = acos((long double)(-1));\n\nusing namespace std;\ntypedef unsigned long long ull;\ntypedef long long ll;\ntypedef long double ld;\n\n\nusing Real = double;\nusing Point = complex<Real>;\nconst Real EPS = 1e-8;\n\nstruct Circle {\n    Point p;\n    Real r;\n    Circle() :p(Point(0, 0)), r(0) {}\n    Circle(Point _p, Real _r) :p(_p), r(_r) {}\n};\n\nusing Points = vector<Point>;\nusing Circles = vector<Circle>;\n\nbool eq(Real a, Real b) { return abs(a - b) < EPS; }\n\nint intersect(Circle c1, Circle c2) {\n    if (c1.r < c2.r) swap(c1, c2);\n    Real d = abs(c1.p - c2.p);\n    if (c1.r + c2.r < d) return 4;\n    if (eq(c1.r + c2.r, d)) return 3;\n    if (c1.r - c2.r < d) return 2;\n    if (eq(c1.r - c2.r, d)) return 1;\n    return 0;\n}\n\npair<Point, Point> crosspoint(Circle& c1, Circle& c2) {\n    Real d = abs(c1.p - c2.p);\n    Real a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n    Real t = arg(c2.p - c1.p);\n    Point p1 = c1.p + polar(c1.r, t + a);\n    Point p2 = c1.p + polar(c1.r, t - a);\n    return { p1, p2 };\n}\n\n\nbool point_in_circle(Point& p, Circle& c) {\n    Real d = abs(p - c.p);\n    return d < c.r or eq(c.r, d);\n}\n\nCircle circle_scan() {\n    int x, y, r; scanf(\"%d %d %d\", &x, &y, &r);\n    return Circle(Point(x, y), r);\n}\n\nint main()\n{\n    /*\n    cin.tie(nullptr);\n    ios::sync_with_stdio(false);\n    */\n    auto c1 = circle_scan();\n    auto c2 = circle_scan();\n    cout << intersect(c1, c2) << endl;\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nusing vi = vector<int>; using vvi = vector<vi>; using vvvi = vector<vvi>;\nusing ll = long long int;\nusing vll = vector<ll>; using vvll = vector<vll>; using vvvll = vector<vvll>;\nusing vd = vector<double>; using vvd = vector<vd>; using vvvd = vector<vvd>;\nusing P = pair<int, int>;\nusing Pll = pair<ll, ll>;\nusing cdouble = complex<double>;\n\nconst double eps = 1e-7;\nconst double INFD = numeric_limits<double>::infinity();\n#define Loop(i, n) for(int i = 0; i < int(n); i++)\n#define Loopll(i, n) for(ll i = 0; i < ll(n); i++)\n#define Loop1(i, n) for(int i = 1; i <= int(n); i++)\n#define Loopll1(i, n) for(ll i = 1; i <= ll(n); i++)\n#define Loopr(i, n) for(int i = int(n) - 1; i >= 0; i--)\n#define Looprll(i, n) for(ll i = ll(n) - 1; i >= 0; i--)\n#define Loopr1(i, n) for(int i = int(n); i >= 1; i--)\n#define Looprll1(i, n) for(ll i = ll(n); i >= 1; i--)\n#define Foreach(buf, container) for(auto buf : container)\n#define Loopdiag(i, j, h, w, sum) for(int i = ((sum) >= (h) ? (h) - 1 : (sum)), j = (sum) - i; i >= 0 && j < (w); i--, j++)\n#define Loopdiagr(i, j, h, w, sum) for(int j = ((sum) >= (w) ? (w) - 1 : (sum)), i = (sum) - j; j >= 0 && i < (h); j--, i++)\n#define Loopdiagsym(i, j, h, w, gap) for (int i = ((gap) >= 0 ? (gap) : 0), j = i - (gap); i < (h) && j < (w); i++, j++)\n#define Loopdiagsymr(i, j, h, w, gap) for (int i = ((gap) > (h) - (w) - 1 ? (h) - 1 : (w) - 1 + (gap)), j = i - (gap); i >= 0 && j >= 0; i--, j--)\n#define Loopitr(itr, container) for(auto itr = container.begin(); itr != container.end(); itr++)\n#define printv(vector) Loop(ex_i, vector.size()) { cout << vector[ex_i] << \" \"; } cout << endl;\n#define printmx(matrix) Loop(ex_i, matrix.size()) { Loop(ex_j, matrix[ex_i].size()) { cout << matrix[ex_i][ex_j] << \" \"; } cout << endl; }\n#define quickio() ios::sync_with_stdio(false); cin.tie(0);\n#define bitmanip(m,val) static_cast<bitset<(int)m>>(val)\n#define Comp(type_t) bool operator<(const type_t &another) const\n#define fst first\n#define snd second\n#define INF INFINITY\nbool feq(double x, double y) { return abs(x - y) <= eps; }\nbool fge(double x, double y) { return x >= y - eps; }\ndouble fsqrt(double x) { return feq(x, 0) ? 0 : sqrt(x); }\nbool inrange(ll x, ll t) { return x >= 0 && x < t; }\nbool inrange(vll xs, ll t) { Foreach(x, xs) if (!(x >= 0 && x < t)) return false; return true; }\nint ceillog2(ll x) { int ret = 0;\tx--; while (x > 0) { ret++; x >>= 1; } return ret; }\nll rndf(double x) { return (ll)(x + (x >= 0 ? 0.5 : -0.5)); }\nll floorsqrt(ll x) { ll m = (ll)sqrt((double)x); return m + (m * m <= x ? 0 : -1); }\nll ceilsqrt(ll x) { ll m = (ll)sqrt((double)x); return m + (x <= m * m ? 0 : 1); }\nll rnddiv(ll a, ll b) { return (a / b + (a % b * 2 >= b ? 1 : 0)); }\nll ceildiv(ll a, ll b) { return (a / b + (a % b == 0 ? 0 : 1)); }\nll gcd(ll m, ll n) { if (n == 0) return m; else return gcd(n, m % n); }\nll lcm(ll m, ll n) { return m * n / gcd(m, n); }\n\n/*******************************************************/\n\n// Ongoing\n\n\nstruct pt_t {\n\tdouble x, y;\n\tpt_t operator+(const pt_t &p) { return { x + p.x, y + p.y }; }\n\tpt_t operator-(const pt_t &p) { return { x - p.x, y - p.y }; }\n\tpt_t operator*(const double &c) { return { x * c, y * c }; }\n\tbool operator<(const pt_t &another) const {\n\t\treturn (x != another.x ? x < another.x : y < another.y);\n\t}\n};\n\n// aX + bY + c = 0\nstruct line_t {\n\tdouble a, b, c;\n};\n\n// (X - x)^2 + (Y - y)^2 = r^2\nstruct circle_t {\n\tdouble x, y, r;\n};\n\n// normal vector = (a, b), passing p\nline_t solve_line(double a, double b, pt_t p) {\n\treturn { a, b, -a * p.x - b * p.y };\n}\n\n// passing p, q\nline_t solve_line(pt_t p, pt_t q) {\n\treturn solve_line(q.y - p.y, -q.x + p.x, p);\n}\n\n// t should be radius\npt_t rot(pt_t p, double r) {\n\treturn {\n\t\tcos(r) * p.x - sin(r) * p.y,\n\t\tsin(r) * p.x + cos(r) * p.y\n\t};\n}\n\ndouble norm2(pt_t p) {\n\treturn p.x * p.x + p.y * p.y;\n}\n\ndouble norm(pt_t p) {\n\treturn sqrt(norm2(p));\n}\n\n// angle [0, 2PI) of vector p to vector q\ndouble angle(pt_t p, pt_t q) {\n\tp = p * (1.0 / norm(p));\n\tq = q * (1.0 / norm(q));\n\tdouble r0 = acos(max(min(p.x * q.x + p.y * q.y, 1.0), -1.0));\n\tdouble r1 = asin(max(min(p.x * q.y - p.y * q.x, 1.0), -1.0));\n\tif (r1 >= 0) return r0;\n\telse return 2 * M_PI - r0;\n}\n\ndouble dist(line_t l, pt_t p) {\n\treturn abs(l.a * p.x + l.b * p.y + l.c)\n\t\t/ sqrt(l.a * l.a + l.b * l.b);\n}\n\nbool on_same_line(pt_t t, pt_t p) {\n\tline_t l = solve_line({ 0, 0 }, t);\n\tif (feq(dist(l, p), 0)) return true;\n\telse return false;\n}\n\nbool on_same_halfline(pt_t t, pt_t p) {\n\tline_t l = solve_line({ 0, 0 }, t);\n\tif (feq(dist(l, p), 0) && feq(angle(t, p), 0)) return true;\n\telse return false;\n}\n\ndouble in_segment(pt_t s, pt_t t, pt_t p) {\n\tif (on_same_halfline(t - s, p - s) && on_same_halfline(s - t, p - t)) {\n\t\treturn true;\n\t}\n\telse return false;\n}\n\n// (NAN, NAN) if lines coincide with each other\n// (INF, INF) if lines are parallel but not coincide\npt_t cross_point(line_t l, line_t m) {\n\tdouble d = l.a * m.b - l.b * m.a;\n\tif (feq(d, 0)) {\n\t\tif (feq(l.a * m.c - l.c * m.a, 0)) return { INF, INF };\n\t\telse return { NAN, NAN };\n\t}\n\telse {\n\t\tdouble x = l.b * m.c - m.b * l.c;\n\t\tdouble y = l.a * m.c - m.a * l.c;\n\t\treturn { x / d, y / -d };\n\t}\n}\n\n// if size is 0, then not crossed\nvector<pt_t> cross_point(circle_t f, line_t l) {\n\tdouble d = dist(l, { f.x, f.y });\n\tif (!fge(f.r, d)) return {};\n\tline_t m = solve_line(l.b, -l.a, { f.x, f.y });\n\tpt_t p = cross_point(l, m);\n\tif (feq(d, f.r)) return { p };\n\telse {\n\t\tpt_t u = { l.b, -l.a };\n\t\tpt_t v = u * (sqrt(pow(f.r, 2) - pow(d, 2)) / norm(u));\n\t\treturn { p + v, p - v };\n\t}\n}\n\n// if size is 0, then not crossed\nvector<pt_t> cross_point(circle_t f, circle_t g) {\n\tline_t l = {\n\t\t-2 * f.x + 2 * g.x,\n\t\t-2 * f.y + 2 * g.y,\n\t\t(f.x * f.x + f.y * f.y - f.r * f.r) - (g.x * g.x + g.y * g.y - g.r * g.r)\n\t};\n\treturn cross_point(f, l);\n}\n\n// tangent points of f through p\n// if size is 0, then p is strictly contained in f\n// if size is 1, then p is on f\n// otherwise size is 2\nvector<pt_t> tangent_point(circle_t f, pt_t p) {\n\tvector<pt_t> ret;\n\tdouble d2 = norm2(pt_t({ f.x, f.y }) - p);\n\tdouble r2 = d2 - f.r * f.r;\n\tif (fge(r2, 0)) {\n\t\tcircle_t g = { p.x, p.y, fsqrt(r2) };\n\t\tret = cross_point(f, g);\n\t}\n\treturn ret;\n}\n\n// tangent lines of f through p\n// if size is 0, then p is strictly contained in f\n// if size is 1, then p is on f\n// otherwise size is 2\nvector<line_t> tangent_line(circle_t f, pt_t p) {\n\tvector<pt_t> qs = tangent_point(f, p);\n\tvector<line_t> ret(qs.size());\n\tLoop(i, ret.size()) {\n\t\tret[i] = solve_line(qs[i].x - f.x, qs[i].y - f.y, qs[i]);\n\t}\n\treturn ret;\n}\n\n// tangent points on f through which there is a line tangent to g\n// if size is 0, then one is strictly contained in the other\n// if size is 1, then they are touched inside\n// if size is 2, then they are crossed\n// if size is 3, then they are touched outside\n// otherwise size is 4\nvector<pt_t> tangent_point(circle_t f, circle_t g) {\n\tvector<pt_t> ret;\n\tdouble d2 = norm2({ g.x - f.x, g.y - f.y });\n\tvector<double> r2(2);\n\tr2[0] = d2 - f.r * f.r + 2 * f.r * g.r;\n\tr2[1] = d2 - f.r * f.r - 2 * f.r * g.r;\n\tLoop(k, 2) {\n\t\tif (fge(r2[k], 0)) {\n\t\t\tcircle_t g2 = { g.x, g.y, fsqrt(r2[k]) };\n\t\t\tvector<pt_t> buf = cross_point(f, g2);\n\t\t\tLoop(i, buf.size()) ret.push_back(buf[i]);\n\t\t}\n\t}\n\treturn ret;\n}\n\n// common tangent lines between two circles\n// if size is 0, then one is strictly contained in the other\n// if size is 2, then they are crossed\n// if size is 3, then they are touched\n// otherwise size is 4\nvector<line_t> tangent_line(circle_t f, circle_t g) {\n\tvector<pt_t> qs = tangent_point(f, g);\n\tvector<line_t> ret(qs.size());\n\tLoop(i, ret.size()) {\n\t\tret[i] = tangent_line(f, qs[i]).front();\n\t}\n\treturn ret;\n}\n\nint main() {\n\tcout << fixed << setprecision(12);\n\tcircle_t f;\n\tcin >> f.x >> f.y >> f.r;\n\tcircle_t g;\n\tcin >> g.x >> g.y >> g.r;\n\tvector<pt_t> ans = tangent_point(f, g);\n\tcout << ans.size() << endl;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\n#define REP(i,n) for(int i=0,_n=(int)(n);i<_n;++i)\n#define ALL(v) (v).begin(),(v).end()\n#define CLR(t,v) memset(t,(v),sizeof(t))\ntemplate<class T1,class T2>ostream& operator<<(ostream& os,const pair<T1,T2>&a){return os<<\"(\"<<a.first<<\",\"<<a.second<< \")\";}\ntemplate<class T>void pv(T a,T b){for(T i=a;i!=b;++i)cout<<(*i)<<\" \";cout<<endl;}\ntemplate<class T>void chmin(T&a,const T&b){if(a>b)a=b;}\ntemplate<class T>void chmax(T&a,const T&b){if(a<b)a=b;}\n\n\ntypedef long double D;\nconst D PI = acos(-1.0);\nconst D EPS = 1e-10;\nstruct P {\n  D x, y;\n  P(D x=0, D y=0) : x(x), y(y) {}\n\n  P& operator+=(const P& o) { x += o.x; y += o.y; return *this; }\n  P& operator-=(const P& o) { x -= o.x; y -= o.y; return *this; }\n  P& operator*=(const P& o) { return *this = {x*o.x - y*o.y, x*o.y + y*o.x}; }\n  P& operator*=(const D& r) { x *= r; y *= r; return *this; }\n  P& operator/=(const D& r) { x /= r; y /= r; return *this; }\n  P operator-() const { return {-x, -y}; }\n\n  D norm() const { return x*x + y*y; }\n  D abs() const { return sqrt(norm()); }\n  D arg() const { return atan2(y, x); }\n  bool isZero() const { return std::abs(x) < EPS && std::abs(y) < EPS; }\n  /** 象限 */\n  int orth() const { return y >= 0 ? (x >= 0 ? 1 : 2) : (x < 0 ? 3 : 4); }\n  static P polar(const D& rho, const D& theta = 0) { return {rho * cos(theta), rho * sin(theta)}; }\n};\nstd::ostream &operator<<(std::ostream &os, P const &p) { return os << \"(\" << p.x << \", \" << p.y << \")\"; }\nstd::istream &operator>>(std::istream &is, P &p) { D a, b; is >> a >> b; p = P(a, b); return is; }\nP operator+(const P& p, const P& q) { return P(p) += q; }\nP operator-(const P& p, const P& q) { return P(p) -= q; }\nP operator*(const P& p, const P& q) { return P(p) *= q; }\nP operator*(const P& p, const D& r) { return P(p) *= r; }\nP operator/(const P& p, const D& r) { return P(p) /= r; }\nP operator*(const D& r, const P& p) { return P(p) *= r; }\nP operator/(const D& r, const P& p) { return P(p) /= r; }\nD crs(const P& a, const P& b){ return a.x*b.y - a.y*b.x; }\nD dot(const P& a, const P& b){ return a.x*b.x + a.y*b.y; }\nint signum(D x) {return x > EPS ? +1 : x < -EPS ? -1 : 0;}\n\nint ccw(const P& a, P b, P c) {\n  // return signum(crs(b - a, c - a));\n  b -= a; c -= a;\n  if (crs(b, c) > 0)       return +1;       // counter clockwise\n  if (crs(b, c) < 0)       return -1;       // clockwise\n  if (dot(b, c) < 0)       return +2;       // c--a--b on line\n  if (b.norm() < c.norm()) return -2;       // a--b--c on line\n  return 0;\n}\nP intersectionLL(const P& a1, const P& a2, const P& b1, const P& b2){\n  P a = a2 - a1; P b = b2 - b1;\n  return a1 + a * crs(b, b1-a1) / crs(b, a);\n}\n// 凸多角形をある直線で切断し、左側を残す。\n// 凸多角形は半時計回りに与えられていること\nvector<P> convexCut(const vector<P>& ps, const P& p1, const P& p2) {\n  vector<P> ret;\n  int N = ps.size();\n  REP(i,N){\n      P a = ps[i];\n      P b = ps[(i+1)%N];\n      if( ccw(p1, p2, a) != -1 ) ret.push_back(a);\n      if( ccw(p1, p2, a) * ccw(p1, p2, b) == -1 )\n          ret.push_back( intersectionLL(a,b,p1,p2) );\n  }\n  return ret;\n}\n double area(const vector<P> &v) {\n  double ret = 0.0;\n  REP(i, v.size()) ret += crs(v[i], v[(i+1) % v.size()]);\n  return abs(ret / 2.0);\n}\n\nstruct C : public P {\n  D r;\n  C() {}\n  C(const P &p, D r):P(p),r(r){}\n};\n\n// 円cと点pの接点をvectorで返す\nvector<P> contactCP(C c, P p){\n  vector<P> ret;\n  D dist2 = (p - c).norm();\n  D r2 = c.r * c.r;\n  if( abs( r2 - dist2 ) < EPS ){ // 点が円周上にある\n    ret.push_back( p );\n    return ret;\n  }\n  if( r2 > dist2 ){ //点が円の内部にある\n    return ret;\n  }\n  P q1 = (p - c) * ( r2 / dist2 );\n  P q2 = (p - c) * P(0, 1) * (c.r * sqrt(dist2 - r2) / dist2);\n  ret.push_back(c + q1 + q2);\n  ret.push_back(c + q1 - q2);\n  return ret;\n}\n\n// 2円の共通接線\nvector<P> contactCC(const C& c1, const C& c2){\n  vector<P> res;\n  if (abs(c1.r - c2.r) < EPS) { // 外接線が平行\n    P dir = c2 - c1;\n    dir = dir * c1.r / dir.abs() * P(0,1);\n    res.push_back(c1 + dir);\n    res.push_back(c2 + dir);\n    res.push_back(c1 - dir);\n    res.push_back(c2 - dir);\n  } else {\n    P p = (c1 * -c2.r + c2 * c1.r) / (c1.r - c2.r);\n    vector<P> ps = contactCP(c1, p);\n    vector<P> qs = contactCP(c2, p);\n    for (int i = 0; i < (int)ps.size() && i < (int)qs.size(); i++) {\n      res.push_back(ps[i]);\n      res.push_back(qs[i]);\n    }\n  }\n  //内接線\n  P p = (c1 * c2.r + c2 * c1.r) / (c1.r + c2.r);\n  vector<P> ps = contactCP(c1, p);\n  vector<P> qs = contactCP(c2, p);\n  for (int i = 0; i < (int)ps.size() && i < (int)qs.size(); i++) {\n    res.push_back(ps[i]);\n    res.push_back(qs[i]);\n  }\n  return res;\n}\n\nint main2() {\n  P p1, p2;\n  double r1, r2;\n  cin >> p1 >> r1;\n  cin >> p2 >> r2;\n  C c1 = C(p1, r1);\n  C c2 = C(p2, r2);\n  vector<P> tangents = contactCC(c1, c2);\n  cout << tangents.size() / 2 << endl;\n  return 0;\n}\n\nint main() {\n\n#ifdef LOCAL\n  for (;!cin.eof();cin>>ws)\n#endif\n    main2();\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\nconst double EPS = 1e-9;   // 許容誤差。問題によって変える\ntypedef complex<double> P; // Point\n//点の座標は複素数で持つ\n#define X real()\n#define Y imag()\n\nnamespace std{\nbool operator<(const P p1, const P p2)\n{\n    return p1.X != p2.X ? p1.X < p2.X : p1.Y < p2.Y;\n}\nP operator+(const P p1, const P p2) { return P(p1.X + p2.X, p1.Y + p2.Y); }\nP operator-(const P p1, const P p2) { return P(p1.X - p2.X, p1.Y - p2.Y); }\nP operator*(const P p, double k) { return P(p.X * k, p.Y * k); }\nP operator/(const P p, double k) { return P(p.X / k, p.Y / k); }\n} // namespace std\n//ここまで写経必須\n\n//Segment/L\nstruct Segment{\n    P p1, p2;\n    Segment() {}\n    Segment(P p1, P p2) : p1(p1), p2(p2) {}\n};\ntypedef Segment L;\n\n//Circle\nstruct Circle{\n    P p;\n    double r;\n    Circle(const P &p, double r) : p(p), r(r) {}\n};\ntypedef Circle C;\n\ntypedef vector<P> G;\n//ノルム\n//二点a,bを投げるとノルム(a1-b1)^2+(a2-b2)^2を返す\ndouble norm(P &p1, P &p2){\n    return (p1.X - p2.X) * (p1.X - p2.X) + (p1.Y - p2.Y) * (p1.Y - p2.Y);\n}\n\n//外積cross(a,b) = |a||b|sinθ=a1b2-a2b1\n//二点a,bを投げると外積を返す\ndouble cross(const P &a, const P &b){\n    return (conj(a) * b).Y;\n}\n\n//内積dot(a,b) = |a||b|cosθ=a1b1+a2b2\n//二点a,bを投げると内積を返す\ndouble dot(const P &a, const P &b){\n    return (conj(a) * b).X;\n}\n\n//射影\n//L(又はS)と点Pを投げるとLへPを射影した座標を返す\n//依存:dot,norm\nP Projection(L l, P p){\n    P base = l.p2 - l.p1;                        //始点\n    double r = dot(p - l.p1, base) / norm(base); //線分に対する倍率の計算\n    return l.p1 + base * r;\n}\n\n//鏡映\n//L(又はS)と点Pを投げるとLを軸としたPの鏡像座標を返す\n//依存:Projection,dot,norm\nP Reflection(L l, P p){\n    return p + (Projection(l, p) - p) * 2.0;\n}\n\n//位置関係判定(線分abを軸にcがどちら側にあるか)\n//三点a,b,cを投げることで，a-bを軸として\n//時計回りの場合:1,反時計回りの場合:-1,c-a-bの並び:2,a-b-cの並び:-2\n//その他（重なってる等）:0\n//依存:cross,dot,norm\nint ccw(P a, P b, P c)\n{\n    b -= a;\n    c -= a; //aからの向きを考える\n    if (cross(b, c) > EPS)\n        return +1; //clockwise\n    else if (cross(b, c) < -EPS)\n        return -1; //counter clockwise\n    else if (dot(b, c) < -EPS)\n        return +2; //c-a-b\n    else if (norm(b) < norm(c))\n        return -2; //a-b-c\n    else\n        return 0; //他\n}\n\n//Intersection Determination\n//L,S,Pそれぞれのペアの交差判定，PPは直接比較できるのでないです\n//それぞれのペアを投げる,引数の順番は関数名に記載\n//交差又は含まれている場合true,そうでない場合falseを返す\n\n//依存:cross\nbool intersectLL(const L &l, const L &m)\n{\n    return abs(cross(l.p2 - l.p1, m.p2 - m.p1)) > EPS || // non-parallel\n           abs(cross(l.p2 - l.p1, m.p1 - l.p1)) < EPS;   // same L\n}\n//依存:cross\nbool intersectLS(const L &l, const L &s)\n{\n    return cross(l.p2 - l.p1, s.p1 - l.p1) * // s.p1 is left of l\n               cross(l.p2 - l.p1, s.p2 - l.p1) <\n           EPS; // s.p2 is right of l\n}\n//依存:cross\nbool intersectLP(const L &l, const P &p)\n{\n    return abs(cross(l.p2 - p, l.p1 - p)) < EPS;\n}\n//依存:ccw,cross,dot,norm\nbool intersectSS(const L &s, const L &t)\n{\n    return ccw(s.p1, s.p2, t.p1) * ccw(s.p1, s.p2, t.p2) <= 0 &&\n           ccw(t.p1, t.p2, s.p1) * ccw(t.p1, t.p2, s.p2) <= 0;\n}\n\nbool intersectSP(const L &s, const P &p)\n{\n    return abs(s.p1 - p) + abs(s.p2 - p) - abs(s.p2 - s.p1) < EPS; // triangle inequality\n}\n\n//distance\n//L,S,Pについてペアを投げるとその距離を計算\n//引数の順番は関数名参照\n\n//依存:Projection,dot,norm\ndouble distanceLP(const L &l, const P &p)\n{\n    return abs(p - Projection(l, p));\n}\n//依存:intersectLL,cross,distanceLP,Projection,dot,norm\ndouble distanceLL(const L &l, const L &m)\n{\n    return intersectLL(l, m) ? 0 : distanceLP(l, m.p1);\n}\n//依存:intersectLS,cross,distanceLP,Projection,dot,norm\ndouble distanceLS(const L &l, const L &s)\n{\n    if (intersectLS(l, s))\n        return 0;\n    return min(distanceLP(l, s.p1), distanceLP(l, s.p2));\n}\n//依存:intersectSP,Projection,dot,norm\ndouble distanceSP(const L &s, const P &p)\n{\n    const P r = Projection(s, p);\n    if (intersectSP(s, r))\n        return abs(r - p);\n    return min(abs(s.p1 - p), abs(s.p2 - p));\n}\n//依存:intersectSS,ccw,cross,dot,norm,distanceSP,intersectSP,Projection\ndouble distanceSS(const L &s, const L &t)\n{\n    if (intersectSS(s, t))\n        return 0;\n    return min(min(distanceSP(s, t.p1), distanceSP(s, t.p2)),\n               min(distanceSP(t, s.p1), distanceSP(t, s.p2)));\n}\n\ndouble distancePP(const P &p1, const P &p2)\n{\n    return abs(p1 - p2);\n}\n//二本のL(又はS)を投げると交点座標を返す\n//一致している場合は一本目のp1を返します\n//交わっていない場合はfalseを返します\n//依存:cross\nP crosspoint(const L &l, const L &m)\n{\n    double A = cross(l.p2 - l.p1, m.p2 - m.p1);\n    double B = cross(l.p2 - l.p1, l.p2 - m.p1);\n    if (abs(A) < EPS && abs(B) < EPS)\n        return l.p1; // same line\n    if (abs(A) < EPS)\n        assert(false); // !!!PRECONDITION NOT SATISFIED!!!\n    return m.p1 + B / A * (m.p2 - m.p1);\n}\n\n#define curr(P, i) P[i]\n#define next(P, i) P[(i + 1) % P.size()]\n#define diff(P, i) (next(P, i) - curr(P, i))\ndouble ConvDia(const G &g)\n{\n    const int n = g.size();\n    int is = 0, js = 0;\n    for (int i = 1; i < n; i++)\n    {\n        if (imag(g[i]) > imag(g[is])) //点対はy座標の大きいものと小さいもののセット\n            is = i;\n        if (imag(g[i]) < imag(g[js]))\n            js = i;\n    }\n    double ans = abs(g[is] - g[js]);\n    int i = is, maxi = is, j = js, maxj = js;\n    do\n    {\n        if (cross(diff(g, i), diff(g, j)) >= 0)\n            j = (j + 1) % n;\n        else\n            i = (i + 1) % n;\n        if (abs(g[i] - g[j]) > ans)\n        {\n            ans = abs(g[i] - g[j]);\n            maxi = i;\n            maxj = j;\n        }\n    }while (i != is or j != js);\n    return ans;\n}\ndouble area(const G &g){\n    double ans = 0;\n    for (int i = 0; i < g.size(); i++)\n        ans += cross(g[i], g[(i + 1) % g.size()]);\n    return abs(ans / 2);\n}\n//円に関するもの置き場\n\n//円と直線の交点\n//円と直線を投げるとその交点二つを返す\n//依存:Projection,diatanceLP\nvector<P> crosspointCL(const C &c, const L &l)\n{\n    vector<P> res;\n    double d = distanceLP(l, c.p); // 中心と直線の距離\n    if (abs(d - c.r) < EPS)\n    { // 触れている\n        res.push_back(Projection(l, c.p));\n        return res;\n    }\n    if (d > c.r)\n        return res; // 離れている\n    P h = Projection(l, c.p);\n    P u = sqrt(c.r * c.r - d * d) * (l.p2 - l.p1) / abs(l.p2 - l.p1);\n    res.push_back(h + u);\n    res.push_back(h - u);\n    return res;\n}\n\n//円と円の交差判定\n//円を二つ投げると値を返します\n//離れている:0 外接:-2 c1＞c2内接:-1 c2>c1内接:1 c1inc2:3 c2inc1:-3 交点二つ:2\nint intersectCC(const C &c1, const C &c2)\n{\n    double d = abs(c1.p - c2.p), r1 = c1.r, r2 = c2.r;\n    if (r1 + r2 < d)\n        return 0; // 離れている\n    if (abs(r1 + r2 - d) < EPS)\n        return -2; // 外接\n    if (abs(d + r1 - r2) < EPS)\n        return +1; // c1 が c2 の中で内接\n    if (abs(d + r2 - r1) < EPS)\n        return -1; // c2 が c1 の中で内接\n    if (d + r1 < r2)\n        return +3; // c1 が c2 の中\n    if (d + r2 < r1)\n        return -3; // c2 が c1 の中\n    return 2;      // 2つの交点を持つ\n}\n\n//円と円の交点\n//円を二つ投げると交点が入ったvectorを返す\n//交点なしor一致の場合空で返す\nvector<P> crosspointCC(const C &c1, const C &c2){\n    vector<P> res;\n    double r1 = c1.r, r2 = c2.r, d = abs(c1.p - c2.p);\n    if (abs(c1.p - c2.p) < 0)\n        return res; // 中心が同じ\n    int i = intersectCC(c1, c2);\n    if (i == +1 || i == -1)\n    { // 内接\n        if (r2 < r1)\n            res.push_back(c1.p + r1 / d * (c2.p - c1.p));\n        else\n            res.push_back(c2.p + r2 / d * (c1.p - c2.p));\n        return res;\n    }\n    if (i == -2)\n    { // 外接\n        res.push_back((c1.p * c1.r + c2.p * c2.r) / (c1.r + c2.r));\n        return res;\n    }\n    if (i == 0 || i == +3 || i == -3)\n    { // 共通部分なし || 内部\n        return res;\n    }\n    // 2つの交点を持つ\n    P p = c1.p - c2.p;\n    double A = -2. * p.real(), B = 2 * p.imag();\n    double C = norm(c1.p) - norm(c2.p) - r1 * r1 + r2 * r2;\n    L l;\n    if (abs(A) < EPS)\n    {\n        l = L(P(0, -C / B), P(1, -C / B));\n    }\n    else if (abs(B) < EPS)\n    {\n        l = L(P(-C / A, 0), P(-C / A, 1));\n    }\n    else\n    {\n        l = L(P(0, -C / B), P(-C / A, 0));\n    }\n    return crosspointCL(c1,l); // Ax + By + C = 0\n}\nint main(){\n    double x1,y1,r1,x2,y2,r2;\n    cin>>x1>>y1>>r1>>x2>>y2>>r2;\n    C c1 = C(P(x1, y1), r1), c2 = C(P(x2, y2), r2);\n    int ans = intersectCC(c1, c2),res;\n    if(ans==0)        res = 4;\n    else if(ans==1 or ans==-1) res=1;\n    else if(ans==2) res=2;\n    else if(ans==3 or ans==-3) res=0;\n    else if(ans==-2) res=3;\n    cout << res << endl;\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nint main() {\n  double x1,y1,r1,x2,y2,r2;\n  cin>>x1>>y1>>r1>>x2>>y2>>r2;\n  double d=sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));\n  if(r1>r2)swap(r1,r2);\n  int a=2;\n  if(d>r1+r2)a=4;\n  if(d==r1+r2)a=3;\n  if(d==r2-r1)a=1;\n  if(d+r1<r2)a=0;\n  cout<<a<<endl;\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cmath>\nusing namespace std;\n\nint main(){\n  int n;\n  float x,y,r,x_,y_,r_,dis;\n\n  cin >> x >> y >> r >> x_ >> y_ >> r_;\n  dis = sqrt( (x-x_)* (x-x_) +  (y-y_)* (y-y_) );\n\n  if(r+r_ < dis){\n    cout << 4 <<endl;\n  }else{\n    if(r+r_ == dis){\n      cout << 3 <<endl;\n    }else if( r+ r_ > dis && abs(r-r_)<dis ){\n      cout << 2 <<endl;\n    }else if( dis  == abs(r - r_)){\n      cout << 1 <<endl;\n    }else{\n      cout << 0 <<endl;\n    }\n  }\n\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\n\n\n\nint main() {\n    float x1 = 0;\n    float y1 = 0;\n    float r1 = 7;\n\n    float x2 = 0;\n    float y2 = 0;\n    float r2 = 1;\n\n    std::cin >> x1 >> y1 >> r1;\n    std::cin >> x2 >> y2 >> r2;\n\n    float d = sqrt(pow((x1 - x2),2) + pow((y1 - y2),2)); // TODO: provide type safety\n\n    if((r1 + r2) < d){\n        std::cout << 4 << std::endl;\n    }\n    else if((r1 + r2) > d){\n        if(abs(r1 - r2) == d){\n            std::cout << 1 << std::endl;\n            return 0;\n        }else if(abs(r1 - r2) > d){\n            std::cout << 0 << std::endl;\n            return 0;\n        }\n        std::cout << 2 << std::endl;\n    }\n    else std::cout << 3 << std::endl;\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint main() {\n\n\tint c1x, c1y, c1r;\n\tint c2x, c2y, c2r;\n\n\tcin >> c1x >> c1y >> c1r;\n\tcin >> c2x >> c2y >> c2r;\n\n\tdouble distanceCenter = sqrt(pow(c2x - c1x, 2) + pow(c2y - c1y, 2));\n\tdouble sumRange = c1r + c2r;\n\n\tif (distanceCenter > sumRange)\n\t\tcout << \"4\" << endl;\n\telse if (distanceCenter == sumRange)\n\t\tcout << \"3\" << endl;\n\telse if (distanceCenter < sumRange &&\n\t\tdistanceCenter > abs(c1r - c2r))\n\t\tcout << \"2\" << endl;\n\telse if (distanceCenter == abs(c1r - c2r))\n\t\tcout << \"1\" << endl;\n\telse\n\t\tcout << \"0\" << endl;\n\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#pragma region Geometry\nconst double EPS=1e-8,PI=acos(-1);\ninline bool EQ(double a,double b){return fabs(b-a)<EPS;}\n\nstatic const int COUNTER_CLOCKWISE=1;\nstatic const int CLOCKWISE=-1;\nstatic const int ONLINE_BACK=2;\nstatic const int ONLINE_FRONT=-2;\nstatic const int ON_SEGMENT=0;\n\nstruct Point{\n    double x,y;\n    Point(){}\n    Point(double x,double y):x(x),y(y){}\n    Point operator+(Point p) const {return Point{x+p.x,y+p.y};}\n    Point operator-(Point p) const {return Point{x-p.x,y-p.y};}\n    Point operator*(double t) const {return Point{x*t,y*t};}\n    Point operator*(Point p) const {return Point{x*p.x-y*p.y,x*p.y+y*p.x};}\n    Point operator/(double t) const {return Point{x/t,y/t};}\n    bool operator<(const Point &p) const {\n        return x!=p.x?x<p.x:y<p.y;\n    }\n    bool operator==(const Point &p) const {\n        return fabs(x-p.x)<EPS&&fabs(y-p.y)<EPS;\n    }\n    friend istream &operator>>(istream &is,Point &p){\n        is >> p.x >> p.y;\n        return is;\n    }\n    friend ostream &operator<<(ostream &os,Point p){\n        os << fixed << setprecision(10) << p.x << ' ' << p.y;\n        return os;\n    }\n};\n\nstruct Line{\n    Point a,b;\n    Line(){}\n    Line(Point a,Point b):a(a),b(b){}\n    friend istream &operator>>(istream &is,Line &l){\n        is >> l.a >> l.b;\n        return is;\n    }\n    friend ostream &operator<<(ostream &os,Line l){\n        os << l.a << \" to \" << l.b;\n        return os;\n    }\n};\n\nstruct Segment:Line{\n    Segment(){}\n    Segment(Point a,Point b):Line(a,b){}\n};\n\nstruct Circle{\n    Point c;\n    double r;\n    Circle(){}\n    Circle(Point c,double r):c(c),r(r){}\n    friend istream &operator>> (istream &is,Circle &c){\n        is >> c.c >> c.r;\n        return is;\n    }\n    friend ostream &operator<<(ostream &os,Circle &c){\n        os << c.c << ' ' << c.r;\n        return os;\n    }\n};\n\ntypedef vector<Point> Polygon;\nistream &operator>>(istream &is,Polygon &p){\n    for (int i=0;i<p.size();++i) is >> p[i];\n    return is;\n}\n\ndouble dot(const Point &a,const Point &b){\n    return a.x*b.x+a.y*b.y;\n}\ndouble cross(const Point &a,const Point &b){\n    return a.x*b.y-a.y*b.x;\n}\ndouble norm(const Point &a){\n    return a.x*a.x+a.y*a.y;\n}\ndouble abs(const Point &a){\n    return sqrt(norm(a));\n}\n\n// https://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/1/CGL_1_A\nPoint proj(const Line &l,const Point &p){\n    double t=dot(p-l.a,l.b-l.a)/norm(l.b-l.a);\n    return l.a+(l.b-l.a)*t;\n}\n// https://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/1/CGL_1_B\nPoint refl(const Line &l,const Point &p){\n    return p+(proj(l,p)-p)*2.0;\n}\n\nPoint rotate(const Point &p,double theta){\n    return Point(cos(theta)*p.x-sin(theta)*p.y,sin(theta)*p.x+cos(theta)*p.y);\n}\ndouble arg(const Point &p){\n    return atan2(p.y,p.x);\n}\ndouble get_angle(const Point &a,const Point &b,const Point &c){\n    const Point v=b-a,w=c-b;\n    double alpha=arg(v),beta=arg(w);\n    if (alpha>beta) swap(alpha,beta);\n    double theta=beta-alpha;\n    return min(theta,2*PI-theta);\n}\n\n// https://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/1/CGL_1_C\nint ccw(const Point &a,Point b,Point c){\n    b=b-a,c=c-a;\n    if (cross(b,c)>EPS) return COUNTER_CLOCKWISE;\n    if (cross(b,c)<-EPS) return CLOCKWISE;\n    if (dot(b,c)<-EPS) return ONLINE_BACK;\n    if (norm(b)<norm(c)) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\n// https://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/2/CGL_2_A\nbool orthogonal(const Point &a,const Point &b){\n    return EQ(dot(a,b),0.0);\n}\nbool orthogonal(const Point &a,const Point &b,const Point &c,const Point &d){\n    return orthogonal(b-a,d-c);\n}\nbool orthogonal(const Line &l,const Line &m){\n    return EQ(dot(l.b-l.a,m.b-m.a),0.0);\n}\n// https://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/2/CGL_2_A\nbool parallel(const Point &a,const Point &b){\n    return EQ(cross(a,b),0.0);\n}\nbool parallel(const Point &a,const Point &b,const Point &c,const Point &d){\n    return parallel(b-a,d-c);\n}\nbool parallel(const Line &l,const Line &m){\n    return EQ(cross(l.b-l.a,m.b-m.a),0.0);\n}\n\nbool intersect(const Line &l,const Point &p){\n    return abs(ccw(l.a,l.b,p))!=1;\n}\nbool intersect(const Line &l,const Line &m){\n    return abs(cross(l.b-l.a,m.b-m.a)>EPS||abs(cross(l.b-l.a,m.b-m.a))<EPS);\n}\nbool intersect(const Line &l,const Segment &s){\n    return cross(l.b-l.a,s.a-l.a)*cross(l.b-l.a,s.b-l.a)<EPS;\n}\nbool intersect(const Segment &s,const Point &p){\n    return ccw(s.a,s.b,p)==0;\n}\n// https://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/2/CGL_2_B\nbool intersect(const Segment &s,const Segment &t){\n    return ccw(s.a,s.b,t.a)*ccw(s.a,s.b,t.b)<=0&&ccw(t.a,t.b,s.a)*ccw(t.a,t.b,s.b)<=0;\n}\nbool intersect(const Circle &c,const Line &l){\n    return (norm(proj(l,c.c)-c.c)-c.r*c.r)<=EPS;\n}\nint intersect(const Circle &c,const Segment &s){\n    if (norm(proj(s,c.c)-c.c)-c.r*c.r>EPS) return 0;\n    double d1=abs(c.c-s.a),d2=abs(c.c-s.b);\n    if (d1<c.r+EPS&&d2<c.r+EPS) return 0;\n    if (d1<c.r-EPS&&d2>c.r+EPS||d1>c.r+EPS&&d2<c.r-EPS) return 1;\n    const Point h=proj(s,c.c);\n    if (dot(s.a-h,s.b-h)<0) return 2;\n    return 0;\n}\nint intersect(Circle c,Circle d){\n    if (c.r<d.r) swap(c,d);\n    double dist=abs(c.c-d.c);\n    if (c.r+d.r<dist) return 4;\n    if (EQ(c.r+d.r,dist)) return 3;\n    if (c.r-d.r<dist) return 2;\n    if (EQ(c.r-d.r,dist)) return 1;\n    return 0;\n}\n\ndouble distance(const Point &a,const Point &b){\n    return abs(b-a);\n}\ndouble distance(const Line &l,const Point &p){\n    return abs(p-proj(l,p));\n}\ndouble distance(const Line &l,const Line &m){\n    return intersect(l,m)?0:distance(l,m.a);\n}\ndouble distance(const Segment &s,const Point &p){\n    Point h=proj(s,p);\n    return intersect(s,h)?abs(h-p):min(abs(s.a-p),abs(s.b-p));\n}\n// https://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/2/CGL_2_D\ndouble distance(const Segment &s,const Segment &t){\n    if (intersect(s,t)) return 0;\n    return min({distance(s,t.a),distance(s,t.b),distance(t,s.a),distance(t,s.b)});\n}\ndouble distance(const Line &l,const Segment &s){\n    return intersect(l,s)?0:min(distance(l,s.a),distance(l,s.b));\n}\n\nPoint crosspoint(const Line &l,const Line &m){\n    double d1=cross(l.b-l.a,m.b-m.a),d2=cross(l.b-l.a,l.b-m.a);\n    if (EQ(abs(d1),0.0)&&EQ(abs(d2),0.0)) return m.a;\n    return m.a+(m.b-m.a)*d2/d1;\n}\n// https://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/2/CGL_2_C\nPoint crosspoint(const Segment &s,const Segment &t){\n    assert(intersect(s,t));\n    return crosspoint(Line(s),Line(t));\n}\nvector<Point> crosspoint(const Circle &c,const Line &l){\n    Point pr=proj(l,c.c);\n    Point e=(l.b-l.a)/abs(l.b-l.a);\n    if (EQ(distance(l,c.c),c.r)) return {pr};\n    double base=sqrt(c.r*c.r-norm(pr-c.c));\n    return {pr-e*base,pr+e*base};\n}\nvector<Point> crosspoint(const Circle &c,const Segment &s){\n    Line l=Line(s);\n    assert(intersect(c,l));\n    auto res=crosspoint(c,l);\n    if (intersect(c,l)==2) return res;\n    if (dot(l.a-res[0],l.b-res[0])<0) res.emplace_back(res[0]);\n    else res.pop_back();\n    return res;\n}\nvector<Point> crosspoint(const Circle &c,const Circle &d){\n    double dist=abs(c.c-d.c);\n    double a=acos((c.r*c.r+dist*dist-d.r*d.r)/(2*c.r*dist));\n    double t=arg(d.c-c.c);\n    Point p1=c.c+Point(cos(t+a),sin(t+a))*c.r,p2=c.c+Point(cos(t-a),sin(t-a))*c.r;\n    return {p1,p2};\n}\n\nCircle circumcenter(Point a,Point b,const Point &c){\n    a=(a-c)*0.5;\n    b=(b-c)*0.5;\n    Point center=c+crosspoint(Line(a,a*Point{1,1}),Line{b,b*Point{1,1}});\n    return Circle{center,abs(a-center)};\n}\nvector<Point> center_given_radius(const Point &a,const Point &b,const double &r){\n    Point m=(b-a)*0.5;\n    double d1=abs(m);\n    vector<Point> res;\n    if (EQ(d1,0.0)||d1>r) return res;\n    double d2=sqrt(r*r-d1*d1);\n    Point n=m*Point{0.0,1.0}*d2/d1;\n    res.emplace_back(a+m+n);\n    if (d2>EPS) res.emplace_back(a+m-n);\n    return res;\n}\n\nbool convex(const Polygon &p){\n    int n=p.size();\n    for (int i=0;i<n;++i){\n        if (ccw(p[(i+n-1)%n],p[i],p[(i+1)%n])==-1){\n            return false;\n        }\n    }\n    return true;\n}\n\nPolygon convex_hull(Polygon p){\n    int n=p.size(),k=0;\n    if (n<=2) return p;\n    sort(p.begin(),p.end());\n    Polygon ch(2*n);\n    for (int i=0;i<n;ch[k++]=p[i++]){\n        while(k>=2&&cross(ch[k-1]-ch[k-2],p[i]-ch[k-1])<EPS) --k;\n    }\n    for (int i=n-2,t=k+1;i>=0;ch[k++]=p[i--]){\n        while(k>=t&&cross(ch[k-1]-ch[k-2],p[i]-ch[k-1])<EPS) --k;\n    }\n    ch.resize(k-1);\n    return ch;\n}\n\n#pragma endregion\n\nint main(){\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    Circle c1,c2; cin >> c1 >> c2;\n    cout << intersect(c1,c2) << '\\n';\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef double db;\nconst db eps = 1e-12, pi = acos(-1);\nint sign(db x) {return x < -eps ? -1 : x > eps;}\nint cmp(db x, db y) {return sign(x - y);}\nint intersect(db l1, db r1, db l2, db r2) {\n    if (l1 > r1) swap(l1, r1); if (l2 > r2) swap(l2, r2); return cmp(r1, l2) != -1 && cmp(r2, l1) != -1;\n}\nint inmid(db k1, db k2, db k3) {return sign(k1 - k3) * sign(k2 - k3) <= 0;}//k3 in [k1,k2]?1:0\nstruct Point {\n    db x, y;\n    Point operator + (const Point & a)const {return Point{a.x + x, a.y + y};}\n    Point operator - (const Point & a)const {return Point{x - a.x, y - a.y};}\n    Point operator * (db a) const {return Point{x * a, y * a};}\n    Point operator / (db a) const {return Point{x / a, y / a};}\n    bool operator < (const Point p) const {int a = cmp(x, p.x); if (a) return a == -1; return cmp(y, p.y) == -1;}\n    bool operator == (const Point & a) const {return cmp(x, a.x) == 0 && cmp(y, a.y) == 0;}\n    db abs() {return sqrt(x * x + y * y);}\n    db dis(Point p) {return ((*this) - p).abs();}\n    int getP() const {return sign(y) == 1 || (sign(y) == 0 && sign(x) == -1);}\n    void input() {scanf(\"%lf%lf\", &x, &y);}\n};\ndb cross(Point p1, Point p2) {return p1.x * p2.y - p1.y * p2.x;}\ndb cross(Point p0, Point p1, Point p2) {return cross(p1 - p0, p2 - p0);}\ndb dot(Point p1, Point p2) {return p1.x * p2.x + p1.y * p2.y;}\nint inmid(Point k1, Point k2, Point k3) {return inmid(k1.x, k2.x, k3.x) && inmid(k1.y, k2.y, k3.y);}\nbool compareangle(Point p1, Point p2) {//Polar Angle Sort\n    return p1.getP() < p2.getP() || (p1.getP() == p2.getP() && sign(cross(p1, p2)) > 0);\n}\nint clockwise(Point p1, Point p2, Point p3) { // p1 p2 p3 anticlockwise:1 clockwise:-1 others:0\n    return sign(cross(p1, p2, p3));\n}\nstruct Line {\n    Point s, e;\n    void input() {scanf(\"%lf%lf%lf%lf\", &s.x, &s.y, &e.x, &e.y);}\n    Point vec() {return e - s;}\n    db length() {return sqrt(dot(s - e, s - e));}\n    db length2() {return dot(s - e, s - e);}\n};\nint onS(Line l, Point p) {// On Seg?\n    return inmid(l.s, l.e, p) && sign(cross(l.s - p, l.e - l.s)) == 0;\n}\nbool checkLL(Line l1, Line l2) {\n    return cmp(cross(l1.s, l2.s, l2.e), cross(l1.e, l2.s, l2.e)) != 0;\n}\nbool checkLS(Line l1, Line l2) {//Intersection of Line l1 and Seg l2?\n    return sign(cross(l2.s, l1.s, l1.e)) * sign(cross(l2.e, l1.s, l1.e)) <= 0;\n}\nint checkSS(Line l1, Line l2) {//Intersection of Two Seg?1:0\n    return intersect(l1.s.x, l1.e.x, l2.s.x, l2.e.x) && intersect(l1.s.y, l1.e.y, l2.s.y, l2.e.y) && checkLS(l1, l2) && checkLS(l2, l1);\n}\nPoint project(Line l, Point p) {\n    return l.s + l.vec() * dot(p - l.s, l.vec()) / l.length2();\n}\nPoint reflect(Line l, Point p) {//Mirror Point\n    return project(l, p) * 2 - p;\n}\nPoint getLL(Line l1, Line l2) {//Intersection Point of Line l1,l2\n    db w1 = cross(l2.s, l1.s, l2.e), w2 = cross(l2.s, l2.e, l1.e); return (l1.s * w2 + l1.e * w1) / (w1 + w2);\n}\ndb disSP(Line l, Point p) {\n    Point p2 = project(l, p);\n    if (inmid(l.s, l.e, p2)) return p.dis(p2); else return min(p.dis(l.s), p.dis(l.e));\n}\ndb disSS(Line l1, Line l2) {\n    if (checkSS(l1, l2)) return 0;\n    return min(min(disSP(l1, l2.s), disSP(l1, l2.e)), min(disSP(l2, l1.s), disSP(l2, l1.e)));\n}\ndb area(vector<Point> A) {//Anticlockwise\n    db ans = 0;\n    for (int i = 0; i < A.size(); i++) ans += cross(A[i], A[(i + 1) % A.size()]);\n    return ans / 2;\n}\nint contain(vector<Point>A, Point p) {//2:in 1:on 0:out\n    int ans = 0; A.push_back(A[0]);\n    for (int i = 1; i < A.size(); i++) {\n        Line l = {A[i - 1], A[i]};\n        if (onS(l, p)) return 1; if (cmp(l.s.y, l.e.y) > 0) swap(l.s, l.e);\n        if (cmp(l.s.y, p.y) >= 0 || cmp(l.e.y, p.y) < 0) continue;\n        if (sign(cross(l.e, l.s, p)) < 0)ans ^= 1;\n    }\n    return ans << 1;\n}\nbool checkconvex(vector<Point>A) { //anticlock\n    int n = A.size(); A.push_back(A[0]); A.push_back(A[1]);\n    for (int i = 0; i < n; i++) if (sign(cross(A[i], A[i + 1], A[i + 2])) == -1) return 0;\n    return 1;\n}\nvector<Point> ConvexHull(vector<Point>A, int flag = 1) { // flag=0 不严格 flag=1 严格\n    int n = A.size(); vector<Point>ans(n * 2);\n    sort(A.begin(), A.end()); int now = 0; if (n <= 1)return A;\n    for (int i = 0; i < n; ans[now++] = A[i++])\n        while (now > 1 && sign(cross(ans[now - 2], ans[now - 1], A[i])) < flag)--now;\n    for (int i = n - 2, pre = now; i >= 0; ans[now++] = A[i--])\n        while (now > pre && sign(cross(ans[now - 2], ans[now - 1], A[i])) < flag)--now;\n    ans.resize(now - 1); return ans;\n}\ndb convexDiameter(vector<Point>A) {\n    int n = A.size(); if (n <= 1)return 0;\n    int is = 0, js = 0; for (int k = 1; k <= n; ++k)is = A[k] < A[is] ? k : is, js = A[js] < A[k] ? k : js;\n    int i = is, j = js; db ret = A[i].dis(A[j]); do {\n        if (sign(cross(A[(i + 1) % n] - A[i], A[(j + 1) % n] - A[j])) >= 0)(++j) %= n;\n        else (++i) %= n;\n        ret = max(ret, A[i].dis(A[j]));\n    } while (i != is || j != js);\n    return ret;\n}\nvector<Point> convexcut(vector<Point>A, Line l) { // 保留 k1,k2,p 逆时针的所有点,判断n是否为0\n    int n = A.size(); A.push_back(A[0]); vector<Point>ans;\n    for (int i = 0; i < n; i++) {\n        int w1 = clockwise(l.s, l.e, A[i]), w2 = clockwise(l.s, l.e, A[i + 1]);\n        if (w1 >= 0) ans.push_back(A[i]);\n        if (w1 * w2 < 0) ans.push_back(getLL(l, Line{A[i], A[i + 1]}));\n    }\n    return ans;\n}\nstruct Circle {\n    Point o; db r;\n    void input() {o.input(); scanf(\"%lf\", &r);}\n};\nint checkCC(Circle c1, Circle c2) {// 返回两个圆的公切线数量\n    db d = c1.o.dis(c2.o); if (cmp(d, c1.r + c2.r) == 1)return 4;\n    if (cmp(d, c1.r + c2.r) == 0)return 3; if (cmp(d, abs(c1.r - c2.r)) == 1)return 2;\n    if (cmp(d, abs(c1.r - c2.r)) == 0)return 1; return 0;\n}\nint main(){\n    Circle c1,c2;\n    c1.input(),c2.input();\n    int ans=checkCC(c1,c2);\n    cout<<ans<<endl;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define rep(i,n) for(int i=0;(i)<(n);++(i))\nusing namespace std;\n\n// Description: ????????????\n// Verifyed: various problem\nusing namespace placeholders;\nusing R = long double;\nconst R EPS = 1e-9L; // [-1000,1000]->EPS=1e-8 [-10000,10000]->EPS=1e-7\ninline int sgn(const R& r) {return (r > EPS) - (r < -EPS);}\ninline R sq(R x) {return sqrt(max(x, 0.0L));}\n\nconst R INF = 1E40L;\nconst R PI = acos(-1.0L);\nusing P = complex<R>;\nusing L = struct {P s, t;};\nusing VP = vector<P>;\nusing C = struct {P c; R r;};\n\n#define at(a,i) (a[(i + a.size()) % a.size()])\n\nauto& operator >> (istream& is, P& p) { R x, y; is >> x >> y, p = P(x, y); return is;}\nauto& operator << (ostream& os, P& p) { os << real(p) << \" \" << imag(p); return os;}\n\nnamespace std {\nbool operator <  (const P& a, const P& b) { return sgn(real(a - b)) ? real(a - b) < 0 : sgn(imag(a - b)) < 0;}\nbool operator == (const P& a, const P& b) { return sgn(real(a - b)) == 0 && sgn(imag(a - b)) == 0;}\n}\n\ninline R dot(P o, P a, P b) {return real(conj(a - o) * (b - o));}\ninline R det(P o, P a, P b) {return imag(conj(a - o) * (b - o));}\ninline P vec(L l) {return l.t - l.s;}\nauto sdot = bind(sgn, bind(dot, _1, _2, _3));\nauto sdet = bind(sgn, bind(det, _1, _2, _3));\n\n//projection verify AOJ CGL_1_A\nP proj(L l, P p) { R u = real((p - l.s) / vec(l)); return (1 - u) * l.s + u * l.t;}\n\n// vertical parallel\n// verified: AOJ CGL_2_A\nbool vertical(L a, L b) {return sdot(0, vec(a), vec(b)) == 0;}\nbool parallel(L a, L b) {return sdet(0, vec(a), vec(b)) == 0;}\nbool eql(L a, L b) { return parallel(a, b) and sdet(a.s, a.t, b.s) == 0;}\n\n// crossing determination\n// verified: AOJ CGL_2_B\nbool iss(L a, L b) {\n\tint sa = sdet(a.s, a.t, b.s) * sdet(a.s, a.t, b.t);\n\tint sb = sdet(b.s, b.t, a.s) * sdet(b.s, b.t, a.t);\n\treturn max(sa, sb) < 0;\n}\n\n// crossing point\n// verified: AOJ CGL_2_C\nP cross(L a, L b) {\n\tR u = det(a.s, b.s, b.t) / det(0, vec(a), vec(b));\n\treturn (1 - u) * a.s + u * a.t;\n}\n\n// distance\n// verified: AOJ CGL_2_D\nR dsp(L l, P p) {\n\tP h = proj(l, p);\n\tif (sdot(l.s, l.t, p) <= 0) h = l.s;\n\tif (sdot(l.t, l.s, p) <= 0) h = l.t;\n\treturn abs(p - h);\n}\n\nR dss(L a, L b) {return iss(a, b) ? 0 : min({dsp(a, b.s), dsp(a, b.t), dsp(b, a.s), dsp(b, a.t)});}\n\n// Polygon\n\n// area\n// verified: AOJ 1100 CGL_3_A\nR area(const VP& pol) {\n\tR sum = 0.0;\n\trep(i, pol.size()) sum += det(0, at(pol, i), at(pol, i + 1));\n\treturn abs(sum / 2.0L);\n}\n\n// convex_polygon determination\n// verified: CGL_3_B\nbool is_convex(const VP& pol) {\n\trep(i, pol.size())if (sdet(at(pol, i), at(pol, i + 1), at(pol, i + 2)) < 0) return false;\n\treturn true;\n}\n\n// polygon realation determination  in  2 on 1 out 0???(possible non-convex)\n// verified: AOJ CGL_3-C\nint in_polygon(const VP& pol, const P& p) {\n\tint res = 0;\n\tauto simag = [](const P & p) {return sgn(imag(p));};\n\trep(i, pol.size()) {\n\t\tP a = at(pol, i), b = at(pol, i + 1);\n\t\tif (sdet(p, a, b) == 0 and sdot(p, a, b) <= 0) return 1;\n\t\tbool f = simag(p - a) >= 0, s = simag(p - b) < 0;\n\t\tif (simag(b - a)*sdet(a, b, p) == 1 and f == s) res += (2 * f - 1);\n\t}\n\treturn res ? 2 : 0;\n}\n\n// polygon realation determination???(possible non-convex)\n// verified: not AOJ 2514\nbool in_polygon(const VP& pol, const L& l) {\n\tVP check = {l.s, l.t};\n\trep(i, pol.size()) {\n\t\tL edge = {at(pol, i), at(pol, i + 1)};\n\t\tif (iss(l, edge)) check.emplace_back(cross(l, edge));\n\t}\n\n\tauto cmp_x = [](P a, P b)->bool{\n\t\tint sr = sgn(real(a - b)), si = sgn(imag(a - b));\n\t\treturn sr ? sr < 0 : si < 0;\n\t};\n\n\tsort(begin(check), end(check), cmp_x);\n\trep(i, check.size() - 1) {\n\t\tP m = (at(check, i) + at(check, i + 1)) / 2.0L;\n\t\tif (in_polygon(pol, m) == false) return false;\n\t}\n\treturn true;\n}\n\n// convex_cut\n// verified: AOJ CGL_4_C\nVP convex_cut(const VP& pol, const L& l) {\n\tVP res;\n\trep(i, pol.size()) {\n\t\tP a = at(pol, i), b = at(pol, i + 1);\n\t\tint da = sdet(l.s, l.t, a), db = sdet(l.s, l.t, b);\n\t\tif (da >= 0) res.emplace_back(a);\n\t\tif (da * db < 0) res.emplace_back(cross({a, b}, l));\n\t}\n\treturn res;\n}\n\n// farthest point pair Verify AOJ CGL_4_B\nR fpp(VP pol) {\n\tint n = pol.size(), i = 0, j = 0;\n\tif (n <= 2) return abs(pol[0] - pol[1]);\n\tR res = 0.0;\n\n\tauto cmp_x = [](P a, P b)->bool{\n\t\tint sr = sgn(real(a - b)), si = sgn(imag(a - b));\n\t\treturn sr ? sr < 0 : si < 0;\n\t};\n\n\trep(k, n) {\n\t\tif (!cmp_x(pol[i], pol[k]))i = k;\n\t\tif (cmp_x(pol[j], pol[k]))j = k;\n\t}\n\n\tint si = i, sj = j;\n\twhile (i != sj || j != si) {\n\t\tres = max(res, abs(pol[i] - pol[j]));\n\t\tif (sdet(0, vec(L{at(pol, i), at(pol, i + 1)}), vec(L{at(pol, j), at(pol, j + 1)})) < 0)\n\t\t\ti = (i + 1) % n;\n\t\telse\n\t\t\tj = (j + 1) % n;\n\t}\n\treturn res;\n}\n\n// closest point pair Verify AOJ CGL_5_A\nR cpp(VP a, int flag = 1) {\n\tconst int n = a.size(), m = n / 2;\n\tif (n <= 1) return INF;\n\n\tauto cmp_x = [](P a, P b)->bool{\n\t\tint sr = sgn(real(a - b)), si = sgn(imag(a - b));\n\t\treturn sr ? sr < 0 : si < 0;\n\t};\n\n\tif (flag) sort(begin(a), end(a), cmp_x);\n\n\tVP b(begin(a), begin(a) + m), c(begin(a) + m, end(a));\n\tR x = real(a[m]), d = min(cpp(b, 0), cpp(c, 0));\n\n\n\tauto cmp_y = [](P a, P b)->bool{\n\t\tint sr = sgn(real(a - b)), si = sgn(imag(a - b));\n\t\treturn si ? si < 0 : sr < 0;\n\t};\n\n\tsort(begin(a), end(a), cmp_y);\n\tdeque<P> e;\n\n\tfor (auto &p : a) {\n\t\tif (abs(real(p) - x) >= d) continue;\n\n\t\tfor (auto &q : e) {\n\t\t\tif (imag(p - q) >= d) break;\n\t\t\td = min(d, abs(p - q));\n\t\t}\n\t\te.push_front(p);\n\t}\n\treturn d;\n}\n\n// Circle // verified: AOJ 1183\nenum RCC {OUT = 2, ON_OUT = 1, ISC = 0, ON_IN = -1, IN = -2};\nint rcc(C a, C b) { R d = abs(a.c - b.c); return sgn(d - a.r - b.r) + sgn(d - abs(a.r - b.r));}\n\n// circle crossing determination\nbool icp(C c, P p, int end = 0) {return sgn(abs(p - c.c) - c.r) <= -end;}\nbool ics(C c, L s, int end = 0) {return sgn(dsp(s, c.c) - c.r) <= -end;}\nbool icsc(C c, L l, int end = 0) {\n\treturn ics(c, l) and sgn(max(abs(l.s - c.c), abs(l.t - c.c)) - c.r) <= 0;\n}\n\n// common area between circles\nR area(C a, C b) {\n\tint r = rcc(a, b);\n\tif (r >= ON_OUT) return 0.0L;\n\tif (r <= ON_IN) return min(norm(a.r), norm(b.r)) * PI;\n\tR d = abs(b.c - a.c), rc = (norm(d) + norm(a.r) - norm(b.r)) / (2.0 * d);\n\tR t = acos(rc / a.r), p = acos((d - rc) / b.r);\n\treturn norm(a.r) * t + norm(b.r) * p - d * a.r * sin(t);\n}\n\n// cross point between circle and line\n// verified: AOJ CGL_7_D\nP cir(C c, R t) {return c.c + polar(c.r, t);}\nVP cross(C c, L l) {\n\tP h = proj(l, c.c);\n\tP e = polar(sq(norm(c.r) - norm(h - c.c)), arg(vec(l)));\n\treturn VP{h - e, h + e};\n}\n\n// cross point between circles\n// verified: AOJ CGL_7_E\nVP cross(C a, C b) {\n\tP d = b.c - a.c;\n\tP w = (norm(d) + norm(a.r) - norm(b.r)) / (2.0L * norm(d)) * d;\n\treturn cross(a, {a.c + w, a.c + w + 1il * d});\n}\n\n// circle tangent\n// verified: AOJ CGL_7_F\nL tan(C c, P p) {return L{p, p + 1il * (p - c.c)};}\n\nP helper(C c, P d, R r, P j) {\n\tP tmp = sq(norm(d) - norm(r)) * j;\n\tP dir = (r + tmp) / norm(d) * d;\n\treturn c.c + c.r * dir;\n}\n\nVP contact(C c, P p) {\n\tVP ret;\n\tP d = p - c.c;\n\tfor (P j : { -1il, 1il}) ret.emplace_back(helper(c, d, c.r, j));\n\tsort(begin(ret), end(ret));\n\tret.erase(unique(begin(ret), end(ret)), end(ret));\n\treturn ret;\n}\n\n// circle tangent\n// Verified: AOJ CGL_7_G\nVP contact(C a, C b) {\n\tVP ret;\n\tP d = b.c - a.c;\n\tfor (int s : { -1, 1}) {\n\t\tif (rcc(a, b) >= s) {\n\t\t\tfor (P j : { -1i, 1i}) {\n\t\t\t\tR r = a.r + s * b.r;\n\t\t\t\tret.emplace_back(helper(a, d, r, j));\n\t\t\t}\n\t\t}\n\t}\n\tsort(begin(ret), end(ret));\n\tret.erase(unique(begin(ret), end(ret)), end(ret));\n\treturn ret;\n}\n\n// common area of circle and polygon\nR area(R r, P a, P b) {\n\treturn sgn(abs((a + b) / 2.0l) - r) <= 0 ? det(0, a, b) / 2.0l : norm(r) * arg(b - a) / 2.0l;\n}\n\nR area(C c, VP pol) {\n\tR res = 0;\n\trep(i, pol.size()){\n\t\tR r = c.r;\n\t\tP a = at(pol, i) - c.c , b = at(pol, i + 1) - c.c;\n\t\tif (sgn(min({r, abs(a), abs(b), abs(b - a)})) == 0) continue;\n\n\t\tVP cp = cross(C{0.0l, r}, L{a, b});\n\t\tif (sdot(a, cp[0], cp[1]) <= 0 and sdot(b, cp[0], cp[1]) <= 0) \n\t\t\tres += area(r, a, b);\n\t\telse \n\t\t\tres += area(r, a, cp[0]) + area(r, cp[0], cp[1]) + area(r, cp[1], b);\n\t}\n\treturn res;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\n#define rep(i, a, b) for (int i = a, i##end = b; i <= i##end; ++i)\n#define per(i, a, b) for (int i = a, i##end = b; i >= i##end; --i)\n#define rep0(i, a) for (int i = 0, i##end = a; i < i##end; ++i)\n#define per0(i, a) for (int i = (int)a-1; ~i; --i)\n#define max(a, b) ((a) > (b) ? (a) : (b))\n#define min(a, b) ((a) < (b) ? (a) : (b))\n#define chkmax(a, b) a = max(a, b)\n#define chkmin(a, b) a = min(a, b)\n#define x first\n#define y second\n#define enter putchar('\\n')\n\ntypedef long long ll;\ntypedef double DB;\n\nconst DB eps = 1e-12;\nconst DB PI = acos(-1);\n\nint sgn(DB x) { return fabs(x) < eps ? 0 : (x > 0 ? 1 : -1); }\n\nstruct Point {\n\tDB x, y;\n\tPoint(DB x = 0, DB y = 0) : x(x), y(y) {}\n\tPoint operator + (Point a) { return Point(x + a.x, y + a.y); }\n\tPoint operator - (Point a) { return Point(x - a.x, y - a.y); }\n\tPoint operator - () { return Point(-x, -y); }\n\tfriend Point operator * (DB k, Point a) { return Point(k * a.x, k * a.y); }\n\tDB operator % (Point a) { return x * a.x + y * a.y; }\n\tDB operator / (Point a) { return x * a.y - y * a.x; }\n\toperator DB() { return sqrt(x*x + y*y); }\n\tbool operator < (const Point &a) const { int d1 = sgn(x-a.x), d2 = sgn(y-a.y); return d1 < 0 || (d1 == 0 && d2 < 0); }\n};\n\nint Direct1(Point P, Point P1, Point P2) { return sgn((P1-P)%(P2-P)); }\nint Direct2(Point P, Point P1, Point P2) { return sgn((P1-P)/(P2-P)); }\n\nPoint P1, P2;\nDB r1, r2;\n\nint main() {\n\tscanf(\"%lf%lf%lf\", &P1.x, &P1.y, &r1);\n\tscanf(\"%lf%lf%lf\", &P2.x, &P2.y, &r2);\n\tDB dis = DB(P1-P2);\n\tif (sgn(dis-r1-r2) > 0) puts(\"4\");\n\telse if (!sgn(dis-r1-r2)) puts(\"3\");\n\telse if (sgn(dis-fabs(r1-r2)) > 0) puts(\"2\");\n\telse if (!sgn(dis-fabs(r1-r2))) puts(\"1\");\n\telse puts(\"0\");\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<queue>\n#include<vector>\n\n#define MAX 100000\n#define INF INT_MAX\n#define NO 0\n#define WENT 1\n\nusing namespace std;\n\nvoid Dijkstra(void);\n\nint V, E, r;\nvector< vector<pair<int,int> > >  v;\nvector<int> cost, visited;\n\n\nint main() {\n  int s, t, d;\n\n  cin >> V >> E >> r;\n  v.resize(V);\n\n  for(int i=0; i<E; i++) {\n    cin >> s >> t >> d;\n    v[s].push_back(make_pair(t,d)); //s番目〜t番目のコストはd                                                    \n   }\n\n  //cout << 'a' << endl;                                                                                         \n  Dijkstra();\n\n  //cout << \"b\" << endl;                                                                                         \n\n  for(int i=0; i<V; i++) {\n    if(visited[i] == WENT) cout << cost[i] << endl;\n    else cout << \"INF\" << endl;\n  }\n\n  return 0;\n}\n\n\nvoid Dijkstra() {                                                                                                                                                  \n  int x, y, z;\n  priority_queue< pair<int,int> , vector< pair<int,int> >, greater< pair<int, int> > > p;//greaterで小さい順に取り出せる                                                                                    \n\n  cost.resize(V);\n  visited.resize(V);\n\n  for(int i=0;i<V;i++){\n    cost[i]=INF;\n    visited[i] = NO;\n  }\n  cost[r] = 0;   //startのコストを０に                                                                                                                                                                      \n\n  p.push(make_pair(0,r));//startのrはコスト０                                                                                                                                                               \n\n  while(!p.empty()) {\n    x=p.top().second;                                                                                                                                       \n    p.pop();\n\n    visited[x] = WENT;\n\n    for(int i=0; i<v[x].size(); i++) {\n      y = v[x][i].first;\n      z = v[x][i].second;//y：edge先のノード、z：x~yへのコスト                                                                                                                                              \n\n      if(visited[y] == NO)                                                                                                                                                 \n        if(cost[y] > cost[x] + z) {                                                                                                                \n          cost[y] = cost[x] + z;\n          p.push(make_pair(cost[y],y));\n        }\n    }\n  }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\n#define FOR(i,bg,ed) for(int i=(bg);i<(ed);i++)\n#define REP(i,n) FOR(i,0,n)\n#define ALL(v) (v).begin(),(v).end()\n#define fi first\n#define se second\n#define pb push_back\n\n#define IL inline \nnamespace geo {\n    typedef double D;\n    typedef bool B;\n    typedef complex<D> P;\n#define X real()\n#define Y imag()\n    B comp(const P& l, const P& r){ return (l.X == r.X) ? l.Y < r.Y : l.X < r.X; }\n    typedef pair<P, P> L;  //line\n    typedef pair<P, P> LS; //line segment\n    typedef pair<P, D> C;  //circle\n    typedef vector<P> Poly;\n    const D EPS = 1e-8;\n    //Decompotision Macro\n#define DCl(a,b,l) P (a),(b);tie(a,b)=l; \n#define DCc(a,b,c) P (a);D (b);tie(a,b)=c; \n    \n    //A dot B\n    IL D dot(P a, P b) { return a.X*b.X + a.Y*b.Y; }\n    //A cross B\n    IL D cross(P a, P b) { return a.X*b.Y - a.Y*b.X; }\n    IL D ccw(P a,P b,P c){\n        return cross(b - a, c - a);\n    }\n\n    IL int sgn(P a,P b, P c){\n        if(cross(b-a,c-a) > EPS)return 1;\n        if(cross(b-a,c-a) < -EPS)return -1;\n        if(dot(b-a,c-a) < -EPS)return 2; // b-a-c\n        if(dot(a-b,c-b) < -EPS)return -2; // a-b-c\n        return 0;\n    }\n    IL D signed_distance_P_L(P p, L l) {\n        DCl(a,b,l);\n        return ccw(a,b,p)/ abs(b - a);\n    }\n    \n    IL D distance_P_L(P p, L l) {\n        return abs(signed_distance_P_L(p,l));\n    }\n\n    IL D distance_P_LS(P p, LS ls) {\n        DCl(a,b,ls);\n        if (dot(b - a, p - a) < EPS) return abs(p - a);\n        if (dot(a - b, p - b) < EPS) return abs(p - b);\n        return abs(cross(b - a, p - a)) / abs(b - a);\n    }\n\n    \n    IL B is_L_L(L p, L q) {\n        DCl(a,b,p);\n        DCl(c,d,q);\n        return\n            abs(cross(a - b, c - d)) > EPS ||\n            abs(cross(a - b ,d - b)) < EPS;\n    }\n    IL B is_L_LS(L l, LS ls) {\n        DCl(a,b,l);\n        DCl(c,d,ls);\n        return ccw(a,b,c)*ccw(a,b,d)<EPS;\n    }\n    IL B is_LS_LS(LS p, LS q) {\n        DCl(a,b,p);\n        DCl(c,d,q);\n        return sgn(a,b,c)*sgn(a,b,d) <= 0\n            && sgn(c,d,a)*sgn(c,d,b) <= 0;\n    }\n\n    IL D distance_LS_LS(LS p,LS q){\n        if(is_LS_LS(p,q))return 0;\n        return min({\n                distance_P_LS(p.fi,q),\n                distance_P_LS(p.se,q),\n                distance_P_LS(q.fi,p),\n                distance_P_LS(q.se,p)    \n                    });\n    }\n\n    //caution: have to use isintersected_L_L before this function\n    IL P cross_point_L_L(L p, L q) {\n        DCl(a,b,p);\n        D d1 = signed_distance_P_L(a, q);\n        D d2 = signed_distance_P_L(b, q);\n        return (a * d2 - b * d1) / (d2 - d1);\n    }\n    \n    IL B is_C_C(C p, C q) {\n        DCc(cp,rp,p);\n        DCc(cq,rq,q);\n        D d = abs(cp - cq);\n        return abs(rp - rq) - d <EPS &&\n                                 rp + rq - d > -EPS;\n    }\n    IL LS cross_C_C(C p, C q) {\n        DCc(cp,rp,p);\n        DCc(cq,rq,q);\n        D d = abs(cp - cq);\n        D rc = (d*d + rp*rp - rq*rq) / (2 * d);\n        D rs = sqrt(rp*rp - rc*rc);\n        P diff = (cq - cp) / d;\n        return {cp + P(rc, rs)*diff, cp + P(rc, -rs)*diff};\n    }\n    IL D ccw(P a,P b,P c){\n        return cross(b - a, c - a);\n    }\n    IL Poly convex_hull(Poly& p) {\n        int n = p.size();\n        Poly res(2 * n);\n        int k = 0, t;\n        sort(ALL(p),comp);\n        REP(i,n) {\n            while (k > 1 && ccw(res[k-2],res[k-1],p[i]) < EPS)k--;\n            res[k++] = p[i];\n        }\n        t = k;\n        REP(j,n-1){\n            int i= n - 2 - j;\n            while (k > t && ccw(res[k - 2],res[k - 1], p[i]) < EPS)k--;\n            res[k++] = p[i];\n        }\n        res.resize(k - 1);\n        return res;\n    }\n    IL B convex_in(Poly& l,P& p) {\n        int a = 0, b = l.size(), c;\n        D A, C;\n        P g = (l[a] + l[b - 1] + l[b / 2]) / 3.0;\n        while (b - a > 1) {\n            c = (a + b) / 2;\n            A = cross(l[a] - g, p - l[a]);\n            C = cross(l[c] - g, p - l[c]);\n            if (cross(l[a] - g, l[c] - g) >= 0) {\n                if (A > -EPS&&C < -EPS)b = c;\n                else a = c;\n            }\n            else {\n                if (C < -EPS || A > -EPS)b = c;\n                else a = c;\n            }\n        }\n        return(cross(l[b%l.size()] - l[a], p - l[b%l.size()]) > -EPS);\n    }\n    IL D convex_area(Poly& l) {\n        double res = 0;\n        int n = l.size();\n        FOR(i,2,n)\n            res += (abs(cross(l[i - 1] - l[0], l[i] - l[i - 1]))) / 2.0;\n        return res;\n    }\n    inline vector<L> tangent_line(C c, P p) {\n        vector<L> res;\n        DCc(cp,r,c);\n        P v = p - cp;\n        D dist = abs(v);\n        if (dist - r > -EPS) {\n            double _cos = r / dist;\n            double _sin = sqrt(1.0 - _cos*_cos);\n            v = v * (r / dist);\n            {\n                P e = P(_cos * v.X - _sin * v.Y, _sin*v.X + _cos*v.Y);\n                res.push_back({p, cp + e});\n            }\n            if(dist-r > EPS){\n                P e = P( _cos*v.X + _sin*v.Y ,-_sin*v.X + _cos*v.Y );\n                res.push_back({p, cp + e});\n            }\n        }\n        return res;\n    }\n    IL vector<L> inner_common_tangent_line(C p, C q) {\n        vector<L> res;\n        DCc(Mp,Rp,p);\n        DCc(Mq,Rq,q);\n        D dist = abs(Mp - Mq);\n        if (dist - (Rp + Rq) > -EPS) {\n            P mid = (Mq*Rp + Mp*Rq) / (Rp + Rq);\n            res = tangent_line(p, mid);\n        }\n        return res;\n    }\n    inline vector<L> outer_common_tangent_line(C p, C q) {\n        vector<L> res;\n        DCc(Mp,Rp,p);\n        DCc(Mq,Rq,q);\n        P v = Mp - Mq;\n        D dist = abs(v);\n        if (dist - abs(Rp - Rq) >- EPS) {\n            if (abs(Rp - Rq) < EPS) {\n                P e = v*P( 0, 1 );\n                e = e / dist;\n                res.pb(L(Mp + e, Mq + e));\n                res.pb(L(Mp - e, Mq - e));\n            }\n            else {\n                P mid = Mp + (Mq - Mp) * Rp / (Rp - Rq);\n                res = tangent_line(p, mid);\n            }\n        }\n        return res;\n    }\n}\nint main(){\n    int a1, b1, r1;\n    int a2, b2, r2;\n    cin >> a1 >> b1 >> r1;\n    cin >> a2 >> b2 >> r2;\n    auto v = geo::inner_common_tangent_line(C(P(a1, b1), r1), C(P(a2, b2), r2));\n    auto v2= geo::outer_common_tangent_line(C(P(a1, b1), r1), C(P(a2, b2), r2));\n    cout << v.size() + v2.size() << endl;\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n\nusing namespace std;\n\ntemplate<class T>\nstruct Vec2\n{\n\tVec2(){}\n\tVec2(T _x, T _y) : x(_x), y(_y) {}\n\n\tVec2 operator+(const Vec2& rhs) const { return Vec2(x + rhs.x, y + rhs.y); }\n\tVec2 operator-(const Vec2& rhs) const { return Vec2(x - rhs.x, y - rhs.y); }\n\tT sqlength() const { return x*x + y*y; }\n\n\tT x;\n\tT y;\n};\n\nint main()\n{\n\ttypedef Vec2<long long> Vec;\n\tlong long x1, y1, r1, x2, y2, r2;\n\tcin >> x1 >> y1 >> r1 >> x2 >> y2 >> r2;\n\tlong long dsq = (Vec(x1, y1) - Vec(x2, y2)).sqlength();\n\tif (dsq > (r1 + r2)*(r1 + r2)) cout << 4 << endl;\n\telse if (dsq == (r1 + r2)*(r1 + r2)) cout << 3 << endl;\n\telse if (dsq > (r1 - r2)*(r1 - r2)) cout << 2 << endl;\n\telse if (dsq == (r1 - r2)*(r1 - r2)) cout << 1 << endl;\n\telse cout << 0 << endl;\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#include<iostream>\n#include<iomanip>\n#include<algorithm>\n#include<bitset>\n#include<cassert>\n#include<cctype>\n#include<cmath>\n#include<cstdio>\n#include<cstring>\n#include<functional>\n#include<limits>\n#include<list>\n#include<map>\n#include<set>\n#include<stack>\n#include<string>\n#include<sstream>\n#include<queue>\n#include<vector>\nusing namespace std;\n\n#define MOD 1000000007\n#define INF 0x3f3f3f3f\n#define INFL 0x3f3f3f3f3f3f3f3fLL\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n\n//0?¬?\nclass Point {\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0) :x(x), y(y) {}\n\n\tPoint operator+(Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator-(Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator*(double a) { return Point(a * x, a * y); }\n\tPoint operator/(double a) { return Point(x / a, y / a); }\n\tbool operator<(const Point &p)const { return x != p.x ? x < p.x : y < p.y; }\n\tbool operator==(const Point &p)const { return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS; }\n\n\tdouble abs() { return sqrt(norm()); }\n\tdouble norm() { return x*x + y*y; }\n\n\t//Vector????????¢\n\tPoint rotate(double rad) { return Point(x*cos(rad) - y*sin(rad), x*sin(rad) + y*cos(rad)); }\n};\ninline ostream &operator << (ostream &os, const Point &p) { os << p.x << \" \" << p.y; return os; }\ninline istream &operator >> (istream &is, Point &p) { double x, y; is >> x >> y; p = Point(x, y); return is; }\n\n//1?¬?\ntypedef Point Vector;\n\nclass Segment {\npublic:\n\tPoint p1, p2;\n\tSegment(Point p1 = Point(), Point p2 = Point(1, 1)) :p1(p1), p2(p2) {}\n\tVector vec() { return p2 - p1; }\n};\ntypedef Segment Line;\n\n//2?¬?\nclass Circle {\npublic:\n\tPoint c; //center\n\tdouble r; //radius\n\tCircle(Point c = Point(), double r = 0.0) :c(c), r(r) {}\n};\ntypedef vector<Point> Polygon;\n\n//?????? dot product\ndouble dot(Vector a, Vector b) { return a.x*b.x + a.y*b.y; }\n//?????? cross product\ndouble cross(Vector a, Vector b) { return a.x*b.y - a.y*b.x; }\n\n//????????¢??? radian ??? ??? degree\ndouble rad(double deg) { return M_PI*deg / 180; }\n//????§? argument\ndouble arg(Vector p) { return atan2(p.y, p.x); }\n//?\\???¢??? polar form\nVector polar(double r, double a) { return Point(cos(a)*r, sin(a)*r); }\n\n//??´?????????\nbool isOrthogonal(Vector a, Vector b) { return equals(dot(a, b), 0.0); }\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) { return isOrthogonal(a1 - a2, b1 - b2); }\nbool isOrthogonal(Segment s1, Segment s2) { return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0); }\n\n//????????????\nbool isParallel(Vector a, Vector b) { return equals(cross(a, b), 0.0); }\nbool isParallel(Point a1, Point a2, Point b1, Point b2) { return isParallel(a1 - a2, b1 - b2); }\nbool isParallel(Segment s1, Segment s2) { return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0); }\n\n//?°???±\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / base.norm();\n\treturn s.p1 + base*r;\n}\n//????°?\nPoint reflect(Segment s, Point p) { return p + (project(s, p) - p)*2.0; }\n\n//??????(p0,p1)????????????p2???????????¢???\nenum { ONLINE_FRONT = -2, CLOCKWISE, ON_SEGMENT, COUNTER_CLOCKWISE, ONLINE_BACK };\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0, b = p2 - p0;\n\tif (cross(a, b) > EPS)return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS)return CLOCKWISE;\n\tif (dot(a, b) < -EPS)return ONLINE_BACK; //p2 p0 p1\n\tif (a.norm() < b.norm())return ONLINE_FRONT; //p0 p1 p2\n\treturn ON_SEGMENT;\n}\n\n//??´?????¨??´??????????????????\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n\treturn (ccw(p1, p2, p3)*ccw(p1, p2, p4) <= 0 &&\n\t\tccw(p3, p4, p1)*ccw(p3, p4, p2) <= 0);\n}\nbool intersect(Segment s1, Segment s2) { return intersect(s1.p1, s1.p2, s2.p1, s2.p2); }\n//(?????????????¶????)\n\n//2??????????????¢\ndouble getDistance(Point a, Point b) { return (a - b).abs(); }\n//??´?????¨???????????¢\ndouble getDistanceLP(Line l, Point p) { return abs(cross(l.p2 - l.p1, p - l.p1) / (l.p2 - l.p1).abs()); }\n//????????¨???????????¢\ndouble getDistanceSP(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0)return (p - s.p1).abs();\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0)return (p - s.p2).abs();\n\treturn getDistanceLP(s, p);\n}\n//????????¨??????????????¢\ndouble getDistance(Segment s1, Segment s2) {\n\tif (intersect(s1, s2))return 0.0;\n\treturn\tmin(\n\t\tmin(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n\t\tmin(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2))\n\t);\n}\n\n//?????¨??´??????????????????\nbool intersect(Circle c, Line l) { return getDistanceLP(l, c.c) <= c.r; }\n//?????¨?????????????????? ??±?????\\????????°\nint intersect(Circle c1, Circle c2) {\n\tdouble d = getDistance(c1.c, c2.c);\n\tif (d > c1.r + c2.r)return 4;\n\tif (d == c1.r + c2.r)return 3;\n\tif (d + c1.r == c2.r || d + c2.r == c1.r)return 1;\n\tif (d + c1.r < c2.r || d + c2.r < c1.r)return 0;\n\treturn 2;\n}\n\n//????????¨???????????????\nPoint getCrossPoint(Segment s1, Segment s2) {\n\tassert(intersect(s1, s2));\n\tVector base = s2.p2 - s2.p1;\n\tdouble a1 = abs(cross(base, s1.p1 - s2.p1)); //area1\n\tdouble a2 = abs(cross(base, s1.p2 - s2.p1)); //area2\n\tdouble t = a1 / (a1 + a2);\n\treturn s1.p1 + (s1.p2 - s1.p1)*t;\n}\n//??´?????¨??´????????????\n//Point getCrossPointLL(Line l1, Line l2) {}\n\n//?????¨??´????????????\npair<Point, Point> getCrossPoints(Circle c, Line l) {\n\tassert(intersect(c, l));\n\tVector pr = project(l, c.c);\n\tVector e = (l.p2 - l.p1) / (l.p2 - l.p1).abs();\n\tdouble base = sqrt(c.r*c.r - (pr - c.c).norm());\n\treturn make_pair(pr + e*base, pr - e*base);\n}\n//?????¨????????????\npair<Point, Point> getCrossPoints(Circle c1, Circle c2) {\n\tint m = intersect(c1, c2);\n\tassert(m != 4 && m != 0);\n\tdouble d = (c1.c - c2.c).abs();\n\tdouble a = acos((c1.r*c1.r + d*d - c2.r*c2.r) / (2 * c1.r*d));\n\tdouble t = arg(c2.c - c1.c);\n\treturn make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n}\n\n//????????????\nenum { OUT = 0, ON, IN };\nint contains(Polygon g, Point p) {\n\tint n = g.size();\n\tbool x = false;\n\tfor (int i = 0; i < n; i++) {\n\t\tPoint a = g[i] - p, b = g[(i + 1) % n] - p;\n\t\tif (abs(cross(a, b)) < EPS&&dot(a, b) < EPS)return ON;\n\t\tif (a.y > b.y)swap(a, b);\n\t\tif (a.y < EPS&&EPS<b.y&&cross(a, b)>EPS)x = !x;\n\t}\n\treturn (x ? IN : OUT);\n}\n\n//????§???¢?????¢???\ndouble area(Polygon g) {\n\tdouble a = 0;\n\tfor (size_t i = 0; i < g.size(); i++)\n\t\ta += cross(g[i], g[(i + 1) % g.size()]);\n\treturn a / 2.0;\n}\n\n//?????§????????????????¨??????????\nbool isConvex(Polygon g) {\n\tfor (size_t i = 0; i < g.size(); i++)\n\t\tif (ccw(g[i], g[(i + 1) % g.size()], g[(i + 2) % g.size()]) == CLOCKWISE)\n\t\t\treturn false;\n\treturn true;\n}\n\nint main() {\n\tCircle c1, c2;\n\tcin >> c1.c >> c1.r >> c2.c >> c2.r;\n\tcout << intersect(c1, c2) << endl;\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\nint ax, ay, ar, bx, by, br;\nint main() {\n\tscanf(\"%d%d%d%d%d%d\", &ax, &ay, &ar, &bx, &by, &br);\n\tint norm = (ax - bx) * (ax - bx) + (ay - by) * (ay - by);\n\tif(norm > (ar + br) * (ar + br)) puts(\"4\");\n\telse if(norm == (ar + br) * (ar + br)) puts(\"3\");\n\telse if(norm > (ar - br) * (ar - br)) puts(\"2\");\n\telse if(norm == (ar - br) * (ar - br)) puts(\"1\");\n\telse puts(\"0\");\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <complex>\n#include <utility>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\ntypedef complex<double> Point, Vector;\ntypedef pair<Point, Point> Segment, Line;\ntypedef vector<Point> Polygon;\ntypedef pair<Point, double> Circle;\n\n#define X real()\n#define Y imag()\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\ndouble norm(Vector a){\n    return a.X * a.X + a.Y * a.Y;\n}\n\ndouble abs(Vector a){\n    return sqrt(norm(a));\n}\n\nint intersection(Circle c1, Circle c2){\n    double dist = abs(c1.first - c2.first);\n    if(c1.second + c2.second < dist) return 4;\n    if(equals(c1.second + c2.second, dist)) return 3;\n    if(abs(c1.second - c2.second) < dist && dist < c1.second + c2.second) return 2;\n    if(equals(abs(c1.second - c2.second), dist)) return 1;\n    else return 0;\n}\n\nint main(){\n    double c1x, c1y, c1r; cin>>c1x>>c1y>>c1r;\n    double c2x, c2y, c2r; cin>>c2x>>c2y>>c2r;\n    Circle c1 = {Point(c1x, c1y), c1r};\n    Circle c2 = {Point(c2x, c2y), c2r};\n\n    cout << intersection(c1, c2) << endl;\n}\n"
  },
  {
    "language": "C++",
    "code": "//include\n//------------------------------------------\n#include <vector>\n#include <list>\n#include <map>\n#include <climits>\n#include <set>\n#include <deque>\n#include <stack>\n#include <bitset>\n#include <algorithm>\n#include <functional>\n#include <numeric>\n#include <utility>\n#include <sstream>\n#include <iostream>\n#include <iomanip>\n#include <cstdio>\n#include <cmath>\n#include <cstdlib>\n#include <cctype>\n#include <string>\n#include <cstring>\n#include <ctime>\n#include <queue>\n#include <random>\n#include <cctype>\n#include <complex>\n#include <regex>\n\nusing namespace std;\n\n#define C_MAX(a, b) ((a)>(b)?(a):(b))\n#define SHOW_VECTOR(v) {std::cerr << #v << \"\\t:\";for(const auto& xxx : v){std::cerr << xxx << \" \";}std::cerr << \"\\n\";}\n#define SHOW_MAP(v){std::cerr << #v << endl; for(const auto& xxx: v){std::cerr << xxx.first << \" \" << xxx.second << \"\\n\";}}\n\ntypedef complex<double> P;\ntypedef pair<P, double> Circle;\n\n#define EPS 1e-8\n#define EQ(a, b) (abs((a)-(b)) <EPS)\n\ninline int signum(double x) { return abs(x) < EPS ? 0 : x > 0 ? 1 : -1; }\n\nint circcw(Circle c1, Circle c2) {\n    if (c1.second < c2.second) swap(c1, c2);\n    P p1 = c1.first;\n    P p2 = c2.first;\n    double r1 = c1.second;\n    double r2 = c2.second;\n    if (abs(p1 - p2) > r1 + r2) return 4;\n    if (signum(abs(p1 - p2) - (r1 + r2)) == 0) return 3;\n    if ((r1 - r2) < abs(p1 - p2) && abs(p1 - p2) < (r1 + r2)) return 2;\n    if (signum(r1 - (abs(p1 - p2) + r2)) == 0) return 1;\n    return 0;\n}\n\nint main() {\n\n    double c1x, c1y, c1r;\n    cin >> c1x >> c1y >> c1r;\n\n    double c2x, c2y, c2r;\n    cin >> c2x >> c2y >> c2r;\n\n    Circle c1(P(c1x, c1y), c1r), c2(P(c2x, c2y), c2r);\n\n    int ans = circcw(c1, c2);\n    cout << ans << endl;\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#include<string>\n#include<vector>\n#include<cmath>\n#define int long long\n#define mod 1000000007\n#define for0(i, n) for(int i = 0; i < (n); i++)\n#define for1(i, n) for(int i = 1; i <= (n);i++)\nusing namespace std;\nint get() { int r; cin >> r; return r; }\ndouble dist(double xp, double yp, double xq, double yq) { return sqrt((xp - xq) * (xp - xq) + (yp - yq) * (yp - yq)); }\nsigned main() {\n\tdouble x1, x2, y1, y2, r1, r2;\n\tcin >> x1 >> y1 >> r1 >> x2 >> y2 >> r2;\n\tdouble d = dist(x1, y1, x2, y2);\n\tif (r1 > r2)swap(r1, r2);\n\tif (r1 + d < r2)cout << 0 << endl;\n\telse if (r1 + d == r2)cout << 1 << endl;\n\telse if (r1 + r2 > d)cout << 2 << endl;\n\telse if (r1 + r2 == d)cout << 3 << endl;\n\telse if (r1 + r2 < d)cout << 4 << endl;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\n\n\n\nint main() {\n    float x1 = 0;\n    float y1 = 0;\n    float r1 = 7;\n\n    float x2 = 0;\n    float y2 = 0;\n    float r2 = 1;\n\n    std::cin >> x1 >> y1 >> r1;\n    std::cin >> x2 >> y2 >> r2;\n\n    float d = sqrt(pow((x1 - x2),2) + pow((y1 - y2),2)); // TODO: provide type safety\n\n    if((r1 + r2) < d){\n        std::cout << 4 << std::endl;\n    }\n    else if((r1 + r2) > d){\n        if(abs(r1 - r2) == d){\n            std::cout << 1 << std::endl;\n            return 0;\n        }else if(abs(r1 - r2) > d){\n            std::cout << 0 << std::endl;\n            return 0;\n        }\n        std::cout << 2 << std::endl;\n    }\n    else std::cout << 3 << std::endl;\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\nint main(){\n  int ax,ay,ar;\n  int bx,by,br;\n  cin>>ax>>ay>>ar;\n  cin>>bx>>by>>br;\n\n  int dist = (ax-bx)*(ax-bx) + (ay-by)*(ay-by);\n  // ar+br < sqrt(dist) \n  if( (ar+br)*(ar+br) < dist ){\n    cout<<4<<endl;\n  }else if( (ar+br)*(ar+br) == dist ){\n    cout<<3<<endl;\n    // |ar-br| < sqrt(dist)\n  }else if( (ar-br)*(ar-br) < dist ){\n    cout<<2<<endl;\n  }else if( (ar-br)*(ar-br) == dist ){\n    cout<<1<<endl;\n  }else{\n    cout<<0<<endl;\n  }\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nint main(){\n\tint out=0;\n\tdouble cx1,cy1,r1;\n\tdouble cx2,cy2,r2;\n\n\tcin>>cx1>>cy1>>r1;\n\tcin>>cx2>>cy2>>r2;\n\n\tdouble d=sqrt((cx1-cx2)*(cx1-cx2)+(cy1-cy2)*(cy1-cy2));\n\n\tif( d > r1+r2 ) out = 4;\n\telse if( abs(d-r1-r2) < 1e-10 ) out = 3;\n\telse if( d>abs(r1-r2)+1e-10 ) out = 2;\n\telse if( abs(d-abs(r1-r2)) < 1e-10 ) out = 1;\n\n\tcout<< out <<endl;\n}\n"
  },
  {
    "language": "C++",
    "code": "#define _CRT_SECURE_NO_WARNINGS\n#define _USE_MATH_DEFINES\n#include <iostream>\n#include <cstdio>\n#include <vector>\n#include <string>\n#include <array>\n#include <queue>\n#include <deque>\n#include <set>\n#include <unordered_set>\n#include <list>\n#include <map>\n#include <stack>\n#include <utility>\n#include <bitset>\n#include <complex>\n#include <algorithm>\n#include <numeric>\n#include <cstdlib>\n#include <cmath>\n#include <cctype>\n#include <cstring>\n#include <climits>\n#include <random>\n#include <functional>\n#include <sstream>\n#include <iomanip>\n\nusing namespace std;\n\n#define rep(i, n) for(int i=0; i<(n); ++i)\n#define FOR(i, m, n) for(int i=(m); i<(n); ++i)\n#define sz(x) ((int)(x).size())\n#define all(x) (x).begin(),(x).end()\n#define SORT(x) sort((x).begin(),(x).end())\n#define REVE(x) reverse((x).begin(),(x).end())\n#define mp make_pair\n#define pb push_back\n#define Cout(x) cout << (x) << endl\n#define Cout2(x, y) cout << (x) << \" \" << (y) << endl\n#define dump(x) cout << #x << \" = \" << (x) << endl;\n#define forauto(i, a) for(auto i : a)cout << i << \" \"; puts(\"\");\n\ntypedef long long LL;\ntypedef vector<int> VI;\ntypedef vector<LL> VL;\ntypedef vector<string> VS;\ntypedef vector<bool> VB;\ntypedef vector<vector<int>> VVI;\ntypedef pair<int, int> PII;\ntypedef pair<double, double> PDD;\ntypedef complex<double> CD;\n\ndouble dist(PDD p1, PDD p2) {\n\treturn hypot(p1.first - p2.first, p1.second - p2.second);\n}\n\nstruct circle {\n\tdouble x, y, r;\n};\n\nconst double gosa = 0.000001;\n\nint main() {\n\tdouble d1, d2, d3, d4, d5, d6; cin >> d1 >> d2 >> d3 >> d4 >> d5 >> d6;\n\tcircle c1 = { d1,d2,d3 }, c2 = { d4,d5,d6 };\n\n\tint ans = -1;\n\n\tdouble dis = dist(mp(c1.x, c1.y), mp(c2.x, c2.y));\n\tif (abs(dis - (c1.r + c2.r)) < gosa)ans = 3;\n\telse if (abs(max(c1.r, c2.r) - (dis + min(c1.r, c2.r))) < gosa)ans = 1;\n\telse if (dis > c1.r + c2.r)ans = 4;\n\telse if (max(c1.r, c2.r) > dis + min(c1.r, c2.r))ans = 0;\n\telse ans = 2;\n\n\tCout(ans);\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std ;\n\n#define pb(n) push_back(n)\n#define fi first\n#define se second\n#define all(r) begin(r),end(r)\n#define vmax(ary) *max_element(all(ary))\n#define vmin(ary) *min_element(all(ary))\n#define debug(x) cout<<#x<<\": \"<<x<<endl\n#define fcout(n) cout<<fixed<<setprecision((n))\n#define scout(n) cout<<setw(n)\n#define vary(type,name,size,init) vector< type> name(size,init)\n#define vvl(v,w,h,init) vector<vector<ll>> v(w,vector<ll>(h,init))\n#define mp(a,b) make_pair(a,b)\n\n#define rep(i,n) for(int i = 0; i < (int)(n);++i)\n#define REP(i,a,b) for(int i = (a);i < (int)(b);++i)\n#define repi(it,array) for(auto it = array.begin(),end = array.end(); it != end;++it)\n#define repa(n,array) for(auto &n :(array))\n\nusing ll = long long;\nusing pii = pair<int,int> ;\nusing pll = pair<ll,ll> ;\n\nconstexpr ll inf = ((1<<30)-1)*2+1 ;\nconst double EPS = 1e-8;\nconst double INF = 1e12;\ntypedef complex<double> P;//????´???°????????¢?????????????????¨?§£???\nnamespace std {\n  bool operator < (const P& a, const P& b) {//x????????????\n    return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n  }\n  bool sorty(const P& a, const P& b) {//y????????????\n    return imag(a) != imag(b) ? imag(a) < imag(b) : real(a) < real(b);\n  }\n  bool same(const P& a, const P& b) {\n    P p = a - b;\n    if(abs(real(p)) < EPS && abs(imag(p)) < EPS){\n      return true;\n    }\n    return false;\n  }\n}\ndouble cross(const P& a, const P& b) {//??????\n  return imag(conj(a)*b);\n}\ndouble dot(const P& a, const P& b) {//??????\n  return real(conj(a)*b);\n}\n\nstruct L : public vector<P> {//??´???\n  L(){};\n  L(const P &a, const P &b) {\n    push_back(a); push_back(b);\n  }\n};\n\ntypedef vector<P> G;\n\nstruct C {//???\n  P p; double r;\n  C(){};\n  C(const P &p, double r) : p(p), r(r) { }\n};\nint ccw(P a, P b, P c) {//3????????????????????§????????§??????????????????\n  b -= a; c -= a;\n  if (cross(b, c) > 0)   return +1;       // counter clockwise\n  if (cross(b, c) < 0)   return -1;       // clockwise\n  if (dot(b, c) < 0)     return +2;       // c--a--b on line\n  if (norm(b) < norm(c)) return -2;       // a--b--c on line\n  return 0; // a--c--b on line\n}\nint linejudge(const L &ab,const L &cd){ //2??´???????????¢???\n  P a = ab[1] - ab[0],b = cd[1] - cd[0];\n  if(abs(cross(a,b)) < EPS){ // Parallel\n    return 2;\n  }\n  else if(abs(dot(a,b)) < EPS){ //Orthogonal\n    return 1;\n  }\n  return 0;\n}\n// L:line,S:segment,P:point\nbool intersectLL(const L &l, const L &m) {\n  return abs(cross(l[1]-l[0], m[1]-m[0])) > EPS || // non-parallel\n    abs(cross(l[1]-l[0], m[0]-l[0])) < EPS;   // same line\n}\nbool intersectLS(const L &l, const L &s) {\n  return cross(l[1]-l[0], s[0]-l[0])*       // s[0] is left of l\n    cross(l[1]-l[0], s[1]-l[0]) < EPS; // s[1] is right of l\n}\nbool intersectLP(const L &l, const P &p) {\n  return abs(cross(l[1]-p, l[0]-p)) < EPS;\n}\nbool intersectSS(const L &s, const L &t) {\n  return ccw(s[0],s[1],t[0])*ccw(s[0],s[1],t[1]) <= 0 &&\n    ccw(t[0],t[1],s[0])*ccw(t[0],t[1],s[1]) <= 0;\n}\nbool intersectSP(const L &s, const P &p) {\n  return abs(s[0]-p)+abs(s[1]-p)-abs(s[1]-s[0]) < EPS; // triangle inequality\n}\n// L & P intersection\nP projection(const L &l, const P &p) {\n  double t = dot(p-l[0], l[0]-l[1]) / norm(l[0]-l[1]);\n  return l[0] + t*(l[0]-l[1]);\n}\n// L????????????P???????°????\nP reflection(const L &l, const P &p) {\n  return p + 2.0 * (projection(l, p) - p);\n}\ndouble distanceLP(const L &l, const P &p) {\n  return abs(p - projection(l, p));\n}\ndouble distanceLL(const L &l, const L &m) {\n  return intersectLL(l, m) ? 0 : distanceLP(l, m[0]);\n}\ndouble distanceLS(const L &l, const L &s) {\n  if (intersectLS(l, s)) return 0;\n  return min(distanceLP(l, s[0]), distanceLP(l, s[1]));\n}\ndouble distanceSP(const L &s, const P &p) {\n  const P r = projection(s, p);\n  if (intersectSP(s, r)) return abs(r - p);\n  return min(abs(s[0] - p), abs(s[1] - p));\n}\ndouble distanceSS(const L &s, const L &t) {\n  if (intersectSS(s, t)) return 0;\n  return min(min(distanceSP(s, t[0]), distanceSP(s, t[1])), min(distanceSP(t, s[0]), distanceSP(t, s[1])));\n}\ndouble distancePP(const P &p,const P &q){\n  return abs(p - q) ;\n}\nP crosspoint(const L &l, const L &m) {\n  double A = cross(l[1] - l[0], m[1] - m[0]);\n  double B = cross(l[1] - l[0], l[1] - m[0]);\n  if (abs(A) < EPS && abs(B) < EPS) return m[0]; // same line\n  if (abs(A) < EPS) assert(false); // !!!PRECONDITION NOT SATISFIED!!!\n  return m[0] + B / A * (m[1] - m[0]);\n}\nP verticalvector(const P &a,const P &b){//2???????????????????????????????????????\n  if(a.real() == b.real()){\n    return {1.0,0};\n  }\n  if(a.imag() == b.imag()){\n    return {0,1.0};\n  }\n  P p = a - b;\n  P res = {-p.imag(),p.real()};\n  return res / abs(p);\n}\npair<P,P> crosspointCircle(const C &a,const C &b){\n  P m = (a.p+b.p)/2.0;\n  P vv = verticalvector(a.p,b.p);\n  double u = sqrt( a.r * a.r - norm(a.p - b.p) / 4.0);\n  P A = m + u * vv,B = m - u * vv;\n  return mp(A,B);\n}\n\nint circle_judge(const C &a,const C &b){\n  double d = a.r + b.r;\n  double R = max(a.r,b.r),r = min(a.r,b.r);\n  d = d * d;\n  double p = norm(a.p-b.p);\n  if(p > d){\n    return 4; // don't cross\n  }\n  if(abs(p - d) < EPS){\n    return 3; // \n  }\n  if(p > R && p > r){\n    return 2; // cross 2point\n  }\n  if(abs(R - sqrt(p) - r) < EPS){\n    return 1;\n  }\n  if(p < r * r){\n    return 0;\n  }\n}\n\nint main(){\n  cin.tie(0);\n  ios::sync_with_stdio(false);\n  double x,y,r;\n  cin >> x >> y >> r;\n  C c1(P(x,y),r); \n  cin >> x >> y >> r;\n  C c2(P(x,y),r); \n  std::cout << circle_judge(c1,c2) << std::endl;\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ndouble EPS = 0.00000001;\nint sign(double x){\n\tif (x > EPS){\n\t\treturn 1;\n\t} else if (x < -EPS){\n\t\treturn -1;\n\t} else {\n\t\treturn 0;\n\t}\n}\nbool equals(double x, double y){\n\treturn abs(x - y) < EPS;\n}\nstruct point{\n\tdouble x;\n\tdouble y;\n\tpoint(){\n\t\tx = 0;\n\t\ty = 0;\n\t}\n\tpoint(double X, double Y){\n\t\tx = X;\n\t\ty = Y;\n\t}\n\tpoint operator +(){\n\t\treturn point(x, y);\n\t}\n\tpoint operator -(){\n\t\treturn point(-x, -y);\n\t}\n\tpoint operator +(point P){\n\t\treturn point(x + P.x, y + P.y);\n\t}\n\tpoint operator -(point P){\n\t\treturn point(x - P.x, y - P.y);\n\t}\n\tpoint& operator +=(point P){\n\t\tx += P.x;\n\t\ty += P.y;\n\t\treturn *this;\n\t}\n\tpoint& operator -=(point P){\n\t\tx -= P.x;\n\t\ty -= P.y;\n\t\treturn *this;\n\t}\n\tpoint operator *(double k){\n\t\treturn point(x * k, y * k);\n\t}\n\tpoint operator /(double k){\n\t\treturn point(x / k, y / k);\n\t}\n\tpoint& operator *=(double k){\n\t\tx *= k;\n\t\ty *= k;\n\t\treturn *this;\n\t}\n\tpoint& operator /=(double k){\n\t\tx /= k;\n\t\ty /= k;\n\t\treturn *this;\n\t}\n\tbool operator ==(point P){\n\t\treturn equals(x, P.x) && equals(y, P.y);\n\t}\n\tbool operator !=(point P){\n\t\treturn !(*this == P);\n\t}\n\tbool operator <(point P){\n\t\treturn sign(P.x - x) == 1 || equals(x, P.x) && sign(P.y - y) == 1;\n\t}\n\tbool operator >(point P){\n\t\treturn (P < *this);\n\t}\n\tpoint& rotate(double t){\n\t    double X = x * cos(t) - y * sin(t);\n\t    double Y = x * sin(t) + y * cos(t);\n\t    x = X;\n\t    y = Y;\n\t    return *this;\n\t}\n\tpoint& rotate(point P, double t){\n\t    *this -= P;\n\t    (*this).rotate(t);\n\t    *this += P;\n\t    return *this;\n\t}\n\tpoint& rotate90(){\n\t    swap(x, y);\n\t    x = -x;\n\t    return *this;\n\t}\n};\nistream& operator >>(istream &is, point &p){\n\tdouble x, y;\n\tis >> x >> y;\n\tp = point(x, y);\n\treturn is;\n}\nostream& operator <<(ostream &os, point p){\n\tos << p.x << ' ' << p.y;\n\treturn os;\n}\ndouble norm(point P){\n\treturn P.x * P.x + P.y * P.y;\n}\ndouble abs(point P){\n\treturn sqrt(norm(P)); \n}\ndouble dot(point P, point Q){\n\treturn P.x * Q.x + P.y * Q.y;\n}\ndouble cross(point P, point Q){\n  return P.x * Q.y - P.y * Q.x;\n}\ndouble dist(point P, point Q){\n\treturn abs(P - Q);\n}\nstruct circle{\n    point c;\n    double r;\n    circle(){\n    }\n    circle(point C, double R){\n        c = C;\n        r = R;\n    }\n    circle(double x, double y, double R){\n        c = point(x, y);\n        r = R;\n    }\n\tcircle operator +(point P){\n\t    return circle(c + P, r);\n\t}\n\tcircle operator -(point P){\n\t    return circle(c - P, r);\n\t}\n\tcircle& operator +=(point P){\n        c += P;\n        return *this;\n\t}\n\tcircle& operator -=(point P){\n        c -= P;\n        return *this;\n\t}\n    circle operator *(double k){\n        return circle(c, r * k);\n    }\n    circle operator /(double k){\n        return circle(c, r / k);\n    }\n    circle& operator *=(double k){\n        r *= k;\n        return *this;\n    }\n    circle& operator /=(double k){\n        r /= k;\n        return *this;\n    }\n    bool operator ==(circle C2){\n        return c == C2.c && equals(r, C2.r);\n    }\n    bool operator !=(circle C2){\n        return !(*this == C2);\n    }\n};\nistream& operator >>(istream &is, circle &C){\n    point P;\n    double r;\n    cin >> P >> r;\n    C = circle(P, r);\n    return is;\n}\nostream& operator <<(ostream &os, circle C){\n    cout << C.c << ' ' << C.r << endl;\n    return os;\n}\nint circle_pos(circle C1, circle C2){\n    double d = dist(C1.c, C2.c);\n    if (sign(d - (C1.r + C2.r)) == 1){\n        return 4;\n    } else if (sign(d - (C1.r + C2.r)) == 0){\n        return 3;\n    } else if (sign(d - abs(C1.r - C2.r)) == 1){\n        return 2;\n    } else if (sign(d - abs(C1.r - C2.r)) == 0){\n        return 1;\n    } else {\n        return 0;\n    }\n}\nint main(){\n  circle C1, C2;\n  cin >> C1 >> C2;\n  cout << circle_pos(C1, C2) << endl;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <complex>\n#include <utility>\n#define X real()\n#define Y imag()\nusing namespace std;\ntypedef complex<double> P;\ntypedef pair<P,double> C;\nint solve(C a, C b){\n  if(abs(a.first-b.first) > a.second+b.second) return 4;\n  if(abs(a.first-b.first) == a.second+b.second) return 3;\n  if(abs(a.first-b.first) > abs(a.second-b.second)) return 2;\n  if(abs(a.first-b.first) == abs(a.second-b.second)) return 1;\n  return 0;\n}\n\nint main(){\n  C c1, c2;\n  double x, y, r;\n  cin >> x >> y >> r;\n  c1 = C(P(x,y),r);\n  cin >> x >> y >> r;\n  c2 = C(P(x,y),r);\n  cout << solve(c1,c2) << endl;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n\nint main(){\n        int c1x, c1y, c1z;\n        int c2x, c2y, c2z;\n        int z1, z2;\n\n        double result;\n\n        scanf(\"%d %d %d\", &c1x, &c1y, &c1z);\n        scanf(\"%d %d %d\", &c2x, &c2y, &c2z);\n\n        result = sqrt((c1x - c2x) * (c1x - c2x) + (c1y - c2y) * (c1y - c2y));\n\n        z1 = c1z + c2z;\n        z2 = c1z - c2z;\n\n        if(result > z1)\n                {\n                        printf(\"4\\n\");\n                }else if(result == z1)\n                {\n                        printf(\"3\\n\");\n                }else if((result > abs(z2)) && (result < z1)){\n                        printf(\"2\\n\");\n                }else if(result == abs(z2)){\n                        printf(\"1\\n\");\n                }else if(result < abs(z2)){\n                        printf(\"0\\n\");\n                }\n\n                return 0;\n}\n"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<math.h>\n#include<stdlib.h>\n#define max(a,b) a<b?b:a\n#define min(a,b) a<b?a:b\n#define POW2(a)  a*a\n#define ROOP(i,n) for(i = 0;i < n;i++)\n#define _USE_MATH_DEFINES\n\ntypedef struct POINT{\n\tdouble x;\n\tdouble y;\n}POINT;\ntypedef struct LINE{\n\tPOINT s;//start point\n\tPOINT e;//end point\n}LINE;\ntypedef struct COMPLEX{\n\tdouble r;//?????¢\n\tdouble q;//????§???????theta\n}COMPLEX;\ntypedef struct CIRCLE{\n\tdouble r;//??????\n\tPOINT p;//??????\n}CIRCLE;\n\n//POINT????????????\nvoid print_p(POINT a){\n\tprintf(\"(%lf,%lf)\\n\",a.x,a.y);\n}\n\n//LINE????????????\nvoid print_l(LINE a){\n\tprintf(\"(%lf,%lf) -> (%lf,%lf)\\n\",(a.s).x,(a.s).y,(a.e).x,(a.e).y);\n}\n\n//COMPLEX????????????\nvoid print_c(COMPLEX a){\n\tprintf(\"(%lf,%lf)\\n\",a.r,a.q);\n}\n\n//????????????????????¢?????????\ndouble norm2(POINT a){\n\treturn POW2(a.x)+POW2(a.y);\n}\n\n//????????????????????¢\ndouble norm(POINT a){\n\treturn sqrt(norm2(a));\n}\n\n//a->b?????´??§???????????????\nPOINT make_vec(POINT a,POINT b){\n\tb.x -= a.x;\n\tb.y -= a.y;\n\treturn b;\n}\n\n//2???a,b???????????¢\ndouble distance(POINT a,POINT b){\n\treturn norm(make_vec(a,b));\n}\n\n//??´??§????????????\nPOINT sum_vec(POINT a,POINT b){\n\ta.x += b.x;\n\ta.y += b.y;\n\treturn a;\n}\n\n//??´??§????????????\n//mkae_vec??¨?????£??????????????¨???????????????\n//??????????????????\nPOINT dif_vec(POINT a,POINT b){\n\ta.x -= b.x;\n\ta.y -= b.y;\n\treturn a;\n}\n\n//??´??§????????????????????????\nPOINT scalar_vec(POINT a,double k){\n\ta.x *= k;\n\ta.y *= k;\n\treturn a;\n}\n\n//???????????????\nPOINT minus_vec(POINT a){\n\treturn scalar_vec(a,-1.0);\n}\n\n//??????\ndouble dot(POINT a,POINT b){\n\treturn a.x*b.x + a.y*b.y;\n}\n\n//??????\ndouble cross(POINT a,POINT b){\n\treturn a.x*b.y - a.y*b.x;\n}\n\n//AP:PB=t:s??¨?????????????±???????\n//k, 0:??????, 1:??????\n//* t:(1-t)??§???????????£??????????????£????????????????????????????????????????????????????????¨?????£???\nPOINT division(POINT a,POINT b,double t,double s,int k){\n\tdouble tmp = t + s * (1 - k*2);\n\ta.x += (make_vec(a,b)).x / tmp * t;\n\ta.y += (make_vec(a,b)).y / tmp * t;\n\treturn a;\n}\n\n//???p????????´???a?????????????????????????¶??????????\nPOINT perpendicular(LINE a,POINT p){\n\tPOINT ps = make_vec(p,a.s);\n\tPOINT pe = make_vec(p,a.e);\n\tdouble t = norm2(ps) - dot(ps,pe);\n\tdouble s = norm2(pe) - dot(ps,pe);\n\treturn division(a.s,a.e,t,s,0);\n}\n\n//??´???a???????????????p??¨????§°???????????????\nPOINT reflection(LINE a,POINT p){\n\tPOINT h = perpendicular(a,p);\n\treturn sum_vec(h,make_vec(p,h));\n}\n\n//* ????§???¢?????????\nint inclusion(POINT a[],int n,POINT p){\n\tint ans = 0;\n\tint i;\n\tPOINT g[n+1];\n\tdouble w,rad = 0.0;\n\n\tfor(i = 0;i < n;i++){\n\t\tg[i] = a[i];\n\t}\n\tg[n] = g[0];\n\n\tfor(i = 0;i < n;i++){\n\t\tif(g[i].x == p.x && g[i].y == p.y){\n\t\t\treturn ans = 1;\n\t\t}\n\t}\n\tfor(i = 0;i < n;i++){\n\t\tw = atan2(cross(make_vec(p,g[i]),make_vec(p,g[i+1])),\n\t\t\t\tdot(make_vec(p,g[i]),make_vec(p,g[i+1])));\n\t\trad += w;\n\t\tif(fabs(w - M_PI) <= 0.000001 ||\n\t\t\t fabs(w + M_PI) <= 0.000001)\n\t\t\treturn ans = 1;\n\t}\n\tif(fabs(rad - M_PI*2)<=0.000001){//2??\n\t\treturn ans = 2;//in!\n\t}\n\treturn ans;\n}\n\n// a.s, a.e, p?????????????????????\n// ???????¨???????????????????????????????  1\n// ????¨?????????????????????????????????? -1\n// p, a.s, a.e????????????????????? 2\n// a.s, a.e, p?????????????????????-2\n// ???p?????´???a???????????????????????? 0\nint ccw(LINE a,POINT p){\n\tint cls = cross(make_vec(a.s,a.e),make_vec(a.s,p));\n\tif(cls > 0){\n\t\treturn  1;\n\t}else if(cls < 0){\n\t\treturn -1;\n\t}else if(dot(make_vec(a.s,a.e),make_vec(a.s,p)) < 0.0){\n\t\treturn  2;\n\t}else if(dot(make_vec(a.e,a.s),make_vec(a.e,p)) < 0.0){\n\t\treturn -2;\n\t}else{\n\t\treturn  0;\n\t}\n}\n\n// ??????????????????\nint parallel(LINE a,LINE b){\n\tif(!cross(make_vec(a.s,a.e),make_vec(b.s,b.e)))\n\t\treturn 1;\n\telse\n\t\treturn 0;\n}\n\n// ?????´????????????\nint orthogonal(LINE a,LINE b){\n\tif(!dot(make_vec(a.s,a.e),make_vec(b.s,b.e)))\n\t\treturn 1;\n\telse\n\t\treturn 0;\n}\n\n// ??????a,b???????????????????????????\nint intersection(LINE a,LINE b){\n\tif(ccw(a,b.s)*ccw(a,b.e) <= 0 &&\n\t   ccw(b,a.s)*ccw(b,a.e) <= 0)\n\t\treturn 1;\n\treturn 0;\n}\n\n//??????a,b?????????\nPOINT cross_point(LINE a,LINE b){\n\tdouble c1 = cross(make_vec(a.s,b.s),make_vec(a.s,b.e));\n\tdouble c2 = cross(make_vec(a.e,b.s),make_vec(a.e,b.e));\n\treturn division(a.s,a.e,fabs(c1),fabs(c2),0);\n}\n\n//??´???a??¨???p????????¢\ndouble distanceLP(LINE a,POINT p){\n\tif(dot(make_vec(a.s,a.e),make_vec(a.s,p)) < 0.0)\n\t\treturn norm(make_vec(a.s,p));\n\tif(dot(make_vec(a.e,a.s),make_vec(a.e,p)) < 0.0)\n\t\treturn norm(make_vec(a.e,p));\n\treturn norm(make_vec(p,perpendicular(a,p)));\n}\n\n//??´???a??¨??´???b????????¢\ndouble distanceLL(LINE a,LINE b){\n\tdouble a1,a2,a3,a4;\n\tif(intersection(a,b) == 1)\n\t\treturn 0.0000000000;\n\ta1 = distanceLP(a,b.s);\n\ta2 = distanceLP(a,b.e);\n\ta3 = distanceLP(b,a.s);\n\ta4 = distanceLP(b,a.e);\n\t//a1 = min(a1,min(a2,min(a3,a4)));\n\ta1 = min(a1,a2);\n\ta3 = min(a3,a4);\n\ta1 = min(a1,a3);\n\treturn a1;\n}\n\n//????§???¢?????¢???\ndouble area(POINT a[],int n){\n\tdouble ans = 0.0;\n\tint i;\n\tPOINT g[n+1];\n\tdouble w,rad = 0.0;\n\n\tfor(i = 0;i < n;i++){\n\t\tg[i] = a[i];\n\t}\n\tg[n] = g[0];\n\n\tfor(i = 1;i < n-1;i ++){\n\t\tans += cross(make_vec(g[0],g[i]),make_vec(g[0],g[i+1]));\n\t}\n\treturn fabs(ans);\n}\n\n\n//* ?????§??????\nint is_convex(POINT a[],int n){\n\tint ans = 0;\n\tint i,j;\n\tPOINT g[n+1];\n\tdouble w,rad = 0.0;\n\n\tfor(i = 0;i < n;i++){\n\t\tg[i] = a[i];\n\t}\n\tg[n] = g[0];\n\n\tfor(i = 1;i < n;i++){\n\t\tw = cross(make_vec(g[i],g[i-1]),make_vec(g[i],g[i+1]))/norm(make_vec(g[i],g[i-1]))/norm(make_vec(g[i],g[i+1]));\n\t\tif(w > 0.00000000){\n\t\t\treturn 0;\n\t\t}\t\t\t\n\t}\n\treturn 1;\n}\n\n//* ??????????????????\n//4\n//3\n//2\n//1\n//0\n//??\\?????°?????????\nint inter_c(CIRCLE a,CIRCLE b){\n\tdouble tmp = distance(a.p,b.p);\n\tif(tmp > a.r+b.r)\n\t\treturn 4;\n\telse if(fabs(tmp-a.r+b.r) <= 0.00000001)\n\t\treturn 3;\n\telse if(fabs(tmp-fabs(a.r-b.r)) <= 0.00000001)\n\t\treturn 1;\n\telse if(tmp < a.r-b.r)\n\t\treturn 0;\n\telse return 2;\n}\n\n\nint main(){\n\tCIRCLE a,b;\n\tPOINT p[101];\n\tfor(i =0 ;i < k;i++){\n\t\tscanf(\"%lf%lf%lf\",&a.p.x,&a.p.y,&a.r);\n\t\tscanf(\"%lf%lf%lf\",&b.p.x,&b.p.y,&b.r);\n\t}\n\tprintf(\"%d\\n\",inter_c(a,b));\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n\nint main(){\n\n  int i=0, x[2], y[2], r[2], xplus[2], yplus[2], xminus[2], yminus[2];\n\n  while(i<2){\n    scanf(\"%d%d%d\", &x[i],&y[i],&r[i]);  \n    i++;\n  }\n\n  i = 0;\n  while(i<2){\n    xplus[i] = x[i] + r[i];\n    yplus[i] = y[i] + r[i];\n    xminus[i] = x[i] - r[i];\n    yminus[i] = y[i] - r[i];\n    i++;\n  }\n\n  if(xplus[0]<xminus[1] || xplus[1]<xminus[0] || yplus[0]<yminus[1] || yplus[1]<yminus[0]) printf(\"4\\n\");\n\n  else if(y[0]==y[1] && xplus[0]==xminus[1]) printf(\"3\\n\");\n  else if(y[0]==y[1] && xplus[1]==xminus[0]) printf(\"3\\n\");\n  else if(x[0]==x[1] && yplus[0]==yminus[1]) printf(\"3\\n\");\n  else if(x[0]==x[1] && yplus[1]==yminus[0]) printf(\"3\\n\");\n\n  else if(xminus[0]<xminus[1] && xplus[0]<xplus[1]) printf(\"2\\n\");\n  else if(xminus[1]<xminus[0] && xplus[1]<xplus[0]) printf(\"2\\n\");\n  else if(yminus[0]<yminus[1] && yplus[0]<yplus[1]) printf(\"2\\n\");\n  else if(yminus[1]<yminus[0] && yplus[1]<yplus[0]) printf(\"2\\n\");\n\n  else if(y[0]==y[1] && xplus[0]==xplus[1]) printf(\"1\\n\");\n  else if(y[0]==y[1] && xminus[0]==xminus[1]) printf(\"1\\n\");\n  else if(x[0]==x[1] && yplus[0]==yplus[1]) printf(\"1\\n\");\n  else if(x[0]==x[1] && yminus[0]==yminus[1]) printf(\"1\\n\");\n\n  else if(xminus[0]<xminus[1] && xplus[1]<xplus[0] && yminus[0]<yminus[1] && yplus[1]<yplus[0]) printf(\"0\\n\");\n  else if(xminus[1]<xminus[0] && xplus[0]<xplus[1] && yminus[1]<yminus[0] && yplus[0]<yplus[1]) printf(\"0\\n\"); \n\n  return 0;\n}\n\n"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<stdlib.h>\n#include<math.h>\n \nint calc(float,float,float,float,float,float);\n\nint main(){\n  int i;\n  float cl[6];\n  for(i=0;i<6;i++){\n    scanf(\"%f\",&cl[i]);\n    /*\n    if((i != 2) || (i != 5)){\n      if(fabsf (cl[i]) >= 1000.0) return -1;\n    }else{\n      if(cl[i] < 1.0 || cl[i] > 1000.0) return -2;\n    }\n    */\n  }\n  printf(\"%d\\n\",calc(cl[0],cl[1],cl[2],cl[3],cl[4],cl[5]));\n  return 0;\n}\n\nint calc(float c1x,float c1y,float c1r,float c2x,float c2y,float c2r){\n  float oto = sqrtf(powf(c1x-c2x,2)+powf(c1y-c2y,2));\n  float rtr = c1r + c2r;\n  float rir = fabsf(c1r - c2r);\n  int f = -1;\n  if(oto < rir) f = 0;\n  if(oto == rir) f = 1;\n  if(rir < oto && oto < rtr) f = 2;\n  if(oto == rtr) f = 3;\n  if(oto > rtr) f = 4;\n  return f;\n}\n\n"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\nint main() {\n    int c1x, c1y, c1r, c2x, c2y, c2r;\n    scanf(\"%d %d %d\", &c1x, &c1y, &c1r);\n    scanf(\"%d %d %d\", &c2x, &c2y, &c2r);\n\n    if(c1r<c2r){\n        if(sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2)) > c1r + c2r) printf(\"4\");\n        else if(sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2)) == c1r + c2r) printf(\"3\");\n        else if((c2r-c1r<sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2))) && (sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2)) < c1r + c2r)) printf(\"2\");\n        else if(sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2)) == c2r-c1r) printf(\"1\");\n        else if(sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2)) < c2r-c1r) printf(\"0\");\n\n\n    }\n\n    else{\n        if(sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2)) > c1r + c2r) printf(\"4\");\n        else if(sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2)) == c1r + c2r) printf(\"3\");\n        else if(((c1r-c2r<sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2))) && (sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2)) < c1r + c2r))) printf(\"2\");\n        else if(sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2)) == c1r-c2r) printf(\"1\");\n        else if(sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2)) < c1r-c2r) printf(\"0\");\n    }\n}\n\n\n"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n\nint main(){\n        int c1x, c1y, c1z;\n        int c2x, c2y, c2z;\n        int z1, z2;\n\n        double result;\n\n        scanf(\"%d %d %d\", &c1x, &c1y, &c1z);\n        scanf(\"%d %d %d\", &c2x, &c2y, &c2z);\n\n        result = sqrt((c1x - c2x) * (c1x - c2x) + (c1y - c2y) * (c1y - c2y));\n\n        z1 = c1z + c2z;\n        z2 = c1z - c2z;\n\n        if(result > z1)\n                {\n                        printf(\"4\\n\");\n                }else if(result == z1)\n                {\n                        printf(\"3\\n\");\n                }else if((result > abs(z2)) && (result < z1)){\n                        printf(\"2\\n\");\n                }else if(result == abs(z2)){\n                        printf(\"1\\n\");\n                }else if(result < abs(z2)){\n                        printf(\"0\\n\");\n                }\n\n                return 0;\n}\n"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\n\n\n\nstruct Circle{   // 円定義構造体\n\tfloat x,y;   // x,y:中心点座標\n\tfloat r;   // r:円の半径\n};\n\n\nint main(){\n\tstruct Circle C1;\n\tstruct Circle C2;\n\tint check;\n\tint d;\n\t\n\tscanf(\"%d %d %d\", &C1.x, &C1.y, &C1.r);\n\tscanf(\"%d %d %d\", &C2.x, &C2.y, &C2.r);\n\t\n\n\n\n\t// 円同士の当たり判定\n\tfloat r = C1.r + C2.r;   // ２円の半径の合計\n\tfloat x = C1.x - C2.x;   // X座標の差\n\tfloat y = C1.y - C2.y;   // Y座標の差\n\n d = sqrt(x*x+y*y);\n\n\tif(d>r)check=4;\n\telse if (d==r)  check=3;\n\telse if(fabs(C1.r - C2.r)<d && d<r)check=2;\n\telse if(d==fabs(C1.r - C2.r)) check=1;\n\telse check=0;\n\n\t\tprintf(\"%d\\n\",check);\n\n\t\t\treturn 0;\n}\n\n\n"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<math.h>\n#include<stdlib.h>\n#define max(a,b) a<b?b:a\n#define min(a,b) a<b?a:b\n#define POW2(a)  a*a\n#define ROOP(i,n) for(i = 0;i < n;i++)\n#define _USE_MATH_DEFINES\n\ntypedef struct POINT{\n\tdouble x;\n\tdouble y;\n}POINT;\ntypedef struct LINE{\n\tPOINT s;//start point\n\tPOINT e;//end point\n}LINE;\ntypedef struct COMPLEX{\n\tdouble r;//?????¢\n\tdouble q;//????§???????theta\n}COMPLEX;\ntypedef struct CIRCLE{\n\tdouble r;//??????\n\tPOINT p;//??????\n}CIRCLE;\n\n//POINT????????????\nvoid print_p(POINT a){\n\tprintf(\"(%lf,%lf)\\n\",a.x,a.y);\n}\n\n//LINE????????????\nvoid print_l(LINE a){\n\tprintf(\"(%lf,%lf) -> (%lf,%lf)\\n\",(a.s).x,(a.s).y,(a.e).x,(a.e).y);\n}\n\n//COMPLEX????????????\nvoid print_c(COMPLEX a){\n\tprintf(\"(%lf,%lf)\\n\",a.r,a.q);\n}\n\n//????????????????????¢?????????\ndouble norm2(POINT a){\n\treturn POW2(a.x)+POW2(a.y);\n}\n\n//????????????????????¢\ndouble norm(POINT a){\n\treturn sqrt(norm2(a));\n}\n\n//a->b?????´??§???????????????\nPOINT make_vec(POINT a,POINT b){\n\tb.x -= a.x;\n\tb.y -= a.y;\n\treturn b;\n}\n\n//2???a,b???????????¢\ndouble distance(POINT a,POINT b){\n\treturn norm(make_vec(a,b));\n}\n\n//??´??§????????????\nPOINT sum_vec(POINT a,POINT b){\n\ta.x += b.x;\n\ta.y += b.y;\n\treturn a;\n}\n\n//??´??§????????????\n//mkae_vec??¨?????£??????????????¨???????????????\n//??????????????????\nPOINT dif_vec(POINT a,POINT b){\n\ta.x -= b.x;\n\ta.y -= b.y;\n\treturn a;\n}\n\n//??´??§????????????????????????\nPOINT scalar_vec(POINT a,double k){\n\ta.x *= k;\n\ta.y *= k;\n\treturn a;\n}\n\n//???????????????\nPOINT minus_vec(POINT a){\n\treturn scalar_vec(a,-1.0);\n}\n\n//??????\ndouble dot(POINT a,POINT b){\n\treturn a.x*b.x + a.y*b.y;\n}\n\n//??????\ndouble cross(POINT a,POINT b){\n\treturn a.x*b.y - a.y*b.x;\n}\n\n//AP:PB=t:s??¨?????????????±???????\n//k, 0:??????, 1:??????\n//* t:(1-t)??§???????????£??????????????£????????????????????????????????????????????????????????¨?????£???\nPOINT division(POINT a,POINT b,double t,double s,int k){\n\tdouble tmp = t + s * (1 - k*2);\n\ta.x += (make_vec(a,b)).x / tmp * t;\n\ta.y += (make_vec(a,b)).y / tmp * t;\n\treturn a;\n}\n\n//???p????????´???a?????????????????????????¶??????????\nPOINT perpendicular(LINE a,POINT p){\n\tPOINT ps = make_vec(p,a.s);\n\tPOINT pe = make_vec(p,a.e);\n\tdouble t = norm2(ps) - dot(ps,pe);\n\tdouble s = norm2(pe) - dot(ps,pe);\n\treturn division(a.s,a.e,t,s,0);\n}\n\n//??´???a???????????????p??¨????§°???????????????\nPOINT reflection(LINE a,POINT p){\n\tPOINT h = perpendicular(a,p);\n\treturn sum_vec(h,make_vec(p,h));\n}\n\n//* ????§???¢?????????\nint inclusion(POINT a[],int n,POINT p){\n\tint ans = 0;\n\tint i;\n\tPOINT g[n+1];\n\tdouble w,rad = 0.0;\n\n\tfor(i = 0;i < n;i++){\n\t\tg[i] = a[i];\n\t}\n\tg[n] = g[0];\n\n\tfor(i = 0;i < n;i++){\n\t\tif(g[i].x == p.x && g[i].y == p.y){\n\t\t\treturn ans = 1;\n\t\t}\n\t}\n\tfor(i = 0;i < n;i++){\n\t\tw = atan2(cross(make_vec(p,g[i]),make_vec(p,g[i+1])),\n\t\t\t\tdot(make_vec(p,g[i]),make_vec(p,g[i+1])));\n\t\trad += w;\n\t\tif(fabs(w - M_PI) <= 0.000001 ||\n\t\t\t fabs(w + M_PI) <= 0.000001)\n\t\t\treturn ans = 1;\n\t}\n\tif(fabs(rad - M_PI*2)<=0.000001){//2??\n\t\treturn ans = 2;//in!\n\t}\n\treturn ans;\n}\n\n// a.s, a.e, p?????????????????????\n// ???????¨???????????????????????????????  1\n// ????¨?????????????????????????????????? -1\n// p, a.s, a.e????????????????????? 2\n// a.s, a.e, p?????????????????????-2\n// ???p?????´???a???????????????????????? 0\nint ccw(LINE a,POINT p){\n\tint cls = cross(make_vec(a.s,a.e),make_vec(a.s,p));\n\tif(cls > 0){\n\t\treturn  1;\n\t}else if(cls < 0){\n\t\treturn -1;\n\t}else if(dot(make_vec(a.s,a.e),make_vec(a.s,p)) < 0.0){\n\t\treturn  2;\n\t}else if(dot(make_vec(a.e,a.s),make_vec(a.e,p)) < 0.0){\n\t\treturn -2;\n\t}else{\n\t\treturn  0;\n\t}\n}\n\n// ??????????????????\nint parallel(LINE a,LINE b){\n\tif(!cross(make_vec(a.s,a.e),make_vec(b.s,b.e)))\n\t\treturn 1;\n\telse\n\t\treturn 0;\n}\n\n// ?????´????????????\nint orthogonal(LINE a,LINE b){\n\tif(!dot(make_vec(a.s,a.e),make_vec(b.s,b.e)))\n\t\treturn 1;\n\telse\n\t\treturn 0;\n}\n\n// ??????a,b???????????????????????????\nint intersection(LINE a,LINE b){\n\tif(ccw(a,b.s)*ccw(a,b.e) <= 0 &&\n\t   ccw(b,a.s)*ccw(b,a.e) <= 0)\n\t\treturn 1;\n\treturn 0;\n}\n\n//??????a,b?????????\nPOINT cross_point(LINE a,LINE b){\n\tdouble c1 = cross(make_vec(a.s,b.s),make_vec(a.s,b.e));\n\tdouble c2 = cross(make_vec(a.e,b.s),make_vec(a.e,b.e));\n\treturn division(a.s,a.e,fabs(c1),fabs(c2),0);\n}\n\n//??´???a??¨???p????????¢\ndouble distanceLP(LINE a,POINT p){\n\tif(dot(make_vec(a.s,a.e),make_vec(a.s,p)) < 0.0)\n\t\treturn norm(make_vec(a.s,p));\n\tif(dot(make_vec(a.e,a.s),make_vec(a.e,p)) < 0.0)\n\t\treturn norm(make_vec(a.e,p));\n\treturn norm(make_vec(p,perpendicular(a,p)));\n}\n\n//??´???a??¨??´???b????????¢\ndouble distanceLL(LINE a,LINE b){\n\tdouble a1,a2,a3,a4;\n\tif(intersection(a,b) == 1)\n\t\treturn 0.0000000000;\n\ta1 = distanceLP(a,b.s);\n\ta2 = distanceLP(a,b.e);\n\ta3 = distanceLP(b,a.s);\n\ta4 = distanceLP(b,a.e);\n\t//a1 = min(a1,min(a2,min(a3,a4)));\n\ta1 = min(a1,a2);\n\ta3 = min(a3,a4);\n\ta1 = min(a1,a3);\n\treturn a1;\n}\n\n//????§???¢?????¢???\ndouble area(POINT a[],int n){\n\tdouble ans = 0.0;\n\tint i;\n\tPOINT g[n+1];\n\tdouble w,rad = 0.0;\n\n\tfor(i = 0;i < n;i++){\n\t\tg[i] = a[i];\n\t}\n\tg[n] = g[0];\n\n\tfor(i = 1;i < n-1;i ++){\n\t\tans += cross(make_vec(g[0],g[i]),make_vec(g[0],g[i+1]));\n\t}\n\treturn fabs(ans);\n}\n\n\n//* ?????§??????\nint is_convex(POINT a[],int n){\n\tint ans = 0;\n\tint i,j;\n\tPOINT g[n+1];\n\tdouble w,rad = 0.0;\n\n\tfor(i = 0;i < n;i++){\n\t\tg[i] = a[i];\n\t}\n\tg[n] = g[0];\n\n\tfor(i = 1;i < n;i++){\n\t\tw = cross(make_vec(g[i],g[i-1]),make_vec(g[i],g[i+1]))/norm(make_vec(g[i],g[i-1]))/norm(make_vec(g[i],g[i+1]));\n\t\tif(w > 0.00000000){\n\t\t\treturn 0;\n\t\t}\t\t\t\n\t}\n\treturn 1;\n}\n\n//* ??????????????????\n//4\n//3\n//2\n//1\n//0\n//??\\?????°?????????\nint inter_c(CIRCLE a,CIRCLE b){\n\tdouble tmp = distance(a.p,b.p);\n\tif(tmp > a.r+b.r)\n\t\treturn 4;\n\telse if(fabs(tmp-(a.r+b.r)) <= 0.00000001)\n\t\treturn 3;\n\telse if(fabs(tmp-fabs(a.r-b.r)) <= 0.00000001)\n\t\treturn 1;\n\telse if(tmp < fabs(a.r-b.r))\n\t\treturn 0;\n\telse return 2;\n}\n\n\nint main(){\n\tCIRCLE a,b;\n\tPOINT p[101];\n\t\tscanf(\"%lf%lf%lf\",&a.p.x,&a.p.y,&a.r);\n\t\tscanf(\"%lf%lf%lf\",&b.p.x,&b.p.y,&b.r);\n\t\n\tprintf(\"%d\\n\",inter_c(a,b));\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<math.h>\n#include<stdlib.h>\n#define max(a,b) a<b?b:a\n#define min(a,b) a<b?a:b\n#define POW2(a)  a*a\n#define ROOP(i,n) for(i = 0;i < n;i++)\n#define _USE_MATH_DEFINES\n\ntypedef struct POINT{\n\tdouble x;\n\tdouble y;\n}POINT;\ntypedef struct LINE{\n\tPOINT s;//start point\n\tPOINT e;//end point\n}LINE;\ntypedef struct COMPLEX{\n\tdouble r;//?????¢\n\tdouble q;//????§???????theta\n}COMPLEX;\ntypedef struct CIRCLE{\n\tdouble r;//??????\n\tPOINT p;//??????\n}CIRCLE;\n\n//POINT????????????\nvoid print_p(POINT a){\n\tprintf(\"(%lf,%lf)\\n\",a.x,a.y);\n}\n\n//LINE????????????\nvoid print_l(LINE a){\n\tprintf(\"(%lf,%lf) -> (%lf,%lf)\\n\",(a.s).x,(a.s).y,(a.e).x,(a.e).y);\n}\n\n//COMPLEX????????????\nvoid print_c(COMPLEX a){\n\tprintf(\"(%lf,%lf)\\n\",a.r,a.q);\n}\n\n//????????????????????¢?????????\ndouble norm2(POINT a){\n\treturn POW2(a.x)+POW2(a.y);\n}\n\n//????????????????????¢\ndouble norm(POINT a){\n\treturn sqrt(norm2(a));\n}\n\n//a->b?????´??§???????????????\nPOINT make_vec(POINT a,POINT b){\n\tb.x -= a.x;\n\tb.y -= a.y;\n\treturn b;\n}\n\n//2???a,b???????????¢\ndouble distance(POINT a,POINT b){\n\treturn norm(make_vec(a,b));\n}\n\n//??´??§????????????\nPOINT sum_vec(POINT a,POINT b){\n\ta.x += b.x;\n\ta.y += b.y;\n\treturn a;\n}\n\n//??´??§????????????\n//mkae_vec??¨?????£??????????????¨???????????????\n//??????????????????\nPOINT dif_vec(POINT a,POINT b){\n\ta.x -= b.x;\n\ta.y -= b.y;\n\treturn a;\n}\n\n//??´??§????????????????????????\nPOINT scalar_vec(POINT a,double k){\n\ta.x *= k;\n\ta.y *= k;\n\treturn a;\n}\n\n//???????????????\nPOINT minus_vec(POINT a){\n\treturn scalar_vec(a,-1.0);\n}\n\n//??????\ndouble dot(POINT a,POINT b){\n\treturn a.x*b.x + a.y*b.y;\n}\n\n//??????\ndouble cross(POINT a,POINT b){\n\treturn a.x*b.y - a.y*b.x;\n}\n\n//AP:PB=t:s??¨?????????????±???????\n//k, 0:??????, 1:??????\n//* t:(1-t)??§???????????£??????????????£????????????????????????????????????????????????????????¨?????£???\nPOINT division(POINT a,POINT b,double t,double s,int k){\n\tdouble tmp = t + s * (1 - k*2);\n\ta.x += (make_vec(a,b)).x / tmp * t;\n\ta.y += (make_vec(a,b)).y / tmp * t;\n\treturn a;\n}\n\n//???p????????´???a?????????????????????????¶??????????\nPOINT perpendicular(LINE a,POINT p){\n\tPOINT ps = make_vec(p,a.s);\n\tPOINT pe = make_vec(p,a.e);\n\tdouble t = norm2(ps) - dot(ps,pe);\n\tdouble s = norm2(pe) - dot(ps,pe);\n\treturn division(a.s,a.e,t,s,0);\n}\n\n//??´???a???????????????p??¨????§°???????????????\nPOINT reflection(LINE a,POINT p){\n\tPOINT h = perpendicular(a,p);\n\treturn sum_vec(h,make_vec(p,h));\n}\n\n//* ????§???¢?????????\nint inclusion(POINT a[],int n,POINT p){\n\tint ans = 0;\n\tint i;\n\tPOINT g[n+1];\n\tdouble w,rad = 0.0;\n\n\tfor(i = 0;i < n;i++){\n\t\tg[i] = a[i];\n\t}\n\tg[n] = g[0];\n\n\tfor(i = 0;i < n;i++){\n\t\tif(g[i].x == p.x && g[i].y == p.y){\n\t\t\treturn ans = 1;\n\t\t}\n\t}\n\tfor(i = 0;i < n;i++){\n\t\tw = atan2(cross(make_vec(p,g[i]),make_vec(p,g[i+1])),\n\t\t\t\tdot(make_vec(p,g[i]),make_vec(p,g[i+1])));\n\t\trad += w;\n\t\tif(fabs(w - M_PI) <= 0.000001 ||\n\t\t\t fabs(w + M_PI) <= 0.000001)\n\t\t\treturn ans = 1;\n\t}\n\tif(fabs(rad - M_PI*2)<=0.000001){//2??\n\t\treturn ans = 2;//in!\n\t}\n\treturn ans;\n}\n\n// a.s, a.e, p?????????????????????\n// ???????¨???????????????????????????????  1\n// ????¨?????????????????????????????????? -1\n// p, a.s, a.e????????????????????? 2\n// a.s, a.e, p?????????????????????-2\n// ???p?????´???a???????????????????????? 0\nint ccw(LINE a,POINT p){\n\tint cls = cross(make_vec(a.s,a.e),make_vec(a.s,p));\n\tif(cls > 0){\n\t\treturn  1;\n\t}else if(cls < 0){\n\t\treturn -1;\n\t}else if(dot(make_vec(a.s,a.e),make_vec(a.s,p)) < 0.0){\n\t\treturn  2;\n\t}else if(dot(make_vec(a.e,a.s),make_vec(a.e,p)) < 0.0){\n\t\treturn -2;\n\t}else{\n\t\treturn  0;\n\t}\n}\n\n// ??????????????????\nint parallel(LINE a,LINE b){\n\tif(!cross(make_vec(a.s,a.e),make_vec(b.s,b.e)))\n\t\treturn 1;\n\telse\n\t\treturn 0;\n}\n\n// ?????´????????????\nint orthogonal(LINE a,LINE b){\n\tif(!dot(make_vec(a.s,a.e),make_vec(b.s,b.e)))\n\t\treturn 1;\n\telse\n\t\treturn 0;\n}\n\n// ??????a,b???????????????????????????\nint intersection(LINE a,LINE b){\n\tif(ccw(a,b.s)*ccw(a,b.e) <= 0 &&\n\t   ccw(b,a.s)*ccw(b,a.e) <= 0)\n\t\treturn 1;\n\treturn 0;\n}\n\n//??????a,b?????????\nPOINT cross_point(LINE a,LINE b){\n\tdouble c1 = cross(make_vec(a.s,b.s),make_vec(a.s,b.e));\n\tdouble c2 = cross(make_vec(a.e,b.s),make_vec(a.e,b.e));\n\treturn division(a.s,a.e,fabs(c1),fabs(c2),0);\n}\n\n//??´???a??¨???p????????¢\ndouble distanceLP(LINE a,POINT p){\n\tif(dot(make_vec(a.s,a.e),make_vec(a.s,p)) < 0.0)\n\t\treturn norm(make_vec(a.s,p));\n\tif(dot(make_vec(a.e,a.s),make_vec(a.e,p)) < 0.0)\n\t\treturn norm(make_vec(a.e,p));\n\treturn norm(make_vec(p,perpendicular(a,p)));\n}\n\n//??´???a??¨??´???b????????¢\ndouble distanceLL(LINE a,LINE b){\n\tdouble a1,a2,a3,a4;\n\tif(intersection(a,b) == 1)\n\t\treturn 0.0000000000;\n\ta1 = distanceLP(a,b.s);\n\ta2 = distanceLP(a,b.e);\n\ta3 = distanceLP(b,a.s);\n\ta4 = distanceLP(b,a.e);\n\t//a1 = min(a1,min(a2,min(a3,a4)));\n\ta1 = min(a1,a2);\n\ta3 = min(a3,a4);\n\ta1 = min(a1,a3);\n\treturn a1;\n}\n\n//????§???¢?????¢???\ndouble area(POINT a[],int n){\n\tdouble ans = 0.0;\n\tint i;\n\tPOINT g[n+1];\n\tdouble w,rad = 0.0;\n\n\tfor(i = 0;i < n;i++){\n\t\tg[i] = a[i];\n\t}\n\tg[n] = g[0];\n\n\tfor(i = 1;i < n-1;i ++){\n\t\tans += cross(make_vec(g[0],g[i]),make_vec(g[0],g[i+1]));\n\t}\n\treturn fabs(ans);\n}\n\n\n//* ?????§??????\nint is_convex(POINT a[],int n){\n\tint ans = 0;\n\tint i,j;\n\tPOINT g[n+1];\n\tdouble w,rad = 0.0;\n\n\tfor(i = 0;i < n;i++){\n\t\tg[i] = a[i];\n\t}\n\tg[n] = g[0];\n\n\tfor(i = 1;i < n;i++){\n\t\tw = cross(make_vec(g[i],g[i-1]),make_vec(g[i],g[i+1]))/norm(make_vec(g[i],g[i-1]))/norm(make_vec(g[i],g[i+1]));\n\t\tif(w > 0.00000000){\n\t\t\treturn 0;\n\t\t}\t\t\t\n\t}\n\treturn 1;\n}\n\n//* ??????????????????\n//4\n//3\n//2\n//1\n//0\n//??\\?????°?????????\nint inter_c(CIRCLE a,CIRCLE b){\n\tdouble tmp = distance(a.p,b.p);\n\tif(tmp > a.r+b.r)\n\t\treturn 4;\n\telse if(fabs(tmp,a.r+b.r) <= 0.00000001)\n\t\treturn 3;\n\telse if(fabs(tmp,fabs(a.r-b.r)) <= 0.00000001)\n\t\treturn 1;\n\telse if(tmp < a.r-b.r)\n\t\treturn 0;\n\telse return 2;\n}\n\n\nint main(){\n\tCIRCLE a,b;\n\tPOINT p[101];\n\tfor(i =0 ;i < k;i++){\n\t\tscanf(\"%lf%lf%lf\",&a.p.x,&a.p.y,&a.r);\n\t\tscanf(\"%lf%lf%lf\",&b.p.x,&b.p.y,&b.r);\n\t}\n\tprintf(\"%d\\n\",inter_c(a,b));\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n#include <float.h>\n\n#define Np 1000\n#define Nm -1000\n\ndouble distance(double,double);\ndouble pythagorean(double,double);\nint intersection(double,double,double);\n\ndouble c1x,c1y,c1r;\ndouble c2x,c2y,c2r;\n\nint main(){\n  int judge;\n  double distance_x,distance_y;\n  double dis;\n  \n  //printf(\"please enter circle1's x,y,r\\n\");\n  scanf(\"%lf%lf%lf\",&c1x,&c1y,&c1r);\n  //printf(\"please enter circle2's x,y,r\\n\");\n  scanf(\"%lf%lf%lf\",&c2x,&c2y,&c2r);\n\n  if(c1x < Nm || c1x > Np ||\n     c1y < Nm || c1y > Np ||\n     c2x < Nm || c2x > Np ||\n     c2y < Nm || c2y > Np ||\n     c1r < 1 || c1r > Np ||\n     c2r < 1 || c2r > Np){\n    printf(\"restriction\\n\");\n    printf(\"-1000 <=c1x,c1y,c2x,c2y<= 1000\\n\");\n    return 0;\n  }\n  else if(c1x == c2x && c1y == c2y && c1r == c2r){\n    printf(\"restriction\\n\");\n    printf(\"c1 and c2 not same\\n\");\n    return 0;\n  }\n\n  //printf(\"c1y: %lf\\n\",c1y);\n  //printf(\"c2y: %lf\\n\",c2y);\n\n  distance_x = fabs(c1x-c2x);\n  distance_y = fabs(c1y-c2y);\n  \n  //distance_x = distance(c1x,c2x);\n  //distance_y = distance(c1y,c1y);\n  //printf(\"%lf\",distance_y);\n\n  dis = pythagorean(distance_x,distance_y);\n  judge = intersection(dis,c1r,c2r);\n  /*\n  if(judge == 4){printf(\"%d common tangent lines\\n\",judge);return 0;}\n  else if(judge == 3){printf(\"%d common tangent lines\\n\",judge);return 0;}\n  else if(judge == 2){printf(\"%d common tangent lines\\n\",judge);return 0;}\n  else if(judge == 1){printf(\"%d common tangent lines\\n\",judge);return 0;}\n  else if(judge == 0){printf(\"%d common tangent lines\\n\",judge);return 0;}\n  else printf(\"program error\\n\");\n  */\n  if(judge == 4){printf(\"%d\\n\",judge);return 0;}\n  else if(judge == 3){printf(\"%d\\n\",judge);return 0;}\n  else if(judge == 2){printf(\"%d\\n\",judge);return 0;}\n  else if(judge == 1){printf(\"%d\\n\",judge);return 0;}\n  else if(judge == 0){printf(\"%d\\n\",judge);return 0;}\n  else printf(\"program error\\n\");\n}\n\n\ndouble distance(double c1,double c2){\n  printf(\"c1: %lf\\n\",c1);\n  printf(\"c2: %lf\\n\",c2);\n  return fabs(c1-c2);\n}\n\ndouble pythagorean(double a,double b){\n  double sum;\n  a = pow(a,2.0);\n  b = pow(b,2.0);\n  sum = a + b;\n  //printf(\"%lf\\n\",a);\n  //printf(\"%lf\\n\",b);\n  //printf(\"%lf\\n\",sum);\n  return sqrt(sum);\n  \n}\n\nint intersection(double dis,double r1,double r2){\n  double sum_r;\n  double sub_r;\n  \n  sum_r = r1+r2;\n  sub_r = fabs(r1-r2);\n  //printf(\"%lf\\n\",sum_r);\n  //printf(\"%lf\\n\",dis);\n  if(dis > sum_r)return 4;\n  else if(dis == sum_r)return 3;\n  else if(sub_r < dis && dis < sum_r)return 2;\n  else if(sub_r == dis)return 1;\n  else if(dis < sub_r)return 0;\n  else {printf(\"program error\\n\");return 5;}\n}\n\n"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\nint main() {\n    int c1x, c1y, c1r, c2x, c2y, c2r;\n    scanf(\"%d %d %d\", &c1x, &c1y, &c1r);\n    scanf(\"%d %d %d\", &c2x, &c2y, &c2r);\n\n    if(c1r<c2r){\n        if(sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2)) > c1r + c2r) printf(\"4¥n\");\n        else if(sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2)) == c1r + c2r) printf(\"3\");\n        else if((c2r-c1r<sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2))) && (sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2)) < c1r + c2r)) printf(\"2\");\n        else if(sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2)) == c2r-c1r) printf(\"1\");\n        else if(sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2)) < c2r-c1r) printf(\"0\");\n\n\n    }\n\n    else{\n        if(sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2)) > c1r + c2r) printf(\"4\");\n        else if(sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2)) == c1r + c2r) printf(\"3\");\n        else if(((c1r-c2r<sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2))) && (sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2)) < c1r + c2r))) printf(\"2\");\n        else if(sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2)) == c1r-c2r) printf(\"1\");\n        else if(sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2)) < c1r-c2r) printf(\"0\");\n    }\n}\n"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<math.h>\n#include<stdlib.h>\nint main(){\n    int x1, y1, x2, y2, r1, r2, l, ans;\n    scanf(\"%d%d%d\", &x1, &y1, &r1);\n    scanf(\"%d%d%d\", &x2, &y2, &r2);\n    l=sqrt(pow(x2-x1,2)+pow(y2-y1,2));\n    if(l>r1+r2)ans=4;\n    else if(l==r1+r2)ans=3;\n    else if(l>abs(r1-r2))ans=2;\n    else if(l==abs(r1-r2))ans=1;\n    else ans=0;\n    printf(\"%d\\n\", ans);\n    return 0;\n}"
  },
  {
    "language": "C",
    "code": "\n#include <stdio.h>\n\nint main(){\n\n  int i=0, x[2], y[2], r[2], rplus, rminus,rdistance;\n\n  while(i<2){\n    scanf(\"%d%d%d\", &x[i],&y[i],&r[i]);\n    i++;\n  }\n\n  rdistance = (x[0]-x[1])*(x[0]-x[1]) +\t(y[0]-y[1])*(y[0]-y[1]); //２乗すればsqrtが不要               \n  rplus = (r[0]+r[1])*(r[0]+r[1]);\n  rminus = (r[0]-r[1])*(r[0]-r[1]); //２乗して、|r1-r2|の絶対値を必要なくしている.他も２乗する.       \n\n  if(rdistance > rplus)\tprintf(\"4\\n\");\n  else if(rdistance == rplus) printf(\"3\\n\");\n  else if(rminus < rdistance &&\trdistance < rplus) printf(\"2\\n\");\n  else if(rdistance == rminus) printf(\"1\\n\");\n  else if(rdistance < rminus) printf(\"0\\n\");\n\n\n\n  return 0;\n}\n\n\n"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\n\n\n\nstruct Circle{   // 円定義構造体\n\tfloat x,y;   // x,y:中心点座標\n\tfloat r;   // r:円の半径\n};\n\n\nint main(){\n\tstruct Circle C1;\n\tstruct Circle C2;\n\tint check;\n\tint x1,x2,x3,xr,y2,y1,yr,d;\n\t\n\tscanf(\"%d %d %d\", &x1,&x2,&xr);\n\tscanf(\"%d %d %d\", &y1,&y2,&yr);\n\t\n\tC1.x = x1;\n\tC1.y = x2;\n\tC1.r = xr;\t\n\tC2.x = y1;\n\tC2.y = y2;\n\tC2.r = yr;\t\n\n\n\t// 円同士の当たり判定\n\tfloat r = C1.r + C2.r;   // ２円の半径の合計\n\tfloat x = C1.x - C2.x;   // X座標の差\n\tfloat y = C1.y - C2.y;   // Y座標の差\n\n d = sqrt(x*x+y*y);\n\n\tif(d>r)check=4;\n\telse if (d==r)  check=3;\n\telse if(fabs(C1.r - C2.r)<d && d<r)check=2;\n\telse if(d==fabs(C1.r - C2.r)) check=1;\n\telse check=0;\n\n\t\tprintf(\"%d\\n\",check);\n\n\t\t\treturn 0;\n}\n\n\n"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\nint main(int argc, const char * argv[]) {\n    int c1x, c1y, c1r, c2x, c2y, c2r;\n    scanf(\"%d %d %d\", &c1x, &c1y, &c1r);\n    scanf(\"%d %d %d\", &c2x, &c2y, &c2r);\n\n    if(c1r<c2r){\n        if(sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2)) > c1r + c2r) printf(\"4\");\n        else if(sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2)) == c1r + c2r) printf(\"3\");\n        else if((c2r-c1r<sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2))) && (sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2)) < c1r + c2r)) printf(\"2\");\n        else if(sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2)) == c2r-c1r) printf(\"1\");\n        else if(sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2)) < c2r-c1r) printf(\"0\");\n\n\n    }\n\n    else{\n        if(sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2)) > c1r + c2r) printf(\"4\");\n        else if(sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2)) == c1r + c2r) printf(\"3\");\n        else if(((c1r-c2r<sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2))) && (sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2)) < c1r + c2r))) printf(\"2\");\n        else if(sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2)) == c1r-c2r) printf(\"1\");\n        else if(sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2)) < c1r-c2r) printf(\"0\");\n    }\n}\n\n\n"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\nint math_minus(int,int);\nint math_plus(int,int);\nvoid result(int,int,int);\nint main(void){\n  int i,c1[3],c2[3],x,y,z,t;\n  for(i = 0; i < 3; i++){\n    scanf(\"%d\",&c1[i]);\n  }\n  for(i = 0; i < 3; i++){\n    scanf(\"%d\",&c2[i]);\n  }\n  x = math_minus(c1[0],c2[0]);\n  y = math_minus(c1[1],c2[1]);\n  z = math_plus(c1[2],c2[2]);\n  t = math_minus(c1[2],c2[2]);\n\n  if((x + y) > z )printf(\"4\\n\");\n  if((x + y) == z)printf(\"3\\n\");\n  if((x + y) < z){\n    if((x + y) > t)printf(\"2\\n\");\n    if((x + y) == t)printf(\"1\\n\");\n    if((x + y) < t)printf(\"0\\n\");\n  }\n\n  return 0;\n}\nint math_minus(int x,int y){\n  return (x - y) * (x - y);\n}\n\nint math_plus(int x,int y){\n  return (x + y) * (x + y);\n}\n\n"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<math.h>\n#define distance(x, y) sqrt(pow(x, 2) + pow(y, 2))\nmain()\n{\n        int cx1, cx2, cy1, cy2, cr1, cr2;\n        double len, rp, rm;\n        scanf(\"%d %d %d\", &cx1, &cy1, &cr1);\n        scanf(\"%d %d %d\", &cx2, &cy2, &cr2);\n        len = distance(cx1 - cx2, cy1 - cy2);\n        rp = abs(cr1 + cr2);\n        rm = abs(cr1 - cr2);\n        if(len > rp){\n                printf(\"4\\n\");\n        }else if(len == rp){\n                printf(\"3\\n\");\n        }else if(len > rm){\n                printf(\"2\\n\");\n        }else if(len == rm){\n                printf(\"1\\n\");\n        }else{\n                printf(\"0\\n\");\n        }\n}"
  },
  {
    "language": "C",
    "code": "// AOJ CGL_7_A Intersection\n// 2018.5.3 bal4u\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\ntypedef struct { double x, y; } PP;\ntypedef struct { double x, y, r; } C;\n\n#if 1\n#define gc() getchar_unlocked()\n#else\n#define gc() getchar()\n#endif\nint in()\n{\n\tint n = 0, c = gc();\n\tif (c == '-') {\tc = gc();\n\t\tdo n = 10*n + (c & 0xf), c = gc(); while (c >= '0');\n\t\treturn -n;\n\t}\n\tdo n = 10*n + (c & 0xf), c = gc(); while (c >= '0');\n\treturn n;\n}\n\n#define INF 1e8\n#define EPS 1e-8\n#define EQ(a,b)\t\t(fabs((a)-(b))<EPS)\n\nPP vset(double x, double y) { PP r; r.x = x, r.y = y; return r; }\nPP vsub(PP p1, PP p2) { PP r; r.x = p1.x - p2.x, r.y = p1.y - p2.y; return r; }\ndouble vabs(PP a) { return hypot(a.x, a.y); }\ndouble dist(PP p1, PP p2) {\treturn vabs(vsub(p1, p2)); }\n\n/* return\n   4: if they do not cross (there are 4 common tangent lines), \n   3: if they are circumscribed (there are 3 common tangent lines), \n   2: if they intersect (there are 2 common tangent lines), \n   1: if a circle is inscribed in another (there are 1 common tangent line), \n   0: if a circle includes another (there is no common tangent line). \n*/\nint intersectCC(C c1, C c2, PP *p1, PP *p2)\n{\n\tdouble x1 = c1.x, y1 = c1.y, r1 = c1.r;\n\tdouble x2 = c2.x, y2 = c2.y, r2 = c2.r;\n\tdouble d = hypot(x1-x2, y1-y2);\n\tdouble w, n, x, y, p, q;\n\tdouble u, v;\n\n\tu = r1+r2, v = fabs(r1-r2);\n\n\tif (EQ(d, u)) return 3;\n\tif (d >= u)   return 4;\n\tif (EQ(d, v)) return 1;\n\tif (d <= v)   return 0;\n\n\tw = ((r1*r1 - r2*r2)/d + d) / 2;\n\tn = sqrt(r1*r1 - w*w);\n\tx = x1 + (x2-x1)*w / d;\n\ty = y1 + (y2-y1)*w / d;\n\tp = (y2-y1)*n / d;\n\tq = (x2-x1)*n / d;\n\n\tp1->x = x+p, p2->x = x-p;\n\tp1->y = y-q; p2->y = y+q;\n\n\treturn 2;\n}\n\nint main()\n{\n\tC c1, c2;\n\tPP p1, p2;\n\n\tc1.x = in(), c1.y = in(), c1.r = in();\n\tc2.x = in(), c2.y = in(), c2.r = in();\n\tprintf(\"%d\\n\", intersectCC(c1, c2, &p1, &p2));\n\treturn 0;\n}\n"
  },
  {
    "language": "C",
    "code": "//\n//  problemA.c\n//  ADSWeek01\n//\n//  Created by Yuta Nemoto on 2019/04/08.\n//  Copyright © 2019 Yuta Nemoto. All rights reserved.\n//\n\n#include <stdio.h>\n\nvoid initialize(int[]);\ndouble length(int, int, int, int);\ndouble sqrt(double);\ndouble absolute(double);\n\nint main(int argc, const char * argv[]) {\n    \n    // Counter Variable\n    int i, j;\n    // Array for input\n    int input[6];\n    // Variable to store the distance between 2 centers\n    double distance = 0.0;\n    \n    // Get the input first\n    initialize(input);\n    \n    // Get the distance between 2 input points\n    distance = length(input[0], input[1], input[3], input[4]);\n    \n    // Judge if a part of one circle is included in another circle\n    if(distance == input[2] + input[5]) printf(\"%d\\n\", 3);\n    else if(distance > input[2] + input[5]) printf(\"%d\\n\", 4);\n    else{\n        if(distance + input[2] == input[5] || distance + input[5] == input[2]) printf(\"%d\\n\", 1);\n        else if(absolute(input[2] - input[5]) > distance || absolute((input[5] - input[2]) > distance)) printf(\"%d\\n\", 0);\n        else printf(\"%d\\n\", 2);\n    }\n    \n    return 0;\n}\n\n/* Initialization processes (Get the input) */\nvoid initialize(int input[6]){\n    int i = 0;\n    for(i = 0; i < 6; i++){\n        scanf(\"%d\", &input[i]);\n    }\n}\n\n/* Return the length between point x and y (Arguments: x1, x2, y1, y2) */\ndouble length(int x1, int y1, int x2, int y2){\n    int distance_x, distance_y;\n    if(x1 >= x2) distance_x = x1 - x2;\n    else distance_x = x2 - x1;\n    if(y1 >= y2) distance_y = y1 - y2;\n    else distance_y = y2 - y1;\n    return sqrt(distance_x * distance_x + distance_y * distance_y);\n}\n\n/* Return the square root of the given argument */\ndouble sqrt(double s){\n    // Initial value to get the sqrt result\n    double comp = s / 2.0 ;\n    // Initial value of the last step\n    double last_comp = 0.0 ;\n    \n    // Continue until the smaller difference\n    while ( comp != last_comp ){\n        // Adopt Babylonian method step\n        last_comp = comp ;\n        comp = (comp + s / comp) / 2.0 ;\n    }\n    return comp ;\n}\n\n/* Return the absolute value of the given argument */\ndouble absolute(double x){\n    if(x < 0) return -x;\n    else return x;\n}\n\n"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\nint main(){\n  int c1x,c1y,c1r;\n  int c2x,c2y,c2r;\n  int lr,sr;\n\n  double dis;\n\n  scanf(\"%d %d %d\",&c1x,&c1y,&c1r);\n  scanf(\"%d %d %d\",&c2x,&c2y,&c2r);\n\n\n  if(c1x>=c2x && c1y>=c2y){\n    dis = sqrt((c1x-c2x)*(c1x-c2x)+(c1y-c2y)*(c1y-c2y));\n  }\n  else if(c1x>=c2x && c2y>=c1y){\n    dis = sqrt((c1x-c2x)*(c1x-c2x)+(c2y-c1y)*(c2y-c1y));\n  }\n  else if(c2x>=c1x && c1y>=c2y){\n    dis = sqrt((c2x-c1x)*(c2x-c1x)+(c1y-c2y)*(c1y-c2y));\n  }else{\n    dis = sqrt((c2x-c1x)*(c2x-c1x)+(c2y-c1y)*(c2y-c1y));\n  }\n\n  if(c1r>=c2r){\n    lr = c1r;\n    sr = c2r;\n  }else{\n  lr = c2r;\n  sr = c1r;\n}\n\n\n  if(lr+sr < dis){\n    printf(\"%d\\n\",4);\n  }\n  else if(lr+sr == dis){\n    printf(\"%d\\n\",3);\n  }\n  else if(lr+sr > dis && lr-sr < dis){\n    printf(\"%d\\n\",2);\n  }\n  else if(lr-sr == dis){\n    printf(\"%d\\n\",1);\n  }\n  else if(lr-sr > dis)\n    printf(\"%d\\n\",0);\n  }\n\n"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<math.h>\n#include<stdlib.h>\n#define max(a,b) a<b?b:a\n#define min(a,b) a<b?a:b\n#define POW2(a)  a*a\n#define ROOP(i,n) for(i = 0;i < n;i++)\n#define _USE_MATH_DEFINES\n\ntypedef struct POINT{\n\tdouble x;\n\tdouble y;\n}POINT;\ntypedef struct LINE{\n\tPOINT s;//start point\n\tPOINT e;//end point\n}LINE;\ntypedef struct COMPLEX{\n\tdouble r;//?????¢\n\tdouble q;//????§???????theta\n}COMPLEX;\ntypedef struct CIRCLE{\n\tdouble r;//??????\n\tPOINT p;//??????\n}CIRCLE;\n\n//POINT????????????\nvoid print_p(POINT a){\n\tprintf(\"(%lf,%lf)\\n\",a.x,a.y);\n}\n\n//LINE????????????\nvoid print_l(LINE a){\n\tprintf(\"(%lf,%lf) -> (%lf,%lf)\\n\",(a.s).x,(a.s).y,(a.e).x,(a.e).y);\n}\n\n//COMPLEX????????????\nvoid print_c(COMPLEX a){\n\tprintf(\"(%lf,%lf)\\n\",a.r,a.q);\n}\n\n//????????????????????¢?????????\ndouble norm2(POINT a){\n\treturn POW2(a.x)+POW2(a.y);\n}\n\n//????????????????????¢\ndouble norm(POINT a){\n\treturn sqrt(norm2(a));\n}\n\n//a->b?????´??§???????????????\nPOINT make_vec(POINT a,POINT b){\n\tb.x -= a.x;\n\tb.y -= a.y;\n\treturn b;\n}\n\n//2???a,b???????????¢\ndouble distance(POINT a,POINT b){\n\treturn norm(make_vec(a,b));\n}\n\n//??´??§????????????\nPOINT sum_vec(POINT a,POINT b){\n\ta.x += b.x;\n\ta.y += b.y;\n\treturn a;\n}\n\n//??´??§????????????\n//mkae_vec??¨?????£??????????????¨???????????????\n//??????????????????\nPOINT dif_vec(POINT a,POINT b){\n\ta.x -= b.x;\n\ta.y -= b.y;\n\treturn a;\n}\n\n//??´??§????????????????????????\nPOINT scalar_vec(POINT a,double k){\n\ta.x *= k;\n\ta.y *= k;\n\treturn a;\n}\n\n//???????????????\nPOINT minus_vec(POINT a){\n\treturn scalar_vec(a,-1.0);\n}\n\n//??????\ndouble dot(POINT a,POINT b){\n\treturn a.x*b.x + a.y*b.y;\n}\n\n//??????\ndouble cross(POINT a,POINT b){\n\treturn a.x*b.y - a.y*b.x;\n}\n\n//AP:PB=t:s??¨?????????????±???????\n//k, 0:??????, 1:??????\n//* t:(1-t)??§???????????£??????????????£????????????????????????????????????????????????????????¨?????£???\nPOINT division(POINT a,POINT b,double t,double s,int k){\n\tdouble tmp = t + s * (1 - k*2);\n\ta.x += (make_vec(a,b)).x / tmp * t;\n\ta.y += (make_vec(a,b)).y / tmp * t;\n\treturn a;\n}\n\n//???p????????´???a?????????????????????????¶??????????\nPOINT perpendicular(LINE a,POINT p){\n\tPOINT ps = make_vec(p,a.s);\n\tPOINT pe = make_vec(p,a.e);\n\tdouble t = norm2(ps) - dot(ps,pe);\n\tdouble s = norm2(pe) - dot(ps,pe);\n\treturn division(a.s,a.e,t,s,0);\n}\n\n//??´???a???????????????p??¨????§°???????????????\nPOINT reflection(LINE a,POINT p){\n\tPOINT h = perpendicular(a,p);\n\treturn sum_vec(h,make_vec(p,h));\n}\n\n//* ????§???¢?????????\nint inclusion(POINT a[],int n,POINT p){\n\tint ans = 0;\n\tint i;\n\tPOINT g[n+1];\n\tdouble w,rad = 0.0;\n\n\tfor(i = 0;i < n;i++){\n\t\tg[i] = a[i];\n\t}\n\tg[n] = g[0];\n\n\tfor(i = 0;i < n;i++){\n\t\tif(g[i].x == p.x && g[i].y == p.y){\n\t\t\treturn ans = 1;\n\t\t}\n\t}\n\tfor(i = 0;i < n;i++){\n\t\tw = atan2(cross(make_vec(p,g[i]),make_vec(p,g[i+1])),\n\t\t\t\tdot(make_vec(p,g[i]),make_vec(p,g[i+1])));\n\t\trad += w;\n\t\tif(fabs(w - M_PI) <= 0.000001 ||\n\t\t\t fabs(w + M_PI) <= 0.000001)\n\t\t\treturn ans = 1;\n\t}\n\tif(fabs(rad - M_PI*2)<=0.000001){//2??\n\t\treturn ans = 2;//in!\n\t}\n\treturn ans;\n}\n\n// a.s, a.e, p?????????????????????\n// ???????¨???????????????????????????????  1\n// ????¨?????????????????????????????????? -1\n// p, a.s, a.e????????????????????? 2\n// a.s, a.e, p?????????????????????-2\n// ???p?????´???a???????????????????????? 0\nint ccw(LINE a,POINT p){\n\tint cls = cross(make_vec(a.s,a.e),make_vec(a.s,p));\n\tif(cls > 0){\n\t\treturn  1;\n\t}else if(cls < 0){\n\t\treturn -1;\n\t}else if(dot(make_vec(a.s,a.e),make_vec(a.s,p)) < 0.0){\n\t\treturn  2;\n\t}else if(dot(make_vec(a.e,a.s),make_vec(a.e,p)) < 0.0){\n\t\treturn -2;\n\t}else{\n\t\treturn  0;\n\t}\n}\n\n// ??????????????????\nint parallel(LINE a,LINE b){\n\tif(!cross(make_vec(a.s,a.e),make_vec(b.s,b.e)))\n\t\treturn 1;\n\telse\n\t\treturn 0;\n}\n\n// ?????´????????????\nint orthogonal(LINE a,LINE b){\n\tif(!dot(make_vec(a.s,a.e),make_vec(b.s,b.e)))\n\t\treturn 1;\n\telse\n\t\treturn 0;\n}\n\n// ??????a,b???????????????????????????\nint intersection(LINE a,LINE b){\n\tif(ccw(a,b.s)*ccw(a,b.e) <= 0 &&\n\t   ccw(b,a.s)*ccw(b,a.e) <= 0)\n\t\treturn 1;\n\treturn 0;\n}\n\n//??????a,b?????????\nPOINT cross_point(LINE a,LINE b){\n\tdouble c1 = cross(make_vec(a.s,b.s),make_vec(a.s,b.e));\n\tdouble c2 = cross(make_vec(a.e,b.s),make_vec(a.e,b.e));\n\treturn division(a.s,a.e,fabs(c1),fabs(c2),0);\n}\n\n//??´???a??¨???p????????¢\ndouble distanceLP(LINE a,POINT p){\n\tif(dot(make_vec(a.s,a.e),make_vec(a.s,p)) < 0.0)\n\t\treturn norm(make_vec(a.s,p));\n\tif(dot(make_vec(a.e,a.s),make_vec(a.e,p)) < 0.0)\n\t\treturn norm(make_vec(a.e,p));\n\treturn norm(make_vec(p,perpendicular(a,p)));\n}\n\n//??´???a??¨??´???b????????¢\ndouble distanceLL(LINE a,LINE b){\n\tdouble a1,a2,a3,a4;\n\tif(intersection(a,b) == 1)\n\t\treturn 0.0000000000;\n\ta1 = distanceLP(a,b.s);\n\ta2 = distanceLP(a,b.e);\n\ta3 = distanceLP(b,a.s);\n\ta4 = distanceLP(b,a.e);\n\t//a1 = min(a1,min(a2,min(a3,a4)));\n\ta1 = min(a1,a2);\n\ta3 = min(a3,a4);\n\ta1 = min(a1,a3);\n\treturn a1;\n}\n\n//????§???¢?????¢???\ndouble area(POINT a[],int n){\n\tdouble ans = 0.0;\n\tint i;\n\tPOINT g[n+1];\n\tdouble w,rad = 0.0;\n\n\tfor(i = 0;i < n;i++){\n\t\tg[i] = a[i];\n\t}\n\tg[n] = g[0];\n\n\tfor(i = 1;i < n-1;i ++){\n\t\tans += cross(make_vec(g[0],g[i]),make_vec(g[0],g[i+1]));\n\t}\n\treturn fabs(ans);\n}\n\n\n//* ?????§??????\nint is_convex(POINT a[],int n){\n\tint ans = 0;\n\tint i,j;\n\tPOINT g[n+1];\n\tdouble w,rad = 0.0;\n\n\tfor(i = 0;i < n;i++){\n\t\tg[i] = a[i];\n\t}\n\tg[n] = g[0];\n\n\tfor(i = 1;i < n;i++){\n\t\tw = cross(make_vec(g[i],g[i-1]),make_vec(g[i],g[i+1]))/norm(make_vec(g[i],g[i-1]))/norm(make_vec(g[i],g[i+1]));\n\t\tif(w > 0.00000000){\n\t\t\treturn 0;\n\t\t}\t\t\t\n\t}\n\treturn 1;\n}\n\n//* ??????????????????\n//4\n//3\n//2\n//1\n//0\n//??\\?????°?????????\nint inter_c(CIRCLE a,CIRCLE b){\n\tdouble tmp = distance(a.p,b.p);\n\tif(tmp > a.r+b.r)\n\t\treturn 4;\n\telse if(fabs(tmp-a.r+b.r) <= 0.00000001)\n\t\treturn 3;\n\telse if(fabs(tmp-fabs(a.r-b.r)) <= 0.00000001)\n\t\treturn 1;\n\telse if(tmp < a.r-b.r)\n\t\treturn 0;\n\telse return 2;\n}\n\n\nint main(){\n\tCIRCLE a,b;\n\tPOINT p[101];\n\t\tscanf(\"%lf%lf%lf\",&a.p.x,&a.p.y,&a.r);\n\t\tscanf(\"%lf%lf%lf\",&b.p.x,&b.p.y,&b.r);\n\t\n\tprintf(\"%d\\n\",inter_c(a,b));\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n\nint main(){\n\tint a,b,r,c,d,s;\n\tscanf(\"%d%d%d%d%d%d\",&a,&b,&r,&c,&d,&s);\n\tint dist=(a-c)*(a-c)+(b-d)*(b-d);\n\tint ans;\n\tif(dist>(r+s)*(r+s))ans=4;\n\telse if(dist==(r+s)*(r+s))ans=3;\n\telse if(dist>(r-s)*(r-s))ans=2;\n\telse if(dist==(r-s)*(r-s))ans=1;\n\telse ans=0;\n\tprintf(\"%d\\n\",ans);\n}\n"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\n\n\n\nstruct Circle{   // 円定義構造体\n\tfloat x,y;   // x,y:中心点座標\n\tfloat r;   // r:円の半径\n};\n\n\nint main(){\n\tstruct Circle C1;\n\tstruct Circle C2;\n\tint check;\n\tint d;\n\t\n\tscanf(\"%f %f %f\", &C1.x, &C1.y, &C1.r);\n\tscanf(\"%f %f %f\", &C2.x, &C2.y, &C2.r);\n\t\n\n\n\n\t// 円同士の当たり判定\n\tint r = C1.r + C2.r;   // ２円の半径の合計\n\tfloat r2 = C1.r - C2.r;\n\tint x = C1.x - C2.x;   // X座標の差\n\tint y = C1.y - C2.y;   // Y座標の差\n\n d = sqrt(x*x+y*y);\n\n\tif(d>r)check=4;\n\telse if (d==r)  check=3;\n\telse if(fabs(r2)<d && d<r)check=2;\n\telse if(d==fabs(r2)) check=1;\n\telse check=0;\n\n\t\tprintf(\"%d\\n\",check);\n\n\t\t\treturn 0;\n}\n\n\n"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<math.h>\n#include<stdlib.h>\n#define max(a,b) a<b?b:a\n#define min(a,b) a<b?a:b\n#define POW2(a)  a*a\n#define ROOP(i,n) for(i = 0;i < n;i++)\n#define _USE_MATH_DEFINES\n\ntypedef struct POINT{\n\tdouble x;\n\tdouble y;\n}POINT;\ntypedef struct LINE{\n\tPOINT s;//start point\n\tPOINT e;//end point\n}LINE;\ntypedef struct COMPLEX{\n\tdouble r;//?????¢\n\tdouble q;//????§???????theta\n}COMPLEX;\ntypedef struct CIRCLE{\n\tdouble r;//??????\n\tPOINT p;//??????\n}CIRCLE;\n\n//POINT????????????\nvoid print_p(POINT a){\n\tprintf(\"(%lf,%lf)\\n\",a.x,a.y);\n}\n\n//LINE????????????\nvoid print_l(LINE a){\n\tprintf(\"(%lf,%lf) -> (%lf,%lf)\\n\",(a.s).x,(a.s).y,(a.e).x,(a.e).y);\n}\n\n//COMPLEX????????????\nvoid print_c(COMPLEX a){\n\tprintf(\"(%lf,%lf)\\n\",a.r,a.q);\n}\n\n//????????????????????¢?????????\ndouble norm2(POINT a){\n\treturn POW2(a.x)+POW2(a.y);\n}\n\n//????????????????????¢\ndouble norm(POINT a){\n\treturn sqrt(norm2(a));\n}\n\n//a->b?????´??§???????????????\nPOINT make_vec(POINT a,POINT b){\n\tb.x -= a.x;\n\tb.y -= a.y;\n\treturn b;\n}\n\n//2???a,b???????????¢\ndouble distance(POINT a,POINT b){\n\treturn norm(make_vec(a,b));\n}\n\n//??´??§????????????\nPOINT sum_vec(POINT a,POINT b){\n\ta.x += b.x;\n\ta.y += b.y;\n\treturn a;\n}\n\n//??´??§????????????\n//mkae_vec??¨?????£??????????????¨???????????????\n//??????????????????\nPOINT dif_vec(POINT a,POINT b){\n\ta.x -= b.x;\n\ta.y -= b.y;\n\treturn a;\n}\n\n//??´??§????????????????????????\nPOINT scalar_vec(POINT a,double k){\n\ta.x *= k;\n\ta.y *= k;\n\treturn a;\n}\n\n//???????????????\nPOINT minus_vec(POINT a){\n\treturn scalar_vec(a,-1.0);\n}\n\n//??????\ndouble dot(POINT a,POINT b){\n\treturn a.x*b.x + a.y*b.y;\n}\n\n//??????\ndouble cross(POINT a,POINT b){\n\treturn a.x*b.y - a.y*b.x;\n}\n\n//AP:PB=t:s??¨?????????????±???????\n//k, 0:??????, 1:??????\n//* t:(1-t)??§???????????£??????????????£????????????????????????????????????????????????????????¨?????£???\nPOINT division(POINT a,POINT b,double t,double s,int k){\n\tdouble tmp = t + s * (1 - k*2);\n\ta.x += (make_vec(a,b)).x / tmp * t;\n\ta.y += (make_vec(a,b)).y / tmp * t;\n\treturn a;\n}\n\n//???p????????´???a?????????????????????????¶??????????\nPOINT perpendicular(LINE a,POINT p){\n\tPOINT ps = make_vec(p,a.s);\n\tPOINT pe = make_vec(p,a.e);\n\tdouble t = norm2(ps) - dot(ps,pe);\n\tdouble s = norm2(pe) - dot(ps,pe);\n\treturn division(a.s,a.e,t,s,0);\n}\n\n//??´???a???????????????p??¨????§°???????????????\nPOINT reflection(LINE a,POINT p){\n\tPOINT h = perpendicular(a,p);\n\treturn sum_vec(h,make_vec(p,h));\n}\n\n//* ????§???¢?????????\nint inclusion(POINT a[],int n,POINT p){\n\tint ans = 0;\n\tint i;\n\tPOINT g[n+1];\n\tdouble w,rad = 0.0;\n\n\tfor(i = 0;i < n;i++){\n\t\tg[i] = a[i];\n\t}\n\tg[n] = g[0];\n\n\tfor(i = 0;i < n;i++){\n\t\tif(g[i].x == p.x && g[i].y == p.y){\n\t\t\treturn ans = 1;\n\t\t}\n\t}\n\tfor(i = 0;i < n;i++){\n\t\tw = atan2(cross(make_vec(p,g[i]),make_vec(p,g[i+1])),\n\t\t\t\tdot(make_vec(p,g[i]),make_vec(p,g[i+1])));\n\t\trad += w;\n\t\tif(fabs(w - M_PI) <= 0.000001 ||\n\t\t\t fabs(w + M_PI) <= 0.000001)\n\t\t\treturn ans = 1;\n\t}\n\tif(fabs(rad - M_PI*2)<=0.000001){//2??\n\t\treturn ans = 2;//in!\n\t}\n\treturn ans;\n}\n\n// a.s, a.e, p?????????????????????\n// ???????¨???????????????????????????????  1\n// ????¨?????????????????????????????????? -1\n// p, a.s, a.e????????????????????? 2\n// a.s, a.e, p?????????????????????-2\n// ???p?????´???a???????????????????????? 0\nint ccw(LINE a,POINT p){\n\tint cls = cross(make_vec(a.s,a.e),make_vec(a.s,p));\n\tif(cls > 0){\n\t\treturn  1;\n\t}else if(cls < 0){\n\t\treturn -1;\n\t}else if(dot(make_vec(a.s,a.e),make_vec(a.s,p)) < 0.0){\n\t\treturn  2;\n\t}else if(dot(make_vec(a.e,a.s),make_vec(a.e,p)) < 0.0){\n\t\treturn -2;\n\t}else{\n\t\treturn  0;\n\t}\n}\n\n// ??????????????????\nint parallel(LINE a,LINE b){\n\tif(!cross(make_vec(a.s,a.e),make_vec(b.s,b.e)))\n\t\treturn 1;\n\telse\n\t\treturn 0;\n}\n\n// ?????´????????????\nint orthogonal(LINE a,LINE b){\n\tif(!dot(make_vec(a.s,a.e),make_vec(b.s,b.e)))\n\t\treturn 1;\n\telse\n\t\treturn 0;\n}\n\n// ??????a,b???????????????????????????\nint intersection(LINE a,LINE b){\n\tif(ccw(a,b.s)*ccw(a,b.e) <= 0 &&\n\t   ccw(b,a.s)*ccw(b,a.e) <= 0)\n\t\treturn 1;\n\treturn 0;\n}\n\n//??????a,b?????????\nPOINT cross_point(LINE a,LINE b){\n\tdouble c1 = cross(make_vec(a.s,b.s),make_vec(a.s,b.e));\n\tdouble c2 = cross(make_vec(a.e,b.s),make_vec(a.e,b.e));\n\treturn division(a.s,a.e,fabs(c1),fabs(c2),0);\n}\n\n//??´???a??¨???p????????¢\ndouble distanceLP(LINE a,POINT p){\n\tif(dot(make_vec(a.s,a.e),make_vec(a.s,p)) < 0.0)\n\t\treturn norm(make_vec(a.s,p));\n\tif(dot(make_vec(a.e,a.s),make_vec(a.e,p)) < 0.0)\n\t\treturn norm(make_vec(a.e,p));\n\treturn norm(make_vec(p,perpendicular(a,p)));\n}\n\n//??´???a??¨??´???b????????¢\ndouble distanceLL(LINE a,LINE b){\n\tdouble a1,a2,a3,a4;\n\tif(intersection(a,b) == 1)\n\t\treturn 0.0000000000;\n\ta1 = distanceLP(a,b.s);\n\ta2 = distanceLP(a,b.e);\n\ta3 = distanceLP(b,a.s);\n\ta4 = distanceLP(b,a.e);\n\t//a1 = min(a1,min(a2,min(a3,a4)));\n\ta1 = min(a1,a2);\n\ta3 = min(a3,a4);\n\ta1 = min(a1,a3);\n\treturn a1;\n}\n\n//????§???¢?????¢???\ndouble area(POINT a[],int n){\n\tdouble ans = 0.0;\n\tint i;\n\tPOINT g[n+1];\n\tdouble w,rad = 0.0;\n\n\tfor(i = 0;i < n;i++){\n\t\tg[i] = a[i];\n\t}\n\tg[n] = g[0];\n\n\tfor(i = 1;i < n-1;i ++){\n\t\tans += cross(make_vec(g[0],g[i]),make_vec(g[0],g[i+1]));\n\t}\n\treturn fabs(ans);\n}\n\n\n//* ?????§??????\nint is_convex(POINT a[],int n){\n\tint ans = 0;\n\tint i,j;\n\tPOINT g[n+1];\n\tdouble w,rad = 0.0;\n\n\tfor(i = 0;i < n;i++){\n\t\tg[i] = a[i];\n\t}\n\tg[n] = g[0];\n\n\tfor(i = 1;i < n;i++){\n\t\tw = cross(make_vec(g[i],g[i-1]),make_vec(g[i],g[i+1]))/norm(make_vec(g[i],g[i-1]))/norm(make_vec(g[i],g[i+1]));\n\t\tif(w > 0.00000000){\n\t\t\treturn 0;\n\t\t}\t\t\t\n\t}\n\treturn 1;\n}\n\n//* ??????????????????\n//4\n//3\n//2\n//1\n//0\n//??\\?????°?????????\nint inter_c(CIRCLE a,CIRCLE b){\n\tdouble tmp = distance(a.p,b.p);\n\tif(tmp > a.r+b.r)\n\t\treturn 4;\n\telse if(fabs(tmp-(a.r+b.r)) <= 0.00000001)\n\t\treturn 3;\n\telse if(fabs(tmp-fabs(a.r-b.r)) <= 0.00000001)\n\t\treturn 1;\n\telse if(tmp < fabs(a.r-b.r))\n\t\treturn 0;\n\telse return 2;\n}\n\n\nint main(){\n\tCIRCLE a,b;\n\tPOINT p[101];\n\t\tscanf(\"%lf%lf%lf\",&a.p.x,&a.p.y,&a.r);\n\t\tscanf(\"%lf%lf%lf\",&b.p.x,&b.p.y,&b.r);\n\t\n\tprintf(\"%d\\n\",inter_c(a,b));\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<math.h>\n#include<stdlib.h>\n#define max(a,b) a<b?b:a\n#define min(a,b) a<b?a:b\n#define POW2(a)  a*a\n#define ROOP(i,n) for(i = 0;i < n;i++)\n#define _USE_MATH_DEFINES\n\ntypedef struct POINT{\n\tdouble x;\n\tdouble y;\n}POINT;\ntypedef struct LINE{\n\tPOINT s;//start point\n\tPOINT e;//end point\n}LINE;\ntypedef struct COMPLEX{\n\tdouble r;//?????¢\n\tdouble q;//????§???????theta\n}COMPLEX;\ntypedef struct CIRCLE{\n\tdouble r;//??????\n\tPOINT p;//??????\n}CIRCLE;\n\n//POINT????????????\nvoid print_p(POINT a){\n\tprintf(\"(%lf,%lf)\\n\",a.x,a.y);\n}\n\n//LINE????????????\nvoid print_l(LINE a){\n\tprintf(\"(%lf,%lf) -> (%lf,%lf)\\n\",(a.s).x,(a.s).y,(a.e).x,(a.e).y);\n}\n\n//COMPLEX????????????\nvoid print_c(COMPLEX a){\n\tprintf(\"(%lf,%lf)\\n\",a.r,a.q);\n}\n\n//????????????????????¢?????????\ndouble norm2(POINT a){\n\treturn POW2(a.x)+POW2(a.y);\n}\n\n//????????????????????¢\ndouble norm(POINT a){\n\treturn sqrt(norm2(a));\n}\n\n//a->b?????´??§???????????????\nPOINT make_vec(POINT a,POINT b){\n\tb.x -= a.x;\n\tb.y -= a.y;\n\treturn b;\n}\n\n//2???a,b???????????¢\ndouble distance(POINT a,POINT b){\n\treturn norm(make_vec(a,b));\n}\n\n//??´??§????????????\nPOINT sum_vec(POINT a,POINT b){\n\ta.x += b.x;\n\ta.y += b.y;\n\treturn a;\n}\n\n//??´??§????????????\n//mkae_vec??¨?????£??????????????¨???????????????\n//??????????????????\nPOINT dif_vec(POINT a,POINT b){\n\ta.x -= b.x;\n\ta.y -= b.y;\n\treturn a;\n}\n\n//??´??§????????????????????????\nPOINT scalar_vec(POINT a,double k){\n\ta.x *= k;\n\ta.y *= k;\n\treturn a;\n}\n\n//???????????????\nPOINT minus_vec(POINT a){\n\treturn scalar_vec(a,-1.0);\n}\n\n//??????\ndouble dot(POINT a,POINT b){\n\treturn a.x*b.x + a.y*b.y;\n}\n\n//??????\ndouble cross(POINT a,POINT b){\n\treturn a.x*b.y - a.y*b.x;\n}\n\n//AP:PB=t:s??¨?????????????±???????\n//k, 0:??????, 1:??????\n//* t:(1-t)??§???????????£??????????????£????????????????????????????????????????????????????????¨?????£???\nPOINT division(POINT a,POINT b,double t,double s,int k){\n\tdouble tmp = t + s * (1 - k*2);\n\ta.x += (make_vec(a,b)).x / tmp * t;\n\ta.y += (make_vec(a,b)).y / tmp * t;\n\treturn a;\n}\n\n//???p????????´???a?????????????????????????¶??????????\nPOINT perpendicular(LINE a,POINT p){\n\tPOINT ps = make_vec(p,a.s);\n\tPOINT pe = make_vec(p,a.e);\n\tdouble t = norm2(ps) - dot(ps,pe);\n\tdouble s = norm2(pe) - dot(ps,pe);\n\treturn division(a.s,a.e,t,s,0);\n}\n\n//??´???a???????????????p??¨????§°???????????????\nPOINT reflection(LINE a,POINT p){\n\tPOINT h = perpendicular(a,p);\n\treturn sum_vec(h,make_vec(p,h));\n}\n\n//* ????§???¢?????????\nint inclusion(POINT a[],int n,POINT p){\n\tint ans = 0;\n\tint i;\n\tPOINT g[n+1];\n\tdouble w,rad = 0.0;\n\n\tfor(i = 0;i < n;i++){\n\t\tg[i] = a[i];\n\t}\n\tg[n] = g[0];\n\n\tfor(i = 0;i < n;i++){\n\t\tif(g[i].x == p.x && g[i].y == p.y){\n\t\t\treturn ans = 1;\n\t\t}\n\t}\n\tfor(i = 0;i < n;i++){\n\t\tw = atan2(cross(make_vec(p,g[i]),make_vec(p,g[i+1])),\n\t\t\t\tdot(make_vec(p,g[i]),make_vec(p,g[i+1])));\n\t\trad += w;\n\t\tif(fabs(w - M_PI) <= 0.000001 ||\n\t\t\t fabs(w + M_PI) <= 0.000001)\n\t\t\treturn ans = 1;\n\t}\n\tif(fabs(rad - M_PI*2)<=0.000001){//2??\n\t\treturn ans = 2;//in!\n\t}\n\treturn ans;\n}\n\n// a.s, a.e, p?????????????????????\n// ???????¨???????????????????????????????  1\n// ????¨?????????????????????????????????? -1\n// p, a.s, a.e????????????????????? 2\n// a.s, a.e, p?????????????????????-2\n// ???p?????´???a???????????????????????? 0\nint ccw(LINE a,POINT p){\n\tint cls = cross(make_vec(a.s,a.e),make_vec(a.s,p));\n\tif(cls > 0){\n\t\treturn  1;\n\t}else if(cls < 0){\n\t\treturn -1;\n\t}else if(dot(make_vec(a.s,a.e),make_vec(a.s,p)) < 0.0){\n\t\treturn  2;\n\t}else if(dot(make_vec(a.e,a.s),make_vec(a.e,p)) < 0.0){\n\t\treturn -2;\n\t}else{\n\t\treturn  0;\n\t}\n}\n\n// ??????????????????\nint parallel(LINE a,LINE b){\n\tif(!cross(make_vec(a.s,a.e),make_vec(b.s,b.e)))\n\t\treturn 1;\n\telse\n\t\treturn 0;\n}\n\n// ?????´????????????\nint orthogonal(LINE a,LINE b){\n\tif(!dot(make_vec(a.s,a.e),make_vec(b.s,b.e)))\n\t\treturn 1;\n\telse\n\t\treturn 0;\n}\n\n// ??????a,b???????????????????????????\nint intersection(LINE a,LINE b){\n\tif(ccw(a,b.s)*ccw(a,b.e) <= 0 &&\n\t   ccw(b,a.s)*ccw(b,a.e) <= 0)\n\t\treturn 1;\n\treturn 0;\n}\n\n//??????a,b?????????\nPOINT cross_point(LINE a,LINE b){\n\tdouble c1 = cross(make_vec(a.s,b.s),make_vec(a.s,b.e));\n\tdouble c2 = cross(make_vec(a.e,b.s),make_vec(a.e,b.e));\n\treturn division(a.s,a.e,fabs(c1),fabs(c2),0);\n}\n\n//??´???a??¨???p????????¢\ndouble distanceLP(LINE a,POINT p){\n\tif(dot(make_vec(a.s,a.e),make_vec(a.s,p)) < 0.0)\n\t\treturn norm(make_vec(a.s,p));\n\tif(dot(make_vec(a.e,a.s),make_vec(a.e,p)) < 0.0)\n\t\treturn norm(make_vec(a.e,p));\n\treturn norm(make_vec(p,perpendicular(a,p)));\n}\n\n//??´???a??¨??´???b????????¢\ndouble distanceLL(LINE a,LINE b){\n\tdouble a1,a2,a3,a4;\n\tif(intersection(a,b) == 1)\n\t\treturn 0.0000000000;\n\ta1 = distanceLP(a,b.s);\n\ta2 = distanceLP(a,b.e);\n\ta3 = distanceLP(b,a.s);\n\ta4 = distanceLP(b,a.e);\n\t//a1 = min(a1,min(a2,min(a3,a4)));\n\ta1 = min(a1,a2);\n\ta3 = min(a3,a4);\n\ta1 = min(a1,a3);\n\treturn a1;\n}\n\n//????§???¢?????¢???\ndouble area(POINT a[],int n){\n\tdouble ans = 0.0;\n\tint i;\n\tPOINT g[n+1];\n\tdouble w,rad = 0.0;\n\n\tfor(i = 0;i < n;i++){\n\t\tg[i] = a[i];\n\t}\n\tg[n] = g[0];\n\n\tfor(i = 1;i < n-1;i ++){\n\t\tans += cross(make_vec(g[0],g[i]),make_vec(g[0],g[i+1]));\n\t}\n\treturn fabs(ans);\n}\n\n\n//* ?????§??????\nint is_convex(POINT a[],int n){\n\tint ans = 0;\n\tint i,j;\n\tPOINT g[n+1];\n\tdouble w,rad = 0.0;\n\n\tfor(i = 0;i < n;i++){\n\t\tg[i] = a[i];\n\t}\n\tg[n] = g[0];\n\n\tfor(i = 1;i < n;i++){\n\t\tw = cross(make_vec(g[i],g[i-1]),make_vec(g[i],g[i+1]))/norm(make_vec(g[i],g[i-1]))/norm(make_vec(g[i],g[i+1]));\n\t\tif(w > 0.00000000){\n\t\t\treturn 0;\n\t\t}\t\t\t\n\t}\n\treturn 1;\n}\n\n//* ??????????????????\n//4\n//3\n//2\n//1\n//0\n//??\\?????°?????????\nint inter_c(CIRCLE a,CIRCLE b){\n\tdouble tmp = distance(a.p,b.p);\n\tif(tmp > a.r+b.r)\n\t\treturn 4;\n\telse if(fabs(tmp-a.r+b.r) <= 0.00000001)\n\t\treturn 3;\n\telse if(fabs(tmp-fabs(a.r-b.r)) <= 0.00000001)\n\t\treturn 1;\n\telse if(tmp < fabs(a.r-b.r))\n\t\treturn 0;\n\telse return 2;\n}\n\n\nint main(){\n\tCIRCLE a,b;\n\tPOINT p[101];\n\t\tscanf(\"%lf%lf%lf\",&a.p.x,&a.p.y,&a.r);\n\t\tscanf(\"%lf%lf%lf\",&b.p.x,&b.p.y,&b.r);\n\t\n\tprintf(\"%d\\n\",inter_c(a,b));\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n\nint main()\n{\n    int c1x, c1y, c1r, c2x, c2y, c2r;\n    double d; //distance of Between the centers\n\n    //printf(\"input\\n\");\n    scanf(\"%d %d %d\", &c1x, &c1y, &c1r);\n    scanf(\"%d %d %d\", &c2x, &c2y, &c2r);\n\n    d = sqrt((c1x-c2x)*(c1x-c2x) + (c1y-c2y)*(c1y-c2y));\n\n    // 4 common tangent lines\n    if(d > (c1r+c2r)) printf(\"4\\n\");\n\n    // 3 common tangent lines\n    if(d == (c1r+c2r)) printf(\"3\\n\");\n\n    // 2 common tangent lines\n    if((abs(c1r-c2r) < d) && (d < (c1r+c2r))) printf(\"2\\n\");\n\n    // 1 common tangent lines\n    if(abs(c1r-c2r) == d) printf(\"1\\n\");\n\n    // 0 common tangent lines\n    if(d < abs(c1r-c2r)) printf(\"0\\n\");\n\n    return 0;\n}\n"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\nint main(int argc, const char * argv[]) {\n    using namespace std;\n\n    int c1x, c1y, c1r, c2x, c2y, c2r;\n    scanf(\"%d %d %d\", &c1x, &c1y, &c1r);\n    scanf(\"%d %d %d\", &c2x, &c2y, &c2r);\n\n    if(c1r<c2r){\n        if(sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2)) > c1r + c2r) printf(\"4\");\n        else if(sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2)) == c1r + c2r) printf(\"3\");\n        else if((c2r-c1r<sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2))) && (sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2)) < c1r + c2r)) printf(\"2\");\n        else if(sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2)) == c2r-c1r) printf(\"1\");\n        else if(sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2)) < c2r-c1r) printf(\"0\");\n\n\n    }\n\n    else{\n        if(sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2)) > c1r + c2r) printf(\"4\");\n        else if(sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2)) == c1r + c2r) printf(\"3\");\n        else if(((c1r-c2r<sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2))) && (sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2)) < c1r + c2r))) printf(\"2\");\n        else if(sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2)) == c1r-c2r) printf(\"1\");\n        else if(sqrt(pow(c1x-c2x,2)+pow(c1y-c2y,2)) < c1r-c2r) printf(\"0\");\n    }\n}\n\n\n"
  },
  {
    "language": "Java",
    "code": "import java.io.*;\n\nclass ProblemA {\n  public static void main(String[] args) throws IOException {\n    InputStreamReader is = new InputStreamReader(System.in);\n    BufferedReader br = new BufferedReader(is);\n\n    String c1Line = br.readLine();\n    String c2Line = br.readLine();\n\n    String[] c1Array = c1Line.split(\" \", 0);\n    String[] c2Array = c2Line.split(\" \", 0);\n\n    int c1x = Integer.parseInt(c1Array[0]);\n    int c1y = Integer.parseInt(c1Array[1]);\n    int c1r = Integer.parseInt(c1Array[2]);\n\n    int c2x = Integer.parseInt(c2Array[0]);\n    int c2y = Integer.parseInt(c2Array[1]);\n    int c2r = Integer.parseInt(c2Array[2]);\n\n    int diffX = Math.abs(c1x - c2x);\n    int diffY = Math.abs(c1y - c2y);\n    int xyR = c1r + c2r;\n    int right1X = c1x + c1r;\n    int left1X = c1x - c1r;\n    int right2X = c2x + c2r;\n    int left2X = c2x - c2r;\n\n    int top1Y = c1y + c1r;\n    int bottom1Y = c1y - c1r;\n    int top2Y = c2y + c2r;\n    int bottom2Y = c2y - c2r;\n\n    if(c1x == c2x) {\n      if(diffY == xyR) { //外接\n        System.out.println(3);\n      } else if(diffY > xyR) { // 離れ\n        System.out.println(4);\n      } else {\n        if(((top1Y < top2Y) && (bottom1Y > bottom2Y)) ||\n        ((top1Y > top2Y) && (bottom1Y < bottom2Y))) { // 内包\n          System.out.println(0);\n        } else if(((top1Y < top2Y) || (bottom1Y > bottom2Y)) &&\n        ((top1Y > top2Y) || (bottom1Y < bottom2Y))) { // 内接\n          System.out.println(1);\n        } else System.out.println(2); // 交わる\n      }\n    } else if(c1y == c2y) {\n      if(diffX == xyR) { //外接\n        System.out.println(3);\n      } else if(diffX > xyR) { // 離れ\n        System.out.println(4);\n      } else {\n        if(((right1X < right2X) && (left1X > left2X)) ||\n        ((right1X > right2X) && (left1X < left2X))) { // 内包\n          System.out.println(0);\n        } else if(((right1X <= right2X) || (left1X <= left2X)) &&\n        ((right1X >= right2X) || (left1X >= left2X))) { // 内接\n          System.out.println(1);\n        } else System.out.println(2); // 交わる\n      }\n    } else if((c1x != c2x) || (c1y != c2y)) {\n      double d = Math.sqrt(diffX*diffX + diffY*diffY);\n      if(d > xyR) { //離れ\n        System.out.println(4);\n      } else {\n        if((((right1X < right2X) && (left1X > left2X)) && ((top1Y < top2Y) && (bottom1Y > bottom2Y))) ||\n        (((right1X > right2X) && (left1X < left2X)) && ((top1Y > top2Y) && (bottom1Y < bottom2Y)))) { // 内包\n          System.out.println(0);\n        } else if((((right1X <= right2X) || (left1X >= left2X)) && ((top1Y <= top2Y) || (bottom1Y >= bottom2Y))) ||\n        (((right1X >= right2X) || (left1X <= left2X)) && ((top1Y >= top2Y) || (bottom1Y <= bottom2Y)))) { // 内接\n          System.out.println(1);\n        } else System.out.println(2); // 交わる\n      }\n    }\n  }\n}\n\n"
  },
  {
    "language": "Java",
    "code": "import java.io.*;\nimport java.util.*;\n\npublic class Main {\n  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    int c1x = sc.nextInt();\n    int c1y = sc.nextInt();\n    int c1r = sc.nextInt();\n    int c2x = sc.nextInt();\n    int c2y = sc.nextInt();\n    int c2r = sc.nextInt();\n\n    int diffX = Math.abs(c1x - c2x);\n    int diffY = Math.abs(c1y - c2y);\n    int xyR = c1r + c2r;\n    int right1X = c1x + c1r;\n    int left1X = c1x - c1r;\n    int right2X = c2x + c2r;\n    int left2X = c2x - c2r;\n    int top1Y = c1y + c1r;\n    int bottom1Y = c1y - c1r;\n    int top2Y = c2y + c2r;\n    int bottom2Y = c2y - c2r;\n\n    if(c1x == c2x) {\n      if(diffY == xyR) { //外接\n        System.out.println(3);\n      } else if(diffY > xyR) { // 離れ\n        System.out.println(4);\n      } else {\n        if(((top1Y < top2Y) && (bottom1Y > bottom2Y)) ||\n        ((top1Y > top2Y) && (bottom1Y < bottom2Y))) { // 内包\n          System.out.println(0);\n        } else if(((top1Y == top2Y) || (bottom1Y == bottom2Y)) || (top1Y == top2Y) || (bottom1Y == bottom2Y)) { // 内接\n          System.out.println(1);\n        } else System.out.println(2); // 交わる\n      }\n    } else if(c1y == c2y) {\n      if(diffX == xyR) { //外接\n        System.out.println(3);\n      } else if(diffX > xyR) { // 離れ\n        System.out.println(4);\n      } else {\n        if(((right1X < right2X) && (left1X > left2X)) ||\n        ((right1X > right2X) && (left1X < left2X))) { // 内包\n          System.out.println(0);\n        } else if(((right1X <= right2X) || (left1X <= left2X)) &&\n        ((right1X >= right2X) || (left1X >= left2X))) { // 内接\n          System.out.println(1);\n        } else System.out.println(2); // 交わる\n      }\n    } else {\n      double d = Math.sqrt(diffX*diffX + diffY*diffY);\n      if(d > xyR) { //離れ\n        System.out.println(4);\n      } else if(d == xyR) {\n        System.out.println(3);\n      } else {\n        if((((right1X < right2X) && (left1X > left2X) && (!(d+c1r > c2r))) && ((top1Y < top2Y) && (bottom1Y > bottom2Y) && (!(d+c1r > c2r)))) ||\n        (((right1X > right2X) && (left1X < left2X) && (!(d+c2r > c1r))) && ((top1Y > top2Y) && (bottom1Y < bottom2Y)) && (!(d+c2r > c1r)))) { // 内包\n          System.out.println(0);\n        } else if(((right1X == right2X) || (left1X == left2X) || (top1Y == top2Y) || (bottom1Y == bottom2Y)) && (!(d+c1r > c2r))) { // 内接\n          System.out.println(1);\n        } else System.out.println(2); // 交わる\n      }\n    }\n  }\n}\n"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.InputStreamReader;\n \npublic class Intersection {\n  public static void main(String[] args) {\n    try {\n      BufferedReader stdReader = new BufferedReader(new InputStreamReader(System.in));\n\n      String line1;\n      line1 = stdReader.readLine();\n      String[] data1 = line1.split(\" \", 0);\n      double cx1 = Double.parseDouble(data1[0]);\n      double cy1 = Double.parseDouble(data1[1]);\n      double r1 = Double.parseDouble(data1[2]);\n\n      String line2;\n      line2 = stdReader.readLine();\n      String[] data2 = line2.split(\" \", 0);\n      double cx2 = Double.parseDouble(data2[0]);\n      double cy2 = Double.parseDouble(data2[1]);\n      double r2 = Double.parseDouble(data2[2]);\n\n      Double distance = new Double( Math.sqrt(Math.pow(cx1-cx2, 2) + Math.pow(cy1-cy2, 2)) );\n      Double maxr = Math.max(r1, r2);\n      Double minr = Math.min(r1, r2);\n\n      switch (distance.compareTo(r1+r2)){\n        case 1:\n          System.out.println(4);\n          break;\n\n        case 0:\n          System.out.println(3);\n          break;\n\n        case -1:\n          switch (maxr.compareTo(distance+minr)){\n            case -1:\n              System.out.println(2);\n              break;\n            case 0:\n              System.out.println(1);\n              break;\n            case 1:\n              System.out.println(0);\n              break;\n          }\n          break;\n\n      }\n\n      stdReader.close();\n    } catch (Exception e) {\n      e.getStackTrace();\n      System.exit(-1); // プログラムを終了\n    }\n  }\n}\n\n"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int c1x = sc.nextInt();\n        int c1y = sc.nextInt();\n        int c1r = sc.nextInt();\n        int c2x = sc.nextInt();\n        int c2y = sc.nextInt();\n        int c2r = sc.nextInt();\n        int dx = c1x - c2x;\n        int dy = c1y - c2y;\n        int sum = c1r + c2r;\n        int diff = c1r - c2r;\n        int sumR = sum * sum;\n        int diffR = diff * diff;\n        int distance = dx * dx + dy * dy;\n        if (distance == diffR) {\n            System.out.println(1);\n        } else if (distance + c1r * c1r < c2r * c2r || distance + c2r * c2r < c1r * c1r) {\n            System.out.println(0);\n        } else if (distance == sumR) {\n            System.out.println(3);\n        } else if (distance < sumR) {\n            System.out.println(2);\n        } else {\n            System.out.println(4);\n        }\n    }\n}"
  },
  {
    "language": "Java",
    "code": "\npublic class Main {\n\tpublic static void main(String args[]){\n\t\tint cx1, cy1, r1;\n\t\tint cx2, cy2, r2;\n\t\t\n\t\tif(args.length != 0){\n\t\t\tcx1 = Integer.valueOf(args[0]);\n\t\t\tcy1 = Integer.valueOf(args[1]);\n\t\t\tr1 = Integer.valueOf(args[2]);\n\t\t\tcx2 = Integer.valueOf(args[3]);\n\t\t\tcy2 = Integer.valueOf(args[4]);\n\t\t\tr2 = Integer.valueOf(args[5]);\n\t\t\t\n\t\t\tint l = (int) Math.sqrt(Math.pow(cx1 - cx2, 2) + Math.pow(cy1 - cy2, 2));\n\t\t\tif(l > (r1+r2)) \n\t\t\t\tSystem.out.println(\"4\");\n\t\t\telse if(l == (r1+r2)) \n\t\t\t\tSystem.out.println(\"3\");\n\t\t\telse if(l < (r1+r2)) {\n\t\t\t\tint maxr = r1;\n\t\t\t\tint minr = r2;\n\t\t\t\tif(r1 < r2){\n\t\t\t\t\tmaxr = r2;\n\t\t\t\t\tminr = r1;\n\t\t\t\t}\n\t\t\t\tif(l > (maxr-minr))\n\t\t\t\t\tSystem.out.println(\"2\");\n\t\t\t\telse if(l == (maxr-minr))\n\t\t\t\t\tSystem.out.println(\"1\");\n\t\t\t\telse if(l < (maxr-minr))\n\t\t\t\t\tSystem.out.println(\"0\");\n\t\t\t}\n\t\t}\n\t\telse System.out.println(\"Input doesn't be exist\");\n\t}\t\n}\n\n"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\nclass problemA{\n\n  public static void main(String[] args){\n    int c1x=0, c1y=0, c1r=0;\n    int c2x=0, c2y=0, c2r=0;\n    int length = 0;//length of between center coordinate of c1 and c2\n    int large = 0, small = 0;\n\n    Scanner scan = new Scanner(System.in);\n    c1x = scan.nextInt();\n    c1y = scan.nextInt();\n    c1r = scan.nextInt();\n\n    c2x = scan.nextInt();\n    c2y = scan.nextInt();\n    c2r = scan.nextInt();\n\n    large = c1r;\n    small = c2r;\n    if(large < small){\n      large = c2r;\n      small = c1r;\n    }\n\n    length = (int)(Math.sqrt((c2x-c1x)*(c2x-c1x) + (c2y-c1y)*(c2y-c1y)));\n\n    if(length > (c1r + c2r)) System.out.println(\"4\");\n    else if (length < (c1r + c2r)){\n        if(large == (length + small)) System.out.println(\"1\");\n        else if(large > (length + small))System.out.println(\"0\");\n        else System.out.println(\"2\");\n    }\n    else System.out.println(\"3\");\n  }\n}\n\n"
  },
  {
    "language": "Java",
    "code": "\nimport java.io.InputStreamReader;\nimport java.util.Scanner;\n\nimport static java.lang.Math.*;\n\npublic class Main{\n\n\n    public static void main(String args[]){\n\n\n        Scanner scan = new Scanner(System.in);\n\n        Double x1 = Double.parseDouble(scan.next());\n        Double y1 = Double.parseDouble(scan.next());\n        Double r1 = Double.parseDouble(scan.next());\n\n        Double x2 = Double.parseDouble(scan.next());\n        Double y2 = Double.parseDouble(scan.next());\n        Double r2 = Double.parseDouble(scan.next());\n\n        if(r1 + r2 > sqrt(pow(x2 - x1, 2) + pow(y2 - y1, 2)) && max(r1, r2) - min(r1, r2) > sqrt(pow(x2 - x1, 2) + pow(y2 - y1, 2))){\n            System.out.println(0);\n        }else if(r1 + r2 > sqrt(pow(x2 - x1, 2) + pow(y2 - y1, 2)) && max(r1, r2) - min(r1, r2) == sqrt(pow(x2 - x1, 2) + pow(y2 - y1, 2))){\n            System.out.println(1);\n        }else if(r1 + r2 > sqrt(pow(x2 - x1, 2) + pow(y2 - y1, 2))){\n            System.out.println(2);\n        }else if(r1 + r2 == sqrt(pow(x2 - x1, 2) + pow(y2 - y1, 2))){\n            System.out.println(3);\n        }else if(r1 + r2 < sqrt(pow(x2 - x1, 2) + pow(y2 - y1, 2))){\n            System.out.println(4);\n        }\n\n\n\n\n    }\n\n}\n\n"
  },
  {
    "language": "Java",
    "code": "public class Main {\n\tpublic static void main(String args[]){\n\t\tint cx1, cy1, r1;\n\t\tint cx2, cy2, r2;\n\t\t\n\t\tif(args.length != 0){\n\t\t\tcx1 = Integer.valueOf(args[0]);\n\t\t\tcy1 = Integer.valueOf(args[1]);\n\t\t\tr1 = Integer.valueOf(args[2]);\n\t\t\tcx2 = Integer.valueOf(args[3]);\n\t\t\tcy2 = Integer.valueOf(args[4]);\n\t\t\tr2 = Integer.valueOf(args[5]);\n\t\t\t\n\t\t\tint l = (int)(Math.pow(cx1 - cx2, 2) + Math.pow(cy1 - cy2, 2));\n\t\t\tint rlen = r1+r2;\n\t\t\tint revlen = r1 - r2;\n\t\t    if(l > rlen*rlen) \n\t\t\t\tSystem.out.println(\"4\");\n\t\t\telse if(l == rlen*rlen) \n\t\t\t\tSystem.out.println(\"3\");\n\t\t\telse if(l < rlen*rlen) {\n\t\t\t\tif(l > revlen*revlen)\n\t\t\t\t\tSystem.out.println(\"2\");\n\t\t\t\telse if(l == revlen*revlen)\n\t\t\t\t\tSystem.out.println(\"1\");\n\t\t\t\telse if(l < revlen*revlen)\n\t\t\t\t\tSystem.out.println(\"0\");\n\t\t\t}\n\t\t}\n\t\telse System.out.println(\"Input doesn't be exist\");\n\t}\t\n}\n\n"
  },
  {
    "language": "Java",
    "code": "import java.io.*;\nimport java.util.*;\n\nclass Main {\n  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    int c1x = sc.nextInt();\n    int c1y = sc.nextInt();\n    int c1r = sc.nextInt();\n    int c2x = sc.nextInt();\n    int c2y = sc.nextInt();\n    int c2r = sc.nextInt();\n\n/*\n    int diffX = Math.abs(c1x - c2x);\n    int diffY = Math.abs(c1y - c2y);\n    int xyR = c1r + c2r;\n    int right1X = c1x + c1r;\n    int left1X = c1x - c1r;\n    int right2X = c2x + c2r;\n    int left2X = c2x - c2r;\n\n    int top1Y = c1y + c1r;\n    int bottom1Y = c1y - c1r;\n    int top2Y = c2y + c2r;\n    int bottom2Y = c2y - c2r;\n\n    if(c1x == c2x) {\n      if(diffY == xyR) { //外接\n        System.out.println(3);\n      } else if(diffY > xyR) { // 離れ\n        System.out.println(4);\n      } else {\n        if(((top1Y < top2Y) && (bottom1Y > bottom2Y)) ||\n        ((top1Y > top2Y) && (bottom1Y < bottom2Y))) { // 内包\n          System.out.println(0);\n        } else if(((top1Y < top2Y) || (bottom1Y > bottom2Y)) &&\n        ((top1Y > top2Y) || (bottom1Y < bottom2Y))) { // 内接\n          System.out.println(1);\n        } else System.out.println(2); // 交わる\n      }\n    } else if(c1y == c2y) {\n      if(diffX == xyR) { //外接\n        System.out.println(3);\n      } else if(diffX > xyR) { // 離れ\n        System.out.println(4);\n      } else {\n        if(((right1X < right2X) && (left1X > left2X)) ||\n        ((right1X > right2X) && (left1X < left2X))) { // 内包\n          System.out.println(0);\n        } else if(((right1X <= right2X) || (left1X <= left2X)) &&\n        ((right1X >= right2X) || (left1X >= left2X))) { // 内接\n          System.out.println(1);\n        } else System.out.println(2); // 交わる\n      }\n    } else if((c1x != c2x) || (c1y != c2y)) {\n      double d = Math.sqrt(diffX*diffX + diffY*diffY);\n      if(d > xyR) { //離れ\n        System.out.println(4);\n      } else {\n        if((((right1X < right2X) && (left1X > left2X)) && ((top1Y < top2Y) && (bottom1Y > bottom2Y))) ||\n        (((right1X > right2X) && (left1X < left2X)) && ((top1Y > top2Y) && (bottom1Y < bottom2Y)))) { // 内包\n          System.out.println(0);\n        } else if((((right1X <= right2X) || (left1X >= left2X)) && ((top1Y <= top2Y) || (bottom1Y >= bottom2Y))) ||\n        (((right1X >= right2X) || (left1X <= left2X)) && ((top1Y >= top2Y) || (bottom1Y <= bottom2Y)))) { // 内接\n          System.out.println(1);\n        } else System.out.println(2); // 交わる\n      }\n    }\n    */\n  }\n}\n\n"
  },
  {
    "language": "Java",
    "code": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.util.NoSuchElementException;\n\npublic class Main {\n\tprivate static FastScanner sc = new FastScanner();\n\tprivate static double ALLOWABLE_ERROR = 0.0000001;\n\t\n\tpublic static void main(String[] args) {\n\t\tCircle c1 = new Circle(sc.nextDouble(), sc.nextDouble(), sc.nextDouble());\n\t\tCircle c2 = new Circle(sc.nextDouble(), sc.nextDouble(), sc.nextDouble());\n\t\t\n\t\tdouble dist = distance(c1, c2);\n\t\t\n\t\tif(Math.abs(dist + c2.r - c1.r) < ALLOWABLE_ERROR || Math.abs(dist + c1.r - c2.r) < ALLOWABLE_ERROR) {\n\t\t\tSystem.out.println(1);\n\t\t} else if(dist + c2.r < c1.r + ALLOWABLE_ERROR || dist + c1.r < c2.r + ALLOWABLE_ERROR) {\n\t\t\tSystem.out.println(0);\n\t\t} else if(Math.abs(dist - c2.r - c1.r) < ALLOWABLE_ERROR) {\n\t\t\tSystem.out.println(3);\n\t\t} else if(dist < c1.r + c2.r + ALLOWABLE_ERROR) {\n\t\t\tSystem.out.println(2);\n\t\t} else {\n\t\t\tSystem.out.println(4);\n\t\t}\n\t}\n\n\tstatic double distance(Circle p1, Circle p2) {\n\t\treturn Math.sqrt((p2.x-p1.x)*(p2.x-p1.x) + (p2.y-p1.y)*(p2.y-p1.y));\n\t}\n\t\n\tstatic class Circle {\n\t\tdouble x;\n\t\tdouble y;\n\t\tdouble r;\n\t\tCircle(double x, double y, double r) {\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.r = r;\n\t\t}\n\t}\n\t\n\tstatic class FastScanner {\n        private final InputStream in = System.in;\n        private final byte[] buffer = new byte[1024];\n        private int ptr = 0;\n        private int buflen = 0;\n        private boolean hasNextByte() {\n            if(ptr < buflen) {\n                return true;\n            } else {\n                ptr = 0;\n                try {\n                    buflen = in.read(buffer);\n                } catch(IOException e) {\n                    e.printStackTrace();\n                }\n                if(buflen <= 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        private int readByte() { if (hasNextByte()) return buffer[ptr++]; else return -1;}\n        private static boolean isPrintableChar(int c) { return 33 <= c && c <= 126;}\n        private void skipUnprintable() { while(hasNextByte() && !isPrintableChar(buffer[ptr])) ptr++;}\n        public boolean hasNext() { skipUnprintable(); return hasNextByte();}\n        public String next() {\n            if (!hasNext()) throw new NoSuchElementException();\n            StringBuilder sb = new StringBuilder();\n            int b = readByte();\n            while(isPrintableChar(b)) {\n                sb.appendCodePoint(b);\n                b = readByte();\n            }\n            return sb.toString();\n        }\n        public long nextLong() {\n            return Long.parseLong(next());\n        }\n        public int nextInt(){\n            return Integer.parseInt(next());\n        }\n        public double nextDouble(){\n            return Double.parseDouble(next());\n        }\n    }\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\npublic class problemA {\n\n  public static void main(String[] args){\n    int c1x=0, c1y=0, c1r=0;\n    int c2x=0, c2y=0, c2r=0;\n    int length = 0;//length of between center coordinate of c1 and c2\n    int large = 0, small = 0;\n\n    Scanner scan = new Scanner(System.in);\n    c1x = scan.nextInt();\n    c1y = scan.nextInt();\n    c1r = scan.nextInt();\n\n    c2x = scan.nextInt();\n    c2y = scan.nextInt();\n    c2r = scan.nextInt();\n\n    large = c1r;\n    small = c2r;\n    if(large < small){\n      large = c2r;\n      small = c1r;\n    }\n\n    length = (int)(Math.sqrt((c2x-c1x)*(c2x-c1x) + (c2y-c1y)*(c2y-c1y)));\n\n    if(length > (c1r + c2r)) System.out.println(\"4\");\n    else if (length < (c1r + c2r)){\n        if(large == (length + small)) System.out.println(\"1\");\n        else if(large > (length + small))System.out.println(\"0\");\n        else System.out.println(\"2\");\n    }\n    else System.out.println(\"3\");\n  }\n}\n\n"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\nimport java.util.ArrayList;\nimport java.util.Vector;\n\nclass problemB {\n  void solve(){\n\n    Scanner scan = new Scanner(System.in);\n    int v = scan.nextInt();\n    int e = scan.nextInt();\n\n    int[][] g = new int[v][v];\n    int[] visit = new int[v];\n    int cycle = 0;\n\n\n    for(int i=0 ; i<v ; i++){\n      visit[i] = 0;\n      for(int j=0 ; j<v ; j++){\n        g[i][j] = -1;\n      }\n    }\n\n    for(int i=0 ; i<e ; i++){\n      int s = scan.nextInt();\n      int t = scan.nextInt();\n      if(s!=t) g[s][t] = 1;\n    }\n\n    for(int i=0 ; i<v ; i++){\n      for(int j=0 ; j<v ; j++){\n        if(g[i][j]==1) cycle = visitNode(j, g, visit);\n      }\n    }\n\n    System.out.println(cycle);\n\n  }//---end of solve---\n\n  int visitNode(int s, int[][] g, int[] visit){\n    visit[s] = 1;\n    for(int i=0 ; i<g[s].length ; i++){\n      if(g[s][i] == 1){\n        if(visit[s] < 0) visitNode(i, g, visit);\n        else{\n         return 1;\n        }\n      }\n    }\n    return 0;\n  }//----end of visitNode----\n}//----end of class----\n\npublic class Main {\n  public static void main(String args[]){\n    new problemB().solve();\n  }\n}\n\n"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\nclass problemA{\n\n  void solve(){\n    int c1x=0, c1y=0, c1r=0;\n    int c2x=0, c2y=0, c2r=0;\n    int length = 0;//length of between center coordinate of c1 and c2\n    int large = 0, small = 0;\n\n    Scanner scan = new Scanner(System.in);\n    c1x = scan.nextInt();\n    c1y = scan.nextInt();\n    c1r = scan.nextInt();\n\n    c2x = scan.nextInt();\n    c2y = scan.nextInt();\n    c2r = scan.nextInt();\n\n    large = c1r;\n    small = c2r;\n    if(large < small){\n      large = c2r;\n      small = c1r;\n    }\n\n    length = (int)(Math.sqrt((c2x-c1x)*(c2x-c1x) + (c2y-c1y)*(c2y-c1y)));\n\n    if(length > (c1r + c2r)) System.out.println(\"4\");\n    else if (length < (c1r + c2r)){\n        if(large == (length + small)) System.out.println(\"1\");\n        else if(large > (length + small))System.out.println(\"0\");\n        else System.out.println(\"2\");\n    }\n    else System.out.println(\"3\");\n  }\n\n  public static void main(String[] args){\n    new problemA().solve();\n  }\n}\n\n"
  },
  {
    "language": "Java",
    "code": "\nimport java.util.*;\n\n\npublic class Main {\n    static Scanner input = new Scanner(System.in);\n\n    static public void solve() {\n        int c1x = input.nextInt();\n        int c1y = input.nextInt();\n        int c1r = input.nextInt();\n       \n        int c2x = input.nextInt();\n        int c2y = input.nextInt();\n        int c2r = input.nextInt();\n\n        input.close();\n\n        double x = (double) c1x - c2x;\n        double y = (double) c1y - c2y;\n        double l12 = Math.sqrt(x * x + y * y);\n        double plus = (double) c1r + c2r;\n        double minus = (double) c1r - c2r;\n        if (minus < 0) minus = - minus;\n\n        if (l12 > plus) {\n            System.out.println(\"4\");\n        }\n        if (l12 == plus) {\n            System.out.println(\"3\");\n        }\n        if (l12 < plus && l12 > minus) {\n            System.out.println(\"2\");\n        }\n        if (l12 == minus) {\n            System.out.println(\"1\");\n        }\n        if (l12 < minus) {\n            System.out.println(\"0\");\n        }\n    }\n\n    public static void main(String[] args) {\n        solve();\n    }\n}\n"
  },
  {
    "language": "Java",
    "code": "\nclass week01_A {\n\tpublic static void main(String args[]){\n\t\tint cx1, cy1, r1;\n\t\tint cx2, cy2, r2;\n\t\t\n\t\tif(args.length != 0){\n\t\t\tcx1 = Integer.valueOf(args[0]);\n\t\t\tcy1 = Integer.valueOf(args[1]);\n\t\t\tr1 = Integer.valueOf(args[2]);\n\t\t\tcx2 = Integer.valueOf(args[3]);\n\t\t\tcy2 = Integer.valueOf(args[4]);\n\t\t\tr2 = Integer.valueOf(args[5]);\n\t\t\t\n\t\t\tint l = (int) Math.sqrt(Math.pow(cx1 - cx2, 2) + Math.pow(cy1 - cy2, 2));\n\t\t\tif(l > (r1+r2)) \n\t\t\t\tSystem.out.println(\"4\");\n\t\t\telse if(l == (r1+r2)) \n\t\t\t\tSystem.out.println(\"3\");\n\t\t\telse if(l < (r1+r2)) {\n\t\t\t\tint maxr = r1;\n\t\t\t\tint minr = r2;\n\t\t\t\tif(r1 < r2){\n\t\t\t\t\tmaxr = r2;\n\t\t\t\t\tminr = r1;\n\t\t\t\t}\n\t\t\t\tif(l > (maxr-minr))\n\t\t\t\t\tSystem.out.println(\"2\");\n\t\t\t\telse if(l == (maxr-minr))\n\t\t\t\t\tSystem.out.println(\"1\");\n\t\t\t\telse if(l < (maxr-minr))\n\t\t\t\t\tSystem.out.println(\"0\");\n\t\t\t}\n\t\t}\n\t\telse System.out.println(\"Input doesn't be exist\");\n\t}\t\n}\n\n"
  },
  {
    "language": "Java",
    "code": "\nimport java.util.*;\n\n\npublic class Main {\n    static Scanner input = new Scanner(System.in);\n\n    static public void solve() {\n        int c1x = input.nextInt();\n        int c1y = input.nextInt();\n        int c1r = input.nextInt();\n       \n        int c2x = input.nextInt();\n        int c2y = input.nextInt();\n        int c2r = input.nextInt();\n\n        input.close();\n\n        double x = (double) c1x - c2x;\n        double y = (double) c1y - c2y;\n        double l12 = Math.sqrt(x * x + y * y);\n        double plus = (double) c1r + c2r;\n        double minus = (double) c1r - c2r;\n        if (minus < 0) minus = - minus;\n\n        if (l12 > plus) {\n            System.out.println(\"4\");\n        }\n        if (l12 == plus) {\n            System.out.println(\"3\");\n        }\n        if (l12 < plus && l12 > minus) {\n            System.out.println(\"2\");\n        }\n        if (l12 == minus) {\n            System.out.println(\"1\");\n        }\n        if (l12 < minus) {\n            System.out.println(\"0\");\n        }\n    }\n\n    public static void main(String[] args) {\n        solve();\n    }\n}\n"
  },
  {
    "language": "Java",
    "code": "import java.io.*;\nimport java.util.*;\n\nclass ProblemA {\n  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    int c1x = sc.nextInt();\n    int c1y = sc.nextInt();\n    int c1r = sc.nextInt();\n    int c2x = sc.nextInt();\n    int c2y = sc.nextInt();\n    int c2r = sc.nextInt();\n\n    int diffX = Math.abs(c1x - c2x);\n    int diffY = Math.abs(c1y - c2y);\n    int xyR = c1r + c2r;\n    int right1X = c1x + c1r;\n    int left1X = c1x - c1r;\n    int right2X = c2x + c2r;\n    int left2X = c2x - c2r;\n    int top1Y = c1y + c1r;\n    int bottom1Y = c1y - c1r;\n    int top2Y = c2y + c2r;\n    int bottom2Y = c2y - c2r;\n\n    if(c1x == c2x) {\n      if(diffY == xyR) { //外接\n        System.out.println(3);\n      } else if(diffY > xyR) { // 離れ\n        System.out.println(4);\n      } else {\n        if(((top1Y < top2Y) && (bottom1Y > bottom2Y)) ||\n        ((top1Y > top2Y) && (bottom1Y < bottom2Y))) { // 内包\n          System.out.println(0);\n        } else if(((top1Y <= top2Y) || (bottom1Y >= bottom2Y)) &&\n        ((top1Y >= top2Y) || (bottom1Y <= bottom2Y))) { // 内接\n          System.out.println(1);\n        } else System.out.println(2); // 交わる\n      }\n    } else if(c1y == c2y) {\n      if(diffX == xyR) { //外接\n        System.out.println(3);\n      } else if(diffX > xyR) { // 離れ\n        System.out.println(4);\n      } else {\n        if(((right1X < right2X) && (left1X > left2X)) ||\n        ((right1X > right2X) && (left1X < left2X))) { // 内包\n          System.out.println(0);\n        } else if(((right1X <= right2X) || (left1X <= left2X)) &&\n        ((right1X >= right2X) || (left1X >= left2X))) { // 内接\n          System.out.println(1);\n        } else System.out.println(2); // 交わる\n      }\n    //} else if((c1x != c2x) || (c1y != c2y)) {\n    } else {\n      double d = Math.sqrt(diffX*diffX + diffY*diffY);\n      if(d > xyR) { //離れ\n        System.out.println(4);\n      } else {\n        if((((right1X < right2X) && (left1X > left2X)) && ((top1Y < top2Y) && (bottom1Y > bottom2Y))) ||\n        (((right1X > right2X) && (left1X < left2X)) && ((top1Y > top2Y) && (bottom1Y < bottom2Y)))) { // 内包\n          System.out.println(0);\n        } else if((((right1X <= right2X) || (left1X >= left2X)) && ((top1Y <= top2Y) || (bottom1Y >= bottom2Y))) ||\n        (((right1X >= right2X) || (left1X <= left2X)) && ((top1Y >= top2Y) || (bottom1Y <= bottom2Y)))) { // 内接\n          System.out.println(1);\n        } else System.out.println(2); // 交わる\n      }\n    }\n  }\n}\n"
  },
  {
    "language": "Java",
    "code": "\npublic class week01_A {\n\tpublic static void main(String args[]){\n\t\tint cx1, cy1, r1;\n\t\tint cx2, cy2, r2;\n\t\t\n\t\tif(args.length != 0){\n\t\t\tcx1 = Integer.valueOf(args[0]);\n\t\t\tcy1 = Integer.valueOf(args[1]);\n\t\t\tr1 = Integer.valueOf(args[2]);\n\t\t\tcx2 = Integer.valueOf(args[3]);\n\t\t\tcy2 = Integer.valueOf(args[4]);\n\t\t\tr2 = Integer.valueOf(args[5]);\n\t\t\t\n\t\t\tint l = (int) Math.sqrt(Math.pow(cx1 - cx2, 2) + Math.pow(cy1 - cy2, 2));\n\t\t\tif(l > (r1+r2)) \n\t\t\t\tSystem.out.println(\"4\");\n\t\t\telse if(l == (r1+r2)) \n\t\t\t\tSystem.out.println(\"3\");\n\t\t\telse if(l < (r1+r2)) {\n\t\t\t\tint maxr = r1;\n\t\t\t\tint minr = r2;\n\t\t\t\tif(r1 < r2){\n\t\t\t\t\tmaxr = r2;\n\t\t\t\t\tminr = r1;\n\t\t\t\t}\n\t\t\t\tif(l > (maxr-minr))\n\t\t\t\t\tSystem.out.println(\"2\");\n\t\t\t\telse if(l == (maxr-minr))\n\t\t\t\t\tSystem.out.println(\"1\");\n\t\t\t\telse if(l < (maxr-minr))\n\t\t\t\t\tSystem.out.println(\"0\");\n\t\t\t}\n\t\t}\n\t\telse System.out.println(\"Input doesn't be exist\");\n\t}\t\n}\n\n"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\nclass Circle {\n\tpublic float xx;\n\tpublic float yy;\n\tpublic float rr;\n\tpublic void Cricle(float x, float y, float r) {\n\t\tif(x<-1000||x>1000||y<-1000||y>1000) {\n\t\t\tSystem.out.println(\"error\");\n\t\t}\n\t\telse if(r>1000||r<1) {\n\t\t\tSystem.out.println(\"error\");\n\t\t}else {\n\t\t\tthis.xx=x;\n\t\t\tthis.yy=y;\n\t\t\tthis.rr=r;\n\t\t}\n\t}\n\tpublic float getx() {\n\t\treturn xx;\n\t}\n\tpublic float gety() {\n\t\treturn yy;\n\t}\n\tpublic float getr() {\n\t\treturn rr;\n\t}\t\n}\n\npublic class Main {\n\tstatic Circle C1,C2;\n\tpublic static void main(String[] args) {\n\t\tC1= new Circle();\n\t\tC2= new Circle();\n\t\tlistenC();\n\t\tjudge();\n\t    \n\t}\n\tpublic static void listenC() {\n\t\tScanner scanner=new Scanner(System.in);\n\t\tfloat c1x=scanner.nextFloat();\n\t\tfloat c1y=scanner.nextFloat();\n\t\tfloat c1r=scanner.nextFloat();\n\t\tfloat c2x=scanner.nextFloat();\n\t\tfloat c2y=scanner.nextFloat();\n\t\tfloat c2r=scanner.nextFloat();\n\t\tC1.Cricle(c1x, c1y, c1r);\n\t\tC2.Cricle(c2x, c2y, c2r);\n\t\tif (C1==C2)System.out.println(\"error\");\n\t}\n\tprivate static void judge() {\n\t\tdouble i;\n\t\ti=Math.sqrt((C1.getx()-C2.getx())*(C1.getx()-C2.getx())+(C1.gety()-C2.gety())*(C1.gety()-C2.gety()));\n\t\tif(i>C1.getr()+C2.getr())    \n\t\t\tSystem.out.println(4);\n\t\telse if(i==Math.abs(C1.getr()+C2.getr()))    \n\t\t\tSystem.out.println(3);\n\t\telse if(i>Math.abs(C1.getr()-C2.getr())&&i<C1.getr()+C2.getr())   \n\t\t\tSystem.out.println(2);\n\t\telse if(i==Math.abs(C1.getr()-C2.getr()))     \n\t\t\tSystem.out.println(1);\n\t\telse             \n\t\t\tSystem.out.println(0);\n\t}\n}\n\n"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\nimport java.lang.*;\n\nclass Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        \n        int cx1 = scanner.nextInt();\n        int cy1 = scanner.nextInt();\n        int r1 = scanner.nextInt();\n        int cx2 = scanner.nextInt();\n        int cy2 = scanner.nextInt();\n        int r2 = scanner.nextInt();\n        \n        // Calculate distance between two centers\n        double dist = Math.sqrt(Math.pow(cx1-cx2,2) + Math.pow(cy1-cy2,2));\n        \n        int sum_r = r1 + r2;\n        int dif_r = Math.abs(r1 - r2);\n        \n        if(sum_r < dist) System.out.println(4);\n        else if(sum_r == dist) System.out.println(3);\n        else if(dif_r < dist && dist < sum_r) System.out.println(2);\n        else if(dist == dif_r) System.out.println(1);\n        else if(dist < dif_r) System.out.println(0);\n    }\n}\n"
  },
  {
    "language": "Java",
    "code": "import java.util.HashMap;\nimport java.util.Scanner;\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tHashMap<String, Double> circleMap1 = createCircleMap();\n\t\tHashMap<String, Double> circleMap2 = createCircleMap();\n\t\t\n\t\tint result = judge(circleMap1, circleMap2);\n\t\t\n\t\tSystem.out.println(String.valueOf(result));\n\t}\n\t\n\tprivate static HashMap<String, Double> createCircleMap() {\n\n\t\tScanner scan = new Scanner(System.in);\n\t\tdouble cx = scan.nextInt();\n\t\tdouble cy = scan.nextInt();\n\t\tdouble cr = scan.nextInt();\n\t\t\n\t\tHashMap<String, Double> circleMap = new HashMap<String, Double>();\n\t\tcircleMap.put(\"cx\", cx);\n\t\tcircleMap.put(\"cy\", cy);\n\t\tcircleMap.put(\"cr\", cr);\n\n\t\treturn circleMap;\n\t}\n\n\tprivate static int judge(HashMap<String, Double> circleMap1, HashMap<String, Double> circleMap2){\n\t\tdouble cx1 = circleMap1.get(\"cx\");\n\t\tdouble cy1 = circleMap1.get(\"cy\");\n\t\tdouble cr1 = circleMap1.get(\"cr\");\n\t\t\n\t\tdouble cx2 = circleMap2.get(\"cx\");\n\t\tdouble cy2 = circleMap2.get(\"cy\");\n\t\tdouble cr2 = circleMap2.get(\"cr\");\n\t\t\n\t\tdouble dis2 = Math.pow(cx2-cx1, 2) + Math.pow(cy2-cy1, 2);\n\t\tdouble dis = Math.sqrt(dis2);\t\n\t\t\n\t\tif (dis > cr1+cr2) {\n\t\t\treturn 4;\n\t\t} else if (dis == cr1+cr2) {\n\t\t\treturn 3;\n\t\t} else if (dis == Math.abs(cr1-cr2)) {\n\t\t\treturn 1;\n\t\t} else if (dis < Math.abs(cr1-cr2)) {\n\t\t\treturn 0;\n\t\t} else {\n\t\t\treturn 2;\n\t\t}\n\t}\n\t\n\t\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\npublic class pA{\n\n  public static void main(String[] args){\n    int c1x=0, c1y=0, c1r=0;\n    int c2x=0, c2y=0, c2r=0;\n    int length = 0;//length of between center coordinate of c1 and c2\n    int large = 0, small = 0;\n\n    Scanner scan = new Scanner(System.in);\n    c1x = scan.nextInt();\n    c1y = scan.nextInt();\n    c1r = scan.nextInt();\n\n    c2x = scan.nextInt();\n    c2y = scan.nextInt();\n    c2r = scan.nextInt();\n\n    large = c1r;\n    small = c2r;\n    if(large < small){\n      large = c2r;\n      small = c1r;\n    }\n\n    length = (int)(Math.sqrt((c2x-c1x)*(c2x-c1x) + (c2y-c1y)*(c2y-c1y)));\n\n    if(length > (c1r + c2r)) System.out.println(\"4\");\n    else if (length < (c1r + c2r)){\n        if(large == (length + small)) System.out.println(\"1\");\n        else if(large > (length + small))System.out.println(\"0\");\n        else System.out.println(\"2\");\n    }\n    else System.out.println(\"3\");\n  }\n}\n\n"
  },
  {
    "language": "Java",
    "code": "import java.io.*;\nimport java.util.*;\n\nclass Main {\n  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    int c1x = sc.nextInt();\n    int c1y = sc.nextInt();\n    int c1r = sc.nextInt();\n    int c2x = sc.nextInt();\n    int c2y = sc.nextInt();\n    int c2r = sc.nextInt();\n\n    int diffX = Math.abs(c1x - c2x);\n    int diffY = Math.abs(c1y - c2y);\n    int xyR = c1r + c2r;\n    int right1X = c1x + c1r;\n    int left1X = c1x - c1r;\n    int right2X = c2x + c2r;\n    int left2X = c2x - c2r;\n\n    int top1Y = c1y + c1r;\n    int bottom1Y = c1y - c1r;\n    int top2Y = c2y + c2r;\n    int bottom2Y = c2y - c2r;\n\n    if(c1x == c2x) {\n      if(diffY == xyR) { //外接\n        System.out.println(3);\n      } else if(diffY > xyR) { // 離れ\n        System.out.println(4);\n      } else {\n        if(((top1Y < top2Y) && (bottom1Y > bottom2Y)) ||\n        ((top1Y > top2Y) && (bottom1Y < bottom2Y))) { // 内包\n          System.out.println(0);\n        } else if(((top1Y < top2Y) || (bottom1Y > bottom2Y)) &&\n        ((top1Y > top2Y) || (bottom1Y < bottom2Y))) { // 内接\n          System.out.println(1);\n        } else System.out.println(2); // 交わる\n      }\n    } else if(c1y == c2y) {\n      if(diffX == xyR) { //外接\n        System.out.println(3);\n      } else if(diffX > xyR) { // 離れ\n        System.out.println(4);\n      } else {\n        if(((right1X < right2X) && (left1X > left2X)) ||\n        ((right1X > right2X) && (left1X < left2X))) { // 内包\n          System.out.println(0);\n        } else if(((right1X <= right2X) || (left1X <= left2X)) &&\n        ((right1X >= right2X) || (left1X >= left2X))) { // 内接\n          System.out.println(1);\n        } else System.out.println(2); // 交わる\n      }\n    } else if((c1x != c2x) || (c1y != c2y)) {\n      double d = Math.sqrt(diffX*diffX + diffY*diffY);\n      if(d > xyR) { //離れ\n        System.out.println(4);\n      } else {\n        if((((right1X < right2X) && (left1X > left2X)) && ((top1Y < top2Y) && (bottom1Y > bottom2Y))) ||\n        (((right1X > right2X) && (left1X < left2X)) && ((top1Y > top2Y) && (bottom1Y < bottom2Y)))) { // 内包\n          System.out.println(0);\n        } else if((((right1X <= right2X) || (left1X >= left2X)) && ((top1Y <= top2Y) || (bottom1Y >= bottom2Y))) ||\n        (((right1X >= right2X) || (left1X <= left2X)) && ((top1Y >= top2Y) || (bottom1Y <= bottom2Y)))) { // 内接\n          System.out.println(1);\n        } else System.out.println(2); // 交わる\n      }\n    }\n  }\n}\n"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\nclass Circle {\n\tpublic float xx;\n\tpublic float yy;\n\tpublic float rr;\n\tpublic void Cricle(float x, float y, float r) {\n\t\tif(x<-1000||x>1000||y<-1000||y>1000) {\n\t\t\tSystem.out.println(\"error\");\n\t\t}\n\t\telse if(r>1000||r<1) {\n\t\t\tSystem.out.println(\"error\");\n\t\t}else {\n\t\t\tthis.xx=x;\n\t\t\tthis.yy=y;\n\t\t\tthis.rr=r;\n\t\t}\n\t}\n\tpublic float getx() {\n\t\treturn xx;\n\t}\n\tpublic float gety() {\n\t\treturn yy;\n\t}\n\tpublic float getr() {\n\t\treturn rr;\n\t}\t\n}\n\npublic class Main {\n\tstatic Circle C1,C2;\n\tpublic static void main(String[] args) {\n\t\tC1= new Circle();\n\t\tC2= new Circle();\n\t\tlistenC();\n\t\tjudge();\n\t    \n\t}\n\tpublic static void listenC() {\n\t\tScanner scanner=new Scanner(System.in);\n\t\tfloat c1x=scanner.nextFloat();\n\t\tfloat c1y=scanner.nextFloat();\n\t\tfloat c1r=scanner.nextFloat();\n\t\tfloat c2x=scanner.nextFloat();\n\t\tfloat c2y=scanner.nextFloat();\n\t\tfloat c2r=scanner.nextFloat();\n\t\tC1.Cricle(c1x, c1y, c1r);\n\t\tC2.Cricle(c2x, c2y, c2r);\n\t\tif (C1==C2)System.out.println(\"error\");\n\t}\n\tprivate static void judge() {\n\t\tdouble i;\n\t\ti=Math.sqrt((C1.getx()-C2.getx())*(C1.getx()-C2.getx())+(C1.gety()-C2.gety())*(C1.gety()-C2.gety()));\n\t\tif(i>C1.getr()+C2.getr())    \n\t\t\tSystem.out.println(4);\n\t\telse if(i==Math.abs(C1.getr()+C2.getr()))    \n\t\t\tSystem.out.println(3);\n\t\telse if(i>Math.abs(C1.getr()-C2.getr())&&i<C1.getr()+C2.getr())   \n\t\t\tSystem.out.println(2);\n\t\telse if(i==Math.abs(C1.getr()-C2.getr()))     \n\t\t\tSystem.out.println(1);\n\t\telse             \n\t\t\tSystem.out.println(0);\n\t}\n}\n"
  },
  {
    "language": "Java",
    "code": "public class Main {\n\tpublic static void main(String args[]){\n\t\tint cx1, cy1, r1;\n\t\tint cx2, cy2, r2;\n\t\t\n\t\tif(args.length != 0){\n\t\t\tcx1 = Integer.valueOf(args[0]);\n\t\t\tcy1 = Integer.valueOf(args[1]);\n\t\t\tr1 = Integer.valueOf(args[2]);\n\t\t\tcx2 = Integer.valueOf(args[3]);\n\t\t\tcy2 = Integer.valueOf(args[4]);\n\t\t\tr2 = Integer.valueOf(args[5]);\n\t\t\t\n\t\t\tint l = (int)(Math.pow(cx1 - cx2, 2) + Math.pow(cy1 - cy2, 2));\n\t\t\tint rlen = r1+r2;\n\t\t\tint revlen = r1 - r2;\n\t\t\telse if(l > rlen*rlen) \n\t\t\t\tSystem.out.println(\"4\");\n\t\t\telse if(l == rlen*rlen) \n\t\t\t\tSystem.out.println(\"3\");\n\t\t\telse if(l < rlen*rlen) {\n\t\t\t\tif(l > revlen*revlen)\n\t\t\t\t\tSystem.out.println(\"2\");\n\t\t\t\telse if(l == revlen*revlen)\n\t\t\t\t\tSystem.out.println(\"1\");\n\t\t\t\telse if(l < revlen*revlen)\n\t\t\t\t\tSystem.out.println(\"0\");\n\t\t\t}\n\t\t}\n\t\telse System.out.println(\"Input doesn't be exist\");\n\t}\t\n}\n\n"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\nclass problemA{\n\n  void solve(){\n    int c1x=0, c1y=0, c1r=0;\n    int c2x=0, c2y=0, c2r=0;\n    int length = 0;//length of between center coordinate of c1 and c2\n    int large = 0, small = 0;\n\n    Scanner scan = new Scanner(System.in);\n    c1x = scan.nextInt();\n    c1y = scan.nextInt();\n    c1r = scan.nextInt();\n\n    c2x = scan.nextInt();\n    c2y = scan.nextInt();\n    c2r = scan.nextInt();\n\n    large = c1r;\n    small = c2r;\n    if(large < small){\n      large = c2r;\n      small = c1r;\n    }\n\n    length = (int)(Math.sqrt((c2x-c1x)*(c2x-c1x) + (c2y-c1y)*(c2y-c1y)));\n\n    if(length > (c1r + c2r)) System.out.println(\"4\");\n    else if (length < (c1r + c2r)){\n        if(large == (length + small)) System.out.println(\"1\");\n        else if(large > (length + small))System.out.println(\"0\");\n        else System.out.println(\"2\");\n    }\n    else System.out.println(\"3\");\n  }\n}\n\npublic class Main{\n  public static void main(String[] args){\n    new problemA().solve();\n  }\n}\n\n"
  },
  {
    "language": "Java",
    "code": "public class Main {\n\tpublic static void main(String args[]){\n\t\tdouble cx1, cy1, r1;\n\t\tdouble cx2, cy2, r2;\n\t\t\n\t\t\tcx1 = Double.valueOf(args[0]);\n\t\t\tcy1 = Double.valueOf(args[1]);\n\t\t\tr1 = Double.valueOf(args[2]);\n\t\t\tcx2 = Double.valueOf(args[3]);\n\t\t\tcy2 = Double.valueOf(args[4]);\n\t\t\tr2 = Double.valueOf(args[5]);\n\t\t\t\n\t\t\tdouble l = (Math.pow(cx1 - cx2, 2) + Math.pow(cy1 - cy2, 2));\n\t\t\tdouble rlen = r1+r2;\n\t\t\tdouble revlen = r1 - r2;\n\t\t\tif(l > rlen*rlen) \n\t\t\t\tSystem.out.println(\"4\");\n\t\t\telse if(l == rlen*rlen) \n\t\t\t\tSystem.out.println(\"3\");\n\t\t\telse if(l < rlen*rlen) {\n\t\t\t\tif(l > revlen*revlen)\n\t\t\t\t\tSystem.out.println(\"2\");\n\t\t\t\telse if(l == revlen*revlen)\n\t\t\t\t\tSystem.out.println(\"1\");\n\t\t\t\telse if(l < revlen*revlen)\n\t\t\t\t\tSystem.out.println(\"0\");\n\t\t\t}\n\t\t\n\t}\t\n}\n\n"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.Scanner;\n\npublic class Main {\n\n\t\tpublic static void main(String args[]) throws IOException{\n\t\t\tScanner scan = new Scanner(System.in);\n\n\t\t\tdouble cx1, cy1, r1;\n\t\t\tdouble cx2, cy2, r2;\n\t\t\t\n\t\t\t//if(args.length != 0){\n\t\t\t\tcx1 = scan.nextDouble();\n\t\t\t\tcy1 = scan.nextDouble();\n\t\t\t\tr1 = scan.nextDouble();\n\t\t\t\tcx2 = scan.nextDouble();\n\t\t\t\tcy2 = scan.nextDouble();\n\t\t\t\tr2 = scan.nextDouble();\n\t\t\t\t\n\t\t\t\tdouble l = (Math.pow(cx1 - cx2, 2) + Math.pow(cy1 - cy2, 2));\n\t\t\t\tdouble rlen = r1+r2;\n\t\t\t\tdouble revlen = r1 - r2;\n\t\t\t\tif(l > rlen*rlen) \n\t\t\t\t\tSystem.out.println(\"4\");\n\t\t\t\telse if(l == rlen*rlen) \n\t\t\t\t\tSystem.out.println(\"3\");\n\t\t\t\telse if(l < rlen*rlen) {\n\t\t\t\t\tif(l > revlen*revlen)\n\t\t\t\t\t\tSystem.out.println(\"2\");\n\t\t\t\t\telse if(l == revlen*revlen)\n\t\t\t\t\t\tSystem.out.println(\"1\");\n\t\t\t\t\telse if(l < revlen*revlen)\n\t\t\t\t\t\tSystem.out.println(\"0\");\n\t\t\t\t}\n\t\t\t//}\n\t\t\t\tscan.close();\n\t\t\t//else System.out.println(\"Input doesn't be exist\");\n\t\t}\t\n\t}\n"
  },
  {
    "language": "Java",
    "code": "import java.util.HashMap;\nimport java.util.Scanner;\n\n/**\n * Circles - Intersection\n * http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_7_A\n * \n * @author Ayaka\n *\n */\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\t// 1. ???1,???2???Map?????????\n\t\tHashMap<String, Double> circleMap1 = createCircleMap();\n\t\tHashMap<String, Double> circleMap2 = createCircleMap();\n\t\t\n\t\t// 2. ??????????????????\n\t\tint result = judge(circleMap1, circleMap2);\n\t\t\n\t\t// 3. ??¨???\n\t\tSystem.out.println(String.valueOf(result));\n\t}\n\t\n\t/**\n\t * ??????Map???????????????\n\t * \n\t * @return\n\t */\n\tprivate static HashMap<String, Double> createCircleMap() {\n\t\t// 1. ??\\??????(x,y,r)??????\n\t\tScanner scan = new Scanner(System.in);\n\t\tdouble cx = scan.nextInt();\n\t\tdouble cy = scan.nextInt();\n\t\tdouble cr = scan.nextInt();\n\t\t\n\t\t// 2. Map??????\n\t\t// memo:\n\t\t// ???x,y,r,????????§?¨?(x????????§?????¨????°???????y????????§?????¨????°????)???Map????????????\n\t\tHashMap<String, Double> circleMap = new HashMap<String, Double>();\n\t\tcircleMap.put(\"cx\", cx);\n\t\tcircleMap.put(\"cy\", cy);\n\t\tcircleMap.put(\"cr\", cr);\n\n\t\treturn circleMap;\n\t}\n\n\t/**\n\t * ???????????????????????????\n\t * \n\t * @param circleMap1 ???1???Map\n\t * @param circleMap2 ???2???Map\n\t * @return ??±?????\\????????°\n\t */\n\tprivate static int judge(HashMap<String, Double> circleMap1, HashMap<String, Double> circleMap2){\n\t\t// ???1\n\t\tdouble cx1 = circleMap1.get(\"cx\");\n\t\tdouble cy1 = circleMap1.get(\"cy\");\n\t\tdouble cr1 = circleMap1.get(\"cr\");\n\t\t\n\t\t// ???2\n\t\tdouble cx2 = circleMap2.get(\"cx\");\n\t\tdouble cy2 = circleMap2.get(\"cy\");\n\t\tdouble cr2 = circleMap2.get(\"cr\");\n\t\t\n\t\t// ???1??????????????¨???2?????????????????????????????¢\n\t\tdouble dis2 = Math.pow(cx2-cx1, 2) + Math.pow(cy2-cy1, 2);\t// dis^2 = (x2-x1)^2 + (y2-y1)^2\n\t\tdouble dis = Math.sqrt(dis2);\t// dis^2????????????\n\t\t\n\t\tif (dis > cr1+cr2) {\n\t\t\t// ??±?????\\???4\n\t\t\treturn 4;\n\t\t} else if (dis == cr1+cr2) {\n\t\t\t// ??±?????\\???3 \n\t\t\treturn 3;\n\t\t} else if (dis == Math.abs(cr1-cr2)) {\t// dis == |cr1-cr2|\n\t\t\t// ??±?????\\???1 \n\t\t\treturn 1;\n\t\t} else if (dis < Math.abs(cr1-cr2)) {\n\t\t\t// ??±?????\\???0 \n\t\t\treturn 0;\n\t\t} else {\n\t\t\t// ??±?????\\???2 \n\t\t\treturn 2;\n\t\t}\n\t}\n\t\n\t\n}"
  },
  {
    "language": "Java",
    "code": "\npublic class Main {\n\tpublic static void main(String args[]){\n\t\tint cx1, cy1, r1;\n\t\tint cx2, cy2, r2;\n\t\t\n\t\tif(args.length != 0){\n\t\t\tcx1 = Integer.valueOf(args[0]);\n\t\t\tcy1 = Integer.valueOf(args[1]);\n\t\t\tr1 = Integer.valueOf(args[2]);\n\t\t\tcx2 = Integer.valueOf(args[3]);\n\t\t\tcy2 = Integer.valueOf(args[4]);\n\t\t\tr2 = Integer.valueOf(args[5]);\n\t\t\t\n\t\t\tint l = (int)(Math.pow(cx1 - cx2, 2) + Math.pow(cy1 - cy2, 2));\n\t\t\tint rlen = r1+r2;\n\t\t\tint revlen = r1 - r2;\n\t\t\tif(l > rlen*rlen) \n\t\t\t\tSystem.out.println(\"4\");\n\t\t\telse if(l == rlen*rlen) \n\t\t\t\tSystem.out.println(\"3\");\n\t\t\telse if(l < rlen*rlen) {\n\t\t\t\tif(l > revlen*revlen)\n\t\t\t\t\tSystem.out.println(\"2\");\n\t\t\t\telse if(l == revlen*revlen)\n\t\t\t\t\tSystem.out.println(\"1\");\n\t\t\t\telse if(l < revlen*revlen)\n\t\t\t\t\tSystem.out.println(\"0\");\n\t\t\t}\n\t\t}\n\t\telse System.out.println(\"Input doesn't be exist\");\n\t}\t\n}\n\n"
  },
  {
    "language": "Java",
    "code": "import java.io.*;\nimport java.util.*;\n\nclass Main {\n  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    int c1x = sc.nextInt();\n    int c1y = sc.nextInt();\n    int c1r = sc.nextInt();\n    int c2x = sc.nextInt();\n    int c2y = sc.nextInt();\n    int c2r = sc.nextInt();\n\n    int diffX = Math.abs(c1x - c2x);\n    int diffY = Math.abs(c1y - c2y);\n    int xyR = c1r + c2r;\n    int right1X = c1x + c1r;\n    int left1X = c1x - c1r;\n    int right2X = c2x + c2r;\n    int left2X = c2x - c2r;\n    int top1Y = c1y + c1r;\n    int bottom1Y = c1y - c1r;\n    int top2Y = c2y + c2r;\n    int bottom2Y = c2y - c2r;\n\n    if((c1x == c2x) && (c1y == c2y) && (c1r == c2r)) {\n      System.out.println(0);\n    } else if(c1x == c2x) {\n      if(diffY == xyR) { //外接\n        System.out.println(3);\n      } else if(diffY > xyR) { // 離れ\n        System.out.println(4);\n      } else {\n        if(((top1Y < top2Y) && (bottom1Y > bottom2Y)) ||\n        ((top1Y > top2Y) && (bottom1Y < bottom2Y))) { // 内包\n          System.out.println(0);\n        } else if(((top1Y <= top2Y) || (bottom1Y >= bottom2Y)) &&\n        ((top1Y >= top2Y) || (bottom1Y <= bottom2Y))) { // 内接\n          System.out.println(1);\n        } else System.out.println(2); // 交わる\n      }\n    } else if(c1y == c2y) {\n      if(diffX == xyR) { //外接\n        System.out.println(3);\n      } else if(diffX > xyR) { // 離れ\n        System.out.println(4);\n      } else {\n        if(((right1X < right2X) && (left1X > left2X)) ||\n        ((right1X > right2X) && (left1X < left2X))) { // 内包\n          System.out.println(0);\n        } else if(((right1X <= right2X) || (left1X <= left2X)) &&\n        ((right1X >= right2X) || (left1X >= left2X))) { // 内接\n          System.out.println(1);\n        } else System.out.println(2); // 交わる\n      }\n    //} else if((c1x != c2x) || (c1y != c2y)) {\n    } else {\n      double d = Math.sqrt(diffX*diffX + diffY*diffY);\n      if(d > xyR) { //離れ\n        System.out.println(4);\n      } else {\n        if((((right1X < right2X) && (left1X > left2X)) && ((top1Y < top2Y) && (bottom1Y > bottom2Y))) ||\n        (((right1X > right2X) && (left1X < left2X)) && ((top1Y > top2Y) && (bottom1Y < bottom2Y)))) { // 内包\n          System.out.println(0);\n        } else if((((right1X <= right2X) || (left1X >= left2X)) && ((top1Y <= top2Y) || (bottom1Y >= bottom2Y))) ||\n        (((right1X >= right2X) || (left1X <= left2X)) && ((top1Y >= top2Y) || (bottom1Y <= bottom2Y)))) { // 内接\n          System.out.println(1);\n        } else System.out.println(2); // 交わる\n      }\n    }\n  }\n}\n"
  },
  {
    "language": "Java",
    "code": "import java.io.*;\n\nclass Main {\n  public static void main(String[] args) throws IOException {\n    InputStreamReader is = new InputStreamReader(System.in);\n    BufferedReader br = new BufferedReader(is);\n\n    String c1Line = br.readLine();\n    String c2Line = br.readLine();\n\n    String[] c1Array = c1Line.split(\" \", 0);\n    String[] c2Array = c2Line.split(\" \", 0);\n\n    int c1x = Integer.parseInt(c1Array[0]);\n    int c1y = Integer.parseInt(c1Array[1]);\n    int c1r = Integer.parseInt(c1Array[2]);\n\n    int c2x = Integer.parseInt(c2Array[0]);\n    int c2y = Integer.parseInt(c2Array[1]);\n    int c2r = Integer.parseInt(c2Array[2]);\n\n    int diffX = Math.abs(c1x - c2x);\n    int diffY = Math.abs(c1y - c2y);\n    int xyR = c1r + c2r;\n    int right1X = c1x + c1r;\n    int left1X = c1x - c1r;\n    int right2X = c2x + c2r;\n    int left2X = c2x - c2r;\n\n    int top1Y = c1y + c1r;\n    int bottom1Y = c1y - c1r;\n    int top2Y = c2y + c2r;\n    int bottom2Y = c2y - c2r;\n\n    if(c1x == c2x) {\n      if(diffY == xyR) { //外接\n        System.out.println(3);\n      } else if(diffY > xyR) { // 離れ\n        System.out.println(4);\n      } else {\n        if(((top1Y < top2Y) && (bottom1Y > bottom2Y)) ||\n        ((top1Y > top2Y) && (bottom1Y < bottom2Y))) { // 内包\n          System.out.println(0);\n        } else if(((top1Y < top2Y) || (bottom1Y > bottom2Y)) &&\n        ((top1Y > top2Y) || (bottom1Y < bottom2Y))) { // 内接\n          System.out.println(1);\n        } else System.out.println(2); // 交わる\n      }\n    } else if(c1y == c2y) {\n      if(diffX == xyR) { //外接\n        System.out.println(3);\n      } else if(diffX > xyR) { // 離れ\n        System.out.println(4);\n      } else {\n        if(((right1X < right2X) && (left1X > left2X)) ||\n        ((right1X > right2X) && (left1X < left2X))) { // 内包\n          System.out.println(0);\n        } else if(((right1X <= right2X) || (left1X <= left2X)) &&\n        ((right1X >= right2X) || (left1X >= left2X))) { // 内接\n          System.out.println(1);\n        } else System.out.println(2); // 交わる\n      }\n    } else if((c1x != c2x) || (c1y != c2y)) {\n      double d = Math.sqrt(diffX*diffX + diffY*diffY);\n      if(d > xyR) { //離れ\n        System.out.println(4);\n      } else {\n        if((((right1X < right2X) && (left1X > left2X)) && ((top1Y < top2Y) && (bottom1Y > bottom2Y))) ||\n        (((right1X > right2X) && (left1X < left2X)) && ((top1Y > top2Y) && (bottom1Y < bottom2Y)))) { // 内包\n          System.out.println(0);\n        } else if((((right1X <= right2X) || (left1X >= left2X)) && ((top1Y <= top2Y) || (bottom1Y >= bottom2Y))) ||\n        (((right1X >= right2X) || (left1X <= left2X)) && ((top1Y >= top2Y) || (bottom1Y <= bottom2Y)))) { // 内接\n          System.out.println(1);\n        } else System.out.println(2); // 交わる\n      }\n    }\n  }\n}\n"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\npublic class problemA{\n\n  public static void main(String[] args){\n    int c1x=0, c1y=0, c1r=0;\n    int c2x=0, c2y=0, c2r=0;\n    int length = 0;//length of between center coordinate of c1 and c2\n    int large = 0, small = 0;\n\n    Scanner scan = new Scanner(System.in);\n    c1x = scan.nextInt();\n    c1y = scan.nextInt();\n    c1r = scan.nextInt();\n\n    c2x = scan.nextInt();\n    c2y = scan.nextInt();\n    c2r = scan.nextInt();\n\n    large = c1r;\n    small = c2r;\n    if(large < small){\n      large = c2r;\n      small = c1r;\n    }\n\n    length = (int)(Math.sqrt((c2x-c1x)*(c2x-c1x) + (c2y-c1y)*(c2y-c1y)));\n\n    if(length > (c1r + c2r)) System.out.println(\"4\");\n    else if (length < (c1r + c2r)){\n        if(large == (length + small)) System.out.println(\"1\");\n        else if(large > (length + small))System.out.println(\"0\");\n        else System.out.println(\"2\");\n    }\n    else System.out.println(\"3\");\n  }\n}\n\n"
  },
  {
    "language": "Java",
    "code": "\npublic class Main {\n\tpublic static void main(String args[]){\n\t\tint cx1, cy1, r1;\n\t\tint cx2, cy2, r2;\n\t\t\n\t\tif(args.length != 0){\n\t\t\tcx1 = Integer.valueOf(args[0]);\n\t\t\tcy1 = Integer.valueOf(args[1]);\n\t\t\tr1 = Integer.valueOf(args[2]);\n\t\t\tcx2 = Integer.valueOf(args[3]);\n\t\t\tcy2 = Integer.valueOf(args[4]);\n\t\t\tr2 = Integer.valueOf(args[5]);\n\t\t\t\n\t\t\tint l = (int) Math.sqrt(Math.pow(cx1 - cx2, 2) + Math.pow(cy1 - cy2, 2));\n\t\t\tif(l > (r1+r2)) \n\t\t\t\tSystem.out.println(\"4\");\n\t\t\telse if(l == (r1+r2)) \n\t\t\t\tSystem.out.println(\"3\");\n\t\t\telse if(l < (r1+r2)) {\n\t\t\t\tif(r1 > r2){\n\t\t\t\t    \n\t\t\t\tif(l > (r1-r2))\n\t\t\t\t\tSystem.out.println(\"2\");\n\t\t\t\telse if(l == (r1-r2))\n\t\t\t\t\tSystem.out.println(\"1\");\n\t\t\t\telse if(l < (r1-r2))\n\t\t\t\t\tSystem.out.println(\"0\");\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t    if(l > (r2-r1))\n\t\t\t\t\tSystem.out.println(\"2\");\n\t\t\t\telse if(l == (r2-r1))\n\t\t\t\t\tSystem.out.println(\"1\");\n\t\t\t\telse if(l < (r2-r1))\n\t\t\t\t\tSystem.out.println(\"0\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse System.out.println(\"Input doesn't be exist\");\n\t}\t\n}\n\n"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\npublic class week01_A {\n\tpublic static void main(String args[]) throws IOException{\n\t\tBufferedReader buffer = new BufferedReader(new InputStreamReader(System.in));\n\n\t\tdouble cx1, cy1, r1;\n\t\tdouble cx2, cy2, r2;\n\t\t\n\t\t//if(args.length != 0){\n\t\t\tcx1 = Double.valueOf(buffer.read());\n\t\t\tcy1 = Double.valueOf(buffer.read());\n\t\t\tr1 = Double.valueOf(buffer.read());\n\t\t\tcx2 = Double.valueOf(buffer.read());\n\t\t\tcy2 = Double.valueOf(buffer.read());\n\t\t\tr2 = Double.valueOf(buffer.read());\n\t\t\t\n\t\t\tdouble l = (Math.pow(cx1 - cx2, 2) + Math.pow(cy1 - cy2, 2));\n\t\t\tdouble rlen = r1+r2;\n\t\t\tdouble revlen = r1 - r2;\n\t\t\tif(l > rlen*rlen) \n\t\t\t\tSystem.out.println(\"4\");\n\t\t\telse if(l == rlen*rlen) \n\t\t\t\tSystem.out.println(\"3\");\n\t\t\telse if(l < rlen*rlen) {\n\t\t\t\tif(l > revlen*revlen)\n\t\t\t\t\tSystem.out.println(\"2\");\n\t\t\t\telse if(l == revlen*revlen)\n\t\t\t\t\tSystem.out.println(\"1\");\n\t\t\t\telse if(l < revlen*revlen)\n\t\t\t\t\tSystem.out.println(\"0\");\n\t\t\t}\n\t\t//}\n\t\t//else System.out.println(\"Input doesn't be exist\");\n\t}\t\n}\n\n\n"
  },
  {
    "language": "Java",
    "code": "import java.io.*;\n\npublic class ProblemA {\n  public static void main(String[] args) throws IOException {\n    InputStreamReader is = new InputStreamReader(System.in);\n    BufferedReader br = new BufferedReader(is);\n\n    String c1Line = br.readLine();\n    String c2Line = br.readLine();\n\n    String[] c1Array = c1Line.split(\" \", 0);\n    String[] c2Array = c2Line.split(\" \", 0);\n\n    int c1x = Integer.parseInt(c1Array[0]);\n    int c1y = Integer.parseInt(c1Array[1]);\n    int c1r = Integer.parseInt(c1Array[2]);\n\n    int c2x = Integer.parseInt(c2Array[0]);\n    int c2y = Integer.parseInt(c2Array[1]);\n    int c2r = Integer.parseInt(c2Array[2]);\n\n    int diffX = Math.abs(c1x - c2x);\n    int diffY = Math.abs(c1y - c2y);\n    int xyR = c1r + c2r;\n    int right1X = c1x + c1r;\n    int left1X = c1x - c1r;\n    int right2X = c2x + c2r;\n    int left2X = c2x - c2r;\n\n    int top1Y = c1y + c1r;\n    int bottom1Y = c1y - c1r;\n    int top2Y = c2y + c2r;\n    int bottom2Y = c2y - c2r;\n\n    if(c1x == c2x) {\n      if(diffY == xyR) { //外接\n        System.out.println(3);\n      } else if(diffY > xyR) { // 離れ\n        System.out.println(4);\n      } else {\n        if(((top1Y < top2Y) && (bottom1Y > bottom2Y)) ||\n        ((top1Y > top2Y) && (bottom1Y < bottom2Y))) { // 内包\n          System.out.println(0);\n        } else if(((top1Y < top2Y) || (bottom1Y > bottom2Y)) &&\n        ((top1Y > top2Y) || (bottom1Y < bottom2Y))) { // 内接\n          System.out.println(1);\n        } else System.out.println(2); // 交わる\n      }\n    } else if(c1y == c2y) {\n      if(diffX == xyR) { //外接\n        System.out.println(3);\n      } else if(diffX > xyR) { // 離れ\n        System.out.println(4);\n      } else {\n        if(((right1X < right2X) && (left1X > left2X)) ||\n        ((right1X > right2X) && (left1X < left2X))) { // 内包\n          System.out.println(0);\n        } else if(((right1X <= right2X) || (left1X <= left2X)) &&\n        ((right1X >= right2X) || (left1X >= left2X))) { // 内接\n          System.out.println(1);\n        } else System.out.println(2); // 交わる\n      }\n    } else if((c1x != c2x) || (c1y != c2y)) {\n      double d = Math.sqrt(diffX*diffX + diffY*diffY);\n      if(d > xyR) { //離れ\n        System.out.println(4);\n      } else {\n        if((((right1X < right2X) && (left1X > left2X)) && ((top1Y < top2Y) && (bottom1Y > bottom2Y))) ||\n        (((right1X > right2X) && (left1X < left2X)) && ((top1Y > top2Y) && (bottom1Y < bottom2Y)))) { // 内包\n          System.out.println(0);\n        } else if((((right1X <= right2X) || (left1X >= left2X)) && ((top1Y <= top2Y) || (bottom1Y >= bottom2Y))) ||\n        (((right1X >= right2X) || (left1X <= left2X)) && ((top1Y >= top2Y) || (bottom1Y <= bottom2Y)))) { // 内接\n          System.out.println(1);\n        } else System.out.println(2); // 交わる\n      }\n    }\n  }\n}\n\n"
  },
  {
    "language": "Java",
    "code": "import java.util.HashMap;\nimport java.util.Scanner;\n\n/**\n * Circles - Intersection\n * http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_7_A\n * \n * @author Ayaka\n *\n */\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tHashMap<String, Double> circleMap1 = createCircleMap();\n\t\tHashMap<String, Double> circleMap2 = createCircleMap();\n\t\t\n\t\tint result = judge(circleMap1, circleMap2);\n\t\t\n\t\tSystem.out.println(String.valueOf(result));\n\t}\n\t\n\tprivate static HashMap<String, Double> createCircleMap() {\n\n\t\tScanner scan = new Scanner(System.in);\n\t\tdouble cx = scan.nextInt();\n\t\tdouble cy = scan.nextInt();\n\t\tdouble cr = scan.nextInt();\n\t\t\n\t\tHashMap<String, Double> circleMap = new HashMap<String, Double>();\n\t\tcircleMap.put(\"cx\", cx);\n\t\tcircleMap.put(\"cy\", cy);\n\t\tcircleMap.put(\"cr\", cr);\n\n\t\treturn circleMap;\n\t}\n\n\tprivate static int judge(HashMap<String, Double> circleMap1, HashMap<String, Double> circleMap2){\n\t\tdouble cx1 = circleMap1.get(\"cx\");\n\t\tdouble cy1 = circleMap1.get(\"cy\");\n\t\tdouble cr1 = circleMap1.get(\"cr\");\n\t\t\n\t\tdouble cx2 = circleMap2.get(\"cx\");\n\t\tdouble cy2 = circleMap2.get(\"cy\");\n\t\tdouble cr2 = circleMap2.get(\"cr\");\n\t\t\n\t\tdouble dis2 = Math.pow(cx2-cx1, 2) + Math.pow(cy2-cy1, 2);\t// dis^2 = (x2-x1)^2 + (y2-y1)^2\n\t\tdouble dis = Math.sqrt(dis2);\t\n\t\t\n\t\tif (dis > cr1+cr2) {\n\t\t\treturn 4;\n\t\t} else if (dis == cr1+cr2) {\n\t\t\treturn 3;\n\t\t} else if (dis == Math.abs(cr1-cr2)) {\t// dis == |cr1-cr2|\n\t\t\treturn 1;\n\t\t} else if (dis < Math.abs(cr1-cr2)) {\n\t\t\treturn 0;\n\t\t} else {\n\t\t\treturn 2;\n\t\t}\n\t}\n\t\n\t\n}"
  },
  {
    "language": "Java",
    "code": "public class Main {\n\tpublic static void main(String args[]){\n\t\tdouble cx1, cy1, r1;\n\t\tdouble cx2, cy2, r2;\n\t\t\n\t\t\tcx1 = Double.valueOf(args[0]);\n\t\t\tcy1 = Double.valueOf(args[1]);\n\t\t\tr1 = Double.valueOf(args[2]);\n\t\t\tcx2 = Double.valueOf(args[3]);\n\t\t\tcy2 = Double.valueOf(args[4]);\n\t\t\tr2 = Double.valueOf(args[5]);\n\t\t\t\n\t\t\tdouble l = (Math.pow(cx1 - cx2, 2) + Math.pow(cy1 - cy2, 2));\n\t\t\tdouble rlen = r1+r2;\n\t\t\tdouble revlen = r1 - r2;\n\t\t\tif(l > rlen*rlen) \n\t\t\t\tSystem.out.println(\"4\");\n\t\t\telse if(l == rlen*rlen) \n\t\t\t\tSystem.out.println(\"3\");\n\t\t\telse if(l < rlen*rlen) {\n\t\t\t\tif(l > revlen*revlen)\n\t\t\t\t\tSystem.out.println(\"2\");\n\t\t\t\telse if(l == revlen*revlen)\n\t\t\t\t\tSystem.out.println(\"1\");\n\t\t\t\telse if(l < revlen*revlen)\n\t\t\t\t\tSystem.out.println(\"0\");\n\t\t\t}\n\t}\t\n}\n\n"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.Scanner;\n\npublic class Main {\n\n\t\tpublic static void main(String args[]) throws IOException{\n\t\t\tScanner scan = new Scanner(System.in);\n\n\t\t\tdouble cx1, cy1, r1;\n\t\t\tdouble cx2, cy2, r2;\n\t\t\t\n\t\t\t//if(args.length != 0){\n\t\t\t\tcx1 = scan.nextDouble();\n\t\t\t\tcy1 = scan.nextDouble();\n\t\t\t\tr1 = scan.nextDouble();\n\t\t\t\tcx2 = scan.nextDouble();\n\t\t\t\tcy2 = scan.nextDouble();\n\t\t\t\tr2 = scan.nextDouble();\n\t\t\t\t\n\t\t\t\tdouble l = (Math.pow(cx1 - cx2, 2) + Math.pow(cy1 - cy2, 2));\n\t\t\t\tdouble rlen = r1+r2;\n\t\t\t\tdouble revlen = r1 - r2;\n\t\t\t\tif(l > rlen*rlen) \n\t\t\t\t\tSystem.out.println(\"4\");\n\t\t\t\telse if(l == rlen*rlen) \n\t\t\t\t\tSystem.out.println(\"3\");\n\t\t\t\telse if(l < rlen*rlen) {\n\t\t\t\t\tif(l > revlen*revlen)\n\t\t\t\t\t\tSystem.out.println(\"2\");\n\t\t\t\t\telse if(l == revlen*revlen)\n\t\t\t\t\t\tSystem.out.println(\"1\");\n\t\t\t\t\telse if(l < revlen*revlen)\n\t\t\t\t\t\tSystem.out.println(\"0\");\n\t\t\t\t}\n\t\t\t//}\n\t\t\t\tscan.close();\n\t\t\t//else System.out.println(\"Input doesn't be exist\");\n\t\t}\t\n\t}\n"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int c1x = sc.nextInt();\n        int c1y = sc.nextInt();\n        int c1r = sc.nextInt();\n        int c2x = sc.nextInt();\n        int c2y = sc.nextInt();\n        int c2r = sc.nextInt();\n        int dx = c1x - c2x;\n        int dy = c1y - c2y;\n        int sum = c1r + c2r;\n        int diff = c1r - c2r;\n        int sumR = sum * sum;\n        int diffR = diff * diff;\n        int distance = dx * dx + dy * dy;\n        if (distance == diffR) {\n            System.out.println(1);\n        } else if (distance < diffR) {\n            System.out.println(0);\n        } else if (distance == sumR) {\n            System.out.println(3);\n        } else if (distance < sumR) {\n            System.out.println(2);\n        } else {\n            System.out.println(4);\n        }\n    }\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.HashMap;\nimport java.util.Scanner;\n\n/**\n * Circles - Intersection\n * http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_7_A\n * \n * @author Ayaka\n *\n */\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\t// 1. ???1,???2???Map?????????\n\t\tHashMap<String, Double> circleMap1 = createCircleMap();\n\t\tHashMap<String, Double> circleMap2 = createCircleMap();\n\t\t\n\t\t// 2. ??????????????????\n\t\tint result = judge(circleMap1, circleMap2);\n\t\t\n\t\t// 3. ??¨???\n\t\tSystem.out.println(String.valueOf(result));\n\t}\n\t\n\t/**\n\t * ??????Map???????????????\n\t * \n\t * @return\n\t */\n\tprivate static HashMap<String, Double> createCircleMap() {\n\t\t// 1. ??\\??????(x,y,r)??????\n\t\tScanner scan = new Scanner(System.in);\n\t\tdouble cx = scan.nextInt();\n\t\tdouble cy = scan.nextInt();\n\t\tdouble cr = scan.nextInt();\n\t\t\n\t\t// 2. Map??????\n\t\t// memo:\n\t\t// ???x,y,r,????????§?¨?(x????????§?????¨????°???????y????????§?????¨????°????)???Map????????????\n\t\tHashMap<String, Double> circleMap = new HashMap<String, Double>();\n\t\tcircleMap.put(\"cx\", cx);\n\t\tcircleMap.put(\"cy\", cy);\n\t\tcircleMap.put(\"cr\", cr);\n\n\t\treturn circleMap;\n\t}\n\n\t/**\n\t * ???????????????????????????\n\t * \n\t * @param circleMap1 ???1???Map\n\t * @param circleMap2 ???2???Map\n\t * @return ??±?????\\????????°\n\t */\n\tprivate static int judge(HashMap<String, Double> circleMap1, HashMap<String, Double> circleMap2){\n\t\t// ???1\n\t\tdouble cx1 = circleMap1.get(\"cx\");\n\t\tdouble cy1 = circleMap1.get(\"cy\");\n\t\tdouble cr1 = circleMap1.get(\"cr\");\n\t\t\n\t\t// ???2\n\t\tdouble cx2 = circleMap2.get(\"cx\");\n\t\tdouble cy2 = circleMap2.get(\"cy\");\n\t\tdouble cr2 = circleMap2.get(\"cr\");\n\t\t\n\t\t// ???1??????????????¨???2?????????????????????????????¢\n\t\tdouble dis2 = Math.pow(cx2-cx1, 2) + Math.pow(cy2-cy1, 2);\t// dis^2 = (x2-x1)^2 + (y2-y1)^2\n\t\tdouble dis = Math.sqrt(dis2);\t// dis^2????????????\n\t\tSystem.out.println(\"dis = \" + String.valueOf(dis));\n\t\tSystem.out.println(\"cr1+cr2 = \" + String.valueOf(cr1+cr2));\n\t\tSystem.out.println(\"|cr1-cr2| = \" + String.valueOf(Math.abs(cr1-cr2)));\n\t\t\n\t\tif (dis > cr1+cr2) {\n\t\t\t// ??±?????\\???4\n\t\t\treturn 4;\n\t\t} else if (dis == cr1+cr2) {\n\t\t\t// ??±?????\\???3 \n\t\t\treturn 3;\n\t\t} else if (dis == Math.abs(cr1-cr2)) {\t// dis == |cr1-cr2|\n\t\t\t// ??±?????\\???1 \n\t\t\treturn 1;\n\t\t} else if (dis < Math.abs(cr1-cr2)) {\n\t\t\t// ??±?????\\???0 \n\t\t\treturn 0;\n\t\t} else {\n\t\t\t// ??±?????\\???2 \n\t\t\treturn 2;\n\t\t}\n\t}\n\t\n\t\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.*;\nimport java.util.*;\n\nclass Main {\n  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    int c1x = sc.nextInt();\n    int c1y = sc.nextInt();\n    int c1r = sc.nextInt();\n    int c2x = sc.nextInt();\n    int c2y = sc.nextInt();\n    int c2r = sc.nextInt();\n\n    int diffX = Math.abs(c1x - c2x);\n    int diffY = Math.abs(c1y - c2y);\n    int xyR = c1r + c2r;\n    int right1X = c1x + c1r;\n    int left1X = c1x - c1r;\n    int right2X = c2x + c2r;\n    int left2X = c2x - c2r;\n    int top1Y = c1y + c1r;\n    int bottom1Y = c1y - c1r;\n    int top2Y = c2y + c2r;\n    int bottom2Y = c2y - c2r;\n\n    if(c1x == c2x) {\n      if(diffY == xyR) { //外接\n        System.out.println(3);\n      } else if(diffY > xyR) { // 離れ\n        System.out.println(4);\n      } else {\n        if(((top1Y < top2Y) && (bottom1Y > bottom2Y)) ||\n        ((top1Y > top2Y) && (bottom1Y < bottom2Y))) { // 内包\n          System.out.println(0);\n        } else if(((top1Y <= top2Y) || (bottom1Y >= bottom2Y)) &&\n        ((top1Y >= top2Y) || (bottom1Y <= bottom2Y))) { // 内接\n          System.out.println(1);\n        } else System.out.println(2); // 交わる\n      }\n    } else if(c1y == c2y) {\n      if(diffX == xyR) { //外接\n        System.out.println(3);\n      } else if(diffX > xyR) { // 離れ\n        System.out.println(4);\n      } else {\n        if(((right1X < right2X) && (left1X > left2X)) ||\n        ((right1X > right2X) && (left1X < left2X))) { // 内包\n          System.out.println(0);\n        } else if(((right1X <= right2X) || (left1X <= left2X)) &&\n        ((right1X >= right2X) || (left1X >= left2X))) { // 内接\n          System.out.println(1);\n        } else System.out.println(2); // 交わる\n      }\n    //} else if((c1x != c2x) || (c1y != c2y)) {\n    } else {\n      double d = Math.sqrt(diffX*diffX + diffY*diffY);\n      if(d > xyR) { //離れ\n        System.out.println(4);\n      } else {\n        if((((right1X < right2X) && (left1X > left2X)) && ((top1Y < top2Y) && (bottom1Y > bottom2Y))) ||\n        (((right1X > right2X) && (left1X < left2X)) && ((top1Y > top2Y) && (bottom1Y < bottom2Y)))) { // 内包\n          System.out.println(0);\n        } else if((((right1X <= right2X) || (left1X >= left2X)) && ((top1Y <= top2Y) || (bottom1Y >= bottom2Y))) ||\n        (((right1X >= right2X) || (left1X <= left2X)) && ((top1Y >= top2Y) || (bottom1Y <= bottom2Y)))) { // 内接\n          System.out.println(1);\n        } else System.out.println(2); // 交わる\n      }\n    }\n  }\n}\n"
  },
  {
    "language": "Java",
    "code": "import java.io.*;\nimport java.util.*;\n\nclass Main {\n  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    int c1x = sc.nextInt();\n    int c1y = sc.nextInt();\n    int c1r = sc.nextInt();\n    int c2x = sc.nextInt();\n    int c2y = sc.nextInt();\n    int c2r = sc.nextInt();\n\n    int diffX = Math.abs(c1x - c2x);\n    int diffY = Math.abs(c1y - c2y);\n    int xyR = c1r + c2r;\n    int right1X = c1x + c1r;\n    int left1X = c1x - c1r;\n    int right2X = c2x + c2r;\n    int left2X = c2x - c2r;\n\n    int top1Y = c1y + c1r;\n    int bottom1Y = c1y - c1r;\n    int top2Y = c2y + c2r;\n    int bottom2Y = c2y - c2r;\n\n/*\n    if(c1x == c2x) {\n      if(diffY == xyR) { //外接\n        System.out.println(3);\n      } else if(diffY > xyR) { // 離れ\n        System.out.println(4);\n      } else {\n        if(((top1Y < top2Y) && (bottom1Y > bottom2Y)) ||\n        ((top1Y > top2Y) && (bottom1Y < bottom2Y))) { // 内包\n          System.out.println(0);\n        } else if(((top1Y < top2Y) || (bottom1Y > bottom2Y)) &&\n        ((top1Y > top2Y) || (bottom1Y < bottom2Y))) { // 内接\n          System.out.println(1);\n        } else System.out.println(2); // 交わる\n      }\n    } else if(c1y == c2y) {\n      if(diffX == xyR) { //外接\n        System.out.println(3);\n      } else if(diffX > xyR) { // 離れ\n        System.out.println(4);\n      } else {\n        if(((right1X < right2X) && (left1X > left2X)) ||\n        ((right1X > right2X) && (left1X < left2X))) { // 内包\n          System.out.println(0);\n        } else if(((right1X <= right2X) || (left1X <= left2X)) &&\n        ((right1X >= right2X) || (left1X >= left2X))) { // 内接\n          System.out.println(1);\n        } else System.out.println(2); // 交わる\n      }\n    } else if((c1x != c2x) || (c1y != c2y)) {\n      double d = Math.sqrt(diffX*diffX + diffY*diffY);\n      if(d > xyR) { //離れ\n        System.out.println(4);\n      } else {\n        if((((right1X < right2X) && (left1X > left2X)) && ((top1Y < top2Y) && (bottom1Y > bottom2Y))) ||\n        (((right1X > right2X) && (left1X < left2X)) && ((top1Y > top2Y) && (bottom1Y < bottom2Y)))) { // 内包\n          System.out.println(0);\n        } else if((((right1X <= right2X) || (left1X >= left2X)) && ((top1Y <= top2Y) || (bottom1Y >= bottom2Y))) ||\n        (((right1X >= right2X) || (left1X <= left2X)) && ((top1Y >= top2Y) || (bottom1Y <= bottom2Y)))) { // 内接\n          System.out.println(1);\n        } else System.out.println(2); // 交わる\n      }\n    }*/\n  }\n}\n\n"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.Scanner;\n\npublic class Main {\n\n\t\tpublic static void main(String args[]) throws IOException{\n\t\t\tScanner scan = new Scanner(System.in);\n\n\t\t\tdouble cx1, cy1, r1;\n\t\t\tdouble cx2, cy2, r2;\n\t\t\t\n\t\t\t//if(args.length != 0){\n\t\t\t\tcx1 = scan.nextDouble();\n\t\t\t\tcy1 = scan.nextDouble();\n\t\t\t\tr1 = scan.nextDouble();\n\t\t\t\tcx2 = scan.nextDouble();\n\t\t\t\tcy2 = scan.nextDouble();\n\t\t\t\tr2 = scan.nextDouble();\n\t\t\t\t\n\t\t\t\tdouble l = (Math.pow(cx1 - cx2, 2) + Math.pow(cy1 - cy2, 2));\n\t\t\t\tdouble rlen = r1+r2;\n\t\t\t\tdouble revlen = r1 - r2;\n\t\t\t\tif(l > rlen*rlen) \n\t\t\t\t\tSystem.out.println(\"4\");\n\t\t\t\telse if(l == rlen*rlen) \n\t\t\t\t\tSystem.out.println(\"3\");\n\t\t\t\telse if(l < rlen*rlen) {\n\t\t\t\t\tif(l > revlen*revlen)\n\t\t\t\t\t\tSystem.out.println(\"2\");\n\t\t\t\t\telse if(l == revlen*revlen)\n\t\t\t\t\t\tSystem.out.println(\"1\");\n\t\t\t\t\telse if(l < revlen*revlen)\n\t\t\t\t\t\tSystem.out.println(\"0\");\n\t\t\t\t}\n\t\t\t//}\n\t\t\t\tscan.close();\n\t\t\t//else System.out.println(\"Input doesn't be exist\");\n\t\t}\t\n\t}\n\n\n"
  },
  {
    "language": "Java",
    "code": "\npublic class Main {\n\tpublic static void main(String args[]){\n\t\tdouble cx1, cy1, r1;\n\t\tdouble cx2, cy2, r2;\n\t\t\n\t\t\tcx1 = Double.valueOf(args[0]);\n\t\t\tcy1 = Double.valueOf(args[1]);\n\t\t\tr1 = Double.valueOf(args[2]);\n\t\t\tcx2 = Double.valueOf(args[3]);\n\t\t\tcy2 = Double.valueOf(args[4]);\n\t\t\tr2 = Double.valueOf(args[5]);\n\t\t\t\n\t\t\tdouble l = (Math.pow(cx1 - cx2, 2) + Math.pow(cy1 - cy2, 2));\n\t\t\tdouble rlen = r1+r2;\n\t\t\tdouble revlen = r1 - r2;\n\t\t\tif(l > rlen*rlen) \n\t\t\t\tSystem.out.println(\"4\");\n\t\t\telse if(l == rlen*rlen) \n\t\t\t\tSystem.out.println(\"3\");\n\t\t\telse if(l < rlen*rlen) {\n\t\t\t\tif(l > revlen*revlen)\n\t\t\t\t\tSystem.out.println(\"2\");\n\t\t\t\telse if(l == revlen*revlen)\n\t\t\t\t\tSystem.out.println(\"1\");\n\t\t\t\telse if(l < revlen*revlen)\n\t\t\t\t\tSystem.out.println(\"0\");\n\t\t\t}\n\t}\t\n}\n\n"
  },
  {
    "language": "Java",
    "code": "\npublic class Main {\n\tpublic static void main(String args[]){\n\t\tint cx1, cy1, r1;\n\t\tint cx2, cy2, r2;\n\t\t\n\t\tif(args.length != 0){\n\t\t\tcx1 = Integer.valueOf(args[0]);\n\t\t\tcy1 = Integer.valueOf(args[1]);\n\t\t\tr1 = Integer.valueOf(args[2]);\n\t\t\tcx2 = Integer.valueOf(args[3]);\n\t\t\tcy2 = Integer.valueOf(args[4]);\n\t\t\tr2 = Integer.valueOf(args[5]);\n\t\t\t\n\t\t\tint l = (int)(Math.pow(cx1 - cx2, 2) + Math.pow(cy1 - cy2, 2));\n\t\t\tint rlen = r1+r2;\n\t\t\tint revlen = r1 - r2;\n\t\t\tif(l == 0) System.out.println(\"1\");\n\t\t\telse if(l > rlen*rlen) \n\t\t\t\tSystem.out.println(\"4\");\n\t\t\telse if(l == rlen*rlen) \n\t\t\t\tSystem.out.println(\"3\");\n\t\t\telse if(l < rlen*rlen) {\n\t\t\t\tif(l > revlen*revlen)\n\t\t\t\t\tSystem.out.println(\"2\");\n\t\t\t\telse if(l == revlen*revlen)\n\t\t\t\t\tSystem.out.println(\"1\");\n\t\t\t\telse if(l < revlen*revlen)\n\t\t\t\t\tSystem.out.println(\"0\");\n\t\t\t}\n\t\t}\n\t\telse System.out.println(\"Input doesn't be exist\");\n\t}\t\n}\n\n"
  },
  {
    "language": "Java",
    "code": "class ProblemA {\n  public static void main(String[] args) throws IOException {\n    InputStreamReader is = new InputStreamReader(System.in);\n    BufferedReader br = new BufferedReader(is);\n\n    String c1Line = br.readLine();\n    String c2Line = br.readLine();\n\n    String[] c1Array = c1Line.split(\" \", 0);\n    String[] c2Array = c2Line.split(\" \", 0);\n\n    int c1x = Integer.parseInt(c1Array[0]);\n    int c1y = Integer.parseInt(c1Array[1]);\n    int c1r = Integer.parseInt(c1Array[2]);\n\n    int c2x = Integer.parseInt(c2Array[0]);\n    int c2y = Integer.parseInt(c2Array[1]);\n    int c2r = Integer.parseInt(c2Array[2]);\n\n    int diffX = Math.abs(c1x - c2x);\n    int diffY = Math.abs(c1y - c2y);\n    int xyR = c1r + c2r;\n    int right1X = c1x + c1r;\n    int left1X = c1x - c1r;\n    int right2X = c2x + c2r;\n    int left2X = c2x - c2r;\n\n    int top1Y = c1y + c1r;\n    int bottom1Y = c1y - c1r;\n    int top2Y = c2y + c2r;\n    int bottom2Y = c2y - c2r;\n\n    if(c1x == c2x) {\n      if(diffY == xyR) { //外接\n        System.out.println(3);\n      } else if(diffY > xyR) { // 離れ\n        System.out.println(4);\n      } else {\n        if(((top1Y < top2Y) && (bottom1Y > bottom2Y)) ||\n        ((top1Y > top2Y) && (bottom1Y < bottom2Y))) { // 内包\n          System.out.println(0);\n        } else if(((top1Y < top2Y) || (bottom1Y > bottom2Y)) &&\n        ((top1Y > top2Y) || (bottom1Y < bottom2Y))) { // 内接\n          System.out.println(1);\n        } else System.out.println(2); // 交わる\n      }\n    } else if(c1y == c2y) {\n      if(diffX == xyR) { //外接\n        System.out.println(3);\n      } else if(diffX > xyR) { // 離れ\n        System.out.println(4);\n      } else {\n        if(((right1X < right2X) && (left1X > left2X)) ||\n        ((right1X > right2X) && (left1X < left2X))) { // 内包\n          System.out.println(0);\n        } else if(((right1X <= right2X) || (left1X <= left2X)) &&\n        ((right1X >= right2X) || (left1X >= left2X))) { // 内接\n          System.out.println(1);\n        } else System.out.println(2); // 交わる\n      }\n    } else if((c1x != c2x) || (c1y != c2y)) {\n      double d = Math.sqrt(diffX*diffX + diffY*diffY);\n      if(d > xyR) { //離れ\n        System.out.println(4);\n      } else {\n        if((((right1X < right2X) && (left1X > left2X)) && ((top1Y < top2Y) && (bottom1Y > bottom2Y))) ||\n        (((right1X > right2X) && (left1X < left2X)) && ((top1Y > top2Y) && (bottom1Y < bottom2Y)))) { // 内包\n          System.out.println(0);\n        } else if((((right1X <= right2X) || (left1X >= left2X)) && ((top1Y <= top2Y) || (bottom1Y >= bottom2Y))) ||\n        (((right1X >= right2X) || (left1X <= left2X)) && ((top1Y >= top2Y) || (bottom1Y <= bottom2Y)))) { // 内接\n          System.out.println(1);\n        } else System.out.println(2); // 交わる\n      }\n    }\n  }\n}\n\n"
  },
  {
    "language": "Java",
    "code": "\npublic class week01_A {\n\tpublic static void main(String args[]){\n\t\tint cx1, cy1, r1;\n\t\tint cx2, cy2, r2;\n\t\t\n\t\tif(args.length != 0){\n\t\t\tcx1 = Integer.valueOf(args[0]);\n\t\t\tcy1 = Integer.valueOf(args[1]);\n\t\t\tr1 = Integer.valueOf(args[2]);\n\t\t\tcx2 = Integer.valueOf(args[3]);\n\t\t\tcy2 = Integer.valueOf(args[4]);\n\t\t\tr2 = Integer.valueOf(args[5]);\n\t\t\t\n\t\t\tint l = (int)(Math.pow(cx1 - cx2, 2) + Math.pow(cy1 - cy2, 2));\n\t\t\tint rlen = r1+r2;\n\t\t\tint revlen = r1 - r2;\n\t\t\tif(l > rlen*rlen) \n\t\t\t\tSystem.out.println(\"4\");\n\t\t\telse if(l == rlen*rlen) \n\t\t\t\tSystem.out.println(\"3\");\n\t\t\telse if(l < rlen*rlen) {\n\t\t\t\tif(l > revlen*revlen)\n\t\t\t\t\tSystem.out.println(\"2\");\n\t\t\t\telse if(l == revlen*revlen)\n\t\t\t\t\tSystem.out.println(\"1\");\n\t\t\t\telse if(l < revlen*revlen)\n\t\t\t\t\tSystem.out.println(\"0\");\n\t\t\t}\n\t\t}\n\t\telse System.out.println(\"Input doesn't be exist\");\n\t}\t\n}\n\n"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\npublic class Main {\n\tpublic static void main(String args[]) throws IOException{\n\t\tBufferedReader buffer = new BufferedReader(new InputStreamReader(System.in));\n\n\t\tdouble cx1, cy1, r1;\n\t\tdouble cx2, cy2, r2;\n\t\t\n\t\t//if(args.length != 0){\n\t\t\tcx1 = Double.valueOf(buffer.read());\n\t\t\tcy1 = Double.valueOf(buffer.read());\n\t\t\tr1 = Double.valueOf(buffer.read());\n\t\t\tcx2 = Double.valueOf(buffer.read());\n\t\t\tcy2 = Double.valueOf(buffer.read());\n\t\t\tr2 = Double.valueOf(buffer.read());\n\t\t\t\n\t\t\tdouble l = (Math.pow(cx1 - cx2, 2) + Math.pow(cy1 - cy2, 2));\n\t\t\tdouble rlen = r1+r2;\n\t\t\tdouble revlen = r1 - r2;\n\t\t\tif(l > rlen*rlen) \n\t\t\t\tSystem.out.println(\"4\");\n\t\t\telse if(l == rlen*rlen) \n\t\t\t\tSystem.out.println(\"3\");\n\t\t\telse if(l < rlen*rlen) {\n\t\t\t\tif(l > revlen*revlen)\n\t\t\t\t\tSystem.out.println(\"2\");\n\t\t\t\telse if(l == revlen*revlen)\n\t\t\t\t\tSystem.out.println(\"1\");\n\t\t\t\telse if(l < revlen*revlen)\n\t\t\t\t\tSystem.out.println(\"0\");\n\t\t\t}\n\t\t//}\n\t\t//else System.out.println(\"Input doesn't be exist\");\n\t}\t\n}\n\n\n"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.Scanner;\n\npublic class week01_A {\n\n\t\tpublic static void main(String args[]) throws IOException{\n\t\t\tScanner scan = new Scanner(System.in);\n\n\t\t\tdouble cx1, cy1, r1;\n\t\t\tdouble cx2, cy2, r2;\n\t\t\t\n\t\t\t//if(args.length != 0){\n\t\t\t\tcx1 = scan.nextDouble();\n\t\t\t\tcy1 = scan.nextDouble();\n\t\t\t\tr1 = scan.nextDouble();\n\t\t\t\tcx2 = scan.nextDouble();\n\t\t\t\tcy2 = scan.nextDouble();\n\t\t\t\tr2 = scan.nextDouble();\n\t\t\t\t\n\t\t\t\tdouble l = (Math.pow(cx1 - cx2, 2) + Math.pow(cy1 - cy2, 2));\n\t\t\t\tdouble rlen = r1+r2;\n\t\t\t\tdouble revlen = r1 - r2;\n\t\t\t\tif(l > rlen*rlen) \n\t\t\t\t\tSystem.out.println(\"4\");\n\t\t\t\telse if(l == rlen*rlen) \n\t\t\t\t\tSystem.out.println(\"3\");\n\t\t\t\telse if(l < rlen*rlen) {\n\t\t\t\t\tif(l > revlen*revlen)\n\t\t\t\t\t\tSystem.out.println(\"2\");\n\t\t\t\t\telse if(l == revlen*revlen)\n\t\t\t\t\t\tSystem.out.println(\"1\");\n\t\t\t\t\telse if(l < revlen*revlen)\n\t\t\t\t\t\tSystem.out.println(\"0\");\n\t\t\t\t}\n\t\t\t//}\n\t\t\t\tscan.close();\n\t\t\t//else System.out.println(\"Input doesn't be exist\");\n\t\t}\t\n\t}\n"
  },
  {
    "language": "Java",
    "code": "public class Main {\n\tpublic static void main(String args[]){\n\t\tdouble cx1, cy1, r1;\n\t\tdouble cx2, cy2, r2;\n\t\t\n\t\tif(args.length != 0){\n\t\t\tcx1 = Double.valueOf(args[0]);\n\t\t\tcy1 = Double.valueOf(args[1]);\n\t\t\tr1 = Double.valueOf(args[2]);\n\t\t\tcx2 = Double.valueOf(args[3]);\n\t\t\tcy2 = Double.valueOf(args[4]);\n\t\t\tr2 = Double.valueOf(args[5]);\n\t\t\t\n\t\t\tdouble l = (Math.pow(cx1 - cx2, 2) + Math.pow(cy1 - cy2, 2));\n\t\t\tdouble rlen = r1+r2;\n\t\t\tdouble revlen = r1 - r2;\n\t\t\tif(l > rlen*rlen) \n\t\t\t\tSystem.out.println(\"4\");\n\t\t\telse if(l == rlen*rlen) \n\t\t\t\tSystem.out.println(\"3\");\n\t\t\telse if(l < rlen*rlen) {\n\t\t\t\tif(l > revlen*revlen)\n\t\t\t\t\tSystem.out.println(\"2\");\n\t\t\t\telse if(l == revlen*revlen)\n\t\t\t\t\tSystem.out.println(\"1\");\n\t\t\t\telse if(l < revlen*revlen)\n\t\t\t\t\tSystem.out.println(\"0\");\n\t\t\t}\n\t\t}\n\t\telse System.out.println(\"Input doesn't be exist\");\n\t}\t\n}\n\n"
  },
  {
    "language": "Java",
    "code": "import java.io.*;\nimport java.util.*;\n\nclass Main {\n  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    int c1x = sc.nextInt();\n    int c1y = sc.nextInt();\n    int c1r = sc.nextInt();\n    int c2x = sc.nextInt();\n    int c2y = sc.nextInt();\n    int c2r = sc.nextInt();\n\n    int diffX = Math.abs(c1x - c2x);\n    int diffY = Math.abs(c1y - c2y);\n    int xyR = c1r + c2r;\n    int right1X = c1x + c1r;\n    int left1X = c1x - c1r;\n    int right2X = c2x + c2r;\n    int left2X = c2x - c2r;\n    int top1Y = c1y + c1r;\n    int bottom1Y = c1y - c1r;\n    int top2Y = c2y + c2r;\n    int bottom2Y = c2y - c2r;\n\n    if(c1x == c2x) {\n      if(diffY == xyR) { //外接\n        System.out.println(3);\n      } else if(diffY > xyR) { // 離れ\n        System.out.println(4);\n      } else {\n        if(((top1Y < top2Y) && (bottom1Y > bottom2Y)) ||\n        ((top1Y > top2Y) && (bottom1Y < bottom2Y))) { // 内包\n          System.out.println(0);\n        } else if(((top1Y < top2Y) || (bottom1Y > bottom2Y)) &&\n        ((top1Y > top2Y) || (bottom1Y < bottom2Y))) { // 内接\n          System.out.println(1);\n        } else System.out.println(2); // 交わる\n      }\n    } else if(c1y == c2y) {\n      if(diffX == xyR) { //外接\n        System.out.println(3);\n      } else if(diffX > xyR) { // 離れ\n        System.out.println(4);\n      } else {\n        if(((right1X < right2X) && (left1X > left2X)) ||\n        ((right1X > right2X) && (left1X < left2X))) { // 内包\n          System.out.println(0);\n        } else if(((right1X <= right2X) || (left1X <= left2X)) &&\n        ((right1X >= right2X) || (left1X >= left2X))) { // 内接\n          System.out.println(1);\n        } else System.out.println(2); // 交わる\n      }\n    //} else if((c1x != c2x) || (c1y != c2y)) {\n    } else {\n      double d = Math.sqrt(diffX*diffX + diffY*diffY);\n      if(d > xyR) { //離れ\n        System.out.println(4);\n      } else {\n        if((((right1X < right2X) && (left1X > left2X)) && ((top1Y < top2Y) && (bottom1Y > bottom2Y))) ||\n        (((right1X > right2X) && (left1X < left2X)) && ((top1Y > top2Y) && (bottom1Y < bottom2Y)))) { // 内包\n          System.out.println(0);\n        } else if((((right1X <= right2X) || (left1X >= left2X)) && ((top1Y <= top2Y) || (bottom1Y >= bottom2Y))) ||\n        (((right1X >= right2X) || (left1X <= left2X)) && ((top1Y >= top2Y) || (bottom1Y <= bottom2Y)))) { // 内接\n          System.out.println(1);\n        } else System.out.println(2); // 交わる\n      }\n    }\n  }\n}\n"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\nclass problemA{\n\n  void solve(){\n    int c1x=0, c1y=0, c1r=0;\n    int c2x=0, c2y=0, c2r=0;\n    int length = 0;//length of between center coordinate of c1 and c2\n    int large = 0, small = 0;\n\n    Scanner scan = new Scanner(System.in);\n    c1x = scan.nextInt();\n    c1y = scan.nextInt();\n    c1r = scan.nextInt();\n\n    c2x = scan.nextInt();\n    c2y = scan.nextInt();\n    c2r = scan.nextInt();\n\n    large = c1r;\n    small = c2r;\n    if(large < small){\n      large = c2r;\n      small = c1r;\n    }\n\n    length = (int)(Math.sqrt((c2x-c1x)*(c2x-c1x) + (c2y-c1y)*(c2y-c1y)));\n\n    if(length > (c1r + c2r)) System.out.println(\"4\");\n    else if (length < (c1r + c2r)){\n        if(large == (length + small)) System.out.println(\"1\");\n        else if(large > (length + small))System.out.println(\"0\");\n        else System.out.println(\"2\");\n    }\n    else System.out.println(\"3\");\n  }\n}\npublic class Main {\n  public static void main(String[] args){\n    new problemA().solve();\n  }\n}\n\n"
  },
  {
    "language": "Java",
    "code": "import java.io.*;\n \nclass Main {\n  public static void main(String[] args) {\n    try {\n      InputStreamReader is = new InputStreamReader(System.in);\n      BufferedReader br = new BufferedReader(is);\n \n      String c1Line = br.readLine();\n      String c2Line = br.readLine();\n \n      String[] c1Array = c1Line.split(\" \", 0);\n      String[] c2Array = c2Line.split(\" \", 0);\n \n      int c1x = Integer.parseInt(c1Array[0]);\n      int c1y = Integer.parseInt(c1Array[1]);\n      int c1r = Integer.parseInt(c1Array[2]);\n \n      int c2x = Integer.parseInt(c2Array[0]);\n      int c2y = Integer.parseInt(c2Array[1]);\n      int c2r = Integer.parseInt(c2Array[2]);\n \n      int diffX = Math.abs(c1x - c2x);\n      int diffY = Math.abs(c1y - c2y);\n      int xyR = c1r + c2r;\n      int right1X = c1x + c1r;\n      int left1X = c1x - c1r;\n      int right2X = c2x + c2r;\n      int left2X = c2x - c2r;\n \n      int top1Y = c1y + c1r;\n      int bottom1Y = c1y - c1r;\n      int top2Y = c2y + c2r;\n      int bottom2Y = c2y - c2r;\n \n      if(c1x == c2x) {\n        if(diffY == xyR) { //外接\n          System.out.println(3);\n        } else if(diffY > xyR) { // 離れ\n          System.out.println(4);\n        } else {\n          if(((top1Y < top2Y) && (bottom1Y > bottom2Y)) ||\n          ((top1Y > top2Y) && (bottom1Y < bottom2Y))) { // 内包\n            System.out.println(0);\n          } else if(((top1Y < top2Y) || (bottom1Y > bottom2Y)) &&\n          ((top1Y > top2Y) || (bottom1Y < bottom2Y))) { // 内接\n            System.out.println(1);\n          } else System.out.println(2); // 交わる\n        }\n      } else if(c1y == c2y) {\n        if(diffX == xyR) { //外接\n          System.out.println(3);\n        } else if(diffX > xyR) { // 離れ\n          System.out.println(4);\n        } else {\n          if(((right1X < right2X) && (left1X > left2X)) ||\n          ((right1X > right2X) && (left1X < left2X))) { // 内包\n            System.out.println(0);\n          } else if(((right1X <= right2X) || (left1X <= left2X)) &&\n          ((right1X >= right2X) || (left1X >= left2X))) { // 内接\n            System.out.println(1);\n          } else System.out.println(2); // 交わる\n        }\n      } else if((c1x != c2x) || (c1y != c2y)) {\n        double d = Math.sqrt(diffX*diffX + diffY*diffY);\n        if(d > xyR) { //離れ\n          System.out.println(4);\n        } else {\n          if((((right1X < right2X) && (left1X > left2X)) && ((top1Y < top2Y) && (bottom1Y > bottom2Y))) ||\n          (((right1X > right2X) && (left1X < left2X)) && ((top1Y > top2Y) && (bottom1Y < bottom2Y)))) { // 内包\n            System.out.println(0);\n          } else if((((right1X <= right2X) || (left1X >= left2X)) && ((top1Y <= top2Y) || (bottom1Y >= bottom2Y))) ||\n          (((right1X >= right2X) || (left1X <= left2X)) && ((top1Y >= top2Y) || (bottom1Y <= bottom2Y)))) { // 内接\n            System.out.println(1);\n          } else System.out.println(2); // 交わる\n        }\n      }\n    } catch(Exception e) {}\n  }\n}\n"
  },
  {
    "language": "Java",
    "code": "\npublic class Main {\n\tpublic static void main(String args[]){\n\t\tdouble cx1, cy1, r1;\n\t\tdouble cx2, cy2, r2;\n\t\t\n\t\t\tcx1 = Double.valueOf(args[0]);\n\t\t\tcy1 = Double.valueOf(args[1]);\n\t\t\tr1 = Double.valueOf(args[2]);\n\t\t\tcx2 = Double.valueOf(args[3]);\n\t\t\tcy2 = Double.valueOf(args[4]);\n\t\t\tr2 = Double.valueOf(args[5]);\n\t\t\t\n\t\t\tdouble l = (Math.pow(cx1 - cx2, 2) + Math.pow(cy1 - cy2, 2));\n\t\t\tdouble rlen = r1+r2;\n\t\t\tdouble revlen = r1 - r2;\n\t\t\tif(l > rlen*rlen) \n\t\t\t\tSystem.out.println(\"4\");\n\t\t\telse if(l == rlen*rlen) \n\t\t\t\tSystem.out.println(\"3\");\n\t\t\telse if(l < rlen*rlen) {\n\t\t\t\tif(l > revlen*revlen)\n\t\t\t\t\tSystem.out.println(\"2\");\n\t\t\t\telse if(l == revlen*revlen)\n\t\t\t\t\tSystem.out.println(\"1\");\n\t\t\t\telse if(l < revlen*revlen)\n\t\t\t\t\tSystem.out.println(\"0\");\n\t\t\t}\n\t\t\n\t}\t\n}\n\n"
  },
  {
    "language": "Java",
    "code": "\npublic class Main {\n\tpublic static void main(String args[]){\n\t\tdouble cx1, cy1, r1;\n\t\tdouble cx2, cy2, r2;\n\t\t\n\t\tif(args.length != 0){\n\t\t\tcx1 = Double.valueOf(args[0]);\n\t\t\tcy1 = Double.valueOf(args[1]);\n\t\t\tr1 = Double.valueOf(args[2]);\n\t\t\tcx2 = Double.valueOf(args[3]);\n\t\t\tcy2 = Double.valueOf(args[4]);\n\t\t\tr2 = Double.valueOf(args[5]);\n\t\t\t\n\t\t\tdouble l = (Math.pow(cx1 - cx2, 2) + Math.pow(cy1 - cy2, 2));\n\t\t\tdouble rlen = r1+r2;\n\t\t\tdouble revlen = r1 - r2;\n\t\t\tif(l > rlen*rlen) \n\t\t\t\tSystem.out.println(\"4\");\n\t\t\telse if(l == rlen*rlen) \n\t\t\t\tSystem.out.println(\"3\");\n\t\t\telse if(l < rlen*rlen) {\n\t\t\t\tif(l > revlen*revlen)\n\t\t\t\t\tSystem.out.println(\"2\");\n\t\t\t\telse if(l == revlen*revlen)\n\t\t\t\t\tSystem.out.println(\"1\");\n\t\t\t\telse if(l < revlen*revlen)\n\t\t\t\t\tSystem.out.println(\"0\");\n\t\t\t}\n\t\t}\n\t}\t\n}\n\n"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\npublic class Main{\n\tpublic static int intersection(Circle c1, Circle c2){\n\t\tdouble dis1 = Math.pow(c2.x - c1.x,2) + Math.pow(c2.y - c1.y,2);\n\t\tdouble dis2 = Math.pow(c1.r + c2.r,2);\n\t\tdouble dis3 = Math.pow(c1.r - c2.r,2);\n\t\tif(dis1 > dis2)\n\t\t\treturn 4;\n\t\telse if(dis1 == dis2)\n\t\t\treturn 3;\n\t\telse if(dis1 > dis3)\n\t\t\treturn 2;\n\t\telse if(dis1 == dis3)\n\t\t\treturn 1;\n\t\telse\n\t\t\treturn 0;\n\t}\n\tpublic static void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tCircle c1 = new Circle(sc.nextLong(),sc.nextLong(),sc.nextLong());\n\t\tCircle c2 = new Circle(sc.nextLong(),sc.nextLong(),sc.nextLong());\n\t\tSystem.out.println(intersection(c1,c2));\n\t}\n}\nclass Circle{\n\tlong x;\n\tlong y;\n\tlong r;\n\tCircle(long x, long y, long r){\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.r = r;\n\t}\n}\n"
  },
  {
    "language": "Java",
    "code": "\npublic class Main {\n\tpublic static void main(String args[]){\n\t\tdouble cx1, cy1, r1;\n\t\tdouble cx2, cy2, r2;\n\t\t\n\t\tif(args.length != 0){\n\t\t\tcx1 = Double.valueOf(args[0]);\n\t\t\tcy1 = Double.valueOf(args[1]);\n\t\t\tr1 = Double.valueOf(args[2]);\n\t\t\tcx2 = Double.valueOf(args[3]);\n\t\t\tcy2 = Double.valueOf(args[4]);\n\t\t\tr2 = Double.valueOf(args[5]);\n\t\t\t\n\t\t\tdouble l = (Math.pow(cx1 - cx2, 2) + Math.pow(cy1 - cy2, 2));\n\t\t\tdouble rlen = r1+r2;\n\t\t\tdouble revlen = r1 - r2;\n\t\t\tif(l > rlen*rlen) \n\t\t\t\tSystem.out.println(\"4\");\n\t\t\telse if(l == rlen*rlen) \n\t\t\t\tSystem.out.println(\"3\");\n\t\t\telse if(l < rlen*rlen) {\n\t\t\t\tif(l > revlen*revlen)\n\t\t\t\t\tSystem.out.println(\"2\");\n\t\t\t\telse if(l == revlen*revlen)\n\t\t\t\t\tSystem.out.println(\"1\");\n\t\t\t\telse if(l < revlen*revlen)\n\t\t\t\t\tSystem.out.println(\"0\");\n\t\t\t}\n\t\t}\n\t\telse System.out.println(\"Input doesn't be exist\");\n\t}\t\n}\n\n"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Collections;\nusing System.Collections.Specialized;\nusing System.Linq;\nusing System.Text;\nusing System.IO;\nusing System.Reflection;\nusing static System.Math;\nusing System.Numerics;\nusing static Exg;\nstatic class Program{\n\tconst int mod=(int)1e9+7;\n\tconst double eps=1e-11;\n\tstatic void Main(){\n\t\tSc sc=new Sc();\n\t\tvar e1=sc.Da;\n\t\tvar p1=new Pair(e1);\n\t\tvar e2=sc.Da;\n\t\tvar p2=new Pair(e2);\n\t\tvar a=Gp11(p1,e1[2],p2,e2[2]);\n\t\tvar ans=Gp0(p1,p2)<=Max(e1[2],e2[2]);\n\t\tConsole.WriteLine(\"{0}\",Gp0(p1,p2)>Max(e1[2],e2[2])?4-a.Length:a.Length);\n\t}\n}\n\npublic struct Pair{\n\tpublic double x,y;\n\tpublic Pair(double x,double y){this.x=x;this.y=y;}\n\tpublic Pair(double[] da){x=da[0];y=da[1];}\n\tpublic Pair(Pair p){x=p.x;y=p.y;}\n\tpublic override string ToString()=>x.ToString()+\" \"+y.ToString();\n\tpublic static Pair operator+(Pair a,Pair b){a.x+=b.x;a.y+=b.y;return a;}\n\tpublic static Pair operator-(Pair a,Pair b){a.x-=b.x;a.y-=b.y;return a;}\n\tpublic static Pair operator*(Pair a,double n){a.x*=n;a.y*=n;return a;}\n\tpublic static Pair operator/(Pair a,double n){a.x/=n;a.y/=n;return a;}\n}\nstatic class Exg{\n\tstatic public double Gp0(Pair a,Pair b){return Sqrt((a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y));}\n\tstatic public Tuple<bool,Pair> Gp1(Pair p1,Pair p2,Pair p3,Pair p4){\n\t\tdouble t1=(p4.y-p3.y)*(p4.x-p1.x)-(p4.x-p3.x)*(p4.y-p1.y);\n\t\tdouble t2=(p2.x-p1.x)*(p4.y-p1.y)-(p2.y-p1.y)*(p4.x-p1.x);\n\t\tdouble t3=(p2.x-p1.x)*(p4.y-p3.y)-(p2.y-p1.y)*(p4.x-p3.x);\n\t\tif(t3==0){\n\t\t\tif(Abs(Atan2(p2.y-p1.y,p2.x-p1.x))!=Abs(Atan2(p3.y-p1.y,p3.x-p1.x))){return Tuple.Create(p1.x==p3.x&&p1.y==p3.y?true:false,p1);}\n\t\t\tvar a=new Tuple<Pair,int>[]{Tuple.Create(p1,1),Tuple.Create(p2,2),Tuple.Create(p3,3),Tuple.Create(p4,4)};\n\t\t\tArray.Sort(a,(d,e)=>{var c=d.Item1.x.CompareTo(e.Item1.y);return c==0?e.Item1.y.CompareTo(d.Item1.y):c;});\n\t\t\treturn Tuple.Create((Abs(a[0].Item2-a[1].Item2)!=1||Abs(a[2].Item2-a[3].Item2)!=1)||(a[1].Item1.x==a[2].Item1.x&&a[1].Item1.y==a[2].Item1.y)?true:false,a[1].Item1);\n\t\t}\n\t\tdouble t4=t1/t3,t5=t2/t3;\n\t\tif(t4<0||t4>1||t5<0||t5>1){return Tuple.Create(false,new Pair(0,0));}\n\t\telse{return Tuple.Create(true,new Pair(p1.x+t4*(p2.x-p1.x),p1.y+t4*(p2.y-p1.y)));}\n\t}\n\tstatic public double Gp2(Pair p1,Pair p2,Pair p0){return Abs((p2.y-p1.y)*p0.x-(p2.x-p1.x)*p0.y+p2.x*p1.y-p1.x*p2.y)/Sqrt((p2.y-p1.y)*(p2.y-p1.y)+(p2.x-p1.x)*(p2.x-p1.x));}\n\tstatic public double Gp3(Pair p1,Pair p2,Pair p0){return (p1.x-p2.x)*(p0.y-p1.y)+(p1.y-p2.y)*(p1.x-p0.x);}\n\tstatic public double Gp4(Pair a,Pair b,Pair c){\n\t\tdouble a1=a.x-b.x,a2=a.y-b.y,c1=c.x-b.x,c2=c.y-b.y;\n\t\treturn Acos((a1*c1+a2*c2)/Sqrt((a1*a1+a2*a2)*(c1*c1+c2*c2)))*180/PI;\n\t}\n\tstatic public Tuple<bool,Pair> Gp5(Pair p1,Pair p2,Pair p0){\n\t\tdouble rx=p0.x,ry=p0.y;\n\t\tif(p1.x==p2.x){rx=p1.x;}\n\t\telse if(p1.y==p2.y){ry=p1.y;}\n\t\telse{\n\t\t\tdouble m1=(p2.y-p1.y)/(p2.x-p1.x),b1=p1.y-(m1*p1.x),m2=-1.0/m1,b2=p0.y-(m2*p0.x);\n\t\t\trx=(b2-b1)/(m1-m2);\n\t\t\try=(b2*m1-b1*m2)/(m1-m2);\n\t\t}\n\t\treturn Tuple.Create(((p1.x>=rx&&p2.x<=rx)||(p2.x>=rx&&p1.x<=rx))&&((p1.y>=ry&&p2.y<=ry)||(p2.y>=ry&&p1.y<=ry)),new Pair(rx,ry));\n\t}\n\tstatic public Pair Gp6(Pair a,Pair b,Pair c,int n){\n\t\tdouble l1=Sqrt((a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y));\n\t\tdouble l2=Sqrt((c.x-b.x)*(c.x-b.x)+(c.y-b.y)*(c.y-b.y));\n\t\tdouble ex=(a.x+(b.x+(c.x-b.x)*(l1/l2)))/2,ey=(a.y+(b.y+(c.y-b.y)*(l1/l2)))/2;\n\t\tex+=(ex-b.x)*n;ey+=(ey-b.y)*n;\n\t\treturn new Pair(ex,ey);\n\t}\n\tstatic public Pair Gp7(Pair a,double k,double p){return new Pair(a.x+k*Cos(p),a.y+k*Sin(p));}\n\tstatic public bool Gp8(Pair a,Pair b,Pair c){return (c.x-a.x)*(b.y-a.y)==(b.x-a.x)*(c.y-a.y);}\n\tstatic public Pair Gp9(Pair a,Pair b,Pair c){\n\t\tdouble d=a.x*a.x+a.y*a.y,e=b.x*b.x+b.y*b.y,f=c.x*c.x+c.y*c.y,g=2*(a.x*(b.y-c.y)+b.x*(c.y-a.y)+c.x*(a.y-b.y));\n\t\treturn new Pair((d*(b.y-c.y)+e*(c.y-a.y)+f*(a.y-b.y))/g,(d*(c.x-b.x)+e*(a.x-c.x)+f*(b.x-a.x))/g);\n\t}\n\tstatic public Pair[] Gp10(Pair p0,double r,Pair p1,Pair p2){\n\t\tdouble a=p2.y-p1.y,b=p1.x-p2.x;\n\t\tdouble d=p0.x*-a+p0.y*-b+a*p1.x+b*p1.y;\n\t\tdouble g=a*a+b*b;\n\t\tdouble k=g*r*r-d*d;\n\t\tif(k<0){return new Pair[]{};}\n\t\tif(k==0){return new Pair[]{new Pair((a*d)/g+p0.x,(b*d)/g+p0.y)};}\n\t\tk=Sqrt(k);\n\t\treturn new Pair[]{new Pair((a*d-b*k)/g+p0.x,(b*d+a*k)/g+p0.y),new Pair((a*d+b*k)/g+p0.x,(b*d-a*k)/g+p0.y)};\n\t}\n\tstatic public Pair[] Gp11(Pair p1,double r1,Pair p2,double r2){\n\t\tp2-=p1;\n\t\tdouble a=(p2.x*p2.x+p2.y*p2.y+r1*r1-r2*r2)/2;\n\t\tdouble g=p2.x*p2.x+p2.y*p2.y;\n\t\tdouble k=g*r1*r1-a*a;\n\t\tif(k<0){return new Pair[]{};}\n\t\tif(k==0){return new Pair[]{new Pair((p2.x*a)/g,(p2.y*a)/g)+p1};}\n\t\tk=Sqrt(k);\n\t\treturn new Pair[]{new Pair((p2.x*a+p2.y*k)/g,(p2.y*a-p2.x*k)/g)+p1,new Pair((p2.x*a-p2.y*k)/g,(p2.y*a+p2.x*k)/g)+p1};\n\t}\n\tstatic public Tuple<Pair,double>[] Psort(Pair[] pa,Pair p){\n\t\tvar arr=new Tuple<Pair,double>[pa.Length];\n\t\tfor(int i = 0;i<pa.Length;i++) {arr[i]=Tuple.Create(pa[i],Atan2(pa[i].y-p.y,pa[i].x-p.x)*180/PI+180);}\n\t\tArray.Sort(arr,(u,v)=>u.Item2.CompareTo(v.Item2));\n\t\treturn arr;\n\t}\n\tstatic public Tuple<Pair,double>[] Psort2(Pair[] pa,Pair p){\n\t\tint n=pa.Length;\n\t\tvar arr=new Tuple<Pair,double>[n];\n\t\tfor(int i = 0;i<n;i++) {arr[i]=Tuple.Create(pa[i],Atan2(pa[i].y-p.y,pa[i].x-p.x)*180/PI+180);}\n\t\tArray.Sort(arr,(u,v)=>u.Item2.CompareTo(v.Item2));\n\t\tArray.Resize(ref arr,n<<1);\n\t\tfor(int i = 0;i<n;i++) {arr[i+n]=Tuple.Create(arr[i].Item1,arr[i].Item2+360);}\n\t\treturn arr;\n\t}\n}\npublic class Sc{\n\tpublic int I{get{return int.Parse(Console.ReadLine());}}\n\tpublic long L{get{return long.Parse(Console.ReadLine());}}\n\tpublic double D{get{return double.Parse(Console.ReadLine());}}\n\tpublic string S{get{return Console.ReadLine();}}\n\tpublic int[] Ia{get{return Array.ConvertAll(Console.ReadLine().Split(),int.Parse);}}\n\tpublic long[] La{get{return Array.ConvertAll(Console.ReadLine().Split(),long.Parse);}}\n\tpublic double[] Da{get{return Array.ConvertAll(Console.ReadLine().Split(),double.Parse);}}\n\tpublic string[] Sa{get{return Console.ReadLine().Split();}}\n\tpublic object[] Oa{get{return Console.ReadLine().Split();}}\n\tpublic int[] Ia2{get{return Array.ConvertAll((\"0 \"+Console.ReadLine()+\" 0\").Split(),int.Parse);}}\n\tpublic int[] Ia3(int a){return Array.ConvertAll((a.ToString()+\" \"+Console.ReadLine()).Split(),int.Parse);}\n\tpublic int[] Ia3(bool a,int b,bool c,int d){return Array.ConvertAll(((a?b.ToString()+\" \":\"\")+Console.ReadLine()+(c?\" \"+d.ToString():\"\")).Split(),int.Parse);}\n\tpublic long[] La2{get{return Array.ConvertAll((\"0 \"+Console.ReadLine()+\" 0\").Split(),long.Parse);}}\n\tpublic long[] La3(int a){return Array.ConvertAll((a.ToString()+\" \"+Console.ReadLine()).Split(),long.Parse);}\n\tpublic long[] La3(bool a,int b,bool c,int d){return Array.ConvertAll(((a?b.ToString()+\" \":\"\")+Console.ReadLine()+(c?\" \"+d.ToString():\"\")).Split(),long.Parse);}\n\tpublic double[] Da2{get{return Array.ConvertAll((\"0 \"+Console.ReadLine()+\" 0\").Split(),double.Parse);}}\n\tpublic double[] Da3(int a){return Array.ConvertAll((a.ToString()+\" \"+Console.ReadLine()).Split(),double.Parse);}\n\tpublic double[] Da3(bool a,int b,bool c,int d){return Array.ConvertAll(((a?b.ToString()+\" \":\"\")+Console.ReadLine()+(c?\" \"+d.ToString():\"\")).Split(),double.Parse);}\n\tpublic T[] Arr<T>(int n,Func<T> f){var a=new T[n];for(int i=0;i<n;i++){a[i]=f();}return a;}\n\tpublic T[] Arr<T>(int n,Func<int,T> f){var a=new T[n];for(int i=0;i<n;i++){a[i]=f(i);}return a;}\n\tpublic T[] Arr<T>(int n,Func<string[],T> f){var a=new T[n];for(int i=0;i<n;i++){a[i]=f(Console.ReadLine().Split());}return a;}\n\tpublic T[] Arr<T>(int n,Func<int,string[],T> f){var a=new T[n];for(int i=0;i<n;i++){a[i]=f(i,Console.ReadLine().Split());}return a;}\n}\n"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace ConsoleApplication1\n{\n    enum ST { Bottom, Left, Right, Top }\n\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Circle[] C = new Circle[2];\n            for (int i = 0; i < 2; i++)\n            {\n                double[] input = Array.ConvertAll(Console.ReadLine().Split(' '), double.Parse);\n                C[i] = new Circle(new Point(input[0], input[1]), input[2]);\n            }\n            Console.WriteLine(Intersect(C[0], C[1]));\n        }\n\n        static int Intersect(Circle c1, Circle c2)\n        {\n            double distP, distR;\n            distP = (c1.p - c2.p).Norm;\n\n            distR = (c1.r + c2.r) * (c1.r + c2.r);\n            if (distP > distR) return 4;\n            if (distP == distR) return 3;\n\n            distR = (c1.r - c2.r) * (c1.r - c2.r);\n            if (distP > distR) return 2;\n            if (distP == distR) return 1;\n\n            return 0;\n        }\n    }\n\n    class EndPoint : IComparable\n    {\n        internal Point p;\n        internal int seg;\n        internal ST st;\n\n        public EndPoint(Point p, int seg, ST st)\n        {\n            this.p = p;\n            this.seg = seg;\n            this.st = st;\n        }\n\n        public int CompareTo(object obj)\n        {\n            EndPoint other = obj as EndPoint;\n\n            if (p.y < other.p.y) return -1;\n            if (p.y > other.p.y) return 1;\n            if (st < other.st) return -1;\n            if (st > other.st) return 1;\n            return 0;\n        }\n    }\n\n    class Point : IComparable\n    {\n        static readonly double EPS = 1E-10;\n\n        internal double x, y;\n\n        public Point(double x, double y)\n        {\n            this.x = x;\n            this.y = y;\n        }\n\n        public double Abs { get { return Math.Sqrt(Norm); } }\n        public double Norm { get { return x * x + y * y; } }\n\n        public double Dot(Point p) { return x * p.x + y * p.y; }\n        public double Cross(Point p) { return x * p.y - y * p.x; }\n        public double Distance(Point p) { return (this - p).Abs; }\n\n        public static Point operator +(Point a, Point b) { return new Point(a.x + b.x, a.y + b.y); }\n        public static Point operator -(Point a, Point b) { return new Point(a.x - b.x, a.y - b.y); }\n        public static Point operator *(Point p, double d) { return new Point(p.x * d, p.y * d); }\n        public static Point operator /(Point p, double d) { return new Point(p.x / d, p.y / d); }\n        public static bool operator <(Point a, Point b) { return Math.Abs(a.x - b.x) > EPS ? a.x < b.x : a.y < b.y; }\n        public static bool operator >(Point a, Point b) { return Math.Abs(a.x - b.x) > EPS ? a.x > b.x : a.y > b.y; }\n        public static bool operator ==(Point a, Point b) { return Math.Abs(a.x - b.x) < EPS && Math.Abs(a.y - b.y) < EPS; }\n        public static bool operator !=(Point a, Point b) { return Math.Abs(a.x - b.x) >= EPS || Math.Abs(a.y - b.y) >= EPS; }\n\n        public int CompareTo(object obj)\n        {\n            var other = obj as Point;\n            if (other == null) return -1;\n\n            ComparerX compX = new ComparerX();\n            return compX.Compare(this, other);\n        }\n\n        public override bool Equals(object obj)\n        {\n            var other = obj as Point;\n            return Math.Abs(x - other.x) < EPS && Math.Abs(y - other.y) < EPS;\n        }\n\n        public override int GetHashCode()\n        {\n            return x.GetHashCode() ^ y.GetHashCode();\n        }\n\n        public override string ToString()\n        {\n            return string.Format(\"{0} {1}\", x, y);\n        }\n    }\n\n    class ComparerX : IComparer<Point>\n    {\n        static readonly double EPS = 1E-10;\n\n        public int Compare(Point a, Point b)\n        {\n            if (a.x - b.x < -EPS) return -1;\n            if (a.x - b.x > EPS) return 1;\n            if (a.y - b.y < -EPS) return -1;\n            if (a.y - b.y > EPS) return 1;\n            return 0;\n        }\n    }\n\n    class ComparerY : IComparer<Point>\n    {\n        static readonly double EPS = 1E-10;\n\n        public int Compare(Point a, Point b)\n        {\n            if (a.y - b.y < -EPS) return -1;\n            if (a.y - b.y > EPS) return 1;\n            if (a.x - b.x < -EPS) return -1;\n            if (a.x - b.x > EPS) return 1;\n            return 0;\n        }\n    }\n\n    class Segment\n    {\n        internal Point p1, p2;\n\n        public Segment(Point p1, Point p2)\n        {\n            this.p1 = p1;\n            this.p2 = p2;\n        }\n    }\n\n    class Circle\n    {\n        internal Point p;\n        internal double r;\n\n        public Circle(Point p, double r)\n        {\n            this.p = p;\n            this.r = r;\n        }\n    }\n}"
  },
  {
    "language": "JavaScript",
    "code": "// const\nvar COUNTER_CLOCKWISE = 1;\nvar CLOCKWISE = - 1;\nvar ONLINE_BACK = 2;\nvar ONLINE_FRONT =  -2;\nvar ON_SEGMENT = 0;\n\n// Vector2d\nvar Vector2D = class Vector2D {\n\tconstructor(x,y){\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t}\n}\n\nVector2D.prototype.Init = function(x,y){\n\tthis.x = x;\n\tthis.y = y;\n}\n\n/*\n * v: Vector2D\n */\nfunction rotateVector90(v){\n\tvar r = new Vector2D();\n\tr.x = -v.y;\n\tr.y = v.x;\n\treturn r;\n}\n\n/*\n * get degree to radian return radian\n */\nfunction getDegreeToRadian(degree){\n\tvar pi = 3.14159265358979323846;\n\treturn degree * pi / 180;\n}\n\n/*\n * vec:Vector2D return Vector2D\n */\nfunction getRotateVector(vec,degree){\n\tvar radian = getDegreeToRadian(degree);\n\n\tvar sin = Math.sin(radian);\n\tvar cos = Math.cos(radian);\n\n\tvar r = new Vector2D();\n\tr.x = vec.x * cos - vec.y * sin;\n\tr.y = vec.x * sin + vec.y * cos;\n\n\treturn r;\n}\n\nfunction isEqualVectors(a,b){\n\treturn equalFloats(a.x - b.x,0) && equalFloats(a.y - b.y,0);\n}\n\n/**\n * vec:Vector2D\n * \n * return unitVector\n */\nfunction getUnitVector(vec){\n\tvar length = getVectorLength2D(vec);\n\tif(length > 0){\n\t\treturn getDivideVector(vec,length);\n\t}\n\treturn vec;\n}\n\n/**\n * return vector length\n * \n * vec:Vector2D\n */\nfunction getVectorLength2D(vec){\n\treturn Math.sqrt((vec.x * vec.x) + (vec.y * vec.y));\n}\n\nfunction getNorm(vec){\n\treturn vec.x * vec.x + vec.y * vec.y;\n}\n\nfunction getDivideVector(vec2D,length){\n\tvec2D.x = vec2D.x / length;\n\tvec2D.y = vec2D.y / length;\n\treturn vec2D;\n}\n\nfunction equalFloats(a,b){\n\tvar threshold = 1 / 8192;\n\treturn Math.abs(a - b) < threshold;\n}\n\nfunction isParallelVector(vectorA,vectorB){\n\tvar na = rotateVector90(vectorA);\n\treturn equalFloats(0,dotProduct2D(na,vectorB));\n}\n\nfunction isVerticalVector(vectorA,vectorB){\n\treturn equalFloats(0,dotProduct2D(vectorA,vectorB));\n}\n\nfunction subtractVector(vecA,vecB){\n\tvar vec = new Vector2D();\n\tvec.x = vecA.x - vecB.x;\n\tvec.y = vecA.y - vecB.y;\n\treturn vec;\n}\n\nfunction dotProduct2D(vecA,vecB){\n    var dot = vecA.x * vecB.x + vecA.y * vecB.y;\n\treturn vecA.x * vecB.x + vecA.y * vecB.y;\n}\n\n/**\n * 外積\n * \n * @param vecA\n * @param vecB\n * @returns\n */\nfunction getCross(vecA,vecB){\n\treturn vecA.x * vecB.y - vecA.y * vecB.x;\n}\n\n/**\n * line segment\n * \n * point1:Vector2D point2:Vector2D\n */\nvar LineSegment2D = class LineSegment2D {\n\tconstructor(point1,point2){\n\t\tthis.point1 = point1;\n\t\tthis.point2 = point2;\n\t}\n}\n\nLineSegment2D.prototype.Init = function(point1,point2){\n\tthis.point1 = point1;\n\tthis.point2 = point2;\n}\n\nfunction onOneSide(axis,segment){\n\tvar d1 = new Vector2D();\n\td1 = subtractVector(segment.point1,axis.base);\n\n\tvar d2 = new Vector2D();\n\td2 = subtractVector(segment.point2,axis.base);\n\n\tvar n = new Vector2D();\n\tn = rotateVector90(axis.direction);\n\n\t// 同じ方向だということを返す\n\treturn dotProduct2D(n,d1) * dotProduct2D(n,d2) > 0;\n}\n\nfunction overLapping(minA,maxA,minB,maxB){\n\treturn minB <= maxA && minA <= maxB;\n}\n\nfunction isSegmentsCollide(segment1,segment2){\n\t// 線分の方向をチェックするためのベクトル\n\tvar axisA = new Line();\n\tvar axisB = new Line();\n\n\t// 線分1のベクトルに対して、線分2が片側にあるかチェック\n\taxisA.base = segment1.point1;\n\taxisA.direction = subtractVector(segment1.point2,segment1.point1);\n\n\tif(onOneSide(axisA,segment2)){\n\t\treturn false;\n\t}\n\n\t// 同じく\n\taxisB.base = segment2.point1;\n\taxisB.direction = subtractVector(segment2.point2,segment2.point1);\n\n\tif(onOneSide(axisB,segment1)){\n\t\treturn false;\n\t}\n\n\t// 同じベクトルをもつケース\n\tif(isParallelVector(axisA.direction,axisB.direction)){\n\t\tvar rangeA = getProjectSegment(segment1,axisA.direction);\n\t\tvar rangeB = getProjectSegment(segment2,axisA.direction);\n\n\t\t// 重なっているか\n\t\treturn isOverLappingRanges(rangeA,rangeB);\n\t}\n\telse{\n\t\treturn true;\n\t}\n}\n\n/*\n * Line Object\n */\nfunction Line(){\n\t// vector2D\n\tthis.base;\n\t// vector2D\n\tthis.direction\n}\n\nLine.prototype.Init = function(base,direction,color){\n\tthis.base = base;\n\tthis.direction = direction;\n}\n\n/**\n * Range\n */\nvar Range = class Range {\n\tconstructor(min,max){\n\t\tthis.min = min;\n\t\tthis.max = max;\n\t}\n}\n\nfunction getMaxMinRange(range1,range2){\n\tvar range = new Range();\n\trange.min = range1.min < range2.min ? range1.min : range2.min;\n\trange.max = range1.max < range2.max ? range2.max : range1.max;\n\treturn range;\n}\n\nfunction getSortRange(range){\n\tvar sorted = new Range(range.min,range.max);\n\tif(range.min > range.max){\n\t\tsorted.min = range.max;\n\t\tsorted.max = range.min;\n\t}\n\treturn sorted;\n}\n\nfunction getNegateVector(vector){\n\tvector.x = -vector.x;\n\tvector.y = -vector.y;\n\treturn vector;\n}\n\nfunction addVector(vecA,vecB){\n\treturn new Vector2D(vecA.x + vecB.x,vecA.y + vecB.y);\n}\n\n/**\n * segment:segment onto:Vector2D\n * \n * return Range\n */\nfunction getProjectSegment(segment,onto){\n\tvar ontoUnitVec = getUnitVector(onto);\n\n\tvar range = new Range();\n\trange.min = dotProduct2D(ontoUnitVec,segment.point1);\n\trange.max = dotProduct2D(ontoUnitVec,segment.point2);\n\n\trange = getSortRange(range);\n\treturn range;\n}\n\nfunction isOverLappingRanges(range1,range2){\n\treturn overLapping(range1.min,range1.max,range2.min,range2.max);\n}\n\nfunction projectVector(project,onto){\n\tvar d = dotProduct2D(onto,onto);\n\tif(0 < d){\n\t    var dp = dotProduct2D(project,onto);\n\t    return multiplyVector(onto,dp / d);\n\t}\n\treturn onto;\n}\n\n/**\n * point class\n */\nvar Point2D = class Point2D {\n\tconstructor(x,y){\n\t\tthis.x = x;\n\t\tthis.y = y;\n\n\t}\n}\n\nfunction addPoint(point1,point2){\n\treturn new Point2D(point1.x + point2.x,point1.y + point2.y);\n}\n\nfunction subtractPoint(point1,point2){\n\treturn new Point2D(point1.x - point2.x,point1.y - point2.y);\n}\n\nfunction multiplyPoint(point,scalar){\n\treturn new Point2D(point.x * scalar,point.y * scalar);\n}\n\n/**\n * segment : LineSegment2D\n * point : Point\n */\nfunction getProjectPoint(segment,point){\n\tvar vec1 = new Vector2D(segment.point2.x - segment.point1.x,segment.point2.y - segment.point1.y);\n\tvar vec2 = new Vector2D(point.x - segment.point1.x,point.y - segment.point1.y);\n\tvar rate = dotProduct2D(vec2,vec1) / getNorm(vec1);\n\tvar vec3 = multiplyVector(vec1,rate);\n\tvar project = new Point2D(segment.point1.x + vec3.x,segment.point1.y + vec3.y);\n\treturn project; \n}\n\nfunction getReflectionPoint(segment,point){\n\tvar projection = getProjectPoint(segment,point);\n\t// pから射影点までのベクトル\n\tvar vec = subtractPoint(projection,point);\n\t// 2倍したものが射影点になる\n\tvar refrectionPoint = multiplyPoint(vec,2);\n\t// 始点を足す\n\treturn addPoint(refrectionPoint,point);\n}\n\n/**\n * \n * @param segment1\n * @param segment2\n * @returns point\n */\nfunction getCrossPoint(segment1,segment2){\n\t// 基準となる線を決める\n\tvar baseVector = new Vector2D(segment2.point2.x - segment2.point1.x,segment2.point2.y - segment2.point1.y);\n\tvar d1Vec = new Vector2D(segment1.point1.x - segment2.point1.x,segment1.point1.y - segment2.point1.y);\n\tvar d2Vec = new Vector2D(segment1.point2.x - segment2.point1.x,segment1.point2.y - segment2.point1.y);\n\tvar d1 = Math.abs(getCross(baseVector,d1Vec));\n\tvar d2 = Math.abs(getCross(baseVector,d2Vec));\n\tvar t = d1 / (d1 + d2);\n\tvar x = segment1.point1.x + (segment1.point2.x - segment1.point1.x) * t;\n\tvar y = segment1.point1.y + (segment1.point2.y - segment1.point1.y) * t;\n\treturn new Point2D(x,y);\n}\n\nfunction multiplyVector(vec,scalar){\n\tvar temp = new Vector2D();\n\ttemp.x = vec.x * scalar;\n\ttemp.y = vec.y * scalar;\n\treturn temp;\n}\n\nfunction clampOnRange(x,min,max){\n\tif(x < min){\n\t\treturn min;\n\t}else if(x > max){\n\t\treturn max;\n\t}else{\n\t\treturn x;\n\t}\n}\n\n/**\n * 直線と点との距離\n */\nfunction getDistanceLinePoint(line,point){\n\tvar vec1 = new Vector2D(line.point2.x - line.point1.x,line.point2.y - line.point1.y);\n\tvar vec2 = new Vector2D(point.x - line.point1.x,point.y - line.point1.y);\n\treturn Math.abs(getCross(vec1,vec2) / getVectorLength2D(vec1)); \n}\n\n/**\n * 線分と点との距離を求める\n */\nfunction getDistanceSegmentPoint(segment,point){    \n\t// ベクトルp2 - p1とベクトルp - p1がなす角θが90どより大きい場合(-90より小さい場合)\n\t// dは点pと点p1の距離になる\n\tif(dotProduct2D(subtractPoint(segment.point2,segment.point1),subtractPoint(point,segment.point1)) < 0){\n\t\treturn getVectorLength2D(subtractPoint(point,segment.point1));\n\t}\n\t// ベクトルp1 - p2とベクトルp - p2がなす角θが90どより大きい場合(-90より小さい場合)\n\t// dは点pと点p2の距離になる\n\tif(dotProduct2D(subtractPoint(segment.point1,segment.point2),subtractPoint(point,segment.point2)) < 0){\n\t\treturn getVectorLength2D(subtractPoint(point,segment.point2));\n\t}\n\t// それ以外はdは点pと直線p1p2の距離になる\n\treturn getDistanceLinePoint(segment,point);\n}\n\n/**\n * 線分と線分との距離を求める\n */\nfunction getSegmentDistance(segment1,segment2){\n\t// 交差していた場合距離は0になる\n\tif(isSegmentsCollide(segment1,segment2)){\n\t\treturn 0;\n\t}\n\treturn Math.min(Math.min(getDistanceSegmentPoint(segment1,segment2.point1),getDistanceSegmentPoint(segment1,segment2.point2)),\n\t\t\tMath.min(getDistanceSegmentPoint(segment2,segment1.point1),getDistanceSegmentPoint(segment2,segment1.point2)));\n}\n\nfunction ccw(point1,point2,point3){\n    var vec1 = new Vector2D(point2.x - point1.x,point2.y - point1.y);\n    var vec2 = new Vector2D(point3.x - point1.x,point3.y - point1.y);\n    var cross = getCross(vec1,vec2);\n\n    if(cross > Number.EPSILON){\n        return COUNTER_CLOCKWISE;\n    }\n    if(cross < -Number.EPSILON){\n        return CLOCKWISE;\n    }\n    if(dotProduct2D(vec1,vec2) < -Number.EPSILON){\n        return ONLINE_BACK;\n    }\n    if(getVectorLength2D(vec1) < getVectorLength2D(vec2)){\n        return ONLINE_FRONT;\n    }\n    return ON_SEGMENT;\n}\n\n/**\n * アンドリューでconvex hollを返す \n*/\nfunction getConvexHoll(points){\n    if(points.length < 3){\n        return points;\n    }\n    \n    // xを基準に昇順にソート、数値が同じものはyが小さいもの基準にソート \n    points.sort((a, b) => (a.x > b.x) ? 1 : (a.x == b.x) ? ((a.y > b.y) ? 1 : -1) : -1);\n    // xを小さいほうから2つ\n    var u = [];\n    u.push(points[0]);\n    u.push(points[1]);\n    // xを大きい方から2つ\n    var l = [];\n    l.push(points[points.length - 1]);\n    l.push(points[points.length - 2]);\n    \n    // 上部の生成\n    for(var i = 2;i < points.length;++i){\n    \t// 対象が半時計なら削除する\n        for(var j = u.length;j >= 2 && ccw(u[j - 2],u[j - 1],points[i]) == COUNTER_CLOCKWISE;--j){\n            u.pop();\n        }\n        u.push(points[i]);\n    }\n    // 下部の生成\n    for(var i = points.length - 3;i >= 0;--i){\n    \t// 対象が半時計なら削除する\n        for(var j = l.length;j >= 2 && ccw(l[j - 2],l[j - 1],points[i]) == COUNTER_CLOCKWISE;--j){\n            l.pop();;\n        }\n        l.push(points[i]);\n    }\n    // 時計回りに凸包の点の列を生成\n    l.reverse();\n    for(var i = u.length - 2;i >= 1;--i){\n        l.push(u[i]);\n    }\n    return l;\n}\n\nfunction getConvexDiameter(points){\n\t// 対心点(p,q)を取る(y軸で最小・最大のもの)\n    var is = 0;\n    var js = 0;\n    for(var i = 1; i < points.length; i++){\n      if(points[i].y > points[is].y) is = i;\n      if(points[i].y < points[js].y) js = i;\n    }\n    var distance = getNorm(subtractVector(points[is],points[js]));\n    var maxi = is,i = js,maxj = js,j = js;\n    do {\n        // 対心点の中で最長距離のものを探す\n      if(getCross(subtractVector(points[(i + 1) % points.length],points[i]),subtractVector(points[(j + 1) % points.length],points[j])) >= 0){\n        j = (j + 1) % points.length;\n      } else {\n        i = (i + 1) % points.length;\n      }\n      if(getNorm(subtractVector(points[i],points[j])) > distance){\n        distance = getNorm(subtractVector(points[i],points[j]));\n        maxi = i;\n        maxj = j;\n      }\n    }  while (i != is || j != js);\n    return distance;\n}\n\n/**\n * 点で構成される多角形の2d面積を返す\n * \n */\nfunction getArea(points){\n    var area = 0;\n    for(var i = 0;i < points.length;++i){\n        area += getCross(points[i],points[(i + 1) % points.length]);\n    }\n    return area / 2;\n}\n\nfunction getConvexCut(points,point1,point2){\n    // 切り取られた多角形\n    var convex = [];\n    \n\tfor(var i = 0; i < points.length;++i){\n\t\tvar nowPoint = points[i];\n\t\tvar nextPoint = points[(i + 1) % points.length];\n\t\tvar nowPointCcw = ccw(point1,point2,nowPoint);\n\t\tif(nowPointCcw != CLOCKWISE){\n\t\t    convex.push(nowPoint);\n\t\t}\n\t\tif(nowPointCcw * ccw(point1,point2,nextPoint) == CLOCKWISE){\n\t\t    // 交点を求める\n\t\t  var crossPoint = getCrossPointFromPoints(point1,point2,nowPoint,nextPoint);\n\t\t  convex.push(crossPoint);\n\t\t}\n\t}\n\treturn convex;\n}\n\nfunction getPointDistance(point1,point2)\n{\n\tvar x = point1.x - point2.x;\n\tvar y = point1.y - point2.y;\n\treturn Math.sqrt(x * x + y * y);\n}\n\nfunction closestPair(points,n){\n\tif (n == 1)  return Number.MAX_SAFE_INTEGER;\n\tvar d = Number.MAX_SAFE_INTEGER;\n\tvar m = Math.floor(n / 2);\n\td = Math.min(closestPair(points, m),closestPair(points.slice(m),n - m));\n    var mx = points[m].x;\n\tvar arr = [];\n    \n\tfor (var i = m;i >= 0;--i){\n\t    var x = Math.abs(points[i].x - mx);\n\t\tif (x > d){\n\t\t    break;\n\t\t}\n\t\telse{\n\t\t    arr.push(points[i]);\n\t\t}\n\t}\n\tfor (var i = m + 1; i < n; ++i){\n\t\tif (Math.abs(points[i].x - mx) > d){\n\t\t    break;\n\t\t}\t\n\t\telse{\n            arr.push(points[i]);  \n\t\t} \n\t}\n\tarr.sort((a, b) => (a.y > b.y) ? 1 : -1);\n\n\tfor(var i = 0;i < arr.length;++i){\n\t\tfor (var j = i + 1;j < arr.length && Math.abs(arr[j].y - arr[i].y) < d;++j){\n\t\t    var tmp = getPointDistance(arr[i],arr[j]);\n\t\t\tif (tmp < d) d = tmp;\n\t\t}\n\t}\n\treturn d;\n}\n\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\n//var input = require('fs').readFileSync('input.txt', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\t\n// 1\nvar nums = Arr[0].split(\" \").map(Number);\nvar point1 = new Point2D(nums[0],nums[1]);\nvar r1 = nums[2];\n// 2\nvar nums = Arr[1].split(\" \").map(Number);\nvar point2 = new Point2D(nums[0],nums[1]);\nvar r2 = nums[2];\nif(r2 > r1){\n    var tmp = r1;\n    r1 = r2;\n    r2 = tmp;\n}\n\n// 中心点との距離\nvar d = getPointDistance(point1,point2);\nvar ans = 4;\n\n// 一点を共有外接\nif(equalFloats(d,r1 + r2)){\n    ans = 3;\n}\n// 2点で交わる\nelse if(r1 - r2 < d && r1 + r2 > d){\n    ans = 2;\n}\n// 内接\nelse if(equalFloats(d,r1 - r2)){\n    ans = 1;\n}\n// 内包\nelse if(d < r1 - r2){\n    ans = 0;\n}\n\nconsole.log(ans);\n\n"
  },
  {
    "language": "Ruby",
    "code": "x0,y0,r0,x1,y1,r1=`dd`.split.map(&:to_i)\nd=Math.hypot(x0-x1,y0-y1)\nr0,r1=[r0,r1].minmax\nif d>r0+r1\n\tp 4\nelsif d==r0+r1\n\tp 3\nelsif d>r1-r0\n\tp 2\nelsif d==r1-r0\n\tp 1\nelse\n\tp 0\nend"
  },
  {
    "language": "Ruby",
    "code": "cx1, cy1, r1 = gets.split.map(&:to_i)\ncx2, cy2, r2 = gets.split.map(&:to_i)\nd = (((cx1-cx2).abs)**2 + ((cy1-cy2).abs)**2)**(1/2.0)\n\nif d > r1 + r2\n  puts \"4\"\nelsif d == r1+ r2\n  puts \"3\"\nelsif (r1-r2).abs < d && r1+r2\n  puts \"2\"\nelsif (r1-r2).abs == d\n  puts \"1\"\nelsif d < (r1 - r2).abs\n  puts \"0\"\nend\n"
  },
  {
    "language": "Ruby",
    "code": "x0,y0,r0,x1,y1,r1=$<.read.split.map(&:to_i)\nd=Math.hypot(x0-x1,y0-y1)\nr0,r1=[r0,r1].minmax\nif d>r0+r1\n\tp 4\nelsif d==r0+r1\n\tp 3\nelsif d>r1-r0\n\tp 2\nelsif d==r1-r0\n\tp 1\nelse\n\tp 0\nend"
  },
  {
    "language": "Ruby",
    "code": "x0,y0,r0,x1,y1,r1=`dd`.split.map(&:to_i)\nd=Math.hypot(x0-x1,y0-y1)\nr0,r1=[r0,r1].minmax\nif d>r0+r1\n\tp 4\nelsif d==r0+r1\n\tp 3\nelsif d>r1-r0\n\tp 2\nelsif d==r1-r0\n\tp 1\nelse\n\tp 0\nend"
  },
  {
    "language": "Go",
    "code": "package main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\nfunc main(){\n\tvar x0,y0,r0,x1,y1,r1 int32\n\tvar r_max,r_min int32\n\tvar flag int8\n\tfmt.Scanf(\"%d %d %d\",&x0,&y0,&r0)\n\tfmt.Scanf(\"%d %d %d\",&x1,&y1,&r1)\n\n\td := math.Sqrt(float64((x0-x1)*(x0-x1) + (y0-y1)*(y0-y1)))\n\tif r0>r1 {\n\t\tr_max=r0\n\t\tr_min = r1\n\t} else {\n\t\tr_max=r1\n\t\tr_min = r0\n\t}\n\tr_sum := r0+r1\n\tswitch  {\n\tcase d > (float64(r_sum)) :\t\tflag = 4\n\tcase d == (float64(r_sum)) :\tflag = 3\n\tcase d < (float64(r_sum)) :\t{\n\t\tif d+float64(r_min)< float64(r_max){\n\t\t\tflag=0\n\t\t}else if d+float64(r_min)== float64(r_max) {\n\t\t\tflag = 1\n\t\t}else {\n\t\t\tflag = 2\n\t\t}\n\t}\n\tdefault:\n\n\t}\n\tfmt.Println(flag)\n}\n"
  },
  {
    "language": "Go",
    "code": "package main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\nfunc main() {\n\tPow := math.Pow\n\tvar c1x, c1y, c1r int\n\tvar c2x, c2y, c2r int\n\n\tfmt.Scanf(\"%d %d %d\", &c1x, &c1y, &c1r)\n\tfmt.Scanf(\"%d %d %d\", &c2x, &c2y, &c2r)\n\n\td := math.Sqrt(Pow(float64(c2x-c1x), 2) + Pow(float64(c2y-c1y), 2))\n\n\tif d < math.Abs(float64(c2r-c1r)) {\n\t\tfmt.Println(0)\n\t} else if d == math.Abs(float64(c2r-c1r)) {\n\t\tfmt.Println(1)\n\t} else if math.Abs(float64(c2r-c1r)) < d && d < math.Abs(float64(c1r+c2r)) {\n\t\tfmt.Println(2)\n\t} else if d == math.Abs(float64(c1r+c2r)) {\n\t\tfmt.Println(3)\n\t} else if d > math.Abs(float64(c1r+c2r)) {\n\t\tfmt.Println(4)\n\t}\n}\n\n\n"
  },
  {
    "language": "Go",
    "code": "package main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\nfunc main(){\n\tvar x0,y0,r0,x1,y1,r1 int32\n\tvar r_max,r_min int32\n\tvar flag int8\n\tfmt.Scanf(\"%d %d %d\",&x0,&y0,&r0)\n\tfmt.Scanf(\"%d %d %d\",&x1,&y1,&r1)\n\n\td := math.Sqrt(float64((x0-x1)*(x0-x1) + (y0-y1)*(y0-y1)))\n\tif r0>r1 {\n\t\tr_max=r0\n\t\tr_min = r1\n\t} else {\n\t\tr_max=r1\n\t\tr_min = r0\n\t}\n\tr_sum := r0+r1\n\tswitch  {\n\tcase d > (float64(r_sum)) :\t\tflag = 4\n\tcase d == (float64(r_sum)) :\tflag = 3\n\tcase d < (float64(r_sum)) :\t{\n\t\tif d+float64(r_min)< float64(r_max){\n\t\t\tflag=0\n\t\t}else if d+float64(r_min)== float64(r_max) {\n\t\t\tflag = 1\n\t\t}else {\n\t\t\tflag = 2\n\t\t}\n\t}\n\tdefault:\n\n\t}\n\tfmt.Println(flag)\n\n}\n"
  },
  {
    "language": "Go",
    "code": "package main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\nfunc main() {\n\tPow := math.Pow\n\tvar c1x, c1y, c1r int\n\tvar c2x, c2y, c2r int\n\n\tfmt.Scanf(\"%d %d %d\", &c1x, &c1y, &c1r)\n\tfmt.Scanf(\"%d %d %d\", &c2x, &c2y, &c2r)\n\n\td := math.Sqrt(Pow(float64(c2x-c1x), 2) + Pow(float64(c2y-c1y), 2))\n\n\tif d < math.Abs(float64(c2r-c1r)) {\n\t\tfmt.Println(0)\n\t} else if d == math.Abs(float64(c2r-c1r)) {\n\t\tfmt.Println(1)\n\t} else if math.Abs(float64(c2r-c1r)) < d && d < math.Abs(float64(c1r+c2r)) {\n\t\tfmt.Println(2)\n\t} else if d == math.Abs(float64(c1r+c2r)) {\n\t\tfmt.Println(3)\n\t} else if d > math.Abs(float64(c1r+c2r)) {\n\t\tfmt.Println(4)\n\t}\n}\n\n\n"
  },
  {
    "language": "Python",
    "code": "# Intersection of Circles\nimport math\n\nclass Circle:\n    def __init__(self, x, y, r):\n        self.x = x\n        self.y = y\n        self.r = r\n\ndef Exchange(c1, c2):\n    return list((c2, c1))\n\ndata = list(map(int, input(\"Please enter the value of c1: \").split()))\nc1 = Circle(data[0],data[1],data[2])\n\ndata = list(map(int, input(\"Please enter the value of c2: \").split()))\nc2 = Circle(data[0],data[1],data[2])\n\nif c1.r < c2.r:\n    [c1, c2] = Exchange(c1, c2)\n \nd = math.sqrt((c1.x - c2.x)**2 + (c1.y - c2.y)**2)\n\nif d > c1.r + c2.r:\n    print(4)\nelif d == c1.r + c2.r:\n    print(3)\nelif c1.r - c2.r < d and d < c1.r + c2.r:\n    print(2)\nelif d == c1.r - c2.r:\n    print(1)\nelif d < c1.r - c2.r:\n    print(0)\n\n"
  },
  {
    "language": "Python",
    "code": "\ncx1, cy1, r1 = map(float, raw_input().split())\ncx2, cy2, r2 = map(float, raw_input().split())\n\nimport math\ndistance = math.sqrt( math.pow(cx1-cx2, 2) + math.pow(cy1-cy2, 2) )\nrsum = r1 + r2\nrmax = math.max(r1, r2)\nrmin = math.min(r1, r2)\n\nimport sys\nif distance > rsum:\n  print(4)\nelif abs(distance - rsum) < sys.float_info.epsilon:\n  print(3)\nelse:\n  if rmax < distance + rmin:\n    print(2)\n  elif abs(rmax - distance - rmin) < sys.float_info.epsilon:\n    print(1)\n  else:\n    print(0)\n"
  },
  {
    "language": "Python",
    "code": "c1x,c1y,c1r = [int(i) for i in input().split()]\nc2x,c2y,c2r = [int(i) for i in input().split()]\n\nd = math.sqrt(pow(c1x-c2x, 2) +  pow(c1y-c2y, 2))\n\ns = c1r + c2r\n\nif d > s:\n    print(4)\nelse if d == c:\n    print(3)\nelse if d > 2*s:\n    print(2)\nelse if d == 2*s:\n    print(1)\nelse:\n    print(0)\n"
  },
  {
    "language": "Python",
    "code": "import math\n\nc1x,c1y,c1r = [int(i) for i in input().split()]\nc2x,c2y,c2r = [int(i) for i in input().split()]\n\ndis = math.sqrt(pow(c1x-c2x, 2) +  pow(c1y-c2y, 2))\n\nbcr = 0\nscr = 0\n\nif c1r > c2r:\n    bcr = c1r\n    scr = c2r\nelse:\n    bcr = c2r\n    scr = c1r\n\nif dis > bcr + scr:\n    print(4)\nelif dis == bcr + scr:\n    print(3)\nelif dis + scr > bcr:\n    print(2)\nelif dis + scr == bcr:\n    print(1)\nelse:\n    print(0)\n"
  },
  {
    "language": "Python",
    "code": "import math\n\nc1x,c1y,c1r = [int(i) for i in input().split()]\nc2x,c2y,c2r = [int(i) for i in input().split()]\n\nd = math.sqrt(pow(c1x-c2x, 2) +  pow(c1y-c2y, 2))\n\ns = c1r + c2r\n\nif d > s:\n    print(4)\nelif d == c:\n    print(3)\nelif d > 2*s:\n    print(2)\nelif d == 2*s:\n    print(1)\nelse:\n    print(0)\n"
  },
  {
    "language": "Python",
    "code": "\ncx1, cy1, r1 = map(float, input().split())\ncx2, cy2, r2 = map(float, input().split())\n\nimport math\ndistance = math.sqrt( math.pow(cx1-cx2, 2) + math.pow(cy1-cy2, 2) )\nrsum = r1 + r2\nrmax = max(r1, r2)\nrmin = min(r1, r2)\n\nimport sys\nif distance > rsum:\n  print(4)\nelif abs(distance - rsum) < sys.float_info.epsilon:\n  print(3)\nelse:\n  if rmax < distance + rmin:\n    print(2)\n  elif abs(rmax - distance - rmin) < sys.float_info.epsilon:\n    print(1)\n  else:\n    print(0)\n"
  },
  {
    "language": "Python",
    "code": "import math\n\nc1x,c1y,c1r = [int(i) for i in input().split()]\nc2x,c2y,c2r = [int(i) for i in input().split()]\n\nd = math.sqrt(pow(c1x-c2x, 2) +  pow(c1y-c2y, 2))\n\nbcr = 0\nscr = 0\n\nif c1r > c2r:\n    bcr = c1r\n    scr = c2r\nelse:\n    bcr = c2r\n    scr = c1r\n\n\nif d > bcr + scr:\n    print(4)\nelif d == bcr + scr:\n    print(3)\nelif d + scr > bcr:\n    print(2)\nelif d + scr == bcr:\n    print(1)\nelse:\n    print(0)\n\n"
  },
  {
    "language": "Python",
    "code": "\nnv,ne = [int(i) for i in input().split()]\n\ng = []\n\nfor i in range(nv):\n    g.append([])\n\nfor i in range(ne):\n    s,t = [int(j) for j in input().split()]\n    g[s].append(t)\n\ndone = []\n\nf = 0\n\ndef put_forword(index):\n    global f\n\n    if index in done:\n        return\n\n    done.append(index)\n\n    for i in g[index]:\n\n        if i == 0:\n            f = 1\n            return\n        put_forword(i)\n\nput_forword(0)\n\nprint(f)\n\n"
  },
  {
    "language": "Python",
    "code": "import cmath\nimport itertools\nimport math\nimport operator\nimport os\nimport sys\nfrom collections import defaultdict\n\nif os.getenv(\"LOCAL\"):\n    sys.stdin = open(\"_in.txt\", \"r\")\n\nsys.setrecursionlimit(10 ** 9)\nINF = float(\"inf\")\nIINF = 10 ** 18\nMOD = 10 ** 9 + 7\n# MOD = 998244353\n\nPI = cmath.pi\nTAU = cmath.pi * 2\nEPS = 1e-10\n\n\nclass Point:\n    \"\"\"\n    2次元空間上の点\n    \"\"\"\n\n    # 反時計回り側にある\n    CCW_COUNTER_CLOCKWISE = 1\n    # 時計回り側にある\n    CCW_CLOCKWISE = -1\n    # 線分の後ろにある\n    CCW_ONLINE_BACK = 2\n    # 線分の前にある\n    CCW_ONLINE_FRONT = -2\n    # 線分上にある\n    CCW_ON_SEGMENT = 0\n\n    def __init__(self, c: complex):\n        self.c = c\n\n    @property\n    def x(self):\n        return self.c.real\n\n    @property\n    def y(self):\n        return self.c.imag\n\n    @staticmethod\n    def from_rect(x: float, y: float):\n        return Point(complex(x, y))\n\n    @staticmethod\n    def from_polar(r: float, phi: float):\n        return Point(cmath.rect(r, phi))\n\n    def __add__(self, p):\n        \"\"\"\n        :param Point p:\n        \"\"\"\n        return Point(self.c + p.c)\n\n    def __iadd__(self, p):\n        \"\"\"\n        :param Point p:\n        \"\"\"\n        self.c += p.c\n        return self\n\n    def __sub__(self, p):\n        \"\"\"\n        :param Point p:\n        \"\"\"\n        return Point(self.c - p.c)\n\n    def __isub__(self, p):\n        \"\"\"\n        :param Point p:\n        \"\"\"\n        self.c -= p.c\n        return self\n\n    def __mul__(self, f: float):\n        return Point(self.c * f)\n\n    def __imul__(self, f: float):\n        self.c *= f\n        return self\n\n    def __truediv__(self, f: float):\n        return Point(self.c / f)\n\n    def __itruediv__(self, f: float):\n        self.c /= f\n        return self\n\n    def __repr__(self):\n        return \"({}, {})\".format(round(self.x, 10), round(self.y, 10))\n\n    def __neg__(self):\n        return Point(-self.c)\n\n    def __eq__(self, p):\n        return abs(self.c - p.c) < EPS\n\n    def __abs__(self):\n        return abs(self.c)\n\n    @staticmethod\n    def ccw(a, b, c):\n        \"\"\"\n        線分 ab に対する c の位置\n        線分上にあるか判定するだけなら on_segment とかのが速い\n        Verify: http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_C&lang=ja\n        :param Point a:\n        :param Point b:\n        :param Point c:\n        \"\"\"\n        b = b - a\n        c = c - a\n        det = b.det(c)\n        if det > EPS:\n            return Point.CCW_COUNTER_CLOCKWISE\n        if det < -EPS:\n            return Point.CCW_CLOCKWISE\n        if b.dot(c) < -EPS:\n            return Point.CCW_ONLINE_BACK\n        if c.norm() - b.norm() > EPS:\n            return Point.CCW_ONLINE_FRONT\n        return Point.CCW_ON_SEGMENT\n\n    def dot(self, p):\n        \"\"\"\n        内積\n        :param Point p:\n        :rtype: float\n        \"\"\"\n        return self.x * p.x + self.y * p.y\n\n    def det(self, p):\n        \"\"\"\n        外積\n        :param Point p:\n        :rtype: float\n        \"\"\"\n        return self.x * p.y - self.y * p.x\n\n    def dist(self, p):\n        \"\"\"\n        距離\n        :param Point p:\n        :rtype: float\n        \"\"\"\n        return abs(self.c - p.c)\n\n    def norm(self):\n        \"\"\"\n        原点からの距離\n        :rtype: float\n        \"\"\"\n        return abs(self.c)\n\n    def phase(self):\n        \"\"\"\n        原点からの角度\n        :rtype: float\n        \"\"\"\n        return cmath.phase(self.c)\n\n    def angle(self, p, q):\n        \"\"\"\n        p に向いてる状態から q まで反時計回りに回転するときの角度\n        -pi <= ret <= pi\n        :param Point p:\n        :param Point q:\n        :rtype: float\n        \"\"\"\n        return (cmath.phase(q.c - self.c) - cmath.phase(p.c - self.c) + PI) % TAU - PI\n\n    def area(self, p, q):\n        \"\"\"\n        p, q となす三角形の面積\n        :param Point p:\n        :param Point q:\n        :rtype: float\n        \"\"\"\n        return abs((p - self).det(q - self) / 2)\n\n    def projection_point(self, p, q, allow_outer=False):\n        \"\"\"\n        線分 pq を通る直線上に垂線をおろしたときの足の座標\n        Verify: http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_A&lang=ja\n        :param Point p:\n        :param Point q:\n        :param allow_outer: 答えが線分の間になくても OK\n        :rtype: Point|None\n        \"\"\"\n        diff_q = q - p\n        # 答えの p からの距離\n        r = (self - p).dot(diff_q) / abs(diff_q)\n        # 線分の角度\n        phase = diff_q.phase()\n\n        ret = Point.from_polar(r, phase) + p\n        if allow_outer or (p - ret).dot(q - ret) < EPS:\n            return ret\n        return None\n\n    def reflection_point(self, p, q):\n        \"\"\"\n        直線 pq を挟んで反対にある点\n        Verify: http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_B&lang=ja\n        :param Point p:\n        :param Point q:\n        :rtype: Point\n        \"\"\"\n        # 距離\n        r = abs(self - p)\n        # pq と p-self の角度\n        angle = p.angle(q, self)\n        # 直線を挟んで角度を反対にする\n        angle = (q - p).phase() - angle\n        return Point.from_polar(r, angle) + p\n\n    def on_segment(self, p, q, allow_side=True):\n        \"\"\"\n        点が線分 pq の上に乗っているか\n        Verify: http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_C&lang=ja\n        :param Point p:\n        :param Point q:\n        :param allow_side: 端っこでギリギリ触れているのを許容するか\n        :rtype: bool\n        \"\"\"\n        if not allow_side and (self == p or self == q):\n            return False\n        # 外積がゼロ: 面積がゼロ == 一直線\n        # 内積がマイナス: p - self - q の順に並んでる\n        return abs((p - self).det(q - self)) < EPS and (p - self).dot(q - self) < EPS\n\n\nclass Line:\n    \"\"\"\n    2次元空間上の直線\n    \"\"\"\n\n    def __init__(self, a: float, b: float, c: float):\n        \"\"\"\n        直線 ax + by + c = 0\n        \"\"\"\n        self.a = a\n        self.b = b\n        self.c = c\n\n    @staticmethod\n    def from_gradient(grad: float, intercept: float):\n        \"\"\"\n        直線 y = ax + b\n        :param grad: 傾き\n        :param intercept: 切片\n        :return:\n        \"\"\"\n        return Line(grad, -1, intercept)\n\n    @staticmethod\n    def from_segment(p1, p2):\n        \"\"\"\n        :param Point p1:\n        :param Point p2:\n        \"\"\"\n        a = p2.y - p1.y\n        b = p1.x - p2.x\n        c = p2.y * (p2.x - p1.x) - p2.x * (p2.y - p1.y)\n        return Line(a, b, c)\n\n    @property\n    def gradient(self):\n        \"\"\"\n        傾き\n        \"\"\"\n        return INF if self.b == 0 else -self.a / self.b\n\n    @property\n    def intercept(self):\n        \"\"\"\n        切片\n        \"\"\"\n        return INF if self.b == 0 else -self.c / self.b\n\n    def is_parallel_to(self, l):\n        \"\"\"\n        平行かどうか\n        Verify: http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_A&lang=ja\n        :param Line l:\n        \"\"\"\n        # 法線ベクトル同士の外積がゼロ\n        return abs(Point.from_rect(self.a, self.b).det(Point.from_rect(l.a, l.b))) < EPS\n\n    def is_orthogonal_to(self, l):\n        \"\"\"\n        直行しているかどうか\n        Verify: http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_A&lang=ja\n        :param Line l:\n        \"\"\"\n        # 法線ベクトル同士の内積がゼロ\n        return abs(Point.from_rect(self.a, self.b).dot(Point.from_rect(l.a, l.b))) < EPS\n\n    def intersection_point(self, l):\n        \"\"\"\n        交差する点\n        Verify: http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_C&lang=ja\n        :param Line l:\n        :rtype: Point|None\n        \"\"\"\n        a1, b1, c1 = self.a, self.b, self.c\n        a2, b2, c2 = l.a, l.b, l.c\n        det = a1 * b2 - a2 * b1\n        if abs(det) < EPS:\n            # 並行\n            return None\n        x = (b1 * c2 - b2 * c1) / det\n        y = (a2 * c1 - a1 * c2) / det\n        return Point.from_rect(x, y)\n\n    def dist(self, p):\n        \"\"\"\n        他の点との最短距離\n        :param Point p:\n        \"\"\"\n        raise NotImplementedError()\n\n    def has_point(self, p):\n        \"\"\"\n        p が直線上に乗っているかどうか\n        :param Point p:\n        \"\"\"\n        return abs(self.a * p.x + self.b * p.y + self.c) < EPS\n\n\nclass Segment:\n    \"\"\"\n    2次元空間上の線分\n    \"\"\"\n\n    def __init__(self, p1, p2):\n        \"\"\"\n        :param Point p1:\n        :param Point p2:\n        \"\"\"\n        self.p1 = p1\n        self.p2 = p2\n\n    def norm(self):\n        \"\"\"\n        線分の長さ\n        \"\"\"\n        return abs(self.p1 - self.p2)\n\n    def phase(self):\n        \"\"\"\n        p1 を原点としたときの p2 の角度\n        \"\"\"\n        return cmath.phase(self.p2 - self.p1)\n\n    def is_parallel_to(self, s):\n        \"\"\"\n        平行かどうか\n        Verify: http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_A&lang=ja\n        :param Segment s:\n        :return:\n        \"\"\"\n        # 外積がゼロ\n        return abs((self.p1 - self.p2).det(s.p1 - s.p2)) < EPS\n\n    def is_orthogonal_to(self, s):\n        \"\"\"\n        直行しているかどうか\n        Verify: http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_A&lang=ja\n        :param Segment s:\n        :return:\n        \"\"\"\n        # 内積がゼロ\n        return abs((self.p1 - self.p2).dot(s.p1 - s.p2)) < EPS\n\n    def intersects_with(self, s, allow_side=True):\n        \"\"\"\n        交差するかどうか\n        Verify: http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_B&lang=ja\n        :param Segment s:\n        :param allow_side: 端っこでギリギリ触れているのを許容するか\n        \"\"\"\n        if self.is_parallel_to(s):\n            # 並行なら線分の端点がもう片方の線分の上にあるかどうか\n            return (s.p1.on_segment(self.p1, self.p2, allow_side) or\n                    s.p2.on_segment(self.p1, self.p2, allow_side) or\n                    self.p1.on_segment(s.p1, s.p2, allow_side) or\n                    self.p2.on_segment(s.p1, s.p2, allow_side))\n        else:\n            # allow_side ならゼロを許容する\n            det_upper = EPS if allow_side else -EPS\n            ok = True\n            # self の両側に s.p1 と s.p2 があるか\n            ok &= (self.p2 - self.p1).det(s.p1 - self.p1) * (self.p2 - self.p1).det(s.p2 - self.p1) < det_upper\n            # s の両側に self.p1 と self.p2 があるか\n            ok &= (s.p2 - s.p1).det(self.p1 - s.p1) * (s.p2 - s.p1).det(self.p2 - s.p1) < det_upper\n            return ok\n\n    def closest_point(self, p):\n        \"\"\"\n        線分上の、p に最も近い点\n        :param Point p:\n        \"\"\"\n        # p からおろした垂線までの距離\n        d = (p - self.p1).dot(self.p2 - self.p1) / self.norm()\n        # p1 より前\n        if d < EPS:\n            return self.p1\n        # p2 より後\n        if -EPS < d - self.norm():\n            return self.p2\n        # 線分上\n        return Point.from_polar(d, (self.p2 - self.p1).phase()) + self.p1\n\n    def dist(self, p):\n        \"\"\"\n        他の点との最短距離\n        :param Point p:\n        \"\"\"\n        return abs(p - self.closest_point(p))\n\n    def dist_segment(self, s):\n        \"\"\"\n        他の線分との最短距離\n        Verify: http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_D&lang=ja\n        :param Segment s:\n        \"\"\"\n        if self.intersects_with(s):\n            return 0.0\n        return min(\n            self.dist(s.p1),\n            self.dist(s.p2),\n            s.dist(self.p1),\n            s.dist(self.p2),\n        )\n\n    def has_point(self, p, allow_side=True):\n        \"\"\"\n        p が線分上に乗っているかどうか\n        :param Point p:\n        :param allow_side: 端っこでギリギリ触れているのを許容するか\n        \"\"\"\n        return p.on_segment(self.p1, self.p2, allow_side=allow_side)\n\n\nclass Polygon:\n    \"\"\"\n    2次元空間上の多角形\n    \"\"\"\n\n    def __init__(self, points):\n        \"\"\"\n        :param list of Point points:\n        \"\"\"\n        self.points = points\n\n    def iter2(self):\n        \"\"\"\n        隣り合う2点を順に返すイテレータ\n        :rtype: typing.Iterator[(Point, Point)]\n        \"\"\"\n        return zip(self.points, self.points[1:] + self.points[:1])\n\n    def iter3(self):\n        \"\"\"\n        隣り合う3点を順に返すイテレータ\n        :rtype: typing.Iterator[(Point, Point, Point)]\n        \"\"\"\n        return zip(self.points,\n                   self.points[1:] + self.points[:1],\n                   self.points[2:] + self.points[:2])\n\n    def area(self):\n        \"\"\"\n        面積\n        Verify: http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_3_A&lang=ja\n        \"\"\"\n        # 外積の和 / 2\n        dets = []\n        for p, q in self.iter2():\n            dets.append(p.det(q))\n        return abs(math.fsum(dets)) / 2\n\n    def is_convex(self, allow_straight=False, allow_collapsed=False):\n        \"\"\"\n        凸多角形かどうか\n        Verify: http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_3_B&lang=ja\n        :param allow_straight: 3点がまっすぐ並んでるのを許容するかどうか\n        :param allow_collapsed: 面積がゼロの場合を許容するか\n        \"\"\"\n        ccw = []\n        for a, b, c in self.iter3():\n            ccw.append(Point.ccw(a, b, c))\n        ccw = set(ccw)\n        if len(ccw) == 1:\n            if ccw == {Point.CCW_CLOCKWISE}:\n                return True\n            if ccw == {Point.CCW_COUNTER_CLOCKWISE}:\n                return True\n        if allow_straight and len(ccw) == 2:\n            if ccw == {Point.CCW_ONLINE_FRONT, Point.CCW_CLOCKWISE}:\n                return True\n            if ccw == {Point.CCW_ONLINE_FRONT, Point.CCW_COUNTER_CLOCKWISE}:\n                return True\n        if allow_collapsed and len(ccw) == 3:\n            return ccw == {Point.CCW_ONLINE_FRONT, Point.CCW_ONLINE_BACK, Point.CCW_ON_SEGMENT}\n        return False\n\n    def has_point_on_edge(self, p):\n        \"\"\"\n        指定した点が辺上にあるか\n        :param Point p:\n        :rtype: bool\n        \"\"\"\n        for a, b in self.iter2():\n            if p.on_segment(a, b):\n                return True\n        return False\n\n    def contains(self, p, allow_on_edge=True):\n        \"\"\"\n        指定した点を含むか\n        Winding Number Algorithm\n        https://www.nttpc.co.jp/technology/number_algorithm.html\n        Verify: http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_3_C&lang=ja\n        :param Point p:\n        :param bool allow_on_edge: 辺上の点を許容するか\n        \"\"\"\n        angles = []\n        for a, b in self.iter2():\n            if p.on_segment(a, b):\n                return allow_on_edge\n            angles.append(p.angle(a, b))\n        # 一周以上するなら含む\n        return abs(math.fsum(angles)) > EPS\n\n    @staticmethod\n    def convex_hull(points, allow_straight=False):\n        \"\"\"\n        凸包。x が最も小さい点のうち y が最も小さい点から反時計回り。\n        Graham Scan O(N log N)\n        Verify: http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_4_A&lang=ja\n        :param list of Point points:\n        :param allow_straight: 3点がまっすぐ並んでるのを許容するかどうか\n        :rtype: list of Point\n        \"\"\"\n        points = points[:]\n        points.sort(key=lambda p: (p.x, p.y))\n\n        # allow_straight なら 0 を許容する\n        det_lower = -EPS if allow_straight else EPS\n\n        sz = 0\n        #: :type: list of (Point|None)\n        ret = [None] * (len(points) * 2)\n        for p in points:\n            while sz > 1 and (ret[sz - 1] - ret[sz - 2]).det(p - ret[sz - 1]) < det_lower:\n                sz -= 1\n            ret[sz] = p\n            sz += 1\n        floor = sz\n        for p in reversed(points[:-1]):\n            while sz > floor and (ret[sz - 1] - ret[sz - 2]).det(p - ret[sz - 1]) < det_lower:\n                sz -= 1\n            ret[sz] = p\n            sz += 1\n        ret = ret[:sz - 1]\n\n        if allow_straight and len(ret) > len(points):\n            # allow_straight かつ全部一直線のときに二重にカウントしちゃう\n            ret = points\n        return ret\n\n    @staticmethod\n    def diameter(points):\n        \"\"\"\n        直径\n        凸包構築 O(N log N) + カリパー法 O(N)\n        Verify: http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_4_B&lang=ja\n        :param list of Point points:\n        \"\"\"\n        # 反時計回り\n        points = Polygon.convex_hull(points, allow_straight=False)\n        if len(points) == 1:\n            return 0.0\n        if len(points) == 2:\n            return abs(points[0] - points[1])\n\n        # x軸方向に最も遠い点対\n        si = points.index(min(points, key=lambda p: (p.x, p.y)))\n        sj = points.index(max(points, key=lambda p: (p.x, p.y)))\n        n = len(points)\n\n        ret = 0.0\n        # 半周回転\n        i, j = si, sj\n        while i != sj or j != si:\n            ret = max(ret, abs(points[i] - points[j]))\n            ni = (i + 1) % n\n            nj = (j + 1) % n\n            # 2つの辺が並行になる方向にずらす\n            if (points[ni] - points[i]).det(points[nj] - points[j]) > 0:\n                j = nj\n            else:\n                i = ni\n        return ret\n\n    def convex_cut_by_line(self, line_p1, line_p2):\n        \"\"\"\n        凸多角形を直線 line_p1-line_p2 でカットする。\n        凸じゃないといけません\n        Verify: http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_4_C&lang=ja\n        :param line_p1:\n        :param line_p2:\n        :return: (line_p1-line_p2 の左側の多角形, line_p1-line_p2 の右側の多角形)\n        :rtype: (Polygon|None, Polygon|None)\n        \"\"\"\n        n = len(self.points)\n        line = Line.from_segment(line_p1, line_p2)\n        # 直線と重なる点\n        on_line_points = []\n        for i, p in enumerate(self.points):\n            if line.has_point(p):\n                on_line_points.append(i)\n\n        # 辺が直線上にある\n        has_on_line_edge = False\n        if len(on_line_points) >= 3:\n            has_on_line_edge = True\n        elif len(on_line_points) == 2:\n            # 直線上にある点が隣り合ってる\n            has_on_line_edge = abs(on_line_points[0] - on_line_points[1]) in [1, n - 1]\n        # 辺が直線上にある場合、どっちか片方に全部ある\n        if has_on_line_edge:\n            for p in self.points:\n                ccw = Point.ccw(line_p1, line_p2, p)\n                if ccw == Point.CCW_COUNTER_CLOCKWISE:\n                    return Polygon(self.points[:]), None\n                if ccw == Point.CCW_CLOCKWISE:\n                    return None, Polygon(self.points[:])\n\n        ret_lefts = []\n        ret_rights = []\n        d = line_p2 - line_p1\n        for p, q in self.iter2():\n            det_p = d.det(p - line_p1)\n            det_q = d.det(q - line_p1)\n            if det_p > -EPS:\n                ret_lefts.append(p)\n            if det_p < EPS:\n                ret_rights.append(p)\n            # 外積の符号が違う == 直線の反対側にある場合は交点を追加\n            if det_p * det_q < -EPS:\n                intersection = line.intersection_point(Line.from_segment(p, q))\n                ret_lefts.append(intersection)\n                ret_rights.append(intersection)\n\n        # 点のみの場合を除いて返す\n        l = Polygon(ret_lefts) if len(ret_lefts) > 1 else None\n        r = Polygon(ret_rights) if len(ret_rights) > 1 else None\n        return l, r\n\n\ndef closest_pair(points):\n    \"\"\"\n    最近点対 O(N log N)\n    Verify: http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_5_A&lang=ja\n    :param list of Point points:\n    :rtype: (float, (Point, Point))\n    :return: (距離, 点対)\n    \"\"\"\n    assert len(points) >= 2\n\n    def _rec(xsorted):\n        \"\"\"\n        :param list of Point xsorted:\n        :rtype: (float, (Point, Point))\n        \"\"\"\n        n = len(xsorted)\n        if n <= 2:\n            return xsorted[0].dist(xsorted[1]), (xsorted[0], xsorted[1])\n        if n <= 3:\n            # 全探索\n            d = INF\n            pair = None\n            for p, q in itertools.combinations(xsorted, r=2):\n                if p.dist(q) < d:\n                    d = p.dist(q)\n                    pair = p, q\n            return d, pair\n\n        # 分割統治\n        # 両側の最近点対\n        ld, lp = _rec(xsorted[:n // 2])\n        rd, rp = _rec(xsorted[n // 2:])\n        if ld <= rd:\n            d = ld\n            ret_pair = lp\n        else:\n            d = rd\n            ret_pair = rp\n\n        mid_x = xsorted[n // 2].x\n        # 中央から d 以内のやつを集める\n        mid_points = []\n        for p in xsorted:\n            # if abs(p.x - mid_x) < d:\n            if abs(p.x - mid_x) - d < -EPS:\n                mid_points.append(p)\n\n        # この中で距離が d 以内のペアがあれば更新\n        mid_points.sort(key=lambda p: p.y)\n        mid_n = len(mid_points)\n        for i in range(mid_n - 1):\n            j = i + 1\n            p = mid_points[i]\n            q = mid_points[j]\n            # while q.y - p.y < d\n            while (q.y - p.y) - d < -EPS:\n                pq_d = p.dist(q)\n                if pq_d < d:\n                    d = pq_d\n                    ret_pair = p, q\n                j += 1\n                if j >= mid_n:\n                    break\n                q = mid_points[j]\n        return d, ret_pair\n\n    return _rec(list(sorted(points, key=lambda p: p.x)))\n\n\ndef closest_pair_randomized(points):\n    \"\"\"\n    最近点対 乱択版 O(N)\n    http://ir5.hatenablog.com/entry/20131221/1387557630\n    グリッドの管理が dict だから定数倍気になる\n    Verify: http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_5_A&lang=ja\n    :param list of Point points:\n    :rtype: (float, (Point, Point))\n    :return: (距離, 点対)\n    \"\"\"\n    n = len(points)\n    assert n >= 2\n    if n == 2:\n        return points[0].dist(points[1]), (points[0], points[1])\n\n    # 逐次構成法\n    import random\n    points = points[:]\n    random.shuffle(points)\n\n    DELTA_XY = list(itertools.product([-1, 0, 1], repeat=2))\n    grid = defaultdict(list)\n    delta = INF\n    dist = points[0].dist(points[1])\n    ret_pair = points[0], points[1]\n    for i in range(2, n):\n        if delta < EPS:\n            return 0.0, ret_pair\n        # i 番目より前までを含む grid を構築\n        # if dist < delta:\n        if dist - delta < -EPS:\n            delta = dist\n            grid = defaultdict(list)\n            for a in points[:i]:\n                grid[a.x // delta, a.y // delta].append(a)\n        else:\n            p = points[i - 1]\n            grid[p.x // delta, p.y // delta].append(p)\n\n        p = points[i]\n        dist = delta\n        grid_x = p.x // delta\n        grid_y = p.y // delta\n        # 周り 9 箇所だけ調べれば OK\n        for dx, dy in DELTA_XY:\n            for q in grid[grid_x + dx, grid_y + dy]:\n                d = p.dist(q)\n                # if d < dist:\n                if d - dist < -EPS:\n                    dist = d\n                    ret_pair = p, q\n    return min(delta, dist), ret_pair\n\n\nclass Circle:\n    def __init__(self, o, r):\n        \"\"\"\n        :param Point o:\n        :param float r:\n        \"\"\"\n        self.o = o\n        self.r = r\n\n    def __eq__(self, other):\n        return self.o == other.o and abs(self.r - other.r) < EPS\n\n    def ctc(self, c):\n        \"\"\"\n        共通接線 common tangent の数\n        4: 離れてる\n        3: 外接\n        2: 交わってる\n        1: 内接\n        0: 内包\n        inf: 同一\n        :param Circle c:\n        :rtype: int\n        \"\"\"\n        if self.o == c.o:\n            return INF if abs(self.r - c.r) < EPS else 0\n\n        d = self.o.dist(c.o) - self.r - c.r\n        if d > EPS:\n            return 4\n        elif d > -EPS:\n            return 3\n        # elif d > -min(self.r, c.r) * 2:\n        elif d + min(self.r, c.r) * 2 > EPS:\n            return 2\n        elif d + min(self.r, c.r) * 2 > -EPS:\n            return 1\n        return 0\n\n\nx1, y1, r1 = list(map(int, sys.stdin.buffer.readline().split()))\nx2, y2, r2 = list(map(int, sys.stdin.buffer.readline().split()))\nc1 = Circle(Point(complex(x1, y1)), r1)\nc2 = Circle(Point(complex(x2, y2)), r2)\nprint(c1.ctc(c2))\n\n"
  },
  {
    "language": "Python",
    "code": "from math import pi, cos, sin, atan2\nEPS = 10**(-9)\n\ndef eq(value1, value2):\n    return abs(value1-value2) <= EPS\n\nclass Point():\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n        self.arg = atan2(y, x) # -PI ~ PI\n    \n    def __str__(self):\n        return \"{0:.8f} {1:.8f}\".format(self.x, self.y)\n    \n    def __add__(self, other):\n        return Point(self.x + other.x, self.y + other.y)\n    \n    def __sub__(self, other):\n        return Point(self.x - other.x, self.y - other.y)\n    \n    def __mul__(self, scal):\n        return Point(self.x*scal, self.y*scal)\n    \n    def __truediv__(self, scal):\n        return Point(self.x/scal, self.y/scal)\n    \n    def __eq__(self, other):\n        return eq(self.x, other.x) and eq(self.y, other.y)\n\n    # 原点からの距離\n    def __abs__(self):\n        return (self.x**2+self.y**2)**0.5\n    \n# 原点を中心にrad角だけ回転した点\ndef Rotation(vec: Point, rad):\n    return Point(vec.x*cos(rad)-vec.y*sin(rad), vec.x*sin(rad)+vec.y*cos(rad))\n\n\nclass Circle():\n    def __init__(self, p, r):\n        self.p = p\n        self.r = r\n\n\nclass Line():\n    # 点a, bを通る\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n        self.arg = (a-b).arg % pi\n    \n    def __str__(self):\n        return \"[({0}, {1}) - ({2}, {3})]\".format(self.a.x, self.a.y, self.b.x, self.b.y)\n\n    # pointを通って平行\n    def par(self, point):\n        return Line(point, point+(self.a-self.b))\n\n    # pointを通って垂直\n    def tan(self, point):\n        return Line(point, point + Rotation(self.a-self.b, pi/2))\n\n\nclass Segment(Line):\n    def __init__(self, a, b):\n        super().__init__(a, b)\n\n\n# 符号付き面積\ndef cross(vec1: Point, vec2: Point):\n    return vec1.x*vec2.y - vec1.y*vec2.x\n\n# 内積\ndef dot(vec1: Point, vec2: Point):\n    return vec1.x*vec2.x + vec1.y*vec2.y\n\n# 点a->b->cの回転方向\ndef ccw(a, b, c):\n    if cross(b-a, c-a) > EPS: return +1 # COUNTER_CLOCKWISE\n    if cross(b-a, c-a) < -EPS: return -1 # CLOCKWISE\n    if dot(c-a, b-a) < -EPS: return +2 # c -> a -> b\n    if abs(b-a) < abs(c-a): return -2 # a -> b -> c\n    return 0 # a -> c -> b\n\n\n# pのlへの射影\ndef projection(l, p):\n    t = dot(l.b-l.a, p-l.a) / abs(l.a-l.b)**2\n    return l.a + (l.b-l.a)*t\n\n# pのlによる反射\ndef reflection(l, p):\n    return p + (projection(l, p) - p)*2\n\ndef isPararell(l1, l2):\n    return eq(cross(l1.a-l1.b, l2.a-l2.b), 0)\n\ndef isVertical(l1, l2):\n    return eq(dot(l1.a-l1.b, l2.a-l2.b), 0)\n\n\ndef isIntersect_lp(l, p):\n    return abs(ccw(l.a, l.b, p)) != 1\n\ndef isIntersect_ll(l1, l2):\n    return not isPararell(l1, l2) or isIntersect_lp(l1, l2.a)\n\ndef isIntersect_sp(s, p):\n    return ccw(s.a, s.b, p) == 0\n\ndef isIntersect_ss(s1, s2):\n    return ccw(s1.a, s1.b, s2.a)*ccw(s1.a, s1.b, s2.b) <= 0 and ccw(s2.a, s2.b, s1.a)*ccw(s2.a, s2.b, s1.b) <= 0\n\ndef isIntersect_ls(l, s):\n    return cross(l.b - l.a, s.a - l.a) * cross(l.b - l.a, s.b - l.a) < EPS\n\ndef isIntersect_cp(c, p):\n    return abs(abs(c.p - p) - c.r) < EPS\n\ndef isIntersect_cl(c, l):\n    return distance_lp(l, c.p) <= c.r + EPS\n\ndef isIntersect_cs(c, s):\n    pass\n\ndef intersect_cc(c1, c2):\n    if c1.r < c2.r:\n        c1, c2 = c2, c1\n    d = abs(c1.p - c2.p)\n    if eq(c1.r + c2.r, d): return 3 # 内接\n    if eq(c1.r - c2.r, d): return 1 # 外接\n    if c1.r + c2.r < d: return 4 # 含まれてる\n    if c1.r - c2.r < d: return 2 # 2交点持つ\n    return 0 # 離れてる\n\n\ndef distance_pp(p1, p2):\n    return abs(p1-p2)\n\ndef distance_lp(l, p):\n    return abs(projection(l,p)-p)\n\ndef distance_ll(l1, l2):\n    return 0 if isIntersect_ll(l1, l2) else distance_lp(l1, l2.a)\n\ndef distance_sp(s, p):\n    r = projection(s, p)\n    if isIntersect_sp(s, r): return abs(r-p)\n    return min(abs(s.a-p), abs(s.b-p))\n\ndef distance_ss(s1, s2):\n    if isIntersect_ss(s1, s2): return 0\n    return min([distance_sp(s1, s2.a), distance_sp(s1, s2.b), distance_sp(s2, s1.a), distance_sp(s2, s1.b)])\n\ndef distance_ls(l, s):\n    if isIntersect_ls(l, s): return 0\n    return min(distance_lp(l, s.a), distance_lp(l, s.b))\n\n\ndef crosspoint_ll(l1, l2):\n    A = cross(l1.b - l1.a, l2.b - l2.a)\n    B = cross(l1.b - l1.a, l1.b - l2.a)\n    if eq(abs(A), 0) and eq(abs(B), 0): return l2.a\n    return l2.a + (l2.b - l2.a) * B / A\n\ndef crosspoint_ss(s1, s2):\n    return crosspoint_ll(s1, s2)\n\ndef crosspoint_lc(l, c):\n    if eq(distance_lp(l, c.p), c.r): return [c.p]\n    p = projection(l, c.p)\n    e = (l.b - l.a) / abs(l.b-l.a)\n    dis = (c.r**2-abs(p-c.p)**2)**0.5\n    return [p + e*dis, p - e*dis]\n\ndef crosspoint_sc(s, c):\n    pass\n\ndef crosspoint_cc(c1, c2):\n    d = abs(c1.p-c2.p)\n    if not abs(c1.r-c2.r) <= d <= c1.r+c2.r:\n        return []\n    mid_p = (c2.p * (c1.r**2-c2.r**2+d**2) + c1.p * (c2.r**2-c1.r**2+d**2)) / (2*d**2)\n    tanvec = Rotation(c1.p-c2.p, pi/2)\n    return crosspoint_lc(Line(mid_p, mid_p+tanvec), c1)\n\n\n# pからのcの接点\ndef tangent_cp(c, p):\n    return crosspoint_cc(c, Circle(p, (abs(p-c.p)**2 - c.r**2)**0.5))\n\n\n\n\n\nimport sys\ninput = sys.stdin.readline\n\ndef verify_1A():\n    p1x, p1y, p2x, p2y = map(int, input().split())\n    l = Line(Point(p1x, p1y), Point(p2x, p2y))\n    Q = int(input())\n    Query = [list(map(int, input().split())) for _ in range(Q)]\n    for px, py in Query:\n        p = Point(px, py)\n        print(projection(l, p))\n\ndef verify_1B():\n    p1x, p1y, p2x, p2y = map(int, input().split())\n    l = Line(Point(p1x, p1y), Point(p2x, p2y))\n    Q = int(input())\n    Query = [list(map(int, input().split())) for _ in range(Q)]\n    for px, py in Query:\n        p = Point(px, py)\n        print(reflection(l, p))\n\ndef verify_1C():\n    p1x, p1y, p2x, p2y = map(int, input().split())\n    p1 = Point(p1x, p1y); p2 = Point(p2x, p2y)\n    Q = int(input())\n    Query = [list(map(int, input().split())) for _ in range(Q)]\n    for px, py in Query:\n        p = Point(px, py)\n        result = ccw(p1, p2, p)\n        if result == 1:\n            print(\"COUNTER_CLOCKWISE\")\n        elif result == -1:\n            print(\"CLOCKWISE\")\n        elif result == 2:\n            print(\"ONLINE_BACK\")\n        elif result == -2:\n            print(\"ONLINE_FRONT\")\n        else:\n            print(\"ON_SEGMENT\")\n\ndef verify_2A():\n    Q = int(input())\n    Query = [list(map(int, input().split())) for _ in range(Q)]\n    for p0x, p0y, p1x, p1y, p2x, p2y, p3x, p3y in Query:\n        l1 = Line(Point(p0x, p0y), Point(p1x, p1y))\n        l2 = Line(Point(p2x, p2y), Point(p3x, p3y))\n        if isPararell(l1, l2):\n            print(2)\n        elif isVertical(l1, l2):\n            print(1)\n        else:\n            print(0)\n\ndef verify_2B():\n    Q = int(input())\n    Query = [list(map(int, input().split())) for _ in range(Q)]\n    for p0x, p0y, p1x, p1y, p2x, p2y, p3x, p3y in Query:\n        s1 = Segment(Point(p0x, p0y), Point(p1x, p1y))\n        s2 = Segment(Point(p2x, p2y), Point(p3x, p3y))\n        if isIntersect_ss(s1, s2):\n            print(1)\n        else:\n            print(0)\n\n\ndef verify_2C():\n    Q = int(input())\n    Query = [list(map(int, input().split())) for _ in range(Q)]\n    for p0x, p0y, p1x, p1y, p2x, p2y, p3x, p3y in Query:\n        s1 = Segment(Point(p0x, p0y), Point(p1x, p1y))\n        s2 = Segment(Point(p2x, p2y), Point(p3x, p3y))\n        print(crosspoint_ss(s1, s2))  \n\ndef verify_2D():\n    Q = int(input())\n    Query = [list(map(int, input().split())) for _ in range(Q)]\n    for p0x, p0y, p1x, p1y, p2x, p2y, p3x, p3y in Query:\n        s1 = Segment(Point(p0x, p0y), Point(p1x, p1y))\n        s2 = Segment(Point(p2x, p2y), Point(p3x, p3y))\n        print(\"{:.8f}\".format(distance_ss(s1, s2)))\n\ndef verify_7A():\n    c1x, c1y, c1r = map(int, input().split())\n    c2x, c2y, c2r = map(int, input().split())\n    print(intersect_cc(Circle(Point(c1x, c1y), c1r), Circle(Point(c2x, c2y), c2r)))\n\nverify_7A()\n"
  },
  {
    "language": "Python",
    "code": "c1x,c1y,c1r = [int(i) for i in input().split()]\nc2x,c2y,c2r = [int(i) for i in input().split()]\n\nd = math.sqrt(pow(c1x-c2x, 2) +  pow(c1y-c2y, 2))\n\ns = c1r + c2r\n\nif d > s:\n    print(4)\nelif d == c:\n    print(3)\nelif d > 2*s:\n    print(2)\nelif d == 2*s:\n    print(1)\nelse:\n    print(0)\n"
  },
  {
    "language": "Python",
    "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\n\"\"\"\ninput:\n1 2 1\n4 2 2\n\noutput:\n3\n\"\"\"\n\nimport sys\nfrom collections import namedtuple\n\n\nclass CircleIntersections(object):\n    def __init__(self, ):\n        _input = sys.stdin.readlines()\n        x1, y1, r1 = map(int, _input[0].split())\n        x2, y2, r2 = map(int, _input[1].split())\n\n        Circle = namedtuple('Circle', ('centre', 'radius'))\n        self.c1 = Circle(centre=x1 + y1 * 1j, radius=r1)\n        self.c2 = Circle(centre=x2 + y2 * 1j, radius=r2)\n\n    def calc_intersection(self):\n        c_distance = abs(self.c2.centre - self.c1.centre)\n        r1, r2 = self.c1.radius, self.c2.radius\n\n        if c_distance > r1 + r2:\n            return 4\n        elif c_distance == r1 + r2:\n            return 3\n        elif abs(r1 - r2) < c_distance < r1 + r2:\n            return 2\n        elif c_distance == abs(r1 - r2):\n            return 1\n        else:\n            return 0\n\n\nif __name__ == '__main__':\n    case = CircleIntersections()\n    print(case.calc_intersection())"
  },
  {
    "language": "Python",
    "code": "import math\n\nc1x, c1y, c1r = map(int, input().split())\nc2x, c2y, c2r = map(int, input().split())\n\nd = math.sqrt((c1x-c2x)**2 + (c1y-c2y)**2)\nif d > c1r + c2r:\n    print(4)\nelif d == c1r + c2r:\n    print(3)\nelif d+c1r==c2r or d+c2r==c1r:\n    print(1)\nelif d+c1r<c2r or d+c2r<c1r:\n    print(0)\nelse:\n    print(2)\n"
  },
  {
    "language": "Python",
    "code": "# -*- coding: utf-8 -*-\nc1x,c1y,c1r = map(int,input().split())\nc2x,c2y,c2r = map(int,input().split())\n\nL = (c1x - c2x) ** 2 + (c1y - c2y) **2\nif L > (c1r + c2r) ** 2:\n    print(4)\nelif L == (c1r + c2r) ** 2:\n    print(3)\nelif L < (c1r + c2r) ** 2 and (c1r - c2r) ** 2 < L:\n    print(2)\nelif L == (c1r - c2r) ** 2:\n    print(1)\nelif L < (c1r - c2r) ** 2:\n    print(0)\n\n"
  },
  {
    "language": "Python",
    "code": "def dist(ax,ay,bx,by):\n    return ((bx-ax)**2 + (by-ay)**2)**0.5\n\nx1,y1,r1 = map(float,input().split())\nx2,y2,r2 = map(float,input().split())\n\nd = dist(x1,y1,x2,y2)\nif d > r1 + r2:\n    print(4)\nelif d == r1+r2:\n    print(3)\nelif d + r1 == r2 or d + r2 == r1:\n    print(1)\nelif d + r1 < r2 or d + r2 < r1:\n    print(0)\nelse:\n    print(2)"
  },
  {
    "language": "Python",
    "code": "from math import sqrt\nfrom typing import Tuple\n\n\ndef dist(p: Tuple[float, float], q: Tuple[float, float]) -> float:\n    return sqrt((p[0] - q[0]) ** 2 + (p[1] - q[1]) ** 2)\n\n\nif __name__ == \"__main__\":\n    c1x, c1y, c1r = map(lambda x: float(x), input().split())\n    c2x, c2y, c2r = map(lambda x: float(x), input().split())\n    if c2r < c1r:\n        c1x, c1y, c1r, c2x, c2y, c2r = c2x, c2y, c2r, c1x, c1y, c1r\n\n    center_dist = dist((c1x, c1y), (c2x, c2y))\n    if (c1r + c2r) < center_dist:\n        print(4)\n    elif (c1r + c2r) == center_dist:\n        print(3)\n    elif center_dist < (c1r + c2r) and (c2r - c1r) < center_dist:\n        print(2)\n    elif center_dist == (c2r - c1r):\n        print(1)\n    else:\n        print(0)\n\n"
  },
  {
    "language": "Python",
    "code": "c1x, c1y, c1r = map(int, input().split())\nc2x, c2y, c2r = map(int, input().split())\n\ndistance = (pow(c1y - c2y, 2) + pow(c1x - c2x, 2)) ** 0.5\nif distance > c1r + c2r:\n    print(4)\nelif distance == c1r + c2r:\n    print(3)\nelif distance == abs(c1r - c2r):\n    print(1)\nelif distance < abs(c1r - c2r):\n    print(0)\nelse:\n    print(2)\n"
  },
  {
    "language": "Python",
    "code": "from math import sqrt\n\nx1, y1, r1 = map(float, input().split())\nx2, y2, r2 = map(float, input().split())\n\nd = sqrt((x1 - x2)**2 + (y1 - y2)**2)\ng = max(r1 - r2, r2 - r1)\n\nif d <  g:\n    print(0)\n\nif d == g:\n    print(1)\n\nif d >  g:\n    if d <  r1 + r2: print(2)\n    if d == r1 + r2: print(3)\n    if d >  r1 + r2: print(4)\n"
  },
  {
    "language": "Python",
    "code": "import math\n\nc1x,c1y,c1r = [int(i) for i in input().split()]\nc2x,c2y,c2r = [int(i) for i in input().split()]\n\nd = math.sqrt(pow(c1x-c2x, 2) +  pow(c1y-c2y, 2))\n\nif d > c1r + c2r:\n    print(4)\nelif d == c1r + c2r:\n    print(3)\nelif d > c1r or d > c2r:\n    print(2)\nelif d == c1r or d == c2r:\n    print(1)\nelse:\n    print(0)\n\n"
  },
  {
    "language": "Python",
    "code": "import math\n\ncx1,cy1,r1 = map(int,input().split())\ncx2,cy2,r2 = map(int,input().split())\n\nxydistance = math.sqrt(pow(abs(cx1-cx2),2)+pow(abs(cy1-cy2),2)) \n\nif xydistance > r1+r2: \n    print(4) \nif xydistance == r1+r2: \n    print(3) \nif xydistance < r1+r2 and xydistance > abs(r1-r2) and xydistance != 0:\n    print(2) \nif xydistance == abs(r1-r2): \n    print(1) \nif xydistance < abs(r1-r2): \n    print(0)\n\n\n"
  },
  {
    "language": "Python",
    "code": "import sys\nimport math\n\ncx1,cy1,cr1 = (int(x) for x in input().split())\ncx2,cy2,cr2 = (int(x) for x in input().split())\n\n\ndistance = math.sqrt((cx1 - cx2)**2 + (cy1 - cy2)**2)\n\nif(distance > cr1+cr2):\n    result = 4\nelif(distance == cr1+cr2):\n    result = 3\nelif((distance<cr1 and (distance+cr2 == cr1)) or (distance<cr2 and (distance+cr1 == cr2))):\n    result = 1\nelif((distance<cr1 and (distance+cr2 < cr1)) or (distance<cr2 and (distance+cr1< cr2))):\n    result = 0\nelif(distance < cr1+cr2):\n    result = 2\n\n\n\nprint(result)\n\n"
  },
  {
    "language": "Python",
    "code": "import math\n\nwhile True:\n    try:\n        C1=list(map(int,input().split()))\n        C2=list(map(int,input().split()))\n        \n        d = math.sqrt(math.pow(C2[0]-C1[0],2)+math.pow(C2[1]-C1[1],2))\n        if(d > C1[2]+C2[2]):\n            print(\"4\")\n        elif(d == C1[2]+C2[2]):\n            print(\"3\")\n        elif(math.fabs(C1[2]-C2[2]) < d and d < C1[2]+C2[2]):\n            print(\"2\")\n        elif(d == math.fabs(C1[2]-C2[2])):\n            print(\"1\")\n        elif(d < math.fabs(C1[2]-C2[2])):\n            print(\"0\")\n    except:\n        break;\n\n"
  },
  {
    "language": "Python",
    "code": "import math\nfrom enum import Enum, auto\n\nclass TwoCircle(Enum):\n    DISTANT = auto()\n    CIRCUMCSCRIBING = auto()\n    INTERSECTING = auto()\n    INSCRIBING = auto()\n    CONTAINING = auto()\n\nclass Point():\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def distance(self, pnt):\n        return math.sqrt((self.x - pnt.x)**2 + (self.y - pnt.y)**2)\n\nclass Circle():\n    def __init__(self, x, y, r):\n        self.c = Point(x, y)\n        self.r = r\n\n    def is_intersected(self, cir):\n        d = self.c.distance(cir.c)\n        if d > self.r + cir.r:\n            return TwoCircle.DISTANT\n        elif d == self.r + cir.r:\n            return TwoCircle.CIRCUMCSCRIBING\n        elif d == abs(self.r - cir.r):\n            return TwoCircle.INSCRIBING\n        elif d < abs(self.r - cir.r):\n            return TwoCircle.CONTAINING\n        else:\n            return TwoCircle.INTERSECTING\n\nx1, y1, r1 = list(map(int, input().split(' ')))\nx2, y2, r2 = list(map(int, input().split(' ')))\ncir1 = Circle(x1, y1, r1)\ncir2 = Circle(x2, y2, r2)\n\njudged = cir1.is_intersected(cir2)\nif judged == TwoCircle.DISTANT: print(4)\nelif judged == TwoCircle.CIRCUMCSCRIBING: print(3)\nelif judged == TwoCircle.INTERSECTING: print(2)\nelif judged == TwoCircle.INSCRIBING: print(1)\nelif judged == TwoCircle.CONTAINING: print(0)\n"
  },
  {
    "language": "Python",
    "code": "c1 = list(map(int, input().split()))\nc2 = list(map(int, input().split()))\n\ndis = (c1[0] - c2[0]) ** 2 + (c1[1] - c2[1]) ** 2\n\nif dis > (c1[2] + c2[2]) ** 2:\n  print(4)\nelif dis == (c1[2] + c2[2]) ** 2:\n  print(3)\nelif dis > (c1[2] - c2[2]) ** 2:\n  print(2)\nelif dis == (c1[2] - c2[2]) ** 2:\n  print(1)\nelse:\n  print(0)\n  \n"
  },
  {
    "language": "Python",
    "code": "import cmath\nEPS = 1e-6\n\nx, y, r = map(int, input().split())\nc1 = (complex(x, y), r)\nx, y, r = map(int, input().split())\nc2 = (complex(x, y), r)\n\nif abs(abs(c1[0]-c2[0]) - (c1[1]+c2[1])) <= EPS:\n\tprint(3)\nelif abs(max(c1[1], c2[1]) - min(c1[1], c2[1]) - abs(c1[0]-c2[0])) <= EPS:\n\tprint(1)\nelif abs(c1[0]-c2[0]) > c1[1]+c2[1]:\n\tprint(4)\nelif max(c1[1], c2[1]) - min(c1[1], c2[1]) > abs(c1[0]-c2[0]):\n\tprint(0)\nelse:\n\tprint(2)\n"
  },
  {
    "language": "Python",
    "code": "\nnv,ne = [int(i) for i in input().split()]\n\ng = [[] for i in range(nv)]\n\nfor i in range(ne):\n    s,t = [int(j) for j in input().split()]\n    g[s].append(t)\n\nvisited = [False for i in range(nv)]\nf = 0\n\ndef pursue_from(index):\n    global f\n\n\n    if visited[index]:\n        return\n\n    visited[index] = True\n\n    for next_index in g[index]:\n\n        if next_index == 0:\n            f = 1\n            return\n        pursue_from(next_index)\n\npursue_from(0)\n\nprint(f)\n"
  },
  {
    "language": "Python",
    "code": "import math\n\nc1x,c1y,c1r = [int(i) for i in input().split()]\nc2x,c2y,c2r = [int(i) for i in input().split()]\n\nd = math.sqrt(pow(c1x-c2x, 2) +  pow(c1y-c2y, 2))\n\nif d > c1r + c2r:\n    print(4)\nelif d == c1r + c2r:\n    print(3)\nelif d > s/2:\n    print(2)\nelif d == s/2:\n    print(1)\nelse:\n    print(0)\n"
  },
  {
    "language": "Python",
    "code": "import math\n\nc1x,c1y,c1r = [int(i) for i in input().split()]\nc2x,c2y,c2r = [int(i) for i in input().split()]\n\nd = math.sqrt(pow(c1x-c2x, 2) +  pow(c1y-c2y, 2))\n\nif d > c1r + c2r:\n    print(4)\nelif d == c1r + c2r:\n    print(3)\nelif d + c1r > c2r or d + c2r > c1r:\n    print(2)\nelif d + c1r == c2r or d + c2r == c1r:\n    print(1)\nelse:\n    print(0)\n\n"
  },
  {
    "language": "Python",
    "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\n\"\"\"\ninput:\n1 2 1\n4 2 2\n\noutput:\n3\n\"\"\"\n\nimport sys\nfrom collections import namedtuple\n\n\nclass CircleIntersections(object):\n    def __init__(self, in_data):\n        x1, y1, r1 = map(int, in_data[0].split())\n        x2, y2, r2 = map(int, in_data[1].split())\n\n        Circle = namedtuple('Circle', ('centre', 'radius'))\n        self.c1 = Circle(centre=x1 + y1 * 1j, radius=r1)\n        self.c2 = Circle(centre=x2 + y2 * 1j, radius=r2)\n\n    def calc_intersection(self):\n        c_distance = abs(self.c2.centre - self.c1.centre)\n        r1, r2 = self.c1.radius, self.c2.radius\n\n        if c_distance > r1 + r2:\n            return 4\n        elif c_distance == r1 + r2:\n            return 3\n        elif abs(r1 - r2) < c_distance < r1 + r2:\n            return 2\n        elif c_distance == abs(r1 - r2):\n            return 1\n        else:\n            return 0\n\n\nif __name__ == '__main__':\n    _input = sys.stdin.readlines()\n    case = CircleIntersections(in_data=_input)\n    print(case.calc_intersection())"
  },
  {
    "language": "Python",
    "code": "import math\n\nc1x,c1y,c1r = [int(i) for i in input().split()]\nc2x,c2y,c2r = [int(i) for i in input().split()]\n\nd = math.sqrt(pow(c1x-c2x, 2) +  pow(c1y-c2y, 2))\n\ns = c1r + c2r\n\nif d > s:\n    print(4)\nelif d == s:\n    print(3)\nelif d > 2*s:\n    print(2)\nelif d == 2*s:\n    print(1)\nelse:\n    print(0)\n"
  },
  {
    "language": "Python",
    "code": "if __name__=='__main__' :\n    c1=input().split()\n    c2=input().split()\n\n    cx1 = int(c1[0])\n    cy1 = int(c1[1])\n    cr1 = int(c1[2])\n\n    cx2 = int(c2[0])\n    cy2 = int(c2[1])\n    cr2 = int(c2[2])\n\n    d = ((cx1-cx2)**2+(cy1-cy2)**2)**(1/2)\n    if d > cr1+cr2 :\n        print(4)\n    elif d == cr1+cr2 :\n        print(3)\n    elif (d < cr1+cr2) and (abs(cr1-cr2) < d) :\n        print(2)\n    elif  abs(cr1-cr2) == d :\n        print(1)\n    elif d < abs(cr1-cr2) :\n        print(0)\n\n\n"
  },
  {
    "language": "Python",
    "code": "import math\n\ndef dist(x1, y1, x2, y2):\n    return math.sqrt((x1-x2)**2 + (y1-y2)**2)\n\nc1x, c1y, c1r = map(int, input().split())\nc2x, c2y, c2r = map(int, input().split())\n\nd = dist(c1x, c1y, c2x, c2y)\nif d>c1r+c2r:\n    print(4)\nelif d==c1r+c2r:\n    print(3)\nelif d+c1r==c2r or d+c2r==c1r:\n    print(1)\nelif d+c1r<c2r or d+c2r<c1r:\n    print(0)\nelse:\n    print(2)\n"
  },
  {
    "language": "Python",
    "code": "# Single Source Shortest Path\nclass node():\n    def __init__(self, v, cost):\n        self.v = v\n        self.cost = cost\n\ninfty = 999999999\ndict_c = {}\n[vertex, edge, r] = list(map(int, input(\"\").split()))\nroot_c = [node(r, 0)]\nfinal_c = [infty for i in range(vertex)]\nfinal_c[r] = 0\n\nfor i in range(edge):\n    [e1, e2, c] = list(map(int, input(\"\").split()))\n    if e1 == r:\n        root_c.append(node(e2, c))\n        final_c[e2] = c\n    else:\n        dict_c[(e1, e2)] = c\n\ndef min_heap(i):\n    global root_c\n    l = 2*i\n    r = 2*i + 1\n    if l <= len(root_c) - 1 and root_c[l].cost <= root_c[i].cost:\n        if root_c[l].cost < root_c[i].cost:\n            min = l\n        elif root_c[l].v < root_c[i].v:\n            min = l\n        else:\n            min = i\n    else:\n        min = i\n    if r <= len(root_c) - 1 and root_c[r].cost <= root_c[min].cost:\n        if root_c[r].cost < root_c[min].cost:\n            min = r\n        elif root_c[r].v < root_c[min].v:\n            min = r\n        #else:\n\n    if min != i:\n        root_c[i], root_c[min] = root_c[min], root_c[i]\n        min_heap(min)\n\ndef build_min_heap():\n    global root_c\n    length = len(root_c) - 1\n    for i in range(int(length/2), 0, -1):\n        min_heap(i)\n\ndef extract_min():\n    global root_c\n    min = root_c[1]\n\n    #print(\"min_cost  \", root_c[1].cost, root_c[2].cost, root_c[3].cost, root_c[4].cost, root_c[5].cost, root_c[6].cost, root_c[7].cost)\n    #print(\"min_vertex\", root_c[1].v, root_c[2].v, root_c[3].v, root_c[4].v, root_c[5].v, root_c[6].v, root_c[7].v)\n\n    root_c[1] = root_c[len(root_c) - 1]\n\n    #print(\"1: \",root_c[1].cost, root_c[1].v)\n\n    del root_c[len(root_c) - 1]\n    min_heap(1)\n\n    #print(\"min_cost  2\", root_c[1].cost, root_c[2].cost, root_c[3].cost, root_c[4].cost, root_c[5].cost, root_c[6].cost)\n    #print(\"min_vertex2\", root_c[1].v, root_c[2].v, root_c[3].v, root_c[4].v, root_c[5].v, root_c[6].v)\n    #print(\"length: \",len(root_c))\n\n    return min\n\ndef decrease_key(i, c):\n    global root_c\n    root_c[i].cost = c\n    while i > 1 and root_c[int(i/2)].cost >= root_c[i].cost:\n        if root_c[int(i/2)].cost > root_c[i].cost:\n            root_c[int(i/2)], root_c[i] = root_c[i], root_c[int(i/2)]\n        elif root_c[int(i/2)].v > root_c[i].v:\n            root_c[int(i/2)], root_c[i] = root_c[i], root_c[int(i/2)]\n        else:\n            root_c[int(i/2)], root_c[i] = root_c[int(i/2)], root_c[i]\n        i = int(i/2)\n\ndef min_insert(v, c):\n    global infty, root_c\n    for i in range(1, len(root_c)):\n        if root_c[i].v == v:\n            decrease_key(i,c)\n            return\n\n    root_c.append(node(v, infty))\n    decrease_key(len(root_c) - 1, c)\n\ndef Dijkstra(root, n):\n\n    count = 1\n\n    global infty, dict_c, root_c, final_c\n    label = [i for i in range(n)]\n\n    #print(count, label[root], final_c[label[root]])\n    count += 1\n\n    del label[root]\n\n    while len(label) != 0:\n        if len(root_c) > 1:\n            min_node = extract_min()\n        else:\n            break\n\n        for i in range(len(label)):\n            if min_node.v == label[i]:\n                delete_label = i\n                continue\n\n            if ((min_node.v, label[i]) in dict_c.keys()) == True:\n                if final_c[label[i]] > final_c[min_node.v] + dict_c[(min_node.v, label[i])]:\n                    final_c[label[i]] = final_c[min_node.v] + dict_c[(min_node.v, label[i])]\n                    min_insert(label[i], final_c[label[i]])\n\n        #print(count, label[delete_label], final_c[label[delete_label]])\n        count += 1\n\n        del label[delete_label]\n\nbuild_min_heap()\n\n'''\nprint(\"root_c :\")\nfor i in range(len(root_c)):\n    print(root_c[i].cost)\nprint(\"\\n\")\n'''\n\nDijkstra(r, vertex)\n\n#print(\"\\n\")\n\nfor i in range(vertex):\n    if final_c[i] == infty:\n        print(\"INF\")\n    else:\n        print(final_c[i])\n\n"
  },
  {
    "language": "Python",
    "code": "#!/usr/bin/env python\n\nimport sys\nimport math\nimport itertools as it\nfrom collections import deque\n\nsys.setrecursionlimit(10000000)\n\nx1, y1, r1 = map(int, raw_input().split())\nx2, y2, r2 = map(int, raw_input().split())\n\ndist = (x1 - x2) ** 2 + (y1 - y2) ** 2\n\nif (r1 + r2) ** 2 < dist:\n    print 4\nelif (r1 + r2) ** 2 == dist:\n    print 3\nelif (r1 - r2) ** 2 < dist:\n    print 2\nelif (r1 - r2) ** 2 == dist:\n    print 1\nelse:\n    print 0\n"
  },
  {
    "language": "Python",
    "code": "import math\n\nc1x,c1y,c1r = [int(i) for i in input().split()]\nc2x,c2y,c2r = [int(i) for i in input().split()]\n\nd = math.sqrt(pow(c1x-c2x, 2) +  pow(c1y-c2y, 2))\n\ns = c1r + c2r\n\nif d > s:\n    print(4)\nelif d == s:\n    print(3)\nelse:\n    if c1r > c2r:\n        if d + c2r > c1r:\n            print(2)\n        elif d + c2r == c1r:\n            print(1)\n        else:\n            print(0)\n    else:\n        if d + c1r > c2r:\n            print(2)\n        elif d + c1r == c2r:\n            print(1)\n        else:\n            print(0)\n\n"
  },
  {
    "language": "Python",
    "code": "import math\n\nlistC1=list(map(int,input().split()))\nlistC2=list(map(int,input().split()))\noutput = 0\n\n\ndist = math.sqrt((listC1[0]-listC2[0])**2+(listC1[1]-listC2[1])**2)\nif dist > (listC1[2]+listC2[2]):\n\toutput = 4\nelif dist == (listC1[2]+listC2[2]):\n\toutput = 3\nelif abs(listC1[2]-listC2[2]) < dist < (listC1[2]+listC2[2]):\n\toutput = 2\nelif dist == abs(listC1[2]-listC2[2]):\n\toutput = 1\nelif dist < abs(listC1[2]-listC2[2]):\n\toutput = 0\n\n\nprint(output)\n"
  },
  {
    "language": "Python",
    "code": "#!/usr/bin/env python3\n# CGL_7_A: Circles - Intersection\n\nfrom enum import Enum\nfrom math import sqrt\n\n\nclass Relation(Enum):\n    INCLUDED = 0\n    INSCRIBED = 1\n    INTERSECT = 2\n    CIRCUMSCRIBED = 3\n    NO_CROSS = 4\n\n\ndef circle_intersection(c1, c2):\n    x1, y1, r1 = c1\n    x2, y2, r2 = c2\n    d = distance((x1, y1), (x2, y2))\n\n    if d - (r1 + r2) > 1e-10:\n        return Relation.NO_CROSS\n    elif abs(d - (r1 + r2)) < 1e-10:\n        return Relation.CIRCUMSCRIBED\n    elif d - (r2 - r1) > 1e-10:\n        return Relation.INTERSECT\n    elif abs(d - (r2 - r1)) < 1e-10:\n        return Relation.INSCRIBED\n    else:\n        return Relation.INCLUDED\n\n\ndef distance(p1, p2):\n    x1, y1 = p1\n    x2, y2 = p2\n    return sqrt((x2-x1)**2 + (y2-y1)**2)\n\n\ndef run():\n    c1 = [int(i) for i in input().split()]\n    c2 = [int(i) for i in input().split()]\n\n    if c1[2] > c2[2]:\n        c1, c2 = c2, c1\n\n    print(circle_intersection(c1, c2).value)\n\n\nif __name__ == '__main__':\n    run()\n\n"
  },
  {
    "language": "Python",
    "code": "# Intersection of Circles\nimport math\n\nclass Circle:\n    def __init__(self, x, y, r):\n        self.x = x\n        self.y = y\n        self.r = r\n\ndef Exchange(c1, c2):\n    return list((c2, c1))\n\ndata = list(map(int, input(\"\").split()))\nc1 = Circle(data[0],data[1],data[2])\n\ndata = list(map(int, input(\"\").split()))\nc2 = Circle(data[0],data[1],data[2])\n\nif c1.r < c2.r:\n    [c1, c2] = Exchange(c1, c2)\n \nd = math.sqrt((c1.x - c2.x)**2 + (c1.y - c2.y)**2)\n\nif d > c1.r + c2.r:\n    print(4)\nelif d == c1.r + c2.r:\n    print(3)\nelif c1.r - c2.r < d and d < c1.r + c2.r:\n    print(2)\nelif d == c1.r - c2.r:\n    print(1)\nelif d < c1.r - c2.r:\n    print(0)\n\n"
  },
  {
    "language": "Python",
    "code": "import math\n\nc1x,c1y,c1r = [int(i) for i in input().split()]\nc2x,c2y,c2r = [int(i) for i in input().split()]\n\nd = math.sqrt(pow(c1x-c2x, 2) +  pow(c1y-c2y, 2))\n\ns = c1r + c2r\n\nif d > s:\n    print(4)\nelif d == s:\n    print(3)\nelif d > 2*s:\n    print(2)\nelif d == 2*s:\n    print(1)\nelse:\n    print(0)\n"
  },
  {
    "language": "Python",
    "code": "if __name__=='__main__' :\n    c1=input().split()\n    c2=input().split()\n    \n    x1 = int(c1[0])\n    y1 = int(c1[1])\n    r1 = int(c1[2])\n    x2 = int(c2[0])\n    y2 = int(c2[1])\n    r2 = int(c2[2])\n    d = ((x1-x2)**2+(y1-y2)**2)**(1/2)\n    if d > r1+r2 :\n        print(4)\n    elif d == r1+r2 :\n        print(3)\n    elif (d < r1+r2) and (abs(r1-r2) < d) :\n        print(2)\n    elif  abs(r1-r2) == d :\n        print(1)\n    elif d < abs(r1-r2) :\n        print(0)\n\n"
  },
  {
    "language": "Python",
    "code": "c1x,c1y,c1r = [int(i) for i in input().split()]\nc2x,c2y,c2r = [int(i) for i in input().split()]\n\nd = math.sqrt(pow(c1x-c2x, 2) +  pow(c1y-c2y, 2))\n\ns = c1r + c2r\n\nif d > s:\n    print 4\nelse if d == c:\n    print 3\nelse if d > 2*s:\n    print 2\nelse if d == 2*s:\n    print 1\nelse:\n    print 0\n"
  },
  {
    "language": "Python",
    "code": "from math import sqrt\n\nc1 = list(map(int, input().split()))\nc2 = list(map(int, input().split()))\n\nd = sqrt((c1[0]-c2[0])**2 + (c1[1]-c2[1])**2)\nlsum = c1[2] + c2[2]\nlsub = abs(c1[2] - c2[2])\n\nif d>lsum: print('4')\nif d == lsum: print('3')\nif lsub<d<lsum: print('2')\nif d == lsub: print('1')\nif d<lsub: print('0')\n\n"
  },
  {
    "language": "Python",
    "code": "from math import sqrt\n\nc1x, c1y, c1r = map(int, input().split())\nc2x, c2y, c2r = map(int, input().split())\nd = sqrt((c2x - c1x) ** 2 + (c2y - c1y) ** 2)\nsr, dr = c1r + c2r, abs(c1r - c2r)\neps = 1e-6\nif d - sr > eps:\n    print(4)\nelif abs(d - sr) < eps:\n    print(3)\nelif d - dr > eps:\n    print(2)\nelif abs(d - dr) < eps:\n    print(1)\nelse:\n    print(0)"
  },
  {
    "language": "Python",
    "code": "\n\n\nnv,ne = [int(i) for i in input().split()]\n\ng = []\n\nfor i in range(nv):\n    g.append([])\n\nfor i in range(ne):\n    s,t = [int(j) for j in input().split()]\n    g[s].append(t)\n\ndone = []\n\nf = 0\n\ndef put_forword(index):\n    global f\n\n    if index in done:\n        return\n\n    done.append(index)\n\n    for s in g[index]:\n\n        if s == 0:\n            f = 1\n            return\n        put_forword(s)\n\nput_forword(0)\n\nprint(f)\n\n"
  },
  {
    "language": "Python",
    "code": "x1, y1, r1 = map(int, raw_input().split())\nx2, y2, r2 = map(int, raw_input().split())\nrr = (x1 - x2)**2 + (y1 - y2)**2\nro = (r1 + r2)**2\nri = (r1 - r2)**2\nif rr > ro:\n    print 4\nelif rr == ro:\n    print 3\nelif ri < rr < ro:\n    print 2\nelif ri == rr:\n    print 1\nelse: # rr < ri\n    print 0"
  },
  {
    "language": "Python",
    "code": "import math\n\nc1x,c1y,c1r = [int(i) for i in input().split()]\nc2x,c2y,c2r = [int(i) for i in input().split()]\n\ndist=math.sqrt((c1x-c2x)**2+(c1y-c2y)**2)\n\nif (c1r<c2r):\n    temp=c1r\n    c1r=c2r\n    c2r=temp\n    temp=c1x\n    c1x=c2x\n    c2x=temp\n    temp=c1y\n    c1y=c2y\n    c2y=temp\n    \nif (dist > c1r+c2r):\n    print(4)\n    \nelif (dist == c1r+c2r):\n    print(3)\n    \nelif (dist < c1r+c2r and (dist+c2r)>c1r):\n    print (2)\n \nelif (dist<c1r and (dist+c2r)==c1r):\n    print(1)\n    \nelif ((dist < c1r+c2r) and dist+c2r<c1r):\n    print(0)\nelse:\n    print (\"error\")\n"
  },
  {
    "language": "Python",
    "code": "import math\ndef circle(cx1,cy1,cx2,cy2,r1,r2):\n    d=math.sqrt((cx1-cx2)**2+(cy1-cy2)**2)\n    if d>r1+r2:\n        print(\"4\")\n    elif d==r1+r2:\n        print(\"3\")\n    elif abs(r1-r2)<d<r1+r2:\n        print(\"2\")\n    elif d==abs(r1-r2):\n        print(\"1\")\n    elif d<abs(r1-r2):\n        print(\"0\")\nif __name__==\"__main__\":\n    c1=[int(x)for x in raw_input().split()]\n    c2=[int(x)for x in raw_input().split()]\n    circle(c1[0],c1[1],c2[0],c2[1],c1[2],c2[2])\n\n"
  },
  {
    "language": "Python",
    "code": "import math\n\nc1x,c1y,c1r = [int(i) for i in input().split()]\nc2x,c2y,c2r = [int(i) for i in input().split()]\n\nd = math.sqrt(pow(c1x-c2x, 2) +  pow(c1y-c2y, 2))\n\ns = c1r + c2r\n\nif d > s:\n    print(4)\nelif d == s:\n    print(3)\nelif d > s/2:\n    print(2)\nelif d == s/2:\n    print(1)\nelse:\n    print(0)\n"
  },
  {
    "language": "Python",
    "code": "\n\ndef main():\n    cx1, cy1, r1 = map(int, input().split())\n    cx2, cy2, r2 = map(int, input().split())\n    d = pow((cx2 -cx1)**2 + (cy2 -cy1)**2, 0.5) \n\n    if d > r1 + r2:\n        # 4(not cross)\n        print(\"4\")\n    elif d == r1 + r2:\n        # 3(circumscribed)\n        print(\"3\")\n    elif abs(r1 - r2) < d and d < r1 + r2:\n        # 2(intersec)\n        print(\"2\")\n    elif d == abs(r1 - r2):\n        # 1(inscribed)\n        print(\"1\")\n    elif d < abs(r1 - r2):\n        # 0(includes another)\n        print(\"0\")\n\n\nif __name__==\"__main__\":\n    main()\n\n"
  },
  {
    "language": "Rust",
    "code": "use std::f64::consts::PI;\n\nconst EPS: f64 = 1e-8;\n\nfn main() {\n    let mut sc = Scanner::new();\n\n    let c1p: Pt = sc.next();\n    let c1r: f64 = sc.next();\n\n    let c2p: Pt = sc.next();\n    let c2r: f64 = sc.next();\n\n    let ans = match circle_relationship(&Circle::new(c1p, c1r), &Circle::new(c2p, c2r)) {\n        CircleRelationship::NotCross => 4,\n        CircleRelationship::Circumscribe => 3,\n        CircleRelationship::Cross => 2,\n        CircleRelationship::Inscribe => 1,\n        CircleRelationship::Inclusion => 0,\n    };\n\n    println!(\"{}\", ans);\n}\n\n//==========\n\npub type Pt = complex::Complex<f64>;\n\npub fn cross(a: Pt, b: Pt) -> f64 {\n    (a.conj() * b).im\n}\n\npub fn dot(a: Pt, b: Pt) -> f64 {\n    (a.conj() * b).re\n}\n\npub fn normalize(p: Pt) -> Pt {\n    p / p.norm()\n}\n\n/// Positional relationship of 3-points\n#[derive(Debug, PartialEq, Eq, Clone, Copy)]\npub enum CCW {\n    /// a->b->c is counter clockwise\n    CounterClockwise = 1,\n    /// a->b->c is clockwise\n    Clockwise = -1,\n    /// c--a--b\n    OnLineBack = 2,\n    /// a--b--c\n    OnLineFront = -2,\n    /// a--c--b\n    OnSegment = 0,\n}\n\n/// Positional relationship of 3-points\npub fn ccw(a: Pt, b: Pt, c: Pt) -> CCW {\n    let b = b - a;\n    let c = c - a;\n    if cross(b, c) > 0.0 {\n        CCW::CounterClockwise\n    } else if cross(b, c) < 0.0 {\n        CCW::Clockwise\n    } else if dot(b, c) < 0.0 {\n        CCW::OnLineBack\n    } else if b.norm() < c.norm() {\n        CCW::OnLineFront\n    } else {\n        CCW::OnSegment\n    }\n}\n\n/// Signed area of triangle\npub fn triangle_area_signed(a: Pt, b: Pt, c: Pt) -> f64 {\n    cross(b - a, c - a) / 2.0\n}\n\n/// Area of polygon\npub fn polygon_area_signed(p: &[Pt]) -> f64 {\n    let mut ret = 0.0;\n    for r in p[1..].windows(2) {\n        ret += triangle_area_signed(p[0], r[0], r[1]);\n    }\n    ret\n}\n\n#[derive(Debug, Clone, PartialEq, Eq)]\npub enum PolygonContains {\n    On,\n    In,\n    Out,\n}\n\npub fn polygon_contains(poly: &[Pt], p: Pt) -> PolygonContains {\n    let n = poly.len();\n    let mut is_in = false;\n\n    for i in 0..poly.len() {\n        let a = poly[i] - p;\n        let b = poly[(i + 1) % n] - p;\n        let (a, b) = if a.im > b.im { (b, a) } else { (a, b) };\n\n        if a.im <= 0.0 && 0.0 < b.im && cross(a, b) < 0.0 {\n            is_in = !is_in\n        };\n        if cross(a, b) == 0.0 && dot(a, b) <= 0.0 {\n            return PolygonContains::On;\n        }\n    }\n\n    if is_in {\n        PolygonContains::In\n    } else {\n        PolygonContains::Out\n    }\n}\n\npub fn is_convex(p: &[Pt]) -> bool {\n    let n = p.len();\n    for i in 0..n {\n        if ccw(p[i], p[(i + 1) % n], p[(i + 2) % n]) == CCW::Clockwise {\n            return false;\n        }\n    }\n    true\n}\n\npub fn rem_euclid(a: f64, b: f64) -> f64 {\n    let r = a % b;\n    if r < 0.0 {\n        r + b.abs()\n    } else {\n        r\n    }\n}\n\n/// Andrew's monotone chain convex hull algorithm\npub fn convex_hull(p: Vec<Pt>) -> Vec<Pt> {\n    let n = p.len();\n    assert!(n >= 3);\n\n    let mut p = p;\n    p.sort_by(|x, y| (x.re, x.im).partial_cmp(&(y.re, y.im)).unwrap());\n\n    let mut ret = vec![];\n\n    macro_rules! half_hull {\n        ($r:expr) => {\n            for i in $r {\n                while {\n                    let k = ret.len();\n                    k >= 2 && ccw(ret[k - 2], ret[k - 1], p[i]) == CCW::Clockwise\n                } {\n                    ret.pop();\n                }\n                ret.push(p[i]);\n            }\n        };\n    }\n\n    // lower-hull\n    half_hull!(0..n);\n    // upper-hull\n    half_hull!((0..n - 1).rev());\n\n    ret.pop();\n    ret\n}\n\npub struct Line(Pt, Pt);\npub struct LineSegment(Pt, Pt);\n\npub fn projection(l: &Line, p: Pt) -> Pt {\n    let t = dot(p - l.0, l.0 - l.1) / (l.0 - l.1).norm_sqr();\n    l.0 + (l.0 - l.1) * t\n}\n\npub fn intersect_lines(a: &Line, b: &Line) -> bool {\n    cross(a.1 - a.0, b.1 - b.0) > EPS || cross(a.1 - a.0, b.0 - b.1) < EPS\n}\n\npub fn intersect_segment_pt(a: &LineSegment, p: Pt) -> bool {\n    (a.0 - p).norm() + (a.1 - p).norm() - (a.1 - a.0).norm() < EPS\n}\n\npub fn intersect_segments(a: &LineSegment, b: &LineSegment) -> bool {\n    ccw(a.0, a.1, b.0) as i32 * ccw(a.0, a.1, b.1) as i32 <= 0\n        && ccw(b.0, b.1, a.0) as i32 * ccw(b.0, b.1, a.1) as i32 <= 0\n}\n\npub fn distance_segment_pt(a: &LineSegment, p: Pt) -> f64 {\n    let r = projection(&Line(a.0, a.1), p);\n    if intersect_segment_pt(a, r) {\n        (r - p).norm()\n    } else {\n        (a.0 - p).norm().min((a.1 - p).norm())\n    }\n}\n\npub fn distance_segments(a: &LineSegment, b: &LineSegment) -> f64 {\n    if intersect_segments(a, b) {\n        return 0.0;\n    }\n    distance_segment_pt(a, b.0)\n        .min(distance_segment_pt(a, b.1))\n        .min(distance_segment_pt(b, a.0))\n        .min(distance_segment_pt(b, a.1))\n}\n\n#[derive(Debug)]\npub enum CrossLineSegment {\n    None,\n    Many,\n    One(Pt),\n}\n\nimpl CrossLineSegment {\n    pub fn ok(&self) -> Option<Pt> {\n        match self {\n            &CrossLineSegment::One(p) => Some(p.clone()),\n            _ => None,\n        }\n    }\n}\n\npub fn cross_line_segment(a: &LineSegment, b: &LineSegment) -> CrossLineSegment {\n    use CrossLineSegment::*;\n\n    let ccw_a_b0 = ccw(a.0, a.1, b.0);\n    let ccw_a_b1 = ccw(a.0, a.1, b.1);\n\n    let ccw_b_a0 = ccw(b.0, b.1, a.0);\n    let ccw_b_a1 = ccw(b.0, b.1, a.1);\n\n    if ccw_a_b0 as i32 * ccw_a_b1 as i32 == 0 {\n        if ccw_a_b1 == CCW::CounterClockwise || ccw_a_b1 == CCW::Clockwise {\n            return One(b.0);\n        } else if ccw_a_b0 == CCW::CounterClockwise || ccw_a_b0 == CCW::Clockwise {\n            return One(b.1);\n        } else {\n            return Many;\n        }\n    }\n\n    if ccw_b_a0 as i32 * ccw_b_a1 as i32 == 0 {\n        if ccw_b_a1 == CCW::CounterClockwise || ccw_b_a1 == CCW::Clockwise {\n            return One(a.0);\n        } else if ccw_b_a0 == CCW::CounterClockwise || ccw_b_a0 == CCW::Clockwise {\n            return One(a.1);\n        } else {\n            return Many;\n        }\n    }\n\n    if ccw_a_b0 as i32 * ccw_a_b1 as i32 == -4 || ccw_b_a0 as i32 * ccw_b_a1 as i32 == -4 {\n        return Many;\n    }\n    if ccw_a_b0 as i32 * ccw_a_b1 as i32 > 0 || ccw_b_a0 as i32 * ccw_b_a1 as i32 > 0 {\n        return None;\n    }\n\n    assert!(ccw_a_b0 as i32 * ccw_a_b1 as i32 == -1);\n    assert!(ccw_b_a0 as i32 * ccw_b_a1 as i32 == -1);\n\n    // normalize a to [(0, 0), (0, 1)]\n    let b0 = b.0 - a.0;\n    let b1 = b.1 - a.0;\n    let va = a.1 - a.0;\n\n    let b0 = b0 / va;\n    let b1 = b1 / va;\n    let vb = b1 - b0;\n\n    let t = -b0.im / vb.im;\n    assert!(t >= 0.0 && t <= 1.0);\n\n    One(b.0 + (b.1 - b.0) * t)\n}\n\npub struct Circle {\n    pub center: Pt,\n    pub radius: f64,\n}\n\nimpl Circle {\n    fn new(center: Pt, radius: f64) -> Self {\n        Self { center, radius }\n    }\n}\n\npub enum CircleRelationship {\n    NotCross,\n    Circumscribe,\n    Cross,\n    Inscribe,\n    Inclusion,\n}\n\npub fn circle_relationship(a: &Circle, b: &Circle) -> CircleRelationship {\n    let d = (a.center - b.center).norm();\n\n    if d > a.radius + b.radius {\n        CircleRelationship::NotCross\n    } else if d == a.radius + b.radius {\n        CircleRelationship::Circumscribe\n    } else if d > (a.radius - b.radius).abs() {\n        CircleRelationship::Cross\n    } else if d == (a.radius - b.radius).abs() {\n        CircleRelationship::Inscribe\n    } else {\n        CircleRelationship::Inclusion\n    }\n}\n\n/// Cross point of 2 circles\npub fn cross_circle(a: &Circle, b: &Circle) -> Option<(Pt, Pt)> {\n    let c = (a.center - b.center).norm();\n\n    if c > a.radius + b.radius || c + b.radius < a.radius || c + a.radius < b.radius {\n        return None;\n    }\n\n    let x = (a.radius.powi(2) - b.radius.powi(2) + c.powi(2)) / (2.0 * c);\n    let h = (a.radius.powi(2) - x.powi(2)).sqrt();\n\n    let v = (b.center - a.center) / c;\n    let w = v * Pt::from_polar(&1.0, &(std::f64::consts::PI / 2.0));\n    let c1 = a.center + x * v + h * w;\n    let c2 = a.center + x * v - h * w;\n\n    Some((c1, c2))\n}\n\npub fn cross_circle_line(a: &Circle, l: &Line) -> Option<(Pt, Pt)> {\n    let p = projection(l, a.center);\n    let d = (p - a.center).norm();\n    if d > a.radius {\n        return None;\n    }\n    let e = (a.radius.powi(2) - d.powi(2)).sqrt();\n    let v = normalize(l.0 - l.1);\n    Some((p + e * v, p - e * v))\n}\n\n//==========\n\nmod complex {\n    use std::fmt::Debug;\n    use std::ops::{Add, Div, Mul, Sub};\n\n    #[derive(PartialEq, Eq, Copy, Clone, Hash, Debug, Default)]\n    #[repr(C)]\n    pub struct Complex<T> {\n        /// Real portion of the complex number\n        pub re: T,\n        /// Imaginary portion of the complex number\n        pub im: T,\n    }\n\n    impl<T> Complex<T> {\n        #[inline]\n        pub fn new(re: T, im: T) -> Self {\n            Complex { re, im }\n        }\n    }\n\n    impl Complex<f64> {\n        #[inline]\n        pub fn conj(&self) -> Self {\n            Self::new(self.re.clone(), -self.im.clone())\n        }\n\n        #[inline]\n        pub fn norm(&self) -> f64 {\n            self.re.hypot(self.im)\n        }\n\n        #[inline]\n        pub fn norm_sqr(&self) -> f64 {\n            self.re.clone() * self.re.clone() + self.im.clone() * self.im.clone()\n        }\n\n        #[inline]\n        pub fn arg(&self) -> f64 {\n            self.im.atan2(self.re)\n        }\n\n        #[inline]\n        pub fn from_polar(r: &f64, theta: &f64) -> Complex<f64> {\n            Complex::new(*r * theta.cos(), *r * theta.sin())\n        }\n    }\n\n    impl<T: Add<Output = T>> Add for Complex<T> {\n        type Output = Self;\n        fn add(self, rhs: Self) -> Self::Output {\n            Self::new(self.re + rhs.re, self.im + rhs.im)\n        }\n    }\n\n    impl<T: Sub<Output = T>> Sub for Complex<T> {\n        type Output = Self;\n        fn sub(self, rhs: Self) -> Self::Output {\n            Self::new(self.re - rhs.re, self.im - rhs.im)\n        }\n    }\n\n    impl<T: Copy + Add<Output = T> + Sub<Output = T> + Mul<Output = T>> Mul for Complex<T> {\n        type Output = Self;\n        fn mul(self, rhs: Self) -> Self::Output {\n            Self::new(\n                self.re * rhs.re - self.im * rhs.im,\n                self.re * rhs.im + self.im * rhs.re,\n            )\n        }\n    }\n\n    impl<T: Copy + Mul<Output = T>> Mul<T> for Complex<T> {\n        type Output = Self;\n        fn mul(self, rhs: T) -> Self::Output {\n            Self::new(self.re * rhs, self.im * rhs)\n        }\n    }\n\n    // impl<T: Copy + Mul<Output = T>> Mul<Complex<T>> for T {\n    //     type Output = Complex<T>;\n    //     fn mul(self, rhs: Complex<T>) -> Self::Output {\n    //         Self::new(self * rhs.re, self * rhs.im)\n    //     }\n    // }\n\n    impl Mul<Complex<f64>> for f64 {\n        type Output = Complex<f64>;\n        fn mul(self, rhs: Complex<f64>) -> Self::Output {\n            Complex::new(self * rhs.re, self * rhs.im)\n        }\n    }\n\n    impl<T: Copy + Add<Output = T> + Sub<Output = T> + Mul<Output = T> + Div<Output = T>> Div\n        for Complex<T>\n    {\n        type Output = Self;\n        fn div(self, rhs: Self) -> Self::Output {\n            let d = rhs.re * rhs.re + rhs.im * rhs.im;\n            Self::new(\n                (self.re * rhs.re + self.im * rhs.im) / d,\n                (self.im * rhs.re - self.re * rhs.im) / d,\n            )\n        }\n    }\n\n    impl<T: Copy + Div<Output = T>> Div<T> for Complex<T> {\n        type Output = Self;\n        fn div(self, rhs: T) -> Self::Output {\n            Self::new(self.re / rhs, self.im / rhs)\n        }\n    }\n}\n\n//==========\n\npub struct Scanner {\n    buf: Vec<char>,\n    cur: usize,\n}\n\nimpl Scanner {\n    pub fn new() -> Scanner {\n        Scanner {\n            buf: vec![],\n            cur: 0,\n        }\n    }\n\n    fn fill(&mut self) {\n        let mut s = String::new();\n        let len = std::io::stdin().read_line(&mut s).unwrap();\n        if len == 0 {\n            panic!(\"unexpected EOF\");\n        }\n        for c in s.chars() {\n            self.buf.push(c);\n        }\n    }\n\n    pub fn next_char(&mut self) -> char {\n        'outer: loop {\n            if self.cur >= self.buf.len() {\n                self.fill();\n            }\n            while self.cur < self.buf.len() {\n                if !self.buf[self.cur].is_whitespace() {\n                    break 'outer;\n                }\n                self.cur += 1;\n            }\n        }\n        let ret = self.buf[self.cur];\n        self.cur += 1;\n        ret\n    }\n\n    pub fn next_word(&mut self) -> String {\n        'outer: loop {\n            if self.cur >= self.buf.len() {\n                self.fill();\n            }\n            while self.cur < self.buf.len() {\n                if !self.buf[self.cur].is_whitespace() {\n                    break 'outer;\n                }\n                self.cur += 1;\n            }\n        }\n\n        let mut s = String::new();\n        while self.cur < self.buf.len() && !self.buf[self.cur].is_whitespace() {\n            s.push(self.buf[self.cur]);\n            self.cur += 1;\n        }\n        s\n    }\n\n    pub fn next<T: Reader>(&mut self) -> T {\n        T::read(self)\n    }\n\n    pub fn next_vec_len<T: Reader>(&mut self) -> Vec<T> {\n        let n: usize = self.next();\n        self.next_vec(n)\n    }\n\n    pub fn next_vec<T: Reader>(&mut self, n: usize) -> Vec<T> {\n        (0..n).map(|_| self.next()).collect()\n    }\n}\n\npub trait Reader {\n    fn read(sc: &mut Scanner) -> Self;\n}\n\nimpl<T: Reader> Reader for complex::Complex<T> {\n    fn read(sc: &mut Scanner) -> Self {\n        Self::new(sc.next(), sc.next())\n    }\n}\n\nimpl Reader for char {\n    fn read(sc: &mut Scanner) -> Self {\n        sc.next_char()\n    }\n}\n\nmacro_rules! impl_for_from_str {\n    ($typ:ty) => {\n        impl Reader for $typ {\n            fn read(sc: &mut Scanner) -> Self {\n                sc.next_word().parse().unwrap()\n            }\n        }\n    };\n}\n\nimpl_for_from_str!(i8);\nimpl_for_from_str!(u8);\nimpl_for_from_str!(i16);\nimpl_for_from_str!(u16);\nimpl_for_from_str!(i32);\nimpl_for_from_str!(u32);\nimpl_for_from_str!(i64);\nimpl_for_from_str!(u64);\n// impl_for_from_str!(i128);\n// impl_for_from_str!(u128);\nimpl_for_from_str!(isize);\nimpl_for_from_str!(usize);\nimpl_for_from_str!(f32);\nimpl_for_from_str!(f64);\nimpl_for_from_str!(String);\n\n"
  }
]