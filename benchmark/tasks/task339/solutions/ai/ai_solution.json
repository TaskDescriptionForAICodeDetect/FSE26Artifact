[
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nlong long convertToDecimal(char *s, int base) {\n    long long num = 0;\n    while (*s) {\n        char c = toupper(*s);\n        int digit = (c >= '0' && c <= '9') ? c - '0' : c - 'A' + 10;\n        num = num * base + digit;\n        s++;\n    }\n    return num;\n}\n\nlong long countFactors(long long num, long long factor) {\n    long long count = 0;\n    while (num > 0) {\n        num /= factor;\n        count += num;\n    }\n    return count;\n}\n\nlong long min(long long a, long long b) {\n    return a < b ? a : b;\n}\n\nlong long countTrailingZeros(long long M, int N) {\n    long long zeros = -1;\n    long long tempN = N;\n    for (long long i = 2; i * i <= tempN; i++) {\n        if (tempN % i == 0) {\n            long long exponent = 0;\n            while (tempN % i == 0) {\n                tempN /= i;\n                exponent++;\n            }\n            long long count = countFactors(M, i) / exponent;\n            if (zeros == -1 || count < zeros) {\n                zeros = count;\n            }\n        }\n    }\n    if (tempN > 1) {\n        long long count = countFactors(M, tempN);\n        if (zeros == -1 || count < zeros) {\n            zeros = count;\n        }\n    }\n    return zeros;\n}\n\nint main() {\n    int N;\n    char M_str[100];\n    while (1) {\n        scanf(\"%d %s\", &N, M_str);\n        if (N == 0 && strcmp(M_str, \"0\") == 0) {\n            break;\n        }\n        long long M = convertToDecimal(M_str, N);\n        long long zeros = countTrailingZeros(M, N);\n        printf(\"%lld\\n\", zeros);\n    }\n    return 0;\n}",
    "timestamp": "2025-08-05 21:08:46"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <climits>\n#include <map>\n\nusing namespace std;\n\nint charToValue(char c) {\n    if (c >= '0' && c <= '9') {\n        return c - '0';\n    } else if (c >= 'A' && c <= 'Z') {\n        return 10 + (c - 'A');\n    }\n    return 0;\n}\n\nlong long stringToNumber(const string &s, int base) {\n    long long num = 0;\n    for (char c : s) {\n        num = num * base + charToValue(c);\n    }\n    return num;\n}\n\nvector<pair<int, int>> factorize(int n) {\n    vector<pair<int, int>> factors;\n    if (n == 1) {\n        return factors;\n    }\n    for (int i = 2; i * i <= n; ++i) {\n        if (n % i == 0) {\n            int cnt = 0;\n            while (n % i == 0) {\n                n /= i;\n                cnt++;\n            }\n            factors.emplace_back(i, cnt);\n        }\n    }\n    if (n > 1) {\n        factors.emplace_back(n, 1);\n    }\n    return factors;\n}\n\nlong long countExponent(long long m, int p) {\n    long long count = 0;\n    while (m > 0) {\n        m /= p;\n        count += m;\n    }\n    return count;\n}\n\nint main() {\n    int N;\n    string M;\n    while (cin >> N >> M) {\n        if (N == 0 && M == \"0\") {\n            break;\n        }\n        long long m = stringToNumber(M, N);\n        if (m == 0) {\n            cout << 0 << endl;\n            continue;\n        }\n        vector<pair<int, int>> factors = factorize(N);\n        if (factors.empty()) {\n            cout << 0 << endl;\n            continue;\n        }\n        long long minZeros = LLONG_MAX;\n        for (auto &factor : factors) {\n            int p = factor.first;\n            int cnt = factor.second;\n            long long exponent = countExponent(m, p);\n            minZeros = min(minZeros, exponent / cnt);\n        }\n        cout << minZeros << endl;\n    }\n    return 0;\n}",
    "timestamp": "2025-08-05 21:09:06"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.Scanner;\nimport java.math.BigInteger;\n\npublic class TrailingZerosInFactorial {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        while (true) {\n            int N = scanner.nextInt();\n            String M = scanner.next();\n            if (N == 0 && M.equals(\"0\")) {\n                break;\n            }\n            BigInteger num = new BigInteger(M, N);\n            BigInteger count = BigInteger.ZERO;\n            BigInteger divisor = BigInteger.valueOf(N);\n            while (divisor.compareTo(num) <= 0) {\n                count = count.add(num.divide(divisor));\n                divisor = divisor.multiply(BigInteger.valueOf(N));\n            }\n            System.out.println(count.toString());\n        }\n        scanner.close();\n    }\n}",
    "timestamp": "2025-08-05 21:09:54"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class TrailingZeros {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        \n        while (true) {\n            int N = scanner.nextInt();\n            String M = scanner.next();\n            \n            if (N == 0 && M.equals(\"0\")) {\n                break;\n            }\n            \n            long number = convertToDecimal(M, N);\n            long trailingZeros = countTrailingZeros(number);\n            \n            System.out.println(trailingZeros);\n        }\n        \n        scanner.close();\n    }\n    \n    private static long convertToDecimal(String num, int base) {\n        return Long.parseLong(num, base);\n    }\n    \n    private static long countTrailingZeros(long n) {\n        long count = 0;\n        \n        for (long i = 5; n / i >= 1; i *= 5) {\n            count += n / i;\n        }\n        \n        return count;\n    }\n}",
    "timestamp": "2025-08-05 21:09:58"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <ctype.h>\n#include <math.h>\n\nint convertToDecimal(char* num, int base) {\n    int len = strlen(num);\n    int decimal = 0;\n    int power = 0;\n    \n    for (int i = len - 1; i >= 0; i--) {\n        int digit;\n        if (isdigit(num[i])) {\n            digit = num[i] - '0';\n        } else {\n            digit = toupper(num[i]) - 'A' + 10;\n        }\n        \n        decimal += digit * pow(base, power);\n        power++;\n    }\n    \n    return decimal;\n}\n\nint countTrailingZeros(int m, int base) {\n    int zeros = 0;\n    \n    for (int prime = 2; prime <= base; prime++) {\n        if (base % prime == 0) {\n            int count = 0;\n            while (base % prime == 0) {\n                base /= prime;\n                count++;\n            }\n            \n            int current = prime;\n            int primeZeros = 0;\n            \n            while (current <= m) {\n                primeZeros += m / current;\n                current *= prime;\n            }\n            \n            zeros = fmin(zeros, primeZeros / count);\n        }\n    }\n    \n    return zeros;\n}\n\nint main() {\n    int base, m;\n    char mStr[100];\n    \n    while (1) {\n        scanf(\"%d %s\", &base, mStr);\n        \n        if (base == 0 && strcmp(mStr, \"0\") == 0) {\n            break;\n        }\n        \n        m = convertToDecimal(mStr, base);\n        int result = countTrailingZeros(m, base);\n        \n        printf(\"%d\\n\", result);\n    }\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 21:10:05"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <cmath>\n#include <algorithm>\n\nusing namespace std;\n\nlong long convertToDecimal(string num, int base) {\n    long long decimal = 0;\n    int power = 0;\n    reverse(num.begin(), num.end());\n    \n    for (char digit : num) {\n        int value;\n        if (digit >= '0' && digit <= '9')\n            value = digit - '0';\n        else\n            value = digit - 'A' + 10;\n        \n        decimal += value * pow(base, power);\n        power++;\n    }\n    \n    return decimal;\n}\n\nlong long countTrailingZeros(long long M, int base) {\n    long long zeros = 0;\n    long long divisor = base;\n    \n    while (divisor <= M) {\n        zeros += M / divisor;\n        divisor *= base;\n    }\n    \n    return zeros;\n}\n\nint main() {\n    int N;\n    string M;\n    \n    while (true) {\n        cin >> N >> M;\n        \n        if (N == 0 && M == \"0\")\n            break;\n        \n        long long decimalM = convertToDecimal(M, N);\n        long long result = countTrailingZeros(decimalM, N);\n        \n        cout << result << endl;\n    }\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 21:10:10"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def convert_to_decimal(num_str, base):\n    return int(num_str, base)\n\ndef count_trailing_zeros_factorial(decimal_m, base):\n    def prime_factors(n):\n        factors = {}\n        d = 2\n        while d * d <= n:\n            while (n % d) == 0:\n                factors[d] = factors.get(d, 0) + 1\n                n //= d\n            d += 1\n        if n > 1:\n            factors[n] = factors.get(n, 0) + 1\n        return factors\n\n    def count_factors_in_factorial(n, factor):\n        count = 0\n        power = factor\n        while power <= n:\n            count += n // power\n            power *= factor\n        return count\n\n    base_factors = prime_factors(base)\n    min_trailing_zeros = float('inf')\n\n    for factor, power in base_factors.items():\n        count_factor = count_factors_in_factorial(decimal_m, factor)\n        min_trailing_zeros = min(min_trailing_zeros, count_factor // power)\n\n    return min_trailing_zeros\n\ndef process_input_data(data_sets):\n    result = []\n    for set_data in data_sets:\n        n, m = set_data\n        if n == 0 and m == \"0\":\n            break\n        decimal_m = convert_to_decimal(m, n)\n        trailing_zeros = count_trailing_zeros_factorial(decimal_m, n)\n        result.append(trailing_zeros)\n    return result\n\ndef main():\n    input_data = []\n    while True:\n        line = input().strip()\n        if line == \"0 0\":\n            break\n        n, m = line.split()\n        input_data.append((int(n), m))\n    \n    results = process_input_data(input_data)\n    \n    for res in results:\n        print(res)\n\nif __name__ == \"__main__\":\n    main()",
    "timestamp": "2025-08-13 05:11:08"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "java",
    "code": "import java.util.Scanner;\n\npublic class TrailingZerosInFactorial {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        \n        while (true) {\n            String line = scanner.nextLine();\n            if (line.equals(\"0 0\")) break;\n            \n            String[] parts = line.split(\" \");\n            int N = Integer.parseInt(parts[0]);\n            String M_str = parts[1];\n            \n            int M = Integer.parseInt(M_str, N);\n            int trailingZeros = findTrailingZerosInFactorial(M, N);\n            System.out.println(trailingZeros);\n        }\n        \n        scanner.close();\n    }\n    \n    private static int findTrailingZerosInFactorial(int M, int base) {\n        int[] primeFactors = getPrimeFactors(base);\n        int minZeros = Integer.MAX_VALUE;\n        \n        for (int prime : primeFactors) {\n            int count = countFactorsInFactorial(M, prime);\n            minZeros = Math.min(minZeros, count / countPrime(base, prime));\n        }\n        \n        return minZeros;\n    }\n    \n    private static int countFactorsInFactorial(int num, int factor) {\n        int count = 0;\n        for (long power = factor; power <= num; power *= factor) {\n            count += num / power;\n        }\n        return count;\n    }\n    \n    private static int[] getPrimeFactors(int num) {\n        int[] factors = new int[32];\n        int count = 0;\n        \n        for (int i = 2; i <= num; i++) {\n            if (num % i == 0) {\n                factors[count++] = i;\n                while (num % i == 0) num /= i;\n            }\n        }\n        \n        int[] result = new int[count];\n        System.arraycopy(factors, 0, result, 0, count);\n        return result;\n    }\n    \n    private static int countPrime(int num, int prime) {\n        int count = 0;\n        while (num % prime == 0) {\n            count++;\n            num /= prime;\n        }\n        return count;\n    }\n}",
    "timestamp": "2025-08-13 05:11:19"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c",
    "code": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n#include <math.h>\n\n#define MAX_BASE 36\n\nint convertToDecimal(char *numStr, int base) {\n    int len = strlen(numStr);\n    int result = 0;\n    int power = 1;\n    for (int i = len - 1; i >= 0; i--) {\n        char c = numStr[i];\n        int value;\n        if (isdigit(c)) {\n            value = c - '0';\n        } else {\n            value = toupper(c) - 'A' + 10;\n        }\n        result += value * power;\n        power *= base;\n    }\n    return result;\n}\n\nint countFactors(int n, int factor) {\n    int count = 0;\n    while (n) {\n        n /= factor;\n        count += n;\n    }\n    return count;\n}\n\nint minTrailingZeros(int m, int n) {\n    int result = __INT_MAX__;\n    int factorCount[MAX_BASE] = {0};\n    int originalN = n;\n\n    for (int f = 2; f <= n; f++) {\n        int count = 0;\n        while (n % f == 0) {\n            n /= f;\n            count++;\n        }\n        if (count > 0) {\n            factorCount[f] = count;\n            int trailingCount = countFactors(m, f) / count;\n            if (trailingCount < result) {\n                result = trailingCount;\n            }\n        }\n    }\n    return result;\n}\n\nint main() {\n    char numStr[50];\n    int base;\n\n    while (scanf(\"%d %s\", &base, numStr)) {\n        if (base == 0 && strcmp(numStr, \"0\") == 0) {\n            break;\n        }\n        int m = convertToDecimal(numStr, base);\n        printf(\"%d\\n\", minTrailingZeros(m, base));\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-13 05:11:26"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def convert_to_decimal(num_str, base):\n    digits = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    return int(num_str, base)\n\ndef count_trailing_zeros(m, base):\n    zeros = 0\n    for b in range(2, base + 1):\n        if b == 2 or b == 5:\n            count = 0\n            power = b\n            while power <= m:\n                count += m // power\n                power *= b\n            zeros = max(zeros, count)\n    return zeros\n\ndef main():\n    while True:\n        line = input().strip()\n        if line == '0 0':\n            break\n        \n        base, m_str = line.split()\n        base = int(base)\n        m = convert_to_decimal(m_str, base)\n        \n        result = count_trailing_zeros(m, base)\n        print(result)\n\nif __name__ == '__main__':\n    main()",
    "timestamp": "2025-08-13 05:11:36"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "import sys\nimport math\n\ndef factorize(n):\n    factors = {}\n    if n == 1:\n        return factors\n    # Handle 2 separately\n    while n % 2 == 0:\n        factors[2] = factors.get(2, 0) + 1\n        n = n // 2\n    # Check odd divisors up to sqrt(n)\n    i = 3\n    max_factor = math.sqrt(n) + 1\n    while i <= max_factor:\n        while n % i == 0:\n            factors[i] = factors.get(i, 0) + 1\n            n = n // i\n            max_factor = math.sqrt(n) + 1\n        i += 2\n    if n > 1:\n        factors[n] = factors.get(n, 0) + 1\n    return factors\n\ndef count_trailing_zeros(M, N_factors):\n    min_zeros = float('inf')\n    for p in N_factors:\n        count_p = 0\n        current = M\n        while current > 0:\n            current = current // p\n            count_p += current\n        count_p = count_p // N_factors[p]\n        if count_p < min_zeros:\n            min_zeros = count_p\n    return min_zeros\n\ndef main():\n    for line in sys.stdin:\n        N_str, M_str = line.strip().split()\n        if N_str == '0' and M_str == '0':\n            break\n        N = int(N_str)\n        M = int(M_str, N)\n        if M == 0:\n            print(0)\n            continue\n        N_factors = factorize(N)\n        if not N_factors:\n            print(0)\n            continue\n        zeros = count_trailing_zeros(M, N_factors)\n        print(zeros)\n\nif __name__ == \"__main__\":\n    main()",
    "timestamp": "2025-08-13 05:11:50"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c++",
    "code": "#include <iostream>\n#include <vector>\n#include <cmath>\n\nusing namespace std;\n\nint trailingZeros(int m, int n) {\n    int count = 0;\n    vector<int> prime_factors;\n    int num = n;\n\n    // Find prime factors of the base\n    for (int i = 2; i <= sqrt(num); i++) {\n        if (num % i == 0) {\n            prime_factors.push_back(i);\n            while (num % i == 0) num /= i;\n        }\n    }\n\n    if (num > 1) prime_factors.push_back(num);\n\n    int min_trailing_zeros = INT_MAX;\n\n    // Calculate trailing zeros for each prime factor\n    for (int prime : prime_factors) {\n        int power = 0;\n        int factor_count = 0;\n        int temp_m = m;\n\n        // Find largest power of prime that divides N\n        while (n % prime == 0) {\n            power++;\n            n /= prime;\n        }\n\n        // Calculate number of times prime appears in factorial M!\n        while (temp_m > 0) {\n            factor_count += temp_m / prime;\n            temp_m /= prime;\n        }\n\n        // Calculate trailing zeros for this prime factor\n        min_trailing_zeros = min(min_trailing_zeros, factor_count / power);\n    }\n\n    return min_trailing_zeros;\n}\n\nint convertBaseToDecimal(const string& number, int base) {\n    int value = 0;\n    for (char digit : number) {\n        value *= base;\n        if (isdigit(digit)) {\n            value += digit - '0';\n        } else {\n            value += digit - 'A' + 10;\n        }\n    }\n    return value;\n}\n\nint main() {\n    string line;\n\n    while (true) {\n        getline(cin, line);\n        if (line == \"0 0\") break;\n\n        int base;\n        string number;\n        sscanf(line.c_str(), \"%d %s\", &base, &number);\n\n        int m = convertBaseToDecimal(number, base);\n        cout << trailingZeros(m, base) << endl;\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-13 11:23:29"
  }
]