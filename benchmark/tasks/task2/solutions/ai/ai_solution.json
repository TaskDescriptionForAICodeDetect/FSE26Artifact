[
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Python",
    "code": "def solve_query(n, x, blows):\n    max_damage = max(blow[0] for blow in blows)\n    max_heads_added = max(blow[1] for blow in blows)\n    \n    # If any single blow can defeat Zmei\n    if any(blow[0] >= x for blow in blows):\n        return 1\n    \n    # If no blow reduces heads more than it increases\n    if max_damage <= max_heads_added:\n        return -1\n    \n    # Find the most efficient blow to reduce heads\n    best_net_reduction = max(blow[0] - blow[1] for blow in blows)\n    \n    # Calculate minimum number of blows needed\n    if best_net_reduction > 0:\n        return max(1, (x + best_net_reduction - 1) // best_net_reduction)\n    \n    return -1\n\ndef main():\n    t = int(input())\n    \n    for _ in range(t):\n        n, x = map(int, input().split())\n        blows = []\n        \n        for i in range(n):\n            d, h = map(int, input().split())\n            blows.append((d, h))\n        \n        print(solve_query(n, x, blows))\n\nif __name__ == \"__main__\":\n    main()",
    "timestamp": "2025-08-05 17:31:21"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Python",
    "code": "t = int(input())\nfor _ in range(t):\n    n, x = map(int, input().split())\n    blows = []\n    max_d = 0\n    max_diff = 0\n    for _ in range(n):\n        d, h = map(int, input().split())\n        max_d = max(max_d, d)\n        diff = d - h\n        if diff > max_diff:\n            max_diff = diff\n    if max_d >= x:\n        print(1)\n    elif max_diff <= 0:\n        print(-1)\n    else:\n        remaining = x - max_d\n        blows_needed = (remaining + max_diff - 1) // max_diff\n        print(blows_needed + 1)",
    "timestamp": "2025-08-05 17:31:29"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def minimum_blows(t, queries):\n    results = []\n    for n, x, blows in queries:\n        max_d = 0\n        max_diff = float('-inf')\n\n        for d, h in blows:\n            max_d = max(max_d, d)\n            max_diff = max(max_diff, d - h)\n\n        if max_d >= x:\n            results.append(1)\n            continue\n\n        if max_diff <= 0:\n            results.append(-1)\n            continue\n\n        remaining_heads = x - max_d\n        blows_needed = (remaining_heads + max_diff - 1) // max_diff + 1\n        results.append(blows_needed)\n\n    return results\n\nt = int(input().strip())\nqueries = []\n\nfor _ in range(t):\n    n, x = map(int, input().strip().split())\n    blows = [tuple(map(int, input().strip().split())) for _ in range(n)]\n    queries.append((n, x, blows))\n\nfor result in minimum_blows(t, queries):\n    print(result)",
    "timestamp": "2025-08-12 21:39:57"
  }
]