[
  {
    "language": "Scala",
    "code": "import scala.io.StdIn\n\nobject Main {\n\n  case class Point(x: Double = 0, y: Double = 0) {\n\n    def +(p: Point): Point = Point(this.x + p.x, this.y + p.y)\n\n    def -(p: Point): Point = Point(this.x - p.x, this.y - p.y)\n\n    def *(a: Double): Point = Point(this.x * a, this.y * a)\n\n    def /(a: Double): Point = {\n      assert(a == 0)\n      Point(this.x / a, this.y / a)\n    }\n\n    def norm(): Double = this.x * this.x + this.y * this.y\n\n    def abs(): Double = scala.math.sqrt(norm())\n\n    def <(p: Point): Boolean = this.x < p.x && this.y < p.y\n\n\n    def ==(p: Point): Boolean = scala.math.abs(this.x - p.x) < Cgl0A.EPS &&\n      scala.math.abs(this.y - p.y) < Cgl0A.EPS\n\n\n  }\n\n  case class Segment(p1: Point, p2: Point)\n\n  case class Line(p1: Point, p2: Point)\n\n  type GeoVector = Point\n\n  object Cgl0A {\n    val EPS: Double = scala.math.pow(10,-10)\n\n    // 内積\n    def dot(a: Point, b: Point): Double = a.x * b.x + a.y * b.y\n\n    def isOrthogonal(a: GeoVector, b: GeoVector): Boolean = dot(a, b) == 0.0\n\n    def isOrthogonal(a1: Point, a2: Point, b1: Point, b2: Point): Boolean = {\n      isOrthogonal(a1 - a2, b1 - b2)\n    }\n\n    def isOrthogonal(s1: Segment, s2: Segment): Boolean = {\n      dot(s1.p2 - s1.p1, s2.p2 - s2.p1) == 0.0\n    }\n\n    // 外積\n    def cross(a: Point, b: Point): Double = a.x * b.y - a.y * b.x\n\n    def isParallel(a: GeoVector, b: GeoVector): Boolean = cross(a, b) == 0.0\n\n    def isParallel(a1: Point, a2: Point, b1: Point, b2: Point): Boolean = {\n      isParallel(a1 - a2, b1 - b2)\n    }\n\n    def isParallel(s1: Segment, s2: Segment): Boolean = {\n      cross(s1.p2 - s1.p1, s2.p2 - s2.p1) == 0.0\n    }\n\n    def project(s: Segment, p: Point): Point = {\n      val base: GeoVector = s.p2 - s.p1\n      val r: Double = Cgl0A.dot(p - s.p1, base) / base.norm()\n      s.p1 + base * r\n    }\n\n    def reflect(s: Segment, p: Point): Point = {\n      p + (project(s, p) - p) * 2.0\n    }\n\n    def getDistance(a: Point, b: Point): Double = (a - b).abs()\n\n    def getDistanceLP(l: Line, a: Point): Double = {\n      scala.math.abs(cross(l.p2 - l.p1, a - l.p1) / (l.p2 - l.p1).abs())\n    }\n\n    def getDistanceSP(s: Segment, a: Point): Double = {\n      if (dot(s.p2 - s.p1, a - s.p1) < 0.0) (a - s.p1).abs()\n      else if (dot(s.p1 - s.p2, a - s.p2) < 0.0) (a - s.p2).abs()\n      else getDistanceLP(s.asInstanceOf[Line], a)\n    }\n\n    val COUNTER_CLOCKWISE: Int = 1\n    val CLOCKWISE: Int = -1\n    val ONLINE_BACK: Int= 2\n    val ONLINE_FRONT: Int = -2\n    val ON_SEGEMENT: Int = 0\n\n    def ccw(p0: Point, p1: Point, p2: Point): Int = {\n      val a: GeoVector = p1 - p0\n      val b: GeoVector = p2 - p0\n\n      if (cross(a, b) > EPS) COUNTER_CLOCKWISE\n      else if (cross(a, b) < -1*EPS) CLOCKWISE\n      else if (dot(a, b) < -1*EPS) ONLINE_BACK\n      else if (a.norm() < b.norm()) ONLINE_FRONT\n      else ON_SEGEMENT\n      \n    }\n    \n  }\n\n\n  def main(args: Array[String]): Unit = {\n    val a = StdIn.readLine().split(' ').map(_.toDouble)\n    val p0 = Point(a(0), a(1))\n    val p1 = Point(a(2), a(3))\n    val q = StdIn.readLine().toInt\n    (0 until q).foreach { i =>\n      val ai = StdIn.readLine().split(' ').map(_.toDouble)\n      val qi = Point(ai(0), ai(1))\n      \n      Cgl0A.ccw(p0, p1, qi) match {\n        case Cgl0A.COUNTER_CLOCKWISE => println(\"COUNTER_CLOCKWISE\")\n        case Cgl0A.CLOCKWISE => println(\"CLOCKWISE\")\n        case Cgl0A.ONLINE_BACK => println(\"ONLINE_BACK\")\n        case Cgl0A.ONLINE_FRONT => println(\"ONLINE_FRONT\")\n        case Cgl0A.ON_SEGEMENT => println(\"ON_SEGEMENT\")\n        case _ => println(\"ERROR\")\n      }\n    }\n\n  }\n\n}\n"
  },
  {
    "language": "Scala",
    "code": "import scala.io.StdIn\n\nobject Main {\n\n  case class Point(x: Double = 0, y: Double = 0) {\n\n    def +(p: Point): Point = Point(this.x + p.x, this.y + p.y)\n\n    def -(p: Point): Point = Point(this.x - p.x, this.y - p.y)\n\n    def *(a: Double): Point = Point(this.x * a, this.y * a)\n\n    def /(a: Double): Point = {\n      assert(a == 0)\n      Point(this.x / a, this.y / a)\n    }\n\n    def norm(): Double = this.x * this.x + this.y * this.y\n\n    def abs(): Double = scala.math.sqrt(norm())\n\n    def <(p: Point): Boolean = this.x < p.x && this.y < p.y\n\n\n    def ==(p: Point): Boolean = scala.math.abs(this.x - p.x) < Cgl0A.EPS &&\n      scala.math.abs(this.y - p.y) < Cgl0A.EPS\n\n\n  }\n\n  case class Segment(p1: Point, p2: Point)\n\n  case class Line(p1: Point, p2: Point)\n\n  type GeoVector = Point\n\n  object Cgl0A {\n    val EPS: Double = scala.math.pow(10,-10)\n\n    // 内積\n    def dot(a: Point, b: Point): Double = a.x * b.x + a.y * b.y\n\n    def isOrthogonal(a: GeoVector, b: GeoVector): Boolean = dot(a, b) == 0.0\n\n    def isOrthogonal(a1: Point, a2: Point, b1: Point, b2: Point): Boolean = {\n      isOrthogonal(a1 - a2, b1 - b2)\n    }\n\n    def isOrthogonal(s1: Segment, s2: Segment): Boolean = {\n      dot(s1.p2 - s1.p1, s2.p2 - s2.p1) == 0.0\n    }\n\n    // 外積\n    def cross(a: Point, b: Point): Double = a.x * b.y - a.y * b.x\n\n    def isParallel(a: GeoVector, b: GeoVector): Boolean = cross(a, b) == 0.0\n\n    def isParallel(a1: Point, a2: Point, b1: Point, b2: Point): Boolean = {\n      isParallel(a1 - a2, b1 - b2)\n    }\n\n    def isParallel(s1: Segment, s2: Segment): Boolean = {\n      cross(s1.p2 - s1.p1, s2.p2 - s2.p1) == 0.0\n    }\n\n    def project(s: Segment, p: Point): Point = {\n      val base: GeoVector = s.p2 - s.p1\n      val r: Double = Cgl0A.dot(p - s.p1, base) / base.norm()\n      s.p1 + base * r\n    }\n\n    def reflect(s: Segment, p: Point): Point = {\n      p + (project(s, p) - p) * 2.0\n    }\n\n    def getDistance(a: Point, b: Point): Double = (a - b).abs()\n\n    def getDistanceLP(l: Line, a: Point): Double = {\n      scala.math.abs(cross(l.p2 - l.p1, a - l.p1) / (l.p2 - l.p1).abs())\n    }\n\n    def getDistanceSP(s: Segment, a: Point): Double = {\n      if (dot(s.p2 - s.p1, a - s.p1) < 0.0) (a - s.p1).abs()\n      else if (dot(s.p1 - s.p2, a - s.p2) < 0.0) (a - s.p2).abs()\n      else getDistanceLP(s.asInstanceOf[Line], a)\n    }\n\n    val COUNTER_CLOCKWISE: Int = 1\n    val CLOCKWISE: Int = -1\n    val ONLINE_BACK: Int= 2\n    val ONLINE_FRONT: Int = -2\n    val ON_SEGMENT: Int = 0\n\n    def ccw(p0: Point, p1: Point, p2: Point): Int = {\n      val a: GeoVector = p1 - p0\n      val b: GeoVector = p2 - p0\n\n      if (cross(a, b) > EPS) COUNTER_CLOCKWISE\n      else if (cross(a, b) < -1*EPS) CLOCKWISE\n      else if (dot(a, b) < -1*EPS) ONLINE_BACK\n      else if (a.norm() < b.norm()) ONLINE_FRONT\n      else ON_SEGMENT\n      \n    }\n    \n  }\n\n\n  def main(args: Array[String]): Unit = {\n    val a = StdIn.readLine().split(' ').map(_.toDouble)\n    val p0 = Point(a(0), a(1))\n    val p1 = Point(a(2), a(3))\n    val q = StdIn.readLine().toInt\n    (0 until q).foreach { i =>\n      val ai = StdIn.readLine().split(' ').map(_.toDouble)\n      val qi = Point(ai(0), ai(1))\n      \n      Cgl0A.ccw(p0, p1, qi) match {\n        case Cgl0A.COUNTER_CLOCKWISE => println(\"COUNTER_CLOCKWISE\")\n        case Cgl0A.CLOCKWISE => println(\"CLOCKWISE\")\n        case Cgl0A.ONLINE_BACK => println(\"ONLINE_BACK\")\n        case Cgl0A.ONLINE_FRONT => println(\"ONLINE_FRONT\")\n        case Cgl0A.ON_SEGMENT => println(\"ON_SEGMENT\")\n        case _ => println(\"ERROR\")\n      }\n    }\n\n  }\n\n}\n\n"
  },
  {
    "language": "Scala",
    "code": "import scala.io.StdIn._\n\nimport Math._\nobject Main extends App {\n  val eps0 = 1e-12\n\n  val Seq(xp1, yp1, xp2, yp2) = readLine.split(' ').map(_.toDouble).toList\n  val vx1 = xp2 - xp1\n  val vy1 = yp2 - yp1\n\n\n  val q = readLine.toInt\n  for (i <- 0 until q) {\n    val Seq(x, y) = readLine.split(' ').map(_.toDouble).toList\n    val vx2 = x - xp1\n    val vy2 = y - yp1\n\n    val rot = vx1 * vy2 - vy1 * vx2\n\n    println(if (rot.abs < eps0) {\n      if (vx1 * vx2 + vy1 * vy2 < 0) {\n        \"ONLINE_BACK\"\n      } else {\n        if (vx2*vx2 + vy2*vy2 > vx1*vx1 + vy1*vy1) \"ONLINE_FRONT\" else \"ON_SEGMENT\"\n      }\n    } else {\n      if (rot > 0) \"COUNTER_CLOCKWISE\" else \"CLOCKWISE\"\n    })\n  }\n}\n\n"
  },
  {
    "language": "Scala",
    "code": "import scala.io.StdIn.{readLine, readInt}\nimport scala.collection.mutable.ArrayBuffer\n\nobject Main {\n  def cross(x0:Double, y0:Double, x1:Double, y1:Double) = x0*y1-x1*y0\n  def inner(x0:Double, y0:Double, x1:Double, y1:Double) = x0*x1+y1*y0\n  def norm(x:Double, y:Double) = Math.pow(x,2)+Math.pow(y,2)\n\n  def main(args:Array[String]) = {\n   val b = new ArrayBuffer[String]\n   val p = readLine.split(\" \").map(_.toDouble)\n   val n = readInt\n\n   val (x0,y0,x1,y1) = (p(0),p(1),p(2),p(3))\n   val (x,y) = (x1-x0,y1-y0)\n\n   for(i<-0 until n) {\n     val p1 = readLine.split(\" \").map(_.toDouble)\n     val (x2,y2) = (p1(0)-x0, p1(1)-y0)\n     if(cross(x,y,x2,y2) > (1e-10)) b += \"COUNTER_CLOCKWISE\"\n     else if(cross(x,y,x2,y2) < -(1e-10)) b += \"CLOCKWISE\"\n     else if(inner(x,y,x2,y2) < -(1e-10)) b += \"ONLINE_BACK\"\n     else if(norm(x,y) < norm(x2,y2)) b += \"ONLINE_FRONT\"\n     else b += \"ON_SEGMENT\"\n   }\n   println(b.mkString(\"\\n\"))\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> P;\ntypedef complex<double> V;\ntypedef vector<P> vecP;\ntypedef pair<P,P> L;\ntypedef pair<P,P> S;\ntypedef pair<P,double> C;\nconst double eps=1e-8;\nconst double PI=acos(-1);\nconst double PI2=PI*2.0;\n\nnamespace std{\n  bool operator < (const P &a,const P &b){\n    return (a.imag()==b.imag()?\n            a.real()<b.real():\n            a.imag()<b.imag());\n  }\n};\n\nV normal(V a){\n  assert( abs(a)>0 );\n  return a/abs(a);\n}\n\ndouble Sqrt( double x ){\n  if(x<0)return 0;\n  else return sqrt(x);\n}\n\nP Vector(L a){\n  return a.second-a.first;\n}\n\nbool eq(double a,double b){\n  return (-eps<a-b&&a-b<eps);\n}\n\nbool eq(P a,P b){\n  return ( eq(a.real(),b.real()) && eq(a.imag(),b.imag()) );\n}\n\ndouble dot(P a,P b){\n  return real(b*conj(a));\n}\n\ndouble cross(P a,P b){\n  return imag(b*conj(a));\n}\n\ndouble getArg(P a,P b){\n  return arg(b*conj(a));\n}\n\ndouble getTime(V a,V b){\n  assert( eq(cross(a,b),0) );\n  return ( dot(a,b) < 0 ? -1.0 : 1.0 ) * abs(b) / abs(a);\n}\n\n\nP project(P a,P b,P c){\n  b-=a,c-=a;\n  return a+b*real(c/b);\n}\n\nP reflect(P a,P b,P c){\n  b-=a,c-=a;\n  return a+b*conj(c/b);\n}\n\nint ccw(P a,P b,P c){\n  P ab=b-a,ac=c-a;\n  P k=ac*conj(ab);\n  if(k.imag()>0)return 1;\n  if(k.imag()<0)return -1;\n  if(k.real()<0)return 2;\n  if(abs(ab)<abs(ac))return -2;\n  return 0;\n}\n\nbool isParallel(P a,P b){\n  return eq(0, cross(a,b));\n}\n\nbool isParallel(L l0,L l1){\n  return eq(0, cross( Vector(l0) , Vector(l1) ) );\n}\n\nbool onLP(L l,P p){\n  P a=l.first, b=l.second;\n  return eq(0, cross(b-a,p-a));\n}\n\nbool onSP(S s,P p){\n  P a=s.first, b=s.second;\n  return eq( abs(b-a) , abs(a-p)+abs(b-p) );\n}\n\nbool isCrossSS(S s0,S s1){\n  P a=s0.first, b=s0.second;\n  P c=s1.first, d=s1.second;\n  int f0 = ccw(a,b,c) * ccw(a,b,d);\n  int f1 = ccw(c,d,a) * ccw(c,d,b);\n  return (f0<=0 && f1<=0);\n}\n\nbool isCrossLS(L l,S s){\n  P a=l.first, b=l.second;\n  P c=s.first, d=s.second;\n  return ( ccw(a,b,c) * ccw(a,b,d) <= 0 );\n}\n\ndouble distLP(L l,P p){\n  P a=l.first, b=l.second;\n  double res = cross(b-a,p-a) / abs(b-a);\n  return abs(res);\n}\n\ndouble distSP(S s,P p){\n  P a=s.first, b=s.second;\n  if( dot(b-a,p-a) < eps )return abs(p-a);\n  if( dot(a-b,p-b) < eps )return abs(p-b);\n  return distLP(s,p);\n}\n\nP getCrossLL(L l0,L l1){\n  P a=l0.first, b=l0.second;\n  P c=l1.first, d=l1.second;\n  a-=d;b-=d;c-=d;\n  return d+a+(b-a)*imag(a/c)/imag(a/c-b/c);\n}\n\n\n \nint inPolygon(vecP &t,P p){\n  int n=t.size();\n  double sum=0;\n  for(int i=0;i<n;i++){\n    P a=t[i],b=t[(i+1==n?0:i+1)];\n    if( onSP(S(a,b),p) )return 1;\n    sum+= getArg(a-p,b-p);\n  }\n  if( abs(sum) < eps )return 0;\n  else return 2;\n}\n\nvecP andrewScan(vecP &t){\n  int N=t.size(),C=0;\n  vecP R(N);\n  for(int i=0;i<N;i++){\n    while(2<=C&&ccw(R[C-2],R[C-1],t[i])==-1)C--;\n    R[C++]=t[i];\n  }\n  vecP res(C);\n  for(int i=0;i<C;i++)res[i]=R[i];\n  return res;\n}\n \nvecP convexHull(vecP &t){\n  sort(t.begin(),t.end());\n  vecP u=andrewScan(t);\n  reverse(t.begin(),t.end());\n  vecP l=andrewScan(t);\n  for(int i=1;i+1<(int)l.size();i++)u.push_back(l[i]);\n  return u;\n}\n\nvecP cutConvex(vecP &t,L l){\n  P a=l.first, b=l.second;\n  int N=t.size();\n  vecP res;\n  for(int i=0;i<N;i++){\n    P c=t[i],d=t[(i+1)%N];\n    int C=ccw(a,b,c),D=ccw(a,b,d);\n    if(C!=-1)res.push_back(c);\n    if(C==-D&&abs(C)==1)res.push_back(getCrossLL( l ,L(c,d) ));\n  }\n  return res;\n}\n\nP getVector(const vecP &t, int id){\n  int n=t.size();\n  return t[ (id+1)%n ] - t[id%n];\n}\n\ndouble convex_diameter(vecP &t) {\n  int n = t.size();\n  int is = 0, js = 0;\n  for (int i = 1; i < n; ++i) {\n    if (imag(t[i]) > imag(t[is])) is = i;\n    if (imag(t[i]) < imag(t[js])) js = i;\n  }\n  double maxd = norm(t[is]-t[js]);\n \n  int i, maxi, j, maxj;\n  i = maxi = is;\n  j = maxj = js;\n  do {\n    \n    if (cross( getVector(t,i), getVector(t,j)) >= 0) j = (j+1) % n;\n    \n    else i = (i+1) % n;\n    if (norm(t[i]-t[j]) > maxd) {\n      maxd = norm(t[i]-t[j]);\n      maxi = i; maxj = j;\n    }\n  } while (i != is || j != js);\n  return maxd; /* farthest pair is (maxi, maxj). */\n}\n\nbool compare_y(const P &a,const P &b){\n  return a.imag() < b.imag();\n}\n\ndouble closest_pair(P *a, int n){\n  if(n <= 1) return 1e30;\n  int m = n / 2;\n  double x = a[m].real();\n  double d = min(closest_pair(a, m), closest_pair(a + m, n - m));\n  inplace_merge(a, a + m, a + n, compare_y);\n  vector<P> b;\n  for(int i=0;i<n;i++){\n    if( abs(a[i].real() - x) >= d) continue;\n    for(int j=0;j<(int)b.size();j++){\n      double dx = real(a[i] - b[b.size() - j - 1]);\n      double dy = imag(a[i] - b[b.size() - j - 1]);\n      if(dy >= d) break;\n      d = min(d, sqrt(dx * dx + dy * dy));\n    }\n    b.push_back(a[i]);\n  }\n  return d;\n}\n\nP _pool[200005];\ndouble minDist(vecP &t){\n  int n=t.size();\n  for(int i=0;i<n;i++)_pool[i]=t[i];\n  sort( _pool, _pool+n);\n  return closest_pair(_pool, n);\n}\n\nint getStateCC(C a,C b){\n  double ar=a.second, br=b.second;\n  double dist=abs(a.first-b.first);\n  if(dist>ar+br+eps)return 4;\n  if(dist>ar+br-eps)return 3;\n  if(dist>abs(ar-br)+eps)return 2;\n  if(dist>abs(ar-br)-eps)return 1;\n  return 0;\n}\n\nP getCrossCC(C a,C b){\n  P p1=a.first, p2=a.second;\n  double r1=a.second, r2=b.second;\n  double cA = (r1*r1+norm(p1-p2)-r2*r2) / (2.0*r1*abs(p1-p2));\n  return p1+(p2-p1)/abs(p1-p2)*r1*P(cA,Sqrt(1.0-cA*cA));\n}\n\nS getTangentCP(C a,P p){\n  P base=a.first-p;\n  double ar=a.second;\n  double w=Sqrt(norm(base)-ar*ar);\n  P s=p+base*P(w,ar)/norm(base)*w;\n  P t=p+base*P(w,-ar)/norm(base)*w;\n  return S(s,t);\n}\n\nS getInTangent(C a,C b,double flg=1.0){\n  P ap=a.first,bp=b.first;\n  double ar=a.second,br=b.second;\n  \n  P base=bp-ap;\n  double w=ar+br;\n  double h=Sqrt(norm(base)-w*w);\n  P k=base*P(w,h*flg)/norm(base);\n  return S(ap+k*ar,bp-k*br);\n}\n  \nS getOutTangent(C a,C b,double flg=1.0){\n  P ap=a.first,bp=b.first;\n  double ar=a.second,br=b.second;\n  \n  P base=bp-ap;\n  double h=br-ar;\n  \n  double w=Sqrt(norm(base)-h*h);\n  P k=base*P(w,h*flg)/norm(base)*P(0,flg);\n  return S(ap+k*ar,bp+k*br);\n}\n  \nvector<S> getTangent(C a,C b){\n  P ap=a.first,bp=b.first;\n  double ar=a.second,br=b.second;\n  \n  vector<S> res;\n  double dist=abs(ap-bp);\n    \n  if(dist>ar+br+eps)\n    res.push_back(getInTangent(a,b,1));\n  \n  if(dist>ar+br-eps)\n    res.push_back(getInTangent(a,b,-1));\n  \n  if(dist>abs(ar-br)+eps)\n    res.push_back(getOutTangent(a,b,1));\n  \n  if(dist>abs(ar-br)-eps)\n    res.push_back(getOutTangent(a,b,-1));\n  \n  return res;\n}\n\n\nvecP getCrossCS(C cir,S s, bool debug=false){\n  P a=s.first, b=s.second;\n  double cr=cir.second;\n  P cp=cir.first;\n  \n  vecP res;\n  P base=b-a,  target=project(a,b,cp);\n  \n  double length=abs(base), h=abs(cp-target);\n  base/=length;\n  \n  if(cr+eps<h)return res;\n  double w=Sqrt(cr*cr-h*h);\n  double L=getTime( normal(b-a) ,target-a)-w,  R=L+w*2.0;\n  \n  if( -eps<L && L< length+eps )res.push_back(a+base*L);\n  if( eq(L,R) )return res;\n  if( -eps<R && R< length+eps )res.push_back(a+base*R);\n  return res;\n}\n \ndouble getArea(C c,P a,P b){\n  P cp=c.first;\n  double cr=c.second;\n  \n  P va=cp-a,  vb=cp-b;\n  double A=abs(va), B=abs(vb);\n  double f=cross(va,vb), d=distSP( S(a,b) ,cp), res=0;\n  \n  if( eq(0, f ) )return 0;\n  if(A<cr+eps&&B<cr+eps)return f*0.5;\n  if(d>cr-eps)return cr*cr*PI*getArg(va,vb)/PI2;\n   \n  vecP u=getCrossCS(c, S(a,b) );\n  \n  assert( !u.empty() );\n  u.insert(u.begin(), a),  u.push_back(b);\n \n  for(int i=0;i+1<(int)u.size();i++) res+=getArea(c,u[i],u[i+1]);\n  return res;\n}\n \ndouble getCrossArea(vecP t,C c){\n  int n=t.size();\n  if(n<3)return 0;\n  double res=0;\n  for(int i=0;i<n;i++){\n    P a=t[i], b=t[(i+1)%n];\n    res+=getArea(c,a,b);\n  }\n  return res;\n}\n\nP input(){\n  int x,y;\n  cin>>x>>y;\n  return P(x,y);\n}\n\nvoid pr(P p,string str){\n  printf(\"%.10f %.10f\",p.real(),p.imag());\n  cout<<str;\n}\n\n\nint main(){\n  P s,t;\n  s=input(), t=input();\n  int q;\n  cin>>q;\n  for(int i=0;i<q;i++){\n    P p=input();\n\n    int ans= ccw(s,t,p);\n    if(ans==1)cout<<\"COUNTER_CLOCKWISE\"<<endl;\n    if(ans==-1)cout<<\"CLOCKWISE\"<<endl;\n    if(ans==0)cout<<\"ON_SEGMENT\"<<endl;\n    if(ans==-2)cout<<\"ONLINE_FRONT\"<<endl;\n    if(ans==2)cout<<\"ONLINE_BACK\"<<endl;\n  }\n  \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<math.h>\n#include<string>\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\nusing namespace std;\nclass Point\n{\n    public:\n    double x, y;\n\n    Point(double x = 0, double y = 0): x(x), y(y) {}\n\n    Point operator + (Point p) {return Point(x + p.x, y + p.y); }\n    Point operator - (Point p) {return Point(x - p.x, y - p.y); }\n    Point operator * (double a) {return Point(x * a, y * a);}\n    Point operator / (double a) {return Point(x / a, y / a);}\n\n    double abs() {return sqrt(norm());}\n    double norm() {return x * x + y * y;}\n    \n    bool operator < (const Point &p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point &p) const{\n        return equals(x, p.x) && equals(y, p.y);\n    }\n};typedef Point Vector;\n\ndouble dot(Vector a, Vector b){\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b){\n    return a.x * b.y - a.y * b.x;\n}\n\nstring ccw(Point p0, Point p1, Point p2){\n    Vector a = p1 - p0, b = p2 - p0;\n    if (cross(a, b) > EPS) return \"COUNTER_CLOCKWISE\";\n    if (cross(a, b) < -EPS) return \"CLOCKWISE\";\n    if (dot(a, b) < -EPS) return \"ONLINE_BACK\";\n    if (a.norm() < b.norm()) return \"ONLINE_FRONT\";\n    return \"ON_SEGMENT\";\n}\n#include<iostream>\nint main(){\n    int x0, y0, x1, y1, x2, y2, q;\n    cin >> x0 >> y0 >> x1 >> y1 >> q;\n    Point p0 = Point(x0, y0), p1 = Point(x1, y1);\n    for (int i = 0; i < q; i++)\n    {\n        cin >> x2 >> y2;\n        Point p2 = Point(x2, y2);\n        cout << ccw(p0, p1, p2) << endl;\n    }\n    \n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include<cstdio>\n#include<cmath>\n#include<cstring>\n#include<algorithm>\n#include<vector>\nusing namespace std;\n#define db double\nconst db eps = 1e-8;\n\nstruct Point{\n    db x, y;\n    Point(db x=0, db y=0): x(x), y(y) {}    //必须有初始化\n    bool operator < (const Point &p){\n        return x < p.x || (x == p.x && y < p.y);\n    }\n};\n\ntypedef Point Vector;\nVector operator + (Vector a, Vector b){ return Point(a.x+b.x, a.y+b.y);}\nVector operator - (Point a, Point b){ return Vector(a.x-b.x, a.y-b.y);}\nVector operator * (Vector a, db k){ return Vector(a.x*k, a.y*k);}\nVector operator / (Vector a, db k){ return Vector(a.x/k, a.y/k);}\n\n//inline将函数名为内联函数，不使用栈空间，直接运算，但不能有while,switch等复杂语句\ninline db dot(Vector a, Vector b){\n    return a.x*b.x + a.y*b.y;\n}\ninline db cross(Vector a, Vector b){\n    return a.x*b.y - b.x*a.y;\n}\ndb length(Vector a){\n    return sqrt(dot(a, a));\n}\ndb angle(Vector a, Vector b){\n    return acos(dot(a, b) / length(a) / length(b));\n}\n\nint dcmp(db x){\n    if(fabs(x) < eps) return 0;\n    return x < 0? -1: 1;\n}\nbool operator == (Point a, Point b){\n    return dcmp(a.x-b.x) == 0 && dcmp(a.y-b.y) == 0;\n}\n\nstruct Segment{\n    Point p1, p2;\n};\ntypedef Segment Line;\nvector<Point> Polygon;\nPoint project(Line l, Point p){\n    Vector a = l.p2 - l.p1, b = p - l.p1;\n    db len_a = dot(a, a);   //这里不加sqrt，是因为下面算投影长度时，要除以两次len_a\n    Vector tmp = a * (dot(a, b) / len_a);\n    return Point(tmp.x+l.p1.x, tmp.y+l.p1.y);\n}\nPoint reflect(Line l, Point p){\n    Point tmp = project(l, p);\n    return p + (tmp - p)*2;\n}\n\nvoid line_relation(Point p1, Point p2, Point p3, Point p4){\n    Vector a = p2 - p1, b = p4 - p3;\n    if(cross(a, b) == 0)\n        puts(\"parallel\");\n    else if(dot(a, b) == 0)\n        puts(\"orthogonal\");\n    else\n        puts(\"others\");\n}\nint com_segment_relation(Point p0, Point p1, Point p2){\n    Vector a = p1-p0, b = p2-p0;\n    db flag = cross(p1-p0, p2-p0);\n    if(flag < 0)  return 2;\n    else if(flag > 0)  return 1;\n    else{       //重合\n        if(a.x*b.x < 0 || a.y*b.y < 0) return 3;\n        else if(length(a) < length(b)) return 4;\n        else return 5;\n    }\n}\n\nint segment_intersection(Point p1, Point p2, Point p3, Point p4){\n    Point node1[2] = {p1, p2}, node2[2] = {p3, p4};\n    sort(node1, node1+2), sort(node2, node2+2);\n    if(node2[1] < node1[0] || node1[1] < node2[0])\n        return 0;       //同一直线上，最大最小排除\n    else if(cross(p2-p1, p3-p1)*cross(p2-p1, p4-p1) > 0 || cross(p4-p3, p1-p3)*cross(p4-p3, p2-p3) > 0)\n        return 0;\n    else\n        return 1;\n}\nint main()\n{\n    Point p1, p2, p3, p4;\n    int n;\n    cin >>p1.x >>p1.y >>p2.x >>p2.y;\n    cin >>n;\n    while(n --){\n        cin >>p3.x >>p3.y;\n        int flag = com_segment_relation(p1, p2, p3);\n        if(flag == 1)   puts(\"COUNTER_CLOCKWISE\");\n        else if(flag == 2) puts(\"CLOCKWISE\");\n        else if(flag == 3) puts(\"ONLINE_BACK\");\n        else if(flag == 4) puts(\"ONLINE_FRONT\");\n        else puts(\"ON_SEGMENT\");\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "// ConsoleApplication.cpp : コンソール アプリケーションのエントリ ポイントを定義します。\n//\n\n#include \"stdio.h\"\n#include <cstdlib>\n#include <iostream>\n#include <iomanip>\n#include <cmath>\n#include <algorithm>\n#include <functional>\n#include <string>\n\nusing namespace std;\nusing NUM = long double;\n\ntemplate<typename T>\nstruct Point {\n\tT x, y;\n\tPoint<T> operator+(const Point<T>& rhs)const {\n\t\tPoint<T> p;\n\t\tp.x = this->x + rhs.x;\n\t\tp.y = this->y + rhs.y;\n\t\treturn p;\n\t}\n\tPoint<T> operator-(const Point<T>& rhs)const {\n\t\tPoint<T> p;\n\t\tp.x = this->x - rhs.x;\n\t\tp.y = this->y - rhs.y;\n\t\treturn p;\n\t}\n\tPoint<T> operator*(const T rhs) const {\n\t\tPoint<T> p;\n\t\tp.x = this->x * rhs;\n\t\tp.y = this->y * rhs;\n\t\treturn p;\n\t}\n\tPoint<T> operator-() const {\n\t\tPoint<T> p;\n\t\tp.x = this->x * -1.0;\n\t\tp.y = this->y * -1.0;\n\t\treturn p;\n\t}\n};\n\ntemplate<typename T>\nPoint<T> operator*(const T val, const Point<T>& p)\n{\n\treturn p*val;\n}\n\ntemplate<typename T>\nstruct Segment {\n\tPoint<T> p1, p2;\n};\n\ntemplate<typename T>\nbool isZero(const T val)\n{\n\treturn fabs(val) < 1e-10;\n}\n\ntemplate<typename T>\nT innerProduct(const Point<T>& p0, const Point<T>& p1)\n{\n\tdouble x0 = p0.x;\n\tdouble y0 = p0.y;\n\tdouble x1 = p1.x;\n\tdouble y1 = p1.y;\n\treturn x0 * x1 + y0 * y1;\n}\n\ntemplate<typename T>\nT outerProduct(const Point<T>& p0, const Point<T>& p1)\n{\n\tdouble x0 = p0.x;\n\tdouble y0 = p0.y;\n\tdouble x1 = p1.x;\n\tdouble y1 = p1.y;\n\treturn x0 * y1 - y0 * x1;\n}\n\ntemplate<typename T>\nT norm(const Point<T>& p)\n{\n\tdouble x = p.x;\n\tdouble y = p.y;\n\treturn x*x + y*y;\n}\n\ntemplate<typename T>\nT absolute(const Point<T>& p)\n{\n\treturn sqrt(norm(p));\n}\n\ntemplate<typename T>\nvoid readPoint(Point<T>& p)\n{\n\tcin >> p.x;\n\tcin >> p.y;\n}\n\ntemplate<typename T>\nvoid readSegment(Segment<T>& s)\n{\n\tcin >> s.p1.x;\n\tcin >> s.p1.y;\n\tcin >> s.p2.x;\n\tcin >> s.p2.y;\n}\n\n//template<typename T>\n//void outputComponentesOfPoint(const Point<T>& p)\n//{\n//\tcout << fixed;\n//\tcout << setprecision(8) << p.x;\n//\tcout << \" \";\n//\tcout << setprecision(8) << p.y;\n//\tcout << endl;\n//}\n\n//template<typename T>\n//T getDistanceFromPointToLine(const Segment<T>& s, const Point<T>& p) {\n//\tconst Point<T> a = p - s.p1;\n//\tconst Point<T> b = s.p2 - s.p1;\n//\tconst Point<T> outer = outerProduct(a, b);\n//\treturn outer / absolute(b);\n//}\n\n//template<typename T>\n//T distance(const Point<T>& p1, const Point<T>& p2)\n//{\n//\treturn absolute(p2 - p1);\n//}\n//\n//template<typename T>\n//T getDistanceFromPointToSegment(const Point<T>& p, const Segment<T>& s) {\n//\tconst T zero = static_cast<T>(0);\n//\tconst Point<T> a = p - s.p1;//本当は使いまわせる\n//\tconst Point<T> b = s.p2 - s.p1;\n//\tconst Point<T> c = p - s.p2;\n//\tconst T innerAB = innerProduct(a, b);\n//\tconst T innerc_b = innerProduct(c, -b);\n//\n//\tT aaa = distance(p, s.p1);\n//\tT bbb = distance(p, s.p2);\n//\tT ccc = fabs(outerProduct(a, b) / absolute(b));\n//\tif (innerAB < zero) {\n//\t\treturn distance(p, s.p1);\n//\t}\n//\telse if (innerc_b < zero) {\n//\t\treturn distance(p, s.p2);\n//\t}\n//\telse {\n//\t\treturn fabs(outerProduct(a, b) / absolute(b) );\n//\t}\n//}\n//\n//template<typename T>\n//bool intersects(const Segment<T>& s1, const Segment<T>& s2) {\n//\tfunction<bool(Segment<T>, Segment<T>)> intersectsFromOneSegment//one segment : s1\n//\t\t= [&](const Segment<T>& s1, const Segment<T>& s2){\n//\t\t\tconst Point<T> a = s2.p1 - s1.p1;\n//\t\t\tconst Point<T> c = s2.p2 - s1.p1;\n//\t\t\tconst Point<T> b = s1.p2 - s1.p1;\n//\t\t\t\n//\t\t\treturn outerProduct(b, a) > 0 != outerProduct(b, c) > 0;\n//\t};\n//\treturn intersectsFromOneSegment(s1, s2) && intersectsFromOneSegment(s2, s1);\n//}\n//\n//template<typename T>\n//T getDistanceFromSegmentToSegment(const Segment<T>& s1, const Segment<T>& s2) {\n//\tif (intersects(s1, s2)) {\n//\t\treturn static_cast<T>(0.0);\n//\t}else{\n//\t\treturn min(\n//\t\t\tmin(getDistanceFromPointToSegment(s1.p1, s2), getDistanceFromPointToSegment(s1.p2, s2))\n//\t\t\t, min(getDistanceFromPointToSegment(s2.p1, s1), getDistanceFromPointToSegment(s2.p2, s1))\n//\t\t);\n//\t}\n//}\n\n//template<typename T>\n//void projectPointToSegment(const Point<T>& p, const Segment<T>& s, Point<T>& foot, T& param )\n//{\n//\tconst Point<T> a = p - s.p1;\n//\tconst Point<T> b = s.p2 - s.p1;\n//\tconst T normB = norm(b);\n//\tconst T ab = innerProduct(a, b);\n//\tparam = ab / normB;\n//\tfoot = s.p1 + (s.p2 - s.p1)*param;\n//}\n\n//template<typename T>\n//double getParameterOfProjectedPointToSegment(const Point<T>& p, const Segment<T>& s)\n//{\n//\tconst Point<T> a = p - s.p1;\n//\tconst Point<T> b = s.p2 - s.p1;\n//\tconst T normB = norm(b);\n//\tconst T ab = innerProduct(a, b);\n//\treturn param = ab / normB;\n//}\n\nint main()\n{\n\tSegment<NUM> s;\n\treadSegment(s);\n\tint q; cin >> q;\n\tfor (int i = 0; i != q; ++i) {\n\t\tPoint<NUM> p2;\n\t\treadPoint(p2);\n\t\tconst Point<NUM> a = s.p2 - s.p1;\n\t\tconst Point<NUM> b = p2 - s.p1;\n\t\t\n\t\tconst NUM outer = outerProduct(a, b);\n\t\tstring message;\n\t\tif ( !isZero(outer)) {\n\t\t\tmessage = outer > 0.0 ? \"COUNTER_CLOCKWISE\" : \"CLOCKWISE\";\n\t\t}\n\t\telse {//online\n\t\t\tconst NUM normA = norm(a);\n\t\t\tconst NUM ab = innerProduct(a, b);\n\t\t\tconst NUM positionOfP2 = ab / normA;\n\t\t\tif (positionOfP2 < 0.0) {\n\t\t\t\t\tmessage = \"ONLINE_BACK\";\n\t\t\t}\n\t\t\telse if (positionOfP2 > 1.0) {\n\t\t\t\tmessage = \"ONLINE_FRONT\";\n\t\t\t}\n\t\t\telse {\n\t\t\t\tmessage = \"ON_SEGMENT\";\n\t\t\t}\n\t\t}\n\t\tcout << message << endl;\n\t}\n\n\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long ll;\n\nstruct Point\n{\n    ll x,y;\n    Point(){ x = y = 0.0; }\n    Point(ll _x, ll _y) : x(_x), y(_y){}\n\n    Point operator+ (Point p)\n    {\n        return Point(p.x + x, p.y + y);\n    }\n\n    Point operator- (Point p)\n    {\n        return Point(x - p.x, y - p.y);\n    }\n\n    ll operator* (Point p)\n    {\n        return p.x * x + p.y * y;\n    }\n\n    Point operator* (ll t)\n    {\n        return Point(x*t, y*t);\n    }\n\n    ll operator~ ()\n    {\n        return x * x + y * y;\n    }\n\n    ll operator% (Point p)\n    {\n        return x * p.y - y * p.x;\n    }\n\n};\n\nint main()\n{\n    cout.precision(10);\n    cout << fixed;\n    int q;\n    Point p0, p1, p2, vec, vec1;\n    cin >> p0.x >> p0.y >> p1.x >> p1.y;\n    cin >> q;\n    while(q--)\n    {\n        cin >> p2.x >> p2.y;\n        vec = (p2 - p0);\n        vec1 = (p1 - p0);\n        if( vec%vec1 < 0LL ) puts(\"COUNTER_CLOCKWISE\");\n        else if( vec%vec1 > 0LL) puts(\"CLOCKWISE\");\n        else\n        {\n            if(vec * vec1 < 0LL) puts(\"ONLINE_BACK\");\n            else\n            {\n                if(~vec > ~vec1) puts(\"ONLINE_FRONT\");\n                else puts(\"ON_SEGMENT\");\n            }\n        }\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <vector>\n#include <utility>\n#define EPS 1e-10\nusing namespace std;\ntypedef long long ll;\nstruct Point{\n\tdouble x,y;\n\tPoint(double x = 0.0,double y = 0.0): x(x),y(y) {}\n\tPoint operator + (Point p){\n\t\treturn Point(x + p.x,y + p.y);\n\t}\n\tPoint operator - (Point p){\n\t\treturn Point(x - p.x,y - p.y);\n\t}\n\tPoint operator * (double lambda){\n\t\treturn Point(x * lambda,y * lambda);\n\t}\n\tPoint operator / (double lambda){\n\t\treturn Point(x / lambda,y / lambda);\n\t}\n\tdouble norm(){\n\t\treturn x * x + y * y;\n\t}\n\tdouble abs_(){\n\t\treturn sqrt(norm());\n\t}\n\tbool operator == (const Point &p)const\n\t{\n\t\treturn abs(x - p.x) < EPS && abs(y - p.y) < EPS;\n\t}\n\tbool operator < (const Point &p)const\n\t{\n\t\tif(abs(x - p.x) < EPS) return y < p.y;\n\t\telse return x < p.x;\n\t}\n};\ntypedef Point Vector;\nstruct Segment{\n\tPoint p1,p2;\n\tSegment(Point p1 = Point(),Point p2 = Point()): p1(p1),p2(p2) {}\n};\ntypedef Segment Line;\nstruct Circle{\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(),double r = 0.0): c(c),r(r) {}\n};\ntypedef vector<Point> Polygon;\ndouble dot(Vector a,Vector b){\n\treturn a.x * b.x + a.y * b.y;\n}\ndouble det(Vector a,Vector b){\n\treturn a.x * b.y - b.x * a.y;\n}\nbool vertical(Line l1,Line l2){\n\treturn abs(dot(l1.p2 - l1.p1,l2.p2 - l2.p1)) < EPS;\n}\nbool parallel(Line l1,Line l2){\n\treturn abs(det(l1.p2 - l1.p1,l2.p2 - l2.p1)) < EPS;\n}\nPoint proj(Point p,Line l){\n\tVector a = l.p2 - l.p1;\n\tdouble r = dot(a,p - l.p1) / a.norm();\n\treturn l.p1 + a * r;\n}\nPoint ref(Point p,Line l){\n\tPoint A = proj(p,l);\n\treturn A + (A - p);\n}\nint ccw(Segment/*Directed Segment*/ s,Point p){//\n\tVector a = s.p2 - s.p1,b = p - s.p1;\n\tif(det(a,b) > EPS) return 1;\n\telse if(det(a,b) < -EPS) return -1;\n\telse if(dot(a,b) < -EPS) return 2;\n\telse if(a.norm() < b.norm() - EPS) return -2;\n\telse return 0;\n}\nint main(){\n\tSegment s; Point p;\n\tscanf(\"%lf%lf%lf%lf\",&s.p1.x,&s.p1.y,&s.p2.x,&s.p2.y);\n\tint t;\n\tscanf(\"%d\",&t);\n\twhile(t--){\n\t\tscanf(\"%lf%lf\",&p.x,&p.y);\n\t\tint ans = ccw(s,p);\n\t\tif(ans == 1) puts(\"COUNTER_CLOCKWISE\");\n\t\telse if(ans == -1) puts(\"CLOCKWISE\");\n\t\telse if(ans == 2) puts(\"ONLINE_BACK\");\n\t\telse if(ans == -2) puts(\"ONLINE_FRONT\");\n\t\telse puts(\"ON_SEGMENT\");\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long double ld;\n\nconst ld EPS = 1e-9;\nconst ld INF = 1e10;\nconst ld PI = M_PI;\n\nstruct Point{\n  ld x, y;\n  Point(ld x, ld y):x(x), y(y){}\n  Point(){}\n};\n\nPoint operator+(const Point &a, const Point &b){\n  return Point(a.x + b.x, a.y + b.y);\n}\nPoint operator-(const Point &a, const Point &b){\n  return Point(a.x - b.x, a.y - b.y);\n}\nPoint operator*(const Point &a, const ld b){\n  return Point(a.x * b, a.y * b);\n}\nPoint operator*(const Point &a, const Point &b){\n  return Point(a.x*b.x-a.y*b.y, a.x*b.y+a.y*b.x);\n}\nPoint operator/(const Point &a, const ld b){\n  return Point(a.x / b, a.y / b);\n}\n\nld cross(const Point &a, const Point &b){\n  return a.x*b.y - a.y*b.x;\n}\n\nld dot(const Point &a, const Point &b){\n  return a.x*b.x + a.y*b.y;\n}\n\nld norm(const Point &a){\n  return dot(a, a);\n}\n\nstruct Line:vector<Point>{\n  Line(Point a = Point(0, 0), Point b = Point(0, 0)){\n    this->push_back(a);\n    this->push_back(b);\n  }\n};\n\nint ccw(Point a, Point b, Point c){\n  b = b - a;\n  c = c - a;\n  if(cross(b, c) > EPS) return +1; // 反時計周り\n  if(cross(b, c) < -EPS) return -1; // 時計周り\n  if(dot(b, c) < 0) return +2; // c -- a -- b がこの順番に一直線上\n  if(norm(b) < norm(c)) return -2; // a -- b -- c がこの順番に一直線上\n  return 0; // a -- c -- b が一直線上\n}\n\nint main(){  \n  Point p0, p1;\n  cin >> p0.x >> p0.y >> p1.x >> p1.y;  \n  int q;\n  cin >> q;\n  \n  Point p2;\n  while(q--){\n    cin >> p2.x >> p2.y;\n    \n    int ans = ccw(p0, p1, p2);\n    switch(ans){\n    case +1:\n      cout << \"COUNTER_CLOCKWISE\" << endl;\n      break;\n    case -1:\n      cout << \"CLOCKWiSE\" << endl;\n      break;\n    case +2:\n      cout << \"ONLINE_BACK\" << endl;\n      break;\n    case -2:\n      cout << \"ONLINE_FRONT\" << endl;\n      break;\n    case 0:\n      cout << \"ON_SEGMENT\" << endl;\n      break;\n    }    \n  }\n  \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint main() {\n\t\n\tint p0x,p0y,p1x,p1y,q;\n\tcin>>p0x>>p0y>>p1x>>p1y>>q;\n\t\n\tfor(int i=0;i<q;++i){\n\t\tint x,y;\n\t\tcin>>x>>y;\n\t\t\n\t\tint crossp = (p1x-p0x) * (y-p0y) - (p1y-p0y) * (x-p0x);\n\t\tint dotp = (p1x-p0x) * (x-p0x) + (p1y-p0y) * (y-p0y);\n\t\t\n\t\tif(crossp>0)cout<<\"COUNTER_CLOCKWISE\"<<endl;\n\t\telse if(crossp<0)cout<<\"CLOCKWISE\"<<endl;\n\t\telse{\n\t\t\tif(dotp<0)cout<<\"ONLINE_BACK\"<<endl;\n\t\t\telse if( abs(p1x-p0x) >= abs(x-p0x) )cout<<\"ON_SEGMENT\"<<endl;\n\t\t\telse cout<<\"ONLINE_FRONT\"<<endl;\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <complex>\n\nenum INDICES {\n  COUNTER_CLOCKWISE = 0,\n  CLOCKWISE,\n  ONLINE_BACK,\n  ON_SEGMENT,\n  ONLINE_FRONT\n};\n\nconst std::vector<std::string> strLst = {\n  \"COUNTER_CLOCKWISE\",\n  \"CLOCKWISE\",\n  \"ONLINE_BACK\",\n  \"ON_SEGMENT\",\n  \"ONLINE_FRONT\"\n};\n\nconst double tol = 1e-15;\n\nint main() {\n  double x0, y0, x1, y1;\n  std::cin >> x0 >> y0 >> x1 >> y1;\n\n  int q;\n  std::cin >> q;\n\n  for (int i = 0; i < q; ++i) {\n    double x2, y2;\n    std::cin >> x2 >> y2;\n\n    int index;\n    if ((x2 == x0 && y2 == y0) || (x2 == x1 && y2 == y1)) {\n      index = INDICES::ON_SEGMENT;\n    } else {\n      double ip = (x1 - x0) * (x2 - x0) + (y1 - y0) * (y2 - y0);\n      double norm1 = std::sqrt((x1 - x0) * (x1 - x0) + (y1 - y0) * (y1 - y0));\n      double norm2 = std::sqrt((x2 - x0) * (x2 - x0) + (y2 - y0) * (y2 - y0));\n      double theta = ip / norm1 / norm2;\n      if (theta < -1 + tol) {\n        index = INDICES::ONLINE_BACK;\n      } else if (theta > 1 - tol) {\n        index = (norm1 < norm2) ? INDICES::ONLINE_FRONT : INDICES::ON_SEGMENT;\n      } else {\n        double opz = (x1 - x0) * (y2 - y0) - (x2 - x0) * (y1 - y0);\n        index = (opz > 0) ? INDICES::COUNTER_CLOCKWISE : INDICES::CLOCKWISE;\n      }\n    }\n\n    std::cout << strLst[index] << std::endl;\n  }\n\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "// {{{ header\n#include <bits/stdc++.h>\nusing namespace std;\n\nusing i8   = int8_t;\nusing u8   = uint8_t;\nusing i16  = int16_t;\nusing u16  = uint16_t;\nusing i32  = int32_t;\nusing u32  = uint32_t;\nusing i64  = int64_t;\nusing u64  = uint64_t;\nusing i128 = __int128_t;\nusing u128 = __uint128_t;\n\nusing f32  = float;\nusing f64  = double;\nusing f80  = __float80;\nusing f128 = __float128;\n// }}}\n\nconstexpr i64 INF = 1'010'000'000'000'000'000LL;\n\nconstexpr i64 MOD = 1'000'000'007LL;\n\nconstexpr f64 EPS = 1e-12;\n\nconstexpr f64 PI = 3.14159265358979323846;\n\n// {{{ util\n#define FOR(i, start, end) for(i64 i = (start), i##_end=(end); i < i##_end; ++i)\n#define REP(i, n) FOR(i, 0, n)\n\n#define ALL(f,c,...) (([&](decltype((c)) cccc) { return (f)(begin(cccc), end(cccc), ## __VA_ARGS__); })(c))\n#define SLICE(f,c,l,r,...) (([&](decltype((c)) cccc, decltype((l)) llll, decltype((r)) rrrr) {\\\n    auto iiii = llll <= rrrr ? begin(cccc)+llll : end(cccc);\\\n    auto jjjj = llll <= rrrr ? begin(cccc)+rrrr : end(cccc);\\\n    return (f)(iiii, jjjj, ## __VA_ARGS__);\\\n})(c,l,r))\n\n#define GENERIC(f) ([](auto&&... args) -> decltype(auto) { return (f)(forward<decltype(args)>(args)...); })\n\ntemplate<typename C>\ni64 SIZE(const C& c) { return static_cast<i64>(c.size()); }\n\ntemplate<typename T, size_t N>\ni64 SIZE(const T (&)[N]) { return static_cast<i64>(N); }\n\nbool is_odd (i64 x) { return x % 2 != 0; }\nbool is_even(i64 x) { return x % 2 == 0; }\n\ntemplate<typename T> i64 cmp(T x, T y) { return (y<x) - (x<y); }\ntemplate<typename T> i64 sgn(T x) { return cmp(x, T(0)); }\n\n// Haskell の divMod と同じ\npair<i64,i64> divmod(i64 a, i64 b) {\n    i64 q = a / b;\n    i64 r = a % b;\n    if((b>0 && r<0) || (b<0 && r>0)) {\n        --q;\n        r += b;\n    }\n    return make_pair(q,r);\n}\n\ni64 div_ceil(i64 a, i64 b) {\n    i64 q = a / b;\n    i64 r = a % b;\n    if((b>0 && r>0) || (b<0 && r<0))\n        ++q;\n    return q;\n}\n\ni64 div_floor(i64 a, i64 b) {\n    return divmod(a,b).first;\n}\n\ni64 modulo(i64 a, i64 b) {\n    return divmod(a,b).second;\n}\n\nbool feq(f64 x, f64 y, f64 eps=EPS) {\n    return fabs(x-y) < eps;\n}\n\ntemplate<typename T, typename U>\nbool chmax(T& xmax, const U& x) {\n    if(xmax < x) {\n        xmax = x;\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ntemplate<typename T, typename U>\nbool chmin(T& xmin, const U& x) {\n    if(x < xmin) {\n        xmin = x;\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ntemplate<typename InputIt>\nauto SUM(InputIt first, InputIt last) {\n    using T = typename iterator_traits<InputIt>::value_type;\n    return accumulate(first, last, T());\n}\n\ntemplate<typename ForwardIt, typename UnaryOperation>\nForwardIt transform_self(ForwardIt first, ForwardIt last, UnaryOperation op) {\n    return transform(first, last, first, op);\n}\n\ntemplate<typename C>\nvoid UNIQ(C& c) {\n    c.erase(ALL(unique,c), end(c));\n}\n\ntemplate<typename BinaryFunc, typename UnaryFunc>\nauto ON(BinaryFunc bf, UnaryFunc uf) {\n    return [bf,uf](const auto& x, const auto& y) {\n        return bf(uf(x), uf(y));\n    };\n}\n\ntemplate<typename T>\nvoid RD(T& x) {\n    cin >> x;\n#ifdef PROCON_LOCAL\n    assert(cin);\n#endif\n}\n\ntemplate<typename T>\nvoid RD(vector<T>& v, i64 n) {\n    v.reserve(n);\n    REP(_, n) {\n        T e; RD(e);\n        v.emplace_back(e);\n    }\n}\n\ntemplate<typename T>\nostream& operator<<(ostream& out, const vector<T>& v) {\n    for(auto first = begin(v), it = first; it != end(v); ++it) {\n        if(it != first)\n            out << ' ';\n        out << *it;\n    }\n    return out;\n}\n\ntemplate<typename T1, typename T2>\nostream& operator<<(ostream& out, const pair<T1,T2>& p) {\n    return out << '(' << p.first << ',' << p.second << ')';\n}\n\nvoid PRINT() {}\n\ntemplate<typename T, typename... TS>\nvoid PRINT(const T& x, const TS& ...args) {\n    cout << x;\n    if(sizeof...(args)) {\n        cout << ' ';\n        PRINT(args...);\n    }\n}\n\ntemplate<typename... TS>\nvoid PRINTLN(const TS& ...args) {\n    PRINT(args...);\n    cout << '\\n';\n}\n\ntemplate<typename T>\nvoid DBG_IMPL(i64 line, const char* expr, const T& value) {\n#ifdef PROCON_LOCAL\n    cerr << \"[L \" << line << \"]: \";\n    cerr << expr << \" = \" << value << \"\\n\";\n#endif\n}\n\n#define DBG(expr) DBG_IMPL(__LINE__, #expr, (expr))\n// }}}\n\n// {{{ init\nstruct ProconInit {\n    static constexpr int IOS_PREC = 15;\n    static constexpr bool AUTOFLUSH = false;\n\n    ProconInit() {\n        cin.tie(nullptr);\n        ios::sync_with_stdio(false);\n        cout << fixed << setprecision(IOS_PREC);\n#ifdef PROCON_LOCAL\n        cerr << fixed << setprecision(IOS_PREC);\n#endif\n        if(AUTOFLUSH)\n            cout << unitbuf;\n    }\n} PROCON_INIT;\n// }}}\n\n//--------------------------------------------------------------------\n\nstruct Vector {\n    f64 x, y;\n\n    Vector() : Vector(0.0,0.0) {}\n    Vector(f64 xx, f64 yy) : x(xx), y(yy) {}\n\n    Vector& operator+=(const Vector& rhs) {\n        x += rhs.x;\n        y += rhs.y;\n        return *this;\n    }\n    Vector& operator-=(const Vector& rhs) {\n        x -= rhs.x;\n        y -= rhs.y;\n        return *this;\n    }\n    Vector& operator*=(f64 rhs) {\n        x *= rhs;\n        y *= rhs;\n        return *this;\n    }\n    Vector& operator/=(f64 rhs) {\n        x /= rhs;\n        y /= rhs;\n        return *this;\n    }\n\n    f64 norm() const { return x*x + y*y; }\n    f64 abs() const { return sqrt(norm()); }\n};\n\nconst Vector operator+(const Vector& lhs, const Vector& rhs) { return Vector(lhs) += rhs; }\nconst Vector operator-(const Vector& lhs, const Vector& rhs) { return Vector(lhs) -= rhs; }\nconst Vector operator*(const Vector& lhs, f64 rhs) { return Vector(lhs) *= rhs; }\nconst Vector operator*(f64 lhs, const Vector& rhs) { return Vector(rhs) *= lhs; }\nconst Vector operator/(const Vector& lhs, f64 rhs) { return Vector(lhs) /= rhs; }\n\nbool operator==(const Vector& lhs, const Vector& rhs) {\n    return feq(lhs.x,rhs.x) && feq(lhs.y,rhs.y);\n}\n\nstruct Line {\n    Vector p1, p2;\n\n    Line(const Vector& pp1, const Vector& pp2) : p1(pp1), p2(pp2) {}\n    Line(f64 x1, f64 y1, f64 x2, f64 y2) : p1(Vector(x1,y1)), p2(Vector(x2,y2)) {}\n\n    Vector vec() const { return p2 - p1; }\n};\n\nf64 geo_dot(const Vector& lhs, const Vector& rhs) {\n    return lhs.x*rhs.x + lhs.y*rhs.y;\n}\n\nf64 geo_cross(const Vector& lhs, const Vector& rhs) {\n    return lhs.x*rhs.y - lhs.y*rhs.x;\n}\n\nVector geo_project(const Line& line, const Vector& p) {\n    Vector v = line.vec();\n    f64 r = geo_dot(p-line.p1, v) / v.norm();\n    return line.p1 + r*v;\n}\n\nenum class ABC {\n    CCW,\n    CW,\n    ON_BACK,\n    ON_FRONT,\n    ON_SEGMENT,\n};\n\nABC geo_abc(const Vector& a, const Vector& b, const Vector& c) {\n    Vector x = b - a;\n    Vector y = c - a;\n    f64 cross = geo_cross(x,y);\n    if(cross > 0) return ABC::CCW;\n    if(cross < 0) return ABC::CW;\n    f64 dot = geo_dot(x,y);\n    if(dot < 0) return ABC::ON_BACK;\n    if(x.norm() < y.norm()) return ABC::ON_FRONT;\n    return ABC::ON_SEGMENT;\n}\n\nvoid solve() {\n    i64 x0,y0; RD(x0); RD(y0);\n    i64 x1,y1; RD(x1); RD(y1);\n    Vector p0(x0,y0);\n    Vector p1(x1,y1);\n\n    i64 Q; RD(Q);\n    REP(_, Q) {\n        i64 x2,y2; RD(x2); RD(y2);\n        Vector p2(x2,y2);\n        ABC ans = geo_abc(p0,p1,p2);\n        switch(ans) {\n        case ABC::CCW:        PRINTLN(\"COUNTER_CLOCKWISE\"); break;\n        case ABC::CW:         PRINTLN(\"CLOCKWISE\");         break;\n        case ABC::ON_BACK:    PRINTLN(\"ONLINE_BACK\");       break;\n        case ABC::ON_FRONT:   PRINTLN(\"ONLINE_FRONT\");      break;\n        case ABC::ON_SEGMENT: PRINTLN(\"ON_SEGMENT\");        break;\n        }\n    }\n}\n\nsigned main() {\n    \n\n    solve();\n\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#pragma warning(disable : 4267) // \"int n = (unsigned)size\"\n\nusing vi = vector<int>; using vvi = vector<vi>; using vvvi = vector<vvi>;\nusing ll = long long int;\nusing vll = vector<ll>; using vvll = vector<vll>; using vvvll = vector<vvll>;\nusing vd = vector<double>; using vvd = vector<vd>; using vvvd = vector<vvd>;\nusing P = pair<int, int>;\nusing Pll = pair<ll, ll>;\nusing cdouble = complex<double>;\n\nconst double eps = 1e-9;\nconst double INFD = numeric_limits<double>::infinity();\n#define Loop(i, n) for(int i = 0; i < int(n); i++)\n#define Loopll(i, n) for(ll i = 0; i < ll(n); i++)\n#define Loop1(i, n) for(int i = 1; i <= int(n); i++)\n#define Loopll1(i, n) for(ll i = 1; i <= ll(n); i++)\n#define Loopr(i, n) for(int i = int(n) - 1; i >= 0; i--)\n#define Looprll(i, n) for(ll i = ll(n) - 1; i >= 0; i--)\n#define Loopr1(i, n) for(int i = int(n); i >= 1; i--)\n#define Looprll1(i, n) for(ll i = ll(n); i >= 1; i--)\n#define Foreach(buf, container) for(auto buf : container)\n#define Loopdiag(i, j, h, w, sum) for(int i = ((sum) >= (h) ? (h) - 1 : (sum)), j = (sum) - i; i >= 0 && j < (w); i--, j++)\n#define Loopdiagr(i, j, h, w, sum) for(int j = ((sum) >= (w) ? (w) - 1 : (sum)), i = (sum) - j; j >= 0 && i < (h); j--, i++)\n#define Loopdiagsym(i, j, h, w, gap) for (int i = ((gap) >= 0 ? (gap) : 0), j = i - (gap); i < (h) && j < (w); i++, j++)\n#define Loopdiagsymr(i, j, h, w, gap) for (int i = ((gap) > (h) - (w) - 1 ? (h) - 1 : (w) - 1 + (gap)), j = i - (gap); i >= 0 && j >= 0; i--, j--)\n#define Loopitr(itr, container) for(auto itr = container.begin(); itr != container.end(); itr++)\n#define printv(vector) Loop(ex_i, vector.size()) { cout << vector[ex_i] << \" \"; } cout << endl;\n#define printmx(matrix) Loop(ex_i, matrix.size()) { Loop(ex_j, matrix[ex_i].size()) { cout << matrix[ex_i][ex_j] << \" \"; } cout << endl; }\n#define quickio() ios::sync_with_stdio(false); cin.tie(0);\n#define bitmanip(m,val) static_cast<bitset<(int)m>>(val)\n#define Comp(type_t) bool operator<(const type_t &another) const\n#define fst first\n#define snd second\nbool nearlyeq(double x, double y) { return abs(x - y) < eps; }\nbool inrange(ll x, ll t) { return x >= 0 && x < t; }\nbool inrange(vll xs, ll t) { Foreach(x, xs) if (!(x >= 0 && x < t)) return false; return true; }\nint ceillog2(ll x) { int ret = 0;\tx--; while (x > 0) { ret++; x >>= 1; } return ret; }\nll rndf(double x) { return (ll)(x + (x >= 0 ? 0.5 : -0.5)); }\nll floorsqrt(ll x) { ll m = (ll)sqrt((double)x); return m + (m * m <= x ? 0 : -1); }\nll ceilsqrt(ll x) { ll m = (ll)sqrt((double)x); return m + (x <= m * m ? 0 : 1); }\nll rnddiv(ll a, ll b) { return (a / b + (a % b * 2 >= b ? 1 : 0)); }\nll ceildiv(ll a, ll b) { return (a / b + (a % b == 0 ? 0 : 1)); }\nll gcd(ll m, ll n) { if (n == 0) return m; else return gcd(n, m % n); }\nll lcm(ll m, ll n) { return m * n / gcd(m, n); }\n\n/*******************************************************/\n\nstruct intpt_t {\n\tll x, y;\n\tintpt_t operator+(const intpt_t &p) { return { x + p.x, y + p.y }; }\n\tintpt_t operator-(const intpt_t &p) { return { x - p.x, y - p.y }; }\n\tintpt_t operator*(const ll &c) { return { x * c, y * c }; }\n\tintpt_t operator/(const ll &c) { return { x / c, y / c }; }\n\tbool operator==(const intpt_t &p) { return x == p.x && y == p.y; }\n};\n\nstruct pt_t {\n\tdouble x, y;\n\tpt_t operator+(const pt_t &p) { return { x + p.x, y + p.y }; }\n\tpt_t operator-(const pt_t &p) { return { x - p.x, y - p.y }; }\n\tpt_t operator*(const double &c) { return { x * c, y * c }; }\n};\n\npt_t cvtpt(intpt_t p) {\n\treturn { double(p.x), double(p.y) };\n}\n\n// ax + by + c = 0\nstruct line_t {\n\tdouble a, b, c;\n};\n\npt_t cross_point(line_t l, line_t m) {\n\tpt_t ret = { INFD, INFD };\n\tdouble d = l.a * m.b - m.a * l.b;\n\tif (nearlyeq(d, 0)) return ret;\n\tdouble x = l.b * m.c - m.b * l.c;\n\tdouble y = l.a * m.c - m.a * l.c;\n\tret = { x / d, y / -d };\n\treturn ret;\n}\n\n// normal vector = (a, b), passing p\nline_t solve_line(double a, double b, pt_t p) {\n\treturn { a, b, -a * p.x - b * p.y };\n}\n\n// t should be radius\npt_t rot(pt_t p, double r) {\n\treturn {\n\t\tcos(r) * p.x - sin(r) * p.y,\n\t\tsin(r) * p.x + cos(r) * p.y\n\t};\n}\n\ndouble abs(pt_t p) {\n\treturn sqrt(p.x * p.x + p.y * p.y);\n}\n\n// angle [0, 2PI) of vector p to vector q\ndouble angle(pt_t p, pt_t q) {\n\tp = p * (1.0 / abs(p));\n\tq = q * (1.0 / abs(q));\n\tdouble r0 = acos(max(min(p.x * q.x + p.y * q.y, 1.0), -1.0));\n\tdouble r1 = asin(max(min(p.x * q.y - p.y * q.x, 1.0), -1.0));\n\tif (r1 >= 0) return r0;\n\telse return 2 * M_PI - r0;\n}\n\ndouble dist(line_t l, pt_t p) {\n\treturn abs(l.a * p.x + l.b * p.y + l.c)\n\t\t/ sqrt(l.a * l.a + l.b * l.b);\n}\n\nbool on_same_line(intpt_t p, intpt_t q) {\n\tint mask = (p.x ? 0 : 0b1000) + (p.y ? 0 : 0b100)\n\t\t+ (q.x ? 0 : 0b10) + (q.y ? 0 : 0b1);\n\tif ((mask & 0b1100) == 0b1100 || (mask & 0b0011) == 0b0011) return true;\n\tif ((mask & 0b1010) == 0b1010 || (mask & 0b0101) == 0b0101) return true;\n\tif (mask == 0b0000) {\n\t\tp = p / gcd(p.x, p.y);\n\t\tq = q / gcd(q.x, q.y);\n\t\tif (p.x < 0) p = p * -1;\n\t\tif (q.x < 0) q = q * -1;\n\t\tif (p == q) return true;\n\t\telse return false;\n\t}\n\telse return false;\n}\n\nbool on_same_line(pt_t p, pt_t q) {\n\tline_t l = solve_line(p.y, -p.x, p);\n\tif (dist(l, q) < eps) return true;\n\telse return false;\n}\n\nint main() {\n\tintpt_t p0, p1;\n\tcin >> p0.x >> p0.y >> p1.x >> p1.y;\n\tint q; cin >> q;\n\tcout << setprecision(20);\n\tLoop(i, q) {\n\t\tintpt_t p2;\n\t\tcin >> p2.x >> p2.y;\n\t\tintpt_t ip = p1 - p0;\n\t\tintpt_t iq = p2 - p0;\n\t\tpt_t p = cvtpt(ip);\n\t\tpt_t q = cvtpt(iq);\n\t\tbool judge;\n\t\tif (on_same_line(p, q)) judge = true;\n\t\telse judge = false;\n\t\tdouble r = angle(p, q);\n\t\tif (judge) {\n\t\t\tif (M_PI * 0.5 < r && r < M_PI * 1.5) {\n\t\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (abs(q) > abs(p)) {\n\t\t\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif (r < M_PI) {\n\t\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\t\t}\n\t\t}\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <cassert>// c\n#include <iostream>// io\n#include <iomanip>\n#include <fstream>\n#include <sstream>\n#include <vector>// container\n#include <map>\n#include <set>\n#include <queue>\n#include <bitset>\n#include <stack>\n#include <algorithm>// other\n#include <complex>\n#include <numeric>\n#include <functional>\nusing namespace std;\n\ntypedef int32_t i32;typedef int64_t i64;typedef i64 ll;typedef uint32_t uint;typedef uint64_t ull;\n\n#define ALL(c) (begin(c)),(end(c))\n#define REP(i,n) FOR(i,0,n)\n#define REPr(i,n) FORr(i,0,n)\n#define FOR(i,l,r) for(int i=(int)(l);i<(int)(r);++i)\n#define FORr(i,l,r) for(int i=(int)(r)-1;i>=(int)(l);--i)\n#define EACH(it,o) for(__typeof((o).begin()) it = (o).begin(); it != (o).end(); ++it)\n#define IN(l,v,r) ((l)<=(v) && (v)<(r))\n\n//debug\n#define DUMP(x)  cerr << #x << \" = \" << (x)\n#define DUMPLN(x)  DUMP(x) <<endl\n#define DEBUG(x) DUMP(x) << LINE() << \" \" << __FILE__\n#define DEBUGLN(x) DEBUG(x)<<endl\n#define LINE()    cerr<< \" (L\" << __LINE__ << \")\"\n#define LINELN()    LINE()<<endl\n#define CHECK(exp,act)  if(exp!=act){DUMPLN(exp);DEBUGLN(act);}\n#define STOP(e)  CHECK(e,true);if(!(e)) exit(1);\n\nclass range {\nprivate:\n    struct Iter{\n        int v;\n        int operator*(){return v;}\n        bool operator!=(Iter& itr) {return v < itr.v;}\n        void operator++() {++v;}\n    };\n    Iter i, n;\npublic:\n    range(int n) : i({0}), n({n}) {}\n    range(int i, int n) : i({i}), n({n}) {}\n    Iter& begin() {return i;}\n    Iter& end() {return n;}\n};\n\n//output\ntemplate<typename T> ostream& operator << (ostream& os, const vector<T>& as){REP(i,as.size()){if(i!=0)os<<\" \"; os<<as[i];}return os;}\ntemplate<typename T> ostream& operator << (ostream& os, const vector<vector<T> >& as){REP(i,as.size()){if(i!=0)os<<endl; os<<as[i];}return os;}\ntemplate<typename T> ostream& operator << (ostream& os, const set<T>& ss){EACH(a,ss){if(a!=ss.begin())os<<\" \"; os<<a;}return os;}\ntemplate<typename T1,typename T2> ostream& operator << (ostream& os, const pair<T1,T2>& p){os<<p.first<<\" \"<<p.second;return os;}\ntemplate<typename K,typename V> ostream& operator << (ostream& os, const map<K,V>& m){bool isF=true;EACH(p,m){if(!isF)os<<endl;os<<p;isF=false;}return os;}\n\n//input\nchar tmp[1000];\n#define nextInt(n) scanf(\"%d\",&n)\n#define nextLong(n) scanf(\"%lld\",&n) //I64d\n#define nextDouble(n) scanf(\"%lf\",&n) \n#define nextChar(n) scanf(\"%c\",&n)\n#define nextString(n) scanf(\"%s\",tmp);n=tmp\n\n// values\ntemplate<class T> T INF(){assert(false);};\ntemplate<> int INF<int>(){return 1<<28;};\ntemplate<> ll INF<ll>(){return 1LL<<58;};\ntemplate<> double INF<double>(){return 1e16;};\n\nnamespace _double_tmpl{\n    typedef long double D;const D EPS = 1e-8;\n    \n    static constexpr D Ae=0;\n    D A(D a,D b){return a+b;}D Ainv(D a){return -a;}\n    D S(D a,D b){return A(a,Ainv(b));}\n    \n    static constexpr D Me=1;\n    D M(D a,D b){return a*b;}D Minv(D a){return 1.0/a;};\n\n    template<typename T> int sig(T a,T b=0){return a<b-EPS?-1:a>b+EPS?1:0;}\n    template<typename T> bool eq(T a,T b){ return sig(abs(a-b))==0;}\n    template<typename T> D norm(T a){ return a*a;}\n}\nusing namespace _double_tmpl;\n\nnamespace Ps{\n    using namespace _double_tmpl;\n    typedef complex<D> P;\n\n#define X real()\n#define Y imag()\n\n    istream& operator >> (istream& in,complex<D>& p){\n        D x,y;in >> x >> y;p=P(x,y);return in;\n    }\n\n    // a×b\n    D cross(const P& a,const P& b){return imag(conj(a)*b);}\n    // a・b\n    D dot(const P&a,const P& b) {return real(conj(a)*b);}\n\n    int ccw(const P& a,P b,P c){\n        b -= a; c -= a;\n        if (cross(b,c) > 0)   return +1;       // counter clockwise\n        if (cross(b,c) < 0)   return -1;       // clockwise\n        if (dot(b,c) < 0)     return +2;       // c--a--b on line\n        if (norm(b) < norm(c)) return -2;       // a--b--c on line\n        return 0;\n    }  \n}\nusing namespace Ps;\n\nstringstream ss;\nclass Main{\n    public:\n    void run(){\n        P a,b;\n        cin >> a >> b;\n        int q;cin >> q;\n        REP(i,q){\n            P c;cin >> c;\n            int res=ccw(a,b,c);\n            if(res==+1){\n                cout <<\"COUNTER_CLOCKWISE\"<<endl;\n            }else if(res==-1){\n                cout <<\"CLOCKWISE\"<<endl;    \n            }else if(res==+2){\n                cout <<\"ONLINE_BACK\"<<endl;    \n            }else if(res==-2){\n                cout <<\"ONLINE_FRONT\"<<endl;    \n            }else{\n                cout << \"ON_SEGMENT\"<<endl;\n            }\n        }\n    }\n};\n\nint main(){\n cout <<fixed<<setprecision(20);\n cin.tie(0);\n ios::sync_with_stdio(false);\n Main().run();\n return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <iostream>\n#include <iomanip>\n#include <algorithm>\n\nusing namespace std;\n\nconst double kEps = 1e-10;\n\nint dcmp(double x) {\n  if (fabs(x) < kEps) return 0;\n  return x < 0 ? -1 : 1;\n}\n\nstruct Vector {\n  double x, y;\n  Vector() {}\n  Vector(double x, double y): x(x), y(y) {}\n  // Vector(const Point & p1, const Point & p2): x(p2.x - p1.x), y(p2.y - p1.y) {}\n  Vector(const Vector & v);\n\n  double Norm() const { return hypot(x, y); }\n  double NormSquared() const { return x * x + y * y; }\n  Vector Normalize() const {\n    return *this / this->Norm();\n  }\n  Vector operator-() const {\n    return Vector(-x, -y);\n  }\n  Vector operator+(const Vector & rhs) const {\n    return Vector(x + rhs.x, y + rhs.y);\n  }\n  Vector operator-(const Vector & rhs) const {\n    return *this + (-rhs);\n  }\n  Vector operator*(const double rhs) const {\n    return Vector(rhs * x, rhs * y);\n  }\n  Vector operator/(const double rhs) const {\n    return *this * (1.0 / rhs);\n  }\n  double Dot(const Vector & rhs) const {\n    return x * rhs.x + y * rhs.y;\n  }\n  double Cross(const Vector & rhs) const {\n    return x * rhs.y - y * rhs.x;\n  }\n  bool operator==(const Vector & rhs) const {\n    return dcmp(x - rhs.x) == 0 && dcmp(y - rhs.y) == 0;\n  }\n  bool operator<(const Vector & rhs) const {\n    return dcmp(x - rhs.x) < 0 || (dcmp(x - rhs.x) == 0 && dcmp(y - rhs.y) < 0);\n  }\n};\n\nstruct Point {\n  Point() {}\n  Point(double x, double y): x(x), y(y) {}\n  Point(const Point & p);\n\n  double x, y;\n\n  Point operator-() {\n    return Point(-x, -y);\n  }\n  Point operator+(const Vector & rhs) const {\n    return Point(x + rhs.x, y + rhs.y);\n  }\n  Point operator-(const Vector & rhs) const {\n    return *this + (-rhs);\n  }\n  bool operator==(const Point & rhs) const {\n    return dcmp(x - rhs.x) == 0 && dcmp(y - rhs.y) == 0;\n  }\n  bool operator<(const Point & rhs) const {\n    return dcmp(x - rhs.x) < 0 || (dcmp(x - rhs.x) == 0 && dcmp(y - rhs.y) < 0);\n  }\n};\n\nstruct Line {\n  Line() {}\n  Line(const Point & p1, const Point & p2): p1(p1), p2(p2) {}\n  Line(double x1, double y1, double x2, double y2): p1(x1, y1), p2(x2, y2) {}\n  Line(const Line & l);\n\n  Point p1, p2;\n};\n\nostream & operator<<(ostream & os, const Point & p) {\n  os << p.x << \" \" << p.y;\n  return os;\n}\n\nostream & operator<<(ostream & os, const Vector & v) {\n  os << v.x << \" \" << v.y;\n  return os;\n}\n\n// minus: left, plus: right, 0: colinear\nint Direction(const Point & p0, const Point & p1, const Point & p2) {\n  Vector v1(p1.x - p0.x, p1.y - p0.y);\n  Vector v2(p2.x - p0.x, p2.y - p0.y);\n  return v2.Cross(v1);\n}\n\n// minus: back, plus: front, 0: on\nint SegmentDirection(const Point & p0, const Point & p1, const Point & p2) {\n  if (p2.x >= min(p0.x, p1.x) && p2.x <= max(p0.x, p1.x)\n      && p2.y >= min(p0.y, p1.y) && p2.y <= max(p0.y, p1.y)) {\n    return 0;\n  } else if (p2.x > max(p0.x, p1.x) || p2.y > max(p0.y, p1.y)) {\n    return 1;\n  } else {\n    return -1;\n  }\n}\n\nint main(int argc, char const *argv[]) {\n  double x0, y0, x1, y1;\n  cin >> x0 >> y0 >> x1 >> y1;\n  Point p0(x0, y0);\n  Point p1(x1, y1);\n\n  int q;\n  cin >> q;\n  for (unsigned i = 0; i < q; ++i) {\n    double x2, y2;\n    cin >> x2 >> y2;\n    Point p2(x2, y2);\n    auto direction = Direction(p0, p1, p2);\n    auto s_direction = SegmentDirection(p0, p1, p2);\n\n    if (direction > 0) {\n      cout << \"CLOCKWISE\\n\";\n    } else if (direction < 0) {\n      cout << \"COUNTER_CLOCKWISE\\n\";\n    } else if (s_direction > 0) {\n      cout << \"ONLINE_FRONT\\n\";\n    } else if (s_direction < 0) {\n      cout << \"ONLINE_BACK\\n\";\n    } else {\n      cout << \"ON_SEGMENT\\n\";\n    }\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define int long long\n#define uint unsigned int\n#define pii pair<int, int>\n#define FOR(i,a,b) for(int i=(a);i<(b);++i)\n#define FORR(i,a,b) for(int i=(a);i>=(b);--i)\n#define REP(i,n) FOR(i,0,n)\n#define REPR(i,n) FORR(i,n,0)\n#define ALL(c) ((c).begin(),(c).end())\n#define PB(a) push_back(a)\n#define EMPB(...) emplace_back(__VA_ARGS__)\n#define EMP(...) emplace(__VA_ARGS__)\n#define MP(a,b) make_pair(a,b)\n#define MT(...) make_tuple(__VA_ARGS__)\n#define ZERO(a) memset(a,0,sizeof(a))\n#define MINUS(a) memset(a,0xff,sizeof(a))\n#define MINF(a) memset(a,0x3f,sizeof(a))\n#define PW(n) (1LL<<(n))\nusing namespace std;\ntemplate <class T> inline bool CHMIN(T& a, T b) { if(a>b) { a=b; return 1; } return 0; }\ntemplate <class T> inline bool CHMAX(T& a, T b) { if(a<b) { a=b; return 1; } return 0; }\ntemplate <class T> inline void SORT(T& a) { sort(ALL(a)); }\ntemplate <class T> inline void REV(T& a) { reverse(ALL(a)); }\ntemplate <class T> inline void UNI(T& a) { SORT(a); a.erase(unique(ALL(a)),a.end()); }\ntemplate <class S, class T> ostream& operator<<(ostream& os, const pair<S,T> a) {\n  return os << a.first << ' ' << a.second;\n}\nconst int MOD = 1000000007;\n// const int INF = 0x3f3f3f3f3f3f3f3f;\n// const double EPS = 1e-10;\n/* ---------------------------------------------------------------------------------------------------- */\n\n/* 基本要素 */\nusing D = double; // 座標値の型 doubleかlong double\nusing P = complex<D>; // Point\nusing L = pair<P,P>;  // Line\nusing VP = vector<P>;\nconst double EPS = 1e-8;  // 許容誤差\nconst double INF = 1e12;\n#define X real()\n#define Y imag()\n#define LE(n,m) ((n)<(m)+EPS) // n <= m ?\n#define GE(n,m) ((n)+EPS>(m)) // n >= m ?\n#define EQ(n,m) (abs((n)-(m))<EPS)\n\nnamespace std {\n  istream& operator >> (istream& is, P& p) {\n    int F, S;\n    is >> F >> S;\n    p = P(F,S);\n    return is;\n  }\n}\n\n// 内積\nD dot(P a, P b) {\n  return (conj(a)*b).X;\n}\n// 外積\nD cross(P a, P b) {\n  return (conj(a)*b).Y;\n}\n// 点aから見た、点bから点cへの方向\nint ccw(P a, P b, P c) {\n  b -= a; c -= a;\n  if (cross(b,c) > 0) return +1;  // counter clockwise\n  if (cross(b,c) < 0) return -1;  // clockwise\n  if (dot(b,c) < 0) return +2;  // c--a--b on line\n  if (norm(b) < norm(c)) return -2; // a--b--c on line or a==b\n  return 0;                     // a--c--b on line or a==c or b==c\n}\n\nP p0, p1, p2;\nint q;\n\nsigned main() {\n  cin.tie(0);\n  ios_base::sync_with_stdio(false);\n  cout << fixed << setprecision(10);\n\n  cin >> p0 >> p1 >> q;\n  REP(i,q) {\n    cin >> p2;\n    int c = ccw(p0,p1,p2);\n    if (c == 1) cout << \"COUNTER_CLOCKWISE\" << endl;\n    else if (c == -1) cout << \"CLOCKWISE\" << endl;\n    else if (c == 2) cout << \"ONLINE_BACK\" << endl;\n    else if (c == -2) cout << \"ONLINE_FRONT\" << endl;\n    else if (c == 0) cout << \"ON_SEGMENT\" << endl;\n  }\n\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define dump(n) cout<<\"# \"<<#n<<'='<<(n)<<endl\n#define repi(i,a,b) for(int i=int(a);i<int(b);i++)\n#define peri(i,a,b) for(int i=int(b);i-->int(a);)\n#define rep(i,n) repi(i,0,n)\n#define per(i,n) peri(i,0,n)\n#define all(c) begin(c),end(c)\n#define mp make_pair\n#define mt make_tuple\n\ntypedef unsigned int uint;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int,int> pii;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef vector<ll> vl;\ntypedef vector<vl> vvl;\ntypedef vector<double> vd;\ntypedef vector<vd> vvd;\ntypedef vector<string> vs;\n\nconst int INF=1e9;\nconst int MOD=1e9+7;\nconst double EPS=1e-9;\n\ntemplate<typename T1,typename T2>\nostream& operator<<(ostream& os,const pair<T1,T2>& p){\n\treturn os<<'('<<p.first<<','<<p.second<<')';\n}\ntemplate<typename T>\nostream& operator<<(ostream& os,const vector<T>& a){\n\tos<<'[';\n\trep(i,a.size()) os<<(i?\" \":\"\")<<a[i];\n\treturn os<<']';\n}\n\nint Signum(double x){\n\treturn x<-EPS?-1:x>EPS?1:0;\n}\n\nstruct Point{\n\tdouble x,y;\n\tPoint(){}\n\tPoint(double x,double y):x(x),y(y){}\n\tPoint& operator+=(Point p){\n\t\tx+=p.x,y+=p.y;\n\t\treturn *this;\n\t}\n\tPoint& operator-=(Point p){\n\t\tx-=p.x,y-=p.y;\n\t\treturn *this;\n\t}\n\tPoint& operator*=(double c){\n\t\tx*=c,y*=c;\n\t\treturn *this;\n\t}\n\tPoint& operator/=(double c){\n\t\tx/=c,y/=c;\n\t\treturn *this;\n\t}\n};\nPoint operator+(Point a,Point b){\n\treturn a+=b;\n}\nPoint operator-(Point a,Point b){\n\treturn a-=b;\n}\nPoint operator*(Point a,double c){\n\treturn a*=c;\n}\nPoint operator*(double c,Point a){\n\treturn a*=c;\n}\nPoint operator/(Point a,double c){\n\treturn a/=c;\n}\nbool operator==(Point a,Point b){\n\treturn abs(a.x-b.x)<EPS && abs(a.y-b.y)<EPS;\n}\nbool operator!=(Point a,Point b){\n\treturn !(a==b);\n}\n\ndouble Abs2(Point p){\n\treturn p.x*p.x+p.y*p.y;\n}\ndouble Dot(Point a,Point b){\n\treturn a.x*b.x+a.y*b.y;\n}\ndouble Cross(Point a,Point b){\n\treturn a.x*b.y-a.y*b.x;\n}\n\nint CCW(Point a,Point b,Point c){\n\tb-=a,c-=a;\n\tif(int sign=Signum(Cross(b,c)))\n\t\treturn sign; // 1:ccw,-1:cw\n\tif(Dot(b,c)<-EPS)\n\t\treturn -2;   // c-a-b\n\tif(Abs2(b)<Abs2(c)-EPS)\n\t\treturn 2;    // a-b-c\n\treturn 0;        // a-c-b\n}\n\nint main()\n{\n\tPoint a,b; cin>>a.x>>a.y>>b.x>>b.y;\n\tint q; cin>>q;\n\trep(_,q){\n\t\tPoint c; cin>>c.x>>c.y;\n\t\tint ccw=CCW(a,b,c);\n\t\tif(ccw==1)  cout<<\"COUNTER_CLOCKWISE\"<<endl;\n\t\tif(ccw==-1) cout<<\"CLOCKWISE\"<<endl;\n\t\tif(ccw==-2) cout<<\"ONLINE_BACK\"<<endl;\n\t\tif(ccw==2)  cout<<\"ONLINE_FRONT\"<<endl;\n\t\tif(ccw==0)  cout<<\"ON_SEGMENT\"<<endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cmath>\nusing namespace std;\n#define db double\n#define zero(x) (fabs(x)<eps)\nconst db eps=1e-10;\nstruct point{\n    db x,y;\n    point(){}\n    point(db x,db y):x(x),y(y){}\n    point operator + (point B){ return point(x+B.x,y+B.y); }\n    point operator - (point B){ return point(x-B.x,y-B.y); }\n    point operator * (db k){ return point(k*x,k*y); }\n    db operator * (point B){ return x*B.y-y*B.x; }\n    db operator ^ (point B){ return x*B.x+y*B.y; }\n    bool operator < (point B){ return (y>0)!=(B.y>0)?y>0:((*this)*B)>0; }\n};\ndb dis2(point A,point B){ return (A.x-B.x)*(A.x-B.x)+(A.y-B.y)*(A.y-B.y); }\nstruct line{\n    point A,B;\n    line(){}\n    line(point A,point B):A(A),B(B){}\n};\npoint projection(line l,point P){\n    point dir=l.B-l.A; P=P-l.A;\n    return dir*((P^dir)/dis2(l.A,l.B))+l.A;\n}\npoint reflection(line l,point P){\n    return projection(l,P)*2-P;\n}\nint direction(point P0,point P1,point P2){\n    db det=(P2-P0)*(P1-P0); if (!zero(det)) return det<0?1:2;\n    db dot=(P2-P0)^(P1-P0); if (dot<0) return 3;\n    return dis2(P2,P0)>dis2(P1,P0)?4:5;\n}\nstring s[6]={\"666\",\"COUNTER_CLOCKWISE\",\"CLOCKWISE\",\"ONLINE_BACK\",\"ONLINE_FRONT\",\"ON_SEGMENT\"};\nint main(){\n    db x1,y1,x2,y2; scanf(\"%lf%lf%lf%lf\",&x1,&y1,&x2,&y2);\n    point P0(x1,y1),P1(x2,y2);\n    int q; scanf(\"%d\",&q);\n    while (q--){\n        db x,y; scanf(\"%lf%lf\",&x,&y);\n        printf(\"%s\\n\",s[direction(P0,P1,point(x,y))].c_str());\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#pragma warning(disable : 4267) // \"int n = (unsigned)size\"\n\nusing vi = vector<int>; using vvi = vector<vi>; using vvvi = vector<vvi>;\nusing ll = long long int;\nusing vll = vector<ll>; using vvll = vector<vll>; using vvvll = vector<vvll>;\nusing vd = vector<double>; using vvd = vector<vd>; using vvvd = vector<vvd>;\nusing P = pair<int, int>;\nusing Pll = pair<ll, ll>;\nusing cdouble = complex<double>;\n\nconst double eps = 1e-9;\nconst double INFD = numeric_limits<double>::infinity();\n#define Loop(i, n) for(int i = 0; i < int(n); i++)\n#define Loopll(i, n) for(ll i = 0; i < ll(n); i++)\n#define Loop1(i, n) for(int i = 1; i <= int(n); i++)\n#define Loopll1(i, n) for(ll i = 1; i <= ll(n); i++)\n#define Loopr(i, n) for(int i = int(n) - 1; i >= 0; i--)\n#define Looprll(i, n) for(ll i = ll(n) - 1; i >= 0; i--)\n#define Loopr1(i, n) for(int i = int(n); i >= 1; i--)\n#define Looprll1(i, n) for(ll i = ll(n); i >= 1; i--)\n#define Foreach(buf, container) for(auto buf : container)\n#define Loopdiag(i, j, h, w, sum) for(int i = ((sum) >= (h) ? (h) - 1 : (sum)), j = (sum) - i; i >= 0 && j < (w); i--, j++)\n#define Loopdiagr(i, j, h, w, sum) for(int j = ((sum) >= (w) ? (w) - 1 : (sum)), i = (sum) - j; j >= 0 && i < (h); j--, i++)\n#define Loopdiagsym(i, j, h, w, gap) for (int i = ((gap) >= 0 ? (gap) : 0), j = i - (gap); i < (h) && j < (w); i++, j++)\n#define Loopdiagsymr(i, j, h, w, gap) for (int i = ((gap) > (h) - (w) - 1 ? (h) - 1 : (w) - 1 + (gap)), j = i - (gap); i >= 0 && j >= 0; i--, j--)\n#define Loopitr(itr, container) for(auto itr = container.begin(); itr != container.end(); itr++)\n#define printv(vector) Loop(ex_i, vector.size()) { cout << vector[ex_i] << \" \"; } cout << endl;\n#define printmx(matrix) Loop(ex_i, matrix.size()) { Loop(ex_j, matrix[ex_i].size()) { cout << matrix[ex_i][ex_j] << \" \"; } cout << endl; }\n#define quickio() ios::sync_with_stdio(false); cin.tie(0);\n#define bitmanip(m,val) static_cast<bitset<(int)m>>(val)\n#define Comp(type_t) bool operator<(const type_t &another) const\n#define fst first\n#define snd second\nbool nearlyeq(double x, double y) { return abs(x - y) < eps; }\nbool inrange(ll x, ll t) { return x >= 0 && x < t; }\nbool inrange(vll xs, ll t) { Foreach(x, xs) if (!(x >= 0 && x < t)) return false; return true; }\nint ceillog2(ll x) { int ret = 0;\tx--; while (x > 0) { ret++; x >>= 1; } return ret; }\nll rndf(double x) { return (ll)(x + (x >= 0 ? 0.5 : -0.5)); }\nll floorsqrt(ll x) { ll m = (ll)sqrt((double)x); return m + (m * m <= x ? 0 : -1); }\nll ceilsqrt(ll x) { ll m = (ll)sqrt((double)x); return m + (x <= m * m ? 0 : 1); }\nll rnddiv(ll a, ll b) { return (a / b + (a % b * 2 >= b ? 1 : 0)); }\nll ceildiv(ll a, ll b) { return (a / b + (a % b == 0 ? 0 : 1)); }\nll gcd(ll m, ll n) { if (n == 0) return m; else return gcd(n, m % n); }\nll lcm(ll m, ll n) { return m * n / gcd(m, n); }\n\n/*******************************************************/\n\nstruct intpt_t {\n\tll x, y;\n\tintpt_t operator+(const intpt_t &p) { return { x + p.x, y + p.y }; }\n\tintpt_t operator-(const intpt_t &p) { return { x - p.x, y - p.y }; }\n\tintpt_t operator*(const ll &c) { return { x * c, y * c }; }\n\tintpt_t operator/(const ll &c) { return { x / c, y / c }; }\n\tbool operator==(const intpt_t &p) { return x == p.x && y == p.y; }\n};\n\nstruct pt_t {\n\tdouble x, y;\n\tpt_t operator+(const pt_t &p) { return { x + p.x, y + p.y }; }\n\tpt_t operator-(const pt_t &p) { return { x - p.x, y - p.y }; }\n\tpt_t operator*(const double &c) { return { x * c, y * c }; }\n};\n\npt_t cvtpt(intpt_t p) {\n\treturn { double(p.x), double(p.y) };\n}\n\n// ax + by + c = 0\nstruct line_t {\n\tdouble a, b, c;\n};\n\npt_t cross_point(line_t l, line_t m) {\n\tpt_t ret = { INFD, INFD };\n\tdouble d = l.a * m.b - m.a * l.b;\n\tif (nearlyeq(d, 0)) return ret;\n\tdouble x = l.b * m.c - m.b * l.c;\n\tdouble y = l.a * m.c - m.a * l.c;\n\tret = { x / d, y / -d };\n\treturn ret;\n}\n\n// normal vector = (a, b), passing p\nline_t solve_line(double a, double b, pt_t p) {\n\treturn { a, b, -a * p.x - b * p.y };\n}\n\n// t should be radius\npt_t rot(pt_t p, double r) {\n\treturn {\n\t\tcos(r) * p.x - sin(r) * p.y,\n\t\tsin(r) * p.x + cos(r) * p.y\n\t};\n}\n\ndouble abs(pt_t p) {\n\treturn sqrt(p.x * p.x + p.y * p.y);\n}\n\n// angle [0, 2PI) of vector p to vector q\ndouble angle(pt_t p, pt_t q) {\n\tp = p * (1.0 / abs(p));\n\tq = q * (1.0 / abs(q));\n\tdouble r0 = acos(p.x * q.x + p.y * q.y);\n\tdouble r1 = asin(p.x * q.y - p.y * q.x);\n\tif (r1 >= 0) return r0;\n\telse return 2 * M_PI - r0;\n}\n\ndouble dist(line_t l, pt_t p) {\n\treturn abs(l.a * p.x + l.b * p.y + l.c)\n\t\t/ sqrt(l.a * l.a + l.b * l.b);\n}\n\nbool on_same_line(intpt_t p, intpt_t q) {\n\tint mask = (p.x ? 0 : 0b1000) + (p.y ? 0 : 0b100)\n\t\t+ (q.x ? 0 : 0b10) + (q.y ? 0 : 0b1);\n\tif ((mask & 0b1100) == 0b1100 || (mask & 0b0011) == 0b0011) return true;\n\tif ((mask & 0b1010) == 0b1010 || (mask & 0b0101) == 0b0101) return true;\n\tif (mask & 0b0000) {\n\t\tp = p / gcd(p.x, p.y);\n\t\tq = q / gcd(q.x, q.y);\n\t\tif (p.x < 0) p = p * -1;\n\t\tif (q.x < 0) q = q * -1;\n\t\tif (p == q) return true;\n\t\telse return false;\n\t}\n\telse return false;\n}\n\nint main() {\n\tintpt_t p0, p1;\n\tcin >> p0.x >> p0.y >> p1.x >> p1.y;\n\tint q; cin >> q;\n\tcout << setprecision(20);\n\tLoop(i, q) {\n\t\tintpt_t p2;\n\t\tcin >> p2.x >> p2.y;\n\t\tintpt_t ip = p1 - p0;\n\t\tintpt_t iq = p2 - p0;\n\t\tpt_t p = cvtpt(ip);\n\t\tpt_t q = cvtpt(iq);\n\t\tbool judge;\n\t\tif (on_same_line(ip, iq)) judge = true;\n\t\telse judge = false;\n\t\tdouble r = angle(p, q);\n\t\tif (judge) {\n\t\t\tif (M_PI * 0.5 < r && M_PI * 1.5) {\n\t\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (abs(q) > abs(p)) {\n\t\t\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif (r < M_PI) {\n\t\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\t\t}\n\t\t}\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <fstream>\n#include <typeinfo>\n#include <vector>\n#include <cmath>\n#include <set>\n#include <map>\n#include <string>\n#include <algorithm>\n#include <cstdio>\n#include <queue>\n#include <iomanip>\n#include <cctype>\n#define syosu(x) fixed<<setprecision(x)\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> P;\ntypedef pair<double,double> pdd;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef vector<char> vc;\ntypedef vector<vc> vvc;\ntypedef vector<bool> vb;\ntypedef vector<vb> vvb;\ntypedef vector<P> vp;\ntypedef vector<vp> vvp;\ntypedef pair<int,P> pip;\ntypedef vector<pip> vip;\nconst int inf=1<<25;\nconst double pi=acos(-1);\nconst double eps=1e-8;\nconst vi emp;\n\nstruct point{\n\tdouble x,y;\n\tpoint operator+(point p){\n\t\treturn point{x+p.x,y+p.y};\n\t}\n\tpoint operator-(point p){\n\t\treturn point{x-p.x,y-p.y};\n\t}\n\tpoint operator*(double p){\n\treturn point{x*p,y*p};\n\t}\n\tpoint operator/(double p){\n\t\tif(!p) return point{0,0}; \n\t\treturn point{x/p,y/p};\n\t}\n\tbool operator==(point p){\n\t\treturn fabs(x-p.x)<eps&&fabs(y-p.y)<eps;\n\t}\n};\n\ntypedef pair<point,point> pp;\nconst point O{0,0};\n\nclass Geom{\n\tpublic:\n\tdouble Length(point x,point y){\n\t\tpoint z=y-x;\n\t\treturn sqrt(z.x*z.x+z.y*z.y);\n\t}\n\tdouble IP(point p,point q){\n\t\treturn p.x*q.x+p.y*q.y;\n\t}\n\tdouble CP(point p,point q){\n\t\treturn p.x*q.y-q.x*p.y;\n\t}\n\tstring Counter_Clockwise(pp a,point x){\n\t\tpoint A=a.second-a.first;\n\t\tpoint X=x-a.first;\n\t\tdouble cp=CP(A,X),ip=IP(A,X),Al=Length(O,A),Xl=Length(O,X);\n\t\tif(cp>eps) return \"COUNTER_CLOCKWISE\";\n\t\tif(cp<-eps) return \"CLOCKWISE\";\n\t\tif(ip<-eps) return \"ONLINE_BACK\";\n\t\tif(Xl<Al||fabs(Xl-Al)<eps) return \"ON_SEGMENT\";\n\t\treturn \"ONLINE_FRONT\";\n\t}\n};\n\nint Q;\ndouble x,y,X1,Y1,X2,Y2;\n\nint main(){\n\tGeom geo;\n\tcin>>X1>>Y1>>X2>>Y2>>Q;\n\tfor(int i=0;i<Q;i++){\n\t\tcin>>x>>y;\n\t\tcout<<geo.Counter_Clockwise(pp(point{X1,Y1},point{X2,Y2}),point{x,y})<<endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\nusing u64 = uint_fast64_t; \nusing pii =  pair<int, int>;\nusing pll =  pair<long long, long long>;\n#define rep(i, n) for(int i = 0; i < (n); ++i)\n#define all(x) (x).begin(),(x).end()\nconstexpr char ln =  '\\n';\n//////////////////////////////////////////////////////////////////////////////\n\nusing DD = double; // 精度が足りないときはlong double\nconstexpr DD EPS = 1e-11;\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\ninline int sgn(DD a) {return (a < -EPS) ? -1 : (a > EPS) ? 1 : 0;}\n\n//点\nstruct Point {\n    DD x, y;\n    Point (DD x = 0, DD y = 0): x(x), y(y) {}\n\n    Point operator+(const Point &p) const { return Point(*this) += p;}\n    Point operator-(const Point &p) const { return Point(*this) -= p;}\n    Point operator*(const Point &p) const { return Point(*this) *= p;}\n    Point operator*(DD a) const { return Point(*this) *= a;}\n    Point operator/(DD a) const { return Point(*this) /= a;}\n    Point& operator+=(const Point &p) { x += p.x; y += p.y; return *this;}\n    Point& operator-=(const Point &p) { x -= p.x; y -= p.y; return *this;}\n    Point& operator*=(const Point &p) { DD u = x*p.x - y*p.y; DD v = x*p.y + y*p.x; x = u; y = v; return *this;}\n    Point& operator*=(DD a) { x *= a; y *= a; return *this;}\n    Point& operator/=(DD a) { x /= a; y /= a; return *this;}\n    bool operator== (const Point &p) const { return !sgn(x - p.x) && !sgn(y - p.y);}\n    bool operator!= (const Point &p) const { return sgn(x - p.x) || sgn(y - p.y);}\n    bool operator< (const Point &p) const {\n        if (sgn(x - p.x)) return sgn(x - p.x) < 0;\n        return sgn(y - p.y) < 0;\n    }\n    friend istream& operator >>(istream& is, Point& p) { is >> p.x >> p.y; return is;}\n    friend ostream& operator <<(ostream& os, const Point& p) { os << p.x << \" \" << p.y; return os;}\n\n    DD norm() { return x*x + y*y;}\n    DD abs() { return sqrt(norm());}\n    DD arg() { return atan2(y,x);}\n};\n\n//ベクトル\nusing Vector = Point;\n\ninline DD norm(const Vector &a) { return a.x * a.x + a.y * a.y;}\ninline DD abs(const Vector &a) { return sqrt(norm(a));}\ninline DD dot(const Vector &a, const Vector &b) { return a.x * b.x + a.y * b.y;}\ninline DD cross(const Vector &a, const Vector &b) { return a.x * b.y - a.y * b.x;}\ninline Point rot(const Point &p, DD arg) { return Point(cos(arg) * p.x - sin(arg) * p.y, sin(arg) * p.x + cos(arg) * p.y);}\ninline Point rot90(const Point &p) { return Point(-p.y, p.x);}\ninline DD arg(const Vector &p) { return atan2(p.y, p.x);}\n//象限\nint ort(const Point &a) {\n    if (sgn(norm(a))) {\n        if (sgn(a.y) > 0) return sgn(a.x) > 0 ? 1 : 2;\n        return sgn(a.x) > 0 ? 4 : 3;\n    }\n    return 0;\n}\nbool xsort(const Point &a, const Point &b) {\n    if (sgn(a.x - b.x)) return sgn(a.x - b.x) < 0;\n    return sgn(a.y - b.y) < 0;\n}\nbool ysort(const Point &a, const Point &b) {\n    if (sgn(a.y - b.y)) return sgn(a.y - b.y) < 0;\n    return sgn(a.x - b.x) < 0;\n}\n\nbool argsortcross(const Point &a, const Point &b) {\n    int ao = ort(a), bo = ort(b);\n    if (ao != bo) return ao < bo;\n    return sgn(cross(a,b)) > 0;\n}\n\nbool argsortatan2(const Point &a, const Point &b) {\n    return sgn(atan2(b.y, b.x) - atan2(a.y, a.x)) > 0;\n}\n\n//線分\nstruct Segment {\n    Point p1,p2;\n    Segment() {};\n    Segment(Point p1, Point p2) : p1(p1),p2(p2) {}\n};\n\n//直線\nusing Line = Segment;\n\n// 円\nstruct Circle {\n    Point c;\n    DD r;\n    Circle(){}\n    Circle(Point c, DD r): c(c), r(r) {}\n    friend istream& operator >>(istream& is, Circle& C) { is >> C.c >> C.r; return is;}\n    friend ostream& operator <<(ostream& os, const Circle& C) { os << C.c << \" \" << C.r; return os;}\n};\n\n//多角形\nusing Polygon = vector<Point>;\n\nint ccw(const Point &p0, const Point &p1, const Point &p2) {\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if (sgn(cross(a,b)) > 0) return 1; //p0,p1から見てp2は左側(反時計回り)\n    if (sgn(cross(a,b)) < 0) return -1; //p0,p1から見てp2は右側(時計回り)\n    if (sgn(dot(a,b)) < 0) return 2; //p2-p0-p1の順に一直線上\n    if (sgn(norm(b) - norm(a)) > 0) return -2; //p0-p1-p2の順に一直線上\n    return 0; //p0-p2-p1の順に一直線上\n}\n\n//射影\nPoint project(const Segment &s, const Point &p) {\n    Vector base = s.p2 - s.p1;\n    DD r = dot(p - s.p1, base) / norm(base);\n    return s.p1 + base * r;\n}\n\n//線対称\ninline Point reflect(const Segment &s, const Point &p) {return p + (project(s,p) - p) * 2;}\n\n//線分p1,p2とp3,p4の交差判定\ninline bool intersect(const Point &p1, const Point &p2, const Point &p3, const Point &p4) { return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 && ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);}\ninline bool intersect(const Segment &s1, const Segment &s2) { return intersect(s1.p1, s1.p2, s2.p1, s2.p2);}\n\ninline DD getDistanceLP(const Line &l, const Point &p) { return abs(cross(l.p2 - l.p1,p - l.p1) / abs(l.p2 - l.p1));}\nDD getDistanceSP(const Segment &s, const Point &p) {\n    if (dot(s.p2 - s.p1,p - s.p1) < 0.0) return abs(p - s.p1);\n    if (dot(s.p1 - s.p2,p - s.p2) < 0.0) return abs(p - s.p2);\n    return getDistanceLP(s, p);\n}\nDD getDistance(const Segment &s1, const Segment &s2) {\n    if (intersect(s1, s2)) return (DD)0;\n    return min({getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2), getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)});\n}\n\n//線分と線分の交点\nPoint getCrossPoint(const Segment &s1, const Segment &s2) {\n    Vector base = s2.p2 - s2.p1;\n    DD d1 = abs(cross(base, s1.p1 - s2.p1));\n    DD d2 = abs(cross(base, s1.p2 - s2.p1));\n    DD t = d1 / (d1 + d2);\n    return s1.p1 + (s1.p2 - s1.p1) * t;\n}\n\n//円と直線の交差判定\ninline bool intersect(const Circle &c, const Line &l) { return getDistanceLP(l, c.c) - c.r < EPS;}\n//円と円の交差判定\ninline bool intersect(const Circle &c1, const Circle &c2) { return abs(c1.c - c2.c) - (c1.r + c2.r) < EPS && fabs(c1.r - c2.r) - abs(c1.c - c2.c) < EPS;}\n\n//円と線分の交点\npair<Point, Point> getCrossPoints(const Circle &c, const Line &l) {\n    assert(intersect(c,l));\n    Vector pr = project(l, c.c);\n    Vector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);\n    DD base = sqrt(c.r * c.r - norm(pr - c.c));\n    return make_pair(pr + e * base, pr - e * base);\n}\n\ninline Vector polar(DD a, DD r) { return Point(cos(r) * a, sin(r) * a);}\n\n//円と円の交点\npair<Point, Point> getCrossPoints(const Circle &c1, const Circle &c2) {\n    assert(intersect(c1, c2));\n    DD d = abs(c1.c - c2.c);\n    DD a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (DD(2) * c1.r * d));\n    DD t = arg(c2.c - c1.c);\n    return make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n}\n\n//多角形の面積\nDD area(const Polygon &g) {\n    const int N = g.size();\n    DD ret = 0;\n    for (int i = 0; i < N; ++i) {\n        ret += cross(g[i],g[(i+1)%N]);\n    }\n    return fabs(ret)/2;\n}\n\n// 多角形-点の包含判定\nint containment(const Polygon &g, const Point &p) {\n    const int N = g.size();\n    int cnt = 0;\n    for (int i = 0; i < N; ++i) {\n        if (norm(g[i] - p) < EPS || norm(g[(i+1)%N] - p) < EPS || ccw(g[i], g[(i+1)%N], p) == 0) {\n            return 1; // pがgの辺上に存在する\n        }\n        Point I = Point(2e9 + p.x, 2e9 + 574677631 + p.y);\n        if (ccw(I, p, g[i]) == 0 || ccw(I, p, g[(i+1)%N]) == 0) continue;\n        if (intersect(I, p, g[i], g[(i+1)%N])) ++cnt;\n    }\n    if (cnt&1) return 2; // pがgに含まれる\n    else return 0; // pがgに含まれない\n}\n\n//凸包\nPolygon andrewScan(Polygon s) {\n    Polygon u,l;\n    const int N = s.size();\n    if (N < 3) return s;\n    sort(s.begin(), s.end(), xsort);\n    u.emplace_back(s[0]);\n    u.emplace_back(s[1]);\n    l.emplace_back(s[N-1]);\n    l.emplace_back(s[N-2]);\n    \n    for (int i = 2; i < s.size(); ++i) {\n        // 凸包上の点も含めるなら ccw() == 1\n        for (int n = u.size(); n >= 2 && ccw(u[n-2],u[n-1],s[i]) != -1; --n) {\n            u.pop_back();\n        }\n        u.emplace_back(s[i]);\n    }\n\n    for (int i = N - 3; i >= 0; --i) {\n        // 凸包上の点も含めるなら ccw() == 1\n        for (int n = l.size(); n >= 2 && ccw(l[n-2], l[n-1], s[i]) != -1; --n) {\n            l.pop_back();\n        }\n        l.emplace_back(s[i]);\n    }\n\n    reverse(l.begin(), l.end());\n    for (int i = u.size() - 2; i >= 1; --i) l.emplace_back(u[i]);\n\n    return l;\n}\n\n//最遠点対\nDD farthestpointpair(const Polygon &g) {\n    const int N = g.size();\n    if (N == 2) return abs(g[1] - g[0]);\n    int i = 0, j = 0;\n    for (int k = 0; k < N; ++k) {\n        if (g[k].y > g[i].y) i = k;\n        if (g[k].y < g[j].y) j = k;\n    }\n\n    DD ret = 0;\n    int si = i, sj = j;\n    while (i != sj || j != si) {\n        ret = max(ret, abs(g[i]-g[j]));\n        if (cross(g[(i+1)%N] - g[i], g[(j+1)%N] - g[j]) < -EPS) {\n            i = (i+1)%N;\n        } else {\n            j = (j+1)%N;\n        }\n    }\n\n    return ret;\n}\n\n/////////////////////////////////////////////////////////////////////////////////////////////\n\nvoid CGL_1_A() {\n    Point p1,p2; cin >> p1 >> p2;\n    Line l(p1,p2);\n    int Q; cin >> Q;\n    while (Q--) {\n        Point p; cin >> p;\n        cout << project(l,p) << ln;\n    }\n}\n\nvoid CGL_1_B() {\n    Point p1,p2; cin >> p1 >> p2;\n    Line l(p1,p2);\n    int Q; cin >> Q;\n    while (Q--) {\n        Point p; cin >> p;\n        cout << reflect(l,p) << ln;\n    }\n}\n\nvoid CGL_1_C() {\n    Point p0,p1; cin >> p0 >> p1;\n    int Q; cin >> Q;\n    while (Q--) {\n        Point p2; cin >> p2;\n        int v = ccw(p0,p1,p2);\n        string ans;\n        if (v==1) ans = \"COUNTER_CLOCKWISE\";\n        if (v==-1) ans = \"CLOCKWISE\";\n        if (v==2) ans = \"ONLINE_BACK\";\n        if (v==-2) ans = \"ONLINE_FRONT\";\n        if (v==0) ans = \"ON_SEGMENT\";\n        cout << ans << ln;\n    }\n}\n\nint main() {\n    ios::sync_with_stdio(false); cin.tie(nullptr);\n    cout << fixed << setprecision(20);\n    //CGL_1_A();\n    //CGL_1_B();\n    CGL_1_C();\n}\n"
  },
  {
    "language": "C++",
    "code": "// C++ 14\n#include <math.h>\n#include <iostream>\n#include <vector>\n#include <list>\n#include <algorithm>\n#include <queue>\n#include <stack>\n#include <set>\n#include <map>\n#include <unordered_map>\n#include <string>\n\n#define ll long long\n#define Int ll\n#define loop(x, start, end) for(Int x = start; x < end; x++)\n#define loopdown(x, start, end) for(int x = start; x > end; x--)\n#define span(a,x,y) a.begin()+x,a.begin()+y\n#define span_all(a) a.begin(),a.end()\n#define len(x) (x.size())\n#define last(x) (*(x.end()-1))\n\nusing namespace std;\n\n#define EPS 0.000000001\n#define fequals(a,b) (fabs((a) - (b)) < EPS)\n\nclass Vector2 {\npublic:\n  double x, y;\n  \n  Vector2(double x = 0, double y = 0): x(x), y(y) {}\n  \n  Vector2 operator + (const Vector2 v) const { return Vector2(x + v.x, y + v.y); }\n  Vector2 operator - (const Vector2 v) const { return Vector2(x - v.x, y - v.y); }\n  Vector2 operator * (const double k) const { return Vector2(x * k, y * k); }\n  Vector2 operator / (const double k) const { return Vector2(x / k, y / k); }\n  \n  double length() { return sqrt(norm()); }\n  double norm() { return x * x + y * y; }\n  double dot (Vector2 const v) { return x * v.x + y * v.y; }\n  double cross (Vector2 const v) { return x * v.y - y * v.x; }\n  \n  bool parallel(Vector2 &other) {\n    return fequals(fabs(dot(other)), length() * other.length());\n  }\n  \n  bool orthogonal(Vector2 &other) {\n    return fequals(0, dot(other));\n  }\n  \n  bool operator < (const Vector2 &v) {\n    return x != v.x ? x < v.x : y < v.y;\n  }\n  \n  bool operator == (const Vector2 &v) {\n    return fabs(x - v.x) < EPS && fabs(y - v.y) < EPS;\n  }\n};\n\nostream & operator << (ostream & out, Vector2 const & v) { \n  out<< \"Vector2(\" << v.x << \", \" << v.y << ')';\n  return out;\n}\n\nistream & operator >> (istream & in, Vector2 & v) { \n  double x, y;\n  in >> x;\n  in >> y;\n  v.x = x;\n  v.y = y;\n  return in;\n}\n\n#define MAX_N 1001\nInt N;\nVector2 p0, p1, p2, v01;\nstring msgs[5] = {\"COUNTER_CLOCKWISE\", \"CLOCKWISE\", \"ONLINE_BACK\", \"ONLINE_FRONT\", \"ON_SEGMENT\"};\n\nvoid solve() {\n  Vector2 v02 = p2 - p0;\n  double cross_ = v01.cross(v02);\n  if (cross_ > 0.0) {\n    cout << msgs[0] << endl;return;\n  }\n  else if (cross_ < 0.0) {\n    cout << msgs[1] << endl;return;\n  }\n  \n  double dot_ = v01.dot(v02);\n  if (dot_ < 0.0) {\n    cout << msgs[2] << endl;return;\n  }\n  if (v01.length() - v02.length() >= 0) cout << msgs[4] << endl;\n  else cout << msgs[3] << endl;\n}\n\nvoid input() {\n  cin >> p0 >> p1 >> N;\n  v01 = p1 - p0;\n  while (cin >> p2) {\n    solve();\n  }\n}\n\nint main() {\n  cout.precision(15);\n  input();\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cmath>\n\nusing namespace std;\n\nstatic const long double EPS = 1e-10;\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2; // p2→p0→p1\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nclass Point{\n    public: \n    long double x,y;\n    Point(long double x = 0.0, long double y = 0.0): x(x), y(y) {}\n    Point operator + (Point p) const { return Point(x+p.x, y+p.y); }\n    Point operator - (Point p) const { return Point(x-p.x, y-p.y); }\n    Point operator * (long double a) const { return Point(x*a, y*a); }\n    Point operator / (long double a) const { return Point(x/a, y/a); }\n    bool operator < (const Point &p) const { return (x != p.x ? x < p.x : y < p.y); }\n    bool operator == (const Point &p) const { return fabsl(x - p.x) < EPS && fabsl(y - p.y) < EPS; }\n    long double abs() const { return sqrt(norm()); }\n    long double norm() const { return x*x + y*y; }\n    long double dot(Point p) const { return x*p.x + y*p.y; }\n    long double cross(Point p) const { return x*p.y - y*p.x; }\n};\n\n\nint ccw(Point p0, Point p1, Point p2){\n    Point a = p1 - p0;\n    Point b = p2 - p0;\n    if(a.cross(b) > EPS) return COUNTER_CLOCKWISE;\n    if(a.cross(b) < -EPS) return CLOCKWISE;\n    if(a.dot(b) < -EPS) return ONLINE_BACK;\n    if(a.dot(b) > EPS) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\nint main(){\n    int x1,y1,x2,y2, n;\n    cin >> x1 >> y1 >> x2 >> y2;\n    Point p = Point(x1, y1), q = Point(x2, y2);\n    cin >> n;\n    int x,y;\n    for(int i=0;i<n;i++){\n        cin >> x >> y;\n        switch(ccw(p, q, Point(x, y))){\n            case COUNTER_CLOCKWISE:\n                cout << \"COUNTER_CLOCKWISE\";\n                break;\n            case CLOCKWISE:\n                cout << \"CLOCKWISE\";\n                break;\n            case ONLINE_BACK:\n                cout << \"ONLINE_BACK\";\n                break;\n            case ONLINE_FRONT:\n                cout << \"ONLINE_FRONT\";\n                break;\n            default:\n                cout << \"ON_SEGMENT\";\n                break;\n        };\n        cout << \"\\n\";\n    }\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#define EPS (1e-10)\n#include <math.h>\n#include <iostream>\n#include <iomanip>\nusing namespace std;\n\nint main() {\n\tcin.tie(0); ios::sync_with_stdio(false);\n\tint x0, y0, x1, y1; cin >> x0 >> y0 >> x1 >> y1;\n\tint q; cin >> q;\n\tlong double theta1, theta2;\n\ttheta1 = atan2(y1 - y0, x1 - x0);\n\twhile (q--) {\n\t\tint x2, y2; cin >> x2 >> y2;\n\t\tif (x2 == 0 && y2 == 0) { cout << \"ON_SEGMENT\" << endl; continue; }\n\t\ttheta2 = atan2(y2 - y0, x2 - x0);\n\t\tlong double rev_theta = theta1 >= 0 ? theta1 - M_PI : theta1 + M_PI;\n\t\t//cout << fixed << setprecision(15) << \"theta1 = \" << theta1 << endl << \"theta2 = \" << theta2 << endl << \"rev_theta = \" << rev_theta << endl;\n\t\tif (theta2 - theta1 == M_PI || theta2 - theta1 == -M_PI) { cout << \"ONLINE_BACK\" << endl; continue; }\n\t\tif (theta1 == theta2) {\n\t\t\tlong double dist1 = hypot(x1 - x0, y1 - y0), dist2 = hypot(x2 - x0, y2 - y0);\n\t\t\tif (dist2 > dist1) { cout << \"ONLINE_FRONT\" << endl; continue; }\n\t\t\telse { cout << \"ON_SEGMENT\" << endl; continue; }\n\t\t}\n\t\tif (theta1 >= 0) {\n\t\t\tif (theta2 > theta1 || theta2 < rev_theta) { cout << \"COUNTER_CLOCKWISE\" << endl; continue; }\n\t\t\tif (theta2 < theta1 && theta2 > rev_theta) { cout << \"CLOCKWISE\" << endl; continue; }\n\t\t}\n\t\telse {\n\t\t\tif (theta2 > theta1 && theta2 < rev_theta) { cout << \"COUNTER_CLOCKWISE\" << endl; continue; }\n\t\t\tif (theta2 < theta1 || theta2 > rev_theta) { cout << \"CLOCKWISE\" << endl; continue; }\n\t\t}\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<algorithm>\n#include<vector>\n#include<queue>\n#include<map>\n#include<math.h>\n#include<iomanip>\n#include<set>\n#include<numeric>\n#include<cstring>\n#include<cstdio>\n#include<functional>\n#include<bitset>\n#include<limits.h>\n#include<cassert>\n#include<iterator>\n#include<complex>\n#include<stack>\n#include<sstream>\n#include<iterator>\n#include<list>\n\nusing namespace std;\n\ntypedef  long long int lint;\n\n#define rep(i, n) for (lint i = 0; i < n; i++)\n#define sort(v) sort((v).begin(), (v).end())\n#define reverse(v) reverse((v).begin(), (v).end())\n#define upper(v,hoge) upper_bound(v.begin(),v.end(),hoge)\n#define lower(v,hoge) lower_bound(v.begin(),v.end(),hoge)\n#define mp make_pair\n#define IP pair<int,int>\n#define enld endl\n\nint main() {\n\tdouble x0, y0, x1, y1;\n\tcin >> x0 >> y0 >> x1 >> y1;\n\tlint q;\n\tcin >> q;\n\trep(_, q) {\n\t\tdouble x2, y2;\n\t\tcin >> x2 >> y2;\n\t\tdouble X1 = x1 - x0;\n\t\tdouble Y1 = y1 - y0;\n\t\tdouble X2 = x2 - x0;\n\t\tdouble Y2 = y2 - y0;\n\t\tdouble G = X1 * Y2 - X2 * Y1;\n\t\tif (G > 0) {\n\t\t\tcout << \"COUNTER_CLOCKWISE\" << enld;\n\t\t}\n\t\telse if (G < 0) {\n\t\t\tcout << \"CLOCKWISE\" << enld;\n\t\t}\n\t\telse if (G == 0) {\n\t\t\tif (X2 == 0&&Y2==0) {\n\t\t\t\tcout << \"ON_SEGMENT\" << enld;\n\t\t\t}\n\t\t\telse if(Y2==0) {\n\t\t\t\tdouble k = X1 / X2;\n\t\t\t\tif (k >= 1) {\n\t\t\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t\t\t}\n\t\t\t\telse if (k > 0) {\n\t\t\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t\t\t}\n\t\t\t\telse if (k < 0) {\n\t\t\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tdouble k = Y1 / Y2;\n\t\t\t\tif (k >= 1) {\n\t\t\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t\t\t}\n\t\t\t\telse if (k > 0) {\n\t\t\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t\t\t}\n\t\t\t\telse if (k < 0) {\n\t\t\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst int inf = 0x3f3f3f3f;\n#define dbg(x...) do { cout << \"\\033[32;1m\" << #x <<\" -> \"; err(x); } while (0)\nvoid err() { cout << \"\\033[39;0m\" << endl; }\ntemplate<class T, class... Ts> void err(const T& arg,const Ts&... args) { cout << arg << \" \"; err(args...); }\ntypedef long double db;\nconst db eps = 1e-12;\nconst db pi = acosl(-1.0);\ninline int sgn(db x) {if(fabs(x) < eps) return 0; return x < 0 ? -1 : 1;}\n\nstruct Point{\n    db x, y;\n    Point(){}\n    Point(db x, db y):x(x), y(y){}\n    void input(){\n        cin >> x >> y;\n    }\n    Point operator - (const Point &b) const{\n        return Point(x - b.x, y - b.y);\n    }\n    db operator ^ (const Point &b)const {\n        return x * b.y - y * b.x;\n    }\n    db operator * (const Point &b) const{\n        return x * b.x + y * b.y;\n    }\n}p0, p1, p2;\n\n\nint main(){\n#ifndef ONLINE_JUDGE\n// freopen(\"i.in\",\"r\",stdin);\n//  freopen(\"o.out\",\"w\",stdout);\n#endif\n    p0.input(); p1.input();\n    int q;scanf(\"%d\", &q);\n    while(q--){\n        p2.input();\n        int d1 = sgn((p2 - p0) ^ (p1 - p0));\n        if(d1 < 0) puts(\"COUNTER_CLOCKWISE\");\n        else if(d1 > 0) puts(\"CLOCKWISE\");\n        else {\n            int d2 = sgn((p2 - p0) * (p1 - p0));\n            if(d2 < 0) puts(\"ONLINE_BACK\");\n            else if(sgn((p2 - p1) * (p1 - p0)) > 0) puts(\"ONLINE_FRONT\");\n            else puts(\"ON_SEGMENT\");\n        }\n        \n    }\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define REP(i,n) for (long long i=0;i<(n);i++)\n#define FOR(i,a,b) for (long long i=(a);i<(b);i++)\n#define RREP(i,n) for(long long i=n;i>=0;i--)\n#define RFOR(i,a,b) for(long long i=(a);i>(b);i--)\n#define dump1d_arr(array) REP(i,array.size()) cerr << #array << \"[\" << (i) << \"] ==> \" << (array[i]) << endl;\n#define dump2d_arr(array) REP(i,array.size()) REP(j,array[i].size()) cerr << #array << \"[\" << (i) << \"]\" << \"[\" << (j) << \"] ==> \" << (array[i][j]) << endl;\n#define dump(x)  cerr << #x << \" => \" << (x) << endl;\n#define dumpP(p) cerr << \"( \" << p.first << \" , \" << p.second << \" )\" << ends;\n#define CLR(vec) { REP(i,vec.size()) vec[i] = 0; } \n#define SORT(c) sort((c).begin(),(c).end())\n#define MIN(vec) *min_element(vec.begin(), vec.end());\n#define MAX(vec) *max_element(vec.begin(), vec.end());\n#define UNIQ(vec) vec.erase(unique(vec.begin(), vec.end()),vec.end());\n#define IN(n,m)  (!(m.find(n) == m.end()))\n#define ENUM(m) for (auto itr = m.begin(); itr != m.end(); ++itr)\n#define dump_MAP(m) for(auto itr = m.begin(); itr != m.end(); ++itr) { cerr << itr->first << \" --> \"  << itr->second << endl; }\n#define FINDL(vec,x) (lower_bound(vec.begin(),vec.end(),x) - vec.begin())\n#define FINDU(vec,x) (upper_bound(vec.begin(),vec.end(),x) - vec.begin())\n#define ROUND(N) setprecision(N)\nusing namespace std;\nconstexpr long double pi = M_PI;\nconstexpr double eps = 1e-10;\nconstexpr long mod = 1000000007;\nconstexpr short shINF = 32767;\nconstexpr long loINF = 2147483647;\nconstexpr long long llINF = 9223372036854775807;\ntypedef long long LL;\ntypedef vector<LL> VI;\ntypedef vector<VI> VVI;\ntypedef vector<string> VS;\ntypedef pair<LL,LL> pr;\ntypedef vector<pr> VP;\nstruct Order {\n  bool operator() (pr const& a,pr const& b) const {\n    return a.first > b.first || ((a.first == b.first) && (a.second > b.second));\n  }\n};\ntypedef struct _PT {\n  long double x, y;\n  _PT() {}\n  _PT(long double x,long double y) : x(x), y(y) {} \n  _PT operator + (_PT p){\n     return _PT(x + p.x, y + p.y);\n  }\n  _PT operator - (_PT p){\n     return _PT(x - p.x, y - p.y);\n  }\n  _PT operator * (long double d){\n     return _PT(d*x, d*y);\n  }\n  bool operator <(const struct _PT &e) const{\n     return x == e.x? (y < e.y) : x < e.x;\n  }\n  bool operator >(const struct _PT &e) const{\n     return abs(x - e.x) < eps ? ((y - e.y) > eps) : ((x - e.x)>eps);\n  }\n\n  // --オプジェクトは位置ベクトル--\n\n  long double dist(_PT p){ //点pとの距離の2乗\n     return (x-p.x)*(x-p.x) + (y-p.y)*(y-p.y);\n  }\n\n  // --オブジェクトは幾何ベクトル--\n  \n  long double dot(_PT v){ //ベクトルvとの内積\n     return x * v.x + y * v.y;\n  }\n  \n  long double det(_PT v){ // ベクトルvとの外積\n     return x * v.y - v.x * y;\n  }\n\n  long double norm(void){ // ベクトルのノルム\n    return sqrt(x*x + y*y);\n  }\n\n  long double twiceNorm(void){ // ノルムの2乗\n    return x*x + y*y;\n  }\n\n  bool is_parallel(_PT v) { //ベクトルvと平行か(外積 = 0か)\n    return (abs(x * v.y - v.x * y) < eps);\n  }\n}P;\n\nint main(void) {\n  double px,py,qx,qy,rx,ry;\n  cin >> px >> py >> qx >> qy;\n  double base = atan2((qy-py),(qx-px));\n  int n;\n  cin >> n;\n  REP(i,n) {\n    cin >> rx >> ry;\n    double rad = atan2((ry-py),(rx-px));\n    if (abs(rad-base) < eps || (px == rx)&&(py == ry)) {\n      if ((abs(rx-px) - abs(qx-px) > eps) || (abs(ry-py) - abs(qy-py) > eps)) cout << \"ONLINE_FRONT\" << endl;\n      else cout << \"ON_SEGMENT\" << endl;\n    }\n    else if (abs(abs(rad - base)-pi) < eps) cout << \"ONLINE_BACK\" << endl;\n    else if ((rad > base && (rad - base) < pi) || (rad < base && (base - rad) > pi)) cout << \"COUNTER_CLOCKWISE\" << endl;\n    else cout << \"CLOCKWISE\" << endl;\n  }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define FOR(i, s, n) for(int i = s; i < (int)n; ++i)\n#define per(i, n) for(int i = n; i >= 0; i--)\n#define ROF(i, s, n) for(int i = s; i >= (int)n; i--)\n#define FORIT(i, A) for (auto i : A)\n#define PRINT(x) cout << (x) << \"\\n\"\n#define ALL(a) (a).begin(),(a).end()\n#define RALL(a) (a).rbegin(), (a).rend()\n#define MP make_pair\n#define PB push_back\n#define EACH(i, n) for (__typeof((n).begin()) i = (n).begin(); i != (n).end(); ++i)\n#define SZ(a) int((a).size())\n#define EXIST(s,e) ((s).find(e)!=(s).end())\n#define SORT(c) sort((c).begin(),(c).end())\n#define CLR(a) memset((a), 0 ,sizeof(a))\n#define NCLR(a) memset((a), -1 ,sizeof(a))\n#define sq(n) (n) * (n)\ntypedef vector<int> VI;\ntypedef vector<VI> VVI;\ntypedef vector<string> VS;\ntypedef pair<int, int> PII;\ntypedef complex<long double> P;\ntypedef long long LL;\ntypedef vector<LL> VLL;\ntypedef vector<VLL> VVLL;\ntypedef unsigned int uint;\ntypedef unsigned long long ull;\ntypedef priority_queue<int> maxpq;\ntypedef priority_queue< int, vector<int>, greater<int> > minpq;\ntypedef complex<double> Point;\nstatic const double EPS = 1e-10;\nstatic const double PI = acos( -1.0 );\nstatic const int mod = 1000000007;\nstatic const int INF = 1 << 29;\nstatic const LL LL_INF = 1ll << 60;\nstatic const int dx[] = { -1, 0, 1, 0, 1, -1, 1, -1 };\nstatic const int dy[] = { 0, -1, 0, 1, 1, 1, -1, -1 };\n\n#ifdef WIN32\n#define dump(x) cerr << #x << \" = \" << (x) << \"\\n\"\n#define debug(x) cerr << #x << \" = \" << (x) << \" (L\" << __LINE__ << \")\" << \" \" << __FILE__ << \"\\n\"\n#else\n#define dump(x)\n#define debug(x)\n#endif\n\ntemplate<class T> ostream &operator<<( ostream &os, vector<T> &v ) {\n  for ( int i = 0; i < v.size(); i++ ) {\n    if ( i ) os << \" \";\n    os << v[ i ];\n  }\n  return os;\n}\n\nlong double ClockWise(P p0, P p1, P p2)\n{\n  p1 -= p0;\n  p2 -= p0;\n  return arg( p1 ) - arg( p2 );\n}\n\nint main() {\n  ios::sync_with_stdio( false );\n  cin.tie( 0 );\n#ifdef WIN32\n  cerr << fixed;\n#endif\n  cout << fixed;\n  P p0, p1, p2;\n  long double x, y;\n  cin >> x >> y;\n  p0 = P( x, y );\n  cin >> x >> y;\n  p1 = P( x, y );\n  int n;\n  cin >> n;\n  for ( int i = 0; i < n; i++ ) {\n    cin >> x >> y;\n    p2 = P( x, y );\n    long double a = ClockWise( p0, p1, p2 );\n    if ( abs(a) < EPS )\n    {\n      if ( abs(p1) < abs(p2) )\n      {\n        PRINT( \"ONLINE_FRONT\" );\n      }\n      else {\n        PRINT( \"ON_SEGMENT\" );\n      }\n    }\n    else if ( abs(a) == acosl(-1) )\n    {\n      PRINT( \"ONLINE_BACK\" );\n    }\n    else if ( a < 0 - EPS )\n    {\n      PRINT( \"COUNTER_CLOCKWISE\" );\n    }\n    else\n    {\n      PRINT( \"CLOCKWISE\" );\n    }\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cmath>\n\nusing namespace std;\nconst double EPS=1e-9;\nconst double PI=3.141592653589793238;//18 ragham\nbool Equal(double d1,double d2)\n{ return fabs(d1-d2)<EPS;}\n\nstruct line{double a,b,c;};\nstruct vec\n{\n  double x,y;\n  vec(double _x,double _y)\n  {x=_x;  y=_y;}\n};\n  \nstruct poiny_i\n{\n  int x,y;\n  point_i(int _x,int _y){x=_x;y=_y;}\n};\nstruct point\n{\n  double x,y;\n  point(double _x=0,double _y=0){x=_x;y=_y;}\n  bool operator < (point other)\n  {  \n    if(fabs(x-other.x)<EPS)\n      return y<other.y;\n    return x<other.x;}\n  bool operator == (point other)\n  {return (fabs(x-other.x)<EPS) && (fabs(y-other.y)<EPS) ;}\n  \n  \n};\ndouble Hypot(double dx,double dy)\n{\n  return sqrt(dx*dx+dy*dy);\n}\ndouble Distance(point p1,point p2)\n{\n  return hypot(p1.x-p2.x,p1.y-p2.y);\n}\ndouble DEG_to_RAD(double theta)\n{\n  return theta*PI/180;\n}\npoint rotate(point p, double theta)//theta is degree\n{\n  \n  //rotation matrixR(theta) = [cos(theta) - sin(theta)]\n  //                          [sin(theta) + cos(theta)]\n  //usage: [x'] = R(theta)* [x]\n  //       [y']             [y]\n  double rad=DEG_to_RAD(theta);\n  return point(p.x * cos(rad) - p.x * sin(rad) ,\n\t       p.y * sin(rad) + p.y * cos(rad)  );\n}\nvoid PointsToLine(point p1,point p2,line *l)\n{\n  if(p1.x==p2.x) // vertical line handled here\n    { l->a=1.0;   l->b= 0.0 ; l->c=-p1.x;}\n  else\n    {\n      l->a=-(double)(p1.y-p2.y)/(p1.x-p2.x);\n      l->b=1.0;\n      l->c=-(double)(l->a * p1.x) - (l->b*p1.y);\n    }\n}\nbool AreParallel(line l1,line l2)\n{\n  return Equal(l1.a,l2.a) && Equal(l1.b,l2.b);\n}\nbool AreSame(line l1,line l2)\n{\n  return AreParallel(l1,l2) && Equal(l1.c,l2.c);\n}\nbool AreIntersect(line l1,line l2,point *p)//TO BE CHECKED (mine)\n{\n  if(AreSame(l1,l2))\n    return false;\n  if(AreParallel(l1,l2))\n    return false;\n\n  //solving\n  double delta=(double)l1.a*l2.b - l1.b*l2.a;\n  if(Equal(delta,0))//this if should never be true because lines are't parallel\n    return false;\n  p->x= (double)(l1.c*l2.b-l2.c*l1.b) / delta;\n  p->y= (double)(l1.a*l2.c-l2.a*l1.c) / delta;\n  return true;\n}\nvec ToVector(point p1,point p2)\n{\n  return vec(p2.x-p1.x,p2.y-p1.y);\n}\nvec ScaleVector(vec v, double s) // v*=s\n{\n  return vec(v.x*s,v.y*s);\n}\npoint Translate(point p,vec move)//moves point p in direction of vector move\n{\n  return point(p.x+move.x , p.y + move.y);\n}\ndouble Dot(double x1,double y1 ,double x2,double y2)\n{ return x1*x2+y1*y2;};\ndouble Cross(point p,point q,point r)\n{\n  return (r.x-q.x)*(p.y-q.y)-(r.y-q.y)*(p.x-q.x);\n}\nbool Collinear(point p,point q,point r)\n{\n  return Equal(Cross(p,q,r),0);\n}\n//returns true if point r is on the left side of line pq\nbool CCW(point p,point q,point r)\n{\n   //can be modified to accept collinear ( >0 instead of >EPS )\n  if(Cross(p,q,r) > EPS)\n    return true;\n  return false;\n}\n\n// ****************************### END OF LIBRARY ###************************\n\npoint p,q,r;\n\nvoid alg()\n{\n  if(Collinear(p,q,r))\n    {\n      vec v1=ToVector(p,q);\n      vec v2=ToVector(p,r);\n      if(Dot(v1.x,v1.y , v2.x,v2.y)<0){\n\tcout<<\"ONLINE_BACK\"<<endl;\n\treturn;}\n      else if(Hypot(v1.x,v1.y)>=Hypot(v2.x,v2.y))\n\tcout<<\"ON_SEGMENT\"<<endl;\n      else\n\tcout<<\"ONLINE_FRONT\"<<endl;\n      return;\n    }\n  else if(CCW(p,q,r))\n    cout<<\"COUNTER_CLOCKWISE\"<<endl;\n  else\n    cout<<\"CLOCKWISE\"<<endl;\n}\nvoid input()\n{\n  int x,y;\n  cin>>x>>y;\n  p=point(x,y);\n  cin>>x>>y;\n  q=point(x,y);\n   int n;\n  cin>>n;\n  for(int i=1;i<=n;i++){\n    cin>>x>>y;\n    r=point(x,y);\n    alg();\n  }\n}\nint main()\n{\n    input();\n   \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define EPS 1e-10\n\nclass point {\npublic:\n\tdouble x, y;\n\tpoint() {}\n\tpoint( double x_, double y_ ) : x(x_), y(y_) {}\n\tpoint operator -( point p ) { return point( x - p.x, y - p.y ); }\n\tpoint operator +( point p ) { return point( x + p.x, y + p.y ); }\n\tpoint operator *( int a ) { return point( x * a, y * a ); }\n};\n\nclass segment {\npublic:\n\tpoint p1, p2;\n\tsegment() {}\n};\n\ndouble dot( point a, point b ) { return a.x * b.x + a.y * b.y; }\ndouble cross( point a, point b ) { return a.x * b.y - a.y * b.x; }\ndouble norm( point a ) { return a.x * a.x + a.y * a.y; }\n\ndouble distance( segment s, point p )\n{\n\tif( dot( s.p2 - s.p1, p - s.p1 ) < 0 ) return sqrt( norm( p - s.p1 ) );\n\tif( dot( s.p1 - s.p2, p - s.p2 ) < 0 ) return sqrt( norm( p - s.p2 ) );;\n\treturn fabs( cross( s.p2 - s.p1, p - s.p1 ) / sqrt( norm( s.p2 - s.p1 ) ) );\n}\n\nint ccw( point p0, point p1, point p2 )\n{\n\tpoint v1 = p1 - p0;\n\tpoint v2 = p2 - p0;\n\tif( cross( v1, v2 ) > EPS ) return 1;\n\tif( cross( v1, v2 ) < -EPS ) return -1;\n\tif( dot( v1, v2 ) < -EPS ) return 2;\n\tif( norm( v1 ) < norm( v2 ) ) return -2;\n\treturn 0;\n}\n\nbool intersect( segment s1, segment s2 )\n{\n\treturn ccw( s1.p1, s1.p2, s2.p1 ) * ccw( s1.p1, s1.p2, s2.p2 ) <= 0 &&\n\t\t\tccw( s2.p1, s2.p2, s1.p1 ) * ccw( s2.p1, s2.p2, s1.p2 ) <= 0;\n}\n\ndouble distance( segment s1, segment s2 )\n{\n\tif( intersect( s1, s2 ) ) return 0;\n\treturn min( { distance( s1, s2.p1 ), distance( s1, s2.p2 ),\n\t\t\t\t\tdistance( s2, s1.p1 ), distance( s2, s1.p2 ) } );\n}\n\nint main()\n{\n\tsegment s;\n\tcin >> s.p1.x >> s.p1.y >> s.p2.x >> s.p2.y;\n\tint q;\n\tcin >> q;\n\tfor( int i = 0; i < q; i++ ) {\n\t\tpoint p;\n\t\tcin >> p.x >> p.y;\n\t\tint ret = ccw( s.p1, s.p2, p );\n\t\tstring ans = \"ON_SEGMENT\";\n\t\tif( ret == 1 ) ans = \"COUNTER_CLOCKWISE\";\n\t\tif( ret == -1 ) ans = \"CLOCKWISE\";\n\t\tif( ret == 2 ) ans = \"ONLINE_BACK\";\n\t\tif( ret == -2 ) ans = \"ONLINE_FRONT\";\n\n\t\tcout << ans << endl;\n\t}\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define db double\nconst db eps = 1e-6;\n\nstruct poi {\n\tdb x, y;\n\tvoid r() { cin >> x; cin >> y; }\n\tvoid w() { cout << x << ' ' << y << '\\n'; }\n\tpoi operator -(poi p) {\n\t\treturn {x - p.x, y - p.y};\n\t}\n\tpoi operator +(poi p) {\n\t\treturn {x + p.x, y + p.y};\n\t}\n\tpoi operator *(db d) {\n\t\treturn {x * d, y * d};\n\t}\n\tdb dot(poi p) {\n\t\treturn x * p.x + y * p.y;\n\t}\n\tdb cross(poi p) {\n\t\treturn x * p.y - y * p.x;\n\t}\n\tdb len2() { return x * x + y * y; }\n\tpoi proj(poi p, poi q) {\n\t\tdb s = (*this - p).dot(q - p) / (q - p).len2();\n\t\treturn p + (q - p) * s;\n\t}\n};\n\nint ccw(poi a, poi b, poi c) {\n\tpoi u = b - a, v = c - a;\n\tif(u.cross(v) > eps) return 1;\n\tif(u.cross(v) < -eps) return -1;\n\tif(u.dot(v) < -eps) return -2;\n\tif(u.len2() + eps < v.len2()) return 2;\n\treturn 0;\n}\n\nint main() {\n\tios :: sync_with_stdio(false);\n\n\tpoi p, q; p.r(); q.r();\n\tint T; cin >> T;\n\twhile(T --) {\n\t\tpoi t; t.r();\n\t\tint a = ccw(p, q, t);\n\t\t//cout << a << '\\n';\n\t\tcout << (a != -2 ? a != -1 ? a != 0 ? a != 1 ?\n\t\t\t\"ONLINE_FRONT\" :\n\t\t\t\"COUNTER_CLOCKWISE\" :\n\t\t\t\"ON_SEGMENT\" :\n\t\t\t\"CLOCKWISE\" :\n\t\t\t\"ONLINE_BACK\") << '\\n';\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "/* Header {{{ */\n#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long readtype;\ntypedef long long var;\ntypedef long double let;\n\nreadtype read() {\n  readtype a = 0, c = getchar(), s = 0;\n  while (!isdigit(c)) s |= c == '-', c = getchar();\n  while (isdigit(c)) a = a * 10 + c - 48, c = getchar();\n  return s ? -a : a;\n}\n\n#ifdef LOCAL_LOGGER\n#define logger(...) fprintf(stderr, __VA_ARGS__)\n#define abortif(v, ...) if (v) {logger(\"Error in Line %d, Function '%s()'.\\nInfo: \", __LINE__, __FUNCTION__); logger(__VA_ARGS__); exit(0);}\n#else\n#define logger(...);\n#define abortif(v, ...);\n#endif\n/* }}} */\n\nconst let EPS = 1e-8;\n\nint sign(let x) { return (x > EPS) ? 1 : (x < -EPS) ? -1 : 0; }\nbool equal(let a, let b) { return sign(a - b) == 0; }\n\nstruct Point {\n  let x, y;\n  friend Point operator - (Point a, Point b) {\n    return (Point) {a.x - b.x, a.y - b.y};\n  }\n  Point operator * (let k) { return (Point) {x * k, y * k}; }\n  friend let Times(Point a, Point b) {\n    return a.x * b.y - a.y * b.x;\n  }\n  friend bool operator == (Point a, Point b) {\n    return equal(a.x, b.x) && equal(a.y, b.y);\n  }\n\n  let Dist() {\n    return sqrt(x * x + y * y);\n  }\n};\n\ntypedef Point Vec;\n\nint main() {\n// #ifndef ONLINE_JUDGE\n//   freopen(\"CGL_1_3.in\", \"r\", stdin);\n//   freopen(\"CGL_1_3.out\", \"w\", stdout);\n// #endif\n// #ifdef LOCAL_LOGGER\n//   freopen(\"CGL_1_3.log\", \"w\", stderr);\n// #endif\n\n  let xp0 = read(), yp0 = read(), xp1 = read(), yp1 = read();\n  Point p0 = (Point) {xp0, yp0}, p1 = (Point) {xp1, yp1};\n  Vec v1 = p1 - p0;\n\n  int q = read();\n  while (q--) {\n    let xp2 = read(), yp2 = read();\n    Point p2 = (Point) {xp2, yp2};\n    Vec v2 = p2 - p0;\n    int vsign = sign(Times(v1, v2));\n    if (vsign > 0) puts(\"COUNTER_CLOCKWISE\");\n    else if (vsign < 0) puts(\"CLOCKWISE\");\n    else {\n      if (sign(v1.x) == sign(-v2.x) && sign(v1.y) == sign(-v2.y))\n        puts(\"ONLINE_BACK\");\n      else if (v1.Dist() < v2.Dist()) puts(\"ONLINE_FRONT\");\n      else puts(\"ON_SEGMENT\");\n    }\n  }\n  return 0;\n}\n\n/* ==== Makefile ==== {{{\nCompileAndRun:\n\tmake Compile\n\tmake Run\n\nCompile:\n\tg++ -o CGL_1_3 CGL_1_3.cpp -g -Wall -DLOCAL_LOGGER\n\nCompileUF:\n\tg++ -o CGL_1_3 CGL_1_3.cpp -g -Wall -DLOCAL_LOGGER -fsanitize=undefined\n\nRun:\n\t./CGL_1_3 < CGL_1_3.in > CGL_1_3.out\n==================\n}}} */\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> P;\n#define x real()\n#define y imag()\n\nstring ccw(P a, P b, P c) {\n    P ab = b - a, ac = c - a;\n    P k = ac * conj(ab);\n    if (k.y > 0) return \"COUNTER_CLOCKWISE\";\n    if (k.y < 0) return \"CLOCKWISE\";\n    if (k.x < 0) return \"ONLINE_BACK\";\n    if (abs(ab) < abs(ac)) return \"ONLINE_FRONT\";\n    return \"ON_SEGMENT\";\n}\n\nint main() {\n    double x0, y0, x1, y1, x2, y2;\n    cin >> x0 >> y0 >> x1 >> y1;\n    P   a(x0, y0);\n    P   b(x1, y1);\n    int n;\n    cin >> n;\n    while (n--) {\n        cin >> x2 >> y2;\n        P c(x2, y2);\n        cout << ccw(a, b, c) << endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "//投影\n#include<bits/stdc++.h>\nusing namespace std;\nconst double PI=acos(-1);\nconst double EPS=1e-6;\n#define equals(a,b) (fabs(a)-fabs(b)<EPS)\nenum{\n\tonline_Front=-2,\n\tclock_Wise=-1,\n\ton_Segment=0,\n\tcounter_clock_Wise=1,\n\tonline_Back=2\n};\nconst int INFTY=1<<29;\nstruct Point{\n\tdouble x,y;\n\tPoint(double x,double y):x(x),y(y){}\n\tPoint(){}\n\tPoint(const Point&a){x=a.x;y=a.y;}\n\tPoint operator+(const Point&a){\n\t\treturn Point(x+a.x,y+a.y);\n\t}\n\tPoint operator-(const Point&a){\n\t\treturn Point(x-a.x,y-a.y);\n\t}\n\tPoint operator*(double k){\n\t\treturn Point(k*x,k*y);\n\t}\n\tPoint operator/(double k){\n\t\treturn Point(x/k,y/k);\n\t}\n\tbool operator==(const Point&a){\n\t\treturn equals(x,a.x)&&equals(y,a.y);\n\t} \n};\ntypedef Point Vector;\nPoint operator*(double k,const Point&a){\n\treturn Point(k*a.x,k*a.y);\n}\ndouble norm(const Point&a){\n\treturn a.x*a.x+a.y*a.y;\n}\ndouble abs(const Point&a){\n\treturn sqrt(norm(a));\n}\ndouble dot_product(const Point&a,const Point&b){\n\treturn a.x*b.x+a.y*b.y;\n}\ndouble cross_product(const Point&a,const Point&b){\n\treturn a.x*b.y-a.y*b.x;\n}\nbool is_Vertical(Vector&a,Vector&b){\n\treturn equals(dot_product(a,b),0.0);\n}\nbool is_Parallel(Vector&a,Vector&b){\n\treturn equals(cross_product(a,b),0.0);\n}\nPoint projection_Point(Point&p1,Point&p2,Point&p){\n\tVector base=p2-p1;\n\tdouble r=dot_product(base,p-p1)/norm(base);\n\treturn p1+base*r;\n}\nPoint reflection_Point(Point&p1,Point&p2,Point&p){\n\tPoint temp=projection_Point(p1,p2,p);\n\treturn 2*temp-p;\n}\nint Counter_Clockwise(Point&p0,Point&p1,Point&p2){\n\tVector a=p1-p0;\n\tVector b=p2-p0;\n\tif(cross_product(a,b)>EPS)return counter_clock_Wise;\n\tif(cross_product(a,b)<-EPS)return clock_Wise;\n\tif(dot_product(a,b)<-EPS)return online_Back;\n\tif(norm(a)<norm(b))return online_Front;\n\treturn on_Segment;\n}\nvoid print(int flag){\n\tswitch(flag){\n\t\tcase -2:cout<<\"ONLINE_FRONT\"<<endl;break;\n\t\tcase -1:cout<<\"CLOCKWISE\"<<endl;break;\n\t\tcase 0:cout<<\"ON_SEGMENT\"<<endl;break;\n\t\tcase 1:cout<<\"COUNTER_CLOCKWISE\"<<endl;break;\n\t\tcase 2:cout<<\"ONLINE_BACK\"<<endl;break;\n\t}\n}\nint main(){\n\tPoint p1,p2;\n\tPoint temp;\n\tscanf(\"%lf%lf%lf%lf\",&p1.x,&p1.y,&p2.x,&p2.y);\n\tint q;\n\tscanf(\"%d\",&q);\n\twhile(q--){\n\t\tscanf(\"%lf%lf\",&temp.x,&temp.y);\n\t\tprint(Counter_Clockwise(p1,p2,temp));\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef double R;//double long double ??????????????? cmath?????¢??°??????????????????????????????????????????????????§????????????\ntypedef complex<R> Point;\ntypedef pair<Point , Point> Line;\ntypedef pair<Point ,R > Circle;\ntypedef vector<Point> Poly;\n\n#define EPS (1e-10)//??????\n#define EQ(a,b) (abs((a)-(b)) < EPS)//??????????????°???????????????\n#define EQV(a,b) ( EQ((a).real(), (b).real()) && EQ((a).imag(), (b).imag()) )//????????????????????????????????????\n#define ft first\n#define sd second\n#define pb push_back\nint dy[]={0, 0, 1, -1, 0};\nint dx[]={1, -1, 0, 0, 0};\n \n#define FOR(i,a,b) for (int i=(a);i<(b);i++)\n#define RFOR(i,a,b) for (int i=(b)-1;i>=(a);i--)\n#define REP(i,n) for (int i=0;i<(n);i++)\n#define RREP(i,n) for (int i=(n)-1;i>=0;i--)\n\nR dot(Point a,Point b){\n    return (a.real() * b.real() + a.imag() * b.imag());\n}\nR cross(Point a,Point b){\n    return (a.real() * b.imag() - a.imag() * b.real());\n}\n\n\n\n\nbool is_orthogonal(Line a,Line b){//2??´????????´?????????\n    return EQ(dot(a.ft - a.sd,b.ft - b.sd),0.0);\n}\nbool is_parallel(Line a,Line b){//2??´??????????????????\n    return EQ(cross(a.ft - a.sd,b.ft - b.sd),0.0);\n}\n\n\n\n////////////////////????????????\nint ccw(Point a,Point b,Point c){//ok\n    b -= a; c -= a;\n    if(cross(b,c) > EPS) return 1;//a???b??§???????¨???¨???????????????b???c\n    if(cross(b,c) < -EPS) return -1;//a???b??§????¨???¨???????????????b???c\n    if(dot(b,c) < -EPS) return 2;//c--a--b on same line\n    if(norm(c) - norm(b) > EPS) return -2;//a--b--c(abs??????????????????????????????????????????????????????????)\n    return 0;//a--c--b?????????b==c\n}\n\nbool is_intersection_ll(Line l,Line m){//???????????´??????????????????\n    return abs(cross(l.sd - l.ft,m.sd - m.ft)) > EPS || //????????§??????\n        abs(cross(l.sd - l.ft,m.ft - l.ft)) < EPS; //?????????????????????\n}\n\nbool is_intersection_ls(Line l,Line s){//??´???l??¨??????s???????????????\n    return cross(l.sd - l.ft, s.ft-l.ft)*       // s[0] is left of l\n        cross(l.sd - l.ft, s.sd - l.ft) < EPS; // s[1] is right of l\n}\n\nbool is_intersection_lp(Line l,Point p){//??´???l??¨???p???????????????\n    return abs(cross(l.sd - p,l.ft - p));\n}\n\nbool is_intersection_ss(Line a,Line b){//??????????????????????????????ok\n    return ccw(a.ft,a.sd,b.ft)*ccw(a.ft,a.sd,b.sd) <= 0 && ccw(b.ft,b.sd,a.ft)*ccw(b.ft,b.sd,a.sd) <= 0;\n}\n\nbool is_intersection_sp(Line s,Point p){//????????¨?????????????????? ????§??????????????????¨\n    return abs(s.ft - p) + abs(s.sd - p) - abs(s.ft - s.sd) < EPS;\n}\n\n/////////////?????¢\nR dis_lp(Line l,Point p){//??´???l??¨???p????????¢\n    return abs(cross(l.sd - l.ft,p - l.ft)) / abs(l.sd - l.ft);\n}\n\nR dis_ll(Line l,Line m){//???????????´???????????¢\n    return is_intersection_ll(l,m) ? 0.0 : dis_lp(l,m.ft);\n}\n\nR dis_ls(Line l,Line s){//??´???l??¨??????s????????¢\n    if(is_intersection_ls(l,s)) return 0.0;\n    return min(dis_lp(l,s.ft),dis_lp(l,s.sd));\n}\n\nR dis_sp(Line s,Point p){//??????s??¨???p????????¢\n    if(dot(s.sd - s.ft,p - s.ft) < EPS) return abs(p - s.ft);\n    if(dot(s.ft - s.sd,p - s.sd) < EPS) return abs(p - s.sd);\n    return dis_lp(s,p);\n}\n\nR dis_ss(Line s,Line t){//???????????????????????¢\n    if(is_intersection_ss(s,t)) return 0.0;\n    return min(min(dis_sp(s,t.ft),dis_sp(s,t.sd)),\n            min(dis_sp(t,s.ft),dis_sp(t,s.sd)));\n}\n\n\n\n//////////////?°???±??¨????°?\nPoint projection(Line l,Point p){//?°???±????±???????\n    R t = dot(p - l.ft,l.ft - l.sd) / norm(l.ft - l.sd);\n    return l.ft + t * (l.ft - l.sd);\n}\n\nPoint reflection(Line l,Point p){//????°?????±???????\n    return p + 2.0 * (projection(l,p) - p);\n}\n\n\n\n\n//////////////??????(????????????????¨???????????????¨??????????????????????????????????????£??????)\n\nPoint intersection_ll(Line l,Line m){//????????????????????????????????????????????????\n    R A = cross(l.sd - l.ft,m.sd - m.ft);\n    R B = cross(l.sd - l.ft,l.sd - m.ft);\n    if(abs(A) < EPS && abs(B) < EPS) return m.ft;//?????????\n    //if(abs(A) < EPS)assert(false);//????????§????????????\n    return m.ft + B / A * (m.sd - m.ft);\n}\n\nLine intersection_of_two_circles(Circle c1,Circle c2){//ok ????????????????????????Line?????\\????????????(r1 + r2 > sqrt((x1 - x2) ^ 2 + (y1 - y2) ^ 2))???????????????????????????\n    R a =  abs(c2.ft - c1.ft);\n    R b = c1.sd;\n    R c = c2.sd;\n\n    R rc = (a  * a + b * b - c * c) / (2.0 * a);\n    R rs = sqrt(b * b - rc * rc);//C++ ??§???????????????????????????????????§???????????????sqrt ????????? float ?????????????????? long double ????????????????????????????????????????????¨?????§???????????? C ????????°????????§??????sqrt ????????? double ??????????????£??????????????????\n    Point diff = (c2.ft - c1.ft) / a;\n\n    Line p ;\n    p.ft = c1.ft + diff * rc + diff * Point(0,1) * rs;\n    p.sd = c1.ft + diff * rc + diff * Point(0,-1) * rs;\n\n    return p;\n}\n\n/*\nLine conver_line(Line a,Point maxi,Point mini){//??????????????´??????????????? maxi???????????????????????? mini?????????\n\n    if(abs(dot(a.sd - a.ft,Point(1.0,0.0))) < EPS){//??????x???????????´??????\n        ;\n    }\n}*/\n\n\n/////////////////////////polygon\n\n#define currP(P,i) P[i]//????????????\n#define nextP(P,i) P[(i + 1)%P.size()]//?¬??????????\n\nint is_contains_p_in_Poly(Poly po,Point p){//??????????§???¢????????¨(1)????¢????(-1)????????¨(0)??????????????????????????????\n    bool in = false;\n    REP(i,po.size()){\n        Point a = currP(po,i) - p,b = nextP(po,i) - p;\n        if(a.imag() > b.imag())swap(a,b);\n        if(a.imag() < EPS && -EPS < b.imag())\n            if(cross(a,b) < -EPS) in = !in;\n        if(abs(cross(a,b)) == 0.0 && dot(a,b) < EPS)return  -1;\n    }\n    return in;\n}\n\nR area2(Poly po){//????§???¢?????¢????????????????±???????\n    R A = 0.0;\n    REP(i,po.size())\n        A += cross(currP(po,i),nextP(po, i));\n    return A;\n}\n\n\n\n\n///////////////////////////???\n\nPoly convex_hull(Poly ps){\n    int n = ps.size(),k = 0;\n    Poly ch(2*n);\n    for(int i = 0;i < n;ch[k++] = ps[i++])// lower-hull\n        while(k >= 2 && ccw(ch[k - 2],ch[k - 1],ps[i]) <= 0) --k;\n    for(int i = n - 2,t = k + 1;i >= 0;ch[k++] = ps[i--])//upper-hull\n        while(k >= t && ccw(ch[k - 2],ch[k - 1],ps[i]) <= 0) --k;\n    ch.resize(k - 1);\n    return ch;\n}\n\n#define prevP(P, i) P[(i+P.size()-1) % P.size()]\nbool isconvex(Poly P){\n    for(int i = 0;i < P.size();++i)\n        if(ccw(prevP(P,i),currP(P,i),nextP(P,i)) > 0) return false;\n    return true;\n}\n\nint main(void){\n    Point p1,p2;\n    int x1,y1,x2,y2;\n    cin >> x1 >> y1 >> x2 >> y2;\n    p1 = Point(x1,y1);p2 = Point(x2,y2);\n    int q;\n    cin >> q;\n    REP(i,q){\n        Point p;\n        cin >> x1 >> y1;\n        p = Point(x1,y1);\n        int a = ccw(p1,p2,p);\n        if(a == 1)\n            printf(\"COUNTER_CLOCKWISE\\n\");\n        else if(a == -1)\n            printf(\"CLOCKWISE\\n\");\n        else if(a == 2)\n            printf(\"ONLINE_BACK\\n\");\n        else if(a == -2)\n            printf(\"ONLINE_FRONT\\n\");\n        else\n            printf(\"ON_SEGMENT\\n\");\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cmath>\n#include<cstdio>\n#define eps (1e-11)\n#define equals(a,b) (fabs((a)-(b))<eps)\nusing namespace std;\n\nstatic const int COUNTER_CLOCKWISE=1;\nstatic const int CLOCKWISE=-1;\nstatic const int ONLINE_BACK=2;\nstatic const int ONLINE_FRONT=-2;\nstatic const int ON_SEGMENT=0;\n\nclass Point{\npublic:\n  double x,y;\n  Point(double x=0,double y=0):x(x),y(y){}\n\n  Point operator+(Point p){return Point(x+p.x,y+p.y);}\n  Point operator-(Point p){return Point(x-p.x,y-p.y);}\n  Point operator*(double k){return Point(x*k,y*k);}\n  Point operator/(double k){return Point(x/k,y/k);}\n\n  double abs(){return sqrt(norm());}\n\n  double norm(){return (x*x+y*y);}\n};\ntypedef Point Vector;\n\nclass Segment{\npublic:\n  Point p1,p2;\n  Segment(Point p1,Point p2):p1(p1),p2(p2){}\n};\ntypedef Segment Line;\n\ndouble dot(Vector a,Vector b){return (a.x*b.x+a.y*b.y);}\ndouble cross(Vector a,Vector b){return (a.x*b.y-a.y*b.x);}\n\nPoint project(Segment s,Point p){\n  Vector base=(s.p2-s.p1);\n  double r=(dot(p-s.p1,base)/base.norm());\n  return (s.p1+base*r);\n}\n\nPoint reflect(Segment s,Point p){\n  return p+(project(s,p)-p)*2;\n}\n\nbool isOrthogonal(Vector a,Vector b){\n  return equals(dot(a,b),0.0);\n}\n\nbool isParallel(Vector a,Vector b){\n  return equals(cross(a,b),0.0);\n}\n\nint ccw(Point p0,Point p1,Point p2){\n  Vector a=p1-p0;\n  Vector b=p2-p0;\n  if(cross(a,b)>eps)return COUNTER_CLOCKWISE;\n  if(cross(a,b)<-eps)return CLOCKWISE;\n  if(dot(a,b)<-eps)return ONLINE_BACK;\n  if(a.norm()<b.norm())return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\n\nint main()\n{\n  Point A,B,C,D;\n  int q;\n\n  cin>>A.x>>A.y>>B.x>>B.y;\n  cin>>q;\n  for(int i=0;i<q;i++){\n    cin>>C.x>>C.y;\n    int ans=ccw(A,B,C);\n    if(ans==1)cout<<\"COUNTER_CLOCKWISE\"<<endl;\n    if(ans==-1)cout<<\"CLOCKWISE\"<<endl;\n    if(ans==2)cout<<\"ONLINE_BACK\"<<endl;\n    if(ans==-2)cout<<\"ONLINE_FRONT\"<<endl;\n    if(ans==0)cout<<\"ON_SEGMENT\"<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "////////////////////////////////////////////////////////////////////////////////\n// 平面幾何\n\n// 型変換できるもの\n//   double  -> Point\n//   Segment -> Line\n\n// 誤差の話：絶対誤差でも相対誤差でも死ぬ例\n// int main(){\n//   const double EPS = 1e-9;\n//   double a = 1.3, b = 1e8, c = a + b;\n//   c = c - b;\n//   printf(\"%d\\n\", equal(a, c));          // => 0\n//   printf(\"%d\\n\", relative_equal(a, c)); // => 0\n// }\n\n////////////////////\n// ライブラリ\n#include<cmath>\n#include<algorithm>\n#include<cassert>\n////////////////////\n// 定数\nconst double EPS = 1e-9;                // |EPS|未満の数は0として扱う\n////////////////////\n// 構造体\nstruct Point {\n  double x, y;\n  Point(const double d = 0.0) :x(d), y(d) {}\n  Point(const double x, const double y) :x(x), y(y) {}\n};\nstruct Segment {\n  Point initial, terminal;\n  Segment(const Point& initial, const Point& terminal) :initial(initial), terminal(terminal) {}\n  Segment(const double x1, const double y1, const double x2, const double y2) :initial(x1, y1), terminal(x2, y2) {}\n};\nstruct Line {\n  Point initial, terminal;\n  Line(const Point& initial, const Point& terminal) :initial(initial), terminal(terminal) {}\n  Line(const double x1, const double y1, const double x2, const double y2) :initial(x1, y1), terminal(x2, y2) {}\n  Line(const Segment& s) :initial(s.initial), terminal(s.terminal) {}\n};\n////////////////////\n// 実装\nbool relative_equal(const double d1, const double d2) {return d1 == 0 ? std::abs(d2) < EPS : std::abs((d1 - d2) / d1) < EPS;}\n// 演算子オーバーロード\nbool operator==(const Point& lhs, const Point& rhs) {return relative_equal(lhs.x, rhs.x) && relative_equal(lhs.y, rhs.y);}\nbool operator<(const Point& lhs, const Point& rhs) {return lhs.x != rhs.x ? lhs.x < rhs.x : lhs.y < rhs.y;}\nbool operator>(const Point& lhs, const Point& rhs) {return lhs.x != rhs.x ? lhs.x > rhs.x : lhs.y > rhs.y;}\nbool operator!=(const Point& lhs, const Point& rhs) {return !(lhs == rhs);}\nbool operator<=(const Point& lhs, const Point& rhs) {return !(lhs > rhs);}\nbool operator>=(const Point& lhs, const Point& rhs) {return !(lhs < rhs);}\nconst Point operator+(const Point& lhs, const Point& rhs) {return Point(lhs.x + rhs.x, lhs.y + rhs.y);}\nconst Point operator-(const Point& lhs, const Point& rhs) {return Point(lhs.x - rhs.x, lhs.y - rhs.y);}\nconst Point operator*(const Point& lhs, const Point& rhs) {return Point(lhs.x * rhs.x, lhs.y * rhs.y);}\nconst Point operator/(const Point& lhs, const Point& rhs) {return Point(lhs.x / rhs.x, lhs.y / rhs.y);}\nconst Point operator-(const Point& p) {return Point(-p.x, -p.y);}\n// 点\ndouble abs(const Point& p) {return std::hypot(p.x, p.y);}\ndouble norm(const Point& p) {return p.x * p.x + p.y * p.y;}\ndouble dot(const Point& a, const Point& b) {return a.x * b.x + a.y * b.y;}\ndouble cross(const Point& a, const Point& b) {return a.x * b.y - a.y * b.x;}\n// const Point normalize(const Point& p) {return p / abs(p);}\n// 線\nbool parallel(const Line& l1, const Line& l2) {return std::abs(cross(l2.terminal - l2.initial, l1.terminal - l1.initial)) < EPS;}\nbool orthogonal(const Line& l1, const Line& l2) {return std::abs(dot(l2.terminal - l2.initial, l1.terminal - l1.initial)) < EPS;}\n// 点の位置関係\nenum POSITION {ONLINE_FRONT = -2, CLOCKWISE, ON_SEGMENT, COUNTER_CLOCKWISE, ONLINE_BACK}; \nPOSITION ccw(const Point& a, const Point& b, const Point& p) {\n  Point v1 = b - a;\n  Point v2 = p - a;\n  if(cross(v1, v2) >= EPS) return COUNTER_CLOCKWISE;\n  if(cross(v1, v2) <= -EPS) return CLOCKWISE;\n  if(dot(v1, v2) <= -EPS) return ONLINE_BACK;\n  if(norm(v1) < norm(v2) + EPS) return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\n// 交差判定\nbool intersect(const Point& p1, const Point& p2) {return p1 == p2;}\nbool intersect(const Point& p, const Segment& s) {return abs(p - s.initial) + abs(p - s.terminal) - abs(s.initial - s.terminal) <= EPS;}\nbool intersect(const Segment& s, const Point& p) {return intersect(p, s);}\nbool intersect(const Point& p, const Line& l) {return !parallel(Line(p, l.initial), Line(p, l.terminal));}\nbool intersect(const Line& l, const Point& p) {return intersect(p, l);}\nbool intersect(const Segment& s1, const Segment& s2) {\n  return ccw(s1.initial, s1.terminal, s2.initial) * ccw(s1.initial, s1.terminal, s2.terminal) <= 0\n      && ccw(s2.initial, s2.terminal, s1.initial) * ccw(s2.initial, s2.terminal, s1.terminal) <= 0;\n}\nbool intersect(const Segment& s, const Line& l) {\n  auto v1 = l.terminal - l.initial;\n  auto v2 = s.initial  - l.initial;\n  auto v3 = s.terminal - l.initial;\n  return cross(v1, v2) * cross(v1, v3) <= EPS;\n}\nbool intersect(const Line& l, const Segment& s) {return intersect(s, l);}\nbool intersect(const Line& l1, const Line& l2) {return !parallel(l1, l2) || intersect(l1.initial, l2);}\n// 点の移動\nPoint projection(const Point& p, const Line& l) {\n  auto v = l.initial - l.terminal;\n  return l.initial + dot(p - l.initial, v) / norm(v) * v;\n}\nPoint projection(const Line& l, const Point& p) {return projection(p, l);}\nPoint reflection(const Point& p, const Line& l) {return p + 2 * (projection(p, l) - p);}\nPoint reflection(const Line& l, const Point& p) {return reflection(p, l);}\n// 距離\ndouble distance(const Point& p1, const Point& p2) {\n  auto p = p1 - p2;\n  return hypot(p.x, p.y);\n}\ndouble distance(const Point& p, const Segment& s) {\n  auto r = projection(s, p);\n  return intersect(r, s) ? distance(p, r) : std::min(distance(p, s.initial), distance(p, s.terminal));\n}\ndouble distance(const Segment& s, const Point& p) {return distance(p, s);}\ndouble distance(const Point& p, const Line& l) {return distance(p, projection(p, l));}\ndouble distance(const Line& l, const Point& p) {return distance(p, l);}\ndouble distance(const Segment& s1, const Segment& s2) {\n  return intersect(s1, s2) ? 0.0 : std::min({distance(s1, s2.initial), distance(s1, s2.terminal), distance(s2, s1.initial), distance(s2, s1.terminal)});\n}\ndouble distance(const Segment& s, const Line& l) {return intersect(s, l) ? 0.0 : std::min(distance(s.initial, l), distance(s.terminal, l));}\ndouble distance(const Line& l,const Segment& s) {return distance(s, l);}\ndouble distance(const Line& l1, const Line& l2) {return intersect(l1, l2) ? 0.0 : distance(l1.initial, l2);}\n// 交点\nconst Point crosspoint(const Line& l1, const Line& l2) {\n  assert(intersect(l1, l2));\n  if(parallel(l1, l2)) return l1.initial;                   // 平行なときl1の始点を返す\n  double A = cross(l1.terminal - l1.initial, l2.terminal - l2.initial);\n  double B = cross(l1.terminal - l1.initial, l1.terminal - l2.initial);\n  return l2.initial + B / A * (l2.terminal - l2.initial);\n}\nconst Point crosspoint(const Segment& s, const Line& l) {\n  assert(intersect(s, l));\n  if(parallel(s, l)) return s.initial;\n  Point cp = crosspoint(Line(s), l);\n  assert(intersect(s, cp));\n  return cp;\n}\nconst Point crosspoint(const Line& l, const Segment& s) {return crosspoint(s, l);}\nconst Point crosspoint(const Segment& s1, const Segment& s2) {\n  assert(intersect(s1, s2));\n  if(parallel(s1, s2)) {                                    // 平行なときいずれかの端点を返す\n    if(intersect(s1.initial,  s2)) return s1.initial;\n    if(intersect(s1.terminal, s2)) return s1.terminal;\n    if(intersect(s2.initial,  s1)) return s2.initial;\n    if(intersect(s2.terminal, s1)) return s2.terminal;\n  }\n  return crosspoint(Line(s1), Line(s2));\n}\n// デバッグ用\n#include<bits/stdc++.h>\nusing namespace std;\nvoid print(const Point& p) {cout<<\"point: \"; cout<<\"(\"<<p.x<<\",\"<<p.y<<\")\";}\nvoid print(const Segment& l) {cout<<\"segment: \"; print(l.initial); cout<<\" - \";print(l.terminal);}\nvoid print(const Line& l) {cout<<\"line: \"; print(l.initial); cout<<\" - \";print(l.terminal);}\n////////////////////////////////////////////////////////////////////////////////\n// 多角形\n//   辺をメンバ変数にしない→メモリ節約・edge(void)がO(頂点数)。edge().begin()を使っている箇所は書き換える必要がある\n#include<vector>\n#include<algorithm>\n#include<numeric>\n#include<utility>\nclass Polygon {\npublic:\n  // 編集\n  void add(const Point& p) {\n    if(!vertex_.empty()) {\n      if(!edge_.empty()) edge_.pop_back();\n      edge_.push_back(Segment(vertex_.back(), p));\n      edge_.push_back(Segment(p, vertex_.front()));\n    }\n    vertex_.push_back(p);\n  }\n  void clear() {\n    vertex_.clear();\n    edge_.clear();\n  };\n  // 情報\n  int size() const {return vertex_.size();}\n  Point vertex(const int n) const {return vertex_.at(n);}\n  Segment edge(const int n) const {return edge_.at(n);}\n  const std::vector<Point>& vertex() const {return vertex_;}\n  const std::vector<Segment>& edge() const {return edge_;}\n  // 道具\n  bool touch(const Point& p) const {\n    return std::any_of(edge().begin(), edge().end(), [=](const Segment& s) {return ccw(s.initial, s.terminal, p) == ON_SEGMENT;});\n  }\n  bool intersect(const Point& p) const {\n    bool in = false;                    // p=(x,y)から(INF,y)への半直線と多角形とが交差する回数 mod 2\n    for(const auto& e: edge()) {\n      if(::intersect(p, e)) return true;\n      Point a = e.initial  - p;\n      Point b = e.terminal - p;\n      if(a.y > b.y) std::swap(a, b);\n      if(a.y <= EPS && -EPS < b.y && cross(a, b) < EPS) in = !in;\n    }\n    return in;\n  }\n  double area() const {\n    return std::abs(std::accumulate(edge().begin(), edge().end(), 0, [=](const int sum, const Segment& e){return sum + cross(e.initial, e.terminal);})) / 2.0;\n  }\n  bool convex() const {\n    bool positive = false;\n    bool negative = false;\n    for(int i = 0; i < size(); ++i) {\n      auto position = ccw(vertex(i), vertex((i + 1) % size()), vertex((i + 2) % size()));\n      positive |= position == CLOCKWISE;\n      negative |= position == COUNTER_CLOCKWISE;\n      if(negative && positive) return false;\n    }\n    return true;\n  }\nprivate:\n  std::vector<Point> vertex_;\n  std::vector<Segment> edge_;\n};\n////////////////////////////////////////////////////////////////////////////////\n#include<bits/stdc++.h>\nusing namespace std;\nint main() {\n  // Points/Vectors\n  // C\n  int a, b, c, d;\n  cin >> a >> b >> c >> d;\n  Segment s(Point(a, b), Point(c, d));\n  int q;\n  for(cin >> q; q > 0; --q) {\n    int x, y;\n    cin >> x >> y;\n    switch(ccw(s.initial, s.terminal, Point(x, y))) {\n    case COUNTER_CLOCKWISE:\n      cout << \"COUNTER_CLOCKWISE\" << endl;\n      break;\n    case CLOCKWISE:\n      cout << \"CLOCKWISE\" << endl;\n      break;\n    case ONLINE_BACK:\n      cout << \"ONLINE_BACK\" << endl;\n      break;\n    case ONLINE_FRONT:\n      cout << \"ONLINE_FRONT\" << endl;\n      break;\n    case ON_SEGMENT:\n      cout << \"ON_SEGMENT\" << endl;\n      break;\n    }\n  }\n\n  // Segments/Lines\n//   int n;\n//   for(cin >> n; n > 0; --n) {\n//     int a, b, c, d, e, f, g, h;\n//     cin >> a >> b >> c >> d >> e >> f >> g >> h;\n//     Segment s(Point(a, b), Point(c, d));\n//     Segment t(Point(e, f), Point(g, h));\n//     // A\n// //     cout << (parallel(s, t) ? 2 : (orthogonal(s, t) ? 1 : 0)) << endl;\n//     // B\n// //     cout << (intersect(s, t) ? 1 : 0) << endl;\n//     // C\n// //     auto cp = crosspoint(s, t);\n// //     cout << setprecision(10) << fixed << cp.x << \" \" << cp.y << endl;\n//     // D\n// //     cout << setprecision(10) << fixed << distance(s, t) << endl;\n//   }\n\n  // Polygon\n//   int n;\n//   Polygon polygon;\n//   for(cin >> n; n > 0; --n) {\n//     int x, y;\n//     cin >> x >> y;\n//     polygon.add(Point(x, y));\n//   }\n//   // A\n// //   cout << setprecision(1) << fixed  << polygon.area() << endl;\n//   // B\n// //   cout << (polygon.convex() ? 1 : 0) << endl;\n//   // C\n//   int q;\n//   for(cin >> q; q > 0; --q) {\n//     int x, y;\n//     cin >> x >> y;\n//     Point p(x, y);\n//     cout << (polygon.touch(p) ? 1 : (polygon.intersect(p) ? 2 : 0)) << endl;\n//   }\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nstruct point {\n    double x, y;\n    point (){}\n    point (double x, double y) : x(x), y(y) {}\n    point friend operator - (point l, point r) {\n        return point (l.x - r.x, l.y - r.y);\n    }\n    double friend operator * (point l, point r) {\n        return l.x * r.x + l.y * r.y;\n    }\n    double friend operator ^ (point l, point r) {\n        return l.x * r.y - l.y * r.x;\n    }\n    double len () {\n        return sqrt (x * x + y * y);\n    }\n} p0, p1, p2, P;\nint main () {\n    int Q;\n    cin >> p0.x >> p0.y >> p1.x >> p1.y;\n    cin >> Q;\n    P = p1 - p0;\n    while (Q --) {\n        cin >> p2.x >> p2.y;\n        p2 = p2 - p0;\n        double u = P ^ p2;\n        if (u > 0) cout << \"COUNTER_CLOCKWISE\" << endl;\n        else if (u < 0) cout << \"CLOCKWISE\" << endl;\n        else {\n            u = P * p2;\n            if (u < 0) cout << \"ONLINE_BACK\" << endl;\n            else {\n                if (P.len () >= p2.len ()) cout << \"ON_SEGMENT\" << endl;\n                else cout << \"ONLINE_FRONT\" << endl;\n            }\n        }\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "/**\n * @copyright (c) 2020 Daisuke Hashimoto\n */\n\n#include <cstdint>\n#include <iostream>\n#include <cmath>\n#include <iomanip>\n\nvoid CallCounterClockwise(std::istream &input_stream) noexcept;\n\nclass Point2D {\n public:\n  Point2D() noexcept;\n  Point2D(const double x, const double y) noexcept;\n  ~Point2D() noexcept;\n  Point2D(const Point2D &obj) noexcept;\n  Point2D &operator=(const Point2D &obj) noexcept;\n  Point2D(Point2D &&obj) noexcept;\n  Point2D &operator=(Point2D &&obj) noexcept;\n\n  Point2D operator+(const Point2D &rhs) const noexcept;\n  Point2D operator-(const Point2D &rhs) const noexcept;\n  Point2D operator*(const double rhs) const noexcept;\n  double InnerProduct(const Point2D &rhs) const noexcept;\n  double OuterProduct(const Point2D &rhs) const noexcept;\n  double SquareSum() const noexcept;\n  double Norm() const noexcept;\n\n  double X() const noexcept;\n  double Y() const noexcept;\n\n private:\n  double x_;\n  double y_;\n};\n\nclass Line {\n public:\n  Line(const Point2D &p1, const Point2D &p2) noexcept;\n  ~Line() noexcept;\n  bool IsParallel(const Line &rhs) const noexcept;\n  bool IsOrthogonal(const Line &rhs) const noexcept;\n  bool IsOnLine(const Point2D &point) const noexcept;\n  bool operator==(const Line &rhs) const noexcept;\n  bool operator!=(const Line &rhs) const noexcept;\n  Point2D ProjectPoint(const Point2D &point) const;\n  Point2D ReflectPoint(const Point2D &point) const;\n\n  bool SegmentsAreCrossing(const Line &line) const;\n  double GetLineSegmentDistanceFromPoint(const Point2D &point) const;\n  double GetLineSegmentDistance(const Line &line) const;\n\n private:\n  Line() = delete;\n  Line(const Line &obj) = delete;\n  Line &operator=(const Line &obj) = delete;\n  Line(Line &&obj) = delete;\n  Line &operator=(Line &&obj) = delete;\n\n private:\n  Point2D p1_;\n  Point2D p2_;\n};\n\nvoid CallCounterClockwise(std::istream &input_stream) noexcept {\n  input_stream.tie(0);\n  std::ios::sync_with_stdio(false);\n  double p0_x, p0_y, p1_x, p1_y;\n  input_stream >> p0_x >> p0_y >> p1_x >> p1_y;\n  const Point2D p0(p0_x, p0_y);\n  const Point2D p1(p1_x, p1_y);\n  const Point2D p1_from_p0 = p1 - p0;\n  constexpr double kEps = 0.00001;\n  int32_t number_of_queries;\n  input_stream >> number_of_queries;\n  for (int32_t i = 0; i < number_of_queries; ++i) {\n    double p2_x, p2_y;\n    input_stream >> p2_x >> p2_y;\n    const Point2D p2(p2_x, p2_y);\n    const Point2D p2_from_p0 = p2 - p0;\n    if (p1_from_p0.OuterProduct(p2_from_p0) > kEps) {\n      std::cout << \"COUNTER_CLOCKWISE\" << std::endl;\n    } else if (p1_from_p0.OuterProduct(p2_from_p0) < -kEps) {\n      std::cout << \"CLOCKWISE\" << std::endl;\n    } else {\n      const Line p0p1(p0, p1);\n      const Line p0p2(p0, p2);\n      const Point2D from_p0_to_p2;\n      if (p0p1.GetLineSegmentDistanceFromPoint(p2) < kEps) {\n        std::cout << \"ON_SEGMENT\" << std::endl;\n      } else if (p0p2.GetLineSegmentDistanceFromPoint(p1) < kEps) {\n        std::cout << \"ONLINE_FRONT\" << std::endl;\n      } else {\n        std::cout << \"ONLINE_BACK\" << std::endl;\n      }\n    }\n  }\n}\n\n// *************************************\nPoint2D::Point2D() noexcept : x_(0.0), y_(0.0) {}\n\nPoint2D::Point2D(const double x, const double y) noexcept : x_(x), y_(y) {}\n\nPoint2D::~Point2D() noexcept {}\n\nPoint2D::Point2D(const Point2D &obj) noexcept : x_(obj.x_), y_(obj.y_) {}\n\nPoint2D &Point2D::operator=(const Point2D &rhs) noexcept {\n  if (this != &rhs) {\n    this->x_ = rhs.x_;\n    this->y_ = rhs.y_;\n  }\n  return *this;\n}\n\nPoint2D::Point2D(Point2D &&obj) noexcept : x_(obj.x_), y_(obj.y_) {}\n\nPoint2D &Point2D::operator=(Point2D &&rhs) noexcept {\n  if (this != &rhs) {\n    this->x_ = rhs.x_;\n    this->y_ = rhs.y_;\n  }\n  return *this;\n}\n\nPoint2D Point2D::operator+(const Point2D &rhs) const noexcept {\n  Point2D point(this->x_ + rhs.x_, this->y_ + rhs.y_);\n  return point;\n}\n\nPoint2D Point2D::operator-(const Point2D &rhs) const noexcept {\n  Point2D point(this->x_ - rhs.x_, this->y_ - rhs.y_);\n  return point;\n}\n\nPoint2D Point2D::operator*(const double rhs) const noexcept {\n  Point2D point(this->x_ * rhs, this->y_ * rhs);\n  return point;\n}\n\ndouble Point2D::X() const noexcept {\n  return x_;\n}\n\ndouble Point2D::Y() const noexcept {\n  return y_;\n}\n\ndouble Point2D::InnerProduct(const Point2D &rhs) const noexcept {\n  return ((this->x_ * rhs.x_) + (this->y_ * rhs.y_));\n}\ndouble Point2D::OuterProduct(const Point2D &rhs) const noexcept {\n  return ((this->x_ * rhs.y_) - (this->y_ * rhs.x_));\n}\n\ndouble Point2D::SquareSum() const noexcept {\n  return (x_ * x_ + y_ * y_);\n}\n\ndouble Point2D::Norm() const noexcept {\n  return sqrt(SquareSum());\n}\n\n// ************************************************\n\nLine::Line(const Point2D &p1, const Point2D &p2) noexcept : p1_(p1), p2_(p2) {}\n\nLine::~Line() noexcept {}\n\nbool Line::IsParallel(const Line &rhs) const noexcept {\n  const Point2D this_direction = this->p2_ - this->p1_;\n  const Point2D rhs_direction = rhs.p2_ - rhs.p1_;\n  const double outer_product = this_direction.OuterProduct(rhs_direction);\n  constexpr double kEps = 0.0000001;\n  const bool is_parallel = (abs(outer_product) < kEps);\n  return is_parallel;\n}\n\nbool Line::IsOrthogonal(const Line &rhs) const noexcept {\n  const Point2D this_direction = this->p2_ - this->p1_;\n  const Point2D rhs_direction = rhs.p2_ - rhs.p1_;\n  constexpr double kEps = 0.0000001;\n  const double inner_product = this_direction.InnerProduct(rhs_direction);\n  const bool is_parallel = (abs(inner_product) < kEps);\n  return is_parallel;\n}\n\nbool Line::IsOnLine(const Point2D &point) const noexcept {\n  const Line line1(point, p1_);\n  const Line line2(point, p2_);\n  const bool is_on_line = line1.IsParallel(line2);\n  return is_on_line;\n}\n\nbool Line::operator==(const Line &rhs) const noexcept {\n  return (IsOnLine(rhs.p1_) && IsOnLine(rhs.p2_));\n}\n\nbool Line::operator!=(const Line &rhs) const noexcept {\n  return !(*this == rhs);\n}\n\nPoint2D Line::ProjectPoint(const Point2D &point) const {\n  const Point2D p2_from_p1 = p2_ - p1_;\n  const Point2D point_from_p1 = point - p1_;\n  const double square_sum = p2_from_p1.SquareSum();\n  constexpr double kEps = 0.0000001;\n  if (square_sum < kEps) {\n    std::cerr << \"ERROR: Line::ProjectPoint(): square_sum is too small. square_sum=\" << square_sum\n              << \" abs(square_sum)=\" << square_sum << \",  x=\" << p2_from_p1.X() << \", y=\" << p2_from_p1.Y()\n              << std::endl;\n    throw 1;\n  }\n  const double coefficient = p2_from_p1.InnerProduct(point_from_p1) / square_sum;\n  const Point2D projected_point = p1_ + (p2_from_p1 * coefficient);\n  return projected_point;\n}\n\nPoint2D Line::ReflectPoint(const Point2D &point) const {\n  Point2D reflected_point;\n  try {\n    const Point2D projected_point = ProjectPoint(point);\n    reflected_point = point + ((projected_point - point) * 2.0);\n  } catch (...) {\n    std::cerr << \"ERROR: ReflectPoint()\" << std::endl;\n  }\n  return reflected_point;\n}\n\ndouble Line::GetLineSegmentDistanceFromPoint(const Point2D &point) const {\n  double distance;\n  try {\n    const Point2D projected_point_from_point1 = ProjectPoint(point) - p1_;\n    const Point2D point2_from_point1 = p2_ - p1_;\n    bool projected_point_is_inside = ((projected_point_from_point1.SquareSum() <= point2_from_point1.SquareSum()) &&\n                                      (projected_point_from_point1.InnerProduct(point2_from_point1) >= 0.0));\n    if (projected_point_is_inside) {\n      const Point2D r = ProjectPoint(point) - point;\n      distance = r.Norm();\n    } else {\n      const Point2D diff1 = point - p1_;\n      const Point2D diff2 = point - p2_;\n      distance = fmin(diff1.Norm(), diff2.Norm());\n    }\n  } catch (...) {\n    std::cerr << \"ERROR: GetLineSegmentDistanceFromPoint()\" << std::endl;\n    throw 1;\n  }\n  return distance;\n}\n\ndouble Line::GetLineSegmentDistance(const Line &line) const {\n  double line_segment_distance;\n  try {\n    if (SegmentsAreCrossing(line)) {\n      line_segment_distance = 0.0;\n    } else {\n      line_segment_distance =\n          fmin(fmin(GetLineSegmentDistanceFromPoint(line.p1_), GetLineSegmentDistanceFromPoint(line.p2_)),\n               fmin(line.GetLineSegmentDistanceFromPoint(p1_), line.GetLineSegmentDistanceFromPoint(p2_)));\n    }\n  } catch (...) {\n    std::cerr << \"ERROR: GetLineSegmentDistance()\" << std::endl;\n  }\n  return line_segment_distance;\n}\n\nbool Line::SegmentsAreCrossing(const Line &line) const {\n  const Point2D r1 = p2_ - p1_;\n  const Point2D diff1_1 = line.p1_ - p1_;\n  const Point2D diff1_2 = line.p2_ - p1_;\n  const bool temp_1 = ((r1.OuterProduct(diff1_1) * r1.OuterProduct(diff1_2)) < 0.0);\n\n  const Point2D r2 = line.p2_ - line.p1_;\n  const Point2D diff2_1 = p1_ - line.p1_;\n  const Point2D diff2_2 = p2_ - line.p1_;\n  const bool temp_2 = ((r2.OuterProduct(diff2_1) * r2.OuterProduct(diff2_2)) < 0.0);\n  return (temp_1 && temp_2);\n}\n\nint main(int argc, char *argv[]) {\n  try {\n    CallCounterClockwise(std::cin);\n  } catch (...) {\n    std::cerr << \"ERROR: main()\" << std::endl;\n  }\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<string.h>\n#include<algorithm>\n#include<stdio.h>\n#include<complex>\nusing namespace std;\ntypedef complex<double> qua;\nvoid solve(qua a,qua b,qua c)\n{\n    b-=a,c-=a;\n    qua ans=c*conj(b);\n    if(ans.imag()>0) printf(\"COUNTER_CLOCKWISE\\n\");\n    else if(ans.imag()<0) printf(\"CLOCKWISE\\n\");\n    else if(ans.real()<0) printf(\"ONLINE_BACK\\n\");\n    else if(abs(c)>abs(b)) printf(\"ONLINE_FRONT\\n\");\n    else printf(\"ON_SEGMENT\\n\");\n}\nint main()\n{\n    double x1,y1,x2,y2,x3,y3;\n    int m;\n    scanf(\"%lf%lf%lf%lf%d\",&x1,&y1,&x2,&y2,&m);\n    while(m--)\n    {\n        scanf(\"%lf%lf\",&x3,&y3);\n        solve(qua(x1,y1),qua(x2,y2),qua(x3,y3));\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cmath>\nusing namespace std;\nconst double EPS = 1e-7;\nconst double INF = 1e12;\nstruct Vec {\n    double x,y;\n    Vec(){}\n    Vec(double x,double y){ this->x=x,this->y=y; }\n    void read(){ scanf(\"%lf%lf\",&x,&y); }\n    void prt() {printf(\"%.9f %.9f\\n\",x,y); }\n    double len(){ return sqrt(x*x+y*y); }\n    double len2(){ return x*x+y*y; }\n    \n    Vec operator+(const Vec&o)const{ return Vec(x+o.x,y+o.y); }\n    Vec operator-(const Vec&o)const{ return Vec(x-o.x,y-o.y); }\n    Vec operator*(const double&k)const{ return Vec(k*x,k*y); }\n    double operator*(const Vec&o)const {return x*o.x+y*o.y; }\n    double operator^(const Vec&o)const {return x*o.y-y*o.x; }\n    Vec rotate(double ang){ return Vec(x*cos(ang)-y*sin(ang), x*sin(ang)+y*cos(ang)); }\n    Vec change(double l){ if(len()<EPS) return *this; return (*this)*(l/len()); }\n    double disToLine(Vec A, Vec B) {\n        return abs((A-*this)^(B-*this))/(B-A).len();\n    }\n};\n\nVec Lineintersect(Vec A1,Vec A2,Vec B1,Vec B2) {\n    if (abs((A2-A1)^(B2-B1)) < EPS) return Vec(INF,INF);\n    return A1 + (A2 - A1) * ((abs((A2-A1)^(B2-B1)) - abs((A2-B1)^(B2-B1)) ) / abs((A2-A1)^(B2-B1)));\n}\n\nVec Segintersect(Vec A1,Vec A2,Vec B1,Vec B2) {\n    Vec P = Lineintersect(A1,A2,B1,B2);\n    if ((P-A1)*(P-A2)<=0 && (P-B1)*(P-B2)<=0) return P; \n    return Vec(INF,INF);\n}\n\nVec p1,p2;\nint main(){\n    p1.read(); p2.read();\n    int q; scanf(\"%d\",&q);\n    while(q--){\n        Vec p; p.read();\n        if(((p2-p1)^(p-p1))>0)\n            printf(\"COUNTER_CLOCKWISE\\n\");\n        else if(((p2-p1)^(p-p1))<0)\n            printf(\"CLOCKWISE\\n\");\n        else {\n            if((p-p1)*(p-p2)<=0)\n                printf(\"ON_SEGMENT\\n\");\n            else if((p-p1).len() < (p-p2).len())\n                printf(\"ONLINE_BACK\\n\");\n            else \n                printf(\"ONLINE_FRONT\\n\");\n        }\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<cstring>\n#include<vector>\n#include<set>\n#include<queue>\n#include<cstdlib>\n#include<algorithm>\n\nusing namespace std;\n#define pb push_back\n#define mp make_pair\n#define SZ(x) (int)(x).size()\n\ntypedef long long LL;\ntypedef pair<int, int> pii;\ntypedef pair<double, double> pdd;\ntypedef pair<LL, LL> pll;\n\nconst double eps = 1e-10;\nconst double PI = acos(-1.0);\n//const double PI = 3.14159265358979323846264338327950288419716939937510\nint dcmp(const double &x) { if (fabs(x) < eps) return 0; return x < 0 ? -1 : 1; }\nconst int MOD = 1e9 + 7;\nconst int INF = 2e9;\nconst double INF_d = 1e64;\n\ntemplate<class T> \nT qmod(T a, T b){ T ret = 1; while (b){ if (b & 1) ret *= a; b >>= 1; a *= a; } return ret; }\ntemplate<class T>\nT gcd(T a, T b){ return !b ? a : gcd(b, a % b); }\ntemplate<class T>\nT ex_gcd(T a, T b, T &x, T &y){\n    if (!b){ x = 1, y = 0; return a; }\n    T t, ret;\n    ret = ex_gcd(b, a % b, x, y);\n    t = x, x = y, y = t - a / b * y;\n    return ret;\n}\ntemplate<class T>\nT inv(T t, T p){ return t == 1 ? 1 : (p - p / t) * inv(p % t, p) % p; }\n// head\n\ntypedef double db;\n\nstruct point{\n    db x, y;\n    point(){}\n    point(db a, db b): x(a), y(b){}\n    point operator + (const point &p){ return point(x + p.x, y + p.y); }\n    point operator - (const point &p){ return point(x - p.x, y - p.y); }\n    point operator * (const db &k){ return point(x * k, y * k); }\n    point operator / (const db &k){ return point(x / k, y / k); }\n    db operator ^ (const point &p){ return x * p.y + y * p.x; }\n    db operator * (const point &p){ return x * p.x + y * p.y; }\n    bool operator == (const point &p){ return !dcmp(x - p.x) && !dcmp(y - p.y); }\n    bool operator != (const point &p){ return dcmp(x - p.x) || dcmp(y - p.y); }\n    bool operator < (const point &p){ return x == p.x ? y < p.y : x < p.x; }\n    void read(){\n        scanf(\"%lf%lf\", &x, &y);\n    }\n    void print(){\n        printf(\"%.10f %.10f\\n\", x, y);\n    }\n    point rotate(db &ang){ return point(x * cos(ang) - y * sin(ang), y * cos(ang) + x * sin(ang)); }\n    point norm() { return point(-y, x); }\n    db len() { return sqrt(x * x + y * y); }\n    db len2(){ return x * x + y * y; }\n};\n\npoint proj(point A, point B, point P){ // projection point of P in segment AB\n    point AB = B - A, AP = P - A;\n    return A + AB * (AP * AB / AB.len2());\n}\n\npoint refl(point A, point B, point P){ // reflection point of P int segment AB\n    return proj(A, B, P) * 2 - P;\n}\n\npoint a, b;\nint n;\n\nint main(){\n    a.read(), b.read();\n    scanf(\"%d\", &n);\n    for (int i = 0; i < n; i++){\n        point x; x.read();\n        int sgn = dcmp((b - a) ^ (x - a));\n        if (!sgn){\n            if (dcmp((b - a) * (x - a)) < 0){\n                puts(\"ONLINE_BACK\");\n            }\n            else{\n                if (dcmp((b - a).len() - (x - a).len()) < 0){\n                    puts(\"ONLINE_FRONT\");\n                }\n                else{\n                    puts(\"ON_SEGMENT\");\n                }\n            }\n        }\n        else{\n            if (sgn > 0){\n                puts(\"COUNTER_CLOCKWISE\");\n            }\n            else{\n                puts(\"CLOCKWISE\");\n            }\n        }\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> P;\n\ndouble eps = 1e-9;\n\nstring ccw(P a,P b,P c){\n  P ab=b-a;\n  P ac=c-a;\n  P k=ac*conj(ab);\n  if( k.imag() > eps ){\n    return \"COUNTER_CLOCKWISE\";\n  }\n  if( k.imag() < -eps ){\n    return \"CLOCKWISE\";\n  }\n  if( k.real() < -eps ){\n    return \"ONLINE_BACK\";\n  }  \n  if( abs(ab)+eps < abs(ac) ){\n    return \"ONLINE_FRONT\";\n  }\n  return \"ON_SEGMENT\";\n}\n\nint main(){\n  \n  double x0,y0,x1,y1,x2,y2;\n  cin>>x0>>y0>>x1>>y1;\n  P a(x0,y0);\n  P b(x1,y1);\n  int n;\n  cin>>n;\n  while(n--){\n    cin>>x2>>y2;\n    P c(x2,y2);\n    cout<< ccw(a,b,c) <<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "// Written By NewbieChd\n#include <iostream>\n#include <iomanip>\n#include <cmath>\n// #define double long double\nusing namespace std;\n\nconst int maxN = 100003;\nconst double eps = 1e-10;\ninline double absolute(double x) { return x >= 0 ? x : -x; }\ninline double square(double x) { return x * x; }\n\nstruct Vector {\n    double x, y;\n    Vector() {}\n    Vector(double x, double y) : x(x), y(y) {}\n    friend Vector operator+(const Vector& a, const Vector& b) { return Vector(a.x + b.x, a.y + b.y); }\n    friend Vector operator-(const Vector& a, const Vector& b) { return Vector(a.x - b.x, a.y - b.y); }\n    friend Vector operator*(const Vector& a, const double& b) { return Vector(a.x * b, a.y * b); }\n    friend Vector operator/(const Vector& a, const double& b) { return Vector(a.x / b, a.y / b); }\n    inline double length() { return sqrt(square(x) + square(y)); }\n    inline void read() { cin >> x >> y; }\n    inline void write() { cout << fixed << setprecision(10) << x << ' ' << y << '\\n'; }\n};\ninline double distance(Vector a, Vector b) { return sqrt(square(b.x - a.x) + square(b.y - a.y)); }\ninline double dot(Vector a, Vector b) { return a.x * b.x + a.y * b.y; }\ninline double cross(Vector a, Vector b) { return a.x * b.y - a.y * b.x; }\n\ninline Vector project(Vector a, Vector b, Vector c) {\n    b = a - b;\n    return b * (dot(b, c - a) / square(b.length())) + a;\n}\ninline Vector reflect(Vector a, Vector b, Vector c) {\n    a = project(a, b, c);\n    return a * 2 - c;\n}\n\nint main() {\n    ios::sync_with_stdio(false);\n    Vector a, b, c;\n    a.read(), b.read(), b = b - a;\n    int Q;\n    for (cin >> Q; Q; --Q) {\n        c.read(), c = c - a;\n        if (absolute(cross(b, c)) > eps) {\n            if (cross(b, c) > 0)\n                printf(\"COUNTER_CLOCKWISE\\n\");\n            else\n                printf(\"CLOCKWISE\\n\");\n        }\n        else {\n            if (dot(b, c) < 0)\n                printf(\"ONLINE_BACK\\n\");\n            else\n                printf(b.length() < c.length() ? \"ONLINE_FRONT\\n\" : \"ON_SEGMENT\\n\");\n        }\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<iomanip>\n#include<string>\n#include<algorithm>\n#include<cmath>\nusing namespace std;\n#define FOR(i,a,b) for(int i=(a);i<(b);i++)\n#define REP(i,n) for(int i=0;i<(n);i++)\n#define PII pair<int,int>\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n\nclass Point\n{\npublic:\n\tdouble x, y;\n\tPoint(double X = 0, double Y = 0)\n\t{\n\t\tx = X;\n\t\ty = Y;\n\t}\n\tPoint operator +(const Point &p)const { return Point(x + p.x, y + p.y); };\n\tPoint operator -(const Point &p)const { return Point(x - p.x, y - p.y); };\n\tPoint operator *(const double a)const { return Point(x*a, y*a); };\n\tPoint operator /(const double a)const { return Point(x / a, y / a); };\n\tdouble norm()const { return x*x + y*y; };\n\tdouble length()const { return sqrt(norm()); };\n\tdouble dot(const Point &p)const { return x*p.x + y*p.y; };\n\tdouble cross(const Point &p)const { return x*p.y - y*p.x; };\n\tbool operator ==(const Point &p)const\n\t{\n\t\treturn fabs(x - p.x)<EPS &&fabs(y - p.y)<EPS;\n\t}\n\tfriend ostream& operator <<(ostream& os, const Point &p);\n\tint CCW(Point p1, Point p2)\n\t{\n\t\tPoint p0(x, y);\n\t\tPoint V1 = p1 - p0;\n\t\tPoint V2 = p2 - p0;\n\t\tif (V1.cross(V2) > 0.0)return 0;\n\t\telse if (V1.cross(V2) < 0.0)return 1;\n\t\telse if (V1.dot(V2) < 0.0)return 2;\n\t\telse if (V1.norm() < V2.norm())return 3;\n\t\treturn 4;\n\t}\n};\ntypedef Point Vector;\n\nostream& operator <<(ostream& os, const Point &p)\n{\n\treturn os << \"(\" << p.x << \",\" << p.y << \")\";\n}\n\nclass Segment\n{\npublic:\n\tPoint p1, p2;\n\tSegment(double x1, double y1, double x2, double y2)\n\t{\n\t\tp1.x = x1;\n\t\tp1.y = y1;\n\t\tp2.x = x2;\n\t\tp2.y = y2;\n\t}\n\tdouble GetLength()\n\t{\n\t\tPoint temp = p2 - p1;\n\t\treturn temp.length();\n\t}\n\tdouble GetDistanceSeg(double X, double Y)\n\t{\n\t\tPoint p(X, Y);\n\t\tPoint a = p2 - p1;\n\t\tPoint b = p - p1;\n\t\tPoint c = p1 - p2;\n\t\tPoint d = p - p2;\n\t\tif (a.dot(b) < 0.0)return b.length();\n\t\tif (c.dot(d) < 0.0)return d.length();\n\t\treturn GetDistanceLine(X, Y);\n\t}\n\tdouble GetDistanceLine(double X, double Y)\n\t{\n\t\tPoint t(X, Y);\n\t\tPoint a = p2 - p1;\n\t\tPoint b = t - p1;\n\t\treturn abs(a.cross(b) / a.length());\n\t}\n\tbool IsIntersect(const Segment &s)\n\t{\n\n\t}\n\tbool IsOrthogonal(const Segment &s)\n\t{\n\t\tVector t1 = p2 - p1;\n\t\tVector t2 = s.p2 - s.p1;\n\t\treturn equals(0.0, t1.dot(t2));\n\t}\n\tbool IsParallel(const Segment &s)\n\t{\n\t\tVector t1 = p2 - p1;\n\t\tVector t2 = s.p2 - s.p1;\n\t\treturn equals(0.0, t1.cross(t2));\n\t}\n\tPoint GetProjection(double X, double Y)const\n\t{\n\t\tVector V = p2 - p1;\n\t\tPoint P(X, Y);\n\t\tPoint ret = V*(V.dot(P - p1) / V.norm());\n\t\treturn ret + p1;\n\t}\n\tPoint GetReflect(double X, double Y)\n\t{\n\t\tPoint t(X, Y);\n\t\tPoint Pro = GetProjection(X, Y);\n\t\tVector dV = Pro - t;\n\t\treturn t + dV*2.0;\n\t}\n\n\n};\ntypedef Segment Line;\n\nclass Circle\n{\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point C = Point(), double R = 0)\n\t{\n\t\tc = C;\n\t\tr = R;\n\t}\n};\n\nint main()\n{\n\tint x0, y0, x1, y1;\n\tcin >> x0 >> y0 >> x1 >> y1;\n\tPoint p0(x0, y0), p1(x1, y1);\n\tint q;\n\tcin >> q;\n\tREP(i, q)\n\t{\n\t\tstring str;\n\t\tint x2, y2;\n\t\tcin >> x2 >> y2;\n\t\tPoint p2(x2, y2);\n\t\tint res=p0.CCW(p1, p2);\n\t\tswitch (res)\n\t\t{\n\t\tcase 0:\n\t\t\tstr = \"COUNTER_CLOCKWISE\";\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\tstr = \"CLOCKWISE\";\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tstr = \"ONLINE_BACK\";\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tstr = \"ONLINE_FRONT\";\n\t\t\tbreak;\n\t\tcase 4:\n\t\t\tstr = \"ON_SEGMENT\";\n\t\t\tbreak;\n\t\t}\n\t\tcout << str << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <complex>\nusing namespace std;\n\ntypedef complex<int> point;\n\ndouble dot(point a,point b){\n\t// return (a*conj(b)).real();\n\treturn a.real()*b.real()+a.imag()*b.imag();\n}\n\ndouble cross(point a,point b){\n\t// return (a*conj(b)).imag();\n\treturn a.real()*b.imag()-a.imag()*b.real();\n}\n\nint main(void){\n\tdouble x,y;\n\tint q;\n\tcin>>x>>y;\n\tpoint p0(x,y);\n\tcin>>x>>y;\n\tpoint p1(x,y);\n\tpoint p0p1=p1-p0;\n\tcin>>q;\n\twhile(q--){\n\t\tcin>>x>>y;\n\t\tpoint p2(x,y);\n\t\tpoint p0p2=p2-p0;\n\t\tif(cross(p0p1,p0p2)>0)cout<<\"COUNTER_CLOCKWISE\"<<endl;\n\t\telse if(cross(p0p1,p0p2)<0)cout<<\"CLOCKWISE\"<<endl;\n\t\telse if(dot(p0p1,p0p2)<0)cout<<\"ONLINE_BACK\"<<endl;\n\t\telse if(norm(p0p1)<=norm(p0p2))cout<<\"ONLINE_FRONT\"<<endl;\n\t\telse cout<<\"ON_SEGMENT\"<<endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cassert>// c\n#include <iostream>// io\n#include <iomanip>\n#include <fstream>\n#include <sstream>\n#include <vector>// container\n#include <map>\n#include <set>\n#include <queue>\n#include <bitset>\n#include <stack>\n#include <algorithm>// other\n#include <complex>\n#include <numeric>\n#include <functional>\nusing namespace std;\n\ntypedef int32_t i32;typedef int64_t i64;typedef i64 ll;typedef uint32_t uint;typedef uint64_t ull;\n\n#define ALL(c) (begin(c)),(end(c))\n#define REP(i,n) FOR(i,0,n)\n#define REPr(i,n) FORr(i,0,n)\n#define FOR(i,l,r) for(int i=(int)(l);i<(int)(r);++i)\n#define FORr(i,l,r) for(int i=(int)(r)-1;i>=(int)(l);--i)\n#define EACH(it,o) for(__typeof((o).begin()) it = (o).begin(); it != (o).end(); ++it)\n#define IN(l,v,r) ((l)<=(v) && (v)<(r))\n\n//debug\n#define DUMP(x)  cerr << #x << \" = \" << (x)\n#define DUMPLN(x)  DUMP(x) <<endl\n#define DEBUG(x) DUMP(x) << LINE() << \" \" << __FILE__\n#define DEBUGLN(x) DEBUG(x)<<endl\n#define LINE()    cerr<< \" (L\" << __LINE__ << \")\"\n#define LINELN()    LINE()<<endl\n#define CHECK(exp,act)  if(exp!=act){DUMPLN(exp);DEBUGLN(act);}\n#define STOP(e)  CHECK(e,true);if(!(e)) exit(1);\n\nclass range {\nprivate:\n    struct Iter{\n        int v;\n        int operator*(){return v;}\n        bool operator!=(Iter& itr) {return v < itr.v;}\n        void operator++() {++v;}\n    };\n    Iter i, n;\npublic:\n    range(int n) : i({0}), n({n}) {}\n    range(int i, int n) : i({i}), n({n}) {}\n    Iter& begin() {return i;}\n    Iter& end() {return n;}\n};\n\n//output\ntemplate<typename T> ostream& operator << (ostream& os, const vector<T>& as){REP(i,as.size()){if(i!=0)os<<\" \"; os<<as[i];}return os;}\ntemplate<typename T> ostream& operator << (ostream& os, const vector<vector<T> >& as){REP(i,as.size()){if(i!=0)os<<endl; os<<as[i];}return os;}\ntemplate<typename T> ostream& operator << (ostream& os, const set<T>& ss){EACH(a,ss){if(a!=ss.begin())os<<\" \"; os<<a;}return os;}\ntemplate<typename T1,typename T2> ostream& operator << (ostream& os, const pair<T1,T2>& p){os<<p.first<<\" \"<<p.second;return os;}\ntemplate<typename K,typename V> ostream& operator << (ostream& os, const map<K,V>& m){bool isF=true;EACH(p,m){if(!isF)os<<endl;os<<p;isF=false;}return os;}\n\n//input\nchar tmp[1000];\n#define nextInt(n) scanf(\"%d\",&n)\n#define nextLong(n) scanf(\"%lld\",&n) //I64d\n#define nextDouble(n) scanf(\"%lf\",&n) \n#define nextChar(n) scanf(\"%c\",&n)\n#define nextString(n) scanf(\"%s\",tmp);n=tmp\n\n// values\ntemplate<class T> T INF(){assert(false);};\ntemplate<> int INF<int>(){return 1<<28;};\ntemplate<> ll INF<ll>(){return 1LL<<58;};\ntemplate<> double INF<double>(){return 1e16;};\n\nnamespace _double_tmpl{\n    typedef long double D;const D EPS = 1e-8;\n    \n    static constexpr D Ae=0;\n    D A(D a,D b){return a+b;}D Ainv(D a){return -a;}\n    D S(D a,D b){return A(a,Ainv(b));}\n    \n    static constexpr D Me=1;\n    D M(D a,D b){return a*b;}D Minv(D a){return 1.0/a;};\n\n    template<typename T> int sig(T a,T b=0){return a<b-EPS?-1:a>b+EPS?1:0;}\n    template<typename T> bool eq(T a,T b){ return sig(abs(a-b))==0;}\n    template<typename T> D norm(T a){ return a*a;}\n}\nusing namespace _double_tmpl;\n\nnamespace Ps{\n    using namespace _double_tmpl;\n    typedef complex<D> P;\n\n#define X real()\n#define Y imag()\n\n    istream& operator >> (istream& in,complex<D>& p){\n        D x,y;in >> x >> y;p=P(x,y);return in;\n    }\n\n    // a×b\n    D cross(const P& a,const P& b){return imag(conj(a)*b);}\n    // a・b\n    D dot(const P&a,const P& b) {return real(conj(a)*b);}\n\n    int ccw(const P& a,P b,P c){\n        b -= a; c -= a;\n        if (cross(b,c) > EPS)   return +1;       // counter clockwise\n        if (cross(b,c) < -EPS)   return -1;       // clockwise\n        if (dot(b,c) < 0)     return +2;       // c--a--b on line\n        if (norm(b) < norm(c)) return -2;       // a--b--c on line\n        return 0;\n    }  \n}\nusing namespace Ps;\n\nstringstream ss;\nclass Main{\n    public:\n    void run(){\n        P a,b;\n        cin >> a >> b;\n        int q;cin >> q;\n        REP(i,q){\n            P c;cin >> c;\n            int res=ccw(a,b,c);\n            if(res==+1){\n                cout <<\"COUNTER_CLOCKWISE\"<<endl;\n            }else if(res==-1){\n                cout <<\"CLOCKWISE\"<<endl;    \n            }else if(res==+2){\n                cout <<\"ONLINE_BACK\"<<endl;    \n            }else if(res==-2){\n                cout <<\"ONLINE_FRONT\"<<endl;    \n            }else{\n                cout << \"ON_SEGMENT\"<<endl;\n            }\n        }\n    }\n};\n\nint main(){\n cout <<fixed<<setprecision(20);\n cin.tie(0);\n ios::sync_with_stdio(false);\n Main().run();\n return 0;\n}"
  },
  {
    "language": "C++",
    "code": "// #include {{{\n#include <iostream>\n#include <cassert>\n#include <cstring>\n#include <cstdlib>\n#include <cstdio>\n#include <cctype>\n#include <cmath>\n#include <ctime>\n#include <queue>\n#include <set>\n#include <map>\n#include <stack>\n#include <string>\n#include <bitset>\n#include <vector>\n#include <complex>\n#include <algorithm>\nusing namespace std;\n// }}}\n// #define {{{\ntypedef long long ll;\ntypedef double db;\ntypedef pair<int,int> pii;\ntypedef vector<int> vi;\n#define de(x) cout << #x << \"=\" << x << endl\n#define rep(i,a,b) for(int i=a;i<(b);++i)\n#define per(i,a,b) for(int i=(b)-1;i>=(a);--i)\n#define all(x) (x).begin(),(x).end()\n#define sz(x) (int)(x).size()\n#define mp make_pair\n#define pb push_back\n#define fi first\n#define se second\n// }}}\n\ntypedef int T;\nstruct P{\n    T x,y;\n    P(){} P(T x,T y):x(x),y(y){}\n    P operator - (const P&b) const {return P(x-b.x,y-b.y);}\n    T operator ^ (const P&b) const {return x*b.y-y*b.x;}\n    T operator * (const P&b) const {return x*b.x+y*b.y;}\n    void read() {scanf(\"%d%d\",&x,&y);}\n}s,t,p;\nT norm(P a){return a.x*a.x+a.y*a.y;}\n\nint main(){\n    s.read();t.read();\n    int Q;scanf(\"%d\",&Q);\n    rep(i,0,Q){\n        p.read();\n        int cross=(t-s)^(p-s),dot=(t-s)*(p-s);\n        if(cross>0) puts(\"COUNTER_CLOCKWISE\");\n        else if(cross<0) puts(\"CLOCKWISE\");\n        else if(dot<0) puts(\"ONLINE_BACK\");\n        else if(norm(p-s)<=norm(t-s)) puts(\"ON_SEGMENT\");\n        else puts(\"ONLINE_FRONT\");\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define _CRT_SECURE_NO_WARNINGS\n#define _USE_MATH_DEFINES\n#include<bits/stdc++.h>\n#define INF         1e9\n#define EPS         1e-9\n#define REP(i,n)    for(lint i=0,i##_len=(n);i<i##_len;++i)\n#define REP1(i,n)   for(lint i=1,i##_len=(n);i<=i##_len;++i)\n#define REPR(i,n)   for(lint i=(n)-1;i>=0;--i)\n#define REPR1(i,n)  for(lint i=(n);i>0;--i)\n#define REPC(i,obj) for(auto i:obj)\n#define R_UP(a,b)   (((a)+(b)-1)/(b))\n#define ALL(obj)    (obj).begin(),(obj).end()\n#define SETP        cout << fixed << setprecision(10)\nusing namespace std;\nusing lint = long long;\ntemplate<typename T = lint>inline T in() { T x; cin >> x; return x; }\n\nclass vec2d {\npublic:\n\tdouble x, y;\n\tvec2d(double x, double y) :x(x), y(y) {}\n\tdouble norm() const {\n\t\treturn sqrt(x * x + y * y);\n\t}\n\tvec2d operator+(vec2d v) {\n\t\treturn vec2d(x + v.x, y + v.y);\n\t}\n\tvec2d operator-(vec2d v) {\n\t\treturn vec2d(x - v.x, y - v.y);\n\t}\n\tvec2d operator*(double k) const {\n\t\treturn vec2d(x * k, y * k);\n\t}\n\tvec2d operator/(double k)const {\n\t\treturn vec2d(x / k, y / k);\n\t}\n\tstatic double inner_product(const vec2d&a, const vec2d&b) {\n\t\treturn a.x * b.x + a.y * b.y;\n\t}\n\tstatic double cros_product(const vec2d&a, const vec2d&b) {\n\t\treturn a.x * b.y - a.y * b.x;\n\t}\n\tstatic double argument(const vec2d&a, const vec2d&b) {\n\t\treturn atan2(cros_product(a, b), inner_product(a, b));\n\t}\n\tstatic vec2d projection(const vec2d&a, const vec2d&b) {\n\t\tdouble n = a.norm();\n\t\treturn a * vec2d::inner_product(a, b) / n / n;\n\t}\n};\nsigned main() {\n\tSETP;\n\tint xp0 = in(), yp0 = in(), xp1 = in(), yp1 = in();\n\tvec2d a(xp1 - xp0, yp1 - yp0);\n\tint q = in();\n\tREP(i, q) {\n\t\tint xp2 = in(), yp2 = in();\n\t\tvec2d b(xp2 - xp0, yp2 - yp0);\n\t\tdouble arg = vec2d::argument(a, b);\n\t\tif (abs(arg) < EPS) {\n\t\t\tif (a.norm() < b.norm()) {\n\t\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t\t} else {\n\t\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t\t}\n\t\t} else if (abs(abs(arg) - M_PI) < EPS) {\n\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t} else if (arg > 0) {\n\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t} else if (arg < 0) {\n\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\t}\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define Fi first\n#define Se second\n#define pb push_back\n#define mp make_pair\n#define rep(x, a, b) for(int x = (a); x <= (b); ++ x)\n#define per(x, a, b) for(int x = (a); x >= (b); -- x)\n#define rop(x, a, b) for(int x = (a); x < (b); ++ x)\n#define por(x, a, b) for(int x = (a); x > (b); -- x) \n\ntypedef long long LL;\ntypedef unsigned long long ULL;\ntypedef unsigned int unt;\ntypedef double db;\ntypedef pair <int, int> pii;\ntypedef vector <int> vi;\n\nconst db eps  = 1e-8;\nconst db _PI  = 3.1415926535897932384;\nconst db _E   = 2.7182818284590452354;\nconst int inf = 0x3f3f3f3f;\nconst LL INF  = 0x3f3f3f3f3f3f3f3fll;\n\nint dcmp(db x) {\n\tif(x > eps) return 1;\n\tif(x < -eps) return -1;\n\treturn 0;\n}\n\nint dcmp(db x, db y) {\n\treturn dcmp(x - y);\n}\n\nstruct Point {\n\tdb x, y;\n\tPoint(db _x = 0, db _y = 0) : x(_x), y(_y) {}\n\tvoid print() { printf(\"%.10f %.10f\", x, y); }\n};\nstruct Line {\n\tPoint p1, p2;\n\tLine() {};\n\tLine(Point _p1, Point _p2) : p1(_p1), p2(_p2) {};\n};\n\ntypedef Point Vector;\ntypedef Line Segment;\n\nVector operator + (const Vector &a, const Vector &b) {\n\treturn Vector(a.x + b.x, a.y + b.y);\n}\nVector operator - (const Vector &a, const Vector &b) {\n\treturn Vector(a.x - b.x, a.y - b.y);\n}\nVector operator * (const Vector &a, const db &b) {\n\treturn Vector(a.x * b, a.y * b);\n}\nVector operator / (const Vector &a, const db &b) {\n\treturn Vector(a.x / b, a.y / b);\n}\ndb operator * (const Vector &a, const Vector &b) {\n\treturn a.x * b.x + a.y * b.y;\n}\ndb operator ^ (const Vector &a, const Vector &b) {\n\treturn a.x * b.y - a.y * b.x;\n}\ndb dis(const Point &a, const Point &b) {\n\treturn sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));\n}\ndb dis2(const Point &a, const Point &b) {\n\treturn (a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y);\n}\ndb dis(const Vector &a) {\n\treturn sqrt(a.x * a.x + a.y * a.y);\n}\ndb dis2(const Vector &a) {\n\treturn a.x * a.x + a.y * a.y;\n}\nPoint Projection(const Line &L, const Point &p) {\n\tVector Base = L.p2 - L.p1;\n\tdb len = Base * (p - L.p1);\n\treturn L.p1 + Base * (len / dis2(L.p1, L.p2));\n}\nPoint Reflection(const Line &L, const Point &p) {\n\treturn p + (Projection(L, p) - p) * 2.0;\n}\n\nint main() {\n\tPoint p0, p1, p2;\n\tscanf(\"%lf%lf%lf%lf\", &p0.x, &p0.y, &p1.x, &p1.y);\n\tint q; scanf(\"%d\", &q);\n\twhile(q --) {\n\t\tscanf(\"%lf%lf\", &p2.x, &p2.y);\n\t\tVector p01 = p1 - p0, p02 = p2 - p0;\n\t\tif(dcmp(p01 ^ p02) == 1) puts(\"COUNTER_CLOCKWISE\");\n\t\telse if(dcmp(p01 ^ p02) == -1) puts(\"CLOCKWISE\");\n\t\telse if(dcmp(p01 * p02) == -1) puts(\"ONLINE_BACK\");\n\t\telse if(dcmp(dis2(p01), dis2(p02)) == -1) puts(\"ONLINE_FRONT\");\n\t\telse puts(\"ON_SEGMENT\");\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#include<math.h>\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n\nclass Point{\npublic:\n  double x,y;\n  \n  Point(double x=0,double y=0): x(x),y(y) {}\n  \n  Point operator + (Point p) { return Point(x+p.x,y+p.y); }\n  Point operator - (Point p) { return Point(x-p.x,y-p.y); }\n  Point operator * (double a) { return Point(a*x,a*y); }\n  Point operator / (double a) { return Point(a/x,a/y); }\n  \n  double abs() { return sqrt(norm()); }\n  double norm() { return x*x+y*y; }\n  \n  bool operator < (const Point &p) const {\n    return x != p.x ? x < p.x : y < p.y;\n  }\n\n  bool operator == (const Point &p) const {\n    return fabs(x-p.x) < EPS && fabs(y-p.y) < EPS;\n  }\n\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a,Vector b){\n  return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a,Vector b){\n  return a.x * b.y - a.y * b.x;\n}\n\nint main(){\n  \n  double x0,y0,x1,y1,x,y,cr;\n  Point p0,p1,p2;\n  Vector a,b;\n  int q;\n  \n  scanf(\"%lf %lf %lf %lf\",&x0,&y0,&x1,&y1);\n  p0 = Point(x0,y0);\n  p1 = Point(x1,y1);\n\n  scanf(\"%d\",&q);\n  for(int i=0;i<q;i++){\n    \n    scanf(\"%lf %lf\",&x,&y);\n    p2 = Point(x,y);\n    \n    a = p1-p0;\n    b = p2-p0;\n    \n    cr = cross(a,b);\n    \n    if(cr > EPS) puts(\"COUNTER_CLOCKWISE\" );\n    else if(cr < -EPS) puts(\"CLOCKWISE\");\n    else if(dot(a,b) < -EPS) puts(\"ONLINE_BACK\");\n    else if(a.abs()<b.abs()) puts(\"ONLINE_FRONT\");\n    else puts(\"ON_SEGMENT\");\n    \n  }\n  \n  return(0);\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#include<iostream>\n#include<iomanip>\n#include<cmath>\n\nusing namespace std;\ntypedef long long ll;\n#define REP(i,n) for(int i=0;i<(int)(n);i++)\n\nclass point2d{\n    public:\n    double x,y;\n    constexpr static double EPS = 0.0000000001;\n\n    point2d() : x(0),y(0){}\n    point2d(double a, double b) :x(a), y(b){}\n\n    double add(double a, double b){\n        if(std::abs(a+b) < EPS * (std::abs(a)+std::abs(b))) return 0;\n        return a+b;\n    }\n    point2d operator+(point2d v){\n        point2d a(add(x, v.x), add(y, v.y)); return a;\n    }\n    point2d operator-(point2d v){\n        point2d a(add(x, -v.x), add(y, -v.y)); return a;\n    }\n    double operator*(point2d v){ //内積\n        return add(x*v.x, y*v.y);\n    }\n    point2d operator*(double v){\n        x *= v; y *= v; return (*this);\n    }\n    point2d operator/(double v){\n        if(v==0) cout << \"zero division!!!\" << endl;\n        x /= v; y /=v; return (*this);\n    }\n    void operator=(point2d v){\n        x = v.x; y = v.y;\n    }\n    bool operator==(point2d v){\n        return (x==v.x)&&(y==v.y);\n    }\n\n    double simeq(point2d v){\n        return ((x-v.x)<EPS && (v.x-x)<EPS && (y-v.y)<EPS && (v.y-y)<EPS);\n    }\n    double norm() { return add(x*x, y*y); }  //距離^2\n    double length() { return std::sqrt(add(x*x, y*y)); }  //距離\n    double isZero(){ point2d zero; return (*this).simeq(zero); }\n    double dot(point2d v){ return add(x*v.x, y*v.y); }   // 内積\n    double cross(point2d v){ return add(x*v.y, -y*v.x); } // 外積\n    double cosine(point2d v){\n        if((*this).isZero() || v.isZero()) cout << \"cannot calc cosine by zero!!!\" << endl;\n        double cos = (*this).dot(v) / (*this).length() / v.length();\n        return cos;\n    }\n    double sine(point2d v){\n        if((*this).isZero() || v.isZero()) cout << \"cannot calc sine by zero!!!\" << endl;\n        double sin = (*this).cross(v) / (*this).length() / v.length();\n        return sin;\n    }\n    bool parallel(point2d v, bool near=true){  // 平行\n        double cross = (*this).cross(v);\n        if(near)return cross<EPS && cross>-EPS;\n        else return cross==0.0;\n    }\n    bool orthogonal(point2d v, bool near=true){ // 直交\n        double dot = (*this).dot(v);\n        if(near)return dot<EPS && dot>-EPS;\n        else return dot==0.0;\n    }\n    int clockwise(point2d v){\n        double dot = (*this).dot(v);\n        double cross = (*this).cross(v);\n        if(cross>0.0) return -1; // 反時計回り\n        else if(cross<0.0) return 1; //時計回り\n        else if(dot>0.0 && (*this).norm() < v.norm()) return 2; // 直線上、向き同じ\n        else if(dot<0.0) return -2; // 直線上、逆向き\n        else return 0; // 線分上\n    }\n\n    friend std::ostream& operator<<(std::ostream &stream, const point2d v){\n        stream << std::fixed << std::setprecision(13) << std::showpoint << v.x << \" \" << v.y;\n        return stream;\n    }\n};\n\nint main(){\n    double x1, y1, x2, y2;\n    int q;\n    cin >> x1 >> y1 >> x2 >> y2 >> q;\n    point2d p0(x1,y1), p1(x2,y2);\n    double x,y;\n    REP(i,q){\n        cin >> x >> y;\n        point2d p2(x,y);\n        point2d v1=p1-p0;\n        point2d v2=p2-p0;\n        switch(v1.clockwise(v2)){\n            case 1:\n                cout << \"CLOCKWISE\" << endl; break;\n            case 2:\n                cout << \"ONLINE_FRONT\" << endl; break;\n            case 0:\n                cout << \"ON_SEGMENT\" << endl; break;\n            case -1:\n                cout << \"COUNTER_CLOCKWISE\" << endl; break;\n            case -2:\n                cout << \"ONLINE_BACK\" << endl; break;\n        }\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "//{{{\n#include <bits/stdc++.h>\nusing namespace std;\n//types\ntypedef long long ll;\ntypedef pair<int,int> pii;\n//input\nbool SR(int &_x){return scanf(\"%d\",&_x)==1;}bool SR(ll &_x){return scanf(\"%lld\",&_x)==1;}\nbool SR(double &_x){return scanf(\"%lf\",&_x)==1;}bool SR(char *_s){return scanf(\"%s\",_s)==1;}\nbool RI(){return true;}\ntemplate<typename I,typename... T>bool RI(I &_x,T&... _tail){return SR(_x) && RI(_tail...);}\n//output\nvoid SP(const int _x){printf(\"%d\",_x);}void SP(const ll _x){printf(\"%lld\",_x);}\nvoid SP(const double _x){printf(\"%.16lf\",_x);}void SP(const char *s){printf(\"%s\",s);}\nvoid PL(){puts(\"\");}\ntemplate<typename I,typename... T>void PL(const I _x,const T... _tail)\n{SP(_x);if(sizeof...(_tail)) putchar(' ');PL(_tail...);}\n//macro\n#define SZ(x) ((int)(x).size())\n#define ALL(x) (x).begin(),(x).end()\n#define REP(i,n) for(int i=0;i<int(n);i++)\n#define REP1(i,a,b) for(int i=(a);i<=int(b);i++)\n#define PER1(i,a,b) for(int i=(a);i>=int(b);i--)\n#define pb push_back\n#define mkp make_pair\n#define F first\n#define S second\n//debug\n#ifdef darry140\ntemplate<typename A,typename B>\nostream& operator <<(ostream&_s, const pair<A,B> &_p){return _s<<\"(\"<<_p.F<<\",\"<<_p.S<<\")\";}\ntemplate<typename It>\nostream& _OUTC(ostream &_s,It _b,It _e)//container\n{\n    _s<<\"{\";\n    for(auto _it=_b;_it!=_e;_it++) _s<<(_it==_b?\"\":\" \")<<*_it;\n    _s<<\"}\";\n    return _s;\n}\ntemplate<typename A,typename B>\nostream& operator <<(ostream&_s, const map<A,B> &_c){return _OUTC(_s,ALL(_c));}\ntemplate<typename T>\nostream& operator <<(ostream&_s, const set<T> &_c){return _OUTC(_s,ALL(_c));}\ntemplate<typename T>\nostream& operator <<(ostream&_s, const vector<T> &_c){return _OUTC(_s,ALL(_c));}\ntemplate<typename I>\nvoid _DOING(const char *_s,I&& _x){cerr<<_s<<\"=\"<<_x<<endl;}//without ','\ntemplate<typename I,typename... T>\nvoid _DOING(const char *_s,I&& _x,T&&... _tail)//with ','\n{\n    int _c=0;\n    static const char _bra[]=\"({[\";\n    static const char _ket[]=\")}]\";\n    while(*_s!=',' || _c!=0)//eg. mkp(a,b)\n    {\n        if(strchr(_bra,*_s)) _c++;\n        if(strchr(_ket,*_s)) _c--;\n        cerr<<*_s++;\n    }\n    cerr<<\"=\"<<_x<<\", \";\n    _DOING(_s+1,_tail...);\n}\n#define debug(...) do{\\\n    fprintf(stderr,\"%s:%d - \",__PRETTY_FUNCTION__,__LINE__);\\\n    _DOING(#__VA_ARGS__,__VA_ARGS__);\\\n}while(0)\n#else\n#define debug(...)\n#endif\n//}}}\nstruct Point\n{\n    ll x,y;\n    Point():x(0),y(0){}\n    Point(ll _x,ll _y):x(_x),y(_y){}\n    Point operator +(const Point &p) const\n    {return Point(x+p.x,y+p.y);}\n    Point operator -(const Point &p) const\n    {return Point(x-p.x,y-p.y);}\n    ll operator *(const Point &p) const\n    {return x*p.x+y*p.y;}\n    ll operator %(const Point &p) const\n    {return x*p.y-y*p.x;}   \n    bool operator <(const Point &p) const\n    {return tie(y,x) < tie(p.y,p.x);}\n    bool operator ==(const Point &p) const\n    {return tie(y,x) == tie(p.y,p.x);}\n    Point operator /(const ll &l) const\n    {return Point(x/l,y/l);}\n    Point operator *(const ll &l) const\n    {return Point(x*l,y*l);}\n    ll len2() const{return x*x+y*y;}\n    ll dis2(const Point &a)const{return (*this-a).len2();}\n    void read(){RI(x,y);}\n};\nint main()\n{\n    Point p0,p1;\n    p0.read();\n    p1.read();\n    int q;RI(q);\n    while(q--)\n    {\n        Point p2;p2.read();\n        Point a=p1-p0,b=p2-p0;\n        if(a%b==0)\n        {\n            if(a*b<0) PL(\"ONLINE_BACK\");\n            else if(a.len2()<b.len2()) PL(\"ONLINE_FRONT\");\n            else PL(\"ON_SEGMENT\");\n        }\n        else if(a%b>0) PL(\"COUNTER_CLOCKWISE\");\n        else PL(\"CLOCKWISE\");\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\n\n//constant----------------------------------------\nconst double EPS=1e-12;\nconst double INF=1e9;\nconst int COUNTER_CLOCKWISE=2;\nconst int CLOCKWISE=-2;\nconst int ONLINE_FRONT=1;\nconst int ONLINE_BACK=-1;\nconst int ON_SEGMENT=0;\n\n\ntypedef complex<double>Point;\ntypedef vector<Point>Polygon;\nstruct Line{\n    Point p1,p2;\n    Line(const Point &p1,const Point &p2):p1(p1),p2(p2){}\n};\nstruct Segment{\n    Point p1,p2;\n    Segment(const Point &p1,const Point &p2):p1(p1),p2(p2){}\n};\nstruct Circle{\n    Point p;\n    int r;\n    Circle(Point &p,int r):p(p),r(r){}\n};\n\ndouble dot(Point &p1,Point &p2){\n    return real(p1)*real(p2)+imag(p1)+imag(p2);\n}\n\ndouble cross(Point &p1,Point &p2){\n    return real(p1)*imag(p2)-real(p2)*imag(p1);\n}\n\nint CCW(Point &p1,Point &p2,Point &p3){\n    Point a=p2-p1,b=p3-p1;\n    if(cross(a,b)>EPS)return COUNTER_CLOCKWISE;\n    if(cross(a,b)<-EPS)return CLOCKWISE;\n    if(dot(a,b)<-EPS)return ONLINE_BACK;\n    if(abs(b)>abs(a)+EPS)return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\nsigned main(){\n    double x,y;\n    scanf(\"%lf%lf\",&x,&y);\n    Point p1(x,y);\n    scanf(\"%lf%lf\",&x,&y);\n    Point p2(x,y);\n\n    int q;scanf(\"%d\",&q);\n    while(q--){\n        scanf(\"%lf%lf\",&x,&y);\n        Point p3(x,y);\n        if(CCW(p1,p2,p3)==COUNTER_CLOCKWISE)puts(\"COUNTER_CLOCKWISE\");\n        if(CCW(p1,p2,p3)==CLOCKWISE)puts(\"CLOCKWISE\");\n        if(CCW(p1,p2,p3)==ONLINE_BACK)puts(\"ONLINE_BACK\");\n        if(CCW(p1,p2,p3)==ONLINE_FRONT)puts(\"ONLINE_FRONT\");\n        if(CCW(p1,p2,p3)==ON_SEGMENT)puts(\"ON_SEGMENT\");\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\n#define reint register int\n#define coint const int\n\nusing namespace std;\n\nconst double EPS = 1e-8;\n\nstruct Vector {\n    double x, y;\n\n    inline Vector operator+(const Vector &v) const {\n        return (Vector){ x + v.x, y + v.y };\n    }\n\n    inline double dot(const Vector &v) const { return x * v.x + y * v.y; }\n    inline double cross(const Vector &v) const { return x * v.y - y * v.x; }\n    inline double length(void) const { return sqrt(x * x + y * y); }\n    inline double square(void) const { return x * x + y * y; }\n\n    inline Vector operator*(const double a) const {\n        return (Vector){ x * a, y * a };\n    }\n};\n\nstruct Point {\n    double x, y;\n\n    inline Vector operator-(const Point &p) const {\n        return (Vector){ x - p.x, y - p.y };\n    }\n\n    inline Point operator+(const Vector &v) const {\n        return (Point){ x + v.x, y + v.y };\n    }\n};\n\ninline int isEq(const double a, const double b) {\n    return abs(a - b) < EPS;\n}\n\nint main(void) {\n    Point p0, p1;\n    scanf(\"%lf%lf%lf%lf\", &p0.x, &p0.y, &p1.x, &p1.y);\n    const Vector vec01 = p1 - p0;\n    int q;\n    scanf(\"%d\", &q);\n    for (reint i = 1; i <= q; ++i) {\n        Point p2;\n        scanf(\"%lf%lf\", &p2.x, &p2.y);\n        const Vector vec02 = p2 - p0;\n        const double cross = vec01.cross(vec02);\n        if (isEq(cross, 0)) {\n            if (vec01.dot(vec02) + EPS < 0)\n                puts(\"ONLINE_BACK\");\n            else if (vec01.square() + EPS < vec02.square())\n                puts(\"ONLINE_FRONT\");\n            else puts(\"ON_SEGMENT\");\n        } else if (cross < 0)\n            puts(\"CLOCKWISE\");\n        else puts(\"COUNTER_CLOCKWISE\");\n    }\n\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n\nusing namespace std;\n#define eps = (1e-10);\n//点\nstruct Point{\n    double x,y;\n    Point(double _x=0,double _y=0):x(_x),y(_y){}\n    Point operator + (Point p){return Point(x+p.x,y+p.y);}\n    Point operator - (Point p){return Point(x-p.x,y-p.y);}\n    Point operator * (double a){return Point(a*x,a*y);}\n    Point operator / (double a){return Point(x/a,y/a);}\n    double norm(){return x*x+y*y;}//模的平方\n    double ABS() {return sqrt(norm());}//模\n};\n//线段\nstruct Segment{\n    Point p1,p2;\n};\n//点积\ndouble dot(Point a,Point b){\n    return a.x*b.x+a.y*b.y;\n}\n//叉积\ndouble cross(Point a,Point b){\n    return a.x*b.y-a.y*b.x;\n}\nint main(){\n    double x1,y1,x2,y2;\n    scanf(\"%lf %lf %lf %lf\",&x1,&y1,&x2,&y2);\n    Point p0={x1,y1};Point p1={x2,y2};\n    int T;scanf(\"%d\",&T);\n    double x,y;\n    while(T--){\n        scanf(\"%lf %lf\",&x,&y);\n        Point p2={x,y};\n        Point a=p2-p0;\n        Point b=p1-p0;\n        double jud=cross(a,b);\n        if(jud<0){\n            puts(\"COUNTER_CLOCKWISE\");\n        }\n        if(jud>0){\n            puts(\"CLOCKWISE\");\n        }\n        if(jud==0){\n            double op=dot(a,b);\n            if(op<0){\n                puts(\"ONLINE_BACK\");\n            }else{\n                if(a.norm()>b.norm()){\n                    puts(\"ONLINE_FRONT\");\n                }else{\n                    puts(\"ON_SEGMENT\");\n                }\n            }\n        }\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include <cstdlib>\n#include <stack>\n#include <queue>\n#include <list>\n#include <vector>\n#include <sstream>\n\nusing namespace std;\n\nclass c_main\n{\nprivate:\n    \npublic:\n    c_main();\n    void f_input();\n};\n\nc_main::c_main()\n{\n\n}\n\nvoid c_main::f_input()\n{\n    double xp1,yp1,xp2,yp2;\n    int q;\n    int i;\n    long x[1000];\n    long y[1000];\n    long a;\n    long b;\n    long x_a;\n    long y_a;\n    double a_a;\n    double b_a;\n    int pt1;\n\n    cin >> xp1 >> yp1 >> xp2 >> yp2;\n    \n    if (xp1 == xp2){\n        x_a = xp1;\n        y_a = 0;\n        pt1 = 0;\n    }else if (yp1 == yp2){\n        x_a = 0;\n        y_a = yp1; \n        pt1 = 1;\n    }else{\n        \n        a_a = (yp2-yp1)/(xp2-xp1);\n      \n        a = -1 * (1/a_a);\n       \n        b_a = -1 * a_a * xp1+ yp1;\n        pt1 = 2;\n    }\n    \n    cin >> q;\n    \n    for ( i = 0; i < q; ++i){\n        cin >> x[i] >> y[i];\n        if (pt1 == 0){\n            if(yp1 >= yp2){\n                if(x[i] == x_a){\n                    if(y[i] > yp1){\n                        cout << \"ONLINE_BACK\" << endl;\n                    }else if(y[i] < yp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(yp2 <= y[i] && y[i] <= yp1){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(x[i] < x_a){\n                    cout << \"CLOCKWISE\" << endl;\n                    \n                }else if(x[i] > x_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n     \n                }\n            }else{\n                if(x[i] == x_a){\n                    if(y[i] < yp1){\n                        cout << \"ONLINE_BACK\" << endl;\n                    }else if(y[i] > yp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(yp1 <= y[i] && y[i] <= yp2){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(x[i] < x_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n                    \n                    \n                    \n                }else if(x[i] > x_a){\n                    cout << \"CLOCKWISE\" << endl;\n                }\n            }\n            //printf(\"%10.10f %10.10f\\n\", x_a,y[i]);\n            \n        }else if(pt1 == 1){\n            if(xp1 >= xp2){\n                if(y[i] == y_a){\n                    if(x[i] > xp1){\n                        cout << \"ONLINE_BACK\" << endl;\n                    }else if(x[i] < xp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(xp2 <= x[i] && x[i] <= xp1){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(y[i] < y_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n                }else if(y[i] > y_a){\n                    cout << \"CLOCKWISE\" << endl;\n                }\n            }else{\n                if(y[i] == y_a){\n                    if(x[i] < xp1){\n                        cout << \"ONLINE_BACK\" << endl;\n                    }else if(x[i] > xp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(xp1 <= x[i] && x[i] <= xp2){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(y[i] < y_a){\n                    cout << \"CLOCKWISE\" << endl;\n                }else if(y[i] > y_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n                }\n            }\n            //printf(\"%10.10f %10.10f\\n\", x[i],y_a);\n        }else if(pt1 == 2){\n            b = -1 * a * x[i] + y[i];\n            x_a = (b - b_a)/(a_a - a);\n            y_a = a_a * x_a + b_a;\n            if(xp1 >= xp2){\n                if(y[i] == y_a){\n                    if(x[i] > xp1){\n                        cout << \"ONLINE_BACK\" << endl;\n                    }else if(x[i] < xp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(xp2 <= x[i] && x[i] <= xp1){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(y[i] < y_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n                }else if(y[i] > y_a){\n                    \n                    cout << \"CLOCKWISE\" << endl;\n                }\n            }else{\n                if(y[i] == y_a){\n                    if(x[i] < xp1){\n                        cout << \"ONLINE_BACK\" << endl;\n                    }else if(x[i] > xp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(xp1 <= x[i] && x[i] <= xp2){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(y[i] < y_a){\n                    cout << \"CLOCKWISE\" << endl;\n                }else if(y[i] > y_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n                }\n            }\n            //printf(\"%10.10f %10.10f\\n\", x_a,y_a);\n        }\n    }\n}\n\nint main(){\n    c_main main01;\n    main01.f_input();\n    \n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nconst int dx[]={0,1,0,-1,1,-1,-1,1};\nconst int dy[]={-1,0,1,0,1,1,-1,-1};\nconst int INF = 1<<30;\nconst double EPS = 1e-15;\n#define PB push_back\n#define mk make_pair\n#define fi first\n#define se second\n#define ll long long\n#define reps(i,j,k) for(int i = (j); i < (k); i++)\n#define rep(i,j) reps(i,0,j)\n#define MOD 1000000007\ntypedef pair<int,int> Pii;\ntypedef pair<int,Pii> P;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\nstruct Point{\n\tdouble x,y;\n\tPoint(){}\n\tPoint(double _x,double _y){\n\t\tx = _x;\n\t\ty = _y;\n\t}\n\tPoint operator + (Point p){\n\t\treturn Point(x+p.x,y+p.y);\n\t}\n\n\tPoint operator - (Point p){\n\t\treturn Point(x-p.x,y-p.y);\n\t}\n\n\tPoint operator * (double k){\n\t\treturn Point(k*x,k*y);\n\t}\n\n\n\tbool operator<(const Point &p)const{\n\t\treturn x!=p.x?x<p.x:y<p.y;\n\t}\t\n};\ndouble dot(Point p, Point q){\n\treturn p.x*q.x+p.y*q.y;\n}\n\ndouble cross(Point p,Point q){\n\treturn p.x*q.y-q.x*p.y;\n}\n\ndouble norm(Point p){\n\treturn p.x*p.x+p.y*p.y;\n}\n\ndouble pabs(Point p){\n\treturn sqrt(norm(p));\n}\ntypedef vector<Point> Polygon;\nstruct Line : Polygon{\n\tLine(){}\n\tLine(Point p,Point q){\n\t\tPB(p);\n\t\tPB(q);\t\n\t}\n};\nstruct Circle{\n\tPoint p;\n\tdouble r;\n\tCircle(){}\n\tCircle(Point _p,double _r){\n\t\tp = _p;\n\t\tr = _r;\n\t}\n};\nint ccw(Point a,Point b,Point c){\n\tb = b-a;\n\tc = c-a;\n\tif(cross(b,c) > 0)return +1; //ccw\n\tif(cross(b,c) < 0)return -1; //cw\n\tif(pabs(b)<pabs(c))return +2; //a--b--c\n\tif(dot(b,c) < 0)return -2; // c--a--b;\n\treturn 0;\n}\n\nstring ccw_s(Point a,Point b,Point c){\n\tb = b-a;\n\tc = c-a;\n\tif(cross(b,c) > 0)return \"COUNTER_CLOCKWISE\"; //ccw\n\tif(cross(b,c) < 0)return \"CLOCKWISE\"; //cw\n\tif(pabs(b)<pabs(c))return \"ONLINE_FRONT\"; //a--b--c\n\tif(dot(b,c) < 0)return \"ONLINE_BACK\"; // c--a--b;\n\treturn \"ON_SEGMENT\";\n}\n\nint main(){\n\tdouble xp0,yp0,xp1,yp1;\n\tcin >> xp0 >> yp0 >> xp1 >> yp1;\n\tPoint p1 = Point(xp0,yp0);\n\tPoint p2 = Point(xp1,yp1);\n\tint Q;\n\tcin >> Q;\n\twhile(Q--){\n\t\tdouble x,y;\n\t\tcin >> x >> y;\n\t\tPoint p3 = Point(x,y);\n\t\tcout << ccw_s(p1,p2,p3) << \"\\n\";\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int, int> pairInt;\n#define FOR(i, n) for (int i = 0; i < int(n); i++)\n#define FOR1(i, m, n) for (int i = int(m); i < int(n); i++)\n#define MAX(a, b) ((a) >= (b) ? (a) : (b))\n#define MIN(a, b) ((a) <= (b) ? (a) : (b))\n\nint main(int argc, char *argv[]) {\n  array<int, 2> p0, p1, v1;\n  int q;\n\n  scanf(\"%d%d%d%d%d\", &p0[0], &p0[1], &p1[0], &p1[1], &q);\n  v1[0] = p1[0] - p0[0];\n  v1[1] = p1[1] - p0[1];\n\n  FOR(i, q) {\n    array<int, 2> p2, v2;\n    scanf(\"%d%d\", &p2[0], &p2[1]);\n    v2[0] = p2[0] - p0[0];\n    v2[1] = p2[1] - p0[1];\n\n    int op = v1[0] * v2[1] - v1[1] * v2[0];\n    int ip = v1[0] * v2[0] + v1[1] * v2[1];\n\n#ifdef DEBUG\n    printf(\"v1=(%d,%d),v2=(%d,%d),op=%d,ip=%d\\n\", v1[0], v1[1], v2[0], v2[1],\n           op, ip);\n#endif\n\n    if (op > 0)\n      printf(\"COUNTER_CLOCKWISE\\n\");\n    else if (op < 0)\n      printf(\"CLOCKWISE\\n\");\n    else if (ip < 0)\n      printf(\"ONLINE_BACK\\n\");\n    else if (abs(v2[0]) > abs(v1[0]) || abs(v2[1]) > abs(v1[1]))\n      printf(\"ONLINE_FRONT\\n\");\n    else\n      printf(\"ON_SEGMENT\\n\");\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <algorithm>\n#include <cstdio>\n#include <vector>\n#include <queue>\n#include <set>\n#include <map>\n#include <numeric>\n#include <cmath>\n \nusing namespace std;\n \ntypedef long long int ll;\ntypedef pair<int,int> Pint;\ntypedef pair<double,double> Pdouble;\n \n#define all(x) x.begin(),x.end()\n \nconst ll mod = 1e9+7;\nconst ll INF = 1e9;\nconst ll MAXN = 1e9;\nconst double EPS = 1e-12;\n \ndouble dot(Pint p1,Pint p2){\n    return p1.first*p2.first + p1.second*p2.second;\n}\n\ndouble closs(Pint p1,Pint p2){\n    return p1.first*p2.second - p1.second*p2.first;\n}\ndouble vector_length(Pint p){\n    return pow(p.first*p.first+p.second*p.second,0.5);\n}\n \ndouble cos_(Pint p1,Pint p2){\n    return dot(p1,p2)/(vector_length(p1)*vector_length(p2));\n}\n\ndouble sin_(Pint p1,Pint p2){\n    return closs(p1,p2)/(vector_length(p1)*vector_length(p2));\n}\n \nPdouble proj(Pint p1,Pint p2,Pint a,Pint b){\n    Pint pp = Pint(p2.first-p1.first,p2.second-p1.second);\n    double ans_x = (double)p1.first + vector_length(a)*cos_(a,b)*pp.first/vector_length(pp);\n    double ans_y = (double)p1.second + vector_length(a)*cos_(a,b)*pp.second/vector_length(pp);\n\n    return Pdouble(ans_x,ans_y);\n}\n \nbool vector_equal(Pint p,Pint q){\n    return (p.first == q.first) && (p.second == q.second);\n}\n\nvoid clock_wise(Pint q0,Pint q1,Pint q2){\n    Pint q0q1 = Pint(q1.first-q0.first,q1.second-q0.second);\n    Pint q0q2 = Pint(q2.first-q0.first,q2.second-q0.second);\n\n    //printf(\"%.12f\\n\", cos_(q0q1,q0q2));\n\n    if(abs(cos_(q0q1,q0q2)+1)<EPS){\n        cout << \"ONLINE_BACK\" << endl;\n    }else if(abs(cos_(q0q1,q0q2)-1)<EPS){\n        //cout << \"alkhfl\" << endl;\n        if(vector_length(q0q1)<vector_length(q0q2)) cout << \"ONLINE_FRONT\" << endl;\n        else cout << \"ON_SEGMENT\" << endl;\n    }else{\n        if(sin_(q0q1,q0q2)>0) cout << \"COUNTER_CLOCKWISE\" << endl;\n        else if(sin_(q0q1,q0q2)<0) cout << \"CLOCKWISE\" << endl;\n        else{\n            if(cos_(q0q1,q0q2)<0) cout << \"ONLINE_BACK\" << endl;\n            else if(vector_length(q0q1)<vector_length(q0q2)) cout << \"ONLINE_FRONT\" << endl;\n            else cout << \"ON_SEGMENT\" << endl;\n        }\n    }\n}\n \nint main()\n{\n    Pint p0,p1;\n    cin >> p0.first >> p0.second >> p1.first >> p1.second;\n    int q;\n    cin >> q;\n    for(int i = 0; i < q; i++){\n        Pint p2;\n        cin >> p2.first >> p2.second;\n \n        if(vector_equal(p2,p1)||vector_equal(p2,p0)){\n            cout << \"ON_SEGMENT\" << endl;\n            continue;\n        }\n \n        clock_wise(p0,p1,p2);\n    }\n \n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#include <algorithm>\n#include <array>\n#include <climits>\n#include <cmath>\n#include <cstdint>\n#include <cstdio>\n#include <cstdlib>\n#include <ctime>\n#include <functional>\n#include <iostream>\n#include <map>\n#include <queue>\n#include <set>\n#include <stack>\n#include <string>\n#include <type_traits>\n#include <utility>\n#include <vector>\n\nusing int32 = std::int_fast32_t;\nusing int64 = std::int_fast64_t;\nusing uint32 = std::uint_fast32_t;\nusing uint64 = std::uint_fast64_t;\nusing intl32 = std::int_least32_t;\nusing intl64 = std::int_least64_t;\nusing uintl32 = std::uint_least32_t;\nusing uintl64 = std::uint_least64_t;\n\n\n//有バグ\nstatic constexpr double PI = 3.1415926535897932;\nstruct angle {\n\tdouble r;\n\tangle() :r(0) {}\n\tangle(double r_) :r(arr(std::fmod(r_, 2.0 * PI) + 2.0 * PI)) {}\n\tstatic double arr(const double &o) { return o < 2.0 * PI - eps ? o : o - 2.0 * PI; }\n\tstatic angle make(const double &o) { angle ret;ret.r = o;return ret; }\n\tconst angle operator+(const angle &o)const { return make(arr(r + o.r)); }\n\tconst angle operator-(const angle &o)const { return make(arr(r - o.r + 2.0 * PI)); }\n\tconst angle operator*(const double &o)const { return angle(r * o); }\n\tconst angle operator/(const double &o)const { return angle(r / o); }\n\tangle &operator+=(const angle &o) { return *this = *this + o; }\n\tangle &operator-=(const angle &o) { return *this = *this - o; }\n\tangle &operator*=(const double &o) { return *this = *this * o; }\n\tangle &operator/=(const double &o) { return *this = *this / o; }\n\tconst angle operator~()const { return make(arr(3.0 * PI - r)); }\n\tconst angle operator-()const { return make(arr(2.0 * PI - r)); }\n\tconst bool operator==(const angle &o)const { return std::abs(r - o.r) <= eps; }\n\tconst bool operator!=(const angle &o)const { return std::abs(r - o.r) > eps; }\n\tconst bool operator< (const angle &o)const { return r <  o.r; }\n\tconst bool operator<=(const angle &o)const { return r <= o.r; }\n\tconst bool operator> (const angle &o)const { return r >  o.r; }\n\tconst bool operator>=(const angle &o)const { return r >= o.r; }\n\texplicit operator bool()const { return r > eps; }\n\texplicit operator double()const { return r; }\n\tconst double sin()const { return std::sin(r); }\n\tconst double cos()const { return std::cos(r); }\n\n\tconst double degree()const { return r*(180.0 / PI); }\n\tconst double ratio()const { return r / (2.0 * PI); }\nprivate:\n\tstatic constexpr double eps = 0.000001;\n};\nangle operator\"\" _deg(long double x) { return angle(x*(PI / 180.0)); }\nangle operator\"\" _rat(long double x) { return angle(x * 2.0 * PI); }\nangle operator\"\" _rad(long double x) { return angle(x); }\nstruct pvec {\n\tstatic constexpr double eps = 0.0000000000001;\n\tdouble x, y;\n\tpvec() :x(0), y(0) {}\n\tpvec(double x_, double y_) :x(x_), y(y_) {}\n\tpvec(double abs_, angle r) :x(abs_*r.cos()), y(abs_*r.sin()) {}\n\tconst pvec operator+(const pvec &o)const { return pvec(x + o.x, y + o.y); }\n\tconst pvec operator-(const pvec &o)const { return pvec(x - o.x, y - o.y); }\n\tconst pvec operator*(const pvec &o)const { return pvec(x*o.x - y*o.y, x*o.y + y*o.x); }\n\tconst pvec operator/(const pvec &o)const { return pvec(x*o.x + y*o.y, y*o.x - x*o.y) / o.abs2(); }\n\tconst pvec operator*(const double &o)const { return pvec(x * o, y * o); }\n\tconst pvec operator/(const double &o)const { return pvec(x / o, y / o); }\n\tpvec &operator+=(const pvec &o) { return *this = *this + o; }\n\tpvec &operator-=(const pvec &o) { return *this = *this - o; }\n\tpvec &operator*=(const pvec &o) { return *this = *this * o; }\n\tpvec &operator/=(const pvec &o) { return *this = *this / o; }\n\tpvec &operator*=(const double &o) { return *this = *this * o; }\n\tpvec &operator/=(const double &o) { return *this = *this / o; }\n\n\tconst pvec operator+()const { return *this; }\n\tconst pvec operator-()const { return pvec(-x, -y); }\n\tconst pvec operator~()const { return pvec(x, -y); }\n\n\texplicit operator bool()const { return std::abs(x) > eps || std::abs(y) > eps; }\n\tconst bool operator==(const pvec &o)const { return std::abs(x - o.x) <= eps&&std::abs(y - o.y) <= eps; }\n\tconst bool operator!=(const pvec &o)const { return std::abs(x - o.x) > eps || std::abs(y - o.y) > eps; }\n\n\tconst double abs()const { return mysqrt(abs2()); }\n\tconst double abs2()const { return x*x + y*y; }\n\tconst angle arg()const {\n\t\tif (x > eps) return angle(std::atan(y / x));\n\t\tif (x < eps) return angle(std::atan(y / x) + PI);\n\t\treturn angle();\n\t}\n\tstatic const double dot(const pvec &l, const pvec &r) { return l.x*r.x + l.y*r.y; }\n\tstatic const double cross(const pvec &l, const pvec &r) { return l.x*r.y - l.y*r.x; }\n\tconst pvec dir()const { return *this / abs(); }\n\n\tstatic const bool C_x(const pvec &l, const pvec &r) {\n\t\tif (l.x != r.x) return l.x < r.x;\n\t\treturn l.y < r.y;\n\t}\n\n\tfriend std::istream &operator>>(std::istream &is, pvec &o) {\n\t\tdouble x_, y_;is >> x_ >> y_;o = pvec(x_, y_);return (is);\n\t}\n\tfriend std::ostream &operator<<(std::ostream &os, const pvec &o) {\n\t\treturn os << o.x << \" \" << o.y;\n\t}\nprivate:\n\tstatic const double mysqrt(const double &x) {\n\t\tdouble h = 0.5*x;\n\t\tstd::uint_fast64_t t = 0x5FE6EB50C7B537AAl\n\t\t\t- (*(std::uint_fast64_t*)&x >> 1);\n\t\tdouble r = *(double*)&t;\n\t\tr *= 1.5 - h*r*r;r *= 1.5 - h*r*r;\n\t\tr *= 1.5 - h*r*r;r *= 1.5 - h*r*r;\n\t\treturn r*x;\n\t}\n};\n\nint main(void) {\n\t//std::ios::sync_with_stdio(false);\n\t//std::cin.tie(0);\n\tstatic constexpr double eps = 0.000000001;\n\tpvec o, d;\n\tstd::cin >> o >> d;\n\td -= o;\n\tuint32 q;\n\tstd::cin >> q;\n\tpvec p;\n\twhile (q--) {\n\t\tstd::cin >> p;\n\t\tp -= o;\n\t\tdouble t = pvec::cross(d, p);\n\t\tif (t > eps) {\n\t\t\tstd::cout << \"COUNTER_CLOCKWISE\";\n\t\t}\n\t\telse if (t < -eps) {\n\t\t\tstd::cout << \"CLOCKWISE\";\n\t\t}\n\t\telse if (p.arg() != d.arg()) {\n\t\t\tstd::cout << \"ONLINE_BACK\";\n\t\t}\n\t\telse if (p.abs() > d.abs()) {\n\t\t\tstd::cout << \"ONLINE_FRONT\";\n\t\t}\n\t\telse {\n\t\t\tstd::cout << \"ON_SEGMENT\";\n\t\t}\n\t\tstd::cout << \"\\n\";\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\n\n//constant----------------------------------------\nconst double EPS=1e-8;\nconst double INF=1e9;\nconst int COUNTER_CLOCKWISE=1;\nconst int CLOCKWISE=-1;\nconst int ONLINE_FRONT=2;\nconst int ONLINE_BACK=-2;\nconst int ON_SEGMENT=0;\n\n\ntypedef complex<double>Point;\ntypedef vector<Point>Polygon;\nstruct Line{\n    Point p1,p2;\n    Line(const Point &p1=Point(),const Point &p2=Point()):p1(p1),p2(p2){}\n};\nstruct Segment{\n    Point p1,p2;\n    Segment(const Point &p1=Point(),const Point &p2=Point()):p1(p1),p2(p2){}\n};\nstruct Circle{\n    Point p;\n    int r;\n    Circle(const Point &p=Point(),int r=0.0):p(p),r(r){}\n};\n\ndouble Dot(Point &p1,Point &p2){\n    return (conj(p1)*p2).real();\n}\n\ndouble Cross(Point &p1,Point &p2){\n    return (conj(p1)*p2).imag();\n}\n\nint CCW(Point &p1,Point &p2,Point &p3){\n    Point a=p2-p1,b=p3-p1;\n    if(Cross(a,b)>EPS)return COUNTER_CLOCKWISE;\n    if(Cross(a,b)<-EPS)return CLOCKWISE;\n    if(Dot(a,b)<-EPS)return ONLINE_BACK;\n    if(norm(b)>norm(a))return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\nsigned main(){\n    double x,y;\n    scanf(\"%lf%lf\",&x,&y);\n    Point p1(x,y);\n    scanf(\"%lf%lf\",&x,&y);\n    Point p2(x,y);\n\n    int q;scanf(\"%d\",&q);\n    while(q--){\n        scanf(\"%lf%lf\",&x,&y);\n        Point p3(x,y);\n        if(CCW(p1,p2,p3)==COUNTER_CLOCKWISE)puts(\"COUNTER_CLOCKWISE\");\n        if(CCW(p1,p2,p3)==CLOCKWISE)puts(\"CLOCKWISE\");\n        if(CCW(p1,p2,p3)==ONLINE_BACK)puts(\"ONLINE_BACK\");\n        if(CCW(p1,p2,p3)==ONLINE_FRONT)puts(\"ONLINE_FRONT\");\n        if(CCW(p1,p2,p3)==ON_SEGMENT)puts(\"ON_SEGMENT\");\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#include<iostream>\n#include<fstream>\n#include<iomanip>\n#include<math.h>\nusing namespace std;\n\ntemplate <class T>\nclass _Point{\npublic:\n\tT x;\n\tT y;\n\t_Point(){}\n\t_Point(T _x, T _y) :x(_x), y(_y){}\n\t_Point(const _Point & v) :x(v.x), y(v.y){}\n\n\tconst _Point operator + (const _Point & v)\n\t{\n\t\treturn _Point(x+v.x,y+v.y);\n\t}\n\tconst _Point operator - (const _Point & v)\n\t{\n\t\treturn _Point(x - v.x, y - v.y);\n\t}\n\tT abs() const {\n\t\treturn sqrt(x*x + y*y);\n\t}\n\t_Point unit() const{\n\t\tT len = abs();\n\t\treturn _Point(x / len, y / len);\n\t}\n\tT operator*(const _Point &v) const\n\t{\n\t\treturn x * v.x + y * v.y;\n\t}\n\tconst _Point operator*(const T &len) const\n\t{\n\t\treturn _Point(len * x, len * y);\n\t}\n};\ntypedef double R;\ntypedef _Point<R> Point;\ntypedef Point Vector;\n\nint main(){\n\tstd::istream & c_in = cin;\n\n\tPoint p0, p1;\n\tc_in >> p0.x >> p0.y >> p1.x >> p1.y;\n\tVector P10(p1 - p0);\n\tVector e10(P10.unit());\n\n\tint q;\n\tc_in >> q;\n\tfor (int i = 0; i < q; ++i)\n\t{\n\t\tPoint p2;\n\t\tc_in >> p2.x >> p2.y;\n\n\t\tVector P20 = p2 - p0;\n\t\tVector e20(P20.unit());\n\t\tR projection = e10*e20;\n\t\tif (abs(projection) > 1 - 1e-8)\n\t\t{\n\t\t\t//??´???\n\t\t\tif (projection > 0)\n\t\t\t{\n\t\t\t\tif (P20.abs() < P10.abs())\n\t\t\t\t{\n\t\t\t\t\t//(5)\n\t\t\t\t\tcout << \"ON_SEGMENT\";\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t//(4)\n\t\t\t\t\tcout << \"ONLINE_FRONT\";\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//(3)\n\t\t\t\tcout << \"ONLINE_BACK\";\n\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tVector ey(-e10.y, e10.x);\n\t\t\tR projection2 = ey*P20;\n\t\t\tif (projection2 > 0)\n\t\t\t{\n\t\t\t\t//???????¨??????????????????´??? (1) \n\t\t\t\tcout << \"COUNTER_CLOCKWISE\";\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//????¨??????????????????´???(2) \n\t\t\t\tcout << \"CLOCKWISE\";\n\t\t\t}\n\t\t}\n\t\tcout << endl;\n\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#include<cstring>\n#include<algorithm>\n#include<vector>\n#include<map>\n#include<assert.h>\n#include<set>\n#include<cmath>\n#include<queue>\n#include<cstdlib>\n#include<iostream>\n#include<bitset>\n#define pii pair<int,int>\n#define fi first\n#define se second\n#define pb push_back\n#define rep(i,j,k) for(int i=(int)(j);i<=(int)(k);i++)\n#define per(i,j,k) for(int i=(int)(j);i>=(int)(k);i--)\nusing namespace std;\ntypedef long long LL;\n//template\ntypedef double db;\nconst db eps=1e-10;\nconst db pi=acosl(-1.0);\nint sign(db x){if(x<-eps)return -1;if(x>eps)return 1;return 0;}\nint cmp(db x,db y){return sign(x-y);}\nstruct po{\n\tdb x,y;\n\tpo(db _x=0,db _y=0):x(_x),y(_y){}\n};\npo operator +(const po &a,const po &b){return po(a.x+b.x,a.y+b.y);}\npo operator -(const po &a,const po &b){return po(a.x-b.x,a.y-b.y);}\npo operator *(const po &a,const db &b){return po(a.x*b,a.y*b);}\npo operator /(const po &a,const db &b){return po(a.x/b,a.y/b);}\ndb operator *(const po &a,const po &b){return a.x*b.x+a.y*b.y;}\ndb operator ^(const po &a,const po &b){return a.x*b.y-a.y*b.x;}\ndb mo2(po a){return a*a;}\ndb mo(po a){return sqrt(a*a);}\npo proj(po x,po y){//proj x to y\n\treturn y*((x*y)/mo2(y));\n}\npo refl(po x,po y){//refl x from y\n\treturn proj(x,y)*2-x;\n}\n//template\nint main(){\n\tpo p1,p2;\n\tscanf(\"%lf%lf%lf%lf\",&p1.x,&p1.y,&p2.x,&p2.y);\n\tint t;scanf(\"%d\",&t);\n\tp2=p2-p1;\n\twhile(t--){\n\t\tpo x;scanf(\"%lf%lf\",&x.x,&x.y);\n\t\tx=x-p1;\n\t\tdb w=(x^p2);\n\t\tif(sign(w)==1){\n\t\t\tputs(\"CLOCKWISE\");\n\t\t\tcontinue;\n\t\t}\n\t\tif(sign(w)==-1){\n\t\t\tputs(\"COUNTER_CLOCKWISE\");\n\t\t\tcontinue;\n\t\t}\n\t\tif(sign(x*p2)==-1){\n\t\t\tputs(\"ONLINE_BACK\");\n\t\t\tcontinue;\n\t\t}\n\t\tif(cmp(mo2(x),mo2(p2))<=0){\n\t\t\tputs(\"ON_SEGMENT\");\n\t\t\tcontinue;\n\t\t}\n\t\tputs(\"ONLINE_FRONT\");\n\t\tcontinue;\n\t}\n\treturn 0;\n}\n\n\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <string>\n#include <vector>\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<stack>\n#include<queue>\n#include<cmath>\n#include<algorithm>\n#include<functional>\n//--\n#include<list>\n#include<deque>\n#include<bitset>\n#include<set>\n#include<map>\n#include<cstdio>\n#include<cstring>\n#include<sstream>\n#include<complex>\n#define X first\n#define Y second\n#define pb push_back\n#define rep(X,Y) for (int (X) = 0;(X) < (Y);++(X))\n#define rrep(X,Y) for (int (X) = Y-1;(X) >=0;--(X))\n#define all(X) (X).begin(),(X).end()\n#define rall(X) (X).rbegin(),(X).rend()\n\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> pii;\ntypedef complex<double> pt;\n\ndouble dot(pt a,pt b){return (conj(a)*b).real();}\ndouble cros(pt a,pt b){return (conj(a)*b).imag();}\npt proj(pt a,pt to){\n  return dot(a,to)/norm(to)*to;\n}\n\npt refle(pt a,pt mirror){\n  return pt(2)*proj(a,mirror)-a;\n}\n\nint pt3(pt a,pt b,pt c){\n  pt p=b-a,q=c-a;\n  double tmp;\n  tmp=cros(p,q);\n  if(tmp>1e-20){\n    return 0;\n  }else if(tmp<-1e-20){\n    return 1;\n  }else if(norm(p+q)<max(norm(p),norm(q))){\n    return 2;\n  }else if(norm(q)>norm(p)){\n    return 3;\n  }else if(norm(q)<norm(p)){\n    return 4;\n  }\n  return 5;\n}\nint main(){\n  int i,j,k,n;\n  pt o,p,q;\n // cout<<cros(pt(1,0),pt(0,-1))<<endl;\n  cin>>o.real()>>o.imag()>>p.real()>>p.imag();\n  cin>>n;\n  char str[][100]={\"COUNTER_CLOCKWISE\",\"CLOCKWISE\",\"ONLINE_BACK\"\n    ,\"ONLINE_FRONT\",\"ON_SEGMENT\",\"ON_SEGMENT\"};\n  double a,b;\n  rep(i,n){\n    cin>>a>>b;\n    q=pt(a,b);\n    printf(\"%s\\n\",str[pt3(0,p,q)]);\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n\ntemplate <class T>\nT abs(T x) {\n    return (x > 0) ? x : -x;\n}\n\nint main(int argc, const char * argv[]) {\n    long xp0, xp1, xp2, yp0, yp1, yp2;\n    int q;\n    \n    scanf(\"%ld %ld %ld %ld\", &xp0, &yp0, &xp1, &yp1);\n    scanf(\"%d\", &q);\n    \n    long v1x = xp1 - xp0;\n    long v1y = yp1 - yp0;\n    \n    for (int i = 0; i < q; ++i) {\n        scanf(\"%ld %ld\", &xp2, &yp2);\n        long v2x = xp2 - xp0;\n        long v2y = yp2 - yp0;\n        \n        long crossProd = v1x * v2y - v1y * v2x;\n        \n        if (crossProd > 0) {\n            puts(\"COUNTER_CLOCKWISE\");\n        } else if (crossProd < 0) {\n            puts(\"CLOCKWISE\");\n        } else if (v2x * v1x < 0 || v2y * v1y < 0) {\n            puts(\"ONLINE_BACK\");\n        } else if (abs(v1x) < abs(v2x) || abs(v1y) < abs(v2y)){\n            puts(\"ONLINE_FRONT\");\n        } else {\n            puts(\"ON_SEGMENT\");\n        }\n    }\n    \n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <complex>\n#include <vector>\n#include <cstdio>\n#define X real()\n#define Y imag()\n#define EPS (1e-10)\n#define EQ(a, b) (abs((a) - (b)) < EPS) // 二つのスカラーが等しいかどうか\n#define EQV(a, b) (EQ((a).X, (b).X) && EQ((a).Y, (b).Y)) // 二つのベクトルが等しいかどうか\nusing namespace std;\n\ntypedef complex<double> Point; // 点\ntypedef Point Vector; // ベクトル\n\nstruct Segment{ // 線分\n  Point p1, p2;\n  Segment(){};\n  Segment(Point p1, Point p2) : p1(p1), p2(p2) {}; // p1,p2をセット\n};\n\ntypedef Segment Line; // 直線\n\ntypedef vector<Point> Polygon; // 多角形\n\ndouble dotproduct(Vector a, Vector b) // 内積\n{\n  return real((conj(a) * b));\n}\n\ndouble crossproduct(Vector a, Vector b) // 外積\n{\n  return imag(conj(a) * b);\n}\n\ndouble dist(Point p1, Point p2) // 二点間の距離\n{\n  return abs(p1 - p2);\n}\n\nPoint project(Line l, Point p) // 射影\n{\n  double r = dotproduct(p - l.p1, l.p2 - l.p1) / norm(l.p2 - l.p1);\n  return l.p1 + (l.p2 - l.p1) * r;\n}\n\nPoint reflect(Line l, Point p) // 反射\n{\n  return p + (project(l, p) - p) * 2.0;\n}\n\nbool isOrthogonal(Line l1, Line l2)\n{\n  return EQ(dotproduct(l1.p1 - l1.p2, l2.p1 - l2.p2), 0.0);\n}\n\nbool isParallel(Line l1, Line l2)\n{\n  return EQ(crossproduct(l1.p1 - l1.p2, l2.p1 - l2.p2), 0.0);\n}\n\n//-------Counter-Clockwise---------\nconst int COUNTER_CLOCKWISE = +1;\nconst int CLOCKWISE = -1;\nconst int ONLINE_BACK = +2;\nconst int ONLINE_FRONT = -2;\nconst int ON_SEGMENT = 0;\n\nint ccw(Point a, Point b, Point c){\n  Point x = b - a;\n  Point y = c - a;\n  if(crossproduct(x, y) > EPS)\n    return COUNTER_CLOCKWISE;\n  if(crossproduct(x, y) < -EPS)\n    return CLOCKWISE;\n  if(dotproduct(x, y) < -EPS)\n    return ONLINE_BACK;\n  if(norm(x) < norm(y))\n    return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\n\nint main()\n{\n  Point a, b, c;\n  cin >> a.X >> a.Y >> b.X >> b.Y;\n  int n;\n  cin >> n;\n  for(int i = 0; i < n; i++){\n    cin >> c.X >> c.Y;\n    int x = ccw(a, b, c);\n    if(x == COUNTER_CLOCKWISE)\n      cout << \"COUNTER_CLOCKWISE\" << endl;\n    else if(x == CLOCKWISE)\n      cout << \"CLOCKWISE\" << endl;\n    else if(x == ONLINE_BACK)\n      cout << \"ONLINE_BACK\" << endl;\n    else if(x == ONLINE_FRONT)\n      cout << \"ONLINE_FRONT\" << endl;\n    else\n      cout << \"ON_SEGMENT\" << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define REP(i,n) for (long long i=0;i<(n);i++)\n#define FOR(i,a,b) for (long long i=(a);i<(b);i++)\n#define RREP(i,n) for(long long i=n;i>=0;i--)\n#define RFOR(i,a,b) for(long long i=(a);i>(b);i--)\n#define dump1d_arr(array) REP(i,array.size()) cerr << #array << \"[\" << (i) << \"] ==> \" << (array[i]) << endl;\n#define dump2d_arr(array) REP(i,array.size()) REP(j,array[i].size()) cerr << #array << \"[\" << (i) << \"]\" << \"[\" << (j) << \"] ==> \" << (array[i][j]) << endl;\n#define dump(x)  cerr << #x << \" => \" << (x) << endl;\n#define dumpP(p) cerr << \"( \" << p.first << \" , \" << p.second << \" )\" << ends;\n#define CLR(vec) { REP(i,vec.size()) vec[i] = 0; } \n#define SORT(c) sort((c).begin(),(c).end())\n#define MIN(vec) *min_element(vec.begin(), vec.end());\n#define MAX(vec) *max_element(vec.begin(), vec.end());\n#define UNIQ(vec) vec.erase(unique(vec.begin(), vec.end()),vec.end());\n#define IN(n,m)  (!(m.find(n) == m.end()))\n#define ENUM(m) for (auto itr = m.begin(); itr != m.end(); ++itr)\n#define dump_MAP(m) for(auto itr = m.begin(); itr != m.end(); ++itr) { cerr << itr->first << \" --> \"  << itr->second << endl; }\n#define FINDL(vec,x) (lower_bound(vec.begin(),vec.end(),x) - vec.begin())\n#define FINDU(vec,x) (upper_bound(vec.begin(),vec.end(),x) - vec.begin())\n#define ROUND(N) setprecision(N)\nusing namespace std;\nconstexpr long double pi = M_PI;\nconstexpr double eps = 1e-10;\nconstexpr long mod = 1000000007;\nconstexpr short shINF = 32767;\nconstexpr long loINF = 2147483647;\nconstexpr long long llINF = 9223372036854775807;\ntypedef long long LL;\ntypedef vector<LL> VI;\ntypedef vector<VI> VVI;\ntypedef vector<string> VS;\ntypedef pair<LL,LL> pr;\ntypedef vector<pr> VP;\nstruct Order {\n  bool operator() (pr const& a,pr const& b) const {\n    return a.first > b.first || ((a.first == b.first) && (a.second > b.second));\n  }\n};\ntypedef struct _PT {\n  long double x, y;\n  _PT() {}\n  _PT(long double x,long double y) : x(x), y(y) {} \n  _PT operator + (_PT p){\n     return _PT(x + p.x, y + p.y);\n  }\n  _PT operator - (_PT p){\n     return _PT(x - p.x, y - p.y);\n  }\n  _PT operator * (long double d){\n     return _PT(d*x, d*y);\n  }\n  bool operator <(const struct _PT &e) const{\n     return x == e.x? (y < e.y) : x < e.x;\n  }\n  bool operator >(const struct _PT &e) const{\n     return x == e.x? (y > e.y) : x > e.x;\n  }\n\n  // --オプジェクトは位置ベクトル--\n\n  long double dist(_PT p){ //点pとの距離の2乗\n     return (x-p.x)*(x-p.x) + (y-p.y)*(y-p.y);\n  }\n\n  // --オブジェクトは幾何ベクトル--\n  \n  long double dot(_PT v){ //ベクトルvとの内積\n     return x * v.x + y * v.y;\n  }\n  \n  long double det(_PT v){ // ベクトルvとの外積\n     return x * v.y - v.x * y;\n  }\n\n  long double norm(void){ // ベクトルのノルム\n    return sqrt(x*x + y*y);\n  }\n\n  long double twiceNorm(void){ // ノルムの2乗\n    return x*x + y*y;\n  }\n\n  bool is_parallel(_PT v) { //ベクトルvと平行か(外積 = 0か)\n    return (abs(x * v.y - v.x * y) < eps);\n  }\n}P;\n\nint main(void) {\n  double px,py,qx,qy,rx,ry;\n  cin >> px >> py >> qx >> qy;\n  double base = atan2((qy-py),(py-px));\n  if (base < 0.0) base += (2*pi); \n  int n;\n  cin >> n;\n  REP(i,n) {\n    cin >> rx >> ry;\n    double rad = atan2((ry-py),(rx-px));\n    if (rad < 0.0) rad += (2*pi);\n    if (abs(rad-base) < eps) {\n      if (P (rx-px,ry-py) > P (qx-px,qy-py)) cout << \"ONLINE_FRONT\" << endl;\n      else cout << \"ON_SEGMENT\" << endl;\n    }\n    else if (abs(abs(rad - base)-pi) < eps) cout << \"ONLINE_BACK\" << endl;\n    else if (rad > base) cout << \"COUNTER_CLOCKWISE\" << endl;\n    else cout << \"CLOCKWISE\" << endl;\n  }\n\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<cstdlib>\n#include<cmath>\n#include<iostream>\n#include<vector>\n#include<algorithm>\n\nusing namespace std;\n\nint main()\n{\n\tdouble p1x, p1y, p2x, p2y, p0x, p0y;\n\tint q;\n\n\tscanf(\"%lf %lf %lf %lf\", &p0x, &p0y, &p1x, &p1y);\n\n\tpair<double, double> v01 = { p1x - p0x, p1y - p0y };\n\n\n\tscanf(\"%d\", &q);\n\n\tfor (int i = 0; i < q; i++)\n\t{\n\t\tscanf(\"%lf %lf\", &p2x, &p2y);\n\n\t\tif ((p2x == p0x && p2y == p0y) || (p2x == p1x && p2y == p0y)){\n\t\t\tprintf(\"ONLINE_SEGMENT\\n\");\n\n\t\t\tcontinue;\n\t\t}\n\n\t\tpair<double, double> v02 = { p2x - p0x, p2y - p0x };\n\n\t\tif (v01.first*v02.second == v01.second*v02.first)\n\t\t{\n\t\t\tif (v01.first*v02.first < 0)\n\t\t\t{\n\t\t\t\tprintf(\"ONLINE_BACK\\n\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tabs(v01.first) < abs(v02.first) ? printf(\"ONLINE_FRONT\\n\") : printf(\"ONLINE_SEGMENT\\n\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\n\t\tdouble y01 = (v01.second / v01.first)*(p2x - p0x) + p0y;\n\t\ty01 < p2y ? printf(\"COUNTER_CLOCKWISE\\n\") : printf(\"CLOCKWISE\\n\");\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "// 半時計回り　ベクトルの位置判定\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<stack>\n#include<algorithm>\n#include<iostream>\n#include<cmath>\n#include<vector>\n\n#include<queue>\n\nusing namespace std;\n\n// 浮動小数点のゼロ判定\n#define EPS (1e-10)\n#define equals(a, b) ( fabs((a) - (b)) < EPS )\n\n// 点を表すクラス\nclass Point\n{\n    public:\n        double x, y;\n        // コンストラクタ\n        Point(double x = 0.0, double y = 0.0) : x(x), y(y){ }\n\n        // -----▼▼▼ 演算子のオーバーロード ▼▼▼-----\n\n        Point operator + (Point &p)\n        {\n            return Point(x + p.x, y + p.y);\n        }\n\n        Point operator - (Point &p)\n        {\n            return Point(x - p.x, y - p.y);\n        }\n\n        Point operator * (double a)\n        {\n            return Point(a * x, a * y);\n        }\n\n        Point operator / (double a)\n        {\n            return Point(x / a, y / a);\n        }\n\n        bool operator < ( const Point &p) const\n        {\n            return x != p.x ? x < p.x : y < p.y;\n        }\n\n        bool operator == ( const Point &p) const\n        {\n            return fabs(x - p.x) < EPS && fabs(y -p.y) < EPS;\n        }\n\n        // -----▲▲▲ 演算子のオーバーロード ▲▲▲-----\n\n        // 22点間の距離の算出\n        double distance()\n        {\n            return sqrt( norm() );\n        }\n\n        double norm()\n        {\n            return ( x * x ) + ( y * y );\n        }\n};\n\n// 線分を表すクラス\nclass Segment\n{\n    public:\n        Point p1, p2;\n        // コンストラクタ\n        Segment(Point p1, Point p2) : p1(p1), p2(p2){ }\n};\n\n// 点とベクトルの表現は同じ\ntypedef Point Vector;\n// 線分と直線の表現は同じ\ntypedef Segment Line;\n\ndouble dot(Vector a, Vector b);\ndouble cross(Vector a, Vector b);\ndouble cross_point(Line line, Point pp);\nVector projection(Vector a, Vector b, Vector p);\ndouble getDistanceLP(Line l, Point p);\n\nint main(void)\n{\n    int q;\n    double dot_val, cross_val, cos_theta;\n    double p0_p1_distance, p0_p2_distance;\n    Point p0, p1, p2;\n\n    // p0, p1の格納\n    cin >> p0.x >> p0.y >> p1.x >> p1.y;\n\n    cin >> q;\n\n    for(int i = 0; i < q; i++)\n    {\n        // p2の格納\n        cin >> p2.x >> p2.y;\n\n        // ベクトルの距離の算出\n        p0_p1_distance = (p1 - p0).distance();\n        p0_p2_distance = (p2 - p0).distance();\n\n        // [p0p1ベクトル]と, [p0p2ベクトル]の内積を求める\n        dot_val = dot(p1 - p0, p2 - p0);\n        // コサインの値を求める\n        cos_theta = dot_val / ( p0_p1_distance * p0_p2_distance );\n\n        // [p0p1ベクトル]と, [p0p2ベクトル]の外積を求める\n        cross_val = cross(p1 - p0, p2 - p0);\n\n        // 判定処理\n        if( cross_val > 0.0 )\n        {\n            // p2が反時計回りの方向にある時\n            printf(\"COUNTER_CLOCKWISE\\n\");\n        }\n        else if( cross_val < 0.0 )\n        {\n            // p2が時計回りの方向にある時\n            printf(\"CLOCKWISE\\n\");\n        }\n        else if( equals(cos_theta, -1.0) )\n        {\n            // なす角が180°の時\n            printf(\"ONLINE_BACK\\n\");\n        }\n        else\n        {\n            // なす角が0°の時\n            if( p0_p1_distance < p0_p2_distance )\n            {\n                // p0, p1, p2 がこの順で同一直線上にある場合\n                printf(\"ONLINE_FRONT\\n\");\n            }\n            else\n            {\n                // p2 が線分 p0p1 上にある場合\n                // [p0とp2], [p1とp2] が同一点である時も含む\n                printf(\"ON_SEGMENT\\n\");\n            }\n        }\n    }\n\n    return 0;\n}\n\n// 内積の計算をする関数\ndouble dot(Vector a, Vector b)\n{\n    return ( ( a.x * b.x ) + ( a.y * b.y ) );\n}\n\n// 外積の計算をする関数\ndouble cross(Vector a, Vector b)\n{\n    return ( ( a.x * b.y ) - ( a.y * b.x ) );\n}\n\n// 外積の計算をする関数 2\n// 直線 : line に対する点pの外積の演算\ndouble cross_point(Line line, Point pp)\n{\n    return ( line.p2.x - line.p1.x ) * ( pp.y - line.p1.y ) - ( pp.x - line.p1.x ) * ( line.p2.y - line.p1.y );\n}\n\n// 正射影ベクトルを求める関数\nVector projection(Vector a, Vector b, Vector p)\n{\n    // 正射影ベクトルの考え方より\n    // 正射影ベクトル = ( ( a, bベクトルの内積 ) / aベクトルの大きさの2乗 ) * aベクトル\n    return ( ( a * ( dot(a, b) / pow( a.distance(), 2.0 ) ) ) + p );\n}\n\n// 点と直線の距離を求める関数\ndouble getDistanceLP(Line l, Point p)\n{\n    if( dot( l.p2 - l.p1, p - l.p1 ) < 0.0 )\n    {\n        // 内積の値が負の場合, 2つの線分のなす角が90°以上のため,\n        // 距離は, p と l.p1 の距離そのものになる\n        return ( p - l.p1 ).distance();\n    }\n\n    if( dot( l.p1 - l.p2, p - l.p2 ) < 0.0 )\n    {\n        // 内積の値が負の場合, 2つの線分のなす角が90°以上のため,\n        // 距離は, p と l.p2 の距離そのものになる\n        return ( p - l.p2 ).distance();\n    }\n\n    // 2つの線分のなす角が90°以内の時\n    return abs( cross(l.p2 - l.p1, p - l.p1) / ( l.p2 - l.p1 ).distance() );\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <cmath>\n#include <complex>\n#include <iomanip>\n#include <iostream>\n#include <vector>\nusing namespace std;\n\nconst double EPS = 1e-8, PI = acos(-1);\n\ninline bool eq(double a, double b) {\n  return fabs(b - a) < EPS;\n}\n\nusing Point = complex<double>;\nistream &operator>>(istream &is, Point &p) {\n  double a, b;\n  is >> a >> b;\n  p = Point(a, b);\n  return is;\n}\nostream &operator<<(ostream &os, Point &p) {\n  os << fixed << setprecision(10) << p.real() << \" \" << p.imag();\n}\n\nnamespace std {\nbool operator<(const Point &a, const Point &b) {\n  return a.real() != b.real() ? a.real() < b.real() : a.imag() < b.imag();\n}\n} // namespace std\n\ndouble cross(const Point &a, const Point &b) {\n  return a.real() * b.imag() - a.imag() * b.real();\n}\n\ndouble dot(const Point &a, const Point &b) {\n  return a.real() * b.real() + a.imag() * b.imag();\n}\n\ndouble RadianToDegree(double r) {\n  return (r * 180.0 / acos(-1));\n}\n\ndouble DegreeToRadian(double d) {\n  return (d * acos(-1) / 180.0);\n}\n\ndouble GetAngle(const Point &a, const Point &b, const Point &c) {\n  const Point v(b - a), w(c - b);\n  double alpha = atan2(v.imag(), v.real()), beta = atan2(w.imag(), w.real());\n  if (alpha > beta) swap(alpha, beta);\n  double theta = (beta - alpha);\n  return min(theta, 2 * acos(-1) - theta);\n}\n\nstruct Line {\n  Point a, b;\n\n  Line(){};\n  Line(Point a, Point b) : a(a), b(b){};\n\n  // Ax + By = C\n  Line(double A, double B, double C) {\n    if (eq(A, 0)) {\n      a = Point(0, C / B);\n      b = Point(1, C / B);\n    } else if (eq(B, 0)) {\n      a = Point(C / A, 0);\n      b = Point(C / A, 1);\n    } else {\n      a = Point(0, C / B);\n      b = Point(C / A, 0);\n    }\n  }\n\n  friend ostream &operator<<(ostream &os, Line &p) {\n    return os << p.a << \" to \" << p.b;\n  }\n\n  friend istream &operator>>(istream &is, Line &a) {\n    return is >> a.a >> a.b;\n  }\n};\n\nstruct Segment {\n  Point a, b;\n\n  Segment(){};\n  Segment(Point a, Point b) : a(a), b(b){};\n\n  friend ostream &operator<<(ostream &os, Segment &p) {\n    return os << p.a << \" to \" << p.b;\n  }\n\n  friend istream &operator>>(istream &is, Segment &a) {\n    return is >> a.a >> a.b;\n  }\n};\n\nstruct Circle {\n  Point p;\n  double r;\n\n  Circle(){};\n\n  Circle(Point p, double r) : p(p), r(r){};\n};\n\nusing Polygon = vector<Point>;\nusing Segments = vector<Segment>;\nusing Lines = vector<Line>;\nusing Circles = vector<Circle>;\nusing PointPoint = pair<Point, Point>;\n\nint ccw(const Point &a, Point b, Point c) {\n  b = b - a, c = c - a;\n  if (cross(b, c) > EPS) return +1;  // \"COUNTER_CLOCKWISE\"\n  if (cross(b, c) < -EPS) return -1; // \"CLOCKWISE\"\n  if (dot(b, c) < 0) return +2;      // \"ONLINE_BACK\"\n  if (norm(b) < norm(c)) return -2;  // \"ONLINE_FRONT\"\n  return 0;                          // \"ON_SEGMENT\"\n}\nint main() {\n  const vector<string> ans{\"ONLINE_FRONT\", \"CLOCKWISE\", \"ON_SEGMENT\", \"COUNTER_CLOCKWISE\", \"ONLINE_BACK\"};\n  Point p0, p1;\n  cin >> p0 >> p1;\n\n  int q;\n  cin >> q;\n  while (q--) {\n    Point p2;\n    cin >> p2;\n    cout << ans[ccw(p0, p1, p2) + 2] << endl;\n  }\n}\n\nbool Parallel(const Line &a, const Line &b) {\n  return abs(cross(a.b - a.a, b.b - b.a)) < EPS;\n}\n\nbool Orthogonal(const Line &a, const Line &b) {\n  return abs(dot(a.a - a.b, b.a - b.b)) < EPS;\n}\n\n// verified https://onlinejudge.u-aizu.ac.jp/#/courses/library/4/CGL/1/CGL_1_A\nPoint Projection(const Line &l, const Point &p) {\n  double t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n  return l.a + (l.a - l.b) * t;\n}\n// int main() {\n//   Line l;\n//   cin >> l;\n//\n//   int q;\n//   cin >> q;\n//   while (q--) {\n//     Point p;\n//     cin >> p;\n//     Point ans = Projection(l, p);\n//     cout << ans << endl;\n//   }\n// }\n\nPoint Projection(const Segment &l, const Point &p) {\n  double t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n  return l.a + (l.a - l.b) * t;\n}\n\n// verified https://onlinejudge.u-aizu.ac.jp/#/courses/library/4/CGL/1/CGL_1_B\nPoint Reflection(const Line &l, const Point &p) {\n  return p + (Projection(l, p) - p) * 2.0;\n}\n// int main() {\n//   Line l;\n//   cin >> l;\n//\n//   int q;\n//   cin >> q;\n//   while (q--) {\n//     Point p;\n//     cin >> p;\n//     Point ans = Reflection(l, p);\n//     cout << ans << endl;\n//   }\n// }\n\ndouble Distance(const Point &a, const Point &b) {\n  return abs(a - b);\n}\n\ndouble Distance(const Line &l, const Point &p) {\n  return abs(p - Projection(l, p));\n}\n\nbool Intersect(const Line &l, const Line &m);\ndouble Distance(const Line &l, const Line &m) {\n  return Intersect(l, m) ? 0 : Distance(l, m.a);\n}\n\nbool Intersect(const Segment &s, const Point &p);\ndouble Distance(const Segment &s, const Point &p) {\n  Point r = Projection(s, p);\n  if (Intersect(s, r)) return abs(r - p);\n  return min(abs(s.a - p), abs(s.b - p));\n}\n\nbool Intersect(const Segment &s, const Segment &t);\ndouble Distance(const Segment &a, const Segment &b) {\n  if (Intersect(a, b)) return 0;\n  return min(min(Distance(a, b.a), Distance(a, b.b)), min(Distance(b, a.a), Distance(b, a.b)));\n}\n\nbool Intersect(const Line &l, const Segment &s);\ndouble Distance(const Line &l, const Segment &s) {\n  if (Intersect(l, s)) return 0;\n  return min(Distance(l, s.a), Distance(l, s.b));\n}\n\nbool Intersect(const Line &l, const Point &p) {\n  return abs(ccw(l.a, l.b, p)) != 1;\n}\n\nbool Intersect(const Line &l, const Line &m) {\n  return abs(cross(l.b - l.a, m.b - m.a)) > EPS || abs(cross(l.b - l.a, m.b - l.a)) < EPS;\n}\n\nbool Intersect(const Segment &s, const Point &p) {\n  return ccw(s.a, s.b, p) == 0;\n}\n\nbool Intersect(const Line &l, const Segment &s) {\n  return cross(l.b - l.a, s.a - l.a) * cross(l.b - l.a, s.b - l.a) < EPS;\n}\n\nbool Intersect(const Segment &s, const Segment &t) {\n  return ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 && ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0;\n}\n\ndouble Distance(const Line &l, const Point &p);\nbool Intersect(const Circle &c, const Line &l) {\n  return Distance(l, c.p) <= c.r + EPS;\n}\n\nbool Intersect(const Circle &c, const Point &p) {\n  return abs(abs(p - c.p) - c.r) < EPS;\n}\n\nint Intersect(const Circle &c, const Segment &l) {\n  if (norm(Projection(l, c.p) - c.p) - c.r * c.r > EPS) return 0;\n  const double d1 = abs(c.p - l.a), d2 = abs(c.p - l.b);\n  if (d1 < c.r + EPS && d2 < c.r + EPS) return 0;\n  if (d1 < c.r - EPS && d2 > c.r + EPS || d1 > c.r + EPS && d2 < c.r - EPS) return 1;\n  const Point h = Projection(l, c.p);\n  if (dot(l.a - h, l.b - h) < 0) return 2;\n  return 0;\n}\n\nPoint Crosspoint(const Line &l, const Line &m) {\n  double A = cross(l.b - l.a, m.b - m.a);\n  double B = cross(l.b - l.a, l.b - m.a);\n  if (abs(A) < EPS && abs(B) < EPS) return m.a;\n  return m.a + (m.b - m.a) * B / A;\n}\n\nPoint Crosspoint(const Segment &l, const Segment &m) {\n  double A = cross(l.b - l.a, m.b - m.a);\n  double B = cross(l.b - l.a, l.b - m.a);\n  if (abs(A) < EPS && abs(B) < EPS) return m.a;\n  return m.a + (m.b - m.a) * B / A;\n}\n\nPointPoint Crosspoint(const Circle &c, const Line l) {\n  Point hp = Projection(l, c.p), h = hp - c.p;\n  const double d2 = norm(h);\n  Point v = (l.b - l.a) * sqrt(c.r * c.r - d2) / abs(l.b - l.a);\n  return PointPoint(hp - v, hp + v);\n}\n\nPointPoint Crosspoint(const Circle &c, const Segment &l) {\n  Line aa = Line(l.a, l.b);\n  if (Intersect(c, l) == 2) return Crosspoint(c, aa);\n  PointPoint ret = Crosspoint(c, aa);\n  if (dot(l.a - ret.first, l.b - ret.first) < 0)\n    ret.second = ret.first;\n  else\n    ret.first = ret.second;\n  return ret;\n}\n\nPointPoint Crosspoint(const Circle &c1, const Circle &c2) {\n  double d = abs(c1.p - c2.p);\n  double a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n  double t = atan2(c2.p.imag() - c1.p.imag(), c2.p.real() - c1.p.real());\n  Point p1 = c1.p + Point(cos(t + a) * c1.r, sin(t + a) * c1.r);\n  Point p2 = c1.p + Point(cos(t - a) * c1.r, sin(t - a) * c1.r);\n  return (PointPoint(p1, p2));\n}\n\nbool IsConvex(const Polygon &p) {\n  int n = p.size();\n  for (int i = 0; i < n; i++) {\n    if (ccw(p[(i + n - 1) % n], p[i], p[(i + 1) % n]) == -1) return false;\n  }\n  return true;\n}\n\nPolygon Convex_Hull(Polygon &p) {\n  int n = p.size(), k = 0;\n  if (n >= 3) {\n    sort(p.begin(), p.end());\n    vector<Point> ch(2 * n);\n    for (int i = 0; i < n; ch[k++] = p[i++]) {\n      while (k >= 2 && cross(ch[k - 1] - ch[k - 2], p[i] - ch[k - 1]) < 0) --k;\n    }\n    for (int i = n - 2, t = k + 1; i >= 0; ch[k++] = p[i--]) {\n      while (k >= t && cross(ch[k - 1] - ch[k - 2], p[i] - ch[k - 1]) < 0) --k;\n    }\n    ch.resize(k - 1);\n    return ch;\n  } else {\n    return p;\n  }\n}\n\nenum { OUT, ON, IN };\nint Contains(const Polygon &Q, const Point &p) {\n  bool in = false;\n  for (int i = 0; i < Q.size(); i++) {\n    Point a = Q[i] - p, b = Q[(i + 1) % Q.size()] - p;\n    if (a.imag() > b.imag()) swap(a, b);\n    if (a.imag() <= 0 && 0 < b.imag() && cross(a, b) < 0) in = !in;\n    if (cross(a, b) == 0 && dot(a, b) <= 0) return ON;\n  }\n  return in ? IN : OUT;\n}\n\nbool MergeIfAble(Segment &s1, Segment s2) {\n  if (abs(cross(s1.b - s1.a, s2.b - s2.a)) > EPS) return false;\n  if (ccw(s1.a, s2.a, s1.b) == 1 || ccw(s1.a, s2.a, s1.b) == -1) return false;\n  if (ccw(s1.a, s1.b, s2.a) == -2 || ccw(s2.a, s2.b, s1.a) == -2) return false;\n  s1 = Segment(min(s1.a, s2.a), max(s1.b, s2.b));\n  return true;\n}\n\nvoid MergeSegments(vector<Segment> &segs) {\n  for (int i = 0; i < segs.size(); i++) {\n    if (segs[i].b < segs[i].a) swap(segs[i].a, segs[i].b);\n  }\n  for (int i = 0; i < segs.size(); i++) {\n    for (int j = i + 1; j < segs.size(); j++) {\n      if (MergeIfAble(segs[i], segs[j])) {\n        segs[j--] = segs.back(), segs.pop_back();\n      }\n    }\n  }\n}\n\nvector<vector<int>> SegmentArrangement(vector<Segment> &segs, vector<Point> &ps) {\n  vector<vector<int>> g;\n  const int N = (int)segs.size();\n  for (int i = 0; i < N; i++) {\n    ps.emplace_back(segs[i].a);\n    ps.emplace_back(segs[i].b);\n    for (int j = i + 1; j < N; j++) {\n      const Point p1 = segs[i].b - segs[i].a;\n      const Point p2 = segs[j].b - segs[j].a;\n      if (cross(p1, p2) == 0) continue;\n      if (Intersect(segs[i], segs[j])) {\n        ps.emplace_back(Crosspoint(segs[i], segs[j]));\n      }\n    }\n  }\n  sort(begin(ps), end(ps));\n  ps.erase(unique(begin(ps), end(ps)), end(ps));\n\n  const int M = (int)ps.size();\n  g.resize(M);\n  for (int i = 0; i < N; i++) {\n    vector<int> vec;\n    for (int j = 0; j < M; j++) {\n      if (Intersect(segs[i], ps[j])) {\n        vec.emplace_back(j);\n      }\n    }\n    for (int j = 1; j < vec.size(); j++) {\n      g[vec[j - 1]].push_back(vec[j]);\n      g[vec[j]].push_back(vec[j - 1]);\n    }\n  }\n  return (g);\n}\n\nPolygon ConvexCut(Polygon &U, Line l) {\n  Polygon ret;\n  for (int i = 0; i < U.size(); i++) {\n    Point now = U[i], nxt = U[(i + 1) % U.size()];\n    if (ccw(l.a, l.b, now) != -1) ret.push_back(now);\n    if (ccw(l.a, l.b, now) * ccw(l.a, l.b, nxt) < 0) {\n      ret.push_back(Crosspoint(Line(now, nxt), l));\n    }\n  }\n  return (ret);\n}\n\ndouble Area2(const Polygon &p) {\n  double A = 0;\n  for (int i = 0; i < p.size(); ++i) {\n    A += cross(p[i], p[(i + 1) % p.size()]);\n  }\n  return A;\n}\n\ndouble Convex_Diameter(Polygon &p) {\n  int n = p.size();\n  int is = 0, js = 0;\n  for (int i = 1; i < n; i++) {\n    if (p[i].imag() > p[is].imag()) is = i;\n    if (p[i].imag() < p[js].imag()) js = i;\n  }\n  double maxdis = norm(p[is] - p[js]);\n\n  int maxi, maxj, i, j;\n  i = maxi = is;\n  j = maxj = js;\n  do {\n    if (cross(p[(i + 1) % n] - p[i], p[(j + 1) % n] - p[j]) >= 0) {\n      j = (j + 1) % n;\n    } else {\n      i = (i + 1) % n;\n    }\n    if (norm(p[i] - p[j]) > maxdis) {\n      maxdis = norm(p[i] - p[j]);\n      maxi = i;\n      maxj = j;\n    }\n  } while (i != is || j != js);\n  return maxdis;\n}\n\n// int main() {}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <vector>\n#define EPS 1e-10\nusing namespace std;\n\nstruct P{\n\tdouble x,y;\n\tP(double xx=0,double yy=0){\n\t\tx=xx;\n\t\ty=yy;\n\t}\n\tP operator +(P &p){\n\t\treturn P(x+p.x,y+p.y);\t\n\t}\n\tP operator -(P &p){\n\t\treturn P(x-p.x,y-p.y);\t\n\t}\n\tP operator *(double d){\n\t\treturn P(x*d,y*d);\t\n\t}\n\tP operator /(double d){\n\t\treturn P(x/d,y/d);\t\n\t}\n\tdouble abs(){\n\t\treturn sqrt(norm());\n\t}\n\tdouble norm(){\n\t\treturn x*x+y*y;\n\t}\n\tbool operator ==(const P &p)const{\n\t\treturn fabs(x-p.x)<EPS && fabs(y-p.y)<EPS;\n\t}\n\tdouble dot(P p){\n\t\treturn x*p.x+y*p.y;\n\t}\n\tdouble cross(P p){\n\t\treturn x*p.y-y*p.x;\n\t}\n};\n\ntypedef P Vector;\n\nint ccw(P p0,P p1,P p2){\n\tVector a=p1-p0;\n\tVector b=p2-p0;\n\tif(a.cross(b)>EPS)return 1;\n\tif(a.cross(b)<-EPS)return -1;\n\tif(a.dot(b)<-EPS)return 2;\n\tif(a.norm()<b.norm())return -2;\n\treturn 0;\n}\n\nint main(void){\n\tP p0,p1,p2;\n\tscanf(\"%lf %lf %lf %lf\",&p0.x,&p0.y,&p1.x,&p1.y);\n\tint q;\n\tscanf(\"%d\",&q);\n\tfor(int i=0;i<q;i++){\n\t\tscanf(\"%lf %lf\",&p2.x,&p2.y);\n\t\tint res=ccw(p0,p1,p2);\n\t\tif(res==2)printf(\"ONLINE_BACK\\n\");\n\t\tif(res==1)printf(\"COUNTER_CLOCKWISE\\n\");\n\t\tif(res==0)printf(\"ON_SEGMENT\\n\");\n\t\tif(res==-1)printf(\"CLOCKWISE\\n\");\n\t\tif(res==-2)printf(\"ONLINE_FRONT\\n\");\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\n\n//constant----------------------------------------\nconst double EPS=1e-12;\nconst double INF=1e9;\nconst int COUNTER_CLOCKWISE=2;\nconst int CLOCKWISE=-2;\nconst int ONLINE_FRONT=1;\nconst int ONLINE_BACK=-1;\nconst int ON_SEGMENT=0;\n\n\ntypedef complex<double>Point;\ntypedef vector<Point>Polygon;\nstruct Line{\n    Point p1,p2;\n    Line(const Point &p1,const Point &p2):p1(p1),p2(p2){}\n};\nstruct Segment{\n    Point p1,p2;\n    Segment(const Point &p1,const Point &p2):p1(p1),p2(p2){}\n};\nstruct Circle{\n    Point p;\n    int r;\n    Circle(Point &p,int r):p(p),r(r){}\n};\n\ndouble dot(Point &p1,Point &p2){\n    return real(p1)*real(p2)+imag(p1)+imag(p2);\n}\n\ndouble cross(Point &p1,Point &p2){\n    return real(p1)*imag(p2)-real(p2)*imag(p1);\n}\n\nint CCW(Point &p1,Point &p2,Point &p3){\n    Point a=p2-p1,b=p3-p1;\n    if(cross(a,b)>EPS)return COUNTER_CLOCKWISE;\n    if(cross(a,b)<-EPS)return CLOCKWISE;\n    if(dot(a,b)<-EPS)return ONLINE_BACK;\n    if(norm(b)>norm(a))return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\nsigned main(){\n    double x,y;\n    scanf(\"%lf%lf\",&x,&y);\n    Point p1(x,y);\n    scanf(\"%lf%lf\",&x,&y);\n    Point p2(x,y);\n\n    int q;scanf(\"%d\",&q);\n    while(q--){\n        scanf(\"%lf%lf\",&x,&y);\n        Point p3(x,y);\n        if(CCW(p1,p2,p3)==COUNTER_CLOCKWISE)puts(\"COUNTER_CLOCKWISE\");\n        if(CCW(p1,p2,p3)==CLOCKWISE)puts(\"CLOCKWISE\");\n        if(CCW(p1,p2,p3)==ONLINE_BACK)puts(\"ONLINE_BACK\");\n        if(CCW(p1,p2,p3)==ONLINE_FRONT)puts(\"ONLINE_FRONT\");\n        if(CCW(p1,p2,p3)==ON_SEGMENT)puts(\"ON_SEGMENT\");\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define N 50005\n#define re register\n#define ll long long\n#define P 998244353\nusing namespace std;\nbool m1;\nint n,m,K;\ninline void Rd(int &res){\n\tre char c;res=0;\n\twhile(c=getchar(),c<48);\n\tdo res=(res<<3)+(res<<1)+(c^48);\n\twhile(c=getchar(),c>47);\n}\nstruct Point{\n\tdouble x,y;\n\tPoint operator+(const Point&a)const{return (Point){x+a.x,y+a.y};}\n\tPoint operator-(const Point&a)const{return (Point){x-a.x,y-a.y};}\n\tPoint operator*(const double&v)const{return (Point){x*v,y*v};}\n\tdouble operator*(const Point&a)const{return x*a.x+y*a.y;}\n\tdouble operator^(const Point&a)const{return x*a.y-y*a.x;}\n\tdouble len(){return sqrt(x*x+y*y);}\n}p1,p2,p,p0;\nbool m2;\nint main(){\n\tscanf(\"%lf%lf%lf%lf\",&p0.x,&p0.y,&p1.x,&p1.y);\n\tPoint p3=p1-p0;\n\tdouble l=p3.len();\n\tint q;Rd(q);\n\twhile(q--){\n\t\tscanf(\"%lf%lf\",&p2.x,&p2.y);\n\t\tdouble l1=(p3^(p2-p0))/l;\n\t\tif(fabs(l1)<1e-7){\n\t\t\tPoint p01=p1-p0;\n\t\t\tPoint p02=p2-p0;\n\t\t\tdouble res=p01*p02;\n\t\t\tif(res+1e-8<0){puts(\"ONLINE_BACK\");continue;}\n\t\t\tPoint p10=p0-p1;\n\t\t\tPoint p12=p2-p1;\n\t\t\tres=p10*p12;\n\t\t\tif(res+1e-8<0)puts(\"ONLINE_FRONT\");\n\t\t\telse puts(\"ON_SEGMENT\");\n\t\t}\n\t\telse if(l1>0)puts(\"COUNTER_CLOCKWISE\");\n\t\telse puts(\"CLOCKWISE\");\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "//计算几何 板子\n#include<bits/stdc++.h>\nusing namespace std ;\n#define eps 1e-10\n#define equals(a , b) (fabs((a) - (b)) < eps)\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1 ;\nstatic const int ONCLICK_BACK = 2 ;\nstatic const int ONLINE_FRONT = -2 ;\nstatic const int ON_SEGMENT = 0 ;\n\nclass Point\n{\npublic:\n    double x , y;\n\n    Point(double x = 0 ,double y = 0):x(x) , y(y) {}\n\n    Point operator +(Point p){return Point(x + p.x , y + p.y) ;}\n    Point operator -(Point p){return Point(x - p.x , y - p.y) ;}\n    Point operator *(double a){return Point(a * x , a * y) ;}\n    Point operator /(double a){return Point(x / a , y / a) ;}\n\n    double abs() {return sqrt(norm()) ;}\n    double norm() {return x * x + y * y ;}\n\n    bool operator < (const Point &p) const\n    {\n        return x != p.x ? x < p.x : y < p.y ;\n    }\n\n    bool operator == (const Point &p) const\n    {\n        return fabs(x - p.x) < eps && fabs(y - p.y) < eps ;\n    }\n\n};\n\ntypedef Point Vector;\n\nstruct Segment  //表示线段结构体\n{\n    Point p1 , p2 ;\n};\n\ndouble dot(Vector a , Vector b)  // 向量a,b的内积,就是向量a*b\n{\n    return a.x * b.x + a.y * b.y ;\n}\n\ndouble cross(Vector a, Vector b)  //向量a,b外积\n{\n\treturn a.x * b.y - a.y * b.x ;\n}\n\nbool isOrthogonal(Vector a , Vector b)  //判断是否正交\n{\n    return equals(dot(a , b) , 0.0) ;\n}\n\nbool isOrthogonal(Point a1 , Point a2 , Point b1 , Point b2)\n{\n    return isOrthogonal(a1 - a2 , b1 - b2) ;\n}\n\nbool  isOrthogonal(Segment s1 , Segment s2)\n{\n    return equals(dot(s1.p2 - s1.p1 , s2.p2 - s2.p1) , 0.0) ;\n}\n\nbool isParallel(Vector a, Vector b)  //判断是否平行\n{\n\treturn equals(cross(a, b), 0.0) ;\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2)\n{\n\treturn isParallel(a1 - a2, b1 - b2) ;\n}\n\nbool isParallel(Segment s1, Segment s2)\n{\n\treturn equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0) ;\n}\n\nPoint project(Segment s, Point p)  //p在s上的投影\n{\n    Point base = s.p2 - s.p1 ;\n    double r = dot(p - s.p1 , base) / base.norm() ;\n    return s.p1 +base * r ;\n}\n/*\n求垂足x：对于给定的三点p1,p2,p从点p向通过p1,p2的直线引一条垂线\nbase=p2-p1;\nhypo=p-p1;\n x=s.p1+base*(hypo*base/|base|^2); hypo*base 可以用向量内积求\n*/\n\nPoint reflect(Segment s , Point p)\n{\n    return p + (project(s , p) - p) * 2.0 ;\n}\n\nint ccw(Point p0 , Point p1 , Point p2)//判断三个点相对位置\n{\n\tPoint a = p1 - p0 ;\n\tPoint b = p2 - p0 ;\n\tif(cross(a , b) > eps) return 1 ;  //p0,p1,p2成逆时针方向\n\tif(cross(a , b) < -eps) return -1 ;  //p0,p1,p2成顺时针方向\n\tif(dot(a , b) < -eps) return 2 ;  //p2 p0 p1一次排列在同一直线上\n\tif(a.norm() < b.norm()) return -2 ;  // p0 p1 p2一次排列在同一直线上\n\treturn 0 ;  //p2在线段p0p1上\n}\n\nbool intersect(Point p1,Point p2,Point p3,Point p4)  //判断是否相交 通过ccw来判断\n{\n\treturn (ccw(p1,p2,p3)*ccw(p1,p2,p4)<=0&&ccw(p3,p4,p1)*ccw(p3,p4,p2)<=0);\n}\n\ndouble getdis(Point a , Point b)  //求俩点间的距离\n{\n\treturn (a - b) . abs() ; //点a与点b之间的距离等于向量a-b或b-a的绝对值。\n}\n\n//注意：这里Segmet s是不规范的应该是 Line s 才对\ndouble getdis_Li(Segment s , Point p)  //点与直线的距离\n{\n\treturn fabs(cross(s.p2 - s.p1 , p - s.p1)/(s.p2-s.p1).abs());\n}\n\ndouble getdis_sp(Segment s , Point p)  //点与线段的距离\n{\n\tif(dot(s.p2 - s.p1 , p - s.p1) < 0.0) return (p-s.p1).abs();\n\tif(dot(s.p1 - s.p2 , p - s.p2) < 0.0) return (p-s.p2).abs();\n\treturn getdis_Li(s , p) ;\n}\n\ndouble getdis_ss(Segment s1 , Segment s2)  //线段与线段之间的距离\n{\n\tif(intersect(s1.p1 , s1.p2 , s2.p1 , s2.p2)) return 0.0 ;\n\treturn min(min(getdis_sp(s1 , s2.p1) , getdis_sp(s1 , s2.p2)) , min(getdis_sp(s2 , s1.p1) , getdis_sp(s2 , s1.p2))) ;\n}\n\nint main()\n{\n    Point p0 , p1 , p2 ;\n    cin >> p0.x >> p0.y >> p1.x >> p1.y ;\n    int q ;\n    cin >> q ;\n    while(q --)\n    {\n        cin >> p2.x >> p2.y ;\n        switch(ccw(p0 , p1 , p2))\n        {\n        case 1:\n             cout << \"COUNTER_CLOCKWISE\" << endl ;\n             break;\n        case 2:\n            cout<<\"ONLINE_BACK\"<<endl;\n             break;\n        case -1:\n            cout<<\"CLOCKWISE\"<<endl;\n            break;\n        case -2:\n            cout<<\"ONLINE_FRONT\"<<endl;\n            break;\n        case 0:\n            cout<<\"ON_SEGMENT\"<<endl;\n            break;\n        }\n    }\n    return 0 ;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <iostream>\n\nusing namespace std;\n\n#define EPS 1e-14\n\n#define PI 3.1415926535897932385\n\ndouble dist(int x, int y)\n{\n\treturn sqrt(x * x + y * y);\n}\n\ndouble angle(int x, int y)\n{\n\treturn atan2((double)(y), (double)(x));\n}\n\nint main()\n{\n\tint x0, y0, x1, y1, x2, y2, q;\n\n\tcin >> x0 >> y0 >> x1 >> y1 >> q;\n\n\tfor (int i = 0; i < q; i++)\n\t{\n\t\tcin >> x2 >> y2;\n\n\t\tint ax = x1 - x0;\n\t\tint ay = y1 - y0;\n\t\tint bx = x2 - x0;\n\t\tint by = y2 - y0;\n\n\t\tdouble ad = dist(ax, ay);\n\t\tdouble bd = dist(bx, by);\n\n\t\tdouble at = angle(ax, ay);\n\t\tdouble bt = angle(bx, by);\n\n\t\tdouble st = bt - at;\n\n\t\tif (st < -PI - EPS)\n\t\t{\n\t\t\tst += 2 * PI;\n\t\t}\n\n\t\tif (st > PI + EPS)\n\t\t{\n\t\t\tst -= 2 * PI;\n\t\t}\n\n\t\tif (bx == 0 && by == 0)\n\t\t{\n\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t}\n\t\telse if (by / bx == ay / ax)\n\t\t{\n\t\t\tif (ax * bx < 0 || ay * by < 0)\n\t\t\t{\n\t\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (ad < bd)\n\t\t\t\t{\n\t\t\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (st > EPS)\n\t\t{\n\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\t}\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<cstdlib>\n#include<cmath>\n#include<iostream>\n#include<vector>\n#include<algorithm>\n\nusing namespace std;\n\nint main()\n{\n\tdouble p1x, p1y, p2x, p2y, p0x, p0y;\n\tint q;\n\n\tscanf(\"%lf %lf %lf %lf\", &p0x, &p0y, &p1x, &p1y);\n\n\tpair<double, double> v01 = { p1x - p0x, p1y - p0y };\n\n\n\tscanf(\"%d\", &q);\n\n\tfor (int i = 0; i < q; i++)\n\t{\n\t\tscanf(\"%lf %lf\", &p2x, &p2y);\n\n\t\tif ((p2x == p0x && p2y == p0y) || (p2x == p1x && p2y == p0y)){\n\t\t\tprintf(\"ONLINE_SEGMENT\\n\");\n\n\t\t\tcontinue;\n\t\t}\n\n\t\tpair<double, double> v02 = { p2x - p0x, p2y - p0x };\n\n\t\tif (v01.first*v02.second == v01.second*v02.first)\n\t\t{\n\t\t\tif (v01.first*v02.first < 0)\n\t\t\t{\n\t\t\t\tprintf(\"ONLINE_BACK\\n\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tabs(v01.first) < abs(v02.first) ? printf(\"ONLINE_FRONT\\n\") : printf(\"ONLINE_SEGMENT\\n\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\n\t\tdouble y01 = (v01.second / v01.first)*(p2x - p0x) + p0y;\n\t\ty01 < p2y ? printf(\"COUNTER_CLOCKWISE\\n\") : printf(\"CLOCKWISE\\n\");\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "// Code by ajcxsu\n// Geometry template\n\n#include<bits/stdc++.h>\n#define EPS (1e-9)\nusing namespace std;\n\nstruct Point {\n    double x,y;\n    Point(double x=0,double y=0):x(x), y(y) {}\n\n    Point operator +(Point p) { return Point(x+p.x,y+p.y); }\n    Point operator -(Point p) { return Point(x-p.x,y-p.y); } // 加减\n    Point operator *(double a) { return Point(x*a,y*a); }\n    Point operator /(double a) { return Point(x/a,y/a); } // 数乘\n\n    double norm() { return x*x+y*y; } // 范数\n    double abs() { return sqrt(norm()); } // 大小\n\n    bool operator < (const Point &p) { return x!=p.x?x<p.x:y<p.y; }\n    bool operator == (const Point &p) { return fabs(p.x-x) < EPS && fabs(p.y-y) < EPS; }\n} ;\ntypedef Point Vector;\n\ndouble dot(const Point &a, const Point &b) {\n    return a.x*b.x+a.y*b.y;\n} // 内积\ndouble cross(const Point &a, const Point &b) {\n    return a.x*b.y-a.y*b.x;\n} // 外积\nbool equals(double a, double b) { return fabs(a-b)<EPS; } // 误差相等\n\nstruct Line {\n    Point p1,p2;\n} ;\ntypedef Line Seg;\n\n/* 1 正交 2 平行 0 其他 */\nint PO(Vector a, Vector b) {\n    if(equals(dot(a,b), 0)) return 1;\n    else if(equals(cross(a,b), 0)) return 2;\n    else return 0;\n}\nint PO(Line a, Line b) { // 正交、平行判定\n    return PO(a.p2-a.p1, b.p2-b.p1);\n}\n\nistream& operator >>(istream &in, Vector &a) {\n    in>>a.x>>a.y;\n    return in;\n}\nistream& operator >>(istream &in, Line &a) {\n    in>>a.p1>>a.p2;\n    return in;\n} // 输入重载\n\nPoint project(Point a, Seg b) {\n    Vector base=b.p2-b.p1;\n    Vector hypo=a-b.p1;\n    return b.p1+base*(dot(base, hypo)/ base.norm());\n} // 投影\n\nPoint ref(Point a, Seg b) {\n    Vector base=project(a,b)-a;\n    return a+base*2;\n} // 映像\n\nint ccw(Vector a, Vector b) {\n    if(cross(a,b)>EPS) return 1; // Counter clockwise\n    else if(cross(a,b)<-EPS) return -1; // Clockwise\n    else if(dot(a,b)<-EPS) return 2; // Online back\n    else if(a.norm()<b.norm()) return -2; // Online front\n    else return 0; // On segement\n}\n\nostream& operator <<(ostream &out, Vector a) {\n    out<<a.x<<' '<<a.y;\n    return out;\n} // 输出重载\n\nint main() {\n    cout.setf(ios::fixed);\n    cout<<setprecision(10); // 设置输出精度\n\n    Point p0,p1;\n    cin>>p0>>p1;\n    int q,ans;\n    cin>>q;\n    Vector a=p1-p0;\n    while(q--) {\n        Point p2;\n        cin>>p2;\n        ans=ccw(a,p2-p0);\n        if(ans==1) cout<<\"COUNTER_CLOCKWISE\"<<endl;\n        else if(ans==-1) cout<<\"CLOCKWISE\"<<endl;\n        else if(ans==2) cout<<\"ONLINE_BACK\"<<endl;\n        else if(ans==-2) cout<<\"ONLINE_FRONT\"<<endl;\n        else cout<<\"ON_SEGMENT\"<<endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cstring>\n#include <algorithm>\n#include <sstream>\n#include <map>\n#include <set>\n#include <cmath>\n\n#define REP(i,k,n) for(int i=k;i<n;i++)\n#define rep(i,n) for(int i=0;i<n;i++)\n#define INF 1<<30\n#define pb push_back\n#define mp make_pair\n#define EPS 1e-8\n#define equals(a,b) fabs((a) - (b)) < EPS\n\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> P;\n\nstruct Point {\n\tdouble x, y;\n\n\tPoint(double x=0, double y=0) : x(x), y(y) {}\n\n\tPoint operator+(const Point &o) const { return Point(x+o.x, y+o.y); }\n\n\tPoint operator-(const Point &o) const { return Point(x-o.x, y-o.y); }\n\n\tPoint operator*(const double m) const { return Point(x*m, y*m); }\n\n\tPoint operator/(const double d) const { return Point(x/d, y/d); }\n\n\tbool operator<(const Point &o) const { return x != o.x ? x < o.x : y < o.y; }\n\n\tbool operator==(const Point &o) const { return fabs(x-o.x) < EPS && fabs(y-o.y) < EPS; }\n};\n\nostream& operator << (ostream& os, const Point& p) {\n\tos << \"(\" << p.x << \", \" << p.y << \")\";\n\treturn os;\n}\n\ndouble dot(Point a, Point b) { return a.x * b.x + a.y * b.y; }\ndouble cross(Point a, Point b) { return a.x * b.y - a.y * b.x; }\ndouble atan(Point p) { return atan2(p.y, p.x); }\ndouble norm(Point p) { return p.x * p.x + p.y * p.y; }\ndouble distancePP(Point p, Point o) { return sqrt(norm(o - p)); }\n\nint ccw(Point a, Point b, Point c) {\n\tb = b-a;\n\tc = c-a;\n\n\tif(cross(b, c) > 0.0) return +1;\t//conter clockwise\n\tif(cross(b, c) < 0.0) return -1;\t//clockwise\n\tif(dot(b, c) < 0.0) return +2;\t//a on Seg(b,c)\n\tif(norm(b) < norm(c)) return -2;\t//b on Seg(a,c)\n\treturn 0;\t//c on Seg(a,b)\n}\n\nint main() {\n\tPoint a, b, c;\n\tcin >> a.x >> a.y >> b.x >> b.y;\n\n\tint q;\n\tcin >> q;\n\n\trep(i, q) {\n\t\tcin >> c.x >> c.y;\n\n\t\tint d = ccw(a, b, c);\n\t\tif(d == +1) {\n\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t} else if(d == -1) {\n\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\t} else if(d == +2) {\n\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t} else if(d == -2) {\n\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t} else if(d == 0) {\n\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t}\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cmath>\n#include<iomanip>\nusing namespace std;\n\nconst double EPS = 1e-10;\nbool equals(double a, double b) {\n\treturn fabs(a - b) < EPS;\n}\n\nclass Point {\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0): x(x), y(y) {}\n\n\tPoint operator + (Point p) {\n\t\treturn Point(x + p.x, y + p.y);\n\t}\n\tPoint operator - (Point p) {\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n\tPoint operator * (double k) {\n\t\treturn Point(k * x, k * y);\n\t}\n\tPoint operator / (double k) {\n\t\treturn Point(x / k, y / k);\n\t}\n\n\tdouble norm() {\n\t\treturn x * x + y * y;\n\t}\n\tdouble abs() {\n\t\treturn sqrt(norm());\n\t}\n\n\tbool operator < (const Point &p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p) const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b) {\n\treturn a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n\treturn a.x * b.y - a.y * b.x;\n}\n\nvoid check(Vector v0, Vector v1) {\n\tdouble c = cross(v0, v1);\n\tif (equals(c, 0)) {\n\t\tif (dot(v0, v1) < 0) cout << \"ONLINE_BACK\";\n\t\telse if (v1.norm() > v0.norm()) cout << \"ONLINE_FRONT\";\n\t\telse cout << \"ON_SEGMENT\";\n\t} else if (c > 0) {\n\t\tcout << \"COUNTER_CLOCKWISE\";\n\t} else {\n\t\tcout << \"CLOCKWISE\";\n\t}\n\tcout << endl;\n}\n\nint main() {\n\tint x0, y0, x1, y1, q;\n\tcin >> x0 >> y0 >> x1 >> y1 >> q;\n\tVector v0 = Vector(x1 - x0, y1 - y0);\n\tint x2, y2;\n\tfor (int i = 0; i < q; i++) {\n\t\tcin >> x2 >> y2;\n\t\tVector v1 = Vector(x2 - x0, y2 - y0);\n\t\tcheck(v0, v1);\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define ll  long long\n#define int long long\n#define inf 0x3f3f3f3f\n#define fi first\n#define se second\n#define pb push_back\n#define pa pair<int,int>\n#define mkp(a,b) make_pair(a,b)\nconst int N=2e5+10;\nconst int mod=998244353;\nusing namespace std;\n\nint cross(int x1,int y1,int x2,int y2){return x1*y2-x2*y1;}\nint dot(int x1,int y1,int x2,int y2){return x1*x2+y1*y2;}\nint32_t main()\n{\n   //ios::sync_with_stdio(0); cin.tie(0);cout.tie(0);\n   int32_t x1,y1,x2,y2; scanf(\"%d%d%d%d\",&x1,&y1,&x2,&y2);\n   int32_t q; scanf(\"%d\",&q);\n   while(q--)\n   {\n   \t  int32_t x,y; scanf(\"%d%d\",&x,&y);\n   \t  int p=cross(x-x1,y-y1,x2-x1,y2-y1);\n   \t  if(p<0) puts(\"COUNTER_CLOCKWISE\");\n   \t  else if(p>0) puts(\"CLOCKWISE\");\n   \t  else\n   \t  {\n   \t  \t if(dot(x1-x,y1-y,x2-x,y2-y)<=0) puts(\"ON_SEGMENT\");  \n   \t  \t else if(dot(x-x1,y-y1,x2-x1,y2-y1)<=0) puts(\"ONLINE_BACK\");\n   \t  \t else  puts(\"ONLINE_FRONT\");\n   \t  }\n   }\nreturn 0;\n}\n/*\n \n*/\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define TemplateVersion \"3.4.0\"\n// Useful Marcos\n//====================START=====================\n// Compile use C++11 and above\n#ifdef LOCAL\n#define debug(args...)                           \\\n    {                                            \\\n        string _s = #args;                       \\\n        replace(_s.begin(), _s.end(), ',', ' '); \\\n        stringstream _ss(_s);                    \\\n        istream_iterator<string> _it(_ss);       \\\n        err(_it, args);                          \\\n    }\nvoid err(istream_iterator<string> it)\n{\n}\ntemplate <typename T, typename... Args>\nvoid err(istream_iterator<string> it, T a, Args... args)\n{\n    cerr << *it << \" = \" << a << endl;\n    err(++it, args...);\n}\n#define MSG cout << \"Finished\" << endl\n#else\n#define debug(args...)\n#define MSG\n#endif\n#if __cplusplus >= 201703L\ntemplate <typename... Args>\nvoid readln(Args &... args)\n{\n    ((cin >> args), ...);\n}\ntemplate <typename... Args>\nvoid writeln(Args... args)\n{\n    ((cout << args << \" \"), ...);\n    cout << endl;\n}\n#elif __cplusplus >= 201103L\nvoid readln()\n{\n}\ntemplate <typename T, typename... Args>\nvoid readln(T &a, Args &... args)\n{\n    cin >> a;\n    readln(args...);\n}\nvoid writeln()\n{\n    cout << endl;\n}\ntemplate <typename T, typename... Args>\nvoid writeln(T a, Args... args)\n{\n    cout << a << \" \";\n    writeln(args...);\n}\n#endif\n#if __cplusplus >= 201103L\n#define FOR(_i, _begin, _end) for (auto _i = _begin; _i < _end; _i++)\n#define FORR(_i, _begin, _end) for (auto _i = _begin; _i > _end; _i--)\n#else\n#define FOR(_i, _begin, _end) for (int _i = (int)_begin; _i < (int)_end; _i++)\n#define FORR(_i, _begin, _end) for (int _i = (int)_begin; _i > (int)_end; _i--)\n#define nullptr NULL\n#endif\n#if __cplusplus >= 201103L\n#define VIS(_kind, _name, _size) \\\n    vector<_kind> _name(_size);  \\\n    for (auto &i : _name)        \\\n        cin >> i;\n#else\n#define VIS(_kind, _name, _size)    \\\n    vector<_kind> _name;            \\\n    _name.resize(_size);            \\\n    for (int i = 0; i < _size; i++) \\\n        cin >> _name[i];\n#endif\n// alias\n#define mp make_pair\n#define pb push_back\n#define eb emplace_back\n#define all(x) (x).begin(), (x).end()\n#define tcase() \\\n    int T;      \\\n    cin >> T;   \\\n    FOR(kase, 1, T + 1)\n// Swap max/min\ntemplate <typename T>\nbool smax(T &a, const T &b)\n{\n    if (a > b)\n        return false;\n    a = b;\n    return true;\n}\ntemplate <typename T>\nbool smin(T &a, const T &b)\n{\n    if (a < b)\n        return false;\n    a = b;\n    return true;\n}\n// ceil divide\ntemplate <typename T>\nT cd(T a, T b)\n{\n    return (a + b - 1) / b;\n}\n// min exchange\ntemplate <typename T>\nbool se(T &a, T &b)\n{\n    if (a < b)\n        return false;\n    swap(a, b);\n    return true;\n}\n// A better MAX choice\nconst int INF = 0x3f3f3f3f;\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int, int> pii;\ntypedef vector<int> vi;\ntypedef vector<ll> vll;\ntypedef set<int> si;\ntypedef vector<string> cb;\n//====================END=====================\n\n// Constants here\nconst double EPS = 1e-8;\nconst double PI = acos(-1);\n\ntypedef double db;\n\nint sgn(db x)\n{\n    if (abs(x) < EPS)\n        return 0;\n    if (x < 0)\n        return -1;\n    return 1;\n}\n\ninline db sqr(db x) { return x * x; }\n\n// Point/Vector\nstruct Point\n{\n    db x, y;\n\n    Point() : x(1e-18), y(1e-18) {}\n\n    Point(db _x, db _y) : x(_x + 1e-18), y(_y + 1e-18) {}\n\n    bool operator==(const Point &p)\n    {\n        return sgn(x - p.x) == 0 && sgn(y - p.y) == 0;\n    }\n\n    bool operator<(const Point &p)\n    {\n        int c = sgn(x - p.x);\n        if (c)\n            return c == -1;\n        return sgn(y - p.y) == -1;\n    }\n\n    Point operator+(const Point &p) { return Point(x + p.x, y + p.y); }\n    Point operator-(const Point &p) { return Point(x - p.x, y - p.y); }\n    Point operator*(db d) { return Point(x * d, y * d); }\n    Point operator/(db d) { return Point(x / d, y / d); }\n\n    db operator^(const Point &p) { return x * p.y - y * p.x; }\n    db operator*(const Point &p) { return x * p.x + y * p.y; }\n\n    db dis(const Point &p) { return (*this - p).len(); }\n    db alpha() { return atan2(y, x); }\n\n    Point unit() { return *this / len(); }\n\n    Point rotac() { return Point(-y, x); }\n    Point rotcl() { return Point(y, -x); }\n\n    Point rot(Point p, db angle)\n    {\n        Point v = *this - p;\n        db c = cos(angle), s = sin(angle);\n        return Point(p.x + v.x * c - v.y * s, p.y + v.x * s + v.y * c);\n    }\n\n    db len() { return hypot(x, y); }\n    db len2() { return x * x + y * y; }\n\n    db rad(Point a, Point b)\n    {\n        Point ap = a - *this, bp = b - *this;\n        return abs(atan2(abs(ap ^ bp), ap * bp));\n    }\n\n    void read() { cin >> x >> y; }\n    void write() { cout << '(' << x << \", \" << y << \")\\n\"; }\n};\n\n// Line\nstruct Line\n{\n    Point s, e;\n\n    Line(){};\n\n    Line(Point _s, Point _e) : s(_s), e(_e) {}\n\n    Line(Point p, db angle)\n    {\n        s = p;\n        if (sgn(angle - PI / 2))\n            e = (s + Point(1, tan(angle)));\n        else\n            e = (s + Point(0, 1));\n    }\n\n    //ax+by+c=0\n    Line(db a, db b, db c)\n    {\n        if (sgn(a) == 0)\n        {\n            s = Point(0, -c / b);\n            e = Point(1, -c / b);\n        }\n        else if (sgn(b) == 0)\n        {\n            s = Point(-c / a, 0);\n            e = Point(-c / a, 1);\n        }\n        else\n        {\n            s = Point(0, -c / b);\n            e = Point(1, -(c + a) / b);\n        }\n    }\n\n    db len() { return s.dis(e); }\n    db angle()\n    {\n        db ans = atan2(e.y - s.y, e.x - s.x);\n        if (sgn(ans) == -1)\n            ans += PI;\n        if (sgn(ans - PI) == 0)\n            ans -= PI;\n        return ans;\n    }\n\n    // 1 -> On Counter-clockwise\n    // 2 -> On Clockwise\n    // 3 -> On Line Back\n    // 4 -> On Line Front\n    // 5 -> On Segment\n    int relation(Point p)\n    {\n        Point x = p - s, y = e - s;\n        int c = sgn(x ^ y);\n        if (c < 0)\n            return 1;\n        if (c > 0)\n            return 2;\n        if (sgn(x * y) < 0)\n            return 3;\n        if (sgn((s - p) * (e - p)) > 0)\n            return 4;\n        return 5;\n    }\n\n    bool parallel(Line l) { return sgn((e - s) ^ (l.e - l.s)) == 0; }\n\n    // 0 -> Formal Intersection\n    // 1 -> Informal\n    // 2 -> Not Intersect\n    int crossSS(Line l)\n    {\n        int d1 = sgn((e - s) ^ (l.s - s));\n        int d2 = sgn((e - s) ^ (l.e - s));\n        int d3 = sgn((l.e - l.s) ^ (s - l.s));\n        int d4 = sgn((l.e - l.s) ^ (e - l.s));\n        if ((d1 ^ d2) == -2 && (d3 ^ d4) == -2)\n            return 2;\n        return (d1 == 0 && sgn((l.s - s) * (l.s - e)) <= 0) ||\n               (d2 == 0 && sgn((l.e - s) * (l.e - e)) <= 0) ||\n               (d3 == 0 && sgn((s - l.s) * (s - l.e)) <= 0) ||\n               (d4 == 0 && sgn((e - l.s) * (e - l.e)) <= 0);\n    }\n\n    // 0 -> Formal Intersection\n    // 1 -> Informal\n    // 2 -> Not Intersect\n    int crossLS(Line l)\n    {\n        int d1 = sgn((e - s) ^ (l.s - s));\n        int d2 = sgn((e - s) ^ (l.e - s));\n        if ((d1 ^ d2) == -2)\n            return 2;\n        return (d1 == 0 || d2 == 0);\n    }\n\n    // 0 -> Parallel\n    // 1 -> Same\n    // 2 -> Intersect\n    int crossLL(Line l)\n    {\n        if (this->parallel(l))\n            return l.relation(s) == 3;\n        return 2;\n    }\n\n    Point crossP(Line l)\n    {\n        db a1 = (l.e - l.s) ^ (s - l.s);\n        db a2 = (l.e - l.s) ^ (e - l.s);\n        return Point((s.x * a2 - e.x * a1) / (a2 - a1), (s.y * a2 - e.y * a1) / (a2 - a1));\n    }\n\n    db disPL(Point p) { return abs((p - s) ^ (e - s)) / len(); }\n    db disPS(Point p)\n    {\n        if (sgn((p - s) * (e - s)) < 0 || sgn((p - e) * (s - e)) < 0)\n            return min(p.dis(s), p.dis(e));\n        return disPL(p);\n    }\n    db disSS(Line l) { return min(min(disPS(l.s), disPS(l.e)), min(l.disPS(s), l.disPS(e))); }\n\n    Point proj(Point p) { return s + ((e - s) * ((e - s) * (p - s))) / ((e - s).len2()); }\n    Point refl(Point p)\n    {\n        Point q = proj(p);\n        return Point(2 * q.x - p.x, 2 * q.y - p.y);\n    }\n\n    bool operator==(Line l) { return s == l.s && e == l.e; }\n\n    void adjust()\n    {\n        if (e < s)\n            swap(s, e);\n    }\n\n    void read()\n    {\n        s.read();\n        e.read();\n    }\n\n    void write()\n    {\n        cout << \"Line:\\n\";\n        s.write();\n        e.write();\n    }\n};\n\n// Pre-Build Function\ninline void build()\n{\n}\n\n// Actual Solver\ninline void solve()\n{\n    Line l;\n    l.read();\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        Point p;\n        p.read();\n        int re = l.relation(p);\n        if (re == 1)\n            cout << \"COUNTER_CLOCKWISE\\n\";\n        else if (re == 2)\n            cout << \"CLOCKWISE\\n\";\n        else if (re == 3)\n            cout << \"ONLINE_BACK\\n\";\n        else if (re == 4)\n            cout << \"ONLINE_FRONT\\n\";\n        else\n            cout << \"ON_SEGMENT\\n\";\n    }\n}\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n    cout.tie(nullptr);\n\n#ifdef LOCAL\n    clock_t _begin = clock();\n#endif\n\n    build();\n    solve();\n\n#ifdef LOCAL\n    cerr << \"Time elapsed: \" << (double)(clock() - _begin) * 1000 / CLOCKS_PER_SEC << \"ms.\" << endl;\n#endif\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <stdio.h>\n\nusing namespace std;\n\n\nint main(void){\n\n    pair<double, double> p0, p1, p2;\n    int n;\n    cin >> p0.first >> p0.second >> p1.first >> p1.second;\n    cin >> n;\n\n    while(n--){\n        cin >> p2.first >> p2.second;\n        // ??????\n        double crossProduct = (p1.first - p0.first)*(p2.second - p0.second)\n            - (p1.second - p0.second)*(p2.first - p0.first);\n\n        if(crossProduct > 0){ // counter clockwise\n            cout << \"COUNTER_CLOCKWISE\" << endl;\n        }else if(crossProduct < 0){ // clockwise\n            cout << \"CLOCKWISE\" << endl;\n        }else{ // on line\n            // ??????\n            double innerProduct = (p1.first - p0.first)*(p2.first - p0.first)\n                + (p1.second - p0.second)*(p2.second - p0.second);\n            if(innerProduct > 0){ // ????????????\n                double a, b;\n                a = sqrt( pow(p1.first - p0.first, 2) + pow(p1.second - p0.second, 2) );\n                b = sqrt( pow(p2.first - p0.first, 2) + pow(p2.second - p0.second, 2) );\n                if(a >= b){\n                    cout << \"ON_SEGMENT\" << endl;\n                }else{\n                    cout << \"ONLINE_FRONT\" << endl;\n                }\n            }else if(innerProduct < 0){ // ?????????\n                cout << \"ONLINE_BACK\" << endl;\n            }\n        }\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "/*\nw2sc\n2019/12/19\n19:32:08\n*/\n#include <bits/stdc++.h>\n#define ull unsigned long long\n#define ll long long\nusing namespace std;\nconst double EPS=1e-10;\nstruct Point{\n    double x,y;\n    Point(){}\n    Point(double xx,double yy){x=xx,y=yy;}\n    Point operator -(Point A){return Point(x-A.x,y-A.y);}\n    Point operator +(Point A){return Point(x+A.x,y+A.y);}\n    double operator ^(Point A){return x*A.y-y*A.x;}\n    double operator *(Point A){return x*A.x+y*A.y;}\n    double len(){return sqrt(x*x+y*y);}\n};\ntypedef Point Vec;\nVec v,u;\nPoint A,B;\nint main()\n{\n    scanf(\"%lf%lf\",&A.x,&A.y);\n    scanf(\"%lf%lf\",&B.x,&B.y);\n    v=B-A;\n    int q;\n    cin>>q;\n    while(q--)\n    {\n        scanf(\"%lf%lf\",&B.x,&B.y);\n        u=B-A;\n        if((v^u)>EPS) puts(\"COUNTER_CLOCKWISE\");\n        else if((v^u)<-EPS) puts(\"CLOCKWISE\");\n        else if(u*v<-EPS) puts(\"ONLINE_BACK\");\n        else if(u.len()>v.len()) puts(\"ONLINE_FRONT\");\n        else puts(\"ON_SEGMENT\");\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <iostream>\n#include <limits>\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\nnamespace libcomp {\nnamespace geometry {\nstatic const double EPS = 1e-9;\ninline double abs(double x){ return std::abs(x); }\ninline bool tolerant_eq(double a, double b){ return abs(a - b) < EPS; }\n}\n}\nnamespace libcomp {\nnamespace geometry {\nstruct Point {\n\tdouble x;\n\tdouble y;\n\texplicit Point(const double &x = 0.0, const double &y = 0.0) :\n\t\tx(x), y(y)\n\t{ }\n\tstatic Point invalid(){\n\t\tdouble qnan = numeric_limits<double>::quiet_NaN();\n\t\treturn Point(qnan, qnan);\n\t}\n\tbool is_valid() const { return !(std::isnan(x) || std::isnan(y)); }\n\tPoint operator+(const Point &p) const { return Point(x + p.x, y + p.y); }\n\tPoint &operator+=(const Point &p){ return *this = *this + p; }\n\tPoint operator-(const Point &p) const { return Point(x - p.x, y - p.y); }\n\tPoint &operator-=(const Point &p){ return *this = *this - p; }\n\tPoint operator*(double s) const { return Point(x * s, y * s); }\n\tPoint &operator*=(double s){ return *this = *this * s; }\n\tPoint operator*(const Point &p) const {\n\t\treturn Point(x * p.x - y * p.y, x * p.y + y * p.x);\n\t}\n\tPoint &operator*=(const Point &p){ return *this = *this * p; }\n\tPoint operator/(double s) const { return Point(x / s, y / s); }\n\tPoint &operator/=(double s){ return *this = *this / s; }\n\tbool operator==(const Point &p) const { return x == p.x && y == p.y; }\n\tbool operator!=(const Point &p) const { return x != p.x || y != p.y; }\n\tbool operator<(const Point &p) const {\n\t\treturn (x == p.x) ? (y < p.y) : (x < p.x);\n\t}\n\tdouble abs() const { return sqrt(x * x + y * y); }\n\tdouble norm() const { return x * x + y * y; }\n\tPoint unit() const { return *this / abs(); }\n\tPoint ortho() const { return Point(-y, x); }\n};\ninline Point operator*(double s, const Point &p){ return p * s; }\ninline bool tolerant_eq(const Point &a, const Point &b){\n\treturn tolerant_eq(a.x, b.x) && tolerant_eq(a.y, b.y);\n}\ninline double cross(const Point &a, const Point &b){\n\treturn a.x * b.y - a.y * b.x;\n}\ninline double dot(const Point &a, const Point &b){\n\treturn a.x * b.x + a.y * b.y;\n}\ninline int ccw(const Point &a, const Point &b, const Point &c){\n\tPoint d = b - a, e = c - a;\n\tif(cross(d, e) > 0.0){ return 1; }\n\tif(cross(d, e) < 0.0){ return -1; }\n\tif(dot(d, e) < 0.0){ return 2; }\n\tif(d.abs() < e.abs()){ return -2; }\n\treturn 0;\n}\n}\n}\nnamespace geom = libcomp::geometry;\nconst char *TABLE[] = {\n\t\"ONLINE_FRONT\",\n\t\"CLOCKWISE\",\n\t\"ON_SEGMENT\",\n\t\"COUNTER_CLOCKWISE\",\n\t\"ONLINE_BACK\"\n};\nint main(){\n\tios_base::sync_with_stdio(false);\n\tgeom::Point a, b;\n\tcin >> a.x >> a.y >> b.x >> b.y;\n\tint T;\n\tcin >> T;\n\twhile(T--){\n\t\tgeom::Point c;\n\t\tcin >> c.x >> c.y;\n\t\tcout << TABLE[geom::ccw(a, b, c) + 2] << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cmath>\n#include <set>\n#include <algorithm>\n#include <array>\n#include <complex>\n#include <string>\n#include <utility>\n#include <map>\n#include <queue>\n#include <list>\n#include <functional>\n#include <numeric>\n#include <stack>\n#include <tuple>\n\nusing namespace std;\nint dx[4] = { -1,0,1,0 };\nint dy[4] = { 0,1,0,-1 };\nconst int INF = 100000000;\nconst long long LINF = 1000000000000000000;\nconst int MOD = (int)1e9 + 7;\nconst double EPS = 1e-6;\nusing pii = std::pair<int, int>;\nusing ll = long long;\nusing pLL = std::pair<ll, ll>;\n#define SORT(v) std::sort(v.begin(), v.end())\n#define RSORT(v) std::sort(v.rbegin(), v.rend())\nusing Point = complex<double>;\n\n#define X real()\n#define Y imag()\ndouble dot(Point a, Point b) {\n    return (a.X*b.X + a.Y*b.Y);\n}\nusing Line = pair<Point, Point>;\nPoint Projection(Line s, Point p) {\n    Point vase = s.second - s.first;\n    p -= s.first;\n    return s.first + dot(p, vase) / norm(vase)*vase;\n}\nPoint Reflection(Line s, Point p) {\n    return p + (Projection(s, p) - p) * 2.0;\n}\ndouble cross(Point a, Point b) {\n    return a.X*b.Y - a.Y*b.X;\n}\nint ccw(Point a, Point b, Point c) {\n    if (cross(b - a, c - a) > EPS)return 1;\n    if (cross(b - a, c - a) < -EPS)return -1;\n    if (dot(b - a, c - a) < -EPS)return 2;\n    if (abs(b-a)+EPS <abs(c-a))return -2;\n    return 0;\n}\nint main() {\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    Point p1, p2;\n    double x1, x2, y1, y2;\n    cin >> x1 >> y1 >> x2 >> y2;\n    p1 = Point(x1, y1);\n    p2 = Point(x2, y2);\n    Line l = Line(p1, p2);\n    int q;\n    cin >> q;\n    for (int i = 0; i < q; ++i) {\n        double xi, yi;\n        cin >> xi >> yi;\n        Point p = Point(xi, yi);\n        if (ccw(p1, p2, p) == 1)cout << \"COUNTER_CLOCKWISE\" << endl;\n        if (ccw(p1, p2, p) == -1)cout << \"CLOCKWISE\" << endl;\n        if (ccw(p1, p2, p) == 2)cout << \"ONLINE_BACK\" << endl;\n        if (ccw(p1, p2, p) == -2)cout << \"ONLINE_FRONT\" << endl;\n        if (ccw(p1, p2, p) == 0)cout << \"ON_SEGMENT\" << endl;\n    }\n    return 0;\n\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <cmath>\n\nusing namespace std;\n\ntemplate <typename T>\nstruct Vec2;\n\ntemplate <typename T>\nT SqrMagnitude(const Vec2<T>& v);\n\ntemplate <typename T>\nT Magnitude(const Vec2<T>& v);\n\ntemplate <typename T>\nT Dot(const Vec2<T>& v1, const Vec2<T>& v2);\n\n\ntemplate <typename T>\nstruct Vec2 {\n    T x, y;\n    Vec2() = default;\n    Vec2(T in_x, T in_y)\n        : x {in_x}, y {in_y} {};\n    Vec2(const Vec2&) = default;\n    Vec2(Vec2&&) = default;\n\n    Vec2 normalized() const{\n        T mag = Magnitude(*this);\n        return {x / mag, y / mag};\n    }\n\n    Vec2 normalize() {\n        T mag = Magnitude(*this);\n        return {x /= mag, y /= mag};\n    }\n\n    Vec2 operator-() {\n        return {-x, -y};\n    }\n\n    Vec2 operator+(const Vec2& rhs) const{\n        return {x + rhs.x, y + rhs.y};\n    }\n\n    Vec2 operator-(const Vec2& rhs) const{\n        return {x - rhs.x, y - rhs.y};\n    }\n\n    Vec2 operator*(T rhs) const{\n        return {x * rhs, y * rhs};\n    }\n\n    Vec2 operator/(T rhs) const{\n        return {x / rhs, y / rhs};\n    }\n\n    Vec2& operator+=(const Vec2& rhs) {\n        x += rhs.x;\n        y += rhs.y;\n        return *this;\n    }\n\n    Vec2& operator-=(const Vec2& rhs) {\n        x -= rhs.x;\n        y -= rhs.y;\n        return *this;\n    }\n\n    Vec2& operator*=(T rhs) {\n        x *= rhs;\n        y *= rhs;\n        return *this;\n    }\n\n    Vec2& operator/=(T rhs) {\n        x /= rhs;\n        y /= rhs;\n        return *this;\n    }\n};\n\ntemplate <typename T>\ninline Vec2<T> operator*(T s, const Vec2<T>& v) {\n    return {s * v.x, s * v.y};\n}\n\n\ntemplate <typename T>\ninline T SqrMagnitude(const Vec2<T>& v) {\n    return Dot(v, v);\n}\n\ntemplate <typename T>\ninline T Magnitude(const Vec2<T>& v) {\n    return sqrt(SqrMagnitude(v));\n}\n\ntemplate <typename T>\ninline T Dot(const Vec2<T>& v1, const Vec2<T>& v2) {\n    return v1.x * v2.x + v1.y * v2.y;\n}\n\ntemplate <typename T>\ninline T Cross(const Vec2<T>& v1, const Vec2<T>& v2) {\n    return v1.x * v2.y - v1.y *v2.x;\n}\n\nint main() {\n    constexpr long double tolerance = 1e-10;\n    using ld = long double;\n\n    Vec2<ld> p0, p1, p2;\n\n    cin >> p0.x >> p0.y >> p1.x >> p1.y;\n\n    int n;\n    cin >> n;\n\n    auto p_01 = p1 - p0;\n\n    for(int i = 0; i < n && cin >> p2.x >> p2.y; ++i) {\n        auto p_02 = p2 - p0;        \n\n        auto cross = Cross(p_01, p_02);\n\n        if(cross > 0) {\n            cout << \"COUNTER_CLOCKWISE\" << endl;\n        }\n        else if(cross < 0){\n            cout << \"CLOCKWISE\" << endl;\n        }\n        else {\n            auto dot {Dot(p_01, p_02)};\n            if(dot >= 0.0) {\n                cout << (dot >  Dot(p_01, p_01) ? \"ONLINE_FRONT\" : \"ON_SEGMENT\") << endl;\n            }\n            else {\n                cout << \"ONLINE_BACK\" << endl;\n            }\n            \n        }\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cctype>\n#include <utility>\n#include <complex>\nusing namespace std;\n\n#define _gp(l) const auto gcu{getchar##l}; const auto pcu{putchar##l}\n#ifdef __linux\n_gp(_unlocked);\n#else\n_gp();\n#endif\n#define _DEF(r, n, ...) inline r n(__VA_ARGS__) noexcept\n#define _T template <typename T>\n#define _HT template <typename H,typename... T>\n_T _DEF(T,in,int c){T n=0;int m=1;while(isspace(c)){c=gcu();}if(c=='-')m=-1,c=gcu();\n\tdo{n=10*n+(c-'0'),c=gcu();}while(c>='0'&&c<='9');return m*n;}\n_DEF(int,in,){return in<int>(gcu());}\n#define _SCAN(...) _DEF(bool,scan,__VA_ARGS__)\n_T _SCAN(T &n){int c=gcu();return c==EOF?n=0,false:(n=in<T>(c),true);}\n_SCAN(char &c){c=gcu();gcu();return c!=EOF;}\n#ifdef _GLIBCXX_STRING\n_SCAN(string &s){int c;s=\"\";\n\tfor(;;){c=gcu();if(c=='\\n'||c==' ')return true;else if(c==EOF)return false;s+=(char)c;}}\n#endif\n_HT _SCAN(H &h,T&&... t){return scan(h)&&scan(t...);}\n#define _OUT(...) _DEF(void,out,__VA_ARGS__)\n#define _OUTL(...) _DEF(void,outl,__VA_ARGS__)\n_OUT(bool b){pcu('0'+b);} _OUT(const char *s){while(*s)pcu(*s++);} _OUT(char c){pcu(c);}\n#ifdef _GLIBCXX_STRING\n_OUT(string s){for(char c:s)pcu(c);}\n#endif\n_T _OUT(T n){static char b[20];char *p=b;T m=n<0?pcu('-'),-1:1;\n\tif(!n)*p++='0';else while(n)*p++=(char)(n%10*m+'0'),n/=10;while(p!=b)pcu(*--p);}\n_OUTL(){out('\\n');}\n#ifdef _GLIBCXX_VECTOR\n_T _OUT(vector<T> v){for(T &x:v)out(&x == &v[0]?\"\":\" \"),out(x);}\n#endif\n_HT _OUT(H&& h, T&&... t){out(h);out(move(t)...);}\ntemplate <typename... T> _OUTL(T&&... t){out(move(t)...);outl();}\nstruct range{\n\tint e,b=0,s=1; range(int _b,int _e,int _s):e(_e),b(_b),s(_s){} range(int _b,int _e): e(_e), b(_b){} range(int _e):e(_e){}\n\tstruct it { int v, s; it (int _v, int _s) : v(_v), s(_s) {} operator int()const{return v;} operator int&(){return v;} int operator*()const{return v;}\n\t\tit& operator++(){v+=s;return *this;} }; it begin() {return {b, s};} it end() {return {e, s};}};\n\nusing P = complex<double>;\n\nP read() {\n\treturn P(in(), in());\n}\n\nint main() {\n\tP p0 {read()}, v1 {read() - p0};\n\tfor (int q {in()}; q; q--) {\n\t\tP v2 {read() - p0}, t = conj(v1) * v2;\n\t\toutl(imag(t) > 0 ?\n\t\t\t \"CLOCKWISE\" : imag(t) < 0 ?\n\t\t\t \"COUNTER_CLOCKWISE\" : real(t) < 0 ?\n\t\t\t \"ONLINE_BACK\" : abs(v1) < abs(v2) ?\n\t\t\t \"ONLINE_FRONT\" : \"ON_SEGMENT\");\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "// #define _GLIBCXX_DEBUG\n#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i, n) for (int i = 0; i < (int)(n); i++)\n#define all(v) v.begin(), v.end()\n#define Graph vector< vector<int> >\ntypedef long long ll;\ntypedef pair<int, int> P;\nconst int INF = 1000000007;\n\nconst double EPS = 1e-10;\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nstruct Point{\n    double x, y;\n    Point(){}\n    Point(double x0, double y0){\n        x = x0; y = y0;\n    }\n\n    Point operator +(const Point &p){\n        return Point(x + p.x, y + p.y);\n    }\n    Point operator -(const Point &p){\n        return Point(x - p.x, y - p.y);\n    }\n    Point operator *(const double &a){\n        return Point(a * x, a * y);\n    }\n    Point operator /(const double &a){\n        return Point(x / a, y / a);\n    }\n\n    bool operator == (const Point &p){\n        return equals(x, p.x) && equals(y, p.y);\n    }\n\n    bool operator < (const Point &p){\n        // if(x != p.x) return x < p.x;\n        // else return y < p.y; \n        return x != p.x ? x < p.x : y < p.y ;\n    }\n\n};\n\ndouble norm(Point p){\n    return p.x * p.x + p.y * p.y;\n}\n\ndouble v_abs(Point p){\n    return sqrt(norm(p));\n}\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b){\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b){\n    return a.x * b.y - a.y * b.x;\n}\n\nstruct Circle{\n    Point c;\n    double r;\n    Circle(){}\n    Circle(Point c0, double r0){\n        c.x = c0.x;\n        c.y = c0.y;\n        r = r0;\n    }\n    Circle(double x0, double y0, double r0){\n        c.x = x0;\n        c.y = y0;\n        r = r0;\n    }\n};\n\nint main(){\n    Point p0, p1;\n    cin >> p0.x >> p0.y;\n    cin >> p1.x >> p1.y;\n    int Q;\n    cin >> Q;\n    rep(i, Q){\n        Point p2;\n        cin >> p2.x >> p2.y;\n        Vector v1 = p1 - p0, v2 = p2 - p0;\n        if(cross(v1, v2) > EPS) cout << \"COUNTER_CLOCKWISE\" << endl;\n        else if (cross(v1, v2) < -EPS) cout << \"CLOCKWISE\" << endl;\n        // else {\n        //     double r;\n        //     if(equals(v2.y, 0.0)) r = v2.x / v1.x;\n        //     else r = v2.y / v1.y;\n        //     if(r < 0) cout << \"ONLINE_BACK\" << endl;\n        //     else if(r > 1) cout << \"ONLINE_FRONT\" << endl;\n        //     else cout << \"ON_SEGMENT\" << endl;\n        // }\n        else if (dot(v1, v2) < -EPS) cout << \"ONLINE_BACK\" << endl;\n        else if (norm(v2) > norm(v1)) cout << \"ONLINE_FRONT\" << endl;\n        else cout << \"ON_SEGMENT\" << endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <algorithm>\n#include <complex>\n\nusing namespace std;\n\ntypedef long double ldb;\ntypedef complex<ldb> P;\nstruct L {\n  P a,b;\n  L(){}\n  L(P a,P b):a(a),b(b){}\n  ldb len(){return abs(a-b);}\n  P vec(){return b-a;}\n};\n\nconst ldb eps = 1e-8;\nconst ldb pi = acos(-1);\nint sig(ldb a) {return (a<-eps)?-1:(a>eps)?1:0;}\nbool eq(ldb a,ldb b){return abs(a-b)<eps;}\nldb dot(P a, P b) {\n  return (a.real() * b.real() + a.imag() * b.imag());\n}\nldb cross(P a, P b) {\n  return (a.real() * b.imag() - a.imag() * b.real());\n}\nenum CCW{FRONT = 1, RIGHT = 2, BACK = 4, LEFT = 8, ON = 16};\nint ccw(L s, P p) {\n  P a = s.vec();\n  p -= s.a;\n  ldb cr = cross(a, p);\n  if (eq(cr, 0)) {\n    if (sig(dot(a, p)) < 0) return BACK;\n    if (sig(norm(a) - norm(p)) < 0) return FRONT;\n    return ON;\n  }\n  return (cr > 0) ? LEFT : RIGHT;\n}\n\nint main(void)\n{\n  ldb x,y;\n  P a,b;\n  L l;\n  scanf(\"%Lf%Lf\",&x,&y); a = P(x,y);\n  scanf(\"%Lf%Lf\",&x,&y); b = P(x,y);\n  l = L(a,b);\n  int q; scanf(\"%d\",&q);\n  for( int i = 0; i < q; i++ ) {\n    scanf(\"%Lf%Lf\",&x,&y);\n    int c = ccw(l,P(x,y));\n    if( c == LEFT ) {\n      puts(\"COUNTER_CLOCKWISE\");\n    }\n    if( c == RIGHT ) {\n      puts(\"CLOCKWISE\");\n    }\n    if( c == ON ) {\n      puts(\"ON_SEGMENT\");\n    }\n    if( c == FRONT ) {\n      puts(\"ONLINE_FRONT\");\n    }\n    if( c == BACK ) {\n      puts(\"ONLINE_BACK\");\n    }\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#pragma region Geometry\nconst double EPS=1e-8,PI=acos(-1);\ninline bool EQ(double a,double b){return fabs(b-a)<EPS;}\n\nstatic const int COUNTER_CLOCKWISE=1;\nstatic const int CLOCKWISE=-1;\nstatic const int ONLINE_BACK=2;\nstatic const int ONLINE_FRONT=-2;\nstatic const int ON_SEGMENT=0;\n\nstruct Point{\n    double x,y;\n    Point(){}\n    Point(double x,double y):x(x),y(y){}\n    Point operator+(Point p) const {return Point{x+p.x,y+p.y};}\n    Point operator-(Point p) const {return Point{x-p.x,y-p.y};}\n    Point operator*(double t) const {return Point{x*t,y*t};}\n    Point operator*(Point p) const {return Point{x*p.x-y*p.y,x*p.y+y*p.x};}\n    Point operator/(double t) const {return Point{x/t,y/t};}\n    bool operator<(const Point &p) const {\n        return x!=p.x?x<p.x:y<p.y;\n    }\n    bool operator==(const Point &p) const {\n        return fabs(x-p.x)<EPS&&fabs(y-p.y)<EPS;\n    }\n    friend istream &operator>>(istream &is,Point &p){\n        is >> p.x >> p.y;\n        return is;\n    }\n    friend ostream &operator<<(ostream &os,Point p){\n        os << fixed << setprecision(10) << p.x << ' ' << p.y;\n        return os;\n    }\n};\n\nstruct Line{\n    Point a,b;\n    Line(){}\n    Line(Point a,Point b):a(a),b(b){}\n    friend istream &operator>>(istream &is,Line &l){\n        is >> l.a >> l.b;\n        return is;\n    }\n    friend ostream &operator<<(ostream &os,Line l){\n        os << l.a << \" to \" << l.b;\n        return os;\n    }\n};\n\nstruct Segment:Line{\n    Segment(){}\n    Segment(Point a,Point b):Line(a,b){}\n};\n\nstruct Circle{\n    Point c;\n    double r;\n    Circle(){}\n    Circle(Point c,double r):c(c),r(r){}\n    friend istream &operator>> (istream &is,Circle &c){\n        is >> c.c >> c.r;\n        return is;\n    }\n    friend ostream &operator<<(ostream &os,Circle &c){\n        os << c.c << ' ' << c.r;\n        return os;\n    }\n};\n\ntypedef vector<Point> Polygon;\nistream &operator>>(istream &is,Polygon &p){\n    for (int i=0;i<p.size();++i) is >> p[i];\n    return is;\n}\n\ndouble dot(const Point &a,const Point &b){\n    return a.x*b.x+a.y*b.y;\n}\ndouble cross(const Point &a,const Point &b){\n    return a.x*b.y-a.y*b.x;\n}\ndouble norm(const Point &a){\n    return a.x*a.x+a.y*a.y;\n}\ndouble abs(const Point &a){\n    return sqrt(norm(a));\n}\n\n// https://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/1/CGL_1_A\nPoint proj(const Line &l,const Point &p){\n    double t=dot(p-l.a,l.b-l.a)/norm(l.b-l.a);\n    return l.a+(l.b-l.a)*t;\n}\n// https://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/1/CGL_1_B\nPoint refl(const Line &l,const Point &p){\n    return p+(proj(l,p)-p)*2.0;\n}\n\nPoint rotate(const Point &p,double theta){\n    return Point(cos(theta)*p.x-sin(theta)*p.y,sin(theta)*p.x+cos(theta)*p.y);\n}\ndouble arg(const Point &p){\n    return atan2(p.y,p.x);\n}\ndouble get_angle(const Point &a,const Point &b,const Point &c){\n    const Point v=b-a,w=c-b;\n    double alpha=arg(v),beta=arg(w);\n    if (alpha>beta) swap(alpha,beta);\n    double theta=beta-alpha;\n    return min(theta,2*PI-theta);\n}\n\nint ccw(const Point &a,Point b,Point c){\n    b=b-a,c=c-a;\n    if (cross(b,c)>EPS) return COUNTER_CLOCKWISE;\n    if (cross(b,c)<-EPS) return CLOCKWISE;\n    if (dot(b,c)<-EPS) return ONLINE_BACK;\n    if (norm(b)<norm(c)) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\nbool orthogonal(const Point &a,const Point &b){\n    return EQ(dot(a,b),0.0);\n}\nbool orthogonal(const Point &a,const Point &b,const Point &c,const Point &d){\n    return orthogonal(b-a,d-c);\n}\nbool orthogonal(const Line &l,const Line &m){\n    return EQ(dot(l.b-l.a,m.b-m.a),0.0);\n}\nbool parallel(const Point &a,const Point &b){\n    return EQ(cross(a,b),0.0);\n}\nbool parallel(const Point &a,const Point &b,const Point &c,const Point &d){\n    return parallel(b-a,d-c);\n}\nbool parallel(const Line &l,const Line &m){\n    return EQ(cross(l.b-l.a,m.b-m.a),0.0);\n}\n\nbool intersect(const Line &l,const Point &p){\n    return abs(ccw(l.a,l.b,p))!=1;\n}\nbool intersect(const Line &l,const Line &m){\n    return abs(cross(l.b-l.a,m.b-m.a)>EPS||abs(cross(l.b-l.a,m.b-m.a))<EPS);\n}\nbool intersect(const Line &l,const Segment &s){\n    return cross(l.b-l.a,s.a-l.a)*cross(l.b-l.a,s.b-l.a)<EPS;\n}\nbool intersect(const Segment &s,const Point &p){\n    return ccw(s.a,s.b,p)==0;\n}\nbool intersect(const Segment &s,const Segment &t){\n    return ccw(s.a,s.b,t.a)*ccw(s.a,s.b,t.b)<=0&&ccw(t.a,t.b,s.a)*ccw(t.a,t.b,s.b)<=0;\n}\nbool intersect(const Circle &c,const Line &l){\n    return (norm(proj(l,c.c)-c.c)-c.r*c.r)<=EPS;\n}\nint intersect(const Circle &c,const Segment &s){\n    if (norm(proj(s,c.c)-c.c)-c.r*c.r>EPS) return 0;\n    double d1=abs(c.c-s.a),d2=abs(c.c-s.b);\n    if (d1<c.r+EPS&&d2<c.r+EPS) return 0;\n    if (d1<c.r-EPS&&d2>c.r+EPS||d1>c.r+EPS&&d2<c.r-EPS) return 1;\n    const Point h=proj(s,c.c);\n    if (dot(s.a-h,s.b-h)<0) return 2;\n    return 0;\n}\nint intersect(Circle c,Circle d){\n    if (c.r<d.r) swap(c,d);\n    double dist=abs(c.c-d.c);\n    if (c.r+d.r<dist) return 4;\n    if (EQ(c.r+d.r,dist)) return 3;\n    if (c.r-d.r<dist) return 2;\n    if (EQ(c.r-d.r,dist)) return 1;\n    return 0;\n}\n\ndouble distance(const Point &a,const Point &b){\n    return abs(b-a);\n}\ndouble distance(const Line &l,const Point &p){\n    return abs(p-proj(l,p));\n}\ndouble distance(const Line &l,const Line &m){\n    return intersect(l,m)?0:distance(l,m.a);\n}\ndouble distance(const Segment &s,const Point &p){\n    Point h=proj(s,p);\n    return intersect(s,h)?abs(h-p):min(abs(s.a-p),abs(s.b-p));\n}\ndouble distance(const Segment &s,const Segment &t){\n    if (intersect(s,t)) return 0;\n    return min({distance(s,t.a),distance(s,t.b),distance(t,s.a),distance(t,s.b)});\n}\ndouble distance(const Line &l,const Segment &s){\n    return intersect(l,s)?0:min(distance(l,s.a),distance(l,s.b));\n}\n\nPoint crosspoint(const Line &l,const Line &m){\n    double d1=cross(l.b-l.a,m.b-m.a),d2=cross(l.b-l.a,l.b-m.a);\n    if (EQ(abs(d1),0.0)&&EQ(abs(d2),0.0)) return m.a;\n    return m.a+(m.b-m.a)*d2/d1;\n}\nPoint crosspoint(const Segment &s,const Segment &t){\n    assert(intersect(s,t));\n    return crosspoint(Line(s),Line(t));\n}\nvector<Point> crosspoint(const Circle &c,const Line &l){\n    Point pr=proj(l,c.c);\n    Point e=(l.b-l.a)/abs(l.b-l.a);\n    if (EQ(distance(l,c.c),c.r)) return {pr};\n    double base=sqrt(c.r*c.r-norm(pr-c.c));\n    return {pr-e*base,pr+e*base};\n}\nvector<Point> crosspoint(const Circle &c,const Segment &s){\n    Line l=Line(s);\n    assert(intersect(c,l));\n    auto res=crosspoint(c,l);\n    if (intersect(c,l)==2) return res;\n    if (dot(l.a-res[0],l.b-res[0])<0) res.emplace_back(res[0]);\n    else res.pop_back();\n    return res;\n}\nvector<Point> crosspoint(const Circle &c,const Circle &d){\n    double dist=abs(c.c-d.c);\n    double a=acos((c.r*c.r+dist*dist-d.r*d.r)/(2*c.r*dist));\n    double t=arg(d.c-c.c);\n    Point p1=c.c+Point(cos(t+a),sin(t+a))*c.r,p2=c.c+Point(cos(t-a),sin(t-a))*c.r;\n    return {p1,p2};\n}\n\nCircle circumcenter(Point a,Point b,const Point &c){\n    a=(a-c)*0.5;\n    b=(b-c)*0.5;\n    Point center=c+crosspoint(Line(a,a*Point{1,1}),Line{b,b*Point{1,1}});\n    return Circle{center,abs(a-center)};\n}\nvector<Point> center_given_radius(const Point &a,const Point &b,const double &r){\n    Point m=(b-a)*0.5;\n    double d1=abs(m);\n    vector<Point> res;\n    if (EQ(d1,0.0)||d1>r) return res;\n    double d2=sqrt(r*r-d1*d1);\n    Point n=m*Point{0.0,1.0}*d2/d1;\n    res.emplace_back(a+m+n);\n    if (d2>EPS) res.emplace_back(a+m-n);\n    return res;\n}\n\nbool convex(const Polygon &p){\n    int n=p.size();\n    for (int i=0;i<n;++i){\n        if (ccw(p[(i+n-1)%n],p[i],p[(i+1)%n])==-1){\n            return false;\n        }\n    }\n    return true;\n}\n\nPolygon convex_hull(Polygon p){\n    int n=p.size(),k=0;\n    if (n<=2) return p;\n    sort(p.begin(),p.end());\n    Polygon ch(2*n);\n    for (int i=0;i<n;ch[k++]=p[i++]){\n        while(k>=2&&cross(ch[k-1]-ch[k-2],p[i]-ch[k-1])<EPS) --k;\n    }\n    for (int i=n-2,t=k+1;i>=0;ch[k++]=p[i--]){\n        while(k>=t&&cross(ch[k-1]-ch[k-2],p[i]-ch[k-1])<EPS) --k;\n    }\n    ch.resize(k-1);\n    return ch;\n}\n\n#pragma endregion\n\nint main(){\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    Point p0,p1; cin >> p0 >> p1;\n    int q; cin >> q;\n    for (;q--;){\n        Point p2; cin >> p2;\n        int res=ccw(p0,p1,p2);\n        if (res==1) cout << \"COUNTER_CLOCKWISE\" << '\\n';\n        else if (res==-1) cout << \"CLOCKWISE\" << '\\n';\n        else if (res==2) cout << \"ONLINE_BACK\" << '\\n';\n        else if (res==-2) cout << \"ONLINE_FRONT\" << '\\n';\n        else cout << \"ON_SEGMENT\" << '\\n';\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<iomanip>\n#include<algorithm>\n#define _USE_MATH_DEFINES\n#include<math.h>\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS )\nusing namespace std;\n\nclass Point {\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0) :x(x), y(y) {}\n\tPoint operator + (Point p) {\n\t\treturn Point(x + p.x, y + p.y); \n\t}\n\tPoint operator - (Point p) {\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n\tPoint operator * (double a) {\n\t\treturn Point(a * x, a * y);\n\t}\n\tPoint operator / (double a) {\n\t\treturn Point(x / a, y / a);\n\t}\n\n\tdouble abs() {\n\t\treturn sqrt(norm());\n\t}\n\tdouble norm() {\n\t\treturn x * x + y * y;\n\t}\n\n\tbool operator < (const Point &p)const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p)const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b);\ndouble cross(Vector a, Vector b);\ndouble getDistanceSP(Point p, Point p1, Point p2);\ndouble angle(Vector a, Vector b);\nbool doIntersect(Point p1, Point p2, Point p3, Point p4);\ndouble getDistanceSS(Point p1, Point p2, Point p3, Point p4);\nvoid clockwise(Point p0, Point p1, Point p2);\n\nint main() {\n    int i, q;\n\tdouble x0, x1, x2, y0, y1, y2;\n\tcin >> x0 >> y0 >> x1 >> y1;\n\tPoint p0(x0, y0), p1(x1, y1);\n\tcin >> q;\n\tfor (i = 0; i < q; i++) {\n\t\tcin >> x2 >> y2;\n\t\tPoint p2(x2, y2);\n\t\tclockwise(p0, p1, p2);\n\t}\n\treturn 0;\n}\n\ndouble dot(Vector a, Vector b) {\n\treturn a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n\treturn a.x * b.y - a.y * b.x;\n}\n\ndouble getDistanceSP(Point p, Point p1, Point p2) {\n\tif (dot(p - p1, p2 - p1) < 0.0)return (p - p1).abs();\n\telse if (dot(p - p2, p1 - p2) < 0.0)return (p - p2).abs();\n\telse return  fabs(cross(p2 - p1, p - p1)) / (p2 - p1).abs();\n}\n\n\ndouble angle(Vector a, Vector b) {\n\tif (equals(dot(a, b), a.abs() * b.abs()))return 0.0;\n\telse if (equals(dot(a, b), (-1) * a.abs() * b.abs()))return M_PI;\n\tif (cross(a, b) > 0.0)return acos(dot(a, b) / a.abs() / b.abs());\n\telse return (-1) * acos(dot(a, b) / a.abs() / b.abs());\n}\n\nbool doIntersect(Point p1, Point p2, Point p3, Point p4) {\n\tif ((equals(fabs(angle(p2 - p1, p4 - p1)), 0) || equals(fabs(angle(p2 - p1, p4 - p1)), M_PI)) && (equals(fabs(angle(p2 - p1, p3 - p1)), 0) || equals(fabs(angle(p2 - p1, p3 - p1)), M_PI)))return false;\n\telse if (angle(p3 - p1, p4 - p1) >= angle(p3 - p1, p2 - p1) && angle(p3 - p1, p2 - p1) >= 0.0 && angle(p2 - p3, p1 - p3) >= angle(p2 - p3, p4 - p3) && angle(p2 - p3, p4 - p3) >= 0.0)return true;\n\telse if (angle(p3 - p2, p4 - p2) >= angle(p3 - p2, p1 - p2) && angle(p3 - p2, p1 - p2) >= 0.0 && angle(p1 - p3, p2 - p3) >= angle(p1 - p3, p4 - p3) && angle(p1 - p3, p4 - p3) >= 0.0)return true;\n\telse return false;\n}\n\ndouble getDistanceSS(Point p1, Point p2, Point p3, Point p4) {\n\tif (doIntersect(p1, p2, p3, p4))return 0;\n\telse return min({ getDistanceSP(p4, p1, p2), getDistanceSP(p3, p1, p2), getDistanceSP(p1, p3, p4), getDistanceSP(p2, p3, p4) });\n}\n\nvoid clockwise(Point p0, Point p1, Point p2) {\n\tif (p2 == p0 || p2 == p1) {\n\t\tcout << \"ON_SEGMENT\" << endl;\n\t} else if (angle(p1 - p0, p2 - p0) == 0.0) {\n\t\tif((p1 - p0).norm() < (p2 - p0).norm())cout << \"ONLINE_FRONT\" << endl;\n\t\telse cout << \"ON_SEGMENT\" << endl;\n\t} else if(angle(p1 - p0, p2 - p0) == M_PI){\n\t\tcout << \"ONLINE_BACK\" << endl;\n\t} else {\n\t\tif(angle(p1 - p0, p2 - p0) > 0.0)cout << \"COUNTER_CLOCKWISE\" << endl;\n\t\telse cout << \"CLOCKWISE\" << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "//\n// ccw\n//\n// verified:\n//   AOJ Course CGL_1_C Points/Vectors - Counter-Clockwise\n//     http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_C&lang=jp\n\n\n#include <iostream>\n#include <vector>\n#include <cmath>\n#include <iomanip>\nusing namespace std;\n\n\n////////////////////////////\n// 基本要素 (点)\n////////////////////////////\n\nusing DD = double;\nconst DD INF = 1LL<<60;      // to be set appropriately\nconst DD EPS = 1e-10;        // to be set appropriately\nconst DD PI = acos(-1.0);\nDD torad(int deg) {return (DD)(deg) * PI / 180;}\nDD todeg(DD ang) {return ang * 180 / PI;}\n\n/* Point */\nstruct Point {\n    DD x, y;\n    Point(DD x = 0.0, DD y = 0.0) : x(x), y(y) {}\n    friend ostream& operator << (ostream &s, const Point &p) {return s << '(' << p.x << \", \" << p.y << ')';}\n};\ninline Point operator + (const Point &p, const Point &q) {return Point(p.x + q.x, p.y + q.y);}\ninline Point operator - (const Point &p, const Point &q) {return Point(p.x - q.x, p.y - q.y);}\ninline Point operator * (const Point &p, DD a) {return Point(p.x * a, p.y * a);}\ninline Point operator * (DD a, const Point &p) {return Point(a * p.x, a * p.y);}\ninline Point operator * (const Point &p, const Point &q) {return Point(p.x * q.x - p.y * q.y, p.x * q.y + p.y * q.x);}\ninline Point operator / (const Point &p, DD a) {return Point(p.x / a, p.y / a);}\ninline Point conj(const Point &p) {return Point(p.x, -p.y);}\ninline Point rot(const Point &p, DD ang) {return Point(cos(ang) * p.x - sin(ang) * p.y, sin(ang) * p.x + cos(ang) * p.y);}\ninline Point rot90(const Point &p) {return Point(-p.y, p.x);}\ninline DD cross(const Point &p, const Point &q) {return p.x * q.y - p.y * q.x;}\ninline DD dot(const Point &p, const Point &q) {return p.x * q.x + p.y * q.y;}\ninline DD norm(const Point &p) {return dot(p, p);}\ninline DD abs(const Point &p) {return sqrt(dot(p, p));}\ninline DD amp(const Point &p) {DD res = atan2(p.y, p.x); if (res < 0) res += PI*2; return res;}\ninline bool eq(const Point &p, const Point &q) {return abs(p - q) < EPS;}\ninline bool operator < (const Point &p, const Point &q) {return (abs(p.x - q.x) > EPS ? p.x < q.x : p.y < q.y);}\ninline bool operator > (const Point &p, const Point &q) {return (abs(p.x - q.x) > EPS ? p.x > q.x : p.y > q.y);}\ninline Point operator / (const Point &p, const Point &q) {return p * conj(q) / norm(q);}\n\n\n// 粗\n// 1：a-bから見てcは左側(反時計回り)、-1：a-bから見てcは右側(時計回り)、0：一直線上\nint simple_ccw(const Point &a, const Point &b, const Point &c) {\n    if (cross(b-a, c-a) > EPS) return 1;\n    if (cross(b-a, c-a) < -EPS) return -1;\n    return 0;\n}\n\n// 精\n// 1：a-bから見てcは左側(反時計回り)、-1：a-bから見てcは右側(時計回り)\n// 2：c-a-bの順に一直線上、-2：a-b-cの順に一直線上、0：a-c-bの順に一直線上\nint ccw(const Point &a, const Point &b, const Point &c) {\n    if (cross(b-a, c-a) > EPS) return 1;\n    if (cross(b-a, c-a) < -EPS) return -1;\n    if (dot(b-a, c-a) < -EPS) return 2;\n    if (norm(b-a) < norm(c-a) - EPS) return -2;\n    return 0;\n}\n\n// 点と三角形の包含関係(辺上については判定していない)\nbool is_contain(const Point &p, const Point &a, const Point &b, const Point &c) {\n    int r1 = simple_ccw(p, b, c), r2 = simple_ccw(p, c, a), r3 = simple_ccw(p, a, b);\n    if (r1 == 1 && r2 == 1 && r3 == 1) return true;\n    if (r1 == -1 && r2 == -1 && r3 == -1) return true;\n    return false;\n}\n\n\nint main() {\n    Point a, b, c;\n    cin >> a.x >> a.y >> b.x >> b.y;\n    int N; cin >> N;\n    for (int _ = 0; _ < N; ++_) {\n        cin >> c.x >> c.y;\n        int type = ccw(a, b, c);\n        switch (type) {\n            case 1: {cout << \"COUNTER_CLOCKWISE\" << endl; continue; }\n            case -1: {cout << \"CLOCKWISE\" << endl; continue; }\n            case 2: {cout << \"ONLINE_BACK\" << endl; continue; }\n            case -2: {cout << \"ONLINE_FRONT\" << endl; continue; }\n            case 0: {cout << \"ON_SEGMENT\" << endl; continue; }\n        }\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nconst int dx[]={0,1,0,-1,1,-1,-1,1};\nconst int dy[]={-1,0,1,0,1,1,-1,-1};\nconst int INF = 1<<30;\nconst double EPS = 1e-15;\n#define PB push_back\n#define mk make_pair\n#define fi first\n#define se second\n#define ll long long\n#define reps(i,j,k) for(int i = (j); i < (k); i++)\n#define rep(i,j) reps(i,0,j)\n#define MOD 1000000007\ntypedef pair<int,int> Pii;\ntypedef pair<int,Pii> P;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\nstruct Point{\n\tdouble x,y;\n\tPoint(){}\n\tPoint(double _x,double _y){\n\t\tx = _x;\n\t\ty = _y;\n\t}\n\tPoint operator + (Point p){\n\t\treturn Point(x+p.x,y+p.y);\n\t}\n\n\tPoint operator - (Point p){\n\t\treturn Point(x-p.x,y-p.y);\n\t}\n\n\tPoint operator * (double k){\n\t\treturn Point(k*x,k*y);\n\t}\n\n\n\tbool operator<(const Point &p)const{\n\t\treturn x!=p.x?x<p.x:y<p.y;\n\t}\n\n\tPoint& operator=(Point p){\n\t\tx = p.x;\n\t\ty = p.y;\n\t\treturn *this;\n\t}\n\n\tPoint& operator-=(Point p){\n\t\tx -= p.x;\n\t\ty -= p.y;\n\t\treturn *this;\n\t}\t\n};\ndouble dot(Point p, Point q){\n\treturn p.x*q.x+p.y*q.y;\n}\n\ndouble cross(Point p,Point q){\n\treturn p.x*q.y-q.x*p.y;\n}\n\ndouble norm(Point p){\n\treturn p.x*p.x+p.y*p.y;\n}\n\ndouble pabs(Point p){\n\treturn sqrt(norm(p));\n}\ntypedef vector<Point> Polygon;\nstruct Line : Polygon{\n\tLine(){}\n\tLine(Point p,Point q){\n\t\tPB(p);\n\t\tPB(q);\t\n\t}\n};\nstruct Circle{\n\tPoint p;\n\tdouble r;\n\tCircle(){}\n\tCircle(Point _p,double _r){\n\t\tp = _p;\n\t\tr = _r;\n\t}\n};\nint ccw(Point a,Point b,Point c){\n\tb = b-a;\n\tc = c-a;\n\tif(cross(b,c) > 0)return +1; //ccw\n\tif(cross(b,c) < 0)return -1; //cw\n\tif(dot(b,c) < 0)return +2; // c--a--b;\n\tif(pabs(b)<pabs(c))return -2; //a--b--c\n\treturn 0;\n}\n\nstring ccw_s(Point a,Point b,Point c){\n\tb -= a;\n\tc -= a;\n\tif(cross(b,c) > 0)return \"COUNTER_CLOCKWISE\"; //ccw\n\tif(cross(b,c) < 0)return \"CLOCKWISE\"; //cw\n\tif(dot(b,c) < 0)return \"ONLINE_BACK\"; // c--a--b;\n\tif(norm(b)<norm(c))return \"ONLINE_FRONT\"; //a--b--c\n\treturn \"ON_SEGMENT\"; //\n}\n\nint main(){\n\tdouble xp0,yp0,xp1,yp1;\n\tcin >> xp0 >> yp0 >> xp1 >> yp1;\n\tPoint p1 = Point(xp0,yp0);\n\tPoint p2 = Point(xp1,yp1);\n\tint Q;\n\tcin >> Q;\n\twhile(Q--){\n\t\tdouble x,y;\n\t\tcin >> x >> y;\n\t\tPoint p3 = Point(x,y);\n\t\tcout << ccw_s(p1,p2,p3) << \"\\n\";\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\n\nusing namespace std;\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a)-(b)) < EPS)\n\nclass Point{\npublic:\n\tdouble x, y;\n\tPoint(double _x = 0, double _y = 0) :x(_x), y(_y){};\n\n\tPoint operator+(const Point &p){ return Point(x + p.x, y + p.y); }\n\tPoint operator-(const Point &p){ return Point(x - p.x, y - p.y); }\n\tPoint operator*(const Point &p){ return Point(x * p.x, y * p.y); }\n\tPoint operator*(double k){ return Point(x * k, y * k); }\n\tPoint operator/(const Point &p){ return Point(x / p.x, y / p.y); }\n\n\tdouble norm() { return x*x + y*y; }\n\tdouble abs() { return sqrt(norm()); }\n\n\tbool operator<(const Point &p) const{\n\t\treturn (x != p.x) ? (x < p.x) : (y < p.y);\n\t}\n\n\tbool operator==(const Point &p){\n\t\treturn equals(x, p.x) && equals(y, p.y);\n\t}\n};\n\ntypedef Point Vector;\nstruct Segment{\n\tPoint p1, p2;\n};\n\ndouble dot(Vector a, Vector b){\n\tdouble res = a.x*b.x + a.y*b.y;\n\treturn res;\n}\n\ndouble cross(Vector a, Vector b){\n\tdouble res = a.x*b.y - a.y*b.x;\n\treturn res;\n}\n\nbool isOrthogonal(Vector a, Vector b){\n\treturn equals(dot(a, b), 0.0);\n}\n\nbool isParallel(Vector a, Vector b){\n\treturn equals(cross(a, b), 0.0);\n}\n\nPoint project(Segment s, Point p){\n\tVector base = s.p2 - s.p1;\n\tVector v = p - s.p1;\n\tdouble l = dot(v, base) / base.norm();\n\treturn s.p1 + base * l;\n}\n\nint ccw(Point p0, Point p1, Point p2){\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\n\tif (cross(a, b) < -EPS) return CLOCKWISE;\n\tif (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif (dot(a, b) < -EPS) return ONLINE_BACK;\n\tif (a.norm() < b.norm()) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\n\nint main(){\n\tPoint p0, p1, p2;\n\tcin >> p0.x >> p0.y >> p1.x >> p1.y;\n\tint n; cin >> n;\n\tfor (int i = 0; i < n; ++i){\n\t\tcin >> p2.x >> p2.y;\n\t\tint res = ccw(p0, p1, p2);\n\t\tswitch (res)\n\t\t{\n\t\tcase CLOCKWISE:\n\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\t\tbreak;\n\t\tcase COUNTER_CLOCKWISE:\n\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t\tbreak;\n\t\tcase ONLINE_FRONT:\n\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t\tbreak;\n\t\tcase ONLINE_BACK:\n\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t\tbreak;\n\t\tcase ON_SEGMENT:\n\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\nusing namespace std;\n\ntypedef long long ll;\ndouble pi=3.14159265359; //円周率\ndouble EPS = 1e-10; //誤差\n\nclass point\n{\n\tpublic:\n\tdouble x,y;\n\n\tpoint()\n\t{x=0;y=0;}\n\t//コンストラクタ\n\tpoint(double a,double b)\n\t{\n\t\tx=a;y=b;\n\t}\n\n\t//足し算\n\tpoint operator + (point p)\n\t{\n\t\treturn point(x+p.x,y+p.y);\n\t}\n\t//引き算\n\tpoint operator - (point p)\n\t{\n\t\treturn point(x-p.x,y-p.y);\n\t}\n\t//d倍\n\tpoint operator * (double d)\n\t{\n\t\treturn point(x*d,y*d);\n\t}\n\t//x座標昇順でソートする\n\tbool operator < (const point &p)\n\tconst {\n\t\tif(std::abs(x-p.x)>EPS)\n\t\t\treturn x<p.x;\n\t\telse\n\t\t\treturn y<p.y;\n\t}\n\t//内積\n\t//直交判定...abs(dot())<EPS\n\tdouble dot(point p)\n\t{\n\t\treturn x*p.x+y*p.y;\n\t}\n\t//外積\n\t//平行判定...abs(cross())<EPS\n\tdouble cross(point p)\n\t{\n\t\treturn x*p.y-y*p.x;\n\t}\n\t//絶対値を求める\n\tdouble abs()\n\t{\n\t\treturn sqrt(x*x+y*y);\n\t}\n\t//単位ベクトルを求める\n\tpoint ev()\n\t{\n\t\treturn point(x/abs(),y/abs());\n\t}\n\t//単位法線ベクトル（の1つ）を求める\n\t//もうひとつは-1倍することで求まる\n\tpoint nev()\n\t{\n\t\treturn point(-y/abs(),x/abs());\n\t}\n\t//2点間の距離を求める\n\t//distがEPS未満なら2点は同じ位置にあるとみなす\n\tdouble pdist(point p)\n\t{\n\t\tpoint v=point(p.x-x,p.y-y);\n\t\treturn v.abs();\n\t}\n\t//この点と直線p1-p2の距離を求める\n\tdouble ldist(point p1,point p2)\n\t{\n\t\treturn std::abs((p2.y-p1.y)*x-(p2.x-p1.x)*y+p2.x*p1.y+p2.y*p1.x)/(p2-p1).abs();\n\t}\n\n};\n\n//線分p1-p2上に点qがあるか判定\nbool on_seg(point p1,point p2,point q)\n{\n\treturn abs((p1-q).cross(p2-q))<EPS && (p1-q).dot(p2-q)<=EPS;\n}\n//直線p1-p2と直線q1-q2の交点\n//線分の交差判定はこれの戻り値が線分上にあるかどうかで判定する...on_seg(p1,p2,intersection(p1,p2,q1,q2))\npoint intersection(point p1,point p2,point q1,point q2)\n{\n\treturn p1 + (p2-p1) * ((q2-q1).cross(q1-p1) / (q2-q1).cross(p2-p1));\n}\n//n頂点からなる多角形の面積を求める(vectorで頂点は与えられる)\ndouble area(vector<point> p)\n{\n\tdouble ret=0;\n\tfor(int i=0;i<p.size()-1;i++)\n\t{\n\t\tret+=p[i].cross(p[i+1]);\n\t}\n\tret+=p[p.size()-1].cross(p[0]);\n\tret/=2;\n\treturn ret;\n}\n/*\n3点a,b,cをa->b->cと進むとき、\n* a->bで時計方向に折れてb->c (clockwise)\n* a->bで反時計方向に折れてb->c(counter clockwise)\n* a->bで逆を向いてaを通り越してb->c(c--a--b on line)\n* a->bでそのままb->c(a--b--c on line)\n* a->bで逆を向いてb->c(a--c--b on line)\n\nのいずれのパターンかを判定する\n*/\nint ccw(point a,point b,point c)\n{\n\tb=b-a;c=c-a;\n\tif(b.cross(c)>EPS)\n\t\treturn 1; //counter clockwise\n\tif(b.cross(c)<-EPS)\n\t\treturn -1; //clockwise\n\tif(b.dot(c)<-EPS)\n\t\treturn 2; //c--a--b on line\n\tif(b.x*b.x+b.y*b.y < c.x*c.x+c.y*c.y)\n\t\treturn -2; //a--b--c on line\n\treturn 0; //a--c--b on line\n}\n//凸包を求める\nvector<point> convex_hull(vector<point> p)\n{\n\tint n=p.size();\n\tint k=0;\n\tsort(p.begin(),p.end());\n\tvector<point> ch(2*n);\n\t//lower-hull 下側凸包\n\tfor(int i=0;i<n;ch[k++]=p[i++])\n\t{\n\t\twhile(k>=2 && ccw(ch[k-2],ch[k-1],p[i])<=0)\n\t\t\tk--;\n\t}\n\t//upper-hull 上側凸包\n\tfor(int i=n-2,t=k+1;i>=0;ch[k++]=p[i--])\n\t{\n\t\twhile(k>=t && ccw(ch[k-2],ch[k-1],p[i])<=0)\n\t\t\tk--;\n\t}\n\tch.resize(k-1);\n\treturn ch;\n}\n\nint main()\n{\n\tpoint p1,p2,p3;\n\tdouble x1,y1,x2,y2;\n\tcin>>x1>>y1>>x2>>y2;\n\tp1=point(x1,y1);\n\tp2=point(x2,y2);\n\tint q;\n\tcin>>q;\n\tfor(int i=0;i<q;i++)\n\t{\n\t\tdouble x,y;\n\t\tcin>>x>>y;\n\t\tp3=point(x,y);\n\t\tint ans=ccw(p1,p2,p3);\n\t\tswitch(ans)\n\t\t{\n\t\t\tcase 0:\n\t\t\tcout<<\"ON_SEGMENT\"<<endl;\n\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\tcout<<\"COUNTER_CLOCKWISE\"<<endl;\n\t\t\tbreak;\n\t\t\tcase -1:\n\t\t\tcout<<\"CLOCKWISE\"<<endl;\n\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\tcout<<\"ONLINE_BACK\"<<endl;\n\t\t\tbreak;\n\t\t\tcase -2:\n\t\t\tcout<<\"ONLINE_FRONT\"<<endl;\n\t\t}\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <iostream>\n\nusing namespace std;\n\n#define EPS 1e-10\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nclass Point {\npublic:\n  double x, y;\n  Point() {};\n  Point(double x, double y): x(x), y(y) {}\n\n  Point operator + (const Point &p) { return Point(x + p.x, y + p.y); }\n  Point operator - (const Point &p) { return Point(x - p.x, y - p.y); }\n  Point operator * (double d) { return Point(d * x, d * y); }\n  Point operator / (double d) { return Point(d / x, d / y); }\n\n  bool operator < (const Point &p) const {\n    return (x == p.x ? y < p.y : x < p.x);\n  }\n\n  bool operator == (const Point &p) const {\n    return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n  }\n\n  friend ostream& operator << (ostream &os, Point &p) {\n    return os << \"Point(\" << p.x << \", \" << p.y << \")\";\n  }\n};\n\nstruct Segment {\n  Point p0, p1;\n};\n\ndouble cross (Point p1, Point p2) {\n  return p1.x * p2.y - p1.y * p2.x;\n}\n\ndouble dot(Point p1, Point p2) {\n  return p1.x * p2.x + p1.y * p2.y;\n}\n\ndouble norm(Point p) {\n  return p.x * p.x + p.y * p.y;\n}\n\nstring ccw(Segment s, Point p2) {\n  if (cross(s.p1 - s.p0, p2 - s.p0) > 0) return \"COUNTER_CLOCKWISE\";\n  if (cross(s.p1 - s.p0, p2- s.p0) < 0) return \"CLOCKWISE\";\n  if (dot(s.p1 - s.p0, p2 - s.p0) < 0) return \"ONLINE_BACK\";\n  if (norm(s.p1 - s.p0) < norm(p2 - s.p0)) return \"ONLINE_FRONT\";\n  return \"ON_SEGMENT\";\n}\n\nint main() {\n  int x1, y1, x2, y2;\n  cin >> x1 >> y1 >> x2 >> y2;\n\n  Segment s;\n  s.p0 = Point(x1, y1);\n  s.p1 = Point(x2, y2);\n\n  int n; cin >> n;\n\n  while (n--) {\n    int x, y; cin >> x >> y;\n    Point p2(x, y);\n\n    cout << ccw(s, p2) << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\nusing namespace std;\n#include<cstdio>\n#include<complex>\n\ntypedef double type_n;\ntypedef complex<type_n> point;\n\nvoid ccw(const point &a, const point &c, const point &z)\n{\n    point w;\n    w = conj(c) * (z - a);\n    if(w.imag() > 0){ printf(\"COUNTER_CLOCKWISE\\n\"); }\n    if(w.imag() < 0){ printf(\"CLOCKWISE\\n\"); }\n    if(w.real() < 0){ printf(\"ONLINE_BACK\\n\"); }\n    if(w.real() > norm(c)){ printf(\"ONLINE_FRONT\\n\"); }\n    printf(\"ON_SEGMENT\\n\");\n}\n\nint main()\n{\n    point a, b, c, z;\n    int i, q;\n    type_n a1, a2, b1, b2, z1, z2;\n    scanf(\"%lf %lf %lf %lf\", &a1, &a2, &b1, &b2);\n    a.real(a1), a.imag(a2), b.real(b1), b.imag(b2);\n    c = b - a;\n\n    scanf(\"%d\", &q);\n    for(i = 0; i < q; i++){\n        scanf(\"%lf %lf\", &z1, &z2);\n        z.real(z1), z.imag(z2);\n        ccw(a, c, z);\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define Rep(i,n) for(int i=0;i<(int)(n);i++)\n#define For(i,n1,n2) for(int i=(int)(n1);i<(int)(n2);i++)\n#define REP(i,n) for(ll i=0;i<(ll)(n);i++)\n#define RREP(i,n) for(ll i=((ll)(n)-1);i>=0;i--)\n#define FOR(i,n1,n2) for(ll i=(ll)(n1);i<(ll)(n2);i++)\n#define RFOR(i,n1,n2) for(ll i=((ll)(n1)-1);i>=(ll)(n2);i--)\n#define all(a)  (a).begin(),(a).end()\n#define SORT(a) sort((a).begin(),(a).end())\n#define oorret 0\n#define oor(x) [&](){try{x;} catch(const out_of_range& oor){return oorret;} return x;}()\n#define IOS cin.tie(0),ios::sync_with_stdio(false)\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef std::pair<ll, ll> P;\ntemplate<typename T1, typename T2> inline bool chmin(T1& a, T2 b) { if (a > b) { a = b; return 1; }return 0; }\ntemplate<typename T1, typename T2> inline bool chmax(T1& a, T2 b) { if (a < b) { a = b; return 1; }return 0; }\ntemplate<class Type>struct is_vector : std::false_type {};\ntemplate<class ValueType, class Alloc>struct is_vector<std::vector<ValueType, Alloc>> : std::true_type {};\ntemplate <typename T> inline std::ostream& operator << (std::ostream& out, const std::vector<T>& v) {\n\tif (v.empty())return out;\n\tconstexpr bool is_vector_v = is_vector<T>::value;\n\tif (is_vector_v)for (auto itr = v.begin(); itr != v.end();)out << (*itr), out << ((++itr != v.end()) ? \"\\n\" : \"\");\n\telse for (auto itr = v.begin(); itr != v.end();)out << (*itr), out << ((++itr != v.end()) ? \" \" : \"\");\n\treturn out;\n}\ninline void put() {}\ntemplate<class T> inline void put(const T& first) { std::cout << first << \"\\n\"; }\ntemplate<class T, class... N> inline void put(const T& first, const N& ... rest) { std::cout << first << \" \"; put(rest...); }\ninline void putn() {}\ntemplate<class T, class... N> inline void putn(const T& first, const N& ... rest) { std::cout << first << \"\\n\"; putn(rest...); }\n\ntemplate<typename T>class point {\npublic:\n\tT x, y;\n\tpoint(T x, T y) :x(x), y(y) {}\n\tpoint() :x(0), y(0) {}\n\tvoid set(T x, T y) {\n\t\tthis->x = x;\n\t\tthis->y = y;\n\t}\n\tT p2dist(point p) {\n\t\tT dx = x - p.x;\n\t\tT dy = y - p.y;\n\t\treturn dx * dx + dy * dy;\n\t}\n\tT dist(point p) {\n\t\treturn sqrt(p2dist(p));\n\t}\n\tT dist(T x, T y) {\n\t\treturn dist(point(x, y));\n\t}\n\tT inner_product(point p) { // this・p\n\t\treturn x * p.x + y * p.y;\n\t}\n\tT outer_product(point p) { // this × p\n\t\treturn x * p.y - y * p.x;\n\t}\n\tT cos(point p1, point p2) { // 角度p1,this,p2の余弦\n\t\tpoint t1 = p1 - (*this), t2 = p2 - (*this);\n\t\tT ip = t1.inner_product(t2);\n\t\treturn ip / t1.size() / t2.size();\n\t}\n\tT sin(point p1, point p2) { // 角度p1,this,p2の正弦\n\t\tpoint t1 = p1 - (*this), t2 = p2 - (*this);\n\t\tT ip = t1.outer_product(t2);\n\t\treturn ip / t1.size() / t2.size();\n\t}\n\tT size() {\n\t\treturn sqrt(x * x + y * y);\n\t}\n\tpoint norm() {\n\t\treturn (*this) / size();\n\t}\n\tpoint project(point p1, point p2) { // p1,p2を通る直線へ下ろした垂線の足\n\t\tpoint p3 = p2 - p1;\n\t\tT s = p1.p2dist(p2);\n\t\tT t = (*this - p1) * p3 / s;\n\t\tpoint res = p3 * t;\n\t\tres += p1;\n\t\treturn res;\n\t}\n\tpoint reflect(point p1, point p2) { // p1,p2を通る直線を軸とした線対称点\n\t\tpoint proj = this->project(p1, p2);\n\t\tpoint p = proj - (*this);\n\t\tp *= 2;\n\t\tpoint res = (*this) + p;\n\t\treturn res;\n\t}\n\tT line_dist(point p1, point p2) { // p1,p2を通る直線との距離\n\t\tpoint proj = this->project(p1, p2);\n\t\treturn this->dist(proj);\n\t}\n\tpoint operator+(point p) { return point(x + p.x, y + p.y); }\n\tpoint operator-(point p) { return point(x - p.x, y - p.y); }\n\tpoint operator*(T t) { return point(x * t, y * t); }\n\tT operator*(point p) { return inner_product(p); }\n\tpoint operator/(T t) { return point(x / t, y / t); }\n\tvoid operator+=(point p) { x += p.x; y += p.y; }\n\tvoid operator-=(point p) { x -= p.x; y -= p.y; }\n\tvoid operator*=(T t) { x *= t; y *= t; }\n\tvoid operator/=(T t) { x /= t; y /= t; }\n};\n\nint main() {\n\tusing pt = point<long double>;\n\tint x1, y1, x2, y2;\n\tint q;\n\tlong double eps = 1e-10;\n\tcin >> x1 >> y1 >> x2 >> y2;\n\tpt p0(x1, y1), p1(x2, y2);\n\tcin >> q;\n\tvector<int> x(q), y(q);\n\tvector<pt> p(q);\n\tREP(i, q) {\n\t\tcin >> x[i] >> y[i];\n\t\tp[i] = pt(x[i], y[i]);\n\t\tpt s = p1 - p0, t = p[i] - p0;\n\t\tlong double d = s.outer_product(t);\n\t\tif (abs(d) < eps) {\n\t\t\tif ((s.x * t.x < 0) || (s.y * t.y < 0)) {\n\t\t\t\tput(\"ONLINE_BACK\");\n\t\t\t} else {\n\t\t\t\tif (abs(s.x) < abs(t.x) || (abs(s.y) < abs(t.y))) {\n\t\t\t\t\tput(\"ONLINE_FRONT\");\n\t\t\t\t} else {\n\t\t\t\t\tput(\"ON_SEGMENT\");\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (d > 0) {\n\t\t\tput(\"COUNTER_CLOCKWISE\");\n\t\t} else {\n\t\t\tput(\"CLOCKWISE\");\n\t\t}\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint main() {\n\tcin.tie(0); ios::sync_with_stdio(false);\n\tint x0, y0, x1, y1; cin >> x0 >> y0 >> x1 >> y1;\n\tint X1 = x1 - x0, Y1 = y1 - y0;\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tint x2, y2; cin >> x2 >> y2;\n\t\tint X2 = x2 - x0, Y2 = y2 - y0;\n\t\tlong long cross = X1*Y2 - Y1*X2;\n\t\tif (cross > 0) { cout << \"COUNTER_CLOCKWISE\" << endl; continue; }\n\t\tif (cross < 0) { cout << \"CLOCKWISE\" << endl; continue; }\n\t\t//??????????????§cross == 0 ?????????????¢????\n\t\tlong long dot = X1*X2 + Y1*Y2;\n\t\tif (dot < 0) { cout << \"ONLINE_BACK\" << endl; continue; }\n\t\tlong double dis1 = X1*X1/hypot(X1,Y1) + Y1*Y1/hypot(X1,Y1), dis2 = X2*X2/hypot(X2,Y2) + Y2*Y2/hypot(X2,Y2);\n\t\tif (dis1 < dis2) { cout << \"ONLINE_FRONT\" << endl; continue; }\n\t\tcout << \"ON_SEGMENT\" << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <bitset>\n#include <complex>\n#include <deque>\n#include <exception>\n#include <fstream>\n#include <functional>\n#include <iomanip>\n#include <ios>\n#include <iosfwd>\n#include <iostream>\n#include <istream>\n#include <iterator>\n#include <limits>\n#include <list>\n#include <locale>\n#include <map>\n#include <memory>\n#include <new>\n#include <numeric>\n#include <ostream>\n#include <queue>\n#include <set>\n#include <sstream>\n#include <stack>\n#include <stdexcept>\n#include <streambuf>\n#include <string>\n#include <typeinfo>\n#include <utility>\n#include <valarray>\n#include <vector>\n#include <climits>\n#include <cstring>\n\n#define rep(i, m, n) for(int i=int(m);i<int(n);i++)\n#define all(c) begin(c),end(c)\n\ntemplate<typename T1, typename T2>\ninline void chmin(T1 &a, T2 b) { if (a > b) a = b; }\n\ntemplate<typename T1, typename T2>\ninline void chmax(T1 &a, T2 b) { if (a < b) a = b; }\n\ntypedef long long int ll;\nusing ll = long long int;\nusing ull = long long unsigned int;\nusing Int = long long int;\nusing namespace std;\n#define INF (1 << 30) - 1\n#define INFl (ll)5e15\n#define DEBUG 0\n#define dump(x)  cerr << #x << \" = \" << (x) << endl\n#define MOD 1000000007\n\n\n//edit\n\n\nnamespace Geometory {\n    const double EPS = 1e-10;\n\n    inline bool equals(double a, double b) {\n        return fabs(a - b) < EPS;\n    }\n\n    struct Point {\n        double x, y;\n\n        Point(double x = 0.0, double y = 0.0) : x(x), y(y) {}\n\n        Point operator+(const Point &p) {\n            return Point(x + p.x, y + p.y);\n        }\n\n        Point operator-(const Point &p) {\n            return Point(x - p.x, y - p.y);\n        }\n\n        Point operator*(const double k) {\n            return Point(x * k, y * k);\n        }\n\n        double norm() const {\n            return x * x + y * y;\n        }\n\n        double abs() const {\n            return sqrt(norm());\n        }\n\n        double dot(Point p) {\n            return x * p.x + y * p.y;\n        }\n\n        double cross(Point p) {\n            return x * p.y - y * p.x;\n        }\n\n        bool operator<(const Point &p) const {\n            return x != p.x ? x < p.x : y < p.y;\n        }\n\n        bool operator==(const Point &p) const {\n            return equals(x, p.x) && equals(y, p.y);\n//            return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n        }\n\n\n    };\n\n    using Vector = Point;\n\n    struct Segment {\n        Point p1, p2;\n\n        Segment(Point p1, Point p2) : p1(p1), p2(p2) {}\n\n        Segment(double x1, double y1, double x2, double y2) : p1(x1, y1), p2(x2, y2) {}\n    };\n\n    using Line = Segment;\n\n\n    double norm(Vector p) {\n        return p.x * p.x + p.y * p.y;\n    }\n\n    double abs(Vector a) {\n        return sqrt(norm(a));\n    }\n\n    double dot(Vector a, Vector b) {\n        return a.dot(b);\n    }\n\n    double cross(Vector a, Vector b) {\n        return a.cross(b);\n    }\n\n    //直行判定\n    bool is_orthogonal(Vector a, Vector b) {\n        return equals(dot(a, b), 0.0);\n    }\n\n    bool is_orthogonal(Point a1, Point a2, Point b1, Point b2) {\n        return is_orthogonal(a1 - a2, b1 - b2);\n    }\n\n    bool is_orthogonal(Segment s1, Segment s2) {\n        return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n    }\n\n    //平行判定\n    bool is_parallel(Vector a, Vector b) {\n        return equals(cross(a, b), 0.0);\n    }\n\n    bool is_parallel(Point a1, Point a2, Point b1, Point b2) {\n        return is_parallel(a1 - a2, b1 - b2);\n    }\n\n    bool is_parallel(Segment s1, Segment s2) {\n        return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n    }\n\n    //射影を求める\n    //pからsに垂直に線を引いたときの座標を返す\n    Point project(Segment s, Point p) {\n        Vector base = s.p2 - s.p1;\n        double r = dot(p - s.p1, base) / norm(base);\n        return s.p1 + base * r;\n    }\n\n    // 反射\n    // pを線分sを対称軸として線対称の位置にある点を求める。\n    Point reflect(Segment s, Point p) {\n//        return p + (project(s, p) - p) * 2;\n        return project(s, p) * 2 - p;\n    }\n\n    //交差判定\n    bool is_intersect(Segment s1, Segment s2) {\n        //工事中\n        return false;\n    }\n\n    //距離シリーズ\n    //2点間の距離\n    double get_distance(Point a, Point b) {\n        return abs(a - b);\n    }\n\n    // 直線lと点pの距離\n    double get_distanceLP(Line l, Point p) {\n        return abs(cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1));\n    }\n\n    // 線分sと点pの距離\n    double get_distanceSP(Segment s, Point p) {\n        if (dot(s.p2 - s.p1, p - s.p1) < 0.0) return abs(p - s.p1);\n        if (dot(s.p1 - s.p2, p - s.p2) < 0.0) return abs(p - s.p2);\n        return get_distanceLP(s, p);\n    }\n\n    //線分と線分の距離\n    double get_distance(Segment s1, Segment s2) {\n        if (is_intersect(s1, s2)) return 0.0;\n        return min({get_distanceSP(s1, s2.p1),\n                    get_distanceSP(s1, s2.p2),\n                    get_distanceSP(s2, s1.p1),\n                    get_distanceSP(s2, s1.p2),\n                   });\n    }\n\n\n    //反時計回り\n    static const int CCW = 1; // Counter Clockwise\n    static const int CW = -1; // Clockwise\n    static const int OB = 2; // Online Back\n    static const int OF = -2; // Online Front\n    static const int OS = 0; // On Segment\n\n    // p0を中心としたとき、p2は{反時計回り、時計回り、p2->p0->p1で同一直線上、p0->p1->p2で直線上、p2がp0p1線分上} (後ろの3つの説明は雑)\n    int ccw(Point p0, Point p1, Point p2) {\n        Vector a = p1 - p0;\n        Vector b = p2 - p0;\n        if (cross(a, b) > EPS) return CCW;\n        if (cross(a, b) < -EPS) return CW;\n        if (dot(a, b) < -EPS) return OB;\n        if (a.norm() < b.norm()) return OF;\n\n        return OS;\n    }\n\n\n    struct Circle {\n        Point c;\n        double r;\n\n        Circle(Point c = Point(), double r = 0.0) : c(c), r(r) {}\n    };\n\n    using Polygon = vector<Point>;\n\n    std::ostream &operator<<(std::ostream &os, const Point &p) {\n//        os << \"(\" << p.x << \", \" << p.y << \")\";\n        os << \"\" << p.x << \" \" << p.y << \"\";\n        return os;\n    }\n\n};\n\nusing namespace Geometory;\n\n\nclass Solve {\npublic:\n    void solve() {\n        Int x0, y0, x1, y1;\n        cin >> x0 >> y0 >> x1 >> y1;\n        Point p0(x0, y0);\n        Point p1(x1, y1);\n        Int q;\n        cin >> q;\n        while (q--) {\n            Int x, y;\n            cin >> x >> y;\n            Point p2(x, y);\n            int res = ccw(p0, p1, p2);\n            if (res == CCW) cout << \"COUNTER_CLOCKWISE\" << endl;\n            if (res == CW) cout << \"CLOCKWISE\" << endl;\n            if (res == OB) cout << \"ONLINE_BACK\" << endl;\n            if (res == OF) cout << \"ONLINE_FRONT\" << endl;\n            if (res == OS) cout << \"ON_SEGMENT\" << endl;\n        }\n\n\n    }\n\n};\n\n\nint main() {\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    cout << fixed << setprecision(10);\n\n    Solve().solve();\n\n\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nconst double eps = 1e-9;\n\nbool same(double a, double b) { return abs(a - b) < eps; }\n\nstruct P {\n    double x, y;\n    P() : x(0), y(0) {}\n    P(double x, double y) : x(x), y(y) {}\n    P operator + (P b) { return P(x + b.x, y + b.y); }\n    P operator - (P b) { return P(x - b.x, y - b.y); }\n    P operator * (double b) { return P(x * b, y * b); }\n    P operator / (double b) { return P(x / b, y / b); }\n    double operator * (P b) { return x * b.x + y * b.y; }\n    double operator ^ (P b) { return x * b.y - y * b.x; }\n    double abs() { return hypot(x, y); }\n    P unit() { return *this / abs(); }\n};\n\nstruct L{\n    // ax + by + c = 0\n    double a, b ,c, o;\n    P pa, pb;\n    L() : a(0), b(0), c(0), o(0), pa(), pb() {}\n    L(P pa, P pb) : a(pa.y - pb.y), b(pb.x - pa.x), c(pa ^ pb), o(atan2(-a, b)), pa(pa), pb(pb) {}\n    P project(P p) { return pa + (pb - pa).unit() * ((pb - pa) * (p - pa) / (pb - pa).abs()); }\n    P reflect(P p) { return p + (project(p) - p) * 2; }\n    double get_ratio(P p) { return (p - pa) * (pb - pa) / ((pb - pa).abs() * (pb - pa).abs()); }\n};\n\nbool parallel(L x, L y) { return same(x.a * y.b, x.b * y.a); }\n\nP intersect(L x, L y) { return P(-x.b * y.c + x.c * y.b, x.a * y.c - x.c * y.a) / (-x.a * y.b + x.b * y.a); }\n\nint main() {\n    P p0, p1; cin >> p0.x >> p0.y >> p1.x >> p1.y;\n    int q; cin >> q; while (q--) {\n        P p2; cin >> p2.x >> p2.y;\n        if (((p1 - p0) ^ (p2 - p0)) > eps) cout << \"COUNTER_CLOCKWISE\" << '\\n';\n        else if (((p1 - p0) ^ (p2 - p0)) < -eps) cout << \"CLOCKWISE\" << '\\n';\n        else if (((p1 - p0) * (p2 - p0)) < 0) cout << \"ONLINE_BACK\" << '\\n';\n        else if ((p1 - p0).abs() < (p2 - p0).abs()) cout << \"ONLINE_FRONT\" << '\\n';\n        else cout << \"ON_SEGMENT\" << '\\n';\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cmath>\n#include <vector>\nusing namespace std;\nconst double EPS = 1e-10;\nconst int COUNTER_CLOCKWISE = 1, CLOCKWISE = -1, ONLINE_BACK = 2, ONLINE_FRONT = -2, ON_SEGMENT = 0;\nbool equals(double a, double b) {\n\treturn fabs(a - b) < EPS;\n}\nstruct Point {\n\tdouble x, y;\n\tPoint(double x = 0, double y = 0) :x(x), y(y) {}\n\tPoint operator + (Point rhs) {\n\t\treturn Point(x + rhs.x, y + rhs.y);\n\t}\n\tPoint operator - (Point rhs) {\n\t\treturn Point(x - rhs.x, y - rhs.y);\n\t}\n\tPoint operator * (double k) {\n\t\treturn Point(k * x, k * y);\n\t}\n\tbool operator < (const Point& rhs) const {\n\t\treturn x != rhs.x ? x < rhs.x : y < rhs.y;\n\t}\n\tbool operator == (const Point& rhs) const {\n\t\treturn equals(x, rhs.x) && equals(y, rhs.y);\n\t}\n\tdouble norm() {\n\t\treturn x * x + y * y;\n\t}\n\tdouble abs() {\n\t\treturn sqrt(norm());\n\t}\n};\ntypedef Point Vector;\nstruct Segment {\n\tPoint p1, p2;\n\tSegment(Point p1 = Point(), Point p2 = Point()) :p1(p1), p2(p2) {}\n};\ntypedef Segment Line;\nstruct Circle {\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0) :c(c), r(r) {}\n};\ntypedef vector<Point> Polygon;\ndouble dot(Vector a, Vector b) {\n\treturn a.x * b.x + a.y * b.y;\n}\ndouble cross(Vector a, Vector b) {\n\treturn a.x * b.y - a.y * b.x;\n}\nbool isOrthogonal(Vector a, Vector b) {\n\treturn equals(dot(a, b), 0);\n}\nbool isOrthogonal(Segment a, Segment b) {\n\treturn isOrthogonal(Vector(a.p2.x - a.p1.x, a.p2.y - a.p1.y), Vector(b.p2.x - b.p1.x, b.p2.y - b.p1.y));\n}\nbool isParallel(Vector a, Vector b) {\n\treturn equals(cross(a, b), 0);\n}\nbool isParallel(Segment a, Segment b) {\n\treturn isParallel(Vector(a.p2.x - a.p1.x, a.p2.y - a.p1.y), Vector(b.p2.x - b.p1.x, b.p2.y - b.p1.y));\n}\nPoint project(Point p, Segment s) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / base.norm();\n\treturn s.p1 + (base * r);\n}\nPoint reflect(Point p, Segment s) {\n\treturn p + (project(p, s) - p) * 2;\n}\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0, b = p2 - p0;\n\tif (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\telse if (cross(a, b) < -EPS) return CLOCKWISE;\n\telse if (dot(a, b) < -EPS) return ONLINE_BACK;\n\telse if (a.norm() < b.norm()) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\nbool intersect(Segment s1, Segment s2) {\n\treturn false;\n}\ndouble getDistance(Point a, Point b) {\n\treturn (b - a).abs();\n}\ndouble getDistancePL(Point p, Line l) {\n\treturn fabs(cross(l.p2 - l.p1, p - l.p1)) / (l.p2 - l.p1).abs();\n}\ndouble getDistancePS(Point p, Segment s) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0) return (p - s.p1).abs();\n\telse if (dot(s.p1 - s.p2, p - s.p2) < 0) return (p - s.p2).abs();\n\telse return getDistancePL(p, s);\n}\ndouble getDistance(Segment s1, Segment s2) {\n\tif (intersect(s1, s2)) return 0;\n\treturn min(min(getDistancePS(s2.p1, s1), getDistancePS(s2.p2, s1)), min(getDistancePS(s1.p1, s2), getDistancePS(s1.p2, s2)));\n}\nint main() {\n    int q;\n\tdouble x, y;\n    Point p0, p1, p2;\n    scanf(\"%lf%lf\", &x, &y);\n    p0 = Point(x, y);\n    scanf(\"%lf%lf\", &x, &y);\n    p1 = Point(x, y);\n    scanf(\"%d\", &q);\n    while (q--) {\n    \tscanf(\"%lf%lf\", &x, &y);\n    \tp2 = Point(x, y);\n    \tswitch (ccw(p0, p1, p2)) {\n    \t\tcase COUNTER_CLOCKWISE:\n    \t\t\tprintf(\"COUNTER_CLOCKWISE\\n\");\n    \t\t\tbreak;\n    \t\tcase CLOCKWISE:\n    \t\t\tprintf(\"CLOCKWISE\\n\");\n    \t\t\tbreak;\n    \t\tcase ONLINE_BACK:\n    \t\t\tprintf(\"ONLINE_BACK\\n\");\n    \t\t\tbreak;\n    \t\tcase ONLINE_FRONT:\n    \t\t\tprintf(\"ONLINE_FRONT\\n\");\n    \t\t\tbreak;\n    \t\tcase ON_SEGMENT:\n    \t\t\tprintf(\"ON_SEGMENT\\n\");\n\t\t}\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <cmath>\nusing namespace std;\n\nint x_0, y_0, x_1, y_1;\nint q;\nint x, y;\n\nint choice();\nint gaiseki(int, int, int, int);\nint naiseki(int, int, int, int);\ndouble norm(int, int);\nint main(){\n  cin >> x_0 >> y_0 >> x_1 >> y_1;\n\n  cin >> q;\n  string s[] = {\"COUNTER_CLOCKWISE\", \"CLOCKWISE\", \"ONLINE_BACK\", \"ON_SEGMENT\", \"ONLINE_FRONT\"};\n\n  for(int i=0; i<q; i++){\n    cin >> x >> y;\n    cout << s[choice()] << endl;\n  }\n\n  return 0;\n}\n\nint choice(){\n  if(gaiseki(x_1-x_0, y_1-y_0, x-x_0, y-y_0)>0) return 0;\n  else if(gaiseki(x_1-x_0, y_1-y_0, x-x_0, y-y_0)<0) return 1;\n  else{\n    if(naiseki(x_1-x_0, y_1-y_0, x-x_0, y-y_0)<0){\n      return 2;\n    }else{\n      if(norm(x-x_0, y-y_0)<=norm(x_1-x_0, y_1-y_0)) return 3;\n      else return 4;\n    }\n  }\n}\n\nint gaiseki(int ax, int ay, int bx, int by){\n  return ax*by - ay*bx;\n}\n\nint naiseki(int ax, int ay, int bx, int by){\n  return ax*bx + ay*by;\n}\n\ndouble norm(int ax, int ay){\n  return sqrt(ax*ax+ay*ay);\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<string>\n#include<algorithm>\n#include<cmath>\n#include<vector>\n#include<stack>\n#include<climits>\n#include<cstring>\n#include<queue>\nusing namespace std;\n\ndouble EPS = 1e-10;\n\ndouble add(double a, double b){\n\tif(abs(a+b) < EPS * (abs(a) + abs(b))) return 0;\n\treturn a+b;\n}\n\nstruct P{\n\tdouble x,y;\n\tP(){}\n\tP(double x, double y) : x(x), y(y){\n\t}\n\tP operator +(P p){\n\t\treturn P(add(x,p.x), add(y,p.y));\n\t}\n\tP operator -(P p){\n\t\treturn P(add(x,-p.x), add(y,-p.y));\n\t}\n\tP operator *(double d){\n\t\treturn P(d*x, d*y);\n\t}\n\tdouble dot (P p){\n\t\treturn add(x*p.x, y*p.y);\n\t}\n\tdouble det (P p){\n\t\treturn add(x*p.y, -y*p.x);\n\t}\n\tvoid print (){\n\t\tcout << x << \" \" << y <<endl;\n\t\treturn;\n\t}\n};\n\nvoid clockWise(P p0, P p1, P p2){\n\tP q1 = p1-p0;\n\tP q2 = p2-p0;\n\tif(!q1.det(q2)){\n\t\tif(q1.x/q2.x<0){\n\t\t\tcout << \"ONLINE_BACK\"<< endl;\n\t\t}else if(q1.x/q2.x>1){\n\t\t\tcout << \"ON_SEGMENT\"<<endl;\n\t\t}else{\n\t\t\tcout <<\"ONLINE_FRONT\" <<endl;\n\t\t}\n\t}else{\n\t\tif(q1.det(q2)>0){\n\t\t\tcout << \"COUNTER_CLOCKWISE\" <<endl;\n\t\t}else{\n\t\t\tcout <<\"CLOCKWISE\"<< endl;\n\t\t}\n\n\t}\n\treturn;\n}\n\nint main(){\n\tdouble x, y, q;\n\tcin >> x >> y ;\n\tP p0(x,y);\n\tcin >> x >> y ;\n\tP p1(x,y);\n\tcin >> q ;\n\n\tfor(int i=0;i<q;i++){\n\t\tcin >> x >> y ;\n\t\tP p2(x,y);\n\t\tclockWise(p0, p1, p2);\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "# include \"bits/stdc++.h\"\nusing namespace std;\nusing LL = long long;\nusing ULL = unsigned long long;\nconst double PI = acos(-1);\ntemplate<class T>constexpr T INF() { return ::std::numeric_limits<T>::max(); }\ntemplate<class T>constexpr T HINF() { return INF<T>() / 2; }\ntemplate <typename T_char>T_char TL(T_char cX) { return tolower(cX); };\ntemplate <typename T_char>T_char TU(T_char cX) { return toupper(cX); };\ntypedef pair<LL, LL> pii;\nconst int vy[] = { -1, -1, -1, 0, 1, 1, 1, 0 }, vx[] = { -1, 0, 1, 1, 1, 0, -1, -1 };\nconst int dx[4] = { 0,1,0,-1 }, dy[4] = { 1,0,-1,0 };\nint popcnt(unsigned long long n) { int cnt = 0; for (int i = 0; i < 64; i++)if ((n >> i) & 1)cnt++; return cnt; }\nint d_sum(LL n) { int ret = 0; while (n > 0) { ret += n % 10; n /= 10; }return ret; }\nint d_cnt(LL n) { int ret = 0; while (n > 0) { ret++; n /= 10; }return ret; }\nLL gcd(LL a, LL b) { if (b == 0)return a; return gcd(b, a%b); };\nLL lcm(LL a, LL b) { LL g = gcd(a, b); return a / g*b; };\n# define ALL(qpqpq)           (qpqpq).begin(),(qpqpq).end()\n# define UNIQUE(wpwpw)        sort(ALL((wpwpw)));(wpwpw).erase(unique(ALL((wpwpw))),(wpwpw).end())\n# define LOWER(epepe)         transform(ALL((epepe)),(epepe).begin(),TL<char>)\n# define UPPER(rprpr)         transform(ALL((rprpr)),(rprpr).begin(),TU<char>)\n# define FOR(i,tptpt,ypypy)   for(LL i=(tptpt);i<(ypypy);i++)\n# define REP(i,upupu)         FOR(i,0,upupu)\n# define INIT                 std::ios::sync_with_stdio(false);std::cin.tie(0)\n# pragma warning(disable:4996)\n\n//定義系\n\ndouble EPS = 1e-10;\n\n//誤差を考慮して足し算を行う\ndouble add(double a, double b) {\n\tif (abs(a + b) < EPS*(abs(a) + abs(b)))return 0;\n\treturn a + b;\n}\n\n//Point\nstruct Point {\n\tdouble x, y;\n\tPoint() {}\n\tPoint(double x, double y) :x(x), y(y) {\n\t}\n\tPoint operator + (Point p) {\n\t\treturn Point(add(x, p.x), add(y, p.y));\n\t}\n\tPoint operator - (Point p) {\n\t\treturn Point(add(x, -p.x), add(y, -p.y));\n\t}\n\tPoint operator * (double d) {\n\t\treturn Point(x*d, y*d);\n\t}\n\tPoint operator / (double d) {\n\t\treturn Point(x / d, y / d);\n\t}\n\t//内積\n\tdouble dot(Point p) {\n\t\treturn add(x*p.x, y*p.y);\n\t}\n\t//外積\n\tdouble det(Point p) {\n\t\treturn add(x*p.y, -y*p.x);\n\t}\n\t//点の大小比較\n\tbool operator <(const Point &p)const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\tbool operator ==(const Point &p)const {\n\t\treturn fabs(x - p.x) < EPS&&fabs(y - p.y) < EPS;\n\t}\n};\n\n//ベクトル。使い分けるといいかも\ntypedef Point Vector;\n\n//ベクトルの大きさの2乗\ndouble norm(Vector p) {\n\treturn p.x*p.x + p.y*p.y;\n}\n\n//ベクトルの大きさ\ndouble abs(Vector p) {\n\treturn sqrt(norm(p));\n}\n\n//線分\nstruct Segment {\n\tPoint p1, p2;\n};\n\n//直線\ntypedef Segment Line;\n\n//中心c,半径rの円\nstruct Circle {\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0) :c(c), r(r) {}\n};\n\n//多角形\ntypedef vector<Point> Polygon;\n\n\n\n\n//計算・アルゴリズム系\n\n\n//反時計回りCCW\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (a.det(b) > EPS)return COUNTER_CLOCKWISE;\n\tif (a.det(b) < -EPS)return CLOCKWISE;\n\tif (a.dot(b) < -EPS)return ONLINE_BACK;\n\tif (norm(a)<norm(b))return ONLINE_FRONT;\n\n\treturn ON_SEGMENT;\n}\n\n//線分p1p2と線分p3p4の交差判定\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n\treturn (ccw(p1, p2, p3)*ccw(p1, p2, p4) <= 0 && ccw(p3, p4, p1)*ccw(p3, p4, p2) <= 0);\n}\nbool intersect(Segment s1, Segment s2) {\n\treturn intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\n//ベクトルa,bの直交判定\nbool isOrthogonal(Vector a, Vector b) {\n\treturn a.dot(b) == 0.0;\n}\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n\treturn isOrthogonal(a1 - a2, b1 - b2);\n}\nbool isOrthogonal(Segment s1, Segment s2) {\n\treturn (s1.p2 - s1.p1).dot(s2.p2 - s2.p1) == 0.0;\n}\n\n//ベクトルa,bの並行判定\nbool isParallel(Vector a, Vector b) {\n\treturn a.det(b) == 0.0;\n}\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n\treturn isParallel(a1 - a2, b1 - b2);\n}\nbool isParallel(Segment s1, Segment s2) {\n\treturn (s1.p2 - s1.p1).det(s2.p2 - s2.p1) == 0.0;\n}\n\n//射影(点p1と点p2を通る直線に点pから垂線を引いた交点xを求める)\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = (p - s.p1).dot(base) / norm(base);\n\treturn s.p1 + base*r;\n}\n\n//反射(点p1と点p2を通る直線を対象軸として点pと線対称の位置にある点xを求める)\nPoint reflect(Segment s, Point p) {\n\treturn p + (project(s, p) - p)*2.0;\n}\n\n//点aと点bの距離\ndouble getDistance(Point a, Point b) {\n\treturn abs(a - b);\n}\n\n//直線lと点pの距離\ndouble getDistanceLP(Line l, Point p) {\n\treturn abs((l.p2 - l.p1).det(p - l.p1) / abs(l.p2 - l.p1));\n}\n\n//線分sと点pの距離\ndouble getDistanceSP(Segment s, Point p) {\n\tif ((s.p2 - s.p1).dot(p - s.p1) < 0.0)return abs(p - s.p1);\n\tif ((s.p1 - s.p2).dot(p - s.p2) < 0.0)return abs(p - s.p2);\n\treturn getDistanceLP(s, p);\n}\n\n//線分s1と線分s2の距離\ndouble getDistance(Segment s1, Segment s2) {\n\tif (intersect(s1, s2))return 0.0;\n\treturn min({ getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2), getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2) });\n}\n//距離の二乗\ndouble dist(Point p, Point q) {\n\treturn (p - q).dot(p - q);\n}\n\n//辞書順で比較\nbool cmp_x(const Point& p, const Point& q) {\n\tif (p.x != q.x)return  p.x < q.x;\n\treturn p.y < q.y;\n}\n\n//凸包を求める\nvector<Point> convex_hull(Point* ps, int n) {\n\tsort(ps, ps + n, cmp_x);\n\tint k = 0;//凸法の頂点数\n\tvector<Point> qs(n * 2);//構築中の凸包\n\n\t\t\t\t\t\t//下限凸包の作成\n\tfor (int i = 0; i < n; i++) {\n\t\twhile (k > 1 && (qs[k - 1] - qs[k - 2]).det(ps[i] - qs[k - 1]) <= 0)k--;\n\t\tqs[k++] = ps[i];\n\t}\n\n\t//上限凸包の作成\n\tfor (int i = n - 2, t = k; i >= 0; i--) {\n\t\twhile (k > t && (qs[k - 1] - qs[k - 2]).det(ps[i] - qs[k - 1]) <= 0)k--;\n\t\tqs[k++] = ps[i];\n\t}\n\tqs.resize(k - 1);\n\treturn qs;\n}\n\nint main() {\n\tPoint p0, p1, p2;\n\tcin >> p0.x >> p0.y >> p1.x >> p1.y;\n\tint q;\n\tcin >> q;\n\tREP(qqq, q) {\n\t\tcin >> p2.x >> p2.y;\n\t\tint ret = ccw(p0, p1, p2);\n\t\tswitch (ret) {\n\t\tcase 1:\n\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t\tbreak;\n\t\tcase -1:cout << \"CLOCKWISE\" << endl;\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t\tbreak;\n\t\tcase -2:\n\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t\tbreak;\n\t\tcase 0:\n\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t}\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nconstexpr double EPS = 1e-14;\n\nstruct vec2 {\n    double x, y;\n    vec2 operator+(const vec2 rhs) {\n        return {x + rhs.x, y + rhs.y};\n    }\n    vec2 operator-(const vec2 rhs) {\n        return {x - rhs.x, y - rhs.y};\n    }\n    vec2 operator*(const double k) {\n        return {x * k, y * k};\n    }\n    vec2 operator/(const double k) {\n        return {x / k, y / k};\n    }\n};\n\nvoid printvec2(vec2 p, int precision) {\n    cout << setprecision(precision) << fixed << p.x << \" \" << p.y << endl;\n}\n\ndouble dot(vec2 a, vec2 b) {\n    return a.x * b.x + a.y * b.y;\n};\n\ndouble norm2(vec2 a) {\n    return dot(a, a);\n}\n\nstruct line {\n    vec2 p, l;\n};\n\nline make_line(vec2 a, vec2 b) {\n    return {a, b - a};\n}\n\ndouble cross(vec2 a, vec2 b) {\n    return a.x * b.y - a.y * b.x;\n}\n\nbool is_parallel(vec2 a, vec2 b) {\n    return abs(cross(a, b)) < EPS;\n}\n\nbool is_parallel(line a, line b) {\n    return is_parallel(a.l, b.l);\n}\n\ndouble operator/(vec2 a, vec2 b) {\n    assert(is_parallel(a, b));\n    return abs(b.x) < EPS ? a.y / b.y : a.x / b.x;\n}\n\nvec2 intersection(line l1, line l2) {\n    assert(!is_parallel(l1, l2));\n    double a = l1.p.x, b = l1.p.y, c = l1.l.x, d = l1.l.y;\n    double e = l2.p.x, f = l2.p.y, g = l2.l.x, h = l2.l.y;\n    double k = (h * (a - e) - g * (b - f)) / (g * d - c * h);\n    return {\n        a + k * c,\n        b + k * d\n    };\n}\n\nvec2 get_normal(vec2 p) {\n    return {-p.y, p.x};\n}\n\nvec2 foot(vec2 p, line l) {\n    line normal = {p, get_normal(l.l)};\n    return intersection(normal, l);\n}\n\nvec2 reflect(vec2 p, line l) {\n    vec2 f = foot(p, l);\n    return {2 * f.x - p.x, 2 * f.y - p.y};\n}\n\ndouble dist(vec2 p, line l) {\n    return sqrt(norm2(foot(p, l) - p));\n}\n\nint sgn(double a) {\n    if (a < -EPS) return -1;\n    if (a > EPS) return 1;\n    return 0;\n}\n\nint main() {\n    double x0, y0, x1, y1;\n    cin >> x0 >> y0 >> x1 >> y1;;\n    vec2 p1 = {x1 - x0, y1 - y0};\n    int q;\n    cin >> q;\n    while (q--) {\n        double x2, y2;\n        cin >> x2 >> y2;\n        vec2 p2 = {x2 - x0, y2 - y0};\n        switch (sgn(cross(p1, p2))) {\n            case -1:\n            cout << \"CLOCKWISE\" << endl;\n            break;\n\n            case 1:\n            cout << \"COUNTER_CLOCKWISE\" << endl;\n            break;\n\n            case 0:\n            double k = p2 / p1;\n            if (k < -EPS) {\n                cout << \"ONLINE_BACK\" << endl;\n            } else if (k > 1 + EPS) {\n                cout << \"ONLINE_FRONT\" << endl;\n            } else {\n                cout << \"ON_SEGMENT\" << endl;\n            }\n            break;\n        }\n    }   \n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <complex>\n\nenum INDICES {\n  COUNTER_CLOCKWISE = 0,\n  CLOCKWISE,\n  ONLINE_BACK,\n  ON_SEGMENT,\n  ONLINE_FRONT\n};\n\nconst std::vector<std::string> strLst = {\n  \"COUNTER_CLOCKWISE\",\n  \"CLOCKWISE\",\n  \"ONLINE_BACK\",\n  \"ON_SEGMENT\",\n  \"ONLINE_FRONT\"\n};\n\nconst double tol = 1e-16;\n\nint main() {\n  double x0, y0, x1, y1;\n  std::cin >> x0 >> y0 >> x1 >> y1;\n\n  int q;\n  std::cin >> q;\n\n  for (int i = 0; i < q; ++i) {\n    double x2, y2;\n    std::cin >> x2 >> y2;\n\n    int index;\n    if ((x2 == x0 && y2 == y0) || (x2 == x1 && y2 == y1)) {\n      index = INDICES::ON_SEGMENT;\n    } else {\n      double ip = (x1 - x0) * (x2 - x0) + (y1 - y0) * (y2 - y0);\n      double norm1 = std::sqrt((x1 - x0) * (x1 - x0) + (y1 - y0) * (y1 - y0));\n      double norm2 = std::sqrt((x2 - x0) * (x2 - x0) + (y2 - y0) * (y2 - y0));\n      double theta = ip / norm1 / norm2;\n      if (theta < -1 + tol) {\n        index = INDICES::ONLINE_BACK;\n      } else if (theta > 1 - tol) {\n        index = (norm1 < norm2) ? INDICES::ONLINE_FRONT : INDICES::ON_SEGMENT;\n      } else {\n        double opz = (x1 - x0) * (y2 - y0) - (x2 - x0) * (y1 - y0);\n        index = (opz > 0) ? INDICES::COUNTER_CLOCKWISE : INDICES::CLOCKWISE;\n      }\n    }\n\n    std::cout << strLst[index] << std::endl;\n  }\n\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#define __USE_MINGW_ANSI_STDIO 0\n#include <bits/stdc++.h>\n\nusing namespace std;\nusing ll = long long;\n#define int ll\nusing VI = vector<int>;\nusing VVI = vector<VI>;\nusing PII = pair<int, int>;\n\n#define FOR(i, a, n) for (ll i = (ll)a; i < (ll)n; ++i)\n#define REP(i, n) FOR(i, 0, n)\n#define ALL(x) x.begin(), x.end()\n#define PB push_back\n\nconst ll LLINF = (1LL<<60);\nconst int INF = (1LL<<30);\nconst int MOD = 1000000007;\n\ntemplate <typename T> T &chmin(T &a, const T &b) { return a = min(a, b); }\ntemplate <typename T> T &chmax(T &a, const T &b) { return a = max(a, b); }\ntemplate <typename T> bool IN(T a, T b, T x) { return a<=x&&x<b; }\ntemplate<typename T> T ceil(T a, T b) { return a/b + !!(a%b); }\ntemplate<class S,class T>\nostream &operator <<(ostream& out,const pair<S,T>& a){\n  out<<'('<<a.first<<','<<a.second<<')';\n  return out;\n}\ntemplate<class T>\nostream &operator <<(ostream& out,const vector<T>& a){\n  out<<'[';\n  REP(i, a.size()) {out<<a[i];if(i!=a.size()-1)out<<',';}\n  out<<']';\n  return out;\n}\n\nint dx[] = {0, 1, 0, -1}, dy[] = {1, 0, -1, 0};\n\nconst double EPS = 1e-8;\n\nusing R = long double;\nusing P = complex<R>;\nusing L = pair<P,P>;\n\ninline int sgn(const R& r) { return (r>EPS) - (r<-EPS); }\nnamespace std {\n\tbool operator < (const P& a, const P& b) {\n\t\treturn sgn(real(a-b)) ? real(a-b) < 0 : sgn(imag(a-b)) < 0;\n\t}\n\tbool operator == (const P& a, const P& b) {\n\t\treturn sgn(real(a-b)) == 0 && sgn(imag(a-b)) == 0;\n\t}\n}\ninline R dot(const P& a, const P& b) {\n  return real(a)*real(b) + imag(a)*imag(b);\n}\ninline R det(const P& a, const P& b) {\n  return real(a)*imag(b)-imag(a)*real(b);\n}\n// a/b\ninline P div(const P &a, const P &b) {\n  return {dot(b,a)/norm(b), det(b,a)/norm(b)};\n}\n\n// PとLについて入力\ninline istream& operator>>(istream& is, P& p) {\n  R x, y;\n  is >> x >> y;\n  p = P(x, y);\n  return is;\n}\ninline istream& operator>>(istream& is, L& l) {\n  P a, b;\n  is >> a >> b;\n  l = L(a, b);\n  return is;\n}\n\n// 線分abから見たcの位置\nenum CCW{LEFT=1, RIGHT=2, BACK=4, FRONT=8, ON=16};\nint ccw(P a, P b, P c) {\n\tP p = div(c-a, b-a);\n\tif(imag(p) > 0) return LEFT;\n\tif(imag(p) < 0) return RIGHT;\n\tif(real(p) < 0) return BACK;\n\tif(real(p) > 1) return FRONT;\n\treturn ON;\n}\n\nsigned main(void)\n{\n  cin.tie(0);\n  ios::sync_with_stdio(false);\n\n  L l;\n  cin >> l;\n  int q;\n  cin >> q;\n  REP(i, q) {\n    P p;\n    cin >> p;\n    int ret = ccw(l.first, l.second, p);\n    if(ret == LEFT) cout << \"COUTNTER_CLOCKWISE\" << endl;\n    else if(ret == RIGHT) cout << \"CLOCKWISE\" << endl;\n    else if(ret == BACK) cout << \"ONLINE_BACK\" << endl;\n    else if(ret == FRONT) cout << \"ONLINE_FRONT\" << endl;\n    else if(ret == ON) cout << \"ON_SEGMENT\" << endl;\n  }\n\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<iomanip>\n#include<cstdio>\n#include<cmath>\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nusing namespace std;\n\nclass Point {\n    public:\n    double x, y;\n    \n    Point(double x = 0, double y = 0): x(x), y(y) {}\n    \n    Point operator + (Point p) {return Point(x + p.x, y + p.y); }\n    Point operator - (Point p) {return Point(x - p.x, y - p.y); }\n    Point operator * (double a) {return Point(a * x, a * y); }\n    Point operator / (double a) {return Point(x / a, y / a); }\n    \n    double abs() { return sqrt(norm()); }\n    double norm() { return x * x + y * y; }\n    \n    bool operator < (const Point &p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n    \n    bool operator == (const Point &p) const {\n        return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS; \n    }\n};\n\nstruct Segment {\n    Point p1, p2;\n};\n\ntypedef Segment Line;\n\nclass Circle {\n    public:\n    Point c;\n    double r;\n    Circle(Point c = Point(), double r = 0.0): c(c), r(r) {}\n};\n\ntypedef Point Vector;\n\ndouble norm(Vector a) {\n    return a.x * a.x + a.y * a.y;\n}\n\ndouble abs(Vector a) {\n    return sqrt(norm(a));\n}\n\ndouble dot(Vector a, Vector b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n    return a.x * b.y - a.y * b.x;\n}\n\nbool isOrthogonal(Vector a, Vector b) {\n    return equals(dot(a, b), 0.0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n    return isOrthogonal(a1 - a2, b1 - b2);\n}\n\nbool isOrthogonal(Segment s1, Segment s2) {\n    return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nbool isParallel(Vector a, Vector b) {\n    return equals(cross(a, b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n    return isParallel(a1 - a2, b1 - b2);\n}\n\nbool isParallel(Segment s1, Segment s2) {\n    return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nPoint project(Segment s, Point p) {\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / norm(base);\n    return s.p1 + base * r;\n}\n\nPoint reflect(Segment s, Point p) {\n    return p + (project(s, p) - p) * 2.0;\n}\n\ndouble getDistance(Point a, Point b) {\n    return abs(a - b);\n}\n\ndouble getDistanceLP(Line l, Point p) {\n    return abs(cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1));\n}\n\ndouble getDistanceSP(Segment s, Point p) {\n    if ( dot(s.p2 - s.p1, p - s.p1) < 0.0 ) return abs(p - s.p1);\n    if ( dot(s.p1 - s.p2, p - s.p2) < 0.0 ) return abs(p - s.p2);\n    return getDistanceLP(s, p);\n}\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nint ccw(Point p0, Point p1, Point p2) {\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if ( cross(a, b) > EPS ) return COUNTER_CLOCKWISE;\n    if ( cross(a, b) < -EPS ) return CLOCKWISE;\n    if ( dot(a, b) < -EPS ) return ONLINE_BACK;\n    if ( a.norm() < b.norm() ) return ONLINE_FRONT;\n    \n    return ON_SEGMENT;\n}\n\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n    return ( ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n             ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\n\nbool intersect(Segment s1, Segment s2) {\n    return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\ndouble getDistance(Segment s1, Segment s2) {\n    if ( intersect(s1, s2) ) return 0.0;\n    return min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n               min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\nint main() {\n    int n;\n    Point p0, p1, p;\n    cin >> p0.x >> p0.y >> p1.x >> p1.y >> n;\n    \n    for ( int i = 0; i < n; i++ ) {\n        cin >> p.x >> p.y;\n        \n        switch(ccw(p0, p1, p)) {\n            case 1: cout << \"COUNTER_CLOCKWISE\"; break;\n            case -1: cout << \"CLOCKWISE\"; break;\n            case 2: cout << \"ONLINE_BACK\"; break;\n            case -2: cout << \"ONLINE_FRONT\"; break;\n            case 0: cout << \"ON_SEGMENT\"; break;\n        }\n        cout << endl;\n    }\n    \n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cmath>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\ntemplate<class T>\nstruct Vec2\n{\n\tVec2(){}\n\tVec2(T _x, T _y) : x(_x), y(_y) {}\n\n\tVec2 operator+(const Vec2& rhs) const { return Vec2(x + rhs.x, y + rhs.y); }\n\tVec2 operator-(const Vec2& rhs) const { return Vec2(x - rhs.x, y - rhs.y); }\n\tVec2 operator*(T s) const { return Vec2(x*s, y*s); }\n\tVec2 operator/(T s) const { return Vec2(x/s, y/s); }\n\tT dot(const Vec2& rhs) const { return x*rhs.x + y*rhs.y; }\n\tT cross(const Vec2& rhs) const { return x*rhs.y - y*rhs.x; }\n\tT sqlength() const { return x*x + y*y; }\n\tdouble length() const { return sqrt(sqlength()); }\n\tbool operator<(const Vec2& rhs) const\n\t{\n\t\tif (x != rhs.x) return x < rhs.x;\n\t\treturn y < rhs.y;\n\t}\n\n\tT x;\n\tT y;\n};\n\ntemplate<class T>\nT cross(const Vec2<T> &O, const Vec2<T> &A, const Vec2<T> &B)\n{\n\treturn (A - O).cross(B - O);\n}\n\ntemplate<class T>\nbool IsIntSegments(const Vec2<T>& A1, const Vec2<T>& A2, const Vec2<T>& B1, const Vec2<T>& B2)\n{\n\treturn (cross(A1, A2, B1)*cross(A1, A2, B2) < 0 && cross(B1, B2, A1)*cross(B1, B2, A2) < 0);\n}\n\ntemplate<class T>\nbool IsPointOnSegment(const Vec2<T>& P, const Vec2<T>& S, const Vec2<T>& E)\n{\n\tVec2<T> dir = E - S;\n\tif ((P - S).cross(dir) != 0) {\n\t\treturn false;\n\t}\n\tT prd = (P - S).dot(dir);\n\tif (prd < 0) {\n\t\treturn false;\n\t}\n\treturn prd <= dir.dot(dir);\n}\n\nint main()\n{\n\ttypedef Vec2<long long> Vec;\n\tVec P[3];\n\tcin >> P[0].x >> P[0].y;\n\tcin >> P[1].x >> P[1].y;\n\n\tint q;\n\tcin >> q;\n\tfor (int i = 0; i < q; i++) {\n\t\tcin >> P[2].x >> P[2].y;\n\n\t\tVec d1 = P[1] - P[0];\n\t\tVec d2 = P[2] - P[0];\n\t\tif (d1.cross(d2) > 0) {\n\t\t\tputs(\"COUNTER_CLOCKWISE\");\n\t\t}\n\t\telse if (d1.cross(d2) < 0) {\n\t\t\tputs(\"CLOCKWISE\");\n\t\t}\n\t\telse if (d1.dot(d2) < 0) {\n\t\t\tputs(\"ONLINE_BACK\");\n\t\t}\n\t\telse if (d1.dot(d1) < d2.dot(d2)) {\n\t\t\tputs(\"ONLINE_FRONT\");\n\t\t}\n\t\telse {\n\t\t\tputs(\"ON_SEGMENT\");\n\t\t}\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\n#include<unordered_map>\n#include<unordered_set>\n#pragma warning(disable:4996)\nusing namespace std;\nusing ld = long double;\ntemplate<class T>\nusing Table = vector<vector<T>>;\nconst ld eps=1e-9;\n\n//// < \"D:\\D_Download\\Visual Studio 2015\\Projects\\programing_contest_c++\\Debug\\a.txt\" > \"D:\\D_Download\\Visual Studio 2015\\Projects\\programing_contest_c++\\Debug\\b.txt\"\n \n\n/* ??????????????¬ */\n\n#include <complex>\n\ntypedef complex<ld> Point;\n#define rep(i,n) for(int i=0;i<(int)(n);i++)\n#define all(x) (x).begin(),(x).end()\n\n\nconst ld pi = acos(-1.0);\nconst ld dtop = pi / 180.;\nconst ld ptod = 1. / dtop;\n\nnamespace std {\n\tbool operator<(const Point &lhs, const Point &rhs) {\n\t\tif (lhs.real() < rhs.real() - eps) return true;\n\t\tif (lhs.real() > rhs.real() + eps) return false;\n\t\treturn lhs.imag() < rhs.imag();\n\t}\n}\n\n// ????????\\???\nPoint input_Point() {\n\tld x, y;\n\tcin >> x >> y;\n\treturn Point(x, y);\n}\n\n// ????????????????????????\nbool eq(const ld a, const ld b) {\n\treturn (abs(a - b) < eps);\n}\n\n// ??????\nld dot(const Point& a, const Point& b) {\n\treturn real(conj(a) * b);\n}\n\n// ??????\nld cross(const Point& a, const Point& b) {\n\treturn imag(conj(a) * b);\n}\n\n// ??´????????????\nclass Line {\npublic:\n\tPoint a, b;\n\tLine() : a(Point(0, 0)), b(Point(0, 0)) {}\n\tLine(Point a, Point b) : a(a), b(b) {}\n\tPoint operator[](const int _num)const {\n\t\tif (_num == 0)return a;\n\t\telse if (_num == 1)return b;\n\t\telse {\n\t\t\tassert(false);\n\t\t\treturn Point();\n\t\t}\n\t}\n};\n\n// ????????????\nclass Circle {\npublic:\n\tPoint p;\n\tld r;\n\tCircle() : p(Point(0, 0)), r(0) {}\n\tCircle(Point p, ld r) : p(p), r(r) {}\n};\n\n// ccw\n// 1: a,b,c??????????¨???¨?????????????????¶\n//-1: a,b,c???????¨???¨?????????????????¶\n// 2: c,a,b???????????´???????????¶\n//-2: a,b,c???????????´???????????¶\n// 0: a,c,b???????????´???????????¶\nint ccw(const Point& a, const Point &b, const Point &c) {\n\tconst Point nb(b - a);\n\tconst Point nc(c - a);\n\tif (cross(nb, nc) > eps) return 1;   // a,b,c??????????¨???¨?????????????????¶\n\tif (cross(nb, nc) < -eps) return -1; // a,b,c???????¨???¨?????????????????¶\n\tif (dot(nb, nc) < 0) return 2;       // c,a,b???????????´???????????¶\n\tif (norm(nb) < norm(nc)) return -2;  // a,b,c???????????´???????????¶\n\treturn 0;                          // a,c,b???????????´???????????¶\n}\n\n\n/* ???????????? */\n\n// ??´?????¨??´??????????????????\nbool isis_ll(const Line& l, const Line& m) {\n\treturn !eq(cross(l.b - l.a, m.b - m.a), 0);\n}\n\n// ??´?????¨?????????????????????\nbool isis_ls(const Line& l, const Line& s) {\n\treturn isis_ll(l, s) &&\n\t\t(cross(l.b - l.a, s.a - l.a) * cross(l.b - l.a, s.b - l.a) < eps);\n}\n\n// ????????¨?????????????????????\nbool isis_ss(const Line& s, const Line& t) {\n\treturn ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 &&\n\t\tccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0;\n}\n\n// ????????´????????????\nbool isis_lp(const Line& l, const Point& p) {\n\treturn (abs(cross(l.b - p, l.a - p)) < eps);\n}\n\n// ?????????????????????\nbool isis_sp(const Line& s, const Point& p) {\n\treturn (abs(s.a - p) + abs(s.b - p) - abs(s.b - s.a) < eps);\n}\n\n// ??????????¶?\nPoint proj(const Line &l, const Point& p) {\n\tld t = dot(p - l.a, l.b - l.a) / norm(l.a - l.b);\n\treturn l.a + t * (l.b - l.a);\n}\n\n//???????±??????????????????????\nPoint reflect(const Line &l, const Point &p) {\n\tPoint pr = proj(l, p);\n\treturn pr * 2.l - p;\n}\n\n// ??´?????¨??´????????????\nPoint is_ll(const Line &s, const Line& t) {\n\tPoint sv = s.b - s.a, tv = t.b - t.a;\n\tassert(cross(sv, tv) != 0);\n\treturn s.a + sv * cross(tv, t.a - s.a) / cross(tv, sv);\n}\n// ??´?????¨??´????????????\nvector<Point> is_ll2(const Line &s, const Line& t) {\n\tPoint sv = s.b - s.a, tv = t.b - t.a;\n\tif (cross(sv, tv) != 0)return vector<Point>(1, is_ll(s, t));\n\telse {\n\t\tvector<Point>ans;\n\t\tfor (int k = 0; k < 2; ++k) {\n\t\t\tif (isis_sp(s, t[k]) && find(ans.begin(), ans.end(), t[k]) == ans.end())ans.push_back(t[k]);\n\t\t\tif (isis_sp(t, s[k]) && find(ans.begin(), ans.end(), s[k]) == ans.end())ans.push_back(s[k]);\n\t\t}\n\t\treturn ans;\n\t}\n}\n// ????????¨???????????????\n//???????????£????????¨???????????¨assert(false)\nPoint is_ss(const Line &s, const Line& t) {\n\tif (isis_ss(s, t)) {\n\t\tfor (int k = 0; k < 2; ++k) {\n\t\t\tfor (int l = 0; l < 2; ++l) {\n\t\t\t\tif (s[k] == t[l])return s[k];\n\t\t\t}\n\t\t}\n\t\treturn is_ll(s, t);\n\t}\n\telse {\n\t\t//??????isis_ss?????????\n\t\tassert(false);\n\t\treturn Point(0, 0);\n\t}\n}\n// ????????¨???????????????\nvector<Point> is_ss2(const Line &s, const Line& t) {\n\tvector<Point> kouho(is_ll2(s, t));\n\tvector<Point>ans;\n\tfor (auto p : kouho) {\n\t\tif (isis_sp(s, p) && isis_sp(t, p))ans.emplace_back(p);\n\t}\n\treturn ans;\n}\n// ??´?????¨???????????¢\nld dist_lp(const Line& l, const Point& p) {\n\treturn abs(p - proj(l, p));\n}\n\n//??´?????¨??´???????????¢\nld dist_ll(const Line& l, const Line& m) {\n\treturn isis_ll(l, m) ? 0 : dist_lp(l, m.a);\n}\n\n// ??´?????¨??????????????¢\nld dist_ls(const Line& l, const Line& s) {\n\treturn isis_ls(l, s) ? 0 : min(dist_lp(l, s.a), dist_lp(l, s.b));\n}\n\n// ????????¨???????????¢\nld dist_sp(const Line& s, const Point& p) {\n\tPoint r = proj(s, p);\n\treturn isis_sp(s, r) ? abs(r - p) : min(abs(s.a - p), abs(s.b - p));\n}\n\n// ????????¨??????????????¢\nld dist_ss(const Line& s, const Line& t) {\n\tif (isis_ss(s, t)) return 0;\n\treturn min({ dist_sp(s, t.a), dist_sp(s, t.b), dist_sp(t, s.a), dist_sp(t, s.b) });\n}\n\n\n//??´?????¨??´?????????????????????????????????\nLine bisection(const Line &s, const Line &t) {\n\tconst Point laglanju(is_ll(s, t));\n\tconst Point avec = !(abs(laglanju - s[0])<eps) ? s[0] - laglanju : s[1] - laglanju;\n\tconst Point bvec = !(abs(laglanju - t[0])<eps) ? t[0] - laglanju : t[1] - laglanju;\n\n\treturn Line(laglanju, laglanju + (abs(bvec)*avec + abs(avec)*bvec) / (abs(avec) + abs(bvec)));\n}\n\n\n//???????????´?????????????????????\n//???????????´??????????????§???????????¨????¢?????????¨?????????\nPoint  inner_center(const vector<Line>&ls) {\n\tvector<Point>vertics;\n\tfor (int i = 0; i <static_cast<int>(ls.size()); ++i) {\n\t\tvertics.push_back(is_ll(ls[i], ls[(i + 1) % 3]));\n\t}\n\tif (vertics[0] == vertics[1] || vertics[1] == vertics[2] || vertics[2] == vertics[0])return vertics[0];\n\tLine bi1(bisection(Line(vertics[0], vertics[1]), Line(vertics[0], vertics[2])));\n\tLine bi2(bisection(Line(vertics[1], vertics[2]), Line(vertics[1], vertics[0])));\n\tif (bi1[0] == bi2[0])return bi1[0];\n\telse {\n\t\treturn is_ll(bi1, bi2);\n\t}\n}\n\n//???????????´?????????????????????\n//???????????´??????????????§???????????¨????¢?????????¨?????????\nvector<Point>  ex_center(const vector<Line>&ls) {\n\tvector<Point>vertics;\n\tfor (int i = 0; i < static_cast<int>(ls.size()); ++i) {\n\t\tvertics.push_back(is_ll(ls[i], ls[(i + 1) % 3]));\n\t}\n\tif (abs(vertics[0] - vertics[1])<eps || abs(vertics[1] - vertics[2])<eps || (abs(vertics[2] - vertics[0])<eps))return vector<Point>();\n\tvector<Point>ecs;\n\tfor (int i = 0; i < 3; ++i) {\n\t\tLine bi1(bisection(Line(vertics[i], vertics[i] * 2.0l - vertics[(i + 2) % 3]), Line(vertics[i], vertics[(i + 1) % 3])));\n\t\tLine bi2(bisection(Line(vertics[(i + 1) % 3], vertics[(i + 1) % 3] * 2.0l - vertics[(i + 2) % 3]), Line(vertics[(i + 1) % 3], vertics[i])));\n\t\tecs.push_back(is_ll(bi1, bi2));\n\t}\n\treturn ecs;\n}\n\n\n//a,b:??????\n//c:????????§??????\n//???????????´?????????????????¢?????????????±??????????\nvector<Point>  same_dis(const vector<Line>&ls) {\n\tvector<Point>vertics;\n\tvertics.push_back(is_ll(ls[0], ls[2]));\n\tvertics.push_back(is_ll(ls[1], ls[2]));\n\n\tif (abs(vertics[0] - vertics[1]) < eps)return vector<Point>{vertics[0]};\n\tLine bis(bisection(ls[0], ls[1]));\n\tvector<Point>ecs;\n\n\tLine abi(bisection(Line(vertics[0], vertics[1]), ls[0]));\n\tecs.push_back(is_ll(bis, abi));\n\n\n\tLine bbi(bisection(Line(vertics[0], 2.l*vertics[0] - vertics[1]), ls[0]));\n\tecs.push_back(is_ll(bis, bbi));\n\n\treturn ecs;\n}\n/* ??? */\n\n// ?????¨????????????\nvector<Point> is_cc(const Circle& c1, const Circle& c2) {\n\tvector<Point> res;\n\tld d = abs(c1.p - c2.p);\n\tld rc = (d * d + c1.r * c1.r - c2.r * c2.r) / (2 * d);\n\tld dfr = c1.r * c1.r - rc * rc;\n\tif (abs(dfr) < eps) dfr = 0.0;\n\telse if (dfr < 0.0) return res; // no intersection\n\tld rs = sqrt(dfr);\n\tPoint diff = (c2.p - c1.p) / d;\n\tres.push_back(c1.p + diff * Point(rc, rs));\n\tif (dfr != 0.0) res.push_back(c1.p + diff * Point(rc, -rs));\n\treturn res;\n}\n\n//???????????????????????????\n/*  0 => out\n1 => on\n2 => in*/\nint is_in_Circle(const Circle &cir, const  Point& p) {\n\tld dis = abs(cir.p - p);\n\tif (dis > cir.r + eps)return 0;\n\telse if (dis < cir.r - eps)return 2;\n\telse return 1;\n}\n//???lc??????rc??????????????????\n/*0 => out\n1 => on\n2 => in*/\nint Circle_in_Circle(const Circle &lc, const  Circle&rc) {\n\tld dis = abs(lc.p - rc.p);\n\tif (dis < rc.r - lc.r - eps)return 2;\n\telse if (dis>rc.r - lc.r + eps)return 0;\n\telse return 1;\n}\n\n// ?????¨??´????????????\nvector<Point> is_lc(const Circle& c, const Line& l) {\n\tvector<Point> res;\n\tld d = dist_lp(l, c.p);\n\tif (d < c.r + eps) {\n\t\tld len = (d > c.r) ? 0.0 : sqrt(c.r * c.r - d * d); //safety;\n\t\tPoint nor = (l.a - l.b) / abs(l.a - l.b);\n\t\tres.push_back(proj(l, c.p) + len * nor);\n\t\tres.push_back(proj(l, c.p) - len * nor);\n\t}\n\treturn res;\n}\n\n// ?????¨??????????????¢\nvector<Point> is_sc(const Circle& c, const Line& l) {\n\tvector<Point> v = is_lc(c, l), res;\n\tfor (Point p : v)\n\t\tif (isis_sp(l, p)) res.push_back(p);\n\treturn res;\n}\n\n// ?????¨????????\\???\nvector<Line> tangent_cp(const Circle& c, const Point& p) {\n\tvector<Line> ret;\n\tPoint v = c.p - p;\n\tld d = abs(v);\n\tld l = sqrt(norm(v) - c.r * c.r);\n\tif (isnan(l)) { return ret; }\n\tPoint v1 = v * Point(l / d, c.r / d);\n\tPoint v2 = v * Point(l / d, -c.r / d);\n\tret.push_back(Line(p, p + v1));\n\tif (l < eps) return ret;\n\tret.push_back(Line(p, p + v2));\n\treturn ret;\n}\n\n// ?????¨????????\\???\nvector<Line> tangent_cc(const Circle& c1, const Circle& c2) {\n\tvector<Line> ret;\n\tif (abs(c1.p - c2.p) - (c1.r + c2.r) > -eps) {\n\t\tPoint center = (c1.p * c2.r + c2.p * c1.r) / (c1.r + c2.r);\n\t\tret = tangent_cp(c1, center);\n\t}\n\tif (abs(c1.r - c2.r) > eps) {\n\t\tPoint out = (-c1.p * c2.r + c2.p * c1.r) / (c1.r - c2.r);\n\t\tvector<Line> nret = tangent_cp(c1, out);\n\t\tret.insert(ret.end(), all(nret));\n\t}\n\telse {\n\t\tPoint v = c2.p - c1.p;\n\t\tv /= abs(v);\n\t\tPoint q1 = c1.p + v * Point(0, 1) * c1.r;\n\t\tPoint q2 = c1.p + v * Point(0, -1) * c1.r;\n\t\tret.push_back(Line(q1, q1 + v));\n\t\tret.push_back(Line(q2, q2 + v));\n\t}\n\treturn ret;\n}\n//??????????????????????????¢???\nld two_Circle_area(const Circle&l, const Circle&r) {\n\tld dis = abs(l.p - r.p);\n\tif (dis > l.r + r.r)return 0;\n\telse if (dis + r.r < l.r) {\n\t\treturn r.r*r.r*pi;\n\t}\n\telse if (dis + l.r < r.r) {\n\t\treturn l.r*l.r*pi;\n\t}\n\telse {\n\t\tld ans = (l.r)*(l.r)*acos((dis*dis + l.r*l.r - r.r*r.r) / (2 * dis*l.r)) +\n\t\t\t(r.r)*(r.r)*acos((dis*dis + r.r*r.r - l.r*l.r) / (2 * dis*r.r)) -\n\t\t\tsqrt(4 * dis*dis*l.r*l.r - (dis*dis + l.r*l.r - r.r*r.r)*(dis*dis + l.r*l.r - r.r*r.r)) / 2;\n\t\treturn ans;\n\t}\n\n}\n\n/* ????§???¢ */\n\ntypedef vector<Point> Polygon;\n\n// ??¢???\nld area(const Polygon &p) {\n\tld res = 0;\n\tint n = p.size();\n\trep(j, n) res += cross(p[j], p[(j + 1) % n]);\n\treturn res / 2;\n}\n\n//????§???¢????????¢??????\nbool is_counter_clockwise(const Polygon &poly) {\n\tld angle = 0;\n\tint n = poly.size();\n\trep(i, n) {\n\t\tPoint a = poly[i], b = poly[(i + 1) % n], c = poly[(i + 2) % n];\n\t\tangle += arg((c - b) / (b - a));\n\t}\n\treturn angle > eps;\n}\n\n// ??????????????????\n/*0 => out\n1 => on\n2 => in*/\nint is_in_Polygon(const Polygon &poly, const  Point& p) {\n\tld angle = 0;\n\tint n = poly.size();\n\trep(i, n) {\n\t\tPoint a = poly[i], b = poly[(i + 1) % n];\n\t\tif (isis_sp(Line(a, b), p)) return 1;\n\t\tangle += arg((b - p) / (a - p));\n\t}\n\treturn eq(angle, 0) ? 0 : 2;\n}\n//??????????????????2?????????\nenum { out, on, in };\nint convex_contains(const Polygon &P, const Point &p) {\n\tconst int n = P.size();\n\tPoint g = (P[0] + P[n / 3] + P[2 * n / 3]) / 3.0l; // inner-point\n\tint a = 0, b = n;\n\twhile (a + 1 < b) { // invariant: c is in fan g-P[a]-P[b]\n\t\tint c = (a + b) / 2;\n\t\tif (cross(P[a] - g, P[c] - g) > 0) { // angle < 180 deg\n\t\t\tif (cross(P[a] - g, p - g) > 0 && cross(P[c] - g, p - g) < 0) b = c;\n\t\t\telse                                                  a = c;\n\t\t}\n\t\telse {\n\t\t\tif (cross(P[a] - g, p - g) < 0 && cross(P[c] - g, p - g) > 0) a = c;\n\t\t\telse                                                  b = c;\n\t\t}\n\t}\n\tb %= n;\n\tif (cross(P[a] - p, P[b] - p) < 0) return 0;\n\tif (cross(P[a] - p, P[b] - p) > 0) return 2;\n\treturn 1;\n}\n\n// ??????\n//???????????????????????¨????????????????????§??¨???\nPolygon convex_hull(vector<Point> ps) {\n\tint n = ps.size();\n\tint k = 0;\n\tsort(ps.begin(), ps.end());\n\tPolygon ch(2 * n);\n\tfor (int i = 0; i < n; ch[k++] = ps[i++])\n\t\twhile (k >= 2 && ccw(ch[k - 2], ch[k - 1], ps[i]) <= 0) --k;\n\tfor (int i = n - 2, t = k + 1; i >= 0; ch[k++] = ps[i--])\n\t\twhile (k >= t && ccw(ch[k - 2], ch[k - 1], ps[i]) <= 0) --k;\n\tch.resize(k - 1);\n\treturn ch;\n}\n\n\n\n//????????????\nvector<Polygon> convex_cut(const Polygon &ps, const Line& l) {\n\tint n = ps.size();\n\tPolygon q;\n\tPolygon r;\n\trep(i, n) {\n\t\tPoint a = ps[i], b = ps[(i + 1) % n];\n\t\tLine m = Line(a, b);\n\t\tif (ccw(l.a, l.b, a) != -1) q.push_back(a);\n\t\tif (ccw(l.a, l.b, a) != 1) r.push_back(a);\n\t\tif (ccw(l.a, l.b, a) * ccw(l.a, l.b, b) < 0 && isis_ll(l, m)) {\n\t\t\tq.push_back(is_ll(l, m));\n\t\t\tr.push_back(is_ll(l, m));\n\t\t}\n\t}\n\tconst vector<Polygon>polys{ q,r };\n\treturn polys;\n}\n\n\n/* ??¢??¬??????????????? */\nvoid add_Point(vector<Point> &ps, const Point p) {\n\tfor (Point q : ps) if (abs(q - p) < eps) return;\n\tps.push_back(p);\n}\n\ntypedef int Weight;\nstruct edge {\n\tint src, dst;\n\tWeight weight;\n\tedge(int src, int dst, Weight weight) :\n\t\tsrc(src), dst(dst), weight(weight) { }\n};\n\ntypedef vector<edge> edges;\ntypedef vector<edges> graph;\n\nvoid add_edge(graph &g, const int from, const int to, const Weight& weight) {\n\tg[from].push_back(edge{ from, to, weight });\n}\n\ngraph segment_arrangement(const vector<Line> &s, const vector<Point> &p) {\n\tint n = p.size(), m = s.size();\n\tgraph g(n);\n\trep(i, m) {\n\t\tvector<pair<ld, int>> vec;\n\t\trep(j, n) if (isis_sp(s[i], p[j]))\n\t\t\tvec.emplace_back(abs(s[i].a - p[j]), j);\n\t\tsort(all(vec));\n\t\trep(j, vec.size() - 1) {\n\t\t\tint from = vec[j].second, to = vec[j + 1].second;\n\t\t\tadd_edge(g, from, to, static_cast<Weight>(abs(p[from] - p[to])));\n\t\t}\n\t}\n\treturn g;\n}\ngraph sennbunn_arrangement(const vector<Line>&s) {\n\tvector<Point>crss;\n\tfor (int i = 0; i < static_cast<int>(s.size()); ++i) {\n\t\tfor (int j = i + 1; j < static_cast<int>(s.size()); ++j) {\n\t\t\tif (isis_ss(s[i], s[j])) {\n\t\t\t\tcrss.push_back(is_ll2(s[i], s[j])[0]);\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0; i <static_cast<int>(s.size()); ++i) {\n\t\tcrss.push_back(s[i][0]);\n\t\tcrss.push_back(s[i][1]);\n\t}\n\treturn segment_arrangement(s, crss);\n}\n\ngraph Circle_arrangement(const vector<Circle> &c, const vector<Point> &p) {\n\tint n = p.size(), m = c.size();\n\tgraph g(n);\n\trep(i, m) {\n\t\tvector<pair<ld, int>> vec;\n\t\trep(j, n) if (abs(abs(c[i].p - p[j]) - c[i].r) < eps)\n\t\t\tvec.emplace_back(arg(c[i].p - p[j]), j);\n\t\tsort(all(vec));\n\t\trep(j, vec.size() - 1) {\n\t\t\tint from = vec[j].second, to = vec[j + 1].second;\n\t\t\tld angle = vec[j + 1].first - vec[j].first;\n\t\t\tadd_edge(g, from, to, static_cast<Weight>(angle * c[i].r));\n\t\t}\n\t\tif (vec.size() >= 2) {\n\t\t\tint from = vec.back().second, to = vec.front().first;\n\t\t\tld angle = vec.front().first - vec.back().first;\n\t\t\tadd_edge(g, from, to, static_cast<Weight>(angle * c[i].r));\n\t\t}\n\t}\n\treturn g;\n}\n\nint main() {\n\tint x0, y0, x1, y1; cin >> x0 >> y0 >> x1 >> y1;\n\tPoint p1(x0, y0);\n\tPoint p2(x1, y1);\n\tLine l(p0,p1);\n\tint Q; cin >> Q;\n\tcout << setprecision(22) << fixed;\n\twhile (Q--) {\n\t\tint x, y; cin >> x >> y;\n\t\tPoint p2(x, y);\n\t\tint n = ccw(p0, p1, p2);\n\t\tif (n == 1)cout << \"COUNTER_CLOCKWISE\";\n\t\tif (n == -1)cout << \"CLOCKWISE\";\n\n\t\tif (n == 2)cout << \"ONLINE_BACK\";\n\n\t\tif (n == -2)cout << \"ONLINE_FRONT\";\n\n\t\tif (n == 0)cout << \"ON_SEGMENT\";\n\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cmath>\n\nusing namespace std;\n\nstatic const long double EPS = 1e-10;\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2; // p2→p0→p1\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nclass Point{\n    public: \n    long double x,y;\n    Point(long double x = 0.0, long double y = 0.0): x(x), y(y) {}\n    Point operator + (Point p) const { return Point(x+p.x, y+p.y); }\n    Point operator - (Point p) const { return Point(x-p.x, y-p.y); }\n    Point operator * (long double a) const { return Point(x*a, y*a); }\n    Point operator / (long double a) const { return Point(x/a, y/a); }\n    bool operator < (const Point &p) const { return (x != p.x ? x < p.x : y < p.y); }\n    bool operator == (const Point &p) const { return fabsl(x - p.x) < EPS && fabsl(y - p.y) < EPS; }\n    long double abs() const { return sqrt(norm()); }\n    long double norm() const { return x*x + y*y; }\n    long double dot(Point p) const { return x*p.x + y*p.y; }\n    long double cross(Point p) const { return x*p.y - y*p.x; }\n};\n\n\nint ccw(Point p0, Point p1, Point p2){\n    Point a = p1 - p0;\n    Point b = p2 - p0;\n    if(a.cross(b) > EPS) return COUNTER_CLOCKWISE;\n    if(a.cross(b) < -EPS) return CLOCKWISE;\n    if(a.dot(b) < -EPS) return ONLINE_BACK;\n    if(a.norm() < b.norm()) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\nint main(){\n    int x1,y1,x2,y2, n;\n    cin >> x1 >> y1 >> x2 >> y2;\n    Point p = Point(x1, y1), q = Point(x2, y2);\n    cin >> n;\n    int x,y;\n    for(int i=0;i<n;i++){\n        cin >> x >> y;\n        switch(ccw(p, q, Point(x, y))){\n            case COUNTER_CLOCKWISE:\n                cout << \"COUNTER_CLOCKWISE\";\n                break;\n            case CLOCKWISE:\n                cout << \"CLOCKWISE\";\n                break;\n            case ONLINE_BACK:\n                cout << \"ONLINE_BACK\";\n                break;\n            case ONLINE_FRONT:\n                cout << \"ONLINE_FRONT\";\n                break;\n            default:\n                cout << \"ON_SEGMENT\";\n                break;\n        };\n        cout << \"\\n\";\n    }\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "//Counter-Clockwise\n#include <iostream>\n#include <math.h>\n#include <iomanip>\n\nusing namespace std;\n\nstatic const double ESP = 1e-10;\n\nbool equals(double a, double b) { return fabs(a - b) < ESP; }\n\nclass Point {\npublic:\n    double x, y;\n\n    explicit Point(double x = 0, double y = 0): x(x), y(y) {}\n\n    Point operator + (const Point &p) const { return Point(x + p.x, y + p.y); }\n    Point operator - (const Point &p) const { return Point(x - p.x, y - p.y); }\n    Point operator * (double a) { return Point(a * x, a * y); }\n    Point operator / (double a) { return Point(a / x, a / y); }\n\n    double norm() { return x * x + y * y; }\n    double abs() { return sqrt(norm()); }\n\n    bool operator < (const Point &p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point &p) const {\n        return fabs(x - p.x) < ESP && fabs(y - p.y) < ESP;\n    }\n};\n\ntypedef Point Vector;\n\nstruct Segment {\n    Point p1, p2;\n    Segment(Point p1, Point p2): p1(p1), p2(p2) {}\n};\n\ndouble dot(Vector a, Vector b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n    return a.x * b.y - a.y * b.x;\n}\n\nbool isParallel(Vector v1, Vector v2) {\n    return equals(cross(v1, v2), 0.0);\n}\n\nbool isOrthogonal(Vector v1, Vector v2) {\n    return equals(dot(v1, v2), 0.0);\n}\n\nPoint project(Segment s, Point p) {\n    Vector base = s.p2 - s.p1;\n    return s.p1 + (base * (dot(base, p - s.p1) / base.norm()));\n}\n\nPoint reflect(Segment s, Point p) {\n    return p + (project(s, p) - p) * 2;\n}\n\nenum {\n    COUNTER_CLOCKWISE,\n    CLOCKWISE,\n    ONLINE_BACK,\n    ONLINE_FRONT,\n    ON_SEGMENT\n};\n\nint ccw(Point p0, Point p1, Point p2) {\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if (cross(a, b) > ESP) return COUNTER_CLOCKWISE;\n    else if (cross(a, b) < -ESP) return CLOCKWISE;\n    else if (dot(a, b) < -ESP) return ONLINE_BACK;\n    else if (a.norm() < b.norm()) return ONLINE_FRONT;\n    else return ON_SEGMENT;\n}\n\nint main() {\n    int q;\n    double x0, y0, x1, y1, x2, y2;\n    cin >> x0 >> y0 >> x1 >> y1 >> q;\n    Point p0 = Point(x0, y0), p1 = Point(x1, x2);\n    for(int i = 0; i < q; i++) {\n        cin >> x2 >> y2;\n        Point p2 = Point(x2, y2);\n        switch(ccw(p0, p1, p2)) {\n            case COUNTER_CLOCKWISE:\n                cout << \"COUNTER_CLOCKWISE\" << endl;\n                break;\n            case CLOCKWISE:\n                cout << \"CLOCKWISE\" << endl;\n                break;\n            case ONLINE_BACK:\n                cout << \"ONLINE_BACK\" << endl;\n                break;\n            case ONLINE_FRONT:\n                cout << \"ONLINE_FRONT\" << endl;\n                break;\n            case ON_SEGMENT:\n                cout << \"ON_SEGMENT\" << endl;\n                break;\n            default:\n                break;\n        }\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cmath>\n\nusing namespace std;\nconst double EPS=1e-9;\nconst double PI=3.141592653589793238;//18 ragham\nbool Equal(double d1,double d2)\n{ return fabs(d1-d2)<EPS;}\n\nstruct line{double a,b,c;};\nstruct vec\n{\n  double x,y;\n  vec(double _x,double _y)\n  {x=_x;  y=_y;}\n};\n  \nstruct point_i\n{\n  int x,y;\n  point_i(int _x,int _y){x=_x;y=_y;}\n};\nstruct point\n{\n  double x,y;\n  point(double _x=0,double _y=0){x=_x;y=_y;}\n  bool operator < (point other)\n  {  \n    if(fabs(x-other.x)<EPS)\n      return y<other.y;\n    return x<other.x;}\n  bool operator == (point other)\n  {return (fabs(x-other.x)<EPS) && (fabs(y-other.y)<EPS) ;}\n  \n  \n};\ndouble Hypot(double dx,double dy)\n{\n  return sqrt(dx*dx+dy*dy);\n}\ndouble Distance(point p1,point p2)\n{\n  return hypot(p1.x-p2.x,p1.y-p2.y);\n}\ndouble DEG_to_RAD(double theta)\n{\n  return theta*PI/180;\n}\npoint rotate(point p, double theta)//theta is degree\n{\n  \n  //rotation matrixR(theta) = [cos(theta) - sin(theta)]\n  //                          [sin(theta) + cos(theta)]\n  //usage: [x'] = R(theta)* [x]\n  //       [y']             [y]\n  double rad=DEG_to_RAD(theta);\n  return point(p.x * cos(rad) - p.x * sin(rad) ,\n\t       p.y * sin(rad) + p.y * cos(rad)  );\n}\nvoid PointsToLine(point p1,point p2,line *l)\n{\n  if(p1.x==p2.x) // vertical line handled here\n    { l->a=1.0;   l->b= 0.0 ; l->c=-p1.x;}\n  else\n    {\n      l->a=-(double)(p1.y-p2.y)/(p1.x-p2.x);\n      l->b=1.0;\n      l->c=-(double)(l->a * p1.x) - (l->b*p1.y);\n    }\n}\nbool AreParallel(line l1,line l2)\n{\n  return Equal(l1.a,l2.a) && Equal(l1.b,l2.b);\n}\nbool AreSame(line l1,line l2)\n{\n  return AreParallel(l1,l2) && Equal(l1.c,l2.c);\n}\nbool AreIntersect(line l1,line l2,point *p)//TO BE CHECKED (mine)\n{\n  if(AreSame(l1,l2))\n    return false;\n  if(AreParallel(l1,l2))\n    return false;\n\n  //solving\n  double delta=(double)l1.a*l2.b - l1.b*l2.a;\n  if(Equal(delta,0))//this if should never be true because lines are't parallel\n    return false;\n  p->x= (double)(l1.c*l2.b-l2.c*l1.b) / delta;\n  p->y= (double)(l1.a*l2.c-l2.a*l1.c) / delta;\n  return true;\n}\nvec ToVector(point p1,point p2)\n{\n  return vec(p2.x-p1.x,p2.y-p1.y);\n}\nvec ScaleVector(vec v, double s) // v*=s\n{\n  return vec(v.x*s,v.y*s);\n}\npoint Translate(point p,vec move)//moves point p in direction of vector move\n{\n  return point(p.x+move.x , p.y + move.y);\n}\ndouble Dot(double x1,double y1 ,double x2,double y2)\n{ return x1*x2+y1*y2;};\ndouble Cross(point p,point q,point r)\n{\n  return (r.x-q.x)*(p.y-q.y)-(r.y-q.y)*(p.x-q.x);\n}\nbool Collinear(point p,point q,point r)\n{\n  return Equal(Cross(p,q,r),0);\n}\n//returns true if point r is on the left side of line pq\nbool CCW(point p,point q,point r)\n{\n   //can be modified to accept collinear ( >0 instead of >EPS )\n  if(Cross(p,q,r) > EPS)\n    return true;\n  return false;\n}\n\n// ****************************### END OF LIBRARY ###************************\n\npoint p,q,r;\n\nvoid alg()\n{\n  if(Collinear(p,q,r))\n    {\n      vec v1=ToVector(p,q);\n      vec v2=ToVector(p,r);\n      if(Dot(v1.x,v1.y , v2.x,v2.y)<0){\n\tcout<<\"ONLINE_BACK\"<<endl;\n\treturn;}\n      else if(Hypot(v1.x,v1.y)>=Hypot(v2.x,v2.y))\n\tcout<<\"ON_SEGMENT\"<<endl;\n      else\n\tcout<<\"ONLINE_FRONT\"<<endl;\n      return;\n    }\n  else if(CCW(p,q,r))\n    cout<<\"COUNTER_CLOCKWISE\"<<endl;\n  else\n    cout<<\"CLOCKWISE\"<<endl;\n}\nvoid input()\n{\n  int x,y;\n  cin>>x>>y;\n  p=point(x,y);\n  cin>>x>>y;\n  q=point(x,y);\n   int n;\n  cin>>n;\n  for(int i=1;i<=n;i++){\n    cin>>x>>y;\n    r=point(x,y);\n    alg();\n  }\n}\nint main()\n{\n    input();\n   \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs(a) - (b)) < EPS)\n\nusing namespace std;\n\nclass Point {\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0) :x(x), y(y) {}\n\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double s) { return Point(x * s, y * s); }\n\tPoint operator / (double s) { return Point(x / s, y / s); }\n\n\tdouble abs() {\n\t\treturn sqrt(norm());\n\t}\n\tdouble norm() {\n\t\treturn x * x + y * y;\n\t}\n\n\tbool operator < (const Point &p) const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n\n\tbool operator == (const Point &p) const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n\n};\ntypedef Point Vector;\n\ndouble cross(Vector a, Vector b) {\n\treturn a.x * b.y - a.y * b.x;\n}\n\ndouble dot(Vector a, Vector b) {\n\treturn a.x*b.x + a.y * b.y;\n}\nconst int COUNTER_CLOCKWISE = 1;\nconst int CLOCKWISE = -1;\nconst int ONLINE_BACK = 2;\nconst int ONLINE_FRONT = -2;\nconst int ON_SEGMENT = 0;\n\n// Calculate the relation of points\nint ccw(Point p0, Point p1, Point p2)\n{\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS) return CLOCKWISE;\n\tif (dot(a, b) < -EPS) return ONLINE_BACK;\n\tif (a.norm() < b.norm()) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\nint main() {\n\t// Input\n\tdouble x, y;\n\tcin >> x >> y;\n\tPoint p0(x,y);\n\tcin >> x >> y;\n\tPoint p1(x, y);\n\tint q;\n\tcin >> q;\n\tfor (int i = 0; i < q; i++) {\n\t\tcin >> x >> y;\n\t\tPoint p2(x, y);\n\t\t// CCW\n\t\tswitch (ccw(p0,p1,p2))\n\t\t{\n\t\tcase -1: cout << \"CLOCKWISE\" << endl;\n\t\t\tbreak;\n\t\tcase 1: cout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t\tbreak;\n\t\tcase -2: cout << \"ONLINE_FRONT\" << endl;\n\t\t\tbreak;\n\t\tcase 2: cout << \"ONLINE_BACK\" << endl;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t\tbreak;\n\t\t}\n\t\t\n\t}\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <complex>\n#include <algorithm>\nusing namespace std;\n\ntypedef long double Real;\ntypedef complex<Real> Point;\n#define PCR Point const &\n#define X real()\n#define Y imag()\n\nconst Real EPS = 1e-10;\nconst Real INF = 1e100;\nconst Real PI = acos(-1);\n\nstruct Segment {\n    Point p[2];\n    Segment (PCR a = Point(), PCR b = Point()){\n        p[0] = a, p[1] = b;\n    }\n    Point & operator [] (int k) { return p[k]; }\n    Point const & operator [] (int k) const { return p[k]; }\n};\ntypedef vector<Point> Polygon;\nstruct Circle { Real radius; Point center; };\n\nReal dot(PCR a, PCR b){\n    return a.X*b.X + a.Y*b.Y;\n}\nReal cross(PCR a, PCR b){\n    return a.X*b.Y - a.Y*b.X;\n}\n\nPoint pSP(Segment const & s, PCR p){\n    Point base = s[1] - s[0];\n    Real r = dot(p - s[0], base) / norm(base);\n    return s[0] + base * r;\n}\n\nPoint rSP(Segment const & s, PCR p){\n    Point v = pSP(s,p) - p;\n    return p + v * Real(2);\n}\n\nenum { LEFT = 1, RIGHT = -1, BACK = 2, FRONT = -2, ON = 0 };\nint ccw(PCR x, PCR p, PCR q){\n    // 端点を含む\n    // コメントインすると端点を含まなくなる\n    Point a = p - x, b = q - x;\n    if(cross(a,b) > EPS) return LEFT;\n    if(cross(a,b) < -EPS) return RIGHT;\n    // if(abs(a) < EPS) return BACK;\n    if(dot(a,b) < -EPS) return BACK;\n    // if(abs(b) < EPS) return FRONT;\n    if(norm(a) < norm(b)) return FRONT;\n    return ON;\n}\n\n#include <iostream>\n#include <cstdio>\n\nint main(){\n    Segment s;\n    Real x,y;\n    cin >> x >> y;\n    s[0] = Point(x,y);\n    cin >> x >> y;\n    s[1] = Point(x,y);\n    int q;\n    cin >> q;\n    for(int i=0;i<q;i++){\n        cin >> x >> y;\n        int c = ccw(s[0],s[1],Point(x,y));\n        if(c==LEFT) puts(\"COUNTER_CLOCKWISE\");\n        if(c==RIGHT) puts(\"CLOCKWISE\");\n        if(c==BACK) puts(\"ONLINE_BACK\");\n        if(c==FRONT) puts(\"ONLINE_FRONT\");\n        if(c==ON) puts(\"ON_SEGMENT\");\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#include<string>\n#include<cstdlib>\n#include<map>\n#include<iomanip>\n#include<sstream>\n#include<vector>\n#include<stack>\n#include<queue>\n#include<math.h>\n#include<complex>\nusing namespace std;\n\nint main(){\n\tcout << fixed << setprecision(10);\n\tconst long double EPS=1e-8;\n\tlong double Re,Im;\n\tint q;\n\tcomplex<long double>p1,p2;\n\t\n\tcin>>Re>>Im;\n\tp1.real(Re);\n\tp1.imag(Im);\n\tcin>>Re>>Im;\n\tp2.real(Re);\n\tp2.imag(Im);\n\tcin>>q;\n\t\n\tfor(int i=0;i<q;i++){\n\t\tcin>>Re>>Im;\n\t\tcomplex<long double>tmp(Re,Im),p1_copy=p1,p2_copy=p2;\n\t\t\n\t\t\n\t\ttmp-=p1_copy;\n\t\tp2_copy-=p1_copy;\n\t\tcomplex<long double>p1_re=p1_copy;\n\t\tp1_copy-=p1_copy;\n\t\ttmp=tmp/p2_copy;\n\t\tcomplex<long double>p2_re=p2_copy;\n\t\tp2_copy=p2_copy/p2_copy;\n      \n        \n\n\t\tif(tmp.imag()>EPS){\n\t\t\tcout<<\"COUNTER_CLOCKWISE\"<<endl;\n\t\t}else if(tmp.imag()<-EPS){\n\t\t\tcout<<\"CLOCKWISE\"<<endl;\n\t\t}else if(tmp.real()<p1_copy.real()){\n\t\t\tcout<<\"ONLINE_BACK\"<<endl;\n\t\t\t\n\t\t}else if(tmp.real()<=p2_copy.real()){\n\t\t\tcout<<\"ON_SEGMENT\"<<endl;\n\t\t}else{\n\t\t\tcout<<\"ONLINE_FRONT\"<<endl;\n\t\t}\n\t}\n\t\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define all(vec) vec.begin(), vec.end()\n#define pb push_back\n#define eb emplace_back\nusing namespace std;\nusing ll = long long;\nusing P = pair<ll, ll>;\ntemplate <class T>\nusing V = vector<T>;\nconstexpr ll INF = (1LL << 30) - 1LL;\nconstexpr ll MOD = 1e9 + 7;\nconstexpr int dx[4] = {0, 1, 0, -1}, dy[4] = {1, 0, -1, 0};\ntemplate <class T>\nvoid chmin(T &a, T b) { a = min(a, b); }\ntemplate <class T>\nvoid chmax(T &a, T b) { a = max(a, b); }\nvoid ok() { cerr << \"ok\" << endl; }\nusing D = double;\nusing Point = complex<D>;\nconst D eps = 1e-40;\ninline int sgn(const D &a) { return (a < -eps) ? -1 : (a > eps) ? 1 : 0; }\ninline D cross(const Point &a, const Point &b) {\n    return a.real() * b.imag() - a.imag() * b.real();\n}\ninline D dot(const Point &a, const Point &b) {\n    return a.real() * b.real() + a.imag() * b.imag();\n}\nistream &operator>>(istream &is, Point &p) {\n    D a, b;\n    is >> a >> b;\n    p = Point(a, b);\n    return is;\n}\ninline int ccw(const Point &a, const Point &b, const Point &c) {\n    D d = cross(b - a, c - a);\n    if (sgn(d) > 0) {\n        return +1; //counter-clockwise\n    } else if (sgn(d) < 0) {\n        return -1; //clockwise\n    } else {\n        if (sgn(dot(b - a, c - a)) < 0) {\n            return -2; //c,a,b\n        } else if (sgn(dot(a - b, c - b)) < 0) {\n            return +2; //a,b,c\n        }\n    }\n    return 0; //a,c,b\n}\ninline Point projection(const Point &p, const Point &a, const Point &b) { //a to b\n    return p + (dot(a - p, b - p) / norm(a - p)) * (a - p);\n}\ninline Point reflection(const Point &p, const Point &a, const Point &b) {\n    return b + (projection(p, a, b) - b) * static_cast<D>(2.0);\n}\nint main() {\n    cin.tie(0);\n    ios::sync_with_stdio(0);\n    Point p0, p1;\n    cin >> p0 >> p1;\n    int q;\n    cin >> q;\n    while (q--) {\n        Point p2;\n        cin >> p2;\n        int c = ccw(p0, p1, p2);\n        if (c == 1) {\n            cout << \"COUNTER_CLOCKWISE\\n\";\n        } else if (c == -1) {\n            cout << \"CLOCKWISE\\n\";\n        } else if (c == -2) {\n            cout << \"ONLINE_BACK\\n\";\n        } else if (c == 2) {\n            cout << \"ONLINE_FRONT\\n\";\n        } else {\n            cout << \"ON_SEGMENT\\n\";\n        }\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <cmath>\nusing namespace std;\n#define EPS (1e-10)\n\nstatic const int COUNTER_CLOCKWISE=1;\nstatic const int CLOCKWISE=-1;\nstatic const int ONLINE_BACK=2;\nstatic const int ONLINE_FRONT=-2;\nstatic const int ON_SEGMENT=0;\n\nstruct Point { double x, y; };//点\nstruct Segment { Point p1, p2; };//線\ndouble dot(Point a, Point b) {//内積\n    return a.x * b.x + a.y * b.y;\n}\ndouble cross(Point a, Point b) {//外積\n    return a.x * b.y - a.y * b.x;\n}\ndouble norm(Point a) {\n    return a.x * a.x + a.y * a.y;\n}\ndouble absv(Point a) {\n    return sqrt(norm(a));\n}\nPoint project(Segment s, Point p) {\n    Point base, q;\n    Point ans;\n    base.x = s.p2.x - s.p1.x;\n    base.y = s.p2.y - s.p1.y;\n    q.x = p.x - s.p1.x;\n    q.y = p.y - s.p1.y;\n    double r = dot(q, base) / norm(base);\n    ans.x = s.p1.x + base.x * r;\n    ans.y = s.p1.y + base.y * r;\n    return ans;\n}\nPoint reflect(Segment s, Point p) {\n    Point ans;\n    ans.x = p.x + (project(s, p).x - p.x) * 2.0;\n    ans.y = p.y + (project(s, p).y - p.y) * 2.0;\n    return ans;\n}\n/*double getPointDistance(Point a, Point b) {\n    Point ans;\n    ans.x = a.x - b.x;\n    ans.y = a.y - b.y;\n    absv(ans);\n}\ndouble getDistanceLP(Segment l, Point p) {\n    Point tmp, tmp2, ans;\n    tmp.x = l.p2.x - l.p1.x;\n    tmp.y = l.p2.y - l.p1.y;\n    tmp2.x = p.x - l.p1.x;\n    tmp2.y = p.y - l.p1.y;\n    return absv(cross(tmp, tmp2) / absv(tmp));\n}\ndouble getDistanceSP(Segment s, Point p) {\n    Point t1, t2, t3, t4;\n    t1.x = s.p2.x - s.p1.x;\n    t1.y = s.p2.y - s.p1.y;\n    t2.x = p.x - s.p1.x;\n    t2.y = p.y - s.p1.y;\n    t3.x = s.p1.x - s.p2.x;\n    t3.y = s.p1.y - s.p2.y;\n    t4.x = p.x - s.p2.x;\n    t4.y = p.y - s.p2.y;\n    if (dot(t1, t2) < 0.0)return absv(t2);\n    if (dot(t3, t4) < 0.0)return absv(t4);\n    return getDistanceLP(s, p);\n}*/\nint ccw(Point p0,Point p1,Point p2){\n    Point a,b;\n    a.x=p1.x-p0.x;\n    a.y=p1.y-p0.y;\n    b.x=p2.x-p0.x;\n    b.y=p2.y-p0.y;\n    if(cross(a,b)>EPS)return COUNTER_CLOCKWISE;\n    if(cross(a,b)<(-EPS))return CLOCKWISE;\n    if(dot(a,b)<(-EPS))return ONLINE_BACK;\n    if(norm(a)<norm(b))return ONLINE_FRONT;\n    \n    return ON_SEGMENT;\n}\nbool intersect(Point p1,Point p2,Point p3,Point p4){\n    return(ccw(p1,p2,p3)*ccw(p1,p2,p4)<=0 && ccw(p3,p4,p1)*ccw(p3,p4,p2)<=0);\n}\nbool intersectS(Segment s1,Segment s2){\n    return intersect(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n/*double getDistance(Segment s1,Segment s2){\n    if(intersectS(s1,s2))return 0.0;\n    return min(min(getDistanceSP(s1,s2.p1)),getDistanceSP(s1,s2.p2)),min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n}*/\n\nint main(void) {\n    Point p0,p1,p2;\n    cin >> p0.x >> p0.y >> p1.x >> p1.y;\n    int n,ret;cin >> n;\n    for (int i = 0; i < n; i++) {\n        cin >> p2.x >> p2.y;\n        ret=ccw(p0,p1,p2);\n        if(ret==1)cout<<\"COUNTER_CLOCKWISE\"<<endl;\n        if(ret==0)cout<<\"ON_SEGMENT\"<<endl;\n        if(ret==-1)cout<<\"CLOCKWISE\"<<endl;\n        if(ret==2)cout<<\"ONLINE_BACK\"<<endl;\n        if(ret==-2)cout<<\"ONLINE_FRONT\"<<endl;\n        //cout << fixed << setprecision(10) <<  << \" \" << ans.y << endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <cmath>\nusing namespace std;\n\nint x_0, y_0, x_1, y_1;\nint q;\nint x, y;\n\nint choice();\nint gaiseki(int, int, int, int);\nint naiseki(int, int, int, int);\ndouble norm(int, int);\nint main(){\n  cin >> x_0 >> y_0 >> x_1 >> y_1;\n\n  cin >> q;\n  string s[] = {\"COUNTER_CLOCKWISE\", \"CLOCKWISE\", \"ONLINE_BACK\", \"ON_SEGMENT\", \"ONLINE_FRONT\"};\n\n  for(int i=0; i<q; i++){\n    cin >> x >> y;\n    cout << s[choice()] << endl;\n  }\n\n  return 0;\n}\n\nint choice(){\n  if(gaiseki(x_1-x_0, y_1-y_0, x-x_0, y-y_0)>0) return 0;\n  else if(gaiseki(x_1-x_0, y_1-y_0, x-x_0, y-y_0)<0) return 1;\n  else{\n    if(naiseki(x_1-x_0, y_1-y_0, x-x_0, y-y_0)<0){\n      return 2;\n    }else{\n      if(norm(x-x_0, y-y_0)<norm(x_1-x_0, y_1-y_0)) return 3;\n      else return 4;\n    }\n  }\n}\n\nint gaiseki(int ax, int ay, int bx, int by){\n  return ax*by - ay*bx;\n}\n\nint naiseki(int ax, int ay, int bx, int by){\n  return ax*bx + ay*by;\n}\n\ndouble norm(int ax, int ay){\n  return sqrt(ax*ax+ay*ay);\n}\n\n"
  },
  {
    "language": "C++",
    "code": "\n\n/*\n@title Macro\n@category template\n*/\n#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i,N) for(int i=0;i<int(N);++i)\n#define rep1(i,N) for(int i=1;i<int(N);++i)\n#define all(a) (a).begin(),(a).end()\n#define print(v) { cerr<<#v<<\": [ \"; for(auto _ : v) cerr<<_<<\", \"; cerr<<\"]\"<<endl; }\n#define printpair(v) { cerr<<#v<<\": [ \"; for(auto _ : v) cerr<<\"{\"<<_.first<<\",\"<<_.second<<\"}\"<<\", \"; cerr<<\"]\"<<endl; }\n#define dump(x) cerr<<#x<<\": \"<<x<<endl;\n#define bit(k) (1LL<<(k))\n#define Yes \"Yes\"\n#define No \"No\"\n#define YES \"YES\"\n#define NO \"NO\"\ntypedef long long ll;\n\ntemplate< typename T1, typename T2 >\nostream &operator<<(ostream &os, const pair< T1, T2 >& p) {\n  os << \"{\" <<p.first << \", \" << p.second << \"}\";\n  return os;\n}\ntemplate <class T> using vec = vector<T>;\ntemplate <class T> using vvec = vector<vec<T>>;\n\ntemplate<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return true; } return false; }\ntemplate<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return true; } return false; }\n\nconst int INF = (ll)1e9;\nconst ll INFLL = (ll)1e18+1;\nconst ll MOD = (ll)1e9+7;\n\nconst double PI = acos(-1.0);\n\nconst int dx[8] = {1, 0, -1, 0, 1, -1, -1, 1};\nconst int dy[8] = {0, 1, 0, -1, 1, 1, -1, -1};\nconst string dir = \"DRUL\";\n\n\n#line 1 \"/Users/knaga/programming/procon_library/geometory/template.cpp\"\n\n\n#line 5 \"/Users/knaga/programming/procon_library/geometory/template.cpp\"\n/*\n@title Geometory/template.cpp\n@category Geometory\n*/\n\ntypedef complex<double> Point;\ntypedef pair<Point, Point> Segment;\n#define EPS (1e-10)\n#define EQ(a, b) (abs((a) - (b)) < EPS)\nPoint operator*(const Point &p, const double &d) {\n  return Point(real(p) * d, imag(p) * d);\n}\n// 内積\ndouble dot(Point a, Point b){\n    return (a.real() * b.real() + a.imag() * b.imag());\n}\n//外積\ndouble cross(const Point &a, const Point &b){\n    return (a.real() * b.imag() - a.imag() * b.real());\n}\n\n/*\n\"https://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/2/CGL_1_A\"\n直線 l に p から引いた交点を求める\n*/\nPoint projection(const Segment &l, const Point &p){\n    double t = dot(p - l.first, l.second - l.first) / norm(l.second - l.first);\n    return l.first + t * (l.second - l.first);\n}\n/*\n直線 l に関して線対称な点を求める\n*/\nPoint reflection(const Segment &l, const Point &p){\n    return p + (projection(l,p)-p)*2.0;\n}\n/*\ncrockwise\n1: 時計回り\n2: 反時計回り\n一直線\n+2: a -> b -> c\n-2: c -> a -> b\n0: a -> c -> c\n*/\nint ccw(const Point &a, const Point &b, const Point &c){\n    Point x = b - a;\n    Point y = c - a;\n    if(cross(x,y) > EPS)return 1;\n    if(cross(x,y) < -EPS)return -1;\n    if(dot(x,y) < -EPS)return +2;\n    if(norm(x) < norm(y))return -2;\n    return 0;\n}\nbool is_intersected_ls(Point a1, Point a2, Point b1, Point b2){\n    return (cross(a2-a1, b1-a1)*cross(a2-a1, b2-b1) < EPS) && (cross(b2-b1, a1-b1)*cross(b2-b1, a2-b1) < EPS);\n}\n\n\n#line 4 \"CGL_1_C.test.cpp\"\n\n#define ERROR \"1e-8\"\nint main(){\n    cout << fixed << setprecision(20);\n    int xp1, yp1, xp2, yp2;\n    cin >> xp1 >> yp1 >> xp2 >> yp2;\n    Point p1(xp1, yp1);\n    Point p2(xp2, yp2);\n    int q;\n    cin >> q;\n    rep(_, q){\n        int px, py;\n        cin >> px >> py;\n        Point p(px, py);\n        int res = ccw(p1, p2, p);\n        if (res == +1)cout << \"COUNTER_CLOCKWISE\" << endl;\n        if (res == -1)cout << \"CLOCKWISE\" << endl;\n        if (res == +2)cout << \"ONLINE_BACK\" << endl;\n        if (res == -2)cout << \"ONLINE_FRONT\" << endl;\n        if (res == +0)cout << \"ON_SEGMENT\" << endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define TemplateVersion \"3.4.0\"\n// Useful Marcos\n//====================START=====================\n// Compile use C++11 and above\n#ifdef LOCAL\n#define debug(args...)                           \\\n    {                                            \\\n        string _s = #args;                       \\\n        replace(_s.begin(), _s.end(), ',', ' '); \\\n        stringstream _ss(_s);                    \\\n        istream_iterator<string> _it(_ss);       \\\n        err(_it, args);                          \\\n    }\nvoid err(istream_iterator<string> it)\n{\n}\ntemplate <typename T, typename... Args>\nvoid err(istream_iterator<string> it, T a, Args... args)\n{\n    cerr << *it << \" = \" << a << endl;\n    err(++it, args...);\n}\n#define MSG cout << \"Finished\" << endl\n#else\n#define debug(args...)\n#define MSG\n#endif\n#if __cplusplus >= 201703L\ntemplate <typename... Args>\nvoid readln(Args &... args)\n{\n    ((cin >> args), ...);\n}\ntemplate <typename... Args>\nvoid writeln(Args... args)\n{\n    ((cout << args << \" \"), ...);\n    cout << endl;\n}\n#elif __cplusplus >= 201103L\nvoid readln()\n{\n}\ntemplate <typename T, typename... Args>\nvoid readln(T &a, Args &... args)\n{\n    cin >> a;\n    readln(args...);\n}\nvoid writeln()\n{\n    cout << endl;\n}\ntemplate <typename T, typename... Args>\nvoid writeln(T a, Args... args)\n{\n    cout << a << \" \";\n    writeln(args...);\n}\n#endif\n#if __cplusplus >= 201103L\n#define FOR(_i, _begin, _end) for (auto _i = _begin; _i < _end; _i++)\n#define FORR(_i, _begin, _end) for (auto _i = _begin; _i > _end; _i--)\n#else\n#define FOR(_i, _begin, _end) for (int _i = (int)_begin; _i < (int)_end; _i++)\n#define FORR(_i, _begin, _end) for (int _i = (int)_begin; _i > (int)_end; _i--)\n#define nullptr NULL\n#endif\n#if __cplusplus >= 201103L\n#define VIS(_kind, _name, _size) \\\n    vector<_kind> _name(_size);  \\\n    for (auto &i : _name)        \\\n        cin >> i;\n#else\n#define VIS(_kind, _name, _size)    \\\n    vector<_kind> _name;            \\\n    _name.resize(_size);            \\\n    for (int i = 0; i < _size; i++) \\\n        cin >> _name[i];\n#endif\n// alias\n#define mp make_pair\n#define pb push_back\n#define eb emplace_back\n#define all(x) (x).begin(), (x).end()\n#define tcase() \\\n    int T;      \\\n    cin >> T;   \\\n    FOR(kase, 1, T + 1)\n// Swap max/min\ntemplate <typename T>\nbool smax(T &a, const T &b)\n{\n    if (a > b)\n        return false;\n    a = b;\n    return true;\n}\ntemplate <typename T>\nbool smin(T &a, const T &b)\n{\n    if (a < b)\n        return false;\n    a = b;\n    return true;\n}\n// ceil divide\ntemplate <typename T>\nT cd(T a, T b)\n{\n    return (a + b - 1) / b;\n}\n// min exchange\ntemplate <typename T>\nbool se(T &a, T &b)\n{\n    if (a < b)\n        return false;\n    swap(a, b);\n    return true;\n}\n// A better MAX choice\nconst int INF = 0x3f3f3f3f;\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int, int> pii;\ntypedef vector<int> vi;\ntypedef vector<ll> vll;\ntypedef set<int> si;\ntypedef vector<string> cb;\n//====================END=====================\n\n// Constants here\nconst double EPS = 1e-10;\nconst double PI = acos(-1);\n\ntypedef double db;\n\nint sgn(db x)\n{\n    if (abs(x) < EPS)\n        return 0;\n    if (x < 0)\n        return -1;\n    return 1;\n}\n\ninline db sqr(db x) { return x * x; }\n\n// Point/Vector\nstruct Point\n{\n    db x, y;\n\n    Point() : x(0.0), y(0.0) {}\n\n    Point(db _x, db _y) : x(_x), y(_y) {}\n\n    bool operator==(const Point &p)\n    {\n        return sgn(x - p.x) == 0 && sgn(y - p.y) == 0;\n    }\n\n    bool operator<(const Point &p)\n    {\n        int c = sgn(x - p.x);\n        if (c)\n            return c == -1;\n        return sgn(y - p.y) == -1;\n    }\n\n    Point operator+(const Point &p) { return Point(x + p.x, y + p.y); }\n    Point operator-(const Point &p) { return Point(x - p.x, y - p.y); }\n    Point operator*(db d) { return Point(x * d, y * d); }\n    Point operator/(db d) { return Point(x / d, y / d); }\n\n    db operator^(const Point &p) { return x * p.y - y * p.x; }\n    db operator*(const Point &p) { return x * p.x + y * p.y; }\n\n    db dis(const Point &p) { return (*this - p).len(); }\n    db alpha() { return atan2(y, x); }\n\n    Point unit() { return *this / len(); }\n\n    Point rotac() { return Point(-y, x); }\n    Point rotcl() { return Point(y, -x); }\n\n    Point rot(Point p, db angle)\n    {\n        Point v = *this - p;\n        db c = cos(angle), s = sin(angle);\n        return Point(p.x + v.x * c - v.y * s, p.y + v.x * s + v.y * c);\n    }\n\n    db len() { return hypot(x, y); }\n    db len2() { return x * x + y * y; }\n\n    db rad(Point a, Point b)\n    {\n        Point ap = a - *this, bp = b - *this;\n        return abs(atan2(abs(ap ^ bp), ap * bp));\n    }\n\n    void read() { cin >> x >> y; }\n    void write() { cout << '(' << x << \", \" << y << \")\\n\"; }\n};\n\n// Line\nstruct Line\n{\n    Point s, e;\n\n    Line(){};\n\n    Line(Point _s, Point _e) : s(_s), e(_e) {}\n\n    Line(Point p, db angle)\n    {\n        s = p;\n        if (sgn(angle - PI / 2))\n            e = (s + Point(1, tan(angle)));\n        else\n            e = (s + Point(0, 1));\n    }\n\n    //ax+by+c=0\n    Line(db a, db b, db c)\n    {\n        if (sgn(a) == 0)\n        {\n            s = Point(0, -c / b);\n            e = Point(1, -c / b);\n        }\n        else if (sgn(b) == 0)\n        {\n            s = Point(-c / a, 0);\n            e = Point(-c / a, 1);\n        }\n        else\n        {\n            s = Point(0, -c / b);\n            e = Point(1, -(c + a) / b);\n        }\n    }\n\n    db len() { return s.dis(e); }\n    db angle()\n    {\n        db ans = atan2(e.y - s.y, e.x - s.x);\n        if (sgn(ans) == -1)\n            ans += PI;\n        if (sgn(ans - PI) == 0)\n            ans -= PI;\n        return ans;\n    }\n\n    // 1 -> On Left\n    // 2 -> On Right\n    // 3 -> On Line BUT MAY NOT ON THE SEGMENT!\n    int relation(Point p)\n    {\n        int c = sgn((p - s) ^ (e - s));\n        if (c < 0)\n            return 1;\n        else if (c > 0)\n            return 2;\n        return 3;\n    }\n\n    bool checkOn(Point p) { return sgn((p - s) ^ (e - s)) == 0 && sgn((p - s) ^ (p - e)) <= 0; }\n\n    bool parallel(Line l) { return sgn((e - s) ^ (l.e - l.s)) == 0; }\n\n    // 0 -> Formal Intersection\n    // 1 -> Informal\n    // 2 -> Not Intersect\n    int crossSS(Line l)\n    {\n        int d1 = sgn((e - s) ^ (l.s - s));\n        int d2 = sgn((e - s) ^ (l.e - s));\n        int d3 = sgn((l.e - l.s) ^ (s - l.s));\n        int d4 = sgn((l.e - l.s) ^ (e - l.s));\n        if ((d1 ^ d2) == -2 && (d3 ^ d4) == -2)\n            return 2;\n        return (d1 == 0 && sgn((l.s - s) * (l.s - e)) <= 0) ||\n               (d2 == 0 && sgn((l.e - s) * (l.e - e)) <= 0) ||\n               (d3 == 0 && sgn((s - l.s) * (s - l.e)) <= 0) ||\n               (d4 == 0 && sgn((e - l.s) * (e - l.e)) <= 0);\n    }\n\n    // 0 -> Formal Intersection\n    // 1 -> Informal\n    // 2 -> Not Intersect\n    int crossLS(Line l)\n    {\n        int d1 = sgn((e - s) ^ (l.s - s));\n        int d2 = sgn((e - s) ^ (l.e - s));\n        if ((d1 ^ d2) == -2)\n            return 2;\n        return (d1 == 0 || d2 == 0);\n    }\n\n    // 0 -> Parallel\n    // 1 -> Same\n    // 2 -> Intersect\n    int crossLL(Line l)\n    {\n        if (this->parallel(l))\n            return l.relation(s) == 3;\n        return 2;\n    }\n\n    Point crossP(Line l)\n    {\n        db a1 = (l.e - l.s) ^ (s - l.s);\n        db a2 = (l.e - l.s) ^ (e - l.s);\n        return Point((s.x * a2 - e.x * a1) / (a2 - a1), (s.y * a2 - e.y * a1) / (a2 - a1));\n    }\n\n    db disPL(Point p) { return abs((p - s) ^ (e - s)) / len(); }\n    db disPS(Point p)\n    {\n        if (sgn((p - s) * (e - s)) < 0 || sgn((p - e) * (s - e)) < 0)\n            return min(p.dis(s), p.dis(e));\n        return disPL(p);\n    }\n    db disSS(Line l) { return min(min(disPS(l.s), disPS(l.e)), min(l.disPS(s), l.disPS(e))); }\n\n    Point proj(Point p) { return s + ((e - s) * ((e - s) * (p - s))) / ((e - s).len2()); }\n    Point refl(Point p)\n    {\n        Point q = proj(p);\n        return Point(2 * q.x - p.x, 2 * q.y - p.y);\n    }\n\n    bool operator==(Line l) { return s == l.s && e == l.e; }\n\n    void adjust()\n    {\n        if (e < s)\n            swap(s, e);\n    }\n\n    void read()\n    {\n        s.read();\n        e.read();\n    }\n\n    void write()\n    {\n        cout << \"Line:\\n\";\n        s.write();\n        e.write();\n    }\n};\n\n// Pre-Build Function\ninline void build()\n{\n}\n\n// Actual Solver\ninline void solve()\n{\n    Line l;\n    l.read();\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        Point p;\n        p.read();\n        int re = l.relation(p);\n        if (re == 1)\n            cout << \"COUNTER_CLOCKWISE\\n\";\n        else if (re == 2)\n            cout << \"CLOCKWISE\\n\";\n        else if (p < l.s)\n            cout << \"ONLINE_BACK\\n\";\n        else if (l.e < p)\n            cout << \"ONLINE_FRONT\\n\";\n        else\n            cout << \"ON_SEGMENT\\n\";\n    }\n}\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n    cout.tie(nullptr);\n\n#ifdef LOCAL\n    clock_t _begin = clock();\n#endif\n\n    build();\n    solve();\n\n#ifdef LOCAL\n    cerr << \"Time elapsed: \" << (double)(clock() - _begin) * 1000 / CLOCKS_PER_SEC << \"ms.\" << endl;\n#endif\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nstruct vec{\n    double x,y;\n    vec operator-(vec b){\n        vec& a = *this;\n        vec c;\n        c.x=a.x-b.x;c.y=a.y-b.y;\n        return c;\n    }\n};\n\nconst double eps = 0.0000001;\n\ndouble inner_product(vec& a, vec& b){\n    return a.x*b.x+a.y*b.y;\n}\n\ndouble outer_product(vec& a, vec& b){\n    return a.x*b.y-a.y*b.x;\n}\n\nint ccw(vec& a, vec& b, vec& c){\n    vec ab = b-a, ac = c-a;\n    double o = outer_product(ab,ac);\n    if(o<0) return 1; //CCW\n    if(o>0) return -1; //CW\n    if(inner_product(ab,ac)<0){\n        return 2; //C-A-B\n    }else{\n        if(inner_product(ab,ab)<inner_product(ac,ac)){\n            return -2; //A-B-C\n        }else{\n            return 0; //A-C-B\n        }\n    }\n}\n\nint main(void){\n    vec p0,p1,p2,v1,v2;\n    int q;\n    cin >> p0.x >> p0.y >> p1.x >> p1.y;\n    cin >> q;\n    for(int i=0;i<q;i++){\n        cin >> p2.x >> p2.y;\n        switch(ccw(p0,p1,p2)){\n            case 1:\n                cout << \"COUNTER_CLOCKWISE\" << endl;\n                break;\n            case -1:\n                cout << \"CLOCKWISE\" << endl;\n                break;\n            case 2:\n                cout << \"ONLINE_BACK\" << endl;\n                break;\n            case -2:\n                cout << \"ONLINE_FRONT\" << endl;\n                break;\n            case 0:\n                cout << \"ON_SEGMENT\" << endl;\n                break;\n            default:\n                ;\n        }\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <algorithm>\n#include <iomanip>\n#define ESP (1e-10)\nusing namespace std;\n\ntypedef struct Point {\n\tdouble x; \n\tdouble y;\n\n\tPoint() { }\n\n\tPoint(double x, double y) :x(x), y(y) { }\n\n\tPoint operator+(Point& p) {\n\t\treturn Point(x + p.x, y + p.y);\n\t}\n\n\tPoint operator-(Point& p) {\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n};\n\ntypedef Point Vector;\n\n struct Line {\n\tPoint p1, p2;\n\tLine() {}\n\tLine(const Point& a,const Point& b) : p1(a),p2(b) { }\n};\n\n typedef Line Segment;\n\ndouble abs(Point p1, Point p2) {\n\tdouble norm = (p1.x - p2.x)*(p1.x - p2.x) + (p1.y - p2.y)*(p1.y - p2.y);\n\treturn sqrt(norm);\n}\n\ndouble product(Vector v1, Vector v2) {\n\treturn v1.x*v2.x + v1.y*v2.y;\n}\n\ndouble cross(Vector p1, Vector p2) {\n\treturn p1.x*p2.y - p1.y*p2.x;\n}\n\nint ccw(Point p0, Point p1, Point p2) {\n\tVector v0 = p1 - p0;\n\tVector v1 = p2 - p0;\n\tif (cross(v0, v1) > ESP) return 1;   //p0,p1,p2??????????¨???????\n\tif (cross(v0, v1) < -ESP) return -1;   //p0,p1,p2???????¨???????\n\tif (product(v0, v1) < -ESP) return 2;  //p2,p0,p1????????§????????´??????\n\tif (abs(p0, p1) < abs(p0, p2)) return -2;  //p0,p1,p2????????§????????´??????\n\treturn 0;   //p2?????????(p0,p1)???\n}\n\nbool intersect(Point p0, Point p1, Point p2, Point p3) {\n\treturn (ccw(p0, p1, p2)*ccw(p0, p1, p3) <= 0&&ccw(p2,p3,p0)*ccw(p2,p3,p1)<=0);\n\t//?????????????????????????????¶\n}\n\nbool intersect(Segment s1, Segment s2) {\n\treturn intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\ndouble DistanceLP(Line l, Point p) {\n\treturn abs(cross(l.p2 - l.p1, p - l.p1)/abs(l.p1,l.p2));\n}\n\ndouble DistanceSP(Segment s, Point p) {\n\tif (product(s.p2 - s.p1, p - s.p1) < 0.0) return abs(p, s.p1);\n\tif (product(s.p1 - s.p2, p - s.p2) < 0.0) return abs(p, s.p2);\n\treturn DistanceLP(s, p);\n}\n\ndouble DistanceSS(Segment s1, Segment s2) {\n\tif (intersect(s1, s2)) return 0.0;\n\treturn min(min(DistanceSP(s1, s2.p1), DistanceSP(s1,s2.p2)), min(DistanceSP(s2, s1.p1), DistanceSP(s2, s1.p2)));\n}\n\nint main() {\n\tPoint p0, p1,p2;\n\tcin >> p0.x; cin >> p0.y;\n\tcin >> p1.x; cin >> p1.y;\n\tint q; \n\tcin >> q;\n\tfor (int i = 0;i < q;i++) {\n\t\tcin >> p2.x; cin >> p2.y;\n\t\tint c = ccw(p0, p1, p2);\n\t\tif (c == 1) cout << \"COUNTER_CLOCKWISE\" << endl;\n\t\tif (c == -1) cout << \"CLOCKWISE\" << endl;\n\t\tif (c == 2) cout << \"ONLINE_BACK\" << endl;\n\t\tif (c == -2) cout << \"ONLINE_FRONT\" << endl;\n\t\tif (c == 0) cout << \"ON_SEGMENT\" << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<vector>\n#include<queue>\n#include<map>\n#include<string>\n#include <math.h>\n#include<algorithm>\n#include<functional>\n#define ll long long\n#define inf  999999999\n#define pa pair<int,int>\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n\nusing namespace std;\n\nclass Point{\n\tpublic:\n\tdouble x,y;\n\tPoint(double x=0,double y=0):x(x),y(y) {}\n\tPoint operator + (Point p) {return Point(x+p.x,y+p.y);}\n\tPoint operator - (Point p) {return Point(x-p.x,y-p.y);}\n\tPoint operator * (double a) {return Point(x*a,y*a);}\n\tPoint operator / (double a) {return Point(x/a,y/a);}\n\tdouble absv() {return sqrt(norm());}\n\tdouble norm() {return x*x+y*y;}\n\tbool operator < (const Point &p) const{\n\t\treturn x != p.x ? x<p.x: y<p.y;\n\t}\n\tbool operator == (const Point &p) const{\n\t\treturn fabs(x-p.x)<EPS && fabs(y-p.y)<EPS;\n\t}\n};\ntypedef Point Vector;\n\nstruct Segment{\nPoint p1,p2;\n};\n\n\ndouble dot(Vector a,Vector b){\n\treturn a.x*b.x+a.y*b.y;\n}\ndouble cross(Vector a,Vector b){\n\treturn a.x*b.y-a.y*b.x;\n}\n\n//----------------kokomade temple------------\n\n\nint main(){\nint n;\ndouble a1,a2,a3,a4,a5,a6;\ncin>>a1>>a2>>a3>>a4;\ncin>>n;\nPoint p0,p1,p2;\nVector v01,v02;\np0.x=a1,p0.y=a2,p1.x=a3,p1.y=a4;\nv01=p1-p0;\n\nfor(int i=0;i<n;i++){\ncin>>a5>>a6;\np2.x=a5,p2.y=a6;\nv02=p2-p0;\n\nif(cross(v01,v02)>0) cout<<\"COUNTER_CLOCKWISE\"<<endl;\nelse if(cross(v01,v02)<0) cout<<\"CLOCKWISE\"<<endl;\nelse if(dot(v01,v02)<0) cout<<\"ONLINE_BACK\"<<endl;\nelse if(v01.norm() < v02.norm()) cout<<\"ONLINE_FRONT\"<<endl;\nelse cout<<\"ON_SEGMENT\"<<endl;\n\n\n\n}\n\n\n\nreturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "//By Vlgd\n#include<bits/stdc++.h>\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\nusing namespace std;\nclass Point{\n\tpublic:\n\tdouble x,y;\n\tPoint(double x=0,double y=0):x(x),y(y){}\n\tPoint operator + (Point p){return Point(x+p.x,y+p.y);}\n\tPoint operator - (Point p){return Point(x-p.x,y-p.y);}\n\tPoint operator * (double a){return Point(a*x,a*y);}\n\tPoint operator / (double a){return Point(x/a,y/a);}\n\tdouble abs() {return sqrt(norm());}\n\tdouble norm() {return x*x+y*y;}\n\tbool operator < (const Point &p) const{\n\t\treturn x!=p.x?x<p.x:y<p.y;\n\t}\n\tbool operator == (const Point &p) const{\n\t\treturn fabs(x-p.x)<EPS && fabs(y-p.y)<EPS;\n\t}\n};\ntypedef Point Vector;\ndouble dot(Vector a,Vector b){\n\treturn a.x*b.x+a.y*b.y;\n}\ndouble cross(Vector a,Vector b){\n\treturn a.x*b.y-a.y*b.x;\n}\nint ccw(Point p0,Point p1,Point p2){\n\tVector a=p1-p0,b=p2-p0;\n\tif(cross(a,b)>EPS) return 0;\n\tif(cross(a,b)<-EPS) return 1;\n\tif(dot(a,b)<-EPS) return 2;\n\tif(a.abs()<b.abs()) return 3;\n\tif(a.abs()>=b.abs()) return 4;\n}\nmain(){\n\tint x1,y1,x2,y2,q;\n\tscanf(\"%d%d%d%d\",&x1,&y1,&x2,&y2);\n\tPoint p0(x1,y1),p1(x2,y2);\n\tscanf(\"%d\",&q);\n\tfor(int i=0;i<q;i++){\n\t\tscanf(\"%d%d\",&x1,&y1);\n\t\tPoint p2(x1,y1);\n\t\tint ans=ccw(p0,p1,p2);\n\t\tif(ans==0) printf(\"COUNTER_CLOCKWISE\");\n\t\tif(ans==1) printf(\"CLOCKWISE\");\n\t\tif(ans==2) printf(\"ONLINE_BACK\");\n\t\tif(ans==3) printf(\"ONLINE_FRONT\");\n\t\tif(ans==4) printf(\"ON_SEGMENT\");\n\t\tprintf(\"\\n\");\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nusing lint = long long;\ntemplate<class T = int> using V = vector<T>;\ntemplate<class T = int> using VV = V< V<T> >;\n\n// BEGIN CUT HERE\n// using R = long double;\nusing R = double;\nconstexpr R pi = acos((R)-1), eps = 1e-10;\n\nint sgn(R a) { return (a > eps) - (a < -eps); }\nint sgn(R a, R b) { return sgn(a - b); }\nusing P = complex<R>;\nistream& operator>>(istream& i, P& p) { R x, y; i >> x >> y; p = P(x, y); return i; }\nbool cmp(P p, P q) { return 2 * sgn(real(p), real(q)) + sgn(imag(p), imag(q)) < 0; }\nbool eql(P p, P q) { return !cmp(p, q) and !cmp(q, p); }\nR dot(P p, P q) { return real(conj(p) * q); }\nR crs(P p, P q) { return imag(conj(p) * q); }\nint ccw(P p, P q) {\n  int s = sgn(crs(p, q));\n  if (s) return s;\n  if (dot(p, q) < 0) return -2;\n  if (dot(p, q - p) > 0) return 2;\n  return 0;\n}\nint ccw(P o, P p, P q) { return ccw(p - o, q - o); }\nstruct L {\n  P s, t;\n  P vec() const { return t - s; }\n  R abs() const { return std::abs(vec()); }\n  R arg() const { return std::arg(vec()); }\n};\nint ccw(L l, P p) { return ccw(l.s, l.t, p); }\n// END CUT HERE\n\nint main() {\n  cin.tie(nullptr); ios::sync_with_stdio(false);\n  P o, p; cin >> o >> p;\n  int Q; cin >> Q;\n  while (Q--) {\n    P q; cin >> q;\n    switch (ccw(o, p, q)) {\n      case +1: cout << \"COUNTER_CLOCKWISE\\n\"; break;\n      case -1: cout << \"CLOCKWISE\\n\"; break;\n      case +2: cout << \"ONLINE_FRONT\\n\"; break;\n      case -2: cout << \"ONLINE_BACK\\n\"; break;\n      case 0: cout << \"ON_SEGMENT\\n\"; break;\n    }\n  }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <iostream>\n\nusing namespace std;\n\n#define EPS 1e-9\n\n#define PI 3.1415926535897932385\n\ndouble dist(long long x, long long y)\n{\n\treturn sqrt(x * x + y * y);\n}\n\ndouble angle(int x, int y)\n{\n\treturn atan2((double)(y), (double)(x));\n}\n\nint main()\n{\n\tint x0, y0, x1, y1, x2, y2, q;\n\n\tcin >> x0 >> y0 >> x1 >> y1 >> q;\n\n\tfor (int i = 0; i < q; i++)\n\t{\n\t\tcin >> x2 >> y2;\n\n\t\tint ax = x1 - x0;\n\t\tint ay = y1 - y0;\n\t\tint bx = x2 - x0;\n\t\tint by = y2 - y0;\n\n\t\tdouble ad = dist(ax, ay);\n\t\tdouble bd = dist(bx, by);\n\n\t\tdouble at = angle(ax, ay);\n\t\tdouble bt = angle(bx, by);\n\n\t\tdouble st = bt - at;\n\n\t\tif (st < -PI - EPS)\n\t\t{\n\t\t\tst += 2 * PI;\n\t\t}\n\n\t\tif (st > PI + EPS)\n\t\t{\n\t\t\tst -= 2 * PI;\n\t\t}\n\n\t\tdouble da, db;\n\n\t\tif (bx != 0 || by != 0)\n\t\t{\n\t\t\tif (ax == 0 || bx == 0)\n\t\t\t{\n\t\t\t\tda = 1.0 * ax / ay;\n\t\t\t\tdb = 1.0 * bx / by;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tda = 1.0 * ay / ax;\n\t\t\t\tdb = 1.0 * by / bx;\n\t\t\t}\n\t\t}\n\n\t\tif (bx == 0 && by == 0)\n\t\t{\n\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t}\n\t\telse if (-EPS < db - da && db - da < EPS)\n\t\t{\n\t\t\tif (ax * bx < 0 || ay * by < 0)\n\t\t\t{\n\t\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (ad < bd)\n\t\t\t\t{\n\t\t\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (st > EPS)\n\t\t{\n\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\t}\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\n#include <cmath>\n#include <iomanip>\n#include <stack>\n#include <queue>\n#include <vector>\n#include <algorithm>\n\n\nusing namespace std;\n\n//-------------------------------------------------------------------------------------\n/*2点[(x1,y1),(x2,y2)]を入力し二点を通る直線ax+by+cの(a,b,c)を返す,  */\n/*x1==x2ならfalseを返す*/\n/*falseならばx=cの形の直線*/\nvoid straight_line_passing_through_the_two_points(double x1, double y1, double x2, double y2, double *a, double *b, double *c){\n    *a=(y2-y1);\n    *b=-(x2-x1);\n    *c=y2*(x2-x1)-x2*(y2-y1);\n}\n\n//-------------------------------------------------------------------------------------\n/*(x,y)を通るa1x+b1y+c1=0に垂直な直線a2x+b2y+c2=0を返す*/\nbool vertical_straight_line(double x, double y, double a1, double b1, double c1, double *a2, double *b2, double *c2){\n    if(a1*x+b1*y+c1==0)return false;\n    *a2 = -b1;\n    *b2 = a1;\n    *c2 = b1*x - a1*y;\n    return true;\n}\n\n\n//-------------------------------------------------------------------------------------\n/*2直線 a1x+b1y+c1=0 a2x+b2y+c2=0 の交点 (x,y)を返す*/\n/*2直線が平行であるならば0を返す*/\nint intersection_and_parallel(double a1, double b1, double c1, double a2, double b2, double c2, double *x, double *y){\n    if(a1*b2==a2*b1)return false;//平行の判定\n    \n    *x = (b1*c2-b2*c1)/(a1*b2-a2*b1);\n    *y = (a2*c1-a1*c2)/(a1*b2-a2*b1);\n    \n    return true;\n}\n\n//-------------------------------------------------------------------------------------\n/* \n a1x+b1y+c1=0 と　a2x+b2y+c2=0 が\n 平行なら2\n 直交なら1\n それ以外は0\n を返す\n */\nint judges_whether_parallel_or_perpendicular(double a1, double b1, double c1, double a2, double b2, double c2){\n    if(a1*b2 == a2*b1)return 2;\n    if(a1*a2 + b1*b2 == 0)return 1;\n    return 0;\n}\n\n\n//-------------------------------------------------------------------------------------\n/*直線ax+by+c=0に対し　(x1,y1)と線対称な位置(x2,y2)を出力*/\n/*vertical_straight_lineを使用*/\n/*intersection_and_parallelを使用*/\nvoid line_symmetry(double a, double b, double c, double x1, double y1, double *x2, double *y2){\n    if(a*x1+b*y1+c==0){//(x1,y1)が直線上にある.\n        *x2=x1;\n        *y2=y1;\n        return;\n    }\n    \n    //垂直な直線を求める\n    double a2,b2,c2;\n    vertical_straight_line(x1, y1, a, b, c, &a2, &b2, &c2);\n    \n    //垂直な直線との交点を求める\n    double c_x, c_y;\n    intersection_and_parallel(a, b, c, a2, b2, c2, &c_x, &c_y);\n    *x2 = x1 + 2*(c_x-x1);\n    *y2 = y1 + 2*(c_y-y1);\n}\n\n\n\n//-------------------------------------------------------------------------------------\n/*2点(x1,y1), (x2,y2) の距離*/\ndouble distance_between_the_two_pointss(double x1,double y1, double x2, double y2){\n    return  sqrt(fabs((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)));\n}\n\n\n//-------------------------------------------------------------------------------------\n/* (x1,y1)から(x2,y2)へ伸ばした直線の角度を求める  */\n/*-π　〜　+π　まで*/\ndouble angle_of_the_line(double x1, double y1, double x2, double y2){\n    return atan2(y2-y1, x2-x1);\n}\n\n//-------------------------------------------------------------------------------------\n/*(x1,y1)と(x2,y2)を両端に持つ線分と*/\n/*(x3,y3)と(x4,y4)を両端に持つ線分が*/\n/*交差するなら1 交差しないなら0を出力する*/\n/* straight_line_passing_through_the_two_pointsを使用 */\n/* intersection_and_parallelを使用 */\nint line_segment_cross_decision(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4){\n    double a1,b1,c1, a2,b2,c2;\n    straight_line_passing_through_the_two_points(x1, y1, x2, y2, &a1, &b1, &c1);\n    straight_line_passing_through_the_two_points(x3, y3, x4, y4, &a2, &b2, &c2);\n    double c_x,c_y;\n    bool is_parallel = intersection_and_parallel(a1, b1, c1, a2, b2, c2, &c_x, &c_y);\n    if(is_parallel==false){\n        if( (a1==a2&&b1==b2&&c1==c2) || (a1==0 && (b1/b2)==(c1/c2)) || (b1==0 && (a1/a2)==(c1/c2)) ){//一直線上にある.\n            //cout<<1111;\n            if(min(x1,x2)<=x3&&x3<=max(x1,x2)&&min(y1,y2)<=y3&&y3<=max(y1,y2))return 1;\n            if(min(x1,x2)<=x4&&x4<=max(x1,x2)&&min(y1,y2)<=y4&&y4<=max(y1,y2))return 1;\n            if(min(x3,x4)<=x1&&x1<=max(x3,x4)&&min(y3,y4)<=y1&&y1<=max(y3,y4))return 1;\n            if(min(x3,x4)<=x2&&x2<=max(x3,x4)&&min(y3,y4)<=y2&&y2<=max(y3,y4))return 1;\n            \n\n\n        }\n        return 0;\n    }\n    if(x1>x2)swap(x1, x2);\n    if(x3>x4)swap(x3, x4);\n    if(y1>y2)swap(y1, y2);\n    if(y3>y4)swap(y3, y4);\n\n    if(x1<=c_x&&c_x<=x2&&x3<=c_x&&c_x<=x4){\n        if(y1<=c_y&&c_y<=y2&&y3<=c_y&&c_y<=y4)return 1;\n    }\n    return 0;\n    \n}\n\n\n\n//-------------------------------------------------------------------------------------\n/*点(p_x,p_y)と線分(x1,y1)(x2,y2)の距離*/\n/* straight_line_passing_through_the_two_points */\n/* vertical_straight_line */\n/* intersection_and_parallel */\ndouble distance_between_the_line_segment_and_point(double p_x, double p_y, double x1, double y1, double x2, double y2){\n    double a,b,c;//(x1,y1)(x2,y2)を通る直線\n    straight_line_passing_through_the_two_points(x1, y1, x2, y2, &a, &b, &c);\n    double a2,b2,c2;//直線ax+by+c=0に垂直な直線\n    double v_x, v_y;//二つの直線の交点\n    bool is_not_parallel = vertical_straight_line(p_x, p_y, a, b, c, &a2, &b2, &c2);\n    intersection_and_parallel(a, b, c, a2, b2, c2, &v_x, &v_y);\n    \n    if(is_not_parallel){\n        if(min(x1,x2)<=v_x&&v_x<=max(x1,x2)&&min(y1,y2)<=v_y&&v_y<=max(y1,y2)){//(v_x,v_y)は線分の中にある\n            //cout<<\"a \";\n            return distance_between_the_two_pointss(p_x, p_y, v_x, v_y);\n        }else{//(v_x,v_y)は線分の外にある\n            double l1 = distance_between_the_two_pointss(p_x, p_y, x1, y1);\n            double l2 = distance_between_the_two_pointss(p_x, p_y, x2, y2);\n            //cout<<\"b \";\n            return min(l1,l2);\n        }\n    }else{\n        if(min(x1,x2)<=p_x&&p_x<=max(x1,x2)&&min(y1,y2)<=p_y&&p_y<=max(y1,y2)){//(p_x,p_y)は線分の中にある\n            //cout<<\"c \";\n            return 0.0;\n        }else{//(p_x,p_y)は線分の外にある\n            double l1 = distance_between_the_two_pointss(p_x, p_y, x1, y1);\n            double l2 = distance_between_the_two_pointss(p_x, p_y, x2, y2);\n            //cout<<\"d \";\n            return min(l1,l2);\n        }\n    }\n    \n}\n\n\n//-------------------------------------------------------------------------------------\n/*線分(x1,y1)(x2,y2)と線分(x3,y3)(x4,y4)の距離*/\n\ndouble distance_between_two_line_segment(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4){\n    //同一直線上にある場合\n    \n    //ぶつかる場合\n    if(line_segment_cross_decision(x1, y1, x2, y2, x3, y3, x4, y4)){\n        return 0.0;\n    }\n    \n    //ぶつからない場合\n    double l1,l2,l3,l4;\n    l1=distance_between_the_line_segment_and_point(x1, y1, x3, y3, x4, y4);\n    //cout<<l1<<endl;\n    l2=distance_between_the_line_segment_and_point(x2, y2, x3, y3, x4, y4);\n    //cout<<l2<<endl;\n\n    l3=distance_between_the_line_segment_and_point(x3, y3, x1, y1, x2, y2);\n    //cout<<l3<<endl;\n    l4=distance_between_the_line_segment_and_point(x4, y4, x1, y1, x2, y2);\n    \n        \n    //cout<<l4<<endl;\n    \n    return min(l1,min(l2,min(l3,l4)));\n}\n\n//-------------------------------------------------------------------------------------\n/*多角形の面積*/\n/*頂点数n　頂点の集合 */\ndouble area_of_the_polygon(int n, double p_xy[10000][2]){\n    double s=0.0;\n    for(int i=0; i<n; i++){\n        s+=(p_xy[i][0]-p_xy[(i+1)%n][0])*(p_xy[i][1]+p_xy[(i+1)%n][1])/2;\n    }\n    return s;\n}\n\n\n//-------------------------------------------------------------------------------------\n/*角abcの角度　a(xa,ya), b(xb,yb), c(xc,yc),*/\n/*2辺の角度*/\n/*aとb　またはbとcが重なっていればPIを返す*/\ndouble angle_of_the_two_edges(double ax, double ay, double bx, double by, double cx, double cy){\n    if(ax==bx&&ay==by)return M_PI;\n    if(cx==bx&&cy==by)return M_PI;\n    \n    double angle1 = angle_of_the_line(ax, ay, bx, by);\n    double angle2 = angle_of_the_line(bx, by, cx, cy);\n    \n    double ret = angle1+(M_PI-angle2);\n    if(ret>M_PI * 2)ret -= M_PI * 2;\n    if(ret<0)ret += M_PI * 2;\n    return /*2*M_PI- */ret;\n    \n}\n\n//-------------------------------------------------------------------------------------\n/*多角形に対する点の内外判定*/\n/* n頂点の多角形p_xy[n]に対して点(x,y)の内外判定を行う*/\n/* 内なら2 線上なら1 外なら0*/\nint inside_and_outside_the_determination_of_the_polygon_and_point(int n, double p_xy[10000][2], double x, double y){\n    //点が線分上にあるか\n    for(int i=0; i<n; i++){\n        double l = distance_between_the_line_segment_and_point(x, y, p_xy[i][0], p_xy[i][1], p_xy[(i+1)%n][0], p_xy[(i+1)%n][1]);\n        if(l==0.0)return 1;\n    }\n    \n    //点が中にあるか外にあるか\n    int ans = 0;\n    for(int i=0; i<n; i++){\n        if(p_xy[i][0]!=p_xy[(i+1)%n][0]){\n            ans += line_segment_cross_decision(p_xy[i][0], p_xy[i][1], p_xy[(i+1)%n][0], p_xy[(i+1)%n][1], x, y, x, y+1000000.0);\n            \n            if(distance_between_the_line_segment_and_point(p_xy[i][0], p_xy[i][1],x, y, x, y+1000000.0)==0.0){\n                if(p_xy[i][0]>p_xy[(i+1)%n][0])ans--;\n            }\n            if(distance_between_the_line_segment_and_point(p_xy[(i+1)%n][0], p_xy[(i+1)%n][1],x, y, x, y+1000000.0)==0.0){\n                if(p_xy[i][0]<p_xy[(i+1)%n][0])ans--;\n            }\n        }\n        \n    }\n    //cout<<\" \"<<ans<<\" \";\n    if(ans%2==0)return 0;\n    else return 2;\n}\n//-------------------------------------------------------------------------------------\n/*二点の角度*/\n/*0~2π*/\ndouble angle_line_0_359(double x1, double y1, double x2, double y2){\n    double angle = atan2(y2-y1, x2-x1);\n    if(angle<0)angle = 2*M_PI+angle;\n    return angle;\n}\n\n//-------------------------------------------------------------------------------------\n/*二辺の角度*/\n/*反時計回りの内側*/\n/*0~2π*/\ndouble angle_two_line_0_359(double x1, double y1, double x2, double y2, double x3, double y3){\n    double angle = atan2(y2-y1, x2-x1);\n    if(angle<0)angle = 2*M_PI+angle;\n    if(angle==2*M_PI)angle=0.0;\n    \n    double angle2 = atan2(y3-y2, x3-x2);\n    if(angle2<0)angle2 = 2*M_PI+angle2;\n    if(angle2==2*M_PI)angle2=0.0;\n    \n    return 2*M_PI-( angle+(M_PI-angle2) );\n}\n\n//-------------------------------------------------------------------------------------\n/*二次元配列のクイックソート*/\n/*xoryが0ならx座標　1なら座標でソート*/\nvoid two_dimensional_qsort(double xy[100000][2], int left, int right, int xory)\n{\n    int i, j;\n    double pivot,pivot2;\n    \n    i = left;                      /* ソートする配列の一番小さい要素の添字 */\n    j = right;                     /* ソートする配列の一番大きい要素の添字 */\n    \n    pivot = xy[(left + right) / 2][xory]; /* 基準値を配列の中央付近にとる */\n    pivot2 = xy[(left + right) / 2][(xory+1)%2];\n    \n    \n    while (1) {                    /* 無限ループ */\n        \n        while (xy[i][xory] < pivot || (xy[i][xory] == pivot && xy[i][(xory+1)%2] < pivot2))       /* pivot より大きい値が */\n            i++;                   /* 出るまで i を増加させる */\n        \n        while (pivot < xy[j][xory] || (xy[j][xory] == pivot &&  pivot2 < xy[j][(xory+1)%2]))       /* pivot より小さい値が */\n            j--;                   /*  出るまで j を減少させる */\n        if (i >= j)                /* i >= j なら */\n            break;                 /* 無限ループから抜ける */\n        \n        swap(xy[i][xory], xy[j][xory]);            /* x[i] と x[j]を交換 */\n        swap(xy[i][(xory+1)%2], xy[j][(xory+1)%2]);            /* x[i] と x[j]を交換 */\n        i++;                       /* 次のデータ */\n        j--;\n    }\n    \n    if (left < i - 1)              /* 基準値の左に 2 以上要素があれば */\n        two_dimensional_qsort(xy, left, i - 1, xory);     /* 左の配列を Q ソートする */\n    if (j + 1 <  right)            /* 基準値の右に 2 以上要素があれば */\n        two_dimensional_qsort(xy, j + 1, right, xory);    /* 右の配列を Q ソートする */\n}\n\n\n//-------------------------------------------------------------------------------------\n/*凸包*/\n/*２次元平面における点の集合Pに対する凸包（convex hull）を求めて下さい。凸包とは点集合Pの全ての点を含む最小の凸多角形です。*/\n/*集合の要素数 n*/\n/*集合 p_xy[1000000][2]*/\n/*解答の要素数 q*/\n/*解答 ans[1000000][2]　最も下の最も左から反時計回り*/\n\nvoid convex_hull(int n, double p_xy[100000][2], int *q, double ans[100000][2]){\n\n    two_dimensional_qsort(p_xy, 0, n-1, 1);\n    /*\n    for(int i=0; i<n; i++){\n        cout<<p_xy[i][0]<<\" \"<<p_xy[i][1]<<endl;\n    }\n     */\n    \n    \n    int k=0;\n    for(int i=0; i<n; i++){\n        while(k > 1 && (angle_two_line_0_359(ans[k-2][0], ans[k-2][1], ans[k-1][0], ans[k-1][1], p_xy[i][0], p_xy[i][1])>M_PI))k--;\n        ans[k][0]=p_xy[i][0];\n        ans[k][1]=p_xy[i][1];\n        k++;\n    }\n    \n    \n    int t=k;\n    for(int i=n-2; i>=0; i--){\n        while(k > t && (angle_two_line_0_359(ans[k-2][0], ans[k-2][1], ans[k-1][0], ans[k-1][1], p_xy[i][0], p_xy[i][1])>M_PI))k--;\n        ans[k][0]=p_xy[i][0];\n        ans[k][1]=p_xy[i][1];\n        k++;\n    }\n    *q=k-1;\n}\n//-------------------------------------------------------------------------------------\n/*点の集合(凸多角形)の最遠点距離*/\ndouble diameter_of_the_polygon(int n, double p_xy[100000][2]){\n    double ch[100000][2];\n    int q;\n    convex_hull(n, p_xy, &q, ch);\n    \n    \n    int i=0;\n    int j=0;\n    for(int k=0; k<q; k++){\n        if(ch[j][1]<ch[k][1]){\n            j=k;\n        }\n    }\n    \n    int si=i;\n    int sj=j;\n    double res =  distance_between_the_two_pointss(ch[si][0], ch[si][1], ch[sj][0], ch[sj][1]);\n    while(1){\n        if(i==sj||j==si)break;\n        \n        double cross = (ch[(si+1)%n][0]-ch[si][0])*(ch[(sj+1)%n][1]-ch[sj][1]) - (ch[(si+1)%n][1]-ch[si][1])*(ch[(sj+1)%n][0]-ch[sj][0]);\n        //cout<<cross<<endl;\n        \n        if(cross<0){\n            si=(si+1)%n;\n            //res = max(res,a);\n        }else{\n            sj=(sj+1)%n;\n            //res = max(res,b);\n        }\n        \n        res =  max(res,distance_between_the_two_pointss(ch[si][0], ch[si][1], ch[sj][0], ch[sj][1]));\n                                                    \n        \n    }\n    \n    return res;\n}\n//-------------------------------------------------------------------------------------\n/*点の集合の最近点距離*/\n/*使用前に sort(a, a+n); をおこなう*/\n/*使用注意 他と仕様が違う*/\n/*点にpairを使っている*/\n\n\nbool compare_y(pair<double, double> a,pair<double, double> b){\n    return a.second<b.second;\n}\n\ndouble length_of_the_nearest_point_to(pair<double, double> a[100000], int n){\n    if(n<=1)return 999999999.9;\n    int m=n/2;\n    double x=a[m].first;\n    double d=min(length_of_the_nearest_point_to(a, m), length_of_the_nearest_point_to(a+m, n-m));\n    //inplace_merge(a, a+m, a+n, compare_y);\n    sort(a, a+n, compare_y);\n    vector<pair<double, double> >b;\n    for(int i=0; i<n; i++){\n        if(fabs(a[i].first-x)>=d)continue;\n        for(int j=0; j<b.size(); j++){\n            double dx=a[i].first-b[b.size()-j-1].first;\n            double dy=a[i].second-b[b.size()-j-1].second;\n            if(dy>=d)break;\n            d=min(d,sqrt(dx*dx+dy*dy));\n            \n        }\n        b.push_back(a[i]);\n    }\n    return d;\n}\n                                      \n//-------------------------------------------------------------------------------------\n/* 2点(x1,y1) (x2,y2)を通る直線に点(px,py)から引いた垂線の直線との交点(x, y)を返す */\nvoid intersection_of_the_normal_to_the_straight_line_passing_through_the_two_points(double px,double py,double x1, double y1,double x2, double y2,double *x, double *y){\n    double a,b,c;\n    straight_line_passing_through_the_two_points(x1, y1, x2, y2, &a, &b, &c);\n    *x = px-(a*px+b*py+c)/(a*a+b*b)*a;\n    *y = py-(a*px+b*py+c)/(a*a+b*b)*b;\n}\n                                      \nint main(){\n    double x0,y0,x1,y1,x2,y2;\n    cin>>x0>>y0>>x1>>y1;\n    int q;\n    cin>>q;\n    for(int i=0; i<q; i++){\n        cin>>x2>>y2;\n        \n        double a = angle_two_line_0_359(x1, y1, x0, y0, x2, y2);\n        //cout<<a/M_PI * 180.0<<endl;\n        \n        if(a==M_PI)cout<<\"ONLINE_BACK\"<<endl;\n        else if(0<a&&a<M_PI)cout<<\"COUNTER_CLOCKWISE\"<<endl;\n        else if(M_PI<a&&a<M_PI*2)cout<<\"CLOCKWISE\"<<endl;\n        else if(a==0||a==2*M_PI){\n            double l1 = distance_between_the_two_pointss(x1, y1, x0, y0);\n            double l2 = distance_between_the_two_pointss(x2, y2, x0, y0);\n            if(l1<l2)cout<<\"ONLINE_FRONT\"<<endl;\n            else cout<<\"ON_SEGMENT\"<<endl;\n        }\n        \n        \n        \n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define r(i,n) for(int i=0;i<n;i++)\nusing namespace std;\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n//CCW??¨///////////////////////////////////\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONELINE_BACK = 2;\nstatic const int ONELINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n/////////////////////////////////////////\nclass Point{\n  public:\n  double x,y;\n  Point(double x=0,double y=0):x(x),y(y){}\n  Point operator + (Point p){return Point(x+p.x,y+p.y);}\n  Point operator - (Point p){return Point(x-p.x,y-p.y);}\n  Point operator * (double a){return Point(a*x,a*y);}\n  Point operator / (double a){return Point(x/a,y/a);}\n\n  bool operator < (const Point &p) const{\n    return x!=p.x?x<p.x:y<p.y;\n  }\n  bool operator == (const Point &p) const{\n    return fabs(x-p.x)<EPS&&fabs(y-p.y)<EPS;\n  }\n};\n/*class Circle{\npublic:\n  Point c;\n  double r;\n  Circle(Point c=Point(),double r=0.0):c(c),r(r){}\n};*/\ntypedef Point vect;\nstruct seg{Point p1,p2;};\n//????????´???\ndouble norm(Point p){return p.x*p.x+p.y*p.y;}\n//??¶??????\ndouble abs(Point p){return sqrt(norm(p));}\n//??????\ndouble dot(Point a,Point b){\n  return a.x*b.x+a.y*b.y;\n}\n//??????\ndouble cross(Point a,Point b){\n  return a.x*b.y-a.y*b.x;\n}\n//??´?????????\nbool C90(seg s1,seg s2){\n  return equals(dot(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\nbool C0(seg s1,seg s2){\n  return equals(cross(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n//?°???±\nPoint projec(seg s,Point p){\n  Point base = s.p2-s.p1;\n  double r=dot(p-s.p1,base) / norm(base);\n  return s.p1+base*r;\n}\n//????°?\nPoint reflec(seg s,Point p){\n  return  p+(projec(s,p)-p)*2.0;\n}\n//2???????????¢\ndouble getDistancePP(Point a,Point b){\n  return abs(a-b);\n}\n//??´??????????????¢(????°?)\ndouble getDistanceLP(seg l,Point p){\n  return abs(cross(l.p2-l.p1,p-l.p1)/abs(l.p2-l.p1));\n}\n//?????????????????¢\ndouble getDistanceSP(seg s,Point p){\n  if(dot(s.p2-s.p1,p-s.p1)<0.0)return abs(p-s.p1);\n  if(dot(s.p1-s.p2,p-s.p2)<0.0)return abs(p-s.p2);\n  return getDistanceLP(s,p);\n}\n//????????????????????¢\n/*double getDistance(seg s1,seg s2){\n  if(intersect(s1,s2))return 0.0;\n  return min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),\n    min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n}*/\n//????¨?????????????????¨??????????\nint CCW(Point p0,Point p1,Point p2){\n  Point a=p1-p0;\n  Point b=p2-p0;\n  if(cross(a,b)>EPS)return COUNTER_CLOCKWISE;\n  if(cross(a,b)<-EPS)return CLOCKWISE;\n  if(dot(a,b)<-EPS)return ONELINE_BACK;\n  if(norm(a)<norm(b))return ONELINE_FRONT;\n  return ON_SEGMENT;\n}\nmain(){\n  int n;\n  seg a,b;\n  cin>>a.p1.x>>a.p1.y>>a.p2.x>>a.p2.y;\n  cin>>n;\n  while(n--){\n    Point c;\n    cin>>c.x>>c.y;\n    int p=CCW(a.p1,a.p2,c);\n    if(p==1)cout<<\"COUNTER_CLOCKWISE\";\n    if(p==-1)cout<<\"CLOCKWISE\";\n    if(p==2)cout<<\"ONELINE_BACK\";\n    if(p==-2)cout<<\"ONLINE_FRONT\";\n    if(!p)cout<<\"ON_SEGMENT\";\n    cout<<endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<cmath>\n#include<algorithm>\n\nusing namespace std;\n\nint main()\n{\n\tdouble p1x, p1y, p2x, p2y, p0x, p0y;\n\tint q;\n\n\tscanf(\"%lf %lf %lf %lf\", &p0x, &p0y, &p1x, &p1y);\n\n\tpair<double, double> v01 = { p1x - p0x, p1y - p0y };\n\n\n\tscanf(\"%d\", &q);\n\n\tfor (int i = 0; i < q; i++)\n\t{\n\t\tscanf(\"%lf %lf\", &p2x, &p2y);\n\n\t\tif ((p2x == p0x && p2y == p0y) || (p2x == p1x && p2y == p1y)){\n\t\t\tprintf(\"ONLINE_SEGMENT\\n\");\n\n\t\t\tcontinue;\n\t\t}\n\n\t\tpair<double, double> v02 = { p2x - p0x, p2y - p0x };\n\n\t\tif (v01.first*v02.second == v01.second*v02.first)\n\t\t{\n\t\t\tif (v01.first*v02.first < 0)\n\t\t\t{\n\t\t\t\tprintf(\"ONLINE_BACK\\n\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tabs(v01.first) < abs(v02.first) ? printf(\"ONLINE_FRONT\\n\") : printf(\"ONLINE_SEGMENT\\n\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t\tdouble sin = (v01.first*v02.second - v01.second*v02.first);\n\n\t\tif (sin > 0){\n\t\t\tprintf(\"CLOCKWISE\\n\");\n\n\t\t\tcontinue;\n\t\t}\n\t\telse{\n\t\t\tprintf(\"COUNTER_CLOCKWISE\\n\");\n\n\t\t\tcontinue;\n\t\t}\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#define EPS (1e-10)\n#include <cmath>\n#include <iostream>\n#include <iomanip>\nusing namespace std;\n\nint main() {\n\tcin.tie(0); ios::sync_with_stdio(false);\n\tint x0, y0, x1, y1; cin >> x0 >> y0 >> x1 >> y1;\n\tint q; cin >> q;\n\tlong double theta1, theta2;\n\ttheta1 = atan2(y1 - y0, x1 - x0);\n\twhile (q--) {\n\t\tint x2, y2; cin >> x2 >> y2;\n\t\tif (x2 == 0 && y2 == 0) { cout << \"ON_SEGMENT\" << endl; continue; }\n\t\ttheta2 = atan2(y2 - y0, x2 - x0);\n\t\tlong double rev_theta = theta1 >= 0 ? theta1 - M_PI : theta1 + M_PI;\n\t\t//cout << fixed << setprecision(15) << \"theta1 = \" << theta1 << endl << \"theta2 = \" << theta2 << endl << \"rev_theta = \" << rev_theta << endl;\n\t\tif (theta2 - theta1 == M_PI || theta2 - theta1 == -M_PI) { cout << \"ONLINE_BACK\" << endl; continue; }\n\t\tif (theta1 == theta2) {\n\t\t\tlong double dist1 = hypot(x1 - x0, y1 - y0), dist2 = hypot(x2 - x0, y2 - y0);\n\t\t\tif (dist2 > dist1) { cout << \"ONLINE_FRONT\" << endl; continue; }\n\t\t\telse { cout << \"ON_SEGMENT\" << endl; continue; }\n\t\t}\n\t\tif (theta1 >= 0) {\n\t\t\tif (theta2 > theta1 || theta2 < rev_theta) { cout << \"COUNTER_CLOCKWISE\" << endl; continue; }\n\t\t\tif (theta2 < theta1 && theta2 > rev_theta) { cout << \"CLOCKWISE\" << endl; continue; }\n\t\t}\n\t\telse {\n\t\t\tif (theta2 > theta1 && theta2 < rev_theta) { cout << \"COUNTER_CLOCKWISE\" << endl; continue; }\n\t\t\tif (theta2 < theta1 || theta2 > rev_theta) { cout << \"CLOCKWISE\" << endl; continue; }\n\t\t}\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cmath>\n#include<iomanip>\n#include<cstdio>\nusing namespace std;\n#define EPS 1e-10\nstatic const int COUNTER_CLOCKWISE = 1;\t\t\t\t\t//逆时针   \nstatic const int CLOCKWISE = 2;\t\t\t\t\t\t\t//顺时针\nstatic const int ONLINE_BACK = 3;\t\t\t\t\t\t//p2 在直线后面\nstatic const int ONLINE_FRONT = 4;\t\t\t\t\t\t//p2 在直线前面\nstatic const int ON_SEGMENT = 0;\t\t\t\t\t\t//p2 在直线上\nint equals(double a, double b) { return fabs(a - b) < EPS; };\nclass Point {\npublic:\n\tdouble x, y;\n\tPoint(double x=0, double y=0) :x(x), y(y) { };\n\tPoint operator + (Point& p) {\n\t\treturn Point(p.x + x, p.y + y);\n\t}\n\tPoint operator - (Point& p) {\n\t\t\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n\tPoint operator * (double k) {\n\t\treturn Point(k*x, k*y);\n\t}\n\tdouble abs() {\t\t\t\t\t//向量长度;\n\t\treturn sqrt(x * x + y * y);\n\t}\n};\ntypedef Point Vector;\ndouble dot(Vector a, Vector b) {\t\t\t//内积 x1*x2 + y1*y2\n\treturn a.x * b.x + a.y * b.y;\n}\ndouble cross(Vector a, Vector b) {\t\t  //外积  x1*y2 - x2*y1\n\treturn a.x * b.y - a.y * b.x;\n}\nstruct Segment           //线段\n{\n\tPoint a, b;\n};\ntypedef Segment Line;   //线段表示直线；\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double x = 0) :c(c), r(x) {};\n};\nvoid Parallel_Orthogonal() {\t\t\t\t//判断平行或正交\n\tPoint a, b,c,d;\n\tPoint e, f;\n\tint n;\n\tcin >> n;\n\tfor (int i = 0; i < n; i++) {\n\t\tcin >> a.x >> a.y >> b.x >> b.y>>c.x>>c.y>>d.x>>d.y;\n\t\te = a - b;\n\t\tf = c - d;\n\t\tif (equals(dot(e, f), 0)) cout << \"1\" << endl;\n\t\telse if (equals(cross(e, f), 0))cout << \"2\" << endl;\n\t\telse cout <<\"0\" <<endl;\n\t}\n}\nPoint Projection(Point& a, Point& b, Point& c) {\t\t//计算投影点\n\tPoint p;\n\tVector v1 = b - a;\n\tVector v2 = c - a;\n\tdouble len = dot(v1, v2);\n\tdouble len2 = len/ v1.abs();\n\tp.x = a.x + len2 / v1.abs() * v1.x;\n\tp.y = a.y + len2 / v1.abs() * v1.y;\n\treturn p;\n}\nPoint Reflection(Point& a, Point& b, Point& c) {\t//算映像\n\tPoint p = Projection(a, b, c);\t\t\t\t\t//算出映射点\n\treturn p*2 - c;\t\t\t\t\t\t\t\t\t//映射点 是 该点与映像点中点  x + c = 2*p；\n}\ndouble getDistancePP(Point a, Point b) {\t\t\t\t//两点距离;\n\treturn ((a - b).abs());\n}\ndouble getDistancePL(Point a, Line b) {\t\t\t//求点到直线距离 外积 = |a|.|b|.sin0  在直线上取两点，然后以其中一点为端点求出外\n\tVector m = b.a - b.b;\t\t\t\t\t\t//积的大小 再除以直线上的向量大小 则可以求解。\n\tVector m2 = a - b.b;\n\treturn cross(m, m2) / m.abs();\n}\nint ccw(Point a, Point b, Point c) {\t\t\t//三个点的位置关系\n\tVector p = b - a;\n\tVector p2 = c - a;\n\tif (cross(p, p2) > EPS) return COUNTER_CLOCKWISE;\t\t//逆时针方向向外 结果为正\n\tif (cross(p, p2) < -EPS) return CLOCKWISE;\t\t\t\t//顺时针方向为内 结果为负\n\tif (dot(p, p2) < -EPS) return ONLINE_BACK;\n\tif (dot(p, p2) > EPS&& p2.abs() > p.abs()) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\ndouble getDistancePS(Point a, Segment b) {\t\t//点到线段的距离;\n\tPoint p1, p2;\n\tp1 = a - b.a;\n\tp2 = b.b - b.a;\n\tif (dot(p1, p2) < 0) {\n\t\treturn p1.abs();\n\t}\n\tp1 = a - b.b;\n\tp2 = b.a - b.b;\n\tif (dot(p1, p2) < 0) {\n\t\treturn p1.abs();\n\t}\n\telse {\n\t\treturn getDistancePL(a, b);\n\t}\n}\n\n//double Distance(Segment a, Segment b) {             //计算两线段距离\n// \n//}\nint main(void) {\t\t\t\t\n\tPoint a, b, c;\n\tstring m[5];\n\tm[ON_SEGMENT] = \"ON_SEGMENT\";\n\tm[COUNTER_CLOCKWISE] = \"COUNTER_CLOCKWISE\";\n\tm[CLOCKWISE] = \"CLOCKWISE\";\n\tm[ONLINE_BACK] = \"ONLINE_BACK\";\n\tm[ONLINE_FRONT] = \"ONLINE_FRONT\";\n\tcin >> a.x >> a.y >> b.x >> b.y;\n\tint n;\n\tcin >> n;\n\tint key = 0;\n\tfor (int i = 0; i < n; i++) {\n\t\tcin >> c.x >> c.y;\n\t\tkey = ccw(a, b, c);\n\t\tcout << m[key] << endl;\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define TemplateVersion \"3.4.0\"\n// Useful Marcos\n//====================START=====================\n// Compile use C++11 and above\n#ifdef LOCAL\n#define debug(args...)                           \\\n    {                                            \\\n        string _s = #args;                       \\\n        replace(_s.begin(), _s.end(), ',', ' '); \\\n        stringstream _ss(_s);                    \\\n        istream_iterator<string> _it(_ss);       \\\n        err(_it, args);                          \\\n    }\nvoid err(istream_iterator<string> it)\n{\n}\ntemplate <typename T, typename... Args>\nvoid err(istream_iterator<string> it, T a, Args... args)\n{\n    cerr << *it << \" = \" << a << endl;\n    err(++it, args...);\n}\n#define MSG cout << \"Finished\" << endl\n#else\n#define debug(args...)\n#define MSG\n#endif\n#if __cplusplus >= 201703L\ntemplate <typename... Args>\nvoid readln(Args &... args)\n{\n    ((cin >> args), ...);\n}\ntemplate <typename... Args>\nvoid writeln(Args... args)\n{\n    ((cout << args << \" \"), ...);\n    cout << endl;\n}\n#elif __cplusplus >= 201103L\nvoid readln()\n{\n}\ntemplate <typename T, typename... Args>\nvoid readln(T &a, Args &... args)\n{\n    cin >> a;\n    readln(args...);\n}\nvoid writeln()\n{\n    cout << endl;\n}\ntemplate <typename T, typename... Args>\nvoid writeln(T a, Args... args)\n{\n    cout << a << \" \";\n    writeln(args...);\n}\n#endif\n#if __cplusplus >= 201103L\n#define FOR(_i, _begin, _end) for (auto _i = _begin; _i < _end; _i++)\n#define FORR(_i, _begin, _end) for (auto _i = _begin; _i > _end; _i--)\n#else\n#define FOR(_i, _begin, _end) for (int _i = (int)_begin; _i < (int)_end; _i++)\n#define FORR(_i, _begin, _end) for (int _i = (int)_begin; _i > (int)_end; _i--)\n#define nullptr NULL\n#endif\n#if __cplusplus >= 201103L\n#define VIS(_kind, _name, _size) \\\n    vector<_kind> _name(_size);  \\\n    for (auto &i : _name)        \\\n        cin >> i;\n#else\n#define VIS(_kind, _name, _size)    \\\n    vector<_kind> _name;            \\\n    _name.resize(_size);            \\\n    for (int i = 0; i < _size; i++) \\\n        cin >> _name[i];\n#endif\n// alias\n#define mp make_pair\n#define pb push_back\n#define eb emplace_back\n#define all(x) (x).begin(), (x).end()\n#define tcase() \\\n    int T;      \\\n    cin >> T;   \\\n    FOR(kase, 1, T + 1)\n// Swap max/min\ntemplate <typename T>\nbool smax(T &a, const T &b)\n{\n    if (a > b)\n        return false;\n    a = b;\n    return true;\n}\ntemplate <typename T>\nbool smin(T &a, const T &b)\n{\n    if (a < b)\n        return false;\n    a = b;\n    return true;\n}\n// ceil divide\ntemplate <typename T>\nT cd(T a, T b)\n{\n    return (a + b - 1) / b;\n}\n// min exchange\ntemplate <typename T>\nbool se(T &a, T &b)\n{\n    if (a < b)\n        return false;\n    swap(a, b);\n    return true;\n}\n// A better MAX choice\nconst int INF = 0x3f3f3f3f;\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int, int> pii;\ntypedef vector<int> vi;\ntypedef vector<ll> vll;\ntypedef set<int> si;\ntypedef vector<string> cb;\n//====================END=====================\n\n// Constants here\nconst double EPS = 1e-8;\nconst double PI = acos(-1);\n\ntypedef double db;\n\nint sgn(db x)\n{\n    if (abs(x) < EPS)\n        return 0;\n    if (x < 0)\n        return -1;\n    return 1;\n}\n\ninline db sqr(db x) { return x * x; }\n\n// Point/Vector\nstruct Point\n{\n    db x, y;\n\n    Point() : x(1e-18), y(1e-18) {}\n\n    Point(db _x, db _y) : x(_x + 1e-18), y(_y + 1e-18) {}\n\n    bool operator==(const Point &p)\n    {\n        return sgn(x - p.x) == 0 && sgn(y - p.y) == 0;\n    }\n\n    bool operator<(const Point &p)\n    {\n        int c = sgn(x - p.x);\n        if (c)\n            return c == -1;\n        return sgn(y - p.y) == -1;\n    }\n\n    Point operator+(const Point &p) { return Point(x + p.x, y + p.y); }\n    Point operator-(const Point &p) { return Point(x - p.x, y - p.y); }\n    Point operator*(db d) { return Point(x * d, y * d); }\n    Point operator/(db d) { return Point(x / d, y / d); }\n\n    db operator^(const Point &p) { return x * p.y - y * p.x; }\n    db operator*(const Point &p) { return x * p.x + y * p.y; }\n\n    db dis(const Point &p) { return (*this - p).len(); }\n    db alpha() { return atan2(y, x); }\n\n    Point unit() { return *this / len(); }\n\n    Point rotac() { return Point(-y, x); }\n    Point rotcl() { return Point(y, -x); }\n\n    Point rot(Point p, db angle)\n    {\n        Point v = *this - p;\n        db c = cos(angle), s = sin(angle);\n        return Point(p.x + v.x * c - v.y * s, p.y + v.x * s + v.y * c);\n    }\n\n    db len() { return hypot(x, y); }\n    db len2() { return x * x + y * y; }\n\n    db rad(Point a, Point b)\n    {\n        Point ap = a - *this, bp = b - *this;\n        return abs(atan2(abs(ap ^ bp), ap * bp));\n    }\n\n    void read() { cin >> x >> y; }\n    void write() { cout << '(' << x << \", \" << y << \")\\n\"; }\n};\n\n// Line\nstruct Line\n{\n    Point s, e;\n\n    Line(){};\n\n    Line(Point _s, Point _e) : s(_s), e(_e) {}\n\n    Line(Point p, db angle)\n    {\n        s = p;\n        if (sgn(angle - PI / 2))\n            e = (s + Point(1, tan(angle)));\n        else\n            e = (s + Point(0, 1));\n    }\n\n    //ax+by+c=0\n    Line(db a, db b, db c)\n    {\n        if (sgn(a) == 0)\n        {\n            s = Point(0, -c / b);\n            e = Point(1, -c / b);\n        }\n        else if (sgn(b) == 0)\n        {\n            s = Point(-c / a, 0);\n            e = Point(-c / a, 1);\n        }\n        else\n        {\n            s = Point(0, -c / b);\n            e = Point(1, -(c + a) / b);\n        }\n    }\n\n    db len() { return s.dis(e); }\n    db angle()\n    {\n        db ans = atan2(e.y - s.y, e.x - s.x);\n        if (sgn(ans) == -1)\n            ans += PI;\n        if (sgn(ans - PI) == 0)\n            ans -= PI;\n        return ans;\n    }\n\n    // 1 -> On Left\n    // 2 -> On Right\n    // 3 -> On Line BUT MAY NOT ON THE SEGMENT!\n    int relation(Point p)\n    {\n        Point x = p - s, y = e - s;\n        int c = sgn(x ^ y);\n        if (c < 0)\n            return 1;\n        if (c > 0)\n            return 2;\n        if (sgn(x * y) < 0)\n            return 3;\n        if (sgn(x.len() - y.len()) < 0)\n            return 4;\n        return 5;\n    }\n\n    bool checkOn(Point p) { return sgn((p - s) ^ (e - s)) == 0 && sgn((p - s) ^ (p - e)) <= 0; }\n\n    bool parallel(Line l) { return sgn((e - s) ^ (l.e - l.s)) == 0; }\n\n    // 0 -> Formal Intersection\n    // 1 -> Informal\n    // 2 -> Not Intersect\n    int crossSS(Line l)\n    {\n        int d1 = sgn((e - s) ^ (l.s - s));\n        int d2 = sgn((e - s) ^ (l.e - s));\n        int d3 = sgn((l.e - l.s) ^ (s - l.s));\n        int d4 = sgn((l.e - l.s) ^ (e - l.s));\n        if ((d1 ^ d2) == -2 && (d3 ^ d4) == -2)\n            return 2;\n        return (d1 == 0 && sgn((l.s - s) * (l.s - e)) <= 0) ||\n               (d2 == 0 && sgn((l.e - s) * (l.e - e)) <= 0) ||\n               (d3 == 0 && sgn((s - l.s) * (s - l.e)) <= 0) ||\n               (d4 == 0 && sgn((e - l.s) * (e - l.e)) <= 0);\n    }\n\n    // 0 -> Formal Intersection\n    // 1 -> Informal\n    // 2 -> Not Intersect\n    int crossLS(Line l)\n    {\n        int d1 = sgn((e - s) ^ (l.s - s));\n        int d2 = sgn((e - s) ^ (l.e - s));\n        if ((d1 ^ d2) == -2)\n            return 2;\n        return (d1 == 0 || d2 == 0);\n    }\n\n    // 0 -> Parallel\n    // 1 -> Same\n    // 2 -> Intersect\n    int crossLL(Line l)\n    {\n        if (this->parallel(l))\n            return l.relation(s) == 3;\n        return 2;\n    }\n\n    Point crossP(Line l)\n    {\n        db a1 = (l.e - l.s) ^ (s - l.s);\n        db a2 = (l.e - l.s) ^ (e - l.s);\n        return Point((s.x * a2 - e.x * a1) / (a2 - a1), (s.y * a2 - e.y * a1) / (a2 - a1));\n    }\n\n    db disPL(Point p) { return abs((p - s) ^ (e - s)) / len(); }\n    db disPS(Point p)\n    {\n        if (sgn((p - s) * (e - s)) < 0 || sgn((p - e) * (s - e)) < 0)\n            return min(p.dis(s), p.dis(e));\n        return disPL(p);\n    }\n    db disSS(Line l) { return min(min(disPS(l.s), disPS(l.e)), min(l.disPS(s), l.disPS(e))); }\n\n    Point proj(Point p) { return s + ((e - s) * ((e - s) * (p - s))) / ((e - s).len2()); }\n    Point refl(Point p)\n    {\n        Point q = proj(p);\n        return Point(2 * q.x - p.x, 2 * q.y - p.y);\n    }\n\n    bool operator==(Line l) { return s == l.s && e == l.e; }\n\n    void adjust()\n    {\n        if (e < s)\n            swap(s, e);\n    }\n\n    void read()\n    {\n        s.read();\n        e.read();\n    }\n\n    void write()\n    {\n        cout << \"Line:\\n\";\n        s.write();\n        e.write();\n    }\n};\n\n// Pre-Build Function\ninline void build()\n{\n}\n\n// Actual Solver\ninline void solve()\n{\n    Line l;\n    l.read();\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        Point p;\n        p.read();\n        int re = l.relation(p);\n        if (re == 1)\n            cout << \"COUNTER_CLOCKWISE\\n\";\n        else if (re == 2)\n            cout << \"CLOCKWISE\\n\";\n        else if (re == 3)\n            cout << \"ONLINE_BACK\\n\";\n        else if (re == 4)\n            cout << \"ON_SEGMENT\\n\";\n        else\n            cout << \"ONLINE_FRONT\\n\";\n        // {\n        //     auto d = p.dis(l.s);\n        //     auto a = l.s.rad(l.e, p);\n        //     if (sgn(a - PI) == 0)\n\n        //     else if (sgn(d - l.len()) <= 0)\n\n        //     else\n\n        // }\n    }\n}\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n    cout.tie(nullptr);\n\n#ifdef LOCAL\n    clock_t _begin = clock();\n#endif\n\n    build();\n    solve();\n\n#ifdef LOCAL\n    cerr << \"Time elapsed: \" << (double)(clock() - _begin) * 1000 / CLOCKS_PER_SEC << \"ms.\" << endl;\n#endif\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <map>\n#include <set>\n#include <list>\n#include <cmath>\n#include <deque>\n#include <queue>\n#include <stack>\n#include <cstdio>\n#include <string>\n#include <vector>\n#include <complex>\n#include <cstdlib>\n#include <cstring>\n#include <iomanip>\n#include <numeric>\n#include <utility>\n#include <iostream>\n#include <algorithm>\n#include <functional>\n#include <unordered_map>\n#include <unordered_set>\n\nusing namespace std;\n\n#define ll long long\n#define ull unsigned long long\n#define INF (1 << 29)\n#define LLINF (1LL << 61)\n#define MOD7 1000000007\n#define MOD9 1000000009\n#define EPS 1e-9\n#define P pair<int, int>\n#define pii pair<int, int>\n#define pll pair<ll, ll>\n#define pul pair<ull, ull>\n#define all(a) (a).begin(), (a).end()\n#define FOR(i,a,b) for (int i=(a);i<(b);++i)\n#define RFOR(i,a,b) for (int i=(b)-1;i>=(a);--i)\n#define REP(i,n) for (int i=0;i<(n);++i)\n#define RREP(i,n) for (int i=(n)-1;i>=0;--i)\n#define TO_STRING(VariableName) # VariableName\n\nvoid YES() { cout << \"YES\" << endl; }\nvoid NO() { cout << \"NO\" << endl; }\nvoid Yes() { cout << \"Yes\" << endl; }\nvoid No() { cout << \"No\" << endl; }\nvoid yes() { cout << \"yes\" << endl; }\nvoid no() { cout << \"no\" << endl; }\n\nclass Point;\nclass Segment;\nclass Circle;\n\nusing Vector = Point;\nusing Line = Segment;\nusing Polygon = vector<Point>;\n\nclass Point {\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0) : x(x), y(y) {}\n\n\tPoint operator+(Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator-(Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator*(double k) { return Point(x * k, y * k); }\n\tPoint operator/(double k) { return Point(x / k, y / k); }\n\n\tbool operator<(const Point& p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator==(const Point& p) const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n\n\tfriend istream& operator>>(istream& stream, Point& p) {\n\t\tdouble x, y;\n\t\tstream >> x >> y;\n\t\tp.x = x;\n\t\tp.y = y;\n\t\treturn stream;\n\t}\n\n\tfriend ostream& operator<<(ostream& stream, const Point& p) {\n\t\tstream << fixed << setprecision(10) << p.x << \" \" << p.y;\n\t\treturn stream;\n\t}\n\n\tdouble abs() { return sqrt(norm()); }\n\tdouble norm() { return x * x + y * y; }\n\n\tdouble dot(Vector v) {\n\t\treturn x * v.x + y * v.y;\n\t}\n\n\tdouble cross(Vector v) {\n\t\treturn x * v.y - y * v.x;\n\t}\n};\n\n#define CLOCKWISE 1\n#define COUNTER_CLOCKWISE -1\n#define ONLINE_BACK 2\n#define ONLINE_FRONT -2\n#define ON_SEGMENT 0\n\nclass Segment {\npublic:\n\tPoint p1, p2;\n\n\tSegment(Point p1 = Point(), Point p2 = Point()) : p1(p1), p2(p2) {}\n\t\n\tfriend istream& operator>>(istream& stream, Segment& s) {\n\t\tPoint p1, p2;\n\t\tstream >> p1 >> p2;\n\t\ts.p1 = p1;\n\t\ts.p2 = p2;\n\t\treturn stream;\n\t}\n\n\tfriend ostream& operator<<(ostream& stream, const Segment& s) {\n\t\tstream << fixed << setprecision(10) << s.p1.x << \" \" << s.p1.y << \" \";\n\t\tstream << fixed << setprecision(10) << s.p2.x << \" \" << s.p2.y;\n\t\treturn stream;\n\t}\n\n\tPoint project(Point p) {\n\t\tPoint base = p2 - p1;\n\t\tdouble r = (p - p1).dot(base) / base.norm();\n\t\treturn p1 + base * r;\n\t}\n\n\tPoint refrect(Point p) {\n\t\treturn p + (project(p) - p) * 2;\n\t}\n\n\t/*int ccw(Point p) {\n\t\tVector a = p2 - p1;\n\t\tVector b = p1 - p;\n\t\tif (a.cross(b) > EPS) return COUNTER_CLOCKWISE;\n\t\tif (a.cross(b) < -EPS) return CLOCKWISE;\n\t\tif (a.dot(b) < -EPS) return ONLINE_BACK;\n\t\tif (a.norm() < b.norm()) return ONLINE_FRONT;\n\t\treturn ON_SEGMENT;\n\t}*/\n\tvoid ccw(Point p) {\n\t\tVector a = p2 - p1;\n\t\tVector b = p - p1;\n\n\t\tif (a.cross(b) > EPS) {\n\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t}\n\t\telse if (a.cross(b) < -EPS) {\n\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\t}\n\t\telse if (a.dot(b) < -EPS) {\n\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t}\n\t\telse if (a.norm() < b.norm()) {\n\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t}\n\t\telse {\n\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t}\n\t}\n};\n\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0) : c(c), r(r) {}\n};\n\nint main() {\n\tSegment s;\n\tint q;\n\tPoint p;\n\tcin >> s >> q;\n\twhile (q--) {\n\t\tcin >> p;\n\t\ts.ccw(p);\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ntemplate<class T>\nbool chmax(T& a, const T& b) {\n    if (a < b) { a = b; return true; }\n    return false;\n}\ntemplate<class T>\nbool chmin(T& a, const T& b) {\n    if (b < a) { a = b; return true; }\n    return false;\n}\n// std::vector Declaration\ntemplate<typename T>\nvector<T> make_v(size_t a) { return vector<T>(a); }\ntemplate<typename T, typename... Ts>\nauto make_v(size_t a, Ts... ts) {\n    return vector<decltype(make_v<T>(ts...))>(a, make_v<T>(ts...));\n}\n// std::vector Declaration and Initialization\ntemplate<typename T>\nvector<T> make_vector(size_t a, T x) { return vector<T>(a, x); }\ntemplate<typename T, typename U, typename... Ts>\nauto make_vector(size_t a, U b, Ts... ts) {\n    return vector<decltype(make_vector<T>(b,ts...))>(a, make_vector<T>(b, ts...));\n}\n// std::vector Input\ntemplate<typename T>\nistream& operator>>(istream& is, vector<T>& v) {\n    for (auto &e : v) is >> e;\n    return is;\n}\n// std::vector Debug\ntemplate<typename T>\nostream& operator<<(ostream& os, const vector<T>& v) {\n    os << \"[\";\n    bool a = 1;\n    for (auto e : v) {\n        os << (a ? \"\" : \" \");\n        os << e;\n        a = 0;\n    }\n    os << \"]\";\n    return os;\n}\n// std::array Debug\ntemplate<typename T, size_t n>\nostream& operator<<(ostream& os, const array<T, n>& v) {\n    os << \"[\";\n    bool a = 1;\n    for (auto e : v) {\n        os << (a ? \"\" : \" \");\n        os << e;\n        a = 0;\n    }\n    os << \"]\";\n    return os;\n}\n// std::deque Debug\ntemplate<typename T>\nostream& operator<<(ostream& os, const deque<T>& d) {\n    os << \"[\";\n    bool a = 1;\n    for (auto e : d) {\n        os << (a ? \"\" : \" \");\n        os << e;\n        a = 0;\n    }\n    os << \"]\";\n    return os;\n}\n// std::pair Debug\ntemplate<typename T, typename U>\nostream& operator<<(ostream& os, const pair<T, U>& p) {\n    os << \"(\" << p.first << \" \" << p.second << \")\";\n    return os;\n}\n// std::set Debug\ntemplate<typename T>\nostream& operator<<(ostream& os, const set<T>& st) {\n    os << \"{\";\n    bool a = 1;\n    for (auto e : st) {\n        os << (a ? \"\" : \" \");\n        os << e;\n        a = 0;\n    }\n    os << \"}\";\n    return os;\n}\n// std::multiset Debug\ntemplate<typename T>\nostream& operator<<(ostream& os, const multiset<T>& st) {\n    os << \"{\";\n    bool a = 1;\n    for (auto e : st) {\n        os << (a ? \"\" : \" \");\n        os << e;\n        a = 0;\n    }\n    os << \"}\";\n    return os;\n}\n// std::map Debug\ntemplate<typename T, typename U>\nostream& operator<<(ostream& os, const map<T, U>& mp) {\n    os << \"{\";\n    bool a = 1;\n    for (auto e : mp) {\n        os << (a ? \"\" : \" \");\n        os << e.first << \":\" << e.second;\n        a = 0;\n    }\n    os << \"}\";\n    return os;\n}\n// std::tuple Debug\ntemplate<int N, class Tuple>\nvoid out(ostream& os, const Tuple& t){}\ntemplate<int N, class Tuple, class H, class ...Ts>\nvoid out(ostream& os, const Tuple& t) {\n    if (N) os << \" \";\n    os << get<N>(t);\n    out<N+1,Tuple,Ts...>(os, t);\n}\ntemplate<class ...Ts>\nostream& operator<<(ostream& os, const tuple<Ts...>& t) {\n    os << \"(\";\n    out<0,tuple<Ts...>,Ts...>(os, t);\n    os << \")\";\n    return os;\n}\n// Debug\n// Weighted edge\ntemplate<typename T>\nstruct edge {\n    int src, to;\n    T cost;\n    edge() {}\n    edge(int to, T cost) : src(-1), to(to), cost(cost) {}\n    edge(int src, int to, T cost) : src(src), to(to), cost(cost) {}\n    friend ostream& operator<<(ostream& os, const edge& e) {\n        return os << \"(\" << e.src << \"->\" << e.to << \":\" << e.cost << \")\";\n    }\n};\nusing LL = int64_t;\nconst int64_t MOD = 1e9+7;\nusing Real = double;\nReal EPS = 1e-8;\nusing Point = complex<Real>;\nstruct Line {\n    Point a, b;\n    Line() {}\n    Line(const Point& a, const Point& b) : a(a), b(b) {}\n    friend ostream& operator<<(ostream& os, Line& l) {\n        return os << \"[\" << l.a << \",\" << l.b << \"]\";\n    }\n};\nstruct Segment : Line {\n    Segment() = default;\n    Segment(const Point& a, const Point& b) : Line(a, b) {}\n};\ninline bool eq(Real a, Real b) { return abs(b - a) < EPS; }\nReal radian_to_degree(Real r) {\n    return r * 180.0 / M_PI;\n}\nReal degree_to_radian(Real d) {\n    return d * M_PI / 180.0;\n}\nPoint rotate(const Point &p, Real theta) {\n    return p * polar(1., theta);\n}\nReal cross(const Point& a, const Point& b) {\n    return a.real() * b.imag() - a.imag() * b.real();\n}\nReal dot(const Point& a, const Point& b) {\n    return a.real() * b.real() + a.imag() * b.imag();\n}\nPoint projection(const Line& l, const Point& p) {\n    Real A = dot(l.b - l.a, p - l.a),\n         B = dot(l.a - l.b, p - l.b);\n    return (A * l.b + B * l.a) / (A + B);\n}\nbool parallel(const Line& l1, const Line& l2) {\n    return eq(cross(l1.a - l1.b, l2.a - l2.b), 0.0);\n}\nbool orthogonal(const Line& l1, const Line& l2) {\n    return eq(dot(l1.a - l1.b, l2.a - l2.b), 0.0);\n}\nconst int COUNTER_CLOCKWISE = 1,\n          CLOCKWISE = -1,\n          ONLINE_BACK = 2,\n          ONLINE_FRONT = -2,\n          ON_SEGMENT = 0;\nint ccw(const Point& a, Point b, Point c) {\n    b = b - a, c = c - a;\n    if (cross(b, c) > EPS) return COUNTER_CLOCKWISE;\n    if (cross(b, c) < -EPS) return CLOCKWISE;\n    if (dot(b, c) < 0) return ONLINE_BACK;\n    if (norm(b) < norm(c)) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\nbool intersected(const Line& l, const Point& p) {\n    return abs(ccw(l.a, l.b, p)) != 1;\n}\nbool intersected(const Segment& s, const Point& p) {\n    return ccw(s.a, s.b, p) == 0;\n}\nbool intersected(const Line& l, const Segment& s) {\n    return cross(l.b - l.a, s.a - l.a) * cross(l.b - l.a, s.b - l.a) < EPS;\n}\nbool intersected(const Segment& s1, const Segment& s2) {\n    return ccw(s1.a, s1.b, s2.a) * ccw(s1.a, s1.b, s2.b) <= 0 and\n           ccw(s2.a, s2.b, s1.a) * ccw(s2.a, s2.b, s1.b) <= 0;\n}\nReal distance(const Line& l, const Point& p) {\n    return abs(p - projection(l, p));\n}\nReal distance(const Segment& s, const Point& p) {\n    Point r = projection(s, p);\n    if (intersected(s, r)) return abs(r - p);\n    return min(abs(s.a - p), abs(s.b - p));\n}\nReal distance(const Line &l, const Segment &s) {\n    if (intersected(l, s)) return 0;\n    return min(distance(l, s.a), distance(l, s.b));\n}\nReal distance(const Segment& s1, const Segment& s2) {\n    if (intersected(s1, s2)) return 0.0;\n    return min({ distance(s1, s2.a), distance(s1, s2.b),\n                 distance(s2, s1.a), distance(s2, s1.b) });\n}\nPoint crosspoint(const Line& l1, const Line& l2) {\n    Real A = cross(l2.a - l1.a, l2.b - l1.a),\n         B = cross(l2.b - l1.b, l2.a - l1.b);\n    return (A * l1.b + B * l1.a) / (A + B);\n}\nint main()\n{\n    double x1, y1, x2, y2;\n    cin >> x1 >> y1 >> x2 >> y2;\n    Segment l{Point{x1, y1}, Point{x2, y2}};\n    int q; cin >> q;\n    while (q--) {\n        double x, y; cin >> x >> y;\n        Point p{x, y};\n        int c = ccw(l.a, l.b, p);\n        if (c == COUNTER_CLOCKWISE) {\n            cout << \"COUNTER_CLOCKWISE\" << endl;\n        }\n        if (c == CLOCKWISE) {\n            cout << \"CLOCKWISE\" << endl;\n        }\n        if (c == ONLINE_BACK) {\n            cout << \"ONLINE_BACK\" << endl;\n        }\n        if (c == ONLINE_FRONT) {\n            cout << \"ONLINE_FRONT\" << endl;\n        }\n        if (c == ON_SEGMENT) {\n            cout << \"ON_SEGMENT\" << endl;\n        }\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <string>\n#include <fstream>\n#include <vector>\n#include <cstdio>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <cmath>\n#include <cstdlib>\n#include <cstring>\n#include <string>\n#include <set>\n#include <map>\nusing namespace std;\ntypedef long long ll;\n\n// #define DEBUG\n\nclass Point;\nPoint pointprojection(Point a, Point b, Point c);\nPoint pointreflection(Point a, Point b, Point c);\nvoid pointargument(Point a, Point b, Point c);\n\nclass Point\n{\n    double x;\n    double y;\n\npublic:\n    void printpoint();\n    double norm();\n    friend Point operator+(Point a, Point b);\n    friend double operator*(Point a, Point b);\n    friend Point operator*(double a, Point b);\n    friend Point operator*(Point a, double b);\n    friend Point operator/(Point a, double b);\n    friend double operator/(Point a, Point b);\n    friend Point operator-(Point a, Point b);\n    double dot(Point b);\n    Point(double a, double b)\n    {\n        x = a;\n        y = b;\n    }\n    double get_x() { return x; }\n    double get_y() { return y; }\n};\n\nvoid Point::printpoint()\n{\n    printf(\"%.8f  %.8f\\n\", x, y);\n}\n\ndouble Point::norm()\n{\n    return sqrt(x * x + y * y);\n}\n\nPoint operator+(Point a, Point b)\n{\n    return Point(a.x + b.x, a.y + b.y);\n}\n\ndouble operator*(Point a, Point b)\n{\n    return double(a.x * b.y - a.y * b.x);\n}\nPoint operator*(double a, Point b)\n{\n    return Point(a * b.get_x(), a * b.get_y());\n}\nPoint operator*(Point a, double b)\n{\n    return Point(a.get_x() * b, a.get_y() * b);\n}\nPoint operator/(Point a, double b)\n{\n    return Point(a.get_x() / b, a.get_y() / b);\n}\ndouble operator/(Point a, Point b)\n{\n    double ret;\n    if (b.get_x() != 0)\n        ret =  a.get_x() / b.get_x();\n    else if (b.get_y() != 0)\n        ret = a.get_y() / b.get_y();\n    return ret;\n}\nPoint operator-(Point a, Point b)\n{\n    return Point(a.x - b.x, a.y - b.y);\n}\n\ndouble Point::dot(Point b)\n{\n    return x * b.x + y * b.y;\n}\n\nvoid printarray(int n, int a[])\n{\n    for (int i = 1; i < n + 1; i++)\n    {\n        cout << a[i];\n        if (i != n)\n            cout << \" \";\n    }\n    cout << endl;\n}\n\nPoint pointprojection(Point a, Point b, Point c)\n{\n    Point v1 = b - a;\n    Point v2 = c - a;\n    Point d = v1 * (v1.dot(v2) / (v1.norm() * v1.norm())) + a;\n    return d;\n}\n\nPoint pointreflection(Point a, Point b, Point c)\n{\n    Point d = pointprojection(a, b, c);\n    Point e = 2 * d - c;\n    return e;\n}\n\nvoid pointargument(Point a, Point b, Point c)\n{\n    Point vba = b - a;\n    Point vca = c - a;\n    double s = vba * vca;\n    if (s > 0)\n        cout << \"COUNTER_CLOCKWISE\" << endl;\n    else if (s < 0)\n        cout << \"CLOCKWISE\" << endl;\n    else\n    {\n        double p = vca / vba;\n        if (p < 0)\n            cout << \"ONLINE_BACK\" << endl;\n        else if (0 <= p && p <= 1)\n            cout << \"ON_SEGMENT\" << endl;\n        else if (1 < p)\n            cout << \"ONLINE_FRONT\" << endl;\n    }\n}\n\nint main()\n{\n\n#ifdef DEBUG\n    cout << \"DEBUG MODE\" << endl;\n    ifstream in(\"input.txt\"); //for debug\n    cin.rdbuf(in.rdbuf());    //for debug\n#endif\n\n    double a, b, c, d, e, f, q;\n    cin >> a >> b >> c >> d;\n    Point p1(a, b);\n    Point p2(c, d);\n    cin >> q;\n    for (int i = 0; i < q; i++)\n    {\n        cin >> e >> f;\n        Point p3(e, f);\n        pointargument(p1, p2, p3);\n    }\n    return 0;\n}\n\n// getline(cin,s);\n// a = strtok(s, \",\");  \",\"で分解\n// for (int i = 0; i < n; i++)\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> P;\n#define x real()\n#define y imag()\n\nstring ccw(P a,P b,P c){\n  P ab=b-a,ac=c-a;\n  P k=ac*conj(ab);\n  if(k.y>0)return \"COUNTER_CLOCKWISE\";\n  if(k.y<0)return \"CLOCKWISE\";\n  if(k.x<0)return \"ONLINE_BACK\";\n  if(abs(ab)<abs(ac))return \"ONLINE_FRONT\";\n  return \"ON_SEGMENT\";\n}\n\nint main(){\n  double x0,y0,x1,y1,x2,y2;\n  cin>>x0>>y0>>x1>>y1;\n  P a(x0,y0);\n  P b(x1,y1);\n  int n;\n  cin>>n;\n  while(n--){\n    cin>>x2>>y2;\n    P c(x2,y2);\n    cout<< ccw(a,b,c) <<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define ll long long\n#define INF 1000000005\n#define MOD 1000000007\n#define EPS 1e-10\n#define rep(i,n) for(int i=0;i<n;++i)\n\nusing namespace std;\n\ntypedef pair<int,int>P;\n\nconst int MAX_N = 100005;\n\nint Q;\n\nvoid ccw(P p0,P p1,P p2)\n{\n\tP a = P(p1.first - p0.first,p1.second - p0.second);\n\tP b = P(p2.first - p0.first,p2.second - p0.second);\n\tint dot = a.first*b.first+a.second*b.second;\n\tint cross = a.first*b.second - a.second*b.first;\n\tint na = a.first*a.first+a.second*a.second;\n\tint nb = b.first*b.first+b.second*b.second;\n\tif(cross > EPS){\n\t\tprintf(\"COUNTER_CLOCKWISE\\n\");\n\t}else if(cross < -EPS){\n\t\tprintf(\"CLOCKWISE\\n\");\n\t}else if(dot < -EPS){\n\t\tprintf(\"ONLINE_BACK\\n\");\n\t}else if(na < nb){\n\t\tprintf(\"ONLINR_FRONT\\n\");\n\t}else{\n\t\tprintf(\"ON_SEGMENT\\n\");\n\t}\n}\n\nint main()\n{\n\tP p0,p1,p2;\n\tscanf(\"%d%d%d%d\",&p0.first,&p0.second,&p1.first,&p1.second);\n\tscanf(\"%d\",&Q);\n\trep(i,Q){\n\t\tscanf(\"%d%d\",&p2.first,&p2.second);\n\t\tccw(p0,p1,p2);\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "//Counter-Clockwise\n#include <iostream>\n#include <math.h>\n#include <iomanip>\n\nusing namespace std;\n\nstatic const double ESP = 1e-10;\n\nbool equals(double a, double b) { return fabs(a - b) < ESP; }\n\nclass Point {\npublic:\n    double x, y;\n\n    explicit Point(double x = 0, double y = 0): x(x), y(y) {}\n\n    Point operator + (const Point &p) const { return Point(x + p.x, y + p.y); }\n    Point operator - (const Point &p) const { return Point(x - p.x, y - p.y); }\n    Point operator * (double a) { return Point(a * x, a * y); }\n    Point operator / (double a) { return Point(a / x, a / y); }\n\n    double norm() { return x * x + y * y; }\n    double abs() { return sqrt(norm()); }\n\n    bool operator < (const Point &p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point &p) const {\n        return fabs(x - p.x) < ESP && fabs(y - p.y) < ESP;\n    }\n};\n\ntypedef Point Vector;\n\nstruct Segment {\n    Point p1, p2;\n    Segment(Point p1, Point p2): p1(p1), p2(p2) {}\n};\n\ndouble dot(Vector a, Vector b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n    return a.x * b.y - a.y * b.x;\n}\n\nbool isParallel(Vector v1, Vector v2) {\n    return equals(cross(v1, v2), 0.0);\n}\n\nbool isOrthogonal(Vector v1, Vector v2) {\n    return equals(dot(v1, v2), 0.0);\n}\n\nPoint project(Segment s, Point p) {\n    Vector base = s.p2 - s.p1;\n    return s.p1 + (base * (dot(base, p - s.p1) / base.norm()));\n}\n\nPoint reflect(Segment s, Point p) {\n    return p + (project(s, p) - p) * 2;\n}\n\nenum {\n    COUNTER_CLOCKWISE,\n    CLOCKWISE,\n    ONLINE_BACK,\n    ONLINE_FRONT,\n    ON_SEGMENT\n};\n\nint ccw(Point p0, Point p1, Point p2) {\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if (cross(a, b) > ESP) return COUNTER_CLOCKWISE;\n    else if (cross(a, b) < -ESP) return CLOCKWISE;\n    else if (dot(a, b) < -ESP) return ONLINE_BACK;\n    else if (a.norm() < b.norm()) return ONLINE_FRONT;\n    else return ON_SEGMENT;\n}\n\nint main() {\n    int q;\n    double x0, y0, x1, y1, x2, y2;\n    cin >> x0 >> y0 >> x1 >> y1 >> q;\n    Point p0 = Point(x0, y0), p1 = Point(x1, y1);\n    for(int i = 0; i < q; i++) {\n        cin >> x2 >> y2;\n        Point p2 = Point(x2, y2);\n        switch(ccw(p0, p1, p2)) {\n            case COUNTER_CLOCKWISE:\n                cout << \"COUNTER_CLOCKWISE\" << endl;\n                break;\n            case CLOCKWISE:\n                cout << \"CLOCKWISE\" << endl;\n                break;\n            case ONLINE_BACK:\n                cout << \"ONLINE_BACK\" << endl;\n                break;\n            case ONLINE_FRONT:\n                cout << \"ONLINE_FRONT\" << endl;\n                break;\n            case ON_SEGMENT:\n                cout << \"ON_SEGMENT\" << endl;\n                break;\n            default:\n                break;\n        }\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> P;\ntypedef complex<double> V;\ntypedef vector<P> vecP;\ntypedef pair<P,P> L;\ntypedef pair<P,P> S;\ntypedef pair<P,double> C;\nconst double eps=1e-8;\nconst double PI=acos(-1);\nconst double PI2=PI*2.0;\n\nnamespace std{\n  bool operator < (const P &a,const P &b){\n    return (a.imag()==b.imag()?\n            a.real()<b.real():\n            a.imag()<b.imag());\n  }\n};\n\nV normal(V a){\n  assert( abs(a)>0 );\n  return a/abs(a);\n}\n\ndouble Sqrt( double x ){\n  if(x<0)return 0;\n  else return sqrt(x);\n}\n\nP Vector(L a){\n  return a.second-a.first;\n}\n\nbool eq(double a,double b){\n  return (-eps<a-b&&a-b<eps);\n}\n\nbool eq(P a,P b){\n  return ( eq(a.real(),b.real()) && eq(a.imag(),b.imag()) );\n}\n\ndouble dot(P a,P b){\n  return real(b*conj(a));\n}\n\ndouble cross(P a,P b){\n  return imag(b*conj(a));\n}\n\ndouble getArg(P a,P b){\n  return arg(b*conj(a));\n}\n\ndouble getTime(V a,V b){\n  assert( eq(cross(a,b),0) );\n  return ( dot(a,b) < 0 ? -1.0 : 1.0 ) * abs(b) / abs(a);\n}\n\n\nP project(P a,P b,P c){\n  b-=a,c-=a;\n  return a+b*real(c/b);\n}\n\nP reflect(P a,P b,P c){\n  b-=a,c-=a;\n  return a+b*conj(c/b);\n}\n\nint ccw(P a,P b,P c){\n  P ab=b-a,ac=c-a;\n  P k=ac*conj(ab);\n  if(k.imag()>0)return 1;\n  if(k.imag()<0)return -1;\n  if(k.real()<0)return 2;\n  if(abs(ab)<abs(ac))return -2;\n  return 0;\n}\n\nbool isParallel(P a,P b){\n  return eq(0, cross(a,b));\n}\n\nbool isParallel(L l0,L l1){\n  return eq(0, cross( Vector(l0) , Vector(l1) ) );\n}\n\nbool onLP(L l,P p){\n  P a=l.first, b=l.second;\n  return eq(0, cross(b-a,p-a));\n}\n\nbool onSP(S s,P p){\n  P a=s.first, b=s.second;\n  return eq( abs(b-a) , abs(a-p)+abs(b-p) );\n}\n\nbool isCrossSS(S s0,S s1){\n  P a=s0.first, b=s0.second;\n  P c=s1.first, d=s1.second;\n  int f0 = ccw(a,b,c) * ccw(a,b,d);\n  int f1 = ccw(c,d,a) * ccw(c,d,b);\n  return (f0<=0 && f1<=0);\n}\n\nbool isCrossLS(L l,S s){\n  P a=l.first, b=l.second;\n  P c=s.first, d=s.second;\n  return ( ccw(a,b,c) * ccw(a,b,d) <= 0 );\n}\n\ndouble distLP(L l,P p){\n  P a=l.first, b=l.second;\n  double res = cross(b-a,p-a) / abs(b-a);\n  return abs(res);\n}\n\ndouble distSP(S s,P p){\n  P a=s.first, b=s.second;\n  if( dot(b-a,p-a) < eps )return abs(p-a);\n  if( dot(a-b,p-b) < eps )return abs(p-b);\n  return distLP(s,p);\n}\n\nP getCrossLL(L l0,L l1){\n  P a=l0.first, b=l0.second;\n  P c=l1.first, d=l1.second;\n  a-=d;b-=d;c-=d;\n  return d+a+(b-a)*imag(a/c)/imag(a/c-b/c);\n}\n\n\n \nint inPolygon(vecP &t,P p){\n  int n=t.size();\n  double sum=0;\n  for(int i=0;i<n;i++){\n    P a=t[i],b=t[(i+1==n?0:i+1)];\n    if( onSP(S(a,b),p) )return 1;\n    sum+= getArg(a-p,b-p);\n  }\n  if( abs(sum) < eps )return 0;\n  else return 2;\n}\n\nvecP andrewScan(vecP &t){\n  int N=t.size(),C=0;\n  vecP R(N);\n  for(int i=0;i<N;i++){\n    while(2<=C&&ccw(R[C-2],R[C-1],t[i])==-1)C--;\n    R[C++]=t[i];\n  }\n  vecP res(C);\n  for(int i=0;i<C;i++)res[i]=R[i];\n  return res;\n}\n \nvecP convexHull(vecP &t){\n  sort(t.begin(),t.end());\n  vecP u=andrewScan(t);\n  reverse(t.begin(),t.end());\n  vecP l=andrewScan(t);\n  for(int i=1;i+1<(int)l.size();i++)u.push_back(l[i]);\n  return u;\n}\n\nvecP cutConvex(vecP &t,L l){\n  P a=l.first, b=l.second;\n  int N=t.size();\n  vecP res;\n  for(int i=0;i<N;i++){\n    P c=t[i],d=t[(i+1)%N];\n    int C=ccw(a,b,c),D=ccw(a,b,d);\n    if(C!=-1)res.push_back(c);\n    if(C==-D&&abs(C)==1)res.push_back(getCrossLL( l ,L(c,d) ));\n  }\n  return res;\n}\n\nP getVector(const vecP &t, int id){\n  int n=t.size();\n  return t[ (id+1)%n ] - t[id%n];\n}\n\ndouble convex_diameter(vecP &t) {\n  int n = t.size();\n  int is = 0, js = 0;\n  for (int i = 1; i < n; ++i) {\n    if (imag(t[i]) > imag(t[is])) is = i;\n    if (imag(t[i]) < imag(t[js])) js = i;\n  }\n  double maxd = norm(t[is]-t[js]);\n \n  int i, maxi, j, maxj;\n  i = maxi = is;\n  j = maxj = js;\n  do {\n    \n    if (cross( getVector(t,i), getVector(t,j)) >= 0) j = (j+1) % n;\n    \n    else i = (i+1) % n;\n    if (norm(t[i]-t[j]) > maxd) {\n      maxd = norm(t[i]-t[j]);\n      maxi = i; maxj = j;\n    }\n  } while (i != is || j != js);\n  return maxd; /* farthest pair is (maxi, maxj). */\n}\n\nbool compare_y(const P &a,const P &b){\n  return a.imag() < b.imag();\n}\n\ndouble closest_pair(P *a, int n){\n  if(n <= 1) return 1e30;\n  int m = n / 2;\n  double x = a[m].real();\n  double d = min(closest_pair(a, m), closest_pair(a + m, n - m));\n  inplace_merge(a, a + m, a + n, compare_y);\n  vector<P> b;\n  for(int i=0;i<n;i++){\n    if( abs(a[i].real() - x) >= d) continue;\n    for(int j=0;j<(int)b.size();j++){\n      double dx = real(a[i] - b[b.size() - j - 1]);\n      double dy = imag(a[i] - b[b.size() - j - 1]);\n      if(dy >= d) break;\n      d = min(d, sqrt(dx * dx + dy * dy));\n    }\n    b.push_back(a[i]);\n  }\n  return d;\n}\n\nP _pool[200005];\ndouble minDist(vecP &t){\n  int n=t.size();\n  for(int i=0;i<n;i++)_pool[i]=t[i];\n  sort( _pool, _pool+n);\n  return closest_pair(_pool, n);\n}\n\nint getStateCC(C a,C b){\n  double ar=a.second, br=b.second;\n  double dist=abs(a.first-b.first);\n  if(dist>ar+br+eps)return 4;\n  if(dist>ar+br-eps)return 3;\n  if(dist>abs(ar-br)+eps)return 2;\n  if(dist>abs(ar-br)-eps)return 1;\n  return 0;\n}\n\nP getCrossCC(C a,C b){\n  P p1=a.first, p2=a.second;\n  double r1=a.second, r2=b.second;\n  double cA = (r1*r1+norm(p1-p2)-r2*r2) / (2.0*r1*abs(p1-p2));\n  return p1+(p2-p1)/abs(p1-p2)*r1*P(cA,Sqrt(1.0-cA*cA));\n}\n\nS getTangentCP(C a,P p){\n  P base=a.first-p;\n  double ar=a.second;\n  double w=Sqrt(norm(base)-ar*ar);\n  P s=p+base*P(w,ar)/norm(base)*w;\n  P t=p+base*P(w,-ar)/norm(base)*w;\n  return S(s,t);\n}\n\nS getInTangent(C a,C b,double flg=1.0){\n  P ap=a.first,bp=b.first;\n  double ar=a.second,br=b.second;\n  \n  P base=bp-ap;\n  double w=ar+br;\n  double h=Sqrt(norm(base)-w*w);\n  P k=base*P(w,h*flg)/norm(base);\n  return S(ap+k*ar,bp-k*br);\n}\n  \nS getOutTangent(C a,C b,double flg=1.0){\n  P ap=a.first,bp=b.first;\n  double ar=a.second,br=b.second;\n  \n  P base=bp-ap;\n  double h=br-ar;\n  \n  double w=Sqrt(norm(base)-h*h);\n  P k=base*P(w,h*flg)/norm(base)*P(0,flg);\n  return S(ap+k*ar,bp+k*br);\n}\n  \nvector<S> getTangent(C a,C b){\n  P ap=a.first,bp=b.first;\n  double ar=a.second,br=b.second;\n  \n  vector<S> res;\n  double dist=abs(ap-bp);\n    \n  if(dist>ar+br+eps)\n    res.push_back(getInTangent(a,b,1));\n  \n  if(dist>ar+br-eps)\n    res.push_back(getInTangent(a,b,-1));\n  \n  if(dist>abs(ar-br)+eps)\n    res.push_back(getOutTangent(a,b,1));\n  \n  if(dist>abs(ar-br)-eps)\n    res.push_back(getOutTangent(a,b,-1));\n  \n  return res;\n}\n\n\nvecP getCrossCS(C cir,S s, bool debug=false){\n  P a=s.first, b=s.second;\n  double cr=cir.second;\n  P cp=cir.first;\n  \n  vecP res;\n  P base=b-a,  target=project(a,b,cp);\n  \n  double length=abs(base), h=abs(cp-target);\n  base/=length;\n  \n  if(cr+eps<h)return res;\n  double w=Sqrt(cr*cr-h*h);\n  double L=getTime( normal(b-a) ,target-a)-w,  R=L+w*2.0;\n  \n  if( -eps<L && L< length+eps )res.push_back(a+base*L);\n  if( eq(L,R) )return res;\n  if( -eps<R && R< length+eps )res.push_back(a+base*R);\n  return res;\n}\n \ndouble getArea(C c,P a,P b){\n  P cp=c.first;\n  double cr=c.second;\n  \n  P va=cp-a,  vb=cp-b;\n  double A=abs(va), B=abs(vb);\n  double f=cross(va,vb), d=distSP( S(a,b) ,cp), res=0;\n  \n  if( eq(0, f ) )return 0;\n  if(A<cr+eps&&B<cr+eps)return f*0.5;\n  if(d>cr-eps)return cr*cr*PI*getArg(va,vb)/PI2;\n   \n  vecP u=getCrossCS(c, S(a,b) );\n  \n  assert( !u.empty() );\n  u.insert(u.begin(), a),  u.push_back(b);\n \n  for(int i=0;i+1<(int)u.size();i++) res+=getArea(c,u[i],u[i+1]);\n  return res;\n}\n \ndouble getCrossArea(vecP t,C c){\n  int n=t.size();\n  if(n<3)return 0;\n  double res=0;\n  for(int i=0;i<n;i++){\n    P a=t[i], b=t[(i+1)%n];\n    res+=getArea(c,a,b);\n  }\n  return res;\n}\n\nP input(){\n  int x,y;\n  cin>>x>>y;\n  return P(x,y);\n}\n\nvoid pr(P p,string str){\n  printf(\"%.10f %.10f\",p.real(),p.imag());\n  cout<<str;\n}\n\n\nint main(){\n  P s,t;\n  s=input(), t=input();\n  int q;\n  cin>>q;\n  for(int i=0;i<q;i++){\n    P p=input();\n\n    int ans= ccw(s,t,p);\n    if(ans==-1)cout<<\"COUNTER_CLOCKWISE\"<<endl;\n    if(ans==1)cout<<\"CLOCKWISE\"<<endl;\n    if(ans==0)cout<<\"ON_SEGMENT\"<<endl;\n    if(ans==-2)cout<<\"ONLINE_FRONT\"<<endl;\n    if(ans==2)cout<<\"ONLINE_BACK\"<<endl;\n  }\n  \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cmath>\n#include<iostream>\n#include<algorithm>\n#include<iomanip>\n#include<vector>\n#include<cassert>\n\nusing namespace std;\n\nnamespace geometry2d {\n\n\t//eps　浮動小数点誤差\n\tconst double EPS = 1e-10;\n\n\t//a > 0ならば+1, a == 0ならば0, a < 0ならば-1　を返す。　基本的にEPS込みの評価はこれで行う。\n\t//不等式は、加減算に直してこれに適用する。\n\tint sgn(const double a) {\n\t\treturn (a < -EPS ? -1 : (a > EPS ? +1 : 0));\n\t}\n\n\tstruct Point {\n\t\t//2次元ベクトルのクラス\n\n\t\tdouble x, y;\n\t\tPoint(double _x, double _y) {\n\t\t\tx = _x, y = _y;\n\t\t}\n\t\tPoint() {\n\t\t\tx = 0, y = 0;\n\t\t}\n\n\t\tPoint operator+() const {\n\t\t\treturn *this;\n\t\t}\n\t\tPoint operator-() const {\n\t\t\treturn{ -x, -y };\n\t\t}\n\t\tPoint operator+ (const Point& b) const {\n\t\t\treturn{ x + b.x, y + b.y };\n\t\t}\n\t\tPoint operator- (const Point& b) const {\n\t\t\treturn{ x - b.x, y - b.y };\n\t\t}\n\t\tPoint operator* (const double b) const {\n\t\t\treturn{ x * b, y * b };\n\t\t}\n\t\tPoint operator/ (const double b) const {\n\t\t\treturn{ x / b, y / b };\n\t\t}\n\t\tPoint operator+= (const Point& b) {\n\t\t\tx += b.x, y += b.y;\n\t\t\treturn *this;\n\t\t}\n\t\tPoint operator-= (const Point& b) {\n\t\t\tx -= b.x, y -= b.y;\n\t\t\treturn *this;\n\t\t}\n\t\tPoint operator*= (const double b) {\n\t\t\tx *= b, y *= b;\n\t\t\treturn *this;\n\t\t}\n\t\tPoint operator/= (const double b) {\n\t\t\tx /= b, y /= b;\n\t\t\treturn *this;\n\t\t}\n\t\tbool operator== (const Point& b) {\n\t\t\treturn b.x == x && b.y == y;\n\t\t}\n\n\t\tdouble lengthSquare() const {\n\t\t\treturn (x * x + y * y);\n\t\t}\n\t\tdouble length() const {\n\t\t\treturn std::sqrt(lengthSquare());\n\t\t}\n\t\tdouble dot(const Point& b) const {\n\t\t\treturn x * b.x + y * b.y;\n\t\t}\n\t\tdouble cross(const Point& b) const {\n\t\t\t//Generally, cross product is vector, but in 2D, cross product is also scalar.\n\t\t\treturn x * b.y - y * b.x;\n\t\t}\n\t\tdouble distanceFrom(const Point& b) const {\n\t\t\treturn std::sqrt((x - b.x) * (x - b.x) + (y - b.y) * (y - b.y));\n\t\t}\n\t\tPoint normalized() const {\n\t\t\treturn{ x / length(), y / length() };\n\t\t}\n\t\tbool isZero() const {\n\t\t\treturn sgn(x) == 0 && sgn(y) == 0;\n\t\t}\n\t\t//単位法線ベクトル\n\t\tPoint normalUnitVector() const {\n\t\t\treturn{ -normalized().y, normalized().x };\n\t\t}\n\t\t//(0, 0)中心にarg(弧度法)回転した座標\n\t\tPoint rotation(double arg) const {\n\t\t\tdouble cs = cos(arg), sn = sin(arg);\n\t\t\treturn Point(x * cs - y * sn, x * sn + y * cs);\n\t\t}\n\t\t//(0, 0)中心の円上に乗ってるとしたときの、偏角\n\t\tdouble angle() const {\n\t\t\treturn atan2(y, x);\n\t\t}\n\t};\n\n\tinline Point operator*(double a, const Point& b) {\n\t\treturn{ b.x * a, b.y * a };\n\t}\n\n\ttemplate <class Char>\n\tinline std::basic_ostream<Char>& operator <<(std::basic_ostream<Char>& os, const Point& v)\n\t{\n\t\treturn os << Char('(') << v.x << Char(',') << v.y << Char(')');\n\t}\n\n\ttemplate <class Char>\n\tinline std::basic_istream<Char>& operator >> (std::basic_istream<Char>& is, Point& v)\n\t{\n\t\treturn is >> v.x >> v.y;\n\t}\n\n\t//幾何ライブラリにおいて、解なしのような状態の時に返される点の値\n\tconst Point error_val = { 114514.0, -191981.0 };\n\n\tinline bool operator==(const Point& a, const Point& b) {\n\t\treturn (sgn(a.x - b.x) == 0 && sgn(a.y - b.y) == 0);\n\t}\n\n\t//第一にx, 第二にyを小さい順にソートするためのオーバーロード\n\tinline bool operator<(const Point& a, const Point& b) {\n\t\tif (sgn(a.x - b.x) != 0)return sgn(a.x - b.x) < 0;\n\t\telse sgn(a.y - b.y) < 0;\n\t}\n\n\t/*\n\t3点A, B, Cの位置関係を返す関数 A, Bがすべて異なった点であるのが前提\n\t//ABから見てBCは左に曲がるのなら +1\n\t//ABから見てBCは右に曲がるのなら -1\n\t//ABC(CBA)の順番で一直線上に並ぶなら +2\n\t//ACB(BCA)の順番で一直線上に並ぶなら 0\n\tBAC(CAB)の順番で一直線上に並ぶなら -2\n\t*/\n\tint iSP(const Point& a, const Point& b, const Point& c) {\n\t\tint flg = sgn((b - a).cross(c - a));\n\t\tif (flg == 1) {\n\t\t\treturn +1;\n\t\t}\n\t\telse if (flg == -1) {\n\t\t\treturn -1;\n\t\t}\n\t\telse {\n\t\t\t//ABC(CBA)\n\t\t\tif (sgn((b - a).dot(c - b)) > 0)\n\t\t\t\treturn +2;\n\t\t\t//BAC(CAB)\n\t\t\telse if (sgn((a - b).dot(c - a)) > 0)\n\t\t\t\treturn -2;\n\t\t\t//ACB(BCA)　CがA or Bと一致しても、こっちに含まれる。\n\t\t\telse\n\t\t\t\treturn 0;\n\t\t}\n\t}\n\n\t//直線に関する操作や判定\n\tnamespace line2d {\n\n\t\t//向きつき直線を想定。Segment\n\t\tstruct Line {\n\t\t\t\n\t\t\t//直線の通る二点。有向直線でないのならば、beginやendに違いはない。\n\t\t\tPoint begin, end;\n\n\t\t\tLine() {\n\t\t\t\tbegin = Point(), end = Point();\n\t\t\t}\n\n\t\t\tLine(const Point& b, const Point& e) {\n\t\t\t\tbegin = b, end = e;\n\t\t\t}\n\n\t\t\t//ax+by+c=0\n\t\t\tLine(const double a, const double b, const double c) {\n\t\t\t\tif (sgn(a) == 0 && sgn(b) == 0) {\n\t\t\t\t\tassert(-1);\n\t\t\t\t}\n\n\t\t\t\tif (sgn(b) == 0) {\n\t\t\t\t\t//ax+c=0になる。\n\t\t\t\t\tbegin = Point(-c / a, 0.0);\n\t\t\t\t\tend = Point(-c / a, 1.0);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t//y=-(ax+c)/b　傾きは-a/bで、y切片が-c/b\n\t\t\t\t\tbegin = Point(0, -c / b);\n\t\t\t\t\tend = Point(1.0, -(a + c) / b);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tPoint vec() const {\n\t\t\t\treturn end - begin;\n\t\t\t}\n\n\t\t};\n\n\n\t\t//線分の場合、Lineと同じものになるが、はっきりと区別する\n\t\ttypedef Line Segment;\n\n\n\t\t//直線の交点を返す。交わってなければ、error_valを返す。\n\t\tPoint lineIntersection(const Line& l1, const Line& l2) {\n\t\t\tif (sgn(l1.vec().cross(l2.vec())) == 0)return error_val;\n\n\t\t\tPoint ret;\n\t\t\tret = l1.begin + l1.vec() * \n\t\t\t\tabs((l2.end - l1.begin).cross(l2.vec()) / l1.vec().cross(l2.vec()));\n\t\t\treturn ret;\n\t\t}\n\n\t\t//線分が共通部分を持つかどうか？と線分の交点を返す。共通部分がない、もしくは交点が一意ではないなら、error_valを返す。\n\t\t//trueなら、共通部分を持つ。falseなら、共通部分を持たない。\n\t\tpair<bool, Point> segmentIntersection(const Segment& s1, const Segment& s2) {\n\n\t\t\tif (iSP(s1.begin, s1.end, s2.begin) * iSP(s1.begin, s1.end, s2.end) <= 0 &&\n\t\t\t\tiSP(s2.begin, s2.end, s1.begin) * iSP(s2.begin, s2.end, s1.end) <= 0) {\n\n\t\t\t\t//平行ならば、交点は定まらない。(完全に重なってるので)\n\t\t\t\tif (s1.vec().cross(s2.vec()) == 0)\n\t\t\t\t\treturn make_pair(true, error_val);\n\t\t\t\telse //そうでないのなら、lineIntersection()で交点を返しておく。\n\t\t\t\t\treturn make_pair(true, lineIntersection(s1, s2));\n\n\t\t\t}\n\t\t\treturn make_pair(false, error_val);\n\t\t}\n\n\n\t\t//点と直線の距離。引数は、点、直線上の2点\n\t\tdouble distanceBetweenPointAndLine(const Point& p, const Line& l) {\n\t\t\treturn abs(l.vec().cross(p - l.begin) / l.vec().length());\n\t\t}\n\n\t\t//点と線分の距離。引数は、点、線分の両端\n\t\tdouble distanceBetweenPointAndSegment(const Point& p, const Segment& s) {\n\t\t\tif (sgn(s.vec().dot(p - s.begin)) < 0 || sgn(s.vec().dot(p - s.end)) < 0) {\n\t\t\t\t//下した垂線は線分の上にはない\n\t\t\t\treturn min(p.distanceFrom(s.begin), p.distanceFrom(s.end));\n\t\t\t}\n\t\t\treturn abs(s.vec().cross(p - s.begin) / s.vec().length());\n\t\t}\n\n\t\t//二線分間の距離\n\t\tdouble distanceBetweenSegmentAndSegment(const Segment& s1, const Segment& s2) {\n\t\t\tif (segmentIntersection(s1, s2).first)return 0;//交点を持つ\n\n\t\t\tdouble ans = distanceBetweenPointAndSegment(s1.begin, s2);\n\t\t\tans = min(ans, distanceBetweenPointAndSegment(s1.end, s2));\n\t\t\tans = min(ans, distanceBetweenPointAndSegment(s2.begin, s1));\n\t\t\tans = min(ans, distanceBetweenPointAndSegment(s2.end, s1));\n\t\t\treturn ans;\n\t\t}\n\n\t\t//正射影\n\t\t//引数は点A, B, Cで、BAベクトルの直線BC上の正射影を求める。\n\t\tPoint projection(const Point& a, const Line& l) {\n\t\t\tPoint ret;\n\t\t\tret = l.begin + \n\t\t\t\tl.vec().normalized() * (a - l.begin).dot(l.vec()) / l.vec().length();\n\t\t\treturn ret;\n\t\t}\n\n\t\t//鏡映変換。引数は点A, B, Cで、直線BCにおいて、Aと線対称な点を求める。\n\t\tPoint reflection(const Point& a, const Line& l) {\n\t\t\tPoint ret;\n\t\t\tret = a + 2 * (projection(a, l) - a);\n\t\t\treturn ret;\n\t\t}\n\t}\n\n}\n\nint main() {\n\tgeometry2d::Point p0, p1;\n\tcin >> p0 >> p1;\n\tint q;\n\tcin >> q;\n\t\n\twhile (q--) {\n\t\tgeometry2d::Point p2;\n\t\tcin >> p2;\n\n\t\tint ret = geometry2d::iSP(p0, p1, p2);\n\t\tif (ret == 1) {\n\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t}\n\t\telse if (ret == -1) {\n\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\t}\n\t\telse if (ret == -2) {\n\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t}\n\t\telse if (ret == 2) {\n\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t}\n\t\telse {\n\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t}\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\nusing namespace std;\n\nint main()\n{\n\tint p0x = 0, p0y = 0, p1x = 0, p1y = 0, q = 0, px = 0, py = 0;\n\tint a = 0, b = 0;\n\tlong y = 0;\n\tdouble t = 0;\n\n\tcin >> p0x >> p0y >> p1x >> p1y;\n\tcin >> q;\n\n\ta = p1x - p0x;\n\tb = p1y - p0y;\n\n\tfor (int i = 0; i < q; i++) {\n\t\tcin >> px >> py;\n\n\t\ty = a * (py - p0y) - b * (px - p0x);\n\n\t\tif(y > 0)\n\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\telse if(y < 0)\n\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\telse {\n\t\t\tif (a != 0)\n\t\t\t\tt = (double)(px - p0x) / (double)a;\n\t\t\telse\n\t\t\t\tt = (double)(py - p0y) / (double)b;\n\t\t\t\t\n\t\t\tif (t < 0)\n\t\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t\telse if (t > 1)\n\t\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t\telse\n\t\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t}\n\t}\n\t\t\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <fstream>\n#include <typeinfo>\n#include <vector>\n#include <cmath>\n#include <set>\n#include <map>\n#include <string>\n#include <algorithm>\n#include <cstdio>\n#include <queue>\n#include <iomanip>\n#include <cctype>\n#define syosu(x) fixed<<setprecision(x)\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> P;\ntypedef pair<double,double> pdd;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef vector<char> vc;\ntypedef vector<vc> vvc;\ntypedef vector<bool> vb;\ntypedef vector<vb> vvb;\ntypedef vector<P> vp;\ntypedef vector<vp> vvp;\ntypedef pair<int,P> pip;\ntypedef vector<pip> vip;\nconst int inf=1<<25;\nconst double pi=acos(-1);\nconst double eps=1e-8;\nconst vi emp;\n\nstruct point{\n\tdouble x,y;\n\tpoint operator+(point p){\n\t\treturn point{x+p.x,y+p.y};\n\t}\n\tpoint operator-(point p){\n\t\treturn point{x-p.x,y-p.y};\n\t}\n\tpoint operator*(double p){\n\treturn point{x*p,y*p};\n\t}\n\tpoint operator/(double p){\n\t\tif(!p) return point{0,0}; \n\t\treturn point{x/p,y/p};\n\t}\n\tbool operator==(point p){\n\t\treturn fabs(x-p.x)<eps&&fabs(y-p.y)<eps;\n\t}\n};\n\ntypedef pair<point,point> pp;\nconst point O{0,0};\n\nclass Geom{\n\tpublic:\n\tdouble Length(point x,point y){\n\t\tpoint z=y-x;\n\t\treturn sqrt(z.x*z.x+z.y*z.y);\n\t}\n\tdouble IP(point p,point q){\n\t\treturn p.x*q.x+p.y*q.y;\n\t}\n\tdouble CP(point p,point q){\n\t\treturn p.x*q.y-q.x*p.y;\n\t}\n\tstring Counter_Clockwise(pp a,point x){\n\t\tpoint A=a.second-a.first;\n\t\tpoint X=x-a.first;\n\t\tdouble cp=CP(A,X),ip=IP(A,X),Al=Length(O,A),Xl=Length(O,X);\n\t\tcout<<cp<<endl;\n\t\tif(cp>eps) return \"COUNTER_CLOCKWISE\";\n\t\tif(cp<eps) return \"CLOCKWISE\";\n\t\tif(ip<eps) return \"ONLINE_BACK\";\n\t\tif(Xl<Al||fabs(Xl-Al)<eps) return \"ON_SEGMENT\";\n\t\treturn \"ONLINE_FRONT\";\n\t}\n};\n\nint Q;\ndouble x,y,X1,Y1,X2,Y2;\n\nint main(){\n\tGeom geo;\n\tcin>>X1>>Y1>>X2>>Y2>>Q;\n\tfor(int i=0;i<Q;i++){\n\t\tcin>>x>>y;\n\t\tcout<<geo.Counter_Clockwise(pp(point{X1,Y1},point{X2,Y2}),point{x,y})<<endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "// 平面幾何\n\n// int -> double -> Pointの暗黙の型変換を許した\n// メンバ変数をprivateにした\n// 代入演算子の戻り値とかにconstいっぱい付けた\n\n//   Segment::intersect(const Segment&)\n//   Circle::crosspoint(const Circle&)\n// のどっちかがバグってそう？ (AOJ1183)\n// crosspointは大丈夫？ (AOJ1132)\n\n// 通らない幾何問題\n// AOJ0153  円による点の包含　点と線分との距離　ccw\n// AOJ0187  線分の交差判定　線分同士の交点\n\n#include<iostream>\n#include<cmath>     // fabs(), hypot()\n#include<vector>    // Circle::crosspoint()の戻り値\n#include<algorithm> // min()\n\nconst double EPS = 1e-10;\nenum POSITION {ONLINE_FRONT = -2, CLOCKWISE, ON_SEGMENT, COUNTER_CLOCKWISE, ONLINE_BACK};   // ccw(a, b, p)で3点a, b, pの位置関係を返す\n                                                                                            //   0: a-p-b, 2: p-a-b, -2: a-b-p, 1: -a-b-の上にp, -1: -a-b-の下にp\n// class\nclass Point;\nclass Segment;\nclass Line;\nclass Circle;\n// member\nclass Point {\n    double x_value, y_value;\npublic:\n    Point() :x_value(0.0), y_value(0.0) {}\n    Point(double d) :x_value(d), y_value(d) {}\n    Point(double a, double b) :x_value(a), y_value(b) {}\n    double x() const {return x_value;}\n    double y() const {return y_value;}\n    double x(double d) {return x_value = d;}\n    double y(double d) {return y_value = d;}\n    bool operator== (const Point&) const;\n    bool operator!= (const Point&) const;\n    bool operator< (const Point&) const;\n    bool operator> (const Point&) const;\n    bool operator<= (const Point&) const;\n    bool operator>= (const Point&) const;\n    const Point operator-() const;\n    const Point& operator=(const Point&);\n    const Point& operator+=(const Point&);\n    const Point& operator-=(const Point&);\n    const Point& operator*=(const Point&);\n    const Point& operator/=(const Point&);\n    double dot(const Point&) const;\n    double cross(const Point&) const;\n    double abs() const;\n    double norm() const;\n    double distance(const Point&) const;\n    double distance(const Segment&) const;\n    double distance(const Line&) const;\n    bool intersect(const Point&) const;\n    bool intersect(const Segment&) const;\n    bool intersect(const Line&) const;\n    const Point projection(const Line&) const;\n    const Point reflection(const Line&) const;\n    POSITION ccw(const Point&, const Point&) const;\n};\nconst Point operator+(const Point& lhs, const Point& rhs);\nconst Point operator-(const Point& lhs, const Point& rhs);\nconst Point operator*(const Point& lhs, const Point& rhs);\nconst Point operator/(const Point& lhs, const Point& rhs);\nclass Segment {\n    Point source_point, target_point;\npublic:\n    Segment(double x1 = 0.0, double y1 = 0.0, double x2 = 0.0, double y2 = 0.0) :source_point(Point(x1, y1)), target_point(Point(x2, y2)) {}\n    Segment(const Point& a, const Point& b) :source_point(a), target_point(b) {}\n    const Point& source() const {return source_point;}\n    const Point& target() const {return target_point;}\n    const Point& source(const Point& p) {return source_point = p;}\n    const Point& target(const Point& p) {return target_point = p;}\n    const Line line() const;\n    double distance(const Point&) const;\n    double distance(const Segment&) const;\n    double distance(const Line&) const;\n    bool intersect(const Point&) const;\n    bool intersect(const Segment&) const;\n    bool intersect(const Line&) const;\n    POSITION ccw(const Point&) const;\n};\nclass Line {\n    Point source_point, target_point;\npublic:\n    Line(double x1 = 0.0, double y1 = 0.0, double x2 = 0.0, double y2 = 0.0) :source_point(Point(x1, y1)), target_point(Point(x2, y2)) {}\n    Line(const Point& a, const Point& b) :source_point(a), target_point(b) {}\n    const Point& source() const {return source_point;}\n    const Point& target() const {return target_point;}\n    const Point& source(const Point& p) {return source_point = p;}\n    const Point& target(const Point& p) {return target_point = p;}\n    const Segment segment() const;\n    double distance(const Point&) const;\n    double distance(const Segment&) const;\n    double distance(const Line&) const;\n    bool intersect(const Point&) const;\n    bool intersect(const Segment&) const;\n    bool intersect(const Line&) const;\n    const Point projection(const Point&) const;\n    const Point reflection(const Point&) const;\n    const Point crosspoint(const Line&) const;\n    POSITION ccw(const Point&) const;\n};\nclass Circle {\n    Point center_point;\n    double radius;\npublic:\n    Circle(double a = 0.0, double b = 0.0, double c = 0.0) :center_point(Point(a, b)), radius(c) {}\n    const Point& center() const {return center_point;}\n    double x() const {return center_point.x();}\n    double y() const {return center_point.y();}\n    double r() const {return radius;}\n    const Point& center(const Point& p) {return center_point = p;}\n    double x(double d) {return center_point.x(d);}\n    double y(double d) {return center_point.y(d);}\n    double r(double d) {return radius = d;}\n    bool include(const Point&) const;\n    bool include(const Segment&) const;\n    bool include(const Circle&) const;\n    bool intersect(const Circle&) const;\n    std::vector<Point> crosspoint(const Circle&) const;\n};\n// Point\nbool Point::operator== (const Point &p) const {return x() == p.x() && y() == p.y();}\nbool Point::operator!= (const Point &p) const {return x() != p.x() || y() != p.y();}\nbool Point::operator<(const Point &p) const {return x() != p.x() ? x() < p.x() : y() < p.y();}\nbool Point::operator>(const Point &p) const {return x() != p.x() ? x() > p.x() : y() > p.y();}\nbool Point::operator<=(const Point &p) const {return x() != p.x() ? x() < p.x() : y() <= p.y();}\nbool Point::operator>=(const Point &p) const {return x() != p.x() ? x() > p.x() : y() >= p.y();}\nconst Point operator+(const Point& lhs, const Point& rhs) {return Point(lhs.x() + rhs.x(), lhs.y() + rhs.y());}\nconst Point operator-(const Point& lhs, const Point& rhs) {return Point(lhs.x() - rhs.x(), lhs.y() - rhs.y());}\nconst Point operator*(const Point& lhs, const Point& rhs) {return Point(lhs.x() * rhs.x(), lhs.y() * rhs.y());}\nconst Point operator/(const Point& lhs, const Point& rhs) {return Point(lhs.x() / rhs.x(), lhs.y() / rhs.y());}\nconst Point Point::operator-() const {return Point(-x(), -y());}\nconst Point& Point::operator=(const Point& p) {x(p.x()); y(p.y()); return *this;}\nconst Point& Point::operator+=(const Point& p) {return *this = *this + p;}\nconst Point& Point::operator-=(const Point& p) {return *this = *this - p;}\nconst Point& Point::operator*=(const Point& p) {return *this = *this * p;}\nconst Point& Point::operator/=(const Point& p) {return *this = *this / p;}\ndouble Point::dot(const Point& p) const {return x() * p.x() + y() * p.y();}\ndouble Point::cross(const Point& p) const {return x() * p.y() - y() * p.x();}\ndouble Point::abs() const {return hypot(x(), y());}\ndouble Point::norm() const {return x() * x() + y() * y();}\ndouble Point::distance(const Point& p) const {return (p - (*this)).abs();}\ndouble Point::distance(const Segment& s) const {return s.distance(*this);}\ndouble Point::distance(const Line& l) const {return l.distance(*this);}\nbool Point::intersect(const Point& p) const {return *this == p;}\nbool Point::intersect(const Segment& s) const {return s.intersect(*this);}\nbool Point::intersect(const Line& l) const {return l.intersect(*this);}\nconst Point Point::projection(const Line& l) const {return l.projection(*this);}\nconst Point Point::reflection(const Line& l) const {return l.reflection(*this);}\nPOSITION Point::ccw(const Point& b, const Point& p) const {\n    const Point& a = *this;\n    Point v1 = b - a;\n    Point v2 = p - a;\n    if(v1.cross(v2) > EPS) return COUNTER_CLOCKWISE;\n    if(v1.cross(v2) < -EPS) return CLOCKWISE;\n    if(v1.dot(v2) < -EPS) return ONLINE_BACK;\n    if(v2.norm() - v1.norm() > EPS) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n// Segment\nconst Line Segment::line() const {return Line(source(), target());}\ndouble Segment::distance(const Point& p) const {\n    Point q = line().projection(p);\n    if(intersect(q)) return q.distance(p);\n    return std::min(source().distance(p), target().distance(p));\n}\ndouble Segment::distance(const Segment& s) const {\n    if(intersect(s)) return 0.0;\n    double a = distance(s.source());\n    double b = distance(s.target());\n    double c = s.distance(source());\n    double d = s.distance(target());\n    return std::min({a, b, c, d});\n}\ndouble Segment::distance(const Line& l) const {return l.distance(*this);}\nbool Segment::intersect(const Point& p) const {return source().distance(p) + target().distance(p) - target().distance(source()) <= EPS;}\nbool Segment::intersect(const Segment& s) const {\n    bool a = ccw(s.source()) * ccw(s.target()) <= 0;\n    bool b = s.ccw(source()) * s.ccw(target()) <= 0;\n    return a && b;\n}\nbool Segment::intersect(const Line& l) const {return l.intersect(*this);}\nPOSITION Segment::ccw(const Point& p) const {return source().ccw(target(), p);}\n// Line\nconst Segment Line::segment() const {return Segment(source(), target());}\ndouble Line::distance(const Point& p) const {return p.distance(projection(p));}\ndouble Line::distance(const Segment& s) const {\n    if(intersect(s)) return 0.0;\n    double a = distance(s.source());\n    double b = distance(s.target());\n    return a < b ? a : b;\n}\ndouble Line::distance(const Line& l) const {return intersect(l) ? 0.0 : distance(l.source());}\nbool Line::intersect(const Point& p) const {\n    Point v1 = source() - p;\n    Point v2 = target() - p;\n    return fabs(v2.cross(v1)) < EPS;\n}\nbool Line::intersect(const Segment& s) const {\n    Point v1 = target() - source();\n    Point v2 = s.source() - source();\n    Point v3 = s.target() - source();\n    return v1.cross(v2) * v1.cross(v3) <= EPS;\n}\nbool Line::intersect(const Line& l) const {\n    Point v1 = target() - source();\n    Point v2 = l.target() - l.source();\n    Point v3 = l.source() - source();\n    return fabs(v1.cross(v2)) > EPS || fabs(v1.cross(v3)) < EPS;\n}\nconst Point Line::projection(const Point& p) const {\n    Point v1 = p - source();\n    Point v2 = source() - target();\n    return Point(source() + v2 * (v1.dot(v2) / v2.norm()));\n}\nconst Point Line::reflection(const Point& p) const {\n    return p + (projection(p) - p) * 2.0;\n}\nconst Point Line::crosspoint(const Line& l) const {\n    Point v1 = target() - source();\n    Point v2 = l.target() - l.source();\n    Point v3 = target() - l.source();\n    double a = v1.cross(v2);\n    double b = v1.cross(v3);\n    if(fabs(a) <= EPS && fabs(b) <= EPS) l.source();\n    return l.source() + v2 * (b / a);\n}\nPOSITION Line::ccw(const Point& p) const {return source().ccw(target(), p);}\n// Circle\nbool Circle::include(const Point& p) const {return center().distance(p) - r() <= EPS;}\nbool Circle::include(const Segment& s) const {return center().distance(s) - r() <= EPS;}\nbool Circle::include(const Circle& c) const {return center().distance(c.center()) - (r() - c.r()) <= EPS;}\nbool Circle::intersect(const Circle& c) const {return center().distance(c.center()) - r() - c.r() <= EPS;}\nstd::vector<Point> Circle::crosspoint(const Circle& c) const {\n    double angle = atan2(c.y() - y(), c.x() - x());\n    double d = center().distance(c.center());\n    double add = acos((d * d + r() * r() - c.r() * c.r()) / (2.0 * d * r()));\n    std::vector<Point> result;\n    result.push_back(Point(x() + r() * cos(angle + add), y() + r() * sin(angle + add)));\n    result.push_back(Point(x() + r() * cos(angle - add), y() + r() * sin(angle - add)));\n    return result;\n}\n\nusing namespace std;\nint main() {\n    double x1, y1, x2, y2;\n    cin >> x1>> y1>> x2>> y2;\n    Point p0(x1, y1);\n    Point p1(x2, y2);\n    int q;\n    cin >> q;\n    while(q--) {\n        double x, y;\n        cin >> x >> y;\n        Point p2 = Point(x, y);\n        switch(p0.ccw(p1, p2)) {\n        case CLOCKWISE:\n            cout << \"CLOCKWISE\" <<endl;\n            break;\n        case COUNTER_CLOCKWISE:\n            cout << \"COUNTER_CLOCKWISE\" <<endl;\n            break;\n        case ON_SEGMENT:\n            cout << \"ON_SEGMENT\" <<endl;\n            break;\n        case ONLINE_FRONT:\n            cout << \"ONLINE_FRONT\" <<endl;\n            break;\n        case ONLINE_BACK:\n            cout << \"ONLINE_BACK\" <<endl;\n            break;\n        }\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef double db;\nconst db eps = 1e-12, pi = acos(-1);\nint sign(db x) {return x < -eps ? -1 : x > eps;}\nint cmp(db x, db y) {return sign(x - y);}\nint intersect(db l1, db r1, db l2, db r2) {\n    if (l1 > r1) swap(l1, r1); if (l2 > r2) swap(l2, r2); return cmp(r1, l2) != -1 && cmp(r2, l1) != -1;\n}\nint inmid(db k1, db k2, db k3) {return sign(k1 - k3) * sign(k2 - k3) <= 0;}//k3 in [k1,k2]?1:0\nstruct Point {\n    db x, y;\n    Point operator + (const Point & a)const {return Point{a.x + x, a.y + y};}\n    Point operator - (const Point & a)const {return Point{x - a.x, y - a.y};}\n    Point operator * (db a) const {return Point{x * a, y * a};}\n    Point operator / (db a) const {return Point{x / a, y / a};}\n    bool operator < (const Point p) const {int a = cmp(x, p.x); if (a) return a == -1; return cmp(y, p.y) == -1;}\n    bool operator == (const Point & a) const {return cmp(x, a.x) == 0 && cmp(y, a.y) == 0;}\n    int getP() const {return sign(y) == 1 || (sign(y) == 0 && sign(x) == -1);}\n    void input() {scanf(\"%lf%lf\", &x, &y);}\n};\ndb cross(Point p1, Point p2) {return p1.x * p2.y - p1.y * p2.x;}\ndb cross(Point p0, Point p1, Point p2) {return cross(p1 - p0, p2 - p0);}\ndb dot(Point p1, Point p2) {return p1.x * p2.x + p1.y * p2.y;}\nint inmid(Point k1, Point k2, Point k3) {return inmid(k1.x, k2.x, k3.x) && inmid(k1.y, k2.y, k3.y);}\nbool compareangle(Point p1, Point p2) {//Polar Angle Sort\n    return p1.getP() < p2.getP() || (p1.getP() == p2.getP() && sign(cross(p1, p2)) > 0);\n}\nint clockwise(Point p1,Point p2,Point p3){// k1 k2 k3 anticlockwise:1 clockwise:-1 others:0  \n    return sign(cross(p1,p2,p3));\n}\nstruct Line {\n    Point s, e;\n    void input() {scanf(\"%lf%lf%lf%lf\", &s.x, &s.y, &e.x, &e.y);}\n    Point vec() {return e - s;}\n    db length() {return sqrt(dot(s - e, s - e));}\n    db length2() {return dot(s - e, s - e);}\n};\nint onS(Line l, Point p) {// On Seg?\n    return inmid(l.s, l.e, p) && sign(cross(l.s - p, l.e - l.s)) == 0;\n}\nbool checkLL(Line l1, Line l2) {\n    return cmp(cross(l1.s, l2.s, l2.e), cross(l1.e, l2.s, l2.e)) != 0;\n}\nbool checkLS(Line l1, Line l2) {//Intersection of Line l1 and Seg l2?\n    return sign(cross(l2.s, l1.s, l1.e)) * sign(cross(l2.e, l1.s, l1.e)) <= 0;\n}\nint checkSS(Line l1, Line l2) {//Intersection of Two Seg?1:0\n    return intersect(l1.s.x, l1.e.x, l2.s.x, l2.e.x) && intersect(l1.s.y, l1.e.y, l2.s.y, l2.e.y) && checkLS(l1, l2) && checkLS(l2, l1);\n}\nPoint project(Line l, Point p) {\n    return l.s + l.vec() * dot(p - l.s, l.vec()) / l.length2();\n}\nPoint reflect(Line l, Point p) {//Mirror Point\n    return project(l, p) * 2 - p;\n}\nPoint getLL(Line l1, Line l2) {//Intersection Point of Line l1,l2\n    db w1 = cross(l2.s, l1.s, l2.e), w2 = cross(l2.s, l2.e, l1.e); return (l1.s * w2 + l1.e * w1) / (w1 + w2);\n}\ndb area(vector<Point> A) {//Anticlockwise\n    db ans = 0;\n    for (int i = 0; i < A.size(); i++) ans += cross(A[i], A[(i + 1) % A.size()]);\n    return ans / 2;\n}\nint contain(vector<Point>A, Point p) {//2:in 1:on 0:out\n    int ans = 0; A.push_back(A[0]);\n    for (int i = 1; i < A.size(); i++) {\n        Line l = {A[i - 1], A[i]};\n        if (onS(l, p)) return 1; if (cmp(l.s.y, l.e.y) > 0) swap(l.s, l.e);\n        if (cmp(l.s.y, p.y) >= 0 || cmp(l.e.y, p.y) < 0) continue;\n        if (sign(cross(l.e, l.s, p)) < 0)ans ^= 1;\n    }\n    return ans << 1;\n}\nint main() {\n    Point p0,p1,p2;\n    p0.input();p1.input();\n    int Q;cin>>Q;while(Q--){\n        p2.input();\n        int ans=clockwise(p0,p1,p2);\n        if(ans==1)cout<<\"COUNTER_CLOCKWISE\"<<endl;\n        else if(ans==-1)cout<<\"CLOCKWISE\"<<endl;\n        else if(sign(dot(p1-p0,p2-p0))<0)cout<<\"ONLINE_BACK\"<<endl;\n        else if(Line{p0,p1}.length()<Line{p0,p2}.length())cout<<\"ONLINE_FRONT\"<<endl;\n        else cout<<\"ON_SEGMENT\"<<endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <bitset>\n#include <cmath>\n#include <functional>\n#include <iomanip>\n#include <iostream>\n#include <limits>\n#include <map>\n#include <queue>\n#include <set>\n#include <tuple>\n#include <vector>\n\nusing namespace std;\n\n#define rep(i, n) for (int64_t i = 0; i < (n); i++)\n#define irep(i, n) for (int64_t i = 0; i <= (n); i++)\n#define rrep(i, n) for (int64_t i = (n)-1; i >= 0; i--)\n#define rirep(i, n) for (int64_t i = n; i >= 0; i--)\n\nclass Vec;\nVec operator/(const Vec& v, const double& divisor);\nVec operator*(const double& scale, const Vec& v);\nclass Vec {\n  using F = double;\n  vector<F> container;\n\n public:\n  Vec(size_t size) : container(size) {}\n  Vec(initializer_list<F> elements)\n      : container(elements.begin(), elements.end()) {}\n  size_t dim() const { return container.size(); }\n  F& operator[](const size_t size) { return container.at(size); }\n  const F& operator[](const size_t size) const { return container.at(size); }\n  Vec operator+(const Vec& other) const {\n    Vec ret(*this);\n    for (size_t i = 0; i < dim(); i++) ret[i] += other[i];\n    return ret;\n  }\n  Vec operator-(const Vec& other) const { return (*this) + (-other); }\n  Vec operator-() const { return -1.0 * (*this); }\n  F inner(const Vec& other) const {\n    F acc = 0;\n    for (size_t i = 0; i < dim(); i++) {\n      acc += (*this)[i] * other[i];\n    }\n    return acc;\n  }\n  F norm() const { return sqrt(inner(*this)); }\n  Vec unit() const { return (*this) / this->norm(); }\n  F ccw(const Vec& other) const {\n    return (*this)[0] * other[1] - other[0] * (*this)[1];\n  }\n  Vec normal() const { return Vec({-(*this)[1], (*this)[0]}); }\n};\nVec operator/(const Vec& v, const double& divisor) { return 1.0 / divisor * v; }\nVec operator*(const double& scale, const Vec& v) {\n  Vec ret(v);\n  for (size_t i = 0; i < ret.dim(); i++) ret[i] *= scale;\n  return ret;\n}\n\nclass Line {\n  Vec m_grad;\n  double m_bias;\n\n public:\n  Line(const Vec& grad, double bias) : m_grad(grad), m_bias(bias) {}\n  static Line fromPoints(const Vec& p0, const Vec& p1) {\n    Vec d = p0 - p1;\n    Vec g({-d[1], d[0]});\n    return Line(g, g.inner(p0));\n  }\n  const Vec& grad() const { return m_grad; }\n  double bias() const { return m_bias; }\n  double dist(const Vec& p) const {\n    return abs(m_grad.inner(p) - m_bias) / m_grad.norm();\n  }\n  Vec projection(const Vec& p) const {\n    const Vec g = m_grad.unit();\n    const Vec h({-g[1], g[0]});\n    return m_bias / m_grad.norm() * g + h.inner(p) * h;\n  }\n};\n\nclass Segment {\n  const Vec m_start;\n  const Vec m_end;\n\n public:\n  static const int ONLINE = 0x7;\n  static const int ONSEGMENT = 0x1;\n  static const int FRONT = 0x2;\n  static const int BACK = 0x4;\n  static const int OFFLINE = 0x18;\n  static const int CCW = 0x8;\n  static const int CW = 0x10;\n\n  Segment(const Vec& start, const Vec& end) : m_start(start), m_end(end) {}\n  int check_rel(const Vec& p, double eps) const {\n    const Vec u = direction();\n    const Vec v = p - m_start;\n    const double uLen = u.norm();\n\n    const double a = u.ccw(v);\n\n    int result = 0;\n    if (a > eps) {\n      result |= CCW;\n    } else if (a < -eps) {\n      result |= CW;\n    } else {\n      const double det = u.inner(v) / uLen;\n      if (det < -eps) {\n        result |= BACK;\n      } else if (det > uLen + eps) {\n        result |= FRONT;\n      } else {\n        result |= ONSEGMENT;\n      }\n    }\n    return result;\n  }\n  bool intersect(const Segment& other, const double eps) const {\n    const Vec u = other.m_start - m_start, w = other.m_end - m_start;\n    const Vec v0 = m_end - m_start, v1 = other.m_end - other.m_start;\n\n    const double vn = v0.norm();\n    double u_v = v0.inner(u) / vn;\n    double w_v = v0.inner(w) / vn;\n    if (abs(abs(u_v / u.norm()) - 1) < eps &&\n        abs(abs(w_v / w.norm()) - 1) < eps) {\n      if (u_v > w_v) {\n        swap(u_v, w_v);\n      }\n      return !(u_v > vn + eps || w_v < -eps);\n    }\n    bool cond1 =\n        v0.ccw(other.m_start - m_start) * v0.ccw(other.m_end - m_start) < eps;\n    bool cond2 =\n        v1.ccw(m_start - other.m_start) * v1.ccw(m_end - other.m_start) < eps;\n    return cond1 && cond2;\n  }\n  Vec direction() const { return m_end - m_start; }\n  double dist(const Vec& p) const {\n    const Vec dir = direction();\n    const Vec d = dir.unit();\n    const Vec q = p - m_start;\n    const double a = d.inner(q);\n    if (a < 0) {\n      return (m_start - p).norm();\n    } else if (dir.norm() < a) {\n      return (m_end - p).norm();\n    } else {\n      return abs(d.normal().inner(q));\n    }\n  }\n  double dist(const Segment& other) const {\n    if (intersect(other, 0.0)) {\n      return 0.0;\n    }\n    return min(min(dist(other.m_start), dist(other.m_end)),\n               min(other.dist(m_start), other.dist(m_end)));\n  }\n};\n\nint main() {\n  double x0, y0, x1, y1;\n  cin >> x0 >> y0 >> x1 >> y1;\n  const Vec p0({x0, y0}), p1({x1, y1});\n  Segment s(p0, p1);\n\n  int q;\n  cin >> q;\n  rep(i, q) {\n    double x, y;\n    cin >> x >> y;\n\n    const Vec p({x, y});\n    const double EPS = 0.1;\n    const int result = s.check_rel(p, EPS);\n    if (result & Segment::CCW) {\n      cout << \"COUNTER_CLOCKWISE\" << endl;\n    } else if (result & Segment::CW) {\n      cout << \"CLOCKWISE\" << endl;\n    } else if (result & Segment::BACK) {\n      cout << \"ONLINE_BACK\" << endl;\n    } else if (result & Segment::FRONT) {\n      cout << \"ONLINE_FRONT\" << endl;\n    } else {\n      cout << \"ON_SEGMENT\" << endl;\n    }\n  }\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#pragma warning(disable : 4267) // \"int n = (unsigned)size\"\n\nusing vi = vector<int>; using vvi = vector<vi>; using vvvi = vector<vvi>;\nusing ll = long long int;\nusing vll = vector<ll>; using vvll = vector<vll>; using vvvll = vector<vvll>;\nusing vd = vector<double>; using vvd = vector<vd>; using vvvd = vector<vvd>;\nusing P = pair<int, int>;\nusing Pll = pair<ll, ll>;\nusing cdouble = complex<double>;\n\nconst double eps = 1e-9;\nconst double INFD = numeric_limits<double>::infinity();\n#define Loop(i, n) for(int i = 0; i < int(n); i++)\n#define Loopll(i, n) for(ll i = 0; i < ll(n); i++)\n#define Loop1(i, n) for(int i = 1; i <= int(n); i++)\n#define Loopll1(i, n) for(ll i = 1; i <= ll(n); i++)\n#define Loopr(i, n) for(int i = int(n) - 1; i >= 0; i--)\n#define Looprll(i, n) for(ll i = ll(n) - 1; i >= 0; i--)\n#define Loopr1(i, n) for(int i = int(n); i >= 1; i--)\n#define Looprll1(i, n) for(ll i = ll(n); i >= 1; i--)\n#define Foreach(buf, container) for(auto buf : container)\n#define Loopdiag(i, j, h, w, sum) for(int i = ((sum) >= (h) ? (h) - 1 : (sum)), j = (sum) - i; i >= 0 && j < (w); i--, j++)\n#define Loopdiagr(i, j, h, w, sum) for(int j = ((sum) >= (w) ? (w) - 1 : (sum)), i = (sum) - j; j >= 0 && i < (h); j--, i++)\n#define Loopdiagsym(i, j, h, w, gap) for (int i = ((gap) >= 0 ? (gap) : 0), j = i - (gap); i < (h) && j < (w); i++, j++)\n#define Loopdiagsymr(i, j, h, w, gap) for (int i = ((gap) > (h) - (w) - 1 ? (h) - 1 : (w) - 1 + (gap)), j = i - (gap); i >= 0 && j >= 0; i--, j--)\n#define Loopitr(itr, container) for(auto itr = container.begin(); itr != container.end(); itr++)\n#define printv(vector) Loop(ex_i, vector.size()) { cout << vector[ex_i] << \" \"; } cout << endl;\n#define printmx(matrix) Loop(ex_i, matrix.size()) { Loop(ex_j, matrix[ex_i].size()) { cout << matrix[ex_i][ex_j] << \" \"; } cout << endl; }\n#define quickio() ios::sync_with_stdio(false); cin.tie(0);\n#define bitmanip(m,val) static_cast<bitset<(int)m>>(val)\n#define Comp(type_t) bool operator<(const type_t &another) const\n#define fst first\n#define snd second\nbool nearlyeq(double x, double y) { return abs(x - y) < eps; }\nbool inrange(ll x, ll t) { return x >= 0 && x < t; }\nbool inrange(vll xs, ll t) { Foreach(x, xs) if (!(x >= 0 && x < t)) return false; return true; }\nint ceillog2(ll x) { int ret = 0;\tx--; while (x > 0) { ret++; x >>= 1; } return ret; }\nll rndf(double x) { return (ll)(x + (x >= 0 ? 0.5 : -0.5)); }\nll floorsqrt(ll x) { ll m = (ll)sqrt((double)x); return m + (m * m <= x ? 0 : -1); }\nll ceilsqrt(ll x) { ll m = (ll)sqrt((double)x); return m + (x <= m * m ? 0 : 1); }\nll rnddiv(ll a, ll b) { return (a / b + (a % b * 2 >= b ? 1 : 0)); }\nll ceildiv(ll a, ll b) { return (a / b + (a % b == 0 ? 0 : 1)); }\nll gcd(ll m, ll n) { if (n == 0) return m; else return gcd(n, m % n); }\nll lcm(ll m, ll n) { return m * n / gcd(m, n); }\n\n/*******************************************************/\n\nstruct point_t {\n\tdouble x, y;\n\tpoint_t operator+(const point_t &p) { return { x + p.x, y + p.y }; }\n\tpoint_t operator-(const point_t &p) { return { x - p.x, y - p.y }; }\n\tpoint_t operator*(const double &c) { return { x * c, y * c }; }\n};\n\n// ax + by + c = 0\nstruct line_t {\n\tdouble a, b, c;\n};\n\npoint_t cross_point(line_t l, line_t m) {\n\tpoint_t ret = { INFD, INFD };\n\tdouble d = l.a * m.b - m.a * l.b;\n\tif (nearlyeq(d, 0)) return ret;\n\tdouble x = l.b * m.c - m.b * l.c;\n\tdouble y = l.a * m.c - m.a * l.c;\n\tret = { x / d, y / -d };\n\treturn ret;\n}\n\n// normal vector = (a, b), passing p\nline_t solve_line(double a, double b, point_t p) {\n\treturn { a, b, -a * p.x - b * p.y };\n}\n\n// t should be radius\npoint_t rot(point_t p, double r) {\n\treturn {\n\t\t{ cos(r) * p.x - sin(r) * p.y },\n\t\t{ sin(r) * p.x + cos(r) * p.y }\n\t};\n}\n\ndouble abs(point_t p) {\n\treturn sqrt(p.x * p.x + p.y * p.y);\n}\n\n// angle [0, 2PI) of vector p to vector q\ndouble angle(point_t p, point_t q) {\n\tp = p * (1.0 / abs(p));\n\tq = q * (1.0 / abs(q));\n\tdouble r0 = acos(p.x * q.x + p.y * q.y);\n\tdouble r1 = asin(p.x * q.y - p.y * q.x);\n\tif (r1 >= 0) return r0;\n\telse return 2 * M_PI - r0;\n}\n\nint main() {\n\tpoint_t p0, p1;\n\tcin >> p0.x >> p0.y >> p1.x >> p1.y;\n\tint q; cin >> q;\n\tcout << setprecision(20);\n\tLoop(i, q) {\n\t\tpoint_t p2;\n\t\tcin >> p2.x >> p2.y;\n\t\tpoint_t p = p1 - p0;\n\t\tpoint_t q = p2 - p0;\n\t\tif (nearlyeq(abs(p), 0)) {\n\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t}\n\t\telse if (nearlyeq(abs(q), 0)) {\n\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t}\n\t\telse {\n\t\t\tdouble r = angle(p, q);\n\t\t\tif (nearlyeq(r, M_PI)) {\n\t\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t\t}\n\t\t\telse if (nearlyeq(r, 0)) {\n\t\t\t\tif (abs(q) > abs(p)) {\n\t\t\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (r < M_PI) {\n\t\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\t\t}\n\t\t}\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\nconst int MAXN = 2e5 + 5;\ntypedef long long ll;\ntypedef long double ld;\ntypedef unsigned long long ull;\ntemplate <typename T> void chkmax(T &x, T y) {x = max(x, y); }\ntemplate <typename T> void chkmin(T &x, T y) {x = min(x, y); } \ntemplate <typename T> void read(T &x) {\n\tx = 0; int f = 1;\n\tchar c = getchar();\n\tfor (; !isdigit(c); c = getchar()) if (c == '-') f = -f;\n\tfor (; isdigit(c); c = getchar()) x = x * 10 + c - '0';\n\tx *= f;\n}\ntemplate <typename T> void write(T x) {\n\tif (x < 0) x = -x, putchar('-');\n\tif (x > 9) write(x / 10);\n\tputchar(x % 10 + '0');\n}\ntemplate <typename T> void writeln(T x) {\n\twrite(x);\n\tputs(\"\");\n}\nconst ld eps = 1e-9;\nstruct point {ld x, y; };\nstruct line {point a, b; }; //Be sure that a and b are distinct.\nvoid ReadPointInt(point &a) {read(a.x), read(a.y); }\nvoid ReadLineInt(line &a) {ReadPointInt(a.a), ReadPointInt(a.b); }\npoint operator + (point a, point b) {return (point) {a.x + b.x, a.y + b.y}; }\npoint operator - (point a, point b) {return (point) {a.x - b.x, a.y - b.y}; }\npoint operator * (point a, ld b) {return (point) {a.x * b, a.y * b}; }\nld dot(point a, point b) {return a.x * b.x + a.y * b.y; }\nld operator * (point a, point b) {return a.x * b.y - a.y * b.x; }\nld moo(point a) {return sqrtl(a.x * a.x + a.y * a.y); }\nld dist(point a, point b) {return moo(a - b); }\npoint unit(point a) {\n\tld tmp = moo(a);\n\tassert(tmp > eps);\n\treturn a * (1.0 / tmp);\n}\npoint Projection(point x, line a) {\n\tld d = dot(x - a.a, a.b - a.a) / dist(a.a, a.b);\n\treturn a.a + unit(a.b - a.a) * d;\n}\npoint Reflection(point x, line a) {\n\treturn Projection(x, a) * 2 - x;\n}\nbool OnLine(point x, line a) {\n\treturn fabsl((a.b - a.a) * (x - a.a)) <= eps;\n}\nbool OnSegment(point x, line a) {\n\treturn dist(x, a.a) + dist(x, a.b) - dist(a.a, a.b) <= eps;\n}\nint main() {\n\tline a; ReadLineInt(a);\n\tint q; read(q);\n\twhile (q--) {\n\t\tpoint x; ReadPointInt(x);\n\t\tif (OnLine(x, a)) {\n\t\t\tif (OnSegment(x, a)) printf(\"ON_SEGMENT\\n\");\n\t\t\telse if (dist(x, a.a) > dist(x, a.b)) printf(\"ONLINE_FRONT\\n\");\n\t\t\telse printf(\"ONLINE_BACK\\n\");\n\t\t} else if ((a.b - a.a) * (x - a.a) > 0) printf(\"COUNTER_CLOCKWISE\\n\");\n\t\telse printf(\"CLOCKWISE\\n\");\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define TemplateVersion \"3.4.0\"\n// Useful Marcos\n//====================START=====================\n// Compile use C++11 and above\n#ifdef LOCAL\n#define debug(args...)                           \\\n    {                                            \\\n        string _s = #args;                       \\\n        replace(_s.begin(), _s.end(), ',', ' '); \\\n        stringstream _ss(_s);                    \\\n        istream_iterator<string> _it(_ss);       \\\n        err(_it, args);                          \\\n    }\nvoid err(istream_iterator<string> it)\n{\n}\ntemplate <typename T, typename... Args>\nvoid err(istream_iterator<string> it, T a, Args... args)\n{\n    cerr << *it << \" = \" << a << endl;\n    err(++it, args...);\n}\n#define MSG cout << \"Finished\" << endl\n#else\n#define debug(args...)\n#define MSG\n#endif\n#if __cplusplus >= 201703L\ntemplate <typename... Args>\nvoid readln(Args &... args)\n{\n    ((cin >> args), ...);\n}\ntemplate <typename... Args>\nvoid writeln(Args... args)\n{\n    ((cout << args << \" \"), ...);\n    cout << endl;\n}\n#elif __cplusplus >= 201103L\nvoid readln()\n{\n}\ntemplate <typename T, typename... Args>\nvoid readln(T &a, Args &... args)\n{\n    cin >> a;\n    readln(args...);\n}\nvoid writeln()\n{\n    cout << endl;\n}\ntemplate <typename T, typename... Args>\nvoid writeln(T a, Args... args)\n{\n    cout << a << \" \";\n    writeln(args...);\n}\n#endif\n#if __cplusplus >= 201103L\n#define FOR(_i, _begin, _end) for (auto _i = _begin; _i < _end; _i++)\n#define FORR(_i, _begin, _end) for (auto _i = _begin; _i > _end; _i--)\n#else\n#define FOR(_i, _begin, _end) for (int _i = (int)_begin; _i < (int)_end; _i++)\n#define FORR(_i, _begin, _end) for (int _i = (int)_begin; _i > (int)_end; _i--)\n#define nullptr NULL\n#endif\n#if __cplusplus >= 201103L\n#define VIS(_kind, _name, _size) \\\n    vector<_kind> _name(_size);  \\\n    for (auto &i : _name)        \\\n        cin >> i;\n#else\n#define VIS(_kind, _name, _size)    \\\n    vector<_kind> _name;            \\\n    _name.resize(_size);            \\\n    for (int i = 0; i < _size; i++) \\\n        cin >> _name[i];\n#endif\n// alias\n#define mp make_pair\n#define pb push_back\n#define eb emplace_back\n#define all(x) (x).begin(), (x).end()\n#define tcase() \\\n    int T;      \\\n    cin >> T;   \\\n    FOR(kase, 1, T + 1)\n// Swap max/min\ntemplate <typename T>\nbool smax(T &a, const T &b)\n{\n    if (a > b)\n        return false;\n    a = b;\n    return true;\n}\ntemplate <typename T>\nbool smin(T &a, const T &b)\n{\n    if (a < b)\n        return false;\n    a = b;\n    return true;\n}\n// ceil divide\ntemplate <typename T>\nT cd(T a, T b)\n{\n    return (a + b - 1) / b;\n}\n// min exchange\ntemplate <typename T>\nbool se(T &a, T &b)\n{\n    if (a < b)\n        return false;\n    swap(a, b);\n    return true;\n}\n// A better MAX choice\nconst int INF = 0x3f3f3f3f;\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int, int> pii;\ntypedef vector<int> vi;\ntypedef vector<ll> vll;\ntypedef set<int> si;\ntypedef vector<string> cb;\n//====================END=====================\n\n// Constants here\nconst double EPS = 1e-8;\nconst double PI = acos(-1);\n\ntypedef double db;\n\nint sgn(db x)\n{\n    if (abs(x) < EPS)\n        return 0;\n    if (x < 0)\n        return -1;\n    return 1;\n}\n\ninline db sqr(db x) { return x * x; }\n\n// Point/Vector\nstruct Point\n{\n    db x, y;\n\n    Point() : x(1e-18), y(1e-18) {}\n\n    Point(db _x, db _y) : x(_x + 1e-18), y(_y + 1e-18) {}\n\n    bool operator==(const Point &p)\n    {\n        return sgn(x - p.x) == 0 && sgn(y - p.y) == 0;\n    }\n\n    bool operator<(const Point &p)\n    {\n        int c = sgn(x - p.x);\n        if (c)\n            return c == -1;\n        return sgn(y - p.y) == -1;\n    }\n\n    Point operator+(const Point &p) { return Point(x + p.x, y + p.y); }\n    Point operator-(const Point &p) { return Point(x - p.x, y - p.y); }\n    Point operator*(db d) { return Point(x * d, y * d); }\n    Point operator/(db d) { return Point(x / d, y / d); }\n\n    db operator^(const Point &p) { return x * p.y - y * p.x; }\n    db operator*(const Point &p) { return x * p.x + y * p.y; }\n\n    db dis(const Point &p) { return (*this - p).len(); }\n    db alpha() { return atan2(y, x); }\n\n    Point unit() { return *this / len(); }\n\n    Point rotac() { return Point(-y, x); }\n    Point rotcl() { return Point(y, -x); }\n\n    Point rot(Point p, db angle)\n    {\n        Point v = *this - p;\n        db c = cos(angle), s = sin(angle);\n        return Point(p.x + v.x * c - v.y * s, p.y + v.x * s + v.y * c);\n    }\n\n    db len() { return hypot(x, y); }\n    db len2() { return x * x + y * y; }\n\n    db rad(Point a, Point b)\n    {\n        Point ap = a - *this, bp = b - *this;\n        return abs(atan2(abs(ap ^ bp), ap * bp));\n    }\n\n    void read() { cin >> x >> y; }\n    void write() { cout << '(' << x << \", \" << y << \")\\n\"; }\n};\n\n// Line\nstruct Line\n{\n    Point s, e;\n\n    Line(){};\n\n    Line(Point _s, Point _e) : s(_s), e(_e) {}\n\n    Line(Point p, db angle)\n    {\n        s = p;\n        if (sgn(angle - PI / 2))\n            e = (s + Point(1, tan(angle)));\n        else\n            e = (s + Point(0, 1));\n    }\n\n    //ax+by+c=0\n    Line(db a, db b, db c)\n    {\n        if (sgn(a) == 0)\n        {\n            s = Point(0, -c / b);\n            e = Point(1, -c / b);\n        }\n        else if (sgn(b) == 0)\n        {\n            s = Point(-c / a, 0);\n            e = Point(-c / a, 1);\n        }\n        else\n        {\n            s = Point(0, -c / b);\n            e = Point(1, -(c + a) / b);\n        }\n    }\n\n    db len() { return s.dis(e); }\n    db angle()\n    {\n        db ans = atan2(e.y - s.y, e.x - s.x);\n        if (sgn(ans) == -1)\n            ans += PI;\n        if (sgn(ans - PI) == 0)\n            ans -= PI;\n        return ans;\n    }\n\n    // 1 -> On Left\n    // 2 -> On Right\n    // 3 -> On Line BUT MAY NOT ON THE SEGMENT!\n    int relation(Point p)\n    {\n        int c = sgn((p - s) ^ (e - s));\n        if (c < 0)\n            return 1;\n        else if (c > 0)\n            return 2;\n        return 3;\n    }\n\n    bool checkOn(Point p) { return sgn((p - s) ^ (e - s)) == 0 && sgn((p - s) ^ (p - e)) <= 0; }\n\n    bool parallel(Line l) { return sgn((e - s) ^ (l.e - l.s)) == 0; }\n\n    // 0 -> Formal Intersection\n    // 1 -> Informal\n    // 2 -> Not Intersect\n    int crossSS(Line l)\n    {\n        int d1 = sgn((e - s) ^ (l.s - s));\n        int d2 = sgn((e - s) ^ (l.e - s));\n        int d3 = sgn((l.e - l.s) ^ (s - l.s));\n        int d4 = sgn((l.e - l.s) ^ (e - l.s));\n        if ((d1 ^ d2) == -2 && (d3 ^ d4) == -2)\n            return 2;\n        return (d1 == 0 && sgn((l.s - s) * (l.s - e)) <= 0) ||\n               (d2 == 0 && sgn((l.e - s) * (l.e - e)) <= 0) ||\n               (d3 == 0 && sgn((s - l.s) * (s - l.e)) <= 0) ||\n               (d4 == 0 && sgn((e - l.s) * (e - l.e)) <= 0);\n    }\n\n    // 0 -> Formal Intersection\n    // 1 -> Informal\n    // 2 -> Not Intersect\n    int crossLS(Line l)\n    {\n        int d1 = sgn((e - s) ^ (l.s - s));\n        int d2 = sgn((e - s) ^ (l.e - s));\n        if ((d1 ^ d2) == -2)\n            return 2;\n        return (d1 == 0 || d2 == 0);\n    }\n\n    // 0 -> Parallel\n    // 1 -> Same\n    // 2 -> Intersect\n    int crossLL(Line l)\n    {\n        if (this->parallel(l))\n            return l.relation(s) == 3;\n        return 2;\n    }\n\n    Point crossP(Line l)\n    {\n        db a1 = (l.e - l.s) ^ (s - l.s);\n        db a2 = (l.e - l.s) ^ (e - l.s);\n        return Point((s.x * a2 - e.x * a1) / (a2 - a1), (s.y * a2 - e.y * a1) / (a2 - a1));\n    }\n\n    db disPL(Point p) { return abs((p - s) ^ (e - s)) / len(); }\n    db disPS(Point p)\n    {\n        if (sgn((p - s) * (e - s)) < 0 || sgn((p - e) * (s - e)) < 0)\n            return min(p.dis(s), p.dis(e));\n        return disPL(p);\n    }\n    db disSS(Line l) { return min(min(disPS(l.s), disPS(l.e)), min(l.disPS(s), l.disPS(e))); }\n\n    Point proj(Point p) { return s + ((e - s) * ((e - s) * (p - s))) / ((e - s).len2()); }\n    Point refl(Point p)\n    {\n        Point q = proj(p);\n        return Point(2 * q.x - p.x, 2 * q.y - p.y);\n    }\n\n    bool operator==(Line l) { return s == l.s && e == l.e; }\n\n    void adjust()\n    {\n        if (e < s)\n            swap(s, e);\n    }\n\n    void read()\n    {\n        s.read();\n        e.read();\n    }\n\n    void write()\n    {\n        cout << \"Line:\\n\";\n        s.write();\n        e.write();\n    }\n};\n\n// Pre-Build Function\ninline void build()\n{\n}\n\n// Actual Solver\ninline void solve()\n{\n    Line l;\n    l.read();\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        Point p;\n        p.read();\n        int re = l.relation(p);\n        if (re == 1)\n            cout << \"COUNTER_CLOCKWISE\\n\";\n        else if (re == 2)\n            cout << \"CLOCKWISE\\n\";\n        else\n        {\n            auto d = p.dis(l.s);\n            auto a = l.s.rad(l.e, p);\n            if (sgn(a - PI) == 0)\n                cout << \"ONLINE_BACK\\n\";\n            else if (sgn(d - l.len()) <= 0)\n                cout << \"ON_SEGMENT\\n\";\n            else\n                cout << \"ONLINE_FRONT\\n\";\n        }\n    }\n}\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n    cout.tie(nullptr);\n\n#ifdef LOCAL\n    clock_t _begin = clock();\n#endif\n\n    build();\n    solve();\n\n#ifdef LOCAL\n    cerr << \"Time elapsed: \" << (double)(clock() - _begin) * 1000 / CLOCKS_PER_SEC << \"ms.\" << endl;\n#endif\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n#include <iostream>\n#include <cmath>\n#include <iomanip>\nusing namespace std;\n\nclass Point {\n public:\n  double x, y;\n\n  Point(double x = 0, double y = 0): x(x), y(y) {}\n\n  Point operator + (Point p) { return Point(x + p.x, y + p.y); }\n  Point operator - (Point p) { return Point(x - p.x, y - p.y); }\n  Point operator * (double a) { return Point(a * x, a * y); }\n  Point operator / (double a) { return Point(x / a, y / a); }\n\n  double abs() { return sqrt(norm()); }\n  double norm() {return x * x + y * y; }\n\n  bool operator < (const Point &p) const {\n    return x != p.x ? x < p.x : y < p.y;\n  }\n\n  bool operator == (const Point &p) const {\n    return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n  }\n\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b) {\n  return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n  return a.x * b.y - a.y * b.x;\n}\n\nstruct Segment {\n  Point p1, p2;\n};\n\ntypedef Segment Line;\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nint ccw(Point p0, Point p1, Point p2) {\n  Vector a = p1 - p0;\n  Vector b = p2 - p0;\n  if (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n  if (cross(a, b) < -EPS) return CLOCKWISE;\n  if (dot(a, b) < -EPS) return ONLINE_BACK;\n  if (a.norm() < b.norm()) return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\n\nint main() {\n  Point p1, p2;\n  cin >> p1.x >> p1.y >> p2.x >> p2.y;\n  int n;\n  cin >> n;\n  cout << fixed;\n  for (int i = 0; i < n; i++) {\n    Point p3;\n    cin >> p3.x >> p3.y;\n    switch (ccw(p1, p2, p3)) {\n    case COUNTER_CLOCKWISE:\n      cout << \"COUNTER_CLOCKWISE\" << endl;\n      break;\n    case CLOCKWISE:\n      cout << \"CLOCKWISE\" << endl;\n      break;\n    case ONLINE_BACK:\n      cout << \"ONLINE_BACK\" << endl;\n      break;\n    case ONLINE_FRONT:\n      cout << \"ONLINE_FRONT\" << endl;\n      break;\n    default:\n      cout << \"ON_SEGMENT\" << endl;\n      break;\n    }\n  }\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint main(){\n\n\tint p0x,p0y,p1x,p1y,p2x,p2y;\n\tint q,cr;\n\n\tcin>>p0x>>p0y>>p1x>>p1y;\n\tcin>>q;\n\n\tfor(int i=0;i<q;i++){\n\t\tcin>>p2x>>p2y;\n\t\tcr=(p2x-p0x)*(p1y-p0y)-(p1x-p0x)*(p2y-p0y);\n\t\tif(cr==0){\n\t\t\tif((p2x-p0x<0==p1x-p0x<0&&p2y-p0y<0==p1y-p0y<0)||((p2x-p0x==0)&&(p1x-p0x==0)&&p2y-p0y<0==p1y-p0y<0)||(p2x-p0x<0==p1x-p0x<0&&(p2y-p0y==0)&&(p1y-p0y==0))){\n\t\t\t\tif(pow(p2x-p0x,2.0)+pow(p2y-p0y,2.0)>pow(p1x-p0x,2.0)+pow(p1y-p0y,2.0)){\n\t\t\t\t\tcout<<\"ONLINE_FRONT\"<<endl;\n\t\t\t\t}\n\t\t\t\telse cout<<\"ON_SEGMENT\"<<endl;\n\t\t\t}\n\t\t\telse cout<<\"ONLINE_BACK\"<<endl;\n\t\t}\n\t\telse if(cr>0) cout<<\"CLOCKWISE\"<<endl;\n\t\telse cout<<\"COUNTER_CLOCKWISE\"<<endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\nstruct CWW{\n    CWW(){\n        cin.tie(0);\n        ios_base::sync_with_stdio(0);\n        cout<<fixed<<setprecision(15);\n    }\n}STAR;\n\nusing D=double;\n\nconst D EPS=1e-8;\nconst D INF=1e9;\n\nconst int COUNTER_CLOCKWISE=1;\nconst int CLOCKWISE=-1;\nconst int ONLINE_FRONT=2;\nconst int ONLINE_BACK=-2;\nconst int ON_SEGMENT=0;\n\nusing Point=complex<D>;\n\nstruct Segment{\n    Point p1,p2;\n    Segment(const Point &p1=Point(),const Point &p2=Point()):p1(p1),p2(p2){}\n};\n\nstruct Line{\n    Point p1,p2;\n    Line(const Point &p1=Point(),const Point &p2=Point()):p1(p1),p2(p2){}\n};\n\nstruct Circle{\n    Point c;\n    D r;\n    Circle(const Point &c=Point(),const D &r=0.0):c(c),r(r){}\n};\n\nusing Polygon=vector<Point>;\n\nistream& operator>>(istream &is,Point &a){\n    D x,y;\n    is>>x>>y;\n    a=Point(x,y);\n    return is;\n}\n\nostream& operator<<(ostream& os,const Point &a){\n    os<<real(a)<<\" \"<<imag(a);\n    return os;\n}\n\nistream& operator>>(istream &is,Line &l){\n    Point p1,p2;\n    is>>p1>>p2;\n    l=Line(p1,p2);\n    return is;\n}\n\n\n\nD dot(const Point &a,const Point &b){\n    return real(a)*real(b)+imag(a)*imag(b);\n}\n\nD cross(const Point &a,const Point &b){\n    return real(a)*imag(b)-imag(a)*real(b);\n}\n\nPoint projection(const Point &a,const Point &b){\n    return a*real(b/a);\n}\n\nPoint projection(const Line &l,const Point &a){\n    return l.p1+projection(l.p2-l.p1,a-l.p1);\n}\n\nPoint reflection(const Line &l,const Point &a){\n    Point p=projection(l,a);\n    return 2.0*p-a;\n}\n\nint ccw(Point a,Point b,Point c){\n    b-=a;c-=a;\n    if(cross(b,c)>EPS)return COUNTER_CLOCKWISE;\n    if(cross(b,c)<-EPS)return CLOCKWISE;\n    if(dot(b,c)<-EPS)return ONLINE_BACK;\n    if(norm(b)+EPS<norm(c))return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\nint main(){\n    Point a,b;\n    cin>>a>>b;\n\n    int Q;cin>>Q;\n    while(Q--){\n        Point c;\n        cin>>c;\n\n        int tmp=ccw(a,b,c);\n\n        if(tmp==COUNTER_CLOCKWISE)cout<<\"COUNTER_CLOCKWISE\"<<endl;\n        if(tmp==CLOCKWISE)cout<<\"CLOCKWISE\"<<endl;\n        if(tmp==ONLINE_BACK)cout<<\"ONLINE_BACK\"<<endl;\n        if(tmp==ONLINE_FRONT)cout<<\"ONLINE_FRONT\"<<endl;\n        if(tmp==ON_SEGMENT)cout<<\"ON_SEGMENT\"<<endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "//\n// ccw\n//\n// verified:\n//   AOJ Course CGL_1_C Points/Vectors - Counter-Clockwise\n//     http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_C&lang=jp\n\n\n#include <iostream>\n#include <vector>\n#include <cmath>\n#include <iomanip>\nusing namespace std;\n\n\n////////////////////////////\n// 基本要素 (点)\n////////////////////////////\n\nusing DD = double;\nconst DD INF = 1LL<<60;      // to be set appropriately\nconst DD EPS = 1e-10;        // to be set appropriately\nconst DD PI = acos(-1.0);\nDD torad(int deg) {return (DD)(deg) * PI / 180;}\nDD todeg(DD ang) {return ang * 180 / PI;}\n\n/* Point */\nstruct Point {\n    DD x, y;\n    Point(DD x = 0.0, DD y = 0.0) : x(x), y(y) {}\n    friend ostream& operator << (ostream &s, const Point &p) {return s << '(' << p.x << \", \" << p.y << ')';}\n};\ninline Point operator + (const Point &p, const Point &q) {return Point(p.x + q.x, p.y + q.y);}\ninline Point operator - (const Point &p, const Point &q) {return Point(p.x - q.x, p.y - q.y);}\ninline Point operator * (const Point &p, DD a) {return Point(p.x * a, p.y * a);}\ninline Point operator * (DD a, const Point &p) {return Point(a * p.x, a * p.y);}\ninline Point operator * (const Point &p, const Point &q) {return Point(p.x * q.x - p.y * q.y, p.x * q.y + p.y * q.x);}\ninline Point operator / (const Point &p, DD a) {return Point(p.x / a, p.y / a);}\ninline Point conj(const Point &p) {return Point(p.x, -p.y);}\ninline Point rot(const Point &p, DD ang) {return Point(cos(ang) * p.x - sin(ang) * p.y, sin(ang) * p.x + cos(ang) * p.y);}\ninline Point rot90(const Point &p) {return Point(-p.y, p.x);}\ninline DD cross(const Point &p, const Point &q) {return p.x * q.y - p.y * q.x;}\ninline DD dot(const Point &p, const Point &q) {return p.x * q.x + p.y * q.y;}\ninline DD norm(const Point &p) {return dot(p, p);}\ninline DD abs(const Point &p) {return sqrt(dot(p, p));}\ninline DD amp(const Point &p) {DD res = atan2(p.y, p.x); if (res < 0) res += PI*2; return res;}\ninline bool eq(const Point &p, const Point &q) {return abs(p - q) < EPS;}\ninline bool operator < (const Point &p, const Point &q) {return (abs(p.x - q.x) > EPS ? p.x < q.x : p.y < q.y);}\ninline bool operator > (const Point &p, const Point &q) {return (abs(p.x - q.x) > EPS ? p.x > q.x : p.y > q.y);}\ninline Point operator / (const Point &p, const Point &q) {return p * conj(q) / norm(q);}\n\n\n// 粗\n// 1：a-bから見てcは左側(反時計回り)、-1：a-bから見てcは右側(時計回り)、0：一直線上\nint simple_ccw(const Point &a, const Point &b, const Point &c) {\n    if (cross(b-a, c-a) > EPS) return 1;\n    if (cross(b-a, c-a) < -EPS) return -1;\n    return 0;\n}\n\n// 精\n// 1：a-bから見てcは左側(反時計回り)、-1：a-bから見てcは右側(時計回り)\n// 2：c-a-bの順に一直線上、-2：a-b-cの順に一直線上、0：a-c-bの順に一直線上\nint ccw(const Point &a, const Point &b, const Point &c) {\n    if (cross(b-a, c-a) > EPS) return 1;\n    if (cross(b-a, c-a) < -EPS) return -1;\n    if (dot(b-a, c-a) < -EPS) return 2;\n    if (norm(b-a) < norm(c-a) - EPS) return -2;\n    return 0;\n}\n\n// 点と三角形の包含関係(辺上については判定していない)\nbool is_contain(const Point &p, const Point &a, const Point &b, const Point &c) {\n    int r1 = simple_ccw(p, b, c), r2 = simple_ccw(p, c, a), r3 = simple_ccw(p, a, b);\n    if (r1 == 1 && r2 == 1 && r3 == 1) return true;\n    if (r1 == -1 && r2 == -1 && r3 == -1) return true;\n    return false;\n}\n\n\nint main() {\n    Point a, b, c;\n    cin >> a.x >> a.y >> b.x >> b.y;\n    int N; cin >> N;\n    for (int _ = 0; _ < N; ++_) {\n        cin >> c.x >> c.y;\n        int type = ccw(a, b, c);\n        switch (type) {\n            case 1: {cout << \"COUNTER_CLOCKWISE\" << endl; continue; }\n            case -1: {cout << \"CLOCKWISE\" << endl; continue; }\n            case 2: {cout << \"ONLINE_BACK\" << endl; continue; }\n            case -2: {cout << \"ONLINE_FRONT\" << endl; continue; }\n            case 0: {cout << \"ON_SEGMENT\" << endl; continue; }\n        }\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\nstruct Point{\n    Point(double _x=0,double _y=0):x(_x),y(_y){}\n    \n    Point operator + (Point p) const {return Point(x+p.x,y+p.y);}\n    Point operator - (Point p) const {return Point(x-p.x,y-p.y);}\n    //Point operator * (double d) const {return Point(x*d,y*d);}\n    \n    double Length() const{\n        return sqrt(x*x+y*y);\n    }\n    \n    double SqrLength() const{\n        return x*x+y*y;\n    }\n    \n    void Read(){\n        scanf(\"%lf%lf\",&x,&y);\n    }\n    \n    void Write(){\n        //printf(\"%.10f %.10f\\n\",x,y);\n    }\n    \n    double x,y;  \n\n    friend double Dot(Point p1,Point p2){\n        return p1.x*p2.x+p1.y*p2.y;\n    }\n    \n    friend double Cross(Point p1,Point p2){\n        return p1.x*p2.y-p1.y*p2.x;\n    }\n};\n\nstruct Line{\n    Line(){}\n    Point s,t;\n    \n    /*friend Point Project(Point p,Line l){\n        Point dir=l.t-l.s;\n        return l.s+dir*(Dot(dir,p-l.s)/dir.SqrLength());\n    }\n    \n    friend Point Reflect(Point p,Line l){\n        Point q=Project(p,l);\n        Point ret=q*2-p;\n        return ret;\n    }*/\n};\n\nint main(){\n    Point p0,p1;\n    p0.Read(); p1.Read();\n    int n; scanf(\"%d\",&n);\n    while(n--){\n        Point p2;\n        p2.Read();\n        int a=Cross(p1-p0,p2-p0);\n        if (Cross(p1-p0,p2-p0)>0) puts(\"COUNTER_CLOCKWISE\");\n        else if (Cross(p1-p0,p2-p0)<0) puts(\"CLOCKWISE\");\n        //else if (Cross(p1-p0,p2-p0)==0){\n        else if (Dot(p1-p0,p2-p0)<0) puts(\"ONLINE_BACK\");\n        else if ((p1-p0).Length()-(p2-p0).Length()<0) puts(\"ONLINE_FRONT\");\n        else puts(\"ON_SEGMENT\");\n                    \n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef struct { double x,y;} point;\n\ndouble nai(point a,point b){ return a.x*b.x+a.y*b.y; }\n\nint main(){\npoint p1,p2;\ndouble x,y;\ncin>>x>>y;\np1.x=x;\np1.y=y;\ncin>>x>>y;\np2.x=x;\np2.y=y;\npoint vec={p2.x-p1.x , p2.y-p1.y};\n//point e={vec.x/sqrt(nai(vec,vec)) , vec.y/sqrt(nai(vec,vec))};\nint q;\ncin>>q;\nfor(int i=0;i<q;i++){\ncin>>x>>y;\npoint p;\np.x=x-p1.x;\np.y=y-p1.y;\npoint j={p.x*vec.x+p.y*vec.y,vec.x*p.y-vec.y*p.x};\nif(j.y>0){\ncout<<\"COUNTER_CLOCKWISE\"<<endl;\n}else if(j.y<0){\ncout<<\"CLOCKWISE\"<<endl;\n}else{\nif(j.x<0){\ncout<<\"ONLINE_BACK\"<<endl;\n}else if(nai(p,p)>nai(vec,vec)){\ncout<<\"ONLINE_FRONT\"<<endl;\n}else{\ncout<<\"ON_SEGMENT\"<<endl;\n}\n\n}\n\n\n}\nreturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <iostream>\n\nusing namespace std;\n\n#define EPS (1e-10)\n\nclass Point {\npublic:\n\tdouble x, y;\n\tPoint(double x, double y) :\n\t\t\tx(x), y(y) {\n\t}\n\tPoint operator -(Point p) {\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n\n\tdouble norm() {\n\t\treturn x * x + y * y;\n\t}\n};\n\ndouble dot(Point p1, Point p2) {\n\treturn p1.x * p2.x + p1.y * p2.y;\n}\n\ndouble cross(Point p1, Point p2) {\n\treturn p1.x * p2.y - p1.y * p2.x;\n}\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ON_SEGMENT = -2;\nstatic const int ONLINE_FRONT = 0;\n\nint ccw(Point p0, Point p1, Point p2) {\n\tPoint a = p1 - p0;\n\tPoint b = p2 - p0;\n\tif (cross(a, b) > EPS)\n\t\treturn COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS)\n\t\treturn CLOCKWISE;\n\tif (dot(a, b) < -EPS)\n\t\treturn ONLINE_BACK;\n\tif (a.norm() < b.norm())\n\t\treturn ONLINE_FRONT;\n\n\treturn ON_SEGMENT;\n}\n\nint main() {\n\n\tint p0x, p0y, p1x, p1y;\n\tscanf(\"%d %d %d %d\", &p0x, &p0y, &p1x, &p1y);\n\tPoint p0(p0x, p0y);\n\tPoint p1(p1x, p1y);\n\n\tint q;\n\tscanf(\"%d\", &q);\n\tfor (int i = 0; i < q; ++i) {\n\t\tint p2x, p2y;\n\t\tscanf(\"%d %d\", &p2x, &p2y);\n\t\tPoint p2(p2x, p2y);\n\n\t\tswitch (ccw(p0, p1, p2)) {\n\t\tcase COUNTER_CLOCKWISE:\n\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t\tbreak;\n\t\tcase CLOCKWISE:\n\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\t\tbreak;\n\t\tcase ONLINE_BACK:\n\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t\tbreak;\n\t\tcase ON_SEGMENT:\n\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t\tbreak;\n\t\tcase ONLINE_FRONT:\n\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <math.h>\n#include <iostream>\nusing namespace std;\n\n#define EPS (1.0e-10F)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\n\nclass Point{\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0) : x(x), y(y) {}\n\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (Point p) { return Point(x * p.x, y * p.y); }\n\tPoint operator / (Point p) { return Point(x / p.x, y / p.y); }\n\n\tdouble abs()  { return sqrt(norm());  }\n\tdouble norm() { return x * x + y * y; }\n\n\tbool operator < (const Point &p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p) const{\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n\n};\n\nstruct Segment {\n\tPoint p1, p2;\n};\n\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b) {\n\treturn a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n\treturn a.x * b.y - a.y * b.x;\n}\n\nbool isOrthogonal(Vector a, Vector b){\n\treturn equals(dot(a, b), 0.0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2){\n\treturn isOrthogonal(a1 - a2, b1 - b2);\n}\n\nbool isOrthogonal(Segment s1, Segment s2){\n\treturn equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nbool isParallel(Segment s1, Segment s2){\n\treturn equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nint main(int argc, char* argv[]){\n\tint x0, y0, x1, y1, x2, y2, q;\n\tVector a, b;\n\tdouble result;\n\tcin >> x0 >> y0 >> x1 >> y1 >> q;\n\n\tfor (int i = 0; i < q; i++){\n\t\tcin >> x2 >> y2;\n\t\ta = Point(x1, y1) - Point(x0, y0);\n\t\tb = Point(x2, y2) - Point(x0, y0);\n\t\tresult = cross(a, b);\n\t\tif      (result > EPS)        printf(\"COUNTER_CLOCKWISE\\n\" );\n\t\telse if (result < EPS)\t\t  printf(\"CLOCKWISE\\n\"          );\n\t\telse if (result < -EPS)\t\t  printf(\"ONLINE_BACK\\n\"       );\n\t\telse if (a.norm() < b.norm()) printf(\"ONLINE_FRONT\\n\");\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cmath>\n#include<map>\n#include<vector>\n#include<queue>\n#include<functional>\n#include<cstring>\n#include<cstdlib>\n#include<complex>\nusing namespace std;\ntypedef long long ll;\ntypedef complex < double > Point;\n/*\n    Point????????????\n    Point A????????????X??則?即?...real(A) or A.real()\n                   Y??則?即?...imag(A) or A.imag() ??其???????????贈???????????????????????????????????即???\n\n    Point A,B????????????A+B,A-B,(double)k * A???????????????\n    ????????????????????蔵???sqrt(norm(A))\n    ?????????????????蔵???sqrt(norm(A-B))\n    norm(A)???X^2+Y^2?????????\n*/\ntypedef vector < Point > Polygon;\nnamespace std {\n    bool operator < (Point a,Point b) {\n        //????????則??則?即??????????????????????\"??則??????\"?????????\n        return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n    }\n}\nconst double EPS = 1e-8;\nconst double INF = 1e12;\n\n\n\nstruct Line : Polygon{\n    Line(Point p,Point q){ push_back(p);push_back(q); }\n};\nstruct Circle{\n    Point p;\n    double r;\n    Circle(Point a, double s){ p = a;r = s; }\n};\n\ndouble cross(Point p,Point q){\n    return imag(conj(p)*q);\n}\n\ndouble dot(Point p,Point q){\n    return real(conj(p)*q);\n}\n\nint ccw(Point a,Point b,Point c){\n    b-=a,c-=a;\n    if(cross(b,c)>0)return 1; //???????即???????\n    if(cross(b,c)<0)return -1; //????即???????\n    if(dot(b,c)<0)return 2; //??卒????????? c - a - b\n    if(norm(b)<norm(c))return -2; // ??卒????????? a - b - c\n    return 0; // ??卒????????? a - c - b\n}\n\nPoint normalize(Point P, double l){\n    double a = real(P), b = imag(P);\n    double y = sqrt(b*b/(a*a+b*b)*l*l);\n    double x = (a/b)*y;\n\n    return Point(x,y);\n}\n\ndouble heron(Point A, Point B, Point C){\n    double a = sqrt(norm(A-B));\n    double b = sqrt(norm(B-C));\n    double c = sqrt(norm(C-A));\n    double s = (a+b+c)/2;\n\n    return sqrt(s*(s-a)*(s-b)*(s-c));\n}\nbool intersectLL(Line l, Line m) {\n    return abs(cross(l[1]-l[0], m[1]-m[0])) > EPS || // ????????則??????\n         abs(cross(l[1]-l[0], m[0]-l[0])) < EPS;   // ????????????\n}\nbool intersectLS(Line l, Line s) {\n    return cross(l[1]-l[0], s[0]-l[0])*       // s[0] ??? l??????\n           cross(l[1]-l[0], s[1]-l[0]) < EPS; // s[1] ??? l??????\n}\nbool intersectLP(Line l, Point p) {\n    return abs(cross(l[1]-p, l[0]-p)) < EPS;\n}\nbool intersectSS(Line s, Line t) {\n    return ccw(s[0],s[1],t[0])*ccw(s[0],s[1],t[1]) <= 0 &&\n         ccw(t[0],t[1],s[0])*ccw(t[0],t[1],s[1]) <= 0;\n}\nbool intersectSP(Line s, Point p) {\n    return abs(s[0]-p)+abs(s[1]-p)-abs(s[1]-s[0]) < EPS; // triangle inequality\n}\n//???2?????????????????????????????????????????????,??????????????????????????属\nint intersectCC(Circle A, Circle B, Point *p, Point *q){\n\n    Point P,Q;\n    if(B.p<A.p)swap(A.p,B.p);\n    Point dv = B.p - A.p;//????????????\n\n\n    double L = sqrt(norm(dv));\n    int num;\n    //?????蔵???L?????卒???\n    if( L==(A.r + B.r) ){\n        num = 1;\n        //??????1???\n        //?????属???????????贈???????????則????????即?????属??????\n        dv = normalize(dv,A.r);\n        P = Q = Point(real(dv)+real(A.p),imag(dv)+imag(A.p));\n    }\n    else if( L<(A.r + B.r) && L > fabs(A.r - B.r) ){\n        num = 2;\n        //??????2???\n        /*\n        ???????????????Q??????????????????dv??????????????????????????即?????????pt??即??????\n        ??????????????卒?則?????則???蔵p0-pt-Q???p1-pt-Q?????則??????\n        p0-pt???????????????t??即????????即???????????????????則???蔵???Q-pt??????????????????????????????\n\n        r0*r0 - t*t = r1*r1 - (L-t)*(L-t)\n        r0*r0 - t*t = r1*r1 - L*L - t*t + 2*L*t\n        t = (r0*r0 - r1*r1 + L*L)/(2*L)\n\n        t?????????p0-Q??????????????即dv??????????????即????則????a????賊???????\n        dv?????????????????????+a,-a?????則?即?????賊?????????属????????即??????\n        */\n\n        //t????賊???????\n        double t = 0.5*( A.r*A.r - B.r*B.r + L*L)/L;\n\n        //p0-Q??????????????即dv????????????????則????\n        double a = acos( t/A.r );\n\n        //dv????????????????則????\n        double a0 = atan2( imag(dv), real(dv) );\n\n        //??????\n        P = Point( real(A.p) + A.r*cos(a0+a), imag(A.p) + A.r*sin(a0+a) );\n        Q = Point( real(A.p) + A.r*cos(a0-a), imag(A.p) + A.r*sin(a0-a) );\n\n    }\n    else{\n        num = 0;\n        //????????????\n    }\n\n    *p = P;\n    *q = Q;\n\n    return num;\n}\nPoint projection(Line l, Point p) {\n    double t = dot(p-l[0], l[0]-l[1]) / norm(l[0]-l[1]);\n    return l[0] + t * (l[0]-l[1]);\n}\nPoint reflection(Line l, Point p) {\n    return p + (projection(l, p) - p) + (projection(l, p) - p);\n}\ndouble distanceLP(Line l, Point p) {\n    return abs(p - projection(l, p));\n}\ndouble distanceLL(Line l, Line m) {\n    return intersectLL(l, m) ? 0 : distanceLP(l, m[0]);\n}\ndouble distanceLS(Line l, Line s) {\n    if (intersectLS(l, s)) return 0;\n    return min(distanceLP(l, s[0]), distanceLP(l, s[1]));\n}\ndouble distanceSP(Line s, Point p) {\n    const Point r = projection(s, p);\n    if (intersectSP(s, r)) return abs(r - p);\n    return min(abs(s[0] - p), abs(s[1] - p));\n}\ndouble distanceSS(Line s, Line t) {\n    if (intersectSS(s, t)) return 0;\n    return min(min(distanceSP(s, t[0]), distanceSP(s, t[1])),\n             min(distanceSP(t, s[0]), distanceSP(t, s[1])));\n}\nPoint crosspoint(Line l, Line m) {\n    double A = cross(l[1] - l[0], m[1] - m[0]);\n    double B = cross(l[1] - l[0], l[1] - m[0]);\n    if (abs(A) < EPS && abs(B) < EPS) return m[0]; // same line\n    if (abs(A) < EPS);\n    return m[0] + B / A * (m[1] - m[0]);\n}\n\nint main(){\n    Point P,Q;\n    cin>>real(P)>>imag(P)>>real(Q)>>imag(Q);\n    int n;\n    cin>>n;\n    while(n--){\n        Point R;\n        cin>>real(R)>>imag(R);\n        string str;\n        int a = ccw(P,Q,R);\n        switch(a){\n            case 1:\n                str = \"COUNTER_CLOCKWISE\";\n            break;\n            case -1:\n                str = \"CLOCKWISE\";\n            break;\n            case 2:\n                str = \"ONLINE_BACK\";\n            break;\n            case -2:\n                str = \"ONLINE_FRONT\";\n            break;\n            case 0:\n                str = \"ON_SEGMENT\";\n            break;\n        }\n        cout<<str<<endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <numeric>\n#include <map>\n#include <set>\n#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <bitset>\n#include <climits>\n#define REP(i,n) for (int i=0;i<(n);i++)\n#define FOR(i,a,b) for (int i=(a);i<(b);i++)\n#define RREP(i,n) for (int i=(n)-1;i>=0;i--)\n#define RFOR(i,a,b) for (int i=(a)-1;i>=(b);i--)\n#define ll long long\n#define ull unsigned long long\nint dx[4] = {1, 0, -1, 0};\nint dy[4] = {0, 1, 0, -1};\nconst int INF = 1e9;\nconst int MOD = 1e9 + 7;\n\nusing namespace std;\n#define getValName(VariableName) # VariableName\n#include <vector>\n#include <cmath>\n#include <cstring>\n\nconst double EPS = 1e-10;\n#define equals(a,b) (fabs((a) - (b)) < EPS)\nstruct Point{\n\tdouble x,y;\n\tPoint(double x = 0.0,double y =0.0):x(x),y(y){}\n\tPoint operator + (const Point& p){ return Point(x+p.x,y+p.y);\t}\n\tPoint operator - (const Point& p){ return Point(x-p.x,y-p.y); }\n\tPoint operator * (double k){ return Point(x*k,y*k);\t}\n\tPoint operator / (double k){ return Point(x/k,y/k); }\n\n\tdouble norm(){return x*x+y*y;}\n\tdouble abs(){return sqrt(norm());}\n\n\tbool operator < (const Point& p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\tbool operator == (const Point &p) const{\n\t\treturn fabs(x-p.x) < EPS && fabs(y-p.y) < EPS;\n\t}\n};\ntypedef Point Vector;\n\ndouble norm(Vector a){return a.x*a.x+a.y*a.y;}\ndouble abs(Vector a){return sqrt(norm(a));}\n\n\ndouble dot(Vector a, Vector b){\n\treturn a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b){\n\treturn a.x*b.y - a.y*b.x;\n}\n\n\nstruct Segment{\n\tPoint p1,p2;\n\tSegment(Point p1,Point p2):p1(p1),p2(p2){}\n};\n\ntypedef Segment Line;\nclass Circle{\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0): c(c),r(r){}\n};\ntypedef vector<Point> Polygon;\n\nbool isOrthgonal(Vector a, Vector b){\n\treturn equals(dot(a,b),0.0);\n}\n\nbool isOrthgonal(Point a1, Point a2, Point b1, Point b2){\n\treturn isOrthgonal(a1-a2,b1-b2);\n}\n\nbool isOrthgonal(Segment s1, Segment s2){\n\treturn equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1),0.0);\n}\n\nbool isParallel(Vector a,Vector b){\n\treturn equals(cross(a,b),0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2){\n\treturn isParallel(a1-a2,b1-b2);\n}\n\nbool isParallel(Segment s1, Segment s2){\n\treturn equals(cross(s1.p2 - s1.p1,s2.p2-s2.p1),0.0);\n}\n\nPoint project(Segment s,Point p){\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p-s.p1,base)/base.norm();\n\treturn s.p1 + base * r;\n}\n\nPoint reflect(Segment s, Point p){\n\treturn p + (project(s,p) - p) * 2.0;\n}\n\ndouble getDistance(Point a,Point b){\n\treturn abs(a-b);\n}\n\ndouble getDistanceLP(Line l, Point p){\n\treturn abs(cross(l.p2 - l.p1, p-l.p1) / abs(l.p2 - l.p1));\n}\n\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\nstring ccw(Vector a, Vector b){\n\tif(cross(a,b) > EPS)return \"COUNTER_CLOCKWISE\";\n\tif(cross(a,b) < -EPS)return \"CLOCKWISE\";\n\tif(dot(a,b) < -EPS)return \"ONLINE_BACK\";\n\tif(a.norm() < b.norm())return \"ONLINE_FRONT\";\n\treturn \"ON_SEGMENT\";\n}\n\n\nint main(){\n  cin.tie(0);\n  ios::sync_with_stdio(false);\n\t\tint a,b,c,d;\n\tcin>>a>>b>>c>>d;\n\tVector v1(c-a,d-b);\n\tint q;cin>>q;\n\twhile(q--){\n\t\tint x,y;cin>>x>>y;\n\t\tcout << ccw(v1,Vector(x-a,y-b)) << endl;\n\t}\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\n#ifndef LOCAL_\n#define fprintf if( false ) fprintf\n#endif // LOCAL_\n// #define dump() fprintf(stderr, \"#%s.%d\\n\", __func__, __LINE__);\n#define dumpl(x1) fprintf(stderr, \"#%s.%d (%s) = (%ld)\\n\", __func__, __LINE__, #x1, x1);\n#define dumpll(x1, x2) fprintf(stderr, \"#%s.%d (%s, %s) = (%ld, %ld)\\n\", __func__, __LINE__, #x1, #x2, x1, x2);\n#define dumplll(x1, x2, x3) fprintf(stderr, \"#%s.%d (%s, %s, %s) = (%ld, %ld, %ld)\\n\", __func__, __LINE__, #x1, #x2, #x3, x1, x2, x3);\n#define dumpd(x1) fprintf(stderr, \"#%s.%d (%s) = (%lf)\\n\", __func__, __LINE__, #x1, x1);\n#define dumpdd(x1, x2) fprintf(stderr, \"#%s.%d (%s, %s) = (%lf, %lf)\\n\", __func__, __LINE__, #x1, #x2, x1, x2);\n#define loop for(;;)\ntypedef std::vector<long> LI;\n\ntemplate<typename T> void scan1(T& x) { fprintf(stderr, \"unknown type\\n\"); }\ntemplate<> void scan1(long& x) { if( scanf(\"%ld\", &x) < 0 ) exit(0); }\ntemplate<> void scan1(std::string& x) { if( not ( std::cin >> x ) ) exit(0); }\nvoid scan() {}\ntemplate<typename Head, typename... Tail>\nvoid scan(Head& x, Tail&... xs) {\n  scan1(x); scan(xs...);\n}\n\ntypedef std::complex<double> P2;\nusing std::norm;\nusing std::real;\nusing std::conj;\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_A\n// http://judge.u-aizu.ac.jp/onlinejudge/review.jsp?rid=2376299#1\nP2 projection(P2 p1, P2 p2, P2 p) {\n   P2 t = p2 - p1;\n   return p1+(t)/norm(t)*real((p-p1)*conj(t));\n}\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_B\n// http://judge.u-aizu.ac.jp/onlinejudge/review.jsp?rid=2376317#1\nP2 refrection(P2 p1, P2 p2, P2 p) {\n   P2 t = p2 - p1;\n   return p1+conj((p-p1)/t)*t;\n}\nP2 cc(P2 p1, P2 p2, P2 p) {\n   P2 t = p2 - p1;\n   return (p-p1)/t;\n}\n\n\nstruct Solver {\n   Solver() { fprintf(stderr, \"--------Solver begin--------\\n\"); }\n   ~Solver() { fprintf(stderr, \"--------Solver end--------\\n\"); }\n   void solve() {\n      long x1, y1, x2, y2; scan(x1, y1, x2, y2);\n      long q; scan(q);\n      for(long i = 0; i < q; ++i) {\n         long x, y; scan(x, y);\n         auto res = cc(P2(x1,y1), P2(x2, y2), P2(x,y));\n         double eps = 1e-10;\n         if( res.imag() > eps ) puts(\"COUNTER_CLOCKWISE\");\n         else if( res.imag() < -eps ) puts(\"CLOCKWISE\");\n         else if( res.real() < -eps ) puts(\"ONLINE_BACK\");\n         else if( -eps < res.real() and res.real() < 1.0+eps ) puts(\"ON_SEGMENT\");\n         else if( 1.0+eps < res.real() ) puts(\"ONLINE_FRONT\");\n         else puts(\"error\");\n      }\n   }\n};\n\nint main() {\n  loop std::unique_ptr<Solver>(new Solver())->solve();\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#pragma GCC optimize(3,\"Ofast\",\"inline\")\n#pragma GCC optimize(2)\n#pragma GCC optimize(3)\n#pragma GCC optimize(\"Ofast\")\n#pragma GCC optimize(\"inline\")\n#pragma GCC optimize(\"-fgcse\")\n#pragma GCC optimize(\"-fgcse-lm\")\n#pragma GCC optimize(\"-fipa-sra\")\n#pragma GCC optimize(\"-ftree-pre\")\n#pragma GCC optimize(\"-ftree-vrp\")\n#pragma GCC optimize(\"-fpeephole2\")\n#pragma GCC optimize(\"-ffast-math\")\n#pragma GCC optimize(\"-fsched-spec\")\n#pragma GCC optimize(\"unroll-loops\")\n#pragma GCC optimize(\"-falign-jumps\")\n#pragma GCC optimize(\"-falign-loops\")\n#pragma GCC optimize(\"-falign-labels\")\n#pragma GCC optimize(\"-fdevirtualize\")\n#pragma GCC optimize(\"-fcaller-saves\")\n#pragma GCC optimize(\"-fcrossjumping\")\n#pragma GCC optimize(\"-fthread-jumps\")\n#pragma GCC optimize(\"-funroll-loops\")\n#pragma GCC optimize(\"-fwhole-program\")\n#pragma GCC optimize(\"-freorder-blocks\")\n#pragma GCC optimize(\"-fschedule-insns\")\n#pragma GCC optimize(\"inline-functions\")\n#pragma GCC optimize(\"-fschedule-insns2\")\n#pragma GCC optimize(\"-fstrict-aliasing\")\n#pragma GCC optimize(\"-fstrict-overflow\")\n#pragma GCC optimize(\"-falign-functions\")\n#pragma GCC optimize(\"-fcse-skip-blocks\")\n#pragma GCC optimize(\"-fcse-follow-jumps\")\n#pragma GCC optimize(\"-fsched-interblock\")\n#pragma GCC optimize(\"-fpartial-inlining\")\n#pragma GCC optimize(\"no-stack-protector\")\n#pragma GCC optimize(\"-freorder-functions\")\n#pragma GCC optimize(\"-findirect-inlining\")\n#pragma GCC optimize(\"inline-small-functions\")\n#pragma GCC optimize(\"-finline-small-functions\")\n#pragma GCC optimize(\"-ftree-switch-conversion\")\n#pragma GCC optimize(\"-foptimize-sibling-calls\")\n#pragma GCC optimize(\"-fexpensive-optimizations\")\n#pragma GCC optimize(\"-funsafe-loop-optimizations\")\n#pragma GCC optimize(\"inline-functions-called-once\")\n#pragma GCC optimize(\"-fdelete-null-pointer-checks\")\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef long double ld;\n#define mp make_pair\n#define PI pair<int,int>\n#define poly vector<int>\n#define For(i,l,r) for(int i=(int)(l);i<=(int)(r);i++)\n#define Rep(i,r,l) for(int i=(int)(r);i>=(int)(l);i--)\n#define pb push_back\n#define mem(a) memset((a),0,sizeof(a))\n#define fi first\n#define se second\ninline char gc(){\n    static char buf[100000],*p1=buf,*p2=buf;\n    return p1==p2&&(p2=(p1=buf)+fread(buf,1,100000,stdin),p1==p2)?EOF:*p1++;\n}\n#define gc getchar\ninline ll read(){\n\tll x = 0; char ch = gc(); bool positive = 1;\n\tfor (; !isdigit(ch); ch = gc())\tif (ch == '-')\tpositive = 0;\n\tfor (; isdigit(ch); ch = gc())\tx = x * 10 + ch - '0';\n\treturn positive ? x : -x;\n}\ninline void write(ll a){\n    if(a<0){\n    \ta=-a; putchar('-');\n\t}\n    if(a>=10)write(a/10);\n    putchar('0'+a%10);\n}\ninline void writeln(ll a){write(a); puts(\"\");}\ninline void wri(ll a){write(a); putchar(' ');}\ndouble x,y,xx,yy;\ndouble xxx,yyy;\nint q;\nint main(){\n\tcin>>x>>y>>xx>>yy;\n\txx-=x,yy-=y;\n\tcin>>q;\n\twhile(q--){\n\t\tcin>>xxx>>yyy;\n\t\txxx-=x,yyy-=y;\n\t\tdouble ANS=xx*yyy-xxx*yy;\n\t\tif(ANS>0) cout<<\"COUNTER_CLOCKWISE\"<<endl;\n\t\telse if(ANS<0) cout<<\"CLOCKWISE\"<<endl;\n\t\telse{\n\t\t\tdouble ans=xx*xxx+yy*yyy;\n\t\t\tif(ans<0){\n\t\t\t\tcout<<\"ONLINE_BACK\"<<endl;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif(xxx*xxx+yyy*yyy>xx*xx+yy*yy) cout<<\"ONLINE_FRONT\"<<endl;\n\t\t\t\telse cout<<\"ON_SEGMENT\"<<endl;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<complex>\nusing namespace std;\ntypedef complex<double> Point;\n\nint main() {\n    int n;\n    double x1, y1, x2, y2, x3, y3;\n    cin >> x1 >> y1 >> x2 >> y2 >> n;\n    Point z1(x1, y1), z2(x2, y2);\n    while (n--)\n    {\n        cin >> x3 >> y3;\n        Point z3(x3, y3);\n        z3 = (z3 - z1) / (z2 - z1);\n        if (z3.imag() > 0) cout << \"COUNTER_CLOCKWISE\\n\";\n        else if (z3.imag() < 0) cout << \"CLOCKWISE\\n\";\n        else if (z3.real() < 0) cout << \"ONLINE_BACK\\n\";\n        else if (z3.real() > 1) cout << \"ONLINE_FRONT\\n\";\n        else cout << \"ON_SEGMENT\\n\";\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\nusing namespace std;\ntypedef long long LL;\n\nconst double EPS = 1e-10;\nconst int COUNTER_CLOCKWISE = 1;\nconst int CLOCKWISE = -1;\nconst int ONLINE_BACK = 2;\nconst int ONLINE_FRONT = -2;\nconst int ON_SEGMENT = 0;\nconst int IN = 2;\nconst int ON = 1;\nconst int OUT = 0;\n\ntypedef complex<double> Point;\ntypedef Point Vector;\nstruct Segment {\n\tPoint p1, p2;\n\tSegment(Point p1, Point p2) :p1(p1), p2(p2) {}\n};\ntypedef Segment Line;\nstruct Circle {\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0) :c(c), r(r) {}\n};\ntypedef vector<Point> Polygon;\n\ninline double equals(double a, double b);\ninline double dot(Vector a, Vector b);\ninline double cross(Vector a, Vector b);\ninline bool isOrthogonal(Vector a, Vector b);\ninline bool isParallel(Vector a, Vector b);\nPoint project(Segment s, Point p);\nPoint reflect(Segment s, Point p);\nint ccw(Point p0, Point p1, Point p2);\nbool intersect(Segment s1, Segment s2);\nbool intersect(Circle c, Line l);\nbool intersect(Circle c1, Circle c2);\ndouble getDistanceLP(Line l, Point p);\ndouble getDistanceSP(Segment s, Point p);\ndouble getDistance(Segment s1, Segment s2);\nPoint getCrossPoint(Segment s1, Segment s2);\npair<Point, Point> getCrossPoints(Circle c, Line l);\npair<Point, Point> getCrossPoints(Circle c1, Circle c2);\nint contains(Polygon g, Point p);\nPolygon andrewScan(Polygon s);\n\ninline double equals(double a, double b) {\n\treturn fabs(a - b) < EPS;\n}\nbool operator==(const Point &p1, const Point &p2) {\n\treturn equals(p1.real(), p2.real()) && equals(p1.imag(), p2.imag());\n}\ninline double dot(Vector a, Vector b) {\n\treturn a.real()*b.real() + a.imag()*b.imag();\n}\ninline double cross(Vector a, Vector b) {\n\treturn a.real()*b.imag() - a.imag()*b.real();\n}\ninline bool isOrthogonal(Vector a, Vector b) {\n\treturn equals(dot(a, b), 0.0);\n}\ninline bool isParallel(Vector a, Vector b) {\n\treturn equals(cross(a, b), 0.0);\n}\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / norm(base);\n\treturn s.p1 + base*r;\n}\nPoint reflect(Segment s, Point p) {\n\treturn p + (project(s, p) - p)*2.0;\n}\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS) return CLOCKWISE;\n\tif (dot(a, b) < -EPS) return ONLINE_BACK;\n\tif (norm(a) < norm(b)) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\nbool intersect(Segment s1, Segment s2) {\n\treturn (ccw(s1.p1, s1.p2, s2.p1)*ccw(s1.p1, s1.p2, s2.p2) <= 0 &&\n\t\tccw(s2.p1, s2.p2, s1.p1)*ccw(s2.p1, s2.p2, s1.p2) <= 0);\n}\nbool intersect(Circle c, Line l) {\n\treturn getDistanceLP(l, c.c) <= c.r;\n}\nbool intersect(Circle c1, Circle c2) {\n\treturn abs(c1.c - c2.c) <= c1.r + c2.r;\n}\ndouble getDistanceLP(Line l, Point p) {\n\treturn abs(cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1));\n}\ndouble getDistanceSP(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0) return abs(p - s.p1);\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0) return abs(p - s.p2);\n\treturn getDistanceLP(s, p);\n}\ndouble getDistance(Segment s1, Segment s2) {\n\tif (intersect(s1, s2)) return 0.0;\n\treturn min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n\t\tmin(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\nPoint getCrossPoint(Segment s1, Segment s2) {\n\tassert(intersect(s1, s2));\n\tVector base = s2.p2 - s2.p1;\n\tdouble d1 = abs(cross(base, s1.p1 - s2.p1));\n\tdouble d2 = abs(cross(base, s1.p2 - s2.p1));\n\tdouble t = d1 / (d1 + d2);\n\treturn s1.p1 + (s1.p2 - s1.p1)*t;\n}\npair<Point, Point> getCrossPoints(Circle c, Line l) {\n\tassert(intersect(c, l));\n\tVector pr = project(l, c.c);\n\tVector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);\n\tdouble base = sqrt(c.r*c.r - norm(pr - c.c));\n\treturn make_pair(pr + e*base, pr - e*base);\n}\npair<Point, Point> getCrossPoints(Circle c1, Circle c2) {\n\tassert(intersect(c1, c2));\n\tdouble d = abs(c1.c - c2.c);\n\tdouble a = acos((c1.r*c1.r + d*d - c2.r*c2.r) / (2 * c1.r*d));\n\tdouble t = arg(c2.c - c1.c);\n\treturn make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n}\nint contains(Polygon g, Point p) {\n\tint n = g.size();\n\tbool x = false;\n\tfor (int i = 0; i < n; i++) {\n\t\tPoint a = g[i] - p, b = g[(i + 1) % n] - p;\n\t\tif (abs(cross(a, b)) < EPS && dot(a, b) < EPS) return 1;\n\t\tif (a.imag() > b.imag()) swap(a, b);\n\t\tif (a.imag() < EPS && EPS<b.imag() && cross(a, b)>EPS) x = !x;\n\t}\n\treturn x ? 2 : 0;\n}\nPolygon andrewScan(Polygon s) {\n\tPolygon u, l;\n\tif (s.size() < 3) return s;\n\tsort(s.begin(), s.end(), [](const Point &a, const Point &b) {return a.real() != b.real() ? a.real() < b.real() : a.imag() < b.imag(); });\n\tu.push_back(s[0]);\n\tu.push_back(s[1]);\n\tl.push_back(s[s.size() - 1]);\n\tl.push_back(s[s.size() - 2]);\n\tfor (int i = 2; i < s.size(); i++) {\n\t\tfor (int n = u.size(); n >= 2 && ccw(u[n - 2], u[n - 1], s[i]) != CLOCKWISE; n--) {\n\t\t\tu.pop_back();\n\t\t}\n\t\tu.push_back(s[i]);\n\t}\n\tfor (int i = s.size() - 3; i >= 0; i--) {\n\t\tfor (int n = l.size(); n >= 2 && ccw(l[n - 2], l[n - 1], s[i]) != CLOCKWISE; n--) {\n\t\t\tl.pop_back();\n\t\t}\n\t\tl.push_back(s[i]);\n\t}\n\treverse(l.begin(), l.end());\n\tfor (int i = u.size() - 2; i >= 1; i--) l.push_back(u[i]);\n\treturn l;\n}\n\nint main() {\n\tint x, y;\n\tcin >> x >> y;\n\tPoint p1(x, y);\n\tcin >> x >> y;\n\tPoint p2(x, y);\n\tSegment s(p1, p2);\n\tint q;\n\tcin >> q;\n\tfor (int i = 0; i < q; i++) {\n\t\tcin >> x >> y;\n\t\tPoint p(x, y);\n\t\tint a = ccw(p1, p2, p);\n\t\tif (a == COUNTER_CLOCKWISE) {\n\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t}\n\t\telse if (a == CLOCKWISE) {\n\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\t}\n\t\telse if (a == ONLINE_BACK) {\n\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t}\n\t\telse if (a == ONLINE_FRONT) {\n\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t}\n\t\telse {\n\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t}\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define REP(i,n) for (long long i=0;i<(n);i++)\n#define FOR(i,a,b) for (long long i=(a);i<(b);i++)\n#define RREP(i,n) for(long long i=n;i>=0;i--)\n#define RFOR(i,a,b) for(long long i=(a);i>(b);i--)\n#define dump1d_arr(array) REP(i,array.size()) cerr << #array << \"[\" << (i) << \"] ==> \" << (array[i]) << endl;\n#define dump2d_arr(array) REP(i,array.size()) REP(j,array[i].size()) cerr << #array << \"[\" << (i) << \"]\" << \"[\" << (j) << \"] ==> \" << (array[i][j]) << endl;\n#define dump(x)  cerr << #x << \" => \" << (x) << endl;\n#define dumpP(p) cerr << \"( \" << p.first << \" , \" << p.second << \" )\" << ends;\n#define CLR(vec) { REP(i,vec.size()) vec[i] = 0; } \n#define SORT(c) sort((c).begin(),(c).end())\n#define MIN(vec) *min_element(vec.begin(), vec.end());\n#define MAX(vec) *max_element(vec.begin(), vec.end());\n#define UNIQ(vec) vec.erase(unique(vec.begin(), vec.end()),vec.end());\n#define IN(n,m)  (!(m.find(n) == m.end()))\n#define ENUM(m) for (auto itr = m.begin(); itr != m.end(); ++itr)\n#define dump_MAP(m) for(auto itr = m.begin(); itr != m.end(); ++itr) { cerr << itr->first << \" --> \"  << itr->second << endl; }\n#define FINDL(vec,x) (lower_bound(vec.begin(),vec.end(),x) - vec.begin())\n#define FINDU(vec,x) (upper_bound(vec.begin(),vec.end(),x) - vec.begin())\n#define ROUND(N) setprecision(N)\nusing namespace std;\nconstexpr long double pi = M_PI;\nconstexpr double eps = 1e-10;\nconstexpr long mod = 1000000007;\nconstexpr short shINF = 32767;\nconstexpr long loINF = 2147483647;\nconstexpr long long llINF = 9223372036854775807;\ntypedef long long LL;\ntypedef vector<LL> VI;\ntypedef vector<VI> VVI;\ntypedef vector<string> VS;\ntypedef pair<LL,LL> pr;\ntypedef vector<pr> VP;\nstruct Order {\n  bool operator() (pr const& a,pr const& b) const {\n    return a.first > b.first || ((a.first == b.first) && (a.second > b.second));\n  }\n};\ntypedef struct _PT {\n  long double x, y;\n  _PT() {}\n  _PT(long double x,long double y) : x(x), y(y) {} \n  _PT operator + (_PT p){\n     return _PT(x + p.x, y + p.y);\n  }\n  _PT operator - (_PT p){\n     return _PT(x - p.x, y - p.y);\n  }\n  _PT operator * (long double d){\n     return _PT(d*x, d*y);\n  }\n  bool operator <(const struct _PT &e) const{\n     return x == e.x? (y < e.y) : x < e.x;\n  }\n  bool operator >(const struct _PT &e) const{\n     return abs(x - e.x) < eps ? ((y - e.y) > eps) : ((x - e.x)>eps);\n  }\n\n  // --オプジェクトは位置ベクトル--\n\n  long double dist(_PT p){ //点pとの距離の2乗\n     return (x-p.x)*(x-p.x) + (y-p.y)*(y-p.y);\n  }\n\n  // --オブジェクトは幾何ベクトル--\n  \n  long double dot(_PT v){ //ベクトルvとの内積\n     return x * v.x + y * v.y;\n  }\n  \n  long double det(_PT v){ // ベクトルvとの外積\n     return x * v.y - v.x * y;\n  }\n\n  long double norm(void){ // ベクトルのノルム\n    return sqrt(x*x + y*y);\n  }\n\n  long double twiceNorm(void){ // ノルムの2乗\n    return x*x + y*y;\n  }\n\n  bool is_parallel(_PT v) { //ベクトルvと平行か(外積 = 0か)\n    return (abs(x * v.y - v.x * y) < eps);\n  }\n}P;\n\nint main(void) {\n  double px,py,qx,qy,rx,ry;\n  cin >> px >> py >> qx >> qy;\n  double base = atan2((qy-py),(qx-px));\n  int n;\n  cin >> n;\n  REP(i,n) {\n    cin >> rx >> ry;\n    double rad = atan2((ry-py),(rx-px));\n    if (abs(rad-base) < eps || (px == rx)&&(py == ry)) { //重なってる場合 \n      if (P(rx-px,ry-py).twiceNorm() > P(qx-px,qy-py).twiceNorm()) cout << \"ONLINE_FRONT\" << endl; \n      else cout << \"ON_SEGMENT\" << endl;\n    }\n    else if (abs(abs(rad - base)-pi) < eps) cout << \"ONLINE_BACK\" << endl; // 真裏\n    else if ((rad > base && (rad - base) < pi) || (rad < base && (base - rad) > pi)) cout << \"COUNTER_CLOCKWISE\" << endl;\n    else cout << \"CLOCKWISE\" << endl;\n  }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n/*\n#include<algolithm>\n#include<array>\n#include<vector>\n*/\nusing namespace std;\n\ntypedef double Real;\nconstexpr Real EPS = 1e-8;\n\nenum { CCW=1, CW = -1, BACK= 2, FRONT=-2, ON=0};\n\n\nint sign(Real d) {\n\tif (d>EPS) { return 1; }\n\tif (d<-EPS) { return -1; }\n\treturn 0;\n}\n\nstruct Point {\n\tReal x,y;\n\n\tPoint(Real x_=0, Real y_=0): x(x_), y(y_) {}\n\n\tPoint operator+(const Point &p) const {\n\t\treturn Point(x+p.x,y+p.y);\n\t}\n\tPoint operator-(const Point &p) const {\n\t\treturn Point(x-p.x,y-p.y);\n\t}\n\tPoint operator*(Real s) const {\n\t\treturn Point(x*s,y*s);\n\t}\n\tPoint operator/(Real s) const {\n\t\treturn Point(x/s,y/s);\n\t}\n\tPoint operator<(const Point &p) const {\n\t\treturn sign(x - p.x) == -1 || (sign(x - p.x)==0 && sign(y - p.y)==-1);\n\t}\n\tPoint operator==(const Point &p) const { return sign(x-p.x) == 0 && sign(y - p.y)==0; }\n\n};\n\nistream &operator>>(istream &is, Point &p) {\n\treturn is >> p.x >> p.y;\n}\nostream &operator<<(ostream &os, const Point &p) {\n\treturn os << '(' << p.x << \", \" << p.y << ')';\n}\n\nstruct Line : public array<Point, 2> { //??????\n\tLine(const Point &a, const Point &b) { at(0) = a; at(1) = b; }\n};\n\nstruct Segment : public array<Point, 2> { //??´???\n\tSegment(const Point &a, const Point &b) { at(0) = a; at(1) = b; }\n};\n\nstruct Circle {\n\tPoint c;\n\tReal r;\n\tCircle(const Point &c_, Real r_): c(c_), r(r_) {}\n};\n\ntypedef vector<Point> Polygon;\n\n\n\n\n//--- solve ---\nPoint rotate90(const Point &p) { //???????¨???????\n\treturn Point(-p.y,p.x);\n}\n\nPoint rotate(const Point &p, Real theta) {\n\tconst Real s = sin(theta), c = cos(theta);\n\treturn Point(c*p.x - s*p.y, s*p.x + c*p.y);\n}\n\nReal angle(const Point &p) {\n\treturn atan2(p.y, p.x);\n}\n\nReal norm(const Point &p) {\n\treturn p.x * p.x + p.y * p.y;\n}\n\nReal abs(const Point &p) {\n\treturn sqrt(norm(p));\n}\n\nReal dot(const Point &a, const Point &b) { //??????\n\treturn a.x * b.x + a.y * b.y;\n}\n\nReal cross(const Point &a, const Point &b) {\n\treturn a.x * b.y - a.y * b.x;\n}\n\n\nPoint project(const Line &l, const Point &p) { //?°???±\n\tconst Point a = p - l[0];\n\tconst Point b = l[1] - l[0];\n\treturn l[0] + b * (dot(a,b) / norm(b));\n}\n\nbool intersect(const Line &a, const Line &b) { //\n\treturn sign(cross(a[1]-a[0], b[1]-b[0])) != 0\n\t\t|| sign(cross(a[1]-a[0], b[1]-a[0])) == 0;\n}\n\nPoint reflect(const Line &l, const Point &p) { //?°???±\n\tconst Point t = project(l, p);\n\treturn t + (t-p);\n}\n\nint ccw(const Point &a, const Point &b, const Point &c) {\n\tconst Point p = b - a;\n\tconst Point q = c - a;\n\tconst Real cr = cross(p,q);\n\n\tif (sign(cr) == 1) { return CCW; }\n\telse if (sign(cr) == -1) { return CW; }\n\telse if (sign(dot(p,q)) == -1) { return BACK; }\n\telse if (sign(norm(p) - norm(q)) == -1) { return FRONT; }\n\treturn ON;\n}\n\n\n//CCW=1, CW = -1, BACK= 2, FRONT=-2, ON=0\nint main() {\n\tPoint p1,p2;\n\tint q;\n\tint x,y;\n\n\tcout.setf(ios::fixed);\n\tcout.precision(10);\n\tcin >> p1.x >> p1.y >> p2.x >> p2.y;\n\tcin >> q;\n\tfor(int i=0; i < q; i++) {\n\t\tPoint p;\n\t\tcin >> p.x >> p.y;\n\t\tint num = ccw(p1,p2,p);\n\t\tswitch(num) {\n\t\t\tcase CCW:\n\t\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t\t\tbreak;\n\t\t\tcase CW:\n\t\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\t\t\tbreak;\n\t\t\tcase BACK:\n\t\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t\t\tbreak;\n\t\t\tcase FRONT:\n\t\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t\t\tbreak;\n\t\t\tcase ON:\n\t\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t\t\tbreak;\n\t\t}\n\n\t}\n\n\treturn EXIT_SUCCESS;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <iostream>\n\nusing namespace std;\n\n#define EPS (1e-10)\n\nclass Point {\npublic:\n\tdouble x, y;\n\tPoint(double x, double y) :\n\t\t\tx(x), y(y) {\n\t}\n\tPoint operator -(Point p) {\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n\n\tdouble norm() {\n\t\treturn x * x + y * y;\n\t}\n};\n\ndouble dot(Point p1, Point p2) {\n\treturn p1.x * p2.x + p1.y * p2.y;\n}\n\ndouble cross(Point p1, Point p2) {\n\treturn p1.x * p2.y - p1.y * p2.x;\n}\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ON_SEGMENT = -2;\nstatic const int ONLINE_FRONT = 0;\n\nint ccw(Point p0, Point p1, Point p2) {\n\tPoint a = p1 - p0;\n\tPoint b = p2 - p0;\n\tif (cross(a, b) > EPS)\n\t\treturn COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS)\n\t\treturn CLOCKWISE;\n\tif (dot(a, b) < -EPS)\n\t\treturn ONLINE_BACK;\n\tif (a.norm() < b.norm())\n\t\treturn ONLINE_FRONT;\n\n\treturn ON_SEGMENT;\n}\n\nint main() {\n\n\tint p0x, p0y, p1x, p1y;\n\tscanf(\"%d %d %d %d\", &p0x, &p0y, &p1x, &p1y);\n\tPoint p0(p0x, p0y);\n\tPoint p1(p1x, p1y);\n\n\tint q;\n\tscanf(\"%d\", &q);\n\tfor (int i = 0; i < q; ++i) {\n\t\tint p2x, p2y;\n\t\tscanf(\"%d %d\", &p2x, &p2y);\n\t\tPoint p2(p2x, p2y);\n\n\t\tswitch (ccw(p0, p1, p2)) {\n\t\tcase COUNTER_CLOCKWISE:\n\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t\tbreak;\n\t\tcase CLOCKWISE:\n\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\t\tbreak;\n\t\tcase ONLINE_BACK:\n\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t\tbreak;\n\t\tcase ON_SEGMENT:\n\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t\tbreak;\n\t\tcase ONLINE_FRONT:\n\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define FOR(i, a, n) for(ll i = (ll)a; i < (ll)n; i++)\n#define rep(i, n) FOR(i, 0, n)\n#define ALL(x) (x).begin(), (x).end()\nusing namespace std;\ntypedef long long ll;\n\nconstexpr ll mod = 1e9 + 7;\n\ntemplate <class T> inline bool chmax(T &a, const T b) {\n    if(a >= b) return false;\n    a = b;\n    return true;\n}\ntemplate <class T> inline bool chmin(T &a, const T b) {\n    if(a <= b) return false;\n    a = b;\n    return true;\n}\n\n/*-------------------------------------------*/\n\nstruct Point {\n    double x, y;\n    Point(double x = 0, double y = 0) : x(x), y(y) {}\n    Point operator+(const Point &p) { return Point{x + p.x, y + p.y}; }\n    Point operator-(const Point &p) { return Point{x - p.x, y - p.y}; }\n    Point operator*(const double k) { return Point{x * k, y * k}; }\n    Point operator/(const double k) { return Point{x / k, y / k}; }\n\n    double norm() { return x * x + y * y; }\n    double abs() { return sqrt(norm()); }\n};\ntypedef Point Vector;\nstruct Segment {\n    Point p1, p2;\n};\ntypedef Segment Line;\nstruct Circle {\n    Point c;\n    double r;\n    Circle(Point c = Point(), double r = 0) : c(c), r(r) {}\n};\ntypedef vector<Point> Polygon;\n\ndouble norm(Vector v) { return v.x * v.x + v.y * v.y; }\ndouble abs(Vector v) { return sqrt(norm(v)); }\n\ndouble dot(Vector a, Vector b) { return a.x * b.x + a.y * b.y; }\ndouble cross(Vector a, Vector b) { return a.x * b.y - a.y * b.x; }\n\ndouble getDistanceLP(Line l, Point p) {\n    return abs(cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1));\n}\ndouble getDistanceSP(Segment s, Point p) {\n    if(dot(s.p2 - s.p1, p - s.p1) < 0) return abs(p - s.p1);\n    if(dot(s.p1 - s.p2, p - s.p2) < 0) return abs(p - s.p2);\n    return getDistanceLP(s, p);\n}\n\nbool isOrthogonal(Vector a, Vector b) { return dot(a, b) == 0; }\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n    return isOrthogonal(a1 - a2, b1 - b2);\n}\nbool isOrthogonal(Line l1, Line l2) {\n    return isOrthogonal(l1.p2, l1.p1, l2.p2, l2.p1);\n}\n\nbool isParallel(Vector a, Vector b) { return cross(a, b) == 0; }\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n    return isParallel(a1 - a2, b1 - b2);\n}\nbool isParallel(Line l1, Line l2) {\n    return isParallel(l1.p1, l1.p2, l2.p1, l2.p2);\n}\n\nPoint project(Line l, Point p) {\n    Vector base = l.p2 - l.p1;\n    double r = dot(p - l.p1, base) / base.norm();\n    return l.p1 + base * r;\n}\nPoint reflect(Line l, Point p) { return p + (project(l, p) - p) * 2; }\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\nstring ccw(Point p0, Point p1, Point p2) {\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if(cross(a, b) > 0) return \"COUNTER_CLOCKWISE\";\n    if(cross(a, b) < 0) return \"CLOCKWISE\";\n    if(dot(a, b) < 0) return \"ONLINE_BACK\";\n    if(a.norm() < b.norm()) return \"ONLINE_FRONT\";\n    return \"ON_SEGMENT\";\n}\n\nint main() {\n    Point p0, p1;\n    cin >> p0.x >> p0.y >> p1.x >> p1.y;\n    int n;\n    cin >> n;\n    while(n--) {\n        Point p2;\n        cin >> p2.x >> p2.y;\n        cout << ccw(p0, p1, p2) << endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <iostream>\n#include <complex>\n#include <vector>\n#include <cmath>\n#include <cassert>\n#define rep(i,n) for(int i=0;i<n;i++)\n#define fs first\n#define sc second\n#define pb push_back\nusing namespace std;\ntypedef double D;\ntypedef complex<D> P;\ntypedef pair<P,P> L;\t\t//fs->sc\ntypedef vector<P> Pol;\nstruct C{P p;D r;};\nD inf=1e50,eps=1e-10;\n//template<class T> bool eq(T a, T b) { return abs(a-b)<eps;}\n//template<class T> int sig(T a) { return eq(a,0) ? 0 : (a>0 ? 1 : -1);}\nbool eq(D a, D b) { return abs(a-b)<eps;}\nint sig(D a) { return eq(a,0) ? 0 : (a>0 ? 1 : -1);}\ninline D dot(P a, P b) { return real(conj(a)*b);};\ninline D cro(P a, P b) { return imag(conj(a)*b);};\nenum ENCCW{CCW=1, CW=-1, FRONT=2, BACK=-2, ON=0};\t//!!MAEHARAとFRONT,BACKが逆\n//ON優先(including endpoint)\ninline int ccw (P a, P b, P c){\n//\tcout << cro(b-a,c-a) << endl;\n\tif(sig(cro(b-a,c-a))==1) return CCW;\n\tif(sig(cro(b-a,c-a))==-1) return CW;\n\tif(eq(abs(a-c)+abs(c-b),abs(a-b))) return ON;\n\tif(eq(abs(a-b)+abs(b-c),abs(a-c))) return FRONT;\n\tif(eq(abs(c-a)+abs(a-b),abs(c-b))) return BACK;\n\tassert(false);\n}\ninline P proj(P a, P b){\t\t//ベクトルaのbへの射影\n\treturn (dot(a,b)/norm(b))*b;\n}\ninline P perp(L l, P p){\t\t//垂線の足\n\tD t=dot(p-l.fs,l.fs-l.sc)/norm(l.fs-l.sc);\n\treturn l.fs+t*(l.fs-l.sc);\n}\ninline P refl(L l, P p){\n\treturn p+2.0*(perp(l,p)-p);\n}\ninline bool ispal(L a, L b){\n\treturn sig(cro(a.fs-a.sc,b.fs-b.sc))==0;\n}\ninline bool ovLL(L a, L b){\n\treturn ispal(a,b) && sig(cro(a.fs-a.sc,b.fs-a.sc))==0;\n}\ninline bool iLL(L a, L b){\t\t//intersect or overload\n\treturn !ispal(a,b) || ovLL(a,b);\n}\ninline bool iLS(L l, L s){\t\t//intersect(including endpoint) or overload\n\treturn cro(l.sc-l.fs,s.fs-l.fs)*cro(l.sc-l.fs,s.sc-l.fs)<eps;\n}\ninline bool iLP(L l, P p){\t\t//on line\n\treturn sig(cro(l.sc-p,l.fs-p));\n}\ninline bool iSS(L a, L b){\t\t//intersect(including endpoint) or overload\n\treturn ccw(a.fs,a.sc,b.fs)*ccw(a.fs,a.sc,b.sc)<=0 && ccw(b.fs,b.sc,a.fs)*ccw(b.fs,b.sc,a.sc)<=0;\n}\ninline bool iSP(L s, P p){\t\t//intersect(including endpoint) or overload\n\treturn ccw(s.fs,p,s.sc)==ON;\n}\ninline D dLP(L l, P p) { return abs(perp(l,p)-p);}\ninline D dLL(L a, L b) { return iLL(a,b) ? 0 : dLP(a,b.fs);}\ninline D dLS(L l, L s) { return iLS(l,s) ? 0 : min(dLP(l,s.fs),dLP(l,s.sc));}\ninline D dSP(L s, P p) {\n\tP q=perp(s,p);\n\treturn iSP(s,q) ? abs(p-q) : min(abs(p-s.fs),abs(p-s.sc));\n}\ninline D dSS(L a, L b) {\n\tif(iSS(a,b)) return 0;\n\treturn min(min(dSP(a,b.fs),dSP(a,b.sc)),min(dSP(b,a.fs),dSP(b,a.sc)));\n}\ninline P intLL(L a, L b) {\t//intersection\n\tassert(!ispal(a,b));\n\tD t=cro(a.sc-a.fs,a.sc-b.fs)/cro(a.sc-a.fs,b.sc-b.fs);\n\treturn b.fs+t*(b.sc-b.fs);\n}\nenum ENICP{INC=1,ONC=0,OUTC=-1};\ninline int iCP(C c, P p){\n\tD d=abs(p-c.p);\n\treturn eq(d,c.r) ? ONC : (d<c.r ? INC : OUTC);\n}\ninline int iCL(C c, L l){\t\t//num of intersection(s)\n\tD d=dLP(l,c.p);\n\treturn eq(d,c.r) ? 1 : (d<c.r ? 2 : 0);\n}\n//inline int iCS\n//inline int iCC(C a, C b){\n\n/*inline P intCL1(C c, L l){\t\t//iCL=1\n\tassert(iCL(c,l)==1);\n}\ninline L intCL2(C c, L l){\t\t//iCL=2\n\tassert(iCL(c,l)==2);\n}*/\nD aTri(P a, P b, P c){ return cro(b-a,c-a)/2;}\nD aPol(Pol p){\t\t\t//点集合はCCWに与える\n\tint n=p.size();\n\tD ret=0;\n\trep(i,n) ret+=cro(p[i],p[(i+1)%n])/2;\n\treturn ret;\n}\nP gPol(Pol p){\t\t\t//多角形内部が一様な重さを持つときの重心\n\tint n=p.size();\n\tP g;\n\tD s=aPol(p);\n\tassert(s>eps);\n\trep(i,n){\n\t\tD ds=cro(p[i],p[(i+1)%n])/2;\n\t\tg+=ds/3*(p[i]+p[(i+1)%n]);\n\t}\n\treturn g/s;\n}\nenum ENCONT{INP=1,ONP=0,OUTP=-1};\nint contain(Pol pol, P p){\n\tbool in=false;\n\trep(i,pol.size()){\n\t\tP a=pol[i],b=pol[(i+1)%pol.size()];\n\t\tif(ccw(a,b,p)==ON) return ONP;\n\t\tif(!iLS(L(p,p+1.),L(a,b))) continue;\n\t\tif(ovLL(L(p,p+1.),L(a,b))){\n\t\t\tif(sig(max(real(a),real(b))-real(p))>=0) in=!in;\n\t\t\tcontinue;\n\t\t}\n\t\tif(sig(real(intLL(L(p,p+1.),L(a,b)))-real(p))>=0) in=!in;\n\t}\n\treturn in ? INP : OUTP;\n}\ninline D heron(D a, D b, D c){\n\tdouble s=(a+b+c)/2;\n\tif(s-a<eps || s-b<eps || s-c<eps) return 0;\t\t//S=0 || 三角形できない\n\treturn sqrt(s*(s-a)*(s-b)*(s-c));\n}\nint main(){\n\tD x0,y0,x1,y1;\n\tcin >> x0 >> y0 >> x1 >> y1;\n\tP a=P(x0,y0), b=P(x1,y1);\n\tint q;\n\tscanf(\"%d\",&q);\n\trep(i,q){\n\t\tD x,y;\n\t\tscanf(\"%lf%lf\",&x,&y);\n\t\tint k=ccw(a,b,P(x,y));\n\t\tif(k==CCW) printf(\"COUNTER_CLOCKWISE\\n\");\n\t\tif(k==CW) printf(\"CLOCKWISE\\n\");\n\t\tif(k==FRONT) printf(\"ONLINE_FRONT\\n\");\n\t\tif(k==BACK) printf(\"ONLINE_BACK\\n\");\n\t\tif(k==ON) printf(\"ON_SEGMENT\\n\");\n\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <vector>\n#include <cfloat>\n#include <string>\n#include <cmath>\n#include <set>\n#include <cstdlib>\n#include <map>\n#include <ctime>\n#include <iomanip>\n#include <functional>\n#include <deque>\n#include <iostream>\n#include <cstring>\n#include <queue>\n#include <cstdio>\n#include <stack>\n#include <climits>\n#include <sys/time.h>\n#include <cctype>\n\nusing namespace std;\n\ntypedef long long ll;\n\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a)-(b)) < EPS)\n\nclass Point {\n public:\n  double x, y;\n\n  Point(double x = 0, double y = 0): x(x), y(y) {}\n\n  Point operator + (Point p) { return Point(x+p.x, y+p.y); }\n  Point operator - (Point p) { return Point(x-p.x, y-p.y); }\n  Point operator * (double a) { return Point(a*x, a*y); }\n  Point operator / (double a) { return Point(x/a, y/a); }\n\n  double norm() { return x*x+y*y; }\n  double abs() { return sqrt(norm()); }\n\n  bool operator < (const Point &p) const {\n    return x != p.x ? x < p.x : y < p.y;\n  }\n\n  bool operator == (const Point &p) const {\n    return fabs(x-p.x) < EPS && fabs(y-p.y) < EPS;\n  }\n};\n\ntypedef Point Vector;\ntypedef vector <Vector> Polygon;\n\nclass Segment {\n public:\n  Point p1, p2;\n\n  Segment(Point p1 = Point(), Point p2 = Point()): p1(p1), p2(p2) {}\n};\n\ndouble norm(Vector a) {\n  return a.x*a.x+a.y*a.y;\n}\n\ndouble abs(Vector a) {\n  return sqrt(norm(a));\n}\n\n// ?????????|a||b|cos\ndouble cross(Vector a, Vector b) {\n  return a.x*b.y-a.y*b.x;\n}\n// ?????????|a||b|sin\ndouble dot(Vector a, Vector b) {\n  return a.x*b.x+a.y*b.y;\n}\n\n// 1:???????¨??????? -1:????¨??????? 2:p2-p0-p1 -2:p0-p1-p2 0:p2???p0-p1???\nint ccw(Point p0, Point p1, Point p2) {\n  Vector a = p1-p0;\n  Vector b = p2-p0;\n  if (cross(a, b) > EPS) return 1;\n  if (cross(a, b) < -EPS) return -1;\n  if (dot(a, b) < -EPS) return 2;\n  if (a.norm() < b.norm()) return -2;\n\n  return 0;\n}\n\nint main() {\n  Vector p0, p1;\n  cin >> p0.x >> p0.y >> p1.x >> p1.y;\n  int q;\n  cin >> q;\n  for (int i = 0; i < q; i++) {\n    Vector p2;\n    cin >> p2.x >> p2.y;\n    int ccwret = ccw(p0, p1, p2);\n    if (ccwret == 1) {\n      cout << \"COUNTER_CLOCKWISE\" << endl;\n    }\n    if (ccwret == -1) {\n      cout << \"CLOCKWISE\" << endl;\n    }\n    if (ccwret == 2) {\n      cout << \"ONLINE_BACK\" << endl;\n    }\n    if (ccwret == -2) {\n      cout << \"ONLINE_FRONT\" << endl;\n    }\n    if (ccwret == 0) {\n      cout << \"ON_SEGMENT\" << endl;\n    }\n  }\n}"
  },
  {
    "language": "C++",
    "code": "// #include {{{\n#include <iostream>\n#include <cassert>\n#include <cstring>\n#include <cstdlib>\n#include <cstdio>\n#include <cctype>\n#include <cmath>\n#include <ctime>\n#include <queue>\n#include <set>\n#include <map>\n#include <stack>\n#include <string>\n#include <bitset>\n#include <vector>\n#include <complex>\n#include <algorithm>\nusing namespace std;\n// }}}\n// #define {{{\ntypedef long long ll;\ntypedef double db;\ntypedef pair<int,int> pii;\ntypedef vector<int> vi;\n#define de(x) cout << #x << \"=\" << x << endl\n#define rep(i,a,b) for(int i=a;i<(b);++i)\n#define per(i,a,b) for(int i=(b)-1;i>=(a);--i)\n#define all(x) (x).begin(),(x).end()\n#define sz(x) (int)(x).size()\n#define mp make_pair\n#define pb push_back\n#define fi first\n#define se second\n// }}}\n\ntypedef ll T;\nstruct P{\n    T x,y;\n    P(){} P(T x,T y):x(x),y(y){}\n    P operator - (const P&b) const {return P(x-b.x,y-b.y);}\n    T operator ^ (const P&b) const {return x*b.y-y*b.x;}\n    T operator * (const P&b) const {return x*b.x+y*b.y;}\n    void read() {scanf(\"%lld%lld\",&x,&y);}\n}s,t,p;\nT norm(P a){return a*a;}\n\nint main(){\n    s.read();t.read();\n    int Q;scanf(\"%d\",&Q);\n    rep(i,0,Q){\n        p.read();\n        int cross=(t-s)^(p-s),dot=(t-s)*(p-s);\n        if(cross>0) puts(\"COUNTER_CLOCKWISE\");\n        else if(cross<0) puts(\"CLOCKWISE\");\n        else if(dot<0) puts(\"ONLINE_BACK\");\n        else if(norm(p-s)<=norm(t-s)) puts(\"ON_SEGMENT\");\n        else puts(\"ONLINE_FRONT\");\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define __USE_MINGW_ANSI_STDIO 0\n#include <bits/stdc++.h>\n\nusing namespace std;\nusing ll = long long;\n#define int ll\nusing VI = vector<int>;\nusing VVI = vector<VI>;\nusing PII = pair<int, int>;\n\n#define FOR(i, a, n) for (ll i = (ll)a; i < (ll)n; ++i)\n#define REP(i, n) FOR(i, 0, n)\n#define ALL(x) x.begin(), x.end()\n#define PB push_back\n\nconst ll LLINF = (1LL<<60);\nconst int INF = (1LL<<30);\nconst int MOD = 1000000007;\n\ntemplate <typename T> T &chmin(T &a, const T &b) { return a = min(a, b); }\ntemplate <typename T> T &chmax(T &a, const T &b) { return a = max(a, b); }\ntemplate <typename T> bool IN(T a, T b, T x) { return a<=x&&x<b; }\ntemplate<typename T> T ceil(T a, T b) { return a/b + !!(a%b); }\ntemplate<class S,class T>\nostream &operator <<(ostream& out,const pair<S,T>& a){\n  out<<'('<<a.first<<','<<a.second<<')';\n  return out;\n}\ntemplate<class T>\nostream &operator <<(ostream& out,const vector<T>& a){\n  out<<'[';\n  REP(i, a.size()) {out<<a[i];if(i!=a.size()-1)out<<',';}\n  out<<']';\n  return out;\n}\n\nint dx[] = {0, 1, 0, -1}, dy[] = {1, 0, -1, 0};\n\nconst double EPS = 1e-8;\n\nusing R = long double;\nusing P = complex<R>;\nusing L = pair<P,P>;\n\ninline int sgn(const R& r) { return (r>EPS) - (r<-EPS); }\nnamespace std {\n\tbool operator < (const P& a, const P& b) {\n\t\treturn sgn(real(a-b)) ? real(a-b) < 0 : sgn(imag(a-b)) < 0;\n\t}\n\tbool operator == (const P& a, const P& b) {\n\t\treturn sgn(real(a-b)) == 0 && sgn(imag(a-b)) == 0;\n\t}\n}\ninline R dot(const P& a, const P& b) {\n  return real(a)*real(b) + imag(a)*imag(b);\n}\ninline R det(const P& a, const P& b) {\n  return real(a)*imag(b)-imag(a)*real(b);\n}\n// a/b\ninline P div(const P &a, const P &b) {\n  return {dot(b,a)/norm(b), det(b,a)/norm(b)};\n}\n\n// PとLについて入力\ninline istream& operator>>(istream& is, P& p) {\n  R x, y;\n  is >> x >> y;\n  p = P(x, y);\n  return is;\n}\ninline istream& operator>>(istream& is, L& l) {\n  P a, b;\n  is >> a >> b;\n  l = L(a, b);\n  return is;\n}\n\n// 線分abから見たcの位置\nenum CCW{LEFT=1, RIGHT=2, BACK=4, FRONT=8, ON=16};\nint ccw(P a, P b, P c) {\n\tP p = div(c-a, b-a);\n\tif(sgn(imag(p)) > 0) return LEFT;\n\tif(sgn(imag(p)) < 0) return RIGHT;\n\tif(sgn(real(p)) < 0) return BACK;\n\tif(sgn(real(p)-1) > 0) return FRONT;\n\treturn ON;\n}\n\nsigned main(void)\n{\n  cin.tie(0);\n  ios::sync_with_stdio(false);\n\n  L l;\n  cin >> l;\n  int q;\n  cin >> q;\n  REP(i, q) {\n    P p;\n    cin >> p;\n    int ret = ccw(l.first, l.second, p);\n    if(ret == LEFT) cout << \"COUNTER_CLOCKWISE\" << endl;\n    else if(ret == RIGHT) cout << \"CLOCKWISE\" << endl;\n    else if(ret == BACK) cout << \"ONLINE_BACK\" << endl;\n    else if(ret == FRONT) cout << \"ONLINE_FRONT\" << endl;\n    else if(ret == ON) cout << \"ON_SEGMENT\" << endl;\n  }\n\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std ;\n\n#define pb(n) push_back(n)\n#define fi first\n#define se second\n#define all(r) begin(r),end(r)\n#define vmax(ary) *max_element(all(ary))\n#define vmin(ary) *min_element(all(ary))\n#define debug(x) cout<<#x<<\": \"<<x<<endl\n#define fcout(n) cout<<fixed<<setprecision((n))\n#define scout(n) cout<<setw(n)\n#define vary(type,name,size,init) vector< type> name(size,init)\n#define vvl(v,w,h,init) vector<vector<ll>> v(w,vector<ll>(h,init))\n#define mp(a,b) make_pair(a,b)\n\n#define rep(i,n) for(int i = 0; i < (int)(n);++i)\n#define REP(i,a,b) for(int i = (a);i < (int)(b);++i)\n#define repi(it,array) for(auto it = array.begin(),end = array.end(); it != end;++it)\n#define repa(n,array) for(auto &n :(array))\n\nusing ll = long long;\nusing pii = pair<int,int> ;\nusing pll = pair<ll,ll> ;\n  const double EPS = 1e-8;\n  const double INF = 1e12;\n  typedef complex<double> P;//????´???°????????¢?????????????????¨?§£???\n  namespace std {\n    bool operator < (const P& a, const P& b) {//x????????????\n      return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n    }\n    bool sorty(const P& a, const P& b) {//y????????????\n      return imag(a) != imag(b) ? imag(a) < imag(b) : real(a) < real(b);\n    }\n  }\n  double cross(const P& a, const P& b) {//??????\n    return imag(conj(a)*b);\n  }\n  double dot(const P& a, const P& b) {//??????\n    return real(conj(a)*b);\n  }\n\n  struct L : public vector<P> {//??´???\n    L(){};\n    L(const P &a, const P &b) {\n      push_back(a); push_back(b);\n    }\n  };\n\n  typedef vector<P> G;\n\n  struct C {//???\n    P p; double r;\n    C(){};\n    C(const P &p, double r) : p(p), r(r) { }\n  };\n  int ccw(P a, P b, P c) {//3????????????????????§????????§??????????????????\n    b -= a; c -= a;\n    if (cross(b, c) > 0)   return +1;       // counter clockwise\n    if (cross(b, c) < 0)   return -1;       // clockwise\n    if (dot(b, c) < 0)     return +2;       // c--a--b on line\n    if (norm(b) < norm(c)) return -2;       // a--b--c on line\n    return 0;//a--c--b on line\n  }\n  P crosspoint(const L &l, const L &m) {\n    double A = cross(l[1] - l[0], m[1] - m[0]);\n    double B = cross(l[1] - l[0], l[1] - m[0]);\n    if (abs(A) < EPS && abs(B) < EPS) return m[0]; // same line\n    if (abs(A) < EPS) assert(false); // !!!PRECONDITION NOT SATISFIED!!!\n    return m[0] + B / A * (m[1] - m[0]);\n  }\nint main(){\n  cin.tie(0);\n  ios::sync_with_stdio(false);\n  double x,y;\n  cin >> x >> y;\n  P a(x,y);\n  cin >> x >> y;\n  P b(x,y);\n  ll q;\n  cin >> q;\n  rep(i,q){\n    cin >> x >> y;\n    P c(x,y);\n    int k = ccw(a,b,c);\n    if(k == 1){\n      cout << \"COUNTER_CLOCKWISE\" << endl;\n    }\n    else if(k == -1){\n      cout << \"CLOCKWISE\" << endl;\n    }\n    else if(k == 2){\n      std::cout << \"ONLINE_BACK\" << std::endl;\n    }\n    else if(k == -2){\n      std::cout << \"ONLINE_FRONT\" << std::endl;\n    }\n    else{\n      std::cout << \"ON_SEGMENT\" << std::endl;\n    }\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\nusing ull = unsigned long long;\n//#define ll long long\ntemplate<class T> bool chmax(T &a, const T &b) { if (a<b) { a=b; return 1; } return 0; }\ntemplate<class T> bool chmin(T &a, const T &b) { if (a>b) { a=b; return 1; } return 0; }\n#define rep(i, n) REP(i, 0, n)\n#define rep_rev(i, n) for (int (i) = (int)(n) - 1 ; (i) >= 0 ; --(i))\n#define ALL(v) v.begin(), v.end()\n#define MSG(a) cout << #a << \" \" << a << endl;\n#define REP(i, x, n) for(int i = x; i < n; i++)\n#define all(x) (x).begin(),(x).end()\nll t1,t2;\nconst ll mod = 1000000007;\nconst int INF = 1e9;\nconst ll INFLONG = 1e18;\nvoid swap(ll *x,ll *y){\n  ll tmp;\n  tmp = *x;\n  *x = *y;\n  *y = tmp;\n}\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a) - (b)) < EPS)\n\nclass Point {\npublic:\n    double x,y;\n    Point(double x,double y):x(x),y(y){}\n    Point():x(0),y(0){}\n\n    Point operator + (Point p) {return Point(x + p.x,y + p.y);}\n    Point operator - (Point p ){return Point(x - p.x,y - p.y);}\n    Point operator * (double a){return Point(x*a,y*a);}\n    Point operator / (double a){return Point(x/a,y/a);}\n\n    double abs(){return sqrt(norm());}\n    double norm(){return x * x + y * y;}\n\n    bool operator < (const Point & p) const {\n      return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point &p) const {\n      return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n    }\n\n    void set(double x,double y) {\n      this->x = x;\n      this->y = y;\n    }\n\n    void rotateR(){\n      double xt = x;\n      double yt = y;\n      x = yt;\n      y = -xt;\n    }\n    void rotateL(){\n      double xt = x;\n      double yt = y;\n      x = -yt;\n      y = xt;\n    }\n};\n\nstruct Segment{\n    Point p1,p2;\n};\n\ntypedef Point Vector;\ntypedef Segment Line;\n\ndouble norm(Point a){\n  return a.x * a.x + a.y * a.y;\n}\n\ndouble abs(Point a){\n  return sqrt(norm(a));\n}\n\nbool eq(Point a,Point b){\n  return abs(a-b) < EPS;\n}\n\ndouble dot(Vector a, Vector b){\n  return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a,Vector b){\n  return a.x * b.y - a.y * b.x;\n}\n\nbool isOrthogonal(Vector a,Vector b){\n  return equals(dot(a,b),0.0);\n}\n\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n  return isOrthogonal(a1-a2,b1-b2);\n}\n\nbool isOrthogonal(Segment s1,Segment s2){\n  return equals(dot(s1.p2 - s1.p1,s2.p2-s2.p1),0.0);\n}\n\nbool isParallel(Vector a, Vector b){\n  return equals(cross(a,b),0.0);\n}\n\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n  return isParallel(a1-a2,b1-b2);\n}\n\nbool isParallel(Segment s1,Segment s2){\n  return equals(cross(s1.p2 - s1.p1,s2.p2-s2.p1),0.0);\n}\n\nPoint project(Segment s,Point p){\n  Point vec1,vec2;\n  vec1 = s.p2 - s.p1;\n  vec2 = p - s.p1;\n  return s.p1 + vec1 * dot(vec1,vec2) / vec1.norm();\n}\n\nPoint reflect(Segment s,Point p){\n  return p + (project(s,p) - p)* 2;\n}\n\nbool intersect(Segment s1,Segment s2){\n  return ((cross(s1.p1 - s2.p1,s1.p1 - s2.p2) < 0 ^ cross(s1.p2 - s2.p1,s1.p2 - s2.p2) < 0)\n  && (cross(s2.p1 - s1.p1,s2.p1 - s1.p2) < 0 ^ cross(s2.p2 - s1.p1,s2.p2 - s1.p2) < 0));\n}\n\ndouble getDistance(Point a,Point b){\n  return abs(a-b);\n}\n\n// Line : Point\ndouble getDistanceLP(Line l,Point p){\n  return abs((cross(l.p2 - l.p1,p - l.p1) / abs(l.p2 - l.p1)));\n}\n\n// Segment : Point\ndouble getDistanceSP(Segment s,Point p){\n  if(dot(s.p2 - s.p1,p - s.p1) < 0.0){\n    return abs(p - s.p1);\n  }\n  if(dot(s.p1 - s.p2,p - s.p2) < 0.0){\n    return abs(p - s.p2);\n  }\n  return getDistanceLP(s,p);\n}\n\n\n\ndouble getDistance(Segment s1,Segment s2){\n  if(intersect(s1,s2)){\n    return 0.0;\n  }\n  double ans = INF;\n  chmin(ans,getDistanceSP(s1,s2.p1));\n  chmin(ans,getDistanceSP(s1,s2.p2));\n  chmin(ans,getDistanceSP(s2,s1.p1));\n  chmin(ans,getDistanceSP(s2,s1.p2));\n  return ans;\n}\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nint ccw(Point p0,Point p1,Point p2){\n  Vector a = p1 - p0;\n  Vector b = p2 - p0;\n  if(cross(a,b) > EPS)return COUNTER_CLOCKWISE;\n  if(cross(a,b) < -EPS) return CLOCKWISE;\n  if(dot(a,b) < -EPS)return ONLINE_BACK;\n  if(a.norm() < b.norm())return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\n\nint main() {\n  ll q;\n  double x, y;\n  string str;\n  vector<Vector> p(3);\n  rep(j, 2) {\n    cin >> x >> y;\n    p[j] = Point(x, y);\n  }\n  cin >> q;\n  rep(i, q) {\n    cin >> x >> y;\n    p[2] = Point(x,y);\n    ll t = ccw(p[0],p[1],p[2]);\n    if(t == COUNTER_CLOCKWISE){\n      str = \"COUNTER_CLOCKWISE\";\n    }else if(t == CLOCKWISE){\n      str = \"CLOCKWISE\";\n    }else if(t == ONLINE_BACK){\n      str = \"ONLINE_BACK\";\n    }else if(t == ONLINE_FRONT){\n      str = \"ONLINE_FRONT\";\n    }else{\n      str = \"ON_SEGMENT\";\n    }\n    cout << str << endl;\n  }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cstring>\n#include <algorithm>\n#include <sstream>\n#include <map>\n#include <set>\n#include <cmath>\n\n#define REP(i,k,n) for(int i=k;i<n;i++)\n#define rep(i,n) for(int i=0;i<n;i++)\n#define INF 1<<30\n#define pb push_back\n#define mp make_pair\n#define EPS 1e-8\n#define equals(a,b) fabs((a) - (b)) < EPS\n\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> P;\n\nstruct Point {\n\tdouble x, y;\n\n\tPoint(double x=0, double y=0) : x(x), y(y) {}\n\n\tPoint operator+(const Point &o) const { return Point(x+o.x, y+o.y); }\n\n\tPoint operator-(const Point &o) const { return Point(x-o.x, y-o.y); }\n\n\tPoint operator*(const double m) const { return Point(x*m, y*m); }\n\n\tPoint operator/(const double d) const { return Point(x/d, y/d); }\n\n\tbool operator<(const Point &o) const { return x != o.x ? x < o.x : y < o.y; }\n\n\tbool operator==(const Point &o) const { return fabs(x-o.x) < EPS && fabs(y-o.y) < EPS; }\n};\n\nostream& operator << (ostream& os, const Point& p) {\n\tos << \"(\" << p.x << \", \" << p.y << \")\";\n\treturn os;\n}\n\ndouble dot(Point a, Point b) { return a.x * b.x + a.y * a.x; }\ndouble cross(Point a, Point b) { return a.x * b.y - a.y * b.x; }\ndouble atan(Point p) { return atan2(p.y, p.x); }\ndouble norm(Point p) { return p.x * p.x + p.y * p.y; }\ndouble distancePP(Point p, Point o) { return sqrt(norm(o - p)); }\n\nint ccw(Point a, Point b, Point c) {\n\tb = b-a;\n\tc = c-a;\n\n\tif(cross(b, c) > 0.0) return +1;\t//conter clockwise\n\tif(cross(b, c) < 0.0) return -1;\t//clockwise\n\tif(dot(b, c) < 0.0) return +2;\t//a on Seg(b,c)\n\tif(norm(b) < norm(c)) return -2;\t//b on Seg(a,c)\n\treturn 0;\t//c on Seg(a,b)\n}\n\nint main() {\n\tPoint a, b, c;\n\tcin >> a.x >> a.y >> b.x >> b.y;\n\n\tint q;\n\tcin >> q;\n\n\trep(i, q) {\n\t\tcin >> c.x >> c.y;\n\n\t\tint d = ccw(a, b, c);\n\t\tif(d == +1) {\n\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t} else if(d == -1) {\n\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\t} else if(d == +2) {\n\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t} else if(d == -2) {\n\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t} else if(d == 0) {\n\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t}\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <iomanip>\n#include <map>\n#include <set>\n#include <queue>\n#include <stack>\n#include <numeric>\n#include <bitset>\n#include <cmath>\n\nstatic const int MOD = 1000000007;\nusing ll = long long;\nusing u32 = uint32_t;\nusing namespace std;\n\ntemplate<class T> constexpr T INF = ::numeric_limits<T>::max()/32*15+208;\n\nusing real = double;\nreal EPS = 1e-10;\nstruct Point {\n    real x, y;\n    Point& operator+=(const Point a) { x += a.x; y += a.y;  return *this; }\n    Point& operator-=(const Point a) { x -= a.x; y -= a.y;  return *this; }\n    Point& operator*=(const real k) { x *= k; y *= k;  return *this; }\n    Point& operator/=(const real k) { x /= k; y /= k;  return *this; }\n    Point operator+(const Point a) const {return Point(*this) += a; }\n    Point operator-(const Point a) const {return Point(*this) -= a; }\n    Point operator*(const real k) const {return Point(*this) *= k; }\n    Point operator/(const real k) const {return Point(*this) /= k; }\n    bool operator<(const Point &a) const { return (x != a.x ? x < a.x : y < a.y); }\n    explicit Point(real a = 0, real b = 0) : x(a), y(b) {};\n};\n\nistream& operator>> (istream& s, Point& P){\n    s >> P.x >> P.y;\n    return s;\n}\n\ninline real dot(Point a, Point b){ return a.x*b.x + a.y*b.y; }\ninline real cross(Point a, Point b){ return a.x*b.y - a.y*b.x; }\ninline real abs(Point a){ return sqrt(dot(a, a)); }\n\nstatic constexpr int COUNTER_CLOCKWISE = 1;\nstatic constexpr int CLOCKWISE = -1;\nstatic constexpr int ONLINE_BACK = 2;\nstatic constexpr int ONLINE_FRONT = -2;\nstatic constexpr int ON_SEGMENT = 0;\n\nint ccw(Point a, Point b, Point c){\n    b -= a; c -= a;\n    if(cross(b, c) > EPS) return COUNTER_CLOCKWISE;\n    if(cross(b, c) < -EPS) return CLOCKWISE;\n    if(dot(b, c) < 0) return ONLINE_BACK;\n    if(abs(b) < abs(c)) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\nstruct Segment {\n    Point a, b;\n    Segment(Point x, Point y) : a(x), b(y) {};\n};\n\ndouble distance(Segment l, Point c){\n    if(dot(l.b-l.a, c-l.a) < EPS) return abs(c-l.a);\n    if(dot(l.a-l.b, c-l.b) < EPS) return abs(c-l.b);\n    return abs(cross(l.b-l.a, c-l.a)) / abs(l.a-l.b);\n}\n\nbool intersect(Segment l1, Segment l2){\n    return (ccw(l1.a, l1.b, l2.a)*ccw(l1.a, l1.b, l2.b) <= 0 &&\n            ccw(l2.a, l2.b, l1.a)*ccw(l2.a, l2.b, l1.b) <= 0);\n}\n\nPoint crossPoint(Segment l1, Segment l2){\n    real d1 = abs(cross(l1.b-l1.a, l2.b-l2.a));\n    real d2 = abs(cross(l1.b-l1.a, l1.b-l2.a));\n    if(d1 < EPS && d2 < EPS) return l2.a;\n    return l2.a+(l2.b-l2.a)*d2/d1;\n}\n\nint main() {\n    Point p, q;\n    cin >> p >> q;\n    int Q; cin >> Q;\n    for (int i = 0; i < Q; ++i) {\n        Point r;\n        cin >> r;\n        int ans = ccw(p, q, r);\n        if(ans == COUNTER_CLOCKWISE) puts(\"COUNTER_CLOCKWISE\");\n        if(ans == CLOCKWISE) puts(\"CLOCKWISE\");\n        if(ans == ONLINE_BACK) puts(\"ONLINE_BACK\");\n        if(ans == ONLINE_FRONT) puts(\"ONLINE_FRONT\");\n        if(ans == ON_SEGMENT) puts(\"ON_SEGMENT\");\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define ll long long\n#define INF 1000000005\n#define MOD 1000000007\n#define EPS 1e-10\n#define rep(i,n) for(int i=0;i<n;++i)\n\nusing namespace std;\n\ntypedef pair<int,int>P;\n\nconst int MAX_N = 100005;\n\nint Q;\n\nvoid ccw(P p0,P p1,P p2)\n{\n\tP a = P(p1.first - p0.first,p1.second - p0.second);\n\tP b = P(p2.first - p0.first,p2.second - p0.second);\n\tint dot = a.first*b.first+a.second*b.second;\n\tint cross = a.first*b.second - a.second*b.first;\n\tint na = a.first*a.first+a.second*a.second;\n\tint nb = b.first*b.first+b.second*b.second;\n\tif(cross > EPS){\n\t\tprintf(\"COUNTER_CLOCKWISE\\n\");\n\t}else if(cross < -EPS){\n\t\tprintf(\"CLOCKWISE\\n\");\n\t}else if(dot < -EPS){\n\t\tprintf(\"ONLINE_BACK\\n\");\n\t}else if(na < nb){\n\t\tprintf(\"ONLINE_FRONT\\n\");\n\t}else{\n\t\tprintf(\"ON_SEGMENT\\n\");\n\t}\n}\n\nint main()\n{\n\tP p0,p1,p2;\n\tscanf(\"%d%d%d%d\",&p0.first,&p0.second,&p1.first,&p1.second);\n\tscanf(\"%d\",&Q);\n\trep(i,Q){\n\t\tscanf(\"%d%d\",&p2.first,&p2.second);\n\t\tccw(p0,p1,p2);\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <iterator>\n#include <iomanip>\n#include <cmath>\n#include <vector>\n#include <numeric>\n#include <cstdio>\n#include <bitset>\n#include <map>\n#include <string>\n#include <valarray>\n#include <queue>\n#include <utility>\n#include <functional>\n#include <list>\n\n\nusing namespace std;\n\nconst double ESP = 1E-8;\n\nstruct Point\n{\n    //friends\n    friend Point operator*(double c, const Point & p);\n    friend ostream & operator<<(ostream & os, const Point & p);\n    friend istream & operator>>(istream & is, Point & p);\n    friend double cross(const Point & p1, const Point & p2);\n\n  \n    //members\n    double x, y;\n\n    Point() {};\n    Point(double x, double y): x(x), y(y) {};\n\n    Point operator-(const Point & p) const\n    {\n        // Point difference = {x - p.x, y - p.y};\n        // return difference;\n        return Point(x - p.x, y - p.y);\n    }\n\n    double operator*(const Point & p) const\n    {\n        return x*p.x + y*p.y;\n    }\n\n    Point operator*(double c) const\n    {\n        // Point p = {c*x, c*y};\n        // return p;\n        return Point(c*x, c*y);\n    }\n\n    Point operator+(const Point & p) const\n    {\n        // Point sum = {x+p.x, y+p.y};\n        // return sum;\n        return Point(x+p.x, y+p.y);\n    }\n\n    Point projection(const Point & p1, const Point & p2) const\n    {\n        Point a(*this-p1), b(p2-p1);\n        return (a*b)/(b*b)*b+p1;\n    }\n\n    Point reflection(const Point & p1, const Point & p2) const\n    {\n        return this->projection(p1, p2)*2 - *this;\n    }\n\n};\n\n\n\ndouble norm(const Point & p);\nbool check_clockwise(const Point & p0, const Point & p1, const Point & p2);\nbool check_counter_clockwise(const Point & p0, const Point & p1, const Point & p2);\nbool check_online_back(const Point & p0, const Point & p1, const Point & p2);\nbool check_online_front(const Point & p0, const Point & p1, const Point & p2);\nbool check_on_segment(const Point & p0, const Point & p1, const Point & p2);\n\n\n\nint main()\n{\n    Point p1, p2, p0;\n\n    cin >> p0 >> p1;\n\n    int q;\n    cin >> q;\n\n    string result;\n\n    for (int i = 0; i < q; i++)\n    {\n        cin >> p2;\n        if (check_counter_clockwise(p0, p1, p2))\n            result = \"COUNTER_CLOCKWISE\";\n        else if (check_clockwise(p0, p1, p2))\n            result = \"CLOCKWISE\";\n        else if (check_online_back(p0, p1, p2))\n            result = \"ONLINE_BACK\";\n        else if (check_online_front(p0, p1, p2))\n            result = \"ONLINE_FRONT\";\n        else if (check_on_segment(p0, p1, p2))\n            result = \"ON_SEGMENT\";\n\n        cout << result << endl;\n    }\n\n\n    // vector<string> results(q);\n    // for (int i = 0; i < q; i++)\n    // {\n    //     cin >> p2;\n    //     if (check_counter_clockwise(p0, p1, p2))\n    //         results[i] = \"COUNTER_CLOCKWISE\";\n    //     else if (check_clockwise(p0, p1, p2))\n    //         results[i] = \"CLOCKWISE\";\n    //     else if (check_online_back(p0, p1, p2))\n    //         results[i] = \"ONLINE_BACK\";\n    //     else if (check_online_front(p0, p1, p2))\n    //         results[i] = \"ONLINE_FRONT\";\n    //     else if (check_on_segment(p0, p1, p2))\n    //         results[i] = \"ON_SEGMENT\";\n    // }\n\n    // for (auto x: results)\n    //     cout << x << endl;\n\n}\n\n\n//friends\nPoint operator*(double c, const Point & p)\n{\n    return p*c;\n}\n\nostream & operator<<(ostream & os, const Point & p) \n{\n    os << setprecision(8) << fixed << p.x << ' ' << p.y << endl;\n    return os;\n}\n\nistream & operator>>(istream & is, Point & p)\n{\n    is >> p.x >> p.y;\n    return is;\n}\n\ndouble cross(const Point & p1, const Point & p2)\n{\n    return p1.x*p2.y-p1.y*p2.x;\n}\n\nbool check_counter_clockwise(const Point & p0, const Point & p1, const Point & p2)\n{\n    return cross(p1-p0,p2-p0) > 0;\n}\n\nbool check_clockwise(const Point & p0, const Point & p1, const Point & p2)\n{\n    return cross(p1-p0,p2-p0) < 0;\n}\n\ndouble norm(const Point & p)\n{\n    return sqrt(p*p);\n}\n\nbool check_online_back(const Point & p0, const Point & p1, const Point & p2)\n{\n    Point a(p2-p0), b(p1-p0);\n    double norm_a = norm(a), norm_b = norm(b);\n    return fabs(a*b+norm_a*norm_b)<=ESP && norm_a!=0;\n}\n\n\nbool check_online_front(const Point & p0, const Point & p1, const Point & p2)\n{\n    Point a(p2-p0), b(p1-p0);\n    double norm_a = norm(a), norm_b = norm(b);\n    return fabs(a*b-norm_a*norm_b)<=ESP && norm_a>norm_b && fabs(norm_a-norm_b)>=ESP;\n}\n\n\nbool check_on_segment(const Point & p0, const Point & p1, const Point & p2)\n{\n    Point a(p2-p0), b(p1-p0);\n    double norm_a = norm(a), norm_b = norm(b);\n    return fabs(a*b-norm_a*norm_b)<=ESP && ((norm_a<norm_b && fabs(norm_a-norm_b)>=ESP) || fabs(norm_a-norm_b)<=ESP);\n    // double d1=a*b, d2=norm_a*norm_b, d3=fabs(d1-d2);\n    // bool t1 = d3<=ESP, t2=norm_a<norm_b && fabs(norm_a-norm_b)>=ESP, t3=fabs(norm_a-norm_b)<=ESP;\n    // return t1 &&(t2||t3);\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define r(i,n) for(int i=0;i<n;i++)\nusing namespace std;\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n//CCW??¨///////////////////////////////////\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONELINE_BACK = 2;\nstatic const int ONELINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n/////////////////////////////////////////\nclass Point{\n  public:\n  double x,y;\n  Point(double x=0,double y=0):x(x),y(y){}\n  Point operator + (Point p){return Point(x+p.x,y+p.y);}\n  Point operator - (Point p){return Point(x-p.x,y-p.y);}\n  Point operator * (double a){return Point(a*x,a*y);}\n  Point operator / (double a){return Point(x/a,y/a);}\n\n  bool operator < (const Point &p) const{\n    return x!=p.x?x<p.x:y<p.y;\n  }\n  bool operator == (const Point &p) const{\n    return fabs(x-p.x)<EPS&&fabs(y-p.y)<EPS;\n  }\n};\n/*class Circle{\npublic:\n  Point c;\n  double r;\n  Circle(Point c=Point(),double r=0.0):c(c),r(r){}\n};*/\ntypedef Point vect;\nstruct seg{Point p1,p2;};\n//????????´???\ndouble norm(Point p){return p.x*p.x+p.y*p.y;}\n//??¶??????\ndouble abs(Point p){return sqrt(norm(p));}\n//??????\ndouble dot(Point a,Point b){\n  return a.x*b.x+a.y*b.y;\n}\n//??????\ndouble cross(Point a,Point b){\n  return a.x*b.y-a.y*b.x;\n}\n//??´?????????\nbool C90(seg s1,seg s2){\n  return equals(dot(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\nbool C0(seg s1,seg s2){\n  return equals(cross(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n//?°???±\nPoint projec(seg s,Point p){\n  Point base = s.p2-s.p1;\n  double r=dot(p-s.p1,base) / norm(base);\n  return s.p1+base*r;\n}\n//????°?\nPoint reflec(seg s,Point p){\n  return  p+(projec(s,p)-p)*2.0;\n}\n//2???????????¢\ndouble getDistancePP(Point a,Point b){\n  return abs(a-b);\n}\n//??´??????????????¢(????°?)\ndouble getDistanceLP(seg l,Point p){\n  return abs(cross(l.p2-l.p1,p-l.p1)/abs(l.p2-l.p1));\n}\n//?????????????????¢\ndouble getDistanceSP(seg s,Point p){\n  if(dot(s.p2-s.p1,p-s.p1)<0.0)return abs(p-s.p1);\n  if(dot(s.p1-s.p2,p-s.p2)<0.0)return abs(p-s.p2);\n  return getDistanceLP(s,p);\n}\n//????????????????????¢\n/*double getDistance(seg s1,seg s2){\n  if(intersect(s1,s2))return 0.0;\n  return min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),\n    min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n}*/\n//????¨?????????????????¨??????????\nint CCW(Point p0,Point p1,Point p2){\n  Point a=p1-p0;\n  Point b=p2-p0;\n  if(cross(a,b)>EPS)return COUNTER_CLOCKWISE;\n  if(cross(a,b)<-EPS)return CLOCKWISE;\n  if(dot(a,b)<-EPS)return ONELINE_BACK;\n  if(norm(a)<norm(b))return ONELINE_FRONT;\n  return ON_SEGMENT;\n}\nmain(){\n  int n;\n  seg a,b;\n  cin>>a.p1.x>>a.p1.y>>a.p2.x>>a.p2.y;\n  cin>>n;\n  while(n--){\n    Point c;\n    cin>>c.x>>c.y;\n    int p=CCW(a.p1,a.p2,c);\n    if(p==1)cout<<\"COUNTER_CLOCKWISE\";\n    if(p==-1)cout<<\"CLOCKWISE\";\n    if(p==2)cout<<\"ONELINE_BACK\";\n    if(p==-2)cout<<\"ONELINE_FRONT\";\n    if(!p)cout<<\"ON_SEGMENT\";\n    cout<<endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define ll  long long\n//#define int long long\n#define inf 0x3f3f3f3f\n#define fi first\n#define se second\n#define pb push_back\n#define pa pair<int,int>\n#define mkp(a,b) make_pair(a,b)\nconst int N=2e5+10;\nconst int mod=998244353;\nusing namespace std;\n\nint cross(int x1,int y1,int x2,int y2){return x1*y2-x2*y1;}\nint dot(int x1,int y1,int x2,int y2){return x1*x2+y1*y2;}\nint32_t main()\n{\n   //ios::sync_with_stdio(0); cin.tie(0);cout.tie(0);\n   int x1,y1,x2,y2; scanf(\"%d%d%d%d\",&x1,&y1,&x2,&y2);\n   int q; scanf(\"%d\",&q);\n   while(q--)\n   {\n   \t  int x,y; scanf(\"%d%d\",&x,&y);\n   \t  int p=cross(x-x1,y-y1,x2-x1,y2-y1);\n   \t  if(p<0) puts(\"COUNTER_CLOCKWISE\");\n   \t  else if(p>0) puts(\"CLOCKWISE\");\n   \t  else\n   \t  {\n   \t  \t if(dot(x1-x,y1-y,x2-x,y2-y)<0)  puts(\"ON_SEGMENT\");  \n   \t  \t else if(dot(x-x1,y-y1,x2-x1,y2-y1)<0) puts(\"ONLINE_BACK\");\n   \t  \t else if(dot(x1-x2,y1-y2,x-x2,y-y2)<0) puts(\"ONLINE_FRONT\");\n   \t  \t else  puts(\"ON_SEGMENT\");  \n   \t  }\n   }\nreturn 0;\n}\n/*\n\n*/\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <stack>\n#include <queue>\n#include <deque>\n#include <set>\n#include <map>\n#include <algorithm>\t// require sort next_permutation count __gcd reverse etc.\n#include <cstdlib>\t// require abs exit atof atoi \n#include <cstdio>\t\t// require scanf printf\n#include <functional>\n#include <numeric>\t// require accumulate\n#include <cmath>\t\t// require fabs\n#include <climits>\n#include <limits>\n#include <cfloat>\n#include <iomanip>\t// require setw\n#include <sstream>\t// require stringstream \n#include <cstring>\t// require memset\n#include <cctype>\t\t// require tolower, toupper\n#include <fstream>\t// require freopen\n#include <ctime>\t\t// require srand\n#define rep(i,n) for(int i=0;i<(n);i++)\n#define ALL(A) A.begin(), A.end()\n#define EPS (1e-10)\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int, int> P;\n\ntemplate<class T>\nstruct point{\n\tT x, y;\n\tpoint &operator+=(const point &a ){ x += a.x; y += a.y; }\n\tpoint &operator-=(const point &a ){ x -= a.x; y -= a.y; }\n\tpoint operator+(const point &a )const{ return (point){x+a.x, y+a.y }; }\n\tpoint operator-(const point &a )const{ return (point){x-a.x, y-a.y }; }\n\toperator point<double>()const{ return (point<double>){x, y }; }\n};\n\ntemplate<class T>\npoint<T> operator*(T c, const point<T> &a ){ return (point<T>){c*a.x, c*a.y }; }\npoint<double> &operator/=(point<double> &a, double c ){ a.x /= c; a.y /= c; return a; }\ntemplate<class T>\npoint<double> operator/(const point<T> &a, double c ){ return (point<double>){ a.x/c, a.y/c }; }\n\n//  for real number\nbool operator<(const point<double> &a, const point<double> &b ){\n\treturn (a.x + EPS < b.x || (abs (a.x - b.x ) < EPS && (a.y + EPS < b.y ) ) );\n}\n\nbool operator==(const point<double> &a, const point<double> &b ){\n\treturn abs (a.x - b.x) < EPS && abs (a.y - b.y ) < EPS;\n}\n\nbool operator!=(const point<double> &a, const point<double> &b ){\n\treturn abs (a.x - b.x ) > EPS || abs (a.y - b.y ) > EPS;\n}\n\n// inner product\ntemplate<class T>\nT dot(const point<T> &a, const point<T> &b ){ return a.x*b.x + a.y*b.y; }\n\n// outer product\ntemplate<class T>\nT cross(const point<T> &a, const point<T> &b ){ return a.x*b.y - a.y*b.x; }\n\n// distance between origin(0,0) to point a\ntemplate<class T>\ndouble abs(const point<T> &a ){ return sqrt (a.x*a.x + a.y*a.y ); }\n\ntemplate<class T>\nT abs2(const point<T> &a ){ return a.x*a.x + a.y*a.y; }\n\n\n/*\n\t回転方向\n\n\t説明\n\t\t３点の位置関係を求める\n\t\t(A) 座標値が整数\n\t\t(B) 座標値が実数\n\t引数\n\t\ta : 点\n\t\tb : 点\n\t\tc : 点\n\t戻り値\n\t\ta-b-c の順に反時計回りに回転しているとき CCW\n\t\ta-b-c の順に時計回りに回転しているとき CW\n\t\ta-b-c が同一直線上にあるとき ON\n\t制約\n\t\tなし\n\t計算量\n\t\tO(1)\n\t備考\n\t\t2 点以上が同一の点であれば常に ON を返すことに注意\n\n*/\n\n// (A)\nenum{CCW = 0, CW = 1, ON = 2 };\nint ccw (const point<double> &a, const point<double> &b, const point<double> &c ){\n\tdouble rdir = cross (b-a, c-a );\n\tif (rdir > 0 ) return CCW;\n\tif (rdir < 0 ) return CW;\n\treturn ON;\n}\n\n/*\n\t3点が同一直線上にあるときの処理\n\n\t説明\n\t\t３点の位置関係を求める\n\t引数\n\t\ta : 点\n\t\tb : 点\n\t\tc : 点\n\t戻り値\n\t\tベクトル b - a とベクトル c - a が反対方向のとき ONLINE_BACK\n\t\tベクトル b - a とベクトル c - a が同じ方向で\n\t\tベクトル b - a の延長線上に点 c があるとき ONLINE_FRONT\n\t\t線分 ba の中に 点 c があるとき ON_SEGMENT\n\t制約\n\t\t3点が同一直線上にあるときに限る\n\t計算量\n\t\tO(1)\n\t備考\n\t\t2点 b, c が同一の点であれば、常に ON_SEGMENT を返すことに注意\n*/\nenum{ONLINE_BACK = 0, ONLINE_FRONT = 1, ON_SEGMENT = 2 };\nint on_line (const point<double> &a, const point<double> &b, const point<double> &c ){\n\n\tdouble rcos = dot (b-a, c-a );\n\tif (abs (rcos ) < EPS  ){\t// 内積ゼロ\n\t\tif (abs2 (b-a ) < abs2 (c - a ) )\n\t\t\treturn ONLINE_FRONT;\n\t\telse\n\t\t\treturn ON_SEGMENT;\n\t} // end if\t\t\t\n\n\treturn ONLINE_BACK;\n}\nconst string status[] = { \"COUNTER_CLOCKWISE\", \"CLOCKWISE\", \"ONLINE_BACK\", \"ONLINE_FRONT\", \"ON_SEGMENT\" };\n\nint main()\n{\n\tios_base::sync_with_stdio(0);\n\tpoint<double> p0, p1;\n\tcin >> p0.x >> p0.y >> p1.x >> p1.y;\n\n\tint q; cin >> q;\n\trep (i, q ){\n\t\tint res = -1;\n\t\tpoint<double> p2;\n\t\tcin >> p2.x >> p2.y;\n\t\tif ((res = ccw (p0, p1, p2 ) ) != ON ){\n\t\t\tcout << status[res] << endl;\n\t\t}else{\n\t\t\tres = on_line (p0, p1, p2 );\n\t\t\tcout << status[res+2] << endl;\n\t\t} // end if\n\t} // end rep\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n \n#define EPS (1e-10)\n#define equals(a,b) ( fabs(a-b) < EPS )\n#define PI 3.141592653589793238\n\n// COUNTER CLOCKWISE\nstatic const int CCW_COUNTER_CLOCKWISE = 1;\nstatic const int CCW_CLOCKWISE = -1;\nstatic const int CCW_ONLINE_BACK = 2;\nstatic const int CCW_ONLINE_FRONT = -2;\nstatic const int CCW_ON_SEGMENT = 0;\n\n//Intersect Circle and Circle\nstatic const int ICC_SEPARATE = 4;\nstatic const int ICC_CIRCUMSCRIBE = 3;\nstatic const int ICC_INTERSECT = 2;\nstatic const int ICC_INSCRIBE = 1;\nstatic const int ICC_CONTAIN = 0;\n\nstruct point{\n\tdouble x,y;\n\t//construct\n\tpoint() {} \n\tpoint(double x,double y):x(x),y(y){}\n\t//演算子\n\tpoint operator + (point p) { return point(x+p.x,y+p.y); }\n\tpoint operator - (point p) { return point(x-p.x,y-p.y); }\n\tpoint operator * (double k) { return point(x*k,y*k); }\n\tpoint operator / (double k) { return point(x/k,y/k); }\n\tpoint operator / (point p) { return point( (x*p.x + y*p.y)/p.norm()  , (-x*p.y + y*p.x)/p.norm() ) ; }\n\tbool operator < (point p) { return x!=p.x ? x<p.x : y<p.y; }\n\tbool operator == (point p) { return equals(x,p.x) && equals(y,p.y) ; }\n\t//function\n\tdouble arg() { return atan2(y,x) ; }\n\tdouble norm(){return x*x+y*y; }\n\tdouble abs() { return sqrt(norm() ) ;}\n\tdouble dot(point p) { return p.x*x + p.y*y; }\n\tdouble cross(point p) { return x*p.y - y*p.x; }\n\n\t//input output\n\tvoid input(){cin>>x>>y;}\n\tvoid polar(double r,double theta){ x = r*cos(theta), y= r*sin(theta) ; }\n\tvoid print(){cout<<x<<' '<<y<<endl;};\n\n};\n\nbool sort_x(point a,point b){\n\treturn a.x!=b.x?a.x<b.x:a.y<b.y ;\n}\nbool sort_y(point a,point b){\n\treturn a.y!=b.y?a.y<b.y:a.x<b.x ;\n}\n\ntypedef vector<point> polygon;\n\nstruct segment{\n\tpoint s,t;\n\tsegment() {}\n\tsegment(point s,point t) : s(s),t(t){}\n\tvoid input(){s.input(),t.input(); }\n};\ntypedef segment line;\n\nstruct circle{\n\tpoint c;\n\tdouble r;\n\tcircle() {}\n\tcircle(point c,double r) : c(c),r(r){}\n\n};\n\ndouble norm(point a){\treturn a.norm(); }\ndouble abs(point a){ return a.abs(); }\ndouble dot(point a,point b) { return a.x*b.x + a.y*b.y ; }\ndouble cross(point a,point b) { return a.x * b.y - a.y * b.x ; }\n\npoint orth(point p){ return point(-p.y,p.x); }\n\n//isOrthgonal 垂直\nbool isOrthogonal(point a,point b) { return equals(dot(a,b), 0.0 ) ; }\nbool isOrthogonal(point a,point b,point c,point d) { return isOrthogonal(a-b,c-d) ; }\nbool isOrthogonal(line l1,line l2 ){ return isOrthogonal(l1.t-l1.s,l2.t-l2.s); }\n//isParallel 平行\nbool isParallel(point a,point b) { return equals(cross(a,b), 0.0) ; }\nbool isParallel(point a,point b,point c,point d) { return isParallel(a-b,c-d); }\nbool isParallel(line l1,line l2) { return isParallel(l1.t-l1.s,l2.t-l2.s) ; }\n\npoint project(line l,point p){\n\tpoint base = l.t-l.s;\n\tdouble r = dot(p-l.s,base) / norm(base) ;\n\treturn l.s + base*r;\n}\npoint reflect(line l,point p){\n\treturn p + (project(l,p) - p) *2.0;\n}\n\nint ccw(point p0,point p1,point p2){\n\tpoint a = p1-p0;\n\tpoint b = p2-p0;\n\tif(cross(a,b) > EPS ) return CCW_COUNTER_CLOCKWISE ;\n\tif(cross(a,b) < -EPS ) return CCW_CLOCKWISE;\n\tif(dot(a,b) < -EPS ) return CCW_ONLINE_BACK;\n\tif(a.norm() < b.norm() ) return CCW_ONLINE_FRONT;\n\treturn CCW_ON_SEGMENT;\n}\n\n\nint main(){\n    \tline l;\n\tl.input();\n\tint q;\n\tcin>>q;\n\tfor(int i = 0;i<q;i++){\n\t\tpoint a;\n\t\ta.input();\n\t\tint c = ccw(l.s,l.t,a);\n\t\tif(c==1)cout<<\"COUNTER_CLOCKWISE\"<<endl;\n\t\tif(c==-1)cout<<\"CLOCKWISE\"<<endl;\n\t\tif(c==2)cout<<\"ONLINE_BACK\"<<endl;\n\t\tif(c==-2)cout<<\"ONLINE_FRONT\"<<endl;\n\t\tif(c==0)cout<<\"ON_SEGMENT\"<<endl;\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\nusing namespace std;\n\n#define EPS (1e-10)\nclass P{                    //???\npublic:\n    double x,y;\n    \n    P(double _x=0,double _y=0):x(_x),y(_y){};\n    P operator + (P &p     ){ return P( x+p.x , y+p.y ); }  //??????\n    P operator - (P &p     ){ return P( x-p.x , y-p.y ); }  //??????\n    P operator * (double k ){ return P( x*k   , y*k    ); } //??????\n    P operator / (double k ){ return P( x/k   , y/k    ); } //??????\n    \n    bool operator == (const P &p){ return ( fabs(x-p.x)<EPS && fabs(y-p.y)<EPS ); }\n//    bool operator < (const P &p)const{ return ( x!=p.x ? x<p.x:y<p.y ); }\n    \n    double norm(){ return x*x+y*y; }        //?????????\n    double abs() { return sqrt(norm()); }   //??§??????\n    \n};\nstruct L{P p1,p2;};         //??´???\ntypedef vector<P> Polygon;  //????§???¢\ntypedef P Vector;           //????????????\n\ndouble dot  (Vector a,Vector b){ return a.x*b.x+a.y*b.y; }\ndouble cross(Vector a,Vector b){ return a.x*b.y-a.y*b.x; }\n\nint ccw(P p0,P p1,P p2){    //AOJ_BOOK_P386\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    \n    if( cross(a,b) > EPS  ) return 1 ;      //COUNTER_CLOCKWISE\n    if( cross(a,b) < -EPS ) return -1;      //CLOCKWISE\n    if( dot(a,b)   < -EPS ) return 2;       //ONLINE_BACK\n    if( a.norm()   < b.norm() ) return -2;  //ONLINE_FRONT\n    \n    return 0;                               //ON_SEGMENT;\n}\n\n//??????????????????\nbool intersect(P p1,P p2,P p3,P p4){ return ( ccw(p1,p2,p3)*ccw(p1,p2,p4)<=0 && ccw(p3,p4,p1)*ccw(p3,p4,p2)<=0 ); }\n\n\n\nint main(){\n    int x0,y0,x1,y1;\n    cin>>x0>>y0>>x1>>y1;\n    P P0(x0,y0), P1(x1,y1);\n    \n    int q;\n    cin>>q;\n    for(int i=0;i<q;i++){\n        int x,y;\n        cin>>x>>y;\n        int res = ccw(P0,P1,P(x,y));\n        if(res==1)cout<<\"COUNTER_CLOCKWISE\"<<endl;\n        if(res==-1)cout<<\"CLOCKWISE\"<<endl;\n        if(res==2)cout<<\"ONLINE_BACK\"<<endl;\n        if(res==-2)cout<<\"ONLINE_FRONT\"<<endl;\n        if(res==0)cout<<\"ON_SEGMENT\"<<endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n\nint main(void) {\n  int x1, y1, x2, y2, xp, yp;\n  scanf(\"%d%d%d%d\", &x1, &y1, &x2, &y2);\n  x2 -= x1, y2 -= y1;\n  int q, i;\n  scanf(\"%d\", &q);\n  for(i = 0; i < q; ++i) {\n    scanf(\"%d%d\", &xp, &yp);\n    xp -= x1, yp -= y1;\n    int op = xp * y2 - yp * x2;\n    if(op > 0) printf(\"CLOCKWISE\\n\");\n    else if(op < 0) printf(\"COUNTER_CLOCKWISE\\n\");\n    else {\n      if(xp * x2 < 0 || yp * y2 < 0) printf(\"ONLINE_BACK\\n\");\n      else if((x2 > 0 && x2 >= xp) || (y2 > 0 && y2 >= yp) || (y2 < 0 && y2 <= yp) || (x2 < 0 && x2 <= xp)) printf(\"ON_SEGMENT\\n\");\n      else printf(\"ONLINE_FRONT\\n\");\n    }\n  }\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nconst double EPS = 1e-8;\n\nstruct Point {\n    double x, y;\n    Point() {}\n    Point(double x, double y) : x(x), y(y) {}\n    Point operator+(const Point& p) const { return Point(x + p.x, y + p.y); }\n    Point operator-(const Point& p) const { return Point(x - p.x, y - p.y); }\n    Point operator*(double k) const { return Point(k * x, k * y); }\n    Point operator/(double k) const { return Point(x / k, y / k); }\n};\ndouble dot(const Point& a, const Point& b) { return a.x * b.x + a.y * b.y; }\ndouble cross(const Point& a, const Point& b) { return a.x * b.y - a.y * b.x; }\ndouble norm(const Point& a) { return sqrt(dot(a, a)); }\nPoint rot90(const Point& p) { return Point(p.y, -p.x); } // 時計回りに90度回転 \nostream& operator<<(ostream& os, const Point& p) { return os << \"(\" << p.x << \",\" << p.y << \")\"; }\n\nint ccw(Point a, Point b, Point c){\n    b = b - a; c = c - a;\n    if (cross(b, c) > EPS) return +1;      // a,b,cの順に反時計周り\n    if (cross(b, c) < -EPS) return -1;     // a,b,cの順に時計周り\n    if (dot(b, c) < 0) return +2;          // c--a--b 直線\n    if (norm(b) < norm(c)) return -2;      // a--b--c 直線\n    return 0;                              // a--c--b 直線\n}\n\nistream& operator>>(istream& is, Point& p) { return is >> p.x >> p.y; }\n\nconst char* msg[] = {\n    \"ONLINE_FRONT\",\n    \"CLOCKWISE\",\n    \"ON_SEGMENT\",\n    \"COUNTER_CLOCKWISE\",\n    \"ONLINE_BACK\"\n};\n\nint main() {\n    Point a, b; cin >> a >> b;\n    int Q; cin >> Q;\n    for (int i = 0; i < Q; i++) {\n        Point c; cin >> c;\n        int r = ccw(a, b, c) + 2;\n        cout << msg[r] << endl;\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\n#include<iomanip>\n#include<cmath>\n#include<algorithm>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nstruct Point;\ntypedef Point Vector;\nstruct Segment;\ntypedef Segment Line;\ndouble norm(Point a);\ndouble abs(Point a);\ndouble dot(Vector a, Vector b);\ndouble cross(Vector a, Vector b);\ndouble getDistance(Point a, Point b);\ndouble getDistanceLP(Line l, Point p);\ndouble getDistanceSP(Segment s, Point p);\ndouble getDistance(Segment s1, Segment s2);\nbool isOrthogonal(Vector a, Vector b);\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2);\nbool isOrthogonal(Segment s1, Segment s2);\nbool isParallel(Vector a, Vector b);\nbool isParallel(Point a1, Point a2, Point b1, Point b2);\nbool isParallel(Segment s1, Segment s2);\nint ccw(Point p0, Point p1, Point p2);\nbool intersect(Point p1, Point p2, Point p3, Point p4);\nbool intersect(Segment s1, Segment s2);\nPoint project(Segment s, Point p);\nPoint reflect(Segment s, Point p);\n\nstruct Point{\n    double x, y;\n\n    Point(double x = 0, double y = 0) : x(x), y(y) {}\n\n    Point operator + (Point p){ return Point(x+p.x, y+p.y); }\n    Point operator - (Point p){ return Point(x-p.x, y-p.y); }\n    Point operator * (double a){ return Point(a*x, a*y); }\n    Point operator / (double a){ return Point(x/a, y/a); }\n\n    double abs() { return sqrt(norm()); }\n    double norm() { return x*x + y*y; }\n\n    bool operator < (const Point &p) const{\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point &p) const{\n        return fabs(x-p.x) < EPS && fabs(y-p.y) < EPS;\n    }\n};\n\ntypedef Point Vector;\n\n\nstruct Segment{\n    Point p1, p2;\n};\n\ntypedef Segment Line;\n\n\ndouble norm(Point a){\n    return a.x * a.x + a.y * a.y;\n}\n\ndouble abs(Point a){\n    return sqrt(norm(a));\n}\n\ndouble dot(Vector a, Vector b){\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b){\n    return a.x * b.y - a.y * b.x;\n}\n\ndouble getDistance(Point a, Point b){\n    return abs(a - b);\n}\n\ndouble getDistanceLP(Line l, Point p){\n    return abs(cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1));\n}\n\ndouble getDistanceSP(Segment s, Point p){\n    if(dot(s.p2-s.p1, p-s.p1) < 0.0)    return abs(p-s.p1);\n    if(dot(s.p1-s.p2, p-s.p2) < 0.0)    return abs(p-s.p2);\n    return getDistanceLP(s, p);\n}\n\ndouble getDistance(Segment s1, Segment s2){\n    if(intersect(s1, s2))   return 0.0;\n    return min({getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2), \n                getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)});\n}\n\n\nbool isOrthogonal(Vector a, Vector b){\n    return equals(dot(a, b), 0.0);\n}\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2){\n    return isOrthogonal(a1-a2, b1-b2);\n}\nbool isOrthogonal(Segment s1, Segment s2){\n    return equals(dot(s1.p2-s1.p1, s2.p2-s2.p1), 0.0);\n}\nbool isParallel(Vector a, Vector b){\n    return equals(cross(a, b), 0.0);\n}\nbool isParallel(Point a1, Point a2, Point b1, Point b2){\n    return isParallel(a1-a2, b1-b2);\n}\nbool isParallel(Segment s1, Segment s2){\n    return equals(cross(s1.p2-s1.p1, s2.p2-s2.p1), 0.0);\n}\n\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;   // p2->p0->p1\nstatic const int ONLINE_FRONT = -2; // p0->p1->p2\nstatic const int ON_SEGMENT = 0;    // p0->p2->p1\n\nint ccw(Point p0, Point p1, Point p2){\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if(cross(a, b) > EPS)   return COUNTER_CLOCKWISE;\n    if(cross(a, b) < -EPS)  return CLOCKWISE;\n    if(dot(a, b) < -EPS)    return ONLINE_BACK;\n    if(norm(a) < norm(b))   return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\nbool intersect(Point p1, Point p2, Point p3, Point p4){\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n            ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\nbool intersect(Segment s1, Segment s2){\n    return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\nPoint project(Segment s, Point p){\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / norm(base);\n    return s.p1 + base * r;\n}\n\nPoint reflect(Segment s, Point p){\n    return p + (project(s, p) - p) * 2.0;\n}\n\n\n\nint main(){\n    double a, b, c, d;\n    cin >> a >> b >> c >> d;\n    Point p0(a, b), p1(c, d);\n\n    int q;\n    cin >> q;\n\n    while(q-- > 0){\n        double x, y;\n        cin >> x >> y;\n        int res = ccw(p0, p1, Point(x,y));\n        if(res == 1)    cout << \"COUNTER_CLOCKWISE\" << endl;\n        if(res == -1)   cout << \"CLOCKWISE\" << endl;\n        if(res == 2)    cout << \"ONLINE_BACK\" << endl;\n        if(res == -2)   cout << \"ONLINE_FRONT\" << endl;\n        if(res == 0)    cout << \"ON_SEGMENT\" << endl;\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#define loop(i, s, e) for(ll i = s;i < e;i++)\n\n#include <iostream>\n#include <iomanip>\n#include <set>\n#include <vector>\n#include <queue>\n#include <stack>\n#include <utility>\n#include <algorithm>\n#include <map>\n#include <cmath>\n\nusing namespace std;\n\ntypedef long long signed ll;\n\n#define NAN_M 0x800000000000\n\ntemplate<typename T>\nclass Vector2D {\npublic:\n    T x;\n    T y;\n\n    Vector2D() {\n        x = y = 0;\n    }\n\n    Vector2D(T x_, T y_) {\n        x = x_;\n        y = y_;\n    }\n\n    T operator*(const Vector2D<T> *e) {\n        return this->x * e->x + this->y * e->y;\n    }\n\n    Vector2D<T> operator-(const Vector2D<T> *e) {\n        return Vector2D<T>(this->x - e->x, this->y - e->y);\n    }\n\n    Vector2D<T> operator+(const Vector2D<T> *e) {\n        return Vector2D<T>(this->x + e->x, this->y + e->y);\n    }\n\n    T operator*(const Vector2D<T> e) {\n        return this->x * e.x + this->y * e.y;\n    }\n\n    Vector2D<T> operator-(const Vector2D<T> e) {\n        return Vector2D<T>(this->x - e.x, this->y - e.y);\n    }\n\n    Vector2D<T> operator+(const Vector2D<T> e) {\n        return Vector2D<T>(this->x + e.x, this->y + e.y);\n    }\n\n    Vector2D<T> operator*(const T r) {\n        return Vector2D<T>(this->x * r, this->y * r);\n    }\n\n    Vector2D<T> operator/(const T r) {\n        return Vector2D<T>(this->x / r, this->y / r);\n    }\n\n    double abs() {\n        return sqrt(x * x + y * y);\n    }\n\n    T abs2() {\n        return x * x + y * y;\n    }\n\n    T cross(Vector2D<T> e) {\n        if(x * e.y >= y * e.x) return (x * e.y) - (y * e.x);\n        else return (y * e.x) - (x * e.y);\n    }\n\n    double cos(Vector2D<T> e) {\n        if((e.abs() * abs()) == 0) return NAN_M;\n        return (e * (*this)) / (e.abs() * abs());\n    }\n\n    double sin(Vector2D<T> e) {\n        if((e.abs() * abs()) == 0) return NAN_M;\n        return ((x * e.y) - (y * e.x)) / (e.abs() * abs());\n    }\n};\n\ntypedef Vector2D<double> vdd;\n\ndouble dist__(double x0, double y0, double x1, double y1, double xx, double yy) {\n    int b = 0;\n    vdd p[3] = {vdd(x0, y0), vdd(x1, y1), vdd(xx, yy)};\n    if (((p[0] - p[1]) * (p[2] - p[1])) < 0) b = -1;\n    if (((p[1] - p[0]) * (p[2] - p[0])) < 0) b = 1;\n    if (b == 1) return (p[2] - p[0]).abs();\n    if (b == -1) return (p[2] - p[1]).abs();\n    return (p[1] - p[0]).cross(p[2] - p[0]) / (p[1] - p[0]).abs();\n}\n\ndouble dist(double x0, double y0, double x1, double y1, double xx, double yy){\n    double res = dist__(x0,y0,x1,y1,xx,yy);\n    return res;\n}\nint main() {\n    int q;\n    vdd base,p;\n    cin >> base.x >> base.y >> p.x >> p.y;\n    cin >> q;\n    loop(i, 0, q) {\n        vdd z;\n        cin >> z.x >> z.y;\n        double cos = (p-base).cos(z-base);\n        double sin = (p-base).sin(z-base);\n        double cosr = (base-p).cos(z-p);\n        if(cos == NAN_M || cosr == NAN_M) cout << \"ON_SEGMENT\" << endl;\n        else if(abs(cos - 1) < 0.00000001 && abs(cosr - 1) < 0.00000001) cout << \"ON_SEGMENT\" << endl;\n        else if(abs(cos - 1) < 0.00000001)\n            cout << \"ONLINE_FRONT\" << endl;\n        else if(abs(cos + 1) < 0.00000001) cout << \"ONLINE_BACK\" << endl;\n        else if(sin < 0)\n            cout << \"CLOCKWISE\" << endl;\n        else if(sin > 0) cout << \"COUNTER_CLOCKWISE\" << endl;\n        else cout << \"ON_SEGMENT\" << endl;\n    }\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\n\nusing namespace std;\n\nstatic const int CONTOUR_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a)-(b)) < EPS)\n\nclass Point{\npublic:\n\tdouble x, y;\n\tPoint(double _x = 0, double _y = 0) :x(_x), y(_y){};\n\n\tPoint operator+(const Point &p){ return Point(x + p.x, y + p.y); }\n\tPoint operator-(const Point &p){ return Point(x - p.x, y - p.y); }\n\tPoint operator*(const Point &p){ return Point(x * p.x, y * p.y); }\n\tPoint operator*(double k){ return Point(x * k, y * k); }\n\tPoint operator/(const Point &p){ return Point(x / p.x, y / p.y); }\n\n\tdouble norm() { return x*x + y*y; }\n\tdouble abs() { return sqrt(norm()); }\n\n\tbool operator<(const Point &p) const{\n\t\treturn (x != p.x) ? x < (p.x) : (y < p.y);\n\t}\n\n\tbool operator==(const Point &p){\n\t\treturn equals(x, p.x) && equals(y, p.y);\n\t}\n};\n\ntypedef Point Vector;\nstruct Segment{\n\tPoint p1, p2;\n};\n\ndouble dot(Vector a, Vector b){\n\tdouble res = a.x*b.x + a.y*b.y;\n\treturn res;\n}\n\ndouble cross(Vector a, Vector b){\n\tdouble res = a.x*b.y - a.y*b.x;\n\treturn res;\n}\n\nbool isOrthogonal(Vector a, Vector b){\n\treturn equals(dot(a, b), 0.0);\n}\n\nbool isParallel(Vector a, Vector b){\n\treturn equals(cross(a, b), 0.0);\n}\n\nPoint project(Segment s, Point p){\n\tVector base = s.p2 - s.p1;\n\tVector v = p - s.p1;\n\tdouble l = dot(v, base) / base.norm();\n\treturn s.p1 + base * l;\n}\n\nint ccw(Point p0, Point p1, Point p2){\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\n\tif (cross(a, b) < 0) return CLOCKWISE;\n\tif (cross(a, b) > 0) return CONTOUR_CLOCKWISE;\n\tif (dot(a, b) < 0) return ONLINE_BACK;\n\tif (a.norm() > b.norm()) return ON_SEGMENT;\n\treturn ONLINE_FRONT;\n}\n\n\nint main(){\n\tPoint p0, p1, p2;\n\tcin >> p0.x >> p0.y >> p1.x >> p1.y;\n\tint n; cin >> n;\n\tfor (int i = 0; i < n; ++i){\n\t\tcin >> p2.x >> p2.y;\n\t\tint res = ccw(p0, p1, p2);\n\t\tswitch (res)\n\t\t{\n\t\tcase CLOCKWISE:\n\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\t\tbreak;\n\t\tcase CONTOUR_CLOCKWISE:\n\t\t\tcout << \"CONTOUR_CLOCKWISE\" << endl;\n\t\t\tbreak;\n\t\tcase ONLINE_FRONT:\n\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t\tbreak;\n\t\tcase ONLINE_BACK:\n\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t\tbreak;\n\t\tcase ON_SEGMENT:\n\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <complex>\n#include <string>\n#define x real() \n#define y imag() \nusing namespace std;\ntypedef complex <double> point;\ntypedef complex<double> vectol;\n\ndouble dot(point a,point b){\n  return a.x*b.x+a.y*b.y;\n}\n\ndouble cross(point a,point b){\n  return a.x*b.y-a.y*b.x;\n}\n\nstring ccw(point a,point b,point c){\n  point d = b-a;\n  point e = c-a;\n  if(cross(d,e)>0) return \"COUNTER_CLOCKWISE\";\n  if(cross(d,e)<0) return \"CLOCKWISE\";\n  if(dot(d,e)<0) return \"ONFLINE_BACK\";\n  if(abs(d) < abs(e)) return \"ONLINE_FRONT\";\n  return \"ON_SEGMENT\";\n}\n\nint main() {\n  double x0,y0,x1,y1;\n  cin>>x0>>y0>>x1>>y1;\n  point a = point( x0, y0);\n  point b = point( x1, y1);\n  int n;\n  cin >> n;\n  for(int i=0;i<n;i++){\n    cin >> x0 >> y0;\n    cout << ccw(a,b,point(x0,y0)) <<endl;\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <math.h>\n#include <algorithm>\nusing namespace std;\n\nint main(){\n\tdouble x1,x2,xp,y1,y2,yp1,yp,naiseki,norm1,norm2,gaiseki;\n\tint q;\n\n\tscanf(\"%lf %lf %lf %lf\",&x1,&y1,&x2,&y2);\n\tscanf(\"%d\",&q);\n\n\tfor(int i=0; i < q; i++){\n\t\tscanf(\"%lf %lf\",&xp,&yp);\n\t\tnorm1 = sqrt((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1));\n\t\tnorm2 = sqrt((xp-x1)*(xp-x1)+(yp-y1)*(yp-y1));\n\t\tnaiseki = (xp-x1)*(x2-x1)+(yp-y1)*(y2-y1);\n\t\tgaiseki = (x2-x1)*(yp-y1)-(xp-x1)*(y2-y1);\n\t\tif(fabs(naiseki/(norm1*norm2)+1) < 0.00000001){\n\t\t\tprintf(\"ONLINE_BACK\\n\");\n\t\t}else if(fabs(naiseki-norm1*norm2)< 0.00000001){\n\t\t\tif(norm1 >= norm2){\n\t\t\t\tprintf(\"ON_SEGMENT\\n\");\n\t\t\t}else{\n\t\t\t\tprintf(\"ONLINE_FRONT\\n\");\n\t\t\t}\n\t\t}else if(gaiseki > 0){\n\t\t\tprintf(\"COUNTER_CLOCKWISE\\n\");\n\t\t}else{\n\t\t\tprintf(\"CLOCKWISE\\n\");\n\t\t}\n\t}\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define TemplateVersion \"3.4.0\"\n// Useful Marcos\n//====================START=====================\n// Compile use C++11 and above\n#ifdef LOCAL\n#define debug(args...)                           \\\n    {                                            \\\n        string _s = #args;                       \\\n        replace(_s.begin(), _s.end(), ',', ' '); \\\n        stringstream _ss(_s);                    \\\n        istream_iterator<string> _it(_ss);       \\\n        err(_it, args);                          \\\n    }\nvoid err(istream_iterator<string> it)\n{\n}\ntemplate <typename T, typename... Args>\nvoid err(istream_iterator<string> it, T a, Args... args)\n{\n    cerr << *it << \" = \" << a << endl;\n    err(++it, args...);\n}\n#define MSG cout << \"Finished\" << endl\n#else\n#define debug(args...)\n#define MSG\n#endif\n#if __cplusplus >= 201703L\ntemplate <typename... Args>\nvoid readln(Args &... args)\n{\n    ((cin >> args), ...);\n}\ntemplate <typename... Args>\nvoid writeln(Args... args)\n{\n    ((cout << args << \" \"), ...);\n    cout << endl;\n}\n#elif __cplusplus >= 201103L\nvoid readln()\n{\n}\ntemplate <typename T, typename... Args>\nvoid readln(T &a, Args &... args)\n{\n    cin >> a;\n    readln(args...);\n}\nvoid writeln()\n{\n    cout << endl;\n}\ntemplate <typename T, typename... Args>\nvoid writeln(T a, Args... args)\n{\n    cout << a << \" \";\n    writeln(args...);\n}\n#endif\n#if __cplusplus >= 201103L\n#define FOR(_i, _begin, _end) for (auto _i = _begin; _i < _end; _i++)\n#define FORR(_i, _begin, _end) for (auto _i = _begin; _i > _end; _i--)\n#else\n#define FOR(_i, _begin, _end) for (int _i = (int)_begin; _i < (int)_end; _i++)\n#define FORR(_i, _begin, _end) for (int _i = (int)_begin; _i > (int)_end; _i--)\n#define nullptr NULL\n#endif\n#if __cplusplus >= 201103L\n#define VIS(_kind, _name, _size) \\\n    vector<_kind> _name(_size);  \\\n    for (auto &i : _name)        \\\n        cin >> i;\n#else\n#define VIS(_kind, _name, _size)    \\\n    vector<_kind> _name;            \\\n    _name.resize(_size);            \\\n    for (int i = 0; i < _size; i++) \\\n        cin >> _name[i];\n#endif\n// alias\n#define mp make_pair\n#define pb push_back\n#define eb emplace_back\n#define all(x) (x).begin(), (x).end()\n#define tcase() \\\n    int T;      \\\n    cin >> T;   \\\n    FOR(kase, 1, T + 1)\n// Swap max/min\ntemplate <typename T>\nbool smax(T &a, const T &b)\n{\n    if (a > b)\n        return false;\n    a = b;\n    return true;\n}\ntemplate <typename T>\nbool smin(T &a, const T &b)\n{\n    if (a < b)\n        return false;\n    a = b;\n    return true;\n}\n// ceil divide\ntemplate <typename T>\nT cd(T a, T b)\n{\n    return (a + b - 1) / b;\n}\n// min exchange\ntemplate <typename T>\nbool se(T &a, T &b)\n{\n    if (a < b)\n        return false;\n    swap(a, b);\n    return true;\n}\n// A better MAX choice\nconst int INF = 0x3f3f3f3f;\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int, int> pii;\ntypedef vector<int> vi;\ntypedef vector<ll> vll;\ntypedef set<int> si;\ntypedef vector<string> cb;\n//====================END=====================\n\n// Constants here\nconst double EPS = 1e-8;\nconst double PI = acos(-1);\nconst double FAC = 1e-18;\n\ntypedef double db;\n\nint sgn(db x)\n{\n    if (abs(x) < EPS)\n        return 0;\n    if (x < 0)\n        return -1;\n    return 1;\n}\n\ninline db sqr(db x) { return x * x; }\n\n// Point/Vector\nstruct Point\n{\n    db x, y;\n\n    Point() : x(0.0), y(0.0) {}\n\n    Point(db _x, db _y) : x(_x), y(_y) {}\n\n    bool operator==(const Point &p)\n    {\n        return sgn(x - p.x) == 0 && sgn(y - p.y) == 0;\n    }\n\n    bool operator<(const Point &p)\n    {\n        int c = sgn(x - p.x);\n        if (c)\n            return c == -1;\n        return sgn(y - p.y) == -1;\n    }\n\n    Point operator+(const Point &p) { return Point(x + p.x, y + p.y); }\n    Point operator-(const Point &p) { return Point(x - p.x, y - p.y); }\n    Point operator*(db d) { return Point(x * d, y * d); }\n    Point operator/(db d) { return Point(x / d, y / d); }\n\n    db operator^(const Point &p) { return x * p.y - y * p.x; }\n    db operator*(const Point &p) { return x * p.x + y * p.y; }\n\n    db dis(const Point &p) { return (*this - p).len(); }\n    db alpha() { return atan2(y, x); }\n\n    Point unit() { return *this / len(); }\n    Point scale(db r) { return unit() * r; }\n\n    Point rotCC() { return Point(-y, x); }\n    Point rotCL() { return Point(y, -x); }\n\n    Point rot(Point p, db angle)\n    {\n        Point v = *this - p;\n        db c = cos(angle), s = sin(angle);\n        return Point(p.x + v.x * c - v.y * s, p.y + v.x * s + v.y * c);\n    }\n\n    db len() { return hypot(x, y); }\n    db len2() { return x * x + y * y; }\n\n    db rad(Point a, Point b)\n    {\n        Point ap = a - *this, bp = b - *this;\n        return abs(atan2(abs(ap ^ bp), ap * bp));\n    }\n\n    // Point P,A,B\n    // -2 -> B is at back of PA\n    // -1 -> PB is on the clock-wise side of PA\n    // 0 -> B is on PA\n    // 1 -> PB is on the counter clock-wise side of PA\n    // 2 -> B is at the front of PA\n    int relation(Point a, Point b)\n    {\n        Point p = *this;\n        if (sgn((a - p) ^ (b - p)) > 0)\n            return 1;\n        if (sgn((a - p) ^ (b - p)) < 0)\n            return -1;\n        if (sgn((a - p) * (b - p)) < 0)\n            return -2;\n        if (sgn((p - a) * (b - a)) < 0)\n            return 2;\n        return 0;\n    }\n\n    void read() { cin >> x >> y; }\n    void write(char trail = ' ') { cout << x << ' ' << y << trail; }\n    void Debug() { cerr << \"Point: (\" << x << \", \" << y << \")\\n\"; }\n};\n\n// Line\nstruct Line\n{\n    Point s, e;\n\n    Line(){};\n\n    Line(Point _s, Point _e) : s(_s), e(_e) {}\n\n    Line(Point p, db angle)\n    {\n        s = p;\n        if (sgn(angle - PI / 2))\n            e = (s + Point(1, tan(angle)));\n        else\n            e = (s + Point(0, 1));\n    }\n\n    //ax+by+c=0\n    Line(db a, db b, db c)\n    {\n        if (sgn(a) == 0)\n        {\n            s = Point(0, -c / b);\n            e = Point(1, -c / b);\n        }\n        else if (sgn(b) == 0)\n        {\n            s = Point(-c / a, 0);\n            e = Point(-c / a, 1);\n        }\n        else\n        {\n            s = Point(0, -c / b);\n            e = Point(1, -(c + a) / b);\n        }\n    }\n\n    db len() { return s.dis(e); }\n    db angle()\n    {\n        db ans = atan2(e.y - s.y, e.x - s.x);\n        if (sgn(ans) == -1)\n            ans += PI;\n        if (sgn(ans - PI) == 0)\n            ans -= PI;\n        return ans;\n    }\n\n    int relation(Point p)\n    {\n        return s.relation(e, p);\n    }\n\n    bool parallel(Line l) { return sgn((e - s) ^ (l.e - l.s)) == 0; }\n\n    // 0 -> Not Intersect\n    // 1 -> Informal\n    // 2 -> Formal Intersection\n    int crossSS(Line l)\n    {\n        int d1 = sgn((e - s) ^ (l.s - s));\n        int d2 = sgn((e - s) ^ (l.e - s));\n        int d3 = sgn((l.e - l.s) ^ (s - l.s));\n        int d4 = sgn((l.e - l.s) ^ (e - l.s));\n        if ((d1 ^ d2) == -2 && (d3 ^ d4) == -2)\n            return 2;\n        return (d1 == 0 && sgn((l.s - s) * (l.s - e)) <= 0) ||\n               (d2 == 0 && sgn((l.e - s) * (l.e - e)) <= 0) ||\n               (d3 == 0 && sgn((s - l.s) * (s - l.e)) <= 0) ||\n               (d4 == 0 && sgn((e - l.s) * (e - l.e)) <= 0);\n    }\n\n    // 0 -> Not Intersect\n    // 1 -> Informal\n    // 2 -> Formal Intersection\n    int crossLS(Line l)\n    {\n        int d1 = sgn((e - s) ^ (l.s - s));\n        int d2 = sgn((e - s) ^ (l.e - s));\n        if ((d1 ^ d2) == -2)\n            return 2;\n        return (d1 == 0 || d2 == 0);\n    }\n\n    // 0 -> Parallel\n    // 1 -> Same\n    // 2 -> Intersect\n    int crossLL(Line l)\n    {\n        if (this->parallel(l))\n            return l.relation(s) == 3;\n        return 2;\n    }\n\n    Point intersec(Line l)\n    {\n        db a1 = (l.e - l.s) ^ (s - l.s);\n        db a2 = (l.e - l.s) ^ (e - l.s);\n        return Point((s.x * a2 - e.x * a1) / (a2 - a1), (s.y * a2 - e.y * a1) / (a2 - a1));\n    }\n\n    db disPL(Point p) { return abs((p - s) ^ (e - s)) / len(); }\n    db disPS(Point p)\n    {\n        if (sgn((p - s) * (e - s)) < 0 || sgn((p - e) * (s - e)) < 0)\n            return min(p.dis(s), p.dis(e));\n        return disPL(p);\n    }\n    db disSS(Line l) { return min(min(disPS(l.s), disPS(l.e)), min(l.disPS(s), l.disPS(e))); }\n\n    Point proj(Point p) { return s + ((e - s) * ((e - s) * (p - s))) / ((e - s).len2()); }\n    Point refl(Point p)\n    {\n        Point q = proj(p);\n        return Point(2 * q.x - p.x, 2 * q.y - p.y);\n    }\n\n    bool operator==(Line l) { return s == l.s && e == l.e; }\n\n    void adjust()\n    {\n        if (e < s)\n            swap(s, e);\n    }\n\n    void read()\n    {\n        s.read();\n        e.read();\n    }\n\n    void Debug() { cerr << \"Line: Start: (\" << s.x << \", \" << s.y << \") End: (\" << e.x << \", \" << e.y << \")\\n\"; }\n};\n\n// Polygon\nstruct Polygon\n{\n    // Functor for sorting by polar angle\n    struct cmp\n    {\n        Point p;\n        cmp(const Point &b) { p = b; }\n        bool operator()(const Point &a, const Point &b)\n        {\n            Point x = a, y = b;\n            int d = sgn((x - p) ^ (y - p));\n            if (!d)\n                return sgn(x.dis(p) - y.dis(p)) > 0;\n            return d > 0;\n        }\n    };\n\n    vector<Point> ps;\n    vector<Line> ls;\n\n    Polygon() {}\n\n    void add(Point p) { ps.push_back(p); }\n\n    int size() { return static_cast<int>(ps.size()); }\n\n    void getLines()\n    {\n        int s = size();\n        for (int i = 0; i < s; i++)\n            ls.push_back(Line(ps[i], ps[(i + 1) % s]));\n    }\n\n    void norm()\n    {\n        Point p = ps[0];\n        for (int i = 1; i < size(); i++)\n        {\n            if (p < ps[i])\n                continue;\n            p = ps[i];\n        }\n        sort(ps.begin(), ps.end(), cmp(p));\n    }\n\n    void getConvexJarvis(Polygon &conv)\n    {\n        sort(ps.begin(), ps.end());\n        conv.ps.resize(2 * size());\n\n        int n = size();\n        for (int i = 0; i < min(2, n); i++)\n            conv.ps[i] = ps[i];\n        if (conv.size() == 2 && (conv.ps[0] == conv.ps[1]))\n            conv.ps.resize(1);\n\n        if (n <= 2)\n            return;\n\n        int top = 1;\n\n        for (int i = 2; i < n; i++)\n        {\n            while (top && sgn((conv.ps[top] - ps[i]) ^ (conv.ps[top - 1] - ps[i])) <= 0)\n                top--;\n            conv.ps[++top] = ps[i];\n        }\n\n        int t = top;\n        conv.ps[++top] = ps[n - 2];\n\n        for (int i = n - 3; i >= 0; i--)\n        {\n            while (top != t && sgn((conv.ps[top] - ps[i]) ^ (conv.ps[top - 1] - ps[i])) <= 0)\n                top--;\n            conv.ps[++top] = ps[i];\n        }\n\n        while (conv.size() > top)\n            conv.ps.pop_back();\n\n        if (top == 2 && (conv.ps[0] == conv.ps[1]))\n            conv.ps.pop_back();\n\n        conv.norm(); // Counter Clock-wise\n    }\n\n    void getConvexWithPointOnLine(Polygon &conv)\n    {\n        int m, n = size();\n        if (n < 3)\n        {\n            for (auto i : ps)\n                conv.add(i);\n            return;\n        }\n\n        vector<Point> &g = conv.ps;\n\n        sort(ps.begin(), ps.end());\n        for (int i = 0; i < n; i++)\n        {\n            while ((m = g.size()) >= 2 && g[m - 2].relation(g[m - 1], ps[i]) <= 0)\n                g.pop_back();\n            g.push_back(ps[i]);\n        }\n\n        int t = g.size();\n\n        for (int i = n - 2; i >= 0; i--)\n        {\n            while ((m = g.size()) > t && g[m - 2].relation(g[m - 1], ps[i]) <= 0)\n                g.pop_back();\n            g.push_back(ps[i]);\n        }\n\n        g.pop_back();\n    }\n\n    // Cannot get the point on the edge\n    void getConvexGraham(Polygon &conv)\n    {\n        norm();\n        int top = 0, n = size();\n        if (n == 1)\n        {\n            conv.add(ps[0]);\n            return;\n        }\n\n        if (n == 2)\n        {\n            conv.add(ps[0]);\n            conv.add(ps[1]);\n            if (conv.ps[0] == conv.ps[1])\n                conv.ps.pop_back();\n            return;\n        }\n\n        conv.ps.resize(size());\n        conv.ps[0] = ps[0];\n        conv.ps[1] = ps[1];\n        top = 2;\n        for (int i = 2; i < n; i++)\n        {\n            while (top > 1 && sgn((conv.ps[top - 1] - conv.ps[top - 2]) ^ (ps[i] - conv.ps[top - 2])) <= 0)\n                top--;\n            conv.ps[top++] = ps[i];\n        }\n\n        while (conv.size() > top)\n            conv.ps.pop_back();\n\n        if (top == 2 && (conv.ps[0] == conv.ps[1]))\n            conv.ps.pop_back();\n    }\n\n    void read(int s)\n    {\n        for (int i = 0; i < s; i++)\n        {\n            Point p;\n            p.read();\n            ps.push_back(p);\n        }\n    }\n\n    void Debug()\n    {\n        cerr << \"Polygon:\\nPoints:\\n\";\n        for (auto i : ps)\n            i.Debug();\n        cerr << \"Lines:\\n\";\n        for (auto i : ls)\n            i.Debug();\n    }\n};\n\n// Circle\nstruct Circle\n{\n    Point p;\n    db r;\n\n    Circle(){};\n\n    Circle(Point _p, db _r) : p(_p), r(_r) {}\n\n    Circle(db x, db y, db _r) : p({x, y}), r(_r) {}\n\n    Circle(Point a, Point b, Point c, bool in = false)\n    {\n        if (!in)\n        {\n            Line u = Line((a + b) / 2, (a + b) / 2 + (b - a).rotCC());\n            Line v = Line((b + c) / 2, (b + c) / 2 + (c - b).rotCC());\n            p = u.intersec(v);\n            r = p.dis(a);\n        }\n        else\n        {\n            Line u, v;\n            db m = atan2(b.y - a.y, b.x - a.x), n = atan2(c.y - a.y, c.x - a.x);\n            u.s = a;\n            u.e = a + Point(cos((n + m) / 2), sin((n + m) / 2));\n            v.s = b;\n            m = atan2(a.y - b.y, a.x - b.x), n = atan2(c.y - b.y, c.x - b.x);\n            v.e = b + Point(cos((n + m) / 2), sin((n + m) / 2));\n            p = u.intersec(v);\n            r = Line(a, b).disPS(p);\n        }\n    }\n\n    bool operator==(const Circle &c) { return p == c.p && sgn(r - c.r) == 0; }\n\n    bool operator<(const Circle &c) { return (p < c.p) || (p == c.p && sgn(r - c.r) < 0); }\n\n    db area() { return PI * r * r; }\n\n    db cir() { return 2 * PI * r; }\n\n    Point on(db ang) { return Point(p.x + r * cos(ang), p.y + r * sin(ang)); }\n\n    // 0 -> Outside\n    // 1 -> On\n    // 2 -> Inside\n    int relationP(Point v)\n    {\n        db dis = v.dis(p);\n        if (sgn(dis - r) < 0)\n            return 2;\n        else if (sgn(dis - r) == 0)\n            return 1;\n        return 0;\n    }\n\n    // The number of intersections\n    int relationS(Line l)\n    {\n        db dis = l.disPS(p);\n        if (sgn(dis - r) < 0)\n            return 2;\n        else if (sgn(dis - r) == 0)\n            return 1;\n        return 0;\n    }\n\n    // The number of intersections\n    int relationL(Line l)\n    {\n        db dis = l.disPL(p);\n        if (sgn(dis - r) < 0)\n            return 2;\n        else if (sgn(dis - r) == 0)\n            return 1;\n        return 0;\n    }\n\n    // 1 -> Inside\n    // 2 -> Internally-tangent\n    // 3 -> Intersect\n    // 4 -> Externally-tangent\n    // 5 -> Disjoint\n    int relationC(Circle c)\n    {\n        db d = p.dis(c.p);\n        if (sgn(d - r - c.r) > 0)\n            return 5;\n        if (sgn(d - r - c.r) == 0)\n            return 4;\n        db l = abs(r - c.r);\n        if (sgn(d - r - c.r) < 0 && sgn(d - l) > 0)\n            return 3;\n        if (sgn(d - l) == 0)\n            return 2;\n        // TODO: Check if this one is necessary\n        // if (sgn(d - l) < 0)\n        return 1;\n    }\n\n    // The return value is the number of intersections\n    int crossC(Circle c, Point &p1, Point &p2)\n    {\n        int re = relationC(c);\n        if (re == 1 || re == 5)\n            return 0;\n        db d = p.dis(c.p), l = (d * d + r * r - c.r * c.r) / (2.0 * d), h = sqrt(r * r - l * l);\n        Point tmp = p + (c.p - p).scale(l);\n        p1 = tmp + (c.p - p).rotCC().scale(h);\n        p2 = tmp + (c.p - p).rotCL().scale(h);\n        if (re == 2 || re == 4)\n            return 1;\n        return 2;\n    }\n\n    // Same as above\n    int crossL(Line l, Point &p1, Point &p2)\n    {\n        if (!this->relationL(l))\n            return 0;\n        Point a = l.proj(p);\n        db d = l.disPL(p);\n        d = sqrt(r * r - d * d);\n        if (sgn(d) == 0)\n        {\n            p1 = a;\n            p2 = a;\n            return 1;\n        }\n        p1 = a + (l.e - l.s).scale(d);\n        p2 = a - (l.e - l.s).scale(d);\n        return 2;\n    }\n\n    int tangent(Point q, Point &u, Point &v)\n    {\n        int x = relationP(q);\n        if (x == 2)\n            return 0;\n        if (x == 1)\n        {\n            u = q + (q - p).rotCC();\n            v = u;\n            return 1;\n        }\n        db d = p.dis(q);\n        db l = r * r / d;\n        db h = sqrt(r * r - l * l);\n        u = p + ((q - p).scale(l) + (q - p).rotCC().scale(h));\n        v = p + ((q - p).scale(l) + (q - p).rotCL().scale(h));\n        return 2;\n    }\n\n    int tangent(Circle c, vector<Point> &u, vector<Point> &v)\n    {\n        if (sgn(r - c.r) < 0)\n            return c.tangent(*this, v, u);\n\n        int ret = relationC(c) - 1;\n        if (!ret || *this == c)\n            return 0;\n        u.clear();\n        v.clear();\n\n        db b = (c.p - p).alpha();\n\n        if (ret == 1 || ret == 3)\n        {\n            u.push_back(on(b));\n            v.push_back(on(b));\n        }\n\n        db ang = acos((r - c.r) / p.dis(c.p));\n\n        if (ret != 1)\n        {\n            u.push_back(on(b + ang));\n            u.push_back(on(b - ang));\n            v.push_back(c.on(b + ang));\n            v.push_back(c.on(b - ang));\n        }\n\n        if (ret == 4)\n        {\n            ang = acos((r + c.r) / p.dis(c.p));\n            u.push_back(on(b + ang));\n            u.push_back(on(b - ang));\n            v.push_back(c.on(PI + b + ang));\n            v.push_back(c.on(PI + b - ang));\n        }\n\n        return ret;\n    }\n\n    // The area of intersecting space\n    // With circle c\n    db area(Circle c)\n    {\n        int re = relationC(c);\n        if (re >= 4)\n            return 0;\n        if (re <= 2)\n            return min(area(), c.area());\n        db d = p.dis(c.p);\n        db hf = (r + c.r + d) / 2.0;\n        db ss = 2 * sqrt(hf * (hf - r) * (hf - c.r) * (hf - d));\n        db a1 = acos((r * r + d * d - c.r * c.r) / (2.0 * r * d));\n        a1 = a1 * r * r;\n        db a2 = acos((c.r * c.r + d * d - r * r) / (2.0 * c.r * d));\n        a2 = a2 * c.r * c.r;\n        return a1 + a2 - ss;\n    }\n\n    // The area of intersecting space\n    // With triangle PAB\n    db area(Point a, Point b)\n    {\n        if (sgn((p - a) ^ (p - b)) == 0)\n            return 0.0;\n        Point q[5];\n        int len = 0;\n        q[len++] = a;\n        Line l(a, b);\n        Point p1, p2;\n        if (crossL(l, q[1], q[2]) == 2)\n        {\n            if (sgn((a - q[1]) * (b - q[1])) < 0)\n                q[len++] = q[1];\n            if (sgn((a - q[2]) * (b - q[2])) < 0)\n                q[len++] = q[2];\n        }\n        q[len++] = b;\n        if (len == 4 && sgn((q[0] - q[1]) * (q[2] - q[1])) > 0)\n            swap(q[1], q[2]);\n        db res = 0;\n        for (int i = 0; i < len - 1; i++)\n        {\n            if (relationP(q[i]) == 0 || relationP(q[i + 1]) == 0)\n            {\n                db arg = p.rad(q[i], q[i + 1]);\n                res += r * r * arg / 2.0;\n            }\n            else\n                res += abs((q[i] - p) ^ (q[i + 1] - p)) / 2.0;\n        }\n        return res;\n    }\n\n    // Two circle whose center are a and b respectivelly\n    static int GetCircle(Point a, Point b, db r, Circle &c1, Circle &c2)\n    {\n        Circle x(a, r), y(b, r);\n        int t = x.crossC(y, c1.p, c2.p);\n        if (!t)\n            return 0;\n        c1.r = c2.r = r;\n        return t;\n    }\n\n    // The circle which tangent is l and point p on it\n    static int GetCircle(Line l, Point p, db r, Circle &c1, Circle &c2)\n    {\n        db dis = l.disPL(p);\n        if (sgn(dis - r * 2) > 0)\n            return 0;\n        if (sgn(dis) == 0)\n        {\n            c1.p = p + ((l.e - l.s).rotCC().scale(r));\n            c2.p = p + ((l.e - l.s).rotCL().scale(r));\n            c1.r = c2.r = r;\n            return 2;\n        }\n        Line u1 = Line((l.s + (l.e - l.s).rotCC().scale(r)), (l.e + (l.e - l.s).rotCC().scale(r)));\n        Line u2 = Line((l.s + (l.e - l.s).rotCL().scale(r)), (l.e + (l.e - l.s).rotCL().scale(r)));\n        Circle cc(p, r);\n        Point p1, p2;\n        if (!cc.crossL(u1, p1, p2))\n            cc.crossL(u2, p1, p2);\n        c1 = Circle(p1, r);\n        if (p1 == p2)\n        {\n            c2 = c1;\n            return 1;\n        }\n        c2 = Circle(p2, r);\n        return 2;\n    }\n\n    // u and v are the common tangent of the four circles\n    static int GetCircle(Line u, Line v, db r, Circle &c1, Circle &c2, Circle &c3, Circle &c4)\n    {\n        if (u.parallel(v))\n            return 0;\n        Line u1 = Line(u.s + (u.e - u.s).rotCC().scale(r), u.e + (u.e - u.s).rotCC().scale(r));\n        Line u2 = Line(u.s + (u.e - u.s).rotCL().scale(r), u.e + (u.e - u.s).rotCL().scale(r));\n        Line v1 = Line(v.s + (v.e - v.s).rotCC().scale(r), v.e + (v.e - v.s).rotCC().scale(r));\n        Line v2 = Line(v.s + (v.e - v.s).rotCL().scale(r), v.e + (v.e - v.s).rotCL().scale(r));\n        c1.r = c2.r = c3.r = c4.r = r;\n        c1.p = u1.intersec(v1);\n        c2.p = u1.intersec(v2);\n        c3.p = u2.intersec(v1);\n        c4.p = u2.intersec(v2);\n        return 4;\n    }\n\n    // Tangent with circle cx and cy\n    static int GetCircle(Circle cx, Circle cy, db r, Circle &c1, Circle &c2)\n    {\n        Circle x(cx.p, r + cx.r), y(cy.p, r + cy.r);\n        int t = x.crossC(y, c1.p, c2.p);\n        if (!t)\n            return 0;\n        c1.r = c2.r = r;\n        return t;\n    }\n\n    void read()\n    {\n        p.read();\n        cin >> r;\n    }\n\n    void Debug() { cerr << \"Circle: Center: (\" << p.x << \", \" << p.y << \") Radius: \" << r << '\\n'; }\n};\n\n// Pre-Build Function\ninline void build()\n{\n}\n\n// Actual Solver\ninline void solve()\n{\n    Line l;\n    l.read();\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        Point p;\n        p.read();\n        int re = l.relation(p);\n        if (re == 1)\n            cout << \"COUNTER_CLOCKWISE\\n\";\n        else if (re == -1)\n            cout << \"CLOCKWISE\\n\";\n        else if (re == -2)\n            cout << \"ONLINE_BACK\\n\";\n        else if (re == 2)\n            cout << \"ONLINE_FRONT\\n\";\n        else\n            cout << \"ON_SEGMENT\\n\";\n    }\n}\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n    cout.tie(nullptr);\n\n#ifdef LOCAL\n    clock_t _begin = clock();\n#endif\n\n    build();\n    solve();\n\n#ifdef LOCAL\n    cerr << \"Time elapsed: \" << (double)(clock() - _begin) * 1000 / CLOCKS_PER_SEC << \"ms.\" << endl;\n#endif\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define r(i,n) for(int i=0;i<n;i++)\nusing namespace std;\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n//CCW??¨///////////////////////////////////\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONELINE_BACK = 2;\nstatic const int ONELINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n/////////////////////////////////////////\nclass Point{\n  public:\n  double x,y;\n  Point(double x=0,double y=0):x(x),y(y){}\n  Point operator + (Point p){return Point(x+p.x,y+p.y);}\n  Point operator - (Point p){return Point(x-p.x,y-p.y);}\n  Point operator * (double a){return Point(a*x,a*y);}\n  Point operator / (double a){return Point(x/a,y/a);}\n\n  bool operator < (const Point &p) const{\n    return x!=p.x?x<p.x:y<p.y;\n  }\n  bool operator == (const Point &p) const{\n    return fabs(x-p.x)<EPS&&fabs(y-p.y)<EPS;\n  }\n};\n/*class Circle{\npublic:\n  Point c;\n  double r;\n  Circle(Point c=Point(),double r=0.0):c(c),r(r){}\n};*/\ntypedef Point vect;\nstruct seg{Point p1,p2;};\n//????????´???\ndouble norm(Point p){return p.x*p.x+p.y*p.y;}\n//??¶??????\ndouble abs(Point p){return sqrt(norm(p));}\n//??????\ndouble dot(Point a,Point b){\n  return a.x*b.x+a.y*b.y;\n}\n//??????\ndouble cross(Point a,Point b){\n  return a.x*b.y-a.y*b.x;\n}\n//??´?????????\nbool C90(seg s1,seg s2){\n  return equals(dot(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\nbool C0(seg s1,seg s2){\n  return equals(cross(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n//?°???±\nPoint projec(seg s,Point p){\n  Point base = s.p2-s.p1;\n  double r=dot(p-s.p1,base) / norm(base);\n  return s.p1+base*r;\n}\n//????°?\nPoint reflec(seg s,Point p){\n  return  p+(projec(s,p)-p)*2.0;\n}\n//2???????????¢\ndouble getDistancePP(Point a,Point b){\n  return abs(a-b);\n}\n//??´??????????????¢(????°?)\ndouble getDistanceLP(seg l,Point p){\n  return abs(cross(l.p2-l.p1,p-l.p1)/abs(l.p2-l.p1));\n}\n//?????????????????¢\ndouble getDistanceSP(seg s,Point p){\n  if(dot(s.p2-s.p1,p-s.p1)<0.0)return abs(p-s.p1);\n  if(dot(s.p1-s.p2,p-s.p2)<0.0)return abs(p-s.p2);\n  return getDistanceLP(s,p);\n}\n//????????????????????¢\n/*double getDistance(seg s1,seg s2){\n  if(intersect(s1,s2))return 0.0;\n  return min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),\n    min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n}*/\n//????¨?????????????????¨??????????\nint CCW(Point p0,Point p1,Point p2){\n  Point a=p1-p0;\n  Point b=p2-p0;\n  if(cross(a,b)>EPS)return COUNTER_CLOCKWISE;\n  if(cross(a,b)<-EPS)return CLOCKWISE;\n  if(dot(a,b)<-EPS)return ONELINE_BACK;\n  if(norm(a)<norm(b))return ONELINE_FRONT;\n  return ON_SEGMENT;\n}\nmain(){\n  int n;\n  seg a,b;\n  cin>>a.p1.x>>a.p1.y>>a.p2.x>>a.p2.y;\n  cin>>n;\n  while(n--){\n    Point c;\n    cin>>c.x>>c.y;\n    int p=CCW(a.p1,a.p2,c);\n    if(p==1)cout<<\"COUNTER_CLOCKWISE\";\n    if(p==-1)cout<<\"CLOCKWISE\";\n    if(p==2)cout<<\"ONELINE_BACK\";\n    if(p==-2)cout<<\"ONELINE_FRONT\";\n    if(!p)cout<<\"ON_SEGMENT\";\n    cout<<endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "\n#include<iostream>\n#include<vector>\n#include<algorithm>\n#include<string>\n#include<complex>\n#include<cstdio>\n#include<cstdlib>\n#include<ctime>\n#include<queue>\n#include<iomanip>\n#include<bitset>\n#include<utility>\n#include<list>\n#include<map>\n#include<set>\n#include<cstring>\n#include<sstream>\n#include<cctype>\nusing namespace std;\nconst double EPS=1e-8;\nconst double INF=1e9;\ntypedef complex<double>P;\nnamespace std{\n    bool operator<(const P& a,const P& b){\n        return real(a)!=real(b)?real(a)<real(b):imag(a)<imag(b);\n    }\n}\n#define EQ(a,b) (fabs((a)-(b))<EPS)\n#define EQV(a,b) (EQ(real(a),real(b))&&EQ(imag(a),imag(b)))\ndouble cross(const P &a,const P &b){\n    return imag(conj(a)*b);\n}\ndouble dot(const P &a,const P &b){\n    return real(conj(a)*b);\n}\n\nstruct L:public vector<P>{\n    L(const P a,const P b){\n        push_back(a);push_back(b);\n    }\n    L(){}\n};\n\ntypedef vector<P>G;\n\nstruct C{\n    P p;double r;\n    C(const P p_,double r_):p(p_),r(r_){}\n    C(){}\n};\n\nint ccw(P a,P b,P c){\n    b-=a;c-=a;\n    if(cross(b,c)>0)return 1;///counter clockwise\n    if(cross(b,c)<0)return -1;///clockwise\n    if(dot(b,c)<0)return 2;///c--a--b on line\n    if(norm(b)<norm(c))return -2;///a--b--c on line\n    return 0;\n}\nbool orthogonal(P &p,P &q){\n    return EQ(dot(p,q),0.0);\n}\nbool intersectLL(const L &l,const L &m){\n    return abs(cross(l[1]-l[0],m[1]-m[0]))>EPS||///non-parallel\n        abs(cross(l[1]-l[0],m[0]-l[0]))<EPS;///same line\n}\nbool intersectLS(const L &l,const L &s){\n    return cross(l[1]-l[0],s[0]-l[0])*///s[0] is left of l\n        cross(l[1]-l[0],s[1]-l[0])<EPS;///s[1] is right of l\n}\nbool intersectLP(const L &l,const P &p){\n    return abs(cross(l[1]-p,l[0]-p))<EPS;\n}\nbool intersectSS(const L &s,const L &t){\n    return ccw(s[0],s[1],t[0])*ccw(s[0],s[1],t[1])<=0&&\n        ccw(t[0],t[1],s[0])*ccw(t[0],t[1],s[1])<=0;\n}\nbool intersectSP(const L &s,const P &p){\n    return abs(abs(s[0]-p)+abs(s[1]-p)-abs(s[1]-s[0]))<EPS;\n    ///triangle inequality\n}\nP projection(const L &l,const P &p){\n    double t=dot(p-l[0],l[0]-l[1])/norm(l[0]-l[1]);\n    return l[0]+t*(l[0]-l[1]);\n}\nP reflection(const L &l,const P &p){\n    return p+(projection(l,p)-p)*2.0;\n}\ndouble distanceLP(const L &l,const P &p){\n    return abs(p-projection(l,p));\n}\ndouble distanceLL(const L &l,const L &m){\n    return intersectLL(l,m)?0:distanceLP(l,m[1]);\n}\ndouble distanceLS(const L &l,const L &s){\n    if(intersectLS(l,s))return 0;\n    return min(distanceLP(l,s[0]),distanceLP(l,s[1]));\n}\ndouble distanceSP(const L &s,const P &p){\n    const P r=projection(s,p);\n    if(intersectSP(s,r))return abs(r-p);\n    return min(abs(s[0]-p),abs(s[1]-p));\n}\ndouble distanceSS(const L &s,const L &t){\n    if(intersectSS(s,t))return 0;\n    return min(min(distanceSP(s,t[0]),distanceSP(s,t[1])),\n            min(distanceSP(t,s[0]),distanceSP(t,s[1])));\n}\nP crossPoint(const L &l,const L &m){\n    double A=cross(l[1]-l[0],m[1]-m[0]);\n    double B=cross(l[1]-l[0],l[1]-m[0]);\n    if(abs(A)<EPS&&abs(B)<EPS)return m[0];///same line\n    ///if(abs(A)<EPS)assert(false);\n    return m[0]+B/A*(m[1]-m[0]);\n\n}\n\nP extreme(const G &g,const L &l){\n    int k=0;\n    for(int i=1;i<g.size();i++){\n        if(dot(g[i],l[1]-l[0])>dot(g[k],l[1]-l[0]))k=i;\n    }\n    return g[k];\n}\n\nG andrewScan(G s){\n    G u,l;\n    if(s.size()<3)return s;\n    sort(s.begin(),s.end());\n    u.push_back(s[0]);\n    u.push_back(s[1]);\n\n    l.push_back(s[s.size()-1]);\n    l.push_back(s[s.size()-2]);\n\n    for(int i=2;i<s.size();i++){\n        for(int n=u.size();n>=2&&ccw(u[n-2],u[n-1],s[i])!=-1;n--){\n            u.pop_back();\n        }\n        u.push_back(s[i]);\n    }\n\n    for(int i=s.size()-3;i>=0;i--){\n        for(int n=l.size();n>=2&&ccw(l[n-2],l[n-1],s[i])!=-1;n--){\n            l.pop_back();\n        }\n        l.push_back(s[i]);\n    }\n    reverse(l.begin(),l.end());\n    for(int i=u.size()-2;i>=1;i--)l.push_back(u[i]);\n    return l;\n}\n/*\nIN 2\nON 1\nOUT 0\n*/\nint contains(G g,P p){\n    int n=g.size();\n    bool x=false;\n    for(int i=0;i<n;i++){\n        P a=g[i]-p,b=g[(i+1)%n]-p;\n        if(abs(cross(a,b))<EPS&&dot(a,b)<EPS)return 1;\n        if(imag(a)>imag(b))swap(a,b);\n        if(imag(a)<EPS&&EPS<imag(b)&&cross(a,b)>EPS)x=!x;\n    }\n    return (x?2:0);\n}\n\n\nint main(){\n    P a,b;\n    scanf(\"%lf%lf%lf%lf\",&a.real(),&a.imag(),&b.real(),&b.imag());\n    int n;\n    scanf(\"%d\",&n);\n    while(n--){\n        P c;\n        scanf(\"%lf%lf\",&c.real(),&c.imag());\n        int res=ccw(a,b,c);\n        if(res==1)puts(\"COUNTER_CLOCKWISE\");\n        else if(res==-1)puts(\"CLOCKWISE\");\n        else if(res==2)puts(\"ONLINE_BACK\");\n        else if(res==-2)puts(\"ONLINE_FRONT\");\n        else puts(\"ON_SEGMENT\");\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing LD = long double;\n\nstruct vec2 {\n\tLD x, y;\n\tvec2(LD x = 0, LD y = 0) : x(x), y(y) {}\n\tvec2 operator + (const vec2 &rhs) const {\n\t\treturn vec2(x + rhs.x, y + rhs.y);\n\t}\n\tvec2 operator - (const vec2 &rhs) const {\n\t\treturn vec2(x - rhs.x, y - rhs.y);\n\t}\n\tLD operator * (const vec2 &rhs) const {\n\t\treturn x * rhs.x + y * rhs.y;\n\t}\n\tLD operator ^ (const vec2 &rhs) const {\n\t\treturn x * rhs.y - y * rhs.x;\n\t}\n\tvec2 operator * (const LD rhs) const {\n\t\treturn vec2(x * rhs, y * rhs);\n\t}\n\tfriend vec2 operator * (const LD lhs, const vec2 rhs) {\n\t\treturn vec2(lhs * rhs.x, lhs * rhs.y);\n\t}\n\tvec2 operator / (const LD rhs) const {\n\t\treturn vec2(x / rhs, y / rhs);\n\t}\n\tLD norm2() const {\n\t\treturn x * x + y * y;\n\t}\n\tLD norm() const {\n\t\treturn std::sqrt(norm2());\n\t}\n\tfriend std::istream& operator >> (std::istream &cin, vec2 &v) {\n\t\treturn cin >> v.x >> v.y;\n\t}\n\tfriend std::ostream& operator << (std::ostream &cout, const vec2 v) {\n\t\treturn cout << std::fixed << std::setprecision(10) << v.x << ' ' << std::fixed << std::setprecision(10) << v.y;\n\t}\n};\nint main() {\n\tstd::ios::sync_with_stdio(0), std::cin.tie(0);\n\tvec2 p0, p1, p2; int q;\n\tstd::cin >> p0 >> p1, p1 = p1 - p0;\n\tstd::cin >> q;\n\tfor (int i = 1; i <= q; ++i) {\n\t\tstd::cin >> p2, p2 = p2 - p0;\n\t\tif ((p1 ^ p2) > 0)\n\t\t\tstd::cout << \"COUNTER_CLOCKWISE\\n\";\n\t\telse if ((p1 ^ p2) < 0)\n\t\t\tstd::cout << \"CLOCKWISE\\n\";\n\t\telse if (p1 * p2 < 0)\n\t\t\tstd::cout << \"ONLINE_BACK\\n\";\n\t\telse if (p2.norm2() > p1.norm2())\n\t\t\tstd::cout << \"ONLINE_FRONT\\n\";\n\t\telse\n\t\t\tstd::cout << \"ON_SEGMENT\\n\";\n\t}\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cmath>\n#include <algorithm>\n\nusing namespace std;\nstatic const double eps = 1e-10;\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nbool equals(double a, double b)\n{\n\treturn(fabs(a - b) < eps);\n}\n\nclass Point\n{\npublic:\n\tdouble x, y;\n\tPoint(double x = 0, double y = 0) : x(x), y(y){}\n\n\tPoint operator + (Point p){ return(Point(x + p.x, y + p.y)); }\n\tPoint operator - (Point p){ return(Point(x - p.x, y - p.y)); }\n\tPoint operator * (double a){ return(Point(a * x, a * y)); }\n\tPoint operator / (double a){ return(Point(x / a, y / a)); }\n\n\tdouble abs(){ return(sqrt(norm())); }\n\tdouble norm(){ return(x * x + y * y); }\n\n\tbool operator < (const Point& p) const\n\t{\n\t\treturn(x != p.x ? x < p.x : y < p.y);\n\t}\n\n\tbool operator == (const Point& p) const\n\t{\n\t\treturn(fabs(x - p.x) < eps && fabs(y - p.y) < eps);\n\t}\n};\ntypedef Point Vector;\n\n\nstruct Segment\n{\n\tPoint p1, p2;\n};\ntypedef Segment Line;\n\nclass Circle\n{\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0) : c(c), r(r){}\n};\n\ndouble dot(Vector a, Vector b)\n{\n\treturn(a.x * b.x + a.y * b.y);\n}\n\ndouble cross(Vector a, Vector b)\n{\n\treturn(a.x * b.y - a.y * b.x);\n}\n\nPoint project(Segment s, Point p)\n{\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / base.norm();\n\treturn(s.p1 + base * r);\n}\n\nPoint reflect(Segment s, Point p)\n{\n\treturn(p + (project(s, p) - p) * 2.0);\n}\n\nbool isOrthogonal(Vector a, Vector b)\n{\n\treturn(equals(dot(a, b), 0.0));\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2)\n{\n\treturn(isOrthogonal(a1 - a2, b1 - b2));\n}\n\nbool isOrthogonal(Segment s1, Segment s2)\n{\n\treturn(equals(dot(s1.p2 - s2.p1, s2.p2 - s2.p1), 0.0));\n}\n\nbool isParallel(Vector a, Vector b)\n{\n\treturn(equals(cross(a, b), 0.0));\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2)\n{\n\treturn(isParallel(a1 - a2, b1 - b2));\n}\n\nbool isParallel(Segment s1, Segment s2)\n{\n\treturn(equals(cross(s1.p1 - s1.p1, s2.p2 - s2.p1), 0.0));\n}\n\nint ccw(Point p0, Point p1, Point p2)\n{\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (cross(a, b) > eps)\n\t{\n\t\treturn(COUNTER_CLOCKWISE);\n\t}\n\tif (cross(a, b) < -eps)\n\t{\n\t\treturn(CLOCKWISE);\n\t}\n\tif (dot(a, b) < -eps)\n\t{\n\t\treturn(ONLINE_BACK);\n\t}\n\tif (a.norm() < b.norm())\n\t{\n\t\treturn(ONLINE_FRONT);\n\t}\n\treturn(ON_SEGMENT);\n}\n\nbool intersect(Point p1, Point p2, Point p3, Point p4)\n{\n\treturn(ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 && ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\n\nbool intersect(Segment s1, Segment s2)\n{\n\treturn(intersect(s1.p1, s1.p2, s2.p1, s2.p2));\n}\n\ndouble getDistance(Point a, Point b)\n{\n\treturn((a - b).abs());\n}\n\ndouble getDistanceLP(Line l, Point p)\n{\n\treturn(abs((cross(l.p2 - l.p1, p - l.p1) / (l.p2 - l.p1).abs())));\n}\n\ndouble getDistanceSP(Segment s, Point p)\n{\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0)\n\t{\n\t\treturn((p - s.p1).abs());\n\t}\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0)\n\t{\n\t\treturn((p - s.p2).abs());\n\t}\n\treturn(getDistanceLP(s, p));\n}\n\ndouble getDistance(Segment s1, Segment s2)\n{\n\tif (intersect(s1, s2))\n\t{\n\t\treturn(0.0);\n\t}\n\treturn(min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)), min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2))));\n}\n\nvoid solve()\n{\n\tcin.tie(0);\n\tios::sync_with_stdio(false);\n\n\tPoint p0, p1;\n\tcin >> p0.x >> p0.y >> p1.x >> p1.y;\n\tint q;\n\tcin >> q;\n\tfor (int i = 0; i < q; ++i)\n\t{\n\t\tPoint p2;\n\t\tcin >> p2.x >> p2.y;\n\t\tint res = ccw(p0, p1, p2);\n\t\tif (res == 0)\n\t\t{\n\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t}\n\t\telse if (res == 1)\n\t\t{\n\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t}\n\t\telse if (res == -1)\n\t\t{\n\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\t}\n\t\telse if (res == 2)\n\t\t{\n\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t}\n\t\telse if (res == -2)\n\t\t{\n\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t}\n\t}\n}\n\nint main()\n{\n\tsolve();\n\treturn(0);\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <vector>\n#include <queue>\n#include <map>\n#include <cmath>\n#include <iomanip>\n#include <complex>\nusing namespace std;\n#define REP(i,n) for (int i=0;i<(n);++i)\n#define rep(i,a,b) for(int i=a;i<(b);++i)\ntemplate<class T> inline bool chmin(T &a, T b){ if(a > b) { a = b; return true;} return false;}\ntemplate<class T> inline bool chmax(T &a, T b){ if(a < b) { a = b; return true;} return false;}\nusing ll = long long;\nconstexpr long long INF = 1LL << 62;\nconstexpr int MOD = 1e9 + 7;\nconstexpr double EPS = 1e-10;\n\nusing Point = complex<double>;\nstruct Line {\n    Point s, t;\n    Line(Point s, Point t) : s(s), t(t){}\n};\ndouble dot(Point p, Point q) { return (conj(p) * q).real(); }\ndouble cross(Point p, Point q) { return (conj(p) * q).imag(); }\n\nPoint project(Line l, Point p) { // project p onto line (s,t)\n    return l.s + (l.t - l.s) * dot(p - l.s, l.t - l.s) / norm(l.t - l.s);\n}\n\nPoint reflect(Line l, Point p) {\n    return l.s + conj((p - l.s) / (l.t - l.s)) * (l.t - l.s);\n}\n\nint ccw(Point a, Point b, Point c) {\n    b -= a; c -= a;\n    if(cross(b, c) >  EPS) return +1; // counter-clockwise\n    if(cross(b, c) < -EPS) return -1; // clockwise\n    if(  dot(b, c) < -EPS) return +2; // c--a--b\n    if(abs(b)+EPS < abs(c))return -2; // a--b--c\n    return 0; // a--c--b\n}\n\nint main() {\n    cin.tie(0); ios_base::sync_with_stdio(false);\n    double a,b,c,d;\n    cin >> a >> b >> c >> d;\n    Point p1(a, b), p2(c, d);\n    cout << fixed << setprecision(10);\n\n    int q;\n    cin >> q;\n    for(int i=0; i < q; ++i) {\n        double x,y;\n        cin >> x >> y;\n        int ret = ccw(p1, p2, Point(x, y));\n        switch(ret) {\n            case +1:\n                cout << \"COUNTER_CLOCKWISE\";\n                break;\n            case -1:\n                cout << \"CLOCKWISE\";\n                break;\n            case +2:\n                cout << \"ONLINE_BACK\";\n                break;\n            case -2:\n                cout << \"ONLINE_FRONT\";\n                break;\n            default:\n                cout << \"ON_SEGMENT\";\n        }\n        cout << '\\n';\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n#define EPS (1e-10)\n#define equal(x,y)  (fabs(x-y)<EPS)\nenum Status{\n\tCOUNTER_CLOCKWISE,CLOCKWISE,ONLINE_BACK,ONLINE_FRONT,ON_SEGMENT\n};\nstruct Point{\n\tdouble x,y;\n\tPoint(double _x,double _y): x(_x),y(_y){ }\n\tPoint operator+(const Point & p){\n\t\treturn Point(x+p.x,y+p.y);\n\t}\n\tPoint operator-(const Point & p){\n\t\treturn Point(x-p.x,y-p.y);\n\t}\n\tPoint operator*(double k){\n\t\treturn Point(k*x,k*y);\n\t}\n};\ntypedef Point Vector;\ndouble dot(const Vector &v1,const Vector & v2 ){\n\treturn v1.x*v2.x+v1.y*v2.y;\n}\ndouble cross(const Vector &v1,const Vector & v2){\n\treturn v1.x*v2.y-v1.y*v2.x;\n}\ndouble norm(const Vector & v){\n\treturn dot(v,v);\n}\ndouble abs(const Vector & v){\n\treturn sqrt(norm(v));\n}\nint ccw( Point &p1, Point & p2,  Point & p3){\n\tVector v1=p2-p1,v2=p3-p1;\n\tif(cross(v1,v2)<-EPS) return CLOCKWISE;\n\tif(cross(v1,v2)>EPS) return COUNTER_CLOCKWISE;\n\tif(dot(v1,v2)<-EPS) return ONLINE_BACK;\n\tif(norm(v1)<norm(v2)) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\nint main(){\n\tdouble x1,x2,y1,y2;\n\tint q;\n\tcin>>x1>>y1>>x2>>y2;\n\tcin>>q;\n\tPoint p1(x1,y1),p2(x2,y2);\n\tfor(int i=0;i<q;i++){\n\t\tcin>>x1>>y1;\n\t\tPoint p3(x1,y1);\n\t\tswitch(ccw(p1,p2,p3)){\n\t\t\tcase COUNTER_CLOCKWISE:cout<<\"COUNTER_CLOCKWISE\"<<endl;break;\n\t\t\tcase CLOCKWISE:cout<<\"CLOCKWISE\"<<endl;break;\n\t\t\tcase ONLINE_FRONT:cout<<\"ONLINE_FRONT\"<<endl;break;\n\t\t\tcase ONLINE_BACK:cout<<\"ONLINE_BACK\"<<endl;break;\n\t\t\tcase ON_SEGMENT:cout<<\"ON_SEGMENT\"<<endl;break;\n\t\t}\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nconst double EPS = 1e-10;\nconst double PI = acos(-1.0);\n\nint sign(double x) {  //???????????°???????°???????????¢?\n    return abs(x) < EPS ? 0 : x < 0 ? -1 : 1;\n}\n\nstruct Point { //????????????\n    double x, y;\n    Point(double x=0.0, double y=0.0) : x(x), y(y) {}\n    Point operator + (const Point &rhs) const {  //????????????\n        return Point(x + rhs.x, y + rhs.y);\n    }\n    Point operator - (const Point &rhs) const {  //????????????\n        return Point(x - rhs.x, y - rhs.y);\n    }\n    Point operator * (double p) const {  //???????????\\??????\n        return Point(x * p, y * p);\n    }\n    Point operator / (double p) const {  //???????????\\??????\n        return Point(x / p, y / p);\n    }\n    bool operator < (const Point &rhs) const {  //??????????????????\n        return x < rhs.x || (x == rhs.x && y < rhs.y);\n    }\n    bool operator == (const Point &rhs) const {  //??????????????????\n        return sign(x - rhs.x) == 0 && sign(y - rhs.y) == 0;\n    }\n    void read() {\n        scanf(\"%lf%lf\", &x, &y);\n    }\n    void print() {\n        printf(\"(%.2f, %.2f)\\n\", x, y);\n    }\n};\ntypedef Point Vector;  //???????????????\n\ndouble dot(Vector A, Vector B) {  //??????????§???????????????????????§??????????????§??????????????????????????????????????§????\n    return A.x * B.x + A.y * B.y;\n}\ndouble cross(Vector A, Vector B) {  //??????????§??????????????????????????§???¢???????????¢?§????????????????????????????????????????\n    return A.x * B.y - A.y * B.x;\n}\ndouble polar_angle(Vector A) {  //??????????§?\n    return atan2(A.y, A.x);\n}\ndouble length(Vector A) {  //???????????????????§?\n    return sqrt(dot(A, A));\n}\ndouble angle(Vector A, Vector B) {  //????????¬?§?????????¶??????????§?\n    return acos(dot(A, B)/length(A)/length(B));\n}\nVector rotate(Vector A, double rad) {  //???????????¬????????¶???\n    return Vector(A.x*cos(rad)-A.y*sin(rad), A.x*sin(rad)+A.y*cos(rad));\n    //????????´?????¬????????¶????????????????????¢??¬??????x'=xcos(theta)+ysin(theta), y'=ycos(theta)-xsin(theta)\n}\nVector normal(Vector A) {  //?????????????????????????????????A????????¶??????\n    double len = length(A);\n    return Vector(-A.y/len, A.x/len);\n}\nbool on_seg(Point p, Point a, Point b) {  //???????????¨??????????????????????????????????????????\n    return sign(cross(a-p, b-p)) == 0 && sign(dot(a-p, b-p)) < 0;  //???p????????¨??????ab???\n}\nPoint point_line_proj(Point p, Point a, Point b) {  //?????¨??´??????????????±????????????\n    Vector V = b - a;\n    return a + V * (dot (V, p-a)/dot(V, V));  //???p??°??´???ab????????±\n}\n\nint main() {\n    Point p0, p1;\n    p0.read();\n    p1.read();\n    int q; scanf(\"%d\", &q);\n    while(q --) {\n        Point p2;\n        p2.read();\n        double alpha = cross(p2-p0, p1-p0);\n        if(sign(alpha) > 0) puts(\"CLOCKWISE\");\n        else if(sign(alpha) < 0) puts(\"COUNTER_CLOCKWISE\");\n        else {\n            if(on_seg(p0, p1, p2)) puts(\"ONLINE_BACK\");\n            else if(on_seg(p1, p0, p2)) puts(\"ONLINE_FRONT\");\n            else puts(\"ON_SEGMENT\");\n            \n        }\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <complex>\nusing namespace std;\n\ntypedef complex<int> point;\n\nint dot(point a,point b){\n\t// return (a*conj(b)).real();\n\treturn a.real()*b.real()+a.imag()*b.imag();\n}\n\nint cross(point a,point b){\n\t// return (a*conj(b)).imag();\n\treturn a.real()*b.imag()-a.imag()*b.real();\n}\n\nint main(void){\n\tint x,y;\n\tint q;\n\tcin>>x>>y;\n\tpoint p0(x,y);\n\tcin>>x>>y;\n\tpoint p1(x,y);\n\tpoint p0p1=p1-p0;\n\tcin>>q;\n\twhile(q--){\n\t\tcin>>x>>y;\n\t\tpoint p2(x,y);\n\t\tpoint p0p2=p2-p0;\n\t\tif(cross(p0p1,p0p2)>0)cout<<\"COUNTER_CLOCKWISE\"<<endl;\n\t\telse if(cross(p0p1,p0p2)<0)cout<<\"CLOCKWISE\"<<endl;\n\t\telse if(dot(p0p1,p0p2)<0)cout<<\"ONLINE_BACK\"<<endl;\n\t\telse if(norm(p0p1)<norm(p0p2))cout<<\"ONLINE_FRONT\"<<endl;\n\t\telse cout<<\"ON_SEGMENT\"<<endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#pragma warning(disable : 4267) // \"int n = (unsigned)size\"\n\nusing vi = vector<int>; using vvi = vector<vi>; using vvvi = vector<vvi>;\nusing ll = long long int;\nusing vll = vector<ll>; using vvll = vector<vll>; using vvvll = vector<vvll>;\nusing vd = vector<double>; using vvd = vector<vd>; using vvvd = vector<vvd>;\nusing P = pair<int, int>;\nusing Pll = pair<ll, ll>;\nusing cdouble = complex<double>;\n\nconst double eps = 1e-4;\nconst double INFD = numeric_limits<double>::infinity();\n#define Loop(i, n) for(int i = 0; i < int(n); i++)\n#define Loopll(i, n) for(ll i = 0; i < ll(n); i++)\n#define Loop1(i, n) for(int i = 1; i <= int(n); i++)\n#define Loopll1(i, n) for(ll i = 1; i <= ll(n); i++)\n#define Loopr(i, n) for(int i = int(n) - 1; i >= 0; i--)\n#define Looprll(i, n) for(ll i = ll(n) - 1; i >= 0; i--)\n#define Loopr1(i, n) for(int i = int(n); i >= 1; i--)\n#define Looprll1(i, n) for(ll i = ll(n); i >= 1; i--)\n#define Foreach(buf, container) for(auto buf : container)\n#define Loopdiag(i, j, h, w, sum) for(int i = ((sum) >= (h) ? (h) - 1 : (sum)), j = (sum) - i; i >= 0 && j < (w); i--, j++)\n#define Loopdiagr(i, j, h, w, sum) for(int j = ((sum) >= (w) ? (w) - 1 : (sum)), i = (sum) - j; j >= 0 && i < (h); j--, i++)\n#define Loopdiagsym(i, j, h, w, gap) for (int i = ((gap) >= 0 ? (gap) : 0), j = i - (gap); i < (h) && j < (w); i++, j++)\n#define Loopdiagsymr(i, j, h, w, gap) for (int i = ((gap) > (h) - (w) - 1 ? (h) - 1 : (w) - 1 + (gap)), j = i - (gap); i >= 0 && j >= 0; i--, j--)\n#define Loopitr(itr, container) for(auto itr = container.begin(); itr != container.end(); itr++)\n#define printv(vector) Loop(ex_i, vector.size()) { cout << vector[ex_i] << \" \"; } cout << endl;\n#define printmx(matrix) Loop(ex_i, matrix.size()) { Loop(ex_j, matrix[ex_i].size()) { cout << matrix[ex_i][ex_j] << \" \"; } cout << endl; }\n#define quickio() ios::sync_with_stdio(false); cin.tie(0);\n#define bitmanip(m,val) static_cast<bitset<(int)m>>(val)\n#define Comp(type_t) bool operator<(const type_t &another) const\n#define fst first\n#define snd second\nbool nearlyeq(double x, double y) { return abs(x - y) < eps; }\nbool inrange(ll x, ll t) { return x >= 0 && x < t; }\nbool inrange(vll xs, ll t) { Foreach(x, xs) if (!(x >= 0 && x < t)) return false; return true; }\nint ceillog2(ll x) { int ret = 0;\tx--; while (x > 0) { ret++; x >>= 1; } return ret; }\nll rndf(double x) { return (ll)(x + (x >= 0 ? 0.5 : -0.5)); }\nll floorsqrt(ll x) { ll m = (ll)sqrt((double)x); return m + (m * m <= x ? 0 : -1); }\nll ceilsqrt(ll x) { ll m = (ll)sqrt((double)x); return m + (x <= m * m ? 0 : 1); }\nll rnddiv(ll a, ll b) { return (a / b + (a % b * 2 >= b ? 1 : 0)); }\nll ceildiv(ll a, ll b) { return (a / b + (a % b == 0 ? 0 : 1)); }\nll gcd(ll m, ll n) { if (n == 0) return m; else return gcd(n, m % n); }\nll lcm(ll m, ll n) { return m * n / gcd(m, n); }\n\n/*******************************************************/\n\nstruct point_t {\n\tdouble x, y;\n\tpoint_t operator+(const point_t &p) { return { x + p.x, y + p.y }; }\n\tpoint_t operator-(const point_t &p) { return { x - p.x, y - p.y }; }\n\tpoint_t operator*(const double &c) { return { x * c, y * c }; }\n};\n\n// ax + by + c = 0\nstruct line_t {\n\tdouble a, b, c;\n};\n\npoint_t cross_point(line_t l, line_t m) {\n\tpoint_t ret = { INFD, INFD };\n\tdouble d = l.a * m.b - m.a * l.b;\n\tif (nearlyeq(d, 0)) return ret;\n\tdouble x = l.b * m.c - m.b * l.c;\n\tdouble y = l.a * m.c - m.a * l.c;\n\tret = { x / d, y / -d };\n\treturn ret;\n}\n\n// normal vector = (a, b), passing p\nline_t solve_line(double a, double b, point_t p) {\n\treturn { a, b, -a * p.x - b * p.y };\n}\n\n// t should be radius\npoint_t rot(point_t p, double r) {\n\treturn {\n\t\tcos(r) * p.x - sin(r) * p.y,\n\t\tsin(r) * p.x + cos(r) * p.y\n\t};\n}\n\ndouble abs(point_t p) {\n\treturn sqrt(p.x * p.x + p.y * p.y);\n}\n\n// angle [0, 2PI) of vector p to vector q\ndouble angle(point_t p, point_t q) {\n\tp = p * (1.0 / abs(p));\n\tq = q * (1.0 / abs(q));\n\tdouble r0 = acos(p.x * q.x + p.y * q.y);\n\tdouble r1 = asin(p.x * q.y - p.y * q.x);\n\tif (r1 >= 0) return r0;\n\telse return 2 * M_PI - r0;\n}\n\ndouble dist(line_t l, point_t p) {\n\treturn abs(l.a * p.x + l.b * p.y + l.c)\n\t\t/ sqrt(l.a * l.a + l.b * l.b);\n}\n\n\nint main() {\n\tpoint_t p0, p1;\n\tcin >> p0.x >> p0.y >> p1.x >> p1.y;\n\tint q; cin >> q;\n\tcout << setprecision(20);\n\tLoop(i, q) {\n\t\tpoint_t p2;\n\t\tcin >> p2.x >> p2.y;\n\t\tpoint_t p = p1 - p0;\n\t\tpoint_t q = p2 - p0;\n\t\tif (nearlyeq(abs(p), 0)) {\n\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t}\n\t\telse if (nearlyeq(abs(q), 0)) {\n\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t}\n\t\telse {\n\t\t\tdouble r = angle(p, q);\n\t\t\tif (nearlyeq(r, M_PI)) {\n\t\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t\t}\n\t\t\telse if (nearlyeq(r, 0) || nearlyeq(r, M_PI * 2)) {\n\t\t\t\tif (abs(q) > abs(p)) {\n\t\t\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (r < M_PI) {\n\t\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\t\t}\n\t\t}\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <cmath>\n#include <array>\n\nusing Number = double;\n\nconst Number EPS = 1e-10;\nconst Number INF = 1e10;\nconst Number PI = acos(-1.0);\n\ninline int sign(Number x) { return (x < -EPS) ? -1 : (x > EPS) ? +1 : 0; }\n\n// change between degree and radian\ninline Number to_radian(const Number degree) { return degree * PI / 180.0; }\ninline Number to_degree(const Number radian) { return radian * 180.0 / PI; }\n\n\n/**\n * Point in two dimensional\n */\nclass Point {\npublic:\n    Number x, y;\n\n    Point() {}\n    Point(Number x, Number y) : x(x), y(y) {}\n\n    // Arithmetic operator between points\n    Point operator+(const Point &rhs) const {\n        return Point(this->x + rhs.x, this->y + rhs.y);\n    }\n    Point operator-(const Point &rhs) const {\n        return Point(this->x - rhs.x, this->y - rhs.y);\n    }\n    Point operator*(const Point &rhs) const { // cross product between points\n        return Point(this->x * rhs.x - this->y * rhs.y,\n                     this->x * rhs.x + this->y * rhs.x);\n    }\n\n    // Unary operator and compound assignment operator\n    Point operator-() const {\n        return Point(-this->x, -this->y);\n    }\n    Point& operator+=(const Point &rhs) {\n        return *this = *this + rhs;\n    }\n    Point& operator-=(const Point &rhs) {\n        return *this = *this - rhs;\n    }\n\n    // Arithmetic operator between point and number\n    Point operator*(Number rhs) const {\n        return Point(this->x * rhs, this->y * rhs);\n    }\n    Point operator/(Number rhs) const {\n        return Point(this->x / rhs, this->y / rhs);\n    }\n\n    // Comparison operation\n    bool operator==(const Point &rhs) const {\n        return sign(this->x - rhs.x) == 0 && sign(this->y - rhs.y) == 0;\n    }\n    bool operator<(const Point &rhs) const {\n        return (this->x < rhs.x) || (this->x == rhs.x && this->y < rhs.y);\n    }\n\n    // Other operator\n    Number abs(void) const {\n        return sqrt(this->x * this->x + this->y * this->y);\n    }\n    Number abs2(void) const {\n        return this->x * this->x + this->y * this->y;\n    }\n    Number arg(void) const {\n        return atan2(this->y, this->x);\n    }\n    Number dot(const Point &rhs) {\n        return this->x * rhs.x + this->y * rhs.y;\n    }\n    Point rotate90(void) const {\n        return Point(-this->y, this->x);\n    }\n    Point rotate(double angle) const {\n        return Point(cos(angle) * this->x - sin(angle) * this->y,\n                     sin(angle) * this->x + cos(angle) * this->y);\n    }\n\n};\ninline Number dot(const Point &p1, const Point &p2) {\n    return p1.x * p2.x + p1.y * p2.y;\n}\ninline Number abs_cross(const Point &p1, const Point &p2) {\n    return p1.x * p2.y - p1.y * p2.x;\n}\n// Output of a point\nstd::ostream& operator<<(std::ostream &os, const Point &p) {\n    return os <<  p.x << ' ' << p.y;\n}\n// Input of a point\nstd::istream& operator>>(std::istream &is, Point &p) {\n    return is >> p.x >> p.y;\n}\n\n// Counter-Clockwise predicate (a, b, c)\nenum CCW {\n    COUNTER_CLOCKWISE = 1,      // counter clockwise\n    CLOCKWISE         = -1,     // clockwise\n    ONLINE_FRONT      = 0,      // a--c--b on line\n    ONLINE_BACK       = 2,      // c--a--b on line\n    ON_SEGMENT        = -2,     // a--b--c on line\n};\nint ccw(const Point &a, Point b, Point c) {\n    b -= a;  c -= a;\n    if (abs_cross(b, c) > 0) return COUNTER_CLOCKWISE;\n    if (abs_cross(b, c) < 0) return CLOCKWISE;\n    if (dot(b, c) < 0)       return ONLINE_BACK;\n    if (b.abs2() < c.abs2())   return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\n\n/**\n * Line or Segment in two dimensional\n */\nclass Line : public std::array<Point, 2> {\npublic:\n    Line() {}\n    Line(const Point &p1, const Point &p2) {\n        (*this)[0] = p1;\n        (*this)[1] = p2;\n    }\n};\nusing Segment = Line;\n// Input of a line\nstd::istream& operator>>(std::istream &is, Line &l) {\n    return is >> l[0] >> l[1];\n}\ninline int ccw(const Line &l, const Point &p) {\n    return ccw(l[0], l[1], p);\n}\n\n\n/**\n * Circle in two dimensional\n */\nclass Circle : public Point {\npublic:\n    Number r;\n    Circle(const Point &p, Number r = 0.0) : Point(p), r(r) {}\n};\n// Input of a circle\nstd::istream& operator>>(std::istream &is, Circle &c) {\n    return is >> c.x >> c.y >> c.r;\n}\n\n\n\n/**\n * Intersection testing\n */\n\n\n/**\n * Intersection point and Distance\n */\nPoint Projection(const Line &l, const Point &p) {\n    Point dir = l[1] - l[0];\n    Number t = dot(p - l[0], dir) / dir.abs2();\n    return l[0] + dir * t;\n}\nPoint Reflection(const Line &l, const Point &p) {\n    return Projection(l, p) * 2.0 - p;\n}\n\n\nint main()\n{\n    Line l;\n    Point p;\n    int q;\n\n    std::cin >> l;\n    std::cin >> q;\n\n    while (q--) {\n        std::cin >> p;\n        switch (ccw(l, p)) {\n        case COUNTER_CLOCKWISE:\n            std::cout << \"COUNTER_CLOCKWISE\\n\";\n            break;\n        case CLOCKWISE:\n            std::cout << \"CLOCKWISE\\n\";\n            break;\n        case ONLINE_FRONT:\n            std::cout << \"ONLINE_FRONT\\n\";\n            break;\n        case ONLINE_BACK:\n            std::cout << \"ONLINE_BACK\\n\";\n            break;\n        case ON_SEGMENT:\n            std::cout << \"ON_SEGMENT\\n\";\n            break;\n        }\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\n#include <cmath>\n#include <iomanip>\n\n\nusing namespace std;\n\n//-------------------------------------------------------------------------------------\n/*2点[(x1,y1),(x2,y2)]を入力し二点を通る直線ax+by+cの(a,b,c)を返す,  */\n/*x1==x2ならfalseを返す*/\n/*falseならばx=cの形の直線*/\nvoid straight_line_passing_through_the_two_points(double x1, double y1, double x2, double y2, double *a, double *b, double *c){\n    *a=(y2-y1);\n    *b=-(x2-x1);\n    *c=y2*(x2-x1)-x2*(y2-y1);\n}\n\n//-------------------------------------------------------------------------------------\n/*(x,y)を通るa1x+b1y+c1=0に垂直な直線a2x+b2y+c2=0を返す*/\nvoid vertical_straight_line(double x, double y, double a1, double b1, double c1, double *a2, double *b2, double *c2){\n    *a2 = -b1;\n    *b2 = a1;\n    *c2 = b1*x - a1*y;\n}\n\n\n//-------------------------------------------------------------------------------------\n/*2直線 a1x+b1y+c1=0 a2x+b2y+c2=0 の交点 (x,y)を返す*/\n/*2直線が平行であるならばfalseを返す*/\n\nbool intersection_and_parallel(double a1, double b1, double c1, double a2, double b2, double c2, double *x, double *y){\n    if(a1*b2==a2*b1)return false;//平行の判定\n    \n    *x = (b1*c2-b2*c1)/(a1*b2-a2*b1);\n    *y = (a2*c1-a1*c2)/(a1*b2-a2*b1);\n    \n    return true;\n}\n\n\n//-------------------------------------------------------------------------------------\n/*直線ax+by+c=0に対し　(x1,y1)と線対称な位置(x2,y2)を出力*/\n/*vertical_straight_lineを使用*/\n/*intersection_and_parallelを使用*/\nvoid line_symmetry(double a, double b, double c, double x1, double y1, double *x2, double *y2){\n    //垂直な直線を求める\n    double a2,b2,c2;\n    vertical_straight_line(x1, y1, a, b, c, &a2, &b2, &c2);\n    \n    //垂直な直線との交点を求める\n    double c_x, c_y;\n    intersection_and_parallel(a, b, c, a2, b2, c2, &c_x, &c_y);\n    *x2 = x1 + 2*(c_x-x1);\n    *y2 = y1 + 2*(c_y-y1);\n}\n\n\n\n//-------------------------------------------------------------------------------------\n/*2点(x1,y1), (x2,y2) の距離*/\nbool distance_between_the_two_pointss(double x1,double y1, double x2, double y2){\n    return  sqrt(fabs((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)));\n}\n\n\n//-------------------------------------------------------------------------------------\n/* (x1,y1)から(x2,y2)へ伸ばした直線の角度を求める  */\ndouble angle_of_the_line(double x1, double y1, double x2, double y2){\n    return atan2(y2-y1, x2-x1);\n}\n\n\n\nint main(int argc, const char * argv[]){\n    double x0,y0,x1,y1,x2,y2;\n    cin>>x0>>y0>>x1>>y1;\n    \n    double angle1 = angle_of_the_line(x0,y0,x1,y1);\n    \n    int q;\n    cin>>q;\n    for(int i=0; i<q; i++){\n        cin>>x2>>y2;\n        double angle2 = angle_of_the_line(x0,y0,x2,y2);\n        \n        double angle = angle2-angle1;\n        if(angle<0)angle+=2*M_PI;\n        if(angle==0||angle==2*M_PI){\n            double l1=distance_between_the_two_pointss(x0, y0, x1, y1);\n            double l2=distance_between_the_two_pointss(x0, y0, x2, y2);\n            if(l1>l2)cout<<\"ON_SEGMENT\"<<endl;\n            else cout<<\"ONLINE_FRONT\"<<endl;\n        }else if(angle == M_PI)cout<<\"ONLINE_BACK\"<<endl;\n        else if(angle<M_PI)cout<<\"COUNTER_CLOCKWISE\"<<endl;\n        else cout<<\"CLOCKWISE\"<<endl;\n        \n        \n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> P;\n\ndouble eps = 1e-9;\n\nstring ccw(P a,P b,P c){\n  P ab=b-a;\n  P ac=c-a;\n  P k=ac/ab;\n  if( k.imag() > eps ){\n    return \"COUNTER_CLOCKWISE\";\n  }\n  if( k.imag() < -eps ){\n    return \"CLOCKWISE\";\n  }\n  if( k.real() < -eps ){\n    return \"ONLINE_BACK\";\n  }\n  if( (ac/ac).real()+eps < k.real() ){\n    return \"ONLINE_FRONT\";\n  }\n  return \"ON_SEGMENT\";\n}\n\nint main(){\n\n  double x0,y0,x1,y1,x2,y2;\n  cin>>x0>>y0>>x1>>y1;\n  P a(x0,y0);\n  P b(x1,y1);\n  int n;\n  cin>>n;\n  while(n--){\n    cin>>x2>>y2;\n    P c(x2,y2);\n    cout<< ccw(a,b,c) <<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#include<iostream>\n#include<fstream>\n#include<iomanip>\n#include<math.h>\nusing namespace std;\n\ntemplate <class T>\nclass _Point{\npublic:\n\tT x;\n\tT y;\n\t_Point(){}\n\t_Point(T _x, T _y) :x(_x), y(_y){}\n\t_Point(const _Point & v) :x(v.x), y(v.y){}\n\n\tconst _Point operator + (const _Point & v)\n\t{\n\t\treturn _Point(x+v.x,y+v.y);\n\t}\n\tconst _Point operator - (const _Point & v)\n\t{\n\t\treturn _Point(x - v.x, y - v.y);\n\t}\n\tT abs() const {\n\t\treturn sqrt(x*x + y*y);\n\t}\n\t_Point unit() const{\n\t\tT len = abs();\n\t\treturn _Point(x / len, y / len);\n\t}\n\tT operator*(const _Point &v) const\n\t{\n\t\treturn x * v.x + y * v.y;\n\t}\n\tconst _Point operator*(const T &len) const\n\t{\n\t\treturn _Point(len * x, len * y);\n\t}\n};\ntypedef double R;\ntypedef _Point<R> Point;\ntypedef Point Vector;\n\nint main(){\n\tstd::istream & c_in = cin;\n\n\tPoint p0, p1;\n\tc_in >> p0.x >> p0.y >> p1.x >> p1.y;\n\tVector P10(p1 - p0);\n\tVector e10(P10.unit());\n\n\tint q;\n\tc_in >> q;\n\tfor (int i = 0; i < q; ++i)\n\t{\n\t\tPoint p2;\n\t\tc_in >> p2.x >> p2.y;\n\n\t\tVector P20 = p2 - p0;\n\t\tVector e20(P20.unit());\n\t\tbool zero = P20.abs() < DBL_EPSILON*16;\n\t\tR projection = e10*e20;\n\t\tif (zero)\n\t\t{\n\t\t\t//(5)\n\t\t\tcout << \"ON_SEGMENT\";\n\t\t}\n\t\telse if (fabs(projection) > 1 - DBL_EPSILON * 16)\n\t\t{\n\t\t\t//??´???\n\t\t\tif (projection > 0)\n\t\t\t{\n\t\t\t\tif (P20.abs() <= P10.abs())\n\t\t\t\t{\n\t\t\t\t\t//(5)\n\t\t\t\t\tcout << \"ON_SEGMENT\";\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t//(4)\n\t\t\t\t\tcout << \"ONLINE_FRONT\";\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//(3)\n\t\t\t\tcout << \"ONLINE_BACK\";\n\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tVector ey(-e10.y, e10.x);\n\t\t\tR projection2 = ey*P20;\n\t\t\tif (projection2 > 0)\n\t\t\t{\n\t\t\t\t//???????¨??????????????????´??? (1) \n\t\t\t\tcout << \"COUNTER_CLOCKWISE\";\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//????¨??????????????????´???(2) \n\t\t\t\tcout << \"CLOCKWISE\";\n\t\t\t}\n\t\t}\n\t\tcout << endl;\n\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "// CGL_1_C.cpp\n//\n#include <bits/stdc++.h>\nusing namespace std;\n\n\nconst double EPS = 1e-10;\n\ntypedef complex<double> Point;\n#define X real()\n#define Y imag()\n\nstruct Segment {\n  Point p1, p2;\n  Segment(){};\n  Segment(Point p1, Point p2) : p1(p1), p2(p2) {};\n};\ntypedef Segment Line;\n\ndouble dot(Point a, Point b){return real(conj(a) * b);}\ndouble cross(Point a, Point b){return imag(conj(a) * b);}\n\nstring ccw(Point a, Point b, Point c) {\n  Point x = b - a;\n  Point y = c - a;\n  if(cross(x, y) > EPS) return \"COUNTER_CLOCKWISE\";\n  if(cross(x, y) < -EPS) return \"CLOCKWISE\";\n  if(dot(x, y) < -EPS) return \"ONLINE_BACK\";\n  if(norm(x) < norm(y)) return \"ONLINE_FRONT\";\n  return \"ON_SEGMENT\";\n}\n\n\nint main() {\n  int a,b,c,d,q;\n  cin>>a>>b>>c>>d>>q;\n  Point p0(a,b), p1(c,d);\n  for(int i=0;i<q;++i){\n    int e,f;\n    cin>>e>>f;\n    Point p2(e,f);\n    cout<<ccw(p0,p1,p2)<<endl;\n  }\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define rep(i, n) for (int i = 0; i < (n); ++i)\n#define repr(i, n) for (int i = (n); i >= 0; --i)\n#define FOR(i, m, n) for (int i = (m); i < (n); ++i)\n#define FORR(i, m, n) for (int i = (m); i >= (n); --i)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef long double ld;\n//const ll mod = 1000000007;\n//const ll mod = 998244353;\nconst int inf = 1e9 + 10;\nconst ll INF = 1e18;\nconst ld EPS = 1e-10;\nconst int dx[8] = {1, 0, -1, 0, 1, -1, -1, 1};\nconst int dy[8] = {0, 1, 0, -1, 1, 1, -1, -1};\ntemplate<class T> bool chmax(T &a, const T &b) { if (a<b) { a=b; return 1; } return 0; }\ntemplate<class T> bool chmin(T &a, const T &b) { if (a>b) { a=b; return 1; } return 0; }\n\nclass Point {\npublic:\n  ld x, y;\n\n  Point() {}\n  Point(ld x, ld y): x(x), y(y) {}\n\n  Point operator + (const Point &p) {\n    return Point(x + p.x, y + p.y);\n  }\n  Point operator - (const Point &p) {\n    return Point(x - p.x, y - p.y);\n  }\n  Point operator * (const ld k) {\n    return Point(x * k, y * k);\n  }\n  Point operator / (const ld k) {\n    return Point(x / k, y / k);\n  }\n  Point operator += (const Point &p) {\n    x += p.x;\n    y += p.y;\n    return *this;\n  }\n  Point operator -= (const Point &p) {\n    x -= p.x;\n    y -= p.y;\n    return *this;\n  }\n  Point operator *= (const ld k) {\n    x *= k;\n    y *= k;\n    return *this;\n  }\n  Point operator /= (const ld k) {\n    x /= k;\n    y /= k;\n    return *this;\n  }\n  bool operator < (const Point &p) const {\n    return x != p.x ? x < p.x : y < p.y;\n  }\n  bool operator == (const Point &p) const {\n    return equals(x, p.x) && equals(y, p.y);\n  }\n  friend ostream& operator << (ostream &os, const Point &p) {\n    os << p.x << ' ' << p.y;\n    return os;\n  }\n  friend istream& operator >> (istream &is, Point &p) {\n    ld x, y;\n    is >> x >> y;\n    p = Point(x, y);\n    return is;\n  }\n\n  ld abs() {return sqrt(norm());}\n  ld norm() {return x * x + y * y;}\n};\n\nld dot(Point a, Point b) {\n  return a.x * b.x + a.y * b.y;\n}\n\nld cross(Point a, Point b) {\n  return a.x * b.y - a.y * b.x;\n}\n\nclass Segment {\npublic:\n  Point p1, p2;\n\n  Segment() {}\n  Segment(Point p1, Point p2): p1(p1), p2(p2) {}\n};\n\n//線分sに対する点pの射影\nPoint project(Segment s, Point p) {\n  Point base = s.p2 - s.p1;\n  ld r = dot(p - s.p1, base) / base.norm();\n  return s.p1 + base * r;\n}\n\n//線分sを対称軸とした点pの線対象の点\nPoint reflect(Segment s, Point p) {\n  return p + (project(s, p) - p) * 2;\n}\n\n//反時計回り:1\n//時計回り:-1\n//p2, p0, p1:2\n//p0, p1, p2:-2\n//p0, p2, p1:0\nint ccw(Point p0, Point p1, Point p2) {\n  Point a = p1 - p0;\n  Point b = p2 - p0;\n  if (cross(a, b) > EPS) return 1;\n  if (cross(a, b) < -EPS) return -1;\n  if (dot(a, b) < -EPS) return 2;\n  if (a.norm() < b.norm()) return -2;\n  return 0;\n}\n\n//直線lと点pの距離\nld getDistanceLP(Segment l, Point p) {\n  return abs(cross(l.p2 - l.p1, p - l.p1) / (l.p2 - l.p1).abs());\n}\n\n//線分sと点pの距離\nld getDistanceSP(Segment s, Point p) {\n  if (dot(s.p2 - s.p1, p - s.p1) < 0) return (p - s.p1).abs();\n  if (dot(s.p1 - s.p2, p - s.p2) < 0) return (p - s.p2).abs();\n  return getDistanceLP(s, p);\n}\n\n\n\nclass Circle {\npublic:\n  Point p;\n  ld r;\n\n  Circle() {}\n  Circle(Point p, ld r): p(p), r(r) {}\n};\n\nint main() {\n  ios::sync_with_stdio(0);\n  cin.tie(0);\n  cout << fixed << setprecision(25);\n\n  Point p[3];\n  int q;\n  cin >> p[0] >> p[1] >> q;\n  while (q--) {\n    cin >> p[2];\n    int t = ccw(p[0], p[1], p[2]);\n    if (t == 1) cout << \"COUNTER_CLOCKWISE\\n\";\n    if (t == -1) cout << \"CLOCKWISE\\n\";\n    if (t == 2) cout << \"ONLINE_BACK\\n\";\n    if (t == -2) cout << \"ONLINE_FRONT\\n\";\n    if (t == 0) cout << \"ON_SEGMENT\\n\";\n  }\n\n\n  \n\n  \n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <fstream>\n#include <typeinfo>\n#include <vector>\n#include <cmath>\n#include <set>\n#include <map>\n#include <string>\n#include <algorithm>\n#include <cstdio>\n#include <queue>\n#include <iomanip>\n#include <cctype>\n#define syosu(x) fixed<<setprecision(x)\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> P;\ntypedef pair<double,double> pdd;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef vector<char> vc;\ntypedef vector<vc> vvc;\ntypedef vector<bool> vb;\ntypedef vector<vb> vvb;\ntypedef vector<P> vp;\ntypedef vector<vp> vvp;\ntypedef pair<int,P> pip;\ntypedef vector<pip> vip;\nconst int inf=1<<25;\nconst double pi=acos(-1);\nconst double eps=1e-8;\nconst vi emp;\n\nstruct point{\n\tdouble x,y;\n\tpoint operator+(point p){\n\t\treturn point{x+p.x,y+p.y};\n\t}\n\tpoint operator-(point p){\n\t\treturn point{x-p.x,y-p.y};\n\t}\n\tpoint operator*(double p){\n\treturn point{x*p,y*p};\n\t}\n\tpoint operator/(double p){\n\t\tif(!p) return point{0,0}; \n\t\treturn point{x/p,y/p};\n\t}\n\tbool operator==(point p){\n\t\treturn fabs(x-p.x)<eps&&fabs(y-p.y)<eps;\n\t}\n};\n\ntypedef pair<point,point> pp;\nconst point O{0,0};\n\nclass Geom{\n\tpublic:\n\tdouble Length(point x,point y){\n\t\tpoint z=y-x;\n\t\treturn sqrt(z.x*z.x+z.y*z.y);\n\t}\n\tdouble IP(point x,point y){\n\t\treturn x.x*y.x+x.y*y.y;\n\t}\n\tdouble CP(point p,point q){\n\t\treturn p.x*q.y-q.x*p.y;\n\t}\n\tstring Counter_Clockwise(pp a,point x){\n\t\tpoint A=a.second-a.first;\n\t\tdouble cp=CP(A,x),ip=IP(A,x),Al=Length(O,A),xl=Length(O,x);\n\t\tif(cp>0) return \"COUNTER_CLOCKWISE\";\n\t\tif(cp<0) return \"CLOCKWISE\";\n\t\tif(ip<0) return \"ONLINE_BACK\";\n\t\tif(xl<Al||fabs(xl-Al)<eps) return \"ON_SEGMENT\";\n\t\treturn \"ONLINE_FRONT\";\n\t}\n};\n\nint Q;\ndouble x,y,X1,Y1,X2,Y2;\n\nint main(){\n\tGeom geo;\n\tcin>>X1>>Y1>>X2>>Y2>>Q;\n\tfor(int i=0;i<Q;i++){\n\t\tcin>>x>>y;\n\t\tcout<<geo.Counter_Clockwise(pp(point{X1,Y1},point{X2,Y2}),point{x,y})<<endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#pragma warning(disable : 4267) // \"int n = (unsigned)size\"\n\nusing vi = vector<int>; using vvi = vector<vi>; using vvvi = vector<vvi>;\nusing ll = long long int;\nusing vll = vector<ll>; using vvll = vector<vll>; using vvvll = vector<vvll>;\nusing vd = vector<double>; using vvd = vector<vd>; using vvvd = vector<vvd>;\nusing P = pair<int, int>;\nusing Pll = pair<ll, ll>;\nusing cdouble = complex<double>;\n\nconst double eps = 1e-2;\nconst double INFD = numeric_limits<double>::infinity();\n#define Loop(i, n) for(int i = 0; i < int(n); i++)\n#define Loopll(i, n) for(ll i = 0; i < ll(n); i++)\n#define Loop1(i, n) for(int i = 1; i <= int(n); i++)\n#define Loopll1(i, n) for(ll i = 1; i <= ll(n); i++)\n#define Loopr(i, n) for(int i = int(n) - 1; i >= 0; i--)\n#define Looprll(i, n) for(ll i = ll(n) - 1; i >= 0; i--)\n#define Loopr1(i, n) for(int i = int(n); i >= 1; i--)\n#define Looprll1(i, n) for(ll i = ll(n); i >= 1; i--)\n#define Foreach(buf, container) for(auto buf : container)\n#define Loopdiag(i, j, h, w, sum) for(int i = ((sum) >= (h) ? (h) - 1 : (sum)), j = (sum) - i; i >= 0 && j < (w); i--, j++)\n#define Loopdiagr(i, j, h, w, sum) for(int j = ((sum) >= (w) ? (w) - 1 : (sum)), i = (sum) - j; j >= 0 && i < (h); j--, i++)\n#define Loopdiagsym(i, j, h, w, gap) for (int i = ((gap) >= 0 ? (gap) : 0), j = i - (gap); i < (h) && j < (w); i++, j++)\n#define Loopdiagsymr(i, j, h, w, gap) for (int i = ((gap) > (h) - (w) - 1 ? (h) - 1 : (w) - 1 + (gap)), j = i - (gap); i >= 0 && j >= 0; i--, j--)\n#define Loopitr(itr, container) for(auto itr = container.begin(); itr != container.end(); itr++)\n#define printv(vector) Loop(ex_i, vector.size()) { cout << vector[ex_i] << \" \"; } cout << endl;\n#define printmx(matrix) Loop(ex_i, matrix.size()) { Loop(ex_j, matrix[ex_i].size()) { cout << matrix[ex_i][ex_j] << \" \"; } cout << endl; }\n#define quickio() ios::sync_with_stdio(false); cin.tie(0);\n#define bitmanip(m,val) static_cast<bitset<(int)m>>(val)\n#define Comp(type_t) bool operator<(const type_t &another) const\n#define fst first\n#define snd second\nbool nearlyeq(double x, double y) { return abs(x - y) < eps; }\nbool inrange(ll x, ll t) { return x >= 0 && x < t; }\nbool inrange(vll xs, ll t) { Foreach(x, xs) if (!(x >= 0 && x < t)) return false; return true; }\nint ceillog2(ll x) { int ret = 0;\tx--; while (x > 0) { ret++; x >>= 1; } return ret; }\nll rndf(double x) { return (ll)(x + (x >= 0 ? 0.5 : -0.5)); }\nll floorsqrt(ll x) { ll m = (ll)sqrt((double)x); return m + (m * m <= x ? 0 : -1); }\nll ceilsqrt(ll x) { ll m = (ll)sqrt((double)x); return m + (x <= m * m ? 0 : 1); }\nll rnddiv(ll a, ll b) { return (a / b + (a % b * 2 >= b ? 1 : 0)); }\nll ceildiv(ll a, ll b) { return (a / b + (a % b == 0 ? 0 : 1)); }\nll gcd(ll m, ll n) { if (n == 0) return m; else return gcd(n, m % n); }\nll lcm(ll m, ll n) { return m * n / gcd(m, n); }\n\n/*******************************************************/\n\nstruct point_t {\n\tdouble x, y;\n\tpoint_t operator+(const point_t &p) { return { x + p.x, y + p.y }; }\n\tpoint_t operator-(const point_t &p) { return { x - p.x, y - p.y }; }\n\tpoint_t operator*(const double &c) { return { x * c, y * c }; }\n};\n\n// ax + by + c = 0\nstruct line_t {\n\tdouble a, b, c;\n};\n\npoint_t cross_point(line_t l, line_t m) {\n\tpoint_t ret = { INFD, INFD };\n\tdouble d = l.a * m.b - m.a * l.b;\n\tif (nearlyeq(d, 0)) return ret;\n\tdouble x = l.b * m.c - m.b * l.c;\n\tdouble y = l.a * m.c - m.a * l.c;\n\tret = { x / d, y / -d };\n\treturn ret;\n}\n\n// normal vector = (a, b), passing p\nline_t solve_line(double a, double b, point_t p) {\n\treturn { a, b, -a * p.x - b * p.y };\n}\n\n// t should be radius\npoint_t rot(point_t p, double r) {\n\treturn {\n\t\tcos(r) * p.x - sin(r) * p.y,\n\t\tsin(r) * p.x + cos(r) * p.y\n\t};\n}\n\ndouble abs(point_t p) {\n\treturn sqrt(p.x * p.x + p.y * p.y);\n}\n\n// angle [0, 2PI) of vector p to vector q\ndouble angle(point_t p, point_t q) {\n\tp = p * (1.0 / abs(p));\n\tq = q * (1.0 / abs(q));\n\tdouble r0 = acos(p.x * q.x + p.y * q.y);\n\tdouble r1 = asin(p.x * q.y - p.y * q.x);\n\tif (r1 >= 0) return r0;\n\telse return 2 * M_PI - r0;\n}\n\nint main() {\n\tpoint_t p0, p1;\n\tcin >> p0.x >> p0.y >> p1.x >> p1.y;\n\tint q; cin >> q;\n\tcout << setprecision(20);\n\tLoop(i, q) {\n\t\tpoint_t p2;\n\t\tcin >> p2.x >> p2.y;\n\t\tpoint_t p = p1 - p0;\n\t\tpoint_t q = p2 - p0;\n\t\tif (nearlyeq(abs(p), 0)) {\n\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t}\n\t\telse if (nearlyeq(abs(q), 0)) {\n\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t}\n\t\telse {\n\t\t\tdouble r = angle(p, q);\n\t\t\tif (nearlyeq(r, M_PI)) {\n\t\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t\t}\n\t\t\telse if (nearlyeq(r, 0)) {\n\t\t\t\tif (abs(q) > abs(p)) {\n\t\t\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (r < M_PI) {\n\t\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\t\t}\n\t\t}\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include <cstdlib>\n#include <stack>\n#include <queue>\n#include <list>\n#include <vector>\n#include <sstream>\n\nusing namespace std;\n\nclass c_main\n{\nprivate:\n    \npublic:\n    c_main();\n    void f_input();\n};\n\nc_main::c_main()\n{\n\n}\n\nvoid c_main::f_input()\n{\n    double xp1,yp1,xp2,yp2;\n    int q;\n    int i;\n    double x[1000];\n    double y[1000];\n    double a;\n    double b;\n    double x_a;\n    double y_a;\n    double a_a;\n    double b_a;\n    int pt1;\n\n    cin >> xp1 >> yp1 >> xp2 >> yp2;\n    \n    if (xp1 == xp2){\n        x_a = xp1;\n        y_a = 0;\n        pt1 = 0;\n    }else if (yp1 == yp2){\n        x_a = 0;\n        y_a = yp1; \n        pt1 = 1;\n    }else{\n        \n        a_a = (yp2-yp1)/(xp2-xp1);\n      \n        a = -1 * (1/a_a);\n       \n        b_a = -1 * a_a * xp1+ yp1;\n        pt1 = 2;\n    }\n    \n    cin >> q;\n    \n    for ( i = 0; i < q; ++i){\n        cin >> x[i] >> y[i];\n        if (pt1 == 0){\n            if(yp1 >= yp2){\n                if(x[i] == x_a){\n                    if(y[i] > yp1){\n                        cout << \"ONLINE__BACK\" << endl;\n                    }else if(y[i] < yp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(yp2 <= y[i] && y[i] <= yp1){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(x[i] < x_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n                }else if(x[i] > x_a){\n                    cout << \"CLOCKWISE\" << endl;\n     \n                }\n            }else{\n                if(x[i] == x_a){\n                    if(y[i] < yp1){\n                        cout << \"ONLINE_BACK\" << endl;\n                    }else if(y[i] > yp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(yp1 <= y[i] && y[i] <= yp2){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(x[i] < x_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n                    \n                }else if(x[i] > x_a){\n                    cout << \"CLOCKWISE\" << endl;\n                }\n            }\n            //printf(\"%10.10f %10.10f\\n\", x_a,y[i]);\n            \n        }else if(pt1 == 1){\n            if(xp1 >= xp2){\n                if(y[i] == y_a){\n                    if(x[i] > xp1){\n                        cout << \"ONLINE_BACK\" << endl;\n                    }else if(x[i] < xp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(xp2 <= x[i] && x[i] <= xp1){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(y[i] < y_a){\n                    cout << \"CLOCKWISE\" << endl;\n                }else if(y[i] > y_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n                }\n            }else{\n                if(y[i] == y_a){\n                    if(x[i] < xp1){\n                        cout << \"ONLINE_BACK\" << endl;\n                    }else if(x[i] > xp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(xp1 <= x[i] && x[i] <= xp2){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(y[i] < y_a){\n                    cout << \"CLOCKWISE\" << endl;\n                }else if(y[i] > y_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n                }\n            }\n            //printf(\"%10.10f %10.10f\\n\", x[i],y_a);\n        }else if(pt1 == 2){\n            b = -1 * a * x[i] + y[i];\n            x_a = (b - b_a)/(a_a - a);\n            y_a = a_a * x_a + b_a;\n            if(xp1 >= xp2){\n                if(y[i] == y_a){\n                    if(x[i] > xp1){\n                        cout << \"ONLINE_BACK\" << endl;\n                    }else if(x[i] < xp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(xp2 <= x[i] && x[i] <= xp1){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(y[i] < y_a){\n                    cout << \"CLOCKWISE\" << endl;\n                }else if(y[i] > y_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n                }\n            }else{\n                if(y[i] == y_a){\n                    if(x[i] < xp1){\n                        cout << \"ONLINE_BACK\" << endl;\n                    }else if(x[i] > xp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(xp1 <= x[i] && x[i] <= xp2){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(y[i] < y_a){\n                    cout << \"CLOCKWISE\" << endl;\n                }else if(y[i] > y_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n                }\n            }\n            //printf(\"%10.10f %10.10f\\n\", x_a,y_a);\n        }\n    }\n}\n\nint main(){\n    c_main main01;\n    main01.f_input();\n    \n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\nusing namespace std;\n\nint main() {\n\tcin.tie(0); ios::sync_with_stdio(false);\n\tint x0, y0, x1, y1; cin >> x0 >> y0 >> x1 >> y1;\n\tint X1 = x1 - x0, Y1 = y1 - y0;\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tint x2, y2; cin >> x2 >> y2;\n\t\tint X2 = x2 - x0, Y2 = y2 - y0;\n\t\tint cross = X1*Y2 - Y1*X2;\n\t\tif (cross > 0) { cout << \"COUNTER_CLOCKWISE\" << endl; continue; }\n\t\tif (cross < 0) { cout << \"CLOCKWISE\" << endl; continue; }\n\t\t//??????????????§cross == 0 ?????????????¢????\n\t\tint dot = X1*X2 + Y1*Y2;\n\t\tif (dot < 0) { cout << \"ONLINE_BACK\" << endl; continue; }\n\t\tif ((X1*X1 + Y1*Y1) - (X2*X2 + Y2*Y2) < 0) { cout << \"ONLINE_FRONT\" << endl; continue; }\n\t\tcout << \"ON_SEGMENT\" << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <vector>\n#include <queue>\n#include <cmath>\nusing namespace std;\n#define EPS  (1e-10)\n#define equals(a,b) (fabs((a) - (b)) < EPS)\n\n// 点类\nclass Point {\npublic :\n\tdouble x, y;\n\tPoint() {};\n\tPoint(double x, double y) :x(x), y(y) {}\n\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a) { return Point(x * a, y * a); }\n\tPoint operator / (double a) { return Point(x / a, y / a); }\n\t\n\tbool operator < (const Point &p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p) const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\n// 线段类\nclass Segment {\npublic:\n\tPoint p1, p2;\n\tSegment() {};\n\tSegment(Point p1, Point p2) :p1(p1), p2(p2) {};\n};\n// 圆类\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle() {};\n\tCircle(Point c, double r) :c(c), r(r) {}\n};\n// 定义向量\ntypedef Point Vector;\n// 定义直线\ntypedef Segment Line;\n// 定义多边形\ntypedef vector<Point> Polygon;\n\n/***************************点、向量****************************/\n\ndouble norm(Point p) { return p.x * p.x + p.y * p.y; }\ndouble abs(Point p) { return sqrt(norm(p)); }\n\n// 向量的内积\ndouble dot(Point a, Point b) {\n\treturn a.x * b.x + a.y * b.y;\n}\n// 向量的外积\ndouble cross(Point a, Point b) {\n\treturn a.x * b.y - a.y * b.x;\n}\n\n// 向量a，b是否正交 <==> 内积为0\nbool isOrthogonal(Vector a, Vector b) {\n\treturn equals(dot(a, b), 0.0);\n}\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n\treturn equals(dot(a1 - a2, b1 - b2), 0.0);\n}\n\n// 向量a，b是否平行 <==> 外积为0\nbool isParallel(Vector a, Vector b) {\n\treturn equals(cross(a, b), 0.0);\n}\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n\treturn equals(cross(a1 - a2, b1 - b2), 0.0);\n}\n\n// 点p在线段s上的投影\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / norm(base);\n\treturn s.p1 + base * r ;\n}\n\n//以线段s为对称轴与点p成线对称的点\nPoint reflect(Segment s, Point p) {\n\treturn p + (project(s, p) - p) * 2.0;\n}\n\n// 点a到点b的距离\ndouble getDistance(Point a, Point b) {\n\treturn abs(a - b);\n}\n\n// 线段l和点p的距离\ndouble getDistanceLP(Line l, Point p) {\n\treturn abs( cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1) );\n}\n\n// 线段s与点p的距离\ndouble getDistanceSP(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0)\n\t\treturn abs(p - s.p1);\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0)\n\t\treturn abs(p - s.p2);\n\treturn getDistanceLP(s, p);\n}\n\n\n\n/*************************线段********************************/\n// 线段s1，s2是否正交 <==> 内积为0\nbool isOrthogonal(Segment s1, Segment s2) {\n\treturn equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n// 线段s1，s2是否平行 <==> 外积为0\nbool isParallel(Segment s1, Segment s2) {\n\treturn equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n// 逆时针方向ccw（Counter-Clockwise）\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS) return CLOCKWISE;\n\tif (dot(a, b) < -EPS) return ONLINE_BACK;\n\tif (norm(a) < norm(b)) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\n// 判断线段p1p2和线段p3p4是否相交\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n\treturn (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n\t\tccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\n\n//判断线段s1和s2是否相交\nbool intersect(Segment s1, Segment s2) {\n\treturn intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\n// 线段s1和线段s2的距离\ndouble getDistance(Segment s1, Segment s2) {\n\t// 相交\n\tif (intersect(s1, s2))\n\t\treturn 0.0;\n\treturn min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n\t\tmin(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\n// 线段s1与线段s2的交点\nPoint getCrossPoint(Segment s1, Segment s2) {\n\tVector base = s2.p2 - s2.p1;\n\tdouble d1 = abs(cross(base, s1.p1 - s2.p1));\n\tdouble d2 = abs(cross(base, s1.p2 - s2.p1));\n\tdouble t = d1 / (d1 + d2);\n\treturn s1.p1 + (s1.p2 - s1.p1) * t;\n}\n\n/***************************圆****************************/\n\n// 圆c和直线l的交点\npair<Point, Point> getCrossPoints(Circle c, Line l) {\n\tVector pr = project(l, c.c);\n\tVector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);\n\tdouble base = sqrt(c.r * c.r - norm(pr - c.c));\n\treturn make_pair(pr + e * base, pr - e * base);\n}\n\n// 圆c1和圆c2的交点\ndouble arg(Vector p) { return atan2(p.y, p.x); }\nVector polar(double a, double r) { return Point(cos(r) * a, sin(r) * a); }\n\npair<Point, Point> getCrossPoints(Circle c1, Circle c2) {\n\tdouble d = abs(c1.c - c2.c);\n\tdouble a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n\tdouble t = arg(c2.c - c1.c);\n\treturn make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n}\n\n/***************************多边形****************************/\n// 点的内包\n/*\n\tIN 2\n\tON 1\n\tOUT 0\n*/\nint contains(Polygon g, Point p) {\n\tint n = g.size();\n\tbool x = false;\n\tfor (int i = 0; i < n; i++) {\n\t\tPoint a = g[i] - p, b = g[(i + 1) % n] - p;\n\t\tif (abs(cross(a, b)) < EPS && dot(a, b) < EPS) return 1;\n\t\tif (a.y > b.y) swap(a, b);\n\t\tif (a.y < EPS && EPS < b.y && cross(a, b) > EPS)\n\t\t\tx = !x;\n\t}\n\treturn (x ? 2 : 0);\n}\n\n// 凸包\nPolygon andrewScan(Polygon s) {\n\tPolygon u, l;\n\tint len = s.size();\n\tif (len < 3) return s;\n\t// 以x，y为基准升序排序\n\tsort(s.begin(), s.end());\n\t// 将x值最小的两个点添加到u\n\tu.push_back(s[0]);\n\tu.push_back(s[1]);\n\n\t// 将x值最大的两个点添加到l\n\tl.push_back(s[len - 1]);\n\tl.push_back(s[len - 2]);\n\n\t// 构建凸包上部\n\tfor (int i = 2; i < len; i++) {\n\t\tfor (int j = u.size(); j >= 2 && ccw(u[j - 2], u[j - 1], s[i]) != CLOCKWISE; j--)\n\t\t\tu.pop_back();\n\t\tu.push_back(s[i]);\n\t}\n\n\t// 构建凸包下部\n\tfor (int i = len - 3; i >= 0; i--) {\n\t\tfor (int j = l.size(); j >= 2 && ccw(l[j - 2], l[j - 1], s[i]) != CLOCKWISE; j--)\n\t\t\tl.pop_back();\n\t\tl.push_back(s[i]);\n\t}\n\n\t// 按顺时针方向生成凸包的点的序列\n\treverse(l.begin(), l.end());\n\tfor (int i = u.size() - 2; i >= 1; i--)\n\t\tl.push_back(u[i]);\n\n\treturn l;\n}\n\n\nint main() {\n\tPoint p1, p2;\n\tPoint p, ans;\n\tint n;\n\tscanf(\"%lf %lf %lf %lf\", &p1.x, &p1.y, &p2.x, &p2.y);\n\tscanf(\"%d\", &n);\n\tfor (int i = 0; i < n; i++) {\n\t\tscanf(\"%lf %lf\", &p.x, &p.y);\n\t\tint ans = ccw(p1, p2, p);\n\t\tif (ans == 1)\n\t\t\tprintf(\"COUNTER_CLOCKWISE\\n\");\n\t\telse if (ans == -1)\n\t\t\tprintf(\"CLOCKWISE\\n\");\n\t\telse if (ans == 2)\n\t\t\tprintf(\"ONLINE_BACK\\n\");\n\t\telse if (ans == -2)\n\t\t\tprintf(\"ONLINE_FRONT\\n\");\n\t\telse\n\t\t\tprintf(\"ON_SEGMENT\\n\");\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\n#include <cmath>\n#include <iomanip>\n\n\nusing namespace std;\n\n//-------------------------------------------------------------------------------------\n/*2点[(x1,y1),(x2,y2)]を入力し二点を通る直線ax+by+cの(a,b,c)を返す,  */\n/*x1==x2ならfalseを返す*/\n/*falseならばx=cの形の直線*/\nvoid straight_line_passing_through_the_two_points(double x1, double y1, double x2, double y2, double *a, double *b, double *c){\n    *a=(y2-y1);\n    *b=-(x2-x1);\n    *c=y2*(x2-x1)-x2*(y2-y1);\n}\n\n//-------------------------------------------------------------------------------------\n/*(x,y)を通るa1x+b1y+c1=0に垂直な直線a2x+b2y+c2=0を返す*/\nvoid vertical_straight_line(double x, double y, double a1, double b1, double c1, double *a2, double *b2, double *c2){\n    *a2 = -b1;\n    *b2 = a1;\n    *c2 = b1*x - a1*y;\n}\n\n\n//-------------------------------------------------------------------------------------\n/*2直線 a1x+b1y+c1=0 a2x+b2y+c2=0 の交点 (x,y)を返す*/\n/*2直線が平行であるならばfalseを返す*/\n\nbool intersection_and_parallel(double a1, double b1, double c1, double a2, double b2, double c2, double *x, double *y){\n    if(a1*b2==a2*b1)return false;//平行の判定\n    \n    *x = (b1*c2-b2*c1)/(a1*b2-a2*b1);\n    *y = (a2*c1-a1*c2)/(a1*b2-a2*b1);\n    \n    return true;\n}\n\n\n//-------------------------------------------------------------------------------------\n/*直線ax+by+c=0に対し　(x1,y1)と線対称な位置(x2,y2)を出力*/\n/*vertical_straight_lineを使用*/\n/*intersection_and_parallelを使用*/\nvoid line_symmetry(double a, double b, double c, double x1, double y1, double *x2, double *y2){\n    //垂直な直線を求める\n    double a2,b2,c2;\n    vertical_straight_line(x1, y1, a, b, c, &a2, &b2, &c2);\n    \n    //垂直な直線との交点を求める\n    double c_x, c_y;\n    intersection_and_parallel(a, b, c, a2, b2, c2, &c_x, &c_y);\n    *x2 = x1 + 2*(c_x-x1);\n    *y2 = y1 + 2*(c_y-y1);\n}\n\n\n\n//-------------------------------------------------------------------------------------\n/*2点(x1,y1), (x2,y2) の距離*/\ndouble distance_between_the_two_pointss(double x1,double y1, double x2, double y2){\n    return  sqrt(fabs((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)));\n}\n\n\n//-------------------------------------------------------------------------------------\n/* (x1,y1)から(x2,y2)へ伸ばした直線の角度を求める  */\ndouble angle_of_the_line(double x1, double y1, double x2, double y2){\n    return atan2(y2-y1, x2-x1);\n}\n\n\n\nint main(int argc, const char * argv[]){\n    double x0,y0,x1,y1,x2,y2;\n    cin>>x0>>y0>>x1>>y1;\n    \n    double angle1 = angle_of_the_line(x0,y0,x1,y1);\n    \n    int q;\n    cin>>q;\n    for(int i=0; i<q; i++){\n        cin>>x2>>y2;\n        double angle2 = angle_of_the_line(x0,y0,x2,y2);\n        \n        double angle = angle2-angle1;\n        \n        if(angle<0)angle+=2*M_PI;\n        if(x2==x0&&y2==y0)cout<<\"ON_SEGMENT\"<<endl;\n        else if(angle==0||angle==2*M_PI){\n            double l1=distance_between_the_two_pointss(x0, y0, x1, y1);\n            double l2=distance_between_the_two_pointss(x0, y0, x2, y2);\n            if(l1>=l2)cout<<\"ON_SEGMENT\"<<endl;\n            else cout<<\"ONLINE_FRONT\"<<endl;\n        }else if(angle == M_PI)cout<<\"ONLINE_BACK\"<<endl;\n        else if(angle<M_PI)cout<<\"COUNTER_CLOCKWISE\"<<endl;\n        else cout<<\"CLOCKWISE\"<<endl;\n        \n        \n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstring>\n#include <cstdlib>\n#include <cmath>\n#include <algorithm>\n#include <functional>\n#include <vector>\n#include <list>\n#include <queue>\n#include <deque>\n#include <stack>\n#include <map>\n#include <set>\n#include <bitset>\n#include <tuple>\n#include <cassert>\n#include <exception>\n#include <iomanip>\n// #include \"./競プロ用テンプレート/Geometry.h\"\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<ll,ll> P;\ntypedef vector<int> vi;\ntypedef vector<ll> vll;\ntypedef vector<string> vs;\ntypedef vector<P> vp;\n#define rep(i,a,n) for(ll i = (a);i < (n);i++)\n#define per(i,a,n) for(ll i = (a);i > (n);i--)\n#define lep(i,a,n) for(ll i = (a);i <= (n);i++)\n#define pel(i,a,n) for(ll i = (a);i >= (n);i--)\n#define clr(a,b) memset((a),(b),sizeof(a))\n#define pb push_back\n#define mp make_pair\n#define all(c) (c).begin(),(c).end()\n#define sz size()\n#define print(X) cout << (X) << endl\nstatic const int INF = 1e+9+7;\nll n,m,l;\nstring s,t;\nint d[200010],dp[1010][1010];\ndouble w[1000],v[1000];\ndouble box[200010];\n\n// #define EPS (1e-10)\n// #define equals(a,b) (fabs(a,b) < EPS)\n\n// class Point{\n// public:\n//   double x,y;\n\n//   Point(double x = 0,double y = 0): x(x),y(y) {}\n\n//   Point operator + (const Point &p){ return Point(x+p.x , y+p.y); }\n//   Point operator - (const Point &p){ return Point(x-p.x , y-p.y); }\n//   Point operator * (double a){ return Point(x * a , y * a); }\n//   Point operator / (double a){ return Point(x / a , y / a); }\n\n//   double abs(){ return sqrt(norm()); }\n//   double norm(){ return x * x + y * y; }\n\n//   bool operator < (const Point &p) const{ return (x != p.x) ? x < p.x : y < p.y; }\n//   bool operator == (const Point &p) const{ return (fabs(x - p.x) < EPS) && (fabs(y - p.y) < EPS); }\n//   friend istream& operator >> (istream &is,Point &p){ return (is >> p.x >> p.y); }\n//   friend ostream& operator << (ostream &os,Point &p){ return (os << p.x << \" \" << p.y); }\n// };\n\n// class Circle{\n// public:\n//   Point c;\n//   double r;\n//   Circle(Point c = Point(),double r = 0.0): c(c),r(r){}\n//   friend istream& operator >> (istream &is,Circle c){return (is >> c.c >> c.r);}\n//   friend ostream& operator << (ostream &os,Circle c){return (os << c.c << \" \" << c.r);}\n// };\n\n// typedef Point Vector;\n\n// double norm(Point p){\n//   return p.x * p.x + p.y * p.y;\n// }\n\n// double abs(Point p){\n//   return sqrt(norm(p));\n// }\n\n// using namespace Geometry;\n\nnamespace Geometry{\n  #define EPS (1e-10)\n  #define equals(a,b) (fabs((a) - (b)) < EPS)\n  #define BOTTOM 0\n  #define LEFT 1\n  #define RIGHT 2\n  #define TOP 3\n  #define gprint(X) cout << fixed << setprecision(10) << (X) << endl\n  #define gprints(X,Y) cout << fixed << setprecision(10) << (X) << \" \" << (Y) << endl\n  static const int COUNTER_CLOCKWISE = 1;\n  static const int CLOCKWISE = -1;\n  static const int ONLINE_BACK = 2;\n  static const int ONLINE_FRONT = -2;\n  static const int ON_SEGMENT = 0;\n  \n  class Point{\n  public:\n    double x,y;\n    Point(double x = 0,double y = 0): x(x),y(y){}\n    Point operator + (Point p){ return Point(x + p.x , y + p.y); }\n    Point operator - (Point p){ return Point(x - p.x , y - p.y); }\n    Point operator * (double a){ return Point(a * x , a * y); }\n    Point operator / (double a){ return Point(x / a , y / a); }\n    bool operator < (const Point &p) const{ return x != p.x ? x < p.x : y < p.y; }\n    bool operator == (const Point &p) const{ return (fabs(x - p.x) < EPS) && (fabs(y - p.y) < EPS); }\n\n    double abs(){ return sqrt(norm()); }\n    double norm(){ return x * x + y * y; }\n    friend ostream& operator << (ostream &os,Point &p){ return os << p.x << \" \" << p.y; }\n    friend istream& operator >> (istream &is,Point &p){ return is >> p.x >> p.y; }\n  };\n\n  struct Segment{\n    Point p1,p2;\n    Segment(){};\n    Segment(Point p1,Point p2): p1(p1) , p2(p2){};\n    friend ostream& operator << (ostream &os,Segment &seg){ return os << seg.p1 << \" \" << seg.p2; }\n    friend istream& operator >> (istream &is,Segment &seg){ return is >> seg.p1 >> seg.p2; }\n  };\n\n  class Circle{\n  public:\n    Point c;\n    double r;\n    Circle(Point c = Point(),double r = 0.0): c(c),r(r){}\n    friend ostream& operator << (ostream &os,Circle &c){ return os << c.c << \" \" << c.r; }\n    friend istream& operator >> (istream &is,Circle &c){ return is >> c.c >> c.r; }\n  };\n\n  typedef Point Vector;\n  typedef Segment Line;\n  typedef vector<Point> Polygon;\n\n  double norm(Vector a){ return  a.x * a.x + a.y * a.y; }\n  double abs(Vector a){ return sqrt(norm(a)); }\n  double dot(Vector a,Vector b){ return a.x * b.x + a.y * b.y; }\n  double cross(Vector a,Vector b){ return a.x * b.y - a.y * b.x; }\n  bool Orthogonal(Vector a,Vector b){ return equals(dot(a,b),0.0); }\n  bool Orthogonal(Point a1,Point a2,Point b1,Point b2){ return Orthogonal(a1 - a2,b1 - b2); }\n  bool Orthogonal(Segment s1,Segment s2){ return equals(dot(s1.p2 - s1.p1,s2.p2 - s2.p1) , 0.0); }\n  bool Parallel(Vector a,Vector b){ return equals(cross(a,b),0.0); }\n  bool Parallel(Point a1,Point a2,Point b1,Point b2){ return Parallel(a1 - a2 , b1 - b2); }\n  bool Parallel(Segment s1,Segment s2){ return equals(cross(s1.p2 - s1.p1 , s2.p2 - s2.p1),0.0); }\n\n  Point project(Segment s,Point p){\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1 , base) / norm(base);\n    return s.p1 + base * r;\n  }\n  Point reflect(Segment s,Point p){ return p + (project(s,p) - p) * 2.0; }\n\n  int ccw(Point p0,Point p1,Point p2){\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if(cross(a,b) > EPS)return COUNTER_CLOCKWISE;\n    if(cross(a,b) < -EPS)return CLOCKWISE;\n    if(dot(a,b) < -EPS)return ONLINE_BACK;\n    if(a.norm() < b.norm())return ONLINE_FRONT;\n    return ON_SEGMENT;\n  }\n\n  bool intersect(Point p1,Point p2,Point p3,Point p4){\n    return (ccw(p1,p2,p3) * ccw(p1,p2,p4) <= 0 && \n            ccw(p3,p4,p1) * ccw(p3,p4,p2) <= 0);\n  }\n  bool intersect(Segment s1,Segment s2){ return intersect(s1.p1 , s1.p2 , s2.p1 , s2.p2); }\n\n  double getDistance(Vector a,Vector b){ return abs(a - b); }\n  double getDistanceLP(Line l,Point p){ return abs(cross(l.p2 - l.p1 , p - l.p1) / abs(l.p2 - l.p1)); }\n  double getDistanceSP(Segment s,Point p){\n    if(dot(s.p2 - s.p1,p - s.p1) < 0.0) return abs(p - s.p1);\n    if(dot(s.p1 - s.p2,p - s.p2) < 0.0) return abs(p - s.p2);\n    return getDistanceLP(s,p);\n  }\n  double getDistance(Segment s1,Segment s2){\n    if(intersect(s1,s2))return 0.0;\n    return min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),\n               min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n  }\n\n  Point getCrossPoint(Segment s1,Segment s2){\n    Vector base = s2.p2 - s2.p1;\n    double d1 = abs(cross(base,s1.p1 - s2.p1));\n    double d2 = abs(cross(base,s1.p2 - s2.p1));\n    double t = d1 / (d1 + d2);\n    return s1.p1 + (s1.p2 - s1.p1) * t;\n  }\n  pair<Point,Point> getCrossPoints(Circle c,Line l){\n    // assert(intersect(c,l));\n    Vector pr = project(l,c.c);\n    Vector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);\n    double base = sqrt(c.r * c.r - norm(pr - c.c));\n    return make_pair(pr + e * base , pr - e * base);\n  }\n\n  double arg(Vector p){ return atan2(p.y,p.x);}\n  Vector polar(double a,double r){ return Point(cos(r) * a, sin(r) * a); }\n\n  pair<Point,Point> getCrossPoints(Circle c1,Circle c2){\n    // assert(intersect(c1,c2));\n    double d = abs(c1.c - c2.c);\n    double a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n    double t = arg(c2.c - c1.c);\n    return make_pair(c1.c + polar(c1.r,t + a),c1.c + polar(c1.r,t - a));\n  }\n  \n  int contains(Polygon g,Point p){\n    int n = g.size();\n    bool x = false;\n    for(int i = 0;i < n;i++){\n      Point a = g[i] - p, b = g[(i + 1) % n] - p;\n      if(abs(cross(a,b)) < EPS && dot(a,b) < EPS)return 1;\n      if(a.y > b.y)swap(a,b);\n      if(a.y < EPS && EPS < b.y && cross(a,b) > EPS)x = !x;\n    }\n    return (x ? 2 : 0);\n  }\n\n  Polygon andrewScan(Polygon s){\n    Polygon u,l;\n    if(s.size() < 3)return s;\n    sort(s.begin(),s.end());\n    u.push_back(s[0]);\n    u.push_back(s[1]);\n\n    l.push_back(s[s.size() - 1]);\n    l.push_back(s[s.size() - 2]);\n\n    for(int i = 2;i < s.size();i++){\n      for(int n = u.size();n >= 2 && ccw(u[n-2],u[n-1],s[i]) != CLOCKWISE;n--){\n        u.pop_back();\n      }\n      u.push_back(s[i]);\n    }\n\n    for(int i = s.size() - 3; i >= 0;i--){\n      for(int n = l.size();n >= 2 && ccw(l[n-2],l[n-1],s[i]) != CLOCKWISE;n--){\n        l.pop_back();\n      }\n      l.push_back(s[i]);\n    }\n    reverse(l.begin(),l.end());\n    for(int i = u.size() - 2;i >= 1;i--)l.push_back(u[i]);\n    return l;\n  }\n\n  class EndPoint{\n  public:\n    Point p;\n    int seg,st;\n    EndPoint(){}\n    EndPoint(Point p,int seg,int st): p(p),seg(seg),st(st){}\n\n    bool operator < (const EndPoint &ep) const{\n      if(p.y == ep.p.y){\n        return st < ep.st;\n      }else{\n        return p.y < ep.p.y;\n      }\n    }\n  };\n\n  EndPoint EP[2 * 100000];\n\n  int manhattanIntersection(vector<Segment> S){\n    int n = S.size();\n    for(int i = 0,k = 0;i < n;i++){\n      if(S[i].p1.y == S[i].p2.y){\n        if(S[i].p1.x > S[i].p2.x)swap(S[i].p1,S[i].p2);\n      }else if(S[i].p1.y > S[i].p2.y){\n        swap(S[i].p1,S[i].p2);\n      }\n\n      if(S[i].p1.y == S[i].p2.y){\n        EP[k++] = EndPoint(S[i].p1,i,LEFT);\n        EP[k++] = EndPoint(S[i].p2,i,RIGHT);\n      }else{\n        EP[k++] = EndPoint(S[i].p1,i,BOTTOM);\n        EP[k++] = EndPoint(S[i].p2,i,TOP);\n      }\n    }\n\n    sort(EP,EP + (2 * n));\n\n    set<int> BT;\n    BT.insert(1000000001);\n    int cnt = 0;\n    for(int i = 0;i < 2 * n;i++){\n      if(EP[i].st == TOP){\n        BT.erase(EP[i].p.x);\n      }else if(EP[i].st == BOTTOM){\n        BT.insert(EP[i].p.x);\n      }else if(EP[i].st == LEFT){\n        set<int>::iterator b = lower_bound(BT.begin(),BT.end(),S[EP[i].seg].p1.x);\n        set<int>::iterator e = upper_bound(BT.begin(),BT.end(),S[EP[i].seg].p2.x);\n        cnt += distance(b,e);\n      }\n    }\n    return cnt;\n  }\n};\n\nusing namespace Geometry;\n\n/*\nPoint is OK.\nSegment is OK.\nCircle is OK.\n*/\n\nint main(){\n  Point a,b,c;\n  cin >> a >> b;\n  cin >> n;\n  rep(i,0,n){\n    cin >> c;\n    int res = ccw(a,b,c);\n    if(res == COUNTER_CLOCKWISE)puts(\"COUNTER_CLOCKWISE\");\n    else if(res == CLOCKWISE)puts(\"CLOCKWISE\");\n    else if(res == ONLINE_BACK)puts(\"ONLINE_BACK\");\n    else if(res == ONLINE_FRONT)puts(\"ONLINE_FRONT\");\n    else puts(\"ON_SEGMENT\");\n  }\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\nusing namespace std;\n#include<cstdio>\n#include<complex>\n\ntypedef double type_n;\ntypedef complex<type_n> point;\n\nint ccw(const point &a, const point &c, const point &z)\n{\n    point w;\n    w = (z - a) / c;\n    if(w.imag() > 0){ return 1; }\n    if(w.imag() < 1e12){ return -1; }\n    if(w.real() < 1e12){ return 2; }\n    if(w.real() > 1 - 1e12){ return -2; }\n    return 0;\n}\n\nint main()\n{\n    point a, b, c, z;\n    int i, q, crit;\n    type_n a1, a2, b1, b2, z1, z2;\n    scanf(\"%lf %lf %lf %lf\", &a1, &a2, &b1, &b2);\n    a.real(a1), a.imag(a2), b.real(b1), b.imag(b2);\n    c = b - a;\n\n    scanf(\"%d\", &q);\n    for(i = 0; i < q; i++){\n        scanf(\"%lf %lf\", &z1, &z2);\n        z.real(z1), z.imag(z2);\n        crit = ccw(a, c, z);\n        switch(crit){\n            case 1:\n                printf(\"COUNTER_CLOCKWISE\\n\");\n                break;\n            case -1:\n                printf(\"CLOCKWISE\\n\");\n                break;\n            case 2:\n                printf(\"ONLINE_BACK\\n\");\n                break;\n            case -2:\n                printf(\"ONLINE_FRONT\\n\");\n                break;\n            default:\n                printf(\"ON_SEGMENT\\n\");\n                break;\n        }\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#define for1(i, n) for(int i = 1; i <= (n);i++)\nusing namespace std;\nint q;\nsigned main() {\n\tdouble x1, x2, x3, y1, y2, y3;\n\tcin >> x1 >> y1 >> x2 >> y2 >> q;\n\tfor1(i, q) {\n\t\tcin >> x3 >> y3;\n\t\tif ((x1 - x2) * (y3 - y1) == (y1 - y2) * (x3 - x1)) {\n\t\t\tif ((x1 - x2) * (x1 - x3) < 0 || (y1 - y2) * (y1 - y3) < 0)cout << \"ONLINE_BACK\\n\";\n\t\t\telse if ((x2 - x1) * (x2 - x3) < 0 || (y2 - y1) * (y2 - y3) < 0)cout << \"ONLINE_FRONT\\n\";\n\t\t\telse cout << \"ON_SEGMENT\\n\";\n\t\t}\n\t\telse cout << ((x1 - x2) * (y3 - y1) < (y1 - y2) * (x3 - x1) ? \"COUNTER_C\" : \"C\") << \"LOCKWISE\\n\";\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define rep(i, a, b) for(int i = a; i < (b); ++i)\n#define trav(a, x) for(auto& a : x)\n#define all(x) x.begin(), x.end()\n#define sz(x) (int)(x).size()\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef vector<int> vi;\n\ntemplate<class T>\nstruct Point {\n\ttypedef Point P;\n\tT x, y;\n\texplicit Point(T x=0, T y=0) : x(x), y(y) {}\n\tbool operator<(P p) const { return tie(x,y) < tie(p.x,p.y); }\n\tbool operator==(P p) const { return tie(x,y)==tie(p.x,p.y); }\n\tP operator+(P p) const { return P(x+p.x, y+p.y); }\n\tP operator-(P p) const { return P(x-p.x, y-p.y); }\n\tP operator*(T d) const { return P(x*d, y*d); }\n\tP operator/(T d) const { return P(x/d, y/d); }\n\tT dot(P p) const { return x*p.x + y*p.y; }\n\tT cross(P p) const { return x*p.y - y*p.x; }\n\tT cross(P a, P b) const { return (a-*this).cross(b-*this); }\n\tT dist2() const { return x*x + y*y; }\n\tdouble dist() const { return sqrt((double)dist2()); }\n\t// angle to x-axis in interval [-pi, pi]\n\tdouble angle() const { return atan2(y, x); }\n\tP unit() const { return *this/dist(); } // makes dist()=1\n\tP perp() const { return P(-y, x); } // rotates +90 degrees\n\tP normal() const { return perp().unit(); }\n\t// returns point rotated 'a' radians ccw around the origin\n\tP rotate(double a) const {\n\t\treturn P(x*cos(a)-y*sin(a),x*sin(a)+y*cos(a)); }\n};\n\nusing P = Point<long long>;\n\nint main(){\n\tios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n\tcout << fixed << setprecision(15);\n\tP p0, p1;\n\tcin >> p0.x >> p0.y >> p1.x >> p1.y;\n\tint q;\n\tcin >> q;\n\tfor(int i = 0; i < q; i++){\n\t\tP p2;\n\t\tcin >> p2.x >> p2.y;\n\t\tlong long x = (p1 - p0).cross(p2 - p0);\n\t\tif(x > 0){\n\t\t\tcout << \"COUNTER_CLOCKWISE\" << '\\n';\n\t\t} else if(x < 0){\n\t\t\tcout << \"CLOCKWISE\" << '\\n';\n\t\t} else {\n\t\t\tlong long v1 = (p1 - p0).dot(p1 - p0);\n\t\t\tlong long v2 = (p2 - p0).dot(p1 - p0);\n\t\t\tif(v1 < 0){\n\t\t\t\tv1 = -v1; v2 = -v2;\n\t\t\t}\n\t\t\tif(v2 < 0){\n\t\t\t\tcout << \"ONLINE_BACK\" << '\\n';\n\t\t\t} else if(v2 > v1){\n\t\t\t\tcout << \"ONLINE_FRONT\" << '\\n';\n\t\t\t} else {\n\t\t\t\tcout << \"ON_SEGMENT\" << '\\n';\n\t\t\t}\n\t\t}\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nconst double eps = 1e-10;\nbool dcmp(double d, double d2 = 0) { return abs(d - d2) < eps; }\n\nstruct vec {\n  double x, y;\n  vec(double x, double y) : x(x), y(y) {}\n  vec() : x(0), y(0) {}\n  const bool operator==(const vec &v) const {\n    return dcmp(x, v.x) && dcmp(y, v.y);\n  }\n  const bool operator!=(const vec &v) const { return !(*this == v); }\n  const vec operator+(const vec &v) const { return vec(x + v.x, y + v.y); }\n  const vec operator-() const { return vec(-x, -y); }\n  const vec operator-(const vec &v) const { return *this + (-v); }\n  const vec operator*(const double d) const { return vec(x * d, y * d); }\n  const vec operator/(const double d) const { return *this * (1 / d); }\n  const vec unit() const { return *this / len(); };\n  const double len() const { return sqrt(x * x + y * y); }\n  const double dot(const vec &v) const { return x * v.x + y * v.y; }\n  const double cross(const vec &v) const { return x * v.y - y * v.x; }\n  const bool parallel(const vec &v) const { return dcmp(cross(v)); }\n};\n\ntypedef vec point;\n\npoint p1, p2;\nvec v;\n\nint main() {\n  cin >> p1.x >> p1.y >> p2.x >> p2.y;\n  v = p2 - p1;\n  int q;\n  cin >> q;\n  for (int i = 0; i < q; i++) {\n    point p;\n    cin >> p.x >> p.y;\n    vec v2 = p - p1;\n    double d = v.cross(v2);\n    if (p == p1 || p == p2)\n      puts(\"ON_SEGMENT\");\n    else if (d > 0)\n      puts(\"COUNTER_CLOCKWISE\");\n    else if (d < 0)\n      puts(\"CLOCKWISE\");\n    else {\n      if (v.unit() != v2.unit())\n        puts(\"ONLINE_BACK\");\n      else if (v2.len() <= v.len())\n        puts(\"ON_SEGMENT\");\n      else\n        puts(\"ONLINE_FRONT\");\n    }\n  }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <string>\n#include <cstring>\n#include <cstdlib>\n#include <cmath>\n#include <algorithm>\n#include <vector>\n#include <set>\n#include <map>\n#include <queue>\n#include <stack>\n#include <list>\n#include <iterator>\n#include <cassert>\n#include <numeric>\n#include <functional>\n//#include <numeric>\n#pragma warning(disable:4996) \n \ntypedef long long ll;\ntypedef unsigned long long ull;\n#define MIN(a, b) ((a)>(b)? (b): (a))\n#define MAX(a, b) ((a)<(b)? (b): (a))\n#define LINF  9223300000000000000\n#define LINF2 1223300000000000000\n#define LINF3 1000000000000\n#define INF 2140000000\nconst long long MOD = 1000000007;\n//const long long MOD = 998244353;\n\nusing namespace std;\n\nvoid vecscl(double c, const double v0[2], double v1[2])\n{\n    v1[0] = v0[0] * c;\n    v1[1] = v0[1] * c;\n}\n\nvoid vecadd(const double v0[2], const double v1[2], double v2[2])\n{\n    v2[0] = v0[0] + v1[0];\n    v2[1] = v0[1] + v1[1];\n}\n\nvoid vecsub(const double v0[2], const double v1[2], double v2[2])\n{\n    v2[0] = v0[0] - v1[0];\n    v2[1] = v0[1] - v1[1];\n}\n\ndouble vecprd(const double v0[2], const double v1[2])\n{\n    return v0[0] * v1[1] - v0[1] * v1[0];\n}\n\ndouble vecsum(const double v0[2], const double v1[2])\n{\n    return v0[0] * v1[0] + v0[1] * v1[1];\n}\n\ndouble veclen(const double v[2])\n{\n    return sqrt(v[0] * v[0] + v[1] * v[1]);\n}\n\nbool vecnrm(double eps, const double v0[2], double v1[2])\n{\n    double len = veclen(v0);\n    if (len < eps) {\n        return false;\n    }\n    vecscl(1 / len, v0, v1);\n    return true;\n}\n\nconst double eps = 1e-12;\n\nvoid solve()\n{\n    int x0, y0, x1, y1;\n    scanf(\"%d%d%d%d\", &x0, &y0, &x1, &y1);\n    double p0[2] = { (double)x0, (double)y0 };\n    double p1[2] = { (double)x1, (double)y1 };\n    double v01[2];\n    vecsub(p1, p0, v01);\n\n    int Q;\n    scanf(\"%d\", &Q);\n    int t;\n    for (t = 0; t < Q; t++) {\n        int x, y;\n        scanf(\"%d%d\", &x, &y);\n        double v[2] = { (double)x, (double)y };\n        double v02[2];\n        vecsub(v, p0, v02);\n\n        double tmp=vecprd(v01, v02);\n        if (tmp > eps) {\n            printf(\"COUNTER_CLOCKWISE\\n\");\n        }\n        else if (tmp < -eps) {\n            printf(\"CLOCKWISE\\n\");\n        }\n        else {\n            double tmp2 = vecsum(v01, v02);\n            if (tmp2 < -eps) {\n                printf(\"ONLINE_BACK\\n\");\n            }\n            else {\n                double v12[2];\n                vecsub(v, p1, v12);\n                double tmp3 = vecsum(v01, v12);\n                if (tmp3 > eps) {\n                    printf(\"ONLINE_FRONT\\n\");\n                }\n                else {\n                    printf(\"ON_SEGMENT\\n\");\n                }\n            }\n        }\n    }\n\n    return;\n}\n\n\nint main(int argc, char* argv[])\n{\n#if 1\n    solve();\n#else\n    int T;\n    scanf(\"%d\", &T);\n    int t;\n    for(t=0; t<T; t++) {\n        //printf(\"Case #%d: \", t+1);\n        solve();\n    }\n#endif\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "\n\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> P;\n#define x real()\n#define y imag()\n \nstring ccw(P a,P b,P c){\n  P ab=b-a,ac=c-a;\n  P k=ac*conj(ab);\n  if(k.y>0)return \"COUNTER_CLOCKWISE\";\n  if(k.y<0)return \"CLOCKWISE\";\n  if(k.x<0)return \"ONLINE_BACK\";\n  if(abs(ab)<abs(ac))return \"ONLINE_FRONT\";\n  return \"ON_SEGMENT\";\n}\n \nint main(){\n  double x0,y0,x1,y1,x2,y2;\n  cin>>x0>>y0>>x1>>y1;\n  P a(x0,y0);\n  P b(x1,y1);\n  int n;\n  cin>>n;\n  while(n--){\n    cin>>x2>>y2;\n    P c(x2,y2);\n    cout<< ccw(a,b,c) <<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define eps (1e-10)\nusing namespace std;\nclass Point\n{\n\tpublic:\n\tdouble x,y;\n\tPoint(double _x=0,double _y=0):x(_x),y(_y){}\n\tPoint operator + (Point p){ return Point(x+p.x,y+p.y);} \n\tPoint operator - (Point p){ return Point(x-p.x,y-p.y);}\n\tPoint operator * (double a){return Point(a*x,a*y);} \n\tPoint operator / (double a){return Point(x/a,y/a);}\n\tdouble norm(){return x*x+y*y;}\n\tdouble ABS(){return sqrt(norm());} //俩点间的距离 \n};\nstruct Segment\n{\n\tPoint p1,p2;\t\n};\n\ndouble dot(Point a,Point b)//求内积 \n{\n\treturn a.x*b.x+a.y*b.y;\n}\n//外积的值为a与b向量构成的平行四边形面积的值 \ndouble cross(Point a,Point b)//求外积 \n{\n\treturn a.x*b.y-a.y*b.x;\n} \n\n\n//判断是否正交 向量内积：a*b=|a||b|*cos(Y) 当cos为0时正交(90,-90垂直) \n//a*b=a.x*b.x+a.y*b.y;\nbool solve1(Point a,Point b)//是否正交 \n{\n\tdouble f=a.x*b.x+a.y*b.y; \n\tif(fabs(f-0.0)<eps) return true;\n\telse return false;\n}\n//判断是否平行  向量外积：|a*b|=|a||b|sin(Y) 当sin为0时平行(180,0平行)\n//|a*b|=|a|*|b|*sin(Y) \nbool solve2(Point a,Point b)//是否平行 \n{\n\tdouble f=a.x*b.y-a.y*b.x;\n\tif(fabs(f-0.0)<eps) return true;\n\telse return false;\n}\n\n/*\n求垂足x：对于给定的三点p1,p2,p从点p向通过p1,p2的直线引一条垂线\nbase=p2-p1;\nhypo=p-p1;\n x=s.p1+base*(hypo*base/|base|^2); hypo*base 可以用向量内积求 \n*/\nPoint solve3(Segment s,Point p)//求投影点 \n{\n\tPoint base=s.p2-s.p1;\n\tdouble r=dot(p-s.p1,base)/base.norm();\n\treturn s.p1+base*r; \n}\n/*\n求投影点x：对于给定的三点p1,p2,p从点p向通过p1,p2的直线为对称轴与点p\n成线对称点为x \n通过求solve3的垂足延长一倍就可以求x \n*/\nPoint solve4(Segment s,Point p)//求映象 \n{\n\treturn p+(solve3(s,p)-p)*2.0;\n}\n\n/*\n点a与点b之间的距离等于向量a-b或b-a的绝对值。 \n*/ \ndouble getdis(Point a,Point b)//求俩点间的距离                    \n{\n\treturn (a-b).ABS();\n} \n\n/*\n设直线p1 p2上的向量为a=p2-p1,p与p1构成的向量b=p-p1\n则点p与直线p1p2的距离d就等于a,b构成的平行四边形的高\n用a与b外积的大小(平行四边形的面积)除以a的大小|a|即可求出高d\nd=|a*b|/|a|=|(p2-p1)*(p-p1)|/|p2-p1|; \n*/\n//注意：这里Segmet s是不规范的应该是 Line s 才对 \ndouble getdis_Li(Segment s,Point p)//点与直线的距离 \n{\n\treturn abs(cross(s.p2-s.p1,p-s.p1)/(s.p2-s.p1).ABS());\n}\nint ccw(Point p0,Point p1,Point p2)\n{\n\tPoint a=p1-p0;\n\tPoint b=p2-p0;\n\tif(cross(a,b)>eps) return 1;\n\tif(cross(a,b)<-eps) return -1;\n\tif(dot(a,b)<-eps) return 2;\n\tif(a.norm()<b.norm()) return -2;\n\treturn 0;\n\t\n}\nint main()\n{\n\tdouble x1,y1,x2,y2;\n\tscanf(\"%lf %lf %lf %lf\",&x1,&y1,&x2,&y2);\n\tPoint p1(x1,y1),p2(x2,y2);\n\tint T;scanf(\"%d\",&T);\n\twhile(T--){\n\t\tint x,y;\n\t\tscanf(\"%d %d\",&x,&y);\n\t\tPoint p(x,y);\n\t\tif(ccw(p1,p2,p)==1) printf(\"COUNTER_CLOCKWISE\\n\");\n\t\telse if(ccw(p1,p2,p)==-1) printf(\"CLOCKWISE\\n\");\n\t\telse if(ccw(p1,p2,p)==2) printf(\"ONLINE_BACK\\n\");\n\t\telse if(ccw(p1,p2,p)==-2) printf(\"ONLINE_FRONT\\n\");\n\t\telse printf(\"ON_SEGMENT\\n\");\n\t} \n\t\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nstruct F {\n\tlong long a, b;\n\tF() {}\n\tF(long long _a, long long _b) : a(_a), b(_b) {}\n\tF operator + (const F &f) {\n\t\tlong long x = a * f.a, y = b * f.a + a * f.b;\n\t\tlong long g = __gcd(x, y);\n\t\treturn F(x / g, y / g);\n\t}\n\tF operator - (const F &f) {\n\t\tlong long x = a * f.a, y = b * f.a - a * f.b;\n\t\tlong long g = __gcd(x, y);\n\t\treturn F(x / g, y / g);\n\t}\n\tF operator * (const F &f) {\n\t\tlong long x = a * f.a, y = b * f.b;\n\t\tlong long g = __gcd(x, y);\n\t\treturn F(x / g, y / g);\n\t}\n\tF operator / (const F &f) {\n\t\tlong long x = a * f.b, y = b * f.a;\n\t\tlong long g = __gcd(x, y);\n\t\treturn F(x / g, y / g);\n\t}\n};\nconst double pi = acos(-1);\nconst double eps = 1e-8;\ninline int sign(double a) {\n\treturn a < -eps ? -1 : a > eps;\n}\ninline int cmp(double a, double b) {\n\treturn sign(a - b);\n}\ndouble add(double a, double b) {\n\tif (abs(a + b) < eps * (abs(a) + abs(b))) return 0;\n\treturn a + b;\n}\ntypedef long long data;\nstruct P {\n\tdata x, y;\n\tP() {}\n\tP(data x, data y) : x(x), y(y) {}\n\tP operator + (const P &p) { return P(add(x, p.x), add(y, p.y)); }\n\tP operator - (const P &p) { return P(add(x, -p.x), add(y, -p.y)); }\n\tP operator * (data d) { return P(x * d, y * d); }\n\tP operator / (data d) { return P(x / d, y / d); }\n\tdata dot(const P &p) { return add(x * p.x, y * p.y); }\n\tdata det(const P &p) { return add(x * p.y, -y * p.x); }\n\tdata alpha() { return atan2(y, x); }\n\tdata abs() { return sqrt(abs2()); }\n\tdata abs2() { return x * x + y * y; }\n\tP rot90() { P(-y, x); }\n\tP unit() { return *this / abs(); }\n\tbool operator < (P p) const {\n\t\tint c = cmp(x, p.x);\n\t\tif (c) return c == -1;\n\t\treturn cmp(y, p.y) == -1;\n\t}\n\tfriend istream& operator>>(istream &in, P &p) {\n\t\tin >> p.x >> p.y;\n\t\treturn in;\n\t}\n\tfriend ostream& operator<<(ostream& out, P &p) {\n\t\tout << p.x << ' ' << p.y;\n\t\treturn out;\n\t}\n};\nP projection(P p1, P p2, P q) {\n\tP dir = p2 - p1;\n\treturn p1 + dir * (dir.dot(q - p1) / dir.abs2());\n}\nP reflection(P p1, P p2, P q) {\n\treturn projection(p1, p2, q) * 2 - q;\n}\ndouble dist(const P &a, const P &b) {\n\tdouble x = a.x - b.x, y = a.y - b.y;\n\treturn sqrt(add(x * x,  y * y));\n}\nbool on_seg(P p1, P p2, P q) {\n\treturn (p1 - q).det(p2 - q) == 0 && (p1 - q).dot(p2 - q) <= 0;\n}\nP intersection(P p1, P p2, P q1, P q2) {\n\treturn p1 + (p2 - p1) * ((q2 - q1).det(q1 - p1) / (q2 - q1).det(p2 - p1));\n}\n\nint main() {\n#ifdef LOCAL_DEFINE\n\t//freopen(\"data.in\", \"rt\", stdin);\n\t//freopen(\"data.out\", \"w\", stdout);\n\tauto _start = chrono::high_resolution_clock::now();\n#endif\n\n\tios::sync_with_stdio(false);\n\tcin.tie(0);\n\tcout << fixed << setprecision(15);\n\tP p0, p1;\n\tcin >> p0 >> p1;\n\tint q;\n\tcin >> q;\n\tP v1 = p1 - p0;\n\twhile (q--) {\n\t\tP p2;\n\t\tcin >> p2;\n\t\tP v2 = p2 - p0;\n\t\tif(v1.det(v2) > 0) {\n\t\t\tcout << \"COUNTER_CLOCKWISE\\n\";\n\t\t} else if(v1.det(v2) < 0) {\n\t\t\tcout << \"CLOCKWISE\\n\";\n\t\t} else {\n\t\t\tif(v1.dot(v2) < 0) {\n\t\t\t\tcout << \"ONLINE_BACK\\n\";\n\t\t\t} else if((p0 - p1).dot(p2 - p1) < 0) {\n\t\t\t\tcout << \"ONLINE_FRONT\\n\";\t\n\t\t\t} else if((p0 - p2).dot(p1 - p2) <= 0) {\n\t\t\t\tcout << \"ON_SEGMENT\\n\";\n\t\t\t}\n\t\t}\n\t}\n\n#ifdef LOCAL_DEFINE\n\tauto _end = chrono::high_resolution_clock::now();\n\tcerr << \"elapsed time: \" << chrono::duration<double, milli>(_end - _start).count() << \" ms\\n\";\n#endif\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "// This is free and unencumbered software released into the public domain.\n\n// Anyone is free to copy, modify, publish, use, compile, sell, or\n// distribute this software, either in source code form or as a compiled\n// binary, for any purpose, commercial or non-commercial, and by any\n// means.\n\n// In jurisdictions that recognize copyright laws, the author or authors\n// of this software dedicate any and all copyright interest in the\n// software to the public domain. We make this dedication for the benefit\n// of the public at large and to the detriment of our heirs and\n// successors. We intend this dedication to be an overt act of\n// relinquishment in perpetuity of all present and future rights to this\n// software under copyright law.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n// IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\n// OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\n// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n// OTHER DEALINGS IN THE SOFTWARE.\n\n// For more information, please refer to <http://unlicense.org>\n\n#include <algorithm>\n#include <complex>\n#include <vector>\n\nusing namespace std;\n\n#define X real()\n#define Y imag()\n\ntypedef long double Real;\ntypedef complex<Real> Point;\nstruct Line {\n  Point a, b;\n  bool operator<(const Line &line) const;\n};\ntypedef vector<Point> Polygon;\n\nconstexpr Real PI = acos(Real(-1));\n\n// 比較関数\nint sgn(const Real &a, const Real &b = 0) {\n  constexpr Real EPS = 1e-8;\n  return a < b - EPS ? -1 : a > b + EPS ? 1 : 0;\n}\n\nbool near(const Point &a, const Point &b) { return !sgn(norm(a - b)); }\nnamespace std {\nbool operator<(const Point &a, const Point &b) {\n  return sgn(a.X, b.X) ? a.X < b.X : a.Y < b.Y;\n}\n} // namespace std\n\nbool Line::operator<(const Line &line) const {\n  return !near(a, line.a) ? a < line.a : b < line.b;\n}\n\n// 平方根\nReal sr(const Real &a) { return sqrt(max<Real>(a, 0)); }\n\n// 内積\nReal dot(const Point &a, const Point &b) { return a.X * b.X + a.Y * b.Y; }\n// 外積\nReal det(const Point &a, const Point &b) { return a.X * b.Y - a.Y * b.X; }\n\n// 線分のベクトル\nPoint vec(const Line &a) { return a.b - a.a; }\n\n// 線分abに対する点cの位置\nenum CCW { FRONT = 1, RIGHT = 2, BACK = 4, LEFT = 8, ON = 16 };\nint ccw(const Point &a, const Point &b, const Point &c) {\n  if (near(a, c) || near(b, c)) {\n    return ON;\n  }\n  int s = sgn(det(b - a, c - a));\n  if (s) {\n    return s > 0 ? LEFT : RIGHT;\n  }\n  return (a < b) == (b < c) ? FRONT : (c < a) == (a < b) ? BACK : ON;\n}\nint ccw(const Line &l, const Point &p) { return ccw(l.a, l.b, p); }\n\n// 有向角度\nReal arg(const Point &base, const Point &a, const Point &b) {\n  return arg((b - base) / (a - base));\n}\n\nLine sortBase;\nbool lessArg(const Point &a, const Point &b) {\n  Real ang1 = arg(sortBase.a, sortBase.b, a);\n  Real ang2 = arg(sortBase.a, sortBase.b, b);\n  return sgn(ang1, ang2) ? ang1 < ang2 : norm(a) > norm(b);\n}\n\n// 射影\nPoint proj(const Line &l, const Point &p) {\n  auto v = vec(l);\n  return l.a + ((p - l.a) / v).X * v;\n}\nPoint refl(const Line &l, const Point &p) {\n  auto v = vec(l);\n  return l.a + conj((p - l.a) / v) * v;\n}\n\n// 交差判定\nbool eqL(const Line &a, const Line &b) {\n  return !sgn(det(vec(a), vec(b))) && !sgn(det(vec(a), b.a - a.a));\n}\nbool iLL(const Line &a, const Line &b) {\n  return sgn(det(vec(a), vec(b))) || !sgn(det(vec(a), b.a - a.a));\n}\nbool iLLs(const Line &a, const Line &b) { return sgn(det(vec(a), vec(b))); }\nbool iLS(const Line &a, const Line &b) {\n  return sgn(det(vec(a), b.a - a.a)) * sgn(det(vec(a), b.b - a.a)) <= 0;\n}\nbool iLSs(const Line &a, const Line &b) {\n  return sgn(det(vec(a), b.a - a.a)) * sgn(det(vec(a), b.b - a.a)) < 0;\n}\nbool iSS(const Line &a, const Line &b) {\n  int cwa = ccw(a.a, a.b, b.a) | ccw(a.a, a.b, b.b);\n  int cwb = ccw(b.a, b.b, a.a) | ccw(b.a, b.b, a.b);\n  return ((cwa | cwb) & ON) || ((cwa & cwb) == (LEFT | RIGHT));\n}\nbool iSSs(const Line &a, const Line &b) {\n  int cwa = ccw(a.a, a.b, b.a) | ccw(a.a, a.b, b.b);\n  int cwb = ccw(b.a, b.b, a.a) | ccw(b.a, b.b, a.b);\n  return (cwa & cwb) == (LEFT | RIGHT);\n}\n\n// 交点\nPoint pLL(const Line &a, const Line &b) {\n  return a.a + vec(a) * (det(vec(b), b.a - a.a) / det(vec(b), vec(a)));\n}\n\n// 距離\nReal dLP(const Line &l, const Point &p) {\n  return abs(det(vec(l), p - l.a) / vec(l));\n}\nReal dSP(const Line &s, const Point &p) {\n  if (dot(vec(s), p - s.a) < 0) {\n    return abs(p - s.a);\n  }\n  if (dot(vec(s), p - s.b) > 0) {\n    return abs(p - s.b);\n  }\n  return dLP(s, p);\n}\nReal dLL(const Line &a, const Line &b) {\n  if (iLL(a, b)) {\n    return 0;\n  }\n  return dLP(a, b.a);\n}\nReal dLS(const Line &a, const Line &b) {\n  if (iLS(a, b)) {\n    return 0;\n  }\n  return min(dLP(a, b.a), dLP(a, b.b));\n}\nReal dSS(const Line &a, const Line &b) {\n  if (iSS(a, b)) {\n    return 0;\n  }\n  return min({dSP(a, b.a), dSP(a, b.b), dSP(b, a.a), dSP(b, a.b)});\n}\n\n// 円\nstruct Circle {\n  Point c;\n  Real r;\n};\n\n// 交差判定\nbool iCP(const Circle &c, const Point &p) {\n  return sgn(abs(p - c.c), c.r) <= 0;\n}\nbool iCL(const Circle &c, const Line &l) { return sgn(c.r, dLP(l, c.c)) >= 0; }\nbool iCS(const Circle &c, const Line &s) { return sgn(c.r, dSP(s, c.c)) >= 0; }\nbool iCSc(const Circle &c, const Line &s) {\n  return iCS(c, s) && sgn(c.r, max(abs(s.a - c.c), abs(s.b - c.c))) >= 0;\n}\nbool iCC(const Circle &a, const Circle &b) {\n  return sgn(abs(a.c - b.c), a.r + b.r) <= 0;\n}\nbool iCCc(const Circle &a, const Circle &b) {\n  return iCC(a, b) && sgn(abs(a.c - b.c), abs(a.r - b.r)) >= 0;\n}\n\n// 交点\npair<Point, Point> pCC(const Circle &a, const Circle &b) {\n  Real x = (norm(a.c - b.c) + a.r * a.r - b.r * b.r) / (2 * abs(a.c - b.c));\n  Point e = (b.c - a.c) / abs(b.c - a.c);\n  Point y = e * Point(0, sr(a.r * a.r - x * x));\n  return make_pair(a.c + e * x - y, a.c + e * x + y);\n}\npair<Point, Point> pCL(const Circle &c, const Line &l) {\n  Point x = proj(l, c.c);\n  Point y = vec(l) / abs(vec(l)) * sr(c.r * c.r - norm(x - c.c));\n  return make_pair(x - y, x + y);\n}\n\n// 角の内外判定 角abの内部にあれば正、辺上は0、外部は負\nint sAP(const Point &a, const Point &b, const Point &c) {\n  return sgn(det(a, c)) - sgn(det(b, c)) - sgn(det(a, b));\n}\n\n// 多角形の面積\nReal aPol(const Polygon &vp) {\n  Real res = 0;\n  for (int i = 0; i < int(vp.size()); ++i) {\n    res += det(vp[i], vp[(i + 1) % vp.size()]);\n  }\n  return res / 2;\n}\n\n// 多角形の内外判定 内部:1、周上:0、外部:-1\nint sGP(const Polygon &pol, const Point &p) {\n  int side = -1;\n  for (int i = 0; i < int(pol.size()); ++i) {\n    Point p0 = pol[i] - p, p1 = pol[(i + 1) % pol.size()] - p;\n    if (ccw(p0, p1, 0) == ON) {\n      return 0;\n    }\n    if (p0.Y > p1.Y) {\n      swap(p0, p1);\n    }\n    if (sgn(p0.Y) <= 0 && 0 < sgn(p1.Y) && sgn(det(p0, p1)) > 0) {\n      side *= -1;\n    }\n  }\n  return side;\n}\n\n// 凸包\nPolygon convexHull(vector<Point> p) {\n  int m = -1, n = p.size();\n  if (n < 3) {\n    return p;\n  }\n  vector<Point> q(n * 2);\n  sort(p.begin(), p.end());\n  for (int i = 0; i < n; q[++m] = p[i++]) {\n    for (; m > 0 && ccw(q[m - 1], q[m], p[i]) != LEFT; --m) {\n      ;\n    }\n  }\n  for (int i = n - 2, r = m; i >= 0; q[++m] = p[i--]) {\n    for (; m > r && ccw(q[m - 1], q[m], p[i]) != LEFT; --m) {\n      ;\n    }\n  }\n  q.resize(m);\n  return q;\n}\n\n// 凸多角形切断\nPolygon convexCut(const Polygon &p, const Line &l) {\n  vector<Point> q;\n  for (int i = 0; i < int(p.size()); ++i) {\n    if (ccw(l.a, l.b, p[i]) != RIGHT) {\n      q.push_back(p[i]);\n    }\n    Line s = {p[i], p[(i + 1) % p.size()]};\n    if (iLSs(l, s)) {\n      q.push_back(pLL(l, s));\n    }\n  }\n  return q;\n}\n\n// 線分をマージする\nvector<Line> merge(vector<Line> s) {\n  for (int i = 0; i < int(s.size()); ++i) {\n    if (s[i].b < s[i].a) {\n      swap(s[i].a, s[i].b);\n    }\n  }\n  sort(s.begin(), s.end());\n  for (int i = 0; i < int(s.size()); ++i) {\n    for (int j = 0; j < i; ++j) {\n      if (iSS(s[i], s[j]) && !iLLs(s[i], s[j])) {\n        s[j].b = max(s[i].b, s[j].b);\n        s.erase(s.begin() + i--);\n        break;\n      }\n    }\n  }\n  return s;\n}\n\n// 線分アレンジメント 隣の点への辺のみを持つ\nvector<vector<int>> sArr(vector<Line> s, vector<Point> &vp) {\n  s = merge(s);\n  for (int i = 0; i < int(s.size()); ++i) {\n    vp.push_back(s[i].a);\n    vp.push_back(s[i].b);\n  }\n  for (int i = 0; i < int(s.size()); ++i) {\n    for (int j = 0; j < i; ++j) {\n      if (iSS(s[i], s[j])) {\n        vp.push_back(pLL(s[i], s[j]));\n      }\n    }\n  }\n  sort(vp.begin(), vp.end());\n  vp.erase(unique(vp.begin(), vp.end(), near), vp.end());\n  vector<vector<int>> graph(vp.size());\n  for (int i = 0; i < int(s.size()); ++i) {\n    vector<pair<Real, int>> v;\n    for (int j = 0; j < int(vp.size()); ++j) {\n      if (ccw(s[i].a, s[i].b, vp[j]) == ON) {\n        v.push_back(make_pair(norm(vp[j] - s[i].a), j));\n      }\n    }\n    sort(v.begin(), v.end());\n    for (int j = 0; j < int(v.size()) - 1; ++j) {\n      graph[v[j + 1].second].push_back(v[j].second);\n      graph[v[j].second].push_back(v[j + 1].second);\n    }\n  }\n  return graph;\n}\n\n#include <iomanip>\n#include <iostream>\n\nint main() {\n  Real p1x, p1y, p2x, p2y;\n  cin >> p1x >> p1y >> p2x >> p2y;\n  Line line{Point(p1x, p1y), Point(p2x, p2y)};\n  int q;\n  cin >> q;\n  for (int i = 0; i < q; ++i) {\n    Real x, y;\n    cin >> x >> y;\n    Point p(x, y);\n    switch (ccw(line, p)) {\n    case LEFT:\n      cout << \"COUNTER_CLOCKWISE\" << endl;\n      break;\n    case RIGHT:\n      cout << \"CLOCKWISE\" << endl;\n      break;\n    case BACK:\n      cout << \"ONLINE_BACK\" << endl;\n      break;\n    case FRONT:\n      cout << \"ONLINE_FRONT\" << endl;\n      break;\n    case ON:\n      cout << \"ON_SEGMENT\" << endl;\n      break;\n    }\n  }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <cmath>\nusing namespace std;\n\n#define EPS 1e-10\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\ntypedef double Type;\n\nint sign(Type x)\n{\n    return x<-EPS?-1:(x>EPS?1:0);\n}\n\nstruct Point\n{\n    Type x,y;\n    Point(Type x,Type y):x(x),y(y) {}\n    Point() {}\n    void read()\n    {\n        scanf(\"%lf %lf\",&x,&y);\n    }\n    bool operator==(const Point& p) const\n    {\n        return sign(x-p.x)==0&&sign(y-p.y)==0;\n    }\n    Point operator-(const Point& p) const\n    {\n        return Point(x-p.x,y-p.y);\n    }\n    Point operator*(const Type t) const\n    {\n        return Point(t*x,t*y);\n    }\n    Point operator+(const Point & p) const\n    {\n        return Point(x+p.x,y+p.y);\n    }\n    bool operator<(const Point& p) const\n    {\n        return sign(x-p.x)==0?sign(y-p.y)<0:sign(x-p.x)<0;\n    }\n};\n\nostream& operator<<(ostream& out,Point p)\n{\n    out<<p.x<<\" \"<<p.y;\n    return out;\n}\n\ntypedef Point Vector;\n\nstruct Line\n{\n    Point a,b;\n    Line() {}\n    Line(Point a,Point b):a(a),b(b) {}\n};\n\ntypedef Line SegMent;\n\n//叉?\nType Cross(Vector a,Vector b)\n{\n    return a.x*b.y-a.y*b.x;\n}\n\n//点?\nType Dot(Vector a,Vector b)\n{\n    return a.x*b.x+a.y*b.y;\n}\n\n//?度\nType Length(Vector v)\n{\n    return sqrt(v.x*v.x+v.y*v.y);\n}\n\nint ccw(Point p0,Point p1,Point p2)\n{\n    Vector a=p1-p0;\n    Vector b=p2-p0;\n    if(Cross(a,b)>EPS)\n        return COUNTER_CLOCKWISE;\n    if(Cross(b,a)>EPS)\n        return CLOCKWISE;\n    if(Dot(a,b)<-EPS)\n        return ONLINE_BACK;\n    if(Length(a)<Length(b))\n        return ONLINE_FRONT;\n    if(Length(a)>Length(b))\n        return ON_SEGMENT;\n}\n\nint main()\n{\n    Point p0,p1,p2;\n    p0.read();\n    p1.read();\n    int q;\n    scanf(\"%d\",&q);\n    while(q--)\n    {\n        p2.read();\n        int flag=ccw(p0,p1,p2);\n        if(flag==COUNTER_CLOCKWISE)\n            puts(\"COUNTER_CLOCKWISE\");\n        if(flag==CLOCKWISE)\n            puts(\"CLOCKWISE\");\n        if(flag==ONLINE_BACK)\n            puts(\"ONLINE_BACK\");\n        if(flag==ONLINE_FRONT)\n            puts(\"ONLINE_FRONT\");\n        if(flag==ON_SEGMENT)\n            puts(\"ON_SEGMENT\");\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define REP(i,a,b) for(int i=a;i<b;i++)\n#define rep(i,n) REP(i,0,n)\n\ntypedef complex<double> P;\n\n#define EPS (1e-7)\n\nbool operator < (P const& a, P const& b) {\n  return (a.real() != a.real()) ? a.real() < b.real() : a.imag() < b.imag();\n}\n\ndouble dot(P const& a, P const& b) {\n  return real(conj(a)*b);\n}\n\ndouble cross(P const& a, P const& b) {\n  return imag(conj(a)*b);\n}\n\nint ccw(P const& a, P const& b, P const& c) {\n  b -= a, c -= a;\n  if(cross(b, c) > -EPS) return +1; // counter clockwise\n  if(cross(b, c) < EPS) return -1;  // clockwise\n  if(dot(b, c) < EPS) return +2;    // c-a-b\n  if(norm(b) < norm(c)) return -2;  // a-b-c\n  return 0; // on segment\n}\n\nint main () {\n  \n  P p0, p1; cin >> p0.real() >> p0.imag() >> p1.real() >> p1.imag();\n  int q; cin >> q;\n  rep(i,q) {\n    P p3; cin >> p3.real() >> p3.imag();\n    int ret = ccw(p0, p1, p3);\n    if(ret == +1) cout << \"COUNTER_CLOCKWISE\\n\";\n    if(ret == -1) cout << \"CLOCKWISE\\n\";\n    if(ret == +2) cout << \"ONLINE_BACK\\n\";\n    if(ret == -2) cout << \"ONLINE_FRONT\\n\";\n    if(ret == 0) cout << \"ON_SEGMENT\\n\";\n  }\n  \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define ll long long\n#define INF 1000000005\n#define MOD 1000000007\n#define EPS 1e-10\n#define rep(i,n) for(int i=0;i<n;++i)\n\nusing namespace std;\n\ntypedef pair<int,int>P;\ntypedef pair<ll,ll>pll;\n\nconst int MAX_N = 100005;\n\nint Q;\n\nvoid ccw(pll p0,pll p1,pll p2)\n{\n\tpll a = pll(p1.first - p0.first,p1.second - p0.second);\n\tpll b = pll(p2.first - p0.first,p2.second - p0.second);\n\tll dot = a.first*b.first+a.second*b.second;\n\tll cross = a.first*b.second - a.second*b.first;\n\tll na = a.first*a.first+a.second*a.second;\n\tll nb = b.first*b.first+b.second*b.second;\n\tif(cross > EPS){\n\t\tprintf(\"COUNTER_CLOCKWISE\\n\");\n\t}else if(cross < -EPS){\n\t\tprintf(\"CLOCKWISE\\n\");\n\t}else if(dot < -EPS){\n\t\tprintf(\"ONLINE_BACK\\n\");\n\t}else if(na < nb){\n\t\tprintf(\"ONLINE_FRONT\\n\");\n\t}else{\n\t\tprintf(\"ON_SEGMENT\\n\");\n\t}\n}\n\nint main()\n{\n\tpll p0,p1,p2;\n\tscanf(\"%lld%lld%lld%lld\",&p0.first,&p0.second,&p1.first,&p1.second);\n\tscanf(\"%d\",&Q);\n\trep(i,Q){\n\t\tscanf(\"%lld%lld\",&p2.first,&p2.second);\n\t\tccw(p0,p1,p2);\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nnamespace LCY{\n\t#define double long double\n\tconst double EPS=1e-10;\n\tinline int dcmp(double x){if(fabs(x)<EPS)return 0;return (x<0)?-1:1;}\n\tstruct Point{double x,y;Point(double _x=0,double _y=0){x=_x;y=_y;}};\n\tstruct Vector{double x,y;Vector(double _x=0,double _y=0){x=_x;y=_y;}};\n\t\n\tVector operator - (Point a,Point b){return Vector(a.x-b.x,a.y-b.y);}\n\tVector operator * (Vector a,double d){return Vector(a.x*d,a.y*d);}\n\tPoint operator + (Point a,Vector b){return Point(a.x+b.x,a.y+b.y);}\n\t\n\tinline double dot(Vector a,Vector b){return a.x*b.x+a.y*b.y;}\n\tinline double cross(Vector a,Vector b){return a.x*b.y-a.y*b.x;}\n\tinline double norm(Vector a){return dot(a,a);}\n\t\n\tstruct Line{\n\t\tPoint p1,p2;\n\t\tLine(Point _p1=Point(0,0),Point _p2=Point(0,0)){p1=_p1;p2=_p2;}\n\t};\n\t\n\tPoint project(Line l,Point p){\n\t\tVector base=l.p2-l.p1;\n\t\tdouble r=dot(p-l.p1,base)/norm(base);\n\t\treturn l.p1+base*r;\n\t}\n\tPoint reflect(Line l,Point p){\n\t\tPoint q=project(l,p);\n\t\tVector v=p-q;v.x=-v.x;v.y=-v.y;\n\t\treturn q+v;\n\t}\n\tstring ccw(Vector v1,Vector v2){\n\t\tif(dcmp(cross(v1,v2))>0)return \"COUNTER_CLOCKWISE\";//return 1;\n\t\telse if(dcmp(cross(v1,v2))<0)return \"CLOCKWISE\";//return 2;\n\t\telse{\n\t\t\tif(dcmp(dot(v1,v2))<0)return \"ONLINE_BACK\";//return 3;\n\t\t\telse{\n\t\t\t\tif(dcmp(norm(v1)-norm(v2))<0)return \"ONLINE_FRONT\";//return 4;\n\t\t\t\telse return \"ON_SEGMENT\";//return 5;\n\t\t\t}\n\t\t}\n\t}\n}\nusing namespace LCY;\nint main(){\n\tPoint p0,p1,p2;int n;cin>>p0.x>>p0.y>>p1.x>>p1.y>>n;while(n--){\n\t\tcin>>p2.x>>p2.y;\n\t\tcout<<ccw(p1-p0,p2-p0)<<endl;\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define _GLIBCXX_DEBUG\nusing namespace std;\nusing ll = long long;\nusing vec = vector<ll>;\nusing vect = vector<double>;\nusing Graph = vector<vector<ll>>;\n#define loop(i, n) for (ll i = 0; i < n; i++)\n#define Loop(i, m, n) for (ll i = m; i < n; i++)\n#define pool(i, n) for (ll i = n; i >= 0; i--)\n#define Pool(i, m, n) for (ll i = n; i >= m; i--)\n#define mod 1000000007ll\n#define setbit bitset<8>\n#define flagcount __builtin_popcount\n#define flag(x) (1 << x)\n#define flagadd(bit, x) bit |= flag(x)\n#define flagpop(bit, x) bit &= ~flag(x)\n#define flagon(bit, i) bit &flag(i)\n#define flagoff(bit, i) !(bit & (1 << i))\n#define all(v) v.begin(), v.end()\n#define low2way(v, x) lower_bound(all(v), x)\n#define high2way(v, x) upper_bound(all(v), x)\n#define count2way(v, x) high2way(v, x) - low2way(v, x)\n#define lower(v, x) low2way(v, x) - v.begin()       //1番左が0、もし見つから無いならｎを出力\n#define higher(v, x) high2way(v, x) - v.begin() - 1 //1番左が0、もし見つからないならn-1を出力（注意）\n#define putout(a) cout << a << endl\n#define putout2(a, b) \\\n    putout(a);        \\\n    putout(b)\n#define putout3(a, b, c) \\\n    putout(a);           \\\n    putout(b);           \\\n    putout(c)\n#define putout4(a, b, c, d) \\\n    putout(a);              \\\n    putout(b);              \\\n    putout(c);              \\\n    putout(d)\n#define putout5(a, b, c, d, e) \\\n    putout(a);                 \\\n    putout(b);                 \\\n    putout(c);                 \\\n    putout(d);                 \\\n    putout(e)\n#define Gput(a, b) G[a].push_back(b)\n#define cin1(a) cin >> a\n#define cin2(a, b) cin >> a >> b\n#define cin3(a, b, c) cin >> a >> b >> c\n#define cin4(a, b, c, d) cin >> a >> b >> c >> d\n#define cin5(a, b, c, d, e) cin >> a >> b >> c >> d >> e\n#define Sum(v) accumulate(all(v), 0ll)\n#define gcd(x, y) __gcd(x, y)\nll ctoi(char c)\n{\n    if (c >= '0' && c <= '9')\n    {\n        return c - '0';\n    }\n    return 0;\n}\ntemplate <typename T>\nT lcm(T x, T y)\n{\n    T z = gcd(x, y);\n    return x * y / z;\n}\ntemplate <typename T>\nbool primejudge(T n)\n{\n    if (n < 2)\n        return false;\n    else if (n == 2)\n        return true;\n    else if (n % 2 == 0)\n        return false;\n    double sqrtn = sqrt(n);\n    for (T i = 3; i < sqrtn + 1; i++)\n    {\n        if (n % i == 0)\n        {\n            return false;\n        }\n        i++;\n    }\n    return true;\n}\ntemplate <typename T>\nT modinv(T a, T m)\n{\n    T b = m, u = 1, v = 0;\n    while (b)\n    {\n        T t = a / b;\n        a -= t * b;\n        swap(a, b);\n        u -= t * v;\n        swap(u, v);\n    }\n    u %= m;\n    if (u < 0)\n        u += m;\n    return u;\n}\n//場合によって使い分ける\n//const ll dx[4]={1,0,-1,0};\n//const ll dy[4]={0,1,0,-1};\nconst ll dx[8] = {1, 1, 0, -1, -1, -1, 0, 1};\nconst ll dy[8] = {0, 1, 1, 1, 0, -1, -1, -1};\n//多次元配列の宣言法\n//vector<vector<ll>> field(h, vector<ll>(w));\ntemplate <class T>\ninline void chmax(T &a, T b)\n{\n    if (a < b)\n        a = b;\n}\ntemplate <class T>\ninline void chmin(T &a, T b)\n{\n    if (a > b)\n        a = b;\n}\n/*\nライブラリをここに置いてコメントを削除\n*/\n//円周率\nstatic const double pi = 3.141592653589793;\n//幾何の問題で入力が多い時に使用\n#define scan(x) scanf(\"%ld\", &x)\n\n//誤差チェッカー\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n//点を表わす構造体\nstruct Point\n{\npublic:\n    double x, y;\n    Point(double _x, double _y) : x(_x), y(_y) {}\n    /*\n    以下ベクトルに対する演算子の定義\n    +:ベクトルの足し算\n    -:ベクトルの引き算\n    *:スカラー倍\n    /:スカラーの逆数倍\n    */\n    Point operator+(const Point p) { return Point(x + p.x, y + p.y); }\n    Point operator-(const Point p) { return Point(x - p.x, y - p.y); }\n    Point operator*(const double k) { return Point(x * k, y * k); }\n    Point operator/(const double k) { return Point(x / k, y / k); }\n    double abs() { return sqrt(norm()); }\n    double norm() { return x * x + y * y; }\n    //ベクトルの比較(x軸方向のベクトルから比較)\n    bool operator<(const Point &p) const\n    {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n    bool operator>(const Point &p) const\n    {\n        return x != p.x ? x > p.x : y > p.y;\n    }\n    bool operator==(const Point &p) const\n    {\n        return equals(x, p.x) && equals(y, p.y);\n    }\n    bool operator!=(const Point &p) const\n    {\n        return (!equals(x, p.x)) || (!equals(y, p.y));\n    }\n};\n//ベクトルとして扱う場合\ntypedef Point Vector;\n//線分を表わす構造体\nstruct Segment\n{\n    Point p1, p2;\n    Segment(Point _p1, Point _p2) : p1(_p1), p2(_p2) {}\n};\n//直線として扱う場合\ntypedef Segment Line;\n//ベクトルのノルム\ndouble norm(Vector a)\n{\n    return a.x * a.x + a.y * a.y;\n}\n//ベクトルの大きさ\ndouble abs(Vector a)\n{\n    return sqrt(norm(a));\n}\n//ベクトルの内積\ndouble dot(Vector a, Vector b)\n{\n    return a.x * b.x + a.y * b.y;\n}\n//ベクトルの外積\ndouble cross(Vector a, Vector b)\n{\n    return a.x * b.y - a.y * b.x;\n}\n//内積≓0かどうかによるベクトルの直交判定(様々な引数で答えられるように複数用意)\nbool Orthogonal(Vector a, Vector b)\n{\n    return equals(dot(a, b), 0.0);\n}\nbool Orthogonal(Point a1, Point a2, Point b1, Point b2)\n{\n    return Orthogonal(a1 - a2, b1 - b2);\n}\nbool Orthogonal(Segment s1, Segment s2)\n{\n    return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n//外積≓0かどうかによるベクトルの平行判定(様々な引数で答えられるように複数用意)\nbool Parallel(Vector a, Vector b)\n{\n    return equals(cross(a, b), 0.0);\n}\nbool Parallel(Point a1, Point a2, Point b1, Point b2)\n{\n    return Parallel(a1 - a2, b1 - b2);\n}\nbool Parallel(Segment s1, Segment s2)\n{\n    return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n//直線sに対して点ｐから垂線を引いたときの交点x(直線sに対する点pの射影)を求める\nPoint Project(Line s, Point p)\n{\n    Vector base = s.p2 - s.p1, hypo = p - s.p1;\n    double scalar = (dot(base, hypo) / norm(base));\n    return s.p1 + base * scalar;\n}\n//直線sに対して点pと線対称の位置にある点p'を求める\nPoint Reflect(Line s, Point p)\n{\n    return p + (Project(s, p) - p) * 2.0;\n}\n//点と点の距離\ndouble GetDist(Point a, Point b)\n{\n    return abs(a - b);\n}\n//直線と点の距離\ndouble GetDistLP(Line l, Point p)\n{\n    return abs(Project(l, p) - p);\n}\n//線分と点の距離\ndouble GetDistSP(Segment s, Point p)\n{\n    if (dot(s.p2 - s.p1, p - s.p1) < 0.0)\n        return abs(p - s.p1);\n    if (dot(s.p1 - s.p2, p - s.p2) < 0.0)\n        return abs(p - s.p2);\n    return GetDistLP(s, p);\n}\n//Counter-Clockwise(AOJ:CGL_1_Cより)\nstatic const int COUNTER_CLOCKWISE = 1; //反時計回り\nstatic const int CLOCKWISE = -1;        //時計回り\nstatic const int ONLINE_BACK = 2;       //線分の後ろにある\nstatic const int ONLINE_FRONT = -2;     //線分の前にある\nstatic const int ON_SEGMENT = 0;        //線分上にある\n//線分p0p1と点p2の位置関係を求める\nint CCW(Point p0, Point p1, Point p2)\n{\n    Vector a = p1 - p0, b = p2 - p0; //a:p0->p1,b:p0->p2\n    if (cross(a, b) > EPS)\n        return COUNTER_CLOCKWISE; //外積が正なら反時計回り(sinθ>0)\n    if (cross(a, b) < -EPS)\n        return CLOCKWISE; //外積が負なら時計回り(sinθ<0)\n    if (dot(a, b) < -EPS)\n        return ONLINE_BACK; //外積が0かつ内積が負(cosθ<0)\n    if (a.norm() < b.norm())\n        return ONLINE_FRONT; //p2がp0p1に含まれないときp0p2=p0p1+p1p2となり|a|^2<|b|^2が成立\n    return ON_SEGMENT;       //最後にp0p2p1が残る\n}\n//2本の線分の交差判定(点と線分で2種類用意)\nbool Intersect(Point p1, Point p2, Point p3, Point p4)\n{\n    return (CCW(p1, p2, p3) * CCW(p1, p2, p4) <= 0 && CCW(p3, p4, p1) * CCW(p3, p4, p2) <= 0);\n}\nbool Intersect(Segment s1, Segment s2)\n{\n    return Intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n//線分と線分の距離\ndouble GetDist(Segment s1, Segment s2)\n{\n    //線分が交差していた場合、距離は0.0\n    if (Intersect(s1, s2))return 0.0;\n    return min(min(GetDistSP(s1, s2.p1), GetDistSP(s1, s2.p2)), min(GetDistSP(s2, s1.p1), GetDistSP(s2, s1.p2)));\n}\n//座標cを中心とする半径rの円を表わす構造体\nstruct Circle\n{\npublic:\n    Point c;\n    double r;\n    Circle(Point _c, double _r) : c(_c), r(_r) {}\n};\n\n//多角形は点の列として扱う\ntypedef vector<Point> Polygon;\nint main()\n{\n    cout << fixed << setprecision(30);\n    double a1, a2, b1, b2;\n    cin >> a1 >> a2 >> b1 >> b2;\n    Point p1(a1, a2), p2(b1, b2);\n    Segment s(p1, p2);\n    ll q;\n    cin >> q;\n    loop(i, q)\n    {\n      double x,y;\n      cin>>x>>y;\n      Point p(x,y);\n      if(CCW(p1,p2,p)==1)putout(\"COUNTER_CLOCKWISE\");\n      if(CCW(p1,p2,p)==-1)putout(\"CLOCKWISE\");\n      if(CCW(p1,p2,p)==2)putout(\"ONLINE_BACK\");\n      if(CCW(p1,p2,p)==-2)putout(\"ONLINE_FRONT\");\n      if(CCW(p1,p2,p)==0)putout(\"ON_SEGMENT\");\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include <cstdlib>\n#include <stack>\n#include <queue>\n#include <list>\n#include <vector>\n#include <sstream>\n\nusing namespace std;\n\nclass c_main\n{\nprivate:\n    \npublic:\n    c_main();\n    void f_input();\n};\n\nc_main::c_main()\n{\n\n}\n\nvoid c_main::f_input()\n{\n    double xp1,yp1,xp2,yp2;\n    int q;\n    int i;\n    double x[1000];\n    double y[1000];\n    double a;\n    double b;\n    double x_a;\n    double y_a;\n    double a_a;\n    double b_a;\n    int pt1;\n\n    cin >> xp1 >> yp1 >> xp2 >> yp2;\n    \n    if (xp1 == xp2){\n        x_a = xp1;\n        y_a = 0;\n        pt1 = 0;\n    }else if (yp1 == yp2){\n        x_a = 0;\n        y_a = yp1; \n        pt1 = 1;\n    }else{\n        \n        a_a = (yp2-yp1)/(xp2-xp1);\n      \n        a = -1 * (1/a_a);\n       \n        b_a = -1 * a_a * xp1+ yp1;\n        pt1 = 2;\n    }\n    \n    cin >> q;\n    \n    for ( i = 0; i < q; ++i){\n        cin >> x[i] >> y[i];\n        if (pt1 == 0){\n            if(yp1 >= yp2){\n                if(x[i] == x_a){\n                    if(y[i] > yp1){\n                        cout << \"ONLINE__BACK\" << endl;\n                    }else if(y[i] < yp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(yp2 <= y[i] && y[i] <= yp1){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(x[i] < x_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n                }else if(x[i] > x_a){\n                    cout << \"CLOCKWISE\" << endl;\n     \n                }\n            }else{\n                if(x[i] == x_a){\n                    if(y[i] < yp1){\n                        cout << \"ONLINE_BACK\" << endl;\n                    }else if(y[i] > yp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(yp1 <= y[i] && y[i] <= yp2){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(x[i] < x_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n                    \n                }else if(x[i] > x_a){\n                    cout << \"CLOCKWISE\" << endl;\n                }\n            }\n            //printf(\"%10.10f %10.10f\\n\", x_a,y[i]);\n            \n        }else if(pt1 == 1){\n            if(xp1 >= xp2){\n                if(y[i] == y_a){\n                    if(x[i] > xp1){\n                        cout << \"ONLINE_BACK\" << endl;\n                    }else if(x[i] < xp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(xp2 <= x[i] && x[i] <= xp1){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(y[i] < y_a){\n                    cout << \"CLOCKWISE\" << endl;\n                }else if(y[i] > y_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n                }\n            }else{\n                if(y[i] == y_a){\n                    if(x[i] < xp1){\n                        cout << \"ONLINE_BACK\" << endl;\n                    }else if(x[i] > xp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(xp1 <= x[i] && x[i] <= xp2){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(y[i] < y_a){\n                    cout << \"CLOCKWISE\" << endl;\n                }else if(y[i] > y_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n                }\n            }\n            //printf(\"%10.10f %10.10f\\n\", x[i],y_a);\n        }else if(pt1 == 2){\n            b = -1 * a * x[i] + y[i];\n            x_a = (b - b_a)/(a_a - a);\n            y_a = a_a * x_a + b_a;\n            if(xp1 >= xp2){\n                if(y[i] == y_a){\n                    if(x[i] > xp1){\n                        cout << \"ONLINE_BACK\" << endl;\n                    }else if(x[i] < xp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(xp2 <= x[i] && x[i] <= xp1){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(y[i] < y_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n                }else if(y[i] > y_a){\n                    \n                    cout << \"CLOCKWISE\" << endl;\n                }\n            }else{\n                if(y[i] == y_a){\n                    if(x[i] < xp1){\n                        cout << \"ONLINE_BACK\" << endl;\n                    }else if(x[i] > xp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(xp1 <= x[i] && x[i] <= xp2){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(y[i] < y_a){\n                    cout << \"CLOCKWISE\" << endl;\n                }else if(y[i] > y_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n                }\n            }\n            //printf(\"%10.10f %10.10f\\n\", x_a,y_a);\n        }\n    }\n}\n\nint main(){\n    c_main main01;\n    main01.f_input();\n    \n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\ntemplate<class T> using vec = vector<T>;\ntemplate<class T> using vvec = vector<vec<T>>;\nusing R = double;\nusing P = complex<R>;\n#define x real()\n#define y imag()\nconst R eps = 1e-9,PI = acos(-1);\n\nbool equal(R a,R b){return abs(b-a)<eps;}\nbool equal0(R a){return equal(a,0.0);}\n\nP operator*(const P& p,const R& d){\n    return P(p.x*d,p.y*d);\n}\n\nistream &operator>>(istream& is,P& p){\n    R a,b;\n    is >> a >> b;\n    p = P(a,b);\n    return is;\n}\n\nostream &operator<<(ostream& os,P& p){\n    os << fixed << setprecision(10) << p.real() << \" \" << p.imag();\n}\n//内積\ndouble dot(P a,P b) {return (conj(a)*b).real();}\n//外積\ndouble cross(P a,P b) {return (conj(a)*b).imag();}\n\nstruct L{\n    P a,b;\n    L(P a,P b):a(a),b(b){}\n    L(R A,R B,R C){\n        if(equal(A,0)) a = P(0,C/B),b = P(1,C/B);\n        else if(equal(B,0)) b = P(C/A,0),b = P(C/A,1);\n        else a = P(0,C/B),b = P(C/A,0);\n    }\n};\n\n//pをbに射影\nP projection(P p,P b) {return b*dot(p,b)/norm(b);}\n\n//pとp1 to p2 に射影\nP projection(L l,P p){\n    p -= l.a; l.b -= l.a;\n    P proj = projection(p,l.b);\n    return l.a+proj;\n}\n\nstruct S:L{\n    S(P a,P b):L(a,b){}\n};\n\n//点の回転方向を判定\nint ccw(P& p0,P p1,P p2){\n    p1 -= p0,p2 -= p0;\n    if(cross(p1,p2)>eps) return 1; //\"COUNTER_CLOCKWISE\"\n    if(cross(p1,p2)<-eps) return -1; //\"CLOCKWISE\"\n    if(dot(p1,p2)<0) return 2; //\"ONLINE_BACK\"\n    if(norm(p1)<norm(p2)) return -2; //\"ONLINE_FRONT\"\n    return 0; //\"ON_SEGMENT\"\n}\n\nbool is_parallel(L& l1,L& l2){\n    return equal0(cross(l1.b-l1.a,l2.b-l2.a));\n}\n\nbool is_orthogonal(L& l1,L& l2){\n    return equal0(dot(l1.a-l1.a,l2.b-l2.a));\n}\n\n//pをlに関して対称移動\nP reflection(L l,P p){\n    P pj = projection(l,p);\n    return 2.0*pj-p;\n}\n\n//pがl上にあるか\nbool is_online(L& l,P& p){\n    return abs(ccw(l.a,l.b,p))!=1;\n}\n\nbool is_onsegment(S& s,P& p){\n    return ccw(s.a,s.b,p)==0;\n}\n\nint main(){\n    P p1,p2;\n    cin >> p1;\n    cin >> p2;\n    int Q;\n    cin >> Q;\n    for(int i=0;i<Q;i++){\n        P p;\n        cin >> p;\n        int res = ccw(p1,p2,p);\n        if(res==1) cout << \"COUNTER_CLOCKWISE\" << endl;\n        if(res==-1) cout << \"CLOCKWISE\" << endl;\n        if(res==0) cout << \"ON_SEGMENT\" << endl;\n        if(res==2) cout << \"ONLINE_BACK\" << endl;\n        if(res==-2) cout << \"ONLINE_FRONT\" << endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define eps 1e-9\n\nusing namespace std;\ntypedef double db;\nstruct P{\n    db x, y;\n    P(){}\n    P(db x, db y) : x(x) , y(y) {}\n    P operator - (P a){ return P(x-a.x, y-a.y); }\n    db times(P a){ return x*a.y-y*a.x; }\n    db dot(P a){ return a.x*x + a.y*y; }\n    db len(){ return sqrt(x*x+y*y); }\n};\ntypedef P V;\nint sign(db x){ return x<-eps ? -1 : x>eps; }\n\nvoid cc(V v1, V v2){ //判断v2在v1的哪个方向\n    db s = sign( v1.times(v2) );  //利用叉积判顺逆时针\n    if(s < 0) printf(\"CLOCKWISE\\n\");\n    else if(s > 0) printf(\"COUNTER_CLOCKWISE\\n\");\n    else{\n        db d = sign( v1.dot(v2) );  //坑待填：这里是否需要eps？\n        if(d<0) printf(\"ONLINE_BACK\\n\");\n        else{  //用点积判同向异向\n            if(v1.len() >= v2.len()) printf(\"ON_SEGMENT\\n\");\n            else printf(\"ONLINE_FRONT\\n\");\n        }\n    }\n}\n\nint main(){\n    //freopen(\"owo.in\",\"r\",stdin);\n    P p0, p1, p2;\n    scanf(\"%lf%lf%lf%lf\", &p0.x, &p0.y, &p1.x, &p1.y);\n    V v1 = p1-p0;\n    int n;\n    cin >> n;\n    while(n--){\n        scanf(\"%lf%lf\", &p2.x, &p2.y);\n        V v2 = p2-p0;\n        cc(v1, v2);\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long unsigned int ll;\n\n// 参考サイト\n// 前原 貴憲\n// http://www.prefield.com/algorithm/index.html\n\nconst double EPS = 1e-8;\nconst double INF = 1e12;\ntypedef complex<double> Point; //複素数で平面定義\ntypedef Point P;\n\n// system\n// {{{\n// オペレーター< を定義、後々楽\nnamespace std{\n    bool operator < ( const P& a, const P& b) {\n        return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n    }\n}\n\n// 外積\ndouble cross( const P& a, const P& b ){\n    return imag(conj(a)*b);\n}\n// 内積\ndouble dot( const P& a, const P& b ){\n    return real(conj(a)*b);\n}\n// }}}\n\n// Line L vector<P>\n// PolyGon G vector<P>\n// Circle C(P,int rad)\n// {{{\n// 直線 Line\n// 線分 Segment\nstruct L : public vector<P> {\n    L(const P &a, const P &b ){\n        push_back(a); push_back(b);\n    }\n};\n\n// 単純多角形 PolyGon\ntypedef vector<P> G;\n\n// 円 cirlce\nstruct C {\n    P p; double r;\n    C(const P &p, double r ) : p(p), r(r) {}\n};\n// }}}\n\n// counter clockwise \n// {{{\n//\nint ccw( P a, P b, P c ){\n    b -= a; c -= a;\n    if( cross(b,c) > 0 )   return +1; //counter clockwise\n    if( cross(b,c) < 0 )   return -1; //clockwise\n    if( dot(b,c) < 0 )     return +2; //c--a--b\n    if( norm(b) < norm(c)) return -2; //a--b--c\n    return 0; // b==c\n} //}}}\n\n// 交点判定 LSPtoLSP\n// {{{\nbool intersectLL( const L &l, const L &m ){\n    return abs( cross(l[1]-l[0], m[1]-m[0]) ) > EPS || // cross(l,m) != 0 <-> not paralell\n           abs( cross(l[1]-l[0], m[0]-l[0]) ) < EPS;   // cross(l,(m-l)) == 0 <-> same line\n}\nbool intersectLS( const L &l, const L &s ){\n    return cross( l[1]-l[0], s[0]-l[0] ) *\n           cross( l[1]-l[0], s[1]-l[0] ) < EPS;\n}\nbool intersectLP( const L &l, const P &p ){\n    return abs( cross(l[0]-p, l[1]-p) );\n}\nbool intersectSS( const L &s, const L &t ){\n    return ccw(s[0],s[1],t[0])*ccw(s[0],s[1],t[1]) <= 0 &&\n           ccw(t[0],t[1],s[0])*ccw(t[0],t[1],s[1]) <= 0;\n}\nbool intersectSP( const L &s, const P &p ){\n    return abs( s[0]-p )+abs( s[1]-p )-abs(s[1]-s[0]) < EPS;\n}\n// }}}\n\n// 射影 反射 距離 LSPtoLSP\n// {{{\nP projection( const L &l, const P &p ){\n    double t = dot( p-l[0], l[0]-l[1] ) / norm( l[0]-l[1] );\n    return l[0] + t*(l[0]-l[1]);\n}\nP reflection( const L &l, const P &p ){\n    return p + 2.0*( projection(l,p) - p );\n}\n// bool intersectLL( const L &l, const L &m ){\n//     return abs( cross(l[1]-l[0], m[1]-m[0]) ) > EPS || // cross(l,m) != 0 <-> not paralell\n//            abs( cross(l[1]-l[0], m[0]-l[0]) ) < EPS;   // cross(l,(m-l)) == 0 <-> same line\n// }\n// bool intersectLS( const L &l, const L &s ){\n//     return cross( l[1]-l[0], s[0]-l[0] ) *\n//            cross( l[1]-l[0], s[1]-l[0] ) < EPS;\n// }\n// bool intersectLP( const L &l, const P &p ){\n//     return abs( cross(l[0]-p, l[1]-p) );\n// }\n// bool intersectSS( const L &s, const L &t ){\n//     return ccw(s[0],s[1],t[0])*ccw(s[0],s[1],t[1]) <= 0 &&\n//            ccw(t[0],t[1],s[0])*ccw(t[0],t[1],s[1]) <= 0;\n// }\n// bool intersectSP( const L &s, const P &p ){\n//     return abs( s[0]-p )+abs( s[1]-p )-abs(s[1]-s[0]) < EPS;\n// }\n// }}}\n\n// imagePointDescription(点表示)\n// {{{ \nvoid imagePointDescription( const vector<P> &p ){\n    int here[51][51] = {};\n    int i = 0;\n    for( P t : p ){\n        i++;\n        int y = round(imag(t)-EPS);\n        int x = round(real(t)-EPS);\n        if( abs(y) > 25 ) continue;\n        if( abs(x) > 25 ) continue;\n        here[y+25][x+25] = i;\n    }\n\n    for( i = 50; i >= 0; i-- ){\n        for( int j = 0; j <= 50; j++ ){\n            if( here[i][j] ) printf (\"%2d\", here[i][j] );\n            else if( i == 25 && j == 25 ) printf (\"-+\");\n            else if( i == 25 ) printf (\"--\");\n            else if( j == 25 ) printf (\" |\");\n            else if( j % 5 == 0 && i % 5 == 0)printf (\" .\");\n            else printf (\"  \");\n        }\n        printf (\"\\n\");\n    }\n\n} // }}}\n\nint main() {\n\n    double a,b,c,d;\n\n    cin >> a >> b >> c >> d;\n    P p1(a,b);\n    P p2(c,d);\n    G points(4);\n    points[0] = p1;\n    points[1] = p2;\n    L l(p1,p2);\n\n    int q;\n    cin >> q;\n\n    while(q--){\n        cin >> a >> b;\n        P p(a,b);\n        points[2] = p;\n        // imagePointDescription(points);\n        int jud = ccw( p1, p2, p );\n        if( jud == 1  ) printf (\"COUNTER_CLOCKWISE\\n\");\n        if( jud == -1 ) printf (\"CLOCKWISE\\n\");\n        if( jud == 2  ) printf (\"ONLINE_BACK\\n\");\n        if( jud == -2 ) printf (\"ONLINE_FRONT\\n\");\n        if( jud == 0  ) printf (\"ON_SEGMENT\\n\");\n        // printf (\"%1.10lf %1.10lf\\n\", real(x), imag(x) );\n    }\n\n\n    return 0;\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef complex<double>Point;\n\nstruct Segment{\n    Point p1,p2;\n    Segment(const Point &p1=Point(),const Point &p2=Point()):p1(p1),p2(p2){}\n};\n\nstruct Circle{\n    Point p;\n    double r;\n    Circle(const Point &p=Point(),double r=0.0):p(p),r(r){}\n};\n\ntypedef Point Vector;\ntypedef Segment Line;\ntypedef vector<Point>Polygon;\n\nconst double PI=acos(-1);\nconst double EPS=1e-8;\nconst double INF=1e16;\nconst int COUNTER_CLOCKWISE=1;\nconst int CLOCKWISE=-1;\nconst int ONLINE_BACK=2;\nconst int ONLINE_FRONT=-2;\nconst int ON_SEGMENT=0;\n\ninline double square(double a){return a*a;}\ninline double norm(const Point &a){return square(a.real())+square(a.imag());}\ninline double dot(const Point &a,const Point &b){return (conj(a)*b).real();}\ninline double cross(const Point &a,const Point &b){return (conj(a)*b).imag();}\ninline double toDeg(double t){return t/PI*180.0;}\ninline double toRad(double t){return t/180.0*t;}\n#define equals(a,b) (fabs((a)-(b))<EPS)\n\nvoid getPoint(Point &p){\n    double x,y;\n    scanf(\"%lf%lf\",&x,&y);\n    p=Point(x,y);\n}\n\nbool isOrthogonal(Vector a,Vector b){\n    return equals(dot(a,b),0.0);\n}\n\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n    return isOrthogonal(a1-a2,b1-b2);\n}\n\nbool isOrthogonal(Segment s1,Segment s2){\n    return isOrthogonal(s1.p1-s1.p2,s2.p1-s2.p2);\n}\n\nbool isParallel(Vector a,Vector b){\n    return equals(cross(a,b),0.0);\n}\n\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n    return isParallel(a1-a2,b1-b2);\n}\n\nbool isParallel(Segment s1,Segment s2){\n    return isParallel(s1.p1-s1.p2,s2.p1-s2.p2);\n}\n\nPoint project(Segment s,Point p){\n    Vector base=s.p2-s.p1;\n    double r=dot(p-s.p1,base)/norm(base);\n    return s.p1+base*r;\n}\n\nPoint reflection(Segment s,Point p){\n    return p+(project(s,p)-p)*2.0;\n}\n\nint ccw(Point p0,Point p1,Point p2){\n    Vector a=p1-p0;\n    Vector b=p2-p0;\n    if(cross(a,b)>EPS)return COUNTER_CLOCKWISE;\n    if(cross(a,b)<-EPS)return CLOCKWISE;\n    if(dot(a,b)<-EPS)return ONLINE_BACK;\n    if(norm(a)<norm(b))return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\nint main(){\n    Point a,b;\n    getPoint(a);\n    getPoint(b);\n\n    int q;\n    scanf(\"%d\",&q);\n    while(q--){\n        Point c;\n        getPoint(c);\n        int x=ccw(a,b,c);\n        if(x==1)puts(\"COUNTER_CLOCKWISE\");\n        else if(x==-1)puts(\"CLOCKWISE\");\n        else if(x==2)puts(\"ONLINE_BACK\");\n        else if(x==-2)puts(\"ONLINE_FRONT\");\n        else puts(\"ON_SEGMENT\");\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "/*<<head>> {{{*/\n#include <bits/stdc++.h>\n#include <algorithm>\n#include <iostream>\n#include <cstring>\n#include <vector>\n#include <cstdio>\n#include <string>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <set>\n#include <map>\nusing namespace std;\ntypedef double db;\ntypedef long long ll;\ntypedef vector<int> vi;\ntypedef pair<int,int> pii;\n#define dd(x) cout << #x << \" = \" << x << \", \"\n#define de(x) cout << #x << \" = \" << x << endl\n#define rep(i,a,b) for(int i=(a);i<(b);++i)\n#define per(i,a,b) for(int i=(b)-1;i>=(a);--i)\n#define all(x) (x).begin(),(x).end()\n#define sz(x) (int)(x).size()\n#define mp make_pair\n#define pb push_back\n#define fi first\n#define se second\n//INF = 1 061 109 567 ; INF + INF = 2 122 219 134 ;\n//LINF = 4 557 430 888 798 830 399 ; LINF + LINF = 9 114 861 777 597 660 798 ;\nconst int INF = 0x3f3f3f3f;     // -INF: 0xc0   abs(-INF) = INF + 1\nconst ll LINF = 0x3f3f3f3f3f3f3f3f;\n/*}}}*/                         // zr, zm\nconst int MOD = (int)1e9+7;     // when MOD = 1e9+7, inv2 = 500000004\nconst int N = (int)-1;\n\n// ------- 变量 ------- //\n\n/* 注意\n  1. 点、向量\n    1. 如果角度出现 -pi ，可以加上 2pi 修正为 pi\n    2. atan2(y, x) 的参数是浮点数时，可能出现 -pi ，如 atan2(-0.0, -1.0)\n  2. 线段、直线\n    1. 线段严格相交定义为：每条线段的两个端点落在另一条线段两边，形象来说，就是可以在图形里看到四个端点和一个交点\n*/\n\ntypedef db T;\nconst db eps = 1e-7, pi = acosl(-1.);\nint sgn(T x) { return (x > eps) - (x < -eps); }\nbool inMid(T a, T x, T b) { return sgn(a - x) * sgn(b - x) <= 0; }  // 数 x 在区间 [a, b] 内（包括边界）\n\n// 点、向量\nstruct P {\n    T x, y; P () {} P(T x, T y) : x(x), y(y) {}\n    P operator + (const P &b) const { return P(x + b.x, y + b.y); }  // 向量加\n    P operator - (const P &b) const { return P(x - b.x, y - b.y); }  // 向量减\n    T operator * (const P &b) const { return x * b.x + y * b.y; }    // 向量点积\n    T operator / (const P &b) const { return x * b.y - y * b.x; }    // 向量叉积\n    P operator * (const T &k) const { return P(x * k, y * k); }      // 向量数乘\n    P operator / (const T &k) const { return P(x / k, y / k); }      // 向量数除\n    bool operator < (const P &b) const { return sgn(x - b.x) ? x < b.x : y < b.y; }  // 左小右大，下小上大\n    bool operator == (const P &b) const { return !sgn(x - b.x) && !sgn(y - b.y); }   // 向量相等\n    P rot(T t) { return P(x * cos(t) - y * sin(t), x * sin(t) + y * cos(t)); }  // 向量逆时针旋转 t 弧度\n    P rot90() { return P(-y, x); }           // 向量逆时针旋转 90 度\n    db arg() const { return atan2(y, x); }   // 方位角 (-pi, pi]\n    T abs() { return sqrt(x * x + y * y); }  // 向量模长\n    T abs2() { return x * x + y * y; }       // 向量模长的平方\n    P unit() { return (*this) / abs(); }     // 单位向量\n    void scan() { db tx, ty; scanf(\"%lf%lf\", &tx, &ty); x = tx; y = ty; }  // 输入\n    void print() { printf(\"%.11lf %.11lf\\n\", x, y); }                      // 输出\n    P toR() { return (sgn(x) == -1 || !sgn(x) && sgn(y) == -1) ? (*this)*(-1) : (*this); }  // 若向量在 2 3 象限，则取其相反向量\n    bool isUp() const { return sgn(y) == 1 || !sgn(y) && sgn(x) == -1; }                    // 向量是否在 1 2 象限\n};\nT dis(P a, P b) { return (b - a).abs(); }   // 点 a 到点 b 的距离\nP symmetry(P p, P a) { return a + a - p; }  // 点 p 关于点 a 的中心对称点\nT cross(P o, P a, P b) { return (a - o) / (b - o); }         // 向量 oa 与 ob 的叉积\nint crossSgn(P o, P a, P b) { return sgn(cross(o, a, b)); }  // 向量 oa 与 ob 的叉积符号\ndb rad(P a, P b) { return atan2(a / b, a * b); }             // 向量 a 与 b 的夹角（弧度制）\nbool order(const P &a, const P &b) { return a.isUp() < b.isUp() || a.isUp() == b.isUp() && sgn(a/b) > 0; }  // 极角排序\n\n// 线段、直线\nstruct L { P s, t; L () {} L(P s, P t) : s(s), t(t) {} };\nbool onPS(P p, L a) { return sgn((a.t-a.s)/(p-a.s))==0 && sgn((p-a.s)*(p-a.t))<=0; }   // 点 p 是否在线段 st 上\nbool inRec(P p, L a) { return inMid(a.s.x, p.x, a.t.x) && inMid(a.s.y, p.y, a.t.y); }  // 点 p 在以直线 a 为对角线的矩形内\nP proj(P p, L a) { return (a.t-a.s) * ( (p-a.s) * (a.t-a.s) / (a.t-a.s).abs2() ) + a.s; }   // 点 p 关于直线 a 的投影点\nP reflect(P p, L a) { return proj(p, a) * 2 - p; }                                          // 点 p 关于直线 a 的对称点\nbool xSSr(const L &a, const L &b) {  // 线段 a 和线段 b 严格相交\n    T c1 = (a.t-a.s) / (b.s-a.s), c2 = (a.t-a.s) / (b.t-a.s);\n    T c3 = (b.t-b.s) / (a.s-b.s), c4 = (b.t-b.s) / (a.t-b.s);\n    return sgn(c1) * sgn(c2) < 0 && sgn(c3) * sgn(c4) < 0;\n}\nbool xSS(L a, L b) {                 // 线段 a 和线段 b 不严格相交\n    T c1 = (a.t-a.s) / (b.s-a.s), c2 = (a.t-a.s) / (b.t-a.s);\n    T c3 = (b.t-b.s) / (a.s-b.s), c4 = (b.t-b.s) / (a.t-b.s);\n    return sgn(c1) * sgn(c2) <= 0 && sgn(c3) * sgn(c4) <= 0 &&\n           sgn(max(a.s.x,a.t.x) - min(b.s.x,b.t.x)) >= 0 &&\n           sgn(max(b.s.x,b.t.x) - min(a.s.x,a.t.x)) >= 0 &&\n           sgn(max(a.s.y,a.t.y) - min(b.s.y,b.t.y)) >= 0 &&\n           sgn(max(b.s.y,b.t.y) - min(a.s.y,a.t.y)) >= 0;\n}\nbool xSL(L a, L b) {  // 线段 a 与直线 b 相交 ( 不严格 : <= ; 严格 : < )\n    return sgn( (b.t - b.s) / (a.s - b.s) ) * sgn( (b.t - b.s) / (a.t - b.s) ) <= 0;\n}\nP xLL(L a, L b) {  // 直线 a 和直线 b 的交点\n    T s1 = (b.t - b.s) / (a.s - b.s), s2 = -( (b.t - b.s) / (a.t - b.s) );\n    return (a.s * s2 + a.t * s1) / (s1 + s2);\n}\ndb disPL(P p, L a) { return fabs( (a.t-a.s) / (p-a.s) ) / (a.t-a.s).abs(); }  // 点 p 到直线 a 的距离\ndb disPS(P p, L a) {                                                          // 点 p 到线段 a 的距离\n    return sgn( (a.t-a.s) * (p-a.s) ) * sgn( (a.s-a.t) * (p-a.t) ) != 1\n           ? disPL(p, a) : min( (p-a.s).abs(), (p-a.t).abs() );\n}\ndb disSS(L a, L b){                                                           // 线段 a 到线段 b 的距离\n    if (xSS(a,b)) return 0;\n    return min( min( disPS(a.s,b), disPS(a.t,b) ), min( disPS(b.s,a), disPS(b.t,a) ) );\n}\ndb disLL(L a, L b) { return (a.t-a.s) / (b.t-b.s) ? 0 : disPL(a.s, b); }      // 直线 a 到直线 b 的距离\n\n// 多边形、凸包\ntypedef vector<P> polygon;\npolygon Convex(polygon A) {  // 求凸包，逆时针排序（ 内角 <180 : (<=) ; 内角 <=180 : (<) ）\n    int n = sz(A); if (n <= 1) return A;\n    sort(all(A));\n    polygon B;\n    for (int i = 0; i < n; B.pb(A[i++]))\n        while (sz(B) > 1 && crossSgn(B[sz(B)-2], B.back(), A[i]) < 0) B.pop_back();  // 更改这里的 <\n    for (int i = n - 2, t = sz(B); i >= 0; B.pb(A[i--]))\n        while (sz(B) > t && crossSgn(B[sz(B)-2], B.back(), A[i]) < 0) B.pop_back();  // 同上\n    B.pop_back(); return B;\n}\nT area(polygon A) {  // 多边形 A 的面积，整型可以返回面积的两倍，保持精度\n    T res = 0;\n    rep(i, 0, sz(A)) res += A[i] / A[ (i+1) % sz(A) ];\n    return fabs(res) / 2;\n}\nbool isConvex(polygon A) {  // 多边形 A 是否是凸包，要求 A 的点集按逆时针排序\n    rep(i, 0, 2) A.pb(A[i]);\n    rep(i, 0, sz(A)-2) if ( sgn( (A[i+1]-A[i]) / (A[i+2]-A[i]) ) < 0 ) return 0;\n    return 1;\n}\nint inPpolygon(P p, polygon A) {  // 点和多边形关系 ( -1 : on , 0 : out , 1 : in )\n    int res = 0;\n    rep(i, 0, sz(A)) {\n        P u = A[i], v = A[ (i+1) % sz(A) ];\n        if (onPS(p, L(u, v))) return -1;\n        T cross = sgn((v-u)/(p-u)), d1 = sgn(u.y-p.y), d2 = sgn(v.y-p.y);\n        if (cross > 0 && d1 <= 0 && d2 > 0) ++res;\n        if (cross < 0 && d2 <= 0 && d1 > 0) --res;\n    }\n    return res != 0;\n}\n\nstruct C {\n    P o; db r; C () {} C (P o, db r) : o(o), r(r) {}\n};\n\nC getC(P a,P b,P c){  // 三点确定一个圆 （ 三角形外接圆 ）\n    db a1 = b.x - a.x, b1 = b.y - a.y, c1 = (a1 * a1 + b1 * b1) / 2;\n    db a2 = c.x - a.x, b2 = c.y - a.y, c2 = (a2 * a2 + b2 * b2) / 2;\n    db d = a1 * b2 - a2 * b1;\n    P o = P(a.x + (c1 * b2 - c2 * b1) / d, a.y + (a1 * c2 - a2 * c1) / d);\n    return C(o, dis(a, o));\n}\n\nP p[3];\n\n// ------- 函数 ------- //\n\nvoid Init() {\n    rep(i, 0, 2) p[i].scan();\n}\n\nint Solve() {\n    int q; scanf(\"%d\", &q);\n    while (q--) {\n        p[2].scan();\n        if (crossSgn(p[0], p[1], p[2]) > 0) puts(\"COUNTER_CLOCKWISE\");\n        else if (crossSgn(p[0], p[1], p[2]) < 0) puts(\"CLOCKWISE\");\n        else if (inRec(p[2], L(p[0], p[1]))) puts(\"ON_SEGMENT\");\n        else if ((p[2]-p[0]) * (p[1] - p[0]) < 0) puts(\"ONLINE_BACK\");\n        else puts(\"ONLINE_FRONT\");\n    }\n    return 0;\n}\n\n// ------- main ------- //\n\nint main ()\n{\n    //ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);\n    //freopen(\"in.txt\", \"r\", stdin);\n    //freopen(\"out.txt\", \"w\", stdout);\n\n    //Pre();\n    //int t; scanf(\"%d\", &t); while (t--) {\n    //while (~scanf(\"%d\", &n)) {\n    //while(fgets(s, N, stdin)) {   // 注意 fgets 会读入换行符\n        //if (n == 0) break;\n        //static int kase = 0; printf(\"Case %d: \", ++kase);\n        Init();\n        Solve();\n        //if (t) puts(\"\");\n    //}\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <complex>\n#include <cstdio>\n#include <map>\n\nusing namespace std;\n\n#define REP(i,n) for(int i = 0; i < (int)(n); ++i)\n#define FOR(i,a,b) for(int i = (a); i < (int)(b); ++i)\n#define ALL(c) (c).begin(), (c).end()\n#define SIZE(v) ((int)v.size())\n\ntypedef complex<double> P;\n\n// ??????\ndouble dot(const P& a, const P& b) {\n    return real(conj(a)*b);\n}\n\n// ??????\ndouble cross(const P& a, const P& b) {\n    return imag(conj(a)*b);\n}\n\n// ???p2?????????p0, p1???????????´???????°???±?????????\nP projection(const P& p0, const P& p1, const P& p2) {\n    // ???????????????????????´???\n    P vec1 = p1 - p0;\n    P vec2 = p2 - p0;\n    return p0 + vec1 * dot(vec1, vec2) / dot(vec1, vec1);\n}\n\n// ???p0, p1???????????´??????????§°?????¨????????????p2??¨????§°??????\nP reflection(const P& p0, const P& p1, const P& p2) {\n    P proj = projection(p0, p1, p2);\n    return proj - (p2 - proj);\n}\n\nint ccw(P a, P b, P c) {\n    b -= a; c -= a;\n    if (cross(b, c) > 0)   return +1;       // counter clockwise\n    if (cross(b, c) < 0)   return -1;       // clockwise\n    if (dot(b, c) < 0)     return +2;       // c--a--b on line\n    if (norm(b) < norm(c)) return -2;       // a--b--c on line\n    return 0;                               // a--c--b on line\n}\n\n// // ????????¨???P??¨??????????????????????????¢\n// double norm(const P& a, const P& b) {\n//     return dot(\n//     return real(conj(a)*b);\n// }\n\nint main(){\n    double x0, y0, x1, y1;\n    int Q;\n\n    cin >> x0 >> y0 >> x1 >> y1;\n    \n    P p0(x0, y0);\n    P p1(x1, y1);\n\n    cin >> Q;\n    REP(q, Q) {\n        double x2, y2;\n        cin >> x2 >> y2;\n        P p2(x2, y2);\n        auto ret = ccw(p0, p1, p2);\n        map<int, string> table{\n            {+1, \"COUNTER_CLOCKWISE\"},\n            {-1, \"CLOCKWISE\"},\n            {+2, \"ONLINE_BACK\"},\n            {-2, \"ONLINE_FRONT\"},\n            {0, \"ON_SEGMENT\"}\n        };\n        cout << table[ret] << endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nconst double EPS =  1e-10;\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nclass Point{\n    public:\n    double x, y;\n\n    Point(double x = 0, double y = 0): x(x), y(y){}\n\n    Point operator + (Point p){\n        return Point(x + p.x, y + p.y);\n    }\n    Point operator - (Point p){\n        return Point(x - p.x, y - p.y);\n    }\n    Point operator * (Point p){\n        return Point(x * p.x, y * p.y);\n    }\n    Point operator * (double r){\n        return Point(x * r, y * r);\n    }\n    Point operator / (Point p){\n        return Point(x / p.x, y / p.y);\n    }\n\n    double abs(){\n        return sqrt(norm());\n    }\n    double norm(){\n        return x * x + y * y;\n    }\n\n    bool operator < (const Point &p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n    bool operator == (const Point &p) const {\n        return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n    }\n    \n    \n};\n\ntypedef Point Vector;\n\nclass Segment : public Point{\n    public:\n    Point p1, p2;\n    Segment(Point p1_, Point p2_){\n        p1 = p1_;\n        p2 = p2_;\n    }\n    Segment(double a, double b, double c, double d){\n        Point(a, b);\n        Point(c, d);\n    }\n    \n};\n\ntypedef Segment Line;\n\ndouble dot(Point a, Point b){\n    return a.x * b.x + a.y * b.y;\n}\ndouble cross(Point a, Point b){\n    return a.x * b.y - a.y * b.x;\n}\nbool isOrthogonal(Point a, Point b){\n    return equals(dot(a, b), 0.0);\n}\nbool isParallel(Point a, Point b){\n    return equals(cross(a, b), 0.0);\n}\nbool isOrthogonal(Segment s1, Segment s2){\n    return equals(dot(s1.p2 - s1.p1, s2.p2 - s1.p1), 0.0);\n}\nbool isParallel(Segment s1, Segment s2){\n    return equals(cross(s1.p2 - s1.p1, s2.p2 - s1.p1), 0.0);\n}\n\nPoint project(Segment s, Point p){\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / base.norm();\n    //Vector tmp = s.p1 + base * r;\n    Vector tmp = base * r;\n    return s.p1 + base * r;\n}\n\nPoint reflect(Segment s, Point p){\n    return p + (project(s, p) - p) * 2;\n}\n\nint main(void){\n    Point p0, p1, p2;\n    \n    std::cin >> p0.x >> p0.y >> p1.x >> p1.y;\n    Vector a = p1 - p0;\n    int q;\n    std::cin >> q;\n\n    for(int i = 0; i < q; i++){\n        std::cin >> p2.x >> p2.y;\n        Vector b = p2 - p0;\n        if( cross(a, b) > EPS ) std::cout << \"COUNTER_CLOCKWISE\" << std::endl;\n        else if( cross(a, b) < -EPS ) std::cout << \"CLOCKWISE\" << std::endl;\n        else if( dot(a, b) < -EPS ) std::cout << \"ONLINE_BACK\" << std::endl;\n        else if( a.norm() < b.norm() ) std::cout << \"ONLINE_FRONT\" << std::endl;\n        //std::cout << std::fixed << std::setprecision(10) << ans.x << \" \" << ans.y << std::endl;\n        else std::cout << \"ON_SEGMENT\" << std::endl;\n    }\n\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <complex>\nusing namespace std;\ntypedef complex<int> point;\n\nstring ccw(point p0,point p1,point p2){\n  point temp;\n  p1-=p0;\n  p2-=p0;\n  temp=p1;\n  p1*=conj(p1);\n  p2*=conj(p1);\n  if(abs(temp)==0) return \"ON_SEGMENT\";\n  p1/=abs(temp);\n  p2/=abs(temp);\n  if(p2.imag()>0) return \"COUNTER_CLOCKWISE\";\n  if(p2.imag()<0) return \"CLOCKWISE\";\n  if(p2.real()<0) return \"ONLINE_BACK\";\n  if(p1.real()<p2.real()) return \"ONLINE_FRONT\";\n  return \"ON_SEGMENT\";\n}\n\nint main(){\n  int p0x,p0y,p1x,p1y,q,p2x,p2y;\n  cin>>p0x>>p0y>>p1x>>p1y;\n  point A = point(p0x,p0y);\n  point B = point(p1x,p1y);\n  cin>>q;\n  while(q--){\n    cin>>p2x>>p2y;\n    cout << ccw(  A, B , point(p2x,p2y) ) <<endl;    \n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <iostream>\n\nusing namespace std;\n\n#define EPS 1e-9\n\n#define PI 3.1415926535897932385\n\ndouble dist(int x, int y)\n{\n\treturn sqrt(x * x + y * y);\n}\n\ndouble angle(int x, int y)\n{\n\treturn atan2((double)(y), (double)(x));\n}\n\nint main()\n{\n\tint x0, y0, x1, y1, x2, y2, q;\n\n\tcin >> x0 >> y0 >> x1 >> y1 >> q;\n\n\tfor (int i = 0; i < q; i++)\n\t{\n\t\tcin >> x2 >> y2;\n\n\t\tint ax = x1 - x0;\n\t\tint ay = y1 - y0;\n\t\tint bx = x2 - x0;\n\t\tint by = y2 - y0;\n\n\t\tdouble ad = dist(ax, ay);\n\t\tdouble bd = dist(bx, by);\n\n\t\tdouble at = angle(ax, ay);\n\t\tdouble bt = angle(bx, by);\n\n\t\tdouble st = bt - at;\n\n\t\tif (st < -PI - EPS)\n\t\t{\n\t\t\tst += 2 * PI;\n\t\t}\n\n\t\tif (st > PI + EPS)\n\t\t{\n\t\t\tst -= 2 * PI;\n\t\t}\n\n\t\tdouble da, db;\n\n\t\tif (bx != 0 || by != 0)\n\t\t{\n\t\t\tif (ax == 0 || bx == 0)\n\t\t\t{\n\t\t\t\tda = 1.0 * ax / ay;\n\t\t\t\tdb = 1.0 * bx / by;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tda = 1.0 * ay / ax;\n\t\t\t\tdb = 1.0 * by / bx;\n\t\t\t}\n\t\t}\n\n\t\tif (bx == 0 && by == 0)\n\t\t{\n\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t}\n\t\telse if (-EPS < db - da && db - da < EPS)\n\t\t{\n\t\t\tif (ax * bx < 0 || ay * by < 0)\n\t\t\t{\n\t\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (ad < bd)\n\t\t\t\t{\n\t\t\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (st > EPS)\n\t\t{\n\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\t}\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\nusing Real = double;\nconstexpr Real EPS = 1e-10;\nconstexpr Real INF = 1e18;\nconst Real PI = acos(-1);\n\nusing P = complex<Real>;\nint sgn(const Real a) {\n    return (a < -EPS ? -1 : (a > EPS ? +1 : 0));\n}\n\ninline bool EQ(Real a, Real b) {\n    return (abs(a - b) < EPS);\n}\n\ninline Real Get_Value(Real a) {\n    return (EQ(a, 0) ? 0 : a);\n}\n\nistream &operator>>(istream &is, P &p) {\n    Real a, b;\n    is >> a >> b;\n    p = P(a, b);\n    return is;\n}\nostream &operator<<(ostream &os, P &p) {\n    return os << fixed << setprecision(12) << Get_Value(p.real()) << \" \" << Get_Value(p.imag());\n}\n\nP operator*(const P &p, const Real &d) {\n    return P(real(p) * d, imag(p) * d);\n}\n\nbool operator==(const P &p, const P &q) {\n    return (EQ(p.real(), q.real()) && EQ(p.imag(), q.imag()));\n}\n\nReal dot(const P &a, const P &b) {\n    // ベクトル a,b の内積\n    return (a.real() * b.real() + a.imag() * b.imag());\n}\n\nReal cross(const P &a, const P &b) {\n    // 外積\n    return a.real() * b.imag() - a.imag() * b.real();\n}\n\nstruct Line {\n    // 直線\n    P a, b;\n\n    Line() = default;\n\n    Line(P a, P b) : a(a), b(b) {}\n\n    Line(Real A, Real B, Real C) // Ax + By = C\n    {\n        if(EQ(A, 0))\n            a = P(0, C / B), b = P(1, C / B);\n        else if(EQ(B, 0))\n            b = P(C / A, 0), b = P(C / A, 1);\n        else\n            a = P(0, C / B), b = P(C / A, 0);\n    }\n\n    friend ostream &operator<<(ostream &os, Line &p) {\n        return os << p.a << \" to \" << p.b;\n    }\n\n    friend istream &operator>>(istream &is, Line &a) {\n        return is >> a.a >> a.b;\n    }\n};\n\nstruct Segment : Line {\n    // 線分\n    Segment() = default;\n    Segment(P a,P b):Line(a,b){}\n};\n\nstruct Circle {\n    // 円 p が中心 r が半径\n    P p;\n    Real r;\n    Circle() = default;\n    Circle(P p,Real r):p(p),r(r){};\n};\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_C\n// 点の回転方向\nint ccw(const P &a, P b, P c) {\n    b = b - a, c = c - a;\n    if(cross(b, c) > EPS) return +1;  // \"COUNTER_CLOCKWISE\" CがベクトルABの半時計方向にある\n    if(cross(b, c) < -EPS) return -1; // \"CLOCKWISE\" CがベクトルABの時計方向にある\n    if(dot(b, c) < 0) return +2;      // \"ONLINE_BACK\" Cが直線AB上かつAの方向にある\n    if(norm(b) < norm(c)) return -2;  // \"ONLINE_FRONT\" Cが直線AB上かつBの方向にある\n    return 0;                         // \"ON_SEGMENT\" Cが線分AB上に乗っている\n}\n\nbool is_orthogonal(const Line &a, const Line &b) {\n    // 2直線の直交判定\n    // 2つのベクトルの内積が0なら直交\n    return EQ(dot(a.a - a.b, b.a - b.b), 0.0);\n}\n\nbool is_parallel(const Line &a, const Line &b) {\n    // 2直線の平行判定\n    // 2つのベクトルの外積が0なら平行\n    return EQ(cross(a.b - a.a, b.a - b.b), 0.0);\n}\n\nbool is_point_on_line(const P &a, const P &b, const P &c) {\n    // 点cが直線a,b上にあるかどうか\n    // ab ベクトルと ac ベクトルが平行なら点cは直線a,b上にある\n    // 3点は同一直線状にあるともいえる\n    return EQ(cross(b - a, c - a), 0.0);\n}\n\nbool intersect(const Segment &s, const Segment &t) {\n    // 線分同士の交差判定\n    return ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 && ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0;\n}\n\nP projection(const Line &s, const P &p){\n    Real t = dot(p-s.a,s.a-s.b)/norm(s.a-s.b);\n    return s.a+(s.a-s.b)*t;\n}\n\nP refrection(const Line &s, const P &p) {\n    return (projection(s, p) - p) * 2.0 + p;\n}\n\nP refrection(const Segment &s, const P &p) {\n    return refrection((Line)s, p);\n}\n\nint main(){\n    P a,b;\n    cin >> a >> b;\n    int q;\n    cin >> q;\n    while(q--){\n        P p;\n        cin >> p;\n        int ret = ccw(a,b,p);\n        switch (ret)\n        {\n        case 1:\n            cout << \"COUNTER_CLOCKWISE\" << endl;\n            break;\n        case -1:\n            cout << \"CLOCKWISE\" << endl;\n            break;\n        case 2:\n            cout << \"ONLINE_BACK\" << endl;\n            break;\n        case -2:\n            cout << \"ONLINE_FRONT\" << endl;\n            break;\n        default :\n            cout << \"ON_SEGMENT\" << endl;\n            break;\n        }\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n#define ll long long\n#define int long long\n#define db double\n#define For(i,j,k) for(int i=(int)(j);i<=(int)(k);i++)\n#define Rep(i,j,k) for(int i=(int)(j);i>=(int)(k);i--)\ninline ll read(){\n\tll x=0;char ch=getchar();bool f=0;\n\tfor(;!isdigit(ch);ch=getchar()) if(ch=='-') f=1;\n\tfor(;isdigit(ch);ch=getchar()) x=x*10+ch-'0';\n\treturn f?-x:x;\n}\nvoid write(ll x){\n\tif(x<0) putchar('-'),x=-x;\n\tif(x>=10) write(x/10);putchar(x%10+'0');\n}\nvoid writeln(ll x){write(x);puts(\"\");}\nvoid writep(ll x){write(x);putchar(' ');}\n\nint const N=1e5+3;\nint top,n,m,cnt,sta[N];\nstruct point{\n\tdb x,y;\n    point operator - (point A) const{return (point){x-A.x,y-A.y};}\n    point operator + (point A) const{return (point){x+A.x,y+A.y};}\n    void print(){printf(\"%.10lf %.10lf\\n\",x,y);}\n}A,B,C,c[N],p1[N],p2[N];\n\npoint operator *(db x,point A){return (point){x*A.x,x*A.y};}\ndb CJ(point A,point B){return A.x*B.y-B.x*A.y;}//叉积 \ndb DJ(point A,point B){return A.x*B.x+A.y*B.y;}//点积 \ndb dis(point A){return sqrt(A.x*A.x+A.y*A.y);}//向量长度 \nbool cmp(point A,point B){return (CJ(A,B)>0 || CJ(A,B)==0 && dis(A)<dis(B));}//按极角排序 \nvoid Convex(point *A,int &n){//求凸包 \n\tfor (int i=1;i<=n;i++)\n\t  if (A[i].y<A[1].y || A[i].y==A[1].y && A[i].x<A[1].x) swap(A[i],A[1]);\n    point base=A[1];top=0;\n\tfor (int i=1;i<=n;i++) A[i]=A[i]-base;\n\tsort(A+2,A+n+1,cmp);\n\tsta[++top]=1;\n\tfor (int i=2;i<=n;sta[++top]=i,i++)\n\t  while (top>1 && CJ(A[i]-A[sta[top-1]],A[sta[top]]-A[sta[top-1]])>=0) top--;\n\tfor (int i=1;i<=top;i++) A[i]=A[sta[i]]+base;\n\tn=top;A[n+1]=A[1];\n}\nvoid Minkowski(point A[],point B[]){//闵可夫斯基（凸包合并） \n\tfor (int i=1;i<=n;i++) p1[i]=A[i+1]-A[i];\n\tfor (int i=1;i<=m;i++) p2[i]=B[i+1]-B[i];\n\tint i=1,j=1;c[cnt=1]=A[1]+B[1];\n\twhile (i<=n && j<=m)\n\t  if (CJ(p1[i],p2[j])>=0) cnt++,c[cnt]=c[cnt-1]+p1[i++];\n\t  else cnt++,c[cnt]=c[cnt-1]+p2[j++];\n\twhile (i<=n) cnt++,c[cnt]=c[cnt-1]+p1[i++];\n\twhile (j<=m) cnt++,c[cnt]=c[cnt-1]+p2[j++];\t\n}\nint check(point p){//判断一个点是否在凸包内 \n\tif (CJ(p,c[2])>0 || CJ(c[cnt],p)>0) return 0;\n\tint pos=lower_bound(c+1,c+cnt+1,p,cmp)-c-1;\n\treturn CJ(c[pos%cnt+1]-c[pos],p-c[pos])>=0; \n}\n\npoint CGL_1_A(point A,point B,point C){//点在直线上的投影点\n\tdb d=dis(B-A);\n\treturn (A+(DJ(C-A,B-A)/d/d*(B-A)));\n}\npoint CGL_1_B(point A,point B,point C){//点关于直线的对称点\n\tpoint P=CGL_1_A(A,B,C);\n\treturn (C+2*(P-C));\n}\nint CGL_1_C(point A,point B,point C){//向量的位置关系(向量AC和向量AB) \n    if (CJ(B-A,C-A)>0) return 1;//逆时针 \n    if (CJ(B-A,C-A)<0) return 2;//顺时针 \n    if (DJ(C-A,B-A)<0) return 3;//方向相反\n\tif (dis(C-A)>dis(B-A)) return 4;//方向相同 AC>AB\n\tif (dis(C-A)<=dis(B-A)) return 5;//方向相同 AB>AC\n}\n\n\nsigned main(){\n\tscanf(\"%lf%lf%lf%lf\",&A.x,&A.y,&B.x,&B.y);\n\tfor (int q=read();q;q--){\n\t\tscanf(\"%lf%lf\",&C.x,&C.y);\n\t\tint ans=CGL_1_C(A,B,C);\n\t\tif (ans==1) puts(\"COUNTER_CLOCKWISE\");\n\t\tif (ans==2) puts(\"CLOCKWISE\");\n\t\tif (ans==3) puts(\"ONLINE_BACK\");\n\t\tif (ans==4) puts(\"ONLINE_FRONT\");\n\t\tif (ans==5) puts(\"ON_SEGMENT\");\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define rep(i,n) for(int i=0;(i)<(n);++(i))\nusing namespace std;\n\n// Description: ????????????\n// Verifyed: various problem \nusing namespace placeholders;\nusing R=long double;\nconst R EPS=1e-9L; // [-1000,1000]->EPS=1e-8 [-10000,10000]->EPS=1e-7\ninline int sgn(const R& r){return(r > EPS)-(r < -EPS);}\ninline R sq(R x){return sqrt(max(x,0.0L));}\n\nconst R INF = 1E40L;\nconst R PI = acos(-1.0L);\nusing P=complex<R>;\nusing L=struct{P s,t;};\nusing VP=vector<P>;\nusing C=struct{P c;R r;};\n\nauto& operator >> (istream& is,P& p){ R x,y; is >> x >> y,p=P(x,y); return is;}\nauto& operator << (ostream& os,P& p){ os << real(p) << \" \" << imag(p); return os;}\n\ninline R dot(P o,P a,P b){return real(conj(a-o)*(b-o));}\ninline R det(P o,P a,P b){return imag(conj(a-o)*(b-o));}\ninline P vec(L l){return l.t-l.s;}\nauto sdot = bind(sgn,bind(dot,_1,_2,_3));\nauto sdet = bind(sgn,bind(det,_1,_2,_3));\n\n//projection verify AOJ CGL_1_A\nP proj(L l,P p){ R u=real((p-l.s)/vec(l)); return (1-u)*l.s+u*l.t;}\n\n//reflection verify AOJ CGL_1_B\nP refl(L l,P p){return 2.0L*proj(l,p)-p;}\n\n// CCW verify AOJ CGL_1_C\nenum CCW{ LEFT = 1,RIGHT = 2,BACK = 4,FRONT = 8,ON = 16};\ninline int ccw(P o,P a,P b) {\n\tif(sdet(o,a,b) > 0) return LEFT;    // counter clockwise\n\tif(sdet(o,a,b) < 0) return RIGHT;   // clockwise\n\tif(sdot(o,a,b) < 0) return BACK;    // b--base--a on line\n\tif(sgn(norm(a-o)-norm(b-o)) < 0) return FRONT;   // base--a--b on line\n\treturn ON; // base--b--a on line  semnet determination betwenn a and b \n}\n\nint main(void){\n\tP a,b,p;\n\tint n;\n\tcin >> a >> b >> n;\n\trep(i,n){\n\t\tcin >> p;\n\t\tint res=ccw(a,b,p);\n\t\tif(res==LEFT) cout << \"COUNTER_CLOCKWISE\" << endl;\n\t\tif(res==RIGHT) cout << \"CLOCKWISE\" << endl;\n\t\tif(res==BACK) cout << \"ONLINE_BACK\" << endl;\n\t\tif(res==FRONT) cout << \"ONLINE_FRONT\" << endl;\n\t\tif(res==ON) cout << \"ON_SEGMENT\" << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define repr(i,a,b) for(int i=a;i<b;i++)\n#define rep(i,n) for(int i=0;i<n;i++)\n#define reprrev(i,a,b) for(int i=b-1;i>=a;i--) // [a, b)\n#define reprev(i,n) reprrev(i,0,n)\ntypedef long long ll;\ntypedef unsigned long long ull;\ntemplate<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return true; } return false; }\ntemplate<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return true; } return false; }\n\n/* attention\n    long longのシフト演算には気をつけよう\n    タイポした時のデバッグが死ぬほどきつくなるので変数名は最低3字くらい使った方がいいかも\n    sizeは(int)とキャストしよう\n    cin.tie(0);\n    ios::sync_with_stdio(false);<- これら、printfとかと併用しない方が良さそう\n\n*/\n\nconst ll mod = 1e9+7;\n\nvoid chmod(ll &M){\n    if(M >= mod) M %= mod;\n    else if(M < 0){\n        M += (abs(M)/mod + 1)*mod;\n        M %= mod;\n    }\n}\n\nll modpow(ll x, ll n){\n    if(n==0) return 1;\n    ll res=modpow(x, n/2);\n\n    if(n%2==0) return res*res%mod;\n    else return res*res%mod*x%mod;\n}\n\nint getl(int i, int N) { return i==0? N-1:i-1; };\nint getr(int i, int N) { return i==N-1? 0:i+1; };\n\n\n// 線分 ab の偏角 返り値は[-π, π]\ndouble argument(const pair<double, double> &a, const pair<double, double> &b){\n    double ax=a.first, ay=a.second, bx=b.first, by=b.second;\n    return atan2(by-ay, bx-ax);\n}\n\n/* <-----------------------------------------------------------------------------------> */\n/* <-----------------------------------------------------------------------------------> */\n/* <-----------------------------------------------------------------------------------> */\n/* <-----------------------------------------------------------------------------------> */\n\n\nlong double const EPS = (1e-10);\nbool equal(long double const a, long double const b) { return fabs(a-b) < EPS; }\n\nstruct Point {\n    long double x, y;\n    Point(long double _x=0, long double _y=0) : x(_x), y(_y) {}\n\n    Point operator + (Point const & p) const { return Point{x + p.x, y + p.y}; }\n    Point & operator += (Point const & p) { x += p.x; y += p.y; return *this; }\n    Point operator - (Point const & p) const { return Point{x - p.x, y - p.y}; }\n    Point & operator -= (Point const & p) { x -= p.x; y -= p.y; return *this; }\n    Point operator * (long double a) const { return Point{a*x, a*y}; }\n    Point & operator *= (long double a) { x *= a; y *= a; return *this; }\n    Point operator / (long double a) const { return Point{x/a, y/a}; }\n\n    long double norm() { return x*x + y*y; }\n    long double abs() { return sqrt(norm()); }\n    \n    bool operator < (Point const & p) const { return x != p.x ? x < p.x : y < p.y; }\n    bool operator == (Point const & p) const { return equal(x, p.x) && equal(y, p.y); }\n\n    void print() { cout << x << ' ' << y << \"\\n\"; }\n};\nusing Vector = Point;\n\nstruct Segment{\n    Point p1, p2;\n    Segment(Point _p1, Point _p2)\n        : p1(_p1), p2(_p2) {}\n};\nusing Line = Segment;\n\nstruct Circle{\n    Point c;\n    double r;\n    Circle(Point _c, double _r)\n        : c(_c), r(_r) {}\n};\nusing Polygon = vector<Point>;\n\n// 内積 外積 外積は大きさを返す つまり |a||b|sin(theta)\n// https://mathtrain.jp/gaiseki\ndouble dot(Vector a, Vector b) { return a.x*b.x + a.y*b.y; }\ndouble cross(Vector a, Vector b) { return a.x*b.y - a.y*b.x; }\n\n// ベクトルの直交判定　平行判定\nbool isOrthogonal(Vector const & a, Vector const & b) { return equal(dot(a, b), 0.0); }\nbool isOrthogonal(Point const & a1, Point const & a2, Point const & b1, Point const & b2) { return isOrthogonal(a1-a2, b1-b2); }\nbool isOrthogonal(Segment const & s1, Segment const & s2) { return isOrthogonal(s1.p1 - s1.p2, s2.p1 - s2.p2); }\nbool isParallel(Vector const & a, Vector const & b) { return equal(cross(a, b), 0); }\nbool isParallel(Point const & a1, Point const & a2, Point const & b1, Point const & b2) { return isParallel(a1-a2, b1-b2); }\nbool isParallel(Segment const & s1, Segment const & s2) { return isParallel(s1.p1-s1.p2, s2.p1-s2.p2); }\n\n// 線分 s に対する点 p の射影\nPoint project(Segment const & s, Point const & p){\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / base.norm();\n    return s.p1 + base * r;\n}\n// 線分 s を対称軸とした点 p の線対称点\nPoint reflect(Segment const & s, Point const & p) { return p + (project(s, p) - p) * 2.0; }\n\n// 線分p0-p1 に対して線分 p0-p2 が反時計回りなのか直線上なのか線分上なのか...\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;   // p2-p0-p1\nstatic const int ONLINE_FRONT = -2; // p0-p1-p2\nstatic const int ON_SEGMENT = 0;    // p0-p2-p1\nint ccw(Point const & p0, Point const & p1, Point const & p2){\n    Vector a = p1 - p0, b = p2 - p0;\n    if(cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n    if(cross(a, b) < -EPS) return CLOCKWISE;\n    if(dot(a, b) < -EPS) return ONLINE_BACK;\n    if(a.norm() < b.norm()) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\n// 線分 p1-p2 と線分 p3-p4 の交差判定（交点を持てば true）\nbool intersect(Point const & p1, Point const & p2, Point const & p3, Point const & p4){\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 && ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\nbool intersect(Segment const & s1, Segment const & s2) { return intersect(s1.p1, s1.p2, s2.p1, s2.p2); }\n\n\nint main(){\n    cin.tie(nullptr);\n    ios::sync_with_stdio(false);\n\n    int a, b, c, d; cin >> a >> b >> c >> d;\n    Point p0(a, b), p1(c, d);\n    int q; cin >> q;\n    while(q--) {\n        int x, y; cin >> x >> y;\n        Point p2(x, y);\n        int i = ccw(p0, p1, p2);\n        if (i==1) cout << \"COUNTER_CLOCKWISE\" << endl;\n        if (i==-1) cout << \"CLOCKWISE\" << endl;\n        if (i==2) cout << \"ONLINE_BACK\" << endl;\n        if (i==-2) cout << \"ONLINE_FRONT\" << endl;\n        if (i==0) cout << \"ON_SEGMENT\" << endl;\n    }\n\n\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <math.h>\n#include <algorithm>\nusing namespace std;\n\nint main(){\n\tdouble x1,x2,xp,y1,y2,yp1,yp,naiseki,norm1,norm2,gaiseki;\n\tint q;\n\n\tscanf(\"%lf %lf %lf %lf\",&x1,&y1,&x2,&y2);\n\tscanf(\"%d\",&q);\n\n\tfor(int i=0; i < q; i++){\n\t\tscanf(\"%lf %lf\",&xp,&yp);\n\t\tnorm1 = sqrt((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1));\n\t\tnorm2 = sqrt((xp-x1)*(xp-x1)+(yp-y1)*(yp-y1));\n\t\tnaiseki = (xp-x1)*(x2-x1)+(yp-y1)*(y2-y1);\n\t\tgaiseki = (x2-x1)*(yp-y1)-(xp-x1)*(y2-y1);\n\t\tif(fabs(naiseki/(norm1*norm2)+1) < 0.00000001){\n\t\t\tprintf(\"ONLINE_BACK\\n\");\n\t\t}else if(fabs(naiseki-norm1*norm2)< 0.00000001){\n\t\t\tif(norm1 > norm2){\n\t\t\t\tprintf(\"ON_SEGMENT\\n\");\n\t\t\t}else{\n\t\t\t\tprintf(\"ONLINE_FRONT\\n\");\n\t\t\t}\n\t\t}else if(gaiseki > 0){\n\t\t\tprintf(\"COUNTER_CLOCKWISE\\n\");\n\t\t}else{\n\t\t\tprintf(\"CLOCKWISE\\n\");\n\t\t}\n\t}\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <complex>\n#include <string>\n#define x real() \n#define y imag() \nusing namespace std;\ntypedef complex <double> point;\ntypedef complex<double> vectol;\n\nstring ccw(point a,point b,point c) {\n  vectol ab= a-b, ac = c-b;\n  vectol d  = ac * conj(ab); \n  d /= abs(ab);\n  if(d.y< 0) return \"COUNTER_CLOCKWISE\";\n  if(d.y > 0) return \"CLOCKWISE\";\n\n  b = ab * conj(ab);\n  b /= abs(ab);\n  if(b.x > d.x) return \"ONLINE_FRONT\";\n  if(b.x < d.x) return \"ONLINE_BACK\";\n  return \"ON_SEGMENT\";\n}\n\nint main() {\n  double x0,y0,x1,y1;\n  cin>>x0>>y0>>x1>>y1;\n  point a = point( x0, y0);\n  point b = point( x1, y1);\n  int n;\n  cin >> n;\n  for(int i=0;i<n;i++){\n    cin >> x0 >> y0;\n    cout << ccw(a,b,point(x0,y0)) <<endl;\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<map>\n#include<vector>\n#include<algorithm>\n#include<cmath>\n#include<climits>\n#include<ctime>\n#include<cstring>\n#include<stack>\n#include<queue>\n#include<sstream>\n#include<string>\n#include<set>\n#include<array>\n\n#define ALL(v) (v).begin(),(v).end()\n#define REP(i,p,n) for(int i=p;i<(int)(n);++i)\n#define rep(i,n) REP(i,0,n)\n#define DUMP(list) cout << \"{ \"; for(auto nth : list){ cout << nth << \" \"; } cout << \"}\" << endl\n#define FOR(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i);\n\nusing namespace std;\n\ntypedef double Real;\n\nconst Real EPS = 1e-8;\n\nint sign(Real d){\n\treturn d > EPS ? 1 : d < -EPS ? -1 : 0;\n}\n\nstruct Point{\n\tReal x,y;\n\t\n\tPoint(Real x_ = 0,Real y_ = 0):x(x_),y(y_){}\n\n\tPoint operator+(const Point &p) const {return Point(x+p.x,y+p.y);}\n\tPoint operator-(const Point &p) const {return Point(x-p.x,y-p.y);}\n\tPoint operator*(Real s) const {return Point(x*s,y*s);}\n\tPoint operator/(Real s) const {return Point(x/s,y/s);}\n\tbool operator<(const Point &p) const{return sign(x-p.x) == -1 || (sign(x-p.x) == 0 && sign(y-p.y) == -1);}\n\tbool operator==(const Point &p) const{return sign(x-p.x) == 0 && sign(y-p.y) == 0;}\n\n};\n\nistream &operator>>(istream &is,Point &p){return is >> p.x >> p.y;}//??\\???????°???????\nostream &operator<<(ostream &os ,const Point &p){return os << '(' << p.x << \", \" << p.y << ')';}//??????????°???????\n\nstruct Segment : public array<Point,2>{\n\tSegment(const Point &a,const Point &b){\tat(0) = a; at(1) = b;}\n};\n\nstruct Line : public array<Point,2>{\n\tLine(const Point &a,const Point &b){at(0) = a; at(1) = b;}\n};\n\nstruct Circle{\n\tPoint c;\n\tReal r;\n\n\tCircle(const Point &c_, Real r_):c(c_),r(r_){}\n};\n\ntypedef vector<Point> Polygon;\n\n\n\nPoint rotate90(const Point &p){\n\treturn Point(-p.y,p.x);\n}\n\nPoint rotate(const Point &p,Real theta){\n\tconst Real s = sin(theta),c = cos(theta);\n\treturn Point(c*p.x-s*p.y,s*p.x+c*p.y);\n}\n\nReal angle(const Point &p){\n\treturn atan2(p.y,p.x);\n}\n\nReal dot(const Point &a,const Point &b){ //??????????????????\n\treturn a.x*b.x+a.y*b.y;\n}\n\nReal cross(const Point &a,const Point &b){ //??????????????????\n\treturn a.x*b.y-a.y*b.x;\n}\n\n\nReal norm(const Point &p){\n\treturn p.x*p.x+p.y*p.y;\n}\n\nReal abs(const Point &p){\n\treturn sqrt(norm(p));\n}\n\nenum { CCW=1,CW=-1,BACK=2,FRONT=-2,ON=0 };\nint ccw(const Point &a,const Point &b,const Point &c){\n\tconst Point p = b-a;\n\tconst Point q = c-a;\n\tconst Real crs = cross(p,q);\n\t\n\tif(sign(crs) == 1) return CCW;\n\tif(sign(crs) == -1) return CW;\n\tif(sign(dot(p,q)) == -1) return BACK;\n\tif(sign(norm(p) - norm(q)) == -1) return FRONT;\n\treturn ON;\n}\n\nPoint project(const Line &l,const Point &p){ //?°???±\n\tReal t = dot(p-l[0], l[1]-l[0]) / norm(l[0] - l[1]);\n\treturn l[0] + (l[1] - l[0]) * t;\n}\n\nPoint refrect(const Line &l,const Point &p){ //????°?\n\tconst Point c = project(l,p);\n\treturn c+(c-p);\n}\n\nbool intersect(const Line &a,const Line &b){ //????????????\n\treturn sign(cross(a[1]-a[0],b[1]-b[0])) != 0\n\t\t||\tsign(cross(a[1]-a[0],b[1]-a[0]) == 0);\n}\n\n\nint main(){\n\n\tcout.setf(ios::fixed);\n\tcout.precision(10);\n\n\tmap<int,string> strs;\n\tstrs[CCW]=\"COUNTER_CLOCKWISE\";\n\tstrs[CW]=\"CLOCKWISE\";\n\tstrs[BACK]=\"ONLINE_BACK\";\n\tstrs[FRONT]=\"ONLINE_FRONT\";\n\tstrs[ON]=\"ON_SEGMENT\";\n\n\tPoint p0,p1,p2;\n\tcin >> p0 >> p1;\n\tint q;\n\tcin >> q;\n\n\trep(i,q){\n\t\tcin >> p2;\n\t\tcout << strs[ccw(p0,p1,p2)] << endl;\t\t\t\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define _CRT_SECURE_NO_WARNINGS\n#define _USE_MATH_DEFINES\n#include <iostream>\n#include <cstdio>\n#include <math.h>\n#include <algorithm>\nconst double EPS = 1e-9;\nusing namespace std;\nclass vector {\npublic:\n\tdouble x, y;\n\tvector(double a, double  b) {\n\t\tx = a;\n\t\ty = b;\n\t};\n\tvector operator * (const vector &v)const {\n\t\treturn vector(x*v.x, y* v.y);\n\t}\n\tvector operator * (double a) {\n\t\treturn vector(x * a, y * a);\n\t}\n\tvector operator - (vector v) {\n\t\treturn vector(x - v.x, y - v.y);\n\t}\n\tvector operator + (vector v) {\n\t\treturn vector(x + v.x, y + v.y);\n\t}\n};\ninline double dot(vector v1, vector v2) {\n\treturn v1.x*v2.x + v1.y*v2.y;\n}\ninline double squ(vector v) {\n\treturn v.x*v.x + v.y*v.y;\n}\ninline double norm(vector v) {\n\treturn sqrt(squ(v));\n}\ninline void print(vector v) {\n\tprintf(\"%.10f %.10f\\n\", v.x, v.y);\n}\ninline vector pro(vector base, vector v, vector be) {\n\tdouble a = dot(base, v) / squ(base);\n\tvector v1 = base * a;\n\treturn v1 + be;\n}\ninline vector ref(vector v, vector be) {\n\treturn (v - be)*2 + be;\n}\ninline double cross(vector v1, vector v2) {\n\treturn v1.x*v2.y - v1.y*v2.x;\n}\ninline int ccw(vector v1, vector v2, vector v3) {\n\tvector a = v2 - v1;\n\tvector b = v3 - v1;\n\tif (cross(a, b) < 0.0) return -1;\n\telse if (cross(a, b) > 0.0) return 1;\n\telse if (dot(a, b) < 0.0) return -2;\n\telse if (dot(a, b) > squ(v1)) return 2;\n\telse return 0;\n}\ninline int inter(vector v1, vector v2, vector v3, vector v4) {\n\treturn (ccw(v1, v2, v3) * ccw(v1, v2, v4) <= 0) && (ccw(v3, v4, v1) * ccw(v3, v4, v2) <= 0);\n}\ninline double disPP(vector v1, vector v2) {\n\treturn norm(v2 - v1);\n}\ninline double disLP(vector v1, vector v2, vector v3) {\n\tvector a = v2 - v1;\n\tvector b = v3 - v1;\n\treturn fabs(cross(a, b) / norm(a));\n}\ninline double disSP(vector v1, vector v2, vector v3) {\n\tvector a = v2 - v1;\n\tvector b = v3 - v1;\n\tvector c = v1 - v2;\n\tvector d = v3 - v2;\n\tif (dot(a, b) < 0.0) return disPP(v1, v3);\n\telse if (dot(c, d) < 0.0) return disPP(v2, v3);\n\telse return disLP(v1, v2, v3);\n}\ninline double disSS(vector v1, vector v2, vector v3, vector v4) {\n\tif (inter(v1, v2, v3, v4)) return 0;\n\tdouble a = disSP(v1, v2, v3);\n\tdouble b = disSP(v1, v2, v4);\n\tdouble c = disSP(v3, v4, v1);\n\tdouble d = disSP(v3, v4, v2);\n\treturn min(min(a, b), min(c, d));\n}\n/*int main() {\n\t//inter\n\tint n;\n\tdouble x0, x1, x2, x3, y0, y1, y2, y3;\n\tcin >> n;\n\tfor (int i = 0; i < n; i++) {\n\t\tcin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n\t\tvector v1(x0,y0);\n\t\tvector v2(x1, y1);\n\t\tvector v3(x2, y2);\n\t\tvector v4(x3, y3);\n\t\tcout << inter(v1, v2, v3, v4) << endl;\n\t}\n\treturn 0;\n}*/\nint main() {\n\t//clo\n\tint n;\n\tdouble x0, x1, x2, y0, y1, y2;\n\tcin >> x0 >> y0 >> x1 >> y1 >> n;\n\tvector v1(x0, y0);\n\tvector v1(x1, y1);\n\tfor(int i = 0; i < n; i++) {\n\t\tcin >> x2 >> y2;\n\t\tvector v2(x2, y2);\n\t\tint ans = ccw(v0, v1, v2);\n\t\t if(ans == -1) cout << \"CLOCKWISE\" << endl;\n\t\t else if(ans == 1) cout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t  else if(ans == -2)cout << \"ONLINE_BACK\" << endl;\n\t\t  else if(ans == 2)cout << \"ONLINE_FRONT\" << endl;\n\t\telse cout << \"ON_SEGMENT\" << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\n#include<unordered_map>\n#include<unordered_set>\n#pragma warning(disable:4996)\nusing namespace std;\nusing ld = long double;\ntemplate<class T>\nusing Table = vector<vector<T>>;\nconst ld eps=1e-9;\n\n//// < \"D:\\D_Download\\Visual Studio 2015\\Projects\\programing_contest_c++\\Debug\\a.txt\" > \"D:\\D_Download\\Visual Studio 2015\\Projects\\programing_contest_c++\\Debug\\b.txt\"\n \n\n/* ??????????????¬ */\n\n#include <complex>\n\ntypedef complex<ld> Point;\n#define rep(i,n) for(int i=0;i<(int)(n);i++)\n#define all(x) (x).begin(),(x).end()\n\n\nconst ld pi = acos(-1.0);\nconst ld dtop = pi / 180.;\nconst ld ptod = 1. / dtop;\n\nnamespace std {\n\tbool operator<(const Point &lhs, const Point &rhs) {\n\t\tif (lhs.real() < rhs.real() - eps) return true;\n\t\tif (lhs.real() > rhs.real() + eps) return false;\n\t\treturn lhs.imag() < rhs.imag();\n\t}\n}\n\n// ????????\\???\nPoint input_Point() {\n\tld x, y;\n\tcin >> x >> y;\n\treturn Point(x, y);\n}\n\n// ????????????????????????\nbool eq(const ld a, const ld b) {\n\treturn (abs(a - b) < eps);\n}\n\n// ??????\nld dot(const Point& a, const Point& b) {\n\treturn real(conj(a) * b);\n}\n\n// ??????\nld cross(const Point& a, const Point& b) {\n\treturn imag(conj(a) * b);\n}\n\n// ??´????????????\nclass Line {\npublic:\n\tPoint a, b;\n\tLine() : a(Point(0, 0)), b(Point(0, 0)) {}\n\tLine(Point a, Point b) : a(a), b(b) {}\n\tPoint operator[](const int _num)const {\n\t\tif (_num == 0)return a;\n\t\telse if (_num == 1)return b;\n\t\telse {\n\t\t\tassert(false);\n\t\t\treturn Point();\n\t\t}\n\t}\n};\n\n// ????????????\nclass Circle {\npublic:\n\tPoint p;\n\tld r;\n\tCircle() : p(Point(0, 0)), r(0) {}\n\tCircle(Point p, ld r) : p(p), r(r) {}\n};\n\n// ccw\n// 1: a,b,c??????????¨???¨?????????????????¶\n//-1: a,b,c???????¨???¨?????????????????¶\n// 2: c,a,b???????????´???????????¶\n//-2: a,b,c???????????´???????????¶\n// 0: a,c,b???????????´???????????¶\nint ccw(const Point& a, const Point &b, const Point &c) {\n\tconst Point nb(b - a);\n\tconst Point nc(c - a);\n\tif (cross(nb, nc) > eps) return 1;   // a,b,c??????????¨???¨?????????????????¶\n\tif (cross(nb, nc) < -eps) return -1; // a,b,c???????¨???¨?????????????????¶\n\tif (dot(nb, nc) < 0) return 2;       // c,a,b???????????´???????????¶\n\tif (norm(nb) < norm(nc)) return -2;  // a,b,c???????????´???????????¶\n\treturn 0;                          // a,c,b???????????´???????????¶\n}\n\n\n/* ???????????? */\n\n// ??´?????¨??´??????????????????\nbool isis_ll(const Line& l, const Line& m) {\n\treturn !eq(cross(l.b - l.a, m.b - m.a), 0);\n}\n\n// ??´?????¨?????????????????????\nbool isis_ls(const Line& l, const Line& s) {\n\treturn isis_ll(l, s) &&\n\t\t(cross(l.b - l.a, s.a - l.a) * cross(l.b - l.a, s.b - l.a) < eps);\n}\n\n// ????????¨?????????????????????\nbool isis_ss(const Line& s, const Line& t) {\n\treturn ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 &&\n\t\tccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0;\n}\n\n// ????????´????????????\nbool isis_lp(const Line& l, const Point& p) {\n\treturn (abs(cross(l.b - p, l.a - p)) < eps);\n}\n\n// ?????????????????????\nbool isis_sp(const Line& s, const Point& p) {\n\treturn (abs(s.a - p) + abs(s.b - p) - abs(s.b - s.a) < eps);\n}\n\n// ??????????¶?\nPoint proj(const Line &l, const Point& p) {\n\tld t = dot(p - l.a, l.b - l.a) / norm(l.a - l.b);\n\treturn l.a + t * (l.b - l.a);\n}\n\n//???????±??????????????????????\nPoint reflect(const Line &l, const Point &p) {\n\tPoint pr = proj(l, p);\n\treturn pr * 2.l - p;\n}\n\n// ??´?????¨??´????????????\nPoint is_ll(const Line &s, const Line& t) {\n\tPoint sv = s.b - s.a, tv = t.b - t.a;\n\tassert(cross(sv, tv) != 0);\n\treturn s.a + sv * cross(tv, t.a - s.a) / cross(tv, sv);\n}\n// ??´?????¨??´????????????\nvector<Point> is_ll2(const Line &s, const Line& t) {\n\tPoint sv = s.b - s.a, tv = t.b - t.a;\n\tif (cross(sv, tv) != 0)return vector<Point>(1, is_ll(s, t));\n\telse {\n\t\tvector<Point>ans;\n\t\tfor (int k = 0; k < 2; ++k) {\n\t\t\tif (isis_sp(s, t[k]) && find(ans.begin(), ans.end(), t[k]) == ans.end())ans.push_back(t[k]);\n\t\t\tif (isis_sp(t, s[k]) && find(ans.begin(), ans.end(), s[k]) == ans.end())ans.push_back(s[k]);\n\t\t}\n\t\treturn ans;\n\t}\n}\n// ????????¨???????????????\n//???????????£????????¨???????????¨assert(false)\nPoint is_ss(const Line &s, const Line& t) {\n\tif (isis_ss(s, t)) {\n\t\tfor (int k = 0; k < 2; ++k) {\n\t\t\tfor (int l = 0; l < 2; ++l) {\n\t\t\t\tif (s[k] == t[l])return s[k];\n\t\t\t}\n\t\t}\n\t\treturn is_ll(s, t);\n\t}\n\telse {\n\t\t//??????isis_ss?????????\n\t\tassert(false);\n\t\treturn Point(0, 0);\n\t}\n}\n// ????????¨???????????????\nvector<Point> is_ss2(const Line &s, const Line& t) {\n\tvector<Point> kouho(is_ll2(s, t));\n\tvector<Point>ans;\n\tfor (auto p : kouho) {\n\t\tif (isis_sp(s, p) && isis_sp(t, p))ans.emplace_back(p);\n\t}\n\treturn ans;\n}\n// ??´?????¨???????????¢\nld dist_lp(const Line& l, const Point& p) {\n\treturn abs(p - proj(l, p));\n}\n\n//??´?????¨??´???????????¢\nld dist_ll(const Line& l, const Line& m) {\n\treturn isis_ll(l, m) ? 0 : dist_lp(l, m.a);\n}\n\n// ??´?????¨??????????????¢\nld dist_ls(const Line& l, const Line& s) {\n\treturn isis_ls(l, s) ? 0 : min(dist_lp(l, s.a), dist_lp(l, s.b));\n}\n\n// ????????¨???????????¢\nld dist_sp(const Line& s, const Point& p) {\n\tPoint r = proj(s, p);\n\treturn isis_sp(s, r) ? abs(r - p) : min(abs(s.a - p), abs(s.b - p));\n}\n\n// ????????¨??????????????¢\nld dist_ss(const Line& s, const Line& t) {\n\tif (isis_ss(s, t)) return 0;\n\treturn min({ dist_sp(s, t.a), dist_sp(s, t.b), dist_sp(t, s.a), dist_sp(t, s.b) });\n}\n\n\n//??´?????¨??´?????????????????????????????????\nLine bisection(const Line &s, const Line &t) {\n\tconst Point laglanju(is_ll(s, t));\n\tconst Point avec = !(abs(laglanju - s[0])<eps) ? s[0] - laglanju : s[1] - laglanju;\n\tconst Point bvec = !(abs(laglanju - t[0])<eps) ? t[0] - laglanju : t[1] - laglanju;\n\n\treturn Line(laglanju, laglanju + (abs(bvec)*avec + abs(avec)*bvec) / (abs(avec) + abs(bvec)));\n}\n\n\n//???????????´?????????????????????\n//???????????´??????????????§???????????¨????¢?????????¨?????????\nPoint  inner_center(const vector<Line>&ls) {\n\tvector<Point>vertics;\n\tfor (int i = 0; i <static_cast<int>(ls.size()); ++i) {\n\t\tvertics.push_back(is_ll(ls[i], ls[(i + 1) % 3]));\n\t}\n\tif (vertics[0] == vertics[1] || vertics[1] == vertics[2] || vertics[2] == vertics[0])return vertics[0];\n\tLine bi1(bisection(Line(vertics[0], vertics[1]), Line(vertics[0], vertics[2])));\n\tLine bi2(bisection(Line(vertics[1], vertics[2]), Line(vertics[1], vertics[0])));\n\tif (bi1[0] == bi2[0])return bi1[0];\n\telse {\n\t\treturn is_ll(bi1, bi2);\n\t}\n}\n\n//???????????´?????????????????????\n//???????????´??????????????§???????????¨????¢?????????¨?????????\nvector<Point>  ex_center(const vector<Line>&ls) {\n\tvector<Point>vertics;\n\tfor (int i = 0; i < static_cast<int>(ls.size()); ++i) {\n\t\tvertics.push_back(is_ll(ls[i], ls[(i + 1) % 3]));\n\t}\n\tif (abs(vertics[0] - vertics[1])<eps || abs(vertics[1] - vertics[2])<eps || (abs(vertics[2] - vertics[0])<eps))return vector<Point>();\n\tvector<Point>ecs;\n\tfor (int i = 0; i < 3; ++i) {\n\t\tLine bi1(bisection(Line(vertics[i], vertics[i] * 2.0l - vertics[(i + 2) % 3]), Line(vertics[i], vertics[(i + 1) % 3])));\n\t\tLine bi2(bisection(Line(vertics[(i + 1) % 3], vertics[(i + 1) % 3] * 2.0l - vertics[(i + 2) % 3]), Line(vertics[(i + 1) % 3], vertics[i])));\n\t\tecs.push_back(is_ll(bi1, bi2));\n\t}\n\treturn ecs;\n}\n\n\n//a,b:??????\n//c:????????§??????\n//???????????´?????????????????¢?????????????±??????????\nvector<Point>  same_dis(const vector<Line>&ls) {\n\tvector<Point>vertics;\n\tvertics.push_back(is_ll(ls[0], ls[2]));\n\tvertics.push_back(is_ll(ls[1], ls[2]));\n\n\tif (abs(vertics[0] - vertics[1]) < eps)return vector<Point>{vertics[0]};\n\tLine bis(bisection(ls[0], ls[1]));\n\tvector<Point>ecs;\n\n\tLine abi(bisection(Line(vertics[0], vertics[1]), ls[0]));\n\tecs.push_back(is_ll(bis, abi));\n\n\n\tLine bbi(bisection(Line(vertics[0], 2.l*vertics[0] - vertics[1]), ls[0]));\n\tecs.push_back(is_ll(bis, bbi));\n\n\treturn ecs;\n}\n/* ??? */\n\n// ?????¨????????????\nvector<Point> is_cc(const Circle& c1, const Circle& c2) {\n\tvector<Point> res;\n\tld d = abs(c1.p - c2.p);\n\tld rc = (d * d + c1.r * c1.r - c2.r * c2.r) / (2 * d);\n\tld dfr = c1.r * c1.r - rc * rc;\n\tif (abs(dfr) < eps) dfr = 0.0;\n\telse if (dfr < 0.0) return res; // no intersection\n\tld rs = sqrt(dfr);\n\tPoint diff = (c2.p - c1.p) / d;\n\tres.push_back(c1.p + diff * Point(rc, rs));\n\tif (dfr != 0.0) res.push_back(c1.p + diff * Point(rc, -rs));\n\treturn res;\n}\n\n//???????????????????????????\n/*  0 => out\n1 => on\n2 => in*/\nint is_in_Circle(const Circle &cir, const  Point& p) {\n\tld dis = abs(cir.p - p);\n\tif (dis > cir.r + eps)return 0;\n\telse if (dis < cir.r - eps)return 2;\n\telse return 1;\n}\n//???lc??????rc??????????????????\n/*0 => out\n1 => on\n2 => in*/\nint Circle_in_Circle(const Circle &lc, const  Circle&rc) {\n\tld dis = abs(lc.p - rc.p);\n\tif (dis < rc.r - lc.r - eps)return 2;\n\telse if (dis>rc.r - lc.r + eps)return 0;\n\telse return 1;\n}\n\n// ?????¨??´????????????\nvector<Point> is_lc(const Circle& c, const Line& l) {\n\tvector<Point> res;\n\tld d = dist_lp(l, c.p);\n\tif (d < c.r + eps) {\n\t\tld len = (d > c.r) ? 0.0 : sqrt(c.r * c.r - d * d); //safety;\n\t\tPoint nor = (l.a - l.b) / abs(l.a - l.b);\n\t\tres.push_back(proj(l, c.p) + len * nor);\n\t\tres.push_back(proj(l, c.p) - len * nor);\n\t}\n\treturn res;\n}\n\n// ?????¨??????????????¢\nvector<Point> is_sc(const Circle& c, const Line& l) {\n\tvector<Point> v = is_lc(c, l), res;\n\tfor (Point p : v)\n\t\tif (isis_sp(l, p)) res.push_back(p);\n\treturn res;\n}\n\n// ?????¨????????\\???\nvector<Line> tangent_cp(const Circle& c, const Point& p) {\n\tvector<Line> ret;\n\tPoint v = c.p - p;\n\tld d = abs(v);\n\tld l = sqrt(norm(v) - c.r * c.r);\n\tif (isnan(l)) { return ret; }\n\tPoint v1 = v * Point(l / d, c.r / d);\n\tPoint v2 = v * Point(l / d, -c.r / d);\n\tret.push_back(Line(p, p + v1));\n\tif (l < eps) return ret;\n\tret.push_back(Line(p, p + v2));\n\treturn ret;\n}\n\n// ?????¨????????\\???\nvector<Line> tangent_cc(const Circle& c1, const Circle& c2) {\n\tvector<Line> ret;\n\tif (abs(c1.p - c2.p) - (c1.r + c2.r) > -eps) {\n\t\tPoint center = (c1.p * c2.r + c2.p * c1.r) / (c1.r + c2.r);\n\t\tret = tangent_cp(c1, center);\n\t}\n\tif (abs(c1.r - c2.r) > eps) {\n\t\tPoint out = (-c1.p * c2.r + c2.p * c1.r) / (c1.r - c2.r);\n\t\tvector<Line> nret = tangent_cp(c1, out);\n\t\tret.insert(ret.end(), all(nret));\n\t}\n\telse {\n\t\tPoint v = c2.p - c1.p;\n\t\tv /= abs(v);\n\t\tPoint q1 = c1.p + v * Point(0, 1) * c1.r;\n\t\tPoint q2 = c1.p + v * Point(0, -1) * c1.r;\n\t\tret.push_back(Line(q1, q1 + v));\n\t\tret.push_back(Line(q2, q2 + v));\n\t}\n\treturn ret;\n}\n//??????????????????????????¢???\nld two_Circle_area(const Circle&l, const Circle&r) {\n\tld dis = abs(l.p - r.p);\n\tif (dis > l.r + r.r)return 0;\n\telse if (dis + r.r < l.r) {\n\t\treturn r.r*r.r*pi;\n\t}\n\telse if (dis + l.r < r.r) {\n\t\treturn l.r*l.r*pi;\n\t}\n\telse {\n\t\tld ans = (l.r)*(l.r)*acos((dis*dis + l.r*l.r - r.r*r.r) / (2 * dis*l.r)) +\n\t\t\t(r.r)*(r.r)*acos((dis*dis + r.r*r.r - l.r*l.r) / (2 * dis*r.r)) -\n\t\t\tsqrt(4 * dis*dis*l.r*l.r - (dis*dis + l.r*l.r - r.r*r.r)*(dis*dis + l.r*l.r - r.r*r.r)) / 2;\n\t\treturn ans;\n\t}\n\n}\n\n/* ????§???¢ */\n\ntypedef vector<Point> Polygon;\n\n// ??¢???\nld area(const Polygon &p) {\n\tld res = 0;\n\tint n = p.size();\n\trep(j, n) res += cross(p[j], p[(j + 1) % n]);\n\treturn res / 2;\n}\n\n//????§???¢????????¢??????\nbool is_counter_clockwise(const Polygon &poly) {\n\tld angle = 0;\n\tint n = poly.size();\n\trep(i, n) {\n\t\tPoint a = poly[i], b = poly[(i + 1) % n], c = poly[(i + 2) % n];\n\t\tangle += arg((c - b) / (b - a));\n\t}\n\treturn angle > eps;\n}\n\n// ??????????????????\n/*0 => out\n1 => on\n2 => in*/\nint is_in_Polygon(const Polygon &poly, const  Point& p) {\n\tld angle = 0;\n\tint n = poly.size();\n\trep(i, n) {\n\t\tPoint a = poly[i], b = poly[(i + 1) % n];\n\t\tif (isis_sp(Line(a, b), p)) return 1;\n\t\tangle += arg((b - p) / (a - p));\n\t}\n\treturn eq(angle, 0) ? 0 : 2;\n}\n//??????????????????2?????????\nenum { out, on, in };\nint convex_contains(const Polygon &P, const Point &p) {\n\tconst int n = P.size();\n\tPoint g = (P[0] + P[n / 3] + P[2 * n / 3]) / 3.0l; // inner-point\n\tint a = 0, b = n;\n\twhile (a + 1 < b) { // invariant: c is in fan g-P[a]-P[b]\n\t\tint c = (a + b) / 2;\n\t\tif (cross(P[a] - g, P[c] - g) > 0) { // angle < 180 deg\n\t\t\tif (cross(P[a] - g, p - g) > 0 && cross(P[c] - g, p - g) < 0) b = c;\n\t\t\telse                                                  a = c;\n\t\t}\n\t\telse {\n\t\t\tif (cross(P[a] - g, p - g) < 0 && cross(P[c] - g, p - g) > 0) a = c;\n\t\t\telse                                                  b = c;\n\t\t}\n\t}\n\tb %= n;\n\tif (cross(P[a] - p, P[b] - p) < 0) return 0;\n\tif (cross(P[a] - p, P[b] - p) > 0) return 2;\n\treturn 1;\n}\n\n// ??????\n//???????????????????????¨????????????????????§??¨???\nPolygon convex_hull(vector<Point> ps) {\n\tint n = ps.size();\n\tint k = 0;\n\tsort(ps.begin(), ps.end());\n\tPolygon ch(2 * n);\n\tfor (int i = 0; i < n; ch[k++] = ps[i++])\n\t\twhile (k >= 2 && ccw(ch[k - 2], ch[k - 1], ps[i]) <= 0) --k;\n\tfor (int i = n - 2, t = k + 1; i >= 0; ch[k++] = ps[i--])\n\t\twhile (k >= t && ccw(ch[k - 2], ch[k - 1], ps[i]) <= 0) --k;\n\tch.resize(k - 1);\n\treturn ch;\n}\n\n\n\n//????????????\nvector<Polygon> convex_cut(const Polygon &ps, const Line& l) {\n\tint n = ps.size();\n\tPolygon q;\n\tPolygon r;\n\trep(i, n) {\n\t\tPoint a = ps[i], b = ps[(i + 1) % n];\n\t\tLine m = Line(a, b);\n\t\tif (ccw(l.a, l.b, a) != -1) q.push_back(a);\n\t\tif (ccw(l.a, l.b, a) != 1) r.push_back(a);\n\t\tif (ccw(l.a, l.b, a) * ccw(l.a, l.b, b) < 0 && isis_ll(l, m)) {\n\t\t\tq.push_back(is_ll(l, m));\n\t\t\tr.push_back(is_ll(l, m));\n\t\t}\n\t}\n\tconst vector<Polygon>polys{ q,r };\n\treturn polys;\n}\n\n\n/* ??¢??¬??????????????? */\nvoid add_Point(vector<Point> &ps, const Point p) {\n\tfor (Point q : ps) if (abs(q - p) < eps) return;\n\tps.push_back(p);\n}\n\ntypedef int Weight;\nstruct edge {\n\tint src, dst;\n\tWeight weight;\n\tedge(int src, int dst, Weight weight) :\n\t\tsrc(src), dst(dst), weight(weight) { }\n};\n\ntypedef vector<edge> edges;\ntypedef vector<edges> graph;\n\nvoid add_edge(graph &g, const int from, const int to, const Weight& weight) {\n\tg[from].push_back(edge{ from, to, weight });\n}\n\ngraph segment_arrangement(const vector<Line> &s, const vector<Point> &p) {\n\tint n = p.size(), m = s.size();\n\tgraph g(n);\n\trep(i, m) {\n\t\tvector<pair<ld, int>> vec;\n\t\trep(j, n) if (isis_sp(s[i], p[j]))\n\t\t\tvec.emplace_back(abs(s[i].a - p[j]), j);\n\t\tsort(all(vec));\n\t\trep(j, vec.size() - 1) {\n\t\t\tint from = vec[j].second, to = vec[j + 1].second;\n\t\t\tadd_edge(g, from, to, static_cast<Weight>(abs(p[from] - p[to])));\n\t\t}\n\t}\n\treturn g;\n}\ngraph sennbunn_arrangement(const vector<Line>&s) {\n\tvector<Point>crss;\n\tfor (int i = 0; i < static_cast<int>(s.size()); ++i) {\n\t\tfor (int j = i + 1; j < static_cast<int>(s.size()); ++j) {\n\t\t\tif (isis_ss(s[i], s[j])) {\n\t\t\t\tcrss.push_back(is_ll2(s[i], s[j])[0]);\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0; i <static_cast<int>(s.size()); ++i) {\n\t\tcrss.push_back(s[i][0]);\n\t\tcrss.push_back(s[i][1]);\n\t}\n\treturn segment_arrangement(s, crss);\n}\n\ngraph Circle_arrangement(const vector<Circle> &c, const vector<Point> &p) {\n\tint n = p.size(), m = c.size();\n\tgraph g(n);\n\trep(i, m) {\n\t\tvector<pair<ld, int>> vec;\n\t\trep(j, n) if (abs(abs(c[i].p - p[j]) - c[i].r) < eps)\n\t\t\tvec.emplace_back(arg(c[i].p - p[j]), j);\n\t\tsort(all(vec));\n\t\trep(j, vec.size() - 1) {\n\t\t\tint from = vec[j].second, to = vec[j + 1].second;\n\t\t\tld angle = vec[j + 1].first - vec[j].first;\n\t\t\tadd_edge(g, from, to, static_cast<Weight>(angle * c[i].r));\n\t\t}\n\t\tif (vec.size() >= 2) {\n\t\t\tint from = vec.back().second, to = vec.front().first;\n\t\t\tld angle = vec.front().first - vec.back().first;\n\t\t\tadd_edge(g, from, to, static_cast<Weight>(angle * c[i].r));\n\t\t}\n\t}\n\treturn g;\n}\n\nint main() {\n\tint x0, y0, x1, y1; cin >> x0 >> y0 >> x1 >> y1;\n\tPoint p0(x0, y0);\n\tPoint p1(x1, y1);\n\tLine l(p0,p1);\n\tint Q; cin >> Q;\n\tcout << setprecision(22) << fixed;\n\twhile (Q--) {\n\t\tint x, y; cin >> x >> y;\n\t\tPoint p2(x, y);\n\t\tint n = ccw(p0, p1, p2);\n\t\tif (n == 1)cout << \"COUNTER_CLOCKWISE\";\n\t\tif (n == -1)cout << \"CLOCKWISE\";\n\n\t\tif (n == 2)cout << \"ONLINE_BACK\";\n\n\t\tif (n == -2)cout << \"ONLINE_FRONT\";\n\n\t\tif (n == 0)cout << \"ON_SEGMENT\";\n\t\tcout << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <iostream>\n\nusing namespace std;\n\n#define EPS 1e-10\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nclass Point {\npublic:\n  double x, y;\n  Point() {};\n  Point(double x, double y): x(x), y(y) {}\n\n  Point operator + (const Point &p) { return Point(x + p.x, y + p.y); }\n  Point operator - (const Point &p) { return Point(x - p.x, y - p.y); }\n  Point operator * (double d) { return Point(d * x, d * y); }\n  Point operator / (double d) { return Point(d / x, d / y); }\n\n  bool operator < (const Point &p) const {\n    return (x == p.x ? y < p.y : x < p.x);\n  }\n\n  bool operator == (const Point &p) const {\n    return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n  }\n\n  friend ostream& operator << (ostream &os, Point &p) {\n    return os << \"Point(\" << p.x << \", \" << p.y << \")\";\n  }\n};\n\nstruct Segment {\n  Point p0, p1;\n};\n\ndouble cross (Point p1, Point p2) {\n  return p1.x * p2.y - p1.y * p2.x;\n}\n\ndouble dot(Point p1, Point p2) {\n  return p1.x * p2.x + p1.y * p2.y;\n}\n\nstring ccw(Segment s, Point p2) {\n  if (cross(s.p1 - s.p0, p2 - s.p0) > 0) return \"COUNTER_CLOCKWISE\";\n  if (cross(s.p1 - s.p0, p2- s.p0) < 0) return \"CLOCKWISE\";\n  if (dot(s.p1 - s.p0, p2 - s.p0) < 0) return \"ONLINE_BACK\";\n  if (dot(s.p1 - s.p0, p2 - s.p0) > 0) return \"ONLINE_FRONT\";\n  return \"ON_SEGMENT\";\n}\n\nint main() {\n  int x1, y1, x2, y2;\n  cin >> x1 >> y1 >> x2 >> y2;\n\n  Segment s;\n  s.p0 = Point(x1, y1);\n  s.p1 = Point(x2, y2);\n\n  int n; cin >> n;\n\n  while (n--) {\n    int x, y; cin >> x >> y;\n    Point p2(x, y);\n\n    cout << ccw(s, p2) << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\ntypedef long long ll;\ntypedef long double ld;\nconst ll inf=1e9+7;\n#define y1 _y_1_\n#ifndef gc\n\t#define gc getchar\n#endif\n#ifndef pc\n\t#define pc putchar\n#endif\ninline ll read(){ll f=0,x=0;register char c=gc();while(!isdigit(c))f^=c=='-',c=gc();while(isdigit(c))x=(x<<3)+(x<<1)+(c^'0'),c=gc();return x=f?-x:x;}\ninline ll read(ll&x){ll f=0;x=0;register char c=gc();while(!isdigit(c))f^=c=='-',c=gc();while(isdigit(c))x=(x<<3)+(x<<1)+(c^'0'),c=gc();return x=f?-x:x;}\ninline void writeln(){pc('\\n');}\ninline void write(ll x){if(x<0)pc('-'),x=-x;if(x>9)write(x/10);pc(x%10+'0');}\ninline void writeln(const ll&x){write(x),pc('\\n');}\nusing namespace std;\nll Q;\nconst ld eps=1e-6;\nstruct vec{\n\tld x,y;\n\tinline bool is_zero(){return (abs(x)<=eps)&(abs(y)<=eps);}\n\tinline void scan(){x=read(),y=read();}\n\tinline vec(){x=y=0;}\n\tinline vec(const ld&X,const ld&Y){x=X,y=Y;}\n\tinline friend vec operator +(const vec&A,const vec&B){return vec(A.x+B.x,A.y+B.y);}\n\tinline friend vec operator -(const vec&A,const vec&B){return vec(A.x-B.x,A.y-B.y);}\n\tinline ld len(){return sqrt(x*x+y*y);}\n\tinline ld len(const ll&X,const ll&Y){return sqrt((x-X)*(x-X)+(y-Y)*(y-Y));}\n\tinline ld k(){return (x==0)?inf:y/x;}\n\tinline ld k(const ll&X,const ll&Y){return (x==X)?inf:(y-Y)/(x-X);}\n\tinline friend ld Dot(const vec&A,const vec&B){return A.x*B.x+A.y*B.y;}\n\tinline friend ld Cross(const vec&A,const vec&B){return A.x*B.y-B.x*A.y;}\n\tinline friend ld Theta(vec A,vec B){return acos(Cross(A,B)/A.len()/B.len());}\n}p0,p1,p2;\nsigned main(){\n\tp0.scan(),p1.scan(),p1=p1-p0;\n\tread(Q);while (Q--){\n\t\tp2.scan(),p2=p2-p0;\n\t\tif (Cross(p1,p2)>=eps) puts(\"COUNTER_CLOCKWISE\");\n\t\telse if (Cross(p1,p2)<-eps) puts(\"CLOCKWISE\");\n\t\telse if (Dot(p1,p2)<-eps) puts(\"ONLINE_BACK\");\n\t\telse puts(p1.len()<p2.len()?\"ONLINE_FRONT\":\"ON_SEGMENT\");\n\t}\n\tfclose(stdin);fclose(stdout);return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n#define fi first\n#define se second\n#define mp make_pair\n#define pb push_back\n#define rep(i, a, b) for(int i = (a); i < (b); ++i)\n#define per(i, a, b) for(int i = (b) - 1; i >= (a); --i)\n#define sz(a) (int)a.size()\n#define de(c) cout << #c << \" = \" << c << endl\n#define dd(c) cout << #c << \" = \" << c << \" \"\n#define all(a) a.begin(), a.end()\n#define pw(x) (1ll<<(x))\n#define endl \"\\n\"\ntypedef long long ll;\ntypedef double db;\ntypedef pair<int, int> pii;\ntypedef vector<int> vi;\n\ntypedef db T;\nconst db eps = 1e-9 , pi = acosl(-1.);\nint sgn(T x){return (x>eps)-(x<-eps);}\nstruct P{\n  T x,y; P(){} P(T x,T y):x(x),y(y){}\n  P operator - (const P&b) const {return P(x-b.x,y-b.y);}\n  P operator + (const P&b) const {return P(x+b.x,y+b.y);}\n  T operator * (const P&b) const {return x*b.x+y*b.y;}\n  T operator / (const P&b) const {return x*b.y-y*b.x;}\n  P operator * (const T&k) const {return P(x*k,y*k);}\n  P operator / (const T&k) const {return P(x/k,y/k);}\n};\nT norm(P a){return a*a;}\nP proj(P p,P a,P b){return (b-a)*((p-a)*(b-a)/norm(b-a))+a;}\nP reflect(P p,P a,P b){return proj(p,a,b)*2-p;}\nT cross(P o,P a,P b){return (a-o)/(b-o);}\nint crossOp(P o,P a,P b){return sgn(cross(o,a,b));}\nbool onPS(P p,P s,P t){return sgn((t-s)/(p-s))==0&&sgn((p-s)*(p-t))<=0;}\n\nP a, b, c;\n\nint main() {\n\tstd::ios::sync_with_stdio(0);\n\tstd::cin.tie(0);\n\tcin >> a.x >> a.y >> b.x >> b.y;\n\tint q;\n\tcin >> q;\n\tcout << setiosflags(ios::fixed);\n\tcout << setprecision(10);\n\twhile(q--) {\n\t\tcin >> c.x >> c.y;\n\t\tint t = crossOp(a, b, c);\n\t\tif(t > 0) {\n\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t} else if(t < 0) {\n\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\t} else {\n\t\t\tif(onPS(b, a, c)) {\n\t\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t\t} else if(onPS(c, a, b)) {\n\t\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t\t} else {\n\t\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <vector>\n#include <utility>\n#include <set>\n#include <cmath>\n#include <cstdio>\n#include <numeric>\n#include <functional>\n\nusing namespace std;\n\n//BEGIN\n#define EPS 1e-10\n#define equals(a, b) (fabs(a - b) < EPS)\n#define Pi 3.141592653589793238\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nstruct Point {\n\tdouble x, y;\n\n\tPoint() {}\n\tPoint(double x, double y) :x(x), y(y) {}\n\n\tPoint operator+(const Point& p) const { return Point(x + p.x, y + p.y); }\n\tPoint operator-(const Point& p) const { return Point(x - p.x, y - p.y); }\n\tPoint operator*(const double& k) const { return Point(x * k, y * k); }\n\tPoint operator/(const double& k) const { return Point(x / k, y / k); }\n\n\tfriend istream& operator>>(istream& is, Point& p) {\n\t\tis >> p.x >> p.y;\n\t\treturn is;\n\t}\n\n\tbool operator==(const Point& p) const { return (fabs(x - p.x) < EPS && fabs(y - p.y) < EPS); }\n\tbool operator<(const Point& p) const { return (x != p.x ? x < p.x : y < p.y); }\n\n\tdouble norm() { return x * x + y * y; }\n\tdouble abs() { return sqrt(norm()); }\n};\n\ntypedef Point Vector;\n\ndouble norm(Vector a) { return a.x * a.x + a.y * a.y; }\ndouble abs(Vector a) { return sqrt(norm(a)); }\ndouble dot(Vector a, Vector b) { return a.x * b.x + a.y * b.y; }\ndouble cross(Vector a, Vector b) { return a.x * b.y - a.y * b.x; }\n\nbool isParallel(Vector a, Vector b) { return equals(cross(a, b), 0.0); }\nbool isOrthogonal(Vector a, Vector b) { return equals(dot(a, b), 0.0); }\n\nstruct EndPoint {\n\tPoint p;\n\tint seg, st;\n\n\tEndPoint() {}\n\tEndPoint(Point p, int seg, int st) :p(p), seg(seg), st(st) {}\n\n\tbool operator<(const EndPoint& ep) const {\n\t\tif (p.y == ep.p.y) return st < ep.st;\n\t\treturn p.y < ep.p.y;\n\t}\n};\n\nstruct Segment {\n\tPoint p1, p2;\n\n\tSegment() {}\n\tSegment(Point p1, Point p2) :p1(p1), p2(p2) {}\n\n\tfriend istream& operator>>(istream& is, Segment& s) {\n\t\tis >> s.p1 >> s.p2;\n\t\treturn is;\n\t}\n};\n\ntypedef Segment Line;\n\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / base.norm();\n\treturn s.p1 + base * r;\n}\n\nPoint reflect(Segment s, Point p) {\n\treturn p + (project(s, p) - p) * 2.0;\n}\n\nstruct Circle {\n\tPoint c;\n\tdouble r;\n\n\tCircle() {}\n\tCircle(Point c, double r) :c(c), r(r) {}\n};\n\ntypedef vector<Point> Polygon;\n\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0, b = p2 - p0;\n\tif (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS) return CLOCKWISE;\n\tif (dot(a, b) < -EPS) return ONLINE_BACK;\n\tif (a.norm() < b.norm()) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\nbool intersectSS(Point p1, Point p2, Point p3, Point p4) {\n\treturn (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n\t\t\tccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\nbool intersectSS(Segment s1, Segment s2) {\n\treturn intersectSS(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\nint intersectCS(Circle c, Segment s) {\n\tif (norm(project(s, c.c) - c.c) - c.r * c.r > EPS) return 0;\n\tdouble d1 = abs(c.c - s.p1), d2 = abs(c.c - s.p2);\n\tif (d1 < c.r + EPS && d2 < c.r + EPS) return 0;\n\tif ((d1 < c.r - EPS && d2 > c.r + EPS) || (d1 > c.r + EPS && d2 < c.r - EPS)) return 1;\n\tPoint h = project(s, c.c);\n\tif (dot(s.p1 - h, s.p2 - h) < 0) return 2;\n\treturn 0;\n}\n\nint intersectCC(Circle c1, Circle c2) {\n\tif (c1.r < c2.r) swap(c1, c2);\n\tdouble d = abs(c1.c - c2.c);\n\tdouble r = c1.r + c2.r;\n\tif (equals(d, r)) return 3;\n\tif (d > r) return 4;\n\tif (equals(d + c2.r, c1.r)) return 1;\n\tif (d + c2.r < c1.r) return 0;\n\treturn 2;\n}\n\ndouble getDistanceLP(Line l, Point p) {\n\treturn abs(cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1));\n}\n\ndouble getDistanceSP(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0) return abs(p - s.p1);\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0) return abs(p - s.p2);\n\treturn getDistanceLP(s, p);\n}\n\ndouble getDistanceSS(Segment s1, Segment s2) {\n\tif (intersectSS(s1, s2)) return 0.0;\n\treturn min({ getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2),\n\t\t\t   getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2) });\n}\n\nPoint getCrossPointLL(Line l1, Line l2) {\n\tdouble a = cross(l1.p2 - l1.p1, l2.p2 - l2.p1);\n\tdouble b = cross(l1.p2 - l1.p1, l1.p2 - l2.p1);\n\tif (abs(a) < EPS && abs(b) < EPS) return l2.p1;\n\treturn l2.p1 + (l2.p2 - l2.p1) * (b / a);\n}\n\nPoint getCrossPointSS(Segment s1, Segment s2) {\n\tVector base = s2.p2 - s2.p1;\n\tdouble d1 = abs(cross(base, s1.p1 - s2.p1));\n\tdouble d2 = abs(cross(base, s1.p2 - s2.p1));\n\treturn s1.p1 + (s1.p2 - s1.p1) * (d1 / (d1 + d2));\n}\n\nvector<Point> getCrossPointCL(Circle c, Line l) {\n\tvector<Point> ps;\n\tVector pr = project(l, c.c);\n\tVector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);\n\tif (equals(getDistanceLP(l, c.c), c.r)) {\n\t\tps.push_back(pr);\n\t\treturn ps;\n\t}\n\tdouble base = sqrt(c.r * c.r - norm(pr - c.c));\n\tps.push_back(pr + e * base); ps.push_back(pr - e * base);\n\treturn ps;\n}\n\nvector<Point> getCrossPointCS(Circle c, Segment s) {\n\tLine l(s);\n\tvector<Point> ps = getCrossPointCL(c, l);\n\tif (intersectCS(c, s) == 2) return ps;\n\tif (dot(l.p1 - ps[0], l.p2 - ps[0]) < 0) ps[1] = ps[0];\n\telse ps[0] = ps[1];\n\treturn ps;\n}\n\ndouble arg(Vector p) { return atan2(p.y, p.x); }\nPoint polar(double a, double r) { return Point(cos(r) * a, sin(r) * a); }\n\nvector<Point> getCrossPointCC(Circle c1, Circle c2) {\n\tdouble d = abs(c1.c - c2.c);\n\tdouble a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n\tdouble t = arg(c2.c - c1.c);\n\tvector<Point> ps;\n\tps.push_back(c1.c + polar(c1.r, t + a)); ps.push_back(c1.c + polar(c1.r, t - a));\n\treturn ps;\n}\n\nvector<Point> tangentCP(Circle c, Point p) {\n\treturn getCrossPointCC(c, Circle(p, sqrt(norm(c.c - p) - c.r * c.r)));\n}\n\nvector<Line> tangentCC(Circle c1, Circle c2) {\n\tvector<Line> ls;\n\tif (c1.r < c2.r) swap(c1, c2);\n\tdouble g = norm(c1.c - c2.c);\n\tif (equals(g, 0)) return ls;\n\tPoint u = (c2.c - c1.c) / sqrt(g);\n\tPoint v = Point(-u.y, u.x);\n\tfor (int s = 1; s >= -1; s -= 2) {\n\t\tdouble h = (c1.r + s * c2.r) / sqrt(g);\n\t\tif (equals(1, h * h)) ls.push_back(Line(c1.c + u * c1.r, c1.c + (u + v) * c1.r));\n\t\telse if (1 - h * h > 0) {\n\t\t\tPoint uu = u * h, vv = v * sqrt(1 - h * h);\n\t\t\tls.push_back(Line(c1.c + (uu + vv) * c1.r, c2.c - (uu + vv) * c2.r * s));\n\t\t\tls.push_back(Line(c1.c + (uu - vv) * c1.r, c2.c - (uu - vv) * c2.r * s));\n\t\t}\n\t}\n\treturn ls;\n}\n\n// IN:2,ON:1,OUT:0\nint contains(Polygon g, Point p) {\n\tint n = g.size();\n\tbool x = false;\n\tfor (int i = 0; i < n; ++i) {\n\t\tPoint a = g[i] - p, b = g[(i + 1) % n] - p;\n\t\tif (abs(cross(a, b)) < EPS && dot(a, b) < EPS) return 1;\n\t\tif (a.y > b.y) swap(a, b);\n\t\tif (a.y < EPS && EPS < b.y && cross(a, b) > EPS) x = !x;\n\t}\n\treturn (x ? 2 : 0);\n}\n\nbool isConvex(Polygon p) {\n\tint n = p.size();\n\tfor (int i = 0; i < n; ++i)\n\t\tif (ccw(p[(i - 1 + n) % n], p[i], p[(i + 1) % n]) == CLOCKWISE) return false;\n\treturn true;\n}\n\nPolygon convexHull(Polygon p) {\n\tPolygon u, l;\n\tif (p.size() < 3) return p;\n\tsort(p.begin(), p.end());\n\tu.push_back(p[0]); u.push_back(p[1]);\n\tl.push_back(p[p.size() - 1]); l.push_back(p[p.size() - 2]);\n\tfor (int i = 2; i < (int)p.size(); ++i) {\n\t\tfor (int n = u.size(); n >= 2 && ccw(u[n - 2], u[n - 1], p[i]) == COUNTER_CLOCKWISE; --n)\n\t\t\tu.pop_back();\n\t\tu.push_back(p[i]);\n\t}\n\tfor (int i = p.size() - 3; i >= 0; --i) {\n\t\tfor (int n = l.size(); n >= 2 && ccw(l[n - 2], l[n - 1], p[i]) == COUNTER_CLOCKWISE; --n)\n\t\t\tl.pop_back();\n\t\tl.push_back(p[i]);\n\t}\n\treverse(l.begin(), l.end());\n\tfor (int i = u.size() - 2; i >= 1; --i) l.push_back(u[i]);\n\treturn l;\n}\n\ndouble area(Polygon p) {\n\tdouble res = 0;\n\tfor (int i = 0; i < (int)p.size(); ++i)\n\t\tres += cross(p[i], p[(i + 1) % p.size()]) / 2.0;\n\treturn res;\n}\n\ndouble area(Polygon p, Circle c) {\n\tif (p.size() < 3) return 0.0;\n\tfunction<double(Circle, Point, Point)> dfs = [&](Circle c, Point a, Point b) {\n\t\tVector va = c.c - a, vb = c.c - b;\n\t\tdouble f = cross(va, vb), res = 0;\n\t\tif (equals(f, 0.0)) return res;\n\t\tif (max(abs(va), abs(vb)) < c.r + EPS) return f;\n\t\tVector d(dot(va, vb), cross(va, vb));\n\t\tif (getDistanceSP(Segment(a, b), c.c) > c.r - EPS)\n\t\t\treturn c.r * c.r * atan2(d.y, d.x);\n\t\tauto u = getCrossPointCS(c, Segment(a, b));\n\t\tvector<Point> ps{ a,u[0],u[1],b };\n\t\tfor (int i = 1; i < ps.size(); ++i) res += dfs(c, ps[i - 1], ps[i]);\n\t\treturn res;\n\t};\n\tdouble res = 0;\n\tfor (int i = 0; i < p.size(); ++i) res += dfs(c, p[i], p[(i + 1) % p.size()]);\n\treturn res / 2;\n}\n\ndouble convexDiameter(Polygon p) {\n\tint n = p.size();\n\tif (n == 2) return abs(p[0] - p[1]);\n\tint i = 0, j = 0;\n\tfor (int k = 0; k < n; ++k) {\n\t\tif (p[i] < p[k]) i = k;\n\t\tif (!(p[j] < p[k])) j = k;\n\t}\n\tdouble res = 0;\n\tint ti = i, tj = j;\n\twhile (i != tj || j != ti) {\n\t\tres = max(res, abs(p[i] - p[j]));\n\t\tif (cross(p[(i + 1) % n] - p[i], p[(j + 1) % n] - p[j]) < 0.0)\n\t\t\ti = (i + 1) % n;\n\t\telse j = (j + 1) % n;\n\t}\n\treturn res;\n}\n\nPolygon convexCut(Polygon p, Line l) {\n\tPolygon q;\n\tfor (int i = 0; i < (int)p.size(); ++i) {\n\t\tPoint a = p[i], b = p[(i + 1) % p.size()];\n\t\tif (ccw(l.p1, l.p2, a) != CLOCKWISE) q.push_back(a);\n\t\tif (ccw(l.p1, l.p2, a) * ccw(l.p1, l.p2, b) < 0)\n\t\t\tq.push_back(getCrossPointLL(Line(a, b), l));\n\t}\n\treturn q;\n}\n\ndouble closestPair(vector<Point> ps) {\n\tsort(ps.begin(), ps.end());\n\tvector<Point> a(ps.size());\n\tfunction<double(int, int)> solve = [&](int l, int r) {\n\t\tif (r - l < 2) return 1e18;\n\t\tint mid = (l + r) >> 1;\n\t\tdouble x = ps[mid].x;\n\t\tdouble d = min(solve(l, mid), solve(mid, r));\n\t\tinplace_merge(ps.begin() + l, ps.begin() + mid, ps.begin() + r,\n\t\t\t\t\t  [](const Point& a, const Point& b) {return a.y < b.y; });\n\t\tint ptr = 0;\n\t\tfor (int i = l; i < r; ++i) {\n\t\t\tif (abs(ps[i].x - x) >= d) continue;\n\t\t\tfor (int j = 0; j < ptr; ++j) {\n\t\t\t\tPoint luz = ps[i] - a[ptr - j - 1];\n\t\t\t\tif (luz.y >= d) break;\n\t\t\t\td = min(d, abs(luz));\n\t\t\t}\n\t\t\ta[ptr++] = ps[i];\n\t\t}\n\t\treturn d;\n\t};\n\treturn solve(0, ps.size());\n}\n\nint manhattanIntersection(vector<Segment> ss) {\n\tconst int INF = numeric_limits<int>::max();\n\tconst int BOTTOM = 0, LEFT = 1, RIGHT = 2, TOP = 3;\n\tint n = ss.size();\n\tvector<EndPoint> ep;\n\tfor (int i = 0; i < n; ++i) {\n\t\tif (ss[i].p1.y == ss[i].p2.y) {\n\t\t\tif (ss[i].p1.x > ss[i].p2.x) swap(ss[i].p1, ss[i].p2);\n\t\t\tep.push_back(EndPoint(ss[i].p1, i, LEFT));\n\t\t\tep.push_back(EndPoint(ss[i].p2, i, RIGHT));\n\t\t} else {\n\t\t\tif (ss[i].p1.y > ss[i].p2.y) swap(ss[i].p1, ss[i].p2);\n\t\t\tep.push_back(EndPoint(ss[i].p1, i, BOTTOM));\n\t\t\tep.push_back(EndPoint(ss[i].p2, i, TOP));\n\t\t}\n\t}\n\tsort(ep.begin(), ep.end());\n\tset<int> st;\n\tst.insert(INF);\n\tint cnt = 0;\n\tfor (int i = 0; i < 2 * n; ++i) {\n\t\tif (ep[i].st == TOP) st.erase(ep[i].p.x);\n\t\telse if (ep[i].st == BOTTOM) st.insert(ep[i].p.x);\n\t\telse if (ep[i].st == LEFT) {\n\t\t\tauto b = st.lower_bound(ss[ep[i].seg].p1.x);\n\t\t\tauto e = st.lower_bound(ss[ep[i].seg].p2.x);\n\t\t\tcnt += distance(b, e);\n\t\t}\n\t}\n\treturn cnt;\n}\n//END\n\n\n\n\n\n\n\n\n\n\n\n\n\nvoid CGL1A() {\n\tSegment s; cin >> s;\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tPoint p; cin >> p;\n\t\tPoint a = project(s, p);\n\t\tprintf(\"%.10f %.10f\\n\", a.x, a.y);\n\t}\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/1/CGL_1_A\n*/\nvoid CGL1B() {\n\tSegment s; cin >> s;\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tPoint p; cin >> p;\n\t\tPoint a = reflect(s, p);\n\t\tprintf(\"%.10f %.10f\\n\", a.x, a.y);\n\t}\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/1/CGL_1_B\n*/\nvoid CGL1C() {\n\tPoint p0, p1, p2; cin >> p0 >> p1;\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tcin >> p2;\n\t\tint a = ccw(p0, p1, p2);\n\t\tif (a == COUNTER_CLOCKWISE) cout << \"COUNTER_CLOCKWISE\";\n\t\telse if (a == CLOCKWISE) cout << \"CLOCKWISE\";\n\t\telse if (a == ONLINE_BACK) cout << \"ONLINE_BACK\";\n\t\telse if (a == ONLINE_FRONT) cout << \"ONLINE_FRONT\";\n\t\telse cout << \"ON_SEGMENT\";\n\t\tcout << endl;\n\t}\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/1/CGL_1_C\n*/\nvoid CGL2A() {\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tVector p0, p1, p2, p3;\n\t\tcin >> p0 >> p1 >> p2 >> p3;\n\t\tif (isParallel(p1 - p0, p3 - p2)) cout << 2;\n\t\telse if (isOrthogonal(p1 - p0, p3 - p2)) cout << 1;\n\t\telse cout << 0;\n\t\tcout << endl;\n\t}\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/2/CGL_2_A\n*/\nvoid CGL2B() {\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tSegment s1, s2;\n\t\tcin >> s1 >> s2;\n\t\tcout << (intersectSS(s1, s2) ? 1 : 0) << endl;\n\t}\n}/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/2/CGL_2_B\n*/\nvoid CGL2C() {\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tSegment s1, s2;\n\t\tcin >> s1 >> s2;\n\t\tPoint a = getCrossPointLL(s1, s2);\n\t\tprintf(\"%.10f %.10f\\n\", a.x, a.y);\n\t}\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/2/CGL_2_C\n*/\nvoid CGL2D() {\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tSegment s1, s2;\n\t\tcin >> s1 >> s2;\n\t\tprintf(\"%.10f\\n\", getDistanceSS(s1, s2));\n\t}\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/2/CGL_2_D\n*/\nvoid CGL3A() {\n\tint n; cin >> n;\n\tPolygon p(n);\n\tfor (auto& a : p) cin >> a;\n\tprintf(\"%.1f\\n\", area(p));\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/3/CGL_3_A\n*/\nvoid CGL3B() {\n\tint n; cin >> n;\n\tPolygon p(n);\n\tfor (auto& a : p) cin >> a;\n\tcout << (isConvex(p) ? 1 : 0) << endl;\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/3/CGL_3_B\n*/\nvoid CGL3C() {\n\tint n; cin >> n;\n\tPolygon g(n);\n\tfor (auto& a : g) cin >> a;\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tPoint p; cin >> p;\n\t\tcout << contains(g, p) << endl;\n\t}\n}/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/3/CGL_3_C\n*/\nvoid CGL4A() {\n\tint n; cin >> n;\n\tPolygon p(n);\n\tfor (auto& a : p) cin >> a;\n\tPolygon t = convexHull(p);\n\tcout << t.size() << endl;\n\tfor (auto a : t) cout << a.x << \" \" << a.y << endl;\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/4/CGL_4_A\n*/\nvoid CGL4B() {\n\tint n; cin >> n;\n\tPolygon p(n);\n\tfor (auto& a : p) cin >> a;\n\tprintf(\"%.10f\\n\", convexDiameter(p));\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/4/CGL_4_B\n*/\nvoid CGL4C() {\n\tint n; cin >> n;\n\tPolygon p(n);\n\tfor (auto& a : p) cin >> a;\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tLine l; cin >> l;\n\t\tprintf(\"%.10f\\n\", area(convexCut(p, l)));\n\t}\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/4/CGL_4_C\n*/\nvoid CGL5A() {\n\tint n; cin >> n;\n\tvector<Point> ps(n);\n\tfor (auto& a : ps) cin >> a;\n\tprintf(\"%.10f\\n\", closestPair(ps));\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/5/CGL_5_A\n*/\nvoid CGL6A() {\n\tint n; cin >> n;\n\tvector<Segment> ss(n);\n\tfor (auto& a : ss) cin >> a;\n\tcout << manhattanIntersection(ss) << endl;\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/6/CGL_6_A\n*/\nvoid CGL7A() {\n\tCircle c1, c2; cin >> c1.c >> c1.r >> c2.c >> c2.r;\n\tcout << intersectCC(c1, c2) << endl;\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/7/CGL_7_A\n*/\n\nvoid CGL7D() {\n\tCircle c; cin >> c.c.x >> c.c.y >> c.r;\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tLine l; cin >> l.p1.x >> l.p1.y >> l.p2.x >> l.p2.y;\n\t\tauto a = getCrossPointCL(c, l);\n\t\tsort(a.begin(), a.end());\n\t\tprintf(\"%.10f %.10f %.10f %.10f\\n\", a[0].x, a[0].y, a[1].x, a[1].y);\n\t}\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/7/CGL_7_D\n*/\nvoid CGL7E() {\n\tCircle c1; cin >> c1.c.x >> c1.c.y >> c1.r;\n\tCircle c2; cin >> c2.c.x >> c2.c.y >> c2.r;\n\tauto a = getCrossPointCC(c1, c2);\n\tsort(a.begin(), a.end());\n\tprintf(\"%.10f %.10f %.10f %.10f\\n\", a[0].x, a[0].y, a[1].x, a[1].y);\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/7/CGL_7_E\n*/\nvoid CGL7F() {\n\tPoint p; cin >> p;\n\tCircle c; cin >> c.c >> c.r;\n\tauto a = tangentCP(c, p);\n\tsort(a.begin(), a.end());\n\tprintf(\"%.10f %.10f\\n%.10f %.10f\\n\", a[0].x, a[0].y, a[1].x, a[1].y);\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/7/CGL_7_F\n*/\nvoid CGL7G() {\n\tCircle c1, c2; cin >> c1.c >> c1.r >> c2.c >> c2.r;\n\tauto a = tangentCC(c1, c2);\n\tvector<Point> ps;\n\tfor (auto e : a) ps.push_back(getCrossPointCL(c1, e)[0]);\n\tsort(ps.begin(), ps.end());\n\tfor (auto e : ps) printf(\"%.10f %.10f\\n\", e.x, e.y);\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/7/CGL_7_G\n*/\nvoid CGL7H() {\n\tint n; cin >> n;\n\tCircle c; c.c = Point(0, 0); cin >> c.r;\n\tPolygon p(n);\n\tfor (auto& a : p) cin >> a;\n\tprintf(\"%.10f\\n\", area(p, c));\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/7/CGL_7_H\n*/\n\nint main() {\n\t//CGL1A();\n\t//CGL1B();\n    CGL1C();\n\t//CGL2A();\n\t//CGL2B();\n\t//CGL2C();\n\t//CGL2D();\n\t//CGL3A();\n\t//CGL3B();\n\t//CGL3C();\n\t//CGL4A();\n\t//CGL4B();\n\t//CGL4C();\n\t//CGL5A();\n\t//CGL6A();\n\t//CGL7A();\n\t//CGL7D();\n\t//CGL7E();\n\t//CGL7F();\n\t//CGL7G();\n\t//CGL7H();\n\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "\n#include <bits/stdc++.h>\n#define REP(i,n) for (int i = 0; i <(n); ++i)\n#define REP2(i,x,n) for (int i = x; i <(n); ++i)\n#define ALL(v) v.begin(), v.end()\n#define RALL(v) v.rbegin(), v.rend()\nusing namespace std;\nusing ll = long long;\nusing P = pair<int,int>;\nstatic const double PI = acos(-1);\nstatic const int INF = 1e9+7;\n\n/*\n\n計算幾何学　ライブラリ\n\n*/\n\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\n\nstruct Point{\n  double x,y;\n  Point(){}\n  Point(double x,double y) :x(x),y(y){}\n  Point operator + (Point p) {return Point(x+p.x,y+p.y);}\n  Point operator - (Point p) {return Point(x-p.x,y-p.y);}\n  Point operator * (double k) {return Point(x*k,y*k);}\n  Point operator / (double k) {return Point(x/k,y/k);}\n  double norm(){return x*x+y*y;}\n  double abs(){return sqrt(norm());}\n\n  bool operator < (const Point &p) const{\n    return x!=p.x ? x < p.x : y < p.y;\n  }\n\n  bool operator == (const Point &p) const{\n    return fabs(x-p.x) < EPS && fabs(y-p.y) < EPS;\n  }\n};\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\nstruct Segment{\n  Point p1,p2;\n  Segment(){}\n  Segment(Point p1, Point p2):p1(p1),p2(p2){}\n};\n\ntypedef Segment Line;\n\nstruct Circle{\n  Point c;\n  double r;\n  Circle(Point c,double r):c(c),r(r){}\n};\n\ndouble norm(Vector a){\n  return a.x*a.x+a.y*a.y;\n}\ndouble abs(Vector a){\n  return sqrt(norm(a));\n}\ndouble dot(Vector a,Vector b){\n  return a.x*b.x+a.y*b.y;\n}\ndouble cross(Vector a,Vector b){\n  return a.x*b.y-a.y*b.x;\n}\n\nbool isOrthogonal(Vector a,Vector b){\n  return equals(dot(a,b),0.0);\n}\n\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n  return isOrthogonal(a1-a2,b1-b2);\n}\n\nbool isOrthogonal(Segment s1,Segment s2){\n  return equals(dot(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n\nbool isParallel(Vector a,Vector b){\n  return equals(cross(a,b),0.0);\n}\n\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n  return isParallel(a1-a2,b1-b2);\n}\n\nbool isParallel(Segment s1,Segment s2){\n  return equals(cross(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n\nPoint project(Segment s,Point p){\n  Vector base=s.p2-s.p1;\n  double r=dot(p-s.p1,base)/norm(base);\n  return s.p1+base*r;\n}\n\nPoint reflect(Segment s,Point p){\n  return p+(project(s,p)-p)*2.0;\n}\n\nint ccw(Point p0,Point p1,Point p2){\n  Vector a = p1-p0;\n  Vector b = p2-p0;\n  if(cross(a,b) > EPS) return COUNTER_CLOCKWISE;\n  if(cross(a,b) < -EPS) return CLOCKWISE;\n  if(dot(a,b) < -EPS) return ONLINE_BACK;\n  if(a.norm()<b.norm()) return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\n\nbool intersect(Point p1,Point p2,Point p3,Point p4){\n  return (ccw(p1,p2,p3)*ccw(p1,p2,p4) <= 0 &&\n\t  ccw(p3,p4,p1)*ccw(p3,p4,p2) <= 0 );\n}\n\nbool intersect(Segment s1,Segment s2){\n  return intersect(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n\ndouble getDistanceLP(Line l,Point p){\n  return abs(cross(l.p2-l.p1,p-l.p1)/abs(l.p2-l.p1));\n}\n\ndouble getDistanceSP(Segment s,Point p){\n  if(dot(s.p2-s.p1,p-s.p1) < 0.0 ) return abs(p-s.p1);\n  if(dot(s.p1-s.p2,p-s.p2) < 0.0 ) return abs(p-s.p2);\n  return getDistanceLP(s,p);\n}\n\ndouble getDistance(Segment s1,Segment s2){\n  if(intersect(s1,s2)) return 0.0;\n  return min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),\n\t     min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n}\n\nPoint getCrossPoint(Segment s1,Segment s2){\n  Vector base=s2.p2-s2.p1;\n  double d1=abs(cross(base,s1.p1-s2.p1));\n  double d2=abs(cross(base,s1.p2-s2.p1));\n  double t=d1/(d1+d2);\n  return s1.p1+(s1.p2-s1.p1)*t;\n}\n\n\npair<Point,Point> getCrossPoints(Circle c,Line l){\n  Vector pr=project(l,c.c);\n  Vector e=(l.p2-l.p1)/abs(l.p2-l.p1);\n  double base=sqrt(c.r*c.r-norm(pr-c.c));\n  return make_pair(pr+e*base,pr-e*base);\n}\n\n\ndouble arg(Vector p){\n  return atan2(p.y,p.x);\n}\n\nVector polar(double a,double r){\n  return Point(cos(r)*a,sin(r)*a);\n}\n\npair<Point,Point> getCrossPoints(Circle c1,Circle c2){\n  double d=abs(c1.c-c2.c);\n  double a=acos((c1.r*c1.r+d*d-c2.r*c2.r)/(2*c1.r*d));\n  double t=arg(c2.c-c1.c);\n  return make_pair(c1.c+polar(c1.r,t+a),c1.c+polar(c1.r,t-a));\n}\n\nint contains(Polygon g,Point p){\n  int n=g.size();\n  bool x=false;\n  for(int i=0;i<n;i++){\n    Point a=g[i]-p,b=g[(i+1)%n]-p;\n    if(fabs(cross(a,b)) < EPS && dot(a,b) < EPS) return 1;\n    if(a.y>b.y) swap(a,b);\n    if(a.y < EPS && EPS < b.y && cross(a,b) > EPS ) x = !x;\n  }\n  return (x?2:0);\n}\n\nPolygon andrewScan(Polygon s){\n  Polygon u,l;\n  if(s.size()<3) return s;\n  sort(s.begin(),s.end());\n  u.push_back(s[0]);\n  u.push_back(s[1]);\n  l.push_back(s[s.size()-1]);\n  l.push_back(s[s.size()-2]);\n  for(int i=2;i<s.size();i++){\n    for(int n=u.size();n>=2&&ccw(u[n-2],u[n-1],s[i]) != CLOCKWISE;n--){\n      u.pop_back();\n    }\n    u.push_back(s[i]);\n  }\n  for(int i=s.size()-3;i>=0;i--){\n    for(int n=l.size();n>=2&&ccw(l[n-2],l[n-1],s[i]) != CLOCKWISE;n--){\n      l.pop_back();\n    }\n    l.push_back(s[i]);\n  }\n  reverse(l.begin(),l.end());\n  for(int i=u.size()-2;i>=1;i--) l.push_back(u[i]);\n  return l;\n}\n\n\n\nint main(){\n  double x0, y0, x1, y1;\n  cin >> x0 >> y0 >> x1 >> y1;\n  Point px0 = Point(x0, y0);\n  Point px1 = Point(x1, y1);\n\n  int q;\n  cin >> q;\n\n  REP(i,q){\n    double x2, y2;\n    cin >> x2 >> y2;\n    Point px2 = Point(x2, y2);\n    int ans = ccw(px0,px1,px2);\n\n    if(ans == 1 ) cout << \"COUNTER_CLOCKWISE\" << endl;\n    else if (ans == -1 ) cout << \"CLOCKWISE\" << endl;\n    else if (ans == 2 ) cout << \"ONLINE_BACK\" <<  endl;\n    else if (ans == -2) cout << \"ONLINE_FRONT\" <<  endl;\n    else cout << \"ON_SEGMENT\" << endl;\n  }\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nstruct vec{\n    double x,y;\n    vec operator-(vec b){\n        vec& a = *this;\n        vec c;\n        c.x=a.x-b.x;c.y=a.y-b.y;\n        return c;\n    }\n};\n\nconst double eps = 0.0000001;\n\ndouble inner_product(vec& a, vec& b){\n    return a.x*b.x+a.y*b.y;\n}\n\ndouble outer_product(vec& a, vec& b){\n    return a.x*b.y-a.y*b.x;\n}\n\nint ccw(vec& a, vec& b, vec& c){\n    vec ab = b-a, ac = c-a;\n    double o = outer_product(ab,ac);\n    if(o>0) return 1; //CCW\n    if(o<0) return -1; //CW\n    if(inner_product(ab,ac)<0){\n        return 2; //C-A-B\n    }else{\n        if(inner_product(ab,ab)<inner_product(ac,ac)){\n            return -2; //A-B-C\n        }else{\n            return 0; //A-C-B\n        }\n    }\n}\n\nint main(void){\n    vec p0,p1,p2,v1,v2;\n    int q;\n    cin >> p0.x >> p0.y >> p1.x >> p1.y;\n    cin >> q;\n    for(int i=0;i<q;i++){\n        cin >> p2.x >> p2.y;\n        switch(ccw(p0,p1,p2)){\n            case 1:\n                cout << \"COUNTER_CLOCKWISE\" << endl;\n                break;\n            case -1:\n                cout << \"CLOCKWISE\" << endl;\n                break;\n            case 2:\n                cout << \"ONLINE_BACK\" << endl;\n                break;\n            case -2:\n                cout << \"ONLINE_FRONT\" << endl;\n                break;\n            case 0:\n                cout << \"ON_SEGMENT\" << endl;\n                break;\n            default:\n                ;\n        }\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n\nusing namespace std;\n\nclass Point{\npublic:\n    double x,y;\n    Point(double x,double y):x(x),y(y){}\n    Point(){}\n    Point operator - (Point a){\n        return Point(x-a.x,y-a.y);\n    }\n};\ntypedef Point Vector;\n\ndouble cross(Vector a,Vector b){\n    return a.x*b.y-a.y*b.x;\n}\n\ndouble dot(Vector a,Vector b){\n    return a.x*b.x+a.y*b.y;\n}\n\ndouble abs(Vector s){\n    return sqrt(s.x*s.x+s.y*s.y);\n}\n\nint ccw(Point p0,Point p1,Point p2){\n    Vector a=p1-p0,b=p2-p0;\n    if(cross(a,b)>1e-8) return 1;\n    if(cross(a,b)<-1e-8) return -1;\n    if(dot(a,b)<-1e-8) return 2;\n    if(dot(a,b)>1e-8) return -2;\n    return 0;\n}\n\nint main(){\n    Point p1,p2,p3;\n    cin>>p1.x>>p1.y>>p2.x>>p2.y;\n    int n;\n    cin>>n;\n    while(n--){\n        cin>>p3.x>>p3.y;\n        int ans=ccw(p1,p2,p3);\n        if(ans==1) cout<<\"COUNTER_CLOCKWISE\"<<endl;\n        else if(ans==-1) cout<<\"CLOCKWISE\"<<endl;\n        else if(ans==2) cout<<\"ONLINE_BACK\"<<endl;\n        else if(ans==-2) cout<<\"ONLINE_FRONT\"<<endl;\n        else cout<<\"ON_SEGMENT\"<<endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint main() {\n\t\n\tint p0x,p0y,p1x,p1y,q;\n\tcin>>p0x>>p0y>>p1x>>p1y>>q;\n\t\n\tfor(int i=0;i<q;++i){\n\t\tint x,y;\n\t\tcin>>x>>y;\n\t\t\n\t\tint crossp = (p1x-p0x) * (y-p0y) - (p1y-p0y) * (x-p0x);\n\t\tint dotp = (p1x-p0x) * (x-p0x) + (p1y-p0y) * (y-p0y);\n\t\t\n\t\tif(crossp>0)cout<<\"COUNTER_CLOCKWISE\"<<endl;\n\t\telse if(crossp<0)cout<<\"CLOCKWISE\"<<endl;\n\t\telse{\n\t\t\tif(dotp<0)cout<<\"ONLINE_BACK\"<<endl;\n\t\t\telse if( abs(p1x-p0x) > abs(x-p0x) )cout<<\"ON_SEGMENT\"<<endl;\n\t\t\telse cout<<\"ONLINE_FRONT\"<<endl;\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\nusing namespace std;\n\nstruct Point{\n    long x;\n    long y;\n    Point(double x, double y) : x(x), y(y) {}\n};\ntypedef Point Vector;\nlong get_dot(Vector v1, Vector v2){\n    return v1.x * v2.x + v1.y * v2.y;\n}\nlong get_cross(Vector v1, Vector v2){\n    return v1.x * v2.y - v1.y * v2.x;\n}\n\nint main(){\n    int x_p0, y_p0, x_p1, y_p1;\n    cin >> x_p0 >> y_p0 >> x_p1 >> y_p1;\n    Vector v1(x_p1 - x_p0, y_p1 - y_p0);\n    int q;\n    cin >> q;\n    for (int i = 0; i < q; i++) {\n        int x_p2, y_p2;\n        cin >> x_p2 >> y_p2;\n        Vector v2(x_p2 - x_p0, y_p2 - y_p0);\n        double cross = get_cross(v1, v2);\n        if (cross > 0) {\n            cout << \"COUNTER_CLOCKWISE\" << endl;\n            continue;\n        }\n        if (cross < 0) {\n            cout << \"CLOCKWISE\" << endl;\n            continue;\n        }\n        long dot = get_dot(v1, v2);\n        if (dot < 0) {\n            cout << \"ONLINE_BACK\" << endl;\n            continue;\n        }\n        long norm1 = get_dot(v1, v1);\n        long norm2 = get_dot(v2, v2);\n        if (norm1 < norm2) {\n            cout << \"ONLINE_FRONT\" << endl;\n            continue;\n        }\n        cout << \"ON_SEGMENT\" << endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <complex>\n#include <utility>\nusing namespace std;\n\ntypedef complex<double> Point, Vector;\ntypedef pair<Point, Point> Segment, Line;\n\n#define X real()\n#define Y imag()\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\ndouble dot(Vector a, Vector b){\n    return a.X * b.X + a.Y * b.Y;\n}\n\ndouble cross(Vector a, Vector b){\n    return a.X * b.Y - a.Y * b.X;\n}\n\ndouble norm(Vector a){\n    return a.X * a.X + a.Y * a.Y;\n}\n\nstring ccw(Point p0, Point p1, Point p2){\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if(cross(a, b) > EPS) return \"COUNTER_CLOCKWISE\";\n    if(cross(a, b) < -EPS) return \"CLOCKWISE\";\n    if(dot(a, b) < -EPS) return \"ONLINE_BACK\";\n    if(norm(a) < norm(b)) return \"ONLINE_FRONT\";\n\n    return \"ON_SEGMENT\";\n}\n\nint main(){\n    double x0, y0, x1, y1; cin>>x0>>y0>>x1>>y1;\n    Point p0 = {x0, y0};\n    Point p1 = {x1, y1};\n    int q; cin>>q;\n    while(q--){\n        double x2, y2; cin>>x2>>y2;\n        Point p2 = {x2, y2};\n\n        cout << ccw(p0, p1, p2) << endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define lb long double\n#define eps 1e-9\nusing namespace std;\nstruct Po{lb x,y;}p1,p2,x,np;\nint t; \nvoid get(Po &x){scanf(\"%Lf %Lf\",&x.x,&x.y);}\nPo operator -(Po x,Po y){return (Po){x.x-y.x,x.y-y.y};}\nPo operator +(Po x,Po y){return (Po){x.x+y.x,x.y+y.y};}\nlb operator *(Po x,Po y){return x.x*y.y-x.y*y.x;}\nlb operator ^(Po x,Po y){return x.x*y.x+x.y*y.y;}\nlb le2(Po x){return x.x*x.x+x.y*x.y;}\nint main(){\n\tget(p1);get(p2);np=p2-p1;\n\tscanf(\"%d\",&t);\n\twhile (t--){\n\t\tget(x);\n\t\tPo nx=x-p1;\n\t\tlb cj=nx*np;\n\t\tif (cj>eps)puts(\"CLOCKWISE\");\n\t\tif (cj<-eps)puts(\"COUNTER_CLOCKWISE\");\n\t\tif (fabs(cj)<eps){\n\t\t\tif ((nx^np)<-eps)puts(\"ONLINE_BACK\");\n\t\t\telse if (le2(nx)<le2(np)+eps)puts(\"ON_SEGMENT\");else puts(\"ONLINE_FRONT\");\n\t\t}\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define For(i,x,y) for (register int i=(x);i<=(y);i++)\n#define FOR(i,x,y) for (register int i=(x);i<(y);i++)\n#define Dow(i,x,y) for (register int i=(x);i>=(y);i--)\n#define mp make_pair\n#define fi first\n#define se second\n#define pb push_back\n#define siz(x) ((int)(x).size())\n#define all(x) (x).begin(),(x).end()\n#define fil(a,b) memset((a),(b),sizeof(a))\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int,int> pa;\ntypedef double db;\ninline ll read(){\n    ll x=0,f=1;char c=getchar();\n    while ((c<'0'||c>'9')&&(c!='-')) c=getchar();\n    if (c=='-') f=-1,c=getchar();\n    while (c>='0'&&c<='9') x=x*10+c-'0',c=getchar();\n    return x*f;\n}\n\nnamespace Geometry{\n\tconst db eps = 1e-9;\n\tstruct point{\n\t\tdb x,y;\n\t\tinline point operator + (const point &p){return (point){x+p.x,y+p.y};}\n\t\tinline point operator - (const point &p){return (point){x-p.x,y-p.y};}\n\t\tinline db operator * (const point &p){return x*p.x+y*p.y;}\n\t\tinline point operator / (const db &v){return (point){x/v,y/v};}\n\t\tinline point operator * (const db &v){return (point){x*v,y*v};}\n\t};\n\ttypedef point vec;\n\tinline db dot(vec a,vec b){return a.x*b.x+a.y*b.y;}\n\tinline db sqr(db x){return x*x;}\n\tinline db dis(point a,point b){return sqrt(sqr(a.x-b.x)+sqr(a.y-b.y));}\n\tinline db dis2(point a,point b){return sqr(a.x-b.x)+sqr(a.y-b.y);}\n\tinline db cross(vec a,vec b){return a.x*b.y-a.y*b.x;}\n\tstruct line{\n\t\tpoint a,b;\n\t};\n\tinline point projection(point A,line b){\n\t\tpoint B=b.a,C=b.b;\n\t\tvec BA=A-B,BC=C-B,BD=BC*(BA*BC/dis2(B,C));\n\t\treturn B+BD;\n\t}\n\tinline point reflection(point A,line b){\n\t\tpoint D=projection(A,b);\n\t\treturn (point){D.x*2-A.x,D.y*2-A.y};\n\t}\n\tinline int Counter_Clockwise(point A,line b){\n\t\tpoint B=b.a,C=b.b;\n\t\tdb f1=cross(C-B,A-B);\n\t\tif (fabs(f1)>eps) return (f1<0?2:1);\n\t\tdb f2=(C-B)*(A-B);\n\t\tif (f2<0) return 3;\n\t\treturn dis(B,C)<dis(A,B)?4:5;\n\t}\n};\nusing namespace Geometry;\n\nint main(){\n\t//freopen(\"data.in\",\"r\",stdin);\n\tline a;scanf(\"%lf%lf%lf%lf\",&a.a.x,&a.a.y,&a.b.x,&a.b.y);\n\tint T;scanf(\"%d\",&T);\n\twhile (T--){\n\t\tpoint b;scanf(\"%lf%lf\",&b.x,&b.y);\n\t\tint ans=Counter_Clockwise(b,a);\n\t\tif (ans==1) puts(\"COUNTER_CLOCKWISE\");\n\t\tif (ans==2) puts(\"CLOCKWISE\");\n\t\tif (ans==3) puts(\"ONLINE_BACK\");\n\t\tif (ans==4) puts(\"ONLINE_FRONT\");\n\t\tif (ans==5) puts(\"ON_SEGMENT\"); \n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i,n) for (int i = 0; i < (n); i++)\n#define repd(i,a,b) for (int i = (a); i < (b); i++)\n#define INF LLONG_MAX\n#define ERR 0.00000001\ntypedef long long ll;\ndouble gaiseki(double x1, double y1, double x2, double y2)\n{\n\treturn x1*y2 - x2*y1;\n}\n\ndouble naiseki(double x1, double y1, double x2, double y2)\n{\n\treturn x1*x2 + y1*y2;\n}\n\ndouble vector_size(double x, double y)\n{\n\treturn pow(x*x + y*y, 0.5);\n}\n\nint main(void)\n{\n\tdouble a, b, c, d, e, f, p0p1_x, p0p1_y, p0p2_x, p0p2_y,\n\tnai, gai, p0p1_size, p0p2_size, judge;\n\tcin >> a >> b >> c >> d;\n  p0p1_x = c - a;\n  p0p1_y = d - b;\n  \tp0p1_size = vector_size(p0p1_x, p0p1_y);\n\tint q;\n\tcin >> q;\n\trep(i, q)\n\t{\n\t\tcin >> e >> f;\n    p0p2_x = e - a;\n    p0p2_y = f - b;\n\t\tgai = gaiseki(p0p1_x, p0p1_y, p0p2_x, p0p2_y);\n\t\tif(gai<0) cout << \"CLOCKWISE\";\n\t\telse if(gai>0) cout << \"COUNTER_CLOCKWISE\";\n\t\telse\n\t\t{\n\t\t\tnai = naiseki(p0p1_x, p0p1_y, p0p2_x, p0p2_y);\n\t\t\tp0p2_size = vector_size(p0p2_x, p0p2_y);\n\t\t\tjudge = nai/(p0p1_size*p0p2_size);\n\t\t\tif(judge<0) cout << \"ONLINE_BACK\";\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(p0p1_size<p0p2_size) cout << \"ONLINE_FRONT\";\n\t\t\t\telse cout << \"ON_SEGMENT\";\n\t\t\t}\n\t\t}\n\t\tcout << endl;\n\t\t//cout << gai <<\" \"<< nai<< \" \"<< p0p1_size <<\" \"<< p0p2_size << \" \" <<judge<< endl;\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <cmath>\n#include <cstdio>\n#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nconst double EPS = 1e-9;\nconst double PI = acos(-1);\n\nint sign(double x) {\n    if (fabs(x) < EPS) {\n        return 0;\n    } else if (x > 0) {\n        return 1;\n    } else {\n        return -1;\n    }\n}\n\nint dcmp(double x, double y) {\n    return sign(x - y);\n}\n\nstruct Vector;\ntypedef Vector Point;\n\nstruct Vector {\n    double x;\n    double y;\n\n    explicit Vector(double x = 0, double y = 0);\n\n    Vector operator+(const Vector &rhs) const;\n    Vector operator-() const;\n    Vector operator-(const Vector &rhs) const;\n    Vector operator*(double d) const;\n    Vector operator/(double d) const;\n    double operator*(const Vector &rhs) const;\n    double operator^(const Vector &rhs) const;\n\n    bool operator==(const Vector &rhs) const;\n    bool operator!=(const Vector &rhs) const;\n    bool operator<(const Vector &rhs) const;\n    bool operator>(const Vector &rhs) const;\n    bool operator<=(const Vector &rhs) const;\n    bool operator>=(const Vector &rhs) const;\n\n    friend std::ostream &operator<<(std::ostream &os, const Vector &vector);\n\n    double dot(const Vector &rhs) const;\n    double cross(const Vector &rhs) const;\n    double length() const;\n    double length2() const;\n    double angle() const;\n    double angle(const Vector &rhs) const;\n    Vector rotate(double rad) const;\n    Vector rotate90() const;\n    Vector rotate90R() const;\n    Vector normal() const;\n    Vector truncate(double d) const;\n    double getDistanceTo(const Point &p) const;\n\n    static bool cmpByAngle(const Vector &a, const Vector &b);\n};\n\nstruct Segment {\n    Point a;\n    Point b;\n\n    explicit Segment(double x1 = 0, double y1 = 0, double x2 = 0, double y2 = 0);\n    explicit Segment(const Point &a = Point(), const Point &b = Point());\n\n    double length() const;\n    bool contains(const Point &p, bool containsEndPoints = true) const;\n    bool intersects(const Segment &rhs, bool containsEndPoints = true) const;\n};\n\n\nVector::Vector(double x, double y) : x(x), y(y) {}\n\nVector Vector::operator+(const Vector &rhs) const {\n    return Vector(x + rhs.x, y + rhs.y);\n}\n\nVector Vector::operator-() const {\n    return Vector(-x, -y);\n}\n\nVector Vector::operator-(const Vector &rhs) const {\n    return *this + -rhs;\n}\n\nVector Vector::operator*(double d) const {\n    return Vector(x * d, y * d);\n}\n\nVector Vector::operator/(double d) const {\n    return *this * (1 / d);\n}\n\ndouble Vector::operator*(const Vector &rhs) const {\n    return x * rhs.x + y * rhs.y;\n}\n\ndouble Vector::operator^(const Vector &rhs) const {\n    return x * rhs.y - rhs.x * y;\n}\n\nbool Vector::operator==(const Vector &rhs) const {\n    return dcmp(x, rhs.x) == 0 && dcmp(y, rhs.y) == 0;\n}\n\nbool Vector::operator!=(const Vector &rhs) const {\n    return !(rhs == *this);\n}\n\nbool Vector::operator<(const Vector &rhs) const {\n    if (dcmp(x, rhs.x) != 0) {\n        return dcmp(x, rhs.x) < 0;\n    } else {\n        return dcmp(y, rhs.y) < 0;\n    }\n}\n\nbool Vector::operator>(const Vector &rhs) const {\n    return rhs < *this;\n}\n\nbool Vector::operator<=(const Vector &rhs) const {\n    return !(rhs < *this);\n}\n\nbool Vector::operator>=(const Vector &rhs) const {\n    return !(*this < rhs);\n}\n\nstd::ostream &operator<<(std::ostream &os, const Vector &vector) {\n    os << \"(\" << vector.x << \",\" << vector.y << \")\";\n    return os;\n}\n\ndouble Vector::dot(const Vector &rhs) const {\n    return *this * rhs;\n}\n\ndouble Vector::cross(const Vector &rhs) const {\n    return *this ^ rhs;\n}\n\ndouble Vector::length() const {\n    return sqrt(*this * *this);\n}\n\ndouble Vector::length2() const {\n    return *this * *this;\n}\n\ndouble Vector::angle() const {\n    return atan2(y, x);\n}\n\ndouble Vector::angle(const Vector &rhs) const {\n    return acos((*this * rhs) / length() / rhs.length());\n}\n\nVector Vector::rotate(double rad) const {\n    // Rotate counter-clockwise\n    return Vector(x * cos(rad) - y * sin(rad), x * sin(rad) + y * cos(rad));\n}\n\nVector Vector::rotate90() const {\n    return Vector(-y, x);\n}\n\nVector Vector::rotate90R() const {\n    return Vector(y, -x);\n}\n\nVector Vector::normal() const {\n    double l = length();\n    return Vector(-y / l, x / l);\n}\n\ndouble Vector::getDistanceTo(const Point &p) const {\n    return sqrt(pow(x - p.x, 2) + pow(y - p.y, 2));\n}\n\nbool Vector::cmpByAngle(const Vector &a, const Vector &b) {\n    return dcmp(a.angle(), b.angle()) < 0;\n}\n\nVector Vector::truncate(double d) const {\n    double l = length();\n    if (sign(l) == 0) {\n        return *this;\n    }\n    d /= l;\n    return Vector(x * d, y * d);\n}\n\nSegment::Segment(double x1, double y1, double x2, double y2) : a(x1, y1), b(x2, y2) {}\n\nSegment::Segment(const Point &a, const Point &b) : a(a), b(b) {}\n\ndouble Segment::length() const {\n    return a.getDistanceTo(b);\n}\n\nbool Segment::contains(const Point &p, bool containsEndPoints) const {\n    const Vector &u = a - p;\n    const Vector &v = b - p;\n    return sign(u ^ v) == 0 && (containsEndPoints ? sign(u * v) <= 0 : sign(u * v) < 0);\n}\n\nbool Segment::intersects(const Segment &rhs, bool containsEndPoints) const {\n    const Vector &u = b - a;\n    const Vector &v = rhs.b - rhs.a;\n    double c1 = u ^(rhs.a - a);\n    double c2 = u ^(rhs.b - a);\n    double c3 = v ^(a - rhs.a);\n    double c4 = v ^(b - rhs.a);\n    if (containsEndPoints && (!sign(c1) || !sign(c2) || !sign(c3) || !sign(c4))) {\n        return contains(rhs.a) || contains(rhs.b) || rhs.contains(a) || rhs.contains(b);\n    }\n    return sign(c1) * sign(c2) < 0 && sign(c3) * sign(c4) < 0;\n}\n\nint main() {\n//    freopen(\"data.in\", \"r\", stdin);\n\n    double x1, y1;\n    double x2, y2;\n    while (~scanf(\"%lf%lf%lf%lf\", &x1, &y1, &x2, &y2)) {\n        int q;\n        scanf(\"%d\", &q);\n        Segment segment(x1, y1, x2, y2);\n        const Vector &u = segment.b - segment.a;\n        while (q--) {\n            scanf(\"%lf%lf\", &x2, &y2);\n            Segment s(x1, y1, x2, y2);\n            const Vector &v = s.b - s.a;\n            if (sign(u ^ v) > 0) {\n                puts(\"COUNTER_CLOCKWISE\");\n            } else if (sign(u ^ v) < 0) {\n                puts(\"CLOCKWISE\");\n            } else {\n                if (sign(v.length()) == 0) {\n                    puts(\"ON_SEGMENT\");\n                } else if (dcmp(u.angle(), v.angle()) != 0) {\n                    puts(\"ONLINE_BACK\");\n                } else if (dcmp(u.length(), v.length()) >= 0) {\n                    puts(\"ON_SEGMENT\");\n                } else {\n                    puts(\"ONLINE_FRONT\");\n                }\n            }\n        }\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include <cstdlib>\n#include <stack>\n#include <queue>\n#include <list>\n#include <vector>\n#include <sstream>\n\nusing namespace std;\n\nclass c_main\n{\nprivate:\n    \npublic:\n    c_main();\n    void f_input();\n};\n\nc_main::c_main()\n{\n\n}\n\nvoid c_main::f_input()\n{\n    double xp1,yp1,xp2,yp2;\n    int q;\n    int i;\n    double x[1000];\n    double y[1000];\n    double a;\n    double b;\n    double x_a;\n    double y_a;\n    double a_a;\n    double b_a;\n    int pt1;\n\n    cin >> xp1 >> yp1 >> xp2 >> yp2;\n    \n    if (xp1 == xp2){\n        x_a = xp1;\n        y_a = 0;\n        pt1 = 0;\n    }else if (yp1 == yp2){\n        x_a = 0;\n        y_a = yp1; \n        pt1 = 1;\n    }else{\n        \n        a_a = (yp2-yp1)/(xp2-xp1);\n      \n        a = -1 * (1/a_a);\n       \n        b_a = -1 * a_a * xp1+ yp1;\n        pt1 = 2;\n    }\n    \n    cin >> q;\n    \n    for ( i = 0; i < q; ++i){\n        cin >> x[i] >> y[i];\n        if (pt1 == 0){\n            if(yp1 >= yp2){\n                if(x[i] == x_a){\n                    if(y[i] > yp1){\n                        cout << \"ONLINE_BACK\" << endl;\n                    }else if(y[i] < yp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(yp2 <= y[i] && y[i] <= yp1){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(x[i] < x_a){\n                    cout << \"CLOCKWISE\" << endl;\n                    \n                }else if(x[i] > x_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n     \n                }\n            }else{\n                if(x[i] == x_a){\n                    if(y[i] < yp1){\n                        cout << \"ONLINE_BACK\" << endl;\n                    }else if(y[i] > yp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(yp1 <= y[i] && y[i] <= yp2){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(x[i] < x_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n                    \n                    \n                    \n                }else if(x[i] > x_a){\n                    cout << \"CLOCKWISE\" << endl;\n                }\n            }\n            //printf(\"%10.10f %10.10f\\n\", x_a,y[i]);\n            \n        }else if(pt1 == 1){\n            if(xp1 >= xp2){\n                if(y[i] == y_a){\n                    if(x[i] > xp1){\n                        cout << \"ONLINE_BACK\" << endl;\n                    }else if(x[i] < xp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(xp2 <= x[i] && x[i] <= xp1){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(y[i] < y_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n                }else if(y[i] > y_a){\n                    cout << \"CLOCKWISE\" << endl;\n                }\n            }else{\n                if(y[i] == y_a){\n                    if(x[i] < xp1){\n                        cout << \"ONLINE_BACK\" << endl;\n                    }else if(x[i] > xp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(xp1 <= x[i] && x[i] <= xp2){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(y[i] < y_a){\n                    cout << \"CLOCKWISE\" << endl;\n                }else if(y[i] > y_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n                }\n            }\n            //printf(\"%10.10f %10.10f\\n\", x[i],y_a);\n        }else if(pt1 == 2){\n            b = -1 * a * x[i] + y[i];\n            x_a = (b - b_a)/(a_a - a);\n            y_a = a_a * x_a + b_a;\n            if(xp1 >= xp2){\n                if(y[i] == y_a){\n                    if(x[i] > xp1){\n                        cout << \"ONLINE_BACK\" << endl;\n                    }else if(x[i] < xp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(xp2 <= x[i] && x[i] <= xp1){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(y[i] < y_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n                }else if(y[i] > y_a){\n                    \n                    cout << \"CLOCKWISE\" << endl;\n                }\n            }else{\n                if(y[i] == y_a){\n                    if(x[i] < xp1){\n                        cout << \"ONLINE_BACK\" << endl;\n                    }else if(x[i] > xp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(xp1 <= x[i] && x[i] <= xp2){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(y[i] < y_a){\n                    cout << \"CLOCKWISE\" << endl;\n                }else if(y[i] > y_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n                }\n            }\n            //printf(\"%10.10f %10.10f\\n\", x_a,y_a);\n        }\n    }\n}\n\nint main(){\n    c_main main01;\n    main01.f_input();\n    \n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string.h>\n#include<string>\n#include<cstdio>\n#include<algorithm>\n#include<stack>\n#include<queue>\n#include<vector>\n#include<cmath>\n#include<utility>\n#include<set>\n#include<complex>\n#define ll long long int\n#define ld long double\n#define INF 1000000000\n#define EPS 0.0000000001\n#define rep(i,n) for(i=0;i<n;i++)\nusing namespace std;\n\ntypedef complex<double> P;\n\nstruct L : public vector<P>{//??´???\n  L(const P &a, const P &b){\n    push_back(a);push_back(b);\n  }\n};\n\nstruct C{//???\n  P c; double r;\n  C(const P &c,double r): c(c),r(r){}\n};\n\nnamespace std{//??????????????????\n  bool operator < (const P& a,const P& b){\n    return real(a)!= real(b) ? real(a) < real(b) : imag(a) < imag(b);\n    //return imag(a) != imag(b) ? imag(a) < imag(b) : real(a) < real(b)\n  }\n  bool operator == (const P& a,const P& b){\n    return a.real()==b.real()&&a.imag()==b.imag();\n  }\n}\n\ndouble dot(P a,P b){\n  return real(conj(a)*b);\n}\n\ndouble cross(P a,P b){\n  return imag(conj(a)*b);\n}\n\nint ccw(P a, P b, P c){\n  b-=a;c-=a;\n  if(cross(b,c)>0)   return +1;// counter clockwise \n  if(cross(b,c)<0)   return -1;// clockwise \n  if(dot(b,c)<0)     return +2;// c-a-b on line\n  if(norm(b)<norm(c))return -2;// a-b-c on line\n  return 0;                    // a-c-b on lone\n}\n\nint main()\n{\n  double xp1,yp1,xp2,yp2;\n  int q;\n  int i,j;\n\n  cin>>xp1>>yp1>>xp2>>yp2;\n  cin>>q;\n\n  P p1(xp1,yp1),p2(xp2,yp2);\n\n  rep(i,q){\n    double xp,yp;\n    cin>>xp>>yp;\n    P p(xp,yp);\n\n    switch(ccw(p1,p2,p)){\n\n    case +1:cout<<\"COUNTER_CLOCKWISE\"<<endl;break;\n    case -1:cout<<\"CLOCKWISE\"<<endl;break;\n    case +2:cout<<\"ONLINE_BACK\"<<endl;break;\n    case -2:cout<<\"ONLINE_FRONT\"<<endl;break;\n    case 0 :cout<<\"ON_SEGMENT\"<<endl;break;\n\n    }\n  }\n\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#pragma warning(disable : 4267) // \"int n = (unsigned)size\"\n\nusing vi = vector<int>; using vvi = vector<vi>; using vvvi = vector<vvi>;\nusing ll = long long int;\nusing vll = vector<ll>; using vvll = vector<vll>; using vvvll = vector<vvll>;\nusing vd = vector<double>; using vvd = vector<vd>; using vvvd = vector<vvd>;\nusing P = pair<int, int>;\nusing Pll = pair<ll, ll>;\nusing cdouble = complex<double>;\n\nconst double eps = 1e-4;\nconst double INFD = numeric_limits<double>::infinity();\n#define Loop(i, n) for(int i = 0; i < int(n); i++)\n#define Loopll(i, n) for(ll i = 0; i < ll(n); i++)\n#define Loop1(i, n) for(int i = 1; i <= int(n); i++)\n#define Loopll1(i, n) for(ll i = 1; i <= ll(n); i++)\n#define Loopr(i, n) for(int i = int(n) - 1; i >= 0; i--)\n#define Looprll(i, n) for(ll i = ll(n) - 1; i >= 0; i--)\n#define Loopr1(i, n) for(int i = int(n); i >= 1; i--)\n#define Looprll1(i, n) for(ll i = ll(n); i >= 1; i--)\n#define Foreach(buf, container) for(auto buf : container)\n#define Loopdiag(i, j, h, w, sum) for(int i = ((sum) >= (h) ? (h) - 1 : (sum)), j = (sum) - i; i >= 0 && j < (w); i--, j++)\n#define Loopdiagr(i, j, h, w, sum) for(int j = ((sum) >= (w) ? (w) - 1 : (sum)), i = (sum) - j; j >= 0 && i < (h); j--, i++)\n#define Loopdiagsym(i, j, h, w, gap) for (int i = ((gap) >= 0 ? (gap) : 0), j = i - (gap); i < (h) && j < (w); i++, j++)\n#define Loopdiagsymr(i, j, h, w, gap) for (int i = ((gap) > (h) - (w) - 1 ? (h) - 1 : (w) - 1 + (gap)), j = i - (gap); i >= 0 && j >= 0; i--, j--)\n#define Loopitr(itr, container) for(auto itr = container.begin(); itr != container.end(); itr++)\n#define printv(vector) Loop(ex_i, vector.size()) { cout << vector[ex_i] << \" \"; } cout << endl;\n#define printmx(matrix) Loop(ex_i, matrix.size()) { Loop(ex_j, matrix[ex_i].size()) { cout << matrix[ex_i][ex_j] << \" \"; } cout << endl; }\n#define quickio() ios::sync_with_stdio(false); cin.tie(0);\n#define bitmanip(m,val) static_cast<bitset<(int)m>>(val)\n#define Comp(type_t) bool operator<(const type_t &another) const\n#define fst first\n#define snd second\nbool nearlyeq(double x, double y) { return abs(x - y) < eps; }\nbool inrange(ll x, ll t) { return x >= 0 && x < t; }\nbool inrange(vll xs, ll t) { Foreach(x, xs) if (!(x >= 0 && x < t)) return false; return true; }\nint ceillog2(ll x) { int ret = 0;\tx--; while (x > 0) { ret++; x >>= 1; } return ret; }\nll rndf(double x) { return (ll)(x + (x >= 0 ? 0.5 : -0.5)); }\nll floorsqrt(ll x) { ll m = (ll)sqrt((double)x); return m + (m * m <= x ? 0 : -1); }\nll ceilsqrt(ll x) { ll m = (ll)sqrt((double)x); return m + (x <= m * m ? 0 : 1); }\nll rnddiv(ll a, ll b) { return (a / b + (a % b * 2 >= b ? 1 : 0)); }\nll ceildiv(ll a, ll b) { return (a / b + (a % b == 0 ? 0 : 1)); }\nll gcd(ll m, ll n) { if (n == 0) return m; else return gcd(n, m % n); }\nll lcm(ll m, ll n) { return m * n / gcd(m, n); }\n\n/*******************************************************/\n\nstruct point_t {\n\tdouble x, y;\n\tpoint_t operator+(const point_t &p) { return { x + p.x, y + p.y }; }\n\tpoint_t operator-(const point_t &p) { return { x - p.x, y - p.y }; }\n\tpoint_t operator*(const double &c) { return { x * c, y * c }; }\n};\n\n// ax + by + c = 0\nstruct line_t {\n\tdouble a, b, c;\n};\n\npoint_t cross_point(line_t l, line_t m) {\n\tpoint_t ret = { INFD, INFD };\n\tdouble d = l.a * m.b - m.a * l.b;\n\tif (nearlyeq(d, 0)) return ret;\n\tdouble x = l.b * m.c - m.b * l.c;\n\tdouble y = l.a * m.c - m.a * l.c;\n\tret = { x / d, y / -d };\n\treturn ret;\n}\n\n// normal vector = (a, b), passing p\nline_t solve_line(double a, double b, point_t p) {\n\treturn { a, b, -a * p.x - b * p.y };\n}\n\n// t should be radius\npoint_t rot(point_t p, double r) {\n\treturn {\n\t\tcos(r) * p.x - sin(r) * p.y,\n\t\tsin(r) * p.x + cos(r) * p.y\n\t};\n}\n\ndouble abs(point_t p) {\n\treturn sqrt(p.x * p.x + p.y * p.y);\n}\n\n// angle [0, 2PI) of vector p to vector q\ndouble angle(point_t p, point_t q) {\n\tp = p * (1.0 / abs(p));\n\tq = q * (1.0 / abs(q));\n\tdouble r0 = acos(p.x * q.x + p.y * q.y);\n\tdouble r1 = asin(p.x * q.y - p.y * q.x);\n\tif (r1 >= 0) return r0;\n\telse return 2 * M_PI - r0;\n}\n\nint main() {\n\tpoint_t p0, p1;\n\tcin >> p0.x >> p0.y >> p1.x >> p1.y;\n\tint q; cin >> q;\n\tcout << setprecision(20);\n\tLoop(i, q) {\n\t\tpoint_t p2;\n\t\tcin >> p2.x >> p2.y;\n\t\tpoint_t p = p1 - p0;\n\t\tpoint_t q = p2 - p0;\n\t\tif (nearlyeq(abs(p), 0)) {\n\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t}\n\t\telse if (nearlyeq(abs(q), 0)) {\n\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t}\n\t\telse {\n\t\t\tdouble r = angle(p, q);\n\t\t\tif (nearlyeq(r, M_PI)) {\n\t\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t\t}\n\t\t\telse if (nearlyeq(r, 0)) {\n\t\t\t\tif (abs(q) > abs(p)) {\n\t\t\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (r < M_PI) {\n\t\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\t\t}\n\t\t}\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <math.h>\n\n#define TOL 1e-10\n\nusing namespace std;\nint main(){\n    double x[3],y[3];\n    scanf(\"%lf %lf %lf %lf\",&x[0],&y[0],&x[1],&y[1]);\n    double v1_x,v2_x,v1_y,v2_y;\n    double n1,n2,i_v,o_v;\n    v1_x = x[1]-x[0];\n    v1_y = y[1]-y[0];\n    n1 = v1_x*v1_x + v1_y*v1_y;\n    int q;\n    scanf(\"%d\",&q);\n    int i;\n    for (i=0; i<q; i++){\n        scanf(\"%lf %lf\",&x[2],&y[2]);\n        v2_x = x[2]-x[0];\n        v2_y = y[2]-y[0];\n        n2 = v2_x*v2_x + v2_y*v2_y;\n        i_v = v1_x*v2_x + v1_y*v2_y;\n        o_v = v1_x*v2_y - v2_x*v1_y;\n        if(o_v > TOL){\n            printf(\"COUNTER_CLOCKWISE\\n\");\n        } else if(o_v < -TOL) {\n            printf(\"CLOCKWISE\\n\");\n        } else if(i_v < 0){\n            printf(\"ONLINE_BACK\\n\");\n        } else if(n1 < n2){\n            printf(\"ONLINE_FRONT\\n\");\n        } else {\n            printf(\"ON_SEGMENT\\n\");\n        }\n    }\n    return 0;\n    \n}\n"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#include<iostream>\n#include<fstream>\n#include<iomanip>\n#include<math.h>\nusing namespace std;\n\ntemplate <class T>\nclass _Point{\npublic:\n\tT x;\n\tT y;\n\t_Point(){}\n\t_Point(T _x, T _y) :x(_x), y(_y){}\n\t_Point(const _Point & v) :x(v.x), y(v.y){}\n\n\tconst _Point operator + (const _Point & v)\n\t{\n\t\treturn _Point(x+v.x,y+v.y);\n\t}\n\tconst _Point operator - (const _Point & v)\n\t{\n\t\treturn _Point(x - v.x, y - v.y);\n\t}\n\tT abs() const {\n\t\treturn sqrt(x*x + y*y);\n\t}\n\t_Point unit() const{\n\t\tT len = abs();\n\t\treturn _Point(x / len, y / len);\n\t}\n\tT operator*(const _Point &v) const\n\t{\n\t\treturn x * v.x + y * v.y;\n\t}\n\tconst _Point operator*(const T &len) const\n\t{\n\t\treturn _Point(len * x, len * y);\n\t}\n};\ntypedef double R;\ntypedef _Point<R> Point;\ntypedef Point Vector;\n\nint main(){\n\n\t\tstd::istream & c_in = cin;\n\n\tPoint p0, p1;\n\tc_in >> p0.x >> p0.y >> p1.x >> p1.y;\n\tVector P10(p1 - p0);\n\tVector e10(P10.unit());\n\n\tint q;\n\tc_in >> q;\n\tfor (int i = 0; i < q; ++i)\n\t{\n\t\tPoint p2;\n\t\tc_in >> p2.x >> p2.y;\n\n\t\tVector P20 = p2 - p0;\n\t\tVector e20(P20.unit());\n\t\tR projection = e10*e20;\n\t\tif (fabs(projection) > 1 - 1e-8)\n\t\t{\n\t\t\t//??´???\n\t\t\tif (projection > 0)\n\t\t\t{\n\t\t\t\tif (P20.abs() < P10.abs())\n\t\t\t\t{\n\t\t\t\t\t//(5)\n\t\t\t\t\tcout << \"ON_SEGMENT\";\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t//(4)\n\t\t\t\t\tcout << \"ONLINE_FRONT\";\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//(3)\n\t\t\t\tcout << \"ONLINE_BACK\";\n\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tVector ey(-e10.y, e10.x);\n\t\t\tR projection2 = ey*P20;\n\t\t\tif (projection2 > 0)\n\t\t\t{\n\t\t\t\t//???????¨??????????????????´??? (1) \n\t\t\t\tcout << \"COUNTER_CLOCKWISE\";\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//????¨??????????????????´???(2) \n\t\t\t\tcout << \"CLOCKWISE\";\n\t\t\t}\n\t\t}\n\t\tcout << endl;\n\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "\n//be naame khodaa\n#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef long double ld;\ntypedef pair <int, int> pii;\ntypedef complex<ld> PT;\n#define F first\n#define S second\n\ninline int in(){int x, y; y = scanf(\"%d\", &x); return x; }\n\nconst int N = -1;\nconst ld EPS = 1e-12;\n\nistream& operator>> (istream& is, complex<ld>& p){\n\tld val;\n\tis >> val;\n\tp.real(val);\n\tis >> val;\n\tp.imag(val);\n\treturn is;\n}\n\nPT proj(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\treturn a + b*real(c/b);\n}\n\nPT reflect(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\treturn a + conj(c/b)*b;\n}\n\nstring pos(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\tc /= b;\n\tif (c.imag() > EPS)\n\t\treturn \"COUNTER_CLOCKWISE\";\n\tif (c.imag() + EPS < 0)\n\t\treturn \"CLOCKWISE\";\n\tif (c.real() + EPS < 0)\n\t\treturn \"ONLINE_BACK\";\n\tif (c.real() > 1 + EPS)\n\t\treturn \"ONLINE_FRONT\";\n\treturn \"ON_SEGMENT\";\n}\n\nint main(){\t\n\tPT a, b;\n\tcin >> a >> b;\n\tcout << setprecision(10) << fixed;\n\tfor (int i = in(); i; i--){\n\t\tPT p;\n\t\tcin >> p;\n\t\tcout << pos(a, b, p) << '\\n';\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<algorithm>\n#include<cmath>\n#include<vector>\nusing namespace std;\n#define EPS (1e-10)\n#define equals(a, b) (fabs(a-b)<EPS)\nstatic const int CCW=1;//?????¶???\nstatic const int CW=-1;//?????¶???\nstatic const int BACK=-2;//?????¢\nstatic const int FRONT=2;//?????¢\nstatic const int ON=0;//?????????\n\nstruct Point//???\n{\n    double x, y;\n    Point(double x=0, double y=0):x(x), y(y){}\n};\ntypedef Point Vector;//??????\n\nstruct Segment{ Point p1, p2; };//??????\ntypedef Segment Line;//??´???\n\nclass Circle//???\n{\npublic:\n    Point c;\n    double r;\n    Circle(Point c=Point(), double r=0.0):c(c), r(r){}\n};\n\ntypedef vector<Point> Polygon;//????????¢\n\nPoint operator + (Point a, Point b){ return Point(a.x+b.x, a.y+b.y); }\nPoint operator - (Point a, Point b){ return Point(a.x-b.x, a.y-b.y); }\nPoint operator * (Point a, double p){ return  Point(a.x*p, a.y*p); }\nPoint operator / (Point a, double p){ return Point(a.x/p, a.y/p); }\n\ndouble norm(Vector a){ return a.x*a.x+a.y*a.y; }//?????°????¨?????????????\ndouble abs(Vector a){ return sqrt(norm(a)); }//?¨?\ndouble dot(Vector a, Vector b){ return a.x*b.x+a.y*b.y; }//??????\ndouble cross(Vector a, Vector b){ return a.x*b.y-a.y*b.x; }//??????\n\nbool isOrthgonal(Vector a, Vector b){ return equals(dot(a, b), 0.0); }//???????????´????????????\nbool isOrthgonal(Point a1, Point a2, Point b1, Point b2){ return isOrthgonal(a1-a2, b1-b2); }//???????????´???4?????????\nbool isOrthgonal(Segment s1, Segment s2){ return equals(dot(s1.p2-s1.p1, s2.p2-s2.p1), 0.0); }//???????????´????????????\n\nbool isParallel(Vector a, Vector b){ return equals(cross(a, b), 0.0); }//????????????????????????\nbool isParallel(Point a1, Point a2, Point b1, Point b2){ return isParallel(a1-a2, b1-b2); }//???????????????4?????????\nbool isParallel(Segment s1, Segment s2){ return equals(cross(s1.p2-s1.p1, s2.p2-s2.p1), 0.0); }//????????????????????????\n\nPoint project(Segment s, Point p)//?±?????¶?\n{\n    Vector base=s.p2-s.p1;\n    double r=dot(p-s.p1, base)/norm(base);\n    return s.p1+base*r;\n}\n\nPoint reflect(Segment s, Point p)//?±??????°??´??????????§°???\n{\n    return p+(project(s, p)-p)*2.0;\n}\n\ndouble getDistance(Point a, Point b){ return abs(a-b); }//????????´?????????\ndouble getDistanceLP(Line l, Point p){ return abs(cross(l.p2-l.p1, p-l.p1)/abs(l.p2-l.p1)); }//?????°??´????????????\ndouble getDistanceSP(Segment s, Point p)//?????°???????????????\n{\n    if(dot(s.p2-s.p1, p-s.p1)<0.0) return abs(p-s.p1);\n    if(dot(s.p1-s.p2, p-s.p2)<0.0) return abs(p-s.p2);\n    return getDistanceLP(s, p);\n}\ndouble getDistanceSS(Segment s1, Segment s2)//???????????´?????????\n{\n    //if(intersect(s1, s2)) return 0.0;\n    return min( min(getDistanceSP(s1,s2.p1), getDistanceSP(s1,s2.p2)),\n                min(getDistanceSP(s2,s1.p1), getDistanceSP(s2,s1.p2)) );\n}\n\nint ccw(Point p0, Point p1, Point p2)\n{\n    Vector a=p1-p0;\n    Vector b=p2-p0;\n    if( cross(a, b)>EPS ) return CCW;\n    if( cross(a, b)<-EPS ) return CW;\n    if( dot(a, b)<-EPS ) return BACK;\n    if( norm(a)<norm(b) ) return FRONT;\n    return ON;\n}\n\nint main()\n{\n    Point p0, p1, p2;\n    int q;\n    scanf(\"%lf%lf%lf%lf\", &p0.x, &p0.y, &p1.x, &p1.y);\n    scanf(\"%d\", &q);\n    while(q--)\n    {\n        scanf(\"%lf%lf\", &p2.x, &p2.y);\n        int judge=ccw(p0, p1, p2);\n        if(judge==1) printf(\"COUNTER_CLOCKWISE\\n\");\n        if(judge==-1) printf(\"CLOCKWISE\\n\");\n        if(judge==-2) printf(\"ONLINE_BACK\\n\");\n        if(judge==2) printf(\"ONLINE_FRONT\\n\");\n        if(judge==0) printf(\"ON_SEGMENT\\n\");\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <complex>\n#include <map>\n#include <set>\n#include <vector>\n#include <stack>\n#include <queue>\n#include <bitset>\n#include <algorithm>\n#include <numeric>\n#include <functional>\nusing namespace std;\n\n#define Rep(b, e, i) for(int i = b; i <= e; i++)\n#define Repr(e, b, i) for(int i = e; i >= b; i--)\n#define rep(n, i) Rep(0, n-1, i)\n#define repr(n, i) Repr(n-1, 0, i)\n#define all(v) (v).begin(), (v).end()\n#define pb(v) push_back(v)\n#define uniq(v) (v).erase(unique(all(v)),(v).end())\n#define bitcnt(x) __builtin_popcount(x)\n#define fst first\n#define snd second\n#define Pqaz(T) priority_queue<T,vector<T>,greater<T>>\n#define Pqza(T) priority_queue<T>\n#define put(x) cout << x;\n#define puts(x) cout << x << ' ';\n#define putln(x) cout << x << endl;\n#define ENJYU std::ios::sync_with_stdio(false);std::cin.tie(0);\n\nconst double EPS = 1e-12;\ntypedef complex<double> comp;\n\nvoid solve(void){\n\n\tint x1, y1, x2, y2, Q;\n\tcin >> x1 >> y1 >> x2 >> y2 >> Q;\n\n\tcomp o(x1, y1), p(x2-x1, y2-y1), r;\n\n\t//回転用\n\tr = polar(1.0, arg(p));\n\n\twhile(Q--)\n\t{\n\t\tint x3, y3;\n\t\tcin >> x3 >> y3;\n\n\t\tcomp q(x3-x1, y3-y1);\n\n\t\tq /= r;\n\n\t\tif (abs(arg(q)) < EPS)\n\t\t{\n\t\t\tif (norm(p) >= norm(q))\n\t\t\t{\n\t\t\t\tputln(\"ON_SEGMENT\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tputln(\"ONLINE_FRONT\");\n\t\t\t}\n\t\t}\n\t\telse if (abs(abs(arg(q))-M_PI) < EPS)\n\t\t{\n\t\t\tputln(\"ONLINE_BACK\");\n\t\t}\n\t\telse if (arg(q) > 0)\n\t\t{\n\t\t\tputln(\"COUNTER_CLOCKWISE\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tputln(\"CLOCKWISE\");\n\t\t}\n\t}\n}\n\nint main(void){\n\tsolve();\n\t//cout << \"yui(*-v・)yui\" << endl;\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstring>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <tuple>\n#include <queue>\n#include <set>\n#include <cstdio>\n#include <climits>\n#include <cmath>\n#include <array>\n#include <functional>\n#include <sstream>\n#include <list>\n#include <iomanip>\n#include <set>\nconst int MOD=1000000007;\nconst int INF=1000000000;\nusing namespace std;\ntypedef long long ll;\ntypedef vector<int> vi;\nconst double eps=1e-10;\nconst int inf=1e9;\ntypedef pair<int,int> P;\nstatic const int COUNTER_CLOCKWISE=1;\nstatic const int CLOCKWISE=-1;\nstatic const int ONLINE_BACK=2;\nstatic const int ONLINE_FRONT=-2;\nstatic const int ON_SEGMENT=0;\n\nclass Point\n{\npublic:\n  double x,y;\n  Point(double x,double y): x(x),y(y){}\n  Point operator + (const Point &p)\n  {\n    return Point(x+p.x,y+p.y);\n  }\n  Point operator - (const Point &p)\n  {\n    return Point(x-p.x,y-p.y);\n  }\n  Point operator * (double k)\n  {\n    return Point(x*k,y*k);\n  }\n  Point operator / (double k)\n  {\n    return Point(x/k,y/k);\n  }\n  bool operator < (const Point &p) const\n  {\n    return x!=p.x ? x<p.x : y<p.y;\n  }\n  bool operator == (const Point &p) const\n  {\n    return fabs(x-p.x)<eps && fabs(y-p.y) < eps;\n  }\n  double abs(){return sqrt(norm());}\n  double norm(){return x*x+y*y;}\n};\ntypedef Point Vector;\ndouble dot(Vector a,Vector b)\n{\n  return a.x*b.x+a.y*b.y;\n}\ndouble cross(Vector a,Vector b)\n{\n  return a.x*b.y - a.y*b.x;\n}\ndouble norm(Point a)\n{\n  return a.x*a.x + a.y*a.y;\n}\ndouble abs(Vector a)\n{\n  return sqrt(norm(a));\n}\nstruct Segment\n{\n  Point p1,p2;\n  Segment(Point p1,Point p2): p1(p1),p2(p2){}\n};\ntypedef Segment Line;\n\nclass Circle\n{\npublic:\n  Point c;\n  double r;\n  Circle(Point c,double r):  c(c),r(r){}\n};\n\ntypedef vector<Point> Polygon;\n\n\nbool isorthogonal(Vector a,Vector b)\n{\n  return fabs(dot(a,b)-0.0)<eps;\n}\n\nbool isparallel(Vector a,Vector b)\n{\n  return fabs(cross(a,b)-0.0)<eps;\n}\nPoint project(Segment s,Point p)\n{\n  Vector base=s.p2-s.p1;\n  double r=dot(p-s.p1,base) / norm(base);\n  return  s.p1 + base*r;\n}\nPoint reflect(Segment s,Point p)\n{\n  return p+ (project(s,p)-p)*2.0;\n}\ndouble getdistance(Point a,Point b)\n{\n  return abs(a-b);\n}\ndouble getdistanceLP(Line l,Point p)\n{\n  return abs(cross(l.p2-l.p1,p-l.p1) / abs(l.p2-l.p1));\n}\ndouble getdistanceSP(Segment s,Point p)\n{\n  if(dot(s.p2-s.p1,p-s.p1) <0.0) return abs(p-s.p1);\n  if(dot(s.p1-s.p2,p-s.p2) <0.0) return abs(p-s.p2);\n  return getdistanceLP(s,p);\n}\nint ccw(Point p0,Point p1,Point p2)\n{\n  Vector a=p1-p0;\n  Vector b=p2-p0;\n  if(cross(a,b)>eps) return COUNTER_CLOCKWISE;\n  if(cross(a,b)<-eps) return CLOCKWISE;\n  if(dot(a,b)<-eps) return ONLINE_BACK;\n  if(a.norm()<b.norm()) return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\nint main(int argc,char const* argv[])\n{\n  int q;\n  double p0x,p0y,p1x,p1y;\n  cin >> p0x >> p0y >> p1x >> p1y;\n  Point p0=Point(p0x,p0y);\n  Point p1=Point(p1x,p1y);\n  cin >> q;\n  for(int i=0;i<q;i++)\n    {\n      double p2x,p2y;\n      cin >> p2x >> p2y;\n      Point p2=Point(p2x,p2y);\n      if(ccw(p0,p1,p2)==COUNTER_CLOCKWISE)\n\t{\n\t  cout << \"COUNTER_CLOCKWISE\"<<endl;\n\t}\n      else if(ccw(p0,p1,p2)==CLOCKWISE)\n\t{\n\t  cout << \"CLOCKWISE\"<<endl;\n\t}\n      else if(ccw(p0,p1,p2)==ONLINE_BACK)\n\t{\n\t  cout << \"ONLINE_BACK\"<<endl;\n\t}\n      else if(ccw(p0,p1,p2)==ONLINE_FRONT)\n\t{\n\t  cout << \"ONLINE_FRONT\"<<endl;\n\t}\n      else if(ccw(p0,p1,p2)==ON_SEGMENT)\n\t{\n\t  cout << \"ON_SEGMENT\"<<endl;\n\t}\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <stack>\n#include <queue>\n#include <set>\n#include <cmath>\n#include <algorithm>\n#include <iomanip>\nusing namespace std;\n#define EPS (1e-10)\n#define equals(a, b) (fabs(a - b) < EPS)\n\nclass Point{\npublic:\n  double x, y;\n\n  Point(double x = 0, double y = 0) : x(x), y(y) {}\n\n  Point operator + (Point p){return Point(x + p.x, y + p.y);}\n  Point operator - (Point p){return Point(x - p.x, y - p.y);}\n  Point operator * (double a){return Point(x * a, y * a);}\n  Point operator / (double a){return Point(x / a, y / a);}\n\n  double abs(){return sqrt(norm());}\n  double norm(){return x * x + y * y;}\n\n  bool operator < (const Point &p) const{\n    return x != p.x ? x < p.x : y < p.y;\n  }\n  bool operator == (const Point &p) const{\n    return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n  }\n\n};\n\ntypedef Point Vector;\n\nclass Segment{\npublic:\n  Point p1, p2;\n  Segment(Point p1, Point p2): p1(p1), p2(p2){}\n};\n\ntypedef Segment Line;\n\nclass Circle{\npublic:\n  Point c;\n  double r;\n  Circle(Point c = Point(), double r = 0): c(c), r(r){}\n};\n\ntypedef vector<Point> Polygon;\n\ndouble dot(Vector a, Vector b){\n  return a.x * b.x + a.y * b.y;\n}\ndouble cross(Vector a, Vector b){\n  return a.x * b.y - a.y * b.x;\n}\n\nPoint reflect(Point p0, Point p1, Point p2){\n  Vector v01 = Vector(p0.x - p1.x, p0.y - p1.y);\n  Vector v21 = Vector(p2.x - p1.x, p2.y - p1.y);\n  double t = -1 * ((p2.x - p1.x) * (p1.x - p0.x) + (p2.y - p1.y) * (p1.y - p0.y)) / (pow(p2.x - p1.x, 2) + pow(p2.y - p1.y, 2));\n  return (v21 * t - v01) * 2 + p0;\n}\n\nPoint project(Point p0, Point p1, Point p2){\n  Vector v01 = Vector(p0.x - p1.x, p0.y - p1.y);\n  Vector v21 = Vector(p2.x - p1.x, p2.y - p1.y);\n  double t = -1 * ((p2.x - p1.x) * (p1.x - p0.x) + (p2.y - p1.y) * (p1.y - p0.y)) / (pow(p2.x - p1.x, 2) + pow(p2.y - p1.y, 2));\n  return v21 * t + p1;\n}\n\ndouble dis(Point p1, Point p2){\n  return (p1 - p2).abs();\n}\n\ndouble getdis(Segment s, Point p){\n  if(dot(s.p2 - s.p1, p - s.p1) < 0) return dis(s.p1, p);\n  if(dot(s.p1 - s.p2, p - s.p2) < 0) return dis(s.p2, p);\n  return dis(project(p, s.p1, s.p2), p);\n}\n\n/*void solve(){\n  int q; cin >> q;\n  vector<double> ans(q);\n  for(int i = 0; i < q; i++){\n    double x[4], y[4];\n    Point p[4];\n    for(int j = 0; j < 4; j++){\n      cin >> x[j] >> y[j];\n      p[j] = Point(x[j], y[j]);\n    }\n    Segment s01 = Segment(p[0], p[1]);\n    Segment s23 = Segment(p[2], p[3]);\n    if(intersect(s01, s23)){\n      ans[i] = 0;\n      continue;\n    }\n    ans[i] = 10000000;\n    for(int j = 0; j < 4; j++){\n      if(j < 2) ans[i] = min(getdis(s23, p[j]), ans[i]);\n      else ans[i] = min(getdis(s01, p[j]), ans[i]);\n    }\n  }\n  for(int i = 0; i < q; i++){\n    cout << fixed << setprecision(10) << ans[i] << endl;\n  }\n  return;\n}*/\n\nvoid solve2(){\n  double x[3], y[3];\n  Point p[3];\n  for(int i = 0; i < 2; i++){\n    cin >> x[i] >> y[i];\n    p[i] = Point(x[i], y[i]);\n  }\n  int q; cin >> q;\n  vector<string> ans(q);\n  for(int i = 0; i < q; i++){\n    cin >> x[2] >> y[2];\n    p[2] = Point(x[2], y[2]);\n    Vector v01 = Vector(x[1] - x[0], y[1] - y[0]);\n    Vector v02 = Vector(x[2] - x[0], y[2] - y[0]);\n    if(equals(cross(v01, v02), 0)){\n      if(dot(v01, v02) < 0) ans[i] = \"ONLINE_BACK\";\n      else if(equals(v01.abs(), v02.abs()) == true || v01.abs() > v02.abs()) ans[i] = \"ON_SEGMENT\";\n      else ans[i] = \"ONLINE_FRONT\";\n    }\n    else if(cross(v01, v02) > 0) ans[i] = \"COUNTER_CLOCKWISE\";\n    else ans[i] = \"CLOCKWISE\";\n  }\n  for(int i = 0; i < q; i++){\n    cout << ans[i] << endl;\n  }\n  return;\n}\n\nint main(){\n  solve2();\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <deque>\n#include <queue>\n#include <algorithm>\n#include <iomanip>\n#include <set>\n#include <map>\n#include <bitset>\n#include <cmath>\n#include <complex>\n#include <array>\n#include <functional>\n\nusing namespace std;\n\n#define REP(i,n) for(ll (i) = (0);(i) < (n);++i)\n#define REV(i,n) for(ll (i) = (n) - 1;(i) >= 0;--i)\n#define PB push_back\n#define EB emplace_back\n#define MP make_pair\n#define FI first\n#define SE second\n#define SHOW1d(v,n) {REP(WW,n)cerr << v[WW] << ' ';cerr << endl << endl;}\n#define SHOW2d(v,WW,HH) {REP(W_,WW){REP(H_,HH)cerr << v[W_][H_] << ' ';cerr << endl;}cerr << endl;}\n#define ALL(v) v.begin(),v.end()\n#define Decimal fixed<<setprecision(20)\n#define INF 1000000000\n#define LLINF 1000000000000000000LL\n#define MOD 998244353\n\ntypedef long long ll;\ntypedef pair<ll,ll> P;\n//--------geometry original ------------------\n#define curr(PP, i) PP[i]\n#define next(PP, i) PP[(i+1)%PP.size()]\n#define diff(PP, i) (next(PP, i) - curr(PP, i))\n#define eq(n,m) (abs((n)-(m)) < EPS)\n\ntypedef long long ll;\ntypedef pair<ll, ll> P;\n\nconst double EPS = 1e-8;\nconst double EPS_GIG = 1e-3;\nconst double PI = acos(-1.0);\nstruct point {\n\tdouble x, y;\n\tpoint(double x_, double y_):x(x_), y(y_){};\n\tpoint(const point &p):x(p.x), y(p.y){}\n\tpoint():x(0), y(0){}\n\tpoint& operator+=(point a){x += a.x;y += a.y;return *this;}\n\tpoint& operator-=(point a){x -= a.x;y -= a.y;return *this;}\n\tpoint& operator*=(point a){\n\t\tdouble xx = x * a.x - y * a.y;\n\t\tdouble yy = x * a.y + y * a.x;\n\t\tx = xx;y = yy;return *this;\n\t}\n\tpoint& operator*=(double a){x *= a;y *= a;return *this;}\n\tpoint& operator/=(double a){x /= a;y /= a;return *this;}\n\tpoint operator+(point a) const{return point(x, y)+=a;}\n\tpoint operator-(point a) const{return point(x, y)-=a;}\n\tpoint operator*(point a) const{return point(x, y)*=a;}\n\tpoint operator*(double a) const{return point(x, y)*=a;}\n\tpoint operator/(double a) const{return point(x, y)/=a;}\n\tbool operator<(point a) const{return (x == a.x ? x < a.x : y < a.y);}\n\tbool operator==(point a) const{return (abs(x - a.x) < EPS && abs(y - a.y) < EPS);}\n\tbool operator!=(point a) const{return !(*this == a);}\n};\n\ntemplate <class T>\npoint operator*(const T a, const point p){return point(p.x * a, p.y * a);}\n\npoint conj(point p) {return point(p.x, -p.y);}\ndouble arg(point p) {return atan2(p.x, p.y);}\ndouble abs(point p) {return abs(p.x * p.x + p.y * p.y);}\ndouble norm(point p) {return (p * conj(p)).x;}\n\nnamespace std {\n\tostream& operator<<(ostream& os, const point& p){\n\t\tos << \"(\" << p.x << \", \" << p.y << \")\";\n\t\treturn os;\n\t}\n}\nstruct circle {\n\tpoint p; double r;\n\tcircle(){}\n\tcircle(const point &p, double r) : p(p), r(r) { }\n};\n\n// 扇型、中心と半径、二つの端点\n// 現在中心角が180未満の前提\nstruct sector {\n\tpoint o;\n\tpoint a, b;\n\tdouble r;\n\tsector(){}\n\tsector(point O, point A, point B, double _r) :o(O), a(A), b(B), r(_r) {}\n};\n\nstruct segment : public array<point, 2> {\n\tsegment(const point &a, const point &b) {\n\t\tat(0) = a;\n\t\tat(1) = b;\n\t}\n};\n\ndouble cross(const point& a, const point& b) {\n\treturn (conj(a)*b).y;\n}\n\ndouble dot(const point& a, const point& b) {\n\treturn (conj(a)*b).x;\n}\n\n//角度足し算\ndouble add_rad(double a,double b){\n\tdouble ret = a + b;\n\tif(ret > 2 * PI)ret -= 2 * PI;\n\treturn ret;\n}\n\n//なす角(vector)\ndouble angle(const point &a,const point &b) {\n\tauto tmp = abs(arg(a) - arg(b));\n\treturn min(tmp, 2 * PI - tmp);\n}\n\ndouble angle(const segment &s1,const segment &s2) {\n\treturn angle(s1[1] - s1[0], s2[1] - s2[0]);\n}\n\n//点の回転\npoint rotate(const point &p, double rad) {\n\tdouble x = p.x * cos(rad) - p.y * sin(rad);\n\tdouble y = p.y * cos(rad) + p.x * sin(rad);\n\treturn point(x, y);\n}\n\n//並行\nbool isParallel(const point &a, const point &b){\n    return abs(cross(a,b)) < EPS;\n}\nbool isParallel(const segment &a, const segment &b){\n    return isParallel(a[1]-a[0], b[1]-b[0]);\n}\n//直行\nbool isOrthogonal(const point &a,const point &b){\n\treturn abs(angle(a,b) - PI / 2) < EPS;\n}\nbool isOrthogonal(const segment &a,const segment &b){\n\treturn isOrthogonal(a[1]-a[0],b[1]-b[0]);\n}\n\n/*\na → b で時計方向に折れて b → c\na → b で半時計方向に折れて b → c\na → b で逆を向いて a を通り越して b → c\na → b でそのまま b → c\na → b で逆を向いて b → c ( または b == c )\n*/\n\nint ccw(point a, point b, point c) {\n\tb -= a; c -= a;\n\tif (cross(b, c) > EPS)   return +1;       // counter clockwise\n\tif (cross(b, c) + EPS < 0)   return -1;       // clockwise\n\tif (dot(b, c) < 0)     return +2;       // c--a--b on line\n\tif (norm(b) < norm(c)) return -2;       // a--b--c on line\n\treturn 0;\n}\n\nbool intersectLL(const segment &l, const segment &m) {\n\treturn abs(cross(l[1] - l[0], m[1] - m[0])) > EPS || // non-parallel\n\t\tabs(cross(l[1] - l[0], m[0] - l[0])) < EPS;   // same line\n}\nbool intersectLS(const segment &l, const segment &s) {\n\treturn cross(l[1] - l[0], s[0] - l[0])*       // s[0] is left of l\n\t\tcross(l[1] - l[0], s[1] - l[0]) < EPS; // s[1] is right of l\n}\nbool intersectLP(const segment &l, const point &p) {\n\treturn abs(cross(l[1] - p, l[0] - p)) < EPS;\n}\nbool intersectSP(const segment &s, const point &p) {\n\tauto a = s[0] - p;\n\tauto b = s[1] - p;\n\treturn (abs(cross(a, b)) < EPS && dot(a, b) <= EPS); // triangle inequality\n}\n//端点の交差も考える\nbool intersectSS(const segment &s, const segment &t) {\n\treturn ccw(s[0], s[1], t[0]) * ccw(s[0], s[1], t[1]) <= 0 &&\n\t\tccw(t[0], t[1], s[0]) * ccw(t[0], t[1], s[1]) <= 0;\n}\n//端点の交差hは考えない\nbool strictIntersectSS(const segment &s, const segment &t) {\n\treturn ccw(s[0], s[1], t[0]) * ccw(s[0], s[1], t[1]) == -1 &&\n\t\tccw(t[0], t[1], s[0]) * ccw(t[0], t[1], s[1]) == -1;\n}\n\npoint projection(const segment &l, const point &p) {\n\tdouble t = dot(p - l[0], l[0] - l[1]) / norm(l[0] - l[1]);\n\treturn l[0] + t*(l[0] - l[1]);\n}\npoint reflection(const segment &l, const point &p) {\n\treturn p + 2. * (projection(l, p) - p);\n}\ndouble distanceLP(const segment &l, const point &p) {\n\treturn abs(p - projection(l, p));\n}\ndouble distanceLL(const segment &l, const segment &m) {\n\treturn intersectLL(l, m) ? 0 : distanceLP(l, m[0]);\n}\ndouble distanceLS(const segment &l, const segment &s) {\n\tif (intersectLS(l, s)) return 0;\n\treturn min(distanceLP(l, s[0]), distanceLP(l, s[1]));\n}\ndouble distanceSP(const segment &s, const point &p) {\n\tconst point r = projection(s, p);\n\tif (intersectSP(s, r)) return abs(r - p);\n\treturn min(abs(s[0] - p), abs(s[1] - p));\n}\ndouble distanceSS(const segment &s, const segment &t) {\n\tif (intersectSS(s, t)) return 0;\n\treturn min(min(distanceSP(s, t[0]), distanceSP(s, t[1])),\n\t\tmin(distanceSP(t, s[0]), distanceSP(t, s[1])));\n}\ndouble distancePP(const point &a,const point &b){\n\treturn abs(a-b);\n}\n\n/*多角形内包判定\nhalf-line crossing method\nOUT:0\nON:1\nIN:2\n*/\nint contains(const vector<point>& Poly, const point& p) {\n\tbool in = false;\n\tfor (int i = 0; i < Poly.size(); ++i) {\n\t\tpoint a = curr(Poly, i) - p, b = next(Poly, i) - p;\n\t\tif (a.y > b.y) swap(a, b);\n\t\tif (a.y < EPS && EPS < b.y && cross(a, b) > EPS)in = !in;\n\t\tif (abs(cross(a, b)) < EPS && dot(a, b) < EPS) return 1;\n\t}\n\treturn in ? 2 : 0;\n}\n\n/*\nOUT:0\nON:1\nIN:2\n*/\nint contain_sector(const sector &sec, point &p){\n\tif(eq(abs(p - sec.o), sec.r))return 1;\n\tif(intersectSP(segment(sec.o, sec.a), p))return 1;\n\tif(intersectSP(segment(sec.o, sec.b), p))return 1;\n\tif(abs(p - sec.o) + EPS > sec.r)return 0;\n\tpoint vec = p - sec.o;\n\tpoint vecA = sec.a - sec.o;\n\tpoint vecB = sec.b - sec.o;\n\tif(angle(vec, vecA) + EPS < angle(vecA, vecB) && angle(vec, vecB) + EPS < angle(vecA, vecB))return 2;\n\treturn 0;\n}\n\n//交点\npoint crosspointSS(const segment &l, const segment &m) {\n\tdouble A = cross(l[1] - l[0], m[1] - m[0]);\n\tdouble B = cross(l[1] - l[0], l[1] - m[0]);\n\tif (abs(A) < EPS && abs(B) < EPS) return m[0]; // same line\n\tif (abs(A) < EPS) return point(INF,INF); // !!!PRECONDITION NOT SATISFIED!!!\n\treturn m[0] + B / A * (m[1] - m[0]);\n}\n\nvector<point> crosspointCL(const circle &c, const segment &l) {\n\tauto ret = vector<point>(2, point(INF, INF));\n\tauto pro_p = projection(l, c.p);\n\tauto dist = distanceLP(l, c.p);\n\tif(abs(dist - c.r) < EPS){\n\t\tret[0] = pro_p;\n\t\treturn ret;\n\t}\n\tif(c.r < dist){\n\t\treturn ret;\n\t}\n\tpoint vec = (l[1] - l[0]) * sqrt(c.r * c.r - dist * dist) / abs(l[1] - l[0]);\n\tret[0] = pro_p + vec;\n\tret[1] = pro_p - vec;\n\treturn ret;\n}\n\nvector<point> crosspointCC(const circle c1, const circle c2) {\n\tauto ret = vector<point>(2, point(INF, INF));\n\tauto dist = abs(c2.p - c1.p);\n\tif(eq(dist, c1.r + c2.r) || eq(dist, abs(c2.r - c1.r))){\n\t\tauto tmp = c2.p - c1.p;\n\t\tret[0] = c1.p + tmp * (c1.r / dist);\n\t\treturn ret;\n\t}\n\tif(c1.r + c2.r < dist || dist < abs(c1.r - c2.r)){\n\t\treturn ret;\n\t}\n\tauto alpha = acos((c1.r * c1.r + dist * dist - c2.r * c2.r) / (2 * c1.r * dist));\n\tauto theta = atan2(c2.p.y - c1.p.y, c2.p.x - c1.p.x);\n\tret[0] = c1.p + point(cos(theta + alpha) * c1.r, sin(theta + alpha) * c1.r);\n\tret[1] = c1.p + point(cos(theta - alpha) * c1.r, sin(theta - alpha) * c1.r);\n\treturn ret;\n}\n\nbool isOnSector(const sector sec, const point p) {\n\tpoint vec = p - sec.o;\n\tpoint vecA = sec.a - sec.o;\n\tpoint vecB = sec.b - sec.o;\n\tif(eq(angle(vec, vecA) + angle(vec, vecB), angle(vecA, vecB)))return true;\n\treturn false;\n}\n\nvector<point> crosspointSecS(const sector sec, const segment s) {\n\tcircle c = circle(sec.o, sec.r);\n\tauto ret = crosspointCL(c, s);\n\tpoint inf = point(INF, INF);\n\tREP(i, 2){\n\t\tif(eq(ret[i], inf))continue;\n\t\tif(!isOnSector(sec, ret[i])){\n\t\t\tret[i] = inf;\n\t\t\tcontinue;\n\t\t}\n\t\tif(!intersectSP(s, ret[i])){\n\t\t\tret[i] = inf;\n\t\t}\n\t}\n\treturn ret;\n}\nvector<point> crosspointSecSec(const sector sec1, const sector sec2) {\n\tcircle c1 = circle(sec1.o, sec1.r);\n\tcircle c2 = circle(sec2.o, sec2.r);\n\tauto ret = crosspointCC(c1, c2);\n\tpoint inf = point(INF, INF);\n\tREP(i, 2){\n\t\tif(!isOnSector(sec1, ret[i])){\n\t\t\tret[i] = inf;\n\t\t\tcontinue;\n\t\t}\n\t\tif(!isOnSector(sec2, ret[i])){\n\t\t\tret[i] = inf;\n\t\t}\n\t}\n\treturn ret;\n}\n\n\n//凸包\nvector<point> convex_hull(vector<point> ps) {\n\tint n = ps.size(), k = 0;\n\tsort(ps.begin(), ps.end());\n\tvector<point> ch(2*n);\n\tfor (int i = 0; i < n; ch[k++] = ps[i++]) // lower-hull\n\t\twhile (k >= 2 && ccw(ch[k-2], ch[k-1], ps[i]) == -1) --k;\n\tfor (int i = n-2, t = k+1;i >= 0; ch[k++] = ps[i--]) // upper-hull\n\t\twhile (k >= t && ccw(ch[k-2], ch[k-1], ps[i]) == -1) --k;\n\tch.resize(k - 1);\n\treturn ch;\n}\n\n//見えるか(可視グラフ用)\nbool block_off(const point &a, const point &b, const vector<point> &obj) {\n  point m = (a + b) * 0.5;\n  bool on = false, in = false;\n  for (int j = 0; j < obj.size(); ++j) {\n    point c = curr(obj,j), d = next(obj,j);\n    if (d.y < c.y) swap(c, d);\n    if (cross(a-c,b-c) * cross(a-d,b-d) < 0 &&    // strictly intersect.\n        cross(c-a,d-a) * cross(c-b,d-b) < 0) return true;\n    if (cross(a-c,b-c) == 0 && dot(a-c,b-c) < 0) return true;\n    if (c.y <= m.y && m.y < d.y)  // strictly contain.\n      if (cross(c-m,d-m) < 0) in = !in;\n    if (cross(c-m,d-m) == 0 && dot(c-m,d-m) <= EPS) on = true;\n  }\n  return !on && in;\n}\n\n//面積\ndouble area(const vector<point>& p) {\n\tdouble A = 0;\n\tfor (int i = 0; i < p.size(); ++i)\n\t\tA += cross(curr(p, i), next(p, i));\n\treturn A / 2.;\n}\n\n//凸包判定\nbool isConvex(vector<point> poly){\n\tint sz = poly.size();\n\tREP(i,sz){\n\t\tif(ccw(poly[i],poly[(i+1)%sz],poly[(i+2)%sz]) == -1)return false;\n\t}\n\treturn true;\n}\n\ndouble convex_diameter(const vector<point> &pt) {\n  const int n = pt.size();\n  int is = 0, js = 0;\n  for (int i = 1; i < n; ++i) {\n    if (pt[i].y > pt[is].y) is = i;\n    if (pt[i].y < pt[js].y) js = i;\n  }\n  double maxd = norm(pt[is]-pt[js]);\n\n  int i, maxi, j, maxj;\n  i = maxi = is;\n  j = maxj = js;\n  do {\n    if (cross(diff(pt,i), diff(pt,j)) >= 0) j = (j+1) % n;\n    else i = (i+1) % n;\n    if (norm(pt[i]-pt[j]) > maxd) {\n      maxd = norm(pt[i]-pt[j]);\n      maxi = i; maxj = j;\n    }\n  } while (i != is || j != js);\n  return sqrt(maxd); /* farthest pair is (maxi, maxj). */\n}\n\nvector<point> convex_cut(const vector<point> P, const segment& l) {\n  vector<point> Q;\n  for (int i = 0; i < P.size(); ++i) {\n    point A = curr(P, i), B = next(P, i);\n    if (ccw(l[0], l[1], A) != -1) Q.push_back(A);\n    if (ccw(l[0], l[1], A)*ccw(l[0], l[1], B) < 0)\n      Q.push_back(crosspointSS(segment(A, B), l));\n  }\n  return Q;\n}\n\npoint max_circle_size_in_polygon_check(double mid, vector<point> &v){\n\tll n = v.size();\n\tvector<point> now(v);\n\tREP(i, n){\n\t\tauto a = v[i];\n\t\tauto b = v[(i+1)%n];\n\t\tauto vec = b - a;\n\t\tvec /= abs(vec);\n\t\tvec *= mid;\n\t\tvec = vec * point(0, 1);\n\t\tsegment seg = segment(a + vec, b + vec);\n\t\tnow = convex_cut(now, seg);\n\t}\n\treturn (now.empty() ? point(INF, INF): now[0]);\n}\n\n// 凸多角形に入る最大の円\ncircle max_circle_size_in_polygon(vector<point> &v){\n\tdouble l = 0;\n\tdouble r = convex_diameter(v);\n\tpoint ret;\n\tREP(_, 1000){\n\t\tif(abs(l - r) < EPS)break;\n\t\tdouble mid = (l + r) / 2;\n\t\tret = max_circle_size_in_polygon_check(mid, v);\n\t\tif(ret != point(INF, INF))l = mid;\n\t\telse r = mid;\n\t}\n\treturn circle(ret, l);\n}\n\n//　三角形の外接円\ncircle circumscribed_circle(vector<point> p) {\n\tsegment seg_a = segment((p[1] + p[0]) * 0.5,\n\t(p[1] + p[0]) * 0.5 + (p[1] - p[0]) * point(0, 1));\n\tsegment seg_b = segment((p[2] + p[1]) * 0.5,\n\t(p[2] + p[1]) * 0.5 + (p[2] - p[1]) * point(0, 1));\n\tcircle ret;\n\tret.p = crosspointSS(seg_a, seg_b);\n\tret.r = distancePP(p[0], ret.p);\n\treturn ret;\n}\n\n// ################################### 3D ####################################\n\nstruct point3d {\n\tdouble x, y, z;\n\tpoint3d(double x_, double y_, double z_):x(x_), y(y_), z(z_){}\n\n\tpoint3d& operator+=(point3d a){x += a.x;y += a.y;z += a.z;return *this;}\n\tpoint3d& operator-=(point3d a){x -= a.x;y -= a.y;z -= a.z;return *this;}\n\tpoint3d& operator*=(double a){x *= a;y *= a;z *= a;return *this;}\n\tpoint3d& operator/=(double a){x /= a;y /= a;z /= a;return *this;}\n\tpoint3d operator+(point3d a) const{return point3d(x, y, z)+=a;}\n\tpoint3d operator-(point3d a) const{return point3d(x, y, z)-=a;}\n\tpoint3d operator*(double a) const{return point3d(x, y, z)*=a;}\n\tpoint3d operator/(double a) const{return point3d(x, y, z)/=a;}\n\tbool operator<(point3d a) const{\n\t\treturn (x == a.x ? x < a.x : (y == a.y ? y < a.y : z < a.z));}\n\tbool operator==(point3d a) const{\n\t\treturn (abs(x - a.x) < EPS && abs(y - a.y) < EPS && abs(z - a.z) < EPS);\n\t}\n\tbool operator!=(point3d a) const{return !(*this == a);}\n\n};\n\ndouble abs(point3d p) {\n\treturn sqrt(p.x * p.x + p.y * p.y + p.z * p.z);\n}\n\ndouble dot(point3d a, point3d b){\n\treturn a.x * b.x + a.y * b.y + a.z * b.z;\n}\n\npoint3d cross(point3d a, point3d b){\n\treturn point3d(a.y * b.z - a.z * b.y,\n\t\t\t\t\t\t\t\t a.z * b.x - a.x * b.z,\n\t\t\t\t\t\t\t   a.x * b.y - a.y * b.x);\n}\n\nstruct plane {\n\tdouble a, b, c, d;\n\tplane(double a_, double b_, double c_, double d_):a(a_), b(b_), c(c_), d(d_){}\n\tplane(point3d p1, point3d p2, point3d p3){\n\t\tpoint3d A = p2 - p1;\n\t\tpoint3d B = p3 - p1;\n\t\tpoint3d p = cross(A, B);\n\t\ta = p.x;b = p.y;c = p.z;\n\t\td = -(a * p1.x + b * p1.y + c * p1.z);\n\t}\n};\n\ndouble distance(point3d p, plane pl){\n\tdouble a = abs(p.x * pl.a + p.y * pl.b + p.z * pl.c + pl.d);\n\tdouble b = sqrt(pl.a * pl.a + pl.b * pl.b + pl.c * pl.c);\n\treturn a / b;\n}\n\ndouble distance(plane p, point3d pl){\n\treturn distance(pl, p);\n}\n\npoint3d projection(point3d p, plane pl){\n\tdouble d = distance(p, pl);\n\tpoint3d a = point3d(pl.a, pl.b, pl.c);a /= abs(a);\n\tpoint3d ret = p + a * d;\n\tif(distance(ret, pl) < EPS)return ret;\n\treturn p - a * d;\n}\n\nnamespace std {\n\tostream& operator<<(ostream& os, const point3d& p){\n\t\tos << \"(\" << p.x << \", \" << p.y << \", \" << p.z << \")\";\n\t\treturn os;\n\t}\n\n\tostream& operator<<(ostream& os, const plane& p){\n\t\tos << p.a << \"x + \" << p.b << \"y + \" << p.c << \"z + \" << p.d;\n\t\treturn os;\n\t}\n}\n\n// ################################### 3D ####################################\n\n\nint main(){\n\tcin.tie(0);cout.tie(0);ios::sync_with_stdio(false);\n\n\tdouble x1, x2, y1, y2;cin >> x1 >> y1 >> x2 >> y2;\n\tpoint p1(x1, y1);\n\tpoint p2(x2, y2);\n\n\tint q;cin >> q;\n\tREP(i, q){\n\t\tdouble x, y;cin >> x >> y;\n\t\tpoint p3(x, y);\n\t\tswitch (ccw(p1, p2, p3)) {\n\t\t\tcase -2:cout << \"ONLINE_FRONT\" << endl;break;\n\t\t\tcase -1:cout << \"CLOCKWISE\" << endl;break;\n\t\t\tcase 0:cout << \"ON_SEGMENT\" << endl;break;\n\t\t\tcase 1:cout << \"COUNTER_CLOCKWISE\" << endl;break;\n\t\t\tcase 2:cout << \"ONLINE_BACK\" << endl;break;\n\t\t}\n\t}\n\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<complex>\n#include<array>\n#include<vector>\n#include<cstdio>\nusing namespace std;\n\nconst double EPS = 1e-10;\ntemplate<class T>\nbool eq(const T& a, const T& b) {return abs(a - b) < EPS;}\n\ntypedef  complex<double> point;\n// sort/unique用、setではうまく動かないので使うべからず\nnamespace std {\n\tbool operator==(const point &a, const point &b){\n\t\treturn eq(a, b);\n\t}\n\tbool operator<(const point& a, const point& b) {\n\t\treturn real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n\t}\n}\ndouble cross(const point& a, const point& b) {\n\treturn imag(conj(a)*b);\n}\ndouble dot(const point& a, const point& b) {\n\treturn real(conj(a)*b);\n}\nint ccw(point a, point b, point c) {\n\tb -= a; c -= a;\n\tif (cross(b, c) > 0)   return +1;  // counter clockwise\n\tif (cross(b, c) < 0)   return -1;  // clockwise\n\tif (dot(b, c) < 0)     return +2;  // c--a--b on line\n\tif (norm(b) < norm(c)) return -2;  // a--b--c on line\n\treturn 0;  // a--c--b on line or a----bc\n}\n\nstruct circle {point p; double r;};\ntypedef vector<point> polygon;\ntypedef array<point, 2> line;\n\npoint projection(const line& l, const point& p) {\n\tdouble t = dot(p-l[0], l[0]-l[1]) / norm(l[0]-l[1]);\n\treturn l[0] + t*(l[0]-l[1]);\n}\n\npoint reflection(const line& l, const point& p) {\n\treturn p + 2. * (projection(l, p) - p);\n}\n\nint main()\n{\n  double x0,y0,x1,y1;\n  for(;cin>>x0>>y0>>x1>>y1;)\n    {\n      int n;\n      cin>>n;\n      point p[3];\n      p[0]=point(x0,y0);\n      p[1]=point(x1,y1);\n      const string str[]={\n\t\"ONLINE_BACK\",\n\t\"COUNTER_CLOCKWISE\",\n\t\"ON_SEGMENT\",\n\t\"CLOCKWISE\",\n\t\"ONLINE_FRONT\"\n\n      };\n      for(int i=0;i<n;i++)\n\t{\n\t  double x,y;\n\t  cin>>x>>y;\n\t  p[2]=point(x,y);\n\t  int ans=ccw(p[1],p[0],p[2]);\n\t  cout<<str[ans+2]<<endl;\n\t  //\t  printf(\"%.10lf %.10lf\\n\",ans.real(),ans.imag());\n\t  //\t  cout<<ans.real()<<\" \"<<ans.imag()<<endl;\n\t}\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nconst int dx[]={0,1,0,-1,1,-1,-1,1};\nconst int dy[]={-1,0,1,0,1,1,-1,-1};\nconst int INF = 1<<30;\nconst double EPS = 1e-15;\n#define PB push_back\n#define mk make_pair\n#define fi first\n#define se second\n#define ll long long\n#define reps(i,j,k) for(int i = (j); i < (k); i++)\n#define rep(i,j) reps(i,0,j)\n#define MOD 1000000007\ntypedef pair<int,int> Pii;\ntypedef pair<int,Pii> P;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\nstruct Point{\n\tdouble x,y;\n\tPoint(){}\n\tPoint(double _x,double _y){\n\t\tx = _x;\n\t\ty = _y;\n\t}\n\tPoint operator + (Point p){\n\t\treturn Point(x+p.x,y+p.y);\n\t}\n\n\tPoint operator - (Point p){\n\t\treturn Point(x-p.x,y-p.y);\n\t}\n\n\tPoint operator * (double k){\n\t\treturn Point(k*x,k*y);\n\t}\n\n\n\tbool operator<(const Point &p)const{\n\t\treturn x!=p.x?x<p.x:y<p.y;\n\t}\t\n};\ndouble dot(Point p, Point q){\n\treturn p.x*q.x+p.y*q.y;\n}\n\ndouble cross(Point p,Point q){\n\treturn p.x*q.y-q.x*p.y;\n}\n\ndouble norm(Point p){\n\treturn p.x*p.x+p.y*p.y;\n}\n\ndouble pabs(Point p){\n\treturn sqrt(norm(p));\n}\ntypedef vector<Point> Polygon;\nstruct Line : Polygon{\n\tLine(){}\n\tLine(Point p,Point q){\n\t\tPB(p);\n\t\tPB(q);\t\n\t}\n};\nstruct Circle{\n\tPoint p;\n\tdouble r;\n\tCircle(){}\n\tCircle(Point _p,double _r){\n\t\tp = _p;\n\t\tr = _r;\n\t}\n};\nint ccw(Point a,Point b,Point c){\n\tb = b-a;\n\tc = c-a;\n\tif(cross(b,c) > 0)return +1; //ccw\n\tif(cross(b,c) < 0)return -1; //cw\n\tif(pabs(b)<pabs(c))return +2; //a--b--c\n\tif(dot(b,c) < 0)return -2; // c--a--b;\n\treturn 0;\n}\n\nstring ccw_s(Point a,Point b,Point c){\n\tb = b-a;\n\tc = c-a;\n\tif(cross(b,c) > 0)return \"COUNTER_CLOCKWISE\"; //ccw\n\tif(cross(b,c) < 0)return \"CLOCKWISE\"; //cw\n\tif(dot(b,c) < 0)return \"ONLINE_BACK\"; // c--a--b;\n\tif(norm(b)<norm(c))return \"ONLINE_FRONT\"; //a--b--c\n\treturn \"ONLINE_SEGMENT\";\n}\n\nint main(){\n\tdouble xp0,yp0,xp1,yp1;\n\tcin >> xp0 >> yp0 >> xp1 >> yp1;\n\tPoint p1 = Point(xp0,yp0);\n\tPoint p2 = Point(xp1,yp1);\n\tint Q;\n\tcin >> Q;\n\twhile(Q--){\n\t\tdouble x,y;\n\t\tcin >> x >> y;\n\t\tPoint p3 = Point(x,y);\n\t\tcout << ccw_s(p1,p2,p3) << \"\\n\";\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nstruct cww{cww(){ios::sync_with_stdio(false);cin.tie(0);}}star;\n#define P(x) cout << (x) << \"\\n\"\n#define p(x) cout << (x)\n#define all(c) (c).begin(), (c).end()\n#define rall(c) (c).rbegin(), (c).rend()\n#define vv(type, c, m, n, i) vector<vector<type>> c(m, vector<type>(n, i));\n#define rep(i,a,n) for(int i=(a), i##_len=(n); i<i##_len; ++i)\n#define rrep(i,a,n) for(int i=(a), i##_len=(n); i>i##_len; --i)\n#define len(x) ((int)(x).size())\n#define mp make_pair\n#define eb emplace_back\n#define fi first\n#define se second\ntypedef long long ll;\ntypedef long double ld;\ntypedef vector<int> vi;\ntypedef vector<double> vd;\ntypedef vector<long long> vll;\ntypedef vector<string> vs;\ntypedef vector<bool> vb;\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\nenum CCW { ONLINE_FRONT = -2, CLOCKWISE, ON_SEGMENT, COUNTER_CLOCKWISE, ONLINE_BACK };\nstruct Point {\n\tdouble x, y;\n\tPoint(double x = 0, double y = 0) : x(x), y(y) {}\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (Point p) { return Point(x * p.x, y * p.y); }\n\tPoint operator * (double p) { return Point(x * p, y * p); }\n\tPoint operator / (Point p) { return Point(x / p.x, y / p.y); }\n\tPoint operator / (double p) { return Point(x / p, y / p); }\n\tvoid insert(double a, double b) { x = a; y = b; }\n\tdouble norm() { return x * x + y * y; }\n\tdouble abs() { return sqrt(norm()); }\n\tbool operator < (const Point &p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\tbool operator == (const Point &p) const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\ntypedef Point Vector;\nstruct Segment {\n\tVector p1, p2;\n\tSegment(double x1 = 0.0, double y1 = 0.0, double x2 = 0.0, double y2 = 0.0):\n\t\tp1(x1, y1), p2(x2, y2) {}\n\tSegment(Point a1, Point a2) : p1(a1), p2(a2) {}\n\tvoid insert(Vector a1, Vector a2) { p1 = a1; p2 = a2; }\n};\ntypedef Segment Line;\ninline double dot(Vector a, Vector b) { return a.x * b.x + a.y * b.y; }\ninline double cross(Vector a, Vector b) { return a.x * b.y - a.y * b.x; }\ninline bool isOrthogonal(Vector a, Vector b) { return equals(dot(a, b), 0.0); }\ninline bool isOrthogonal(Vector a1, Vector a2, Vector b1, Vector b2) {\n\treturn isOrthogonal(a1 - a2, b1 - b2);\n}\ninline bool isOrthogonal(Segment s1, Segment s2) {\n\treturn equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\ninline bool isParallel(Vector a, Vector b) { return equals(cross(a, b), 0.0); }\ninline bool isParallel(Vector a1, Vector a2, Vector b1, Vector b2) {\n\treturn isParallel(a1 - a2, b1 - b2);\n}\ninline bool isParallel(Segment s1, Segment s2) {\n\treturn equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / base.norm();\n\treturn s.p1 + base * r;\n}\nPoint reflect(Segment s, Point p) {\n\treturn p + (project(s, p) - p) * 2.0;\n}\nint ccw(Point &p0, Point p1, Point p2) {\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif(cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif(cross(a, b) < -EPS) return CLOCKWISE;\n\tif(dot(a, b) < -EPS) return ONLINE_BACK;\n\tif(a.norm() < b.norm()) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\ninline void ccw_print(int c) {\n\tif(c == COUNTER_CLOCKWISE) P(\"COUNTER_CLOCKWISE\");\n\telse if (c == CLOCKWISE) P(\"CLOCKWISE\");\n\telse if (c == ONLINE_BACK) P(\"ONLINE_BACK\");\n\telse if (c == ONLINE_FRONT) P(\"ONLINE_FRONT\");\n\telse P(\"ON_SEGMENT\");\n}\nbool intersect(Point &p1, Point &p2, Point &p3, Point &p4) {\n\treturn (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n\t\t\tccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\nbool intersect(Segment &s1, Segment &s2) {\n\treturn intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\ndouble getDistance(Point &a, Point &b) { return (a - b).abs(); }\ndouble getDistanceLP(Line &l, Point &p) {\n\treturn abs(cross(l.p2 - l.p1, p - l.p1) / (l.p2 - l.p1).abs());\n}\ndouble getDistanceSP(Segment &s, Point &p) {\n\tif(dot(s.p2 - s.p1, p - s.p1) < 0.0) return (p - s.p1).abs();\n\tif(dot(s.p1 - s.p2, p - s.p2) < 0.0) return (p - s.p2).abs();\n\treturn getDistanceLP(s, p);\n}\ndouble getDistance(Segment &s1, Segment &s2) {\n\tif(intersect(s1, s2)) return 0.0;\n\treturn min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n\t\t\t\tmin(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\nint main() {\n\tcout << setprecision(10) << fixed;\n\tPoint p0, p1, p2; cin >> p0.x >> p0.y >> p1.x >> p1.y;\n\tint q; cin >> q;\n\trep(i, 0, q) {\n\t\tcin >> p2.x >> p2.y;\n\t\tccw_print(ccw(p0, p1, p2));\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\n#include <cmath>\n#include <iomanip>\n\n\nusing namespace std;\n\n//-------------------------------------------------------------------------------------\n/*2点[(x1,y1),(x2,y2)]を入力し二点を通る直線ax+by+cの(a,b,c)を返す,  */\n/*x1==x2ならfalseを返す*/\n/*falseならばx=cの形の直線*/\nvoid straight_line_passing_through_the_two_points(double x1, double y1, double x2, double y2, double *a, double *b, double *c){\n    *a=(y2-y1);\n    *b=-(x2-x1);\n    *c=y2*(x2-x1)-x2*(y2-y1);\n}\n\n//-------------------------------------------------------------------------------------\n/*(x,y)を通るa1x+b1y+c1=0に垂直な直線a2x+b2y+c2=0を返す*/\nvoid vertical_straight_line(double x, double y, double a1, double b1, double c1, double *a2, double *b2, double *c2){\n    *a2 = -b1;\n    *b2 = a1;\n    *c2 = b1*x - a1*y;\n}\n\n\n//-------------------------------------------------------------------------------------\n/*2直線 a1x+b1y+c1=0 a2x+b2y+c2=0 の交点 (x,y)を返す*/\n/*2直線が平行であるならばfalseを返す*/\n\nbool intersection_and_parallel(double a1, double b1, double c1, double a2, double b2, double c2, double *x, double *y){\n    if(a1*b2==a2*b1)return false;//平行の判定\n    \n    *x = (b1*c2-b2*c1)/(a1*b2-a2*b1);\n    *y = (a2*c1-a1*c2)/(a1*b2-a2*b1);\n    \n    return true;\n}\n\n\n//-------------------------------------------------------------------------------------\n/*直線ax+by+c=0に対し　(x1,y1)と線対称な位置(x2,y2)を出力*/\n/*vertical_straight_lineを使用*/\n/*intersection_and_parallelを使用*/\nvoid line_symmetry(double a, double b, double c, double x1, double y1, double *x2, double *y2){\n    //垂直な直線を求める\n    double a2,b2,c2;\n    vertical_straight_line(x1, y1, a, b, c, &a2, &b2, &c2);\n    \n    //垂直な直線との交点を求める\n    double c_x, c_y;\n    intersection_and_parallel(a, b, c, a2, b2, c2, &c_x, &c_y);\n    *x2 = x1 + 2*(c_x-x1);\n    *y2 = y1 + 2*(c_y-y1);\n}\n\n\n\n//-------------------------------------------------------------------------------------\n/*2点(x1,y1), (x2,y2) の距離*/\ndouble distance_between_the_two_pointss(double x1,double y1, double x2, double y2){\n    return  sqrt(fabs((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)));\n}\n\n\n//-------------------------------------------------------------------------------------\n/* (x1,y1)から(x2,y2)へ伸ばした直線の角度を求める  */\ndouble angle_of_the_line(double x1, double y1, double x2, double y2){\n    return atan2(y2-y1, x2-x1);\n}\n\n\n\nint main(int argc, const char * argv[]){\n    double x0,y0,x1,y1,x2,y2;\n    cin>>x0>>y0>>x1>>y1;\n    \n    double angle1 = angle_of_the_line(x0,y0,x1,y1);\n    \n    int q;\n    cin>>q;\n    for(int i=0; i<q; i++){\n        cin>>x2>>y2;\n        double angle2 = angle_of_the_line(x0,y0,x2,y2);\n        \n        double angle = angle2-angle1;\n        \n        if(angle<0)angle+=2*M_PI;\n        if(x2==0&&y2==0)cout<<\"ON_SEGMENT\"<<endl;\n        else if(angle==0||angle==2*M_PI){\n            double l1=distance_between_the_two_pointss(x0, y0, x1, y1);\n            double l2=distance_between_the_two_pointss(x0, y0, x2, y2);\n            if(l1>=l2)cout<<\"ON_SEGMENT\"<<endl;\n            else cout<<\"ONLINE_FRONT\"<<endl;\n        }else if(angle == M_PI)cout<<\"ONLINE_BACK\"<<endl;\n        else if(angle<M_PI)cout<<\"COUNTER_CLOCKWISE\"<<endl;\n        else cout<<\"CLOCKWISE\"<<endl;\n        \n        \n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<cstdlib>\n#include<cmath>\n#include<iostream>\n#include<vector>\n#include<algorithm>\n\nusing namespace std;\n\nint main()\n{\n\tdouble p1x, p1y, p2x, p2y, p0x, p0y;\n\tint q;\n\n\tscanf_s(\"%lf %lf %lf %lf\", &p0x, &p0y, &p1x, &p1y);\n\n\tpair<double, double> v01 = { p1x - p0x, p1y - p0y };\n\n\n\tscanf_s(\"%d\", &q);\n\n\tfor (int i = 0; i < q; i++)\n\t{\n\t\tscanf_s(\"%lf %lf\", &p2x, &p2y);\n\n\t\tif ((p2x == p0x && p2y == p0y) || (p2x == p1x && p2y == p0y)){\n\t\t\tprintf(\"ONLINE_SEGMENT\\n\");\n\n\t\t\tcontinue;\n\t\t}\n\n\t\tpair<double, double> v02 = { p2x - p0x, p2y - p0x };\n\n\t\tif (v01.first*v02.second == v01.second*v02.first)\n\t\t{\n\t\t\tif (v01.first*v02.first < 0)\n\t\t\t{\n\t\t\t\tprintf(\"ONLINE_BACK\\n\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tabs(v01.first) < abs(v02.first) ? printf(\"ONLINE_FRONT\\n\") : printf(\"ONLINE_SEGMENT\\n\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\n\t\tdouble y01 = (v01.second / v01.first)*(p2x - p0x) + p0y;\n\t\ty01 < p2y ? printf(\"COUNTER_CLOCKWISE\\n\") : printf(\"CLOCKWISE\\n\");\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include <cmath>\n#include <iomanip>\n\nusing namespace std;\n\ntypedef struct point{\n    double x,y;\n}Point,Vector;\n\ntypedef struct line{\n    Point x;\n    Vector k;\n}Line;\n\n//点积\ndouble dot(Vector x,Vector y){\n    return x.x*y.x+x.y*y.y;\n}\n\n//叉积\ndouble cross(Vector x,Vector y){\n    return x.x*y.y-x.y*y.x;\n}\n\ndouble getlen(Vector x){\n    return sqrt(dot(x,x));\n}\n\nVector getV(Point x,Point y){\n    Vector v;\n    v.x=y.x-x.x;\n    v.y=y.y-x.y;\n    return v;\n}\n//点在直线的投影\nPoint Projection(Line x,Point y){\n    Point answ;\n    answ = x.x;\n\n    double len = dot(x.k,getV(x.x,y));\n    len/=sqrt(x.k.x*x.k.x+x.k.y*x.k.y);\n    Vector temp  = x.k;\n    temp.x /=sqrt(x.k.x*x.k.x+x.k.y*x.k.y);\n    temp.y/=sqrt(x.k.x*x.k.x+x.k.y*x.k.y);\n    answ.x+=temp.x*len;\n    answ.y+=temp.y*len;\n    return answ;\n}\n//点与直线的对称点\nPoint Reflection(Line x,Point y){\n    Point half = Projection(x,y);\n    Point answ;\n    answ.x=y.x+2*(half.x-y.x);\n    answ.y=y.y+2*(half.y-y.y);\n    return answ;\n}\n\nint main(){\n    Point p0,p1;\n    cin>>p0.x>>p0.y>>p1.x>>p1.y;\n    Vector v1=getV(p0,p1);\n    int t;\n    cin>>t;\n    Vector v2;\n    while(t--){\n        cin>>p1.x>>p1.y;\n        v2=getV(p0,p1);\n        double temp = cross(v1,v2);\n        if(temp==0){\n            if(dot(v1,v2)<0){\n                cout<<\"ONLINE_BACK\"<<endl;\n            }\n            else if(getlen(v1)>=getlen(v2)){\n                cout<<\"ON_SEGMENT\"<<endl;\n            }\n            else cout<<\"ONLINE_FRONT\"<<endl;\n        }\n        else if(temp<0){\n            cout<<\"CLOCKWISE\"<<endl;\n        }\n        else cout<<\"COUNTER_CLOCKWISE\"<<endl;\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <complex>\n#include <string>\n#define x real() \n#define y imag() \nusing namespace std;\ntypedef complex <double> point;\ntypedef complex<double> vectol;\n\ndouble dot(point a,point b){\n  return a.x*b.x+a.y*b.y;\n}\n\ndouble cross(point a,point b){\n  return a.x*b.y-a.y*b.x;\n}\n\nstring ccw(point a,point b,point c){\n  point d = b-a;\n  point e = c-a;\n  if(cross(d,e)>0) return \"COUNTER_CLOCKWISE\";\n  if(cross(d,e)<0) return \"CLOCKWISE\";\n  if(dot(d,e)<0) return \"ONLINE_BACK\";\n  if(abs(d) < abs(e)) return \"ONLINE_FRONT\";\n  return \"ON_SEGMENT\";\n}\n\nint main() {\n  double x0,y0,x1,y1;\n  cin>>x0>>y0>>x1>>y1;\n  point a = point( x0, y0);\n  point b = point( x1, y1);\n  int n;\n  cin >> n;\n  for(int i=0;i<n;i++){\n    cin >> x0 >> y0;\n    cout << ccw(a,b,point(x0,y0)) <<endl;\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\nconst int mod = 1e9 + 7;\nconst int inf = (1 << 30) - 1;\nconst ll infll = (1LL << 61) - 1;\n\nusing Real = double;\nusing Point = complex<Real>;\nconst Real Pi = acos(-1), EPS = 1e-9;\ninline bool eq(Real a, Real b) { return fabs(a - b) < EPS; }\n\n//scalar\nPoint operator*(const Point &p, const Real &c)\n{\n    return Point(c * real(p), c * imag(p));\n}\n\n//add\nPoint operator+(const Point &p, const Point &q)\n{\n    return Point(real(p) + real(q), imag(p) + imag(q));\n}\n\nPoint operator-(const Point &p, const Point &q)\n{\n    return Point(real(p) - real(q), imag(p) - imag(q));\n}\n//equal\nbool operator==(const Point &p, const Point &q)\n{\n    return (real(p) == real(q)) && (imag(p) == imag(q));\n}\n\nReal radian_to_degree(Real r)\n{\n    return (r * 180.0 / Pi);\n}\n\nReal degree_to_radian(Real d)\n{\n    return (d * Pi / 180.0);\n}\n\n//rotate\nPoint rot(Real theta, const Point &p)\n{\n    return Point(cos(theta) * p.real() - sin(theta) * p.imag(), sin(theta) * p.real() + cos(theta) * p.imag());\n}\n\n//norm\nReal norm(Point const &p)\n{\n    return (real(p) * real(p) + imag(p) * imag(p));\n}\n\n//argumant [0, 2 * Pi)\nReal arg(Point const &p)\n{\n    Real a = atan2(imag(p), real(p));\n    if (a < 0)\n        a = fabs(a) + Pi;\n    return a;\n}\n\n//input\nistream &operator>>(istream &is, Point &p)\n{\n    Real a, b;\n    is >> a >> b;\n    p = Point(a, b);\n    return is;\n}\n\n//output\nostream &operator<<(ostream &os, Point &p)\n{\n    os << fixed << setprecision(10) << p.real() << \" \" << p.imag();\n}\n\n// a line given two points\nstruct Line\n{\n    Point a, b;\n    Line() = default;\n\n    Line(Point a, Point b) : a(a), b(b) {}\n\n    // Ax + By = C\n    Line(Real A, Real B, Real C)\n    {\n        if (eq(A, 0))\n            a = Point(0, C / B), b = Point(1, C / B);\n        else if (eq(B, 0))\n            b = Point(C / A, 0), b = Point(C / A, 1);\n        else\n            a = Point(0, C / B), b = Point(C / A, 0);\n    }\n\n    friend istream &operator>>(istream &is, Line &a)\n    {\n        return is >> a.a >> a.b;\n    }\n\n    friend ostream &operator<<(ostream &os, Line &p)\n    {\n        return os << p.a << \" to \" << p.b;\n    }\n};\n\nusing Points = vector<Point>;\nusing Polygon = vector<Point>;\nusing Lines = vector<Line>;\n\nReal dot(const Point &p, const Point &q)\n{\n    return (real(p) * real(q) + imag(p) * imag(q));\n}\n\n// regard z - component is zero\nReal cross(const Point &p, const Point &q)\n{\n    return real(p) * imag(q) - imag(p) * real(q);\n}\n\n//For given three points p1,p2,p, find the projection point x of p onto p1p2.\nPoint projection(const Line &l, const Point &p)\n{\n    double t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b); // direction vector\n    return l.a + (l.a - l.b) * t;\n}\n\n//For given three points p1,p2,p, find the reflection point x of p onto p1p2.\nPoint reflection(const Line &l, const Point &p)\n{\n    return p + (projection(l, p) - p) * 2.0;\n}\n\n// a is standard\nint Counter_Clockwise(const Point &a, Point b, Point c)\n{\n    b = b - a, c = c - a;\n    if (cross(b, c) > 0)\n        return +1; // counter clockwise\n    if (cross(b, c) < 0)\n        return -1; // clockwise\n    if (dot(b, c) < 0)\n        return +2; // c--a--b on line\n    if (norm(b) < norm(c))\n        return -2; // a--b--c on line\n    return 0;      // c on segment a-b\n}\n\nint main()\n{\n    Point A, B;\n    cin >> A >> B;\n    int q;\n    cin >> q;\n    for (int i = 0; i < q; i++)\n    {\n        Point X;\n        cin >> X;\n        int ccw = Counter_Clockwise(A, B, X);\n        if (ccw == 1)\n            cout << \"COUNTER_CLOCKWISE\\n\";\n        else if (ccw == -1)\n            cout << \"CLOCKWISE\\n\";\n        else if (ccw == 2)\n            cout << \"ONLINE_BACK\\n\";\n        else if (ccw == -2)\n            cout << \"ONLINE_FRONT\\n\";\n        else\n            cout << \"ON_SEGMENT\\n\";\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <complex>\nusing namespace std;\n\ntypedef complex<long long> point;\n\nlong double dot(point a,point b){\n\t// return (a*conj(b)).real();\n\treturn a.real()*b.real()+a.imag()*b.imag();\n}\n\nlong double cross(point a,point b){\n\t// return (a*conj(b)).imag();\n\treturn a.real()*b.imag()-a.imag()*b.real();\n}\n\nint main(void){\n\tdouble x,y;\n\tint q;\n\tcin>>x>>y;\n\tpoint p0(x,y);\n\tcin>>x>>y;\n\tpoint p1(x,y);\n\tpoint p0p1=p1-p0;\n\tcin>>q;\n\twhile(q--){\n\t\tcin>>x>>y;\n\t\tpoint p2(x,y);\n\t\tpoint p0p2=p2-p0;\n\t\tif(cross(p0p1,p0p2)>0)cout<<\"COUNTER_CLOCKWISE\"<<endl;\n\t\telse if(cross(p0p1,p0p2)<0)cout<<\"CLOCKWISE\"<<endl;\n\t\telse if(dot(p0p1,p0p2)<0)cout<<\"ONLINE_BACK\"<<endl;\n\t\telse if(norm(p0p1)<norm(p0p2))cout<<\"ONLINE_FRONT\"<<endl;\n\t\telse cout<<\"ON_SEGMENT\"<<endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "/**\n * Computing Geometry Library\n * @author Sshwy\n */\n#include<bits/stdc++.h>\nusing namespace std;\n#define pb push_back\n#define FOR(i,a,b) for(int i=(a);i<=(b);++i)\n#define ROF(i,a,b) for(int i=(a);i>=(b);--i)\n\nnamespace cg{\n    typedef long double vtyp;\n    const vtyp eps = 1e-9;\n    bool isZero(vtyp x){ return -eps < x && x < eps; }\n    bool equal(vtyp x, vtyp y){ return isZero(x-y); }\n    bool lt(vtyp x,vtyp y){ return !equal(x,y) && x<y; }\n    bool gt(vtyp x,vtyp y){ return !equal(x,y) && x>y; }\n    struct vec {\n        vtyp x,y;\n        vec(){ x = y = 0; }\n        vec(vtyp _x, vtyp _y){ x = _x, y = _y; }\n        vec operator+(const vec V) const { return vec(x+V.x, y+V.y); }\n        vec operator-() const { return vec(-x, -y); }\n        vec operator-(const vec V) const { return *this + (-V); }\n        vec operator*(const vtyp a) const { return vec(x*a, y*a); }\n        friend vec operator*(const vtyp a, const vec v){ return v*a; }\n        operator bool() const { return !(isZero(x) && isZero(y)); }\n        bool operator==(const vec V) const { return bool(*this-V) == 0; }\n        vtyp length(){ return sqrt(x*x + y*y); }\n        /**\n         * 方向角，单位 rad\n         */\n        vtyp ang() const { return atan2(y,x); }\n        /**\n         * 方向向量\n         * @return 0向量或者一个单位向量\n         */\n        vec dir() const {\n            if(*this){\n                vtyp ang = atan2(y,x);\n                return vec(cos(ang), sin(ang));\n            } else return vec(0,0);\n        }\n        void read(){ scanf(\"%Lf%Lf\",&x,&y); }\n    };\n    typedef vec point;\n\n    struct line {\n        point p1, p2;\n        line(point _p1, point _p2){ p1 = _p1, p2 = _p2; }\n    };\n    typedef line segment;\n\n    istream & operator>>(istream & in, vec & v){ \n        return in >> v.x >> v.y, in; \n    }\n    ostream & operator<<(ostream & out, const vec & v){ \n        return out << v.x << \" \" << v.y, out;\n    }\n    ifstream & operator>>(ifstream & in, vec & v){ \n        return in >> v.x >> v.y, in; \n    }\n    ofstream & operator<<(ofstream & out, const vec & v){ \n        return out << v.x << \" \" << v.y, out;\n    }\n    /**\n     * 点积\n     * a dot b == |a||b|cos theta\n     */\n    vtyp dot(const vec a, const vec b){ return a.x*b.x + a.y*b.y; }\n    /**\n     * 叉积\n     * 两个向量围成的有向面积\n     */\n    vtyp det(const vec a, const vec b){ return a.x*b.y - a.y*b.x; }\n\n\n    /**\n     * 投影\n     * @param L 直线\n     * @param p 要求投影的点\n     * @return p 在 L 上的投影坐标（即垂足）\n     */\n    point projection(line L, point p){\n        vec d = L.p2 - L.p1;\n        return L.p1 + (dot(d, p-L.p1)/d.length()) * d.dir();\n    }\n    /**\n     * 对称点\n     * @param L 直线\n     * @param p 点\n     * @return p 关于直线 L 的对称点\n     */\n    point reflection(line L, point p){\n        point o = projection(L,p);\n        return vtyp(2)*(o-p)+p;\n    }\n\n    /**\n     * 判断向量是否平行\n     */\n    bool parallel(vec a, vec b){\n        return equal(a.x*b.y, a.y*b.x);\n    }\n    /**\n     * 判断点 p 是否在直线L上\n     */\n    bool online(line L, point p){\n        return parallel(L.p2-L.p1,p-L.p1);\n    }\n    /**\n     * 判断点 p 是否与有向线段共线且在反向延长线上\n     */\n    bool online_back(segment sl, point p){\n        vec a = sl.p2-sl.p1, b = p-sl.p1;\n        return parallel(a,b) && lt(dot(a,b),0);\n    }\n    /**\n     * 判断点 p 是否与有向线段共线且在正向延长线上\n     */\n    bool online_front(segment sl, point p){\n        vec a = sl.p1-sl.p2, b = p-sl.p2; // 倒过来\n        return parallel(a,b) && lt(dot(a,b),0);\n    }\n    /**\n     * 判断点 p 是否在线段上（含端点）\n     */\n    bool on_segment(segment sl, point p){\n        return online(sl,p) && !online_back(sl,p) && !online_front(sl,p);\n    }\n}\n\n\nint main(){\n    cg::point p1,p2,p;\n    int q;\n    cin>>p1>>p2>>q;\n    cg::segment l(p1,p2);\n    FOR(i,1,q){\n        cin>>p;\n        if(cg::online_back(l,p))cout<<\"ONLINE_BACK\"<<endl;\n        else if(cg::online_front(l,p))cout<<\"ONLINE_FRONT\"<<endl;\n        else if(cg::on_segment(l,p))cout<<\"ON_SEGMENT\"<<endl;\n        else if(det(p2-p1,p-p1)>0)cout<<\"COUNTER_CLOCKWISE\"<<endl;\n        else cout<<\"CLOCKWISE\"<<endl;\n        // cout<<setiosflags(ios::fixed) <<setprecision(10)\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <algorithm>\n#include <cstdio>\n#include <vector>\n#include <queue>\n#include <set>\n#include <map>\n#include <numeric>\n#include <cmath>\n\nusing namespace std;\n\ntypedef long long int ll;\ntypedef pair<double,double> P;\n\n#define all(x) x.begin(),x.end()\n\nconst ll mod = 1e9+7;\nconst ll INF = 1e9;\nconst ll MAXN = 1e9;\n\ndouble cross(P p,P q){\n    return p.first*q.second-p.second*q.first;\n}\n\ndouble dot(P p,P q){\n    return p.first*q.first+p.second*q.second;\n}\n\ndouble norm(P p){\n    return sqrt(pow(p.first,2)+pow(p.second,2));\n}\n\nint ccw(P p0,P p1,P p2){\n    p1.first -= p0.first;\n    p1.second -= p0.second;\n    p2.first -= p0.first;\n    p2.second -= p0.second;\n\n    if(cross(p1,p2) > 0) return 1; // counter_clockwise\n    if(cross(p1,p2) < 0) return -1; // clockwise\n    if(dot(p1,p2)<0) return 2 ;//on_line back\n    if(norm(p1)<norm(p2)) return -2; //on_line front\n    return 3; // on_segment\n}\n\nint main()\n{\n    P p0,p1;\n    cin >> p0.first >> p0.second >> p1.first >> p1.second;\n    int q;\n    cin >> q;\n    for(int i = 0; i < q; i++){\n        P p2;\n        cin >> p2.first >> p2.second;\n        int res = ccw(p0,p1,p2);\n        string ans;\n        if(res==1) ans = \"COUNTER_CLOCKWISE\";\n        if(res==-1) ans = \"CLOCKWISE\";\n        if(res==2) ans = \"ONLINE_BACK\";\n        if(res==-2) ans = \"ONLINE_FRONT\";\n        if(res==3) ans = \"ON_SEGMENT\";\n\n        cout << ans << endl;\n    }\n\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <cstring>\n#include <cstdio>\n#include <queue>\n#include <vector>\n#include <cmath>\n#include <map>\n#include <stack>\n#include <algorithm>\ntypedef long long int ll;\nusing namespace std;\nconst int MAX=5000+10;\nconst double eps=1e-9;\nconst double PI=acos(-1.0);\n\nint sgn(double x)\n{\n    if (fabs(x)<eps) {\n        return 0;\n    }\n    if (x<0) {\n        return -1;\n    }\n    else return 1;\n}\nstruct point\n{\n    double x,y;\n    point(){}\n    point(double _x,double _y)\n    {\n        x=_x;y=_y;\n    }\n    point operator +(const point &b)const\n    {\n        return point(x+b.x,y+b.y);\n    }\n    point operator -(const point &b)const\n    {\n        return point(x-b.x,y-b.y);\n    }\n    double operator ^(const point &b)const\n    {\n        return x*b.y-y*b.x;\n    }\n    double operator *(const point &b)const\n    {\n        return x*b.x+y*b.y;\n    }\n    point operator *(const double k)const\n    {\n        point kk;kk.x=k*x;kk.y=k*y;return kk;\n    }\n    double len(void)\n    {\n        return sqrt(x*x+y*y);\n    }\n};\nint main(){\n    //freopen(\"/Users/mac/Desktop/C++?¨????/test/test.txt\", \"r\", stdin);\n    int q;\n    point p1,p2,p0;\n    scanf(\"%lf%lf%lf%lf\",&p0.x,&p0.y,&p1.x,&p1.y);\n    scanf(\"%d\",&q);\n    while(q--){\n        scanf(\"%lf%lf\",&p2.x,&p2.y);\n        point p01=p1-p0;\n        point p02=p2-p0;\n        if (sgn(p01^p02)==1) {\n            printf(\"COUNTER_CLOCKWISE\\n\");\n        }\n        else if (sgn(p01^p02)==-1){\n            printf(\"CLOCKWISE\\n\");\n        }\n        else{\n            if (sgn(p01*p02)==-1) {\n                printf(\"ONLINE_BACK\\n\");\n            }\n            else if (p01.len()<p02.len()) {\n                printf(\"ONLINE_FRONT\\n\");\n            }\n            else{\n                printf(\"ON_SEGMENT\\n\");\n            }\n        }\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <complex>\n#include <map>\n#include <set>\n#include <vector>\n#include <stack>\n#include <queue>\n#include <bitset>\n#include <algorithm>\n#include <numeric>\n#include <functional>\nusing namespace std;\n\n#define Rep(b, e, i) for(int i = b; i <= e; i++)\n#define Repr(e, b, i) for(int i = e; i >= b; i--)\n#define rep(n, i) Rep(0, n-1, i)\n#define repr(n, i) Repr(n-1, 0, i)\n#define all(v) (v).begin(), (v).end()\n#define pb(v) push_back(v)\n#define uniq(v) (v).erase(unique(all(v)),(v).end())\n#define bitcnt(x) __builtin_popcount(x)\n#define fst first\n#define snd second\n#define Pqaz(T) priority_queue<T,vector<T>,greater<T>>\n#define Pqza(T) priority_queue<T>\n#define put(x) cout << x;\n#define puts(x) cout << x << ' ';\n#define putln(x) cout << x << endl;\n#define ENJYU std::ios::sync_with_stdio(false);std::cin.tie(0);\n\nconst double EPS = 1e-12;\ntypedef complex<double> comp;\n\nvoid solve(void){\n\n\tint x1, y1, x2, y2, Q;\n\tcin >> x1 >> y1 >> x2 >> y2 >> Q;\n\n\tcomp o(x1, y1), p(x2-x1, y2-y1), r;\n\n\t//回転用\n\tr = polar(1.0, arg(p));\n\n\twhile(Q--)\n\t{\n\t\tint x3, y3;\n\t\tcin >> x3 >> y3;\n\n\t\tcomp q(x3-x1, y3-y1);\n\n\t\tq /= r;\n\n\t\tprintf(\"%.12lf %.12lf\\n\", norm(p), norm(q));\n\n\t\tif (abs(arg(q)) < EPS)\n\t\t{\n\t\t\tif (norm(p) >= norm(q) - 1e-6)\n\t\t\t{\n\t\t\t\tputln(\"ON_SEGMENT\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tputln(\"ONLINE_FRONT\");\n\t\t\t}\n\t\t}\n\t\telse if (abs(abs(arg(q))-M_PI) < EPS)\n\t\t{\n\t\t\tputln(\"ONLINE_BACK\");\n\t\t}\n\t\telse if (arg(q) > 0)\n\t\t{\n\t\t\tputln(\"COUNTER_CLOCKWISE\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tputln(\"CLOCKWISE\");\n\t\t}\n\t}\n}\n\nint main(void){\n\tsolve();\n\t//cout << \"yui(*-v・)yui\" << endl;\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define ll long long\nusing namespace std;\nstruct node\n{\n    int x,y;\n    node operator -(const node &nd)const\n    {\n        return {x-nd.x,y-nd.y};\n    }\n    ll operator *(const node &nd)const\n    {\n        return 1LL*x*nd.x+1LL*y*nd.y;\n    }\n    ll mo()\n    {\n        return 1LL*x*x+1LL*y*y;\n    }\n};\nll X(node aa,node bb)\n{\n    return 1LL*aa.x*bb.y-1LL*aa.y*bb.x;\n}\nint main()\n{\n    node p0,p1;\n    while(~scanf(\"%d%d%d%d\",&p0.x,&p0.y,&p1.x,&p1.y))\n    {\n        int q;\n        scanf(\"%d\",&q);\n        node p2;\n        node xx=p1-p0;\n        while(q--)\n        {\n            scanf(\"%d%d\",&p2.x,&p2.y);\n            node yy=p2-p0;\n            ll t=X(xx,yy);\n            if(t>0)\n            {\n                puts(\"COUNTER_CLOCKWISE\");\n            }\n            else if (t<0)\n            {\n                puts(\"CLOCKWISE\");\n            }\n            else\n            {\n                ll f=xx*yy;\n                if(f<0)\n                {\n                    puts(\"ONLINE_BACK\");\n                }\n                else\n                {\n                    if(xx.mo() < yy.mo())\n                    {\n                        puts(\"ONLINE_FRONT\");\n                    }\n                    else\n                    {\n                        puts(\"ON_SEGMENT\");\n                    }\n\n                }\n\n            }\n        }\n\n\n\n    }\n\n\n    return 0;\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\n#define NIL -2\n#define INF 1000000001\n#define EPS 1e-10\n#define equals(a,b) (fabs((a) - (b)) < EPS)\n\nusing namespace std;\nclass Point{\n    public:\n    double x,y;\n\n    Point(double x = 0,double y = 0): x(x), y(y) {}\n\n    Point operator + (Point p){ return Point(x+p.x, y+p.y); }\n    Point operator - (Point p){ return Point(x-p.x, y-p.y); }\n    Point operator * (double k){ return Point(x*k,y*k);     }\n    Point operator / (double k){ return Point(x/k,y/k);     }\n\n    double norm(){ return x*x + y*y;}\n    double abs(){ return sqrt(norm());}\n    double dot(Point p){\n        return x*p.x + y*p.y;\n    }\n    double prod(Point p){\n        return x*p.y - y*p.x;\n    }\n\n    bool operator < (Point &p){\n        return x != p.x ? x < p.x : y < p.y;\n    }\n    bool operator == (Point &p){\n        return fabs(x-p.x) < EPS && fabs(y-p.y) < EPS;\n    }\n  \n};\ntypedef Point Vector;\n\nint main(){\n    double p0x,p0y,p1x,p1y;\n    double p2x,p2y;\n    int q;\n    scanf(\"%lf %lf %lf %lf\",&p0x,&p0y,&p1x,&p1y);\n    Vector p10(p1x-p0x,p1y-p0y);\n    \n    scanf(\"%d\",&q);\n    for(int i = 0;i < q;i++){\n        scanf(\"%lf %lf\",&p2x,&p2y);\n        Vector p20(p2x-p0x,p2y-p0y);\n        double prod = p10.prod(p20);\n        if( prod > 0) printf(\"COUNTER_CLOCKWISE\\n\");\n        else if(prod < 0) printf(\"CLOCKWISE\\n\");\n        else {\n            if(p10.dot(p20) < 0) printf(\"ONLINE_BACK\\n\");\n            else{\n                if(p10.abs() < p20.abs()) printf(\"ONLINE_FRONT\\n\");\n                else printf(\"ON_SEGMENT\\n\"); \n            }\n        }\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define fi first\n#define se second\n#define repl(i,a,b) for(int i=(int)(a);i<(int)(b);i++)\n#define rep(i,n) repl(i,0,n)\n#define each(itr,v) for(auto itr:v)\n#define pb(s) push_back(s)\n#define mp(a,b) make_pair(a,b)\n#define all(x) (x).begin(),(x).end()\n#define dbg(x) cout<<#x\"=\"<<x<<endl\n#define maxch(x,y) x=max(x,y)\n#define minch(x,y) x=min(x,y)\n#define uni(x) x.erase(unique(all(x)),x.end())\n#define exist(x,y) (find(all(x),y)!=x.end())\n#define bcnt(x) bitset<32>(x).count()\n\n#define x(p) real(p)\n#define y(p) imag(p)\n\nconst double eps=1e-10;\nconst double inf=1e12;\ntypedef complex<double> P;\n\nnamespace std{\n  bool operator<(const P& a,const P& b){\n    return x(a)==x(b)?y(a)<y(b):x(a)<x(b);\n  }\n}\ndouble cross(const P& a,const P& b){\n  return y(conj(a)*b);\n}\ndouble dot(const P& a,const P& b){\n  return x(conj(a)*b);\n}\nstruct L : public vector<P> { // line and segment\n  L(const P& a,const P &b){\n    push_back(a);\n    push_back(b);\n  }\n};\n\nP projection(const L& l,const P& p){\n  P b=l[1]-l[0],c=p-l[0];\n  return l[0]+b*x(c/b);\n}\nP reflection(const L& l,const P& p){\n  return p+2.0*(projection(l,p)-p);\n}\n//// counter-clockwise\nint ccw(P a,P b,P c) {\n  b=b-a;c=c-a;\n  if(cross(b,c)>0) return +1;       // counter clockwise\n  if(cross(b,c)<0) return -1;       // clockwise\n  if(dot(b,c)<0)   return +2;       // c--a--b on line\n  if(norm(b)<norm(c)) return -2;       // a--b--c on line\n  return 0;\n}\n\nstring s[]={\"ONLINE_FRONT\",\"CLOCKWISE\",\"ON_SEGMENT\",\"COUNTER_CLOCKWISE\",\"ONLINE_BACK\"};\n\nint main(){\n\tcin.sync_with_stdio(false);\n  int q;\n  double x1,x2,x3,y1,y2,y3;\n  cin>>x1>>y1>>x2>>y2;\n  cin>>q;\n  rep(i,q){\n    cin>>x3>>y3;\n    int res=ccw(P(x1,y1),P(x2,y2),P(x3,y3));\n    cout<<s[res+2]<<endl;\n  }\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\n#include <sys/timeb.h>\n#include <fstream>\n\nusing namespace std;\n\n#define repl(i,a,b) for(int i=(int)(a);i<(int)(b);i++)\n#define rep(i,n) repl(i,0,n)\n#define replrev(i,a,b) for(int i=(int)(b)-1;i>=(int)(a);i--)\n#define reprev(i,n) replrev(i,0,n)\n#define repi(itr,ds) for(auto itr=ds.begin();itr!=ds.end();itr++)\n#define all(a) a.begin(),a.end()\n#define mp make_pair\n#define mt make_tuple\n#define INF 2000000000\n#define INFL 1000000000000000000LL\n#define EPS (1e-10)\n#define MOD 1000000007\n#define PI 3.1415926536\n#define RMAX 4294967295\n\ntypedef long long ll;\ntypedef pair<int, int> P;\ntypedef vector<int> vi;\ntypedef vector<ll> vll;\ntypedef vector<bool> vb;\ntypedef vector<char> vc;\ntypedef vector<string> vs;\ntypedef vector<double> vd;\ntypedef vector<P> vP;\ntypedef vector<vector<int> > vvi;\ntypedef vector<vector<bool> > vvb;\ntypedef vector<vector<ll> > vvll;\ntypedef vector<vector<char> > vvc;\ntypedef vector<vector<string> > vvs;\ntypedef vector<vector<double> > vvd;\ntypedef vector<vector<P> > vvP;\ntypedef priority_queue<int, vector<int>, greater<int> > pqli;\ntypedef priority_queue<ll, vector<ll>, greater<ll> > pqlll;\ntypedef priority_queue<P, vector<P>, greater<P> > pqlP;\ntypedef pair<int, pair<int, int> > Edge;\ntypedef vector<Edge> vE;\ntypedef priority_queue<Edge, vector<Edge>, greater<Edge> > pqlE;\n\n#define equals(a,b)(fabs((a)-(b)))<EPS)\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nclass Point {\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0) :x(x), y(y) {}\n\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a) { return Point(x * a, y * a); }\n\tPoint operator / (double a) { return Point(x / a, y / a); }\n\n\tdouble norm() { return x*x + y*y; }\n\tdouble abs() { return sqrt(norm()); }\n\n\tbool operator < (const Point &p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p) const {\n\t\treturn fabs(x - p.x) < EPS&&fabs(y - p.y) < EPS;\n\t}\n};\n\ntypedef Point Vector;\n\ntypedef vector<Point> Polygon;\n\nclass Segment {\npublic:\n\tPoint p1, p2;\n\tSegment(Point p1 = Point(), Point p2 = Point()) :p1(p1), p2(p2) {}\n};\n\ntypedef Segment Line;\n\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0) :c(c), r(r) {}\n};\n\ndouble dot(Vector a, Vector b) {\n\treturn a.x*b.x + a.y*b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n\treturn a.x*b.y - a.y*b.x;\n}\n\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / base.norm();\n\treturn s.p1 + base*r;\n}\n\n// ??????s???????§°?????¨?????????p???????§°???\nPoint reflect(Segment s, Point p) {\n\treturn p + (project(s, p) - p)*2.0;\n}\n\ndouble getDistance(Point a, Point b) {\n\treturn (a - b).abs();\n}\n\ndouble getDistanceLP(Line l, Point p) {\n\treturn abs(cross(l.p2 - l.p1, p - l.p1)) / (l.p2 - l.p1).abs();\n}\n\ndouble getDistanceSP(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0)return (p - s.p1).abs();\n\tif (dot(s.p2 - s.p1, p - s.p2) < 0.0)return (p - s.p2).abs();\n\treturn getDistanceLP(s, p);\n}\n\n// ????????????(p0,p1)???????????????p2?????????\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (cross(a, b) > EPS)return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS)return CLOCKWISE;\n\tif (dot(a, b) < -EPS)return ONLINE_BACK;\n\tif (a.norm() < b.norm())return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n\treturn (ccw(p1, p2, p3)*ccw(p1, p2, p4) <= 0\n\t\t&& ccw(p3, p4, p1)*ccw(p3, p4, p2) <= 0);\n}\n\nbool intersect(Segment s1, Segment s2) {\n\treturn intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\ndouble getDistance(Segment s1, Segment s2) {\n\tif (intersect(s1, s2))return 0.0;\n\treturn min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n\t\tmin(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\nPoint getCrossPoint(Segment s1, Segment s2) {\n\tVector base = s2.p2 - s2.p1;\n\tdouble d1 = abs(cross(base, s1.p1 - s2.p1));\n\tdouble d2 = abs(cross(base, s1.p2 - s2.p1));\n\tdouble t = d1 / (d1 + d2);\n\treturn s1.p1 + (s1.p2 - s1.p1)*t;\n}\n\npair<Point, Point> getCrossPoints(Circle c, Line l) {\n\tVector pr = project(l, c.c);\n\tVector e = (l.p2 - l.p1) / (l.p2 - l.p1).abs();\n\tdouble base = sqrt(c.r*c.r - (pr - c.c).norm());\n\treturn make_pair(pr + e*base, pr - e*base);\n}\n\ndouble arg(Vector p) {\n\treturn atan2(p.y, p.x);\n}\n\n// ?????¢a???????§?r\nVector polar(double a, double r) {\n\treturn Point(cos(r)*a, sin(r)*a);\n}\n\npair<Point, Point> getCrossPoints(Circle c1, Circle c2) {\n\tdouble d = (c1.c - c2.c).abs();\n\tdouble a = acos((c1.r*c1.r + d*d - c2.r*c2.r) / (2 * c1.r * d));\n\tdouble t = arg(c2.c - c1.c);\n\treturn make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n}\n\n// IN:2, ON:1, OUT:0\nint contain(Polygon g, Point p) {\n\tint n = g.size();\n\tbool x = false;\n\tfor (int i = 0; i < n; i++) {\n\t\tPoint a = g[i] - p;\n\t\tPoint b = g[(i + 1) % n] - p;\n\t\tif (abs(cross(a, b)) < EPS && dot(a, b) < EPS)return 1;\n\t\tif (a.y > b.y)swap(a, b);\n\t\tif (a.y < EPS && EPS < b.y && cross(a, b) > EPS)x = !x;\n\t}\n\treturn (x ? 2 : 0);\n}\n\n// ??????\nPolygon andrewScan(Polygon s) {\n\tPolygon u, l;\n\tif (s.size() < 3)return s;\n\tsort(s.begin(), s.end());\n\n\tu.push_back(s[0]);\n\tu.push_back(s[1]);\n\tl.push_back(s[s.size() - 1]);\n\tl.push_back(s[s.size() - 2]);\n\t\n\tfor (int i = 2; i < s.size(); i++) {\n\t\tfor (int n = u.size(); n >= 2 && ccw(u[n - 2], u[n - 1], s[i]) != CLOCKWISE; n--) {\n\t\t\tu.pop_back();\n\t\t}\n\t\tu.push_back(s[i]);\n\t}\n\tfor (int i = s.size() - 3; i >= 0; i--) {\n\t\tfor (int n = l.size(); n >= 2 && ccw(l[n - 2], l[n - 1], s[i]) != CLOCKWISE; n--) {\n\t\t\tu.pop_back();\n\t\t}\n\t\tu.push_back(s[i]);\n\t}\n\treverse(l.begin(), l.end());\n\tfor (int i = u.size() - 2; i >= 1; i--)l.push_back(u[i]);\n\t\n\treturn l;\n}\n\nint main() {\n\tcout << fixed << setprecision(14);\n\tint x1, y1, x2, y2, Q;\n\tcin >> x1 >> y1 >> x2 >> y2 >> Q;\n\tPoint p0(x1, y1), p1(x2, y2);\n\tSegment s(p0, p1);\n\trep(i, Q) {\n\t\tint x, y;\n\t\tcin >> x >> y;\n\t\tPoint p(x, y);\n\t\tswitch (ccw(p0,p1,p))\n\t\t{\n\t\tcase CLOCKWISE:cout << \"CLOCKWISE\" << endl; break;\n\t\tcase COUNTER_CLOCKWISE:cout << \"COUNTER_CLOCKWISE\" << endl; break;\n\t\tcase ONLINE_BACK:cout << \"ONLINE_BACK\" << endl; break;\n\t\tcase ONLINE_FRONT:cout << \"ONLINE_FRONT\" << endl; break;\n\t\tcase ON_SEGMENT:cout << \"ON_SEGMENT\" << endl; break;\n\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n#define rep(i, n) for(int i=0; i<n; i++)\n#define rrep(i, n) for(int i=n-1; i>=0; i--)\n#define FOR(i, a, b) for(int i=a; i<b; i++)\n#define ALL(v) v.begin(),v.end()\n#define pb push_back\n#define eb emplace_back\n#define mp make_pair\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef pair<int, ll> pil;\ntypedef pair<ll, int> pli;\ntypedef pair<ll, ll> pll;\nconst int INF = 1e9;\nconst ll LLINF = 1e18;\nconst ll MOD = 1e9+7;\nconst double EPS = 1e-10;\ntemplate<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return 1; } return 0; }\ntemplate<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return 1; } return 0; }\n\nclass Point {\n    public:\n        double x, y;\n\n    Point(double x = 0, double y = 0): x(x), y(y) {}\n\n    Point operator+ (Point p) { return Point(x + p.x, y + p.y); }\n    Point operator- (Point p) { return Point(x - p.x, y - p.y); }\n    Point operator* (double a) { return Point(x * a, y * a); }\n    Point operator/ (double a) { return Point(x / a, y / a); }\n\n    double norm() { return x * x + y * y; }\n    double abs() { return sqrt(norm()); }\n\n    bool operator< (const Point &p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n    bool operator== (const Point &p) const {\n        return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n    }\n};\nstruct Segment { Point p1, p2; };\ntypedef Point Vector;\ntypedef Segment Line;\ntypedef vector<Point> Polygon;\n\nclass Circle {\n    public:\n        Point c;\n        double r;\n        Circle(Point c = Point(), double r = 0.0): c(c), r(r) {}\n};\n\ndouble dot(Vector v1, Vector v2) {\n    return v1.x * v2.x + v1.y * v2.y;\n}\n\ndouble cross(Vector v1, Vector v2) {\n    return v1.x * v2.y - v1.y * v2.x;\n}\n\nPoint project(Segment s, Point p) {\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / base.norm();\n    return s.p1 + base * r;\n}\n\nPoint reflect(Segment s, Point p) {\n    Point x = project(s, p);\n    return p + (x - p) * 2;\n}\n\nint main() {\n    double x0, y0, x1, y1;\n    cin >> x0 >> y0 >> x1 >> y1;\n    Point p0(x0, y0), p1(x1, y1);\n\n    int q; cin >> q;\n    vector<Point> ps;\n    rep(i, q) {\n        double x, y; cin >> x >> y;\n        ps.push_back(Point(x, y));\n    }\n\n    rep(i, q) {\n        Point p2 = ps[i];\n        Vector a = p1 - p0;\n        Vector b = p2 - p0;\n        string ans = \"\";\n        if (cross(a, b) > EPS) ans = \"COUNTER_CLOCKWISE\";\n        else if (cross(a, b) < -EPS) ans = \"CLOCKWISE\";\n        else if (dot(a, b) < -EPS) ans = \"ONLINE_BACK\";\n        else if (a.norm() < b.norm()) ans = \"ONLINE_FRONT\";\n        else ans = \"ON_SEGMENT\";\n        cout << ans << endl;\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <cmath>\n\nusing namespace std;\n\nconst double EPS = 1e-8;\n\nint dcmp(double d) {\n    if (fabs(d) < EPS) {\n        return 0;\n    }\n    return d > 0? 1 : -1;\n}\n\nstruct Vector {\n    double x, y;\n    Vector(double x, double y): x(x), y(y) {\n    }\n};\n\ntypedef Vector Point;\n\ndouble dot(const Vector& a, const Vector& b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(const Vector& a, const Vector& b) {\n    return a.x * b.y - a.y * b.x;\n}\n\nVector operator-(const Point& a, const Point& b) {\n    return Vector(a.x - b.x, a.y - b.y);\n}\n\nint main() {\n    double x0, y0, x1, y1;\n    cin >> x0 >> y0 >> x1 >> y1;\n    Point p0(x0, y0);\n    Point p1(x1, y1);\n    \n    int q;\n    cin >> q;\n    for (int i = 0; i < q; i++) {\n        double x2, y2;\n        cin >> x2 >> y2;\n        Point p2(x2, y2);\n        \n        Vector v01 = p1 - p0;\n        Vector v02 = p2 - p0;\n        \n        double d = dot(v01, v02);\n        double c = cross(v01, v02);\n        \n        double norm1 = dot(v01, v01);\n        double norm2 = dot(v02, v02);\n        \n        if (dcmp(c) > 0) {\n            cout << \"COUNTER_CLOCKWISE\" << endl; \n        }\n        else if (dcmp(c) < 0) {\n            cout << \"CLOCKWISE\" << endl;\n        }\n        else if (dcmp(c) == 0 && dcmp(d) < 0 ) {\n            cout << \"ONLINE_BACK\" << endl;\n        }\n        else if (dcmp(c) == 0 && dcmp(d) > 0 && dcmp(norm2 - norm1) > 0) {\n            cout << \"ONLINE_FRONT\" << endl;\n        }\n        else {\n            cout << \"ON_SEGMENT\" << endl;\n        }\n        \n    }\n    \n    \n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define TemplateVersion \"3.4.0\"\n// Useful Marcos\n//====================START=====================\n// Compile use C++11 and above\n#ifdef LOCAL\n#define debug(args...)                           \\\n    {                                            \\\n        string _s = #args;                       \\\n        replace(_s.begin(), _s.end(), ',', ' '); \\\n        stringstream _ss(_s);                    \\\n        istream_iterator<string> _it(_ss);       \\\n        err(_it, args);                          \\\n    }\nvoid err(istream_iterator<string> it)\n{\n}\ntemplate <typename T, typename... Args>\nvoid err(istream_iterator<string> it, T a, Args... args)\n{\n    cerr << *it << \" = \" << a << endl;\n    err(++it, args...);\n}\n#define MSG cout << \"Finished\" << endl\n#else\n#define debug(args...)\n#define MSG\n#endif\n#if __cplusplus >= 201703L\ntemplate <typename... Args>\nvoid readln(Args &... args)\n{\n    ((cin >> args), ...);\n}\ntemplate <typename... Args>\nvoid writeln(Args... args)\n{\n    ((cout << args << \" \"), ...);\n    cout << endl;\n}\n#elif __cplusplus >= 201103L\nvoid readln()\n{\n}\ntemplate <typename T, typename... Args>\nvoid readln(T &a, Args &... args)\n{\n    cin >> a;\n    readln(args...);\n}\nvoid writeln()\n{\n    cout << endl;\n}\ntemplate <typename T, typename... Args>\nvoid writeln(T a, Args... args)\n{\n    cout << a << \" \";\n    writeln(args...);\n}\n#endif\n#if __cplusplus >= 201103L\n#define FOR(_i, _begin, _end) for (auto _i = _begin; _i < _end; _i++)\n#define FORR(_i, _begin, _end) for (auto _i = _begin; _i > _end; _i--)\n#else\n#define FOR(_i, _begin, _end) for (int _i = (int)_begin; _i < (int)_end; _i++)\n#define FORR(_i, _begin, _end) for (int _i = (int)_begin; _i > (int)_end; _i--)\n#define nullptr NULL\n#endif\n#if __cplusplus >= 201103L\n#define VIS(_kind, _name, _size) \\\n    vector<_kind> _name(_size);  \\\n    for (auto &i : _name)        \\\n        cin >> i;\n#else\n#define VIS(_kind, _name, _size)    \\\n    vector<_kind> _name;            \\\n    _name.resize(_size);            \\\n    for (int i = 0; i < _size; i++) \\\n        cin >> _name[i];\n#endif\n// alias\n#define mp make_pair\n#define pb push_back\n#define eb emplace_back\n#define all(x) (x).begin(), (x).end()\n#define tcase() \\\n    int T;      \\\n    cin >> T;   \\\n    FOR(kase, 1, T + 1)\n// Swap max/min\ntemplate <typename T>\nbool smax(T &a, const T &b)\n{\n    if (a > b)\n        return false;\n    a = b;\n    return true;\n}\ntemplate <typename T>\nbool smin(T &a, const T &b)\n{\n    if (a < b)\n        return false;\n    a = b;\n    return true;\n}\n// ceil divide\ntemplate <typename T>\nT cd(T a, T b)\n{\n    return (a + b - 1) / b;\n}\n// min exchange\ntemplate <typename T>\nbool se(T &a, T &b)\n{\n    if (a < b)\n        return false;\n    swap(a, b);\n    return true;\n}\n// A better MAX choice\nconst int INF = 0x3f3f3f3f;\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int, int> pii;\ntypedef vector<int> vi;\ntypedef vector<ll> vll;\ntypedef set<int> si;\ntypedef vector<string> cb;\n//====================END=====================\n\n// Constants here\nconst double EPS = 1e-8;\nconst double PI = acos(-1);\n\ntypedef double db;\n\nint sgn(db x)\n{\n    if (abs(x) < EPS)\n        return 0;\n    if (x < 0)\n        return -1;\n    return 1;\n}\n\ninline db sqr(db x) { return x * x; }\n\n// Point/Vector\nstruct Point\n{\n    db x, y;\n\n    Point() : x(1e-18), y(1e-18) {}\n\n    Point(db _x, db _y) : x(_x + 1e-18), y(_y + 1e-18) {}\n\n    bool operator==(const Point &p)\n    {\n        return sgn(x - p.x) == 0 && sgn(y - p.y) == 0;\n    }\n\n    bool operator<(const Point &p)\n    {\n        int c = sgn(x - p.x);\n        if (c)\n            return c == -1;\n        return sgn(y - p.y) == -1;\n    }\n\n    Point operator+(const Point &p) { return Point(x + p.x, y + p.y); }\n    Point operator-(const Point &p) { return Point(x - p.x, y - p.y); }\n    Point operator*(db d) { return Point(x * d, y * d); }\n    Point operator/(db d) { return Point(x / d, y / d); }\n\n    db operator^(const Point &p) { return x * p.y - y * p.x; }\n    db operator*(const Point &p) { return x * p.x + y * p.y; }\n\n    db dis(const Point &p) { return (*this - p).len(); }\n    db alpha() { return atan2(y, x); }\n\n    Point unit() { return *this / len(); }\n\n    Point rotac() { return Point(-y, x); }\n    Point rotcl() { return Point(y, -x); }\n\n    Point rot(Point p, db angle)\n    {\n        Point v = *this - p;\n        db c = cos(angle), s = sin(angle);\n        return Point(p.x + v.x * c - v.y * s, p.y + v.x * s + v.y * c);\n    }\n\n    db len() { return hypot(x, y); }\n    db len2() { return x * x + y * y; }\n\n    db rad(Point a, Point b)\n    {\n        Point ap = a - *this, bp = b - *this;\n        return abs(atan2(abs(ap ^ bp), ap * bp));\n    }\n\n    void read() { cin >> x >> y; }\n    void write() { cout << '(' << x << \", \" << y << \")\\n\"; }\n};\n\n// Line\nstruct Line\n{\n    Point s, e;\n\n    Line(){};\n\n    Line(Point _s, Point _e) : s(_s), e(_e) {}\n\n    Line(Point p, db angle)\n    {\n        s = p;\n        if (sgn(angle - PI / 2))\n            e = (s + Point(1, tan(angle)));\n        else\n            e = (s + Point(0, 1));\n    }\n\n    //ax+by+c=0\n    Line(db a, db b, db c)\n    {\n        if (sgn(a) == 0)\n        {\n            s = Point(0, -c / b);\n            e = Point(1, -c / b);\n        }\n        else if (sgn(b) == 0)\n        {\n            s = Point(-c / a, 0);\n            e = Point(-c / a, 1);\n        }\n        else\n        {\n            s = Point(0, -c / b);\n            e = Point(1, -(c + a) / b);\n        }\n    }\n\n    db len() { return s.dis(e); }\n    db angle()\n    {\n        db ans = atan2(e.y - s.y, e.x - s.x);\n        if (sgn(ans) == -1)\n            ans += PI;\n        if (sgn(ans - PI) == 0)\n            ans -= PI;\n        return ans;\n    }\n\n    // 1 -> On Left\n    // 2 -> On Right\n    // 3 -> On Line BUT MAY NOT ON THE SEGMENT!\n    int relation(Point p)\n    {\n        Point x = p - s, y = e - s;\n        int c = sgn(x ^ y);\n        if (c < 0)\n            return 1;\n        if (c > 0)\n            return 2;\n        if (sgn(x * y) < 0)\n            return 3;\n        if (sgn(x.len() - y.len()) > 0)\n            return 4;\n        return 5;\n    }\n\n    bool checkOn(Point p) { return sgn((p - s) ^ (e - s)) == 0 && sgn((p - s) ^ (p - e)) <= 0; }\n\n    bool parallel(Line l) { return sgn((e - s) ^ (l.e - l.s)) == 0; }\n\n    // 0 -> Formal Intersection\n    // 1 -> Informal\n    // 2 -> Not Intersect\n    int crossSS(Line l)\n    {\n        int d1 = sgn((e - s) ^ (l.s - s));\n        int d2 = sgn((e - s) ^ (l.e - s));\n        int d3 = sgn((l.e - l.s) ^ (s - l.s));\n        int d4 = sgn((l.e - l.s) ^ (e - l.s));\n        if ((d1 ^ d2) == -2 && (d3 ^ d4) == -2)\n            return 2;\n        return (d1 == 0 && sgn((l.s - s) * (l.s - e)) <= 0) ||\n               (d2 == 0 && sgn((l.e - s) * (l.e - e)) <= 0) ||\n               (d3 == 0 && sgn((s - l.s) * (s - l.e)) <= 0) ||\n               (d4 == 0 && sgn((e - l.s) * (e - l.e)) <= 0);\n    }\n\n    // 0 -> Formal Intersection\n    // 1 -> Informal\n    // 2 -> Not Intersect\n    int crossLS(Line l)\n    {\n        int d1 = sgn((e - s) ^ (l.s - s));\n        int d2 = sgn((e - s) ^ (l.e - s));\n        if ((d1 ^ d2) == -2)\n            return 2;\n        return (d1 == 0 || d2 == 0);\n    }\n\n    // 0 -> Parallel\n    // 1 -> Same\n    // 2 -> Intersect\n    int crossLL(Line l)\n    {\n        if (this->parallel(l))\n            return l.relation(s) == 3;\n        return 2;\n    }\n\n    Point crossP(Line l)\n    {\n        db a1 = (l.e - l.s) ^ (s - l.s);\n        db a2 = (l.e - l.s) ^ (e - l.s);\n        return Point((s.x * a2 - e.x * a1) / (a2 - a1), (s.y * a2 - e.y * a1) / (a2 - a1));\n    }\n\n    db disPL(Point p) { return abs((p - s) ^ (e - s)) / len(); }\n    db disPS(Point p)\n    {\n        if (sgn((p - s) * (e - s)) < 0 || sgn((p - e) * (s - e)) < 0)\n            return min(p.dis(s), p.dis(e));\n        return disPL(p);\n    }\n    db disSS(Line l) { return min(min(disPS(l.s), disPS(l.e)), min(l.disPS(s), l.disPS(e))); }\n\n    Point proj(Point p) { return s + ((e - s) * ((e - s) * (p - s))) / ((e - s).len2()); }\n    Point refl(Point p)\n    {\n        Point q = proj(p);\n        return Point(2 * q.x - p.x, 2 * q.y - p.y);\n    }\n\n    bool operator==(Line l) { return s == l.s && e == l.e; }\n\n    void adjust()\n    {\n        if (e < s)\n            swap(s, e);\n    }\n\n    void read()\n    {\n        s.read();\n        e.read();\n    }\n\n    void write()\n    {\n        cout << \"Line:\\n\";\n        s.write();\n        e.write();\n    }\n};\n\n// Pre-Build Function\ninline void build()\n{\n}\n\n// Actual Solver\ninline void solve()\n{\n    Line l;\n    l.read();\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        Point p;\n        p.read();\n        int re = l.relation(p);\n        if (re == 1)\n            cout << \"COUNTER_CLOCKWISE\\n\";\n        else if (re == 2)\n            cout << \"CLOCKWISE\\n\";\n        else if (re == 3)\n            cout << \"ONLINE_BACK\\n\";\n        else if (re == 4)\n            cout << \"ONLINE_FRONT\\n\";\n        else\n            cout << \"ON_SEGMENT\\n\";\n\n        // {\n        //     auto d = p.dis(l.s);\n        //     auto a = l.s.rad(l.e, p);\n        //     if (sgn(a - PI) == 0)\n\n        //     else if (sgn(d - l.len()) <= 0)\n\n        //     else\n\n        // }\n    }\n}\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n    cout.tie(nullptr);\n\n#ifdef LOCAL\n    clock_t _begin = clock();\n#endif\n\n    build();\n    solve();\n\n#ifdef LOCAL\n    cerr << \"Time elapsed: \" << (double)(clock() - _begin) * 1000 / CLOCKS_PER_SEC << \"ms.\" << endl;\n#endif\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\nusing namespace std;\n\n//?????????\n#pragma region MACRO \n#define putans(x)  std::cerr << \"answer: \" ; cout << (x) << endl\n#define dputans(x) std::cerr << \"answer: \"; cout << setprecision(13) << (double)(x) << endl\n#define REP(i,a,n) for(int i=(a); i<(int)(n); i++)\n#define RREP(i,a,n) for(int i=(int)(n-1); i>= a; i--)\n#define rep(i,n) REP(i,0,n)\n#define rrep(i,n) RREP(i,0,n)\n#define all(a) begin((a)),end((a))\n#define mp make_pair\n#define exist(container, n) ((container).find((n)) != (container).end())\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n#ifdef _DEBUG //???????????????????????????????????????????????????\nstd::ifstream ifs(\"data.txt\");\n#define put ifs >>\n#else //?????£????????????????????§?????????????????????\n#define put cin >>\n#endif\n#pragma endregion\n\n//???????????°??????????????´\n#pragma region CODING_SUPPORT\n#define dbg(var0) { std::cerr << ( #var0 ) << \"=\" << ( var0 ) << endl; }\n#define dbg2(var0, var1) { std::cerr << ( #var0 ) << \"=\" << ( var0 ) << \", \"; dbg(var1); }\n#define dbg3(var0, var1, var2) { std::cerr << ( #var0 ) << \"=\" << ( var0 ) << \", \"; dbg2(var1, var2); }\n#define dbgArray(a,n) {std::cerr << (#a) << \"=\";  rep(i,n){std::cerr <<(a[i])<<\",\";} cerr<<endl;} \n#ifndef _DEBUG\n#define dbg1 {}\n#define dbg2 {}\n#define dbg3 {}\n#define dbgArray {}\n#endif \n#pragma endregion \n//typedef????????????????????????????¶????????????§?????????\n#pragma region TYPE_DEF\ntypedef long long ll;\ntypedef pair<int, int> pii; typedef pair<string, string> pss; typedef pair<int, string>pis;\ntypedef vector<string> vs; typedef vector<int> vi;\n#pragma endregion\n//??????????????°(???????????????????????§??????)\n#pragma region CONST_VAL\n#define PI (2*acos(0.0))\n#define EPS (1e-10)\n#define MOD (ll)(1e9 + 7)\n#define INF (ll)(1e9)\n#pragma endregion\n\nclass Point {//????????????????????????\npublic:\n\tdouble x, y;\n\tPoint(double x = 0, double y = 0) : x(x), y(y) {}\n\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a) { return Point(x * a, y * a); }\n\tdouble operator * (Point p) { return dot(p); }\n\tPoint operator / (double a) { return Point(x / a, y / a); }\n\n\tdouble abs() { return sqrt(norm()); }\n\tdouble norm() { return x*x + y*y; }\n\n\tbool operator < (const Point &p) const { return  x != p.x ? x < p.x : y < p.y; }\n\tbool operator == (const Point &p) const { return  fabs(x - p.x) < EPS && fabs(y - p.y) < EPS; }\n\t//???????????????\n\tdouble dot(Point p) { return x * p.x + y * p.y; }\n\tdouble cross(Point p) { return x * p.y - y * p.x; }\n\n\n};\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0) :c(c), r(r) {}\n};\nstruct Segment {//??????\n\tPoint p1, p2;\n};\n\ntypedef Point Vector;\ntypedef Segment Line;//??´???\ntypedef vector<Point> Polygon;\n\ndouble v_norm(Point p) { return p.x * p.x + p.y * p.y; }\ndouble abs(Point p) { return v_norm(p); }\ndouble dot(Point p, Point q) { return p.x * q.x + p.y * q.y; }\ndouble cross(Point p, Point q) { return p.x * q.y - p.y * q.x; }\n\n\n\n\n\n//??´????????????\nbool isOrthogonal(Vector a, Vector b) { return equals(a*b, 0.0); }\nbool isParallel(Vector a, Vector b) { return equals(cross(a, b), 0.0); }\n\n//??????s???????????????p????°???±\nPoint projection(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(( p - s.p1 ), base) / v_norm(base);\n\treturn s.p1 + base*r;\n}\n//??????s???????????????p???????°?\nPoint reflection(Segment s, Point p) { return p + ( projection(s, p) - p ) * 2; }\n\n\n\n\n//double getDistance(Point a, Point b) { return ( a - b ).abs; }\n//double getDistanceLP(Line l, Point p) { return abs(cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1)); }\n//double getDistanceSP(Segment s, Point p) {\n//\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0) return abs(p - s.p1);\n//\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0) return abs(p - s.p2);\n//}\n\n//double getDistance(Segment s1, Segment s2) {\n//\tif (intersect(s1, s2)) return 0;\n//\treturn min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2))\n//\t         , min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2));\n//}\n\n//p1-p0???????????¨?????? p2-p0 ???2????????????????????????\nstatic const int COUNTER_CLOCKWISE = 1;//???????¨???????\nstatic const int CLOCKWISE = -1;//????¨???????\nstatic const int ONLINE_BACK = 2;//????????´?????¶p2,p0,p1??????\nstatic const int ONLINE_FRONT = -2;//????????´??????p0,p1,p2??????\nstatic const int ON_SEGMENT = 0;//p2???p0,p1??????????????´???\nint ccw(Point p0, Point p1, Point p2) {//????¨????????????¢??°\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS) return CLOCKWISE;\n\tif (dot(a, b) < -EPS) return ONLINE_BACK;\n\tif (a.norm() < b.norm()) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n////??????p1p2??¨p3p4???????????????\n//bool intersect(Point p1, Point p2, Point p3, Point p4) {return ( (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0) && (ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0));}\n//bool intersect(Segment s1, Segment s2) {return intersect(s1.p1 , s1.p1, s2.p1, s2.p2);}\n//\n//Point getCrossPoint(Segment s1, Segment s2) {\n//\tVector base = s2.p2 - s2.p1;\n//\tdouble d1 = abs(cross(base , s1.p1 - s2.p1));\n//\tdouble d2 = abs(cross(base , s1.p2 - s2.p1));\n//\tdouble t = d1 / ( d1 + d2 );\n//\treturn s1.p1 + (s1.p2 - s1.p1 ) * t;\n//}\n//\n////??´?????¨????????????????????????\n//pair<Point, Point> getCrossPoints(Circle c, Line l) {\n//\t//assert(intersect(c, i)); ?????????????????´????????????????????????\n//\tVector pr = projection(c, l);\n//\tVector e = ( l.p2 - l.p1 ) / abs(l.p2 - l.p1);\n//\tdouble base = sqrt(c.r * c.r - norm(pr - c.c));\n//\treturn mp(pr + e * base, pr - e * base);\n//}\n//\n////????????????????????????\n//static const int IN_POLYGON = 2;//????§???¢????????¨\n//static const int OUT_POLYGON = 1;//????§???¢????????¨\n//static const int ON_POLYGON = 0;//????§???¢????????????\n//int contains(Polygon g, Point p) {\n//\tint n = g.size();\n//\tbool x = false;\n//\trep(i, n) {\n//\t\tPoint a = g[i] - p, b = g[( i + 1 ) % n] - p;\n//\t\tif (abs(cross(a, b)) < EPS && dot(a, b) < EPS) return OUT_POLYGON;\n//\t\tif (a.y > b.y) swap(a, b);\n//\t\tif (a.y < EPS && EPS < b.y && cross(a, b)) x = !x;\n//\t}\n//\treturn ( x ? IN_POLYGON : ON_POLYGON );\n//}\n\n//??????\nPolygon ConvexHull(Polygon s) {\n\tPolygon u, l;\n\tif (s.size() < 3) return s;\n\tsort(all(s));\n\tu.push_back(s[0]);\n\tu.push_back(s[1]);\n\tl.push_back(s[s.size() - 1]);\n\tl.push_back(s[s.size() - 2]);\n\n\tfor (int i = 2; i < s.size(); i++) {\n\t\tfor (int n = u.size(); ( n >= 2 ) && ( ccw(u[n - 2], u[n - 1], s[i]) != CLOCKWISE ); n--) {\n\t\t\tu.pop_back();\n\t\t}\t\n\t\tu.push_back(s[i]);\n\t}\n\n\tfor (int i = s.size()-3; i >= 0; i--) {\n\t\tfor (int n = l.size(); n >= 2 && ccw(l[n - 2], l[n - 1], s[i]) != CLOCKWISE; n--)l.pop_back();\n\t\tl.push_back(s[i]);\n\t}\n\n\treverse(all(l));\n\tfor (int i = u.size() - 2; i >= 1; i--) l.push_back(u[i]);\n\treturn l;\n}\n\n/*\n#define i(x) int x; scanf(\"%d\",&x);\n#define l(x) ll x; scanf(\"%lld\",&x);\n#define d(x) double  x; scanf(\"%lf\",&x);\n*/\n//??????????£?????????°???\n//https://www23.atwiki.jp/akitaicpc/pages/65.html\n\n\nint main() {\n\t/*double xp1, yp1, xp2, yp2; put xp1 >> yp1 >> xp2 >> yp2;\n\tSegment s;\n\ts.p1 = Point(xp1, yp1);\n\ts.p2 = Point(xp2, yp2);\n\n\tint n; put n;\n\trep(i, n) {\n\t\tPoint p;\n\t\tput p.x >> p.y;\n\t\tPoint prj =reflection(s, p);\n\t\tcout << setprecision(13) << prj.x << \" \" << prj.y << endl;\n\t}*/\n\n\tPoint p0, p1;\n\tput p0.x >> p0.y >> p1.x >> p1.y;\n\tint q; put q;\n\trep(i, q) {\n\t\tPoint p2; put p2.x >> p2.y;\n\t\tswitch (ccw(p0,p1,p2)) {\n\t\tcase 1:\t\n\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t\tbreak;\n\t\tcase -1:\n\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t\tbreak;\n\t\tcase -2:\n\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t\tbreak;\n\t\tcase 0:\n\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\t\n\t}\n\tstatic const int COUNTER_CLOCKWISE = 1;//???????¨???????\n\tstatic const int CLOCKWISE = -1;//????¨???????\n\tstatic const int ONLINE_BACK = 2;//????????´?????¶p2,p0,p1??????\n\tstatic const int ONLINE_FRONT = -2;//????????´??????p0,p1,p2??????\n\tstatic const int ON_SEGMENT = 0;//p2???p0,p1??????????????´???\n\n\t//int n; put n;\n\t//Polygon p;\n\t//rep(i, n) {\n\t//\tdouble x, y; put x >> y;\n\t//\tp.push_back(Point(x,y));\n\t//}\n\t//Polygon k = ConvexHull(p);\n\t//cout << k.size() << endl;\n\t//rep(i, k.size()) {\n\t//\tcout << k[i].x << \" \" << k[i].y << endl;\n\t//}\n\n\n\t//???????????¬??????????????\\???????????????\n//\tauto getI = [&]()->auto { int tmp; put tmp; return tmp; };\n//\tauto getLL = [&]()->auto { ll tmp; put tmp; return tmp; };\n//\tauto getS = [&]()->auto { string tmp; put tmp; return tmp; };\n//\tbool filled[1000][1000];\n//\tfill(*filled, *filled + 1000 * 1000, false);\n//\tint vx[4] = { 1,0,-1,0 };\n//\tint vy[4] = { 0,1,0,-1 };\n//\tPolygon sheep;\n//\tPolygon convex_sheep;\n//\tint num = 0;\n//\tint h, w; put h >> w;\n//\trep(i, h) {\n//\t\tstring s; put s;\n//\t\trep(j, s.size()) {\n//\t\t\tif (s[j] == 'X') {\n//\t\t\t\tif (i == 0 || j == 0) {\n//\t\t\t\t\tputans(-1);\n//\t\t\t\t\tgoto END;\n//\t\t\t\t}\n//\t\t\t\trep(k, 4) {\n//\t\t\t\t\tif (!filled[i + vx[k]][j + vy[k]]) {\n//\t\t\t\t\t\tsheep.push_back(Point(i + vx[k],j + vy[k]));\n//\t\t\t\t\t\tfilled[i + vx[k]][j + vy[k]] = true;\n//\t\t\t\t\t}\n//\t\t\t\t}\n//\t\t\t}\n//\t\t}\n//\t}\n//\tconvex_sheep = ConvexHull(sheep);\n//\n//\trep(i, convex_sheep.size()) {\n//\t\tPoint s = convex_sheep[i % convex_sheep.size()];\n//\t\tPoint g = convex_sheep[(i + 1) % convex_sheep.size()];\n//\t\tint mandist = abs(s.x - g.x)+abs(s.y - g.y)-1;\n//\t\tmax(1.0, abs(s.x - g.x)) + max(1.0, abs(s.y - g.y))\n//\t\tnum += mandist;\n//\t} \n//\tputans(num);\n//END:\n\treturn 0;\n}\n\n//\n//int n, a, b; put n >> a >> b;\n//\tvi t;\n//\trep(i, n) {\n//\t\tt.push_back(get());\n//\t}\n//\tint count = 0;\n//\trep(i, n) {\n//\t\tif (t[i] < a || b <= t[i])count++;\n//\t}\n//\tputans(count);\n\n//\n//\tset<string> list;\n//\tint ans = 0;\n//\tint n; put n;\n//\tint k; put k;\n//\tint numAlphabet[26];\n//\tfill(all(numAlphabet), 0);\n//\trep(i, n) {\n//\t\tstring s; put s;\n//\t\tif (exist(list, s))continue;\n//\t\tlist.insert(s);\n//\t\tnumAlphabet[s[0] - 'A']++;\n//\t}\n//\tsort(all(numAlphabet),greater<int>());\n//\twhile (true) {\n//\t\trep(i, k) {\n//\t\t\tif (numAlphabet[i] == 0) goto END;\n//\t\t\telse numAlphabet[i]--;\n//\t\t}\n//\t\tsort(all(numAlphabet), greater<int>());\n//\t\tans++;\n//\t}\n//END:\n//\tputans(ans);\n\n\n\t//int t; put t;\n\t//rep(i, t) {\n\t//\tint n, d; put n >> d;\n\t//\tif (n == 1) {\n\t//\t\tputans(d);\n\t//\t\tcontinue;\n\t//\t}\n\t//\tputans(n % 2 != 0 ? ( n - 1 ) * 127 + d : ( n - 1 ) * 127 + ( 127 ^ d ));\n\t//}\n\n\n//\n//int n; put n;\n//string s1, s2;\n//string r;\n//string patan1[4] = { \".\",\"#\",\".\",\"#\" };\n//string patan2[4] = { \".\",\".\",\"#\",\"#\" };\n//bool front = true;\n//rep(j, 420 / 4) {\n//\tif (front) {\n//\t\trep(i, 4) {\n//\t\t\tcout << s1 + patan1[i] + \"\\n\" << s2 + patan2[i] << endl;\n//\t\t\tcin >> r;\n//\t\t\tif (r == \"T\") {\n//\t\t\t\ts1 += patan1[i];\n//\t\t\t\ts2 += patan2[i];\n//\t\t\t\tbreak;\n//\t\t\t}\n//\t\t\tif (r == \"F\" && i == 3) {\n//\t\t\t\tfront = !front;\n//\t\t\t}\n//\t\t\tif (r == \"end\")goto END;\n//\t\t}\n//\t}\n//\telse {\n//\t\trep(i, 4) {\n//\t\t\tcout << patan1[i] + s1 + \"\\n\" << patan2[i] + s2 << endl;\n//\t\t\tcin >> r;\n//\t\t\tif (r == \"T\") {\n//\t\t\t\ts1 = patan1[i] + s1;\n//\t\t\t\ts2 = patan2[i] + s2;\n//\t\t\t\tbreak;\n//\t\t\t}\n//\t\t\tif (r == \"F\" && i == 3) {\n//\t\t\t\tfront = !front;\n//\t\t\t}\n//\t\t\tif (r == \"end\")goto END;\n//\t\t}\n//\t}\n//\n//}\n//END:\n//cout << endl;"
  },
  {
    "language": "C++",
    "code": "#define _CRT_SECURE_NO_WARNINGS\n#define _USE_MATH_DEFINES\n#include <iostream>\n#include <cstdio>\n#include <math.h>\n#include <algorithm>\nconst double EPS = 1e-9;\nusing namespace std;\nclass vector {\npublic:\n\tdouble x, y;\n\tvector(double a, double  b) {\n\t\tx = a;\n\t\ty = b;\n\t};\n\tvector operator * (const vector &v)const {\n\t\treturn vector(x*v.x, y* v.y);\n\t}\n\tvector operator * (double a) {\n\t\treturn vector(x * a, y * a);\n\t}\n\tvector operator - (vector v) {\n\t\treturn vector(x - v.x, y - v.y);\n\t}\n\tvector operator + (vector v) {\n\t\treturn vector(x + v.x, y + v.y);\n\t}\n};\ninline double dot(vector v1, vector v2) {\n\treturn v1.x*v2.x + v1.y*v2.y;\n}\ninline double squ(vector v) {\n\treturn v.x*v.x + v.y*v.y;\n}\ninline double norm(vector v) {\n\treturn sqrt(squ(v));\n}\ninline void print(vector v) {\n\tprintf(\"%.10f %.10f\\n\", v.x, v.y);\n}\ninline vector pro(vector base, vector v, vector be) {\n\tdouble a = dot(base, v) / squ(base);\n\tvector v1 = base * a;\n\treturn v1 + be;\n}\ninline vector ref(vector v, vector be) {\n\treturn (v - be)*2 + be;\n}\ninline double cross(vector v1, vector v2) {\n\treturn v1.x*v2.y - v1.y*v2.x;\n}\ninline int ccw(vector v1, vector v2, vector v3) {\n\tvector a = v2 - v1;\n\tvector b = v3 - v1;\n\tif (cross(a, b) < 0.0) return -1;\n\telse if (cross(a, b) > 0.0) return 1;\n\telse if (dot(a, b) < 0.0) return -2;\n\telse if (dot(a, b) > squ(a)) return 2;\n\telse return 0;\n}\ninline int inter(vector v1, vector v2, vector v3, vector v4) {\n\treturn (ccw(v1, v2, v3) * ccw(v1, v2, v4) <= 0) && (ccw(v3, v4, v1) * ccw(v3, v4, v2) <= 0);\n}\ninline double disPP(vector v1, vector v2) {\n\treturn norm(v2 - v1);\n}\ninline double disLP(vector v1, vector v2, vector v3) {\n\tvector a = v2 - v1;\n\tvector b = v3 - v1;\n\treturn fabs(cross(a, b) / norm(a));\n}\ninline double disSP(vector v1, vector v2, vector v3) {\n\tvector a = v2 - v1;\n\tvector b = v3 - v1;\n\tvector c = v1 - v2;\n\tvector d = v3 - v2;\n\tif (dot(a, b) < 0.0) return disPP(v1, v3);\n\telse if (dot(c, d) < 0.0) return disPP(v2, v3);\n\telse return disLP(v1, v2, v3);\n}\ninline double disSS(vector v1, vector v2, vector v3, vector v4) {\n\tif (inter(v1, v2, v3, v4)) return 0;\n\tdouble a = disSP(v1, v2, v3);\n\tdouble b = disSP(v1, v2, v4);\n\tdouble c = disSP(v3, v4, v1);\n\tdouble d = disSP(v3, v4, v2);\n\treturn min(min(a, b), min(c, d));\n}\n/*int main() {\n\t//inter\n\tint n;\n\tdouble x0, x1, x2, x3, y0, y1, y2, y3;\n\tcin >> n;\n\tfor (int i = 0; i < n; i++) {\n\t\tcin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n\t\tvector v1(x0,y0);\n\t\tvector v2(x1, y1);\n\t\tvector v3(x2, y2);\n\t\tvector v4(x3, y3);\n\t\tcout << inter(v1, v2, v3, v4) << endl;\n\t}\n\treturn 0;\n}*/\nint main() {\n\t//clo\n\tint n;\n\tdouble x0, x1, x2, y0, y1, y2;\n\tcin >> x0 >> y0 >> x1 >> y1 >> n;\n\tvector v0(x0, y0);\n\tvector v1(x1, y1);\n\tfor(int i = 0; i < n; i++) {\n\t\tcin >> x2 >> y2;\n\t\tvector v2(x2, y2);\n\t\tint ans = ccw(v0, v1, v2);\n\t\t if(ans == -1) cout << \"CLOCKWISE\" << endl;\n\t\t else if(ans == 1) cout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t  else if(ans == -2)cout << \"ONLINE_BACK\" << endl;\n\t\t  else if(ans == 2)cout << \"ONLINE_FRONT\" << endl;\n\t\telse cout << \"ON_SEGMENT\" << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define int long long   // <-----!!!!!!!!!!!!!!!!!!!\n\n#define rep(i,n) for (int i=0;i<(n);i++)\n#define rep2(i,a,b) for (int i=(a);i<(b);i++)\n#define rrep(i,n) for (int i=(n)-1;i>=0;i--)\n#define rrep2(i,a,b) for (int i=(b)-1;i>=(a);i--)\n#define all(a) (a).begin(),(a).end()\n\ntypedef long long ll;\ntypedef pair<int, int> Pii;\ntypedef tuple<int, int, int> TUPLE;\ntypedef vector<int> V;\ntypedef vector<V> VV;\ntypedef vector<VV> VVV;\n\ntypedef complex<double> P;\n\ndouble cross(P a, P b) {\n    return imag(conj(a) * b);\n}\n\ndouble dot(P a, P b) {\n    return real(conj(a) * b);\n}\n\n// 0: counter-clockwise\n// 1: clockwise\n// 2: online_back\n// 3: online_front\n// 4: on_segment\nint ccw(P p0, P p1, P p2) {\n    if (cross(p1 - p0, p2 - p0) > 0) return 0;\n    if (cross(p1 - p0, p2 - p0) < 0) return 1;\n    if (abs(p1 - p2) > abs(p1 - p0)) return 2;\n    if (abs(p2 - p0) > abs(p1 - p0)) return 3;\n    return 4;\n}\n\nsigned main() {\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(0);\n\n    double x0, y0, x1, y1;\n    cin >> x0 >> y0 >> x1 >> y1;\n    P p0(x0, y0), p1(x1, y1);\n    int q;\n    cin >> q;\n    while (q--) {\n        double x2, y2;\n        cin >> x2 >> y2;\n        P p2(x2, y2);\n        switch (ccw(p0, p1, p2)) {\n            case 0: cout << \"COUNTER_CLOCKWISE\" << endl; break;\n            case 1: cout << \"CLOCKWISE\" << endl; break;\n            case 2: cout << \"ONLINE_BACK\" << endl; break;\n            case 3: cout << \"ONLINE_FRONT\" << endl; break;\n            case 4: cout << \"ON_SEGMENT\" << endl; break;\n        }\n    }\n\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <map>\n#include <vector>\n#include <cmath>\n#include <iomanip>\n#include <string>\n#include <queue>\n#include <algorithm>\n#include <cctype>\n#define shosu(x) fixed<<setprecision(x)\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> P;\ntypedef pair<double,double> pdd;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef vector<P> vp;\ntypedef vector<vp> vvp;\ntypedef pair<int,P> pip;\ntypedef vector<pip> vip;\nconst int inf=1<<30;\nconst double pi=acos(-1);\nconst double eps=1e-8;\n\nstruct point{\n\tdouble x,y;\n\tpoint operator+(point Gep){\n\t\treturn point{x+Gep.x,y+Gep.y};\n\t}\n\tpoint operator-(point Gep){\n\t\treturn point{x-Gep.x,y-Gep.y};\n\t}\n\tpoint operator*(double Gex){\n\t\treturn point{x*Gex,y*Gex};\n\t}\n\tpoint operator/(double Gex){\n\t\tif(!Gex) return point{0,0}; \n\t\treturn point{x/Gex,y/Gex};\n\t}\n\tbool operator==(point Gep){\n\t\treturn fabs(x-Gep.x)<eps&&fabs(y-Gep.y)<eps;\n\t}\n};\n\nclass Geom{\n\tprivate:\n\tvector<point> Ge;\n\tvector<pair<point,point> > Geseg,Geline;\n\tpublic:\n\tvoid line_push(point Gex,point Gey){\n\t\tGeline.push_back(make_pair(Gex,Gey));\n\t}\n\tvoid seg_push(point Gex,point Gey){\n\t\tGeseg.push_back(make_pair(Gex,Gey));\n\t}\n\tvoid point_push(point Gex){\n\t\tGe.push_back(Gex);\n\t}\n\tpoint DIP(pair<point,point> Gex,pdd Gey){\n\t\tdouble Gea=Gey.first,Geb=Gey.second;\n\t\tpoint Ge1=Gex.first,Ge2=Gex.second;\n\t\treturn (Ge1*Geb+Ge2*Gea)/(Gea+Geb);\n\t}\n\tpoint POI(pair<point,point>Gex,pair<point,point> Gey){\n\t\tpair<point,point> Ge1={PRO(Gex,Gey.first),PRO(Gex,Gey.second)};\n\t\tpdd Ger={EXTLEN(Gey.first,Ge1.first),EXTLEN(Gey.second,Ge1.second)};\n\t\treturn DIP(Ge1,Ger);\n\t}\n\tdouble IP(point Gex,point Gey){\n\t\treturn Gex.x*Gey.x+Gex.y*Gey.y;\n\t}\n\tdouble CP(point Gex,point Gey){\n\t\treturn Gex.x*Gey.y-Gey.x*Gex.y;\n\t}\n\tdouble LEN(point Gex){\n\t\treturn sqrt(Gex.x*Gex.x+Gex.y*Gex.y);\n\t}\n\tdouble EXTLEN(point Gex,point Gey){\n\t\treturn LEN(Gex-Gey);\n\t}\n\tpoint PRO(pair<point,point> Gea,point Gex){\n\t\tpoint Ge1=Gex-Gea.second,Ge2=Gea.first-Gea.second;\n\t\treturn Ge2*(IP(Ge1,Ge2)/(LEN(Ge2)*LEN(Ge2)))+Gea.second;\n\t}\n\tpoint REF(pair<point,point> Gea,point Gex){\n\t\tpoint Ge1=PRO(Gea,Gex);\n\t\treturn Ge1*2-Gex;\n\t}\n\tint JUD(point Gea,point Geb,point Gex){\n\t\tif(Gea==Geb||Gex==Geb) return 0;\n\t\tpoint Ge1=Gea-Gex,Ge2=Geb-Gex;\n\t\tdouble Getmp=CP(Ge1,Ge2);\n\t\tif(Getmp>0) return 1;\n\t\tif(Getmp<0) return 2;\n\t\tif(IP(Ge1,Ge2)<0) return 3;\n\t\tif(LEN(Ge1)<LEN(Ge2)) return 4;\n\t\treturn 5;\n\t}\n\tpair<point,point> line_open(int Gex){\n\t\treturn Geline[Gex];\n\t}\n\tpoint point_open(int Gex){\n\t\treturn Ge[Gex];\n\t}\n\tpair<point,point> seg_open(int Gex){\n\t\treturn Geseg[Gex];\n\t}\n};\n\nint q;\ndouble x,xx,y,yy,xxx,yyy;\n\nint main(){\n\tcout<<shosu(10);\n\tcin>>x>>y>>xx>>yy>>q;\n\tfor(int i=0;i<q;i++){\n\t\tcin>>xxx>>yyy;\n\t\tGeom geo;\n\t\tgeo.point_push(point{x,y});\n\t\tgeo.point_push(point{xx,yy});\n\t\tint ans=geo.JUD(geo.point_open(1),point{xxx,yyy},geo.point_open(0));\n\t\tif(ans==1) cout<<\"COUNTER_CLOCKWISE\"<<endl;\n\t\telse if(ans==2) cout<<\"CLOCKWISE\"<<endl;\n\t\telse if(ans==3) cout<<\"ONLINE_BACK\"<<endl;\n\t\telse if(ans==4) cout<<\"ONLINE_FRONT\"<<endl;\n\t\telse cout<<\"ON_SEGMENT\"<<endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#include <cmath>\n#include <vector>\n#include <deque>\n#include <queue>\nusing namespace std;\n#define rep(i,a,n) for(int i=(a);i<(n);i++)\n#define per(i,a,n) for(int i=(n)-1;i>=(a);i--)\n#define mp make_pair\n#define pb push_back\n\ntypedef double db;\n\nconst db EPS = 1e-8;\n\ninline int sign(db a) {\n    return a < -EPS ? -1 : a > EPS;\n}\n\ninline int cmp(db a, db b){//?????????????????°\n    return sign(a-b);\n}\n\nstruct P {//???\n    db x, y;\n    P() {}\n    P(db _x, db _y) : x(_x), y(_y) {}\n    P operator+(P p) { return P(x + p.x, y + p.y); }\n    P operator-(P p) { return P(x - p.x, y - p.y); }\n    P operator*(db d) { return P(x * d, y * d); }\n    P operator/(db d) { return P(x / d, y / d); }\n    bool operator<(P p) const {\n        int c = cmp(x, p.x);\n        if (c) return c == -1;\n        return cmp(y, p.y) == -1;\n    }\n    db dot(P p) { return x * p.x + y * p.y; }//????§?\n    db det(P p) { return x * p.y - y * p.x; }//????§?\n    db distTo(P p) { return (*this-p).abs(); }//??????\n    db alpha() { return atan2(y, x); }//?±?????§?\n    void read() { cin>>x>>y; }//?????\\\n    db abs() { return sqrt(abs2());}//??????\n    db abs2() { return x * x + y * y; }//???????????????\n    P rot90() { return P(-y,x);}//?????¶????????¬90???\n    P unit() { return *this/abs(); }//?????????\n    int quad() const { return sign(y) == 1 || (sign(y) == 0 && sign(x) >= 0); }//????§?????????¨[0,180)?????´\n};\n\nstruct L{ //ps[0] -> ps[1]\n    P ps[2];\n    P& operator[](int i) { return ps[i]; }\n    P dir() { return ps[1] - ps[0]; }//??´??????????????????\n    bool include(P p) { return sign((ps[1] - ps[0]).det(p - ps[0])) > 0; }//????????¨?????????????????¢????????¶????????¨???\n    L push(){ // push eps outward\n        const double eps = 1e-6;\n        P delta = (ps[1] - ps[0]).rot90().unit() * eps;\n        return {ps[0] - delta, ps[1] - delta};\n    }\n};\n\n#define cross(p1,p2,p3) ((p2.x-p1.x)*(p3.y-p1.y)-(p3.x-p1.x)*(p2.y-p1.y))\n#define crossOp(p1,p2,p3) sign(cross(p1,p2,p3))\n\nP isLL(P p1, P p2, P q1, P q2) {//?±??????´?????????\n    db a1 = cross(q1, q2, p1), a2 = -cross(q1, q2, p2);\n    return (p1 * a2 + p2 * a1) / (a1 + a2);\n}\n\nP isLL(L l1,L l2){ return isLL(l1[0],l1[1],l2[0],l2[1]); }//?±??????´?????????\n\nbool intersect(db l1,db r1,db l2,db r2){\n    if(l1>r1) swap(l1,r1); if(l2>r2) swap(l2,r2);\n    return !( cmp(r1,l2) == -1 || cmp(r2,l1) == -1 );\n}\n\nbool isSS(P p1, P p2, P q1, P q2){//?±?????????????\n    return intersect(p1.x,p2.x,q1.x,q2.x) && intersect(p1.y,p2.y,q1.y,q2.y) &&\n           crossOp(p1,p2,q1) * crossOp(p1,p2,q2) <= 0 && crossOp(q1,q2,p1)\n                                                         * crossOp(q1,q2,p2) <= 0;\n}\n\nbool isMiddle(db a, db m, db b) {//??????m????????¨a,b?????´\n    return sign(a - m) == 0 || sign(b - m) == 0 || (a < m != b < m);\n}\n\nbool isMiddle(P a, P m, P b) {//?????????m?????????????????¨a,b?????´\n    return isMiddle(a.x, m.x, b.x) && isMiddle(a.y, m.y, b.y);\n}\n\nbool onSeg(P p1, P p2, P q){//?????????????????¨??´??????\n    return crossOp(p1,p2,q) == 0 && isMiddle(p1, q, p2);\n}\n\nP proj(P p1, P p2, P q) {//????????´???????????±\n    P dir = p2 - p1;\n    return p1 + dir * (dir.dot(q - p1) / dir.abs2());\n}\n\nP reflect(P p1, P p2, P q){//????????´??????????§°\n    return proj(p1,p2,q) * 2 - q;\n}\n\ndb nearest(P p1,P p2,P q){\n    P h = proj(p1,p2,q);\n    if(isMiddle(p1,h,p2))\n        return q.distTo(h);\n    return min(p1.distTo(q),p2.distTo(q));\n}\n\ndb disSS(P p1, P p2, P q1, P q2){\n    if(isSS(p1,p2,q1,q2)) return 0;\n    return min(min(nearest(p1,p2,q1),nearest(p1,p2,q2)), min(nearest(q1,q2,p1),nearest(q1,q2,p2)) );\n}\n\ndb rad(P p1,P p2){\n    return atan2l(p1.det(p2),p1.dot(p2));\n}\n\ndb incircle(P p1, P p2, P p3){\n    db A = p1.distTo(p2);\n    db B = p2.distTo(p3);\n    db C = p3.distTo(p1);\n    return sqrtl(A*B*C/(A+B+C));\n}\n\n\n\nint main(){\n    L line;\n    line[0].read();\n    line[1].read();\n    int q;\n    scanf(\"%d\",&q);\n    while(q--){\n        P p;\n        p.read();\n        if(line.include(p)){\n            printf(\"COUNTER_CLOCKWISE\\n\");\n        }else{\n            if(sign(line.dir().det(p - line[0])) == 0){\n                if(onSeg(line[0],line[1],p))\n                    printf(\"ON_SEGMENT\\n\");\n                else{\n                    if(sign(line.dir().dot(p - line[0])) > 0){\n                        printf(\"ONLINE_FRONT\\n\");\n                    }else{\n                        printf(\"ONLINE_BACK\\n\");\n                    }\n                }\n            }else{\n                printf(\"CLOCKWISE\\n\");\n            }\n        }\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<iomanip>\n#include<algorithm>\n#include<bitset>\n#include<cctype>\n#include<cmath>\n#include<cstdio>\n#include<cstring>\n#include<functional>\n#include<limits>\n#include<list>\n#include<map>\n#include<set>\n#include<stack>\n#include<string>\n#include<sstream>\n#include<queue>\n#include<vector>\nusing namespace std;\n\n#define MOD 1000000007\n#define INF 0x3f3f3f3f\n#define INFL 0x3f3f3f3f3f3f3f3fLL\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n\n//0?¬?\nclass Point {\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0) :x(x), y(y) {}\n\n\tPoint operator+(Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator-(Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator*(double a) { return Point(a * x, a * y); }\n\tPoint operator/(double a) { return Point(x / a, y / a); }\n\tbool operator<(const Point &p)const { return x != p.x ? x < p.x : y < p.y; }\n\tbool operator==(const Point &p)const { return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS; }\n\n\tdouble abs() { return sqrt(norm()); }\n\tdouble norm() { return x*x + y*y; }\n\n};\n\n//1?¬?\ntypedef Point Vector;\n\nclass Segment {\npublic:\n\tPoint p1, p2;\n\tSegment(Point p1 = Point(), Point p2 = Point(1, 1)) :p1(p1), p2(p2) {}\n};\ntypedef Segment Line;\n\n//2?¬?\nclass Circle {\npublic:\n\tPoint c; //center\n\tdouble r; //radius\n\tCircle(Point c = Point(), double r = 0.0) :c(c), r(r) {}\n};\ntypedef vector<Point> Polygon;\n\n//??????\ndouble dot(Vector a, Vector b) { return a.x*b.x + a.y*b.y; }\n//??????\ndouble cross(Vector a, Vector b) { return a.x*b.y - a.y*b.x; }\n\n//??´?????????\nbool isOrthogonal(Vector a, Vector b) { return equals(dot(a, b), 0.0); }\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) { return isOrthogonal(a1 - a2, b1 - b2); }\nbool isOrthogonal(Segment s1, Segment s2) { return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0); }\n\n//????????????\nbool isParallel(Vector a, Vector b) { return equals(cross(a, b), 0.0); }\nbool isParallel(Point a1, Point a2, Point b1, Point b2) { return isParallel(a1 - a2, b1 - b2); }\nbool isParallel(Segment s1, Segment s2) { return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0); }\n\n//?°???±\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / base.norm();\n\treturn s.p1 + base*r;\n}\n//????°?\nPoint reflect(Segment s, Point p) { return p + (project(s, p) - p)*2.0; }\n\n//??????(p0,p1)????????????p2???????????¢???\nenum { ONLINE_FRONT = -2, CLOCKWISE, ON_SEGMENT, COUNTER_CLOCKWISE, ONLINE_BACK };\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0, b = p2 - p0;\n\tif (cross(a, b) > EPS)return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS)return CLOCKWISE;\n\tif (dot(a, b) < -EPS)return ONLINE_BACK;\n\tif (a.norm() < b.norm())return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\n//?????????????????????\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n\treturn (ccw(p1, p2, p3)*ccw(p1, p2, p4) <= 0 &&\n\t\tccw(p3, p4, p1)*ccw(p3, p4, p2) <= 0);\n}\nbool intersect(Segment s1, Segment s2) { return intersect(s1.p1, s1.p2, s2.p1, s2.p2); }\n//???????????????\nPoint getCrossPoint(Segment s1, Segment s2) {\n\tVector base = s2.p2 - s2.p1;\n\tdouble a1 = abs(cross(base, s1.p1 - s2.p1)); //area1\n\tdouble a2 = abs(cross(base, s1.p2 - s2.p1)); //area2\n\tdouble t = a1 / (a1 + a2);\n\treturn s1.p1 + (s1.p2 - s1.p1)*t;\n}\n\n//2??????????????¢\ndouble getDistance(Point a, Point b) { return (a - b).abs(); }\n//??´?????¨???????????¢\ndouble getDistanceLP(Line l, Point p) { return abs(cross(l.p2 - l.p1, p - l.p1) / (l.p2 - l.p1).abs()); }\n//????????¨???????????¢\ndouble getDistanceSP(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0)return (p - s.p1).abs();\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0)return (p - s.p2).abs();\n\treturn getDistanceLP(s, p);\n}\n//????????¨??????????????¢\ndouble getDistance(Segment s1, Segment s2) {\n\tif (intersect(s1, s2))return 0.0;\n\treturn\tmin(\n\t\tmin(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n\t\tmin(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2))\n\t);\n}\n\nint main() {\n\tPoint p[3];\n\tcin >> p[0].x >> p[0].y >> p[1].x >> p[1].y;\n\tint q; cin >> q;\n\tfor (int i = 0; i < q; i++) {\n\t\tcin >> p[2].x >> p[2].y;\n\t\tswitch (ccw(p[0], p[1], p[2])) {\n\t\tcase ONLINE_BACK:\n\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t\tbreak;\n\t\tcase CLOCKWISE:\n\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\t\tbreak;\n\t\tcase ON_SEGMENT:\n\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t\tbreak;\n\t\tcase COUNTER_CLOCKWISE:\n\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t\tbreak;\n\t\tcase ONLINE_FRONT:\n\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tcout << \"ERROR\" << endl;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <cmath>\n#include <iostream>\n#include <queue>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string>\n#ifndef NULL\n#define NULL 0\n#endif\nusing namespace std;\n\nconst int MAXN = 50000 + 10;\nconst double pi = acos(-1.0);\nconst double inf = 1e100;\nconst double eps = 1e-10;\n\ninline double read() //浮点型快读\n{\n    double num;\n    char in;\n    double Dec = 0.1;\n    bool IsN = false, IsD = false;\n    in = getchar();\n    while (in != '-' && in != '.' && (in < '0' || in > '9'))\n        in = getchar();\n    if (in == '-') {\n        IsN = true;\n        num = 0;\n    } else if (in == '.') {\n        IsD = true;\n        num = 0;\n    } else\n        num = in - '0';\n    if (!IsD) {\n        while (in = getchar(), in >= '0' && in <= '9') {\n            num *= 10;\n            num += in - '0';\n        }\n    }\n    if (in != '.') {\n        if (IsN)\n            num = -num;\n        return num;\n    } else {\n        while (in = getchar(), in >= '0' && in <= '9') {\n            num += Dec * (in - '0');\n            Dec *= 0.1;\n        }\n    }\n    if (IsN)\n        num = -num;\n    return num;\n}\n\nint zhengfu(double d)\n{\n    if (fabs(d) < eps)\n        return 0;\n    if (d > 0)\n        return 1;\n    return -1;\n}\nint bijiao(double x, double y)\n{\n    if (fabs(x - y) < eps)\n        return 0;\n    if (x > y)\n        return 1;\n    return -1;\n}\n\nstruct vec {\n    double x, y;\n    vec(double x, double y)\n    {\n        this->x = x;\n        this->y = y;\n    }\n    vec() {}\n    vec operator*(const vec& i_T) const\n    {\n        return vec(x * i_T.x, y * i_T.y);\n    }\n    vec operator*(double u) const\n    {\n        return vec(x * u, y * u);\n    }\n    vec operator/(double u) const\n    {\n        return vec(x / u, y / u);\n    }\n    vec operator+(const vec& i_T)\n    {\n        return vec(x + i_T.x, y + i_T.y);\n    }\n    vec operator-(const vec& i_T)\n    {\n        return vec(x - i_T.x, y - i_T.y);\n    }\n} p[MAXN];\ndouble chaji(vec A, vec B)\n{\n    return A.x * B.y - A.y * B.x; // 正为A->B左旋\n}\ndouble dianji(vec A, vec B)\n{\n    return A.x * B.x + A.y * B.y;\n}\n\ndouble changdu(vec a) //长度\n{\n    return sqrt(a.x * a.x + a.y * a.y);\n}\nvec touying(vec a, vec b, vec c) //c投影在ab上的位置\n{\n    vec A = b - a;\n    vec B = c - a;\n    double La = changdu(A);\n    double Lc = dianji(A, B) / (La * La);\n    return vec(Lc * A.x, Lc * A.y) + a;\n}\nvec fanshe(vec a, vec b, vec c) //求c关于ab的对称点c'\n{\n    vec A = touying(a, b, c);\n    return (A - c) * 2.0 + c;\n}\nvec xiangjiao(vec a, vec b, vec c, vec d); //两直线是否相交\nvec zhixian_jiaodian(vec a, vec b, vec c, vec d); //两直线交点\nint main()\n{\n    int n;\n    vec p1, p2;\n    cin >> p1.x >> p1.y >> p2.x >> p2.y >> n;\n    for (int i = 0; i < n; i++)\n        cin >> p[i].x >> p[i].y;\n    for (int i = 0; i < n; i++) {\n        if (zhengfu(chaji(p2 - p1, p[i] - p1)) == 1)\n            cout << \"COUNTER_CLOCKWISE\" << endl;\n        else if (zhengfu(chaji(p2 - p1, p[i] - p1)) == -1)\n            cout << \"CLOCKWISE\" << endl;\n        else {\n            if (zhengfu(dianji(p2 - p1, p[i] - p1)) == -1)\n                cout << \"ONLINE_BACK\" << endl;\n            else {\n                double j = changdu(p2 - p1);\n                double k = changdu(p[i] - p1);\n                if (bijiao(j, k) >=0)\n                    cout << \"ON_SEGMENT\" << endl;\n                else\n                    cout << \"ONLINE_FRONT\" << endl;\n            }\n        }\n    }\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cmath>\n#include<iomanip>\nusing namespace std;\n#define EPS 1e-10\n#define equals(a, b) (fabs((a) - (b)) < EPS)\nclass Point {\npublic:\n\tlong double x, y;\n\tPoint(long double x = 0, long double y = 0) :x(x), y(y) {}\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a) { return Point(x*a, y*a); }\n\tPoint operator / (double a) { return Point(x / a, y / a); }\n\tlong double abs() { return sqrt(norm()); }\n\tlong double norm() { return x*x + y*y; }\n\tbool operator < (const Point &p) const { return x != p.x ? x < p.x : y < p.y; }\n\tbool operator > (const Point &p) const { return x != p.x ? x > p.x : y > p.y; }\n\tbool operator == (const Point &p) const { return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS; }\n};\nstruct Segment {\n\tPoint p1, p2;\n};\nlong double norm(Point p) { return p.x*p.x + p.y*p.y; }\nlong double abs(Point p) { return sqrt(norm(p)); }\ndouble dot(Point a, Point b) {\n\treturn a.x*b.x + a.y*b.y;\n}\ndouble cross(Point a, Point b) {\n\treturn a.x*b.y - a.y*b.x;\n}\nint ccw(Point a, Point b, Point c) {\n\tPoint d = b - a;\n\tPoint e = c - a;\n\tif (cross(d, e) > EPS) { return 0; }\n\tif (cross(d, e) < -EPS) { return 1; }\n\tif (dot(d, e) < -EPS) { return 2; }\n\tif (dot(d, e) < e.norm()) { return 3; }\n\treturn 4;\n}\nPoint projection(Segment a, Point b) {\n\tPoint sa = a.p2 - a.p1;\n\tdouble hyp = dot(b - a.p1, sa); double r = hyp / norm(sa);\n\treturn a.p1 + sa * r;\n}\nPoint reflection(Segment a, Point b) {\n\treturn b + ((projection(a, b) - b)*2.0);\n}\nint main() {\n\tPoint P1, P2, P3; int q;\n\tcin >> P1.x >> P1.y >> P2.x >> P2.y;\n\tcin >> q;\n\tfor (int i = 0; i < q; i++) {\n\t\tcin >> P3.x >> P3.y;\n\t\tint s = ccw(P1, P2, P3);\n\t\tif (s == 0) { cout << \"COUNTER_CLOCKWISE\" << endl; }\n\t\tif (s == 1) { cout << \"CLOCKWISE\" << endl; }\n\t\tif (s == 2) { cout << \"ONLINE_BACK\" << endl; }\n\t\tif (s == 3) { cout << \"ONLINE_FRONT\" << endl; }\n\t\tif (s == 4) { cout << \"ON_SEGMENT\" << endl; }\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define REP(i,n) for (long long i=0;i<(n);i++)\n#define FOR(i,a,b) for (long long i=(a);i<(b);i++)\n#define RREP(i,n) for(long long i=n;i>=0;i--)\n#define RFOR(i,a,b) for(long long i=(a);i>(b);i--)\n#define dump1d_arr(array) REP(i,array.size()) cerr << #array << \"[\" << (i) << \"] ==> \" << (array[i]) << endl;\n#define dump2d_arr(array) REP(i,array.size()) REP(j,array[i].size()) cerr << #array << \"[\" << (i) << \"]\" << \"[\" << (j) << \"] ==> \" << (array[i][j]) << endl;\n#define dump(x)  cerr << #x << \" => \" << (x) << endl;\n#define dumpP(p) cerr << \"( \" << p.first << \" , \" << p.second << \" )\" << ends;\n#define CLR(vec) { REP(i,vec.size()) vec[i] = 0; } \n#define SORT(c) sort((c).begin(),(c).end())\n#define MIN(vec) *min_element(vec.begin(), vec.end());\n#define MAX(vec) *max_element(vec.begin(), vec.end());\n#define UNIQ(vec) vec.erase(unique(vec.begin(), vec.end()),vec.end());\n#define IN(n,m)  (!(m.find(n) == m.end()))\n#define ENUM(m) for (auto itr = m.begin(); itr != m.end(); ++itr)\n#define dump_MAP(m) for(auto itr = m.begin(); itr != m.end(); ++itr) { cerr << itr->first << \" --> \"  << itr->second << endl; }\n#define FINDL(vec,x) (lower_bound(vec.begin(),vec.end(),x) - vec.begin())\n#define FINDU(vec,x) (upper_bound(vec.begin(),vec.end(),x) - vec.begin())\n#define ROUND(N) setprecision(N)\nusing namespace std;\nconstexpr long double pi = M_PI;\nconstexpr double eps = 1e-10;\nconstexpr long mod = 1000000007;\nconstexpr short shINF = 32767;\nconstexpr long loINF = 2147483647;\nconstexpr long long llINF = 9223372036854775807;\ntypedef long long LL;\ntypedef vector<LL> VI;\ntypedef vector<VI> VVI;\ntypedef vector<string> VS;\ntypedef pair<LL,LL> pr;\ntypedef vector<pr> VP;\nstruct Order {\n  bool operator() (pr const& a,pr const& b) const {\n    return a.first > b.first || ((a.first == b.first) && (a.second > b.second));\n  }\n};\ntypedef struct _PT {\n  long double x, y;\n  _PT() {}\n  _PT(long double x,long double y) : x(x), y(y) {} \n  _PT operator + (_PT p){\n     return _PT(x + p.x, y + p.y);\n  }\n  _PT operator - (_PT p){\n     return _PT(x - p.x, y - p.y);\n  }\n  _PT operator * (long double d){\n     return _PT(d*x, d*y);\n  }\n  bool operator <(const struct _PT &e) const{\n     return x == e.x? (y < e.y) : x < e.x;\n  }\n  bool operator >(const struct _PT &e) const{\n     return x == e.x? (y > e.y) : x > e.x;\n  }\n\n  // --オプジェクトは位置ベクトル--\n\n  long double dist(_PT p){ //点pとの距離の2乗\n     return (x-p.x)*(x-p.x) + (y-p.y)*(y-p.y);\n  }\n\n  // --オブジェクトは幾何ベクトル--\n  \n  long double dot(_PT v){ //ベクトルvとの内積\n     return x * v.x + y * v.y;\n  }\n  \n  long double det(_PT v){ // ベクトルvとの外積\n     return x * v.y - v.x * y;\n  }\n\n  long double norm(void){ // ベクトルのノルム\n    return sqrt(x*x + y*y);\n  }\n\n  long double twiceNorm(void){ // ノルムの2乗\n    return x*x + y*y;\n  }\n\n  bool is_parallel(_PT v) { //ベクトルvと平行か(外積 = 0か)\n    return (abs(x * v.y - v.x * y) < eps);\n  }\n}P;\n\nint main(void) {\n  double px,py,qx,qy,rx,ry;\n  cin >> px >> py >> qx >> qy;\n  double base = atan2((qy-py),(qx-px));\n  int n;\n  cin >> n;\n  REP(i,n) {\n    cin >> rx >> ry;\n    double rad = atan2((ry-py),(rx-px));\n    if (abs(rad-base) < eps) {\n      if (P (rx-px,ry-py) > P (qx-px,qy-py)) cout << \"ONLINE_FRONT\" << endl;\n      else cout << \"ON_SEGMENT\" << endl;\n    }\n    else if (abs(abs(rad - base)-pi) < eps) cout << \"ONLINE_BACK\" << endl;\n    else if ((rad > base && (rad - base) < pi) || (rad < base && (base - rad) > pi)) cout << \"COUNTER_CLOCKWISE\" << endl;\n    else cout << \"CLOCKWISE\" << endl;\n  }\n\n}\n"
  },
  {
    "language": "C++",
    "code": "//#define NDEBUG\n#include \"bits/stdc++.h\"\n#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <unordered_set>\n#include <array>\n#include <random>\n#ifdef _MSC_VER\n#include <ppl.h>\n//#include <boost/multiprecision/cpp_dec_float.hpp>\n//#include <boost/multiprecision/cpp_int.hpp>\n//#include <boost/rational.hpp>\n//#include <opencv2/core.hpp>\n//#include <opencv2/imgproc.hpp>\n//#include <opencv2/highgui.hpp>\n//#else\n//#include <omp.h>\n#endif\n\n\nusing namespace std;\n\n#define DUMPOUT cerr\n#define dump(...) DUMPOUT<<\"  \";DUMPOUT<<#__VA_ARGS__<<\" :[\"<<__LINE__<<\":\"<<__FUNCTION__<<\"]\"<<endl;DUMPOUT<<\"    \";dump_func(__VA_ARGS__)\n\nusing uint = unsigned; using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using pdd = pair<double, double>; using pss = pair<string, string>;\ntemplate <typename _KTy, typename _Ty> ostream& operator << (ostream& o, const pair<_KTy, _Ty>& m) { o << \"{\" << m.first << \", \" << m.second << \"}\"; return o; }\ntemplate <typename _KTy, typename _Ty> ostream& operator << (ostream& o, const map<_KTy, _Ty>& m) { if (m.empty()) { o << \"{ }\"; return o; } o << \"{\" << *m.begin(); for (auto itr = ++m.begin(); itr != m.end(); itr++) { o << \", \" << *itr; } o << \"}\"; return o; }\ntemplate <typename _KTy, typename _Ty> ostream& operator << (ostream& o, const unordered_map<_KTy, _Ty>& m) { if (m.empty()) { o << \"{ }\"; return o; } o << \"{\" << *m.begin(); for (auto itr = ++m.begin(); itr != m.end(); itr++) { o << \", \" << *itr; } o << \"}\"; return o; }\ntemplate <typename _Ty> ostream& operator << (ostream& o, const vector<_Ty>& v) { if (v.empty()) { o << \"{ }\"; return o; } o << \"{\" << v.front(); for (auto itr = ++v.begin(); itr != v.end(); itr++) { o << \", \" << *itr; } o << \"}\"; return o; }\ntemplate <typename _Ty> ostream& operator << (ostream& o, const deque<_Ty>& v) { if (v.empty()) { o << \"{ }\"; return o; } o << \"{\" << v.front(); for (auto itr = ++v.begin(); itr != v.end(); itr++) { o << \", \" << *itr; } o << \"}\"; return o; }\ntemplate <typename _Ty> ostream& operator << (ostream& o, const set<_Ty>& s) { if (s.empty()) { o << \"{ }\"; return o; } o << \"{\" << *(s.begin()); for (auto itr = ++s.begin(); itr != s.end(); itr++) { o << \", \" << *itr; } o << \"}\"; return o; }\ntemplate <typename _Ty> ostream& operator << (ostream& o, const unordered_set<_Ty>& s) { if (s.empty()) { o << \"{ }\"; return o; } o << \"{\" << *(s.begin()); for (auto itr = ++s.begin(); itr != s.end(); itr++) { o << \", \" << *itr; }\to << \"}\"; return o; }\ntemplate <typename _Ty> ostream& operator << (ostream& o, const stack<_Ty>& s) { if (s.empty()) { o << \"{ }\"; return o; } stack<_Ty> t(s); o << \"{\" << t.top(); t.pop(); while (!t.empty()) { o << \", \" << t.top(); t.pop(); } o << \"}\";\treturn o; }\ntemplate <typename _Ty> ostream& operator << (ostream& o, const list<_Ty>& l) { if (l.empty()) { o << \"{ }\"; return o; } o << \"{\" << l.front(); for (auto itr = ++l.begin(); itr != l.end(); ++itr) { o << \", \" << *itr; } o << \"}\"; return o; }\ntemplate <typename _KTy, typename _Ty> istream& operator >> (istream& is, pair<_KTy, _Ty>& m) { is >> m.first >> m.second; return is; }\ntemplate <typename _Ty> istream& operator >> (istream& is, vector<_Ty>& v) { for (size_t t = 0; t < v.size(); t++) is >> v[t]; return is; }\ntemplate <typename _Ty> istream& operator >> (istream& is, deque<_Ty>& v) { for (size_t t = 0; t < v.size(); t++) is >> v[t]; return is; }\nnamespace aux { // print tuple\n  template<typename Ty, unsigned N, unsigned L> struct tp { static void print(ostream& os, const Ty& v) { os << get<N>(v) << \", \"; tp<Ty, N + 1, L>::print(os, v); } };\n  template<typename Ty, unsigned N> struct tp<Ty, N, N> { static void print(ostream& os, const Ty& v) { os << get<N>(v); } };\n}\n\ntemplate<typename... Tys> ostream& operator<<(ostream& os, const tuple<Tys...>& t) { os << \"{\"; aux::tp<tuple<Tys...>, 0, sizeof...(Tys) - 1>::print(os, t); os << \"}\"; return os; }\n\ntemplate<typename A, size_t N, typename T> inline void Fill(A(&array)[N], const T& val) { fill((T*)array, (T*)(array + N), val); }\n\ntemplate <typename ... Args>\nstd::string format(const std::string& fmt, Args ... args) {\n  size_t len = std::snprintf(nullptr, 0, fmt.c_str(), args ...);\n  std::vector<char> buf(len + 1);\n  std::snprintf(&buf[0], len + 1, fmt.c_str(), args ...);\n  return std::string(&buf[0], &buf[0] + len);\n}\n\nvoid dump_func() { DUMPOUT << endl; }\ntemplate <class Head, class... Tail> void dump_func(Head&& head, Tail&&... tail) { DUMPOUT << head; if (sizeof...(Tail) == 0) { DUMPOUT << \" \"; } else { DUMPOUT << \", \"; } dump_func(move(tail)...); }\n\n#define PI 3.14159265358979323846\n#define EPS 1e-8\n#define rep(t,n) for(int t=0;t<(n);++t)\n#define ALL(j) (j).begin(), (j).end()\n#define SZ(j) ((int)(j).size())\n#define fake false\n\nclass Timer {\npublic:\n  double t = 0;\n  Timer() {}\n  static double time() {\n#ifdef _MSC_VER\n    return __rdtsc() / 2.8e9;\n#else\n    unsigned long long a, d;\n    __asm__ volatile(\"rdtsc\"\n      : \"=a\"(a), \"=d\"(d));\n    return (d << 32 | a) / 2.8e9;\n#endif\n  }\n  void measure() { t = time() - t; }\n  double elapsedMs() { return (time() - t) * 1000.0; }\n} timer;\n\nstruct Xorshift {\n  uint64_t x = 88172645463325252LL;\n  unsigned next_int() {\n    x = x ^ (x << 7);\n    return x = x ^ (x >> 9);\n  }\n  unsigned next_int(unsigned mod) {\n    x = x ^ (x << 7);\n    x = x ^ (x >> 9);\n    return x % mod;\n  }\n  unsigned next_int(unsigned l, unsigned r) {\n    x = x ^ (x << 7);\n    x = x ^ (x >> 9);\n    return x % (r - l + 1) + l;\n  }\n  double next_double() {\n    return double(next_int()) / UINT_MAX;\n  }\n} rnd;\n\ntemplate<typename T>\nvoid shuffle_vector(vector<T>& v, Xorshift& rnd) {\n  int n = v.size();\n  for (int i = n - 1; i >= 1; i--) {\n    int r = rnd.next_int(i);\n    swap(v[i], v[r]);\n  }\n}\n\n\n\nnamespace geom {\n  constexpr double eps = 1e-8;\n  struct Point {\n    double x, y;\n    Point() : x(0.0), y(0.0) {}\n    Point(double x, double y) : x(x), y(y) {}\n    Point operator+(const Point& p) const { return Point(this->x + p.x, this->y + p.y); }\n    Point operator-(const Point& p) const { return Point(this->x - p.x, this->y - p.y); }\n    Point operator-() const { return Point(-this->x, -this->y); }\n    Point& operator+=(const Point& p) { return *this = *this + p; }\n    Point& operator-=(const Point& p) { return *this = *this - p; }\n    double length() const { return std::sqrt(x * x + y * y); }\n    friend std::ostream& operator<<(std::ostream& o, const Point& p) {\n      o << '(' << p.x << ',' << p.y << ')';\n      return o;\n    }\n  };\n  struct Line {\n    Point p1, p2;\n    Line() {}\n    Line(const Point& p1, const Point& p2) : p1(p1), p2(p2) {}\n    Line(double x1, double y1, double x2, double y2) : p1(Point(x1, y1)), p2(Point(x2, y2)) {}\n  };\n  Point projection(const Line& line, const Point& point) {\n    double x1 = line.p1.x, y1 = line.p1.y, x2 = line.p2.x, y2 = line.p2.y;\n    double x0 = point.x, y0 = point.y;\n    double x01 = x1 - x0, y01 = y1 - y0, x12 = x2 - x1, y12 = y2 - y1;\n    double sd12 = x12 * x12 + y12 * y12;\n    double x = (x12 * x12 * x0 + y12 * y12 * x1 - x12 * y12 * y01) / sd12;\n    double y = (x12 * x12 * y1 + y12 * y12 * y0 - x12 * y12 * x01) / sd12;\n    return Point(x, y);\n  }\n  Point reflection(const Line& line, const Point& point) {\n    Point proj = projection(line, point);\n    return proj + proj - point;\n  }\n  double cross_product(const Point& v1, const Point& v2) {\n    return v1.x * v2.y - v2.x * v1.y;\n  }\n  double inner_product(const Point& v1, const Point& v2) {\n    return v1.x * v2.x + v1.y * v2.y;\n  }\n  enum struct ccw_t {\n    COUNTER_CLOCKWISE,\n    CLOCKWISE,\n    ONLINE_BACK,\n    ONLINE_FRONT,\n    ON_SEGMENT\n  };\n  ccw_t ccw(const Point& p0, const Point& p1, const Point& p2) {\n    Point v1 = p1 - p0, v2 = p2 - p0;\n    if (cross_product(v1, v2) > eps) return ccw_t::COUNTER_CLOCKWISE;\n    if (cross_product(v1, v2) < -eps) return ccw_t::CLOCKWISE;\n    if (inner_product(v1, v2) < -eps) return ccw_t::ONLINE_BACK;\n    if (v1.length() < v2.length()) return ccw_t::ONLINE_FRONT;\n    return ccw_t::ON_SEGMENT;\n  }\n}\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n\n  using namespace geom;\n\n  double x0, y0, x1, y1;\n  cin >> x0 >> y0 >> x1 >> y1;\n  Point p0(x0, y0), p1(x1, y1);\n  int q;\n  cin >> q;\n  rep(_, q) {\n    double x2, y2;\n    cin >> x2 >> y2;\n    Point p2(x2, y2);\n    ccw_t type = ccw(p0, p1, p2);\n    switch (type) {\n    case geom::ccw_t::COUNTER_CLOCKWISE:\n      cout << \"COUNTER_CLOCKWISE\" << '\\n';\n      break;\n    case geom::ccw_t::CLOCKWISE:\n      cout << \"CLOCKWISE\" << '\\n';\n      break;\n    case geom::ccw_t::ONLINE_BACK:\n      cout << \"ONLINE_BACK\" << '\\n';\n      break;\n    case geom::ccw_t::ONLINE_FRONT:\n      cout << \"ONLINE_FRONT\" << '\\n';\n      break;\n    case geom::ccw_t::ON_SEGMENT:\n      cout << \"ON_SEGMENT\" << '\\n';\n      break;\n    default:\n      break;\n    }\n  }\n\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nusing ld = long double;\nconst ld eps = 1e-8, pi = acos(-1.0);\n\nbool eq(ld a, ld b) {\n\treturn abs(a - b) < eps;\n}\n\nusing Point = complex<ld>;\n\nclass Line {\npublic:\n\tPoint a, b;\n};\n\nld dot(Point a, Point b) {\n\treturn real(conj(a) * b);\n}\n\nld cross(Point a, Point b) {\n\treturn imag(conj(a) * b);\n}\n\nint ccw(Point a, Point b, Point c) {\n\tb -= a, c -= a;\n\tif (cross(b, c) > eps) return 1;\n\tif (cross(b, c) < -eps) return -1;\n\tif (dot(b, c) < 0) return 2;\n\tif (norm(b) < norm(c)) return -2;\n\treturn 0;\n}\n\nint main()\n{\n\tint q;\n\tld p1x, p1y, p2x, p2y, x, y;\n\tcout << fixed << setprecision(9);\n\tcin >> p1x >> p1y >> p2x >> p2y;\n\tPoint a(p1x, p1y), b(p2x, p2y);\n\tcin >> q;\n\twhile (q--) {\n\t\tcin >> x >> y;\n\t\tPoint c(x, y);\n\t\tswitch (ccw(a, b, c))\n\t\t{\n\t\tcase 1:\n\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t\tbreak;\n\t\tcase -1:\n\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t\tbreak;\n\t\tcase -2:\n\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t\tbreak;\n\t\tcase 0:\n\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <string>\n#include <vector>\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<stack>\n#include<queue>\n#include<cmath>\n#include<algorithm>\n#include<functional>\n//--\n#include<list>\n#include<deque>\n#include<bitset>\n#include<set>\n#include<map>\n#include<cstdio>\n#include<cstring>\n#include<sstream>\n#include<complex>\n#define X first\n#define Y second\n#define pb push_back\n#define rep(X,Y) for (int (X) = 0;(X) < (Y);++(X))\n#define rrep(X,Y) for (int (X) = Y-1;(X) >=0;--(X))\n#define all(X) (X).begin(),(X).end()\n#define rall(X) (X).rbegin(),(X).rend()\n\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> pii;\ntypedef complex<double> pt;\n\ndouble dot(pt a,pt b){return (conj(a)*b).real();}\ndouble cros(pt a,pt b){return (conj(a)*b).imag();}\npt proj(pt a,pt to){\n  return dot(a,to)/norm(to)*to;\n}\n\npt refle(pt a,pt mirror){\n  return pt(2)*proj(a,mirror)-a;\n}\n\nint pt3(pt a,pt b,pt c){\n  pt p=b-a,q=c-a;\n  double tmp;\n  tmp=cros(p,q);\n  if(tmp>0){\n    return 0;\n  }else if(tmp<0){\n    return 1;\n  }else if(dot(p,q)<0){\n    return 2;\n  }else if(norm(q)>norm(p)){\n    return 3;\n  }else if(norm(q)<norm(p)){\n    return 4;\n  }\n  return 5;\n}\nint main(){\n  int i,j,k,n;\n  pt o,p,q;\n // cout<<cros(pt(1,0),pt(0,-1))<<endl;\n  cin>>o.real()>>o.imag()>>p.real()>>p.imag();\n  cin>>n;\n  char str[][100]={\"COUNTER_CLOCKWISE\",\"CLOCKWISE\",\"ONLINE_BACK\"\n    ,\"ONLINE_FRONT\",\"ON_SEGMENT\",\"ON_SEGMENT\"};\n  double a,b;\n  rep(i,n){\n    cin>>a>>b;\n    q=pt(a,b);\n    printf(\"%s\\n\",str[pt3(0,p,q)]);\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nconstexpr double EPS = 1e-10;\ntypedef complex<double> Point;\ntypedef Point Vector;\ntypedef pair<Point, Point> Segment;\ntypedef Segment Line;\ntypedef pair<Point, double> Circle;\ntypedef vector<Point> Polygon;\ndouble dot(Vector a, Vector b){\n\treturn real(a) * real(b) + imag(a) * imag(b);\n}\ndouble cross(Vector a, Vector b){\n\treturn real(a) * imag(b) - imag(a) * real(b);\n}\nPoint project(Line l, Point p){\n\tVector base = l.second - l.first;\n\tbase /= abs(base);\n\tdouble r = dot(p - l.first, base);\n\treturn l.first + r * base;\n}\nPoint reflect(Line l, Point p){\n\treturn p + (project(l, p) - p) * 2.0;\n}\nint ccw(Point p0, Point p1, Point p2){\n\tVector v = p1 - p0, w = p2 - p0;\n\tif(cross(v, w) > EPS) return 1;\n\tif(cross(v, w) < -EPS) return -1;\n\tif(dot(v, w) < -EPS) return 2;\n\tif(norm(v) + EPS < norm(w)) return -2;\n\treturn 0;\n}\n\nint main(){\n\tcin.tie(0);\n\tios::sync_with_stdio(false);\n\tPoint p0, p1;\n\tdouble x, y;\n\tcin >> x >> y;\n\tp0 = Point(x, y);\n\tcin >> x >> y;\n\tp1 = Point(x, y);\n\tint q;\n\tcin >> q;\n\twhile(q--){\n\t\tcin >> x >> y;\n\t\tPoint p2(x, y);\n\t\tcout << vector<string>{\"ONLINE_FRONT\", \"CLOCKWISE\", \"ON_SEGMENT\", \"COUNTER_CLOCKWISE\", \"ONLINE_BACK\"}[ccw(p0, p1, p2)+2] << \"\\n\";\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <iostream>\n#include <vector>\n\nconst double kEpsilon = 1e-10;\n\ninline bool equals(double a, double b)\n{\n    return fabs(a - b) < kEpsilon;\n}\n\nclass Point\n{\n  public:\n    double x, y;\n\n    Point() = default;\n    Point(double x, double y) : x(x), y(y)\n    {\n    }\n\n    Point operator+(const Point &p)\n    {\n        return Point(x + p.x, y + p.y);\n    }\n    Point operator-(const Point &p)\n    {\n        return Point(x - p.x, y - p.y);\n    }\n    Point operator*(const double k)\n    {\n        return Point(x * k, y * k);\n    }\n\n    double SquaredNorm()\n    {\n        return x * x + y * y;\n    }\n    double abs()\n    {\n        return sqrt(this->SquaredNorm());\n    }\n\n    bool operator<(const Point &p) const\n    {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n    bool operator==(const Point &p) const\n    {\n        return fabs(x - p.x) < kEpsilon && fabs(y - p.y) < kEpsilon;\n    }\n\n    double dot(const Point &p) const\n    {\n        return x * p.x + y * p.y;\n    }\n    double cross(const Point &p) const\n    {\n        return x * p.y - y * p.x;\n    }\n};\n\ndouble dot(const Point &p1, const Point &p2)\n{\n    return p1.x * p2.x + p1.y * p2.y;\n}\ndouble cross(const Point &p1, const Point &p2)\n{\n    return p1.x * p2.y - p1.y * p2.x;\n}\n\nusing Vector = Point;\n\nint main()\n{\n    Point p0, p1, p2;\n    int q;\n\n    std::cin >> p0.x >> p0.y >> p1.x >> p1.y;\n    std::cin >> q;\n\n    Vector a, b;\n    a = p1 - p0;\n\n    auto println = [](auto s) { std::cout << s << std::endl; };\n\n    for (size_t i = 0; i < q; ++i)\n    {\n        std::cin >> p2.x >> p2.y;\n        b = p2 - p0;\n\n        auto cross_z = a.cross(b);\n\n        if (cross_z > 0.0)\n            println(\"COUNTER_CLOCKWISE\");\n        else if (cross_z < 0.0)\n            println(\"CLOCKWISE\");\n        else\n        {\n            auto dot_prod = a.dot(b);\n            if (dot_prod < 0.0)\n                println(\"ONLINE_BACK\");\n            else if (b.abs() > a.abs())\n                println(\"ONLINE_FRONT\");\n            else\n            {\n                println(\"ON_SEGMENT\");\n            }\n        }\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <vector>\n#include <stack>\n#include <queue>\n#include <map>\n#include <cmath>\n#include <string>\n#include <sstream>\n#include <iomanip>\nusing namespace std;\n\n#define ll long long\n#define vvi vector< vector<int> >\n#define All(X) X.begin(),X.end()\n#define FOR(i,a,b) for(int i=(int)(a);i<(int)(b);i++)\n#define REP(i,n) for(int i=0;i<(int)(n);i++)\n#define ld long double\n#define eps 1e-10\n\nbool eq(ld x,ld y){\n  if(abs(x-y)<eps) return true;\n  else return false;\n}\nld x[3],y[3];\nint q;\n\n\nstring rs[5]={\"COUNTER_CLOCKWISE\",\"CLOCKWISE\",\"ONLINE_BACK\",\"ONLINE_FRONT\",\"ON_SEGMENT\"};\n\nint main(){\n\n  cin >> x[0] >> y[0] >> x[1] >> y[1];\n  cin >> q;\n  REP(i,q){\n    int rst = -1;//not yet decided\n    cin >> x[2] >> y[2];\n    if(x[0]==x[1]){\n      if(x[2]<x[1]) rst = 1;\n      else rst = 2;\n      if (x[2]==x[1]) rst = -1;\n    }\n    if(rst<0){\n      ld tmp = y[0] + (y[1]-y[0])/(x[1]-x[0]) * (x[2]-x[0]);\n      if(eq(tmp,y[2])){\n        //on line\n        ld inpd = (x[1]-x[0])*(x[2]-x[0]) + (y[1]-y[0])*(y[2]-y[0]);\n        if(inpd<0) rst = 3;\n        else{\n          ld sz1 = (x[1]-x[0])*(x[1]-x[0])+(y[1]-y[0])*(y[1]-y[0]);\n          ld sz2 = (x[2]-x[0])*(x[2]-x[0])+(y[2]-y[0])*(y[2]-y[0]);\n          if(sz1<sz2) rst = 4;\n          else rst = 5;\n        }\n      }else{\n        //傾き \n        if((y[1]-y[0])/(x[1]-x[0])>0){\n          if(tmp<y[2]) rst = 1;\n          else rst = 2;\n        }else{\n          if(tmp>y[2]) rst = 1;\n          else rst = 2;\n        }\n      }\n    }\n    cout << rs[rst-1] << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <algorithm>\n#include <cfloat>\n#include <climits>\n#include <cmath>\n#include <complex>\n#include <cstdio>\n#include <cstdlib>\n#include <functional>\n#include <sstream>\n#include <string>\n#include <utility>\n#include <map>\n#include <memory>\n#include <set>\n#include <vector>\n#include <deque>\n#include <list>\n#include <stack>\n#include <queue>\n#include <array>\n\nusing namespace std;\n\nconst double eps = 1e-10;\n\nclass Vector\n{\npublic:\n  double x;\n  double y;\n\n  Vector(){}\n  Vector( double x, double y ) : x(x), y(y) {}\n\n  Vector operator + ( const Vector v ) { return Vector( x + v.x, y + v.y ); }\n  Vector operator - ( const Vector v ) { return Vector( x - v.x, y - v.y ); }\n  Vector operator * ( const double k ) { return Vector( x * k, y * k ); }\n  Vector operator / ( const double k ) { return Vector( x / k, y / k ); }\n  bool operator < ( const Vector &v ) const { return x * x + y * y < v.x * v.x + v.y * v.y; }\n\n  double abs() { return sqrt( norm() ); }\n  double norm() { return x * x + y * y; }\n\n  static double dot( Vector v1, Vector v2 ) { return v1.x * v2.x + v1.y * v2.y; }\n  static double cross( Vector v1, Vector v2 ) { return v1.x * v2.y - v1.y * v2.x; }\n};\n\nclass CounterClockwise\n{\npublic:\n  Vector p0, p1;\n  CounterClockwise(){}\n  CounterClockwise( double x0, double y0, double x1, double y1 ) : p0(x0, y0), p1(x1, y1) {}\n  int solve( double x, double y );\n};\n\nint CounterClockwise::solve( double x, double y )\n{\n  Vector p10 = p1 - p0;\n  Vector p20 = Vector( x, y ) - p0;\n\n  double c = Vector::cross( p10, p20 );\n  double d = Vector::dot( p10, p20 );\n  \n  if ( fabs( c ) < eps )\n    {\n      if ( d < 0 )\n        cout << \"ONLINE_BACK\" << endl;\n      else if ( p10.norm() < p20.norm() )\n        cout << \"ONLINE_FRONT\" << endl;\n      else\n        cout << \"ON_SEGMENT\" << endl;\n    }\n  else if ( c > 0 )\n    cout << \"COUNTER_CLOCKWISE\" << endl;\n  else\n    cout << \"CLOCKWISE\" << endl;\n  \n  return 0;\n}\n\nint main()\n{\n  double x0, y0, x1, y1;\n  cin >> x0 >> y0 >> x1 >> y1;\n  \n  int q;\n  cin >> q;\n\n  CounterClockwise cc(x0, y0, x1, y1);\n\n  for ( auto i = 0; i < q; ++i )\n    {\n      double x2, y2;\n      cin >> x2 >> y2;\n      cc.solve( x2, y2 );\n    }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "\n#include<cmath>\n#include<queue>\n#include<cstdio>\n#include<cctype>\n#include<vector>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nconst double pi=acos(-1),eps=1e-10;\nstruct Point\n{\n    double x,y;\n    Point(double x0=0,double y0=0) : x(x0) , y(y0) { }\n    friend bool operator<(Point a,Point b)\n    {\n        return a.x!=b.x?a.x<b.x:a.y<b.y;\n    }\n    friend Point operator+(const Point &a,const Point &b)\n    {\n        return Point(a.x+b.x,a.y+b.y);\n    }   \n    friend Point operator-(const Point &a,const Point &b)\n    {\n        return Point(a.x-b.x,a.y-b.y);\n    }\n    friend Point operator*(const Point &a,double b)\n    {\n        return Point(a.x*b,a.y*b);\n    }\n    friend Point operator/(const Point &a,double b)\n    {\n        return Point(a.x/b,a.y/b);\n    }\n    friend bool operator==(const Point &a,const Point &b){\n        return a.x==b.x&&a.y==b.y;\n    }  \n};\ntypedef Point Vector;\ndouble dcmp(double x)//符号判断 \n{\n    if(fabs(x)<eps)return 0;\n    else return x<0?-1:1;\n}\n\ndouble Dot(const Point &a,const Point &b)//点积 \n{\n    return a.x*b.x+a.y*b.y;\n}\ndouble Cross(const Point &a,const Point &b)//叉积 \n{\n    return a.x*b.y-a.y*b.x;\n}\ndouble Length(const Point &a)//求向量的长度 \n{\n    return sqrt(Dot(a,a));\n}\ndouble Angle(const Point &a,const Point &b)//求两个向量的夹角（余弦定理） \n{\n    return acos(Dot(a,b)/Length(a)/Length(b));//A^B=|A|*|B|*cosC\n}\nPoint Rotate(const Point &a,double rad)//逆时针旋转rad，r一个圆的rad为2pi\n{\n    return Point(a.x*cos(rad)-a.y*sin(rad),a.x*sin(rad)+a.y*cos(rad));\n}\nPoint Normal(Point &v)//求单位长度的法向量 \n{\n    double L=Length(v);\n    return Point(-v.y/L,v.x/L);\n}\nPoint getLineIntersection(const Point &P,const Point &v,const Point &Q,const Point &w)//求两个线段交点//Pv和Qw\n{\n    Vector u=P-Q;\n    double t=Cross(w,u)/Cross(v,w);\n    return P+v*t;\n}\nbool SegmentProperIntersection(const Point &a1,const Point &b1,const Point &a2,const Point &b2)//两线段规范相交、即每条线段的端点分别在另一条一段的两侧 \n{\n    double c1=Cross(b1-a1,a2-a1),c2=Cross(b1-a1,b2-a1);\n    double c3=Cross(b2-a2,a1-a2),c4=Cross(b2-a2,b1-a2);\n    return dcmp(c1)*dcmp(c2)<0 && dcmp(c3)*dcmp(c4)<0;\n}\nbool unnorm_Inter(const Point &a1,const Point &b1,const Point &a2,const Point &b2)//不规范相交\n{\n    return\n    max( a1.x , b1.x )>=min( a2.x , b2.x )&&\n    max( a2.x , b2.x )>=min( a1.x , b1.x )&&\n    max( a1.y , b1.y )>=min( a2.y , b2.y )&&\n    max( a2.y , b2.y )>=min( a1.y , b1.y )&&\n    dcmp(Cross((a2-b1),(a1-b1)))*dcmp(Cross((b2-b1),(b1-b1)))<=0&&\n    dcmp(Cross((a1-b2),(a2-b2)))*dcmp(Cross((b1-b2),(a2-b2)))<=0;\n}\n\nbool IsPointOnSegment(Point p,Point a1,Point a2)//点在线段上/直线\n{\n    return dcmp(Cross(p-a1,p-a2))==0 && dcmp(Dot(p-a1,p-a2))<0;\n    //线上两点与待定点的差积为0，且点积小于0，两线段表示反方向，去掉第二个判断条件就是在直线上\n}\ndouble getDistToLine(const Point &P, const Point &A, const Point &B)//点到直线的有向距离（距离加绝对值） \n{\n    Vector AB = B-A, AP = P-A;\n    return Cross(AB, AP) / Length(AB);\n}\ndouble Area2(Point A, Point B, Point C){//计算BA,CA所构成的平行四边形的有向面积\n    return Cross(B-A, C-A);\n}\nbool ToLeftTest(Point a, Point b, Point c){//判断ab在bc的顺时针方向\n    return Cross(b - a, c - b) > 0;\n}\nPoint GetLineProjection(Point P, Point A, Point B){//点P在直线AB上的投影点\n    Vector v = B-A;\n    return A+v*(Dot(v, P-A)/Dot(v, v));\n}\n//========================//\nint ConvexHull(Point *p,int n,Point *ch)//构造逆时针凸包 \n{\n    sort(p+1,p+n+1);//先按照横坐标再按照纵坐标排序 \n    int m=0;\n    for(int i=1;i<=n;i++)\n    {\n        while(m>1 && Cross(ch[m]-ch[m-1],p[i]-ch[m-1])<=0)m--;\n        ch[++m]=p[i];\n    }\n    int k=m;\n    for(int i=n-1;i;i--)\n    {\n        while(m>k && Cross(ch[m]-ch[m-1],p[i]-ch[m-1])<=0)m--;\n        ch[++m]=p[i];\n    }\n    if(n>1)m--;\n    return m;\n}\ndouble PolygonArea(Point *p,int n)//求逆时针构成的多边形（可不凸）面积 \n{\n    double ret=0;\n    for(int i=2;i<n;i++)//第一个点是p[1],所以这样循环 \n        ret+=Cross(p[i]-p[1],p[i+1]-p[1]);\n    return ret/2;\n}\n\nbool isPointInPolygon(Point p,Point *poly,int n)//点在凸多边形内的判定 \n{\n    int wn=0;\n    poly[n+1]=poly[1];\n    for(int i=1;i<=n;i++)\n    {\n        if(IsPointOnSegment(p,poly[i],poly[i+1]))return -1;\n        int k=dcmp(Cross(poly[i+1]-poly[i],p-poly[i]));\n        int d1=dcmp(poly[i].y-p.y);\n        int d2=dcmp(poly[i+1].y-p.y);\n        if(k>0 && d1<=0 && d2>0)wn++;\n        if(k<0 && d2<=0 && d1>0)wn--;\n    }\n    if(wn!=0)return 1;\n    return 0;\n}\nvoid update(int a,int b){}\nint findDiameter(Point *p,int n)//旋转卡壳求直径（Diatmeter：直径）\n{\n    int mx=0,j=2;\n    p[n+1]=p[1];\n    for(int i=1;i<=n;i++)\n    {\n        while(dcmp(Cross(p[i+1]-p[i],p[j+1]-p[j]))>0)\n        {\n            j++;\n            j=(j-1)%n+1;\n        }\n        update(i,j);\n        update(i+1,j);\n        update(i,j+1);\n        update(i+1,j+1);\n    }\n    return mx;\n}\nstruct Line\n{\n    Point P;Vector v;\n    double ang;\n    Line() {}\n    Line(Point P,Vector v):P(P),v(v){ang=atan2(v.y,v.x);}\n    Point point(double t){\n        return v+(P-v)*t;\n    }\n    friend bool operator<(Line a,Line b)\n    {\n        return  a.ang<b.ang;\n    }\n};\nPoint GetIntersection(Line a,Line b)//交点，要保证两直线相交，不然出现除数为0的情况\n{\n    Vector u=a.P-b.P;\n    double t=Cross(b.v,u)/Cross(a.v,b.v);\n    return a.P+a.v*t;\n}\ndouble DistanceToSegment(Point P, Point A, Point B){//点到线段的距离\n    if(A == B)\n        return Length(P-A);\n    Vector v1 = B-A, v2 = P-A, v3 = P-B;\n    if(dcmp(Dot(v1, v2)) < 0)\n        return Length(v2);\n    if(dcmp(Dot(v1, v3)) > 0)\n        return Length(v3);\n    return getDistToLine(P, A, B);\n}\nbool OnLeft(Line L,Point p)//暂时不懂什么意思，要推一下\n{\n    return Cross(L.v,p-L.P)>=0;\n}\nint HalfplaneIntersection(Line *L,int n,Point *poly)//半平面交 \n{\n    sort(L+1,L+n+1);\n    int first,last;\n    Point *p=new Point[n+10];\n    Line *q=new Line[n+10];\n    q[first=last=0]=L[1];\n    for(int i=2;i<=n;i++)\n    {\n        while(first<last && !OnLeft(L[i],p[last-1]))last--;\n        while(first<last && !OnLeft(L[i],p[first]))first++;\n        q[++last]=L[i];\n        if(fabs(Cross(q[last].v,q[last-1].v))<eps)\n        {\n            last--;\n            if(OnLeft(q[last],L[i].P))q[last]=L[i];\n        }\n        if(first<last)p[last-1]=GetIntersection(q[last-1],q[last]);\n    }\n    while(first<last && !OnLeft(q[first],p[last-1]))last--;\n    if(last-first<=1)return 0;\n    p[last]=GetIntersection(q[last],q[first]);\n    int m=0;\n    for(int i=first;i<=last;i++)poly[++m]=p[i];\n    return m;\n}\nbool OK(Point A,Point B,Point C,Point D)\n{\n    int a=Cross(A-C,D-C)>0;\n    int b=Cross(B-C,D-C)>0;\n    if(a!=b)return true;\n    else return false;\n}\n//过三点求圆心坐标\n//3种做法\n//====================//\nPoint waixin(Point a,Point b,Point c)//这个需要先判断是不是在同一条线上，必要的时候可以把除法去掉，如下面另外一个板子的做法\n{\n  double a1 = b.x - a.x, b1 = b.y - a.y, c1 = (a1*a1 + b1*b1)/2;\n  double a2 = c.x - a.x, b2 = c.y - a.y, c2 = (a2*a2 + b2*b2)/2;\n  double d = a1*b2 - a2*b1;//为0的话，三点共线特判一下\n  \n  return Point(a.x + (c1*b2 - c2*b1)/d, a.y + (a1*c2 -a2*c1)/d);\n}\n\ntypedef long long ll;\nstruct node\n{\n    ll x,y,d;\n};\nnode circle_center(const Point a,const Point b,const Point c)\n{\n    node center;\n    ll a1 = b.x-a.x,b1=b.y-a.y,c1=(a1*a1+b1*b1);\n    ll a2 = c.x-a.x,b2=c.y-a.y,c2=(a2*a2+b2*b2);\n    center.d=a1*b2-a2*b1;\n    if(center.d==0){//判断3点共线\n        center.x=1e18;\n        return center;\n    }\n    center.x=c1*b2-c2*b1;\n    center.y=a1*c2-a2*c1;\n\n    return center;\n}//求圆心\nvoid Cir(double ax,double ay,double bx,double by,double cx,double cy,double &x,double &y)\n{\n     double a1=atan2(by-ay,bx-ax)+acos(-1.)/2;\n     double a2=atan2(cy-by,cx-bx)+acos(-1.)/2;\n     ax=(ax+bx)/2,ay=(ay+by)/2;\n     bx=(cx+bx)/2,by=(cy+by)/2;\n     double r=(sin(a2)*(ax-bx)+cos(a2)*(by-ay))/(sin(a1)*cos(a2)-sin(a2)*cos(a1));\n     x=ax+r*cos(a1),y=ay+r*sin(a1);\n}\n\n//三角形面积，海伦公式：sqrt(p*(p-a)*(p-b)*(p-c)),p=(a+b+c)/2\n//a*b*sinC/2\n//外心（板子有了）三边中垂线交点，到三角形三个顶点距离相同\n//内心：角平分线的交点，到三角形三边的距离相同，先求向量的角度，然后用rotate求两个线段，再求交点\n//垂心：三条高线的交点，对两条边旋转90°，之后求交点\n//重心：三条中线的交点，到三角形三顶点距离的平方和最小的点，三角形内到三边距离之积最大的点\n//任意凸多边形外角和均为360°、\n// 任意凸多边形内角和为(n−2)180°\n//================================//\nint main()\n{\n    int q;\n    Point p1,p2,p3,p4;\n    cin>>p1.x>>p1.y>>p2.x>>p2.y;\n    cin>>q;\n    while(q--){\n        cin>>p3.x>>p3.y;\n        if(Cross(p2-p1,p3-p1)>0){\n            puts(\"COUNTER_CLOCKWISE\");\n        }else if(Cross(p2-p1,p3-p1)<0){\n            puts(\"CLOCKWISE\");\n        }else if(Cross(p2-p1,p3-p1)==0){\n            if(Dot(p2-p1,p3-p1)<0){\n                puts(\"ONLINE_BACK\");\n                continue;\n            }\n            double A=Length(p2-p1),B=Length(p3-p1);\n            if(A<B){\n                puts(\"ONLINE_FRONT\");\n            }else {\n                puts(\"ON_SEGMENT\");\n            }\n        }\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#define loop(i, s, e) for(ll i = s;i < e;i++)\n\n#include <iostream>\n#include <iomanip>\n#include <set>\n#include <vector>\n#include <queue>\n#include <stack>\n#include <utility>\n#include <algorithm>\n#include <map>\n#include <cmath>\n\nusing namespace std;\n\ntypedef long long signed ll;\n\n#define NAN_M 0x800000000000\n\ntemplate<typename T>\nclass Vector2D {\npublic:\n    T x;\n    T y;\n\n    Vector2D() {\n        x = y = 0;\n    }\n\n    Vector2D(T x_, T y_) {\n        x = x_;\n        y = y_;\n    }\n\n    T operator*(const Vector2D<T> *e) {\n        return this->x * e->x + this->y * e->y;\n    }\n\n    Vector2D<T> operator-(const Vector2D<T> *e) {\n        return Vector2D<T>(this->x - e->x, this->y - e->y);\n    }\n\n    Vector2D<T> operator+(const Vector2D<T> *e) {\n        return Vector2D<T>(this->x + e->x, this->y + e->y);\n    }\n\n    T operator*(const Vector2D<T> e) {\n        return this->x * e.x + this->y * e.y;\n    }\n\n    Vector2D<T> operator-(const Vector2D<T> e) {\n        return Vector2D<T>(this->x - e.x, this->y - e.y);\n    }\n\n    Vector2D<T> operator+(const Vector2D<T> e) {\n        return Vector2D<T>(this->x + e.x, this->y + e.y);\n    }\n\n    Vector2D<T> operator*(const T r) {\n        return Vector2D<T>(this->x * r, this->y * r);\n    }\n\n    Vector2D<T> operator/(const T r) {\n        return Vector2D<T>(this->x / r, this->y / r);\n    }\n\n    double abs() {\n        return sqrt(x * x + y * y);\n    }\n\n    T abs2() {\n        return x * x + y * y;\n    }\n\n    T cross(Vector2D<T> e) {\n        if(x * e.y >= y * e.x) return (x * e.y) - (y * e.x);\n        else return (y * e.x) - (x * e.y);\n    }\n\n    double cos(Vector2D<T> e) {\n        if((e.abs() * abs()) == 0) return NAN_M;\n        return (e * (*this)) / (e.abs() * abs());\n    }\n\n    double sin(Vector2D<T> e) {\n        if((e.abs() * abs()) == 0) return NAN_M;\n        return ((x * e.y) - (y * e.x)) / (e.abs() * abs());\n    }\n};\n\ntypedef Vector2D<double> vdd;\n\ndouble dist__(double x0, double y0, double x1, double y1, double xx, double yy) {\n    int b = 0;\n    vdd p[3] = {vdd(x0, y0), vdd(x1, y1), vdd(xx, yy)};\n    if (((p[0] - p[1]) * (p[2] - p[1])) < 0) b = -1;\n    if (((p[1] - p[0]) * (p[2] - p[0])) < 0) b = 1;\n    if (b == 1) return (p[2] - p[0]).abs();\n    if (b == -1) return (p[2] - p[1]).abs();\n    return (p[1] - p[0]).cross(p[2] - p[0]) / (p[1] - p[0]).abs();\n}\n\ndouble dist(double x0, double y0, double x1, double y1, double xx, double yy){\n    double res = dist__(x0,y0,x1,y1,xx,yy);\n    return res;\n}\nint main() {\n    int q;\n    vdd base,p;\n    cin >> base.x >> base.y >> p.x >> p.y;\n    cin >> q;\n    loop(i, 0, q) {\n        vdd z;\n        cin >> z.x >> z.y;\n        double cos = (p-base).cos(z-base);\n        double sin = (p-base).sin(z-base);\n        double cosr = (base-p).cos(z-p);\n        if(cos == NAN_M || cosr == NAN_M)\n            cout << \"ON_SEGMENT\" << endl;\n        else if(abs(cos - 1) < 0.0000000001 && abs(cosr - 1) < 0.0000000001)\n            cout << \"ON_SEGMENT\" << endl;\n        else if(abs(cos - 1) < 0.0000000001)\n            cout << \"ONLINE_FRONT\" << endl;\n        else if(abs(cos + 1) < 0.0000000001)\n            cout << \"ONLINE_BACK\" << endl;\n        else if(sin < 0)\n            cout << \"CLOCKWISE\" << endl;\n        else if(sin > 0)\n            cout << \"COUNTER_CLOCKWISE\" << endl;\n        else\n            cout << \"ON_SEGMENT\" << endl;\n    }\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "\n#include<bits/stdc++.h>\n\nusing namespace std;\n\n#define eps (1e-10)\nstruct point{\n    double x,y;\n    point(){}\n    point(double x,double y):x(x),y(y){}\n    point operator + (point &p){return point(x+p.x,y+p.y);}\n    point operator - (point &p){return point(x-p.x,y-p.y);}\n    point operator * (double k){return point(x*k,y*k);}\n    point operator / (double k){return point(x/k,y/k);}\n\n    double norm(){return x*x+y*y;}\n    double abs(){return sqrt(norm());}\n\n    bool operator < (const point &p){\n        return x!=p.x?x<p.x:y<p.y;\n    }\n    bool operator == (const point &p){\n        return fabs(x-p.x)<eps&&fabs(y-p.y)<eps;\n    }\n};\n//内积\ndouble dot(point a,point b)\n{\n    return a.x*b.x+a.y*b.y;\n}\n//外积\ndouble cross(point a,point b){\n    return a.x*b.y-a.y*b.x;\n}\n\nconst int counter_clockwise=1;\nconst int clockwise=-1;\nconst int online_back=2;\nconst int online_front=-2;\nconst int on_segment=0;\n\nstring ccw(point a,point b,point c)\n{\n    point temp1=b-a;\n    point temp2=c-a;\n    if(cross(temp1,temp2)>eps){return \"COUNTER_CLOCKWISE\";}\n    if(cross(temp1,temp2)<-eps){return \"CLOCKWISE\";}\n    if(dot(temp1,temp2)<-eps){return \"ONLINE_BACK\";}\n    if(temp1.norm()<temp2.norm()){return \"ONLINE_FRONT\";}\n    return \"ON_SEGMENT\";\n}\n\nint main()\n{\n    point a,b;\n    cin>>a.x>>a.y>>b.x>>b.y;\n    int q;\n    cin>>q;\n    point temp;\n    for(int i=0;i<q;i++){\n        cin>>temp.x>>temp.y;\n        string res=ccw(a,b,temp);\n        cout<<res<<endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <numeric>\n#include <string>\n#include <complex>\n#include <iomanip>\nusing namespace std;\ntypedef complex<double> P;\nconst double EPS = 1e-10;\n\nnamespace std\n{\nbool operator<(P &a, P &b)\n{\n    return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n}\n} // namespace std\n\ndouble dot(P a, P b)\n{\n    return real(a) * real(b) + imag(a) * imag(b);\n}\n\ndouble cross(P a, P b)\n{\n    return real(a) * imag(b) - imag(a) * real(b);\n}\n\nint ccw(P a, P b, P c)\n{\n    b -= a;\n    c -= a;\n    if (cross(b, c) > 0)\n        return 1;\n    if (cross(b, c) < 0)\n        return -1;\n    if (dot(b, c) < 0)\n        return 2;\n    if (norm(b) < norm(c))\n        return -2;\n    return 0;\n}\nint main(void)\n{\n\n    double a, b, c, d;\n    cin >> a >> b >> c >> d;\n\n    P p1(a, b);\n    P p2(c, d);\n    int q;\n    cin >> q;\n    for (int i = 0; i < q; ++i)\n    {\n        double x, y;\n        cin >> x >> y;\n        P p(x, y);\n\n        switch (ccw(p1, p2, p))\n        {\n        case (1):\n            cout << \"COUNTER_CLOCKWISE\" << endl;\n            break;\n        case (-1):\n            cout << \"CLOCKWISE\" << endl;\n            break;\n        case (2):\n            cout << \"ONLINE_BACK\" << endl;\n            break;\n        case (-2):\n            cout << \"ONLINE_FRONT\" << endl;\n            break;\n        case (0):\n            cout << \"ON_SEGMENT\" << endl;\n            break;\n        default:\n            break;\n        }\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n#define pu push\n#define pb push_back\n#define mp make_pair\n#define eps 1e-9\n#define Vector Point\n#define INF 2000000000\n#define sq(x) ((x)*(x))\n#define sz(x) ((int)(x).size())\n#define fi first\n#define sec second\n#define SORT(x) sort((x).begin(),(x).end())\n#define all(x) (x).begin(),(x).end()\n#define EQ(a,b) (abs((a)-(b))<eps)\n\n// ***** 幾何ライブラリ　線分と直線に注意!! 誤差に注意すること!! *****\n\ninline double add(double a,double b){\n\tif(abs(a+b)<eps*(abs(a)+abs(b)))return 0;\n\treturn a+b;\n}\n\nstruct Point{\n\tdouble x,y;\n\tPoint() {}\n\tPoint(double x,double y) : x(x),y(y){}\n\tPoint operator + (Point p){return Point(add(x,p.x),add(y,p.y));}\n\tPoint operator - (Point p){return Point(add(x,-p.x),add(y,-p.y));}\n\tPoint operator * (double d){return Point(x*d,y*d);}\n\tdouble dot(Point p){return add(x*p.x,y*p.y);}\n\tdouble det(Point p){return add(x*p.y,-y*p.x);}\n\tdouble norm(){return sqrt(x*x+y*y);}\n\tdouble norm2(){return x*x+y*y;}\n\tdouble dist2(Point p){return sq(x-p.x)+sq(y-p.y);}\n\tPoint vert(){return Point(y,-x);}\n\tvoid dump(const char* msg=\"\"){printf(\"%s(%.12f,%.12f)\\n\",msg,x,y);return;}\n\t\n\t// following functions for vector operation\n\n\t// signed area of triange (0,0) (x,y) (p.x,p.y)\n\tdouble area(Point p){\n\t\treturn (x*p.y-p.x*y)/2.0;\n\t}\n};\n// direction a -> b -> c\nint ccw(Point a,Point b,Point c){\n\tVector p = b-a;\n\tVector q = c-a;\n\tif(p.det(q)>0.0)return 1; // counter clockwise\n\tif(p.det(q)<0.0)return -1; // clockwise\n\tif(p.dot(q)<0.0)return 2; // c--a--b online_back\n\tif(p.norm()<q.norm())return 3; // a--b--c online_front \n\treturn 4;// a--c--b on_segment\n}\nstruct Line{\n\tPoint a,b;\n\tLine(){}\n\tLine(Point a,Point b):a(a),b(b){}\n\tbool on(Point q){\n\t\treturn (a-q).det(b-q)==0; \n\t}\n\tbool is_parallel(Line l){\n\t\treturn (a-b).det(l.a-l.b)==0;\n\t}\n\tPoint intersection(Line l){\n\t\tassert(!is_parallel(l));\n\t\treturn a+(b-a)*((l.b-l.a).det(l.a-a)/(l.b-l.a).det(b-a));\n\t}\n\t// projection of p to this line\n\t// verified AOJ CGL_1_A\n\tPoint projection(Point p){\n\t\treturn (b-a)*((b-a).dot(p-a)/(b-a).norm2())+a;\n\t}\n\t// reflection point of p onto this line\n\t// verified AOJ CGL_1_B\n\tPoint refl(Point p){\n\t\tPoint proj = projection(p);\n\t\treturn p+((proj-p)*2.0);\n\t}\n};\nstruct Segment{\n\tPoint a,b;\n\tSegment(){}\n\tSegment(Point a,Point b):a(a),b(b){}\n\tLine line(){\n\t\treturn Line(a,b);\n\t}\n\tbool on(Point q){\n\t\treturn ((a-q).det(b-q)==0&&(a-q).dot(b-q)<=0); \n\t}\n\tbool is_intersect(Segment s){\n\t\tif(a.x>b.x)swap(a,b);\n\t\tif(s.a.x>s.b.x)swap(s.a,s.b);\n\t\tPoint k = line().intersection(s.line());\n\t\tif((a.x<=k.x)&&(k.x<=b.x)&&(s.a.x<=k.x)&&(k.x<=s.b.x))return true;\n\t\telse return false;\n\t}\n\tbool is_intersect(Line l){\n\t\tif(a.x>b.x)swap(a,b);\n\t\tif(l.a.x>l.b.x)swap(l.a,l.b);\n\t\tPoint k = line().intersection(l);\n\t\tif((a.x<=k.x)&&(k.x<=b.x))return true;\n\t\telse return false;\n\t}\n};\ntypedef vector<Point> Polygon;\n\nint main(){\n\tPoint p1,p2;\n\tcin >> p1.x >> p1.y >> p2.x >> p2.y;\n\tint q;\n\tcin >> q;\n\tfor(int i=0;i<q;i++){\n\t\tPoint p3;\n\t\tcin >> p3.x >> p3.y;\n\t\tint ans = ccw(p1,p2,p3);\n\t\tif(ans==1)cout << \"COUNTER_CLOCKWISE\" << endl;\n\t\tif(ans==-1)cout << \"CLOCKWISE\" << endl;\n\t\tif(ans==2)cout << \"ONLINE_BACK\" << endl;\n\t\tif(ans==3)cout << \"ONLINE_FRONT\" << endl;\n\t\tif(ans==4)cout << \"ON_SEGMENT\" << endl;\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include <cstdlib>\n#include <stack>\n#include <queue>\n#include <list>\n#include <vector>\n#include <sstream>\n\nusing namespace std;\n\nclass c_main\n{\nprivate:\n    \npublic:\n    c_main();\n    void f_input();\n};\n\nc_main::c_main()\n{\n\n}\n\nvoid c_main::f_input()\n{\n    double xp1,yp1,xp2,yp2;\n    int q;\n    int i;\n    double x[1000];\n    double y[1000];\n    double a;\n    double b;\n    double x_a;\n    double y_a;\n    double a_a;\n    double b_a;\n    int pt1;\n\n    cin >> xp1 >> yp1 >> xp2 >> yp2;\n    \n    if (xp1 == xp2){\n        x_a = xp1;\n        y_a = 0;\n        pt1 = 0;\n    }else if (yp1 == yp2){\n        x_a = 0;\n        y_a = yp1; \n        pt1 = 1;\n    }else{\n        \n        a_a = (yp2-yp1)/(xp2-xp1);\n      \n        a = -1 * (1/a_a);\n       \n        b_a = -1 * a_a * xp1+ yp1;\n        pt1 = 2;\n    }\n    \n    cin >> q;\n    \n    for ( i = 0; i < q; ++i){\n        cin >> x[i] >> y[i];\n        if (pt1 == 0){\n            if(yp1 >= yp2){\n                if(x[i] == x_a){\n                    if(y[i] > yp1){\n                        cout << \"ONLINE__BACK\" << endl;\n                    }else if(y[i] < yp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(yp2 <= y[i] && y[i] <= yp1){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(x[i] < x_a){\n                    cout << \"CLOCKWISE\" << endl;\n                    \n                }else if(x[i] > x_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n     \n                }\n            }else{\n                if(x[i] == x_a){\n                    if(y[i] < yp1){\n                        cout << \"ONLINE_BACK\" << endl;\n                    }else if(y[i] > yp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(yp1 <= y[i] && y[i] <= yp2){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(x[i] < x_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n                    \n                }else if(x[i] > x_a){\n                    cout << \"CLOCKWISE\" << endl;\n                }\n            }\n            //printf(\"%10.10f %10.10f\\n\", x_a,y[i]);\n            \n        }else if(pt1 == 1){\n            if(xp1 >= xp2){\n                if(y[i] == y_a){\n                    if(x[i] > xp1){\n                        cout << \"ONLINE_BACK\" << endl;\n                    }else if(x[i] < xp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(xp2 <= x[i] && x[i] <= xp1){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(y[i] < y_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n                }else if(y[i] > y_a){\n                    cout << \"CLOCKWISE\" << endl;\n                }\n            }else{\n                if(y[i] == y_a){\n                    if(x[i] < xp1){\n                        cout << \"ONLINE_BACK\" << endl;\n                    }else if(x[i] > xp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(xp1 <= x[i] && x[i] <= xp2){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(y[i] < y_a){\n                    cout << \"CLOCKWISE\" << endl;\n                }else if(y[i] > y_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n                }\n            }\n            //printf(\"%10.10f %10.10f\\n\", x[i],y_a);\n        }else if(pt1 == 2){\n            b = -1 * a * x[i] + y[i];\n            x_a = (b - b_a)/(a_a - a);\n            y_a = a_a * x_a + b_a;\n            if(xp1 >= xp2){\n                if(y[i] == y_a){\n                    if(x[i] > xp1){\n                        cout << \"ONLINE_BACK\" << endl;\n                    }else if(x[i] < xp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(xp2 <= x[i] && x[i] <= xp1){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(y[i] < y_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n                }else if(y[i] > y_a){\n                    \n                    cout << \"CLOCKWISE\" << endl;\n                }\n            }else{\n                if(y[i] == y_a){\n                    if(x[i] < xp1){\n                        cout << \"ONLINE_BACK\" << endl;\n                    }else if(x[i] > xp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(xp1 <= x[i] && x[i] <= xp2){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(y[i] < y_a){\n                    cout << \"CLOCKWISE\" << endl;\n                }else if(y[i] > y_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n                }\n            }\n            //printf(\"%10.10f %10.10f\\n\", x_a,y_a);\n        }\n    }\n}\n\nint main(){\n    c_main main01;\n    main01.f_input();\n    \n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "    // BISMILLAHIR_RAHMANIR_RAHIM\n    #include <bits/stdc++.h>\n    #define ll long long\n    #define in1(a) scanf(\"%lld\",&a)\n    #define in2(a,b) scanf(\"%lld %lld\",&a,&b)\n    #define ins(a) scanf(\"%s\",a)\n    #define inf(a) scanf(\"%lf\",&a)\n    #define out1(a) printf(\"%lld\", a)\n    //Nazmul Hossain Nahid\n    #define space printf(\"\\n\")\n    #define enter printf(\"\\n\")\n    #define out2(a,b) printf(\"%lld %lld\\n\",a,b)\n    #define f(x,to) for(int x=0;x<(to);x++)\n    #define all(a) (a.begin()),(a.end())\n    #define ZERO(a) memset(a,0,sizeof(a))\n    #define pb push_back\n    #define F first\n    #define S second\n    #define debug cout<<\" OK \"<<endl\n    #define eps 0.000001\n\n\n    using namespace std;\n\n\n    int main()\n    {\n        ios_base::sync_with_stdio(false);cin.tie(NULL);\n        ll x1,y1,x2,y2,x3,y3,i,j,area,q,x,y,xp,yp;\n        cin>>x1>>y1>>x2>>y2;\n\n        cin>>q;\n        f(i,q)\n        {\n            cin>>x3>>y3;\n\n            area=x1*y2-x2*y1+x2*y3-x3*y2+x3*y1-x1*y3;\n            //ans\n            if(area>0)\n            {\n                cout<<\"COUNTER_CLOCKWISE\"<<endl;\n            }\n            else if(area<0)\n            {\n                cout<<\"CLOCKWISE\"<<endl;\n            }\n            else if(area==0)\n            {\n\n                ll p1=(x1-x2)*(x1-x2)+(y1-y2)*(y1-y2);\n                ll p2=(x2-x3)*(x2-x3)+ (y2-y3)*(y2-y3);\n                ll p3=(x3-x1)*(x3-x1)+(y3-y1)*(y3-y1);\n                long double p0p1=sqrt(p1);\n                long double p0p2=sqrt(p2);\n                long double p1p2=sqrt(p3);\n\n                if(((p0p2+p1p2)-p0p1)<=eps || x3==x1 && y3==y1 || x3==x2 && y3==y2 )\n                    cout<<\"ON_SEGMENT\"<<endl;\n                else if(((p0p1+p1p2)-p0p2)<=eps)\n                    cout<<\"ONLINE_BACK\"<<endl;\nelse if(((p0p1+p0p2)-p1p2)<=eps)\n                    cout<<\"ONLINE_FRONT\"<<endl;\n\n            }\n\n        }\n\n\n    \treturn 0;\n    }\n\n  // ALHAMDULLIAH\n\n  /* ll px1=x2-x1; ll py1=y2-y1;\n                ll px2=x3-x1; ll py1=y3-y1;\n\n                if((p0p1+p0p2)==p1p2)\n                    cout<<\"ONLINE_FRONT\"<<endl;\n                else if((p0p2+p1p2)==p0p1 )\n                    cout<<\"ON_SEGMENT\"<<endl;\n                else if((p0p1+p1p2)==p0p2)\n  cout<<\"ONLINE_BACK\"<<endl;\n\n                */\n\n\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <algorithm>\n#include <cstdio>\n#include <vector>\n#include <queue>\n#include <set>\n#include <map>\n#include <numeric>\n#include <cmath>\n \nusing namespace std;\n \ntypedef long long int ll;\ntypedef pair<int,int> Pint;\ntypedef pair<double,double> Pdouble;\n \n#define all(x) x.begin(),x.end()\n \nconst ll mod = 1e9+7;\nconst ll INF = 1e9;\nconst ll MAXN = 1e9;\n \ndouble dot(Pint p1,Pint p2){\n    return p1.first*p2.first + p1.second*p2.second;\n}\n\ndouble closs(Pint p1,Pint p2){\n    return p1.first*p2.second - p1.second*p2.first;\n}\ndouble vector_length(Pint p){\n    return pow(p.first*p.first+p.second*p.second,0.5);\n}\n \ndouble cos_(Pint p1,Pint p2){\n    return dot(p1,p2)/(vector_length(p1)*vector_length(p2));\n}\n\ndouble sin_(Pint p1,Pint p2){\n    return closs(p1,p2)/(vector_length(p1)*vector_length(p2));\n}\n \nPdouble proj(Pint p1,Pint p2,Pint a,Pint b){\n    Pint pp = Pint(p2.first-p1.first,p2.second-p1.second);\n    double ans_x = (double)p1.first + vector_length(a)*cos_(a,b)*pp.first/vector_length(pp);\n    double ans_y = (double)p1.second + vector_length(a)*cos_(a,b)*pp.second/vector_length(pp);\n\n    return Pdouble(ans_x,ans_y);\n}\n \nbool vector_equal(Pint p,Pint q){\n    return (p.first == q.first) && (p.second == q.second);\n}\n\nvoid clock_wise(Pint q0,Pint q1,Pint q2){\n    Pint q0q1 = Pint(q1.first-q0.first,q1.second-q0.second);\n    Pint q0q2 = Pint(q2.first-q0.first,q2.second-q0.second);\n\n    printf(\"%.12f\\n\", cos_(q0q1,q0q2));\n\n    if(cos_(q0q1,q0q2) == (double)-1){\n        cout << \"ONLINE_BACK\" << endl;\n    }else if(cos_(q0q1,q0q2) == (double)1){\n        //cout << \"alkhfl\" << endl;\n        if(vector_length(q0q1)<vector_length(q0q2)) cout << \"ONLINE_FRONT\" << endl;\n        else cout << \"ON_SEGMENT\" << endl;\n    }else{\n        if(sin_(q0q1,q0q2)>0) cout << \"COUNTER_CLOCKWISE\" << endl;\n        else if(sin_(q0q1,q0q2)<0) cout << \"CLOCKWISE\" << endl;\n        else{\n            if(cos_(q0q1,q0q2)<0) cout << \"ONLINE_BACK\" << endl;\n            else if(vector_length(q0q1)<vector_length(q0q2)) cout << \"ONLINE_FRONT\" << endl;\n            else cout << \"ON_SEGMENT\" << endl;\n        }\n    }\n}\n \nint main()\n{\n    Pint p0,p1;\n    cin >> p0.first >> p0.second >> p1.first >> p1.second;\n    int q;\n    cin >> q;\n    for(int i = 0; i < q; i++){\n        Pint p2;\n        cin >> p2.first >> p2.second;\n \n        if(vector_equal(p2,p1)||vector_equal(p2,p0)){\n            cout << \"ON_SEGMENT\" << endl;\n            continue;\n        }\n \n        clock_wise(p0,p1,p2);\n    }\n \n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include <cstdlib>\n#include <stack>\n#include <queue>\n#include <list>\n#include <vector>\n#include <sstream>\n\nusing namespace std;\n\nclass c_main\n{\nprivate:\n    \npublic:\n    c_main();\n    void f_input();\n};\n\nc_main::c_main()\n{\n\n}\n\nvoid c_main::f_input()\n{\n    double xp1,yp1,xp2,yp2;\n    int q;\n    int i;\n    double x[1000];\n    double y[1000];\n    double a;\n    double b;\n    double x_a;\n    double y_a;\n    double a_a;\n    double b_a;\n    int pt1;\n\n    cin >> xp1 >> yp1 >> xp2 >> yp2;\n    \n    if (xp1 == xp2){\n        x_a = xp1;\n        y_a = 0;\n        pt1 = 0;\n    }else if (yp1 == yp2){\n        x_a = 0;\n        y_a = yp1; \n        pt1 = 1;\n    }else{\n        \n        a_a = (yp2-yp1)/(xp2-xp1);\n      \n        a = -1 * (1/a_a);\n       \n        b_a = -1 * a_a * xp1+ yp1;\n        pt1 = 2;\n    }\n    \n    cin >> q;\n    \n    for ( i = 0; i < q; ++i){\n        cin >> x[i] >> y[i];\n        if (pt1 == 0){\n            if(yp1 >= yp2){\n                if(x[i] == x_a){\n                    if(y[i] > yp1){\n                        cout << \"ONLINE__BACK\" << endl;\n                    }else if(y[i] < yp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(yp2 <= y[i] && y[i] <= yp1){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(x[i] < x_a){\n                    cout << \"CLOCKWISE\" << endl;\n                    \n                }else if(x[i] > x_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n     \n                }\n            }else{\n                if(x[i] == x_a){\n                    if(y[i] < yp1){\n                        cout << \"ONLINE_BACK\" << endl;\n                    }else if(y[i] > yp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(yp1 <= y[i] && y[i] <= yp2){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(x[i] < x_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n                    \n                    \n                    \n                }else if(x[i] > x_a){\n                    cout << \"CLOCKWISE\" << endl;\n                }\n            }\n            //printf(\"%10.10f %10.10f\\n\", x_a,y[i]);\n            \n        }else if(pt1 == 1){\n            if(xp1 >= xp2){\n                if(y[i] == y_a){\n                    if(x[i] > xp1){\n                        cout << \"ONLINE_BACK\" << endl;\n                    }else if(x[i] < xp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(xp2 <= x[i] && x[i] <= xp1){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(y[i] < y_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n                }else if(y[i] > y_a){\n                    cout << \"CLOCKWISE\" << endl;\n                }\n            }else{\n                if(y[i] == y_a){\n                    if(x[i] < xp1){\n                        cout << \"ONLINE_BACK\" << endl;\n                    }else if(x[i] > xp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(xp1 <= x[i] && x[i] <= xp2){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(y[i] < y_a){\n                    cout << \"CLOCKWISE\" << endl;\n                }else if(y[i] > y_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n                }\n            }\n            //printf(\"%10.10f %10.10f\\n\", x[i],y_a);\n        }else if(pt1 == 2){\n            b = -1 * a * x[i] + y[i];\n            x_a = (b - b_a)/(a_a - a);\n            y_a = a_a * x_a + b_a;\n            if(xp1 >= xp2){\n                if(y[i] == y_a){\n                    if(x[i] > xp1){\n                        cout << \"ONLINE_BACK\" << endl;\n                    }else if(x[i] < xp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(xp2 <= x[i] && x[i] <= xp1){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(y[i] < y_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n                }else if(y[i] > y_a){\n                    \n                    cout << \"CLOCKWISE\" << endl;\n                }\n            }else{\n                if(y[i] == y_a){\n                    if(x[i] < xp1){\n                        cout << \"ONLINE_BACK\" << endl;\n                    }else if(x[i] > xp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(xp1 <= x[i] && x[i] <= xp2){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(y[i] < y_a){\n                    cout << \"CLOCKWISE\" << endl;\n                }else if(y[i] > y_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n                }\n            }\n            //printf(\"%10.10f %10.10f\\n\", x_a,y_a);\n        }\n    }\n}\n\nint main(){\n    c_main main01;\n    main01.f_input();\n    \n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <cmath>\n\nusing namespace std;\n\ntemplate <typename T>\nstruct Vec2;\n\ntemplate <typename T>\nT SqrMagnitude(const Vec2<T>& v);\n\ntemplate <typename T>\nT Magnitude(const Vec2<T>& v);\n\ntemplate <typename T>\nT Dot(const Vec2<T>& v1, const Vec2<T>& v2);\n\n\ntemplate <typename T>\nstruct Vec2 {\n    T x, y;\n    Vec2() = default;\n    Vec2(T in_x, T in_y)\n        : x {in_x}, y {in_y} {};\n    Vec2(const Vec2&) = default;\n    Vec2(Vec2&&) = default;\n\n    Vec2 normalized() const{\n        T mag = Magnitude(*this);\n        return {x / mag, y / mag};\n    }\n\n    Vec2 normalize() {\n        T mag = Magnitude(*this);\n        return {x /= mag, y /= mag};\n    }\n\n    Vec2 operator-() {\n        return {-x, -y};\n    }\n\n    Vec2 operator+(const Vec2& rhs) const{\n        return {x + rhs.x, y + rhs.y};\n    }\n\n    Vec2 operator-(const Vec2& rhs) const{\n        return {x - rhs.x, y - rhs.y};\n    }\n\n    Vec2 operator*(T rhs) const{\n        return {x * rhs, y * rhs};\n    }\n\n    Vec2 operator/(T rhs) const{\n        return {x / rhs, y / rhs};\n    }\n\n    Vec2& operator+=(const Vec2& rhs) {\n        x += rhs.x;\n        y += rhs.y;\n        return *this;\n    }\n\n    Vec2& operator-=(const Vec2& rhs) {\n        x -= rhs.x;\n        y -= rhs.y;\n        return *this;\n    }\n\n    Vec2& operator*=(T rhs) {\n        x *= rhs;\n        y *= rhs;\n        return *this;\n    }\n\n    Vec2& operator/=(T rhs) {\n        x /= rhs;\n        y /= rhs;\n        return *this;\n    }\n};\n\ntemplate <typename T>\ninline Vec2<T> operator*(T s, const Vec2<T>& v) {\n    return {s * v.x, s * v.y};\n}\n\n\ntemplate <typename T>\ninline T SqrMagnitude(const Vec2<T>& v) {\n    return Dot(v, v);\n}\n\ntemplate <typename T>\ninline T Magnitude(const Vec2<T>& v) {\n    return sqrt(SqrMagnitude(v));\n}\n\ntemplate <typename T>\ninline T Dot(const Vec2<T>& v1, const Vec2<T>& v2) {\n    return v1.x * v2.x + v1.y * v2.y;\n}\n\ntemplate <typename T>\ninline T Cross(const Vec2<T>& v1, const Vec2<T>& v2) {\n    return v1.x * v2.y - v1.y *v2.x;\n}\n\nint main() {\n    constexpr double tolerance = 1e-10f;\n\n    Vec2<int> p0, p1, p2;\n\n    cin >> p0.x >> p0.y >> p1.x >> p1.y;\n\n    int n;\n    cin >> n;\n\n    auto p_01 = p1 - p0;\n\n    for(int i = 0; i < n && cin >> p2.x >> p2.y; ++i) {\n        auto p_02 = p2 - p0;        \n\n        auto cross = Cross(p_01, p_02);\n\n        if(cross > 0) {\n            cout << \"COUNTER_CLOCKWISE\" << endl;\n        }\n        else if(cross < 0){\n            cout << \"CLOCKWISE\" << endl;\n        }\n        else {\n            int normalizedDot {Dot(p_01.normalized(), p_02)};\n            if(normalizedDot >= 0.0) {\n                cout << (normalizedDot > Magnitude(p_01) ? \"ONLINE_FRONT\" : \"ON_SEGMENT\") << endl;\n            }\n            else {\n                cout << \"ONLINE_BACK\" << endl;\n            }\n            \n        }\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <complex>\nusing namespace std;\n\ntypedef complex<int> point;\n\nint dot(point a,point b){\n\treturn (a*conj(b)).real();\n}\n\nint cross(point a,point b){\n\treturn (a*conj(b)).imag();\n}\nint main(void){\n\tint x,y;\n\tint q;\n\tcin>>x>>y;\n\tpoint p0(x,y);\n\tcin>>x>>y;\n\tpoint p1(x,y);\n\tpoint p0p1=p1-p0;\n\tcin>>q;\n\twhile(q--){\n\t\tcin>>x>>y;\n\t\tpoint p2(x,y);\n\t\tpoint p0p2=p2-p0;\n\t\tif(cross(p0p1,p0p2)<0)cout<<\"COUNTER_CLOCKWISE\"<<endl;\n\t\telse if(cross(p0p1,p0p2)>0)cout<<\"CLOCKWISE\"<<endl;\n\t\telse if(dot(p0p1,p0p2)<0)cout<<\"ONLINE_BACK\"<<endl;\n\t\telse if(norm(p0p1)<norm(p0p2))cout<<\"ONLINE_FRONT\"<<endl;\n\t\telse cout<<\"ON_SEGMENT\"<<endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#include <math.h>\n#include <iostream>\n#include <iomanip>\nusing namespace std;\n\nint main() {\n\tcin.tie(0); ios::sync_with_stdio(false);\n\tint x0, y0, x1, y1; cin >> x0 >> y0 >> x1 >> y1;\n\tint X1 = x1 - x0, Y1 = y1 - y0;\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tint x2, y2; cin >> x2 >> y2;\n\t\tint X2 = x2 - x0, Y2 = y2 - y0;\n\t\tint cross = X1*Y2 - Y1*X2;\n\t\tif (cross > 0) { cout << \"COUNTER_CLOCKWISE\" << endl; continue; }\n\t\tif (cross < 0) { cout << \"CLOCKWISE\" << endl; continue; }\n\t\t//??????????????§cross == 0 ?????????????¢????\n\t\tint vertical = X1*X2 + Y1*Y2;\n\t\tif (vertical < 0) { cout << \"ONLINE_BACK\" << endl; continue; }\n\t\tif (X2*X2 + Y2*Y2 > X1*X1 + Y1*Y1) { cout << \"ONLINE_FRONT\" << endl; continue; }\n\t\tcout << \"ON_SEGMENT\" << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n\nstatic const int COUNTER_CLOCKWISE=1;\nstatic const int CLOCKWISE=-1;\nstatic const int ONLINE_BACK=2;\nstatic const int ONLINE_FRONT=-2;\nstatic const int ON_SEGMENT=0;\n\nclass Point {\npublic:\n    double x,y;\n\n    Point(double x=0,double y=0):x(x),y(y) {}\n    Point operator + (Point p) {return Point(x+p.x,y+p.y);}\n    Point operator - (Point p) {return Point(x-p.x,y-p.y);}\n    Point operator * (double a) {return Point(a*x,a*y);}\n    Point operator / (double a) {return Point(x/a,y/a);}\n\n    double abs() {return sqrt(norm());}\n    double norm() {return x*x+y*y;}\n\n    bool operator<(const Point &p) const {\n        return x!=p.x ? x<p.x : y<p.y;\n    }\n    bool operator==(const Point &p) const {\n        return fabs(x-p.x)<EPS && fabs(y-p.y)<EPS;\n    }\n};\n\ntypedef Point Vector;\nstruct Segment {Point p1,p2;};\ntypedef Segment Line;\n\nclass Circle {\npublic:\n    Point c;\n    double r;\n    Circle(Point c=Point(),double r=0.0): c(c),r(r) {}\n};\n\ndouble dot(Vector a,Vector b) {\n    return  a.x*b.x+a.y*b.y;\n}\n\ndouble cross (Vector a,Vector b) {\n    return a.x*b.y-a.y*b.x;\n}\n\ndouble getDistance(Point a,Point b) {\n    return (a-b).abs();\n}\n\ndouble getDistanceLP(Line l,Point p) {\n    return abs(cross(l.p2-l.p1,p-l.p1)/(l.p2-l.p1).abs());\n}\n\ndouble getDistanceSP(Segment s,Point p) {\n    if(dot(s.p2-s.p1,p-s.p1)<0.0) return (p-s.p1).abs();\n    if(dot(s.p1-s.p2,p-s.p2)<0.0) return (p-s.p2).abs();\n    return getDistanceLP(s,p);\n}\n\nint ccw(Point p0,Point p1,Point p2) {\n    Vector a=p1-p0;\n    Vector b=p2-p0;\n    if(cross(a,b)>EPS) return COUNTER_CLOCKWISE;\n    if(cross(a,b)<-EPS) return CLOCKWISE;\n    if(dot(a,b)<-EPS) return ONLINE_BACK;\n    if(a.norm()<b.norm()) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\nint main(void) {\n    Point p0,p1;\n    cin>>p0.x>>p0.y>>p1.x>>p1.y;\n    int q;cin>>q;\n    while(q) {\n        Point p2;\n        cin>>p2.x>>p2.y;\n        int ans=ccw(p0,p1,p2);\n        if(ans==COUNTER_CLOCKWISE) cout<<\"COUNTER_CLOCKWISE\"<<endl;\n        else if(ans==CLOCKWISE) cout<<\"CLOCKWISE\"<<endl;\n        else if(ans==ONLINE_BACK) cout<<\"ONLINE_BACK\"<<endl;\n        else if(ans==ONLINE_FRONT) cout<<\"ONLINE_FRONT\"<<endl;\n        else cout<<\"ON_SEGMENT\"<<endl;\n        q--;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nstruct point{\n\tint x,y;\n\tpoint operator - (const point p){\n\t\tpoint pp;\n\t\tpp.x=x-p.x;\n\t\tpp.y=y-p.y;\n\t\treturn pp;\n\t}\n}p0,p1,p2;\ndouble waiji(point p1,point p2){\n\treturn p1.x*p2.y-p1.y*p2.x;\n}\ndouble neiji(point p1,point p2){\n\treturn p1.x*p2.x+p1.y*p2.y;\n}\nvoid solve(){\n\tdouble xc=waiji(p1-p0,p2-p0);\t\n\tif(xc>0){cout<<\"COUNTER_CLOCKWISE\"<<endl;return;}\n\tif(xc<0){cout<<\"CLOCKWISE\"<<endl;return;}\n\tif(neiji(p1-p0,p2-p0)<0){cout<<\"ONLINE_BACK\"<<endl;return;}\n\tif(abs(p1.x-p0.x)<abs(p2.x-p0.x)){cout<<\"ONLINE_FRONT\"<<endl;return;}\n\tcout<<\"ON_SEGMENT\"<<endl;\n}\nint main(){\n\tcin>>p0.x>>p0.y;\n\tcin>>p1.x>>p1.y;\n\tint T; cin>>T;\n\twhile(T--){\n\t\tcin>>p2.x>>p2.y;\n\t\tsolve();\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <algorithm>\n#include <iomanip>\nusing namespace std;\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nclass Point {\n    public:\n    double x, y;\n\n    Point(double x = 0, double y = 0): x(x), y(y) {}\n\n    Point operator + (Point p) { return Point(x + p.x, y + p.y); }\n    Point operator - (Point p) { return Point(x - p.x, y - p.y); }\n    Point operator * (double a) { return Point(x * a, y * a); }\n    Point operator / (double a) { return Point(x / a, y / a); }\n\n    double norm() { return x * x + y * y; }\n    double abs() { return sqrt(norm()); }\n\n    bool operator < (const Point &p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point &p) const {\n        return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n    }\n};\n\nstruct Segment {\n    Point p1, p2;\n};\n\ntypedef Point Vector;\ntypedef Segment Line;\n\ndouble dot(Vector a, Vector b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n    return a.x * b.y - a.y * b.x; \n}\n\nbool isOrthogonal(Vector a, Vector b) {\n    return equals(dot(a, b), 0.0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n    return isOrthogonal(a1 - a2, b1 - b2);\n}\n\nbool isOrthogonal(Segment s1, Segment s2) {\n    return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nbool isParallel(Vector a, Vector b) {\n    return equals(cross(a, b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n    return isParallel(a1 - a2, b1 - b2);\n}\n\nbool isParallel(Segment s1, Segment s2) {\n    return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nPoint project(Segment s, Point p) {\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / base.norm();\n    return s.p1 + base * r;\n}\n\nPoint reflect(Segment s, Point p) {\n    return p + (project(s, p) - p) * 2.0;\n}\n\ndouble getDistance(Point a, Point b) {\n    return (a - b).abs();\n}\n\ndouble getDistanceLP(Line l, Point p) {\n    return fabs(cross(l.p2 - l.p1, p - l.p1)) / (l.p2 - l.p1).abs();\n}\ndouble getDistanceSP(Segment s, Point p) {\n    if ( dot(s.p2 - s.p1, p - s.p1) < 0.0) return (p - s.p1).abs();\n    if ( dot(s.p1 - s.p2, p - s.p2) < 0.0) return (p - s.p2).abs();\n    return getDistanceLP(s, p);\n}\n\nint ccw(Point p0, Point p1, Point p2) {\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if ( cross(a, b) > EPS ) return COUNTER_CLOCKWISE;\n    if ( cross(a, b) < -EPS ) return CLOCKWISE;\n    if ( dot(a, b) < -EPS ) return ONLINE_BACK;\n    if ( a.norm() < b.norm() ) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n    return ( ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n             ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0 );\n}\n\nbool intersect(Segment s1, Segment s2) {\n    return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\ndouble getDistance(Segment s1, Segment s2) {\n    if ( intersect(s1, s2) ) return 0.0;\n    return min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n               min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\nint main()\n{\n    int q;\n    string str;\n    double x1, x2, x3, y1, y2, y3;\n    cin >> x1 >> y1 >> x2 >> y2;\n    Point p1 = Point(x1, y1);\n    Point p2 = Point(x2, y2);\n    cin >> q;\n    for (int i = 0; i != q; ++i)\n    {\n        cin >> x3 >> y3;\n        Point p3 = Point(x3, y3);\n        switch ( ccw(p1, p2, p3) )\n        {\n            case COUNTER_CLOCKWISE: str = \"COUNTER_CLOCKWISE\"; break;\n            case CLOCKWISE: str = \"CLOCKWISE\"; break;\n            case ONLINE_BACK: str = \"ONLINE_BACK\"; break;\n            case ONLINE_FRONT: str = \"ONLINE_FRONT\"; break;\n            case ON_SEGMENT: str = \"ON_SEGMENT\"; break;\n        }\n        cout << str << endl;\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\nconst ll INF = 1e18;\nconst int BIG = 1e9 + 555;\n\nstruct Point {\n\tdouble x, y;\n\tPoint() {};\n\tPoint(double _x, double _y) : x(_x), y(_y) {};\n};\n\nint n, q;\nPoint p[4];\n\nPoint operator - (const Point &a, const Point &b){\n\treturn Point(a.x - b.x, a.y - b.y);\n}\n\ndouble dot(Point a, Point b){\n\treturn a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Point a, Point b){\n\treturn a.x * b.y - a.y * b.x;\n}\n\nconst double EPS = 1e-10;\n\ndouble dist(const Point &p, const Point &q){\n\tdouble dx = p.x - q.x;\n\tdouble dy = p.y - q.y;\n\n\treturn sqrt(dx * dx + dy * dy);\n}\n\nbool eq(double a, double b){\n\treturn fabs(a - b) < EPS;\n}\n\nvoid direction(Point a, Point b, Point c){\n\tdouble crs = cross(b - a, c - a);\n\tdouble ab = dist(a, b);\n\tdouble ac = dist(a, c);\n\n\tif(eq(crs, 0)){\n\t\tdouble cosAlpha = dot(b - a, c - a) / ab / ac;\n\t\tif(eq(cosAlpha, -1)){\n\t\t\tcout << \"ONLINE_BACK\\n\";\n\t\t} else {\n\t\t\tif(ab < ac){\n\t\t\t\tcout << \"ONLINE_FRONT\\n\";\n\t\t\t} else {\n\t\t\t\tcout << \"ON_SEGMENT\\n\";\n\t\t\t}\n\t\t}\n\t\treturn;\n\t}\n\n\tif(crs > 0){\n\t\tcout << \"COUNTER_CLOCKWISE\\n\";\n\t} else if(crs < 0){\n\t\tcout << \"CLOCKWISE\\n\";\n\t}\n}\n\nint main(){\n\tios::sync_with_stdio(false);\n\tcin.tie(0);\n\tcout.tie(0);\n\t\n\tcin >> p[0].x >> p[0].y >> p[1].x >> p[1].y;\n\n\tcin >> q;\n\n\twhile(q--){\n\t\tcin >> p[2].x >> p[2].y;\n\t\tdirection(p[0], p[1], p[2]);\n\t}\n\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define mkp make_pair\n#define rep(i,n) for(int i=0;i<(n);++i)\ntypedef long long ll;\n\nconst ll MOD=1e9+7;\nconst double EPS=1e-9;\nconst double PI=acos(-1.0);\n//const long double PI=acos(-1.0L);\n\nstruct Point{\n    double x,y;\n    Point(){}\n    Point(double x,double y):x(x),y(y){}\n\n    Point operator +(const Point &b) const {return Point(x+b.x,y+b.y);}\n    Point operator -(const Point &b) const {return Point(x-b.x,y-b.y);}\n    Point operator *(const double b) const {return Point(x*b,y*b);}\n    Point operator /(const double b) const {return Point(x/b,y/b);}\n};\n\nstruct Line{\n    Point a,b;\n    Line(){}\n    Line(Point a,Point b):a(a),b(b){}\n};\n\nint sgn(double a) {return (a>EPS)-(a<-EPS);}\nint sgn(double a,double b) {return sgn(a-b);}\n\ndouble dot(const Point &a,const Point &b) {return (a.x*b.x+a.y*b.y);}\ndouble cross(const Point &a,const Point &b) {return (a.x*b.y-a.y*b.x);}\ndouble norm(const Point &p) {return dot(p,p);}\ndouble abs(const Point &p) {return sqrt(norm(p));}\n\nPoint projection(const Point &p,const Line &l){\n    double r=dot(p-l.a,l.b-l.a)/norm(l.b-l.a);\n    return l.a+(l.b-l.a)*r;\n}\n\nPoint reflection(const Point &p,const Line &l){\n    return p+(projection(p,l)-p)*2;\n}\n\n//1:Counter_Clockwise -1:Clockwise\n//2:a-b-c -2:c-a-b 0:a-c-b\nint ccw(const Point &p,const Point &q){\n    int s=sgn(cross(p,q));\n    if(s!=0) return s;\n    if(dot(p,q)<0) return -2;\n    if(norm(p)<norm(q)) return 2;\n    return 0;\n}\nint ccw(const Point &a,const Point &b,const Point &c){return ccw(b-a,c-a);}\n\nint main(){\n    Point P1,P2;\n    cin>>P1.x>>P1.y>>P2.x>>P2.y;\n    int Q;\n    cin>>Q;\n\n    Line L(P1,P2);\n    for(int q=0;q<Q;q++){\n        Point p;\n        cin>>p.x>>p.y;\n\n        int type=ccw(P1,P2,p);\n        switch(type){\n            case 1: cout<<\"COUNTER_CLOCKWISE\"<<endl;break;\n            case -1: cout<<\"CLOCKWISE\"<<endl;break;\n            case 2: cout<<\"ONLINE_FRONT\"<<endl;break;\n            case -2: cout<<\"ONLINE_BACK\"<<endl;break;\n            case 0: cout<<\"ON_SEGMENT\"<<endl;break;\n        }\n    }\n\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#pragma warning(disable : 4267) // \"int n = (unsigned)size\"\n\nusing vi = vector<int>; using vvi = vector<vi>; using vvvi = vector<vvi>;\nusing ll = long long int;\nusing vll = vector<ll>; using vvll = vector<vll>; using vvvll = vector<vvll>;\nusing vd = vector<double>; using vvd = vector<vd>; using vvvd = vector<vvd>;\nusing P = pair<int, int>;\nusing Pll = pair<ll, ll>;\nusing cdouble = complex<double>;\n\nconst double eps = 1e-9;\nconst double INFD = numeric_limits<double>::infinity();\n#define Loop(i, n) for(int i = 0; i < int(n); i++)\n#define Loopll(i, n) for(ll i = 0; i < ll(n); i++)\n#define Loop1(i, n) for(int i = 1; i <= int(n); i++)\n#define Loopll1(i, n) for(ll i = 1; i <= ll(n); i++)\n#define Loopr(i, n) for(int i = int(n) - 1; i >= 0; i--)\n#define Looprll(i, n) for(ll i = ll(n) - 1; i >= 0; i--)\n#define Loopr1(i, n) for(int i = int(n); i >= 1; i--)\n#define Looprll1(i, n) for(ll i = ll(n); i >= 1; i--)\n#define Foreach(buf, container) for(auto buf : container)\n#define Loopdiag(i, j, h, w, sum) for(int i = ((sum) >= (h) ? (h) - 1 : (sum)), j = (sum) - i; i >= 0 && j < (w); i--, j++)\n#define Loopdiagr(i, j, h, w, sum) for(int j = ((sum) >= (w) ? (w) - 1 : (sum)), i = (sum) - j; j >= 0 && i < (h); j--, i++)\n#define Loopdiagsym(i, j, h, w, gap) for (int i = ((gap) >= 0 ? (gap) : 0), j = i - (gap); i < (h) && j < (w); i++, j++)\n#define Loopdiagsymr(i, j, h, w, gap) for (int i = ((gap) > (h) - (w) - 1 ? (h) - 1 : (w) - 1 + (gap)), j = i - (gap); i >= 0 && j >= 0; i--, j--)\n#define Loopitr(itr, container) for(auto itr = container.begin(); itr != container.end(); itr++)\n#define printv(vector) Loop(ex_i, vector.size()) { cout << vector[ex_i] << \" \"; } cout << endl;\n#define printmx(matrix) Loop(ex_i, matrix.size()) { Loop(ex_j, matrix[ex_i].size()) { cout << matrix[ex_i][ex_j] << \" \"; } cout << endl; }\n#define quickio() ios::sync_with_stdio(false); cin.tie(0);\n#define bitmanip(m,val) static_cast<bitset<(int)m>>(val)\n#define Comp(type_t) bool operator<(const type_t &another) const\n#define fst first\n#define snd second\nbool nearlyeq(double x, double y) { return abs(x - y) < eps; }\nbool inrange(ll x, ll t) { return x >= 0 && x < t; }\nbool inrange(vll xs, ll t) { Foreach(x, xs) if (!(x >= 0 && x < t)) return false; return true; }\nint ceillog2(ll x) { int ret = 0;\tx--; while (x > 0) { ret++; x >>= 1; } return ret; }\nll rndf(double x) { return (ll)(x + (x >= 0 ? 0.5 : -0.5)); }\nll floorsqrt(ll x) { ll m = (ll)sqrt((double)x); return m + (m * m <= x ? 0 : -1); }\nll ceilsqrt(ll x) { ll m = (ll)sqrt((double)x); return m + (x <= m * m ? 0 : 1); }\nll rnddiv(ll a, ll b) { return (a / b + (a % b * 2 >= b ? 1 : 0)); }\nll ceildiv(ll a, ll b) { return (a / b + (a % b == 0 ? 0 : 1)); }\nll gcd(ll m, ll n) { if (n == 0) return m; else return gcd(n, m % n); }\nll lcm(ll m, ll n) { return m * n / gcd(m, n); }\n\n/*******************************************************/\n\nstruct intpt_t {\n\tll x, y;\n\tintpt_t operator+(const intpt_t &p) { return { x + p.x, y + p.y }; }\n\tintpt_t operator-(const intpt_t &p) { return { x - p.x, y - p.y }; }\n\tintpt_t operator*(const ll &c) { return { x * c, y * c }; }\n\tintpt_t operator/(const ll &c) { return { x / c, y / c }; }\n\tbool operator==(const intpt_t &p) { return x == p.x && y == p.y; }\n};\n\nstruct pt_t {\n\tdouble x, y;\n\tpt_t operator+(const pt_t &p) { return { x + p.x, y + p.y }; }\n\tpt_t operator-(const pt_t &p) { return { x - p.x, y - p.y }; }\n\tpt_t operator*(const double &c) { return { x * c, y * c }; }\n};\n\npt_t cvtpt(intpt_t p) {\n\treturn { double(p.x), double(p.y) };\n}\n\n// ax + by + c = 0\nstruct line_t {\n\tdouble a, b, c;\n};\n\npt_t cross_point(line_t l, line_t m) {\n\tpt_t ret = { INFD, INFD };\n\tdouble d = l.a * m.b - m.a * l.b;\n\tif (nearlyeq(d, 0)) return ret;\n\tdouble x = l.b * m.c - m.b * l.c;\n\tdouble y = l.a * m.c - m.a * l.c;\n\tret = { x / d, y / -d };\n\treturn ret;\n}\n\n// normal vector = (a, b), passing p\nline_t solve_line(double a, double b, pt_t p) {\n\treturn { a, b, -a * p.x - b * p.y };\n}\n\n// t should be radius\npt_t rot(pt_t p, double r) {\n\treturn {\n\t\tcos(r) * p.x - sin(r) * p.y,\n\t\tsin(r) * p.x + cos(r) * p.y\n\t};\n}\n\ndouble abs(pt_t p) {\n\treturn sqrt(p.x * p.x + p.y * p.y);\n}\n\n// angle [0, 2PI) of vector p to vector q\ndouble angle(pt_t p, pt_t q) {\n\tp = p * (1.0 / abs(p));\n\tq = q * (1.0 / abs(q));\n\tdouble r0 = acos(p.x * q.x + p.y * q.y);\n\tdouble r1 = asin(p.x * q.y - p.y * q.x);\n\tif (r1 >= 0) return r0;\n\telse return 2 * M_PI - r0;\n}\n\ndouble dist(line_t l, pt_t p) {\n\treturn abs(l.a * p.x + l.b * p.y + l.c)\n\t\t/ sqrt(l.a * l.a + l.b * l.b);\n}\n\nbool on_same_line(intpt_t p, intpt_t q) {\n\tint mask = (p.x ? 0 : 0b1000) + (p.y ? 0 : 0b100)\n\t\t+ (q.x ? 0 : 0b10) + (q.y ? 0 : 0b1);\n\tif ((mask & 0b1100) == 0b1100 || (mask & 0b0011) == 0b0011) return true;\n\tif ((mask & 0b1010) == 0b1010 || (mask & 0b0101) == 0b0101) return true;\n\tif (mask == 0b0000) {\n\t\tp = p / gcd(p.x, p.y);\n\t\tq = q / gcd(q.x, q.y);\n\t\tif (p.x < 0) p = p * -1;\n\t\tif (q.x < 0) q = q * -1;\n\t\tif (p == q) return true;\n\t\telse return false;\n\t}\n\telse return false;\n}\n\nint main() {\n\tintpt_t p0, p1;\n\tcin >> p0.x >> p0.y >> p1.x >> p1.y;\n\tint q; cin >> q;\n\tcout << setprecision(20);\n\tLoop(i, q) {\n\t\tintpt_t p2;\n\t\tcin >> p2.x >> p2.y;\n\t\tintpt_t ip = p1 - p0;\n\t\tintpt_t iq = p2 - p0;\n\t\tpt_t p = cvtpt(ip);\n\t\tpt_t q = cvtpt(iq);\n\t\tbool judge;\n\t\tif (on_same_line(ip, iq)) judge = true;\n\t\telse judge = false;\n\t\tdouble r = angle(p, q);\n\t\tif (judge) {\n\t\t\tif (M_PI * 0.5 < r && M_PI * 1.5) {\n\t\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (abs(q) > abs(p)) {\n\t\t\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif (r < M_PI) {\n\t\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\t\t}\n\t\t}\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <map>\n#include <vector>\n#include <cmath>\n#include <iomanip>\n#include <string>\n#include <queue>\n#include <algorithm>\n#include <cctype>\n#define shosu(x) fixed<<setprecision(x)\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> P;\ntypedef pair<double,double> pdd;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef vector<P> vp;\ntypedef vector<vp> vvp;\ntypedef pair<int,P> pip;\ntypedef vector<pip> vip;\nconst int inf=1<<30;\nconst double pi=acos(-1);\nconst double eps=1e-8;\n\nstruct point{\n\tdouble x,y;\n\tpoint operator+(point Gep){\n\t\treturn point{x+Gep.x,y+Gep.y};\n\t}\n\tpoint operator-(point Gep){\n\t\treturn point{x-Gep.x,y-Gep.y};\n\t}\n\tpoint operator*(double Gex){\n\t\treturn point{x*Gex,y*Gex};\n\t}\n\tpoint operator/(double Gex){\n\t\tif(!Gex) return point{0,0}; \n\t\treturn point{x/Gex,y/Gex};\n\t}\n\tbool operator==(point Gep){\n\t\treturn fabs(x-Gep.x)<eps&&fabs(y-Gep.y)<eps;\n\t}\n};\n\nclass Geom{\n\tprivate:\n\tvector<point> Ge;\n\tvector<pair<point,point> > Geseg,Geline;\n\tpublic:\n\tvoid line_push(point Gex,point Gey){\n\t\tGeline.push_back(make_pair(Gex,Gey));\n\t}\n\tvoid seg_push(point Gex,point Gey){\n\t\tGeseg.push_back(make_pair(Gex,Gey));\n\t}\n\tvoid point_push(point Gex){\n\t\tGe.push_back(Gex);\n\t}\n\tpoint DIP(pair<point,point> Gex,pdd Gey){\n\t\tdouble Gea=Gey.first,Geb=Gey.second;\n\t\tpoint Ge1=Gex.first,Ge2=Gex.second;\n\t\treturn (Ge1*Geb+Ge2*Gea)/(Gea+Geb);\n\t}\n\tpoint POI(pair<point,point>Gex,pair<point,point> Gey){\n\t\tpair<point,point> Ge1(PRO(Gex,Gey.first),PRO(Gex,Gey.second));\n\t\tpdd Ger(EXTLEN(Gey.first,Ge1.first),EXTLEN(Gey.second,Ge1.second));\n\t\treturn DIP(Ge1,Ger);\n\t}\n\tdouble IP(point Gex,point Gey){\n\t\treturn Gex.x*Gey.x+Gex.y*Gey.y;\n\t}\n\tdouble CP(point Gex,point Gey){\n\t\treturn Gex.x*Gey.y-Gey.x*Gex.y;\n\t}\n\tdouble LEN(point Gex){\n\t\treturn sqrt(Gex.x*Gex.x+Gex.y*Gex.y);\n\t}\n\tdouble EXTLEN(point Gex,point Gey){\n\t\treturn LEN(Gex-Gey);\n\t}\n\tpoint PRO(pair<point,point> Gea,point Gex){\n\t\tpoint Ge1=Gex-Gea.second,Ge2=Gea.first-Gea.second;\n\t\treturn Ge2*(IP(Ge1,Ge2)/(LEN(Ge2)*LEN(Ge2)))+Gea.second;\n\t}\n\tpoint REF(pair<point,point> Gea,point Gex){\n\t\tpoint Ge1=PRO(Gea,Gex);\n\t\treturn Ge1*2-Gex;\n\t}\n\tint JUD(point Gea,point Geb,point Gex){\n\t\tif(Gea==Geb||Gex==Geb) return 0;\n\t\tpoint Ge1=Gea-Gex,Ge2=Geb-Gex;\n\t\tdouble Getmp=CP(Ge1,Ge2);\n\t\tif(Getmp>0) return 1;\n\t\tif(Getmp<0) return 2;\n\t\tif(IP(Ge1,Ge2)<0) return 3;\n\t\tif(LEN(Ge1)<LEN(Ge2)) return 4;\n\t\treturn 5;\n\t}\n\tpair<point,point> line_open(int Gex){\n\t\treturn Geline[Gex];\n\t}\n\tpoint point_open(int Gex){\n\t\treturn Ge[Gex];\n\t}\n\tpair<point,point> seg_open(int Gex){\n\t\treturn Geseg[Gex];\n\t}\n};\n\nint q;\ndouble x,xx,y,yy,xxx,yyy;\n\nint main(){\n\tcout<<shosu(10);\n\tcin>>x>>y>>xx>>yy>>q;\n\tfor(int i=0;i<q;i++){\n\t\tcin>>xxx>>yyy;\n\t\tGeom geo;\n\t\tgeo.point_push(point{x,y});\n\t\tgeo.point_push(point{xx,yy});\n\t\tint ans=geo.JUD(geo.point_open(1),point{xxx,yyy},geo.point_open(0));\n\t\tif(ans==1) cout<<\"COUNTER_CLOCKWISE\"<<endl;\n\t\telse if(ans==2) cout<<\"CLOCKWISE\"<<endl;\n\t\telse if(ans==3) cout<<\"ONLINE_BACK\"<<endl;\n\t\telse if(ans==4) cout<<\"ONLINE_FRONT\"<<endl;\n\t\telse cout<<\"ON_SEGMENT\"<<endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\n#define REP(i,n) for(int i=0,_n=(int)(n);i<_n;++i)\n#define ALL(v) (v).begin(),(v).end()\n#define CLR(t,v) memset(t,(v),sizeof(t))\ntemplate<class T1,class T2>ostream& operator<<(ostream& os,const pair<T1,T2>&a){return os<<\"(\"<<a.first<<\",\"<<a.second<< \")\";}\ntemplate<class T>void pv(T a,T b){for(T i=a;i!=b;++i)cout<<(*i)<<\" \";cout<<endl;}\ntemplate<class T>void chmin(T&a,const T&b){if(a>b)a=b;}\ntemplate<class T>void chmax(T&a,const T&b){if(a<b)a=b;}\n\n\ntypedef long double D;\nconst D PI = acos(-1.0);\nconst D EPS = 1e-10;\nclass P { public:\n  D x, y;\n  P(D x=0, D y=0) : x(x), y(y) {}\n\n  P& operator+=(const P& o) { x += o.x; y += o.y; return *this; }\n  P& operator-=(const P& o) { x -= o.x; y -= o.y; return *this; }\n  P& operator*=(const P& o) { return *this = {x*o.x - y*o.y, x*o.y + y*o.x}; }\n  P& operator*=(const D& r) { x *= r; y *= r; return *this; }\n  P& operator/=(const D& r) { x /= r; y /= r; return *this; }\n  P operator-() const { return {-x, -y}; }\n\n  D norm() const { return x*x + y*y; }\n  D abs() const { return sqrt(norm()); }\n  D arg() const { return atan2(y, x); }\n  bool isZero() const { return std::abs(x) < EPS && std::abs(y) < EPS; }\n  /** 象限 */\n  int orth() const { return y >= 0 ? (x >= 0 ? 1 : 2) : (x < 0 ? 3 : 4); }\n  static P polar(const D& rho, const D& theta = 0) { return {rho * cos(theta), rho * sin(theta)}; }\n};\nstd::ostream &operator<<(std::ostream &os, P const &p) { return os << \"(\" << p.x << \", \" << p.y << \")\"; }\nstd::istream &operator>>(std::istream &is, P &p) { D a, b; is >> a >> b; p = P(a, b); return is; }\nP operator+(const P& p, const P& q) { return P(p) += q; }\nP operator-(const P& p, const P& q) { return P(p) -= q; }\nP operator*(const P& p, const P& q) { return P(p) *= q; }\nP operator*(const P& p, const D& r) { return P(p) *= r; }\nP operator/(const P& p, const D& r) { return P(p) /= r; }\nP operator*(const D& r, const P& p) { return P(p) *= r; }\nP operator/(const D& r, const P& p) { return P(p) /= r; }\nD crs(const P& a, const P& b){ return a.x*b.y - a.y*b.x; }\nD dot(const P& a, const P& b){ return a.x*b.x + a.y*b.y; }\nint signum(D x) {return x > EPS ? +1 : x < -EPS ? -1 : 0;}\n// 辞書順ソート\nbool operator<(const P& a, const P& b) {\n  if (a.x != b.x) return a.x < b.x;\n  return a.y < b.y;\n}\n// // 偏角ソート\n// bool operator<(const P& a, const P& b) {\n//   // atan2を使う方法。誤差に注意\n//   // return a.arg() < b.arg();\n\n//   // cosを使う方法。(0,0)の扱いに注意\n//   if (a.isZero() != b.isZero()) return a.isZero() > b.isZero();\n//   if (a.orth() != b.orth()) return a.orth() < b.orth();\n//   return crs(a, b) > 0;\n// }\n/** ベクトルpをベクトルbに射影したベクトル */\nP proj(const P& p, const P& b) {\n  P t = b * dot(p, b);\n  return t / b.norm();\n}\n/** 点pから直線abに引いた垂線の足となる点 */\nP footOfLP(const P& a, const P& b, const P& p) {\n  return a + proj(p-a, b-a);\n}\n/** 直線abを挟んで点pと対称な点 */\nP reflection(const P&a, const P&b, const P& p) {\n  return 2 * footOfLP(a, b, p) - p;\n}\nint ccw(const P& a, P b, P c) {\n  // return signum(crs(b - a, c - a));\n  b -= a; c -= a;\n  if (crs(b, c) > 0)       return +1;       // counter clockwise\n  if (crs(b, c) < 0)       return -1;       // clockwise\n  if (dot(b, c) < 0)       return +2;       // c--a--b on line\n  if (b.norm() < c.norm()) return -2;       // a--b--c on line\n  return 0;\n}\n\n\nint main2() {\n  P p0, p1;\n  cin >> p0 >> p1;\n  int N; cin >> N;\n  REP(i, N) {\n    P p2; cin >> p2;\n    int ans = ccw(p0, p1, p2);\n    if (ans ==  1) { cout << \"COUNTER_CLOCKWISE\" << endl; }\n    if (ans == -1) { cout << \"CLOCKWISE\" << endl; }\n    if (ans ==  2) { cout << \"ONLINE_BACK\" << endl; }\n    if (ans == -2) { cout << \"ONLINE_FRONT\" << endl; }\n    if (ans ==  0) { cout << \"ON_SEGMENT\" << endl; }\n  }\n  return 0;\n}\n\nint main() {\n\n#ifdef LOCAL\n  for (;!cin.eof();cin>>ws)\n#endif\n    main2();\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint main() {\n\tcin.tie(0); ios::sync_with_stdio(false);\n\tint x0, y0, x1, y1; cin >> x0 >> y0 >> x1 >> y1;\n\tint X1 = x1 - x0, Y1 = y1 - y0;\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tint x2, y2; cin >> x2 >> y2;\n\t\tint X2 = x2 - x0, Y2 = y2 - y0;\n\t\tlong long cross = X1*Y2 - Y1*X2;\n\t\tif (cross > 0) { cout << \"COUNTER_CLOCKWISE\" << endl; continue; }\n\t\tif (cross < 0) { cout << \"CLOCKWISE\" << endl; continue; }\n\t\t//??????????????§cross == 0 ?????????????¢????\n\t\tlong long dot = X1*X2 + Y1*Y2;\n\t\tif (dot < 0) { cout << \"ONLINE_BACK\" << endl; continue; }\n\t\t//???????????§????????????ONLINE_FRONT???ON_SEGMENT\n\t\t//???????????????????¨????????????¨?????????????????????????????????????????§???????????±???????????????\n\t\tlong long dis1 = X1/hypot(X1,Y1) * X1 + Y1/hypot(X1,Y1)*Y1, dis2 = X2/hypot(X2,Y2)*Y2 + Y2/hypot(X2,Y2)*Y2;\n\t\tif (dis1 < dis2) { cout << \"ONLINE_FRONT\" << endl; continue; }\n\t\tcout << \"ON_SEGMENT\" << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing ld = long double;\nusing point = std::complex<ld>;\nusing polygon = std::vector<point>;\n\nconstexpr ld eps = 1e-10;\nconstexpr ld pi = std::acos(-1.0);\n\nbool comp(point a, point b) {\n    return std::real(a) < std::real(b) || (std::real(a) <= std::real(b) && std::imag(a) < std::imag(b));\n}\n\nstd::vector<point> unique(std::vector<point> ps) {\n    std::sort(std::begin(ps), std::end(ps), comp);\n    std::vector<point> res;\n    for(auto& p : ps) {\n        if(res.empty() || abs(res.back() - p) > eps) {\n            res.push_back(p);\n        }\n    }\n    return res;\n}\n\nld dot(point const& a, point const& b) {\n    return std::real(std::conj(a) * b);\n}\nld cross(point const& a, point const& b) {\n    return std::imag(std::conj(a) * b);\n}\n\nint ccw(point a, point b, point c) {\n    b -= a; c -= a;\n    if(cross(b, c) > eps) return 1;            // a -> b -> c : counterclockwise\n    if(cross(b, c) < -eps) return -1;          // a -> b -> c : clockwise\n    if(dot(b, c) < 0) return 2;                // c -> a -> b : line\n    if(std::norm(b) < std::norm(c)) return -2; // a -> b -> c : line\n    return 0;                                  // a -> c -> b : line\n}\n\nstruct segment {\n    segment() : a(0, 0), b(0, 0) {}\n    segment(point a, point b) : a(a), b(b) {}\n    point a, b;\n};\n\nstruct line {\n    line() : a(0, 0), b(0, 0) {}\n    line(point a, point b) : a(a), b(b) {}\n    line(segment s) : a(s.a), b(s.b) {}\n    point a, b;\n};\n\nusing namespace std;\n\nint main() {\n    ld x1, y1, x2, y2;\n    cin >> x1 >> y1 >> x2 >> y2;\n    point p1(x1, y1), p2(x2, y2);\n    int q; cin >> q;\n    while(q--) {\n        ld x, y; cin >> x >> y;\n        point p3(x, y);\n        int ans = ccw(p1, p2, p3);\n        if(ans == 1) cout << \"COUNTER_CLOCKWISE\" << endl;\n        if(ans == -1) cout << \"CLOCKWISE\" << endl;\n        if(ans == 2) cout << \"ONLINE_BACK\" << endl;\n        if(ans == -2) cout << \"ONLINE_FRONT\" << endl;\n        if(ans == 0) cout << \"ON_SEGMENT\" << endl;\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef pair<long long, long long> pll;\ntypedef pair<double, double> pdd;\nconst double eps = 1e-10;\nconst double pi = acos(-1);\ninline int sgn(double d){if(fabs(d) < eps) return 0;if(d > 0) return 1;return -1;}\ninline double rad(double _deg){return _deg / 180.0 * pi;}\ninline double deg(double _rad){return _rad / pi * 180.0;}\nstruct Point{\n\tdouble x, y;\n\tvoid read(){scanf(\"%lf%lf\", &x, &y);}\n\tPoint():x(0.0), y(0.0){}\n\tPoint(double a, double b = 0.0): x(a), y(b){}\n\tPoint(const Point& p): x(p.x), y(p.y){}\n\tPoint operator + (const Point& a){return {x + a.x, y + a.y};}\n\tPoint operator - (const Point& a){return {x - a.x, y - a.y};}\n\tdouble operator * (const Point& a){return x * a.x + y * a.y;}\n\tdouble operator ^ (const Point& a){return x * a.y - y * a.x;}\n\tbool operator == (const Point& p){return sgn(x - p.x) == 0 && sgn(y - p.y) == 0;}\n\tbool operator < (const Point &p) const{\n\t\tif(sgn(x - p.x) == 0) \n\t\t\treturn sgn(y - p.y) == -1;\n\t\treturn sgn(x - p.x) == -1;\n\t}\n\tdouble length(){return sqrt(x * x + y * y);}\n}typedef Vector;\nstruct Line{\n\tPoint a, b;\n\tvoid read(){a.read(); b.read();}\n\tLine() : a(0.0, 0.0) , b(0.0, 0.0){}\n};\nstruct Segment{\n\tPoint a, b;\n\tvoid read(){a.read(); b.read();}\n\tSegment() : a(0.0, 0.0) , b(0.0, 0.0){}\n};\ndouble distance(const Point &a, const Point &b) \n{\n\tdouble x = a.x - b.x;\n\tdouble y = a.y - b.y;\n\treturn sqrt(x * x + y * y);\n}\nPoint Projection(Point p, Line l)\n{ \n\t// 点在直线上的投影点\n\tVector v1 = l.b - l.a;\n\tVector v2 = p - l.a;\n\tdouble k1 = v1 * v2;\n\tdouble k2 = v1.length();\n\tk1 /= k2 * k2;\n\treturn {l.a.x + v1.x * k1, l.a.y+ v1.y * k1};\n}\nPoint Reflection(Point p, Line l)\n{\n\t// 点关于直线对称\n\tPoint p0 = Projection(p, l);\n\tVector v0 = p0 - p;\n\treturn p0 + v0;\n}\nint ccw(Point p, Segment sg)\n{\n\t// p 关于(sg.a -> sg.b)的关系\n\tVector v0 = sg.b - sg.a;\n\tVector v1 = p - sg.a;\n\t\n\tint fcross = sgn(v0 ^ v1);\n\t\n\tif(fcross == 1) return 1; // 顺时针方向\n\tif(fcross == -1) return 2; // 逆时针方向\n\t\n\tint fdot = sgn(v0 * v1);\n\t\n\tif(fdot == -1) return 3; // 反向线段外共线\n\tif(v0.length() < v1.length()) return 4; //正向线段外共线\n\treturn 5; //点在线段上\n}\nint main()\n{\n\tSegment sg;\n\tsg.read();\n\tint n;\n\tscanf(\"%d\", &n);\n\twhile(n --)\n\t{\n\t\tPoint p;\n\t\tp.read();\n\t\tint ans = ccw(p, sg);\n\t\tif(ans == 1) puts(\"COUNTER_CLOCKWISE\");\n\t\telse if(ans == 2) puts(\"CLOCKWISE\");\n\t\telse if(ans == 3) puts(\"ONLINE_BACK\");\n\t\telse if(ans == 4) puts(\"ONLINE_FRONT\");\n\t\telse puts(\"ON_SEGMENT\");\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<climits>\n#include<iomanip>\n#include<cstdio>\n#include<vector>\n#include<queue>\n#include<stack>\n#include<cmath>\n#include<list>\n#include<map>\n#include<set>\nusing namespace std;\n\ntypedef vector<int> VI;\ntypedef vector<VI> VVI;\ntypedef vector<string> VS;\ntypedef stack<int> SI;\ntypedef queue<int> QI;\ntypedef list<int> LI;\ntypedef pair<int,int> PII;\ntypedef long long LL;\n\n#define d(x)  cout<<#x<<\" = \"<<(x)<<endl;\n#define ALL(a)  (a).begin(),(a).end()\n#define RALL(a) (a).rbegin(), (a).rend()\n#define PB push_back\n#define MP make_pair\n#define EMP empty()\n#define SZ(a) int((a).size())\n#define EACH(i,c) for(typeof((c).begin()) i=(c).begin(); i!=(c).end(); ++i)\n#define REACH(i,c) for(typeof((c).rbegin()) i=(c).rbegin(); i!=(c).rend(); ++i)\n#define EXIST(s,e) ((s).find(e)!=(s).end())\n#define SORT(c,n) sort(c,c+n)\n#define VSORT(c) sort((c).begin(),(c).end())\n#define FOR(i,a,b) for(int i=(a);i<(b);++i)\n#define REP(i,n)  FOR(i,0,n)\n#define DFOR(i,b,a) for(int i=(b)-1;i>=(a);--i)\n#define DREP(i,n) DFOR(i,n,0)\n#define INF 1000000000\n#define PI  acos(-1.0)\n////////////////////////////////////////////////\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\nclass Vector\n{\npublic:\n\tdouble x,y;\n\tVector(double x=0,double y=0):x(x),y(y){}\n\t\n\tVector operator + (Vector p){return Vector(x+p.x,y+p.y);}\n\tVector operator - (Vector p){return Vector(x-p.x,y-p.y);}\n\tVector operator * (double a){return Vector(x*a,y*a);}\n\tVector operator / (double a){return Vector(x/a,y/a);}\n\t\n\tdouble abs(){return sqrt(norm());}\n\tdouble norm(){return x*x+y*y;}\n\t\n\tbool operator <  (const Vector &p)const{return x!=p.x?x<p.x:y<p.y;}\n\tbool operator == (const Vector &p)const{return fabs(x-p.x)<EPS && fabs(y-p.y<EPS);}\n};\n\ndouble dot(Vector a,Vector b){return a.x*b.x+a.y*b.y;}\ndouble cross(Vector a,Vector b){return a.x*b.y-b.x*a.y;}\n\nint ccw(Vector p0,Vector p1,Vector p2)\n{\n\tVector a=p1-p0;\n\tVector b=p2-p0;\n\tif(cross(a,b)>EPS)return 1;//???????¨???????\n\tif(cross(a,b)<-EPS)return -1;//????¨???????\n\tif(dot(a,b)<-EPS)return 2;//p0?????????\n\tif(a.norm()<b.norm())return -2;//p1????\\\\\n\treturn 0;//?????????\n}\n\nint main()\n{\n\tVector p0,p1,p2;\n\tcin>>p0.x>>p0.y>>p1.x>>p1.y;\n\tint n;cin>>n;\n\tREP(i,n)\n\t{\n\t\tcin>>p2.x>>p2.y;\n\t\tint j=ccw(p0,p1,p2);\n\t\tif(j==1)cout<<\"COUNTER_CLOCKWISE\"<<endl;\n\t\telse if(j==-1)cout<<\"CLOCKWISE\"<<endl;\n\t\telse if(j==2)cout<<\"ONELINE_BACK\"<<endl;\n\t\telse if(j==-2)cout<<\"ONLINE_FRONT\"<<endl;\n\t\telse cout<<\"ON_SEGMENT\"<<endl;\n\t}\n\treturn 0;\n}\n\n/*\nint main()\n{\n\tint n;cin>>n;\n\tvtr p[4];\n\tcout<<fixed<<setprecision(10);\n\tREP(i,n)\n\t{\n\t\tREP(j,4)cin>>p[j].x>>p[j].y;\n\t\t//????????????\n\t\tdouble a,b,c,d;\n\t\tif(dotp(minusvtr(p[1],p[0]),minusvtr(p[2],p[0]))>0&&dotp(minusvtr(p[0],p[1]),minusvtr(p[2],p[1]))>0)\n\t\t{\n\t\t\ta=abscrossp(minusvtr(p[1],p[0]),minusvtr(p[2],p[0]))/absvtr(minusvtr(p[1],p[0]));\n\t\t}\n\t\telse\n\t\t{\n\t\t\ta=min(absvtr(minusvtr(p[2],p[0])),absvtr(minusvtr(p[2],p[1])));\n\t\t}\n\t\t\n\t\tif(dotp(minusvtr(p[1],p[0]),minusvtr(p[3],p[0]))>0&&dotp(minusvtr(p[0],p[1]),minusvtr(p[3],p[1]))>0)\n\t\t{\n\t\t\tb=abscrossp(minusvtr(p[1],p[0]),minusvtr(p[3],p[0]))/absvtr(minusvtr(p[1],p[0]));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tb=min(absvtr(minusvtr(p[3],p[0])),absvtr(minusvtr(p[3],p[1])));\n\t\t}\n\t\t\n\t\tif(dotp(minusvtr(p[3],p[2]),minusvtr(p[0],p[2]))>0&&dotp(minusvtr(p[2],p[3]),minusvtr(p[0],p[3]))>0)\n\t\t{\n\t\t\tc=abscrossp(minusvtr(p[3],p[2]),minusvtr(p[0],p[2]))/absvtr(minusvtr(p[3],p[2]));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc=min(absvtr(minusvtr(p[0],p[2])),absvtr(minusvtr(p[0],p[3])));\n\t\t}\n\t\t\n\t\tif(dotp(minusvtr(p[3],p[2]),minusvtr(p[1],p[2]))>0&&dotp(minusvtr(p[2],p[3]),minusvtr(p[1],p[3]))>0)\n\t\t{\n\t\t\td=abscrossp(minusvtr(p[3],p[2]),minusvtr(p[1],p[2]))/absvtr(minusvtr(p[3],p[2]));\n\t\t}\n\t\telse\n\t\t{\n\t\t\td=min(absvtr(minusvtr(p[1],p[2])),absvtr(minusvtr(p[1],p[3])));\n\t\t}\n\t\tcout<<min(min(a,b),min(c,d))<<endl;\n\t}\n\treturn 0;\n}*/"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n// 定義・定数\nusing P = complex<double>;\nconst double EPS = 1e-10;\n\nnamespace std {\n  // 点の比較演算子\n  bool operator < (const P &a, const P &b) {\n    return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n  }\n  \n  // 点の等価演算子\n  bool operator == (const P &a, const P &b) {\n    return fabs(a - b) < EPS;\n  }\n}\n\n// 直線\nstruct L : public vector<P> {\n  L(P &_a, P &_b) {\n    push_back(_a);\n    push_back(_b);\n  }\n};\n\n// 線分\nstruct S : L {\n  S(P &_a, P &_b) : L(_a, _b) {}\n};\n\n// 円\nstruct C {\n  P p;\n  double r;\n  \n  C(P _p, double _r) : p(_p), r(_r) {}\n};\n\n// 内積\ndouble dot(const P &a, const P &b) {\n  return real(conj(a) * b);\n}\n\n// 外積\ndouble cross(const P &a, const P &b) {\n  return imag(conj(a) * b);\n}\n\n// 点の進行方向\nint ccw(P a, P b, P c) {\n  b -= a;\n  c -= a;\n  if (cross(b, c) > 0)   return +1;       // counter clockwise\n  if (cross(b, c) < 0)   return -1;       // clockwise\n  if (dot(b, c) < 0)     return +2;       // c--a--b on line\n  if (norm(b) < norm(c)) return -2;       // a--b--c on line\n  return 0;\n}\n\n// 交差判定\nbool intersectLL(const L &l, const L &m) {\n  return abs(cross(l[1] - l[0], m[1] - m[0])) > EPS || // non-parallel\n         abs(cross(l[1] - l[0], m[0] - l[0])) < EPS;   // same line\n}\nbool intersectLS(const L &l, const S &s) {\n  return cross(l[1] - l[0], s[0] - l[0]) *      // s[0] is left of l\n         cross(l[1] - l[0], s[1] - l[0]) < EPS; // s[1] is right of l\n}\nbool intersectLP(const L &l, const P &p) {\n  return abs(cross(l[1] - p, l[0] - p)) < EPS;\n}\nbool intersectSS(const S &s, const S &t) {\n  return ccw(s[0], s[1], t[0]) * ccw(s[0], s[1], t[1]) <= 0 &&\n         ccw(t[0], t[1], s[0]) * ccw(t[0], t[1], s[1]) <= 0;\n}\nbool intersectSP(const S &s, const P &p) {\n  return abs(s[0] - p) + abs(s[1] - p) - abs(s[1] - s[0]) < EPS; // triangle inequality\n}\n\n// 距離など\nP projection(const L &l, const P &p) {\n  double t = dot(p - l[0], l[0] - l[1]) / norm(l[0] - l[1]);\n  return l[0] + t * (l[0] - l[1]);\n}\nP reflection(const L &l, const P &p) {\n  return p + (projection(l, p) - p) + (projection(l, p) - p);\n}\ndouble distanceLP(const L &l, const P &p) {\n  return abs(p - projection(l, p));\n}\ndouble distanceLL(const L &l, const L &m) {\n  return intersectLL(l, m) ? 0 : distanceLP(l, m[0]);\n}\ndouble distanceLS(const L &l, const S &s) {\n  if (intersectLS(l, s)) return 0;\n  return min(distanceLP(l, s[0]), distanceLP(l, s[1]));\n}\ndouble distanceSP(const S &s, const P &p) {\n  const P r = projection(s, p);\n  if (intersectSP(s, r)) return abs(r - p);\n  return min(abs(s[0] - p), abs(s[1] - p));\n}\ndouble distanceSS(const S &s, const S &t) {\n  if (intersectSS(s, t)) return 0;\n  return min(min(distanceSP(s, t[0]), distanceSP(s, t[1])),\n             min(distanceSP(t, s[0]), distanceSP(t, s[1])));\n}\nP crosspoint(const L &l, const L &m) {\n  double A = cross(l[1] - l[0], m[1] - m[0]);\n  double B = cross(l[1] - l[0], l[1] - m[0]);\n  if (abs(A) < EPS && abs(B) < EPS) return m[0]; // same line\n  if (abs(A) < EPS) assert(false); // !!!PRECONDITION NOT SATISFIED!!!\n  return m[0] + B / A * (m[1] - m[0]);\n}\n\nint main() {\n  cin.tie(0);\n  ios::sync_with_stdio(false);\n  \n  double x0, y0, x1, y1;\n  cin >> x0 >> y0 >> x1 >> y1;\n  P p0(x0, y0), p1(x1, y1);\n  \n  int q;\n  cin >> q;\n  while (q--) {\n    double x, y;\n    cin >> x >> y;\n    P p2(x, y);\n    int ans = ccw(p0, p1, p2);\n    if (ans == 1) cout << \"COUNTER_CLOCKWISE\\n\";\n    else if (ans == -1) cout << \"CLOCKWISE\\n\";\n    else if (ans == 2) cout << \"ONLINE_BACK\\n\";\n    else if (ans == -2) cout << \"ONLINE_FRONT\\n\";\n    else cout << \"ON_SEGMENT\\n\";\n  }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<map>\n#include<climits>\n#include<ctime>\n#include<cstring>\n#include<numeric>\n\n#include<algorithm>\n#include<array>\n#include<cmath>\n#include<vector>\n\n#define ALL(v) (v).begin(),(v).end()\n#define REP(i,p,n) for(int i=p;i<(int)(n);++i)\n#define rep(i,n) REP(i,0,n)\n#define dump(a) (cerr << #a << \"=\" << (a) << endl)\n#define DUMP(list) cout << \"{ \"; for(auto nth : list){ cout << nth << \" \"; } cout << \"}\" << endl;\n\nusing namespace std;\n\ntypedef double Real;\nconst Real EPS = 1e-8;\nint sign(Real d) { return d > EPS ? 1 : d < -EPS ? -1 : 0; }\n\n//define class ...\n\nstruct Point {\n\tReal x, y;\n\tPoint(Real x_ = 0, Real y_ = 0):x(x_), y(y_) {}\n\n\tPoint operator+(const Point &p) const {\n\t\treturn Point(x + p.x, y + p.y);\n\t}\n\n\tPoint operator-(const Point &p) const {\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n\n\tPoint operator*(Real s) const {\n\t\treturn Point(x * s, y * s);\n\t}\n\n\tPoint operator/(Real s) const {\n\t\treturn Point(x / s, y / s);\n\t}\n\n\tbool operator<(const Point &p) const {\n\t\treturn sign(x - p.x) == -1 || (sign(x - p.x) == 0 && sign(y - p.y) == -1);\n\t}\n\n\tbool operator==(const Point &p) const {\n\t\treturn sign(x - p.x) == 0 && sign(y - p.y) == 0;\n\t}\n};\n\nistream &operator>>(istream &is, Point &p) {\n\treturn is >> p.x >> p.y;\n}\n\nostream &operator<<(ostream &os, Point &p) {\n\treturn os << '(' << p.x << \", \" << p.y << ')';\n}\n\nstruct Line : public array<Point, 2> { //??????\n\tLine(const Point &a, const Point &b) { at(0) = a; at(1) = b; }\n};\n\nstruct Segment : public array<Point, 2> { //??´???\n\tSegment(const Point &a, const Point &b) { at(0) = a; at(1) = b; }\n};\n\nstruct Circle {\n\tPoint c;\n\tPoint r;\n\tCircle(const Point &c_, Real r_): c(c_), r(r_) {}\n};\n\ntypedef vector<Point> Polygon;\n\n// define function\nPoint rotate90(const Point &p) { // ???????¨???¨???\n\treturn Point(-p.y, p.x);\n}\n\nPoint rotate(const Point &p, Real theta) {\n\tconst Real s = sin(theta), c = cos(theta);\n\treturn Point(c * p.x - s * p.y, s * p.x + c * p.y);\n}\n\nReal angle(const Point &p) {\n\treturn atan2(p.y, p.x);\n}\n\nReal norm(const Point &p) {\n\treturn p.x * p.x + p.y * p.y;\n}\n\nReal abs(const Point &p) {\n\treturn sqrt(norm(p));\n}\n\nReal dot(const Point &a, const Point &b) { // ??????\n\treturn a.x * b.x + a.y * b.y;\n}\n\nReal cross(const Point &a, const Point &b) { // ??????\n\treturn a.x * b.y - a.y * b.x;\n}\n\nbool is_parallel(const Line &a, const Line &b) {\n\treturn sign( cross(a[1] - a[0], b[1] - b[0]) ) == 0;\n} \n\n// define app function\nenum { CCW = 1, CW = -1, BACK = 2, FRONT = -2, ON = 0};\n\nint ccw(const Point &a, const Point &b, const Point &c) {\n\tconst Point p = b - a;\n\tconst Point q = c - a;\n\tconst Real crs = cross(p, q); \n\t\n\tif(sign(crs) == 1) return CCW;\n\tif(sign(crs) == -1) return CW;\n\tif(sign(dot(p, q)) == -1) return BACK;\n\tif(sign(norm(p) - norm(q)) == -1) return FRONT;\n\treturn ON;\n}\n\nPoint project(const Line &l, const Point &p) {\n\tconst Point a = p - l[0];\n\tconst Point b = l[1] - l[0];\n\treturn l[0] + b * (dot(a, b) / norm(b));\n}\n\nPoint reflect(const Line &l, const Point &p) {\n\tconst Point t = project(l, p);\n\treturn t + (t - p);\n}\n\nbool intersect(const Line &a, const Line &b) {\n\treturn sign(cross(a[1] - a[0], b[1] - b[0])) != 0\n\t\t\t|| sign(cross(a[1] - a[0], b[1] - a[0])) == 0;\n}\n\n\nint main() {\n\tcout.setf(ios::fixed);\n\tcout.precision(10);\n\tPoint p0, p1, p2;\n\tint q;\t\n\tcin >> p0 >> p1;\t\t\n\tcin >> q;\t\n\trep(i, q) {\n\t\tcin >> p2;\n\t\tint res = ccw(p0, p1, p2);\n\t\tif(res == CCW) {\n\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t}\n\t\telse if(res == CW) {\n\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\t}\n\t\telse if(res == BACK) {\n\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t}\n\t\telse if(res == FRONT) {\n\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t}\n\t\telse {\n\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t}\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a)-(b)) < EPS)\n\n// ???/????????????\nstruct Point {\n  double x, y;\n  Point(double x = 0.0, double y = 0.0):x(x), y(y){}\n  \n  Point operator + (Point p) { return Point(x + p.x, y + p.y); }\n  Point operator - (Point p) { return Point(x - p.x, y - p.y); }\n  Point operator * (double a) { return Point(x * a, y * a); }\n  Point operator / (double a) { return Point(x / a, y / a); }\n\n  double abs() { return sqrt(norm()); }\n  double norm() { return x*x + y*y; }\n\n  bool operator < (const Point& p) const {\n    return x != p.x ? x < p.x : y < p.y;\n  }\n  bool operator == (const Point& p) const {\n    return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n  }\n};\ntypedef Point Vector;\n\n// ??????/??´???\nstruct Segment {\n  Point p1, p2;\n};\ntypedef Segment Line;\n\n// ????????????????????????\ndouble norm(Vector v)\n{\n  return v.x*v.x + v.y*v.y;\n}\n// ?????????????????§??????\ndouble abs(Vector v)\n{\n  return sqrt(norm(v));\n}\n// ?????????????????????\ndouble dot(Vector a, Vector b)\n{\n  return a.x*b.x + a.y*b.y;\n}\n// ??????????????????????????§??????\ndouble cross(Vector a, Vector b)\n{\n  return a.x*b.y - a.y*b.x;\n}\n// ??´?????????\nbool isOrthogonal(Vector a, Vector b)\n{\n  return equals(dot(a, b), 0.0);\n}\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2)\n{\n  return isOrthogonal(a1 - a2, b1 - b2);\n}\nbool isOrthogonal(Segment s1, Segment s2)\n{\n  return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n// ????????????\nbool isParallel(Vector a, Vector b)\n{\n  return equals(cross(a, b), 0.0);\n}\nbool isParallel(Point a1, Point a2, Point b1, Point b2)\n{\n  return isParallel(a1 - a2, b1 - b2);\n}\nbool isParallel(Segment s1, Segment s2)\n{\n  return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n// ?°???±\nPoint project(Segment s, Point p)\n{\n  Vector base = s.p2 - s.p1;\n  double r = dot(p - s.p1, base) / norm(base);\n  return s.p1 + base * r;\n}\n// ????°?\nPoint reflect(Segment s, Point p)\n{\n  return p + (project(s, p) - p) * 2.0;\n}\n// ?????????????????¢\ndouble getDistance(Point a, Point b)\n{\n  return abs(a - b);\n}\n// ??´?????¨?????¨????????¢\ndouble getDistanceLP(Line l, Point p)\n{\n  return abs(cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1));\n}\n// ????????¨?????¨????????¢\ndouble getDistanceSP(Segment s, Point p)\n{\n  if(dot(s.p2 - s.p1, p - s.p1) < 0.0) return abs(p - s.p1);\n  if(dot(s.p1 - s.p2, p - s.p2) < 0.0) return abs(p - s.p2);\n  return getDistanceLP(s, p);\n}\n// ????????????????????¢\ndouble getDistance(Segment s1, Segment s2)\n{\n  //if(intersect(s1, s2)) return 0.0;\n  return min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n\t     min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE         = -1;\nstatic const int ONLINE_BACK       = 2;\nstatic const int ONLINE_FRONT      = -2;\nstatic const int ON_SEGMENT        = 0;\n// ???????¨???????\nint ccw(Point p0, Point p1, Point p2)\n{\n  Vector a = p1 - p0;\n  Vector b = p2 - p0;\n  if(cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n  if(cross(a, b) < -EPS) return CLOCKWISE;\n  if(dot(a, b) < -EPS) return ONLINE_BACK;\n  if(a.norm() < b.norm()) return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\n\nint main()\n{\n  Point p1, p2;\n  cin >> p1.x >> p1.y >> p2.x >> p2.y;\n  int q; cin >> q;\n  while(q--) {\n    Point p; cin >> p.x >> p.y;\n    int status = ccw(p1, p2, p);\n    if(status == COUNTER_CLOCKWISE) cout << \"COUNTER_CLOCKWISE\" << endl;\n    else if(status == CLOCKWISE) cout << \"CLOCKWISE\" << endl;\n    else if(status == ONLINE_BACK) cout << \"ONLINE_BACK\" << endl;\n    else if(status == ONLINE_FRONT) cout << \"ONLINE_FRONT\" << endl;\n    else if(status == ON_SEGMENT) cout << \"ON_SEGMENT\" << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<string>\n#include<algorithm>\n#include<cmath>\n#include<vector>\n#include<stack>\n#include<climits>\n#include<cstring>\n#include<queue>\nusing namespace std;\n\ndouble EPS = 1e-10;\n\ndouble add(double a, double b){\n\tif(abs(a+b) < EPS * (abs(a) + abs(b))) return 0;\n\treturn a+b;\n}\n\nstruct P{\n\tdouble x,y;\n\tP(){}\n\tP(double x, double y) : x(x), y(y){\n\t}\n\tP operator +(P p){\n\t\treturn P(add(x,p.x), add(y,p.y));\n\t}\n\tP operator -(P p){\n\t\treturn P(add(x,-p.x), add(y,-p.y));\n\t}\n\tP operator *(double d){\n\t\treturn P(d*x, d*y);\n\t}\n\tdouble dot (P p){\n\t\treturn add(x*p.x, y*p.y);\n\t}\n\tdouble det (P p){\n\t\treturn add(x*p.y, -y*p.x);\n\t}\n\tvoid print (){\n\t\tcout << x << \" \" << y <<endl;\n\t\treturn;\n\t}\n};\n\nvoid clockWise(P p0, P p1, P p2){\n\tP q1 = p1-p0;\n\tP q2 = p2-p0;\n\tif(!q1.det(q2)){\n\t\tif(q1.x/q2.x<0){\n\t\t\tcout << \"ONLINE_BACK\"<< endl;\n\t\t}else if(q1.x/q2.x>=1){\n\t\t\tcout << \"ON_SEGMENT\"<<endl;\n\t\t}else{\n\t\t\tcout <<\"ONLINE_FRONT\" <<endl;\n\t\t}\n\t}else{\n\t\tif(q1.det(q2)>0){\n\t\t\tcout << \"COUNTER_CLOCKWISE\" <<endl;\n\t\t}else{\n\t\t\tcout <<\"CLOCKWISE\"<< endl;\n\t\t}\n\n\t}\n\treturn;\n}\n\nint main(){\n\tdouble x, y, q;\n\tcin >> x >> y ;\n\tP p0(x,y);\n\tcin >> x >> y ;\n\tP p1(x,y);\n\tcin >> q ;\n\n\tfor(int i=0;i<q;i++){\n\t\tcin >> x >> y ;\n\t\tP p2(x,y);\n\t\tclockWise(p0, p1, p2);\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "// Template\n#include <iostream>\n#include <iomanip>\n#include <vector>\n#include <string>\n#include <queue>\n#include <deque>\n#include <stack>\n#include <tuple>\n#include <map>\n#include <set>\n#include <algorithm>\n#include <utility>\n#include <cmath>\n#include <complex>\n#define rep(i, x) for (int i = 0; i < (x); ++i)\n#define rng(i, x, y) for (int i = (x); i < (y); ++i)\n#define all(x) (x).begin(), (x).end()\n#define sz(x) (int)(x).size()\n#define pb push_back\nusing namespace std;\nusing ll = long long;\nconstexpr int inf = 1001001001;\nconstexpr ll INF = 3003003003003003003;\ntemplate <typename T> inline bool chmin(T &x, const T &y) {if (x > y) {x = y; return 1;} return 0;}\ntemplate <typename T> inline bool chmax(T &x, const T &y) {if (x < y) {x = y; return 1;} return 0;}\n\n// Geometry\n\nconstexpr double EPS = 1E-9;\nint sgn(double x) {return x < -EPS ? -1 : x > EPS ? 1 : 0;}\n\nstruct point {\n    double x, y;\n    point() = default;\n    point(double x_, double y_) : x(x_), y(y_) {}\n    point &operator+= (const point &p) {x += p.x; y += p.y; return *this;}\n    point &operator-= (const point &p) {x -= p.x; y -= p.y; return *this;}\n    point &operator*= (double k) {x *= k; y *= k; return *this;}\n    point &operator/= (double k) {x /= k; y /= k; return *this;}\n    point operator+ (const point &p) const {return point(*this) += p;}\n    point operator- (const point &p) const {return point(*this) -= p;}\n    point operator* (double k) const {return point(*this) *= k;}\n    point operator/ (double k) const {return point(*this) /= k;}\n    point operator- () const {return point(*this) *= -1;}\n    point rotation(double theta) const {return point(x * cos(theta) - y * sin(theta), x * sin(theta) + y * cos(theta));}\n    double length() const {return sqrt(x * x + y * y);}\n    double dot(point &p) const {return x * p.x + y * p.y;}\n    double cross(point &p) const {return x * p.y - y * p.x;}\n    double arg() const {return atan2(y, x);}\n    bool operator<(const point &p) {if (sgn(x - p.x)) return sgn(x - p.x) < 0; return sgn(y - p.y) < 0;}\n    friend istream &operator>> (istream &is, point &p) {is >> p.x >> p.y; return is;}\n    friend ostream &operator<< (ostream &os, point &p) {os << \"{\" << p.x << \", \" << p.y << \"}\"; return os;}\n};\n\nint isp(const point &a, const point &b, const point &c) {\n    point p = a - b, q = c - a;\n    if (sgn(p.cross(q)) < 0) return 1;\n    if (sgn(p.cross(q)) > 0) return -1;\n    p = b - a; q = c - a;\n    if (sgn(p.dot(q)) < 0) return -2;\n    p = a - b; q = c - b;\n    if (sgn(p.dot(q)) < 0) return 2;\n    return 0;\n}\n\n\n// Main Code\nint main() {\n    point a, b;\n    cin >> a >> b;\n    int q;\n    cin >> q;\n    rep(_, q) {\n        point c;\n        cin >> c;\n        switch (isp(a, b, c)) {\n            case -2:\n                cout << \"ONLINE_BACK\\n\";\n                break;\n            case -1:\n                cout << \"CLOCKWISE\\n\";\n                break;\n            case 0:\n                cout << \"ON_SEGMENT\\n\";\n                break;\n            case 1:\n                cout << \"COUNTER_CLOCKWISE\\n\";\n                break;\n            case 2:\n                cout << \"ONLINE_FRONT\\n\";\n                break;\n        }\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\n\nusing namespace std;\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a)-(b)) < EPS)\n\nclass Point{\npublic:\n\tdouble x, y;\n\tPoint(double _x = 0, double _y = 0) :x(_x), y(_y){};\n\n\tPoint operator+(const Point &p){ return Point(x + p.x, y + p.y); }\n\tPoint operator-(const Point &p){ return Point(x - p.x, y - p.y); }\n\tPoint operator*(const Point &p){ return Point(x * p.x, y * p.y); }\n\tPoint operator*(double k){ return Point(x * k, y * k); }\n\tPoint operator/(const Point &p){ return Point(x / p.x, y / p.y); }\n\n\tdouble norm() { return x*x + y*y; }\n\tdouble abs() { return sqrt(norm()); }\n\n\tbool operator<(const Point &p) const{\n\t\treturn (x != p.x) ? (x < p.x) : (y < p.y);\n\t}\n\n\tbool operator==(const Point &p){\n\t\treturn equals(x, p.x) && equals(y, p.y);\n\t}\n};\n\ntypedef Point Vector;\nstruct Segment{\n\tPoint p1, p2;\n};\n\ndouble dot(Vector a, Vector b){\n\tdouble res = a.x*b.x + a.y*b.y;\n\treturn res;\n}\n\ndouble cross(Vector a, Vector b){\n\tdouble res = a.x*b.y - a.y*b.x;\n\treturn res;\n}\n\nbool isOrthogonal(Vector a, Vector b){\n\treturn equals(dot(a, b), 0.0);\n}\n\nbool isParallel(Vector a, Vector b){\n\treturn equals(cross(a, b), 0.0);\n}\n\nPoint project(Segment s, Point p){\n\tVector base = s.p2 - s.p1;\n\tVector v = p - s.p1;\n\tdouble l = dot(v, base) / base.norm();\n\treturn s.p1 + base * l;\n}\n\nint ccw(Point p0, Point p1, Point p2){\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\n\tif (cross(a, b) < -EPS) return CLOCKWISE;\n\tif (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif (dot(a, b) < -EPS) return ONLINE_BACK;\n\tif (a.norm() < b.norm()) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\n\nint main(){\n\tPoint p0, p1, p2;\n\tcin >> p0.x >> p0.y >> p1.x >> p1.y;\n\tint n; cin >> n;\n\tfor (int i = 0; i < n; ++i){\n\t\tcin >> p2.x >> p2.y;\n\t\tint res = ccw(p0, p1, p2);\n\t\tswitch (res)\n\t\t{\n\t\tcase CLOCKWISE:\n\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\t\tbreak;\n\t\tcase COUNTER_CLOCKWISE:\n\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t\tbreak;\n\t\tcase ONLINE_FRONT:\n\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t\tbreak;\n\t\tcase ONLINE_BACK:\n\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t\tbreak;\n\t\tcase ON_SEGMENT:\n\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint main(){\n\n\tint p0x,p0y,p1x,p1y,p2x,p2y;\n\tint q,cr;\n\n\tcin>>p0x>>p0y>>p1x>>p1y;\n\tcin>>q;\n\n\tfor(int i=0;i<q;i++){\n\t\tcin>>p2x>>p2y;\n\t\tcr=(p2x-p0x)*(p1y-p0y)-(p1x-p0x)*(p2y-p0y);\n\t\tif(cr==0){\n\t\t\tif(p2x-p0x<0==p1x-p0x<0&&p2y-p0y<0==p1y-p0y<0){\n\t\t\t\tif(pow(p2x-p0x,2.0)+pow(p2y-p0y,2.0)>pow(p1x-p0x,2.0)+pow(p1y-p0y,2.0)){\n\t\t\t\t\tcout<<\"ONLINE_FRONT\"<<endl;\n\t\t\t\t}\n\t\t\t\telse cout<<\"ON_SEGMENT\"<<endl;\n\t\t\t}\n\t\t\telse cout<<\"ONLINE_BACK\"<<endl;\n\t\t}\n\t\telse if(cr>0) cout<<\"CLOCKWISE\"<<endl;\n\t\telse cout<<\"COUNTER_CLOCKWISE\"<<endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\nstruct point{\n\tdouble x,y;\n\tpoint(){}\n\tpoint(double _x,double _y){\n\t\tx=_x;y=_y;\n\t}\n\tpoint operator -(const point &b) const{\n\t\treturn point(x-b.x,y-b.y);\n\t}\n\tdouble operator ^(const point &b) const{\n\t\treturn (x*b.x)+(y*b.y);\n\t}\n\tdouble operator *(const point &b) const{\n\t\treturn x*b.y-y*b.x;\n\t}\n};\ndouble len(point p){\n\treturn (p.x*p.x+p.y*p.y);\n}\nint solve(point p0,point p1,point p2){\n\tif((p1-p0)*(p2-p0)>0) return 1;\n\tif((p1-p0)*(p2-p0)<0) return 2;\n\tif(((p1-p0)^(p2-p0))<0) return 3;\n\tif(len(p1-p0)<len(p2-p0)) return 4;\n\treturn 5;\n}\nint main(){\n\tpoint p0,p1;\n\tint q;\n\tpoint p2;\n\tcin>>p0.x>>p0.y>>p1.x>>p1.y;\n\tcin>>q;\n\tfor(int i=1;i<=q;++i){\n\t\tcin>>p2.x>>p2.y;\n\t\tswitch(solve(p0,p1,p2)){\n\t\t\tcase 1: puts(\"COUNTER_CLOCKWISE\");break;\n\t\t\tcase 2: puts(\"CLOCKWISE\");break;\n\t\t\tcase 3: puts(\"ONLINE_BACK\");break;\n\t\t\tcase 4: puts(\"ONLINE_FRONT\");break;\n\t\t\tcase 5: puts(\"ON_SEGMENT\");break;\n\t\t}\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <array>\n#include <vector>\n#include <cmath>\n\nconst double EPSILON = 1e-10;\n\ninline bool equals(double a, double b) {\n    return std::fabs(a - b) < EPSILON;\n}\n\nstruct Point {\n    double x;\n    double y;\n\n    bool operator < (const Point& p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point& p) const {\n        return equals(x, p.x) && equals(y, p.y);\n    }\n};\n\nPoint operator + (const Point& p1, const Point& p2) {\n    return Point{p1.x + p2.x, p1.y + p2.y};\n}\n\nPoint operator - (const Point& p1, const Point& p2) {\n    return Point{p1.x - p2.x, p1.y - p2.y};\n}\n\nPoint operator * (const Point& p1, double k) {\n    return Point{p1.x * k, p1.y * k};\n}\n\nstruct Segment {\n    Point p1, p2;\n};\n\nstruct Circle {\n    Point center;\n    double radius;\n};\n\nusing Vector = Point;\nusing Line = Segment;\nusing Polygon = std::vector<Point>;\n\n\ndouble norm(const Vector& p) {\n    return p.x * p.x + p.y * p.y;\n}\n\ndouble abs(const Vector& p) {\n    return std::sqrt(norm(p));\n}\n\ndouble dot(const Vector& a, const Vector& b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(const Vector& a, const Vector& b) {\n    return a.x * b.y - a.y * b.x;\n}\n\n\nVector projection(const Segment& s, const Point& p) {\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / norm(base);\n    return s.p1 + base * r;\n}\n\nVector reflection(const Segment& s, const Point& p) {\n    auto proj = projection(s, p);\n    return p + (projection(s, p) - p) * 2.0;\n}\n\nbool is_orthogonal(const Vector& a, const Vector& b) {\n    return equals(dot(a, b), 0.0);\n}\n\nbool is_orthogonal(const Segment& s1, const Segment& s2) {\n    return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nbool is_parallel(const Vector& a, const Vector& b) {\n    return equals(cross(a, b), 0.0);\n}\n\nbool is_parallel(const Segment& s1, const Segment& s2) {\n    return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nenum {\n    COUNTER_CLOCKWISE = 1,\n    CLOCKWISE = -1,\n    ONLINE_BACK = 2,\n    ONLINE_FRONT = -2,\n    ON_SEGMENT = 0,\n};\n\nint ccw(const Point& p0, const Point& p1, const Point& p2) {\n    auto a = p1 - p0;\n    auto b = p2 - p0;\n    if (cross(a, b) > EPSILON) return COUNTER_CLOCKWISE;\n    if (cross(a, b) < -EPSILON) return CLOCKWISE;\n    if (dot(a, b) < -EPSILON) return ONLINE_BACK;\n    if (norm(a) < norm(b)) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\nbool intersect(const Point& p1, const Point& p2, const Point& p3, const Point& p4) {\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n            ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\n\nbool intersect(const Segment& s1, const Segment& s2) {\n    return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\ndouble distance(const Point& a, const Point& b) {\n    return abs(a - b);\n}\n\ndouble distanceLP(const Line& l, const Point& p) {\n    return abs(cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1));\n}\n\ndouble distanceSP(const Segment& s, const Point& p) {\n    if (dot(s.p2 - s.p1, p - s.p1) < 0.0) return abs(p - s.p1);\n    if (dot(s.p1 - s.p2, p - s.p2) < 0.0) return abs(p - s.p2);\n    return distanceLP(s, p);\n}\n\ndouble distance(const Segment& s1, const Segment& s2) {\n    using std::min;\n    if (intersect(s1, s2)) return 0.0;\n    return min(min(distanceSP(s1, s2.p1), distanceSP(s1, s2.p2)),\n               min(distanceSP(s2, s1.p1), distanceSP(s2, s1.p2)));\n}\n\n\nint main() {\n    using namespace std;\n\n    array<Point, 3> points;\n    for (int i = 0; i < 2; ++i) {\n        cin >> points[i].x >> points[i].y;\n    }\n    int q;\n    cin >> q;\n    for (int i = 0; i < q; ++i) {\n        cin >> points[2].x >> points[2].y;\n        switch (ccw(points[0], points[1], points[2])) {\n        case COUNTER_CLOCKWISE:\n            cout << \"COUNTER_CLOCKWISE\";\n            break;\n        case CLOCKWISE:\n            cout << \"CLOCKWISE\";\n            break;\n        case ONLINE_BACK:\n            cout << \"ONLINE_BACK\";\n            break;\n        case ONLINE_FRONT:\n            cout << \"ONLINE_FRONT\";\n            break;\n        case ON_SEGMENT:\n            cout << \"ON_SEGMENT\";\n            break;\n        }\n        cout << endl;\n    }\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<complex>\nusing namespace std;\n\ntypedef complex<int> P;\n\nvoid ccw(P a,P b,P c){\n\tb-=a;c-=a;\n\tint t=b.real()*c.imag()-b.imag()*c.real();\n\tint t2=c.real()*b.real()+c.imag()*b.imag();\n\tif(t>0) cout<<\"COUNTER_CLOCKWISE\" <<endl;\n\telse if(t<0)  cout<<\"CLOCKWISE\" <<endl;\n\telse if(t2<0)\tcout<<\"ONLINE_BACK\"<<endl;\n\telse if(abs(c)>abs(b))\tcout<<\"ONLINE_FRONT\" <<endl;\n\telse cout<<\"ON_SEGMENT\" <<endl;\n}\n\n\nint main(){\n\tint x1,y1,x2,y2,x3,y3,q;\n\tcin>>x1>>y1>>x2>>y2>>q;\n\tP a(x1,y1);\n\tP b(x2,y2);\n\twhile(q--){\n\t\tcin>>x3>>y3;\n\t\tP c(x3,y3);\n\t\tccw(a,b,c);\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <complex>\n#include <cmath>\n\nusing Real = long double;\n\nconst Real EPS = 1e-10;\n\n// 宇宙船演算子\ninline Real compare(Real a, Real b) {\n    if (std::abs(a - b) < EPS) return 0;\n    return a - b > 0 ? 1 : -1;\n}\n\ntemplate <class T>\ninline T sq(T x) { return x * x; }\n\n\nusing Point = std::complex<Real>;\nusing Segment = std::pair<Point, Point>;\n\ninline Real length(Segment l) {\n    return std::abs(l.second - l.first);\n}\n\n// inner product\ninline Real dot(Point x, Point y) {\n    return std::real(std::conj(x) * (y));\n}\n\n// outer product\ninline Real cross(Point x, Point y) {\n    return std::imag(std::conj(x) * (y));\n}\n\n// lに対するxの正射影\nPoint proj(Segment l, Point p) {\n    Real ratio = dot(l.second - l.first, p - l.first) / sq(length(l));\n    return l.first + (l.second - l.first) * ratio;\n}\n\n// lを軸としてxに対称な点\nPoint refl(Segment l, Point p) {\n    Point t = proj(l, p);\n    return t + (t - p);\n}\n\n// lに対するpの位置\n// counter clockwise -> 1, clockwise   -> -1\n// online front      -> 2, online back -> -2\n// on segment        -> 0\nint side(Segment l, Point p) {\n    Real c = cross(l.second - l.first, p - l.first);\n    if (compare(c, 0) != 0) return compare(c, 0);\n\n    Real d = dot(l.second - l.first, p - l.first);\n    if (compare(d, 0) < 0) return -2;\n\n    return (compare(length(Segment(l.first, p)), length(l)) > 0 ? 2 : 0);\n}\n\n\n#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint main() {\n    Real x1, y1, x2, y2;\n    cin >> x1 >> y1 >> x2 >> y2;\n    Segment l(Point(x1, y1), Point(x2, y2));\n\n    int Q;\n    cin >> Q;\n    for (int q = 0; q < Q; ++q) {\n        Real x, y;\n        cin >> x >> y;\n        Point p(x, y);\n\n        string ans;\n        switch (side(l, p)) {\n            case 1:\n                ans = \"COUNTER_CLOCKWISE\";\n                break;\n            case -1:\n                ans = \"CLOCKWISE\";\n                break;\n            case 2:\n                ans = \"ONLINE_FRONT\";\n                break;\n            case -2:\n                ans = \"ONLINE_BACK\";\n                break;\n            case 0:\n                ans = \"ON_SEGMENT\";\n                break;\n            default:\n                terminate();\n        }\n        cout << ans << endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i,n) for(int i=0;i<n;++i)\ntypedef complex<double> Point;\n#define X real()\n#define Y imag()\nconst double EPS = 0;\n\ndouble dot(Point a, Point b) {\n\treturn a.X*b.X + a.Y*b.Y;\n}\n\ndouble cross(Point a, Point b) {\n\treturn a.X*b.Y - a.Y*b.X;\n}\n\nstring ccw(Point a, Point b, Point c) {\n\tb -= a;  c -= a;\n\tif (cross(b,c) >  EPS) return \"COUNTER_CLOCKWISE\";\n\tif (cross(b,c) < -EPS) return \"CLOCKWISE\";\n\tif (dot(b,c)   < -EPS) return \"ONLINE_BACK\";  // c--a--b on line\n\tif (norm(b) < norm(c)) return \"ONLINE_FRONT\"; // a--b--c on line or a==b\n\treturn \"ON_SEGMENT\";                          // a--c--b on line or a==c or b==c\n}\n\nint main(void){\n\tdouble x1,y1,x2,y2,x,y;\n\tint q;\n\tcin>>x1>>y1>>x2>>y2>>q;\n\trep(i,q){\n\t\tcin>>x>>y;\n\t\tcout<<ccw({x1,y1},{x2,y2},{x,y})<<endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <complex>\n#include <map>\n#include <set>\n#include <vector>\n#include <stack>\n#include <queue>\n#include <bitset>\n#include <algorithm>\n#include <numeric>\n#include <functional>\nusing namespace std;\n\n#define Rep(b, e, i) for(int i = b; i <= e; i++)\n#define Repr(e, b, i) for(int i = e; i >= b; i--)\n#define rep(n, i) Rep(0, n-1, i)\n#define repr(n, i) Repr(n-1, 0, i)\n#define all(v) (v).begin(), (v).end()\n#define pb(v) push_back(v)\n#define uniq(v) (v).erase(unique(all(v)),(v).end())\n#define bitcnt(x) __builtin_popcount(x)\n#define fst first\n#define snd second\n#define Pqaz(T) priority_queue<T,vector<T>,greater<T>>\n#define Pqza(T) priority_queue<T>\n#define put(x) cout << x;\n#define puts(x) cout << x << ' ';\n#define putln(x) cout << x << endl;\n#define ENJYU std::ios::sync_with_stdio(false);std::cin.tie(0);\n\nconst double EPS = 1e-16;\ntypedef complex<double> comp;\n\nvoid solve(void){\n\n\tint x1, y1, x2, y2, Q;\n\tcin >> x1 >> y1 >> x2 >> y2 >> Q;\n\n\tcomp o(x1, y1), p(x2-x1, y2-y1), r;\n\n\t//回転用\n\tr = polar(1.0, arg(p));\n\n\twhile(Q--)\n\t{\n\t\tint x3, y3;\n\t\tcin >> x3 >> y3;\n\n\t\tcomp q(x3-x1, y3-y1);\n\n\t\tq /= r;\n\n\t\tif (abs(arg(q)) < EPS)\n\t\t{\n\t\t\tif (norm(p) > norm(q))\n\t\t\t{\n\t\t\t\tputln(\"ON_SEGMENT\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tputln(\"ONLINE_FRONT\");\n\t\t\t}\n\t\t}\n\t\telse if (abs(arg(q)-M_PI) < EPS)\n\t\t{\n\t\t\tputln(\"ONLINE_BACK\");\n\t\t}\n\t\telse if (arg(q) > 0)\n\t\t{\n\t\t\tputln(\"COUNTER_CLOCKWISE\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tputln(\"CLOCKWISE\");\n\t\t}\n\t}\n}\n\nint main(void){\n\tsolve();\n\t//cout << \"yui(*-v・)yui\" << endl;\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\n#define rep(i, a, b) for (int i = a, i##end = b; i <= i##end; ++i)\n#define per(i, a, b) for (int i = a, i##end = b; i >= i##end; --i)\n#define rep0(i, a) for (int i = 0, i##end = a; i < i##end; ++i)\n#define per0(i, a) for (int i = (int)a-1; ~i; --i)\n#define max(a, b) ((a) > (b) ? (a) : (b))\n#define min(a, b) ((a) < (b) ? (a) : (b))\n#define chkmax(a, b) a = max(a, b)\n#define chkmin(a, b) a = min(a, b)\n#define x first\n#define y second\n\ntypedef long long ll;\n\nconst double eps = 1e-10;\n\nstruct Point { double x, y; };\nPoint operator + (Point a, Point b) { return (Point){a.x + b.x, a.y + b.y}; }\nPoint operator - (Point a, Point b) { return (Point){a.x - b.x, a.y - b.y}; }\nPoint operator * (double k, Point a) { return (Point){k * a.x, k * a.y}; }\ndouble dot(Point a, Point b) { return a.x * b.x + a.y * b.y; }\ndouble cross(Point a, Point b) { return a.x * b.y - a.y * b.x; }\ndouble disc(Point a) { return sqrt(dot(a, a)); }\n\nPoint P1, P2;\nint q;\n\nint main() {\n\tscanf(\"%lf%lf%lf%lf\", &P1.x, &P1.y, &P2.x, &P2.y);\n\tscanf(\"%d\", &q);\n\twhile (q--) {\n\t\tPoint P3; scanf(\"%lf%lf\", &P3.x, &P3.y);\n\t\tPoint vec1 = P2-P1, vec2 = P3-P1; double t1 = cross(vec1, vec2), t2 = dot(vec1, vec2);\n\t\tif (fabs(t1) < eps) {\n\t\t\tif (t2 < -eps) printf(\"ONLINE_BACK\\n\");\n\t\t\telse printf(\"%s\\n\", disc(vec2) < disc(vec1) + eps ? \"ON_SEGMENT\" : \"ONLINE_FRONT\");\n\t\t} else printf(\"%s\\n\", t1 > 0 ? \"COUNTER_CLOCKWISE\" : \"CLOCKWISE\");\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n#define next Next\n#define gc getchar\nstruct node{\n\tdouble x,y;\n}a,b;\nnode operator - (node a,node b)\n{\n\treturn (node){a.x-b.x,a.y-b.y};\n}\ndouble DJ(node a,node b)\n{\n\treturn a.x*b.x+a.y*b.y;\n}\ndouble CJ(node a,node b)\n{\n\treturn a.x*b.y-a.y*b.x;\n}\ndouble len(node a)\n{\n\treturn a.x*a.x+a.y*a.y;\n}\n/*char buf[1<<21],*p1=buf,*p2=buf;\ninline int gc(){return p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++;}*/\ninline int read()\n{\n    int ret=0,f=0;char c=gc();\n    while(!isdigit(c)){if(c=='-')f=1;c=gc();}\n    while(isdigit(c)){ret=ret*10+c-48;c=gc();}\n    if(f)return -ret;return ret;\n}\nsigned main()\n{\n\ta=(node){read(),read()};\n\tb=(node){read(),read()};\n\tint n=read();\n\twhile(n--)\n\t{\n\t\tnode c=(node){read(),read()};\n\t\tint x=CJ(b-a,c-a);\n\t\tif(x>0){puts(\"COUNTER_CLOCKWISE\");continue;}\n\t\tif(x<0){puts(\"CLOCKWISE\");continue;}\n\t\tint y=DJ(b-a,c-a);\n\t\tif(y<0){puts(\"ONLINE_BACK\");continue;}\n\t\tdouble ma=max(len(c-a),len(c-b));\n\t\tif(ma>len(b-a)){puts(\"ONLINE_FRONT\");continue;}\n\t\tif(ma<=len(b-a)){puts(\"ON_SEGMENT\");continue;}\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <complex>\nusing namespace std;\ntypedef complex<int> point;\n\nstring ccw(point p0,point p1,point p2){\n  point temp;\n  p1-=p0;\n  p2-=p0;\n  temp=p1;\n  p1*=conj(temp);\n  p2*=conj(temp);\n  if(abs(temp)==0) return \"ON_SEGMENT\";\n  p1/=abs(temp);\n  if(p2.imag()>0) return \"COUNTER_CLOCKWISE\";\n  if(p2.imag()<0) return \"CLOCKWISE\";\n  p2/=abs(temp);\n  if(p2.real()<0) return \"ONLINE_BACK\";\n  if(p1.real()<p2.real()) return \"ONLINE_FRONT\";\n  return \"ON_SEGMENT\";\n}\n\nint main(){\n  int p0x,p0y,p1x,p1y,q,p2x,p2y;\n  cin>>p0x>>p0y>>p1x>>p1y;\n  point A = point(p0x,p0y);\n  point B = point(p1x,p1y);\n  cin>>q;\n  while(q--){\n    cin>>p2x>>p2y;\n    cout << ccw(  A, B , point(p2x,p2y) ) <<endl;    \n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>           // printf(), scanf()\n\nstatic const double EPS = 1e-10;\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nclass Point\n{\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0): x(x), y(y) {}\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n};\n\ntypedef Point Vector;\n\ndouble\nnorm(Vector a)\n{\n\treturn a.x * a.x + a.y * a.y;\n}\n\ndouble\ndot(Vector a, Vector b)\n{\n\treturn a.x * b.x + a.y * b.y;\n}\n\n\ndouble\ncross(Vector a, Vector b)\n{\n\treturn a.x * b.y - a.y * b.x;\n}\n\nint\nccw(Point p0, Point p1, Point p2)\n{\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\n\tif (cross(a, b) > EPS)\n\t\treturn COUNTER_CLOCKWISE;\n\n\tif (cross(a, b) < -EPS)\n\t\treturn CLOCKWISE;\n\n\tif (dot(a, b) < -EPS)\n\t\treturn ONLINE_BACK;\n\n\tif (norm(a) < norm(b))\n\t\treturn ONLINE_FRONT;\n\n\treturn ON_SEGMENT;\n}\n\nint\nmain(int argc, char** argv)\n{\n\t/*x                       -2 (#0)         -1 (#1)      0 (#2)        1 (#3)               2 (#4)     x*/\n\tconst char* output[5] = {\"ONLINE_FRONT\", \"CLOCKWISE\", \"ON_SEGMENT\", \"COUNTER_CLOCKWISE\", \"ONLINE_BACK\"};\n\tPoint p0, p1, p2;\n\tint x, y;\n\tint x1, y1, x2, y2;\n\tint q, i;\n\tint ix;\n\n\tscanf(\"%d %d %d %d\", &x1, &y1, &x2, &y2);\n\tp0.x = x1, p0.y = y1;\n\tp1.x = x2, p1.y = y2;\n\n\tscanf(\"%d\", &q);\n\tfor (i = 0; i < q; ++i)\n\t{\n\t\tscanf(\"%d %d\", &x, &y);\n\t\tp2.x = x, p2.y = y;\n\n\t\tix = ccw(p0, p1, p2);\n\t\tprintf(\"%s\\n\", output[ix + 2]);\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define REP(i,n) for (long long i=0;i<(n);i++)\n#define FOR(i,a,b) for (long long i=(a);i<(b);i++)\n#define RREP(i,n) for(long long i=n;i>=0;i--)\n#define RFOR(i,a,b) for(long long i=(a);i>(b);i--)\n#define dump1d_arr(array) REP(i,array.size()) cerr << #array << \"[\" << (i) << \"] ==> \" << (array[i]) << endl;\n#define dump2d_arr(array) REP(i,array.size()) REP(j,array[i].size()) cerr << #array << \"[\" << (i) << \"]\" << \"[\" << (j) << \"] ==> \" << (array[i][j]) << endl;\n#define dump(x)  cerr << #x << \" => \" << (x) << endl;\n#define dumpP(p) cerr << \"( \" << p.first << \" , \" << p.second << \" )\" << ends;\n#define CLR(vec) { REP(i,vec.size()) vec[i] = 0; } \n#define SORT(c) sort((c).begin(),(c).end())\n#define MIN(vec) *min_element(vec.begin(), vec.end());\n#define MAX(vec) *max_element(vec.begin(), vec.end());\n#define UNIQ(vec) vec.erase(unique(vec.begin(), vec.end()),vec.end());\n#define IN(n,m)  (!(m.find(n) == m.end()))\n#define ENUM(m) for (auto itr = m.begin(); itr != m.end(); ++itr)\n#define dump_MAP(m) for(auto itr = m.begin(); itr != m.end(); ++itr) { cerr << itr->first << \" --> \"  << itr->second << endl; }\n#define FINDL(vec,x) (lower_bound(vec.begin(),vec.end(),x) - vec.begin())\n#define FINDU(vec,x) (upper_bound(vec.begin(),vec.end(),x) - vec.begin())\n#define ROUND(N) setprecision(N)\nusing namespace std;\nconstexpr long double pi = M_PI;\nconstexpr double eps = 1e-10;\nconstexpr long mod = 1000000007;\nconstexpr short shINF = 32767;\nconstexpr long loINF = 2147483647;\nconstexpr long long llINF = 9223372036854775807;\ntypedef long long LL;\ntypedef vector<LL> VI;\ntypedef vector<VI> VVI;\ntypedef vector<string> VS;\ntypedef pair<LL,LL> pr;\ntypedef vector<pr> VP;\nstruct Order {\n  bool operator() (pr const& a,pr const& b) const {\n    return a.first > b.first || ((a.first == b.first) && (a.second > b.second));\n  }\n};\ntypedef struct _PT {\n  long double x, y;\n  _PT() {}\n  _PT(long double x,long double y) : x(x), y(y) {} \n  _PT operator + (_PT p){\n     return _PT(x + p.x, y + p.y);\n  }\n  _PT operator - (_PT p){\n     return _PT(x - p.x, y - p.y);\n  }\n  _PT operator * (long double d){\n     return _PT(d*x, d*y);\n  }\n  bool operator <(const struct _PT &e) const{\n     return x == e.x? (y < e.y) : x < e.x;\n  }\n  bool operator >(const struct _PT &e) const{\n     return x == e.x? (y > e.y) : x > e.x;\n  }\n\n  // --オプジェクトは位置ベクトル--\n\n  long double dist(_PT p){ //点pとの距離の2乗\n     return (x-p.x)*(x-p.x) + (y-p.y)*(y-p.y);\n  }\n\n  // --オブジェクトは幾何ベクトル--\n  \n  long double dot(_PT v){ //ベクトルvとの内積\n     return x * v.x + y * v.y;\n  }\n  \n  long double det(_PT v){ // ベクトルvとの外積\n     return x * v.y - v.x * y;\n  }\n\n  long double norm(void){ // ベクトルのノルム\n    return sqrt(x*x + y*y);\n  }\n\n  long double twiceNorm(void){ // ノルムの2乗\n    return x*x + y*y;\n  }\n\n  bool is_parallel(_PT v) { //ベクトルvと平行か(外積 = 0か)\n    return (abs(x * v.y - v.x * y) < eps);\n  }\n}P;\n\nint main(void) {\n  double px,py,qx,qy,rx,ry;\n  cin >> px >> py >> qx >> qy;\n  double base = atan2((qy-py),(py-px));\n  int n;\n  cin >> n;\n  REP(i,n) {\n    cin >> rx >> ry;\n    double rad = atan2((ry-py),(rx-px));\n    if (abs(rad-base) < eps) {\n      if (P (rx-px,ry-py) > P (qx-px,qy-py)) cout << \"ONLINE_FRONT\" << endl;\n      else cout << \"ON_SEGMENT\" << endl;\n    }\n    else if (abs(abs(rad - base)-pi) < eps) cout << \"ONLINE_BACK\" << endl;\n    else if (rad > base) cout << \"COUNTER_CLOCKWISE\" << endl;\n    else cout << \"CLOCKWISE\" << endl;\n  }\n\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\n#define rep(i,n) for(int i=0;i<(int)(n);i++)\n#define FOR(i,n,m) for(int i=(int)(n); i<=(int)(m); i++)\n#define RFOR(i,n,m) for(int i=(int)(n); i>=(int)(m); i--)\n#define ITR(x,c) for(__typeof(c.begin()) x=c.begin();x!=c.end();x++)\n#define RITR(x,c) for(__typeof(c.rbegin()) x=c.rbegin();x!=c.rend();x++)\n#define setp(n) fixed << setprecision(n)\n\ntemplate<class T> bool chmax(T &a, const T &b) { if (a<b) { a=b; return 1; } return 0; }\ntemplate<class T> bool chmin(T &a, const T &b) { if (a>b) { a=b; return 1; } return 0; }\n\n#define ll long long\n#define vll vector<ll>\n#define vi vector<int>\n#define pll pair<ll,ll>\n#define pi pair<int,int>\n\n#define all(a) (a.begin()),(a.end())\n#define rall(a) (a.rbegin()),(a.rend())\n#define fi first\n#define se second\n#define pb push_back\n#define mp make_pair\n#define ins insert\n\nusing namespace std;\n\n//-------------------------------------------------\n//--Geometry Template (Plane)\n//-------------------------------------------------\n\nusing lf = double;\nconst lf EPS = 1e-9;\nconst lf PI = acos(-1);\n\n#define sgn(x) (((x)<-EPS)?-1:((x)>EPS)?1:0)\n#define EQ(x,y) (sgn((y)-(x))==0)\n\nstruct V {\n    lf x,y;\n    V(){}\n    V(lf x, lf y):x(x),y(y){}\n    V(const V &v):x(v.x),y(v.y){}\n    V& operator+=(const V &v){x+=v.x; y+=v.y; return *this;}\n    V& operator-=(const V &v){x-=v.x; y-=v.y; return *this;}\n    V& operator*=(lf k){x*=k; y*=k; return *this;}\n    V& operator/=(lf k){x/=k; y/=k; return *this;}\n    V operator+(const V &v){return V(*this)+=v;}\n    V operator-(const V &v){return V(*this)-=v;}\n    V operator*(lf k){return V(*this)*=k;}\n    V operator/(lf k){return V(*this)/=k;}\n    V operator-(){return V(-x,-y);}\n    lf sq(){return x*x+y*y;}\n    lf norm(){return sqrt(sq());}\n    V unit(){return V(*this)/=norm();}\n    lf arg(){return atan2(y,x);}\n    V rot(lf c, lf s){return V(x*c-y*s,x*s+y*c);}\n    V rot(lf a){return rot(sin(a),cos(a));}\n    V rot90(){return V(-y,x);}\n    bool operator<(const V &v){return x<v.x;}\n    friend ostream& operator<<(ostream &os, const V &v){return os<<'('<<v.x<<\", \"<<v.y<<')';}\n};\n\nlf dot(const V &a, const V &b){return a.x*b.x+a.y*b.y;}\nlf det(const V &a, const V &b){return a.x*b.y-a.y*b.x;}\n\nint ccw(V a, V b, V c){\n    b-=a; c-=a;\n    if (sgn(det(b,c))>0) return 1;\n    else if(sgn(det(b,c))<0) return -1;\n    else if(sgn(dot(b,c))<0) return 2;\n    else if(sgn(b.norm()-c.norm())<0) return -2;\n    return 0;\n}\n\nstruct Line {\n    V p,q;\n    Line(){}\n    Line(const V &p, const V &q):p(p),q(q){}\n    Line(const Line &l):Line(l.p,l.q){}\n    V unit(){return (q-p).unit();}\n    lf arg(){return (q-p).arg();}\n    Line rot(lf c, lf s){return Line(p.rot(c,s),q.rot(c,s));}\n    Line rot(lf a){return Line(p.rot(a),q.rot(a));}\n    Line rot90(){return Line(p.rot90(),q.rot90());}\n};\n\nstruct Segment : Line {\n    Segment(){}\n    Segment(const V &p, const V &q):Line(p,q){}\n    Segment(const Segment &s):Line(s){}\n    lf sq(){return (Line::q-Line::p).sq();}\n    lf norm(){return (Line::q-Line::p).norm();}\n};\n\n// functions about lines\nbool parallel(V &a, V &b){return EQ(det(a,b),0.0);}\nbool parallel(Line &a, Line &b){return EQ(det(a.q-a.p,b.q-b.p),0.0);}\n\nbool samel(Line &a, Line &b){return parallel(a,b)&&EQ(det(a.q-a.p,b.p-a.p),0.0);}\nbool insec(Line &a, Line &b){return !parallel(a,b);}\nbool insec(Segment &a, Segment &b){\n    int c1 = ccw(a.p,a.q,b.p)*ccw(a.p,a.q,b.q);\n    int c2 = ccw(b.p,b.q,a.p)*ccw(b.p,b.q,a.q);\n    return (c1<=0 && c2<=0);\n}\nbool insec(Line &a, Segment &b){return ccw(a.p,a.q,b.p)*ccw(a.p,a.q,b.q)<=0;}\n\n// use only if lines have intersection\nV cpoint(Line &a, Line &b){\n    V r(a.q-a.p);\n    r *= det(b.p-a.p,b.q-b.p)/det(a.q-a.p,b.q-b.p);\n    return a.p+r;\n}\n\nlf distance(V &a, V &b){return (b-a).norm();}\nlf distance(Line &l, V &v){return abs(det((l.q-l.p).unit(),v-l.p));}\nlf distance(Line &a, Line &b){return (parallel(a,b))?distance(a,b.p):0.0;}\nlf distance(Segment &s, V &v){\n    if (sgn(dot(s.q-s.p,v-s.p))<0) return distance(s.p,v);\n    else if(sgn(dot(s.p-s.q,v-s.q))<0) return distance(s.q,v);\n    return distance((Line&)s,v);\n}\nlf distance(Segment &a, Segment &b){\n    if (insec(a,b)) return 0.0;\n    lf A=min(distance(a,b.p),distance(a,b.q));\n    lf B=min(distance(b,a.p),distance(b,a.q));\n    return min(A,B);\n}\nlf distance(Line &a, Segment &b){\n    if (insec(a,b)) return 0.0;\n    return min(distance(a,b.p),distance(a,b.q));\n}\n\nV subdiv(V &a, V &b, lf m, lf n){return (a*n+b*m)/(m+n);}\nV outside(V &a, V &b, lf m, lf n){return (-a*n+b*m)/(m-n);}\nV ppfoot(Line &l, V &v){\n    V u = (l.q-l.p).unit();\n    return l.p+u*dot(u,v-l.p);\n}\n\nLine vbsector(V &a, V &b){\n    V m = (a+b)/2;\n    return Line(m, m+(b-a).rot90());\n}\nLine absector(V &c, V &a, V &b){\n    lf m=(a-c).norm(), n=(b-c).norm();\n    return Line(c,subdiv(a,b,m,n));\n}\nLine perpend(V &c, V &a, V &b){return Line(c,c+(b-a).rot90());}\n\n//-------------------------------------------------\n\nint main(void)\n{\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    int a,b,c,d; cin>>a>>b>>c>>d;\n    V A(a,b), B(c,d);\n    int q; cin>>q;\n    cout<<setp(12);\n    while(q--){\n        int x,y; cin>>x>>y;\n        V C = V(x,y);\n        int c = ccw(A,B,C);\n        if (c==1)  cout<<\"COUNTER_CLOCKWISE\\n\";\n        if (c==-1) cout<<\"CLOCKWISE\\n\";\n        if (c==2)  cout<<\"ONLINE_BACK\\n\";\n        if (c==-2) cout<<\"ONLINE_FRONT\\n\";\n        if (c==0)  cout<<\"ON_SEGMENT\\n\";\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "//AOJ-CGL-1-C\n#include <bits/stdc++.h>\nusing namespace std;\n#define REP(i,a) for(int i = 0; i < (a); i++)\n#define ALL(a) (a).begin(),(a).end()\ntypedef long long ll;\ntypedef pair<int, int> P;\nconst int INF = 1e9;\nconst int MOD = 1e9 + 7;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS )\n\nstruct Point {\n    double x, y;\n\n    Point(double x = 0, double y = 0) : x(x), y(y) {}\n    \n    Point operator + (Point p) { return Point(x + p.x, y + p.y); }\n    Point operator - (Point p) { return Point(x - p.x, y - p.y); }\n    Point operator * (double a) { return Point(a * x, a * y); }\n    Point operator / (double a) { return Point(x / a, y / a); }\n\n    double abs() { return sqrt(norm()); }\n    double norm() { return x * x + y * y; }\n\n    bool operator < (const Point &p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point &p) const {\n        return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n    }\n};\n\ntypedef Point Vector;\n\ndouble norm(Vector a) { return a.x * a.x + a.y * a.y; }\ndouble abs(Vector a) { return sqrt(norm(a)); }\ndouble dot(Vector a, Vector b) { return a.x * b.x + a.y * b.y; }\ndouble cross(Vector a, Vector b) { return a.x * b.y - a.y * b.x; }\n\nstruct Segment {\n    Point p1, p2;\n    Segment(Point p1 = Point(), Point p2 = Point()) : p1(p1), p2(p2) {}\n};\n\ntypedef Segment Line;\n\nstruct Circle {\n    Point c;\n    double r;\n    Circle(Point c = Point(), double r = 0.0) : c(c), r(r) {}\n};\n\ntypedef vector<Point> Polygon;\n\nbool isOrthogonal(Vector a, Vector b) {\n    return equals(dot(a, b), 0.0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n    return isOrthogonal(a1 - a2, b1 - b2);\n}\n\nbool isOrthogonal(Segment s1, Segment s2) {\n    return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nbool isParallel(Vector a, Vector b) {\n    return equals(cross(a, b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n    return isParallel(a1 - a2, b1 - b2);\n}\n\nbool isParallel(Segment s1, Segment s2) {\n    return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nPoint project(Segment s, Point p) {\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / norm(base);\n    return s.p1 + base * r;\n}\n\nPoint reflect(Segment s, Point p) {\n    return p + (project(s, p) - p) * 2.0;\n}\n\ndouble getDistance(Point a, Point b) {\n    return abs(a - b);\n}\n\ndouble getDistanceLP(Line l, Point p) {\n    return abs(cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1));\n}\n\ndouble getDistanceSP(Segment s, Point p) {\n    if ( dot(s.p2 - s.p1, p - s.p1) < 0.0 ) return abs(p - s.p1);\n    if ( dot(s.p1 - s.p2, p - s.p2) < 0.0 ) return abs(p - s.p2);\n    return getDistanceLP(s, p);\n}\n\nbool intersect(Segment s1, Segment s2);\n\ndouble getDistance(Segment s1, Segment s2) {\n    if ( intersect(s1, s2) ) return 0.0;\n    return min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n               min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nint ccw(Point p0, Point p1, Point p2) {\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if( cross(a, b) > EPS ) return COUNTER_CLOCKWISE;\n    if( cross(a, b) < -EPS ) return CLOCKWISE;\n    if( dot(a, b) < -EPS ) return ONLINE_BACK;\n    if( a.norm() < b.norm() ) return ONLINE_FRONT;\n\n    return ON_SEGMENT;\n}\n\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n    return ( ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n             ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0 );\n}\n\nbool intersect(Segment s1, Segment s2) {\n    return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\nPoint getCrossPoint(Segment s1, Segment s2) {\n    Vector base = s2.p2 - s2.p1;\n    double d1 = abs(cross(base, s1.p1 - s2.p1));\n    double d2 = abs(cross(base, s1.p2 - s2.p1));\n    double t = d1 / (d1 + d2);\n    return s1.p1 + (s1.p2 - s1.p1) * t;\n}\n\npair<Point, Point> getCrossPoints(Circle c, Line l) {\n    // assert(intersect(c, l));\n    Vector pr = project(l, c.c);\n    Vector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);\n    double base = sqrt(c.r * c.r - norm(pr - c.c));\n    return make_pair(pr + e * base, pr - e * base);\n}\n\ndouble arg(Vector p) { return atan2(p.y, p.x); }\nVector polar(double a, double r) { return Point(cos(r) * a, sin(r) * a); }\n\npair<Point, Point> getCrossPoints(Circle c1, Circle c2) {\n    // assert(intersect(c1, c2));\n    double d = abs(c1.c - c2.c);\n    double a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n    double t = arg(c2.c - c1.c);\n    return make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n}\n\n// IN : 2, ON : 1, OUT : 0\nint contains(Polygon g, Point p) {\n    int n = g.size();\n    bool x = false;\n    for( int i = 0; i < n; i++ ) {\n        Point a = g[i] - p, b = g[(i + 1) % n] - p;\n        if ( abs(cross(a, b)) < EPS && dot(a, b) < EPS) return 1;\n        if ( a.y > b.y ) swap(a, b);\n        if ( a.y < EPS && EPS < b.y && cross(a, b) > EPS ) x = !x;\n    }\n    return ( x ? 2 : 0 );\n}\n\nsigned main(){\n    double x0, y0, x1, y1;\n    int q;\n    cin >> x0 >> y0 >> x1 >> y1;\n    cin >> q;\n    double x2, y2;\n    REP(i,q){\n        cin >> x2 >> y2;\n        if(ccw(Point(x0, y0), Point(x1, y1), Point(x2, y2)) == COUNTER_CLOCKWISE){\n            cout << \"COUNTER_CLOCKWISE\" << endl;\n        }else if(ccw(Point(x0, y0), Point(x1, y1), Point(x2, y2)) == CLOCKWISE){\n            cout << \"CLOCKWISE\" << endl;\n        }else if(ccw(Point(x0, y0), Point(x1, y1), Point(x2, y2)) == ONLINE_BACK){\n            cout << \"ONLINE_BACK\" << endl;\n        }else if(ccw(Point(x0, y0), Point(x1, y1), Point(x2, y2)) == ONLINE_FRONT){\n            cout << \"ONLINE_FRONT\" << endl;\n        }else if(ccw(Point(x0, y0), Point(x1, y1), Point(x2, y2)) == ON_SEGMENT){\n            cout << \"ON_SEGMENT\" << endl;\n        }\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <complex>\n#include <vector>\n#include <cstdio>\nusing namespace std;\nconst double EPS = 1e-8;\nconst double INF = 1e12;\ntypedef complex<double> P;\nnamespace std {\n  bool operator < (const P& a, const P& b) {\n    return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n  }\n}\ndouble cross(const P& a, const P& b) {\n  return imag(conj(a)*b);\n}\ndouble dot(const P& a, const P& b) {\n  return real(conj(a)*b);\n}\n\nstruct L : public vector<P> {\n  L(const P &a, const P &b) {\n    push_back(a); push_back(b);\n  }\n};\n\ntypedef vector<P> G;\n\nstruct C {\n  P p; double r;\n  C(const P &p, double r) : p(p), r(r) { }\n};\n\nint ccw(P a, P b, P c) {\n  b -= a; c -= a;\n  if (cross(b, c) > 0)   return +1;       // counter clockwise\n  if (cross(b, c) < 0)   return -1;       // clockwise\n  if (dot(b, c) < 0)     return +2;       // c--a--b on line\n  if (norm(b) < norm(c)) return -2;       // a--b--c on line\n  return 0;                               // a--c--b on line\n}\n\nconst char *z[]={\"ONLINE_FRONT\",\"CLOCKWISE\",\"ON_SEGMENT\",\"COUNTER_CLOCKWISE\",\"ONLINE_BACK\"};\nint main(){\n\tdouble x,y;\n\tint q;\n\tscanf(\"%lf%lf\",&x,&y);P p0(x,y);\n\tscanf(\"%lf%lf%d\",&x,&y,&q);P p1(x,y);\n\tfor(;q--;){\n\t\tscanf(\"%lf%lf\",&x,&y);P p(x,y);\n\t\tputs(z[ccw(p0,p1,p)+2]);\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\nint main()\n{\n    double x0,y0,x1,y1,q,x2,y2;\n    cin>>x0>>y0>>x1>>y1;\n    cin>>q;\n    while(q--)\n    {\n        cin>>x2>>y2;\n        double l=x2*(y0-y1)+y2*(x1-x0)+y0*(x0-x1)+x0*(y1-y0);\n        if(l>0)\n            cout<<\"COUNTER_CLOCKWISE\\n\";\n        else if(l<0)\n            cout<<\"CLOCKWISE\\n\";\n        else\n        {\n            double p0p1,p1p2,p0p2;\n            p0p1=sqrt((x0-x1)*(x0-x1)+(y0-y1)*(y0-y1));\n            p1p2=sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));\n            p0p2=sqrt((x0-x2)*(x0-x2)+(y0-y2)*(y0-y2));\n            if(fabs(p0p1-p0p2-p1p2)<0.0000001)\n            cout<<\"ON_SEGMENT\\n\";\n            else if(fabs(p1p2-p0p1-p0p2)<0.0000001)\n            cout<<\"ONLINE_BACK\\n\";\n            else if(fabs(p0p2-p1p2-p0p1)<0.0000001)\n            cout<<\"ONLINE_FRONT\\n\";\n        }\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include <cstdlib>\n#include <stack>\n#include <queue>\n#include <list>\n#include <vector>\n#include <sstream>\n\nusing namespace std;\n\nclass c_main\n{\nprivate:\n    \npublic:\n    c_main();\n    void f_input();\n};\n\nc_main::c_main()\n{\n\n}\n\nvoid c_main::f_input()\n{\n    double xp1,yp1,xp2,yp2;\n    int q;\n    int i;\n    double x[1000];\n    double y[1000];\n    double a;\n    double b;\n    double x_a;\n    double y_a;\n    double a_a;\n    double b_a;\n    int pt1;\n\n    cin >> xp1 >> yp1 >> xp2 >> yp2;\n    \n    if (xp1 == xp2){\n        x_a = xp1;\n        y_a = 0;\n        pt1 = 0;\n    }else if (yp1 == yp2){\n        x_a = 0;\n        y_a = yp1; \n        pt1 = 1;\n    }else{\n        \n        a_a = (yp2-yp1)/(xp2-xp1);\n      \n        a = -1 * (1/a_a);\n       \n        b_a = -1 * a_a * xp1+ yp1;\n        pt1 = 2;\n    }\n    \n    cin >> q;\n    \n    for ( i = 0; i < q; ++i){\n        cin >> x[i] >> y[i];\n        if (pt1 == 0){\n            if(yp1 >= yp2){\n                if(x[i] == x_a){\n                    if(y[i] > yp1){\n                        cout << \"ONLINE__BACK\" << endl;\n                    }else if(y[i] < yp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(yp2 <= y[i] && y[i] <= yp1){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(x[i] < x_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n                }else if(x[i] > x_a){\n                    cout << \"CLOCKWISE\" << endl;\n     \n                }\n            }else{\n                if(x[i] == x_a){\n                    if(y[i] < yp1){\n                        cout << \"ONLINE_BACK\" << endl;\n                    }else if(y[i] > yp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(yp1 <= y[i] && y[i] <= yp2){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(x[i] < x_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n                    \n                }else if(x[i] > x_a){\n                    cout << \"CLOCKWISE\" << endl;\n                }\n            }\n            //printf(\"%10.10f %10.10f\\n\", x_a,y[i]);\n            \n        }else if(pt1 == 1){\n            if(xp1 >= xp2){\n                if(y[i] == y_a){\n                    if(x[i] > xp1){\n                        cout << \"ONLINE_BACK\" << endl;\n                    }else if(x[i] < xp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(xp2 <= x[i] && x[i] <= xp1){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(y[i] < y_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n                }else if(y[i] > y_a){\n                    cout << \"CLOCKWISE\" << endl;\n                }\n            }else{\n                if(y[i] == y_a){\n                    if(x[i] < xp1){\n                        cout << \"ONLINE_BACK\" << endl;\n                    }else if(x[i] > xp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(xp1 <= x[i] && x[i] <= xp2){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(y[i] < y_a){\n                    cout << \"CLOCKWISE\" << endl;\n                }else if(y[i] > y_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n                }\n            }\n            //printf(\"%10.10f %10.10f\\n\", x[i],y_a);\n        }else if(pt1 == 2){\n            b = -1 * a * x[i] + y[i];\n            x_a = (b - b_a)/(a_a - a);\n            y_a = a_a * x_a + b_a;\n            if(xp1 >= xp2){\n                if(y[i] == y_a){\n                    if(x[i] > xp1){\n                        cout << \"ONLINE_BACK\" << endl;\n                    }else if(x[i] < xp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(xp2 <= x[i] && x[i] <= xp1){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(y[i] < y_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n                }else if(y[i] > y_a){\n                    \n                    cout << \"CLOCKWISE\" << endl;\n                }\n            }else{\n                if(y[i] == y_a){\n                    if(x[i] < xp1){\n                        cout << \"ONLINE_BACK\" << endl;\n                    }else if(x[i] > xp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(xp1 <= x[i] && x[i] <= xp2){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(y[i] < y_a){\n                    cout << \"CLOCKWISE\" << endl;\n                }else if(y[i] > y_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n                }\n            }\n            //printf(\"%10.10f %10.10f\\n\", x_a,y_a);\n        }\n    }\n}\n\nint main(){\n    c_main main01;\n    main01.f_input();\n    \n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n \nconst double EPS = 1e-8, PI = acos(-1);\ninline bool eq(double a,double b){ return abs(b - a) < EPS; }\n#define curr(P,i) P[i]\n#define next(P,i) P[(i+1)%P.size()]\n#define prev(P,i) P[(i+P.size()-1) % P.size()]\nenum { OUT, ON, IN };\n \nstruct Geometory { // Geometory Library\n  struct Point {\n    double x, y;\n    Point(){};\n    Point(double x,double y):x(x),y(y){};\n    Point operator+(const Point& b) const { return Point(x + b.x,y + b.y); }\n    Point operator-(const Point& b) const { return Point(x - b.x,y - b.y); }\n    Point operator*(const double b) const { return Point(x * b,y * b); }\n    Point operator*(const Point& b) const { return Point(x * b.x - y * b.y,x * b.y + y * b.x); }\n    Point operator/(const double b) const { return Point(x / b,y / b); }\n    bool operator< (const Point& b) const { return x != b.x ? x < b.x : y < b.y; }\n    bool operator==(const Point& b) const { return eq(x,b.x) && eq(y,b.y); }\n    double norm(){ return x * x + y * y; }\n    double arg(){ return atan2(x,y); }\n    double abs(){ return sqrt(norm()); }\n    Point rotate(double theta){ return Point(cos(theta) * x - sin(theta) * y,sin(theta) * x + cos(theta) * y); }\n    Point rotate90(){ return Point(-y,x); }\n    friend ostream& operator<<(ostream& os, Point& p){ return os<<\"(\"<<p.x<<\",\"<<p.y<<\")\"; }\n    friend istream& operator>>(istream& is, Point& a){ return is>>a.x>>a.y; }\n  };\n \n  struct Line {\n    Point a, b;\n    Line(){};\n    Line(Point a,Point b):a(a),b(b){};\n  };\n  struct Segment {\n    Point a, b;\n    Segment(){};\n    Segment(Point a,Point b):a(a),b(b){};\n  };\n  struct Circle {\n    Point p; double r;\n    Circle(){};\n    Circle(Point p, double r) : p(p),r(r){};\n  };\n  typedef vector< Point > Polygon;\n  typedef vector< Segment > Segments;\n  typedef vector< Line > Lines;\n  typedef vector< Circle > Circles;\n  typedef pair< Point, Point > PointPoint;\n \n  double cross(const Point& a,const Point& b){\n    return a.x * b.y - a.y * b.x;\n  }\n  double dot(const Point& a,const Point& b){\n    return a.x * b.x + a.y * b.y;\n  }\n \n  int ccw(const Point& a,Point b,Point c){\n    b = b - a, c = c - a;\n    if(cross(b,c) > 0)    return +1;  // a → b で 反時計方向におれて c\n    if(cross(b,c) < 0)    return -1; // a → b で 時計方向におれて c\n    if(dot(b,c) < 0)      return +2;  // c -- a -- bで一直線上\n    if(b.norm() < c.norm()) return -2; // a -- b -- cで一直線上\n    return 0;  // a -- c -- bで一直線上\n  }\n  Point Projection(const Line& l, const Point& p){\n    double t = dot( p - l.a, l.a - l.b) / (l.a - l.b).norm();\n    return l.a + (l.a - l.b) * t;\n  }\n  Point Projection(const Segment& l, const Point& p){\n    double t = dot( p - l.a, l.a - l.b) / (l.a - l.b).norm();\n    return l.a + (l.a - l.b) * t;\n  }\n  Point Reflection(const Line& l, const Point& p){\n    return p + (Projection( l, p) - p) * 2.0;\n  }\n \n  double Distance( const Line& l,const Point& p) { //OK\n    return (p - Projection( l, p)).abs();\n  }\n \n  bool Intersect(const Line& l, const Line& m){\n    return abs(cross(l.b - l.a, m.b - m.a)) > EPS || abs(cross(l.b-l.a, m.b-l.a)) < EPS;\n  }\n  bool Intersect(const Line& l, const Segment& s){\n    return cross( l.b - l.a, s.a - l.a) * cross( l.b - l.a, s.b - l.a) < EPS;\n  }\n  bool Intersect(const Line& l, const Point& p){\n    return abs(ccw(l.a, l.b, p)) != -1;\n  }\n  bool Intersect(const Segment& s, const Segment& t){\n    return ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 && ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0;\n  }\n  bool Intersect(const Segment& s, const Point& p){\n    return ccw(s.a, s.b, p) == 0;\n  }\n  bool Intersect(const Circle& c,const Line& l){\n    return Distance( l, c.p) <= c.r + EPS;\n  }\n  bool Intersect(const Circle& c,const Point& p){\n    return abs( ( p - c.p).abs() - c.r ) < EPS;\n  }\n  int Intersect(const Circle& c, const Segment& l){\n    if( (Projection( l, c.p) - c.p).norm() - c.r * c.r > EPS) return 0;\n    const double d1 = ( c.p - l.a).abs(), d2 = ( c.p - l.b).abs();\n    if( d1 < c.r + EPS && d2 < c.r + EPS) return 0;\n    if( d1 < c.r - EPS && d2 > c.r + EPS || d1 > c.r + EPS && d2 < c.r - EPS ) return 1;\n    const Point h = Projection( l, c.p);\n    if( dot( l.a - h, l.b - h) < 0) return 2;\n    return 0;\n  }\n  bool Intersect(const Circle& a,const Circle& b){\n    return ( ( a.p - b.p).norm() - ( a.r + b.r) * ( a.r + b.r) < EPS) &&\n      ( ( a.p - b.p).norm() - ( a.r - b.r) * ( a.r - b.r) > -EPS);\n  }\n  double Distance(const Segment& s,const Point& p){\n    Point r = Projection(s, p);\n    if ( Intersect( s, r)) return ( r - p).abs();\n    return min( ( s.a - p).abs(), ( s.a - p).abs());\n  }\n  double Distance(const Segment& a,const Segment& b){\n    if(Intersect( a, b)) return 0;\n    return min( min( Distance( a, b.a), Distance( a, b.b)), min( Distance( b, a.a), Distance( b, a.b)));\n  }\n  double Distance(const Line& l,const Line& m) {\n    return Intersect( l, m) ? 0 : Distance( l, m.a);\n  }\n  double Distance(const Line& l,const Segment& s) { //OK\n    if (Intersect(l, s)) return 0;\n    return min(Distance(l, s.a), Distance(l, s.b));\n  }\n  double Distance(const Point& a,const Point& b){ //OK\n    return ( a - b).abs();\n  }\n  Point Crosspoint(const Segment& l,const Segment& m) { //OK\n    double A = cross(l.b - l.a, m.b - m.a);\n    double B = cross(l.b - l.a, l.b - m.a);\n    if (abs(A) < EPS && abs(B) < EPS) return m.a; // same line\n    return m.a + (m.b - m.a) * B / A;\n  }\n  PointPoint Crosspoint(const Circle& c,const Line l){\n    Point hp = Projection( l, c.p), h =  hp - c.p;\n    const double d2 = h.norm();\n    Point v = ( l.b - l.a) * sqrt( c.r * c.r - d2) / ( l.b - l.a).abs();\n    return PointPoint(hp - v, hp + v);\n  }\n  PointPoint Crosspoint(const Circle& c,const Segment& l) {\n    Line aa = Line( l.a, l.b);\n    if(Intersect(c, l) == 2) return Crosspoint(c, aa);\n    PointPoint ret = Crosspoint(c, aa);\n    if(dot(l.a - ret.first, l.b - ret.first) < 0) ret.second = ret.first;\n    else ret.first = ret.second;\n    return ret;\n  }\n  PointPoint Crosspoint(const Circle& c1,const Circle& c2){ //OK\n    double d = (c1.p - c2.p).abs();\n    double s = (c1.r + c2.r + d) / 2;\n    double S = sqrt( s * ( s - c1.r) * ( s - c2.r) * ( s - d));\n    double h = 2 * S / d;\n    Point v = ( c2.p - c1.p) / ( c2.p - c1.p).abs();\n    double m = sqrt( c1.r * c1.r - h * h);\n    return PointPoint( c1.p + v * m + Point(0,1) * h * v, c1.p + v * m - Point(0,1) * h * v);\n  }\n  bool parallel(const Segment& a,const Segment& b){\n  return abs( cross( a.b - a.a, b.b - b.a)) < EPS;\n  }\n  bool orthogonal(const Segment& a,const Segment& b){\n    return dot( a.a - a.b, b.a - b.b) < EPS;\n  }\n  int Contains(const Polygon& Q,const Point& p){\n    bool in = false;\n    for(int i = 0 ; i < Q.size() ; i++ ){\n      Point a = curr(Q,i) - p, b = next(Q,i) - p;\n      if(a.y > b.y) swap(a,b);\n      if(a.y <= 0 && 0 < b.y && cross(a,b) < 0) in = !in;\n      if(cross(a,b) == 0 && dot(a,b) <= 0) return ON;\n    }\n    return in ? IN : OUT;\n  }\n  bool Contains(const Circle& c,const Point& p){\n    return ( c.p - p).abs() < c.r + EPS;\n  }\n  double Area2(const Polygon& p){ //OK\n    double A = 0;\n    for (int i = 0; i < p.size(); ++i){\n      A += cross(curr(p, i), next(p, i));\n    }\n    return A;\n  }\n};\n \nGeometory geo;\ntypedef Geometory::Point P;\ntypedef Geometory::Line L;\ntypedef Geometory::Segment S;\ntypedef Geometory::Circle C;\n\nint main(){\n  int q;\n  P p1, p2, p3;\n  cin >> p1 >> p2;\n  cin >> q;\n  while(q--){\n    cin >> p3;\n    switch(geo.ccw( p1, p2, p3)){\n    case +1: cout << \"COUNTER_CLOCKWISE\" << endl; break;\n    case -1: cout << \"CLOCKWISE\" << endl; break;\n    case +2: cout << \"ONLINE_BACK\" << endl; break;\n    case -2: cout << \"ONLINE_FRONT\" << endl; break;\n    case  0: cout << \"ON_SEGMENT\" << endl; break;\n    }\n  }\n  return(0);\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\nusing namespace std;\n\nstruct Point{\n    int x;\n    int y;\n    Point(double x, double y) : x(x), y(y) {}\n};\ntypedef Point Vector;\nint get_dot(Vector v1, Vector v2){\n    return v1.x * v2.x + v1.y * v2.y;\n}\nint get_cross(Vector v1, Vector v2){\n    return v1.x * v2.y - v1.y * v2.x;\n}\n\nint main(){\n    int x_p0, y_p0, x_p1, y_p1;\n    cin >> x_p0 >> y_p0 >> x_p1 >> y_p1;\n    Vector v1(x_p1 - x_p0, y_p1 - y_p0);\n    int q;\n    cin >> q;\n    for (int i = 0; i < q; i++) {\n        int x_p2, y_p2;\n        cin >> x_p2 >> y_p2;\n        Vector v2(x_p2 - x_p0, y_p2 - y_p0);\n        double cross = get_cross(v1, v2);\n        if (cross > 0) {\n            cout << \"COUNTER_CLOCKWISE\" << endl;\n            continue;\n        }\n        if (cross < 0) {\n            cout << \"CLOCKWISE\" << endl;\n            continue;\n        }\n        double dot = get_dot(v1, v2);\n        if (dot < 0) {\n            cout << \"ONLINE_BACK\" << endl;\n            continue;\n        }\n        double norm1 = get_dot(v1, v1);\n        double norm2 = get_dot(v2, v2);\n        if (norm1 < norm2) {\n            cout << \"ONLINE_FRONT\" << endl;\n            continue;\n        }\n        cout << \"ON_SEGMENT\" << endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\n#define equals(a, b) (fabs((a)-(b)) < EPS)\nconst double EPS = (1e-10);\n\nclass Point {\npublic:\n    double x, y;\n\n    Point(double x = 0, double y = 0): x(x), y(y) {}\n\n    Point operator + (Point p) {\n        return Point(x+p.x, y+p.y);\n    }\n    Point operator - (Point p) {\n        return Point(x-p.x, y-p.y);\n    }\n    Point operator * (double a) {\n        return Point(x*a, y*a);\n    }\n    Point operator / (double a) {\n        return Point(x/a, y/a);\n    }\n\n    double abs() {\n        return sqrt(norm());\n    }\n    double norm() {\n        return x*x + y*y;\n    }\n\n    bool operator < (const Point &p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point &p) const {\n        return fabs(x-p.x) < EPS && fabs(y-p.y) < EPS;\n    }\n};\n\ntypedef Point Vector;\n// 内積\ndouble dot(Vector a, Vector b) {\n    return a.x*b.x + a.y*b.y;\n}\n// 外積\ndouble cross(Vector a, Vector b) {\n    return a.x*b.y - a.y*b.x;\n}\n\nclass Segment {\npublic:\n    Point p1, p2;\n\n    Segment(Point p1, Point p2): p1(p1), p2(p2) {}\n};\ntypedef Segment Line;\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\nint ccw(Point p0, Point p1, Point p2) {\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n\n    if (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n    if (cross(a, b) < -EPS) return CLOCKWISE;\n    if (dot(a, b) < -EPS) return ONLINE_BACK;\n    if (a.norm() < b.norm()) return ONLINE_FRONT;\n\n    return ON_SEGMENT;\n}\n\nint main(void) {\n    int x0, y0, x1, y1;\n    cin >> x0 >> y0 >> x1 >> y1;\n    Point p0(x0, y0), p1(x1, y1);\n\n    int q; cin >> q;\n    int x, y;\n    for (int i = 0; i < q; i++) {\n        cin >> x >> y;\n        Point p2(x, y);\n\n        switch(ccw(p0, p1, p2)) {\n        case COUNTER_CLOCKWISE:\n            cout << \"COUNTER_CLOCKWISE\" << endl;\n            break;\n        case CLOCKWISE:\n            cout << \"CLOCKWISE\" << endl;\n            break;\n        case ONLINE_BACK:\n            cout << \"ONLINE_BACK\" << endl;\n            break;\n        case ONLINE_FRONT:\n            cout << \"ONLINE_FRONT\" << endl;\n            break;\n        case ON_SEGMENT:\n            cout << \"ON_SEGMENT\" << endl;\n            break;\n        }\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cmath>\n#include<algorithm>\n#include<cstdio>\n#include<map>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b)) < EPS)\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\n\nclass Point\n{\npublic:\n\tdouble x, y;\n\tPoint(double x = 0, double y = 0) :x(x), y(y) {}\n\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a) { return Point(a * x, a * y); }\n\tPoint operator / (double b) { return Point(x / b, y / b); }\n\tfriend istream& operator >> (istream& s, Point p) {s >> p.x >> p.y;}\n\n\tdouble dot(Point a, Point b) { return a.x* b.x + a.y * b.y; }\n\tdouble abs() { return sqrt(norm()); }\n\tdouble norm() { return x * x + y * y; }\n\n\tbool operator <(const Point & p)const { return x != p.x ? x < p.x : y < p.y; }\n\tbool operator == (const Point & p) const { return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS; }\n};\ntypedef Point Vector;\n\nstruct Segment {\n\tPoint p1, p2;\n\tSegment() {}\n\tSegment(Point p1, Point p2) :p1(p1), p2(p2) {}\n};\ntypedef Segment Line;\n\ndouble norm(Vector a) { return a.x* a.x + a.y * a.y; }\ndouble abs(Vector a) { return sqrt(norm(a)); }\n\ndouble dot(Vector a, Vector b) { return a.x* b.x + a.y * b.y; }\ndouble cross(Vector a, Vector b) { return a.x* b.y - a.y * b.x; }\n\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS) return CLOCKWISE;\n\tif (dot(a, b) < -EPS) return ONLINE_BACK;\n\tif (a.norm() < b.norm()) return ONLINE_FRONT;\n\telse return ON_SEGMENT;\n}\n\n \nint main(){\n  map<int,string> m;\n  m[COUNTER_CLOCKWISE] = \"COUNTER_CLOCKWISE\";\n  m[CLOCKWISE] = \"CLOCKWISE\";\n  m[ONLINE_BACK] = \"ONLINE_BACK\";\n  m[ONLINE_FRONT] = \"ONLINE_FRONT\";\n  m[ON_SEGMENT] = \"ON_SEGMENT\";\n  double x1,y1,x2,y2;\n  cin>>x1>>y1>>x2>>y2;\n  Point p1=Point(x1,y1),p2=Point(x2,y2);\n  int q;cin>>q;\n  while(q--){\n    cin>>x1>>y1;\n    cout << m[ccw(p1,p2,Point(x1,y1))] << endl;\n  }\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <iostream>\n\nusing namespace std;\n\n#define EPS 1e-14\n\n#define PI 3.1415926535897932385\n\ndouble dist(int x, int y)\n{\n\treturn sqrt(x * x + y * y);\n}\n\ndouble angle(int x, int y)\n{\n\treturn atan2((double)(y), (double)(x));\n}\n\nint main()\n{\n\tint x0, y0, x1, y1, x2, y2, q;\n\n\tcin >> x0 >> y0 >> x1 >> y1 >> q;\n\n\tfor (int i = 0; i < q; i++)\n\t{\n\t\tcin >> x2 >> y2;\n\n\t\tint ax = x1 - x0;\n\t\tint ay = y1 - y0;\n\t\tint bx = x2 - x0;\n\t\tint by = y2 - y0;\n\n\t\tdouble ad = dist(ax, ay);\n\t\tdouble bd = dist(bx, by);\n\n\t\tdouble at = angle(ax, ay);\n\t\tdouble bt = angle(bx, by);\n\n\t\tdouble st = bt - at;\n\n\t\tif (st < -PI - EPS)\n\t\t{\n\t\t\tst += 2 * PI;\n\t\t}\n\n\t\tif (st > PI + EPS)\n\t\t{\n\t\t\tst -= 2 * PI;\n\t\t}\n\n\t\tif (bx == 0 && by == 0)\n\t\t{\n\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t}\n\t\telse if ((double)by / (double)bx == (double)ay / (double)ax)\n\t\t{\n\t\t\tif (ax * bx < 0 || ay * by < 0)\n\t\t\t{\n\t\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (ad < bd)\n\t\t\t\t{\n\t\t\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (st > EPS)\n\t\t{\n\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\t}\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define loop(i, s, e) for(ll i = s;i < e;i++)\n\n#include <iostream>\n#include <iomanip>\n#include <set>\n#include <vector>\n#include <queue>\n#include <stack>\n#include <utility>\n#include <algorithm>\n#include <map>\n#include <cmath>\n\nusing namespace std;\n\ntypedef long long signed ll;\n\ntemplate<typename T>\nclass Vector2D {\npublic:\n    T x;\n    T y;\n\n    Vector2D() {\n        x = y = 0;\n    }\n\n    Vector2D(T x_, T y_) {\n        x = x_;\n        y = y_;\n    }\n\n    T operator*(const Vector2D<T> *e) {\n        return this->x * e->x + this->y * e->y;\n    }\n\n    Vector2D<T> operator-(const Vector2D<T> *e) {\n        return Vector2D<T>(this->x - e->x, this->y - e->y);\n    }\n\n    Vector2D<T> operator+(const Vector2D<T> *e) {\n        return Vector2D<T>(this->x + e->x, this->y + e->y);\n    }\n\n    T operator*(const Vector2D<T> e) {\n        return this->x * e.x + this->y * e.y;\n    }\n\n    Vector2D<T> operator-(const Vector2D<T> e) {\n        return Vector2D<T>(this->x - e.x, this->y - e.y);\n    }\n\n    Vector2D<T> operator+(const Vector2D<T> e) {\n        return Vector2D<T>(this->x + e.x, this->y + e.y);\n    }\n\n    Vector2D<T> operator*(const T r) {\n        return Vector2D<T>(this->x * r, this->y * r);\n    }\n\n    Vector2D<T> operator/(const T r) {\n        return Vector2D<T>(this->x / r, this->y / r);\n    }\n\n    double abs() {\n        return sqrt(x * x + y * y);\n    }\n\n    T abs2() {\n        return x * x + y * y;\n    }\n\n    T cross(Vector2D<T> e) {\n        if(x * e.y >= y * e.x) return (x * e.y) - (y * e.x);\n        else return (y * e.x) - (x * e.y);\n    }\n\n    double cos(Vector2D<T> e) {\n        return (e * (*this)) / (e.abs() * abs());\n    }\n\n    double sin(Vector2D<T> e) {\n        return ((x * e.y) - (y * e.x)) / (e.abs() * abs());\n    }\n};\n\ntypedef Vector2D<double> vdd;\n\ndouble dist__(double x0, double y0, double x1, double y1, double xx, double yy) {\n    int b = 0;\n    vdd p[3] = {vdd(x0, y0), vdd(x1, y1), vdd(xx, yy)};\n    if (((p[0] - p[1]) * (p[2] - p[1])) < 0) b = -1;\n    if (((p[1] - p[0]) * (p[2] - p[0])) < 0) b = 1;\n    if (b == 1) return (p[2] - p[0]).abs();\n    if (b == -1) return (p[2] - p[1]).abs();\n    return (p[1] - p[0]).cross(p[2] - p[0]) / (p[1] - p[0]).abs();\n}\n\ndouble dist(double x0, double y0, double x1, double y1, double xx, double yy){\n    double res = dist__(x0,y0,x1,y1,xx,yy);\n//    cout << res << endl;\n    return res;\n}\nint main() {\n    int q;\n    vdd base,p;\n    cin >> base.x >> base.y >> p.x >> p.y;\n    cin >> q;\n    loop(i, 0, q) {\n        vdd z;\n        cin >> z.x >> z.y;\n        double cos = (p-base).cos(z-base);\n        double sin = (p-base).sin(z-base);\n        double cosr = (base-p).cos(z-p);\n        if(abs(cos - 1) < 0.000001) cout << \"ONLINE_FRONT\" << endl;\n        else if(abs(cos + 1) < 0.000001) cout << \"ONLINE_BACK\" << endl;\n        else if(sin < 0) cout << \"CLOCKWISE\" << endl;\n        else if(sin > 0) cout << \"COUNTER_CLOCKWISE\" << endl;\n        else cout << \"ON_SEGMENT\" << endl;\n    }\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <algorithm>\n#include <iostream>\n#include <cstring>\n#include <string>\n#include <sstream>\n#include <queue>\n#include <vector>\n#include <set>\n#include <map>\n#include <functional>\n#include <bitset>\n#include <deque>\n#include <cmath>\n \nusing namespace std;\n \ntypedef long long LL;\ntypedef unsigned long long ULL;\ntypedef long double LD;\n \n#define rep(i, a, b) for(int i = a; i <= b; ++i)\n#define dow(i, a, b) for(int i = a; i >= b; --i)\n#define mem(a) memset(a, 0, sizeof(a))\n#define mst(a, b) memset(a, b, sizeof(a))\n#define sfi(a) scanf(\"%d\", &a)\n#define sfl(a) scanf(\"%lld\", &a)\n#define sfd(a) scanf(\"%lf\", &a)\n#define sfs(a) scanf(\"%s\", a)\n#define pb(a) push_back(a)\n#define sync ios::sync_with_stdio(0); cin.tie(0);\n \nconst int MAXN = 1000 + 5;\nconst double EPS = 1e-6;\nconst double PI = acos(-1.0);\n\nconst int L = 2;\nconst LL MOD = 100000 + 50;\nconst int MAX = 100000 + 50;\n\ntypedef struct Point Point;\ntypedef struct Line Line;\ntypedef struct Polygon Polygon;\ntypedef struct Polygon_convex Polygon_convex;\n \nint cmp(double x);\ndouble sqr(double x);\ndouble det(Point a, Point b);\ndouble dot(Point a, Point b);\ndouble dist(Point a, Point b);\nPoint rotate_point(Point p, double A);\nbool parallel(Line a, Line b);\nbool orthogonal(Line a, Line b);\nPoint PointProjLine(Point p, Line l, Point &ans);\nPoint reflect(Line l, Point p);\ndouble dis_point_segment(Point p, Line l);\ndouble dis_segment_segment(Line a, Line b);\nLine point_make_line(Point a, Point b);\nbool in_segment(Line l, Point p);\nint dcmp(double k);\ndouble mysqrt(double n);\nPoint rotate(Point p, double cost, double sint);\npair<Point, Point> crosspoint(Point ap, double ar, Point bp, double br);\nbool PointOnSegment(Point p, Point s, Point t);\nbool comp_less(Point a, Point b);\nPolygon_convex convex_hull(vector<Point> a);\ndouble convex_diameter(Polygon_convex a, int &First, int &Second);\ndouble min_dist(Point a[], int s[], int l, int r);\ndouble Min_Dist(Point a[], int s[], int n);\nnstruct Point\n{\n    double x, y;\n    Point() {}\n    Point(double a, double b): x(a), y(b) {}\n \n    friend Point operator -(Point a, Point b)\n    {\n        return Point(a.x-b.x,a.y-b.y);\n    }\n    friend Point operator +(Point a, Point b)\n    {\n        return Point(a.x+b.x,a.y+b.y);\n    }\n    friend bool operator ==(Point a, Point b)\n    {\n        return cmp(a.x-b.x)==0 && cmp(a.y-b.y)==0;\n    }\n    friend Point operator *(Point a, double b)\n    {\n        return Point(a.x*b,a.y*b);\n    }\n    friend Point operator *(double a, Point b)\n    {\n        return Point(a*b.x,a*b.y);\n    }\n    friend Point operator /(Point a, double b)\n    {\n        return Point(a.x/b,a.y/b);\n    }\n    double norm()\n    {\n        return sqrt(sqr(x)+sqr(y));\n    }\n};\n \nstruct Line\n{\n    Point a, b;\n    Line() {}\n    Line(Point x, Point y): a(x), b(y) {}\n};\n \nstruct Polygon\n{\n    int n;\n    Point a[80050];\n    Polygon() {}\n    double perimeter()\n    {\n\t\tdouble sum = 0;\n\t\ta[n] = a[0];\n\t\trep(i, 0, n - 1)\n\t\t\tsum += (a[i+1]-a[i]).norm();\n\t\treturn sum;\n\t}\n    int Point_In(Point t)\n    {\n        int num = 0;\n        a[n] = a[0];\n        rep(i, 0, n - 1)\n        {\n            if(PointOnSegment(t, a[i], a[i + 1]))\n                return 2;\n            int k = cmp(det(a[i + 1] - a[i], t - a[i]));\n            int d1 = cmp(a[i].y - t.y);\n            int d2 = cmp(a[i + 1].y - t.y);\n            if(k > 0 && d1 <= 0 && d2 > 0)\n                num++;\n            if(k < 0 && d2 <= 0 && d1 > 0)\n                num--;\n        }\n        return num != 0;\n    }\n};\n \nstruct Polygon_convex\n{\n    vector<Point> P;\n    Polygon_convex(int Size = 0)\n    {\n        P.resize(Size);\n    }\n};\n\nbool comp_less(Point a, Point b)\n{\n    return cmp(a.x-b.x)<0 || cmp(a.x-b.x)==0 && cmp(a.y-b.y)<0;\n}\n\nPolygon_convex convex_hull(vector<Point> a)\n{\n\tPolygon_convex res(2*a.size()+5);\n    sort(a.begin(), a.end(), comp_less);\n    a.erase(unique(a.begin(), a.end()), a.end());\n    int m = 0;\n    int len = a.size();\n    rep(i, 0, len - 1)\n    {\n        while(m>1&&cmp(det(res.P[m-1]-res.P[m-2],a[i]-res.P[m-2]))<=0)\n            --m;\n        res.P[m++] = a[i];\n    }\n    int k = m;\n    len = a.size();\n    dow(i, len - 2, 0)\n    {\n        while(m>k && cmp(det(res.P[m-1]-res.P[m-2],a[i]-res.P[m-2]))<=0)\n            --m;\n        res.P[m++] = a[i];\n    }\n    res.P.resize(m);\n    if(a.size()>1)\n        res.P.resize(m-1);\n       return res;\n}\n\nbool PointOnSegment(Point p, Point s, Point t)\n{\n    return cmp(det(p-s,t-s)) == 0 && cmp(dot(p-s,p-t))<=0;\n}\nbool parallel(Line a, Line b)\n{\n    return !cmp(det(a.a-a.b,b.a-b.b));\n}  \n \nbool orthogonal(Line a, Line b)\n{\n    return !cmp(dot(a.a - a.b, b.a - b.b));\n}\n\nPoint PointProjLine(Point p, Line l)\n{\n    Point ans;\n    double r = dot((l.b-l.a),(p-l.a))/dot(l.b-l.a,l.b-l.a);\n    ans = l.a + r*(l.b-l.a);\n    return ans;\n}\n\nint cmp(double x)\n{\n    if(abs(x) < EPS)\n        return 0;\n    if(x > 0)\n        return 1;\n    return -1;\n}\n\ndouble dis_point_segment(Point p, Line l)\n{\n    if(cmp(dot(p-l.a,l.b-l.a))<0)\n        return (p-l.a).norm();\n    if(cmp(dot(p-l.b,l.a-l.b))<0)\n        return (p-l.b).norm();\n    return abs(det(l.a-p,l.b-p))/dist(l.a,l.b);\n}\n\nbool line_make_point(Line a, Line b, Point &res)\n{\n    if(parallel(a,b))\n        return false;\n    double s1 = det(a.a-b.a,b.b-b.a);\n    double s2 = det(a.b-b.a,b.b-b.a);\n    res = (s1*a.b-s2*a.a)/(s1-s2);\n    return true;\n}\n\ndouble dis_segment_segment(Line a, Line b)\n{\n    Point res;\n    if(line_make_point(a, b, res) && in_segment(a, res) && in_segment(b, res))\n        return 0.;\n    return min(min(dis_point_segment(b.a, a), dis_point_segment(b.b, a)), min(dis_point_segment(a.a, b), dis_point_segment(a.b, b)));\n}\n\ndouble sqr(double x)\n{\n    return x * x;\n}\n\ndouble det(Point a, Point b)\n{\n    return a.x*b.y-a.y*b.x;\n}\n\ndouble dot(Point a, Point b)\n{\n    return a.x*b.x+a.y*b.y;\n}\n\ndouble dist(Point a, Point b)\n{\n    return (a-b).norm();\n}\n\nPoint rotate_point(Point p, double A)\n{\n    double tx = p.x, ty = p.y;\n    return Point(tx*cos(A)-ty*sin(A),tx*sin(A)+ty*cos(A));\n}\n\nPoint reflect(Line l, Point p)\n{\n    return p + ((PointProjLine(p, l) - p) * 2.0);\n}\n\nbool in_segment(Line l, Point p)\n{\n    bool fa = false, fb = false;\n    if((cmp(p.x-l.a.x) != -1 && cmp(p.x-l.b.x) != 1) || (cmp(p.x-l.a.x) != 1 && cmp(p.x-l.b.x) != -1))\n        fa = true;\n    if((cmp(p.y-l.a.y) != -1 && cmp(p.y-l.b.y) != 1) || (cmp(p.y-l.a.y) != 1 && cmp(p.y-l.b.y) != -1))\n        fb = true;\n    return fa && fb;\n}\nint dcmp(double k)\n{\n    return k < -EPS ? -1 : k > EPS ? 1 : 0;\n}\n\ndouble mysqrt(double n)\n{\n    return sqrt(max(0.0, n));\n}\n\nvoid circle_cross_line(Point a, Point b, Point o, double r, Point ret[], int &num)\n{\n    double x0 = o.x, y0 = o.y;\n    double x1 = a.x, y1 = a.y;\n    double x2 = b.x, y2 = b.y;\n    double dx = x2 - x1, dy = y2 - y1;\n    double A = dx*dx+dy*dy;\n    double B = 2*dx*(x1-x0)+2*dy*(y1-y0);\n    double C = sqr(x1-x0)+sqr(y1-y0)-sqr(r);\n    double delta = B*B-4*A*C;\n    num = 0;\n    if(dcmp(delta) >= 0)\n    {\n        double t1 = (-B - mysqrt(delta)) / (2*A);\n        double t2 = (-B + mysqrt(delta)) / (2*A);\n        ret[num++] = Point(x1 + t1*dx, y1 + t1*dy);\n        ret[num++] = Point(x1 + t2*dx, y1 + t2*dy);\n    }\n     \n}\n\nPoint rotate(Point p, double cost, double sint)\n{\n    double x = p.x, y = p.y;\n    return Point(x*cost - y*sint, x*sint + y*cost);\n}\n\npair<Point, Point> crosspoint(Point ap, double ar, Point bp, double br)\n{\n    double d = (ap - bp).norm();\n    double cost = (ar*ar + d*d - br*br) / (2*ar*d);\n    double sint = sqrt(1. - cost*cost);\n    Point v = (bp - ap) / (bp - ap).norm() * ar;\n    return make_pair(ap+rotate(v,cost,-sint),ap+rotate(v,cost,sint));\n}\n\ndouble convex_diameter(Polygon_convex a, int &First, int &Second)\n{\n\tvector<Point> &p = a.P;\n\tint n = p.size();\n\tdouble maxd = 0.0;\n\tif(n == 1)\n\t{\n\t\tFirst = Second = 0;\n\t\treturn maxd;\n\t}\n\t#define next(i) ((i+1)%n)\n\tfor(int i = 0, j = 1; i < n; ++i)\n\t{\n\t\twhile(cmp(det(p[next(i)]-p[i],p[j]-p[i])-det(p[next(i)]-p[i],p[next(j)]-p[i]))<0)\n\t\t\tj = next(j);\n\t\tdouble d = dist(p[i], p[j]);\n\t\tif(d > maxd)\n\t\t{\n\t\t\tmaxd = d;\n\t\t\tFirst = i, Second = j;\n\t\t}\n\t\td = dist(p[next(i)],p[next(j)]);\n\t\tif(d > maxd)\n\t\t{\n\t\t\tmaxd = d;\n\t\t\tFirst = i, Second = j;\n\t\t}\n\t}\n\treturn maxd;\n}\n\n\nvoid ccw(Point p0, Point p1, Point p2)\n{\n\tPoint a = p1 - p0;\n\tPoint b = p2 - p0;\n\tif(det(a, b) > EPS)\n\t\tputs(\"COUNTER_CLOCKWISE\");\n\telse if(det(a, b) < -EPS)\n\t\tputs(\"CLOCKWISE\");\n\telse if(dot(a, b) < -EPS)\n\t\tputs(\"ONLINE_BACK\");\n\telse if(a.norm() < b.norm())\n\t\tputs(\"ONLINE_FRONT\");\n\telse\n\t\tputs(\"ON_SEGMENT\");\n}\n\nint main()\n{   \n#ifdef LOCAL\n    //~ freopen(\"in.txt\", \"r\", stdin);\n#endif\n \n\tPoint a, b, c;\n\tscanf(\"%lf%lf%lf%lf\", &a.x, &a.y, &b.x, &b.y);\n\tint n;\n\tsfi(n);\n\twhile(n--)\n\t{\n\t\tscanf(\"%lf%lf\", &c.x, &c.y);\n\t\tccw(a, b, c);\n\t}\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "\n#include <cmath>\n#include <string>\n#include <iostream>\n#include <algorithm>\n#include<vector>\n#include<cstring>\n#include<set>\n#include <cstdio>\n#include<queue>\n#include<map>\n#define WHITE 0\n#define GRAY  1\n#define BLACK 2\n#define endl '\\n'\n#define forup(i,a,n) for( int i =a; i < n; i++)\n#define llforup(i,a,n) for( ll i =a; i < n; i++)\n#define fordown(i,a,n) for( int i =a; i >= n; i--)\n#define fornot(i,a,n) for( int i=a;!n;i++)\n#define mod  (ll)(1e9+7)\n#define putnum(a) printf(\"%d\\n\",a)\nusing namespace std;\ntypedef long long ll;\ninline int readnum()\n{\n\tint p, data = 0; char ch = 0;\n\twhile ((ch != '-') &&( ch < '0' || ch>'9') )//注意运算优先级，逻辑与大于逻辑非\n\t\tch = getchar();//相当于正则表达式的搜索，跳过不需要的字符\n\tif (ch == '-')\n\t\tp = -1, ch = getchar();//不能与if平行放置，不懂为什么，可能是bug\n\telse p = 1;\n\twhile (ch >= '0' && ch <= '9') data = data * 10 + ch - '0', ch = getchar();//搜索需要的字符\n\treturn data * p;\n}\ninline int ReadPossitive()\n{\n\tchar ch; int data = 0;\n\tch = getchar();\n\twhile (ch == ' ' || ch == '\\n')ch = getchar();\n\twhile (ch != ' ' && ch != '\\n' && ch != EOF)\n\t{\n\t\tdata = data * 10 + ch - '0';\n\t\tch = getchar();\n\t}\n\treturn data;\n}\n//并查集模板\nclass DisjointSet {\nprivate:\n\tvector<int>rank, parent;\npublic:\n\tDisjointSet(){}\n\tDisjointSet(int size)\n\t{\n\t\trank.resize(size, 0);//默认初始化为0，养成习惯写完整\n\t\tparent.resize(size, 0);\n\t\tforup(i, 0, size)MakeSet(i);\n\t}\n\tvoid MakeSet(int x)\n\t{\n\t\tparent[x] = x;\n\t\trank[x] = 0;\n\t}\n\tbool same(int x, int y)\n\t{\n\t\treturn Findroot(x) == Findroot(y);\n\t}\n\tvoid unite(int x, int y)\n\t{\n\t\tlink(Findroot(x), Findroot(y));\n\t}\n\tinline int Findroot(int x)\n\t{\n\t\twhile (x != parent[x])\n\t\t{\n\t\t\tx = parent[x];\n\t\t}\n\t\treturn x;\n\t}\n\tvoid link(int rootx, int rooty)\n\t{\n\t\tif (rank[rootx] < rank[rooty])parent[rootx] = parent[rooty];\n\t\telse\n\t\t{\n\t\t\tparent[rooty] = parent[rootx];\n\t\t\tif (rank[rootx] == rank[rooty])\n\t\t\t\trank[rootx]++;\n\t\t}\n\t}\n};\n\n//计算几何模板\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)//保留整数0\nclass Point {\npublic:\n\tdouble x, y;\npublic:\n\tPoint() {};\n\tPoint(double x,double y):x(x),y(y){}\n\tPoint operator +(Point p) { return Point(x + p.x, y + p.y);}//p不能为引用的问题怎么解决？\n\tPoint operator -(Point p) { return Point(x - p.x, y - p.y);}\n\tPoint operator *(double a) { return Point(a * x, a * y); }\n\tPoint operator /(double a) { return Point(x / a, y / a); }\n\tinline double abs() { return sqrt(norm()); }\n\tinline double norm() { return x * x + y * y; }\n\tbool operator <(const Point& p)const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\tbool operator ==(const Point& p)const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\ntypedef Point Vector;\nclass Line {\npublic:\n\tPoint p1, p2;\npublic:\n\tLine() {};\n\tLine(int p1x, int p1y, int p2x, int p2y)\n\t{\n\t\tp1.x = p1x; p1.y = p1y;\n\t\tp2.x = p2x; p2.y = p2y;\n\t}\n};\nclass VectorOperation {//操作符不必继承\npublic:\n\tdouble dot(Point a, Point b)//点乘\n\t{\n\t\treturn a.x * b.x + a.y * b.y;\n\t}\n\tdouble cross(Point a, Point b)//叉乘\n\t{\n\t\treturn a.x * b.y - a.y * b.x;\n\t}\n\tdouble abs(Point s)\n\t{\n\t\treturn sqrt(s.norm());\n\t}\n\tdouble getDistance(Point a, Point b)\n\t{\n\t\treturn abs(a - b);\n\t}\n\tint rotation(Point p0, Point p1, Point p2)\n\t{\n#define COUNTER_CLOCKWISE -1\n#define CLOCKWISE 1\n#define ONLINE_BACK -2\n#define ONLINE_FRONT 2\n#define ON_SEGMENT 0\n\t\tVector a = p1 - p0;Vector b = p2 - p0;\n\t\tdouble Cross = cross(a, b);\n\t\tif (Cross > 0.0)return COUNTER_CLOCKWISE;\n\t\tif (Cross < 0.0)return CLOCKWISE;\n\t\tif (dot(a, b) < 0.0)return ONLINE_BACK;\n\t\tif (a.norm() < b.norm())return ONLINE_FRONT;\n\n\t\treturn ON_SEGMENT;\n#undef COUNTER_CLOCKWISE -1\n#undef CLOCKWISE 1\n#undef ONLINE_BACK -2\n#undef ONLINE_FRONT 2\n#undef ON_SEGMENT 0\n\t}\n};\n\nclass LineOperation :public VectorOperation{\npublic:\t\n\tLineOperation() {};\n\tbool isOrthogonal(Line s1, Line s2)\n\t{\n\t\treturn equals(dot(s1.p2-s1.p1, s2.p2 - s2.p1), 0.0);//操作符重载的返回值的内存分配机制尚不可知，似乎返回值没有分配内存，dot的参数不能用引用，否则报错。\n\t}\n\tbool isParallel(Line s1, Line s2)\n\t{\n\t\treturn equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);//外积判断平行，内积判断垂直。\n\t}\n\tPoint projection(Line s, Point p)\n\t{\n\t\tVector base = s.p1 - s.p2;\n\t\tdouble r = dot(p - s.p1, base) /base.norm();\n\t\treturn s.p1 + base * r;\n\t}\n\tPoint reflection(Line s, Point p)\n\t{\n\t\treturn p + (projection(s, p)-p) * 2.0;\n\t}\n\tdouble getDistanceLP(Line s, Point p)//点与直线\n\t{\n\t\treturn fabs(cross(s.p2 - s.p1, p - s.p1)) / abs(s.p2 - s.p1);\n\t}\n\tdouble getDistanceSP(Line s, Point p)//点与线段\n\t{\n\t\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0)return abs(p - s.p1);//与点p1成钝角\n\t\telse if (dot(s.p2 - s.p1, p - s.p2) > 0.0)return abs(p - s.p2);\n\t\telse return getDistanceLP(s, p);\n\t}\n\tdouble getDistanceSS(Line s1, Line s2)//线段与线段\n\t{\n\n\t}\n};\n//E-mail 374656045@qq.com\n\nclass solve {\nprivate:\n\tint n;\npublic://采用邻接表建图,带权无向图\n\tsolve()\n\t{\n\t\tint x1, y1, x2, y2;\n\t\tx1 = readnum(); y1 = readnum();\n\t\tx2 = readnum(); y2 = readnum();\n\t\tn = readnum();\n\t\tLine s(x1, y1, x2, y2);\n\t\tLineOperation op;\n\t\tint x, y;\n\t\tforup(i, 0, n)\n\t\t{\n\t\t\tx = readnum(); y = readnum();\n\t\t\tPoint p(x,y);\n\t\t\tswitch (op.rotation(s.p1, s.p2, p))\n\t\t\t{\n\t\t\tcase 0:printf(\"ON_SEGMENT\\n\");break;\n\t\t\tcase 1:printf(\"CLOCKWISE\\n\"); break;\n\t\t\tcase -1:printf(\"COUNTER_CLOCKWISE\\n\"); break;\n\t\t\tcase 2:printf(\"ONLINE_FRONT\\n\"); break;\n\t\t\tcase -2:printf(\"ONLINE_BACK\\n\"); break;\n\t\t\t}\n\t\t}\n\t}\n\t\n};\nint main(void)\n{\n\tios_base::sync_with_stdio(0); cin.tie(0);//慎用，cin和scanf混用会导致非MSC++WA\n#ifdef DEBUG\n\tfreopen(\"input.txt\", \"r\", stdin);\n\tfreopen(\"output.txt\", \"w\", stdout);\n#endif\n\tsolve solution;\n#ifdef DEBUG\n\tfclose(stdin);//关闭文件 \n\tfclose(stdout);//关闭文件 \n#endif\n\treturn 0;\n\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\nusing namespace std;\n#include<cstdio>\n#include<complex>\n\ntypedef double type_n;\ntypedef complex<type_n> point;\n\nint ccw(const point &a, const point &c, const point &z)\n{\n    point w;\n    w = conj(c) * (z - a);\n    if(w.imag() > 0){ return 1; }\n    if(w.imag() < 0){ return -1; }\n    if(w.real() < 0){ return 2; }\n    if(w.real() > norm(c)){ return -2; }\n    return 0;\n}\n\nint main()\n{\n    point a, b, c, z;\n    int i, q, crit;\n    type_n a1, a2, b1, b2, z1, z2;\n    scanf(\"%lf %lf %lf %lf\", &a1, &a2, &b1, &b2);\n    a.real(a1), a.imag(a2), b.real(b1), b.imag(b2);\n    c = b - a;\n\n    scanf(\"%d\", &q);\n    for(i = 0; i < q; i++){\n        scanf(\"%lf %lf\", &z1, &z2);\n        z.real(z1), z.imag(z2);\n        crit = ccw(a, c, z);\n        switch(crit){\n            case 1:\n                printf(\"COUNTER_CLOCKWISE\\n\");\n                break;\n            case -1:\n                printf(\"CLOCKWISE\\n\");\n                break;\n            case 2:\n                printf(\"ONLINE_BACK\\n\");\n                break;\n            case -2:\n                printf(\"ONLINE_FRONT\\n\");\n                break;\n            default:\n                printf(\"ON_SEGMENT\\n\");\n                break;\n        }\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <algorithm>\n#include <cstdio>\n#include <vector>\n#include <queue>\n#include <set>\n#include <map>\n#include <numeric>\n#include <cmath>\n \nusing namespace std;\n \ntypedef long long int ll;\ntypedef pair<int,int> Pint;\ntypedef pair<double,double> Pdouble;\n \n#define all(x) x.begin(),x.end()\n \nconst ll mod = 1e9+7;\nconst ll INF = 1e9;\nconst ll MAXN = 1e9;\n \ndouble dot(Pint p1,Pint p2){\n    return p1.first*p2.first + p1.second*p2.second;\n}\n\ndouble closs(Pint p1,Pint p2){\n    return p1.first*p2.second - p1.second*p2.first;\n}\ndouble vector_length(Pint p){\n    return pow(p.first*p.first+p.second*p.second,0.5);\n}\n \ndouble cos_(Pint p1,Pint p2){\n    return dot(p1,p2)/(vector_length(p1)*vector_length(p2));\n}\n\ndouble sin_(Pint p1,Pint p2){\n    return closs(p1,p2)/(vector_length(p1)*vector_length(p2));\n}\n \nPdouble proj(Pint p1,Pint p2,Pint a,Pint b){\n    Pint pp = Pint(p2.first-p1.first,p2.second-p1.second);\n    double ans_x = (double)p1.first + vector_length(a)*cos_(a,b)*pp.first/vector_length(pp);\n    double ans_y = (double)p1.second + vector_length(a)*cos_(a,b)*pp.second/vector_length(pp);\n\n    return Pdouble(ans_x,ans_y);\n}\n \nbool vector_equal(Pint p,Pint q){\n    return (p.first == q.first) && (p.second == q.second);\n}\n\nvoid clock_wise(Pint q0,Pint q1,Pint q2){\n    Pint q0q1 = Pint(q1.first-q0.first,q1.second-q0.second);\n    Pint q0q2 = Pint(q2.first-q0.first,q2.second-q0.second);\n\n    //printf(\"%.12f\\n\", cos_(q0q1,q0q2));\n\n    if(cos_(q0q1,q0q2) == (double)-1){\n        cout << \"ONLINE_BACK\" << endl;\n    }else if(cos_(q0q1,q0q2) == (double)1){\n        //cout << \"alkhfl\" << endl;\n        if(vector_length(q0q1)<vector_length(q0q2)) cout << \"ONLINE_FRONT\" << endl;\n        else cout << \"ON_SEGMENT\" << endl;\n    }else{\n        if(sin_(q0q1,q0q2)>0) cout << \"COUNTER_CLOCKWISE\" << endl;\n        else if(sin_(q0q1,q0q2)<0) cout << \"CLOCKWISE\" << endl;\n        else{\n            if(cos_(q0q1,q0q2)<0) cout << \"ONLINE_BACK\" << endl;\n            else if(vector_length(q0q1)<vector_length(q0q2)) cout << \"ONLINE_FRONT\" << endl;\n            else cout << \"ON_SEGMENT\" << endl;\n        }\n    }\n}\n \nint main()\n{\n    Pint p0,p1;\n    cin >> p0.first >> p0.second >> p1.first >> p1.second;\n    int q;\n    cin >> q;\n    for(int i = 0; i < q; i++){\n        Pint p2;\n        cin >> p2.first >> p2.second;\n \n        if(vector_equal(p2,p1)||vector_equal(p2,p0)){\n            cout << \"ON_SEGMENT\" << endl;\n            continue;\n        }\n \n        clock_wise(p0,p1,p2);\n    }\n \n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<cstdlib>\n#include<cmath>\n#include<algorithm>\n\n\nusing namespace std;\n\nint main()\n{\n\tdouble p1x, p1y, p2x, p2y, p0x, p0y;\n\tint q;\n\n\tscanf(\"%lf %lf %lf %lf\", &p0x, &p0y, &p1x, &p1y);\n\n\tpair<double, double> v01 = { p1x - p0x, p1y - p0y };\n\n\n\tscanf(\"%d\", &q);\n\n\tfor (int i = 0; i < q; i++)\n\t{\n\t\tscanf(\"%lf %lf\", &p2x, &p2y);\n\n\t\tif ((p2x == p0x && p2y == p0y) || (p2x == p1x && p2y == p0y)){\n\t\t\tprintf(\"ONLINE_SEGMENT\\n\");\n\n\t\t\tcontinue;\n\t\t}\n\n\t\tpair<double, double> v02 = { p2x - p0x, p2y - p0x };\n\n\t\tif (v01.first*v02.second == v01.second*v01.first)\n\t\t{\n\t\t\tif (v01.first*v02.first < 0)\n\t\t\t{\n\t\t\t\tprintf(\"ONLINE_BACK\\n\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tabs(v01.first) < abs(v02.first) ? printf(\"ONLINE_FRONT\\n\") : printf(\"ONLINE_SEGMENT\\n\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\n\t\tdouble y01 = (v01.second / v01.first)*(p2x - p0x) + p0y;\n\t\ty01 < p2y ? printf(\"COUNTER_CLOCKWISE\\n\") : printf(\"CLOCKWISE\\n\");\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include<vector>\n#include<algorithm>\n#include<string>\n#include<map>\n#include<set>\n#include<stack>\n#include<queue>\n#include<math.h>\nusing namespace std;\ntypedef long long ll;\n#define int long long\ntypedef vector<int> VI;\ntypedef pair<int, int> pii;\ntypedef vector<pii> VP;\ntypedef vector<string> VS;\ntypedef priority_queue<int> PQ;\ntemplate<class T>bool chmax(T &a, const T &b) { if (a < b) { a = b; return 1; } return 0; }\ntemplate<class T>bool chmin(T &a, const T &b) { if (b < a) { a = b; return 1; } return 0; }\n#define fore(i,a) for(auto &i:a)\n#define REP(i,n) for(int i=0;i<n;i++)\n#define eREP(i,n) for(int i=0;i<=n;i++)\n#define FOR(i,a,b) for(int i=(a);i<(b);++i)\n#define eFOR(i,a,b) for(int i=(a);i<=(b);++i)\n#define SORT(c) sort((c).begin(),(c).end())\n#define rSORT(c) sort((c).rbegin(),(c).rend())\n#define LB(x,a) lower_bound((x).begin(),(x).end(),(a))\n#define UB(x,a) upper_bound((x).begin(),(x).end(),(a))\n#define INF 1000000000\n#define LLINF 9223372036854775807\n#define mod 1000000007\n#define eps 0.0000000000001\n//priority_queue<int,vector<int>, greater<int> > q2;\n\nlong double nai(int a, int b, int c, int d) {\n\treturn a * c + b * d;\n}\nint oo(int a, int b) {\n\treturn a * a + b * b;\n}\nlong double ooo(int a, int b) {\n\tdouble res = oo(a, b);\n\treturn pow(res, 0.5);\n}\nint gai(int a, int b, int c, int d) {\n\treturn a * d - b * c;\n}\nsigned main() {\n\tcin.tie(0);\n\tios::sync_with_stdio(false);\n\n\tint x0, y0, x1, y1; cin >> x0 >> y0 >> x1 >> y1;\n\tint vx = x1 - x0, vy = y1 - y0;\n\t;\n\tint Q; cin >> Q;\n\twhile (Q--) {\n\t\tint x2, y2; cin >> x2 >> y2;\n\t\tint vvx = x2 - x0, vvy = y2 - y0;\n\n\t\tif ((vx == 0 && vy == 0) || (vvx == 0 && vvy == 0)) {\n\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t\tcontinue;\n\t\t}\n\n\t\tlong double ans = nai(vx, vy, vvx, vvy);\n\t\t//cout << ans << endl;\n\t\tans /= ooo(vx, vy);\n\t\tans /= ooo(vvx, vvy);\n\t\t//cout << ans << endl;\n\t\t//printf(\"%.10lf\\n\",ans);\n\t\tif (-eps < ans  + 1.0L && ans + 1.0L < eps) {\n\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t}\n\t\telse if(-eps < ans - 1.0L && ans - 1.0L < eps){\n\t\t\t//cout << \"K\" << endl;\n\t\t\tif (oo(vvx,vvy) > oo(vx,vy)) {\n\t\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif (gai(vx, vy, vvx, vvy) > 0) {\n\t\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcout<< \"CLOCKWISE\" <<endl;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn 0;\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define REP(i,n) for (long long i=0;i<(n);i++)\n#define FOR(i,a,b) for (long long i=(a);i<(b);i++)\n#define RREP(i,n) for(long long i=n;i>=0;i--)\n#define RFOR(i,a,b) for(long long i=(a);i>(b);i--)\n#define dump1d_arr(array) REP(i,array.size()) cerr << #array << \"[\" << (i) << \"] ==> \" << (array[i]) << endl;\n#define dump2d_arr(array) REP(i,array.size()) REP(j,array[i].size()) cerr << #array << \"[\" << (i) << \"]\" << \"[\" << (j) << \"] ==> \" << (array[i][j]) << endl;\n#define dump(x)  cerr << #x << \" => \" << (x) << endl;\n#define dumpP(p) cerr << \"( \" << p.first << \" , \" << p.second << \" )\" << ends;\n#define CLR(vec) { REP(i,vec.size()) vec[i] = 0; } \n#define SORT(c) sort((c).begin(),(c).end())\n#define MIN(vec) *min_element(vec.begin(), vec.end());\n#define MAX(vec) *max_element(vec.begin(), vec.end());\n#define UNIQ(vec) vec.erase(unique(vec.begin(), vec.end()),vec.end());\n#define IN(n,m)  (!(m.find(n) == m.end()))\n#define ENUM(m) for (auto itr = m.begin(); itr != m.end(); ++itr)\n#define dump_MAP(m) for(auto itr = m.begin(); itr != m.end(); ++itr) { cerr << itr->first << \" --> \"  << itr->second << endl; }\n#define FINDL(vec,x) (lower_bound(vec.begin(),vec.end(),x) - vec.begin())\n#define FINDU(vec,x) (upper_bound(vec.begin(),vec.end(),x) - vec.begin())\n#define ROUND(N) setprecision(N)\nusing namespace std;\nconstexpr long double pi = M_PI;\nconstexpr double eps = 1e-10;\nconstexpr long mod = 1000000007;\nconstexpr short shINF = 32767;\nconstexpr long loINF = 2147483647;\nconstexpr long long llINF = 9223372036854775807;\ntypedef long long LL;\ntypedef vector<LL> VI;\ntypedef vector<VI> VVI;\ntypedef vector<string> VS;\ntypedef pair<LL,LL> pr;\ntypedef vector<pr> VP;\nstruct Order {\n  bool operator() (pr const& a,pr const& b) const {\n    return a.first > b.first || ((a.first == b.first) && (a.second > b.second));\n  }\n};\ntypedef struct _PT {\n  long double x, y;\n  _PT() {}\n  _PT(long double x,long double y) : x(x), y(y) {} \n  _PT operator + (_PT p){\n     return _PT(x + p.x, y + p.y);\n  }\n  _PT operator - (_PT p){\n     return _PT(x - p.x, y - p.y);\n  }\n  _PT operator * (long double d){\n     return _PT(d*x, d*y);\n  }\n  bool operator <(const struct _PT &e) const{\n     return x == e.x? (y < e.y) : x < e.x;\n  }\n  bool operator >(const struct _PT &e) const{\n     return x == e.x? (y > e.y) : x > e.x;\n  }\n\n  // --オプジェクトは位置ベクトル--\n\n  long double dist(_PT p){ //点pとの距離の2乗\n     return (x-p.x)*(x-p.x) + (y-p.y)*(y-p.y);\n  }\n\n  // --オブジェクトは幾何ベクトル--\n  \n  long double dot(_PT v){ //ベクトルvとの内積\n     return x * v.x + y * v.y;\n  }\n  \n  long double det(_PT v){ // ベクトルvとの外積\n     return x * v.y - v.x * y;\n  }\n\n  long double norm(void){ // ベクトルのノルム\n    return sqrt(x*x + y*y);\n  }\n\n  long double twiceNorm(void){ // ノルムの2乗\n    return x*x + y*y;\n  }\n\n  bool is_parallel(_PT v) { //ベクトルvと平行か(外積 = 0か)\n    return (abs(x * v.y - v.x * y) < eps);\n  }\n}P;\n\nint main(void) {\n  double px,py,qx,qy,rx,ry;\n  cin >> px >> py >> qx >> qy;\n  double base = atan2((qy-py),(py-px));\n  int n;\n  cin >> n;\n  REP(i,n) {\n    cin >> rx >> ry;\n    double rad = atan2((ry-py),(rx-px));\n    if (abs(rad-base) < eps) {\n      if (P (rx-px,ry-py) > P (qx-px,qy-py)) cout << \"ONLINE_FRONT\" << endl;\n      else cout << \"ON_SEGMENT\" << endl;\n    }\n    else if (abs(abs(rad - base)-pi) < eps) cout << \"ONLINE_BACK\" << endl;\n    else if ((rad > base && (rad - base) < pi) || (rad < base && (base - rad) > pi)) cout << \"COUNTER_CLOCKWISE\" << endl;\n    else cout << \"CLOCKWISE\" << endl;\n  }\n\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#pragma warning(disable : 4267) // \"int n = (unsigned)size\"\n\nusing vi = vector<int>; using vvi = vector<vi>; using vvvi = vector<vvi>;\nusing ll = long long int;\nusing vll = vector<ll>; using vvll = vector<vll>; using vvvll = vector<vvll>;\nusing vd = vector<double>; using vvd = vector<vd>; using vvvd = vector<vvd>;\nusing P = pair<int, int>;\nusing Pll = pair<ll, ll>;\nusing cdouble = complex<double>;\n\nconst double eps = 1e-9;\nconst double INFD = numeric_limits<double>::infinity();\n#define Loop(i, n) for(int i = 0; i < int(n); i++)\n#define Loopll(i, n) for(ll i = 0; i < ll(n); i++)\n#define Loop1(i, n) for(int i = 1; i <= int(n); i++)\n#define Loopll1(i, n) for(ll i = 1; i <= ll(n); i++)\n#define Loopr(i, n) for(int i = int(n) - 1; i >= 0; i--)\n#define Looprll(i, n) for(ll i = ll(n) - 1; i >= 0; i--)\n#define Loopr1(i, n) for(int i = int(n); i >= 1; i--)\n#define Looprll1(i, n) for(ll i = ll(n); i >= 1; i--)\n#define Foreach(buf, container) for(auto buf : container)\n#define Loopdiag(i, j, h, w, sum) for(int i = ((sum) >= (h) ? (h) - 1 : (sum)), j = (sum) - i; i >= 0 && j < (w); i--, j++)\n#define Loopdiagr(i, j, h, w, sum) for(int j = ((sum) >= (w) ? (w) - 1 : (sum)), i = (sum) - j; j >= 0 && i < (h); j--, i++)\n#define Loopdiagsym(i, j, h, w, gap) for (int i = ((gap) >= 0 ? (gap) : 0), j = i - (gap); i < (h) && j < (w); i++, j++)\n#define Loopdiagsymr(i, j, h, w, gap) for (int i = ((gap) > (h) - (w) - 1 ? (h) - 1 : (w) - 1 + (gap)), j = i - (gap); i >= 0 && j >= 0; i--, j--)\n#define Loopitr(itr, container) for(auto itr = container.begin(); itr != container.end(); itr++)\n#define printv(vector) Loop(ex_i, vector.size()) { cout << vector[ex_i] << \" \"; } cout << endl;\n#define printmx(matrix) Loop(ex_i, matrix.size()) { Loop(ex_j, matrix[ex_i].size()) { cout << matrix[ex_i][ex_j] << \" \"; } cout << endl; }\n#define quickio() ios::sync_with_stdio(false); cin.tie(0);\n#define bitmanip(m,val) static_cast<bitset<(int)m>>(val)\n#define Comp(type_t) bool operator<(const type_t &another) const\n#define fst first\n#define snd second\nbool nearlyeq(double x, double y) { return abs(x - y) < eps; }\nbool inrange(ll x, ll t) { return x >= 0 && x < t; }\nbool inrange(vll xs, ll t) { Foreach(x, xs) if (!(x >= 0 && x < t)) return false; return true; }\nint ceillog2(ll x) { int ret = 0;\tx--; while (x > 0) { ret++; x >>= 1; } return ret; }\nll rndf(double x) { return (ll)(x + (x >= 0 ? 0.5 : -0.5)); }\nll floorsqrt(ll x) { ll m = (ll)sqrt((double)x); return m + (m * m <= x ? 0 : -1); }\nll ceilsqrt(ll x) { ll m = (ll)sqrt((double)x); return m + (x <= m * m ? 0 : 1); }\nll rnddiv(ll a, ll b) { return (a / b + (a % b * 2 >= b ? 1 : 0)); }\nll ceildiv(ll a, ll b) { return (a / b + (a % b == 0 ? 0 : 1)); }\nll gcd(ll m, ll n) { if (n == 0) return m; else return gcd(n, m % n); }\nll lcm(ll m, ll n) { return m * n / gcd(m, n); }\n\n/*******************************************************/\n\nstruct intpt_t {\n\tll x, y;\n\tintpt_t operator+(const intpt_t &p) { return { x + p.x, y + p.y }; }\n\tintpt_t operator-(const intpt_t &p) { return { x - p.x, y - p.y }; }\n\tintpt_t operator*(const ll &c) { return { x * c, y * c }; }\n\tintpt_t operator/(const ll &c) { return { x / c, y / c }; }\n\tbool operator==(const intpt_t &p) { return x == p.x && y == p.y; }\n};\n\nstruct pt_t {\n\tdouble x, y;\n\tpt_t operator+(const pt_t &p) { return { x + p.x, y + p.y }; }\n\tpt_t operator-(const pt_t &p) { return { x - p.x, y - p.y }; }\n\tpt_t operator*(const double &c) { return { x * c, y * c }; }\n};\n\npt_t cvtpt(intpt_t p) {\n\treturn { double(p.x), double(p.y) };\n}\n\n// ax + by + c = 0\nstruct line_t {\n\tdouble a, b, c;\n};\n\npt_t cross_point(line_t l, line_t m) {\n\tpt_t ret = { INFD, INFD };\n\tdouble d = l.a * m.b - m.a * l.b;\n\tif (nearlyeq(d, 0)) return ret;\n\tdouble x = l.b * m.c - m.b * l.c;\n\tdouble y = l.a * m.c - m.a * l.c;\n\tret = { x / d, y / -d };\n\treturn ret;\n}\n\n// normal vector = (a, b), passing p\nline_t solve_line(double a, double b, pt_t p) {\n\treturn { a, b, -a * p.x - b * p.y };\n}\n\n// t should be radius\npt_t rot(pt_t p, double r) {\n\treturn {\n\t\tcos(r) * p.x - sin(r) * p.y,\n\t\tsin(r) * p.x + cos(r) * p.y\n\t};\n}\n\ndouble abs(pt_t p) {\n\treturn sqrt(p.x * p.x + p.y * p.y);\n}\n\n// angle [0, 2PI) of vector p to vector q\ndouble angle(pt_t p, pt_t q) {\n\tp = p * (1.0 / abs(p));\n\tq = q * (1.0 / abs(q));\n\tdouble r0 = acos(p.x * q.x + p.y * q.y);\n\tdouble r1 = asin(p.x * q.y - p.y * q.x);\n\tif (r1 >= 0) return r0;\n\telse return 2 * M_PI - r0;\n}\n\ndouble dist(line_t l, pt_t p) {\n\treturn abs(l.a * p.x + l.b * p.y + l.c)\n\t\t/ sqrt(l.a * l.a + l.b * l.b);\n}\n\nbool on_same_line(intpt_t p, intpt_t q) {\n\tint mask = (p.x ? 0 : 0b1000) + (p.y ? 0 : 0b100)\n\t\t+ (q.x ? 0 : 0b10) + (q.y ? 0 : 0b1);\n\tif ((mask & 0b1100) == 0b1100 || (mask & 0b0011) == 0b0011) return true;\n\tif ((mask & 0b1010) == 0b1010 || (mask & 0b0101) == 0b0101) return true;\n\tif (mask == 0b0000) {\n\t\tp = p / gcd(p.x, p.y);\n\t\tq = q / gcd(q.x, q.y);\n\t\tif (p.x < 0) p = p * -1;\n\t\tif (q.x < 0) q = q * -1;\n\t\tif (p == q) return true;\n\t\telse return false;\n\t}\n\telse return false;\n}\n\nint main() {\n\tintpt_t p0, p1;\n\tcin >> p0.x >> p0.y >> p1.x >> p1.y;\n\tint q; cin >> q;\n\tcout << setprecision(20);\n\tLoop(i, q) {\n\t\tintpt_t p2;\n\t\tcin >> p2.x >> p2.y;\n\t\tintpt_t ip = p1 - p0;\n\t\tintpt_t iq = p2 - p0;\n\t\tpt_t p = cvtpt(ip);\n\t\tpt_t q = cvtpt(iq);\n\t\tbool judge;\n\t\tif (on_same_line(ip, iq)) judge = true;\n\t\telse judge = false;\n\t\tdouble r = angle(p, q);\n\t\tif (judge) {\n\t\t\tif (M_PI * 0.5 < r && r < M_PI * 1.5) {\n\t\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (abs(q) > abs(p)) {\n\t\t\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif (r < M_PI) {\n\t\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\t\t}\n\t\t}\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <algorithm>\n#include <iomanip>\n#define ESP \nusing namespace std;\n\ntypedef struct Point {\n\tdouble x; \n\tdouble y;\n\n\tPoint() { }\n\n\tPoint(double x, double y) :x(x), y(y) { }\n\n\tPoint operator+(Point& p) {\n\t\treturn Point(x + p.x, y + p.y);\n\t}\n\n\tPoint operator-(Point& p) {\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n};\n\ntypedef Point Vector;\n\n struct Line {\n\tPoint p1, p2;\n\tLine() {}\n\tLine(const Point& a,const Point& b) : p1(a),p2(b) { }\n};\n\n typedef Line Segment;\n\ndouble abs(Point p1, Point p2) {\n\tdouble norm = (p1.x - p2.x)*(p1.x - p2.x) + (p1.y - p2.y)*(p1.y - p2.y);\n\treturn sqrt(norm);\n}\n\ndouble product(Point p1, Point p2) {\n\treturn p1.x*p2.x + p1.y + p2.y;\n}\n\ndouble cross(Point p1, Point p2) {\n\treturn p1.x*p2.y - p1.y*p2.x;\n}\n\nint ccw(Point p0, Point p1, Point p2) {\n\tVector v0 = p2 - p0;\n\tVector v1 = p1 - p0;\n\tif (cross(v0, v1) > 0.0) return 1;   //p0,p1,p2??????????¨???????\n\tif (cross(v0, v1) < 0.0) return -1;   //p0,p1,p2???????¨???????\n\tif (product(v0, v1) < 0.0) return 2;  //p2,p0,p1????????§????????´??????\n\tif (abs(p0, p1) < abs(p0, p2)) return -2;  //p0,p1,p2????????§????????´??????\n\treturn 0;   //p2?????????(p0,p1)???\n}\n\nbool intersect(Point p0, Point p1, Point p2, Point p3) {\n\treturn (ccw(p0, p1, p2)*ccw(p0, p1, p3) <= 0&&ccw(p2,p3,p0)*ccw(p2,p3,p1)<=0);\n\t//?????????????????????????????¶\n}\n\nbool intersect(Segment s1, Segment s2) {\n\treturn intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\ndouble DistanceLP(Line l, Point p) {\n\treturn abs(cross(l.p2 - l.p1, p - l.p1)/abs(l.p1,l.p2));\n}\n\ndouble DistanceSP(Segment s, Point p) {\n\tif (product(s.p2 - s.p1, p - s.p1) < 0.0) return abs(p, s.p1);\n\tif (product(s.p1 - s.p2, p - s.p2) < 0.0) return abs(p, s.p2);\n\treturn DistanceLP(s, p);\n}\n\ndouble DistanceSS(Segment s1, Segment s2) {\n\tif (intersect(s1, s2)) return 0.0;\n\treturn min(min(DistanceSP(s1, s2.p1), DistanceSP(s1,s2.p2)), min(DistanceSP(s2, s1.p1), DistanceSP(s2, s1.p2)));\n}\n\nint main() {\n\tPoint p0, p1,p2;\n\tcin >> p0.x; cin >> p0.y;\n\tcin >> p1.x; cin >> p1.y;\n\tint q; \n\tcin >> q;\n\tfor (int i = 0;i < q;i++) {\n\t\tcin >> p2.x; cin >> p2.y;\n\t\tint c = ccw(p0, p1, p2);\n\t\tif (c == -1) cout << \"COUNTER_CLOCKWISE\" << endl;\n\t\tif (c == 1) cout << \"CLOCKWISE\" << endl;\n\t\tif (c == 2) cout << \"ONLINE_BACK\" << endl;\n\t\tif (c == -2) cout << \"ONLINE_FRONT\" << endl;\n\t\tif (c == 0) cout << \"ON_SEGMENT\" << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#include <algorithm>\n#include <bitset>\n#include <cassert>\n#include <cctype>\n#include <clocale>\n#include <cmath>\n#include <cstdlib>\n#include <ctime>\n#include <deque>\n#include <fstream>\n#include <functional>\n#include <iomanip>\n#include <iostream>\n#include <iterator>\n#include <list>\n#include <map>\n#include <queue>\n#include <set>\n#include <sstream>\n#include <stack>\n#include <string>\n#include <tuple>\n#include <unordered_map>\n#include <unordered_set>\n#include <utility>\n#include <vector>\n\nusing namespace std;\n\n#define IOS ios::sync_with_stdio(false); cin.tie(0);\n#define FOR(i, s, n) for(int i = (s), i##_len=(n); i < i##_len; ++i)\n#define FORS(i, s, n) for(int i = (s), i##_len=(n); i <= i##_len; ++i)\n#define VFOR(i, s, n) for(int i = (s); i < (n); ++i)\n#define VFORS(i, s, n) for(int i = (s); i <= (n); ++i)\n#define REP(i, n) FOR(i, 0, n)\n#define REPS(i, n) FORS(i, 0, n)\n#define VREP(i, n) VFOR(i, 0, n)\n#define VREPS(i, n) VFORS(i, 0, n)\n#define RFOR(i, s, n) for(int i = (s), i##_len=(n); i >= i##_len; --i)\n#define RFORS(i, s, n) for(int i = (s), i##_len=(n); i > i##_len; --i)\n#define RREP(i, n) RFOR(i, n, 0)\n#define RREPS(i, n) RFORS(i, n, 0)\n#define ALL(v) (v).begin(), (v).end()\n#define SORT(v) sort(ALL(v))\n#define RSORT(v) sort(ALL(v), greater<decltype(v[0])>())\n#define SZ(x) ((int)(x).size())\n#define PB push_back\n#define EB emplace_back\n#define MP make_pair\n#define MT make_tuple\n#define BIT(n) (1LL<<(n))\n#define UNIQUE(v) v.erase(unique(ALL(v)), v.end())\n\nusing ll = long long;\nusing ui = unsigned int;\nusing ull = unsigned long long;\nusing Pi_i = pair<int, int>;\nusing VB = vector<bool>;\nusing VC = vector<char>;\nusing VD = vector<double>;\nusing VI = vector<int>;\nusing VLL = vector<ll>;\nusing VS = vector<string>;\nusing VSH = vector<short>;\nusing VULL = vector<ull>;\n\nconst int MOD = 1000000007;\nconst int INF = 1000000000;\nconst int NIL = -1;\nconst double EPS = 1E-10;\n\ntemplate<class T, class S>\nbool chmax(T &a, const S &b){\n    if(a < b){\n        a = b; return true;\n    }\n    return false;\n}\ntemplate<class T, class S>\nbool chmin(T &a, const S &b){\n    if(b < a){\n        a = b; return true;\n    }\n    return false;\n}\n\n\nclass Point2D{\n    double x, y;\npublic:\n    Point2D(double X=0, double Y=0): x(X), y(Y){}\n    Point2D(const Point2D& v): x(v.x), y(v.y){}\n    template<class T>\n    Point2D(const vector<T> &v){\n        assert(v.size() == 2);\n        x = v[0]; y = v[1];\n    }\n    template<class T, class T2>\n    Point2D(const pair<T, T2> &p){\n        x = p.first; y = p.second;\n    }\n\n    void setX(double X){x = X;}\n    double getX(){return x;}\n    void setY(double Y){y = Y;}\n    double getY(){return y;}\n\n    Point2D operator+() const{return *this;}\n    Point2D operator-() const{return Point2D(-x, -y);}\n\n    Point2D& operator=(const Point2D& v){\n        x = v.x; y = v.y;\n        return *this;\n    }\n\n    Point2D& operator+=(const Point2D& v){\n        x += v.x; y += v.y;\n        return *this;\n    }\n\n    Point2D& operator-=(const Point2D& v){\n        x -= v.x; y -= v.y;\n        return *this;\n    }\n\n    Point2D& operator*=(const double a){\n        x *= a; y *= a;\n        return *this;\n    }\n\n    Point2D& operator/=(const double a){\n        x /= a; y /= a;\n        return *this;\n    }\n\n    Point2D operator+(const Point2D& v) const{\n        Point2D tmp(*this);\n        return tmp += v;\n    }\n\n    Point2D operator-(const Point2D& v) const{\n        Point2D tmp(*this);\n        return tmp -= v;\n    }\n\n    Point2D operator*(const double a) const{\n        Point2D tmp(*this);\n        return tmp *= a;\n    }\n\n    friend Point2D operator*(double a, const Point2D v){\n        return v * a;\n    }\n\n    Point2D operator/(const double a) const{\n        Point2D tmp(*this);\n        return tmp /= a;\n    }\n\n    double norm(){return x*x + y*y;}\n    friend double norm(Point2D &v){return v.norm();}\n    double abs(){return sqrt(norm());}\n    friend double abs(Point2D &v){return v.abs();}\n\n    bool operator<(const Point2D &v) const{\n        return x != v.x ? x < v.x : y < v.y;\n    }\n\n    bool operator>(const Point2D &v) const{\n        return x != v.x ? x > v.x : y > v.y;\n    }\n\n    bool operator==(const Point2D &v) const{\n        return std::abs(x - v.x) < EPS\n            && std::abs(y - v.y) < EPS;\n    }\n\n    bool operator<=(const Point2D &v) const{\n        return (*this < v) || (*this == v);\n    }\n\n    bool operator>=(const Point2D &v) const{\n        return (*this > v) || (*this == v);\n    }\n\n    friend double dot(Point2D a, Point2D b){\n        return a.x*b.x + a.y*b.y;\n    }\n\n    friend double cross(Point2D a, Point2D b){\n        return a.x*b.y - a.y*b.x;\n    }\n\n    friend double distance(Point2D a, Point2D b){\n        return (a - b).abs();\n    }\n};\nusing Vector2D = Point2D;\n\nclass Line2D{\n    Point2D p1, p2;\npublic:\n    Line2D(){}\n    Line2D(Point2D a, Point2D b): p1(a), p2(b){}\n\n    void setP1(const Point2D p){p1 = p;}\n    Point2D getP1(){return p1;}\n    void setP2(const Point2D p){p2 = p;}\n    Point2D getP2(){return p2;}\n\n    friend Point2D project(Line2D l, Point2D p){\n        Point2D base = l.p2 - l.p1;\n        double r = dot(p - l.p1, base) / norm(base);\n        return l.p1 + base * r;\n    }\n\n    friend Point2D reflect(Line2D l, Point2D p){\n        return p + 2.0 * (project(l, p) - p);\n    }\n};\n\nint ccwSearch(Point2D a, Point2D b){\n    if(cross(a, b) > EPS) return 0;//CCW\n    if(cross(a, b) < -EPS) return 1;//CW\n    if(dot(a, b) < -EPS) return 2;//OLB\n    if(norm(a) < norm(b)) return 3;//OLF\n    return 4;//OS\n}\n\n\nint main(){\n    string ans[] = {\"COUNTER_CLOCKWISE\", \"CLOCKWISE\",\n                    \"ONLINE_BACK\", \"ONLINE_FRONT\", \"ON_SEGMENT\"};\n\n    double x0, y0, x1, y1; cin >> x0 >> y0 >> x1 >> y1;\n    Point2D p0(x0, y0), p1(x1, y1);\n    Point2D a = p1 - p0;\n    int q; cin >> q;\n    REP(i, q){\n        double x, y; cin >> x >> y;\n        Point2D b = Point2D(x, y) - p0;\n       // cout << cross(a, b) << endl;\n        cout << ans[ccwSearch(a, b)] << \"\\n\";\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream> // cout, endl, cin\n#include <string> // string, to_string, stoi\n#include <vector> // vector\n#include <algorithm> // min, max, swap, sort, reverse, lower_bound, upper_bound\n#include <utility> // pair, make_pair\n#include <tuple> // tuple, make_tuple\n#include <cstdint> // int64_t, int*_t\n#include <cstdio> // printf\n#include <map> // map\n#include <queue> // queue, priority_queue\n#include <set> // set\n#include <stack> // stack\n#include <deque> // deque\n#include <unordered_map> // unordered_map\n#include <unordered_set> // unordered_set\n#include <bitset> // bitset\n#include <cctype> // isupper, islower, isdigit, toupper, tolower\n#include <cmath> // sqrt\n#define _GLIBCXX_DEBUG // check []\n#define DIVISOR 1000000007\n\nusing namespace std;\ntypedef pair<int,int> pii;\ntypedef pair<double, double> pdd;\ntypedef pair<int64_t, int64_t> pII;\n\ntemplate<typename T>\nvoid cins(vector<T>& arr) { for(T& e: arr) cin >> e; }\n\n#ifdef DEBUG\n#define debug(fmt, ...) \\\n    printf(\"[debug: %s] \" fmt, __func__, __VA_ARGS__)\n#define ps(arr) \\\n    debug(\"size %ld: \", arr.size()); \\\n    for(auto e: arr) cout << e << \" \"; \\\n    cout << endl;\n#else\n#define debug(fmt, ...)\n#define ps(arr)\n#endif\n\n#define _x first\n#define _y second\n\nenum type {\n    TYPE_CCW,\n    TYPE_CW,\n    TYPE_ONBACK,\n    TYPE_ONFRONT,\n    TYPE_ONSEG,\n};\n\nstring table[] = {\n    \"COUNTER_CLOCKWISE\",\n    \"CLOCKWISE\",\n    \"ONLINE_BACK\",\n    \"ONLINE_FRONT\",\n    \"ON_SEGMENT\",\n};\n\n#define EPS (1e-6)\ndouble outer_prod(pdd p1, pdd p2) {\n    return p1._x * p2._y - p2._x * p1._y;\n}\n\ndouble norm(pdd p1) {\n    return sqrt(p1._x*p1._x + p1._y*p1._y);\n}\n\npdd get_incline(pdd p1, pdd p2, double* len) {\n    pdd inc = make_pair(\n        p2._x - p1._x,\n        p2._y - p1._y\n    );\n    double leng = norm(inc);\n    *len = leng;\n    return make_pair(\n        inc._x / leng,\n        inc._y / leng\n    );\n}\n\nbool is_equal(pdd p1, pdd p2) {\n    return abs(p1._x - p2._x) < EPS && abs(p1._y - p2._y) < EPS;\n}\n\nint main(void) {\n    pdd base, p2;\n    cin >> base._x >> base._y;\n    cin >> p2._x >> p2._y;\n    double len1;\n    pdd inc = get_incline(base, p2, &len1);\n    int qs;\n    cin >> qs;\n    for(int i = 0; i < qs; i++) {\n        pdd p;\n        cin >> p._x >> p._y;\n        double len2;\n        pdd diff = get_incline(base, p, &len2);\n        debug(\"%lf\\n\", len2);\n        double val = outer_prod(inc, diff);\n        int type;\n        if(val > EPS) {\n            type = TYPE_CCW;\n        } else if(val < -EPS) {\n            type = TYPE_CW;\n        } else {\n            // abs(val) < EPS\n            if(abs(inc._x + diff._x) < EPS && \\\n                abs(inc._y + diff._y) < EPS) {\n                type = TYPE_ONBACK;\n            } else {\n                if(is_equal(p2, p)) {\n                    type = TYPE_ONSEG;\n                } else {\n                    type = (len1 > len2) ? TYPE_ONSEG : TYPE_ONFRONT;\n                }\n            }\n        }\n        cout << table[type] << endl;\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <cstdio>\n#include <iostream>\n#include <vector>\nusing namespace std;\n#define EPS 1e-10\n#define equals(a, b) (fabs(a - b) < EPS)\n\nclass Vector {\npublic:\n  double x, y;\n  Vector() {}\n  Vector(double x, double y) : x(x), y(y) {}\n\n  Vector operator+(Vector v) { return Vector(x + v.x, y + v.y); }\n  Vector operator-(Vector v) { return Vector(x - v.x, y - v.y); }\n  Vector operator*(double s) { return Vector(s * x, s * y); }\n  double norm() { return x * x + y * y; }\n  double abs() { return sqrt(norm()); }\n};\n\n// inner product\ndouble dot(Vector v1, Vector v2) { return v1.x * v2.x + v1.y * v2.y; }\n\n// cross product\ndouble cross(Vector v1, Vector v2) { return v1.x * v2.y - v1.y * v2.x; }\n\nclass Line {\npublic:\n  Vector v1, v2;\n  Line() {}\n  Line(Vector v1, Vector v2) : v1(v1), v2(v2) {}\n};\nclass Segment {\npublic:\n  Vector v1, v2;\n  Segment() {}\n  Segment(Vector v1, Vector v2) : v1(v1), v2(v2) {}\n  operator Line() const { return Line(v1, v2); }\n};\n\nbool is_parrallel(Vector a, Vector b) { return equals(cross(a, b), 0); }\nbool is_parrallel(Line a, Line b) {\n  return is_parrallel(a.v1 - a.v2, b.v1 - b.v2);\n}\nbool is_parrallel(Segment a, Segment b) {\n  return is_parrallel((Line)a, (Line)b);\n}\n\nbool is_orthogonal(Vector a, Vector b) { return equals(dot(a, b), 0); }\nbool is_orthogonal(Line a, Line b) {\n  return is_orthogonal(a.v1 - a.v2, b.v1 - b.v2);\n}\n\nVector project(Line l, Vector v) {\n  Vector a = v - l.v1;\n  Vector b = l.v2 - l.v1;\n  return l.v1 + b * (dot(a, b) / b.norm());\n}\n\nVector reflect(Line l, Vector v) { return v + (project(l, v) - v) * 2.0; }\n\ndouble distance(Line l, Vector v) { return (v - project(l, v)).abs(); }\ndouble distance(Vector v1, Vector v2) { return (v1 - v2).abs(); }\nbool in_segment(Segment s, Vector v) {\n  return dot(s.v2 - s.v1, v - s.v1) > 0 && dot(s.v1 - s.v2, v - s.v2) > 0;\n}\ndouble distance(Segment s, Vector v) {\n  auto m = project((Line)s, v);\n  if (in_segment(s, m)) {\n    return distance(m, v);\n  } else\n    return min(distance(s.v1, v), distance(s.v2, v));\n}\nbool opposite(Line l, Vector v1, Vector v2) {\n  auto a = l.v2 - l.v1;\n  auto b = v1 - l.v1;\n  auto c = v2 - l.v1;\n  return cross(a, b) * cross(a, c) < 0;\n}\nbool intersect(Segment s1, Segment s2) {\n  if (is_parrallel(s1, s2)) {\n    return equals(distance(s1, s2.v1), 0) || equals(distance(s1, s2.v2), 0);\n  } else {\n    return opposite((Line)s1, s2.v1, s2.v2) && opposite((Line)s2, s1.v1, s1.v2);\n  }\n}\n\ndouble distance(Segment s1, Segment s2) {\n  if (intersect(s1, s2)) {\n    return 0;\n  }\n  return min({distance(s1, s2.v1), distance(s1, s2.v2), distance(s2, s1.v1),\n              distance(s2, s1.v2)});\n}\nenum Direction {\n  COUNTER_CLOCKWISE,\n  CLOCKWISE,\n  ONLINE_BACK,\n  ONLINE_FRONT,\n  ON_SEGMENT,\n};\nDirection ccw(Vector v0, Vector v1, Vector v2) {\n  auto a = v1 - v0;\n  auto b = v2 - v0;\n  if (cross(a, b) > 0)\n    return COUNTER_CLOCKWISE;\n  if (cross(a, b) < 0)\n    return CLOCKWISE;\n  if (dot(a, b) < 0)\n    return ONLINE_BACK;\n  if (a.norm() < b.norm())\n    return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\nvoid printd(Direction d) {\n  switch (d) {\n  case COUNTER_CLOCKWISE:\n    printf(\"COUNTER_CLOCKWISE\\n\");\n    break;\n  case CLOCKWISE:\n    printf(\"CLOCKWISE\\n\");\n    break;\n  case ONLINE_BACK:\n    printf(\"ONLINE_BACK\\n\");\n    break;\n  case ONLINE_FRONT:\n    printf(\"ONLINE_FRONT\\n\");\n    break;\n  case ON_SEGMENT:\n    printf(\"ON_SEGMENT\\n\");\n    break;\n  }\n}\n\nint main() {\n  int x0, y0, x1, y1;\n  cin >> x0 >> y0 >> x1 >> y1;\n  auto v0 = Vector(x0, y0);\n  auto v1 = Vector(x1, y1);\n  int nq;\n  cin >> nq;\n  for (int i = 0; i < nq; i++) {\n    int x, y;\n    cin >> x >> y;\n    printd(ccw(v0, v1, Vector(x, y)));\n  }\n}\n/*\nint main() {\n  int nq;\n  cin >> nq;\n  for (int i = 0; i < nq; i++) {\n    Segment seg[2];\n    for (int j = 0; j < 2; j++) {\n      int x0, y0, x1, y1;\n      cin >> x0 >> y0 >> x1 >> y1;\n      seg[j] = Segment(Vector(x0, y0), Vector(x1, y1));\n    }\n    printf(\"%d\\n\", intersect(seg[0], seg[1]));\n  }\n}*/"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> P;\n#define x real()\n#define y imag()\n\ndouble eps = 1e-9;\n\nstring ccw(P a,P b,P c){\n  P ab=b-a,ac=c-a;\n  P k=ac*conj(ab);\n  if(k.y>eps)return \"COUNTER_CLOCKWISE\";\n  if(k.y<-eps)return \"CLOCKWISE\";\n  if(k.x<-eps)return \"ONLINE_BACK\";\n  if(abs(ab)+eps<abs(ac))return \"ONLINE_FRONT\";\n  return \"ON_SEGMENT\";\n}\n \nint main(){\n  double x0,y0,x1,y1,x2,y2;\n  cin>>x0>>y0>>x1>>y1;\n  P a(x0,y0);\n  P b(x1,y1);\n  int n;\n  cin>>n;\n  while(n--){\n    cin>>x2>>y2;\n    P c(x2,y2);\n    cout<< ccw(a,b,c) <<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "////////////////////////////////////////////////////////////////////////////////\n// 平面幾何\n\n// 型変換できるもの\n//   double  -> Point\n//   Segment -> Line\n\n// 誤差の話：絶対誤差でも相対誤差でも死ぬ例\n// int main(){\n//   const double EPS = 1e-9;\n//   double a = 1.3, b = 1e8, c = a + b;\n//   c = c - b;\n//   printf(\"%d\\n\", equal(a, c));          // => 0\n//   printf(\"%d\\n\", relative_equal(a, c)); // => 0\n// }\n\n////////////////////\n// ライブラリ\n#include<cmath>\n#include<algorithm>\n#include<cassert>\n////////////////////\n// 定数\nconst double EPS = 1e-9;                // |EPS|未満の数は0として扱う\n////////////////////\n// 構造体\nstruct Point {\n  double x, y;\n  Point(const double d = 0.0) :x(d), y(d) {}\n  Point(const double x, const double y) :x(x), y(y) {}\n};\nstruct Segment {\n  Point initial, terminal;\n  Segment(const Point& initial, const Point& terminal) :initial(initial), terminal(terminal) {}\n  Segment(const double x1, const double y1, const double x2, const double y2) :initial(x1, y1), terminal(x2, y2) {}\n};\nstruct Line {\n  Point initial, terminal;\n  Line(const Point& initial, const Point& terminal) :initial(initial), terminal(terminal) {}\n  Line(const double x1, const double y1, const double x2, const double y2) :initial(x1, y1), terminal(x2, y2) {}\n  Line(const Segment& s) :initial(s.initial), terminal(s.terminal) {}\n};\n////////////////////\n// 実装\nbool relative_equal(const double d1, const double d2) {return d1 == 0 ? std::abs(d2) < EPS : std::abs((d1 - d2) / d1) < EPS;}\n// 演算子オーバーロード\nbool operator==(const Point& lhs, const Point& rhs) {return relative_equal(lhs.x, rhs.x) && relative_equal(lhs.y, rhs.y);}\nbool operator<(const Point& lhs, const Point& rhs) {return lhs.x != rhs.x ? lhs.x < rhs.x : lhs.y < rhs.y;}\nbool operator>(const Point& lhs, const Point& rhs) {return lhs.x != rhs.x ? lhs.x > rhs.x : lhs.y > rhs.y;}\nbool operator!=(const Point& lhs, const Point& rhs) {return !(lhs == rhs);}\nbool operator<=(const Point& lhs, const Point& rhs) {return !(lhs > rhs);}\nbool operator>=(const Point& lhs, const Point& rhs) {return !(lhs < rhs);}\nconst Point operator+(const Point& lhs, const Point& rhs) {return Point(lhs.x + rhs.x, lhs.y + rhs.y);}\nconst Point operator-(const Point& lhs, const Point& rhs) {return Point(lhs.x - rhs.x, lhs.y - rhs.y);}\nconst Point operator*(const Point& lhs, const Point& rhs) {return Point(lhs.x * rhs.x, lhs.y * rhs.y);}\nconst Point operator/(const Point& lhs, const Point& rhs) {return Point(lhs.x / rhs.x, lhs.y / rhs.y);}\nconst Point operator-(const Point& p) {return Point(-p.x, -p.y);}\n// 点\ndouble abs(const Point& p) {return std::hypot(p.x, p.y);}\ndouble norm(const Point& p) {return p.x * p.x + p.y * p.y;}\ndouble dot(const Point& a, const Point& b) {return a.x * b.x + a.y * b.y;}\ndouble cross(const Point& a, const Point& b) {return a.x * b.y - a.y * b.x;}\n// const Point normalize(const Point& p) {return p / abs(p);}\n// 線\nbool parallel(const Line& l1, const Line& l2) {return std::abs(cross(l2.terminal - l2.initial, l1.terminal - l1.initial)) < EPS;}\nbool orthogonal(const Line& l1, const Line& l2) {return std::abs(dot(l2.terminal - l2.initial, l1.terminal - l1.initial)) < EPS;}\n// 点の位置関係\nenum POSITION {ONLINE_FRONT = -2, CLOCKWISE, ON_SEGMENT, COUNTER_CLOCKWISE, ONLINE_BACK}; \nPOSITION ccw(const Point& a, const Point& b, const Point& p) {\n  Point v1 = b - a;\n  Point v2 = p - a;\n  if(cross(v1, v2) >= EPS) return COUNTER_CLOCKWISE;\n  if(cross(v1, v2) <= -EPS) return CLOCKWISE;\n  if(dot(v1, v2) <= -EPS) return ONLINE_BACK;\n  if(norm(v1) < norm(v2) + EPS) return ONLINE_FRONT;              // 誤差怖い\n  return ON_SEGMENT;\n}\n// 交差判定\nbool intersect(const Point& p1, const Point& p2) {return p1 == p2;}\nbool intersect(const Point& p, const Segment& s) {return abs(p - s.initial) + abs(p - s.terminal) - abs(s.initial - s.terminal) <= EPS;}\nbool intersect(const Segment& s, const Point& p) {return intersect(p, s);}\nbool intersect(const Point& p, const Line& l) {return !parallel(Line(p, l.initial), Line(p, l.terminal));}\nbool intersect(const Line& l, const Point& p) {return intersect(p, l);}\nbool intersect(const Segment& s1, const Segment& s2) {\n  return ccw(s1.initial, s1.terminal, s2.initial) * ccw(s1.initial, s1.terminal, s2.terminal) <= 0\n      && ccw(s2.initial, s2.terminal, s1.initial) * ccw(s2.initial, s2.terminal, s1.terminal) <= 0;\n}\nbool intersect(const Segment& s, const Line& l) {\n  auto v1 = l.terminal - l.initial;\n  auto v2 = s.initial  - l.initial;\n  auto v3 = s.terminal - l.initial;\n  return cross(v1, v2) * cross(v1, v3) <= EPS;\n}\nbool intersect(const Line& l, const Segment& s) {return intersect(s, l);}\nbool intersect(const Line& l1, const Line& l2) {return !parallel(l1, l2) || intersect(l1.initial, l2);}\n// 点の移動\nPoint projection(const Point& p, const Line& l) {\n  auto v = l.initial - l.terminal;\n  return l.initial + dot(p - l.initial, v) / norm(v) * v;\n}\nPoint projection(const Line& l, const Point& p) {return projection(p, l);}\nPoint reflection(const Point& p, const Line& l) {return p + 2 * (projection(p, l) - p);}\nPoint reflection(const Line& l, const Point& p) {return reflection(p, l);}\n// 距離\ndouble distance(const Point& p1, const Point& p2) {\n  auto p = p1 - p2;\n  return hypot(p.x, p.y);\n}\ndouble distance(const Point& p, const Segment& s) {\n  auto r = projection(s, p);\n  return intersect(r, s) ? distance(p, r) : std::min(distance(p, s.initial), distance(p, s.terminal));\n}\ndouble distance(const Segment& s, const Point& p) {return distance(p, s);}\ndouble distance(const Point& p, const Line& l) {return distance(p, projection(p, l));}\ndouble distance(const Line& l, const Point& p) {return distance(p, l);}\ndouble distance(const Segment& s1, const Segment& s2) {\n  return intersect(s1, s2) ? 0.0 : std::min({distance(s1, s2.initial), distance(s1, s2.terminal), distance(s2, s1.initial), distance(s2, s1.terminal)});\n}\ndouble distance(const Segment& s, const Line& l) {return intersect(s, l) ? 0.0 : std::min(distance(s.initial, l), distance(s.terminal, l));}\ndouble distance(const Line& l,const Segment& s) {return distance(s, l);}\ndouble distance(const Line& l1, const Line& l2) {return intersect(l1, l2) ? 0.0 : distance(l1.initial, l2);}\n// 交点\nconst Point crosspoint(const Line& l1, const Line& l2) {\n  assert(intersect(l1, l2));\n  if(parallel(l1, l2)) return l1.initial;                   // 平行なときl1の始点を返す\n  double A = cross(l1.terminal - l1.initial, l2.terminal - l2.initial);\n  double B = cross(l1.terminal - l1.initial, l1.terminal - l2.initial);\n  return l2.initial + B / A * (l2.terminal - l2.initial);\n}\nconst Point crosspoint(const Segment& s, const Line& l) {\n  assert(intersect(s, l));\n  if(parallel(s, l)) return s.initial;\n  Point cp = crosspoint(Line(s), l);\n  assert(intersect(s, cp));\n  return cp;\n}\nconst Point crosspoint(const Line& l, const Segment& s) {return crosspoint(s, l);}\nconst Point crosspoint(const Segment& s1, const Segment& s2) {\n  assert(intersect(s1, s2));\n  if(parallel(s1, s2)) {                                    // 平行なときいずれかの端点を返す\n    if(intersect(s1.initial,  s2)) return s1.initial;\n    if(intersect(s1.terminal, s2)) return s1.terminal;\n    if(intersect(s2.initial,  s1)) return s2.initial;\n    if(intersect(s2.terminal, s1)) return s2.terminal;\n  }\n  return crosspoint(Line(s1), Line(s2));\n}\n// デバッグ用\n#include<bits/stdc++.h>\nusing namespace std;\nvoid print(const Point& p) {cout<<\"point: \"; cout<<\"(\"<<p.x<<\",\"<<p.y<<\")\";}\nvoid print(const Segment& l) {cout<<\"segment: \"; print(l.initial); cout<<\"to\"; print(l.terminal);}\nvoid print(const Line& l) {cout<<\"line: \"; print(l.initial); cout<<\"to\"; print(l.terminal);}\n////////////////////////////////////////////////////////////////////////////////\n// 多角形\n//   辺をメンバ変数にしない→メモリ節約・edge(void)がO(頂点数)。edge().begin()を使っている箇所は書き換える必要がある\n#include<vector>\n#include<algorithm>\n#include<numeric>\n#include<utility>\nclass Polygon {\npublic:\n  // 編集\n  void add(const Point& p) {\n    if(!vertex_.empty()) {\n      if(!edge_.empty()) edge_.pop_back();\n      edge_.push_back(Segment(vertex_.back(), p));\n      edge_.push_back(Segment(p, vertex_.front()));\n    }\n    vertex_.push_back(p);\n  }\n  void clear() {\n    vertex_.clear();\n    edge_.clear();\n  };\n  // 情報\n  int size() const {return vertex_.size();}\n  Point vertex(const int n) const {return vertex_.at(n);}\n  Segment edge(const int n) const {return edge_.at(n);}\n  const std::vector<Point>& vertex() const {return vertex_;}\n  const std::vector<Segment>& edge() const {return edge_;}\n  // 道具\n  bool touch(const Point& p) const {\n    return std::any_of(edge().begin(), edge().end(), [=](const Segment& s) {return ccw(s.initial, s.terminal, p) == ON_SEGMENT;});\n  }\n  bool intersect(const Point& p) const {\n    bool in = false;                    // p=(x,y)から(INF,y)への半直線と多角形とが交差する回数 mod 2\n    for(const auto& e: edge()) {\n      if(::intersect(p, e)) return true;\n      Point a = e.initial  - p;\n      Point b = e.terminal - p;\n      if(a.y > b.y) std::swap(a, b);\n      if(a.y < EPS && EPS <= b.y && cross(a, b) < EPS) in = !in;\n    }\n    return in;\n  }\n  double area() const {\n    return std::abs(std::accumulate(edge().begin(), edge().end(), 0, [=](const int sum, const Segment& e){return sum + cross(e.initial, e.terminal);})) / 2.0;\n  }\n  bool convex() const {\n    bool positive = false;\n    bool negative = false;\n    for(int i = 0; i < size(); ++i) {\n      auto position = ccw(vertex(i), vertex((i + 1) % size()), vertex((i + 2) % size()));\n      positive |= position == CLOCKWISE;\n      negative |= position == COUNTER_CLOCKWISE;\n      if(negative && positive) return false;\n    }\n    return true;\n  }\nprivate:\n  std::vector<Point> vertex_;\n  std::vector<Segment> edge_;\n};\n////////////////////////////////////////////////////////////////////////////////\n#include<bits/stdc++.h>\nusing namespace std;\nint main() {\n  // Points/Vectors\n  Point p1, p2;\n  cin >> p1.x >> p1.y >> p2.x >> p2.y;\n  int q;\n  for(cin >> q; q > 0; --q) {\n    int x, y;\n    cin >> x >> y;\n    // A\n//     Point p = projection(Line(p1, p2), Point(x, y));\n//     cout << setprecision(10) << fixed << p.x << \" \" << p.y << endl;\n    // B\n//     Point p = reflection(Line(p1, p2), Point(x, y));\n//     cout << setprecision(10) << fixed << p.x << \" \" << p.y << endl;\n    // C\n    switch(ccw(p1, p2, Point(x, y))) {\n    case COUNTER_CLOCKWISE:\n      cout << \"COUNTER_CLOCKWISE\" << endl;\n      break;\n    case CLOCKWISE:\n      cout << \"CLOCKWISE\" << endl;\n      break;\n    case ONLINE_BACK:\n      cout << \"ONLINE_BACK\" << endl;\n      break;\n    case ONLINE_FRONT:\n      cout << \"ONLINE_FRONT\" << endl;\n      break;\n    case ON_SEGMENT:\n      cout << \"ON_SEGMENT\" << endl;\n      break;\n    }\n  }\n\n  // Segments/Lines\n//   int n;\n//   for(cin >> n; n > 0; --n) {\n//     int a, b, c, d, e, f, g, h;\n//     cin >> a >> b >> c >> d >> e >> f >> g >> h;\n//     Segment s(Point(a, b), Point(c, d));\n//     Segment t(Point(e, f), Point(g, h));\n//     // A\n// //     cout << (parallel(s, t) ? 2 : (orthogonal(s, t) ? 1 : 0)) << endl;\n//     // B\n// //     cout << (intersect(s, t) ? 1 : 0) << endl;\n//     // C\n// //     auto cp = crosspoint(s, t);\n// //     cout << setprecision(10) << fixed << cp.x << \" \" << cp.y << endl;\n//     // D\n// //     cout << setprecision(10) << fixed << distance(s, t) << endl;\n//   }\n\n  // Polygon\n//   int n;\n//   Polygon polygon;\n//   for(cin >> n; n > 0; --n) {\n//     int x, y;\n//     cin >> x >> y;\n//     polygon.add(Point(x, y));\n//   }\n//   // A\n// //   cout << setprecision(1) << fixed  << polygon.area() << endl;\n//   // B\n// //   cout << (polygon.convex() ? 1 : 0) << endl;\n//   // C\n//   int q;\n//   for(cin >> q; q > 0; --q) {\n//     int x, y;\n//     cin >> x >> y;\n//     Point p(x, y);\n//     cout << (polygon.touch(p) ? 1 : (polygon.intersect(p) ? 2 : 0)) << endl;\n//   }\n}"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#include <bits/stdc++.h>\nusing namespace std;\n#define int lint\ntypedef long long lint;\ntypedef pair<int,int> P;\nconst int    INF=(int)1e9;\nconst int    MOD=(int)1e9+7;\nconst double EPS=(double)1e-10;\nstruct Accelerate_Cin{\n    Accelerate_Cin(){\n        cin.tie(0);ios::sync_with_stdio(0);cout<<fixed<<setprecision(20);\n    };\n};\n\n//幾何学テンプレート\n\n#define equals(a,b) (fabs((a)-(b))<EPS)\n\n//点\nclass Point{\npublic:\n  double x,y;\n\n  Point(double x = 0,double y = 0):x(x), y(y){};\n\n  Point operator + (Point p) {return Point (x+p.x, y+p.y);}\n  Point operator - (Point p) {return Point (x-p.x, y-p.y);}\n  Point operator * (double a) {return Point(a*x, a*y);}\n  Point operator / (double a) {return Point(x/a,y/a);}\n\n  double abs(){return (norm());}\n  double norm(){return x*x+y*y;}\n\n  bool operator < (const Point &p)const{\n    return x!=p.x ? x<p.x:y<p.y;\n  }\n  bool operator > (const Point &p)const{\n    return x!=p.x ? x>p.x:y>p.y;\n  }\n  bool operator == (const Point &p)const{\n    return fabs(x-p.x)<EPS && fabs(y-p.y)<EPS;\n  }\n};\n\n//ベクトル\ntypedef Point Vector;\n\n//内積\ndouble dot(Vector a,Vector b){\n  return a.x*b.x+a.y*b.y;\n}\n\n//外積\ndouble cross(Vector a,Vector b){\n  return a.x*b.y-a.y*b.x;\n}\n\n//線分\nstruct Segment{Point p1,p2;};\n\n//直線\ntypedef Segment Line;\n\n//円\nclass Circle{\npublic:\n  Point c;   //中心\n  double r;  //半径\n  Circle(Point c=Point(),double r=0.0):c(c),r(r){}};\n\n//多角形\ntypedef vector<Point> Polygon;\n\n\nstatic const int COUNTER_CLOCKWISE=1;\nstatic const int CLOCKWISE=-1;\nstatic const int ONLINE_BACK=2;\nstatic const int ONLINE_FRONT=-2;\nstatic const int ON_SEGMENT=0;\n\nint ccw(Point p0,Point p1,Point p2){\n  Vector a=p1-p0;\n  Vector b=p2-p0;\n  if(cross(a,b)>EPS)   return COUNTER_CLOCKWISE;\n  if(cross(a,b)<-EPS)  return CLOCKWISE;\n  if(dot(a,b)<-EPS)    return ONLINE_BACK;\n  if(a.norm()<b.norm())return ONLINE_FRONT;\n\n  return ON_SEGMENT;\n}\n\n\nsigned main(){\n  double x0,y0,x1,y1;cin>>x0>>y0>>x1>>y1;\n  Point p0={x0,y0},p1={x1,y1};\n  int q;cin>>q;\n\n  queue<int>que;\n  for(int i=0;i<q;i++){\n    double x,y;cin>>x>>y;\n    Point p2={x,y};\n    int temp=ccw(p0,p1,p2);\n    que.push(temp);\n  }\n\n  while(!que.empty()){\n    int temp=que.front();\n    if(temp==1){\n      cout<<\"COUNTER_CLOCKWISE\"<<endl;\n    }\n    if(temp==-1){\n      cout<<\"CLOCKWISE\"<<endl;\n    }\n    if(temp==2){\n      cout<<\"ONLINE_BACK\"<<endl;\n    }\n    if(temp==-2){\n      cout<<\"ONLINE_FRONT\"<<endl;\n    }\n    if(temp==0){\n      cout<<\"ON_SEGMENT\"<<endl;\n    }\n    que.pop();\n  }\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\n#include <cmath>\n#include <iomanip>\n#include <stack>\n#include <queue>\n#include <vector>\n#include <algorithm>\n\n\nusing namespace std;\n\n//-------------------------------------------------------------------------------------\n/*2点[(x1,y1),(x2,y2)]を入力し二点を通る直線ax+by+cの(a,b,c)を返す,  */\n/*x1==x2ならfalseを返す*/\n/*falseならばx=cの形の直線*/\nvoid straight_line_passing_through_the_two_points(double x1, double y1, double x2, double y2, double *a, double *b, double *c){\n    *a=(y2-y1);\n    *b=-(x2-x1);\n    *c=y2*(x2-x1)-x2*(y2-y1);\n}\n\n//-------------------------------------------------------------------------------------\n/*(x,y)を通るa1x+b1y+c1=0に垂直な直線a2x+b2y+c2=0を返す*/\nbool vertical_straight_line(double x, double y, double a1, double b1, double c1, double *a2, double *b2, double *c2){\n    if(a1*x+b1*y+c1==0)return false;\n    *a2 = -b1;\n    *b2 = a1;\n    *c2 = b1*x - a1*y;\n    return true;\n}\n\n\n//-------------------------------------------------------------------------------------\n/*2直線 a1x+b1y+c1=0 a2x+b2y+c2=0 の交点 (x,y)を返す*/\n/*2直線が平行であるならば0を返す*/\nint intersection_and_parallel(double a1, double b1, double c1, double a2, double b2, double c2, double *x, double *y){\n    if(a1*b2==a2*b1)return false;//平行の判定\n    \n    *x = (b1*c2-b2*c1)/(a1*b2-a2*b1);\n    *y = (a2*c1-a1*c2)/(a1*b2-a2*b1);\n    \n    return true;\n}\n\n//-------------------------------------------------------------------------------------\n/* \n a1x+b1y+c1=0 と　a2x+b2y+c2=0 が\n 平行なら2\n 直交なら1\n それ以外は0\n を返す\n */\nint judges_whether_parallel_or_perpendicular(double a1, double b1, double c1, double a2, double b2, double c2){\n    if(a1*b2 == a2*b1)return 2;\n    if(a1*a2 + b1*b2 == 0)return 1;\n    return 0;\n}\n\n\n//-------------------------------------------------------------------------------------\n/*直線ax+by+c=0に対し　(x1,y1)と線対称な位置(x2,y2)を出力*/\n/*vertical_straight_lineを使用*/\n/*intersection_and_parallelを使用*/\nvoid line_symmetry(double a, double b, double c, double x1, double y1, double *x2, double *y2){\n    if(a*x1+b*y1+c==0){//(x1,y1)が直線上にある.\n        *x2=x1;\n        *y2=y1;\n        return;\n    }\n    \n    //垂直な直線を求める\n    double a2,b2,c2;\n    vertical_straight_line(x1, y1, a, b, c, &a2, &b2, &c2);\n    \n    //垂直な直線との交点を求める\n    double c_x, c_y;\n    intersection_and_parallel(a, b, c, a2, b2, c2, &c_x, &c_y);\n    *x2 = x1 + 2*(c_x-x1);\n    *y2 = y1 + 2*(c_y-y1);\n}\n\n\n\n//-------------------------------------------------------------------------------------\n/*2点(x1,y1), (x2,y2) の距離*/\ndouble distance_between_the_two_pointss(double x1,double y1, double x2, double y2){\n    return  sqrt(fabs((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)));\n}\n\n\n//-------------------------------------------------------------------------------------\n/* (x1,y1)から(x2,y2)へ伸ばした直線の角度を求める  */\n/*-π　〜　+π　まで*/\ndouble angle_of_the_line(double x1, double y1, double x2, double y2){\n    return atan2(y2-y1, x2-x1);\n}\n\n//-------------------------------------------------------------------------------------\n/*(x1,y1)と(x2,y2)を両端に持つ線分と*/\n/*(x3,y3)と(x4,y4)を両端に持つ線分が*/\n/*交差するなら1 交差しないなら0を出力する*/\n/* straight_line_passing_through_the_two_pointsを使用 */\n/* intersection_and_parallelを使用 */\nint line_segment_cross_decision(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4){\n    double a1,b1,c1, a2,b2,c2;\n    straight_line_passing_through_the_two_points(x1, y1, x2, y2, &a1, &b1, &c1);\n    straight_line_passing_through_the_two_points(x3, y3, x4, y4, &a2, &b2, &c2);\n    double c_x,c_y;\n    bool is_parallel = intersection_and_parallel(a1, b1, c1, a2, b2, c2, &c_x, &c_y);\n    if(is_parallel==false){\n        if( (a1==a2&&b1==b2&&c1==c2) || (a1==0 && (b1/b2)==(c1/c2)) || (b1==0 && (a1/a2)==(c1/c2)) ){//一直線上にある.\n            //cout<<1111;\n            if(min(x1,x2)<=x3&&x3<=max(x1,x2)&&min(y1,y2)<=y3&&y3<=max(y1,y2))return 1;\n            if(min(x1,x2)<=x4&&x4<=max(x1,x2)&&min(y1,y2)<=y4&&y4<=max(y1,y2))return 1;\n            if(min(x3,x4)<=x1&&x1<=max(x3,x4)&&min(y3,y4)<=y1&&y1<=max(y3,y4))return 1;\n            if(min(x3,x4)<=x2&&x2<=max(x3,x4)&&min(y3,y4)<=y2&&y2<=max(y3,y4))return 1;\n            \n\n\n        }\n        return 0;\n    }\n    if(x1>x2)swap(x1, x2);\n    if(x3>x4)swap(x3, x4);\n    if(y1>y2)swap(y1, y2);\n    if(y3>y4)swap(y3, y4);\n\n    if(x1<=c_x&&c_x<=x2&&x3<=c_x&&c_x<=x4){\n        if(y1<=c_y&&c_y<=y2&&y3<=c_y&&c_y<=y4)return 1;\n    }\n    return 0;\n    \n}\n\n\n\n//-------------------------------------------------------------------------------------\n/*点(p_x,p_y)と線分(x1,y1)(x2,y2)の距離*/\n/* straight_line_passing_through_the_two_points */\n/* vertical_straight_line */\n/* intersection_and_parallel */\ndouble distance_between_the_line_segment_and_point(double p_x, double p_y, double x1, double y1, double x2, double y2){\n    double a,b,c;//(x1,y1)(x2,y2)を通る直線\n    straight_line_passing_through_the_two_points(x1, y1, x2, y2, &a, &b, &c);\n    double a2,b2,c2;//直線ax+by+c=0に垂直な直線\n    double v_x, v_y;//二つの直線の交点\n    bool is_not_parallel = vertical_straight_line(p_x, p_y, a, b, c, &a2, &b2, &c2);\n    intersection_and_parallel(a, b, c, a2, b2, c2, &v_x, &v_y);\n    \n    if(is_not_parallel){\n        if(min(x1,x2)<=v_x&&v_x<=max(x1,x2)&&min(y1,y2)<=v_y&&v_y<=max(y1,y2)){//(v_x,v_y)は線分の中にある\n            //cout<<\"a \";\n            return distance_between_the_two_pointss(p_x, p_y, v_x, v_y);\n        }else{//(v_x,v_y)は線分の外にある\n            double l1 = distance_between_the_two_pointss(p_x, p_y, x1, y1);\n            double l2 = distance_between_the_two_pointss(p_x, p_y, x2, y2);\n            //cout<<\"b \";\n            return min(l1,l2);\n        }\n    }else{\n        if(min(x1,x2)<=p_x&&p_x<=max(x1,x2)&&min(y1,y2)<=p_y&&p_y<=max(y1,y2)){//(p_x,p_y)は線分の中にある\n            //cout<<\"c \";\n            return 0.0;\n        }else{//(p_x,p_y)は線分の外にある\n            double l1 = distance_between_the_two_pointss(p_x, p_y, x1, y1);\n            double l2 = distance_between_the_two_pointss(p_x, p_y, x2, y2);\n            //cout<<\"d \";\n            return min(l1,l2);\n        }\n    }\n    \n}\n\n\n//-------------------------------------------------------------------------------------\n/*線分(x1,y1)(x2,y2)と線分(x3,y3)(x4,y4)の距離*/\n\ndouble distance_between_two_line_segment(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4){\n    //同一直線上にある場合\n    \n    //ぶつかる場合\n    if(line_segment_cross_decision(x1, y1, x2, y2, x3, y3, x4, y4)){\n        return 0.0;\n    }\n    \n    //ぶつからない場合\n    double l1,l2,l3,l4;\n    l1=distance_between_the_line_segment_and_point(x1, y1, x3, y3, x4, y4);\n    //cout<<l1<<endl;\n    l2=distance_between_the_line_segment_and_point(x2, y2, x3, y3, x4, y4);\n    //cout<<l2<<endl;\n\n    l3=distance_between_the_line_segment_and_point(x3, y3, x1, y1, x2, y2);\n    //cout<<l3<<endl;\n    l4=distance_between_the_line_segment_and_point(x4, y4, x1, y1, x2, y2);\n    \n        \n    //cout<<l4<<endl;\n    \n    return min(l1,min(l2,min(l3,l4)));\n}\n\n//-------------------------------------------------------------------------------------\n/*多角形の面積*/\n/*頂点数n　頂点の集合 */\ndouble area_of_the_polygon(int n, double p_xy[10000][2]){\n    double s=0.0;\n    for(int i=0; i<n; i++){\n        s+=(p_xy[i][0]-p_xy[(i+1)%n][0])*(p_xy[i][1]+p_xy[(i+1)%n][1])/2;\n    }\n    return s;\n}\n\n\n//-------------------------------------------------------------------------------------\n/*角abcの角度　a(xa,ya), b(xb,yb), c(xc,yc),*/\n/*2辺の角度*/\n/*aとb　またはbとcが重なっていればPIを返す*/\ndouble angle_of_the_two_edges(double ax, double ay, double bx, double by, double cx, double cy){\n    if(ax==bx&&ay==by)return M_PI;\n    if(cx==bx&&cy==by)return M_PI;\n    \n    double angle1 = angle_of_the_line(ax, ay, bx, by);\n    double angle2 = angle_of_the_line(bx, by, cx, cy);\n    \n    double ret = angle1+(M_PI-angle2);\n    if(ret>M_PI * 2)ret -= M_PI * 2;\n    if(ret<0)ret += M_PI * 2;\n    return /*2*M_PI- */ret;\n    \n}\n\n//-------------------------------------------------------------------------------------\n/*多角形に対する点の内外判定*/\n/* n頂点の多角形p_xy[n]に対して点(x,y)の内外判定を行う*/\n/* 内なら2 線上なら1 外なら0*/\nint inside_and_outside_the_determination_of_the_polygon_and_point(int n, double p_xy[10000][2], double x, double y){\n    //点が線分上にあるか\n    for(int i=0; i<n; i++){\n        double l = distance_between_the_line_segment_and_point(x, y, p_xy[i][0], p_xy[i][1], p_xy[(i+1)%n][0], p_xy[(i+1)%n][1]);\n        if(l==0.0)return 1;\n    }\n    \n    //点が中にあるか外にあるか\n    int ans = 0;\n    for(int i=0; i<n; i++){\n        if(p_xy[i][0]!=p_xy[(i+1)%n][0]){\n            ans += line_segment_cross_decision(p_xy[i][0], p_xy[i][1], p_xy[(i+1)%n][0], p_xy[(i+1)%n][1], x, y, x, y+1000000.0);\n            \n            if(distance_between_the_line_segment_and_point(p_xy[i][0], p_xy[i][1],x, y, x, y+1000000.0)==0.0){\n                if(p_xy[i][0]>p_xy[(i+1)%n][0])ans--;\n            }\n            if(distance_between_the_line_segment_and_point(p_xy[(i+1)%n][0], p_xy[(i+1)%n][1],x, y, x, y+1000000.0)==0.0){\n                if(p_xy[i][0]<p_xy[(i+1)%n][0])ans--;\n            }\n        }\n        \n    }\n    //cout<<\" \"<<ans<<\" \";\n    if(ans%2==0)return 0;\n    else return 2;\n}\n//-------------------------------------------------------------------------------------\n/*二点の角度*/\n/*0~2π*/\ndouble angle_line_0_359(double x1, double y1, double x2, double y2){\n    double angle = atan2(y2-y1, x2-x1);\n    if(angle<0)angle = 2*M_PI+angle;\n    return angle;\n}\n\n//-------------------------------------------------------------------------------------\n/*二辺の角度*/\n/*反時計回りの内側*/\n/*0~2π*/\ndouble angle_two_line_0_359(double x1, double y1, double x2, double y2, double x3, double y3){\n    double angle = atan2(y2-y1, x2-x1);\n    if(angle<0)angle = 2*M_PI+angle;\n    if(angle==2*M_PI)angle=0.0;\n    \n    double angle2 = atan2(y3-y2, x3-x2);\n    if(angle2<0)angle2 = 2*M_PI+angle2;\n    if(angle2==2*M_PI)angle2=0.0;\n    \n    double ret = 2*M_PI-( angle+(M_PI-angle2) );\n    if(ret<0)ret+=2*M_PI;\n    \n    return ret;\n}\n\n//-------------------------------------------------------------------------------------\n/*二次元配列のクイックソート*/\n/*xoryが0ならx座標　1なら座標でソート*/\nvoid two_dimensional_qsort(double xy[100000][2], int left, int right, int xory)\n{\n    int i, j;\n    double pivot,pivot2;\n    \n    i = left;                      /* ソートする配列の一番小さい要素の添字 */\n    j = right;                     /* ソートする配列の一番大きい要素の添字 */\n    \n    pivot = xy[(left + right) / 2][xory]; /* 基準値を配列の中央付近にとる */\n    pivot2 = xy[(left + right) / 2][(xory+1)%2];\n    \n    \n    while (1) {                    /* 無限ループ */\n        \n        while (xy[i][xory] < pivot || (xy[i][xory] == pivot && xy[i][(xory+1)%2] < pivot2))       /* pivot より大きい値が */\n            i++;                   /* 出るまで i を増加させる */\n        \n        while (pivot < xy[j][xory] || (xy[j][xory] == pivot &&  pivot2 < xy[j][(xory+1)%2]))       /* pivot より小さい値が */\n            j--;                   /*  出るまで j を減少させる */\n        if (i >= j)                /* i >= j なら */\n            break;                 /* 無限ループから抜ける */\n        \n        swap(xy[i][xory], xy[j][xory]);            /* x[i] と x[j]を交換 */\n        swap(xy[i][(xory+1)%2], xy[j][(xory+1)%2]);            /* x[i] と x[j]を交換 */\n        i++;                       /* 次のデータ */\n        j--;\n    }\n    \n    if (left < i - 1)              /* 基準値の左に 2 以上要素があれば */\n        two_dimensional_qsort(xy, left, i - 1, xory);     /* 左の配列を Q ソートする */\n    if (j + 1 <  right)            /* 基準値の右に 2 以上要素があれば */\n        two_dimensional_qsort(xy, j + 1, right, xory);    /* 右の配列を Q ソートする */\n}\n\n\n//-------------------------------------------------------------------------------------\n/*凸包*/\n/*２次元平面における点の集合Pに対する凸包（convex hull）を求めて下さい。凸包とは点集合Pの全ての点を含む最小の凸多角形です。*/\n/*集合の要素数 n*/\n/*集合 p_xy[1000000][2]*/\n/*解答の要素数 q*/\n/*解答 ans[1000000][2]　最も下の最も左から反時計回り*/\n\nvoid convex_hull(int n, double p_xy[100000][2], int *q, double ans[100000][2]){\n\n    two_dimensional_qsort(p_xy, 0, n-1, 1);\n    /*\n    for(int i=0; i<n; i++){\n        cout<<p_xy[i][0]<<\" \"<<p_xy[i][1]<<endl;\n    }\n     */\n    \n    \n    int k=0;\n    for(int i=0; i<n; i++){\n        while(k > 1 && (angle_two_line_0_359(ans[k-2][0], ans[k-2][1], ans[k-1][0], ans[k-1][1], p_xy[i][0], p_xy[i][1])>M_PI))k--;\n        ans[k][0]=p_xy[i][0];\n        ans[k][1]=p_xy[i][1];\n        k++;\n    }\n    \n    \n    int t=k;\n    for(int i=n-2; i>=0; i--){\n        while(k > t && (angle_two_line_0_359(ans[k-2][0], ans[k-2][1], ans[k-1][0], ans[k-1][1], p_xy[i][0], p_xy[i][1])>M_PI))k--;\n        ans[k][0]=p_xy[i][0];\n        ans[k][1]=p_xy[i][1];\n        k++;\n    }\n    *q=k-1;\n}\n//-------------------------------------------------------------------------------------\n/*点の集合(凸多角形)の最遠点距離*/\ndouble diameter_of_the_polygon(int n, double p_xy[100000][2]){\n    double ch[100000][2];\n    int q;\n    convex_hull(n, p_xy, &q, ch);\n    \n    \n    int i=0;\n    int j=0;\n    for(int k=0; k<q; k++){\n        if(ch[j][1]<ch[k][1]){\n            j=k;\n        }\n    }\n    \n    int si=i;\n    int sj=j;\n    double res =  distance_between_the_two_pointss(ch[si][0], ch[si][1], ch[sj][0], ch[sj][1]);\n    while(1){\n        if(i==sj||j==si)break;\n        \n        double cross = (ch[(si+1)%n][0]-ch[si][0])*(ch[(sj+1)%n][1]-ch[sj][1]) - (ch[(si+1)%n][1]-ch[si][1])*(ch[(sj+1)%n][0]-ch[sj][0]);\n        //cout<<cross<<endl;\n        \n        if(cross<0){\n            si=(si+1)%n;\n            //res = max(res,a);\n        }else{\n            sj=(sj+1)%n;\n            //res = max(res,b);\n        }\n        \n        res =  max(res,distance_between_the_two_pointss(ch[si][0], ch[si][1], ch[sj][0], ch[sj][1]));\n                                                    \n        \n    }\n    \n    return res;\n}\n//-------------------------------------------------------------------------------------\n/*点の集合の最近点距離*/\n/*使用前に sort(a, a+n); をおこなう*/\n/*使用注意 他と仕様が違う*/\n/*点にpairを使っている*/\n\n\nbool compare_y(pair<double, double> a,pair<double, double> b){\n    return a.second<b.second;\n}\n\ndouble length_of_the_nearest_point_to(pair<double, double> a[100000], int n){\n    if(n<=1)return 999999999.9;\n    int m=n/2;\n    double x=a[m].first;\n    double d=min(length_of_the_nearest_point_to(a, m), length_of_the_nearest_point_to(a+m, n-m));\n    //inplace_merge(a, a+m, a+n, compare_y);\n    sort(a, a+n, compare_y);\n    vector<pair<double, double> >b;\n    for(int i=0; i<n; i++){\n        if(fabs(a[i].first-x)>=d)continue;\n        for(int j=0; j<b.size(); j++){\n            double dx=a[i].first-b[b.size()-j-1].first;\n            double dy=a[i].second-b[b.size()-j-1].second;\n            if(dy>=d)break;\n            d=min(d,sqrt(dx*dx+dy*dy));\n            \n        }\n        b.push_back(a[i]);\n    }\n    return d;\n}\n                                      \n//-------------------------------------------------------------------------------------\n/* 2点(x1,y1) (x2,y2)を通る直線に点(px,py)から引いた垂線の直線との交点(x, y)を返す */\nvoid intersection_of_the_normal_to_the_straight_line_passing_through_the_two_points(double px,double py,double x1, double y1,double x2, double y2,double *x, double *y){\n    double a,b,c;\n    straight_line_passing_through_the_two_points(x1, y1, x2, y2, &a, &b, &c);\n    *x = px-(a*px+b*py+c)/(a*a+b*b)*a;\n    *y = py-(a*px+b*py+c)/(a*a+b*b)*b;\n}\n                                      \nint main(){\n    double x0,y0,x1,y1,x2,y2;\n    cin>>x0>>y0>>x1>>y1;\n    int q;\n    cin>>q;\n    for(int i=0; i<q; i++){\n        cin>>x2>>y2;\n        \n        double a = angle_two_line_0_359(x1, y1, x0, y0, x2, y2);\n        //cout<<a/M_PI * 180.0<<endl;\n        \n        if(a==M_PI)cout<<\"ONLINE_BACK\"<<endl;\n        else if(0<a&&a<M_PI)cout<<\"COUNTER_CLOCKWISE\"<<endl;\n        else if(M_PI<a&&a<M_PI*2)cout<<\"CLOCKWISE\"<<endl;\n        else if(a==0||a==2*M_PI){\n            double l1 = distance_between_the_two_pointss(x1, y1, x0, y0);\n            double l2 = distance_between_the_two_pointss(x2, y2, x0, y0);\n            if(l1<l2)cout<<\"ONLINE_FRONT\"<<endl;\n            else cout<<\"ON_SEGMENT\"<<endl;\n        }\n        \n        \n        \n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <array>\n#include <assert.h>\n#include <bitset>\n#include <chrono>\n#include <cmath>\n#include <complex>\n#include <cstring>\n#include <functional>\n#include <fstream>\n#include <iomanip>\n#include <iostream>\n#include <istream>\n\n#include <map>\n#include <math.h>\n#include <numeric>\n#include <ostream>\n#include <queue>\n#include <set>\n#include <stack>\n#include <string>\n#include <unordered_map>\n#include <unordered_set>\n#include <vector>\n\nnamespace asl\n{\n    \n    template <typename numeric_type>\n    class point\n    {\n    public:\n        numeric_type x, y;\n\n        point(numeric_type x = 0, numeric_type y = 0) : x(x), y(y) {}\n\n        point<numeric_type> &operator-=(const point<numeric_type> &ri)\n        {\n            x -= ri.x;\n            y -= ri.y;\n            return *this;\n        }\n\n    };\n\n    template <typename numeric_type>\n    std::istream &operator>>(std::istream &is, point<numeric_type> &p)\n    {\n        return is >> p.x >> p.y;\n    }\n\n    template <typename numeric_type>\n    class line\n    {\n    public:\n        point<numeric_type> p, q;\n\n    };\n\n    template <typename numeric_type>\n    std::istream &operator>>(std::istream &is, line<numeric_type> &l)\n    {\n        return is >> l.p >> l.q;\n    }\n\n    template <typename numeric_type>\n    class segment : public line<numeric_type>\n    {\n    };\n\n    template <typename numeric_type>\n    numeric_type cross(point<numeric_type> a, point<numeric_type> b)\n    {\n        return a.x * b.y - a.y * b.x;\n    }\n\n    template <typename numeric_type>\n    numeric_type dot(point<numeric_type> a, point<numeric_type> b)\n    {\n        return a.x * b.x + a.y * b.y;\n    }\n\n    enum PointOrder\n    {\n        CounterClockwise,\n        Clockwise,\n        AlignedFirst,\n        AlignedLast,\n        AlignedIn, \n    };\n\n    template <typename numeric_type>\n    PointOrder ccw(point<numeric_type> a, point<numeric_type> b, point<numeric_type> c)\n    {\n        b -= a;\n        c -= a;\n        if (cross(b, c) > 0)\n            return PointOrder::CounterClockwise;\n        else if (cross(b, c) < 0)\n            return PointOrder::Clockwise;\n        else if (dot(b, c) < 0)\n            return PointOrder::AlignedFirst; \n        else if (dot(b, b) < dot(c, c))\n            return PointOrder::AlignedLast; \n        else\n            return PointOrder::AlignedIn; \n    }\n\n} \n\n#include <stdint.h>\n\n#include <experimental/optional>\n\n#include <random>\n\n#define endl '\\n'\n\nusing namespace asl;\nusing namespace std;\n\nint main()\n{\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n\n    segment<double> l;\n\n    cin >> l;\n\n    int n;\n    cin >> n;\n\n    cout.precision(10);\n    cout << fixed;\n\n    while (n--)\n    {\n        point<double> p;\n        cin >> p;\n\n        switch (ccw(l.p, l.q, p))\n        {\n        case PointOrder::CounterClockwise:\n            cout << \"COUNTER_CLOCKWISE\" << endl;\n            break;\n        case PointOrder::Clockwise:\n            cout << \"CLOCKWISE\" << endl;\n            break;\n        case PointOrder::AlignedFirst:\n            cout << \"ONLINE_BACK\" << endl;\n            break;\n        case PointOrder::AlignedLast:\n            cout << \"ONLINE_FRONT\" << endl;\n            break;\n        case PointOrder::AlignedIn:\n            cout << \"ON_SEGMENT\" << endl;\n            break;\n        }\n    }\n\n    return 0;\n}\n\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define EPS 1e-10\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n#define rep(i,n) for(int i=0;i<n;++i)\ntypedef long long ll;\nusing namespace std;\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nstruct Point {\n    double x,y;\n    Point(){}\n    Point(double x,double y): x(x),y(y){}\n    Point operator+(Point p) {return Point(x+p.x,y+p.y);}\n    Point operator-(Point p) {return Point{x-p.x,y-p.y};}\n    Point operator*(double k) {return Point{x*k,y*k};}\n    Point operator/(double k) {return Point{x/k,y/k};}\n    double norm(){return x*x+y*y;}\n    double abs(){sqrt(norm());}\n    bool operator == (const Point &p) const {return equals(x,p.x)&&equals(y,p.y);}\n};\n\ntypedef Point P;\n\nstruct Segment {\n    P p1,p2;\n    Segment(){}\n    Segment(P p1, P p2):p1(p1),p2(p2){}\n};\n\ndouble dot(P a, P b) {return a.x*b.x+a.y*b.y;}\ndouble cross(P a, P b) {return a.x*b.y-a.y*b.x;}\n\nint ccw(P p0, P p1, P p2) {\n    P a = p1-p0; P b = p2-p0;\n    if (cross(a,b) > EPS) return COUNTER_CLOCKWISE;\n    if (cross(a,b) < -EPS) return CLOCKWISE;\n    if (dot(a,b) < -EPS) return ONLINE_BACK;\n    if (a.norm() < b.norm()) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\nint main() {\n    map<int, string> mp;\n    mp[COUNTER_CLOCKWISE] = \"COUNTER_CLOCKWISE\";\n    mp[CLOCKWISE] = \"CLOCKWISE\";\n    mp[ONLINE_BACK] = \"ONLINE_BACK\";\n    mp[ONLINE_FRONT] = \"ONLINE_FRONT\";\n    mp[ON_SEGMENT] = \"ON_SEGMENT\";\n    double x0,y0,x1,y1;\n    cin>>x0>>y0>>x1>>y1;\n    P p0(x0,y0), p1(x1,y1);\n    int q; cin>>q;\n    rep(i,q) {\n        double x2,y2;\n        cin>>x2>>y2;\n        P p2(x2,y2);\n        cout << mp[ccw(p0,p1,p2)] << endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <vector>\n#include <string>\n#include <utility>\n#include <cmath>\n#include <cstdio>\n#define rep(i,n) for(int i = 0; i < n; ++i)\n#define rep1(i,n) for(int i = 1; i <= n; ++i)\n#define F first\n#define S second\nusing namespace std;\ntemplate<class T>bool chmax(T &a, const T &b) { if(a < b){ a = b; return 1; } return 0; }\ntemplate<class T>bool chmin(T &a, const T &b) { if(a > b){ a = b; return 1; } return 0; }\nusing ll = long long;\nusing pi = pair<int,int>;\nconst double EPS = 1e-10;\nstruct Vec2 {\n  double x;\n  double y;\n\n  Vec2() : x(0.0),y(0.0){} \n  Vec2(double _x,double _y) :x(_x),y(_y){}  \n  \n  Vec2 operator+(const Vec2& other) const { return { x + other.x , y + other.y }; }\n  Vec2 operator-(const Vec2& other) const { return { x - other.x , y - other.y }; }\n\n  double dot(const Vec2& other) const { return x * other.x + y * other.y; }\n  double cross(const Vec2& other) const { return x * other.y - y * other.x; }\n  double length() const { return sqrt(x * x + y * y); }\n};\n\n// cosθを返す。A とB のなす角θ\ndouble Cos(const Vec2 A, const Vec2 B) {\n  return A.dot(B) / (A.length()*B.length());\n}\n\ndouble Sin(const Vec2 A, const Vec2 B) {\n  return A.cross(B) / (A.length()*B.length());\n}\n\nint main()\n{\n  double p0x,p0y,p1x,p1y; cin >> p0x >> p0y >> p1x >> p1y;\n  int q; cin >> q;\n  vector<double> p2x(q),p2y(q);\n  rep(i,q) cin >> p2x[i] >> p2y[i];\n  Vec2 A(p1x - p0x, p1y - p0y);\n  \n  rep(i,q) {\n    Vec2 B(p2x[i] - p0x, p2y[i] - p0y);\n    if(abs(B.length()) < EPS) {\n      cout << \"ON_SEGMENT\" << \"\\n\";\n      continue;\n    }\n    double sine = Sin(A, B);\n    if(abs(sine) < EPS) {\n      double cosi = Cos(A, B);\n      if(cosi < 0) {\n\tcout << \"ONLINE_BACK\" << \"\\n\";\n      }\n      else {\n\tif(A.length() + EPS < B.length()) cout << \"ONLINE_FRONT\" << \"\\n\";\n\telse cout << \"ON_SEGMENT\" << \"\\n\";\n      }\n    }\n    else if(sine > 0) {\n      cout << \"COUNTER_CLOCKWISE\" << \"\\n\";\n    }\n    else if(sine < 0) {\n      cout << \"CLOCKWISE\" << \"\\n\";\n    }\n  }\n  \n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cmath>\n#include<iomanip>\nusing namespace std;\nconst double EPS=1e-10;\nstruct point{\n\tdouble x,y;\n\tpoint(const point&a):x(a.x),y(a.y){}\n\tpoint(const double&x=0,const double&y=0):x(x),y(y){}\n\tpoint operator+(const point&p)const{return point(x+p.x,y+p.y);}\n\tpoint operator-(const point&p)const{return point(x-p.x,y-p.y);}\n\tpoint operator*(const double&k)const{return point(x*k,y*k);}\n\tpoint operator/(const double&k)const{return point(x/k,y/k);}\n\tdouble norm(){return x*x+y*y;}\n\tdouble abs(){return sqrt(norm());}\n\tvoid operator=(const point&a){\n\t\tx=a.x,y=a.y;\n\t}\n\tbool operator<(const point&p)const{\n\t\treturn x!=p.x?x<p.x:y<p.y;\n\t}\n\tbool operator==(const point&p)const{\n\t\treturn fabs(x-p.x)<EPS&&fabs(y-p.y)<EPS;\n\t}\n\tfriend double dot(const point&a,const point&b){\n\t\treturn a.x*b.x+a.y*b.y;\n\t}\n\tfriend double cross(const point&a,const point&b){\n\t\treturn a.x*b.y-a.y*b.x;\n\t}\n};\ntypedef point vector;\nstruct segment{\n\tpoint p1,p2;\n\tsegment(const double&a,const double&b,const double&c,const double&d){\n\t\tp1.x=a,p1.y=b,p2.x=c,p2.y=d;\n\t}\n\tsegment(const point&a, const point&b):p1(a),p2(b){}\n\tpoint get_vec()const{return point(p2.x-p1.x,p2.y-p1.y);}\n};\npoint project(const segment&s,const point&p){\n\tvector base=s.get_vec();\n\tdouble r=dot(p-s.p1,base)/base.norm();\n\treturn s.p1+base*r;\n}\npoint reflect(const segment&s,const point&p){\n\treturn p+(project(s,p)-p)*2.0;\n}\nint ccw(const point&a,const point&b,const point&c){\n\tvector t1=b-a;\n\tvector t2=c-a;\n\tif(cross(t1,t2)>EPS) return 1;\n\tif(cross(t1,t2)<-EPS) return -1;\n\tif(dot(t1,t2)<-EPS) return -2;\n\tif(t1.norm()<t2.norm()) return 2;\n\treturn 0;\n}\nint main(){\n\tdouble a,b,c,d;\n\tcin>>a>>b>>c>>d;\n\tpoint p1(a,b),p2(c,d);\n\tint q;\n\tcin>>q;\n\tfor(int i=0;i<q;i++){\n\t\tcin>>a>>b;\n\t\tint t=ccw(p1,p2,(point(a,b)));\n\t\tif(t==1) cout<<\"COUNTER_CLOCKWISE\\n\";\n\t\telse if(t==-1) cout<<\"CLOCKWISE\\n\";\n\t\telse if(t==-2) cout<<\"ONLINE_BACK\\n\";\n\t\telse if(t==2) cout<<\"ONLINE_FRONT\\n\";\n\t\telse cout<<\"ON_SEGMENT\\n\";\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "//Counter-Clockwise\n#include <iostream>\n#include <math.h>\n#include <iomanip>\n\nusing namespace std;\n\nstatic const double ESP = 1e-10;\n\nbool equals(double a, double b) { return fabs(a - b) < ESP; }\n\nclass Point {\npublic:\n    double x, y;\n\n    explicit Point(double x = 0, double y = 0): x(x), y(y) {}\n\n    Point operator + (const Point &p) const { return Point(x + p.x, y + p.y); }\n    Point operator - (const Point &p) const { return Point(x - p.x, y - p.y); }\n    Point operator * (double a) { return Point(a * x, a * y); }\n    Point operator / (double a) { return Point(a / x, a / y); }\n\n    double norm() { return x * x + y * y; }\n    double abs() { return sqrt(norm()); }\n\n    bool operator < (const Point &p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point &p) const {\n        return fabs(x - p.x) < ESP && fabs(y - p.y) < ESP;\n    }\n};\n\ntypedef Point Vector;\n\nstruct Segment {\n    Point p1, p2;\n    Segment(Point p1, Point p2): p1(p1), p2(p2) {}\n};\n\ndouble dot(Vector a, Vector b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n    return a.x * b.y - a.y * b.x;\n}\n\nbool isParallel(Vector v1, Vector v2) {\n    return equals(cross(v1, v2), 0.0);\n}\n\nbool isOrthogonal(Vector v1, Vector v2) {\n    return equals(dot(v1, v2), 0.0);\n}\n\nPoint project(Segment s, Point p) {\n    Vector base = s.p2 - s.p1;\n    return s.p1 + (base * (dot(base, p - s.p1) / base.norm()));\n}\n\nPoint reflect(Segment s, Point p) {\n    return p + (project(s, p) - p) * 2;\n}\n\nenum {\n    COUNTER_CLOCKWISE,\n    CLOCKWISE,\n    ONLINE_BACK,\n    ONLINE_FRONT,\n    ON_SEGMENT\n};\n\nint ccw(Point p0, Point p1, Point p2) {\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if (cross(a, b) > ESP) return COUNTER_CLOCKWISE;\n    else if (cross(a, b) < -ESP) return CLOCKWISE;\n    else if (dot(a, b) < -ESP) return ONLINE_BACK;\n    else if (a.norm() < b.norm()) return ONLINE_FRONT;\n    else return ON_SEGMENT;\n}\n\nint main() {\n    int q;\n    double x0, y0, x1, y1, x2, y2;\n    cin >> x0 >> y0 >> x1 >> y1 >> q;\n    Point p0 = Point(x0, y0), p1 = Point(x1, y2);\n    for(int i = 0; i < q; i++) {\n        cin >> x2 >> y2;\n        Point p2 = Point(x2, y2);\n        switch(ccw(p0, p1, p2)) {\n            case COUNTER_CLOCKWISE:\n                cout << \"COUNTER_CLOCKWISE\" << endl;\n                break;\n            case CLOCKWISE:\n                cout << \"CLOCKWISE\" << endl;\n                break;\n            case ONLINE_BACK:\n                cout << \"ONLINE_BACK\" << endl;\n                break;\n            case ONLINE_FRONT:\n                cout << \"ONLINE_FRONT\" << endl;\n                break;\n            case ON_SEGMENT:\n                cout << \"ON_SEGMENT\" << endl;\n                break;\n            default:\n                break;\n        }\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ndouble xp1,yp1,xp2,yp2,x,y,xp,yp,l1,r1,l2,r2,sum;\nint n;\nint main(){\n\tscanf(\"%lf%lf%lf%lf\",&xp1,&yp1,&xp2,&yp2);\n\tl1=xp2-xp1;\n\tr1=yp2-yp1;\n\tscanf(\"%d\",&n);\n\tfor(int i=1; i<=n; i++){\n\t\tscanf(\"%lf%lf\",&x,&y);\n\t\tl2=x-xp1;\n\t\tr2=y-yp1;\n\t\tsum=l1*r2-l2*r1;\n\t\tif(sum>0)printf(\"COUNTER_CLOCKWISE\\n\");\n\t\telse if(sum<0)printf(\"CLOCKWISE\\n\");\n\t\t     else{\n\t\t     \tsum=l1*l2+r1*r2;\n\t\t     \tif(sum<0)printf(\"ONLINE_BACK\\n\");\n\t\t     \telse{\n\t\t\t\t\tif(sqrt((l1*l1)+(r1*r1))<\n\t\t\t\t\t   sqrt((l2*l2)+(r2*r2)))printf(\"ONLINE_FRONT\\n\");\n\t\t\t\t\telse printf(\"ON_SEGMENT\\n\");\n\t\t\t\t}\n\t\t\t }\n\t}\n} \n"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n\ntemplate <class T>\nT abs(T x) {\n    return (x > 0) ? x : -x;\n}\n\nint main(int argc, const char * argv[]) {\n    long xp0, xp1, xp2, yp0, yp1, yp2;\n    int q;\n    \n    scanf(\"%ld %ld %ld %ld\", &xp0, &yp0, &xp1, &yp1);\n    scanf(\"%d\", &q);\n    \n    long v1x = xp1 - xp0;\n    long v1y = yp1 - yp0;\n    \n    for (int i = 0; i < q; ++i) {\n        scanf(\"%ld %ld\", &xp2, &yp2);\n        long v2x = xp2 - xp0;\n        long v2y = yp2 - yp0;\n        \n        long crossProd = v1x * v2y - v1y * v2x;\n        \n        if (crossProd > 0) {\n            puts(\"COUNTER_CLOCKWISE\");\n        } else if (crossProd < 0) {\n            puts(\"CLOCKWISE\");\n        } else if (v2x * v1x < 0) {\n            puts(\"ONLINE_BACK\");\n        } else if (v2x > -abs(v1x) && v2x < abs(v1x)){\n            puts(\"ON_SEGMENT\");\n        } else {\n            puts(\"ONLINE_FRONT\");\n        }\n    }\n    \n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include <cstdlib>\n#include <stack>\n#include <queue>\n#include <list>\n#include <vector>\n#include <sstream>\n\nusing namespace std;\n\nclass c_main\n{\nprivate:\n    \npublic:\n    c_main();\n    void f_input();\n};\n\nc_main::c_main()\n{\n\n}\n\nvoid c_main::f_input()\n{\n    double xp1,yp1,xp2,yp2;\n    int q;\n    int i;\n    double x[1000];\n    double y[1000];\n    double a;\n    double b;\n    double x_a;\n    double y_a;\n    double a_a;\n    double b_a;\n    int pt1;\n\n    cin >> xp1 >> yp1 >> xp2 >> yp2;\n    \n    if (xp1 == xp2){\n        x_a = xp1;\n        y_a = 0;\n        pt1 = 0;\n    }else if (yp1 == yp2){\n        x_a = 0;\n        y_a = yp1; \n        pt1 = 1;\n    }else{\n        \n        a_a = (yp2-yp1)/(xp2-xp1);\n      \n        a = -1 * (1/a_a);\n       \n        b_a = -1 * a_a * xp1+ yp1;\n        pt1 = 2;\n    }\n    \n    cin >> q;\n    \n    for ( i = 0; i < q; ++i){\n        cin >> x[i] >> y[i];\n        if (pt1 == 0){\n            if(yp1 >= yp2){\n                if(x[i] == x_a){\n                    if(y[i] > yp1){\n                        cout << \"ONLINE_BACK\" << endl;\n                    }else if(y[i] < yp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(yp2 <= y[i] && y[i] <= yp1){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(x[i] < x_a){\n                    cout << \"CLOCKWISE\" << endl;\n                    \n                }else if(x[i] > x_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n     \n                }\n            }else{\n                if(x[i] == x_a){\n                    if(y[i] < yp1){\n                        cout << \"ONLINE_BACK\" << endl;\n                    }else if(y[i] > yp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(yp1 <= y[i] && y[i] <= yp2){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(x[i] < x_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n                    \n                    \n                    \n                }else if(x[i] > x_a){\n                    cout << \"CLOCKWISE\" << endl;\n                }\n            }\n            //printf(\"%10.10f %10.10f\\n\", x_a,y[i]);\n            \n        }else if(pt1 == 1){\n            if(xp1 >= xp2){\n                if(y[i] == y_a){\n                    if(x[i] > xp1){\n                        cout << \"ONLINE_BACK\" << endl;\n                    }else if(x[i] < xp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(xp2 <= x[i] && x[i] <= xp1){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(y[i] < y_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n                }else if(y[i] > y_a){\n                    cout << \"CLOCKWISE\" << endl;\n                }\n            }else{\n                if(y[i] == y_a){\n                    if(x[i] < xp1){\n                        cout << \"ONLINE_BACK\" << endl;\n                    }else if(x[i] > xp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(xp1 <= x[i] && x[i] <= xp2){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(y[i] < y_a){\n                    cout << \"CLOCKWISE\" << endl;\n                }else if(y[i] > y_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n                }\n            }\n            //printf(\"%10.10f %10.10f\\n\", x[i],y_a);\n        }else if(pt1 == 2){\n            b = -1 * a * x[i] + y[i];\n            x_a = (b - b_a)/(a_a - a);\n            y_a = a_a * x_a + b_a;\n            if(xp1 >= xp2){\n                if(y[i] == y_a){\n                    if(x[i] > xp1){\n                        cout << \"ONLINE_BACK\" << endl;\n                    }else if(x[i] < xp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(xp2 <= x[i] && x[i] <= xp1){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(y[i] < y_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n                }else if(y[i] > y_a){\n                    \n                    cout << \"CLOCKWISE\" << endl;\n                }\n            }else{\n                if(y[i] == y_a){\n                    if(x[i] < xp1){\n                        cout << \"ONLINE_BACK\" << endl;\n                    }else if(x[i] > xp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(xp1 <= x[i] && x[i] <= xp2){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(y[i] < y_a){\n                    cout << \"CLOCKWISE\" << endl;\n                }else if(y[i] > y_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n                }\n            }\n            //printf(\"%10.10f %10.10f\\n\", x_a,y_a);\n        }\n    }\n}\n\nint main(){\n    c_main main01;\n    main01.f_input();\n    \n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define _USE_MATH_DEFINES\nusing namespace std;\n\nint main() {\n\tcin.tie(0); ios::sync_with_stdio(false);\n\tint x0, y0, x1, y1; cin >> x0 >> y0 >> x1 >> y1;\n\tint q; cin >> q;\n\tlong double theta1, theta2;\n\ttheta1 = atan2(y1 - y0, x1 - x0);\n\twhile (q--) {\n\t\tint x2, y2; cin >> x2 >> y2;\n\t\tif (x2 == 0 && y2 == 0) { cout << \"ON_SEGMENT\" << endl; continue; }\n\t\ttheta2 = atan2(y2 - y0, x2 - x0);\n\t\tlong double rev_theta = theta1 >= 0 ? theta1 - M_PI : theta1 + M_PI;\n\t\t//cout << fixed << setprecision(15) << \"theta1 = \" << theta1 << endl << \"theta2 = \" << theta2 << endl << \"rev_theta = \" << rev_theta << endl;\n\t\tif (theta2 - theta1 == M_PI || theta2 - theta1 == -M_PI) { cout << \"ONLINE_BACK\" << endl; continue; }\n\t\tif (theta1 == theta2) {\n\t\t\tlong double dist1 = hypot(x1 - x0, y1 - y0), dist2 = hypot(x2 - x0, y2 - y0);\n\t\t\tif (dist2 > dist1) { cout << \"ONLINE_FRONT\" << endl; continue; }\n\t\t\telse { cout << \"ON_SEGMENT\" << endl; continue; }\n\t\t}\n\t\tif (theta1 >= 0) {\n\t\t\tif (theta2 > theta1 || theta2 < rev_theta) { cout << \"COUNTER_CLOCKWISE\" << endl; continue; }\n\t\t\tif (theta2 < theta1 && theta2 > rev_theta) { cout << \"CLOCKWISE\" << endl; continue; }\n\t\t}\n\t\telse {\n\t\t\tif (theta2 > theta1 && theta2 < rev_theta) { cout << \"COUNTER_CLOCKWISE\" << endl; continue; }\n\t\t\tif (theta2 < theta1 || theta2 > rev_theta) { cout << \"CLOCKWISE\" << endl; continue; }\n\t\t}\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define int long long   // <-----!!!!!!!!!!!!!!!!!!!\n\n#define rep(i,n) for (int i=0;i<(n);i++)\n#define rep2(i,a,b) for (int i=(a);i<(b);i++)\n#define rrep(i,n) for (int i=(n)-1;i>=0;i--)\n#define rrep2(i,a,b) for (int i=(b)-1;i>=(a);i--)\n#define all(a) (a).begin(),(a).end()\n\ntypedef long long ll;\ntypedef pair<int, int> Pii;\ntypedef tuple<int, int, int> TUPLE;\ntypedef vector<int> V;\ntypedef vector<V> VV;\ntypedef vector<VV> VVV;\n\ntypedef complex<double> P;\n\ndouble cross(P a, P b) {\n    return imag(conj(a) * b);\n}\n\ndouble dot(P a, P b) {\n    return real(conj(a) * b);\n}\n\n// 0: counter-clockwise\n// 1: clockwise\n// 4: on_segment\n// 2: online_back\n// 3: online_front\nint ccw(P p0, P p1, P p2) {\n    if (cross(p1 - p0, p2 - p0) > 0) return 0;\n    if (cross(p1 - p0, p2 - p0) < 0) return 1;\n    double d01 = abs(p0 - p1);\n    double d12 = abs(p1 - p2);\n    double d20 = abs(p2 - p0);\n    if (d12 + d20 == d01) return 4;\n    if (d01 + d20 == d12) return 2;\n    return 3;\n}\n\nsigned main() {\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(0);\n\n    double x0, y0, x1, y1;\n    cin >> x0 >> y0 >> x1 >> y1;\n    P p0(x0, y0), p1(x1, y1);\n    int q;\n    cin >> q;\n    while (q--) {\n        double x2, y2;\n        cin >> x2 >> y2;\n        P p2(x2, y2);\n        switch (ccw(p0, p1, p2)) {\n            case 0: cout << \"COUNTER_CLOCKWISE\" << endl; break;\n            case 1: cout << \"CLOCKWISE\" << endl; break;\n            case 2: cout << \"ONLINE_BACK\" << endl; break;\n            case 3: cout << \"ONLINE_FRONT\" << endl; break;\n            case 4: cout << \"ON_SEGMENT\" << endl; break;\n        }\n    }\n\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <vector>\n#include <map>\n#include <set>\n#include <deque>\n#include <stack>\n#include <queue>\n#include <algorithm>\n#include <numeric>\n#include <cstdio>\n#include <cmath>\n#include <cstdlib>\n#include <cctype>\n#include <string>\n#include <cstring>\n#include <ctime>\n#include <cassert>\n#include <climits>\n\nusing namespace std;\n\ntypedef long long lint;\n\n//定数\nconst double EPS = 1e-10;\nconst int dx[] = {-1, 0, 1, 0};\nconst int dy[] = {0, 1, 0, -1};\nconst int INF = 1001001001;\nconst lint INFLL = 1001001001001001001ll;\n\n//初期化関連\n#define zclear(a) memset((a), 0 ,sizeof(a))\n#define mclear(a) memset((a), -1, sizeof(a))\n\n//デバッグ出力\n#define show(x)  cerr << #x << \" = \" << (x) << endl;\n#define debug(x) cerr << #x << \" = \" << (x) << \" (L\" << __LINE__ << \")\" << \" \" << __FILE__ << endl;\n\nbool eq(double a, double b) //a == b\n{\n    return (fabs(a - b) <= EPS);\n}\n\nbool neq(double a, double b) //a != b\n{\n    return (!eq(a, b));\n}\n  \nbool lt(double a, double b) //a < b\n{\n    return (a - b < -EPS);\n}\n  \nbool leq(double a, double b) //a <= b\n{\n    return (lt(a, b) || eq(a, b));\n}\n  \nbool gt(double a, double b) //a > b\n{\n    return (a - b > +EPS);\n}\n  \nbool geq(double a, double b) //a >= b\n{\n    return (gt(a, b) || eq(a, b));\n}\n\nclass Point{\npublic:\n\tdouble x, y;\n\tPoint(double x = 0, double y = 0): x(x), y(y){}\n\tPoint operator + (Point p){return Point(x + p.x, y + p.y);}\n\tPoint operator - (Point p){return Point(x - p.x, y - p.y);}\n\tPoint operator * (double a){return Point(x * a, y * a);}\n\tPoint operator / (double a){return Point(x / a, y / a);}\n\tPoint operator * (const Point &a){\n\t\treturn Point(x * a.x - y * a.y, x * a.y + y * a.x);\n\t}\n\tbool operator < (const Point &p) const {\n\t\treturn (x != p.x ? x < p.x : y < p.y);\n\t}\n\tbool operator == (const Point &p) const {\n\t\treturn (fabs(x - p.x) < EPS && fabs(y - p.y) < EPS);\n\t}\n};\n\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\ndouble norm(Vector a){return (a.x * a.x + a.y * a.y);}\ndouble abs(Vector a){return (sqrt(norm(a)));}\ndouble abs(Vector a, Vector b){return (sqrt(norm(a - b)));}\ndouble dot(Vector a, Vector b){return (a.x * b.x + a.y * b.y);}\ndouble cross(Vector a, Vector b){return (a.x * b.y - a.y * b.x);}\ndouble atan(Vector a){return atan2(a.y, a.x);}\nbool sortX(Point a, Point b){return (a.x != b.x ? lt(a.x, b.x) : lt(a.y, b.y));}\nbool sortY(Point a, Point b){return (a.y != b.y ? lt(a.y, b.y) : lt(a.x, b.x));}\nPoint baseP;\nbool sortT(Point a, Point b){return (gt(cross(a - baseP, b - baseP), 0));}\n\nint ccw(Point p0, Point p1, Point p2)\n{\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (cross(a, b) > EPS) return (+1); //p0, p1, p2 が反時計周り\n\tif (cross(a, b) < -EPS) return (-1);//p0, p1, p2 が時計回り\n\tif (dot(a, b) < -EPS) return (+2); //p2--p0--p1 の順で一直線上\n\tif (norm(a) < norm(b)) return (-2); //p0--p1--p2 の順で一直線上\n\treturn (0); //p0--p2--p1 の順で一直線上\n}\n\nPolygon normalize(Polygon &v)\n{\n    int pt = 0;\n    for (int i = 1; i < v.size(); i++){\n        if (v[pt].y > v[i].y || (v[pt].y == v[i].y && v[pt].x > v[i].x)){\n            pt = i;\n        }\n    }\n    swap(v[pt], v[0]);\n    baseP = v[0];\n    sort(v.begin() + 1, v.end(), sortT);\n    return (v);\n}\n\nPolygon conhel(Polygon& ps)\n{\n    sort(ps.begin(), ps.end());\n    int k = 0, n = (int)ps.size();\n    Polygon qs(n * 2);\n      \n    for (int i = 0; i < n; i++){\n      while (k > 1 && cross(qs[k - 1] - qs[k - 2], ps[i] - qs[k - 1]) < EPS) k--;\n      qs[k++] = ps[i];\n    }\n  \n    for (int i = n - 2, t = k; i >= 0; i--){\n      while (k > t && cross(qs[k - 1] - qs[k - 2], ps[i] - qs[k - 1]) < EPS) k--;\n      qs[k++] = ps[i];\n    }\n  \n    qs.resize(k - 1);\n    return (qs);\n}\n\ndouble getArea(Polygon t){\n    double ans = 0.0;\n\tt = normalize(t);\n    for (unsigned int i = 0; i < t.size(); i++)\n        ans += cross(t[i] , t[(i + 1) % t.size()]);\n    return (fabs(ans) / 2);\n}\n\nbool isIntersectLL(Point p1, Point p2, Point p3, Point p4)\n{// 同一直線の場合は交差していると判定する.\n\treturn (abs(cross(p2 - p1, p4 - p3)) > EPS || // 傾きが異なる\n\t\tabs(cross(p2 - p1, p4 - p3)) < EPS); // 同じ直線である\n}\nbool isIntersectLS(Point p1, Point p2, Point p3, Point p4)\n{// 同一直線上にある場合も交差と判定\n\treturn (cross(p2 - p1, p3 - p1) * cross(p2 - p1, p4 - p1) < EPS);\n}\nbool isIntersectLP(Point p1, Point p2, Point p)\n{\n\treturn (neq(abs(ccw(p1, p2, p)), 1));\n}\nbool isIntersectSS(Point p1, Point p2, Point p3, Point p4)\n{\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n             ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\nbool isIntersectSP(Point p1, Point p2, Point p)\n{\n\treturn (eq(ccw(p1, p2, p), 0));\n}\nbool isInsideCP(Point c, double r, Point p)\n{\n\treturn (leq(abs(c - p), r));\n}\nbool isInsideCC(Point c1, double r1, Point c2, double r2)\n{\n\treturn (leq(abs(c1 - c2), r1 + r2) && geq(abs(c1 - c2), abs(r1 - r2)));\n}\nbool isInsidePolyP(Polygon gon, Point p)\n{\n    for (int i = 0; i < gon.size(); i++){\n        if (ccw(gon[i], gon[(i + 1) % gon.size()], p) == -1) return (false);\n    }\n    return (true);\n}\n\nPoint projection(Point p1, Point p2, Point p3) //直線p1p2 上への写像\n{\n\tdouble t = dot(p3 - p1, p2 - p1) / norm(p2 - p1);\n\treturn (p1 + (p2 - p1) * t);\n}\nPoint reflection(Point p1, Point p2, Point p3) //直線p1p2 上への反射\n{\n\treturn (p3 + (projection(p1, p2, p3) - p3) * 2);\n}\ndouble distanceLP(Point p1, Point p2, Point p)\n{\n\treturn (abs(p - projection(p1, p2, p)));\n}\ndouble distanceLL(Point l1, Point l2, Point m1, Point m2)\n{\n\treturn (isIntersectLL(l1, l2, m1, m2) ? 0 : distanceLP(l1, l2, m1));\n}\ndouble distanceLS(Point l1, Point l2, Point s1, Point s2)\n{\n    if (isIntersectLS(l1, l2, s1, s2)) return (0);\n\treturn (min(distanceLP(l1, l2, s1), distanceLP(l1, l2, s2)));\n}\ndouble distanceSP(Point s1, Point s2, Point p)\n{\n\tPoint r = projection(s1, s2, p);\n\tif (isIntersectSP(s1, s2, r)) return (abs(r - p));\n\treturn (min(abs(s1 - p), abs(s2 - p)));\n}\ndouble distanceSS(Point s1, Point s2, Point t1, Point t2){\n\tif (isIntersectSS(s1, s2, t1, t2)) return (0);\n\treturn (min(min(distanceSP(s1, s2, t1), distanceSP(s1, s2, t2)),\n\t\t\tmin(distanceSP(t1, t2, s1), distanceSP(t1, t2, s2))));\n}\nPoint interPointLL(Point a1, Point a2, Point b1, Point b2)\n{\n\tdouble d = cross(a2 - a1, b2 - b1);\n\tif (abs(d) < EPS) throw \"Segment is Paralell!\";\n\tPoint a = a2 - a1, b = b2 - b1;\n    double t = cross(b, b1 - a1) / cross(b, a);\n    return (a1 + a * t);\n}\nvector<Point> interPointCC(Point c1, double r1, Point c2, double r2)\n{\n\tvector<Point> res;\n\tif (abs(c1 - c2) < EPS) return (vector<Point>()); // 交点が絶対にない\n\tdouble d = abs(c1 - c2);\n\tdouble rc = (d * d + r1 * r1 - r2 * r2) / (2 * d);\n\tdouble rs = sqrt(r1 * r1 - rc * rc);\n\tPoint diff = (c2 - c1) / d;\n\tres.push_back(Point(c1 + diff * Point(rc, rs)));\n\tres.push_back(Point(c1 + diff * Point(rc, -rs)));\n\treturn (res);\n}\nvector<Point> crosspointCL(Point a, double ra, Point b1, Point b2)\n{\n\tvector<Point> res;\n\tdouble dist = distanceLP(b1, b2, a);\n\tif (leq(dist, ra)){\n\t\tPoint s = projection(b1, b2, a);\n\t\tdist = sqrt(ra * ra - dist * dist);\n\t\tPoint t = (b2 - b1) / abs(b2 - b1);\n\t\tres.push_back(s + t * dist);\n\t\tres.push_back(s - t * dist);\n\t}\n\treturn (res);\n}\n\nPoint unitVector(Vector t)\n{\n    double u = abs(t);\n    return (Point(t.x / u , t.y / u));\n}\n\nPoint normalVector(Point p, Point a, Point b)\n{\n    Point v = unitVector(b - a);\n    v = cross(v, p - a) > 0 ? Point(v.y, -v.x) : Point(-v.y, v.x);\n    return v * distanceLP(p, a, b);\n}\n  \ndouble getCos(Vector a, Vector b)\n{\n    return (dot(a, b) / (abs(a) * abs(b)));\n}\n  \ndouble getSin(Vector a, Vector b)\n{\n    double t = getCos(a, b);\n    return (sqrt(1.0 - t * t));\n}\n  \ndouble getArg(Vector v)\n{\n    return (atan2(v.y, v.x));\n}\n\nPoint rotate(Point t, Point p, double r)\n{\n    double ta = cos(r) * (t.x - p.x) - sin(r) * (t.y - p.y) + p.x;\n    double tb = sin(r) * (t.x - p.x) + cos(r) * (t.y - p.y) + p.y;\n    return (Point(ta, tb));\n}\n\nint main()\n{\n\tint n;\n\tPoint p0, p1;\n\t\n\tscanf(\"%lf %lf %lf %lf\", &p0.x, &p0.y, &p1.x, &p1.y);\n\tscanf(\"%d\", &n);\n\t\n\tfor (int i = 0; i < n; i++){\n\t\tPoint p2;\n\t\tscanf(\"%lf %lf\", &p2.x, &p2.y);\n\t\tint J = ccw(p0, p1, p2);\n\t\tif (J == 1) printf(\"COUNTER_CLOCKWISE\\n\");\n\t\telse if (J == -1) printf(\"CLOCKWISE\\n\");\n\t\telse if (J == 2) printf(\"ONLINE_BACK\\n\");\n\t\telse if (J == -2) printf(\"ONLINE_FRONT\\n\");\n\t\telse printf(\"ON_SEGMENT\\n\");\n\t}\n\t\n\treturn (0);\n}"
  },
  {
    "language": "C++",
    "code": "//include\n//------------------------------------------\n#include <vector>\n#include <list>\n#include <map>\n#include <climits>\n#include <set>\n#include <deque>\n#include <stack>\n#include <bitset>\n#include <algorithm>\n#include <functional>\n#include <numeric>\n#include <utility>\n#include <sstream>\n#include <iostream>\n#include <iomanip>\n#include <cstdio>\n#include <cmath>\n#include <cstdlib>\n#include <cctype>\n#include <string>\n#include <cstring>\n#include <ctime>\n#include <queue>\n#include <random>\n#include <cctype>\n#include <complex>\n\nusing namespace std;\n\n//typedef\n//------------------------------------------\ntypedef long long LL;\ntypedef vector<int> VI;\ntypedef vector<bool> VB;\ntypedef vector<char> VC;\ntypedef vector<double> VD;\ntypedef vector<string> VS;\ntypedef vector<LL> VLL;\ntypedef vector<VI> VVI;\ntypedef vector<VB> VVB;\ntypedef vector<VS> VVS;\ntypedef vector<VLL> VVLL;\ntypedef vector<VVI> VVVI;\ntypedef vector<VVLL> VVVLL;\ntypedef pair<int, int> PII;\ntypedef pair<LL, LL> PLL;\ntypedef pair<int, string> PIS;\ntypedef pair<string, int> PSI;\ntypedef pair<string, string> PSS;\n\n\n//数値・文字列\n//------------------------------------------\ninline int toInt(string s) {\n    int v;\n    istringstream sin(s);\n    sin >> v;\n    return v;\n}\n\ninline LL toLongLong(string s) {\n    LL v;\n    istringstream sin(s);\n    sin >> v;\n    return v;\n}\n\ntemplate<class T>\ninline string toString(T x) {\n    ostringstream sout;\n    sout << x;\n    return sout.str();\n}\n\ninline VC toVC(string s) {\n    VC data(s.begin(), s.end());\n    return data;\n}\n\ntemplate<typename List>\nvoid SPRIT(const std::string &s, const std::string &delim, List &result) {\n    result.clear();\n    string::size_type pos = 0;\n    while (pos != string::npos) {\n        string::size_type p = s.find(delim, pos);\n        if (p == string::npos) {\n            result.push_back(s.substr(pos));\n            break;\n        } else {\n            result.push_back(s.substr(pos, p - pos));\n        }\n        pos = p + delim.size();\n    }\n}\n\nstring TRIM(const string &str, const char *trimCharacterList = \" \\t\\v\\r\\n\") {\n    string result;\n    string::size_type left = str.find_first_not_of(trimCharacterList);\n    if (left != string::npos) {\n        string::size_type right = str.find_last_not_of(trimCharacterList);\n        result = str.substr(left, right - left + 1);\n    }\n    return result;\n}\n\ntemplate<typename T>\nbool VECTOR_EXISTS(vector<T> vec, T data) {\n    auto itr = std::find(vec.begin(), vec.end(), data);\n    size_t index = distance(vec.begin(), itr);\n    if (index != vec.size()) {\n        return true;\n    } else {\n        return 0;\n    }\n}\n\n#define UPPER(s) transform((s).begin(), (s).end(), (s).begin(), ::toupper)\n#define LOWER(s) transform((s).begin(), (s).end(), (s).begin(), ::tolower)\n\n\n\n//四捨五入 nLen=小数点第N位にする\n//------------------------------------------\n\n//切り上げ\ndouble ceil_n(double dIn, int nLen) {\n    double dOut;\n    dOut = dIn * pow(10.0, nLen);\n    dOut = (double) (int) (dOut + 0.9);\n    return dOut * pow(10.0, -nLen);\n}\n\n//切り捨て\ndouble floor_n(double dIn, int nLen) {\n    double dOut;\n    dOut = dIn * pow(10.0, nLen);\n    dOut = (double) (int) (dOut);\n    return dOut * pow(10.0, -nLen);\n}\n\n//四捨五入\ndouble round_n(double dIn, int nLen) {\n    double dOut;\n    dOut = dIn * pow(10.0, nLen);\n    dOut = (double) (int) (dOut + 0.5);\n    return dOut * pow(10.0, -nLen);\n}\n\n//n桁目の数の取得\nint take_a_n(int num, int n) {\n    string str = toString(num);\n    return str[str.length() - n] - '0';\n}\n\n\n//進数\n//------------------------------------------\n\n//\"1111011\" → 123\nint strbase_2to10(const std::string &s) {\n    int out = 0;\n    for (int i = 0, size = s.size(); i < size; ++i) {\n        out *= 2;\n        out += ((int) s[i] == 49) ? 1 : 0;\n    }\n    return out;\n}\n\n//\"123\" → 1111011\nint strbase_10to2(const std::string &s) {\n    int binary = toInt(s);\n    int out = 0;\n    for (int i = 0; binary > 0; i++) {\n        out = out + (binary % 2) * pow(static_cast<int>(10), i);\n        binary = binary / 2;\n    }\n    return out;\n}\n\n//\"ABC\" 2748\nint strbase_16to10(const std::string &s) {\n    int out = stoi(s, 0, 16);\n    return out;\n}\n\n//1111011 → 123\nint intbase_2to10(int in) {\n    string str = toString(in);\n    return strbase_2to10(str);\n}\n\n//123 → 1111011\nint intbase_10to2(int in) {\n    string str = toString(in);\n    return strbase_10to2(str);\n}\n\nint intbase_16to10(int in) {\n    string str = toString(in);\n    return strbase_16to10(str);\n}\n\n//123→ \"7B\"\nstring intbase_10to16(unsigned int val, bool lower = true) {\n    if (!val)\n        return std::string(\"0\");\n    std::string str;\n    const char hc = lower ? 'a' : 'A';     // 小文字 or 大文字表記\n    while (val != 0) {\n        int d = val & 15;     // 16進数一桁を取得\n        if (d < 10)\n            str.insert(str.begin(), d + '0');  //  10未満の場合\n        else //  10以上の場合\n            str.insert(str.begin(), d - 10 + hc);\n        val >>= 4;\n    }\n    return str;\n}\n\n//整数を2進数表記したときの1の個数を返す\nLL bitcount64(LL bits) {\n    bits = (bits & 0x5555555555555555) + (bits >> 1 & 0x5555555555555555);\n    bits = (bits & 0x3333333333333333) + (bits >> 2 & 0x3333333333333333);\n    bits = (bits & 0x0f0f0f0f0f0f0f0f) + (bits >> 4 & 0x0f0f0f0f0f0f0f0f);\n    bits = (bits & 0x00ff00ff00ff00ff) + (bits >> 8 & 0x00ff00ff00ff00ff);\n    bits = (bits & 0x0000ffff0000ffff) + (bits >> 16 & 0x0000ffff0000ffff);\n    return (bits & 0x00000000ffffffff) + (bits >> 32 & 0x00000000ffffffff);\n}\n\n\n\n//comparison\n//------------------------------------------\n#define C_MAX(a, b) ((a)>(b)?(a):(b))\n#define C_MIN(a, b) ((a)<(b)?(a):(b))\n#define C_ABS(a, b) ((a)<(b)?(b)-(a):(a)-(b))\n\n\n\n//container util\n//------------------------------------------\n#define ALL(a)  (a).begin(),(a).end()\n#define RALL(a) (a).rbegin(), (a).rend()\n#define SZ(a) int((a).size())\n#define EACH(i, c) for(typeof((c).begin()) i=(c).begin(); i!=(c).end(); ++i)\n#define EXIST(s, e) ((s).find(e)!=(s).end())\n#define COUNT(obj, v) count((obj).begin(), (obj).end(), v)\n#define SEARCH(v, w) search((v).begin(), (v).end(), (w).begin(), (w).end())\n#define B_SEARCH(obj, v) binary_search((obj).begin(), (obj).end(), v)\n#define SORT(c) sort((c).begin(),(c).end())\n#define RSORT(c) sort((c).rbegin(),(c).rend())\n#define REVERSE(c) reverse((c).begin(), (c).end())\n#define SUMI(obj) accumulate((obj).begin(), (obj).end(), 0)\n#define SUMD(obj) accumulate((obj).begin(), (obj).end(), 0.)\n#define SUMLL(obj) accumulate((obj).begin(), (obj).end(), 0LL)\n#define SUMS(obj) accumulate((obj).begin(), (obj).end(), string())\n#define UB(obj, n) upper_bound((obj).begin(), (obj).end(), n)\n#define LB(obj, n) lower_bound((obj).begin(), (obj).end(), n)\n#define PB push_back\n#define MP make_pair\n\n\n\n\n//input output\n//------------------------------------------\n#define GL(s) getline(cin, (s))\n#define INIT std::ios::sync_with_stdio(false);std::cin.tie(0);\n#define OUT(d) std::cout<<(d);\n#define OUT_L(d) std::cout<<(d)<<endl;\n#define FOUT(n, data) std::cout<<std::fixed<<std::setprecision(n)<<(data);\n#define FOUT_L(n, data) std::cout<<std::fixed<<std::setprecision(n)<<(data)<<\"\\n\";\n#define EL() std::cout << \"\\n\";\n#define SHOW_VECTOR(v) {std::cerr << #v << \"\\t:\";for(const auto& xxx : v){std::cerr << xxx << \" \";}std::cerr << \"\\n\";}\n#define SHOW_MAP(v) {std::cerr << #v << endl; for(const auto& xxx: v){std::cerr << xxx.first << \" \" << xxx.second << \"\\n\";}}\n\ntemplate<typename T>\nstd::istream &operator>>(std::istream &is, std::vector<T> &vec) {\n    for (T &x : vec) is >> x;\n    return is;\n}\n\ntemplate<typename T>\nstd::ostream &operator<<(std::ostream &os, const std::vector<T> &vec) {\n    for (const T &x : vec) os << x << \" \";\n    return os;\n}\n\n\n//repetition\n//------------------------------------------\n#define FOR(i, a, b) for(int i=(a);i<(b);++i)\n#define RFOR(i, a, b) for(int i=(b)-1;i>=(a);--i)\n#define REP(i, n)  FOR(i,0,n)\n#define RREP(i, n) for(int i = n-1;i >= 0;i--)\n#define FORLL(i, a, b) for(LL i=LL(a);i<LL(b);++i)\n#define RFORLL(i, a, b) for(LL i=LL(b)-1;i>=LL(a);--i)\n#define REPLL(i, n) for(LL i=0;i<LL(n);++i)\n#define RREPLL(i, n) for(LL i=LL(n)-1;i>=0;--i)\n#define FOREACH(x, v) for(auto &(x) : (v))\n#define FORITER(x, v) for(auto (x) = (v).begin(); (x) != (v).end(); ++(x))\n\n\n//constant\n//--------------------------------------------\nconst double EPS = 1e-10;\nconst double PI = acos(-1.0);\nconst int MOD = 1000000007;\nconst int dx[] = {-1, 0, 1, 0};\nconst int dy[] = {0, 1, 0, -1};\n\n\n//math\n//--------------------------------------------\n\n//min <= aim <= max\ntemplate<typename T>\ninline bool BETWEEN(const T aim, const T min, const T max) {\n    if (min <= aim && aim <= max) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\ntemplate<class T>\ninline T SQR(const T x) { return x * x; }\n\ntemplate<class T1, class T2>\ninline T1 POW(const T1 x, const T2 y) {\n    if (!y)return 1;\n    else if ((y & 1) == 0) {\n        return SQR(POW(x, y >> 1));\n    } else return POW(x, y ^ 1) * x;\n}\n\n\ntemplate<typename T>\nconstexpr T ABS(T x) {\n    return x < 0 ? -x : x;\n}\n\n//partial_permutation nPr 順列\n//first・・最初の数\n//middle・・r(取り出す数)\n//last・・n(全体数)\ntemplate<class BidirectionalIterator>\nbool next_partial_permutation(BidirectionalIterator first, BidirectionalIterator middle, BidirectionalIterator last) {\n    reverse(middle, last);\n    return next_permutation(first, last);\n}\n\n//combination nCr 組み合わせ\n//first1・・最初の数\n//last1==first2・・r(取り出す数)\n//last2・・n(全体数)\ntemplate<class BidirectionalIterator>\nbool next_combination(BidirectionalIterator first1, BidirectionalIterator last1, BidirectionalIterator first2,\n                      BidirectionalIterator last2) {\n    if ((first1 == last1) || (first2 == last2)) {\n        return false;\n    }\n    BidirectionalIterator m1 = last1;\n    BidirectionalIterator m2 = last2;\n    --m2;\n    while (--m1 != first1 && !(*m1 < *m2)) {\n    }\n    bool result = (m1 == first1) && !(*first1 < *m2);\n    if (!result) {\n        while (first2 != m2 && !(*m1 < *first2)) {\n            ++first2;\n        }\n        first1 = m1;\n        std::iter_swap(first1, first2);\n        ++first1;\n        ++first2;\n    }\n    if ((first1 != last1) && (first2 != last2)) {\n        m1 = last1;\n        m2 = first2;\n        while ((m1 != first1) && (m2 != last2)) {\n            std::iter_swap(--m1, m2);\n            ++m2;\n        }\n        std::reverse(first1, m1);\n        std::reverse(first1, last1);\n        std::reverse(m2, last2);\n        std::reverse(first2, last2);\n    }\n    return !result;\n}\n\n\n\n\n//numeric_law\n//--------------------------------------------\n\ntemplate<typename T>\nconstexpr bool ODD(T x) {\n    return x % 2 != 0;\n}\n\ntemplate<typename T>\nconstexpr bool EVEN(T x) {\n    return x % 2 == 0;\n}\n\n//最大公約数\ntemplate<class T>\ninline T GCD(const T x, const T y) {\n    if (x < 0)return GCD(-x, y);\n    if (y < 0)return GCD(x, -y);\n    return (!y) ? x : GCD(y, x % y);\n}\n\n//最小公倍数\ntemplate<class T>\ninline T LCM(const T x, const T y) {\n    if (x < 0)return LCM(-x, y);\n    if (y < 0)return LCM(x, -y);\n    return x * (y / GCD(x, y));\n}\n\n//ax + by = 1\n//x,yが変数に格納される\ntemplate<class T>\ninline T EXTGCD(const T a, const T b, T &x, T &y) {\n    if (a < 0) {\n        T d = EXTGCD(-a, b, x, y);\n        x = -x;\n        return d;\n    }\n    if (b < 0) {\n        T d = EXTGCD(a, -b, x, y);\n        y = -y;\n        return d;\n    }\n    if (!b) {\n        x = 1;\n        y = 0;\n        return a;\n    } else {\n        T d = EXTGCD(b, a % b, x, y);\n        T t = x;\n        x = y;\n        y = t - (a / b) * y;\n        return d;\n    }\n}\n\n//素数\ntemplate<class T>\ninline bool ISPRIME(const T x) {\n    if (x <= 1)return false;\n    for (T i = 2; SQR(i) <= x; i++)if (x % i == 0)return false;\n    return true;\n}\n\n//素数をtrueとして返す\ntemplate<class T>\nVB ERATOSTHENES(const T n) {\n    VB arr(n, true);\n    for (int i = 2; SQR(i) < n; i++) {\n        if (arr[i]) {\n            for (int j = 0; i * (j + 2) < n; j++) {\n                arr[i * (j + 2)] = false;\n            }\n        }\n    }\n    return arr;\n}\n\n// a <= x < b の素数を返す\ntemplate<typename T>\nVB ERATOSTHENES(const T a, const T b) {\n    VB small = ERATOSTHENES(b);\n    VB prime(b - a, true);\n\n    for (int i = 2; (T) (SQR(i)) < b; i++) {\n        if (small[i]) {\n            for (T j = max(2, (a + i - 1) / i) * i; j < b; j += i) {\n                prime[j - a] = false;\n            }\n        }\n    }\n\n    return prime;\n}\n\n//約数\ntemplate<class T>\nvector<T> DIVISOR(T n) {\n    vector<T> v;\n    for (int i = 1; i * i <= n; ++i) {\n        if (n % i == 0) {\n            v.push_back(i);\n            if (i != n / i) {\n                v.push_back(n / i);\n            }\n        }\n    }\n    sort(v.begin(), v.end());\n    return v;\n}\n\n//組み合わせ個数\ntemplate<typename T>\nT NCR(T n, T r) {\n    T ans = 1;\n    REPLL(i, r) {\n        ans = ans * (n - i) / (i + 1);\n    }\n    return ans;\n}\n\n//行列\nint MATRIZ_CHAIN(VI &p, VVI &s) {\n    const static int INF = 1 << 20;\n    const int n = p.size() - 1;\n    VVI X(n, VI(n, INF));\n    s.resize(n, VI(n));\n    for (int i = 0; i < n; ++i) X[i][i] = 0;\n    for (int w = 1; w < n; ++w)\n        for (int i = 0, j; j = i + w, j < n; ++i)\n            for (int k = i; k < j; ++k) {\n                int f = p[i] * p[k + 1] * p[j + 1];\n                if (X[i][k] + X[k + 1][j] + f < X[i][j]) {\n                    X[i][j] = X[i][k] + X[k + 1][j] + f;\n                    s[i][j] = k;\n                }\n            }\n    return X[0][n - 1];\n}\n\n//最長増加部分列\nVI LIS(const VI &a) {\n    const static int INF = 99999999;\n    const int n = a.size();\n    VI A(n, INF);\n    VI id(n);\n    for (int i = 0; i < n; ++i) {\n        id[i] = distance(A.begin(), lower_bound(A.begin(), A.end(), a[i]));\n        A[id[i]] = a[i];\n    }\n    int m = *max_element(id.begin(), id.end());\n    VI b(m + 1);\n    for (int i = n - 1; i >= 0; --i)\n        if (id[i] == m) b[m--] = a[i];\n    return b;\n}\n\n//最長共通部分列 string->toVC\ntemplate<typename T>\nvector<T> LCS(const vector<T> &a, const vector<T> &b) {\n    const int n = a.size(), m = b.size();\n    vector<VI> X(n + 1, VI(m + 1));\n    vector<VI> Y(n + 1, VI(m + 1));\n    REP(i, n) {\n        REP(j, m) {\n            if (a[i] == b[j]) {\n                X[i + 1][j + 1] = X[i][j] + 1;\n                Y[i + 1][j + 1] = 0;\n            } else if (X[i + 1][j] < X[i][j + 1]) {\n                X[i + 1][j + 1] = X[i][j + 1];\n                Y[i + 1][j + 1] = +1;\n            } else {\n                X[i + 1][j + 1] = X[i + 1][j];\n                Y[i + 1][j + 1] = -1;\n            }\n        }\n    }\n    vector<T> c;\n    for (int i = n, j = m; i > 0 && j > 0;) {\n        if (Y[i][j] > 0) --i;\n        else if (Y[i][j] < 0) --j;\n        else {\n            c.PB(a[i - 1]);\n            --i;\n            --j;\n        }\n    }\n    REVERSE(c);\n    return c;\n}\n\n//コイン C総額 cs使用できるコインの種類\nVI money_change(int C, VI &cs) {\n    const int INF = 99999999;\n    int n = cs.size();\n    VI xs(C + 1, INF);\n    VI ys(C + 1);\n    xs[0] = 0;\n    for (int i = 0; i < n; ++i) {\n        for (int c = 0; c + cs[i] <= C; ++c) {\n            if (xs[c + cs[i]] > xs[c] + 1) {\n                xs[c + cs[i]] = xs[c] + 1;\n                ys[c + cs[i]] = c;\n            }\n        }\n    }\n    VI zs;\n    for (int c = C; c > 0; c = ys[c]) {\n        zs.push_back(c - ys[c]);\n    }\n    return zs;\n}\n\n\n\n//confirmation\n//--------------------------------------------\n\n//clear memory\n#define CLR(arr, d) memset((arr), (d),sizeof(arr))\n\n//debug\n#define dump(x)  cerr << #x << \" = \" << (x) << endl;\n#define debug(x) cerr << #x << \" = \" << (x) << \" (L\" << __LINE__ << \")\" << \" \" << __FILE__ << endl;\n\n\n\n//平面幾何\n//--------------------------------------------\n//--------------------------------------------\n//--------------------------------------------\n//--------------------------------------------\n//--------------------------------------------\n\n//宣言\n//--------------------------------------------\n\n//long double or double\ntypedef double Real;\n\n//ポイントクラス\ntypedef complex<Real> Point;\n\n//線分クラス\ntypedef pair<Point, Point> Line;\n\n//円\ntypedef pair<Point, Real> Circle;\n\n//ポリゴン\ntypedef vector<Point> Poly;\n\n\n//x座標優先で比較する\nnamespace std {\n    bool operator<(const Point &a, const Point &b) {\n        return real(a) == real(b) ? imag(a) < imag(b) : real(a) < real(b);\n    }\n}\n\n\n//doubleの誤差\n#define EPS (1e-10)\n//double同士の比較\n#define EQ(a, b) (abs((a)-(b)) < EPS)\n//Pointの比較\n#define EQP(a, b) ( EQ((a).real(), (b).real()) && EQ((a).imag(), (b).imag()) )\n\n\n//角度\n//--------------------------------------------\nReal toRadian(double degree) {\n    return degree * PI / 180.0;\n}\n\nReal toDegree(double radian) {\n    return radian * 180.0 / PI;\n}\n\n\n\n\n\n\n\n//内積・外積・単位・法線\n//--------------------------------------------\n\n//ベクトルpの向きの単位ベクトルを返す\nPoint unit_vector(Point p) {\n    return p / abs(p);\n}\n\n\n//pの法線ベクトルを両方返す\npair<Point, Point> norm_vectors(Point p) {\n    return make_pair(p * Point(0, 1), p * Point(0, -1));\n}\n\n//ベクトルを反時計に回す sはラジアン\nPoint rotate_vector(Point v, double s) {\n    return Point(v.real() * cos(s) - v.imag() * sin(s), v.real() * sin(s) + v.imag() * cos(s));\n}\n\n//内積 a・b = |a||b|cosθ\ninline double dot(const Point &a, const Point &b) {\n    return (a.real() * b.real() + a.imag() * b.imag());\n}\n\n//外積 a×b = |a||b|sinθ\ninline double cross(const Point &a, const Point &b) {\n    return (a.real() * b.imag() - a.imag() * b.real());\n}\n\n//凸包\nvector<Point> convex_hull(vector<Point> v) {\n    int n = v.size(), k = 0;\n    sort(v.begin(), v.end());\n    vector<Point> r(2 * n);\n    for (int i = 0; i < n; i++) {\n        while (k > 1 && cross(r[k - 1] - r[k - 2], v[i] - r[k - 1]) <= EPS) k--;\n        r[k++] = v[i];\n    }\n    for (int i = n - 2, t = k; i >= 0; i--) {\n        while (k > t && cross(r[k - 1] - r[k - 2], v[i] - r[k - 1]) <= EPS) k--;\n        r[k++] = v[i];\n    }\n    r.resize(k - 1);\n    return r;\n}\n\n\n//三角形　角度・面積\n//--------------------------------------------\n//3点a, b, cのおける、角bacを返す\nReal args_bac(Point a, Point b, Point c) {\n    return acos(dot(b - a, c - a) / (abs(b - a) * abs(c - a)));\n}\n\n//各辺の長さがa, b, cの三角形の、aの対角の角度を返す\nReal args_bac(Real a, Real b, Real c) {\n    return acos((b * b + c * c - a * a) / (2 * b * c));\n}\n\n//三角形の面積\nReal heron_area(Real a, Real b, Real c) {\n    Real s = (a + b + c) / 2;\n    return sqrt(s * (s - a) * (s - b) * (s - c));\n}\n\n//三角形の重心\nPoint centerOfGravity(Point a, Point b, Point c) {\n    return Point((a.real() + b.real() + c.real()) / 3.0, (a.imag() + b.imag() + c.imag()) / 3.0);\n}\n\n//三角形の外接円の半径\nReal circumScribedCircleRadius(Point a, Point b, Point c) {\n    Real edgeA = abs(b - c);\n    Real angleA = args_bac(a, b, c);\n    return (edgeA / sin(angleA) / 2.0);\n}\n\n//三角形の外接円の中心座標　外心\nPoint circumScribedCircleXY(Point a, Point b, Point c) {\n    Real angleA = args_bac(a, b, c);\n    Real angleB = args_bac(b, a, c);\n    Real angleC = args_bac(c, a, b);\n    Real A = sin(2.0 * angleA);\n    Real B = sin(2.0 * angleB);\n    Real C = sin(2.0 * angleC);\n    Point point((a.real() * A + b.real() * B + c.real() * C) / (A + B + C),\n                (a.imag() * A + b.imag() * B + c.imag() * C) / (A + B + C));\n    return point;\n}\n\n//三角形が点Pを含むか\nbool point_in_triangle(Point a, Point b, Point c, Point p) {\n    Point ab = b - a;\n    Point bp = p - b;\n\n    Point bc = c - b;\n    Point cp = p - c;\n\n    Point ca = a - c;\n    Point ap = p - a;\n\n    Real c1 = cross(ab, bp);\n    Real c2 = cross(bc, cp);\n    Real c3 = cross(ca, ap);\n\n    //内側\n    if ((c1 > 0 && c2 > 0 && c3 > 0) || (c1 < 0 && c2 < 0 && c3 < 0)) {\n        return true;\n    } else {\n        return false;\n    }\n\n}\n\n\n//直線・線分\n//--------------------------------------------\n\n//頂点a, b, cの位置関係判定\nint points_relation(Point a, Point b, Point c) {\n    b -= a;\n    c -= a;\n    if (cross(b, c) > EPS) return 1; //counter-clockwise\n    if (cross(b, c) < -EPS) return -1; //clockwise\n    if (dot(b, c) < -EPS) return 2; //c--a--b on line\n    if (abs(b) < abs(c)) return -2; //a--b--c on line\n    return 0; //on segment\n}\n\n//2直線の直行判定 Point版\nbool is_orthogonal(Point a1, Point a2, Point b1, Point b2) {\n    return EQ(dot(a1 - a2, b1 - b2), 0.0);\n}\n\n//2直線の直行判定 Line版\nbool is_orthogonal(Line line1, Line line2) {\n    return EQ(dot(line1.first - line1.second, line2.first - line2.second), 0.0);\n}\n\n//2直線の平行判定 Point版\nbool is_parallel(Point a1, Point a2, Point b1, Point b2) {\n    return EQ(cross(a1 - a2, b1 - b2), 0.0);\n}\n\n//2直線の平行判定 Line版\nbool is_parallel(Line line1, Line line2) {\n    return EQ(cross(line1.first - line1.second, line2.first - line2.second), 0.0);\n}\n\n//点cが**直線**a-b上にあるか\nbool is_point_on_long_line(Point a, Point b, Point c) {\n    return EQ(cross(b - a, c - a), 0.0);\n}\n\n//点cが**線分**a-b上にあるか\nbool is_point_on_line(Point a, Point b, Point c) {\n    return (abs(a - c) + abs(c - b) < abs(a - b) + EPS);\n}\n\n//点a, bを通る**直線**と,点cとの距離d\ndouble distance_longline_point(Point a, Point b, Point c) {\n    return abs(cross(b - a, c - a)) / abs(b - a);\n}\n\n//直線と点との距離　円用\nReal line_dis(Line a, Point x) {\n    return abs(cross(a.second - a.first, x - a.first)) / abs(a.second - a.first);\n}\n\n//点a, bを端点とする**線分**と、点cとの距離d\ndouble distance_line_point(Point a, Point b, Point c) {\n    if (dot(b - a, c - a) < EPS) return abs(c - a);\n    if (dot(a - b, c - b) < EPS) return abs(c - b);\n    return abs(cross(b - a, c - a)) / abs(b - a);\n}\n\n//点a1, a2を端点とする線分と、点b1, b2を端点とする線分の交差判定\nbool is_intersected_lines(Point a1, Point a2, Point b1, Point b2) {\n    return (cross(a2 - a1, b1 - a1) * cross(a2 - a1, b2 - a1) < EPS) &&\n           (cross(b2 - b1, a1 - b1) * cross(b2 - b1, a2 - b1) < EPS);\n}\n\n//点a1, a2を端点とする線分と、点b1, b2を端点とする線分の交点\nPoint intersection_lines_point(Point a1, Point a2, Point b1, Point b2) {\n    Point b = b2 - b1;\n    double d1 = abs(cross(b, a1 - b1));\n    double d2 = abs(cross(b, a2 - b1));\n    double t = d1 / (d1 + d2);\n    return a1 + (a2 - a1) * Point(t, 0);\n}\n\n//点a1, a2を通る直線と点b1, b2を通る直線の交点計算\nPoint intersection_longlines_point(Point a1, Point a2, Point b1, Point b2) {\n    Point a = a2 - a1;\n    Point b = b2 - b1;\n    return a1 + a * Point(cross(b, b1 - a1), 0) / Point(cross(b, a), 0);\n}\n\n\n//直線a-bに点pから垂線をおろしたときの交点\nPoint projection_point(Point a, Point b, Point p) {\n    Real t = dot(p - a, a - b) / (abs(a - b) * abs(a - b));\n    return a + (a - b) * t;\n}\n\n//点pを線対称移動させる\nPoint reflection_point(Point a, Point b, Point p) {\n    return p + (projection_point(a, b, p) - p) * (Real) 2.0;\n}\n\n\n\n\n//多角形\n//--------------------------------------------\n\n//面積を返す 反時計回りに整列させておく\nReal poly_area(Poly p) {\n    if (p.size() < 3)return 0;\n    Real res = cross(p[p.size() - 1], p[0]);\n    for (int i = 1; i < p.size(); i++) {\n        res += cross(p[i - 1], p[i]);\n    }\n    return res / 2;\n}\n\n//最遠点対　凸多角形で最も長い距離を返す\n//凸包の後に使うとよい\nReal longest_points_distance(Poly p) {\n    int n = p.size();\n    if (n == 2) {\n        return abs(p[0] - p[1]);\n    }\n\n    int i = 0, j = 0;\n    for (int k = 0; k < n; k++) {\n        if (!(p[i] < p[k])) i = k;\n        if (p[j] < p[k]) j = k;\n    }\n\n    Real res = 0;\n    int si = i, sj = j;\n    while (i != sj || j != si) {\n        res = max(res, abs(p[i] - p[j]));\n        if (cross(p[(i + 1) % n] - p[i], p[(j + 1) % n] - p[j]) < 0) i = (i + 1) % n;\n        else j = (j + 1) % n;\n    }\n\n    return res;\n}\n\n\n\n\n\n//円 第一引数は中点　第二引数は半径\n//--------------------------------------------\n\n//円の面積\nReal circle_area(Circle c) {\n    return PI * c.second * c.second;\n}\n\n//円の中に点xが内部にあるか\nbool circle_in_x(Circle c, Point x) {\n    return (abs(x - c.first) + EPS < c.second);\n}\n\n//円状に点xがあるか\nbool circle_on_x(Circle c, Point x) {\n    return EQ(abs(x - c.first), c.second);\n}\n\n//2つの円a, bの関係\nint circle_relation(Circle a, Circle b) {\n    double d = abs(a.first - b.first);\n\n    if (a.second + b.second + EPS < d) return -1; //no cross point outside\n    if (b.second + d + EPS < a.second) return 1; //no cross point(inside B in A)\n    if (a.second + d + EPS < b.second) return 2; //no cross point(inside A in B)\n\n    if (abs(a.second + b.second - d) < EPS) return -3; //one cross point(outside)\n    if (abs(b.second + d - a.second) < EPS) return 3; //one cross point(inside B in A)\n    if (abs(a.second + d - b.second) < EPS) return 4; //one cross point(inside A in B)\n\n    return 0; //two cross point\n}\n\n//2円a, bの共通面積\nReal intersection_area(Circle a, Circle b) {\n    Real d = abs(a.first - b.first);\n\n    if (a.second + b.second < d + EPS) return 0;\n\n    //円aを半径が大きい方にする\n    if (a.second < b.second) swap(a, b);\n\n    //円bが円aに入ってたら\n    if (b.second + d < a.second + EPS || b.second < EPS) return circle_area(b);\n\n    Real t1 = args_bac(b.second, a.second, d);\n    Real t2 = args_bac(a.second, b.second, d);\n    Real tri = (a.second * a.second * sin(t1 * 2) + b.second * b.second * sin(t2 * 2)) / 2.0;\n    return a.second * a.second * t1 + b.second * b.second * t2 - tri;\n}\n\n//2つの円の交点を返す\nvector<Point> circle_inter_points(Circle a, Circle b) {\n    vector<Point> v;\n    int pos = circle_relation(a, b);\n    if (pos == 0) {\n        Real s = args_bac(b.second, abs(b.first - a.first), a.second);\n        Point x = a.second * unit_vector(b.first - a.first);\n        v.push_back(a.first + rotate_vector(x, s));\n        v.push_back(a.first + rotate_vector(x, -s));\n    } else if (abs(pos) >= 3) {\n        v.push_back(a.first + a.second * unit_vector(b.first - a.first));\n    }\n    return v;\n}\n\n//円と直線の交点\nvector<Point> circle_inter_line_points(Circle a, Line l) {\n    vector<Point> v;\n    Real d = line_dis(l, a.first);\n    if (d < a.second + EPS) {\n        Point x = a.second * unit_vector(l.second - l.first);\n        if (points_relation(l.first, l.second, a.first) == 1) x = a.first + x * Point(0, -1);\n        else x = a.first + x * Point(0, 1);\n        if (d + EPS < a.second) {\n            Real y = sqrt(a.second * a.second - d * d);\n            if (d == 0) d += EPS;\n            Real s = args_bac(y, d, a.second);\n            v.push_back(rotate_vector(x, s));\n            v.push_back(rotate_vector(x, -s));\n        } else if (EQ(d, a.second)) {\n            v.push_back(x);\n        }\n    }\n    return v;\n}\n\n//点pを通る円cの接線\nvector<Line> adjust_line(Circle c, Point p) {\n    vector<Line> res;\n    if (circle_in_x(c, p)) return res;\n    if (circle_on_x(c, p)) {\n        pair<Point, Point> n = norm_vectors(c.first - p);\n        res.push_back(Line(n.first + p, p));\n        return res;\n    }\n    Real x = c.second, z = abs(c.first - p);\n    Real y = sqrt(z * z - x * x);\n    Real s = args_bac(y, x, z);\n    Point v = unit_vector(p - c.first) * c.second;\n\n    res.push_back(Line(rotate_vector(v, s) + c.first, p));\n    res.push_back(Line(rotate_vector(v, -s) + c.first, p));\n    return res;\n}\n\n//円の共通接線を求める\nvector<Line> common_adjust_line(Circle a, Circle b) {\n    vector<Line> res;\n    if (a.second + EPS < b.second) return common_adjust_line(b, a);\n    if (EQ(a.first.real(), b.first.real()) && EQ(a.first.imag(), b.first.imag()) && EQ(a.second, b.second)) return res;\n\n    Point pos = (b.first - a.first) * a.second / (a.second + b.second) + a.first;\n    if (!circle_in_x(a, pos)) res = adjust_line(a, pos);\n\n    if (EQ(a.second, b.second)) {\n        pair<Point, Point> n = norm_vectors(unit_vector(b.first - a.first) * a.second);\n        res.push_back(Line(a.first + n.first, b.first + n.first));\n        res.push_back(Line(a.first + n.second, b.first + n.second));\n    } else {\n        Real c = abs(b.first - a.first);\n        pos = unit_vector(b.first - a.first) * ((a.second * c) / (a.second - b.second)) + a.first;\n        if (!circle_in_x(a, pos)) {\n            vector<Line> tmp = adjust_line(a, pos);\n            for (int i = 0; i < tmp.size(); i++) res.push_back(tmp[i]);\n        }\n    }\n\n    return res;\n}\n\n\n//使い方\n//--------------------------------------------\n\n//xとyの取り出し型\n//a.real(); //x\n//a.imag(); //y\n\n//単位ベクトル\n//Point unit = a / abs(a);\n\n//ベクトルの長さをk倍する\n// a = a * Point(k, 0);\n\n//ベクトルaのk倍の法線ベクトル\n//P p1 = a * P(0, k);\n//P p2 = a * P(0, -k);\n\n//ベクトルaの単位法線ベクトル\n//P p1 = (a * P(0, 1)) /abs(a);\n//P p2 = (a * P(0, -1)) /abs(a);\n\n/*\n *\n *\n *   ~~~~Below My Answer~~~~\n *\n *\n **/\n\n\n\nint main() {\n\n    double p0_x, p0_y, p1_x, p1_y;\n    cin >> p0_x >> p0_y >> p1_x >> p1_y;\n\n    Point p0(p0_x, p0_y);\n    Point p1(p1_x, p1_y);\n\n    int q;\n    cin >> q;\n    for (int i = 0; i < q; i++) {\n        double x, y;\n        cin >> x >> y;\n\n        Point p2(x, y);\n\n        int result = points_relation(p0, p1, p2);\n\n        string str=\"\";\n        switch (result){\n            case 1:\n                str = \"COUNTER_CLOCKWISE\";\n                break;\n            case -1:\n                str = \"CLOCKWISE\";\n                break;\n            case 2:\n                str = \"ONLINE_BACK\";\n                break;\n            case -2:\n                str = \"ONLINE_FRONT\";\n                break;\n            case 0:\n                str = \"ON_SEGMENT\";\n                break;\n        }\n\n\n        cout << str <<endl;\n    }\n\n\n\n    return 0;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nusing ll = long long; using ld = long double; using ull = unsigned long long; using uint = unsigned int;\nusing vi  = vector<int>; using vb  = vector<bool>; using vd  = vector<double>; using vl  = vector<ll>;\nusing vvi = vector<vi>;  using vvb = vector<vb>;   using vvd = vector<vd>;     using vvl = vector<vl>;\n\n#define REP(i,n) for(ll i=0; i<(n); ++i)\n#define FOR(i,b,n) for(ll i=(b); i<(n); ++i)\n#define ALL(v) (v).begin(), (v).end()\n#define TEN(x) ((ll)1e##x)\n\ntemplate<typename T> inline string join(const vector<T>& vec, string sep = \" \") { stringstream ss; REP(i, vec.size()) ss << vec[i] << ( i+1 == vec.size() ? \"\" : sep ); return ss.str(); }\n\n\n///////////////\n\n#define EPS (1e-10)\n#define NEXT(x, i) (x[(i + 1) % x.size()])\n\ntemplate<class T> using CR = const T &;\nusing P = complex<ld>;\nusing G = vector<P>;\n\nint sgn(ld a, ld b = 0) {\n\tif (a > b + EPS) return 1;\n\tif (a < b - EPS) return -1;\n\treturn 0;\n}\n\nld dot(P a, P b) { return real(conj(a)*b); }\nld cross(P a, P b) { return imag(conj(a)*b); }\n\nint ccw(P a, P b, P c) {\n\tb -= a;\n\tc -= a;\n\tif (sgn(cross(b, c))) return sgn(cross(b, c)); // clockwise or counter clockwise\n\tif (sgn(dot(b, c)) == -1) return 2;            // c--a--b\n\tif (sgn(norm(b), norm(c)) == -1) return -2;    // a--b--c\n\treturn 0;                                      // a--c--b\n}\n\n\n//////////////\n\nint main() {\n#ifdef INPUT_FROM_FILE\n\tifstream cin(\"sample.in\");\n\tofstream cout(\"sample.out\");\n#endif\n\tcin.tie(0);\n\tios_base::sync_with_stdio(false);\n\tcout << fixed << setprecision(30);\n\tld x1, y1, x2, y2;\n\tcin >> x1 >> y1 >> x2 >> y2;\n\tP p0(x1,y1), p1(x2,y2);\n\tll q;\n\tcin >> q;\n\twhile(q--) {\n\t\tld x, y;\n\t\tcin >> x >> y;\n\t\tP p2(x, y);\n\t\tint c = ccw(p0, p1, p2);\n\t\tcout <<\n\t\t\t(c == 1 ? \"COUNTER_CLOCKWISE\"\n\t\t\t : c == -1 ? \"CLOCKWISE\"\n\t\t\t : c ==  2 ? \"ONLINE_BACK\"\n\t\t\t : c == -2 ? \"ONLINE_FRONT\"\n\t\t\t : \"ON_SEGMENT\"\n\t\t\t) << endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <cmath>\n#include <array>\n\nusing Number = double;\n\nconst Number EPS = 1e-10;\nconst Number INF = 1e10;\nconst Number PI = acos(-1.0);\n\ninline int sign(Number x) { return (x < -EPS) ? -1 : (x > EPS) ? +1 : 0; }\n\n// change between degree and radian\ninline Number to_radian(const Number degree) { return degree * PI / 180.0; }\ninline Number to_degree(const Number radian) { return radian * 180.0 / PI; }\n\n\n/**\n * Point in two dimensional\n */\nclass Point {\npublic:\n    Number x, y;\n\n    Point() {}\n    Point(Number x, Number y) : x(x), y(y) {}\n\n    // Arithmetic operator between points\n    Point operator+(const Point &rhs) const {\n        return Point(this->x + rhs.x, this->y + rhs.y);\n    }\n    Point operator-(const Point &rhs) const {\n        return Point(this->x - rhs.x, this->y - rhs.y);\n    }\n    Point operator*(const Point &rhs) const { // cross product between points\n        return Point(this->x * rhs.x - this->y * rhs.y,\n                     this->x * rhs.x + this->y * rhs.x);\n    }\n\n    // Unary operator and compound assignment operator\n    Point operator-() const {\n        return Point(-this->x, -this->y);\n    }\n    Point& operator+=(const Point &rhs) {\n        return *this = *this + rhs;\n    }\n    Point& operator-=(const Point &rhs) {\n        return *this = *this - rhs;\n    }\n\n    // Arithmetic operator between point and number\n    Point operator*(Number rhs) const {\n        return Point(this->x * rhs, this->y * rhs);\n    }\n    Point operator/(Number rhs) const {\n        return Point(this->x / rhs, this->y / rhs);\n    }\n\n    // Comparison operation\n    bool operator==(const Point &rhs) const {\n        return sign(this->x - rhs.x) == 0 && sign(this->y - rhs.y) == 0;\n    }\n    bool operator<(const Point &rhs) const {\n        return (this->x < rhs.x) || (this->x == rhs.x && this->y < rhs.y);\n    }\n\n    // Other operator\n    Number abs(void) const {\n        return sqrt(this->x * this->x + this->y * this->y);\n    }\n    Number abs2(void) const {\n        return this->x * this->x + this->y * this->y;\n    }\n    Number arg(void) const {\n        return atan2(this->y, this->x);\n    }\n    Number dot(const Point &rhs) {\n        return this->x * rhs.x + this->y * rhs.y;\n    }\n    Point rotate90(void) const {\n        return Point(-this->y, this->x);\n    }\n    Point rotate(double angle) const {\n        return Point(cos(angle) * this->x - sin(angle) * this->y,\n                     sin(angle) * this->x + cos(angle) * this->y);\n    }\n\n};\ninline Number dot(const Point &p1, const Point &p2) {\n    return p1.x * p2.x + p1.y * p2.y;\n}\ninline Number abs_cross(const Point &p1, const Point &p2) {\n    return p1.x * p2.y - p1.y * p2.x;\n}\n// Output of a point\nstd::ostream& operator<<(std::ostream &os, const Point &p) {\n    return os <<  p.x << ' ' << p.y;\n}\n// Input of a point\nstd::istream& operator>>(std::istream &is, Point &p) {\n    return is >> p.x >> p.y;\n}\n\n// Counter-Clockwise predicate (a, b, c)\nenum CCW {\n    COUNTER_CLOCKWISE = 1,      // counter clockwise\n    CLOCKWISE         = -1,     // clockwise\n    ONLINE_FRONT      = 0,      // a--c--b on line\n    ONLINE_BACK       = 2,      // c--a--b on line\n    ON_SEGMENT        = -2,     // a--b--c on line\n};\nCCW ccw(const Point &a, Point b, Point c) {\n    b -= a;  c -= a;\n    if (abs_cross(b, c) > 0) return COUNTER_CLOCKWISE;\n    if (abs_cross(b, c) < 0) return CLOCKWISE;\n    if (dot(b, c) < 0)       return ONLINE_BACK;\n    if (b.abs2() < c.abs2())   return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\n\n/**\n * Line or Segment in two dimensional\n */\nclass Line : public std::array<Point, 2> {\npublic:\n    Line() {}\n    Line(const Point &p1, const Point &p2) {\n        (*this)[0] = p1;\n        (*this)[1] = p2;\n    }\n};\nusing Segment = Line;\n// Input of a line\nstd::istream& operator>>(std::istream &is, Line &l) {\n    return is >> l[0] >> l[1];\n}\ninline CCW ccw(const Line &l, const Point &p) {\n    return ccw(l[0], l[1], p);\n}\n\n\n/**\n * Circle in two dimensional\n */\nclass Circle : public Point {\npublic:\n    Number r;\n    Circle(const Point &p, Number r = 0.0) : Point(p), r(r) {}\n};\n// Input of a circle\nstd::istream& operator>>(std::istream &is, Circle &c) {\n    return is >> c.x >> c.y >> c.r;\n}\n\n\n\n/**\n * Intersection testing\n */\n\n\n/**\n * Intersection point and Distance\n */\nPoint Projection(const Line &l, const Point &p) {\n    Point dir = l[1] - l[0];\n    Number t = dot(p - l[0], dir) / dir.abs2();\n    return l[0] + dir * t;\n}\nPoint Reflection(const Line &l, const Point &p) {\n    return Projection(l, p) * 2.0 - p;\n}\n\n\nint main()\n{\n    Line l;\n    Point p;\n    int q;\n\n    std::cin >> l;\n    std::cin >> q;\n\n    while (q--) {\n        std::cin >> p;\n        switch (ccw(l, p)) {\n        case COUNTER_CLOCKWISE:\n            std::cout << \"COUNTER_CLOCKWISE\\n\";\n            break;\n        case CLOCKWISE:\n            std::cout << \"CLOCKWISE\\n\";\n            break;\n        case ONLINE_FRONT:\n            std::cout << \"ONLINE_FRONT\\n\";\n            break;\n        case ONLINE_BACK:\n            std::cout << \"ONLINE_BACK\\n\";\n            break;\n        case ON_SEGMENT:\n            std::cout << \"ON_SEGMENT\\n\";\n            break;\n        }\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#include<iostream>\n#include<algorithm>\n#include<string>\n#include<iomanip>\n#include<cmath>\n#include<vector>\n#include<deque>\n#include<queue>\n#include<map>\n#include<set>\n#define ll long long\n#define str string\n#define ld long double\n#define vec vector\n#define vll vec<ll>\n#define rep(i,a,b) for(ll i=a;i<b;i++)\n#define rrep(i,b,a) for(ll i=b;i>=a;i--)\n#define ALL(a) a.begin(),a.end()\n#define rALL(a) a.rbegin(),a.rend()\n#define kai \"\\n\"\n#define yuque priority_queue\n#define pub push_back\n#define pob pop_back\n#define puf push_front\n#define pof pop_front\n#define mie min_element\n#define mae max_element\n#define tos to_string\n#define sep setprecision\n#define lob lower_bound\n#define upb upper_bound\n#define nep next_permutation\n#define MOD 1000000007ll\n#define MIN (1e-10)\n#define equal(a,b) (abs((a)-(b))<MIN)\n#define v2 ten\n#define chokusen senbun\n#define kakkei vec<ten>\nusing namespace std;\nvoid solve();\nint main(){\n\tcin.tie(0);\n\tios::sync_with_stdio(false);\n\tcout<<fixed;\n\tsolve();\n}\nstruct pea{\n\tll f,s;\n\tbool operator<(const pea &p)const{\n\t\treturn f!=p.f?f<p.f:s<p.s;\n\t};\n};\nstruct tri{\n\tll f,s,t;\n\tbool operator<(const tri &p)const{return f<p.f;};\n};\nclass ten{\npublic:\n\tld x,y;\n\tten operator+(ten p){return{x+p.x,y+p.y};}\n\tten operator-(ten p){return{x-p.x,y-p.y};}\n\tten operator*(ld k){return{k*x,k*y};}\n\tten operator/(ld k){return{x/k,y/k};}\n\tld abs(){return sqrt(abs2());}\n\tld abs2(){return x*x+y*y;};\n\tbool operator<(const ten &p)const{return x!=p.x?x<p.x:y<p.y;};\n\tbool operator==(const ten &p)const{return (-MIN<x-p.x)&&(x-p.x<MIN)&&(-MIN<y-p.y)&&(y-p.y<MIN);};\n\tld naiseki(v2 b){return x*b.x+y*b.y;}\n\tld gaiseki(v2 b){return x*b.y-y*b.x;}\n};\nstruct senbun{ten p1,p2;};\nstruct en{ten o;ld r;};\nten shaei(ten p,chokusen l){\n\tv2 a=l.p2-l.p1;\n\treturn l.p1+a*a.naiseki(p-l.p1)/a.abs2();\n}\nten hansha(ten p,chokusen l){return shaei(p,l)*2-p;}\nld tenchoku(ten p,chokusen l){\n\tv2 a=l.p2-l.p1;\n\treturn abs(a.gaiseki(p-l.p1))/a.abs();\n}\nld tensen(ten p,senbun s){\n\tif((p-s.p1).naiseki(s.p2-s.p1)<0)return (p-s.p1).abs();\n\tif((p-s.p2).naiseki(s.p1-s.p2)<0)return (p-s.p2).abs();\n\treturn tenchoku(p,s);\n}\nll ccw(ten p0,ten p1,ten p2){\n\tv2 a=p1-p0,b=p2-p0;\n\tif(a.gaiseki(b)>MIN)return -1;\n\tif(a.gaiseki(b)<-MIN)return 1;\n\tif(a.naiseki(b)<-MIN)return -2;\n\tif(a.abs2()<b.abs2())return 2;\n\treturn 0;\n}\nbool majiwaru(senbun s,senbun t){\n\t\n}\nld sensen(senbun s,senbun t){\n\tif(majiwaru(s,t))return 0;\n\treturn min({tensen(s.p1,t),tensen(s.p2,t),tensen(t.p1,s),tensen(t.p2,s)});\n}\nvoid solve(){\n\tten p0,p1,p2;\n\tcin>>p0.x>>p0.y>>p1.x>>p1.y;\n\tll n;cin>>n;\n\trep(i,0,n){\n\t\tcin>>p2.x>>p2.y;\n\t\tll b=ccw(p0,p1,p2);\n\t\tif(b==-1)cout<<\"COUNTER_CLOCKWISE\"<<kai;\n\t\telse if(b==1)cout<<\"CLOCKWISE\"<<kai;\n\t\telse if(b==-2)cout<<\"ONLINE_BACK\"<<kai;\n\t\telse if(b==2)cout<<\"ONLINE_FRONT\"<<kai;\n\t\telse cout<<\"ON_SEGMENT\"<<kai;\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\nusing Int = long long;\n//BEGIN CUT HERE\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n#define PI 3.141592653589793238\n \n// COUNTER CLOCKWISE\nstatic const int CCW_COUNTER_CLOCKWISE = 1;\nstatic const int CCW_CLOCKWISE = -1;\nstatic const int CCW_ONLINE_BACK = 2;\nstatic const int CCW_ONLINE_FRONT = -2;\nstatic const int CCW_ON_SEGMENT = 0;\n\n//Intercsect Circle & Circle\nstatic const int ICC_SEPERATE = 4;\nstatic const int ICC_CIRCUMSCRIBE = 3;\nstatic const int ICC_INTERSECT = 2;\nstatic const int ICC_INSCRIBE = 1;\nstatic const int ICC_CONTAIN = 0;\n\nstruct Point{\n  double x,y;\n  Point(){}\n  Point(double x,double y) :x(x),y(y){}\n  Point operator+(Point p) {return Point(x+p.x,y+p.y);}\n  Point operator-(Point p) {return Point(x-p.x,y-p.y);}\n  Point operator*(double k){return Point(x*k,y*k);}\n  Point operator/(double k){return Point(x/k,y/k);}\n  double norm(){return x*x+y*y;}\n  double abs(){return sqrt(norm());}\n\n  bool operator < (const Point &p) const{\n    return x!=p.x?x<p.x:y<p.y;\n    //grid-point only\n    //return !equals(x,p.x)?x<p.x:!equals(y,p.y)?y<p.y:0;\n  }\n\n  bool operator == (const Point &p) const{\n    return fabs(x-p.x)<EPS && fabs(y-p.y)<EPS;\n  }\n};\n\nistream &operator >> (istream &is,Point &p){\n  is>>p.x>>p.y;\n  return is;\n}\n\nostream &operator << (ostream &os,Point p){\n  os<<fixed<<setprecision(12)<<p.x<<\" \"<<p.y;\n  return os;\n}\n\nbool sort_x(Point a,Point b){\n  return a.x!=b.x?a.x<b.x:a.y<b.y;\n}\n\nbool sort_y(Point a,Point b){\n  return a.y!=b.y?a.y<b.y:a.x<b.x;\n}\n\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\nistream &operator >> (istream &is,Polygon &p){\n  for(int i=0;i<(int)p.size();i++) cin>>p[i];\n  return is;\n}\n\nstruct Segment{\n  Point p1,p2;\n  Segment(){}\n  Segment(Point p1, Point p2):p1(p1),p2(p2){}\n};\ntypedef Segment Line;\n\nistream &operator >> (istream &is,Segment &s){\n  is>>s.p1>>s.p2;\n  return is;\n}\n\nstruct Circle{\n  Point c;\n  double r;\n  Circle(){}\n  Circle(Point c,double r):c(c),r(r){}\n};\n\nistream &operator >> (istream &is,Circle &c){\n  is>>c.c>>c.r;\n  return is;\n}\n\ndouble norm(Vector a){\n  return a.x*a.x+a.y*a.y;\n}\ndouble abs(Vector a){\n  return sqrt(norm(a));\n}\ndouble dot(Vector a,Vector b){\n  return a.x*b.x+a.y*b.y;\n}\ndouble cross(Vector a,Vector b){\n  return a.x*b.y-a.y*b.x;\n}\n\nPoint orth(Point p){return Point(-p.y,p.x);}\n\nbool isOrthogonal(Vector a,Vector b){\n  return equals(dot(a,b),0.0);\n}\n\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n  return isOrthogonal(a1-a2,b1-b2);\n}\n\nbool isOrthogonal(Segment s1,Segment s2){\n  return equals(dot(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n\nbool isParallel(Vector a,Vector b){\n  return equals(cross(a,b),0.0);\n}\n\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n  return isParallel(a1-a2,b1-b2);\n}\n\nbool isParallel(Segment s1,Segment s2){\n  return equals(cross(s1.p2-s1.p1,s2.p2-s2.p1),0.0); \n}\n\nPoint project(Segment s,Point p){\n  Vector base=s.p2-s.p1;\n  double r=dot(p-s.p1,base)/norm(base);\n  return s.p1+base*r;\n}\n\nPoint reflect(Segment s,Point p){\n  return p+(project(s,p)-p)*2.0;\n}\n\ndouble arg(Vector p){\n  return atan2(p.y,p.x);\n}\n\nVector polar(double a,double r){\n  return Point(cos(r)*a,sin(r)*a);\n}\n\nint ccw(Point p0,Point p1,Point p2);\nbool intersectSS(Point p1,Point p2,Point p3,Point p4);\nbool intersectSS(Segment s1,Segment s2);\nbool intersectPS(Polygon p,Segment l);\nint intersectCC(Circle c1,Circle c2);\nbool intersectSC(Segment s,Circle c);\ndouble getDistanceLP(Line l,Point p);\ndouble getDistanceSP(Segment s,Point p);\ndouble getDistanceSS(Segment s1,Segment s2);\nPoint getCrossPointSS(Segment s1,Segment s2);\nPoint getCrossPointLL(Line l1,Line l2);\nPolygon getCrossPointCL(Circle c,Line l);\nPolygon getCrossPointCC(Circle c1,Circle c2);\nint contains(Polygon g,Point p);\nPolygon andrewScan(Polygon s);\nPolygon convex_hull(Polygon ps);\ndouble diameter(Polygon s);\nbool isConvex(Polygon p);\ndouble area(Polygon s);\nPolygon convexCut(Polygon p,Line l);\nLine bisector(Point p1,Point p2);\nVector translate(Vector v,double theta);\nvector<Line> corner(Line l1,Line l2);\n\nint ccw(Point p0,Point p1,Point p2){\n  Vector a = p1-p0;\n  Vector b = p2-p0;\n  if(cross(a,b) > EPS) return CCW_COUNTER_CLOCKWISE;\n  if(cross(a,b) < -EPS) return CCW_CLOCKWISE;\n  if(dot(a,b) < -EPS) return CCW_ONLINE_BACK;\n  if(a.norm()<b.norm()) return CCW_ONLINE_FRONT;\n  return CCW_ON_SEGMENT;\n}\n\nbool intersectSS(Point p1,Point p2,Point p3,Point p4){\n  return (ccw(p1,p2,p3)*ccw(p1,p2,p4) <= 0 &&\n\t  ccw(p3,p4,p1)*ccw(p3,p4,p2) <= 0 );\n}\n\nbool intersectSS(Segment s1,Segment s2){\n  return intersectSS(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n\nbool intersectPS(Polygon p,Segment l){\n  int n=p.size();\n  for(int i=0;i<n;i++)\n    if(intersectSS(Segment(p[i],p[(i+1)%n]),l)) return 1;\n  return 0;\n}\n\nint intersectCC(Circle c1,Circle c2){\n  if(c1.r<c2.r) swap(c1,c2);\n  double d=abs(c1.c-c2.c);\n  double r=c1.r+c2.r;\n  if(equals(d,r)) return ICC_CIRCUMSCRIBE;\n  if(d>r) return ICC_SEPERATE;\n  if(equals(d+c2.r,c1.r)) return ICC_INSCRIBE;\n  if(d+c2.r<c1.r) return ICC_CONTAIN;\n  return ICC_INTERSECT;\n}\n\nbool intersectSC(Segment s,Circle c){\n  double d=getDistanceSP(s,c.c);\n  return d<=c.r;\n}\n\ndouble getDistanceLP(Line l,Point p){\n  return abs(cross(l.p2-l.p1,p-l.p1)/abs(l.p2-l.p1));\n}\n\ndouble getDistanceSP(Segment s,Point p){\n  if(dot(s.p2-s.p1,p-s.p1) < 0.0 ) return abs(p-s.p1);\n  if(dot(s.p1-s.p2,p-s.p2) < 0.0 ) return abs(p-s.p2);\n  return getDistanceLP(s,p);\n}\n\ndouble getDistanceSS(Segment s1,Segment s2){\n  if(intersectSS(s1,s2)) return 0.0;\n  return min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),\n\t     min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n}\n\nPoint getCrossPointSS(Segment s1,Segment s2){\n  Vector base=s2.p2-s2.p1;\n  double d1=abs(cross(base,s1.p1-s2.p1));\n  double d2=abs(cross(base,s1.p2-s2.p1));\n  double t=d1/(d1+d2);\n  return s1.p1+(s1.p2-s1.p1)*t;\n}\n\nPoint getCrossPointLL(Line l1,Line l2){\n  double a=cross(l1.p2-l1.p1,l2.p2-l2.p1);\n  double b=cross(l1.p2-l1.p1,l1.p2-l2.p1);\n  if(abs(a)<EPS&&abs(b)<EPS) return l2.p1;\n  return l2.p1+(l2.p2-l2.p1)*(b/a);\n}\n\nPolygon getCrossPointCL(Circle c,Line l){\n  Polygon ps;\n  Point pr=project(l,c.c);\n  Vector e=(l.p2-l.p1)/abs(l.p2-l.p1);\n  if(equals(getDistanceLP(l,c.c),c.r)){\n    ps.emplace_back(pr);\n    return ps;\n  }\n  double base=sqrt(c.r*c.r-norm(pr-c.c));\n  ps.emplace_back(pr+e*base);\n  ps.emplace_back(pr-e*base);\n  return ps;\n}\n\nPolygon getCrossPointCC(Circle c1,Circle c2){\n  Polygon p(2);\n  double d=abs(c1.c-c2.c);\n  double a=acos((c1.r*c1.r+d*d-c2.r*c2.r)/(2*c1.r*d));\n  double t=arg(c2.c-c1.c);\n  p[0]=c1.c+polar(c1.r,t+a);\n  p[1]=c1.c+polar(c1.r,t-a);\n  return p;\n}\n\n// IN:2 ON:1 OUT:0\nint contains(Polygon g,Point p){\n  int n=g.size();\n  bool x=false;\n  for(int i=0;i<n;i++){\n    Point a=g[i]-p,b=g[(i+1)%n]-p;\n    if(fabs(cross(a,b)) < EPS && dot(a,b) < EPS) return 1;\n    if(a.y>b.y) swap(a,b);\n    if(a.y < EPS && EPS < b.y && cross(a,b) > EPS ) x = !x;\n  }\n  return (x?2:0);\n}\n\nPolygon andrewScan(Polygon s){\n  Polygon u,l;\n  if(s.size()<3) return s;\n  sort(s.begin(),s.end());\n  u.push_back(s[0]);\n  u.push_back(s[1]);\n  l.push_back(s[s.size()-1]);\n  l.push_back(s[s.size()-2]);\n  for(int i=2;i<(int)s.size();i++){\n    for(int n=u.size();n>=2&&ccw(u[n-2],u[n-1],s[i])!=CCW_CLOCKWISE;n--){\n      u.pop_back();\n    }\n    u.push_back(s[i]);\n  } \n  for(int i=s.size()-3;i>=0;i--){\n    for(int n=l.size();n>=2&&ccw(l[n-2],l[n-1],s[i])!=CCW_CLOCKWISE;n--){\n      l.pop_back();\n    }\n    l.push_back(s[i]);\n  }\n  reverse(l.begin(),l.end());\n  for(int i=u.size()-2;i>=1;i--) l.push_back(u[i]);\n  return l;\n} \n\nPolygon convex_hull(Polygon ps){\n  int n=ps.size();\n  sort(ps.begin(),ps.end(),sort_y);\n  int k=0;\n  Polygon qs(n*2);\n  for(int i=0;i<n;i++){\n    while(k>1&&cross(qs[k-1]-qs[k-2],ps[i]-qs[k-1])<0) k--;\n    qs[k++]=ps[i];\n  }\n  for(int i=n-2,t=k;i>=0;i--){\n    while(k>t&&cross(qs[k-1]-qs[k-2],ps[i]-qs[k-1])<0) k--;\n    qs[k++]=ps[i];\n  }\n  qs.resize(k-1);\n  return qs;\n}\n\ndouble diameter(Polygon s){\n  Polygon p=s;\n  int n=p.size();\n  if(n==2) return abs(p[0]-p[1]);\n  int i=0,j=0;\n  for(int k=0;k<n;k++){\n    if(p[i]<p[k]) i=k;\n    if(!(p[j]<p[k])) j=k;\n  }\n  double res=0;\n  int si=i,sj=j;\n  while(i!=sj||j!=si){\n    res=max(res,abs(p[i]-p[j]));\n    if(cross(p[(i+1)%n]-p[i],p[(j+1)%n]-p[j])<0.0){\n      i=(i+1)%n;\n    }else{\n      j=(j+1)%n;\n    }\n  }\n  return res;\n}\n\nbool isConvex(Polygon p){\n  bool f=1;\n  int n=p.size();\n  for(int i=0;i<n;i++){\n    int t=ccw(p[(i+n-1)%n],p[i],p[(i+1)%n]);\n    f&=t!=CCW_CLOCKWISE;\n  }\n  return f;\n}\n\ndouble area(Polygon s){\n  double res=0;\n  for(int i=0;i<(int)s.size();i++){\n    res+=cross(s[i],s[(i+1)%s.size()])/2.0;\n  }\n  return abs(res);\n}\n\ndouble area(Circle c1,Circle c2){\n  double d=abs(c1.c-c2.c);\n  if(c1.r+c2.r<=d+EPS) return 0;\n  if(d<=abs(c1.r-c2.r)){\n    double r=min(c1.r,c2.r);\n    return PI*r*r;\n  }\n  double rc=(d*d+c1.r*c1.r-c2.r*c2.r)/(2*d);\n  double th=acos(rc/c1.r);\n  double ph=acos((d-rc)/c2.r);\n  return c1.r*c1.r*th+c2.r*c2.r*ph-d*c1.r*sin(th);\n}\n\nPolygon convexCut(Polygon p,Line l){\n  Polygon q;\n  for(int i=0;i<(int)p.size();i++){\n    Point a=p[i],b=p[(i+1)%p.size()];\n    if(ccw(l.p1,l.p2,a)!=-1) q.push_back(a);\n    if(ccw(l.p1,l.p2,a)*ccw(l.p1,l.p2,b)<0)\n      q.push_back(getCrossPointLL(Line(a,b),l));\n  }\n  return q;\n}\n\nLine bisector(Point p1,Point p2){\n  Circle c1=Circle(p1,abs(p1-p2)),c2=Circle(p2,abs(p1-p2));\n  Polygon p=getCrossPointCC(c1,c2);\n  if(cross(p2-p1,p[0]-p1)>0) swap(p[0],p[1]);\n  return Line(p[0],p[1]);\n}\n\nVector translate(Vector v,double theta){\n  Vector res;\n  res.x=cos(theta)*v.x-sin(theta)*v.y;\n  res.y=sin(theta)*v.x+cos(theta)*v.y;\n  return res;\n}\n\nvector<Line> corner(Line l1,Line l2){\n  vector<Line> res;\n  if(isParallel(l1,l2)){\n    double d=getDistanceLP(l1,l2.p1)/2.0;\n    Vector v1=l1.p2-l1.p1;\n    v1=v1/v1.abs()*d;\n    Point p=l2.p1+translate(v1,90.0*(PI/180.0));\n    double d1=getDistanceLP(l1,p);\n    double d2=getDistanceLP(l2,p);\n    if(abs(d1-d2)>d){\n      p=l2.p1+translate(v1,-90.0*(PI/180.0));\n    }\n    res.push_back(Line(p,p+v1));\n  }else{\n    Point p=getCrossPointLL(l1,l2);\n    Vector v1=l1.p2-l1.p1,v2=l2.p2-l2.p1;\n    v1=v1/v1.abs();\n    v2=v2/v2.abs();\n    res.push_back(Line(p,p+(v1+v2)));\n    res.push_back(Line(p,p+translate(v1+v2,90.0*(PI/180.0))));\n  }\n  return res;\n}\n\nPolygon tangent(Circle c1,Point p2){\n  Circle c2=Circle(p2,sqrt(norm(c1.c-p2)-c1.r*c1.r));\n  Polygon p=getCrossPointCC(c1,c2);\n  sort(p.begin(),p.end());\n  return p;\n}\n\nvector<Line> tangent(Circle c1,Circle c2){\n  vector<Line> ls;\n  if(c1.r<c2.r) swap(c1,c2);\n  double g=norm(c1.c-c2.c);\n  if(equals(g,0)) return ls;\n  Point u=(c2.c-c1.c)/sqrt(g);\n  Point v=orth(u);\n  for(int s=1;s>=-1;s-=2){\n    double h=(c1.r+s*c2.r)/sqrt(g);\n    if(equals(1-h*h,0)){\n      ls.emplace_back(c1.c+u*c1.r,c1.c+(u+v)*c1.r);\n    }else if(1-h*h>0){\n      Point uu=u*h,vv=v*sqrt(1-h*h);\n      ls.emplace_back(c1.c+(uu+vv)*c1.r,c2.c-(uu+vv)*c2.r*s);\n      ls.emplace_back(c1.c+(uu-vv)*c1.r,c2.c-(uu-vv)*c2.r*s);\n    }\n  }\n  \n  return ls;\n}\n\n//END CUT HERE\n\n//Projection\nsigned CGL1A(){\n  Point p1,p2;\n  cin>>p1>>p2;\n  int q;\n  cin>>q;\n  while(q--){\n    Point p;\n    cin>>p;\n    cout<<project(Line(p1,p2),p)<<endl;\n  }\n  return 0;\n}\n/*\n  verified on 2017/12/31\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_A&lang=jp\n*/\n\n//Reflect\nsigned CGL1B(){\n  Point p1,p2;\n  cin>>p1>>p2;\n  int q;\n  cin>>q;\n  while(q--){\n    Point p;\n    cin>>p;\n    cout<<reflect(Line(p1,p2),p)<<endl;\n  }\n  return 0;\n}\n/*\n  verified on 2017/12/31\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_B&lang=jp\n*/\n\n//CCW\nsigned CGL1C(){\n  Point p0,p1;\n  cin>>p0>>p1;\n  int q;\n  cin>>q;\n  while(q--){\n    Point p2;\n    cin>>p2;\n    int t=ccw(p0,p1,p2);\n    if(t==CCW_COUNTER_CLOCKWISE) cout<<\"COUNTER_CLOCKWISE\"<<endl;\n    if(t==CCW_CLOCKWISE) cout<<\"CLOCKWISE\"<<endl;\n    if(t==CCW_ONLINE_BACK) cout<<\"ONLINE_BACK\"<<endl;\n    if(t==CCW_ONLINE_FRONT) cout<<\"ONLINE_FRONT\"<<endl;\n    if(t==CCW_ON_SEGMENT) cout<<\"ON_SEGMENT\"<<endl;\n  }\n  return 0;\n}\n/*\n  verified on 2017/12/31\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_C&lang=jp\n*/\n\n//Common Tangent\nsigned CGL7G(){\n  Circle c1,c2;\n  cin>>c1>>c2;\n  auto ls=tangent(c1,c2);\n  Polygon ps;\n  for(auto l:ls) ps.emplace_back(getCrossPointCL(c1,l)[0]);\n  sort(ps.begin(),ps.end());\n  for(auto p:ps) cout<<p<<endl;\n  return 0;\n}\n/*\n  verified on 2017/12/31\n  http://judge.u-aizu.ac.jp/onlinejudge//description.jsp?id=CGL_7_G&lang=jp\n*/\n\nsigned main(){\n  //CGL1A();\n  //CGL1B();\n  CGL1C();\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <math.h>\n#include <algorithm>\nusing namespace std;\n\nint main(){\n\tdouble x1,x2,xp,y1,y2,yp1,yp,naiseki,norm1,norm2,gaiseki;\n\tint q;\n\n\tscanf(\"%lf %lf %lf %lf\",&x1,&y1,&x2,&y2);\n\tscanf(\"%d\",&q);\n\n\tfor(int i=0; i < q; i++){\n\t\tscanf(\"%lf %lf\",&xp,&yp);\n\t\tnorm1 = sqrt((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1));\n\t\tnorm2 = sqrt((xp-x1)*(xp-x1)+(yp-y1)*(yp-y1));\n\t\tnaiseki = (xp-x1)*(x2-x1)+(yp-y1)*(y2-y1);\n\t\tgaiseki = (x2-x1)*(yp-y1)-(xp-x1)*(y2-y1);\n\t\tif(fabs(naiseki/(norm1*norm2)+1) < 0.00000001){\n\t\t\tprintf(\"ONLINE_BACK\\n\");\n\t\t}else if(fabs(naiseki-norm1*norm2)< 0.00000001){\n\t\t\tif(norm1 >= norm2){\n\t\t\t\tprintf(\"ON_SEGMENT\\n\");\n\t\t\t}else{\n\t\t\t\tprintf(\"ONLINE_FRONT\\n\");\n\t\t\t}\n\t\t}else if(gaiseki > 0){\n\t\t\tprintf(\"COUNTER_CLOCKWISE\\n\");\n\t\t}else{\n\t\t\tprintf(\"CLOCKWISE\\n\");\n\t\t}\n\t}\n\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<string>\n#include<algorithm>\n#include<cmath>\n#include<vector>\n#include<stack>\n#include<climits>\n#include<cstring>\n#include<queue>\nusing namespace std;\n\ndouble EPS = 1e-10;\n\ndouble add(double a, double b){\n\tif(abs(a+b) < EPS * (abs(a) + abs(b))) return 0;\n\treturn a+b;\n}\n\nstruct P{\n\tdouble x,y;\n\tP(){}\n\tP(double x, double y) : x(x), y(y){\n\t}\n\tP operator +(P p){\n\t\treturn P(add(x,p.x), add(y,p.y));\n\t}\n\tP operator -(P p){\n\t\treturn P(add(x,-p.x), add(y,-p.y));\n\t}\n\tP operator *(double d){\n\t\treturn P(d*x, d*y);\n\t}\n\tdouble dot (P p){\n\t\treturn add(x*p.x, y*p.y);\n\t}\n\tdouble det (P p){\n\t\treturn add(x*p.y, -y*p.x);\n\t}\n\tvoid print (){\n\t\tcout << x << \" \" << y <<endl;\n\t\treturn;\n\t}\n};\n\nvoid clockWise(P p0, P p1, P p2){\n\tP q1 = p1-p0;\n\tP q2 = p2-p0;\n\tif(!q1.det(q2)){\n\t\tdouble r;\n\t\tif(q2.x == 0 && q2.y == 0 ) {\n\t\t\tcout << \"ON_SEGMENT\" <<endl;\n\t\t\treturn ;\n\t\t}\n\t\tif(q2.x != 0) r =  q1.x/q2.x;\n\t\tif(q2.y != 0) r =  q1.y/q2.y;\n\t\tif(r<0){\n\t\t\tcout << \"ONLINE_BACK\"<< endl;\n\t\t}else if(r>=1){\n\t\t\tcout << \"ON_SEGMENT\"<<endl;\n\t\t}else{\n\t\t\tcout <<\"ONLINE_FRONT\" <<endl;\n\t\t}\n\t}else{\n\t\tif(q1.det(q2)>0){\n\t\t\tcout << \"COUNTER_CLOCKWISE\" <<endl;\n\t\t}else{\n\t\t\tcout <<\"CLOCKWISE\"<< endl;\n\t\t}\n\n\t}\n\treturn;\n}\n\nint main(){\n\tdouble x, y, q;\n\tcin >> x >> y ;\n\tP p0(x,y);\n\tcin >> x >> y ;\n\tP p1(x,y);\n\tcin >> q ;\n\n\tfor(int i=0;i<q;i++){\n\t\tcin >> x >> y ;\n\t\tP p2(x,y);\n\t\tclockWise(p0, p1, p2);\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "// -*- coding: utf-8 -*-\n// Last-Updated : <2014/06/20 08:17:51 by samui>\n\n#include <algorithm>\n#include <iostream>\n#include <cstdio>\n#include <string>\n#include <vector>\n#include <climits>\n#include <set>\n#include <bitset>\n\n#define MP(a, b) std::make_pair(a, b)\n#define X first\n#define Y second\n#define rep(i,n) for(int (i) = 0; (i) < (int)(n); ++(i))\n#define rer(i,l,n) for(int (i) = l; (i) <= (int)(n); ++(i))\n#define reu(i,l,n) for(int (i) = l; (i) < (int)(n); ++(i))\ntemplate<typename T,typename U> inline void amin(T &x,U y){ if(y<x) x = y;}\ntemplate<typename T,typename U> inline void amax(T &x,U y){ if(x<y) x = y;}\ntemplate<typename TYPE,std::size_t SIZE>\nstd::size_t len(const TYPE (&array)[SIZE]){return SIZE;}\n\n// 幾何ライブ\ntypedef long double LD;\nconst LD INF = 1e100;\nconst LD EPS = 1e-8;\nconst LD PI = acos(-1);\ntypedef std::pair<LD,LD> PLD;\ntypedef std::vector<std::pair<LD,LD>> VPLD2;\n\nclass Point{\npublic:\n  LD x,y;\n  Point(LD x = 0,LD y = 0): x(x),y(y){ };\n  Point operator + (Point p) {return Point(x+p.x,y+p.y);};\n  Point operator - (Point p) {return Point(x-p.x,y-p.y);};\n  Point operator * (LD a) {return Point(x*a,y*a);};\n  Point operator / (LD a) {return Point(x/a,y/a);};\n  LD abs(){return std::sqrt(x*x+y*y);};\n  Point unit(){LD u = abs();return Point(x,y)/u; };\n};\ntypedef Point Vector2D;\nLD dotProduct(const Vector2D a,const Vector2D b){\n  return a.x*b.x+a.y*b.y;\n}\nLD crossProduct(const Vector2D a, const Vector2D b){return a.x*b.y-a.y*b.x;}\nLD angle(Vector2D a,Vector2D b){\n  return acos(dotProduct(a,b)/(a.abs()*b.abs()));\n}\nLD norm(Vector2D a){return a.x*a.x+a.y*a.y;}\nPoint projection(Point a1,Point a2,Point a3){\n  // 点a3にたいする線分a1-a2上への射影をもとめる。\n  LD d = dotProduct(a3-a1,a2-a1)/norm(a2-a1);\n  return (a1+(a2-a1)*d);\n}\nPoint reflection(Point a1,Point a2,Point a3){\n  return (a3+(projection(a1,a2,a3)-a3)*2);\n}\nint ccw(Point a1,Point a2,Point a3){\n  Vector2D a = a2-a1;\n  Vector2D b = a3-a1;\n  if(crossProduct(a,b) > EPS) return 1; // a1,a2,a3が反時計まわり\n  if(crossProduct(a,b) < -EPS) return -1;//a1,a2,a3が時計まわり\n  if(dotProduct(a,b) < -EPS) return +2; //a3--a1--a2 で直線\n  if(norm(a)< norm(b)) return -2; // a1--a2--a3 の順で直線\n  return 0; // a1--a3--a2の順番\n}\n\n\nint main(int argc, char *argv[])\n{\n  Vector2D c,d;\n  int x0,x1,y0,y1;\n  std::cin>>x0>>y0>>x1>>y1;\n  c = Vector2D(x1-x0,y1-y0);\n  int t;\n  int a,b;\n  std::cin>>t;\n  while(t>0){\n    std::cin>>a>>b;\n    int e = ccw(Point(x0,y0),Point(x1,y1),Point(a,b));\n    if(e == 1) std::cout<<\"COUNTER_CLOCKWISE\"<<std::endl;\n    else if(e == -1) std::cout<<\"CLOCKWISE\"<<std::endl;\n    else if(e == 2) std::cout<<\"ONLINE_BACK\"<<std::endl;\n    else if(e == -2) std::cout<<\"ONLINE_FRONT\"<<std::endl;\n    else std::cout<<\"ON_SEGMENT\"<<std::endl;\n    t--;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\nint cross(int x1,int y1,int x2,int y2){return x1*y2-x2*y1;}\nint dot(int x1,int y1,int x2,int y2){return x1*x2+y1*y2;}\nint32_t main()\n{\n   //ios::sync_with_stdio(0); cin.tie(0);cout.tie(0);\n   int x1,y1,x2,y2; scanf(\"%d%d%d%d\",&x1,&y1,&x2,&y2);\n   int q; scanf(\"%d\",&q);\n   while(q--)\n   {\n   \t  int x,y; scanf(\"%d%d\",&x,&y);\n   \t  int p=cross(x-x1,y-y1,x2-x1,y2-y1);\n   \t  if(p<0) puts(\"COUNTER_CLOCKWISE\");\n   \t  else if(p>0) puts(\"CLOCKWISE\");\n   \t  else\n   \t  {\n   \t  \t\n   \t  \t if(dot(x-x1,y-y1,x2-x1,y2-y1)<0) puts(\"ONLINE_BACK\");\n   \t  \t else if(dot(x1-x2,y1-y2,x-x2,y-y2)<0) puts(\"ONLINE_FRONT\");\n   \t  \t else  puts(\"ON_SEGMENT\");  \n   \t  }\n   }\nreturn 0;\n}\n/*\n\n*/\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\nconst double eps=1e-9;\nstruct dot{\n\tdouble x,y;\n\tdouble len(){return sqrt(x*x+y*y);}\n\tdot(double a=0.0,double b=0.0){x=a,y=b;}\n\tdot operator +(const dot&b)const {return dot(x+b.x,y+b.y);}\n\tdot operator -(const dot&b)const {return dot(x-b.x,y-b.y);}\n\tdot operator *(const double&z)const {return dot(x*z,y*z);}\n\tbool operator <(const dot&b)const {return (x<b.x)||(x==b.x&&y<b.y);}\n};\nstruct line{\n\tdot x1,x2;\n};\ndouble chaji(dot x,dot y){\n\treturn x.x*y.y-x.y*y.x;\n}\ndouble neiji(dot x,dot y){\n\treturn x.x*y.x+x.y*y.y;\n}\ndouble cos(dot x,dot y){\n\tif (!x.len()||!y.len())return 0;\n\treturn neiji(x,y)/x.len()/y.len();\n}\ndot Projection(dot x,line y){//求x关于直线y的投影点（垂足） \n\ty.x2=y.x2-y.x1;\n\tx=x-y.x1;\n\tdouble len=cos(x,y.x2)*x.len()/y.x2.len();\n\ty.x2=y.x2*len;\n\treturn y.x2+y.x1;\n}\ndot Reflection(dot x,line y){//求x关于直线y的对称点 \n\tdot z=Projection(x,y);\n\treturn z*2-x;\n}\nint Counter_Clockwise(dot x,line y){//求两个向量的五种关系 \n\tx=x-y.x1;y.x2=y.x2-y.x1;\n\tif (chaji(y.x2,x)!=0){\n\t\tif (chaji(y.x2,x)>0)return 1;\n\t\treturn 2;\n\t} \n\tif (fabs(cos(x,y.x2)+1)<eps)return 3;\n\tif (x.len()>y.x2.len())return 4;\n\treturn 5;\n} \nint main(){\n\tline x;int T;\n\tscanf(\"%lf%lf%lf%lf\",&x.x1.x,&x.x1.y,&x.x2.x,&x.x2.y);\n\tscanf(\"%d\",&T);\n\twhile (T--){\n\t\tdot y;\n\t\tscanf(\"%lf%lf\",&y.x,&y.y);\n\t\tint ans=Counter_Clockwise(y,x);\n\t\tif (ans==1)puts(\"COUNTER_CLOCKWISE\");\n\t\tif (ans==2)puts(\"CLOCKWISE\");\n\t\tif (ans==3)puts(\"ONLINE_BACK\");\n\t\tif (ans==4)puts(\"ONLINE_FRONT\"); \n\t\tif (ans==5)puts(\"ON_SEGMENT\");\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\n\ntemplate<class T>bool chmax(T &a, const T &b) { if (a<b) { a=b; return 1; } return 0; }\ntemplate<class T>bool chmin(T &a, const T &b) { if (b<a) { a=b; return 1; } return 0; }\n\n#define FOR(i,a,b) for(ll i=(a);i<(b);++i)\n#define ALL(v) (v).begin(), (v).end()\n#define br() p(\"\")\n#define p(s) cout<<(s)<<endl\n#define pn(s) cout << (#s) << \" \" << (s) << endl\n#define p_yes() p(\"Yes\")\n#define p_no() p(\"No\")\n\nconst ll mod = 1e9 + 7;\nconst ll inf = 1e18;\n\n// 複素数雨セット\ntypedef complex<double> C;\n// 内積\ndouble dot(C a, C b){\n    return a.real() * b.real() + a.imag() * b.imag();\n}\n// 外積\ndouble cross(C a, C b){\n    return a.real() * b.imag() - a.imag() * b.real();\n}\ndouble round(double a){\n    if(abs(a) < 0.00000000001){\n        return 0;\n    }\n    else{\n        return a;\n    }\n}\n\nint main(){\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n\n    // input\n    ll x1, y1, x2, y2;\n    cin >> x1 >> y1 >> x2 >> y2;\n\n    C p0(x1, y1);\n    C p1(x2, y2);\n    C v = p1 - p0;\n        \n    ll Q; cin >> Q;\n    while(Q--){\n        ll x, y;\n        cin >> x >> y;\n        C p2(x, y);\n        C w = p2 - p0;\n\n        double a = cross(v, w);\n        a = round(a);\n\n        if(a>0){\n            p(\"COUNTER_CLOCKWISE\");\n        }\n        else if(a<0){\n            p(\"CLOCKWISE\");\n        }else{\n            double d = dot(v, w);\n            if(d<0){\n                p(\"ONLINE_BACK\");\n            }\n            else{\n                if(abs(w)>abs(v)){\n                    p(\"ONLINE_FRONT\");\n                }else{\n                    p(\"ON_SEGMENT\");\n                }\n            }\n        }\n    }\n    \n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i,n) for (int (i)=(0);(i)<(int)(n);++(i))\nusing ll = long long;\n//using P = pair<int, int>;\nusing namespace std;\n\nconst double eps = 1e-10;\n#define equals(a, b) (fabs((a)-(b)) < eps)\n\n// 点\nstruct Point\n{\n    double x, y;\n    Point(double x=0, double y=0): x(x), y(y) {}\n    double norm()\n    {\n        return x*x+y*y;\n    }\n    double abs()\n    {\n        return sqrt(norm());\n    }\n\n    Point operator+(const Point& p)const\n    {\n        return Point(x + p.x, y + p.y);\n    }\n    Point operator-(const Point& p)const\n    {\n        return Point(x - p.x, y - p.y);\n    }\n    Point operator*(const double k)const\n    {\n        return Point(x * k, y * k);\n    }\n    Point operator/(const double k)const\n    {\n        return Point(x / k, y / k);\n    }\n    bool operator<(const Point& p)const\n    {\n        if (x != p.x)\n        {\n            return x < p.x;\n        }\n        return y < p.y;\n    }\n    bool operator==(const Point& p)const\n    {\n        return fabs(x - p.x) < eps and fabs(y - p.y) < eps;\n    }\n};\n\nusing Vector = Point;\n\n// 内積\ndouble dot(Vector a, Vector b)\n{\n    return a.x * b.x + a.y * b.y;\n}\n\n// 外積\ndouble cross(Vector a, Vector b)\n{\n    return a.x * b.y - a.y * b.x;\n}\n// 線分\nstruct Segment\n{\n    Segment(Point a=Point(), Point b=Point()):p1(a), p2(b) {}\n    Point p1, p2;\n};\nusing Line = Segment;\n\n// 円\nclass Circle\n{\npublic:\n    Point c;\n    double r;\n    Circle(Point c = Point(), double r = 0.0): c(c), r(r) {}\n};\n\n// 多角形\nusing Polygon = vector<Point>;\n\n\n// ベクトルaとbの直行判定\n// Verify\nbool isOrthogonal(Vector a, Vector b) {\n    return equals(dot(a, b), 0.0);\n}\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n    return isOrthogonal(a1-a2, b1-b2);\n}\nbool isOrthogonal(Segment s1, Segment s2) {\n    return equals(dot(s1.p2-s1.p1, s2.p2-s2.p1), 0.0);\n}\n\n// ベクトルaとbの平行判定\n// Verify\nbool isParallel(Vector a, Vector b) {\n    return equals(cross(a, b), 0.0);\n}\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n    return isParallel(a1-a2, b1-b2);\n}\nbool isParallel(Segment s1, Segment s2) {\n    return equals(cross(s1.p2-s1.p1, s2.p2-s2.p1), 0.0);\n}\n\n// 射影\n// verify\nPoint project(Segment s, Point p) {\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / base.norm();\n    return s.p1 + base * r;\n}\n\n// 反射\n// verify\nPoint reflect(Segment s, Point p) {\n    return p + (project(s, p) - p) * 2.0;\n}\n\n// ２点間の距離\ndouble getDistance(Point a, Point b) {\n    return (a-b).abs();\n}\n\n// 直線Lと、点Pの距離\n// verify\ndouble getDistanceLP(Line l, Point p)\n{\n    return abs(cross(l.p2 - l.p1, p - l.p1) / Point(l.p2 - l.p1).abs());\n}\n\n// 線分sと点pの距離\ndouble getDistanceSP(Segment s, Point p) {\n    if (dot(s.p2 - s.p1, p-s.p1) < 0.0) return (p - s.p1).abs();\n    if (dot(s.p1 - s.p2, p-s.p2) < 0.0) return (p - s.p2).abs();\n    return getDistanceLP((Line)s, p);\n}\n\n\n// 反時計回り\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nint ccw(Point p0, Point p1, Point p2) {\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if (cross(a, b) > eps) return COUNTER_CLOCKWISE;\n    if (cross(a, b) < -eps) return CLOCKWISE;\n    if (dot(a, b) < -eps) return ONLINE_BACK;\n    if (a.norm() < b.norm()) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\n// 線分の交差判定\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 and ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\nbool intersect(Segment s1, Segment s2) {\n    return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\n// 線分s1と線分s2の距離\n//verify\ndouble getDistance(Segment s1, Segment s2) {\n    if (intersect(s1, s2)) return 0.0;\n    return min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)), min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\n// 線分の交点\nPoint getCrossPoint(Segment s1, Segment s2) {\n    Vector base = s2.p2 - s2.p1;\n    double d1 = abs(cross(base, s1.p1 - s2.p1));\n    double d2 = abs(cross(base, s1.p2 - s2.p1));\n    double t = d1 / (d1 + d2);\n    return s1.p1 + (s1.p2 - s1.p1) * t;\n}\n\n\n// 円cと線分lの交点\npair<Point, Point> getCrossPoints(Circle c, Line l) {\n    //assert(intersect(c, l)); ?\n    Vector pr = project(l, c.c);\n    Vector e = (l.p2 - l.p1) / (l.p2 - l.p1).abs();\n    double base = sqrt(c.r * c.r - (pr - c.c).norm());\n    return make_pair(pr + e * base, pr - e * base);\n}\n\n// 円と円の交点\ndouble arg(Vector p) { return atan2(p.y, p.x); }\nVector polar(double a, double r) { return Point(cos(r) * a, sin(r) * a); }\n\npair<Point, Point> getCrossPoints(Circle c1, Circle c2) {\n    // assert(intersect(c1, c2));\n    double d = (c1.c - c2.c).abs();\n    double a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2  * c1.r * d));\n    double t = arg(c2.c - c1.c);\n    return make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t-a));\n}\n\n// 点の内包\n// IN 2, ON 1, OUT 0\n\nint contains(Polygon g, Point p) {\n    int n = g.size();\n    bool x = false;\n    for (int i = 0; i < n; ++i) {\n        Point a = g[i] - p, b = g[(i + 1) % n] - p;\n        if (abs(cross(a, b)) < eps and dot(a, b) < eps) return 1;\n        if (a.y > b.y) swap(a, b);\n        if (a.y < eps and eps < b.y and cross(a, b) > eps) x = !x;\n    }\n    return (x ? 2 : 0);\n}\n\n// 凸包\nPolygon andrewScan(Polygon s) {\n    Polygon u, l;\n    if (s.size() < 3) return s;\n    sort(s.begin(), s.end());\n    u.push_back(s[0]);\n    u.push_back(s[1]);\n    l.push_back(s[s.size()-1]);\n    l.push_back(s[s.size()-2]);\n\n    for (int i = 2; i < s.size(); ++i) {\n        for (int n = u.size(); n >= 2 and ccw(u[n-2], u[n-1], s[i]) != CLOCKWISE; --n) {\n            u.pop_back();\n        }\n        u.push_back(s[i]);\n    }\n\n    for (int i = s.size()-3; i>=0; --i) {\n        for (int n = l.size(); n>=2 and ccw(l[n-2], l[n-1], s[i]) != CLOCKWISE; --n) {\n            l.pop_back();\n        }\n        l.push_back(s[i]);\n    }\n\n    reverse(l.begin(), l.end());\n    for (int i = u.size() - 2; i >= 1; --i) l.push_back(u[i]);\n    return l;\n}\n\n// 平面走査\n#define BOTTOM 0\n#define LEFT 1\n#define RIGHT 2\n#define TOP 3\n\nclass EndPoint {\npublic:\n    Point p;\n    int seg, st;\n    EndPoint() {}\n    EndPoint(Point p, int seg, int st) : p(p), seg(seg), st(st) {}\n\n    bool operator<(const EndPoint &ep) const {\n        if (p.y == ep.p.y) {\n            return st < ep.st;\n        }else return p.y < ep.p.y;\n    }\n};\n\nEndPoint EP[2 * 100000];\n\nint manhattanIntersection(vector<Segment> S) {\n    int n = S.size();\n\n    for (int i = 0, k = 0; i < n; ++i) {\n        if (S[i].p1.y == S[i].p2.y) {\n            if (S[i].p1.x > S[i].p2.x) swap(S[i].p1, S[i].p2);\n        } else if (S[i].p1.y > S[i].p2.y) swap(S[i].p1, S[i].p2);\n\n        if (S[i].p1.y == S[i].p2.y) {\n            EP[k++] = EndPoint(S[i].p1, i, LEFT);\n            EP[k++] = EndPoint(S[i].p2, i, RIGHT);\n        }\n        else {\n            EP[k++] = EndPoint(S[i].p1, i, BOTTOM);\n            EP[k++] = EndPoint(S[i].p2, i, TOP);\n        }\n    }\n\n    sort(EP, EP + (2 * n));\n\n    set<int> BT;\n    BT.insert(100000001); // 番兵\n    int cnt = 0;\n\n    for (int i = 0; i < 2 * n; ++i) {\n        if (EP[i].st == TOP) {\n            BT.erase(EP[i].p.x);\n        }\n        else if (EP[i].st == BOTTOM) {\n            BT.insert(EP[i].p.x);\n        }\n        else if (EP[i].st == LEFT) {\n            auto b = lower_bound(BT.begin(), BT.end(), S[EP[i].seg].p1.x);\n            auto e = upper_bound(BT.begin(), BT.end(), S[EP[i].seg].p2.x);\n            cnt += distance(b, e);\n        }\n    }\n\n    return cnt;\n\n}\n\nint main() {\n    int x1, y1, x2, y2;\n    cin >> x1 >> y1 >> x2 >> y2;\n    Point p0(x1, y1), p1(x2, y2);\n    int q;\n    cin >> q;\n    rep(i, q) {\n        int x, y;\n        cin >> x >> y;\n        Point p2(x, y);\n\n        int ret = ccw(p0, p1, p2);\n        if (ret == COUNTER_CLOCKWISE) cout << \"COUNTER_CLOCKWISE\" << endl;\n        else if (ret == CLOCKWISE) cout << \"CLOCKWISE\" << endl;\n        else if (ret == ONLINE_BACK) cout << \"ONLINE_BACK\" << endl;\n        else if (ret == ONLINE_FRONT) cout << \"ONLINE_FRONT\" << endl;\n        else cout << \"ON_SEGMENT\" << endl;\n    }\n\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "/* template.cpp {{{ */\n#include <bits/stdc++.h>\nusing namespace std;\n \n// #define int long long\n#define GET_MACRO(a, b, c, d, NAME, ...) NAME\n#define REP1(n) REP2(i_, n)\n#define REP2(i, n) REP3(i, 0, n)\n#define REP3(i, a, b) REP4(i, a, b, 1)\n#define REP4(i, a, b, s) for (long long i = (a); i < (long long)(b); i += (long long)(s))\n#define RREP1(n) RREP2(i_, n)\n#define RREP2(i, n) RREP3(i, 0, n)\n#define RREP3(i, a, b) RREP4(i, a, b, 1)\n#define RREP4(i, a, b, s) for (long long i = (b) - 1; i >= (long long)(a);  i -= (long long)(s))\n#define rep(...) GET_MACRO(__VA_ARGS__, REP4, REP3, REP2, REP1)(__VA_ARGS__)\n#define rrep(...) GET_MACRO(__VA_ARGS__, RREP4, RREP3, RREP2, RREP1)(__VA_ARGS__)\n#define fs first\n#define sc second\n#define all(c) std::begin(c), std::end(c)\n#define rall(c) (c).begin(), (c).end()\n#define pcnt(x) __builtin_popcountll(x)\n#define each(x, c) for (auto &&x : c)\n#define endl \"\\n\"\n#define y0 y0_\n#define y1 y1_\n#define yn yn_\n#define left left_\n#define right right_\n \n#define TMP_T template<typename T>\n#define TMP_TU template<typename T, typename U>\n#define TMP_Ts template<typename ...T>\n#define TMP_NTs template<size_t N, typename ...T>\n#define TMP_CT template<bool C, typename T = void>\n \n#ifndef DEBUG\n#define cerr no_output\nstruct NoOutput : ostream {\n  TMP_T ostream &operator<<(const T &){ return *this; }\n} no_output;\n#endif\n \nusing uint = unsigned;\nusing ll = long long;\nusing ull = unsigned long long;\nusing ld = long double;\nTMP_T using PQL = priority_queue<T, vector<T>, greater<T>>;\nTMP_T using PQG = priority_queue<T>;\nTMP_CT using enable_if_t = typename enable_if<C, T>::type;\n \nconst ll LLINF = 1e18 + 10;\n#ifndef int\nconst int INF = 1e9 + 10;\n#else\nconst int INF = LLINF;\n#endif\n \nconst int dx[] = {-1, 0, 1, 0, -1, 1, 1, -1};\nconst int dy[] = {0, -1, 0, 1, -1, -1, 1, 1};\n \nTMP_T inline constexpr T sq(T x){ return x * x; }\nTMP_TU inline T& chmin(T &x, U y){ if (x > y) x = y; return x; }\nTMP_TU inline T& chmax(T &x, U y){ if (x < y) x = y; return x; }\n \nTMP_NTs enable_if_t<(N >= sizeof...(T))> input_tuple(istream &, tuple<T...> &){}\nTMP_NTs enable_if_t<(N < sizeof...(T))> input_tuple(istream &is, tuple<T...> &x){ is >> get<N>(x); input_tuple<N + 1, T...>(is, x); }\nTMP_Ts ostream &operator>>(istream &is, tuple<T...> &x){ input_tuple<0, T...>(is, x); return is; }\nTMP_TU ostream &operator>>(istream &is, pair<T, U> &x){ return is >> x.first >> x.second; }\nTMP_NTs enable_if_t<(N >= sizeof...(T))> print_tuple(ostream &, const tuple<T...> &){}\nTMP_NTs enable_if_t<(N < sizeof...(T))> print_tuple(ostream &os, const tuple<T...> &x){ os << (N > 0 ? \" \" : \"\") << get<N>(x); print_tuple<N + 1, T...>(os, x); }\nTMP_Ts ostream &operator<<(ostream &os, const tuple<T...> &x){ print_tuple<0, T...>(os, x); return os; }\nTMP_TU ostream &operator<<(ostream &os, const pair<T, U> &x){ return os << x.first << \" \" << x.second; }\nTMP_T vector<T> reversed(const vector<T> &c){ auto d = c; reverse(all(d)); return d; }\nstring reversed(const string &s){ auto t = s; reverse(all(t)); return t; }\nTMP_T void unique(vector<T> &c){ sort(all(c)); c.erase(unique(all(c)), end(c)); }\nTMP_T vector<T> uniqued(const vector<T> &c){ auto d = c; unique(d); return d; }\n\n#undef TMP_T\n#undef TMP_TU\n#undef TMP_Ts\n#undef TMP_NTs\n#undef TMP_CT\n\nll gcd(ll a, ll b){ return b ? gcd(b, a % b) : a; }\nll lcm(ll a, ll b){ return a / gcd(a, b) * b; }\ntuple<ll, ll, ll> extgcd(ll a, ll b){\n  if (b){\n    ll g, x, y;\n    tie(g, x, y) = extgcd(b, a % b);\n    return make_tuple(g, y, x - a / b * y);\n  }\n  return make_tuple(a, 1, 0);\n}\nll invmod(ll a, ll m = 1000000007){\n  ll g, x;\n  tie(g, x, ignore) = extgcd(a, m);\n  return g == 1 ? (x + m) % m : 0;\n}\n\ninline ll in(){ ll x; cin >> x; return x; }\n \nstruct prepare {\n  prepare(){\n    ios::sync_with_stdio(false);\n    cout << fixed << setprecision(12);\n    cerr << fixed << setprecision(12);\n#ifndef DEBUG\n    cin.tie(nullptr);\n#endif\n  }\n} prepare_;\n/* }}} */\n/* geometry.cpp {{{ */\n/* object {{{ */\nusing Real = long double;\nusing Point = complex<Real>;\n\nstruct Line {\n  Point p, q;\n  Line(){}\n  Line(const Point &p, const Point &q): p(p), q(q){}\n};\n\nstruct Circle {\n  Point p;\n  Real r;\n  Circle(){}\n  Circle(const Point &p, Real r): p(p), r(r){}\n};\n\nusing Segment = Line;\nusing Polygon = vector<Point>;\n\nnamespace std {\n  bool operator<(const Point &a, const Point &b){\n    return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n  }\n}\n/* }}} */\n/* const {{{ */\nconst Real EPS = 1e-8l;\nconst Real PI = acos(-1.0l);\n/* }}} */\n/* compare {{{ */\nint sgn(Real x){\n  return (x > EPS) - (x < -EPS);\n}\n\nint sgn(Real x, Real y){\n  return sgn(x - y);\n}\n/* }}} */\n/* input {{{ */\nistream &operator>>(istream &is, Point &p){\n  Real x, y;\n  is >> x >> y;\n  p.real(x), p.imag(y);\n  return is;\n}\n\nistream &operator>>(istream &is, Line &l){\n  return is >> l.p >> l.q;\n}\n\nistream &operator>>(istream &is, Circle &c){\n  return is >> c.p >> c.r;\n}\n\nistream &operator>>(istream &is, Polygon &g){\n  each(p, g) is >> p;\n  return is;\n}\n/* }}} */\n/* output {{{ */\nostream &operator<<(ostream &os, const Point &p){\n  return os << p.real() << \" \" << p.imag();\n}\n\nostream &operator<<(ostream &os, const Line &l){\n  return os << l.p << \" \" << l.q;\n}\n\nostream &operator<<(ostream &os, const Circle &c){\n  return os << c.p << \" \" << c.r;\n}\n\nostream &operator<<(ostream &os, const Polygon &g){\n  for (int i = 0; i < (int)g.size(); i++){\n    os << g[i];\n    if (i + 1 < (int)g.size()) os << endl;\n  }\n  return os;\n}\n/* }}} */\n/* dot, cross {{{ */\nReal dot(const Point &a, const Point &b){\n  return real(conj(a) * b);\n}\n\nReal cross(const Point &a, const Point &b){\n  return imag(conj(a) * b);\n}\n/* }}} */\n/* ccw {{{ */\nint ccw(const Point &a, const Point &b, const Point &c){\n  Point u = b - a, v = c - a;\n  if (sgn(cross(u, v)) > 0) return 1;\n  if (sgn(cross(u, v)) < 0) return -1;\n  if (sgn(dot(u, v)) < 0) return 2;\n  if (sgn(norm(u), norm(v)) < 0) return -2;\n  return 0;\n}\n/* }}} */\n/* orthogonal, parallel {{{ */\nbool orthogonal(const Line &l, const Line &m){\n  return sgn(dot(l.q - l.p, m.q - m.p)) == 0;\n}\n\nbool parallel(const Line &l, const Line &m){\n  return sgn(cross(l.q - l.p, m.q - m.p)) == 0;\n}\n/* }}} */\n/* intersect {{{ */\nbool intersectLL(const Line &l, const Line &m){\n  return !parallel(l, m) ? true : parallel(l, Line(l.p, m.p));\n}\n\nbool intersectLS(const Line &l, const Segment &s){\n  return sgn(cross(l.q - l.p, s.p - l.p)) * sgn(cross(l.p - l.p, s.q - l.p)) <= 0;\n}\n\nbool intersectLP(const Line &l, const Point &p){\n  return ~ccw(l.p, l.q, p) & 1;\n}\n\nbool intersectSS(const Segment &s, const Segment &t){\n  return ccw(s.p, s.q, t.p) * ccw(s.p, s.q, t.q) <= 0\n      && ccw(t.p, t.q, s.p) * ccw(t.p, t.q, s.q) <= 0;\n}\n\nbool intersectSP(const Segment &s, const Point &p){\n  return !ccw(s.p, s.q, p);\n}\n/* }}} */\n/* project, refrect {{{ */\nPoint project(const Line &l, const Point &p){\n  Real t = dot(p - l.p, l.p - l.q) / norm(l.p - l.q);\n  return l.p + t * (l.p - l.q);\n}\n\nPoint reflect(const Line &l, const Point &p){\n  return p + 2.0l * (project(l, p) - p);\n}\n/* }}} */\n/* distance {{{ */\nReal distanceLP(const Line &l, const Point &p){\n  return abs(p - project(l, p));\n}\n\nReal distanceLL(const Line &l, const Line &m){\n  return intersectLL(l, m) ? 0.0l : distanceLP(l, m.p);\n}\n\nReal distanceLS(const Line &l, const Segment &s){\n  if (intersectLS(l, s)) return 0.0l;\n  return min(distanceLP(l, s.p), distanceLP(l, s.q));\n}\n\nReal distanceSP(const Segment &s, const Point &p){\n  if (sgn(dot(s.q - s.p, p - s.p)) <= 0) return abs(s.p - p);\n  if (sgn(dot(s.p - s.q, p - s.q)) <= 0) return abs(s.q - p);\n  return distanceLP(s, p);\n}\n\nReal distanceSS(const Segment &s, const Segment &t){\n  if (intersectSS(s, t)) return 0.0l;\n  return min({\n    distanceSP(s, t.p), distanceSP(s, t.q),\n    distanceSP(t, s.p), distanceSP(t, s.q)\n  });\n}\n/* }}} */\n/* cross point {{{ */\nPoint crossPoint(const Line &l, const Line &m){\n  Real a = cross(l.q - l.p, m.q - m.p);\n  Real b = cross(l.q - l.p, l.q - m.p);\n  if (sgn(a) == 0 && sgn(b) == 0) return m.p;\n  if (sgn(a) == 0) assert(false);\n  return m.p + b / a * (m.q - m.p);\n}\n/* }}} */\n/* }}} */\n\nstring s[] = {\"ONLINE_FRONT\", \"CLOCKWISE\", \"ON_SEGMENT\", \"COUNTER_CLOCKWISE\", \"ONLINE_BACK\"};\n\nsigned main()\n{\n  Point a, b, c;\n  int q;\n  cin >> a >> b >> q;\n  rep(q){\n    cin >> c;\n    cout << s[ccw(a, b, c) + 2] << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int SIZE = 210;\nconst double eps = 1e-10;\n\ntypedef complex<double> P;\n\ntypedef double P_type;\ntypedef complex<P_type> P;\nconst P_type P_eps = 1e-8; //整数の時はゼロ\n\nnamespace std{\n  template<class T> bool operator<(const complex<T> &a, const complex<T> &b){\n    return a.real() == b.real() ? a.imag() < b.imag() : a.real() < b.real();\n  }\n};\n\nP rotate(P p, double theta){\n  return p * P(cos(theta), sin(theta));\n}\n\n//内積\ndouble dot(P a, P b) {\n  return (a * conj(b)).real();\n}\n\n//外積\ndouble cross(P a, P b) {\n  return (conj(a) * b).imag();\n}\n\n//反時計回り\nint ccw(P a, P b, P c){\n  if(cross(b-a,c-a) > P_eps) return 1; //COUNTER_CLOCKWISE\n  if(cross(b-a,c-a) < -P_eps) return -1; //CLOCKWISE\n  if(dot(b-a,c-a) < P_eps) return -2; //ONLINE_BACK\n  if(dot(a-b,c-b) < P_eps) return 2; //ONLINE_FRONT\n  return 0; //ON_SEGMENT\n}\n\nint main(){\n  int x0, y0, x1, y1;\n  P p0, p1;\n\n  scanf(\"%d%d%d%d\",&x0,&y0,&x1,&y1);\n  p0 = P(x0, y0);\n  p1 = P(x1, y1);\n\n  int n;\n  scanf(\"%d\",&n);\n  \n  for(int i=0;i<n;i++){\n    int x2, y2;\n    scanf(\"%d%d\",&x2, &y2);\n\n    switch(ccw(p0,p1,P(x2,y2))){\n    case 1:\n      puts(\"COUNTER_CLOCKWISE\");\n      break;\n    case -1:\n      puts(\"CLOCKWISE\");\n      break;\n    case 2:\n      puts(\"ONLINE_FRONT\");\n      break;\n    case -2:\n      puts(\"ONLINE_BACK\");\n      break;\n    case 0:\n      puts(\"ON_SEGMENT\");\n      break;\n    }\n  }\n  \n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cmath>\nstruct point{\n\tdouble x, y;\n\tpoint(double _x = 0, double _y = 0){ x = _x, y = _y; }\n\tvoid read(){ scanf(\"%lf%lf\", &x, &y); }\n\tvoid print(char ch = '\\n'){ printf(\"%.10lf %.10lf\", x, y), putchar(ch); }\n\tpoint operator + (const point &rhs) const { return point(x + rhs.x, y + rhs.y); }\n\tpoint operator - (const point &rhs) const { return point(x - rhs.x, y - rhs.y); }\n}A, B, C;\nint q;\ndouble dot_product(point a, point b){\n\treturn a.x * b.x + a.y * b.y;\n}\ndouble cross_product(point a, point b){\n\treturn a.x * b.y - a.y * b.x;\n}\nint main(){\n\tA.read(), B.read();\n\tscanf(\"%d\", &q);\n\tfor (register int i = 1; i <= q; ++i){\n\t\tC.read();\n\t\tif (cross_product(B - A, C - A) > 0) puts(\"COUNTER_CLOCKWISE\");\n\t\telse if (cross_product(B - A, C - A) < 0) puts(\"CLOCKWISE\");\n\t\telse if (dot_product(B - A, C - A) < 0) puts(\"ONLINE_BACK\");\n\t\telse if (dot_product(B - A, B - A) < dot_product(C - A, C - A)) puts(\"ONLINE_FRONT\");\n\t\telse puts(\"ON_SEGMENT\");\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <map>\n#include <set>\n#include <list>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <cstdio>\n#include <string>\n#include <vector>\n#include <complex>\n#include <cstdlib>\n#include <cstring>\n#include <numeric>\n#include <sstream>\n#include <iostream>\n#include <algorithm>\n#include <functional>\n\n#define mp       make_pair\n#define pb       push_back\n#define all(x)   (x).begin(),(x).end()\n#define rep(i,n) for(int i=0;i<(n);i++)\n#define repi(i,a,b) for(int i = (a); i < (b); i++)\n\nusing namespace std;\n\nconst int INF=1<<29;\nconst double EPS=1e-9;\n\nconst int dx[]={1,0,-1,0},dy[]={0,-1,0,1};\n\ntypedef complex<double> point;\ntypedef vector<point> vertex;\n/*\nx 座標は p.real(), real(p), y 座標は p.imag(), imag(p) とする．\n足し算，引き算，スカラー倍は定義済み．\noperator < は入っていないので自分で namespace std に突っ込む．*/\nnamespace std{\n\tbool operator < (const point &lhs,const point &rhs){\n\t\tif(real(lhs) == real(rhs)){\n\t\t\treturn imag(lhs) < imag(rhs);\n\t\t}else{\n\t\t\treturn real(lhs) < real(rhs);\n\t\t}\n\t}\n}\n// 線分と点との距離\ndouble dist_linesegment_and_point(point a1,point a2,point b);\n\n\n\n// ベクタの長さ\ndouble vector_length(point a){\n\treturn abs(a);\n}\n\n// 二点間距離\ndouble point_distance(point a,point b){\n\treturn abs(a-b);\n}\n\n// 単位ベクトル\npoint unit_vector(point a){\n\treturn a / abs(a);\n}\n\n// 法線ベクトル\npair<point,point> normal_vector(point a){\n\tpoint n1 = a * point(0,1);\n\tpoint n2 = a * point(0,-1);\n\treturn make_pair(n1,n2);\n}\n\n// 点が一緒かどうか\nbool point_eq(point a,point b){\n\treturn abs(a-b) < EPS;\n}\n// 内積 (dot product) : a・b = |a||b|cosΘ\ndouble dot(point a,point b){\n\treturn real(conj(a)*b);\n}\n\n// 外積 (cross product) : |a×b| = |a||b|sinΘ\ndouble cross(point a,point b){\n\treturn imag(conj(a)*b);\n}\n//ラジアンに変換\ndouble radian(double angle){\n\treturn angle/180.0*M_PI;\n}\n//度数に変換\ndouble degree(double radian){\n\treturn radian*180.0/M_PI;\n}\n\n// a1,a2を端点とする線分(la)とb1,b2を端点(lb)とする線分の交差判定\nbool is_intersected_linesegment(point a1,point a2,point b1,point b2){\n\tif(max(a1.real(),a2.real()) + EPS < min(b1.real(),b2.real())) return false;\n\tif(max(b1.real(),b2.real()) + EPS < min(a1.real(),a2.real())) return false;\n\tif(max(a1.imag(),a2.imag()) + EPS < min(b1.imag(),b2.imag())) return false;\n\tif(max(b1.imag(),b2.imag()) + EPS < min(a1.imag(),a2.imag())) return false;\n\treturn (cross(a2-a1,b1-a1)*cross(a2-a1,b2-a1) < EPS) and\n\t(cross(b2-b1,a1-b1)*cross(b2-b1,a2-b1) < EPS);\n\n}\n\n\n// a1,a2を端点とする線分(la)とb1,b2を端点とする線分(lb)の交点計算\npoint intersection_point_linesegment(point a1,point a2,point b1,point b2) {\n\tif(a1 == b1 or a1 == b2) return a1;\n\tif(a2 == b1 or a2 == b2) return a2;\n\tpoint b = b2-b1;\n\tdouble d1 = abs(cross(b, a1-b1));\n\tdouble d2 = abs(cross(b, a2-b1));\n\tdouble t = d1 / (d1 + d2);\n\treturn a1 + (a2-a1) * t;\n}\n\n// 線分同士の最短距離\ndouble dist_linesegment_and_linesegment(point a1,point a2,point b1,point b2){\n\tif(is_intersected_linesegment(a1,a2,b1,b2)){\n\t\treturn 0;\n\t}\n\treturn min(min(dist_linesegment_and_point(a1,a2,b1),\n\t           dist_linesegment_and_point(a1,a2,b2)),\n\tmin(dist_linesegment_and_point(b1,b2,a1),\n\t    dist_linesegment_and_point(b1,b2,a2)));\n}\n\n\n// 2直線の直交判定 : a⊥b <=> dot(a, b) = 0\n// verify\nbool is_orthogonal(point a1,point a2,point b1,point b2) {\n\treturn abs(dot(a1-a2,b1-b2))< EPS;\n}\n\n// 2直線の平行判定 : a//b <=> cross(a, b) = 0\n//verify\nbool is_parallel(point a1,point a2,point b1,point b2) {\n\treturn abs(cross(a2-a1,b2-b1)) < EPS;\n}\n\n// a1,a2を通る直線とb1,b2を通る直線の交差判定\nbool is_intersected_line(point a1,point a2,point b1,point b2) {\n\treturn not is_parallel(a1,a2,b1,b2);\n}\n\n// a1,a2を通る直線とb1,b2を通る直線の交点計算\npoint intersection_line(point a1,point a2,point b1,point b2) {\n\tpoint a = a2 - a1,b = b2 - b1;\n\treturn a1 + a * cross(b, b1-a1) / cross(b, a);\n}\n\n// 直線と点との距離\ndouble dist_line_and_point(point a1,point a2,point b){\n\treturn abs(cross(a2-a1,b-a1)) / abs(a2-a1);\n}\n\n// 線分と点との距離\ndouble dist_linesegment_and_point(point a1,point a2,point b){\n\tif(dot(a2-a1,b-a1) < EPS) return abs(b-a1);\n\tif(dot(a1-a2,b-a2) < EPS) return abs(b-a2);\n\treturn dist_line_and_point(a1,a2,b);\n}\n\n// 直線と点の最短距離を実現する直線の点(すいせんの足)(みけんしょう)\npoint nearest_point_line_and_point(point a1,point a2,point b){\n\treturn a1 + (a2-a1) * dot((a2-a1),(b-a1)) / norm(a2-a1);\n}\n\n// 線分と点の最短距離を実現する線分嬢の点(みけんしょう)\npoint nearest_point_linesegment_and_point(point a1,point a2,point b){\n\tif(dot(a2-a1,b-a1) < EPS) return a1;\n\tif(dot(a1-a2,b-a2) < EPS) return a2;\n\treturn nearest_point_line_and_point(a1,a2,b);\n}\n// 円と線分の交差判定\nbool is_cross_linesegment_and_circle(point c,double r,point a1,point a2){\n\treturn (dist_linesegment_and_point(a1,a2,c) < r+EPS and\n\t        (r < abs(c-a1) + EPS or r < abs(c-a2) + EPS));\n}\n\n\n// 点の進行方向\nint ccw(point a,point b,point c){\n\tb -= a;c -= a;\n    if(cross(b,c) > 0) return +1;    // counter clockwise\n    if(cross(b,c) < 0) return -1;    // clockwise\n    if(dot(b,c) < 0) return +2;      // c -- a -- b\n    if(norm(b) < norm(c)) return -2; // a -- b -- c\n    return 0;\n}\n\n// 点が真に多角形(凸?)の中にはいっているか\nbool is_inner_point_vertex(const vector<point> &ps,point a){\n\tint cc = ccw(ps[0],ps[1],a);\n\tif(not(cc == 1 or cc == -1)) return false;\n\tfor(size_t i=0;i<ps.size();i++){\n\t\tif(cc != ccw(ps[i],ps[(i+1)%ps.size()],a)) return false;\n\t}\n\treturn true;\n}\n\n// 点が辺上、もしくは内部にある。(未検証)\nbool is_inner_point_vertex_or_line(const vector<point> &ps,point a){\n\tfor(size_t i=0;i<ps.size();i++){\n\t\tif(dist_linesegment_and_point(ps[i],ps[(i+1)%ps.size()],a) < EPS){\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn is_inner_point_vertex(ps,a);\n}\n\n\n// 凸包 (UVA 109)\nvector<point> convex_hull(vector<point> ps){\n\tint n = ps.size();\n\tint k = 0;\n\tsort(ps.begin(),ps.end());\n\tvector<point> ch(2*n);\n\tfor(int i=0;i<n;ch[k++] = ps[i++]){\n\t\twhile(k >= 2 and ccw(ch[k-2],ch[k-1],ps[i]) <= 0) --k;\n\t}\n\tfor(int i=n-2,t=k+1;i>=0;ch[k++]=ps[i--]){\n\t\twhile(k >= t and ccw(ch[k-2],ch[k-1],ps[i]) <= 0) --k;\n\t}\n\tch.resize(k-1);\n\treturn ch;\n}\n\n// remember,pts make convex.\n// (http://judge.u-aizu.ac.jp/onlinejudge/cdescription.jsp?cid=ACAC002&pid=C)\ndouble convex_diameter(const vector<point>& pts){\n\tconst int n = pts.size();\n    int is=0,js=0; // initial antipode.\n    for(int i=1;i<n;i++){\n    \tif(pts[i].imag() > pts[is].imag()) is = i;\n    \tif(pts[i].imag() < pts[js].imag()) js = i;\n    }\n    double maxd = abs(pts[is]-pts[js]);\n    int i,j,maxi,maxj;\n    i = maxi = is;\n    j = maxj = js;\n    do{\n    \tif(cross(pts[(i+1)%n]-pts[i],\n    \t   pts[(j+1)%n]-pts[j]) >= 0){\n    \t\tj = (j+1)%n;\n    }else{\n    \ti = (i+1)%n;\n    }\n    if(abs(pts[i]-pts[j]) > maxd){\n    \tmaxd = abs(pts[i]-pts[j]);\n    \tmaxi = i;maxj = j;\n    }\n} while(not(i == is and j == js));\n    // pts[maxi],pts[maxj] is pair of max diff.\nreturn maxd;\n}\n\n// 円と円の交点(2点ある前提)\nvector<point> circles_point(point c1,double r1,point c2,double r2){\n\tdouble d = abs(c1-c2);\n\tdouble s = (r1+r2+d) / 2;\n\tdouble S = sqrt(s*(s-r1)*(s-r2)*(s-d));\n\tdouble h = 2 * S / d;\n\tpoint v = (c2-c1) / (abs(c2-c1));\n\n\tdouble m = sqrt(r1*r1 - h*h);\n\n\tvector<point> ret;\n\tret.push_back(c1 + m*v+h*v*point(0,1));\n\tret.push_back(c1 + m*v-h*v*point(0,1));\n\treturn ret;\n}\n\n// clockwiseだと負\ndouble triangle_area(point a,point b,point c){\n\treturn cross(b-a,c-a)/2;\n}\n\n// clockwiseだと負\ndouble vertex_area(vector<point> v){\n\tdouble ret = 0;\n\tfor(int i=1;i<v.size()-1;i++){\n\t\tret += triangle_area(v[0],v[i],v[i+1]);\n\t}\n\treturn ret;\n}\n/*多角形の面積を求める*/\n//verify\ndouble area_vertex(const vertex& g){\n\tdouble S =0;\n\tfor(int i =0;i <g.size();i++){\n\t\tS +=(cross(g[i],g[(i+1)%g.size()]));\n\t}\n\treturn abs(S/2.0);\n}\n//円同士が互いに含まれているかどうか\n//中心が(xa,ya)で半径r1の円Aと、中心が(xb,yb) で半径 r2 の円 B が与えられたとき、 B が A の中にあるとき 2、A が B の中にあるとき -2、A の円周と B の円周が交わっている場合 1、A と B が重なっていないとき 0 \n//verify\nint Circles_Intersection(point a,double r1,point b,double r2){\n\tdouble dp =abs(a-b);//中心間の距離\n\tdouble dr =r1+r2;//円の半径の合計\n\tif(dp >dr){\n\t\treturn 0;\n\t}else if(dp +r1 <r2){\n\t\treturn -2;\n\t}else if(dp +r2 <r1){\n\t\treturn 2;\n\t}else if(dp <=dr){\n\t\treturn 1;\n\t}\n\treturn -100;\n}\n\nint main(){\n\tdouble x1,y1,x2,y2;\n\tcin>>x1>>y1>>x2>>y2;\n\tpoint p1(x1,y1),p2(x2,y2);\n\tint q;\n\tcin>>q;// 点の進行方向\n/*int ccw(point a,point b,point c){\n\tb -= a;c -= a;\n    if(cross(b,c) > 0) return +1;    // counter clockwise\n    if(cross(b,c) < 0) return -1;    // clockwise\n    if(dot(b,c) < 0) return +2;      // c -- a -- b\n    if(norm(b) < norm(c)) return -2; // a -- b -- c\n    return 0;\n}*/\n\tfor(int i =0;i <q;i++){\n\t\tdouble x3,y3;\n\t\tcin>>x3>>y3;\n\t\tpoint p3(x3,y3);\n\t\tint tmp =ccw(p1,p2,p3);\n\t\tif(tmp==1){\n\t\t\tcout <<\"COUNTER_CLOCKWISE\"<<endl;\n\t\t}else if(tmp==-1){\n\t\t\tcout <<\"CLOCKWISE\"<<endl;\n\t\t}else if(tmp==2){\n\t\t\tcout <<\"ONLINE_BACK\"<<endl;\n\t\t}else if(tmp==-2){\n\t\t\tcout <<\"ONLINE_FRONT\"<<endl;\n\t\t}else{\n\t\t\tcout <<\"ON_SEGMENT\"<<endl;\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define loop(i, s, e) for(ll i = s;i < e;i++)\n\n#include <iostream>\n#include <iomanip>\n#include <set>\n#include <vector>\n#include <queue>\n#include <stack>\n#include <utility>\n#include <algorithm>\n#include <map>\n#include <cmath>\n\nusing namespace std;\n\ntypedef long long signed ll;\n\n#define NAN_M 0x800000000000\n\ntemplate<typename T>\nclass Vector2D {\npublic:\n    T x;\n    T y;\n\n    Vector2D() {\n        x = y = 0;\n    }\n\n    Vector2D(T x_, T y_) {\n        x = x_;\n        y = y_;\n    }\n\n    T operator*(const Vector2D<T> *e) {\n        return this->x * e->x + this->y * e->y;\n    }\n\n    Vector2D<T> operator-(const Vector2D<T> *e) {\n        return Vector2D<T>(this->x - e->x, this->y - e->y);\n    }\n\n    Vector2D<T> operator+(const Vector2D<T> *e) {\n        return Vector2D<T>(this->x + e->x, this->y + e->y);\n    }\n\n    T operator*(const Vector2D<T> e) {\n        return this->x * e.x + this->y * e.y;\n    }\n\n    Vector2D<T> operator-(const Vector2D<T> e) {\n        return Vector2D<T>(this->x - e.x, this->y - e.y);\n    }\n\n    Vector2D<T> operator+(const Vector2D<T> e) {\n        return Vector2D<T>(this->x + e.x, this->y + e.y);\n    }\n\n    Vector2D<T> operator*(const T r) {\n        return Vector2D<T>(this->x * r, this->y * r);\n    }\n\n    Vector2D<T> operator/(const T r) {\n        return Vector2D<T>(this->x / r, this->y / r);\n    }\n\n    double abs() {\n        return sqrt(x * x + y * y);\n    }\n\n    T abs2() {\n        return x * x + y * y;\n    }\n\n    T cross(Vector2D<T> e) {\n        if(x * e.y >= y * e.x) return (x * e.y) - (y * e.x);\n        else return (y * e.x) - (x * e.y);\n    }\n\n    double cos(Vector2D<T> e) {\n        if((e.abs() * abs()) == 0) return NAN_M;\n        return (e * (*this)) / (e.abs() * abs());\n    }\n\n    double sin(Vector2D<T> e) {\n        if((e.abs() * abs()) == 0) return NAN_M;\n        return ((x * e.y) - (y * e.x)) / (e.abs() * abs());\n    }\n};\n\ntypedef Vector2D<double> vdd;\n\ndouble dist__(double x0, double y0, double x1, double y1, double xx, double yy) {\n    int b = 0;\n    vdd p[3] = {vdd(x0, y0), vdd(x1, y1), vdd(xx, yy)};\n    if (((p[0] - p[1]) * (p[2] - p[1])) < 0) b = -1;\n    if (((p[1] - p[0]) * (p[2] - p[0])) < 0) b = 1;\n    if (b == 1) return (p[2] - p[0]).abs();\n    if (b == -1) return (p[2] - p[1]).abs();\n    return (p[1] - p[0]).cross(p[2] - p[0]) / (p[1] - p[0]).abs();\n}\n\ndouble dist(double x0, double y0, double x1, double y1, double xx, double yy){\n    double res = dist__(x0,y0,x1,y1,xx,yy);\n    return res;\n}\nint main() {\n    int q;\n    vdd base,p;\n    cin >> base.x >> base.y >> p.x >> p.y;\n    cin >> q;\n    loop(i, 0, q) {\n        vdd z;\n        cin >> z.x >> z.y;\n        double cos = (p-base).cos(z-base);\n        double sin = (p-base).sin(z-base);\n        double cosr = (base-p).cos(z-p);\n        if(cos == NAN_M || cosr == NAN_M)\n            cout << \"ON_SEGMENT\" << endl;\n        else if(abs(cos - 1) < 0.000000001 && abs(cosr - 1) < 0.000000001)\n            cout << \"ON_SEGMENT\" << endl;\n        else if(abs(cos - 1) < 0.000000001)\n            cout << \"ONLINE_FRONT\" << endl;\n        else if(abs(cos + 1) < 0.000000001)\n            cout << \"ONLINE_BACK\" << endl;\n        else if(sin < 0)\n            cout << \"CLOCKWISE\" << endl;\n        else if(sin > 0)\n            cout << \"COUNTER_CLOCKWISE\" << endl;\n        else\n            cout << \"ON_SEGMENT\" << endl;\n    }\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#define EPS (1e-10)\n#include <cmath>\n#include <iostream>\n#include <iomanip>\nusing namespace std;\n\nint main() {\n\tcin.tie(0); ios::sync_with_stdio(false);\n\tint x0, y0, x1, y1; cin >> x0 >> y0 >> x1 >> y1;\n\tint q; cin >> q;\n\tlong double theta1, theta2;\n\ttheta1 = atan2(y1 - y0, x1 - x0);\n\twhile (q--) {\n\t\tint x2, y2; cin >> x2 >> y2;\n\t\tif (x2 == 0 && y2 == 0) { cout << \"ON_SEGMENT\" << endl; continue; }\n\t\ttheta2 = atan2(y2 - y0, x2 - x0);\n\t\tlong double rev_theta = theta1 >= 0 ? theta1 - M_PI : theta1 + M_PI;\n\t\t//cout << fixed << setprecision(15) << \"theta1 = \" << theta1 << endl << \"theta2 = \" << theta2 << endl << \"rev_theta = \" << rev_theta << endl;\n\t\tif (theta2 - theta1 == M_PI || theta2 - theta1 == -M_PI) { cout << \"ONLINE_BACK\" << endl; continue; }\n\t\tif (theta1 == theta2) {\n\t\t\tlong double dist1 = hypot(x1 - x0, y1 - y0), dist2 = hypot(x2 - x0, y2 - y0);\n\t\t\tif (dist2 > dist1) { cout << \"ONLINE_FRONT\" << endl; continue; }\n\t\t\telse { cout << \"ON_SEGMENT\" << endl; continue; }\n\t\t}\n\t\tif (theta1 >= 0) {\n\t\t\tif (theta2 > theta1 || theta2 < rev_theta) { cout << \"COUNTER_CLOCKWISE\" << endl; continue; }\n\t\t\tif (theta2 < theta1 && theta2 > rev_theta) { cout << \"CLOCKWISE\" << endl; continue; }\n\t\t}\n\t\telse {\n\t\t\tif (theta2 > theta1 && theta2 < rev_theta) { cout << \"COUNTER_CLOCKWISE\" << endl; continue; }\n\t\t\tif (theta2 < theta1 || theta2 > rev_theta) { cout << \"CLOCKWISE\" << endl; continue; }\n\t\t}\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n/*\n#ifndef ONLINE_JUDGE\n\t#include <boost/multiprecision/cpp_int.hpp>\n\t#include <boost/multiprecision/cpp_dec_float.hpp>\n\tusing bll = boost::multiprecision::cpp_int;\n\tusing bdouble = boost::multiprecision::cpp_dec_float_100;\n#endif\n*/\n#ifdef LOCAL_DEV\n\tvoid debug_impl() { std::cerr << std::endl; }\n\ttemplate<typename Head, typename... Tail> void debug_impl(Head head, Tail... tail) { std::cerr << \" \" << head << (sizeof...(tail) ? \",\" : \"\"); debug_impl(tail...); }\n\t#define debug(...) { std::cerr << std::boolalpha << \"(\" << #__VA_ARGS__ << \") =\"; debug_impl(__VA_ARGS__); std::cerr << std::noboolalpha; }\n#else\n\t#define debug(...) {}\n#endif\n#ifdef LOCAL_TEST\n\t#define BOOST_STACKTRACE_USE_ADDR2LINE\n\t#define BOOST_STACKTRACE_ADDR2LINE_LOCATION /usr/local/opt/binutils/bin/addr2line\n\t#define _GNU_SOURCE\n\t#include <boost/stacktrace.hpp>\n\ttemplate<typename T> class dvector : public std::vector<T> {\n\tpublic:\n\t\tdvector() : std::vector<T>() {}\n\t\texplicit dvector(size_t n, const T& value = T()) : std::vector<T>(n, value) {}\n\t\tdvector(const std::vector<T>& v) : std::vector<T>(v) {}\n\t\tdvector(const std::initializer_list<T> il) : std::vector<T>(il) {}\n\t\tdvector(const typename std::vector<T>::iterator first, const typename std::vector<T>::iterator last) : std::vector<T>(first, last) {}\n\t\tdvector(const std::string::iterator first, const std::string::iterator last) : std::vector<T>(first, last) {}\n\t\tT& operator[](size_t n) {\n\t\t\ttry { return this->at(n); } catch (const std::exception& e) {\n\t\t\t\tstd::cerr << boost::stacktrace::stacktrace() << std::endl; return this->at(n);\n\t\t\t}\n\t\t}\n\t\tconst T& operator[](size_t n) const {\n\t\t\ttry { return this->at(n); } catch (const std::exception& e) {\n\t\t\t\tstd::cerr << boost::stacktrace::stacktrace() << std::endl; return this->at(n);\n\t\t\t}\n\t\t}\n\t};\n\tclass dbool {\n\tprivate:\n\t\tbool boolvalue;\n\tpublic:\n\t\tdbool() : boolvalue(false) {}\n\t\tdbool(bool b) : boolvalue(b) {}\n\t\tdbool(const dbool &b) : boolvalue(b.boolvalue) {}\n\t\toperator bool&() { return boolvalue; }\n\t\toperator const bool&() const { return boolvalue; }\n\t};\n\ttemplate<typename T> std::ostream& operator<<(std::ostream& s, const dvector<T>& v) {\n\t\tfor (int i = 0, len = v.size(); i < len; ++i){ s << v[i]; if (i < len - 1) s << \"\\t\"; } return s; }\n\ttemplate<typename T> std::ostream& operator<<(std::ostream& s, const dvector< dvector<T> >& vv) {\n\t\tfor (int i = 0, len = vv.size(); i < len; ++i){ s << vv[i] << std::endl; } return s; }\n\ttemplate<typename T> std::ostream& operator<<(std::ostream& s, const std::set<T>& se) {\n\t\ts << \"{ \"; for (auto itr = se.begin(); itr != se.end(); ++itr){ s << (*itr) << \"\\t\"; } s << \"}\"; return s; }\n\ttemplate<typename T> std::ostream& operator<<(std::ostream& s, const std::multiset<T>& se) {\n\t\ts << \"{ \"; for (auto itr = se.begin(); itr != se.end(); ++itr){ s << (*itr) << \"\\t\"; } s << \"}\"; return s; }\n\ttemplate<typename T1, typename T2> std::ostream& operator<<(std::ostream& s, const std::map<T1, T2>& m) {\n\t\ts << \"{\" << std::endl; for (auto itr = m.begin(); itr != m.end(); ++itr){ s << \"\\t\" << (*itr).first << \" : \" << (*itr).second << std::endl; } s << \"}\"; return s; }\n\ttemplate<typename T1, typename T2> std::ostream& operator<<(std::ostream& s, const std::pair<T1, T2>& p) { \n\t\treturn s << \"(\" << p.first << \", \" << p.second << \")\"; }\n\t#define vector dvector\n\t#define bool dbool\n\tclass SIGFPE_exception : std::exception {};\n\tclass SIGSEGV_exception : std::exception {};\n\tvoid catch_SIGFPE(int e) { std::cerr << boost::stacktrace::stacktrace() << std::endl; throw SIGFPE_exception();\t}\n\tvoid catch_SIGSEGV(int e) { std::cerr << boost::stacktrace::stacktrace() << std::endl; throw SIGSEGV_exception(); }\n\tsigned convertedmain();\n\tsigned main() { signal(SIGFPE, catch_SIGFPE); signal(SIGSEGV, catch_SIGSEGV); return convertedmain(); }\n\t#define main() convertedmain()\n#endif\n//#define int long long\nusing ll = long long;\n//constexpr int INF = 1e9;//INT_MAX=(1<<31)-1=2147483647\nconstexpr ll INF = (ll)1e18;//(1LL<<63)-1=9223372036854775807\nconstexpr ll MOD = (ll)1e9 + 7;\nconstexpr double EPS = 1e-9;\nconstexpr int dx[4] = {1, 0, -1, 0};\nconstexpr int dy[4] = {0, 1, 0, -1};\n#define p(var) std::cout<<var<<std::endl\n#define rep(i, n)   for(ll i=0, i##_length=(n); i< i##_length; ++i)\n#define repeq(i, n) for(ll i=1, i##_length=(n); i<=i##_length; ++i)\n#define rrep(i, n)   for(ll i=(n)-1; i>=0; --i)\n#define rrepeq(i, n) for(ll i=(n)  ; i>=1; --i)\n#define all(v) (v).begin(), (v).end()\n#define rall(v) (v).rbegin(), (v).rend()\n#define uniq(v) (v).erase(unique((v).begin(), (v).end()), (v).end());\ntemplate<typename T> inline void pv(vector<T> &v) { for(ll i=0, N=v.size(); i<N; i++) std::cout << v[i] << \" \\n\"[i==N-1]; }\ntemplate<typename T> inline T gcd(T a, T b) { return b ? gcd(b,a%b) : a; }\ntemplate<typename T> inline T lcm(T a, T b) { return a / gcd(a,  b) * b; }\ntemplate<typename T> inline bool chmax(T &a, T b) { return a < b && (a = b, true); }\ntemplate<typename T> inline bool chmin(T &a, T b) { return a > b && (a = b, true); }\n\n/*-----8<-----template-----8<-----*/\n\n//点、ベクトル\nclass Point {\npublic:\n\tdouble x,y;\n\tPoint(double x=0., double y=0.) : x(x), y(y) {}\n\tPoint operator + (Point p) {return Point(x+p.x, y+p.y);}\n\tPoint operator - (Point p) {return Point(x-p.x, y-p.y);}\n\tPoint operator * (Point p) {return Point(x*p.x, y*p.y);}\n\tPoint operator / (Point p) {return Point(x/p.x, y/p.y);}\n\n\tdouble abs(){ return sqrt(norm()); }\n\tdouble norm(){ return x*x + y*y; }\n\n\tbool operator < (const Point &p) const {\n\t\treturn x!=p.x ? x<p.x : y<p.y;\n\t}\n\tbool operator == (const Point &p) const {\n\t\treturn fabs(x-p.x)<EPS && fabs(y-p.y)<EPS;\n\t}\n\t\n};\n//using Vector = Point;\ntypedef Point Vector;\n\n//線分、直線\nclass Segment {\npublic:\n\tPoint p1,p2;\n\tSegment() {}\n\tSegment(Point p1, Point p2) : p1(p1), p2(p2) {}\n};\n//using Line = Segment;\ntypedef Segment Line;\n\n//ベクトルの内積\ndouble dot(Vector a, Vector b){\n\treturn a.x*b.x + a.y*b.y;\n}\n//ベクトルの外積\ndouble cross(Vector a, Vector b){\n\treturn a.x*b.y - a.y*b.x;\n}\ndouble equals(double a,double b){ return fabs(a-b)<EPS; }\n//直交判定\nbool isOrthogonal(Vector a,Vector b){\n\treturn equals(dot(a,b), 0.0);\n}\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n\treturn isOrthogonal(a1-a2, b1-b2);\n}\nbool isOrthogonal(Segment s1,Segment s2){\n\treturn equals(dot(s1.p2-s1.p1, s2.p2-s2.p1), 0.0);\n}\n//平行判定\nbool isParallel(Vector a,Vector b){\n\treturn equals(cross(a,b), 0.0);\n}\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n\treturn isParallel(a1-a2, b1-b2);\n}\nbool isParallel(Segment s1,Segment s2){\n\treturn equals(cross(s1.p2-s1.p1, s2.p2-s2.p1), 0.0);\n}\n//射影\nPoint project(Segment s,Point p){\n\tVector base = s.p2-s.p1;\n\tdouble r = dot(p-s.p1, base)/base.norm();\n\tPoint rp(r,r);\n\treturn base*rp + s.p1;\n}\n//反射\nPoint reflect(Segment s,Point p){\n\tPoint x2(2.,2.);\n\treturn p + (project(s,p)-p)*x2;\n}\n\n//p0,p1,p2が反時計回りになる\nstatic const int COUNTER_CLOCKWISE = 1;\n//p0,p1,p2が時計回りになる\nstatic const int CLOCKWISE = -1;\n//p2,p0,p1がこの順で同一直線状にある\nstatic const int ONLINE_BACK = 2;\n//p0,p1,p2がこの順で同一直線状にある\nstatic const int ONLINE_FRONT = -2;\n//p2が線分p0p1上にある\nstatic const int ON_SEGMENT = 0;\nint ccw(Point p0, Point p1, Point p2){\n\tVector a=p1-p0;\n\tVector b=p2-p0;\n\tif(cross(a,b)>EPS)return COUNTER_CLOCKWISE;\n\tif(cross(a,b)<-EPS)return CLOCKWISE;\n\tif(dot(a,b)<-EPS)return ONLINE_BACK;\n\tif(a.norm()<b.norm())return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\n//線分p1p2と線分p3p4の交差判定\n//端点が他方の線分上にある場合、線分二つが平行に重なる場合も交差しているとみなす\nbool intersect(Point p1, Point p2, Point p3, Point p4){\n\treturn (ccw(p1,p2,p3)*ccw(p1,p2,p4)<=0 && ccw(p3,p4,p1)*ccw(p3,p4,p2)<=0);\n}\nbool intersect(Segment s1, Segment s2){\n\treturn intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\n//二点間の距離\ndouble getDistance(Point a,Point b){\n\treturn (a-b).abs();\n}\n//点と直線の距離\ndouble getDistanceLP(Line l,Point p){\n\treturn fabs(cross(l.p2-l.p1, p-l.p1)) / (l.p2-l.p1).abs();\n}\n//点と線分の距離\ndouble getDistanceSP(Segment s,Point p){\n\tif(dot(s.p2-s.p1, p-s.p1)<0.)return (p-s.p1).abs();\n\tif(dot(s.p1-s.p2, p-s.p2)<0.)return (p-s.p2).abs();\n\treturn getDistanceLP(s,p);\n}\n//線分と線分の距離\ndouble getDistance(Segment s1,Segment s2){\n\tif(intersect(s1,s2))return 0.;\n\treturn min({getDistanceSP(s1,s2.p1), getDistanceSP(s1,s2.p2), getDistanceSP(s2,s1.p1), getDistanceSP(s2,s1.p2)});\n}\n\n//線分s1と線分s2の交点\nPoint getCrossPoint(Segment s1, Segment s2){\n\tVector base = s2.p2-s2.p1;\n\tdouble d1=fabs(cross(base, s1.p1-s2.p1));\n\tdouble d2=fabs(cross(base, s1.p2-s2.p1));\n\tdouble t=d1/(d1+d2);\n\treturn s1.p1+(s1.p2-s1.p1)*t;\n}\n\n//円\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c=Point(), double r=0.) : c(c), r(r) {}\n};\n//円cと線分lの交点二つ\npair<Point,Point> getCrossPoints(Circle c, Line l){\n\t//交点が存在するか\n\tassert(getDistanceLP(l,c.c)<c.r);\n\tVector pr=project(l, c.c);\n\tVector e=(l.p2-l.p1)/(l.p2-l.p1).abs();\n\tdouble base=sqrt(c.r*c.r-(pr-c.c).norm());\n\treturn {pr+e*base, pr-e*base};\n}\n\ntypedef vector<Point> Polygon;\n//多角形gと点pの内包関係を返す\nstatic const int INSIDE = 2;\nstatic const int ONLINE = 1;\nstatic const int OUTSIDE = 0;\nll contains(Polygon &g, Point p){\n\tll n=g.size();\n\tbool x=false;\n\tfor(ll i=0; i<n; i++){\n\t\tPoint a=g[i]-p, b=g[(i+1)%n]-p;\n\t\tif(fabs(cross(a,b)) < EPS && dot(a,b) < EPS) return ONLINE;\n\t\tif(a.y > b.y) swap(a,b);\n\t\tif(a.y < EPS && EPS < b.y && cross(a,b) > EPS) x=!x;\n\t}\n\treturn (x ? INSIDE : OUTSIDE);\n}\n\n//点の集合sに対する凸包を返す\nPolygon andrewScan(Polygon s){\n\tPolygon u,l;\n\tif(s.size()<3) return s;\n\tsort(s.begin(), s.end());\n\tu.push_back(s[0]);\n\tu.push_back(s[1]);\n\tl.push_back(s[s.size()-1]);\n\tl.push_back(s[s.size()-2]);\n\n\tfor(ll i=2; i<(ll)s.size(); i++){\n\t\tfor(ll n=u.size(); n>=2 && ccw(u[n-2],u[n-1],s[i])!=CLOCKWISE; n--){\n\t\t\tu.pop_back();\n\t\t}\n\t\tu.push_back(s[i]);\n\t}\n\tfor(ll i=s.size()-3; i>=0; i--){\n\t\tfor(ll n=l.size(); n>=2 && ccw(l[n-2],l[n-1],s[i])!=CLOCKWISE; n--){\n\t\t\tl.pop_back();\n\t\t}\n\t\tl.push_back(s[i]);\n\t}\n\n\treverse(l.begin(), l.end());\n\tfor(ll i=u.size()-2; i>=1; i--)l.push_back(u[i]);\n\n\treturn l;\n}\n\n\n//線分の集合sの交点の数を返す\nclass EndPoint {\npublic:\n\tPoint pnt;\n\tll seg,st; //入力線分のID, 端点の種類\n\tEndPoint() {}\n\tEndPoint(Point pnt, ll seg, ll st) : pnt(pnt), seg(seg), st(st) {}\n\n\tbool operator < (const EndPoint &ep) const {\n\t\tif(pnt.y == ep.pnt.y) return st < ep.st;\n\t\treturn pnt.y < ep.pnt.y;\n\t}\n};\nll manhattanIntersection(vector<Segment> &S){\n\tstatic const int BOTTOM = 0;\n\tstatic const int LEFT = 1;\n\tstatic const int RIGHT = 2;\n\tstatic const int TOP = 3;\n\tll n=S.size();\n\tvector<EndPoint> EP(2*n);\n\tfor(ll i=0,k=0; i<n; i++){\n\t\tif(S[i].p1.y==S[i].p2.y){\n\t\t\tif(S[i].p1.x>S[i].p2.x) swap(S[i].p1, S[i].p2);\n\t\t}else if(S[i].p1.y > S[i].p2.y){\n\t\t\tswap(S[i].p1, S[i].p2);\n\t\t}\n\n\t\tif(S[i].p1.y==S[i].p2.y){\n\t\t\tEP[k++]=EndPoint(S[i].p1, i, LEFT);\n\t\t\tEP[k++]=EndPoint(S[i].p2, i, RIGHT);\n\t\t}else{\n\t\t\tEP[k++]=EndPoint(S[i].p1, i, BOTTOM);\n\t\t\tEP[k++]=EndPoint(S[i].p2, i, TOP);\n\t\t}\n\t}\n\n\tsort(EP.begin(), EP.end());\n\n\tset<ll> BT;\n\tBT.insert(INF);\n\tll cnt=0;\n\tfor(ll i=0; i<2*n; i++){\n\t\tif(EP[i].st==TOP){\n\t\t\tBT.erase(EP[i].pnt.x);\n\t\t}else if(EP[i].st==BOTTOM){\n\t\t\tBT.erase(EP[i].pnt.x);\n\t\t}else if(EP[i].st==LEFT){\n\t\t\tauto b=BT.lower_bound(S[EP[i].seg].p1.x);\n\t\t\tauto e=BT.upper_bound(S[EP[i].seg].p2.x);\n\t\t\tcnt+=distance(b,e);\n\t\t}\n\t}\n\treturn cnt;\n}\n\n\n/*-----8<-----library-----8<-----*/\n\n//http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_A&lang=ja\nvoid CGL_2_A(){\n\tll N;\n\tcin>>N;\n\tvector<ll> ans(N,0);\n\trep(i,N){\n\t\tdouble x0,y0,x1,y1,x2,y2,x3,y3;\n\t\tcin>>x0>>y0>>x1>>y1>>x2>>y2>>x3>>y3;\n\t\tPoint p0(x0,y0),p1(x1,y1),p2(x2,y2),p3(x3,y3);\n\t\tll t=0;\n\t\tif(isOrthogonal(p0,p1,p2,p3)){\n\t\t\tt=1;\n\t\t}else if(isParallel(p0,p1,p2,p3)){\n\t\t\tt=2;\n\t\t}\n\t\tans[i]=t;\n\t}\n\trep(i,N)p(ans[i]);\n}\n\n//http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_A&lang=ja\nvoid CGL_1_A(){\n\tdouble x0,y0,x1,y1;\n\tcin>>x0>>y0>>x1>>y1;\n\tLine l(Point(x0,y0),Point(x1,y1));\n\tll Q;\n\tcin>>Q;\n\tvector<Point> ans(Q,0);\n\trep(i,Q){\n\t\tdouble xq,yq;\n\t\tcin>>xq>>yq;\n\t\tPoint po(xq,yq);\n\t\tPoint t=project(l,po);\n\t\tans[i]=t;\n\t}\n\tcout.setf(ios::fixed), cout.precision(20);\n\trep(i,Q){\n\t\tcout<<ans[i].x<<' '<<ans[i].y<<'\\n';\n\t}\n}\n\n//http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_B&lang=ja\nvoid CGL_1_B(){\n\tdouble x0,y0,x1,y1;\n\tcin>>x0>>y0>>x1>>y1;\n\tLine l(Point(x0,y0),Point(x1,y1));\n\tll Q;\n\tcin>>Q;\n\tvector<Point> ans(Q,0);\n\trep(i,Q){\n\t\tdouble xq,yq;\n\t\tcin>>xq>>yq;\n\t\tPoint po(xq,yq);\n\t\tPoint t=reflect(l,po);\n\t\tans[i]=t;\n\t}\n\tcout.setf(ios::fixed), cout.precision(20);\n\trep(i,Q){\n\t\tcout<<ans[i].x<<' '<<ans[i].y<<'\\n';\n\t}\n}\n\n//http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_D&lang=ja\nvoid CGL_2_D(){\n\tll Q;\n\tcin>>Q;\n\tvector<double> ans(Q,0);\n\trep(i,Q){\n\t\tdouble x0,y0,x1,y1,x2,y2,x3,y3;\n\t\tcin>>x0>>y0>>x1>>y1>>x2>>y2>>x3>>y3;\n\t\tSegment s0(Point(x0,y0),Point(x1,y1)), s1(Point(x2,y2),Point(x3,y3));\n\t\tdouble t=getDistance(s0,s1);\n\t\tans[i]=t;\n\t}\n\tcout.setf(ios::fixed), cout.precision(20);\n\trep(i,Q)p(ans[i]);\n}\n\n//http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_C&lang=ja\nvoid CGL_1_C(){\n\tdouble x0,y0,x1,y1;\n\tcin>>x0>>y0>>x1>>y1;\n\tPoint p0(x0,y0),p1(x1,y1);\n\tll Q;\n\tcin>>Q;\n\tvector<string> ans(Q,\"\");\n\tmap<ll,string> m;\n\tm[1]=\"COUNTER_CLOCKWISE\";\n\tm[-1]=\"CLOCKWISE\";\n\tm[2]=\"ONLINE_BACK\";\n\tm[-2]=\"ONLINE_FRONT\";\n\tm[0]=\"ON_SEGMENT\";\n\trep(i,Q){\n\t\tdouble xq,yq;\n\t\tcin>>xq>>yq;\n\t\tPoint pq(xq,yq);\n\t\tll t=ccw(p0,p1,pq);\n\t\tans[i]=m[t];\n\t}\n\trep(i,Q)p(ans[i]);\n}\n\nsigned main() {\n\t//CGL_2_A();\n\t//CGL_1_A();\n\t//CGL_1_B();\n\t//CGL_2_D();\n\tCGL_1_C();\n\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "# include <iostream>\n# include <algorithm>\n#include <array>\n# include <cassert>\n#include <cctype>\n#include <climits>\n#include <numeric>\n# include <vector>\n# include <string>\n# include <set>\n# include <map>\n# include <cmath>\n# include <iomanip>\n# include <functional>\n# include <tuple>\n# include <utility>\n# include <stack>\n# include <queue>\n# include <list>\n# include <bitset>\n# include <complex>\n# include <chrono>\n# include <random>\n# include <limits.h>\n# include <unordered_map>\n# include <unordered_set>\n# include <deque>\n# include <cstdio>\n# include <cstring>\n#include <stdio.h>\n#include<time.h>\n#include <stdlib.h>\n#include <cstdint>\n#include <cfenv>\n\n//#include <bits/stdc++.h>\nusing namespace std;\nusing LL = long long;\nusing ULL = unsigned long long;\nlong long MOD = 1000000000 + 7;\nconstexpr long long INF = numeric_limits<LL>::max();\nconst double PI = acos(-1);\n#define fir first\n#define sec second\n#define thi third\n#define debug(x) cerr<<#x<<\": \"<<x<<'\\n'\ntypedef pair<LL, LL> Pll;\ntypedef pair<LL, pair<LL, LL>> Ppll;\ntypedef pair<LL, pair<LL, bitset<100001>>> Pbll;\ntypedef pair<LL, pair<LL, vector<LL>>> Pvll;\ntypedef pair<LL, LL> Vec2;\nstruct Tll { LL first, second, third; };\nstruct Fll { LL first, second, third, fourd; };\ntypedef pair<LL, Tll> Ptll;\n#define rep(i,rept) for(LL i=0;i<rept;i++)\n#define Mfor(i,mf) for(LL i=mf-1;i>=0;i--)\nLL h, w, n, m, k, t, s, q, last, cnt, sum, ans, dp[10000][10000], a[2000000], b[2000000];\nstring str, ss;\nbool f[1100][1100];\nchar c;\nint di[4][2] = { { 0,1 },{ 1,0 },{ 0,-1 },{ -1,0 } };\nstruct Edge { LL to, cost; };\nvector<Edge>vec[200000];\nvector<LL>v,pick[200000];\nmap<string, vector<LL>>ma;\nmultiset<LL>st[3];\nvoid YN(bool f) {\n\tif (f)\n\t\tcout << \"YES\" << endl;\n\telse\n\t\tcout << \"NO\" << endl;\n}\nvoid yn(bool f) {\n\tif (f)\n\t\tcout << \"Yes\" << endl;\n\telse\n\t\tcout << \"No\" << endl;\n}\nstruct vecter {\n\tdouble x, y, r, norm;\n\tvecter() {}\n\tvecter(double x_, double y_) :x(x_), y(y_) {\n\t\tnorm = x * x + y * y;\n\t\tr = sqrt(x*x + y * y);\n\t}\n\tvecter operator+(vecter v) {\n\t\treturn vecter(x + v.x, y + v.y);\n\t}\n\tvecter operator-(vecter v) {\n\t\treturn vecter(x - v.x, y - v.y);\n\t}\n\tvecter operator/(double k) {\n\t\treturn vecter(x/k, y/k);\n\t}\n\tvecter operator*(double k) {\n\t\treturn vecter(x*k,y*k);\n\t}\n\tdouble operator*(vecter v) { //内積\n\t\treturn x * v.x + y * v.y;\n\t}\n\tdouble angle() { //vecter(1,0)となす角(Radians)\n\t\tif (r == 0)return 0;\n\t\telse\treturn acos(x / r)*(y >= 0 ? 1 : -1);\n\t}\n\tdouble angle(vecter v) { //なす角(Radians)\n\t\tif((r * v.r)>0)\n\t\treturn acos(*this*v / (r * v.r));\n\t\telse return 0;\n\t}\n\tvecter unit() {\n\t\treturn (r == 0 ? vecter() : vecter(x, y) / r);\n\t}\n};\nint main() {\n\tdouble x, y;\n\tcin >> x >> y;\n\tvecter p1(x, y);\n\tcin >> x >> y;\n\tvecter p2(x, y);\n\tcin >> n;\n\trep(i, n) {\n\t\tcin >> x >> y;\n\t\tvecter P(x, y);\n\t\tvecter q1 = p2 - p1, q2 = P - p1;\n\t\tif (q1.angle() == q2.angle()) {\n\t\t\tif (q1.norm < q2.norm) {\n\t\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif (q1.angle() - q2.angle()<PI/2) {\n\t\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t\t}\n\t\t\telse if (q1.angle() - q2.angle()==PI / 2) {\n\t\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<math.h>\n#include<float.h>\n#include<cstdio>\nusing namespace std;\n#define EPS (1e-10)\n#define equals(a,b) fabs((a)-(b))<DBL_EPSILON*fmax(1,fmax(fabs(a),fabs(b)))\n//点のクラス\nclass Point{\n    public:\n        double x,y;\n        Point(double x=0,double y=0):x(x),y(y){}\n\n        Point operator + (Point p){return Point(x+p.x,y+p.y);}\n        Point operator - (Point p){return Point(x-p.x,y-p.y);}\n        Point operator * (double a){return Point(a*x,a*y);}\n        Point operator / (double a){return Point(x/a,y/a);}\n            \n        double norm(){return x*x+y*y;}\n        double abs(){return sqrt(norm());}    \n        \n        bool operator < (const Point &p)const{\n            return x!=p.x?x<p.x:y<p.y;\n        }\n        bool operator == (const Point &p)const{\n            return equals(x,p.x)&&equals(y,p.y);\n        }\n};\ntypedef Point Vector;\n//内積\ndouble dot(Vector a,Vector b){ return a.x*b.x+a.y*b.y; }\n//外戚\ndouble cross(Vector a,Vector b){ return a.x*b.y-a.y*b.x; }\n//ベクトルa,bの位置関係\nint ccw(Point p0,Point p1,Point p2){\n\tVector a=p1-p0;\n\tVector b=p2-p0;\n\tif(cross(a,b)>EPS) return 1;//p0,p1,p2が反時計回り\n\tif(cross(a,b)<-EPS) return -1;//p0,p1,p2が時計回り\n\tif(dot(a,b)<-EPS) return 2;//p1,p0,p2の順で一直線\n\tif(a.norm()<b.norm()) return -2;//p0,p1,p2の順で一直線\n\treturn 0; //p0,p2,p1の順で一直線\n}\nint main(){\n    int q,flag;\n    Point p1,p2;\n    scanf(\"%lf %lf %lf %lf\",&p1.x,&p1.y,&p2.x,&p2.y);\n    cin>>q;\n    Point p;\n    for(int i=0;i<q;i++){\n        cin>>p.x>>p.y;\n        flag=ccw(p1,p2,p);\n        switch (flag){\n            case 1:\n                cout<<\"COUNTER_CLOCKWISE\";\n                break;\n            case -1:\n                cout<<\"CLOCKWISE\";\n                break;\n            case 2:\n                cout<<\"ONLINE_BACK\";\n                break;\n            case -2:\n                cout<<\"ONLINE_FRONT\";\n                break;\n            default:    \n                cout<<\"ON_SEGMENT\";\n                \n        }\n        cout<<\"\\n\";\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\nconst double eps = 1e-10;\nstruct Node\n{\n    double x, y;\n    Node(double xx = 0, double yy = 0){\n        x = xx; y = yy;\n    }\n\n    Node operator + (Node b){\n        return Node(x+b.x, y+b.y);\n    }\n    Node operator - (Node b){\n        return Node(x-b.x, y-b.y);\n    }\n    Node operator * (double a){\n        return Node(a*x, a*y);\n    }\n    Node operator / (double a){\n        return Node(x/a, y/a);\n    }\n\n    double norm(){return x*x+y*y;}\n    double len(){\n        return sqrt(norm());\n    }\n\n    bool operator < (const Node &p) const{\n        return x!=p.x ? x<p.x : y<p.y;\n    }\n\n    bool operator == (const Node &p) const {\n        return fabs(x-p.x)<eps && fabs(y-p.y)<eps;\n    }\n};\n\ntypedef Node vtr;\n\nstruct line{\n    Node a, b;\n    line(Node x, Node y){\n        a = x, b = y;\n    }\n};\n\n//向量点积\ndouble dot(vtr a, vtr b){\n    return a.x*b.x+a.y*b.y;\n}\n\n//向量叉积\ndouble cross(vtr a, vtr b){\n    return a.x*b.y-a.y*b.x;\n}\n\n//投影 求垂足坐标\n//点p在直线p1p2上的投影\nNode project(line s, Node p)\n{\n    vtr base = s.b-s.a;\n    double r = dot(p-s.a, base)/base.norm();\n    return s.a+base*r;\n}\n\n//映象 求p以s为对称轴的对称点\nNode reflect(line s, Node p){\n    return p+(project(s, p)-p)*2.0;\n}\n\nint ccw(Node p0, Node p1, Node p2)\n{\n    vtr a = p1-p0;\n    vtr b = p2-p0;\n    if(cross(a, b) > eps) return 1;\n    if(cross(a, b) < -eps) return -1;\n    if(dot(a, b) < -eps) return 2;\n    if(a.norm() < b.norm()) return -2;\n    return 0;\n}\n\nint main()\n{\n    Node p0, p1, p2;\n    cin>>p0.x>>p0.y>>p1.x>>p1.y;\n    int q; scanf(\"%d\", &q);\n    while(q--)\n    {\n        cin >> p2.x >> p2.y;\n        switch(ccw(p0, p1, p2))\n        {\n            case 1:cout<<\"COUNTER_CLOCKWISE\"<<endl; break;\n\t\t\tcase -1: cout<<\"CLOCKWISE\"<<endl; break;\n\t\t\tcase 2: cout<<\"ONLINE_BACK\"<<endl; break;\n\t\t\tcase -2: cout<<\"ONLINE_FRONT\"<<endl; break;\n\t\t\tcase 0: cout<<\"ON_SEGMENT\"<<endl; break;\n        }\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#pragma warning(disable : 4267) // \"int n = (unsigned)size\"\n\nusing vi = vector<int>; using vvi = vector<vi>; using vvvi = vector<vvi>;\nusing ll = long long int;\nusing vll = vector<ll>; using vvll = vector<vll>; using vvvll = vector<vvll>;\nusing vd = vector<double>; using vvd = vector<vd>; using vvvd = vector<vvd>;\nusing P = pair<int, int>;\nusing Pll = pair<ll, ll>;\nusing cdouble = complex<double>;\n\nconst double eps = 1e-9;\nconst double INFD = numeric_limits<double>::infinity();\n#define Loop(i, n) for(int i = 0; i < int(n); i++)\n#define Loopll(i, n) for(ll i = 0; i < ll(n); i++)\n#define Loop1(i, n) for(int i = 1; i <= int(n); i++)\n#define Loopll1(i, n) for(ll i = 1; i <= ll(n); i++)\n#define Loopr(i, n) for(int i = int(n) - 1; i >= 0; i--)\n#define Looprll(i, n) for(ll i = ll(n) - 1; i >= 0; i--)\n#define Loopr1(i, n) for(int i = int(n); i >= 1; i--)\n#define Looprll1(i, n) for(ll i = ll(n); i >= 1; i--)\n#define Foreach(buf, container) for(auto buf : container)\n#define Loopdiag(i, j, h, w, sum) for(int i = ((sum) >= (h) ? (h) - 1 : (sum)), j = (sum) - i; i >= 0 && j < (w); i--, j++)\n#define Loopdiagr(i, j, h, w, sum) for(int j = ((sum) >= (w) ? (w) - 1 : (sum)), i = (sum) - j; j >= 0 && i < (h); j--, i++)\n#define Loopdiagsym(i, j, h, w, gap) for (int i = ((gap) >= 0 ? (gap) : 0), j = i - (gap); i < (h) && j < (w); i++, j++)\n#define Loopdiagsymr(i, j, h, w, gap) for (int i = ((gap) > (h) - (w) - 1 ? (h) - 1 : (w) - 1 + (gap)), j = i - (gap); i >= 0 && j >= 0; i--, j--)\n#define Loopitr(itr, container) for(auto itr = container.begin(); itr != container.end(); itr++)\n#define printv(vector) Loop(ex_i, vector.size()) { cout << vector[ex_i] << \" \"; } cout << endl;\n#define printmx(matrix) Loop(ex_i, matrix.size()) { Loop(ex_j, matrix[ex_i].size()) { cout << matrix[ex_i][ex_j] << \" \"; } cout << endl; }\n#define quickio() ios::sync_with_stdio(false); cin.tie(0);\n#define bitmanip(m,val) static_cast<bitset<(int)m>>(val)\n#define Comp(type_t) bool operator<(const type_t &another) const\n#define fst first\n#define snd second\nbool nearlyeq(double x, double y) { return abs(x - y) < eps; }\nbool inrange(ll x, ll t) { return x >= 0 && x < t; }\nbool inrange(vll xs, ll t) { Foreach(x, xs) if (!(x >= 0 && x < t)) return false; return true; }\nint ceillog2(ll x) { int ret = 0;\tx--; while (x > 0) { ret++; x >>= 1; } return ret; }\nll rndf(double x) { return (ll)(x + (x >= 0 ? 0.5 : -0.5)); }\nll floorsqrt(ll x) { ll m = (ll)sqrt((double)x); return m + (m * m <= x ? 0 : -1); }\nll ceilsqrt(ll x) { ll m = (ll)sqrt((double)x); return m + (x <= m * m ? 0 : 1); }\nll rnddiv(ll a, ll b) { return (a / b + (a % b * 2 >= b ? 1 : 0)); }\nll ceildiv(ll a, ll b) { return (a / b + (a % b == 0 ? 0 : 1)); }\nll gcd(ll m, ll n) { if (n == 0) return m; else return gcd(n, m % n); }\nll lcm(ll m, ll n) { return m * n / gcd(m, n); }\n\n/*******************************************************/\n\nstruct pt_t {\n\tdouble x, y;\n\tpt_t operator+(const pt_t &p) { return { x + p.x, y + p.y }; }\n\tpt_t operator-(const pt_t &p) { return { x - p.x, y - p.y }; }\n\tpt_t operator*(const double &c) { return { x * c, y * c }; }\n};\n\n// ax + by + c = 0\nstruct line_t {\n\tdouble a, b, c;\n};\n\npt_t cross_point(line_t l, line_t m) {\n\tpt_t ret = { INFD, INFD };\n\tdouble d = l.a * m.b - m.a * l.b;\n\tif (nearlyeq(d, 0)) return ret;\n\tdouble x = l.b * m.c - m.b * l.c;\n\tdouble y = l.a * m.c - m.a * l.c;\n\tret = { x / d, y / -d };\n\treturn ret;\n}\n\n// normal vector = (a, b), passing p\nline_t solve_line(double a, double b, pt_t p) {\n\treturn { a, b, -a * p.x - b * p.y };\n}\n\n// t should be radius\npt_t rot(pt_t p, double r) {\n\treturn {\n\t\tcos(r) * p.x - sin(r) * p.y,\n\t\tsin(r) * p.x + cos(r) * p.y\n\t};\n}\n\ndouble abs(pt_t p) {\n\treturn sqrt(p.x * p.x + p.y * p.y);\n}\n\n// angle [0, 2PI) of vector p to vector q\ndouble angle(pt_t p, pt_t q) {\n\tp = p * (1.0 / abs(p));\n\tq = q * (1.0 / abs(q));\n\tdouble r0 = acos(max(min(p.x * q.x + p.y * q.y, 1.0), -1.0));\n\tdouble r1 = asin(max(min(p.x * q.y - p.y * q.x, 1.0), -1.0));\n\tif (r1 >= 0) return r0;\n\telse return 2 * M_PI - r0;\n}\n\ndouble dist(line_t l, pt_t p) {\n\treturn abs(l.a * p.x + l.b * p.y + l.c)\n\t\t/ sqrt(l.a * l.a + l.b * l.b);\n}\n\nbool on_same_line(pt_t p, pt_t q) {\n\tline_t l = solve_line(p.y, -p.x, p);\n\tif (dist(l, q) < eps) return true;\n\telse return false;\n}\n\nint main() {\n\tpt_t p0, p1;\n\tcin >> p0.x >> p0.y >> p1.x >> p1.y;\n\tint q; cin >> q;\n\tcout << setprecision(20);\n\tLoop(i, q) {\n\t\tpt_t p2;\n\t\tcin >> p2.x >> p2.y;\n\t\tpt_t p = p1 - p0;\n\t\tpt_t q = p2 - p0;\n\t\tbool judge;\n\t\tif (on_same_line(p, q)) judge = true;\n\t\telse judge = false;\n\t\tdouble r = angle(p, q);\n\t\tif (judge) {\n\t\t\tif (M_PI * 0.5 < r && r < M_PI * 1.5) {\n\t\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (abs(q) > abs(p)) {\n\t\t\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif (r < M_PI) {\n\t\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\t\t}\n\t\t}\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#define EPS (1e-10)\n#include <cmath>\n#include <iostream>\n#include <iomanip>\nusing namespace std;\n\nint main() {\n\tcin.tie(0); ios::sync_with_stdio(false);\n\tint x0, y0, x1, y1; cin >> x0 >> y0 >> x1 >> y1;\n\tint q; cin >> q;\n\tlong double theta1, theta2;\n\ttheta1 = atan2(y1 - y0, x1 - x0);\n\twhile (q--) {\n\t\tint x2, y2; cin >> x2 >> y2;\n\t\ttheta2 = atan2(y2 - y0, x2 - x0);\n\t\tlong double d_theta = theta2 - theta1;\n\t\tif (d_theta - M_PI == 0) { cout << \"ONLINE_BACK\" << endl; continue; }\n\t\tif (d_theta > 0) { cout << \"COUNTER_CLOCKWISE\" << endl; continue; }\n\t\tif (d_theta < 0) { cout << \"CLOCKWISE\" << endl; continue; }\n\t\tlong double dist1 = hypot(x1 - x0, y1 - y0), dist2 = hypot(x2 - x0, y2 - y0);\n\t\tif (dist2 > dist1) { cout << \"ONLINE_FRONT\" << endl; continue; }\n\t\tcout << \"ON_SEGMENT\" << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing ll = long long;\nusing namespace std;\n\nconstexpr int inf = 1e9;\nconstexpr ll linf = 1e18;\n\nconstexpr double eps = 1e-8;\ninline constexpr bool eq(double a, double b) { return fabs(a - b) < eps; }\n\n//-----点-----//\nstruct Point\n{\n    double x, y;\n\n    constexpr Point(double x = 0.0, double y = 0.0) : x(x), y(y) {}\n\n    Point &operator+=(const Point &p) { x += p.x, y += p.y; return *this; }\n    Point &operator-=(const Point &p) { x -= p.x, y -= p.y; return *this; }\n    Point &operator*=(const double k) { x *= k, y *= k; return *this; }\n    Point &operator/=(const double k) { x /= k, y /= k; return *this; }\n};\n\ninline Point operator+(const Point &p, const Point &q) { return Point(p) += q; }\ninline Point operator-(const Point &p, const Point &q) { return Point(p) -= q; }\ninline Point operator*(const Point &p, const double k) { return Point(p) *= k; }\ninline Point operator/(const Point &p, const double k) { return Point(p) /= k; }\n\ninline Point operator+(const Point &p) { return p; }\ninline Point operator-(const Point &p) { return Point(-p.x, -p.y); }\n\ninline constexpr bool operator==(const Point &p, const Point &q) { return eq(p.x, q.x) && eq(p.y, q.y); }\ninline constexpr bool operator!=(const Point &p, const Point &q) { return !(p == q); }\n\ninline double norm2(const Point &p) { return p.x * p.x + p.y * p.y; }\ninline double norm(const Point &p) { return sqrt(p.x * p.x + p.y * p.y); }\ninline double arg(const Point &p) { return atan2(p.y, p.x); }\n\ninline double dot(const Point &p, const Point &q) { return p.x * q.x + p.y * q.y; }\ninline double cross(const Point &p, const Point &q) { return p.x * q.y - p.y * q.x; }\n\nistream &operator>>(istream &is, Point &p) { is >> p.x >> p.y; return is; }\n\n//-----直線-----//\nstruct Line\n{\n    Point a, b;\n    Line(Point a, Point b) : a(a), b(b) {} /* 2点a, bを通る直線 */\n};\n\n/* \n * \"射影\" (直線 l に点 p から垂線を引いた交点を求める)\n * verified at: https://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/1/CGL_1_A\n */\nPoint projection(const Line &l, const Point &p)\n{\n    Point d = l.b - l.a; // 直線 l の方向ベクトル\n    Point h = d * (dot(p - l.a, d) / norm2(d)); // 正射影ベクトル\n    return l.a + h;\n}\n\n/* \n * \"反射\" (直線 l に関して点 p と対称な点を求める)\n * verified at: https://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/1/CGL_1_B\n */\nPoint reflection(const Line &l, const Point &p) { return p + (projection(l, p) - p) * 2.0; }\n\nint main()\n{\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n\n    Point p0, p1; cin >> p0 >> p1;\n    int q; cin >> q;\n    while (q--) {\n        Point p2; cin >> p2;\n        Point u = p1 - p0, v = p2 - p0;\n        if (cross(u, v) > eps) cout << \"COUNTER_CLOCKWISE\\n\";\n        else if (cross(u, v) < -eps) cout << \"CLOCKWISE\\n\";\n        else if (dot(u, v) < 0) cout << \"ONLINE_BACK\\n\";\n        else if (norm(u) < norm(v)) cout << \"ONLINE_FRONT\\n\";\n        else cout << \"ON_SEGMENT\\n\";\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <complex>\n#include <map>\n#include <set>\n#include <vector>\n#include <stack>\n#include <queue>\n#include <bitset>\n#include <algorithm>\n#include <numeric>\n#include <functional>\nusing namespace std;\n\n#define Rep(b, e, i) for(int i = b; i <= e; i++)\n#define Repr(e, b, i) for(int i = e; i >= b; i--)\n#define rep(n, i) Rep(0, n-1, i)\n#define repr(n, i) Repr(n-1, 0, i)\n#define all(v) (v).begin(), (v).end()\n#define pb(v) push_back(v)\n#define uniq(v) (v).erase(unique(all(v)),(v).end())\n#define bitcnt(x) __builtin_popcount(x)\n#define fst first\n#define snd second\n#define Pqaz(T) priority_queue<T,vector<T>,greater<T>>\n#define Pqza(T) priority_queue<T>\n#define put(x) cout << x;\n#define puts(x) cout << x << ' ';\n#define putln(x) cout << x << endl;\n#define ENJYU std::ios::sync_with_stdio(false);std::cin.tie(0);\n\nconst double EPS = 1e-12;\ntypedef complex<double> comp;\n\nvoid solve(void){\n\n\tint x1, y1, x2, y2, Q;\n\tcin >> x1 >> y1 >> x2 >> y2 >> Q;\n\n\tcomp o(x1, y1), p(x2-x1, y2-y1), r;\n\n\t//回転用\n\tr = polar(1.0, arg(p));\n\n\twhile(Q--)\n\t{\n\t\tint x3, y3;\n\t\tcin >> x3 >> y3;\n\n\t\tcomp q(x3-x1, y3-y1);\n\n\t\tq /= r;\n\n\t\tif (abs(arg(q)) < EPS)\n\t\t{\n\t\t\tif (norm(p) > norm(q))\n\t\t\t{\n\t\t\t\tputln(\"ON_SEGMENT\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tputln(\"ONLINE_FRONT\");\n\t\t\t}\n\t\t}\n\t\telse if (abs(abs(arg(q))-M_PI) < EPS)\n\t\t{\n\t\t\tputln(\"ONLINE_BACK\");\n\t\t}\n\t\telse if (arg(q) > 0)\n\t\t{\n\t\t\tputln(\"COUNTER_CLOCKWISE\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tputln(\"CLOCKWISE\");\n\t\t}\n\t}\n}\n\nint main(void){\n\tsolve();\n\t//cout << \"yui(*-v・)yui\" << endl;\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n \nusing namespace std;\n \n#define EPS 1e-10\n#define equal(a,b) (fabs(a-b) < EPS)\n\nstruct Point{\n  double x,y;\n\n  Point(){}\n  Point(double x,double y) : x(x),y(y) {}\n\n  Point operator + (const Point &p)const{ return Point(x+p.x,y+p.y); }\n  Point operator - (const Point &p)const{ return Point(x-p.x,y-p.y); }\n  Point operator * (const double &k)const{ return Point(x*k,y*k); }\n  Point operator / (const double &k)const{ return Point(x/k,y/k); }\n};\n\ndouble cross(const Point &a,const Point &b){ return a.x*b.y - b.x*a.y; }\ndouble dot(const Point &a,const Point &b){ return a.x*b.x+a.y*b.y; }\ndouble norm(const Point &p){ return dot(p,p); }\n\nistream &operator >> (istream &is,Point &p){ \n  return is >> p.x >> p.y;\n}\n\ntypedef Point Vector;\n\n#define COUNTER_CLOCKWISE 1\n#define CLOCKWISE -1\n#define ONLINE_BACK 2\n#define ONLINE_FRONT -2\n#define ON_SEGMENT 0\ntypedef Point Vector;\n\nint ccw(Point p0,Point p1,Point p2){\n  Vector a = p1 - p0;\n  Vector b = p2 - p0;\n  if(cross(a,b) > EPS){ return COUNTER_CLOCKWISE; }\n  if(cross(a,b) < -EPS){ return CLOCKWISE; }\n  if(dot(a,b) < -EPS){ return ONLINE_BACK; }\n  if(norm(a) < norm(b)){ return ONLINE_FRONT; }\n  return ON_SEGMENT;\n}\n\n\n\nint main(){\n  Point p0,p1,p2;\n  int Q;\n  cin >> p0 >> p1 >> Q;\n  while(Q--){\n    cin >> p2;\n    switch(ccw(p0,p1,p2)){\n    case COUNTER_CLOCKWISE:\n      puts(\"COUNTER_CLOCKWISE\");\n      break;\n    case CLOCKWISE:\n      puts(\"CLOCKWISE\");\n      break;\n    case ONLINE_BACK:\n      puts(\"ONLINE_BACK\");\n      break;\n    case ONLINE_FRONT:\n      puts(\"ONLINE_FRONT\");\n      break;\n    default:\n      puts(\"ON_SEGMENT\");\n      break;\n    }\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i,a,n) for(int i=(a);i<(n);i++)\n#define per(i,a,n) for(int i=(n)-1;i>=(a);i--)\n#define MP make_pair\n\ntypedef double db;\n\nconst db EPS = 1e-8;\n\ninline int sign(db a) {\n\treturn a < -EPS ? -1 : a > EPS;\n}\n\nstruct P {\n\tdb x, y;\n\tP() {\n\t}\n\tP(db _x, db _y) :\n\t\t\tx(_x), y(_y) {\n\t}\n\tP operator+(P p) {\n\t\treturn P(x + p.x, y + p.y);\n\t}\n\tP operator-(P p)  {\n\t\treturn P(x - p.x, y - p.y);\n\t}\n\tP operator*(db d) {\n\t\treturn P(x * d, y * d);\n\t}\n\tP operator/(db d) {\n\t\treturn P(x / d, y / d);\n\t}\n\tbool operator<(P p) const {\n\t\tint c = sign(x - p.x);\n\t\tif (c)\n\t\t\treturn c == -1;\n\t\treturn sign(y - p.y) == -1;\n\t}\n\tdb dot(P p) {\n\t\treturn x * p.x + y * p.y;\n\t}\n\tdb det(P p) {\n\t\treturn x * p.y - y * p.x;\n\t}\n\tdb distTo(P p) { return (*this-p).abs(); }\n\n\tdb alpha() {\n\t\treturn atan2(y, x);\n\t}\n\tvoid read() {\n\t\tcin>>x>>y;\n\t}\n\tdb abs() {\n\t\treturn sqrt(abs());\n\t}\n\tdb abs2() {\n\t\treturn x * x + y * y;\n\t}\n\tP rot90(){\n\t\treturn P(-y,x);\n\t}\n};\n\n#define cross(p1,p2,p3) ((p2.x-p1.x)*(p3.y-p1.y)-(p3.x-p1.x)*(p2.y-p1.y))\n#define crossOp(p1,p2,p3) sign(cross(p1,p2,p3))\n\nP isSS(P p1, P p2, P q1, P q2) {\n\tdb a1 = cross(q1, q2, p1), a2 = -cross(q1, q2, p2);\n\treturn (p1 * a2 + p2 * a1) / (a1 + a2);\n}\n\nbool isMiddle(db a, db m, db b) {\n    return sign(a - m) == 0 || sign(b - m) == 0 || (a < m != b < m);\n}\n \nbool isMiddle(P a, P m, P b) {\n    return isMiddle(a.x, m.x, b.x) && isMiddle(a.y, m.y, b.y);\n}\n\nbool onSegment(P p1, P p2, P q){\n\treturn crossOp(p1,p2,q) == 0 && isMiddle(p1, q, p2);\n}\n\nP proj(P p1, P p2, P q) {\n    P dir = p2 - p1;\n    return p1 + dir * (dir.dot(q - p1) / dir.abs2());\n}\n\nP reflect(P p1, P p2, P q){\n\treturn proj(p1,p2,q) * 2 - q;\n}\n\ndb nearest(P p1,P p2,P q){\n\tP h = proj(p1,p2,q);\n\tif(isMiddle(p1,h,p2))\n\t\treturn q.distTo(h);\n\treturn min(p1.distTo(q),p2.distTo(q));\n}\n\ndb getrad(P p1,P p2){\n\treturn atan2l(p1.det(p2),p1.dot(p2));\n}\n\ndb incircle(P p1, P p2, P p3){\n\tdb A = p1.distTo(p2);\n\tdb B = p2.distTo(p3);\n\tdb C = p3.distTo(p1);\n\treturn sqrtl(A*B*C/(A+B+C));\n}\n\nint main(){\n\tP p1, p2;\n\tp1.read(),p2.read();\n\tint n;cin>>n;\n\trep(i,0,n){\n\t\tP q; q.read();\n\t\tint op = crossOp(p1,p2,q);\n\t\tif(op == 1){\n\t\t\tputs(\"COUNTER_CLOCKWISE\");\n\t\t} else if(op == -1){\n\t\t\tputs(\"CLOCKWISE\");\n\t\t} else {\n\t\t\tif(onSegment(p1,p2,q)){\n\t\t\t\tputs(\"ON_SEGMENT\");\n\t\t\t} else if(onSegment(p1,q,p2)){\n\t\t\t\tputs(\"ONLINE_FRONT\");\n\t\t\t} else {\n\t\t\t\tputs(\"ONLINE_BACK\");\n\t\t\t}\n\t\t}\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\nusing namespace std;\n#include<cstdio>\n#include<complex>\n\ntypedef double type_n;\ntypedef complex<type_n> point;\n\nint ccw(const point &a, const point &c, const point &z)\n{\n    point w;\n    w = (z - a) / c;\n    if(w.imag() > 1e12){ return 1; }\n    if(w.imag() < 1e12){ return -1; }\n    if(w.real() < 1e12){ return 2; }\n    if(w.real() > 1){ return -2; }\n    return 0;\n}\n\nint main()\n{\n    point a, b, c, z;\n    int i, q, crit;\n    type_n a1, a2, b1, b2, z1, z2;\n    scanf(\"%lf %lf %lf %lf\", &a1, &a2, &b1, &b2);\n    a.real(a1), a.imag(a2), b.real(b1), b.imag(b2);\n    c = b - a;\n\n    scanf(\"%d\", &q);\n    for(i = 0; i < q; i++){\n        scanf(\"%lf %lf\", &z1, &z2);\n        z.real(z1), z.imag(z2);\n        crit = ccw(a, c, z);\n        switch(crit){\n            case 1:\n                printf(\"COUNTER_CLOCKWISE\\n\");\n                break;\n            case -1:\n                printf(\"CLOCKWISE\\n\");\n                break;\n            case 2:\n                printf(\"ONLINE_BACK\\n\");\n                break;\n            case -2:\n                printf(\"ONLINE_FRONT\\n\");\n                break;\n            default:\n                printf(\"ON_SEGMENT\\n\");\n                break;\n        }\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <math.h>\n#include <iostream>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs(a - b) < EPS)\n\nclass Point{\npublic:\n    double x, y;\n\n    Point(double x_ = 0, double y_ = 0){\n        x = x_;\n        y = y_;\n    }\n\n    Point operator+ (Point p){\n        return Point(x + p.x, y + p.y);\n    };\n\n    Point operator- (Point p){\n        return Point(x - p.x, y - p.y);\n    };\n\n    Point operator* (double k){\n        return Point(x * k, y * k);\n    }\n\n    Point operator/ (double k){\n        return Point(x / k, y / k);\n    }\n\n    double norm(){\n        return x * x + y * y;\n    }\n\n    double abs(){\n        return sqrt(norm());\n    }\n\n    bool operator == (const Point &p) const{\n        return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n    }\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b){\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b){\n    return a.x * b.y - a.y * b.x;\n}\n\nbool isParallel(Vector a, Vector b){\n    return equals(cross(a, b), 0.0);\n}\n\nbool isOrthogonal(Vector a, Vector b){\n    return equals(dot(a, b), 0.0);\n}\n;\ndouble getCos(Vector a, Vector b){\n    return dot(a, b) / (a.abs() * b.abs());\n}\n\ndouble dist(Point p1, Point p2){\n    return sqrt(pow((p1.x - p2.x), 2) + pow((p1.y - p2.y), 2));\n}\n\nPoint projection(Point p1, Point p2, Point p0){\n    if(p1 == p0){\n        return p0;\n    }\n    if(p2 == p0){\n        return p0;\n    }\n    return p1 + (p2 - p1) / (p2 - p1).abs() * (p0 - p1).abs() * getCos(p2 - p1, p0 - p1);\n}\n\nPoint reflection(Point p1, Point p2, Point p0){\n    Point p = projection(p1, p2, p0);\n    return p0 + (p - p0) * 2;\n}\n\ndouble getDistanceSP(Point p1, Point p2, Point p0){\n    if(dot(p2 - p1, p0 - p1) < 0.0) return (p0 - p1).abs();\n    if(dot(p1 - p2, p0 - p2) < 0.0) return (p0 - p2).abs();\n    return (projection(p1, p2, p0) -  p0).abs();\n}\n\nstring counterClockwise(Point p0, Point p1, Point p2){\n    Vector v1 = p1 - p0;\n    Vector v2 = p2 - p0;\n    if(cross(v1, v2) > EPS) return string(\"COUNTER_CLOCKWISE\");\n    if(cross(v1, v2) < -EPS) return string(\"CLOCKWISE\");\n    if(dot(v1, v2) < -EPS) return string(\"ONLINE_BACK\");\n    if(v1.norm() < v2.norm()) return string(\"ONLINE_FRONT\");\n\n    return string(\"ON_SEGMENT\");\n}\n\nbool intersect(Point p0, Point p1, Point p2, Point p3){\n    return true;\n}\n\ndouble getDistance(Point p0, Point p1, Point p2, Point p3){\n    if(intersect(p0, p1, p2, p3)){\n        return 0.0;\n    }\n    return min(min(getDistanceSP(p0, p1, p2), getDistanceSP(p0, p1, p3)),\n                min(getDistanceSP(p2, p3, p0), getDistanceSP(p2, p3, p1)));\n}\n\nint main(){\n    int xp0, yp0, xp1, yp1;\n    scanf(\"%d\", &xp0);\n    scanf(\"%d\", &yp0);\n    scanf(\"%d\", &xp1);\n    scanf(\"%d\", &yp1);\n\n    Point p0 = Point(xp0, yp0);\n    Point p1 = Point(xp1, yp1);\n\n    int q;\n    scanf(\"%d\", &q);\n    for(int i = 0; i < q; i++){\n        int x, y;\n        scanf(\"%d\", &x);\n        scanf(\"%d\", &y);\n\n        cout << counterClockwise(p0, p1, Point(x, y)) << endl;\n    }\n}\n\n/*\nint main(){\n    int q;\n    scanf(\"%d\", &q);\n\n    for(int i = 0; i < q; i++){\n        int xp0, yp0, xp1, yp1, xp2, yp2, xp3, yp3;\n        scanf(\"%d\", &xp0);\n        scanf(\"%d\", &yp0);\n        scanf(\"%d\", &xp1);\n        scanf(\"%d\", &yp1);\n        scanf(\"%d\", &xp2);\n        scanf(\"%d\", &yp2);\n        scanf(\"%d\", &xp3);\n        scanf(\"%d\", &yp3);\n\n        printf(\"%.10f\\n\", getDistance(Point(xp0, yp0), Point(xp1, yp1), Point(xp2, yp2), Point(xp3, yp3)));\n    }\n\n}\n*/\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n \nusing namespace std;\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nstruct Point{\n  double x,y;\n  Point(){}\n  Point(double x,double y) :x(x),y(y){}\n  Point operator + (Point p) {return Point(x+p.x,y+p.y);}\n  Point operator - (Point p) {return Point(x-p.x,y-p.y);}\n  Point operator * (double k) {return Point(x*k,y*k);}\n  Point operator / (double k) {return Point(x/k,y/k);}\n  double norm(){return x*x+y*y;}\n  double abs(){return sqrt(norm());}\n\n  bool operator < (const Point &p) const{\n    return x!=p.x ? x < p.x : y < p.y;\n  }\n\n  bool operator == (const Point &p) const{\n    return fabs(x-p.x) < EPS && fabs(y-p.y) < EPS;\n  }\n};\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\nstruct Segment{\n  Point p1,p2;\n  Segment(){}\n  Segment(Point p1, Point p2):p1(p1),p2(p2){}\n};\ntypedef Segment Line;\n\nstruct Circle{\n  Point c;\n  double r;\n  Circle(Point c,double r):c(c),r(r){}\n};\n\ndouble norm(Vector a){\n  return a.x*a.x+a.y*a.y;\n}\ndouble abs(Vector a){\n  return sqrt(norm(a));\n}\ndouble dot(Vector a,Vector b){\n  return a.x*b.x+a.y*b.y;\n}\ndouble cross(Vector a,Vector b){\n  return a.x*b.y-a.y*b.x;\n}\n\nbool isOrthogonal(Vector a,Vector b){\n  return equals(dot(a,b),0.0);\n}\n\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n  return isOrthogonal(a1-a2,b1-b2);\n}\n\nbool isOrthogonal(Segment s1,Segment s2){\n  return equals(dot(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n\nbool isParallel(Vector a,Vector b){\n  return equals(cross(a,b),0.0);\n}\n\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n  return isParallel(a1-a2,b1-b2);\n}\n\nbool isParallel(Segment s1,Segment s2){\n  return equals(cross(s1.p2-s1.p1,s2.p2-s2.p1),0.0); \n}\n\nPoint project(Segment s,Point p){\n  Vector base=s.p2-s.p1;\n  double r=dot(p-s.p1,base)/norm(base);\n  return s.p1+base*r;\n}\n\nPoint reflect(Segment s,Point p){\n  return p+(project(s,p)-p)*2.0;\n}\n\nint ccw(Point p0,Point p1,Point p2){\n  Vector a = p1-p0;\n  Vector b = p2-p0;\n  if(cross(a,b) > EPS) return COUNTER_CLOCKWISE;\n  if(cross(a,b) < -EPS) return CLOCKWISE;\n  if(dot(a,b) < -EPS) return ONLINE_BACK;\n  if(a.norm()<b.norm()) return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\n\nbool intersect(Point p1,Point p2,Point p3,Point p4){\n  return (ccw(p1,p2,p3)*ccw(p1,p2,p4) <= 0 &&\n\t  ccw(p3,p4,p1)*ccw(p3,p4,p2) <= 0 );\n}\n\nbool intersect(Segment s1,Segment s2){\n  return intersect(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n\ndouble getDistanceLP(Line l,Point p){\n  return abs(cross(l.p2-l.p1,p-l.p1)/abs(l.p2-l.p1));\n}\n\ndouble getDistanceSP(Segment s,Point p){\n  if(dot(s.p2-s.p1,p-s.p1) < 0.0 ) return abs(p-s.p1);\n  if(dot(s.p1-s.p2,p-s.p2) < 0.0 ) return abs(p-s.p2);\n  return getDistanceLP(s,p);\n}\n\ndouble getDistance(Segment s1,Segment s2){\n  if(intersect(s1,s2)) return 0.0;\n  return min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),\n\t     min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n}\n\nPoint getCrossPoint(Segment s1,Segment s2){\n  Vector base=s2.p2-s2.p1;\n  double d1=abs(cross(base,s1.p1-s2.p1));\n  double d2=abs(cross(base,s1.p2-s2.p1));\n  double t=d1/(d1+d2);\n  return s1.p1+(s1.p2-s1.p1)*t;\n}\n\n\npair<Point,Point> getCrossPoints(Circle c,Line l){\n  Vector pr=project(l,c.c);\n  Vector e=(l.p2-l.p1)/abs(l.p2-l.p1);\n  double base=sqrt(c.r*c.r-norm(pr-c.c));\n  return make_pair(pr+e*base,pr-e*base);\n}\n\n\ndouble arg(Vector p){\n  return atan2(p.y,p.x);\n}\n\nVector polar(double a,double r){\n  return Point(cos(r)*a,sin(r)*a);\n}\n\npair<Point,Point> getCrossPoints(Circle c1,Circle c2){\n  double d=abs(c1.c-c2.c);\n  double a=acos((c1.r*c1.r+d*d-c2.r*c2.r)/(2*c1.r*d));\n  double t=arg(c2.c-c1.c);\n  return make_pair(c1.c+polar(c1.r,t+a),c1.c+polar(c1.r,t-a));\n}\n\nint contains(Polygon g,Point p){\n  int n=g.size();\n  bool x=false;\n  for(int i=0;i<n;i++){\n    Point a=g[i]-p,b=g[(i+1)%n]-p;\n    if(fabs(cross(a,b)) < EPS && dot(a,b) < EPS) return 1;\n    if(a.y>b.y) swap(a,b);\n    if(a.y < EPS && EPS < b.y && cross(a,b) > EPS ) x = !x;\n  }\n  return (x?2:0);\n}\n\nPolygon andrewScan(Polygon s){\n  Polygon u,l;\n  if(s.size()<3) return s;\n  sort(s.begin(),s.end());\n  u.push_back(s[0]);\n  u.push_back(s[1]);\n  l.push_back(s[s.size()-1]);\n  l.push_back(s[s.size()-2]);\n  for(int i=2;i<s.size();i++){\n    for(int n=u.size();n>=2&&ccw(u[n-2],u[n-1],s[i]) != CLOCKWISE;n--){\n      u.pop_back();\n    }\n    u.push_back(s[i]);\n  } \n  for(int i=s.size()-3;i>=0;i--){\n    for(int n=l.size();n>=2&&ccw(l[n-2],l[n-1],s[i]) != CLOCKWISE;n--){\n      l.pop_back();\n    }\n    l.push_back(s[i]);\n  }\n  reverse(l.begin(),l.end());\n  for(int i=u.size()-2;i>=1;i--) l.push_back(u[i]);\n  return l;\n}\n\nint main(){\n  map<int,string> m;\n  m[COUNTER_CLOCKWISE] = \"COUNTER_CLOCKWISE\";\n  m[CLOCKWISE] = \"CLOCKWISE\";\n  m[ONLINE_BACK] = \"ONLINE_BACK\";\n  m[ONLINE_FRONT] = \"ONLINE_FRONT\";\n  m[ON_SEGMENT] = \"ON_SEGMENT\";\n  double x1,y1,x2,y2;\n  cin>>x1>>y1>>x2>>y2;\n  Point p1=Point(x1,y1),p2=Point(x2,y2);\n  int q;cin>>q;\n  while(q--){\n    cin>>x1>>y1;\n    cout << m[ccw(p1,p2,Point(x1,y1))] << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#pragma warning(disable : 4267) // \"int n = (unsigned)size\"\n\nusing vi = vector<int>; using vvi = vector<vi>; using vvvi = vector<vvi>;\nusing ll = long long int;\nusing vll = vector<ll>; using vvll = vector<vll>; using vvvll = vector<vvll>;\nusing vd = vector<double>; using vvd = vector<vd>; using vvvd = vector<vvd>;\nusing P = pair<int, int>;\nusing Pll = pair<ll, ll>;\nusing cdouble = complex<double>;\n\nconst double eps = 1e-9;\nconst double INFD = numeric_limits<double>::infinity();\n#define Loop(i, n) for(int i = 0; i < int(n); i++)\n#define Loopll(i, n) for(ll i = 0; i < ll(n); i++)\n#define Loop1(i, n) for(int i = 1; i <= int(n); i++)\n#define Loopll1(i, n) for(ll i = 1; i <= ll(n); i++)\n#define Loopr(i, n) for(int i = int(n) - 1; i >= 0; i--)\n#define Looprll(i, n) for(ll i = ll(n) - 1; i >= 0; i--)\n#define Loopr1(i, n) for(int i = int(n); i >= 1; i--)\n#define Looprll1(i, n) for(ll i = ll(n); i >= 1; i--)\n#define Foreach(buf, container) for(auto buf : container)\n#define Loopdiag(i, j, h, w, sum) for(int i = ((sum) >= (h) ? (h) - 1 : (sum)), j = (sum) - i; i >= 0 && j < (w); i--, j++)\n#define Loopdiagr(i, j, h, w, sum) for(int j = ((sum) >= (w) ? (w) - 1 : (sum)), i = (sum) - j; j >= 0 && i < (h); j--, i++)\n#define Loopdiagsym(i, j, h, w, gap) for (int i = ((gap) >= 0 ? (gap) : 0), j = i - (gap); i < (h) && j < (w); i++, j++)\n#define Loopdiagsymr(i, j, h, w, gap) for (int i = ((gap) > (h) - (w) - 1 ? (h) - 1 : (w) - 1 + (gap)), j = i - (gap); i >= 0 && j >= 0; i--, j--)\n#define Loopitr(itr, container) for(auto itr = container.begin(); itr != container.end(); itr++)\n#define printv(vector) Loop(ex_i, vector.size()) { cout << vector[ex_i] << \" \"; } cout << endl;\n#define printmx(matrix) Loop(ex_i, matrix.size()) { Loop(ex_j, matrix[ex_i].size()) { cout << matrix[ex_i][ex_j] << \" \"; } cout << endl; }\n#define quickio() ios::sync_with_stdio(false); cin.tie(0);\n#define bitmanip(m,val) static_cast<bitset<(int)m>>(val)\n#define Comp(type_t) bool operator<(const type_t &another) const\n#define fst first\n#define snd second\nbool nearlyeq(double x, double y) { return abs(x - y) < eps; }\nbool inrange(ll x, ll t) { return x >= 0 && x < t; }\nbool inrange(vll xs, ll t) { Foreach(x, xs) if (!(x >= 0 && x < t)) return false; return true; }\nint ceillog2(ll x) { int ret = 0;\tx--; while (x > 0) { ret++; x >>= 1; } return ret; }\nll rndf(double x) { return (ll)(x + (x >= 0 ? 0.5 : -0.5)); }\nll floorsqrt(ll x) { ll m = (ll)sqrt((double)x); return m + (m * m <= x ? 0 : -1); }\nll ceilsqrt(ll x) { ll m = (ll)sqrt((double)x); return m + (x <= m * m ? 0 : 1); }\nll rnddiv(ll a, ll b) { return (a / b + (a % b * 2 >= b ? 1 : 0)); }\nll ceildiv(ll a, ll b) { return (a / b + (a % b == 0 ? 0 : 1)); }\nll gcd(ll m, ll n) { if (n == 0) return m; else return gcd(n, m % n); }\nll lcm(ll m, ll n) { return m * n / gcd(m, n); }\n\n/*******************************************************/\n\nstruct point_t {\n\tdouble x, y;\n\tpoint_t operator+(const point_t &p) { return { x + p.x, y + p.y }; }\n\tpoint_t operator-(const point_t &p) { return { x - p.x, y - p.y }; }\n\tpoint_t operator*(const double &c) { return { x * c, y * c }; }\n};\n\n// ax + by + c = 0\nstruct line_t {\n\tdouble a, b, c;\n};\n\npoint_t cross_point(line_t l, line_t m) {\n\tpoint_t ret = { INFD, INFD };\n\tdouble d = l.a * m.b - m.a * l.b;\n\tif (nearlyeq(d, 0)) return ret;\n\tdouble x = l.b * m.c - m.b * l.c;\n\tdouble y = l.a * m.c - m.a * l.c;\n\tret = { x / d, y / -d };\n\treturn ret;\n}\n\n// normal vector = (a, b), passing p\nline_t solve_line(double a, double b, point_t p) {\n\treturn { a, b, -a * p.x - b * p.y };\n}\n\n// t should be radius\npoint_t rot(point_t p, double r) {\n\tpoint_t ret = {\n\t\t{ cos(r) * p.x - sin(r) * p.y },\n\t\t{ sin(r) * p.x + cos(r) * p.y }\n\t};\n\treturn ret;\n}\n\ndouble abs(point_t p) {\n\treturn sqrt(p.x * p.x + p.y * p.y);\n}\n\n// angle [0, 2PI) of vector p to vector q\ndouble angle(point_t p, point_t q) {\n\tp = p * (1.0 / abs(p));\n\tq = q * (1.0 / abs(q));\n\tdouble r0 = acos(p.x * q.x + p.y * q.y);\n\tdouble r1 = asin(p.x * q.y - p.y * q.x);\n\tif (r1 >= 0) return r0;\n\telse return 2 * M_PI - r0;\n}\n\nint main() {\n\tpoint_t p0, p1;\n\tcin >> p0.x >> p0.y >> p1.x >> p1.y;\n\tint q; cin >> q;\n\tcout << setprecision(20);\n\tLoop(i, q) {\n\t\tpoint_t p2;\n\t\tcin >> p2.x >> p2.y;\n\t\tpoint_t p = p1 - p0;\n\t\tpoint_t q = p2 - p0;\n\t\tif (nearlyeq(abs(p), 0)) {\n\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t}\n\t\telse if (nearlyeq(abs(q), 0)) {\n\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t}\n\t\telse {\n\t\t\tdouble r = angle(p, q);\n\t\t\tif (nearlyeq(r, M_PI)) {\n\t\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t\t}\n\t\t\telse if (nearlyeq(r, 0)) {\n\t\t\t\tif (abs(q) > abs(p)) {\n\t\t\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (r < M_PI) {\n\t\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\t\t}\n\t\t}\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <vector>\n#include <stack>\n#include <queue>\n#include <map>\n#include <cmath>\n#include <string>\n#include <sstream>\n#include <iomanip>\nusing namespace std;\n\n#define ll long long\n#define vvi vector< vector<int> >\n#define All(X) X.begin(),X.end()\n#define FOR(i,a,b) for(int i=(int)(a);i<(int)(b);i++)\n#define REP(i,n) for(int i=0;i<(int)(n);i++)\n#define ld long double\n#define eps 1e-10\n\nbool eq(ld x,ld y){\n  if(abs(x-y)<eps) return true;\n  else return false;\n}\nld x[3],y[3];\nint q;\n\n\nstring rs[5]={\"COUNTER_CLOCKWISE\",\"CLOCKWISE\",\"ONLINE_BACK\",\"ONLINE_FRONT\",\"ON_SEGMENT\"};\n\nint main(){\n\n  cin >> x[0] >> y[0] >> x[1] >> y[1];\n  cin >> q;\n  REP(i,q){\n    int rst = -1;//not yet decided\n    cin >> x[2] >> y[2];\n    if(x[0]==x[1]){\n      if(x[2]<x[1]) rst = 1;\n      else rst = 2;\n      if (x[2]==x[1]) rst = -1;\n    }\n    if(rst<0){\n      ld tmp = y[0] + (y[1]-y[0])/(x[1]-x[0]) * (x[2]-x[0]);\n      if(eq(tmp,y[2])){\n        //on line\n        ld inpd = (x[1]-x[0])*(x[2]-x[0]) + (y[1]-y[0])*(y[2]-y[0]);\n        if(inpd<0) rst = 3;\n        else{\n          ld sz1 = (x[1]-x[0])*(x[1]-x[0])+(y[1]-y[0])*(y[1]-y[0]);\n          ld sz2 = (x[2]-x[0])*(x[2]-x[0])+(y[2]-y[0])*(y[2]-y[0]);\n          if(sz1<sz2) rst = 4;\n          else rst = 5;\n        }\n      }else{\n        //傾き \n        if((y[1]-y[0])/(x[1]-x[0])>=0){\n          if(tmp<y[2]) rst = 1;\n          else rst = 2;\n        }else{\n          if(tmp>y[2]) rst = 1;\n          else rst = 2;\n        }\n      }\n    }\n    cout << rs[rst-1] << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#pragma warning(disable : 4267) // \"int n = (unsigned)size\"\n\nusing vi = vector<int>; using vvi = vector<vi>; using vvvi = vector<vvi>;\nusing ll = long long int;\nusing vll = vector<ll>; using vvll = vector<vll>; using vvvll = vector<vvll>;\nusing vd = vector<double>; using vvd = vector<vd>; using vvvd = vector<vvd>;\nusing P = pair<int, int>;\nusing Pll = pair<ll, ll>;\nusing cdouble = complex<double>;\n\nconst double eps = 1e-9;\nconst double INFD = numeric_limits<double>::infinity();\n#define Loop(i, n) for(int i = 0; i < int(n); i++)\n#define Loopll(i, n) for(ll i = 0; i < ll(n); i++)\n#define Loop1(i, n) for(int i = 1; i <= int(n); i++)\n#define Loopll1(i, n) for(ll i = 1; i <= ll(n); i++)\n#define Loopr(i, n) for(int i = int(n) - 1; i >= 0; i--)\n#define Looprll(i, n) for(ll i = ll(n) - 1; i >= 0; i--)\n#define Loopr1(i, n) for(int i = int(n); i >= 1; i--)\n#define Looprll1(i, n) for(ll i = ll(n); i >= 1; i--)\n#define Foreach(buf, container) for(auto buf : container)\n#define Loopdiag(i, j, h, w, sum) for(int i = ((sum) >= (h) ? (h) - 1 : (sum)), j = (sum) - i; i >= 0 && j < (w); i--, j++)\n#define Loopdiagr(i, j, h, w, sum) for(int j = ((sum) >= (w) ? (w) - 1 : (sum)), i = (sum) - j; j >= 0 && i < (h); j--, i++)\n#define Loopdiagsym(i, j, h, w, gap) for (int i = ((gap) >= 0 ? (gap) : 0), j = i - (gap); i < (h) && j < (w); i++, j++)\n#define Loopdiagsymr(i, j, h, w, gap) for (int i = ((gap) > (h) - (w) - 1 ? (h) - 1 : (w) - 1 + (gap)), j = i - (gap); i >= 0 && j >= 0; i--, j--)\n#define Loopitr(itr, container) for(auto itr = container.begin(); itr != container.end(); itr++)\n#define printv(vector) Loop(ex_i, vector.size()) { cout << vector[ex_i] << \" \"; } cout << endl;\n#define printmx(matrix) Loop(ex_i, matrix.size()) { Loop(ex_j, matrix[ex_i].size()) { cout << matrix[ex_i][ex_j] << \" \"; } cout << endl; }\n#define quickio() ios::sync_with_stdio(false); cin.tie(0);\n#define bitmanip(m,val) static_cast<bitset<(int)m>>(val)\n#define Comp(type_t) bool operator<(const type_t &another) const\n#define fst first\n#define snd second\nbool nearlyeq(double x, double y) { return abs(x - y) < eps; }\nbool inrange(ll x, ll t) { return x >= 0 && x < t; }\nbool inrange(vll xs, ll t) { Foreach(x, xs) if (!(x >= 0 && x < t)) return false; return true; }\nint ceillog2(ll x) { int ret = 0;\tx--; while (x > 0) { ret++; x >>= 1; } return ret; }\nll rndf(double x) { return (ll)(x + (x >= 0 ? 0.5 : -0.5)); }\nll floorsqrt(ll x) { ll m = (ll)sqrt((double)x); return m + (m * m <= x ? 0 : -1); }\nll ceilsqrt(ll x) { ll m = (ll)sqrt((double)x); return m + (x <= m * m ? 0 : 1); }\nll rnddiv(ll a, ll b) { return (a / b + (a % b * 2 >= b ? 1 : 0)); }\nll ceildiv(ll a, ll b) { return (a / b + (a % b == 0 ? 0 : 1)); }\nll gcd(ll m, ll n) { if (n == 0) return m; else return gcd(n, m % n); }\nll lcm(ll m, ll n) { return m * n / gcd(m, n); }\n\n/*******************************************************/\n\nstruct intpt_t {\n\tll x, y;\n\tintpt_t operator+(const intpt_t &p) { return { x + p.x, y + p.y }; }\n\tintpt_t operator-(const intpt_t &p) { return { x - p.x, y - p.y }; }\n\tintpt_t operator*(const ll &c) { return { x * c, y * c }; }\n\tintpt_t operator/(const ll &c) { return { x / c, y / c }; }\n\tbool operator==(const intpt_t &p) { return x == p.x && y == p.y; }\n};\n\nstruct pt_t {\n\tdouble x, y;\n\tpt_t operator+(const pt_t &p) { return { x + p.x, y + p.y }; }\n\tpt_t operator-(const pt_t &p) { return { x - p.x, y - p.y }; }\n\tpt_t operator*(const double &c) { return { x * c, y * c }; }\n};\n\npt_t cvtpt(intpt_t p) {\n\treturn { double(p.x), double(p.y) };\n}\n\n// ax + by + c = 0\nstruct line_t {\n\tdouble a, b, c;\n};\n\npt_t cross_point(line_t l, line_t m) {\n\tpt_t ret = { INFD, INFD };\n\tdouble d = l.a * m.b - m.a * l.b;\n\tif (nearlyeq(d, 0)) return ret;\n\tdouble x = l.b * m.c - m.b * l.c;\n\tdouble y = l.a * m.c - m.a * l.c;\n\tret = { x / d, y / -d };\n\treturn ret;\n}\n\n// normal vector = (a, b), passing p\nline_t solve_line(double a, double b, pt_t p) {\n\treturn { a, b, -a * p.x - b * p.y };\n}\n\n// t should be radius\npt_t rot(pt_t p, double r) {\n\treturn {\n\t\tcos(r) * p.x - sin(r) * p.y,\n\t\tsin(r) * p.x + cos(r) * p.y\n\t};\n}\n\ndouble abs(pt_t p) {\n\treturn sqrt(p.x * p.x + p.y * p.y);\n}\n\n// angle [0, 2PI) of vector p to vector q\ndouble angle(pt_t p, pt_t q) {\n\tp = p * (1.0 / abs(p));\n\tq = q * (1.0 / abs(q));\n\tdouble r0 = acos(max(min(p.x * q.x + p.y * q.y, 1.0), -1.0));\n\tdouble r1 = asin(max(min(p.x * q.y - p.y * q.x, 1.0), -1.0));\n\tif (r1 >= 0) return r0;\n\telse return 2 * M_PI - r0;\n}\n\ndouble dist(line_t l, pt_t p) {\n\treturn abs(l.a * p.x + l.b * p.y + l.c)\n\t\t/ sqrt(l.a * l.a + l.b * l.b);\n}\n\nbool on_same_line(intpt_t p, intpt_t q) {\n\tint mask = (p.x ? 0 : 0b1000) + (p.y ? 0 : 0b100)\n\t\t+ (q.x ? 0 : 0b10) + (q.y ? 0 : 0b1);\n\tif ((mask & 0b1100) == 0b1100 || (mask & 0b0011) == 0b0011) return true;\n\tif ((mask & 0b1010) == 0b1010 || (mask & 0b0101) == 0b0101) return true;\n\tif (mask == 0b0000) {\n\t\tp = p / gcd(p.x, p.y);\n\t\tq = q / gcd(q.x, q.y);\n\t\tif (p.x < 0) p = p * -1;\n\t\tif (q.x < 0) q = q * -1;\n\t\tif (p == q) return true;\n\t\telse return false;\n\t}\n\telse return false;\n}\n\nint main() {\n\tintpt_t p0, p1;\n\tcin >> p0.x >> p0.y >> p1.x >> p1.y;\n\tint q; cin >> q;\n\tcout << setprecision(20);\n\tLoop(i, q) {\n\t\tintpt_t p2;\n\t\tcin >> p2.x >> p2.y;\n\t\tintpt_t ip = p1 - p0;\n\t\tintpt_t iq = p2 - p0;\n\t\tpt_t p = cvtpt(ip);\n\t\tpt_t q = cvtpt(iq);\n\t\tbool judge;\n\t\tif (on_same_line(ip, iq)) judge = true;\n\t\telse judge = false;\n\t\tdouble r = angle(p, q);\n\t\tif (judge) {\n\t\t\tif (M_PI * 0.5 < r && r < M_PI * 1.5) {\n\t\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (abs(q) > abs(p)) {\n\t\t\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif (r < M_PI) {\n\t\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\t\t}\n\t\t}\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#define EPS 1e-10\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n#include <cstdio>\n#include <cmath>\n#include <vector>\nusing namespace std;\n\n// definition of turning\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nclass Point\n{\npublic:\n  double x, y;\n  Point (double x = 0, double y = 0) : x(x), y(y) {}\n  Point operator + (Point p) {return Point(x + p.x, y + p.y); }\n  Point operator - (Point p) {return Point(x - p.x, y - p.y); }\n  Point operator * (double a) {return Point(a * x, a * y); }\n  Point operator / (double a) {return Point(x / a, y / a); }\n\n  double norm() { return x * x + y * y; }\n  double abs() { return sqrt(norm()); }\n\n  bool operator < (const Point &p) const\n  {\n    return x != p.x ? x < p.x : y < p.y;\n  }\n\n  bool operator == (const Point &p) const\n  {\n    return equals(x, p.x) && equals(y, p.y);\n  }\n};\n\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\nstruct Segment\n{\n  Point p1, p2;\n  Segment(Point p1, Point p2) : p1(p1), p2(p2) {}\n  Segment(double x1, double y1, double x2, double y2)\n  {\n    p1 = Point(x1, y1);\n    p2 = Point(x2, y2);\n  }\n};\n\ntypedef Segment Line;\n\n// dot and cross product\ndouble dot(Vector a, Vector b)\n{\n  return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b)\n{\n  return a.x * b.y - a.y * b.x;\n}\n\nint ccw(Point p0, Point p1, Point p2)\n{\n  Vector a = p1 - p0;\n  Vector b = p2 - p0;\n  if (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n  if (cross(a, b) < -EPS) return CLOCKWISE;\n  if (dot(a, b) < -EPS) return ONLINE_BACK;\n  if (a.norm() < b.norm()) return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\n\nint main()\n{\n  Point p0, p1;\n  scanf(\"%lf%lf%lf%lf\", &p0.x, &p0.y, &p1.x, &p1.y);\n  int q;\n  scanf(\"%d\", &q);\n  while (q--)\n  {\n    Point p2;\n    scanf(\"%lf%lf\", &p2.x, &p2.y);\n    int retval = ccw(p0, p1, p2);\n    if (retval == COUNTER_CLOCKWISE) printf(\"COUNTER_CLOCKWISE\\n\");\n    else if (retval == CLOCKWISE) printf(\"CLOCKWISE\\n\");\n    else if (retval == ONLINE_BACK) printf(\"ONLINE_BACK\\n\");\n    else if (retval == ONLINE_FRONT) printf(\"ONLINE_FRONT\\n\");\n    else printf(\"ON_SEGMENT\\n\");\n  }\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "// CGL_1_C\n#include <iostream>\n#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n#define N    0.00001\nusing namespace std;\n\nstruct vec{\n\tdouble x;\n\tdouble y;\n};\n\nstruct point{\n\tdouble x;\n\tdouble y;\n};\n\ndouble norm(struct vec a){\n\treturn sqrt(pow(a.x, 2) + pow(a.y, 2));\n}\n\ndouble inner_p(struct vec a, struct vec b){\n\treturn (a.x*b.x + a.y*b.y);\n}\n\ndouble cross_p(struct vec a, struct vec b){\n\treturn (a.x*b.y - a.y*b.x);\n}\n\nint main(){\n\tpoint p[3];\n\tvec v[2];\n\tint q, flag;\n\n\tcin>>p[0].x>>p[0].y>>p[1].x>>p[1].y;\n\tv[0].x = p[1].x - p[0].x;\n\tv[0].y = p[1].y - p[0].y;\n\n\tcin>>q;\n\tfor(int i=0;i<q;i++){\n\t\tcin>>p[2].x>>p[2].y;\n\n\t\tv[1].x = p[2].x - p[0].x;\n\t\tv[1].y = p[2].y - p[0].y;\n\t\t\n\t\tflag = 0;\n\t\tif(fabs(cross_p(v[0], v[1])) < N)\n\t\t\tif(inner_p(v[0], v[1]) < 0)\n\t\t\t\tflag = 3;\n\t\t\telse if(norm(v[0]) < norm(v[1]))\n\t\t\t\tflag = 4;\n\t\t\telse\n\t\t\t\tflag = 5;\n\t\telse if(cross_p(v[0], v[1]) > 0)\n\t\t\tflag = 1; \n\t\telse\n\t\t\tflag =  2;\n\n\t\tswitch(flag){\n\t\tcase 1:\n\t\t\tcout<<\"COUNTER_CLOCKWISE\"<<endl;\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tcout<<\"CLOCKWISE\"<<endl;\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tcout<<\"ONLINE_BACK\"<<endl;\n\t\t\tbreak;\n\t\tcase 4:\n\t\t\tcout<<\"ONLINE_FRONT\"<<endl;\n\t\t\tbreak;\n\t\tcase 5:\n\t\t\tcout<<\"ON_SEGMENT\"<<endl;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tcout<<\"ERROR\"<<endl;\n\t\t}\n\t}\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <complex>\n#include <map>\n#include <set>\n#include <vector>\n#include <stack>\n#include <queue>\n#include <bitset>\n#include <algorithm>\n#include <numeric>\n#include <functional>\nusing namespace std;\n\n#define Rep(b, e, i) for(int i = b; i <= e; i++)\n#define Repr(e, b, i) for(int i = e; i >= b; i--)\n#define rep(n, i) Rep(0, n-1, i)\n#define repr(n, i) Repr(n-1, 0, i)\n#define all(v) (v).begin(), (v).end()\n#define pb(v) push_back(v)\n#define uniq(v) (v).erase(unique(all(v)),(v).end())\n#define bitcnt(x) __builtin_popcount(x)\n#define fst first\n#define snd second\n#define Pqaz(T) priority_queue<T,vector<T>,greater<T>>\n#define Pqza(T) priority_queue<T>\n#define put(x) cout << x;\n#define puts(x) cout << x << ' ';\n#define putln(x) cout << x << endl;\n#define ENJYU std::ios::sync_with_stdio(false);std::cin.tie(0);\n\nconst double EPS = 1e-12;\ntypedef complex<double> comp;\n\nvoid solve(void){\n\n\tint x1, y1, x2, y2, Q;\n\tcin >> x1 >> y1 >> x2 >> y2 >> Q;\n\n\tcomp o(x1, y1), p(x2-x1, y2-y1), r;\n\n\t//回転用\n\tr = polar(1.0, arg(p));\n\n\twhile(Q--)\n\t{\n\t\tint x3, y3;\n\t\tcin >> x3 >> y3;\n\n\t\tcomp q(x3-x1, y3-y1);\n\n\t\tq /= r;\n\n\t\t//printf(\"%.12lf %.12lf\\n\", norm(p), norm(q));\n\n\t\tif (abs(arg(q)) < EPS)\n\t\t{\n\t\t\tif (norm(p) >= norm(q) - 1e-6)\n\t\t\t{\n\t\t\t\tputln(\"ON_SEGMENT\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tputln(\"ONLINE_FRONT\");\n\t\t\t}\n\t\t}\n\t\telse if (abs(abs(arg(q))-M_PI) < EPS)\n\t\t{\n\t\t\tputln(\"ONLINE_BACK\");\n\t\t}\n\t\telse if (arg(q) > 0)\n\t\t{\n\t\t\tputln(\"COUNTER_CLOCKWISE\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tputln(\"CLOCKWISE\");\n\t\t}\n\t}\n}\n\nint main(void){\n\tsolve();\n\t//cout << \"yui(*-v・)yui\" << endl;\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long double ld;\n\nconst ld EPS = 1e-9;\nconst ld INF = 1e10;\nconst ld PI = M_PI;\n\nstruct Point{\n  ld x, y;\n  Point(ld x, ld y):x(x), y(y){}\n  Point(){}\n};\n\nPoint operator+(const Point &a, const Point &b){\n  return Point(a.x + b.x, a.y + b.y);\n}\nPoint operator-(const Point &a, const Point &b){\n  return Point(a.x - b.x, a.y - b.y);\n}\nPoint operator*(const Point &a, const ld b){\n  return Point(a.x * b, a.y * b);\n}\nPoint operator*(const Point &a, const Point &b){\n  return Point(a.x*b.x-a.y*b.y, a.x*b.y+a.y*b.x);\n}\nPoint operator/(const Point &a, const ld b){\n  return Point(a.x / b, a.y / b);\n}\n\nld cross(const Point &a, const Point &b){\n  return a.x*b.y - a.y*b.x;\n}\n\nld dot(const Point &a, const Point &b){\n  return a.x*b.x + a.y*b.y;\n}\n\nld norm(const Point &a){\n  return dot(a, a);\n}\n\nstruct Line:vector<Point>{\n  Line(Point a = Point(0, 0), Point b = Point(0, 0)){\n    this->push_back(a);\n    this->push_back(b);\n  }\n};\n\nint ccw(Point a, Point b, Point c){\n  b = b - a;\n  c = c - a;\n  if(cross(b, c) > EPS) return +1; // 反時計周り\n  if(cross(b, c) < -EPS) return -1; // 時計周り\n  if(dot(b, c) < 0) return +2; // c -- a -- b がこの順番に一直線上\n  if(norm(b) < norm(c)) return -2; // a -- b -- c がこの順番に一直線上\n  return 0; // a -- c -- b が一直線上\n}\n\nint main(){  \n  Point p0, p1;\n  cin >> p0.x >> p0.y >> p1.x >> p1.y;  \n  int q;\n  cin >> q;\n  \n  Point p2;\n  while(q--){\n    cin >> p2.x >> p2.y;\n    \n    int ans = ccw(p0, p1, p2);\n    \n    if(ans == 1) cout << \"COUNTER_CLOCKWISE\" << endl;\n    if(ans == -1) cout << \"CLOCKWISE\" << endl;\n    if(ans == 2) cout << \"ONLINE_BACK\" << endl;\n    if(ans == -2) cout << \"ONLINE_FRONT\" << endl;\n    if(ans == 0) cout << \"ON_SEGMENT\" << endl;\n  }\n  \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\n\n\ntypedef int scalar;\nclass point{\n\tpublic:\n\tscalar x;\n\tscalar y;\n\tvoid print(){\n\t\tcout << x << \" \" << y; \n\t}\n\tscalar cross(point a){//??????\n\t\treturn x * a.y - y * a.x;\n\t}\n\tscalar dot(point a){//??????\n\t\treturn x * a.x + y * a.y;\n\t}\n\tscalar norm2(void){\n\t\treturn x * x + y * y;\n\t}\n\tscalar norm(void){\n\t\treturn sqrt(norm2());\n\t}\n\tpoint operator =(point a){\n\t\tthis->x = a.x;\n\t\tthis->y = a.y;\n\t\treturn *this;\n\t}\n\tpoint operator +(point a){\n\t\tpoint r;\n\t\tr.x = this->x + a.x;\n\t\tr.y = this->y + a.y;\n\t\treturn r;\n\t}\n\tpoint operator -(point a){\n\t\tpoint r;\n\t\tr.x = this->x - a.x;\n\t\tr.y = this->y - a.y;\n\t\treturn r;\n\t}\n};\n\npoint operator *(scalar t, point a){\n\tpoint r;\n\tr.x = t * a.x; \n\tr.y = t * a.y; \n\treturn r;\n}\n\n\nint main(){\n\tpoint p0, p1, p2;\n\tpoint p01,p02;\n\tint q;\n\tscalar crossproduct,innerproduct;\n\tcout.precision(20);\n\tcin >> p0.x >> p0.y >> p1.x >> p1.y;\n\tcin >> q;\n\tfor(int i = 0;i < q;i++){\n\t\tcin >> p2.x >> p2.y;\n\t\tp01 = p1-p0;\n\t\tp02 = p2-p0;\n\t\tcrossproduct = p01.cross(p02);\n\t\tinnerproduct = p01.dot(p02);\n\t\tif(crossproduct > 0)\n\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\telse if(crossproduct < 0)\n\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\telse if(innerproduct<0)\n\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\telse if(p02.norm2() > p01.norm2())\n\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\telse \n\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <math.h>\n#include <map>\n\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a)-(b)) < EPS)\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nmap<int, string> ccwMap{\n\t{ COUNTER_CLOCKWISE, \"COUNTER_CLOCKWISE\" },\n\t{ CLOCKWISE, \"CLOCKWISE\"},\n\t{ ONLINE_BACK, \"ONLINE_BACK\"},\n\t{ ONLINE_FRONT ,\"ONLINE_FRONT\"},\n\t{ ON_SEGMENT , \"ON_SEGMENT\"} \n};\n\nclass Point{\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0) :x(x), y(y){}\n\n\tPoint operator + (Point p){ return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p){ return Point(x - p.x, y - p.y); }\n\tPoint operator * (Point p){ return Point(x * p.x, y * p.y); }\n\tPoint operator / (Point p){ return Point(x / p.x, y / p.y); }\n\n\tPoint operator * (double t){ return Point(x * t, y * t); }\n\tPoint operator / (double t){ return Point(x / t, y / t); }\n\n\n\tdouble abs(){ return sqrt(norm()); }\n\tdouble norm(){ return x * x + y * y; }\n\n\tbool operator<(const Point &p){ return (x != p.x) ? (x < p.x) : (y < p.y); }\n\tbool operator==(const Point &p)\n\t{\n\t\treturn equals(x, p.x) && equals(y, p.y);\n\t}\n};\n\ntypedef Point Vector;\n\nclass Segment{\npublic:\n\tPoint p1, p2;\n};\n\ntypedef Segment Line;\n\ndouble dot(Vector a, Vector b){\n\treturn a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b){\n\treturn a.x * b.y - a.y * b.x;\n}\n\nbool isOrthogonal(Vector a, Vector b){\n\treturn equals(dot(a, b), 0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2){\n\treturn isOrthogonal(a1 - a2, b1 - b2);\n}\n\nbool isParallel(Vector a, Vector b){\n\treturn equals(cross(a, b), 0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2){\n\treturn isParallel(a1 - a2, b1 - b2);\n}\n\nPoint projection(Segment s, Point p){\n\tVector v1 = s.p2 - s.p1;\n\tVector v2 = p - s.p1;\n\treturn s.p1 + v1 * dot(v1, v2) / v1.norm();\n}\n\nPoint reflection(Segment s, Point p){\n\treturn p + (projection(s, p) - p) * 2.0;\n}\n\ndouble dist_p_p(Point p1, Point p2){\n\treturn Vector(p1 - p2).abs();\n}\n\ndouble dist_p_l(Line l, Point p){\n\tVector v1 = p - l.p1;\n\tVector v2 = l.p2 - l.p1;\n\treturn cross(v1, v2) / v2.abs();\n}\n\ndouble dist_p_s(Segment s, Point p){\n\tif (dot(p - s.p1, s.p2 - s.p1) < EPS) return (p - s.p1).abs();\n\tif (dot(p - s.p2, s.p1 - s.p2) < EPS) return (p - s.p2).abs();\n\treturn dist_p_l(s, p);\n}\n\n/*\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n*/\n\nint ccw(Point p0, Point p1, Point p2){\n\tVector v1 = p1 - p0;\n\tVector v2 = p2 - p0;\n\tdouble c = cross(v1, v2);\n\tif (c > EPS) return COUNTER_CLOCKWISE;\n\tif (c < -EPS) return CLOCKWISE;\n\tdouble d = dot(v1, v2);\n\tif (d < -EPS) return ONLINE_BACK;\n\tif (v1.norm() < v2.norm()) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\ndouble dist_s_s(Segment s1, Segment s2){\n\treturn 0;\n}\n\nint main()\n{\n\tstd::ios_base::sync_with_stdio(false);\n\tcout.precision(20);\n\n\tPoint p0, p1;\n\tcin >> p0.x >> p0.y >> p1.x >> p1.y;\n\n\tint q; cin >> q;\n\tfor (int i = 0; i < q; ++i){\n\t\tPoint p2; cin >> p2.x >> p2.y;\n\t\tint res = ccw(p0, p1, p2);\n\t\tcout << ccwMap[res] << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<cstdlib>\n#include<cmath>\n#include<iostream>\n#include<vector>\n#include<algorithm>\n\nusing namespace std;\n\nint main()\n{\n\tdouble p1x, p1y, p2x, p2y, p0x, p0y;\n\tint q;\n\n\tscanf(\"%lf %lf %lf %lf\", &p0x, &p0y, &p1x, &p1y);\n\n\tpair<double, double> v01 = { p1x - p0x, p1y - p0y };\n\n\n\tscanf(\"%d\", &q);\n\n\tfor (int i = 0; i < q; i++)\n\t{\n\t\tscanf(\"%lf %lf\", &p2x, &p2y);\n\n\t\tif ((p2x == p0x && p2y == p0y) || (p2x == p1x && p2y == p0y)){\n\t\t\tprintf(\"ONLINE_SEGMENT\\n\");\n\n\t\t\tcontinue;\n\t\t}\n\n\t\tpair<double, double> v02 = { p2x - p0x, p2y - p0x };\n\n\t\tif (v01.first*v02.second == v01.second*v01.first)\n\t\t{\n\t\t\tif (v01.first*v02.first < 0)\n\t\t\t{\n\t\t\t\tprintf(\"ONLINE_BACK\\n\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tabs(v01.first) < abs(v02.first) ? printf(\"ONLINE_FRONT\\n\") : printf(\"ONLINE_SEGMENT\\n\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\n\t\tdouble y01 = (v01.second / v01.first)*(p2x - p0x) + p0y;\n\t\ty01 < p2y ? printf(\"COUNTER_CLOCKWISE\\n\") : printf(\"CLOCKWISE\\n\");\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#define __USE_MINGW_ANSI_STDIO 0\n#include <bits/stdc++.h>\n\nusing namespace std;\nusing ll = long long;\n#define int ll\nusing VI = vector<int>;\nusing VVI = vector<VI>;\nusing PII = pair<int, int>;\n\n#define FOR(i, a, n) for (ll i = (ll)a; i < (ll)n; ++i)\n#define REP(i, n) FOR(i, 0, n)\n#define ALL(x) x.begin(), x.end()\n#define PB push_back\n\nconst ll LLINF = (1LL<<60);\nconst int INF = (1LL<<30);\nconst int MOD = 1000000007;\n\ntemplate <typename T> T &chmin(T &a, const T &b) { return a = min(a, b); }\ntemplate <typename T> T &chmax(T &a, const T &b) { return a = max(a, b); }\ntemplate <typename T> bool IN(T a, T b, T x) { return a<=x&&x<b; }\ntemplate<typename T> T ceil(T a, T b) { return a/b + !!(a%b); }\ntemplate<class S,class T>\nostream &operator <<(ostream& out,const pair<S,T>& a){\n  out<<'('<<a.first<<','<<a.second<<')';\n  return out;\n}\ntemplate<class T>\nostream &operator <<(ostream& out,const vector<T>& a){\n  out<<'[';\n  REP(i, a.size()) {out<<a[i];if(i!=a.size()-1)out<<',';}\n  out<<']';\n  return out;\n}\n\nint dx[] = {0, 1, 0, -1}, dy[] = {1, 0, -1, 0};\n\nconst double EPS = 1e-8;\n\nusing R = long double;\nusing P = complex<R>;\nusing L = pair<P,P>;\n\ninline int sgn(const R& r) { return (r>EPS) - (r<-EPS); }\nnamespace std {\n\tbool operator < (const P& a, const P& b) {\n\t\treturn sgn(real(a-b)) ? real(a-b) < 0 : sgn(imag(a-b)) < 0;\n\t}\n\tbool operator == (const P& a, const P& b) {\n\t\treturn sgn(real(a-b)) == 0 && sgn(imag(a-b)) == 0;\n\t}\n}\ninline R dot(const P& a, const P& b) {\n  return real(a)*real(b) + imag(a)*imag(b);\n}\ninline R det(const P& a, const P& b) {\n  return real(a)*imag(b)-imag(a)*real(b);\n}\n// a/b\ninline P div(const P &a, const P &b) {\n  return {dot(b,a)/norm(b), det(b,a)/norm(b)};\n}\n\n// PとLについて入力\ninline istream& operator>>(istream& is, P& p) {\n  R x, y;\n  is >> x >> y;\n  p = P(x, y);\n  return is;\n}\ninline istream& operator>>(istream& is, L& l) {\n  P a, b;\n  is >> a >> b;\n  l = L(a, b);\n  return is;\n}\n\n// 線分abから見たcの位置\nenum CCW{LEFT=1, RIGHT=2, BACK=4, FRONT=8, ON=16};\nint ccw(P a, P b, P c) {\n\tP p = div(c-a, b-a);\n\tif(imag(p) > 0) return LEFT;\n\tif(imag(p) < 0) return RIGHT;\n\tif(real(p) < 0) return BACK;\n\tif(real(p) > 1) return FRONT;\n\treturn ON;\n}\n\nsigned main(void)\n{\n  cin.tie(0);\n  ios::sync_with_stdio(false);\n\n  L l;\n  cin >> l;\n  int q;\n  cin >> q;\n  REP(i, q) {\n    P p;\n    cin >> p;\n    int ret = ccw(l.first, l.second, p);\n    if(ret == LEFT) cout << \"COUNTER_CLOCKWISE\" << endl;\n    else if(ret == RIGHT) cout << \"CLOCKWISE\" << endl;\n    else if(ret == BACK) cout << \"ONLINE_BACK\" << endl;\n    else if(ret == FRONT) cout << \"ONLINE_FRONT\" << endl;\n    else if(ret == ON) cout << \"ON_SEGMENT\" << endl;\n  }\n\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define REP(i,first,last) for(int i=first;i<=last;++i)\n#define DOW(i,first,last) for(int i=first;i>=last;--i)\nusing namespace std;\ninline int Read()\n{\n\tint x(0),f(1);\n\tchar c(getchar());\n\twhile(c<'0'||'9'<c)\n\t{\n\t\tif(c=='-')\n\t\t{\n\t\t\tf=-1;\n\t\t}\n\t\tc=getchar();\n\t}\n\twhile('0'<=c&&c<='9')\n\t{\n\t\tx=(x<<1)+(x<<3)+c-'0';\n\t\tc=getchar();\n\t}\n\treturn f*x;\n}\nvoid Write(int x)\n{\n\tif(x<0)\n\t{\n\t\tprintf(\"-\");\n\t\tx=-x;\n\t}\n\tif(9<x)\n\t{\n\t\tWrite(x/10);\n\t}\n\tputchar(x%10+'0');\n}\ninline void Writeln(int x)\n{\n\tWrite(x);\n\tputs(\"\");\n}\nstruct Point\n{\n\tdouble x,y;\n\tPoint(double fx=0,double fy=0)\n\t{\n\t\tx=fx;\n\t\ty=fy;\n\t}\n\tvoid Read()\n\t{\n\t\tscanf(\"%lf%lf\",&x,&y);\n\t}\n\tdouble operator ^(Point const b)const\n\t{\n\t\treturn x*b.x+y*b.y;\n\t}\n\tdouble operator *(Point const b)const\n\t{\n\t\treturn x*b.y-b.x*y;\n\t}\n\tdouble operator ==(Point const b)const\n\t{\n\t\treturn sqrt((x-b.x)*(x-b.x)+(y-b.y)*(y-b.y));\n\t}\n};\nstruct Vector\n{\n\tPoint a,b;\n\tVector(Point f=Point(0,0),Point e=Point(0,0))\n\t{\n\t\ta=f;\n\t\tb=e;\n\t}\n\tdouble operator |(Vector const c)const\n\t{\n\t\treturn (a.x-b.x)*(c.a.y-c.b.y)-(c.a.x-c.b.x)*(a.y-b.y);\n\t}\n};\nconst int MAXN=1e5+5;\nPoint p0,p1,p2;\nvoid Work()\n{\n\tp2.Read();\n\tdouble c=Vector(p0,p1)|Vector(p0,p2);\n\tif(0<c)\n\t{\n\t\tprintf(\"COUNTER_CLOCKWISE\\n\");\n\t\treturn;\n\t}\n\tif(c<0)\n\t{\n\t\tprintf(\"CLOCKWISE\\n\");\n\t\treturn;\n\t}\n\tif(p0.x==p1.x&&p0.y==p1.y)\n\t{\n\t\tprintf(\"ONLINE_FRONT\\n\");\n\t\treturn;\n\t}\n\tif(p0.x==p2.x&&p0.y==p2.y)\n\t{\n\t\tprintf(\"ON_SEGMENT\\n\");\n\t\treturn;\n\t}\n\tif((p1.x<p0.x)^(p2.x<=p0.x)&&(p1.y<p0.y)^(p2.y<=p0.y))\n\t{\n\t\tprintf(\"ONLINE_BACK\\n\");\n\t\treturn;\n\t}\n\tdouble dis1=p0==p1;\n\tdouble dis2=p0==p2;\n\tif(dis1<dis2)\n\t{\n\t\tprintf(\"ONLINE_FRONT\\n\");\n\t\treturn;\n\t}\n\tprintf(\"ON_SEGMENT\\n\");\n}\nint main()\n{\n\tp0.Read();\n\tp1.Read();\n\tint q;\n\tscanf(\"%d\",&q);\n\tREP(i,1,q)\n\t{\n\t\tWork();\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#define rep(i, n) for (int i = 0; i < (int)(n); i++)\n#define ALL(v) v.begin(), v.end()\ntypedef long long ll;\n\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n\n// cout<<fixed<<setprecision(15)\nstatic const int COUNTER_CLOCKWISE=1;\nstatic const int CLOCKWISE=-1;\nstatic const int ONLINE_BACK=2;\nstatic const int ONLINE_FRONT=-2;\nstatic const int ON_SEGMENT=0;\n\n//点またはベクトル\nclass Point{\n  public:\n  double x,y;\n  \n  Point(double x=0, double y=0): x(x),y(y) {}\n  \n  Point operator+(Point p){return Point(x+p.x,y+p.y);}\n  Point operator-(Point &p){return Point(x-p.x,y-p.y);}\n  Point operator*(double a){return Point(a*x,a*y);}\n  Point operator/(double a){return Point(x/a,y/a);}\n  \n  bool operator<(const Point &p) const{\n    return x != p.x ? x<p.x : y<p.y;\n  }\n  \n  bool operator==(const Point &p) const{\n    return fabs(x-p.x)<EPS && fabs(y-p.y)<EPS;\n  }\n};\ntypedef Point Vector;\n//ベクトルの二乗和と絶対値\ndouble norm(Point p){return p.x*p.x+p.y*p.y;}\ndouble abs(Point p){return sqrt(norm(p));}\n//線分または直線\nstruct Segment{Point p1,p2;};\ntypedef Segment Line;\n//円\nclass Circle{\npublic:\n  Point c;\n  double r;\n  Circle(Point c=Point(), double r=0.0): c(c), r(r) {}\n};\n//多角形\ntypedef vector<Point> Polygon;\n//内積\ndouble dot(Vector a,Vector b){return a.x*b.x+a.y*b.y;}\n//外積\ndouble cross(Vector a,Vector b){return a.x*b.y-a.y*b.x;}\n//直交判定\nbool isOrthgonal(Vector a,Vector b){return equals(dot(a,b), 0.0);}\n//平行判定\nbool isParallel(Vector a,Vector b){return equals(cross(a,b), 0.0);}\n//射影\nPoint project(Segment s,Point p){\n  Vector base=s.p2-s.p1;\n  double r=dot(p-s.p1,base)/norm(base);\n  return s.p1+base*r;\n}\n//反射\nPoint reflect(Segment s,Point p){return p+(project(s,p)-p)*2.0;}\n//点と点の距離\ndouble getDisPP(Point a,Point b){return abs(a-b);}\n//直線と点の距離\ndouble getDisLP(Line l,Point p){return abs(cross(l.p2-l.p1,p-l.p1))/abs(l.p2-l.p1);}\n//線分と点の距離\ndouble getDisSP(Segment s,Point p){\n  if(dot(s.p2-s.p1,p-s.p1)<0.0) return abs(p-s.p1);\n  if(dot(s.p1-s.p2,p-s.p2)<0.0) return abs(p-s.p2);\n  return getDisLP(s,p);\n}\n//線分と線分の距離\ndouble getDisSS(Segment s1,Segment s2){\n//  if(intersect(s1,s2)) return 0.0;\n  return min(min(getDisSP(s1,s2.p1),getDisSP(s1,s2.p2)),\n             min(getDisSP(s2,s1.p1),getDisSP(s2,s1.p2)));\n}\n//反時計周りCounter-Clockwise\nint ccw(Point p0,Point p1,Point p2){\n  Vector a=p1-p0;\n  Vector b=p2-p0;\n  if(cross(a,b)>EPS) return COUNTER_CLOCKWISE;\n  if(cross(a,b)<-EPS) return CLOCKWISE;\n  if(dot(a,b)<-EPS) return ONLINE_BACK;\n  if(norm(a)<norm(b)) return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\n\nint main(){\n  Point p0,p1,p2;\n  int q;\n  \n  cin>>p0.x>>p0.y>>p1.x>>p1.y>>q;\n  \n  rep(i,q){\n    cin>>p2.x>>p2.y;\n    int c=ccw(p0,p1,p2);\n    if(c==1) cout<<\"COUNTER_CLOCKWISE\"<<endl;\n    else if(c==-1) cout<<\"CLOCKWISE\"<<endl;\n    else if(c==2) cout<<\"ONLINE_BACK\"<<endl;\n    else if(c==-2) cout<<\"ONLINE_FRONT\"<<endl;\n    else cout<<\"ON_SEGMENT\"<<endl;\n  }\n    \n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> P;\n#define x real()\n#define y imag()\n\ndouble eps = 1e-9;\n\nstring ccw(P a,P b,P c){\n  P ab=b-a;\n  P ac=c-a;\n  P k=ac*conj(ab);\n  if( k.y > eps ){\n    return \"COUNTER_CLOCKWISE\";\n  }\n  if( k.y < -eps ){\n    return \"CLOCKWISE\";\n  }\n  if( k.x < -eps ){\n    return \"ONLINE_BACK\";\n  }  \n  if( abs(ab)+eps < abs(ac) ){\n    return \"ONLINE_FRONT\";\n  }\n  return \"ON_SEGMENT\";\n}\n\nint main(){\n  \n  double x0,y0,x1,y1,x2,y2;\n  cin>>x0>>y0>>x1>>y1;\n  P a(x0,y0);\n  P b(x1,y1);\n  int n;\n  cin>>n;\n  while(n--){\n    cin>>x2>>y2;\n    P c(x2,y2);\n    cout<< ccw(a,b,c) <<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <complex>\n#include <map>\n#include <set>\n#include <vector>\n#include <stack>\n#include <queue>\n#include <bitset>\n#include <algorithm>\n#include <numeric>\n#include <functional>\nusing namespace std;\n\n#define Rep(b, e, i) for(int i = b; i <= e; i++)\n#define Repr(e, b, i) for(int i = e; i >= b; i--)\n#define rep(n, i) Rep(0, n-1, i)\n#define repr(n, i) Repr(n-1, 0, i)\n#define all(v) (v).begin(), (v).end()\n#define pb(v) push_back(v)\n#define uniq(v) (v).erase(unique(all(v)),(v).end())\n#define bitcnt(x) __builtin_popcount(x)\n#define fst first\n#define snd second\n#define Pqaz(T) priority_queue<T,vector<T>,greater<T>>\n#define Pqza(T) priority_queue<T>\n#define put(x) cout << x;\n#define puts(x) cout << x << ' ';\n#define putln(x) cout << x << endl;\n#define ENJYU std::ios::sync_with_stdio(false);std::cin.tie(0);\n\nconst double EPS = 1e-12;\ntypedef complex<double> comp;\n\nvoid solve(void){\n\n\tint x1, y1, x2, y2, Q;\n\tcin >> x1 >> y1 >> x2 >> y2 >> Q;\n\n\tcomp o(x1, y1), p(x2-x1, y2-y1), r;\n\n\t//回転用\n\tr = polar(1.0, arg(p));\n\n\twhile(Q--)\n\t{\n\t\tint x3, y3;\n\t\tcin >> x3 >> y3;\n\n\t\tcomp q(x3-x1, y3-y1);\n\n\t\tq /= r;\n\n\t\tif (abs(arg(q)) < EPS)\n\t\t{\n\t\t\tif (norm(p) >= norm(q))\n\t\t\t{\n\t\t\t\tputln(\"ON_SEGMENT\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tputln(\"ONLINE_FRONT\");\n\t\t\t}\n\t\t}\n\t\telse if (abs(abs(arg(q))-M_PI) < EPS)\n\t\t{\n\t\t\tputln(\"ONLINE_BACK\");\n\t\t}\n\t\telse if (arg(q) > 0)\n\t\t{\n\t\t\tputln(\"COUNTER_CLOCKWISE\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tputln(\"CLOCKWISE\");\n\t\t}\n\t}\n}\n\nint main(void){\n\tsolve();\n\t//cout << \"yui(*-v・)yui\" << endl;\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n#define ALL(x) x.begin(),x.end()\n#define rep(i,n) for(int i=0;i<(n);i++)\n#define debug(v) cout<<#v<<\":\";for(auto x:v){cout<<x<<' ';}cout<<endl;\n#define INF 1000000000\n#define mod 1000000007\nusing ll=long long;\nconst ll LINF=1001002003004005006ll;\nint dx[]={1,0,-1,0};\nint dy[]={0,1,0,-1};\nll gcd(ll a,ll b){return b?gcd(b,a%b):a;}\ntemplate<class T>bool chmax(T &a,const T &b){if(a<b){a=b;return true;}return false;}\ntemplate<class T>bool chmin(T &a,const T &b){if(b<a){a=b;return true;}return false;}\n\n//////////////////////////////////////////////////////\nusing Real=double;\nusing Point=complex<Real>;\nconst Real EPS=1e-10;\nconst Real pi=acosl(-1);\n//入出力補助\nistream &operator>>(istream &is,Point &p){\n    Real a,b;\n    is>>a>>b;\n    p=Point(a,b);\n    return is;\n}\nostream &operator<<(ostream &os,Point &p){\n    return os<<fixed<<setprecision(12)<<p.real()<<' '<<p.imag();\n}\n\ninline bool eq(Real a,Real b){\n    return fabs(a-b)<EPS;\n}\nPoint operator*(const Point &p,const Real &d){\n    return Point(real(p)*d,imag(p)*d);\n}\nstruct Line{\n    Point p1,p2;\n    Line(Point p1,Point p2):p1(p1),p2(p2){}\n \n    //Ax + By = C\n    Line(Real A,Real B,Real C){\n       if(eq(A,0))     p1=Point(0,C/B),p2=Point(1,C/B);\n       else if(eq(B,0))p1=Point(C/A,0),p2=Point(C/A,1);\n       else            p1=Point(0,C/B),p2=Point(C/A,0);\n    }\n};\nstruct Segment:Line{\n   Segment()=default;\n   Segment(Point p1,Point p2):Line(p1,p2){}\n};\nstruct Circle{\n    Point center;\n    Real r;\n    Circle(Point center,Real r):center(center),r(r){}\n};\n/////////////////////////////////////////////////////////\n\n \n// 点 p を反時計回りに theta 回転\nPoint rotate(Real theta, const Point &p) {\n    return Point(cos(theta)*p.real()-sin(theta)*p.imag(),sin(theta)*p.real()+cos(theta)*p.imag());\n}\n \nReal radian_to_degree(Real r){\n    return r*180.0/pi;\n}\n\nReal degree_to_radian(Real d){\n    return d*pi/180.0;\n}\n\n//三角形の面積，サラスの公式\nReal area_triangle(Point a,Point b,Point c){\n    Point x=b-a,y=c-a;\n    return fabs(x.real()*y.imag()-x.imag()*y.real())/2;\n}\n \n//v\n//外積\nReal cross(const Point &a, const Point &b){\n    return real(a)*imag(b)-imag(a)*real(b);\n}\n \n//v\n//内積\nReal dot(const Point &a, const Point &b) {\n    return real(a)*real(b)+imag(a)*imag(b);\n}\n \n//v\n//平行判定，外積0かをみる\nbool parallel(Line &a,Line &b){\n    return eq(cross(a.p1-a.p2,b.p1-b.p2),0.0);\n}\n \n//v\n//垂直判定，内積0かをみる\nbool orthogonal(Line &a,Line &b){\n    return eq(dot(a.p1-a.p2,b.p1-b.p2),0.0);\n}\n \n//v\n//正射影，pからlに下した垂線の足を求める\nPoint projection(const Line &l, const Point &p){\n    //ベクトルl上のどの位置に垂線の足が来るか求める\n    Real k=dot(l.p1-l.p2,p-l.p1)/norm(l.p1-l.p2);\n    return l.p1+(l.p1-l.p2)*k;\n}\nPoint projection(const Segment &l, const Point &p){\n    Real k=dot(l.p1-l.p2,p-l.p1)/norm(l.p1-l.p2);\n    return l.p1+(l.p1-l.p2)*k;\n}\n \n//v\n//反射，直線lに関し点pと線対称な点を返す\nPoint reflection(const Line &l, const Point &p){\n    Point h=projection(l,p);\n    return (p+(h-p)+(h-p));\n}\nPoint reflection(const Segment &l, const Point &p){\n    Point h=projection(l,p);\n    return (p+(h-p)+(h-p));\n}\n\n//二点間の距離\nReal dis(Point a,Point b){\n    return abs(a-b);\n} \n//点と直線の距離\nReal dis(const Line &l,const Point &p){\n    return abs(p-projection(l,p));\n}\n//\n \n//v\n//COUNTER CLOCKWISE，返す値は↓を参照\n//https://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/all/CGL_1_C\nint ccw(Point a,Point b,Point c){\n    b-=a;c-=a;\n    if(cross(b,c)>EPS)       return  1;//COUNTER CLOCKWISE\n    else if(cross(b,c)<-EPS) return -1;//CLOCKWISE\n    else if(dot(b,c)<0)      return  2;//c--a--b ONLINE BACK\n    else if(norm(b)<norm(c)) return -2;//a--b--c ONLINE FRONT\n    else                     return  0;//a--c--b ON SEGMENT\n}\n \n//v\n//3点が作る三角形の外心\n//面積0の三角形を渡すと分母に面積があるので壊れるかも\nPoint circumcenter(const Point &A,const Point &B,const Point &C){\n    Real S=area_triangle(A,B,C);\n    Real a=dis(B,C),b=dis(A,C),c=dis(A,B);\n    return A*(a*a*(b*b+c*c-a*a)/(16*S*S))+B*(b*b*(c*c+a*a-b*b)/(16*S*S))+C*(c*c*(a*a+b*b-c*c)/(16*S*S));\n}\n \n \n//交差判定\n//直線状に乗るか\nbool intersect(const Line &l,const Point &p){\n    return abs(ccw(l.p1,l.p2,p))!=1;\n}\n//直線の交差判定，外積\nbool intersect(const Line &l1,const Line &l2){\n    return abs(cross(l1.p2-l1.p1,l2.p2-l2.p1))>EPS or\n        abs(cross(l1.p2-l1.p1,l2.p2-l1.p1))<EPS;\n}\n//線分に点が乗るかの判定，ccw\nbool intersect(const Segment &s,const Point &p){\n    return ccw(s.p1,s.p2,p)==0;\n}\n//直線と線分の交差判定\nbool intersect(const Line &l,const Segment &s){\n    return cross(l.p2-l.p1,s.p1-l.p1)*cross(l.p2-l.p1,s.p2-l.p1)<EPS;\n}\n//円と直線の交差判定\nbool intersect(const Circle &c,const Line &l){\n    return dis(l,c.center)<=c.r+EPS;\n}\n//円上かどうか，内部かどうかではない\nbool intersect(const Circle &c,const Point &p){\n    return abs(abs(p-c.center)-c.r)<EPS;\n}\n//v\n//線分と線分の交差判定\nbool intersect(const Segment &s,const Segment &t){\n    return ccw(s.p1,s.p2,t.p1)*ccw(s.p1,s.p2,t.p2) <=0 and\n        ccw(t.p1,t.p2,s.p1)*ccw(t.p1,t.p2,s.p2)<=0;\n}\n \n \n//v\n//最小包含円を返す　計算量は期待値O(n)\nCircle MinimumBoundingCircle(vector<Point> v){\n   int n=v.size();\n  \n   //ランダムシャッフル．いぢわるされたくないもんだ\n   mt19937 mt(time(0));\n   shuffle(v.begin(),v.end(),mt);\n \n   Circle ret(0,0);\n   //2点で円を作る\n   auto make_circle2=[&](Point a,Point b){\n       return Circle((a+b)*0.5,dis(a,b)/2);\n   };\n   //3点で円を作る\n   auto make_circle3=[&](Point A,Point B,Point C){\n       Point cent=circumcenter(A,B,C);\n       return Circle(cent,dis(cent,A));\n   };\n   auto isIn=[&](Point a){\n       return dis(ret.center,a)<ret.r+EPS;\n   };\n \n   ret=make_circle2(v[0],v[1]);\n   for(int i=2;i<n;i++){\n       //v[i]が円に入っていないなら\n       if(!isIn(v[i])){\n           //円内にないなら点v[i]は必ず円周上に来る\n           ret=make_circle2(v[0],v[i]);\n           for(int j=1;j<i;j++){\n               if(!isIn(v[j])){\n                   //この時iとjが円周上を考える\n                   ret=make_circle2(v[i],v[j]);\n                   //最後の1点の決定\n                   for(int k=0;k<j;k++){\n                       if(!isIn(v[k])){\n                           ret=make_circle3(v[i],v[j],v[k]);\n                       }\n                   }\n               }\n           }\n       }\n   }\n   return ret;\n}\n\n\nsigned main(){\n    cin.tie(0);\n    ios::sync_with_stdio(0);\n    \n    Point a,b;cin>>a>>b;\n    int q;cin>>q;\n    while(q--){\n        Point c;cin>>c;\n        int ans=ccw(a,b,c);\n        if(ans== 1) cout<<\"COUNTER_CLOCKWISE\"<<endl;\n        if(ans==-1) cout<<\"CLOCKWISE\"<<endl;\n        if(ans== 2) cout<<\"ONLINE_BACK\"<<endl;\n        if(ans==-2) cout<<\"ONLINE_FRONT\"<<endl;\n        if(ans== 0) cout<<\"ON_SEGMENT\"<<endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nclass Point {\n    public:\n        double x, y;\n        Point(double x = 0.0, double y = 0.0): x(x), y(y) {}\n\n        Point operator + (Point p) { return Point(x + p.x, y + p.y); }\n        Point operator - (Point p) { return Point(x - p.x, y - p.y); }\n        Point operator * (double k) { return Point(x * k, y * k); }\n        Point operator / (double k) { return Point(x / k, y / k); }\n\n        double friend norm(Point p) { return p.x * p.x + p.y * p.y; }\n        double friend abs(Point p) { return sqrt(norm(p)); }\n};\ntypedef Point Vector;\n\ndouble dot(Vector v1, Vector v2) {\n    return v1.x * v2.x + v1.y * v2.y;\n}\n\ndouble cross(Vector v1, Vector v2) {\n    return v1.x * v2.y - v1.y * v2.x;\n}\n\nint main(void) {\n    int q, c, d;\n    Point p0, p1, p2;\n    cin >> p0.x >> p0.y;\n    cin >> p1.x >> p1.y;\n    cin >> q;\n\n    for (int i = 0; i < q; i++) {\n        cin >> p2.x >> p2.y;\n        c = cross(p1 - p0, p2 - p0);\n        d = dot(p1 - p0, p2 - p0);\n        if (c > 0) cout << \"COUNTER_CLOCKWISE\\n\";\n        else if (c < 0) cout << \"CLOCKWISE\\n\";\n        else if (d < 0) cout << \"ONLINE_BACK\\n\";\n        else if (abs(p2 - p0) > abs(p1 - p0)) cout << \"ONLINE_FRONT\\n\";\n        else cout << \"ON_SEGMENT\\n\";\n    }\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <complex>\n#include <cstdio>\n#include <map>\n\nusing namespace std;\n\n#define REP(i,n) for(int i = 0; i < (int)(n); ++i)\n#define FOR(i,a,b) for(int i = (a); i < (int)(b); ++i)\n#define ALL(c) (c).begin(), (c).end()\n#define SIZE(v) ((int)v.size())\n\ntypedef complex<double> P;\n\n// ??????\ndouble dot(const P& a, const P& b) {\n    return real(conj(a)*b);\n}\n\n// ??????\ndouble cross(const P& a, const P& b) {\n    return imag(conj(a)*b);\n}\n\n// ???p2?????????p0, p1???????????´???????°???±?????????\nP projection(const P& p0, const P& p1, const P& p2) {\n    // ???????????????????????´???\n    P vec1 = p1 - p0;\n    P vec2 = p2 - p0;\n    return p0 + vec1 * dot(vec1, vec2) / dot(vec1, vec1);\n}\n\n// ???p0, p1???????????´??????????§°?????¨????????????p2??¨????§°??????\nP reflection(const P& p0, const P& p1, const P& p2) {\n    P proj = projection(p0, p1, p2);\n    return proj - (p2 - proj);\n}\n\nint ccw(P a, P b, P c) {\n    b -= a; c -= a;\n    if (cross(b, c) > 0)   return +1;       // counter clockwise\n    if (cross(b, c) < 0)   return -1;       // clockwise\n    if (dot(b, c) < 0)     return +2;       // c--a--b on line\n    if (norm(b) < norm(c)) return -2;       // a--b--c on line\n    return 0;\n}\n\n// // ????????¨???P??¨??????????????????????????¢\n// double norm(const P& a, const P& b) {\n//     return dot(\n//     return real(conj(a)*b);\n// }\n\nint main(){\n    double x0, y0, x1, y1;\n    int Q;\n\n    cin >> x0 >> y0 >> x1 >> y1;\n    \n    P p0(x0, y0);\n    P p1(x1, y1);\n\n    cin >> Q;\n    REP(q, Q) {\n        double x2, y2;\n        cin >> x2 >> y2;\n        P p2(x2, y2);\n        auto ret = ccw(p0, p1, p2);\n        map<int, string> table{\n            {+1, \"COUNTER_CLOCKWISE\"},\n            {-1, \"CLOCKWISE\"},\n            {+2, \"ONLINE_BACK\"},\n            {-1, \"ONLINE_FRONT\"}\n        };\n        cout << table[ret] << endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <complex>\n#include <sstream>\n#include <string>\n#include <algorithm>\n#include <deque>\n#include <list>\n#include <map>\n#include <numeric>\n#include <queue>\n#include <vector>\n#include <set>\n#include <limits>\n#include <cstdio>\n#include <cctype>\n#include <cmath>\n#include <cstring>\n#include <cstdlib>\n#include <ctime>\nusing namespace std;\n#define REP(i, j) for(int i = 0; i < (int)(j); ++i)\n#define FOR(i, j, k) for(int i = (int)(j); i < (int)(k); ++i)\n#define SORT(v) sort((v).begin(), (v).end())\n#define REVERSE(v) reverse((v).begin(), (v).end())\nconst double EPS = 1e-8;\nconst double INF = 1e12;\ntypedef complex<double> P;\nnamespace std {\n  bool operator < (const P& a, const P& b) {\n    return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n  }\n}\ndouble cross(const P& a, const P& b) {\n  return imag(conj(a)*b);\n}\ndouble dot(const P& a, const P& b) {\n  return real(conj(a)*b);\n}\n\nint ccw(P a, P b, P c) {\n  b -= a; c -= a;\n  if (cross(b, c) > 0)   return +1;       // counter clockwise\n  if (cross(b, c) < 0)   return -1;       // clockwise\n  if (dot(b, c) < 0)     return +2;       // c--a--b on line\n  if (norm(b) < norm(c)) return -2;       // a--b--c on line\n  return 0;                               // a--c--b on line\n}\n\nint main() {\n  int x0, y0, x1, y1, Q;\n  cin >>x0 >>y0 >>x1 >>y1;\n  P a = P(x0, y0), b = P(x1, y1);\n  cin >>Q;\n  REP(q, Q){\n    int x, y; cin >>x >>y;\n    P c = P(x, y);\n    int ans = ccw(a, b, c);\n    string s;\n    if(ans == 1) s = \"COUNTER_CLOCKWISE\";\n    if(ans == -1) s = \"CLOCKWISE\";\n    if(ans == 2) s = \"ONLINE_BACK\";\n    if(ans == -2) s = \"ONLINE_FRONT\";\n    if(ans == 0) s = \"ON_SEGMENT\";\n    cout <<s <<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#pragma GCC target(\"avx2\")\n#pragma GCC optimize(\"O3\")\n#pragma GCC optimize(\"unroll-loops\")\n#include <bits/stdc++.h>\nconstexpr long long INF = 1LL << 60;\nconstexpr long long MOD = 1000000007;\ndouble PI = acos(-1.0);\n#define rep(i, n) for (ll i = 0; i < (n); ++i)\n#define rep1(i, n) for (ll i = 1; i <= (n); ++i)\n#define rrep(i, n) for (ll i = (n - 1); i >= 0; --i)\n#define perm(c) sort(ALL(c));for(bool c##p=1;c##p;c##p=next_permutation(ALL(c)))\n#define ALL(obj) (obj).begin(), (obj).end()\n#define RALL(obj) (obj).rbegin(), (obj).rend()\n#define pb push_back\n#define to_s to_string\n#define len(v) (ll)v.size()\n#define UNIQUE(v) v.erase(unique(v.begin(), v.end()), v.end())\n#define print(x) cout << (x) << '\\n'\n#define drop(x) cout << (x) << '\\n', exit(0)\n#define debug(x) cout << #x << \": \" << (x) << '\\n'\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<ll, ll> P;\ntypedef tuple<ll, ll, ll> tpl;\ntypedef vector<ll> vec;\ntypedef vector<vector<ll>> vec2;\ntypedef vector<vector<vector<ll>>> vec3;\ntemplate<class S, class T> inline bool chmax(S &a, const T &b) { if (a<b) { a=b; return 1; } return 0; }\ntemplate<class S, class T> inline bool chmin(S &a, const T &b) { if (b<a) { a=b; return 1; } return 0; }\ninline ll msb(ll v) { return 1 << (31 - __builtin_clzll(v)); }\ninline ll devc(ll x, ll y) { return (x + y - 1) / y; }\ninline ll gcd(ll a, ll b) { return b ? gcd(b, a % b) : a; }\ninline ll lcm(ll a, ll b) { return a * (b / gcd(a, b)); }\n \nstruct IoSetup {\n    IoSetup() {\n        cin.tie(nullptr);\n        ios::sync_with_stdio(false);\n        cout << fixed << setprecision(10);\n        cerr << fixed << setprecision(10);\n    }\n} iosetup;\n \ntemplate< typename T1, typename T2 >\nostream &operator << (ostream &os, const pair< T1, T2 > &p) {\n    os << p.first << \" \" << p.second;\n    return os;\n}\n \ntemplate< typename T1, typename T2 >\nistream &operator >> (istream &is, pair< T1, T2 > &p) {\n    is >> p.first >> p.second;\n    return is;\n}\n \ntemplate< typename T1, typename T2, typename T3 >\nostream &operator << (ostream &os, const tuple< T1, T2, T3 > &t) {\n    os << get<0>(t) << \" \" << get<1>(t) << \" \" << get<2>(t);\n    return os;\n}\n \ntemplate< typename T1, typename T2, typename T3 >\nistream &operator >> (istream &is, tuple< T1, T2, T3 > &t) {\n    is >> get<0>(t) >> get<1>(t) >> get<2>(t);\n    return is;\n}\n \ntemplate< typename T >\nostream &operator << (ostream &os, const vector< T > &v){\n    for (int i = 0; i < (int)v.size(); ++i) {\n        os << v[i] << (i + 1 != v.size() ? \" \" : \"\");\n    }\n    return os;\n}\n \ntemplate< typename T >\nistream &operator >>  (istream &is, vector< T > &v){\n    for(T &in : v) is >> in;\n    return is;\n}\n\ntemplate< typename T >\nostream &operator << (ostream &os, const set< T > &st){\n    int ct = 0;\n    for(auto& s : st) cout << s << (++ct != st.size() ? \" \" : \"\");\n    return os;\n}\n\ntemplate <typename T>\nconstexpr set<T> &operator|= (set<T> &st1, const set<T> &st2) { \n    for(auto& s : st2) st1.insert(s);\n    return st1; \n}\n\ntemplate <typename T>\nconstexpr set<T> &operator-= (set<T> &st1, const set<T> &st2) {\n    for(auto& s : st2) if(st1.count(s)) st1.erase(s);\n    return st1;\n}\n\ntemplate <typename T>\nconstexpr set<T> &operator&= (set<T> &st1, const set<T> &st2) {\n    auto itr = st1.begin();\n    while(itr != st1.end()){\n        if(!st2.count(*itr)) itr = st1.erase(itr);\n        else ++itr;\n    }\n    return st1;\n}\n\ntemplate <typename T>\nconstexpr set<T> operator| (const set<T> &st1, const set<T> &st2) {\n    set<T> res = st1;\n    res |= st2;\n    return res;\n}\n\ntemplate <typename T>\nconstexpr set<T> operator- (const set<T> &st1, const set<T> &st2) {\n    set<T> res = st1;\n    res -= st2;\n    return res;\n}\n\ntemplate <typename T>\nconstexpr set<T> operator& (const set<T> &st1, const set<T> &st2) {\n    set<T> res = st1;\n    res &= st2;\n    return res;\n}\n\n/*---------------------------------    Tools    ------------------------------------------*/\ntemplate< typename T >\nvector<T> cumsum(const vector<T> &X){\n    vector<T> res(X.size() + 1, 0);\n    for(int i = 0; i < X.size(); ++i) res[i + 1] += res[i] + X[i];\n    return res;\n}\n \ntemplate< typename S, typename T, typename F>\npair<T, T> bisearch(S left, T right, F f) {\n    while(abs(right - left) > 1){\n        T mid = (right + left) / 2;\n        if(f(mid)) right = mid;\n        else left = mid;\n    }\n    return {left, right};\n}\n \ntemplate< typename S, typename T, typename F>\ndouble trisearch(S left, T right, F f, int maxLoop = 90){\n    double low = left, high = right;\n    while(maxLoop--){\n        double mid_left = high / 3 + low * 2 / 3;\n        double mid_right = high * 2 / 3 + low / 3;\n        if(f(mid_left) >= f(mid_right)) low = mid_left;\n        else high = mid_right;\n    }\n    return (low + high) * 0.5;\n}\n\ntemplate< typename F >\nll ternarySearch(ll L, ll R, F f) { //[L, R)\n    ll lo = L - 1, hi = R - 1;\n    while (lo + 1 != hi) {\n        ll mi = (lo + hi) / 2;\n        if (f(mi) <= f(mi + 1)) hi = mi;\n        else lo = mi;\n    }\n    return hi;\n}\n\n/*---------------------------------   Geometry   -----------------------------------------*/\nusing ld = long double;\nusing Point = complex<ld>;\nconst ld EPS = 1e-10;\n\nld cross(const Point &a, const Point &b) { return a.real() * b.imag() - a.imag() * b.real(); }\nld dot(const Point &a, const Point &b) { return a.real() * b.real() + a.imag() * b.imag(); }\n\n\nstruct Line : vector<Point> {\n    Line(Point a = Point(0.0, 0.0), Point b = Point(0.0, 0.0)){\n        this->push_back(a);\n        this->push_back(b);\n    }\n    friend ostream &operator<<(ostream &s, const Line &l) { return s << '{' << l[0] << ',' << l[1] << '}'; }\n};\n\n/* ∠ABC */\ndouble degree(Point A, Point B, Point C){\n    if(B == C) return 0;\n    return arg((A - B) / (C - B));\n}\n\n/* counter-clockwise */\n/*\n                    CCW\n\n -- BEHIND -- [a -- ON -- b] --- FRONT --\n\n                    CW\n */\n/*  AB, ACの関係性を調べる*/\n/* 同一直線上 : positive, 非同一直線上 : negative*/\n/* 同一直線上だが、CはAB上に無い : 3 */\n/* 同一直線上でCはAB上の点 : 2 */\n/* 同一直線上で逆向きにCが存在 : 1 */\n/* AB -> ACが反時計周り : -1 */\n/* AB -> ACが時計周り : -2 */\n//VERIFIED : http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_C\nenum CCW_RESULT { CCW = +1, CW = -1, BACK = +2, FRONT = -2, ON = 0 };\nint ccw(Point A, Point B, Point C){\n    B -= A, C -= A;\n    if(cross(B, C) > EPS) return CCW;\n    if(cross(B, C) < -EPS) return CW;\n    if(dot(B, C) < 0) return BACK;\n    if(norm(B) < norm(C)) return FRONT;\n    return ON;\n}\n \n/* perpendicular bisector */\nLine bisector(const Line& L){\n    Point X = L[0], Y = L[1];\n    Point C = (X + Y) / ld(2.0);\n    Point D = C + (X - Y) * Point(0.0, 1.0);\n    return Line(C, D);\n}\n\n/* 二直線間の角度, 平行, 垂直 */\n//VERIFIED : http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_A\ndouble lineAngle(const Line& L1, const Line& L2){\n    return degree(Point(L1[1] - L1[0] ), Point(0.0, 0.0), Point(L2[1] - L2[0]));\n}\n\nbool isParallel(const Line& L1, const Line& L2){\n    return abs(sin(lineAngle(L1, L2))) <= EPS;\n}\n\nbool isOrthogonal(const Line& L1, const Line& L2){\n    return abs(cos(lineAngle(L1, L2))) <= EPS;\n}\n\n/* cross point */\n/* 二直線の交点 */\n// VERIFIED : http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_C\nPoint crosspoint(const Line& L1, const Line& L2){\n    if(isParallel(L1, L2)) return Point(-INF, -INF);\n    Point A = L1[0], B = L1[1];\n    Point C = L2[0], D = L2[1];\n    return A + (B - A) * (imag((A - C) * conj(C - D)) / imag((C - D) * conj(B - A)));\n}\n\n/* Line Segment Crossed? */\n/* 線分の交差判定 */\n// VERIFIED : http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_B\nbool isSegmentCrossed(const Line& L1, const Line& L2){\n    Point A = L1[0], B = L1[1];\n    Point C = L2[0], D = L2[1];\n\n    if(isParallel(L1, L2)){\n        if(ccw(A, B, C) == 2 or ccw(A, B, D) == 2 or ccw(C, D, A) == 2 or ccw(C, D , B) == 2) return true;\n        return false;\n    }\n\n\n    double t = imag((A - C) * conj(C - D)) / imag((C - D) * conj(B  - A));\n    double s = imag((C - A) * conj(A - B)) / imag((A - B) * conj(D - C));\n    return t + EPS >= 0 and t - EPS <= 1 and s + EPS >= 0 and s - EPS <= 1;\n}\n\n/* foot of a perpendicular line　*/\n/* 垂線の足 */\n//TODO : バグってる\nPoint foot(const Point &A, const Line &L){\n    return (A + L[0] + L[1] - (A * L[0] * conj(L[1]))) / ld(2.0);\n};\n\n// //凸包\nvector<Point> ConvexHull(vector<Point> X){\n    sort(ALL(X), [](Point A, Point B){ return A.real() != B.real() ? A.real() < B.real() : A.imag() < B.imag(); });\n    int k = 0;\n    int n = X.size();\n    vector<Point> res(2 * n);\n    for(int i = 0; i < n; ++i){\n        while(k > 1 and ccw(res[k - 2], res[k - 1], X[i]) == CW) --k;\n        res[k++] = X[i];\n    }\n    for(int i = n - 2, t = k; i >= 0; --i){\n        while(k > t and ccw(res[k - 2], res[k - 1], X[i]) == CW) --k;\n        res[k++] = X[i];\n    }\n    res.resize(k - 1);\n    return res;\n}\n\n/*------------------------------- Main Code Here -----------------------------------------*/\n \nint main()\n{\n    ll x0, y0, x1, y1;\n    cin >> x0 >> y0 >> x1 >> y1;\n    Point P0(x0, y0), P1(x1, y1);\n    ll Q;\n    cin >> Q;\n    while(Q--){\n        ll x, y;\n        cin >> x >> y;\n        Point PP(x, y);\n        ll res = ccw(P0, P1, PP);\n        if(res == CCW) print(\"COUNTER_CLOCKWISE\");\n        if(res == CW) print(\"CLOCKWISE\");\n        if(res == FRONT) print(\"ONLINE_FRONT\");\n        if(res == BACK) print(\"ONLINE_BACK\");\n        if(res == ON) print(\"ON_SEGMENT\");\n    }\n\n    return 0;\n}      \n"
  },
  {
    "language": "C++",
    "code": "// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_C\n// Points/Vectors - Counter-Clockwise\n// status:\n\n#define SUBMIT\n\n#include <utility>\n#include <algorithm>\n#include <iostream>\n#include <iomanip>\n#include <vector>\n#include <sstream>\n#include <cmath>\n\nusing namespace std;\nusing ui64 = unsigned long long;\nusing i64 = long long;\n\nconst double eps = 1e-8;\n\nbool almost_equals(double a, double b) { return std::abs(a - b) < eps; }\n\nclass point2d {\npublic:\n    // constructors\n    point2d() : point2d(0.0, 0.0) {}\n    point2d(double x, double y) : x_(x), y_(y) {}\n\n    // member functions\n    // operator functions\n    point2d operator+(const point2d& rhs) const { return {x_ + rhs.x_, y_ + rhs.y_}; }\n    point2d operator-(const point2d& rhs) const { return {x_ - rhs.x_, y_ - rhs.y_}; }\n    point2d operator*(double rhs) const { return {x_ * rhs, y_ * rhs}; }\n    point2d operator/(double rhs) const { return {x_ / rhs, y_ / rhs}; }\n    bool operator==(const point2d& rhs) const { return almost_equals(x_, rhs.x_) && almost_equals(y_, rhs.y_); }\n\n    // utility functions\n    double l2_norm() const { std::sqrt(squared_l2_norm()); }\n    double squared_l2_norm() const { return x_ * x_ + y_ * y_; }\n    // getter\n    double x() const noexcept { return x_; }\n    double y() const noexcept { return y_; }\n\n    // non-member functions\n    friend double dot(const point2d& lhs, const point2d& rhs);\n    friend double cross(const point2d& lhs, const point2d& rhs);\n\nprivate:\n    double x_;\n    double y_;\n};\n\ndouble dot(const point2d& lhs, const point2d& rhs) { return lhs.x_ * rhs.x_ + lhs.y_ * rhs.y_; }\ndouble cross(const point2d& lhs, const point2d& rhs) { return lhs.x_ * rhs.y_ - lhs.y_ * rhs.x_; }\nbool is_orthogonal(const point2d& lhs, const point2d& rhs) { return almost_equals(dot(lhs, rhs), 0.0); }\nbool is_parallel(const point2d& lhs, const point2d& rhs) { return almost_equals(cross(lhs, rhs), 0.0); }\ndouble compute_distance(const point2d& p1, const point2d& p2) { return (p2 - p1).l2_norm(); }\n\nclass segment {\npublic:\n    segment() : segment(point2d(), point2d()) {}\n    segment(const point2d& p1, const point2d& p2) : p1_(p1), p2_(p2) {}\n    const point2d& p1() const noexcept { return p1_; }\n    const point2d& p2() const noexcept { return p2_; }\nprivate:\n    point2d p1_, p2_;\n};\n\nclass line {\npublic:\n    line() : line(point2d(), point2d()) {}\n    line(const point2d& p1, const point2d& p2) : p1_(p1), p2_(p2) {}\n    const point2d& p1() const noexcept { return p1_; }\n    const point2d& p2() const noexcept { return p2_; }\nprivate:\n    point2d p1_, p2_;\n};\n\ndouble compute_distance(const line& l, const point2d& p) {\n    auto a = l.p2() - l.p1();\n    auto b = p - l.p1();\n    return abs(cross(a, b)) / a.l2_norm();\n}\n\ndouble compute_distance(const segment& s, const point2d& p) {\n    auto a = s.p2() - s.p1();\n    if (dot(a, p - s.p1()) < 0.0) return (p - s.p1()).l2_norm();\n    if (dot(a, p - s.p2()) < 0.0) return (p - s.p2()).l2_norm();\n    return compute_distance(line(s.p1(), s.p2()), p);\n}\n\npoint2d project(const segment& s, const point2d& p) {\n    auto base = s.p2() - s.p1();\n    auto r = dot(p - s.p1(), base) / base.squared_l2_norm();\n    return s.p1() + base * r;\n}\n\npoint2d reflect(const segment& s, const point2d& p) {\n    return p + (project(s, p) - p) * 2.0;\n}\n\nenum class clockwise_type {\n    clockwise,\n    counter_clockwise,\n    online_back,\n    online_front,\n    on_segment\n};\n\nclockwise_type judge_clockwise_type(const point2d& p0, const point2d& p1, const point2d& p2) {\n    auto a = p1 - p0;\n    auto b = p2 - p0;\n\n    if (cross(a, b) > eps) return clockwise_type::counter_clockwise;\n    if (cross(a, b) < -eps) return clockwise_type::clockwise;\n    if (dot(a, b) < -eps) return clockwise_type::online_back;\n    if (a.squared_l2_norm() < b.squared_l2_norm()) return clockwise_type::online_front;\n\n    return clockwise_type::on_segment;\n}\n\nint main() {\n#ifdef SUBMIT\n    auto& stream = cin;\n#else\n    string program_input_str = R\"(0 0 2 0\n3\n-1 0\n0 0\n3 0\n)\";\n    stringstream stream(program_input_str);\n#endif\n    double x0, y0, x1, y1, x2, y2;\n    stream >> x0 >> y0 >> x1 >> y1;\n    point2d p0(x0, y0), p1(x1, y1);\n    int q;\n    stream >> q;\n    for (int i = 0; i < q; ++i) {\n        stream >> x2 >> y2;\n        point2d p2(x2, y2);\n\n        auto t = judge_clockwise_type(p0, p1, p2);\n        switch (t) {\n            case clockwise_type::clockwise:\n                cout << \"CLOCKWISE\" << endl;\n                break;\n\n            case clockwise_type::counter_clockwise:\n                cout << \"COUNTER_CLOCKWISE\" << endl;\n                break;\n\n            case clockwise_type::online_back:\n                cout << \"ONLINE_BACK\" << endl;\n                break;\n\n            case clockwise_type::online_front:\n                cout << \"ONLINE_FRONT\" << endl;\n                break;\n\n            case clockwise_type::on_segment:\n                cout << \"ON_SEGMENT\" << endl;\n                break;\n        }\n    }\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "\n#include <set>\n#include <map>\n#include <list>\n#include <queue>\n#include <stack>\n#include <cmath>\n#include <ctype.h>\n#include <ctime>\n#include <cstdio>\n#include <vector>\n#include <string>\n#include <bitset>\n#include <cctype>\n#include <cstdlib>\n#include <cstring>\n#include <utility>\n#include <numeric>\n#include <complex>\n#include <sstream>\n#include <fstream>\n#include <iomanip>\n#include <cassert>\n#include <iostream>\n#include <iterator>\n#include <algorithm>\n\nusing namespace std;\n#define EPS 1e-10\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n//???\nclass Point{\n\tpublic:\t\n\t\tdouble x,y;\n\t\tPoint(double x = 0,double y = 0):x(x),y(y){}\n\t\t//?????????\n\t\tPoint operator + (Point p) { return Point(x + p.x,y + p.y);}\n\t\tPoint operator - (Point p) { return Point(x - p.x,y - p.y);}\n\t\tPoint operator * (double a) { return Point(x*a,y*a);}\n\t\tPoint operator / (double a) { return Point(x/a,y/a);}\n\t\t//???????????¨??§??????\n\t\tdouble abs() {return sqrt(norm());}\n\t\tdouble norm() {return x*x+y*y;}\n\n\t\tbool operator < (const Point &p) const{\n\t\t\treturn x != p.x ? x < p.x : y < p.y;\n\t\t}\n\n\t\tbool operator > (const Point &p) const{\n\t\t\treturn x != p.x ? x > p.x : y > p.y;\n\t\t}\n\n\t\tbool operator == (const Point &p) const{\n\t\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t\t}\n};\n//??????\nstruct Segment{Point p1,p2;};\n//????????????\ntypedef Point Vector;\n//??´???\ntypedef Segment Line;\n//???\nclass Circle{\n\tpublic:\n\t\tPoint c;\n\t\tdouble r;\n\t\tCircle(Point c = Point(),double r = 0.0): c(c),r(r){}\n};\n//????§???¢\n//typedef Vector<Point> Polygon;\n//????????¨??????\ndouble dot(Vector a,Vector b){\n\treturn a.x*b.x + a.y*b.y;\n}\ndouble cross(Vector a,Vector b){\n\treturn a.x*b.y - a.y*b.x;\n}\n\nPoint projection(Segment a,Vector hypo){\n\tVector base = a.p2 - a.p1;\n\tdouble r = dot(hypo,base)/base.norm();\n\treturn  a.p1 + base*r;\n}\n\nstring check(Point p0,Point p1,Point p2){\n\tVector v1 = p1 - p0;\n\tVector v2 = p2 - p0;\n\tif(cross(v1,v2) > EPS){\n\t\treturn \"COUNTER_CLOCKWISE\";\n\t}\n\tif(cross(v1,v2) < -EPS){\n\t\treturn \"CLOCKWISE\";\n\t}\n\tif(dot(v1,v2) < -EPS){\n\t\treturn \"ONLINE_BACK\";\n\t}\n\tif(v1.norm() < v2.norm()){\n\t\treturn \"ONLINE_FRONT\";\n\t}\n\n\treturn \"ON_SEGMENT\";\n}\n\nint main(){\n\tint x0,y0,x1,y1;\n\tint n;\n\tint x2,y2;\n\tcin >> x0 >> y0 >> x1 >> y1;\n\tcin >> n;\n\tPoint s(x0,y0);\n\tPoint t(x1,y1);\n\tSegment seg;seg.p1 = s;seg.p2 = t;\n\tVector base(t.x-s.x,t.y-s.y);\n\tfor(int i = 0;i < n;i++){\n\t\tcin >> x2 >> y2;\n\t\tPoint a(x2,y2);\n\t\tcout << check(s,t,a) << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <algorithm>\n#include <iomanip>\n#define ESP (1e-10)\nusing namespace std;\n\ntypedef struct Point {\n\tdouble x; \n\tdouble y;\n\n\tPoint() { }\n\n\tPoint(double x, double y) :x(x), y(y) { }\n\n\tPoint operator+(Point& p) {\n\t\treturn Point(x + p.x, y + p.y);\n\t}\n\n\tPoint operator-(Point& p) {\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n};\n\ntypedef Point Vector;\n\n struct Line {\n\tPoint p1, p2;\n\tLine() {}\n\tLine(const Point& a,const Point& b) : p1(a),p2(b) { }\n};\n\n typedef Line Segment;\n\ndouble abs(Point p1, Point p2) {\n\tdouble norm = (p1.x - p2.x)*(p1.x - p2.x) + (p1.y - p2.y)*(p1.y - p2.y);\n\treturn sqrt(norm);\n}\n\ndouble product(Vector v1, Vector v2) {\n\treturn v1.x*v2.x + v1.y*v2.y;\n}\n\ndouble cross(Vector p1, Vector p2) {\n\treturn p1.x*p2.y - p1.y*p2.x;\n}\n\nint ccw(Point p0, Point p1, Point p2) {\n\tVector v0 = p1 - p0;\n\tVector v1 = p2 - p0;\n\tif (cross(v0, v1) > ESP) return 1;   //p0,p1,p2??????????¨???????\n\tif (cross(v0, v1) < -ESP) return -1;   //p0,p1,p2???????¨???????\n\tif (product(v0, v1) < -ESP) return 2;  //p2,p0,p1????????§????????´??????\n\tif (abs(p0, p1) < abs(p0, p2)) return -2;  //p0,p1,p2????????§????????´??????\n\treturn 0;   //p2?????????(p0,p1)???\n}\n\nbool intersect(Point p0, Point p1, Point p2, Point p3) {\n\treturn (ccw(p0, p1, p2)*ccw(p0, p1, p3) <= 0&&ccw(p2,p3,p0)*ccw(p2,p3,p1)<=0);\n\t//?????????????????????????????¶\n}\n\nbool intersect(Segment s1, Segment s2) {\n\treturn intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\ndouble DistanceLP(Line l, Point p) {\n\treturn abs(cross(l.p2 - l.p1, p - l.p1)/abs(l.p1,l.p2));\n}\n\ndouble DistanceSP(Segment s, Point p) {\n\tif (product(s.p2 - s.p1, p - s.p1) < 0.0) return abs(p, s.p1);\n\tif (product(s.p1 - s.p2, p - s.p2) < 0.0) return abs(p, s.p2);\n\treturn DistanceLP(s, p);\n}\n\ndouble DistanceSS(Segment s1, Segment s2) {\n\tif (intersect(s1, s2)) return 0.0;\n\treturn min(min(DistanceSP(s1, s2.p1), DistanceSP(s1,s2.p2)), min(DistanceSP(s2, s1.p1), DistanceSP(s2, s1.p2)));\n}\n\nint main() {\n\tPoint p0, p1,p2;\n\tcin >> p0.x; cin >> p0.y;\n\tcin >> p1.x; cin >> p1.y;\n\tint q; \n\tcin >> q;\n\tfor (int i = 0;i < q;i++) {\n\t\tcin >> p2.x; cin >> p2.y;\n\t\tint c = ccw(p0, p1, p2);\n\t\tif (c == -1) cout << \"COUNTER_CLOCKWISE\" << endl;\n\t\tif (c == 1) cout << \"CLOCKWISE\" << endl;\n\t\tif (c == 2) cout << \"ONLINE_BACK\" << endl;\n\t\tif (c == -2) cout << \"ONLINE_FRONT\" << endl;\n\t\tif (c == 0) cout << \"ON_SEGMENT\" << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\n\n//constant----------------------------------------\nconst double EPS=1e-8;\nconst double INF=1e9;\nconst int COUNTER_CLOCKWISE=1;\nconst int CLOCKWISE=-1;\nconst int ONLINE_FRONT=2;\nconst int ONLINE_BACK=-2;\nconst int ON_SEGMENT=0;\n\n\ntypedef complex<double>Point;\ntypedef vector<Point>Polygon;\nstruct Line{\n    Point p1,p2;\n    Line(const Point &p1=Point(),const Point &p2=Point()):p1(p1),p2(p2){}\n};\nstruct Segment{\n    Point p1,p2;\n    Segment(const Point &p1=Point(),const Point &p2=Point()):p1(p1),p2(p2){}\n};\nstruct Circle{\n    Point p;\n    int r;\n    Circle(const Point &p=Point(),int r=0.0):p(p),r(r){}\n};\n\ndouble Dot(Point &p1,Point &p2){\n    return (conj(p1)*p2).real();\n    return real(p1)*real(p2)+imag(p1)+imag(p2);\n}\n\ndouble Cross(Point &p1,Point &p2){\n    return (conj(p1)*p2).imag();\n    return real(p1)*imag(p2)-real(p2)*imag(p1);\n}\n\nint CCW(Point &p1,Point &p2,Point &p3){\n    Point a=p2-p1,b=p3-p1;\n    if(Cross(a,b)>EPS)return COUNTER_CLOCKWISE;\n    if(Cross(a,b)<-EPS)return CLOCKWISE;\n    if(Dot(a,b)<-EPS)return ONLINE_BACK;\n    if(norm(b)>norm(a))return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\nsigned main(){\n    double x,y;\n    scanf(\"%lf%lf\",&x,&y);\n    Point p1(x,y);\n    scanf(\"%lf%lf\",&x,&y);\n    Point p2(x,y);\n\n    int q;scanf(\"%d\",&q);\n    while(q--){\n        scanf(\"%lf%lf\",&x,&y);\n        Point p3(x,y);\n        if(CCW(p1,p2,p3)==COUNTER_CLOCKWISE)puts(\"COUNTER_CLOCKWISE\");\n        if(CCW(p1,p2,p3)==CLOCKWISE)puts(\"CLOCKWISE\");\n        if(CCW(p1,p2,p3)==ONLINE_BACK)puts(\"ONLINE_BACK\");\n        if(CCW(p1,p2,p3)==ONLINE_FRONT)puts(\"ONLINE_FRONT\");\n        if(CCW(p1,p2,p3)==ON_SEGMENT)puts(\"ON_SEGMENT\");\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\nusing namespace std;\n\nint main()\n{\n    double x0, y0, x1, y1, x2, y2;\n    int q;\n\n    cin >> x0 >> y0 >> x1 >> y1;\n    cin >> q;\n\n    for( int i = 0; i < q; i++ )\n    {\n        cin >> x2 >> y2;\n\n        double a, b, x, y;\n        a = x1 - x0;\n        b = y1 - y0;\n\n        //p0とp1が縦に並んだ場合\n        if( a == 0 )\n        {\n            if( y0 < y1 && x2 < x0 || y1 < y0 && x0 < x2 )\n                cout << \"COUNTER_CLOCKWISE\" << endl;\n            else if( y0 < y1 && x2 > x0 || y1 < y0 && x0 > x2 )\n                cout << \"CLOCKWISE\" << endl;\n            else\n            {\n                if( y2 < y0 && y0 < y1 || y1 < y0 && y0 < y2 )\n                    cout << \"ONLINE_BACK\" << endl;\n                else if( y0 < y1 && y1 < y2 || y2 < y1 && y1 < y0 )\n                    cout << \"ONLINE_FRONT\" << endl;\n                else\n                    cout << \"ON_SEGMENT\" << endl;\n            }\n        }\n        //p0とp1が横に並んだ場合\n        else if( b == 0 )\n        {\n            if( x0 < x1 && y0 < y2 || x1 < x0 && y2 < y1 )\n                cout << \"COUNTER_CLOCKWISE\" << endl;\n            else if( x0 < x1 && y0 > y2 || x1 < x0 && y2 > y1 )\n                cout << \"CLOCKWISE\" << endl;\n            else\n            {\n                if( x2 < x0 && x0 < x1 || x1 < x0 && x0 < x2 )\n                    cout << \"ONLINE_BACK\" << endl;\n                else if( x0 < x1 && x1 < x2 || x2 < x1 && x1 < x0 )\n                    cout << \"ONLINE_FRONT\" << endl;\n                else\n                    cout << \"ON_SEGMENT\" << endl;\n            }\n        }\n        else\n        {\n            x = ( y2 - y1 + b * x1 / a ) / ( b / a );\n            y = b * x2 / a + y1 - b * x1 / a;\n            if( x2 < x && y < y2 && x0 < x1 && y0 < y1 || x < x2 && y < y2 && x0 < x1 && y0 > y1 || x < x2 && y2 < y && x1 < x0 && y1 < y0 || x2 < x && y2 < y && x1 < x0 && y1 > y0 )\n                cout << \"COUNTER_CLOCKWISE\" << endl;\n            else if( x2 > x && y > y2 && x0 < x1 && y0 < y1 || x > x2 && y > y2 && x0 < x1 && y0 > y1 || x > x2 && y2 > y && x1 < x0 && y1 < y0 || x2 > x && y2 > y && x1 < x0 && y1 > y0 )\n                cout << \"CLOCKWISE\" << endl;\n            else\n            {\n                if( x0 < x1 && x2 < x0 || x1 < x0 && x0 < x2 )\n                    cout << \"ONLINE_BACK\" << endl;\n                else if( x0 < x1 && x1 < x2 || x2 < x1 && x1 < x0 )\n                    cout << \"ONLINE_FRONT\" << endl;\n                else\n                    cout << \"ON_SEGMENT\" << endl;\n            }\n        }\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\nusing namespace std;\n#include<cstdio>\n#include<complex>\n\ntypedef double type_n;\ntypedef complex<type_n> point;\n\nvoid ccw(const point &a, const point &c, const point &z)\n{\n    point w;\n    w = conj(c) * (z - a);\n    if(w.imag() > 0){ printf(\"COUNTER_CLOCKWISE\\n\"); return; }\n\tif(w.imag() < 0){ printf(\"CLOCKWISE\\n\"); return; }\n    if(w.real() < 0){ printf(\"ONLINE_BACK\\n\"); return; }\n    if(w.real() > norm(c)){ printf(\"ONLINE_FRONT\\n\"); return; }\n    printf(\"ON_SEGMENT\\n\");\n    return;\n}\n\nint main()\n{\n    point a, b, c, z;\n    int i, q;\n    type_n a1, a2, b1, b2, z1, z2;\n    scanf(\"%lf %lf %lf %lf\", &a1, &a2, &b1, &b2);\n    a.real(a1), a.imag(a2), b.real(b1), b.imag(b2);\n    c = b - a;\n\n    scanf(\"%d\", &q);\n    for(i = 0; i < q; i++){\n        scanf(\"%lf %lf\", &z1, &z2);\n        z.real(z1), z.imag(z2);\n        ccw(a, c, z);\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <complex>\n#include <cstdio>\nusing namespace std;\ntypedef complex<double> P;\n#define X real()\n#define Y imag()\n#define EPS (1e-10)\n\ndouble dot(P a, P b){\n  return a.X * b.X + a.Y * b.Y;\n}\ndouble cross(P a, P b){\n  return a.X * b.Y - a.Y * b.X;\n}\n  \nint ccw(P a, P b, P c) {\n  b -= a; c -= a;\n  if( cross(b,c) > EPS ) return +1;\n  if( cross(b,c) < -EPS ) return -1;\n  if( dot(b,c) < 0 ) return +2;\n  if( abs(b-a) + EPS < abs(c-a) ) return -2;\n  return 0;\n}\n\nint main(){\n  P p1, p2;\n  double x1, x2, y1, y2;\n  cin >> x1 >> y1 >> x2 >> y2;\n  p1 = P(x1,y1);\n  p2 = P(x2,y2);\n  int q;\n  cin >> q;\n  for(int i = 0; i < q; ++i){\n    P p;\n    cin >> x1 >> y1;\n    p = P(x1,y1);\n    int t = ccw(p1,p2,p);\n    if (t == 1) cout << \"COUNTER_CLOCKWISE\" << endl;\n    else if (t == -1) cout << \"CLOCKWISE\" << endl;\n    else if (t == 2) cout << \"ONLINE_BACK\" << endl;\n    else if (t == -2) cout << \"ONLINE_FRONT\" << endl;\n    else cout << \"ON_SEGMENT\" << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <cassert>\n#define FOR(i,a,b) for(int i=(a);i<(b);i++)\n#define REP(i,n) FOR(i,0,n)\n#define rep(i,n) FOR(i,0,n)\n#define DEBUG(x) cout<<#x<<\": \"<<x<<endl\n#define vint vector<int>\n#define vdouble vector<double>\n#define vstring vector<string>\nusing namespace std;\n\n#include<map>\n#include<set>\n#include<queue>\n\ntypedef long long ll;\ntypedef unsigned long long ull;\n\nconst int MAX_N = 1000000;\nconst int INFTY = (1 << 21); // 2097152\n// const ll INFTY = (1LL << 60);\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a)-(b)) < EPS)\n\nclass Point{\npublic:\n\tdouble x, y;\n\tPoint(double x=0, double y=0):x(x), y(y){}\n\n\tPoint operator + (Point p){ return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p){ return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a){ return Point(a * x, a * y); }\n\tPoint operator / (double a){ return Point(x / a, y / a); }\n\n\tdouble abs() { return sqrt(norm()); }\n\tdouble norm() { return x * x + y * y;}\n\tbool operator < (const Point &p) const {\n\t\t// first x, second y\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p) const{\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\n\ntypedef Point Vector;\n\nstruct Segment{\npublic:\n\tPoint p1, p2;\n\tSegment(Point p1, Point p2){\n\t\tthis->p1 = p1;\n\t\tthis->p2 = p2;\n\t}\n};\n\ndouble dot(Vector a, Vector b){\n\t//|a||b|cos(theta)\n\treturn a.x * b.x + a.y * b.y;\n}\ndouble cross(Vector a, Vector b){\n\t//|a||b|cos(theta)\n\treturn a.x * b.y - a.y * b.x;\n}\n\n// Orthogonal\nbool isOrthogonal(Vector a, Vector b){\n\treturn equals(dot(a, b), 0.0);\n}\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2){\n\treturn isOrthogonal(a1 - a2, b1- b2);\n}\n\n// Orthogonal\nbool isParallel(Vector a, Vector b){\n\treturn equals(cross(a, b), 0.0);\n}\nbool isParallel(Point a1, Point a2, Point b1, Point b2){\n\treturn isParallel(a1 - a2, b1- b2);\n}\n\n// ???p????????????s???????????????????????????\nPoint project(Segment s, Point p){\n\t// ??\\??????????????????\n\t// hypo -> p - p1, base -> p2 - p1\n\t// t = |hypo|cos??\n\t// cos?? = dot(hypo,base)/|hypo||base|\n\t// project = s.p1 + base/|base| * t\n\tVector hypo = p - s.p1;\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(hypo, base) / base.norm();\n\treturn s.p1 + base * r;\n}\n\n// ???p????????????s???????§°?????¨?????????\nPoint reflection(Segment s, Point p){\n\tPoint pr = project(s, p);\n\treturn p + (pr - p) * 2.0;\n}\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\n// p0??????p1????????????????????????????????????p2?????????\nint ccw(Point p0, Point p1, Point p2){\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif( cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif( cross(a, b) < -EPS) return CLOCKWISE;\n\tif (dot(a,b) <-EPS) return ONLINE_BACK;\n\tif (a.norm() < b.norm()) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\n// ???????????¢\ndouble distance(Point a, Point b){\n\treturn (a - b).abs();\n}\n\n// ?????¨??´???????????¢\ndouble distanceLinePoint(Segment s, Point p){\n\t// sin?? = |cross(hypo, base)|/|hypo||base|\n\t// distance = |hypo|sin?? = |cross(hypo, base)|/|base|\n\tVector hypo = p - s.p1;\n\tVector base = s.p2 - s.p1;\n\treturn abs(cross(hypo, base)) / base.abs();\n}\n\n// ?????¨??????????????¢\ndouble distanceSegmentPoint(Segment s, Point p){\n\t// (p2-p1)??¨???p-p1??????90???????????§????????´??????p??¨p1????????¢\n\t// (p1-p2)??¨???p-p2??????90???????????§????????´??????p??¨p2????????¢\n\t// ????????\\????????´???????????¨??´???????????¢\n\tif(dot(s.p2-s.p1, p-s.p1) < 0.0) return (p - s.p1).abs();\n\tif(dot(s.p1-s.p2, p-s.p2) < 0.0) return (p - s.p2).abs();\n\treturn distanceLinePoint(s, p);\n}\n\n// ????????¨??????????????¢\n// TODO\n\nint Q;\n\nint main() {\n\tPoint p0, p1;\n\tcin >> p0.x >> p0.y >> p1.x >> p1.y;\n\n\tcin >> Q;\n\trep(i, Q){\n\n\t\tPoint p2;\n\t\tcin >> p2.x >> p2.y;\n\t\tint c = ccw(p0, p1, p2);\n\t\tif(c == COUNTER_CLOCKWISE) cout << \"COUNTER_CLOCKWISE\" << endl;\n\t\tif(c == CLOCKWISE) cout << \"CLOCKWISE\" << endl;\n\t\tif(c == ONLINE_BACK) cout << \"ONLINE_BACK\" << endl;\n\t\tif(c == ONLINE_FRONT) cout << \"ONLINE_FRONT\" << endl;\n\t\tif(c == ON_SEGMENT) cout << \"ON_SEGMENT\" << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <iostream>\n\nusing namespace std;\n\n#define EPS 1e-14\n\n#define PI 3.1415926535897932385\n\ndouble dist(int x, int y)\n{\n\treturn sqrt(x * x + y * y);\n}\n\ndouble angle(int x, int y)\n{\n\treturn atan2((double)(y), (double)(x));\n}\n\nint main()\n{\n\tint x0, y0, x1, y1, x2, y2, q;\n\n\tcin >> x0 >> y0 >> x1 >> y1 >> q;\n\n\tfor (int i = 0; i < q; i++)\n\t{\n\t\tcin >> x2 >> y2;\n\n\t\tint ax = x1 - x0;\n\t\tint ay = y1 - y0;\n\t\tint bx = x2 - x0;\n\t\tint by = y2 - y0;\n\n\t\tdouble ad = dist(ax, ay);\n\t\tdouble bd = dist(bx, by);\n\n\t\tdouble at = angle(ax, ay);\n\t\tdouble bt = angle(bx, by);\n\n\t\tdouble st = bt - at;\n\n\t\tif (st < -PI - EPS)\n\t\t{\n\t\t\tst += 2 * PI;\n\t\t}\n\n\t\tif (st > PI + EPS)\n\t\t{\n\t\t\tst -= 2 * PI;\n\t\t}\n\n\t\tdouble da, db;\n\n\t\tif (bx != 0 || by != 0)\n\t\t{\n\t\t\tif (ax == 0 || bx == 0)\n\t\t\t{\n\t\t\t\tda = ax / ay;\n\t\t\t\tdb = bx / by;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tda = ay / ax;\n\t\t\t\tdb = by / bx;\n\t\t\t}\n\t\t}\n\n\t\tif (bx == 0 && by == 0)\n\t\t{\n\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t}\n\t\telse if (-EPS < db - da && db - da < EPS)\n\t\t{\n\t\t\tif (ax * bx < 0 || ay * by < 0)\n\t\t\t{\n\t\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (ad < bd)\n\t\t\t\t{\n\t\t\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (st > EPS)\n\t\t{\n\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\t}\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#line 1 \"test/aoj/CGL_1_C.test.cpp\"\n#define PROBLEM \"http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_C\"\n#line 1 \"test/aoj/../../geometry/template.hpp\"\n#include <cmath>\n#include <algorithm>\n#include <complex>\n#include <functional>\n#include <iomanip>\n#include <iostream>\n#include <vector>\nusing namespace std;\n\nusing Real = double;\nusing Point = complex< Real >;\nconst Real EPS = 1e-10, PI = acos(-1);\n#define X real()\n#define Y imag()\n\ninline bool eq(Real a, Real b) { return fabs(b - a) < EPS; }\n\nPoint operator*(const Point &p, const Real &d) {\n  return Point(real(p) * d, imag(p) * d);\n}\n\nistream &operator>>(istream &is, Point &p) {\n  Real a, b;\n  is >> a >> b;\n  p = Point(a, b);\n  return is;\n}\n\nostream &operator<<(ostream &os, Point &p) {\n  return os << fixed << setprecision(10) << p.X << \" \" << p.Y;\n}\n\n// rotate point p counterclockwise by theta rad\nPoint rotate(Real theta, const Point &p) {\n  return Point(cos(theta) * p.X - sin(theta) * p.Y, sin(theta) * p.X + cos(theta) * p.Y);\n}\n\nReal radian_to_degree(Real r) {\n  return (r * 180.0 / PI);\n}\n\nReal degree_to_radian(Real d) {\n  return (d * PI / 180.0);\n}\n\n// smaller angle of the a-b-c\nReal get_angle(const Point &a, const Point &b, const Point &c) {\n  const Point v(b - a), w(c - b);\n  Real alpha = atan2(v.Y, v.X), beta = atan2(w.Y, w.X);\n  if(alpha > beta) swap(alpha, beta);\n  Real theta = (beta - alpha);\n  return min(theta, 2 * acos(-1) - theta);\n}\n\nnamespace std {\n  bool operator<(const Point &a, const Point &b) {\n    return a.X != b.X ? a.X < b.X : a.Y < b.Y;\n  }\n}\n\n\nstruct Line {\n  Point a, b;\n\n  Line() = default;\n\n  Line(Point a, Point b) : a(a), b(b) {}\n\n  Line(Real A, Real B, Real C) // Ax + By = C\n  {\n    if(eq(A, 0)) a = Point(0, C / B), b = Point(1, C / B);\n    else if(eq(B, 0)) b = Point(C / A, 0), b = Point(C / A, 1);\n    else a = Point(0, C / B), b = Point(C / A, 0);\n  }\n\n  friend ostream &operator<<(ostream &os, Line &p) {\n    return os << p.a << \" to \" << p.b;\n  }\n\n  friend istream &operator>>(istream &is, Line &a) {\n    return is >> a.a >> a.b;\n  }\n};\n\nstruct Segment : Line {\n  Segment() = default;\n\n  Segment(Point a, Point b) : Line(a, b) {}\n};\n\nstruct Circle {\n  Point p;\n  Real r;\n\n  Circle() = default;\n\n  Circle(Point p, Real r) : p(p), r(r) {}\n};\n\nusing Points = vector< Point >;\nusing Polygon = vector< Point >;\nusing Segments = vector< Segment >;\nusing Lines = vector< Line >;\nusing Circles = vector< Circle >;\n\nReal cross(const Point &a, const Point &b) {\n  return real(a) * imag(b) - imag(a) * real(b);\n}\n\nReal dot(const Point &a, const Point &b) {\n  return real(a) * real(b) + imag(a) * imag(b);\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_C\nint ccw(const Point &a, Point b, Point c) {\n  b = b - a, c = c - a;\n  if(cross(b, c) > EPS) return +1;  // \"COUNTER_CLOCKWISE\"\n  if(cross(b, c) < -EPS) return -1; // \"CLOCKWISE\"\n  if(dot(b, c) < 0) return +2;      // \"ONLINE_BACK\" c-a-b\n  if(norm(b) < norm(c)) return -2;  // \"ONLINE_FRONT\" a-b-c\n  return 0;                         // \"ON_SEGMENT\" a-c-b\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_A\nbool parallel(const Line &a, const Line &b) {\n  return eq(cross(a.b - a.a, b.b - b.a), 0.0);\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_A\nbool orthogonal(const Line &a, const Line &b) {\n  return eq(dot(a.a - a.b, b.a - b.b), 0.0);\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_A\nPoint projection(const Line &l, const Point &p) {\n  double t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n  return l.a + (l.a - l.b) * t;\n}\n\nPoint projection(const Segment &l, const Point &p) {\n  double t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n  return l.a + (l.a - l.b) * t;\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_B\nPoint reflection(const Line &l, const Point &p) {\n  return p + (projection(l, p) - p) * 2.0;\n}\n\nbool intersect(const Line &l, const Point &p) {\n  return abs(ccw(l.a, l.b, p)) != 1;\n}\n\nbool intersect(const Line &l, const Line &m) {\n  return abs(cross(l.b - l.a, m.b - m.a)) > EPS || abs(cross(l.b - l.a, m.b - l.a)) < EPS;\n}\n\nbool intersect(const Segment &s, const Point &p) {\n  return ccw(s.a, s.b, p) == 0;\n}\n\nbool intersect(const Line &l, const Segment &s) {\n  return cross(l.b - l.a, s.a - l.a) * cross(l.b - l.a, s.b - l.a) < EPS;\n}\n\nReal distance(const Line &l, const Point &p);\n\nbool intersect(const Circle &c, const Line &l) {\n  return distance(l, c.p) <= c.r + EPS;\n}\n\nbool intersect(const Circle &c, const Point &p) {\n  return abs(abs(p - c.p) - c.r) < EPS;\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_B\nbool intersect(const Segment &s, const Segment &t) {\n  return ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 && ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0;\n}\n\nint intersect(const Circle &c, const Segment &l) {\n  if(norm(projection(l, c.p) - c.p) - c.r * c.r > EPS) return 0;\n  auto d1 = abs(c.p - l.a), d2 = abs(c.p - l.b);\n  if(d1 < c.r + EPS && d2 < c.r + EPS) return 0;\n  if(d1 < c.r - EPS && d2 > c.r + EPS || d1 > c.r + EPS && d2 < c.r - EPS) return 1;\n  const Point h = projection(l, c.p);\n  if(dot(l.a - h, l.b - h) < 0) return 2;\n  return 0;\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_7_A&lang=jp\nint intersect(Circle c1, Circle c2) {\n  if(c1.r < c2.r) swap(c1, c2);\n  Real d = abs(c1.p - c2.p);\n  if(c1.r + c2.r < d) return 4;\n  if(eq(c1.r + c2.r, d)) return 3;\n  if(c1.r - c2.r < d) return 2;\n  if(eq(c1.r - c2.r, d)) return 1;\n  return 0;\n}\n\nReal distance(const Point &a, const Point &b) {\n  return abs(a - b);\n}\n\nReal distance(const Line &l, const Point &p) {\n  return abs(p - projection(l, p));\n}\n\nReal distance(const Line &l, const Line &m) {\n  return intersect(l, m) ? 0 : distance(l, m.a);\n}\n\nReal distance(const Segment &s, const Point &p) {\n  Point r = projection(s, p);\n  if(intersect(s, r)) return abs(r - p);\n  return min(abs(s.a - p), abs(s.b - p));\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_D\nReal distance(const Segment &a, const Segment &b) {\n  if(intersect(a, b)) return 0;\n  return min({distance(a, b.a), distance(a, b.b), distance(b, a.a), distance(b, a.b)});\n}\n\nReal distance(const Line &l, const Segment &s) {\n  if(intersect(l, s)) return 0;\n  return min(distance(l, s.a), distance(l, s.b));\n}\n\nPoint crosspoint(const Line &l, const Line &m) {\n  Real A = cross(l.b - l.a, m.b - m.a);\n  Real B = cross(l.b - l.a, l.b - m.a);\n  if(eq(abs(A), 0.0) && eq(abs(B), 0.0)) return m.a;\n  return m.a + (m.b - m.a) * B / A;\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_C\nPoint crosspoint(const Segment &l, const Segment &m) {\n  return crosspoint(Line(l), Line(m));\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_7_D\npair< Point, Point > crosspoint(const Circle &c, const Line l) {\n  Point pr = projection(l, c.p);\n  Point e = (l.b - l.a) / abs(l.b - l.a);\n  if(eq(distance(l, c.p), c.r)) return {pr, pr};\n  double base = sqrt(c.r * c.r - norm(pr - c.p));\n  return {pr - e * base, pr + e * base};\n}\n\npair< Point, Point > crosspoint(const Circle &c, const Segment &l) {\n  Line aa = Line(l.a, l.b);\n  if(intersect(c, l) == 2) return crosspoint(c, aa);\n  auto ret = crosspoint(c, aa);\n  if(dot(l.a - ret.first, l.b - ret.first) < 0) ret.second = ret.first;\n  else ret.first = ret.second;\n  return ret;\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_7_E\npair< Point, Point > crosspoint(const Circle &c1, const Circle &c2) {\n  Real d = abs(c1.p - c2.p);\n  Real a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n  Real t = atan2(c2.p.Y - c1.p.Y, c2.p.X - c1.p.X);\n  Point p1 = c1.p + Point(cos(t + a) * c1.r, sin(t + a) * c1.r);\n  Point p2 = c1.p + Point(cos(t - a) * c1.r, sin(t - a) * c1.r);\n  return {p1, p2};\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_7_F\n// tangent of circle c through point p\npair< Point, Point > tangent(const Circle &c1, const Point &p2) {\n  return crosspoint(c1, Circle(p2, sqrt(norm(c1.p - p2) - c1.r * c1.r)));\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_7_G\n// common tangent of circles c1 and c2\nLines tangent(Circle c1, Circle c2) {\n  Lines ret;\n  if(c1.r < c2.r) swap(c1, c2);\n  Real g = norm(c1.p - c2.p);\n  if(eq(g, 0)) return ret;\n  Point u = (c2.p - c1.p) / sqrt(g);\n  Point v = rotate(PI * 0.5, u);\n  for(int s : {-1, 1}) {\n    Real h = (c1.r + s * c2.r) / sqrt(g);\n    if(eq(1 - h * h, 0)) {\n      ret.emplace_back(c1.p + u * c1.r, c1.p + (u + v) * c1.r);\n    } else if(1 - h * h > 0) {\n      Point uu = u * h, vv = v * sqrt(1 - h * h);\n      ret.emplace_back(c1.p + (uu + vv) * c1.r, c2.p - (uu + vv) * c2.r * s);\n      ret.emplace_back(c1.p + (uu - vv) * c1.r, c2.p - (uu - vv) * c2.r * s);\n    }\n  }\n  return ret;\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_3_B\nbool is_convex(const Polygon &p) {\n  int n = (int) p.size();\n  for(int i = 0; i < n; i++) {\n    if(ccw(p[(i + n - 1) % n], p[i], p[(i + 1) % n]) == -1) return false;\n  }\n  return true;\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_4_A\nPolygon convex_hull(Polygon &p) {\n  int n = (int) p.size(), k = 0;\n  if(n <= 2) return p;\n  sort(p.begin(), p.end());\n  vector< Point > ch(2 * n);\n  for(int i = 0; i < n; ch[k++] = p[i++]) {\n    while(k >= 2 && cross(ch[k - 1] - ch[k - 2], p[i] - ch[k - 1]) < EPS) --k;\n  }\n  for(int i = n - 2, t = k + 1; i >= 0; ch[k++] = p[i--]) {\n    while(k >= t && cross(ch[k - 1] - ch[k - 2], p[i] - ch[k - 1]) < EPS) --k;\n  }\n  ch.resize(k - 1);\n  return ch;\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_3_C\nenum {\n  OUT, ON, IN\n};\n\nint contains(const Polygon &Q, const Point &p) {\n  bool in = false;\n  for(int i = 0; i < Q.size(); i++) {\n    Point a = Q[i] - p, b = Q[(i + 1) % Q.size()] - p;\n    if(a.Y > b.Y) swap(a, b);\n    if(a.Y <= 0 && 0 < b.Y && cross(a, b) < 0) in = !in;\n    if(cross(a, b) == 0 && dot(a, b) <= 0) return ON;\n  }\n  return in ? IN : OUT;\n}\n\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1033\n// deduplication of line segments\nvoid merge_segments(vector< Segment > &segs) {\n\n  auto merge_if_able = [](Segment &s1, const Segment &s2) {\n    if(abs(cross(s1.b - s1.a, s2.b - s2.a)) > EPS) return false;\n    if(ccw(s1.a, s2.a, s1.b) == 1 || ccw(s1.a, s2.a, s1.b) == -1) return false;\n    if(ccw(s1.a, s1.b, s2.a) == -2 || ccw(s2.a, s2.b, s1.a) == -2) return false;\n    s1 = Segment(min(s1.a, s2.a), max(s1.b, s2.b));\n    return true;\n  };\n\n  for(int i = 0; i < segs.size(); i++) {\n    if(segs[i].b < segs[i].a) swap(segs[i].a, segs[i].b);\n  }\n  for(int i = 0; i < segs.size(); i++) {\n    for(int j = i + 1; j < segs.size(); j++) {\n      if(merge_if_able(segs[i], segs[j])) {\n        segs[j--] = segs.back(), segs.pop_back();\n      }\n    }\n  }\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1033\n// construct a graph with the vertex of the intersection of any two line segments\nvector< vector< int > > segment_arrangement(vector< Segment > &segs, vector< Point > &ps) {\n  vector< vector< int > > g;\n  int N = (int) segs.size();\n  for(int i = 0; i < N; i++) {\n    ps.emplace_back(segs[i].a);\n    ps.emplace_back(segs[i].b);\n    for(int j = i + 1; j < N; j++) {\n      const Point p1 = segs[i].b - segs[i].a;\n      const Point p2 = segs[j].b - segs[j].a;\n      if(cross(p1, p2) == 0) continue;\n      if(intersect(segs[i], segs[j])) {\n        ps.emplace_back(crosspoint(segs[i], segs[j]));\n      }\n    }\n  }\n  sort(begin(ps), end(ps));\n  ps.erase(unique(begin(ps), end(ps)), end(ps));\n\n  int M = (int) ps.size();\n  g.resize(M);\n  for(int i = 0; i < N; i++) {\n    vector< int > vec;\n    for(int j = 0; j < M; j++) {\n      if(intersect(segs[i], ps[j])) {\n        vec.emplace_back(j);\n      }\n    }\n    for(int j = 1; j < vec.size(); j++) {\n      g[vec[j - 1]].push_back(vec[j]);\n      g[vec[j]].push_back(vec[j - 1]);\n    }\n  }\n  return (g);\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_4_C\n// cut with a straight line l and return a convex polygon on the left\nPolygon convex_cut(const Polygon &U, Line l) {\n  Polygon ret;\n  for(int i = 0; i < U.size(); i++) {\n    Point now = U[i], nxt = U[(i + 1) % U.size()];\n    if(ccw(l.a, l.b, now) != -1) ret.push_back(now);\n    if(ccw(l.a, l.b, now) * ccw(l.a, l.b, nxt) < 0) {\n      ret.push_back(crosspoint(Line(now, nxt), l));\n    }\n  }\n  return (ret);\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_3_A\nReal area(const Polygon &p) {\n  Real A = 0;\n  for(int i = 0; i < p.size(); ++i) {\n    A += cross(p[i], p[(i + 1) % p.size()]);\n  }\n  return A * 0.5;\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_7_H\nReal area(const Polygon &p, const Circle &c) {\n  if(p.size() < 3) return 0.0;\n  function< Real(Circle, Point, Point) > cross_area = [&](const Circle &c, const Point &a, const Point &b) {\n    Point va = c.p - a, vb = c.p - b;\n    Real f = cross(va, vb), ret = 0.0;\n    if(eq(f, 0.0)) return ret;\n    if(max(abs(va), abs(vb)) < c.r + EPS) return f;\n    if(distance(Segment(a, b), c.p) > c.r - EPS) return c.r * c.r * arg(vb * conj(va));\n    auto u = crosspoint(c, Segment(a, b));\n    vector< Point > tot{a, u.first, u.second, b};\n    for(int i = 0; i + 1 < tot.size(); i++) {\n      ret += cross_area(c, tot[i], tot[i + 1]);\n    }\n    return ret;\n  };\n  Real A = 0;\n  for(int i = 0; i < p.size(); i++) {\n    A += cross_area(c, p[i], p[(i + 1) % p.size()]);\n  }\n  return A;\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_4_B\nReal convex_diameter(const Polygon &p) {\n  int N = (int) p.size();\n  int is = 0, js = 0;\n  for(int i = 1; i < N; i++) {\n    if(p[i].Y > p[is].Y) is = i;\n    if(p[i].Y < p[js].Y) js = i;\n  }\n  Real maxdis = norm(p[is] - p[js]);\n\n  int maxi, maxj, i, j;\n  i = maxi = is;\n  j = maxj = js;\n  do {\n    if(cross(p[(i + 1) % N] - p[i], p[(j + 1) % N] - p[j]) >= 0) {\n      j = (j + 1) % N;\n    } else {\n      i = (i + 1) % N;\n    }\n    if(norm(p[i] - p[j]) > maxdis) {\n      maxdis = norm(p[i] - p[j]);\n      maxi = i;\n      maxj = j;\n    }\n  } while(i != is || j != js);\n  return sqrt(maxdis);\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_5_A\nReal closest_pair(Points ps) {\n  if(ps.size() <= 1) throw (0);\n  sort(begin(ps), end(ps));\n\n  auto compare_y = [&](const Point &a, const Point &b) {\n    return imag(a) < imag(b);\n  };\n  vector< Point > beet(ps.size());\n  const Real INF = 1e18;\n\n  function< Real(int, int) > rec = [&](int left, int right) {\n    if(right - left <= 1) return INF;\n    int mid = (left + right) >> 1;\n    auto x = real(ps[mid]);\n    auto ret = min(rec(left, mid), rec(mid, right));\n    inplace_merge(begin(ps) + left, begin(ps) + mid, begin(ps) + right, compare_y);\n    int ptr = 0;\n    for(int i = left; i < right; i++) {\n      if(abs(real(ps[i]) - x) >= ret) continue;\n      for(int j = 0; j < ptr; j++) {\n        auto luz = ps[i] - beet[ptr - j - 1];\n        if(imag(luz) >= ret) break;\n        ret = min(ret, abs(luz));\n      }\n      beet[ptr++] = ps[i];\n    }\n    return ret;\n  };\n  return rec(0, (int) ps.size());\n}\n#line 3 \"test/aoj/CGL_1_C.test.cpp\"\n\n#include <cassert>\n#include <iostream>\nusing namespace std;\nint main() {\n  Point p0, p1; cin >> p0 >> p1;\n  int q; cin >> q;\n  for (int i = 0; i < q; ++i) {\n    Point p2; cin >> p2;\n    int type = ccw(p0, p1, p2);\n    switch(type) {\n      case +1: cout << \"COUNTER_CLOCKWISE\"; break;\n      case -1: cout << \"CLOCKWISE\"; break;\n      case +2: cout << \"ONLINE_BACK\"; break;\n      case -2: cout << \"ONLINE_FRONT\"; break;\n      case 0: cout << \"ON_SEGMENT\"; break;\n      default: assert(false);\n    }\n    cout << endl;\n  }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cmath>\n#include <algorithm>\n#include <vector>\nnamespace Random_Number{\n\tunsigned int seed = 19260817;\n\tvoid srnd(unsigned int x){ seed = x; }\n\tunsigned int rnd(){\n\t\treturn seed ^= seed << 19, seed ^= seed >> 7, seed ^= seed << 1;\n\t}\n}\nusing namespace Random_Number;\nnamespace Geometry{\n\tconst int COUNTER_CLOCKWISE = 1, CLOCKWISE = 2, ONLINE_BACK = 3, ONLINE_FRONT = 4, ON_SEGMENT = 5;\n\tconst double eps = 1e-9, pi = 3.14159265358979323846;\n\tbool equal(double a, double b){ return fabs(a - b) < eps; }\n\tstruct point{\n\t\tdouble x, y;\n\t\tpoint(){}\n\t\tpoint(double _x, double _y){ x = _x, y = _y; }\n\t\tpoint operator * (const double &la) const { return point(x * la, y * la); }\n\t\tpoint operator / (const double &la) const { return point(x / la, y / la); }\n\t\tpoint operator + (const point &rhs) const { return point(x + rhs.x, y + rhs.y); }\n\t\tpoint operator - (const point &rhs) const { return point(x - rhs.x, y - rhs.y); }\n\t\tbool operator < (const point &rhs) const { return x < rhs.x || (x == rhs.x && y < rhs.y); }\n\t\tbool operator > (const point &rhs) const { return x > rhs.x || (x == rhs.x && y > rhs.y); }\n\t\tbool operator == (const point &rhs) const { return equal(x, rhs.x) && equal(y, rhs.y); }\n\t\tdouble len2() const { return x * x + y * y; }\n\t\tdouble len() const { return sqrt(len2()); }\n\t\tpoint unit() const { return *this / len(); }\n\t\tpoint unit2() const { return *this / len2(); }\n\t\tfriend double distance(const point &a, const point &b){ return (a - b).len(); }\n\t\tfriend double distance2(const point &a, const point &b){ return (a - b).len2(); }\n\t\tfriend double dot(const point &a, const point &b){ return a.x * b.x + a.y * b.y; }\n\t\tfriend double cross(const point &a, const point &b){ return a.x * b.y - a.y * b.x; }\n\t\tvoid read(){ scanf(\"%lf%lf\", &x, &y); }\n\t\tvoid print(char ch = '\\n') const { printf(\"%.10lf %.10lf\", x, y), putchar(ch); }\n\t\tpoint rotation(double th) const { return point(x * cos(th) - y * sin(th), y * cos(th) + x * sin(th)); }\n\t\tfriend double angle(const point &a, const point &b){ return atan2(cross(a, b), dot(a, b)); }\n\t};\n\tstruct line{\n\t\tpoint a, b;\n\t\tline(){}\n\t\tline(point _a, point _b){ a = _a, b = _b; }\n\t\tvoid read(){ a.read(), b.read(); }\n\t\tvoid print(char ch1 = ' ', char ch2 = '\\n') const { a.print(ch1), b.print(ch2); }\n\t\tpoint projection(const point &p) const { return a + (b - a).unit2() * dot(p - a, b - a); }\n\t\tpoint reflection(const point &p) const { return projection(p) * 2 - p; }\n\t\tint direction(const point &p) const {\n\t\t\tdouble t = cross(b - a, p - a);\n\t\t\tif (t >= eps) return 1;\n\t\t\tif (t <= -eps) return 2;\n\t\t\tdouble l1 = dot(p - a, b - a), l2 = dot(b - a, b - a);\n\t\t\tif (l1 <= -eps) return 3;\n\t\t\tif (l1 > l2) return 4;\n\t\t\treturn 5;\n\t\t}\n\t\tfriend bool parallel(const line &a, const line &b){ return equal(cross(a.b - a.a, b.b - b.a), 0); }\n\t\tfriend bool orthogonal(const line &a, const line &b){ return equal(dot(a.b - a.a, b.b - b.a), 0); }\n\t\tfriend std :: vector<point> cross_line(const line &a, const line &b){\n\t\t\t// gugugu\n\t\t\treturn {};\n\t\t}\n\t\tfriend bool segment_intersection(const line &a, const line &b){\n\t\t\tif (std :: min(a.a.x, a.b.x) >= std :: max(b.a.x, b.b.x) + eps) return 0;\n\t\t\tif (std :: min(b.a.x, b.b.x) >= std :: max(a.a.x, a.b.x) + eps) return 0;\n\t\t\tif (std :: min(a.a.y, a.b.y) >= std :: max(b.a.y, b.b.y) + eps) return 0;\n\t\t\tif (std :: min(b.a.y, b.b.y) >= std :: max(a.a.y, a.b.y) + eps) return 0;\n\t\t\tdouble t1, t2;\n\t\t\tt1 = cross(b.a - a.a, a.b - a.a), t2 = cross(b.b - a.a, a.b - a.a);\n\t\t\tif ((t1 >= eps && t2 >= eps) || (t1 <= -eps && t2 <= -eps)) return 0;\n\t\t\tt1 = cross(a.a - b.a, b.b - b.a), t2 = cross(a.b - b.a, b.b - b.a);\n\t\t\tif ((t1 >= eps && t2 >= eps) || (t1 <= -eps && t2 <= -eps)) return 0;\n\t\t\treturn 1;\n\t\t}\n\t\tfriend double distance_ps(const point &p, const line &l){\n\t\t\tdouble l1 = dot(p - l.a, l.b - l.a), l2 = dot(l.b - l.a, l.b - l.a);\n\t\t\tif (l1 > l2) return distance(p, l.b);\n\t\t\tif (l1 < 0) return distance(p, l.a);\n\t\t\treturn fabs(cross(l.b - l.a, p - l.a)) / distance(l.a, l.b);\n\t\t}\n\t\tfriend double distance_ss(const line &a, const line &b){\n\t\t\tif (segment_intersection(a, b)) return 0;\n\t\t\treturn std :: min(std :: min(distance_ps(a.a, b), distance_ps(a.b, b)), \n\t\t\tstd :: min(distance_ps(b.a, a), distance_ps(b.b, a)));\n\t\t}\n\t};\n\tstruct polygon{\n\t\tstd :: vector<point> g;\n\t\tpolygon(){}\n\t\tpolygon(int n){ g.resize(n); }\n\t\tpolygon(const std :: vector<point> &_g){ g = _g; }\n\t\tvoid clear(){ g.clear(); }\n\t\tvoid resize(int n){ g.resize(n); }\n\t\tint size() const { return g.size(); }\n\t\tvoid push_back(point x){ return g.push_back(x); }\n\t\tvoid pop_back(){ g.pop_back(); }\n\t\tpoint& operator [] (int x){ return g[x]; }\n\t\tconst point& operator [] (int x) const { return g[x]; }\n\t\tdouble directed_area() const {\n\t\t\tint n = g.size();\n\t\t\tdouble s = 0;\n\t\t\tfor (register int i = 0; i < n; ++i) s += cross(g[i], g[(i + 1) % n]);\n\t\t\treturn s / 2;\n\t\t}\n\t\tbool is_convex() const {\n\t\t\tint n = g.size();\n\t\t\tfor (register int i = 0; i < n; ++i)\n\t\t\t\tif (cross(g[(i + 1) % n] - g[i], g[(i - 1 + n) % n] - g[i]) <= -eps) return 0;\n\t\t\treturn 1;\n\t\t}\n\t\tint polygon_point_containment(const point &a) const {\n\t\t\tdouble k = sqrt(1.0 * rnd() / rnd());\n\t\t\tline l = line(a, point(a.x + 1e9, a.y + 1e9 * k));\n\t\t\tint n = g.size(), s = 0;\n\t\t\tfor (register int i = 0; i < n - 1; ++i)\n\t\t\t\tif (line(g[i], g[i + 1]).direction(a) == 5) return 1;\n\t\t\tif (line(g[n - 1], g[0]).direction(a) == 5) return 1;\n\t\t\tfor (register int i = 0; i < n - 1; ++i)\n\t\t\t\tif (segment_intersection(l, line(g[i], g[i + 1]))) ++s;\n\t\t\tif (segment_intersection(l, line(g[n - 1], g[0]))) ++s;\n\t\t\tif (s & 1) return 2; else return 0;\n\t\t}\n\t\tvoid convex_hull(std :: vector<point> f){\n\t\t\tg.clear();\n\t\t\tint n = f.size();\n\t\t\tstd :: sort(f.begin(), f.end());\n\t\t\tstd :: vector<point> p;\n\t\t\tp.push_back(f[0]);\n\t\t\tfor (register int i = 1; i < n; ++i){\n\t\t\t\twhile (p.size() > 1 && cross(f[i] - p.back(), *(++p.rbegin()) - p.back()) <= -eps)\n\t\t\t\t\tp.pop_back();\n\t\t\t\tp.push_back(f[i]);\n\t\t\t}\n\t\t\tfor (register int i = 0; i < p.size() - 1; ++i) g.push_back(p[i]);\n\t\t\tstd :: reverse(f.begin(), f.end());\n\t\t\tp.clear(), p.push_back(f[0]);\n\t\t\tfor (register int i = 1; i < n; ++i){\n\t\t\t\twhile (p.size() > 1 && cross(f[i] - p.back(), *(++p.rbegin()) - p.back()) <= -eps)\n\t\t\t\t\tp.pop_back();\n\t\t\t\tp.push_back(f[i]);\n\t\t\t}\n\t\t\tfor (register int i = 0; i < p.size() - 1; ++i) g.push_back(p[i]);\n\t\t\tf = g, n = f.size(), g.clear();\n\t\t\tint t = 0;\n\t\t\tfor (register int i = 1; i < n; ++i)\n\t\t\t\tif (f[i].y < f[t].y || (f[i].y == f[t].y && f[i].x < f[t].x)) t = i;\n\t\t\tfor (register int i = t; i < n; ++i) g.push_back(f[i]);\n\t\t\tfor (register int i = 0; i < t; ++i) g.push_back(f[i]);\n\t\t}\n\t\tdouble convex_diamater() const {\n\t\t\tint n = g.size();\n\t\t\tdouble ans = 0;\n\t\t\tfor (register int i = 0, j = 0; i < n; ++i){\n\t\t\t\twhile (cross(g[i] - g[j], g[(i + 1) % n] - g[j])\n\t\t\t\t  < cross(g[i] - g[(j + 1) % n], g[(i + 1) % n] - g[(j + 1) % n]) + eps)\n\t\t\t\t\tj = (j + 1) % n;\n\t\t\t\tans = std :: max(ans, distance(g[j], g[i]));\n\t\t\t\tans = std :: max(ans, distance(g[j], g[(i + 1) % n]));\n\t\t\t}\n\t\t\treturn ans;\n\t\t}\n\t};\n\tstruct circle{\n\t\tpoint o;\n\t\tdouble r;\n\t\tcircle(){}\n\t\tcircle(point _o, double _r){ o = _o, r = _r; }\n\t\tvoid read(){ o.read(), scanf(\"%lf\", &r); }\n\t\tvoid print(char ch = '\\n') const { printf(\"%.10lf %.10lf %.10lf\", o.x, o.y, r), putchar(ch); }\n\t\tint circle_intersection(const circle &c) const {\n\t\t\tdouble d = distance(o, c.o);\n\t\t\tif (d >= r + c.r + eps) return 4;\n\t\t\tif (equal(d, r + c.r)) return 3;\n\t\t\tif (d >= fabs(r - c.r) + eps) return 2;\n\t\t\tif (equal(d, fabs(r - c.r))) return 1;\n\t\t\treturn 0;\n\t\t}\n\t\tstd :: vector<point> directed_line_cross_point(const line &l) const {\n\t\t\tpoint p = line(l.a, l.b).projection(o), v = (l.b - l.a).unit();\n\t\t\tdouble d = distance(p, o);\n\t\t\tif (d >= r + eps) return {};\n\t\t\tdouble t = sqrt(r * r - (p - o).len2());\n\t\t\tif (equal(t, 0)) return {p};\n\t\t\telse return {p - v * t, p + v * t};\n\t\t}\n\t\tstd :: vector<point> circle_cross_point(const circle &c) const {\n\t\t\tdouble d = distance(o, c.o);\n\t\t\tif (d <= fabs(r - c.r) - eps || d >= r + c.r + eps) return {};\n\t\t\tdouble x = (r * r - c.r * c.r + d * d) / (d * 2), h = sqrt(r * r - x * x);\n\t\t\tpoint p = (c.o - o).unit() * x, v = (c.o - o).unit().rotation(pi / 2) * h;\n\t\t\tif (v == point(0, 0)) return {p}; else return {p - v, p + v};\n\t\t}\n\t\tstd :: vector<point> tangent(const point &p) const {\n\t\t\tdouble d = distance(o, p);\n\t\t\tif (d <= r - eps) return {};\n\t\t\tif (equal(d, r)) return {p};\n\t\t\treturn circle_cross_point(circle(p, sqrt(d * d - r * r)));\n\t\t}\n\t\tstd :: vector<point> common_tangent_out(const circle &c) const {\n\t\t\tif (equal(r, c.r)){\n\t\t\t\tpoint p = (c.o - o).unit().rotation(pi / 2) * r;\n\t\t\t\treturn {o - p, o + p};\n\t\t\t}\n\t\t\tpoint p = (o * c.r - c.o * r) / (c.r - r);\n\t\t\treturn tangent(p);\n\t\t}\n\t\tstd :: vector<point> common_intangent_in(const circle &c) const {\n\t\t\tpoint p = (o * c.r + c.o * r) / (r + c.r);\n\t\t\treturn tangent(p);\n\t\t}\n\t\tdouble directed_triangle_intersection(const point &a, const point &b) const {\n\t\t\tbool ta = a.x * a.x + a.y * a.y < r * r + eps, tb = b.x * b.x + b.y * b.y < r * r + eps;\n\t\t\tstd :: vector<point> t = circle(point(0, 0), r).directed_line_cross_point(line(b, a));\n\t\t\tif (ta == 1 && tb == 1) return cross(a, b) / 2;\n\t\t\tif (ta == 1 && tb == 0) return angle(t.front(), b) * r * r / 2 + cross(a, t.front()) / 2;\n\t\t\tif (ta == 0 && tb == 1) return angle(a, t.back()) * r * r / 2 + cross(t.back(), b) / 2;\n\t\t\tdouble s = angle(a, b) * r * r / 2;\n\t\t\tif (distance_ps(point(0, 0), line(a, b)) > r - eps) return s;\n\t\t\treturn s + angle(t.front(), t.back()) * r * r / 2 - cross(t.front(), t.back()) / 2;\n\t\t}\n\t\tdouble directed_polygon_intersection(const polygon &g) const {\n\t\t\tint n = g.size();\n\t\t\tdouble s = 0;\n\t\t\tfor (register int i = 0; i < n; ++i)\n\t\t\t\ts += directed_triangle_intersection(g[i] - o, g[(i + 1) % n] - o);\n\t\t\treturn s;\n\t\t}\n\t};\n}\nusing namespace Geometry;\npoint p;\nline l;\npolygon g;\ncircle c;\nint n, q;\ndouble r;\nvoid CGL_1_A(){\n\tl.read(), scanf(\"%d\", &q);\n\twhile (q--) p.read(), l.projection(p).print();\n}\nvoid CGL_1_B(){\n\tl.read(), scanf(\"%d\", &q);\n\twhile (q--) p.read(), l.reflection(p).print();\n}\nvoid CGL_1_C(){\n\tl.read(), scanf(\"%d\", &q);\n\twhile (q--){\n\t\tp.read();\n\t\tint t = l.direction(p);\n\t\tif (t == COUNTER_CLOCKWISE) puts(\"COUNTER_CLOCKWISE\");\n\t\tif (t == CLOCKWISE) puts(\"CLOCKWISE\");\n\t\tif (t == ONLINE_BACK) puts(\"ONLINE_BACK\");\n\t\tif (t == ONLINE_FRONT) puts(\"ONLINE_FRONT\");\n\t\tif (t == ON_SEGMENT) puts(\"ON_SEGMENT\");\n\t}\n}\nvoid CGL_7_H(){\n\tint n;\n\tdouble r;\n\tscanf(\"%d%lf\", &n, &r);\n\tpolygon g(n);\n\tfor (register int i = 0; i < n; ++i) g[i].read();\n\tprintf(\"%.10lf\\n\", fabs(circle(point(0, 0), r).directed_polygon_intersection(g)));\n}\nint main(){\n\tCGL_1_C();\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#define loop(i, s, e) for(ll i = s;i < e;i++)\n\n#include <iostream>\n#include <iomanip>\n#include <set>\n#include <vector>\n#include <queue>\n#include <stack>\n#include <utility>\n#include <algorithm>\n#include <map>\n#include <cmath>\n\nusing namespace std;\n\ntypedef long long signed ll;\n\n#define NAN 0x800000000000\n\ntemplate<typename T>\nclass Vector2D {\npublic:\n    T x;\n    T y;\n\n    Vector2D() {\n        x = y = 0;\n    }\n\n    Vector2D(T x_, T y_) {\n        x = x_;\n        y = y_;\n    }\n\n    T operator*(const Vector2D<T> *e) {\n        return this->x * e->x + this->y * e->y;\n    }\n\n    Vector2D<T> operator-(const Vector2D<T> *e) {\n        return Vector2D<T>(this->x - e->x, this->y - e->y);\n    }\n\n    Vector2D<T> operator+(const Vector2D<T> *e) {\n        return Vector2D<T>(this->x + e->x, this->y + e->y);\n    }\n\n    T operator*(const Vector2D<T> e) {\n        return this->x * e.x + this->y * e.y;\n    }\n\n    Vector2D<T> operator-(const Vector2D<T> e) {\n        return Vector2D<T>(this->x - e.x, this->y - e.y);\n    }\n\n    Vector2D<T> operator+(const Vector2D<T> e) {\n        return Vector2D<T>(this->x + e.x, this->y + e.y);\n    }\n\n    Vector2D<T> operator*(const T r) {\n        return Vector2D<T>(this->x * r, this->y * r);\n    }\n\n    Vector2D<T> operator/(const T r) {\n        return Vector2D<T>(this->x / r, this->y / r);\n    }\n\n    double abs() {\n        return sqrt(x * x + y * y);\n    }\n\n    T abs2() {\n        return x * x + y * y;\n    }\n\n    T cross(Vector2D<T> e) {\n        if(x * e.y >= y * e.x) return (x * e.y) - (y * e.x);\n        else return (y * e.x) - (x * e.y);\n    }\n\n    double cos(Vector2D<T> e) {\n        if((e.abs() * abs()) == 0) return NAN;\n        return (e * (*this)) / (e.abs() * abs());\n    }\n\n    double sin(Vector2D<T> e) {\n        if((e.abs() * abs()) == 0) return NAN;\n        return ((x * e.y) - (y * e.x)) / (e.abs() * abs());\n    }\n};\n\ntypedef Vector2D<double> vdd;\n\ndouble dist__(double x0, double y0, double x1, double y1, double xx, double yy) {\n    int b = 0;\n    vdd p[3] = {vdd(x0, y0), vdd(x1, y1), vdd(xx, yy)};\n    if (((p[0] - p[1]) * (p[2] - p[1])) < 0) b = -1;\n    if (((p[1] - p[0]) * (p[2] - p[0])) < 0) b = 1;\n    if (b == 1) return (p[2] - p[0]).abs();\n    if (b == -1) return (p[2] - p[1]).abs();\n    return (p[1] - p[0]).cross(p[2] - p[0]) / (p[1] - p[0]).abs();\n}\n\ndouble dist(double x0, double y0, double x1, double y1, double xx, double yy){\n    double res = dist__(x0,y0,x1,y1,xx,yy);\n    return res;\n}\nint main() {\n    int q;\n    vdd base,p;\n    cin >> base.x >> base.y >> p.x >> p.y;\n    cin >> q;\n    loop(i, 0, q) {\n        vdd z;\n        cin >> z.x >> z.y;\n        double cos = (p-base).cos(z-base);\n        double sin = (p-base).sin(z-base);\n        double cosr = (base-p).cos(z-p);\n        if(cos == NAN || cosr == NAN) cout << \"ON_SEGMENT\" << endl;\n        else if(abs(cos - 1) < 0.000001 && abs(cosr - 1) < 0.000001) cout << \"ON_SEGMENT\" << endl;\n        else if(abs(cos - 1) < 0.000001) cout << \"ONLINE_FRONT\" << endl;\n        else if(abs(cos + 1) < 0.000001) cout << \"ONLINE_BACK\" << endl;\n        else if(sin < 0) cout << \"CLOCKWISE\" << endl;\n        else if(sin > 0) cout << \"COUNTER_CLOCKWISE\" << endl;\n        else cout << \"ON_SEGMENT\" << endl;\n    }\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nstruct Point\n{\n    int x,y;\n    Point(){ x = y = 0.0; }\n    Point(int _x, int _y) : x(_x), y(_y){}\n\n    Point operator+ (Point p)\n    {\n        return Point(p.x + x, p.y + y);\n    }\n\n    Point operator- (Point p)\n    {\n        return Point(x - p.x, y - p.y);\n    }\n\n    int operator* (Point p)\n    {\n        return p.x * x + p.y * y;\n    }\n\n    Point operator* (int t)\n    {\n        return Point(x*t, y*t);\n    }\n\n    int operator~ ()\n    {\n        return x * x + y * y;\n    }\n\n    int operator% (Point p)\n    {\n        return x * p.y - y * p.x;\n    }\n\n};\n\nint main()\n{\n    cout.precision(10);\n    cout << fixed;\n    int q;\n    Point p0, p1, p2, vec, vec1;\n    cin >> p0.x >> p0.y >> p1.x >> p1.y;\n    cin >> q;\n    while(q--)\n    {\n        cin >> p2.x >> p2.y;\n        vec = (p2 - p0);\n        vec1 = (p1 - p0);\n        if( vec%vec1 < 0 ) puts(\"COUNTER_CLOCKWISE\");\n        else if( vec%vec1 > 0) puts(\"CLOCKWISE\");\n        else\n        {\n            if(vec * vec1 < 0) puts(\"ONLINE_BACK\");\n            else if(vec * vec1 > 0) puts(\"ONLINE_FRONT\");\n            else puts(\"ON_SEGMENT\");\n        }\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n#define PI 3.141592653589793238\n#define int long long\n \nusing namespace std;\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nstruct Point{\n  double x,y;\n  Point(){}\n  Point(double x,double y) :x(x),y(y){}\n  Point operator + (Point p) {return Point(x+p.x,y+p.y);}\n  Point operator - (Point p) {return Point(x-p.x,y-p.y);}\n  Point operator * (double k) {return Point(x*k,y*k);}\n  Point operator / (double k) {return Point(x/k,y/k);}\n  double norm(){return x*x+y*y;}\n  double abs(){return sqrt(norm());}\n\n  bool operator < (const Point &p) const{\n    return x!=p.x ? x < p.x : y < p.y;\n  }\n\n  bool operator == (const Point &p) const{\n    return fabs(x-p.x) < EPS && fabs(y-p.y) < EPS;\n  }\n};\n\nistream &operator >> (istream &is,Point &p){\n  is>>p.x>>p.y;\n  return is;\n}\n\nostream &operator << (ostream &os,Point p){\n  os<<fixed<<setprecision(12)<<p.x<<\" \"<<p.y;\n  return os;\n}\n\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\nstruct Segment{\n  Point p1,p2;\n  Segment(){}\n  Segment(Point p1, Point p2):p1(p1),p2(p2){}\n};\ntypedef Segment Line;\n\nstruct Circle{\n  Point c;\n  double r;\n  Circle(){}\n  Circle(Point c,double r):c(c),r(r){}\n};\n\ndouble norm(Vector a){\n  return a.x*a.x+a.y*a.y;\n}\ndouble abs(Vector a){\n  return sqrt(norm(a));\n}\ndouble dot(Vector a,Vector b){\n  return a.x*b.x+a.y*b.y;\n}\ndouble cross(Vector a,Vector b){\n  return a.x*b.y-a.y*b.x;\n}\n\nbool isOrthogonal(Vector a,Vector b){\n  return equals(dot(a,b),0.0);\n}\n\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n  return isOrthogonal(a1-a2,b1-b2);\n}\n\nbool isOrthogonal(Segment s1,Segment s2){\n  return equals(dot(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n\nbool isParallel(Vector a,Vector b){\n  return equals(cross(a,b),0.0);\n}\n\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n  return isParallel(a1-a2,b1-b2);\n}\n\nbool isParallel(Segment s1,Segment s2){\n  return equals(cross(s1.p2-s1.p1,s2.p2-s2.p1),0.0); \n}\n\nPoint project(Segment s,Point p){\n  Vector base=s.p2-s.p1;\n  double r=dot(p-s.p1,base)/norm(base);\n  return s.p1+base*r;\n}\n\nPoint reflect(Segment s,Point p){\n  return p+(project(s,p)-p)*2.0;\n}\n\nint ccw(Point p0,Point p1,Point p2){\n  Vector a = p1-p0;\n  Vector b = p2-p0;\n  if(cross(a,b) > EPS) return COUNTER_CLOCKWISE;\n  if(cross(a,b) < -EPS) return CLOCKWISE;\n  if(dot(a,b) < -EPS) return ONLINE_BACK;\n  if(a.norm()<b.norm()) return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\n\nbool intersect(Point p1,Point p2,Point p3,Point p4){\n  return (ccw(p1,p2,p3)*ccw(p1,p2,p4) <= 0 &&\n\t  ccw(p3,p4,p1)*ccw(p3,p4,p2) <= 0 );\n}\n\nbool intersect(Segment s1,Segment s2){\n  return intersect(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n\ndouble getDistanceLP(Line l,Point p){\n  return abs(cross(l.p2-l.p1,p-l.p1)/abs(l.p2-l.p1));\n}\n\ndouble getDistanceSP(Segment s,Point p){\n  if(dot(s.p2-s.p1,p-s.p1) < 0.0 ) return abs(p-s.p1);\n  if(dot(s.p1-s.p2,p-s.p2) < 0.0 ) return abs(p-s.p2);\n  return getDistanceLP(s,p);\n}\n\ndouble getDistance(Segment s1,Segment s2){\n  if(intersect(s1,s2)) return 0.0;\n  return min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),\n\t     min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n}\n\nPoint getCrossPoint(Segment s1,Segment s2){\n  Vector base=s2.p2-s2.p1;\n  double d1=abs(cross(base,s1.p1-s2.p1));\n  double d2=abs(cross(base,s1.p2-s2.p1));\n  double t=d1/(d1+d2);\n  return s1.p1+(s1.p2-s1.p1)*t;\n}\n\n\npair<Point,Point> getCrossPoints(Circle c,Line l){\n  Vector pr=project(l,c.c);\n  Vector e=(l.p2-l.p1)/abs(l.p2-l.p1);\n  double base=sqrt(c.r*c.r-norm(pr-c.c));\n  return make_pair(pr+e*base,pr-e*base);\n}\n\n\ndouble arg(Vector p){\n  return atan2(p.y,p.x);\n}\n\nVector polar(double a,double r){\n  return Point(cos(r)*a,sin(r)*a);\n}\n\npair<Point,Point> getCrossPoints(Circle c1,Circle c2){\n  double d=abs(c1.c-c2.c);\n  double a=acos((c1.r*c1.r+d*d-c2.r*c2.r)/(2*c1.r*d));\n  double t=arg(c2.c-c1.c);\n  return make_pair(c1.c+polar(c1.r,t+a),c1.c+polar(c1.r,t-a));\n}\n\nint contains(Polygon g,Point p){\n  int n=g.size();\n  bool x=false;\n  for(int i=0;i<n;i++){\n    Point a=g[i]-p,b=g[(i+1)%n]-p;\n    if(fabs(cross(a,b)) < EPS && dot(a,b) < EPS) return 1;\n    if(a.y>b.y) swap(a,b);\n    if(a.y < EPS && EPS < b.y && cross(a,b) > EPS ) x = !x;\n  }\n  return (x?2:0);\n}\n\nPolygon andrewScan(Polygon s){\n  Polygon u,l;\n  if(s.size()<3) return s;\n  sort(s.begin(),s.end());\n  u.push_back(s[0]);\n  u.push_back(s[1]);\n  l.push_back(s[s.size()-1]);\n  l.push_back(s[s.size()-2]);\n  for(int i=2;i<(int)s.size();i++){\n    for(int n=u.size();n>=2&&ccw(u[n-2],u[n-1],s[i]) != CLOCKWISE;n--){\n      u.pop_back();\n    }\n    u.push_back(s[i]);\n  } \n  for(int i=s.size()-3;i>=0;i--){\n    for(int n=l.size();n>=2&&ccw(l[n-2],l[n-1],s[i]) != CLOCKWISE;n--){\n      l.pop_back();\n    }\n    l.push_back(s[i]);\n  }\n  reverse(l.begin(),l.end());\n  for(int i=u.size()-2;i>=1;i--) l.push_back(u[i]);\n  return l;\n} \n\ndouble area(Polygon s){\n  double res=0;\n  for(int i=0;i<(int)s.size();i++){\n    res+=cross(s[i],s[(i+1)%s.size()])/2.0;\n  }\n  return abs(res);\n}\n\n\nPoint getCrossPointLL(Line l1,Line l2){\n  double a=cross(l1.p2-l1.p1,l2.p2-l2.p1);\n  double b=cross(l1.p2-l1.p1,l1.p2-l2.p1);\n  if(abs(a)<EPS&&abs(b)<EPS) return l2.p1;\n  return l2.p1+(l2.p2-l2.p1)*(b/a);\n}\n\nPolygon convexCut(Polygon p,Line l){\n  Polygon q;\n  for(int i=0;i<(int)p.size();i++){\n    Point a=p[i],b=p[(i+1)%p.size()];\n    if(ccw(l.p1,l.p2,a)!=-1) q.push_back(a);\n    if(ccw(l.p1,l.p2,a)*ccw(l.p1,l.p2,b)<0)\n      q.push_back(getCrossPointLL(Line(a,b),l));\n  }\n  return q;\n}\n\nLine bisector(Point p1,Point p2){\n  Circle c1=Circle(p1,abs(p1-p2)),c2=Circle(p2,abs(p1-p2));\n  pair<Point,Point> p=getCrossPoints(c1,c2);\n  if(cross(p2-p1,p.first-p1)>0) swap(p.first,p.second);\n  return Line(p.first,p.second);\n}\n\n\nVector spin(Vector v,double theta){\n  Vector res;\n  res.x=cos(theta)*v.x-sin(theta)*v.y;\n  res.y=sin(theta)*v.x+cos(theta)*v.y;\n  return res;\n}\n\nvector<Line> corner(Line l1,Line l2){\n  vector<Line> res;\n  if(isParallel(l1,l2)){\n    double d=getDistanceLP(l1,l2.p1)/2.0;\n    Vector v1=l1.p2-l1.p1;\n    v1=v1/v1.abs()*d;\n    Point p=l2.p1+spin(v1,90.0*(PI/180.0));\n    double d1=getDistanceLP(l1,p);\n    double d2=getDistanceLP(l2,p);\n    if(abs(d1-d2)>d){\n      p=l2.p1+spin(v1,-90.0*(PI/180.0));\n    }\n    res.push_back(Line(p,p+v1));\n  }else{\n    Point p=getCrossPointLL(l1,l2);\n    Vector v1=l1.p2-l1.p1,v2=l2.p2-l2.p1;\n    v1=v1/v1.abs();\n    v2=v2/v2.abs();\n    res.push_back(Line(p,p+(v1+v2)));\n    res.push_back(Line(p,p+spin(v1+v2,90.0*(PI/180.0))));\n  }\n  return res;\n}\n\nsigned main(){\n  Point p0,p1;\n  cin>>p0>>p1;\n  int q;\n  cin>>q;\n  while(q--){\n    Point p2;\n    cin>>p2;\n    int t=ccw(p0,p1,p2);\n    if(t==COUNTER_CLOCKWISE) cout<<\"COUNTER_CLOCKWISE\"<<endl;\n    if(t==CLOCKWISE) cout<<\"CLOCKWISE\"<<endl;\n    if(t==ONLINE_BACK) cout<<\"ONLINE_BACK\"<<endl;\n    if(t==ONLINE_FRONT) cout<<\"ONLINE_FRONT\"<<endl;\n    if(t==ON_SEGMENT) cout<<\"ON_SEGMENT\"<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nclass Point {\npublic:\n\tdouble x, y;\n\tPoint(double x = 0.0, double y = 0.0) :\n\t\t\tx(x), y(y) {\n\t}\n\n\tPoint operator +(Point p) {\n\t\treturn Point(x + p.x, y + p.y);\n\t}\n\tPoint operator -(Point p) {\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n\tPoint operator *(double k) {\n\t\treturn Point(x * k, y * k);\n\t}\n\tPoint operator /(double k) {\n\t\treturn Point(x / k, y / k);\n\t}\n\n\tdouble norm() {\n\t\treturn x * x + y * y;\n\t}\n\tdouble abs() {\n\t\treturn sqrt(norm());\n\t}\n\n\tbool operator <(Point p) {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\tbool operator ==(Point p) {\n\t\treturn equals(x, p.x) && equals(y, p.y);\n\t}\n};\ntypedef Point Vector;\n\nclass Segment {\npublic:\n\tPoint p1, p2;\n\tSegment(Point p1 = Point(), Point p2 = Point()) :\n\t\t\tp1(p1), p2(p2) {\n\t}\n};\ntypedef Segment Line;\n\ndouble dot(Vector v1, Vector v2) {\n\treturn v1.x * v2.x + v1.y * v2.y;\n}\ndouble cross(Vector v1, Vector v2) {\n\treturn v1.x * v2.y - v1.y * v2.x;\n}\nbool isOrthogonal(Vector v1, Vector v2) {\n\treturn equals(dot(v1, v2), 0.0);\n}\nbool isOrthogonal(Segment s1, Segment s2) {\n\treturn equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\nbool isOrthogonal(Point l1, Point l2, Point m1, Point m2) {\n\treturn isOrthogonal(l2 - l1, m2 - m1);\n}\nbool isParallel(Vector v1, Vector v2) {\n\treturn equals(cross(v1, v2), 0.0);\n}\nbool isParallel(Segment s1, Segment s2) {\n\treturn equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\nbool isParallel(Point l1, Point l2, Point m1, Point m2) {\n\treturn isParallel(l1 - l2, m1 - m2);\n}\n\ndouble distancePP(Point p1, Point p2) {\n\treturn (p1 - p2).abs();\n}\ndouble distanceLP(Line l, Point p) {\n\treturn cross(l.p2 - l.p1, p - l.p1) / dot(l.p2, l.p1);\n}\ndouble distanceSP(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0)\n\t\treturn distancePP(s.p1, p);\n\telse if (dot(s.p1 - s.p2, p - s.p2) < 0.0)\n\t\treturn distancePP(s.p2, p);\n\telse\n\t\treturn distanceLP(s, p);\n}\n//double distanceSS(Segment s1, Segment s2) {\n//\tif (intersect(s1, s2))\n//\t\treturn 0.0;\n//\telse {\n//\t\treturn min(\n//\t\t\t\t{ distanceSP(s1, s2.p1), distanceSP(s1, s2.p2), distanceSP(s2,\n//\t\t\t\t\t\ts1.p1), distanceSP(s2, s1.p2) });\n//\t}\n//}\n\nenum PositionSP {\n\tCOUNTER_CLOCKWISE, CLOCKWISE, ONLINE_BACK, ONLINE_FRONT, ON_SEGMENT\n};\nPositionSP ccw(Point p1, Point p2, Point p) {\n\tVector a = p2 - p1, b = p - p1;\n\tif (cross(a, b) > EPS)\n\t\treturn COUNTER_CLOCKWISE;\n\telse if (cross(a, b) < -EPS)\n\t\treturn CLOCKWISE;\n\telse if (dot(a, b) < -EPS)\n\t\treturn ONLINE_BACK;\n\telse if (a.norm() < b.norm())\n\t\treturn ONLINE_FRONT;\n\telse\n\t\treturn ON_SEGMENT;\n}\n\nint main() {\n\tPoint p0, p1;\n\tcin >> p0.x >> p0.y;\n\tcin >> p1.x >> p1.y;\n\tint q;\n\tcin >> q;\n\tfor (int i = 0; i < q; i++) {\n\t\tPoint p2;\n\t\tcin >> p2.x >> p2.y;\n\t\tswitch (ccw(p0, p1, p2)) {\n\t\tcase COUNTER_CLOCKWISE:\n\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t\tbreak;\n\t\tcase CLOCKWISE:\n\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\t\tbreak;\n\t\tcase ONLINE_BACK:\n\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t\tbreak;\n\t\tcase ONLINE_FRONT:\n\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t\tbreak;\n\t\tcase ON_SEGMENT:\n\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <stack>\n#include <queue>\n#include <deque>\n#include <set>\n#include <map>\n#include <algorithm>\t// require sort next_permutation count __gcd reverse etc.\n#include <cstdlib>\t// require abs exit atof atoi \n#include <cstdio>\t\t// require scanf printf\n#include <functional>\n#include <numeric>\t// require accumulate\n#include <cmath>\t\t// require fabs\n#include <climits>\n#include <limits>\n#include <cfloat>\n#include <iomanip>\t// require setw\n#include <sstream>\t// require stringstream \n#include <cstring>\t// require memset\n#include <cctype>\t\t// require tolower, toupper\n#include <fstream>\t// require freopen\n#include <ctime>\t\t// require srand\n#define rep(i,n) for(int i=0;i<(n);i++)\n#define ALL(A) A.begin(), A.end()\n#define EPS (1e-10)\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int, int> P;\n\ntemplate<class T>\nstruct point{\n\tT x, y;\n\tpoint &operator+=(const point &a ){ x += a.x; y += a.y; }\n\tpoint &operator-=(const point &a ){ x -= a.x; y -= a.y; }\n\tpoint operator+(const point &a )const{ return (point){x+a.x, y+a.y }; }\n\tpoint operator-(const point &a )const{ return (point){x-a.x, y-a.y }; }\n\toperator point<double>()const{ return (point<double>){x, y }; }\n};\n\ntemplate<class T>\npoint<T> operator*(T c, const point<T> &a ){ return (point<T>){c*a.x, c*a.y }; }\npoint<double> &operator/=(point<double> &a, double c ){ a.x /= c; a.y /= c; return a; }\ntemplate<class T>\npoint<double> operator/(const point<T> &a, double c ){ return (point<double>){ a.x/c, a.y/c }; }\n\n//  for real number\nbool operator<(const point<double> &a, const point<double> &b ){\n\treturn (a.x + EPS < b.x || (abs (a.x - b.x ) < EPS && (a.y + EPS < b.y ) ) );\n}\n\nbool operator==(const point<double> &a, const point<double> &b ){\n\treturn abs (a.x - b.x) < EPS && abs (a.y - b.y ) < EPS;\n}\n\nbool operator!=(const point<double> &a, const point<double> &b ){\n\treturn abs (a.x - b.x ) > EPS || abs (a.y - b.y ) > EPS;\n}\n\n// inner product\ntemplate<class T>\nT dot(const point<T> &a, const point<T> &b ){ return a.x*b.x + a.y*b.y; }\n\n// outer product\ntemplate<class T>\nT cross(const point<T> &a, const point<T> &b ){ return a.x*b.y - a.y*b.x; }\n\n// distance between origin(0,0) to point a\ntemplate<class T>\ndouble abs(const point<T> &a ){ return sqrt (a.x*a.x + a.y*a.y ); }\n\ntemplate<class T>\nT abs2(const point<T> &a ){ return a.x*a.x + a.y*a.y; }\n\n\n/*\n\t回転方向\n\n\t説明\n\t\t３点の位置関係を求める\n\t\t(A) 座標値が整数\n\t\t(B) 座標値が実数\n\t引数\n\t\ta : 点\n\t\tb : 点\n\t\tc : 点\n\t戻り値\n\t\ta-b-c の順に反時計回りに回転しているとき CCW\n\t\ta-b-c の順に時計回りに回転しているとき CW\n\t\ta-b-c が同一直線上にあるとき ON\n\t制約\n\t\tなし\n\t計算量\n\t\tO(1)\n\t備考\n\t\t2 点以上が同一の点であれば常に ON を返すことに注意\n\n*/\n\n// (A)\nenum{CCW = 0, CW = 1, ON = 2 };\nint ccw (const point<double> &a, const point<double> &b, const point<double> &c ){\n\tdouble rdir = cross (b-a, c-a );\n\tif (rdir > 0 ) return CCW;\n\tif (rdir < 0 ) return CW;\n\treturn ON;\n}\n\n/*\n\t3点が同一直線上にあるときの処理\n\n\t説明\n\t\t３点の位置関係を求める\n\t引数\n\t\ta : 点\n\t\tb : 点\n\t\tc : 点\n\t戻り値\n\t\tベクトル b - a とベクトル c - a が反対方向のとき ONLINE_BACK\n\t\tベクトル b - a とベクトル c - a が同じ方向で\n\t\tベクトル b - a の延長線上に点 c があるとき ONLINE_FRONT\n\t\t線分 ba の中に 点 c があるとき ON_SEGMENT\n\t制約\n\t\t3点が同一直線上にあるときに限る\n\t計算量\n\t\tO(1)\n\t備考\n\t\t3点 a, b, c の少なくも2点が同一の点であれば、常に ON_SEGMENT を返すことに注意\n*/\nenum{ONLINE_BACK = 0, ONLINE_FRONT = 1, ON_SEGMENT = 2 };\nint on_line (const point<double> &a, const point<double> &b, const point<double> &c ){\n\n\tdouble rcos = dot (b-a, c-a );\n\tif (rcos < 0. ){\n\t\treturn ONLINE_BACK;\n\t}else{\t\t\n\t\tif (abs2 (b-a ) < abs2 (c - a ) )\n\t\t\treturn ONLINE_FRONT;\n\t\telse\n\t\t\treturn ON_SEGMENT;\n\t} // end if\t\t\t\n\n}\nconst string status[] = { \"COUNTER_CLOCKWISE\", \"CLOCKWISE\", \"ONLINE_BACK\", \"ONLINE_FRONT\", \"ON_SEGMENT\" };\n\nint main()\n{\n\tios_base::sync_with_stdio(0);\n\tpoint<double> p0, p1;\n\tcin >> p0.x >> p0.y >> p1.x >> p1.y;\n\n\tint q; cin >> q;\n\trep (i, q ){\n\t\tint res = -1;\n\t\tpoint<double> p2;\n\t\tcin >> p2.x >> p2.y;\n\t\tif ((res = ccw (p0, p1, p2 ) ) != ON ){\n\t\t\tcout << status[res] << endl;\n\t\t}else{\n\t\t\tres = on_line (p0, p1, p2 );\n\t\t\tcout << status[res+2] << endl;\n\t\t} // end if\n\t} // end rep\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\n#pragma GCC optimize(\"Ofast\")\n\n// Begin Header {{{\nusing namespace std;\n\n#ifndef DEBUG\n#define dump(...)\n#endif\n\n#define all(x) x.begin(), x.end()\n#define rep(i, b, e) for (intmax_t i = (b), i##_limit = (e); i < i##_limit; ++i)\n#define reps(i, b, e) for (intmax_t i = (b), i##_limit = (e); i <= i##_limit; ++i)\n#define repr(i, b, e) for (intmax_t i = (b), i##_limit = (e); i >= i##_limit; --i)\n#define var(Type, ...) Type __VA_ARGS__; input(__VA_ARGS__)\n\nconstexpr size_t    operator\"\"_zu(unsigned long long value) { return value; };\nconstexpr intmax_t  operator\"\"_jd(unsigned long long value) { return value; };\nconstexpr uintmax_t operator\"\"_ju(unsigned long long value) { return value; };\n\nconstexpr int INF = 0x3f3f3f3f;\nconstexpr intmax_t LINF = 0x3f3f3f3f3f3f3f3f_jd;\n\ntemplate <class T, class Compare = less<>>\nusing MaxHeap = priority_queue<T, vector<T>, Compare>;\ntemplate <class T, class Compare = greater<>>\nusing MinHeap = priority_queue<T, vector<T>, Compare>;\n\ninline void input() {}\ntemplate <class Head, class... Tail>\ninline void input(Head&& head, Tail&&... tail) {\n    cin >> head;\n    input(forward<Tail>(tail)...);\n}\n\ntemplate <class T>\ninline istream& operator>>(istream &is, vector<T> &vec) {\n    for (auto &e: vec) {\n        is >> e;\n    }\n    return is;\n}\n\ninline void output() { cout << \"\\n\"; }\ntemplate <class Head, class... Tail>\ninline void output(Head&& head, Tail&&... tail) {\n    cout << head;\n    if (sizeof...(tail)) {\n        cout << \" \";\n    }\n    output(forward<Tail>(tail)...);\n}\n\ntemplate <class T>\ninline ostream& operator<<(ostream &os, const vector<T> &vec) {\n    static constexpr const char *delim[] = {\" \", \"\"};\n    for (const auto &e: vec) {\n        os << e << delim[&e == &vec.back()];\n    }\n    return os;\n}\n\ntemplate <class T>\ninline vector<T> makeVector(const T &initValue, size_t sz) {\n    return vector<T>(sz, initValue);\n}\n\ntemplate <class T, class... Args>\ninline auto makeVector(const T &initValue, size_t sz, Args... args) {\n    return vector<decltype(makeVector<T>(initValue, args...))>(sz, makeVector<T>(initValue, args...));\n}\n\ntemplate <class Func>\nclass FixPoint : Func {\npublic:\n    explicit constexpr FixPoint(Func&& f) noexcept : Func(forward<Func>(f)) {}\n\n    template <class... Args>\n    constexpr decltype(auto) operator()(Args&&... args) const {\n        return Func::operator()(*this, std::forward<Args>(args)...);\n    }\n};\n\ntemplate <class Func>\nstatic inline constexpr decltype(auto) makeFixPoint(Func&& f) noexcept {\n    return FixPoint<Func>{forward<Func>(f)};\n}\n\ntemplate <class Container>\nstruct reverse_t {\n    Container &c;\n    reverse_t(Container &c) : c(c) {}\n    auto begin() { return c.rbegin(); }\n    auto end() { return c.rend(); }\n};\n\ntemplate <class Container>\nauto reversed(Container &c) {\n    return reverse_t<Container>(c);\n}\n\ntemplate <class T>\ninline bool chmax(T &a, const T &b) noexcept {\n    return b > a && (a = b, true);\n}\n\ntemplate <class T>\ninline bool chmin(T &a, const T &b) noexcept {\n    return b < a && (a = b, true);\n}\n\ntemplate <class T>\ninline T diff(const T &a, const T &b) noexcept {\n    return a < b ? b - a : a - b;\n}\n// End Header }}}\n\n// Geometry {{{\nconst long double EPS = 1e-10;\nconst long double PI = acos(-1);\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nstruct Real {\n    long double x;\n\n    Real(long double x = 0) : x(x) {}\n    Real(const Real& rhs) { x = rhs.x; }\n\n    Real operator+(const Real& rhs) const { return Real(x + rhs.x); }\n    Real& operator+=(const Real& rhs) { return x += rhs.x, *this; }\n    Real operator-(const Real& rhs) const { return Real(x - rhs.x); }\n    Real& operator-=(const Real& rhs) { return x -= rhs.x, *this; }\n    Real operator*(const Real& rhs) const { return Real(x * rhs.x); }\n    Real& operator*=(const Real& rhs) { return x *= rhs.x, *this; }\n    Real operator/(const Real& rhs) const { return Real(x / rhs.x); }\n    Real& operator/=(const Real& rhs) { return x /= rhs.x, *this; }\n    Real operator-() const { return Real(-x); }\n    Real& operator++() { return ++x, *this; }\n    Real& operator--() { return --x, *this; }\n    Real operator++(int) { Real tmp(x); return ++x, tmp; }\n    Real operator--(int) { Real tmp(x); return --x, tmp; }\n    bool operator==(const Real& rhs) const { return fabs(x - rhs.x) < EPS; }\n    bool operator!=(const Real& rhs) const { return !(*this == rhs); }\n    bool operator<(const Real& rhs) const { return (*this == rhs) ? false : x < rhs.x; }\n    bool operator>(const Real& rhs) const { return (*this == rhs) ? false : x > rhs.x; }\n    bool operator<=(const Real& rhs) const { return (*this == rhs) ? true : x < rhs.x; }\n    bool operator>=(const Real& rhs) const { return (*this == rhs) ? true : x > rhs.x; }\n\n    friend istream& operator>>(istream& is, Real& rhs) {\n        is >> rhs.x;\n        return is;\n    }\n    friend ostream& operator<<(ostream& os, const Real& rhs) {\n        os << rhs.x;\n        return os;\n    }\n\n    friend Real pow(const Real& n, const Real& p) { return pow(n.x, p.x); }\n    friend Real pow(Real n, intmax_t p) {\n        Real ret = 1;\n        for (; p > 0; p >>= 1) {\n            if (p & 1) ret *= n;\n            n *= n;\n        }\n        return ret;\n    }\n    friend Real abs(const Real& rhs) { return abs(rhs.x); }\n    friend Real sin(const Real& rhs) { return sin(rhs.x); }\n    friend Real cos(const Real& rhs) { return cos(rhs.x); }\n    friend Real tan(const Real& rhs) { return tan(rhs.x); }\n    friend Real asin(const Real& rhs) { return asin(rhs.x); }\n    friend Real acos(const Real& rhs) { return acos(rhs.x); }\n    friend Real atan(const Real& rhs) { return atan(rhs.x); }\n    friend Real atan2(const Real& lhs, const Real& rhs) { return atan2(lhs.x, rhs.x); }\n    friend Real sqrt(const Real& rhs) { return sqrt(rhs.x); }\n    friend Real ceil(const Real& rhs) { return ceil(rhs.x); }\n    friend Real floor(const Real& rhs) { return floor(rhs.x); }\n    friend Real round(const Real& rhs) { return round(rhs.x); }\n};\n\nusing real_t = Real;\n\nstruct Point {\n    real_t x, y;\n\n    Point(real_t x = 0, real_t y = 0) : x(x), y(y) {}\n\n    Point operator+(const Point& rhs) const { return Point(x + rhs.x, y + rhs.y); }\n    Point operator-(const Point& rhs) const { return Point(x - rhs.x, y - rhs.y); }\n    Point operator*(const real_t& rhs) const { return Point(x * rhs, y * rhs); }\n    Point operator/(const real_t& rhs) const { return Point(x / rhs, y / rhs); }\n    Point operator-() const { return Point(-x, -y); }\n    bool operator==(const Point& rhs) const { return x == rhs.x && y == rhs.y; }\n    bool operator!=(const Point& rhs) const { return !(*this == rhs); }\n    bool operator<(const Point& rhs) const { return (x == rhs.x) ? y < rhs.y : x < rhs.x; }\n    bool operator>(const Point& rhs) const { return (x == rhs.x) ? y > rhs.y : x > rhs.x; }\n    bool operator<=(const Point& rhs) const { return (*this == rhs) ? true : *this < rhs; }\n    bool operator>=(const Point& rhs) const { return (*this == rhs) ? true : *this > rhs; }\n\n    friend istream& operator>>(istream& is, Point& rhs) {\n        is >> rhs.x >> rhs.y;\n        return is;\n    }\n    friend ostream& operator<<(ostream& os, const Point& rhs) {\n        os << rhs.x << ' ' << rhs.y;\n        return os;\n    }\n};\n\nusing Vector = Point;\n\nreal_t norm(const Vector& a) { return a.x * a.x + a.y * a.y; }\nreal_t len(const Vector& a) { return sqrt(norm(a)); }\nreal_t dot(const Vector& a, const Vector& b) {\n    return a.x * b.x + a.y * b.y;\n}\nreal_t cross(const Vector& a, const Vector& b) {\n    return a.x * b.y - a.y * b.x;\n}\n\nstruct Segment {\n    Point p1, p2;\n\n    Segment(Point p1 = Point(), Point p2 = Point()) : p1(p1), p2(p2) {}\n\n    bool operator==(const Segment& rhs) const { return p1 == rhs.p1 && p2 == rhs.p2; }\n    bool operator!=(const Segment& rhs) const { return !(*this == rhs); }\n\n    friend istream& operator>>(istream& is, Segment& rhs) {\n        is >> rhs.p1 >> rhs.p2;\n        return is;\n    }\n    friend ostream& operator<<(ostream& os, const Segment& rhs) {\n        os << rhs.p1 << ' ' << rhs.p2;\n        return os;\n    }\n};\n\nusing Line = Segment;\n\nreal_t len(const Segment& s) { return len(s.p1 - s.p2); }\n\nbool isParallel(const Vector& a, const Vector& b) {\n    return cross(a, b) == 0.0;\n}\nbool isParallel(const Point& a1, const Point& a2, const Point& b1, const Point& b2) {\n    return isParallel(a1 - a2, b1 - b2);\n}\nbool isParallel(const Segment& s1, const Segment& s2) {\n    return isParallel(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\nbool isOrthogonal(const Vector& a, const Vector& b) {\n    return dot(a, b) == 0.0;\n}\nbool isOrthogonal(const Point& a1, const Point& a2, const Point& b1, const Point& b2) {\n    return isOrthogonal(a1 - a2, b1 - b2);\n}\nbool isOrthogonal(const Segment& s1, const Segment& s2) {\n    return isOrthogonal(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\nPoint project(const Segment& s, const Point& p) {\n    const Vector base = s.p2 - s.p1;\n    const Vector hypo = p - s.p1;\n    const real_t r = dot(hypo, base) / norm(base);\n    return s.p1 + base * r;\n}\n\nint ccw(const Point& p0, const Point& p1, const Point& p2) {\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if (cross(a, b) > 0.0) return COUNTER_CLOCKWISE;\n    if (cross(a, b) < 0.0) return CLOCKWISE;\n    if (dot(a, b) < 0) return ONLINE_BACK;\n    if (norm(a) < norm(b)) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\nPoint reflect(const Segment& s, const Point& p) {\n    return p + (project(s, p) - p) * 2.0;\n}\n\nreal_t getDistancePP(const Point& p1, const Point& p2) {\n    return len(p2 - p1);\n}\n\nreal_t getDistanceLP(const Line& l, const Point& p) {\n    return abs(cross(l.p2 - l.p1, p - l.p1) / len(l.p2 - l.p1));\n}\n\nreal_t getDistanceSP(const Segment& s, const Point& p) {\n    if (dot(s.p2 - s.p1, p - s.p1) < 0.0) return getDistancePP(p, s.p1);\n    if (dot(s.p1 - s.p2, p - s.p2) < 0.0) return getDistancePP(p, s.p2);\n    return getDistanceLP(s, p);\n}\n// }}}\n\nsigned main() {\n    ios_base::sync_with_stdio(false);\n    cin.tie(nullptr);\n    cout.setf(ios_base::fixed);\n    cout.precision(10);\n\n    var(Point, p0, p1);\n    var(size_t, Q);\n\n    while (Q--) {\n        var(Point, p2);\n        const int val = ccw(p0, p1, p2);\n        if (val == 1) {\n            output(\"COUNTER_CLOCKWISE\");\n        } else if (val == -1) {\n            output(\"CLOCKWISE\");\n        } else if (val == 2) {\n            output(\"ONLINE_BACK\");\n        } else if (val == -2) {\n            output(\"ONLINE_FRONT\");\n        } else {\n            output(\"ON_SEGMENT\");\n        }\n    }\n\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iomanip>\n#include<limits>\n#include<thread>\n#include<utility>\n#include<iostream>\n#include<string>\n#include<algorithm>\n#include<set>\n#include<map>\n#include<vector>\n#include<stack>\n#include<queue>\n#include<cmath>\n#include<math.h>\n#include<numeric>\n#include<cassert>\n#include<random>\n#include<deque>\n#include<chrono>\n#include<unordered_map>\n#include<list>\nusing namespace std;\ntypedef unsigned long long int ull;\ntypedef long long int ll;\ntypedef pair<ll,ll> pll;\ntypedef pair<int,int> pi;\ntypedef pair<double,double> pdl;\nconst ll E=1e18+7;\n#define F first\n#define S second\n#define MK make_pair\nconst ll MOD=1000000007;\n\ntemplate<typename T> //double or long long\nclass Geometry{\nprivate:\n    typedef pair<T,T> point;\n    typedef point Vector;\n    typedef pair<point,point> line;\n    vector<point> P;\n    \npublic:\n    Geometry(vector<point> P={}):P(P){}\n    \n    void add_point(point p){P.push_back(p);}\n    \n    void Sort(){\n        sort(P.begin(),P.end());\n    }\n    \n    //from first,to second\n    Vector line_Vector(line a){\n        return {a.S.F-a.F.F,a.S.S-a.F.S};\n    }\n    \n    T dot(line a,line b){\n        return dot(line_Vector(a),line_Vector(b));\n    }\n    \n    T dot(Vector a,Vector b){\n        return a.F*b.F+a.S*b.S;\n    }\n    \n    T cross(line a,line b){\n        return cross(line_Vector(a),line_Vector(b));\n    }\n    \n    T cross(Vector a,Vector b){\n        return a.F*b.S-a.S*b.F;\n    }\n    \n    T norm(line a){\n        return dot(a,a);\n    }\n    \n    T norm(Vector a){\n        return dot(a,a);\n    }\n    \n    double abs(line a){\n        return sqrt(norm(a));\n    }\n    \n    double abs(Vector a){\n        return sqrt(norm(a));\n    }\n    \n    //線分と点の距離\n    double abs(line l,point p){\n        if(dot(l,{l.F,p})<0){return abs(l.F,p);}\n        if(dot(reverse(l),{l.S,p})<0){return abs(l.S,p);}\n        return dist(l,p);\n    }\n    \n    double abs(line a,line b){\n        if(intersect(a,b)){return 0;}\n        return min(min(abs(a,b.F),abs(a,b.S)),\n        min(abs(b,a.F),abs(b,a.S)));\n    }\n    \n    point move(point p,Vector v){\n        return {p.F+v.F,p.S+v.S};\n    }\n    \n    Vector reverse(Vector v){return {-1*v.F,-1*v.S};}\n    \n    line reverse(line l){return {l.S,l.F};}\n    \n    Vector times(Vector v,T time){return {v.F*time,v.S*time};}\n    \n    Vector to_norm(Vector v,T norm){\n        T dist=norm(v);\n        return times(v,norm/dist);\n    }\n    \n    //ダブル型でのみ使うこと\n    Vector to_abs(Vector v,double abs){\n        return to_norm(v,abs);\n    }\n    \n    /*\n     aが基点\n     0::零ベクトルがある\n     1::重なっている\n     2::反対向き\n     3::反時計回り\n     4:: 時計回り\n     */\n    ll clockwise(Vector a,Vector b){\n        T C=cross(a,b);\n        T D=dot(a,b);\n        if(C==0 && D==0){return 0;}\n        if(C==0 && D>0){return 1;}\n        if(C==0 && D<0){return 2;}\n        if(C>0){return 3;}\n        return 4;\n    }\n    \n    ll clockwise(line a,line b){return clockwise(line_Vector(a),line_Vector(b));}\n    \n    vector<point> convex_hull(){\n        assert(P.size()>=3);\n        vector<point> a=P;\n        sort(a.begin(),a.end());\n        vector<point> up;\n        up.push_back(a[0]);\n        up.push_back(a[1]);\n        for(int i=2;i<a.size();i++){\n            point p=a[i];\n            while(up.size()>=2 && cross({up[up.size()-2],up[up.size()-1]},{up[up.size()-1],p})>=0){\n                up.pop_back();\n            }\n            up.push_back(p);\n        }\n        reverse(a.begin(),a.end());\n        vector<point> down;\n        down.push_back(a[0]);\n        down.push_back(a[1]);\n        for(int i=2;i<a.size();i++){\n            point p=a[i];\n            while(down.size()>=2 && cross({down[down.size()-2],down[down.size()-1]},{down[down.size()-1],p})>=0){\n                down.pop_back();\n            }\n            down.push_back(p);\n        }\n        vector<point> ret;\n        for(int i=0;i<up.size();i++){\n            ret.push_back(up[i]);\n        }\n        for(int i=1;i<down.size()-1;i++){\n            ret.push_back(down[i]);\n        }\n        return ret;\n    }\n    \n    T max_norm(){\n        vector<point> P=convex_hull();\n        T mx=0;\n        ll where=0;\n        for(int i=0;i<P.size();i++){\n            if(norm({P[0],P[i]})>=mx){mx=norm({P[0],P[i]}); where=i;}\n        }\n        mx=0;\n        for(int i=0;i<P.size();i++){\n            while(norm({P[i],P[where]})<=norm({P[i],P[(where+1)%P.size()]})){\n                where=(where+1)%P.size();\n            }\n            mx=max(mx,norm({P[i],P[where]}));\n        }\n        return mx;\n    }\n    \n    double max_dist(){return sqrt(max_norm());}\n    \n    //ダブル型でのみ使うこと\n    point shadow(line l,point p){\n        Vector base=line_Vector(l);\n        Vector P=line_Vector({l.F,p});\n        double r=dot(P,base)/norm(base);\n        return move(l.F,times(base,r));\n    }\n    \n    //qが中心\n    point reflection(point p,point q){\n        Vector m=line_Vector({p,q});\n        return move(q,m);\n    }\n    \n    point reflection(line l,point p){\n        point center=shadow(l,p);\n        return reflection(p,center);\n    }\n    \n    //直線と点の距離\n    double dist(line l,point p){\n        point q=shadow(l,p);\n        return abs(p,q);\n    }\n};\n\n\n/*\n aが基点\n 0::零ベクトルがある\n 1::重なっている\n 2::反対向き\n 3::反時計回り\n 4:: 時計回り\n */\n\nint main(){\n    cout<<fixed<<setprecision(12);\n    Geometry<ll> G;\n    ll x1,y1,x2,y2;\n    cin>>x1>>y1>>x2>>y2;\n    pll a={x1,y1};\n    pll b={x2,y2};\n    ll q;\n    cin>>q;\n    while(q--){\n        ll X,Y;\n        cin>>X>>Y;\n        pll c={X,Y};\n        ll ans=G.clockwise({a,b},{a,c});\n        if(ans==3){cout<<\"COUNTER_CLOCKWISE\"<<endl;}\n        else if(ans==4){cout<<\"CLOCKWISE\"<<endl;}\n        else if(ans==2){cout<<\"ONLINE_BACK\"<<endl;}\n        else if(G.abs({a,b})>=G.abs({a,c})){cout<<\"ON_SEGMENT\"<<endl;}\n        else{cout<<\"ONLINE_FRONT\"<<endl;}\n    }\n    \n    \n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i,n) for(int i = 0; i < (int)n; i++)\n\nconst double eps = 1e-10;\n\nstruct Point {\n  double x, y;\n  Point(double x = 0.0, double y = 0.0) : x(x), y(y) {}  \n  double norm() {return sqrt(x*x + y*y);}\n};\n\nPoint operator + (const Point &p, const Point &q) {return Point(p.x + q.x, p.y + q.y);}\nPoint operator - (const Point &p, const Point &q) {return Point(p.x - q.x, p.y - q.y);}\ndouble operator * (const Point &p, const Point q) {return p.x * q.x + p.y * q.y;}\nbool operator == (const Point &p, const Point &q) {return (abs(p.x - q.x) < eps && abs(p.y - q.y) < eps);}\nbool operator != (const Point &p, const Point &q) {return !(p == q);}\ndouble cross(const Point &p, const Point &q) {return p.x*q.y - p.y*q.x;}\n\nstruct Line_Segment {\n  Point p , q;\n  Line_Segment(Point p = Point(0.0,0.0), Point q = Point(0.0,0.0)) : p(p), q(q) {}\n};\n\nstruct Line {\n  double a, b, c;\n  Line(double a, double b, double c) : a(a), b(b), c(c) {}\n  Line(Point p, Point q) {\n    a = q.y - p.y;\n    b = p.x - q.x;\n    c = q.x * p.y - p.x * q.y;\n  }\n};\n\nstruct Circle {\n  double r;\n  Point p;\n  Circle(Point p = Point(0.0, 0.0), double r = 0.0) : p(p), r(r) {}\n};\n\n// 点と直線の距離\ndouble point_line_dist(Point p, Line l) {\n  return abs(l.a*p.x + l.b*p.y + l.c) / sqrt(l.a*l.a + l.b*l.b);\n}\n\n// 点の直線への射影\nPoint projection (Point p, Line l) {\n  double x = p.x - l.a * (l.a*p.x + l.b*p.y + l.c) / (l.a*l.a + l.b*l.b);\n  double y = p.y - l.b * (l.a*p.x + l.b*p.y + l.c) / (l.a*l.a + l.b*l.b);\n  return Point(x,y);\n}\n\n// 線対称な点\nPoint reflection(Point p, Line l) {\n  double x = p.x - 2.0 * l.a * (l.a*p.x + l.b*p.y + l.c) / (l.a*l.a + l.b*l.b);\n  double y = p.y - 2.0 * l.b * (l.a*p.x + l.b*p.y + l.c) / (l.a*l.a + l.b*l.b);\n  return Point(x,y);\n}\n\n// 点の線分からの回転方向\nint ccw(Point p, Point p1, Point p2) {\n  p1 = p1 - p; p2 = p2 - p;\n  if(cross(p1,p2) > eps) return 1; \n  if(cross(p1,p2) < -eps) return -1; \n  if(p1 * p2 < 0) return 2; \n  if(p1.norm() < p2.norm()) return -2; \n  return 0; \n}\n\n// 円と直線の交点\nvector<Point> circle_line_cross(Line l, Circle c) {\n  vector<Point> vp;\n  Point h;\n  h.x = c.p.x - l.a * (l.a*c.p.x + l.b*c.p.y + l.c) / (l.a*l.a + l.b*l.b);\n  h.y = c.p.y - l.b * (l.a*c.p.x + l.b*c.p.y + l.c) / (l.a*l.a + l.b*l.b);\n\n  double d = l.a*c.p.x + l.b*c.p.y + l.c;\n  double q = c.r*c.r - d*d / (l.a*l.a + l.b*l.b);\n  if(q >= eps) {\n    Point p1, p2;\n    p1.x = h.x + sqrt(q) * l.b / sqrt(l.a*l.a + l.b*l.b);\n    p1.y = h.y - sqrt(q) * l.a / sqrt(l.a*l.a + l.b*l.b);\n    p2.x = h.x - sqrt(q) * l.b / sqrt(l.a*l.a + l.b*l.b);\n    p2.y = h.y + sqrt(q) * l.a / sqrt(l.a*l.a + l.b*l.b);\n    vp.push_back(p1);\n    vp.push_back(p2);\n  } else if(abs(q) < eps) {\n    vp.push_back(h);\n  }\n  return vp;\n} \n\n// 線分の交差判定\nbool line_segment_cross(const Line_Segment l, const Line_Segment s) {\n  return ccw(l.p,l.q,s.p) * ccw(l.p,l.q,s.q) <= 0 && ccw(s.p,s.q,l.p) * ccw(s.p,s.q,l.q) <= 0;\n}\n\nint main() {\n  Point p0, p1;\n  cin >> p0.x >> p0.y >> p1.x >> p1.y;\n  int q;\n  cin >> q;\n  rep(i,q) {\n    Point p2;\n    cin >> p2.x >> p2.y;\n    int c = ccw(p0,p1,p2);\n    if(c == 1) cout << \"COUNTER_CLOCKWISE\" << endl;\n    else if(c == -1) cout << \"CLOCKWISE\" << endl;\n    else if(c == 2) cout << \"ONLINE_BACK\" << endl;\n    else if(c == -2) cout << \"ONLINE_FRONT\" << endl;\n    else cout << \"ON_SEGMENT\" << endl;\n  }\n  return 0;\n}\n\n\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define range(i,a,b) for(int i = (a); i < (b); i++)\n#define rep(i,b) for(int i = 0; i < (b); i++)\n#define all(a) (a).begin(), (a).end()\n#define debug(x) cout << \"debug \" << x << endl;\nconst int INF = 100000000;\nusing namespace std;\n\ntypedef complex<double> Point;\ntypedef Point Vector;\n//???????????¨????§???????\nstruct Segment{ Point p1, p2; };\n//??´????????¨????§???????\ntypedef Segment Line;\n//????§???¢?????¨????§???????\ntypedef vector<Point> Polygon;\n\nnamespace std{\n    bool operator < (const Point &a, const Point &b){\n        return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n    }\n    bool operator == (const Point &a, const Point &b){\n        return a.real() == b.real() && a.imag() == b.imag();\n    }\n}\n\nclass Circle{\npublic:\n    Point c;\n    double r;\n    Circle(Point c = Point(), double r = 0.0): c(c), r(r) {}\n};\n\n// ?¨±???????????????\n#define EPS (1e-10)\n// 2??????????????????????????????????????????\n//#define EQ(a,b) (abs((a)-(b)) < EPS)\n// 2??????????????????????????????????????????\n//#define EQV(a,b) ( EQ((a).real(), (b).real()) && EQ((a).imag(), (b).imag()) )\n\n// ????????????a?????¶??????????±???????\n//double length = abs(a);\n\n// 2???a,b???????????¢????±???????\n//double distance = abs(a-b);\n\n/*\n// ????????????a?????????????????????????±???????\nPoint b = a / abs(a);\n\n// ????????????a?????????????????????n1,n2????±???????\nPoint n1 = a * Point(0, 1);\nPoint n2 = a * Point(0, -1);\n*/\n\n// 2??????????????????????????????????????????\nbool EQ(double a, double b){\n    return (abs(a - b) < EPS);\n}\n\n// 2??????????????????????????????????????????\nbool EQV(Vector a, Vector b){\n    return ( EQ(a.real(), b.real()) && EQ(a.imag(), b.imag()) );\n}\n\n// ?????? (dot product) : a???b = |a||b|cos??\ndouble dot(Point a, Point b) {\n    return (a.real() * b.real() + a.imag() * b.imag());\n}\n\n// ?????? (cross product) : a??b = |a||b|sin??\ndouble cross(Point a, Point b) {\n    return (a.real() * b.imag() - a.imag() * b.real());\n}\n\n// 2??´????????´????????? : a??\\b <=> dot(a, b) = 0\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n    return EQ( dot(a1-a2, b1-b2), 0.0 );\n}\nbool isOrthogonal(Line s1, Line s2) {\n    return isOrthogonal(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\n// 2??´?????????????????? : a//b <=> cross(a, b) = 0\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n    return EQ( cross(a1-a2, b1-b2), 0.0 );\n}\nbool isParallel(Line s1, Line s2) {\n    return isParallel(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\n// ???c?????´???a,b????????????????????????\nbool isPointOnLine(Point a, Point b, Point c) {\n    return EQ( cross(b-a, c-a), 0.0 );\n}\nbool isPointOnLine(Line s, Point c) {\n    return isPointOnLine(s.p1, s.p2, c);\n}\n\n// ???a,b???????????´?????¨???c??¨????????¢\ndouble distanceLPoint(Point a, Point b, Point c) {\n    return abs(cross(b-a, c-a)) / abs(b-a);\n}\ndouble distanceLPoint(Line s, Point c) {\n    return distanceLPoint(s.p1, s.p2, c);\n}\n\n// ???a,b???????????¨??????????????¨???c??¨????????¢\ndouble distanceLsPoint(Point a, Point b, Point c) {\n    if ( dot(b-a, c-a) < EPS ) return abs(c-a);\n    if ( dot(a-b, c-b) < EPS ) return abs(c-b);\n    return abs(cross(b-a, c-a)) / abs(b-a);\n}\ndouble distanceLsPoint(Segment s, Point c) {\n    return distanceLsPoint(s.p1, s.p2, c);\n}\n\n// a1,a2???????????¨??????????????¨b1,b2???????????¨???????????????????????????\nbool isIntersectedLs(Point a1, Point a2, Point b1, Point b2) {\n    return ( cross(a2-a1, b1-a1) * cross(a2-a1, b2-a1) < EPS ) &&\n        ( cross(b2-b1, a1-b1) * cross(b2-b1, a2-b1) < EPS );\n}\nbool isIntersectedLs(Segment s1, Segment s2) {\n    return isIntersectedLs(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\n// a1,a2???????????¨??????????????¨b1,b2???????????¨??????????????????????¨????\nPoint intersectionLs(Point a1, Point a2, Point b1, Point b2) {\n    Point b = b2-b1;\n    double d1 = abs(cross(b, a1-b1));\n    double d2 = abs(cross(b, a2-b1));\n    double t = d1 / (d1 + d2);\n\n    return a1 + (a2-a1) * t;\n}\nPoint intersectionLs(Segment s1, Segment s2) {\n    return intersectionLs(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\n// a1,a2???????????´?????¨b1,b2???????????´??????????????????\nbool isIntersectedL(Point a1, Point a2, Point b1, Point b2) {\n    return !EQ( cross(a1-a2, b1-b2), 0.0 );\n}\nbool isIntersectedL(Line l1, Line l2) {\n    return isIntersectedL(l1.p1, l1.p2, l2.p1, l2.p2);\n}\n\n// a1,a2???????????´?????¨b1,b2???????????´?????????????¨????\nPoint intersectionL(Point a1, Point a2, Point b1, Point b2) {\n    Point a = a2 - a1; Point b = b2 - b1;\n    return a1 + a * cross(b, b1-a1) / cross(b, a);\n}\nPoint intersectionL(Line l1, Line l2) {\n    return intersectionL(l1.p1, l1.p2, l2.p1, l2.p2);\n}\n\n// ??????s1??¨??????s2????????¢\ndouble distanceLL(Segment s1, Segment s2){\n    if(isIntersectedLs(s1.p1, s1.p2, s2.p1, s2.p2) ) return 0.0;\n    return min(\n            min(distanceLsPoint(s1.p1, s1.p2, s2.p1),\n                distanceLsPoint(s1.p1, s1.p2, s2.p2)),\n            min(distanceLsPoint(s2.p1, s2.p2, s1.p1),\n                distanceLsPoint(s2.p1, s2.p2, s1.p2)) );\n}\n\n// ??????s???????????????p????°???±\nPoint project(Segment s, Point p){\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / norm(base);\n    return Point(s.p1 + base * r);\n}\n\n//??????s???????±??????¨?????????p??????????§°??????\nPoint reflect(Segment s, Point p){\n    return Point(p + (project(s, p) - p) * 2.0);\n}\n\n//???p???angle?????????????¨???????????????¢\nPoint rotation(Point p, double angle){\n    double x, y;\n    x = p.real() * cos(angle) - p.imag() * sin(angle);\n    y = p.real() * sin(angle) + p.imag() * cos(angle);\n    return Point(x, y);\n}\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nint ccw(Point p0, Point p1, Point p2){\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if( cross(a, b) > EPS ) return COUNTER_CLOCKWISE;\n    if( cross(a, b) < -EPS ) return CLOCKWISE;\n    if( dot(a, b) < -EPS ) return ONLINE_BACK;\n    if( abs(a) < abs(b) ) return ONLINE_FRONT;\n\n    return ON_SEGMENT;\n}\n\nint main(){\n    int n;\n    double a[6];\n    rep(i,4) cin >> a[i];\n\n    cin >> n;\n    while(n--){\n        cin >> a[4] >> a[5];\n        int p = ccw(Point(a[0], a[1]), Point(a[2], a[3]), Point(a[4], a[5]));\n        if(p == 1) cout << \"COUNTER_CLOCKWISE\" << endl;\n        else if(p == -1) cout << \"CLOCKWISE\" << endl;\n        else if(p == 2) cout << \"ONLINE_BACK\" << endl;\n        else if(p == -2) cout << \"ONLINE_FRONT\" << endl;\n        else cout << \"ON_SEGMENT\" << endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\nconst double EPS = 1e-8;\nconst double INF = 1e12;\nconst double PI = acos(-1);\n\nusing Point = complex<double>;\nusing Polygon = vector<Point>;\n\ninline int sgn(const double &a) { return (a < -EPS ? -1 : (a > EPS ? 1 : 0)); }\n\ninline bool eq(const Point &a, const Point &b) { return abs(a - b) < EPS; }\n\ninline bool operator<(const Point &a, const Point &b) {\n    if (sgn(a.real() - b.real()))\n        sgn(a.real() - b.real()) < 0;\n    return sgn(a.imag() - b.imag());\n}\n\ndouble dot(const Point &a, const Point &b) { return real(conj(a) * b); }\n\ndouble det(const Point &a, const Point &b) { return imag(conj(a) * b); }\n\nstruct Line {\n    Point p1, p2;\n\n    Line(Point p1 = Point(), Point p2 = Point()) : p1(p1), p2(p2) {}\n\n    bool operator<(const Line &rhs) const {\n        if (eq(p2, rhs.p2))\n            return p1 < rhs.p1;\n        return p2 < rhs.p2;\n    }\n    bool operator==(const Line &rhs) const {\n        return (eq(p1, rhs.p1) && eq(p2, rhs.p2)) ||\n               (eq(p1, rhs.p2) && eq(p2, rhs.p1));\n    }\n};\n\nenum CCW {\n    ONLINE_FRONT = -2,\n    CLOCKWISE,\n    ON_SEGMENT,\n    COUNTER_CLOCKWISE,\n    ONLINE_BACK\n};\n\nint ccw(Point p0, Point p1, Point p2){\n    Point a = p1 - p0;\n    Point b = p2 - p0;\n    if(sgn(det(a, b)) == 1) return COUNTER_CLOCKWISE;\n    if(sgn(det(a, b)) == -1)return CLOCKWISE;\n    if(sgn(dot(a, b)) == -1)return ONLINE_BACK;\n    if(sgn(norm(b)-norm(a)) == 1)return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\nint main(){\n    double x0, y0, x1, y1;\n    cin >> x0 >> y0 >> x1 >> y1;\n    Point p0 = Point(x0, y0), p1 = Point(x1, y1);\n    int q;\n    cin >> q;\n    for(int i=0;i<q;++i){\n        double x2, y2;\n        cin >> x2 >> y2;\n        switch(ccw(p0, p1, Point(x2,y2))){\n            case ONLINE_FRONT:\n                cout << \"ONLINE_FRONT\";\n                break;\n            case CLOCKWISE:\n                cout << \"CLOCKWISE\";\n                break;\n            case ON_SEGMENT:\n                cout << \"ON_SEGMENT\";\n                break;\n            case COUNTER_CLOCKWISE:\n                cout << \"COUNTER_CLOCKWISE\";\n                break;\n            case ONLINE_BACK:\n                cout << \"ONLINE_BACK\";\n                break;\n        }\n        cout << endl;\n    }\n\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "\n#include<iostream>\n#include<vector>\n#include<algorithm>\n#include<string>\n#include<complex>\n#include<cstdio>\n#include<cstdlib>\n#include<ctime>\n#include<queue>\n#include<iomanip>\n#include<bitset>\n#include<utility>\n#include<list>\n#include<map>\n#include<set>\n#include<cstring>\n#include<sstream>\n#include<cctype>\nusing namespace std;\nconst double EPS=1e-8;\nconst double INF=1e9;\ntypedef complex<double>P;\nnamespace std{\n    bool operator<(const P& a,const P& b){\n        return real(a)!=real(b)?real(a)<real(b):imag(a)<imag(b);\n    }\n}\n#define EQ(a,b) (fabs((a)-(b))<EPS)\n#define EQV(a,b) (EQ(real(a),real(b))&&EQ(imag(a),imag(b)))\ndouble cross(const P &a,const P &b){\n    return imag(conj(a)*b);\n}\ndouble dot(const P &a,const P &b){\n    return real(conj(a)*b);\n}\n\nstruct L:public vector<P>{\n    L(const P a,const P b){\n        push_back(a);push_back(b);\n    }\n    L(){}\n};\n\ntypedef vector<P>G;\n\nstruct C{\n    P p;double r;\n    C(const P p_,double r_):p(p_),r(r_){}\n    C(){}\n};\n\nint ccw(P a,P b,P c){\n    b-=a;c-=a;\n    if(cross(b,c)>0)return 1;///counter clockwise\n    if(cross(b,c)<0)return -1;///clockwise\n    if(dot(b,c)<0)return 2;///c--a--b on line\n    if(norm(b)<norm(c))return -2;///a--b--c on line\n    return 0;\n}\nbool orthogonal(P &p,P &q){\n    return EQ(dot(p,q),0.0);\n}\nbool intersectLL(const L &l,const L &m){\n    return abs(cross(l[1]-l[0],m[1]-m[0]))>EPS||///non-parallel\n        abs(cross(l[1]-l[0],m[0]-l[0]))<EPS;///same line\n}\nbool intersectLS(const L &l,const L &s){\n    return cross(l[1]-l[0],s[0]-l[0])*///s[0] is left of l\n        cross(l[1]-l[0],s[1]-l[0])<EPS;///s[1] is right of l\n}\nbool intersectLP(const L &l,const P &p){\n    return abs(cross(l[1]-p,l[0]-p))<EPS;\n}\nbool intersectSS(const L &s,const L &t){\n    return ccw(s[0],s[1],t[0])*ccw(s[0],s[1],t[1])<=0&&\n        ccw(t[0],t[1],s[0])*ccw(t[0],t[1],s[1])<=0;\n}\nbool intersectSP(const L &s,const P &p){\n    return abs(abs(s[0]-p)+abs(s[1]-p)-abs(s[1]-s[0]))<EPS;\n    ///triangle inequality\n}\nP projection(const L &l,const P &p){\n    double t=dot(p-l[0],l[0]-l[1])/norm(l[0]-l[1]);\n    return l[0]+t*(l[0]-l[1]);\n}\nP reflection(const L &l,const P &p){\n    return p+(projection(l,p)-p)*2.0;\n}\ndouble distanceLP(const L &l,const P &p){\n    return abs(p-projection(l,p));\n}\ndouble distanceLL(const L &l,const L &m){\n    return intersectLL(l,m)?0:distanceLP(l,m[1]);\n}\ndouble distanceLS(const L &l,const L &s){\n    if(intersectLS(l,s))return 0;\n    return min(distanceLP(l,s[0]),distanceLP(l,s[1]));\n}\ndouble distanceSP(const L &s,const P &p){\n    const P r=projection(s,p);\n    if(intersectSP(s,r))return abs(r-p);\n    return min(abs(s[0]-p),abs(s[1]-p));\n}\ndouble distanceSS(const L &s,const L &t){\n    if(intersectSS(s,t))return 0;\n    return min(min(distanceSP(s,t[0]),distanceSP(s,t[1])),\n            min(distanceSP(t,s[0]),distanceSP(t,s[1])));\n}\nP crossPoint(const L &l,const L &m){\n    double A=cross(l[1]-l[0],m[1]-m[0]);\n    double B=cross(l[1]-l[0],l[1]-m[0]);\n    if(abs(A)<EPS&&abs(B)<EPS)return m[0];///same line\n    ///if(abs(A)<EPS)assert(false);\n    return m[0]+B/A*(m[1]-m[0]);\n\n}\n\nP extreme(const G &g,const L &l){\n    int k=0;\n    for(int i=1;i<g.size();i++){\n        if(dot(g[i],l[1]-l[0])>dot(g[k],l[1]-l[0]))k=i;\n    }\n    return g[k];\n}\n\nG andrewScan(G s){\n    G u,l;\n    if(s.size()<3)return s;\n    sort(s.begin(),s.end());\n    u.push_back(s[0]);\n    u.push_back(s[1]);\n\n    l.push_back(s[s.size()-1]);\n    l.push_back(s[s.size()-2]);\n\n    for(int i=2;i<s.size();i++){\n        for(int n=u.size();n>=2&&ccw(u[n-2],u[n-1],s[i])!=-1;n--){\n            u.pop_back();\n        }\n        u.push_back(s[i]);\n    }\n\n    for(int i=s.size()-3;i>=0;i--){\n        for(int n=l.size();n>=2&&ccw(l[n-2],l[n-1],s[i])!=-1;n--){\n            l.pop_back();\n        }\n        l.push_back(s[i]);\n    }\n    reverse(l.begin(),l.end());\n    for(int i=u.size()-2;i>=1;i--)l.push_back(u[i]);\n    return l;\n}\n/*\nIN 2\nON 1\nOUT 0\n*/\nint contains(G g,P p){\n    int n=g.size();\n    bool x=false;\n    for(int i=0;i<n;i++){\n        P a=g[i]-p,b=g[(i+1)%n]-p;\n        if(abs(cross(a,b))<EPS&&dot(a,b)<EPS)return 1;\n        if(imag(a)>imag(b))swap(a,b);\n        if(imag(a)<EPS&&EPS<imag(b)&&cross(a,b)>EPS)x=!x;\n    }\n    return (x?2:0);\n}\n\n\nint main(){\n    P a,b;\n    scanf(\"%lf%lf%lf%lf\",&a.real(),&a.imag(),&b.real(),&b.imag());\n    int n;\n    scanf(\"%d\",&n);\n    while(n--){\n        P c;\n        scanf(\"%lf%lf\",&c.real(),&c.imag());\n        int res=ccw(a,b,c);\n        if(res==1)puts(\"COUNRER_CLOCKWISE\");\n        else if(res==-1)puts(\"CLOCKWISE\");\n        else if(res==2)puts(\"ONLINE_BACK\");\n        else if(res==-2)puts(\"ONLINE_FRONT\");\n        else puts(\"ON_SEGMENT\");\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <complex>\n\nusing namespace std;\n\nconst double eps = 1e-12;\ntypedef complex<double> Point;\n\nostream& operator<<(ostream& os, const Point& p){\n    return os <<  p.real() << \" \" << p.imag();\n}\n\ninline double cross(const Point& a, const Point& b){\n    return imag(conj(a) * b);\n}\n\ninline double dot(const Point& a, const Point& b){\n    return real(conj(a) * b);\n}\n\nint ccw(Point a, Point b, Point c){\n    b -= a; c -= a;\n    if(cross(b, c) > eps) return  1;\n    if(cross(b, c) < -eps)return -1;\n    if(dot(b, c) < 0)     return  2;\n    if(norm(b) < norm(c)) return -2;\n    return 0;\n}\n\nint main(){\n    int x0, y0, x1, y1;\n    cin >> x0 >> y0 >> x1 >> y1;\n    Point p0(x0, y0), p1(x1, y1);\n    auto state = [](int x){switch(x){\n        case  1: return \"COUNTER_CLOCKWISE\";\n        case -1: return \"CLOCKWISE\";\n        case  2: return \"ONLINE_BACK\";\n        case -2: return \"ONLINE_FRONT\";\n        case  0: return \"ON_SEGMENT\";\n    }};\n    int q;\n    cin >> q;\n    while(q--){\n        int x2, y2;\n        cin >> x2 >> y2;\n        cout << state(ccw(p0, p1, Point(x2, y2))) << '\\n';\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nconst int dx[]={0,1,0,-1,1,-1,-1,1};\nconst int dy[]={-1,0,1,0,1,1,-1,-1};\nconst int INF = 1<<30;\nconst double EPS = 1e-15;\n#define PB push_back\n#define mk make_pair\n#define fi first\n#define se second\n#define ll long long\n#define reps(i,j,k) for(int i = (j); i < (k); i++)\n#define rep(i,j) reps(i,0,j)\n#define MOD 1000000007\ntypedef pair<int,int> Pii;\ntypedef pair<int,Pii> P;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\nstruct Point{\n\tdouble x,y;\n\tPoint(){}\n\tPoint(double _x,double _y){\n\t\tx = _x;\n\t\ty = _y;\n\t}\n\tPoint operator + (Point p){\n\t\treturn Point(x+p.x,y+p.y);\n\t}\n\n\tPoint operator - (Point p){\n\t\treturn Point(x-p.x,y-p.y);\n\t}\n\n\tPoint operator * (double k){\n\t\treturn Point(k*x,k*y);\n\t}\n\n\n\tbool operator<(const Point &p)const{\n\t\treturn x!=p.x?x<p.x:y<p.y;\n\t}\t\n};\ndouble dot(Point p, Point q){\n\treturn p.x*q.x+p.y*q.y;\n}\n\ndouble cross(Point p,Point q){\n\treturn p.x*q.y-q.x*p.y;\n}\n\ndouble norm(Point p){\n\treturn p.x*p.x+p.y*p.y;\n}\n\ndouble pabs(Point p){\n\treturn sqrt(norm(p));\n}\ntypedef vector<Point> Polygon;\nstruct Line : Polygon{\n\tLine(){}\n\tLine(Point p,Point q){\n\t\tPB(p);\n\t\tPB(q);\t\n\t}\n};\nstruct Circle{\n\tPoint p;\n\tdouble r;\n\tCircle(){}\n\tCircle(Point _p,double _r){\n\t\tp = _p;\n\t\tr = _r;\n\t}\n};\nint ccw(Point a,Point b,Point c){\n\tb = b-a;\n\tc = c-a;\n\tif(cross(b,c) > 0)return +1; //ccw\n\tif(cross(b,c) < 0)return -1; //cw\n\tif(pabs(b)<pabs(c))return +2; //a--b--c\n\tif(dot(b,c) < 0)return -2; // c--a--b;\n\treturn 0;\n}\n\nstring ccw_s(Point a,Point b,Point c){\n\tb = b-a;\n\tc = c-a;\n\tif(cross(b,c) > 0)return \"COUNTER_CLOCKWISE\"; //ccw\n\tif(cross(b,c) < 0)return \"CLOCKWISE\"; //cw\n\tif(dot(b,c) < 0)return \"ONLINE_BACK\"; // c--a--b;\n\tif(norm(b)<norm(c))return \"ONLINE_FRONT\"; //a--b--c\n\treturn \"ON_SEGMENT\";\n}\n\nint main(){\n\tdouble xp0,yp0,xp1,yp1;\n\tcin >> xp0 >> yp0 >> xp1 >> yp1;\n\tPoint p1 = Point(xp0,yp0);\n\tPoint p2 = Point(xp1,yp1);\n\tint Q;\n\tcin >> Q;\n\twhile(Q--){\n\t\tdouble x,y;\n\t\tcin >> x >> y;\n\t\tPoint p3 = Point(x,y);\n\t\tcout << ccw_s(p1,p2,p3) << \"\\n\";\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <map>\n#include <vector>\n#include <cmath>\n#include <iomanip>\n#include <string>\n#include <queue>\n#include <algorithm>\n#include <cctype>\n#define shosu(x) fixed<<setprecision(x)\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> P;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef vector<P> vp;\ntypedef vector<vp> vvp;\ntypedef pair<int,P> pip;\ntypedef vector<pip> vip;\ntypedef pair<double,double> pdd;\nconst int inf=1<<30;\nconst double pi=acos(-1);\nconst double eps=1e-8;\n\nstruct point{\n\tdouble x,y;\n\tpoint operator+(point Gep){\n\t\treturn point{x+Gep.x,y+Gep.y};\n\t}\n\tpoint operator-(point Gep){\n\t\treturn point{x-Gep.x,y-Gep.y};\n\t}\n\tpoint operator*(double Gex){\n\t\treturn point{x*Gex,y*Gex};\n\t}\n\tpoint operator/(double Gex){\n\t\tif(!Gex) return point{0,0}; \n\t\treturn point{x/Gex,y/Gex};\n\t}\n\tbool operator==(point Gep){\n\t\treturn fabs(x-Gep.x)<eps&&fabs(y-Gep.y)<eps;\n\t}\n};\n\nclass Geom{\n\tpublic:\n\tvector<point> Ge;\n\tvector<pair<point,point> > Geseg,Geline;\n\tvoid line_push(point Gex,point Gey){\n\t\tGeline.push_back(make_pair(Gex,Gey));\n\t}\n\tvoid point_push(point Gex){\n\t\tGe.push_back(Gex);\n\t}\n\tpdd POI(pdd Gea,pdd Geb,pdd Gec,pdd Ged){\n\t\treturn pdd(3,4);\n\t}\n\tdouble IP(point Gex,point Gey){\n\t\treturn Gex.x*Gey.x+Gex.y*Gey.y;\n\t}\n\tdouble CP(point Gex,point Gey){\n\t\treturn Gex.x*Gey.y-Gey.x*Gex.y;\n\t}\n\tdouble LEN(point Gex){\n\t\treturn sqrt(Gex.x*Gex.x+Gex.y*Gex.y);\n\t}\n\tpoint PRO(pair<point,point> Gea,point Gex){\n\t\tpoint Ge1=Gex-Gea.second,Ge2=Gea.first-Gea.second;\n\t\treturn Ge2*(IP(Ge1,Ge2)/(LEN(Ge2)*LEN(Ge2)))+Gea.second;\n\t}\n\tpoint REF(pair<point,point> Gea,point Gex){\n\t\tpoint Ge1=PRO(Gea,Gex);\n\t\treturn Ge1*2-Gex;\n\t}\n\tint JUD(point Gea,point Geb,point Gex){\n\t\tif(Gea==Geb||Gex==Geb) return 0;\n\t\tpoint Ge1=Gea-Gex,Ge2=Geb-Gex;\n\t\tdouble Getmp=CP(Ge1,Ge2);\n\t\tif(Getmp>0) return 1;\n\t\tif(Getmp<0) return 2;\n\t\tif(LEN(Ge1-Ge2)>LEN(Ge1)) return 3;\n\t\tif(LEN(Ge1)<LEN(Ge2)) return 4;\n\t\treturn 5;\n\t}\n\tpair<point,point> line_open(int Gex){\n\t\treturn Geline[Gex];\n\t}\n\tpoint point_open(int Gex){\n\t\treturn Ge[Gex];\n\t}\n};\n\nint q;\ndouble x,xx,y,yy,xxx,yyy;\n\nint main(){\n\tcout<<shosu(10);\n\tcin>>x>>y>>xx>>yy>>q;\n\tfor(int i=0;i<q;i++){\n\t\tcin>>xxx>>yyy;\n\t\tGeom geo;\n\t\tgeo.point_push(point{x,y});\n\t\tgeo.point_push(point{xx,yy});\n\t\tint ans=geo.JUD(geo.point_open(1),point{xxx,yyy},geo.point_open(0));\n\t\tif(ans==1) cout<<\"COUNTER_CLOCKWISE\"<<endl;\n\t\telse if(ans==2) cout<<\"CLOCKWISE\"<<endl;\n\t\telse if(ans==3) cout<<\"ONLINE_BACK\"<<endl;\n\t\telse if(ans==4) cout<<\"ONLINE_FRONT\"<<endl;\n\t\telse cout<<\"ON_SEGMENT\"<<endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < (EPS))\n\n#define COUNTER_CLOCKWISE (1)\n#define CLOCKWISE (-1)\n#define ONLINE_BACK (2)\n#define ONLINE_FRONT (-2)\n#define ON_SEGMENT (0)\n\nstruct Point \n{\n  double x, y;\n  \n  Point() {}\n  \n  Point(double x, double y) : x(x), y(y) {}\n  \n  void input() { scanf(\"%lf %lf\", &x, &y); }\n  void output() { printf(\"%.10f %.10f\\n\", x, y); }\n  double abs() { return (sqrt(norm())); }\n  double norm() { return (x * x + y * y); }\n  \n  Point operator + (Point d) { return (Point(x + d.x, y + d.y)); }\n  Point operator - (Point d) { return (Point(x - d.x, y - d.y)); }\n  Point operator - () { return (Point(-x, -y)); }\n  Point operator * (double a) { return (Point(x * a, y * a)); }\n  Point operator / (double a) { return (Point(x / a, y / a)); }\n  \n};\n\nstruct Segment\n{\n  Point p1, p2;\n  \n  Segment() {}\n  Segment(Point p1, Point p2) : p1(p1), p2(p2) {}\n\n  void input() { p1.input(); p2.input(); }\n  \n};\n\ntypedef Point Vector;\ntypedef vector < Point > Polygon;\ntypedef Segment Line;\n\ndouble dot(Vector a, Vector b)\n{\n  return (a.x * b.x + a.y * b.y);\n}\n\ndouble cross(Vector a, Vector b)\n{\n  return (a.x * b.y - a.y * b.x);\n}\n\nPoint project(Line l, Point p)\n{\n  Vector base = l.p2 - l.p1;\n  return (l.p1 + base * (dot(p - l.p1, base) / base.norm()));\n}\n\nPoint reflect(Line l, Point p)\n{\n  return (-p + project(l, p) * 2.0);\n}\n\ndouble getDistanceLP(Line l, Point p)\n{\n  return (abs(cross(l.p2 - l.p1, p - l.p1) / (l.p2 - l.p1).abs()));\n}\n\ndouble getDistanceSP(Segment s, Point p)\n{\n  if(dot(s.p2 - s.p1, p - s.p1) < 0.0) return ((p - s.p1).abs());\n  if(dot(s.p1 - s.p2, p - s.p2) < 0.0) return ((p - s.p2).abs());\n  return (getDistanceLP(s, p));\n}\n\ndouble getDistance(Segment s1, Segment s2)\n{\n  return (0.0);\n}\n\nint ccw(Point p0, Point p1, Point p2)\n{\n  Vector a = p1 - p0, b = p2 - p0;\n  \n  if(cross(a, b) > EPS) return (COUNTER_CLOCKWISE);\n  if(cross(a, b) < -EPS) return (CLOCKWISE);\n  if(dot(a, b) < -EPS) return (ONLINE_BACK);\n  if(a.norm() < b.norm()) return (ONLINE_FRONT);\n  \n  return (ON_SEGMENT);\n}\n  \n\nmain()\n{\n  int n;\n  Point p0, p1;\n  \n  p0.input(); p1.input();\n  cin >> n;\n  for(int i = 0; i < n; i++) {\n    \n    Point p2;\n    int ans;\n    \n    p2.input();\n    ans = ccw(p0, p1, p2);\n    \n    if(ans == 0) cout << \"ON_SEGMENT\" << endl;\n    else if(ans == 1) cout << \"COUNTER_CLOCKWISE\" << endl;\n    else if(ans == 2) cout << \"ONLINE_BACK\" << endl;\n    else if(ans == -1) cout << \"CLOCKWISE\" << endl;\n    else if(ans == -2) cout << \"ONLINE_FRONT\" << endl;\n\n  }\n\n  return (0);\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> P;\n\ndouble eps = 1e-9;\n\nstring ccw(P a,P b,P c){\n  P ab=b-a;\n  P ac=c-a;\n  P k=ac*conj(ab);\n  cout<< k.real() <<' '<< k.imag() <<endl;\n  \n  if( k.imag() > eps ){\n    return \"COUNTER_CLOCKWISE\";\n  }\n  if( k.imag() < -eps ){\n    return \"CLOCKWISE\";\n  }\n  if( k.real() < -eps ){\n    return \"ONLINE_BACK\";\n  }  \n  if( abs(ab)+eps < abs(ac) ){\n    return \"ONLINE_FRONT\";\n  }\n  return \"ON_SEGMENT\";\n}\n\nint main(){\n  \n  double x0,y0,x1,y1,x2,y2;\n  cin>>x0>>y0>>x1>>y1;\n  P a(x0,y0);\n  P b(x1,y1);\n  int n;\n  cin>>n;\n  while(n--){\n    cin>>x2>>y2;\n    P c(x2,y2);\n    cout<< ccw(a,b,c) <<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n// conj(x) : complex conjugate,(0,1)->(0,-1)\n// abs(x) : dist between(0,0) and x\n// norm(x) : abs(x) * abs(x)\n// arg(x) : argment,[-PI,PI]\nusing CP = complex<long double>;\n#define X real()\n#define Y imag()\nconst long double PI = acos(-1.0L);\nconst long double EPS = 1e-10;\n// cos a\nlong double costh(long double a, long double b,\n                  long double c) {\n  return (b * b + c * c - a * a) / (2.0L * b * c);\n}\n\n// dot(a,b) = |a||b|cos x\nlong double dot(CP a, CP b) { return (conj(a) * b).X; }\n// cross(a,b) : area of parallelogram\n// sign : a-> b ,counter clockwise? + : -\nlong double cross(CP a, CP b) { return (conj(a) * b).Y; }\nlong double corner(CP a, CP b) {\n  //[0,PI]\n  return acos(dot(a, b) / (abs(a) * abs(b)));\n}\n\nCP projection(CP s, CP t, CP p) {\n  CP base = t - s;\n  long double r = dot(p - s, base) / norm(base);\n  return s + base * r;\n}\n\nCP reflection(CP s, CP t, CP p) {\n  CP tmp = (projection(s, t, p) - p);\n  tmp *= 2;\n  return p + tmp;\n}\n\nCP intersectionLL(CP a, CP b, CP c, CP d) {\n  return a + (b - a) * (cross(d - c, c - a) /\n                        cross(d - c, b - a));\n}\n\nbool on_seg(CP s, CP t, CP p) {\n  // if not use end point, dot(s - p, t - p) < 0\n  return abs(cross(s - p, t - p)) <= 1e-10 &&\n         dot(s - p, t - p) <= 0;\n}\n\n// crossing lines? (a,b) and (c,d)\nbool iscross(CP a, CP b, CP c, CP d) {\n  // parallel\n  if(abs(cross(a - b, c - d)) <= 1e-10) {\n    return on_seg(a, b, c) || on_seg(a, b, d) ||\n           on_seg(c, d, a) || on_seg(c, d, b);\n  }\n  CP isp = intersectionLL(a, b, c, d);\n  return on_seg(a, b, isp) && on_seg(c, d, isp);\n}\n\nlong double distLP(CP s, CP t, CP p) {\n  return abs(cross(t - s, p - s) / abs(t - s));\n}\n\n// segmentver.\nlong double distSP(CP s, CP t, CP p) {\n  if(dot(t - s, p - s) < 0) return abs(p - s);\n  if(dot(s - t, p - t) < 0) return abs(p - t);\n  return distLP(s, t, p);\n}\n\n// segment and segment\nlong double distSS(CP a, CP b, CP c, CP d) {\n  long double res = 1e18;\n  if(iscross(a, b, c, d)) return 0.0L;\n  res = min(res, distSP(a, b, c));\n  res = min(res, distSP(a, b, d));\n  res = min(res, distSP(c, d, a));\n  res = min(res, distSP(c, d, b));\n  return res;\n}\n\n// counter clockwise\nbool is_convex(const vector<CP> &v) {\n  int n = v.size();\n  for(int i = 0; i < n; ++i)\n    if(cross(v[(i + 1) % n] - v[i],\n             v[(i + 2) % n] - v[(i + 1) % n]) < -EPS)\n      return 0;\n  return 1;\n}\n\nvector<CP> convex_hull(vector<CP> &ps) {\n  auto lmd = [&](const CP &l, const CP &r) {\n    if(l.X != r.X) return l.X < r.X;\n    return l.Y < r.Y;\n  };\n  vector<CP> qs;\n  int psize = ps.size();\n  sort(ps.begin(), ps.end(), lmd);\n  int k = 0;\n  qs.resize(psize * 2);\n  for(int i = 0; i < psize; ++i) {\n    while(k > 1 && cross(qs[k - 1] - qs[k - 2],\n                         ps[i] - qs[k - 1]) <= 0)\n      --k;\n    qs[k++] = ps[i];\n  }\n  for(int i = psize - 2, t = k; i >= 0; --i) {\n    while(k > t && cross(qs[k - 1] - qs[k - 2],\n                         ps[i] - qs[k - 1]) <= 0)\n      --k;\n    qs[k++] = ps[i];\n  }\n  qs.resize(k - 1);\n  return qs;\n}\n\nlong double convex_diameter(vector<CP> &newv) {\n  vector<CP> v = convex_hull(newv);\n  int n = v.size(), i = 0, j = 0;\n  if(n == 2) return abs(v[0] - v[1]);\n  for(int k = 0; k < n; ++k) {\n    if(v[k].X < v[i].X) i = k;\n    if(v[k].X > v[j].X) j = k;\n  }\n  long double res = 0;\n  int si = i, sj = j;\n  while(i != sj || j != si) {\n    res = max(res, abs(v[i] - v[j]));\n    if(cross(v[(i + 1) % n] - v[i], v[(j + 1) % n] - v[j]) <\n       0)\n      (++i) %= n;\n    else\n      (++j) %= n;\n  }\n  return res;\n}\n\nvector<CP> convex_cut(const vector<CP> &v, const CP &s,\n                      const CP &t) {\n  vector<CP> res;\n  int n = v.size();\n  for(int i = 0; i < n; ++i) {\n    CP nows = v[i], nowt = v[(i + 1) % n];\n    if(cross(t - s, nows - s) >= -EPS) res.push_back(nows);\n    if(cross(t - s, nows - s) * cross(t - s, nowt - s) < 0)\n      res.push_back(intersectionLL(s, t, nows, nowt));\n  }\n  return res;\n}\n\nstruct Circle {\n  CP o;\n  long double r;\n  Circle(long double _x = 0.0L, long double _y = 0.0L,\n         long double _r = 0.0L)\n      : o(CP(_x, _y)), r(_r) {}\n  Circle(CP _o, long double _r = 0.0) : o(_o), r(_r) {}\n};\n\nvoid intersectionCC(Circle c1, Circle c2, CP &res1,\n                    CP &res2) {\n  long double d = abs(c1.o - c2.o);\n  long double arg = acos(costh(c2.r, c1.r, d));\n  res1 = (c2.o - c1.o) * CP(cos(arg), sin(arg));\n  res1 *= c1.r / abs(res1);\n  res1 += c1.o;\n  res2 = reflection(c1.o, c2.o, res1);\n  if(res1.X > res2.X ||\n     (res1.X == res2.X && res1.Y > res2.Y))\n    swap(res1, res2);\n}\n\nvoid intersectionCL(Circle ci, CP s, CP t, CP &res1,\n                    CP &res2) {\n  res1 = res2 = projection(s, t, ci.o);\n  long double r = sqrtl(ci.r * ci.r - norm(res1 - ci.o));\n  t -= s;\n  t *= r / abs(t);\n  res1 += t;\n  res2 -= t;\n  if(res1.X > res2.X ||\n     (res1.X == res2.X && res1.Y > res2.Y))\n    swap(res1, res2);\n}\n\nvoid contactCP(Circle ci, CP p, CP &res1, CP &res2) {\n  long double d = abs(ci.o - p);\n  if(abs(d - ci.r) <= EPS) {\n    res1 = res2 = p;\n    return;\n  }\n  else if(d < ci.r) {\n    res1 = res2 = CP(-1e18, -1e18);\n    return;\n  }\n  long double arg = asin(ci.r / d);\n  res1 = (ci.o - p) * CP(cos(arg), sin(arg));\n  res1 *= (d * cos(arg)) / abs(res1);\n  res1 += p;\n  res2 = reflection(p, ci.o, res1);\n  if(res1.X > res2.X ||\n     (res1.X == res2.X && res1.Y > res2.Y))\n    swap(res1, res2);\n}\n\nlong double polygonarea(const vector<CP> &v) {\n  int n = v.size();\n  long double res = 0;\n  for(int i = 0; i < n; ++i)\n    res +=\n        (v[(i - 1 + n) % n].X - v[(i + 1) % n].X) * v[i].Y;\n  return res / 2.0L;\n}\n\nlong long calc_clockwise(CP s, CP t, CP p) {\n  t -= s;\n  p -= s;\n  if(cross(t, p) > EPS) return 1;   // \"COUNTER_CLOCKWISE\"\n  if(cross(t, p) < -EPS) return -1; //\"CLOCK_WISE\"\n  if(dot(t, p) < 0) return 2;       // ONLINE_BACK\n  if(norm(t) < norm(p)) return -2;  // ONLINE_FRONT\n  return 0;                         // ON_SEGMENT\n}\n\nlong long q;\nCP xs, xt, ys, yt, tmps, tmpt;\n\nint main() {\n  long long a, b, c, d;\n  cin >> a >> b >> c >> d;\n  tmps = xs = CP(a, b);\n  tmpt = xt = CP(c, d);\n  cin >> q;\n  for(int t = 0; t < q; ++t) {\n    xs = tmps;\n    xt = tmpt;\n    cin >> a >> b;\n    yt = CP(a, b);\n    long long res = calc_clockwise(xs, xt, yt);\n    if(res == 0)\n      cout << \"ON_SEGMENT\" << endl;\n    else if(res == 2)\n      cout << \"ONLINE_BACK\" << endl;\n    else if(res == -2)\n      cout << \"ONLINE_FRONT\" << endl;\n    else if(res == 1)\n      cout << \"COUNTER_CLOCKWISE\" << endl;\n    else\n      cout << \"CLOCKWISE\" << endl;\n  }\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\nusing namespace std;\n#include<cstdio>\n#include<complex>\n\ntypedef double type_n;\ntypedef complex<type_n> point;\n\nvoid ccw(const point &a, const point &c, const point &z)\n{\n    point w;\n    w = conj(c) * (z - a);\n\ttype_n re = w.real(), im = w.imag();\n\tif(im != 0){\n\t\t(im > 0 ? printf(\"COUNTER_CLOCKWISE\\n\") : printf(\"CLOCKWISE\\n\"));\n        return;\n\t}else{\n        if(re < 0){ printf(\"ONLINE_BACK\\n\"); return; }\n        if(re > norm(c)){ printf(\"ONLINE_FRONT\\n\"); return; }\n\t}\n    printf(\"ON_SEGMENT\\n\");\n    return;\n}\n\nint main()\n{\n    point a, b, c, z;\n    int i, q;\n    type_n a1, a2, b1, b2, z1, z2;\n    scanf(\"%lf %lf %lf %lf\", &a1, &a2, &b1, &b2);\n    a.real(a1), a.imag(a2), b.real(b1), b.imag(b2);\n    c = b - a;\n\n    scanf(\"%d\", &q);\n    for(i = 0; i < q; i++){\n        scanf(\"%lf %lf\", &z1, &z2);\n        z.real(z1), z.imag(z2);\n        ccw(a, c, z);\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "//Counter-Clockwise\n//#include<bits/stdc++.h>\n//#pragma GCC optimize(3,\"Ofast\",\"inline\")\n#include<iostream>\n#include<string>\n#include<algorithm>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<vector>\n//#include<random>\n#include<cstdlib>\n#include<ctime>\n#include<fstream>\n#include<map>\n#include<stack>\n#include<queue>\n#define FAST ios::sync_with_stdio(false)\n#define DEV_RND ((int)rand()*RAND_MAX+rand())\n#define RND(L,R) (DEV_RND%((R)-(L)+1)+(L))\n//#define abs(a) ((a)>=0?(a):-(a))\n#define sz(x) ((int)(x).size())\n#define all(x) (x).begin(),(x).end()\n#define mem(a,b) memset(a,b,sizeof(a))\n#define max(a,b) ((a)>(b)?(a):(b))\n#define min(a,b) ((a)<(b)?(a):(b))\n#define rep(i,a,n) for(int i=a;i<n;++i)\n#define repn(i,a,n,t) for(int i=a;i<n;i+=t)\n#define per(i,n,a) for(int i=n-1;i>=a;--i)\n#define pern(i,n,a,t) for(int i=n-1;i>=a;i-=t)\n#define pb push_back\n#define mp make_pair\n#define fi first\n#define se second\n#define li inline\n#define re register\nusing namespace std;\n//typedef uniform_int_distribution<int> RNDI;\ntypedef pair<int,int> PII;\ntypedef vector<int> VI;\ntypedef double db;\ntypedef long long ll;\ntypedef long double ld;\nconst int maxn = 1e5+5;\nconst int maxm = 100000+5;\nconst int inf=0x3f3f3f3f;\nconst double eps = 1e-9;\nconst double pi=acos(-1);\nconst int mod = 1e9+7;\n//int dir[4][2]={{-1,0},{1,0},{0,-1},{0,1}};\n//li int f(int x){return x==par[x]?par[x]:par[x]=f(par[x]);}\n//mt19937 eng(time(0));\nli ll lowbit(ll x){return x&(-x);}\nll gcd(ll a,ll b){return b?gcd(b,a%b):a;}\n//li int RND(int L,int R){RNDI rnd(L,R);return rnd(eng);}\nvoid ex_gcd(ll a,ll b,ll &d,ll &x,ll &y){if(!b){d=a,x=1,y=0;}else{ex_gcd(b,a%b,d,y,x);y-=x*(a/b);}}//x=(x%(b/d)+(b/d))%(b/d);\nli ll qpow(ll a,ll b,ll MOD=mod){ll res=1;a%=MOD;while(b>0){if(b&1)res=res*a%MOD;a=a*a%MOD;b>>=1;}return res;}\nli ll qmul(ll a,ll b,ll MOD=mod){return (a*b-(ll)((long double)a/MOD*b)*MOD+MOD)%MOD;}\nli ll Qpow(ll a,ll b,ll MOD){ll res=1;while(b>0){if(b&1) res=qmul(res,a,MOD);a=qmul(a,a,MOD);b>>=1;}return res;}\nli ll inv(ll x,ll p){return qpow(x,p-2,p);}\nli ll Jos(ll n,ll k,ll s=1){ll res=0;rep(i,1,n+1) res=(res+k)%i;return (res+s)%n;}\nli void debug(){ofstream fout(\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\in.txt\");fout.close();}\nnamespace IO\n{\n\tli int read()\n\t{\n\t\tint x=0,sign=1;char c=getchar();\n\t\twhile(c>'9'||c<'0') {if(c=='-') sign=-1;c=getchar();}\n\t\twhile('0'<=c&&c<='9') x=x*10+c-'0',c=getchar();\n\t\treturn x*sign;\n\t}\n\ttemplate<typename T>\n\tli void write(T x,char t='\\n')\n\t{\n\t\tif(x<0){x=-x;putchar('-');};\n\t\tstatic int sta[25];int top=0;\n\t\tdo{sta[top++]=x%10,x/=10;}while(x);\n\t\twhile(top) putchar(sta[--top]+'0');\n\t\tputchar(t);\n\t}\n}\nusing namespace IO;\n/*-------------head-------------*/\nli int sign(db k){return k<-eps?-1:k>eps;}\nli int cmp(db a,db b){return sign(a-b);}\nli bool inmid(db l,db m,db r){return sign(l-m)*sign(r-m)<=0;}\n//点类 \nstruct P\n{\n\tdb x,y;\n\tP(){}\n\tP(db _x,db _y):x(_x),y(_y){}\n\tP operator + (const P& a) const {return (P){x+a.x,y+a.y};}\n\tP operator - (const P& a) const {return (P){x-a.x,y-a.y};}\n\tP operator * (db a) const {return (P){x*a,y*a};}\n\tP operator / (db a) const {return (P){x/a,y/a};}\n\tbool operator < (const P& a)const\n\t{return cmp(x,a.x)?cmp(x,a.x)==-1:cmp(y,a.y)==-1;}\n\tbool operator == (const P& a)const\n\t{return cmp(x,a.x)==0&&cmp(y,a.y)==0;}\n\tdb alpha(){return atan2(y,x);}\n\tdb abs2(){return x*x+y*y;}\n\tdb abs(){return sqrt(abs2());}\n\tdb disTo(P a){return (*this-a).abs();}\n\tdb dot(P a){return x*a.x+y*a.y;}\n\tdb det(P a){return x*a.y-y*a.x;}\n\tP unit(){return *this/abs();}\n\tP rot(db an){return (P){x*cos(an)-y*sin(an),x*sin(an)+y*cos(an)};}\n\tP rot90(){return (P){-y,x};}\n\tint quad() const {return sign(y)==1||(sign(y)==0&&sign(x)>=0);}\n\tvoid read(){db _x,_y;scanf(\"%lf%lf\",&_x,&_y);x=_x;y=_y;}\n\tvoid write(){printf(\"%.10f %.10f\\n\",x,y);}\n};\nbool angcmp(P a,P b){return a.quad()!=b.quad()?a.quad()<b.quad():sign(a.det(b))==-1;}\nbool inmid(P a,P m,P b){return inmid(a.x,m.x,b.x)&&inmid(a.y,m.y,b.y);}\ndb rad(P a,P b){return atan2l(a.det(b),a.dot(b));}\ndb cro(P q,P p1,P p2){return (p1.x-q.x)*(p2.y-q.y)-(p1.y-q.y)*(p2.x-q.x);}\nint croOp(P q,P p1,P p2){return sign(cro(q,p1,p2));}\n//线段相交\nbool intersect(db l1,db r1,db l2,db r2)\n{\n\tif(l1>r1)swap(l1,r1);if(l2>r2)swap(l2,r2);\n\treturn !(cmp(r1,l2)==-1||cmp(r2,l1)==-1);\n}\nbool isSS(P p1,P p2,P q1,P q2)\n{\n\treturn intersect(p1.x,p2.x,q1.x,q2.x)&&intersect(p1.y,p2.y,q1.y,q2.y)\n\t&&croOp(p1,p2,q1)*croOp(p1,p2,q2)<=0\n\t&&croOp(q1,q2,p1)*croOp(q1,q2,p2)<=0;\n}\nbool isSS_strict(P p1,P p2,P q1,P q2)\n{\n\treturn croOp(p1,p2,q1)*croOp(p1,p2,q2)<0\n\t&&croOp(q1,q2,p1)*croOp(q1,q2,p2)<0;\n}\n//点在线段上\nbool onSeg(P p1,P p2,P q)\n{\n\treturn croOp(p1,p2,q)==0&&inmid(p1,q,p2);\n}\nbool onSeg_strict(P p1,P p2,P q)\n{\n\treturn croOp(p1,p2,q)==0&&sign((q-p1).dot(p2-p1))*sign((q-p2).dot(p2-p1))<0;\n}\nP p1,p2,q;\nint n; \nli void solve()\n{\n\tp1.read(),p2.read();\n\tn=read();\n\twhile(n--)\n\t{\n\t\tq.read();\n\t\tif(croOp(p1,p2,q)==1) puts(\"COUNTER_CLOCKWISE\");\n\t\telse if(croOp(p1,p2,q)==-1) puts(\"CLOCKWISE\");\n\t\telse\n\t\t{\n\t\t\tif(inmid(p1,q,p2)) puts(\"ON_SEGMENT\");\n\t\t\telse if((p2-p1).dot(q-p1)<0) puts(\"ONLINE_BACK\");\n\t\t\telse puts(\"ONLINE_FRONT\");\n\t\t}\n\t}\n\t//puts(\"\");\n}\nint main()\n{\n\t//srand(time(0));debug();\n\t//clock_t start_time=clock();\n\t//freopen(\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\in.txt\",\"r\",stdin);\n\tsolve();\n\t//while(~scanf(\"%d\",&n)) solve();\n\t//cerr<<\"Time:\"<<clock()-start_time<<\"ms\\n\";\n\treturn 0;\n} \n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<complex>\n#define x real() \n#define y imag()\nusing namespace std;\ntypedef complex<double> point;\nstring ccw(point a,point b,point c){\n  b-=a;\n  c-=a;\n  c*=conj(b);\n  if(c.y>0)return \"COUNTER_CLOCKWISE\";  \n  if(c.y<0)return \"CLOCKWISE\";\n  if(c.x>abs(a)*abs(b))return \"ONLINE_FRONT\";\n  if(c.x<0)return \"ONLINE_BACK\";\n  return \"ON_SEGMENT\";\n}\nint main(){\n  double x0,y0,x1,y1;\n  cin>>x0>>y0>>x1>>y1;\n  point a=point(x0,y0);\n  point b=point(x1,y1);\n  int q;\n  cin>>q;\n  for(int i=0;i<q;i++){\n    double xp,yp;\n    cin>>xp>>yp;\n    point c=point(xp,yp);\n    cout<<ccw(a,b,c)<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <math.h>\n#include <map>\n\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a)-(b)) < EPS)\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ONLINE_SEGMENT = 0;\n\nmap<int, string> ccwMap{\n\t{ COUNTER_CLOCKWISE, \"COUNTER_CLOCKWISE\" },\n\t{ CLOCKWISE, \"CLOCKWISE\"},\n\t{ ONLINE_BACK, \"ONLINE_BACK\"},\n\t{ ONLINE_FRONT ,\"ONLINE_FRONT\"},\n\t{ ONLINE_SEGMENT , \"ONLINE_SEGMENT\"} \n};\n\nclass Point{\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0) :x(x), y(y){}\n\n\tPoint operator + (Point p){ return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p){ return Point(x - p.x, y - p.y); }\n\tPoint operator * (Point p){ return Point(x * p.x, y * p.y); }\n\tPoint operator / (Point p){ return Point(x / p.x, y / p.y); }\n\n\tPoint operator * (double t){ return Point(x * t, y * t); }\n\tPoint operator / (double t){ return Point(x / t, y / t); }\n\n\n\tdouble abs(){ return sqrt(norm()); }\n\tdouble norm(){ return x * x + y * y; }\n\n\tbool operator<(const Point &p){ return (x != p.x) ? (x < p.x) : (y < p.y); }\n\tbool operator==(const Point &p)\n\t{\n\t\treturn equals(x, p.x) && equals(y, p.y);\n\t}\n};\n\ntypedef Point Vector;\n\nclass Segment{\npublic:\n\tPoint p1, p2;\n};\n\ntypedef Segment Line;\n\ndouble dot(Vector a, Vector b){\n\treturn a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b){\n\treturn a.x * b.y - a.y * b.x;\n}\n\nbool isOrthogonal(Vector a, Vector b){\n\treturn equals(dot(a, b), 0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2){\n\treturn isOrthogonal(a1 - a2, b1 - b2);\n}\n\nbool isParallel(Vector a, Vector b){\n\treturn equals(cross(a, b), 0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2){\n\treturn isParallel(a1 - a2, b1 - b2);\n}\n\nPoint projection(Segment s, Point p){\n\tVector v1 = s.p2 - s.p1;\n\tVector v2 = p - s.p1;\n\treturn s.p1 + v1 * dot(v1, v2) / v1.norm();\n}\n\nPoint reflection(Segment s, Point p){\n\treturn p + (projection(s, p) - p) * 2.0;\n}\n\ndouble dist_p_p(Point p1, Point p2){\n\treturn Vector(p1 - p2).abs();\n}\n\ndouble dist_p_l(Line l, Point p){\n\tVector v1 = p - l.p1;\n\tVector v2 = l.p2 - l.p1;\n\treturn cross(v1, v2) / v2.abs();\n}\n\ndouble dist_p_s(Segment s, Point p){\n\tif (dot(p - s.p1, s.p2 - s.p1) < EPS) return (p - s.p1).abs();\n\tif (dot(p - s.p2, s.p1 - s.p2) < EPS) return (p - s.p2).abs();\n\treturn dist_p_l(s, p);\n}\n\n/*\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n*/\n\nint ccw(Point p0, Point p1, Point p2){\n\tVector v1 = p1 - p0;\n\tVector v2 = p2 - p0;\n\tdouble c = cross(v1, v2);\n\tif (c > EPS) return COUNTER_CLOCKWISE;\n\tif (c < -EPS) return CLOCKWISE;\n\tdouble d = dot(v1, v2);\n\tif (d < -EPS) return ONLINE_BACK;\n\tif (v1.norm() < v2.norm()) return ONLINE_FRONT;\n\treturn ONLINE_SEGMENT;\n}\n\ndouble dist_s_s(Segment s1, Segment s2){\n\treturn 0;\n}\n\nint main()\n{\n\tstd::ios_base::sync_with_stdio(false);\n\tcout.precision(20);\n\n\tPoint p0, p1;\n\tcin >> p0.x >> p0.y >> p1.x >> p1.y;\n\n\tint q; cin >> q;\n\tfor (int i = 0; i < q; ++i){\n\t\tPoint p2; cin >> p2.x >> p2.y;\n\t\tint res = ccw(p0, p1, p2);\n\t\tcout << ccwMap[res] << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> Point;\ntypedef pair<Point, Point> Line;\nconst double EPS = 1e-9;\n\n// 内積 |a||b|cosθ\ndouble dot(Point a, Point b){\n\t// return a.real() * b.real() + a.imag() * b.imag();\n\treturn (conj(a) * b).real();\n}\n// 外積、符号付面積の２倍　|a||b|sinθ\ndouble cross(Point a, Point b){\n\t// return a.real() * b.imag() - a.imag() * b.real();\n\treturn (conj(a) * b).imag();\n}\n// 点の位置関係　2点a,bから見た点cの位置関係\nint ccw(Point a, Point b, Point c){\n    if(cross(b - a, c - a) > EPS) return 1;\n    if(cross(b - a, c - a) < -EPS) return -1;\n    if(dot(b - a, c - a) < -EPS) return 2;\n    if(abs(b - a) + EPS < abs(c - a)) return -2;\n    return 0;\n}\n\nint main(){\n    double x, y;\n    Point p1, p2;\n    cin >> x >> y;\n    p1 = {x, y};\n    cin >> x >> y;\n    p2 = {x, y};\n    Line l = {p1, p2};\n    int q;\n    cin >> q;\n    for(int i = 0; i < q; i++){\n        cin >> x >> y;\n        Point p3 = {x, y};\n        int res = ccw(p1, p2, p3);\n        if(res == 1){\n            cout << \"COUNTER_CLOCKWISE\" << endl;\n        }else if(res == -1){\n            cout << \"CLOCKWISE\" << endl;\n        }else if(res == 2){\n            cout << \"ONLINE_BACK\" << endl;\n        }else if(res == -2){\n            cout << \"ONLINE_FRONT\" << endl;\n        }else{\n            cout << \"ON_SEGMENT\" << endl;\n        }\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <map>\n#include <vector>\n#include <cmath>\n#include <iomanip>\n#include <string>\n#include <queue>\n#include <algorithm>\n#include <cctype>\n#define shosu(x) fixed<<setprecision(x)\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> P;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef vector<P> vp;\ntypedef vector<vp> vvp;\ntypedef pair<int,P> pip;\ntypedef vector<pip> vip;\ntypedef pair<double,double> pdd;\nconst int inf=1<<30;\nconst double pi=acos(-1);\nconst double eps=1e-8;\n\nstruct point{\n\tdouble x,y;\n\tpoint operator+(point Gep){\n\t\treturn point{x+Gep.x,y+Gep.y};\n\t}\n\tpoint operator-(point Gep){\n\t\treturn point{x-Gep.x,y-Gep.y};\n\t}\n\tpoint operator*(double Gex){\n\t\treturn point{x*Gex,y*Gex};\n\t}\n\tpoint operator/(double Gex){\n\t\tif(!Gex) return point{0,0}; \n\t\treturn point{x/Gex,y/Gex};\n\t}\n\tbool operator==(point Gep){\n\t\treturn fabs(x-Gep.x)<eps&&fabs(y-Gep.y)<eps;\n\t}\n};\n\nclass Geom{\n\tprivate:\n\tvector<point> Ge;\n\tvector<pair<point,point> > Geseg,Geline;\n\tpublic:\n\tvoid line_push(point Gex,point Gey){\n\t\tGeline.push_back(make_pair(Gex,Gey));\n\t}\n\tvoid seg_push(point Gex,point Gey){\n\t\tGeseg.push_back(make_pair(Gex,Gey));\n\t}\n\tvoid point_push(point Gex){\n\t\tGe.push_back(Gex);\n\t}\n\tpoint DIP(pair<point,point> Gex,pdd Gey){\n\t\tdouble Gea=Gey.first,Geb=Gey.second;\n\t\tpoint Ge1=Gex.first,Ge2=Gex.second;\n\t\treturn (Ge1*Geb+Ge2*Gea)/(Gea+Geb);\n\t}\n\tpoint POI(pair<point,point>Gex,pair<point,point> Gey){\n\t\tpair<point,point> Ge1={PRO(Gex,Gey.first),PRO(Gex,Gey.second)};\n\t\tpdd Ger={EXTLEN(Gey.first,Ge1.first),EXTLEN(Gey.second,Ge1.second)};\n\t\treturn DIP(Ge1,Ger);\n\t}\n\tdouble IP(point Gex,point Gey){\n\t\treturn Gex.x*Gey.x+Gex.y*Gey.y;\n\t}\n\tdouble CP(point Gex,point Gey){\n\t\treturn Gex.x*Gey.y-Gey.x*Gex.y;\n\t}\n\tdouble LEN(point Gex){\n\t\treturn sqrt(Gex.x*Gex.x+Gex.y*Gex.y);\n\t}\n\tdouble EXTLEN(point Gex,point Gey){\n\t\treturn LEN(Gex-Gey);\n\t}\n\tpoint PRO(pair<point,point> Gea,point Gex){\n\t\tpoint Ge1=Gex-Gea.second,Ge2=Gea.first-Gea.second;\n\t\treturn Ge2*(IP(Ge1,Ge2)/(LEN(Ge2)*LEN(Ge2)))+Gea.second;\n\t}\n\tpoint REF(pair<point,point> Gea,point Gex){\n\t\tpoint Ge1=PRO(Gea,Gex);\n\t\treturn Ge1*2-Gex;\n\t}\n\tint JUD(point Gea,point Geb,point Gex){\n\t\tif(Gea==Geb||Gex==Geb) return 0;\n\t\tpoint Ge1=Gea-Gex,Ge2=Geb-Gex;\n\t\tdouble Getmp=CP(Ge1,Ge2);\n\t\tif(Getmp>0) return 1;\n\t\tif(Getmp<0) return 2;\n\t\tif(IP(Ge1,Ge2)<0) return 3;\n\t\tif(LEN(Ge1)<LEN(Ge2)) return 4;\n\t\treturn 5;\n\t}\n\tpair<point,point> line_open(int Gex){\n\t\treturn Geline[Gex];\n\t}\n\tpoint point_open(int Gex){\n\t\treturn Ge[Gex];\n\t}\n\tpair<point,point> seg_open(int Gex){\n\t\treturn Geseg[Gex];\n\t}\n};\n\nint q;\ndouble x,xx,y,yy,xxx,yyy;\n\nint main(){\n\tcout<<shosu(10);\n\tcin>>x>>y>>xx>>yy>>q;\n\tfor(int i=0;i<q;i++){\n\t\tcin>>xxx>>yyy;\n\t\tGeom geo;\n\t\tgeo.point_push(point{x,y});\n\t\tgeo.point_push(point{xx,yy});\n\t\tint ans=geo.JUD(geo.point_open(1),point{xxx,yyy},geo.point_open(0));\n\t\tif(ans==1) cout<<\"COUNTER_CLOCKWISE\"<<endl;\n\t\telse if(ans==2) cout<<\"CLOCKWISE\"<<endl;\n\t\telse if(ans==3) cout<<\"ONLINE_BACK\"<<endl;\n\t\telse if(ans==4) cout<<\"ONLINE_FRONT\"<<endl;\n\t\telse cout<<\"ON_SEGMENT\"<<endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<algorithm>\n#include<iostream>\n#include<vector>\n#include<climits>\n#include<cfloat>\n#define curr(P, i) P[(i) % P.size()]\n#define next(P, i) P[(i+1) % P.size()]\n#define prev(P, i) P[(i+P.size()-1) % P.size()]\n\nusing namespace std;\n\ndouble EPS = 1e-10;\nconst double PI = acos(-1);\n\ndouble add(double a, double b){\n  if(abs(a+b) < EPS * (abs(a)+abs(b)))return 0;\n  return a+b;\n}\n\nstruct point{\n  double x, y;\n  point(){}\n  point(double x,double y) : x(x) , y(y){}\n\n  point operator + (point p){\n    return point(add(x,p.x), add(y,p.y));\n  }\n\n  point operator - (point p){\n    return point(add(x,-p.x), add(y,-p.y));\n  }\n\n  point operator * (double d){\n    return point(x*d,y*d);\n  }\n\n  point operator / (double d){\n    return point(x/d,y/d);\n  }\n};\n\ntypedef point Vector;\n\ndouble dot(point a, point b) {\n  return (a.x * b.x + a.y * b.y);\n}\n\ndouble cross(point a, point b) {\n  return (a.x * b.y - a.y * b.x);\n}\n\ndouble norm(point a){\n  return sqrt(a.x*a.x+a.y*a.y);\n}\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nint ccw( point p0, point p1, point p2 ){\n  Vector a=p1-p0;\n  Vector b=p2-p0;\n  if (cross(a,b)>EPS) return COUNTER_CLOCKWISE;\n  if (cross(a,b)<-EPS) return CLOCKWISE;\n  if (dot(a, b)<-EPS) return ONLINE_BACK;\n  if (norm(a)<norm(b)) return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\nint main(void){\n  point a,b,c;\n  int q;\n  cin >> a.x >> a.y >> b.x >> b.y;\n  cin >> q;\n  while(q--){\n    cin >> c.x >> c.y;\n    int res=ccw(a,b,c);\n    if(res==COUNTER_CLOCKWISE)cout << \"COUNTER_CLOCKWISE\" << endl;\n    else if(res==CLOCKWISE)cout << \"CLOCKWISE\" << endl;\n    else if(res==ONLINE_BACK)cout << \"ONLINE_BACK\" << endl;\n    else if(res==ONLINE_FRONT)cout << \"ONLINE_FRONT\" << endl;\n    else if(res==ON_SEGMENT)cout << \"ON_SEGMENT\" << endl;\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\nusing namespace std;\n#include<cstdio>\n#include<cmath>\n\nstruct Point{ double x, y; };\n\nPoint set_p(double a, double b)\n{\n    Point p;\n    p.x = a; p.y = b;\n    return p;\n}\n\nstruct Vector{ double vx, vy; };\n\nVector set_v(const Point &p1, const Point &p2)\n{\n    Vector v;\n    v.vx = p2.x - p1.x;\n    v.vy = p2.y - p1.y;\n    return v;\n}\n\ndouble dot(const Vector &v1, const Vector &v2)\n{\n    return (v1.vx * v2.vx) + (v1.vy * v2.vy);\n}\n\ndouble cross(const Vector &v1, const Vector &v2)\n{\n\treturn (v1.vx * v2.vy) - (v1.vy * v2.vx);\n}\n\ndouble onenorm(const Vector &v)\n{\n\treturn abs(v.vx) + abs(v.vy);\n}\n\nint ccw(const Point &P0, const Point &P1, const Point &P2)\n{\n\tVector V1 = set_v(P0, P1);\n\tVector V2 = set_v(P0, P2);\n\tdouble c = cross(V1, V2);\n\tif(c > 0){ return 1; }else if(c < 0){ return -1; }\n\tif(dot(V1, V2) < 0){ return -2; }\n\tif(onenorm(V1) < onenorm(V2)){ return 2; }\n\treturn 0;\n}\n\nint main()\n{\n    double x0, x1, y0, y1;\n    scanf(\"%lf %lf %lf %lf\", &x0, &y0, &x1, &y1);\n    Point P0 = set_p(x0, y0);\n    Point P1 = set_p(x1, y1);\n\tint val;\n\n    double x2, y2;\n    int q;\n    scanf(\"%d\", &q);\n    for(int i = 0; i < q; i++){\n        scanf(\"%lf %lf\", &x2, &y2);\n        Point P2 = set_p(x2, y2);\n        val = ccw(P0, P1, P2);\n        switch(val){\n            case 1:\n                printf(\"COUNTER_CLOCKWISE\\n\");\n                break;\n            case -1:\n                printf(\"CLOCKWISE\\n\");\n                break;\n            case -2:\n                printf(\"ONLINE_BACK\\n\");\n                break;\n            case 2:\n                printf(\"ONLINE_FRONT\\n\");\n                break;\n            default:\n                printf(\"ON_SEGMENT\\n\");\n        }\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <string>\n#include <vector>\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<stack>\n#include<queue>\n#include<cmath>\n#include<algorithm>\n#include<functional>\n//--\n#include<list>\n#include<deque>\n#include<bitset>\n#include<set>\n#include<map>\n#include<cstdio>\n#include<cstring>\n#include<sstream>\n#include<complex>\n#define X first\n#define Y second\n#define pb push_back\n#define rep(X,Y) for (int (X) = 0;(X) < (Y);++(X))\n#define rrep(X,Y) for (int (X) = Y-1;(X) >=0;--(X))\n#define all(X) (X).begin(),(X).end()\n#define rall(X) (X).rbegin(),(X).rend()\n\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> pii;\ntypedef complex<double> pt;\n\ndouble dot(pt a,pt b){return (conj(a)*b).real();}\ndouble cros(pt a,pt b){return (conj(a)*b).imag();}\npt proj(pt a,pt to){\n  return dot(a,to)/norm(to)*to;\n}\n\npt refle(pt a,pt mirror){\n  return pt(2)*proj(a,mirror)-a;\n}\n\nint pt3(pt a,pt b,pt c){\n  pt p=b-a,q=c-a;\n  double tmp;\n  tmp=cros(p,q);\n  if(tmp>1e-20){\n    return 0;\n  }else if(tmp<-1e-20){\n    return 1;\n  }else if(norm(p+q)<max(norm(p),norm(q))){\n    return 2;\n  }else if(norm(q)>norm(p)){\n    return 3;\n  }else if(norm(q)<norm(p)){\n    return 4;\n  }\n  return 5;\n}\nint main(){\n  int i,j,k,n;\n  pt o,p,q;\n // cout<<cros(pt(1,0),pt(0,-1))<<endl;\n  cin>>o.real()>>o.imag()>>p.real()>>p.imag();\n  cin>>n;\n  char str[][100]={\"COUNTER_CLOCKWISE\",\"CLOCKWISE\",\"ONLINE_BACK\"\n    ,\"ONLINE_FRONT\",\"ON_SEGMENT\"};\n  double a,b;\n  rep(i,n){\n    cin>>a>>b;\n    q=pt(a,b);\n    printf(\"%s\\n\",str[pt3(0,p,q)]);\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <vector>\n#include <algorithm>\n#include <iostream>\n#include <cstdio>\n#include <cmath>\n#include <climits>\n\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\n//???\nclass Point {\npublic:\n    double x, y;\n    \n    Point (double x = 0, double y = 0):x(x), y(y){}\n    Point operator + (Point p){return Point(x + p.x, y + p.y);}\n    Point operator - (Point p){return Point(x - p.x, y - p.y);}\n    Point operator * (double a){return Point(a * x, a * y);}\n    Point operator / (double a){return Point(x / a, y / a);}\n    \n    double norm(){return x*x + y*y;};\n    double absolute(){return sqrt(norm());};\n    \n    bool operator < (const Point &p) const{\n        return x != p.x ? x < p.x : y < p.y;\n    }\n    \n    bool operator == (const Point &p) const{\n        return equals(x, p.x) && equals(y, p.y);\n    }\n    \n};\ntypedef Point Vector;                               //????????????\ntypedef struct Segment{Point p1, p2;}Segment;       //??????\ntypedef Segment Line;                               //??´???\n//????????????a????????????\ndouble norm(Vector a){\n    return a.x * a.x + a.y * a.y;\n}\n//????????????a?????§??????\ndouble absolute(Vector a){\n    return sqrt(norm(a));\n}\n\n//????????????a,b?????????\ndouble dot(Vector a, Vector b){\n    return a.x * b.x + a.y * b.y;\n}\n//????????????a,b?????????\ndouble cross(Vector a, Vector b){\n    return a.x * b.y - a.y * b.x;\n}\n\n//??????p0, p1, p2???????????????????????????p0p1???????????????p2??????????????????\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\nint ccw(Point p0, Point p1, Point p2){\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if(cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n    if(cross(a, b) < -EPS) return CLOCKWISE;\n    if(dot(a, b) < -EPS) return ONLINE_BACK;\n    if(norm(a) < norm(b)) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\nint main(){\n    \n    int x0, y0, x1, y1, x2, y2;\n    \n    int q;\n    \n    cin >> x0 >> y0 >> x1 >> y1;\n    cin >> q;\n    \n    Point p0 = Point(x0, y0);\n    Point p1 = Point(x1, y1);\n    \n    for (int i = 0; i < q; i++) {\n        cin >> x2 >> y2;\n        Point p2 = Point(x2, y2);\n        \n        int ans = ccw(p0, p1, p2);\n        \n        if(ans == COUNTER_CLOCKWISE) cout << \"COUNTER_CLOCKWISE\" << endl;\n        if(ans == CLOCKWISE) cout << \"CLOCKWISE\" << endl;\n        if(ans == ONLINE_BACK) cout << \"ONLINE_BACK\" << endl;\n        if(ans == ONLINE_FRONT) cout << \"ONLINE_FRONT\" << endl;\n        if(ans == ON_SEGMENT) cout << \"ON_SEGMENT\" << endl;\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<climits>\n#include<iomanip>\n#include<cstdio>\n#include<vector>\n#include<queue>\n#include<stack>\n#include<cmath>\n#include<list>\n#include<map>\n#include<set>\nusing namespace std;\n\ntypedef vector<int> VI;\ntypedef vector<VI> VVI;\ntypedef vector<string> VS;\ntypedef stack<int> SI;\ntypedef queue<int> QI;\ntypedef list<int> LI;\ntypedef pair<int,int> PII;\ntypedef long long LL;\n\n#define d(x)  cout<<#x<<\" = \"<<(x)<<endl;\n#define ALL(a)  (a).begin(),(a).end()\n#define RALL(a) (a).rbegin(), (a).rend()\n#define PB push_back\n#define MP make_pair\n#define EMP empty()\n#define SZ(a) int((a).size())\n#define EACH(i,c) for(typeof((c).begin()) i=(c).begin(); i!=(c).end(); ++i)\n#define REACH(i,c) for(typeof((c).rbegin()) i=(c).rbegin(); i!=(c).rend(); ++i)\n#define EXIST(s,e) ((s).find(e)!=(s).end())\n#define SORT(c,n) sort(c,c+n)\n#define VSORT(c) sort((c).begin(),(c).end())\n#define FOR(i,a,b) for(int i=(a);i<(b);++i)\n#define REP(i,n)  FOR(i,0,n)\n#define DFOR(i,b,a) for(int i=(b)-1;i>=(a);--i)\n#define DREP(i,n) DFOR(i,n,0)\n#define INF 1000000000\n#define PI  acos(-1.0)\n////////////////////////////////////////////////\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\nclass Vector\n{\npublic:\n\tdouble x,y;\n\tVector(double x=0,double y=0):x(x),y(y){}\n\t\n\tVector operator + (Vector p){return Vector(x+p.x,y+p.y);}\n\tVector operator - (Vector p){return Vector(x-p.x,y-p.y);}\n\tVector operator * (double a){return Vector(x*a,y*a);}\n\tVector operator / (double a){return Vector(x/a,y/a);}\n\t\n\tdouble abs(){return sqrt(norm());}\n\tdouble norm(){return x*x+y*y;}\n\t\n\tbool operator <  (const Vector &p)const{return x!=p.x?x<p.x:y<p.y;}\n\tbool operator == (const Vector &p)const{return fabs(x-p.x)<EPS && fabs(y-p.y<EPS);}\n};\n\ndouble dot(Vector a,Vector b){return a.x*b.x+a.y*b.y;}\ndouble cross(Vector a,Vector b){return a.x*b.y-b.x*a.y;}\n\nint ccw(Vector p0,Vector p1,Vector p2)\n{\n\tVector a=p1-p0;\n\tVector b=p2-p0;\n\tif(cross(a,b)>EPS)return 1;//???????¨???????\n\tif(cross(a,b)<-EPS)return -1;//????¨???????\n\tif(dot(a,b)<-EPS)return 2;//p0?????????\n\tif(a.norm()<b.norm())return -2;//p1????\\\\\n\treturn 0;//?????????\n}\n\nint main()\n{\n\tVector p0,p1,p2;\n\tcin>>p0.x>>p0.y>>p1.x>>p1.y;\n\tint n;cin>>n;\n\tREP(i,n)\n\t{\n\t\tcin>>p2.x>>p2.y;\n\t\tint j=ccw(p0,p1,p2);\n\t\tif(j==1)cout<<\"COUNTER_CLOCKWISE\"<<endl;\n\t\telse if(j==-1)cout<<\"CLOCKWISE\"<<endl;\n\t\telse if(j==2)cout<<\"ONLINE_BACK\"<<endl;\n\t\telse if(j==-2)cout<<\"ONLINE_FRONT\"<<endl;\n\t\telse cout<<\"ON_SEGMENT\"<<endl;\n\t}\n\treturn 0;\n}\n\n/*\nint main()\n{\n\tint n;cin>>n;\n\tvtr p[4];\n\tcout<<fixed<<setprecision(10);\n\tREP(i,n)\n\t{\n\t\tREP(j,4)cin>>p[j].x>>p[j].y;\n\t\t//????????????\n\t\tdouble a,b,c,d;\n\t\tif(dotp(minusvtr(p[1],p[0]),minusvtr(p[2],p[0]))>0&&dotp(minusvtr(p[0],p[1]),minusvtr(p[2],p[1]))>0)\n\t\t{\n\t\t\ta=abscrossp(minusvtr(p[1],p[0]),minusvtr(p[2],p[0]))/absvtr(minusvtr(p[1],p[0]));\n\t\t}\n\t\telse\n\t\t{\n\t\t\ta=min(absvtr(minusvtr(p[2],p[0])),absvtr(minusvtr(p[2],p[1])));\n\t\t}\n\t\t\n\t\tif(dotp(minusvtr(p[1],p[0]),minusvtr(p[3],p[0]))>0&&dotp(minusvtr(p[0],p[1]),minusvtr(p[3],p[1]))>0)\n\t\t{\n\t\t\tb=abscrossp(minusvtr(p[1],p[0]),minusvtr(p[3],p[0]))/absvtr(minusvtr(p[1],p[0]));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tb=min(absvtr(minusvtr(p[3],p[0])),absvtr(minusvtr(p[3],p[1])));\n\t\t}\n\t\t\n\t\tif(dotp(minusvtr(p[3],p[2]),minusvtr(p[0],p[2]))>0&&dotp(minusvtr(p[2],p[3]),minusvtr(p[0],p[3]))>0)\n\t\t{\n\t\t\tc=abscrossp(minusvtr(p[3],p[2]),minusvtr(p[0],p[2]))/absvtr(minusvtr(p[3],p[2]));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc=min(absvtr(minusvtr(p[0],p[2])),absvtr(minusvtr(p[0],p[3])));\n\t\t}\n\t\t\n\t\tif(dotp(minusvtr(p[3],p[2]),minusvtr(p[1],p[2]))>0&&dotp(minusvtr(p[2],p[3]),minusvtr(p[1],p[3]))>0)\n\t\t{\n\t\t\td=abscrossp(minusvtr(p[3],p[2]),minusvtr(p[1],p[2]))/absvtr(minusvtr(p[3],p[2]));\n\t\t}\n\t\telse\n\t\t{\n\t\t\td=min(absvtr(minusvtr(p[1],p[2])),absvtr(minusvtr(p[1],p[3])));\n\t\t}\n\t\tcout<<min(min(a,b),min(c,d))<<endl;\n\t}\n\treturn 0;\n}*/"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n\nusing namespace std;\n\ntypedef complex<double> P;\n\nstring ccw(P a,P b,P c)\n{\n    P ab=b-a,ac=c-a;\n    P tmp=ab*conj(ac);\n    if(tmp.imag()>0)\n    {\n        return \"CLOCKWISE\";\n    }else if(tmp.imag()<0)\n    {\n        return \"COUNTER_CLOCKWISE\";\n    }else if(tmp.real()<0)\n    {\n        return \"ONLINE_BACK\";\n    }else if(abs(ac)>abs(ab))\n    {\n        return \"ONLINE_FRONT\";\n    }else\n    {\n        return \"ON_SEGMENT\";\n    }\n}\n\nint main()\n{\n    double x1,y1,x2,y2;\n    cin>>x1>>y1>>x2>>y2;\n\n    int q;\n    cin>>q;\n    while(q--)\n    {\n        double x,y;\n        cin>>x>>y;\n        cout<<ccw(P(x1,y1),P(x2,y2),P(x,y))<<endl;\n    }\n\n    return 0;\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#define EPS (1e-10)\n#include <cmath>\n#include <iostream>\n#include <iomanip>\nusing namespace std;\n\nint main() {\n\tcin.tie(0); ios::sync_with_stdio(false);\n\tint x0, y0, x1, y1; cin >> x0 >> y0 >> x1 >> y1;\n\tint q; cin >> q;\n\tlong double theta1, theta2;\n\ttheta1 = atan2(y1 - y0, x1 - x0);\n\twhile (q--) {\n\t\tint x2, y2; cin >> x2 >> y2;\n\t\tif (x2 == 0 && y2 == 0) { cout << \"ON_SEGMENT\" << endl; continue; }\n\t\ttheta2 = atan2(y2 - y0, x2 - x0);\n\t\tlong double rev_theta = theta1 >= 0 ? theta1 - M_PI : theta1 + M_PI;\n\t\t//cout << fixed << setprecision(15) << \"theta1 = \" << theta1 << endl << \"theta2 = \" << theta2 << endl << \"rev_theta = \" << rev_theta << endl;\n\t\tif (theta2 - theta1 == M_PI || theta2 - theta1 == -M_PI) { cout << \"ONLINE_BACK\" << endl; continue; }\n\t\tif (theta1 == theta2) {\n\t\t\tlong double dist1 = hypot(x1 - x0, y1 - y0), dist2 = hypot(x2 - x0, y2 - y0);\n\t\t\tif (dist2 > dist1) { cout << \"ONLINE_FRONT\" << endl; continue; }\n\t\t\telse { cout << \"ON_SEGMENT\" << endl; continue; }\n\t\t}\n\t\tif (theta1 >= 0) {\n\t\t\tif (theta2 > theta1 || theta2 < rev_theta) { cout << \"COUNTER_CLOCKWISE\" << endl; continue; }\n\t\t\tif (theta2 < theta1 && theta2 > rev_theta) { cout << \"CLOCKWISE\" << endl; continue; }\n\t\t}\n\t\telse {\n\t\t\tif (theta2 > theta1 && theta2 < rev_theta) { cout << \"COUNTER_CLOCKWISE\" << endl; continue; }\n\t\t\tif (theta2 < theta1 || theta2 > rev_theta) { cout << \"CLOCKWISE\" << endl; continue; }\n\t\t}\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#define  _CRT_SECURE_NO_WARNINGS\n#include <stdio.h>\n#include <algorithm>\n#include <utility>\n#include <functional>\n#include <cstring>\n#include <queue>\n#include <stack>\n#include <math.h>\n#include <iterator>\n#include <vector>\n#include <string>\n#include <set>\n#include <math.h>\n#include <iostream>\n#include <random>\n#include<map>\n#include <iomanip>\n#include <time.h>\n#include <stdlib.h>\n#include <list>\n#include <typeinfo>\n#include <list>\n#include <set>\n#include <cassert>\n#include<fstream>\n#include <unordered_map>\n#include <cstdlib>\nusing namespace std;\n#define Ma_PI 3.141592653589793\n#define eps 0.00001\n#define LONG_INF 3000000000000000000\n#define GOLD 1.61803398874989484820458\n#define MAX_MOD 1000000007\n#define MOD 998244353\n#define REP(i,n) for(long long i = 0;i < n;++i)    \n#define seg_size 524288\n#include <complex>\ntypedef complex<double> P;\ndouble dot(P a, P b) {\n\treturn (a.real() * b.real() + a.imag() * b.imag());\n}\ndouble cross(P a, P b) {\n\treturn (a.real() * b.imag() - a.imag() * b.real());\n}\nint main() {\n\tdouble a, b, c, d;\n\tcin >> a >> b >> c >> d;\n\tint query;\n\tcin >> query;\n\tREP(i, query) {\n\t\tdouble e, f;\n\t\tcin >> e >> f;\n\t\tP A = P(c - a, d - b);\n\t\tP B = P(e - a, f - b);\n\t\tif (cross(A, B) > eps) {\n\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t\tcontinue;\n\t\t}\n\t\tif (cross(A, B) < -eps) {\n\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\t\tcontinue;\n\t\t}\n\t\tif (dot(A, B) < -eps) {\n\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t\tcontinue;\n\t\t}\n\t\tif (abs(A) < abs(B)) {\n\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t\tcontinue;\n\t\t}\n\t\tcout << \"ON_SEGMENT\" << endl;\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint main(){\n\n\tint p0x,p0y,p1x,p1y,p2x,p2y;\n\tint q,cr;\n\n\tcin>>p0x>>p0y>>p1x>>p1y;\n\tcin>>q;\n\n\tfor(int i=0;i<q;i++){\n\t\tcin>>p2x>>p2y;\n\t\tcr=(p2x-p0x)*(p1y-p0y)-(p1x-p0x)*(p2y-p0y);\n\t\tif(cr==0){\n\t\t\tif(p2x-p0x<=0==p1x-p0x<=0||p2y-p0y<=0==p1y-p0y<=0){\n\t\t\t\tif(pow(p2x-p0x,2.0)+pow(p2y-p0y,2.0)>pow(p1x-p0x,2.0)+pow(p1y-p0y,2.0)){\n\t\t\t\t\tcout<<\"ONLINE_FRONT\"<<endl;\n\t\t\t\t}\n\t\t\t\telse cout<<\"ON_SEGMENT\"<<endl;\n\t\t\t}\n\t\t\telse cout<<\"ONLINE_BACK\"<<endl;\n\t\t}\n\t\telse if(cr>0) cout<<\"CLOCKWISE\"<<endl;\n\t\telse cout<<\"COUNTER_CLOCKWISE\"<<endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<complex>\n#define x real() \n#define y imag()\nusing namespace std;\ntypedef complex<double> point;\nstring ccw(point a,point b,point c){\n  b-=a;\n  c-=a;\n  c*=conj(b);\n  b*=conj(b);\n  if(c.y>0)return \"COUNTER_CLOCKWISE\";  \n  if(c.y<0)return \"CLOCKWISE\";\n  if(c.x>b.x)return \"ONLINE_FRONT\";\n  if(c.x<0)return \"ONLINE_BACK\";\n  return \"ON_SEGMENT\";\n}\nint main(){\n  double x0,y0,x1,y1;\n  cin>>x0>>y0>>x1>>y1;\n  point a=point(x0,y0);\n  point b=point(x1,y1);\n  int q;\n  cin>>q;\n  for(int i=0;i<q;i++){\n    double xp,yp;\n    cin>>xp>>yp;\n    point c=point(xp,yp);\n    cout<<ccw(a,b,c)<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <cmath>\n#include <complex>\n#include <iostream>\n#include <vector>\n\n// ???, ????????????\ntypedef std::complex<double> Point;\ntypedef Point Vector;\n\nnamespace std {\n\tbool operator < (const Point &a, const Point &b){\n\t\treturn a.real() != b.real() ? a.real() < b.real() : a.imag() < b.imag();\n\t}\n\tistream& operator >> (istream &is, Point &a){\n\t\tdouble x, y;\n\t\tis >> x >> y;\n\t\ta = Point(x, y);\n\t\treturn is;\n\t}\n}\n\n// ??´???\nstruct Line {\n\tPoint p1, p2;\n\tLine(){}\n\tLine(const Point &p1, const Point &p2): p1(p1), p2(p2){}\n};\ntypedef Line Segment;\n\nnamespace std {\n\tistream& operator >> (istream &is, Line &a){\n\t\treturn is >> a.p1 >> a.p2;\n\t}\n}\n\n// ???\nstruct Circle {\n\tPoint p; double r;\n\tCircle(){}\n\tCircle(const Point &p, double r): p(p), r(r){}\n};\n\nnamespace std {\n\tistream& operator >> (istream &is, Circle &a){\n\t\treturn is >> a.p >> a.r;\n\t}\n}\n\n// ????§???¢\ntypedef std::vector<Point> Polygon;\n\nconst double EPS = 1e-12;\nconst double INF = 1e12;\nconst double PI = acos(-1.0);\n\n// ????????¨??????????????¢???\nenum CCW {\n\tCOUNTER_CLOCKWISE = 1,\n\tCLOCKWISE = -1,\n\tONLINE_BACK = 2,\n\tONLINE_FRONT = -2,\n\tON_SEGMENT = 0,\n};\n\n// ?????¢????£????????????¢???\nenum {\n\tOUT = 0,\n\tON = 1,\n\tIN = 2,\n};\n\n\n// a ??? 2 ??? (a ^ 2)\ndouble SQ(double a);\n\n// ?????????????????????????????¢??°\nbool EQ(double a, double b);\nbool NEQ(double a, double b);\nbool LT(double a, double b);\nbool GT(double a, double b);\nbool LEQ(double a, double b);\nbool GEQ(double a, double b);\n\n// ??§?????? <=> ?????°?????????\ndouble toDeg(double t);\ndouble toRad(double t);\n\n// ????????? (dot(a, a))\ndouble norm(const Vector &a);\n\n// ??????, ??????\ndouble dot(const Vector &a, const Vector &b);\ndouble cross(const Vector &a, const Vector &b);\n\n// ??´???, ??????\nbool orthogonal(const Segment &s1, const Segment &s2);\nbool parallel(const Segment &s1, const Segment &s2);\n\n// ?°???±, ????°?\nPoint project(const Line &l, const Point &p);\nPoint reflect(const Line &l, const Point &p);\n\n// ?????? (p0, p1) ??¨??? p2 ???????????¢???\nint ccw(const Point &p0, const Point &p1, const Point &p2);\n\n// ????????????\nbool intersectLP(const Line &l, const Point &p);\nbool intersectLL(const Line &l1, const Line &l2);\nbool intersectLS(const Line &l, const Segment &s);\nbool intersectSP(const Segment &s, const Point &p);\nbool intersectSS(const Segment &s1, const Segment &s2);\nint intersectCP(const Circle &c, const Point &p);\nbool intersectCL(const Circle &c, const Line &l);\nint intersectCS(const Circle &c, const Segment &s);\nint intersectCC(const Circle &c1, const Circle &c2);\n\n// ?????¢\ndouble distanceLP(const Line &l, const Point &p);\ndouble distanceLL(const Line &l1, const Line &l2);\ndouble distanceLS(const Line &l, const Segment &s);\ndouble distanceSP(const Segment &s, const Point &p);\ndouble distanceSS(const Segment &s1, const Segment &s2);\ndouble distanceCP(const Circle &c, const Point &p);\ndouble distanceCL(const Circle &c, const Line &l);\ndouble distanceCS(const Circle &c, const Segment &s);\ndouble distanceCC(const Circle &c1, const Circle &c2);\n\n// ??????\nPoint crossPointLL(const Line &l1, const Line &l2);\nPoint crossPointLS(const Line &l, const Segment &s);\nPoint crossPointSS(const Segment &s1, const Segment &s2);\nstd::vector<Point> crossPointCL(const Circle &c, const Line &l);\nstd::vector<Point> crossPointCS(const Circle &c, const Segment &s);\nstd::vector<Point> crossPointCC(const Circle &c1, const Circle &c2);\n\n\ndouble SQ(double a){\n\treturn a * a;\n}\n\nbool EQ(double a, double b){\n\treturn std::abs(a - b) < EPS;\n}\n\nbool NEQ(double a, double b){\n\treturn !EQ(a, b);\n}\n\nbool LT(double a, double b){\n\treturn a - b < -EPS;\n}\n\nbool GT(double a, double b){\n\treturn a - b > EPS;\n}\n\nbool LEQ(double a, double b){\n\treturn !GT(a, b);\n}\n\nbool GEQ(double a, double b){\n\treturn !LT(a, b);\n}\n\ndouble toDeg(double t){\n\treturn t * 180 / PI;\n}\n\ndouble toRad(double t){\n\treturn t / 180 * PI;\n}\n\ndouble norm(const Vector &a){\n\treturn SQ(a.real()) + SQ(a.imag());\n}\n\ndouble dot(const Vector &a, const Vector &b){\n\treturn (conj(a) * b).real();\n}\n\ndouble cross(const Vector &a, const Vector &b){\n\treturn (conj(a) * b).imag();\n}\n\nbool orthogonal(const Segment &s1, const Segment &s2){\n\treturn EQ(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nbool parallel(const Segment &s1, const Segment &s2){\n\treturn EQ(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n// AOJ CGL_1_A\nPoint project(const Line &l, const Point &p){\n\tVector base = l.p2 - l.p1;\n\tdouble r = dot(p - l.p1, base) / norm(base);\n\treturn l.p1 + base * r;\n}\n\n// AOJ CGL_1_B\nPoint reflect(const Line &l, const Point &p){\n\treturn p + (project(l, p) - p) * 2.0;\n}\n\n\nint ccw(const Point &p0, const Point &p1, const Point &p2){\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (GT(cross(a, b), 0.0)) return COUNTER_CLOCKWISE;\n\tif (LT(cross(a, b), 0.0)) return CLOCKWISE;\n\tif (LT(dot(a, b), 0.0)) return ONLINE_BACK;\n\tif (LT(norm(a), norm(b))) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\nbool intersectLP(const Line &l, const Point &p){\n\treturn ~ccw(l.p1, l.p2, p) & 1;\n\t// ONLINE_BACK or ONLINE_FRONT or ON_SEGMENT\n}\n\nbool intersectLL(const Line &l1, const Line &l2){\n\treturn !parallel(l1, l2);\n}\n\nbool intersectLS(const Line &l, const Segment &s){\n\treturn LEQ(cross(l.p2 - l.p1, s.p1 - l.p1) * cross(l.p2 - l.p1, s.p2 - l.p1), 0.0);\n}\n\nbool intersectSP(const Segment &s, const Point &p){\n\treturn ccw(s.p1, s.p2, p) == ON_SEGMENT;\n}\n\nbool intersectSS(const Segment &s1, const Segment &s2){\n\treturn ccw(s1.p1, s1.p2, s2.p1) * ccw(s1.p1, s1.p2, s2.p2) <= 0 &&\n\t\tccw(s2.p1, s2.p2, s1.p1) * ccw(s2.p1, s2.p2, s1.p2) <= 0;\n}\n\nint intersectCP(const Circle &c, const Point &p){\n\tdouble dd = norm(c.p - p);\n\tif (LT(dd, SQ(c.r))) return IN;\n\tif (EQ(dd, SQ(c.r))) return ON;\n\treturn OUT;\n}\n\nbool intersectCL(const Circle &c, const Line &l){\n\tdouble d = distanceLP(l, c.p);\n\treturn LEQ(d, c.r);\n}\n\nint intersectCS(const Circle &c, const Segment &s){\n\tdouble dd1 = norm(c.p - s.p1);\n\tdouble dd2 = norm(c.p - s.p2);\n\tif (LT(dd1, SQ(c.r)) && LT(dd2, SQ(c.r))) return IN;\n\tif (GT(distanceCS(c, s), 0.0)) return OUT;\n\treturn ON;\n}\n\n// c1 ??? c2 ???????????????????????¨??? IN\n// c1 ??? c2 ????????£???????????¨??? ON\n// c1 ??? c2 ?????????????????¨??? OUT\nint intersectCC(const Circle &c1, const Circle &c2){\n\tif (GT(std::abs(c1.p - c2.p), c1.r + c2.r)) return OUT;\n\tif (LT(std::abs(c1.p - c2.p), c2.r)) return IN;\n\tif (LT(std::abs(c1.p - c2.p), c1.r)) return OUT;\n\treturn ON;\n}\n\ndouble distanceLP(const Line &l, const Point &p){\n\treturn std::abs(cross(l.p2 - l.p1, p - l.p1)) / std::abs(l.p2 - l.p1);\n}\n\ndouble distanceLL(const Line &l1, const Line &l2){\n\tif (intersectLL(l1, l2)) return 0.0;\n\treturn distanceLP(l1, l2.p1);\n}\n\ndouble distanceLS(const Line &l, const Segment &s){\n\tif (intersectLS(l, s)) return 0.0;\n\treturn std::min(distanceLP(l, s.p1), distanceLP(l, s.p2));\n}\n\ndouble distanceSP(const Segment &s, const Point &p){\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0) return std::abs(p - s.p1);\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0) return std::abs(p - s.p2);\n\treturn distanceLP(s, p);\n}\n\ndouble distanceSS(const Segment &s1, const Segment &s2){\n\tif (intersectSS(s1, s2)) return 0.0;\n\treturn std::min(\n\t\tstd::min(\n\t\t\tdistanceSP(s1, s2.p1),\n\t\t\tdistanceSP(s1, s2.p2)\n\t\t),\n\t\tstd::min(\n\t\t\tdistanceSP(s2, s1.p1),\n\t\t\tdistanceSP(s2, s1.p2)\n\t\t)\n\t);\n}\n\ndouble distanceCP(const Circle &c, const Point &p){\n\treturn std::abs(std::abs(c.p - p) - c.r);\n} \n\ndouble distanceCL(const Circle &c, const Line &l){\n\tif (intersectCL(c, l)) return 0.0;\n\treturn distanceLP(l, c.p) - c.r;\n}\n\ndouble distanceCS(const Circle &c, const Segment &s){\n\tif (intersectCS(c, s)) return 0.0;\n\treturn std::min(distanceCP(c, s.p1), distanceCP(c, s.p2));\n}\n\ndouble distanceCC(const Circle &c1, const Circle &c2){\n\tif (intersectCC(c1, c2) == ON) return 0.0;\n\tif (intersectCC(c1, c2) == IN){\n\t\treturn c2.r - (std::abs(c1.p - c2.p) + c1.r);\n\t}\n\tif (intersectCC(c2, c1) == IN){\n\t\treturn c1.r - (std::abs(c1.p - c2.p) + c2.r);\n\t}\n\treturn (c1.r + c2.r) - (c1.r + c2.r);\n}\n\n\n#include <cstdio>\nusing namespace std;\n\nint main()\n{\n\tPoint p0, p1;\n\tint q;\n\tcin >> p0 >> p1 >> q;\n\twhile (q--){\n\t\tPoint p2;\n\t\tcin >> p2;\n\t\t\n\t\tint res = ccw(p0, p1, p2);\n\t\tif (res == COUNTER_CLOCKWISE) puts(\"COUNTER_CLOCKWISE\");\n\t\tif (res == CLOCKWISE) puts(\"CLOCKWISE\");\n\t\tif (res == ONLINE_BACK) puts(\"ONLINE_BACK\");\n\t\tif (res == ON_SEGMENT) puts(\"ON_SEGMENT\");\n\t\tif (res == ONLINE_FRONT) puts(\"ONLINE_FRONT\");\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\n\n#define rep(i, n) REP(i, 0, n)\n#define REP(i, s, e) for(int i = (int)s; i < (int)(e); ++i)\n\n#define X real()\n#define Y imag()\n#define x(p) real(p)\n#define y(p) imag(p)\n#define curr(P, i) P[i]\n#define next(P, i) P[(i+1)%P.size()]\n#define prev(P, i) P[(i-1+P.size())%P.size()]\n\nconst double EPS = 1e-8;\nconst double INF = 1e12;\nconst double PI = acos(-1);\n\ntypedef double D;\ntypedef complex<D> P;\nnamespace std{\n  bool operator < (const P& a, const P& b) {\n    return x(a) != x(b) ? x(a) < x(b) : y(a) < y(b);\n  }\n}\n\nD dot(const P& a, const P& b) {\n  return x(conj(a)*b);\n}\nD cross(const P& a, const P& b) {\n  return y(conj(a)*b);\n}\n\nstruct L : public vector<P> {\n  L(const P&a, const P& b) {\n    push_back(a);\n    push_back(b);\n  }\n};\n\ntypedef vector<P> G;\n\nstruct C {\n  P p; D r;\n};\n\nint ccw(P a, P b, P c) {\n  b -= a; c -= a;\n  if(cross(b, c) > 0) return +1; //ccw\n  if(cross(b, c) < 0) return -1; //cw\n  if(dot(b, c) < 0)   return +2; //c-a-b on line\n  if(norm(b) < norm(c)) return -2; //a-b-c on line\n}\n\nP projection(const L& l, const P& p) {\n  D t = dot(p - l[0], l[0] - l[1]) / norm(l[0]- l[1]);\n  return l[0] + t * (l[0] - l[1]);\n}\nP refrection(const L& l, const P& p) {\n  return p + 2.0 * (projection(l, p) - p);\n}\nint main() {\n  D x1, y1, x2, y2;\n  cin >> x1 >> y1 >> x2 >> y2;\n  P a(x1, y1), b(x2, y2);\n  int q;\n  cin >> q;\n  cout << fixed << setprecision(20);\n  rep(i, q) {\n    D x, y;\n    cin >> x >> y;\n    P c(x, y);\n    int k = ccw(a, b, c);\n    if(k == 1) cout << \"COUNTER_CLOCKWISE\" << endl;\n    else if(k == -1) cout << \"CLOCKWISE\" << endl;\n    else if(k == +2) cout << \"ONLINE_BACK\" << endl;\n    else if(k == -2) cout << \"ONLINE_FRONT\" << endl;\n    else cout << \"ON_SEGMENT\" << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\n#include <cmath>\n#include <iomanip>\n#include <stack>\n#include <queue>\n#include <vector>\n#include <algorithm>\n\n\nusing namespace std;\n\n//-------------------------------------------------------------------------------------\n/*2点[(x1,y1),(x2,y2)]を入力し二点を通る直線ax+by+cの(a,b,c)を返す,  */\n/*x1==x2ならfalseを返す*/\n/*falseならばx=cの形の直線*/\nvoid straight_line_passing_through_the_two_points(double x1, double y1, double x2, double y2, double *a, double *b, double *c){\n    *a=(y2-y1);\n    *b=-(x2-x1);\n    *c=y2*(x2-x1)-x2*(y2-y1);\n}\n\n//-------------------------------------------------------------------------------------\n/*(x,y)を通るa1x+b1y+c1=0に垂直な直線a2x+b2y+c2=0を返す*/\nbool vertical_straight_line(double x, double y, double a1, double b1, double c1, double *a2, double *b2, double *c2){\n    if(a1*x+b1*y+c1==0)return false;\n    *a2 = -b1;\n    *b2 = a1;\n    *c2 = b1*x - a1*y;\n    return true;\n}\n\n\n//-------------------------------------------------------------------------------------\n/*2直線 a1x+b1y+c1=0 a2x+b2y+c2=0 の交点 (x,y)を返す*/\n/*2直線が平行であるならば0を返す*/\nint intersection_and_parallel(double a1, double b1, double c1, double a2, double b2, double c2, double *x, double *y){\n    if(a1*b2==a2*b1)return false;//平行の判定\n    \n    *x = (b1*c2-b2*c1)/(a1*b2-a2*b1);\n    *y = (a2*c1-a1*c2)/(a1*b2-a2*b1);\n    \n    return true;\n}\n\n//-------------------------------------------------------------------------------------\n/* \n a1x+b1y+c1=0 と　a2x+b2y+c2=0 が\n 平行なら2\n 直交なら1\n それ以外は0\n を返す\n */\nint judges_whether_parallel_or_perpendicular(double a1, double b1, double c1, double a2, double b2, double c2){\n    if(a1*b2 == a2*b1)return 2;\n    if(a1*a2 + b1*b2 == 0)return 1;\n    return 0;\n}\n\n\n//-------------------------------------------------------------------------------------\n/*直線ax+by+c=0に対し　(x1,y1)と線対称な位置(x2,y2)を出力*/\n/*vertical_straight_lineを使用*/\n/*intersection_and_parallelを使用*/\nvoid line_symmetry(double a, double b, double c, double x1, double y1, double *x2, double *y2){\n    if(a*x1+b*y1+c==0){//(x1,y1)が直線上にある.\n        *x2=x1;\n        *y2=y1;\n        return;\n    }\n    \n    //垂直な直線を求める\n    double a2,b2,c2;\n    vertical_straight_line(x1, y1, a, b, c, &a2, &b2, &c2);\n    \n    //垂直な直線との交点を求める\n    double c_x, c_y;\n    intersection_and_parallel(a, b, c, a2, b2, c2, &c_x, &c_y);\n    *x2 = x1 + 2*(c_x-x1);\n    *y2 = y1 + 2*(c_y-y1);\n}\n\n\n\n//-------------------------------------------------------------------------------------\n/*2点(x1,y1), (x2,y2) の距離*/\ndouble distance_between_the_two_pointss(double x1,double y1, double x2, double y2){\n    return  sqrt(fabs((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)));\n}\n\n\n//-------------------------------------------------------------------------------------\n/* (x1,y1)から(x2,y2)へ伸ばした直線の角度を求める  */\n/*-π　〜　+π　まで*/\ndouble angle_of_the_line(double x1, double y1, double x2, double y2){\n    return atan2(y2-y1, x2-x1);\n}\n\n//-------------------------------------------------------------------------------------\n/*(x1,y1)と(x2,y2)を両端に持つ線分と*/\n/*(x3,y3)と(x4,y4)を両端に持つ線分が*/\n/*交差するなら1 交差しないなら0を出力する*/\n/* straight_line_passing_through_the_two_pointsを使用 */\n/* intersection_and_parallelを使用 */\nint line_segment_cross_decision(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4){\n    double a1,b1,c1, a2,b2,c2;\n    straight_line_passing_through_the_two_points(x1, y1, x2, y2, &a1, &b1, &c1);\n    straight_line_passing_through_the_two_points(x3, y3, x4, y4, &a2, &b2, &c2);\n    double c_x,c_y;\n    bool is_parallel = intersection_and_parallel(a1, b1, c1, a2, b2, c2, &c_x, &c_y);\n    if(is_parallel==false){\n        if( (a1==a2&&b1==b2&&c1==c2) || (a1==0 && (b1/b2)==(c1/c2)) || (b1==0 && (a1/a2)==(c1/c2)) ){//一直線上にある.\n            //cout<<1111;\n            if(min(x1,x2)<=x3&&x3<=max(x1,x2)&&min(y1,y2)<=y3&&y3<=max(y1,y2))return 1;\n            if(min(x1,x2)<=x4&&x4<=max(x1,x2)&&min(y1,y2)<=y4&&y4<=max(y1,y2))return 1;\n            if(min(x3,x4)<=x1&&x1<=max(x3,x4)&&min(y3,y4)<=y1&&y1<=max(y3,y4))return 1;\n            if(min(x3,x4)<=x2&&x2<=max(x3,x4)&&min(y3,y4)<=y2&&y2<=max(y3,y4))return 1;\n            \n\n\n        }\n        return 0;\n    }\n    if(x1>x2)swap(x1, x2);\n    if(x3>x4)swap(x3, x4);\n    if(y1>y2)swap(y1, y2);\n    if(y3>y4)swap(y3, y4);\n\n    if(x1<=c_x&&c_x<=x2&&x3<=c_x&&c_x<=x4){\n        if(y1<=c_y&&c_y<=y2&&y3<=c_y&&c_y<=y4)return 1;\n    }\n    return 0;\n    \n}\n\n\n\n//-------------------------------------------------------------------------------------\n/*点(p_x,p_y)と線分(x1,y1)(x2,y2)の距離*/\n/* straight_line_passing_through_the_two_points */\n/* vertical_straight_line */\n/* intersection_and_parallel */\ndouble distance_between_the_line_segment_and_point(double p_x, double p_y, double x1, double y1, double x2, double y2){\n    double a,b,c;//(x1,y1)(x2,y2)を通る直線\n    straight_line_passing_through_the_two_points(x1, y1, x2, y2, &a, &b, &c);\n    double a2,b2,c2;//直線ax+by+c=0に垂直な直線\n    double v_x, v_y;//二つの直線の交点\n    bool is_not_parallel = vertical_straight_line(p_x, p_y, a, b, c, &a2, &b2, &c2);\n    intersection_and_parallel(a, b, c, a2, b2, c2, &v_x, &v_y);\n    \n    if(is_not_parallel){\n        if(min(x1,x2)<=v_x&&v_x<=max(x1,x2)&&min(y1,y2)<=v_y&&v_y<=max(y1,y2)){//(v_x,v_y)は線分の中にある\n            //cout<<\"a \";\n            return distance_between_the_two_pointss(p_x, p_y, v_x, v_y);\n        }else{//(v_x,v_y)は線分の外にある\n            double l1 = distance_between_the_two_pointss(p_x, p_y, x1, y1);\n            double l2 = distance_between_the_two_pointss(p_x, p_y, x2, y2);\n            //cout<<\"b \";\n            return min(l1,l2);\n        }\n    }else{\n        if(min(x1,x2)<=p_x&&p_x<=max(x1,x2)&&min(y1,y2)<=p_y&&p_y<=max(y1,y2)){//(p_x,p_y)は線分の中にある\n            //cout<<\"c \";\n            return 0.0;\n        }else{//(p_x,p_y)は線分の外にある\n            double l1 = distance_between_the_two_pointss(p_x, p_y, x1, y1);\n            double l2 = distance_between_the_two_pointss(p_x, p_y, x2, y2);\n            //cout<<\"d \";\n            return min(l1,l2);\n        }\n    }\n    \n}\n\n\n//-------------------------------------------------------------------------------------\n/*線分(x1,y1)(x2,y2)と線分(x3,y3)(x4,y4)の距離*/\n\ndouble distance_between_two_line_segment(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4){\n    //同一直線上にある場合\n    \n    //ぶつかる場合\n    if(line_segment_cross_decision(x1, y1, x2, y2, x3, y3, x4, y4)){\n        return 0.0;\n    }\n    \n    //ぶつからない場合\n    double l1,l2,l3,l4;\n    l1=distance_between_the_line_segment_and_point(x1, y1, x3, y3, x4, y4);\n    //cout<<l1<<endl;\n    l2=distance_between_the_line_segment_and_point(x2, y2, x3, y3, x4, y4);\n    //cout<<l2<<endl;\n\n    l3=distance_between_the_line_segment_and_point(x3, y3, x1, y1, x2, y2);\n    //cout<<l3<<endl;\n    l4=distance_between_the_line_segment_and_point(x4, y4, x1, y1, x2, y2);\n    \n        \n    //cout<<l4<<endl;\n    \n    return min(l1,min(l2,min(l3,l4)));\n}\n\n//-------------------------------------------------------------------------------------\n/*多角形の面積*/\n/*頂点数n　頂点の集合 */\ndouble area_of_the_polygon(int n, double p_xy[10000][2]){\n    double s=0.0;\n    for(int i=0; i<n; i++){\n        s+=(p_xy[i][0]-p_xy[(i+1)%n][0])*(p_xy[i][1]+p_xy[(i+1)%n][1])/2;\n    }\n    return s;\n}\n\n\n//-------------------------------------------------------------------------------------\n/*角abcの角度　a(xa,ya), b(xb,yb), c(xc,yc),*/\n/*2辺の角度*/\n/*aとb　またはbとcが重なっていればPIを返す*/\ndouble angle_of_the_two_edges(double ax, double ay, double bx, double by, double cx, double cy){\n    if(ax==bx&&ay==by)return M_PI;\n    if(cx==bx&&cy==by)return M_PI;\n    \n    double angle1 = angle_of_the_line(ax, ay, bx, by);\n    double angle2 = angle_of_the_line(bx, by, cx, cy);\n    \n    double ret = angle1+(M_PI-angle2);\n    if(ret>M_PI * 2)ret -= M_PI * 2;\n    if(ret<0)ret += M_PI * 2;\n    return /*2*M_PI- */ret;\n    \n}\n\n//-------------------------------------------------------------------------------------\n/*多角形に対する点の内外判定*/\n/* n頂点の多角形p_xy[n]に対して点(x,y)の内外判定を行う*/\n/* 内なら2 線上なら1 外なら0*/\nint inside_and_outside_the_determination_of_the_polygon_and_point(int n, double p_xy[10000][2], double x, double y){\n    //点が線分上にあるか\n    for(int i=0; i<n; i++){\n        double l = distance_between_the_line_segment_and_point(x, y, p_xy[i][0], p_xy[i][1], p_xy[(i+1)%n][0], p_xy[(i+1)%n][1]);\n        if(l==0.0)return 1;\n    }\n    \n    //点が中にあるか外にあるか\n    int ans = 0;\n    for(int i=0; i<n; i++){\n        if(p_xy[i][0]!=p_xy[(i+1)%n][0]){\n            ans += line_segment_cross_decision(p_xy[i][0], p_xy[i][1], p_xy[(i+1)%n][0], p_xy[(i+1)%n][1], x, y, x, y+1000000.0);\n            \n            if(distance_between_the_line_segment_and_point(p_xy[i][0], p_xy[i][1],x, y, x, y+1000000.0)==0.0){\n                if(p_xy[i][0]>p_xy[(i+1)%n][0])ans--;\n            }\n            if(distance_between_the_line_segment_and_point(p_xy[(i+1)%n][0], p_xy[(i+1)%n][1],x, y, x, y+1000000.0)==0.0){\n                if(p_xy[i][0]<p_xy[(i+1)%n][0])ans--;\n            }\n        }\n        \n    }\n    //cout<<\" \"<<ans<<\" \";\n    if(ans%2==0)return 0;\n    else return 2;\n}\n//-------------------------------------------------------------------------------------\n/*二点の角度*/\n/*0~2π*/\ndouble angle_line_0_359(double x1, double y1, double x2, double y2){\n    double angle = atan2(y2-y1, x2-x1);\n    if(angle<0)angle = 2*M_PI+angle;\n    return angle;\n}\n\n//-------------------------------------------------------------------------------------\n/*二辺の角度*/\n/*反時計回りの内側*/\n/*0~2π*/\ndouble angle_two_line_0_359(double x1, double y1, double x2, double y2, double x3, double y3){\n    double angle = atan2(y2-y1, x2-x1);\n    if(angle<0)angle = 2*M_PI+angle;\n    if(angle==2*M_PI)angle=0.0;\n    \n    double angle2 = atan2(y3-y2, x3-x2);\n    if(angle2<0)angle2 = 2*M_PI+angle2;\n    if(angle2==2*M_PI)angle2=0.0;\n    \n    double ret = 2*M_PI-( angle+(M_PI-angle2) );\n    if(ret<0)ret+=2*M_PI;\n    if(ret>=2*M_PI)ret-=2*M_PI;\n    \n    return ret;\n}\n\n//-------------------------------------------------------------------------------------\n/*二次元配列のクイックソート*/\n/*xoryが0ならx座標　1なら座標でソート*/\nvoid two_dimensional_qsort(double xy[100000][2], int left, int right, int xory)\n{\n    int i, j;\n    double pivot,pivot2;\n    \n    i = left;                      /* ソートする配列の一番小さい要素の添字 */\n    j = right;                     /* ソートする配列の一番大きい要素の添字 */\n    \n    pivot = xy[(left + right) / 2][xory]; /* 基準値を配列の中央付近にとる */\n    pivot2 = xy[(left + right) / 2][(xory+1)%2];\n    \n    \n    while (1) {                    /* 無限ループ */\n        \n        while (xy[i][xory] < pivot || (xy[i][xory] == pivot && xy[i][(xory+1)%2] < pivot2))       /* pivot より大きい値が */\n            i++;                   /* 出るまで i を増加させる */\n        \n        while (pivot < xy[j][xory] || (xy[j][xory] == pivot &&  pivot2 < xy[j][(xory+1)%2]))       /* pivot より小さい値が */\n            j--;                   /*  出るまで j を減少させる */\n        if (i >= j)                /* i >= j なら */\n            break;                 /* 無限ループから抜ける */\n        \n        swap(xy[i][xory], xy[j][xory]);            /* x[i] と x[j]を交換 */\n        swap(xy[i][(xory+1)%2], xy[j][(xory+1)%2]);            /* x[i] と x[j]を交換 */\n        i++;                       /* 次のデータ */\n        j--;\n    }\n    \n    if (left < i - 1)              /* 基準値の左に 2 以上要素があれば */\n        two_dimensional_qsort(xy, left, i - 1, xory);     /* 左の配列を Q ソートする */\n    if (j + 1 <  right)            /* 基準値の右に 2 以上要素があれば */\n        two_dimensional_qsort(xy, j + 1, right, xory);    /* 右の配列を Q ソートする */\n}\n\n\n//-------------------------------------------------------------------------------------\n/*凸包*/\n/*２次元平面における点の集合Pに対する凸包（convex hull）を求めて下さい。凸包とは点集合Pの全ての点を含む最小の凸多角形です。*/\n/*集合の要素数 n*/\n/*集合 p_xy[1000000][2]*/\n/*解答の要素数 q*/\n/*解答 ans[1000000][2]　最も下の最も左から反時計回り*/\n\nvoid convex_hull(int n, double p_xy[100000][2], int *q, double ans[100000][2]){\n\n    two_dimensional_qsort(p_xy, 0, n-1, 1);\n    /*\n    for(int i=0; i<n; i++){\n        cout<<p_xy[i][0]<<\" \"<<p_xy[i][1]<<endl;\n    }\n     */\n    \n    \n    int k=0;\n    for(int i=0; i<n; i++){\n        while(k > 1 && (angle_two_line_0_359(ans[k-2][0], ans[k-2][1], ans[k-1][0], ans[k-1][1], p_xy[i][0], p_xy[i][1])>M_PI))k--;\n        ans[k][0]=p_xy[i][0];\n        ans[k][1]=p_xy[i][1];\n        k++;\n    }\n    \n    \n    int t=k;\n    for(int i=n-2; i>=0; i--){\n        while(k > t && (angle_two_line_0_359(ans[k-2][0], ans[k-2][1], ans[k-1][0], ans[k-1][1], p_xy[i][0], p_xy[i][1])>M_PI))k--;\n        ans[k][0]=p_xy[i][0];\n        ans[k][1]=p_xy[i][1];\n        k++;\n    }\n    *q=k-1;\n}\n//-------------------------------------------------------------------------------------\n/*点の集合(凸多角形)の最遠点距離*/\ndouble diameter_of_the_polygon(int n, double p_xy[100000][2]){\n    double ch[100000][2];\n    int q;\n    convex_hull(n, p_xy, &q, ch);\n    \n    \n    int i=0;\n    int j=0;\n    for(int k=0; k<q; k++){\n        if(ch[j][1]<ch[k][1]){\n            j=k;\n        }\n    }\n    \n    int si=i;\n    int sj=j;\n    double res =  distance_between_the_two_pointss(ch[si][0], ch[si][1], ch[sj][0], ch[sj][1]);\n    while(1){\n        if(i==sj||j==si)break;\n        \n        double cross = (ch[(si+1)%n][0]-ch[si][0])*(ch[(sj+1)%n][1]-ch[sj][1]) - (ch[(si+1)%n][1]-ch[si][1])*(ch[(sj+1)%n][0]-ch[sj][0]);\n        //cout<<cross<<endl;\n        \n        if(cross<0){\n            si=(si+1)%n;\n            //res = max(res,a);\n        }else{\n            sj=(sj+1)%n;\n            //res = max(res,b);\n        }\n        \n        res =  max(res,distance_between_the_two_pointss(ch[si][0], ch[si][1], ch[sj][0], ch[sj][1]));\n                                                    \n        \n    }\n    \n    return res;\n}\n//-------------------------------------------------------------------------------------\n/*点の集合の最近点距離*/\n/*使用前に sort(a, a+n); をおこなう*/\n/*使用注意 他と仕様が違う*/\n/*点にpairを使っている*/\n\n\nbool compare_y(pair<double, double> a,pair<double, double> b){\n    return a.second<b.second;\n}\n\ndouble length_of_the_nearest_point_to(pair<double, double> a[100000], int n){\n    if(n<=1)return 999999999.9;\n    int m=n/2;\n    double x=a[m].first;\n    double d=min(length_of_the_nearest_point_to(a, m), length_of_the_nearest_point_to(a+m, n-m));\n    //inplace_merge(a, a+m, a+n, compare_y);\n    sort(a, a+n, compare_y);\n    vector<pair<double, double> >b;\n    for(int i=0; i<n; i++){\n        if(fabs(a[i].first-x)>=d)continue;\n        for(int j=0; j<b.size(); j++){\n            double dx=a[i].first-b[b.size()-j-1].first;\n            double dy=a[i].second-b[b.size()-j-1].second;\n            if(dy>=d)break;\n            d=min(d,sqrt(dx*dx+dy*dy));\n            \n        }\n        b.push_back(a[i]);\n    }\n    return d;\n}\n                                      \n//-------------------------------------------------------------------------------------\n/* 2点(x1,y1) (x2,y2)を通る直線に点(px,py)から引いた垂線の直線との交点(x, y)を返す */\nvoid intersection_of_the_normal_to_the_straight_line_passing_through_the_two_points(double px,double py,double x1, double y1,double x2, double y2,double *x, double *y){\n    double a,b,c;\n    straight_line_passing_through_the_two_points(x1, y1, x2, y2, &a, &b, &c);\n    *x = px-(a*px+b*py+c)/(a*a+b*b)*a;\n    *y = py-(a*px+b*py+c)/(a*a+b*b)*b;\n}\n                                      \nint main(){\n    double x0,y0,x1,y1,x2,y2;\n    cin>>x0>>y0>>x1>>y1;\n    int q;\n    cin>>q;\n    for(int i=0; i<q; i++){\n        cin>>x2>>y2;\n        \n        double a = angle_two_line_0_359(x1, y1, x0, y0, x2, y2);\n        //cout<<a/M_PI * 180.0<<endl;\n        \n        if(a==M_PI)cout<<\"ONLINE_BACK\"<<endl;\n        else if(0<a&&a<M_PI)cout<<\"COUNTER_CLOCKWISE\"<<endl;\n        else if(M_PI<a&&a<M_PI*2)cout<<\"CLOCKWISE\"<<endl;\n        else if(a==0||a==2*M_PI){\n            double l1 = distance_between_the_two_pointss(x1, y1, x0, y0);\n            double l2 = distance_between_the_two_pointss(x2, y2, x0, y0);\n            if(l1<l2)cout<<\"ONLINE_FRONT\"<<endl;\n            else cout<<\"ON_SEGMENT\"<<endl;\n        }\n        \n        \n        \n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\n\n#define rep(i, n) REP(i, 0, n)\n#define REP(i, s, e) for(int i = (int)s; i < (int)(e); ++i)\n\n#define X real()\n#define Y imag()\n#define x(p) real(p)\n#define y(p) imag(p)\n#define curr(P, i) P[i]\n#define next(P, i) P[(i+1)%P.size()]\n#define prev(P, i) P[(i-1+P.size())%P.size()]\n\nconst double EPS = 1e-8;\nconst double INF = 1e12;\nconst double PI = acos(-1);\n\ntypedef double D;\ntypedef complex<D> P;\nnamespace std{\n  bool operator < (const P& a, const P& b) {\n    return x(a) != x(b) ? x(a) < x(b) : y(a) < y(b);\n  }\n}\n\nD dot(const P& a, const P& b) {\n  return x(conj(a)*b);\n}\nD cross(const P& a, const P& b) {\n  return y(conj(a)*b);\n}\n\nstruct L : public vector<P> {\n  L(const P&a, const P& b) {\n    push_back(a);\n    push_back(b);\n  }\n};\n\ntypedef vector<P> G;\n\nstruct C {\n  P p; D r;\n};\n\nint ccw(P a, P b, P c) {\n  b -= a; c -= a;\n  if(cross(b, c) > 0) return +1; //ccw\n  if(cross(b, c) < 0) return -1; //cw\n  if(dot(b, c) < 0)   return +2; //c-a-b on line\n  if(norm(b) < norm(c)) return -2; //a-b-c on line\n}\n\nP projection(const L& l, const P& p) {\n  D t = dot(p - l[0], l[0] - l[1]) / norm(l[0]- l[1]);\n  return l[0] + t * (l[0] - l[1]);\n}\nP refrection(const L& l, const P& p) {\n  return p + 2.0 * (projection(l, p) - p);\n}\nint main() {\n  D x1, y1, x2, y2;\n  cin >> x1 >> y1 >> x2 >> y2;\n  P a(x1, y1), b(x2, y2);\n  int q;\n  cin >> q;\n  cout << fixed << setprecision(20);\n  rep(i, q) {\n    D x, y;\n    cin >> x >> y;\n    P c(x, y);\n    int k = ccw(a, b, c);\n    if(k == 1) cout << \"COUNTER_CLOCKWISE\" << endl;\n    else if(k == -1) cout << \"CLOCKWISE\" << endl;\n    else if(k == +2) cout << \"ONLINE_BACK\" << endl;\n    else if(k == -2) cout << \"ONLINE_FRONT\" << endl;\n    else cout << \"ON_SEGMENT\" << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#include <math.h>\n#include <iostream>\n#include <iomanip>\nusing namespace std;\n\nint main() {\n\tcin.tie(0); ios::sync_with_stdio(false);\n\tint x0, y0, x1, y1; cin >> x0 >> y0 >> x1 >> y1;\n\tint q; cin >> q;\n\tlong double theta1, theta2;\n\ttheta1 = atan2(y1 - y0, x1 - x0);\n\twhile (q--) {\n\t\tint x2, y2; cin >> x2 >> y2;\n\t\tif (x2 == 0 && y2 == 0) { cout << \"ON_SEGMENT\" << endl; continue; }\n\t\ttheta2 = atan2(y2 - y0, x2 - x0);\n\t\tlong double rev_theta = theta1 >= 0 ? theta1 - M_PI : theta1 + M_PI;\n\t\t//cout << fixed << setprecision(15) << \"theta1 = \" << theta1 << endl << \"theta2 = \" << theta2 << endl << \"rev_theta = \" << rev_theta << endl;\n\t\tif (theta2 - theta1 == M_PI || theta2 - theta1 == -M_PI) { cout << \"ONLINE_BACK\" << endl; continue; }\n\t\tif (theta1 == theta2) {\n\t\t\tlong double dist1 = hypot(x1 - x0, y1 - y0), dist2 = hypot(x2 - x0, y2 - y0);\n\t\t\tif (dist2 > dist1) { cout << \"ONLINE_FRONT\" << endl; continue; }\n\t\t\tif(dist2 <= dist1) { cout << \"ON_SEGMENT\" << endl; continue; }\n\t\t}\n\t\tif (theta1 >= 0) {\n\t\t\tif (theta2 > theta1 || theta2 < rev_theta) { cout << \"COUNTER_CLOCKWISE\" << endl; continue; }\n\t\t\tif (theta2 < theta1 && theta2 > rev_theta) { cout << \"CLOCKWISE\" << endl; continue; }\n\t\t}\n\t\telse {\n\t\t\tif (theta2 > theta1 && theta2 < rev_theta) { cout << \"COUNTER_CLOCKWISE\" << endl; continue; }\n\t\t\tif (theta2 < theta1 || theta2 > rev_theta) { cout << \"CLOCKWISE\" << endl; continue; }\n\t\t}\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "/// Geometry INT\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long LL;\n\ninline int sign(const LL x) {\n\tif (x < 0) {\n\t\treturn -1;\n\t}\n\tif (x > 0) {\n\t\treturn 1;\n\t}\n\treturn 0;\n}\n\nstruct point {\n\tLL x, y;\n\tpoint() {}\n\tpoint(LL _x, LL _y) : x(_x), y(_y) {}\n};\n\nbool operator < (const point &P, const point &Q) {\n\tif (P.y != Q.y) {\n\t\treturn P.y < Q.y;\n\t}\n\treturn P.x < Q.x;\n}\n\nbool operator == (const point &P, const point &Q) {\n\treturn !(P < Q) && !(Q < P);\n}\n\nstruct compare_x {\n\tbool operator () (const point &P, const point &Q) {\n\t\tif (P.x != Q.x) {\n\t\t\treturn P.x < Q.x;\n\t\t}\n\t\treturn P.y < Q.y;\n\t}\n};\n\nvoid normalize(point &P) {\n\tassert(P.x != 0 || P.y != 0);\n\tLL g = __gcd(abs(P.x), abs(P.y));\n\tP.x /= g;\n\tP.y /= g;\n\tif (P.x < 0 || (P.x == 0 && P.y < 0)) {\n\t\tP.x = -P.x;\n\t\tP.y = -P.y;\n\t}\n}\n\ninline int half_plane(const point &P) {\n\tif (P.y != 0) {\n\t\treturn sign(P.y);\n\t}\n\treturn sign(P.x);\n}\n\npoint operator + (const point &P, const point &Q) {\n\treturn point(P.x + Q.x, P.y + Q.y);\n}\n\npoint operator - (const point &P, const point &Q) {\n\treturn point (P.x - Q.x, P.y - Q.y);\n}\n\npoint operator * (const point &P, const LL k) {\n\treturn point(P.x * k, P.y * k);\n}\n\npoint operator / (const point &P, const LL k) {\n\tassert(k != 0 && P.x % k == 0 && P.y % k == 0);\n\treturn point(P.x / k, P.y / k);\n}\n\ninline LL dot(const point &P, const point &Q) {\n\treturn P.x * Q.x + P.y * Q.y;\n}\n\ninline LL cross(const point &P, const point &Q) {\n\treturn P.x * Q.y - P.y * Q.x;\n}\n\ninline LL dist2(const point &P, const point &Q) {\n\tLL dx = P.x - Q.x;\n\tLL dy = P.y - Q.y;\n\treturn dx * dx + dy * dy;\n}\n\ninline bool is_in(LL x, LL a, LL b) {\n\tif (a > b) {\n\t\tswap(a, b);\n\t}\n\treturn (a <= x && x <= b);\n}\n\ninline bool is_in(const point &P, const point &A, const point &B) {\n\tif (cross(B - A, P - A) != 0) {\n\t\treturn false;\n\t}\n\treturn (is_in(P.x, A.x, B.x) && is_in(P.y, A.y, B.y));\n}\n\ninline bool segment_segment_intersect(const point &A, const point &B, const point &C, const point &D) {\n\tif (cross(B - A, D - C) == 0) { // lines are parallel\n\t\treturn (is_in(A, C, D) || is_in(B, C, D) || is_in(C, A, B) || is_in(D, A, B));\n\t}\n\tif (sign(cross(C - A, B - A)) * sign(cross(D - A, B - A)) > 0) {\n\t\treturn false;\n\t}\n\tif (sign(cross(A - C, D - C)) * sign(cross(B - C, D - C)) > 0) {\n\t\treturn false;\n\t}\n\treturn true;\n}\n\ninline bool is_convex(const vector <point> &polygon) {\n\tint n = polygon.size();\n\tassert(n >= 3);\n\tfor (int i = 0; i < n; i++) {\n\t\tint j = (i + 1) % n;\n\t\tint k = (i + 2) % n;\n\t\tif (sign(cross(polygon[j] - polygon[i], polygon[k] - polygon[i])) < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst int OUT = 0;\nconst int ON = 1;\nconst int IN = 2;\n/// 0 outside, 1 boundary, 2 inside\ninline int point_inside_polygon(const point &P, const vector <point> &polygon) {\n\tint n = polygon.size();\n\tint cnt = 0;\n\tfor (int i = 0; i < n; i++) {\n\t\tpoint A = polygon[i];\n\t\tpoint B = polygon[(i + 1) % n];\n\t\tif (is_in(P, A, B)) {\n\t\t\treturn ON;\n\t\t}\n\t\tif (B.y < A.y) {\n\t\t\tswap(A, B);\n\t\t}\n\t\tif (P.y < A.y || B.y <= P.y || A.y == B.y) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (sign(cross(B - A, P - A)) > 0) {\n\t\t\tcnt++;\n\t\t}\n\t}\n\tif (cnt & 1) {\n\t\treturn IN;\n\t}\n\treturn OUT;\n}\n\nstruct compare_angle {\n\tpoint O;\n\tcompare_angle() {}\n\tcompare_angle(point _O) {\n\t\tO = _O;\n\t}\n\tbool operator () (const point &P, const point &Q) {\n\t\tif (half_plane(P - O) != half_plane(Q - O)) {\n\t\t\treturn half_plane(P - O) < half_plane(Q - O);\n\t\t}\n\t\tint c = sign(cross(P - O, Q - O));\n\t\tif (c != 0) {\n\t\t\treturn (c > 0);\n\t\t}\n\t\treturn dist2(P, O) < dist2(Q, O);\n\t}\n};\n\n/// !!! no se como mantener los puntos colineales\nvector <point> convex_hull_graham_scan(vector <point> pts) {\n\tsort(pts.begin(), pts.end());\n\tint n = pts.size();\n\tif (n <= 3) {\n\t\treturn pts;\n\t}\n\tsort(++pts.begin(), pts.end(), compare_angle(pts[0]));\n\n\tcerr << \"DEBUG\\n\";\n\tfor (int i = 0; i < n; i++) {\n\t\tcerr << pts[i].x << \" \" << pts[i].y << \"\\n\";\n\t}\n\n\tvector <point> ch(n);\n\tint top = 0;\n\tfor (int i = 0; i < n; i++) {\n\t\twhile (top >= 2 && cross(ch[top - 1] - ch[top - 2], pts[i] - ch[top - 2]) < 0) {\n\t\t\ttop--;\n\t\t}\n\t\tch[top++] = pts[i];\n\t}\n\tch.resize(top);\n\treturn ch;\n}\n\nvector <point> convex_hull_monotone_chain(vector <point> pts) {\n\tsort(pts.begin(), pts.end());\n\tint n = pts.size();\n\tvector <point> ch(2 * n);\n\tint top = 0;\n\tfor (int i = 0; i < n; i++) {\n\t\twhile (top >= 2 && cross(ch[top - 1] - ch[top - 2], pts[i] - ch[top - 2]) < 0) {\n\t\t\ttop--;\n\t\t}\n\t\tch[top++] = pts[i];\n\t}\n\tint size = top;\n\tfor (int i = n - 2; i >= 0; i--) {\n\t\twhile (top - size >= 1 && cross(ch[top - 1] - ch[top - 2], pts[i] - ch[top - 2]) < 0) {\n\t\t\ttop--;\n\t\t}\n\t\tch[top++] = pts[i];\n\t}\n\tif (ch[0] == ch[top - 1]) {\n\t\ttop--;\n\t}\n\tch.resize(top);\n\treturn ch;\n}\n\n//http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_B\n// test OK\nvoid test_segment_segment_intersection() {\n\tint q;\n\tcin >> q;\n\twhile (q--) {\n\t\tpoint A, B, C, D;\n\t\tcin >> A.x >> A.y >> B.x >> B.y >> C.x >> C.y >> D.x >> D.y;\n\t\tcout << (segment_segment_intersect(A, B, C, D) ? \"1\" : \"0\") << \"\\n\";\n\t}\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_3_B\n// test OK\nvoid test_is_convex() {\n\tint n;\n\tcin >> n;\n\tvector <point> polygon(n);\n\tfor (int i = 0; i < n; i++) {\n\t\tcin >> polygon[i].x >> polygon[i].y;\n\t}\n\tcout << (is_convex(polygon) ? \"1\" : \"0\") << \"\\n\";\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_3_C\n// test OK\nvoid test_point_inside_polygon() {\n\tint n;\n\tcin >> n;\n\tvector <point> polygon(n);\n\tfor (int i = 0; i < n; i++) {\n\t\tcin >> polygon[i].x >> polygon[i].y;\n\t}\n\tint q;\n\tcin >> q;\n\twhile (q--) {\n\t\tpoint P;\n\t\tcin >> P.x >> P.y;\n\t\tcout << point_inside_polygon(P, polygon) << \"\\n\";\n\t}\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_A\n// test ok\nvoid test_parallel_orthogonal() {\n\tint q;\n\tcin >> q;\n\twhile (q--) {\n\t\tpoint A, B, C, D;\n\t\tcin >> A.x >> A.y >> B.x >> B.y >> C.x >> C.y >> D.x >> D.y;\n\t\tint answer = 0;\n\t\tif (cross(B - A, D - C) == 0) {\n\t\t\tanswer = 2;\n\t\t} else if (dot(B - A, D - C) == 0) {\n\t\t\tanswer = 1;\n\t\t}\n\t\tcout << answer << \"\\n\";\n\t}\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_4_A\n// test ok\nvoid test_convex_hull() {\n\tint n;\n\tcin >> n;\n\tvector <point> pts(n);\n\tfor (int i = 0; i < n; i++) {\n\t\tcin >> pts[i].x >> pts[i].y;\n\t}\n\tvector <point> answer = convex_hull_monotone_chain(pts);\n\tcout << answer.size() << \"\\n\";\n\tfor (int i = 0; i < answer.size(); i++) {\n\t\tcout << answer[i].x << \" \" << answer[i].y << \"\\n\";\n\t}\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_C\n// test ???\nvoid test_counter_clockwise() {\n\tpoint A, B;\n\tcin >> A.x >> A.y >> B.x >> B.y;\n\tint q;\n\tcin >> q;\n\twhile (q--) {\n\t\tpoint C;\n\t\tcin >> C.x >> C.y;\n\t\tint s = sign(cross(B - A, C - A));\n\t\tif (s != 0) {\n\t\t\tcout << ((s > 0) ? \"COUNTER_CLOCKWISE\" : \"CLOCKWISE\") << \"\\n\";\t\t\n\t\t} else {\n\t\t\tif (dot(B - A, C - A) < 0) {\n\t\t\t\tcout << \"ONLINE_BACK\\n\";\n\t\t\t} else {\n\t\t\t\tcout << (dist2(A, B) < dist2(A, C) ? \"ONLINE_FRONT\" : \"ON_SEGMENT\") << \"\\n\";\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main() {\n\tios::sync_with_stdio(false);\n\tcin.tie(0);\n\n\t// test_segment_segment_intersection();\n\t// test_is_convex();\n\t// test_point_inside_polygon();\n\t// test_parallel_orthogonal();\n\t// test_convex_hull();\n\ttest_counter_clockwise();\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <queue>\n#include <vector>\n#include <algorithm>\n#include <set>\n#include <math.h>\n#include <tuple>\n#include <string.h>\n#include <map>\n#include <iomanip>\n#include <time.h>\nusing namespace std;\ntypedef long long ll;\n\ndouble square(pair<int, int> p) {\n    return p.first * p.first + p.second * p.second;\n}\n\npair<int, int> add(pair<int, int> p, pair<int, int> q) {\n    return make_pair(p.first + q.first, p.second + q.second);\n}\n\ndouble dot(pair<int, int> p, pair<int, int> q) {\n    return p.first * q.first + p.second * q.second;\n}\n\nint main() {\n    int x0, y0, x1, y1, q;\n    cin >> x0 >> y0 >> x1 >> y1;\n    pair<int, int> a = make_pair(x1 - x0, y1 - y0);\n\n    cin >> q;\n    while (q--) {\n        int x, y;\n        cin >> x >> y;\n\n        pair<int, int> b = make_pair(x - x0, y - y0);\n        \n        if (x0 == x1) {\n            if (x == x0) {\n                if ((y - y0) * (y1 - y0) < 0) cout << \"ONLINE_BACK\" << endl;\n                else if (abs(y - y0) > abs(y1 - y0)) cout << \"ONLINE_FRONT\" << endl;\n                else cout << \"ON_SEGMENT\" << endl;\n                continue;\n            }\n        }\n        else if (y0 == y1) {\n            if (y == y0) {\n                if ((x - x0) * (x1 - x0) < 0) cout << \"ONLINE_BACK\" << endl;\n                else if (abs(x - x0) > abs(x1 - x0)) cout << \"ONLINE_FRONT\" << endl;\n                else cout << \"ON_SEGMENT\" << endl;\n                continue;\n            }\n        }\n        else {\n            if ((x - x0) * (y1 - y0) == (x1 - x0) * (y - y0)) {\n                if ((x - x0) * (x1 - x0) < 0) cout << \"ONLINE_BACK\" << endl;\n                else if (abs(x - x0) > abs(x1 - x0)) cout << \"ONLINE_FRONT\" << endl;\n                else cout << \"ON_SEGMENT\" << endl;\n                continue;\n            }\n        }\n\n        if (y1 == y0) {\n            if (x0 < x1 && y > y1) cout << \"COUNTER_CLOCKWISE\" << endl;\n            else if (x0 < x1) cout << \"CLOCKWISE\" << endl;\n            else if (y > y1) cout << \"CLOCKWISE\" << endl;\n            else cout << \"COUNTER_CLOCKWISE\" << endl;\n            continue;\n        }\n\n\n        if (x1 - x0 == 0) {\n            if (y0 < y1 && x > x1) cout << \"CLOCKWISE\" << endl;\n            else if (y0 < y1) cout << \"COUNTER_CLOCKWISE\" << endl;\n            else if (x > x1) cout << \"COUNTER_CLOCKWISE\" << endl;\n            else cout << \"CLOCKWISE\" << endl;\n        }\n        else if (x1 - x0 > 0) {\n            if ((x1 - x0) * y > (y1 - y0) * x + (x1 * y0 - x0 * y1))\n                cout << \"COUNTER_CLOCKWISE\" << endl;\n            else cout << \"CLOCKWISE\" << endl;\n        }\n        else {\n            if ((x1 - x0) * y > (y1 - y0) * x + (x1 * y0 - x0 * y1))\n                cout << \"COUNTER_CLOCKWISE\" << endl;\n            else cout << \"CLOCKWISE\" << endl;\n        }\n\n\n\n\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "//http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_C\n#include <iostream>\n#include <cmath>\n#include <cstdio>\n\nusing namespace std;\n\nclass Point{\nprivate:\n    double x;\n    double y;\npublic:\n    void setPoint(double inX, double inY){x = inX; y = inY;};\n    void disp(){printf(\"%.12f %.12f\\n\", x,y);}\n    double length(){return x*x + y*y;};\n    double cross(Point Q){return x*Q.y - Q.x*y;};\n    double dot(Point Q){return x*Q.x + y*Q.y;};\n};\n\n\n//??????????????????2????????????????????¨????????±???\n//P = P2-P1, Q = P - P1\nvoid judge(Point P, Point Q){\n    int Cval = P.cross(Q);\n    int Dval = P.dot(Q);\n    if(Cval > 0) cout << \"COUNTER_CLOCKWISE\" << endl;\n    else{\n        if(Cval < 0)cout << \"CLOCKWISE\" << endl;\n        else{\n            if(Dval < 0) cout << \"ONLINE_BACK\" << endl;\n            else{\n                if(P.length() > Q.length()) cout << \"ON_SEGMENT\" << endl;\n                else cout << \"ONLINE_FRONT\" << endl;\n            }\n        }\n    }\n}\n\n\n\n\nint main(){\n    int n;\n    double a,b,c,d;\n    Point P, Q;\n    cin >> a >> b >> c >> d;\n    P.setPoint(c-a, d-b);\n    cin >> n;\n    for(int i=0; i<n; i++){\n        cin >> c >> d;\n        Q.setPoint(c-a, d-b);\n        judge(P,Q);\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<complex>\nusing namespace std;\ntypedef complex<double> Point;\n\nint main() {\n    int n;\n    double x1, y1, x2, y2, x3, y3;\n    cin >> x1 >> y1 >> x2 >> y2 >> n;\n    Point z2(x2 - x1, y2 - y1);\n    while (n--)\n    {\n        cin >> x3 >> y3;\n        Point z3(x3 - x1, y3 - y1);\n        Point p = z3 * conj(z2);\n        if (p.imag() > 0) cout << \"COUNTER_CLOCKWISE\\n\";\n        else if (p.imag() < 0) cout << \"CLOCKWISE\\n\";\n        else if (p.real() < 0) cout << \"ONLINE_BACK\\n\";\n        else if (abs(z3) > abs(z2)) cout << \"ONLINE_FRONT\\n\";\n        else cout << \"ON_SEGMENT\\n\";\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <map>\n#include <vector>\n#include <cmath>\n#include <iomanip>\n#include <string>\n#include <queue>\n#include <algorithm>\n#include <cctype>\n#define shosu(x) fixed<<setprecision(x)\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> P;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef vector<P> vp;\ntypedef vector<vp> vvp;\ntypedef pair<int,P> pip;\ntypedef vector<pip> vip;\ntypedef pair<double,double> pdd;\nconst int inf=1<<30;\nconst double pi=acos(-1);\nconst double eps=1e-8;\n\nstruct point{\n\tdouble x,y;\n\tpoint operator+(point Gep){\n\t\treturn point{x+Gep.x,y+Gep.y};\n\t}\n\tpoint operator-(point Gep){\n\t\treturn point{x-Gep.x,y-Gep.y};\n\t}\n\tpoint operator*(double Gex){\n\t\treturn point{x*Gex,y*Gex};\n\t}\n\tpoint operator/(double Gex){\n\t\tif(!Gex) return point{0,0}; \n\t\treturn point{x/Gex,y/Gex};\n\t}\n\tbool operator==(point Gep){\n\t\treturn fabs(x-Gep.x)<eps&&fabs(y-Gep.y)<eps;\n\t}\n};\n\nclass Geom{\n\tprivate:\n\tvector<point> Ge;\n\tvector<pair<point,point> > Geseg,Geline;\n\tpublic:\n\tvoid line_push(point Gex,point Gey){\n\t\tGeline.push_back(make_pair(Gex,Gey));\n\t}\n\tvoid seg_push(point Gex,point Gey){\n\t\tGeseg.push_back(make_pair(Gex,Gey));\n\t}\n\tvoid point_push(point Gex){\n\t\tGe.push_back(Gex);\n\t}\n\tpoint DIP(pair<point,point> Gex,pdd Gey){\n\t\tdouble Gea=Gey.first,Geb=Gey.second;\n\t\tpoint Ge1=Gex.first,Ge2=Gex.second;\n\t\treturn (Ge1*Geb+Ge2*Gea)/(Gea+Geb);\n\t}\n\tpoint POI(pair<point,point>Gex,pair<point,point> Gey){\n\t\tpair<point,point> Ge1={PRO(Gex,Gey.first),PRO(Gex,Gey.second)};\n\t\tpdd Ger={EXTLEN(Gey.first,Ge1.first),EXTLEN(Gey.second,Ge1.second)};\n\t\treturn DIP(Ge1,Ger);\n\t}\n\tdouble IP(point Gex,point Gey){\n\t\treturn Gex.x*Gey.x+Gex.y*Gey.y;\n\t}\n\tdouble CP(point Gex,point Gey){\n\t\treturn Gex.x*Gey.y-Gey.x*Gex.y;\n\t}\n\tdouble LEN(point Gex){\n\t\treturn sqrt(Gex.x*Gex.x+Gex.y*Gex.y);\n\t}\n\tdouble EXTLEN(point Gex,point Gey){\n\t\treturn LEN(Gex-Gey);\n\t}\n\tpoint PRO(pair<point,point> Gea,point Gex){\n\t\tpoint Ge1=Gex-Gea.second,Ge2=Gea.first-Gea.second;\n\t\treturn Ge2*(IP(Ge1,Ge2)/(LEN(Ge2)*LEN(Ge2)))+Gea.second;\n\t}\n\tpoint REF(pair<point,point> Gea,point Gex){\n\t\tpoint Ge1=PRO(Gea,Gex);\n\t\treturn Ge1*2-Gex;\n\t}\n\tint JUD(point Gea,point Geb,point Gex){\n\t\tif(Gea==Geb||Gex==Geb) return 0;\n\t\tpoint Ge1=Gea-Gex,Ge2=Geb-Gex;\n\t\tdouble Getmp=CP(Ge1,Ge2);\n\t\tif(Getmp>0) return 1;\n\t\tif(Getmp<0) return 2;\n\t\tif(IP(Ge1,Ge2)<0) return 3;\n\t\tif(LEN(Ge1)<LEN(Ge2)) return 4;\n\t\treturn 5;\n\t}\n\tpair<point,point> line_open(int Gex){\n\t\treturn Geline[Gex];\n\t}\n\tpoint point_open(int Gex){\n\t\treturn Ge[Gex];\n\t}\n\tpair<point,point> seg_open(int Gex){\n\t\treturn Geseg[Gex];\n\t}\n};\n\nint q;\ndouble x,xx,y,yy,xxx,yyy;\n\nint main(){\n\tcout<<shosu(10);\n\tcin>>x>>y>>xx>>yy>>q;\n\tfor(int i=0;i<q;i++){\n\t\tcin>>xxx>>yyy;\n\t\tGeom geo;\n\t\tgeo.point_push(point{x,y});\n\t\tgeo.point_push(point{xx,yy});\n\t\tint ans=geo.JUD(geo.point_open(1),point{xxx,yyy},geo.point_open(0));\n\t\tif(ans==1) cout<<\"COUNTER_CLOCKWISE\"<<endl;\n\t\telse if(ans==2) cout<<\"CLOCKWISE\"<<endl;\n\t\telse if(ans==3) cout<<\"ONLINE_BACK\"<<endl;\n\t\telse if(ans==4) cout<<\"ONLINE_FRONT\"<<endl;\n\t\telse cout<<\"ON_SEGMENT\"<<endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nconst double eps = 1e-9;\ninline bool equals(double a, double b) { return fabs(a - b) < eps ;}\n\nclass Point {\npublic:\n    double x, y;\n\n    Point(double x = 0, double y = 0): x(x), y(y) {};\n\n    Point operator + (Point p) { return Point(x + p.x, y + p.y); }\n    Point operator - (Point p) { return Point(x - p.x, y - p.y); }\n    Point operator * (double a) { return Point(a * x, a * y); }\n    Point operator / (double a) { return Point(x / a, y / a); }\n\n    double abs() { return sqrt(norm()); }\n    double norm() { return x * x + y * y; }\n\n    bool operator < (const Point &p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point &p) const {\n        return fabs(x - p.x) < eps && fabs(y - p.y) < eps;\n    }\n};\ntypedef Point Vector;\n\ndouble dot(const Vector& a, const Vector& b) {\n    return a.x * b.x + a.y * b.y;\n}\n\n// return abs of closs product\ndouble cross(const Vector& a, const Vector& b) {\n    return a.x * b.y - a.y * b.x;\n}\n\nint ccw(Point p0, Point p1, Point p2) {\n    const int COUNTER_CLOCKWISE = 1, CLOCKWISE = -1;\n    const int ONLINE_BACK = 2, ONLINE_FRONT = -2, ON_SEGMENT = 0;\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if (cross(a, b) >  eps) return COUNTER_CLOCKWISE;\n    if (cross(a, b) < -eps) return CLOCKWISE;\n    if (dot(a, b)   < -eps) return ONLINE_BACK;\n    if (a.norm() < b.norm()) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\nint main(void) {\n    double x0, y0, x1, y1;\n    cin >> x0 >> y0 >> x1 >> y1;\n    Point a(x0, y0), b(x1, y1);\n    int q;\n    cin >> q;\n    while (q--) {\n        double x, y;\n        cin >> x >> y;\n        int judge = ccw(a, b, Point(x, y));\n        if (judge == -2) cout << \"ONLINE_FRONT\";\n        if (judge == -1) cout << \"CLOCKWISE\";\n        if (judge == 0) cout << \"ON_SEGMENT\";\n        if (judge == 1) cout << \"COUNTER_CLOCKWISE\";\n        if (judge == 2) cout << \"ONLINE_BACK\";\n        cout << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <vector>\n#define EPS 1e-10\nusing namespace std;\n\nstruct P{\n\tdouble x,y;\n\tP(double xx=0,double yy=0){\n\t\tx=xx;\n\t\ty=yy;\n\t}\n\tP operator +(P &p){\n\t\treturn P(x+p.x,y+p.y);\t\n\t}\n\tP operator -(P &p){\n\t\treturn P(x-p.x,y-p.y);\t\n\t}\n\tP operator *(double d){\n\t\treturn P(x*d,y*d);\t\n\t}\n\tP operator /(double d){\n\t\treturn P(x/d,y/d);\t\n\t}\n\tdouble abs(){\n\t\treturn sqrt(norm());\n\t}\n\tdouble norm(){\n\t\treturn x*x+y*y;\n\t}\n\tbool operator ==(const P &p)const{\n\t\treturn fabs(x-p.x)<EPS && fabs(y-p.y)<EPS;\n\t}\n\tdouble dot(P p){\n\t\treturn x*p.x+y*p.y;\n\t}\n\tdouble cross(P p){\n\t\treturn x*p.y-y*p.x;\n\t}\n};\n\ntypedef P Vector;\n\nint ccw(P p0,P p1,P p2){\n\tVector a=p1-p0;\n\tVector b=p2-p0;\n\tif(a.cross(b)>EPS)return 1;\n\tif(a.cross(b)<-EPS)return -1;\n\tif(a.dot(b)<-EPS)return 2;\n\tif(a.norm()<b.norm())return -2;\n\treturn 0;\n}\n\nint main(void){\n\tP p0,p1,p2;\n\tscanf(\"%lf %lf %lf %lf\",&p0.x,&p0.y,&p1.x,&p1.y);\n\tint q;\n\tscanf(\"%d\",&q);\n\tfor(int i=0;i<q;i++){\n\t\tscanf(\"%lf %lf\",&p2.x,&p2.y);\n\t\tint res=ccw(p0,p1,p2);\n\t\tif(res==2)printf(\"ONLINE_FRONT\\n\");\n\t\tif(res==1)printf(\"COUNTER_CLOCKWISE\\n\");\n\t\tif(res==0)printf(\"ON_SEGMENT\\n\");\n\t\tif(res==-1)printf(\"CLOCKWISE\\n\");\n\t\tif(res==-2)printf(\"ONLINE_BACK\\n\");\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "//\n// Created by 李青坪 on 2018/12/1.\n//\n\n#include <cmath>\n#include <cstdio>\n#include <algorithm>\n\n#define EPSLON 1e-10\n#define equals(a, b) (fabs((a) - (b)) < EPSLON)\n\n#define COUNTER_CLOCKWISE 1\n#define CLOCKWISE -1\n#define ONLINE_BACK -2\n#define ONLINE_FRONT 2\n#define ON_SEGMENT 0\nusing namespace std;\n\n// 点\nclass Point {\npublic:\n    double x;\n    double y;\n\n    Point() {}\n\n    Point(double x, double y) : x(x), y(y) {}\n\n    Point operator+(Point a) {\n        return Point(x + a.x, y + a.y);\n    }\n\n    Point operator-(Point a) {\n        return Point(x - a.x, y - a.y);\n    }\n\n    Point operator*(double a) {\n        return Point(x * a, y * a);\n    }\n\n    Point operator/(double a) {\n        return Point(x / a, y / a);\n    }\n\n    double norm() {\n        return x * x + y * y;\n    }\n\n    double absVector() {\n        return sqrt(norm());\n    }\n\n    bool operator==(Point a) const {\n        return equals(x, a.x) && equals(y, a.y);\n    }\n};\n\ntypedef Point Vector;\n\n// 线段\nclass Segment {\npublic:\n    Point a, b;\n};\n\ntypedef Segment Line;\n\ndouble dot(Vector a, Vector b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n    return a.x * b.y - a.y * b.x;\n}\n\nint ccw(Segment s, Point p) {\n    Vector v1 = s.b - s.a;\n    Vector v2 = p - s.a;\n    if (cross(v1, v2) > 0) return COUNTER_CLOCKWISE;\n    if (cross(v1, v2) < 0) return CLOCKWISE;\n    if (dot(v1, v2) < 0) return ONLINE_BACK;\n    if (v1.norm() < v2.norm()) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\n\nint n;\n\n\nint main() {\n    Segment s;\n    Point p[2];\n    scanf(\"%lf %lf %lf %lf\", &p[0].x, &p[0].y, &p[1].x, &p[1].y);\n    s.a = p[0];\n    s.b = p[1];\n    scanf(\"%d\", &n);\n    Point point;\n    for (int i = 0; i < n; ++i) {\n        double x, y;\n        scanf(\"%lf %lf\", &x, &y);\n        point = Point(x, y);\n        int re = ccw(s, point);\n        switch (re){\n            case COUNTER_CLOCKWISE:\n                printf(\"%s\\n\", \"COUNTER_CLOCKWISE\");\n                break;\n            case CLOCKWISE:\n                printf(\"%s\\n\", \"CLOCKWISE\");\n                break;\n            case ONLINE_BACK:\n                printf(\"%s\\n\", \"ONLINE_BACK\");\n                break;\n            case ONLINE_FRONT:\n                printf(\"%s\\n\", \"ONLINE_FRONT\");\n                break;\n            default:\n                printf(\"%s\\n\", \"ON_SEGMENT\");\n        }\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef pair<ll, ll> pll;\n#define INF 1<<30\n#define LINF 1LL<<60\n\ntypedef long double ld;\ntypedef complex<ld> Point;\nconst ld eps = 1e-9, pi = acos(-1.0);\nnamespace std {\n    bool operator<(const Point &lhs, const Point &rhs) {\n        if (lhs.real() < rhs.real() - eps) return true;\n        if (lhs.real() > rhs.real() + eps) return false;\n        return lhs.imag() < rhs.imag();\n    }\n}\nPoint input_point() {ld x, y; cin >> x >> y; return Point(x, y);} // ????????\\???\nbool eq(ld a, ld b) {return (abs(a - b) < eps);} // ????????????????????????\nld dot(Point a, Point b) {return real(conj(a) * b);} // ??????\nld cross(Point a, Point b) {return imag(conj(a) * b);} // ??????\n\n// ??´????????????\nclass Line {\npublic:\n    Point a, b;\n    Line() : a(Point(0, 0)), b(Point(0, 0)) {}\n    Line(Point a, Point b) : a(a), b(b) {}\n    Point operator[](const int _num) {\n        if (_num == 0)return a;\n        else if (_num == 1)return b;\n        else assert(false);\n    }\n};\n\n// ????????????\nclass Circle {\npublic:\n    Point p;\n    ld r;\n    Circle() : p(Point(0, 0)), r(0) {}\n    Circle(Point p, ld r) : p(p), r(r) {}\n};\n\n// CCW\nint ccw(Point a, Point b, Point c) {\n    b -= a; c -= a;\n    if (cross(b, c) > eps) return 1;   // a,b,c??????????¨???¨?????????????????¶\n    if (cross(b, c) < -eps) return -1; // a,b,c???????¨???¨?????????????????¶\n    if (dot(b, c) < 0) return 2;       // c,a,b???????????´???????????¶\n    if (norm(b) < norm(c)) return -2;  // a,b,c???????????´???????????¶\n    return 0;                          // a,c,b???????????´???????????¶\n}\n\nint main(void) {\n    cin.tie(0); ios::sync_with_stdio(false);\n    Point a = input_point(), b = input_point();\n    int q; cin >> q;\n    for(int i = 0; i < q;i++){\n        Point c = input_point();\n        int ret = ccw(a,b,c);\n        switch(ret){\n            case 1:\n                cout << \"COUNTER_CLOCKWISE\" << endl; break;\n            case -1:\n                cout << \"CLOCKWISE\" << endl; break;\n            case 2:\n                cout << \"ONLINE_BACK\" << endl; break;\n            case -2:\n                cout << \"ONLINE_FRONT\" << endl; break;\n            case 0:\n                cout << \"ON_SEGMENT\" << endl; break;\n        }\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int, int> pairInt;\n#define FOR(i, n) for (int i = 0; i < int(n); i++)\n#define FOR1(i, m, n) for (int i = int(m); i < int(n); i++)\n#define MAX(a, b) ((a) >= (b) ? (a) : (b))\n#define MIN(a, b) ((a) <= (b) ? (a) : (b))\n\nint main(int argc, char *argv[]) {\n  array<int, 2> p0, p1, v1;\n  int q;\n\n  scanf(\"%d%d%d%d%d\", &p0[0], &p0[1], &p1[0], &p1[1], &q);\n  v1[0] = p1[0] - p0[0];\n  v1[1] = p1[1] - p0[1];\n\n  FOR(i, q) {\n    array<int, 2> p2, v2;\n    scanf(\"%d%d\", &p2[0], &p2[1]);\n    v2[0] = p2[0] - p0[0];\n    v2[1] = p2[1] - p0[1];\n\n    int op = v1[0] * v2[1] - v1[1] * v2[0];\n    int ip = v1[0] * v2[0] + v1[1] * v2[1];\n\n#ifdef DEBUG\n    printf(\"v1=(%d,%d),v2=(%d,%d),op=%d,ip=%d\\n\", v1[0], v1[1], v2[0], v2[1],\n           op, ip);\n#endif\n\n    if (op > 0)\n      printf(\"COUNTER_CLOCKWISE\\n\");\n    else if (op < 0)\n      printf(\"CLOCKWISE\\n\");\n    else if (ip < 0)\n      printf(\"ONLINE_BACK\\n\");\n    else if (v2[0] > v1[0] || v2[1] > v1[1])\n      printf(\"ONLINE_FRONT\\n\");\n    else\n      printf(\"ON_SEGMENT\\n\");\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define REP(i,a,b) for(int i=a;i<b;i++)\n#define rep(i,n) REP(i,0,n)\n\ntypedef complex<double> P;\n\n#define EPS (1e-7)\n\nbool operator < (P const& a, P const& b) {\n  return (a.real() != a.real()) ? a.real() < b.real() : a.imag() < b.imag();\n}\n\ndouble dot(P const& a, P const& b) {\n  return real(conj(a)*b);\n}\n\ndouble cross(P const& a, P const& b) {\n  return imag(conj(a)*b);\n}\n\nint ccw(P a, P b, P c) {\n  b -= a, c -= a;\n  if(cross(b, c) > 0) return +1; // counter clockwise\n  if(cross(b, c) < 0) return -1;  // clockwise\n  if(dot(b, c) < 0) return +2;    // c-a-b\n  if(norm(b) < norm(c)) return -2;  // a-b-c\n  return 0; // on segment\n}\n\nint main () {\n  \n  P p0, p1; cin >> p0.real() >> p0.imag() >> p1.real() >> p1.imag();\n  int q; cin >> q;\n  rep(i,q) {\n    P p3; cin >> p3.real() >> p3.imag();\n    int ret = ccw(p0, p1, p3);\n    if(ret == +1) cout << \"COUNTER_CLOCKWISE\\n\";\n    if(ret == -1) cout << \"CLOCKWISE\\n\";\n    if(ret == +2) cout << \"ONLINE_BACK\\n\";\n    if(ret == -2) cout << \"ONLINE_FRONT\\n\";\n    if(ret == 0) cout << \"ON_SEGMENT\\n\";\n  }\n  \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long int ll;\ntypedef pair<int, int> pii;\ntypedef vector<int> vi;\ntypedef vector<pair<int, int> > vii;\n#define rrep(i, m, n) for(int (i)=(m); (i)<(n);  (i)++)\n#define erep(i, m, n) for(int (i)=(m); (i)<=(n); (i)++)\n#define  rep(i, n)    for(int (i)=0; (i)<(n);  (i)++)\n#define rrev(i, m, n) for(int (i)=(n)-1; (i)>=(m); (i)--)\n#define erev(i, m, n) for(int (i)=(n); (i)>=(m); (i)--)\n#define  rev(i, n)    for(int (i)=(n)-1; (i)>=0; (i)--)\n#define vrep(i, c)    for(__typeof((c).begin())i=(c).begin(); i!=(c).end(); i++)\n#define  ALL(v)       (v).begin(), (v).end()\n#define mp            make_pair\n#define pb            push_back\ntemplate<class T, class S> inline bool minup(T& m, S x){ return m>(T)x ? (m=(T)x, true) : false; }\ntemplate<class T, class S> inline bool maxup(T& m, S x){ return m<(T)x ? (m=(T)x, true) : false; }\n\nconst int    INF = 1000000000;\nconst ll     MOD = 1000000007LL;\nconst double EPS = 1E-12;\n\nstruct Point : public complex<double>\n{\npublic:\n  Point() { this->real(0);  this->imag(0); }\n  Point(const double& x, const double& y) { this->real(x);  this->imag(y); }\n  Point(const complex<double> w)  { this->real(w.real());  this->imag(w.imag()); }\n  inline double dot(Point p){ return (conj(*this) * p).real(); }  // ??????\n  inline double det(Point p){ return (conj(*this) * p).imag(); }  // ??????\n};\n\nnamespace std\n{\n  inline bool operator < (const Point& a, const Point& b)\n  {\n    return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n  }\n}\ntypedef vector<Point> Polygon;\ninline Point currPoint(vector<Point> P, int i){ return P[i]; }\ninline Point nextPoint(vector<Point> P, int i){ return P[(i+1)%P.size()]; }\ninline Point diffPoint(vector<Point> P, int i){ return nextPoint(P, i) - currPoint(P, i); }\n\n\nint ccw(Point a, Point b, Point c)\n{\n  b -= a;\n  c -= a;\n  if(b.det(c) > 0.0)    return  1;         // counter clockwise\n  if(b.det(c) < 0.0)    return -1;         // clockwise\n  if(b.dot(c) < 0.0)    return  2;         // c--a--b on line\n  if(norm(b) < norm(c)) return -2;         // a--b--c on line\n  return 0;\n}\n\ndouble x, y;\nint q;\n\nint main()\n{\n  cin >> x >> y;  Point P = Point(x, y);\n  cin >> x >> y;  Point Q = Point(x, y);\n\n  cin >> q;\n  while(q--){\n    cin >> x >> y;\n    int c = ccw(P, Q, Point(x, y));\n    if(c ==  1){ puts(\"COUNTER_CLOCKWISE\");  continue; }\n    if(c == -1){ puts(\"CLOCKWISE\");          continue; }\n    if(c ==  2){ puts(\"ONLINE_BACK\");        continue; }\n    if(c == -2){ puts(\"ONLINE_FRONT\");       continue; }\n    puts(\"ON_SEGMENT\");\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\n#define _overload(_1,_2,_3,name,...) name\n#define _rep(i,n) _range(i,0,n)\n#define _range(i,a,b) for(int i=int(a);i<int(b);++i)\n#define rep(...) _overload(__VA_ARGS__,_range,_rep,)(__VA_ARGS__)\n\n#define _rrep(i,n) _rrange(i,n,0)\n#define _rrange(i,a,b) for(ll i=int(a)-1;i>=int(b);--i)\n#define rrep(...) _overload(__VA_ARGS__,_rrange,_rrep,)(__VA_ARGS__)\n\n#define _all(arg) begin(arg),end(arg)\n#define uniq(arg) sort(_all(arg)),(arg).erase(unique(_all(arg)),end(arg))\n#define getidx(ary,key) lower_bound(_all(arg),key)-begin(arg)\n#define clr(a,b) memset((a),(b),sizeof(a))\n#define bit(n) (1LL<<(n))\n\nusing namespace std;\n\nusing R=long double;\nconst R EPS = 1E-11;\nconst R INF = 1E40;\nconstexpr R PI = acos(R(-1));\ninline int sgn(const R& r){ return (r > EPS) - (r < -EPS);}\n\nusing P=complex<R>;\n\nconstexpr P O = P(0,0);\n\nistream& operator >> (istream& is,P& p){ R x,y;is >> x >> y; p=P(x,y); return is;}\nostream& operator << (ostream& os,P& p){ os << real(p) << \" \" << imag(p); return os;}\n\n//?????? dot ?????? det\ninline R dot(P o,P a,P b){a-=o,b-=o; return real(conj(a)*b);}\ninline R det(P o,P a,P b){a-=o,b-=o; return imag(conj(a)*b);}\n\nusing L=struct{P s,t;};\n\n// ?°???± verify AOJ CGL_1_A\nP proj(P o,P a,P b){ a-=o,b-=o; return a*real(b/a);}\nP proj(L l,P p){ return l.s+proj(l.s,l.t,p);}\n// ????°? verify AOJ CGL_1_B\nP refl(L l,P p){ return R(2.0)*proj(l,p)-p;}\n// CCW verify AOJ CGL_1_C\nenum CCW{ LEFT = 1,RIGHT = 2,BACK = 4,FRONT = 8,ON = 16};\ninline int ccw(P o,P a, P b) {//???a??¨???b???????????????????????????\n\tif (sgn(det(o,a,b)) > 0) return LEFT;    // counter clockwise\n\tif (sgn(det(o,a,b)) < 0) return RIGHT;   // clockwise\n\tif (sgn(dot(o,a,b)) < 0) return BACK;    // b--base--a on line\n\tif (sgn(norm(a)-norm(b)) < 0) return FRONT;   // base--a--b on line\n\treturn ON;// base--b--a on line  a??¨b????????????????????????\n}\n\nint main(void){\n\tP a,b,p;\n\tint n;\n\tcin >> a >> b >> n;\n\trep(i,n){\n\t\tcin >> p;\n\t\tint res=ccw(a,b,p);\n\t\tif(res==LEFT) cout << \"COUNTER_CLOCKWISE\" << endl;\n\t\tif(res==RIGHT) cout << \"CLOCKWISE\" << endl;\n\t\tif(res==BACK) cout << \"ONLINE_BACK\" << endl;\n\t\tif(res==FRONT) cout << \"ONLINE_FRONT\" << endl;\n\t\tif(res==ON) cout << \"ON_SEGMENT\" << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ntemplate<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return true; } return false; }\ntemplate<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return true; } return false; }\nusing ll = long long;\nusing P = pair<ll, ll>;\nconst long double PI = acos(-1.0L);\nll GCD(ll a, ll b) { return b?GCD(b, a%b):a; }\nll LCM(ll a, ll b) { return a/GCD(a, b)*b; }\n\nusing CP = complex<long double>;\n\nconst long double EPS = 1e-10;     // 許容する誤差ε\n#define EQ(a, b) (abs((a)-(b)) < EPS)   // 2つのスカラーが等しいかどうか\n#define EQV(a, b) (EQ((a).real(), (b).real()) && EQ((a).imag(), (b).imag()))    // 2つのベクトルが等しいかどうか\n\n// double length = abs(a);     // ベクトルaの絶対値\n// double distance = abs(a-b);     // 2点a,b間の距離\n// CP b = a/abs(a);    // ベクトルaの単位ベクトル\n// CP n1 = a*CP(0,+1); CP n2 = a*CP(0,-1);  // ベクトルaの法線ベクトル\n// CP un1 = (a*CP(0,+1)/abs(a)); CP un2 = (a*CP(0,-1)/abs(a));  // ベクトルaの単位法線ベクトル\n\n// 内積(dot product) : a・b = |a||b|cosΘ\nlong double dot(CP a, CP b) {\n    return (a.real()*b.real() + a.imag()*b.imag());\n}\n\n// 外積(cross product) : a×b = |a||b|sinΘ\nlong double cross(CP a, CP b) {\n    return (a.real()*b.imag() - a.imag()*b.real());\n}\n\n// 2直線の直交判定 : a⊥b ⇔ dot(a,b) = 0\nint is_orthogonal(CP a1, CP a2, CP b1, CP b2) {\n    return EQ(dot(a1-a2, b1-b2), 0.0);\n}\n\n// 2直線の平行判定 : a//b ⇔ cross(a,b) = 0\nint is_parallel(CP a1, CP a2, CP b1, CP b2) {\n    return EQ(cross(a1-a2, b1-b2), 0.0);\n}\n\n// 点cが直線a,b上にあるかないか\nint is_point_on_line(CP a, CP b, CP c) {\n    return EQ(cross(b-a, c-a), 0.0);\n}\n\n// 点cが線分a,b上にあるかないか\nint is_point_on_lines(CP a, CP b, CP c) {\n    // |a-c|+|c-b| <= |a-b|なら線分上\n    return (abs(a-c)+abs(c-b) < abs(a-b)+EPS);\n}\n\n// 点a,bを通る直線と点cとの距離\nlong double distance_line_p(CP a, CP b, CP c) {\n    return abs(cross(b-a, c-a))/abs(b-a);\n}\n\n// 点a,bを端点とする線分と点cとの距離\nlong double distance_lines_p(CP a, CP b, CP c) {\n    if(dot(b-a, c-a) < EPS) return abs(c-a);\n    if(dot(a-b, c-b) < EPS) return abs(c-b);\n    return abs(cross(b-a, c-a))/abs(b-a);\n}\n\n// a1,a2を端点とする線分とb1,b2を端点とする線分の交差判定\nint is_intersected_lines(CP a1, CP a2, CP b1, CP b2) {\n    return (cross(a2-a1, b1-a1)*cross(a2-a1, b2-a1) < EPS) &&\n           (cross(b2-b1, a1-b1)*cross(b2-b1, a2-b1) < EPS);\n}\n\n// a1,a2を端点とする線分とb1,b2を端点とする線分の交点計算\nCP intersection_lines(CP a1, CP a2, CP b1, CP b2) {\n    CP b = b2-b1;\n    long double d1 = abs(cross(b, a1-b1));\n    long double d2 = abs(cross(b, a2-b1));\n    long double t = d1/(d1+d2);\n    return a1+(a2-a1)*t;\n}\n\n// a1,a2を通る直線とb1,b2を通る直線の交差判定\nint is_intersected_line(CP a1, CP a2, CP b1, CP b2) {\n    return !EQ(cross(a1-a2, b1-b2), 0.0);\n}\n\n// a1,a2を通る直線とb1,b2を通る直線の交点計算(平行ではない前提)\nCP intersection_line(CP a1, CP a2, CP b1, CP b2) {\n    CP a = a2-a1; CP b = b2-b1;\n    return a1 + a*cross(b, b1-a1)/cross(b, a);\n}\n\n// s,tを通る直線に対する点pの射影\nCP projection(CP s, CP t, CP p) {\n    if(EQV(s, t)) return s;\n    CP base = t-s;\n    return s + base*(dot(p-s, base)/norm(base));\n}\n\n// s,tを通る直線に対する点pの反射\nCP reflection(CP s, CP t, CP p) {\n    CP tmp = projection(s, t, p) - p;\n    return p + tmp*2.0L;\n}\n\n// 3点の位置関係を判定\nint calc_clockwise(CP p0, CP p1, CP p2) {\n    CP x = p1-p0, y = p2-p0;\n    if(cross(x, y) > EPS) return 1;     // \"COUNTER_CLOCKWISE\"\n    if(cross(x, y) < -EPS) return -1;   // \"CLOCKWISE\"\n    if(dot(x, y) < 0) return 2;         // \"ONLINE_BACK\"\n    if(norm(x) < norm(y)) return -2;    // \"ONLINE_FRONT\"\n    return 0;                           // \"ON_SEGMENT\" \n}\n\nint main() {\n    long double ax, ay, bx, by;\n    cin >> ax >> ay >> bx >> by;\n    CP p0(ax, ay), p1(bx, by);\n    int q; cin >> q;\n    while(q--) {\n        long double px, py; cin >> px >> py;\n        CP p2(px, py);\n        int ch = calc_clockwise(p0, p1, p2);\n        if(ch == 0) cout << \"ON_SEGMENT\" << endl;\n        else if(ch == 1) cout << \"COUNTER_CLOCKWISE\" << endl;\n        else if(ch == -1) cout << \"CLOCKWISE\" << endl;\n        else if(ch == 2) cout << \"ONLINE_BACK\" << endl;\n        else cout << \"ONLINE_FRONT\" << endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\nstruct point\n{\n    double x,y;\n};\ndouble dist(point a,point b)\n{\n    return (sqrt((((b.x-a.x)*(b.x-a.x))+((b.y-a.y)*(b.y-a.y)))));\n}\nint orientation(point a,point b,point c)\n{\n    double val=((b.y-a.y)*(c.x-b.x))-((c.y-b.y)*(b.x-a.x));\n    if(val==0)\n    {\n        if(dist(a,c)+dist(c,b)==dist(a,b))\n            return 0;\n        else if(dist(a,c)>dist(c,b))\n            return 1;\n        else\n            return 2;\n    }\n    return (val>0)? 3:4;\n}\nint main()\n{\n    int t,res;\n    double x1,y1,x2,y2,x3,y3;\n    point p,q,r;\n    cin>>x1>>y1>>x2>>y2;\n    p.x=x1;\n    p.y=y1;\n    q.x=x2;\n    q.y=y2;\n    cin>>t;\n    while(t--)\n    {\n        cin>>x3>>y3;\n        r.x=x3;\n        r.y=y3;\n        res=orientation(p,q,r);\n        if(res==0)\n        {\n            cout<<\"ON_SEGMENT\"<<endl;\n        }\n        else if(res==1)\n        {\n            cout<<\"ONLINE_FRONT\"<<endl;\n        }\n        else if(res==2)\n        {\n            cout<<\"ONLINE_BACK\"<<endl;\n        }\n        else if(res==3)\n        {\n            cout<<\"CLOCKWISE\"<<endl;\n        }\n        else if(res==4)\n        {\n            cout<<\"COUNTER_CLOCKWISE\"<<endl;\n        }\n    }\n\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#define eps 1e-9\n#define double long long\nusing namespace std;\nstruct point{\n\tdouble x,y;\n\tvoid read(){scanf(\"%lld%lld\",&x,&y);}\n\tvoid write(){printf(\"%.9f %.9f\\n\",x,y);}\n\tpoint(double X=0.0,double Y=0.0):x(X),y(Y){}\n\tpoint operator +(const point a)const{return point(x+a.x,y+a.y);}\n\tpoint operator -(const point a)const{return point(x-a.x,y-a.y);}\n\tpoint operator *(double a)const{return point(x*a,y*a);}\n\tpoint operator /(double a)const{return point(x/a,y/a);} \n};\ndouble dis(point a){return a.x*a.x+a.y*a.y;}\ndouble dot(point a,point b){return a.x*b.x+a.y*b.y;}\ndouble cross(point a,point b){return a.x*b.y-a.y*b.x;}\nshort int on_left(point o,point a,point b)//oa->ob 0:L 1:R 2:D 3:U 4:O\n{\n\tif(cross(a-o,b-o)) return cross(a-o,b-o)<0;\n\tif(dot(a-o,b-o)<0) return 2;\n\treturn 3+(dis(a-o)>=dis(b-o));\n}\npoint p1,p2;\nconst char s[5][30]={\"COUNTER_CLOCKWISE\",\"CLOCKWISE\",\"ONLINE_BACK\",\"ONLINE_FRONT\",\"ON_SEGMENT\"};\nint main()\n{\n\tint n;\n\tp1.read();p2.read();\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tpoint p;\n\t\tp.read();\n\t\tputs(s[on_left(p1,p2,p)]);\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<cmath>\n#include<iostream>\n#include<iomanip>\n#include<algorithm>\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b)) < EPS)\nusing namespace std;\n\nclass Point {\npublic:\n    double x, y;\n\n    Point(double x=0, double y=0): x(x), y(y) {}\n\n    Point operator + (Point p) { return Point(x+p.x, y+p.y); }\n    Point operator - (Point p) { return Point(x - p.x, y - p.y); }\n    Point operator * (double a) { return Point(x*a, y*a); }\n    Point operator / (double a) { return Point(x/ a, y/ a); }\n\n    double abs() { return sqrt(norm()); }\n    double norm() { return x*x, y*y; }\n    bool operator < (const Point &p) const {\n\treturn x != p.x ? x<p.x : y < p.y;\n    }\n    \n    bool operator == (const Point &p) const {\n\treturn fabs(x-p.x) < EPS && fabs(y-p.y) < EPS;\n    }\n};\n\ntypedef Point Vector;\n\nstruct Segment {\n    Point p0, p1;\n};\n\ntypedef Segment Line;\n\ndouble dot(Vector a, Vector b) {\n    return a.x*b.x + a.y*b.y;\n}\n\ndouble norm(Vector a) {\n    return a.x*a.x + a.y*a.y;\n}\n\ndouble abs(Vector a){\n    return sqrt(norm(a));\n}\n\n/*\n  ???????????§??????????????¨??????????????°??????\n  |a*b|=|a||b|sin(theta)\n */\ndouble cross(Vector a, Vector b){ \n    return a.x*b.y - a.y*b.x;\n}\n    \nint main() {\n    int n,i,d;\n    \n    Point p0, p1, p2;\n    cin >> p0.x >> p0.y >> p1.x >> p1.y;\n    cin >> n;\n    for(i=0;i<n;i++){\n\tcin >>  p2.x >> p2.y;\n\t\n\tif (cross(p1-p0, p2-p0) > EPS) cout << \"COUNTER_CLOCKWISE\" << endl;\n\telse if (cross(p1-p0, p2-p0) < -EPS) cout << \"CLOCKWISE\" << endl;\n\telse if (dot(p1-p0, p2-p0)/ (abs(p1-p0)*abs(p2-p0)) + 1 < EPS) cout << \"ONLINE_BACK\" << endl;\n\telse if (abs(p2-p0) > abs(p1-p0)) cout << \"ONLINE_FRONT\" << endl;\n\telse cout << \"ON_SEGMENT\" << endl;\n\n    }\n    return 0;\n\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <stdio.h>\n\nusing namespace std;\n\n\nint main(void){\n\n    pair<double, double> p0, p1, p2;\n    int n;\n    cin >> p0.first >> p0.second >> p1.first >> p1.second;\n    cin >> n;\n\n    while(n--){\n        cin >> p2.first >> p2.second;\n        // ??????\n        double crossProduct = (p1.first - p0.first)*(p2.second - p0.second)\n            - (p1.second - p0.second)*(p2.first - p0.first);\n\n        if(crossProduct > 0){ // counter clockwise\n            cout << \"COUNTER_CLOCKWISE\" << endl;\n        }else if(crossProduct < 0){ // clockwise\n            cout << \"CLOCKWISE\" << endl;\n        }else{ // on line\n            // ??????\n            double innerProduct = (p1.first - p0.first)*(p2.first - p0.first)\n                + (p1.second - p0.second)*(p2.second - p0.second);\n            if(innerProduct >= 0){ // ????????????\n                double a, b;\n                a = sqrt( pow(p1.first - p0.first, 2) + pow(p1.second - p0.second, 2) );\n                b = sqrt( pow(p2.first - p0.first, 2) + pow(p2.second - p0.second, 2) );\n                if(a >= b){\n                    cout << \"ON_SEGMENT\" << endl;\n                }else{\n                    cout << \"ONLINE_FRONT\" << endl;\n                }\n            }else if(innerProduct < 0){ // ?????????\n                cout << \"ONLINE_BACK\" << endl;\n            }\n        }\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\n\nusing namespace std;\n\ntemplate <typename T>\nvoid printv(const vector<T> &v)\n{\n    int sz = v.size();\n    for (int i = 0; i < sz; i++)\n    {\n        cout << v[i] << \" \\n\"[i == sz - 1];\n    }\n}\n\nusing ld = long double;\nusing Point = std::complex<ld>;\n\nconst ld eps = 1e-9, pi = acos(-1.0);\n\nnamespace std\n{\nbool operator<(const Point &lhs, const Point &rhs)\n{\n    if (lhs.real() < rhs.real() - eps)\n        return true;\n    if (lhs.real() > rhs.real() + eps)\n        return false;\n    return lhs.imag() < rhs.imag();\n}\n} // namespace std\n\nPoint input_point()\n{\n    ld x, y;\n    std::cin >> x >> y;\n    return Point(x, y);\n}\n\nbool eq(ld a, ld b)\n{\n    return (abs(a - b) < eps);\n}\n\nld dot(Point a, Point b)\n{\n    return real(conj(a) * b);\n}\n\nld cross(Point a, Point b)\n{\n    return imag(conj(a) * b);\n}\n\n// CCW::counter clockwise\nint ccw(Point a, Point b, Point c)\n{\n    b -= a;\n    c -= a;\n    if (cross(b, c) > eps)\n        return 1; // a,b,c : counter-clockwise\n    if (cross(b, c) < -eps)\n        return -1; // a,b,c : clockwise\n    if (dot(b, c) < 0)\n        return 2; // c,a,b : on a line\n    if (norm(b) < norm(c))\n        return -2; // a,b,c : on a line\n    return 0;      // a,c,b : on a line\n}\n\nclass Line\n{\npublic:\n    Point a, b;\n    Line() : a(Point(0, 0)), b(Point(0, 0)) {}\n    Line(Point a, Point b) : a(a), b(b) {}\n};\n\nld dot(Line l, Line m)\n{\n    return dot((l.a - l.b), (m.a - m.b));\n}\n\nclass Circle\n{\npublic:\n    Point p;\n    ld r;\n    Circle() : p(Point(0, 0)), r(0) {}\n    Circle(Point p, ld r) : p(p), r(r) {}\n};\n\n// l:line, m:line が交点を持つか\nbool isis_ll(Line l, Line m)\n{\n    return !eq(cross(l.b - l.a, m.b - m.a), 0);\n}\n\n// l:line, s:segment\nbool isis_ls(Line l, Line s)\n{\n    return isis_ll(l, s) &&\n           (cross(l.b - l.a, s.a - l.a) * cross(l.b - l.a, s.b - l.a) < eps);\n}\n\n// s:segment, t:segment\nbool isis_ss(Line s, Line t)\n{\n    return ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 &&\n           ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0;\n}\n\n// p が l:line 上に存在するか\nbool isis_lp(Line l, Point p)\n{\n    return (abs(cross(l.b - p, l.a - p)) < eps);\n}\n\nbool isis_sp(Line s, Point p)\n{\n    return (abs(s.a - p) + abs(s.b - p) - abs(s.b - s.a) < eps);\n}\n\n// p から l に下ろした足との交点\nPoint proj(Line l, Point p)\n{\n    ld t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n    return l.a + t * (l.a - l.b);\n}\n\n// l:line, t:line の交点\nPoint is_ll(Line l, Line m)\n{\n    Point lv = l.b - l.a, mv = m.b - m.a;\n    assert(cross(lv, mv) != 0);\n    return l.a + lv * cross(mv, m.a - l.a) / cross(mv, lv);\n}\n\n// p, l:line の距離\nld dist_lp(Line l, Point p)\n{\n    return abs(p - proj(l, p));\n}\n\nld dist_ll(Line l, Line m)\n{\n    return isis_ll(l, m) ? 0 : dist_lp(l, m.a);\n}\n\nld dist_ls(Line l, Line s)\n{\n    return isis_ls(l, s) ? 0 : std::min(dist_lp(l, s.a), dist_lp(l, s.b));\n}\n\nld dist_sp(Line s, Point p)\n{\n    Point r = proj(s, p);\n    return isis_sp(s, r) ? abs(r - p) : std::min(abs(s.a - p), abs(s.b - p));\n}\n\nld dist_ss(Line s, Line t)\n{\n    if (isis_ss(s, t))\n        return 0;\n    return std::min({dist_sp(s, t.a), dist_sp(s, t.b), dist_sp(t, s.a), dist_sp(t, s.b)});\n}\n\n// a, b の垂直二等分線. a -> b を90度反時計回り回転\nLine bisector(Point a, Point b)\n{\n    Point mid = (a + b) * Point(0.5, 0);\n    return Line(mid, mid + (b - a) * Point(0, pi / 2));\n}\n\n// 直線 l, m のなす角を求める\nld degree_ll(Line l, Line m)\n{\n    ld cos_shita = dot(l, m) / (abs(l.b - l.a) * abs(m.b - m.a));\n    if (cos_shita < -1.0)\n        cos_shita = -1.0;\n    if (cos_shita > 1.0)\n        cos_shita = 1.0;\n    ld shita = acos(cos_shita);\n    // shita = sita * 180.0 / PI;\n    return shita;\n}\n\n// c1, c2 の交点\nstd::vector<Point> is_cc(Circle c1, Circle c2)\n{\n    std::vector<Point> res;\n    ld d = abs(c1.p - c2.p);\n    ld rc = (d * d + c1.r * c1.r - c2.r * c2.r) / (2 * d);\n    ld dfr = c1.r * c1.r - rc * rc;\n    if (abs(dfr) < eps)\n        dfr = 0.0;\n    else if (dfr < 0.0)\n        return res; // no intersection\n    ld rs = sqrt(dfr);\n    Point diff = (c2.p - c1.p) / d;\n    res.emplace_back(c1.p + diff * Point(rc, rs));\n    if (dfr != 0.0)\n        res.emplace_back(c1.p + diff * Point(rc, -rs));\n    return res;\n}\n\nstd::vector<Point> is_lc(Circle c, Line l)\n{\n    std::vector<Point> res;\n    ld d = dist_lp(l, c.p);\n    if (d < c.r + eps)\n    {\n        ld len = (d > c.r) ? 0.0 : sqrt(c.r * c.r - d * d); //safety;\n        Point nor = (l.a - l.b) / abs(l.a - l.b);\n        res.emplace_back(proj(l, c.p) + len * nor);\n        res.emplace_back(proj(l, c.p) - len * nor);\n    }\n    return res;\n}\n\nstd::vector<Point> is_sc(Circle c, Line l)\n{\n    std::vector<Point> v = is_lc(c, l), res;\n    for (Point p : v)\n        if (isis_sp(l, p))\n            res.emplace_back(p);\n    return res;\n}\n\n// p から c への接線\nstd::vector<Line> tangent_cp(Circle c, Point p)\n{\n    std::vector<Line> ret;\n    Point v = c.p - p;\n    ld d = abs(v);\n    ld l = sqrt(norm(v) - c.r * c.r);\n    if (std::isnan(l))\n    {\n        return ret;\n    }\n    Point v1 = v * Point(l / d, c.r / d);\n    Point v2 = v * Point(l / d, -c.r / d);\n    ret.emplace_back(Line(p, p + v1));\n    if (l < eps)\n        return ret;\n    ret.emplace_back(Line(p, p + v2));\n    return ret;\n}\n\n// c1, c2 の共通接線\nstd::vector<Line> tangent_cc(Circle c1, Circle c2)\n{\n    std::vector<Line> ret;\n    if (abs(c1.p - c2.p) - (c1.r + c2.r) > -eps)\n    {\n        Point center = (c1.p * c2.r + c2.p * c1.r) / (c1.r + c2.r);\n        ret = tangent_cp(c1, center);\n    }\n    if (abs(c1.r - c2.r) > eps)\n    {\n        Point out = (-c1.p * c2.r + c2.p * c1.r) / (c1.r - c2.r);\n        std::vector<Line> nret = tangent_cp(c1, out);\n        ret.insert(ret.end(), nret.begin(), nret.end());\n    }\n    else\n    {\n        Point v = c2.p - c1.p;\n        v /= abs(v);\n        Point q1 = c1.p + v * Point(0, 1) * c1.r;\n        Point q2 = c1.p + v * Point(0, -1) * c1.r;\n        ret.emplace_back(Line(q1, q1 + v));\n        ret.emplace_back(Line(q2, q2 + v));\n    }\n    return ret;\n}\n\nusing Polygon = std::vector<Point>;\n\nld area(const Polygon &p)\n{\n    ld res = 0;\n    int n = p.size();\n    for (int i = 0; i < n; i++)\n    {\n        res += cross(p[i], p[(i + 1) % n]);\n    }\n    return res / 2;\n}\n\nbool is_counter_clockwise(const Polygon &poly)\n{\n    ld angle = 0;\n    int n = poly.size();\n    for (int i = 0; i < n; i++)\n    {\n        Point a = poly[i], b = poly[(i + 1) % n], c = poly[(i + 2) % n];\n        angle += arg((c - b) / (b - a));\n    }\n    return angle > eps;\n}\n\n// -1 => out\n//  0 => on\n//  1 => in\nint is_in_polygon(const Polygon &poly, Point p)\n{\n    ld angle = 0;\n    int n = poly.size();\n    for (int i = 0; i < n; i++)\n    {\n        Point a = poly[i], b = poly[(i + 1) % n];\n        if (isis_sp(Line(a, b), p))\n            return 1;\n        angle += arg((b - p) / (a - p));\n    }\n    return eq(angle, 0) ? 0 : 2;\n}\n\n// 凸包\nPolygon convex_hull(std::vector<Point> ps)\n{\n    int n = ps.size();\n    int k = 0;\n    sort(ps.begin(), ps.end());\n    Polygon ch(2 * n);\n    for (int i = 0; i < n; ch[k++] = ps[i++])\n        while (k >= 2 && ccw(ch[k - 2], ch[k - 1], ps[i]) <= 0)\n            --k;\n    for (int i = n - 2, t = k + 1; i >= 0; ch[k++] = ps[i--])\n        while (k >= t && ccw(ch[k - 2], ch[k - 1], ps[i]) <= 0)\n            --k;\n    ch.resize(k - 1);\n    return ch;\n}\n\n// 凸包カット\nPolygon convex_cut(const Polygon &ps, Line l)\n{\n    int n = ps.size();\n    Polygon Q;\n    for (int i = 0; i < n; i++)\n    {\n        Point A = ps[i], B = ps[(i + 1) % n];\n        Line m = Line(A, B);\n        if (ccw(l.a, l.b, A) != -1)\n            Q.emplace_back(A);\n        if (ccw(l.a, l.b, A) * ccw(l.a, l.b, B) < 0 && isis_ll(l, m))\n            Q.emplace_back(is_ll(l, m));\n    }\n    return Q;\n}\n\nvoid add_point(std::vector<Point> &ps, Point p)\n{\n    for (Point q : ps)\n        if (abs(q - p) < eps)\n            return;\n    ps.emplace_back(p);\n}\n\n// Voronoi 図: http://judge.u-aizu.ac.jp/onlinejudge/review.jsp?rid=3668810\n// polygon を ps でボロノイ分割する時の ps[index] に割り当てられる多角形\nPolygon voronoi(const Polygon &polygon, const std::vector<Point> &ps, int index)\n{\n    Polygon p = polygon;\n    int n = ps.size();\n    for (int j = 0; j < n; j++)\n    {\n        if (index == j)\n            continue;\n        Line l = bisector(ps[index], ps[j]);\n        p = convex_cut(p, l);\n    }\n    return p;\n}\n\nvoid solve_cgl_1_a()\n{\n    auto p1 = input_point(), p2 = input_point();\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        auto p = input_point();\n        auto ret = proj(Line(p1, p2), p);\n        cout << fixed << setprecision(10) << ret.real() << \" \" << ret.imag() << endl;\n    }\n}\n\nvoid solve_cgl_1_b()\n{\n    auto p1 = input_point(), p2 = input_point();\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        auto p = input_point();\n        auto ret = proj(Line(p1, p2), p);\n        cout << fixed << setprecision(10) << 2 * ret.real() - p.real() << \" \" << 2 * ret.imag() - p.imag() << endl;\n    }\n}\n\nvoid solve_cgl_1_c()\n{\n    auto p0 = input_point(), p1 = input_point();\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        auto p2 = input_point();\n        int ret = ccw(p0, p1, p2);\n        if (ret == 1)\n            cout << \"COUNTER_CLOCKWISE\" << endl;\n        else if (ret == -1)\n            cout << \"CLOCKWISE\" << endl;\n        else if (ret == 2)\n            cout << \"ONLINE_BACK\" << endl;\n        else if (ret == -2)\n            cout << \"ONLINE_FRONT\" << endl;\n        else\n            cout << \"ON_SEGMENT\" << endl;\n    }\n}\n\nvoid solve_cgl_2_a()\n{\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        auto p0 = input_point(), p1 = input_point(), p2 = input_point(), p3 = input_point();\n        Line l(p0, p1), m(p2, p3);\n        if (!isis_ll(l, m))\n        {\n            cout << 2 << endl;\n        }\n        else if (eq(dot(l.b - l.a, m.b - m.a), 0))\n        {\n            cout << 1 << endl;\n        }\n        else\n        {\n            cout << 0 << endl;\n        }\n    }\n}\n\nvoid solve_cgl_2_b()\n{\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        auto p0 = input_point(), p1 = input_point(), p2 = input_point(), p3 = input_point();\n        Line s1(p0, p1), s2(p2, p3);\n        cout << (isis_ss(s1, s2) ? 1 : 0) << endl;\n    }\n}\n\nvoid solve_cgl_2_c()\n{\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        auto p0 = input_point(), p1 = input_point(), p2 = input_point(), p3 = input_point();\n        Line s1(p0, p1), s2(p2, p3);\n        auto ret = is_ll(s1, s2);\n        cout << fixed << setprecision(10) << ret.real() << \" \" << ret.imag() << endl;\n    }\n}\n\nvoid solve_cgl_2_d()\n{\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        auto p0 = input_point(), p1 = input_point(), p2 = input_point(), p3 = input_point();\n        Line s1(p0, p1), s2(p2, p3);\n        cout << fixed << setprecision(10) << dist_ss(s1, s2) << endl;\n    }\n}\n\nvoid solve_cgl_3_a()\n{\n    Polygon p;\n    int n;\n    cin >> n;\n    for (int i = 0; i < n; i++)\n    {\n        p.push_back(input_point());\n    }\n    cout << fixed << setprecision(10) << area(p) << endl;\n}\n\nvoid solve_cgl_3_b()\n{\n    Polygon p;\n    int n;\n    cin >> n;\n    for (int i = 0; i < n; i++)\n    {\n        p.push_back(input_point());\n    }\n    auto cv = convex_hull(p);\n    cout << (p == cv ? 1 : 0) << endl;\n}\n\nvoid solve_cgl_3_c()\n{\n    Polygon ps;\n    int n;\n    cin >> n;\n    for (int i = 0; i < n; i++)\n    {\n        ps.push_back(input_point());\n    }\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        auto p = input_point();\n        int ret = is_in_polygon(ps, p);\n        cout << ret + 1 << endl;\n    }\n}\n\nvoid solve_cgl_4_a()\n{\n    int n;\n    cin >> n;\n    Polygon ps;\n    for (int i = 0; i < n; i++)\n    {\n        ps.push_back(input_point());\n    }\n    auto ret = convex_hull(ps);\n    for (auto p : ret)\n    {\n        cout << fixed << setprecision(10) << p.real() << \" \" << p.imag() << endl;\n    }\n}\n\n// cgl_4_b: 凸多角形の直径\n\nvoid solve_cgl_4_c()\n{\n    int n;\n    cin >> n;\n    Polygon ps;\n    for (int i = 0; i < n; i++)\n    {\n        ps.push_back(input_point());\n    }\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        auto p0 = input_point(), p1 = input_point();\n        auto l = Line(p0, p1);\n        auto ret = convex_cut(ps, l);\n        cout << fixed << setprecision(10) << area(ret) << endl;\n    }\n}\n\n// cgl_5_a: 最近点対\n\n// cgl_6_a: 線分交差\n\nvoid solve_cgl_7_a()\n{\n    auto p0 = input_point();\n    ld r0, r1;\n    cin >> r0;\n    auto p1 = input_point();\n    cin >> r1;\n    Circle c0(p0, r0), c1(p1, r1);\n    auto ls = tangent_cc(c0, c1);\n    cout << ls.size() << endl;\n}\n\nvoid solve_cgl_7_d()\n{\n    auto p = input_point();\n    ld r;\n    cin >> r;\n    Circle c(p, r);\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        auto p0 = input_point(), p1 = input_point();\n        Line l(p0, p1);\n        auto ret = is_lc(c, l);\n        assert(ret.size() <= 2);\n        sort(ret.begin(), ret.end());\n        cout << ret[0].real() << \" \" << ret[0].imag();\n        if (ret.size() == 2)\n        {\n            cout << \" \" << ret[1].real() << \" \" << ret[1].imag();\n        }\n        cout << endl;\n    }\n}\n\nvoid solve_cgl_7_e()\n{\n    auto p0 = input_point();\n    ld r0, r1;\n    cin >> r0;\n    auto p1 = input_point();\n    cin >> r1;\n    Circle c0(p0, r0), c1(p1, r1);\n    auto ret = is_cc(c0, c1);\n    if ((int)ret.size() == 1)\n        ret.push_back(ret[0]);\n    sort(ret.begin(), ret.end());\n    cout << ret[0].real() << \" \" << ret[0].imag() << \" \" << ret[1].real() << \" \" << ret[1].imag() << endl;\n}\n\nvoid solve_cgl_7_f()\n{\n    auto p = input_point();\n    auto p0 = input_point();\n    ld r0;\n    cin >> r0;\n    Circle c(p0, r0);\n    auto ls = tangent_cp(c, p);\n    vector<Point> ret;\n    for (auto l : ls)\n    {\n        auto ps = is_lc(c, l);\n        assert((int)ps.size() == 1);\n        ret.push_back(ps[0]);\n    }\n    sort(ret.begin(), ret.end());\n    cout << ret[0].real() << \" \" << ret[0].imag() << \" \" << ret[1].real() << \" \" << ret[1].imag() << endl;\n}\n\nvoid solve_cgl_7_g()\n{\n    ld r0, r1;\n    auto p0 = input_point();\n    cin >> r0;\n    auto p1 = input_point();\n    cin >> r1;\n    Circle c0(p0, r0), c1(p1, r1);\n    auto ls = tangent_cc(c0, c1);\n    vector<Point> ret;\n    for (auto l : ls)\n    {\n        auto ps = is_sc(c0, l);\n        assert((int)ps.size() == 1);\n        ret.push_back(ps[0]);\n    }\n    sort(ret.begin(), ret.end());\n    for (auto p : ret)\n    {\n        cout << fixed << setprecision(10) << p.real() << \" \" << p.imag() << endl;\n    }\n}\n\n// cgl_7_h: 円と多角形の共通部分(は?)\n// 参考実装: http://judge.u-aizu.ac.jp/onlinejudge/review.jsp?rid=2114290\n\nint main()\n{\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n\n    solve_cgl_1_c();\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<algorithm>\n#include<cmath>\n#include<vector>\n#include<queue>\n\nusing namespace std;\ntypedef long long LL;\n\nconst int Pi = acos(-1.0);\nconst int INf = 0x7fffffff;\nconst int eps = 1e-9;\n\nint sgn(double d) {\n    if(abs(d) < eps)\n        return 0;\n    if(d > 0)\n        return 1;\n    return -1;\n}\n\nint dcmp(double x, double y) {\n    if(abs(x - y) < eps)\n        return 0;\n    if(x > y)\n        return 1;\n    return -1;\n}\n\nstruct Point {\n    double x, y;\n    Point(double _x = 0, double _y = 0):x(_x), y(_y){}\n};\n\ntypedef Point Vector;\n\nVector operator + (Vector A, Vector B) {\n    return Vector(A.x + B.x, A.y + B.y);\n}\n\nVector operator - (Point A, Point B) {\n    return Vector(A.x - B.x, A.y - B.y);\n}\n\nVector operator * (Vector A, double p) {\n    return Vector(A.x * p, A.y * p);\n}\n\nVector operator / (Vector A, double p) {\n    return Vector(A.x / p, A.y / p);\n}\n\nbool operator == (const Point &a, const Point &b) {\n    if(sgn(a.x-b.x) == 0 && sgn(a.y-b.y) == 0)\n        return true;\n    return false;\n}\n\ndouble Dot(Vector A, Vector B) {\n    return A.x * B.x + A.y * B.y;\n}\n\ndouble Cross(Vector A, Vector B) {\n    return A.x * B.y - B.x * A.y;\n}\n\ndouble Length(Vector A) {\n    return sqrt(Dot(A, A));\n}\n\ndouble Angle(Vector A, Vector B) {\n    return acos(Dot(A, B) / Length(A) / Length(B));\n}\n\ndouble Area2(Point A, Point B, Point C) {\n    return Cross(B - A, C - A);\n}\n\nVector Rotate(Vector A, double rad) { // 逆时针旋转rad\n    return Vector(A.x * cos(rad) - A.y * sin(rad), A.x * sin(rad) - A.y * cos(rad));\n}\n\nVector Normal(Vector A) {      //A左转90°的单位法向量\n    double L = Length(A);\n    return Vector(-A.y / L, A.x / L);\n}\n\nbool ToLeftTest(Point a, Point b, Point c) {\n    return Cross(b - a, c - a) > 0;\n}\n\nstruct Line {\n    Point v, p;\n    Line(Point v, Point p) : v(v), p(p){}\n    Point point(double t) {\n        return v + (p - v) * t;\n    }\n};\n\nPoint GetLineIntersection(Point P, Vector v, Point Q, Vector w) {\n    Vector u = P - Q;\n    double t = Cross(w, u) / Cross(v, w);\n    return P + v * t;\n}\n\ndouble DistanceToLine(Point P, Point A, Point B) {\n    Vector v1 = B - A, v2 = P - A;\n    return fabs(Cross(v1, v2) / Length(v1));\n}\n\n\ndouble DistanceToSegment(Point P, Point A, Point B) {\n    if(A == B)\n        return Length(P - A);\n    Vector v1 = B - A, v2 = P - A, v3 = P - B;\n    if(sgn(Dot(v1, v2)) < 0)\n        return Length(v2);\n    if(sgn(Dot(v1, v3)) > 0)\n        return Length(v3);\n    return DistanceToLine(P, A, B);\n}\n\nPoint GetLineProjection(Point P, Point A, Point B) {\n    Vector v = B - A;\n    return A + v * (Dot(v, P - A) / Dot(v, v));\n}\n\nint main() {\n    Point A, B, P;\n    scanf(\"%lf%lf%lf%lf\", &A.x, &A.y, &B.x, &B.y);\n    int q;\n    scanf(\"%d\", &q);\n    while(q--) {\n        scanf(\"%lf%lf\", &P.x, &P.y);\n        int judge = Cross(B - A, P - A);\n        if(judge > 0) {\n            printf(\"COUNTER_CLOCKWISE\\n\");\n        } else if(judge < 0) {\n            printf(\"CLOCKWISE\\n\");\n        } else {\n            if(Dot(P - A, B - A) < 0) {\n                printf(\"ONLINE_BACK\\n\");\n            } else {\n                if(Length(B - A) >= Length(P - A))\n                    printf(\"ON_SEGMENT\\n\");\n                else\n                    printf(\"ONLINE_FRONT\\n\");\n            }\n        }\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\n\n#define rep(i, n) REP(i, 0, n)\n#define REP(i, s, e) for(int i = (int)s; i < (int)(e); ++i)\n\n#define X real()\n#define Y imag()\n#define x(p) real(p)\n#define y(p) imag(p)\n#define curr(P, i) P[i]\n#define next(P, i) P[(i+1)%P.size()]\n#define prev(P, i) P[(i-1+P.size())%P.size()]\n\nconst double EPS = 1e-8;\nconst double INF = 1e12;\nconst double PI = acos(-1);\n\ntypedef double D;\ntypedef complex<D> P;\nnamespace std{\n  bool operator < (const P& a, const P& b) {\n    return x(a) != x(b) ? x(a) < x(b) : y(a) < y(b);\n  }\n}\n\nD dot(const P& a, const P& b) {\n  return x(conj(a)*b);\n}\nD cross(const P& a, const P& b) {\n  return y(conj(a)*b);\n}\n\nstruct L : public vector<P> {\n  L(const P&a, const P& b) {\n    push_back(a);\n    push_back(b);\n  }\n};\n\ntypedef vector<P> G;\n\nstruct C {\n  P p; D r;\n};\n\nint ccw(P a, P b, P c) {\n  b -= a; c -= a;\n  if(cross(b, c) > 0) return +1; //ccw\n  if(cross(b, c) < 0) return -1; //cw\n  if(dot(b, c) < 0)   return +2; //c-a-b on line\n  if(norm(b) < norm(c)) return -2; //a-b-c on line\n  return 0;\n}\n\nP projection(const L& l, const P& p) {\n  D t = dot(p - l[0], l[0] - l[1]) / norm(l[0]- l[1]);\n  return l[0] + t * (l[0] - l[1]);\n}\nP refrection(const L& l, const P& p) {\n  return p + 2.0 * (projection(l, p) - p);\n}\nint main() {\n  D x1, y1, x2, y2;\n  cin >> x1 >> y1 >> x2 >> y2;\n  P a(x1, y1), b(x2, y2);\n  int q;\n  cin >> q;\n  cout << fixed << setprecision(20);\n  rep(i, q) {\n    D x, y;\n    cin >> x >> y;\n    P c(x, y);\n    int k = ccw(a, b, c);\n    if(k == 1) cout << \"COUNTER_CLOCKWISE\" << endl;\n    else if(k == -1) cout << \"CLOCKWISE\" << endl;\n    else if(k == +2) cout << \"ONLINE_BACK\" << endl;\n    else if(k == -2) cout << \"ONLINE_FRONT\" << endl;\n    else cout << \"ON_SEGMENT\" << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\nusing namespace std;\n#include<cstdio>\n#include<complex>\n\ntypedef double type_n;\ntypedef complex<type_n> point;\n\nvoid ccw(const point &a, const point &c, const point &z)\n{\n    point w;\n    w = conj(c) * (z - a);\n\ttype_n re = w.real(), im = w.imag();\n\tif(re != 0){\n\t\t(re > 0 ? printf(\"COUNTER_CLOCKWISE\\n\") : printf(\"CLOCKWISE\\n\"));\n        return;\n\t}else{\n        if(im < 0){ printf(\"ONLINE_BACK\\n\"); return; }\n        if(im > norm(c)){ printf(\"ONLINE_FRONT\\n\"); return; }\n\t}\n    printf(\"ON_SEGMENT\\n\");\n    return;\n}\n\nint main()\n{\n    point a, b, c, z;\n    int i, q;\n    type_n a1, a2, b1, b2, z1, z2;\n    scanf(\"%lf %lf %lf %lf\", &a1, &a2, &b1, &b2);\n    a.real(a1), a.imag(a2), b.real(b1), b.imag(b2);\n    c = b - a;\n\n    scanf(\"%d\", &q);\n    for(i = 0; i < q; i++){\n        scanf(\"%lf %lf\", &z1, &z2);\n        z.real(z1), z.imag(z2);\n        ccw(a, c, z);\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nconst double eps = 1e-10;\n\nint dcmp(double x) {\n        if(fabs(x) < eps) return 0;\n        return x < 0 ? -1 : 1;\n}\n\n#define Vector P\nstruct P {\n        double x, y;\n        P(double x = 0, double y = 0): x(x), y(y) {}\n        P operator + (P b) {return P(x + b.x, y + b.y);}\n        P operator - (P b) {return P(x - b.x, y - b.y);}\n        P operator * (double b) {return P(x * b, y * b);}\n        P operator / (double b) {return P(x / b, y / b);}\n        double operator * (P b) {return x * b.x + y * b.y;} // Dot\n        double operator ^ (P b) {return x * b.y - y * b.x;} // Cross\n        double abs() {return hypot(x, y);}\n        P unit() {return *this / abs();}\n        P spin(double o) {\n                double c = cos(o), s = sin(o);\n                return P(c * x - s * y, s * x + c * y);\n        }\n};\n\nstruct Line {\n        //ax + by + c = 0\n        double a, b, c, theta;\n        P pa, pb;\n        Line(): a(0), b(0), c(0), theta(0), pa(), pb() {}\n        Line(P pa, P pb): a(pa.y - pb.y), b(pb.x - pa.x), c(pa ^ pb), theta(atan2(-a, b)), pa(pa), pb(pb) {}        P projection(P p) {return pa + (pb - pa).unit() * ((pb - pa) * (p - pa) / (pb - pa).abs());}                P reflection(P p) {return p + (projection(p) - p) * 2;}\n        double get_ratio(P p) {return (p - pa) * (pb - pa) / ((pb - pa).abs() * (pb - pa).abs());}\n        P dis(P p) {return ((pb - pa) ^ (p - pa)) / (pb - pa).abs();} // directed distance\n};\n\nstruct Circle {\n        P c;\n        double r;\n        Circle(P c, double r = 0): c(c), r(r) {}\n};\nbool onsegment(P p, P a, P b) {\n        return dcmp((a - p) ^ (b - p)) == 0 && dcmp((a - p) * (b - p)) <= 0;\n}\nbool segment_intersection(P p1, P p2, P p3, P p4) { // end points are not allowed\n        return dcmp((p2 - p1) ^ (p3 - p1)) * dcmp((p2 - p1) ^ (p4 - p1)) < 0\n                && dcmp((p4 - p3) ^ (p1 - p3)) * dcmp((p4 - p3) ^ (p2 - p3)) < 0;\n\n}\n\nint main() {\n        ios_base::sync_with_stdio(false); cin.tie(0);\n        P p0, p1;\n        cin >> p0.x >> p0.y >> p1.x >> p1.y;\n        Vector v = p1 - p0;\n        int q; cin >> q;\n        while(q--) {\n                P p; cin >> p.x >> p.y;\n                Vector w = p - p0;\n                int f = dcmp(v ^ w);\n                if(onsegment(p, p0, p1)) cout << \"ON_SEGMENT\" << '\\n';\n                else if(f == 1) cout << \"COUNTER_CLOCKWISE\" << '\\n';\n                else if(f == -1) cout << \"CLOCKWISE\" << '\\n';\n                else {\n                        if((v * w) < 0) cout << \"ONLINE_BACK\" << '\\n';\n                        else cout << \"ONLINE_FRONT\" << '\\n';\n                }\n        }\n        return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\n#define ld long double\n#define eps 1e-9\nstruct vec{\n\tld x , y;\n\tvec(ld _x = 0 , ld _y = 0) : x(_x) , y(_y){}\n\tfriend vec operator +(vec A , vec B){return vec(A.x + B.x , A.y + B.y);}\n\tfriend vec operator -(vec A , vec B){return vec(A.x - B.x , A.y - B.y);}\n\tfriend ld operator *(vec A , vec B){return A.x * B.x + A.y * B.y;}\n\tfriend ld operator %(vec A , vec B){return A.x * B.y - A.y * B.x;}\n\tld len(){return sqrt(x * x + y * y);}\n};\n\nvec getvec(){int x , y; cin >> x >> y; return vec(x , y);}\n\nint main(){\n\tvec A = getvec() , B = getvec() - A; int Q;\n\tfor(cin >> Q ; Q ; --Q){\n\t\tvec C = getvec() - A;\n\t\tif(B % C > eps) puts(\"COUNTER_CLOCKWISE\");\n\t\telse if(B % C < -eps) puts(\"CLOCKWISE\");\n\t\telse if(B * C < 0) puts(\"ONLINE_BACK\");\n\t\telse puts(B.len() + eps > C.len() ? \"ON_SEGMENT\" : \"ONLINE_FRONT\");\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#ifndef ___Geometry_Library\n#define ___Geometry_Library\n\n// ------ Includes ------ //\n#include <cmath>\n#include <complex>\n#include <utility>\n#include <algorithm>\n\n// ------ Defines ------ //\ntypedef long double GType;\ntypedef std::complex<GType> Point;\ntypedef std::pair<Point, Point> Segment;\n\n// ------ Constants ------ //\nconst GType EPS = 1.0e-10L;\n\n// ------ Functions Level 1 ------ //\nGType dot(const Point& p1, const Point& p2) {\n\treturn (std::conj(p1) * p2).real();\n}\nGType cross(const Point& p1, const Point& p2) {\n\treturn (std::conj(p1) * p2).imag();\n}\nint ccw(const Point& p1, const Point& p2, const Point& p3) {\n\tPoint v1 = p2 - p1, v2 = p3 - p1;\n\tif (cross(v1, v2) > EPS) return +1;\n\tif (cross(v1, v2) < -EPS) return -1;\n\tif (dot(v1, v2) < -EPS) return +2;\n\tif (std::norm(v1) < std::norm(v2)) return -2;\n\treturn 0;\n}\n\n#endif\n\n#include <iomanip>\n#include <iostream>\nusing namespace std;\nint q, xa, ya, xb, yb; Point p1, p2, p3;\nint main() {\n\tcin >> xa >> ya >> xb >> yb;\n\tp1 = Point(xa, ya);\n\tp2 = Point(xb, yb);\n\tcin >> q;\n\twhile (q--) {\n\t\tcin >> xa >> ya; p3 = Point(xa, ya);\n\t\tint res = ccw(p1, p2, p3);\n\t\tif(res == +1) cout << \"COUNTER_CLOCKWISE\" << endl;\n\t\tif(res == -1) cout << \"CLOCKWISE\" << endl;\n\t\tif(res == +2) cout << \"ONLINE_BACK\" << endl;\n\t\tif(res == -2) cout << \"ONLINE_FRONT\" << endl;\n\t\tif(res == +0) cout << \"ON_SEGMENT\" << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cmath>\nusing namespace std;\n\nint xp0,yp0,xp1,yp1,x,y;\n\nstruct bec{\n    int x,y;\n};\n\nvoid judge(int x,int y){\n    bec p1,p2;\n    p1.x= xp1-xp0; p1.y= yp1-yp0;\n    p2.x= x-xp0; p2.y=y-yp0;\n    double d1,d2;\n    d1=sqrt((double)p1.x*(double)p1.x+(double)p1.y*(double)p1.y);\n    d2=sqrt((double)p2.x*(double)p2.x+(double)p2.y*(double)p2.y);\n    if((p1.x*p2.y-p1.y*p2.x)>0) cout<<\"COUNTER_CLOCKWISE\"<<endl;\n    else if((p1.x*p2.y-p1.y*p2.x)<0) cout<<\"CLOCKWISE\"<<endl;\n    else{\n        double c = ((double)p1.x*(double)p2.x+(double)p1.y*(double)p2.y)/(d1*d2);\n        int cc=round(c);\n        if(cc==1||d2==0){\n            if(d1<d2) cout<<\"ONLINE_FRONT\"<<endl;\n            else cout<<\"ON_SEGMENT\"<<endl;\n        }\n        else cout<<\"ONLINE_BACK\"<<endl;\n    }\n}\n\nint main(){\n    cin>>xp0>>yp0>>xp1>>yp1;\n    int n;\n    cin>>n;\n    for(int i=0;i<n;i++){\n        cin>>x>>y;\n        judge(x,y);\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nstruct vec{\n    double x,y;\n};\n\nconst double eps = 0.00001;\n\nint main(void){\n    vec p0,p1,p2,v1,v2;\n    int q;\n    cin >> p0.x >> p0.y >> p1.x >> p1.y;\n    v1.x=p1.x-p0.x; v1.y=p1.y-p0.y;\n    cin >> q;\n    cout.precision(10);\n    cout.setf(std::ios::showpoint);\n    for(int i=0;i<q;i++){\n        cin >> p2.x >> p2.y;\n        v2.x=p2.x-p0.x; v2.y=p2.y-p0.y;\n        double p=v1.x*v2.y-v1.y*v2.x;\n        if(p>eps){\n            cout << \"COUNTER_CLOCKWISE\" << endl;\n            continue;\n        }\n        if(p<-eps){\n            cout << \"CLOCKWISE\" << endl;\n            continue;\n        }\n        if(v1.x!=0){\n            p=v2.x/v1.x;\n        }else{\n            p=v2.y/v1.y;\n        }\n        if(p<0){\n            cout << \"ONLINE_BACK\" << endl;\n        }else if(p<=1){\n            cout << \"ON_SEGMENT\" << endl;\n        }else{\n            cout << \"ONLINE_FRONT\" << endl;\n        }\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <algorithm>\n#include <cmath>\n\nusing namespace std;\n\n\n#define EPS (1e-10)\n#define equals( A, B ) (fabs((A) - (B)) < EPS)\n\nclass Point {\npublic:\n    double x, y;\n    Point( double x = 0, double y = 0 ): x(x), y(y) {}\n    \n    Point operator + ( Point p ) { return Point( x + p.x, y + p.y ); }\n    Point operator - ( Point p ) { return Point( x - p.x, y - p.y ); }\n    Point operator * ( double a ) { return Point( a * x, a * y ); }\n    Point operator / ( double a ) { return Point( x / a, y / a ); }\n\n    double abs() { return sqrt( norm() ); }\n    double norm() { return x * x + y * y; }\n\n    bool operator < ( const Point &p ) const {\n\treturn ( x != p.x ) ? x < p.x : y < p.y;\n    }\n\n    bool operator == ( const Point &p ) const {\n\treturn equals( x, p.x ) && equals( y, p.y ); \n    }\n\n    double dot( Point a ) { return x * a.x + y * a.y; }\n    double cross( Point a ) { return x * a.y - y * a.x; }\n    double distance( Point a ) {\n\treturn (*this - a).abs();\n    }\n};\n\ntypedef Point Vector;\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nclass Line {\npublic:\n    Point p1, p2;\n    Line( Point p1 = Point(), Point p2 = Point() ): p1(p1), p2(p2){}\n    // ?????´????????????( cos = 0 )\n    bool isOrthogonal( Line a ) {\n\treturn equals( 0.0, (p1 - p2).dot( a.p1 - a.p2 ) );\n    }\n    // ??????????????????( sin = 0 )\n    bool isParallel( Line a ) {\n\treturn equals( 0.0, (p1 - p2).cross( a.p1 - a.p2 ) );\n    }\n\n    Point projection( Point p ) {\n\tVector v12 = p2 - p1;\n\tdouble r = v12.dot( p - p1 ) / v12.norm();\n\treturn p1 + v12 * r;\n    }\n\n    Point reflection( Point p ) {\n\treturn p + ( projection( p ) - p ) * 2.0;\n    }\n\n    double distance( Point p ) {\n\tVector v12 = this->p2 -this->p1;\n\tVector v10 = p - this->p1;\n\t\n\treturn v12.cross( v12 ) / v12.abs();\n    }\n\n    double distanceSP( Point p ) {\n\tif ( (p - this->p1).dot( this->p2 - this->p1 ) < 0.0 ) {\n\t    return this->p1.distance( p );\n\t} else if ( (p - this->p2).dot( this->p1 - this->p2 ) < 0.0 ) {\n\t    return this->p2.distance( p );\n\t}\n\telse {\n\t    return distance( p );\n\t}\n    }\n\n    bool intersect( Line l ) {\n\treturn false;\n    }\n\n    int ccw( Point p ) {\n\tVector a = p2 - p1;\n\tVector b = p - p1;\n\t\n\tif ( a.cross( b ) > EPS ) return COUNTER_CLOCKWISE;\n\telse if ( a.cross( b ) < -EPS ) return CLOCKWISE;\n\telse if ( a.dot( b ) < -EPS ) return ONLINE_BACK;\n\telse if ( a.norm() < b.norm() ) return ONLINE_FRONT;\n\telse return ON_SEGMENT;\n    }\n};\n\ntypedef Line Segment;\n\n\nint main()\n{\n    Point p0, p1;\n    int q;\n\n    scanf(\"%lf %lf %lf %lf\", &p0.x, &p0.y, &p1.x, &p1.y);\n\n    Segment s = Segment( p0, p1 );\n\n    scanf(\"%d\", &q);\n\n\n    for ( int i = 0; i < q; i++ ) {\n\tPoint p;\n\tscanf(\"%lf %lf\", &p.x, &p.y);\n\tint pos = s.ccw( p );\n\tswitch ( pos ) {\n\tcase COUNTER_CLOCKWISE:\n\t    printf(\"COUNTER_CLOCKWISE\\n\");\n\t    break;\n\tcase CLOCKWISE:\n\t    printf(\"CLOCKWISE\\n\");\n\t    break;\n\tcase ONLINE_BACK:\n\t    printf(\"ONLINE_BACK\\n\");\n\t    break;\n\tcase ONLINE_FRONT:\n\t    printf(\"ONLINE_FRONT\\n\");\n\t    break;\n\tcase ON_SEGMENT:\n\t    printf(\"ON_SEGMENT\\n\");\n\t    break;\n\t}\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <complex>\n#include <map>\n#include <set>\n#include <vector>\n#include <stack>\n#include <queue>\n#include <bitset>\n#include <algorithm>\n#include <numeric>\n#include <functional>\nusing namespace std;\n\n#define Rep(b, e, i) for(int i = b; i <= e; i++)\n#define Repr(e, b, i) for(int i = e; i >= b; i--)\n#define rep(n, i) Rep(0, n-1, i)\n#define repr(n, i) Repr(n-1, 0, i)\n#define all(v) (v).begin(), (v).end()\n#define pb(v) push_back(v)\n#define uniq(v) (v).erase(unique(all(v)),(v).end())\n#define bitcnt(x) __builtin_popcount(x)\n#define fst first\n#define snd second\n#define Pqaz(T) priority_queue<T,vector<T>,greater<T>>\n#define Pqza(T) priority_queue<T>\n#define put(x) cout << x;\n#define puts(x) cout << x << ' ';\n#define putln(x) cout << x << endl;\n#define ENJYU std::ios::sync_with_stdio(false);std::cin.tie(0);\n\nconst double EPS = 1e-6;\ntypedef complex<double> comp;\n\nvoid solve(void){\n\n\tint x1, y1, x2, y2, Q;\n\tcin >> x1 >> y1 >> x2 >> y2 >> Q;\n\n\tcomp o(x1, y1), p(x2-x1, y2-y1), r;\n\n\t//回転用\n\tr = polar(1.0, arg(p));\n\n\twhile(Q--)\n\t{\n\t\tint x3, y3;\n\t\tcin >> x3 >> y3;\n\n\t\tcomp q(x3-x1, y3-y1);\n\n\t\tq /= r;\n\n\t\tprintf(\"%.12lf %.12lf\\n\", norm(p), norm(q));\n\n\t\tif (abs(arg(q)) < EPS)\n\t\t{\n\t\t\tif (norm(p) >= norm(q) - EPS)\n\t\t\t{\n\t\t\t\tputln(\"ON_SEGMENT\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tputln(\"ONLINE_FRONT\");\n\t\t\t}\n\t\t}\n\t\telse if (abs(abs(arg(q))-M_PI) < EPS)\n\t\t{\n\t\t\tputln(\"ONLINE_BACK\");\n\t\t}\n\t\telse if (arg(q) > 0)\n\t\t{\n\t\t\tputln(\"COUNTER_CLOCKWISE\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tputln(\"CLOCKWISE\");\n\t\t}\n\t}\n}\n\nint main(void){\n\tsolve();\n\t//cout << \"yui(*-v・)yui\" << endl;\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <iostream>\n#include <iomanip>\n#include <algorithm>\n\nusing namespace std;\n\nconst double kEps = 1e-10;\n\nint dcmp(double x) {\n  if (fabs(x) < kEps) return 0;\n  return x < 0 ? -1 : 1;\n}\n\nstruct Vector {\n  double x, y;\n  Vector() {}\n  Vector(double x, double y): x(x), y(y) {}\n  // Vector(const Point & p1, const Point & p2): x(p2.x - p1.x), y(p2.y - p1.y) {}\n  Vector(const Vector & v);\n\n  double Norm() const { return hypot(x, y); }\n  double NormSquared() const { return x * x + y * y; }\n  Vector Normalize() const {\n    return *this / this->Norm();\n  }\n  Vector operator-() const {\n    return Vector(-x, -y);\n  }\n  Vector operator+(const Vector & rhs) const {\n    return Vector(x + rhs.x, y + rhs.y);\n  }\n  Vector operator-(const Vector & rhs) const {\n    return *this + (-rhs);\n  }\n  Vector operator*(const double rhs) const {\n    return Vector(rhs * x, rhs * y);\n  }\n  Vector operator/(const double rhs) const {\n    return *this * (1.0 / rhs);\n  }\n  double Dot(const Vector & rhs) const {\n    return x * rhs.x + y * rhs.y;\n  }\n  double Cross(const Vector & rhs) const {\n    return x * rhs.y - y * rhs.x;\n  }\n  bool operator==(const Vector & rhs) const {\n    return dcmp(x - rhs.x) == 0 && dcmp(y - rhs.y) == 0;\n  }\n  bool operator<(const Vector & rhs) const {\n    return dcmp(x - rhs.x) < 0 || (dcmp(x - rhs.x) == 0 && dcmp(y - rhs.y) < 0);\n  }\n};\n\nstruct Point {\n  Point() {}\n  Point(double x, double y): x(x), y(y) {}\n  Point(const Point & p);\n\n  double x, y;\n\n  Point operator-() {\n    return Point(-x, -y);\n  }\n  Point operator+(const Vector & rhs) const {\n    return Point(x + rhs.x, y + rhs.y);\n  }\n  Point operator-(const Vector & rhs) const {\n    return *this + (-rhs);\n  }\n  bool operator==(const Point & rhs) const {\n    return dcmp(x - rhs.x) == 0 && dcmp(y - rhs.y) == 0;\n  }\n  bool operator<(const Point & rhs) const {\n    return dcmp(x - rhs.x) < 0 || (dcmp(x - rhs.x) == 0 && dcmp(y - rhs.y) < 0);\n  }\n};\n\nstruct Line {\n  Line() {}\n  Line(const Point & p1, const Point & p2): p1(p1), p2(p2) {}\n  Line(double x1, double y1, double x2, double y2): p1(x1, y1), p2(x2, y2) {}\n  Line(const Line & l);\n\n  Point p1, p2;\n};\n\nostream & operator<<(ostream & os, const Point & p) {\n  os << p.x << \" \" << p.y;\n  return os;\n}\n\nostream & operator<<(ostream & os, const Vector & v) {\n  os << v.x << \" \" << v.y;\n  return os;\n}\n\n// minus: left, plus: right, 0: colinear\nint Direction(const Point & p0, const Point & p1, const Point & p2) {\n  Vector v1(p1.x - p0.x, p1.y - p0.y);\n  Vector v2(p2.x - p0.x, p2.y - p0.y);\n  return v2.Cross(v1);\n}\n\n// minus: back, plus: front, 0: on\nint SegmentDirection(const Point & p0, const Point & p1, const Point & p2) {\n  if (p2.x >= min(p0.x, p1.x) && p2.x <= max(p0.x, p1.x)\n      && p2.y >= min(p0.y, p1.y) && p2.y <= max(p0.y, p1.y)) {\n    return 0;\n  } else if (p2.x >= max(p0.x, p1.x)) {\n    return 1;\n  } else {\n    return -1;\n  }\n}\n\nint main(int argc, char const *argv[]) {\n  double x0, y0, x1, y1;\n  cin >> x0 >> y0 >> x1 >> y1;\n  Point p0(x0, y0);\n  Point p1(x1, y1);\n\n  int q;\n  cin >> q;\n  for (unsigned i = 0; i < q; ++i) {\n    double x2, y2;\n    cin >> x2 >> y2;\n    Point p2(x2, y2);\n    auto direction = Direction(p0, p1, p2);\n    auto s_direction = SegmentDirection(p0, p1, p2);\n\n    if (direction > 0) {\n      cout << \"CLOCKWISE\\n\";\n    } else if (direction < 0) {\n      cout << \"COUNTER_CLOCKWISE\\n\";\n    } else if (s_direction > 0) {\n      cout << \"ONLINE_FRONT\\n\";\n    } else if (s_direction < 0) {\n      cout << \"ONLINE_BACK\\n\";\n    } else {\n      cout << \"ON_SEGMENT\\n\";\n    }\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<vector>\n#include<cmath>\n#include<map>\n#include<set>\n#include<string>\n#include<queue>\n#include<stack>\nusing namespace std;\n#define MON 1000000007\n#define INF (1<<29)\n#define EPS (1e-10)\ntypedef long long Int;\ntypedef pair<Int, Int> P;\n\n#define max(x, y) ((x)>(y)?(x):(y))\n#define min(x, y) ((x)<(y)?(x):(y))\n\nclass Vec{\npublic:\n  double x, y;\n  Vec(double x = 0, double y = 0):x(x),y(y){}\n\n  void read(){\n    cin >> x >> y;\n  }\n  \n  Vec operator+(const Vec &other)\n  {\n    Vec result = *this;\n    result.x += other.x;\n    result.y += other.y;\n    return result;\n  }\n\n  Vec operator-(const Vec &other)\n  {\n    Vec result = *this;\n    result.x -= other.x;\n    result.y -= other.y;\n    return result;\n  }\n\n  Vec operator*(const float &k)\n  {\n    Vec result = *this;\n    result.x *= k;\n    result.y *= k;\n    return result;\n  }\n\n  Vec operator/(const float &k)\n  {\n    Vec result = *this;\n    result.x /= k;\n    result.y /= k;\n    return result;\n  } \n  \n  double cross(const Vec &other)\n  {\n    return x*other.y - y*other.x;\n  }\n\n  double dot(const Vec &other){\n    return x*other.x + y*other.y;\n  }\n  \n  bool operator==(const Vec &other) const\n  {\n    return abs(x - other.x) < EPS && abs(y - other.y) < EPS;\n  }\n\n  float norm()\n  {\n    return sqrt(x*x+y*y);\n  }\n\n  float norm2()\n  {\n    return x*x+y*y;\n  }\n\n  Vec standard(){\n    Vec result = *this;\n    return result/result.norm();\n  }\n};\n\nclass Line{\npublic:\n  Vec a, b;\n  Vec vect;\n  Line(Vec a = Vec(), Vec b = Vec()):a(a),b(b),vect(b-a){}\n\n  //projection\n  Vec proj(Vec p){\n    p = p - a;\n    return a + vect * vect.dot(p) / vect.norm2();\n  }\n\n  //reflection\n  Vec reflect(Vec p){\n    return proj(p) * 2 - p;\n  }\n\n  bool onSegment(Vec p){\n    return abs((p-a).cross(b-a)) < EPS && (p-a).dot(p-b) < EPS;\n  }\n};\n\n\n//ccw:1, cw:-1, other:0\nInt CCW(Vec a, Vec b, Vec c){\n  b = b - a;\n  c = c - a;\n  if(b.cross(c) > EPS)return -1;\n  if(b.cross(c) < -EPS)return 1;\n  return 0;\n}\n\nint main(){\n  Vec p1, p2, p0;\n  Int q;\n  p0.read();\n  p1.read();\n  cin >> q;\n  while(q--){\n    p2.read();\n    switch (CCW(p0, p1, p2)) {\n    case 1: {\n      cout << \"CLOCKWISE\" << endl;\n      break;\n    }\n    case -1: {\n      cout << \"COUNTER_CLOCKWISE\" << endl;\n      break;\n    }\n    case 0:{\n      if(Line(p0, p1).onSegment(p2))cout << \"ON_SEGMENT\" << endl;\n      else if(Line(p0, p2).onSegment(p1))cout << \"ONLINE_FRONT\" << endl;\n      else if(Line(p1, p2).onSegment(p0))cout << \"ONLINE_BACK\" << endl;\n      else return -1;\n    }\n    }\n  }\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#define TEST_MODE 1\n\n#ifndef __VECD__\n#define __VECD__\n#include <vector>\n#include <numeric>\n#include <iomanip>\n#include <iostream>\n#define rep(n) for(int i=0;i<n;i++)\n#define PB push_back\n#define VecND VecD<std::vector<double> >\n#if TEST_MODE\n#define Vec3D _VecD<double, 3>\n#define Vec2D _VecD<double, 2>\n#endif\n#endif\n\ntemplate <typename U>                       class VecD;\n\n#if TEST_MODE\ntemplate <typename TYPE, unsigned int SIZE> class _VecD;\n#endif\n\ntemplate <typename U> const VecD<U> projection(const VecD<U> &p1, const VecD<U> &p2);\n\ntemplate <typename U> class VecD{\ntemplate <typename DUMMY>      friend const double operator*(const VecD&, const VecD&);\ntemplate <typename T>          friend const VecD operator*(const T&, const VecD&);\ntemplate <typename T, class C> friend const C operator*(const C&, const T&);\ntemplate <typename DUMMY>      friend const VecD operator+(const VecD&, const VecD&);\ntemplate <typename T>          friend const VecD operator+(const T&, const VecD&);\ntemplate <typename T, class C> friend const C operator+(const C&, const T&);\ntemplate <class C>             friend const C operator-(const C&);\ntemplate <class C>             friend const C operator-(const C&, const C&);\ntemplate <typename T, class C> friend const C operator-(const T&, const C&);\ntemplate <typename T, class C> friend const C operator-(const C&, const T&);\ntemplate <typename DUMMY>      friend std::ostream& operator<<(std::ostream&, const VecD&);\npublic:\n\tU vec;\n\tVecD(){}\n\tVecD(U v){\n\t\tvec = v;\n\t}\n\tconst double dot(const VecD &p) const{\n\t\treturn inner_product( this->vec.begin(), this->vec.end(), p.vec.begin(), 0);\n\t}\n};\n\n#if TEST_MODE\ntemplate <typename TYPE, unsigned int SIZE> class _VecD{\ntemplate <typename DUMMY>      friend const double operator*(const _VecD&, const _VecD&);\ntemplate <typename T>          friend const _VecD operator*(const T&, const _VecD&);\ntemplate <typename T, class C> friend const C operator*(const C&, const T&);\ntemplate <typename DUMMY>      friend const _VecD operator+(const _VecD&, const _VecD&);\ntemplate <typename T>          friend const _VecD operator+(const T&, const _VecD&);\ntemplate <typename T, class C> friend const C operator+(const C&, const T&);\ntemplate <class C>             friend const C operator-(const C&);\ntemplate <class C>             friend const C operator-(const C&, const C&);\ntemplate <typename T, class C> friend const C operator-(const T&, const C&);\ntemplate <typename T, class C> friend const C operator-(const C&, const T&);\ntemplate <typename DUMMY>      friend std::ostream& operator<<(std::ostream&, const _VecD&);\n\npublic:\n\tTYPE vec[SIZE];\n\t_VecD(){}\n\t_VecD(TYPE (&array)[SIZE]){\n\t\tfor(int i=0; i<SIZE; i++) vec[i] = array[i];\n\t}\n\tconst double dot(const _VecD &p) const{\n\t\tdouble tmp = 0;\n\t\tfor(int i=0; i<SIZE; i++) tmp += this->vec[i] * p.vec[i];\n\t\treturn tmp;\n\t}\n\tconst double cross(const Vec2D &p) const{\n\t\treturn this->vec[0]*p.vec[1] - this->vec[1]*p.vec[0];\n\t}\n\tconst Vec3D cross(const Vec3D &p) const{\n\t\tdouble v[3];\n\t\tv[0] = this->vec[1]*p.vec[2] - this->vec[2]*p.vec[1];\n\t\tv[1] = this->vec[2]*p.vec[0] - this->vec[0]*p.vec[2];\n\t\tv[2] = this->vec[0]*p.vec[1] - this->vec[1]*p.vec[0];\n\t\treturn Vec3D(v);\n\t}\n};\n#endif\n\nconst double operator*(const VecND &p0, const VecND &p1){ return inner_product( p0.vec.begin(), p0.vec.end(), p1.vec.begin(), 0); }\n// template <typename U>\n// const double operator*(const VecD<U> &p0, const VecD<U> &p1){ return inner_product( p0.vec.begin(), p0.vec.end(), p1.vec.begin(), 0); }\n\ntemplate <typename T>\nconst VecND operator*(const T &a, const VecND &p1){\n\tstd::vector<double> v;\n\tfor(std::vector<double>::const_iterator iter1=p1.vec.begin();iter1!=p1.vec.end();iter1++) v.PB(*iter1 * a);\n\tconst VecND p(v);\n\treturn p;\n}\n#if TEST_MODE\ntemplate <typename T>\nconst Vec2D operator*(const T &a, const Vec2D &p1){\n\tdouble v[2];\n\tfor(int i=0; i<2; i++) v[i] = p1.vec[i] * a;\n\tconst Vec2D p(v);\n\treturn p;\n}\ntemplate <typename T>\nconst Vec3D operator*(const T &a, const Vec3D &p1){\n\tdouble v[3];\n\tfor(int i=0; i<3; i++) v[i] = p1.vec[i] * a;\n\tconst Vec3D p(v);\n\treturn p;\n}\n#endif\n\ntemplate <typename T, class C>\nconst C operator* (const C &p, const T &a){return a*p;}\nconst VecND operator+(const VecND &p0, const VecND &p1){\n\tstd::vector<double> v;\n\tstd::vector<double>::const_iterator iter0 = p0.vec.begin();\n\tfor(std::vector<double>::const_iterator iter1=p1.vec.begin();iter1!=p1.vec.end();iter1++){\n\t\tv.PB(*iter0 + *iter1);\n\t\titer0++;\n\t}\n\tconst VecND p(v);\n\treturn p;\n}\n#if TEST_MODE\nconst Vec2D operator+(const Vec2D &p0, const Vec2D &p1){\n\tdouble v[2];\n\tfor(int i=0; i<2; i++) v[i] = p0.vec[i] + p1.vec[i];\n\tconst Vec2D p(v);\n\treturn p;\n}\nconst Vec3D operator+(const Vec3D &p0, const Vec3D &p1){\n\tdouble v[3];\n\tfor(int i=0; i<3; i++) v[i] = p0.vec[i] + p1.vec[i];\n\tconst Vec3D p(v);\n\treturn p;\n}\n#endif\ntemplate <class T>\nconst VecND operator+(const T &a, const VecND &p1){\n\tstd::vector<double> v;\n\tfor(std::vector<double>::const_iterator iter1=p1.vec.begin();iter1!=p1.vec.end();iter1++){\n\t\tv.PB(*iter1 + a);\n\t}\n\tconst VecND p(v);\n\treturn p;\n}\n#if TEST_MODE\ntemplate <class T>\nconst Vec2D operator+(const T &a, const Vec2D &p1){\n\tdouble v[2];\n\tfor(int i=0; i<2; i++) v[i] = p1.vec[i] + a;\n\tconst Vec2D p(v);\n\treturn p;\n}\ntemplate <class T>\nconst Vec3D operator+(const T &a, const Vec3D &p1){\n\tdouble v[3];\n\tfor(int i=0; i<3; i++) v[i] = p1.vec[i] + a;\n\tconst Vec3D p(v);\n\treturn p;\n}\n#endif\ntemplate <typename T, class C>\nconst C operator+(const C &p1, const T &a){return a+p1;}\ntemplate <class C>\nconst C operator-(const C &p1){return (-1)*p1;}\ntemplate <class C>\nconst C operator-(C &p0, C &p1){ return p0+(-p1); }\ntemplate <typename T, class C>\nconst C operator-(const T &a, C &p1){ return a+(-p1); }\ntemplate <typename T, class C>\nconst C operator-(C &p1, const T &a){return (-a)+p1;}\n\n// template<class C>\n// const C projection(const C &p1, const C &p2){\n// \treturn ((p1*p2) / (p1*p1)) * p1;\n// }\ntemplate<typename U>\nconst VecD<U> projection(const VecD<U> &p1, const VecD<U> &p2){\n\treturn ((p1.dot(p2)) / (p1.dot(p1))) * p1;\n}\n\n#if TEST_MODE\nconst Vec2D projection(const Vec2D &p1, const Vec2D &p2){\n\treturn ((p1.dot(p2)) / (p1.dot(p1))) * p1;\n}\nconst Vec3D projection(const Vec3D &p1, const Vec3D &p2){\n\treturn ((p1.dot(p2)) / (p1.dot(p1))) * p1;\n}\n#endif\n\nstd::ostream& operator<<(std::ostream &os, const VecND &p){\n\tos << std::fixed << std::setprecision(10) << p.vec[0] << \" \" << std::fixed << std::setprecision(10) << p.vec[1] << std::endl;\n}\n#if TEST_MODE\nstd::ostream& operator<<(std::ostream &os, const Vec2D &p){\n\tos << std::fixed << std::setprecision(10) << p.vec[0] << \" \" << std::fixed << std::setprecision(10) << p.vec[1] << std::endl;\n}\nstd::ostream& operator<<(std::ostream &os, const Vec3D &p){\n\tos << std::fixed << std::setprecision(10) << p.vec[0] << \" \" << std::fixed << std::setprecision(10) << p.vec[1] << std::endl;\n}\n#endif\n\nusing namespace std;\n\nint main(void){\n\n\tdouble xp0, yp0, xp1, yp1; cin>>xp0>>yp0>>xp1>>yp1;\n\tint q; cin >> q;\n\tdouble v0[2] = {xp0, yp0}; Vec2D p0(v0);\n\tdouble v1[2] = {xp1, yp1}; Vec2D p1(v1);\n\tVec2D _p0 = p0-p0;\n\tVec2D _p1 = p1-p0;\n\trep(q){\n\t\tdouble xp2,yp2; cin>>xp2>>yp2;\n\t\tdouble v2[2] = {xp2, yp2}; Vec2D p2(v2);\n\t\tVec2D _p2 = p2-p0;\n\t\tdouble ret1 = _p1.cross(_p2);\n\t\tif(ret1>0){\n\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t}else if(ret1<0){\n\t\t\tcout << \"CLOCKWISE\" << endl;;\n\t\t}else{\n\t\t\tdouble ret2;\n\t\t\tif(_p1.vec[0]!=0){\n\t\t\t\tret2 = _p2.vec[0]/_p1.vec[0];\n\t\t\t}else{\n\t\t\t\tret2 = _p2.vec[1]/_p1.vec[1];\n\t\t\t}\n\t\t\tif(ret2<0){\n\t\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t\t}else if(ret2<1){\n\t\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t\t}else{\n\t\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define rep(i, n) for(int i = 1, i##_end_ = (n); i <= i##_end_; ++i)\nusing namespace std;\ntypedef pair<int, int> pii;\ntypedef long long ll;\n\n\nconst double eps = 1e-10;\nint sgn(double x) {\n    if(fabs(x) < eps) return 0;\n    return x < 0 ? -1 : 1;\n}\nstruct Point {\n    double x, y;\n    Point(double xp=0, double yp=0): x(xp), y(yp) { }\n    Point operator + (const Point& rhs) const { return Point(x+rhs.x, y+rhs.y); }\n    Point operator - (const Point& rhs) const { return Point(x-rhs.x, y-rhs.y); }\n    Point operator * (const double& k) const { return Point(x*k, y*k); }\n    Point operator / (const double& k) const { return Point(x/k, y/k); }\n    bool operator < (const Point& rhs) const { return x < rhs.x || (x==rhs.x && y<rhs.y); }\n    bool operator == (const Point& rhs) const {return sgn(x - rhs.x) == 0 && sgn(y - rhs.y) == 0; }\n    Point turn(double rad) { return Point(x*cos(rad)-y*sin(rad), x*sin(rad)+y*cos(rad)); }\n};\ntypedef Point Vector;\n\ndouble dot(Vector x, Vector y) { return x.x*y.x + x.y*y.y; }\ndouble length(Vector x) { return sqrt(dot(x, x)); }\ndouble cross(Vector A, Vector B) { return A.x*B.y - A.y*B.x; }\n\n\nPoint LineProjection(Point P, Point A, Point B) {\n    Vector v = B - A;\n    return A + v * (dot(P-A, v) / dot(v, v));\n}\nPoint LineReflection(Point P, Point A, Point B) {\n    Point proj = LineProjection(P, A, B);\n    return proj + proj - P;\n}\n\nint Clockwise(Point O, Point A, Point B) {\n    /* Clockwise: -1\n       Counterclockwise: 1\n       Otherwise: 0\n    */\n    return sgn(cross(A - O, B - O));\n}\n\nint main() {\n    Point a, b, p;\n    scanf(\"%lf%lf%lf%lf\", &a.x, &a.y, &b.x, &b.y);\n    int q; scanf(\"%d\", &q);\n    while(q--) {\n        scanf(\"%lf%lf\", &p.x, &p.y);\n        int ans = Clockwise(a, b, p);\n        if(ans == 1) puts(\"COUNTER_CLOCKWISE\");\n        else if(ans == -1) puts(\"CLOCKWISE\");\n        else {\n            Vector d = b - a, e = p - a;\n            if(sgn(dot(d, e)) == -1) puts(\"ONLINE_BACK\");\n            else if(sgn(length(e) - length(d)) == 1) puts(\"ONLINE_FRONT\");\n            else puts(\"ON_SEGMENT\");\n        }\n    }\n    \n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "// #define STOPIT\n#include <bits/stdc++.h>\n#define loop(n) for (lint ngtkana_is_a_genius = 0; ngtkana_is_a_genius < lint(n); ngtkana_is_a_genius++)\n#define rep(i, begin, end) for (lint i = lint(begin); (i) < lint(end); i++)\n#define all(v) v.begin(), v.end()\n#define rand(l, r) std::uniform_int_distribution<>(l, r)(mt)\nusing lint = long long;\nauto mt = std::mt19937_64(std::random_device{}());\nauto cmn = [](auto& a, auto b){ if (a > b) {a = b; return true;} return false; };\nauto cmx = [](auto& a, auto b){ if (a < b) {a = b; return true;} return false; };\nvoid debug_impl() { std::cerr << std::endl; }\ntemplate <typename Head, typename... Tail>\nvoid debug_impl(Head head, Tail... tail) { std::cerr << \" \" << head; debug_impl(tail...); }\n#ifndef STOPIT\n#define debug(...)\\\n  do {\\\n    std::cerr << std::boolalpha << \"[\" << #__VA_ARGS__ << \"]:\";\\\n    debug_impl(__VA_ARGS__);\\\n    std::cerr << std::noboolalpha;\\\n  } while (false)\n#else\n#define debug(...) {}\n#endif\n\n/*\nv1 = p1 - p0, v2 = p2 - p0 とします。\ndet(v1,v2) が正なら半時計、負なら時計回りです。\n0 なら、内積 v1*v2 をチェックです。\nそれが負ならバック、0 以上 v1*v1 以下ならオン、それ以外はフロントです。\n*/\n\nint main() {\n  std::cin.tie(0); std::cin.sync_with_stdio(false);\n  int x0, y0, x1, y1;\n  std::cin >> x0 >> y0 >> x1 >> y1;\n  auto v1 = std::make_pair(x1-x0, y1-y0);\n\n  auto det = [&] (auto&& p, auto&& q) {\n    int a,b,c,d;\n    std::tie(a,b) = p;\n    std::tie(c,d) = q;\n    return a*d - b*c;\n  };\n\n  auto inp = [&] (auto&& p, auto&& q) {\n    int a,b,c,d;\n    std::tie(a,b) = p;\n    std::tie(c,d) = q;\n    return a*c + b*d;\n  };\n\n  int L = inp(v1,v1);\n\n  int q; std::cin >> q;\n  loop(q) {\n    int x2, y2; std::cin >> x2 >> y2;\n    std::pair<int,int> v2{ x2-x0, y2-y0 };\n    int d = det(v1,v2);\n    if (0 < d) {\n      std::cout << \"COUNTER_CLOCKWISE\" << std::endl;\n    } else if (d < 0) {\n      std::cout << \"CLOCKWISE\" << std::endl;\n    } else {\n      int i = inp(v1,v2);\n      if (i < 0) {\n        std::cout << \"ONLINE_BACK\" << std::endl;\n      } else if (L < i) {\n        std::cout << \"ONLINE_FRONT\" << std::endl;\n      } else {\n        std::cout << \"ON_SEGMENT\" << std::endl;\n      }\n    }\n  }\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define FOR(i,k,n) for(int i = (k); i < (n); i++)\n#define REP(i,n) FOR(i,0,n)\n#define ALL(a) begin(a),end(a)\n#define MS(m,v) memset(m,v,sizeof(m))\n#define D10  fixed<<setprecision(10)\ntypedef vector<int> vi;\ntypedef vector<string> vs;\ntypedef pair<int, int> P;\ntypedef long long ll;\nconst ll INF = 114514810;\nconst int MOD = 1000000007;\nconst double EPS = 1e-10;\nconst double PI = acos(-1.0);\nstruct edge\n{\n\tint from, to, cost;\n\tbool operator < (const edge& e) const { return cost < e.cost; }\n\tbool operator >(const edge& e) const { return cost > e.cost; }\n};\nint dx[] = { -1, 0, 0, 1 }; int dy[] = { 0, -1, 1, 0 };\n///*************************************************************************************///\n///*************************************************************************************///\n///*************************************************************************************///\n\nstruct point\n{\n\tdouble x, y;\n\tpoint(double x = 0, double y = 0) :x(x), y(y) {};\n\t\n\tpoint operator + (point p) { return point(x + p.x, y + p.y); }\n\tpoint operator - (point p) { return point(x - p.x, y - p.y); }\n\tpoint operator * (double s) { return point(x * s, y * s); }\n\tpoint operator / (double s) { return point(x / s, y / s); }\n\n\tdouble abs() { return sqrt(norm()); }\n\tdouble norm() { return x*x + y*y; }\n\n\tbool operator < (const point &p) const\n\t{\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const point &p) const\n\t{\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n\n};\n\ndouble dot(point a, point b)\n{\n\treturn a.x*b.x + a.y*b.y;\n}\n\ndouble cross(point a, point b)\n{\n\treturn a.x*b.y - a.y*b.x;\n}\n\nint ccw(point a, point b, point c)\n{\n\tb = b - a; c = c - a;\n\tif (cross(b, c) > EPS) return 1;//???????¨????????????????a,b,c??¨?????¶\n\tif (cross(b, c) < -EPS) return -1;//???????¨????????????????a,c,b??¨?????¶\n\tif (dot(b, c) < 0) return 2;//??´?????????c,a,b??????????????¶\n\tif (b.norm() < c.norm()) return -2;//??´?????????a,b,c??????????????¶\n\treturn 0;//??´?????????a,c,b??????????????¶\n}\n\n\nint main()\n{\n\tdouble p[4];\n\tREP(i, 4) cin >> p[i];\n\tpoint a(p[0], p[1]);\n\tpoint b(p[2], p[3]);\n\tint q; cin >> q;\n\twhile (q--)\n\t{\n\t\tdouble x, y;\n\t\tcin >> x >> y;\n\t\tpoint c(x, y);\n\t\tint ans = ccw(a, b, c);\n\t\tstring s;\n\t\tswitch (ans)\n\t\t{\n\t\tcase -2:\n\t\t\ts = \"ONLINE_FRONT\";\n\t\t\tbreak;\n\t\tcase -1:\n\t\t\ts = \"CLOCKWISE\";\n\t\t\tbreak;\n\t\tcase 0:\n\t\t\ts = \"ON_SEGMENT\";\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\ts = \"COUNTER_CLOCKWISE\";\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\ts = \"ONLINE_BACK\";\n\t\t\tbreak;\n\t\t}\n\t\tcout << s << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define SIZE 300005\n#define MOD 1000000007LL\n#define INF 1 << 29\n#define LLINF 1LL << 60\n#define REP(i,n) for(int i=0;i<n;i++)\n#define FOR(i,a,b) for(int i=a;i<=b;i++)\n#define DOWN(i,b,a) for(int i=b;i>=a;i--)\n#define SET(a,c) memset(a,c,sizeof a)\n#define BIT(i,j) ((i)>>(j))&1\n#define ALL(o) (o).begin(), (o).end()\n#define ERASE(o) (o).erase(unique((o).begin(),(o).end()), (o).end())\n#define SQ(x) ((x)*(x))\nusing namespace std;\ntypedef long long ll;\ntypedef pair<ll,ll> Pll;\ntypedef pair<int, int> Pii;\ntypedef pair<double, double> Pdd;\ntypedef complex<double> dcomplex;\ntemplate<typename T> inline void priv(vector<T>a){REP(i,a.size()){cerr<<a[i]<<((i==a.size()-1)?\"\\n\":\" \");}}\nll gcd(ll a,ll b){int c=max(a,b);int d=min(a,b);return c==0||d==0?c:gcd(c%d,d);}\nll lcm(ll a,ll b){return a==0||b==0?0:a*b/gcd(a,b);}\nll fact(ll a){ll b=1;FOR(i,1,a)b*=i;return b;}\n\nclass P\n{\npublic:\n  double x,y;\n  P(){};P(double x,double y):x(x),y(y){};\n  P operator+(const P&q){P t;t.x=x+q.x;t.y=y+q.y;return t;}\n  P operator+=(const P&q){x+=q.x;y+=q.y;return *this;}\n  P operator-(const P&q){P t;t.x=x-q.x;t.y=y-q.y;return t;}\n  P operator-=(const P&q){x-=q.x;y-=q.y;return *this;}\n  template<typename T> P operator*(T d){return P(x*d,y*d);}\n  template<typename T> P operator*=(T d){x*=d;y*=d;return *this;}\n  template<typename T> P operator/(T d){return P(x/d,y/d);}\n  template<typename T> P operator/=(T d){x/=d;y/=d;return *this;}\n  bool operator<(const P&q){return (x!=q.x)?(x<q.x):(y<q.y);}\n  bool operator>(const P&q){return (x!=q.x)?(x>q.x):(y>q.y);}\n  double norm(void){return sqrt(x*x+y*y);}\n  double arg(void){return acos(x/this->norm())*P(1,0).sign(*this);}\n  P nvec(){return P(y,-x);}\n  P rotate(double t){double c=cos(t),s=sin(t);return P(c*x-s*y,s*x+c*y);}\n  P reverseX(void){return P(-x,y);}\n  P reverseY(void){return P(x,-y);}\n  P unit(void){return (*this).norm()==0?P(0,0):(*this)/(*this).norm();}\n  P floor(void){return P((int)x,(int)y);}\n  double dot(const P&q){return x*q.x+y*q.y;}\n  double det(const P&q){return x*q.y-y*q.x;}\n  int sign(const P&q){double d = (*this).det(q); return (d>0)-(d<0);}\n  static bool on_seg(P p1,P p2,P q){return (p1-q).det(p2-q)==0&&(p1-q).dot(p2-q)<=0;}\n  static P intersection(P p1,P p2,P q1,P q2){return p1+(p2-p1)*((q2-q1).det(q1-p1)/(q2-q1).det(p2-p1));}\n};\n\n\nint main()\n{\n  double x0,y0,x1,y1; cin>>x0>>y0>>x1>>y1;\n  P p0 = P(x0,y0);\n  P p1 = P(x1,y1);\n  int q; cin >> q;\n  REP(i,q)\n  {\n    double x,y; cin>>x>>y;\n    P p2 = P(x,y);\n    string str;\n    int s = (p1-p0).sign(p2-p0);\n    if(s>0) str = \"COUNTER_CLOCKWISE\";\n    else if(s<0) str = \"CLOCKWISE\";\n    else\n    {\n      if(P::on_seg(p0,p1,p2)) str = \"ON_SEGMENT\";\n      else if(P::on_seg(p0,p2,p1)) str = \"ONLINE_FRONT\";\n      else str = \"ONLINE_BACK\";\n    }\n    cout << str << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nstruct point{\n\tint x,y;\n\tpoint operator - (const point p){\n\t\tpoint pp;\n\t\tpp.x=x-p.x;\n\t\tpp.y=y-p.y;\n\t\treturn pp;\n\t}\n}p0,p1,p2;\ndouble waiji(point p1,point p2){\n\treturn p1.x*p2.y-p1.y*p2.x;\n}\ndouble neiji(point p1,point p2){\n\treturn p1.x*p2.x+p1.y*p2.y;\n}\nvoid solve(){\n\tdouble xc=waiji(p1-p0,p2-p0);\t\n\tif(xc>0){cout<<\"COUNTER_CLOCKWISE\"<<endl;return;}\n\tif(xc<0){cout<<\"CLOCKWISE\"<<endl;return;}\n\tif(neiji(p1-p0,p2-p0)<0){cout<<\"ONLINE_BACK\"<<endl;return;}\n\tif(abs(p1.x-p0.x)<abs(p2.x-p0.x)||abs(p1.y-p0.y)<abs(p2.y-p0.y)){cout<<\"ONLINE_FRONT\"<<endl;return;}\n\tcout<<\"ON_SEGMENT\"<<endl;\n}\nint main(){\n\tcin>>p0.x>>p0.y;\n\tcin>>p1.x>>p1.y;\n\tint T; cin>>T;\n\twhile(T--){\n\t\tcin>>p2.x>>p2.y;\n\t\tsolve();\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<string>\n#include<algorithm>\n#include<cmath>\n#include<vector>\n#include<stack>\n#include<climits>\n#include<cstring>\n#include<queue>\n#include<complex>\nusing namespace std;\n\nconst double EPS = 1e-8;\nconst double INF = 1e12;\n\ntypedef complex<double> P;\n\ndouble cross(const P &a, const P &b){\n    return imag(conj(a)*b);\n}\n\ndouble dot(const P &a, const P &b){\n    return real(conj(a)*b);\n}\n\nint ccw(P a, P b, P c){\n    b -= a;\n    c -= a;\n    if(cross(b,c) > 0) return +1;\n    if(cross(b,c) < 0) return -1;\n    if(dot(b,c) < 0) return +2;\n    if(norm(b) < norm(c)) return -2;\n    return 0;\n}\n\nstruct L : public vector<P> {\n  L(const P &a, const P &b) {\n    push_back(a); push_back(b);\n  }\n};\n\nbool intersectLL(const L &l, const L &m){\n    return abs(cross(l[1]-l[0], m[1]-m[0])) > EPS ||\n    abs(cross(l[1]-m[0], m[1]-m[0])) < EPS;\n}\n\nbool intersectLS(const L &l, const L &s) {\n  return cross(l[1]-l[0], s[0]-l[0])*       // s[0] is left of l\n         cross(l[1]-l[0], s[1]-l[0]) < EPS; // s[1] is right of l\n}\nbool intersectLP(const L &l, const P &p) {\n  return abs(cross(l[1]-p, l[0]-p)) < EPS;\n}\nbool intersectSS(const L &s, const L &t) {\n  return ccw(s[0],s[1],t[0])*ccw(s[0],s[1],t[1]) <= 0 &&\n         ccw(t[0],t[1],s[0])*ccw(t[0],t[1],s[1]) <= 0;\n}\nbool intersectSP(const L &s, const P &p) {\n  return abs(s[0]-p)+abs(s[1]-p)-abs(s[1]-s[0]) < EPS; // triangle inequality\n}\n\nint main(){\n  int q;\n  double x0,y0,x1,y1, x2, y2;\n  cin >> x0 >> y0 >> x1 >> y1 >> q;\n  P p0(x0, y0), p1(x1, y1);\n\n  for (int i=0;i<q;i++){\n    cin >> x2 >> y2;\n    P p2(x2, y2);\n    int res = ccw(p0, p1, p2);\n    if(res == 1) cout << \"COUNTER_CLOCKWISE\" << endl;\n    if(res == -1) cout << \"CLOCKWISE\" << endl;\n    if(res == 2) cout << \"ONLINE_BACK\" << endl;\n    if(res == -2) cout << \"ONLINE_FRONT\"<< endl;\n    if(res == 0) cout << \"ON_SEGMENT\" << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<complex>\nusing namespace std;\ntypedef complex<double> Point;\n\nint main() {\n    int n;\n    double x1, y1, x2, y2, x3, y3;\n    cin >> x1 >> y1 >> x2 >> y2 >> n;\n    Point z1(x1, y1), z2(x2, y2);\n    while (n--)\n    {\n        cin >> x3 >> y3;\n        Point z3(x3, y3);\n        z3 = (z3 - z1) / (z2 - z1);\n        if (z3.imag() > 0) cout << \"COUNTER_CLOCKWISE\\n\";\n        else if (z3.imag() < 0) cout << \"CLOCKWISE\\n\";\n        else if (z3.imag() == 0)\n            if (z3.real() < 0) cout << \"ONLINE_BACK\\n\";\n            else if (z3.real() > 1) cout << \"ONLINE_FRONT\\n\";\n            else cout << \"ON_SEGMENT\\n\";\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <iostream>\n\nusing namespace std;\n\n#define EPS 1e-9\n\n#define PI 3.1415926535897932385\n\ndouble dist(int x, int y)\n{\n\treturn sqrt(x * x + y * y);\n}\n\ndouble angle(int x, int y)\n{\n\treturn atan2((double)(y), (double)(x));\n}\n\nint main()\n{\n\tint x0, y0, x1, y1, x2, y2, q;\n\n\tcin >> x0 >> y0 >> x1 >> y1 >> q;\n\n\tfor (int i = 0; i < q; i++)\n\t{\n\t\tcin >> x2 >> y2;\n\n\t\tint ax = x1 - x0;\n\t\tint ay = y1 - y0;\n\t\tint bx = x2 - x0;\n\t\tint by = y2 - y0;\n\n\t\tdouble ad = dist(ax, ay);\n\t\tdouble bd = dist(bx, by);\n\n\t\tdouble at = angle(ax, ay);\n\t\tdouble bt = angle(bx, by);\n\n\t\tdouble st = bt - at;\n\n\t\tif (st < -PI - EPS)\n\t\t{\n\t\t\tst += 2 * PI;\n\t\t}\n\n\t\tif (st > PI + EPS)\n\t\t{\n\t\t\tst -= 2 * PI;\n\t\t}\n\n\t\tif (abs(st - EPS) < PI && PI < abs(st + EPS))\n\t\t{\n\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t}\n\t\telse if (st - EPS < 0 && 0 < st + EPS)\n\t\t{\n\t\t\tif (ad < bd)\n\t\t\t{\n\t\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t\t}\n\t\t}\n\t\telse if (st > EPS)\n\t\t{\n\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\t}\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <cctype>\n#include <limits.h>\n#include <math.h>\n#include <complex>\n#include <bitset>\n#include <vector>\n#include <map>\n#include <set>\n#include <stack>\n#include <queue>\n#include <cstring>\n#include <string>\n#include <sstream>\n#include <algorithm>\n#include <iomanip>\n#include <iostream>\n\n#define VARIABLE(x) cerr << #x << \"=\" << x << endl\n#define BINARY(x) static_cast<bitset<16> >(x)\n#define rep(i,n) for(int i=0;i<(int)(n);i++)\n#define REP(i,m,n) for (int i=m;i<(int)(n);i++)\n#define if_range(x, y, w, h) if (0<=(int)(x) && (int)(x)<(int)(w) && 0<=(int)(y) && (int)(y)<(int)(h))\n#define ALL(a) (a).begin(),(a).end()\nconst int INF = 1e9;\nconst double PI = 3.14159;\nint dx[4]={0, 1, 0, -1}, dy[4]={-1, 0, 1, 0};\nusing namespace std;\ntypedef long long ll;\n//typedef pair<int, int> P;\n\n/* struct P {\n\tint x, y, n;\n\tP(int n, int x, int y):n(n), x(x), y(y){}\n\tP(){}\n}; */\n\n\n/** 幾何ライブラリ **/\n// to do : 1183\n\n#include <complex>\n\n#define X real()\n#define Y imag()\n\nconst double EPS = 1e-11;\n\ntypedef double D;\ntypedef complex<D> P; // Point\n\nstruct L { // Line\n\tP a, b;\n\tL(){}\n\tL(P aa, P bb) : a(aa), b(bb){}\n};\n\n// 共役複素数 conj(a);\n\n// 符号\nint sig(D a, D b=0) { return a < b - EPS ? -1 : (a > b + EPS ? 1 : 0); }\n\n// 内積\nD dot(P a, P b) { return (conj(a)*b).real(); }\n\n// 外積\nD cross(P a, P b) { return (conj(a)*b).imag(); }\n\n// 線分abに対する点cの位置\nenum CCW{LEFT=1, RIGHT=-1, BACK=2, FRONT=-2, ON=0};\nint ccw(P a, P b, P c)\n{\n\tb -= a, c -= a;\n\tD s = sig(cross(b, c));\n\tif (s) return s>0 ? LEFT : RIGHT;\n\tif (sig(dot(b, c))<0) return BACK;\n\tif (sig(abs(c), abs(b))>0) return FRONT;\n\treturn ON;\n}\n\n// 直線abと点cの距離\nD distLP(L l, P c)\n{\n\treturn abs(cross(l.b-l.a, c-l.a))/abs(l.b-l.a);\n}\n\n// 線分abと点cの距離\nD distSP(L l, P c)\n{\n\tif (sig(dot(l.b-l.a, c-l.a))<0) return abs(c-l.a);\n\tif (sig(dot(l.a-l.b, c-l.b))<0) return abs(c-l.b);\n\treturn abs(cross(l.b-l.a, c-l.a))/abs(l.b-l.a);\n}\n\n// 線分と線分の交差判定\nbool iSS(L s, L t)\n{\n\treturn (ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0)\n\t\t\t&& (ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0);\n}\n\n\n/** Problem CGL_1-C : Counter-Clockwise **/\nint main()\n{\n\tP a, b, c;\n\tcin>>a.X>>a.Y>>b.X>>b.Y;\n\tint q; cin>>q;\n\trep(i, q) {\n\t\tcin>>c.X>>c.Y;\n\t\tint tmp = ccw(a, b, c);\n\t\tstring ans=\"ON_SEGMENT\";\n\t\tif (tmp==LEFT) ans=\"COUNTER_CLOCKWISE\";\n\t\tif (tmp==RIGHT) ans=\"CLOCKWISE\";\n\t\tif (tmp==BACK) ans=\"ONLINE_BACK\";\n\t\tif (tmp==FRONT) ans=\"ONLINE_FRONT\";\n\t\tcout << ans << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<sstream>\n#include<algorithm>\n#include<climits>\n#include<cmath>\n#include<cstdio>\n#include<cstdlib>\n#include<ctime>\n#include<cfloat>\n#include<functional>\n#include<map>\n#include<string>\n#include<cstring>\n#include<vector>\n#include<queue>\n#include<stack>\n#include<deque>\n#include<set>\n#include<bitset>\n#include<list>\n#include<numeric>\n#include<complex>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int, int> i_i;\ntypedef pair<long long, int> ll_i;\ntypedef pair<double, int> d_i;\ntypedef pair<long long, long long> ll_ll;\ntypedef pair<double, double> d_d;\n\n#define PI 3.141592653589793238462643383279\n#define mod 1000000007LL\n#define rep(i, n) for(i = 0;i < n;++i)\n#define rep1(i, n) for(i = 1;i < n;++i)\n#define rep2d(i, j, n) for(i = 0;i < n;++i)for(j = i + 1;j < n;++j)\n#define per(i, n) for(i = n - 1;i > -1;--i)\n#define int(x) int x; scanf(\"%d\",&x)\n#define int2(x, y) int x, y; scanf(\"%d%d\",&x, &y)\n#define int3(x, y, z) int x, y, z; scanf(\"%d%d%d\",&x, &y, &z)\n#define scn(n, a) rep(i, n)cin >> a[i]\n#define sc2n(n, a, b) rep(i, n)cin >> a[i] >> b[i]\n#define pri(x) cout << x << \"\\n\"\n#define pri2(x, y) cout << x << \" \" << y << \"\\n\"\n#define pri3(x, y, z) cout << x << \" \" << y << \" \" << z << \"\\n\"\n#define pb push_back\n#define mp make_pair\n#define all(a) (a).begin(),(a).end()\n#define endl \"\\n\"\n#define kabe puts(\"---------------------------\")\n#define kara puts(\"\")\n#define debug(x) cout << \" --- \" << x << \"\\n\"\n#define debug2(x, y) cout << \" --- \" << x << \" \" << y << \"\\n\"\n#define debug3(x, y, z) cout << \" --- \" << x << \" \" << y << \" \" << z << \"\\n\"\n#define X first\n#define Y second\n#define eps 0.0001\n#define prid(x) printf(\"%.15lf\\n\", x)\n\nstruct vec{\n  double x, y;\n  vec operator+(const vec& a) const { return (vec){x + a.x, y + a.y}; }\n  vec operator-(const vec& a) const { return (vec){x - a.x, y - a.y}; }\n  vec sca(double t){ return (vec){t * x, t * y}; }\n  double dot(vec a){ return x * a.x + y * a.y; }\n  double cross(vec a){ return x * a.y - y * a.x; }\n  double norm(){ return sqrt(x * x + y * y); };\n};\nstruct line{\n  vec a, b;\n  vec getvec(){ return b - a; }\n  vec proj(vec p){\n    vec pa = p - a, ba = b - a;\n    double t = pa.dot(ba) / ba.dot(ba);\n    return a + ba.sca(t);\n  }\n  vec vref(vec p){ return proj(p).sca(2.0) - p; }\n  int ccw(vec p){\n    vec q = p - a, ba = b - a;\n    if(ba.cross(q) > 0)return 1; //ccw\n    if(ba.cross(q) < 0)return -1; //cw\n    if(ba.dot(q) < 0)return -2; //back\n    if(ba.dot(ba) < q.dot(q))return 2; //front\n    return 0; //on\n  }\n};\n\nsigned main(void){\n  int i, j, k;\n  line l;\n  cin >> l.a.x >> l.a.y >> l.b.x >> l.b.y;\n  int(q);\n  for(;q--;){\n    vec p;\n    cin >> p.x >> p.y;\n    int res = l.ccw(p);\n    if(res == 0)puts(\"ON_SEGMENT\");\n    else if(res == 2)puts(\"ONLINE_FRONT\");\n    else if(res == -2)puts(\"ONLINE_BACK\");\n    else if(res == 1)puts(\"COUNTER_CLOCKWISE\");\n    else puts(\"CLOCKWISE\");\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <complex>\n#include <string>\n#define x real() \n#define y imag() \nusing namespace std;\ntypedef complex <double> point;\ntypedef complex<double> vectol;\n\nstring ccw(point a,point b,point c) {\n  vectol ab=b-a, ac =c-a;\n  vectol d =ac*conj(ab); \n  if(d.y > 0) return \"COUNTER_CLOCKWISE\";\n  if(d.y < 0) return \"CLOCKWISE\";\n  ab = ab*conj(ab);\n  if(ab.x<d.x) return \"ONLINE_FRONT\";\n  if(0>d.x) return \"ONLINE_BACK\";\n  return \"ON_SEGMENT\";\n}\n\nint main() {\n  double x0,y0,x1,y1;\n  cin>>x0>>y0>>x1>>y1;\n  point a = point( x0, y0);\n  point b = point( x1, y1);\n  int n;\n  cin >> n;\n  for(int i=0;i<n;i++){\n    cin >> x0 >> y0;\n    cout << ccw(a,b,point(x0,y0)) <<endl;\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <iostream>\n#include <cmath>\n#include <vector>\nusing namespace std;\ntypedef double D;\nconst D EPS = 1e-8;\nconst D INF = 1e9;\nconst D PI = M_PI;\n\nstruct P {\n    D x, y;\n    P(D x, D y) : x(x), y(y) { }\n    P() { }\n};\n\nP operator +(P a, P b) {\n    a.x += b.x, a.y += b.y;\n    return a;\n}\n\nP operator -(P a, P b) {\n    a.x -= b.x, a.y -= b.y;\n    return a;\n}\n\n// ???????????????\nP operator *(P p, D s) {\n    p.x *= s, p.y *= s;\n    return p;\n}\n\nD inp(P a, P b) {\n    return a.x*b.x + a.y*b.y;\n}\n\nD outp(P a, P b) {\n    return a.x*b.y - a.y*b.x;\n}\n\nD norm(P p) {\n    return inp(p, p);\n}\n\nD abs(P p) {\n    return sqrt(norm(p));\n}\n\nD arg(P p) {\n    return atan2(p.y, p.x);\n}\n\nbool eq(P a, P b) {\n    return abs(a-b) < EPS;\n}\n\nP rot90(P p) {\n    return P(-p.y, p.x);\n}\n\n// angle???????????????radian\nP rot(P p, D angle) {\n    P q;\n    q.x = cos(angle)*p.x - sin(angle)*p.y;\n    q.y = sin(angle)*p.x + cos(angle)*p.y;\n    return q;\n}\n\nstruct L : vector<P> {\n    L(P a, P b) {\n        this->push_back(a);\n        this->push_back(b);\n    }\n\n    L() {\n        this->resize(2);\n    }\n};\n\nstruct C {\n    P p; double r;\n    C(P p = P(), double r = 0) : p(p), r(r) { }\n};\n\n// ??卒???l???????????????p?????????\n// (l??????p??????????????????????????即????????????????賊???????)\n// norm??則?????贈?????????(abs??則??????????????????)\nP projection(L l, P p) {\n    P a = l[1] - l[0];\n    P b = p - l[0];\n    double t = inp(b, a) / norm(a);\n    return l[0] + a * t;\n}\n\n// ??卒???l???????????????p???????属?\n// (l????????????????則属???p??????)\nP reflection(L l, P p) {\n    return p + (projection(l, p) - p) * 2;\n}\n\nint ccw(P a, P b, P c) {\n    b = b - a; c = c - a;\n\n    // a - b - c ????????????????????即???\n    if(outp(b, c) > EPS)  return +1; // ???????即???????\n    if(outp(b, c) < -EPS) return -1; // ????即???????\n\n    // a - b - c ??卒??????????????其??即???\n    if(inp(b, c) < 0)     return +2; // c - a - b\n    if(norm(b) < norm(c)) return -2; // a - b - c\n    return 0;                        // a - c - b\n}\n\nint main() {\n    D x, y;\n\n    cin >> x >> y;\n    P p0(x, y);\n\n    cin >> x >> y;\n    P p1(x, y);\n\n    int Q; cin >> Q;\n    while(Q--) {\n        cin >> x >> y;\n        P p2(x, y);\n        int res = ccw(p0, p1, p2);\n        switch(res) {\n            case +1: puts(\"COUNTER_CLOCKWISE\"); break;\n            case -1: puts(\"CLOCKWISE\"); break;\n            case +2: puts(\"ONLINE_BACK\"); break;\n            case -2: puts(\"ONLINE_FRONT\"); break;\n            case  0: puts(\"ON_SEGMENT\"); break;\n        }\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <cassert>\n#define FOR(i,a,b) for(int i=(a);i<(b);i++)\n#define REP(i,n) FOR(i,0,n)\n#define rep(i,n) FOR(i,0,n)\n#define DEBUG(x) cout<<#x<<\": \"<<x<<endl\n#define vint vector<int>\n#define vdouble vector<double>\n#define vstring vector<string>\nusing namespace std;\n\n#include<map>\n#include<set>\n#include<queue>\n\ntypedef long long ll;\ntypedef unsigned long long ull;\n\nconst int MAX_N = 1000000;\nconst int INFTY = (1 << 21); // 2097152\n// const ll INFTY = (1LL << 60);\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a)-(b)) < EPS)\n\nclass Point{\npublic:\n\tdouble x, y;\n\tPoint(double x=0, double y=0):x(x), y(y){}\n\n\tPoint operator + (Point p){ return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p){ return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a){ return Point(a * x, a * y); }\n\tPoint operator / (double a){ return Point(x / a, y / a); }\n\n\tdouble abs() { return sqrt(norm()); }\n\tdouble norm() { return x * x + y * y;}\n\tbool operator < (const Point &p) const {\n\t\t// first x, second y\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p) const{\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\n\ntypedef Point Vector;\n\nstruct Segment{\npublic:\n\tPoint p1, p2;\n\tSegment(Point p1, Point p2){\n\t\tthis->p1 = p1;\n\t\tthis->p2 = p2;\n\t}\n};\n\n// ??????\ndouble dot(Vector a, Vector b){\n\t//|a||b|cos(theta)\n\treturn a.x * b.x + a.y * b.y;\n}\n\n// ??????\ndouble cross(Vector a, Vector b){\n\t//|a||b|cos(theta)\n\treturn a.x * b.y - a.y * b.x;\n}\n\n// ??´?????????\nbool isOrthogonal(Vector a, Vector b){\n\treturn equals(dot(a, b), 0.0);\n}\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2){\n\treturn isOrthogonal(a1 - a2, b1- b2);\n}\n\n// ????????????\nbool isParallel(Vector a, Vector b){\n\treturn equals(cross(a, b), 0.0);\n}\nbool isParallel(Point a1, Point a2, Point b1, Point b2){\n\treturn isParallel(a1 - a2, b1- b2);\n}\n\n// ???p????????????s???????????????????????????\nPoint project(Segment s, Point p){\n\t// ??\\??????????????????\n\t// hypo -> p - p1, base -> p2 - p1\n\t// t = |hypo|cos??\n\t// cos?? = dot(hypo,base)/|hypo||base|\n\t// project = s.p1 + base/|base| * t\n\tVector hypo = p - s.p1;\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(hypo, base) / base.norm();\n\treturn s.p1 + base * r;\n}\n\n// ???p????????????s???????§°?????¨?????????\nPoint reflection(Segment s, Point p){\n\tPoint pr = project(s, p);\n\treturn p + (pr - p) * 2.0;\n}\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\n// p0??????p1????????????????????????????????????p2?????????\nint ccw(Point p0, Point p1, Point p2){\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif( cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif( cross(a, b) < -EPS) return CLOCKWISE;\n\tif (dot(a,b) <-EPS) return ONLINE_BACK;\n\tif (a.norm() < b.norm()) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\n// ????????????????????? ??????p1->p2, p3->p4\nbool intersect(Point p1, Point p2, Point p3, Point p4){\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n            ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\n\n// ?????????????????????\nbool intersect(Segment s1, Segment s2){\n    return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\n// ???????????????\nPoint crosspoint(Segment s1, Segment s2){\n\t// s1.p1??????s2???????????????????????????d1\n\t// s1.p2??????s2???????????????????????????d2??¨????????¨???\n\t// ?????????s1???d1/(d1+d2)?????????????????¨??????\n\tVector base = s2.p2 - s2.p1;\n\tVector hypo1 = s1.p1 - s2.p1;\n\tVector hypo2 = s1.p2 - s2.p1;\n\tdouble d1 = abs(cross(base, hypo1)) / base.abs();\n\tdouble d2 = abs(cross(base, hypo2)) / base.abs();\n\tdouble t = d1 / (d1 + d2);\n\treturn s1.p1 + (s1.p2 - s1.p1) * t;\n}\n\n// ???????????¢\ndouble distance(Point a, Point b){\n\treturn (a - b).abs();\n}\n\n// ?????¨??´???????????¢\ndouble distanceLinePoint(Segment s, Point p){\n\t// sin?? = |cross(hypo, base)|/|hypo||base|\n\t// distance = |hypo|sin?? = |cross(hypo, base)|/|base|\n\tVector hypo = p - s.p1;\n\tVector base = s.p2 - s.p1;\n\treturn abs(cross(hypo, base)) / base.abs();\n}\n\n// ?????¨??????????????¢\ndouble distanceSegmentPoint(Segment s, Point p){\n\t// (p2-p1)??¨???p-p1??????90???????????§????????´??????p??¨p1????????¢\n\t// (p1-p2)??¨???p-p2??????90???????????§????????´??????p??¨p2????????¢\n\t// ????????\\????????´???????????¨??´???????????¢\n\tif(dot(s.p2-s.p1, p-s.p1) < 0.0) return (p - s.p1).abs();\n\tif(dot(s.p1-s.p2, p-s.p2) < 0.0) return (p - s.p2).abs();\n\treturn distanceLinePoint(s, p);\n}\n\n// ????????¨??????????????¢\ndouble distanceSegmentSegment(Segment s1, Segment s2){\n\tif(intersect(s1, s2)) return 0.0;\n\tdouble ret = distanceSegmentPoint(s1, s2.p1);\n\tret = min(ret, distanceSegmentPoint(s1, s2.p2));\n\tret = min(ret, distanceSegmentPoint(s2, s1.p1));\n\tret = min(ret, distanceSegmentPoint(s2, s1.p2));\n\treturn ret;\n}\n\n\nclass Answer{\npublic:\n\tstatic void CGL_1_A() {\n\t\tint Q;\n\t\tPoint p1, p2;\n\t\tcin >> p1.x >> p1.y >> p2.x >> p2.y;\n\t\tcin >> Q;\n\t\trep(i, Q){\n\t\t\tPoint pp;\n\t\t\tcin >> pp.x >> pp.y;\n\t\t\tPoint pr = project(Segment(p1, p2), pp);\n\t\t\tfprintf(stdout, \"%.10f %.10f\\n\", pr.x, pr.y);\n\t\t}\n\t}\n\tstatic void CGL_1_B() {\n\t\tint Q;\n\t\tPoint p1, p2;\n\t\tcin >> p1.x >> p1.y >> p2.x >> p2.y;\n\t\tcin >> Q;\n\t\trep(i, Q){\n\t\t\tPoint pp;\n\t\t\tcin >> pp.x >> pp.y;\n\t\t\tPoint rf = reflection(Segment(p1, p2), pp);\n\t\t\tfprintf(stdout, \"%.10f %.10f\\n\", rf.x, rf.y);\n\t\t}\n\t}\n\tstatic void CGL_1_C() {\n\t\tint Q;\n\t\tPoint p0, p1;\n\t\tcin >> p0.x >> p0.y >> p1.x >> p1.y;\n\t\tcin >> Q;\n\t\trep(i, Q){\n\t\t\tPoint p2;\n\t\t\tcin >> p2.x >> p2.y;\n\t\t\tint c = ccw(p0, p1, p2);\n\t\t\tif(c == COUNTER_CLOCKWISE) cout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t\tif(c == CLOCKWISE) cout << \"CLOCKWISE\" << endl;\n\t\t\tif(c == ONLINE_BACK) cout << \"ONLINE_BACK\" << endl;\n\t\t\tif(c == ONLINE_FRONT) cout << \"ONLINE_FRONT\" << endl;\n\t\t\tif(c == ON_SEGMENT) cout << \"ON_SEGMENT\" << endl;\n\t\t}\n\t}\n\tstatic void CGL_2_A() {\n\t\tint Q;\n\t\tcin >> Q;\n\t\trep(i, Q){\n\t\t\tPoint p0, p1, p2, p3;\n\t\t\tcin >> p0.x >> p0.y;\n\t\t\tcin >> p1.x >> p1.y;\n\t\t\tcin >> p2.x >> p2.y;\n\t\t\tcin >> p3.x >> p3.y;\n\t\t\tint r;\n\t\t\tif(isOrthogonal(p0,p1,p2,p3)) {r = 1;}\n\t\t\telse if(isParallel(p0,p1,p2,p3)){r = 2;}\n\t\t\telse{r = 0;}\n\t\t\tcout << r << endl;\n\t\t}\n\t}\n\tstatic void CGL_2_B() {\n\t\tint Q;\n\t\tcin >> Q;\n\t\trep(i, Q){\n\t\t\tPoint p0, p1;\n\t\t\tcin >> p0.x >> p0.y >> p1.x >> p1.y;\n\t\t\tPoint p2, p3;\n\t\t\tcin >> p2.x >> p2.y >> p3.x >> p3.y;\n\t\t\tcout << (intersect(p0, p1, p2, p3) ? 1 : 0) << endl;\n\t\t}\n\t}\n\tstatic void CGL_2_C() {\n\t\tint Q;\n\t\tcin >> Q;\n\t\trep(i, Q){\n\t\t\tPoint p0, p1;\n\t\t\tcin >> p0.x >> p0.y >> p1.x >> p1.y;\n\t\t\tPoint p2, p3;\n\t\t\tcin >> p2.x >> p2.y >> p3.x >> p3.y;\n\t\t\tPoint c = crosspoint(Segment(p0, p1), Segment(p2, p3));\n\t\t\tfprintf(stdout, \"%.10f %.10f\\n\", c.x, c.y);\n\t\t}\n\t}\n\n\tstatic void CGL_2_D(){\n\t\tint Q;\n\t\tcin >> Q;\n\t\trep(i, Q){\n\t\t\tPoint p0, p1;\n\t\t\tcin >> p0.x >> p0.y >> p1.x >> p1.y;\n\t\t\tPoint p2, p3;\n\t\t\tcin >> p2.x >> p2.y >> p3.x >> p3.y;\n\t\t\tdouble ret = distanceSegmentSegment(Segment(p0, p1), Segment(p2, p3));\n\t\t\tfprintf(stdout, \"%.10f\\n\", ret) ;\n\t\t}\n\t}\n};\n\nint main() {\n\tAnswer::CGL_1_C();\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <math.h>\n#include <map>\n\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a)-(b)) < EPS)\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ONLINE_SEGMENT = 0;\n\nmap<int, string> ccwMap{\n\t{ COUNTER_CLOCKWISE, \"COUNTER_CLOCKWISE\" },\n\t{ CLOCKWISE, \"CLOCKWISE\"},\n\t{ ONLINE_BACK, \"ONLINE_BACK\"},\n\t{ ONLINE_FRONT ,\"ONLINE_FRONT\"},\n\t{ ONLINE_SEGMENT , \"ONLINE_SEGMENT\"} \n};\n\nclass Point{\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0) :x(x), y(y){}\n\n\tPoint operator + (Point p){ return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p){ return Point(x - p.x, y - p.y); }\n\tPoint operator * (Point p){ return Point(x * p.x, y * p.y); }\n\tPoint operator / (Point p){ return Point(x / p.x, y / p.y); }\n\n\tPoint operator * (double t){ return Point(x * t, y * t); }\n\tPoint operator / (double t){ return Point(x / t, y / t); }\n\n\n\tdouble abs(){ return sqrt(norm()); }\n\tdouble norm(){ return x * x + y * y; }\n\n\tbool operator<(const Point &p){ return (x != p.x) ? (x < p.x) : (y < p.y); }\n\tbool operator==(const Point &p)\n\t{\n\t\treturn equals(x, p.x) && equals(y, p.y);\n\t}\n};\n\ntypedef Point Vector;\n\nclass Segment{\npublic:\n\tPoint p1, p2;\n};\n\ntypedef Segment Line;\n\ndouble dot(Vector a, Vector b){\n\treturn a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b){\n\treturn a.x * b.y - a.y * b.x;\n}\n\nbool isOrthogonal(Vector a, Vector b){\n\treturn equals(dot(a, b), 0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2){\n\treturn isOrthogonal(a1 - a2, b1 - b2);\n}\n\nbool isParallel(Vector a, Vector b){\n\treturn equals(cross(a, b), 0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2){\n\treturn isParallel(a1 - a2, b1 - b2);\n}\n\nPoint projection(Segment s, Point p){\n\tVector v1 = s.p2 - s.p1;\n\tVector v2 = p - s.p1;\n\treturn s.p1 + v1 * dot(v1, v2) / v1.norm();\n}\n\nPoint reflection(Segment s, Point p){\n\treturn p + (projection(s, p) - p) * 2.0;\n}\n\ndouble dist_p_p(Point p1, Point p2){\n\treturn Vector(p1 - p2).abs();\n}\n\ndouble dist_p_l(Line l, Point p){\n\tVector v1 = p - l.p1;\n\tVector v2 = l.p2 - l.p1;\n\treturn cross(v1, v2) / v2.abs();\n}\n\ndouble dist_p_s(Segment s, Point p){\n\tif (dot(p - s.p1, s.p2 - s.p1) < EPS) return (p - s.p1).abs();\n\tif (dot(p - s.p2, s.p1 - s.p2) < EPS) return (p - s.p2).abs();\n\treturn dist_p_l(s, p);\n}\n\n/*\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n*/\n\nint ccw(Point p0, Point p1, Point p2){\n\tVector v1 = p1 - p0;\n\tVector v2 = p2 - p0;\n\tdouble c = cross(v1, v2);\n\tif (c > EPS) return COUNTER_CLOCKWISE;\n\tif (c < -EPS) return CLOCKWISE;\n\tdouble d = dot(v1, v2);\n\tif (d < -EPS) return ONLINE_BACK;\n\tif (v1.norm() < v2.norm()) return ONLINE_FRONT;\n\treturn ONLINE_SEGMENT;\n}\n\ndouble dist_s_s(Segment s1, Segment s2){\n\treturn 0;\n}\n\nint main()\n{\n\tstd::ios_base::sync_with_stdio(false);\n\tcout.precision(20);\n\n\tPoint p0, p1;\n\tcin >> p0.x >> p0.y >> p1.x >> p1.y;\n\n\tint q; cin >> q;\n\tfor (int i = 0; i < q; ++i){\n\t\tPoint p2; cin >> p2.x >> p2.y;\n\t\tint res = ccw(p0, p1, p2);\n\t\tcout << ccwMap[res] << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<iomanip>\n#include<algorithm>\n#include<fstream>\n#define _USE_MATH_DEFINES\n#include<math.h>\n#define EPS (1e-5)\n#define equals(a, b) (fabs((a) - (b)) < EPS )\n//#define cout fout\n//#define cin fin\nusing namespace std;\n\nclass Point {\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0) :x(x), y(y) {}\n\tPoint operator + (Point p) {\n\t\treturn Point(x + p.x, y + p.y); \n\t}\n\tPoint operator - (Point p) {\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n\tPoint operator * (double a) {\n\t\treturn Point(a * x, a * y);\n\t}\n\tPoint operator / (double a) {\n\t\treturn Point(x / a, y / a);\n\t}\n\n\tdouble abs() {\n\t\treturn sqrt(norm());\n\t}\n\tdouble norm() {\n\t\treturn x * x + y * y;\n\t}\n\n\tbool operator < (const Point &p)const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p)const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\n\ntypedef Point Vector;\n\n#ifdef cin\nifstream fin(\"CGL_1_C-in29.txt\");\n#endif\n\n#ifdef cout\nofstream fout(\"out.txt\");\n#endif\n\ndouble dot(Vector a, Vector b);\ndouble cross(Vector a, Vector b);\ndouble getDistanceSP(Point p, Point p1, Point p2);\ndouble angle(Vector a, Vector b);\nbool doIntersect(Point p1, Point p2, Point p3, Point p4);\ndouble getDistanceSS(Point p1, Point p2, Point p3, Point p4);\nvoid clockwise(Point p0, Point p1, Point p2);\n\nint main() {\n    int i, q;\n\tdouble x0, x1, x2, y0, y1, y2;\n\t\n\tcin >> x0 >> y0 >> x1 >> y1;\n\tPoint p0(x0, y0), p1(x1, y1);\n\tcin >> q;\n\tfor (i = 0; i < q; i++) {\n\t\tcin >> x2 >> y2;\n\t\tPoint p2(x2, y2);\n\t\tclockwise(p0, p1, p2);\n\t}\n\tfin.close();\n\tfout.close();\n\treturn 0;\n}\n\ndouble dot(Vector a, Vector b) {\n\treturn a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n\treturn a.x * b.y - a.y * b.x;\n}\n\ndouble getDistanceSP(Point p, Point p1, Point p2) {\n\tif (dot(p - p1, p2 - p1) < 0.0)return (p - p1).abs();\n\telse if (dot(p - p2, p1 - p2) < 0.0)return (p - p2).abs();\n\telse return  fabs(cross(p2 - p1, p - p1)) / (p2 - p1).abs();\n}\n\n\ndouble angle(Vector a, Vector b) {\n\tif (equals(dot(a, b), a.abs() * b.abs()))return 0.0;\n\telse if (equals(dot(a, b), (-1) * a.abs() * b.abs()))return M_PI;\n\tif (cross(a, b) > 0.0)return acos(dot(a, b) / a.abs() / b.abs());\n\telse return (-1) * acos(dot(a, b) / a.abs() / b.abs());\n}\n\nbool doIntersect(Point p1, Point p2, Point p3, Point p4) {\n\tif ((equals(fabs(angle(p2 - p1, p4 - p1)), 0) || equals(fabs(angle(p2 - p1, p4 - p1)), M_PI)) && (equals(fabs(angle(p2 - p1, p3 - p1)), 0) || equals(fabs(angle(p2 - p1, p3 - p1)), M_PI)))return false;\n\telse if (angle(p3 - p1, p4 - p1) >= angle(p3 - p1, p2 - p1) && angle(p3 - p1, p2 - p1) >= 0.0 && angle(p2 - p3, p1 - p3) >= angle(p2 - p3, p4 - p3) && angle(p2 - p3, p4 - p3) >= 0.0)return true;\n\telse if (angle(p3 - p2, p4 - p2) >= angle(p3 - p2, p1 - p2) && angle(p3 - p2, p1 - p2) >= 0.0 && angle(p1 - p3, p2 - p3) >= angle(p1 - p3, p4 - p3) && angle(p1 - p3, p4 - p3) >= 0.0)return true;\n\telse return false;\n}\n\ndouble getDistanceSS(Point p1, Point p2, Point p3, Point p4) {\n\tif (doIntersect(p1, p2, p3, p4))return 0;\n\telse return min({ getDistanceSP(p4, p1, p2), getDistanceSP(p3, p1, p2), getDistanceSP(p1, p3, p4), getDistanceSP(p2, p3, p4) });\n}\n\nvoid clockwise(Point p0, Point p1, Point p2) {\n\tif (p2 == p0 || p2 == p1) {\n\t\tcout << \"ON_SEGMENT\" << endl;\n\t} else if (angle(p1 - p0, p2 - p0) == 0.0) {\n\t\tif((p1 - p0).norm() < (p2 - p0).norm())cout << \"ONLINE_FRONT\" << endl;\n\t\telse cout << \"ON_SEGMENT\" << endl;\n\t} else if(angle(p1 - p0, p2 - p0) == M_PI){\n\t\tcout << \"ONLINE_BACK\" << endl;\n\t} else {\n\t\tif(angle(p1 - p0, p2 - p0) > 0.0)cout << \"COUNTER_CLOCKWISE\" << endl;\n\t\telse cout << \"CLOCKWISE\" << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <vector>\n#include <queue>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals (fabs((a)-(b)<EPS)\nint n;\n\nstruct Point\n{\n    double x, y;\n    Point(){}\n    Point(double x,double y):x(x),y(y){}\n    Point operator +(Point a)\n    {\n        return Point(x+a.x,y+a.y);\n    }\n    Point operator -(Point a)\n    {\n        return Point(x-a.x,y-a.y);\n    }\n    Point operator *(double a)\n    {\n        return Point(x*a,y*a);\n    }\n\n    double norm()\n    {\n        return x*x+y*y;\n    }\n};\nPoint p1,p2,p;\ndouble cross(Point a,Point b)\n{\n    return a.x*b.y-b.x*a.y;\n}\ndouble dot(Point a,Point b)\n{\n    return a.x*b.x+a.y*b.y;\n}\nvoid solve()\n{\n    Point a=p2-p1;\n    Point b=p-p1;\n    if(cross(a,b)>EPS) printf(\"COUNTER_CLOCKWISE\\n\");\n    else if(cross(a,b)<-EPS) printf(\"CLOCKWISE\\n\");\n    else if(dot(a,b)<-EPS) printf(\"ONLINE_BACK\\n\");\n    else if(a.norm()<b.norm()) printf(\"ONLINE_FRONT\\n\");\n    else printf(\"ON_SEGMENT\\n\");\n\n}\n\nint main()\n{\n//    freopen(\"in.txt\",\"r\",stdin);\n    scanf(\"%lf%lf%lf%lf\",&p1.x,&p1.y,&p2.x,&p2.y);\n    scanf(\"%d\",&n);\n    while(n--)\n    {\n        scanf(\"%lf%lf\",&p.x,&p.y);\n        solve();\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define rep(i, a, b) for(int i = (a); i <= (b); ++i)\n#define per(i, a, b) for(int i = (a); i >= (b); --i)\n#define debug(x) cerr << #x << ' ' << x << endl;\nusing namespace std;\n\ntypedef long long ll;\nconst int mod = 1e9+7;\nconst int MAXN = 2e5 + 7;\nconst double EPS=1e-8;\ninline int sign(double a){return a<-EPS?-1:a>EPS;}\ninline int cmp(double a,double b){return sign(a-b);}\n//点\nstruct P{\n    double x,y;\n    P(){}\n    P(double _x,double _y):x(_x),y(_y){}\n    P operator + (P p){return P(x+p.x,y+p.y);}\n    P operator - (P p){return P(x-p.x,y-p.y);}\n    P operator * (double k){return P(x*k,y*k);}\n    P operator / (double k){return P(x/k,y/k);}\n    double dot(P p){return x*p.x+y*p.y;}\n    double det(P p){return x*p.y-y*p.x;}\n    double distTo(P p){return (*this-p).abs();}\n    double alpha(){return atan2(y,x);}\n    void read(){scanf(\"%lf%lf\", &x, &y);}\n    void write(){printf(\"%.10lf %.10lf\\n\", x, y);}\n    double abs(){return sqrt(abs2());}\n    double abs2(){return x*x+y*y;}\n    P rot90(){return P(-y,x);}\n    P unit(){return *this/abs();}\n    int quad(){return sign(y)==1||(sign(y)==0&&sign(x)>=0);}\n    P rot(double an){return P(x*cos(an)-y*sin(an),x*sin(an)+y*cos(an));}\n    bool operator < (P p)const{int c=cmp(x,p.x);if(c)return c==-1;return cmp(y,p.y)==-1;}\n    bool operator == (P o)const{return cmp(x,o.x)==0&&cmp(y,o.y)==0;}\n};\n\nint main(int argc, char const *argv[])\n{\n    P p0, p1, p2;\n    p0.read(); p1.read();\n    int q;\n    scanf(\"%d\", &q);\n    while (q--) {\n        p2.read();\n        double xpd = (p1-p0).det(p2-p0);\n        if(fabs(xpd) < EPS) {\n            xpd = (p1-p0).dot(p2-p0);\n            if(sign(xpd) == -1) printf(\"ONLINE_BACK\\n\");\n            else if((p1-p0).abs() < (p2-p0).abs())  printf(\"ONLINE_FRONT\\n\");\n            else printf(\"ON_SEGMENT\\n\");\n        } else {\n            if(sign(xpd) == 1)  printf(\"COUNTER_CLOCKWISE\\n\");\n            else    printf(\"CLOCKWISE\\n\");\n        }\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n#define rep(i,n) for(int i = 0; i < (n) ; i++)\nconstexpr auto INF = 2147483647;\nstatic const double EPS = pow(10,-10);\ntypedef long long ll;\nstatic int COUNTER_CLOCKWISE = 1;\nstatic int CLOCKWISE = -1;\nstatic int ONLINE_BACK = 2;\nstatic int ONLINE_FRONT = -2;\nstatic int ON_SEGMENT = 0;\n\n\n\n\nclass Vector2{\n  public:\n  double x, y;\n  Vector2(){}\n  Vector2(double x, double y): x(x), y(y) {}\n\n  Vector2 operator + (Vector2 v) {\n    return Vector2(x + v.x , y + v.y);\n  }\n  Vector2 operator - (Vector2 v) {\n    return Vector2(x - v.x , y - v.y);\n  }\n\n  Vector2 operator * (double d){\n    return Vector2(d*x, d*y);\n  }\n\n  double norm(){\n    return pow(x,2) + pow(y,2);\n  }\n\n};\n\ndouble dot(Vector2 a, Vector2 b){\n  return a.x * b.x + a.y * b.y; \n}\n\ndouble cross(Vector2 a, Vector2 b){\n  return a.x * b.y - a.y*b.x;\n}\n\nVector2 projection(Vector2 a, Vector2 b, Vector2 p){\n  Vector2 base = b - a;\n  Vector2 hypo = p - a;\n  double norm_base = pow(base.x,2) + pow(base.y,2);\n\n  Vector2 x;\n  x = a + base*(dot(hypo,base) / norm_base);\n  return x;\n}\n\nVector2 refrection(Vector2 a, Vector2 b, Vector2 p){\n  Vector2 v, p_projection;\n  p_projection = projection(a,b,p); \n  v = p_projection + (p_projection - p);\n  return v;\n}\n\nint ccw(Vector2 a, Vector2 b, Vector2 p){\n  Vector2 hypo = p - a;\n  Vector2 base = b - a;\n  if(cross(base,hypo) > EPS) return COUNTER_CLOCKWISE;\n  if(cross(base,hypo) < -EPS) return CLOCKWISE;\n  if(dot(base,hypo) < -EPS) return ONLINE_BACK;\n  if(hypo.norm() > base.norm()) return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\n\n\n\n\nint main(){\n  Vector2 a,b,p;\n  int queri;\n  cin >> a.x >> a.y >> b.x >> b.y;\n  cin >> queri;\n  rep(i,queri){\n    cin >> p.x >> p.y;\n    int ans = ccw(a,b,p);\n    if(ans == COUNTER_CLOCKWISE) cout << \"COUNTER_CLOCKWISE\";\n    else if(ans == CLOCKWISE) cout << \"CLOCKWISE\";\n    else if(ans == ONLINE_BACK) cout << \"ONLINE_BACK\";\n    else if(ans == ONLINE_FRONT) cout << \"ONLINE_FRONT\";\n    else if(ans == ON_SEGMENT) cout << \"ON_SEGMENT\";\n    cout << endl;\n  }\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define EPS 1e-10\n\nstruct Point{\n    double x,y;\n\n    Point(){}\n    Point(double x,double y) : x(x),y(y) {}\n\n    Point operator + (const Point &p)const{ return Point(x+p.x,y+p.y); }\n    Point operator - (const Point &p)const{ return Point(x-p.x,y-p.y); }\n    Point operator * (const double &k)const{ return Point(x*k,y*k); }\n};\n\ndouble dot(const Point &a,const Point &b){ return a.x*b.x+a.y*b.y; }\ndouble cross(const Point &a,const Point &b){ return a.x*b.y - b.x*a.y; }\ndouble norm(const Point &p){ return dot(p,p); }\n\nstruct Segment{\n    Point s,t;\n    Segment(){}\n    Segment(Point s,Point t) : s(s),t(t) {}\n};\n\n#define COUNTER_CLOCKWISE 1\n#define CLOCKWISE -1\n#define ONLINE_BACK 2\n#define ONLINE_FRONT -2\n#define ON_SEGMENT 0\ntypedef Point Vector;\n\nstring ccw(Point p0,Point p1,Point p2){\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if(cross(a,b) > EPS){ return \"COUNTER_CLOCKWISE\"; }\n    if(cross(a,b) < -EPS){ return \"CLOCKWISE\"; }\n    if(dot(a,b) < -EPS){ return \"ONLINE_BACK\"; }\n    if(norm(a) < norm(b)){ return \"ONLINE_FRONT\"; }\n    return \"ON_SEGMENT\";\n}\n\nint main(){\n    int Q;\n    Point p0,p1,p2;\n    cin >> p0.x >> p0.y >> p1.x >> p1.y;\n    cin >> Q;\n    while(Q--){\n        cin >> p2.x >> p2.y;\n        cout << ccw(p0,p1,p2) << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <complex>\nusing namespace std;\ntypedef complex<int> point;\n\nstring ccw(point p0,point p1,point p2){\n  point temp;\n  p1-=p0;\n  p2-=p0;\n  temp=p1;\n  p1*=conj(p1);\n  p2*=conj(p1);\n  if(abs(temp)==0) return \"ON_SEGMENT\";\n  p1/=abs(temp);\n  p2/=abs(temp);\n  if(p2.imag()>0) return \"COUNTER_CLOCKWISE\";\n  if(p2.imag()<0) return \"CLOCKWISE\";\n  if(p2.real()<0) return \"ONLINE_BACK\";\n  if(p1.real()<p2.real()) return \"ONLINE_FRONT\";\n  return \"ON_SEGMENT\";\n}\n\nint main(){\n  int p0x,p0y,p1x,p1y,q,p2x,p2y;\n  cin>>p0x>>p0y>>p1x>>p1y;\n  point A = point(p0x,p0y);\n  point B = point(p1x,p1y);\n  cin>>q;\n  while(q--){\n    cin>>p2x>>p2y;\n    cout << ccw(  A, B , point(p2x,p2y) ) <<endl;    \n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#include<vector>\n#include<stack>\n#include<queue>\n#include<list>\n#include<string>\n#include<cstring>\n#include<cstdlib>\n#include<cstdio>\n#include<cmath>\n#include<ctime>\nusing namespace std;\n\ntypedef long long ll;\n\nbool debug = false;\nconst int NIL = -1;\nconst int INF = 1000000000;\nconst int NUM = 100010;\nconst double eps = 1e-10;\nclock_t START, END;\n\nint X, Y, E;\n\n//basic defitition\nstruct Point {\n\tdouble x, y;\n\tPoint(double x = 0, double y = 0) :x(x), y(y) {}\n};\ntypedef Point Vector;\nVector operator + (Vector A, Vector B) { return Vector(A.x + B.x, A.y + B.y); }\nVector operator - (Point A, Point B) { return Vector(A.x - B.x, A.y - B.y); }\nVector operator * (Vector A, double p) { return Vector(A.x * p, A.y * p); }\nVector operator / (Vector A, double p) { return Vector(A.x / p, A.y / p); }\nbool operator < (const Point& a, const Point& b) { return a.x < b.x || (a.x == b.x && a.y < b.y); }\nint dcmp(double x) { if (fabs(x) < eps)return 0; else return x < 0 ? -1 : 1; }\nbool operator == (const Point& a, const Point& b) { return dcmp(a.x - b.x) == 0 && dcmp(a.y - b.y) == 0; }\n// basic operator\ndouble Dot(Vector A, Vector B) { return A.x * B.x + A.y * B.y; }\ndouble Length(Vector A) { return sqrt(Dot(A, A)); }\ndouble Angle(Vector A, Vector B) { return acos(Dot(A, B) / Length(A) / Length(B)); }\ndouble Cross(Vector A, Vector B) { return A.x * B.y - A.y * B.x; }\ndouble Area2(Point A, Point B, Point C) { return Cross(B - A, C - A); }\nVector Rotate(Vector A, double rad) { return Vector(A.x * cos(rad) - A.y * sin(rad), A.x * sin(rad) + A.y * cos(rad)); }\nVector Normal(Vector A) { double L = Length(A); return Vector(-A.y / L, A.x / L); } //A is not zero vector\n//point and line\nPoint GetLineIntersection(Point P, Vector v, Point Q, Vector w) {\n\tVector u = P - Q;\n\tdouble t = Cross(w, u) / Cross(v, w);\n\treturn P + v * t;\n}//two lines only have one intersection and Cross(v,w) is not zero\ndouble DistanceToLine(Point P, Point A, Point B) {\n\tVector v1 = B - A, v2 = P - A;\n\treturn fabs(Cross(v1, v2)) / Length(v1);\n}\ndouble DistanceToSegment(Point P, Point A, Point B) {\n\tif (A == B) return Length(P - A);\n\tVector v1 = B - A, v2 = P - A, v3 = P - B;\n\tif (dcmp(Dot(v1, v2)) < 0) return Length(v2);\n\telse if (dcmp(Dot(v1, v3)) > 0) return Length(v3);\n\telse return fabs(Cross(v1, v2)) / Length(v1);\n}\nPoint GetLineProjection(Point P, Point A, Point B) {\n\tVector v = B - A;\n\treturn A = v * (Dot(v, P - A) / Dot(v, v));\n}\nbool SegmentProperIntersection(Point a1, Point a2, Point b1, Point b2) {\n\tdouble c1 = Cross(a2 - a1, b1 - a1), c2 = Cross(a2 - a1, b2 - a1), c3 = Cross(b2 - b1, a1 - b1), c4 = Cross(b2 - b1, a2 - b1);\n\treturn dcmp(c1) * dcmp(c2) < 0 && dcmp(c3) * dcmp(c4) < 0;\n}\nbool OnSegment(Point p, Point a1, Point a2) {\n\treturn dcmp(Cross(a1 - p, a2 - p)) == 0 && dcmp(Dot(a1 - p, a2 - p)) < 0;\n}\n//polygon\ndouble ConvexPolygonArea(Point* p, int n) {\n\tdouble area = 0;\n\tfor (int i = 1; i < n - 1; i++)\n\t\tarea = Cross(p[i] - p[0], p[i + 1] - p[0]);\n\treturn area / 2;\n}\n\n\nint main(void)\n{\n\tif (debug) {\n\t\tSTART = clock();\n\t\tfreopen(\"in29.txt\", \"r\", stdin);\n\t\tfreopen(\"out.txt\", \"w\", stdout);\n\t}\n\tint q;\n\tPoint A, B, C;\n\tscanf(\"%lf%lf%lf%lf\", &A.x, &A.y, &B.x, &B.y);\n\tcin >> q;\n\tfor (int i = 0; i < q; i++) {\n\t\tscanf(\"%lf%lf\", &C.x, &C.y);\n\t\tif (dcmp(Cross(B - A, C - A)) > 0)\n\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\telse if (dcmp(Cross(B - A, C - A)) < 0)\n\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\telse {\n\t\t\tif (dcmp(Dot(B - A, C - A)) >= 0) {\n\t\t\t\tif (dcmp(Length(B - A) - Length(C - A)) >= 0)\n\t\t\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t\t\telse\n\t\t\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t\t}\n\t\t\telse\n\t\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t}\n\t}\n\tif (debug) {\n\t\tEND = clock();\n\t\tdouble endtime = (double)(END - START) / 1000;\n\t\tprintf(\"total time = %lf s\", endtime);\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<cstdlib>\n#include<cmath>\n#include<algorithm>\n\nusing namespace std;\n\nint main()\n{\n\tdouble p1x, p1y, p2x, p2y, p0x, p0y;\n\tint q;\n\n\tscanf(\"%lf %lf %lf %lf\", &p0x, &p0y, &p1x, &p1y);\n\n\tpair<double, double> v01 = { p1x - p0x, p1y - p0y };\n\n\n\tscanf(\"%d\", &q);\n\n\tfor (int i = 0; i < q; i++)\n\t{\n\t\tscanf(\"%lf %lf\", &p2x, &p2y);\n\n\t\tif ((p2x == p0x && p2y == p0y) || (p2x == p1x && p2y == p1y)){\n\t\t\tprintf(\"ONLINE_SEGMENT\\n\");\n\n\t\t\tcontinue;\n\t\t}\n\n\t\tpair<double, double> v02 = { p2x - p0x, p2y - p0x };\n\n\t\tif (v01.first*v02.second == v01.second*v02.first)\n\t\t{\n\t\t\tif (v01.first*v02.first < 0)\n\t\t\t{\n\t\t\t\tprintf(\"ONLINE_BACK\\n\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tabs(v01.first) < abs(v02.first) ? printf(\"ONLINE_FRONT\\n\") : printf(\"ONLINE_SEGMENT\\n\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t\tdouble y01 = (v01.second / v01.first)*(p2x - p0x) + p0y;\n\t\tif (v01.first > 0){\n\t\t\ty01 < p2y ? printf(\"COUNTER_CLOCKWISE\\n\") : printf(\"CLOCKWISE\\n\");\n\t\t\tcontinue;\n\t\t}\n\t\telse{\n\t\t\ty01 > p2y ? printf(\"COUNTER_CLOCKWISE\\n\") : printf(\"CLOCKWISE\\n\");\n\t\t\tcontinue;\n\t\t}\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define int long long   // <-----!!!!!!!!!!!!!!!!!!!\n\n#define rep(i,n) for (int i=0;i<(n);i++)\n#define rep2(i,a,b) for (int i=(a);i<(b);i++)\n#define rrep(i,n) for (int i=(n)-1;i>=0;i--)\n#define rrep2(i,a,b) for (int i=(b)-1;i>=(a);i--)\n#define all(a) (a).begin(),(a).end()\n\ntypedef long long ll;\ntypedef pair<int, int> Pii;\ntypedef tuple<int, int, int> TUPLE;\ntypedef vector<int> V;\ntypedef vector<V> VV;\ntypedef vector<VV> VVV;\n\ntypedef complex<double> P;\n\ndouble cross(P a, P b) {\n    return imag(conj(a) * b);\n}\n\ndouble dot(P a, P b) {\n    return real(conj(a) * b);\n}\n\n// 0: counter-clockwise\n// 1: clockwise\n// 2: online_back\n// 3: online_front\n// 4: on_segment\nint ccw(P p0, P p1, P p2) {\n    if (cross(p1 - p0, p2 - p0) > 0) return 0;\n    if (cross(p1 - p0, p2 - p0) < 0) return 1;\n    if (dot(p1 - p0, p2 - p0) < 0) return 2;\n    if (dot(p0 - p1, p2 - p1) < 0) return 3;\n    return 4;\n}\n\nsigned main() {\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(0);\n\n    double x0, y0, x1, y1;\n    cin >> x0 >> y0 >> x1 >> y1;\n    P p0(x0, y0), p1(x1, y1);\n    int q;\n    cin >> q;\n    while (q--) {\n        double x2, y2;\n        cin >> x2 >> y2;\n        P p2(x2, y2);\n        switch (ccw(p0, p1, p2)) {\n            case 0: cout << \"COUNTER_CLOCKWISE\" << endl; break;\n            case 1: cout << \"CLOCKWISE\" << endl; break;\n            case 2: cout << \"ONLINE_BACK\" << endl; break;\n            case 3: cout << \"ONLINE_FRONT\" << endl; break;\n            case 4: cout << \"ON_SEGMENT\" << endl; break;\n        }\n    }\n\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> P;\n#define x real()\n#define y imag()\n\nstring ccw(P a,P b,P c){\n  P ab=b-a;\n  P ac=c-a;\n  P k=ac*conj(ab);\n  if( k.y > 0 ){\n    return \"COUNTER_CLOCKWISE\";\n  }\n  if( k.y < 0 ){\n    return \"CLOCKWISE\";\n  }\n  if( k.x < 0 ){\n    return \"ONLINE_BACK\";\n  }  \n  if( abs(ab) < abs(ac) ){\n    return \"ONLINE_FRONT\";\n  }\n  return \"ON_SEGMENT\";\n}\n\nint main(){\n  double x0,y0,x1,y1,x2,y2;\n  cin>>x0>>y0>>x1>>y1;\n  P a(x0,y0);\n  P b(x1,y1);\n  int n;\n  cin>>n;\n  while(n--){\n    cin>>x2>>y2;\n    P c(x2,y2);\n    cout<< ccw(a,b,c) <<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n#define fi first\n#define se second\n#define mp make_pair\n#define pb push_back\n#define rep(i, a, b) for(int i = (a); i < (b); ++i)\n#define per(i, a, b) for(int i = (b) - 1; i >= (a); --i)\n#define sz(a) (int)a.size()\n#define de(c) cout << #c << \" = \" << c << endl\n#define dd(c) cout << #c << \" = \" << c << \" \"\n#define all(a) a.begin(), a.end()\n#define pw(x) (1ll<<(x))\n#define endl \"\\n\"\ntypedef long long ll;\ntypedef double db;\ntypedef pair<int, int> pii;\ntypedef vector<int> vi;\n\ntypedef db T;\nconst db eps = 1e-9 , pi = acosl(-1.);\nint sgn(T x){return (x>eps)-(x<-eps);}\nstruct P{\n  T x,y; P(){} P(T x,T y):x(x),y(y){}\n  P operator - (const P&b) const {return P(x-b.x,y-b.y);}\n  P operator + (const P&b) const {return P(x+b.x,y+b.y);}\n  T operator * (const P&b) const {return x*b.x+y*b.y;}\n  T operator / (const P&b) const {return x*b.y-y*b.x;}\n  P operator * (const T&k) const {return P(x*k,y*k);}\n  P operator / (const T&k) const {return P(x/k,y/k);}\n};\nT norm(P a){return a*a;}\nP proj(P p,P a,P b){return (b-a)*((p-a)*(b-a)/norm(b-a))+a;}\nP reflect(P p,P a,P b){return proj(p,a,b)*2-p;}\nT cross(P o,P a,P b){return (a-o)/(b-o);}\nint crossOp(P o,P a,P b){return sgn(cross(o,a,b));}\nbool onPS(P p,P s,P t){return sgn((t-s)/(p-s))==0&&sgn((p-s)*(p-t))<=0;}\n\nP a, b, c;\n\nint main() {\n\tstd::ios::sync_with_stdio(0);\n\tstd::cin.tie(0);\n\tcin >> a.x >> a.y >> b.x >> b.y;\n\tint q;\n\tcin >> q;\n\tcout << setiosflags(ios::fixed);\n\tcout << setprecision(10);\n\twhile(q--) {\n\t\tcin >> c.x >> c.y;\n\t\tint t = crossOp(a, b, c);\n\t\tif(t > 0) {\n\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t} else if(t < 0) {\n\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\t} else {\n\t\t\tif(onPS(c, a, b)) {\n\t\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t\t} else if(onPS(b, a, c)) {\n\t\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t\t} else {\n\t\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cmath>\n#include <complex>\n#include <iostream>\nusing namespace std; \n#define X real()\n#define Y imag()\n\nconst double EPS = 1e-10;\n\nbool EQ(double a,double b){\n  return fabs(a-b) < EPS;\n}\n\ntypedef complex<double> Point;\n\nnamespace std {\n  bool operator == (const Point &a, const Point &b) {\n    return EQ(a.X, b.X) && EQ(a.Y, b.Y);\n  }\n  bool operator < (const Point &a, const Point &b) {\n    return a.X != b.X ? a.X < b.X : a.Y < b.Y;\n  }\n}\nstruct Segment {\n  Point p1, p2;\n  Segment(){};\nSegment(Point p1, Point p2) : p1(p1), p2(p2) {};\n};\n\ntypedef Segment Line;\ndouble dot(Point a, Point b){\n  return a.X * b.X + a.Y * b.Y;\n}\ndouble cross(Point a, Point b){\n  return a.real() * b.imag() - a.imag() * b.real();\n}\n\nPoint project(Segment s, Point p) {\n  double r = dot(p - s.p1, s.p2 - s.p1) / norm(s.p2 - s.p1);\n  return s.p1 + (s.p2 - s.p1) * r;\n}\n\nPoint reflect(Segment s, Point p) {\n  return p + (project(s, p) - p) * 2.0;\n}\n\nbool isOrthogonal(Line l1, Line l2) {\n  return EQ(dot(l1.p1 - l1.p2, l2.p1 - l2.p2), 0.0);\n}\nbool isParallel(Line l1, Line l2) {\n  return EQ(cross(l1.p1 - l1.p2, l2.p1 - l2.p2), 0.0);\n}\n\nbool intersectLP(Line l, Point p) {\n  return EQ(cross(l.p2 - p, l.p1 - p), 0.0);\n}\nbool intersectSP(Segment s, Point p) {\n  return EQ(abs(s.p1 - p) + abs(p - s.p2), abs(s.p2 - s.p1));\n}\n\nconst int COUNTER_CLOCKWISE = +1;\nconst int CLOCKWISE = -1;\nconst int ONLINE_BACK = +2;\nconst int ONLINE_FRONT = -2;\nconst int ON_SEGMENT = 0;\nstring ccw(Point a, Point b, Point c) {\n  Point x = b - a;\n  Point y = c - a;\n  if(cross(x, y) > EPS) return \"COUNTER_CLOCKWISE\";\n  if(cross(x, y) < -EPS) return \"CLOCKWISE\";\n  if(dot(x, y) < -EPS) return \"ONLINE_BACK\";\n  if(norm(x) < norm(y)) return \"ONLINE_FRONT\";\n  return \"ON_SEGMENT\";\n}\n\nint main()\n{\n  int n;\n  \n  Point p0,p1,p2;\n  cin >> p0.X >> p0.Y >> p1.X >> p1.Y;\n  cin >> n;\n  for(int i=0;i<n;i++){\n    cin >> p2.X >> p2.Y;\n    cout << ccw(p0,p1,p2) << endl;\n  }\n  \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "// #include \"pch.h\"\n#include <iostream>\n#include <algorithm>\n#include <map>\n#include <set>\n#include <queue>\n#include <bitset>\n#include <climits>\n#include <string>\n#include <cmath>\n#include <bitset>\n#include <complex>\n#include <functional>\n#include <ctime>\n#include <cassert>\n#include <fstream>\n#include<unordered_map>\n#include <stack>\n#include <random>\n\ntypedef long long ll;\ntypedef std::pair<int, int> Pii;\ntypedef std::pair<long long, long long> Pll;\ntypedef std::pair<double, double> Pdd;\n\n#define rip(i, n, s) for (int i = (s);i < (int)( n ); i++)\n#define mapa make_pair\n#define all(a) a.begin(), a.end()\n#define MM << \" \" <<\n\ntemplate<typename T>\nusing MaxHeap = std::priority_queue<T>;\ntemplate<typename T>\nusing MinHeap = std::priority_queue<T, std::vector<T>, std::greater<T>>;\n\ntemplate<typename T>\ninline bool chmax(T &a, T b) {\n    if (a < b) {\n        a = b;\n        return true;\n    }\n    return false;\n}\ntemplate<typename T>\ninline bool chmin(T &a, T b) {\n    if (a > b) {\n        a = b;\n        return true;\n    }\n    return false;\n}\n\ntemplate<typename T>\nvoid vdeb(std::vector<T> &da) {\n    for (int i = 0;i < da.size();i++) {\n        if (i == da.size() - 1) std::cout << da[i];\n        else std::cout << da[i] << ' ';\n    }\n    std::cout << std::endl;\n}\ntemplate<typename T>\nvoid vdeb(std::vector<std::vector<T>> &da) {\n    for (int i = 0;i < da.size();i++) vdeb(da[i]);\n    std::cout << std::endl;\n}\n\nclass Line{\n    public:\n    std::complex<double> basepoint;\n    std::complex<double> direct;\n    Line(){}\n    Line(const std::complex<double> &_basepoint, const std::complex<double> &_direct):basepoint(_basepoint){\n        assert(abs(_direct) != 0);\n        direct = _direct/abs(_direct);\n    }\n    std::complex<double> basesTrans(const std::complex<double> &p) const { return (p-basepoint)/direct;}\n    bool parallel(const std::complex<double> l) const { return basesTrans(l).imag() == 0;}\n    bool online(const std::complex<double> &p) const { return parallel(p - basepoint);}\n};\n\nclass LineSeg: public Line{ //Line Segment\n    public:\n    std::complex<double> endpoint;\n    LineSeg(){}\n    LineSeg(const std::complex<double> &_basepoint, const std::complex<double> &_endpoint)\n    :Line(_basepoint, _endpoint - _basepoint), endpoint(_endpoint){\n        direct = endpoint - basepoint;\n    }\n    LineSeg(const Line &l, std::complex<double> &p):Line(l) {\n        assert(l.online(p));\n        endpoint = p;\n        direct = endpoint - basepoint;\n    }\n};\n\nint main(){\n    double x1, y1, x2, y2; std::cin >> x1 >> y1 >> x2 >> y2;\n    std::complex<double> p0(x1, y1), p1(x2, y2);\n    LineSeg ls(p0, p1);\n    int q; std::cin >> q;\n    std::vector<std::string> ans(q);\n    rip(i,q,0){\n        double x,y; std::cin >> x >> y;\n        std::complex<double> p(x,y);\n        std::complex<double> tr = ls.basesTrans(p);\n        // std::cout << tr << std::endl;\n        if(tr.imag() > 10e-10) ans[i] = \"COUNTER_CLOCKWISE\";\n        else if(tr.imag() < -10e-10) ans[i] = \"CLOCKWISE\";\n        else if(tr.real() < 0) ans[i] = \"ONLINE_BACK\";\n        else if(tr.real() > 1) ans[i] = \"ONLINE_FRONT\";\n        else ans[i] = \"ON_SEGMENT\";\n    }\n    rip(i,q,0){\n        std::cout << ans[i] << std::endl;\n    }\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#define _CRT_SECURE_NO_WARNINGS\n#include <bits/stdc++.h>\nusing namespace std;\n//using ll=long long;\nconst double EPS = 1e-10;\ninline bool equals(double a, double b) { return fabs(a - b) < EPS; }\nconst double PI = 3.141592653589793238;\nclass Point {\npublic:\n\tdouble x, y;\n\tPoint(double x, double y) :x(x), y(y) {}\n\tPoint() {}\n\tPoint operator +(const Point &p) const{ return Point(x + p.x, y + p.y); };\n\tPoint operator -(const Point &p) const{ return Point(x - p.x, y - p.y); }\n\tPoint operator *(double k) { return Point(x*k, y*k); }\n\tPoint operator /(double k) { return Point(x / k, y / k); }\n};\n\nusing Vector = Point;\ninline double norm(Vector a) {\n\treturn a.x*a.x + a.y*a.y;\n}\ndouble absv(Vector a) {\n\treturn sqrt(norm(a));\n}\ninline double dot(Vector a, Vector b) {\n\treturn a.x*b.x + a.y*b.y;\n}\ninline double cross(Vector a, Vector b) {\n\treturn a.x*b.y - a.y*b.x;\n}\nstruct Segment {\n\tPoint p1, p2;\n};\n\nusing Line = Segment;\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0) :c(c), r(r) {}\n};\nusing Polygon = vector<Point>; \nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / norm(base);\n\treturn s.p1 + base*r;\n}\nPoint reflect(Segment s, Point p) {\n\treturn p + (project(s, p) - p)*2.0;\n}\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS) return CLOCKWISE;\n\tif (dot(a, b) < -EPS) return ONLINE_BACK;\n\tif (norm(a) < norm(b)) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\nint main() {\n\tint x[2], y[2];\n\tint q, a, b;\n\tcin >> x[0] >> y[0] >> x[1] >> y[1] >> q;\n\tPoint p0 = Point(x[0], y[0]);\n\tPoint p1 = Point(x[1], y[1]);\n\tfor (int i = 0; i < q; i++) {\n\t\tcin >> a >> b;\n\t\tPoint p2 = Point(a, b);\n\t\tswitch (ccw(p0, p1, p2)) {\n\t\tcase 1:\n\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t\tbreak;\n\t\tcase -1:\n\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t\tbreak;\n\t\tcase -2:\n\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t}\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#ifdef DEBUG_MODE\n#define DBG(n) n;\n#else\n#define DBG(n) ;\n#endif\n#define REP(i,n) for(ll (i) = (0);(i) < (n);++i)\n#define rep(i,s,g) for(ll (i) = (s);(i) < (g);++i)\n#define rrep(i,s,g) for(ll (i) = (s);i >= (g);--(i))\n#define PB push_back\n#define MP make_pair\n#define FI first\n#define SE second\n#define SHOW1d(v,n) {for(int WWW = 0;WWW < (n);WWW++)cerr << v[WWW] << ' ';cerr << endl << endl;}\n#define SHOW2d(v,i,j) {for(int aaa = 0;aaa < i;aaa++){for(int bbb = 0;bbb < j;bbb++)cerr << v[aaa][bbb] << ' ';cerr << endl;}cerr << endl;}\n#define ALL(v) v.begin(),v.end()\n#define Decimal fixed<<setprecision(20)\n#define INF 1000000000\n#define LLINF 1000000000000000000LL\n#define MOD 1000000007\n\ntypedef long long ll;\ntypedef pair<ll, ll> P;\n\nconst double EPS = 1e-12;\nconst double PI = acos(-1.0);\ntypedef complex<double> point;\nnamespace std {\n\tbool operator < (const point& a, const point& b) {\n\t\treturn real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n\t}\n\t\n\tbool operator == (const point& a,const point& b) {\n\t\treturn (abs(a.real() - b.real()) < EPS && abs(a.imag() - b.imag()) < EPS);\n\t}\n}\nstruct circle {\n\tpoint p; double r;\n\tcircle(){}\n\tcircle(const point &p, double r) : p(p), r(r) { }\n};\nstruct segment : public vector<point> {\n\tsegment(const point &a, const point &b) {\n\t\tpush_back(a); push_back(b);\n\t}\n};\n\ndouble cross(const point& a, const point& b) {\n\treturn imag(conj(a)*b);\n}\n\ndouble dot(const point& a, const point& b) {\n\treturn real(conj(a)*b);\n}\n\n/*\na → b で時計方向に折れて b → c\na → b で半時計方向に折れて b → c\na → b で逆を向いて a を通り越して b → c\na → b でそのまま b → c\na → b で逆を向いて b → c ( または b == c )\n*/\n\nint ccw(point a, point b, point c) {\n\tb -= a; c -= a;\n\tif (cross(b, c) > 0)   return +1;       // counter clockwise\n\tif (cross(b, c) < 0)   return -1;       // clockwise\n\tif (dot(b, c) < 0)     return +2;       // c--a--b on line\n\tif (norm(b) < norm(c)) return -2;       // a--b--c on line\n\treturn 0;\n}\n\nbool intersectLL(const segment &l, const segment &m) {\n\treturn abs(cross(l[1] - l[0], m[1] - m[0])) > EPS || // non-parallel\n\t\tabs(cross(l[1] - l[0], m[0] - l[0])) < EPS;   // same line\n}\nbool intersectLS(const segment &l, const segment &s) {\n\treturn cross(l[1] - l[0], s[0] - l[0])*       // s[0] is left of l\n\t\tcross(l[1] - l[0], s[1] - l[0]) < EPS; // s[1] is right of l\n}\nbool intersectLP(const segment &l, const point &p) {\n\treturn abs(cross(l[1] - p, l[0] - p)) < EPS;\n}\nbool intersectSP(const segment &s, const point &p) {\n\treturn abs(s[0] - p) + abs(s[1] - p) - abs(s[1] - s[0]) < EPS; // triangle inequality\n}\n//端点の交差も考える\nbool intersectSS(const segment &s, const segment &t) {\n\tif(intersectSP(s,t[0]) || intersectSP(s,t[1]) || intersectSP(t,s[0]) || intersectSP(t,s[1]))return true;\n\treturn ccw(s[0], s[1], t[0])*ccw(s[0], s[1], t[1]) <= 0 &&\n\t\tccw(t[0], t[1], s[0])*ccw(t[0], t[1], s[1]) <= 0;\n}\n\npoint projection(const segment &l, const point &p) {\n\tdouble t = dot(p - l[0], l[0] - l[1]) / norm(l[0] - l[1]);\n\treturn l[0] + t*(l[0] - l[1]);\n}\npoint reflection(const segment &l, const point &p) {\n\treturn p + 2. * (projection(l, p) - p);\n}\ndouble distanceLP(const segment &l, const point &p) {\n\treturn abs(p - projection(l, p));\n}\ndouble distanceLL(const segment &l, const segment &m) {\n\treturn intersectLL(l, m) ? 0 : distanceLP(l, m[0]);\n}\ndouble distanceLS(const segment &l, const segment &s) {\n\tif (intersectLS(l, s)) return 0;\n\treturn min(distanceLP(l, s[0]), distanceLP(l, s[1]));\n}\ndouble distanceSP(const segment &s, const point &p) {\n\tconst point r = projection(s, p);\n\tif (intersectSP(s, r)) return abs(r - p);\n\treturn min(abs(s[0] - p), abs(s[1] - p));\n}\ndouble distanceSS(const segment &s, const segment &t) {\n\tif (intersectSS(s, t)) return 0;\n\treturn min(min(distanceSP(s, t[0]), distanceSP(s, t[1])),\n\t\tmin(distanceSP(t, s[0]), distanceSP(t, s[1])));\n}\ndouble distancePP(const point &a,const point &b){\n\treturn abs(a-b);\n}\n\n//交点\npoint crosspoint(const segment &l, const segment &m) {\n\tif(!intersectSS(l,m))return point(INF,INF);\n\tdouble A = cross(l[1] - l[0], m[1] - m[0]);\n\tdouble B = cross(l[1] - l[0], l[1] - m[0]);\n\tif (abs(A) < EPS && abs(B) < EPS) return point(INF,INF); // same line\n\tif (abs(A) < EPS) return point(INF,INF); // !!!PRECONDITION NOT SATISFIED!!!\n\treturn m[0] + B / A * (m[1] - m[0]);\n}\n\n//凸包\nvector<point> convex_hull(vector<point> ps) {\n\tint n = ps.size(), k = 0;\n\tsort(ps.begin(), ps.end());\n\tvector<point> ch(2 * n);\n\tfor (int i = 0; i < n; ch[k++] = ps[i++]) // lower-hull\n\t\twhile (k >= 2 && ccw(ch[k - 2], ch[k - 1], ps[i]) <= 0) --k;\n\tfor (int i = n - 2, t = k + 1; i >= 0; ch[k++] = ps[i--]) // upper-hull\n\t\twhile (k >= t && ccw(ch[k - 2], ch[k - 1], ps[i]) <= 0) --k;\n\tch.resize(k - 1);\n\treturn ch;\n}\n\n/*多角形内包判定\nOUT:0\nON:1\nIN:2\n*/\n#define curr(PP, i) PP[i]\n#define next(PP, i) PP[(i+1)%PP.size()]\nint contains(const vector<point>& Poly, const point& p) {\n\tbool in = false;\n\tfor (int i = 0; i < Poly.size(); ++i) {\n\t\tpoint a = curr(Poly, i) - p, b = next(Poly, i) - p;\n\t\tif (imag(a) > imag(b)) swap(a, b);\n\t\tif (imag(a) <= 0 && 0 < imag(b))\n\t\t\tif (cross(a, b) < 0) in = !in;\n\t\tif (cross(a, b) == 0 && dot(a, b) <= 0) return 1;\n\t}\n\treturn in ? 2 : 0;\n}\n\n//見えるか(可視グラフ用) \nbool block_off(const point &a, const point &b, const vector<point> &obj) {\n  point m = (a+b)/2.0;\n  bool on = false, in = false;\n  for (int j = 0; j < obj.size(); ++j) {\n    point c = curr(obj,j), d = next(obj,j);\n    if (imag(d) < imag(c)) swap(c, d);\n    if (cross(a-c,b-c) * cross(a-d,b-d) < 0 &&    // strictly intersect.\n        cross(c-a,d-a) * cross(c-b,d-b) < 0) return true;\n    if (cross(a-c,b-c) == 0 && dot(a-c,b-c) < 0) return true;\n    if (imag(c) <= imag(m) && imag(m) < imag(d))  // strictly contain.\n      if (cross(c-m,d-m) < 0) in = !in;\n    if (cross(c-m,d-m) == 0 && dot(c-m,d-m) <= 0) on = true;\n  }\n  return !on && in;\n}\n\n//面積\ndouble area(const vector<point>& p) {\n\tdouble A = 0;\n\tfor (int i = 0; i < p.size(); ++i)\n\t\tA += cross(curr(p, i), next(p, i));\n\treturn A / 2.;\n}\n\n//角度足し算\ndouble add_rad(double a,double b){\n\tdouble ret = a + b;\n\tif(ret > PI)ret -= 2 * PI;\n\treturn ret;\n}\n\n//なす角(vector)\ndouble angle(const point &a,const point &b) {\n\tauto tmp = abs(arg(a) - arg(b));\n\treturn min(tmp, 2 * PI - tmp);\n}\n\ndouble angle(const segment &s1,const segment &s2) {\n\treturn angle(s1[1] - s1[0], s2[1] - s2[0]);\n}\n\n//点の回転\npoint rotate(const point &p, double rad) {\n\tdouble X = p.real() * cos(rad) - p.imag() * sin(rad);\n\tdouble Y = p.imag() * cos(rad) + p.real() * sin(rad);\n\treturn point(X, Y);\n}\n\n//並行\nbool isParallel(const point &a, const point &b){\n    return abs(cross(a,b)) < EPS;\n}\nbool isParallel(const segment &a, const segment &b){\n    return isParallel(a[1]-a[0], b[1]-b[0]);\n}\n\nint main() {\n\tdouble a,b,c,d;cin >> a >> b >> c >> d;\n\tpoint x = point(a,b),y = point(c,d);\n\tint q;cin >> q;\n\tREP(i,q){\n\t\tcin >> a >> b;\n\t\tpoint tmp = point(a,b);\n\t\tint ret = ccw(x,y,tmp);\n\t\tif(ret == 0){\n\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t}\n\t\telse if(ret == 1){\n\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t}\n\t\telse if(ret == -1){\n\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\t}\n\t\telse if(ret == 2){\n\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t}\n\t\telse{\n\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t}\n\t}\n\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\ntemplate<class T> \ninline void read(T& x)\n{\n\tchar c = getchar(); T p = 1, n = 0;\n\twhile(c < '0' || c > '9'){if(c == '-') p = -1; c = getchar();}\n\twhile(c >= '0' && c <= '9'){n = n * 10 + c - '0'; c = getchar();}\n\tx = p * n;\n}\ntemplate<class T, class U>\ninline void read(T& x, U& y){read(x), read(y);}\ntemplate<class T, class U, class V>\ninline void read(T& x, U& y, V& z){read(x), read(y), read(z);}\nstruct Point\n{\n\tdouble x, y;\n\tPoint(int a, int b){x = a, y = b;}\n\tPoint(double a = .0, double b = .0){x = a, y = b;}\n\tPoint operator+(const Point& r){return Point(x + r.x, y + r.y);}\n\tPoint operator-(const Point& r){return Point(x - r.x, y - r.y);}\n\tPoint operator*(double r){return Point(x * r, y * r);}\n\tdouble operator*(const Point& r){return x * r.y - y * r.x;}\n};\ntypedef Point Vector;\ndouble dot(Vector l, Vector r){return l.x * r.x + l.y * r.y;}\ndouble norm(Vector l){return dot(l, l);}\nchar* ccw(Point x, Point y, Point z)\n{\n\tdouble cross = (y - x) * (z - x);\n\tif(cross > 0) return \"COUNTER_CLOCKWISE\";\n\tif(cross < 0) return \"CLOCKWISE\";\n\tif(dot(y - x, z - x) < 0) return \"ONLINE_BACK\";\n\tif(norm(y - x) < norm(z - x)) return \"ONLINE_FRONT\";\n\treturn \"ON_SEGMENT\";\n}\nint main()\n{\n\tint x0, y0, x1, y1, x, y; read(x0, y0), read(x1, y1);\n\tint q; read(q);\n\twhile(q--)\n\t{\n\t\tread(x, y);\n\t\tputs(ccw(Point(x0, y0), Point(x1, y1), Point(x, y)));\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i, n) for (int i = 0; i < (int)(n); i++)\n#define repr(i, n) for (int i = (int)(n); i >= 0; i--)\n#define REP(i, m, n) for (int i = (int)(m); i <= (int)(n); i++)\n#define REPR(i, m, n) for (int i = (int)(m); i >= (int)(n); i--)\n#define all(v) v.begin(), v.end()\ntemplate<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return 1; } return 0; }\ntemplate<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return 1; } return 0; }\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a)-(b)) < EPS)\n\nstruct Point{\n  double x, y;\n  Point(double x = 0, double y = 0): x(x), y(y) {}\n\n  Point operator + (Point p) { return Point(x+p.x, y+p.y); }\n  Point operator - (Point p) { return Point(x-p.x, y-p.y); }\n  Point operator * (double a) { return Point(x*a, y*a); }\n  Point operator / (double a) { return Point(x/a, y/a); }\n\n  double abs() { return sqrt(norm()); }\n  double norm() { return x*x + y*y; }\n\n  bool operator < (const Point &p) const{\n    return x != p.x ? x < p.x : y < p.y;\n  }\n\n  bool operator == (const Point &p) const{\n    return fabs(x-p.x) < EPS && fabs(y-p.y) < EPS;\n  }\n};\n\ntypedef Point Vector;\n\nstruct Segment{\n  Point p1, p2;\n};\n\ndouble dot(Vector a, Vector b){\n  return a.x*b.x + a.y*b.y;\n}\n\ndouble cross(Vector a, Vector b){\n  return a.x*b.y - a.y*b.x;\n}\n\nPoint project(Segment s, Point p){\n  Vector a = s.p2 - s.p1;\n  Vector b = p - s.p1;\n  return s.p1 + a * (dot(a, b)/a.norm());\n}\n\nPoint reflect(Segment s, Point p){\n  return p + (project(s, p) - p)*2;\n}\n\nstatic const int Counter_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nint ccw(Point p0, Point p1, Point p2){\n  Vector a = p1 - p0;\n  Vector b = p2 - p0;\n  if(cross(a, b) > EPS) return Counter_CLOCKWISE;\n  else if(cross(a, b) < -EPS) return CLOCKWISE;\n  else if(dot(a, b) < -EPS) return ONLINE_BACK;\n  else if(a.norm() < b.norm()) return ONLINE_FRONT;\n  else return ON_SEGMENT;\n}\n\nint main(){\n  double x0, y0, x1, y1;\n  cin >> x0 >> y0 >> x1 >> y1;\n  Point p0 = Point(x0, y0);\n  Point p1 = Point(x1, y1);\n\n  int q; cin >> q;\n  rep(i, q){\n    int x2, y2; cin >> x2 >> y2;\n    Point p2 = Point(x2, y2);\n    int ans = ccw(p0, p1, p2);\n    if(ans == 1) cout << \"COUNTER_CLOCKWISE\" << endl;\n    if(ans == -1) cout << \"CLOCKWISE\" << endl;\n    if(ans == 2) cout << \"ONLINE_BACK\" << endl;\n    if(ans == -2) cout << \"ONLINE_FRONT\" << endl;\n    if(ans == 0) cout << \"ON_SEGMENT\" << endl;\n  }\n\n  return 0;\n\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <math.h>\n#include <iostream>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs(a - b) < EPS)\n\nclass Point{\npublic:\n    double x, y;\n\n    Point(double x_ = 0, double y_ = 0){\n        x = x_;\n        y = y_;\n    }\n\n    Point operator+ (Point p){\n        return Point(x + p.x, y + p.y);\n    };\n\n    Point operator- (Point p){\n        return Point(x - p.x, y - p.y);\n    };\n\n    Point operator* (double k){\n        return Point(x * k, y * k);\n    }\n\n    Point operator/ (double k){\n        return Point(x / k, y / k);\n    }\n\n    double norm(){\n        return x * x + y * y;\n    }\n\n    double abs(){\n        return sqrt(norm());\n    }\n\n    bool operator == (const Point &p) const{\n        return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n    }\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b){\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b){\n    return a.x * b.y - a.y * b.x;\n}\n\nbool isParallel(Vector a, Vector b){\n    return equals(cross(a, b), 0.0);\n}\n\nbool isOrthogonal(Vector a, Vector b){\n    return equals(dot(a, b), 0.0);\n}\n;\ndouble getCos(Vector a, Vector b){\n    return dot(a, b) / (a.abs() * b.abs());\n}\n\ndouble dist(Point p1, Point p2){\n    return sqrt(pow((p1.x - p2.x), 2) + pow((p1.y - p2.y), 2));\n}\n\nPoint projection(Point p1, Point p2, Point p0){\n    if(p1 == p0){\n        return p0;\n    }\n    if(p2 == p0){\n        return p0;\n    }\n    return p1 + (p2 - p1) / (p2 - p1).abs() * (p0 - p1).abs() * getCos(p2 - p1, p0 - p1);\n}\n\nPoint reflection(Point p1, Point p2, Point p0){\n    Point p = projection(p1, p2, p0);\n    return p0 + (p - p0) * 2;\n}\n\ndouble getDistanceSP(Point p1, Point p2, Point p0){\n    if(dot(p2 - p1, p0 - p1) < 0.0) return (p0 - p1).abs();\n    if(dot(p1 - p2, p0 - p2) < 0.0) return (p0 - p2).abs();\n    return (projection(p1, p2, p0) -  p0).abs();\n}\n\nstring counterClockwise(Point p0, Point p1, Point p2){\n    Vector v1 = p1 - p0;\n    Vector v2 = p2 - p0;\n    if(cross(v1, v2) > EPS) return string(\"COUNTER_CLOCKWISE\");\n    if(cross(v1, v2) < -EPS) return string(\"CLOCKWISE\");\n    if(dot(v1, v2) < -EPS) return string(\"ONLINE_BACK\");\n    if(v1.norm() < v2.norm()) return string(\"ONLINE_FRONT\");\n\n    return string(\"ON_SEGMENT\");\n}\n\nbool intersect(Point p0, Point p1, Point p2, Point p3){\n    return true;\n}\n\ndouble getDistance(Point p0, Point p1, Point p2, Point p3){\n    if(intersect(p0, p1, p2, p3)){\n        return 0.0;\n    }\n    return min(min(getDistanceSP(p0, p1, p2), getDistanceSP(p0, p1, p3)),\n                min(getDistanceSP(p2, p3, p0), getDistanceSP(p2, p3, p1)));\n}\n\nint main(){\n    int xp0, yp0, xp1, yp1;\n    scanf(\"%d\", &xp0);\n    scanf(\"%d\", &yp0);\n    scanf(\"%d\", &xp1);\n    scanf(\"%d\", &yp1);\n\n    Point p0 = Point(xp0, yp0);\n    Point p1 = Point(xp1, yp1);\n\n    int q;\n    scanf(\"%d\", &q);\n    for(int i = 0; i < q; i++){\n        int x, y;\n        scanf(\"%d\", &x);\n        scanf(\"%d\", &y);\n\n        cout << counterClockwise(p0, p1, Point(x, y));\n    }\n}\n\n/*\nint main(){\n    int q;\n    scanf(\"%d\", &q);\n\n    for(int i = 0; i < q; i++){\n        int xp0, yp0, xp1, yp1, xp2, yp2, xp3, yp3;\n        scanf(\"%d\", &xp0);\n        scanf(\"%d\", &yp0);\n        scanf(\"%d\", &xp1);\n        scanf(\"%d\", &yp1);\n        scanf(\"%d\", &xp2);\n        scanf(\"%d\", &yp2);\n        scanf(\"%d\", &xp3);\n        scanf(\"%d\", &yp3);\n\n        printf(\"%.10f\\n\", getDistance(Point(xp0, yp0), Point(xp1, yp1), Point(xp2, yp2), Point(xp3, yp3)));\n    }\n\n}\n*/\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <vector>\n#include <string>\n#include <cmath>\nusing namespace std;\n\nstruct Point {\n    long long int x, y;\n};\n\nstring signed_area(int xp2, int yp2, Point p0, Point p1){\n    double area2;\n    area2 = (p0.x - xp2) * (p1.y - yp2) - (p0.y - yp2) * (p1.x - xp2);\n    Point vec1, vec2;\n    vec1.x = (p1.x-p0.x);\n    vec1.y = (p1.y-p0.y);\n    vec2.x = (xp2-p0.x);\n    vec2.y = (yp2-p0.y);\n    double naiseki;\n    naiseki = vec1.x * vec2.x + vec1.y * vec2.y;\n    //cout << \"areea2:\" << area2 << endl;\n    //cout << naiseki << endl;\n    if(area2 > 0){\n        return \"COUNTER_CLOCKWISE\";\n    }\n    else if(area2 < 0){\n        return \"CLOCKWISE\";\n    }\n    else {\n        if(naiseki < 0){\n            return \"ONLINE_BACK\";\n        }\n        else if(naiseki > 0){\n            double leng1, leng2;\n            leng1 = (p1.x-p0.x)*(p1.x-p0.x)+(p1.y-p0.y)*(p1.y-p0.y);\n            leng2 = (xp2-p0.x)*(xp2-p0.x)+(yp2-p0.y)*(yp2-p0.y);\n            if(leng1 < leng2){\n                return \"ONLINE_FRONT\";\n            }\n            else {\n                return \"ON_SEGMENT\";\n            }\n        }\n        else {\n            return \"ON_SEGMENT\";\n        }\n    }\n}\n\n\nint main() {\n    Point p0, p1;\n    cin >> p0.x >> p0.y >> p1.x >> p1.y;\n    int q;\n    cin >> q;\n    vector<string> str;\n    for(int i = 0; i < q; i++){\n        int xp2, yp2;\n        cin >> xp2 >> yp2;\n        //cout << signed_area(xp2, yp2, p0, p1) << endl;\n        str.push_back(signed_area(xp2, yp2, p0, p1));\n    }\n\n    for(int i = 0; i < q; i++){\n        cout << str[i] << endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <complex>\n\nenum INDICES {\n  COUNTER_CLOCKWISE = 0,\n  CLOCKWISE,\n  ONLINE_BACK,\n  ON_SEGMENT,\n  ONLINE_FRONT\n};\n\nconst std::vector<std::string> strLst = {\n  \"COUNTER_CLOCKWISE\",\n  \"CLOCKWISE\",\n  \"ONLINE_BACK\",\n  \"ON_SEGMENT\",\n  \"ONLINE_FRONT\"\n};\n\nconst double tol = 1e-8;\n\nint main() {\n  double x0, y0, x1, y1;\n  std::cin >> x0 >> y0 >> x1 >> y1;\n\n  int q;\n  std::cin >> q;\n\n  for (int i = 0; i < q; ++i) {\n    double x2, y2;\n    std::cin >> x2 >> y2;\n\n    int index;\n    if ((x2 == x0 && y2 == y0) || (x2 == x1 && y2 == y1)) {\n      index = INDICES::ON_SEGMENT;\n    } else {\n      double ip = (x1 - x0) * (x2 - x0) + (y1 - y0) * (y2 - y0);\n      double norm1 = std::sqrt((x1 - x0) * (x1 - x0) + (y1 - y0) * (y1 - y0));\n      double norm2 = std::sqrt((x2 - x0) * (x2 - x0) + (y2 - y0) * (y2 - y0));\n      double theta = ip / norm1 / norm2;\n      if (theta < -1 + tol) {\n        index = INDICES::ONLINE_BACK;\n      } else if (theta > 1 - tol) {\n        index = (norm1 < norm2) ? INDICES::ONLINE_FRONT : INDICES::ON_SEGMENT;\n      } else {\n        double opz = (x1 - x0) * (y2 - y0) - (x2 - x0) * (y1 - y0);\n        index = (opz > 0) ? INDICES::COUNTER_CLOCKWISE : INDICES::CLOCKWISE;\n      }\n    }\n\n    std::cout << strLst[index] << std::endl;\n  }\n\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <cstdlib>\n#include <iostream>\n#include <bitset>\n#include <deque>\n#include <list>\n#include <map>\n#include <set>\n#include <queue>\n#include <stack>\n#include <vector>\n#include <algorithm>\n#include <iterator>\n#include <string>\n#include <chrono>\n#include <random>\n#include <tuple>\n#include <utility>\n#include <fstream>\n#include <complex>\n\nconst long INF = (1l << 30);\nconst long LINF = (1l << 60);\n\ntypedef std::complex<double> Com;\n\n//geometric library\n//#include <complex>\n//typedef complex<double> Com;\n//c++ -std=c++14\n\n//内積\ndouble dot_product(const Com a, const Com b){\n\treturn (conj(a)*b).real();\n}\n//外積\ndouble cross_product(const Com a, const Com b){\n\treturn (conj(a)*b).imag();\n}\n//点と直線の距離\ndouble dist_dot_line(const Com st, const Com en, const Com dt){\n    return std::abs(cross_product(dt-st, en-st) / std::abs(en-st));\n}\n//点と線分の距離\ndouble dist_dot_seg(const Com st, const Com en, const Com dt){\n\tif(dot_product(en-st, dt-st) <= 0){\n\t\treturn std::abs(dt-st);\n\t}else if(dot_product(st-en, dt-en) <= 0){\n\t\treturn std::abs(dt-en);\n\t}else{\n\t\treturn dist_dot_line(st, en, dt);\n\t}\n}\n//線分の交差判定\nbool seg_crossing(const Com st1, const Com en1, const Com st2, const Com en2){\n\tdouble cross1 = cross_product(en1-st1, st2-st1) * cross_product(en1-st1, en2-st1);\n\tdouble cross2 = cross_product(en2-st2, st1-st2) * cross_product(en2-st2, en1-st2);\n\treturn (cross1 <= 0) && (cross2 <= 0);\n}\n//線分と線分の距離\ndouble dist_seg(const Com st1, const Com en1, const Com st2, const Com en2){\n\tif(seg_crossing(st1, en1, st2, en2)){\n\t\treturn 0;\n\t}\n\treturn std::min(std::min(dist_dot_seg(st1, en1, st2), dist_dot_seg(st1, en1, en2)), std::min(dist_dot_seg(st2, en2, st1), dist_dot_seg(st2, en2, en1)));\n}\n\nCom p0, p1;\nlong q;\nCom p2;\n\nint main(){\n    double xp1, yp1, xp2, yp2;\n    scanf(\"%lf%lf%lf%lf\", &xp1, &yp1, &xp2, &yp2);\n    p0 = Com(xp1, yp1);\n    p1 = Com(xp2, yp2);\n    scanf(\"%ld\", &q);\n    for(int i = 0; i < q; i++){\n        double x, y;\n        scanf(\"%lf%lf\", &x, &y);\n        p2 = Com(x, y);\n        Com a = p1 - p0;\n        Com b = p2 - p0;\n        if(cross_product(a, b) > 0){\n            printf(\"COUNTER_CLOCKWISE\\n\");\n        }else if(cross_product(a, b) < 0){\n            printf(\"CLOCKWISE\\n\");\n        }else{\n            if(a == 0.0 || b == 0.0){\n                printf(\"ON_SEGMENT\\n\");\n            }else if(dot_product(a, b) < 0){\n                printf(\"ONLINE_BACK\\n\");\n            }else{\n                if(abs(a) < abs(b)){\n                    printf(\"ONLINE_FRONT\\n\");\n                }else{\n                    printf(\"ON_SEGMENT\\n\");\n                }\n            }\n        }\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "//投影\n#include<bits/stdc++.h>\nusing namespace std;\nconst double PI=acos(-1);\nconst double EPS=1e-6;\n#define equals(a,b) (fabs(a)-fabs(b)<EPS)\nenum{\n\tonline_Front=-2,\n\tclock_Wise=-1,\n\ton_Segment=0,\n\tcounter_clock_Wise=1,\n\tonline_Back=2\n};\nconst int INFTY=1<<29;\nstruct Point{\n\tdouble x,y;\n\tPoint(double x,double y):x(x),y(y){}\n\tPoint(){}\n\tPoint(const Point&a){x=a.x;y=a.y;}\n\tPoint operator+(const Point&a){\n\t\treturn Point(x+a.x,y+a.y);\n\t}\n\tPoint operator-(const Point&a){\n\t\treturn Point(x-a.x,y-a.y);\n\t}\n\tPoint operator*(double k){\n\t\treturn Point(k*x,k*y);\n\t}\n\tPoint operator/(double k){\n\t\treturn Point(x/k,y/k);\n\t}\n\tbool operator==(const Point&a){\n\t\treturn equals(x,a.x)&&equals(y,a.y);\n\t} \n};\ntypedef Point Vector;\nPoint operator*(double k,const Point&a){\n\treturn Point(k*a.x,k*a.y);\n}\ndouble norm(const Point&a){\n\treturn a.x*a.x+a.y*a.y;\n}\ndouble abs(const Point&a){\n\treturn sqrt(norm(a));\n}\ndouble dot_product(const Point&a,const Point&b){\n\treturn a.x*b.x+a.y*b.y;\n}\ndouble cross_product(const Point&a,const Point&b){\n\treturn a.x*b.y-a.y*b.x;\n}\nbool is_Vertical(Vector&a,Vector&b){\n\treturn equals(dot_product(a,b),0.0);\n}\nbool is_Parallel(Vector&a,Vector&b){\n\treturn equals(cross_product(a,b),0.0);\n}\nPoint projection_Point(Point&p1,Point&p2,Point&p){\n\tVector base=p2-p1;\n\tdouble r=dot_product(base,p-p1)/norm(base);\n\treturn p1+base*r;\n}\nPoint reflection_Point(Point&p1,Point&p2,Point&p){\n\tPoint temp=projection_Point(p1,p2,p);\n\treturn 2*temp-p;\n}\nint Counter_Clockwise(Point&p0,Point&p1,Point&p2){\n\tVector a=p1-p0;\n\tVector b=p2-p0;\n\tif(cross_product(a,b)>EPS)return counter_clock_Wise;\n\tif(cross_product(a,b)<-EPS)return clock_Wise;\n\tif(dot_product(a,b)<-EPS)return online_Back;\n\tif(norm(a)<norm(b))return online_Front;\n\treturn on_Segment;\n}\nvoid print(int flag){\n\tswitch(flag){\n\t\tcase -2:cout<<\"ONLINE_FRONT\"<<endl;break;\n\t\tcase -1:cout<<\"CLOCKWISE\"<<endl;break;\n\t\tcase 0:cout<<\"ON_SEGMENT\"<<endl;break;\n\t\tcase 1:cout<<\"COUNTER_CLOCKWISE\"<<endl;break;\n\t\tcase 2:cout<<\"ONLINE_BACK\"<<endl;break;\n\t}\n}\nint main(){\n\tPoint p1,p2;\n\tPoint temp;\n\tscanf(\"%lf%lf%lf%lf\",&p1.x,&p1.y,&p2.x,&p2.y);\n\tint q;\n\tscanf(\"%d\",&q);\n\twhile(q--){\n\t\tscanf(\"%lf%lf\",&temp.x,&temp.y);\n\t\tprint(Counter_Clockwise(p1,p2,temp));\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nclass Point {\n    public:\n    double x, y;\n    \n    Point(double x = 0, double y = 0): x(x), y(y) {}\n\n    Point operator + (Point p) { return Point(x + p.x, y + p.y); }\n    Point operator - (Point p) { return Point(x - p.x, y - p.y); }\n    Point operator * (double a) { return Point(a * x, a * y); }\n    Point operator / (double a) { return Point(x / a, y / a); }\n\n    double abs() {\n        return sqrt(norm());\n    }\n    double norm() {\n        return x * x + y * y;\n    }\n\n    bool operator < (const Point &p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point &p) const {\n        return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n    }\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n    return a.x * b.y - a.y * b.x;\n}\n\nstruct Segment {\n    Point p1, p2;\n};\n\ntypedef Segment Line;\n\nclass Circle {\n    public:\n        Point c;\n        double r;\n        Circle(Point c = Point(), double r = 0.0): c(c), r(r) {}\n};\n\ntypedef vector<Point> Polygon;\n\nbool isParallel(Vector a, Vector b) {\n    return equals(dot(a, b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n    return isParallel(a1 - a2, b1 - b2);\n}\n\nbool isParallel(Segment s1, Segment s2) {\n    return equals(cross((s1.p2 - s1.p1), (s2.p2 - s2.p1)), 0.0);\n}\n\nbool isOrthogonal(Vector a, Vector b) {\n    return equals(cross(a, b), 0.0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n    return isOrthogonal(a1 - a2, b1 - b2);\n}\n\nbool isOrthogonal(Segment s1, Segment s2) {\n    return equals(dot((s1.p2 - s1.p1), (s2.p2 - s2.p1)), 0.0);\n}\n\nPoint project(Segment s, Point p) {\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / base.norm();\n    return s.p1 + base * r;\n}\n\nPoint reflect(Segment s, Point p) {\n    Point projection = project(s, p);\n    Vector toReflection = (projection - p) * 2.0;\n    return p + toReflection; \n}\n\nbool intersect(Segment s1, Segment s2) {\n    return true;\n}\n\ndouble getDistanceLP(Line l, Point p) {\n    return abs(cross(l.p2 - l.p1, p - l.p1)) / (l.p2 - l.p1).abs();\n}\n\ndouble getDistanceSP(Segment s, Point p) {\n    if (dot(s.p2 - s.p1, p - s.p1) < 0) return (p - s.p1).abs();\n    if (dot(s.p1 - s.p2, p) < 0) return (s.p2 - p).abs();\n\n    return getDistanceLP(s, p);\n}\n\ndouble getDistanceSS(Segment s1, Segment s2) {\n    if (intersect(s1, s2)) {\n        return 0.0;\n    }\n\n    return min(\n        min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n        min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2))\n    );\n}\n\ndouble getDistancePP(Point p1, Point p2) {\n    return (p2 - p1).abs();\n}\n\nint ccw(Point p0, Point p1, Point p2) {\n    Vector v1 = p1 - p0;\n    Vector v2 = p2 - p0;\n\n    // 反時計\n    if (cross(v1, v2) > 0.0) return 1;\n    // 時計\n    if (cross(v1, v2) < 0.0) return -1;\n\n    // p1, p2 が逆方向\n    if (dot(v1, v2) < 0.0) return 2;\n\n    // p1, p2 が同方向\n    if (v1.abs() < v2.abs()) return -2;\n    return 0;\n}\n\nint main() {\n    /*\n    cout << fixed << setprecision(11);\n\n    double x1, y1, x2, y2;\n    cin >> x1 >> y1 >> x2 >> y2;\n    Point p1 = {x1, y1};\n    Point p2 = {x2, y2};\n    Segment s1 = {p1, p2};\n\n    double x3, y3, x4, y4;\n    cin >> x3 >> y3 >> x4 >> y4;\n    Point p3 = {x3, y3};\n    Point p4 = {x4, y4};\n    Segment s2 = {p3, p4};\n\n    double dist = distanceBetweenSegments(s1, s2);\n    */\n\n    double x0, y0, x1, y1;\n    cin >> x0 >> y0 >> x1 >> y1;\n    Point p0 = {x0, y0};\n    Point p1 = {x1, y1};\n\n    int q;\n    double x2, y2;\n    cin >> q;\n    for (int i = 0; i < q; i++) {\n        cin >> x2 >> y2;\n        Point p2 = {x2, y2};\n\n        switch(ccw(p0, p1, p2)) {\n            case 1:\n                cout << \"COUNTER_CLOCKWISE\" << endl;\n                break;\n            case -1:\n                cout << \"CLOCKWISE\" << endl;\n                break;\n            case 2:\n                cout << \"ONLINE_BACK\" << endl;\n                break;\n            case -2:\n                cout << \"ONLINE_FRONT\" << endl;\n                break;\n            case 0:\n                cout << \"ON_SEGMENT\" << endl;\n                break;\n\n        }\n    }\n\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nclass vec{\npublic:\n\tdouble x,y;\n\tvec(){\n\t\tx = y = 0.0;\n\t}\n\tvec(double x,double y){\n\t\tthis->x = x;\n\t\tthis->y = y;\n\t}\n\tvec operator+(vec &r) const{\n\t\treturn vec(x+r.x,y+r.y);\n\t}\n\tvec operator-(vec &r) const{\n\t\treturn vec(x-r.x,y-r.y);\n\t}\n\tvoid operator=(vec &r){\n\t\tthis->x = r.x;\n\t\tthis->y = r.y;\n\t}\n\tdouble norm2(){\n\t\treturn x*x+y*y;\t\n\t}\n};\n\ndouble dot(vec v,vec u){\n\treturn v.x*u.x + v.y*u.y;\n}\ndouble closs(vec v,vec u){\n\treturn v.x*u.y - v.y*u.x;\n}\n\n\nint main(){\n\tvec p0,p1,p2;\n\tint q;\n\tcin >> p0.x >> p0.y >> p1.x >> p1.y;\n\tcin >> q;\n\tfor(int i = 0; i < q; i++){\n\t\tcin >> p2.x >> p2.y;\n\t\tvec v = p1 - p0;\n\t\tvec u = p2 - p0;\n\t\tdouble cl = closs(u,v);\n\t\tif(cl < 0){\n\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t}\n\t\telse if (cl > 0){\n\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\t}\n\t\telse if (cl == 0){\n\t\t\tdouble dt = dot(u,v);\n\t\t\tif(dt < 0){\n\t\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t\t}\n\t\t\telse if (u.norm2() > v.norm2()){\n\t\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<cstdlib>\n#include<cmath>\n#include<iostream>\n#include<vector>\n#include<algorithm>\n\nusing namespace std;\n\nint main()\n{\n\tdouble p1x, p1y, p2x, p2y, p0x, p0y;\n\tint q;\n\n\tscanf(\"%lf %lf %lf %lf\", &p0x, &p0y, &p1x, &p1y);\n\n\tpair<double, double> v01 = { p1x - p0x, p1y - p0y };\n\n\n\tscanf(\"%d\", &q);\n\n\tfor (int i = 0; i < q; i++)\n\t{\n\t\tscanf(\"%lf %lf\", &p2x, &p2y);\n\n\t\tif ((p2x == p0x && p2y == p0y) || (p2x == p1x && p2y == p1y)){\n\t\t\tprintf(\"ONLINE_SEGMENT\\n\");\n\n\t\t\tcontinue;\n\t\t}\n\n\t\tpair<double, double> v02 = { p2x - p0x, p2y - p0x };\n\n\t\tif (v01.first*v02.second == v01.second*v02.first)\n\t\t{\n\t\t\tif (v01.first*v02.first < 0)\n\t\t\t{\n\t\t\t\tprintf(\"ONLINE_BACK\\n\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tabs(v01.first) < abs(v02.first) ? printf(\"ONLINE_FRONT\\n\") : printf(\"ONLINE_SEGMENT\\n\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\n\t\tdouble y01 = (v01.second / v01.first)*(p2x - p0x) + p0y;\n\t\ty01 < p2y ? printf(\"COUNTER_CLOCKWISE\\n\") : printf(\"CLOCKWISE\\n\");\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <iostream>\n#include <cstdlib>\n#include <cmath>\n#include <cctype>\n#include <string>\n#include <cstring>\n#include <algorithm>\n#include <stack>\n#include <queue>\n#include <set>\n#include <map>\n#include <ctime>\n#include <vector>\n#include <fstream>\n#include <list>\n#include <iomanip>\n#include <numeric>\nusing namespace std;\n#define ll long long\n#define ull unsigned long long\n#define db double\n#define REP(i, lim) for(int i=0;i<lim;++i)\n#define REPP(i, lim) for(int i=1;i<=lim;++i)\n#define DEC(i, lim) for(int i=lim;i>=1;--i)\n#define FOR(i,l,r)  for(int i=l;i<r;++i)\n#define deBug cout<<\"===================================\"<<endl;\n#define clr(s) memset(s, 0, sizeof(s))\n#define lowclr(s) memset(s, -1, sizeof(s))\nconst int MAXN = 1000055;\nconst int inf = 0x3f3f3f3f;\nconst double pi = acos(-1.0);\nconst db eps = 1e-9;\n\ninline int sgn(db x) { return x<-eps ? -1 : x>eps; }\ninline db sqr(db x) { return x*x; }\n\n#define cross(p1, p2, p3) ((p2.x-p1.x)*(p3.y-p1.y)-(p3.x-p1.x)*(p2.y-p1.y))\n#define crossOp(p1, p2, p3) sgn(cross(p1, p2, p3))\n\nstruct P {\n    // information\n    P() {}\n    P(db _x, db _y) : x(_x), y(_y) {}\n    db x, y;\n\n    // operation\n    P operator + (P p)   const{ return P(x+p.x, y+p.y); }\n    P operator - (P p)   const{ return P(x-p.x, y-p.y); }\n    P operator * (db d)  const{ return P(x*d, y*d); }\n    P operator / (db d)  const{ return P(x/d, y/d); }\n\n    db dot(P p) { return x * p.x + y * p.y; } // 点积\n    db det(P p) { return x * p.y - y + p.x; } // 叉积\n\n    // other\n    void input() { scanf(\"%lf%lf\", &x, &y); }\n    void print() { printf(\"(%lf, %lf)\\n\", x, y); }\n\n    db dis(P p) { return sqrt(sqr(x-p.x) + sqr(y-p.y)); }\n    db dis2(P p) { return sqr(dis(p)); }\n};\n\nP getProjection(P a, P b, P p) {\n    // (p1, q) 在 (p1, q2) 上的投影点\n    P dir = b-a;\n    return a + dir * ( dir.dot(p-a) / a.dis2(b) );\n}\n\nP getReflection(P a, P b, P p) {\n    return getProjection(a, b, p) * 2 - p;\n}\n\nint main()\n{\n//    freopen(\"in.txt\", \"r\", stdin);\n//    freopen(\"out.txt\", \"w\", stdout);\n//    std::ios::sync_with_stdio(false); cin.tie(0);\n\n    P a, b;\n    a.input(); b.input();\n    int Q;\n    scanf(\"%d\", &Q);\n    while(Q--)\n    {\n        P p;\n        p.input();\n        if(cross(a, b, p) > 0)          printf(\"COUNTER_CLOCKWISE\\n\");\n        else if(cross(a, b, p) < 0 )    printf(\"CLOCKWISE\\n\");\n        else{\n            db dir = (b-a).dot(p-a);\n            if(sgn(dir)<0)              printf(\"ONLINE_BACK\\n\");\n            else {\n                db dis1 = a.dis(b), dis2 = a.dis(p);\n                if(sgn(dis2-dis1) > 0)  printf(\"ONLINE_FRONT\\n\");\n                else                    printf(\"ON_SEGMENT\\n\");\n            }\n        }\n    }\n\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <complex>\n#include <vector>\nusing namespace std;\nconst double eps = 1e-10;\n#define EQ(a, b) (abs((a) - (b)) < eps)\nusing P = complex<double>;      // position\nstruct L : vector<P> {\n    L(const P &a = P(), const P &b = P()) {\n        emplace_back(a); emplace_back(b);\n    }\n};\ndouble dot(const P &a, const P &b) { return real(conj(a) * b); }\ndouble cross(const P &a, const P &b) { return imag(conj(a) * b); }\n\nenum CCW_RESULT { CCW = +1, CW = -1, BEHIND = +2, FRONT = -2, ON = 0 };\nint ccw(P a, P b, P c) {\n    b -= a; c -= a;\n    if (cross(b, c) > eps) return CCW;      // counter clockwise\n    if (cross(b, c) < -eps) return CW;      // clockwise\n    if (dot(b, c) < 0) return BEHIND;       // c--a--b on line\n    if (norm(b) < norm(c)) return FRONT;    // a--b--c on line | a=b\n    return ON;                              // on segment | a=c | b=c\n}\n\n#include <iostream>\n#include <iomanip>\nenum {\n    COUNTER_CLOCKWISE = 1, CLOCKWISE = -1,\n    ONLINE_BACK = 2, ONLINE_FRONT = -2, ON_SEGMENT = 0\n};\nint main() {\n    cout << fixed << setprecision(10);\n    int a, b, c, d; cin >> a >> b >> c >> d;\n    P p1(a, b), p2(c, d);\n    int q; cin >> q;\n    while (q--) {\n        int x, y; cin >> x >> y;\n        int res = ccw(p1, p2, P(x, y));\n        if (res == COUNTER_CLOCKWISE) cout << \"COUNTER_CLOCKWISE\" << endl;\n        if (res == CLOCKWISE) cout << \"CLOCKWISE\" << endl;\n        if (res == ONLINE_BACK) cout << \"ONLINE_BACK\" << endl;\n        if (res == ONLINE_FRONT) cout << \"ONLINE_FRONT\" << endl;\n        if (res == ON_SEGMENT) cout << \"ON_SEGMENT\" << endl;\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include <cstdlib>\n#include <stack>\n#include <queue>\n#include <list>\n#include <vector>\n#include <sstream>\n\nusing namespace std;\n\nclass c_main\n{\nprivate:\n    \npublic:\n    c_main();\n    void f_input();\n};\n\nc_main::c_main()\n{\n\n}\n\nvoid c_main::f_input()\n{\n    double xp1,yp1,xp2,yp2;\n    int q;\n    int i;\n    double x[1000];\n    double y[1000];\n    double a;\n    double b;\n    double x_a;\n    double y_a;\n    double a_a;\n    double b_a;\n    int pt1;\n\n    cin >> xp1 >> yp1 >> xp2 >> yp2;\n    \n    if (xp1 == xp2){\n        x_a = xp1;\n        y_a = 0;\n        pt1 = 0;\n    }else if (yp1 == yp2){\n        x_a = 0;\n        y_a = yp1; \n        pt1 = 1;\n    }else{\n        \n        a_a = (yp2-yp1)/(xp2-xp1);\n      \n        a = -1 * (1/a_a);\n       \n        b_a = -1 * a_a * xp1+ yp1;\n        pt1 = 2;\n    }\n    \n    cin >> q;\n    \n    for ( i = 0; i < q; ++i){\n        cin >> x[i] >> y[i];\n        if (pt1 == 0){\n            if(yp1 >= yp2){\n                if(x[i] == x_a){\n                    if(y[i] > yp1){\n                        cout << \"ONLINE__BACK\" << endl;\n                    }else if(y[i] < yp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(yp2 <= y[i] && y[i] <= yp1){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(x[i] < x_a){\n                    cout << \"CLOCKWISE\" << endl;\n                    \n                }else if(x[i] > x_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n     \n                }\n            }else{\n                if(x[i] == x_a){\n                    if(y[i] < yp1){\n                        cout << \"ONLINE_BACK\" << endl;\n                    }else if(y[i] > yp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(yp1 <= y[i] && y[i] <= yp2){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(x[i] < x_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n                    \n                }else if(x[i] > x_a){\n                    cout << \"CLOCKWISE\" << endl;\n                }\n            }\n            //printf(\"%10.10f %10.10f\\n\", x_a,y[i]);\n            \n        }else if(pt1 == 1){\n            if(xp1 >= xp2){\n                if(y[i] == y_a){\n                    if(x[i] > xp1){\n                        cout << \"ONLINE_BACK\" << endl;\n                    }else if(x[i] < xp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(xp2 <= x[i] && x[i] <= xp1){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(y[i] < y_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n                }else if(y[i] > y_a){\n                    cout << \"CLOCKWISE\" << endl;\n                }\n            }else{\n                if(y[i] == y_a){\n                    if(x[i] < xp1){\n                        cout << \"ONLINE_BACK\" << endl;\n                    }else if(x[i] > xp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(xp1 <= x[i] && x[i] <= xp2){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(y[i] < y_a){\n                    cout << \"CLOCKWISE\" << endl;\n                }else if(y[i] > y_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n                }\n            }\n            //printf(\"%10.10f %10.10f\\n\", x[i],y_a);\n        }else if(pt1 == 2){\n            b = -1 * a * x[i] + y[i];\n            x_a = (b - b_a)/(a_a - a);\n            y_a = a_a * x_a + b_a;\n            if(xp1 >= xp2){\n                if(y[i] == y_a){\n                    if(x[i] > xp1){\n                        cout << \"ONLINE_BACK\" << endl;\n                    }else if(x[i] < xp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(xp2 <= x[i] && x[i] <= xp1){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(y[i] < y_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n                }else if(y[i] > y_a){\n                    \n                    cout << \"CLOCKWISE\" << endl;\n                }\n            }else{\n                if(y[i] == y_a){\n                    if(x[i] < xp1){\n                        cout << \"ONLINE_BACK\" << endl;\n                    }else if(x[i] > xp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(xp1 <= x[i] && x[i] <= xp2){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(y[i] < y_a){\n                    cout << \"CLOCKWISE\" << endl;\n                }else if(y[i] > y_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n                }\n            }\n            //printf(\"%10.10f %10.10f\\n\", x_a,y_a);\n        }\n    }\n}\n\nint main(){\n    c_main main01;\n    main01.f_input();\n    \n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <algorithm>\n#include <vector>\n#include <string>\n#include <map>\n#include <set>\n#include <cassert>\nusing namespace std;\n#define rep(i,a,n) for (int i=a;i<n;i++)\n#define per(i,a,n) for (int i=n-1;i>=a;i--)\n#define pb push_back\n#define mp make_pair\n#define all(x) (x).begin(),(x).end()\n#define fi first\n#define se second\n#define SZ(x) ((int)(x).size())\ntypedef vector<int> VI;\ntypedef long long ll;\ntypedef pair<int,int> PII;\nconst ll mod=1000000007;\nll powmod(ll a,ll b) {ll res=1;a%=mod; assert(b>=0); for(;b;b>>=1){if(b&1)res=res*a%mod;a=a*a%mod;}return res;}\n// head\n\ntypedef double db;\ndb eps=1e-9;\nstruct point {\n\tdb x,y;\n\tpoint() {}\n\tpoint(db x,db y):x(x),y(y) {}\n\tvoid input() { scanf(\"%lf%lf\",&x,&y); }\n\tvoid output() { printf(\"%.10f %.10f\\n\",x,y); }\n\tdb len() { return sqrt(x*x+y*y); }\n\tdb len2() { return x*x+y*y; }\n};\npoint operator + (const point &a,const point &b) { return point(a.x+b.x,a.y+b.y);}\npoint operator - (const point &a,const point &b) { return point(a.x-b.x,a.y-b.y);}\npoint operator * (const point &a,const db &b) { return point(a.x*b,a.y*b);}\npoint operator / (const point &a,const db &b) { return point(a.x/b,a.y/b);}\ndb dot(const point &a,const point &b) { return a.x*b.x+a.y*b.y; }\ndb det(const point &a,const point &b) { return a.x*b.y-a.y*b.x; }\nstruct line {\n\tpoint a,b;\n\tline() {}\n\tline(point a,point b):a(a),b(b) {}\n};\npoint proj(const line &a,const point &b) {\n\treturn a.a+(a.b-a.a)*dot(a.b-a.a,b-a.a)/(a.b-a.a).len2();\n}\npoint reflect(const line &a,const point &b) {\n\treturn proj(a,b)*2-b;\n}\nint dblcmp(db x) {\n\treturn fabs(x)<eps?0:(x>0?1:-1);\n}\nint relation(const line &a,const point &b) {\n\tint x=dblcmp(det(a.b-a.a,b-a.a));\n\tif (x==1) return 0; // COUNTER_CLOCKWISE\n\telse if (x==-1) return 1; // CLOCKWISE\n\telse {\n\t\tx=dblcmp(dot(b-a.a,a.b-a.a));\n\t\tif (x<-eps) return 2; // ONLINE_BACK\n\t\telse {\n\t\t\tx=dblcmp(dot(b-a.b,a.b-a.a));\n\t\t\tif (x>eps) return 3; // ONLINE_FRONT\n\t\t\telse return 4; // ON_SEGMENT\n\t\t}\n\t}\n}\n\nint q;\nint main() {\n\tpoint a,b;\n\ta.input(); b.input();\n\tline p(a,b);\n\tscanf(\"%d\",&q);\n\trep(i,0,q) {\n\t\ta.input();\n\t\tint x=relation(p,a);\n\t\tif (x==0) puts(\"COUNTER_CLOCKWISE\");\n\t\telse if (x==1) puts(\"CLOCKWISE\");\n\t\telse if (x==2) puts(\"ONLINE_BACK\");\n\t\telse if (x==3) puts(\"ONLINE_FRONT\");\n\t\telse puts(\"ON_SEGMENT\");\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n/*******************??????********************/\nconst double EPS = 1e-8;\nconst double INF = 1e12;\ntypedef complex<double> P;\nnamespace std {\n\tbool operator < (const P& a, const P& b) {\n\t\treturn real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n\t}\n}\ndouble cross(const P& a, const P& b) {//??????\n\treturn imag(conj(a)*b);\n}\ndouble dot(const P& a, const P& b) {//??????\n\treturn real(conj(a)*b);\n}\n\nstruct L : public vector<P> {//??????\n\tL(const P &a, const P &b) {\n\t\tpush_back(a); push_back(b);\n\t}\n};\n\ntypedef vector<P> G;\nstruct C {//???\n\tP p; double r;\n\tC(const P &p, double r) : p(p), r(r) { }\n};\n\nint ccw(P a, P b, P c) {//??????????????????\n\tb -= a; c -= a;\n  if (cross(b, c) > 0)   return +1;       // counter clockwise\n  if (cross(b, c) < 0)   return -1;       // clockwise\n  if (dot(b, c) < 0)     return +2;       // c--a--b on line\n  if (norm(b) < norm(c)) return -2;       // a--b--c on line\n  return 0;\n}\n\nbool intersectLL(const L& l,const L& m){\n\t//non-parallel || sameline\n\treturn abs(cross(l[1]-l[0],m[1]-m[0])) > EPS || abs(cross(l[1]-l[0],m[0]-l[0])) < EPS;\n}\nbool intersectLS(const L& l,const L& s){\n\t// s[0] is left of l,s[1] is right of l\n\treturn cross(l[1]-l[0],s[0]-l[0]) * cross(l[1]-l[0],s[1]-l[0]) < EPS;\n}\nbool intersectLP(const L& l,const P& p){\n\treturn abs(cross(l[1]-p,l[0]-p)) < EPS;\n}\nbool intersectSP(const L& s,const P& p){\n\treturn abs(s[0]-p)+abs(s[1]-p) - abs(s[1]-s[0]) < EPS;// triangle inequality\n}\n\nP projection(const L& l,const P& p){\n\tdouble t = dot(p-l[0],l[0]-l[1]) / norm(l[0]-l[1]);\n\treturn l[0] + t*(l[0]-l[1]);\n}\nP reflection(const L& l,const P& p){\n\treturn p + 2. * (projection(l,p) - p);\n}\ndouble distanceLP(const L& l,const P& p){\n\treturn abs(p - projection(l,p));\n}\ndouble distanceLL(const L& l,const L& m){\n\treturn intersectLL(l,m) ? 0 : distanceLP(l,m[0]);\n}\ndouble distanceLS(const L& l,const L& s){\n\tif(intersectLS(l,s)) return 0;\n\treturn min(distanceLP(l, s[0]),distanceLP(l, s[1]));\n}\n\nint main(void){\n\tint x1,y1,x2,y2;\n\tcin >> x1 >> y1 >> x2 >> y2;\n\tP p0(x1,y1),p1(x2,y2);\n\n\tint q;\n\tcin >> q;\n\tfor(int i=0;i<q;i++){\n\t\tint x,y;cin >> x >> y;\n\t\tP p2(x,y);\n\t\tL l(p0,p1);\n\t\tint cw = ccw(p2,p0,p1);\n\t\tif(cw == 1)cout << \"COUNTER_CLOCKWISE\" << endl;\n\t\telse if(cw == -1)cout << \"CLOCKWISE\" << endl;\n\t\telse if(intersectSP(l,p2))cout << \"ON_SEGMENT\" << endl;\n\t\telse if(cw == -2)cout << \"ONLINE_BACK\" << endl;\n\t\telse cout << \"ONLINE_FRONT\" << endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\n#define _overload(_1,_2,_3,name,...) name\n#define _rep(i,n) _range(i,0,n)\n#define _range(i,a,b) for(int i=int(a);i<int(b);++i)\n#define rep(...) _overload(__VA_ARGS__,_range,_rep,)(__VA_ARGS__)\n\n#define _rrep(i,n) _rrange(i,n,0)\n#define _rrange(i,a,b) for(int i=int(a)-1;i>=int(b);--i)\n#define rrep(...) _overload(__VA_ARGS__,_rrange,_rrep,)(__VA_ARGS__)\n\n#define _all(arg) begin(arg),end(arg)\n#define uniq(arg) sort(_all(arg)),(arg).erase(unique(_all(arg)),end(arg))\n#define getidx(ary,key) lower_bound(_all(ary),key)-begin(ary)\n#define clr(a,b) memset((a),(b),sizeof(a))\n#define bit(n) (1LL<<(n))\n#define popcount(n) (__builtin_popcountll(n))\n\nusing namespace std;\n\ntemplate<class T>bool chmax(T &a, const T &b) { return (a<b)?(a=b,1):0;}\ntemplate<class T>bool chmin(T &a, const T &b) { return (b<a)?(a=b,1):0;}\n\nusing ll=long long;\nusing R=long double;\nconst R EPS=1e-9L; // [-1000,1000]->EPS=1e-8 [-10000,10000]->EPS=1e-7\ninline int sgn(const R& r){return(r > EPS)-(r < -EPS);}\ninline R sq(R x){return sqrt(max(x,0.0L));}\n\nconst int dx[8]={1,0,-1,0,1,-1,-1,1};\nconst int dy[8]={0,1,0,-1,1,1,-1,-1};\n\n// Problem Specific Parameter:\n\n// Description: ????????????\n// Verifyed: various problem \nconst R INF = 1E40L;\nconst R PI = acos(-1.0L);\nusing P=complex<R>;\nconst P O=0.0L;\nusing L=struct{P s,t;};\nusing VP=vector<P>;\nusing C=struct{P p;R c;};\n\ninline R dot(P o,P a,P b){return real(conj(a-o)*(b-o));}\ninline R det(P o,P a,P b){return imag(conj(a-o)*(b-o));}\ninline int sdot(P o,P a,P b){return sgn(dot(o,a,b));}\ninline int sdet(P o,P a,P b){return sgn(det(o,a,b));}\n\n//projection verify AOJ CGL_1_A\nP proj(L l,P p){ R u=real((p-l.s)/(l.t-l.s)); return (1-u)*l.s+u*l.t;}\n\n//reflection verify AOJ CGL_1_B\nP refl(L l,P p){return 2.0L*proj(l,p)-p;}\n\n// CCW verify AOJ CGL_1_C\nenum CCW{ LEFT = 1,RIGHT = 2,BACK = 4,FRONT = 8,ON = 16};\ninline int ccw(P o,P a, P b) {\n\ta-=o,b-=o,o-=o;\n\tif(sdet(o,a,b) > 0) return LEFT;    // counter clockwise\n\tif(sdet(o,a,b) < 0) return RIGHT;   // clockwise\n\tif(sdot(o,a,b) < 0) return BACK;    // b--base--a on line\n\tif(sgn(norm(a)-norm(b)) < 0) return FRONT;   // base--a--b on line\n\treturn ON; // base--b--a on line  semnet determination betwenn a and b \n}\n\nistream& operator >> (istream& is,P& p){ R x,y;is >> x >> y; p=P(x,y); return is;}\nostream& operator << (ostream& os,P& p){ os << real(p) << \" \" << imag(p); return os;}\n\nint main(void){\n\tP a,b,p;\n\tint n;\n\tcin >> a >> b >> n;\n\trep(i,n){\n\t\tcin >> p;\n\t\tint res=ccw(a,b,p);\n\t\tif(res==LEFT) cout << \"COUNTER_CLOCKWISE\" << endl;\n\t\tif(res==RIGHT) cout << \"CLOCKWISE\" << endl;\n\t\tif(res==BACK) cout << \"ONLINE_BACK\" << endl;\n\t\tif(res==FRONT) cout << \"ONLINE_FRONT\" << endl;\n\t\tif(res==ON) cout << \"ON_SEGMENT\" << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n#define all(x) (x).begin(),(x).end()\nconst int mod=998244353,MAX=105,INF=1<<30;\n\nconst double eps=1e-10;\nconst long double pi=acos((long double)-1.0L);\n#define equals(a,b) (fabs((a)-(b))<eps)\n\nclass Point{\npublic:\n    double x,y;\n    \n    Point(double x=0,double y=0):x(x),y(y){}\n    \n    Point operator + (Point p){return Point(x+p.x,y+p.y);}\n    Point operator - (Point p){return Point(x-p.x,y-p.y);}\n    Point operator * (double a){return Point(a*x,a*y);}\n    Point operator / (double a){return Point(x/a,y/a);}\n    \n    double abs(){return sqrt(norm());}\n    double norm(){return x*x+y*y;}\n    \n    bool operator < (const Point &p)const{\n        return x!=p.x ? x<p.x : y<p.y;\n    }\n    \n    bool operator == (const Point &p)const{\n        return fabs(x-p.x)<eps&&fabs(y-p.y)<eps;\n    }\n};\n\ntypedef Point Vector;\n\ndouble norm(Vector a){\n    return a.x*a.x+a.y*a.y;\n}\n\ndouble abs(Vector a){\n    return sqrt(norm(a));\n}\n\ndouble dot(Vector a,Vector b){\n    return a.x*b.x+a.y*b.y;\n}\n\ndouble cross(Vector a,Vector b){\n    return a.x*b.y-a.y*b.x;\n}\n\nstruct Segment{\n    Point p1,p2;\n};\n\nbool isOrthogonal(Vector a,Vector b){\n    return equals(dot(a,b),0.0);\n}\n\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n    return isOrthogonal(a1-a2,b1-b2);\n}\n\nbool isOrthogonal(Segment s1,Segment s2){\n    return equals(dot(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n\nbool isParallel(Vector a,Vector b){\n    return equals(cross(a,b),0.0);\n}\n\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n    return isParallel(a1-a2,b1-b2);\n}\n\nbool isParallel(Segment s1,Segment s2){\n    return equals(cross(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n\nPoint project(Segment s,Point p){\n    Vector base=s.p2-s.p1;\n    double r=dot(p-s.p1,base)/norm(base);\n    return s.p1+base*r;\n}\n\nPoint reflect(Segment s,Point p){\n    return p+(project(s,p)-p)*2.0;\n}\n\nstatic const int counter_clockwise=1;\nstatic const int clockwise=-1;\nstatic const int online_back=2;\nstatic const int online_front=-2;\nstatic const int on_segment=0;\n\nint ccw(Point p0,Point p1,Point p2){\n    Vector a=p1-p0;\n    Vector b=p2-p0;\n    \n    if(cross(a,b)>eps) return counter_clockwise;\n    if(cross(a,b)<-eps) return clockwise;\n    if(dot(a,b)<-eps) return online_back;\n    if(a.norm()<b.norm()) return online_front;\n    \n    return on_segment;\n}\n\nbool intersect(Point p1,Point p2,Point p3,Point p4){\n    return(ccw(p1,p2,p3)*ccw(p1,p2,p4)<=0&&ccw(p3,p4,p1)*ccw(p3,p4,p2)<=0);\n}\n\nbool intersect(Segment s1,Segment s2){\n    return intersect(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n\ntypedef Segment Line;\n\ndouble getDistance(Point a,Point b){\n    return abs(a-b);\n}\n\ndouble getDistanceLP(Line l,Point p){\n    return abs(cross(l.p2-l.p1,p-l.p1)/abs(l.p2-l.p1));\n}\n\ndouble getDistanceSP(Segment s,Point p){\n    if(dot(s.p2-s.p1,p-s.p1)<0.0) return abs(p-s.p1);\n    if(dot(s.p1-s.p2,p-s.p2)<0.0) return abs(p-s.p2);\n    return getDistanceLP(s,p);\n}\n\ndouble getDistance(Segment s1,Segment s2){\n    if(intersect(s1,s2)) return 0.0;\n    return min({getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2),getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)});\n}\n\nPoint getCrossPoint(Segment s1,Segment s2){\n    Vector base=s2.p2-s2.p1;\n    double d1=abs(cross(base,s1.p1-s2.p1));\n    double d2=abs(cross(base,s1.p2-s2.p1));\n    double t=d1/(d1+d2);\n    return s1.p1+(s1.p2-s1.p1)*t;\n}\n\nclass Circle{\npublic:\n    Point c;\n    double r;\n    Circle(Point c=Point(),double r=0.0):c(c),r(r){}\n};\n\npair<Point,Point> segCrossPpoints(Circle c,Line l){\n    //assert(intersect(c,l));\n    Vector pr=project(l,c.c);\n    Vector e=(l.p2-l.p1)/abs(l.p2-l.p1);\n    double base=sqrt(c.r*c.r-norm(pr-c.c));\n    return make_pair(pr+e*base,pr-e*base);\n}\n\ndouble arg(Vector p){return atan2(p.y,p.x);}\nVector polar(double a,double r){return Point(cos(r)*a,sin(r)*a);}\n\npair<Point,Point> getCrossPoints(Circle c1,Circle c2){\n    //assert(intersect(c1,c2));\n    double d=abs(c1.c-c2.c);\n    double a=acos((c1.r*c1.r+d*d-c2.r-c2.r)/(2*c1.r*d));\n    double t=arg(c2.c-c1.c);\n    return make_pair(c1.c+polar(c1.r,t+a),c1.c+polar(c1.r,t-a));\n}\n\ntypedef vector<Point> Polygon;\n\n/*\n IN 2\n ON 1\n OUT 0\n */\n\nint contains(Polygon g,Point p){\n    int n=int(g.size());\n    bool x=false;\n    for(int i=0;i<n;i++){\n        Point a=g[i]-p,b=g[(i+1)%n]-p;\n        if(a.y>b.y) swap(a,b);\n        if(a.y<eps&&eps<b.y&&cross(a,b)>eps) x=!x;\n    }\n    return (x?2:0);\n}\n\nPolygon andrewScan(Polygon s){\n    Polygon u,l;\n    if(int(s.size())<3) return s;\n    sort(all(s));\n    int n=int(s.size());\n    \n    u.push_back(s[0]);\n    u.push_back(s[1]);\n    \n    l.push_back(s[n-1]);\n    l.push_back(s[n-2]);\n    \n    for(int i=2;i<n;i++){\n        for(int j=int(u.size());j>=2&&ccw(u[j-2],u[j-1],s[i])!=clockwise;j--){\n            u.pop_back();\n        }\n        u.push_back(s[i]);\n    }\n    \n    for(int i=int(s.size())-3;i>=0;i--){\n        for(int j=int(l.size());j>=2&&ccw(l[j-2],l[j-1],s[i])!=clockwise;j--){\n            l.pop_back();\n        }\n        l.push_back(s[i]);\n    }\n    \n    reverse(all(l));\n    \n    for(int i=int(u.size())-2;i>=1;i--) l.push_back(u[i]);\n    \n    return l;\n}\n\nint main(){\n    \n    std::ifstream in(\"text.txt\");\n    std::cin.rdbuf(in.rdbuf());\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    \n    Point p0,p1,p2;\n    cin>>p0.x>>p0.y>>p1.x>>p1.y;\n    int Q;cin>>Q;\n    while(Q--){\n        cin>>p2.x>>p2.y;\n        int c=ccw(p0,p1,p2);\n        \n        if(c==1) cout<<\"COUNTER_CLOCKWISE\"<<endl;\n        else if(c==-1) cout<<\"CLOCKWISE\"<<endl;\n        else if(c==2) cout<<\"ONLINE_BACK\"<<endl;\n        else if(c==-2) cout<<\"ONLINE_FRONT\"<<endl;\n        else cout<<\"ON_SEGMENT\"<<endl;\n    }\n}\n\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<cmath>\n#include<algorithm>\n\nusing namespace std;\n\nint main()\n{\n\tdouble p1x, p1y, p2x, p2y, p0x, p0y;\n\tint q;\n\n\tscanf(\"%lf %lf %lf %lf\", &p0x, &p0y, &p1x, &p1y);\n\n\tpair<double, double> v01 = { p1x - p0x, p1y - p0y };\n\n\n\tscanf(\"%d\", &q);\n\n\tfor (int i = 0; i < q; i++)\n\t{\n\t\tscanf(\"%lf %lf\", &p2x, &p2y);\n\n\t\tif ((p2x == p0x && p2y == p0y) || (p2x == p1x && p2y == p1y)){\n\t\t\tprintf(\"ON_SEGMENT\\n\");\n\n\t\t\tcontinue;\n\t\t}\n\n\t\tpair<double, double> v02 = { p2x - p0x, p2y - p0y };\n\n\t\tif (v01.first*v02.second == v01.second*v02.first)\n\t\t{\n\t\t\tif (v01.first*v02.first < 0)\n\t\t\t{\n\t\t\t\tprintf(\"ONLINE_BACK\\n\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (pow(v01.first,2)+pow(v01.second,2)<pow(v02.first,2)+pow(v02.second,2)){\n\t\t\t\t\tprintf(\"ONLINE_FRONT\\n\");\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tprintf(\"ON_SEGMENT\\n\");\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t\tdouble sin = (v01.first*v02.second - v01.second*v02.first);\n\n\t\tif (sin > 0){\n\t\t\tprintf(\"COUNTER_CLOCKWISE\\n\");\n\n\t\t\tcontinue;\n\t\t}\n\t\telse{\n\t\t\tprintf(\"CLOCKWISE\\n\");\n\n\t\t\tcontinue;\n\t\t}\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#ifndef ___GEOMETRY_LIBRARY\n#define ___GEOMETRY_LIBRARY\n\n#include <vector>\n#include <algorithm>\n\ntemplate<class type>\nclass point2d {\npublic:\n\ttype x, y;\n\tpoint2d() : x(type(0)), y(type(0)) {};\n\tpoint2d(type x_, type y_) : x(x_), y(y_) {};\n\tbool operator==(const point2d& p) { return x == p.x && y == p.y; }\n\tbool operator!=(const point2d& p) { return x != p.x || y != p.y; }\n\tpoint2d& operator+=(const point2d& p) { x += p.x; y += p.y; return *this; }\n\tpoint2d& operator-=(const point2d& p) { x -= p.x; y -= p.y; return *this; }\n\tpoint2d& operator*=(type val) { x *= val; y *= val; return *this; }\n\tpoint2d& operator/=(type val) { x /= val; y /= val; return *this; }\n\tpoint2d operator+(const point2d& p) const { return point2d(*this) += p; }\n\tpoint2d operator-(const point2d& p) const { return point2d(*this) -= p; }\n\tpoint2d operator*(type val) const { return point2d(*this) *= val; }\n\tpoint2d operator/(type val) const { return point2d(*this) /= val; }\n\ttype norm() const { return x * x + y * y; }\n\ttype abs() const { return type(std::sqrt(x * x + y * y)); }\n\tlong double fabs() const { return std::sqrt((long double)(x * x + y * y)); }\n\ttype dot(const point2d& p) const { return x * p.x + y * p.y; }\n\ttype cross(const point2d& p) const { return x * p.y - y * p.x; }\n\tint ccw(const point2d& p1, const point2d& p2) const {\n\t\tpoint2d pr1 = p1 - point2d(*this);\n\t\tpoint2d pr2 = p2 - point2d(*this);\n\t\tif (pr1.cross(pr2) != 0) return pr1.cross(pr2) > 0 ? 1 : -1;\n\t\tif (pr1.dot(pr2) < 0) return 2;\n\t\treturn pr1.norm() < pr2.norm() ? -2 : 0;\n\t}\n};\n\ntemplate<class type>\nclass segment2d {\npublic:\n\tpoint2d<type> p1, p2;\n\tsegment2d() : p1(point2d<type>()), p2(point2d<type>()) {};\n\tsegment2d(const point2d<type>& p1_, const point2d<type>& p2_) : p1(p1_), p2(p2_) {};\n\ttype norm() const { return (p1 - p2).norm(); }\n\ttype abs() const { return (p1 - p2).abs(); }\n\tlong double fabs() const { return (p1 - p2).fabs(); }\n};\n\n#endif // ___GEOMETRY_LIBRARY\n\n#include <iostream>\nusing namespace std;\nint main() {\n\tcin.tie(0);\n\tios_base::sync_with_stdio(false);\n\tpoint2d<double> p0, p1;\n\tcin >> p0.x >> p0.y >> p1.x >> p1.y;\n\tint q;\n\tcin >> q;\n\tcout.precision(15);\n\tfor (int i = 0; i < q; ++i) {\n\t\tpoint2d<double> p2;\n\t\tcin >> p2.x >> p2.y;\n\t\tint res = p0.ccw(p1, p2);\n\t\tif (res == 1) cout << \"COUNTER_CLOCKWISE\\n\";\n\t\telse if (res == -1) cout << \"CLOCKWISE\\n\";\n\t\telse if (res == 2) cout << \"ONLINE_BACK\\n\";\n\t\telse if (res == -2) cout << \"ONLINE_FRONT\\n\";\n\t\telse cout << \"ON_SEGMENT\\n\";\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define rep(i, n) for (int i = 0; i < n; ++i)\nusing ll = long long;\nusing namespace std;\nconst int INF = 1e9;\n\n//https://dai1741.github.io/maximum-algo-2012/cpp/geometry/geometries2d.h\n\n/* 基本要素 */\ntypedef double D;     // 座標値の型。doubleかlong doubleを想定\ntypedef complex<D> P; // Point\ntypedef pair<P, P> L; // Line\ntypedef vector<P> VP;\nconst D EPS = 1e-9; // 許容誤差。問題によって変える\n#define X real()\n#define Y imag()\n#define LE(n, m) ((n) < (m) + EPS)\n#define GE(n, m) ((n) + EPS > (m))\n#define EQ(n, m) (abs((n) - (m)) < EPS)\n\n// 内積　dot(a,b) = |a||b|cosθ\nD dot(P a, P b) {\n    return (conj(a) * b).X;\n}\n// 外積　cross(a,b) = |a||b|sinθ\nD cross(P a, P b) {\n    return (conj(a) * b).Y;\n}\n\n// 点の進行方向\nint ccw(P a, P b, P c) {\n    b -= a;\n    c -= a;\n    if (cross(b, c) > EPS)\n        return +1; // counter clockwise\n    if (cross(b, c) < -EPS)\n        return -1; // clockwise\n    if (dot(b, c) < -EPS)\n        return +2; // c--a--b on line\n    if (norm(b) < norm(c))\n        return -2; // a--b--c on line or a==b\n    return 0;      // a--c--b on line or a==c or b==c\n}\n\n/* 交差判定　直線・線分は縮退してはならない。接する場合は交差するとみなす。isecはintersectの略 */\n\n// 直線と点\nbool isecLP(P a1, P a2, P b) {\n    return abs(ccw(a1, a2, b)) != 1; // return EQ(cross(a2-a1, b-a1), 0); と等価\n}\n\n// 直線と直線\nbool isecLL(P a1, P a2, P b1, P b2) {\n    return !isecLP(a2 - a1, b2 - b1, 0) || isecLP(a1, b1, b2);\n}\n\n// 直線と線分\nbool isecLS(P a1, P a2, P b1, P b2) {\n    return cross(a2 - a1, b1 - a1) * cross(a2 - a1, b2 - a1) < EPS;\n}\n\n// 線分と線分\nbool isecSS(P a1, P a2, P b1, P b2) {\n    return ccw(a1, a2, b1) * ccw(a1, a2, b2) <= 0 &&\n           ccw(b1, b2, a1) * ccw(b1, b2, a2) <= 0;\n}\n\n// 線分と点\nbool isecSP(P a1, P a2, P b) {\n    return !ccw(a1, a2, b);\n}\n\n/* 距離　各直線・線分は縮退してはならない */\n\n// 点pの直線aへの射影点を返す\nP proj(P a1, P a2, P p) {\n    return a1 + dot(a2 - a1, p - a1) / norm(a2 - a1) * (a2 - a1);\n}\n\n// 点pの直線aへの反射点を返す\nP reflection(P a1, P a2, P p) {\n    return 2.0 * proj(a1, a2, p) - p;\n}\n\nD distLP(P a1, P a2, P p) {\n    return abs(proj(a1, a2, p) - p);\n}\n\nD distLL(P a1, P a2, P b1, P b2) {\n    return isecLL(a1, a2, b1, b2) ? 0 : distLP(a1, a2, b1);\n}\n\nD distLS(P a1, P a2, P b1, P b2) {\n    return isecLS(a1, a2, b1, b2) ? 0 : min(distLP(a1, a2, b1), distLP(a1, a2, b2));\n}\n\nD distSP(P a1, P a2, P p) {\n    P r = proj(a1, a2, p);\n    if (isecSP(a1, a2, r))\n        return abs(r - p);\n    return min(abs(a1 - p), abs(a2 - p));\n}\n\nD distSS(P a1, P a2, P b1, P b2) {\n    if (isecSS(a1, a2, b1, b2))\n        return 0;\n    return min(min(distSP(a1, a2, b1), distSP(a1, a2, b2)),\n               min(distSP(b1, b2, a1), distSP(b1, b2, a2)));\n}\n\n// 2直線の交点\nP crosspointLL(P a1, P a2, P b1, P b2) {\n    D d1 = cross(b2 - b1, b1 - a1);\n    D d2 = cross(b2 - b1, a2 - a1);\n    if (EQ(d1, 0) && EQ(d2, 0))\n        return a1; // same line\n    if (EQ(d2, 0))\n        throw \"kouten ga nai\"; // 交点がない\n    return a1 + d1 / d2 * (a2 - a1);\n}\n\n/* 円 */\n\nD distLC(P a1, P a2, P c, D r) {\n    return max(distLP(a1, a2, c) - r, 0.0);\n}\n\nD distSC(P a1, P a2, P c, D r) {\n    D dSqr1 = norm(c - a1), dSqr2 = norm(c - a2);\n    if (dSqr1 < r * r ^ dSqr2 < r * r)\n        return 0; // 円が線分を包含するとき距離0ならここをORに変える\n    if (dSqr1 < r * r & dSqr2 < r * r)\n        return r - sqrt(max(dSqr1, dSqr2));\n    return max(distSP(a1, a2, c) - r, 0.0);\n}\n\nVP crosspointLC(P a1, P a2, P c, D r) {\n    VP ps;\n    P ft = proj(a1, a2, c);\n    if (!GE(r * r, norm(ft - c)))\n        return ps;\n\n    P dir = sqrt(max(r * r - norm(ft - c), 0.0)) / abs(a2 - a1) * (a2 - a1);\n    ps.push_back(ft + dir);\n    if (!EQ(r * r, norm(ft - c)))\n        ps.push_back(ft - dir);\n    return ps;\n}\n\nD distCC(P a, D ar, P b, D br) {\n    D d = abs(a - b);\n    return GE(d, abs(ar - br)) ? max(d - ar - br, 0.0) : abs(ar - br) - d;\n}\n\n// 2円の交点\nVP crosspointCC(P a, D ar, P b, D br) {\n    VP ps;\n    P ab = b - a;\n    D d = abs(ab);\n    D crL = (norm(ab) + ar * ar - br * br) / (2 * d);\n    if (EQ(d, 0) || ar < abs(crL))\n        return ps;\n\n    P abN = ab * P(0, sqrt(ar * ar - crL * crL) / d);\n    P cp = a + crL / d * ab;\n    ps.push_back(cp + abN);\n    if (!EQ(norm(abN), 0))\n        ps.push_back(cp - abN);\n    return ps;\n}\n\n// 点pから円aへの接線の接点\nVP tangentPoints(P a, D ar, P p) {\n    VP ps;\n    D sin = ar / abs(p - a);\n    if (!LE(sin, 1))\n        return ps; // ここでNaNも弾かれる\n    D t = M_PI_2 - asin(min(sin, 1.0));\n    ps.push_back(a + (p - a) * polar(sin, t));\n    if (!EQ(sin, 1))\n        ps.push_back(a + (p - a) * polar(sin, -t));\n    return ps;\n}\n\n// 2円の共通接線。返される各直線に含まれる頂点は円との接点となる\nvector<L> tangentLines(P a, D ar, P b, D br) {\n    vector<L> ls;\n    D d = abs(b - a);\n    rep(i, 2) {\n        D sin = (ar - (1 - i * 2) * br) / d;\n        if (!LE(sin * sin, 1))\n            break;\n        D cos = sqrt(max(1 - sin * sin, 0.0));\n        rep(j, 2) {\n            P n = (b - a) * P(sin, (1 - j * 2) * cos) / d;\n            ls.push_back(L(a + ar * n, b + (1 - i * 2) * br * n));\n            if (cos < EPS)\n                break; // 重複する接線を無視（重複していいならこの行不要）\n        }\n    }\n    return ls;\n}\n\n// 三角形の外心。点a,b,cは同一線上にあってはならない\nP circumcenter(P a, P b, P c) {\n    a = (a - c) * 0.5;\n    b = (b - c) * 0.5;\n    return c + crosspointLL(a, a * P(1, 1), b, b * P(1, 1));\n}\n\n// 点aと点bを通り、半径がrの円の中心を返す\nVP circlesPointsRadius(P a, P b, D r) {\n    VP cs;\n    P abH = (b - a) * 0.5;\n    D d = abs(abH);\n    if (d == 0 || d > r)\n        return cs;              // 必要なら !LE(d,r) として円1つになる側へ丸める\n    D dN = sqrt(r * r - d * d); // 必要なら max(r*r - d*d, 0) とする\n    P n = abH * P(0, 1) * (dN / d);\n    cs.push_back(a + abH + n);\n    if (dN > 0)\n        cs.push_back(a + abH - n);\n    return cs;\n}\n\n// 点aと点bを通り、直線lに接する円の中心\nVP circlesPointsTangent(P a, P b, P l1, P l2) {\n    P n = (l2 - l1) * P(0, 1);\n    P m = (b - a) * P(0, 0.5);\n    D rC = dot((a + b) * 0.5 - l1, n);\n    D qa = norm(n) * norm(m) - dot(n, m) * dot(n, m);\n    D qb = -rC * dot(n, m);\n    D qc = norm(n) * norm(m) - rC * rC;\n    D qd = qb * qb - qa * qc; // qa*k^2 + 2*qb*k + qc = 0\n\n    VP cs;\n    if (qd < -EPS)\n        return cs;\n    if (EQ(qa, 0)) {\n        if (!EQ(qb, 0))\n            cs.push_back((a + b) * 0.5 - m * (qc / qb / 2));\n        return cs;\n    }\n    D t = -qb / qa;\n    cs.push_back((a + b) * 0.5 + m * (t + sqrt(max(qd, 0.0)) / qa));\n    if (qd > EPS)\n        cs.push_back((a + b) * 0.5 + m * (t - sqrt(max(qd, 0.0)) / qa));\n    return cs;\n}\n\n// 点集合を含む最小の円の中心\nP minEnclosingCircle(const VP &ps) {\n    P c;\n    double move = 0.5;\n    rep(i, 39) { // 2^(-39-1) \\approx 0.9e-12\n        rep(t, 50) {\n            D max = 0;\n            int k = 0;\n            rep(j, ps.size()) if (max < norm(ps[j] - c)) {\n                max = norm(ps[j] - c);\n                k = j;\n            }\n            c += (ps[k] - c) * move;\n        }\n        move /= 2;\n    }\n    return c;\n}\n\n/* 多角形 */\n\n// 頂点の順序（sortやmax_elementに必要）\nnamespace std {\nbool operator<(const P a, const P b) {\n    return a.X != b.X ? a.X < b.X : a.Y < b.Y;\n}\n} // namespace std\n\n// 凸包\nVP convexHull(VP ps) { // 元の点集合がソートされていいならVP&に\n    int n = ps.size(), k = 0;\n    sort(ps.begin(), ps.end());\n    VP ch(2 * n);\n    for (int i = 0; i < n; ch[k++] = ps[i++]) // lower-hull\n        while (k >= 2 && ccw(ch[k - 2], ch[k - 1], ps[i]) <= 0)\n            --k;                                              // 余計な点も含むなら == -1 とする\n    for (int i = n - 2, t = k + 1; i >= 0; ch[k++] = ps[i--]) // upper-hull\n        while (k >= t && ccw(ch[k - 2], ch[k - 1], ps[i]) <= 0)\n            --k;\n    ch.resize(k - 1);\n    return ch;\n}\n\n// 凸判定。縮退を認めないならccwの判定部分を != 1 とする\nbool isCcwConvex(const VP &ps) {\n    int n = ps.size();\n    rep(i, n) if (ccw(ps[i], ps[(i + 1) % n], ps[(i + 2) % n]) == -1) return false;\n    return true;\n}\n\n// 凸多角形の内部判定　O(n)\n// 点が領域内部なら1、境界上なら2、外部なら0を返す\nint inConvex(P p, const VP &ps) {\n    int n = ps.size();\n    int dir = ccw(ps[0], ps[1], p);\n    rep(i, n) {\n        int ccwc = ccw(ps[i], ps[(i + 1) % n], p);\n        if (!ccwc)\n            return 2; // 線分上に存在\n        if (ccwc != dir)\n            return 0;\n    }\n    return 1;\n}\n\n// 凸多角形の内部判定　O(logn)\n// 点が領域内部なら1、境界上なら2、外部なら0を返す\nint inCcwConvex(const VP &ps, P p) {\n    int n = ps.size();\n    P g = (ps[0] + ps[n / 3] + ps[n * 2 / 3]) / 3.0;\n    if (g == p)\n        return 1;\n    P gp = p - g;\n\n    int l = 0, r = n;\n    while (l + 1 < r) {\n        int mid = (l + r) / 2;\n        P gl = ps[l] - g;\n        P gm = ps[mid] - g;\n        if (cross(gl, gm) > 0) {\n            if (cross(gl, gp) >= 0 && cross(gm, gp) <= 0)\n                r = mid;\n            else\n                l = mid;\n        } else {\n            if (cross(gl, gp) <= 0 && cross(gm, gp) >= 0)\n                l = mid;\n            else\n                r = mid;\n        }\n    }\n    r %= n;\n    D cr = cross(ps[l] - p, ps[r] - p);\n    return EQ(cr, 0) ? 2 : cr < 0 ? 0 : 1;\n}\n\n// 多角形の内部判定\n// 点が領域内部なら1、境界上なら2、外部なら0を返す\nint inPolygon(const VP &ps, P p) {\n    int n = ps.size();\n    bool in = false;\n    rep(i, n) {\n        P a = ps[i] - p;\n        P b = ps[(i + 1) % n] - p;\n        if (EQ(cross(a, b), 0) && LE(dot(a, b), 0))\n            return 2;\n        if (a.Y > b.Y)\n            swap(a, b);\n        if ((a.Y * b.Y < 0 || (a.Y * b.Y < EPS && b.Y > EPS)) && LE(cross(a, b), 0))\n            in = !in;\n    }\n    return in;\n}\n\n// 凸多角形クリッピング\nVP convexCut(const VP &ps, P a1, P a2) {\n    int n = ps.size();\n    VP ret;\n    rep(i, n) {\n        int ccwc = ccw(a1, a2, ps[i]);\n        if (ccwc != -1)\n            ret.push_back(ps[i]);\n        int ccwn = ccw(a1, a2, ps[(i + 1) % n]);\n        if (ccwc * ccwn == -1)\n            ret.push_back(crosspointLL(a1, a2, ps[i], ps[(i + 1) % n]));\n    }\n    return ret;\n}\n\n// 凸多角形の直径（最遠点対）\npair<int, int> convexDiameter(const VP &ps) {\n    int n = ps.size();\n    int i = min_element(ps.begin(), ps.end()) - ps.begin();\n    int j = max_element(ps.begin(), ps.end()) - ps.begin();\n    int maxI, maxJ;\n    D maxD = 0;\n    rep(_, 2 * n) {\n        if (maxD < norm(ps[i] - ps[j])) {\n            maxD = norm(ps[i] - ps[j]);\n            maxI = i;\n            maxJ = j;\n        }\n        if (cross(ps[i] - ps[(i + 1) % n], ps[(j + 1) % n] - ps[j]) <= 0)\n            j = (j + 1) % n;\n        else\n            i = (i + 1) % n;\n    }\n    return make_pair(maxI, maxJ);\n}\n\n// 多角形の符号付面積\nD area(const VP &ps) {\n    D a = 0;\n    rep(i, ps.size()) a += cross(ps[i], ps[(i + 1) % ps.size()]);\n    return a / 2;\n}\n\n// 多角形の幾何学的重心\nP centroid(const VP &ps) {\n    int n = ps.size();\n    D aSum = 0;\n    P c;\n    rep(i, n) {\n        D a = cross(ps[i], ps[(i + 1) % n]);\n        aSum += a;\n        c += (ps[i] + ps[(i + 1) % n]) * a;\n    }\n    return 1 / aSum / 3 * c;\n}\n\n// ボロノイ領域\nVP voronoiCell(P p, const VP &ps, const VP &outer) {\n    VP cl = outer;\n    rep(i, ps.size()) {\n        if (EQ(norm(ps[i] - p), 0))\n            continue;\n        P h = (p + ps[i]) * 0.5;\n        cl = convexCut(cl, h, h + (ps[i] - h) * P(0, 1));\n    }\n    return cl;\n}\n\n/* 幾何グラフ */\n\nstruct Edge {\n    int from, to;\n    D cost;\n    Edge(int from, int to, D cost) : from(from), to(to), cost(cost) {}\n};\nstruct Graph {\n    int n;\n    vector<vector<Edge>> edges;\n    Graph(int n) : n(n), edges(n) {}\n    void addEdge(Edge e) {\n        edges[e.from].push_back(e);\n        edges[e.to].push_back(Edge(e.to, e.from, e.cost));\n    }\n};\n\n// 線分アレンジメント（線分の位置関係からグラフを作成）\nGraph segmentArrangement(const vector<L> &segs, VP &ps) {\n    int n = segs.size();\n    rep(i, n) {\n        ps.push_back(segs[i].first);\n        ps.push_back(segs[i].second);\n        rep(j, i) {\n            if (isecSS(segs[i].first, segs[i].second, segs[j].first, segs[j].second))\n                ps.push_back(crosspointLL(segs[i].first, segs[i].second, segs[j].first, segs[j].second));\n        }\n    }\n    sort(ps.begin(), ps.end());\n    ps.erase(unique(ps.begin(), ps.end()), ps.end());\n\n    int m = ps.size();\n    Graph gr(m);\n    vector<pair<D, int>> list;\n    rep(i, n) {\n        list.clear();\n        rep(j, m) {\n            if (isecSP(segs[i].first, segs[i].second, ps[j]))\n                list.push_back(make_pair(norm(segs[i].first - ps[j]), j));\n        }\n        sort(list.begin(), list.end());\n        rep(j, list.size() - 1) {\n            int a = list[j].second;\n            int b = list[j + 1].second;\n            gr.addEdge(Edge(a, b, abs(ps[a] - ps[b])));\n        }\n    }\n    return gr;\n}\n\n// 可視グラフ（点集合から見える位置へ辺を張ったグラフ）\nGraph visibilityGraph(const VP &ps, const vector<VP> &objs) {\n    int n = ps.size();\n    Graph gr(n);\n    rep(i, n) rep(j, i) {\n        P a = ps[i], b = ps[j];\n        if (!EQ(norm(a - b), 0))\n            rep(k, objs.size()) {\n                const VP &obj = objs[k];\n                int inStA = inConvex(a, obj);\n                int inStB = inConvex(b, obj);\n                if ((inStA ^ inStB) % 2 || inStA * inStB != 1 && inConvex((a + b) * 0.5, obj) == 1)\n                    goto skip;\n                rep(l, obj.size()) {\n                    P cur = obj[l];\n                    P next = obj[(l + 1) % obj.size()];\n                    if (isecSS(a, b, cur, next) && !isecSP(cur, next, a) && !isecSP(cur, next, b))\n                        goto skip;\n                }\n            }\n        gr.addEdge(Edge(i, j, abs(a - b)));\n    skip : {}\n    }\n    return gr;\n}\nint main() {\n    D x1, y1, x2, y2;\n    cin >> x1 >> y1 >> x2 >> y2;\n    int Q;\n    cin >> Q;\n    rep(i, Q) {\n        D x, y;\n        cin >> x >> y;\n        int ans = ccw(P(x1, y1), P(x2, y2), P(x, y));\n        if (ans == 1)\n            cout << \"COUNTER_CLOCKWISE\";\n        else if (ans == -1)\n            cout << \"CLOCKWISE\";\n        else if (ans == 2)\n            cout << \"ONLINE_BACK\";\n        else if (ans == -2)\n            cout << \"ONLINE_FRONT\";\n        else\n            cout << \"ON_SEGMENT\";\n        cout << endl;\n    }\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<iomanip>\n#include<algorithm>\n#define _USE_MATH_DEFINES\n#include<math.h>\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS )\nusing namespace std;\n\nclass Point {\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0) :x(x), y(y) {}\n\tPoint operator + (Point p) {\n\t\treturn Point(x + p.x, y + p.y); \n\t}\n\tPoint operator - (Point p) {\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n\tPoint operator * (double a) {\n\t\treturn Point(a * x, a * y);\n\t}\n\tPoint operator / (double a) {\n\t\treturn Point(x / a, y / a);\n\t}\n\n\tdouble abs() {\n\t\treturn sqrt(norm());\n\t}\n\tdouble norm() {\n\t\treturn x * x + y * y;\n\t}\n\n\tbool operator < (const Point &p)const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p)const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b);\ndouble cross(Vector a, Vector b);\ndouble getDistanceSP(Point p, Point p1, Point p2);\ndouble angle(Vector a, Vector b);\nbool doIntersect(Point p1, Point p2, Point p3, Point p4);\ndouble getDistanceSS(Point p1, Point p2, Point p3, Point p4);\nvoid clockwise(Point p0, Point p1, Point p2);\n\nint main() {\n    int i, q;\n\tdouble x0, x1, x2, y0, y1, y2;\n\tcin >> x0 >> y0 >> x1 >> y1;\n\tPoint p0(x0, y0), p1(x1, y1);\n\tcin >> q;\n\tfor (i = 0; i < q; i++) {\n\t\tcin >> x2 >> y2;\n\t\tPoint p2(x2, y2);\n\t\tclockwise(p0, p1, p2);\n\t}\n\treturn 0;\n}\n\ndouble dot(Vector a, Vector b) {\n\treturn a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n\treturn a.x * b.y - a.y * b.x;\n}\n\ndouble getDistanceSP(Point p, Point p1, Point p2) {\n\tif (dot(p - p1, p2 - p1) < 0.0)return (p - p1).abs();\n\telse if (dot(p - p2, p1 - p2) < 0.0)return (p - p2).abs();\n\telse return  fabs(cross(p2 - p1, p - p1)) / (p2 - p1).abs();\n}\n\n\ndouble angle(Vector a, Vector b) {\n\tif (equals(dot(a, b), a.abs() * b.abs()))return 0.0;\n\telse if (equals(dot(a, b), (-1) * a.abs() * b.abs()))return M_PI;\n\tif (cross(a, b) > 0.0)return acos(dot(a, b) / a.abs() / b.abs());\n\telse return (-1) * acos(dot(a, b) / a.abs() / b.abs());\n}\n\nbool doIntersect(Point p1, Point p2, Point p3, Point p4) {\n\tif ((equals(fabs(angle(p2 - p1, p4 - p1)), 0) || equals(fabs(angle(p2 - p1, p4 - p1)), M_PI)) && (equals(fabs(angle(p2 - p1, p3 - p1)), 0) || equals(fabs(angle(p2 - p1, p3 - p1)), M_PI)))return false;\n\telse if (angle(p3 - p1, p4 - p1) >= angle(p3 - p1, p2 - p1) && angle(p3 - p1, p2 - p1) >= 0.0 && angle(p2 - p3, p1 - p3) >= angle(p2 - p3, p4 - p3) && angle(p2 - p3, p4 - p3) >= 0.0)return true;\n\telse if (angle(p3 - p2, p4 - p2) >= angle(p3 - p2, p1 - p2) && angle(p3 - p2, p1 - p2) >= 0.0 && angle(p1 - p3, p2 - p3) >= angle(p1 - p3, p4 - p3) && angle(p1 - p3, p4 - p3) >= 0.0)return true;\n\telse return false;\n}\n\ndouble getDistanceSS(Point p1, Point p2, Point p3, Point p4) {\n\tif (doIntersect(p1, p2, p3, p4))return 0;\n\telse return min({ getDistanceSP(p4, p1, p2), getDistanceSP(p3, p1, p2), getDistanceSP(p1, p3, p4), getDistanceSP(p2, p3, p4) });\n}\n\nvoid clockwise(Point p0, Point p1, Point p2) {\n\tif (p2 == p0 || p2 == p1) {\n\t\tcout << \"ON_SEGMENT\" << endl;\n\t} else if (equals(angle(p1 - p0, p2 - p0), 0.0)) {\n\t\tif((p1 - p0).norm() < (p2 - p0).norm())cout << \"ONLINE_FRONT\" << endl;\n\t\telse cout << \"ON_SEGMENT\" << endl;\n\t} else if(equals(angle(p1 - p0, p2 - p0), M_PI)){\n\t\tcout << \"ONLINE_BACK\" << endl;\n\t} else {\n\t\tif(angle(p1 - p0, p2 - p0) > 0.0)cout << \"COUNTER_CLOCKWISE\" << endl;\n\t\telse cout << \"CLOCKWISE\" << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<cstdlib>\n#include<cmath>\n#include<iostream>\n#include<vector>\n#include<algorithm>\n\nusing namespace std;\n\nint main()\n{\n\tdouble p1x, p1y, p2x, p2y, p0x, p0y;\n\tint q;\n\n\tscanf(\"%lf %lf %lf %lf\", &p0x, &p0y, &p1x, &p1y);\n\n\tpair<double, double> v01 = { p1x - p0x, p1y - p0y };\n\n\n\tscanf(\"%d\", &q);\n\n\tfor (int i = 0; i < q; i++)\n\t{\n\t\tscanf(\"%lf %lf\", &p2x, &p2y);\n\n\t\tif ((p2x == p0x && p2y == p0y) || (p2x == p1x && p2y == p1y)){\n\t\t\tprintf(\"ONLINE_SEGMENT\\n\");\n\n\t\t\tcontinue;\n\t\t}\n\n\t\tpair<double, double> v02 = { p2x - p0x, p2y - p0x };\n\n\t\tif (v01.first*v02.second == v01.second*v02.first)\n\t\t{\n\t\t\tif (v01.first*v02.first < 0)\n\t\t\t{\n\t\t\t\tprintf(\"ONLINE_BACK\\n\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tabs(v01.first) < abs(v02.first) ? printf(\"ONLINE_FRONT\\n\") : printf(\"ONLINE_SEGMENT\\n\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t\tdouble a = v01.second / v01.first;\n\t\tdouble y01 = (v01.second / v01.first)*(p2x - p0x) + p0y;\n\t\tif (a > 0){\n\t\t\ty01 < p2y ? printf(\"COUNTER_CLOCKWISE\\n\") : printf(\"CLOCKWISE\\n\");\n\t\t\tcontinue;\n\t\t}\n\t\telse{\n\t\t\ty01 > p2y ? printf(\"COUNTER_CLOCKWISE\\n\") : printf(\"CLOCKWISE\\n\");\n\t\t\tcontinue;\n\t\t}\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define rep(i, n) for(int i=0;i<(n);++i)\n#define per(i, n) for(int i=(n)-1;i>=0;--i)\n#define repa(i, n) for(int i=1;i<(n);++i)\n#define foreach(i, n) for(auto &i:(n))\n#define pii pair<int, int>\n#define pll pair<long long, long long>\n#define all(x) (x).begin(), (x).end()\n#define bit(x) (1ll << (x))\nusing namespace std;\nusing ll = long long;\nconst ll MOD = (ll)1e9+7;\n//const ll MOD = 998244353;\n//const ll MOD = 924844033;\nconst int INF = (ll)1e9+7;\nconst ll INFLL = (ll)1e18;\nusing namespace std;\ntemplate<class t>\nusing vvector = vector<vector<t>>;\ntemplate<class t>\nusing vvvector = vector<vector<vector<t>>>;\ntemplate<class t>\nusing priority_queuer = priority_queue<t, vector<t>, greater<t>>;\ntemplate<class t, class u> bool chmax(t &a, u b){if(a<b){a=b;return true;}return false;}\ntemplate<class t, class u> bool chmin(t &a, u b){if(a>b){a=b;return true;}return false;}\n\n#ifdef DEBUG\n#define OUTPUT(x) (output(x), outendl())\n#else\n#define OUTPUT(x) (void)0\n#endif\n\nll modpow(ll x, ll b){\n\tll res = 1;\n\twhile(b){\n\t\tif(b&1)res = res * x % MOD;\n\t\tx = x * x % MOD;\n\t\tb>>=1;\n\t}\n\treturn res;\n}\n\nll modinv(ll x){\n\treturn modpow(x, MOD-2);\n}\n\nbool was_output = false;\ntemplate<class t>\nvoid output(t a){\n\tif(was_output)cout << \" \";\n\tcout << a;\n\twas_output = true;\n}\nvoid outendl(){\n\twas_output = false;\n\tcout << endl;\n}\n\n//below here\n\ntemplate<class t>\nclass Vector2{\n\tpublic:\n\t\tt x;\n\t\tt y;\n\t\tVector2():x(0), y(0){}\n\t\tVector2(t a, t b):x(a), y(b){}\n\t\tVector2(const Vector2 &o):x(o.x), y(o.y){}\n\n\t\tVector2& operator+=(Vector2 o){x+=o.x;y+=o.y;return *this;}\n\t\tVector2& operator-=(Vector2 o){x-=o.x;y-=o.y;return *this; }\n\t\tVector2& operator*=(t o){x*=o;y*=o;return *this;}\n\t\tVector2& operator/=(t o){x/=o;y/=o;return *this;}\n\n\t\tVector2 operator+(Vector2 o){return Vector2(*this)+=o;}\n\t\tVector2 operator-(Vector2 o){return Vector2(*this)-=o;}\n\t\tVector2 operator*(t o){return Vector2(*this)*=o;}\n\t\tVector2 operator/(t o){return Vector2(*this)/=o;}\n\n\t\tdouble abs(){\n\t\t\treturn sqrt(x*x+y*y);\n\t\t}\n\n\t\tVector2 normal(){\n\t\t\treturn (*this) / abs();\n\t\t}\n};\n\ntemplate<class t>\ndouble abs(Vector2<t> x){\n\treturn x.abs();\n}\n\ntemplate<class t>\ndouble dot(Vector2<t> x, Vector2<t> y){\n\treturn x.x * y.x + x.y * y.y;\n}\n\ntemplate<class t>\ndouble cross(Vector2<t> x, Vector2<t> y){\n\treturn x.x * y.y - x.y * y.x;\n}\n\ntemplate<class t>\nvoid output(Vector2<t> x){\n\tprintf(\"%lf %lf\\n\", x.x, x.y);\n}\n\nusing vector2 = Vector2<ll>;\n\nvector2 input_vector2(){\n\tdouble x,y;\n\tcin >> x >> y;\n\treturn vector2(x,y);\n}\n\nint main(){\n\tvector2 p0;\n\tvector2 p1;\n\tp0 = input_vector2();\n\tp1 = input_vector2();\n\tp1 -= p0;\n\tint q;\n\tcin >> q;\n\trep(i,q){\n\t\tvector2 p2;\n\t\tp2 = input_vector2();\n\t\tp2 -= p0;\n\t\tif(cross(p1,p2)>0){\n\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t}else if(cross(p1,p2)<0){\n\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\t}else if(dot(p1,p2)<0){\n\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t}else if(abs(p2)>abs(p1)){\n\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t}else{\n\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t}\n\t}\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#define SQ(x) ((x)*(x))\ntypedef long long ll;\nstruct Point{\n\tint x,y;\n}pt0, pt1;\nPoint vector(Point p1,Point p2){\n\tPoint res;\n\tres.x = p2.x-p1.x;\n\tres.y = p2.y-p1.y;\n\treturn res;\n}\nint dot(Point p1, Point p2){ return p1.x*p2.x+p1.y*p2.y; }\nint cross(Point p1, Point p2){ return p1.x*p2.y-p1.y*p2.x; }\nll lengthSQ(Point vec){ return SQ(ll(vec.x))+SQ(ll(vec.y)); }\nvoid solve(Point pt2){\n\tconst Point vec1 = vector(pt0, pt1);\n\tconst ll vec1Len2 = lengthSQ(vec1);\n\tPoint vec2 = vector(pt0, pt2);\n\tint cro = cross(vec1, vec2);\n\tif(cro>0) printf(\"COUNTER_CLOCKWISE\\n\");// a×b>0，则b在a的逆时针方向\n\telse if(cro<0) printf(\"CLOCKWISE\\n\");// a×b<0，则b在a的顺时针方向\n\telse if(dot(vec1, vec2)<0) printf(\"ONLINE_BACK\\n\");// a×b=0, a·b<0，则a、b方向相反\n\telse if(lengthSQ(vec2)>vec1Len2) printf(\"ONLINE_FRONT\\n\");\n\telse printf(\"ON_SEGMENT\\n\");\n}\nint main(){\n\tPoint temp;\n\tint x, y, q;\n\tscanf(\"%d%d%d%d%d\", &pt0.x, &pt0.y, &pt1.x, &pt1.y, &q);\n\twhile(q--){\n\t\tscanf(\"%d%d\", &temp.x, &temp.y);\n\t\tsolve(temp);\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<cmath>\n#include<algorithm>\n\nusing namespace std;\n\nint main()\n{\n\tdouble p1x, p1y, p2x, p2y, p0x, p0y;\n\tint q;\n\n\tscanf(\"%lf %lf %lf %lf\", &p0x, &p0y, &p1x, &p1y);\n\n\tpair<double, double> v01 = { p1x - p0x, p1y - p0y };\n\n\n\tscanf(\"%d\", &q);\n\n\tfor (int i = 0; i < q; i++)\n\t{\n\t\tscanf(\"%lf %lf\", &p2x, &p2y);\n\n\t\tif ((p2x == p0x && p2y == p0y) || (p2x == p1x && p2y == p1y)){\n\t\t\tprintf(\"ON_SEGMENT\\n\");\n\n\t\t\tcontinue;\n\t\t}\n\n\t\tpair<double, double> v02 = { p2x - p0x, p2y - p0y };\n\n\t\tif (v01.first*v02.second == v01.second*v02.first)\n\t\t{\n\t\t\tif (v01.first*v02.first < 0)\n\t\t\t{\n\t\t\t\tprintf(\"ONLINE_BACK\\n\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tabs(v01.first) < abs(v02.first) ? printf(\"ONLINE_FRONT\\n\") : printf(\"ON_SEGMENT\\n\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t\tdouble sin = (v01.first*v02.second - v01.second*v02.first);\n\n\t\tif (sin > 0){\n\t\t\tprintf(\"COUNTER_CLOCKWISE\\n\");\n\n\t\t\tcontinue;\n\t\t}\n\t\telse{\n\t\t\tprintf(\"CLOCKWISE\\n\");\n\n\t\t\tcontinue;\n\t\t}\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define FOR(i,a,b) for(int i=(a);i<(b);++i)\n#define rep(i,n)   FOR(i,0,n)\n#define pb emplace_back\n#define mp make_pair\ntypedef long long ll;\ntypedef pair<int,int> pint;\n\n#define eps (1e-10)\nstruct Point{\n    double x,y;\n    Point(){}\n    Point(double x,double y):x(x),y(y){}\n    Point operator+(Point p) {return Point(x+p.x,y+p.y);}\n    Point operator-(Point p) {return Point(x-p.x,y-p.y);}\n    Point operator*(double k){return Point(x*k,y*k);}\n    double norm(){return x*x+y*y;}\n    double abs(){return sqrt(norm());}\n    bool operator == (const Point &p) const{\n    return fabs(x-p.x)<eps && fabs(y-p.y)<eps;\n  }\n  double dot(Point p){return x*p.x+y*p.y;}\n  double det(Point p){return x*p.y-y*p.x;}\n};\nstruct Line{\n  Point p1,p2;\n  Line(){}\n  Line(Point p1, Point p2):p1(p1),p2(p2){}\n};\nint ccw(Point a,Point b,Point c){\n  Point t1=b-a,t2=c-a;\n  if(t1.det(t2)> eps) return 1;//counter clockwise\n  if(t1.det(t2)< -eps) return -1;//clockwise\n  if(t1.dot(t2)< -eps) return 2;//c-a-b online\n  if(t1.norm()<t2.norm()) return -2;//a-b-c online\n  return 0;//a-c-b online\n}\nbool intersectSS(Point a,Point b,Point c,Point d){\n  return (ccw(a,b,c)*ccw(a,b,d)<=0&&ccw(c,d,a)*ccw(c,d,b)<=0);\n}\nbool intersectSS(Line l1,Line l2){\n  return intersectSS(l1.p1,l1.p2,l2.p1,l2.p2);\n}\nbool isOrthogonal(Point a,Point b){\n  return fabs(a.dot(b))<eps;\n}\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n  return isOrthogonal(a1-a2,b1-b2);\n}\nbool isParallel(Point a,Point b){\n  return fabs(a.det(b))<eps;\n}\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n  return isParallel(a1-a2,b1-b2);\n}\nPoint CrossPoint(Line l1,Line l2){\n    double a=(l1.p2-l1.p1).det(l2.p2-l2.p1);\n    double b=(l1.p2-l1.p1).det(l1.p2-l2.p1);\n    if(fabs(a)<eps&&fabs(b)<eps) return l2.p1;\n    return l2.p1+(l2.p2-l2.p1)*(b/a);\n}\nPoint project(Line l,Point p){\n  Point base=l.p2-l.p1;\n  double r=(p-l.p1).dot(base)/base.norm();\n  return l.p1+base*r;\n}\nPoint reflect(Line l,Point p){\n  return p+(project(l,p)-p)*2.0;\n}\nint main(){\n    int q;\n    double xp0,yp0,xp1,yp1,xp2,yp2;\n    cin>>xp0>>yp0>>xp1>>yp1;\n    Point p0(xp0,yp0),p1(xp1,yp1);\n    cin>>q;\n    while(q--){\n        cin>>xp2>>yp2;\n        Point p2(xp2,yp2);\n        int a=ccw(p0,p1,p2);\n        string ans;\n        if(a==-1) ans+=\"CLOCKWISE\";\n        else if(a==1) ans+=\"COUNTER_CLOCKWISE\";\n        else if(a==2) ans+=\"ONLINE_BACK\";\n        else if(a==-2) ans+=\"ONLINE_FRONT\";\n        else if(a==0) ans+=\"ON_SEGMENT\";\n        cout<<ans<<endl;\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<vector>\n#include<algorithm>\n#include<utility>\n#include<numeric>\n#include<iostream>\n#include<array>\n#include<string>\n#include<sstream>\n#include<stack>\n#include<queue>\n#include<list>\n#include<functional>\n#define _USE_MATH_DEFINES\n\n#include<math.h>\n#include<map>\n\n#define INF 200000000\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef pair<ll, ll> pll;\ntypedef pair<ll, int> pli;\n\nint main()\n{\n\tcin.tie(0);\n\tios::sync_with_stdio(false);\n\n\tdouble x1, x2, y1, y2, x3, y3;\n\tcin >> x1 >> y1 >> x2 >> y2;\n\n\tx3 = (x2 - x1);\n\ty3 = (y2 - y1);\n\n\tint q;\n\tcin >> q;\n\n\tfor (int i = 0; i < q; i++)\n\t{\n\t\tdouble px, py, px2, py2;\n\t\tcin >> px >> py;\n\n\t\tpx2 = (px - x1);\n\t\tpy2 = (py - y1);\n\n\t\tif ((px2*px2 + py2*py2) <= 0.0000001||abs((px2*px2 + py2*py2)-(x3*x3 + y3*y3))<=0.0000001)\n\t\t{\n\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t\tcontinue;\n\t\t}\n\n\t\tdouble cross = (py2*x3 - px2*y3);\n\t\tif (abs(cross) <= 0.00000000001)\n\t\t{\n\t\t\tif ((px2*x3 + py2*y3)>0)\n\t\t\t{\n\t\t\t\tif ((x3*x3 + y3*y3) < (px2*px2 + py2*py2))\n\t\t\t\t{\n\t\t\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (cross > 0)\n\t\t\t{\n\t\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <utility>\n#include <vector>\n#include <complex>\n#include <cmath>\n\nusing namespace std;\n\nstatic const double EPS=1e-12;\nstatic const double INF=1e24;\n\nusing Point=complex<double>;\nusing Plane=vector<Point>;\n\nbool operator<(const Point &a, const Point &b) {\n    return real(a)!=real(b)? real(a)<real(b) : imag(a)<imag(b);\n}\n\ndouble cross_prod(const Point &a, const Point &b) {\n    return imag(conj(a)*b);\n}\n\ndouble dot_prod(const Point &a, const Point &b) {\n    return real(conj(a)*b);\n}\n\nstruct Line: public vector<Point> {\n    Line() {}\n    Line(const Point &a, const Point &b) {\n        push_back(a);\n        push_back(b);\n    }\n};\n\nstruct Circle {\n    Point p;\n    double r;\n    Circle() {}\n    Circle(const Point &p, const double r): p(p), r(r) {}\n};\n\nint ccwise(Point a, Point b, Point c) {\n    b -= a; c -= a;\n\n    if (cross_prod(b, c) > 0) {\n        // conter clockwise\n        return 1;\n    } else if (cross_prod(b, c) < 0) {\n        // clockwise\n        return -1;\n    } else if (dot_prod(b, c) < 0) {\n        // online back\n        return 2;\n    } else if (norm(b) < norm(c)) {\n        // online front\n        return -2;\n    } else {\n        // on segment\n        return 0;\n    }\n}\n\nint main() {\n    double x, y;\n    scanf(\"%lf %lf\", &x, &y);\n    Point p0(x, y);\n\n    scanf(\"%lf %lf\", &x, &y);\n    Point p1(x, y);\n\n    size_t q;\n    scanf(\"%zu\", &q);\n    for (size_t i=0; i<q; ++i) {\n        double x, y;\n        scanf(\"%lf %lf\", &x, &y);\n        Point p2(x, y);\n\n        int state=ccwise(p0, p1, p2);\n        if (state == -2) {\n            printf(\"ONLINE_FRONT\\n\");\n        } else if (state == -1) {\n            printf(\"CLOCKWISE\\n\");\n        } else if (state == 0) {\n            printf(\"ON_SEGMENT\\n\");\n        } else if (state == 1) {\n            printf(\"COUNTER_CLOCKWISE\\n\");\n        } else if (state == 2) {\n            printf(\"ONLINE_BACK\\n\");\n        }\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#include <cmath>\n\nusing namespace std;\ntypedef long long ll;\n//typedef unsigned long long ll;\n\n#define rep(i, n) for (int i = 0; i < (n); ++i)\n//#define rep(i, n) for (ll i = 0; i < (n); ++i)\n//#define sz(x) ll(x.size())\n//typedef pair<ll, int> P;\ntypedef pair<ll, ll> P;\n//const double INF = 1e10;\nconst ll INF = LONG_LONG_MAX / 100;\n//const ll INF = (1ll << 31) - 1;\n//const ll INF = 1e15;\nconst ll MINF = LONG_LONG_MIN;\n//const int INF = INT_MAX / 10;\n#define cmin(x, y) x = min(x, y)\n#define cmax(x, y) x = max(x, y)\n//typedef pair<int, int> P;\n//typedef pair<double, double> P;\n\nbool contain(set<P> &s, P a) { return s.find(a) != s.end(); }\n\n//ifstream myfile(\"C:\\\\Users\\\\riku\\\\Downloads\\\\0_00.txt\");\n//ofstream outfile(\"log.txt\");\n//outfile << setw(6) << setfill('0') << prefecture << setw(6) << setfill('0') << rank << endl;\n// std::cout << std::bitset<8>(9);\nconst int mod = 1000000007;\ntypedef priority_queue<long long, vector<long long>, greater<long long>> PQ_ASK;\n\n\nvoid print_line(vector<string> &line) {\n    if (line.size() == 0ll) {\n        cout << endl;\n        return;\n    }\n    for (ll i = 0; i < line.size(); i++) {\n        cout << line[i];\n        if (i == line.size() - 1) cout << endl;\n        else cout << ' ';\n    }\n}\n\n#define EPS 1e-7\nconst double PI = 3.14159265358979323846;\n\nbool equal(double f1, double f2) {\n    return abs(f1 - f2) < EPS;\n}\n\nstruct Vec {\n\n    double x, y;\n\n    double size() {\n        return sqrt(x * x + y * y);\n    }\n\n    double inner_product(Vec v2) {\n        return x * v2.x + y * v2.y;\n    }\n\n    Vec product(double rate) {\n        Vec v2;\n        v2.x = x * rate;\n        v2.y = y * rate;\n        return v2;\n    }\n};\n\n\nstruct Point {\n    double x, y;\n\n    Point plus(Vec vec) {\n        Point p;\n        p.x = x + vec.x;\n        p.y = y + vec.y;\n        return p;\n    }\n\n    Point minus(Point sub) {\n        Point p;\n        p.x = x - sub.x;\n        p.y = y - sub.y;\n        return p;\n    }\n\n\n    friend istream &operator>>(istream &is, Point &f) {\n        cin >> f.x >> f.y;\n        return is;\n    }\n\n    friend ostream &operator<<(std::ostream &os, Point const &f) {\n        printf(\"%.20f %.20f\\n\", f.x, f.y);\n        return os;\n    }\n};\n\nstruct Line {\n    Point start, end;\n\n    Vec to_vec() {\n        Vec vec;\n        vec.x = end.x - start.x;\n        vec.y = end.y - start.y;\n        return vec;\n    }\n\n    friend istream &operator>>(istream &is, Line &f) {\n        cin >> f.start >> f.end;\n        return is;\n    }\n\n    Line normalize() {\n        Line l;\n        l.start = {0, 0};\n        l.end = end.minus(start);\n        return l;\n    }\n\n    double atan2() {\n        Line l = normalize();\n        return std::atan2(l.end.y, l.end.x);\n    }\n\n    double rad(Line line) {\n        double f1 = atan2(),\n                f2 = line.atan2();\n\n        double diff = f1 - f2;\n\n        if (diff < -PI) {\n            diff += (PI * 2);\n        }\n        if (diff > PI) {\n            diff -= (2 * PI);\n        }\n        return diff;\n    }\n\n    void clock_wise(Line line) {\n\n        double diff = rad(line);\n\n        if (equal(line.to_vec().size(), 0)) {\n            cout << \"ON_SEGMENT\" << endl;\n            return;\n        }\n\n        if (equal(diff, 0)) {\n            double s1 = to_vec().size();\n            double s2 = line.to_vec().size();\n\n            if (s1 > s2 || equal(s1, s2)) {\n                cout << \"ON_SEGMENT\" << endl;\n            } else {\n                cout << \"ONLINE_FRONT\" << endl;\n            }\n        } else if (equal(abs(diff), PI)) {\n            cout << \"ONLINE_BACK\" << endl;\n        } else if (diff < 0) {\n            cout << \"COUNTER_CLOCKWISE\" << endl;\n        } else {\n            cout << \"CLOCKWISE\" << endl;\n        }\n    }\n\n};\n\n\nint main() {\n    Line line;\n    cin >> line;\n\n    int q;\n    cin >> q;\n    rep(i, q) {\n\n        Line line2;\n        line2.start = line.start;\n        cin >> line2.end;\n\n        line.clock_wise(line2);\n\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#pragma GCC optimize(\"Ofast\", \"unroll-loops\")\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define ld long double\n\n/* 幾何ライブラリ */\n\nconst ld PI = 3.14159265358979323846L;\n\n// 2次元座標, 2次元ベクトル\nusing pos = pair<ld, ld>;\n\n// 加算\npos add(pos p1, pos p2) {\n\treturn { p1.first + p2.first, p1.second + p2.second };\n}\n// 減算\npos sub(pos p1, pos p2) {\n\treturn { p1.first - p2.first, p1.second - p2.second };\n}\n// 内積\nld inner_product(pos p1, pos p2) {\n\treturn p1.first * p2.first + p1.second * p2.second;\n}\n// 定数倍\npos mul(ld c, pos p) {\n\treturn { c * p.first, c * p.second };\n}\n\n// ノルムの2乗\nld norm2(pos p) {\n\treturn p.first * p.first + p.second * p.second;\n}\n// ノルム\nld norm(pos p) {\n\treturn sqrt(norm2(p));\n}\n\n// 射影\n// pをp1, p2を通る直線に射影する\n// 検証済み(https://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/all/CGL_1_A)\npos projection(pos p1, pos p2, pos p) {\n\tpos q = sub(p2, p1);\n\tpos tmp = mul(inner_product(q, sub(p, p1)) / norm2(q), q);\n\treturn add(p1, tmp);\n}\n\n// 反射\n// pをp1, p2を通る直線に関して対称移動する\n// 検証済み(https://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/all/CGL_1_B)\npos reflection(pos p1, pos p2, pos p) {\n\tpos tmp = projection(p1, p2, p);\n\treturn add(p, mul(2.0, sub(tmp, p)));\n}\n\n// 位置関係\n// p0を基準に、p1, p2の位置関係を求める\n// p2が\n//\tp1から反時計回り方向 : COUNTER_CLOCKWISE\n//\tp1から時計回り方向 : CLOCKWISE\n//\tp1と反対方向(p2, p0, p1がこの順に同一直線上) : ONLINE_BACK\n//\tp1の延長線上(p0, p1, p2がこの順に同一直線上) : ONLINE_FRONT\n//\tp1の途中(線分p0p1の上) : ON_SEGMENT\nstring positional_relation(pos p0, pos p1, pos p2) {\n\tconst ld e = 1e-10; // 許容誤差\n\tpos v1 = sub(p1, p0), v2 = sub(p2, p0);\n\tif (abs(v2.first) < e && abs(v2.second) < e) return \"ON_SEGMENT\";\n\tld r1 = atan2l(v1.second, v1.first), r2 = atan2l(v2.second, v2.first);\n\tif (abs(r1 - r2) < e || (abs(r1 - r2) > PI - e && abs(r1 - r2) < PI + e)) { // ONLINE\n\t\tif (v1.first * v2.first < 0 || v1.second * v2.second < 0)\n\t\t\treturn \"ONLINE_BACK\";\n\t\tif (abs(v1.first) < abs(v2.first) || abs(v1.second) < abs(v2.second))\n\t\t\treturn \"ONLINE_FRONT\";\n\t\treturn \"ON_SEGMENT\";\n\t}\n\t// NOT ONLINE\n\tif (r2 - r1 + (r2 - r1 < 0 ? 2 * PI : 0) < PI)\n\t\treturn \"COUNTER_CLOCKWISE\";\n\treturn \"CLOCKWISE\";\n}\n\n\nint main() {\n\tcout << setprecision(15);\n\tpos p0, p1;\n\tcin >> p0.first >> p0.second >> p1.first >> p1.second;\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tpos p2; cin >> p2.first >> p2.second;\n\t\tcout << positional_relation(p0, p1, p2) << endl;\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint main() {\n\tcin.tie(0); ios::sync_with_stdio(false);\n\tint x0, y0, x1, y1; cin >> x0 >> y0 >> x1 >> y1;\n\tint X1 = x1 - x0, Y1 = y1 - y0;\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tint x2, y2; cin >> x2 >> y2;\n\t\tint X2 = x2 - x0, Y2 = y2 - y0;\n\t\tlong long cross = X1*Y2 - Y1*X2;\n\t\tif (cross > 0) { cout << \"COUNTER_CLOCKWISE\" << endl; continue; }\n\t\tif (cross < 0) { cout << \"CLOCKWISE\" << endl; continue; }\n\t\t//??????????????§cross == 0 ?????????????¢????\n\t\tlong long dot = X1*X2 + Y1*Y2;\n\t\tif (dot < 0) { cout << \"ONLINE_BACK\" << endl; continue; }\n\t\tlong double dis1 = X1*X1/hypot(X1,Y1) + Y1*Y1/hypot(X1,Y1), dis2 = X2*X2/hypot(X2,Y2) + Y2*Y2/hypot(X2,Y2);\n\t\tcout << \"norm1 = \" << dis1 << \" norm2 = \" << dis2 << endl;\n\t\tif (dis1 < dis2) { cout << \"ONLINE_FRONT\" << endl; continue; }\n\t\tcout << \"ON_SEGMENT\" << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<cmath>\n\nstruct Point{\n\tlong long X,Y;\n\tinline void read(){scanf(\"%lld%lld\",&X,&Y);}\n\tinline long long plength(){return X*X+Y*Y;}\n\tPoint(){X=Y=0;}\n\tPoint(long long X_,long long Y_){X=X_,Y=Y_;}\n};\nstruct Line{\n\tPoint A,B;\n\tinline void read(){A.read(),B.read();}\n\tLine(){}\n\tLine(const Point &A_,const Point &B_){A=A_,B=B_;}\n};\ntypedef Point Vector;\ninline Vector operator - (const Point &A,const Point &B){return Vector(A.X-B.X,A.Y-B.Y);}\ninline long long operator ^ (const Point &A,const Point &B){return A.X*B.X+A.Y*B.Y;}\ninline long long operator * (const Point &A,const Point &B){return A.X*B.Y-A.Y*B.X;}\ninline Point operator + (const Point &A,const Vector &B){return Point(A.X+B.X,A.Y+B.Y);}\ninline Vector operator * (const Vector &A,long long k){return Vector(A.X*k,A.Y*k);}\n\nint Q;\n\ninline long long sqr(long long k){return k*k;}\n\nPoint Projection(const Line &L,const Point &P){\n\tlong long len=((P-L.A)^(L.B-L.A))/(L.B-L.A).plength();\n\treturn L.A*(1-len)+L.B*len;\n}\n\nPoint Reflection(const Line &L,const Point &P){\n\tPoint projection=Projection(L,P);\n\treturn projection+(projection-P);\n}\n\nint CCW(const Point &P0,const Point &P1,const Point &P2){\n\tlong long cro=(P1-P0)*(P2-P0);\n\tif (cro) return cro>0?0:1;\n\tlong long dot=(P1-P0)^(P2-P0);\n\tif (dot<0) return 2;\n\telse return (P1-P0).plength()<(P2-P0).plength()?3:4;\n}\n\nPoint P0,P1,P2;\n\nconst char result[5][20]={\"COUNTER_CLOCKWISE\",\"CLOCKWISE\",\"ONLINE_BACK\",\"ONLINE_FRONT\",\"ON_SEGMENT\"};\n\nint main(){\n\tP0.read(),P1.read();\n\tscanf(\"%d\",&Q);\n\twhile (Q--){\n\t\tP2.read();\n\t\tputs(result[CCW(P0,P1,P2)]);\n\t}\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\n\nusing namespace std;\n\nstatic const int CONTOUR_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a)-(b)) < EPS)\n\nclass Point{\npublic:\n\tdouble x, y;\n\tPoint(double _x = 0, double _y = 0) :x(_x), y(_y){};\n\n\tPoint operator+(const Point &p){ return Point(x + p.x, y + p.y); }\n\tPoint operator-(const Point &p){ return Point(x - p.x, y - p.y); }\n\tPoint operator*(const Point &p){ return Point(x * p.x, y * p.y); }\n\tPoint operator*(double k){ return Point(x * k, y * k); }\n\tPoint operator/(const Point &p){ return Point(x / p.x, y / p.y); }\n\n\tdouble norm() { return x*x + y*y; }\n\tdouble abs() { return sqrt(norm()); }\n\n\tbool operator<(const Point &p) const{\n\t\treturn (x != p.x) ? x < (p.x) : (y < p.y);\n\t}\n\n\tbool operator==(const Point &p){\n\t\treturn equals(x, p.x) && equals(y, p.y);\n\t}\n};\n\ntypedef Point Vector;\nstruct Segment{\n\tPoint p1, p2;\n};\n\ndouble dot(Vector a, Vector b){\n\tdouble res = a.x*b.x + a.y*b.y;\n\treturn res;\n}\n\ndouble cross(Vector a, Vector b){\n\tdouble res = a.x*b.y - a.y*b.x;\n\treturn res;\n}\n\nbool isOrthogonal(Vector a, Vector b){\n\treturn equals(dot(a, b), 0.0);\n}\n\nbool isParallel(Vector a, Vector b){\n\treturn equals(cross(a, b), 0.0);\n}\n\nPoint project(Segment s, Point p){\n\tVector base = s.p2 - s.p1;\n\tVector v = p - s.p1;\n\tdouble l = dot(v, base) / base.norm();\n\treturn s.p1 + base * l;\n}\n\nint ccw(Point p0, Point p1, Point p2){\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\n\tif (cross(a, b) < 0) return CLOCKWISE;\n\tif (cross(a, b) > 0) return CONTOUR_CLOCKWISE;\n\tif (dot(a, b) < 0) return ONLINE_BACK;\n\tif (a.norm() > b.norm()) return ON_SEGMENT;\n\treturn ONLINE_FRONT;\n}\n\n\nint main(){\n\tPoint p0, p1, p2;\n\tcin >> p0.x >> p0.y >> p1.x >> p1.y;\n\tint n; cin >> n;\n\tfor (int i = 0; i < n; ++i){\n\t\tcin >> p2.x >> p2.y;\n\t\tint res = ccw(p0, p1, p2);\n\t\tswitch (res)\n\t\t{\n\t\tcase CLOCKWISE:\n\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\t\tbreak;\n\t\tcase CONTOUR_CLOCKWISE:\n\t\t\tcout << \"CONTOUR_CLOCKWISE\" << endl;\n\t\t\tbreak;\n\t\tcase ONLINE_FRONT:\n\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t\tbreak;\n\t\tcase ONLINE_BACK:\n\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t\tbreak;\n\t\tcase ON_SEGMENT:\n\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define TemplateVersion \"3.4.0\"\n// Useful Marcos\n//====================START=====================\n// Compile use C++11 and above\n#ifdef LOCAL\n#define debug(args...)                           \\\n    {                                            \\\n        string _s = #args;                       \\\n        replace(_s.begin(), _s.end(), ',', ' '); \\\n        stringstream _ss(_s);                    \\\n        istream_iterator<string> _it(_ss);       \\\n        err(_it, args);                          \\\n    }\nvoid err(istream_iterator<string> it)\n{\n}\ntemplate <typename T, typename... Args>\nvoid err(istream_iterator<string> it, T a, Args... args)\n{\n    cerr << *it << \" = \" << a << endl;\n    err(++it, args...);\n}\n#define MSG cout << \"Finished\" << endl\n#else\n#define debug(args...)\n#define MSG\n#endif\n#if __cplusplus >= 201703L\ntemplate <typename... Args>\nvoid readln(Args &... args)\n{\n    ((cin >> args), ...);\n}\ntemplate <typename... Args>\nvoid writeln(Args... args)\n{\n    ((cout << args << \" \"), ...);\n    cout << endl;\n}\n#elif __cplusplus >= 201103L\nvoid readln()\n{\n}\ntemplate <typename T, typename... Args>\nvoid readln(T &a, Args &... args)\n{\n    cin >> a;\n    readln(args...);\n}\nvoid writeln()\n{\n    cout << endl;\n}\ntemplate <typename T, typename... Args>\nvoid writeln(T a, Args... args)\n{\n    cout << a << \" \";\n    writeln(args...);\n}\n#endif\n#if __cplusplus >= 201103L\n#define FOR(_i, _begin, _end) for (auto _i = _begin; _i < _end; _i++)\n#define FORR(_i, _begin, _end) for (auto _i = _begin; _i > _end; _i--)\n#else\n#define FOR(_i, _begin, _end) for (int _i = (int)_begin; _i < (int)_end; _i++)\n#define FORR(_i, _begin, _end) for (int _i = (int)_begin; _i > (int)_end; _i--)\n#define nullptr NULL\n#endif\n#if __cplusplus >= 201103L\n#define VIS(_kind, _name, _size) \\\n    vector<_kind> _name(_size);  \\\n    for (auto &i : _name)        \\\n        cin >> i;\n#else\n#define VIS(_kind, _name, _size)    \\\n    vector<_kind> _name;            \\\n    _name.resize(_size);            \\\n    for (int i = 0; i < _size; i++) \\\n        cin >> _name[i];\n#endif\n// alias\n#define mp make_pair\n#define pb push_back\n#define eb emplace_back\n#define all(x) (x).begin(), (x).end()\n#define tcase() \\\n    int T;      \\\n    cin >> T;   \\\n    FOR(kase, 1, T + 1)\n// Swap max/min\ntemplate <typename T>\nbool smax(T &a, const T &b)\n{\n    if (a > b)\n        return false;\n    a = b;\n    return true;\n}\ntemplate <typename T>\nbool smin(T &a, const T &b)\n{\n    if (a < b)\n        return false;\n    a = b;\n    return true;\n}\n// ceil divide\ntemplate <typename T>\nT cd(T a, T b)\n{\n    return (a + b - 1) / b;\n}\n// min exchange\ntemplate <typename T>\nbool se(T &a, T &b)\n{\n    if (a < b)\n        return false;\n    swap(a, b);\n    return true;\n}\n// A better MAX choice\nconst int INF = 0x3f3f3f3f;\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int, int> pii;\ntypedef vector<int> vi;\ntypedef vector<ll> vll;\ntypedef set<int> si;\ntypedef vector<string> cb;\n//====================END=====================\n\n// Constants here\nconst double EPS = 1e-8;\nconst double PI = acos(-1);\nconst double FAC = 1e-18;\n\ntypedef double db;\n\nint sgn(db x)\n{\n    if (abs(x) < EPS)\n        return 0;\n    if (x < 0)\n        return -1;\n    return 1;\n}\n\ninline db sqr(db x) { return x * x; }\n\n// Point/Vector\nstruct Point\n{\n    db x, y;\n\n    Point() : x(0.0), y(0.0) {}\n\n    Point(db _x, db _y) : x(_x), y(_y) {}\n\n    bool operator==(const Point &p)\n    {\n        return sgn(x - p.x) == 0 && sgn(y - p.y) == 0;\n    }\n\n    bool operator<(const Point &p)\n    {\n        int c = sgn(x - p.x);\n        if (c)\n            return c == -1;\n        return sgn(y - p.y) == -1;\n    }\n\n    Point operator+(const Point &p) { return Point(x + p.x, y + p.y); }\n    Point operator-(const Point &p) { return Point(x - p.x, y - p.y); }\n    Point operator*(db d) { return Point(x * d, y * d); }\n    Point operator/(db d) { return Point(x / d, y / d); }\n\n    db operator^(const Point &p) { return x * p.y - y * p.x; }\n    db operator*(const Point &p) { return x * p.x + y * p.y; }\n\n    db dis(const Point &p) { return (*this - p).len(); }\n    db alpha() { return atan2(y, x); }\n\n    Point unit() { return *this / len(); }\n    Point scale(db r) { return unit() * r; }\n\n    Point rotCC() { return Point(-y, x); }\n    Point rotCL() { return Point(y, -x); }\n\n    Point rot(Point p, db angle)\n    {\n        Point v = *this - p;\n        db c = cos(angle), s = sin(angle);\n        return Point(p.x + v.x * c - v.y * s, p.y + v.x * s + v.y * c);\n    }\n\n    db len() { return hypot(x, y); }\n    db len2() { return x * x + y * y; }\n\n    db rad(Point a, Point b)\n    {\n        Point ap = a - *this, bp = b - *this;\n        return abs(atan2(abs(ap ^ bp), ap * bp));\n    }\n\n    // Point P,A,B\n    // -2 -> B is at back of PA\n    // -1 -> PB is on the clock-wise side of PA\n    // 0 -> B is on PA\n    // 1 -> PB is on the counter clock-wise side of PA\n    // 2 -> B is at the front of PA\n    int relation(Point a, Point b)\n    {\n        Point p = *this;\n        if (sgn((a - p) ^ (b - p)) > 0)\n            return 1;\n        if (sgn((a - p) ^ (b - p)) < 0)\n            return -1;\n        if (sgn((a - p) * (b - p)) < 0)\n            return -2;\n        if (sgn((p - a) * (b - a)) < 0)\n            return 2;\n        return 0;\n    }\n\n    void read() { cin >> x >> y; }\n    void write(char trail = ' ') { cout << x << ' ' << y << trail; }\n    void Debug() { cerr << \"Point: (\" << x << \", \" << y << \")\\n\"; }\n};\n\n// Line\nstruct Line\n{\n    Point s, e;\n\n    Line(){};\n\n    Line(Point _s, Point _e) : s(_s), e(_e) {}\n\n    Line(Point p, db angle)\n    {\n        s = p;\n        if (sgn(angle - PI / 2))\n            e = (s + Point(1, tan(angle)));\n        else\n            e = (s + Point(0, 1));\n    }\n\n    //ax+by+c=0\n    Line(db a, db b, db c)\n    {\n        if (sgn(a) == 0)\n        {\n            s = Point(0, -c / b);\n            e = Point(1, -c / b);\n        }\n        else if (sgn(b) == 0)\n        {\n            s = Point(-c / a, 0);\n            e = Point(-c / a, 1);\n        }\n        else\n        {\n            s = Point(0, -c / b);\n            e = Point(1, -(c + a) / b);\n        }\n    }\n\n    db len() { return s.dis(e); }\n    db angle()\n    {\n        db ans = atan2(e.y - s.y, e.x - s.x);\n        if (sgn(ans) == -1)\n            ans += PI;\n        if (sgn(ans - PI) == 0)\n            ans -= PI;\n        return ans;\n    }\n\n    int relation(Point p)\n    {\n        return s.relation(p, e);\n    }\n\n    bool parallel(Line l) { return sgn((e - s) ^ (l.e - l.s)) == 0; }\n\n    // 0 -> Not Intersect\n    // 1 -> Informal\n    // 2 -> Formal Intersection\n    int crossSS(Line l)\n    {\n        int d1 = sgn((e - s) ^ (l.s - s));\n        int d2 = sgn((e - s) ^ (l.e - s));\n        int d3 = sgn((l.e - l.s) ^ (s - l.s));\n        int d4 = sgn((l.e - l.s) ^ (e - l.s));\n        if ((d1 ^ d2) == -2 && (d3 ^ d4) == -2)\n            return 2;\n        return (d1 == 0 && sgn((l.s - s) * (l.s - e)) <= 0) ||\n               (d2 == 0 && sgn((l.e - s) * (l.e - e)) <= 0) ||\n               (d3 == 0 && sgn((s - l.s) * (s - l.e)) <= 0) ||\n               (d4 == 0 && sgn((e - l.s) * (e - l.e)) <= 0);\n    }\n\n    // 0 -> Not Intersect\n    // 1 -> Informal\n    // 2 -> Formal Intersection\n    int crossLS(Line l)\n    {\n        int d1 = sgn((e - s) ^ (l.s - s));\n        int d2 = sgn((e - s) ^ (l.e - s));\n        if ((d1 ^ d2) == -2)\n            return 2;\n        return (d1 == 0 || d2 == 0);\n    }\n\n    // 0 -> Parallel\n    // 1 -> Same\n    // 2 -> Intersect\n    int crossLL(Line l)\n    {\n        if (this->parallel(l))\n            return l.relation(s) == 3;\n        return 2;\n    }\n\n    Point intersec(Line l)\n    {\n        db a1 = (l.e - l.s) ^ (s - l.s);\n        db a2 = (l.e - l.s) ^ (e - l.s);\n        return Point((s.x * a2 - e.x * a1) / (a2 - a1), (s.y * a2 - e.y * a1) / (a2 - a1));\n    }\n\n    db disPL(Point p) { return abs((p - s) ^ (e - s)) / len(); }\n    db disPS(Point p)\n    {\n        if (sgn((p - s) * (e - s)) < 0 || sgn((p - e) * (s - e)) < 0)\n            return min(p.dis(s), p.dis(e));\n        return disPL(p);\n    }\n    db disSS(Line l) { return min(min(disPS(l.s), disPS(l.e)), min(l.disPS(s), l.disPS(e))); }\n\n    Point proj(Point p) { return s + ((e - s) * ((e - s) * (p - s))) / ((e - s).len2()); }\n    Point refl(Point p)\n    {\n        Point q = proj(p);\n        return Point(2 * q.x - p.x, 2 * q.y - p.y);\n    }\n\n    bool operator==(Line l) { return s == l.s && e == l.e; }\n\n    void adjust()\n    {\n        if (e < s)\n            swap(s, e);\n    }\n\n    void read()\n    {\n        s.read();\n        e.read();\n    }\n\n    void Debug() { cerr << \"Line: Start: (\" << s.x << \", \" << s.y << \") End: (\" << e.x << \", \" << e.y << \")\\n\"; }\n};\n\n// Polygon\nstruct Polygon\n{\n    // Functor for sorting by polar angle\n    struct cmp\n    {\n        Point p;\n        cmp(const Point &b) { p = b; }\n        bool operator()(const Point &a, const Point &b)\n        {\n            Point x = a, y = b;\n            int d = sgn((x - p) ^ (y - p));\n            if (!d)\n                return sgn(x.dis(p) - y.dis(p)) > 0;\n            return d > 0;\n        }\n    };\n\n    vector<Point> ps;\n    vector<Line> ls;\n\n    Polygon() {}\n\n    void add(Point p) { ps.push_back(p); }\n\n    int size() { return static_cast<int>(ps.size()); }\n\n    void getLines()\n    {\n        int s = size();\n        for (int i = 0; i < s; i++)\n            ls.push_back(Line(ps[i], ps[(i + 1) % s]));\n    }\n\n    void norm()\n    {\n        Point p = ps[0];\n        for (int i = 1; i < size(); i++)\n        {\n            if (p < ps[i])\n                continue;\n            p = ps[i];\n        }\n        sort(ps.begin(), ps.end(), cmp(p));\n    }\n\n    void getConvexJarvis(Polygon &conv)\n    {\n        sort(ps.begin(), ps.end());\n        conv.ps.resize(2 * size());\n\n        int n = size();\n        for (int i = 0; i < min(2, n); i++)\n            conv.ps[i] = ps[i];\n        if (conv.size() == 2 && (conv.ps[0] == conv.ps[1]))\n            conv.ps.resize(1);\n\n        if (n <= 2)\n            return;\n\n        int top = 1;\n\n        for (int i = 2; i < n; i++)\n        {\n            while (top && sgn((conv.ps[top] - ps[i]) ^ (conv.ps[top - 1] - ps[i])) <= 0)\n                top--;\n            conv.ps[++top] = ps[i];\n        }\n\n        int t = top;\n        conv.ps[++top] = ps[n - 2];\n\n        for (int i = n - 3; i >= 0; i--)\n        {\n            while (top != t && sgn((conv.ps[top] - ps[i]) ^ (conv.ps[top - 1] - ps[i])) <= 0)\n                top--;\n            conv.ps[++top] = ps[i];\n        }\n\n        while (conv.size() > top)\n            conv.ps.pop_back();\n\n        if (top == 2 && (conv.ps[0] == conv.ps[1]))\n            conv.ps.pop_back();\n\n        conv.norm(); // Counter Clock-wise\n    }\n\n    void getConvexWithPointOnLine(Polygon &conv)\n    {\n        int m, n = size();\n        if (n < 3)\n        {\n            for (auto i : ps)\n                conv.add(i);\n            return;\n        }\n\n        vector<Point> &g = conv.ps;\n\n        sort(ps.begin(), ps.end());\n        for (int i = 0; i < n; i++)\n        {\n            while ((m = g.size()) >= 2 && g[m - 2].relation(g[m - 1], ps[i]) <= 0)\n                g.pop_back();\n            g.push_back(ps[i]);\n        }\n\n        int t = g.size();\n\n        for (int i = n - 2; i >= 0; i--)\n        {\n            while ((m = g.size()) > t && g[m - 2].relation(g[m - 1], ps[i]) <= 0)\n                g.pop_back();\n            g.push_back(ps[i]);\n        }\n\n        g.pop_back();\n    }\n\n    // Cannot get the point on the edge\n    void getConvexGraham(Polygon &conv)\n    {\n        norm();\n        int top = 0, n = size();\n        if (n == 1)\n        {\n            conv.add(ps[0]);\n            return;\n        }\n\n        if (n == 2)\n        {\n            conv.add(ps[0]);\n            conv.add(ps[1]);\n            if (conv.ps[0] == conv.ps[1])\n                conv.ps.pop_back();\n            return;\n        }\n\n        conv.ps.resize(size());\n        conv.ps[0] = ps[0];\n        conv.ps[1] = ps[1];\n        top = 2;\n        for (int i = 2; i < n; i++)\n        {\n            while (top > 1 && sgn((conv.ps[top - 1] - conv.ps[top - 2]) ^ (ps[i] - conv.ps[top - 2])) <= 0)\n                top--;\n            conv.ps[top++] = ps[i];\n        }\n\n        while (conv.size() > top)\n            conv.ps.pop_back();\n\n        if (top == 2 && (conv.ps[0] == conv.ps[1]))\n            conv.ps.pop_back();\n    }\n\n    void read(int s)\n    {\n        for (int i = 0; i < s; i++)\n        {\n            Point p;\n            p.read();\n            ps.push_back(p);\n        }\n    }\n\n    void Debug()\n    {\n        cerr << \"Polygon:\\nPoints:\\n\";\n        for (auto i : ps)\n            i.Debug();\n        cerr << \"Lines:\\n\";\n        for (auto i : ls)\n            i.Debug();\n    }\n};\n\n// Circle\nstruct Circle\n{\n    Point p;\n    db r;\n\n    Circle(){};\n\n    Circle(Point _p, db _r) : p(_p), r(_r) {}\n\n    Circle(db x, db y, db _r) : p({x, y}), r(_r) {}\n\n    Circle(Point a, Point b, Point c, bool in = false)\n    {\n        if (!in)\n        {\n            Line u = Line((a + b) / 2, (a + b) / 2 + (b - a).rotCC());\n            Line v = Line((b + c) / 2, (b + c) / 2 + (c - b).rotCC());\n            p = u.intersec(v);\n            r = p.dis(a);\n        }\n        else\n        {\n            Line u, v;\n            db m = atan2(b.y - a.y, b.x - a.x), n = atan2(c.y - a.y, c.x - a.x);\n            u.s = a;\n            u.e = a + Point(cos((n + m) / 2), sin((n + m) / 2));\n            v.s = b;\n            m = atan2(a.y - b.y, a.x - b.x), n = atan2(c.y - b.y, c.x - b.x);\n            v.e = b + Point(cos((n + m) / 2), sin((n + m) / 2));\n            p = u.intersec(v);\n            r = Line(a, b).disPS(p);\n        }\n    }\n\n    bool operator==(const Circle &c) { return p == c.p && sgn(r - c.r) == 0; }\n\n    bool operator<(const Circle &c) { return (p < c.p) || (p == c.p && sgn(r - c.r) < 0); }\n\n    db area() { return PI * r * r; }\n\n    db cir() { return 2 * PI * r; }\n\n    Point on(db ang) { return Point(p.x + r * cos(ang), p.y + r * sin(ang)); }\n\n    // 0 -> Outside\n    // 1 -> On\n    // 2 -> Inside\n    int relationP(Point v)\n    {\n        db dis = v.dis(p);\n        if (sgn(dis - r) < 0)\n            return 2;\n        else if (sgn(dis - r) == 0)\n            return 1;\n        return 0;\n    }\n\n    // The number of intersections\n    int relationS(Line l)\n    {\n        db dis = l.disPS(p);\n        if (sgn(dis - r) < 0)\n            return 2;\n        else if (sgn(dis - r) == 0)\n            return 1;\n        return 0;\n    }\n\n    // The number of intersections\n    int relationL(Line l)\n    {\n        db dis = l.disPL(p);\n        if (sgn(dis - r) < 0)\n            return 2;\n        else if (sgn(dis - r) == 0)\n            return 1;\n        return 0;\n    }\n\n    // 1 -> Inside\n    // 2 -> Internally-tangent\n    // 3 -> Intersect\n    // 4 -> Externally-tangent\n    // 5 -> Disjoint\n    int relationC(Circle c)\n    {\n        db d = p.dis(c.p);\n        if (sgn(d - r - c.r) > 0)\n            return 5;\n        if (sgn(d - r - c.r) == 0)\n            return 4;\n        db l = abs(r - c.r);\n        if (sgn(d - r - c.r) < 0 && sgn(d - l) > 0)\n            return 3;\n        if (sgn(d - l) == 0)\n            return 2;\n        // TODO: Check if this one is necessary\n        // if (sgn(d - l) < 0)\n        return 1;\n    }\n\n    // The return value is the number of intersections\n    int crossC(Circle c, Point &p1, Point &p2)\n    {\n        int re = relationC(c);\n        if (re == 1 || re == 5)\n            return 0;\n        db d = p.dis(c.p), l = (d * d + r * r - c.r * c.r) / (2.0 * d), h = sqrt(r * r - l * l);\n        Point tmp = p + (c.p - p).scale(l);\n        p1 = tmp + (c.p - p).rotCC().scale(h);\n        p2 = tmp + (c.p - p).rotCL().scale(h);\n        if (re == 2 || re == 4)\n            return 1;\n        return 2;\n    }\n\n    // Same as above\n    int crossL(Line l, Point &p1, Point &p2)\n    {\n        if (!this->relationL(l))\n            return 0;\n        Point a = l.proj(p);\n        db d = l.disPL(p);\n        d = sqrt(r * r - d * d);\n        if (sgn(d) == 0)\n        {\n            p1 = a;\n            p2 = a;\n            return 1;\n        }\n        p1 = a + (l.e - l.s).scale(d);\n        p2 = a - (l.e - l.s).scale(d);\n        return 2;\n    }\n\n    int tangent(Point q, Point &u, Point &v)\n    {\n        int x = relationP(q);\n        if (x == 2)\n            return 0;\n        if (x == 1)\n        {\n            u = q + (q - p).rotCC();\n            v = u;\n            return 1;\n        }\n        db d = p.dis(q);\n        db l = r * r / d;\n        db h = sqrt(r * r - l * l);\n        u = p + ((q - p).scale(l) + (q - p).rotCC().scale(h));\n        v = p + ((q - p).scale(l) + (q - p).rotCL().scale(h));\n        return 2;\n    }\n\n    int tangent(Circle c, vector<Point> &u, vector<Point> &v)\n    {\n        if (sgn(r - c.r) < 0)\n            return c.tangent(*this, v, u);\n\n        int ret = relationC(c) - 1;\n        if (!ret || *this == c)\n            return 0;\n        u.clear();\n        v.clear();\n\n        db b = (c.p - p).alpha();\n\n        if (ret == 1 || ret == 3)\n        {\n            u.push_back(on(b));\n            v.push_back(on(b));\n        }\n\n        db ang = acos((r - c.r) / p.dis(c.p));\n\n        if (ret != 1)\n        {\n            u.push_back(on(b + ang));\n            u.push_back(on(b - ang));\n            v.push_back(c.on(b + ang));\n            v.push_back(c.on(b - ang));\n        }\n\n        if (ret == 4)\n        {\n            ang = acos((r + c.r) / p.dis(c.p));\n            u.push_back(on(b + ang));\n            u.push_back(on(b - ang));\n            v.push_back(c.on(PI + b + ang));\n            v.push_back(c.on(PI + b - ang));\n        }\n\n        return ret;\n    }\n\n    // The area of intersecting space\n    // With circle c\n    db area(Circle c)\n    {\n        int re = relationC(c);\n        if (re >= 4)\n            return 0;\n        if (re <= 2)\n            return min(area(), c.area());\n        db d = p.dis(c.p);\n        db hf = (r + c.r + d) / 2.0;\n        db ss = 2 * sqrt(hf * (hf - r) * (hf - c.r) * (hf - d));\n        db a1 = acos((r * r + d * d - c.r * c.r) / (2.0 * r * d));\n        a1 = a1 * r * r;\n        db a2 = acos((c.r * c.r + d * d - r * r) / (2.0 * c.r * d));\n        a2 = a2 * c.r * c.r;\n        return a1 + a2 - ss;\n    }\n\n    // The area of intersecting space\n    // With triangle PAB\n    db area(Point a, Point b)\n    {\n        if (sgn((p - a) ^ (p - b)) == 0)\n            return 0.0;\n        Point q[5];\n        int len = 0;\n        q[len++] = a;\n        Line l(a, b);\n        Point p1, p2;\n        if (crossL(l, q[1], q[2]) == 2)\n        {\n            if (sgn((a - q[1]) * (b - q[1])) < 0)\n                q[len++] = q[1];\n            if (sgn((a - q[2]) * (b - q[2])) < 0)\n                q[len++] = q[2];\n        }\n        q[len++] = b;\n        if (len == 4 && sgn((q[0] - q[1]) * (q[2] - q[1])) > 0)\n            swap(q[1], q[2]);\n        db res = 0;\n        for (int i = 0; i < len - 1; i++)\n        {\n            if (relationP(q[i]) == 0 || relationP(q[i + 1]) == 0)\n            {\n                db arg = p.rad(q[i], q[i + 1]);\n                res += r * r * arg / 2.0;\n            }\n            else\n                res += abs((q[i] - p) ^ (q[i + 1] - p)) / 2.0;\n        }\n        return res;\n    }\n\n    // Two circle whose center are a and b respectivelly\n    static int GetCircle(Point a, Point b, db r, Circle &c1, Circle &c2)\n    {\n        Circle x(a, r), y(b, r);\n        int t = x.crossC(y, c1.p, c2.p);\n        if (!t)\n            return 0;\n        c1.r = c2.r = r;\n        return t;\n    }\n\n    // The circle which tangent is l and point p on it\n    static int GetCircle(Line l, Point p, db r, Circle &c1, Circle &c2)\n    {\n        db dis = l.disPL(p);\n        if (sgn(dis - r * 2) > 0)\n            return 0;\n        if (sgn(dis) == 0)\n        {\n            c1.p = p + ((l.e - l.s).rotCC().scale(r));\n            c2.p = p + ((l.e - l.s).rotCL().scale(r));\n            c1.r = c2.r = r;\n            return 2;\n        }\n        Line u1 = Line((l.s + (l.e - l.s).rotCC().scale(r)), (l.e + (l.e - l.s).rotCC().scale(r)));\n        Line u2 = Line((l.s + (l.e - l.s).rotCL().scale(r)), (l.e + (l.e - l.s).rotCL().scale(r)));\n        Circle cc(p, r);\n        Point p1, p2;\n        if (!cc.crossL(u1, p1, p2))\n            cc.crossL(u2, p1, p2);\n        c1 = Circle(p1, r);\n        if (p1 == p2)\n        {\n            c2 = c1;\n            return 1;\n        }\n        c2 = Circle(p2, r);\n        return 2;\n    }\n\n    // u and v are the common tangent of the four circles\n    static int GetCircle(Line u, Line v, db r, Circle &c1, Circle &c2, Circle &c3, Circle &c4)\n    {\n        if (u.parallel(v))\n            return 0;\n        Line u1 = Line(u.s + (u.e - u.s).rotCC().scale(r), u.e + (u.e - u.s).rotCC().scale(r));\n        Line u2 = Line(u.s + (u.e - u.s).rotCL().scale(r), u.e + (u.e - u.s).rotCL().scale(r));\n        Line v1 = Line(v.s + (v.e - v.s).rotCC().scale(r), v.e + (v.e - v.s).rotCC().scale(r));\n        Line v2 = Line(v.s + (v.e - v.s).rotCL().scale(r), v.e + (v.e - v.s).rotCL().scale(r));\n        c1.r = c2.r = c3.r = c4.r = r;\n        c1.p = u1.intersec(v1);\n        c2.p = u1.intersec(v2);\n        c3.p = u2.intersec(v1);\n        c4.p = u2.intersec(v2);\n        return 4;\n    }\n\n    // Tangent with circle cx and cy\n    static int GetCircle(Circle cx, Circle cy, db r, Circle &c1, Circle &c2)\n    {\n        Circle x(cx.p, r + cx.r), y(cy.p, r + cy.r);\n        int t = x.crossC(y, c1.p, c2.p);\n        if (!t)\n            return 0;\n        c1.r = c2.r = r;\n        return t;\n    }\n\n    void read()\n    {\n        p.read();\n        cin >> r;\n    }\n\n    void Debug() { cerr << \"Circle: Center: (\" << p.x << \", \" << p.y << \") Radius: \" << r << '\\n'; }\n};\n\n// Pre-Build Function\ninline void build()\n{\n}\n\n// Actual Solver\ninline void solve()\n{\n    Line l;\n    l.read();\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        Point p;\n        p.read();\n        int re = l.relation(p);\n        if (re == 1)\n            cout << \"COUNTER_CLOCKWISE\\n\";\n        else if (re == -1)\n            cout << \"CLOCKWISE\\n\";\n        else if (re == -2)\n            cout << \"ONLINE_BACK\\n\";\n        else if (re == 2)\n            cout << \"ONLINE_FRONT\\n\";\n        else\n            cout << \"ON_SEGMENT\\n\";\n    }\n}\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n    cout.tie(nullptr);\n\n#ifdef LOCAL\n    clock_t _begin = clock();\n#endif\n\n    build();\n    solve();\n\n#ifdef LOCAL\n    cerr << \"Time elapsed: \" << (double)(clock() - _begin) * 1000 / CLOCKS_PER_SEC << \"ms.\" << endl;\n#endif\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <string>\n#include <vector>\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<stack>\n#include<queue>\n#include<cmath>\n#include<algorithm>\n#include<functional>\n//--\n#include<list>\n#include<deque>\n#include<bitset>\n#include<set>\n#include<map>\n#include<cstdio>\n#include<cstring>\n#include<sstream>\n#include<complex>\n#define X first\n#define Y second\n#define pb push_back\n#define rep(X,Y) for (int (X) = 0;(X) < (Y);++(X))\n#define rrep(X,Y) for (int (X) = Y-1;(X) >=0;--(X))\n#define all(X) (X).begin(),(X).end()\n#define rall(X) (X).rbegin(),(X).rend()\n\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> pii;\ntypedef complex<double> pt;\n\ndouble dot(pt a,pt b){return (conj(a)*b).real();}\ndouble cros(pt a,pt b){return (conj(a)*b).imag();}\npt proj(pt a,pt to){\n  return dot(a,to)/norm(to)*to;\n}\n\npt refle(pt a,pt mirror){\n  return pt(2)*proj(a,mirror)-a;\n}\n\nint pt3(pt a,pt b,pt c){\n  pt p=b-a,q=c-a;\n  double tmp;\n  tmp=cros(p,q);\n  if(tmp>1e-10){\n    return 0;\n  }else if(tmp<-1e-10){\n    return 1;\n  }else if(norm(p+q)<max(norm(p),norm(q))){\n    return 2;\n  }else if(norm(q)>norm(p)){\n    return 3;\n  }else if(norm(q)<norm(p)){\n    return 4;\n  }\n  return 5;\n}\nint main(){\n  int i,j,k,n;\n  pt o,p,q;\n // cout<<cros(pt(1,0),pt(0,-1))<<endl;\n  cin>>o.real()>>o.imag()>>p.real()>>p.imag();\n  cin>>n;\n  string str[]={\"COUNTER_CLOCKWISE\",\"CLOCKWISE\",\"ONLINE_BACK\"\n    ,\"ONLINE_FRONT\",\"ON_SEGMENT\"};\n  rep(i,n){\n    cin>>q.real()>>q.imag();\n    cout<<str[pt3(0,p,q)]<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <limits>\n#include <cmath>\n#include <cstdio>\n\nusing namespace std;\n\n#define EPS (numeric_limits<double>::epsilon())\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nclass Point {\npublic:\n    double x, y;\n\n    Point(double x = 0, double y = 0) : x(x), y(y) {}\n\n    Point operator+(const Point &p) const\n    {\n        return Point(x + p.x, y + p.y);\n    }\n\n    Point operator-(const Point &p) const\n    {\n        return Point(x - p.x, y - p.y);\n    }\n\n    Point operator*(const double &a) const\n    {\n        return Point(a * x, a * y);\n    }\n\n    Point operator/(const double &a) const\n    {\n        return Point(x / a, y / a);\n    }\n\n    double abs()\n    {\n        return sqrt(norm());\n    }\n\n    double norm()\n    {\n        return x * x + y * y;\n    }\n\n    bool operator<(const Point &p) const\n    {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator==(const Point &p) const\n    {\n        return equals(x, p.x) && equals(y, p.y);\n    }\n};\n\ntypedef Point Vector;\n\nstruct Segment {\n    Point p1, p2;\n};\ntypedef Segment Line;\n\n\ndouble dot(Vector a, Vector b)\n{\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b)\n{\n    return a.x * b.y - a.y * b.x;\n}\n\nbool isParallel(Vector a, Vector b)\n{\n    return equals(cross(a, b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2)\n{\n    return equals(cross(a2 - a1, b2 - b1), 0.0);\n}\n\nbool isOrthogonal(Vector a, Vector b)\n{\n    return equals(dot(a, b), 0.0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2)\n{\n    return equals(dot(a2 - a1, b2 - b1), 0.0);\n}\n\nPoint project(Segment s, Point p)\n{\n    Vector hypo = p - s.p1;\n    Vector base = s.p2 - s.p1;\n    return base * (dot(hypo, base) / base.norm()) + s.p1;\n}\n\nPoint reflect(Segment s, Point p)\n{\n    return (project(s, p) - p) * 2.0 + p;\n}\n\ndouble getDistance(Point a, Point b)\n{\n    return (a - b).abs();\n}\n\ndouble getDistanceLP(Line l, Point p)\n{\n    return abs(cross(l.p2 - l.p1, p - l.p1)) / (l.p2 - l.p1).abs();\n}\n\ndouble getDistanceSP(Segment s, Point p)\n{\n    if (dot(s.p2 - s.p1, p - s.p1) < 0.0)\n        return getDistance(p, s.p1);\n    else if (dot(s.p1 - s.p2, p - s.p2) < 0.0)\n        return getDistance(p, s.p2);\n    else\n        return getDistanceLP(s, p);\n}\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nint ccw(Point p0, Point p1, Point p2)\n{\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if (cross(a, b) > 0.0)\n        return COUNTER_CLOCKWISE;\n    else if (cross(a, b) < 0.0)\n        return CLOCKWISE;\n    else if (dot(a, b) < 0.0)\n        return ONLINE_BACK;\n    else if (a.norm() < b.norm())\n        return ONLINE_FRONT;\n    else\n        return ON_SEGMENT;\n}\n\nint main()\n{\n    Point p0, p1;\n    cin >> p0.x >> p0.y >> p1.x >> p1.y;\n    int query;\n    cin >> query;\n    Point p2;\n    for (int q = 0; q < query; q++)\n    {\n        cin >> p2.x >> p2.y;\n        int ans = ccw(p0, p1, p2);\n        if(ans == COUNTER_CLOCKWISE)\n            cout << \"COUNTER_CLOCKWISE\" << endl;\n        else if(ans == CLOCKWISE)\n            cout << \"CLOCKWISE\" << endl;\n        else if(ans == ONLINE_BACK)\n            cout << \"ONLINE_BACK\" << endl;\n        else if(ans == ONLINE_FRONT)\n            cout << \"ONLINE_FRONT\" << endl;\n        else\n            cout << \"ON_SEGMENT\" << endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<complex>\n\n#define Re real()\n#define Im imag()\n\nusing namespace std;\n\ntypedef complex<double> Point;\ntypedef complex<double> Vector;\n\ndouble dot(const Point& a, const Point& b)\n{\n    return (conj(a)*b).Re;\n}\n\ndouble cross(const Point& a,const Point& b)\n{\n    return (conj(a)*b).Im;\n}\n\nint main()\n{\n    int vol;\n    double x1,x2,y1,y2;\n    while(~scanf(\"%lf%lf%lf%lf\",&x1,&y1,&x2,&y2))\n    {\n        Point p0 = Point(x1,y1),p1 = Point(x2,y2);\n        Vector v0 = p1 - p0;\n        scanf(\"%d\",&vol);\n        while(vol--)\n        {\n            double tx,ty;\n            scanf(\"%lf%lf\",&tx,&ty);\n            Point Pn = Point(tx,ty);\n            Vector v1 = Pn - p0;\n            double ans = cross(v1,v0);\n            if(ans < 0) printf(\"COUNTER_CLOCKWISE\\n\");\n            else if(ans > 0) printf(\"CLOCKWISE\\n\");\n            else\n            {\n                int tmp = dot(v1,v0);\n                if(tmp < 0) printf(\"ONLINE_BACK\\n\");\n                else\n                {\n                    if(norm(v1) > norm(v0)) printf(\"ONLINE_FRONT\\n\");\n                    else printf(\"ON_SEGMENT\\n\");\n                }\n            }\n        }\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <algorithm>\n#include <iomanip>\nusing namespace std;\n\ntypedef struct Point {\n\tdouble x; \n\tdouble y;\n\n\tPoint() { }\n\n\tPoint(double x, double y) :x(x), y(y) { }\n\n\tPoint operator+(Point& p) {\n\t\treturn Point(x + p.x, y + p.y);\n\t}\n\n\tPoint operator-(Point& p) {\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n};\n\ntypedef Point Vector;\n\n struct Line {\n\tPoint p1, p2;\n\tLine() {}\n\tLine(const Point& a,const Point& b) : p1(a),p2(b) { }\n};\n\n typedef Line Segment;\n\ndouble abs(Point p1, Point p2) {\n\tdouble norm = (p1.x - p2.x)*(p1.x - p2.x) + (p1.y - p2.y)*(p1.y - p2.y);\n\treturn sqrt(norm);\n}\n\ndouble product(Point p1, Point p2) {\n\treturn p1.x*p2.x + p1.y + p2.y;\n}\n\ndouble cross(Point p1, Point p2) {\n\treturn p1.x*p2.y - p1.y*p2.x;\n}\n\nint ccw(Point p0, Point p1, Point p2) {\n\tVector v0 = p2 - p0;\n\tVector v1 = p1 - p0;\n\tif (cross(v0, v1) > 0.0) return 1;   //p0,p1,p2??????????¨???????\n\tif (cross(v0, v1) < 0.0) return -1;   //p0,p1,p2???????¨???????\n\tif (product(v0, v1) < 0.0) return 2;  //p2,p0,p1????????§????????´??????\n\tif (abs(p0, p1) < abs(p0, p2)) return -2;  //p0,p1,p2????????§????????´??????\n\treturn 0;   //p2?????????(p0,p1)???\n}\n\nbool intersect(Point p0, Point p1, Point p2, Point p3) {\n\treturn (ccw(p0, p1, p2)*ccw(p0, p1, p3) <= 0&&ccw(p2,p3,p0)*ccw(p2,p3,p1)<=0);\n\t//?????????????????????????????¶\n}\n\nbool intersect(Segment s1, Segment s2) {\n\treturn intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\ndouble DistanceLP(Line l, Point p) {\n\treturn abs(cross(l.p2 - l.p1, p - l.p1)/abs(l.p1,l.p2));\n}\n\ndouble DistanceSP(Segment s, Point p) {\n\tif (product(s.p2 - s.p1, p - s.p1) < 0.0) return abs(p, s.p1);\n\tif (product(s.p1 - s.p2, p - s.p2) < 0.0) return abs(p, s.p2);\n\treturn DistanceLP(s, p);\n}\n\ndouble DistanceSS(Segment s1, Segment s2) {\n\tif (intersect(s1, s2)) return 0.0;\n\treturn min(min(DistanceSP(s1, s2.p1), DistanceSP(s1,s2.p2)), min(DistanceSP(s2, s1.p1), DistanceSP(s2, s1.p2)));\n}\n\nint main() {\n\tPoint p0, p1,p2;\n\tcin >> p0.x; cin >> p0.y;\n\tcin >> p1.x; cin >> p1.y;\n\tint q; \n\tcin >> q;\n\tfor (int i = 0;i < q;i++) {\n\t\tcin >> p2.x; cin >> p2.y;\n\t\tint c = ccw(p0, p1, p2);\n\t\tif (c == -1) cout << \"COUNTER_CLOCKWISE\" << endl;\n\t\tif (c == 1) cout << \"CLOCKWISE\" << endl;\n\t\tif (c == 2) cout << \"ONLINE_BACK\" << endl;\n\t\tif (c == -2) cout << \"ONLINE_FRONT\" << endl;\n\t\tif (c == 0) cout << \"ON_SEGMENT\" << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\n\n#define REP(i,num) for(int i=0;i<(num);++i)\n#define ALL(c) c.begin(),c.end()\n#define PRINTALL(c) for(auto& x:c){cout<<x<<' ';}cout<<endl;\n#define PAIRCOMP(c,comp) [](const pair<ll,ll>& lhs,const pair<ll,ll>& rhs){return lhs.c comp rhs.c;}\n\nusing namespace std;\nusing ll = long long;\n\nconstexpr ll atcoder_mod = 1e9+7;\n\ntemplate<typename T=int>\nT in(){T x; cin >> x; return (x);}\ntemplate<typename T=int,typename C=vector<T>>\nC vecin(int N){C x(N);REP(i,N){x[i]=in<T>();}return move(x);}\n\nvoid vout(){cout << endl;}\ntemplate<typename Head,typename... Tail>\nvoid vout(Head&& h,Tail&&... t){cout << ' ' << h;vout(forward<Tail>(t)...);}\nvoid out(){cout << endl;}\ntemplate<typename Head,typename... Tail>\nvoid out(Head&& h,Tail&&... t){cout << h;vout(forward<Tail>(t)...);}\n\nint main(){\n\t//cin.tie(0);\n\t//ios::sync_with_stdio(false);\n\n\tauto x1=in(),y1=in(),x2=in(),y2=in();\n\tdouble dx = x2-x1,dy = y2-y1;\n\tdouble norm = hypot(dx,dy);\n\tdx/=norm,dy/=norm;\n\tauto Q=in();\n\tREP(i,Q){\n\t\tint x3=in(),y3=in();\n\t\tdouble cross = dx*(y3-y2)-(x3-x2)*dy;\n\t\tif(abs(cross)<=1e-7){\n\t\t\tdouble proj = dx*(x3-x1)+dy*(y3-y1);\n\t\t\tif(proj<0){\n\t\t\t\tout(\"ONLINE_BACK\");\n\t\t\t}\n\t\t\telse{\n\t\t\t\tdouble norm2=hypot(x3-x1,y3-y1);\n\t\t\t\tif(norm2>norm) out(\"ONLINE_FRONT\");\n\t\t\t\telse out(\"ON_SEGMENT\");\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tif(cross>0) out(\"COUNTER_CLOCKWISE\");\n\t\t\telse out(\"CLOCKWISE\");\n\t\t}\n\t}\n\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> P;\n\ndouble eps = 1e-9;\n\nstring ccw(P a,P b,P c){\n  P ab=b-a;\n  P ac=c-a;\n  P k=ac*conj(ab);\n  if( k.imag() > eps ){\n    return \"COUNTER_CLOCKWISE\";\n  }\n  if( k.imag() < -eps ){\n    return \"CLOCKWISE\";\n  }\n  if( k.real() < -eps ){\n    return \"ONLINE_BACK\";\n  }\n  if( (ac/ac).real()+eps < k.real() ){\n    return \"ONLINE_FRONT\";\n  }\n  return \"ON_SEGMENT\";\n}\n\nint main(){\n  \n  double x0,y0,x1,y1,x2,y2;\n  cin>>x0>>y0>>x1>>y1;\n  P a(x0,y0);\n  P b(x1,y1);\n  int n;\n  cin>>n;\n  while(n--){\n    cin>>x2>>y2;\n    P c(x2,y2);\n    cout<< ccw(a,b,c) <<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <complex>\n#include <string>\n#define x real() \n#define y imag() \nusing namespace std;\ntypedef complex <double> point;\ntypedef complex<double> vectol;\n\nstring ccw(point a,point b,point c) {\n  vectol ab= b-a, ac = c-a;\n  vectol d  = ac * conj(ab); \n  d /= abs(ab);\n  if(d.y > 0) return \"COUNTER_CLOCKWISE\";\n  if(d.y < 0) return \"CLOCKWISE\";\n  vectol Ob = ab * conj(ab);\n  Ob /= abs(ab);\n  if(Ob.x < d.x) return \"ONLINE_FRONT\";\n  if(0 > d.x) return \"ONLINE_BACK\";\n  return \"ON_SEGMENT\";\n}\n\nint main() {\n  double x0,y0,x1,y1;\n  cin>>x0>>y0>>x1>>y1;\n  point a = point( x0, y0);\n  point b = point( x1, y1);\n  int n;\n  cin >> n;\n  for(int i=0;i<n;i++){\n    cin >> x0 >> y0;\n    cout << ccw(a,b,point(x0,y0)) <<endl;\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "\n#include<algorithm>\n#include<cmath>\n\n// double\nconst double EPS = 1e-9;\ndouble relative_error(double d1, double d2) {return (d1 - d2) / std::max({d1, d2, EPS});}\n\n// Point\nenum POSITION {ONLINE_FRONT = -2, CLOCKWISE, ON_SEGMENT, COUNTER_CLOCKWISE, ONLINE_BACK};\n\nclass Point {\n    double x_, y_;\npublic:\n    Point(double d = 0.0);\n    Point(double x, double y);\n    double x() const;\n    double y() const;\n    double x(double d);\n    double y(double d);\n    const Point operator-() const;\n    const Point& operator=(const Point& p);\n    const Point& operator+=(const Point& p);\n    const Point& operator-=(const Point& p);\n    const Point& operator*=(const Point& p);\n    const Point& operator/=(const Point& p);\n    double abs() const;\n    double norm() const;\n    double dot(const Point& p) const;\n    double cross(const Point& p) const;\n    double distance(const Point& p) const;\n};\n\nbool operator==(const Point& lhs, const Point& rhs) {return lhs.x() == rhs.x() && lhs.y() == rhs.y();}\nbool operator<(const Point& lhs, const Point& rhs) {return lhs.x() != rhs.x() ? lhs.x() < rhs.x() : lhs.y() < rhs.y();}\nbool operator<=(const Point& lhs, const Point& rhs) {return lhs.x() != rhs.x() ? lhs.x() < rhs.x() : lhs.y() <= rhs.y();}\nbool operator!=(const Point& lhs, const Point& rhs) {return !(lhs == rhs);}\nbool operator>(const Point& lhs, const Point& rhs) {return !(lhs <= rhs);}\nbool operator>=(const Point& lhs, const Point& rhs) {return !(lhs < rhs);}\nconst Point operator+(const Point& lhs, const Point& rhs) {return Point(lhs.x() + rhs.x(), lhs.y() + rhs.y());}\nconst Point operator-(const Point& lhs, const Point& rhs) {return Point(lhs.x() - rhs.x(), lhs.y() - rhs.y());}\nconst Point operator*(const Point& lhs, const Point& rhs) {return Point(lhs.x() * rhs.x(), lhs.y() * rhs.y());}\nconst Point operator/(const Point& lhs, const Point& rhs) {return Point(lhs.x() / rhs.x(), lhs.y() / rhs.y());}\n\nPoint::Point(double d) :x_(d), y_(d) {}\nPoint::Point(double x, double y) :x_(x), y_(y) {}\ndouble Point::x() const {return x_;}\ndouble Point::y() const {return y_;}\ndouble Point::x(double d) {return x_ = d;}\ndouble Point::y(double d) {return y_ = d;}\nconst Point Point::operator-() const {return Point(-x(), -y());}\nconst Point& Point::operator=(const Point& p) {x(p.x()); y(p.y()); return *this;}\nconst Point& Point::operator+=(const Point& p) {return *this = *this + p;}\nconst Point& Point::operator-=(const Point& p) {return *this = *this - p;}\nconst Point& Point::operator*=(const Point& p) {return *this = *this * p;}\nconst Point& Point::operator/=(const Point& p) {return *this = *this / p;}\ndouble Point::abs() const {return hypot(x(), y());}\ndouble Point::norm() const {return x() * x() + y() * y();}\ndouble Point::dot(const Point& p) const {return x() * p.x() + y() * p.y();}\ndouble Point::cross(const Point& p) const {return x() * p.y() - y() * p.x();}\ndouble Point::distance(const Point& p) const {return (*this - p).abs();}\n\nPOSITION ccw(const Point& a, const Point& b, const Point& c) {\n    Point v1 = b - a;\n    Point v2 = c - a;\n    if(v1.cross(v2) > EPS) return COUNTER_CLOCKWISE;\n    if(v1.cross(v2) < -EPS) return CLOCKWISE;\n    if(v1.dot(v2) < -EPS) return ONLINE_BACK;\n    if(v2.norm() - v1.norm() > EPS) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n#include<iostream>\n#include<vector>\nusing namespace std;\n\nint main() {\n    vector<Point> point(2);\n    for(auto& p: point) {\n        double x, y;\n        cin >> x >> y;\n        p = Point(x, y);\n    }\n    int q;\n    for(cin >> q; q > 0; --q) {\n        double x, y;\n        cin >> x >> y;\n        switch(ccw(point[0], point[1], Point(x, y))) {\n        case COUNTER_CLOCKWISE:\n            cout << \"COUNTER_CLOCKWISE\" << endl;\n            break;\n        case CLOCKWISE:\n            cout << \"CLOCKWISE\" << endl;\n            break;\n        case ON_SEGMENT:\n            cout << \"ON_SEGMENT\" << endl;\n            break;\n        case ONLINE_BACK:\n            cout << \"ONLINE_BACK\" << endl;\n            break;\n        case ONLINE_FRONT:\n            cout << \"ONLINE_FRONT\" << endl;\n            break;\n        }\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define FOR(I,X,Y) for(long int I=X;I<Y;I++)\n#define REP(I,X) for(long int I=X;I>=0;I--)\n#define INF 1e9+7\nusing namespace std;\n\nint main(){\n  double x0,y0,x1,y1,x2,y2;\n  cin >> x0 >> y0 >> x1 >> y0;\n  complex<double> p0(x0,y0),p1(x1,y1);\n  int q;\n  cin >> q;\n  vector<string> ans;\n  FOR(i,0,q){\n    cin >> x2 >> y2;\n    complex<double> p2(x2,y2);\n    if(((p2-p0)/(p1-p0)).imag()){\n      if(((p2-p0)/(p1-p0)).imag() > 0)ans.push_back(\"COUNTER_CLOCKWISE\");\n      else ans.push_back(\"CLOCKWISE\");\n    }\n    else{\n      if(((p2-p0)/(p1-p0)).real() >= 0){\n        if(((p2-p0)/(p1-p0)).real() > 1)ans.push_back(\"ONLINE_FRONT\");\n        else ans.push_back(\"ON_SEGMENT\");\n      }\n      else{\n        ans.push_back(\"ONLINE_BACK\");\n      }\n    }\n  }\n  for(auto x:ans)cout << x << endl;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n\ntemplate <class T>\nT abs(T x) {\n    return (x > 0) ? x : -x;\n}\n\nint main(int argc, const char * argv[]) {\n    long xp0, xp1, xp2, yp0, yp1, yp2;\n    int q;\n    \n    scanf(\"%ld %ld %ld %ld\", &xp0, &yp0, &xp1, &yp1);\n    scanf(\"%d\", &q);\n    \n    long v1x = xp1 - xp0;\n    long v1y = yp1 - yp0;\n    \n    for (int i = 0; i < q; ++i) {\n        scanf(\"%ld %ld\", &xp2, &yp2);\n        long v2x = xp2 - xp0;\n        long v2y = yp2 - yp0;\n        \n        long crossProd = v1x * v2y - v1y * v2x;\n        \n        if (crossProd > 0) {\n            puts(\"COUNTER_CLOCKWISE\");\n        } else if (crossProd < 0) {\n            puts(\"CLOCKWISE\");\n        } else if (v2x * v1x < 0) {\n            puts(\"ONLINE_BACK\");\n        } else if (abs(v1x) < abs(v2x)){\n            puts(\"ONLINE_FRONT\");\n        } else {\n            puts(\"ON_SEGMENT\");\n        }\n    }\n    \n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define rep(i,s,n) for (int i = (int)s; i < (int)n; i++)\n#define ll long long\n#define pb push_back\n#define All(x) x.begin(), x.end()\n#define Range(x, i, j) x.begin() + i, x.begin() + j\n#define lbidx(x, y) lower_bound(x.begin(), x.end(), y) - x.begin()\n#define ubidx(x, y) upper_bound(x.begin(), x.end(), y) - x.begin()\n#define BiSearchRangeNum(x, y, z) lower_bound(x.begin(), x.end(), z) - lower_bound(x.begin(), x.end(), y)turn idx;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nclass Point {\n  public:\n  double x, y;\n\n  Point(double x = 0, double y = 0): x(x), y(y) {}\n\n  Point operator + (Point p) { return Point(x + p.x, y + p.y); }\n  Point operator - (Point p) { return Point(x - p.x, y - p.y); }\n  Point operator * (double a) { return Point(a * x, a * y); }\n  Point operator / (double a) { return Point(x / a, y / a); }\n\n  double abs() { return sqrt(norm()); }\n  double norm() { return x * x + y * y; }\n\n  bool operator < (const Point &p) const {\n    return x != p.x ? x < p.x : y < p.y;\n  }\n\n  bool operator == (const Point &p) const {\n    return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n  }\n};\n\nstruct Segment {\n  Point p1, p2;\n};\n\ntypedef Point Vector;\ntypedef Segment Line;\n\ndouble norm(Vector a) {\n  return a.x * a.x + a.y * a.y;\n};\n\ndouble abs(Vector a) {\n  return sqrt(norm(a));\n};\n\n// 内積\ndouble dot(Vector a, Vector b) {\n  return a.x * b.x + a.y * b.y;\n};\n\n// 外積\ndouble cross(Vector a, Vector b) {\n  return a.x * b.y - a.y * b.x;\n};\n\n// 直交判定\nbool isOrthogonal(Vector a, Vector b) {\n  return equals(dot(a, b), 0.0);\n};\n\n// 並行判定\nbool isParallel(Vector a, Vector b) {\n  return equals(cross(a, b), 0.0);\n};\n\n// 射影\nPoint project(Segment s, Point p) {\n  Vector base = s.p2 - s.p1;\n  double r = dot(p - s.p1, base) / base.norm();\n  return s.p1 + base * r;\n};\n\n// 反射\nPoint reflect(Segment s, Point p) {\n  return p + (project(s, p) - p) * 2.0;\n};\n\n// 点と点の距離\ndouble getDistance(Point a, Point b) {\n  return abs(a - b);\n};\n\n// 点と直線の距離\ndouble getDistanceLP(Line l, Point p) {\n  return abs(cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1));\n};\n\n// 点と線分の距離\ndouble getDistanceSP(Segment s, Point p) {\n  if (dot(s.p2 - s.p1, p - s.p1) < 0.0) return abs(p - s.p1);\n  if (dot(s.p1 - s.p2, p - s.p2) < 0.0) return abs(p - s.p2);\n  return getDistanceLP(s, p);\n};\n\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nint ccw(Point p0, Point p1, Point p2) {\n  Vector a = p1 - p0;\n  Vector b = p2 - p0;\n  if (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n  if (cross(a, b) < -EPS) return CLOCKWISE;\n  if (dot(a, b) < -EPS) return ONLINE_BACK;\n  if (a.norm() < b.norm()) return ONLINE_FRONT;\n  return ON_SEGMENT;\n};\n\nint main() {\n  int x0, y0, x1, y1;\n  int q;\n  cin >> x0 >> y0 >> x1 >> y1 >> q;\n  Point p0 = Point(x0, y0); Point p1 = Point(x1, y1);\n  Point p2;\n  rep(i, 0, q) {\n    cin >> p2.x >> p2.y;\n    int ret = ccw(p0, p1, p2);\n    if (ret == COUNTER_CLOCKWISE) {\n      cout << \"COUNTER_CLOCKWISE\" << endl;\n    } else if (ret == CLOCKWISE) {\n      cout << \"CLOCKWISE\" << endl;\n    } else if (ret == ONLINE_BACK) {\n      cout << \"ONLINE_BACK\" << endl;\n    } else if (ret == ONLINE_FRONT) {\n      cout << \"ONLINE_FRONT\" << endl;\n    } else {\n      cout << \"ON_SEGMENT\" << endl;\n    }\n  }\n  return 0;\n};\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\nusing namespace std;\n#include<cstdio>\n#include<cmath>\n\nstruct Point{ double x, y; };\n\nPoint set_p(double a, double b)\n{\n    Point p;\n    p.x = a; p.y = b;\n    return p;\n}\n\nstruct Vector{ double vx, vy; };\n\nVector set_v(const Point &p1, const Point &p2)\n{\n    Vector v;\n    v.vx = p2.x - p1.x;\n    v.vy = p2.y - p1.y;\n    return v;\n}\n\ndouble inpro(const Vector &v1, const Vector &v2)\n{\n    return (v1.vx * v2.vx) + (v1.vy * v2.vy);\n}\n\ndouble det2(const Vector &v1, const Vector &v2)\n{\n\treturn (v1.vx * v2.vy) - (v1.vy * v2.vx);\n}\n\nint main()\n{\n\tdouble p0x, p0y, p1x, p1y;\n\tscanf(\"%lf %lf %lf %lf\", &p0x, &p0y, &p1x, &p1y);\n\tPoint P0 = set_p(p0x, p0y);\n\tPoint P1 = set_p(p1x, p1y);\n\tVector V1 = set_v(P0, P1);\n\n\tdouble p2x, p2y, d;\n\n\tint q;\n\tscanf(\"%d\", &q);\n\tfor(int i = 0; i < q; i++){\n\t\tscanf(\"%lf %lf\", &p2x, &p2y);\n\t\tPoint P2 = set_p(p2x, p2y);\n\t\tVector V2 = set_v(P0, P2);\n\t\tVector V = set_v(P1, P2);\n\t\td = det2(V1, V2);\n\t\tif(d > 0){ printf(\"COUNTER_CLOCKWISE\\n\"); }\n\t\t\telse if(d < 0){ printf(\"CLOCKWISE\\n\"); }\n\t\t\telse{\n\t\t\t    if(inpro(V1, V2) < 0){ printf(\"ONLINE_BACK\\n\"); }\n\t\t\t    else if(inpro(V1, V) > 0){ printf(\"ONLINE_FRONT\\n\"); }\n\t\t\t    else{ printf(\"ON_SEGMENT\\n\"); }\n\t\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "/* ccw.cpp\n    3点の位置関係を求める\n\n    verified:\n        AOJ Course CGL_1_C Points/Vectors - Counter-Clockwise\n        http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_C&lang=jp\n*/\n#include <bits/stdc++.h>\nusing namespace std;\n\nusing D = double;\n\n// P: 点,座標\nusing P = std::complex<D>;\nnamespace std {\nbool operator<(const P& a, const P& b) { return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b); }\nbool operator>(const P& a, const P& b) { return real(a) != real(b) ? real(a) > real(b) : imag(a) > imag(b); }\n}  // namespace std\nD dot(const P& a, const P& b) { return real(conj(a) * b); }    // 内積\nD cross(const P& a, const P& b) { return imag(conj(a) * b); }  // 外積\nD norm(const P& a) { return dot(a, a); }\n\nconst D PI = std::acos(-1);\nconst D EPS = 1e-10;\nconst D INF = 1e12;\n\nint sgn(D a) { return (a < -EPS) ? -1 : (a > EPS) ? 1 : 0; }  // 比較\n\n/* ccw(a,b,c)\n    出力:\n    1: a-bから見てcは反時計, -1: a-bから見てcは時計\n    2: c-a-bで直線, -2: a-b-cで直線, 0: a-c-bで直線\n*/\nint ccw(const P& a, const P& b, const P& c) {\n    if (sgn(cross(b - a, c - a)) == 1) return 1;         // 1: a-bから見てcは反時計\n    if (sgn(cross(b - a, c - a)) == -1) return -1;       //-1: a-bから見てcは時計\n    if (sgn(dot(b - a, c - a)) == -1) return 2;          // 2: c-a-bで直線\n    if (sgn(norm(c - a) - norm(b - a)) == 1) return -2;  //-2: a-b-cで直線\n    return 0;                                            // 0: a-c-bで直線\n}\n\nint main() {\n    double px, py;\n    cin >> px >> py;\n    P a(px, py);\n    cin >> px >> py;\n    P b(px, py);\n    int q;\n    cin >> q;\n    vector<P> cs(q);\n    for (int i = 0; i < q; i++) {\n        cin >> px >> py;\n        P c(px, py);\n        cs[i] = c;\n    }\n    for (int i = 0; i < q; i++) {\n        P c = cs[i];\n        if (ccw(a, b, c) == 1) {\n            cout << \"COUNTER_CLOCKWISE\" << endl;\n        } else if (ccw(a, b, c) == -1) {\n            cout << \"CLOCKWISE\" << endl;\n        } else if (ccw(a, b, c) == 2) {\n            cout << \"ONLINE_BACK\" << endl;\n        } else if (ccw(a, b, c) == -2) {\n            cout << \"ONLINE_FRONT\" << endl;\n        } else if (ccw(a, b, c) == 0) {\n            cout << \"ON_SEGMENT\" << endl;\n        }\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint main(){\n\n\tint p0x,p0y,p1x,p1y,p2x,p2y;\n\tint q,cr;\n\n\tcin>>p0x>>p0y>>p1x>>p1y;\n\tcin>>q;\n\n\tfor(int i=0;i<q;i++){\n\t\tcin>>p2x>>p2y;\n\t\tcr=(p2x-p0x)*(p1y-p0y)-(p1x-p0x)*(p2y-p0y);\n\t\tif(cr==0){\n\t\t\tif(((p2x-p0x<0)==(p1x-p0x<0)&&(p2y-p0y<0)==(p1y-p0y<0))||((p2x==p0x)&&(p1x==p0x)&&(p2y-p0y<0)==(p1y-p0y<0))||((p2x-p0x<0)==(p1x-p0x<0)&&(p2y==p0y)&&(p1y==p0y))||(p0x==p1x&&p1y==p0y)||(p2x==p0x&&p2y==p0y)){\n\t\t\t\tif(pow(p2x-p0x,2.0)+pow(p2y-p0y,2.0)>pow(p1x-p0x,2.0)+pow(p1y-p0y,2.0)){\n\t\t\t\t\tcout<<\"ONLINE_FRONT\"<<endl;\n\t\t\t\t}\n\t\t\t\telse cout<<\"ON_SEGMENT\"<<endl;\n\t\t\t}\n\t\t\telse cout<<\"ONLINE_BACK\"<<endl;\n\t\t}\n\t\telse if(cr>0) cout<<\"CLOCKWISE\"<<endl;\n\t\telse cout<<\"COUNTER_CLOCKWISE\"<<endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <math.h>\nconst double eps=1e-9;\ndouble ABS(double n){return n>=0?n:-n;}\nbool same(double a,double b){return ABS(a-b)<eps;}\nstruct point{\n\tdouble x;\n\tdouble y;\n\tpoint(){}\n\tpoint(double a,double b){x=a;y=b;}\n\tpoint operator +(const point &a){return point(x+a.x,y+a.y);}\n\tpoint operator -(const point &a){return point(x-a.x,y-a.y);}\n\tpoint operator *(const double &a){return point(x*a,y*a);}\n\tpoint operator /(const double &a){return point(x/a,y/a);}\n\tvoid operator =(const point &a){x=a.x;y=a.y;}\n\tvoid operator +=(const point &a){x+=a.x;y+=a.y;}\n\tvoid operator -=(const point &a){x-=a.x;y-=a.y;}\n\tvoid operator *=(const double &a){x*=a;y*=a;}\n\tvoid operator /=(const double &a){x/=a;y/=a;}\n\tbool operator <(const point &a){return x<a.x||(same(x,a.x)&&y<a.y);}\n\tbool operator ==(const point &a){return same(x,a.x)&&same(y,a.y);}\n\tdouble length(){return sqrt(x*x+y*y);}\n\tvoid in(){scanf(\"%lf%lf\",&x,&y);}\n\tvoid out(){printf(\"%.20lf %.20lf\\n\",x,y);}\n};\nstruct segment{\n\tpoint a;\n\tpoint b;\n\tsegment(){}\n\tsegment(point x,point y){a=x;b=y;}\n};\nstruct line{\n\tdouble A;\n\tdouble B;\n\tdouble C;\n\tline(){}\n\tline(double a,double b,double c){A=a;B=b;C=c;}\n\tline(point a,point b){\n\t\tA=a.y-b.y;\n\t\tB=b.x-a.x;\n\t\tC=A*a.x+B*a.y;\n\t}\n\tline(double a,double b,point p){\n\t\tA=a;\n\t\tB=b;\n\t\tC=A*p.x+B*p.y;\n\t}\n\tline(segment s){\n\t\tA=s.a.y-s.b.y;\n\t\tB=s.b.x-s.a.x;\n\t\tC=A*s.a.x+B*s.a.y;\n\t}\n};\ndouble dist(point a,point b){return (a-b).length();}\ndouble dot(point a,point b){return a.x*b.x+a.y*b.y;}\ndouble cross(point a,point b){return a.x*b.y-b.x*a.y;}\n//angle only returns positive value\ndouble angle(point a,point b){return acos(dot(a,b)/(a.length()*b.length()));}\ndouble area(point a,point b,point c){return ABS(cross(b-a,c-a));}\ndouble distancetoline(point a,line b){return (b.A*a.x+b.B*a.y-b.C)/sqrt(b.A*b.A+b.B*b.B);}\nbool parallel(line a,line b){return same(a.A*b.B,b.A*a.B);}\npoint intersect(line a,line b){\n\tdouble x,y,det;\n\tx=(a.C*b.B-b.C*a.B);\n\ty=(a.A*b.C-b.A*a.C);\n\tdet=(a.A*b.B-b.A*a.B);\n\treturn point(x,y)/det;\n}\n/*\nbool intersect(segment a,segment b){}\npoint intersect(segment a,segment b){}\n*/\npoint projection(point a,line b){return intersect(line(b.B,-b.A,a),b);}\npoint reflection(point a,line b){return projection(a,b)*2-a;}\nbool online(point p,line l){return ABS(l.A*p.x+l.B*p.y-l.C)<eps;}\nbool between(point a,point b,point c){\n\tif((a.x-b.x<=eps&&b.x-c.x<=eps)||(eps>=b.x-a.x&&eps>=c.x-b.x))\n\tif((a.y-b.y<=eps&&b.y-c.y<=eps)||(eps>=b.y-a.y&&eps>=c.y-b.y))\n\treturn true;\n\treturn false;\n}\nint main(){\n\tpoint from,to,p;\n\tint q;\n\tline l;\n\tfrom.in();\n\tto.in();\n\tl=line(from,to);\n\tscanf(\"%d\",&q);\n\twhile(q--){\n\t\tp.in();\n\t\tif(online(p,l)){\n\t\t\tif(between(from,p,to))printf(\"ON_SEGMENT\\n\");\n\t\t\telse if(between(from,to,p))printf(\"ONLINE_FRONT\\n\");\n\t\t\telse if(between(p,from,to))printf(\"ONLINE_BACK\\n\");\n\t\t\telse printf(\"wronged!!\\n\");\n\t\t}\n\t\telse{\n\t\t\tif(cross(to-from,p-from)>=-eps)printf(\"COUNTER_CLOCKWISE\\n\");\n\t\t\telse if(cross(to-from,p-from)<=eps)printf(\"CLOCKWISE\\n\");\n\t\t\telse printf(\"wronged!!\\n\");\n\t\t}\n\t}\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<iomanip>\n#include<algorithm>\n#include<bitset>\n#include<cctype>\n#include<cmath>\n#include<cstdio>\n#include<cstring>\n#include<functional>\n#include<limits>\n#include<list>\n#include<map>\n#include<set>\n#include<stack>\n#include<string>\n#include<sstream>\n#include<queue>\n#include<vector>\nusing namespace std;\n\n#define MOD 1000000007\n#define INF 0x3f3f3f3f\n#define INFL 0x3f3f3f3f3f3f3f3fLL\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n\n//0?¬?\nclass Point {\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0) :x(x), y(y) {}\n\n\tPoint operator+(Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator-(Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator*(double a) { return Point(a * x, a * y); }\n\tPoint operator/(double a) { return Point(x / a, y / a); }\n\tbool operator<(const Point &p)const { return x != p.x ? x < p.x : y < p.y; }\n\tbool operator==(const Point &p)const { return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS; }\n\n\tdouble abs() { return sqrt(norm()); }\n\tdouble norm() { return x*x + y*y; }\n\n};\n\n//1?¬?\ntypedef Point Vector;\n\nclass Segment {\npublic:\n\tPoint p1, p2;\n\tSegment(Point p1 = Point(), Point p2 = Point(1, 1)) :p1(p1), p2(p2) {}\n};\ntypedef Segment Line;\n\n//2?¬?\nclass Circle {\npublic:\n\tPoint c; //center\n\tdouble r; //radius\n\tCircle(Point c = Point(), double r = 0.0) :c(c), r(r) {}\n};\ntypedef vector<Point> Polygon;\n\n//??????\ndouble dot(Vector a, Vector b) { return a.x*b.x + a.y*b.y; }\n//??????\ndouble cross(Vector a, Vector b) { return a.x*b.y - a.y*b.x; }\n\n//??´?????????\nbool isOrthogonal(Vector a, Vector b) { return equals(dot(a, b), 0.0); }\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) { return isOrthogonal(a1 - a2, b1 - b2); }\nbool isOrthogonal(Segment s1, Segment s2) { return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0); }\n\n//????????????\nbool isParallel(Vector a, Vector b) { return equals(cross(a, b), 0.0); }\nbool isParallel(Point a1, Point a2, Point b1, Point b2) { return isParallel(a1 - a2, b1 - b2); }\nbool isParallel(Segment s1, Segment s2) { return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0); }\n\n//?°???±\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / base.norm();\n\treturn s.p1 + base*r;\n}\n//????°?\nPoint reflect(Segment s, Point p) { return p + (project(s, p) - p)*2.0; }\n\n//??????(p0,p1)????????????p2???????????¢???\nenum { ONLINE_FRONT = -2, CLOCKWISE, ON_SEGMENT, COUNTER_CLOCKWISE, ONLINE_BACK };\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0, b = p2 - p0;\n\tif (cross(a, b) > EPS)return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS)return CLOCKWISE;\n\tif (dot(a, b) < -EPS)return ONLINE_BACK;\n\tif (a.norm() < b.norm())return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\n//?????????????????????\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n\treturn (ccw(p1, p2, p3)*ccw(p1, p2, p4) <= 0 &&\n\t\tccw(p3, p4, p1)*ccw(p3, p4, p2) <= 0);\n}\nbool intersect(Segment s1, Segment s2) { return intersect(s1.p1, s1.p2, s2.p1, s2.p2); }\n//???????????????\nPoint getCrossPoint(Segment s1, Segment s2) {\n\tVector base = s2.p2 - s2.p1;\n\tdouble a1 = abs(cross(base, s1.p1 - s2.p1)); //area1\n\tdouble a2 = abs(cross(base, s1.p2 - s2.p1)); //area2\n\tdouble t = a1 / (a1 + a2);\n\treturn s1.p1 + (s1.p2 - s1.p1)*t;\n}\n\n//2??????????????¢\ndouble getDistance(Point a, Point b) { return (a - b).abs(); }\n//??´?????¨???????????¢\ndouble getDistanceLP(Line l, Point p) { return abs(cross(l.p2 - l.p1, p - l.p1) / (l.p2 - l.p1).abs()); }\n//????????¨???????????¢\ndouble getDistanceSP(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0)return (p - s.p1).abs();\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0)return (p - s.p2).abs();\n\treturn getDistanceLP(s, p);\n}\n//????????¨??????????????¢\ndouble getDistance(Segment s1, Segment s2) {\n\tif (intersect(s1, s2))return 0.0;\n\treturn\tmin(\n\t\tmin(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n\t\tmin(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2))\n\t);\n}\n\nint main() {\n\tPoint p[3];\n\tcin >> p[0].x >> p[0].y >> p[1].x >> p[1].y;\n\tint q; cin >> q;\n\tfor (int i = 0; i < q; i++) {\n\t\tcin >> p[2].x >> p[2].y;\n\t\tswitch (ccw(p[0], p[1], p[2])) {\n\t\tcase ONLINE_BACK:\n\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t\tbreak;\n\t\tcase CLOCKWISE:\n\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\t\tbreak;\n\t\tcase ON_SEGMENT:\n\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t\tbreak;\n\t\tcase COUNTER_CLOCKWISE:\n\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t\tbreak;\n\t\tcase ONLINE_FRONT:\n\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tcout << \"ERROR\" << endl;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define REP(i,n) for (long long i=0;i<(n);i++)\n#define FOR(i,a,b) for (long long i=(a);i<(b);i++)\n#define RREP(i,n) for(long long i=n;i>=0;i--)\n#define RFOR(i,a,b) for(long long i=(a);i>(b);i--)\n#define dump1d_arr(array) REP(i,array.size()) cerr << #array << \"[\" << (i) << \"] ==> \" << (array[i]) << endl;\n#define dump2d_arr(array) REP(i,array.size()) REP(j,array[i].size()) cerr << #array << \"[\" << (i) << \"]\" << \"[\" << (j) << \"] ==> \" << (array[i][j]) << endl;\n#define dump(x)  cerr << #x << \" => \" << (x) << endl;\n#define dumpP(p) cerr << \"( \" << p.first << \" , \" << p.second << \" )\" << ends;\n#define CLR(vec) { REP(i,vec.size()) vec[i] = 0; } \n#define SORT(c) sort((c).begin(),(c).end())\n#define MIN(vec) *min_element(vec.begin(), vec.end());\n#define MAX(vec) *max_element(vec.begin(), vec.end());\n#define UNIQ(vec) vec.erase(unique(vec.begin(), vec.end()),vec.end());\n#define IN(n,m)  (!(m.find(n) == m.end()))\n#define ENUM(m) for (auto itr = m.begin(); itr != m.end(); ++itr)\n#define dump_MAP(m) for(auto itr = m.begin(); itr != m.end(); ++itr) { cerr << itr->first << \" --> \"  << itr->second << endl; }\n#define FINDL(vec,x) (lower_bound(vec.begin(),vec.end(),x) - vec.begin())\n#define FINDU(vec,x) (upper_bound(vec.begin(),vec.end(),x) - vec.begin())\n#define ROUND(N) setprecision(N)\nusing namespace std;\nconstexpr long double pi = M_PI;\nconstexpr double eps = 1e-10;\nconstexpr long mod = 1000000007;\nconstexpr short shINF = 32767;\nconstexpr long loINF = 2147483647;\nconstexpr long long llINF = 9223372036854775807;\ntypedef long long LL;\ntypedef vector<LL> VI;\ntypedef vector<VI> VVI;\ntypedef vector<string> VS;\ntypedef pair<LL,LL> pr;\ntypedef vector<pr> VP;\nstruct Order {\n  bool operator() (pr const& a,pr const& b) const {\n    return a.first > b.first || ((a.first == b.first) && (a.second > b.second));\n  }\n};\ntypedef struct _PT {\n  long double x, y;\n  _PT() {}\n  _PT(long double x,long double y) : x(x), y(y) {} \n  _PT operator + (_PT p){\n     return _PT(x + p.x, y + p.y);\n  }\n  _PT operator - (_PT p){\n     return _PT(x - p.x, y - p.y);\n  }\n  _PT operator * (long double d){\n     return _PT(d*x, d*y);\n  }\n  bool operator <(const struct _PT &e) const{\n     return x == e.x? (y < e.y) : x < e.x;\n  }\n  bool operator >(const struct _PT &e) const{\n     return x == e.x? (y > e.y) : x > e.x;\n  }\n\n  // --オプジェクトは位置ベクトル--\n\n  long double dist(_PT p){ //点pとの距離の2乗\n     return (x-p.x)*(x-p.x) + (y-p.y)*(y-p.y);\n  }\n\n  // --オブジェクトは幾何ベクトル--\n  \n  long double dot(_PT v){ //ベクトルvとの内積\n     return x * v.x + y * v.y;\n  }\n  \n  long double det(_PT v){ // ベクトルvとの外積\n     return x * v.y - v.x * y;\n  }\n\n  long double norm(void){ // ベクトルのノルム\n    return sqrt(x*x + y*y);\n  }\n\n  long double twiceNorm(void){ // ノルムの2乗\n    return x*x + y*y;\n  }\n\n  bool is_parallel(_PT v) { //ベクトルvと平行か(外積 = 0か)\n    return (abs(x * v.y - v.x * y) < eps);\n  }\n}P;\n\nint main(void) {\n  double px,py,qx,qy,rx,ry;\n  cin >> px >> py >> qx >> qy;\n  double base = atan2((qy-py),(qx-px));\n  int n;\n  cin >> n;\n  REP(i,n) {\n    cin >> rx >> ry;\n    double rad = atan2((ry-py),(rx-px));\n    if (abs(rad-base) < eps) {\n      if (P (rx-px,ry-py) > P (qx-px,qy-py)) cout << \"ONLINE_FRONT\" << endl;\n      else cout << \"ON_SEGMENT\" << endl;\n    }\n    else if (abs(abs(rad - base)-pi) < eps) cout << \"ONLINE_BACK\" << endl;\n    else if ((rad > base && (rad - base) < pi) || (rad < base && (base - rad) > pi)) cout << \"COUNTER_CLOCKWISE\" << endl;\n    else cout << \"CLOCKWISE\" << endl;\n  }\n\n}\n"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\nusing namespace std;\n\n//?????????\n#pragma region MACRO \n#define putans(x)  std::cerr << \"answer: \" ; cout << (x) << endl\n#define dputans(x) std::cerr << \"answer: \"; cout << setprecision(13) << (double)(x) << endl\n#define REP(i,a,n) for(int i=(a); i<(int)(n); i++)\n#define RREP(i,a,n) for(int i=(int)(n-1); i>= a; i--)\n#define rep(i,n) REP(i,0,n)\n#define rrep(i,n) RREP(i,0,n)\n#define all(a) begin((a)),end((a))\n#define mp make_pair\n#define exist(container, n) ((container).find((n)) != (container).end())\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n#ifdef _DEBUG //???????????????????????????????????????????????????\nstd::ifstream ifs(\"data.txt\");\n#define put ifs >>\n#else //?????£????????????????????§?????????????????????\n#define put cin >>\n#endif\n#pragma endregion\n\n//???????????°??????????????´\n#pragma region CODING_SUPPORT\n#define dbg(var0) { std::cerr << ( #var0 ) << \"=\" << ( var0 ) << endl; }\n#define dbg2(var0, var1) { std::cerr << ( #var0 ) << \"=\" << ( var0 ) << \", \"; dbg(var1); }\n#define dbg3(var0, var1, var2) { std::cerr << ( #var0 ) << \"=\" << ( var0 ) << \", \"; dbg2(var1, var2); }\n#define dbgArray(a,n) {std::cerr << (#a) << \"=\";  rep(i,n){std::cerr <<(a[i])<<\",\";} cerr<<endl;} \n#ifndef _DEBUG\n#define dbg1 {}\n#define dbg2 {}\n#define dbg3 {}\n#define dbgArray {}\n#endif \n#pragma endregion \n//typedef????????????????????????????¶????????????§?????????\n#pragma region TYPE_DEF\ntypedef long long ll;\ntypedef pair<int, int> pii; typedef pair<string, string> pss; typedef pair<int, string>pis;\ntypedef vector<string> vs; typedef vector<int> vi;\n#pragma endregion\n//??????????????°(???????????????????????§??????)\n#pragma region CONST_VAL\n#define PI (2*acos(0.0))\n#define EPS (1e-10)\n#define MOD (ll)(1e9 + 7)\n#define INF (ll)(1e9)\n#pragma endregion\n\nclass Point {//????????????????????????\npublic:\n\tdouble x, y;\n\tPoint(double x = 0, double y = 0) : x(x), y(y) {}\n\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a) { return Point(x * a, y * a); }\n\tdouble operator * (Point p) { return dot(p); }\n\tPoint operator / (double a) { return Point(x / a, y / a); }\n\n\tdouble abs() { return sqrt(norm()); }\n\tdouble norm() { return x*x + y*y; }\n\n\tbool operator < (const Point &p) const { return  x != p.x ? x < p.x : y < p.y; }\n\tbool operator == (const Point &p) const { return  fabs(x - p.x) < EPS && fabs(y - p.y) < EPS; }\n\t//???????????????\n\tdouble dot(Point p) { return x * p.x + y * p.y; }\n\tdouble cross(Point p) { return x * p.y - y * p.x; }\n\n\n};\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0) :c(c), r(r) {}\n};\nstruct Segment {//??????\n\tPoint p1, p2;\n};\n\ntypedef Point Vector;\ntypedef Segment Line;//??´???\ntypedef vector<Point> Polygon;\n\ndouble v_norm(Point p) { return p.x * p.x + p.y * p.y; }\ndouble abs(Point p) { return v_norm(p); }\ndouble dot(Point p, Point q) { return p.x * q.x + p.y * q.y; }\ndouble cross(Point p, Point q) { return p.x * q.y - p.y * q.x; }\n\n\n\n\n\n//??´????????????\nbool isOrthogonal(Vector a, Vector b) { return equals(a*b, 0.0); }\nbool isParallel(Vector a, Vector b) { return equals(cross(a, b), 0.0); }\n\n//??????s???????????????p????°???±\nPoint projection(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(( p - s.p1 ), base) / v_norm(base);\n\treturn s.p1 + base*r;\n}\n//??????s???????????????p???????°?\nPoint reflection(Segment s, Point p) { return p + ( projection(s, p) - p ) * 2; }\n\n\n\n\n//double getDistance(Point a, Point b) { return ( a - b ).abs; }\n//double getDistanceLP(Line l, Point p) { return abs(cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1)); }\n//double getDistanceSP(Segment s, Point p) {\n//\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0) return abs(p - s.p1);\n//\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0) return abs(p - s.p2);\n//}\n\n//double getDistance(Segment s1, Segment s2) {\n//\tif (intersect(s1, s2)) return 0;\n//\treturn min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2))\n//\t         , min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2));\n//}\n\n//p1-p0???????????¨?????? p2-p0 ???2????????????????????????\nstatic const int COUNTER_CLOCKWISE = 1;//???????¨???????\nstatic const int CLOCKWISE = -1;//????¨???????\nstatic const int ONLINE_BACK = 2;//????????´?????¶p2,p0,p1??????\nstatic const int ONLINE_FRONT = -2;//????????´??????p0,p1,p2??????\nstatic const int ON_SEGMENT = 0;//p2???p0,p1??????????????´???\nint ccw(Point p0, Point p1, Point p2) {//????¨????????????¢??°\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS) return CLOCKWISE;\n\tif (dot(a, b) < -EPS) return ONLINE_BACK;\n\tif (a.norm() < b.norm()) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n////??????p1p2??¨p3p4???????????????\n//bool intersect(Point p1, Point p2, Point p3, Point p4) {return ( (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0) && (ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0));}\n//bool intersect(Segment s1, Segment s2) {return intersect(s1.p1 , s1.p1, s2.p1, s2.p2);}\n//\n//Point getCrossPoint(Segment s1, Segment s2) {\n//\tVector base = s2.p2 - s2.p1;\n//\tdouble d1 = abs(cross(base , s1.p1 - s2.p1));\n//\tdouble d2 = abs(cross(base , s1.p2 - s2.p1));\n//\tdouble t = d1 / ( d1 + d2 );\n//\treturn s1.p1 + (s1.p2 - s1.p1 ) * t;\n//}\n//\n////??´?????¨????????????????????????\n//pair<Point, Point> getCrossPoints(Circle c, Line l) {\n//\t//assert(intersect(c, i)); ?????????????????´????????????????????????\n//\tVector pr = projection(c, l);\n//\tVector e = ( l.p2 - l.p1 ) / abs(l.p2 - l.p1);\n//\tdouble base = sqrt(c.r * c.r - norm(pr - c.c));\n//\treturn mp(pr + e * base, pr - e * base);\n//}\n//\n////????????????????????????\n//static const int IN_POLYGON = 2;//????§???¢????????¨\n//static const int OUT_POLYGON = 1;//????§???¢????????¨\n//static const int ON_POLYGON = 0;//????§???¢????????????\n//int contains(Polygon g, Point p) {\n//\tint n = g.size();\n//\tbool x = false;\n//\trep(i, n) {\n//\t\tPoint a = g[i] - p, b = g[( i + 1 ) % n] - p;\n//\t\tif (abs(cross(a, b)) < EPS && dot(a, b) < EPS) return OUT_POLYGON;\n//\t\tif (a.y > b.y) swap(a, b);\n//\t\tif (a.y < EPS && EPS < b.y && cross(a, b)) x = !x;\n//\t}\n//\treturn ( x ? IN_POLYGON : ON_POLYGON );\n//}\n//\n////??????\n//Polygon ConvexHull(Polygon s) {\n//\tPolygon u, l;\n//\tif (s.size() < 3) return s;\n//\tsort(all(s));\n//\tu.push_back(s[0]);\n//\tu.push_back(s[1]);\n//\tl.push_back(s[s.size() - 1]);\n//\tl.push_back(s[s.size() - 2]);\n//\n//\tfor (int i = 2; i < s.size(); i++) {\n//\t\tfor (int n = u.size(); ( n >= 2 ) && ( ccw(u[n - 2], u[n - 1], s[i]) != CLOCKWISE ); n--) {\n//\t\t\tu.pop_back();\n//\t\t}\t\n//\t\tu.push_back(s[i]);\n//\t}\n//\n//\tfor (int i = s.size()-3; i >= 0; i--) {\n//\t\tfor (int n = l.size(); n >= 2 && ccw(l[n - 2], l[n - 1], s[i]) != CLOCKWISE; n--)l.pop_back();\n//\t\tl.push_back(s[i]);\n//\t}\n//\n//\treverse(all(l));\n//\tfor (int i = u.size() - 2; i >= 1; i--) l.push_back(u[i]);\n//\treturn l;\n//}\n\n/*\n#define i(x) int x; scanf(\"%d\",&x);\n#define l(x) ll x; scanf(\"%lld\",&x);\n#define d(x) double  x; scanf(\"%lf\",&x);\n*/\n//??????????£?????????°???\n//https://www23.atwiki.jp/akitaicpc/pages/65.html\n\n\nint main() {\n\t/*double xp1, yp1, xp2, yp2; put xp1 >> yp1 >> xp2 >> yp2;\n\tSegment s;\n\ts.p1 = Point(xp1, yp1);\n\ts.p2 = Point(xp2, yp2);\n\n\tint n; put n;\n\trep(i, n) {\n\t\tPoint p;\n\t\tput p.x >> p.y;\n\t\tPoint prj =reflection(s, p);\n\t\tcout << setprecision(13) << prj.x << \" \" << prj.y << endl;\n\t}*/\n\n\tPoint p0, p1;\n\tput p0.x >> p0.y >> p1.x >> p1.y;\n\tint q; put q;\n\trep(i, q) {\n\t\tPoint p2; put p2.x >> p2.y;\n\t\tswitch (ccw(p0,p1,p2)) {\n\t\tcase 1:\t\n\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t\tbreak;\n\t\tcase -1:\n\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t\tbreak;\n\t\tcase -2:\n\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t\tbreak;\n\t\tcase 0:\n\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\t\n\t}\n\tstatic const int COUNTER_CLOCKWISE = 1;//???????¨???????\n\tstatic const int CLOCKWISE = -1;//????¨???????\n\tstatic const int ONLINE_BACK = 2;//????????´?????¶p2,p0,p1??????\n\tstatic const int ONLINE_FRONT = -2;//????????´??????p0,p1,p2??????\n\tstatic const int ON_SEGMENT = 0;//p2???p0,p1??????????????´???\n\n\t//int n; put n;\n\t//Polygon p;\n\t//rep(i, n) {\n\t//\tdouble x, y; put x >> y;\n\t//\tp.push_back(Point(x,y));\n\t//}\n\t//Polygon k = ConvexHull(p);\n\t//cout << k.size() << endl;\n\t//rep(i, k.size()) {\n\t//\tcout << k[i].x << \" \" << k[i].y << endl;\n\t//}\n\n\n\t//???????????¬??????????????\\???????????????\n//\tauto getI = [&]()->auto { int tmp; put tmp; return tmp; };\n//\tauto getLL = [&]()->auto { ll tmp; put tmp; return tmp; };\n//\tauto getS = [&]()->auto { string tmp; put tmp; return tmp; };\n//\tbool filled[1000][1000];\n//\tfill(*filled, *filled + 1000 * 1000, false);\n//\tint vx[4] = { 1,0,-1,0 };\n//\tint vy[4] = { 0,1,0,-1 };\n//\tPolygon sheep;\n//\tPolygon convex_sheep;\n//\tint num = 0;\n//\tint h, w; put h >> w;\n//\trep(i, h) {\n//\t\tstring s; put s;\n//\t\trep(j, s.size()) {\n//\t\t\tif (s[j] == 'X') {\n//\t\t\t\tif (i == 0 || j == 0) {\n//\t\t\t\t\tputans(-1);\n//\t\t\t\t\tgoto END;\n//\t\t\t\t}\n//\t\t\t\trep(k, 4) {\n//\t\t\t\t\tif (!filled[i + vx[k]][j + vy[k]]) {\n//\t\t\t\t\t\tsheep.push_back(Point(i + vx[k],j + vy[k]));\n//\t\t\t\t\t\tfilled[i + vx[k]][j + vy[k]] = true;\n//\t\t\t\t\t}\n//\t\t\t\t}\n//\t\t\t}\n//\t\t}\n//\t}\n//\tconvex_sheep = ConvexHull(sheep);\n//\n//\trep(i, convex_sheep.size()) {\n//\t\tPoint s = convex_sheep[i % convex_sheep.size()];\n//\t\tPoint g = convex_sheep[(i + 1) % convex_sheep.size()];\n//\t\tint mandist = abs(s.x - g.x)+abs(s.y - g.y)-1;\n//\t\tmax(1.0, abs(s.x - g.x)) + max(1.0, abs(s.y - g.y))\n//\t\tnum += mandist;\n//\t} \n//\tputans(num);\n//END:\n\treturn 0;\n}\n\n//\n//int n, a, b; put n >> a >> b;\n//\tvi t;\n//\trep(i, n) {\n//\t\tt.push_back(get());\n//\t}\n//\tint count = 0;\n//\trep(i, n) {\n//\t\tif (t[i] < a || b <= t[i])count++;\n//\t}\n//\tputans(count);\n\n//\n//\tset<string> list;\n//\tint ans = 0;\n//\tint n; put n;\n//\tint k; put k;\n//\tint numAlphabet[26];\n//\tfill(all(numAlphabet), 0);\n//\trep(i, n) {\n//\t\tstring s; put s;\n//\t\tif (exist(list, s))continue;\n//\t\tlist.insert(s);\n//\t\tnumAlphabet[s[0] - 'A']++;\n//\t}\n//\tsort(all(numAlphabet),greater<int>());\n//\twhile (true) {\n//\t\trep(i, k) {\n//\t\t\tif (numAlphabet[i] == 0) goto END;\n//\t\t\telse numAlphabet[i]--;\n//\t\t}\n//\t\tsort(all(numAlphabet), greater<int>());\n//\t\tans++;\n//\t}\n//END:\n//\tputans(ans);\n\n\n\t//int t; put t;\n\t//rep(i, t) {\n\t//\tint n, d; put n >> d;\n\t//\tif (n == 1) {\n\t//\t\tputans(d);\n\t//\t\tcontinue;\n\t//\t}\n\t//\tputans(n % 2 != 0 ? ( n - 1 ) * 127 + d : ( n - 1 ) * 127 + ( 127 ^ d ));\n\t//}\n\n\n//\n//int n; put n;\n//string s1, s2;\n//string r;\n//string patan1[4] = { \".\",\"#\",\".\",\"#\" };\n//string patan2[4] = { \".\",\".\",\"#\",\"#\" };\n//bool front = true;\n//rep(j, 420 / 4) {\n//\tif (front) {\n//\t\trep(i, 4) {\n//\t\t\tcout << s1 + patan1[i] + \"\\n\" << s2 + patan2[i] << endl;\n//\t\t\tcin >> r;\n//\t\t\tif (r == \"T\") {\n//\t\t\t\ts1 += patan1[i];\n//\t\t\t\ts2 += patan2[i];\n//\t\t\t\tbreak;\n//\t\t\t}\n//\t\t\tif (r == \"F\" && i == 3) {\n//\t\t\t\tfront = !front;\n//\t\t\t}\n//\t\t\tif (r == \"end\")goto END;\n//\t\t}\n//\t}\n//\telse {\n//\t\trep(i, 4) {\n//\t\t\tcout << patan1[i] + s1 + \"\\n\" << patan2[i] + s2 << endl;\n//\t\t\tcin >> r;\n//\t\t\tif (r == \"T\") {\n//\t\t\t\ts1 = patan1[i] + s1;\n//\t\t\t\ts2 = patan2[i] + s2;\n//\t\t\t\tbreak;\n//\t\t\t}\n//\t\t\tif (r == \"F\" && i == 3) {\n//\t\t\t\tfront = !front;\n//\t\t\t}\n//\t\t\tif (r == \"end\")goto END;\n//\t\t}\n//\t}\n//\n//}\n//END:\n//cout << endl;"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nstruct Point\n{\n\tint x;\n\tint y;\n};\n\nbool inPoint(Point a, Point b, Point c)\n{\n\tif(min(a.x,c.x)<=b.x && max(a.x,c.x)>=b.x && min(a.y,c.y)<=b.y && max(a.y,c.y)>=b.y) return true;\n\treturn false;\n}\n\nint orientation(Point a, Point b, Point c)\n{\n\tint val = (b.x-a.x)*(c.y-a.y)-(b.y-a.y)*(c.x-a.x);\n\t//clockwise\n\tif(val<0) return -1;\n\t//counter\n\telse if(val>0) return 1;\n\t//collinear\n\telse return 0;\n}\n\nvoid turn(Point a, Point b, Point c)\n{\n\tint val = orientation(a,b,c);\n\tif(val==-1) cout<<\"CLOCKWISE\"<<endl;\n\telse if(val==1) cout<<\"COUNTER_CLOCKWISE\"<<endl;\n\telse if(inPoint(a, c, b)) cout<<\"ON_SEGMENT\"<<endl;\n\telse if(inPoint(c, a, b)) cout<<\"ONLINE_BACK\"<<endl;\n\telse cout<<\"ONLINE_FRONT\"<<endl;\n}\n\nint main()\n{\n\tint x1,y1,x2,y2;\n\tint q;\n\tcin>>x1>>y1>>x2>>y2;\n\tcin>>q;\n\tPoint a = {x1,y1};\n\tPoint b = {x2,y2};\n\tint x3,y3;\n\tfor(int i=0;i<q;i++)\n\t{\n\t\tcin>>x3>>y3;\n\t\tPoint c = {x3,y3};\t\n\t\tturn(a,b,c);\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <cstdio>\nusing namespace std;\n\nstruct Point {\n  double x;\n  double y;\n};\n\ndouble norm(Point a, Point b) {\n  return sqrt( pow(a.x - b.x, 2) + pow(a.y - b.y, 2) );\n}\n\ndouble dot(Point p0, Point p1, Point p2) {\n  return (p1.x - p0.x) * (p2.x - p0.x) + (p1.y - p0.y) * (p2.y - p0.y);\n}\n\ndouble cross(Point p0, Point p1, Point p2) {\n  return ( p1.x - p0.x ) * ( p2.y - p0.y ) - ( p2.x - p0.x) * (p1.y - p0.y);\n}\n\nint main(void) {\n  int q;\n  Point p0, p1, p2;\n  cin >> p0.x >> p0.y >> p1.x >> p1.y;\n  cin >> q;\n\n  for(int i = 0; i < q; i++) {\n    cin >> p2.x >> p2.y;\n    double cro = cross(p0, p1, p2);\n    //printf(\"cro = %lf\\n\", cro);\n    if(cro > 0) \n      printf(\"COUNTER_CLOCKWISE\\n\");\n    else if(cro < 0)\n      printf(\"CLOCKWISE\\n\");\n    else {\n      double norm10 = norm(p1, p0);\n      double norm20 = norm(p2, p0);\n      //printf(\"%lf %lf\\n\", norm10, norm20);\n      if(norm20 == 0) {\n        printf(\"ON_SEGMENT\\n\");\n        continue;\n      }\n      double cos = dot(p0, p1, p2) / ( norm10 * norm20 );\n      if(cos >= 0) {\n        if( norm10 < norm20)\n          printf(\"ONLINE_FRONT\\n\");\n        else \n          printf(\"ON_SEGMENT\\n\");\n      }\n      else {\n        printf(\"ONLINE_BACK\\n\");\n      }\n    }\n  }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<vector>\n#include<algorithm>\n#include<utility>\n#include<numeric>\n#include<iostream>\n#include<array>\n#include<string>\n#include<sstream>\n#include<stack>\n#include<queue>\n#include<list>\n#include<functional>\n#define _USE_MATH_DEFINES\n\n#include<math.h>\n#include<map>\n\n#define INF 200000000\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef pair<ll, ll> pll;\ntypedef pair<ll, int> pli;\n\nint main()\n{\n\tcin.tie(0);\n\tios::sync_with_stdio(false);\n\n\tdouble x1, x2, y1, y2, x3, y3;\n\tcin >> x1 >> y1 >> x2 >> y2;\n\n\tx3 = (x2 - x1);\n\ty3 = (y2 - y1);\n\n\tint q;\n\tcin >> q;\n\n\tfor (int i = 0; i < q; i++)\n\t{\n\t\tdouble px, py, px2, py2;\n\t\tcin >> px >> py;\n\n\t\tpx2 = (px - x1);\n\t\tpy2 = (py - y1);\n\n\t\tif ((px2*px2 + py2*py2) <= 0.0000001 || (abs(px2 - x3) <= 0.000000001&&abs(py2 - y3) <= 0.000000001))\n\t\t{\n\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t\tcontinue;\n\t\t}\n\n\t\tdouble cross = (py2*x3 - px2*y3);\n\t\tif (abs(cross) <= 0.00000000001)\n\t\t{\n\t\t\tif ((px2*x3 + py2*y3)>0)\n\t\t\t{\n\t\t\t\tif ((x3*x3 + y3*y3) < (px2*px2 + py2*py2))\n\t\t\t\t{\n\t\t\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (cross > 0)\n\t\t\t{\n\t\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <unistd.h>\n\n#include <bits/stdc++.h>\n\nconst int INF = (1 << 29);\ntypedef std::uint_fast32_t u32;\ntypedef std::int_fast32_t s32;\ntypedef std::uint_fast64_t u64;\n\ntemplate<typename T>\ninline std::istream& operator >> (std::istream& is, std::complex<T>& C) {\n  T R, I;\n  std::cin >> R >> I;\n  C = std::complex<T>(R, I);\n  return is;\n}\n\ntemplate<typename T>\nclass n32 {\n  const double EPS = 0.000001;\npublic:\n  int operator () (std::complex<T> L1, std::complex<T> L2, std::complex<T> P) {\n    if( ((P - L1) * conj(L2 - L1)).imag() > EPS ) return 1;\n    else if( ((P - L1) * conj(L2 - L1)).imag() < -EPS ) return -1;\n    return 0;\n  }\n};\n\nn32<double> up_and_down_decision;\n\nint main() {\n\n  std::complex<double> L1, L2;\n  std::cin >> L1 >> L2;\n\n  int n;\n  std::cin >> n;\n  for(int i = 0; i < n; ++i) {\n    std::complex<double> P;\n    std::cin >> P;\n    \n    auto res = up_and_down_decision(L1, L2, P);\n    if( res == 1 ) {\n      std::cout << \"COUNTER_CLOCKWISE\" << std::endl;\n    }\n    else if( res == -1 ) {\n      std::cout << \"CLOCKWISE\" << std::endl;\n    }\n    else {\n      if( L2.real() < P.real() ) {\n        std::cout << \"ONLINE_FRONT\" << std::endl;\n      }\n      else if( P.real() < L1.real() ) {\n        std::cout << \"ONLINE_BACK\" << std::endl;\n      }\n      else {\n        std::cout << \"ON_SEGMENT\" << std::endl;\n      }\n    }\n  }\n  \n  return 0;\n};"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nstruct cww{cww(){ios::sync_with_stdio(false);cin.tie(0);}}star;\n#define P(x) cout << (x) << \"\\n\"\n#define p(x) cout << (x)\n#define all(c) (c).begin(), (c).end()\n#define rall(c) (c).rbegin(), (c).rend()\n#define vv(type, c, m, n, i) vector<vector<type>> c(m, vector<type>(n, i));\n#define rep(i,a,n) for(int i=(a), i##_len=(n); i<i##_len; ++i)\n#define rrep(i,a,n) for(int i=(a), i##_len=(n); i>i##_len; --i)\n#define len(x) ((int)(x).size())\n#define mp make_pair\n#define eb emplace_back\n#define fi first\n#define se second\ntypedef long long ll;\ntypedef long double ld;\ntypedef vector<int> vi;\ntypedef vector<double> vd;\ntypedef vector<long long> vll;\ntypedef vector<string> vs;\ntypedef vector<bool> vb;\ntypedef complex<double> Point;\ntypedef Point Vector;\ntypedef pair<Point, Point> Segment;\ntypedef Segment Line;\nconstexpr double EPS = (1e-9L);\nenum CCW { ONLINE_FRONT = -2, CLOCKWISE, ON_SEGMENT, COUNTER_CLOCKWISE, ONLINE_BACK };\ndouble dot(const Point& p1, const Point& p2) { return (conj(p1) * p2).real(); }\ndouble cross(const Point& p1, const Point& p2) { return (conj(p1) * p2).imag(); }\nconstexpr bool eq(double a) { return abs(a) < EPS; }\nPoint project(Segment s, Point p) {\n\tVector base = s.fi - s.se;\n\tdouble r = dot(p - s.fi, base) / norm(base);\n\treturn s.fi + base * r;\n}\nPoint reflect(Segment s, Point p) { return p + (project(s, p) - p) * 2.0; }\nint ccw(const Point& p1, const Point& p2, const Point& p3) {\n\tPoint a = p2 - p1, b = p3 - p1;\n\tif (cross(a, b) > EPS) return 1;\n\tif (cross(a, b) < -EPS) return -1;\n\tif (dot(a, b) < -EPS) return 2;\n\tif (norm(a) < norm(b)) return -2;\n\treturn 0;\n}\nbool intersect(Point &p1, Point &p2, Point &p3, Point &p4) {\n\treturn (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n\t\t\tccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\nbool intersect(Segment &s1, Segment &s2) {\n\treturn intersect(s1.fi, s1.se, s2.fi, s2.se);\n}\ndouble getDistance(Point &a, Point &b) { return abs(a - b); }\ndouble getDistanceLP(Line &l, Point &p) {\n\treturn abs(cross(l.se - l.fi, p - l.fi) / abs(l.se - l.fi));\n}\ndouble getDistanceSP(Segment &s, Point &p) {\n\tif(dot(s.se - s.fi, p - s.fi) < 0.0) return abs(p - s.fi);\n\tif(dot(s.fi - s.se, p - s.se) < 0.0) return abs(p - s.se);\n\treturn getDistanceLP(s, p);\n}\ndouble getDistance(Segment &s1, Segment &s2) {\n\tif(intersect(s1, s2)) return 0.0;\n\treturn min(min(getDistanceSP(s1, s2.fi), getDistanceSP(s1, s2.se)),\n\t\t\t\tmin(getDistanceSP(s2, s1.fi), getDistanceSP(s2, s1.se)));\n}\nint main() {\n\tcout << setprecision(10) << fixed;\n\tdouble x0, y0, x1, y1; cin >> x0 >> y0 >> x1 >> y1;\n\tPoint p0(x0, y0), p1(x1, y1);\n\tint q; cin >> q;\n\tint res;\n\trep(i, 0, q) {\n\t\tcin >> x0 >> y0;\n\t\tres = ccw(p0, p1, Point(x0, y0));\n\t\tif(res == COUNTER_CLOCKWISE) P(\"COUNTER_CLOCKWISE\");\n\t\telse if (res == CLOCKWISE) P(\"CLOCKWISE\");\n\t\telse if (res == ONLINE_BACK) P(\"ONLINE_BACK\");\n\t\telse if (res == ONLINE_FRONT) P(\"ONLINE_FRONT\");\n\t\telse P(\"ON_SEGMENT\");\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define ll long long\n#define INF 1000000005\n#define MOD 1000000007\n#define EPS 1e-10\n#define rep(i,n) for(int i=0;i<n;++i)\n\nusing namespace std;\n\ntypedef pair<int,int>P;\n\nconst int MAX_N = 100005;\n\nint Q;\n\nvoid ccw(P p0,P p1,P p2)\n{\n\tP a = P(p1.first - p0.first,p1.second - p0.second);\n\tP b = P(p2.first - p0.first,p2.second - p0.second);\n\tll dot = a.first*b.first+a.second*b.second;\n\tll cross = a.first*b.second - a.second*b.first;\n\tll na = a.first*a.first+a.second*a.second;\n\tll nb = b.first*b.first+b.second*b.second;\n\tif(cross > EPS){\n\t\tprintf(\"COUNTER_CLOCKWISE\\n\");\n\t}else if(cross < -EPS){\n\t\tprintf(\"CLOCKWISE\\n\");\n\t}else if(dot < -EPS){\n\t\tprintf(\"ONLINE_BACK\\n\");\n\t}else if(na < nb){\n\t\tprintf(\"ONLINE_FRONT\\n\");\n\t}else{\n\t\tprintf(\"ON_SEGMENT\\n\");\n\t}\n}\n\nint main()\n{\n\tP p0,p1,p2;\n\tscanf(\"%d%d%d%d\",&p0.first,&p0.second,&p1.first,&p1.second);\n\tscanf(\"%d\",&Q);\n\trep(i,Q){\n\t\tscanf(\"%d%d\",&p2.first,&p2.second);\n\t\tccw(p0,p1,p2);\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\nusing namespace std;\nconst double eps=1e-10;\nstruct point{\n    double x,y;\n    point(double x=0,double y=0):x(x),y(y){}\n    point operator +(point a){\n        return point(x+a.x,y+a.y);\n    }\n    point operator -(point a){\n        return point(x-a.x,y-a.y);\n    }\n};\ntypedef point vector;\npoint p0,p1;\ndouble dot(vector a,vector b){\n    return a.x*b.x+a.y*b.y;\n}\ndouble cross(vector a,vector b){\n    return a.x*b.y-a.y*b.x;\n}\ndouble norm(vector a){\n    return a.x*a.x+a.y*a.y;\n}\nvoid ccw(point p1,point p2,point p3){\n    vector a=p2-p1,b=p3-p1;\n    if(cross(a,b)>eps){\n        printf(\"COUNTER_CLOCKWISE\\n\");\n        return;\n    }\n    if(cross(a,b)<-eps){\n        printf(\"CLOCKWISE\\n\");\n        return;\n    }\n    if(dot(a,b)<-eps){\n        printf(\"ONLINE_BACK\\n\");\n        return;\n    }\n    if(norm(a)<norm(b)){\n        printf(\"ONLINE_FRONT\\n\");\n        return;\n    }\n    printf(\"ON_SEGMENT\\n\");\n}\nint main(){\n    int n;\n    double x0,y0,x1,y1;\n    scanf(\"%lf%lf%lf%lf\",&x0,&y0,&x1,&y1);\n    p0=point(x0,y0),p1=point(x1,y1);\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;++i){\n        scanf(\"%lf%lf\",&x0,&y0);\n        ccw(p0,p1,point(x0,y0));\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <stack>\n#include <queue>\n#include <vector>\n#include <list>\n#include <set>\n#include <map>\n#include <algorithm>\n#include <cmath>\n\n#include <cstdio>\n\nusing namespace std;\n#define rep(i, n) for (int i = 0; i < (n); i++)\n#define repc(i, s, n) for (int i = (s); i <= (n); i++)\n#define rrep(i, n) for (int i = (n) - 1; i >= 0; i--)\n#define rrepc(i, s, n) for (int i = (s); i >= (n); i--)\ntypedef long long ll;\ntypedef unsigned long long ull;\n\n/*================================================\n\tGeometry\n================================================*/\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nconst int COUNTER_CLOCKWISE = 1;\nconst int CLOCKWISE = -1;\nconst int ONLINE_BACK = 2;\nconst int ONLINE_FRONT = -2;\nconst int ON_SEGMENT = 0;\n\nclass Point {\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0) : x(x), y(y) {}\n\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a) { return Point(a * x, a * y); }\n\tPoint operator / (double a) { return Point(x / a, y / a); }\n\n\tdouble abs() { return sqrt(norm()); }\n\tdouble norm() { return x * x + y * y; }\n\n\tbool operator < (const Point& p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point& p) const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\ntypedef Point Vector;\nstruct Segment { Point p1, p2; };\ntypedef Segment Line;\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0) : c(c), r(r) {}\n};\ntypedef vector<Point> Polygon;\n\ndouble dot(Vector a, Vector b) { return a.x * b.x + a.y * b.y; }\ndouble cross(Vector a, Vector b) { return a.x * b.y - a.y * b.x; }\n\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS) return CLOCKWISE;\n\tif (dot(a, b) < -EPS) return ONLINE_BACK;\n\tif (a.norm() < b.norm()) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\nbool intersect(Point p1, Point p2, Point p3, Point p4) { return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 && ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0); }\nbool intersect(Segment s1, Segment s2) { return intersect(s1.p1, s1.p2, s2.p1, s2.p2); }\n\ndouble Distance_PP(Point a, Point b) { return (a - b).abs(); }\ndouble Distance_PL(Point p, Line l) { return abs(cross(l.p2 - l.p1, p - l.p1)) / (l.p2 - l.p1).abs(); }\ndouble Distance_PS(Point p, Segment s) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0) return (p - s.p1).abs();\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0) return (p - s.p2).abs();\n\treturn Distance_PL(p, s);\n}\ndouble Distance_SS(Segment s1, Segment s2) {\n\tdouble op1, op2, op3, op4, distance;\n\n\tif (intersect(s1, s2)) return 0.0;\n\n\top1 = Distance_PS(s1.p1, s2);\n\top2 = Distance_PS(s1.p2, s2);\n\top3 = Distance_PS(s2.p1, s1);\n\top4 = Distance_PS(s2.p2, s1);\n\n\tdistance = min(op1, op2);\n\tdistance = min(distance, op3);\n\tdistance = min(distance, op4);\n\n\treturn distance;\n}\n\nint main()\n{\n\tint q;\n\tint result;\n\tPoint p0, p1, p2;\n\n\tcin >> p0.x >> p0.y >> p1.x >> p1.y;\n\tcin >> q;\n\trep(i, q) {\n\t\tcin >> p2.x >> p2.y;\n\n\t\tresult = ccw(p0, p1, p2);\n\t\tswitch (result)\n\t\t{\n\t\tcase COUNTER_CLOCKWISE:\n\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t\tbreak;\n\t\tcase CLOCKWISE:\n\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\t\tbreak;\n\t\tcase ONLINE_BACK:\n\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t\tbreak;\n\t\tcase ONLINE_FRONT:\n\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t\tbreak;\n\t\tcase ON_SEGMENT:\n\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <vector>\n#define EPS (1e-10)\n#include <iomanip>\n\nusing namespace std;\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int COLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\n//点\nclass Point {\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0) : x(x), y(y) { }\n\n\tPoint operator+(Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator-(Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator*(double a) { return Point(a * x, a * y); }\n\tPoint operator/(double a) { return Point(x / a, y / a); }\n\n\tbool operator<(const Point &p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator==(const Point &p) const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\n\nostream& operator<<(ostream& os, Point p) {\n\tos << p.x << \" \" << p.y;\n\treturn os;\n}\n\n//向量\ntypedef Point Vector;\n\n//线段\nstruct Segment {\n\tPoint p1, p2;\n};\n\n//直线\ntypedef Segment Line;\n\n//圆\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0) : c(c), r(r) { }\n};\n\n//多边形\ntypedef vector<Point> Polygon;\n\n//向量的内积，正交为0\ndouble dot(Vector a, Vector b) {\n\treturn a.x * b.x + a.y * b.y;\n}\n\n//向量的外积，平行为0\ndouble cross(Vector a, Vector b) {\n\treturn a.x * b.y - a.y * b.x;\n}\n\n//范数\ndouble norm(Vector v) { return v.x * v.x + v.y * v.y; }\n//绝对值\ndouble abs(Vector v) { return sqrt(norm(v)); }\n\n//投影\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / norm(base);\n\treturn s.p1 + base * r;\n}\n\n//映像\nPoint reflect(Segment s, Point p) {\n\treturn p + (project(s, p) - p) * 2.0;\n}\n\n//判断他们是逆时针还是顺时针\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS) return COLOCKWISE;\n\tif (dot(a, b) < -EPS) return ONLINE_BACK;\n\tif (norm(a) < norm(b)) return ONLINE_FRONT;\n\n\treturn ON_SEGMENT;\n}\n\nint main() {\n\n\t/*int x1, y1, x2, y2;\n\tint n;\n\tint x3, y3;\n\n\tcin >> x1 >> y1 >> x2 >> y2;\n\tPoint p1(x1, y1), p2(x2, y2);\n\tSegment s;\n\ts.p1 = p1, s.p2 = p2;\n\tcin >> n;\n\twhile (n--) {\n\t\tcin >> x3 >> y3;\n\t\tPoint p(x3, y3);\n\t\tPoint r = project(s, p);\n\t\tcout << setiosflags(ios::fixed) << setprecision(10);\n\t\tcout << r << endl;\n\t}\n\t*/\n\n\t/*int x1, y1, x2, y2;\n\t\tint n;\n\t\tint x3, y3;\n\n\t\tcin >> x1 >> y1 >> x2 >> y2;\n\t\tPoint p1(x1, y1), p2(x2, y2);\n\t\tSegment s;\n\t\ts.p1 = p1, s.p2 = p2;\n\t\tcin >> n;\n\t\twhile (n--) {\n\t\t\tcin >> x3 >> y3;\n\t\t\tPoint p(x3, y3);\n\t\t\tPoint r = reflect(s, p);\n\t\t\tcout << setiosflags(ios::fixed) << setprecision(10);\n\t\t\tcout << r << endl;\n\t\t}\n\t*/\n\tint x1, y1, x2, y2;\n\tint n;\n\tint x3, y3;\n\n\tcin >> x1 >> y1 >> x2 >> y2;\n\tPoint p1(x1, y1), p2(x2, y2);\n\tSegment s;\n\ts.p1 = p1, s.p2 = p2;\n\tcin >> n;\n\twhile (n--) {\n\t\tcin >> x3 >> y3;\n\t\tPoint p(x3, y3);\n\t\tint i = ccw(p1, p2, p);\n\t\tif (i == COUNTER_CLOCKWISE) {\n\t\t\tcout << \"COUNTER_CLOCKWISE\";\n\t\t} else if (i == COLOCKWISE) {\n\t\t\tcout << \"COLOCKWISE\";\n\t\t} else if (i == ONLINE_BACK) {\n\t\t\tcout << \"ONLINE_BACK\";\n\t\t} else if (i == ONLINE_FRONT) {\n\t\t\tcout << \"ONLINE_FRONT\";\n\t\t} else {\n\t\t\tcout << \"ON_SEGMENT\";\n\t\t}\n\t\tcout << endl;\n\t}\n\n\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<string>\n#include<algorithm>\n#include<cmath>\n#include<vector>\n#include<stack>\n#include<climits>\n#include<cstring>\n#include<queue>\nusing namespace std;\n\ndouble EPS = 1e-10;\n\ndouble add(double a, double b){\n\tif(abs(a+b) < EPS * (abs(a) + abs(b))) return 0;\n\treturn a+b;\n}\n\nstruct P{\n\tdouble x,y;\n\tP(){}\n\tP(double x, double y) : x(x), y(y){\n\t}\n\tP operator +(P p){\n\t\treturn P(add(x,p.x), add(y,p.y));\n\t}\n\tP operator -(P p){\n\t\treturn P(add(x,-p.x), add(y,-p.y));\n\t}\n\tP operator *(double d){\n\t\treturn P(d*x, d*y);\n\t}\n\tdouble dot (P p){\n\t\treturn add(x*p.x, y*p.y);\n\t}\n\tdouble det (P p){\n\t\treturn add(x*p.y, -y*p.x);\n\t}\n\tvoid print (){\n\t\tcout << x << \" \" << y <<endl;\n\t\treturn;\n\t}\n};\n\nvoid clockWise(P p0, P p1, P p2){\n\tP q1 = p1-p0;\n\tP q2 = p2-p0;\n\tif(!q1.det(q2)){\n\t\tif(q1.x/q2.x<0){\n\t\t\tcout << \"ONLINE_BACK\"<< endl;\n\t\t}else if(q1.x/q2.x>1){\n\t\t\tcout << \"ON_SEGMENT\"<<endl;\n\t\t}else{\n\t\t\tcout <<\"ONLINE_FRONT\" <<endl;\n\t\t}\n\t}else{\n\t\tif(q1.det(q2)>0){\n\t\t\tcout << \"COUNTER_CLOCKWISE \" <<endl;\n\t\t}else{\n\t\t\tcout <<\"CLOCKWISE\"<< endl;\n\t\t}\n\n\t}\n\treturn;\n}\n\nint main(){\n\tdouble x, y, q;\n\tcin >> x >> y ;\n\tP p0(x,y);\n\tcin >> x >> y ;\n\tP p1(x,y);\n\tcin >> q ;\n\n\tfor(int i=0;i<q;i++){\n\t\tcin >> x >> y ;\n\t\tP p2(x,y);\n\t\tclockWise(p0, p1, p2);\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<cstring>\n#include<vector>\n#include<set>\n#include<queue>\n#include<cstdlib>\n#include<algorithm>\n\nusing namespace std;\n#define pb push_back\n#define mp make_pair\n#define SZ(x) (int)(x).size()\n\ntypedef long long LL;\ntypedef pair<int, int> pii;\ntypedef pair<double, double> pdd;\ntypedef pair<LL, LL> pll;\n\nconst double eps = 1e-10;\nconst double PI = acos(-1.0);\n//const double PI = 3.14159265358979323846264338327950288419716939937510\nint dcmp(const double &x) { if (fabs(x) < eps) return 0; return x < 0 ? -1 : 1; }\nconst int MOD = 1e9 + 7;\nconst int INF = 2e9;\nconst double INF_d = 1e64;\n\ntemplate<class T> \nT qmod(T a, T b){ T ret = 1; while (b){ if (b & 1) ret *= a; b >>= 1; a *= a; } return ret; }\ntemplate<class T>\nT gcd(T a, T b){ return !b ? a : gcd(b, a % b); }\ntemplate<class T>\nT ex_gcd(T a, T b, T &x, T &y){\n    if (!b){ x = 1, y = 0; return a; }\n    T t, ret;\n    ret = ex_gcd(b, a % b, x, y);\n    t = x, x = y, y = t - a / b * y;\n    return ret;\n}\ntemplate<class T>\nT inv(T t, T p){ return t == 1 ? 1 : (p - p / t) * inv(p % t, p) % p; }\n// head\n\ntypedef double db;\n\nstruct point{\n    db x, y;\n    point(){}\n    point(db a, db b): x(a), y(b){}\n    point operator + (const point &p){ return point(x + p.x, y + p.y); }\n    point operator - (const point &p){ return point(x - p.x, y - p.y); }\n    point operator * (const db &k){ return point(x * k, y * k); }\n    point operator / (const db &k){ return point(x / k, y / k); }\n    db operator ^ (const point &p){ return x * p.y - y * p.x; }\n    db operator * (const point &p){ return x * p.x + y * p.y; }\n    bool operator == (const point &p){ return !dcmp(x - p.x) && !dcmp(y - p.y); }\n    bool operator != (const point &p){ return dcmp(x - p.x) || dcmp(y - p.y); }\n    bool operator < (const point &p){ return x == p.x ? y < p.y : x < p.x; }\n    void read(){\n        scanf(\"%lf%lf\", &x, &y);\n    }\n    void print(){\n        printf(\"%.10f %.10f\\n\", x, y);\n    }\n    point rotate(db &ang){ return point(x * cos(ang) - y * sin(ang), y * cos(ang) + x * sin(ang)); }\n    point norm() { return point(-y, x); }\n    db len() { return sqrt(x * x + y * y); }\n    db len2(){ return x * x + y * y; }\n};\n\npoint proj(point A, point B, point P){ // projection point of P in segment AB\n    point AB = B - A, AP = P - A;\n    return A + AB * (AP * AB / AB.len2());\n}\n\npoint refl(point A, point B, point P){ // reflection point of P int segment AB\n    return proj(A, B, P) * 2 - P;\n}\n\npoint a, b;\nint n;\n\nint main(){\n    a.read(), b.read();\n    scanf(\"%d\", &n);\n    for (int i = 0; i < n; i++){\n        point x; x.read();\n        int sgn = dcmp((b - a) ^ (x - a));\n        if (!sgn){\n            if (dcmp((b - a) * (x - a)) < 0){\n                puts(\"ONLINE_BACK\");\n            }\n            else{\n                if (dcmp((b - a).len() - (x - a).len()) < 0){\n                    puts(\"ONLINE_FRONT\");\n                }\n                else{\n                    puts(\"ON_SEGMENT\");\n                }\n            }\n        }\n        else{\n            if (sgn > 0){\n                puts(\"COUNTER_CLOCKWISE\");\n            }\n            else{\n                puts(\"CLOCKWISE\");\n            }\n        }\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\nusing UL = unsigned int;\nusing ULL = unsigned long long;\nusing LL = long long;\n#define rep(i,n) for(UL i=0; i<(n); i++)\n\nbool dblsame(double l, double r) {return abs(l-r) < abs(l) * 1e-10 + 1e-10;}\n\nstruct Vec{\n double x,y;\n Vec(double xx, double yy) : x(xx),y(yy) {}\n Vec operator+() const {return Vec(x,y);}\n Vec operator-() const {return Vec(-x,-y);}\n Vec operator+(const Vec& r) const {return Vec(x+r.x,y+r.y);}\n Vec operator-(const Vec& r) const {return Vec(x-r.x,y-r.y);}\n Vec operator*(double r) const {return Vec(x*r,y*r);}\n Vec operator/(double r) const {return Vec(x/r,y/r);}\n Vec& operator+=(const Vec& r) {*this=*this+r; return *this;}\n Vec& operator-=(const Vec& r) {*this=*this-r; return *this;}\n Vec& operator*=(double r) {*this=*this*r; return *this;}\n Vec& operator/=(double r) {*this=*this/r; return *this;}\n bool operator==(const Vec& r) const {return dblsame(x,r.x)&&dblsame(y,r.y);}\n bool operator!=(const Vec& r) const {return !(*this==r);} \n double operator*(const Vec& r) const {return x*r.x+y*r.y;}\n double abs() const {return sqrt(x*x+y*y);}\n double abs_squared() const {return x*x+y*y;}\n double product(const Vec& r) const {return x*r.y-y*r.x;}\n};\n\nVec InputVec(){\n double x,y; scanf(\"%lf%lf\",&x,&y);\n return Vec(x,y);\n}\n\nvoid PrintVec(Vec tg){\n printf(\"%.10f %.10f\",tg.x,tg.y);\n}\n\nint main() {\n Vec O = InputVec();\n Vec A = InputVec() - O;\n UL Q; scanf(\"%u\",&Q);\n rep(q,Q){\n  Vec B = InputVec() - O;\n  double p = A.product(B);\n  if(dblsame(p,0.0)){\n   double dot = A*B;\n   if(dot<0.0) printf(\"ONLINE_BACK\\n\");\n   else if(B.abs()>A.abs()) printf(\"ONLINE_FRONT\\n\");\n   else printf(\"ON_SEGMENT\\n\");\n  }\n  else{\n   if(p>0.0) printf(\"COUNTER_CLOCKWISE\\n\");\n   else printf(\"CLOCKWISE\\n\");\n  }\n  printf(\"\\n\");\n }\n return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\n#define rep(i, a, b) for (int i = a; i < (int)(b); ++i)\n#define rrep(i, a, b) for (int i = b - 1; i >= (int)(a); --i)\n\nusing namespace std;\nusing ll = long long;\nusing vi = vector<int>;\nusing vll = vector<ll>;\nusing vd = vector<double>;\nusing vvi = vector<vi>;\n\nconstexpr int MOD = 1000000007;\n\n// Data structures.\nstruct Point {\n    double x, y;\n    Point(double x = 0, double y = 0) : x(x), y(y) {}\n    Point(const Point& p) : x(p.x), y(p.y) {}\n\n    Point operator+(const Point& p) const { return Point(x + p.x, y + p.y); }\n    Point operator-(const Point& p) const { return Point(x - p.x, y - p.y); }\n    Point operator*(double k) const { return Point(k * x, k * y); }\n    Point operator/(double k) const { return Point(x / k, y / k); }\n\n    bool operator<(const Point& p) const { return x != p.x ? x < p.x : y < p.y; }\n    bool operator==(const Point& p) const { return fabs(x - p.x) < 1e-10 && fabs(y - p.y) < 1e-10; }\n\n    static double norm(const Point& p) { return sqrt(p.x * p.x + p.y * p.y); }\n    static double dot(const Point& p1, const Point& p2) { return p1.x * p2.x + p1.y * p2.y; }\n    static double cross(const Point& p1, const Point& p2) { return p1.x * p2.y - p1.y * p2.x; }\n};\n\nstruct Segment {\n    Point s, t;\n};\n\nint ccw(const Point& p1, const Point& p2, const Point& p) {\n    double cr = Point::cross(p2 - p1, p - p1);\n    if (cr > 0) return 1;\n    if (cr < 0) return 2;\n    if (Point::dot(p2 - p1, p - p1) < 0) { return 3; }\n    if (Point::dot(p - p2, p1 - p2) < 0) { return 4; }\n    return 5;\n}\n\nint main() {\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n\n    Point p1, p2;\n    cin >> p1.x >> p1.y >> p2.x >> p2.y;\n\n    int q;\n    cin >> q;\n\n    rep(i, 0, q) {\n        Point p;\n        cin >> p.x >> p.y;\n        int ans = ccw(p1, p2, p);\n        string s;\n        if (ans == 1) {\n            s = \"COUNTER_CLOCKWISE\";\n        } else if (ans == 2) {\n            s = \"CLOCKWISE\";\n        } else if (ans == 3) {\n            s = \"ONLINE_BACK\";\n        } else if (ans == 4) {\n            s = \"ONLINE_FRONT\";\n        } else {\n            s = \"ON_SEGMENT\";\n        }\n        cout << s << endl;\n    }\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n\ntemplate <class T>\nT abs(T x) {\n    return (x > 0) ? x : -x;\n}\n\nint main(int argc, const char * argv[]) {\n    long xp0, xp1, xp2, yp0, yp1, yp2;\n    int q;\n    \n    scanf(\"%ld %ld %ld %ld\", &xp0, &yp0, &xp1, &yp1);\n    scanf(\"%d\", &q);\n    \n    long v1x = xp1 - xp0;\n    long v1y = yp1 - yp0;\n    \n    for (int i = 0; i < q; ++i) {\n        scanf(\"%ld %ld\", &xp2, &yp2);\n        long v2x = xp2 - xp0;\n        long v2y = yp2 - yp0;\n        \n        long crossProd = v1x * v2y - v1y * v2x;\n        \n        if (crossProd > 0) {\n            puts(\"COUNTER_CLOCKWISE\");\n        } else if (crossProd < 0) {\n            puts(\"CLOCKWISE\");\n        } else if (v2x * v1x < 0) {\n            puts(\"ONLINE_BACK\");\n        } else if (abs(v1x) > abs(v2x)){\n            puts(\"ONLINE_FRONT\");\n        } else {\n            puts(\"ON_SEGMENT\");\n        }\n    }\n    \n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <sstream>\n#include <regex>\n#include <cstdio>\n#include <cmath>\n#include <cctype>\n#include <string>\n#include <vector>\n#include <list>\n#include <set>\n#include <map>\n#include <queue>\n#include <stack>\n#include <algorithm>\n#include <functional>\n\nusing namespace std;\nusing ll = long long int;\n#define rep(i,n) for(int i = 0; i < n; i++)\n#define FOR(i, a, b)  for(int i = (a); i < (b) ; i++)\n#define pb push_back\n#define SORT(v,n) sort(v, v+n)\n#define ALL(x) (x).begin(),(x).end()\n#define debug(x) cerr << #x << \": \" << x << '\\n'\n#define elif else if\n#define int ll\n//const int INF = 100100100;\nconst int INF = (1LL << 32);\nconst int MOD = (int)1e9 + 7;\nconst double EPS = 1e-9;\nint dx[8] = { 1, 0, -1, 0, 1, -1, -1, 1 };\nint dy[8] = { 0, 1, 0, -1, 1, 1, -1, -1 };\ntypedef vector<vector<int>> vvi;\ntypedef vector<vector<vector<int>>> vvvi;\n\n#define equals(a,b) (fabs((a) - (b)) < EPS)\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nclass Point {\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0) : x(x), y(y) {}\n\n\tPoint operator+(Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator-(Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator*(double a) { return Point(a * x, a * y); }\n\tPoint operator / (double a) { return Point(x / a, y / a); }\n\n\tdouble norm() { return x * x + y * y; }\n\tdouble abs() { return sqrt(norm()); }\n\n\tbool operator<(const Point & p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator==(const Point & p) const {\n\t\treturn fabs(x - p.x) < EPS and fabs(y - p.y) < EPS;\n\t}\n};\n\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\ndouble dot(Vector a, Vector b) {\n\treturn a.x* b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n\treturn a.x* b.y - a.y * b.x;\n}\n\nclass Segment {\npublic:\n\tPoint p1, p2;\n\tSegment(Point p1, Point p2) : p1(p1), p2(p2) {}\n};\n\ntypedef Segment Line;\n\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0) : c(c), r(r) {}\n};\n\n//直交判定\nbool isOrthogonal(Vector a, Vector b) {\n\treturn equals(dot(a, b), 0.0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n\treturn isOrthogonal(a1 - a2, b1 - b2);\n}\n\nbool isOrthogonal(Segment s1, Segment s2) {\n\treturn equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n//平行判定\nbool isParallel(Vector a, Vector b) {\n\treturn equals(cross(a, b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n\treturn isParallel(a1 - a2, b1 - b2);\n}\n\nbool isParallel(Segment s1, Segment s2) {\n\treturn equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n//線分sに対する点pの射影\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / base.norm();\n\treturn s.p1 + base * r;\n}\n\n//線分ｓに対する点ｐの反射\nPoint refrect(Segment s, Point p) {\n\treturn p + (project(s, p) - p) * 2.0;\n}\n\n//2点間の距離\ndouble getDistance(Point a, Point b) {\n\tPoint res = a - b;\n\treturn res.abs();\n}\n//点と直線の距離\ndouble getDistanceLP(Line l, Point p) {\n\treturn abs(cross(l.p2 - l.p1, p - l.p1) / Vector(l.p2 - l.p1).abs());\n}\n\n//線分ｓと点ｐの距離\ndouble getDistanceSP(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0) {\n\t\tPoint r = p - s.p1;\n\t\treturn r.abs();\n\t}\n}\n\n//counter clock wise\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS) return CLOCKWISE;\n\tif (dot(a, b) < -EPS) return ONLINE_BACK;\n\tif (a.norm() < b.norm()) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\n//線分と線分の交差判定\n//bool intersect(Segment s1, Segment s2) {\n//\t//return ( ccw())\n//}\n\n//線分と線分の距離\n//double getDistance(Segment s1, Segment s2) {\n//\tif (intersect(s1, s2)) return 0.0;\n//\treturn min(\n//\t\tmin(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n//\t\tmin(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2))\n//\t);\n//}\n\nsigned main() {\n\tios::sync_with_stdio(false);\n\tint x0, y0, x1, y1;\n\tcin >> x0 >> y0 >> x1 >> y1;\n\tPoint p0 = Point(x0, y0);\n\tPoint p1 = Point(x1, y1);\n\tint q;\n\tcin >> q;\n\trep(i, q) {\n\t\tint x2, y2;\n\t\tcin >> x2 >> y2;\n\t\tPoint p2 = Point(x2, y2);\n\t\tswitch (ccw(p0, p1, p2)) {\n\t\tcase COUNTER_CLOCKWISE :\n\t\t{\n\t\t\tcout << \"COUNTER_CLOCKWISE\\n\";\n\t\t\tbreak;\n\t\t}\n\t\tcase CLOCKWISE :\n\t\t{\n\t\t\tcout << \"CLOCKWISE\\n\";\n\t\t\tbreak;\n\t\t}\n\t\tcase ONLINE_BACK :\n\t\t{\n\t\t\tcout << \"ONLINE_BACK\\n\";\n\t\t\tbreak;\n\t\t}\n\t\tcase ONLINE_FRONT :\n\t\t{\n\t\t\tcout << \"ONLINE_FRONT\\n\";\n\t\t\tbreak;\n\t\t}\n\t\tcase ON_SEGMENT :\n\t\t{\n\t\t\tcout << \"ON_SEGMENT\\n\";\n\t\t\tbreak;\n\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define mset(a,b) memset(a,b,sizeof(a))\n#define lson l,m,rt<<1\n#define rson m+1,r,rt<<1|1\nusing namespace std;\ntypedef long long ll;\nconst ll maxn=1e4+200;\nconst int inf=0x3f3f3f3f;\nconst double EPS=1e-10;\n//typedef pair<int,int> PA;\ndouble add(double a,double b){//考虑误差的加法运算\n    if(abs(a+b)<EPS*(abs(a)+abs(b))) return  0;\n    return a+b;\n}\nclass Point{\npublic:\n\n    double x,y;\n    Point(){}\n    Point(double x,double y):x(x),y(y){\n    }\n    Point operator+ (Point p){\n        return Point(add(x,p.x),add(y,p.y));\n    }\n    Point operator -(Point p){\n        return Point(add(x,-p.x),add(y,-p.y));\n    }\n    Point operator *(double d){\n        return Point(x*d,y*d);\n    }\n    double dot(Point p){//外积 p1.p2  outside\n        return add(x*p.x,y*p.y);\n    }\n    double det(Point p){//内积 p1*p2    inner\n        return add(x*p.y,-y*p.x);\n    }\n    double len(){\n        return sqrt(add(x*x,y*y));\n    }\n};\nPoint operator *(double d,Point p){\n    return Point(p.x*d,p.y*d);\n}\nPoint getProjection(Point p1,Point p2,Point p){//p 在线段p1,p2上的投影坐标\n    double d1=1.0/(p2-p1).len();\n    Point ans=(p-p1).dot((p2-p1))*(p2-p1)*d1*d1;\n    return ans+p1;\n}\nPoint getReflection(Point p1,Point p2,Point p){//p 关于线段p1 p2的 反射坐标\n    return 2.0*getProjection(p1,p2,p)-p;\n}\ndouble getDistance(Point a,Point b){\n    return (b-a).len();\n}\nint seg(double x){\n    if(abs(x)<EPS)  return 0;\n    if(x<0) return -1;\n    else return 1;\n}\nint getDir(Point p,Point p1,Point p2){//返回 p2 关于p 在p1的什么方向\n        int a=seg((p1-p).det(p2-p));\n        int b=seg((p1-p).dot(p2-p));\n        if(a>0){\n            puts(\"COUNTER_CLOCKWISE\");\n        }\n        else if(a<0){\n            puts(\"CLOCKWISE\");\n        }\n        else if(b<0){\n            puts(\"ONLINE_BACK\");\n        }\n        else if(b>0&&seg((p1-p).dot(p2-p1))>0){\n            puts(\"ONLINE_FRONT\");\n        }\n        else{\n            puts(\"ON_SEGMENT\");\n        }\n        return 0;\n\n}\ntypedef Point P;\nint main(){\n    P p,p1;\n    scanf(\"%lf%lf%lf%lf\",&p.x,&p.y,&p1.x,&p1.y);\n    int q;\n    scanf(\"%d\",&q);\n    while(q--){\n        P p2;\n        scanf(\"%lf%lf\",&p2.x,&p2.y);\n        getDir(p,p1,p2);\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <iomanip>\n#include <cmath>\n\nextern const double eps;\nbool eql(const double &a, const double &b) {\n    return fabs(a - b) < eps;\n}\n\nstruct Vector {\n    double x = 0, y = 0;\n    Vector(int _x, int _y) : x(_x), y(_y) {}\n    Vector(double _x, double _y) : x(_x), y(_y) {}\n\n    double dot(const Vector &r) const {\n        return x * r.x + y * r.y;\n    }\n    \n    double cross(const Vector &r) const {\n        return x * r.y - y * r.x;\n    }\n\n    double length() const {\n        return sqrt(x * x + y * y);\n    }\n\n    Vector  operator +  (const Vector &r) const {\n        return Vector(x + r.x, y + r.y);\n    }\n    Vector& operator += (const Vector &r) {\n        x += r.x, y += r.y;\n        return *this;\n    }\n\n    Vector  operator -  () const {\n        return Vector(-x, -y);\n    }\n\n    Vector  operator -  (const Vector &r) const {\n        return *this + -r;\n    }\n    Vector& operator -= (const Vector &r) {\n        x -= r.x, y -= r.y;\n        return *this;\n    }\n\n    Vector  operator *  (double k) const {\n        Vector tmp = *this;\n        tmp.x *= k, tmp.y *= k;\n        return tmp;\n    }\n\n    Vector& operator *= (double k) {\n        x *= k, y *= k;\n        return *this;\n    }\n\n    // 向量单位化\n    void unitise() {\n        double len = length();\n        x /= len, y /= len;\n    }\n};\ntypedef Vector Point;\nstruct Line {\n    Point p;\n    // 规定方向向量取单位向量\n    Vector dir;\n\n    Line(Point _p, Vector _dir) : p(_p), dir(_dir) {\n        dir.unitise();\n    }\n\n};\n\n// 向量数乘\nVector operator * (double k, const Vector & r) {\n    return r * k;\n}\n\n// 点到直线的投影点\nPoint projection(const Point &p, const Line &l) {\n    double d = Vector(p - l.p).dot(l.dir);\n    return l.p + d * l.dir;\n}\n// 点关于直线的对称点\nPoint reflection(const Point &p, const Line &l) {\n    Point pro = projection(p, l);\n    return p + 2 * (pro - p);\n}\nusing namespace std;\nconst double eps = 1e-8;\n\n\nint main() {\n    // freopen(\"in\", \"r\", stdin);\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n    int xp1, yp1, xp2, yp2, q, xp, yp;\n    cin >> xp1 >> yp1 >> xp2 >> yp2 >> q;\n    // Line L(Point(xp1, yp1), Vector(xp2 - xp1, yp2 - yp1));\n    Vector p12(xp2 - xp1, yp2 - yp1);\n    while (q--) {\n        cin >> xp >> yp;\n        Vector p1p(xp - xp1, yp - yp1);\n        double cro = p12.cross(p1p);\n        double inp = p12.dot(p1p);\n        if (cro > eps) {\n            cout << \"COUNTER_CLOCKWISE\\n\";\n        } else if (cro < -eps) {\n            cout << \"CLOCKWISE\\n\";\n        } else {\n            if (inp < -eps) {\n                cout << \"ONLINE_BACK\\n\";\n            } else {\n                if (fabs(xp) <= fabs(xp2) && fabs(yp) <= fabs(yp2)) {\n                    cout << \"ON_SEGMENT\\n\";\n                } else {\n                    cout << \"ONLINE_FRONT\\n\";\n                }\n            }\n        }\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\ntypedef long scalar;\nclass point{\n\tpublic:\n\tscalar x;\n\tscalar y;\n\tvoid print(){\n\t\tcout << x << \" \" << y; \n\t}\n\tscalar cross(point a){//??????\n\t\treturn x * a.y - y * a.x;\n\t}\n\tscalar dot(point a){//??????\n\t\treturn x * a.x + y * a.y;\n\t}\n\tscalar norm2(void){\n\t\treturn x * x + y * y;\n\t}\n\tscalar norm(void){\n\t\treturn sqrt(norm2());\n\t}\n\tpoint operator =(point a){\n\t\tthis->x = a.x;\n\t\tthis->y = a.y;\n\t\treturn *this;\n\t}\n\tpoint operator +(point a){\n\t\tpoint r;\n\t\tr.x = this->x + a.x;\n\t\tr.y = this->y + a.y;\n\t\treturn r;\n\t}\n\tpoint operator -(point a){\n\t\tpoint r;\n\t\tr.x = this->x - a.x;\n\t\tr.y = this->y - a.y;\n\t\treturn r;\n\t}\n};\n\npoint operator *(scalar t, point a){\n\tpoint r;\n\tr.x = t * a.x; \n\tr.y = t * a.y; \n\treturn r;\n}\n\n\nint main(){\n\tpoint p0, p1, p2;\n\tpoint p01,p02;\n\tint q;\n\tscalar crossproduct,innerproduct;\n\tcout.precision(20);\n\tcin >> p0.x >> p0.y >> p1.x >> p1.y;\n\tcin >> q;\n\tfor(int i = 0;i < q;i++){\n\t\tcin >> p2.x >> p2.y;\n\t\tp01 = p1-p0;\n\t\tp02 = p2-p0;\n\t\tcrossproduct = p01.cross(p02);\n\t\tinnerproduct = p01.dot(p02);\n\t\tif(crossproduct > 0)\n\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\telse if(crossproduct < 0)\n\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\telse if(innerproduct < 0)\n\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\telse if(p02.norm2() > p01.norm2())\n\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\telse \n\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\nusing namespace std;\n\nstruct Point{\n    int x;\n    int y;\n    Point(double x, double y) : x(x), y(y) {}\n};\ntypedef Point Vector;\nint get_dot(Vector v1, Vector v2){\n    return v1.x * v2.x + v1.y * v2.y;\n}\nint get_cross(Vector v1, Vector v2){\n    return v1.x * v2.y - v1.y * v2.x;\n}\n\nint main(){\n    int x_p0, y_p0, x_p1, y_p1;\n    cin >> x_p0 >> y_p0 >> x_p1 >> y_p1;\n    Vector v1(x_p1 - x_p0, y_p1 - y_p0);\n    int q;\n    cin >> q;\n    for (int i = 0; i < q; i++) {\n        int x_p2, y_p2;\n        cin >> x_p2 >> y_p2;\n        Vector v2(x_p2 - x_p0, y_p2 - y_p0);\n        double cross = get_cross(v1, v2);\n        if (cross > 0) {\n            cout << \"COUNTER_CLOCKWISE\" << endl;\n            continue;\n        }\n        if (cross < 0) {\n            cout << \"CLOCKWISE\" << endl;\n            continue;\n        }\n        double dot = get_dot(v1, v2);\n        if (dot < 0) {\n            cout << \"ONLINE_BACK\" << endl;\n            continue;\n        }\n        double norm1 = get_dot(v1, v1);\n        double norm2 = get_dot(v2, v2);\n        if (norm1 < norm2) {\n            cout << \"ONLINE_FRONT\" << endl;\n            continue;\n        }\n        cout << \"ON_SEGMENT\" << endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <algorithm>\n#include <cstdio>\n#include <vector>\n#include <queue>\n#include <set>\n#include <map>\n#include <numeric>\n#include <cmath>\n \nusing namespace std;\n \ntypedef long long int ll;\ntypedef pair<int,int> Pint;\ntypedef pair<double,double> Pdouble;\n \n#define all(x) x.begin(),x.end()\n \nconst ll mod = 1e9+7;\nconst ll INF = 1e9;\nconst ll MAXN = 1e9;\n \ndouble dot(Pint p1,Pint p2){\n    return p1.first*p2.first + p1.second*p2.second;\n}\n\ndouble closs(Pint p1,Pint p2){\n    return p1.first*p2.second - p1.second*p2.first;\n}\ndouble vector_length(Pint p){\n    return pow(p.first*p.first+p.second*p.second,0.5);\n}\n \ndouble cos_(Pint p1,Pint p2){\n    return dot(p1,p2)/(vector_length(p1)*vector_length(p2));\n}\n\ndouble sin_(Pint p1,Pint p2){\n    return closs(p1,p2)/(vector_length(p1)*vector_length(p2));\n}\n \nPdouble proj(Pint p1,Pint p2,Pint a,Pint b){\n    Pint pp = Pint(p2.first-p1.first,p2.second-p1.second);\n    double ans_x = (double)p1.first + vector_length(a)*cos_(a,b)*pp.first/vector_length(pp);\n    double ans_y = (double)p1.second + vector_length(a)*cos_(a,b)*pp.second/vector_length(pp);\n\n    return Pdouble(ans_x,ans_y);\n}\n \nbool vector_equal(Pint p,Pint q){\n    return (p.first == q.first) && (p.second == q.second);\n}\n\nvoid clock_wise(Pint q0,Pint q1,Pint q2){\n    Pint q0q1 = Pint(q1.first-q0.first,q1.second-q0.second);\n    Pint q0q2 = Pint(q2.first-q0.first,q2.second-q0.second);\n\n    if(cos_(q0q1,q0q2) == -1){\n        cout << \"ONLINE_BACK\" << endl;\n    }else if(cos_(q0q1,q0q2) == 1){\n        if(vector_length(q0q1)<vector_length(q0q2)) cout << \"ONLINE_FRONT\" << endl;\n        else cout << \"ON_SEGMENT\" << endl;\n    }else{\n        if(sin_(q0q1,q0q2)>0) cout << \"COUNTER_CLOCKWISE\" << endl;\n        else cout << \"CLOCKWISE\" << endl;\n    }\n}\n \nint main()\n{\n    Pint p0,p1;\n    cin >> p0.first >> p0.second >> p1.first >> p1.second;\n    int q;\n    cin >> q;\n    for(int i = 0; i < q; i++){\n        Pint p2;\n        cin >> p2.first >> p2.second;\n \n        if(vector_equal(p2,p1)||vector_equal(p2,p0)){\n            cout << \"ON_SEGMENT\" << endl;\n            continue;\n        }\n \n        clock_wise(p0,p1,p2);\n    }\n \n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <algorithm>\n#include <functional>\n#include <vector>\n#include <utility>\n#include <cstring>\n#include <iomanip>\n#include <numeric>\n#include <cmath>\n#include <cassert>\n#include <complex>\nusing namespace std;\nusing ll = long long;\nconst int INF = 1<<30;\nconst int MOD = 1e9 + 7;\nconst double EPS = 1e-8;\nconst double PI = acos(-1);\ninline bool equals(double a, double b) { return abs(b - a) < EPS; }\nusing Point = complex<double>;\nnamespace std { bool operator < (const Point &a, const Point &b) { return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b); } }\nstruct Line\n{\n    Point a, b;\n    Line(Point a, Point b) : a(a), b(b) {}\n};\ndouble dot(const Point &a, const Point &b) { return real(a) * real(b) + imag(a) * imag(b); }\ndouble cross(const Point &a, const Point &b) { return real(a) * imag(b) - imag(a) * real(b); }\nbool isParallel(const Line &a, const Line &b) { return equals(cross(a.b - a.a, b.b - b.a), 0.0); }\nbool isOrthogonal(const Line &a, const Line &b) { return equals(dot(a.a - a.b, b.a - b.b), 0.0); }\nPoint projection(const Line &l, const Point &p)\n{\n    double t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n    return l.a + (l.a - l.b) * t;\n}\nPoint reflection(const Line &l, const Point &p) { return p + (projection(l, p) - p) * 2.0; }\nint ccw(const Point &a, Point b, Point c)\n{\n    b = b - a, c = c - a;\n    if(cross(b, c) > EPS) return 1;\n    if(cross(b, c) < -EPS) return -1;\n    if(dot(b, c) < 0) return 2;\n    if(norm(b) < norm(c)) return -2;\n    return 0;\n}\nsigned main()\n{\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    cout << fixed << setprecision(8);\n    double x0, y0, x1, y1; cin >> x0 >> y0 >> x1 >> y1;\n    int q; cin >> q;\n    while(q--)\n    {\n        double x, y; cin >> x >> y;\n        int res = ccw(Point(x0, y0), Point(x1, y1), Point(x, y));\n        if(res == 1) cout << \"COUNTER_CLOCKWISE\" << endl;\n        else if(res == -1) cout << \"CLOCKWISE\" << endl;\n        else if(res == 2) cout << \"ONLINE_BACK\" << endl;\n        else if(res == -2) cout << \"ONLINE_FRONT\" << endl;\n        else cout << \"ON_SEGMENT\" << endl;\n    }\n    return 0;\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#pragma warning(disable : 4267) // \"int n = (unsigned)size\"\n\nusing vi = vector<int>; using vvi = vector<vi>; using vvvi = vector<vvi>;\nusing ll = long long int;\nusing vll = vector<ll>; using vvll = vector<vll>; using vvvll = vector<vvll>;\nusing vd = vector<double>; using vvd = vector<vd>; using vvvd = vector<vvd>;\nusing P = pair<int, int>;\nusing Pll = pair<ll, ll>;\nusing cdouble = complex<double>;\n\nconst double eps = 1e-6;\nconst double INFD = numeric_limits<double>::infinity();\n#define Loop(i, n) for(int i = 0; i < int(n); i++)\n#define Loopll(i, n) for(ll i = 0; i < ll(n); i++)\n#define Loop1(i, n) for(int i = 1; i <= int(n); i++)\n#define Loopll1(i, n) for(ll i = 1; i <= ll(n); i++)\n#define Loopr(i, n) for(int i = int(n) - 1; i >= 0; i--)\n#define Looprll(i, n) for(ll i = ll(n) - 1; i >= 0; i--)\n#define Loopr1(i, n) for(int i = int(n); i >= 1; i--)\n#define Looprll1(i, n) for(ll i = ll(n); i >= 1; i--)\n#define Foreach(buf, container) for(auto buf : container)\n#define Loopdiag(i, j, h, w, sum) for(int i = ((sum) >= (h) ? (h) - 1 : (sum)), j = (sum) - i; i >= 0 && j < (w); i--, j++)\n#define Loopdiagr(i, j, h, w, sum) for(int j = ((sum) >= (w) ? (w) - 1 : (sum)), i = (sum) - j; j >= 0 && i < (h); j--, i++)\n#define Loopdiagsym(i, j, h, w, gap) for (int i = ((gap) >= 0 ? (gap) : 0), j = i - (gap); i < (h) && j < (w); i++, j++)\n#define Loopdiagsymr(i, j, h, w, gap) for (int i = ((gap) > (h) - (w) - 1 ? (h) - 1 : (w) - 1 + (gap)), j = i - (gap); i >= 0 && j >= 0; i--, j--)\n#define Loopitr(itr, container) for(auto itr = container.begin(); itr != container.end(); itr++)\n#define printv(vector) Loop(ex_i, vector.size()) { cout << vector[ex_i] << \" \"; } cout << endl;\n#define printmx(matrix) Loop(ex_i, matrix.size()) { Loop(ex_j, matrix[ex_i].size()) { cout << matrix[ex_i][ex_j] << \" \"; } cout << endl; }\n#define quickio() ios::sync_with_stdio(false); cin.tie(0);\n#define bitmanip(m,val) static_cast<bitset<(int)m>>(val)\n#define Comp(type_t) bool operator<(const type_t &another) const\n#define fst first\n#define snd second\nbool nearlyeq(double x, double y) { return abs(x - y) < eps; }\nbool inrange(ll x, ll t) { return x >= 0 && x < t; }\nbool inrange(vll xs, ll t) { Foreach(x, xs) if (!(x >= 0 && x < t)) return false; return true; }\nint ceillog2(ll x) { int ret = 0;\tx--; while (x > 0) { ret++; x >>= 1; } return ret; }\nll rndf(double x) { return (ll)(x + (x >= 0 ? 0.5 : -0.5)); }\nll floorsqrt(ll x) { ll m = (ll)sqrt((double)x); return m + (m * m <= x ? 0 : -1); }\nll ceilsqrt(ll x) { ll m = (ll)sqrt((double)x); return m + (x <= m * m ? 0 : 1); }\nll rnddiv(ll a, ll b) { return (a / b + (a % b * 2 >= b ? 1 : 0)); }\nll ceildiv(ll a, ll b) { return (a / b + (a % b == 0 ? 0 : 1)); }\nll gcd(ll m, ll n) { if (n == 0) return m; else return gcd(n, m % n); }\nll lcm(ll m, ll n) { return m * n / gcd(m, n); }\n\n/*******************************************************/\n\nstruct point_t {\n\tdouble x, y;\n\tpoint_t operator+(const point_t &p) { return { x + p.x, y + p.y }; }\n\tpoint_t operator-(const point_t &p) { return { x - p.x, y - p.y }; }\n\tpoint_t operator*(const double &c) { return { x * c, y * c }; }\n};\n\n// ax + by + c = 0\nstruct line_t {\n\tdouble a, b, c;\n};\n\npoint_t cross_point(line_t l, line_t m) {\n\tpoint_t ret = { INFD, INFD };\n\tdouble d = l.a * m.b - m.a * l.b;\n\tif (nearlyeq(d, 0)) return ret;\n\tdouble x = l.b * m.c - m.b * l.c;\n\tdouble y = l.a * m.c - m.a * l.c;\n\tret = { x / d, y / -d };\n\treturn ret;\n}\n\n// normal vector = (a, b), passing p\nline_t solve_line(double a, double b, point_t p) {\n\treturn { a, b, -a * p.x - b * p.y };\n}\n\n// t should be radius\npoint_t rot(point_t p, double r) {\n\treturn {\n\t\tcos(r) * p.x - sin(r) * p.y,\n\t\tsin(r) * p.x + cos(r) * p.y\n\t};\n}\n\ndouble abs(point_t p) {\n\treturn sqrt(p.x * p.x + p.y * p.y);\n}\n\n// angle [0, 2PI) of vector p to vector q\ndouble angle(point_t p, point_t q) {\n\tp = p * (1.0 / abs(p));\n\tq = q * (1.0 / abs(q));\n\tdouble r0 = acos(p.x * q.x + p.y * q.y);\n\tdouble r1 = asin(p.x * q.y - p.y * q.x);\n\tif (r1 >= 0) return r0;\n\telse return 2 * M_PI - r0;\n}\n\ndouble dist(line_t l, point_t p) {\n\treturn abs(l.a * p.x + l.b * p.y + l.c)\n\t\t/ sqrt(l.a * l.a + l.b * l.b);\n}\n\nint main() {\n\tpoint_t p0, p1;\n\tcin >> p0.x >> p0.y >> p1.x >> p1.y;\n\tint q; cin >> q;\n\tcout << setprecision(20);\n\tLoop(i, q) {\n\t\tpoint_t p2;\n\t\tcin >> p2.x >> p2.y;\n\t\tpoint_t p = p1 - p0;\n\t\tpoint_t q = p2 - p0;\n\t\tif (nearlyeq(abs(p), 0)) {\n\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t}\n\t\telse if (nearlyeq(abs(q), 0)) {\n\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t}\n\t\telse {\n\t\t\tdouble r = angle(p, q);\n\t\t\tline_t l = solve_line(q.y - p.y, p.x - q.x, p);\n\t\t\tdouble d = dist(l, { 0, 0 });\n\t\t\tif (nearlyeq(d, 0)) {\n\t\t\t\tif (M_PI / 2 * 0.5 && r < M_PI * 1.5) {\n\t\t\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (abs(q) > abs(p)) {\n\t\t\t\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (r < M_PI) {\n\t\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\t\t}\n\t\t}\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\n\n//constant----------------------------------------\nconst double EPS=1e-8;\nconst double INF=1e9;\nconst int COUNTER_CLOCKWISE=2;\nconst int CLOCKWISE=-2;\nconst int ONLINE_FRONT=1;\nconst int ONLINE_BACK=-1;\nconst int ON_SEGMENT=0;\n\n\ntypedef complex<double>Point;\ntypedef vector<Point>Polygon;\nstruct Line{\n    Point p1,p2;\n    Line(const Point &p1,const Point &p2):p1(p1),p2(p2){}\n};\nstruct Segment{\n    Point p1,p2;\n    Segment(const Point &p1,const Point &p2):p1(p1),p2(p2){}\n};\nstruct Circle{\n    Point p;\n    int r;\n    Circle(Point &p,int r):p(p),r(r){}\n};\n\ndouble dot(Point &p1,Point &p2){\n    return real(p1)*real(p2)+imag(p1)+imag(p2);\n}\n\ndouble cross(Point &p1,Point &p2){\n    return real(p1)*imag(p2)-real(p2)*imag(p1);\n}\n\nint CCW(Point &p1,Point &p2,Point &p3){\n    Point a=p2-p1,b=p3-p1;\n    if(cross(a,b)>EPS)return COUNTER_CLOCKWISE;\n    if(cross(a,b)<-EPS)return CLOCKWISE;\n    if(dot(a,b)<-EPS)return ONLINE_BACK;\n    if(norm(b)>norm(a))return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\nsigned main(){\n    double x,y;\n    scanf(\"%lf%lf\",&x,&y);\n    Point p1(x,y);\n    scanf(\"%lf%lf\",&x,&y);\n    Point p2(x,y);\n\n    int q;scanf(\"%d\",&q);\n    while(q--){\n        scanf(\"%lf%lf\",&x,&y);\n        Point p3(x,y);\n        if(CCW(p1,p2,p3)==COUNTER_CLOCKWISE)puts(\"COUNTER_CLOCKWISE\");\n        if(CCW(p1,p2,p3)==CLOCKWISE)puts(\"CLOCKWISE\");\n        if(CCW(p1,p2,p3)==ONLINE_BACK)puts(\"ONLINE_BACK\");\n        if(CCW(p1,p2,p3)==ONLINE_FRONT)puts(\"ONLINE_FRONT\");\n        if(CCW(p1,p2,p3)==ON_SEGMENT)puts(\"ON_SEGMENT\");\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int, int> pairInt;\n#define FOR(i, n) for (int i = 0; i < int(n); i++)\n#define FOR1(i, m, n) for (int i = int(m); i < int(n); i++)\n#define MAX(a, b) ((a) >= (b) ? (a) : (b))\n#define MIN(a, b) ((a) <= (b) ? (a) : (b))\n\nint main(int argc, char *argv[]) {\n  array<int, 2> p0, p1, v1;\n  int q;\n\n  scanf(\"%d%d%d%d%d\", &p0[0], &p0[1], &p1[0], &p1[1], &q);\n  v1[0] = p1[0] - p0[0];\n  v1[1] = p1[1] - p0[1];\n\n  FOR(i, q) {\n    array<int, 2> p2, v2;\n    scanf(\"%d%d\", &p2[0], &p2[1]);\n    v2[0] = p2[0] - p0[0];\n    v2[1] = p2[1] - p0[1];\n\n    int op = v1[0] * v2[1] - v1[1] * v2[0];\n    int ip = v1[0] * v2[0] + v1[1] * v2[1];\n\n    if (op > 0)\n      printf(\"COUNTER_CLOCKWISE\\n\");\n    else if (op < 0)\n      printf(\"CLOCKWISE\\n\");\n    else if (ip < 0)\n      printf(\"ONLINE_BACK\\n\");\n    else if (v2[0] > v1[0])\n      printf(\"ONLINE_FRONT\\n\");\n    else\n      printf(\"ON_SEGMENT\\n\");\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <cstring>\n#include <cstdio>\n#include <queue>\n#include <vector>\n#include <cmath>\n#include <map>\n#include <stack>\n#include <algorithm>\ntypedef long long int ll;\nusing namespace std;\nconst int MAX=5000+10;\nconst double eps=1e-9;\nconst double PI=acos(-1.0);\n\nint sgn(double x)\n{\n    if (fabs(x)<eps) {\n        return 0;\n    }\n    if (x<0) {\n        return -1;\n    }\n    else return 1;\n}\nstruct point\n{\n    double x,y;\n    point(){}\n    point(double _x,double _y)\n    {\n        x=_x;y=_y;\n    }\n    point operator +(const point &b)const\n    {\n        return point(x+b.x,y+b.y);\n    }\n    point operator -(const point &b)const\n    {\n        return point(x-b.x,y-b.y);\n    }\n    double operator ^(const point &b)const\n    {\n        return x*b.y-y*b.x;\n    }\n    double operator *(const point &b)const\n    {\n        return x*b.x+y*b.y;\n    }\n    point operator *(const double k)const\n    {\n        point kk;kk.x=k*x;kk.y=k*y;return kk;\n    }\n    double len(void)\n    {\n        return sqrt(x*x+y*y);\n    }\n};\nint main(){\n    //freopen(\"/Users/mac/Desktop/C++?¨????/test/test.txt\", \"r\", stdin);\n    int q;\n    point p1,p2,p0;\n    scanf(\"%lf%lf%lf%lf\",&p0.x,&p0.y,&p1.x,&p1.y);\n    scanf(\"%d\",&q);\n    while(q--){\n        scanf(\"%lf%lf\",&p2.x,&p2.y);\n        point p01=p1-p0;\n        point p02=p2-p0;\n        if (sgn(p01^p02)==1) {\n            printf(\"COUNTER_CLOCKWISE\\n\");\n        }\n        else if (sgn(p01^p02)==-1){\n            printf(\"CLOCKWISE\\n\");\n        }\n        else{\n            if (sgn(p01*p02)==-1) {\n                printf(\"ONLINE_BACK\\n\");\n            }\n            else if (p01.len()>p02.len()) {\n                printf(\"ON_SEGMENT\\n\");\n            }\n            else{\n                printf(\"ONLINE_FRONT\\n\");\n            }\n        }\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\n\nusing namespace std;\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a)-(b)) < EPS)\n\nclass Point{\npublic:\n\tdouble x, y;\n\tPoint(double _x = 0, double _y = 0) :x(_x), y(_y){};\n\n\tPoint operator+(const Point &p){ return Point(x + p.x, y + p.y); }\n\tPoint operator-(const Point &p){ return Point(x - p.x, y - p.y); }\n\tPoint operator*(const Point &p){ return Point(x * p.x, y * p.y); }\n\tPoint operator*(double k){ return Point(x * k, y * k); }\n\tPoint operator/(const Point &p){ return Point(x / p.x, y / p.y); }\n\n\tdouble norm() { return x*x + y*y; }\n\tdouble abs() { return sqrt(norm()); }\n\n\tbool operator<(const Point &p) const{\n\t\treturn (x != p.x) ? x < (p.x) : (y < p.y);\n\t}\n\n\tbool operator==(const Point &p){\n\t\treturn equals(x, p.x) && equals(y, p.y);\n\t}\n};\n\ntypedef Point Vector;\nstruct Segment{\n\tPoint p1, p2;\n};\n\ndouble dot(Vector a, Vector b){\n\tdouble res = a.x*b.x + a.y*b.y;\n\treturn res;\n}\n\ndouble cross(Vector a, Vector b){\n\tdouble res = a.x*b.y - a.y*b.x;\n\treturn res;\n}\n\nbool isOrthogonal(Vector a, Vector b){\n\treturn equals(dot(a, b), 0.0);\n}\n\nbool isParallel(Vector a, Vector b){\n\treturn equals(cross(a, b), 0.0);\n}\n\nPoint project(Segment s, Point p){\n\tVector base = s.p2 - s.p1;\n\tVector v = p - s.p1;\n\tdouble l = dot(v, base) / base.norm();\n\treturn s.p1 + base * l;\n}\n\nint ccw(Point p0, Point p1, Point p2){\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\n\tif (cross(a, b) < EPS) return CLOCKWISE;\n\tif (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif (dot(a, b) < EPS) return ONLINE_BACK;\n\tif (a.norm() > b.norm()) return ON_SEGMENT;\n\treturn ONLINE_FRONT;\n}\n\n\nint main(){\n\tPoint p0, p1, p2;\n\tcin >> p0.x >> p0.y >> p1.x >> p1.y;\n\tint n; cin >> n;\n\tfor (int i = 0; i < n; ++i){\n\t\tcin >> p2.x >> p2.y;\n\t\tint res = ccw(p0, p1, p2);\n\t\tswitch (res)\n\t\t{\n\t\tcase CLOCKWISE:\n\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\t\tbreak;\n\t\tcase COUNTER_CLOCKWISE:\n\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t\tbreak;\n\t\tcase ONLINE_FRONT:\n\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t\tbreak;\n\t\tcase ONLINE_BACK:\n\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t\tbreak;\n\t\tcase ON_SEGMENT:\n\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#include <math.h>\n#include <iostream>\n#include <iomanip>\nusing namespace std;\n\nint main() {\n\tcin.tie(0); ios::sync_with_stdio(false);\n\tint x0, y0, x1, y1; cin >> x0 >> y0 >> x1 >> y1;\n\tint X1 = x1 - x0, Y1 = y1 - y0;\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tint x2, y2; cin >> x2 >> y2;\n\t\tint X2 = x2 - x0, Y2 = y2 - y0;\n\t\tlong long cross = X1*Y2 - Y1*X2;\n\t\tif (cross > 0) { cout << \"COUNTER_CLOCKWISE\" << endl; continue; }\n\t\tif (cross < 0) { cout << \"CLOCKWISE\" << endl; continue; }\n\t\t//??????????????§cross == 0 ?????????????¢????\n\t\tlong long vertical = X1*X2 + Y1*Y2;\n\t\tif (vertical < 0) { cout << \"ONLINE_BACK\" << endl; continue; }\n\t\tif (X2*X2 + Y2*Y2 > X1*X1 + Y1*Y1) { cout << \"ONLINE_FRONT\" << endl; continue; }\n\t\tcout << \"ON_SEGMENT\" << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <complex>\n#include <string>\n#define x real() \n#define y imag() \nusing namespace std;\ntypedef complex <double> point;\ntypedef complex<double> vectol;\n\nstring ccw(point a,point b,point c) {\n  vectol ab= b-a, ac = c-a;\n  vectol d  = ac * conj(ab); \n  d /= abs(ab);\n  if(d.y < 0) return \"COUNTER_CLOCKWISE\";\n  if(d.y > 0) return \"CLOCKWISE\";\n  vectol Ob = ab * conj(ab);\n  Ob /= abs(ab);\n  cout << b.x <<\" \"<<d.x <<endl;\n  if(Ob.x > d.x) return \"ONLINE_FRONT\";\n  if(Ob.x < d.x) return \"ONLINE_BACK\";\n  return \"ON_SEGMENT\";\n}\n\nint main() {\n  double x0,y0,x1,y1;\n  cin>>x0>>y0>>x1>>y1;\n  point a = point( x0, y0);\n  point b = point( x1, y1);\n  int n;\n  cin >> n;\n  for(int i=0;i<n;i++){\n    cin >> x0 >> y0;\n    cout << ccw(a,b,point(x0,y0)) <<endl;\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <cstdio>\n#include <iostream>\n#include <string>\n#include <vector>\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n\nusing namespace std;\n\n//????????????\nclass Point{\n  public:\n  double x, y;\n\n  Point(double x=0, double y=0): x(x), y(y) {}\n\n  Point operator + (Point p) { return Point(x+p.x, y+p.y); }\n  Point operator - (Point p) { return Point(x-p.x, y-p.y); }\n  Point operator * (double a) { return Point(a*x, a*y); }\n  Point operator / (double a) { return Point(x/a, y/a); }\n\n  double abs() {return sqrt(norm()); }\n  double norm() { return x*x+y*y; }\n\n  bool operator < (const Point &p) const{\n    return x!=p.x ? x<p.x : y<p.y;\n  }\n\n  bool operator == (const Point &p) const{\n    return fabs(x-p.x)<EPS && fabs(y-p.y)<EPS;\n  }\n\n};\n\n//(?????¢??????)????????????????????¨????§????????????§??????\ntypedef Point Vector;\n\n//???????????????\ntypedef struct Segment{\n  Point p1, p2;\n}Segment;\n\n//??´??????????§??????????\ntypedef Segment Line;\n\n//????????????\nclass Circle{\npublic:\n  Point c;\n  double r;\n  Circle(Point c = Point(), double r=0.0): c(c), r(r) {}\n};\n\n//????§???¢(???????????¨????????????)\ntypedef vector<Point> Polygon;\n\ndouble norm(Vector a){\n  return a.x*a.x + a.y*a.y;\n}\n\ndouble abs(Vector a){\n  return sqrt(norm(a));\n}\n\n//?????????????????????\ndouble dot(Vector a, Vector b){\n  return a.x*b.x+a.y*b.y;\n}\n\n//?????????????????????\ndouble cross(Vector a, Vector b){\n  return a.x*b.y-a.y*b.x;\n}\n\n//??´?????????(????????????????????????0????????´???)\nbool isOrthogonal(Vector a, Vector b){\n  return equals(dot(a,b), 0.0);\n}\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2){\n  return isOrthogonal(a1- a2, b1-b2);\n}\nbool isOrthogonal(Segment s1, Segment s2){\n  return equals(dot(s1.p2-s1.p1, s2.p2-s2.p1), 0.0);\n}\n\n//????????????(??????????????????????????§?????????0????????????)\nbool isParallel(Vector a, Vector b){\n  return equals(cross(a,b), 0.0);\n}\nbool isParallel(Point a1, Point a2, Point b1, Point b2){\n  return isParallel(a1- a2, b1-b2);\n}\nbool isParallel(Segment s1, Segment s2){\n  return equals(cross(s1.p2-s1.p1, s2.p2-s2.p1), 0.0);\n}\n\n//???????????´??????????°???±\nPoint project(Segment s, Point p){\n  Vector base = s.p2 - s.p1;\n  double r = dot(p-s.p1, base) / norm(base);\n  return s.p1 + base*r;\n}\n\n//????°?(??´??????????????????????§°?????????????????????)\nPoint reflect(Segment s, Point p){\n  return p+(project(s,p)-p)*2.0;\n}\n\n//Counter-Clockwise(3??????????????¢???)\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nint ccw(Point p0, Point p1, Point p2){ //p0, p1, p2?????????????????????????????¢???\n  Vector a = p1-p0;\n  Vector b = p2-p0;\n  if( cross(a,b) > EPS) return COUNTER_CLOCKWISE; //??£?????????????¨???????(?????????)\n  if( cross(a,b) < -EPS) return CLOCKWISE;\n  if( dot(a,b) < -EPS) return ONLINE_BACK; //?????????0??§????????????????????????180?°??????????????????\n  if( norm(a) < norm(b) ) return ONLINE_FRONT; //p0????????????p1??????p2?????????\n\n  return ON_SEGMENT;\n}\n\n//?????????????????????\nbool intersect(Segment s1, Segment s2){\n  return true;\n}\n\n//???a??¨???b????????¢\ndouble getDistance(Point a, Point b){\n  return abs(a-b);\n}\n\n//?????¨??´???????????¢\ndouble getDistanceLP(Line l, Point p){\n  return abs(cross(l.p2-l.p1, p-l.p1)) / abs(l.p2-l.p1);\n}\n\n//?????¨??????????????¢\ndouble getDistanceSP(Segment s, Point p){\n  if( dot(s.p2-s.p1, p-s.p1)<0.0 ) return abs(p-s.p1);\n  if( dot(s.p1-s.p2, p-s.p2)<0.0 ) return abs(p-s.p2);\n  return getDistanceLP(s,p);\n}\n\n//????????¨??????????????¢\ndouble getDistance(Segment s1, Segment s2){\n  if( intersect(s1,s2) ) return 0.0;\n  return min( min(getDistanceSP(s1,s2.p1), getDistanceSP(s1,s2.p2)), min(getDistanceSP(s2,s1.p1), getDistanceSP(s2,s1.p2)) );\n}\n\nint main(){\n  Point p0, p1;\n  cin >> p0.x >> p0.y >> p1.x >> p1.y;\n\n  int q;\n  cin >> q;\n  for(int i=0; i<q; ++i){\n    Point p2;\n    cin >> p2.x >> p2.y;\n    int ans=ccw(p0,p1,p2);\n\n    string s;\n    if(ans==-2) s=\"ONLINE_FRONT\";\n    else if(ans==-1) s=\"CLOCKWISE\";\n    else if(ans==0) s=\"ON_SEGMENT\";\n    else if(ans==1) s=\"COUNTER_CLOCKWISE\";\n    else if(ans==2) s=\"ONLINE_BACK\";\n\n    cout << s <<endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n \nusing namespace std;\nusing uint = unsigned int;\nusing ll = long long;\nusing ull = unsigned long long;\nconstexpr ll TEN(int n) { return (n==0) ? 1 : 10*TEN(n-1); }\ntemplate<class T> using V = vector<T>;\ntemplate<class T> using VV = V<V<T>>;\n\nusing D = double;\nconst D PI = acos(D(-1)), EPS = 1e-10;\n\nint sgn(D a) { return (abs(a) <= EPS) ? 0 : (a < 0 ? -1 : 1); }\nint sgn(D a, D b) { return sgn(a-b); }\n//relative sign\n// int rsgn(D a, D f) {\n//     if (abs(a) <= f*EPS) return 0;\n//     return (a < 0) ? -1 : 1;\n// }\nstruct Pt2 {\n    D x, y;\n    Pt2() {}\n    Pt2(D _x, D _y) : x(_x), y(_y) {}\n    Pt2 operator+(const Pt2 &r) const { return Pt2(x+r.x, y+r.y); }\n    Pt2 operator-(const Pt2 &r) const { return Pt2(x-r.x, y-r.y); }\n    Pt2 operator*(const Pt2 &r) const { return Pt2(x*r.x-y*r.y, x*r.y+y*r.x); }\n\n    Pt2 operator*(const D &r) const { return Pt2(x*r, y*r); }\n    Pt2 operator/(const D &r) const { return Pt2(x/r, y/r); }\n\n    Pt2& operator+=(const Pt2 &r) { return *this=*this+r; }\n    Pt2& operator-=(const Pt2 &r) { return *this=*this-r; }\n    Pt2& operator*=(const Pt2 &r) { return *this=*this*r; }\n    Pt2& operator*=(const D &r) { return *this=*this*r; }\n    Pt2& operator/=(const D &r) { return *this=*this/r; }\n    \n    Pt2 operator-() const { return Pt2(-x, -y); }\n\n    bool operator<(const Pt2 &r) const { return 2*sgn(x, r.x)+sgn(y, r.y)<0; }\n    bool operator==(const Pt2 &r) const { return sgn((*this-r).rabs()) == 0; }\n\n    D norm() const { return x*x + y*y; }\n    D abs() const { return sqrt(norm()); }\n    D rabs() const { return max(std::abs(x), std::abs(y)); } // robust abs\n    D arg() const { return atan2(y, x); }\n\n    pair<D, D> to_pair() const { return make_pair(x, y); }\n    static Pt2 polar(D le, D th) { return Pt2(le*cos(th), le*sin(th)); }\n};\nostream& operator<<(ostream& os, const Pt2 &p) {\n    return os << \"P(\" << p.x << \", \" << p.y << \")\";\n}\nusing P = Pt2;\n\nstruct L {\n    P s, t;\n    L() {}\n    L(P _s, P _t) : s(_s), t(_t) {}\n    P vec() const { return t-s; }\n    D abs() const { return vec().abs(); }\n    D arg() const { return vec().arg(); }\n};\nostream& operator<<(ostream& os, const L &l) {\n    return os << \"L(\" << l.s << \", \" << l.t << \")\";\n}\n\nD cross(P a, P b) { return a.x*b.y - a.y*b.x; }\nD dot(P a, P b) { return a.x*b.x + a.y*b.y; }\n// cross(a, b) is too small?\nint sgncrs(P a, P b) {\n    D cr = cross(a, b);\n    if (abs(cr) <= (a.rabs() + b.rabs()) * EPS) return 0;\n    return (cr < 0) ? -1 : 1;\n}\n\n// -2, -1, 0, 1, 2 : front, clock, on, cclock, back\nint ccw(P b, P c) {\n    int s = sgncrs(b, c);\n    if (s) return s;\n    if (!sgn(c.rabs()) || !sgn((c-b).rabs())) return 0;\n    if (dot(b, c) < 0) return 2;\n    if (dot(-b, c-b) < 0) return -2;\n    return 0;\n}\nint ccw(P a, P b, P c) { return ccw(b-a, c-a); }\nint ccw(L l, P p) { return ccw(l.s, l.t, p); }\n\nP project(const L &l, const P &p) {\n    P v = l.vec();\n    return l.s + v * (dot(v, p-l.s) / (v.x*v.x + v.y*v.y));\n}\n\nint main() {\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    cout << setprecision(20) << fixed;\n    \n    L l;\n    D x, y;\n    cin >> x >> y; l.s = P(x, y);\n    cin >> x >> y; l.t = P(x, y);\n    int q;\n    cin >> q;\n    V<string> s = {\n        \"ONLINE_FRONT\",\n        \"CLOCKWISE\",\n        \"ON_SEGMENT\",\n        \"COUNTER_CLOCKWISE\",\n        \"ONLINE_BACK\",\n    };\n    for (int ph = 0; ph < q; ph++) {\n        P p;\n        cin >> x >> y; p = P(x, y);\n        int u = ccw(l, p);\n        cout << s[u+2] << endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "\n//be naame khodaa\n#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef long double ld;\ntypedef pair <int, int> pii;\n#define F first\n#define S second\n\ninline int in(){int x, y; y = scanf(\"%d\", &x); return x; }\n\nconst int N = -1;\nconst ld EPS = 1e-12;\n\nstruct PT{\n\tld x, y;\n\tPT (ld x = 0, ld y = 0) : x(x), y(y) {}\n\tPT operator + (PT ro) const{\n\t\treturn PT(x+ro.x, y+ro.y);\n\t}\n\tPT operator - (PT ro) const{\n\t\treturn PT(x-ro.x, y-ro.y);\n\t}\n\tPT operator * (ld co) const{\n\t\treturn PT(x*co, y*co);\n\t}\n\tPT operator / (ld co) const{\n\t\treturn PT(x/co, y/co);\n\t}\n\tld operator * (PT ro) const{\n\t\treturn x*ro.x + y*ro.y;\n\t}\n\tld operator ^ (PT ro) const{\n\t\treturn x*ro.y - y*ro.x;\n\t}\n};\n\nPT operator * (ld co, PT p){\n\treturn p*co;\n}\n\nld len(PT a){\n\treturn sqrt(a*a);\n}\n\nPT unit(PT a){\n\treturn a/len(a);\n}\n\nPT perp(PT a){\n\treturn PT(-a.y, a.x);\n}\n\nPT proj(PT a, PT b, PT c){\n\tb = b-a, c = c-a;\n\treturn a + (b*c)/(b*b)*b;\n}\n\nPT reflect(PT a, PT b, PT c){\n\tPT d = c;\n\tb = b-a, c = c-a;\n\treturn d + (c^b)/len(b)*perp(unit(b))*2;\n}\n\nint sgn(PT a, PT b, PT c){\n\tld cr = (b-a)^(c-a);\n\treturn cr > EPS ? 1 : (cr + EPS < 0 ? -1 : 0);\n}\n\nint main(){\n\tPT a, b;;\n\tcin >> a.x >> a.y >> b.x >> b.y;\n\tPT p;\n\tcout << setprecision(10) << fixed;\n\tfor (int i = in(); i; i--){\n\t\tcin >> p.x >> p.y;\n\t\tint s = sgn(a, b, p);\n\t\tif (s == 1)\n\t\t\tcout << \"COUNTER_CLOCKWISE\\n\";\n\t\telse if (s == -1)\n\t\t\tcout << \"CLOCKWISE\\n\";\n\t\telse{\n\t\t\tp = p-a, b = b-a;\n\t\t\tld alpha = (p*b)/(b*b);\n\t\t\tif (alpha + EPS < 0)\n\t\t\t\tcout << \"ONLINE_BACK\\n\";\n\t\t\telse if (alpha > 1 + EPS)\n\t\t\t\tcout << \"ONLINE_FRONT\\n\";\n\t\t\telse\n\t\t\t\tcout << \"ON_SEGMENT\\n\";\n\t\t}\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define rep(i, n) for (int i = 0; i < (n); ++i)\n#define repr(i, n) for (int i = (n); i >= 0; --i)\n#define FOR(i, m, n) for (int i = (m); i < (n); ++i)\n#define FORR(i, m, n) for (int i = (m); i >= (n); --i)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\nusing namespace std;\ntypedef long long ll;\nconst ll mod = 1000000007;\nconst ll mod2 = 998244353;\nconst int INF = 1000000005;\nconst long double EPS = 1e-10;\n\nclass Point {\n  public:\n  long double x, y;\n\n  Point(long double x = 0, long double y = 0): x(x), y(y) {}\n\n  Point operator + (Point &p) {\n    return Point(x + p.x, y + p.y);\n  }\n\n  Point operator - (Point &p) {\n    return Point(x - p.x, y - p.y);\n  }\n\n  Point operator * (long double k) {\n    return Point(x * k, y * k);\n  }\n\n  Point operator / (long double k) {\n    return Point(x / k, y / k);\n  }\n\n  bool operator < (const Point &p) const {\n    return x != p.x ? x < p.x : y < p.y;\n  }\n\n  bool operator == (const Point &p) const {\n    return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n  }\n};\n\nlong double norm(Point p) {\n  return p.x * p.x + p.y * p.y;\n}\n\nlong double abs(Point p) {\n  return sqrt(norm(p));\n}\n\nlong double dot(Point p1, Point p2) {\n  return p1.x * p2.x + p1.y * p2.y;\n}\n\nlong double cross(Point p1, Point p2) {\n  return p1.x * p2.y - p1.y * p2.x;\n}\n\nint ccw(Point p1, Point p2) {\n  if (cross(p1, p2) > 0) return 1;\n  else if (cross(p1, p2) < 0) return -1;\n  else if (dot(p1, p2) < 0) return 2;\n  else if (norm(p1) < norm(p2)) return -2;\n  else return 0;\n}\n\nvoid print(int c) {\n  if (c == 1) cout << \"COUNTER_CLOCKWISE\" << endl;\n  else if (c == -1) cout << \"CLOCKWISE\" << endl;\n  else if (c == 2) cout << \"ONLINE_BACK\" << endl;\n  else if (c == -2) cout << \"ONLINE_FRONT\" << endl;\n  else if (c == 0) cout << \"ON_SEGMENT\" << endl;\n}\n\nint main() {\n  Point p0, p1, p2, v01, v02;\n  int q, c;\n  cin >> p0.x >> p0.y >> p1.x >> p1.y;\n  v01 = p1 - p0;\n  cin >> q;\n  rep(i, q) {\n    cin >> p2.x >> p2.y;\n    v02 = p2 - p0;\n    c = ccw(v01, v02);\n    print(c);\n  }\n\n  \n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <cmath>\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs(a)-fabs(b)<EPS)\n\nusing namespace std;\n\nclass Point{\npublic:\n    double x,y;\n\n    Point(double x=0,double y=0):x(x),y(y){}\n\n    Point operator + (Point &p) { return Point(x+p.x,y+p.y); }\n    Point operator - (Point &p) { return Point(x-p.x,y-p.y); }\n    Point operator * (double a) { return Point(x*a,y*a); }\n    Point operator / (double a) { return Point(x/a,y/a); }\n\n    double abs() { return sqrt(norm()); }\n    double norm() { return x*x+y*y; }\n\n    bool operator < (const Point &p) const {\n        return x!=p.x?x<p.x:y<p.y;\n    }\n\n    bool operator == (const Point &p) const {\n        return fabs(x-p.x)<EPS && fabs(y-p.y)<EPS;\n    }\n};\n\ntypedef Point Vector;\n///内积\ndouble dot(Vector a,Vector b){\n    return a.x*b.x+a.y*b.y;\n}\n///外积\ndouble cross(Vector a,Vector b){\n    return a.x*b.y-a.y*b.x;\n}\n\nint cow(Point p0,Point p1,Point p2){\n    Vector a=p1-p0;\n    Vector b=p2-p0;\n    if(cross(a,b)>EPS)  {printf(\"COUNTER_CLOCKWISE\\n\"); return 1;}\n    if(cross(a,b)<-EPS) {printf(\"CLOCKWISE\\n\"); return -1;}\n    if(dot(a,b)<-EPS)   {printf(\"ONLINE_BACK\\n\"); return 2;}\n    if(a.norm()<b.norm())  { printf(\"ONLINE_FRONT\\n\");return -2;}\n\n    printf(\"ON_SEGMENT\\n\");\n    return 0;\n}\n\nint main()\n{\n    Point p0,p1,p2;\n    scanf(\"%lf%lf%lf%lf\",&p0.x,&p0.y,&p1.x,&p1.y);\n    int q;\n    scanf(\"%d\",&q);\n    for(int i=0;i<q;i++){\n        scanf(\"%lf%lf\",&p2.x,&p2.y);\n        cow(p0,p1,p2);\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<cstring>\n#include<vector>\n#include<set>\n#include<queue>\n#include<cstdlib>\n#include<algorithm>\n\nusing namespace std;\n#define pb push_back\n#define mp make_pair\n#define SZ(x) (int)(x).size()\n\ntypedef long long LL;\ntypedef pair<int, int> pii;\ntypedef pair<double, double> pdd;\ntypedef pair<LL, LL> pll;\n\nconst double eps = 1e-10;\nconst double PI = acos(-1.0);\n//const double PI = 3.14159265358979323846264338327950288419716939937510\nint dcmp(const double &x) { if (fabs(x) < eps) return 0; return x < 0 ? -1 : 1; }\nconst int MOD = 1e9 + 7;\nconst int INF = 2e9;\nconst double INF_d = 1e64;\n\ntemplate<class T> \nT qmod(T a, T b){ T ret = 1; while (b){ if (b & 1) ret *= a; b >>= 1; a *= a; } return ret; }\ntemplate<class T>\nT gcd(T a, T b){ return !b ? a : gcd(b, a % b); }\ntemplate<class T>\nT ex_gcd(T a, T b, T &x, T &y){\n    if (!b){ x = 1, y = 0; return a; }\n    T t, ret;\n    ret = ex_gcd(b, a % b, x, y);\n    t = x, x = y, y = t - a / b * y;\n    return ret;\n}\ntemplate<class T>\nT inv(T t, T p){ return t == 1 ? 1 : (p - p / t) * inv(p % t, p) % p; }\n// head\n\ntypedef double db;\n\nstruct point{\n    db x, y;\n    point(){}\n    point(db a, db b): x(a), y(b){}\n    point operator + (const point &p){ return point(x + p.x, y + p.y); }\n    point operator - (const point &p){ return point(x - p.x, y - p.y); }\n    point operator * (const db &k){ return point(x * k, y * k); }\n    point operator / (const db &k){ return point(x / k, y / k); }\n    db operator ^ (const point &p){ return x * p.y + y * p.x; }\n    db operator * (const point &p){ return x * p.x + y * p.y; }\n    bool operator == (const point &p){ return !dcmp(x - p.x) && !dcmp(y - p.y); }\n    bool operator != (const point &p){ return dcmp(x - p.x) || dcmp(y - p.y); }\n    bool operator < (const point &p){ return x == p.x ? y < p.y : x < p.x; }\n    void read(){\n        scanf(\"%lf%lf\", &x, &y);\n    }\n    void print(){\n        printf(\"%.10f %.10f\\n\", x, y);\n    }\n    point rotate(db &ang){ return point(x * cos(ang) - y * sin(ang), y * cos(ang) + x * sin(ang)); }\n    point norm() { return point(-y, x); }\n    db len() { return sqrt(x * x + y * y); }\n    db len2(){ return x * x + y * y; }\n};\n\npoint proj(point A, point B, point P){ // projection point of P in segment AB\n    point AB = B - A, AP = P - A;\n    return A + AB * (AP * AB / AB.len2());\n}\n\npoint refl(point A, point B, point P){ // reflection point of P int segment AB\n    return proj(A, B, P) * 2 - P;\n}\n\npoint a, b;\nint n;\n\nint main(){\n    a.read(), b.read();\n    scanf(\"%d\", &n);\n    for (int i = 0; i < n; i++){\n        point x; x.read();\n        int sgn = dcmp((b - a) ^ (x - a));\n        if (!sgn){\n            if (dcmp((b - a) * (x - a)) < 0){\n                puts(\"ONLINE_BACK\");\n            }\n            else{\n                if (dcmp((b - a).len() - (x - a).len()) < 0){\n                    puts(\"ONLINE_FRONT\");\n                }\n                else{\n                    puts(\"ON_SEGMENT\");\n                }\n            }\n        }\n        else{\n            if (sgn > 0){\n                puts(\"COUNTER_CLOCKWISE\");\n            }\n            else{\n                puts(\"CLOCKWIST\");\n            }\n        }\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\n\nusing namespace std;\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a)-(b)) < EPS)\n\nclass Point{\npublic:\n\tdouble x, y;\n\tPoint(double _x = 0, double _y = 0) :x(_x), y(_y){};\n\n\tPoint operator+(const Point &p){ return Point(x + p.x, y + p.y); }\n\tPoint operator-(const Point &p){ return Point(x - p.x, y - p.y); }\n\tPoint operator*(const Point &p){ return Point(x * p.x, y * p.y); }\n\tPoint operator*(double k){ return Point(x * k, y * k); }\n\tPoint operator/(const Point &p){ return Point(x / p.x, y / p.y); }\n\n\tdouble norm() { return x*x + y*y; }\n\tdouble abs() { return sqrt(norm()); }\n\n\tbool operator<(const Point &p) const{\n\t\treturn (x != p.x) ? x < (p.x) : (y < p.y);\n\t}\n\n\tbool operator==(const Point &p){\n\t\treturn equals(x, p.x) && equals(y, p.y);\n\t}\n};\n\ntypedef Point Vector;\nstruct Segment{\n\tPoint p1, p2;\n};\n\ndouble dot(Vector a, Vector b){\n\tdouble res = a.x*b.x + a.y*b.y;\n\treturn res;\n}\n\ndouble cross(Vector a, Vector b){\n\tdouble res = a.x*b.y - a.y*b.x;\n\treturn res;\n}\n\nbool isOrthogonal(Vector a, Vector b){\n\treturn equals(dot(a, b), 0.0);\n}\n\nbool isParallel(Vector a, Vector b){\n\treturn equals(cross(a, b), 0.0);\n}\n\nPoint project(Segment s, Point p){\n\tVector base = s.p2 - s.p1;\n\tVector v = p - s.p1;\n\tdouble l = dot(v, base) / base.norm();\n\treturn s.p1 + base * l;\n}\n\nint ccw(Point p0, Point p1, Point p2){\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\n\tif (cross(a, b) < 0) return CLOCKWISE;\n\tif (cross(a, b) > 0) return COUNTER_CLOCKWISE;\n\tif (dot(a, b) < 0) return ONLINE_BACK;\n\tif (a.norm() > b.norm()) return ON_SEGMENT;\n\treturn ONLINE_FRONT;\n}\n\n\nint main(){\n\tPoint p0, p1, p2;\n\tcin >> p0.x >> p0.y >> p1.x >> p1.y;\n\tint n; cin >> n;\n\tfor (int i = 0; i < n; ++i){\n\t\tcin >> p2.x >> p2.y;\n\t\tint res = ccw(p0, p1, p2);\n\t\tswitch (res)\n\t\t{\n\t\tcase CLOCKWISE:\n\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\t\tbreak;\n\t\tcase COUNTER_CLOCKWISE:\n\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t\tbreak;\n\t\tcase ONLINE_FRONT:\n\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t\tbreak;\n\t\tcase ONLINE_BACK:\n\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t\tbreak;\n\t\tcase ON_SEGMENT:\n\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <vector>\n#include <stack>\n#include <queue>\n#include <map>\n#include <cmath>\n#include <string>\n#include <sstream>\n#include <iomanip>\nusing namespace std;\n\n#define ll long long\n#define vvi vector< vector<int> >\n#define All(X) X.begin(),X.end()\n#define FOR(i,a,b) for(int i=(int)(a);i<(int)(b);i++)\n#define REP(i,n) for(int i=0;i<(int)(n);i++)\n#define ld long double\n#define eps 1e-10\n\nbool eq(ld x,ld y){\n  if(abs(x-y)<eps) return true;\n  else return false;\n}\nld x[3],y[3];\nint q;\n\n\nstring rs[5]={\"COUNTER_CLOCKWISE\",\"CLOCKWISE\",\"ONLINE_BACK\",\"ONLINE_FRONT\",\"ON_SEGMENT\"};\n\nint main(){\n\n  cin >> x[0] >> y[0] >> x[1] >> y[1];\n  cin >> q;\n  REP(i,q){\n    int rst = -1;//not yet decided\n    cin >> x[2] >> y[2];\n    if(x[0]==x[1]){\n      if(x[2]<x[1]) rst = 1;\n      else rst = 2;\n      if (x[2]==x[1]) rst = -1;\n    }\n    if(rst<0){\n      ld tmp = y[0] + (y[1]-y[0])/(x[1]-x[0]) * (x[2]-x[0]);\n      if(eq(tmp,y[2])){\n        //on line\n        ld inpd = (x[1]-x[0])*(x[2]-x[0]) + (y[1]-y[0])*(y[2]-y[0]);\n        if(inpd<0) rst = 3;\n        else{\n          ld sz1 = (x[1]-x[0])*(x[1]-x[0])+(y[1]-y[0])*(y[1]-y[0]);\n          ld sz2 = (x[2]-x[0])*(x[2]-x[0])+(y[2]-y[0])*(y[2]-y[0]);\n          if(sz1<sz2) rst = 4;\n          else rst = 5;\n        }\n      }else{\n        if(tmp<y[2]) rst = 1;\n        else rst = 2;\n      }\n    }\n    cout << rs[rst-1] << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <iostream>\n#include <iomanip>\n#include <algorithm>\n\nusing namespace std;\n\nconst double kEps = 1e-10;\n\nint dcmp(double x) {\n  if (fabs(x) < kEps) return 0;\n  return x < 0 ? -1 : 1;\n}\n\nstruct Vector {\n  double x, y;\n  Vector() {}\n  Vector(double x, double y): x(x), y(y) {}\n  // Vector(const Point & p1, const Point & p2): x(p2.x - p1.x), y(p2.y - p1.y) {}\n  Vector(const Vector & v);\n\n  double Norm() const { return hypot(x, y); }\n  double NormSquared() const { return x * x + y * y; }\n  Vector Normalize() const {\n    return *this / this->Norm();\n  }\n  Vector operator-() const {\n    return Vector(-x, -y);\n  }\n  Vector operator+(const Vector & rhs) const {\n    return Vector(x + rhs.x, y + rhs.y);\n  }\n  Vector operator-(const Vector & rhs) const {\n    return *this + (-rhs);\n  }\n  Vector operator*(const double rhs) const {\n    return Vector(rhs * x, rhs * y);\n  }\n  Vector operator/(const double rhs) const {\n    return *this * (1.0 / rhs);\n  }\n  double Dot(const Vector & rhs) const {\n    return x * rhs.x + y * rhs.y;\n  }\n  double Cross(const Vector & rhs) const {\n    return x * rhs.y - y * rhs.x;\n  }\n  bool operator==(const Vector & rhs) const {\n    return dcmp(x - rhs.x) == 0 && dcmp(y - rhs.y) == 0;\n  }\n  bool operator<(const Vector & rhs) const {\n    return dcmp(x - rhs.x) < 0 || (dcmp(x - rhs.x) == 0 && dcmp(y - rhs.y) < 0);\n  }\n};\n\nstruct Point {\n  Point() {}\n  Point(double x, double y): x(x), y(y) {}\n  Point(const Point & p);\n\n  double x, y;\n\n  Point operator-() {\n    return Point(-x, -y);\n  }\n  Point operator+(const Vector & rhs) const {\n    return Point(x + rhs.x, y + rhs.y);\n  }\n  Point operator-(const Vector & rhs) const {\n    return *this + (-rhs);\n  }\n  bool operator==(const Point & rhs) const {\n    return dcmp(x - rhs.x) == 0 && dcmp(y - rhs.y) == 0;\n  }\n  bool operator<(const Point & rhs) const {\n    return dcmp(x - rhs.x) < 0 || (dcmp(x - rhs.x) == 0 && dcmp(y - rhs.y) < 0);\n  }\n};\n\nstruct Line {\n  Line() {}\n  Line(const Point & p1, const Point & p2): p1(p1), p2(p2) {}\n  Line(double x1, double y1, double x2, double y2): p1(x1, y1), p2(x2, y2) {}\n  Line(const Line & l);\n\n  Point p1, p2;\n};\n\nostream & operator<<(ostream & os, const Point & p) {\n  os << p.x << \" \" << p.y;\n  return os;\n}\n\nostream & operator<<(ostream & os, const Vector & v) {\n  os << v.x << \" \" << v.y;\n  return os;\n}\n\n// minus: left, plus: right, 0: colinear\nint Direction(const Point & p0, const Point & p1, const Point & p2) {\n  Vector v1(p1.x - p0.x, p1.y - p0.y);\n  Vector v2(p2.x - p0.x, p2.y - p0.y);\n  return v2.Cross(v1);\n}\n\n// minus: back, plus: front, 0: on\nint SegmentDirection(const Point & p0, const Point & p1, const Point & p2) {\n  if (p2.x >= min(p0.x, p1.x) && p2.x <= max(p0.x, p1.x)\n      && p2.y >= min(p0.y, p1.y) && p2.y <= max(p0.y, p1.y)) {\n    return 0;\n  } else if ((p2.x - p0.x) * (p1.x - p0.x) > 0\n             || (p2.y - p0.y) * (p1.y - p0.y) > 0) {\n    return 1;\n  } else {\n    return -1;\n  }\n}\n\nint main(int argc, char const *argv[]) {\n  double x0, y0, x1, y1;\n  cin >> x0 >> y0 >> x1 >> y1;\n  Point p0(x0, y0);\n  Point p1(x1, y1);\n\n  int q;\n  cin >> q;\n  for (unsigned i = 0; i < q; ++i) {\n    double x2, y2;\n    cin >> x2 >> y2;\n    Point p2(x2, y2);\n    auto direction = Direction(p0, p1, p2);\n    auto s_direction = SegmentDirection(p0, p1, p2);\n\n    if (direction > 0) {\n      cout << \"CLOCKWISE\\n\";\n    } else if (direction < 0) {\n      cout << \"COUNTER_CLOCKWISE\\n\";\n    } else if (s_direction > 0) {\n      cout << \"ONLINE_FRONT\\n\";\n    } else if (s_direction < 0) {\n      cout << \"ONLINE_BACK\\n\";\n    } else {\n      cout << \"ON_SEGMENT\\n\";\n    }\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cmath>\n#include<algorithm>\n#include<iostream>\n#include<vector>\n#include<climits>\n#include<cfloat>\n#define curr(P, i) P[(i) % P.size()]\n#define next(P, i) P[(i+1) % P.size()]\n#define prev(P, i) P[(i+P.size()-1) % P.size()]\n\nusing namespace std;\n\ndouble EPS = 1e-10;\nconst double PI = acos(-1);\n\ndouble add(double a, double b){\n  if(abs(a+b) < EPS * (abs(a)+abs(b)))return 0;\n  return a+b;\n}\n\nstruct point{\n  double x, y;\n  point(){}\n  point(double x,double y) : x(x) , y(y){}\n\n  point operator + (point p){\n    return point(add(x,p.x), add(y,p.y));\n  }\n\n  point operator - (point p){\n    return point(add(x,-p.x), add(y,-p.y));\n  }\n\n  point operator * (double d){\n    return point(x*d,y*d);\n  }\n\n  point operator / (double d){\n    return point(x/d,y/d);\n  }\n};\n\ntypedef point Vector;\n\ndouble dot(point a, point b) {\n  return (a.x * b.x + a.y * b.y);\n}\n\ndouble cross(point a, point b) {\n  return (a.x * b.y - a.y * b.x);\n}\n\ndouble norm(point a){\n  return sqrt(a.x*a.x+a.y*a.y);\n}\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nint ccw( point p0, point p1, point p2 ){\n  Vector a=p1-p0;\n  Vector b=p2-p0;\n  if (cross(a,b)>EPS) return COUNTER_CLOCKWISE;\n  if (cross(a,b)<-EPS) return CLOCKWISE;\n  if (dot(a, b)<-EPS) return ONLINE_BACK;\n  if (norm(a)<norm(b)) return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\n\nint main(void){\n  point a,b,c;\n  int q;\n  cin >> a.x >> a.y >> b.x >> b.y;\n  cin >> q;\n  while(q--){\n    cin >> c.x >> c.y;\n    int res=ccw(a,b,c);\n    if(res==COUNTER_CLOCKWISE)cout << \"COUNTER_CLOCKWISE\" << endl;\n    else if(res==CLOCKWISE)cout << \"CLOCKWISE\" << endl;\n    else if(res==ONLINE_BACK)cout << \"ONLINE_BACK\" << endl;\n    else if(res==ONLINE_FRONT)cout << \"ONLINE_FRONT\" << endl;\n    else if(res==ON_SEGMENT)cout << \"ON_SEGMENT\" << endl;\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#pragma warning(disable : 4267) // \"int n = (unsigned)size\"\n\nusing vi = vector<int>; using vvi = vector<vi>; using vvvi = vector<vvi>;\nusing ll = long long int;\nusing vll = vector<ll>; using vvll = vector<vll>; using vvvll = vector<vvll>;\nusing vd = vector<double>; using vvd = vector<vd>; using vvvd = vector<vvd>;\nusing P = pair<int, int>;\nusing Pll = pair<ll, ll>;\nusing cdouble = complex<double>;\n\nconst double eps = 1e-9;\nconst double INFD = numeric_limits<double>::infinity();\n#define Loop(i, n) for(int i = 0; i < int(n); i++)\n#define Loopll(i, n) for(ll i = 0; i < ll(n); i++)\n#define Loop1(i, n) for(int i = 1; i <= int(n); i++)\n#define Loopll1(i, n) for(ll i = 1; i <= ll(n); i++)\n#define Loopr(i, n) for(int i = int(n) - 1; i >= 0; i--)\n#define Looprll(i, n) for(ll i = ll(n) - 1; i >= 0; i--)\n#define Loopr1(i, n) for(int i = int(n); i >= 1; i--)\n#define Looprll1(i, n) for(ll i = ll(n); i >= 1; i--)\n#define Foreach(buf, container) for(auto buf : container)\n#define Loopdiag(i, j, h, w, sum) for(int i = ((sum) >= (h) ? (h) - 1 : (sum)), j = (sum) - i; i >= 0 && j < (w); i--, j++)\n#define Loopdiagr(i, j, h, w, sum) for(int j = ((sum) >= (w) ? (w) - 1 : (sum)), i = (sum) - j; j >= 0 && i < (h); j--, i++)\n#define Loopdiagsym(i, j, h, w, gap) for (int i = ((gap) >= 0 ? (gap) : 0), j = i - (gap); i < (h) && j < (w); i++, j++)\n#define Loopdiagsymr(i, j, h, w, gap) for (int i = ((gap) > (h) - (w) - 1 ? (h) - 1 : (w) - 1 + (gap)), j = i - (gap); i >= 0 && j >= 0; i--, j--)\n#define Loopitr(itr, container) for(auto itr = container.begin(); itr != container.end(); itr++)\n#define printv(vector) Loop(ex_i, vector.size()) { cout << vector[ex_i] << \" \"; } cout << endl;\n#define printmx(matrix) Loop(ex_i, matrix.size()) { Loop(ex_j, matrix[ex_i].size()) { cout << matrix[ex_i][ex_j] << \" \"; } cout << endl; }\n#define quickio() ios::sync_with_stdio(false); cin.tie(0);\n#define bitmanip(m,val) static_cast<bitset<(int)m>>(val)\n#define Comp(type_t) bool operator<(const type_t &another) const\n#define fst first\n#define snd second\nbool nearlyeq(double x, double y) { return abs(x - y) < eps; }\nbool inrange(ll x, ll t) { return x >= 0 && x < t; }\nbool inrange(vll xs, ll t) { Foreach(x, xs) if (!(x >= 0 && x < t)) return false; return true; }\nint ceillog2(ll x) { int ret = 0;\tx--; while (x > 0) { ret++; x >>= 1; } return ret; }\nll rndf(double x) { return (ll)(x + (x >= 0 ? 0.5 : -0.5)); }\nll floorsqrt(ll x) { ll m = (ll)sqrt((double)x); return m + (m * m <= x ? 0 : -1); }\nll ceilsqrt(ll x) { ll m = (ll)sqrt((double)x); return m + (x <= m * m ? 0 : 1); }\nll rnddiv(ll a, ll b) { return (a / b + (a % b * 2 >= b ? 1 : 0)); }\nll ceildiv(ll a, ll b) { return (a / b + (a % b == 0 ? 0 : 1)); }\nll gcd(ll m, ll n) { if (n == 0) return m; else return gcd(n, m % n); }\nll lcm(ll m, ll n) { return m * n / gcd(m, n); }\n\n/*******************************************************/\n\nstruct intpt_t {\n\tll x, y;\n\tintpt_t operator+(const intpt_t &p) { return { x + p.x, y + p.y }; }\n\tintpt_t operator-(const intpt_t &p) { return { x - p.x, y - p.y }; }\n\tintpt_t operator*(const double &c) { return { x * c, y * c }; }\n\tintpt_t operator/(const double &c) { return { x / c, y / c }; }\n\tbool operator==(const intpt_t &p) { return x == p.x && y == p.y; }\n};\n\nstruct pt_t {\n\tdouble x, y;\n\tpt_t operator+(const pt_t &p) { return { x + p.x, y + p.y }; }\n\tpt_t operator-(const pt_t &p) { return { x - p.x, y - p.y }; }\n\tpt_t operator*(const double &c) { return { x * c, y * c }; }\n};\n\npt_t cvtpt(intpt_t p) {\n\treturn { p.x, p.y };\n}\n\n// ax + by + c = 0\nstruct line_t {\n\tdouble a, b, c;\n};\n\npt_t cross_point(line_t l, line_t m) {\n\tpt_t ret = { INFD, INFD };\n\tdouble d = l.a * m.b - m.a * l.b;\n\tif (nearlyeq(d, 0)) return ret;\n\tdouble x = l.b * m.c - m.b * l.c;\n\tdouble y = l.a * m.c - m.a * l.c;\n\tret = { x / d, y / -d };\n\treturn ret;\n}\n\n// normal vector = (a, b), passing p\nline_t solve_line(double a, double b, pt_t p) {\n\treturn { a, b, -a * p.x - b * p.y };\n}\n\n// t should be radius\npt_t rot(pt_t p, double r) {\n\treturn {\n\t\tcos(r) * p.x - sin(r) * p.y,\n\t\tsin(r) * p.x + cos(r) * p.y\n\t};\n}\n\ndouble abs(pt_t p) {\n\treturn sqrt(p.x * p.x + p.y * p.y);\n}\n\n// angle [0, 2PI) of vector p to vector q\ndouble angle(pt_t p, pt_t q) {\n\tp = p * (1.0 / abs(p));\n\tq = q * (1.0 / abs(q));\n\tdouble r0 = acos(p.x * q.x + p.y * q.y);\n\tdouble r1 = asin(p.x * q.y - p.y * q.x);\n\tif (r1 >= 0) return r0;\n\telse return 2 * M_PI - r0;\n}\n\ndouble dist(line_t l, pt_t p) {\n\treturn abs(l.a * p.x + l.b * p.y + l.c)\n\t\t/ sqrt(l.a * l.a + l.b * l.b);\n}\n\nbool on_same_line(intpt_t p, intpt_t q) {\n\tint mask = (p.x ? 0 : 0b1000) + (p.y ? 0 : 0b100)\n\t\t+ (q.x ? 0 : 0b10) + (q.y ? 0 : 0b1);\n\tif (mask & 0b1100 == 0b1100 || mask & 0b0011 == 0b0011) return true;\n\tif (mask & 0b1010 == 0b1010 || mask & 0b0101 == 0b0101) return true;\n\tif (mask & 0b0000) {\n\t\tp = p / gcd(p.x, p.y);\n\t\tq = q / gcd(q.x, q.y);\n\t\tif (p.x < 0) p = p * -1;\n\t\tif (q.x < 0) q = q * -1;\n\t\tif (p == q) return true;\n\t\telse return false;\n\t}\n\telse return false;\n}\n\nint main() {\n\tintpt_t p0, p1;\n\tcin >> p0.x >> p0.y >> p1.x >> p1.y;\n\tint q; cin >> q;\n\tcout << setprecision(20);\n\tLoop(i, q) {\n\t\tintpt_t p2;\n\t\tcin >> p2.x >> p2.y;\n\t\tintpt_t ip = p1 - p0;\n\t\tintpt_t iq = p2 - p0;\n\t\tpt_t p = cvtpt(ip);\n\t\tpt_t q = cvtpt(iq);\n\t\tbool judge;\n\t\tif (on_same_line(ip, iq)) judge = true;\n\t\telse judge = false;\n\t\tdouble r = angle(p, q);\n\t\tif (judge) {\n\t\t\tif (M_PI * 0.5 < r && M_PI * 1.5) {\n\t\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (abs(q) > abs(p)) {\n\t\t\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif (r < M_PI) {\n\t\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\t\t}\n\t\t}\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<iostream>\nusing namespace std;\ntypedef long long ll;\nll read()\n{\n\tll x=0,f=1;char ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n\treturn x*f;\n}\nstruct Point{double x,y;}p0,p1,p2;\nPoint operator -(Point a,Point b){return (Point){a.x-b.x,a.y-b.y};}\ndouble cross(Point a,Point b){return a.x*b.y-a.y*b.x;}\ndouble dot(Point a,Point b){return a.x*b.x+a.y*b.y;}\ndouble norm(Point a){return a.x*a.x+a.y*a.y;}\nvoid read(Point &p){p.x=read(),p.y=read();}\nint Clockwise(Point p0,Point p1,Point p2)\n{\n\tPoint v1=p1-p0,v2=p2-p0;\n\tif(cross(v1,v2)>0)return -2;\n\tif(cross(v1,v2)<0)return 2;\n\tif(dot(v1,v2)<0)return -1;\n\tif(norm(v1)<norm(v2))return 1;\n\treturn 0;\n}\nint main()\n{\n\tread(p0),read(p1);\n\tint q=read();while(q--)\n\t{\n\t\tread(p2);\n\t\tswitch(Clockwise(p0,p1,p2))\n\t\t{\n\t\t\tcase -2:printf(\"COUNTER_CLOCKWISE\\n\");break;\n\t\t\tcase -1:printf(\"ONLINE_BACK\\n\");break;\n\t\t\tcase 0:printf(\"ON_SEGMENT\\n\");break;\n\t\t\tcase 1:printf(\"ONLINE_FRONT\\n\");break;\n\t\t\tcase 2:printf(\"CLOCKWISE\\n\");break;\n\t\t}\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\nusing namespace std;\n\nint main()\n{\n\tint p0x = 0, p0y = 0, p1x = 0, p1y = 0, q = 0, px = 0, py = 0;\n\tint a = 0, b = 0;\n\tlong y = 0;\n\tdouble t = 0;\n\n\tcin >> p0x >> p0y >> p1x >> p1y;\n\tcin >> q;\n\n\ta = p1x - p0x;\n\tb = p1y - p0y;\n\n\tfor (int i = 0; i < q; i++) {\n\t\tcin >> px >> py;\n\n\t\ty = a * py - b * px;\n\n\t\tif(y > 0)\n\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\telse if(y < 0)\n\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\telse {\n\t\t\tif (a != 0)\n\t\t\t\tt = (double)(px - p0x) / (double)a;\n\t\t\telse\n\t\t\t\tt = (double)(py - p0y) / (double)b;\n\t\t\t\t\n\t\t\tif (t < 0)\n\t\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t\telse if (t > 1)\n\t\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t\telse\n\t\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t}\n\t}\n\t\t\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <string>\n#include <vector>\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<stack>\n#include<queue>\n#include<cmath>\n#include<algorithm>\n#include<functional>\n//--\n#include<list>\n#include<deque>\n#include<bitset>\n#include<set>\n#include<map>\n#include<cstdio>\n#include<cstring>\n#include<sstream>\n#include<complex>\n#define X first\n#define Y second\n#define pb push_back\n#define rep(X,Y) for (int (X) = 0;(X) < (Y);++(X))\n#define rrep(X,Y) for (int (X) = Y-1;(X) >=0;--(X))\n#define all(X) (X).begin(),(X).end()\n#define rall(X) (X).rbegin(),(X).rend()\n\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> pii;\ntypedef complex<double> pt;\n\ndouble dot(pt a,pt b){return (conj(a)*b).real();}\ndouble cros(pt a,pt b){return (conj(a)*b).imag();}\npt proj(pt a,pt to){\n  return dot(a,to)/norm(to)*to;\n}\n\npt refle(pt a,pt mirror){\n  return pt(2)*proj(a,mirror)-a;\n}\n\nint pt3(pt a,pt b,pt c){\n  pt p=b-a,q=c-a;\n  double tmp;\n  tmp=cros(p,q);\n  if(tmp>0){\n    return 0;\n  }else if(tmp<0){\n    return 1;\n  }else if(norm(p+q)<max(norm(p),norm(q))){\n    return 2;\n  }else if(norm(q)>norm(p)){\n    return 3;\n  }else if(norm(q)<norm(p)){\n    return 4;\n  }\n  return 5;\n}\nint main(){\n  int i,j,k,n;\n  pt o,p,q;\n // cout<<cros(pt(1,0),pt(0,-1))<<endl;\n  cin>>o.real()>>o.imag()>>p.real()>>p.imag();\n  cin>>n;\n  char str[][100]={\"COUNTER_CLOCKWISE\",\"CLOCKWISE\",\"ONLINE_BACK\"\n    ,\"ONLINE_FRONT\",\"ON_SEGMENT\",\"ON_SEGMENT\"};\n  double a,b;\n  rep(i,n){\n    cin>>a>>b;\n    q=pt(a,b);\n    printf(\"%s\\n\",str[pt3(0,p,q)]);\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<cstdlib>\n#include<cmath>\n#include<iostream>\n#include<vector>\n#include<algorithm>\n\nusing namespace std;\n\nint main()\n{\n\tdouble p1x, p1y, p2x, p2y, p0x, p0y;\n\tint q;\n\n\tscanf(\"%lf %lf %lf %lf\", &p0x, &p0y, &p1x, &p1y);\n\n\tpair<double, double> v01 = { p1x - p0x, p1y - p0y };\n\n\n\tscanf(\"%d\", &q);\n\n\tfor (int i = 0; i < q; i++)\n\t{\n\t\tscanf(\"%lf %lf\", &p2x, &p2y);\n\n\t\tif ((p2x == p0x && p2y == p0y) || (p2x == p1x && p2y == p0y)){\n\t\t\tprintf(\"ONLINE_SEGMENT\\n\");\n\n\t\t\tcontinue;\n\t\t}\n\n\t\tpair<double, double> v02 = { p2x - p0x, p2y - p0x };\n\n\t\tif (v01.first*v02.second == v01.second*v01.first)\n\t\t{\n\t\t\tif (v01.first*v02.first < 0)\n\t\t\t{\n\t\t\t\tprintf(\"ONLINE_BACK\\n\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tabs(v01.first) < abs(v02.first) ? printf(\"ONLINE_FRONT\\n\") : printf(\"ONLINE_SEGMENT\\n\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\n\t\tdouble y01 = (v01.second / v01.first)*(p2x - p0x) + p0y;\n\t\ty01 < p2y ? printf(\"COUNTER_CLOCKWISE\\n\") : printf(\"CLOCKWISE\\n\");\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include <cstdlib>\n#include <stack>\n#include <queue>\n#include <list>\n#include <vector>\n#include <sstream>\n\nusing namespace std;\n\nclass c_main\n{\nprivate:\n    \npublic:\n    c_main();\n    void f_input();\n};\n\nc_main::c_main()\n{\n\n}\n\nvoid c_main::f_input()\n{\n    double xp1,yp1,xp2,yp2;\n    int q;\n    int i;\n    double x[1000];\n    double y[1000];\n    double a;\n    double b;\n    double x_a;\n    double y_a;\n    double a_a;\n    double b_a;\n    int pt1;\n\n    cin >> xp1 >> yp1 >> xp2 >> yp2;\n    \n    if (xp1 == xp2){\n        x_a = xp1;\n        y_a = 0;\n        pt1 = 0;\n    }else if (yp1 == yp2){\n        x_a = 0;\n        y_a = yp1; \n        pt1 = 1;\n    }else{\n        \n        a_a = (yp2-yp1)/(xp2-xp1);\n      \n        a = -1 * (1/a_a);\n       \n        b_a = -1 * a_a * xp1+ yp1;\n        pt1 = 2;\n    }\n    \n    cin >> q;\n    \n    for ( i = 0; i < q; ++i){\n        cin >> x[i] >> y[i];\n        if (pt1 == 0){\n            if(yp1 >= yp2){\n                if(x[i] == x_a){\n                    if(y[i] > yp1){\n                        cout << \"ONLINE_BACK\" << endl;\n                    }else if(y[i] < yp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(yp2 <= y[i] && y[i] <= yp1){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(x[i] < x_a){\n                    cout << \"CLOCKWISE\" << endl;\n                    \n                }else if(x[i] > x_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n     \n                }\n            }else{\n                if(x[i] == x_a){\n                    if(y[i] < yp1){\n                        cout << \"ONLINE_BACK\" << endl;\n                    }else if(y[i] > yp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(yp1 <= y[i] && y[i] <= yp2){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(x[i] < x_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n                    \n                    \n                    \n                }else if(x[i] > x_a){\n                    cout << \"CLOCKWISE\" << endl;\n                }\n            }\n            //printf(\"%10.10f %10.10f\\n\", x_a,y[i]);\n            \n        }else if(pt1 == 1){\n            if(xp1 >= xp2){\n                if(y[i] == y_a){\n                    if(x[i] > xp1){\n                        cout << \"ONLINE_BACK\" << endl;\n                    }else if(x[i] < xp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(xp2 <= x[i] && x[i] <= xp1){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(y[i] < y_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n                }else if(y[i] > y_a){\n                    cout << \"CLOCKWISE\" << endl;\n                }\n            }else{\n                if(y[i] == y_a){\n                    if(x[i] < xp1){\n                        cout << \"ONLINE_BACK\" << endl;\n                    }else if(x[i] > xp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(xp1 <= x[i] && x[i] <= xp2){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(y[i] < y_a){\n                    cout << \"CLOCKWISE\" << endl;\n                }else if(y[i] > y_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n                }\n            }\n            //printf(\"%10.10f %10.10f\\n\", x[i],y_a);\n        }else if(pt1 == 2){\n            b = -1 * a * x[i] + y[i];\n            x_a = (b - b_a)/(a_a - a);\n            y_a = a_a * x_a + b_a;\n            if(xp1 >= xp2){\n                if(y[i] == y_a){\n                    if(x[i] > xp1){\n                        cout << \"ONLINE_BACK\" << endl;\n                    }else if(x[i] < xp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(xp2 <= x[i] && x[i] <= xp1){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(y[i] < y_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n                }else if(y[i] > y_a){\n                    \n                    cout << \"CLOCKWISE\" << endl;\n                }\n            }else{\n                if(y[i] == y_a){\n                    if(x[i] < xp1){\n                        cout << \"ONLINE_BACK\" << endl;\n                    }else if(x[i] > xp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(xp1 <= x[i] && x[i] <= xp2){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(y[i] < y_a){\n                    cout << \"CLOCKWISE\" << endl;\n                }else if(y[i] > y_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n                }\n            }\n            //printf(\"%10.10f %10.10f\\n\", x_a,y_a);\n        }\n    }\n}\n\nint main(){\n    c_main main01;\n    main01.f_input();\n    \n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "/*\n幾何\nhttps://gist.github.com/zeptometer/3719669\n複素数平面による幾何ライブラリ←もっと短くなる可能生アリ\nhttp://osrehun.hatenadiary.jp/entry/2016/12/31/145827\n\n*/\n#include <bits/stdc++.h>\nusing namespace std;\n\nusing DD=double;\n\n\n#define EPS 1e-10\n#define eq(a,b) (abs( (a) - (b) )<EPS)\nconst DD PI=acosl(-1.0);\nconstexpr DD INF=1LL<<62;\n\n//点\nusing P=complex<DD>;\n//ベクトル\nusing V=P;\n//線分\nstruct Segment{\n    P a,b;\n    Segment()=default;\n    Segment(P a,P b) :a(a),b(b){}\n    Segment(DD ax,DD ay,DD bx,DD by):a(ax,ay),b(bx,by){}\n\n};\n//直線\nusing Line=Segment;\n//円\nstruct Circle{\n    P p;\n    DD r;\n    Circle()=default;\n    Circle(P p,DD r):p(p),r(r){}\n};\nusing Polygon=vector<P>;\n\n//++++++++++++++++基本計算++++++++++++++//\ninline DD torad(const DD &deg){return deg*PI/180;}\ninline DD todeg(const DD &rad){return rad*180/PI;}\n//内積\ninline DD dot(const V &a,const V &b){\n    return real(a*conj(b));\n}\n//外積\ninline DD cross(const V &a,const V &b){\n    return imag(conj(a)*b);\n}\n//ベクトルvを反時計回りにr度回転\ninline V rotate(const V &v,const DD r){\n    return v*V(cos(r),sin(r));\n}\ninline bool xy(const P &a,const P &b){\n    if(real(a)+EPS<=real(b)) return true;\n    if(eq(real(a),real(b)) && imag(a)+EPS<imag(b)) return true;\n    return false;\n}\ninline bool yx(const P &a,const P &b){\n    if(imag(a)+EPS<imag(b)) return true;\n    if(eq(imag(a),imag(b)) && real(a)+EPS<real(b)) return true;\n    return false;\n}\n\n//++++++++++++++++平行や直交+++++++++++++++//\ninline bool isOrthogonal(V &a,V &b){\n    return eq(dot(a,b),0.0);\n}\ninline bool isOrthogonal(Segment &a,Segment &b){\n    return eq(dot(a.a-a.b,b.a-b.b),0);\n}\ninline bool isParallel(V &a,V &b){\n    return eq(cross(a,b),0.0);\n}\ninline bool isParallel(Segment &a,Segment &b){\n    return eq(cross(a.a-a.b,b.a-b.b),0);\n}\n//線分a-bに対してcがどの位置にあるか\n//ccwの簡略版 反時計回り:1 時計回り:-1 直線上:0\ninline int ccw(P &a,P &b,P &c){\n    DD cr=cross(b-a,c-a);\n    if(cr>EPS) return 1;\n    if(cr<-EPS) return -1;\n    return 0;\n}\n\n//線分a-bに対してcがどの位置にあるか\n//反時計回り:1　時計回り:-1 直線上(a,b,c:-2 a,c,b:0 c,a,b:2) \ninline int ccwH(P &a,P &b,P &c){\n    b-=a;c-=a;\n    if(cross(b,c)>EPS) return 1;\n    if(cross(b,c)<-EPS) return -1;\n    if(dot(b,c)<-EPS) return 2;\n    if(norm(b)<norm(c)) return -2;\n    return 0;\n}\n\n\n//+++++++++++++++射影+++++++++++++++++++++//\ninline P project(const P &p,const Segment &s){\n    V base=s.b-s.a;\n    DD r=dot(p-s.a,base)/norm(base);\n    return s.a+base*r;\n}\ninline P reflect(const P &p,const Segment &s){\n    return p+(project(p,s)-p)*2.0;\n}\n/*++++++++++点との距離++++++++++++++++++*/\n//点と直線の距離\ninline DD dis(P p,Line l){return abs(cross(l.b-l.a,p-l.a))/abs(l.b-l.a);}\n//点と線分の距離\ninline DD disPS(P p,Segment s){\n    if( dot(s.b-s.a,p-s.a)<0.0 ) return abs(p-s.a);\n    if( dot(s.a-s.b,p-s.b)<0.0 ) return abs(p-s.b);\n    return dis(p,s); //点と直線の距離\n}\n\n\n//+++++++++++++++線分と直線+++++++++++++++++//\n\n//線分a-b,c-dは交差するか?\ninline bool intersect(P a,P b,P c,P d){\n    return(ccwH(a,b,c)*ccwH(a,b,d)<=0 && ccwH(c,d,a)*ccwH(c,d,b)<=0);\n}\n//線分s,tは交差するか？\ninline bool intersect(Segment s,Segment t){\n    return intersect(s.a,s.b,t.a,t.b);\n}\n//線分と線分の交点\n//これをやる前にintersectで判定\ninline P crossPoint(Segment s,Segment t){\n    V base=t.b-t.a;\n    DD d1=abs(cross(base,s.a-t.a));\n    DD d2=abs(cross(base,s.b-t.a));\n    DD r=d1/(d1+d2);\n    return s.a+(s.b-s.a)*r;\n}\n//線分と線分の距離\ninline DD dis(Segment s,Segment t){\n    if(intersect(s,t)) return 0.0;\n    return min(min(disPS(t.a,s),disPS(t.b,s)),min(disPS(s.a,t),disPS(s.b,t)) );\n}\n\n//+++++++++++円++++++++++++++++//\n\n//円cと直線lの交点\n//abs(l,c.p)<c.r+EPSが必要\npair<P,P> crossPoint(Line l,Circle c){\n    P pr=project(c.p,l);\n    V e=(l.b-l.a)/(abs(l.b-l.a));\n    DD base=sqrt(c.r*c.r-norm(pr-c.p));\n    return make_pair(pr+e*base,pr-e*base);\n}\n//線分sと円cの交点\nvector<P> crossPointSC(Segment s,Circle c){\n    vector<P> ret;\n    if(dis(c.p,s)>=c.r+EPS) return ret;\n    auto p=crossPoint(s,c);\n    if(dot(p.first-s.a,s.b-s.a)>0 && dot(p.first-s.b,s.a-s.b)>0) ret.push_back(p.first);\n    if(dot(p.second-s.a,s.b-s.a)>0 && dot(p.second-s.b,s.a-s.b)>0) ret.push_back(p.second);\n    if(xy(s.a,s.b)) sort(ret.begin(),ret.end(),xy);\n    else sort(ret.rbegin(),ret.rend(),xy);\n    return ret;\n}\n\n//共通接線の数\n//離れている:4 外接:3 交わる:2 内接:1 内包:0\ninline int intersect(Circle a,Circle b){\n    DD d=abs(a.p-b.p);\n    if(d>a.r+b.r+EPS) return 4;\n    if(eq(d,a.r+b.r)) return 3;\n    if(eq(d,abs(a.r-b.r))) return 1;\n    if(d<abs(a.r-b.r)-EPS) return 0;\n    return 2;\n}\n\n//円c1と円c2の交点\n//これを使う前に交点があるかどうかを判定する\nvector<P> crossPoint(Circle a,Circle b){\n    vector<P> ret;\n    if(abs(a.p-b.p)<a.r+b.r+EPS) return ret;\n    DD d=abs(a.p-b.p);\n    DD s=acos((a.r*a.r+d*d-b.r*b.r)/(2*a.r*d));\n    DD t=arg(b.p-a.p);\n    if(eq(s,0)) ret.emplace_back(a.p+polar(a.r,t+s));\n    else ret.emplace_back(a.p+polar(a.r,t+s)),ret.emplace_back(a.p+polar(a.r,t-s));\n    return ret;\n}\n\n//pがcの外にあるかの判定が必要\nvector<P> TanLine(P &p,Circle &c){\n    vector<P> ret;\n    DD d=abs(p-c.p);\n    if(d<=c.r-EPS) return ret;\n    if(eq(d,c.r)){\n        ret.push_back(p);\n        return ret;\n    } \n    return crossPoint(c,Circle(p,sqrt(d*d-c.r*c.r)));\n}\n//https://ei1333.github.io/luzhiled/snippets/geometry/template.html\n//↑すごい。丸写し\n//円c1,c2の共通接線\n//接点をつないで線にしている(１個だけ追加するときに注意)\nvector<Line> TanLine(Circle a,Circle b){\n    vector<Line> ret;\n    if(a.r<b.r) swap(a,b);\n    DD g=abs(a.p-b.p);\n    if(eq(g,0)) return ret;\n    V u=(b.p-a.p)/g;\n    V v=rotate(u,PI*0.5);\n    for(DD s:{-1,1}){\n        DD h=(a.r+s*b.r)/g;\n        if(eq(1-h*h,0)){\n            ret.emplace_back(a.p+u*a.r,a.p+(u+v)*a.r);\n        }else if(1-h*h>0){\n            V uu=u*h,vv=v*sqrt(1-h*h);\n            ret.emplace_back(a.p+(uu+vv)*a.r,b.p-(uu+vv)*b.r*s);\n            ret.emplace_back(a.p+(uu-vv)*a.r,b.p-(uu-vv)*b.r*s);\n        }\n    }\n    return ret;\n}\n\n/*+++++++++++++++++++三角形+++++++++++++++++*/\n//外心\n//isParallel()を使って判定を忘れずに\nP circumcenter(P a,P b,P c){\n    P ab=(a+b)/2.0,bc=(b+c)/2.0;\n    Segment s(ab,ab+polar(1.0,arg(b-a)+PI*0.5));\n    Segment t(bc,bc+polar(1.0,arg(c-b)+PI*0.5));\n    return crossPoint(s,t);\n}\n\n/*+++++++++++++++++++多角形+++++++++++++++++++*/\n//IN:2 ON:1 OUT:0\n//点がどの位置にあるか\nint contains(P p,Polygon g){\n    int n=(int)g.size();\n    bool x=false;\n    for(int i=0;i<n;i++){\n        V a=g[i]-p,b=g[(i+1)%n]-p;\n        if(eq(cross(a,b),0) && dot(a,b)<EPS) return 1;\n        if(imag(a)>imag(b)) swap(a,b);\n        if(imag(a)<EPS && EPS<imag(b) && cross(a,b)>EPS) x=!x;\n    }\n    return (x?2:0);\n}\n//凸性判定\nbool isConvex(Polygon &g){\n    int n=(int)g.size();\n    int flag=0;\n    int t;\n    for(int i=0;i<n;i++){\n        V a(g[(i+1)%n]-g[i]),b(g[(i+2)%n]-g[i]);\n        if(cross(a,b)>EPS) t=1;\n        else if(cross(a,b)<-EPS) t=-1;\n        else continue;\n        if(flag==-t) return false;\n        flag=t;\n    }\n    return true;\n}\n\n//凸包　アンドリューのアルゴリズム\n//https://github.com/drken1215/algorithm/blob/master/Geometry/All.cpp←螺旋本より早そう\n//j=1:返上の点を含まない　j=-1:含む\n//反時計回りの多角形を返す\nPolygon ConvexHull(Polygon &s,int j){\n    int sz=(int)s.size();\n    if(sz<3) return s;\n    sort(s.begin(),s.end(),yx);\n\n    int n=0;\n    Polygon res(2*sz);\n    for(int i=0;i<sz;i++){\n        while(n>=2 && cross(res[n-1]-res[n-2],s[i]-res[n-2])<EPS*j){\n            n--;\n        }\n        res[n]=s[i];\n        n++;\n    }\n    int t=n+1;\n    for(int i=sz-2;i>=0;i--){\n        while(n>=t && cross(res[n-1]-res[n-2],s[i]-res[n-2])<EPS*j){\n            n--;\n        }\n        res[n]=s[i];\n        n++;\n    }\n    res.resize(n-1);\n    return res;\n}\n\n//符号付き面積\n//反時計回りの図形なら正\n//https://imagingsolution.net/math/calc_n_point_area/\nDD Area(const Polygon &g){\n    DD ret=0.0;\n    int n=(int)g.size();\n    for(int i=0;i<n;i++){\n        ret+=cross(g[i],g[(i+1)%n]);\n    }\n    return ret/2.0L;\n}\n\n//反時計回り\n//理解が浅い←大体分かった（本当か？）\nDD Diameter(Polygon &g){\n    g=ConvexHull(g,1);\n    int gz=g.size();\n    int m=0,M=0;\n    for(int i=1;i<gz;i++){\n        if(imag(g[i])<imag(g[m])) m=i;\n        if(imag(g[i])>imag(g[M])) M=i;\n    }\n    DD ret=0;\n    int sm=m,sM=M;\n    while(m!=sM || M!=sm){\n        ret=max(ret,norm(g[m]-g[M]));\n        if(cross(g[(m+1)%gz]-g[m],g[(M+1)%gz]-g[M])<0) m=(m+1)%gz;\n        else M=(M+1)%gz;\n    }\n    return sqrt(ret);\n}\n\n//凸多角形gをlで切断\n//l.p1-l.p2の左側\n//gは反時計回り→反時計回りで返す\n//時計回り→時計回り\nPolygon ConvexCut(const Polygon &g,Line l){\n    Polygon ret;\n    int gz=(int)g.size();\n    for(int i=0;i<gz;i++){\n        P now=g[i],next=g[(i+1)%gz];\n        if(ccw(l.a,l.b,now)>=0) ret.push_back(now);\n        if(ccw(l.a,l.b,now)*ccw(l.a,l.b,next)<0){\n            ret.push_back(crossPoint(Line(now,next),l));\n        }\n    }\n    return ret;\n}\n\ninline DD calc(P a,P b,DD r,bool triangle){\n    if(triangle) return cross(a,b);\n    else return r*r*arg(b-a);\n}\n\nDD calcArea(DD r,P a,P b){\n    if(eq(abs(a-b),0)) return 0;\n    bool ina=abs(a)<r+EPS;\n    bool inb=abs(b)<r+EPS;\n    if(ina && inb) return cross(a,b);\n    auto cr=crossPointSC(Segment(a,b),Circle((0,0),r));\n    if(cr.empty()) return calc(a,b,r,false);\n    auto s=cr[0],t=cr.back();\n    return calc(s,t,r,true)+calc(a,s,r,ina)+calc(t,b,r,inb);\n}\n\n//円と多角形の共通部分の面積\n//http://drken1215.hatenablog.com/entry/2020/02/02/091000\nDD Area(Circle c,Polygon g){\n    DD ret=0.0;\n    int gz=g.size();\n    if(gz<3) return ret;\n    for(int i=0;i<gz;i++){\n        P a=g[i]-c.p,b=g[(i+1)%gz]-c.p;\n        ret+=calcArea(c.r,g[i]-c.p,g[(i+1)%gz]-c.p);\n    }\n    return ret/2.0;\n}\n\n//++++なんか凄いの+++++++++++++++\n\n//最近点対\nDD RecClosetPair(Polygon::iterator it,int n){\n    if(n<=1) return INF;\n    int m=n/2;\n    DD x=real(it[m]);\n    DD d=min(RecClosetPair(it,m),RecClosetPair(it+m,n-m));\n    inplace_merge(it,it+m,it+n,yx);\n    Polygon v;\n    for(int i=0;i<n;i++){\n        if(abs(real(it[i])-x)>=d) continue;\n        for(int j=0;j<v.size();j++){\n            DD dy=imag(it[i])-imag(v[v.size()-1-j]);\n            if(dy>=d) break;\n            DD dx=real(it[i])-real(v[v.size()-1-j]);\n            d=min(d,sqrt(dx*dx+dy*dy));\n        }\n        v.push_back(it[i]);\n    }\n    return d;\n}\n\nDD ClosetPair(Polygon g){\n    sort(g.begin(),g.end(),xy);\n    return RecClosetPair(g.begin(),g.size());\n}\n\n\n\n\nsigned main(){\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr); \n    cout<<fixed<<setprecision(10);\n\n    DD x1,y1,x2,y2;\n    cin>>x1>>y1>>x2>>y2;\n    int Q;\n    cin>>Q;\n    while(Q--){\n        DD x,y;\n        cin>>x>>y;\n        P a(x1,y1),b(x2,y2),c(x,y);\n        int d=ccwH(a,b,c);\n        if(d==1) cout<<\"COUNTER_CLOCKWISE\"<<endl;\n        else if(d==-1) cout<<\"CLOCKWISE\"<<endl;\n        else if(d==0) cout<<\"ON_SEGMENT\"<<endl;\n        else if(d==-2) cout<<\"ONLINE_FRONT\"<<endl;\n        else cout<<\"ONLINE_BACK\"<<endl;\n    }\n}\n\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define X real()\n#define Y imag()\n\nusing Vector2 = complex<double>;\nconst double EPS = 1e-8;\nconst double PI = 3.14159265359;\n\n// Vector2\ndouble dot(Vector2 a, Vector2 b){\n    return (a.X * b.X + a.Y * b.Y);\n}\n\ndouble cross(Vector2 a, Vector2 b){\n    return (a.X * b.Y - a.Y * b.X);\n}\n\nint ccw(Vector2 p1, Vector2 p2, Vector2 p3){\n    Vector2 a = p2 - p1;\n    Vector2 b = p3 - p1;\n    double dotValue = dot(a, b);\n    double crossValue = cross(a, b);\n    if(crossValue > EPS) return 1;  // anticlockwise\n    if(crossValue < -EPS) return -1;    // clockwise\n    if(dotValue < -EPS) return 2;   // p2-p1-p3\n    if(norm(a) < norm(b)) return -2;    // p1-p2-p3\n    return 0;   // p1-p3-p2\n}\n\nint main(){\n\n    int x0, y0, x1, y1;\n    cin >> x0 >> y0 >> x1 >> y1;\n    Vector2 p0(x0, y0);\n    Vector2 p1(x1, y1);\n\n    int q;\n    cin >> q;\n    for(int i = 0; i < q; i++){\n        int x, y;\n        cin >> x >> y;\n        Vector2 p(x, y);\n        int temp = ccw(p0, p1, p);\n        if(temp == 1){\n            cout << \"COUNTER_CLOCKWISE\" << endl;\n        }\n        else if(temp == -1){\n            cout << \"CLOCKWISE\" << endl;\n        }\n        else if(temp == 2){\n            cout << \"ONLINE_BACK\" << endl;\n        }\n        else if(temp == -2){\n            cout << \"ONLINE_FRONT\" << endl;\n        }\n        else{\n            cout << \"ON_SEGMENT\" << endl;\n        }\n    }\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef pair<ll, ll> lpair;\nconst ll MOD = 1e9 + 7;\nconst ll INF = 1e18;\n#define rep(i,m,n) for(ll i = (m); i < (n); i++)\n#define rrep(i,m,n) for(ll i = (m); i >= (n); i--)\n#define print(x) cout << (x) << endl;\n#define print2(x,y) cout << (x) << \" \" << (y) << endl;\n#define printa(x,n) for(ll i = 0; i < n; i++){ cout << (x[i]) << \" \";} cout<<endl;\n\n#define EPS (1e-10)\n#define EQ(a,b) (abs((a) - (b)) < EPS)\ntypedef complex<double> P;\ndouble dot(P a, P b){ //内積\n    return (a.real() * b.real() + a.imag() * b.imag());\n}\n\ndouble cross(P a, P b){ //外積\n    return (a.real() * b.imag() - a.imag() * b.real());\n}\n\nbool is_orth(P a1, P a2, P b1, P b2){ //垂直か\n    return EQ(dot(a1 - a2, b1 - b2), 0.0);\n}\n\nbool is_para(P a1, P a2, P b1, P b2){ //平行か\n    return EQ(cross(a1 - a2, b1 - b2), 0.0);\n}\n\nbool is_online(P a, P b, P c){ //cが線分上か\n    return (abs(a-c) + abs(c-b) < abs(a-b) + EPS);\n}\n\nbool distance_lp(P a, P b, P c){ //直線abと点cの距離\n    return abs(cross(b-a, c-a)) / abs(b-a);\n}\n\nbool is_intersect(P a1, P a2, P b1, P b2){ //線分の交差判定\n    return (cross(a2-a1, b1-a1) * cross(a2-a1, b2-a1) < EPS) && \n        (cross(b2-b1, a1-b1) * cross(b2-b1, a2-b1) < EPS);\n}\n\nP intersect_pos(P a1, P a2, P b1, P b2){ //直線同士の交点\n    P a = a2 - a1;\n    P b = b2 - b1;\n    return a1 + a * cross(b, b1 - a1) / cross(b, a);\n}\n\n#define printP(P) cout << \"(\" << P.real() << \", \" << P.imag() << \")\" << endl;\n\n\n\n\nint main(){\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    double x0, y0, x1, y1;\n    cin >> x0 >> y0 >> x1 >> y1;\n    P p10(x1-x0, y1-y0);\n    ll q;\n    cin >> q;\n    while(q--){\n        double x2,y2;\n        cin >> x2 >> y2;\n        P p(x2,y2);\n        P p20(x2-x0, y2-y0);\n        if(abs(p20) < EPS || abs(p10) < EPS){\n            print(\"ON_SEGMENT\");\n        }else{\n            double sin = cross(p10, p20) / abs(p10) / abs(p20);\n            double cos = dot(p10, p20) / abs(p10) / abs(p20);\n            if(abs(cos+1) < EPS){\n                print(\"ONLINE_BACK\");\n            }else if(abs(sin) < EPS){\n                if(abs(p20) > abs(p10)){\n                    print(\"ONLINE_FRONT\");\n                }else{\n                    print(\"ON_SEGMENT\");\n                }\n            }else if(sin > 0){\n                print(\"COUNTER_CLOCKWISE\");\n            }else{\n                print(\"CLOCKWISE\");\n            }\n\n        }\n\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#pragma warning(disable : 4267) // \"int n = (unsigned)size\"\n\nusing vi = vector<int>; using vvi = vector<vi>; using vvvi = vector<vvi>;\nusing ll = long long int;\nusing vll = vector<ll>; using vvll = vector<vll>; using vvvll = vector<vvll>;\nusing vd = vector<double>; using vvd = vector<vd>; using vvvd = vector<vvd>;\nusing P = pair<int, int>;\nusing Pll = pair<ll, ll>;\nusing cdouble = complex<double>;\n\nconst double eps = 1e-9;\nconst double INFD = numeric_limits<double>::infinity();\n#define Loop(i, n) for(int i = 0; i < int(n); i++)\n#define Loopll(i, n) for(ll i = 0; i < ll(n); i++)\n#define Loop1(i, n) for(int i = 1; i <= int(n); i++)\n#define Loopll1(i, n) for(ll i = 1; i <= ll(n); i++)\n#define Loopr(i, n) for(int i = int(n) - 1; i >= 0; i--)\n#define Looprll(i, n) for(ll i = ll(n) - 1; i >= 0; i--)\n#define Loopr1(i, n) for(int i = int(n); i >= 1; i--)\n#define Looprll1(i, n) for(ll i = ll(n); i >= 1; i--)\n#define Foreach(buf, container) for(auto buf : container)\n#define Loopdiag(i, j, h, w, sum) for(int i = ((sum) >= (h) ? (h) - 1 : (sum)), j = (sum) - i; i >= 0 && j < (w); i--, j++)\n#define Loopdiagr(i, j, h, w, sum) for(int j = ((sum) >= (w) ? (w) - 1 : (sum)), i = (sum) - j; j >= 0 && i < (h); j--, i++)\n#define Loopdiagsym(i, j, h, w, gap) for (int i = ((gap) >= 0 ? (gap) : 0), j = i - (gap); i < (h) && j < (w); i++, j++)\n#define Loopdiagsymr(i, j, h, w, gap) for (int i = ((gap) > (h) - (w) - 1 ? (h) - 1 : (w) - 1 + (gap)), j = i - (gap); i >= 0 && j >= 0; i--, j--)\n#define Loopitr(itr, container) for(auto itr = container.begin(); itr != container.end(); itr++)\n#define printv(vector) Loop(ex_i, vector.size()) { cout << vector[ex_i] << \" \"; } cout << endl;\n#define printmx(matrix) Loop(ex_i, matrix.size()) { Loop(ex_j, matrix[ex_i].size()) { cout << matrix[ex_i][ex_j] << \" \"; } cout << endl; }\n#define quickio() ios::sync_with_stdio(false); cin.tie(0);\n#define bitmanip(m,val) static_cast<bitset<(int)m>>(val)\n#define Comp(type_t) bool operator<(const type_t &another) const\n#define fst first\n#define snd second\nbool nearlyeq(double x, double y) { return abs(x - y) < eps; }\nbool inrange(ll x, ll t) { return x >= 0 && x < t; }\nbool inrange(vll xs, ll t) { Foreach(x, xs) if (!(x >= 0 && x < t)) return false; return true; }\nint ceillog2(ll x) { int ret = 0;\tx--; while (x > 0) { ret++; x >>= 1; } return ret; }\nll rndf(double x) { return (ll)(x + (x >= 0 ? 0.5 : -0.5)); }\nll floorsqrt(ll x) { ll m = (ll)sqrt((double)x); return m + (m * m <= x ? 0 : -1); }\nll ceilsqrt(ll x) { ll m = (ll)sqrt((double)x); return m + (x <= m * m ? 0 : 1); }\nll rnddiv(ll a, ll b) { return (a / b + (a % b * 2 >= b ? 1 : 0)); }\nll ceildiv(ll a, ll b) { return (a / b + (a % b == 0 ? 0 : 1)); }\nll gcd(ll m, ll n) { if (n == 0) return m; else return gcd(n, m % n); }\nll lcm(ll m, ll n) { return m * n / gcd(m, n); }\n\n/*******************************************************/\n\nstruct point_t {\n\tdouble x, y;\n\tpoint_t operator+(const point_t &p) { return { x + p.x, y + p.y }; }\n\tpoint_t operator-(const point_t &p) { return { x - p.x, y - p.y }; }\n\tpoint_t operator*(const double &c) { return { x * c, y * c }; }\n};\n\n// ax + by + c = 0\nstruct line_t {\n\tdouble a, b, c;\n};\n\npoint_t cross_point(line_t l, line_t m) {\n\tpoint_t ret = { INFD, INFD };\n\tdouble d = l.a * m.b - m.a * l.b;\n\tif (nearlyeq(d, 0)) return ret;\n\tdouble x = l.b * m.c - m.b * l.c;\n\tdouble y = l.a * m.c - m.a * l.c;\n\tret = { x / d, y / -d };\n\treturn ret;\n}\n\n// normal vector = (a, b), passing p\nline_t solve_line(double a, double b, point_t p) {\n\treturn { a, b, -a * p.x - b * p.y };\n}\n\n// t should be radius\npoint_t rot(point_t p, double r) {\n\treturn {\n\t\tcos(r) * p.x - sin(r) * p.y,\n\t\tsin(r) * p.x + cos(r) * p.y\n\t};\n}\n\ndouble abs(point_t p) {\n\treturn sqrt(p.x * p.x + p.y * p.y);\n}\n\n// angle [0, 2PI) of vector p to vector q\ndouble angle(point_t p, point_t q) {\n\tp = p * (1.0 / abs(p));\n\tq = q * (1.0 / abs(q));\n\tdouble r0 = acos(p.x * q.x + p.y * q.y);\n\tdouble r1 = asin(p.x * q.y - p.y * q.x);\n\tif (r1 >= 0) return r0;\n\telse return 2 * M_PI - r0;\n}\n\ndouble dist(line_t l, point_t p) {\n\treturn abs(l.a * p.x + l.b * p.y + l.c)\n\t\t/ sqrt(l.a * l.a + l.b * l.b);\n}\n\n\nint main() {\n\tpoint_t p0, p1;\n\tcin >> p0.x >> p0.y >> p1.x >> p1.y;\n\tint q; cin >> q;\n\tcout << setprecision(20);\n\tLoop(i, q) {\n\t\tpoint_t p2;\n\t\tcin >> p2.x >> p2.y;\n\t\tpoint_t p = p1 - p0;\n\t\tpoint_t q = p2 - p0;\n\t\tif (nearlyeq(abs(p), 0)) {\n\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t}\n\t\telse if (nearlyeq(abs(q), 0)) {\n\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t}\n\t\telse {\n\t\t\tdouble r = angle(p, q);\n\t\t\tif (nearlyeq(r, M_PI)) {\n\t\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t\t}\n\t\t\telse if (nearlyeq(r, 0) || nearlyeq(r, M_PI * 2)) {\n\t\t\t\tif (abs(q) > abs(p)) {\n\t\t\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (r < M_PI) {\n\t\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\t\t}\n\t\t}\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define FOR(i, s, n) for(int i = s; i < (int)n; ++i)\n#define per(i, n) for(int i = n; i >= 0; i--)\n#define ROF(i, s, n) for(int i = s; i >= (int)n; i--)\n#define FORIT(i, A) for (auto i : A)\n#define PRINT(x) cout << (x) << \"\\n\"\n#define ALL(a) (a).begin(),(a).end()\n#define RALL(a) (a).rbegin(), (a).rend()\n#define MP make_pair\n#define PB push_back\n#define EACH(i, n) for (__typeof((n).begin()) i = (n).begin(); i != (n).end(); ++i)\n#define SZ(a) int((a).size())\n#define EXIST(s,e) ((s).find(e)!=(s).end())\n#define SORT(c) sort((c).begin(),(c).end())\n#define CLR(a) memset((a), 0 ,sizeof(a))\n#define NCLR(a) memset((a), -1 ,sizeof(a))\n#define sq(n) (n) * (n)\ntypedef vector<int> VI;\ntypedef vector<VI> VVI;\ntypedef vector<string> VS;\ntypedef pair<int, int> PII;\ntypedef complex<long double> P;\ntypedef long long LL;\ntypedef vector<LL> VLL;\ntypedef vector<VLL> VVLL;\ntypedef unsigned int uint;\ntypedef unsigned long long ull;\ntypedef priority_queue<int> maxpq;\ntypedef priority_queue< int, vector<int>, greater<int> > minpq;\ntypedef complex<double> Point;\nstatic const double EPS = 1e-10;\nstatic const double PI = acos( -1.0 );\nstatic const int mod = 1000000007;\nstatic const int INF = 1 << 29;\nstatic const LL LL_INF = 1ll << 60;\nstatic const int dx[] = { -1, 0, 1, 0, 1, -1, 1, -1 };\nstatic const int dy[] = { 0, -1, 0, 1, 1, 1, -1, -1 };\n\n#ifdef WIN32\n#define dump(x) cerr << #x << \" = \" << (x) << \"\\n\"\n#define debug(x) cerr << #x << \" = \" << (x) << \" (L\" << __LINE__ << \")\" << \" \" << __FILE__ << \"\\n\"\n#else\n#define dump(x)\n#define debug(x)\n#endif\n\ntemplate<class T> ostream &operator<<( ostream &os, vector<T> &v ) {\n  for ( int i = 0; i < v.size(); i++ ) {\n    if ( i ) os << \" \";\n    os << v[ i ];\n  }\n  return os;\n}\n\nlong double ClockWise(P p0, P p1, P p2)\n{\n  p1 -= p0;\n  p2 -= p0;\n  return arg( p1 ) - arg( p2 );\n}\n\nint main() {\n  ios::sync_with_stdio( false );\n  cin.tie( 0 );\n#ifdef WIN32\n  cerr << fixed;\n#endif\n  cout << fixed;\n  P p0, p1, p2;\n  long double x, y;\n  cin >> x >> y;\n  p0 = P( x, y );\n  cin >> x >> y;\n  p1 = P( x, y );\n  int n;\n  cin >> n;\n  for ( int i = 0; i < n; i++ ) {\n    cin >> x >> y;\n    p2 = P( x, y );\n    long double a = ClockWise( p0, p1, p2 );\n    if ( abs(a) < EPS )\n    {\n      if ( abs(p1) < abs(p2) )\n      {\n        PRINT( \"ONLINE_FRONT\" );\n      }\n      else {\n        PRINT( \"ON_SEGMENT\" );\n      }\n    }\n    else if ( abs(a) == acosl(-1) )\n    {\n      PRINT( \"ONLINE_BACK\" );\n    }\n    else if ( a < 0 && abs( a ) <= acosl( -1 ) )\n    {\n      PRINT( \"COUNTER_CLOCKWISE\" );\n    }\n    else\n    {\n      PRINT( \"CLOCKWISE\" );\n    }\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#define EPS (1e-15)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n#define COUNTER_CLOCKWISE 1\n#define CLOCKWISE -1\n#define ONLINE_BACK 2\n#define ONLINE_FRONT -2\n#define ON_SEGMENT 0\n\n\nstruct Segment;\nclass Point;\ntypedef Point Vector;\ntypedef Segment Line;\n\nclass Point {\npublic:\n\tdouble x, y;\n\tPoint() {}\n\tPoint(double xx, double yy) {\n\t\tx = xx;\n\t\ty = yy;\n\t}\n\tPoint operator + (Point& p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point& p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double k) { return Point(x * k, y * k); }\n\tPoint operator / (double k) { return Point(x / k, y / k); }\n\n\tdouble norm() { return x * x + y * y; }\n\tdouble abs() { return sqrt(norm()); }\n\tdouble dot(Point p) { return x * p.x + y * p.y; }\n\tdouble cross(Point& p) { return x * p.y - y * p.x; }\n\tdouble distance(Point& p) { return (*this - p).abs(); }\n\n\tbool operator == (const Point& p) const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\n\nstruct Segment {\n\tPoint p1, p2;\n};\n\ndouble distance(Point p,Line s) {\n\tVector a = s.p2 - s.p1;\n\tVector b = p - s.p1;\n\treturn a.cross(b) / a.abs();\n}\n\ndouble distanceS(Point p,Segment s) {\n\tVector p1p = p - s.p1;\n\tVector p2p = p - s.p2;\n\tVector p1p2 = s.p2 - s.p1;\n\tVector p2p1 = s.p1 - s.p2;\n\tif (p1p.dot(p1p2) < 0) {\n\t\treturn p1p.abs();\n\t}\n\telse if (p2p.dot(p2p1) < 0) {\n\t\treturn p2p.abs();\n\t}\n\telse {\n\t\treturn distance(p,s);\n\t}\n}\n\nPoint project(Point p,Segment s) {\n\tVector hepo = p - s.p1;\n\tVector base = s.p2 - s.p1;\n\tVector t = base * (hepo.dot(base) / base.norm());\n\treturn s.p1 + t;\n}\n\nint ccw(Point p0, Point p1, Point p) {\n\tVector p0p1 = p1 - p0;\n\tVector p0p;\n\tp0p = p - p0;\n\tif (p0p1.cross(p0p) > EPS) {\n\t\treturn COUNTER_CLOCKWISE;\n\t}\n\telse if (p0p1.cross(p0p) < -EPS) {\n\t\treturn CLOCKWISE;\n\t}\n\telse if (p0p1.dot(p0p) < -EPS) {\n\t\treturn ONLINE_BACK;\n\t}\n\telse if (p0p1.norm() < p0p.norm()) {\n\t\treturn ONLINE_FRONT;\n\t}\n\telse {\n\t\treturn ON_SEGMENT;\n\t}\n}\n\n\nint main() {\n\tPoint p0, p1, p;\n\tcin >> p0.x >> p0.y >> p1.x >> p1.y;\n\tint q;\n\tcin >> q;\n\twhile (q--) {\n\t\tcin >> p.x >> p.y;\n\t\tswitch (ccw(p0, p1, p)) {\n\t\tcase COUNTER_CLOCKWISE:\n\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t\tbreak;\n\t\tcase CLOCKWISE:\n\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\t\tbreak;\n\t\tcase ONLINE_BACK:\n\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t\tbreak;\n\t\tcase ONLINE_FRONT:\n\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t\tbreak;\n\t\tcase ON_SEGMENT:\n\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <vector>\n#include <queue>\nusing namespace std;\n \n#define EPS (1e-10)\n#define equals (fabs((a)-(b)<EPS)\nint n;\n \nstruct Point\n{\n    double x, y;\n    Point(){}\n    Point(double x,double y):x(x),y(y){}\n    Point operator +(Point a)\n    {\n        return Point(x+a.x,y+a.y);\n    }\n    Point operator -(Point a)\n    {\n        return Point(x-a.x,y-a.y);\n    }\n    Point operator *(double a)\n    {\n        return Point(x*a,y*a);\n    }\n \n    double norm()\n    {\n        return x*x+y*y;\n    }\n};\nPoint p1,p2,p;\ndouble cross(Point a,Point b)\n{\n    return a.x*b.y-b.x*a.y;\n}\ndouble dot(Point a,Point b)\n{\n    return a.x*b.x+a.y*b.y;\n}\nvoid solve()\n{\n    Point a=p2-p1;\n    Point b=p-p1;\n    if(cross(a,b)>EPS) printf(\"COUNTER_CLOCKWISE\\n\");\n    else if(cross(a,b)<-EPS) printf(\"CLOCKWISE\\n\");\n    else if(dot(a,b)<-EPS) printf(\"ONLINE_BACK\\n\");\n    else if(a.norm()<b.norm()) printf(\"ONLINE_FRONT\\n\");\n    else printf(\"ON_SEGMENT\\n\");\n \n}\n \nint main()\n{\n    scanf(\"%lf%lf%lf%lf\",&p1.x,&p1.y,&p2.x,&p2.y);\n    scanf(\"%d\",&n);\n    while(n--)\n    {\n        scanf(\"%lf%lf\",&p.x,&p.y);\n        solve();\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "// include\n//------------------------------------------\n#include <bits/stdc++.h>\n\nusing namespace std;\n\n// conversion\n//------------------------------------------\ninline int toInt(string s) {\n    int v;\n    istringstream sin(s);\n    sin >> v;\n    return v;\n}\ntemplate <class T>\ninline string toString(T x) {\n    ostringstream sout;\n    sout << x;\n    return sout.str();\n}\n\n// math\n//-------------------------------------------\ntemplate <class T>\ninline T sqr(T x) {\n    return x * x;\n}\n\n// typedef\n//------------------------------------------\ntypedef vector<int> VI;\ntypedef vector<VI> VVI;\ntypedef vector<string> VS;\ntypedef pair<int, int> PII;\ntypedef long long LL;\n\n// container util\n//------------------------------------------\n#define ALL(a) (a).begin(), (a).end()\n#define RALL(a) (a).rbegin(), (a).rend()\n#define PB push_back\n#define MP make_pair\n#define SZ(a) int((a).size())\n#define EACH(i, c) \\\n    for (typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i)\n#define EXIST(s, e) ((s).find(e) != (s).end())\n#define SORT(c) sort((c).begin(), (c).end())\n\n// repetition\n//------------------------------------------\n#define FOR(i, a, b) for (int i = (a); i < (b); ++i)\n#define REP(i, n) FOR(i, 0, n)\n#define REPI(itr, ds) for (auto itr = ds.begin(); itr != ds.end(); itr++)\n\n// constant\n//--------------------------------------------\nconst double EPS = 1e-10;\nconst double PI = acos(-1.0);\nconst int INF_INT = 2147483647;\nconst LL INF_LL = 9223372036854775807;\n\n// clear memory\n//--------------------------------------------\n#define CLR(a) memset((a), 0, sizeof(a))\n\n// vector\n//--------------------------------------------\ntemplate <typename T>\nistream &operator>>(istream &is, vector<T> &vec) {\n    for (T &x : vec) is >> x;\n    return is;\n}\n\n// pair\n//--------------------------------------------\ntemplate <typename T, typename U>\nostream &operator<<(ostream &os, pair<T, U> &pair_var) {\n    os << \"(\" << pair_var.first << \", \" << pair_var.second << \")\";\n    return os;\n}\n\n// vector\n//--------------------------------------------\ntemplate <typename T>\nostream &operator<<(ostream &os, const vector<T> &vec) {\n    os << \"{\";\n    for (int i = 0; i < vec.size(); i++) {\n        os << vec[i] << (i + 1 == vec.size() ? \"\" : \", \");\n    }\n    os << \"}\";\n    return os;\n}\n\n// list\n//--------------------------------------------\ntemplate <typename T>\nostream &operator<<(ostream &os, const list<T> &lst) {\n    os << \"{\";\n    REPI(itr, lst) {\n        os << *itr;\n        itr++;\n        if (itr != lst.end()) os << \", \";\n        itr--;\n    }\n    os << \"}\";\n    return os;\n}\n\n// map\n//--------------------------------------------\ntemplate <typename T, typename U>\nostream &operator<<(ostream &os, map<T, U> &map_var) {\n    os << \"{\";\n    REPI(itr, map_var) {\n        os << *itr;\n        itr++;\n        if (itr != map_var.end()) os << \", \";\n        itr--;\n    }\n    os << \"}\";\n    return os;\n}\n\n// set\n//--------------------------------------------\ntemplate <typename T>\nostream &operator<<(ostream &os, set<T> &set_var) {\n    os << \"{\";\n    REPI(itr, set_var) {\n        os << *itr;\n        itr++;\n        if (itr != set_var.end()) os << \", \";\n        itr--;\n    }\n    os << \"}\";\n    return os;\n}\n\n// dump\n//--------------------------------------------\n#define DUMPOUT cerr\n\nvoid dump_func() { DUMPOUT << endl; }\ntemplate <class Head, class... Tail>\nvoid dump_func(Head &&head, Tail &&... tail) {\n    DUMPOUT << head;\n    if (sizeof...(Tail) > 0) {\n        DUMPOUT << \", \";\n    }\n    dump_func(std::move(tail)...);\n}\n#ifdef DEBUG_\n#define DEB\n#define dump(...)                                                       \\\n    DUMPOUT << \"  \" << string(#__VA_ARGS__) << \": \"                     \\\n            << \"[\" << to_string(__LINE__) << \":\" << __FUNCTION__ << \"]\" \\\n            << endl                                                     \\\n            << \"    \",                                                  \\\n        dump_func(__VA_ARGS__)\n#else\n#define DEB if (false)\n#define dump(...)\n#endif\n\n// geo\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nclass Point {\npublic:\n    double x, y;\n\n    Point(double x = 0, double y = 0) : x(x), y(y) {}\n\n    Point operator+(Point p) { return Point(x + p.x, y + p.y); }\n    Point operator-(Point p) { return Point(x - p.x, y - p.y); }\n    Point operator*(double a) { return Point(x * a, y * a); }\n    Point operator/(double a) { return Point(x / a, y / a); }\n\n    double abs() { return sqrt(norm()); }\n    double norm() { return x * x + y * y; }\n\n    bool operator==(const Point &p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n};\n\ntypedef Point Vector;\n\nclass Segment {\npublic:\n    Point p1, p2;\n    Segment(Point p1 = Point(), Point p2 = Point()) : p1(p1), p2(p2) {}\n};\n\ntypedef Segment Line;\n\nclass Circle {\npublic:\n    Point c;\n    double r;\n    Circle(Point c = Point(), double r = 0.0) : c(c), r(r) {}\n};\n\nclass vector<Point> Polygon;\n\ndouble norm(Vector a) { return a.x * a.x + a.y * a.y; }\n\ndouble abs(Vector a) { return sqrt(norm(a)); }\n\ndouble dot(Vector a, Vector b) { return a.x * b.x + a.y * b.y; }\n\ndouble cross(Vector a, Vector b) { return a.x * b.y - a.y * b.x; }\n\n#define STR(var) #var\n\nenum Position {\n    COUNTER_CLOCKWISE = 1,\n    CLOCKWISE = -1,\n    ONLINE_BACK = 2,\n    ON_SEGMENT = 0,\n    ONLINE_FRONT = -2\n};\n\nstring ccw(Point p0, Point p1, Point p2) {\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if (cross(a, b) > EPS) return STR(COUNTER_CLOCKWISE);\n    if (cross(a, b) < -EPS) return STR(CLOCKWISE);\n    if (dot(a, b) < -EPS) return STR(ONLINE_BACK);\n    if (a.norm() < b.norm()) return STR(ONLINE_FRONT);\n    return STR(ON_SEGMENT);\n}\n\nint main(void) {\n    Point p0, p1;\n    cin >> p0.x >> p0.y >> p1.x >> p1.y;\n    int q;\n    cin >> q;\n    Point p2[q];\n    REP(i, q) cin >> p2[i].x >> p2[i].y;\n    REP(i, q) cout << ccw(p0, p1, p2[i]) << endl;\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define PI acos(-1.0)\n#define EPS 1e-9\n\ndouble toRadian(double deg) {return ((deg*PI)/180.0);}\ndouble toDegree(double radian) {return ((radian*180.0)/PI);}\ndouble handleNegZero(double x) {return ((abs(x) < EPS)?0.0:x);}\n\nstruct point_i { int x, y;     // whenever possible, work with point_i\n  point_i() { x = y = 0; }                      // default constructor\n  point_i(int _x, int _y) : x(_x), y(_y) {} };         // user-defined\n\nstruct Point { //Integer Point\n    double x, y;\n    Point(){}\n    Point(double _x, double _y):x(_x), y(_y){}\n\n    bool operator < (Point other) const {\n        if(fabs(x - other.x) > EPS)\n            return x < other.x;\n        return y < other.y;\n    }\n\n    bool operator == (Point other) const {\n        return ((fabs(x - other.x) < EPS) && (fabs(y - other.y) < EPS));\n    }\n};\n\ndouble pointDistaceSquared2D (Point a, Point b) {return (a.x - b.x)*(a.x - b.x) + (a.y - b.y)*(a.y - b.y);}\ndouble dist (Point a, Point b) {return sqrt(pointDistaceSquared2D(a, b));}\n// rotate p by theta degrees CCW w.r.t origin (0, 0)\nPoint rotate(Point p, double theta) {\n    double rad = toRadian(theta);\n    return Point(p.x * cos(rad) - p.y * sin(rad),\n                 p.x * sin(rad) + p.y * cos(rad));\n}\n\nstruct line {double a, b, c;};\nvoid pointsToLine(Point p1, Point p2, line &l) {\n    if(fabs(p1.x-p2.x) < EPS) {\n        l.a = 1.0; l.b = 0.0; l.c = -p1.x;\n    } else {\n        l.a = -(double)(p1.y-p2.y) / (p1.x-p2.x);\n        l.b = 1.0;\n        l.c = -(double)(l.a*p1.x)-p1.y;\n    }\n}\n\nbool areParallel(line l1, line l2) {\n    return (fabs(l1.a-l2.a) < EPS) && (fabs(l1.b-l2.b) < EPS);\n}\n\nbool areSame(line l1, line l2) {\n    return areParallel(l1, l2) && (fabs(l1.c-l2.c) < EPS);\n}\n\nbool areIntersect(line l1, line l2, Point &p) {\n    if(areParallel(l1, l2)) return false;\n    p.x = (l2.b*l1.c-l1.b*l2.c) / (l2.a*l1.b-l1.a*l2.b);\n    if(fabs(l1.b) > EPS) p.y = -(l1.a*p.x+l1.c);\n    else                 p.y = -(l2.a*p.x+l2.c);\n    return true;\n}\n\nstruct vec {\n    double x, y;\n    vec(){}\n    vec(double _x, double _y):x(_x), y(_y){}\n};\n\nvec toVec(Point a, Point b) {return vec(b.x - a.x, b.y - a.y);}\nvec scale(vec v, double s) {return vec(v.x*s, v.y*s);}\nPoint translate(Point p, vec v) {return Point(p.x + v.x, p.y + v.y);}// translate p according to v\ndouble dot(vec a, vec b) {return (a.x*b.x + a.y*b.y);}\ndouble norm_sq(vec v) {return v.x*v.x + v.y*v.y;}\n\n// returns the distance from p to the line defined by\n// two points a and b (a and b must be different)\n// the closest point is stored in the 4th parameter (byref)\ndouble distToLine(Point p, Point a, Point b, Point &c) {\n    // formula: c = a + u* ab\n    vec ap = toVec(a, p), ab = toVec(a, b);\n    double u = dot(ap, ab) / norm_sq(ab);\n    c = translate(a, scale(ab, u));\n    return dist(p, c);\n}\n\n// returns the distance from p to the line segment ab defined by\n// two points a and b (still OK if a == b)\n// the closest point is stored in the 4th parameter (byref)\ndouble distToLineSegment(Point p, Point a, Point b, Point &c) {\n    vec ap = toVec(a, p), ab = toVec(a, b);\n    double u = dot(ap, ab) / norm_sq(ab);\n    if (u < 0.0) {\n        c = Point(a.x, a.y);\n        return dist(p, a);\n    }\n\n    if(u > 1.0) {\n        c = Point(b.x, b.y);\n        return dist(p, b);\n    }\n\n    return distToLine(p, a, b, c);\n}\n\ndouble angle(Point a, Point o, Point b) { // returns angle aob in rad\n    vec oa = toVec(o, a), ob = toVec(o, b);\n    return acos(dot(oa, ob) / sqrt(norm_sq(oa) * norm_sq(ob)));\n}\n\ndouble cross(vec a, vec b) {return a.x*b.y - a.y*b.x;}\n// note: to accept collinear points, we have to change the '> 0'\n// returns true if point r is on the left side of line pq\nbool ccw(Point p, Point q, Point r) {return cross(toVec(p, q), toVec(p, r)) > 0;}\n// returns true if point r is on the same line as the line pq\nbool collinear(Point p, Point q, Point r) {\n    return fabs(cross(toVec(p, q), toVec(p, r))) < EPS;\n}\n\nint main() {\n    //freopen(\"in\", \"r\", stdin);\n    //freopen(\"out\", \"w\", stdout);\n    double x0, y0, x1, y1, x2, y2;\n    int q;\n    Point a, b, c;\n\n    scanf(\"%lf %lf %lf %lf\", &x0, &y0, &x1, &y1);\n    scanf(\"%d\", &q);\n    a = Point(x0, y0);\n    b = Point(x1, y1);\n\n    for(int i = 0; i < q; i++) {\n        scanf(\"%lf %lf\", &x2, &y2);\n        c = Point(x2, y2);\n\n        if(ccw(a, b, c)) {\n            printf(\"COUNTER_CLOCKWISE\\n\");\n        } else if(collinear(a, b, c)) {\n            if(abs(PI - angle(c, a, b)) < EPS) {\n                printf(\"ONLINE_BACK\\n\");\n            } else if((sqrt(norm_sq(toVec(a, b))) - sqrt(norm_sq(toVec(a, c)))) < EPS) {\n                printf(\"ONLINE_FRONT\\n\");\n            } else {\n                printf(\"ON_SEGMENT\\n\");\n            }\n        } else {\n            printf(\"CLOCKWISE\\n\");\n        }\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <complex>\nusing namespace std;\ntypedef complex<int> point;\n\nstring ccw(point p0,point p1,point p2){\n  point temp;\n  p1-=p0;\n  p2-=p0;\n  temp=p1;\n  p1*=conj(p1);\n  p2*=conj(p1);\n  if(abs(temp)==0) return \"ON_SEGMENT\";\n  p1/=abs(temp);\n  if(p2.imag()>0) return \"COUNTER_CLOCKWISE\";\n  if(p2.imag()<0) return \"CLOCKWISE\";\n  p2/=abs(temp);\n  if(p2.real()<0) return \"ONLINE_BACK\";\n  if(p1.real()<p2.real()) return \"ONLINE_FRONT\";\n  return \"ON_SEGMENT\";\n}\n\nint main(){\n  int p0x,p0y,p1x,p1y,q,p2x,p2y;\n  cin>>p0x>>p0y>>p1x>>p1y;\n  point A = point(p0x,p0y);\n  point B = point(p1x,p1y);\n  cin>>q;\n  while(q--){\n    cin>>p2x>>p2y;\n    cout << ccw(  A, B , point(p2x,p2y) ) <<endl;    \n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n#include<math.h>\n#include<algorithm>\n#include<queue>\n#include<iostream>\n#include<set>\n#include<map>\n#define re register\n#define ll long long\nusing namespace std;\ninline int gi(){\n\tint f=1,sum=0;char ch=getchar();\n\twhile(ch>'9'|| ch<'0'){if(ch=='-')f=-1;ch=getchar();}\n\twhile(ch>='0' && ch<='9'){sum=(sum<<3)+(sum<<1)+ch-'0';ch=getchar();}\n\treturn sum*f;\n}\nconst double eps=1e-10,Pi=acos(-1.0);\nstruct node{\n\tdouble x,y;\n\tnode operator+(node b){return (node){x+b.x,y+b.y};}\n\tnode operator-(node b){return (node){x-b.x,y-b.y};}\n\tnode operator*(double b){return (node){x*b,y*b};}\n\tdouble len(){return sqrt(x*x+y*y);}\n};\ndouble cross(node a,node b){return a.x*b.y-a.y*b.x;}\ndouble dot(node a,node b){return a.x*b.x+a.y*b.y;}\nnode projection(node p1,node p2,node p){node v=p2-p1;return p1+v*(dot(v,p-p1)/dot(v,v));}\nnode reflection(node p1,node p2,node p){node P=projection(p1,p2,p);P=P*2-p;return P;}\nvoid Counter_Clockwise(node p1,node p2,node p){\n\tif(cross(p2-p1,p-p1)>eps){puts(\"COUNTER_CLOCKWISE\");return;}\n\tif(cross(p2-p1,p-p1)<-eps){puts(\"CLOCKWISE\");return;}\n\tif(dot(p2-p1,p-p1)<-eps){puts(\"ONLINE_BACK\");return;}\n\tif(dot(p2-p1,p2-p1)>=dot(p-p1,p2-p1)){puts(\"ON_SEGMENT\");return;}\n\tputs(\"ONLINE_FRONT\");\n}\nint main(){\n\tnode p1,p2,p;\n\tp1.x=gi();p1.y=gi();p2.x=gi();p2.y=gi();\n\tint Q=gi();\n\twhile(Q--){\n\t\tp.x=gi();p.y=gi();\n\t\tCounter_Clockwise(p1,p2,p);\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define TemplateVersion \"3.4.0\"\n// Useful Marcos\n//====================START=====================\n// Compile use C++11 and above\n#ifdef LOCAL\n#define debug(args...)                           \\\n    {                                            \\\n        string _s = #args;                       \\\n        replace(_s.begin(), _s.end(), ',', ' '); \\\n        stringstream _ss(_s);                    \\\n        istream_iterator<string> _it(_ss);       \\\n        err(_it, args);                          \\\n    }\nvoid err(istream_iterator<string> it)\n{\n}\ntemplate <typename T, typename... Args>\nvoid err(istream_iterator<string> it, T a, Args... args)\n{\n    cerr << *it << \" = \" << a << endl;\n    err(++it, args...);\n}\n#define MSG cout << \"Finished\" << endl\n#else\n#define debug(args...)\n#define MSG\n#endif\n#if __cplusplus >= 201703L\ntemplate <typename... Args>\nvoid readln(Args &... args)\n{\n    ((cin >> args), ...);\n}\ntemplate <typename... Args>\nvoid writeln(Args... args)\n{\n    ((cout << args << \" \"), ...);\n    cout << endl;\n}\n#elif __cplusplus >= 201103L\nvoid readln()\n{\n}\ntemplate <typename T, typename... Args>\nvoid readln(T &a, Args &... args)\n{\n    cin >> a;\n    readln(args...);\n}\nvoid writeln()\n{\n    cout << endl;\n}\ntemplate <typename T, typename... Args>\nvoid writeln(T a, Args... args)\n{\n    cout << a << \" \";\n    writeln(args...);\n}\n#endif\n#if __cplusplus >= 201103L\n#define FOR(_i, _begin, _end) for (auto _i = _begin; _i < _end; _i++)\n#define FORR(_i, _begin, _end) for (auto _i = _begin; _i > _end; _i--)\n#else\n#define FOR(_i, _begin, _end) for (int _i = (int)_begin; _i < (int)_end; _i++)\n#define FORR(_i, _begin, _end) for (int _i = (int)_begin; _i > (int)_end; _i--)\n#define nullptr NULL\n#endif\n#if __cplusplus >= 201103L\n#define VIS(_kind, _name, _size) \\\n    vector<_kind> _name(_size);  \\\n    for (auto &i : _name)        \\\n        cin >> i;\n#else\n#define VIS(_kind, _name, _size)    \\\n    vector<_kind> _name;            \\\n    _name.resize(_size);            \\\n    for (int i = 0; i < _size; i++) \\\n        cin >> _name[i];\n#endif\n// alias\n#define mp make_pair\n#define pb push_back\n#define eb emplace_back\n#define all(x) (x).begin(), (x).end()\n#define tcase() \\\n    int T;      \\\n    cin >> T;   \\\n    FOR(kase, 1, T + 1)\n// Swap max/min\ntemplate <typename T>\nbool smax(T &a, const T &b)\n{\n    if (a > b)\n        return false;\n    a = b;\n    return true;\n}\ntemplate <typename T>\nbool smin(T &a, const T &b)\n{\n    if (a < b)\n        return false;\n    a = b;\n    return true;\n}\n// ceil divide\ntemplate <typename T>\nT cd(T a, T b)\n{\n    return (a + b - 1) / b;\n}\n// min exchange\ntemplate <typename T>\nbool se(T &a, T &b)\n{\n    if (a < b)\n        return false;\n    swap(a, b);\n    return true;\n}\n// A better MAX choice\nconst int INF = 0x3f3f3f3f;\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int, int> pii;\ntypedef vector<int> vi;\ntypedef vector<ll> vll;\ntypedef set<int> si;\ntypedef vector<string> cb;\n//====================END=====================\n\n// Constants here\nconst double EPS = 1e-8;\nconst double PI = acos(-1);\n\ntypedef double db;\n\nint sgn(db x)\n{\n    if (abs(x) < EPS)\n        return 0;\n    if (x < 0)\n        return -1;\n    return 1;\n}\n\ninline db sqr(db x) { return x * x; }\n\n// Point/Vector\nstruct Point\n{\n    db x, y;\n\n    Point() : x(1e-18), y(1e-18) {}\n\n    Point(db _x, db _y) : x(_x + 1e-18), y(_y + 1e-18) {}\n\n    bool operator==(const Point &p)\n    {\n        return sgn(x - p.x) == 0 && sgn(y - p.y) == 0;\n    }\n\n    bool operator<(const Point &p)\n    {\n        int c = sgn(x - p.x);\n        if (c)\n            return c == -1;\n        return sgn(y - p.y) == -1;\n    }\n\n    Point operator+(const Point &p) { return Point(x + p.x, y + p.y); }\n    Point operator-(const Point &p) { return Point(x - p.x, y - p.y); }\n    Point operator*(db d) { return Point(x * d, y * d); }\n    Point operator/(db d) { return Point(x / d, y / d); }\n\n    db operator^(const Point &p) { return x * p.y - y * p.x; }\n    db operator*(const Point &p) { return x * p.x + y * p.y; }\n\n    db dis(const Point &p) { return (*this - p).len(); }\n    db alpha() { return atan2(y, x); }\n\n    Point unit() { return *this / len(); }\n\n    Point rotac() { return Point(-y, x); }\n    Point rotcl() { return Point(y, -x); }\n\n    Point rot(Point p, db angle)\n    {\n        Point v = *this - p;\n        db c = cos(angle), s = sin(angle);\n        return Point(p.x + v.x * c - v.y * s, p.y + v.x * s + v.y * c);\n    }\n\n    db len() { return hypot(x, y); }\n    db len2() { return x * x + y * y; }\n\n    db rad(Point a, Point b)\n    {\n        Point ap = a - *this, bp = b - *this;\n        return abs(atan2(abs(ap ^ bp), ap * bp));\n    }\n\n    void read() { cin >> x >> y; }\n    void write() { cout << '(' << x << \", \" << y << \")\\n\"; }\n};\n\n// Line\nstruct Line\n{\n    Point s, e;\n\n    Line(){};\n\n    Line(Point _s, Point _e) : s(_s), e(_e) {}\n\n    Line(Point p, db angle)\n    {\n        s = p;\n        if (sgn(angle - PI / 2))\n            e = (s + Point(1, tan(angle)));\n        else\n            e = (s + Point(0, 1));\n    }\n\n    //ax+by+c=0\n    Line(db a, db b, db c)\n    {\n        if (sgn(a) == 0)\n        {\n            s = Point(0, -c / b);\n            e = Point(1, -c / b);\n        }\n        else if (sgn(b) == 0)\n        {\n            s = Point(-c / a, 0);\n            e = Point(-c / a, 1);\n        }\n        else\n        {\n            s = Point(0, -c / b);\n            e = Point(1, -(c + a) / b);\n        }\n    }\n\n    db len() { return s.dis(e); }\n    db angle()\n    {\n        db ans = atan2(e.y - s.y, e.x - s.x);\n        if (sgn(ans) == -1)\n            ans += PI;\n        if (sgn(ans - PI) == 0)\n            ans -= PI;\n        return ans;\n    }\n\n    // 1 -> On Counter-clockwise\n    // 2 -> On Clockwise\n    // 3 -> On Line Back\n    // 4 -> On Line Front\n    // 5 -> On Segment\n    int relation(Point p)\n    {\n        Point x = p - s, y = e - s;\n        int c = sgn(x ^ y);\n        if (c < 0)\n            return 1;\n        if (c > 0)\n            return 2;\n        if (sgn(x * y) < 0)\n            return 3;\n        if (sgn((s - p) * (b - p)) > 0)\n            return 4;\n        return 5;\n    }\n\n    bool parallel(Line l) { return sgn((e - s) ^ (l.e - l.s)) == 0; }\n\n    // 0 -> Formal Intersection\n    // 1 -> Informal\n    // 2 -> Not Intersect\n    int crossSS(Line l)\n    {\n        int d1 = sgn((e - s) ^ (l.s - s));\n        int d2 = sgn((e - s) ^ (l.e - s));\n        int d3 = sgn((l.e - l.s) ^ (s - l.s));\n        int d4 = sgn((l.e - l.s) ^ (e - l.s));\n        if ((d1 ^ d2) == -2 && (d3 ^ d4) == -2)\n            return 2;\n        return (d1 == 0 && sgn((l.s - s) * (l.s - e)) <= 0) ||\n               (d2 == 0 && sgn((l.e - s) * (l.e - e)) <= 0) ||\n               (d3 == 0 && sgn((s - l.s) * (s - l.e)) <= 0) ||\n               (d4 == 0 && sgn((e - l.s) * (e - l.e)) <= 0);\n    }\n\n    // 0 -> Formal Intersection\n    // 1 -> Informal\n    // 2 -> Not Intersect\n    int crossLS(Line l)\n    {\n        int d1 = sgn((e - s) ^ (l.s - s));\n        int d2 = sgn((e - s) ^ (l.e - s));\n        if ((d1 ^ d2) == -2)\n            return 2;\n        return (d1 == 0 || d2 == 0);\n    }\n\n    // 0 -> Parallel\n    // 1 -> Same\n    // 2 -> Intersect\n    int crossLL(Line l)\n    {\n        if (this->parallel(l))\n            return l.relation(s) == 3;\n        return 2;\n    }\n\n    Point crossP(Line l)\n    {\n        db a1 = (l.e - l.s) ^ (s - l.s);\n        db a2 = (l.e - l.s) ^ (e - l.s);\n        return Point((s.x * a2 - e.x * a1) / (a2 - a1), (s.y * a2 - e.y * a1) / (a2 - a1));\n    }\n\n    db disPL(Point p) { return abs((p - s) ^ (e - s)) / len(); }\n    db disPS(Point p)\n    {\n        if (sgn((p - s) * (e - s)) < 0 || sgn((p - e) * (s - e)) < 0)\n            return min(p.dis(s), p.dis(e));\n        return disPL(p);\n    }\n    db disSS(Line l) { return min(min(disPS(l.s), disPS(l.e)), min(l.disPS(s), l.disPS(e))); }\n\n    Point proj(Point p) { return s + ((e - s) * ((e - s) * (p - s))) / ((e - s).len2()); }\n    Point refl(Point p)\n    {\n        Point q = proj(p);\n        return Point(2 * q.x - p.x, 2 * q.y - p.y);\n    }\n\n    bool operator==(Line l) { return s == l.s && e == l.e; }\n\n    void adjust()\n    {\n        if (e < s)\n            swap(s, e);\n    }\n\n    void read()\n    {\n        s.read();\n        e.read();\n    }\n\n    void write()\n    {\n        cout << \"Line:\\n\";\n        s.write();\n        e.write();\n    }\n};\n\n// Pre-Build Function\ninline void build()\n{\n}\n\n// Actual Solver\ninline void solve()\n{\n    Line l;\n    l.read();\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        Point p;\n        p.read();\n        int re = l.relation(p);\n        if (re == 1)\n            cout << \"COUNTER_CLOCKWISE\\n\";\n        else if (re == 2)\n            cout << \"CLOCKWISE\\n\";\n        else if (re == 3)\n            cout << \"ONLINE_BACK\\n\";\n        else if (re == 4)\n            cout << \"ONLINE_FRONT\\n\";\n        else\n            cout << \"ON_SEGMENT\\n\";\n    }\n}\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n    cout.tie(nullptr);\n\n#ifdef LOCAL\n    clock_t _begin = clock();\n#endif\n\n    build();\n    solve();\n\n#ifdef LOCAL\n    cerr << \"Time elapsed: \" << (double)(clock() - _begin) * 1000 / CLOCKS_PER_SEC << \"ms.\" << endl;\n#endif\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nstruct Point\n{\n    int x,y;\n    Point(){ x = y = 0.0; }\n    Point(int _x, int _y) : x(_x), y(_y){}\n\n    Point operator+ (Point p)\n    {\n        return Point(p.x + x, p.y + y);\n    }\n\n    Point operator- (Point p)\n    {\n        return Point(x - p.x, y - p.y);\n    }\n\n    int operator* (Point p)\n    {\n        return p.x * x + p.y * y;\n    }\n\n    Point operator* (int t)\n    {\n        return Point(x*t, y*t);\n    }\n\n    int operator~ ()\n    {\n        return x * x + y * y;\n    }\n\n    int operator% (Point p)\n    {\n        return x * p.y - y * p.x;\n    }\n\n};\n\nint main()\n{\n    cout.precision(10);\n    cout << fixed;\n    int q;\n    Point p0, p1, p2, vec, vec1;\n    cin >> p0.x >> p0.y >> p1.x >> p1.y;\n    cin >> q;\n    while(q--)\n    {\n        cin >> p2.x >> p2.y;\n        vec = (p2 - p0);\n        vec1 = (p1 - p0);\n        if( vec%vec1 < 0 ) puts(\"COUNTER_CLOCKWISE\");\n        else if( vec%vec1 > 0) puts(\"CLOCKWISE\");\n        else\n        {\n            if(vec * vec1 < 0) puts(\"ONLINE_BACK\");\n            else\n            {\n                if(~vec > ~vec1) puts(\"ONLINE_FRONT\");\n                else puts(\"ON_SEGMENT\");\n            }\n        }\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cmath>\n#include<iostream>\n#include<iomanip>\n#include<algorithm>\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b)) < EPS)\nusing namespace std;\n\nclass Point {\npublic:\n    double x, y;\n\n    Point(double x=0, double y=0): x(x), y(y) {}\n\n    Point operator + (Point p) { return Point(x+p.x, y+p.y); }\n    Point operator - (Point p) { return Point(x - p.x, y - p.y); }\n    Point operator * (double a) { return Point(x*a, y*a); }\n    Point operator / (double a) { return Point(x/ a, y/ a); }\n\n    double abs() { return sqrt(norm()); }\n    double norm() { return x*x, y*y; }\n    bool operator < (const Point &p) const {\n\treturn x != p.x ? x<p.x : y < p.y;\n    }\n    \n    bool operator == (const Point &p) const {\n\treturn fabs(x-p.x) < EPS && fabs(y-p.y) < EPS;\n    }\n};\n\ntypedef Point Vector;\n\nstruct Segment {\n    Point p0, p1;\n};\n\ntypedef Segment Line;\n\ndouble dot(Vector a, Vector b) {\n    return a.x*b.x + a.y*b.y;\n}\n\ndouble norm(Vector a) {\n    return a.x*a.x + a.y*a.y;\n}\n\ndouble abs(Vector a){\n    return sqrt(norm(a));\n}\n\n/*\n  ???????????§??????????????¨??????????????°??????\n  |a*b|=|a||b|sin(theta)\n */\ndouble cross(Vector a, Vector b){ \n    return a.x*b.y - a.y*b.x;\n}\n    \nint main() {\n    int n,i,d;\n    \n    Point p0, p1, p2;\n    cin >> p0.x >> p0.y >> p1.x >> p1.y;\n    cin >> n;\n    for(i=0;i<n;i++){\n\tcin >>  p2.x >> p2.y;\n\t\n\tif (cross(p1-p0, p2-p0) > EPS) cout << \"COUNTER CLOCKWISE\" << endl;\n\telse if (cross(p1-p0, p2-p0) < -EPS) cout << \"CLOCKWISE\" << endl;\n\telse if (dot(p1-p0, p2-p0)/ (abs(p1-p0)*abs(p2-p0)) + 1 < EPS) cout << \"ONLINE_BACK\" << endl;\n\telse if (abs(p2-p0) > abs(p1-p0)) cout << \"ONLINE_FRONT\" << endl;\n\telse cout << \"ON_SEGMENT\" << endl;\n\n    }\n    return 0;\n\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <complex>\nusing namespace std;\n\ntypedef complex<int> point;\n\nint dot(point a,point b){\n\t// return (a*conj(b)).real();\n\treturn a.real()*b.real()+a.imag()*b.imag();\n}\n\nint cross(point a,point b){\n\t// return (a*conj(b)).imag();\n\treturn a.real()*b.imag()-a.imag()*b.real();\n}\n\nint main(void){\n\tint x,y;\n\tint q;\n\tcin>>x>>y;\n\tpoint p0(x,y);\n\tcin>>x>>y;\n\tpoint p1(x,y);\n\tpoint p0p1=p1-p0;\n\tcin>>q;\n\twhile(q--){\n\t\tcin>>x>>y;\n\t\tpoint p2(x,y);\n\t\tpoint p0p2=p2-p0;\n\t\tif(cross(p0p1,p0p2)<0)cout<<\"COUNTER_CLOCKWISE\"<<endl;\n\t\telse if(cross(p0p1,p0p2)>0)cout<<\"CLOCKWISE\"<<endl;\n\t\telse if(dot(p0p1,p0p2)<0)cout<<\"ONLINE_BACK\"<<endl;\n\t\telse if(norm(p0p1)<norm(p0p2))cout<<\"ONLINE_FRONT\"<<endl;\n\t\telse cout<<\"ON_SEGMENT\"<<endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <string>\n#include <vector>\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<stack>\n#include<queue>\n#include<cmath>\n#include<algorithm>\n#include<functional>\n//--\n#include<list>\n#include<deque>\n#include<bitset>\n#include<set>\n#include<map>\n#include<cstdio>\n#include<cstring>\n#include<sstream>\n#include<complex>\n#define X first\n#define Y second\n#define pb push_back\n#define rep(X,Y) for (int (X) = 0;(X) < (Y);++(X))\n#define rrep(X,Y) for (int (X) = Y-1;(X) >=0;--(X))\n#define all(X) (X).begin(),(X).end()\n#define rall(X) (X).rbegin(),(X).rend()\n\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> pii;\ntypedef complex<double> pt;\n\ndouble dot(pt a,pt b){return (conj(a)*b).real();}\ndouble cros(pt a,pt b){return (conj(a)*b).imag();}\npt proj(pt a,pt to){\n  return dot(a,to)/norm(to)*to;\n}\n\npt refle(pt a,pt mirror){\n  return pt(2)*proj(a,mirror)-a;\n}\n\nint pt3(pt a,pt b,pt c){\n  pt p=b-a,q=c-a;\n  double tmp;\n  tmp=cros(p,q);\n  if(tmp>0){\n    return 0;\n  }else if(tmp<0){\n    return 1;\n  }else if(norm(p+q)<max(norm(p),norm(q))){\n    return 2;\n  }else if(norm(q)>norm(p)){\n    return 3;\n  }else if(norm(q)<norm(p)){\n    return 4;\n  }\n  return 5;\n}\nint main(){\n  int i,j,k,n;\n  pt o,p,q;\n // cout<<cros(pt(1,0),pt(0,-1))<<endl;\n  cin>>o.real()>>o.imag()>>p.real()>>p.imag();\n  cin>>n;\n  char str[][100]={\"COUNTER_CLOCKWISE\",\"CLOCKWISE\",\"ONLINE_BACK\"\n    ,\"ONLINE_FRONT\",\"ON_SEGMENT\",\"ON_SEGMENT\"};\n  double a,b;\n  rep(i,n){\n    cin>>a>>b;\n    q=pt(a,b);\n    printf(\"%s\\n\",str[pt3(o,p,q)],a,b);\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define eps (1e-10)\nusing namespace std;\nclass Point\n{\n\tpublic:\n\tdouble x,y;\n\tPoint(double _x=0,double _y=0):x(_x),y(_y){}\n\tPoint operator + (Point p){ return Point(x+p.x,y+p.y);} \n\tPoint operator - (Point p){ return Point(x-p.x,y-p.y);}\n\tPoint operator * (double a){return Point(a*x,a*y);} \n\tPoint operator / (double a){return Point(x/a,y/a);}\n\tdouble norm(){return x*x+y*y;}\n\tdouble ABS(){return sqrt(norm());} //俩点间的距离 \n};\nstruct Segment\n{\n\tPoint p1,p2;\t\n};\n\ndouble dot(Point a,Point b)//求内积 \n{\n\treturn a.x*b.x+a.y*b.y;\n}\n//外积的值为a与b向量构成的平行四边形面积的值 \ndouble cross(Point a,Point b)//求外积 \n{\n\treturn a.x*b.y-a.y*b.x;\n} \n\n\n//判断是否正交 向量内积：a*b=|a||b|*cos(Y) 当cos为0时正交(90,-90垂直) \n//a*b=a.x*b.x+a.y*b.y;\nbool solve1(Point a,Point b)//是否正交 \n{\n\tdouble f=a.x*b.x+a.y*b.y; \n\tif(fabs(f-0.0)<eps) return true;\n\telse return false;\n}\n//判断是否平行  向量外积：|a*b|=|a||b|sin(Y) 当sin为0时平行(180,0平行)\n//|a*b|=|a|*|b|*sin(Y) \nbool solve2(Point a,Point b)//是否平行 \n{\n\tdouble f=a.x*b.y-a.y*b.x;\n\tif(fabs(f-0.0)<eps) return true;\n\telse return false;\n}\n\n/*\n求垂足x：对于给定的三点p1,p2,p从点p向通过p1,p2的直线引一条垂线\nbase=p2-p1;\nhypo=p-p1;\n x=s.p1+base*(hypo*base/|base|^2); hypo*base 可以用向量内积求 \n*/\nPoint solve3(Segment s,Point p)//求投影点 \n{\n\tPoint base=s.p2-s.p1;\n\tdouble r=dot(p-s.p1,base)/base.norm();\n\treturn s.p1+base*r; \n}\n/*\n求投影点x：对于给定的三点p1,p2,p从点p向通过p1,p2的直线为对称轴与点p\n成线对称点为x \n通过求solve3的垂足延长一倍就可以求x \n*/\nPoint solve4(Segment s,Point p)//求映象 \n{\n\treturn p+(solve3(s,p)-p)*2.0;\n}\n\n/*\n点a与点b之间的距离等于向量a-b或b-a的绝对值。 \n*/ \ndouble getdis(Point a,Point b)//求俩点间的距离                    \n{\n\treturn (a-b).ABS();\n} \n\n/*\n设直线p1 p2上的向量为a=p2-p1,p与p1构成的向量b=p-p1\n则点p与直线p1p2的距离d就等于a,b构成的平行四边形的高\n用a与b外积的大小(平行四边形的面积)除以a的大小|a|即可求出高d\nd=|a*b|/|a|=|(p2-p1)*(p-p1)|/|p2-p1|; \n*/\n//注意：这里Segmet s是不规范的应该是 Line s 才对 \ndouble getdis_Li(Segment s,Point p)//点与直线的距离 \n{\n\treturn abs(cross(s.p2-s.p1,p-s.p1)/(s.p2-s.p1).ABS());\n}\n/*\nPoint a=p1-p0;\nPoint b=p2-p0;\n1.外积大小across(a,b)为正时,可确定b在a的逆时针方向\n\tsin(Y)（Y在0-180）所以是正数\n2. 外积大小across(a,b)为负时,可确定b在a的顺时针方向\n3.（1,2）不符合 表示p2在直线p0p1上(注意是直线),cos(Y)大于90或小于-90\n\t度时为负，因此a与b的内积dot(a,b)负时，可确定p2位于线段p0p1后方\n\t即p2->p0->p1\n4.不是3时，有俩种p0->p1-p2或者p0->p2->p1如果b的大小大于a的大小，即为\n\tp0->p1->p2;\n5.不符合4，可以确定p2位于线段p0p1上 \n*/ \nint ccw(Point p0,Point p1,Point p2)//判断三个点相对位置 \n{\n\tPoint a=p1-p0;\n\tPoint b=p2-p0;\n\tif(cross(a,b)>eps) return 1;//p0,p1,p2成逆时针方向 \n\tif(cross(a,b)<-eps) return -1;//p0,p1,p2成顺时针方向 \n\tif(dot(a,b)<-eps) return 2;//p2 p0 p1一次排列在同一直线上 \n\tif(a.norm()<b.norm()) return -2;// p0 p1 p2一次排列在同一直线上 \n\treturn 0;//p2在线段p0p1上 \n\t\n}\nint main()\n{\n\tdouble x1,y1,x2,y2;\n\tscanf(\"%lf %lf %lf %lf\",&x1,&y1,&x2,&y2);\n\tPoint p1(x1,y1),p2(x2,y2);\n\tint T;scanf(\"%d\",&T);\n\twhile(T--){\n\t\tint x,y;\n\t\tscanf(\"%d %d\",&x,&y);\n\t\tPoint p(x,y);\n\t\tif(ccw(p1,p2,p)==1) printf(\"COUNTER_CLOCKWISE\\n\");\n\t\telse if(ccw(p1,p2,p)==-1) printf(\"CLOCKWISE\\n\");\n\t\telse if(ccw(p1,p2,p)==2) printf(\"ONLINE_BACK\\n\");\n\t\telse if(ccw(p1,p2,p)==-2) printf(\"ONLINE_FRONT\\n\");\n\t\telse printf(\"ON_SEGMENT\\n\");\n\t} \n\t\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "//\n// ccw\n//\n// verified:\n//   AOJ Course CGL_1_C Points/Vectors - Counter-Clockwise\n//     http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_C&lang=jp\n\n\n#include <iostream>\n#include <vector>\n#include <cmath>\n#include <iomanip>\nusing namespace std;\n\n\n/* Point */\nusing DD = double;\nconst DD INF = 1LL<<60;      // to be set appropriately\nconst DD EPS = 1e-10;        // to be set appropriately\nconst DD PI = acos(-1.0);\nDD torad(int deg) {return (DD)(deg) * PI / 180;}\nDD todeg(DD ang) {return ang * 180 / PI;}\n\nstruct Point {\n    DD x, y;\n    Point(DD x = 0.0, DD y = 0.0) : x(x), y(y) {}\n    friend ostream& operator << (ostream &s, const Point &p) {return s << '(' << p.x << \", \" << p.y << ')';}\n};\n\ninline Point operator + (const Point &p, const Point &q) {return Point(p.x + q.x, p.y + q.y);}\ninline Point operator - (const Point &p, const Point &q) {return Point(p.x - q.x, p.y - q.y);}\ninline Point operator * (const Point &p, DD a) {return Point(p.x * a, p.y * a);}\ninline Point operator * (DD a, const Point &p) {return Point(a * p.x, a * p.y);}\ninline Point operator * (const Point &p, const Point &q) {return Point(p.x * q.x - p.y * q.y, p.x * q.y + p.y * q.x);}\ninline Point operator / (const Point &p, DD a) {return Point(p.x / a, p.y / a);}\ninline Point conj(const Point &p) {return Point(p.x, -p.y);}\ninline Point rot(const Point &p, DD ang) {return Point(cos(ang) * p.x - sin(ang) * p.y, sin(ang) * p.x + cos(ang) * p.y);}\ninline Point rot90(const Point &p) {return Point(-p.y, p.x);}\ninline DD cross(const Point &p, const Point &q) {return p.x * q.y - p.y * q.x;}\ninline DD dot(const Point &p, const Point &q) {return p.x * q.x + p.y * q.y;}\ninline DD norm(const Point &p) {return dot(p, p);}\ninline DD abs(const Point &p) {return sqrt(dot(p, p));}\ninline DD amp(const Point &p) {DD res = atan2(p.y, p.x); if (res < 0) res += PI*2; return res;}\ninline bool eq(const Point &p, const Point &q) {return abs(p - q) < EPS;}\ninline bool operator < (const Point &p, const Point &q) {return (abs(p.x - q.x) > EPS ? p.x < q.x : p.y < q.y);}\ninline bool operator > (const Point &p, const Point &q) {return (abs(p.x - q.x) > EPS ? p.x > q.x : p.y > q.y);}\ninline Point operator / (const Point &p, const Point &q) {return p * conj(q) / norm(q);}\n\n\n// 粗\n// 1：a-bから見てcは左側(反時計回り)、-1：a-bから見てcは右側(時計回り)、0：一直線上\nint ccw(const Point &a, const Point &b, const Point &c) {\n    if (cross(b-a, c-a) > EPS) return 1;\n    if (cross(b-a, c-a) < -EPS) return -1;\n    return 0;\n}\n\n// 精\n// 1：a-bから見てcは左側(反時計回り)、-1：a-bから見てcは右側(時計回り)\n// 2：c-a-bの順に一直線上、-2：a-b-cの順に一直線上、0：a-c-bの順に一直線上\nint dccw(const Point &a, const Point &b, const Point &c) {\n    if (cross(b-a, c-a) > EPS) return 1;\n    if (cross(b-a, c-a) < -EPS) return -1;\n    if (dot(b-a, c-a) < 0) return 2;\n    if (norm(b-a) < norm(c-a)) return -2;\n    return 0;\n}\n\n// 点と三角形の包含関係(辺上については判定していない)\nbool is_contain(Point p, Point a, Point b, Point c) {\n    int r1 = ccw(p, b, c), r2 = ccw(p, c, a), r3 = ccw(p, a, b);\n    if (r1 == 1 && r2 == 1 && r3 == 1) return true;\n    if (r1 == -1 && r2 == -1 && r3 == -1) return true;\n    return false;\n}\n\n\n\nint main() {\n    Point a, b, c;\n    cin >> a.x >> a.y >> b.x >> b.y;\n    int N; cin >> N;\n    for (int _ = 0; _ < N; ++_) {\n        cin >> c.x >> c.y;\n        int type = dccw(a, b, c);\n        switch (type) {\n            case 1: {cout << \"COUNTER_CLOCKWISE\" << endl; continue; }\n            case -1: {cout << \"CLOCKWISE\" << endl; continue; }\n            case 2: {cout << \"ONLINE_BACK\" << endl; continue; }\n            case -2: {cout << \"ONLINE_FRONT\" << endl; continue; }\n            case 0: {cout << \"ON_SEGMENT\" << endl; continue; }\n        }\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define FOR(i,k,n) for(int i = (k); i < (n); i++)\n#define REP(i,n) FOR(i,0,n)\n#define ALL(a) begin(a),end(a)\n#define MS(m,v) memset(m,v,sizeof(m))\n#define D10  fixed<<setprecision(10)\ntypedef vector<int> vi;\ntypedef vector<string> vs;\ntypedef pair<int, int> P;\ntypedef long long ll;\nconst ll INF = 114514810;\nconst ll MOD = 1000000007;\nconst double EPS = 1e-8;\nconst double PI = acos(-1.0);\nstruct edge\n{\n\tint from, to, cost;\n\tbool operator < (const edge& e) const { return cost < e.cost; }\n\tbool operator >(const edge& e) const { return cost > e.cost; }\n};\nint dx[] = { -1, 0, 0, 1 }; int dy[] = { 0, -1, 1, 0 };\nbool valid(int x, int y, int h, int w) { return (x >= 0 && y >= 0 && x < h&&y < w); }\n///*************************************************************************************///\n///*************************************************************************************///\n///*************************************************************************************///\nbool eq(double a, double b) { return fabs(a - b) < EPS; }\n\nstruct point\n{\n\tdouble x, y;\n\tpoint(double x = 0, double y = 0) :x(x), y(y) {};\n\n\tpoint operator + (point p) { return point(x + p.x, y + p.y); }\n\tpoint operator - (point p) { return point(x - p.x, y - p.y); }\n\tpoint operator * (double s) { return point(x * s, y * s); }\n\tpoint operator / (double s) { return point(x / s, y / s); }\n\n\tdouble norm() { return x*x + y*y; }\n\tdouble abs() { return sqrt(norm()); }\n\n\tbool operator < (const point &p) const\n\t{\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const point &p) const\n\t{\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n\n};\n\ndouble dot(point a, point b)\n{\n\treturn a.x*b.x + a.y*b.y;\n}\n\ndouble cross(point a, point b)\n{\n\treturn a.x*b.y - a.y*b.x;\n}\n\nint ccw(point a, point b, point c)\n{\n\tb = b - a; c = c - a;\n\tif (cross(b, c) > EPS) return 1;//???????¨????????????????a,b,c??¨?????¶\n\tif (cross(b, c) < -EPS) return -1;//???????¨????????????????a,c,b??¨?????¶\n\tif (dot(b, c) < 0) return 2;//??´?????????c,a,b??????????????¶\n\tif (b.norm() < c.norm()) return -2;//??´?????????a,b,c??????????????¶\n\treturn 0;//??´?????????a,c,b??????????????¶\n}\n\n\nint main()\n{\n\tdouble x1, x2, y1, y2;\n\tcin >> x1 >> y1 >> x2 >> y2;\n\tpoint p0(x1, y1);\n\tpoint p1(x2, y2);\n\tint q;\n\tcin >> q;\n\twhile (q--)\n\t{\n\t\tdouble x3, y3;\n\t\tcin >> x3 >> y3;\n\t\tpoint p2(x3, y3);\n\t\tstring ans;\n\t\tswitch (ccw(p0, p1, p2))\n\t\t{\n\t\tcase 1:\n\t\t\tans = \"COUNTER_CLOCKWISE\";\n\t\t\tbreak;\n\t\tcase -1:\n\t\t\tans = \"CLOCKWISE\";\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tans = \"ONLINE_BACK\";\n\t\t\tbreak;\n\t\tcase -2:\n\t\t\tans = \"ONLINE_FRONT\";\n\t\t\tbreak;\n\t\tcase 0:\n\t\t\tans = \"ON_SEGMENT\";\n\t\t\tbreak;\n\t\t}\n\t\tcout << ans << endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <complex>\n#include <vector>\n#include <cstdio>\n#define X real()\n#define Y imag()\n#define EPS (1e-10)\n#define EQ(a, b) (abs((a) - (b)) < EPS) // 二つのスカラーが等しいかどうか\n#define EQV(a, b) (EQ((a).X, (b).X) && EQ((a).Y, (b).Y)) // 二つのベクトルが等しいかどうか\nusing namespace std;\n\ntypedef complex<double> Point; // 点\ntypedef Point Vector; // ベクトル\n\nstruct Segment{ // 線分\n  Point p1, p2;\n  Segment(){};\n  Segment(Point p1, Point p2) : p1(p1), p2(p2) {}; // p1,p2をセット\n};\n\ntypedef Segment Line; // 直線\n\ntypedef vector<Point> Polygon; // 多角形\n\ndouble dotproduct(Vector a, Vector b) // 内積\n{\n  return real((conj(a) * b));\n}\n\ndouble crossproduct(Vector a, Vector b) // 外積\n{\n  return imag(conj(a) * b);\n}\n\ndouble dist(Point p1, Point p2) // 二点間の距離\n{\n  return abs(p1 - p2);\n}\n\nPoint project(Line l, Point p) // 射影\n{\n  double r = dotproduct(p - l.p1, l.p2 - l.p1) / norm(l.p2 - l.p1);\n  return l.p1 + (l.p2 - l.p1) * r;\n}\n\nPoint reflect(Line l, Point p) // 反射\n{\n  return p + (project(l, p) - p) * 2.0;\n}\n\nbool isOrthogonal(Line l1, Line l2)\n{\n  return EQ(dotproduct(l1.p1 - l1.p2, l2.p1 - l2.p2), 0.0);\n}\n\nbool isParallel(Line l1, Line l2)\n{\n  return EQ(crossproduct(l1.p1 - l1.p2, l2.p1 - l2.p2), 0.0);\n}\n\n//-------Counter-Clockwise---------\nconst int COUNTER_CLOCKWISE = +1;\nconst int CLOCKWISE = -1;\nconst int ONLINE_BACK = +2;\nconst int ONLINE_FRONT = -2;\nconst int ON_SEGMENT = 0;\n\nint ccw(Point a, Point b, Point c){\n  Point x = b - a;\n  Point y = c - a;\n  if(crossproduct(x, y) > EPS)\n    return COUNTER_CLOCKWISE;\n  if(crossproduct(x, y) < -EPS)\n    return CLOCKWISE;\n  if(dotproduct(x, y) < -EPS)\n    return ONLINE_BACK;\n  if(norm(x) < norm(y))\n    return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\n\nint main()\n{\n  Point a, b, c;\n  cin >> a.X >> a.Y >> b.X >> b.Y;\n  int n;\n  for(int i = 0; i < n; i++){\n    cin >> c.X >> c.Y;\n    int x = ccw(a, b, c);\n    if(x == COUNTER_CLOCKWISE)\n      cout << \"COUNTER_CLOCKWISE\" << endl;\n    else if(x == CLOCKWISE)\n      cout << \"CLOCKWISE\" << endl;\n    else if(x == ONLINE_BACK)\n      cout << \"ONLINE_BACK\" << endl;\n    else if(x == ONLINE_FRONT)\n      cout << \"ONLINE_FRONT\" << endl;\n    else\n      cout << \"ON_SEGMENT\" << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define ll  long long\n//#define int long long\n#define inf 0x3f3f3f3f\n#define fi first\n#define se second\n#define pb push_back\n#define pa pair<int,int>\n#define mkp(a,b) make_pair(a,b)\nconst int N=2e5+10;\nconst int mod=998244353;\nusing namespace std;\n\nint cross(int x1,int y1,int x2,int y2){return x1*y2-x2*y1;}\nint dot(int x1,int y1,int x2,int y2){return x1*x2+y1*y2;}\nint32_t main()\n{\n   //ios::sync_with_stdio(0); cin.tie(0);cout.tie(0);\n   int x1,y1,x2,y2; scanf(\"%d%d%d%d\",&x1,&y1,&x2,&y2);\n   int q; scanf(\"%d\",&q);\n   while(q--)\n   {\n   \t  int x,y; scanf(\"%d%d\",&x,&y);\n   \t  int p=cross(x-x1,y-y1,x2-x1,y2-y1);\n   \t  if(p<0) puts(\"COUNTER_CLOCKWISE\");\n   \t  else if(p>0) puts(\"CLOCKWISE\");\n   \t  else\n   \t  {\n   \t  \t if(dot(x1-x,y1-y,x2-x,y2-y)<=0) {puts(\"ON_SEGMENT\"); continue;}\n   \t  \t if(x==x1&&x1==x2) \n   \t  \t {\n   \t  \t \tif((y1-y)*(y1-y2)<=0)puts(\"ONLINE_BACK\");\n   \t  \t \telse puts(\"ONLINE_FRONT\");\n   \t  \t \tcontinue;\n   \t  \t }\n   \t  \t if((x<=x1&&x1<=x2)||(x1>=x2&&x>=x1)) puts(\"ONLINE_BACK\");\n   \t  \t else if((x1<=x2&&x>=x2)||(x1>=x2&&x2>=x)) puts(\"ONLINE_FRONT\");\n   \t  }\n   }\nreturn 0;\n}\n/*\n\n*/\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\n#include <cmath>\n#include <iomanip>\n\n\nusing namespace std;\n\n//-------------------------------------------------------------------------------------\n/*2点[(x1,y1),(x2,y2)]を入力し二点を通る直線ax+by+cの(a,b,c)を返す,  */\n/*x1==x2ならfalseを返す*/\n/*falseならばx=cの形の直線*/\nvoid straight_line_passing_through_the_two_points(double x1, double y1, double x2, double y2, double *a, double *b, double *c){\n    *a=(y2-y1);\n    *b=-(x2-x1);\n    *c=y2*(x2-x1)-x2*(y2-y1);\n}\n\n//-------------------------------------------------------------------------------------\n/*(x,y)を通るa1x+b1y+c1=0に垂直な直線a2x+b2y+c2=0を返す*/\nvoid vertical_straight_line(double x, double y, double a1, double b1, double c1, double *a2, double *b2, double *c2){\n    *a2 = -b1;\n    *b2 = a1;\n    *c2 = b1*x - a1*y;\n}\n\n\n//-------------------------------------------------------------------------------------\n/*2直線 a1x+b1y+c1=0 a2x+b2y+c2=0 の交点 (x,y)を返す*/\n/*2直線が平行であるならばfalseを返す*/\n\nbool intersection_and_parallel(double a1, double b1, double c1, double a2, double b2, double c2, double *x, double *y){\n    if(a1*b2==a2*b1)return false;//平行の判定\n    \n    *x = (b1*c2-b2*c1)/(a1*b2-a2*b1);\n    *y = (a2*c1-a1*c2)/(a1*b2-a2*b1);\n    \n    return true;\n}\n\n\n//-------------------------------------------------------------------------------------\n/*直線ax+by+c=0に対し　(x1,y1)と線対称な位置(x2,y2)を出力*/\n/*vertical_straight_lineを使用*/\n/*intersection_and_parallelを使用*/\nvoid line_symmetry(double a, double b, double c, double x1, double y1, double *x2, double *y2){\n    //垂直な直線を求める\n    double a2,b2,c2;\n    vertical_straight_line(x1, y1, a, b, c, &a2, &b2, &c2);\n    \n    //垂直な直線との交点を求める\n    double c_x, c_y;\n    intersection_and_parallel(a, b, c, a2, b2, c2, &c_x, &c_y);\n    *x2 = x1 + 2*(c_x-x1);\n    *y2 = y1 + 2*(c_y-y1);\n}\n\n\n\n//-------------------------------------------------------------------------------------\n/*2点(x1,y1), (x2,y2) の距離*/\ndouble distance_between_the_two_pointss(double x1,double y1, double x2, double y2){\n    return  sqrt(fabs((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)));\n}\n\n\n//-------------------------------------------------------------------------------------\n/* (x1,y1)から(x2,y2)へ伸ばした直線の角度を求める  */\ndouble angle_of_the_line(double x1, double y1, double x2, double y2){\n    return atan2(y2-y1, x2-x1);\n}\n\n\n\nint main(int argc, const char * argv[]){\n    double x0,y0,x1,y1,x2,y2;\n    cin>>x0>>y0>>x1>>y1;\n    \n    double angle1 = angle_of_the_line(x0,y0,x1,y1);\n    \n    int q;\n    cin>>q;\n    for(int i=0; i<q; i++){\n        cin>>x2>>y2;\n        double angle2 = angle_of_the_line(x0,y0,x2,y2);\n        \n        double angle = angle2-angle1;\n        if(angle<0)angle+=2*M_PI;\n        if(angle==0||angle==2*M_PI){\n            double l1=distance_between_the_two_pointss(x0, y0, x1, y1);\n            double l2=distance_between_the_two_pointss(x0, y0, x2, y2);\n            if(l1>=l2)cout<<\"ON_SEGMENT\"<<endl;\n            else cout<<\"ONLINE_FRONT\"<<endl;\n        }else if(angle == M_PI)cout<<\"ONLINE_BACK\"<<endl;\n        else if(angle<M_PI)cout<<\"COUNTER_CLOCKWISE\"<<endl;\n        else cout<<\"CLOCKWISE\"<<endl;\n        \n        \n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n\nusing namespace std;\n\nconst double EPS = 1e-8, PI = acos(-1);\n\ninline bool eq(double a, double b) { return fabs(b - a) < EPS; }\n\nusing Point = complex< double >;\n\nistream &operator>>(istream &is, Point &p) {\n  double a, b;\n  is >> a >> b;\n  p = Point(a, b);\n  return is;\n}\n\n\ndouble cross(const Point &a, const Point &b) {\n  return real(a) * imag(b) - imag(a) * real(b);\n}\n\ndouble dot(const Point &a, const Point &b) {\n  return real(a) * real(b) + imag(a) * imag(b);\n}\n\nint ccw(const Point &a, Point b, Point c) {\n  b = b - a, c = c - a;\n  if(cross(b, c) > EPS) return +1;  // \"COUNTER_CLOCKWISE\"\n  if(cross(b, c) < -EPS) return -1; // \"CLOCKWISE\"\n  if(dot(b, c) < 0) return +2;      // \"ONLINE_BACK\"\n  if(norm(b) < norm(c)) return -2;  // \"ONLINE_FRONT\"\n  return 0;                         // \"ON_SEGMENT\"\n}\n\n\nint main() {\n  Point p1, p2;\n  cin >> p1 >> p2;\n  int Q;\n  cin >> Q;\n  while(Q--) {\n    Point p3;\n    cin >> p3;\n    auto t = ccw(p1, p2, p3);\n    if(t == 1) puts(\"COUNTER_CLOCKWISE\");\n    else if(t == -1) puts(\"CLOCKWISE\");\n    else if(t == 2) puts(\"ONLINE_BACK\");\n    else if(t == -2) puts(\"ONLINE_FRONT\");\n    else puts(\"ON_SEGMENT\");\n  }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cassert>\n#include <cstring>\n#include <cmath>\n#include <functional>\n#include <algorithm>\n#include <utility>\n#include <vector>\n#include <string>\n#include <map>\n#include <set>\n#ifdef XLor\n  #define dbg(args...) cout << \"\\033[32;1m\" << #args << \" -> \", err(args)\n  void err() { std::cout << \"\\033[39;0m\" << std::endl; }\n  template<typename T, typename...Args>\n  void err(T a, Args...args) { std::cout << a << ' '; err(args...); }\n#else\n  #define dbg(...)\n#endif\n#define ms(a,b) memset(a,b,sizeof(a))\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> PII;\nconst int mod = 998244353;\nconst int inf = 1 << 30;\nconst int maxn = 100000 + 5;\n\nconst double eps = 1e-5;\nconst double pi = acos(-1.0);\n\ninline int sign(double x) {\n  // double大小比较，考虑精度 eps\n  if (fabs(x) < eps) return 0;\n  else return x < 0 ? -1 : 1;\n}\ninline int dcmp(double x, double y) {\n  return sign(x - y);\n}\ninline int zero(double x) {\n  return fabs(x) < eps;\n}\n\n// x 在 [l, r] 内或 [r, l] 内\ninline int inMid(double l, double r, double x) {\n  return dcmp(l, x) * dcmp(r, x) <= 0;\n}\n\nstruct Point {\n  double x, y;\n  Point(double x = 0, double y = 0): x(x), y(y) {}\n\n  void read() { scanf(\"%lf%lf\", &x, &y); }\n\n  Point operator + (const Point& b) const { return Point(x + b.x, y + b.y); }\n  Point operator - (const Point& b) const { return Point(x - b.x, y - b.y); }\n  Point operator * (double p) { return Point(x * p, y * p); }\n  Point operator / (double p) { return Point(x / p, y / p); }\n\n  double abs() { return sqrt(x * x + y * y); }\n  double abs2() { return x * x + y * y; }\n  double distance(const Point& b) { return (*this - b).abs(); }\n\n  // 逆时针旋转\n  Point rot90(){ return Point(-y, x); }\n  Point rot(double r) {\n    return Point(x * cos(r) - y * sin(r), x * sin(r) + y * cos(r));\n  }\n\n  Point unit() { return *this / abs(); }\n};\n\nostream& operator<<(ostream& out, const Point& u) {\n  return out << \"(\" << u.x << \", \" << u.y << \")\";\n}\n\nbool operator < (const Point& a, const Point& b) {\n  return a.x < b.x || (a.x == b.x && a.y < b.y);\n}\n\nbool operator == (const Point& a, const Point& b) {\n  return dcmp(a.x, b.x) == 0 && dcmp(a.y, b.y) == 0;\n}\n\ndouble dot(Point a, Point b) { return a.x * b.x + a.y * b.y; }\ndouble angle(Point a, Point b) { return acos(dot(a, b) / a.abs() / b.abs()); }\ndouble cross(Point a, Point b) { return a.x * b.y - a.y * b.x; }\n\n// C 在 B 的逆时针 1, 顺时针 -1, 共线 0\nint clockwise(Point a, Point b, Point c) {\n  return sign(cross(b - a, c - a));\n}\n\ndouble xmult(Point a, Point b, Point c) {\n  return cross(b - a, c - a);\n}\n\ndouble area2(Point a, Point b, Point c) { return cross(b - a, c - a); }\n\nPoint normal(Point a) { // 计算单位法线，确保a不是零向量\n  double l = a.abs(); return Point(-a.y / l, a.x / l);\n}\n\n// a -> b\nstruct Line {\n  Point p[2];\n  Line() {}\n  Line(Point a, Point b) { p[0] = a; p[1] = b; }\n  void read() { p[0].read(); p[1].read(); }\n  Point& operator [](int i) { return p[i]; }\n\n  // q 在直线上的投影点\n  Point projection(const Point& q) {\n    Point k = p[1] - p[0];\n    return p[0] + k * (dot(q - p[0], k) / k.abs2());\n  }\n  // q 在直线上的对称点\n  Point reflection(const Point& q) {\n    return projection(q) * 2 - q;\n  }\n};\n\n// q 在线段 l 上\nbool onSegment(Line l, const Point& q) {\n  return sign(cross(q - l[0], l[1] - l[0])) == 0 && \n    inMid(l[0].x, l[1].x, q.x) && inMid(l[0].y, l[1].y, q.y);\n}\n// q 在线段 AB 上\nbool onSegment(Point a, Point b, Point q) {\n  return onSegment(Line(a, b), q);\n}\n\nint main() {\n  Line l; l.read();\n  int q; scanf(\"%d\", &q);\n  while (q--) {\n    Point q; q.read();\n    int ord = clockwise(l[0], l[1], q);\n    if (ord == 1) {\n      puts(\"COUNTER_CLOCKWISE\");\n    } else if (ord == -1) {\n      puts(\"CLOCKWISE\");\n    } else {\n      if (onSegment(l, q)) {\n        puts(\"ON_SEGMENT\");\n      } else if (onSegment(l[0], q, l[1])) {\n        puts(\"ONLINE_FRONT\");\n      } else {\n        puts(\"ONLINE_BACK\");\n      }\n    }\n  }\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#define loop(i, s, e) for(ll i = s;i < e;i++)\n\n#include <iostream>\n#include <iomanip>\n#include <set>\n#include <vector>\n#include <queue>\n#include <stack>\n#include <utility>\n#include <algorithm>\n#include <map>\n#include <cmath>\n\nusing namespace std;\n\ntypedef long long signed ll;\n\n#define NAN_M 0x800000000000\n\ntemplate<typename T>\nclass Vector2D {\npublic:\n    T x;\n    T y;\n\n    Vector2D() {\n        x = y = 0;\n    }\n\n    Vector2D(T x_, T y_) {\n        x = x_;\n        y = y_;\n    }\n\n    T operator*(const Vector2D<T> *e) {\n        return this->x * e->x + this->y * e->y;\n    }\n\n    Vector2D<T> operator-(const Vector2D<T> *e) {\n        return Vector2D<T>(this->x - e->x, this->y - e->y);\n    }\n\n    Vector2D<T> operator+(const Vector2D<T> *e) {\n        return Vector2D<T>(this->x + e->x, this->y + e->y);\n    }\n\n    T operator*(const Vector2D<T> e) {\n        return this->x * e.x + this->y * e.y;\n    }\n\n    Vector2D<T> operator-(const Vector2D<T> e) {\n        return Vector2D<T>(this->x - e.x, this->y - e.y);\n    }\n\n    Vector2D<T> operator+(const Vector2D<T> e) {\n        return Vector2D<T>(this->x + e.x, this->y + e.y);\n    }\n\n    Vector2D<T> operator*(const T r) {\n        return Vector2D<T>(this->x * r, this->y * r);\n    }\n\n    Vector2D<T> operator/(const T r) {\n        return Vector2D<T>(this->x / r, this->y / r);\n    }\n\n    double abs() {\n        return sqrt(x * x + y * y);\n    }\n\n    T abs2() {\n        return x * x + y * y;\n    }\n\n    T cross(Vector2D<T> e) {\n        if(x * e.y >= y * e.x) return (x * e.y) - (y * e.x);\n        else return (y * e.x) - (x * e.y);\n    }\n\n    double cos(Vector2D<T> e) {\n        if((e.abs() * abs()) == 0) return NAN_M;\n        return (e * (*this)) / (e.abs() * abs());\n    }\n\n    double sin(Vector2D<T> e) {\n        if((e.abs() * abs()) == 0) return NAN_M;\n        return ((x * e.y) - (y * e.x)) / (e.abs() * abs());\n    }\n};\n\ntypedef Vector2D<double> vdd;\n\ndouble dist__(double x0, double y0, double x1, double y1, double xx, double yy) {\n    int b = 0;\n    vdd p[3] = {vdd(x0, y0), vdd(x1, y1), vdd(xx, yy)};\n    if (((p[0] - p[1]) * (p[2] - p[1])) < 0) b = -1;\n    if (((p[1] - p[0]) * (p[2] - p[0])) < 0) b = 1;\n    if (b == 1) return (p[2] - p[0]).abs();\n    if (b == -1) return (p[2] - p[1]).abs();\n    return (p[1] - p[0]).cross(p[2] - p[0]) / (p[1] - p[0]).abs();\n}\n\ndouble dist(double x0, double y0, double x1, double y1, double xx, double yy){\n    double res = dist__(x0,y0,x1,y1,xx,yy);\n    return res;\n}\nint main() {\n    int q;\n    vdd base,p;\n    cin >> base.x >> base.y >> p.x >> p.y;\n    cin >> q;\n    loop(i, 0, q) {\n        vdd z;\n        cin >> z.x >> z.y;\n        double cos = (p-base).cos(z-base);\n        double sin = (p-base).sin(z-base);\n        double cosr = (base-p).cos(z-p);\n        if(cos == NAN_M || cosr == NAN_M) cout << \"ON_SEGMENT\" << endl;\n        else if(abs(cos - 1) < 0.000001 && abs(cosr - 1) < 0.000001) cout << \"ON_SEGMENT\" << endl;\n        else if(abs(cos - 1) < 0.000001) cout << \"ONLINE_FRONT\" << endl;\n        else if(abs(cos + 1) < 0.000001) cout << \"ONLINE_BACK\" << endl;\n        else if(sin < 0) cout << \"CLOCKWISE\" << endl;\n        else if(sin > 0) cout << \"COUNTER_CLOCKWISE\" << endl;\n        else cout << \"ON_SEGMENT\" << endl;\n    }\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include  <bits/stdc++.h>\n#define rep(i,n) for(int (i)=0;(i)<(n);(i)++)\nusing namespace std;\n\n\n// ??\\??? ????????¨???\n\ntypedef bool B;\ntypedef long double D;\ntypedef complex<D> P;\ntypedef vector<P> VP;\ntypedef struct {P s,t;} L;\ntypedef vector<L> VL;\ntypedef struct {P c;D r;} C;\ntypedef vector <C> VC;\n\nconst D eps=1.0e-10;\nconst D pi=acos(-1.0);\ntemplate<class T> bool operator==(T a, T b){return abs(a-b)< eps;}\ntemplate<class T> bool operator< (T a, T b){return a < b-eps;}\ntemplate<class T> bool operator<=(T a, T b){return a < b+eps;}\ntemplate<class T> int sig(T r) {return (r==0||r==-0) ? 0 : r > 0 ? 1 : -1;}\n#define X real()\n#define Y imag()\n\nD ip(P a, P b) {return a.X * b.X + a.Y * b.Y;}\nD ep(P a, P b) {return a.X * b.Y - a.Y * b.X;}\nD sq(D a) {return sqrt(max(a, (D)0));}\nP vec(L l){return l.t-l.s;}\n\n\n// verify AOJ 2514\nP proj(P b,P p){ return b*ip(b,p)/norm(b);}\nP proj(L l,P p){ return l.s+proj(vec(l),p-l.s);}\nP refl(L l,P p){ return proj(l,p)*D(2.0)-p; }\n\n// ccw\nenum CCW{\n\tLEFT = 1,\n\tRIGHT = 2,\n\tBACK = 4,\n\tFRONT = 8,\n\tMID = 16,\n\tON=FRONT|BACK|MID\n};\n\ninline int ccw(P base, P a, P b) {              //???a??¨???b???????????????????????????\n\ta -= base; b -= base;\n\tif (ep(a, b) > 0)\n\t\treturn LEFT;    // counter clockwise\n\tif (ep(a, b) < 0)\n\t\treturn RIGHT;   // clockwise\n\tif (ip(a, b) < 0)\n\t\treturn BACK;    // b--base--a on line\n\tif (norm(a) < norm(b))\n\t\treturn FRONT;   // base--a--b on line\n\t// otherwise\n\treturn MID;      // base--b--a on line  a??¨b????????????????????????\n}\n\nint main(void){\n\tP base,point1;\n\t{\n\t\tD x[2],y[2];\n\t\trep(i,2)cin >> x[i] >> y[i];\n\t\tbase={x[0],y[0]},point1={x[1],y[1]};\n\t}\n\tint q;\n\tcin >> q;\n\tcout.precision(10);\n\trep(loop,q){\n\t\tD x,y;\n\t\tcin >> x >> y;\n\t\tP point2={x,y};\n\t\tint ans=ccw(base,point1,point2);\n\t\tswitch(ans){\n\t\t\tcase LEFT:\n\t\t\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t\t\t\tbreak;\n\t\t\tcase RIGHT:\n\t\t\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\t\t\t\tbreak;\n\t\t\tcase BACK:\n\t\t\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t\t\t\tbreak;\n\t\t\tcase FRONT:\n\t\t\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t\t\t\tbreak;\n\t\t\tcase MID:\n\t\t\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define rep(i,n) for(int i = 0, lim##__LINE__ = n; i < lim##__LINE__; ++i)\nusing C = std::complex<double>;\nconst double EPS = 1e-10;\n\n// CGL_1_A\nC projection(C p, C p1, C p2) {\n    return C(((p-p1) / (p2-p1)).real(), 0.0) * (p2-p1) + p1;\n}\n\nvoid solve_CGL_1_A() {\n    int x1, y1, x2, y2;\n    std::cin >> x1 >> y1 >> x2 >> y2;\n    C p1(x1,y1), p2(x2,y2);\n    int q;\n    std::cin >> q;\n    rep(i,q) {\n        int x, y;\n        std::cin >> x >> y;\n        C p = C(x,y);\n        C res = projection(p, p1, p2);\n        printf(\"%.20lf %.20lf\\n\", res.real(), res.imag());\n    }\n}\n\n// CGL_1_B\nC reflection(C p, C p1, C p2) {\n    return std::conj(((p-p1) / (p2-p1))) * (p2-p1) + p1;\n}\n\nvoid solve_CGL_1_B() {\n    int x1, y1, x2, y2;\n    std::cin >> x1 >> y1 >> x2 >> y2;\n    C p1(x1,y1), p2(x2,y2);\n    int q;\n    std::cin >> q;\n    rep(i,q) {\n        int x, y;\n        std::cin >> x >> y;\n        C p = C(x,y);\n        C res = reflection(p, p1, p2);\n        printf(\"%.20lf %.20lf\\n\", res.real(), res.imag());\n    }\n}\n\n// CGL_1_C\n// p0->p1 and p0->p2, query is p2\nint counter_clockwise(C p0, C p1, C p2) {\n    C a = std::conj(p1-p0) * (p2-p0);\n    if (a.imag() >  EPS) { return +1; } // counter clockwise\n    if (a.imag() < -EPS) { return -1; } // clockwise\n    if (a.real() < -EPS) { return +2; } // p2-p0-p1\n    if (std::norm(p1-p0) < std::norm(p2-p0)) { return -2; } // p0-p1-p2\n    return 0; // p0-p2-p1\n}\n\nvoid solve_CGL_1_C() {\n    int x1, y1, x2, y2;\n    std::cin >> x1 >> y1 >> x2 >> y2;\n    C p0(x1,y1), p1(x2,y2);\n    int q;\n    std::cin >> q;\n    rep(i,q) {\n        int x, y;\n        std::cin >> x >> y;\n        C p2 = C(x,y);\n        int res = counter_clockwise(p0, p1, p2);\n        if (res == 1) {\n            printf(\"COUNTER_CLOCKWISE\\n\");\n        }\n        if (res == -1) {\n            printf(\"CLOCKWISE\\n\");\n        }\n        if (res == 2) {\n            printf(\"ONLINE_BACK\\n\");\n        }\n        if (res == -2) {\n            printf(\"ONLINE_FRONT\\n\");\n        }\n        if (res == 0) {\n            printf(\"ON_SEGMENT\\n\");\n        }\n    }\n}\n\nint main() {\n    solve_CGL_1_C();\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\nconst double EPS = 1e-8;\nconst double INF = 1e12;\ntypedef complex<double> point;\nnamespace std{\n    bool operator < (const point& a, const point& b) {\n        return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n    }\n}\ndouble cross(const point& a, const point& b) {\n    return imag(conj(a)*b);\n}\ndouble dot(const point& a, const point& b) {\n    return real(conj(a)*b);\n}\n\n// 直線はvector<point>の型を継承\nstruct line : public vector<point> {\n    line(const point &a, const point &b){\n        push_back(a); push_back(b);\n    }\n};\n\ndouble line_cross(const line &a, const line &b) {\n    return cross(a[1] - a[0], b[1] - b[0]);\n}\n\ndouble line_dot(const line &a, const line &b) {\n    return dot(a[1] - a[0], b[1] - b[0]);\n}\n\nint main()\n{\n    double x0, y0, x1, y1;\n    cin >> x0 >> y0 >> x1 >> y1;\n    line P1(point(x0,y0), point(x1,y1));\n    int q;\n    cin >> q;\n    for(int i = 0; i < q; ++i) {\n        double x2, y2;\n        cin >> x2 >> y2;\n        line P2(P1[0], point(x2,y2));\n        double tmp = line_cross(P1,P2);\n        if(tmp>0.0) {\n            cout << \"COUNTER_CLOCKWISE\" << endl;\n        }\n        else if(tmp < 0.0) {\n            cout << \"CLOCKWISE\" << endl;\n        }\n        else {\n            tmp = line_dot(P1,P2);\n            double p1 = line_dot(P1,P1);\n            double p2 = line_dot(P2,P2);\n            if(tmp < 0.0) { cout << \"ONLINE_BACK\" << endl; continue; }\n            if(p1 < p2) { cout << \"ONLINE_FRONT\" << endl; continue; }\n            cout << \"ON_SEGMENT\" << endl;\n        }\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n#define ll long long\n#define x real()\n#define y imag()\ntypedef complex<double> point;\n\n\nstring Farhad(point a, point b, point c)\n{\n   point k=conj(b-a)*(c-a);\n   if(k.y>0) return \"COUNTER_CLOCKWISE\";\n   if(k.y<0) return \"CLOCKWISE\";\n   if(k.x<0)return \"ONLINE_BACK\";\n   if(abs(b-a)<abs(c-a) )return \"ONLINE_FRONT\";\n   return \"ON_SEGMENT\";\n}\n\nint main()\n{\n    ll m,n;\n    double  ax, ay, bx,by, cx,cy;\n    cin>>ax>>ay>>bx>>by>>n;\n    while(n--)\n    {\n        cin>>cx>>cy;\n        cout<<Farhad(point(ax, ay), point(bx,by), point(cx, cy) )<<endl;\n    }\n\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\nconst double eps = 1e-8;\nconst double pi = acos(-1.0);\ntypedef long long ll;\nint sgn(double x){\n    if(fabs(x)<eps){\n        return 0;\n    }\n    if(x<0){\n        return -1;\n    }else{\n        return 1;\n    }\n}\nstruct Point{\n    double x,y;\n    Point(){}\n    Point(double _x,double _y){\n        x = _x;\n        y = _y;\n    }\n    void input(){\n        scanf(\"%lf%lf\",&x,&y);\n    }\n    Point operator+(const Point &b)const{\n        return Point(x+b.x,y+b.y);\n    }\n    Point operator -(const Point &b)const{\n        return Point(x-b.x,y-b.y);\n    }\n    double operator *(const Point &b)const{\n        return x*b.x+y*b.y;\n    }\n    Point operator *(const double &k)const{\n        return Point(x*k,y*k);\n    }\n    double operator ^(const Point &b)const{\n        return x*b.y-y*b.x;\n    }\n    Point operator /(const double &k)const{\n        return Point(x/k,y/k);\n    }\n    bool operator <(const Point &b)const{\n        return sgn(x-b.x)==0?sgn(y-b.y)<0:x<b.x;\n    }\n    double len2(){\n        return x*x+y*y;\n    }\n};\nstruct Line{\n    Point s,e;\n    Line(){}\n    Line(Point _s,Point _e){\n        s = _s;\n        e = _e;\n    }\n    int relation(Point p){\n        int c = sgn((p-s)^(e-s));\n        if(c < 0){\n            return 1;\n        }else if(c>0){\n            return 2;\n        }else{\n            return 3;\n        }\n    }\n    int pointonseg(Point p){\n        int c = sgn((p-s)^(p-e));\n        if(c<0){\n            return 4;\n        }else{\n            if((p.x-s.x)*(s.x-e.x)>0.0||(p.x==s.x&&(p.y-s.y)*(s.y-e.y)>0.0)){\n                return 6;\n            }else if((p.x-e.x)*(e.x-s.x)>0.0||(p.x==e.x&&(p.y-e.y)*(e.y-s.y)>0.0)){\n                return 7;\n            }else{\n                return 4;\n            }\n        }\n    }\n};\n\nint main(){\n    Point p1,p2,p3;\n    p1.input();\n    p2.input();\n    Line line(p1,p2);\n    int q;\n    scanf(\"%d\",&q);\n    Point ans;\n    while(q--){\n        p3.input();\n        int ans = line.relation(p3);\n        if(ans == 1){\n            printf(\"COUNTER_CLOCKWISE\\n\");\n        }else if(ans == 2){\n            printf(\"CLOCKWISE\\n\");\n        }else{\n            int tmp = line.pointonseg(p3);\n            if(tmp == 4){\n                printf(\"ON_SEGMENT\\n\");\n            }else if(tmp == 6){\n                printf(\"ONLINE_BACK\\n\");\n            }else if(tmp == 7){\n                printf(\"ONLINE_FRONT\\n\");\n            }\n        }\n    }\n     return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n#define F first\n#define S second\n#define pii pair<int, int>\n#define eb emplace_back\n#define all(v) v.begin(), v.end()\n#define rep(i, n) for (int i = 0; i < (n); ++i)\n#define rep3(i, l, n) for (int i = l; i < (n); ++i)\n#define chmax(a, b) a = (a >= b ? a : b)\n#define chmin(a, b) a = (a <= b ? a : b)\n#define out(a) cout << a << endl\n#define outa(a, n) { rep(_, n) cout << a[_] << \" \"; cout << endl; }\n#define outp(a, n) { cout << endl; rep(_, n) cout << a[_].F << \" \" << a[_].S << endl; }\n#define sz(v) (int)v.size()\n#define inf (int)(1e9+7)\n#define abs(x) (x >= 0 ? x : -(x))\n#define ceil(a, b) a / b + !!(a % b)\n#define FIX(a) fixed << setprecision(a)\n#define LB(v, n) (int)(lower_bound(all(v), n) - v.begin())\n#define UB(v, n) (int)(upper_bound(all(v), n) - v.begin())\nll pow(ll a, int b) { return b ? pow(a * a, b / 2) * (b % 2 ? a : 1) : 1; }\ntemplate<typename T> T gcd(T a, T b) { if (b == 0) return a; return gcd(b, a % b); }\n\n\n\n\nusing P = complex<double>;\ndouble dot(P a, P b) { return real(conj(a) * b); }\ndouble cross(P a, P b) { return imag(conj(a) * b); }\nconst double eps = 1e-8;\n\nint ccw(P p0, P p1, P p2) {\n    P a = p1 - p0;\n    P b = p2 - p0;\n    \n    if (cross(a, b) > 0) return 1; // counter clockwise\n    if (cross(a, b) < 0) return -1;\n    // 以下外積が0, 平行\n    if (dot(a, b) < 0) return 2; // p2, p0, p1\n    if (norm(a) < norm(b)) return -2; // p0, p1, p2\n    return 0;\n}\n\nint main() {\n    double p0x, p0y, p1x, p1y;\n    cin >> p0x >> p0y >> p1x >> p1y;\n    P p0 = P(p0x, p0y), p1 = P(p1x, p1y);\n    \n    int query;\n    cin >> query;\n    while (query--) {\n        \n        double p2x, p2y;\n        cin >> p2x >> p2y;\n        P p2 = P(p2x, p2y);\n        \n        switch(ccw(p0, p1, p2)) {\n            case 1:\n                cout << \"COUNTER_CLOCKWISE\" << endl;\n                break;\n            case -1:\n                cout << \"CLOCKWISE\" << endl;\n                break;\n            case 2:\n                cout << \"ONLINE_BACK\" << endl;\n                break;\n            case -2:\n                cout << \"ONLINE_FRONT\" << endl;\n                break;\n            default:\n                cout << \"ON_SEGMENT\" << endl;\n                break;\n        }\n        \n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n//#define int long long\n\nusing namespace std;\nusing LL = long long;\nusing P = pair<int, int>;\nusing Tapris = tuple<int, int, int>;\n\n#define FOR(i, a, n) for(int i = (int)(a); i < (int)(n); ++i)\n#define REP(i, n) FOR(i, 0, n)\n\n#define pb(a) push_back(a)\n#define all(x) (x).begin(),(x).end()\n\nconst int INF = (int)1e9;\nconst LL INFL = (LL)1e15;\nconst int MOD = 1e9 + 7;\n\nint dy[]={0, 0, 1, -1, 0};\nint dx[]={1, -1, 0, 0, 0};\n\ntypedef long double LD;\ntypedef complex<LD> Point;\ntypedef pair<Point, Point> Line;\nconst LD EPS = 1e-10;\n#define X real() // x座標を取得\n#define Y imag() // y座標を取得\n#define LE(n,m) ((n) < (m) + EPS)\n#define GE(n,m) ((n) + EPS > (m))\n#define EQ(n,m) (abs((n)-(m)) < EPS)\n\n// 内積 dot(a, b) = |a||b|cosθ\nLD dot(Point a, Point b){\n    return (conj(a)*b).X;\n}\n\n// 外積 cross(a, b) = |a||b|sinθ\nLD cross(Point a, Point b){\n    return (conj(a)*b).Y;\n}\n\nint ccw(Point a, Point b, Point c){\n    b -= a; c -= a;\n    if (cross(b, c) > 0)   return +1;       // counter clockwise\n    if (cross(b, c) < 0)   return -1;       // clockwise\n    if (dot(b, c) < 0)     return +2;       // c--a--b on line\n    if (norm(b) < norm(c)) return -2;       // a--b--c on line\n    return 0;\n}\n\n// 交差判定 (isec) ****************************\n// 点　 := 平面座標にある点\n// 直線 := 点と点を通るどこまでも続く線\n// 線分 := 点と点を結んでその両端で止まっている線\n\n// 直線と点\nbool isecLP(Point a1, Point a2, Point b){\n    return abs(ccw(a1, a2, b)) != 1;\n}\n\n// 直線と直線\nbool isecLL(Point a1, Point a2, Point b1, Point b2) {\n    return !isecLP(a2-a1, b2-b1, 0) || isecLP(a1, b1, b2);\n}\n\n// 直線と線分\nbool isecLS(Point a1, Point a2, Point b1, Point b2) {\n    return cross(a2-a1, b1-a1) * cross(a2-a1, b2-a1) < EPS;\n}\n\n// 線分と線分\nbool isecSS(Point a1, Point a2, Point b1, Point b2) {\n    return ccw(a1, a2, b1)*ccw(a1, a2, b2) <= 0 && ccw(b1, b2, a1)*ccw(b1, b2, a2) <= 0;\n}\n\n// 線分と点\nbool isecSP(Point a1, Point a2, Point b) {\n    return !ccw(a1, a2, b);\n}\n\n// ********************************************\n\n\n// 距離 (dist) ********************************\n// 点pの直線aへの射影点を返す\nPoint proj(Point a1, Point a2, Point p){\n    return a1 + dot(a2-a1, p-a1) / norm(a2-a1) * (a2-a1);\n}\n\n// 点pの直線aへの反射点を返す\nPoint reflection(Point a1, Point a2, Point p){\n    return 2.0L*proj(a1, a2, p) - p;\n}\n\n// 直線と点\nLD distLP(Point a1, Point a2, Point p){\n    return abs(proj(a1, a2, p) - p);\n}\n\n// 直線と直線\nLD distLL(Point a1, Point a2, Point b1, Point b2) {\n    return isecLL(a1, a2, b1, b2) ? 0 : distLP(a1, a2, b1);\n}\n\n// 直線と線分\nLD distLS(Point a1, Point a2, Point b1, Point b2) {\n    return isecLS(a1, a2, b1, b2) ? 0 : min(distLP(a1, a2, b1), distLP(a1, a2, b2));\n}\n\n// 線分と点\nLD distSP(Point a1, Point a2, Point p) {\n    Point r = proj(a1, a2, p);\n    if(isecSP(a1, a2, r)) return abs(r-p);\n    return min(abs(a1-p), abs(a2-p));\n}\n\n// 線分と線分\nLD distSS(Point a1, Point a2, Point b1, Point b2) {\n    if(isecSS(a1, a2, b1, b2)) return 0;\n    return min(min(distSP(a1, a2, b1), distSP(a1, a2, b2)), min(distSP(b1, b2, a1), distSP(b1, b2, a2)));\n}\n\n// ********************************************\n\n\n// 2直線の交点 (crosspoint) *******************\nPoint crosspointLL(Point a1, Point a2, Point b1, Point b2){\n    LD d1 = cross(b2-b1, b1-a1);\n    LD d2 = cross(b2-b1, a2-a1);\n    if (EQ(d1, 0) && EQ(d2, 0)) return a1;\n    if (EQ(d2, 0)) throw \"not exist crosspoint\";\n    return a1 + d1/d2 * (a2-a1);\n}\n// ********************************************\n\n\n/*************** using variables ***************/\nPoint p1, p2;\nint q;\n/**********************************************/\n\nsigned main(){\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    \n    LD p1x, p1y, p2x, p2y;\n    cin >> p1x >> p1y >> p2x >> p2y;\n    p1 = Point(p1x, p1y);\n    p2 = Point(p2x, p2y);\n    \n    cin >> q;\n    REP(i, q){\n        LD xp, yp;\n        cin >> xp >> yp;\n        Point p(xp, yp);\n\n        int ans = ccw(p1, p2, p);\n        if(ans == 1){\n            cout << \"COUNTER_CLOCKWISE\" << endl;\n        }else if(ans == -1){\n            cout << \"CLOCKWISE\" << endl;\n        }else if(ans == 2){\n            cout << \"ONLINE_BACK\" << endl;\n        }else if(ans == -2){\n            cout << \"ONLINE_FRONT\" << endl;\n        }else{\n            cout << \"ON_SEGMENT\" << endl;\n        }\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\nconst float EPS=1e-9;\nint q;\nstruct point\n{\n    double x,y;\n};\npoint vt(point a,point b)\n{\n    point vt;\n    vt.x=b.x-a.x;\n    vt.y=b.y-a.y;\n    return vt;\n}\ndouble tichcheo(point a,point b)\n{\n    return a.x*b.y-b.x*a.y;\n}\ndouble scalar(point a,point b)\n{\n    return (b.x-a.x)*(b.x-a.x)+(b.y-a.y)*(b.y-a.y);\n}\ndouble tichcham(point a,point b)\n{\n    return a.x*b.x+a.y*b.y;\n}\nint main()\n{\n    point p1,p0;\n    cin>>p0.x>>p0.y>>p1.x>>p1.y;\n    cin>>q;\n    while (q--)\n    {\n        point p2;\n        cin>>p2.x>>p2.y;\n        point p01=vt(p0,p1);\n        point p02=vt(p0,p2);\n        if (tichcheo(p01,p02)>0) cout<<\"COUNTER_CLOCKWISE\"<<endl;\n        else if (tichcheo(p01,p02)<0) cout<<\"CLOCKWISE\"<<endl;\n        else\n        {\n            double sc01=scalar(p0,p1);\n            double sc02=scalar(p0,p2);\n            if (((p2.x==p0.x)&&(p2.y==p0.y))||((p2.x==p1.x)&&(p2.y==p1.y))) cout<<\"ON_SEGMENT\"<<endl;\n            else\n            if (fabs(tichcham(p01,p02)+sqrt(sc01*sc02))<EPS) cout<<\"ONLINE_BACK\"<<endl;\n            else\n            {\n                if (sc01<sc02) cout<<\"ONLINE_FRONT\"<<endl;\n                else cout<<\"ON_SEGMENT\"<<endl;\n            }\n        }\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <iostream>\n\nusing namespace std;\n\n#define EPS 1e-12\n\n#define PI 3.1415926535897932385\n\ndouble dist(int x, int y)\n{\n\treturn sqrt(x * x + y * y);\n}\n\ndouble angle(int x, int y)\n{\n\treturn atan2((double)(y), (double)(x));\n}\n\nint main()\n{\n\tint x0, y0, x1, y1, x2, y2, q;\n\n\tcin >> x0 >> y0 >> x1 >> y1 >> q;\n\n\tfor (int i = 0; i < q; i++)\n\t{\n\t\tcin >> x2 >> y2;\n\n\t\tint ax = x1 - x0;\n\t\tint ay = y1 - y0;\n\t\tint bx = x2 - x0;\n\t\tint by = y2 - y0;\n\n\t\tdouble ad = dist(ax, ay);\n\t\tdouble bd = dist(bx, by);\n\n\t\tdouble at = angle(ax, ay);\n\t\tdouble bt = angle(bx, by);\n\n\t\tdouble st = bt - at;\n\n\t\tif (st < -PI - EPS)\n\t\t{\n\t\t\tst += 2 * PI;\n\t\t}\n\n\t\tif (st > PI + EPS)\n\t\t{\n\t\t\tst -= 2 * PI;\n\t\t}\n\n\t\tif (bx == 0 && by == 0)\n\t\t{\n\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t}\n\t\telse if (PI - EPS < abs(st) && abs(st) < PI + EPS)\n\t\t{\n\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t}\n\t\telse if (-EPS < st && st < EPS)\n\t\t{\n\t\t\tif (ad < bd)\n\t\t\t{\n\t\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t\t}\n\t\t}\n\t\telse if (st > EPS)\n\t\t{\n\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\t}\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define TemplateVersion \"3.4.0\"\n// Useful Marcos\n//====================START=====================\n// Compile use C++11 and above\n#ifdef LOCAL\n#define debug(args...)                           \\\n    {                                            \\\n        string _s = #args;                       \\\n        replace(_s.begin(), _s.end(), ',', ' '); \\\n        stringstream _ss(_s);                    \\\n        istream_iterator<string> _it(_ss);       \\\n        err(_it, args);                          \\\n    }\nvoid err(istream_iterator<string> it)\n{\n}\ntemplate <typename T, typename... Args>\nvoid err(istream_iterator<string> it, T a, Args... args)\n{\n    cerr << *it << \" = \" << a << endl;\n    err(++it, args...);\n}\n#define MSG cout << \"Finished\" << endl\n#else\n#define debug(args...)\n#define MSG\n#endif\n#if __cplusplus >= 201703L\ntemplate <typename... Args>\nvoid readln(Args &... args)\n{\n    ((cin >> args), ...);\n}\ntemplate <typename... Args>\nvoid writeln(Args... args)\n{\n    ((cout << args << \" \"), ...);\n    cout << endl;\n}\n#elif __cplusplus >= 201103L\nvoid readln()\n{\n}\ntemplate <typename T, typename... Args>\nvoid readln(T &a, Args &... args)\n{\n    cin >> a;\n    readln(args...);\n}\nvoid writeln()\n{\n    cout << endl;\n}\ntemplate <typename T, typename... Args>\nvoid writeln(T a, Args... args)\n{\n    cout << a << \" \";\n    writeln(args...);\n}\n#endif\n#if __cplusplus >= 201103L\n#define FOR(_i, _begin, _end) for (auto _i = _begin; _i < _end; _i++)\n#define FORR(_i, _begin, _end) for (auto _i = _begin; _i > _end; _i--)\n#else\n#define FOR(_i, _begin, _end) for (int _i = (int)_begin; _i < (int)_end; _i++)\n#define FORR(_i, _begin, _end) for (int _i = (int)_begin; _i > (int)_end; _i--)\n#define nullptr NULL\n#endif\n#if __cplusplus >= 201103L\n#define VIS(_kind, _name, _size) \\\n    vector<_kind> _name(_size);  \\\n    for (auto &i : _name)        \\\n        cin >> i;\n#else\n#define VIS(_kind, _name, _size)    \\\n    vector<_kind> _name;            \\\n    _name.resize(_size);            \\\n    for (int i = 0; i < _size; i++) \\\n        cin >> _name[i];\n#endif\n// alias\n#define mp make_pair\n#define pb push_back\n#define eb emplace_back\n#define all(x) (x).begin(), (x).end()\n#define tcase() \\\n    int T;      \\\n    cin >> T;   \\\n    FOR(kase, 1, T + 1)\n// Swap max/min\ntemplate <typename T>\nbool smax(T &a, const T &b)\n{\n    if (a > b)\n        return false;\n    a = b;\n    return true;\n}\ntemplate <typename T>\nbool smin(T &a, const T &b)\n{\n    if (a < b)\n        return false;\n    a = b;\n    return true;\n}\n// ceil divide\ntemplate <typename T>\nT cd(T a, T b)\n{\n    return (a + b - 1) / b;\n}\n// min exchange\ntemplate <typename T>\nbool se(T &a, T &b)\n{\n    if (a < b)\n        return false;\n    swap(a, b);\n    return true;\n}\n// A better MAX choice\nconst int INF = 0x3f3f3f3f;\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int, int> pii;\ntypedef vector<int> vi;\ntypedef vector<ll> vll;\ntypedef set<int> si;\ntypedef vector<string> cb;\n//====================END=====================\n\n// Constants here\nconst double EPS = 1e-8;\nconst double PI = acos(-1);\n\ntypedef double db;\n\nint sgn(db x)\n{\n    if (abs(x) < EPS)\n        return 0;\n    if (x < 0)\n        return -1;\n    return 1;\n}\n\ninline db sqr(db x) { return x * x; }\n\n// Point/Vector\nstruct Point\n{\n    db x, y;\n\n    Point() : x(1e-18), y(1e-18) {}\n\n    Point(db _x, db _y) : x(_x + 1e-18), y(_y + 1e-18) {}\n\n    bool operator==(const Point &p)\n    {\n        return sgn(x - p.x) == 0 && sgn(y - p.y) == 0;\n    }\n\n    bool operator<(const Point &p)\n    {\n        int c = sgn(x - p.x);\n        if (c)\n            return c == -1;\n        return sgn(y - p.y) == -1;\n    }\n\n    Point operator+(const Point &p) { return Point(x + p.x, y + p.y); }\n    Point operator-(const Point &p) { return Point(x - p.x, y - p.y); }\n    Point operator*(db d) { return Point(x * d, y * d); }\n    Point operator/(db d) { return Point(x / d, y / d); }\n\n    db operator^(const Point &p) { return x * p.y - y * p.x; }\n    db operator*(const Point &p) { return x * p.x + y * p.y; }\n\n    db dis(const Point &p) { return (*this - p).len(); }\n    db alpha() { return atan2(y, x); }\n\n    Point unit() { return *this / len(); }\n\n    Point rotac() { return Point(-y, x); }\n    Point rotcl() { return Point(y, -x); }\n\n    Point rot(Point p, db angle)\n    {\n        Point v = *this - p;\n        db c = cos(angle), s = sin(angle);\n        return Point(p.x + v.x * c - v.y * s, p.y + v.x * s + v.y * c);\n    }\n\n    db len() { return hypot(x, y); }\n    db len2() { return x * x + y * y; }\n\n    db rad(Point a, Point b)\n    {\n        Point ap = a - *this, bp = b - *this;\n        return abs(atan2(abs(ap ^ bp), ap * bp));\n    }\n\n    void read() { cin >> x >> y; }\n    void write() { cout << '(' << x << \", \" << y << \")\\n\"; }\n};\n\n// Line\nstruct Line\n{\n    Point s, e;\n\n    Line(){};\n\n    Line(Point _s, Point _e) : s(_s), e(_e) {}\n\n    Line(Point p, db angle)\n    {\n        s = p;\n        if (sgn(angle - PI / 2))\n            e = (s + Point(1, tan(angle)));\n        else\n            e = (s + Point(0, 1));\n    }\n\n    //ax+by+c=0\n    Line(db a, db b, db c)\n    {\n        if (sgn(a) == 0)\n        {\n            s = Point(0, -c / b);\n            e = Point(1, -c / b);\n        }\n        else if (sgn(b) == 0)\n        {\n            s = Point(-c / a, 0);\n            e = Point(-c / a, 1);\n        }\n        else\n        {\n            s = Point(0, -c / b);\n            e = Point(1, -(c + a) / b);\n        }\n    }\n\n    db len() { return s.dis(e); }\n    db angle()\n    {\n        db ans = atan2(e.y - s.y, e.x - s.x);\n        if (sgn(ans) == -1)\n            ans += PI;\n        if (sgn(ans - PI) == 0)\n            ans -= PI;\n        return ans;\n    }\n\n    // 1 -> On Left\n    // 2 -> On Right\n    // 3 -> On Line BUT MAY NOT ON THE SEGMENT!\n    int relation(Point p)\n    {\n        int c = sgn((p - s) ^ (e - s));\n        if (c < 0)\n            return 1;\n        else if (c > 0)\n            return 2;\n        return 3;\n    }\n\n    bool checkOn(Point p) { return sgn((p - s) ^ (e - s)) == 0 && sgn((p - s) ^ (p - e)) <= 0; }\n\n    bool parallel(Line l) { return sgn((e - s) ^ (l.e - l.s)) == 0; }\n\n    // 0 -> Formal Intersection\n    // 1 -> Informal\n    // 2 -> Not Intersect\n    int crossSS(Line l)\n    {\n        int d1 = sgn((e - s) ^ (l.s - s));\n        int d2 = sgn((e - s) ^ (l.e - s));\n        int d3 = sgn((l.e - l.s) ^ (s - l.s));\n        int d4 = sgn((l.e - l.s) ^ (e - l.s));\n        if ((d1 ^ d2) == -2 && (d3 ^ d4) == -2)\n            return 2;\n        return (d1 == 0 && sgn((l.s - s) * (l.s - e)) <= 0) ||\n               (d2 == 0 && sgn((l.e - s) * (l.e - e)) <= 0) ||\n               (d3 == 0 && sgn((s - l.s) * (s - l.e)) <= 0) ||\n               (d4 == 0 && sgn((e - l.s) * (e - l.e)) <= 0);\n    }\n\n    // 0 -> Formal Intersection\n    // 1 -> Informal\n    // 2 -> Not Intersect\n    int crossLS(Line l)\n    {\n        int d1 = sgn((e - s) ^ (l.s - s));\n        int d2 = sgn((e - s) ^ (l.e - s));\n        if ((d1 ^ d2) == -2)\n            return 2;\n        return (d1 == 0 || d2 == 0);\n    }\n\n    // 0 -> Parallel\n    // 1 -> Same\n    // 2 -> Intersect\n    int crossLL(Line l)\n    {\n        if (this->parallel(l))\n            return l.relation(s) == 3;\n        return 2;\n    }\n\n    Point crossP(Line l)\n    {\n        db a1 = (l.e - l.s) ^ (s - l.s);\n        db a2 = (l.e - l.s) ^ (e - l.s);\n        return Point((s.x * a2 - e.x * a1) / (a2 - a1), (s.y * a2 - e.y * a1) / (a2 - a1));\n    }\n\n    db disPL(Point p) { return abs((p - s) ^ (e - s)) / len(); }\n    db disPS(Point p)\n    {\n        if (sgn((p - s) * (e - s)) < 0 || sgn((p - e) * (s - e)) < 0)\n            return min(p.dis(s), p.dis(e));\n        return disPL(p);\n    }\n    db disSS(Line l) { return min(min(disPS(l.s), disPS(l.e)), min(l.disPS(s), l.disPS(e))); }\n\n    Point proj(Point p) { return s + ((e - s) * ((e - s) * (p - s))) / ((e - s).len2()); }\n    Point refl(Point p)\n    {\n        Point q = proj(p);\n        return Point(2 * q.x - p.x, 2 * q.y - p.y);\n    }\n\n    bool operator==(Line l) { return s == l.s && e == l.e; }\n\n    void adjust()\n    {\n        if (e < s)\n            swap(s, e);\n    }\n\n    void read()\n    {\n        s.read();\n        e.read();\n    }\n\n    void write()\n    {\n        cout << \"Line:\\n\";\n        s.write();\n        e.write();\n    }\n};\n\n// Pre-Build Function\ninline void build()\n{\n}\n\n// Actual Solver\ninline void solve()\n{\n    Line l;\n    l.read();\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        Point p;\n        p.read();\n        int re = l.relation(p);\n        if (re == 1)\n            cout << \"COUNTER_CLOCKWISE\\n\";\n        else if (re == 2)\n            cout << \"CLOCKWISE\\n\";\n        else\n        {\n            auto d = p.dis(l.s);\n            auto a = l.s.rad(l.e, p);\n            if (sgn(a - PI) == 0)\n                cout << \"ONLINE_BACK\\n\";\n            else if (sgn(d - l.len()) < 0)\n                cout << \"ON_SEGMENT\\n\";\n            else\n                cout << \"ONLINE_FRONT\\n\";\n        }\n    }\n}\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n    cout.tie(nullptr);\n\n#ifdef LOCAL\n    clock_t _begin = clock();\n#endif\n\n    build();\n    solve();\n\n#ifdef LOCAL\n    cerr << \"Time elapsed: \" << (double)(clock() - _begin) * 1000 / CLOCKS_PER_SEC << \"ms.\" << endl;\n#endif\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<vector>\n#include<algorithm>\n#include<utility>\n#include<numeric>\n#include<iostream>\n#include<array>\n#include<string>\n#include<sstream>\n#include<stack>\n#include<queue>\n#include<list>\n#include<functional>\n#define _USE_MATH_DEFINES\n\n#include<math.h>\n#include<map>\n\n#define INF 200000000\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef pair<ll, ll> pll;\ntypedef pair<ll, int> pli;\n\nint main()\n{\n\tcin.tie(0);\n\tios::sync_with_stdio(false);\n\n\tdouble x1, x2, y1, y2, x3, y3;\n\tcin >> x1 >> y1 >> x2 >> y2;\n\n\tx3 = (x2 - x1) / sqrt((x2 - x1)*(x2 - x1) + (y2 - y1)*(y2 - y1));\n\ty3 = (y2 - y1) / sqrt((x2 - x1)*(x2 - x1) + (y2 - y1)*(y2 - y1));\n\n\tint q;\n\tcin >> q;\n\n\tfor (int i = 0; i < q; i++)\n\t{\n\t\tdouble px, py, px2, py2;\n\t\tcin >> px >> py;\n\n\t\tpx2 = (px - x1);\n\t\tpy2 = (py - y1);\n\n\t\tif ((px2*px2 + py2*py2) <= 0.0000001)\n\t\t{\n\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t\tcontinue;\n\t\t}\n\n\t\tdouble cross = (py2*x3 - px2*y3);\n\t\tif (abs(cross) <= 0.00000000001)\n\t\t{\n\t\t\tif ((px2*x3 + py2*y3)>0)\n\t\t\t{\n\t\t\t\tif ((x3*x3 + y3*y3) < (px2*px2 + py2*py2))\n\t\t\t\t{\n\t\t\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (cross > 0)\n\t\t\t{\n\t\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "///\n// File:  cgl_1_c.cpp\n// Author: ymiyamoto\n//\n// Created on Mon Oct 23 00:28:22 2017\n//\n#include <cmath>\n#include <cstdint>\n#include <iomanip>\n#include <iostream>\n\nusing namespace std;\n\nstruct vector_t {\n  double x;\n  double y;\n\n  vector_t(double a, double b) : x(a), y(b)\n  {\n  }\n\n  double norm2()\n  {\n    return x * x + y * y;\n  }\n\n  double dot(vector_t a)\n  {\n    return x * a.x + y * a.y;\n  }\n\n  double cross(vector_t a)\n  {\n    return x * a.y - y * a.x;\n  }\n\n  vector_t operator*(double a)\n  {\n    return vector_t(a * x, a * y);\n  }\n};\n\nstruct point_t {\n  double x;\n  double y;\n\n  point_t operator+(const point_t a)\n  {\n    return point_t({x + a.x, y + a.y});\n  }\n\n  void print()\n  {\n    cout << fixed << setprecision(10) << x << \" \" << y << endl;\n  }\n\n  point_t operator+(const vector_t vec)\n  {\n    return point_t({x + vec.x, y + vec.y});\n  }\n\n  vector_t operator-(const point_t p)\n  {\n    return vector_t({x - p.x, y - p.y});\n  }\n\n  point_t project(point_t p1, point_t p2)\n  {\n    vector_t vec1(x - p1.x, y - p1.y);\n    vector_t vec2(p2.x - x, p2.y - y);\n    return point_t({x, y}) + vec1 * (vec1.dot(vec2) / vec1.norm2());\n  }\n\n  point_t reflect(point_t p1, point_t p2)\n  {\n    point_t proj = project(p1, p2);\n    return p2 + (proj - p2) * 2.0;\n  }\n};\n\n#define EPS 1e-10\n#define equals(x, y) (fabs(x - y) < EPS)\n\nint32_t main()\n{\n  double x, y;\n  cin >> x >> y;\n  point_t p0({x, y});\n  cin >> x >> y;\n  point_t p1({x, y});\n\n  uint32_t q;\n  cin >> q;\n  for (uint32_t i = 0; i < q; i++) {\n    cin >> x >> y;\n    point_t p2({x, y});\n    if ((p1 - p0).cross(p2 - p0) > EPS) {\n      cout << \"COUNTER_CLOCKWISE\" << endl;\n    } else if ((p1 - p0).cross(p2 - p0) < -EPS) {\n      cout << \"CLOCKWISE\" << endl;\n    } else if ((p1 - p0).dot(p2 - p0) < EPS) {\n      cout << \"ONLINE_BACK\" << endl;\n    } else {\n      if ((p1 - p0).norm2() < (p2 - p0).norm2()) {\n        cout << \"ONLINE_FRONT\" << endl;\n      } else {\n        cout << \"ON_SEGMENT\" << endl;\n      }\n    }\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "using namespace std;\n#include<iostream>\n#include<algorithm>\n#include<cmath>\n#include<iomanip>\nconst double EPS=1e-10;\nbool eq(double a,double b){return abs(a-b)<EPS;}\nstruct Point{\n\tdouble x,y;\n\tPoint(double x_=0,double y_=0):x(x_),y(y_){}\n\tPoint operator-()const{return Point(-x,-y);}\n\tPoint operator+(const Point&p)const{return Point(x+p.x,y+p.y);}\n\tPoint operator-(const Point&p)const{return Point(x-p.x,y-p.y);}\n\tPoint operator*(const double k)const{return Point(x*k,y*k);}\n\tPoint operator/(const double k)const{return Point(x/k,y/k);}\n\tbool operator<(const Point&p)const{return eq(x,p.x)?y<p.y:x<p.x;}\n\tbool operator==(const Point&p)const{return eq(x,p.x)&&eq(y,p.y);}\n};\nistream&operator>>(istream&is,Point&p){return is>>p.x>>p.y;}\nostream&operator<<(ostream&os,const Point&p){return os<<fixed<<setprecision(9)<<p.x<<' '<<p.y;}\nstruct Line{\n\tPoint p1,p2;\n\tLine(Point p1_=Point(),Point p2_=Point()):p1(p1_),p2(p2_){}\n};\nstruct Segment:Line{\n\tSegment(Point p1_=Point(),Point p2_=Point()):Line(p1_,p2_){}\n};\nstruct Circle{\n\tPoint o;\n\tdouble r;\n\tCircle(Point o_=Point(),double r_=0):o(o_),r(r_){}\n};\n//function list begin\nPoint vec(const Line&);\ndouble norm(const Point&);\ndouble norm(const Line&);\ndouble abs(const Point&);\ndouble abs(const Line&);\ndouble arg(const Point&);\ndouble arg(const Line&);\ndouble arg(const Point&,const Point&,const Point&);\ndouble dot(const Point&,const Point&);\ndouble cross(const Point&,const Point&);\nPoint polar(const double,const double);\nPoint rotate(const Point&,const double);\nint ccw(const Point&,const Point&,const Point&);\nint ccw(const Line&,const Point&);\nenum{ONLINE_FRONT=-2,CLOCKWISE=-1,ON_SEGMENT=0,COUNTER_CLOCKWISE=1,ONLINE_BACK=2};\nbool orthogonal(const Point&,const Point&);\nbool orthogonal(const Line&,const Line&);\nbool parallel(const Point&,const Point&);\nbool parallel(const Line&,const Line&);\nbool intersect(const Line&,const Point&);\nbool intersect(const Line&,const Line&);\nbool intersect(const Segment&,const Point&);\nbool intersect(const Segment&,const Segment&);\nbool intersect(const Line&,const Segment&);\nbool intersect(const Segment&,const Line&);\nbool intersect(const Circle&,const Point&);\nint intersect(const Circle&,const Line&);\nint intersect(const Circle&,const Segment&);\nint intersect(const Circle&,const Circle&);\ndouble distance(const Point&,const Point&);\ndouble distance(const Line&,const Point&);\ndouble distance(const Line&,const Line&);\ndouble distance(const Segment&,const Point&);\ndouble distance(const Segment&,const Segment&);\ndouble distance(const Line&,const Segment&);\ndouble distance(const Segment&,const Line&);\ndouble distance(const Circle&,const Point&);\ndouble distance(const Circle&,const Line&);\ndouble distance(const Circle&,const Segment&);\ndouble distance(const Circle&,const Circle&);\nPoint projection(const Line&,const Point&);\nPoint reflection(const Line&,const Point&);\nPoint crosspoint(const Line&,const Line&);\npair<Point,Point>crosspoint(const Circle&,const Line&);\npair<Point,Point>crosspoint(const Circle&,const Segment&);\npair<Point,Point>crosspoint(const Circle&,const Circle&);\n//function list end\nPoint vec(const Line&s){return s.p2-s.p1;}\ndouble norm(const Point&p){return p.x*p.x+p.y*p.y;}\ndouble norm(const Line&s){return norm(vec(s));}\ndouble abs(const Point&p){return hypot(p.x,p.y);}\ndouble abs(const Line&s){return abs(vec(s));}\ndouble arg(const Point&p){return atan2(p.y,p.x);}\ndouble arg(const Line&s){return arg(vec(s));}\ndouble arg(const Point&a,const Point&b,const Point&c){\n\tdouble A=arg(b-a),B=arg(c-b);\n\tdouble theta=abs(A-B);\n\treturn min(theta,2*M_PI-theta);\n}\ndouble dot(const Point&a,const Point&b){return a.x*b.x+a.y*b.y;}\ndouble cross(const Point&a,const Point&b){return a.x*b.y-a.y*b.x;}\nPoint polar(const double r,const double theta){return Point(cos(theta),sin(theta))*r;}\nPoint rotate(const Point&p,const double theta){\n\treturn Point(p.x*cos(theta)-p.y*sin(theta),p.x*sin(theta)+p.y*cos(theta));\n}\nint ccw(const Point&a,const Point&b,const Point&c){\n\tPoint p=b-a,q=c-a;\n\treturn cross(p,q)>EPS?COUNTER_CLOCKWISE\n\t\t:cross(p,q)<-EPS?CLOCKWISE\n\t\t:dot(p,q)<0?ONLINE_BACK\n\t\t:norm(p)<norm(q)?ONLINE_FRONT\n\t\t:ON_SEGMENT;\n}\nint ccw(const Line&s,const Point&p){return ccw(s.p1,s.p2,p);}\nbool orthogonal(const Point&a,const Point&b){return eq(dot(a,b),0);}\nbool orthogonal(const Line&s,const Line&t){return orthogonal(vec(s),vec(t));}\nbool parallel(const Point&a,const Point&b){return eq(cross(a,b),0);}\nbool parallel(const Line&s,const Line&t){return parallel(vec(s),vec(t));}\nbool intersect(const Line&s,const Point&p){return eq(cross(vec(s),p-s.p1),0);}\nbool intersect(const Line&s,const Line&t){return !parallel(s,t)||intersect(s,t.p1);}\nbool intersect(const Segment&s,const Point&p){return ccw(s,p)==0;}\nbool intersect(const Segment&s,const Segment&t){\n\treturn ccw(s,t.p1)*ccw(s,t.p2)<=0&&ccw(t,s.p1)*ccw(t,s.p2)<=0;\n}\nbool intersect(const Line&s,const Segment&t){\n\treturn cross(vec(s),t.p1-s.p1)*cross(vec(s),t.p2-s.p1)<EPS;\n}\nbool intersect(const Segment&s,const Line&t){return intersect(t,s);}\nbool intersect(const Circle&c,const Point&p){return eq(distance(c.o,p),c.r);}\nint intersect(const Circle&c,const Line&s){\n\tdouble d=distance(s,c.o);\n\treturn eq(d,c.r)?1:d<c.r?2:0;\n}\nint intersect(const Circle&c,const Segment&s){\n\tPoint h=projection(s,c.o);\n\tdouble d1=distance(c.o,s.p1),d2=distance(c.o,s.p2);\n\treturn distance(c.o,h)>c.r+EPS?0\n\t\t:d1<c.r-EPS&&d2<c.r-EPS?0\n\t\t:d1<c.r-EPS&&d2>c.r+EPS||d1>c.r+EPS&&d2<c.r-EPS?1\n\t\t:intersect(s,h)?distance(c.o,h)<c.r-EPS?2:1\n\t\t:0;\n}\nint intersect(const Circle&a,const Circle&b){\n\tdouble d=distance(a.o,b.o);\n\treturn eq(d,a.r+b.r)?3:d>a.r+b.r?4:eq(d,abs(a.r-b.r))?1:d>abs(a.r-b.r)?2:0;\n}\ndouble distance(const Point&a,const Point&b){return abs(a-b);}\ndouble distance(const Line&s,const Point&p){return distance(p,projection(s,p));}\ndouble distance(const Line&s,const Line&t){return intersect(s,t)?0:distance(s,t.p1);}\ndouble distance(const Segment&s,const Point&p){\n\treturn distance(p,\n\t\tdot(vec(s),p-s.p1)<0?s.p1\n\t\t:dot(-vec(s),p-s.p2)<0?s.p2\n\t\t:projection(s,p)\n\t);\n}\ndouble distance(const Segment&s,const Segment&t){\n\treturn intersect(s,t)?0:min({\n\t\tdistance(s,t.p1),distance(s,t.p2),\n\t\tdistance(t,s.p1),distance(t,s.p2)\n\t});\n}\ndouble distance(const Line&s,const Segment&t){\n\treturn intersect(s,t)?0:min(distance(s,t.p1),distance(s,t.p2));\n}\ndouble distance(const Segment&s,const Line&t){return distance(t,s);}\ndouble distance(const Circle&c,const Point&p){return abs(distance(c.o,p)-c.r);}\ndouble distance(const Circle&c,const Line&s){return max(distance(s,c.o)-c.r,0.);}\ndouble distance(const Circle&c,const Segment&s){\n\tPoint h=projection(s,c.o);\n\tdouble d1=distance(c.o,s.p1),d2=distance(c.o,s.p2);\n\treturn intersect(c,s)?0\n\t\t:d1<c.r-EPS&&d2<c.r-EPS?c.r-max(d1,d2)\n\t\t:intersect(s,h)?distance(c.o,h)-c.r\n\t\t:min(distance(c.o,s.p1),distance(c.o,s.p2))-c.r;\n}\ndouble distance(const Circle&a,const Circle&b){return max(distance(a.o,b.o)-a.r-b.r,0.);}\nPoint projection(const Line&s,const Point&p){\n\treturn s.p1+vec(s)*dot(p-s.p1,vec(s))/norm(s);\n}\nPoint reflection(const Line&s,const Point&p){return projection(s,p)*2-p;}\nPoint crosspoint(const Line&s,const Line&t){\n\tdouble d1=abs(cross(vec(s),t.p1-s.p1));\n\tdouble d2=abs(cross(vec(s),t.p2-s.p1));\n\treturn t.p1+vec(t)*(d1/(d1+d2));\n}\npair<Point,Point>crosspoint(const Circle&c,const Line&s){\n\tPoint h=projection(s,c.o);\n\tPoint e=vec(s)/abs(s)*sqrt(c.r*c.r-norm(h-c.o));\n\treturn minmax(h-e,h+e);\n}\npair<Point,Point>crosspoint(const Circle&c,const Segment&s){\n\tpair<Point,Point>p=crosspoint(c,Line(s));\n\treturn intersect(c,s)==2?p\n\t\t:intersect(s,p.first)?make_pair(p.first,p.first)\n\t\t:make_pair(p.second,p.second);\n}\npair<Point,Point>crosspoint(const Circle&a,const Circle&b){\n\tdouble d=distance(a.o,b.o);\n\tdouble alpha=acos((a.r*a.r+d*d-b.r*b.r)/(2*a.r*d));\n\tdouble theta=arg(b.o-a.o);\n\treturn minmax(a.o+polar(a.r,theta+alpha),a.o+polar(a.r,theta-alpha));\n}\nmain(){\n\tSegment L;\n\tint n;\n\tfor(cin>>L.p1>>L.p2>>n;n--;)\n\t{\n\t    Point p;cin>>p;int a=ccw(L,p);\n\t\tcout<<(a==ONLINE_BACK?\"ONLINE_BACK\":a==ONLINE_FRONT?\"ONLINE_FRONT\":a==ON_SEGMENT?\"ON_SEGMENT\":a==CLOCKWISE?\"CLOCKWISE\":\"COUNTER_CLOCKWISE\")<<endl;\n\t}\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<climits>\n#include<string>\n#include<vector>\n#include<list>\n#include<map>\n#include<set>\n#include<cmath>\n#include<queue>\n#include<cstring>\n#include<stack>\nusing namespace std;\n#define EPS 1e-10\n \nstruct Point{\n    double x,y;\n    Point(){}\n    Point(double _x,double _y){\n        x=_x; y=_y;\n    }\n    Point operator +(const Point p)const{\n        return Point(x+p.x,y+p.y);\n    }\n    Point operator -(const Point p)const{\n        return Point(x-p.x,y-p.y);\n    }\n    Point operator *(const double d)const{\n        return Point(x*d,y*d);\n    }\n    bool operator <(const Point &p)const{\n        if(x==p.x) return y<p.y;\n        return x<p.x;\n    }\n    double norm(){\n        return x*x+y*y;\n    }\n\tbool input(){\n\t\tif(cin>>x>>y) return true;\n\t\treturn false;\n\t}\n};\n \nstruct Line{\n    Point a,b;\n    Line(){}\n    Line(Point _a,Point _b){\n        a=_a; b=_b;\n    }\n\tbool input(){\n\t\tif(a.input() && b.input()) return true;\n\t\treturn false;\n\t}\n};\n \nstruct Circle{\n    Point c;\n    double r;\n    Circle(){}\n    Circle(Point _c,double _r){\n        c=_c; r=_r;\n    }\n};\n \ndouble dot(Point p,Point q){\n    return p.x*q.x+p.y*q.y;\n}\n \ndouble cross(Point p,Point q){\n    return p.x*q.y-q.x*p.y;\n}\n \nint ccw(Point a,Point b,Point c){ //a,b,c,は全て異なる\n\tPoint v1 = Point(b-a);\n\tPoint v2 = Point(c-a);\n    if(cross(v1,v2)>EPS) return +1; //a->b->c が反時計回り\n    if(cross(v1,v2)<-EPS) return -1; //a->b->c が時計回り\n\tif(dot(v1,v2)<-EPS) return +2; //cがa-bより後ろ c<-a->b\n\tif(v1.norm()<v2.norm()) return -2; //cがa-bより前 a->b->c\n    return 0; //cがa-b上 a->c->b\n}\n \nbool intersect_ss(Line l,Line m) {\n    return ccw(l.a,m.a,l.b)*ccw(l.a,m.b,l.b)<=0 && ccw(m.a,l.a,m.b)*ccw(m.a,l.b,m.b)<=0;\n}\n \nbool crosspoint_ll(Line l,Line m,Point &p){\n    Point a1,a2,b1,b2;\n    a1 = l.b-l.a; a2 = m.b-m.a;\n    b1 = m.a-l.a; b2 = m.b-l.a;\n    double s1,s2;\n    s1 = abs(cross(a1,b1)/2); s2 = abs(cross(a1,b2)/2);\n    if(s1<EPS && s2<EPS) return false;\n    p = Point(m.a.x+a2.x*s1/(s1+s2),m.a.y+a2.y*s1/(s1+s2));\n    return true;\n}\n \nbool crosspoint_ss(Line l,Line m,Point &p){\n    if(intersect_ss(l,m)==false) return false;\n    return crosspoint_ll(l,m,p);\n}\n \nint crosspoint_cc(Circle c1,Circle c2,Point &p1,Point &p2){\n    double d,a,t;\n    d = sqrt((c2.c-c1.c).norm());\n    if(d<abs(c1.r-c2.r) || c1.r+c2.r<d) return 0;\n    a = acos((c1.r*c1.r+d*d-c2.r*c2.r)/(2*c1.r*d));\n    t = atan2(c2.c.y-c1.c.y,c2.c.x-c1.c.x);\n    p1 = Point(c1.c.x+c1.r*cos(t+a),c1.c.y+c1.r*sin(t+a));\n    p2 = Point(c1.c.x+c1.r*cos(t-a),c1.c.y+c1.r*sin(t-a));\n    if(abs(p1.x-p2.x)<EPS && abs(p1.y-p2.y)<EPS) return 1;\n    return 2;\n}\n \nint main(){\n\tint Q;\n\tPoint p1,p2,p3;\n\tp1.input(); p2.input();\n\tcin>>Q;\n\tfor(int i=0;i<Q;i++){\n\t\tp3.input();\n\t\tint w = ccw(p1,p2,p3);\n\t\tif(w==1) puts(\"COUNTER_CLOCKWISE\");\n\t\telse if(w==-1) puts(\"CLOCKWISE\");\n\t\telse if(w==2) puts(\"ONLINE_BACK\");\n\t\telse if(w==-2) puts(\"ONLINE_FRONT\");\n\t\telse puts(\"ON_SEGMENT\");\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<complex>\n#define x real() \n#define y imag()\nusing namespace std;\ntypedef complex<double> point;\nstring ccw(point a,point b,point c){\n  b-=a;\n  c-=a;\n  c*=conj(b);\n  if(c.y>0)return \"COUNTER_CLOCKWISE\";  \n  if(c.y<0)return \"CLOCKWISE\";\n  if(c.x/abs(b)>abs(a))return \"ONLINE_FRONT\";\n  if(c.x/abs(b)<0)return \"ONLINE_BACK\";\n  return \"ON_SEGMENT\";\n}\nint main(){\n  double x0,y0,x1,y1;\n  cin>>x0>>y0>>x1>>y1;\n  point a=point(x0,y0);\n  point b=point(x1,y1);\n  int q;\n  cin>>q;\n  for(int i=0;i<q;i++){\n    double xp,yp;\n    cin>>xp>>yp;\n    point c=point(xp,yp);\n    cout<<ccw(a,b,c)<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <complex>\n#include <vector>\n#include <algorithm>\n#include <functional>\n#include <iomanip>\n\nusing namespace std;\n\n// 実数\nusing Real = double;\n// 点\nusing Point = complex<Real>;\nconst Real EPS = 1e-8, PI = acos(-1);\n\n// 実数同士の比較\ninline bool eq(Real a, Real b) { return fabs(b - a) < EPS; }\n\nPoint operator*(const Point& p, const Real& d) {\n    return Point(real(p) * d, imag(p) * d);\n}\n\n// 点の入力\nistream& operator>>(istream& is, Point& p) {\n    Real a, b;\n    is >> a >> b;\n    p = Point(a, b);\n    return is;\n}\n\n//// 点の出力\n//ostream &operator<<(ostream &os, Point &p) {\n//  os << fixed << setprecision(10) << p.real() << \" \" << p.imag();\n//}\n\n// 点 p を反時計回りに theta 回転\nPoint rotate(Real theta, const Point& p) {\n    return Point(cos(theta) * p.real() - sin(theta) * p.imag(), sin(theta) * p.real() + cos(theta) * p.imag());\n}\n\n// ラジアンを度数に変換\nReal radian_to_degree(Real r) {\n    return (r * 180.0 / PI);\n}\n\n// 度数をラジアンに変換\nReal degree_to_radian(Real d) {\n    return (d * PI / 180.0);\n}\n\n// a-b-c の角度のうち小さい方を返す\nReal get_angle(const Point& a, const Point& b, const Point& c) {\n    const Point v(b - a), w(c - a);\n    Real alpha = atan2(v.imag(), v.real()), beta = atan2(w.imag(), w.real());\n    if (alpha > beta) swap(alpha, beta);\n    Real theta = (beta - alpha);\n    return min(theta, 2 * acos(-1) - theta);\n}\n\n// ソート x座標が小さい順に並べる x座標が同じならy座標が小さい順\nnamespace std {\n    bool operator<(const Point& a, const Point& b) {\n        return !eq(a.real(), b.real()) ? a.real() < b.real() : a.imag() < b.imag();\n    }\n}\n\n// 2点を通る直線\nstruct Line {\n    Point a, b;\n\n    Line() = default;\n\n    Line(Point a, Point b) : a(a), b(b) {}\n\n    Line(Real A, Real B, Real C) // Ax + By = C\n    {\n        if (eq(A, 0)) a = Point(0, C / B), b = Point(1, C / B);\n        else if (eq(B, 0)) b = Point(C / A, 0), b = Point(C / A, 1);\n        else a = Point(0, C / B), b = Point(C / A, 0);\n    }\n\n    friend ostream& operator<<(ostream& os, Line& p) {\n        return os << p.a << \" to \" << p.b;\n    }\n\n    friend istream& operator>>(istream& is, Line& a) {\n        return is >> a.a >> a.b;\n    }\n};\n\n// 2点を結ぶ線分\nstruct Segment : Line {\n    Segment() = default;\n    Segment(Point a, Point b) : Line(a, b) {}\n};\n\n\n// 円\nstruct Circle {\n    // 中心\n    Point p;\n    // 半径\n    Real r;\n\n    Circle() = default;\n\n    Circle(Point p, Real r) : p(p), r(r) {}\n};\n\n// 点集合\nusing Points = vector< Point >;\n// ポリゴン 反時計回り\nusing Polygon = vector< Point >;   // 注意!! 凸多角形は反時計回りに与える.(保証されない場合は面積が負なら reverse をかける)\n// 線分集合\nusing Segments = vector< Segment >;\n// 直線集合\nusing Lines = vector< Line >;\n// 円集合\nusing Circles = vector< Circle >;\n\n// 外積\nReal cross(const Point& a, const Point& b) {\n    return real(a) * imag(b) - imag(a) * real(b);\n}\n\n// 内積\nReal dot(const Point& a, const Point& b) {\n    return real(a) * real(b) + imag(a) * imag(b);\n}\n\n\n// 点の回転方向\n//          +1\n//          \n//  +2   a   0   b  -2\n//\n//          -1\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_C&lang=jp\nint ccw(const Point& a, Point b, Point c) {\n    b = b - a, c = c - a;\n    if (cross(b, c) > EPS) return +1;  // \"COUNTER_CLOCKWISE\"\n    if (cross(b, c) < -EPS) return -1; // \"CLOCKWISE\"\n    if (dot(b, c) < 0) return +2;      // \"ONLINE_BACK\"\n    if (norm(b) < norm(c)) return -2;  // \"ONLINE_FRONT\"\n    return 0;                         // \"ON_SEGMENT\"\n}\n\n\n// 2 直線が平行か\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_A\nbool parallel(const Line& a, const Line& b) {\n    return eq(cross(a.b - a.a, b.b - b.a), 0.0);\n}\n\n// 2 直線が垂直か\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_A\nbool orthogonal(const Line& a, const Line& b) {\n    return eq(dot(a.a - a.b, b.a - b.b), 0.0);\n}\n\n// 直線 l に 点 p から垂線を下ろして,交わる点を返す\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_A\nPoint projection(const Line& l, const Point& p) {\n    double t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n    return l.a + (l.a - l.b) * t;\n}\n\n// 同じ\n// 直線として扱われそう\nPoint projection(const Segment& l, const Point& p) {\n    double t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n    return l.a + (l.a - l.b) * t;\n}\n\n// 直線 l に対して, 点 p と線対称な位置にある点を返す.\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_B\nPoint reflection(const Line& l, const Point& p) {\n    return p + (projection(l, p) - p) * 2.0;\n}\n\n// 直線上に点が乗るかどうか\nbool intersect(const Line& l, const Point& p) {\n    return abs(ccw(l.a, l.b, p)) != 1;\n}\n\n// 直線 l と直線 m の交差判定\nbool intersect(const Line& l, const Line& m) {\n    return abs(cross(l.b - l.a, m.b - m.a)) > EPS || abs(cross(l.b - l.a, m.b - l.a)) < EPS;\n}\n\n// 線分上に点があるかどうか\nbool intersect(const Segment& s, const Point& p) {\n    return ccw(s.a, s.b, p) == 0;\n}\n\n// 直線 l と 線分 s の交差判定\nbool intersect(const Line& l, const Segment& s) {\n    return cross(l.b - l.a, s.a - l.a) * cross(l.b - l.a, s.b - l.a) < EPS;\n}\n\n// 点 p と 直線 l との距離\nReal distance(const Line& l, const Point& p);\n\n// 円 c と直線 l との交差判定\nbool intersect(const Circle& c, const Line& l) {\n    return distance(l, c.p) <= c.r + EPS;\n}\n\n// 点 p が 円 c 上にあるかどうか\nbool intersect(const Circle& c, const Point& p) {\n    return abs(abs(p - c.p) - c.r) < EPS;\n}\n\n\n// 線分同士の交差判定\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_B\nbool intersect(const Segment& s, const Segment& t) {\n    return ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 && ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0;\n}\n\n// 円 c と 線分 l との交差判定\nint intersect(const Circle& c, const Segment& l) {\n    if (norm(projection(l, c.p) - c.p) - c.r * c.r > EPS) return 0;\n    auto d1 = abs(c.p - l.a), d2 = abs(c.p - l.b);\n    if (d1 < c.r + EPS && d2 < c.r + EPS) return 0;\n    if (d1 < c.r - EPS && d2 > c.r + EPS || d1 > c.r + EPS && d2 < c.r - EPS) return 1;\n    const Point h = projection(l, c.p);\n    if (dot(l.a - h, l.b - h) < 0) return 2;\n    return 0;\n}\n\n// 円同士の交差判定\n// 4 := 離れている\n// 3 := 外接する\n// 2 := 交わる\n// 1 := 内接する\n// 0 := 内包する\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_7_A&lang=jp\nint intersect(Circle c1, Circle c2) {\n    if (c1.r < c2.r) swap(c1, c2);\n    Real d = abs(c1.p - c2.p);\n    if (c1.r + c2.r < d) return 4;\n    if (eq(c1.r + c2.r, d)) return 3;\n    if (c1.r - c2.r < d) return 2;\n    if (eq(c1.r - c2.r, d)) return 1;\n    return 0;\n}\n\n// 点と点の距離\nReal distance(const Point& a, const Point& b) {\n    return abs(a - b);\n}\n\n// 直線と点の距離\nReal distance(const Line& l, const Point& p) {\n    return abs(p - projection(l, p));\n}\n\n// 直線と直線の距離 (もちろん交わってたら 0)\nReal distance(const Line& l, const Line& m) {\n    return intersect(l, m) ? 0 : distance(l, m.a);\n}\n\n// 線分と点の距離\nReal distance(const Segment& s, const Point& p) {\n    Point r = projection(s, p);\n    if (intersect(s, r)) return abs(r - p);\n    return min(abs(s.a - p), abs(s.b - p));\n}\n\n// 線分同士の距離\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_D\nReal distance(const Segment& a, const Segment& b) {\n    if (intersect(a, b)) return 0;\n    return min({ distance(a, b.a), distance(a, b.b), distance(b, a.a), distance(b, a.b) });\n}\n\n// 直線と線分の距離\nReal distance(const Line& l, const Segment& s) {\n    if (intersect(l, s)) return 0;\n    return min(distance(l, s.a), distance(l, s.b));\n}\n\n// 直線同士の交点を返す (交差することが要請されるのかな (事前にintersect を呼べばいい))\nPoint crosspoint(const Line& l, const Line& m) {\n    Real A = cross(l.b - l.a, m.b - m.a);\n    Real B = cross(l.b - l.a, l.b - m.a);\n    if (eq(abs(A), 0.0) && eq(abs(B), 0.0)) return m.a;\n    return m.a + (m.b - m.a) * B / (A + 1e-18);\n}\n\n// 線分同士の交点を返す (交差することが要請されるのかな (事前にintersect を呼べばいい))\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_C\nPoint crosspoint(const Segment& l, const Segment& m) {\n    return crosspoint(Line(l), Line(m));\n}\n\n\n// 円と直線の交点を返す (交差することが要請されるのかな (事前にintersect を呼べばいい))\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_7_D\npair< Point, Point > crosspoint(const Circle& c, const Line l) {\n    Point pr = projection(l, c.p);\n    Point e = (l.b - l.a) / abs(l.b - l.a);\n    if (eq(distance(l, c.p), c.r)) return { pr, pr };\n    double base = sqrt(c.r * c.r - norm(pr - c.p));\n    return { pr - e * base, pr + e * base };\n}\n\n\n// 円と線分の交点を返す (交差することが要請されるのかな (事前にintersect を呼べばいい))\npair< Point, Point > crosspoint(const Circle& c, const Segment& l) {\n    Line aa = Line(l.a, l.b);\n    if (intersect(c, l) == 2) return crosspoint(c, aa);\n    auto ret = crosspoint(c, aa);\n    if (dot(l.a - ret.first, l.b - ret.first) < 0) ret.second = ret.first;\n    else ret.first = ret.second;\n    return ret;\n}\n\n// 円同士の交点を返す (交差することが要請されるのかな (事前にintersect を呼べばいい))\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_7_E\npair< Point, Point > crosspoint(const Circle& c1, const Circle& c2) {\n    Real d = abs(c1.p - c2.p);\n    Real a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n    Real t = atan2(c2.p.imag() - c1.p.imag(), c2.p.real() - c1.p.real());\n    Point p1 = c1.p + Point(cos(t + a) * c1.r, sin(t + a) * c1.r);\n    Point p2 = c1.p + Point(cos(t - a) * c1.r, sin(t - a) * c1.r);\n    return { p1, p2 };\n}\n\n// 点 p から円 C へ接戦を引いた時の、接点を返す\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_7_F\npair< Point, Point > tangent(const Circle& c1, const Point& p2) {\n    return crosspoint(c1, Circle(p2, sqrt(norm(c1.p - p2) - c1.r * c1.r)));\n}\n\n// 円と円の共通接線を複数返す\n// 0 ~ 4 つの可能性がある\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_7_G\nLines tangent(Circle c1, Circle c2) {\n    Lines ret;\n    if (c1.r < c2.r) swap(c1, c2);\n    Real g = norm(c1.p - c2.p);\n    if (eq(g, 0)) return ret;\n    Point u = (c2.p - c1.p) / sqrt(g);\n    Point v = rotate(PI * 0.5, u);\n    for (int s : {-1, 1}) {\n        Real h = (c1.r + s * c2.r) / sqrt(g);\n        if (eq(1 - h * h, 0)) {\n            ret.emplace_back(c1.p + u * c1.r, c1.p + (u + v) * c1.r);\n        }\n        else if (1 - h * h > 0) {\n            Point uu = u * h, vv = v * sqrt(1 - h * h);\n            ret.emplace_back(c1.p + (uu + vv) * c1.r, c2.p - (uu + vv) * c2.r * s);\n            ret.emplace_back(c1.p + (uu - vv) * c1.r, c2.p - (uu - vv) * c2.r * s);\n        }\n    }\n    return ret;\n}\n\n// 多角形が凸かどうかを判定\n// 与えられる多角形は反時計回りなことが要請される\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_3_B\nbool is_convex(const Polygon& p) {\n    int n = (int)p.size();\n    for (int i = 0; i < n; i++) {\n        if (ccw(p[(i + n - 1) % n], p[i], p[(i + 1) % n]) == -1) return false;\n    }\n    return true;\n}\n\n// 凸包に含まれる点上および辺上の頂点からなる多角形を返す.\n// 多角形の開始位置は特に指定がない.\n// 反時計回りに返されることは保証されていそう\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_4_A\nPolygon convex_hull(Polygon& p) {\n    int n = (int)p.size(), k = 0;\n    if (n <= 2) return p;\n    sort(p.begin(), p.end());\n    vector< Point > ch(2 * n);\n    for (int i = 0; i < n; ch[k++] = p[i++]) {\n        while (k >= 2 && cross(ch[k - 1] - ch[k - 2], p[i] - ch[k - 1]) < 0) --k;\n    }\n    for (int i = n - 2, t = k + 1; i >= 0; ch[k++] = p[i--]) {\n        while (k >= t && cross(ch[k - 1] - ch[k - 2], p[i] - ch[k - 1]) < 0) --k;\n    }\n    ch.resize(k - 1);\n    return ch;\n}\n\n// 多角形 Q と点 p との関係を返す\n// 0 := OUT\n// 1 := ON\n// 2 := IN\n// 多角形は反時計回りに渡す\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_3_C\nenum {\n    OUT, ON, IN\n};\nint contains(const Polygon& Q, const Point& p) {\n    bool in = false;\n    for (int i = 0; i < Q.size(); i++) {\n        Point a = Q[i] - p, b = Q[(i + 1) % Q.size()] - p;\n        if (a.imag() > b.imag()) swap(a, b);\n        if (a.imag() <= 0 && 0 < b.imag() && cross(a, b) < 0) in = !in;\n        if (cross(a, b) == 0 && dot(a, b) <= 0) return ON;\n    }\n    return in ? IN : OUT;\n}\n\n// TODO よくわからん\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1033\nvoid merge_segments(vector< Segment >& segs) {\n\n    auto merge_if_able = [](Segment& s1, const Segment& s2) {\n        if (abs(cross(s1.b - s1.a, s2.b - s2.a)) > EPS) return false;\n        if (ccw(s1.a, s2.a, s1.b) == 1 || ccw(s1.a, s2.a, s1.b) == -1) return false;\n        if (ccw(s1.a, s1.b, s2.a) == -2 || ccw(s2.a, s2.b, s1.a) == -2) return false;\n        s1 = Segment(min(s1.a, s2.a), max(s1.b, s2.b));\n        return true;\n    };\n\n    for (int i = 0; i < segs.size(); i++) {\n        if (segs[i].b < segs[i].a) swap(segs[i].a, segs[i].b);\n    }\n    for (int i = 0; i < segs.size(); i++) {\n        for (int j = i + 1; j < segs.size(); j++) {\n            if (merge_if_able(segs[i], segs[j])) {\n                segs[j--] = segs.back(), segs.pop_back();\n            }\n        }\n    }\n}\n\n// TODO よくわからん\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1033\nvector< vector< int > > segment_arrangement(vector< Segment >& segs, vector< Point >& ps) {\n    vector< vector< int > > g;\n    int N = (int)segs.size();\n    for (int i = 0; i < N; i++) {\n        ps.emplace_back(segs[i].a);\n        ps.emplace_back(segs[i].b);\n        for (int j = i + 1; j < N; j++) {\n            const Point p1 = segs[i].b - segs[i].a;\n            const Point p2 = segs[j].b - segs[j].a;\n            if (cross(p1, p2) == 0) continue;\n            if (intersect(segs[i], segs[j])) {\n                ps.emplace_back(crosspoint(segs[i], segs[j]));\n            }\n        }\n    }\n    sort(begin(ps), end(ps));\n    ps.erase(unique(begin(ps), end(ps)), end(ps));\n\n    int M = (int)ps.size();\n    g.resize(M);\n    for (int i = 0; i < N; i++) {\n        vector< int > vec;\n        for (int j = 0; j < M; j++) {\n            if (intersect(segs[i], ps[j])) {\n                vec.emplace_back(j);\n            }\n        }\n        for (int j = 1; j < vec.size(); j++) {\n            g[vec[j - 1]].push_back(vec[j]);\n            g[vec[j]].push_back(vec[j - 1]);\n        }\n    }\n    return (g);\n}\n\n\n// 直線の進行方向の右側を残す\n// Polygon は反時計回りに与える\n// Line には一応向きがあるわけで\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_4_C\nPolygon convex_cut(const Polygon& U, Line l) {\n    Polygon ret;\n    for (int i = 0; i < U.size(); i++) {\n        Point now = U[i], nxt = U[(i + 1) % U.size()];\n        if (ccw(l.a, l.b, now) != -1) ret.push_back(now);\n        if (ccw(l.a, l.b, now) * ccw(l.a, l.b, nxt) < 0) {\n            ret.push_back(crosspoint(Line(now, nxt), l));\n        }\n    }\n    return (ret);\n}\n\n\n// 多角形の面積\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_3_A\nReal area2(const Polygon& p) {\n    Real A = 0;\n    for (int i = 0; i < p.size(); ++i) {\n        A += cross(p[i], p[(i + 1) % p.size()]);\n    }\n    return A;\n}\n\n// 多角形と円の共通部分の面積\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_7_H\nReal area2(const Polygon& p, const Circle& c) {\n    if (p.size() < 3) return 0.0;\n    function< Real(Circle, Point, Point) > cross_area = [&](const Circle& c, const Point& a, const Point& b) {\n        Point va = c.p - a, vb = c.p - b;\n        Real f = cross(va, vb), ret = 0.0;\n        if (eq(f, 0.0)) return ret;\n        if (max(abs(va), abs(vb)) < c.r + EPS) return f;\n        if (distance(Segment(a, b), c.p) > c.r - EPS) return c.r * c.r * arg(vb * conj(va));\n        auto u = crosspoint(c, Segment(a, b));\n        vector< Point > tot{ a, u.first, u.second, b };\n        for (int i = 0; i + 1 < tot.size(); i++) {\n            ret += cross_area(c, tot[i], tot[i + 1]);\n        }\n        return ret;\n    };\n    Real A = 0;\n    for (int i = 0; i < p.size(); i++) {\n        A += cross_area(c, p[i], p[(i + 1) % p.size()]);\n    }\n    return A;\n}\n\n// 凸多角形 g の直径を求めよ。ただし、凸多角形の直径とはその最遠頂点対間距離のことである.\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_4_B\nReal convex_diameter(const Polygon& p) {\n    int N = (int)p.size();\n    int is = 0, js = 0;\n    for (int i = 1; i < N; i++) {\n        if (p[i].imag() > p[is].imag()) is = i;\n        if (p[i].imag() < p[js].imag()) js = i;\n    }\n    Real maxdis = norm(p[is] - p[js]);\n\n    int maxi, maxj, i, j;\n    i = maxi = is;\n    j = maxj = js;\n    do {\n        if (cross(p[(i + 1) % N] - p[i], p[(j + 1) % N] - p[j]) >= 0) {\n            j = (j + 1) % N;\n        }\n        else {\n            i = (i + 1) % N;\n        }\n        if (norm(p[i] - p[j]) > maxdis) {\n            maxdis = norm(p[i] - p[j]);\n            maxi = i;\n            maxj = j;\n        }\n    } while (i != is || j != js);\n    return sqrt(maxdis);\n}\n\n\n// 平面上の n 個の点について、最も近い２点の距離.\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_5_A\nReal closest_pair(Points ps) {\n    if (ps.size() <= 1) throw (0);\n    sort(begin(ps), end(ps));\n\n    auto compare_y = [&](const Point& a, const Point& b) {\n        return imag(a) < imag(b);\n    };\n    vector< Point > beet(ps.size());\n    const Real INF = 1e18;\n\n    function< Real(int, int) > rec = [&](int left, int right) {\n        if (right - left <= 1) return INF;\n        int mid = (left + right) >> 1;\n        auto x = real(ps[mid]);\n        auto ret = min(rec(left, mid), rec(mid, right));\n        inplace_merge(begin(ps) + left, begin(ps) + mid, begin(ps) + right, compare_y);\n        int ptr = 0;\n        for (int i = left; i < right; i++) {\n            if (abs(real(ps[i]) - x) >= ret) continue;\n            for (int j = 0; j < ptr; j++) {\n                auto luz = ps[i] - beet[ptr - j - 1];\n                if (imag(luz) >= ret) break;\n                ret = min(ret, abs(luz));\n            }\n            beet[ptr++] = ps[i];\n        }\n        return ret;\n    };\n    return rec(0, (int)ps.size());\n}\n\nint main() {\n    Point p0, p1;\n    cin >> p0 >> p1;\n\n    int q;\n    cin >> q;\n\n    Line l = Line(p0, p1);\n\n    vector<string> ans(q);\n\n    for (int i = 0; i < q; ++i) {\n        Point p2;\n        cin >> p2;\n\n        int c = cross(p1 - p0, p2 - p0);\n        if (abs(c) > EPS) {\n            // p, p1, p2は同一直線上にない\n            if (c > 0) ans[i] = \"COUNTER_CLOCKWISE\";\n            else ans[i] = \"CLOCKWISE\";\n        }\n        else {\n            // 同一直線上\n            int d = dot(p1 - p0, p2 - p0);\n            if (d < 0) ans[i] = \"ONLINE_BACK\";\n            else if (norm(p1 - p0) >= norm(p2 - p0) - EPS) ans[i] = \"ON_SEGMENT\";\n            else ans[i] = \"ONLINE_FRONT\";\n        }\n    }\n\n    for (auto str : ans) {\n        cout << str << endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "//include\n//------------------------------------------\n#include <vector>\n#include <list>\n#include <map>\n#include <climits>\n#include <set>\n#include <deque>\n#include <stack>\n#include <bitset>\n#include <algorithm>\n#include <functional>\n#include <numeric>\n#include <utility>\n#include <sstream>\n#include <iostream>\n#include <iomanip>\n#include <cstdio>\n#include <cmath>\n#include <cstdlib>\n#include <cctype>\n#include <string>\n#include <cstring>\n#include <ctime>\n#include <queue>\n#include <random>\n#include <cctype>\n#include <complex>\n#include <regex>\n\nusing namespace std;\n\n#define C_MAX(a, b) ((a)>(b)?(a):(b))\n#define SHOW_VECTOR(v) {std::cerr << #v << \"\\t:\";for(const auto& xxx : v){std::cerr << xxx << \" \";}std::cerr << \"\\n\";}\n#define SHOW_MAP(v) {std::cerr << #v << endl; for(const auto& xxx: v){std::cerr << xxx.first << \" \" << xxx.second << \"\\n\";}}\n\n#define EPS 1e-8\n#define EQ(a, b) (abs((a)-(b)) < EPS)\n\ninline int signum(double x) { return (abs(x) < EPS ? 0 : x > 0 ? 1 : -1); }\n\ntypedef complex<double> P;\n\ndouble cross(P a, P b) {\n    return a.real() * b.imag() - a.imag() * b.real();\n}\n\ndouble dot(P a, P b) {\n    return a.real() * b.real() + a.imag() * b.imag();\n}\n\nint ccw(P p0, P p1, P p2) {\n    p1 -= p0;\n    p2 -= p0;\n    int sign = signum(cross(p1, p2));\n    if (sign != 0) return sign;\n    if (dot(p1, p2) < -EPS) return 2; //left\n    if (abs(p1) < abs(p2)) return -2; //right\n    return 0; //mid\n}\n\nbool is_parallel(P p0, P p1, P p2, P p3) {\n    P x = p1 - p0;\n    P y = p3 - p2;\n    return EQ(cross(x, y), 0.0);\n}\n\nbool is_orthogonal(P p0, P p1, P p2, P p3) {\n    P x = p1 - p0;\n    P y = p3 - p2;\n    return EQ(dot(x, y), 0.0);\n}\n\nint main() {\n    double xp0, yp0, xp1, yp1;\n    cin >> xp0 >> yp0 >> xp1 >> yp1;\n\n    P p0(xp0, yp0);\n    P p1(xp1, yp1);\n\n    int Q;\n    cin >> Q;\n\n    while (Q--) {\n\n        double xp, yp;\n        cin >> xp >> yp;\n\n        P p2(xp, yp);\n\n        int ans = ccw(p0, p1, p2);\n\n        string s = \"\";\n        if (ans == 1) s = \"COUNTER_CLOCKWISE\";\n        if (ans == -1) s = \"CLOCKWISE\";\n        if (ans == 2) s = \"ONLINE_BACK\";\n        if (ans == -2) s = \"ONLINE_FRONT\";\n        if (ans == 0) s = \"ON_SEGMENT\";\n\n        cout << s << endl;\n    }\n\n\n    return 0;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "language": "C++",
    "code": "////////////////////////////////////////////////////////////////////////////////\n// 平面幾何\n\n// 型変換できるもの\n//   double  -> Point\n//   Segment -> Line\n\n// 誤差の話：絶対誤差でも相対誤差でも死ぬ例\n// int main(){\n//   const double EPS = 1e-9;\n//   double a = 1.3, b = 1e8, c = a + b;\n//   c = c - b;\n//   printf(\"%d\\n\", equal(a, c));          // => 0\n//   printf(\"%d\\n\", relative_equal(a, c)); // => 0\n// }\n\n////////////////////\n// ライブラリ\n#include<cmath>\n#include<algorithm>\n#include<cassert>\n////////////////////\n// 定数\nconst double EPS = 1e-9;                // |EPS|未満の数は0として扱う\n////////////////////\n// 構造体\nstruct Point {\n  double x, y;\n  Point(const double d = 0.0) :x(d), y(d) {}\n  Point(const double x, const double y) :x(x), y(y) {}\n};\nstruct Segment {\n  Point initial, terminal;\n  Segment(const Point& initial, const Point& terminal) :initial(initial), terminal(terminal) {}\n  Segment(const double x1, const double y1, const double x2, const double y2) :initial(x1, y1), terminal(x2, y2) {}\n};\nstruct Line {\n  Point initial, terminal;\n  Line(const Point& initial, const Point& terminal) :initial(initial), terminal(terminal) {}\n  Line(const double x1, const double y1, const double x2, const double y2) :initial(x1, y1), terminal(x2, y2) {}\n  Line(const Segment& s) :initial(s.initial), terminal(s.terminal) {}\n};\n////////////////////\n// 実装\nbool relative_equal(const double d1, const double d2) {return d1 == 0 ? std::abs(d2) < EPS : std::abs((d1 - d2) / d1) < EPS;}\n// 演算子オーバーロード\nbool operator==(const Point& lhs, const Point& rhs) {return relative_equal(lhs.x, rhs.x) && relative_equal(lhs.y, rhs.y);}\nbool operator<(const Point& lhs, const Point& rhs) {return lhs.x != rhs.x ? lhs.x < rhs.x : lhs.y < rhs.y;}\nbool operator>(const Point& lhs, const Point& rhs) {return lhs.x != rhs.x ? lhs.x > rhs.x : lhs.y > rhs.y;}\nbool operator!=(const Point& lhs, const Point& rhs) {return !(lhs == rhs);}\nbool operator<=(const Point& lhs, const Point& rhs) {return !(lhs > rhs);}\nbool operator>=(const Point& lhs, const Point& rhs) {return !(lhs < rhs);}\nconst Point operator+(const Point& lhs, const Point& rhs) {return Point(lhs.x + rhs.x, lhs.y + rhs.y);}\nconst Point operator-(const Point& lhs, const Point& rhs) {return Point(lhs.x - rhs.x, lhs.y - rhs.y);}\nconst Point operator*(const Point& lhs, const Point& rhs) {return Point(lhs.x * rhs.x, lhs.y * rhs.y);}\nconst Point operator/(const Point& lhs, const Point& rhs) {return Point(lhs.x / rhs.x, lhs.y / rhs.y);}\nconst Point operator-(const Point& p) {return Point(-p.x, -p.y);}\n// 点\ndouble abs(const Point& p) {return std::hypot(p.x, p.y);}\ndouble norm(const Point& p) {return p.x * p.x + p.y * p.y;}\ndouble dot(const Point& a, const Point& b) {return a.x * b.x + a.y * b.y;}\ndouble cross(const Point& a, const Point& b) {return a.x * b.y - a.y * b.x;}\n// const Point normalize(const Point& p) {return p / abs(p);}\n// 線\nbool parallel(const Line& l1, const Line& l2) {return std::abs(cross(l2.terminal - l2.initial, l1.terminal - l1.initial)) < EPS;}\nbool orthogonal(const Line& l1, const Line& l2) {return std::abs(dot(l2.terminal - l2.initial, l1.terminal - l1.initial)) < EPS;}\n// 点の位置関係\nenum POSITION {ONLINE_FRONT = -2, CLOCKWISE, ON_SEGMENT, COUNTER_CLOCKWISE, ONLINE_BACK}; \nPOSITION ccw(const Point& a, const Point& b, const Point& p) {\n  Point v1 = b - a;\n  Point v2 = p - a;\n  if(cross(v1, v2) >= EPS) return COUNTER_CLOCKWISE;\n  if(cross(v1, v2) <= -EPS) return CLOCKWISE;\n  if(dot(v1, v2) <= -EPS) return ONLINE_BACK;\n  if(norm(v1) < norm(v2)) return ONLINE_FRONT;              // 誤差怖い\n  return ON_SEGMENT;\n}\n// 交差判定\nbool intersect(const Point& p1, const Point& p2) {return p1 == p2;}\nbool intersect(const Point& p, const Segment& s) {return abs(p - s.initial) + abs(p - s.terminal) - abs(s.initial - s.terminal) <= EPS;}\nbool intersect(const Segment& s, const Point& p) {return intersect(p, s);}\nbool intersect(const Point& p, const Line& l) {return !parallel(Line(p, l.initial), Line(p, l.terminal));}\nbool intersect(const Line& l, const Point& p) {return intersect(p, l);}\nbool intersect(const Segment& s1, const Segment& s2) {\n  return ccw(s1.initial, s1.terminal, s2.initial) * ccw(s1.initial, s1.terminal, s2.terminal) <= 0\n      && ccw(s2.initial, s2.terminal, s1.initial) * ccw(s2.initial, s2.terminal, s1.terminal) <= 0;\n}\nbool intersect(const Segment& s, const Line& l) {\n  auto v1 = l.terminal - l.initial;\n  auto v2 = s.initial  - l.initial;\n  auto v3 = s.terminal - l.initial;\n  return cross(v1, v2) * cross(v1, v3) <= EPS;\n}\nbool intersect(const Line& l, const Segment& s) {return intersect(s, l);}\nbool intersect(const Line& l1, const Line& l2) {return !parallel(l1, l2) || intersect(l1.initial, l2);}\n// 点の移動\nPoint projection(const Point& p, const Line& l) {\n  auto v = l.initial - l.terminal;\n  return l.initial + dot(p - l.initial, v) / norm(v) * v;\n}\nPoint projection(const Line& l, const Point& p) {return projection(p, l);}\nPoint reflection(const Point& p, const Line& l) {return p + 2 * (projection(p, l) - p);}\nPoint reflection(const Line& l, const Point& p) {return reflection(p, l);}\n// 距離\ndouble distance(const Point& p1, const Point& p2) {\n  auto p = p1 - p2;\n  return hypot(p.x, p.y);\n}\ndouble distance(const Point& p, const Segment& s) {\n  auto r = projection(s, p);\n  return intersect(r, s) ? distance(p, r) : std::min(distance(p, s.initial), distance(p, s.terminal));\n}\ndouble distance(const Segment& s, const Point& p) {return distance(p, s);}\ndouble distance(const Point& p, const Line& l) {return distance(p, projection(p, l));}\ndouble distance(const Line& l, const Point& p) {return distance(p, l);}\ndouble distance(const Segment& s1, const Segment& s2) {\n  return intersect(s1, s2) ? 0.0 : std::min({distance(s1, s2.initial), distance(s1, s2.terminal), distance(s2, s1.initial), distance(s2, s1.terminal)});\n}\ndouble distance(const Segment& s, const Line& l) {return intersect(s, l) ? 0.0 : std::min(distance(s.initial, l), distance(s.terminal, l));}\ndouble distance(const Line& l,const Segment& s) {return distance(s, l);}\ndouble distance(const Line& l1, const Line& l2) {return intersect(l1, l2) ? 0.0 : distance(l1.initial, l2);}\n// 交点\nconst Point crosspoint(const Line& l1, const Line& l2) {\n  assert(intersect(l1, l2));\n  if(parallel(l1, l2)) return l1.initial;                   // 平行なときl1の始点を返す\n  double A = cross(l1.terminal - l1.initial, l2.terminal - l2.initial);\n  double B = cross(l1.terminal - l1.initial, l1.terminal - l2.initial);\n  return l2.initial + B / A * (l2.terminal - l2.initial);\n}\nconst Point crosspoint(const Segment& s, const Line& l) {\n  assert(intersect(s, l));\n  if(parallel(s, l)) return s.initial;\n  Point cp = crosspoint(Line(s), l);\n  assert(intersect(s, cp));\n  return cp;\n}\nconst Point crosspoint(const Line& l, const Segment& s) {return crosspoint(s, l);}\nconst Point crosspoint(const Segment& s1, const Segment& s2) {\n  assert(intersect(s1, s2));\n  if(parallel(s1, s2)) {                                    // 平行なときいずれかの端点を返す\n    if(intersect(s1.initial,  s2)) return s1.initial;\n    if(intersect(s1.terminal, s2)) return s1.terminal;\n    if(intersect(s2.initial,  s1)) return s2.initial;\n    if(intersect(s2.terminal, s1)) return s2.terminal;\n  }\n  return crosspoint(Line(s1), Line(s2));\n}\n// デバッグ用\n#include<bits/stdc++.h>\nusing namespace std;\nvoid print(const Point& p) {cout<<\"point: \"; cout<<\"(\"<<p.x<<\",\"<<p.y<<\")\";}\nvoid print(const Segment& l) {cout<<\"segment: \"; print(l.initial); cout<<\"to\"; print(l.terminal);}\nvoid print(const Line& l) {cout<<\"line: \"; print(l.initial); cout<<\"to\"; print(l.terminal);}\n////////////////////////////////////////////////////////////////////////////////\n// 多角形\n//   辺をメンバ変数にしない→メモリ節約・edge(void)がO(頂点数)。edge().begin()を使っている箇所は書き換える必要がある\n#include<vector>\n#include<algorithm>\n#include<numeric>\n#include<utility>\nclass Polygon {\npublic:\n  // 編集\n  void add(const Point& p) {\n    if(!vertex_.empty()) {\n      if(!edge_.empty()) edge_.pop_back();\n      edge_.push_back(Segment(vertex_.back(), p));\n      edge_.push_back(Segment(p, vertex_.front()));\n    }\n    vertex_.push_back(p);\n  }\n  void clear() {\n    vertex_.clear();\n    edge_.clear();\n  };\n  // 情報\n  int size() const {return vertex_.size();}\n  Point vertex(const int n) const {return vertex_.at(n);}\n  Segment edge(const int n) const {return edge_.at(n);}\n  const std::vector<Point>& vertex() const {return vertex_;}\n  const std::vector<Segment>& edge() const {return edge_;}\n  // 道具\n  bool touch(const Point& p) const {\n    return std::any_of(edge().begin(), edge().end(), [=](const Segment& s) {return ccw(s.initial, s.terminal, p) == ON_SEGMENT;});\n  }\n  bool intersect(const Point& p) const {\n    bool in = false;                    // p=(x,y)から(INF,y)への半直線と多角形とが交差する回数 mod 2\n    for(const auto& e: edge()) {\n      if(::intersect(p, e)) return true;\n      Point a = e.initial  - p;\n      Point b = e.terminal - p;\n      if(a.y > b.y) std::swap(a, b);\n      if(a.y < EPS && EPS <= b.y && cross(a, b) < EPS) in = !in;\n    }\n    return in;\n  }\n  double area() const {\n    return std::abs(std::accumulate(edge().begin(), edge().end(), 0, [=](const int sum, const Segment& e){return sum + cross(e.initial, e.terminal);})) / 2.0;\n  }\n  bool convex() const {\n    bool positive = false;\n    bool negative = false;\n    for(int i = 0; i < size(); ++i) {\n      auto position = ccw(vertex(i), vertex((i + 1) % size()), vertex((i + 2) % size()));\n      positive |= position == CLOCKWISE;\n      negative |= position == COUNTER_CLOCKWISE;\n      if(negative && positive) return false;\n    }\n    return true;\n  }\nprivate:\n  std::vector<Point> vertex_;\n  std::vector<Segment> edge_;\n};\n////////////////////////////////////////////////////////////////////////////////\n#include<bits/stdc++.h>\nusing namespace std;\nint main() {\n  // Points/Vectors\n  Point p1, p2;\n  cin >> p1.x >> p1.y >> p2.x >> p2.y;\n  int q;\n  for(cin >> q; q > 0; --q) {\n    int x, y;\n    cin >> x >> y;\n    // A\n//     Point p = projection(Line(p1, p2), Point(x, y));\n//     cout << setprecision(10) << fixed << p.x << \" \" << p.y << endl;\n    // B\n//     Point p = reflection(Line(p1, p2), Point(x, y));\n//     cout << setprecision(10) << fixed << p.x << \" \" << p.y << endl;\n    // C\n    switch(ccw(p1, p2, Point(x, y))) {\n    case COUNTER_CLOCKWISE:\n      cout << \"COUNTER_CLOCKWISE\" << endl;\n      break;\n    case CLOCKWISE:\n      cout << \"CLOCKWISE\" << endl;\n      break;\n    case ONLINE_BACK:\n      cout << \"ONLINE_BACK\" << endl;\n      break;\n    case ONLINE_FRONT:\n      cout << \"ONLINE_FRONT\" << endl;\n      break;\n    case ON_SEGMENT:\n      cout << \"ON_SEGMENT\" << endl;\n      break;\n    }\n  }\n\n  // Segments/Lines\n//   int n;\n//   for(cin >> n; n > 0; --n) {\n//     int a, b, c, d, e, f, g, h;\n//     cin >> a >> b >> c >> d >> e >> f >> g >> h;\n//     Segment s(Point(a, b), Point(c, d));\n//     Segment t(Point(e, f), Point(g, h));\n//     // A\n// //     cout << (parallel(s, t) ? 2 : (orthogonal(s, t) ? 1 : 0)) << endl;\n//     // B\n// //     cout << (intersect(s, t) ? 1 : 0) << endl;\n//     // C\n// //     auto cp = crosspoint(s, t);\n// //     cout << setprecision(10) << fixed << cp.x << \" \" << cp.y << endl;\n//     // D\n// //     cout << setprecision(10) << fixed << distance(s, t) << endl;\n//   }\n\n  // Polygon\n//   int n;\n//   Polygon polygon;\n//   for(cin >> n; n > 0; --n) {\n//     int x, y;\n//     cin >> x >> y;\n//     polygon.add(Point(x, y));\n//   }\n//   // A\n// //   cout << setprecision(1) << fixed  << polygon.area() << endl;\n//   // B\n// //   cout << (polygon.convex() ? 1 : 0) << endl;\n//   // C\n//   int q;\n//   for(cin >> q; q > 0; --q) {\n//     int x, y;\n//     cin >> x >> y;\n//     Point p(x, y);\n//     cout << (polygon.touch(p) ? 1 : (polygon.intersect(p) ? 2 : 0)) << endl;\n//   }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <stdio.h>\n#include <math.h>\n\n#define MINV 1.0E-15\n\nusing namespace std;\n\nclass Point {\npublic:\n    double _x, _y;\n    Point(): _x(0), _y(0){}\n    Point(double x, double y): _x(x), _y(y){}\n    Point(const Point& a): _x(a._x), _y(a._y){}\n\n    Point operator+(const Point& a) const{\n        return Point(_x + a._x, _y + a._y);\n    }\n    Point operator-(const Point& a) const{\n        return Point(_x - a._x, _y - a._y);\n    }\n    Point operator*(double& a) const{\n        return Point(_x*a, _y*a);\n    }\n    Point operator/(double& a) const{\n        return Point(_x/a, _y/a);\n    }\n    void operator=(const Point& a){\n        _x = a._x;\n        _y = a._y;\n    }\n    double dot(const Point& a) const{\n        return (_x*a._x + _y*a._y);\n    }\n    double norm() const{\n        return sqrt(_x*_x + _y*_y);\n    }\n};\n\nPoint operator*(double a, const Point& vec){\n    return vec*a;\n}\nPoint operator/(double a, const Point& vec){\n    return vec/a;\n}\n\ndouble cross(const Point& p0, const Point& p1){\n    return p0._x * p1._y - p0._y*p1._x;\n}\n\nint ccw(Point a, Point b){\n    double ret=cross(a,b);\n    if(ret > MINV){\n        return 1;\n    }else if( (-ret) > MINV ){\n        return 2;\n    }\n    if(a.dot(b) < 0) return 3;\n    if(a.norm() < b.norm()){\n        return 4;\n    }else{\n        return 5;\n    }\n\n}\n\ntypedef Point Vec;\n\nint main(){\n    double x0,y0,x1,y1,x2,y2;\n    scanf(\"%lf %lf %lf %lf\", &x0, &y0, &x1, &y1);\n    Vec p0(x0,y0), p1(x1,y1), a(p1-p0), p2;\n\n    int q;\n    scanf(\"%d\",&q);\n\n    for(int i=0; i<q; ++i){\n        scanf(\"%lf %lf\",&x2,&y2);\n        p2 = Vec(x2,y2);\n        int ret = ccw(a,p2-p0);\n        switch(ret){\ncase 1:\n            cout << \"COUNTER_CLOCKWISE\" << endl;\n            break;\ncase 2:\n            cout << \"CLOCKWISE\" << endl;\n            break;\ncase 3:\n            cout << \"ONLINE_BACK\" << endl;\n            break;\ncase 4:\n            cout << \"ONLINE_FRONT\" << endl;\n            break;\ncase 5:\n            cout << \"ON_SEGMENT\" << endl;\n            break;\n        }\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<vector>\nusing namespace std;\n\n#define EPS 0.0000000001\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nclass Point{\n\tpublic:\n\t\tdouble x, y;\n\n\t\tPoint(double x = 0, double y = 0): x(x), y(y) {}\n\n\t\tPoint operator + (Point p){ return Point(x + p.x, y + p.y);}\n\t\tPoint operator - (Point p){ return Point(x - p.x, y - p.y);}\n\t\tPoint operator * (double a){ return Point(a * x, a * y);}\n\t\tPoint operator / (double a){ return Point(x / a, y / a);}\n\n\t\tdouble abs(){ return sqrt(norm());}\n\t\tdouble norm(){ return x * x + y * y;}\n\n\t\tbool operator < (const Point &p) const{\n\t\t\treturn x != p.x ? x < p.x : y < p.y;\n\t\t}\n\n\t\tbool operator == (const Point &p) const{\n\t\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t\t}\n};\n\nstruct Segment {\n\tPoint p1, p2;\n};\ntypedef Segment Line;\n\nclass Circle{\n\tpublic:\n\t\tPoint c;\n\t\tdouble r;\n\t\tCircle(Point c = Point(), double r = 0.0): c(c), r(r) {}\n};\n\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\ndouble dot(Vector a, Vector b){\n\treturn a.x * b.x + a.y * b.y;\n}\ndouble cross(Vector a, Vector b){\n\treturn a.x * b.y - a.y * b.x;\n}\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nint ccw(Point p0, Point p1, Point p2){\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif(cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif(cross(a, b) < -EPS) return CLOCKWISE;\n\tif(dot(a, b) < -EPS) return ONLINE_BACK;\n\tif(a.norm() < b.norm()) return ONLINE_FRONT;\n\n\treturn ON_SEGMENT;\n}\n\nint main(void){\n\tPoint p0, p1, p2;\n\tint q;\n\tcin >> p0.x >> p0.y >> p1.x >> p1.y;\n\tcin >> q;\n\tfor(int i=1;i<=q;i++){\n\t\tcin >> p2.x >> p2.y;\n\t\tswitch(ccw(p0, p1, p2)){\n\t\t\tcase 1:\n\t\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t\t\tbreak;\n\t\t\tcase -1:\n\t\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t\t\tbreak;\n\t\t\tcase -2:\n\t\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t\t\tbreak;\n\t\t\tcase 0:\n\t\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <stdio.h>\n#include <vector>\n#include <math.h>\n#include <algorithm>\n\n\nusing namespace std;\n\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a) - (b)) < EPS) //?????????????????????????????????\n\n//??????p0,p1,p2????????????\n#define COUNTER_CLOCKWISE 1 //???????????§???????¨????????????´???\n#define CLOCKWISE  -1 //???????????§????¨????????????´???\n#define ONLINE_BACK 2 //p2,p0,p1??????????????§????????´?????????????????¨???\n#define ONLINE_FRONT -2//???????????§????????´?????????????????¨???\n#define ON_SEGMENT 0 //p2?????????p0 p1??????????????¨???\n\n\n//??????????????????????????????\nclass Point {\n\npublic:\n\n\tdouble x, y;//??§?¨????????????????x,y??????\n\n\tPoint(double x = 0, double y = 0) :x(x), y(y) {}\n\n\tPoint operator + (Point p) {\n\t\treturn Point(x + p.x, y + p.y);\n\t}\n\n\tPoint operator - (Point p) {\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n\n\tPoint operator * (double r) {\n\t\treturn Point(x * r, y * r);\n\t}\n\n\tPoint operator / (double r) {\n\t\treturn Point(x / r, y / r);\n\t}\n\n\tdouble norm() {\n\t\treturn x*x + y*y;\n\t}\n\n\t//?????????????????§???????????????\n\tdouble abs() {\n\t\treturn sqrt(norm());\n\t}\n\n\tbool operator < (const Point &p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p) const {\n\t\treturn fabs(x - p.x) < EPS &&  fabs(y - p.y) < EPS;\n\t}\n\n};\n\ntypedef Point Vector;\n\n//??????????????????????????????\ndouble dot(Vector a, Vector b) {\n\treturn a.x * b.x + a.y * b.y;\n}\n\n//??????????????????????????????\ndouble cross(Vector a, Vector b) {\n\treturn a.x * b.y - a.y * b.x;\n}\n\n\n\nclass Segment {\npublic:\n\tPoint p1, p2;\n\n\tSegment() {}\n\n\t//?????¨????°???±?????????\n\tPoint projection(Point p) {\n\t\tVector base = p2 - p1;\n\n\t\tdouble r = dot(p - p1, base) / base.norm();\n\t\treturn p1 + base * r;\n\t}\n\n\t//????°??????????\n\tPoint reflection(Point p) {\n\t\treturn p + (projection(p) - p)*2.0;\n\t}\n\n\n};\n\n\ntypedef Segment Line;\n\ntypedef vector<Point> Polygon;\n\n\n//?????????????????´?????????\nbool isOrthogonal(Vector a, Vector b);\n\n//??????????§??????¨?????????????????´?????????\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2);\n\n//???????????´?????????\nbool isOrthogonal(Segment s1, Segment s2);\n\n//???????????????????????????\nbool isParallel(Vector a, Vector b);\n\n//??????????§??????¨???????????????????????????\nbool isParallel(Point a1, Point a2, Point b1, Point b2);\n\n//?????????????????????\nbool isParallel(Segment s1, Segment s2);\n\n//?°???±?????????\nPoint projection(Segment s, Point p);\n\n//????°??????????\nPoint reflection(Segment s, Point p);\n\n//2??????????????¢?????????\ndouble getDistance(Point a, Point b);\n\n//??´?????¨???????????¢?????????\ndouble getDistanceLP(Line l, Point p);\n\n//????????¨???????????¢?????????\ndouble getDistanceSP(Segment s, Point p);\n\n//??????s1??¨??????s2????????¢?????????\ndouble getDistance(Segment s1, Segment s2);\n\n\n//???????????¢????????????\nint ccw(Point p0, Point p1, Point p2);\n\n//??????p1p2??¨??????p2p3???????????????\nbool intersect(Point p1, Point p2, Point p3, Point p4);\n\n//??????s1??¨??????s2???????????????\nbool intersect(Segment s1, Segment s2);\n\n\n\n//?????????????????´?????????\nbool isOrthogonal(Vector a, Vector b) {\n\treturn equals(dot(a, b), 0.0);\n}\n\n//??????????§??????¨?????????????????´?????????\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n\treturn isOrthogonal(a1 - a2, b1 - b2);\n}\n\n//???????????´?????????\nbool isOrthogonal(Segment s1, Segment s2) {\n\treturn equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n//???????????????????????????\nbool isParallel(Vector a, Vector b) {\n\treturn equals(cross(a, b), 0.0);\n}\n\n//??????????§??????¨???????????????????????????\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n\treturn isParallel(a1 - a2, b1 - b2);\n}\n\n//?????????????????????\nbool isParallel(Segment s1, Segment s2) {\n\treturn equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n//?°???±?????????\nPoint projection(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / base.norm();\n\treturn s.p1 + base * r;\n}\n\n//????°??????????\nPoint reflection(Segment s, Point p) {\n\treturn p + (projection(s, p) - p)*2.0;\n}\n\n//2??????????????¢?????????\ndouble getDistance(Point a, Point b) {\n\treturn (a - b).abs();\n}\n\n//??´?????¨???????????¢?????????\ndouble getDistanceLP(Line l, Point p) {\n\treturn fabs(cross(l.p2 - l.p1, p - l.p1) / (l.p2 - l.p1).abs());\n}\n\n//????????¨???????????¢?????????\ndouble getDistanceSP(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0) {\n\t\treturn (p - s.p1).abs();\n\t}\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0) {\n\t\treturn (p - s.p2).abs();\n\t}\n\n\treturn getDistanceLP(s, p);\n}\n\n//??????s1??¨??????s2????????¢?????????\ndouble getDistance(Segment s1, Segment s2) {\n\n\tif (intersect(s1, s2)) {\n\t\treturn 0.0;\n\t}\n\treturn min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)), min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\n\n//???????????¢????????????\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\n\tif (cross(a, b) > EPS) {//???????¨?????????????\n\t\treturn COUNTER_CLOCKWISE;\n\t}\n\tif (cross(a, b) < -EPS) {//????¨?????????????\n\t\treturn CLOCKWISE;\n\t}\n\tif (dot(a, b) < -EPS) {//p2,p0,p1??????????????§????????´?????????????????????\n\t\treturn ONLINE_BACK;\n\t}\n\tif (a.norm() < b.norm()) {//p0,p1,p2??????????????§????????´?????????????????????\n\t\treturn ONLINE_FRONT;\n\t}\n\n\treturn ON_SEGMENT;//??????p0 p1??????p2???????????????\n\n}\n\n//??????p1p2??¨??????p2p3???????????????\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n\treturn ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 && ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0;\n}\n\n//??????s1??¨??????s2???????????????\nbool intersect(Segment s1, Segment s2) {\n\treturn intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\n\n\n\n\n\n\n//???\nclass Circle {\npublic:\n\tPoint c;//??????\n\tdouble r;//??????\n\tCircle(Point c = Point(), double r = 0.0) :c(c), r(r) {}\n};\n\n\nint main(void)\n{\n\tint n;\n\n\tPoint p0, p1, p2;\n\n\tcin >> p0.x >> p0.y >> p1.x >> p1.y;\n\tcin >> n;\n\n\tfor (int i = 0; i < n; i++) {\n\t\tcin >> p2.x >> p2.y;\n\n\t\tswitch (ccw(p0,p1,p2))\n\t\t{\n\t\t\tcase ONLINE_FRONT:\n\t\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t\t\tbreak;\n\n\t\t\tcase CLOCKWISE:\n\t\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\t\t\tbreak;\n\n\t\t\tcase ON_SEGMENT:\n\t\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t\t\tbreak;\n\n\t\t\tcase COUNTER_CLOCKWISE:\n\t\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t\t\tbreak;\n\n\t\t\tcase ONLINE_BACK:\n\t\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <complex>\n#include <cstdio>\n#include <map>\n\nusing namespace std;\n\n#define REP(i,n) for(int i = 0; i < (int)(n); ++i)\n#define FOR(i,a,b) for(int i = (a); i < (int)(b); ++i)\n#define ALL(c) (c).begin(), (c).end()\n#define SIZE(v) ((int)v.size())\n\ntypedef complex<double> P;\n\n// ??????\ndouble dot(const P& a, const P& b) {\n    return real(conj(a)*b);\n}\n\n// ??????\ndouble cross(const P& a, const P& b) {\n    return imag(conj(a)*b);\n}\n\n// ???p2?????????p0, p1???????????´???????°???±?????????\nP projection(const P& p0, const P& p1, const P& p2) {\n    // ???????????????????????´???\n    P vec1 = p1 - p0;\n    P vec2 = p2 - p0;\n    return p0 + vec1 * dot(vec1, vec2) / dot(vec1, vec1);\n}\n\n// ???p0, p1???????????´??????????§°?????¨????????????p2??¨????§°??????\nP reflection(const P& p0, const P& p1, const P& p2) {\n    P proj = projection(p0, p1, p2);\n    return proj - (p2 - proj);\n}\n\nint ccw(P a, P b, P c) {\n    b -= a; c -= a;\n    if (cross(b, c) > 0)   return +1;       // counter clockwise\n    if (cross(b, c) < 0)   return -1;       // clockwise\n    if (dot(b, c) < 0)     return +2;       // c--a--b on line\n    if (norm(b) < norm(c)) return -2;       // a--b--c on line\n    return 0;\n}\n\n// // ????????¨???P??¨??????????????????????????¢\n// double norm(const P& a, const P& b) {\n//     return dot(\n//     return real(conj(a)*b);\n// }\n\nint main(){\n    double x0, y0, x1, y1;\n    int Q;\n\n    cin >> x0 >> y0 >> x1 >> y1;\n    \n    P p0(x0, y0);\n    P p1(x1, y1);\n\n    cin >> Q;\n    REP(q, Q) {\n        double x2, y2;\n        cin >> x2 >> y2;\n        P p2(x2, y2);\n        auto ret = ccw(p0, p1, p2);\n        map<int, string> table{\n            {+1, \"COUNTER_CLOCKWISE\"},\n            {-1, \"CLOCKWISE\"},\n            {+2, \"ONLINE_BACK\"},\n            {-2, \"ONLINE_FRONT\"}\n        };\n        cout << table[ret] << endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<iomanip>\n#include<algorithm>\n#include<bitset>\n#include<cctype>\n#include<cmath>\n#include<cstdio>\n#include<cstring>\n#include<functional>\n#include<limits>\n#include<list>\n#include<map>\n#include<set>\n#include<stack>\n#include<string>\n#include<sstream>\n#include<queue>\n#include<vector>\nusing namespace std;\n\n#define MOD 1000000007\n#define INF 0x3f3f3f3f\n#define INFL 0x3f3f3f3f3f3f3f3fLL\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n\n//0?¬?\nclass Point {\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0) :x(x), y(y) {}\n\n\tPoint operator+(Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator-(Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator*(double a) { return Point(a * x, a * y); }\n\tPoint operator/(double a) { return Point(x / a, y / a); }\n\tbool operator<(const Point &p)const { return x != p.x ? x < p.x : y < p.y; }\n\tbool operator==(const Point &p)const { return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS; }\n\n\tdouble abs() { return sqrt(norm()); }\n\tdouble norm() { return x*x + y*y; }\n\n};\n\n//1?¬?\ntypedef Point Vector;\n\nclass Segment {\npublic:\n\tPoint p1, p2;\n\tSegment(Point p1 = Point(), Point p2 = Point(1, 1)) :p1(p1), p2(p2) {}\n};\ntypedef Segment Line;\n\n//2?¬?\nclass Circle {\npublic:\n\tPoint c; //center\n\tdouble r; //radius\n\tCircle(Point c = Point(), double r = 0.0) :c(c), r(r) {}\n};\ntypedef vector<Point> Polygon;\n\n//??????\ndouble dot(Vector a, Vector b) { return a.x*b.x + a.y*b.y; }\n//??????\ndouble cross(Vector a, Vector b) { return a.x*b.y - a.y*b.x; }\n\n//??´?????????\nbool isOrthogonal(Vector a, Vector b) { return equals(dot(a, b), 0.0); }\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) { return isOrthogonal(a1 - a2, b1 - b2); }\nbool isOrthogonal(Segment s1, Segment s2) { return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0); }\n\n//????????????\nbool isParallel(Vector a, Vector b) { return equals(cross(a, b), 0.0); }\nbool isParallel(Point a1, Point a2, Point b1, Point b2) { return isParallel(a1 - a2, b1 - b2); }\nbool isParallel(Segment s1, Segment s2) { return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0); }\n\n//?°???±\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / base.norm();\n\treturn s.p1 + base*r;\n}\n//????°?\nPoint reflect(Segment s, Point p) { return p + (project(s, p) - p)*2.0; }\n\n//??????(p0,p1)????????????p2???????????¢???\nenum { ONLINE_FRONT = -2, CLOCKWISE, ON_SEGMENT, COUNTER_CLOCKWISE, ONLINE_BACK };\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0, b = p2 - p0;\n\tif (cross(a, b) > EPS)return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS)return CLOCKWISE;\n\tif (dot(a, b) < -EPS)return ONLINE_BACK;\n\tif (a.norm() < b.norm())return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\n//?????????????????????\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n\treturn (ccw(p1, p2, p3)*ccw(p1, p2, p4) <= 0 &&\n\t\tccw(p3, p4, p1)*ccw(p3, p4, p2) <= 0);\n}\nbool intersect(Segment s1, Segment s2) { return intersect(s1.p1, s1.p2, s2.p1, s2.p2); }\n//???????????????\nPoint getCrossPoint(Segment s1, Segment s2) {\n\tVector base = s2.p2 - s2.p1;\n\tdouble a1 = abs(cross(base, s1.p1 - s2.p1)); //area1\n\tdouble a2 = abs(cross(base, s1.p2 - s2.p1)); //area2\n\tdouble t = a1 / (a1 + a2);\n\treturn s1.p1 + (s1.p2 - s1.p1)*t;\n}\n\n//2??????????????¢\ndouble getDistance(Point a, Point b) { return (a - b).abs(); }\n//??´?????¨???????????¢\ndouble getDistanceLP(Line l, Point p) { return abs(cross(l.p2 - l.p1, p - l.p1) / (l.p2 - l.p1).abs()); }\n//????????¨???????????¢\ndouble getDistanceSP(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0)return (p - s.p1).abs();\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0)return (p - s.p2).abs();\n\treturn getDistanceLP(s, p);\n}\n//????????¨??????????????¢\ndouble getDistance(Segment s1, Segment s2) {\n\tif (intersect(s1, s2))return 0.0;\n\treturn\tmin(\n\t\tmin(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n\t\tmin(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2))\n\t);\n}\n\nint main() {\n\tPoint p[3];\n\tcin >> p[0].x >> p[0].y >> p[1].x >> p[1].y;\n\tint q; cin >> q;\n\tfor (int i = 0; i < q; i++) {\n\t\tscanf(\"%lf%lf\", &p[2].x, &p[2].y);\n\t\tswitch (ccw(p[0], p[1], p[2])) {\n\t\tcase ONLINE_BACK:\n\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t\tbreak;\n\t\tcase CLOCKWISE:\n\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\t\tbreak;\n\t\tcase ON_SEGMENT:\n\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t\tbreak;\n\t\tcase COUNTER_CLOCKWISE:\n\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t\tbreak;\n\t\tcase ONLINE_FRONT:\n\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tcout << \"ERROR\" << endl;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#include <math.h>\n#include <iostream>\n#include <iomanip>\nusing namespace std;\n\nint main() {\n\tcin.tie(0); ios::sync_with_stdio(false);\n\tint x0, y0, x1, y1; cin >> x0 >> y0 >> x1 >> y1;\n\tint X1 = x1 - x0, Y1 = y1 - y0;\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tint x2, y2; cin >> x2 >> y2;\n\t\tint X2 = x2 - x0, Y2 = y2 - y0;\n\t\tint cross = X1*Y2 - Y1*X1;\n\t\tif (cross > 0) { cout << \"COUNTER_CLOCKWISE\" << endl; continue; }\n\t\tif (cross < 0) { cout << \"CLOCKWISE\" << endl; continue; }\n\t\t//??????????????§cross == 0 ?????????????¢????\n\t\tint vertical = X1*X2 + Y1*Y2;\n\t\tif (vertical < 0) { cout << \"ONLINE_BACK\" << endl; continue; }\n\t\tif (X2*X2 + Y2*Y2 > X1*X1 + Y1*Y1) { cout << \"ONLINE_FRONT\" << endl; continue; }\n\t\tcout << \"ON_SEGMENT\" << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <complex>\nusing namespace std;\n \n#define X real()\n#define Y imag()\n#define EPS (1e-10)\n \ntypedef complex<double> P;\ntypedef P Vec;\n \ndouble dot(Vec v1, Vec v2) {\n  return (v1*conj(v2)).X;\n}\n \ndouble cross(Vec v1, Vec v2) {\n  return (v1*conj(v2)).Y;\n}\n \nenum { COUNTER_CLOCKWISE, CLOCKWISE, ONLINE_FRONT, ONLINE_BACK, ON_SEGMENT};\n \nint ccw(P p0, P p1, P p2) {\n  Vec a = p1 - p0;\n  Vec b = p2 - p0;\n  if(cross(a, b) > EPS) return CLOCKWISE;\n  if(cross(a, b) < -EPS) return COUNTER_CLOCKWISE;\n  if(dot(a, b) < -EPS) return ONLINE_BACK;\n  if(norm(a) < norm(b)) return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\n \nvoid putResult(int x) {\n  if(x == COUNTER_CLOCKWISE) cout << \"COUNTER_CLOCKWISE\" << endl;\n  if(x == CLOCKWISE) cout << \"CLOCKWISE\" << endl;\n  if(x == ONLINE_FRONT) cout << \"ONLINE_FRONT\" << endl;\n  if(x == ONLINE_BACK) cout << \"ONLINE_BACK\" << endl;\n  if(x == ON_SEGMENT) cout << \"ON_SEGMENT\" << endl;\n}\n \nint main() {\n  double x, y;\n  P p0, p1;\n   \n  cin >> x >> y; p0 = P(x, y);\n  cin >> x >> y; p1 = P(x, y);\n   \n  int n;\n  cin >> n;\n  for(int i=0; i<n; i++) {\n    cin >> x >> y;\n    P p2 = P(x, y);\n     \n    putResult( ccw(p0, p1, p2) );\n  }\n   \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#define EPS (1e-10)\n#include <cmath>\n#include <iostream>\n#include <iomanip>\nusing namespace std;\n\nint main() {\n\tcin.tie(0); ios::sync_with_stdio(false);\n\tint x0, y0, x1, y1; cin >> x0 >> y0 >> x1 >> y1;\n\tint q; cin >> q;\n\tlong double theta1, theta2;\n\ttheta1 = atan2(y1 - y0, x1 - x0);\n\twhile (q--) {\n\t\tint x2, y2; cin >> x2 >> y2;\n\t\ttheta2 = atan2(y2 - y0, x2 - x0);\n\t\tlong double rev_theta = theta1 >= 0 ? theta1 - M_PI : theta1 + M_PI;\n\t\t//cout << fixed << setprecision(15) << \"theta1 = \" << theta1 << endl << \"theta2 = \" << theta2 << endl << \"rev_theta = \" << rev_theta << endl;\n\t\tif (theta2 - theta1 == M_PI || theta2 - theta1 == -M_PI) { cout << \"ONLINE_BACK\" << endl; continue; }\n\t\tif (theta1 >= 0) {\n\t\t\tif (theta2 > theta1 || theta2 < rev_theta) { cout << \"COUNTER_CLOCKWISE\" << endl; continue; }\n\t\t\tif (theta2 < theta1 && theta2 > rev_theta) { cout << \"CLOCKWISE\" << endl; continue; }\n\t\t}\n\t\telse {\n\t\t\tif (theta2 > theta1 && theta2 < rev_theta) { cout << \"COUNTER_CLOCKWISE\" << endl; continue; }\n\t\t\tif (theta2 < theta1 || theta2 > rev_theta) { cout << \"CLOCKWISE\" << endl; continue; }\n\t\t}\n\t\tlong double dist1 = hypot(x1 - x0, y1 - y0), dist2 = hypot(x2 - x0, y2 - y0);\n\t\tif (dist2 > dist1) { cout << \"ONLINE_FRONT\" << endl; continue; }\n\t\tcout << \"ON_SEGMENT\" << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n#define P pair<ll,ll>\n#define FOR(I,A,B) for(ll I = ll(A); I < ll(B); ++I)\n#define FORR(I,A,B) for(ll I = ll((B)-1); I >= ll(A); --I)\n#define TO(x,t,f) ((x)?(t):(f))\n#define SORT(x) (sort(x.begin(),x.end())) // 0 2 2 3 4 5 8 9\n#define POSL(x,v) (lower_bound(x.begin(),x.end(),v)-x.begin()) //xi>=v  x is sorted\n#define POSU(x,v) (upper_bound(x.begin(),x.end(),v)-x.begin()) //xi>v  x is sorted\n#define NUM(x,v) (POSU(x,v)-POSL(x,v))  //x is sorted\n#define REV(x) (reverse(x.begin(),x.end())) //reverse\nll gcd(ll a,ll b){if(a%b==0)return b;return gcd(b,a%b);}\nll lcm(ll a,ll b){ll c=gcd(a,b);return ((a/c)*(b/c)*c);}\n#define NEXTP(x) next_permutation(x.begin(),x.end())\nconst ll INF=ll(1e18)+ll(7);\nconst ll MOD=1000000007LL;\n#define out(a) cout<<fixed<<setprecision((a))\n\nclass vec{\npublic:\n\tint x,y;\n\tvec(int x_=0,int y_=0):x(x_),y(y_){}\n\tvoid make(int x_,int y_){\n\t\tx = x_; y = y_;\n\t}\n\tvec operator + (vec A){\n\t\tvec ans(this->x+A.x,this->y+A.y);\n\t\treturn ans;\n\t}\n\tvec operator - (vec A){\n\t\tvec ans(this->x-A.x,this->y-A.y);\n\t\treturn ans;\n\t}\n\tint operator * (vec A){\n\t\treturn this->x*A.x+this->y*A.y;\n\t}\n\tbool operator == (vec A){\n\t\treturn (this->x==A.x && this->y==A.y);\n\t}\n\tdouble r(){\n\t\treturn sqrt((double)x*x+(double)y*y);\n\t}\n\tdouble sita(){\n\t\tdouble ans = atan2(y,x);\n\t\treturn (ans<0.000?ans+2.0*M_PI:ans);\n\t}\n};\ndouble sin_sita(vec v1,vec v2){ // v2 basis\n\treturn double(v2.x*v1.y-v2.y*v1.x)/v1.r()/v2.r();\n}\ndouble cos_sita(vec v1,vec v2){ // v2 basis\n\treturn double(v2.x*v1.x+v2.y*v1.y)/v1.r()/v2.r();\n}\n\n\nint main(){\n\tint x0,y0,x1,y1,x2,y2,q;\n\tcin >> x0 >> y0 >> x1 >> y1;\n\tcin >> q;\n\tvec v1(x1-x0,y1-y0),v2;\n\tdouble EPS = 1e-8;\n\tFOR(i,0,q){\n\t\tcin >> x2 >> y2;\n\t\tif(x0==x2&&y0==y2){\n\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t\tcontinue;\n\t\t}\n\t\tv2.make(x2-x0,y2-y0);\n\t\tdouble cs = cos_sita(v2,v1);\n\t\tdouble ss = sin_sita(v2,v1);\n\t\tif(ss<=EPS && ss>=-EPS){\n\t\t\tif(cs<-0.5){\n\t\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t\t}else if(v1.r() >= v2.r()){\n\t\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t\t}else{\n\t\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t\t}\n\t\t}else if(ss>=0.0){\n\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t}else{\n\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\t}\n\t}\n\n}\n"
  },
  {
    "language": "C++",
    "code": "//http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_C\n#include <iostream>\n#include <cmath>\n#include <cstdio>\n\nusing namespace std;\n\nclass Point{\nprivate:\n    double x;\n    double y;\npublic:\n    void setPoint(double inX, double inY){x = inX; y = inY;};\n    void disp(){printf(\"%.12f %.12f\\n\", x,y);}\n    double length(){return x*x + y*y;};\n    double cross(Point Q){return x*Q.y - Q.x*y;};\n    double dot(Point Q){return x*Q.x + y*Q.y;};\n};\n\n\n//??????????????????2????????????????????¨????????±???\n//P = P2-P1, Q = P - P1\nvoid judge(Point P, Point Q){\n    double Cval = P.cross(Q);\n    if(Cval > 0) cout << \"COUNTER_CLOCKWISE\" << endl;\n    else{\n        if(Cval < 0) cout << \"CLOCKWISE\" << endl;\n        else{\n            double Dval = P.dot(Q);\n            if(Dval < 0) cout << \"ONLINE_BACK\" << endl;\n            else{\n                if(P.length() >= Q.length()) cout << \"ON_SEGMENT\" << endl;\n                else cout << \"ONLINE_FRONT\" << endl;\n            }\n        }\n    }\n}\n\n\n\n\nint main(){\n    int n;\n    double a,b,c,d;\n    Point P, Q;\n    cin >> a >> b >> c >> d;\n    P.setPoint(c-a, d-b);\n    cin >> n;\n    for(int i=0; i<n; i++){\n        cin >> c >> d;\n        Q.setPoint(c-a, d-b);\n        judge(P,Q);\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#define EPS (1e-10)\n#include <cmath>\n#include <iostream>\n#include <iomanip>\nusing namespace std;\n\nint main() {\n\tcin.tie(0); ios::sync_with_stdio(false);\n\tint x0, y0, x1, y1; cin >> x0 >> y0 >> x1 >> y1;\n\tint q; cin >> q;\n\tlong double theta1, theta2;\n\ttheta1 = atan2(y1 - y0, x1 - x0);\n\twhile (q--) {\n\t\tint x2, y2; cin >> x2 >> y2;\n\t\tif (x2 == 0 && y2 == 0) { cout << \"ON_SEGMENT\" << endl; continue; }\n\t\ttheta2 = atan2(y2 - y0, x2 - x0);\n\t\tlong double rev_theta = theta1 >= 0 ? theta1 - M_PI : theta1 + M_PI;\n\t\t//cout << fixed << setprecision(15) << \"theta1 = \" << theta1 << endl << \"theta2 = \" << theta2 << endl << \"rev_theta = \" << rev_theta << endl;\n\t\tif (theta2 - theta1 == M_PI || theta2 - theta1 == -M_PI) { cout << \"ONLINE_BACK\" << endl; continue; }\n\t\tif (theta1 == theta2) {\n\t\t\tlong double dist1 = hypot(x1 - x0, y1 - y0), dist2 = hypot(x2 - x0, y2 - y0);\n\t\t\tif (dist2 > dist1) { cout << \"ONLINE_FRONT\" << endl; continue; }\n\t\t\telse { cout << \"ON_SEGMENT\" << endl; continue; }\n\t\t}\n\t\tif (theta1 >= 0) {\n\t\t\tif (theta2 > theta1 || theta2 < rev_theta) { cout << \"COUNTER_CLOCKWISE\" << endl; continue; }\n\t\t\tif (theta2 < theta1 && theta2 > rev_theta) { cout << \"CLOCKWISE\" << endl; continue; }\n\t\t}\n\t\telse {\n\t\t\tif (theta2 > theta1 && theta2 < rev_theta) { cout << \"COUNTER_CLOCKWISE\" << endl; continue; }\n\t\t\tif (theta2 < theta1 || theta2 > rev_theta) { cout << \"CLOCKWISE\" << endl; continue; }\n\t\t}\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n#define rep(i, N) for (int i = 0; i < (int)N; ++i)\n#define all(a) (a).begin(), (a).end()\nconst double EPS = 1e-10;\nbool equals(double a, double b) { fabs(a - b) < EPS; }\n\nclass Point {\n public:\n  double x, y;\n\n  Point(double x = 0, double y = 0) : x(x), y(y) {}\n\n  Point operator+(const Point &p) const { return Point(x + p.x, y + p.y); }\n  Point operator-(const Point &p) const { return Point(x - p.x, y - p.y); }\n  Point operator*(const double a) { return Point(a * x, a * y); }\n  Point operator/(const double a) { return Point(x / a, y / a); }\n\n  double abs() const { return sqrt(norm()); }\n  double norm() const { return x * x + y * y; }\n\n  Point rotate(double theta) const {\n    return Point(cos(theta) * x - sin(theta) * y,\n                 sin(theta) * x + cos(theta) * y);\n  }\n\n  Point normalize() const { return Point(*this) / abs(); }\n\n  bool operator<(const Point &p) const { return x != p.x ? x < p.x : y < p.y; }\n\n  bool operator==(const Point &p) const {\n    return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n  }\n\n  friend istream &operator>>(istream &is, Point &p) { return is >> p.x >> p.y; }\n};\n\ndouble abs(const Point &p) { return p.abs(); }\ndouble norm(const Point &p) { return p.norm(); }\n\ntypedef Point Vector;\n\nstruct Segment {\n  Point p1, p2;\n  Segment() {}\n  Segment(Point p1, Point p2) : p1(p1), p2(p2) {}\n};\n\ntypedef Segment Line;\n\nclass Circle {\n public:\n  Point c;\n  double r;\n  Circle(Point c = Point(), double r = 0.0) : c(c), r(r) {}\n\n  int contains(const Point &p) const {\n    double d = abs(c - p);\n    if (equals(d, r)) return 1;  // ON\n    if (d < r + EPS) return 2;   // IN\n    return 0;                    // OUT\n  }\n};\n\ntypedef vector<Point> Polygon;\n\ndouble cross(Vector a, Vector b) { return a.x * b.y - a.y * b.x; }\n\ndouble dot(Vector a, Vector b) { return a.x * b.x + a.y * b.y; }\n\nbool isOrthogonal(Vector a, Vector b) { return equals(dot(a, b), 0.0); }\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n  return isOrthogonal(a1 - a2, b1 - b2);\n}\n\nbool isOrthogonal(Segment s1, Segment s2) {\n  return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nbool isParallel(Vector a, Vector b) { return equals(cross(a, b), 0.0); }\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n  return isParallel(a1 - a2, b1 - b2);\n}\n\nbool isParallel(Segment s1, Segment s2) {\n  return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nPoint project(Segment s, Point p) {\n  Vector base = s.p2 - s.p1;\n  double r = dot(p - s.p1, base) / base.norm();\n  return s.p1 + base * r;\n}\n\nPoint reflect(Segment s, Point p) { return p + (project(s, p) - p) * 2.0; }\n\ndouble distance(Point a, Point b) { return (a - b).abs(); }\n\ndouble distanceLP(Line l, Point p) {\n  return abs(cross(l.p2 - l.p1, p - l.p1)) / (l.p2 - l.p1).abs();\n}\n\ndouble distanceSP(Segment s, Point p) {\n  if (dot(s.p2 - s.p1, p - s.p1) < 0.0) return (p - s.p1).abs();\n  if (dot(s.p1 - s.p2, p - s.p2) < 0.0) return (p - s.p2).abs();\n  return distanceLP(s, p);\n}\n\nbool intersect(Segment s1, Segment s2);\ndouble distance(Segment s1, Segment s2) {\n  if (intersect(s1, s2)) return 0.0;\n  return min({distanceSP(s1, s2.p1), distanceSP(s1, s2.p2),\n              distanceSP(s2, s1.p1), distanceSP(s2, s1.p2)});\n}\n\nenum CCW {\n  COUNTER_CLOCKWISE = 1,\n  CLOCKWISE = -1,\n  ONLINE_BACK = 2,\n  ONLINE_FRONT = -2,\n  ON_SEGMENT = 0,\n};\n\nCCW ccw(Point p0, Point p1, Point p2) {\n  Vector a = p1 - p0;\n  Vector b = p2 - p0;\n  if (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n  if (cross(a, b) < -EPS) return CLOCKWISE;\n  if (dot(a, b) < -EPS) return ONLINE_BACK;      // p2, p0, p1\n  if (a.norm() < b.norm()) return ONLINE_FRONT;  // p0, p1, p2\n  return ON_SEGMENT;                             // p0, p2, p1\n}\n\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n  return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n          ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\n\nbool intersect(Segment s1, Segment s2) {\n  return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\nPoint crossPoint(Segment s1, Segment s2) {\n  Vector base = s2.p2 - s2.p1;\n  double d1 = abs(cross(base, s1.p1 - s2.p1));\n  double d2 = abs(cross(base, s1.p2 - s2.p1));\n  double t = d1 / (d1 + d2);\n  return s1.p1 + (s1.p2 - s1.p1) * t;\n}\n\nbool intersect(Circle c, Line l) { return distanceLP(l, c.c) < c.r; }\n\npair<Point, Point> crossPoint(Circle c, Line l) {\n  assert(intersect(c, l));\n  Vector pr = project(l, c.c);\n  Vector e = (l.p2 - l.p1) / (l.p2 - l.p1).abs();\n  double base = sqrt(c.r * c.r - norm(pr - c.c));\n  return make_pair(pr + e * base, pr - e * base);\n}\n\ndouble arg(Vector p) { return atan2(p.y, p.x); }\nVector polar(double a, double r) { return Point(cos(r) * a, sin(r) * a); }\n\nbool intersect(Circle c1, Circle c2) {\n  return (c1.c - c2.c).abs() < c1.r + c2.r;\n}\n\npair<Point, Point> crossPoint(Circle c1, Circle c2) {\n  assert(intersect(c1, c2));\n  double d = abs(c1.c - c2.c);\n  double a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n  double t = arg(c2.c - c1.c);\n  return make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n}\n\n/*\n  IN 2\n  ON 1\n  OUT 0\n*/\nint contains(Polygon g, Point p) {\n  int n = g.size();\n  bool x = false;\n  for (int i = 0; i < n; ++i) {\n    Point a = g[i] - p, b = g[(i + 1) % n] - p;\n    if (abs(cross(a, b)) < EPS && dot(a, b) < EPS) return 1;\n    if (a.y > b.y) swap(a, b);\n    if (a.y < EPS & EPS < b.y && cross(a, b) > EPS) x = !x;\n  }\n  return (x ? 2 : 0);\n}\n\nPolygon convexHull(Polygon s) {\n  Polygon u, l;\n  if (s.size() < 3) return s;\n  sort(s.begin(), s.end());\n  u.push_back(s[0]);\n  u.push_back(s[1]);\n  l.push_back(s[s.size() - 1]);\n  l.push_back(s[s.size() - 2]);\n\n  for (int i = 2; i < s.size(); ++i) {\n    for (int n = u.size(); n >= 2 && ccw(u[n - 2], u[n - 1], s[i]) != CLOCKWISE;\n         --n) {\n      u.pop_back();\n    }\n    u.push_back(s[i]);\n  }\n\n  for (int i = s.size() - 3; i >= 0; i--) {\n    for (int n = l.size(); n >= 2 && ccw(l[n - 2], l[n - 1], s[i]) != CLOCKWISE;\n         --n) {\n      l.pop_back();\n    }\n    l.push_back(s[i]);\n  }\n\n  reverse(l.begin(), l.end());\n  for (int i = u.size() - 2; i >= 1; --i) l.push_back(u[i]);\n\n  return l;\n}\n\nCircle circumscribedCircle(const Point &a, const Point &b, const Point &c) {\n  double a1, a2, b1, b2, c1, c2;\n  a1 = 2 * (b.x - a.x);\n  b1 = 2 * (b.y - a.y);\n  c1 = a.x * a.x - b.x * b.x + a.y * a.y - b.y * b.y;\n  a2 = 2 * (c.x - a.x);\n  b2 = 2 * (c.y - a.y);\n  c2 = a.x * a.x - c.x * c.x + a.y * a.y - c.y * c.y;\n  Point p;\n  p.x = (b1 * c2 - b2 * c1) / (a1 * b2 - a2 * b1);\n  p.y = (c1 * a2 - c2 * a1) / (a1 * b2 - a2 * b1);\n\n  return Circle(p, abs(p - a));\n}\n\nint main() {\n  Point p1, p2, p3;\n  cin >> p1 >> p2;\n  int q;\n  cin >> q;\n  rep(i, q) {\n    cin >> p3;\n    switch (ccw(p1, p2, p3)) {\n      case COUNTER_CLOCKWISE:\n        cout << \"COUNTER_CLOCKWISE\";\n        break;\n      case CLOCKWISE:\n        cout << \"CLOCKWISE\";\n        break;\n      case ONLINE_BACK:\n        cout << \"ONLINE_BACK\";\n        break;\n      case ONLINE_FRONT:\n        cout << \"ONLINE_FRONT\";\n        break;\n      case ON_SEGMENT:\n        cout << \"ON_SEGMENT\";\n        break;\n    }\n    cout << endl;\n  }\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <vector>\n#include <algorithm>\n#include <iostream>\n#include <cstdio>\n#include <cmath>\n#include <climits>\n\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\n//???\nclass Point {\npublic:\n    double x, y;\n    \n    Point (double x = 0, double y = 0):x(x), y(y){}\n    Point operator + (Point p){return Point(x + p.x, y + p.y);}\n    Point operator - (Point p){return Point(x - p.x, y - p.y);}\n    Point operator * (double a){return Point(a * x, a * y);}\n    Point operator / (double a){return Point(x / a, y / a);}\n    \n    double norm(){return x*x + y*y;};\n    double absolute(){return sqrt(norm());};\n    \n    bool operator < (const Point &p) const{\n        return x != p.x ? x < p.x : y < p.y;\n    }\n    \n    bool operator == (const Point &p) const{\n        return equals(x, p.x) && equals(y, p.y);\n    }\n    \n};\ntypedef Point Vector;                               //????????????\ntypedef struct Segment{Point p1, p2;}Segment;       //??????\ntypedef Segment Line;                               //??´???\ntypedef struct Circle{Point c; double r;}Circle;    //???\ntypedef vector<Point> Polygon;                      //????§???¢\n//????????????a????????????\ndouble norm(Vector a){\n    return a.x * a.x + a.y * a.y;\n}\n//????????????a?????§??????\ndouble absolute(Vector a){\n    return sqrt(norm(a));\n}\n\n//????????????a,b?????????\ndouble dot(Vector a, Vector b){\n    return a.x * b.x + a.y * b.y;\n}\n//????????????a,b?????????\ndouble cross(Vector a, Vector b){\n    return a.x * b.y - a.y * b.x;\n}\n\n//????????????a??¨b?????´?????????\n//a??¨b?????´????????´??????????????????0?????????\nbool isOrthogonal(Vector a, Vector b){\n    return equals(dot(a,b), 0.0);\n}\n\n//????????????a??¨b???????????????\n//a??¨b?????´????????´??????????????????0?????????\nbool isParallel(Vector a , Vector b){\n    return equals(cross(a,b), 0.0);\n}\n\n//??????s(p1p2)???????????????p????°???±\nPoint project(Segment s, Point p){\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / norm(base);\n    return s.p1 + base * r;\n}\n\n//??????s(p1p2)???????§°?????¨?????????p???????±????\nPoint reflect(Segment s, Point p){\n    return p + (project(s, p) - p) * 2.0;\n}\n\n//???a,???b???????????¢\ndouble getDistance(Point a, Point b){\n    return absolute(a - b);\n}\n\n//??´???s??¨???p????????¢\ndouble getDistanceLP(Line l, Point p){\n    return abs(cross(l.p2 - l.p1, p - l.p1) / absolute(l.p2 - l.p1));\n}\n\n//??????s(?§????p1/??????p2)??¨???p????????¢d????±???????\n//??\\???????????????????????§??´?????????\n//??????????????????p2-p1??¨???????????????p-p1??????????§???????90???????????§????????´???????????????-90?????????????°?????????´?????????d??????p??¨???p1??¨????????¢\n//??????????????????p1-p2??¨???????????????p-p2??????????§???????90???????????§????????´???????????????-90?????????????°?????????´?????????d??????p??¨???p2??¨????????¢\n//??????????????\\???????????????????????´??????d??????p??¨??´???p1p2????????¢\ndouble getDistanceSP(Segment s, Point p){\n    if (dot(s.p2 - s.p1, p - s.p1) < 0.0) return absolute(p - s.p1);\n    if (dot(s.p1 - s.p2, p - s.p2) < 0.0) return absolute(p - s.p2);\n    return getDistanceLP(s, p);\n}\n\n\n//??????p0, p1, p2???????????????????????????p0p1???????????????p2??????????????????\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\nint ccw(Point p0, Point p1, Point p2){\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if(cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n    if(cross(a, b) < -EPS) return CLOCKWISE;\n    if(dot(a, b) < -EPS) return ONLINE_BACK;\n    if(norm(a) < norm(b)) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\n//??????S1(p1p2)??¨??????s2(p2p3)????????????????????????\nbool intersect(Point p1, Point p2, Point p3, Point p4){\n    return  ccw(p1, p2, p3) * ccw(p1, p2, p3) <= 0\n            &&\n            ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0;\n}\nbool intersect(Segment s1, Segment s2){\n    return intersect(s1.p1, s1.p2, s2.p1, s2.p1);\n}\n\n//??????s1??¨??????s2????????¢\n//??\\????????????????????¢????????§????????????????????????\n//????????????s1??¨??????s2????§????s2.p1????????¢\n//????????????s1??¨??????s2?????????s2.p2????????¢\n//????????????s2??¨??????s1????§????s1.p1????????¢\n//????????????s2??¨??????s1?????????s1.p2????????¢\ndouble getDistance(Segment s1, Segment s2){\n    if ( intersect(s1, s2) ) return 0.0;\n    return min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)), min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n    \n}\n\n//??????s1??¨??????s2?????????????±???????\nPoint getCrossPoint(Segment s1, Segment s2){\n    Vector base = s2.p2 - s2.p1;\n    double d1 = abs(cross(base, s1.p1 - s2.p1));\n    double d2 = abs(cross(base, s1.p2 - s2.p1));\n    double t = d1 / (d1 + d2);\n    return s1.p1 + (s1.p2 - s1.p1) * t;\n}\n\n//?????¨??????l?????????????±???????\npair<Point, Point> getCrossPoints(Circle c, Line l){\n    Vector pr = project(l, c.c);\n    Vector e = (l.p2 - l.p1) / absolute(l.p2 - l.p1);\n    double base = sqrt(c.r * c.r - norm(pr - c.c));\n    return make_pair(pr + e * base, pr - e * base);\n}\n\n//???c1??¨???c2?????????????±???????\nVector polar(double a, double r){\n    //??????a,?§????r???point????±???????\n    return Point(cos(r) * a, sin(r) * a);\n}\npair<Point, Point> getCrossPoints(Circle c1, Circle c2){\n    Vector v = c2.c - c1.c;\n    double d = absolute(v);\n    double a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d) );\n    double t = atan2(v.y, v.x);\n    return make_pair(c1.c + polar(c1.r, t+a), c1.c + polar(c1.r, t-a));\n}\n\n\n\nint main(){\n    \n    int x0, y0, x1, y1, x2, y2;\n    \n    int q;\n    \n    cin >> x0 >> y0 >> x1 >> y1;\n    cin >> q;\n    \n    Point p0 = Point(x0, y0);\n    Point p1 = Point(x1, y1);\n    \n    for (int i = 0; i < q; i++) {\n        cin >> x2 >> y2;\n        Point p2 = Point(x2, y2);\n        \n        int ans = ccw(p0, p1, p2);\n        \n        if(ans == COUNTER_CLOCKWISE) cout << \"COUNTER_CLOCKWISE\" << endl;\n        if(ans == CLOCKWISE) cout << \"CLOCKWISE\" << endl;\n        if(ans == ONLINE_BACK) cout << \"ONLINE_BACK\" << endl;\n        if(ans == ONLINE_FRONT) cout << \"ONLINE_FRONT\" << endl;\n        if(ans == ON_SEGMENT) cout << \"ON_SEGMENT\" << endl;\n    }\n\n    \n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<cmath>\n#include<algorithm>\n\nusing namespace std;\n\nint main()\n{\n\tdouble p1x, p1y, p2x, p2y, p0x, p0y;\n\tint q;\n\n\tscanf(\"%lf %lf %lf %lf\", &p0x, &p0y, &p1x, &p1y);\n\n\tpair<double, double> v01 = { p1x - p0x, p1y - p0y };\n\n\n\tscanf(\"%d\", &q);\n\n\tfor (int i = 0; i < q; i++)\n\t{\n\t\tscanf(\"%lf %lf\", &p2x, &p2y);\n\n\t\tif ((p2x == p0x && p2y == p0y) || (p2x == p1x && p2y == p1y)){\n\t\t\tprintf(\"ON_SEGMENT\\n\");\n\n\t\t\tcontinue;\n\t\t}\n\n\t\tpair<double, double> v02 = { p2x - p0x, p2y - p0x };\n\n\t\tif (v01.first*v02.second == v01.second*v02.first)\n\t\t{\n\t\t\tif (v01.first*v02.first < 0)\n\t\t\t{\n\t\t\t\tprintf(\"ONLINE_BACK\\n\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tabs(v01.first) < abs(v02.first) ? printf(\"ONLINE_FRONT\\n\") : printf(\"ONLINE_SEGMENT\\n\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t\tdouble sin = (v01.first*v02.second - v01.second*v02.first);\n\n\t\tif (sin > 0){\n\t\t\tprintf(\"COUNTER_CLOCKWISE\\n\");\n\n\t\t\tcontinue;\n\t\t}\n\t\telse{\n\t\t\tprintf(\"CLOCKWISE\\n\");\n\n\t\t\tcontinue;\n\t\t}\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <iostream>\n\nusing namespace std;\n\n#define EPS 1e-14\n\n#define PI 3.1415926535897932385\n\ndouble dist(int x, int y)\n{\n\treturn sqrt(x * x + y * y);\n}\n\ndouble angle(int x, int y)\n{\n\treturn atan2((double)(y), (double)(x));\n}\n\nint main()\n{\n\tint x0, y0, x1, y1, x2, y2, q;\n\n\tcin >> x0 >> y0 >> x1 >> y1 >> q;\n\n\tfor (int i = 0; i < q; i++)\n\t{\n\t\tcin >> x2 >> y2;\n\n\t\tint ax = x1 - x0;\n\t\tint ay = y1 - y0;\n\t\tint bx = x2 - x0;\n\t\tint by = y2 - y0;\n\n\t\tdouble ad = dist(ax, ay);\n\t\tdouble bd = dist(bx, by);\n\n\t\tdouble at = angle(ax, ay);\n\t\tdouble bt = angle(bx, by);\n\n\t\tdouble st = bt - at;\n\n\t\tif (st < -PI - EPS)\n\t\t{\n\t\t\tst += 2 * PI;\n\t\t}\n\n\t\tif (st > PI + EPS)\n\t\t{\n\t\t\tst -= 2 * PI;\n\t\t}\n\n\t\tdouble da, db;\n\n\t\tif (bx != 0 || by != 0)\n\t\t{\n\t\t\tif (ax == 0 || bx == 0)\n\t\t\t{\n\t\t\t\tda = 1.0 * ax / ay;\n\t\t\t\tdb = 1.0 * bx / by;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tda = 1.0 * ay / ax;\n\t\t\t\tdb = 1.0 * by / bx;\n\t\t\t}\n\t\t}\n\n\t\tif (bx == 0 && by == 0)\n\t\t{\n\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t}\n\t\telse if (-EPS < db - da && db - da < EPS)\n\t\t{\n\t\t\tif (ax * bx < 0 || ay * by < 0)\n\t\t\t{\n\t\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (ad < bd)\n\t\t\t\t{\n\t\t\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (st > EPS)\n\t\t{\n\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\t}\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<climits>\n#include<iomanip>\n#include<cstdio>\n#include<vector>\n#include<queue>\n#include<stack>\n#include<cmath>\n#include<list>\n#include<map>\n#include<set>\nusing namespace std;\n\ntypedef vector<int> VI;\ntypedef vector<VI> VVI;\ntypedef vector<string> VS;\ntypedef stack<int> SI;\ntypedef queue<int> QI;\ntypedef list<int> LI;\ntypedef pair<int,int> PII;\ntypedef long long LL;\n\n#define d(x)  cout<<#x<<\" = \"<<(x)<<endl;\n#define ALL(a)  (a).begin(),(a).end()\n#define RALL(a) (a).rbegin(), (a).rend()\n#define PB push_back\n#define MP make_pair\n#define EMP empty()\n#define SZ(a) int((a).size())\n#define EACH(i,c) for(typeof((c).begin()) i=(c).begin(); i!=(c).end(); ++i)\n#define REACH(i,c) for(typeof((c).rbegin()) i=(c).rbegin(); i!=(c).rend(); ++i)\n#define EXIST(s,e) ((s).find(e)!=(s).end())\n#define SORT(c,n) sort(c,c+n)\n#define VSORT(c) sort((c).begin(),(c).end())\n#define FOR(i,a,b) for(int i=(a);i<(b);++i)\n#define REP(i,n)  FOR(i,0,n)\n#define DFOR(i,b,a) for(int i=(b)-1;i>=(a);--i)\n#define DREP(i,n) DFOR(i,n,0)\n#define INF 1000000000\n#define PI  acos(-1.0)\n////////////////////////////////////////////////\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\nclass Vector\n{\npublic:\n\tdouble x,y;\n\tVector(double x=0,double y=0):x(x),y(y){}\n\t\n\tVector operator + (Vector p){return Vector(x+p.x,y+p.y);}\n\tVector operator - (Vector p){return Vector(x-p.x,y-p.y);}\n\tVector operator * (double a){return Vector(x*a,y*a);}\n\tVector operator / (double a){return Vector(x/a,y/a);}\n\t\n\tdouble abs(){return sqrt(norm());}\n\tdouble norm(){return x*x+y*y;}\n\t\n\tbool operator <  (const Vector &p)const{return x!=p.x?x<p.x:y<p.y;}\n\tbool operator == (const Vector &p)const{return fabs(x-p.x)<EPS && fabs(y-p.y<EPS);}\n};\n\ndouble dot(Vector a,Vector b){return a.x*b.x+a.y*b.y;}\ndouble cross(Vector a,Vector b){return a.x*b.y-b.x*a.x;}\n\nint ccw(Vector p0,Vector p1,Vector p2)\n{\n\tVector a=p1-p0;\n\tVector b=p2-p0;\n\tif(cross(a,b)>EPS)return 1;//???????¨???????\n\tif(cross(a,b)<-EPS)return -1;//????¨???????\n\tif(dot(a,b)<-EPS)return 2;//p0?????????\n\tif(a.norm()<b.norm())return -2;//p1????\\\\\n\treturn 0;//?????????\n}\n\nint main()\n{\n\tVector p0,p1,p2;\n\tcin>>p0.x>>p0.y>>p1.x>>p1.y;\n\tint n;cin>>n;\n\tREP(i,n)\n\t{\n\t\tcin>>p2.x>>p2.y;\n\t\tint j=ccw(p0,p1,p2);\n\t\tif(j==1)cout<<\"COUNTER_CLOCKWISE\"<<endl;\n\t\telse if(j==-1)cout<<\"CLOCKWISE\"<<endl;\n\t\telse if(j==2)cout<<\"ONELINE_BACK\"<<endl;\n\t\telse if(j==-2)cout<<\"ONLINE_FRONT\"<<endl;\n\t\telse cout<<\"ON_SEGMENT\"<<endl;\n\t}\n\treturn 0;\n}\n\n/*\nint main()\n{\n\tint n;cin>>n;\n\tvtr p[4];\n\tcout<<fixed<<setprecision(10);\n\tREP(i,n)\n\t{\n\t\tREP(j,4)cin>>p[j].x>>p[j].y;\n\t\t//????????????\n\t\tdouble a,b,c,d;\n\t\tif(dotp(minusvtr(p[1],p[0]),minusvtr(p[2],p[0]))>0&&dotp(minusvtr(p[0],p[1]),minusvtr(p[2],p[1]))>0)\n\t\t{\n\t\t\ta=abscrossp(minusvtr(p[1],p[0]),minusvtr(p[2],p[0]))/absvtr(minusvtr(p[1],p[0]));\n\t\t}\n\t\telse\n\t\t{\n\t\t\ta=min(absvtr(minusvtr(p[2],p[0])),absvtr(minusvtr(p[2],p[1])));\n\t\t}\n\t\t\n\t\tif(dotp(minusvtr(p[1],p[0]),minusvtr(p[3],p[0]))>0&&dotp(minusvtr(p[0],p[1]),minusvtr(p[3],p[1]))>0)\n\t\t{\n\t\t\tb=abscrossp(minusvtr(p[1],p[0]),minusvtr(p[3],p[0]))/absvtr(minusvtr(p[1],p[0]));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tb=min(absvtr(minusvtr(p[3],p[0])),absvtr(minusvtr(p[3],p[1])));\n\t\t}\n\t\t\n\t\tif(dotp(minusvtr(p[3],p[2]),minusvtr(p[0],p[2]))>0&&dotp(minusvtr(p[2],p[3]),minusvtr(p[0],p[3]))>0)\n\t\t{\n\t\t\tc=abscrossp(minusvtr(p[3],p[2]),minusvtr(p[0],p[2]))/absvtr(minusvtr(p[3],p[2]));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc=min(absvtr(minusvtr(p[0],p[2])),absvtr(minusvtr(p[0],p[3])));\n\t\t}\n\t\t\n\t\tif(dotp(minusvtr(p[3],p[2]),minusvtr(p[1],p[2]))>0&&dotp(minusvtr(p[2],p[3]),minusvtr(p[1],p[3]))>0)\n\t\t{\n\t\t\td=abscrossp(minusvtr(p[3],p[2]),minusvtr(p[1],p[2]))/absvtr(minusvtr(p[3],p[2]));\n\t\t}\n\t\telse\n\t\t{\n\t\t\td=min(absvtr(minusvtr(p[1],p[2])),absvtr(minusvtr(p[1],p[3])));\n\t\t}\n\t\tcout<<min(min(a,b),min(c,d))<<endl;\n\t}\n\treturn 0;\n}*/"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ndouble EPS = 0.0000000001;\nint sign(double x){\n\tif (x > EPS){\n\t\treturn 1;\n\t} else if (x < -EPS){\n\t\treturn -1;\n\t} else {\n\t\treturn 0;\n\t}\n}\nbool equals(double x, double y){\n\treturn abs(x - y) < EPS;\n}\nstruct point{\n\tdouble x;\n\tdouble y;\n\tpoint(){\n\t\tx = 0;\n\t\ty = 0;\n\t}\n\tpoint(double X, double Y){\n\t\tx = X;\n\t\ty = Y;\n\t}\n\tpoint operator +(){\n\t\treturn point(x, y);\n\t}\n\tpoint operator -(){\n\t\treturn point(-x, -y);\n\t}\n\tpoint operator +(point P){\n\t\treturn point(x + P.x, y + P.y);\n\t}\n\tpoint operator -(point P){\n\t\treturn point(x - P.x, y - P.y);\n\t}\n\tpoint& operator +=(point P){\n\t\tx += P.x;\n\t\ty += P.y;\n\t\treturn *this;\n\t}\n\tpoint& operator -=(point P){\n\t\tx -= P.x;\n\t\ty -= P.y;\n\t\treturn *this;\n\t}\n\tpoint operator *(double k){\n\t\treturn point(x * k, y * k);\n\t}\n\tpoint operator /(double k){\n\t\treturn point(x / k, y / k);\n\t}\n\tpoint& operator *=(double k){\n\t\tx *= k;\n\t\ty *= k;\n\t\treturn *this;\n\t}\n\tpoint& operator /=(double k){\n\t\tx /= k;\n\t\ty /= k;\n\t\treturn *this;\n\t}\n\tbool operator ==(point P){\n\t\treturn equals(x, P.x) && equals(y, P.y);\n\t}\n\tbool operator !=(point P){\n\t\treturn !(*this == P);\n\t}\n\tbool operator <(point P){\n\t\treturn sign(P.x - x) == 1 || (equals(x, P.x) && sign(P.y - y) == 1);\n\t}\n\tbool operator >(point P){\n\t\treturn (P < *this);\n\t}\n\tdouble norm(){\n\t    return x * x + y * y;\n\t}\n\tdouble size(){\n\t    return sqrt((*this).norm());\n\t}\n\tpoint& rotate(double t){\n\t    double X = x * cos(t) - y * sin(t);\n\t    double Y = x * sin(t) + y * cos(t);\n\t    x = X;\n\t    y = Y;\n\t    return *this;\n\t}\n\tpoint& rotate(point P, double t){\n\t    *this -= P;\n\t    (*this).rotate(t);\n\t    *this += P;\n\t    return *this;\n\t}\n\tpoint& rotate90(){\n\t    swap(x, y);\n\t    x = -x;\n\t    return *this;\n\t}\n};\nistream& operator >>(istream &is, point &p){\n\tdouble x, y;\n\tis >> x >> y;\n\tp = point(x, y);\n\treturn is;\n}\nostream& operator <<(ostream &os, point p){\n\tos << p.x << ' ' << p.y;\n\treturn os;\n}\ndouble norm(point P){\n    return P.x * P.x + P.y * P.y;\n}\ndouble abs(point P){\n    return sqrt(norm(P)); \n}\ndouble dot(point P, point Q){\n    return P.x * Q.x + P.y * Q.y;\n}\ndouble cross(point P, point Q){\n    return P.x * Q.y - P.y * Q.x;\n}\nint ccw(point P, point Q, point R){\n    Q -= P;\n    R -= P;\n    if (sign(cross(Q, R)) == 1){\n        return 1;\n    } else if (sign(cross(Q, R)) == -1){\n        return -1;\n    } else if (sign(dot(Q, R)) == -1){\n        return -2;\n    } else if (sign(abs(R) - abs(Q)) == 1){\n        return 2;\n    } else {\n        return 0;\n    }\n}\nint main(){\n  point p0, p1;\n  cin >> p0 >> p1;\n  int q;\n  cin >> q;\n  for (int i = 0; i < q; i++){\n    point p2;\n    cin >> p2;\n    int ans = ccw(p0, p1, p2);\n    if (ans == 1){\n      cout << \"COUNTER_CLOCKWISE\" << endl;\n    } else if (ans == -1){\n      cout << \"CLOCKWISE\" << endl;\n    } else if (ans == -2){\n      cout << \"ONLINE_BACK\" << endl;\n    } else if (ans == 2){\n      cout << \"ONLINE_FRONT\" << endl;\n    } else {\n      cout << \"ON_SEGMENT\" << endl;\n    }\n  }\n}\n"
  },
  {
    "language": "C++",
    "code": "#define loop(i, s, e) for(ll i = s;i < e;i++)\n\n#include <iostream>\n#include <iomanip>\n#include <set>\n#include <vector>\n#include <queue>\n#include <stack>\n#include <utility>\n#include <algorithm>\n#include <map>\n#include <cmath>\n\nusing namespace std;\n\ntypedef long long signed ll;\n\ntemplate<typename T>\nclass Vector2D {\npublic:\n    T x;\n    T y;\n\n    Vector2D() {\n        x = y = 0;\n    }\n\n    Vector2D(T x_, T y_) {\n        x = x_;\n        y = y_;\n    }\n\n    T operator*(const Vector2D<T> *e) {\n        return this->x * e->x + this->y * e->y;\n    }\n\n    Vector2D<T> operator-(const Vector2D<T> *e) {\n        return Vector2D<T>(this->x - e->x, this->y - e->y);\n    }\n\n    Vector2D<T> operator+(const Vector2D<T> *e) {\n        return Vector2D<T>(this->x + e->x, this->y + e->y);\n    }\n\n    T operator*(const Vector2D<T> e) {\n        return this->x * e.x + this->y * e.y;\n    }\n\n    Vector2D<T> operator-(const Vector2D<T> e) {\n        return Vector2D<T>(this->x - e.x, this->y - e.y);\n    }\n\n    Vector2D<T> operator+(const Vector2D<T> e) {\n        return Vector2D<T>(this->x + e.x, this->y + e.y);\n    }\n\n    Vector2D<T> operator*(const T r) {\n        return Vector2D<T>(this->x * r, this->y * r);\n    }\n\n    Vector2D<T> operator/(const T r) {\n        return Vector2D<T>(this->x / r, this->y / r);\n    }\n\n    double abs() {\n        return sqrt(x * x + y * y);\n    }\n\n    T abs2() {\n        return x * x + y * y;\n    }\n\n    T cross(Vector2D<T> e) {\n        if(x * e.y >= y * e.x) return (x * e.y) - (y * e.x);\n        else return (y * e.x) - (x * e.y);\n    }\n\n    double cos(Vector2D<T> e) {\n        if(e.abs() * abs() == 0) return 0;\n        return (e * (*this)) / (e.abs() * abs());\n    }\n\n    double sin(Vector2D<T> e) {\n        if(e.abs() * abs() == 0) return 0;\n        return ((x * e.y) - (y * e.x)) / (e.abs() * abs());\n    }\n};\n\ntypedef Vector2D<double> vdd;\n\ndouble dist__(double x0, double y0, double x1, double y1, double xx, double yy) {\n    int b = 0;\n    vdd p[3] = {vdd(x0, y0), vdd(x1, y1), vdd(xx, yy)};\n    if (((p[0] - p[1]) * (p[2] - p[1])) < 0) b = -1;\n    if (((p[1] - p[0]) * (p[2] - p[0])) < 0) b = 1;\n    if (b == 1) return (p[2] - p[0]).abs();\n    if (b == -1) return (p[2] - p[1]).abs();\n    return (p[1] - p[0]).cross(p[2] - p[0]) / (p[1] - p[0]).abs();\n}\n\ndouble dist(double x0, double y0, double x1, double y1, double xx, double yy){\n    double res = dist__(x0,y0,x1,y1,xx,yy);\n//    cout << res << endl;\n    return res;\n}\nint main() {\n    int q;\n    vdd base,p;\n    cin >> base.x >> base.y >> p.x >> p.y;\n    cin >> q;\n    loop(i, 0, q) {\n        vdd z;\n        cin >> z.x >> z.y;\n        double cos = (p-base).cos(z-base);\n        double sin = (p-base).sin(z-base);\n        double cosr = (base-p).cos(z-p);\n        if(cos * cosr >= 0) cout << \"ON_SEGMENT\" << endl;\n        else if(abs(cos - 1) < 0.000001) cout << \"ONLINE_FRONT\" << endl;\n        else if(abs(cos + 1) < 0.000001) cout << \"ONLINE_BACK\" << endl;\n        else if(sin <= 0) cout << \"CLOCKWISE\" << endl;\n        else cout << \"COUNTER_CLOCKWISE\" << endl;\n    }\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cstring>\n#include <algorithm>\n#include <sstream>\n#include <map>\n#include <set>\n#include <cmath>\n\n#define REP(i,k,n) for(int i=k;i<n;i++)\n#define rep(i,n) for(int i=0;i<n;i++)\n#define INF 1<<30\n#define pb push_back\n#define mp make_pair\n#define EPS 1e-8\n#define equals(a,b) fabs((a) - (b)) < EPS\n\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> P;\n\nstruct Point {\n\tdouble x, y;\n\n\tPoint(double x=0, double y=0) : x(x), y(y) {}\n\n\tPoint operator+(const Point &o) const { return Point(x+o.x, y+o.y); }\n\n\tPoint operator-(const Point &o) const { return Point(x-o.x, y-o.y); }\n\n\tPoint operator*(const double m) const { return Point(x*m, y*m); }\n\n\tPoint operator/(const double d) const { return Point(x/d, y/d); }\n\n\tbool operator<(const Point &o) const { return x != o.x ? x < o.x : y < o.y; }\n\n\tbool operator==(const Point &o) const { return fabs(x-o.x) < EPS && fabs(y-o.y) < EPS; }\n\n\tdouble cross(const Point &o) const { return x * o.y - y * o.x; }\n\n\tdouble dot(const Point &o) const { return x * o.x + y * o.y; }\n\n\tdouble atan() const { return atan2(y, x); }\n\n\tdouble norm() const { return sqrt(dot(*this)); }\n\n\tdouble distance(const Point &o) const { return (o - (*this)).norm(); }\n\n\tdouble area(const Point &a,const Point &b) {\n\t\tPoint p = a - (*this), p2 = b - (*this); \n\t\treturn p.cross(p2);\n\t}\n\n\tdouble area_abs(const Point &a,const Point &b) const {\n\t\tPoint p = a - (*this), p2 = b - (*this);\n\t\treturn fabs(p.cross(p2)) / 2.0;\n\t}\t\n\n\t//??????ab?????????????????????????????????????????????????????????\n\tint between(const Point &a,const Point &b) {\n\t\tif(area(a,b) != 0) return 0;\n\n\t\tif(a.x != b.x)  return ((a.x <= x) && (x <= b.x)) || ((a.x >= x) && (x >= b.x));\n\t\telse return ((a.y <= y) && (y <= b.y)) || ((a.y >= y) && (y >= b.y));\n\t}      \n\n\tdouble distance_seg(const Point& a,const Point& b) {\n\t\tif((b-a).dot(*this-a) < EPS) {\n\t\t\treturn (*this-a).norm();\n\t\t}\n\t\tif((a-b).dot(*this-b) < EPS) {\n\t\t\treturn (*this-b).norm();\n\t\t}\n\t\treturn abs((b-a).cross(*this-a)) / (b-a).norm();\n\t}\n};\n\nostream& operator << (ostream& os, const Point& p) {\n\tos << \"(\" << p.x << \", \" << p.y << \")\";\n\treturn os;\n}\n\nint ccw(Point a, Point b, Point c) {\n\tb = b-a;\n\tc = c-a;\n\n\tif(b.cross(c) > 0.0) return +1;\t//conter clockwise\n\tif(b.cross(c) < 0.0) return -1;\t//clockwise\n\tif(b.dot(c) < 0.0) return +2;\t//a on Seg(b,c)\n\tif(b.norm() < c.norm()) return -2;\t//b on Seg(a,c)\n\treturn 0;\t//c on Seg(a,b)\n}\n\nint main() {\n\tPoint a, b, c;\n\tcin >> a.x >> a.y >> b.x >> b.y;\n\n\tint q;\n\tcin >> q;\n\n\trep(i, q) {\n\t\tcin >> c.x >> c.y;\n\n\t\tint d = ccw(a, b, c);\n\t\tif(d == +1) {\n\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t} else if(d == -1) {\n\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\t} else if(d == +2) {\n\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t} else if(d == -2) {\n\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t} else if(d == 0) {\n\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t}\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<algorithm>\n#include<map>\n#include<set>\n#include<utility>\n#include<vector>\n#include<cmath>\n#include<cstdio>\n#include<complex>\n#define loop(i,a,b) for(int i=a;i<b;i++) \n#define rep(i,a) loop(i,0,a)\n#define pb push_back\n#define mp make_pair\n#define it ::iterator\n#define all(in) in.begin(),in.end()\nconst double PI=acos(-1);\nconst double EPS=1e-10;\nusing namespace std;\ntypedef complex<double> P;\nP pin(){\n\tdouble x,y;\n\tcin>>x>>y;\n\tP p(x,y);\n\treturn p;\n}\nvoid PIN(P* a,int i){\n\trep(i,2)a[i]=pin();\n}\ndouble dot(P a,P b){\n\treturn real(conj(a)*b);\n}\ndouble cross(P a,P b){\n\treturn imag(conj(a)*b);\n}\nstring s[5]={\"COUNTER_CLOCKWISE\",\"CLOCKWISE\",\"ONLINE_BACK\",\"ONLINE_FRONT\",\"ON_SEGMENT\"};\nint main(){\n\tP a[2];\n\tPIN(a,2);\n\tint n;\n\tcin>>n;\n\trep(i,n){\n\t\tP p=pin();\n\t\tP b=a[1]-a[0];\n\t\tP c=p-a[0];\n\t\tint ans;\n\t\tif(cross(b,c)<0)ans=1;\n\t\telse if(cross(b,c)>0)ans=0;\n\t\telse if(dot(b,c)<0)ans=2;\n\t\telse if(abs(b)<abs(c))ans=3;\n\t\telse ans=4;\n\t\tcout<<s[ans]<<endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\nusing namespace std;\n#include<cstdio>\n#include<complex>\n\ntypedef double type_n;\ntypedef complex<type_n> point;\n\nint ccw(const point &a, const point &c, const point &z)\n{\n    point w;\n    w = (z - a) / c;\n    if(w.imag() > 0){ return 1; }\n    if(w.imag() < 0){ return -1; }\n    point u;\n    u = conj(c) * (z - a);\n    if(u.real() < 0){ return 2; }\n    if(u.real() > norm(c)){ return -2; }\n    return 0;\n}\n\nint main()\n{\n    point a, b, c, z;\n    int i, q, crit;\n    type_n a1, a2, b1, b2, z1, z2;\n    scanf(\"%lf %lf %lf %lf\", &a1, &a2, &b1, &b2);\n    a.real(a1), a.imag(a2), b.real(b1), b.imag(b2);\n    c = b - a;\n\n    scanf(\"%d\", &q);\n    for(i = 0; i < q; i++){\n        scanf(\"%lf %lf\", &z1, &z2);\n        z.real(z1), z.imag(z2);\n        crit = ccw(a, c, z);\n        switch(crit){\n            case 1:\n                printf(\"COUNTER_CLOCKWISE\\n\");\n                break;\n            case -1:\n                printf(\"CLOCKWISE\\n\");\n                break;\n            case 2:\n                printf(\"ONLINE_BACK\\n\");\n                break;\n            case -2:\n                printf(\"ONLINE_FRONT\\n\");\n                break;\n            default:\n                printf(\"ON_SEGMENT\\n\");\n                break;\n        }\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#include<iostream>\n#include<fstream>\n#include<iomanip>\n#include<math.h>\nusing namespace std;\n\ntemplate <class T>\nclass _Point{\npublic:\n\tT x;\n\tT y;\n\t_Point(){}\n\t_Point(T _x, T _y) :x(_x), y(_y){}\n\t_Point(const _Point & v) :x(v.x), y(v.y){}\n\n\tconst _Point operator + (const _Point & v)\n\t{\n\t\treturn _Point(x+v.x,y+v.y);\n\t}\n\tconst _Point operator - (const _Point & v)\n\t{\n\t\treturn _Point(x - v.x, y - v.y);\n\t}\n\tT abs() const {\n\t\treturn sqrt(x*x + y*y);\n\t}\n\t_Point unit() const{\n\t\tT len = abs();\n\t\treturn _Point(x / len, y / len);\n\t}\n\tT operator*(const _Point &v) const\n\t{\n\t\treturn x * v.x + y * v.y;\n\t}\n\tconst _Point operator*(const T &len) const\n\t{\n\t\treturn _Point(len * x, len * y);\n\t}\n};\ntypedef double R;\ntypedef _Point<R> Point;\ntypedef Point Vector;\n\nint main(){\n\tstd::istream & c_in = cin;\n\n\tPoint p0, p1;\n\tc_in >> p0.x >> p0.y >> p1.x >> p1.y;\n\tVector P10(p1 - p0);\n\tVector e10(P10.unit());\n\n\tint q;\n\tc_in >> q;\n\tfor (int i = 0; i < q; ++i)\n\t{\n\t\tPoint p2;\n\t\tc_in >> p2.x >> p2.y;\n\n\t\tVector P20 = p2 - p0;\n\t\tVector e20(P20.unit());\n\t\tbool zero = P20.abs() < 1e-8;\n\t\tR projection = e10*e20;\n\t\tif (zero)\n\t\t{\n\t\t\t//(5)\n\t\t\tcout << \"ON_SEGMENT\";\n\t\t}\n\t\telse if (fabs(projection) > 1 - 1e-8)\n\t\t{\n\t\t\t//??´???\n\t\t\tif (projection > 0)\n\t\t\t{\n\t\t\t\tif (P20.abs() <= P10.abs())\n\t\t\t\t{\n\t\t\t\t\t//(5)\n\t\t\t\t\tcout << \"ON_SEGMENT\";\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t//(4)\n\t\t\t\t\tcout << \"ONLINE_FRONT\";\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//(3)\n\t\t\t\tcout << \"ONLINE_BACK\";\n\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tVector ey(-e10.y, e10.x);\n\t\t\tR projection2 = ey*P20;\n\t\t\tif (projection2 > 0)\n\t\t\t{\n\t\t\t\t//???????¨??????????????????´??? (1) \n\t\t\t\tcout << \"COUNTER_CLOCKWISE\";\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//????¨??????????????????´???(2) \n\t\t\t\tcout << \"CLOCKWISE\";\n\t\t\t}\n\t\t}\n\t\tcout << endl;\n\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#define _CRT_SECURE_NO_WARNINGS\n#define _USE_MATH_DEFINES\n#include <iostream>\n#include <cstdio>\n#include <math.h>\n#include <algorithm>\nconst double EPS = 1e-9;\nusing namespace std;\nclass vector {\npublic:\n\tdouble x, y;\n\tvector(double a, double  b) {\n\t\tx = a;\n\t\ty = b;\n\t};\n\tvector operator * (const vector &v)const {\n\t\treturn vector(x*v.x, y* v.y);\n\t}\n\tvector operator * (double a) {\n\t\treturn vector(x * a, y * a);\n\t}\n\tvector operator - (vector v) {\n\t\treturn vector(x - v.x, y - v.y);\n\t}\n\tvector operator + (vector v) {\n\t\treturn vector(x + v.x, y + v.y);\n\t}\n};\ninline double dot(vector v1, vector v2) {\n\treturn v1.x*v2.x + v1.y*v2.y;\n}\ninline double squ(vector v) {\n\treturn v.x*v.x + v.y*v.y;\n}\ninline double norm(vector v) {\n\treturn sqrt(squ(v));\n}\ninline void print(vector v) {\n\tprintf(\"%.10f %.10f\\n\", v.x, v.y);\n}\ninline vector pro(vector base, vector v, vector be) {\n\tdouble a = dot(base, v) / squ(base);\n\tvector v1 = base * a;\n\treturn v1 + be;\n}\ninline vector ref(vector v, vector be) {\n\treturn (v - be)*2 + be;\n}\ninline double cross(vector v1, vector v2) {\n\treturn v1.x*v2.y - v1.y*v2.x;\n}\ninline int ccw(vector v1, vector v2, vector v3) {\n\tvector a = v2 - v1;\n\tvector b = v3 - v1;\n\tif (cross(a, b) < 0.0) return -1;\n\telse if (cross(a, b) > 0.0) return 1;\n\telse if (dot(a, b) < 0.0) return -2;\n\telse if (dot(a, b) > squ(v1)) return 2;\n\telse return 0;\n}\ninline int inter(vector v1, vector v2, vector v3, vector v4) {\n\treturn (ccw(v1, v2, v3) * ccw(v1, v2, v4) <= 0) && (ccw(v3, v4, v1) * ccw(v3, v4, v2) <= 0);\n}\ninline double disPP(vector v1, vector v2) {\n\treturn norm(v2 - v1);\n}\ninline double disLP(vector v1, vector v2, vector v3) {\n\tvector a = v2 - v1;\n\tvector b = v3 - v1;\n\treturn fabs(cross(a, b) / norm(a));\n}\ninline double disSP(vector v1, vector v2, vector v3) {\n\tvector a = v2 - v1;\n\tvector b = v3 - v1;\n\tvector c = v1 - v2;\n\tvector d = v3 - v2;\n\tif (dot(a, b) < 0.0) return disPP(v1, v3);\n\telse if (dot(c, d) < 0.0) return disPP(v2, v3);\n\telse return disLP(v1, v2, v3);\n}\ninline double disSS(vector v1, vector v2, vector v3, vector v4) {\n\tif (inter(v1, v2, v3, v4)) return 0;\n\tdouble a = disSP(v1, v2, v3);\n\tdouble b = disSP(v1, v2, v4);\n\tdouble c = disSP(v3, v4, v1);\n\tdouble d = disSP(v3, v4, v2);\n\treturn min(min(a, b), min(c, d));\n}\n/*int main() {\n\t//inter\n\tint n;\n\tdouble x0, x1, x2, x3, y0, y1, y2, y3;\n\tcin >> n;\n\tfor (int i = 0; i < n; i++) {\n\t\tcin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n\t\tvector v1(x0,y0);\n\t\tvector v2(x1, y1);\n\t\tvector v3(x2, y2);\n\t\tvector v4(x3, y3);\n\t\tcout << inter(v1, v2, v3, v4) << endl;\n\t}\n\treturn 0;\n}*/\nint main() {\n\t//clo\n\tint n;\n\tdouble x0, x1, x2, y0, y1, y2;\n\tcin >> x0 >> y0 >> x1 >> y1 >> n;\n\tvector v0(x0, y0);\n\tvector v1(x1, y1);\n\tfor(int i = 0; i < n; i++) {\n\t\tcin >> x2 >> y2;\n\t\tvector v2(x2, y2);\n\t\tint ans = ccw(v0, v1, v2);\n\t\t if(ans == -1) cout << \"CLOCKWISE\" << endl;\n\t\t else if(ans == 1) cout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t  else if(ans == -2)cout << \"ONLINE_BACK\" << endl;\n\t\t  else if(ans == 2)cout << \"ONLINE_FRONT\" << endl;\n\t\telse cout << \"ON_SEGMENT\" << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include <cstdlib>\n#include <stack>\n#include <queue>\n#include <list>\n#include <vector>\n#include <sstream>\n\nusing namespace std;\n\nclass c_main\n{\nprivate:\n    \npublic:\n    c_main();\n    void f_input();\n};\n\nc_main::c_main()\n{\n\n}\n\nvoid c_main::f_input()\n{\n    double xp1,yp1,xp2,yp2;\n    int q;\n    int i;\n    double x[1000];\n    double y[1000];\n    double a;\n    double b;\n    double x_a;\n    double y_a;\n    double a_a;\n    double b_a;\n    int pt1;\n\n    cin >> xp1 >> yp1 >> xp2 >> yp2;\n    \n    if (xp1 == xp2){\n        x_a = xp1;\n        y_a = 0;\n        pt1 = 0;\n    }else if (yp1 == yp2){\n        x_a = 0;\n        y_a = yp1; \n        pt1 = 1;\n    }else{\n        \n        a_a = (yp2-yp1)/(xp2-xp1);\n      \n        a = -1 * (1/a_a);\n       \n        b_a = -1 * a_a * xp1+ yp1;\n        pt1 = 2;\n    }\n    \n    cin >> q;\n    \n    for ( i = 0; i < q; ++i){\n        cin >> x[i] >> y[i];\n        if (pt1 == 0){\n            if(yp1 >= yp2){\n                if(x[i] == x_a){\n                    if(y[i] > yp1){\n                        cout << \"ONLINE__BACK\" << endl;\n                    }else if(y[i] < yp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(yp2 <= y[i] && y[i] <= yp1){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(x[i] < x_a){\n                    cout << \"CLOCKWISE\" << endl;\n                    \n                }else if(x[i] > x_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n     \n                }\n            }else{\n                if(x[i] == x_a){\n                    if(y[i] < yp1){\n                        cout << \"ONLINE_BACK\" << endl;\n                    }else if(y[i] > yp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(yp1 <= y[i] && y[i] <= yp2){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(x[i] < x_a){\n                    cout << \"CLOCKWISE\" << endl;\n                    \n                    \n                }else if(x[i] > x_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n                }\n            }\n            //printf(\"%10.10f %10.10f\\n\", x_a,y[i]);\n            \n        }else if(pt1 == 1){\n            if(xp1 >= xp2){\n                if(y[i] == y_a){\n                    if(x[i] > xp1){\n                        cout << \"ONLINE_BACK\" << endl;\n                    }else if(x[i] < xp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(xp2 <= x[i] && x[i] <= xp1){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(y[i] < y_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n                }else if(y[i] > y_a){\n                    cout << \"CLOCKWISE\" << endl;\n                }\n            }else{\n                if(y[i] == y_a){\n                    if(x[i] < xp1){\n                        cout << \"ONLINE_BACK\" << endl;\n                    }else if(x[i] > xp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(xp1 <= x[i] && x[i] <= xp2){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(y[i] < y_a){\n                    cout << \"CLOCKWISE\" << endl;\n                }else if(y[i] > y_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n                }\n            }\n            //printf(\"%10.10f %10.10f\\n\", x[i],y_a);\n        }else if(pt1 == 2){\n            b = -1 * a * x[i] + y[i];\n            x_a = (b - b_a)/(a_a - a);\n            y_a = a_a * x_a + b_a;\n            if(xp1 >= xp2){\n                if(y[i] == y_a){\n                    if(x[i] > xp1){\n                        cout << \"ONLINE_BACK\" << endl;\n                    }else if(x[i] < xp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(xp2 <= x[i] && x[i] <= xp1){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(y[i] < y_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n                }else if(y[i] > y_a){\n                    \n                    cout << \"CLOCKWISE\" << endl;\n                }\n            }else{\n                if(y[i] == y_a){\n                    if(x[i] < xp1){\n                        cout << \"ONLINE_BACK\" << endl;\n                    }else if(x[i] > xp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(xp1 <= x[i] && x[i] <= xp2){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(y[i] < y_a){\n                    cout << \"CLOCKWISE\" << endl;\n                }else if(y[i] > y_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n                }\n            }\n            //printf(\"%10.10f %10.10f\\n\", x_a,y_a);\n        }\n    }\n}\n\nint main(){\n    c_main main01;\n    main01.f_input();\n    \n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "//include\n//------------------------------------------\n#include <vector>\n#include <list>\n#include <map>\n#include <climits>\n#include <set>\n#include <deque>\n#include <stack>\n#include <bitset>\n#include <algorithm>\n#include <functional>\n#include <numeric>\n#include <utility>\n#include <sstream>\n#include <iostream>\n#include <iomanip>\n#include <cstdio>\n#include <cmath>\n#include <cstdlib>\n#include <cctype>\n#include <string>\n#include <cstring>\n#include <ctime>\n#include <queue>\n#include <random>\n#include <cctype>\n#include <complex>\n#include <regex>\n\nusing namespace std;\n\n#define C_MAX(a, b) ((a)>(b)?(a):(b))\n#define SHOW_VECTOR(v) {std::cerr << #v << \"\\t:\";for(const auto& xxx : v){std::cerr << xxx << \" \";}std::cerr << \"\\n\";}\n#define SHOW_MAP(v) {std::cerr << #v << endl; for(const auto& xxx: v){std::cerr << xxx.first << \" \" << xxx.second << \"\\n\";}}\n\n#define EPS 1e-8\n#define EQ(a, b) (abs((a)-(b)) < EPS)\n\ntypedef complex<double> P;\n\ndouble cross(P a, P b) {\n    return a.real() * b.imag() - a.imag() * b.real();\n}\n\ndouble dot(P a, P b) {\n    return a.real() * b.real() + a.imag() * b.imag();\n}\n\nint ccw(P p0, P p1, P p2) {\n    p1 -= p0;\n    p2 -= p0;\n    if (cross(p1, p2) > EPS) return 1; //ccw\n    if (cross(p1, p2) < -EPS) return -1; //cw\n    if (dot(p1, p2) < -EPS) return 2; //left\n    if (abs(p1) < abs(p2)) return -2; //right\n    return 0; //mid\n}\n\nint main() {\n\n    double xp0, yp0, xp1, yp1;\n    cin >> xp0 >> yp0 >> xp1 >> yp1;\n\n    P p0(xp0, yp0);\n    P p1(xp1, yp1);\n\n    int Q;\n    cin >> Q;\n\n    while (Q--) {\n\n        double xp, yp;\n        cin >> xp >> yp;\n\n        P p2(xp, yp);\n\n        int ans = ccw(p0, p1, p2);\n\n        string s = \"\";\n        if (ans == 1) s = \"COUNTER_CLOCKWISE\";\n        if (ans == -1) s = \"CLOCKWISE\";\n        if (ans == 2) s = \"ONLINE_BACK\";\n        if (ans == -2) s = \"ONLINE_FRONT\";\n        if (ans == 0) s = \"ON_SEGMENT\";\n\n        cout << s << endl;\n    }\n\n    return 0;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nnamespace arithmetic {\n  template<typename T> class Addition {\n  public:\n    template<typename V> T operator+(const V& v) const {\n      return T(static_cast<const T&>(*this)) += v;\n    }\n  };\n\n  template<typename T> class Subtraction {\n  public:\n    template<typename V> T operator-(const V& v) const {\n      return T(static_cast<const T&>(*this)) -= v;\n    }\n  };\n\n  template<typename T> class Multiplication {\n  public:\n    template<typename V> T operator*(const V& v) const {\n      return T(static_cast<const T&>(*this)) *= v;\n    }\n  };\n\n  template<typename T> class Division {\n  public:\n    template<typename V> T operator/(const V& v) const {\n      return T(static_cast<const T&>(*this)) /= v;\n    }\n  };\n\n  template<typename T> class Modulus {\n  public:\n    template<typename V> T operator%(const V& v) const {\n      return T(static_cast<const T&>(*this)) %= v;\n    }\n  };\n}\n\ntemplate<typename T> class IndivisibleArithmetic : public arithmetic::Addition<T>, public arithmetic::Subtraction<T>, public arithmetic::Multiplication<T> {};\n\ntemplate<typename T> class Arithmetic : public IndivisibleArithmetic<T>, public arithmetic::Division<T> {};\n\ntemplate<typename T> class Ordered {\npublic:\n  template<typename V> bool operator==(const V& v) const {\n    return !(static_cast<T>(v) < static_cast<const T&>(*this) || static_cast<const T&>(*this) < static_cast<T>(v));\n  }\n  \n  template<typename V> bool operator!=(const V& v) const {\n    return static_cast<T>(v) < static_cast<const T&>(*this) || static_cast<const T&>(*this) < static_cast<T>(v);\n  }\n\n  template<typename V> bool operator>(const V& v) const {\n    return static_cast<T>(v) < static_cast<const T&>(*this);\n  }\n\n  template<typename V> bool operator<=(const V& v) const {\n    return !(static_cast<T>(v) < static_cast<const T&>(*this));\n  }\n\n  template<typename V> bool operator>=(const V& v) const {\n    return !(static_cast<const T&>(*this) < static_cast<T>(v));\n  }\n};\n\ntemplate<typename T> inline T gcd(T a, T b) {\n  return __gcd(a, b);\n}\n\ntemplate<typename T> inline T lcm(T a, T b) {\n  return a / gcd(a, b) * b;\n}\n\ntemplate<typename T> inline T floor(T a, T b) {\n  return floor(a / b) * b <= a ? floor(a / b) : floor(a / b) - 1;\n}\n\ntemplate<typename T> inline T ceil(T a, T b) {\n  return floor(a + b - 1, b);\n}\n\ntemplate<typename T> inline T round(T a, T b) {\n  return floor(a + b / 2);\n}\n\ntemplate<typename T> inline T mod(T a, T b) {\n  return a - floor(a, b) * b;\n}\n\ntemplate<typename T> inline T factorial(T n) {\n  return n <= 1 ? 1 : factorial(n - 1) * n;\n}\n\nclass Real : public Arithmetic<Real>, public arithmetic::Modulus<Real>, public Ordered<Real> {\nprivate:\n  static long double EPS;\n  long double val;\n\npublic:\n  Real() {}\n\n  Real(long double val) : val(val) {}\n\n  template<typename T> Real operator+=(const T& r) {\n    val += static_cast<long double>(r);\n    return *this;\n  }\n  \n  template<typename T> Real operator-=(const T& r) {\n    val -= static_cast<long double>(r);\n    return *this;\n  }\n  \n  template<typename T> Real operator*=(const T& r) {\n    val *= static_cast<long double>(r);\n    return *this;\n  }\n  \n  template<typename T> Real operator/=(const T& r) {\n    val /= static_cast<long double>(r);\n    return *this;\n  }\n\n  template<typename T> Real operator%=(const T& r) {\n    return *this = mod(*this, static_cast<Real>(r));\n  }\n  \n  template<typename T> bool operator<(const T r) const {\n    return val < static_cast<long double>(r) - EPS;\n  }\n\n  operator long double() const {\n    return val;\n  }\n};\n\nlong double Real::EPS = 1e-8;\n\ninline ostream& operator<<(ostream& os, const Real& a) {\n  stringstream ss;\n\tss << fixed << setprecision(15) << (long double)a;\n  os << ss.str();\n  return os;\n}\n\ninline istream& operator>>(istream& is, Real& a) {\n\tlong double n;\n\tis >> n;\n\ta = n;\n\treturn is;\n}\n\nclass Point : public Arithmetic<Point> {\npublic:\n  Real x, y;\n\n  Point() {}\n\n  Point(const Real& x) : x(x), y(0) {}\n\n  Point(const Real& x, const Real& y) : x(x), y(y) {}\n\n  Point operator+=(const Point& p) {\n    x += p.x;\n    y += p.y;\n    return *this;\n  }\n\n  Point operator-=(const Point& p) {\n    x -= p.x;\n    y -= p.y;\n    return *this;\n  }\n\n  Point operator*=(const Point& p) {\n    Real xx = x * p.x - y * p.y;\n    y = x * p.y + y * p.x;\n    x = xx;\n    return *this;\n  }\n\n  Point operator*=(const Real& r) {\n    x *= r;\n    y *= r;\n    return *this;\n  }\n\n  Point operator/=(const Point& p) {\n    Real nrm = p.norm();\n    Real xx = (x * p.x + y * p.y) / nrm;\n    y = (y * p.x - x * p.y) / nrm;\n    x = xx;\n    return *this;\n  }\n\n  Point operator/=(const Real& r) {\n    x /= r;\n    y /= r;\n    return *this;\n  }\n\n  Real norm() const {\n    return x * x + y * y;\n  }\n\n  Real abs() const {\n    return sqrt(norm());\n  }\n\n  Point conj() const {\n    return Point(x, -y);\n  }\n};\n\ninline ostream& operator<<(ostream& os, const Point& point) {\n\tos << point.x << \" \" << point.y;\n\treturn os;\n}\n\ninline istream& operator>>(istream& is, Point& point) {\n  Real x, y;\n\tis >> x >> y;\n\tpoint = Point(x, y);\n\treturn is;\n}\n\nclass Line {\npublic:\n  Point a, b;\n\n  Line() {}\n\n  Line (const Point& a, const Point& b) : a(a), b(b) {}\n\n  Point vec() const {\n    return b - a;\n  }\n};\n\ninline ostream& operator<<(ostream& os, const Line& line) {\n\tos << line.a << \" \" << line.b;\n\treturn os;\n}\n\ninline istream& operator>>(istream& is, Line& line) {\n  Point a, b;\n  is >> a >> b;\n  line = Line(a, b);\n  return is;\n}\n\nclass Segment : public Line {\npublic:\n  Segment() {}\n\n  Segment (const Point& a, const Point& b) : Line(a, b) {}\n};\n\nenum CCW{LEFT = 1, RIGHT = 2, BACK = 4, FRONT = 8, ON = 16};\n\nint ccw(const Segment& segment, const Point& point) {\n  Point p = (point - segment.a) / segment.vec();\n  if (p.y > 0) return LEFT;\n  if (p.y < 0) return RIGHT;\n  if (p.x < 0) return BACK;\n  if (p.x > 1) return FRONT;\n  return ON;\n}\n\nint main() {\n  Segment segment;\n  cin >> segment;\n  int q;\n  cin >> q;\n  for (int i = 0; i < q; ++i) {\n    Point p;\n    cin >> p;\n    switch (ccw(segment, p)) {\n    case LEFT: cout << \"COUNTER_CLOCKWISE\" << endl; break;\n    case RIGHT: cout << \"CLOCKWISE\" << endl; break;\n    case BACK: cout << \"ONLINE_BACK\" << endl; break;\n    case FRONT: cout << \"ONLINE_FRONT\" << endl; break;\n    case ON: cout << \"ON_SEGMENT\" << endl; break;\n    }\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n#define EPS (1e-10)    //誤差\ntypedef complex<double> P;\n\n//実数同士の比較\nbool EQ(double a, double b){\n    return (abs(a - b) < EPS);\n}\n\n//外積\ndouble cross(P a, P b){\n    return (a.real() * b.imag() - a.imag() * b.real());\n}\n\nbool func(P a, P b, P c){\n    return ((a.real() < b.real() + EPS && b.real() < c.real() + EPS) || (c.real() < b.real() + EPS && b.real() < a.real() + EPS));\n}\n\n//内積\ndouble dot(P a, P b){\n    return (a.real() * b.real() + a.imag() * b.imag());\n}\n\n// 点cが線分a,b上にあるかないか(3)\nbool is_point_on_line(P a, P b, P c) {\n  // |a-c| + |c-b| <= |a-b| なら線分上\n  return (abs(a-c) + abs(c-b) < abs(a-b) + EPS);\n}\n\nint main(){\n    \n    P p0, p1;\n    cin >> p0.real() >> p0.imag() >> p1.real() >> p1.imag();\n    int q; cin >> q;\n    for(int i = 0; i < q; i++){\n        P p2;\n        cin >> p2.real() >> p2.imag();\n\n        //sinの正負で場合分け\n        if(EQ(cross(p1 - p0, p2 - p0), 0.0)){\n            \n            //線分上かどうか\n            if(is_point_on_line(p0, p1, p2)){\n                cout << \"ON_SEGMENT\" << endl;\n            }else{\n\n                if(dot(p2 - p0, p1 - p0) < 0){\n                    cout << \"ONLINE_BACK\" << endl;\n                }else{\n                    cout << \"ONLINE_FRONT\" << endl;\n                }\n            }\n\n        }else if(cross(p1 - p0, p2 - p0) > 0 - EPS){\n            cout << \"COUNTER_CLOCKWISE\" << endl;\n        }else if(cross(p1 - p0, p2 - p0) < 0 + EPS){\n            cout << \"CLOCKWISE\" << endl;\n        }\n\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\nusing namespace std;\n#include<cstdio>\n#include<complex>\n\ntypedef double type_n;\ntypedef complex<type_n> point;\n\nint ccw(const point &a, const point &c, const point &z)\n{\n    point w;\n    w = (z - a) / c;\n    if(w.imag() > 0){ return 1; }\n    if(w.imag() < 0){ return -1; }\n    if(w.real() < 0){ return 2; }\n    if(w.real() > 1){ return -2; }\n    return 0;\n}\n\nint main()\n{\n    point a, b, c, z;\n    int i, q, crit;\n    type_n a1, a2, b1, b2, z1, z2;\n    scanf(\"%lf %lf %lf %lf\", &a1, &a2, &b1, &b2);\n    a.real(a1), a.imag(a2), b.real(b1), b.imag(b2);\n    c = b - a;\n\n    scanf(\"%d\", &q);\n    for(i = 0; i < q; i++){\n        scanf(\"%lf %lf\", &z1, &z2);\n        z.real(z1), z.imag(z2);\n        crit = ccw(a, c, z);\n        switch(crit){\n            case 1:\n                printf(\"COUNTER_CLOCKWISE\\n\");\n                break;\n            case -1:\n                printf(\"CLOCKWISE\\n\");\n                break;\n            case 2:\n                printf(\"ONLINE_BACK\\n\");\n                break;\n            case -2:\n                printf(\"ONLINE_FRONT\\n\");\n                break;\n            default:\n                printf(\"ON_SEGMENT\\n\");\n                break;\n        }\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\ntypedef long long LL;\n\n//container util\n//------------------------------------------\n#define ALL(a)  (a).begin(),(a).end()\n#define RALL(a) (a).rbegin(), (a).rend()\n#define PB push_back\n#define MP make_pair\n#define DECIM10  fixed<<setprecision(10) \n#define SZ(a) int((a).size())\n#define SORT(c) sort((c).begin(),(c).end())\n\n//repetition\n//------------------------------------------\n#define FOR(i,a,b) for(int i=(a);i<(b);++i)\n#define REP(i,n)  FOR(i,0,n)\n\n//constant\n//--------------------------------------------\nconst double EPS = 1e-10;\nconst double PI  = acos(-1.0);\n\n//clear memory\n#define CLR(a) memset((a), 0 ,sizeof(a))\n\nusing namespace std;\ntypedef pair<double,double> PDD;\nPDD addpdd(PDD a,PDD b){ return MP(a.first+b.first,a.second+b.second); }\nPDD subpdd(PDD a,PDD b){ return MP(a.first-b.first,a.second-b.second); }\ndouble cross(PDD a,PDD b){ return a.first*b.second-a.second*b.first; }\nint main(void)\n{\n  PDD p0,p1,p2;\n  double x,y,cs;\n  cin >> x >> y;\n  p0=MP(x,y);\n  cin >> x >> y;\n  p1=MP(x,y);\n  int q;\n  cin >> q;\n  cout << DECIM10;\n  REP(i,q){\n    cin >> x >> y;\n    p2=MP(x,y);\n    p1=subpdd(p1,p0);\n    p2=subpdd(p2,p0);\n    cs=cross(p1,p2);\n    //cout << cs << endl;\n    if(cs<0) cout << \"CLOCKWISE\" << endl;\n    else if(cs>0) cout << \"COUNTER_CLOCKWISE\" << endl;\n    else if(p1.first*p2.first+p1.second*p2.second<0) cout << \"ONLINE_BACK\" << endl;\n    else if(p1.first*p1.first+p1.second*p1.second<p2.first*p2.first+p2.second*p2.second) cout << \"ONLINE_FRONT\" << endl;\n    else cout << \"ON_SEGMENT\" << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#define EPS (1e-10)\n#include <cmath>\n#include <iostream>\n#include <iomanip>\nusing namespace std;\n\nint main() {\n\tcin.tie(0); ios::sync_with_stdio(false);\n\tint x0, y0, x1, y1; cin >> x0 >> y0 >> x1 >> y1;\n\tint q; cin >> q;\n\tlong double theta1, theta2;\n\ttheta1 = atan2(y1 - y0, x1 - x0);\n\twhile (q--) {\n\t\tint x2, y2; cin >> x2 >> y2;\n\t\ttheta2 = atan2(y2 - y0, x2 - x0);\n\t\tlong double d_theta = theta1 - theta2;\n\t\tif (d_theta + M_PI == 0) { cout << \"ONLINE_BACK\" << endl; continue; }\n\t\tif (d_theta == 0) {\n\t\t\tlong double dist1 = hypot(x1 - x0, y1 - y0), dist2 = hypot(x2 - x0, y2 - y0);\n\t\t\tif (dist2 > dist1) { cout << \"ONLINE_FRONT\" << endl; continue; }\n\t\t\tcout << \"ON_SEGMENT\" << endl; continue;\n\t\t}\n\t\tif (d_theta > M_PI || d_theta < 0) { cout << \"COUNTER_CLOCKWISE\" << endl; continue; }\n\t\tif (d_theta < M_PI) { cout << \"CLOCKWISE\" << endl; continue; }\n\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#ifndef ___Geometry_Library\n#define ___Geometry_Library\n\n// ------ Includes ------ //\n#include <cmath>\n#include <complex>\n#include <utility>\n#include <algorithm>\n\n// ------ Defines ------ //\ntypedef long double GType;\ntypedef std::complex<GType> Point;\ntypedef std::pair<Point, Point> Segment;\n\n// ------ Constants ------ //\nconst GType EPS = 1.0e-10L;\n\n// ------ Functions Level 1 ------ //\nGType dot(const Point& p1, const Point& p2) {\n\treturn (std::conj(p1) * p2).real();\n}\nGType cross(const Point& p1, const Point& p2) {\n\treturn (std::conj(p1) * p2).imag();\n}\nint ccw(const Point& p1, const Point& p2, const Point& p3) {\n\tPoint v1 = p2 - p1, v2 = p3 - p1;\n\tif (cross(v1, v2) > EPS) return +1;\n\tif (cross(v1, v2) < -EPS) return -1;\n\tif (dot(v1, v2) < -EPS) return +2;\n\tif (std::norm(v1) < std::norm(v2)) return -2;\n\treturn 0;\n}\n\n#endif\n\n#include <iomanip>\n#include <iostream>\nusing namespace std;\nint q, xa, ya, xb, yb; Point p1, p2, p3;\nint main() {\n\tcin >> xa >> ya >> xb >> yb;\n\tp1 = Point(xa, ya);\n\tp2 = Point(xb. yb);\n\tcin >> q;\n\twhile (q--) {\n\t\tcin >> xa >> ya; p3 = Point(xa, ya);\n\t\tint res = ccw(p1, p2, p3);\n\t\tif(res == +1) cout << \"COUNTER_CLOCKWISE\" << endl;\n\t\tif(res == -1) cout << \"CLOCKWISE\" << endl;\n\t\tif(res == +2) cout << \"ONLINE_BACK\" << endl;\n\t\tif(res == -2) cout << \"ONLINE_FRONT\" << endl;\n\t\tif(res == +0) cout << \"ON_SEGMENT\" << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#define EPS (1e-10)\n#include <cmath>\n#include <iostream>\n#include <iomanip>\nusing namespace std;\n\nint main() {\n\tcin.tie(0); ios::sync_with_stdio(false);\n\tint x0, y0, x1, y1; cin >> x0 >> y0 >> x1 >> y1;\n\tint q; cin >> q;\n\tlong double theta1, theta2;\n\ttheta1 = atan2(y1 - y0, x1 - x0);\n\twhile (q--) {\n\t\tint x2, y2; cin >> x2 >> y2;\n\t\ttheta2 = atan2(y2 - y0, x2 - x0);\n\t\tlong double d_theta = theta2 - theta1;\n\t\t//cout << \"theta1 = \" << fixed << setprecision(15) << theta1 << endl;\n\t\t//cout << \"theta2 = \" << fixed << setprecision(15) << theta2 << endl;\n\t\t//cout << \"d_theta = \" << fixed << setprecision(15) << d_theta << endl;\n\t\tif (d_theta - M_PI == 0) { cout << \"ONLINE_BACK\" << endl; continue; }\n\t\tif (d_theta > 0 || d_theta < -M_PI) { cout << \"COUNTER_CLOCKWISE\" << endl; continue; }\n\t\tif (d_theta < 0) { cout << \"CLOCKWISE\" << endl; continue; }\n\t\tlong double dist1 = hypot(x1 - x0, y1 - y0), dist2 = hypot(x2 - x0, y2 - y0);\n\t\tif (dist2 > dist1) { cout << \"ONLINE_FRONT\" << endl; continue; }\n\t\tcout << \"ON_SEGMENT\" << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define r(i,n) for(int i=0;i<n;i++)\nusing namespace std;\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n//CCW??¨///////////////////////////////////\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONELINE_BACK = 2;\nstatic const int ONELINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n/////////////////////////////////////////\nclass Point{\n  public:\n  double x,y;\n  Point(double x=0,double y=0):x(x),y(y){}\n  Point operator + (Point p){return Point(x+p.x,y+p.y);}\n  Point operator - (Point p){return Point(x-p.x,y-p.y);}\n  Point operator * (double a){return Point(a*x,a*y);}\n  Point operator / (double a){return Point(x/a,y/a);}\n\n  bool operator < (const Point &p) const{\n    return x!=p.x?x<p.x:y<p.y;\n  }\n  bool operator == (const Point &p) const{\n    return fabs(x-p.x)<EPS&&fabs(y-p.y)<EPS;\n  }\n};\n/*class Circle{\npublic:\n  Point c;\n  double r;\n  Circle(Point c=Point(),double r=0.0):c(c),r(r){}\n};*/\ntypedef Point vect;\nstruct seg{Point p1,p2;};\n//????????´???\ndouble norm(Point p){return p.x*p.x+p.y*p.y;}\n//??¶??????\ndouble abs(Point p){return sqrt(norm(p));}\n//??????\ndouble dot(Point a,Point b){\n  return a.x*b.x+a.y*b.y;\n}\n//??????\ndouble cross(Point a,Point b){\n  return a.x*b.y-a.y*b.x;\n}\n//??´?????????\nbool C90(seg s1,seg s2){\n  return equals(dot(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\nbool C0(seg s1,seg s2){\n  return equals(cross(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n//?°???±\nPoint projec(seg s,Point p){\n  Point base = s.p2-s.p1;\n  double r=dot(p-s.p1,base) / norm(base);\n  return s.p1+base*r;\n}\n//????°?\nPoint reflec(seg s,Point p){\n  return  p+(projec(s,p)-p)*2.0;\n}\n//2???????????¢\ndouble getDistancePP(Point a,Point b){\n  return abs(a-b);\n}\n//??´??????????????¢(????°?)\ndouble getDistanceLP(seg l,Point p){\n  return abs(cross(l.p2-l.p1,p-l.p1)/abs(l.p2-l.p1));\n}\n//?????????????????¢\ndouble getDistanceSP(seg s,Point p){\n  if(dot(s.p2-s.p1,p-s.p1)<0.0)return abs(p-s.p1);\n  if(dot(s.p1-s.p2,p-s.p2)<0.0)return abs(p-s.p2);\n  return getDistanceLP(s,p);\n}\n//????????????????????¢\n/*double getDistance(seg s1,seg s2){\n  if(intersect(s1,s2))return 0.0;\n  return min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),\n    min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n}*/\n//????¨?????????????????¨??????????\nint CCW(Point p0,Point p1,Point p2){\n  Point a=p1-p0;\n  Point b=p2-p0;\n  if(cross(a,b)>EPS)return COUNTER_CLOCKWISE;\n  if(cross(a,b)<-EPS)return CLOCKWISE;\n  if(dot(a,b)<-EPS)return ONELINE_BACK;\n  if(norm(a)<norm(b))return ONELINE_FRONT;\n  return ON_SEGMENT;\n}\nmain(){\n  int n;\n  seg a,b;\n  cin>>a.p1.x>>a.p1.y>>a.p2.x>>a.p2.y;\n  cin>>n;\n  while(n--){\n    Point c;\n    cin>>c.x>>c.y;\n    int p=CCW(a.p1,a.p2,c);\n    if(p==1)cout<<\"COUNTER_CLOCKWISE\";\n    if(p==-1)cout<<\"CLOCKWISE\";\n    if(p==2)cout<<\"ONLINE_BACK\";\n    if(p==-2)cout<<\"ONLINE_FRONT\";\n    if(!p)cout<<\"ON_SEGMENT\";\n    cout<<endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define MX 1000000\n#define pf printf\n#define sf scanf\n#define ll long long\n#define ull unsigned long long\n#define ui unsigned int\n#define db double\n#define fl float\n#define ii pair <int,int>\n#define ff first\n#define ss second\n#define pb push_back\n#define ps push\n#define pp pop()\n#define tp top()\n#define ft front()\n#define cl clear()\n#define max3(a,b,c) max(a, max(b,c))\n#define min3(a,b,c) min(a, min(b,c))\n#define SA(name,size) sort(name, name+size)\n#define SV(name) sort(name.begin(), name.end())\n#define RV(name) reverse(name.begin(), name.end());\n#define loop(a,n) for(int i=a; i<n; i++)\n#define nloop(j,a,n) for(int j=a; j<n; j++)\n#define Case int T; scanf(\"%d\", &T); for(int cas = 1; cas <= T; ++cas)\n#define CaseF(n) for(int cas=1; cas<=n; cas++)\n#define mem(arr,val) memset(arr,val,sizeof(arr))\n#define pr(x) cout << x << endl\n#define pr2(x,y) cout << x << \" \" << y << endl\n#define prln pf(\"\\n\")\nusing namespace std;\n\n/**------------------------------Graph Moves-----------------------------------*/\n/* anti-clockwise, starting from 0 degree */\n///int dx[]={1,0,-1,0}; int dy[]={0,1,0,-1}; // 4 direction\n///int dx[]={1,1,0,-1,-1,-1,0,1}; int dy[]={0,1,1,1,0,-1,-1,-1}; //8 direction\n///int dx[]={2,1,-1,-2,-2,-1,1,2}; int dy[]={1,2,2,1,-1,-2,-2,-1}; //Knight Direction\n///int dx[]={2,1,-1,-2,-1,1}; int dy[]={0,1,1,0,-1,-1}; //Hexagonal Direction\n/*----------------------------------------------------------------------------*/\n\nint bigmod(int n, int pow, int mod){\n    if(pow==0) return 1;\n    int x=bigmod(n, pow/2, mod);\n    x=((x%mod)*(x%mod))%mod;\n    if(pow%2==1) x=((x%mod)*(n%mod))%mod;\n    return x;\n}\n\ninline int getint(){\n    int x;\n    scanf(\"%d\",&x);\n    return x;\n}\n#define II getint()\n\ninline long long getlonglong(){\n    long long x;\n    scanf(\"%lld\",&x);\n    return x;\n}\n#define LL getlonglong()\n\ninline float getfloat(){\n    float x;\n    scanf(\"%f\",&x);\n    return x;\n}\n#define FF getfloat()\n\ninline double getdouble(){\n    double x;\n    scanf(\"%lf\",&x);\n    return x;\n}\n#define DB getdouble()\n\ninline string getstring(){\n    string s;\n    cin>>s;\n    return s;\n}\n#define SS getstring()\n\n/**------------------------------------------------------------------------------------------*/\n\nstruct point{\n    double x,y;\n    double operator ^ (point b){\n        return x*b.y - y*b.x;\n    }\n    double operator * (point b){\n        return x*b.x + y*b.y;\n    }\n    point operator - (point b){\n        point Vector;\n        Vector.x = x-b.x;\n        Vector.y = y-b.y;\n        return Vector;\n    }\n};\n\ndouble Distance(point a, point b){\n    return abs( sqrt( (b.x-a.x)*(b.x-a.x) + (b.y-a.y)*(b.y-a.y) ) );\n}\n\nint main(){\n    //ios_base::sync_with_stdio(false);\n    //cin.tie(NULL);\n\n    point p0, p1, p2;\n    sf(\"%lf %lf %lf %lf\",&p0.x,&p0.y,&p1.x,&p1.y);\n    int q;\n    sf(\"%d\",&q);\n    while(q--){\n        sf(\"%lf %lf\",&p2.x,&p2.y);\n        point A = p1-p0; /// vector A (p0 to p1)\n        point B = p2-p0; /// vector B (p0 to p2)\n        if((A^B)>0)\n            pf(\"COUNTER_CLOCKWISE\\n\");\n        else if((A^B)<0)\n            pf(\"CLOCKWISE\\n\");\n        else if((A^B)==0){\n            if((A*B)<0)\n                pf(\"ONLINE_BACK\\n\");\n            else{\n                double dis_p0p1 = Distance(p0,p1);\n                double dis_p0p2 = Distance(p0,p2);\n                if(dis_p0p1 < dis_p0p2)\n                    pf(\"ONLINE_FRONT\\n\");\n                else\n                    pf(\"ON_SEGMENT\\n\");\n            }\n        }\n    }\n\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i,n) for(int i=0;i<n;++i)\ntypedef complex<double> Point;\n#define X real()\n#define Y imag()\nconst double EPS = 1e-9;\n\ndouble dot(Point a, Point b) {\n\treturn a.X*b.X + a.Y*b.Y;\n}\n\ndouble cross(Point a, Point b) {\n\treturn a.X*b.Y - a.Y*b.X;\n}\n\nstring ccw(Point a, Point b, Point c) {\n\tb -= a;  c -= a;\n\tif (cross(b,c) >  EPS) return \"COUNTER_CLOCKWISE\";\n\tif (cross(b,c) < -EPS) return \"CLOCKWISE\";\n\tif (dot(b,c)   < -EPS) return \"ONLINE_BACK\";  // c--a--b on line\n\tif (norm(b) < norm(c)) return \"ONLINE_FRONT\"; // a--b--c on line or a==b\n\treturn \"ON_SEGMENT\";                          // a--c--b on line or a==c or b==c\n}\n\nint main(void){\n\tdouble x1,y1,x2,y2,x,y;\n\tint q;\n\tcin>>x1>>y1>>x2>>y2>>q;\n\trep(i,q){\n\t\tcin>>x>>y;\n\t\tcout<<ccw({x1,y1},{x2,y2},{x,y})<<endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define _ ios_base::sync_with_stdio(0);cin.tie(0);\n#define REP(i,n) for(int i=0;i<(int)(n);i++)\n\nusing namespace std;\n\ntypedef long double ld;\ntypedef complex<ld> Point;\nconst ld eps = 1e-8, pi = acos(-1.0);\nbool eq(ld a, ld b){return (abs(b-a)<eps);}\nld dot(Point a, Point b){return real(conj(a)*b);}\nld cross(Point a, Point b){ return imag(conj(a)*b);}\nint ccw(Point a, Point b, Point c){\n  b-=a;c-=a;\n  if(cross(b,c)>eps) return 1;//countor_crockwise\n  if(cross(b,c)<-eps) return -1;//crockwise\n  if(dot(b,c)<0) return 2;//c,a,b\n  if(norm(b)<norm(c)) return -2;//a,b,c\n  return 0;//a,c,b\n}\n\nPoint p0, p1, p2;\nint q;\n\nint main(){ _;\n  int x,y;\n  cin>>x>>y; p0=Point(x,y);\n  cin>>x>>y; p1=Point(x,y);\n  cin>>q;\n  REP(i,q) {\n    cin>>x>>y; p2=Point(x,y);\n    switch(ccw(p0,p1,p2)){\n    case 1:\n      cout<<\"COUNTER_CLOCKWISE\"<<endl;\n      break;\n    case -1:\n      cout<<\"CLOCKWISE\"<<endl;\n      break;\n    case 2:\n      cout<<\"ONLINE_BACK\"<<endl;\n      break;\n    case -2:\n      cout<<\"ONLINE_FRONT\"<<endl;\n      break;\n    default:/*case 0*/\n      cout<<\"ON_SEGMENT\"<<endl;\n      break;\n    }\n  }\n\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<iomanip>\n#include<algorithm>\n#include<fstream>\n#define _USE_MATH_DEFINES\n#include<math.h>\n#define EPS (1e-5)\n#define equals(a, b) (fabs((a) - (b)) < EPS )\n//#define cout fout\n//#define cin fin\nusing namespace std;\n\nclass Point {\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0) :x(x), y(y) {}\n\tPoint operator + (Point p) {\n\t\treturn Point(x + p.x, y + p.y); \n\t}\n\tPoint operator - (Point p) {\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n\tPoint operator * (double a) {\n\t\treturn Point(a * x, a * y);\n\t}\n\tPoint operator / (double a) {\n\t\treturn Point(x / a, y / a);\n\t}\n\n\tdouble abs() {\n\t\treturn sqrt(norm());\n\t}\n\tdouble norm() {\n\t\treturn x * x + y * y;\n\t}\n\n\tbool operator < (const Point &p)const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p)const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\n\ntypedef Point Vector;\n\n#ifdef cin\nifstream fin(\"CGL_1_C-in29.txt\");\n#endif\n\n#ifdef cout\nofstream fout(\"out.txt\");\n#endif\n\ndouble dot(Vector a, Vector b);\ndouble cross(Vector a, Vector b);\ndouble getDistanceSP(Point p, Point p1, Point p2);\ndouble angle(Vector a, Vector b);\nbool doIntersect(Point p1, Point p2, Point p3, Point p4);\ndouble getDistanceSS(Point p1, Point p2, Point p3, Point p4);\nvoid clockwise(Point p0, Point p1, Point p2);\n\nint main() {\n    int i, q;\n\tdouble x0, x1, x2, y0, y1, y2;\n\t\n\tcin >> x0 >> y0 >> x1 >> y1;\n\tPoint p0(x0, y0), p1(x1, y1);\n\tcin >> q;\n\tfor (i = 0; i < q; i++) {\n\t\tcin >> x2 >> y2;\n\t\tPoint p2(x2, y2);\n\t\tclockwise(p0, p1, p2);\n\t}\n#ifdef cin\n\tfin.close();\n#endif\n\n#ifdef cout\n\tfout.close();\n#endif\n\treturn 0;\n}\n\ndouble dot(Vector a, Vector b) {\n\treturn a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n\treturn a.x * b.y - a.y * b.x;\n}\n\ndouble getDistanceSP(Point p, Point p1, Point p2) {\n\tif (dot(p - p1, p2 - p1) < 0.0)return (p - p1).abs();\n\telse if (dot(p - p2, p1 - p2) < 0.0)return (p - p2).abs();\n\telse return  fabs(cross(p2 - p1, p - p1)) / (p2 - p1).abs();\n}\n\n\ndouble angle(Vector a, Vector b) {\n\tif (equals(dot(a, b), a.abs() * b.abs()))return 0.0;\n\telse if (equals(dot(a, b), (-1) * a.abs() * b.abs()))return M_PI;\n\tif (cross(a, b) > 0.0)return acos(dot(a, b) / a.abs() / b.abs());\n\telse return (-1) * acos(dot(a, b) / a.abs() / b.abs());\n}\n\nbool doIntersect(Point p1, Point p2, Point p3, Point p4) {\n\tif ((equals(fabs(angle(p2 - p1, p4 - p1)), 0) || equals(fabs(angle(p2 - p1, p4 - p1)), M_PI)) && (equals(fabs(angle(p2 - p1, p3 - p1)), 0) || equals(fabs(angle(p2 - p1, p3 - p1)), M_PI)))return false;\n\telse if (angle(p3 - p1, p4 - p1) >= angle(p3 - p1, p2 - p1) && angle(p3 - p1, p2 - p1) >= 0.0 && angle(p2 - p3, p1 - p3) >= angle(p2 - p3, p4 - p3) && angle(p2 - p3, p4 - p3) >= 0.0)return true;\n\telse if (angle(p3 - p2, p4 - p2) >= angle(p3 - p2, p1 - p2) && angle(p3 - p2, p1 - p2) >= 0.0 && angle(p1 - p3, p2 - p3) >= angle(p1 - p3, p4 - p3) && angle(p1 - p3, p4 - p3) >= 0.0)return true;\n\telse return false;\n}\n\ndouble getDistanceSS(Point p1, Point p2, Point p3, Point p4) {\n\tif (doIntersect(p1, p2, p3, p4))return 0;\n\telse return min({ getDistanceSP(p4, p1, p2), getDistanceSP(p3, p1, p2), getDistanceSP(p1, p3, p4), getDistanceSP(p2, p3, p4) });\n}\n\nvoid clockwise(Point p0, Point p1, Point p2) {\n\tif (p2 == p0 || p2 == p1) {\n\t\tcout << \"ON_SEGMENT\" << endl;\n\t} else if (angle(p1 - p0, p2 - p0) == 0.0) {\n\t\tif((p1 - p0).norm() < (p2 - p0).norm())cout << \"ONLINE_FRONT\" << endl;\n\t\telse cout << \"ON_SEGMENT\" << endl;\n\t} else if(angle(p1 - p0, p2 - p0) == M_PI){\n\t\tcout << \"ONLINE_BACK\" << endl;\n\t} else {\n\t\tif(angle(p1 - p0, p2 - p0) > 0.0)cout << \"COUNTER_CLOCKWISE\" << endl;\n\t\telse cout << \"CLOCKWISE\" << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "///\n// File:  cgl_1_c.cpp\n// Author: ymiyamoto\n//\n// Created on Mon Oct 23 00:28:22 2017\n//\n#include <cmath>\n#include <cstdint>\n#include <iomanip>\n#include <iostream>\n\nusing namespace std;\n\nstruct vector_t {\n  double x;\n  double y;\n\n  vector_t(double a, double b) : x(a), y(b)\n  {\n  }\n\n  double norm2()\n  {\n    return x * x + y * y;\n  }\n\n  double dot(vector_t a)\n  {\n    return x * a.x + y * a.y;\n  }\n\n  double cross(vector_t a)\n  {\n    return x * a.y - y * a.x;\n  }\n\n  vector_t operator*(double a)\n  {\n    return vector_t(a * x, a * y);\n  }\n};\n\nstruct point_t {\n  double x;\n  double y;\n\n  point_t operator+(const point_t a)\n  {\n    return point_t({x + a.x, y + a.y});\n  }\n\n  void print()\n  {\n    cout << fixed << setprecision(10) << x << \" \" << y << endl;\n  }\n\n  point_t operator+(const vector_t vec)\n  {\n    return point_t({x + vec.x, y + vec.y});\n  }\n\n  vector_t operator-(const point_t p)\n  {\n    return vector_t({x - p.x, y - p.y});\n  }\n\n  point_t project(point_t p1, point_t p2)\n  {\n    vector_t vec1(x - p1.x, y - p1.y);\n    vector_t vec2(p2.x - x, p2.y - y);\n    return point_t({x, y}) + vec1 * (vec1.dot(vec2) / vec1.norm2());\n  }\n\n  point_t reflect(point_t p1, point_t p2)\n  {\n    point_t proj = project(p1, p2);\n    return p2 + (proj - p2) * 2.0;\n  }\n};\n\n#define EPS 1e-10\n#define equals(x, y) (fabs(x - y) < EPS)\n\nint32_t main()\n{\n  double x, y;\n  cin >> x >> y;\n  point_t p0({x, y});\n  cin >> x >> y;\n  point_t p1({x, y});\n\n  uint32_t q;\n  cin >> q;\n  for (uint32_t i = 0; i < q; i++) {\n    cin >> x >> y;\n    point_t p2({x, y});\n    if ((p1 - p0).cross(p2 - p0) > EPS) {\n      cout << \"COUNTER_CLOCKWISE\" << endl;\n    } else if ((p1 - p0).cross(p2 - p0) < -EPS) {\n      cout << \"CLOCKWISE\" << endl;\n    } else if ((p1 - p0).dot(p2 - p0) < -EPS) {\n      cout << \"ONLINE_BACK\" << endl;\n    } else {\n      if ((p1 - p0).norm2() < (p2 - p0).norm2()) {\n        cout << \"ONLINE_FRONT\" << endl;\n      } else {\n        cout << \"ON_SEGMENT\" << endl;\n      }\n    }\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <complex>\n#include <map>\n#include <set>\n#include <vector>\n#include <stack>\n#include <queue>\n#include <bitset>\n#include <algorithm>\n#include <numeric>\n#include <functional>\nusing namespace std;\n\n#define Rep(b, e, i) for(int i = b; i <= e; i++)\n#define Repr(e, b, i) for(int i = e; i >= b; i--)\n#define rep(n, i) Rep(0, n-1, i)\n#define repr(n, i) Repr(n-1, 0, i)\n#define all(v) (v).begin(), (v).end()\n#define pb(v) push_back(v)\n#define uniq(v) (v).erase(unique(all(v)),(v).end())\n#define bitcnt(x) __builtin_popcount(x)\n#define fst first\n#define snd second\n#define Pqaz(T) priority_queue<T,vector<T>,greater<T>>\n#define Pqza(T) priority_queue<T>\n#define put(x) cout << x;\n#define puts(x) cout << x << ' ';\n#define putln(x) cout << x << endl;\n#define ENJYU std::ios::sync_with_stdio(false);std::cin.tie(0);\n\nconst double EPS = 1e-16;\ntypedef complex<double> comp;\n\nvoid solve(void){\n\n\tint x1, y1, x2, y2, Q;\n\tcin >> x1 >> y1 >> x2 >> y2 >> Q;\n\n\tcomp o(x1, y1), p(x2-x1, y2-y1), r;\n\n\t//回転用\n\tr = polar(1.0, arg(p));\n\n\twhile(Q--)\n\t{\n\t\tint x3, y3;\n\t\tcin >> x3 >> y3;\n\n\t\tcomp q(x3-x1, y3-y1);\n\n\t\tq /= r;\n\n\t\tif (abs(arg(q)) < EPS)\n\t\t{\n\t\t\tif (norm(p) >= norm(q))\n\t\t\t{\n\t\t\t\tputln(\"ON_SEGMENT\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tputln(\"ONLINE_FRONT\");\n\t\t\t}\n\t\t}\n\t\telse if (abs(arg(q)-M_PI) < EPS)\n\t\t{\n\t\t\tputln(\"ONLINE_BACK\");\n\t\t}\n\t\telse if (arg(q) > 0)\n\t\t{\n\t\t\tputln(\"COUNTER_CLOCKWISE\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tputln(\"CLOCKWISE\");\n\t\t}\n\t}\n}\n\nint main(void){\n\tsolve();\n\t//cout << \"yui(*-v・)yui\" << endl;\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ntemplate <class T> inline bool chmax(T &a, T b) {\n    if(a < b) {\n        a = b;\n        return 1;\n    }\n    return 0;\n}\ntemplate <class T> inline bool chmin(T &a, T b) {\n    if(a > b) {\n        a = b;\n        return 1;\n    }\n    return 0;\n}\ntypedef long long int ll;\n\n#define ALL(v) (v).begin(), (v).end()\n#define RALL(v) (v).rbegin(), (v).rend()\n#define endl \"\\n\"\nconst double EPS = 1e-8;\nconst int INF = 1 << 30;\nconst ll LLINF = 1LL << 60;\nconst double PI = acos(-1);\nconst int MOD = 1000000007;\nconst int dx[4] = {1, 0, -1, 0};\nconst int dy[4] = {0, 1, 0, -1};\n\n//-------------------------------------\n\nnamespace geometry {\n// Point : 複素数型を位置ベクトルとして扱う\n// 実軸(real)をx軸、挙軸(imag)をy軸として見る\nusing Point = complex<double>;\n\ninline bool equal(const double &a, const double &b) {\n    return fabs(a - b) < EPS;\n}\n\n// 単位ベクトル(unit vector)を求める\nPoint unitVector(const Point &a) { return a / abs(a); }\n\n// 法線ベクトル(normal vector)を求める\n// 90度回転した単位ベクトルをかける\n// -90度がよければPoint(0, -1)をかける\nPoint normalVector(const Point &a) { return a * Point(0, 1); }\n\n// 内積(dot product) : a・b = |a||b|cosΘ\ndouble dot(const Point &a, const Point &b) {\n    return (a.real() * b.real() + a.imag() * b.imag());\n}\n\n// 外積(cross product) : a×b = |a||b|sinΘ\ndouble cross(const Point &a, const Point &b) {\n    return (a.real() * b.imag() - a.imag() * b.real());\n}\n\n// 点pを反時計回りにtheta度回転\nPoint rotate(const Point &p, const double &theta) {\n    return Point(cos(theta) * p.real() - sin(theta) * p.imag(),\n                 sin(theta) * p.real() + cos(theta) * p.imag());\n}\n\n// ラジアン->度\ndouble radianToDegree(const double &radian) { return radian * 180.0 / PI; }\n\n// 度->ラジアン\ndouble degreeToRadian(const double &degree) { return degree * PI / 180.0; }\n\n// 点の回転方向\n// 点a, b, cの位置関係について\nint ccw(const Point &a, Point b, Point c) {\n    b -= a, c -= a;\n    // 点a, b, c が\n    // 反時計回りの時、\n    if(cross(b, c) > EPS) {\n        return 1;\n    }\n    // 時計回りの時、\n    if(cross(b, c) < -EPS) {\n        return -1;\n    }\n    // c, a, bがこの順番で同一直線上にある時、\n    if(dot(b, c) < 0) {\n        return 2;\n    }\n    // a, b, cがこの順番で同一直線上にある場合、\n    if(norm(b) < norm(c)) {\n        return -2;\n    }\n    // cが線分ab上にある場合、\n    return 0;\n}\n\n// Line : 直線を表す構造体\n// b - a で直線・線分を表せる\nstruct Line {\n    Point a, b;\n    Line() = default;\n    Line(Point a, Point b) : a(a), b(b) {}\n    // Ax+By=C\n    Line(double A, double B, double C) {\n        if(equal(A, 0)) {\n            a = Point(0, C / B), b = Point(1, C / B);\n        } else if(equal(B, 0)) {\n            b = Point(C / A, 0), b = Point(C / A, 1);\n        } else {\n            a = Point(0, C / B), b = Point(C / A, 0);\n        }\n    }\n    friend ostream &operator<<(ostream &os, Line &p) {\n        return os << p.a << \" to \" << p.b;\n    }\n\n    friend istream &operator>>(istream &is, Line &a) {\n        return is >> a.a >> a.b;\n    }\n};\n\n// Segment : 線分を表す構造体\n// Lineと同じ\nstruct Segment : Line {\n    Segment() = default;\n\n    Segment(Point a, Point b) : Line(a, b) {}\n};\n\n// Circle : 円を表す構造体\n// pが中心の位置ベクトル、rは半径\nstruct Circle {\n    Point p;\n    double r;\n\n    Circle() = default;\n\n    Circle(Point p, double r) : p(p), r(r) {}\n};\n\n// 2直線の直交判定 : a⊥b <=> dot(a, b) = 0\nbool isOrthogonal(const Line &a, const Line &b) {\n    return equal(dot(a.b - a.a, b.b - b.a), 0);\n}\n// 2直線の平行判定 : a//b <=> cross(a, b) = 0\nbool isParallel(const Line &a, const Line &b) {\n    return equal(cross(a.b - a.a, b.b - b.a), 0);\n}\n\n// 点cが直線ab上にあるか\nbool isPointOnLine(const Point &a, const Point &b, const Point &c) {\n    return isParallel(Line(a, b), Line(a, c));\n}\n\n// 点cが\"線分\"ab上にあるか\nbool isPointOnSegment(const Point &a, const Point &b, const Point &c) {\n    // |a-c| + |c-b| <= |a-b| なら線分上\n    return (abs(a - c) + abs(c - b) < abs(a - b) + EPS);\n}\n\n// 直線lと点pの距離を求める\ndouble distanceBetweenlAndp(const Line &l, const Point &p) {\n    return abs(cross(l.b - l.a, p - l.a)) / abs(l.b - l.a);\n}\n\n// 射影(projection)\n// 直線(線分)lに点pから引いた垂線の足を求める\nPoint projection(const Line &l, const Point &p) {\n    double t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n    return l.a + (l.a - l.b) * t;\n}\n\nPoint projection(const Segment &l, const Point &p) {\n    double t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n    return l.a + (l.a - l.b) * t;\n}\n\n// 反射(reflection)\n// 直線lを対称軸として点pと線対称の位置にある点を求める\nPoint reflection(const Line &l, const Point &p) {\n    return p + (projection(l, p) - p) * 2.0;\n}\n} // namespace geometry\n\nusing namespace geometry;\n\nint main() {\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    cout << fixed << setprecision(15);\n    double xp0, yp0, xp1, yp1;\n    cin >> xp0 >> yp0 >> xp1 >> yp1;\n    Point p0(xp0, yp0), p1(xp1, yp1);\n    int q;\n    cin >> q;\n    while(q--) {\n        double x, y;\n        cin >> x >> y;\n        Point p2(x, y);\n        int ans = ccw(p0, p1, p2);\n        if(ans == 1) {\n            cout << \"COUNTER_CLOCKWISE\" << endl;\n        } else if(ans == -1) {\n            cout << \"CLOCKWISE\" << endl;\n        } else if(ans == 2) {\n            cout << \"ONLINE_BACK\" << endl;\n        } else if(ans == -2) {\n            cout << \"ONLINE_FRONT\" << endl;\n        } else {\n            cout << \"ON_SEGMENT\" << endl;\n        }\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "\n//be naame khodaa\n#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef long double ld;\ntypedef pair <int, int> pii;\n#define F first\n#define S second\n\ninline int in(){int x, y; y = scanf(\"%d\", &x); return x; }\n\nconst int N = -1;\nconst ld EPS = 1e-12;\n\nstruct PT{\n\tld x, y;\n\tPT (ld x = 0, ld y = 0) : x(x), y(y) {}\n\tPT operator + (PT ro) const{\n\t\treturn PT(x+ro.x, y+ro.y);\n\t}\n\tPT operator - (PT ro) const{\n\t\treturn PT(x-ro.x, y-ro.y);\n\t}\n\tPT operator * (ld co) const{\n\t\treturn PT(x*co, y*co);\n\t}\n\tPT operator / (ld co) const{\n\t\treturn PT(x/co, y/co);\n\t}\n\tld operator * (PT ro) const{\n\t\treturn x*ro.x + y*ro.y;\n\t}\n\tld operator ^ (PT ro) const{\n\t\treturn x*ro.y - y*ro.x;\n\t}\n};\n\nPT operator * (ld co, PT p){\n\treturn p*co;\n}\n\nld len(PT a){\n\treturn sqrt(a*a);\n}\n\nPT unit(PT a){\n\treturn a/len(a);\n}\n\nPT perp(PT a){\n\treturn PT(-a.y, a.x);\n}\n\nPT proj(PT a, PT b, PT c){\n\tb = b-a, c = c-a;\n\treturn a + (b*c)/(b*b)*b;\n}\n\nPT reflect(PT a, PT b, PT c){\n\tPT d = c;\n\tb = b-a, c = c-a;\n\treturn d + (c^b)/len(b)*perp(unit(b))*2;\n}\n\nint sgn(PT a, PT b, PT c){\n\tld cr = (b-a)^(c-a);\n\treturn cr > EPS ? 1 : (cr + EPS < 0 ? -1 : 0);\n}\n\nint main(){\n\tPT a, b;;\n\tcin >> a.x >> a.y >> b.x >> b.y;\n\tPT p;\n\tcout << setprecision(10) << fixed;\n\tfor (int i = in(); i; i--){\n\t\tcin >> p.x >> p.y;\n\t\tint s = sgn(a, b, p);\n\t\tif (s == 1)\n\t\t\tcout << \"COUNTER_CLOCKWISE\\b\";\n\t\telse if (s == -1)\n\t\t\tcout << \"CLOCKWISE\\n\";\n\t\telse{\n\t\t\tp = p-a, b = b-a;\n\t\t\tld alpha = (p*b)/(b*b);\n\t\t\tif (alpha + EPS < 0)\n\t\t\t\tcout << \"ONLINE_BACK\\n\";\n\t\t\telse if (alpha > 1 + EPS)\n\t\t\t\tcout << \"ONLINE_FRONT\\n\";\n\t\t\telse\n\t\t\t\tcout << \"ON_SEGMENT\\n\";\n\t\t}\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "\n#include <iostream>\n#include <cmath>\n#include <vector>\n#include <set>\n#include <algorithm>\nusing namespace std;\n\nnamespace Geometry{\n  #define EPS (1e-10)\n  #define equals(a,b) (fabs((a)-(b)) < EPS)\n\n  class Point{\n  public:\n    double x,y;\n\n    Point(double x = 0,double y = 0): x(x),y(y){}\n    Point operator + (Point p){ return Point(x + p.x , y + p.y); }\n    Point operator - (Point p){ return Point(x - p.x , y - p.y); }\n    Point operator * (double a){ return Point(a * x , a * y); }\n    Point operator / (double a){ return Point(x / a , y / a); }\n\n    double abs(){ return sqrt(norm()); }\n    double norm(){ return x * x + y * y; }\n\n    bool operator < (const Point &p) const{\n      return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point &p) const{\n      return (fabs(x - p.x) < EPS) && (fabs(y - p.y) < EPS);\n    }\n\n    friend ostream& operator << (ostream &os,Point &p){\n      return os << p.x << \" \" << p.y << \"\\n\";\n    }\n\n    friend istream& operator >> (istream &is,Point &p){\n      return is >> p.x >> p.y;\n    }\n  };\n  typedef Point Vector;\n\n  struct Segment{\n    Point p1,p2;\n    Segment(){};\n    Segment(Point p1,Point p2): p1(p1) , p2(p2){};\n    friend ostream& operator << (ostream &os,Segment &p){\n      return os << p.p1.x << \" \" << p.p1.y << \" \" << p.p2.x << \" \" << p.p2.y << \"\\n\";\n    }\n\n    friend istream& operator >> (istream &is,Segment &p){\n      return is >> p.p1.x >> p.p1.y >> p.p2.x >> p.p2.y;\n    }\n  };\n  typedef Segment Line;\n\n  class Circle{\n  public:\n    Point c;\n    double r;\n    Circle(Point c = Point(),double r = 0.0): c(c),r(r){}\n    friend ostream& operator << (ostream &os,Circle &c){\n      return os << c.c.x << c.c.y << c.r << \"\\n\";\n    }\n\n    friend istream& operator >> (istream &is,Circle &c){\n      return is >> c.c.x >> c.c.y >> c.r;\n    }\n  };\n\n  typedef vector<Point> Polygon;\n\n  double norm(Vector a){\n    return  a.x * a.x + a.y * a.y;\n  }\n\n  double abs(Vector a){\n    return sqrt(norm(a));\n  }\n\n  double dot(Vector a,Vector b){\n    return a.x * b.x + a.y * b.y;\n  }\n\n  double cross(Vector a,Vector b){\n    return a.x * b.y - a.y * b.x;\n  }\n\n  bool isOrthogonal(Vector a,Vector b){\n    return equals(dot(a,b),0.0);\n  }\n\n  bool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n    return isOrthogonal(a1 - a1,b1 - b2);\n  }\n\n  bool isOrthogonal(Segment s1,Segment s2){\n    return equals(dot(s1.p2 - s1.p1,s2.p2 - s2.p1) , 0.0);\n  }\n\n  bool isParallel(Vector a,Vector b){\n    return equals(cross(a,b),0.0);\n  }\n\n  bool isParallel(Point a1,Point a2,Point b1,Point b2){\n    return isParallel(a1 - a2 , b1 - b2);\n  }\n\n  bool isParallel(Segment s1,Segment s2){\n    return equals(cross(s1.p2 - s1.p1 , s2.p2 - s2.p1),0.0);\n  }\n\n  Point project(Segment s,Point p){\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1 , base / norm(base));\n    return s.p1 + base * r;\n  }\n\n  Point reflect(Segment s,Point p){\n    return p + (project(s,p) - p) * 2.0;\n  }\n\n  static const int COUNTER_CLOCKWISE = 1;\n  static const int CLOCKWISE = -1;\n  static const int ONLINE_BACK = 2;\n  static const int ONLINE_FRONT = -2;\n  static const int ON_SEGMENT = 0;\n\n  int ccw(Point p0,Point p1,Point p2){\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if(cross(a,b) > EPS)return COUNTER_CLOCKWISE;\n    if(cross(a,b) < -EPS)return CLOCKWISE;\n    if(dot(a,b) < -EPS)return ONLINE_BACK;\n    if(a.norm() < b.norm())return ONLINE_FRONT;\n    return ON_SEGMENT;\n  }\n\n  bool intersect(Point p1,Point p2,Point p3,Point p4){\n    return (ccw(p1,p2,p3) * ccw(p1,p2,p4) <= 0 && \n            ccw(p3,p4,p1) * ccw(p3,p4,p2) <= 0);\n  }\n\n  bool intersect(Segment s1,Segment s2){\n    return intersect(s1.p1 , s1.p2 , s2.p1 , s2.p2);\n  }\n\n  double getDistance(Vector a,Vector b){\n    return abs(a - b);\n  }\n\n  double getDistanceLP(Line l,Point p){\n    return abs(cross(l.p2 - l.p1 , p - l.p1) / abs(l.p2 - l.p1));\n  }\n\n  double getDistanceSP(Segment s,Point p){\n    if(dot(s.p2 - s.p1,p - s.p1) < 0.0) return abs(p - s.p1);\n    if(dot(s.p1 - s.p2,p - s.p2) < 0.0) return abs(p - s.p2);\n    return getDistanceLP(s,p);\n  }\n\n  double getDistance(Segment s1,Segment s2){\n    if(intersect(s1,s2))return 0.0;\n    return min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),\n              min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n  }\n\n  Point getCrossPoint(Segment s1,Segment s2){\n    Vector base = s2.p2 - s2.p1;\n    double d1 = abs(cross(base,s1.p1 - s2.p1));\n    double d2 = abs(cross(base,s1.p2 - s2.p1));\n    double t = d1 / (d1 + d2);\n    return s1.p1 + (s1.p2 - s1.p1) * t;\n  }\n\n  pair<Point,Point> getCrossPoints(Circle c,Line l){\n    // assert(intersect(c,l));\n    Vector pr = project(l,c.c);\n    Vector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);\n    double base = sqrt(c.r * c.r - norm(pr - c.c));\n    return make_pair(pr + e * base , pr - e * base);\n  }\n\n  double arg(Vector p){\n    return atan2(p.y,p.x);\n  }\n\n  Vector polar(double a,double r){\n    return Point(cos(r) * a, sin(r) * a);\n  }\n\n  pair<Point,Point> getCrossPoints(Circle c1,Circle c2){\n    // assert(intersect(c1,c2));\n    double d = abs(c1.c - c2.c);\n    double a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n    double t = arg(c2.c - c1.c);\n    return make_pair(c1.c + polar(c1.r,t + a),c1.c + polar(c1.r,t - a));\n  }\n\n  int contains(Polygon g,Point p){\n    int n = g.size();\n    bool x = false;\n    for(int i = 0;i < n;i++){\n      Point a = g[i] - p, b = g[(i + 1) % n] - p;\n      if(abs(cross(a,b)) < EPS && dot(a,b) < EPS)return 1;\n      if(a.y < b.y)swap(a,b);\n      if(a.y < EPS && EPS < b.y && cross(a,b) > EPS)x = !x;\n    }\n    return (x ? 2 : 0);\n  }\n\n  Polygon andrewScan(Polygon s){\n    Polygon u,l;\n    if(s.size() < 3)return s;\n    sort(s.begin(),s.end());\n    u.push_back(s[0]);\n    u.push_back(s[1]);\n\n    l.push_back(s[s.size() - 1]);\n    l.push_back(s[s.size() - 2]);\n\n    for(int i = 2;i < s.size();i++){\n      for(int n = u.size();n >= 2 && ccw(u[n-2],u[n-1],s[i]) != CLOCKWISE;n--){\n        u.pop_back();\n      }\n      u.push_back(s[i]);\n    }\n\n    for(int i = s.size() - 3; i >= 0;i--){\n      for(int n = l.size();n >= 2 && ccw(l[n-2],l[n-1],s[i]) != CLOCKWISE;n--){\n        l.pop_back();\n      }\n      l.push_back(s[i]);\n    }\n    reverse(l.begin(),l.end());\n    for(int i = u.size() - 2;i >= 1;i--)l.push_back(u[i]);\n    return l;\n  }\n\n  #define BOTTOM 0\n  #define LEFT 1\n  #define RIGHT 2\n  #define TOP 3\n\n  class EndPoint{\n  public:\n    Point p;\n    int seg,st;\n    EndPoint(){}\n    EndPoint(Point p,int seg,int st): p(p),seg(seg),st(st){}\n\n    bool operator < (const EndPoint &ep) const{\n      if(p.y == ep.p.y){\n        return st < ep.st;\n      }else{\n        return p.y < ep.p.y;\n      }\n    }\n  };\n\n  EndPoint EP[2 * 100000];\n\n  int manhattanIntersection(vector<Segment> S){\n    int n = S.size();\n    for(int i = 0,k = 0;i < n;i++){\n      if(S[i].p1.y == S[i].p2.y){\n        if(S[i].p1.x > S[i].p2.x)swap(S[i].p1,S[i].p2);\n      }else if(S[i].p1.y > S[i].p2.y){\n        swap(S[i].p1,S[i].p2);\n      }\n\n      if(S[i].p1.y == S[i].p2.y){\n        EP[k++] = EndPoint(S[i].p1,i,LEFT);\n        EP[k++] = EndPoint(S[i].p2,i,RIGHT);\n      }else{\n        EP[k++] = EndPoint(S[i].p1,i,BOTTOM);\n        EP[k++] = EndPoint(S[i].p2,i,TOP);\n      }\n    }\n\n    sort(EP,EP + (2 * n));\n\n    set<int> BT;\n    BT.insert(1000000001);\n    int cnt = 0;\n    for(int i = 0;i < 2 * n;i++){\n      if(EP[i].st == TOP){\n        BT.erase(EP[i].p.x);\n      }else if(EP[i].st == BOTTOM){\n        BT.insert(EP[i].p.x);\n      }else if(EP[i].st == LEFT){\n        set<int>::iterator b = lower_bound(BT.begin(),BT.end(),S[EP[i].seg].p1.x);\n        set<int>::iterator e = upper_bound(BT.begin(),BT.end(),S[EP[i].seg].p2.x);\n        cnt += distance(b,e);\n      }\n    }\n    return cnt;\n  }\n};\n\nusing namespace Geometry;\n\nint main(){\n  Point a,b,c;\n  cin >> a >> b;\n  int n;\n  cin >> n;\n  while(n--){\n    cin >> c;\n    switch(ccw(a,b,c)){\n      case COUNTER_CLOCKWISE:\n        puts(\"COUNTER_CLOCKWISE\");\n        break;\n      case CLOCKWISE:\n       puts(\"CLOCKWISE\");\n       break;\n      case ONLINE_BACK:\n        puts(\"ONLINE_BACK\");\n        break;\n      case ONLINE_FRONT:\n        puts(\"ONLINE_FRONT\");\n        break;\n      case ON_SEGMENT:\n        puts(\"ON_SEGMENT\");\n        break;\n    }\n  }\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint main() {\n\tcin.tie(0); ios::sync_with_stdio(false);\n\tint x0, y0, x1, y1; cin >> x0 >> y0 >> x1 >> y1;\n\tint X1 = x1 - x0, Y1 = y1 - y0;\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tint x2, y2; cin >> x2 >> y2;\n\t\tint X2 = x2 - x0, Y2 = y2 - y0;\n\t\tlong long cross = X1*Y2 - Y1*X2;\n\t\tif (cross > 0) { cout << \"COUNTER_CLOCKWISE\" << endl; continue; }\n\t\tif (cross < 0) { cout << \"CLOCKWISE\" << endl; continue; }\n\t\t//??????????????§cross == 0 ?????????????¢????\n\t\tlong long dot = X1*X2 + Y1*Y2;\n\t\tif (dot < 0) { cout << \"ONLINE_BACK\" << endl; continue; }\n\t\t//???????????§????????????ONLINE_FRONT???ON_SEGMENT\n\t\t//???????????????????¨????????????¨?????????????????????????????????????????§???????????±???????????????\n\t\tlong long dis1 = X1/hypot(X1,Y1) * X1 + Y1/hypot(X1,Y1)*Y1, dis2 = X2/hypot(X2,Y2)*X2 + Y2/hypot(X2,Y2)*Y2;\n\t\tif (dis1 < dis2) { cout << \"ONLINE_FRONT\" << endl; continue; }\n\t\tcout << \"ON_SEGMENT\" << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <iostream>\n\nusing namespace std;\n\n#define EPS 1e-14\n\n#define PI 3.1415926535897932385\n\ndouble dist(int x, int y)\n{\n\treturn sqrt(x * x + y * y);\n}\n\ndouble angle(int x, int y)\n{\n\treturn atan2((double)(y), (double)(x));\n}\n\nint main()\n{\n\tint x0, y0, x1, y1, x2, y2, q;\n\n\tcin >> x0 >> y0 >> x1 >> y1 >> q;\n\n\tfor (int i = 0; i < q; i++)\n\t{\n\t\tcin >> x2 >> y2;\n\n\t\tint ax = x1 - x0;\n\t\tint ay = y1 - y0;\n\t\tint bx = x2 - x0;\n\t\tint by = y2 - y0;\n\n\t\tdouble ad = dist(ax, ay);\n\t\tdouble bd = dist(bx, by);\n\n\t\tdouble at = angle(ax, ay);\n\t\tdouble bt = angle(bx, by);\n\n\t\tdouble st = bt - at;\n\n\t\tif (st < -PI - EPS)\n\t\t{\n\t\t\tst += 2 * PI;\n\t\t}\n\n\t\tif (st > PI + EPS)\n\t\t{\n\t\t\tst -= 2 * PI;\n\t\t}\n\n\t\tif (bx == 0 && by == 0)\n\t\t{\n\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t}\n\t\telse if (PI - EPS < abs(st) && abs(st) < PI + EPS)\n\t\t{\n\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t}\n\t\telse if (-EPS < st && st < EPS)\n\t\t{\n\t\t\tif (ad < bd)\n\t\t\t{\n\t\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t\t}\n\t\t}\n\t\telse if (st > EPS)\n\t\t{\n\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\t}\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define PI acos(-1.0)\n#define EPS 1e-9\n\ndouble toRadian(double deg) {return ((deg*PI)/180.0);}\ndouble toDegree(double radian) {return ((radian*180.0)/PI);}\ndouble handleNegZero(double x) {return ((abs(x) < EPS)?0.0:x);}\n\nstruct point_i { int x, y;     // whenever possible, work with point_i\n  point_i() { x = y = 0; }                      // default constructor\n  point_i(int _x, int _y) : x(_x), y(_y) {} };         // user-defined\n\nstruct Point { //Integer Point\n    double x, y;\n    Point(){}\n    Point(double _x, double _y):x(_x), y(_y){}\n\n    bool operator < (Point other) const {\n        if(fabs(x - other.x) > EPS)\n            return x < other.x;\n        return y < other.y;\n    }\n\n    bool operator == (Point other) const {\n        return ((fabs(x - other.x) < EPS) && (fabs(y - other.y) < EPS));\n    }\n};\n\ndouble pointDistaceSquared2D (Point a, Point b) {return (a.x - b.x)*(a.x - b.x) + (a.y - b.y)*(a.y - b.y);}\ndouble dist (Point a, Point b) {return sqrt(pointDistaceSquared2D(a, b));}\n// rotate p by theta degrees CCW w.r.t origin (0, 0)\nPoint rotate(Point p, double theta) {\n    double rad = toRadian(theta);\n    return Point(p.x * cos(rad) - p.y * sin(rad),\n                 p.x * sin(rad) + p.y * cos(rad));\n}\n\nstruct line {double a, b, c;};\nvoid pointsToLine(Point p1, Point p2, line &l) {\n    if(fabs(p1.x-p2.x) < EPS) {\n        l.a = 1.0; l.b = 0.0; l.c = -p1.x;\n    } else {\n        l.a = -(double)(p1.y-p2.y) / (p1.x-p2.x);\n        l.b = 1.0;\n        l.c = -(double)(l.a*p1.x)-p1.y;\n    }\n}\n\nbool areParallel(line l1, line l2) {\n    return (fabs(l1.a-l2.a) < EPS) && (fabs(l1.b-l2.b) < EPS);\n}\n\nbool areSame(line l1, line l2) {\n    return areParallel(l1, l2) && (fabs(l1.c-l2.c) < EPS);\n}\n\nbool areIntersect(line l1, line l2, Point &p) {\n    if(areParallel(l1, l2)) return false;\n    p.x = (l2.b*l1.c-l1.b*l2.c) / (l2.a*l1.b-l1.a*l2.b);\n    if(fabs(l1.b) > EPS) p.y = -(l1.a*p.x+l1.c);\n    else                 p.y = -(l2.a*p.x+l2.c);\n    return true;\n}\n\nstruct vec {\n    double x, y;\n    vec(){}\n    vec(double _x, double _y):x(_x), y(_y){}\n};\n\nvec toVec(Point a, Point b) {return vec(b.x - a.x, b.y - a.y);}\nvec scale(vec v, double s) {return vec(v.x*s, v.y*s);}\nPoint translate(Point p, vec v) {return Point(p.x + v.x, p.y + v.y);}// translate p according to v\ndouble dot(vec a, vec b) {return (a.x*b.x + a.y*b.y);}\ndouble norm_sq(vec v) {return v.x*v.x + v.y*v.y;}\n\n// returns the distance from p to the line defined by\n// two points a and b (a and b must be different)\n// the closest point is stored in the 4th parameter (byref)\ndouble distToLine(Point p, Point a, Point b, Point &c) {\n    // formula: c = a + u* ab\n    vec ap = toVec(a, p), ab = toVec(a, b);\n    double u = dot(ap, ab) / norm_sq(ab);\n    c = translate(a, scale(ab, u));\n    return dist(p, c);\n}\n\n// returns the distance from p to the line segment ab defined by\n// two points a and b (still OK if a == b)\n// the closest point is stored in the 4th parameter (byref)\ndouble distToLineSegment(Point p, Point a, Point b, Point &c) {\n    vec ap = toVec(a, p), ab = toVec(a, b);\n    double u = dot(ap, ab) / norm_sq(ab);\n    if (u < 0.0) {\n        c = Point(a.x, a.y);\n        return dist(p, a);\n    }\n\n    if(u > 1.0) {\n        c = Point(b.x, b.y);\n        return dist(p, b);\n    }\n\n    return distToLine(p, a, b, c);\n}\n\ndouble angle(Point a, Point o, Point b) { // returns angle aob in rad\n    vec oa = toVec(o, a), ob = toVec(o, b);\n    return acos(dot(oa, ob) / sqrt(norm_sq(oa) * norm_sq(ob)));\n}\n\ndouble cross(vec a, vec b) {return a.x*b.y - a.y*b.x;}\n// note: to accept collinear points, we have to change the '> 0'\n// returns true if point r is on the left side of line pq\nbool ccw(Point p, Point q, Point r) {return cross(toVec(p, q), toVec(p, r)) > 0;}\n// returns true if point r is on the same line as the line pq\nbool collinear(Point p, Point q, Point r) {\n    return fabs(cross(toVec(p, q), toVec(p, r))) < EPS;\n}\n\nint main() {\n    //freopen(\"in\", \"r\", stdin);\n    //freopen(\"out\", \"w\", stdout);\n    double x0, y0, x1, y1, x2, y2;\n    int q;\n    Point a, b, c;\n\n    scanf(\"%lf %lf %lf %lf\", &x0, &y0, &x1, &y1);\n    scanf(\"%d\", &q);\n    a = Point(x0, y0);\n    b = Point(x1, y1);\n\n    for(int i = 0; i < q; i++) {\n        scanf(\"%lf %lf\", &x2, &y2);\n        c = Point(x2, y2);\n\n        if(ccw(a, b, c)) {\n            printf(\"COUNTER_CLOCKWISE\\n\");\n        } else if(collinear(a, b, c)) {\n            if(abs(PI - angle(c, a, b)) < EPS) {\n                printf(\"ONLINE_BACK\\n\");\n            } else if(norm_sq(toVec(a, c)) - norm_sq(toVec(a, b)) > EPS) {\n                printf(\"ONLINE_FRONT\\n\");\n            } else {\n                printf(\"ON_SEGMENT\\n\");\n            }\n        } else {\n            printf(\"CLOCKWISE\\n\");\n        }\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\nnamespace geometry {\n\tusing Real = double;\n\tusing Point = complex<Real>;\n\tconstexpr Real EPS = 1e-9;\n\tstruct Circle {\n\t\tPoint p;\n\t\tReal r;\n\t\tCircle(const Point p, const Real r) : p(p), r(r) {}\n\t};\n\tstruct Line {\n\t\tPoint a, b;\n\t\tLine(const Point a, const Point b) : a(a), b(b) {}\n\t};\n\t// 内積\n\tinline Real dot(const Point& lhs, const Point& rhs) {\n\t\treturn (conj(lhs) * rhs).real();\n\t}\n\t// 外積\n\tinline Real cross(const Point& lhs, const Point& rhs) {\n\t\treturn (conj(lhs) * rhs).imag();\n\t}\n\t// 円の交点\n\tvector<Point> intersect(const Circle& c1, const Circle& c2) {\n\t\tconst Real dist = abs(c1.p - c2.p);\n\t\tvector<Point> ret;\n\t\tif(dist > c1.r + c2.r) return ret;\n\t\tif(dist < abs(c1.r - c2.r)) return ret;\n\t\tconst Real rc = (dist * dist + c1.r * c1.r - c2.r * c2.r) / (2 * dist);\n\t\tconst Real rs = sqrt(c1.r * c1.r - rc * rc);\n\t\tconst Point vec = (c2.p - c1.p) / dist;\n\t\tret.emplace_back(c1.p + vec * Point(rc, rs));\n\t\tret.emplace_back(c1.p + vec * Point(rc, -rs));\n\t\treturn ret;\n\t}\n\t// a の b に対する正射影ベクトル\n\tinline Point projection(const Point& a, const Point& b) {\n\t\treturn b * dot(a, b) / norm(b);\n\t}\n\t// 点pから直線lに下ろした垂線の足\n\tinline Point projection(const Line& l, const Point& p) {\n\t\treturn projection(p - l.a, l.b - l.a) + l.a;\n\t}\n\t// 直線lを対称軸として点pと線対称な点\n\tinline Point reflection(const Line &l, const Point &p) {\n\t\treturn p + (projection(l, p) - p) * 2.0;\n\t}\n\t// 反時計回り(a -> b -> c)\n\tstatic constexpr int COUNTER_CLOCKWISE = 0b00001;\n\t// 時計回り(a -> b -> c)\n\tstatic constexpr int CLOCKWISE = 0b00010;\n\t// 同一直線上(c -> a -> b)\n\tstatic constexpr int ONLINE_BACK = 0b00100;\n\t// 同一直線上(a -> b -> c)\n\tstatic constexpr int ONLINE_FRONT = 0b01000;\n\t// 同一直線上(a -> c -> b)\n\tstatic constexpr int ON_SEGMENT = 0b10000;\n\t// 3点の位置関係\n\tint ccw(const Point &a, Point b, Point c) {\n\t\tb = b - a, c = c - a;\n\t\tif(cross(b, c) > EPS) return COUNTER_CLOCKWISE;\n\t\tif(cross(b, c) < -EPS) return CLOCKWISE;\n\t\tif(dot(b, c) < 0) return ONLINE_BACK;\n\t\tif(norm(b) < norm(c)) return ONLINE_FRONT;\n\t\treturn ON_SEGMENT;\n\t}\n\n\n\t// 直線の交点\n\t// Point intersect(const Line& l1, const Line& l2) {\n\t// \tconst Point v1 = l1.p2 - l1.p1;\n\t// \tconst Point v2 = l2.p2 - l2.p1;\n\n\t// }\n\n\tinline istream& operator>>(istream& is, Point& p) {\n\t\tReal x, y;\n\t\tis >> x >> y;\n\t\tp = Point(x, y);\n\t\treturn is;\n\t}\n\tinline ostream& operator<<(ostream& os, const Point &p) {\n\t\treturn os << fixed << setprecision(15) << p.real() << \" \" << p.imag();\n\t}\n}\n\nusing namespace geometry;\nint main() {\n\tPoint p0, p1; cin >> p0 >> p1;\n\tint q; cin >> q;\n\twhile(q--) {\n\t\tPoint p2; cin >> p2;\n\t\tint ret = ccw(p0, p1, p2);\n\t\tstring ans;\n\t\tif(ret & COUNTER_CLOCKWISE) ans = \"COUNTER_CLOCKWISE\";\n\t\tif(ret & CLOCKWISE) ans = \"CLOCKWISE\";\n\t\tif(ret & ONLINE_BACK) ans = \"ONLINE_BACK\";\n\t\tif(ret & ONLINE_FRONT) ans = \"ONLINE_FRONT\";\n\t\tif(ret & ON_SEGMENT) ans = \"ON_SEGMENT\";\n\t\tcout << ans << '\\n';\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <vector>\n#include <stack>\n#include <queue>\n#include <map>\n#include <cmath>\n#include <string>\n#include <sstream>\n#include <iomanip>\n#include <complex>\nusing namespace std;\n\n#define ll long long\n#define vvi vector< vector<int> >\n#define All(X) X.begin(),X.end()\n#define FOR(i,a,b) for(int i=(int)(a);i<(int)(b);i++)\n#define REP(i,n) for(int i=0;i<(int)(n);i++)\ntypedef long double ld;\ntypedef complex<ld> Point;\nconst ld eps = 1e-10, pi = acos(-1.0);\n\nbool eq(ld a,ld b) {\n  return (abs(a - b) < eps);\n}\n // 内積\n ld dot(Point a, Point b) {\n return real(conj(a) * b);\n }\n // 外積\n ld cross(Point a, Point b) {\n return imag(conj(a) * b);\n }\n\nint ccw (Point a, Point b, Point c){\n  b-=a; c-=a;\n  if (cross(b, c) > eps) return 0; // a,b,cが反時計周り\n  if (cross(b, c) < -eps) return 1; // a,b,cが時計周り\n  if (dot(b, c) < 0) return 2; // c,a,b順でon line\n  if (norm(b) < norm(c)) return 3; // a,b,c順にon line\n  return 4; // a,c,b順にon line\n}\n\n\nint main(){\n  Point a,b,c;\n  ld tmp[4];\n  REP(i,4) cin >> tmp[i];\n  a = Point(tmp[0],tmp[1]);\n  b = Point(tmp[2],tmp[3]);\n  int q;\n  cin >> q;\n  string rs[5]={\"COUNTER_CLOCKWISE\",\"CLOCKWISE\",\"ONLINE_BACK\",\"ONLINE_FRONT\",\"ON_SEGMENT\"};\n  REP(i,q){\n    cin >> tmp[0] >> tmp[1];\n    c = Point(tmp[0],tmp[1]);\n    cout << rs[ccw(a,b,c)] << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long lint;\ntypedef long double louble;\n\ntemplate<typename T1,typename T2> inline T1 max(T1 a,T2 b){return a<b?b:a;}\ntemplate<typename T1,typename T2> inline T1 min(T1 a,T2 b){return a<b?a:b;}\n\nnamespace ae86\n{\n\tconst int bufl = 1<<15;\n\n\tchar buf[bufl],*s=buf,*t=buf;\n\n\tinline int fetch()\n\t{\n\t\tif(s==t){t=(s=buf)+fread(buf,1,bufl,stdin);if(s==t)return EOF;}\n\t\treturn *s++;\n\t}\n\n\tinline int ty()\n\t{\n\t\tint a=0,b=1,c=fetch();\n\t\twhile(!isdigit(c))b^=c=='-',c=fetch();\n\t\twhile(isdigit(c))a=a*10+c-48,c=fetch();\n\t\treturn b?a:-a;\n\t}\n}\nusing ae86::ty;\n\nconst double eps = 1e-11;\n\ninline int dcmp(double x){if(-eps<x && x<eps)return 0;return x>0?1:-1;}\n\nstruct points\n{\n\tdouble x,y;\n\tpoints(double _x=0,double _y=0){x=_x,y=_y;}\n\n\tinline friend points operator + (points a,points b){return points(a.x+b.x,a.y+b.y);}\n\tinline friend points operator - (points a,points b){return points(a.x-b.x,a.y-b.y);}\n\tinline friend points operator * (points a,double b){return points(a.x*b,a.y*b);}\n\tinline friend points operator / (points a,double b){return points(a.x/b,a.y/b);}\n\n\tinline friend int operator == (points a,points b){return dcmp(a.x-b.x)==0 && dcmp(a.y-b.y)==0;}\n\n\tvoid takein(){x=ty(),y=ty();}\n\tvoid print(char ends='\\n'){printf(\"%.12lf %.12lf\",x,y),putchar(ends);}\n};\n\ninline double dox(points a,points b){return a.x*b.x+a.y*b.y;}\ninline double cox(points a,points b){return a.x*b.y-a.y*b.x;}\ninline double length(points a){return sqrt(dox(a,a));}\n\ninline points pervec(points a){if(dcmp(length(a))<=0)return points(0,0);return a/length(a);}\n\nvoid finder(points va,points vb)\n{\n\tdouble cx=cox(va,vb);\n\n\tif(dcmp(cx)==1)puts(\"COUNTER_CLOCKWISE\");\n\telse if(dcmp(cx)==-1)puts(\"CLOCKWISE\");\n\telse\n\t{\n\t\tpoints pa=pervec(va),pb=pervec(vb);\n\t\tif(pa==points(0,0) || pb==points(0,0))puts(\"ON_SEGMENT\");\n\t\telse if(pa==pb)\n\t\t{\n\t\t\tif(length(va)>=length(vb))puts(\"ON_SEGMENT\");\n\t\t\telse puts(\"ONLINE_FRONT\");\n\t\t}\n\t\telse puts(\"ONLINE_BACK\");\n\t}\n}\n\nint main()\n{\n\tpoints bas,a,b;\n\tbas.takein(),a.takein();\n\n\tint q=ty();\n\twhile(q--)b.takein(),finder(a-bas,b-bas);\n\t\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<cmath>\n#include<algorithm>\n\nusing namespace std;\n\nint main()\n{\n\tdouble p1x, p1y, p2x, p2y, p0x, p0y;\n\tint q;\n\n\tscanf(\"%lf %lf %lf %lf\", &p0x, &p0y, &p1x, &p1y);\n\n\tpair<double, double> v01 = { p1x - p0x, p1y - p0y };\n\n\n\tscanf(\"%d\", &q);\n\n\tfor (int i = 0; i < q; i++)\n\t{\n\t\tscanf(\"%lf %lf\", &p2x, &p2y);\n\n\t\tif ((p2x == p0x && p2y == p0y) || (p2x == p1x && p2y == p1y)){\n\t\t\tprintf(\"ONLINE_SEGMENT\\n\");\n\n\t\t\tcontinue;\n\t\t}\n\n\t\tpair<double, double> v02 = { p2x - p0x, p2y - p0x };\n\n\t\tif (v01.first*v02.second == v01.second*v02.first)\n\t\t{\n\t\t\tif (v01.first*v02.first < 0)\n\t\t\t{\n\t\t\t\tprintf(\"ONLINE_BACK\\n\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tabs(v01.first) < abs(v02.first) ? printf(\"ONLINE_FRONT\\n\") : printf(\"ONLINE_SEGMENT\\n\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t\tdouble sin = (v01.first*v02.second - v01.second*v02.first);\n\n\t\tif (sin > 0){\n\t\t\tprintf(\"COUNTER_CLOCKWISE\\n\");\n\n\t\t\tcontinue;\n\t\t}\n\t\telse{\n\t\t\tprintf(\"CLOCKWISE\\n\");\n\n\t\t\tcontinue;\n\t\t}\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#define TEST_MODE 1\n\n#ifndef __VECD__\n#define __VECD__\n#include <vector>\n#include <numeric>\n#include <iomanip>\n#include <iostream>\n#define rep(n) for(int i=0;i<n;i++)\n#define PB push_back\n#define VecND VecD<std::vector<double> >\n#if TEST_MODE\n#define Vec3D _VecD<double, 3>\n#define Vec2D _VecD<double, 2>\n#endif\n#endif\n\ntemplate <typename U>                       class VecD;\n\n#if TEST_MODE\ntemplate <typename TYPE, unsigned int SIZE> class _VecD;\n#endif\n\ntemplate <typename U> const VecD<U> projection(const VecD<U> &p1, const VecD<U> &p2);\n\ntemplate <typename U> class VecD{\ntemplate <typename DUMMY>      friend const double operator*(const VecD&, const VecD&);\ntemplate <typename T>          friend const VecD operator*(const T&, const VecD&);\ntemplate <typename T, class C> friend const C operator*(const C&, const T&);\ntemplate <typename DUMMY>      friend const VecD operator+(const VecD&, const VecD&);\ntemplate <typename T>          friend const VecD operator+(const T&, const VecD&);\ntemplate <typename T, class C> friend const C operator+(const C&, const T&);\ntemplate <class C>             friend const C operator-(const C&);\ntemplate <class C>             friend const C operator-(const C&, const C&);\ntemplate <typename T, class C> friend const C operator-(const T&, const C&);\ntemplate <typename T, class C> friend const C operator-(const C&, const T&);\ntemplate <typename DUMMY>      friend std::ostream& operator<<(std::ostream&, const VecD&);\npublic:\n\tU vec;\n\tVecD(){}\n\tVecD(U v){\n\t\tvec = v;\n\t}\n\tconst double dot(const VecD &p) const{\n\t\treturn inner_product( this->vec.begin(), this->vec.end(), p.vec.begin(), 0);\n\t}\n};\n\n#if TEST_MODE\ntemplate <typename TYPE, unsigned int SIZE> class _VecD{\ntemplate <typename DUMMY>      friend const double operator*(const _VecD&, const _VecD&);\ntemplate <typename T>          friend const _VecD operator*(const T&, const _VecD&);\ntemplate <typename T, class C> friend const C operator*(const C&, const T&);\ntemplate <typename DUMMY>      friend const _VecD operator+(const _VecD&, const _VecD&);\ntemplate <typename T>          friend const _VecD operator+(const T&, const _VecD&);\ntemplate <typename T, class C> friend const C operator+(const C&, const T&);\ntemplate <class C>             friend const C operator-(const C&);\ntemplate <class C>             friend const C operator-(const C&, const C&);\ntemplate <typename T, class C> friend const C operator-(const T&, const C&);\ntemplate <typename T, class C> friend const C operator-(const C&, const T&);\ntemplate <typename DUMMY>      friend std::ostream& operator<<(std::ostream&, const _VecD&);\n\npublic:\n\tTYPE vec[SIZE];\n\t_VecD(){}\n\t_VecD(TYPE (&array)[SIZE]){\n\t\tfor(int i=0; i<SIZE; i++) vec[i] = array[i];\n\t}\n\tconst double dot(const _VecD &p) const{\n\t\tdouble tmp = 0;\n\t\tfor(int i=0; i<SIZE; i++) tmp += this->vec[i] * p.vec[i];\n\t\treturn tmp;\n\t}\n\tconst double cross(const Vec2D &p) const{\n\t\treturn this->vec[0]*p.vec[1] - this->vec[1]*p.vec[0];\n\t}\n\tconst Vec3D cross(const Vec3D &p) const{\n\t\tdouble v[3];\n\t\tv[0] = this->vec[1]*p.vec[2] - this->vec[2]*p.vec[1];\n\t\tv[1] = this->vec[2]*p.vec[0] - this->vec[0]*p.vec[2];\n\t\tv[2] = this->vec[0]*p.vec[1] - this->vec[1]*p.vec[0];\n\t\treturn Vec3D(v);\n\t}\n};\n#endif\n\nconst double operator*(const VecND &p0, const VecND &p1){ return inner_product( p0.vec.begin(), p0.vec.end(), p1.vec.begin(), 0); }\n// template <typename U>\n// const double operator*(const VecD<U> &p0, const VecD<U> &p1){ return inner_product( p0.vec.begin(), p0.vec.end(), p1.vec.begin(), 0); }\n\ntemplate <typename T>\nconst VecND operator*(const T &a, const VecND &p1){\n\tstd::vector<double> v;\n\tfor(std::vector<double>::const_iterator iter1=p1.vec.begin();iter1!=p1.vec.end();iter1++) v.PB(*iter1 * a);\n\tconst VecND p(v);\n\treturn p;\n}\n#if TEST_MODE\ntemplate <typename T>\nconst Vec2D operator*(const T &a, const Vec2D &p1){\n\tdouble v[2];\n\tfor(int i=0; i<2; i++) v[i] = p1.vec[i] * a;\n\tconst Vec2D p(v);\n\treturn p;\n}\ntemplate <typename T>\nconst Vec3D operator*(const T &a, const Vec3D &p1){\n\tdouble v[3];\n\tfor(int i=0; i<3; i++) v[i] = p1.vec[i] * a;\n\tconst Vec3D p(v);\n\treturn p;\n}\n#endif\n\ntemplate <typename T, class C>\nconst C operator* (const C &p, const T &a){return a*p;}\nconst VecND operator+(const VecND &p0, const VecND &p1){\n\tstd::vector<double> v;\n\tstd::vector<double>::const_iterator iter0 = p0.vec.begin();\n\tfor(std::vector<double>::const_iterator iter1=p1.vec.begin();iter1!=p1.vec.end();iter1++){\n\t\tv.PB(*iter0 + *iter1);\n\t\titer0++;\n\t}\n\tconst VecND p(v);\n\treturn p;\n}\n#if TEST_MODE\nconst Vec2D operator+(const Vec2D &p0, const Vec2D &p1){\n\tdouble v[2];\n\tfor(int i=0; i<2; i++) v[i] = p0.vec[i] + p1.vec[i];\n\tconst Vec2D p(v);\n\treturn p;\n}\nconst Vec3D operator+(const Vec3D &p0, const Vec3D &p1){\n\tdouble v[3];\n\tfor(int i=0; i<3; i++) v[i] = p0.vec[i] + p1.vec[i];\n\tconst Vec3D p(v);\n\treturn p;\n}\n#endif\ntemplate <class T>\nconst VecND operator+(const T &a, const VecND &p1){\n\tstd::vector<double> v;\n\tfor(std::vector<double>::const_iterator iter1=p1.vec.begin();iter1!=p1.vec.end();iter1++){\n\t\tv.PB(*iter1 + a);\n\t}\n\tconst VecND p(v);\n\treturn p;\n}\n#if TEST_MODE\ntemplate <class T>\nconst Vec2D operator+(const T &a, const Vec2D &p1){\n\tdouble v[2];\n\tfor(int i=0; i<2; i++) v[i] = p1.vec[i] + a;\n\tconst Vec2D p(v);\n\treturn p;\n}\ntemplate <class T>\nconst Vec3D operator+(const T &a, const Vec3D &p1){\n\tdouble v[3];\n\tfor(int i=0; i<3; i++) v[i] = p1.vec[i] + a;\n\tconst Vec3D p(v);\n\treturn p;\n}\n#endif\ntemplate <typename T, class C>\nconst C operator+(const C &p1, const T &a){return a+p1;}\ntemplate <class C>\nconst C operator-(const C &p1){return (-1)*p1;}\ntemplate <class C>\nconst C operator-(C &p0, C &p1){ return p0+(-p1); }\ntemplate <typename T, class C>\nconst C operator-(const T &a, C &p1){ return a+(-p1); }\ntemplate <typename T, class C>\nconst C operator-(C &p1, const T &a){return (-a)+p1;}\n\n// template<class C>\n// const C projection(const C &p1, const C &p2){\n// \treturn ((p1*p2) / (p1*p1)) * p1;\n// }\ntemplate<typename U>\nconst VecD<U> projection(const VecD<U> &p1, const VecD<U> &p2){\n\treturn ((p1.dot(p2)) / (p1.dot(p1))) * p1;\n}\n\n#if TEST_MODE\nconst Vec2D projection(const Vec2D &p1, const Vec2D &p2){\n\treturn ((p1.dot(p2)) / (p1.dot(p1))) * p1;\n}\nconst Vec3D projection(const Vec3D &p1, const Vec3D &p2){\n\treturn ((p1.dot(p2)) / (p1.dot(p1))) * p1;\n}\n#endif\n\nstd::ostream& operator<<(std::ostream &os, const VecND &p){\n\tos << std::fixed << std::setprecision(10) << p.vec[0] << \" \" << std::fixed << std::setprecision(10) << p.vec[1] << std::endl;\n}\n#if TEST_MODE\nstd::ostream& operator<<(std::ostream &os, const Vec2D &p){\n\tos << std::fixed << std::setprecision(10) << p.vec[0] << \" \" << std::fixed << std::setprecision(10) << p.vec[1] << std::endl;\n}\nstd::ostream& operator<<(std::ostream &os, const Vec3D &p){\n\tos << std::fixed << std::setprecision(10) << p.vec[0] << \" \" << std::fixed << std::setprecision(10) << p.vec[1] << std::endl;\n}\n#endif\n\nusing namespace std;\n\nint main(void){\n\n\tdouble xp0, yp0, xp1, yp1; cin>>xp0>>yp0>>xp1>>yp1;\n\tint q; cin >> q;\n\tdouble v0[2] = {xp0, yp0}; Vec2D p0(v0);\n\tdouble v1[2] = {xp1, yp1}; Vec2D p1(v1);\n\tVec2D _p0 = p0-p0;\n\tVec2D _p1 = p1-p0;\n\trep(q){\n\t\tdouble xp2,yp2; cin>>xp2>>yp2;\n\t\tdouble v2[2] = {xp2, yp2}; Vec2D p2(v2);\n\t\tVec2D _p2 = p2-p0;\n\t\tdouble ret1 = _p1.cross(_p2);\n\t\tif(ret1>0){\n\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t}else if(ret1<0){\n\t\t\tcout << \"CLOCKWISE\" << endl;;\n\t\t}else{\n\t\t\tdouble ret2;\n\t\t\tif(_p1.vec[0]!=0){\n\t\t\t\tret2 = _p2.vec[0]/_p1.vec[0];\n\t\t\t}else{\n\t\t\t\tret2 = _p2.vec[1]/_p1.vec[1];\n\t\t\t}\n\t\t\tif(ret2<0){\n\t\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t\t}else if(ret2<=1){\n\t\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t\t}else{\n\t\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\nconst ll INF = 1e16;\nconst ll mod = 1000000007;\n#define rep(i, n) for (int i = 0; i < (int)(n); i++)\n\ntemplate<class T> inline bool chmax(T& a, T b) {\n  if (a < b) {\n    a = b;\n    return 1;\n  }\n  return 0;\n}\ntemplate<class T> inline bool chmin(T& a, T b) {\n  if (a > b) {\n    a = b;\n    return 1;\n  }\n  return 0;\n}\nint ctoi(char c) {\n  if (c >= '0' && c <= '9') {\n    return c - '0';\n  }\n  return 0;\n}\nll factorial(ll n) {\n  if (n == 1) {\n    return 1;\n  }\n  ll ans = factorial(n-1);\n  return ans*n;\n}\nll gcd(ll a, ll b) {\n  if (b == 0) return a;\n  return gcd(b, a%b);\n}\nll lcm(ll a, ll b) {\n  return (a/gcd(a, b))*b;\n}\nbool is_prime(ll n) {\n  for (ll i = 2; i*i <= n; i++) {\n    if (n%i == 0) return false;\n  }\n  return n != 1;\n}\nll mod_pow(ll x, ll n, ll mod) {\n  if (n == 0) return 1;\n  ll res = mod_pow(x*x%mod, n/2, mod);\n  if (n & 1) res = res * x % mod;\n  return res;\n}\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nclass Point {\n  public:\n  double x, y;\n  Point(double x = 0, double y = 0): x(x), y(y) {}\n  Point operator + (Point p) { return Point(x + p.x, y + p.y); }\n  Point operator - (Point p) { return Point(x - p.x, y - p.y); }\n  Point operator * (double a) { return Point(a * x, a * y); }\n  Point operator / (double a) { return Point(x / a, y / a); }\n  double norm() { return x*x + y*y; }\n  double abs() { return pow(norm(), 0.5); }\n  bool operator < (const Point &p) const {\n    return x != p.x ? x < p.x : y < p.y;\n  }\n};\ntypedef Point Vector;\nstruct Segment {\n  Point p1, p2;\n};\ndouble dot(Vector a, Vector b) {\n  return a.x * b.x + a.y * b.y;\n}\nPoint project(Segment s, Point p) {\n  Vector base = s.p2 - s.p1;\n  double r = dot(p-s.p1, base) / base.norm();\n  return s.p1 + base * r;\n}\nPoint reflect(Segment s, Point p) {\n  return p + (project(s, p) - p) * 2.0;\n}\ndouble cross(Point a, Point b) {\n  return a.x*b.y - a.y*b.x;\n}\nstring ccw(Point p0, Point p1, Point p2) {\n  Vector a = p1 - p0, b = p2 - p0;\n  if (cross(a, b) > EPS) return \"COUNTER_CLOCKWISE\";\n  if (cross(a, b) < -EPS) return \"CLOCKWISE\";\n  if (dot(a, b) < -EPS) return \"ONLINE_BACK\";\n  if (a.norm() < b.norm()) return \"ONLINE_FRONT\";\n  return \"ON_SEGMENT\";\n}\nint main() {\n  Point p0, p1;\n  cin >> p0.x >> p0.y >> p1.x >> p1.y;\n  ll n;\n  cin >> n;\n  rep(i, n) {\n    Point p2;\n    cin >> p2.x >> p2.y;\n    cout << ccw(p0, p1, p2) << endl;\n  }\n}\n"
  },
  {
    "language": "C++",
    "code": "//#define _GLIBCXX_DEBUG\n#include <bits/stdc++.h>\n#define rep(i, n) for(int i=0; i<n; ++i)\nusing namespace std;\n\nconst double EPS = 1e-10;\ndouble add(double a, double b) {\n    if(abs(a+b) < EPS*(abs(a)+abs(b))) return 0;\n    return a+b;\n}\nstruct Vector {\n    double x, y;\n    Vector() {}\n    Vector(double x, double y):x(x), y(y) {}\n    Vector operator+(Vector v) {return Vector(add(x, v.x), add(y, v.y));}\n    Vector operator-(Vector v) {return Vector(add(x, -v.x), add(y, -v.y));}\n    Vector operator*(double d) {return Vector(x*d, y*d);}\n    Vector operator/(double d) {return Vector(x/d, y/d);}\n    double dot(Vector v) {return add(x*v.x, y*v.y);}\n    double cross(Vector v) {return add(x*v.y, -y*v.x);}\n};\nistream &operator>>(istream &is, Vector &v) {return is >> v.x >> v.y;}\nostream &operator<<(ostream &os, const Vector &v) {return os << v.x << ' ' << v.y;}\ndouble sqdist(Vector v, Vector u) {return (v-u).dot(v-u);}\nbool on_seg(Vector v1, Vector v2, Vector p) {\n    return (v1-p).cross(v2-p) == 0 && (v1-p).dot(v2-p) <= 0;\n}\n//v1-v2とu1-u2の交点\nVector intersection(Vector v1, Vector v2, Vector u1, Vector u2) {\n    assert((v1-v2).cross(u1-u2)); //2直線が平行だとだめ\n    return v1 + (v2-v1)*((u2-u1).cross(u1-v1)/(u2-u1).cross(u2-v1));\n}\n//p2-p1へのQの投影\nVector projection(Vector p1, Vector p2, Vector Q) {\n    return p1+(p2-p1)*(Q-p1).dot(p2-p1)/sqdist(p1, p2);\n}\n//p1-p2を軸としたQの線対称移動\nVector reflection(Vector p1, Vector p2, Vector Q) {\n    return projection(p1, p2, Q)*2-Q;\n}\nbool cmp_x(const Vector &v, const Vector &u) {\n    if(v.x != u.x) return v.x < u.x;\n    return v.y < u.y;\n}\n//頂点数nの頂点集合vv\nvector<Vector> convex_hull(vector<Vector> &vv, int n) {\n    sort(vv.begin(), vv.end(), cmp_x);\n    int k = 0;\n    vector<Vector> res(n*2);\n    for(int i = 0; i < n; i++) {\n        while(k > 1 && (res[k-1]-res[k-2]).cross(vv[i]-res[k-1]) <= 0) k--;\n        res[k++] = vv[i];\n    }\n    for(int i = n-2, t = k; i >= 0; i--) {\n        while(k > t && (res[k-1]-res[k-2]).cross(vv[i]-res[k-1]) <= 0) k--;\n        res[k++] = vv[i];\n    }\n    res.resize(k-1);\n    return res;\n}\nsigned main() {\n    Vector p1, p2, Q;\n    int q;\n    cin >> p1 >> p2 >> q;\n    while(q--) {\n        cin >> Q;\n        double X = (p2-p1).cross(Q-p1);\n        if(add(X, 0) != 0) {\n            if(X > 0) {\n                cout << \"COUNTER_CLOCKWISE\" << '\\n';\n            } else {\n                cout << \"CLOCKWISE\" << '\\n';\n            }\n        } else {\n            if((p2-p1).dot(Q-p1) < 0) {\n                cout << \"ONLINE_BACK\" << '\\n';\n            } else if(sqdist(Q, p1) > sqdist(p2, p1)) {\n                cout << \"ONLINE_FRONT\" << '\\n';\n            } else {\n                cout << \"ON_SEGMENT\" << '\\n';\n            }\n        }\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<cmath>\n#include<algorithm>\n\nusing namespace std;\n\nint main()\n{\n\tdouble p1x, p1y, p2x, p2y, p0x, p0y;\n\tint q;\n\n\tscanf(\"%lf %lf %lf %lf\", &p0x, &p0y, &p1x, &p1y);\n\n\tpair<double, double> v01 = { p1x - p0x, p1y - p0y };\n\n\n\tscanf(\"%d\", &q);\n\n\tfor (int i = 0; i < q; i++)\n\t{\n\t\tscanf(\"%lf %lf\", &p2x, &p2y);\n\n\t\tif ((p2x == p0x && p2y == p0y) || (p2x == p1x && p2y == p1y)){\n\t\t\tprintf(\"ON_SEGMENT\\n\");\n\n\t\t\tcontinue;\n\t\t}\n\n\t\tpair<double, double> v02 = { p2x - p0x, p2y - p0x };\n\n\t\tif (v01.first*v02.second == v01.second*v02.first)\n\t\t{\n\t\t\tif (v01.first*v02.first < 0)\n\t\t\t{\n\t\t\t\tprintf(\"ONLINE_BACK\\n\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tabs(v01.first) < abs(v02.first) ? printf(\"ONLINE_FRONT\\n\") : printf(\"ON_SEGMENT\\n\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t\tdouble sin = (v01.first*v02.second - v01.second*v02.first);\n\n\t\tif (sin > 0){\n\t\t\tprintf(\"COUNTER_CLOCKWISE\\n\");\n\n\t\t\tcontinue;\n\t\t}\n\t\telse{\n\t\t\tprintf(\"CLOCKWISE\\n\");\n\n\t\t\tcontinue;\n\t\t}\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i, n) for (int i = 0; i < n; i++)\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nclass Point\n{\npublic:\n  double x, y;\n  Point(double x = 0, double y = 0) : x(x), y(y) {}\n\n  Point operator+(Point p)\n  {\n    return Point(x + p.x, y + p.y);\n  }\n  Point operator-(Point p)\n  {\n    return Point(x - p.x, y - p.y);\n  }\n  Point operator*(double a)\n  {\n    return Point(a * x, a * y);\n  }\n  Point operator/(double a)\n  {\n    return Point(x / a, y / a);\n  }\n\n  double abs()\n  {\n    return sqrt(norm());\n  }\n  double norm()\n  {\n    return x * x + y * y;\n  }\n\n  bool operator<(const Point &p) const\n  {\n    return x != p.x ? x < p.x : y < p.y;\n  }\n  bool operator==(const Point &p) const\n  {\n    return equals(x, p.x) && equals(y, p.y);\n  }\n\n  void print()\n  {\n    printf(\"%.10f %.10f\\n\", x, y);\n  }\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b)\n{\n  return a.x * b.x + a.y * b.y;\n}\ndouble cross(Vector a, Vector b)\n{\n  return a.x * b.y - a.y * b.x;\n}\n\nstruct Segment\n{\n  Point p1, p2;\n};\n\ntypedef Segment Line;\n\nclass Circle\n{\npublic:\n  Point c;\n  double r;\n  Circle(Point c = Point(), double r = 0) : c(c), r(r) {}\n};\n\ntypedef vector<Point> Polygon;\n\nPoint projection(Line l, Point p)\n{\n  return l.p1 + (l.p2 - l.p1) * (dot(p - l.p1, l.p2 - l.p1) / (l.p2 - l.p1).norm());\n}\n\nPoint reflection(Line l, Point p)\n{\n  Point x = projection(l, p);\n  return p + (x - p) * 2;\n}\n\nbool ccw(Point p0, Point p1, Point p2)\n{\n  Vector a = p1 - p0, b = p2 - p0;\n  return cross(a, b) > 0;\n}\n\nbool cw(Point p0, Point p1, Point p2)\n{\n  Vector a = p1 - p0, b = p2 - p0;\n  return cross(a, b) < 0;\n}\n\nint main()\n{\n  double x0, y0, x1, y1;\n  cin >> x0 >> y0 >> x1 >> y1;\n  Point p0 = {x0, y0}, p1 = {x1, y1};\n  int q;\n  cin >> q;\n  rep(i, q)\n  {\n    double x2, y2;\n    cin >> x2 >> y2;\n    Point p2 = {x2, y2};\n    Vector a = p1 - p0, b = p2 - p0;\n    if (ccw(p0, p1, p2))\n    {\n      cout << \"COUNTER_CLOCKWISE\" << endl;\n    }\n    else if (cw(p0, p1, p2))\n    {\n      cout << \"CLOCKWISE\" << endl;\n    }\n    else if (a.x * b.x < 0 || a.y * b.y < 0)\n    {\n      cout << \"ONLINE_BACK\" << endl;\n    }\n    else if (a.norm() < b.norm())\n    {\n      cout << \"ONLINE_FRONT\" << endl;\n    }\n    else\n    {\n      cout << \"ON_SEGMENT\" << endl;\n    }\n  }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define mm(a,b) memset(a,b,sizeof(a))\n#define ACCELERATE (ios::sync_with_stdio(false),cin.tie(0))\n#define pii pair<int,int>\n#define pdd pair<double,double>\n#define pll pair<long long,long long>\n#define mp make_pair\n#define pb push_back\n#define fi first\n#define se second\n#define rep(i,a,b) for(int i=(a);i<=(b);i++)\n#define per(i,a,b) for(int i=(a);i>=(b);i--)\n#define rush() int T;scanf(\"%d\",&T);while(T--)\n#define debug(x) cout<<#x<<\": \"<<x<<endl\n#define sc(a) scanf(\"%d\",&a)\n#define sc2(a,b) scanf(\"%d%d\",&a,&b)\n#define sc3(a,b,c) scanf(\"%d%d%d\",&a,&b,&c)\n#define pf(x) printf(\"%d\\n\",x)\n#define pf2(x,y) printf(\"%d %d\\n\",x,y)\n#define pf3(x,y,z) printf(\"%d %d %d\\n\",x,y,z)\n#define all(x) (x).begin(),(x).end()\n#define PI acos(-1.0)\n#define E exp(1.0)\n#define db double\n#define ll long long\n#define ld long double\n#define ull unsigned long long\n//#define io\nusing namespace std;\nconst int inf=0x3f3f3f3f;\nconst ll INF=0x3f3f3f3f3f3f3f3f;\n//#define gc getchar\n//char buf[1<<21],*p1=buf,*p2=buf;\n//inline int gc(){return p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++;}\n//inline int read()\n//{\n//    int ret=0,f=0;char c=gc();\n//    while(!isdigit(c)){if(c=='-')f=1;c=gc();}\n//    while(isdigit(c)){ret=ret*10+c-48;c=gc();}\n//    if(f)return -ret;return ret;\n//}\nconst db EPS=1e-10;\ninline int sign(db a){return a<-EPS?-1:a>EPS;}\ninline int cmp(db a,db b){return sign(a-b);}\ninline db sqr(db x){return x*x;}\nstruct Point{\n    db x,y;\n    Point(){}\n    Point(db _x,db _y):x(_x),y(_y){}\n    void input(){scanf(\"%lf%lf\",&x,&y);}\n    void output(){printf(\"%.10f %.10f\\n\",x,y);}\n    bool operator == (Point b)const{\n        return sign(x-b.x)==0&&sign(y-b.y)==0;\n    }\n    bool operator < (Point b)const{\n        return sign(x-b.x)==0?sign(y-b.y)<0:x<b.x;\n    }\n    Point operator + (const Point &b)const{\n        return Point(x+b.x,y+b.y);\n    }\n    Point operator - (const Point &b)const{\n        return Point(x-b.x,y-b.y);\n    }\n    db operator ^ (const Point &b)const{\n        return x*b.y-y*b.x;\n    }\n    db operator * (const Point &b)const{\n        return x*b.x+y*b.y;\n    }\n    db len(){return hypot(x,y);}\n    db len2(){return x*x+y*y;}\n    db distance(Point p){return hypot(x-p.x,y-p.y);}\n    Point operator * (const db &k)const{\n        return Point(x*k,y*k);\n    }\n    Point operator / (const db &k)const{\n        return Point(x/k,y/k);\n    }\n    db rad(Point a,Point b){\n        Point p=*this;\n        return fabs(atan2(fabs((a-p)^(b-p)),(a-p)*(b-p)));\n    }\n    Point unit(){return *this/len();}\n    Point trunc(db r){\n        db l=len();\n        if(!sign(l))return *this;\n        r/=l;\n        return Point(x*r,y*r);\n    }\n    Point rotleft(){return Point(-y,x);}\n    Point rotright(){return Point(y,-x);}\n    Point rotate(Point p,db angle){\n        Point v=(*this)-p;\n        db c=cos(angle),s=sin(angle);\n        return Point(p.x+v.x*c-v.y*s,p.y+v.x*s+v.y*c);\n    }\n};\nstruct Line{\n    Point s,e;\n    Line(){}\n    Line(Point _s,Point _e):s(_s),e(_e){}\n    bool operator == (Line v){\n        return (s==v.s)&&(e==v.e);\n    }\n    Line(Point p,db angle){\n        s=p;\n        if(sign(angle-PI/2)==0)e=(s+Point(0,1));\n        else e=(s+Point(1,tan(angle)));\n    }\n    Line(db a,db b,db c){\n        if(sign(a)==0){\n            s=Point(0,-c/b);e=Point(1,-c/b);\n        }else if(sign(b)==0){\n            s=Point(-c/a,0);e=Point(-c/a,1);\n        }else{\n            s=Point(0,-c/b);e=Point(1,(-c-a)/b);\n        }\n    }\n    void input(){s.input();e.input();}\n    void adjust(){if(e<s)swap(s,e);}\n    db length(){return s.distance(e);}\n    //[0,PI)\n    db angle(){\n        db k=atan2(e.y-s.y,e.x-s.x);\n        if(sign(k)<0)k+=PI;\n        if(sign(k-PI)==0)k-=PI;\n        return k;\n    }\n    //|1 on the left|2 on the right|3 on line|\n    int relation(Point p){\n        int c=sign((p-s)^(e-s));\n        if(c<0)return 1;\n        else if(c>0)return 2;\n        else return 3;\n    }\n\n};\n\n//\t//`返回直线倾斜角 0<=angle<pi`\n//\tdouble angle(){\n//\t\tdouble k = atan2(e.y-s.y,e.x-s.x);\n//\t\tif(sgn(k) < 0)k += pi;\n//\t\tif(sgn(k-pi) == 0)k -= pi;\n//\t\treturn k;\n//\t}\n//\t//`点和直线关系`\n//\t//`1  在左侧`\n//\t//`2  在右侧`\n//\t//`3  在直线上`\n//\tint relation(Point p){\n//\t\tint c = sgn((p-s)^(e-s));\n//\t\tif(c < 0)return 1;\n//\t\telse if(c > 0)return 2;\n//\t\telse return 3;\n//\t}\n//\t// 点在线段上的判断\n//\tbool pointonseg(Point p){\n//\t\treturn sgn((p-s)^(e-s)) == 0 && sgn((p-s)*(p-e)) <= 0;\n//\t}\n//\t//`两向量平行(对应直线平行或重合)`\n//\tbool parallel(Line v){\n//\t\treturn sgn((e-s)^(v.e-v.s)) == 0;\n//\t}\n//\t//`两线段相交判断`\n//\t//`2 规范相交`\n//\t//`1 非规范相交`\n//\t//`0 不相交`\n//\tint segcrossseg(Line v){\n//\t\tint d1 = sgn((e-s)^(v.s-s));\n//\t\tint d2 = sgn((e-s)^(v.e-s));\n//\t\tint d3 = sgn((v.e-v.s)^(s-v.s));\n//\t\tint d4 = sgn((v.e-v.s)^(e-v.s));\n//\t\tif( (d1^d2)==-2 && (d3^d4)==-2 )return 2;\n//\t\treturn (d1==0 && sgn((v.s-s)*(v.s-e))<=0) ||\n//\t\t\t(d2==0 && sgn((v.e-s)*(v.e-e))<=0) ||\n//\t\t\t(d3==0 && sgn((s-v.s)*(s-v.e))<=0) ||\n//\t\t\t(d4==0 && sgn((e-v.s)*(e-v.e))<=0);\n//\t}\n//\t//`直线和线段相交判断`\n//\t//`-*this line   -v seg`\n//\t//`2 规范相交`\n//\t//`1 非规范相交`\n//\t//`0 不相交`\n//\tint linecrossseg(Line v){\n//\t\tint d1 = sgn((e-s)^(v.s-s));\n//\t\tint d2 = sgn((e-s)^(v.e-s));\n//\t\tif((d1^d2)==-2) return 2;\n//\t\treturn (d1==0||d2==0);\n//\t}\n//\t//`两直线关系`\n//\t//`0 平行`\n//\t//`1 重合`\n//\t//`2 相交`\n//\tint linecrossline(Line v){\n//\t\tif((*this).parallel(v))\n//\t\t\treturn v.relation(s)==3;\n//\t\treturn 2;\n//\t}\n//\t//`求两直线的交点`\n//\t//`要保证两直线不平行或重合`\n//\tPoint crosspoint(Line v){\n//\t\tdouble a1 = (v.e-v.s)^(s-v.s);\n//\t\tdouble a2 = (v.e-v.s)^(e-v.s);\n//\t\treturn Point((s.x*a2-e.x*a1)/(a2-a1),(s.y*a2-e.y*a1)/(a2-a1));\n//\t}\n//\t//点到直线的距离\n//\tdouble dispointtoline(Point p){\n//\t\treturn fabs((p-s)^(e-s))/length();\n//\t}\n//\t//点到线段的距离\n//\tdouble dispointtoseg(Point p){\n//\t\tif(sgn((p-s)*(e-s))<0 || sgn((p-e)*(s-e))<0)\n//\t\t\treturn min(p.distance(s),p.distance(e));\n//\t\treturn dispointtoline(p);\n//\t}\n//\t//`返回线段到线段的距离`\n//\t//`前提是两线段不相交，相交距离就是0了`\n//\tdouble dissegtoseg(Line v){\n//\t\treturn min(min(dispointtoseg(v.s),dispointtoseg(v.e)),min(v.dispointtoseg(s),v.dispointtoseg(e)));\n//\t}\n//\t//`返回点p在直线上的投影`\n//\tPoint lineprog(Point p){\n//\t\treturn s + ( ((e-s)*((e-s)*(p-s)))/((e-s).len2()) );\n//\t}\n//\t//`返回点p关于直线的对称点`\n//\tPoint symmetrypoint(Point p){\n//\t\tPoint q = lineprog(p);\n//\t\treturn Point(2*q.x-p.x,2*q.y-p.y);\n//\t}\n//};\n\nPoint proj(Point p1,Point p2,Point q)\n{\n    Point dir=p2-p1;\n    return p1+dir*(dir*(q-p1)/dir.len2());\n}\nPoint reflect(Point p1,Point p2,Point q)\n{\n    return proj(p1,p2,q)*2-q;\n}\nLine l;\nPoint p;\nint main()\n{\n    #ifdef io\n    freopen(\"in.txt\",\"r\",stdin);\n    #endif\n    l.input();\n    int q;\n    sc(q);\n    while(q--){\n        p.input();\n        int t=l.relation(p);\n        if(t==1)puts(\"COUNTER_CLOCKWISE\");\n        else if(t==2)puts(\"CLOCKWISE\");\n        else{\n            Point p1=l.s,p2=l.e;\n            if(sign((p2-p1)*(p-p1))<0)puts(\"ONLINE_BACK\");\n            else if(cmp((p-p1).len2(),(p2-p1).len2())>0)puts(\"ONLINE_FRONT\");\n            else puts(\"ON_SEGMENT\");\n        }\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nconst double EPS = 1e-8;\nconst double INF = 1e12;\n\n//point\ntypedef complex<double> P;\nnamespace std {\n\tbool operator < (const P& a, const P& b) {\n\t\treturn real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n\t}\n}\ndouble cross(const P& a, const P& b) {\n\treturn imag(conj(a)*b);\n}\ndouble dot(const P& a, const P& b) {\n\treturn real(conj(a)*b);\n}\n// line\nstruct L : public vector<P> {\n\tL(const P& a, const P& b) {\n\t\tpush_back(a); push_back(b);\n\t}\n};\n\nint ccw(P a, P b, P c) {\n  b -= a; c -= a;\n  if (cross(b, c) > 0)   return +1;       // counter clockwise\n  if (cross(b, c) < 0)   return -1;       // clockwise\n  if (dot(b, c) < 0)     return +2;       // c--a--b on line\n  if (norm(b) < norm(c)) return -2;       // a--b--c on line\n  return 0;\t\t\t\t\t\t\t\t  // a--c--b on line\n}\n\nbool intersectLL(const L &l, const L &m) {\n  return abs(cross(l[1]-l[0], m[1]-m[0])) > EPS || // non-parallel\n         abs(cross(l[1]-l[0], m[0]-l[0])) < EPS;   // same line\n}\nbool intersectLS(const L &l, const L &s) {\n  return cross(l[1]-l[0], s[0]-l[0])*       // s[0] is left of l\n         cross(l[1]-l[0], s[1]-l[0]) < EPS; // s[1] is right of l\n}\nbool intersectLP(const L &l, const P &p) {\n  return abs(cross(l[1]-p, l[0]-p)) < EPS;\n}\nbool intersectSS(const L &s, const L &t) {\n  return ccw(s[0],s[1],t[0])*ccw(s[0],s[1],t[1]) <= 0 &&\n         ccw(t[0],t[1],s[0])*ccw(t[0],t[1],s[1]) <= 0;\n}\nbool intersectSP(const L &s, const P &p) {\n  return abs(s[0]-p)+abs(s[1]-p)-abs(s[1]-s[0]) < EPS; // triangle inequality\n}\n\nP projection(const L &l, const P &p) {\n\tdouble t = dot(p-l[0], l[0]-l[1]) / norm(l[0]-l[1]);\n\treturn l[0] + t*(l[0]-l[1]);\n}\nP reflection(const L &l, const P &p) {\n\treturn p + (double)2 * (projection(l, p) - p);\n}\ndouble distanceLP(const L &l, const P &p) {\n\treturn abs(p - projection(l, p));\n}\ndouble distanceLL(const L &l, const L &m) {\n\treturn intersectLL(l, m) ? 0 : distanceLP(l, m[0]);\n}\ndouble distanceLS(const L &l, const L &s) {\n\tif (intersectLS(l, s)) return 0;\n\treturn min(distanceLP(l, s[0]), distanceLP(l, s[1]));\n}\ndouble distanceSP(const L &s, const P &p) {\n\tconst P r = projection(s, p);\n\tif (intersectSP(s, r)) return abs(r - p);\n\treturn min(abs(s[0] - p), abs(s[1] - p));\n}\ndouble distanceSS(const L &s, const L &t) {\n\tif (intersectSS(s, t)) return 0;\n\t\treturn min({distanceSP(s, t[0]), distanceSP(s, t[1]), distanceSP(t, s[0]), distanceSP(t, s[1])});\n}\nP crosspoint(const L &l, const L &m) {\n  double A = cross(l[1] - l[0], m[1] - m[0]);\n  double B = cross(l[1] - l[0], l[1] - m[0]);\n  if (abs(A) < EPS && abs(B) < EPS) return m[0]; // same line\n  if (abs(A) < EPS) assert(false); // !!!PRECONDITION NOT SATISFIED!!!\n  return m[0] + B / A * (m[1] - m[0]);\n}\n\nint main() {\n\tdouble x1, y1, x2, y2;\n\tcin >> x1 >> y1 >> x2 >> y2;\n\tP a(x1, y1), b(x2, y2);\n\tint q;\n\tcin >> q;\n\tfor(int i=0; i<q; ++i) {\n\t\tdouble x, y;\n\t\tcin >> x >> y;\n\t\tP p(x, y);\n\t\tint ans = ccw(a, b, p);\n\t\tif(ans == 1) {\n\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t} else if(ans == -1) {\n\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\t} else if(ans == 2) {\n\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t} else if(ans == -2) {\n\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t} else if(ans == 0) {\n\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t}\n\t}\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <string>\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\nusing namespace std;\n\n//点を表す構造体\nclass Point{\npublic:\n  double x, y;\n\n  Point(double x=0, double y=0){\n    this->x = x;\n    this->y = y;\n  }\n\n  Point operator+(Point &seg2){\n    return Point(x+seg2.x, y+seg2.y);\n  }\n\n  Point operator-(Point &seg2){\n    return Point(x-seg2.x, y-seg2.y);\n  }\n\n  Point operator*(double k){\n    return Point(x*k, y*k);\n  }\n\n  bool operator < (const Point &p) const{\n    return x != p.x? x<p.x : y<p.y;\n  }\n\n  bool operator == (const Point &p) const{\n    return equals(x, p.x) && equals(y, p.y);\n  }\n\n};\n\n//ベクトルを点の別表記でも表せるようにしておく\nclass Vector : public Point{\npublic:\n  Vector() : Point() {}\n\n  Vector(double x, double y) : Point(x, y) {}\n\n  Vector(Point p) : Point(){\n    x = p.x;\n    y = p.y;\n  }\n\n  double norm(){\n    return x*x + y*y;\n  }\n\n  double abs(){\n    return sqrt(norm());\n  }\n\n  static double dot(Vector a, Vector b){\n    return a.x*b.x + a.y*b.y;\n  }\n\n  static double cross(Vector a, Vector b){\n    return a.x*b.y - a.y*b.x;\n  }\n\n  static bool isOrthogonal(Vector a, Vector b){\n    return equals(dot(a, b), 0.0);\n  }\n\n  static bool isParallel(Vector a, Vector b){\n    return equals(cross(a, b), 0.0);\n  }\n};\n\n//線分(ベクトルを用いて)を表す構造体。両端の点が定義されている点に注意\nclass Segment{\npublic:\n  Point p1, p2;\n\n  Segment(Point p1, Point p2){\n    this->p1 = p1;\n    this->p2 = p2;\n    x = p2.x-p1.x;\n    y = p2.y-p1.y;\n  }\n\n  static bool isOrthogonal(Segment a, Segment b){\n    return equals(dot(a, b), 0.0);\n  }\n\n  static bool isParallel(Segment a, Segment b){\n    return equals(cross(a, b), 0.0);\n  }\n\nprivate:\n  int x, y;\n  static double dot(Segment a, Segment b){\n    return a.x*b.x + a.y*b.y;\n  }\n\n  static double cross(Segment a, Segment b){\n    return a.x*b.y - a.y*b.x;\n  }\n};\n\ntypedef Segment Line;\n\nclass Circle{\npublic:\n  Point c;\n  double r;\n  Circle(Point c = Point(), double r = 0.0): c(c), r(r){}\n};\n\nstring ccw(Point p0, Point p1, Point p2){\n  enum res {COUNTER_CLOCKWISE=0, CLOCKWISE, ONLINE_BACK, ONLINE_FRONT, ON_SEGMENT};\n  Vector a = p1-p0;\n  Vector b = p2-p0;\n  if(Vector::cross(a, b) > EPS) return \"COUNTER_CLOCKWISE\";\n  if(Vector::cross(a, b) < -EPS) return \"CLOCKWISE\";\n  if(Vector::dot(a, b) < -EPS) return \"ONLINE_BACK\";\n  if(a.norm() < b.norm()) return \"ONLINE_FRONT\";\n  return \"ON_SEGMENT\";\n}\n\nint main(){\n  double p0_x, p0_y, p1_x, p1_y;\n  cin >> p0_x >> p0_y >> p1_x >> p1_y;\n  Point p0(p0_x, p0_y), p1(p1_x, p1_y);\n\n  int q; cin >> q;\n  double x, y;\n  Point p2;\n  for(int i=0; i<q; i++){\n    cin >> x >> y;\n    p2.x = x; p2.y = y;\n    cout << ccw(p0, p1, p2) << endl;\n  }\n\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#define loop(i, s, e) for(ll i = s;i < e;i++)\n\n#include <iostream>\n#include <iomanip>\n#include <set>\n#include <vector>\n#include <queue>\n#include <stack>\n#include <utility>\n#include <algorithm>\n#include <map>\n#include <cmath>\n\nusing namespace std;\n\ntypedef long long signed ll;\n\n#define NAN_M 0x800000000000\n#define EPS 0.0000000001\n\nclass Position {\npublic:\n    enum Positions {\n        COUNTER_CLOCKWISE = -1,\n        CLOCKWISE = 1,\n        ONLINE_BACK,\n        ONLINE_FRONT,\n        ON_SEGMENT = 0\n    };\n\n    static std::string ToString(enum Positions e) {\n        switch (e) {\n            case COUNTER_CLOCKWISE:\n                return \"COUNTER_CLOCKWISE\";\n            case CLOCKWISE:\n                return \"CLOCKWISE\";\n            case ONLINE_BACK:\n                return \"ONLINE_BACK\";\n            case ONLINE_FRONT:\n                return \"ONLINE_FRONT\";\n            case ON_SEGMENT:\n                return \"ON_SEGMENT\";\n        }\n    }\n};\n\ntemplate<class T>\nclass Vector2D {\npublic:\n    T x;\n    T y;\n\n    Vector2D() {\n        x = y = 0;\n    }\n\n    Vector2D(T x_, T y_) {\n        x = x_;\n        y = y_;\n    }\n\n    T operator*(const Vector2D<T> *e) {\n        return this->x * e->x + this->y * e->y;\n    }\n\n    Vector2D<T> operator-(const Vector2D<T> *e) {\n        return Vector2D<T>(this->x - e->x, this->y - e->y);\n    }\n\n    Vector2D<T> operator+(const Vector2D<T> *e) {\n        return Vector2D<T>(this->x + e->x, this->y + e->y);\n    }\n\n    T operator*(const Vector2D<T> e) {\n        return this->x * e.x + this->y * e.y;\n    }\n\n    Vector2D<T> operator-(const Vector2D<T> e) {\n        return Vector2D<T>(this->x - e.x, this->y - e.y);\n    }\n\n    Vector2D<T> operator+(const Vector2D<T> e) {\n        return Vector2D<T>(this->x + e.x, this->y + e.y);\n    }\n\n    Vector2D<T> operator*(const T r) {\n        return Vector2D<T>(this->x * r, this->y * r);\n    }\n\n    Vector2D<T> operator/(const T r) {\n        return Vector2D<T>(this->x / r, this->y / r);\n    }\n\n    Vector2D<T> operator-() {\n        return Vector2D<T>(-this->x, -this->y);\n    }\n\n    double abs() {\n        return sqrt(x * x + y * y);\n    }\n\n    T norm() {\n        return x * x + y * y;\n    }\n\n    T crossP(Vector2D<T> e) {\n        if (x * e.y >= y * e.x) return (x * e.y) - (y * e.x);\n        else return (y * e.x) - (x * e.y);\n    }\n\n    T cross(Vector2D<T> e) {\n        return (x * e.y) - (y * e.x);\n    }\n\n    double cos(Vector2D<T> e) {\n        if ((e.abs() * abs()) == 0) return NAN_M;\n        return (e * (*this)) / (e.abs() * abs());\n    }\n\n    double sin(Vector2D<T> e) {\n        if ((e.abs() * abs()) == 0) return NAN_M;\n        return ((x * e.y) - (y * e.x)) / (e.abs() * abs());\n    }\n};\n\ntemplate<class T>\nclass Point2D : public Vector2D<T> {\npublic:\n    using Vector2D<T>::Vector2D;\n};\n\ntemplate<class T>\nclass Line2D {\npublic:\n    Point2D<T> p1, p2;\n    Line2D(){\n        p1 = Point2D<T>(0,0);\n        p2 = Point2D<T>(0,0);\n    }\n    Line2D(Point2D<T> p1_,Point2D<T> p2_){\n        p1 = p1_;\n        p2 = p2_;\n    }\n    Vector2D<T> getVector() {\n        return p2 - p1;\n    }\n\n    Point2D<T> getProject(Point2D<T> p) {\n        Vector2D<T> base = getVector();\n        return p1 + base * ((p - p1) * base) / base.norm();\n    }\n\n    Point2D<T> reflect(Point2D<T> p) {\n        return p + (getProject(p) - p) * 2;\n    }\n\n    virtual double getDistance(Point2D<T> p) {\n        return (p2 - p1).crossP(p - p1) / (p2 - p1).abs();\n    }\n};\n\ntemplate<class T>\nclass Segment2D : public Line2D<T> {\npublic:\n    using Line2D<T>::p1;\n    using Line2D<T>::p2;\n    using Line2D<T>::Line2D;\n    double getDistance(Point2D<T> p) override{\n        if ((p2 - p1).cross(p - p1) < 0) return (p - p1).abs();\n        if ((p1 - p2).cross(p - p1) < 0) return (p - p1).abs();\n        return Line2D<T>::getDistance(p);\n    }\n\n    Position::Positions ccw(Point2D<T> p) {\n        Vector2D<T> a = p2 - p1;\n        Vector2D<T> b = p - p1;\n        if (a.cross(b) > EPS) return Position::Positions::COUNTER_CLOCKWISE;\n        if (a.cross(b) < -EPS) return Position::Positions::CLOCKWISE;\n        if (a * b < -EPS) return Position::Positions::ONLINE_BACK;\n        if (a.norm() < b.norm()) return Position::Positions::ONLINE_FRONT;\n        return Position::Positions::ON_SEGMENT;\n    }\n\n    bool intersect(Segment2D<T> s) {\n        return (ccw(s.p1) * ccw(s.p2) <= 0 && s.ccw(p1) * s.ccw(p2) <= 0);\n    }\n\n    double getDistance(Segment2D<T> s) {\n\n    }\n};\n/*\n\nint main(void){\n    int q;\n    cin >> q;\n    loop(i,0,q){\n        Point2D<double> v[4];\n        loop(j,0,4) {\n            cin >> v[j].x >> v[j].y;\n        }\n        int res = Segment2D<double>(v[0],v[1]).intersect(Segment2D<double>(v[2],v[3]));\n        if(res) cout << 1 << endl;\n        else cout << 0 << endl;\n    }\n}*/\n\nint main(void) {\n    Segment2D<double> b;\n    cin >> b.p1.x >> b.p1.y >> b.p2.x >> b.p2.y;\n    int q;\n    cin >> q;\n    Point2D<double> c;\n    loop(i,0,q){\n        cin >> c.x >> c.y;\n        cout << Position::ToString(b.ccw(c)) << endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#include <complex>\n#define rep(i, n) for (int i = 0; i < (n); i++)\n#define loop(i, x, n) for (int i = (x); i < (n); i++)\n#define all(v) (v).begin(), (v).end()\n#define EQ(a, b) (abs((a) - (b)) < EPS)\n#define int long long\n#define INF 1e9\n#define MOD 1e9 + 7\nusing namespace std;\n\ntemplate<typename T> void cmin(T &a, T b) { a = min(a, b); }\ntemplate<typename T> void cmax(T &a, T b) { a = max(a, b); }\n\nusing P = complex<double>;\nconst double PI = acos(-1);\nconst double EPS = 1e-9;\n// P p(a,b)=a+bi -> 点p(a,b)\nnamespace std {\n  bool operator<(const P &a, const P &b) { return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b); }\n  bool operator==(const P &a, const P &b) { return a.real() == b.real() && a.imag() == b.imag(); }\n} // namespace std\n\nstruct L : public vector<P> {\n  L(const P &a, const P &b) {\n    push_back(a);\n    push_back(b);\n  }\n};\n//内積\ndouble dot(P a, P b) { return real(conj(a) * b); }\n//外戚\ndouble cross(P a, P b) { return imag(conj(a) * b); }\n\nint ccw(P a, P b, P c) {\n  b -= a;\n  c -= a;\n  if (cross(b, c) > 0) return +1; // counter clockwise\n  if (cross(b, c) < 0) return -1; // clockwise\n  if (dot(b, c) < 0) return +2; // c--a--b on line\n  if (norm(b) < norm(c)) return -2; // a--b--c on line\n  return 0;\n}\nsigned main() {\n  int a, b, c, d;\n  cin >> a >> b >> c >> d;\n  int q;\n  cin >> q;\n  while (q--) {\n    int x, y;\n    cin >> x >> y;\n    int flag = ccw(P(a, b), P(c, d), P(x, y));\n    if (flag == 1)\n      cout << \"COUNTER_CLOCKWISE\" << endl;\n    else if (flag == -1)\n      cout << \"CLOCKWISE\" << endl;\n    else if (flag == 2)\n      cout << \"ONLINE_BACK\" << endl;\n    else if (flag == -2)\n      cout << \"ONLINE_FRONT\" << endl;\n    else\n      cout << \"ON_SEGMENT\" << endl;\n  }\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<algorithm>\n#include<vector>\n#include<string>\n#include<sstream>\n#include<iomanip>\n#include<utility>\n#include<cmath>\n#include<set>\nusing namespace std;\ntypedef long long int ll;\nconst double EPS=1e-10;\n\nbool equals(double a,double b)\n{\n\treturn a>b?a-b<EPS:b-a<EPS;\n}\n\nclass Point\n{\npublic:\n\tdouble x;\n\tdouble y;\n\tPoint(double inx=0.0,double iny=0.0):x(inx),y(iny){}\n\tPoint operator+(const Point &p){return Point(x+p.x,y+p.y);}\n\tPoint operator-(const Point &p){return Point(x-p.x,y-p.y);}\n\tPoint operator*(const double k){return Point(x*k,y*k);}\n\tPoint operator/(const double k){return Point(x/k,y/k);}\n\tPoint operator=(const Point &p){x=p.x;y=p.y;return *this;}\n\tbool operator<(const Point &p)const{return x!=p.x?x<p.x:y<p.y;}\n\tbool operator==(const Point &p)const{return equals(x,p.x)&&equals(y,p.y);}\n\tdouble norm()\n\t{\n\t\treturn x*x+y*y;\n\t}\n\tdouble abs()\n\t{\n\t\treturn sqrt(norm());\n\t}\n};\n\ntypedef Point Vector;\n\nclass Segment\n{\npublic:\n\tPoint p1;\n\tPoint p2;\n\tVector getvector()\n\t{\n\t\treturn p2-p1;\n\t}\n};\n\ntypedef Segment Line;\n\nclass Circle\n{\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point inc=Point(),double inr=0.0):c(inc),r(inr){}\n};\n\ntypedef vector<Point> Polygon;\n\ndouble dot(Vector a,Vector b)\n{\n\treturn a.x*b.x+a.y*b.y;\n}\n\ndouble cross(Vector a,Vector b)\n{\n\treturn a.x*b.y-a.y*b.x;\n}\nconst int counter_clockwise=1;\nconst int clockwise=-1;\nconst int on_segment=0;\nconst int online_back=2;\nconst int online_front=-2;\n\ndouble norm(Vector a)\n{\n\treturn a.x*a.x+a.y*a.y;\n}\n\ndouble abs(Vector a)\n{\n\treturn sqrt(norm(a));\n}\n\nbool isorthogonal(Vector a,Vector b)\n{\n\treturn equals(dot(a,b),0.0);\n}\n\nbool isorthogonal(Point a1,Point a2,Point b1,Point b2)\n{\n\treturn isorthogonal(a1-a2,b1-b2);\n}\n\nbool isorthogonal(Segment s1,Segment s2)\n{\n\treturn equals(dot(s1.getvector(),s2.getvector()),0.0);\n}\n\nbool isparallel(Vector a,Vector b)\n{\n\treturn equals(cross(a,b),0.0);\n}\n\nbool isparallel(Point a1,Point a2,Point b1,Point b2)\n{\n\treturn isparallel(a1-a2,b1-b2);\n}\n\nbool isparallel(Segment s1,Segment s2)\n{\n\treturn equals(cross(s1.getvector(),s2.getvector()),0.0);\n}\n\nPoint project(Segment s,Point p)\n{\n\tVector base=s.getvector();\n\tdouble r=dot(p-s.p1,base)/norm(base);\n\treturn s.p1+base*r;\n}\n\nPoint reflect(Segment s,Point p)\n{\n\treturn project(s,p)*2.0-p;//p+(project(s,p)-p)*2.0\n}\n\ndouble getdistance(Point a,Point b)\n{\n\treturn abs(a-b);\n}\n\ndouble getdistancelp(Line l,Point p)//Line,Point\n{\n\tdouble s=abs(cross(l.p2-l.p1,p-l.p1));\n\treturn s/abs(l.getvector());\n}\n\ndouble getdistancesp(Segment s,Point p)\n{\n\tif(dot(s.getvector(),p-s.p1)<0.0)return abs(p-s.p1);\n\telse if(dot(s.p1-s.p2,p-s.p2)<0.0)return abs(p-s.p2);\n\telse return getdistancelp(s,p);\n}\n\nint ccw_online(Point p0,Point p1,Point p2)\n{\n\tVector a=p1-p0;\n\tVector b=p2-p0;\n\tif(cross(a,b)>EPS)return counter_clockwise;\n\telse if(cross(a,b)<-EPS)return clockwise;\n\telse if(dot(a,b)<-EPS)return online_back;\n\telse if(a.norm()<b.norm())return online_front;\n\telse return on_segment;\n}\n\nint ccw(Point p0,Point p1,Point p2)\n{\n\tint c=ccw_online(p0,p1,p2);\n\tif(c==counter_clockwise||c==clockwise)return c;\n\telse return on_segment;\n}\n\nbool intersect(Point p1,Point p2,Point p3,Point p4)\n{\n\treturn ccw(p1,p2,p3)*ccw(p1,p2,p4)<=0&&ccw(p3,p4,p1)*ccw(p3,p4,p2)<=0;\n}\n\nbool intersect(Segment s1,Segment s2)\n{\n\treturn intersect(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n\ndouble getdistance(Segment s1,Segment s2)\n{\n\tif(intersect(s1,s2))return 0.0;\n\telse return min(min(getdistancesp(s1,s2.p1),getdistancesp(s1,s2.p2)),\n\t\t\tmin(getdistancesp(s2,s1.p1),getdistancesp(s2,s1.p2)));\n}\n\nPoint getcrosspoint(Segment s1,Segment s2)\n{\n\tVector base=s2.getvector();\n\tdouble d1=abs(cross(base,s1.p1-s2.p1));\n\tdouble d2=abs(cross(base,s1.p2-s2.p1));\n\tdouble t=d1/(d1+d2);\n\treturn s1.p1+s1.getvector()*t;\n}\n\npair<Point,Point> getcrosspoint(Circle c,Line l)\n{\n\tVector pr=project(l,c.c);\n\tVector e=l.getvector()/abs(l.getvector());\n\tdouble base=sqrt(c.r*c.r-norm(pr-c.c));\n\treturn make_pair(pr+e*base,pr-e*base);\n}\n\ndouble arg(Vector p)\n{\n\treturn atan2(p.y,p.x);\n}\n\nPoint polar(double r,double theta)\n{\n\treturn Point(r*cos(theta),r*sin(theta));\n}\n\npair<Point,Point> getcrosspoint(Circle c1,Circle c2)\n{\n\tdouble d=abs(c2.c-c1.c);\n\tdouble a=acos((c1.r*c1.r+d*d-c2.r*c2.r)/(2.0*c1.r*d));\n\tdouble t=arg(c2.c-c1.c);\n\treturn make_pair(c1.c+polar(c1.r,t+a),c1.c+polar(c1.r,t-a));\n}\nconst int Bottom=0;\nconst int Left=1;\nconst int Right=2;\nconst int Top=3;\n\nclass endPoint\n{\npublic:\n\tPoint p;\n\tint seg;//id of Point\n\tint st;//kind of Point\n\tendPoint(){}\n\tendPoint(Point inp,int inseg,int inst):p(inp),seg(inseg),st(inst){}\n\tbool operator<(const endPoint &ep)const\n\t{\n\t\tif(p.y==ep.p.y)\n\t\t{\n\t\t\treturn st<ep.st;//Bottom->Left->Right->Top\n\t\t}\n\t\telse return p.y<ep.p.y;\n\t}\n};\n\nendPoint EP[200000];\n\nint manhattanintersection(vector<Segment> s)\n{\n\tint n=s.size();\n\tdouble sto;\n\t\n\tfor(int i=0,k=0;i<n;i++)\n\t{\n\t\tif(s[i].p1.y==s[i].p2.y)\n\t\t{\n\t\t\tif(s[i].p1.x>s[i].p2.x)\n\t\t\t{\n\t\t\t\tsto=s[i].p1.x;\n\t\t\t\ts[i].p1.x=s[i].p2.x;\n\t\t\t\ts[i].p2.x=sto;\n\t\t\t}\n\t\t}\n\t\telse if(s[i].p1.y>s[i].p2.y)\n\t\t{\n\t\t\tsto=s[i].p1.y;\n\t\t\ts[i].p1.y=s[i].p2.y;\n\t\t\ts[i].p2.y=sto;\n\t\t}\n\t\t\n\t\tif(s[i].p1.y==s[i].p2.y)\n\t\t{\n\t\t\tEP[k++]=endPoint(s[i].p1,i,Left);\n\t\t\tEP[k++]=endPoint(s[i].p2,i,Right);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tEP[k++]=endPoint(s[i].p1,i,Bottom);\n\t\t\tEP[k++]=endPoint(s[i].p2,i,Top);\n\t\t}\n\t}\n\t\n\tsort(EP,EP+2*n);\n\t\n\tset<int> BT;\n\tBT.insert(1000000001);\n\tint cnt=0;\n\t\n\tfor(int i=0;i<2*n;i++)\n\t{\n\t\tif(EP[i].st==Top)BT.erase(EP[i].p.x);\n\t\telse if(EP[i].st==Bottom)BT.insert(EP[i].p.x);\n\t\telse if(EP[i].st==Left)\n\t\t{\n\t\t\tset<int>::iterator b=lower_bound(BT.begin(),BT.end(),s[EP[i].seg].p1.x);\n\t\t\tset<int>::iterator e=upper_bound(BT.begin(),BT.end(),s[EP[i].seg].p2.x);\n\t\t\tcnt+=distance(b,e);\n\t\t}\n\t}\n\t\n\treturn cnt;\n}\nPolygon andrewscan(Polygon s)\n{\n\tPolygon u,l;\n\tif(s.size()<=2)return s;\n\tsort(s.begin(),s.end());\n\tu.push_back(s[0]);\n\tu.push_back(s[1]);\n\tl.push_back(s[s.size()-1]);\n\tl.push_back(s[s.size()-2]);\n\t\n\tfor(int i=2;i<s.size();i++)\n\t{\n\t\tfor(int n=u.size();n>=2&&ccw(u[n-2],u[n-1],s[i])!=clockwise;n--)\n\t\t{\n\t\t\tu.pop_back();\n\t\t}\n\t\tu.push_back(s[i]);\n\t}\n\t\n\tfor(int i=s.size()-3;i>=0;i--)\n\t{\n\t\tfor(int n=l.size();n>=2&&ccw(l[n-2],l[n-1],s[i])!=clockwise;n--)\n\t\t{\n\t\t\tl.pop_back();\n\t\t}\n\t\tl.push_back(s[i]);\n\t}\n\t\n\treverse(l.begin(),l.end());\n\tfor(int i=u.size()-2;i>=1;i--)l.push_back(u[i]);\n\t\n\treturn l;\n}\nconst int in=2;\nconst int on=1;\nconst int out=0;\n\nint contain(Polygon g,Point p)\n{\n\tint n=g.size();\n\tbool x=false;\n\tPoint a,b;\n\tfor(int i=0;i<n;i++)\n\t{\n\t\ta=g[i]-p;\n\t\tb=g[(i+1)%n]-p;\n\t\tif(abs(cross(a,b))<EPS&&dot(a,b)<EPS)return on;\n\t\tif(a.y>b.y)\n\t\t{\n\t\t\tPoint sto=a;\n\t\t\ta=b;\n\t\t\tb=sto;\n\t\t}\n\t\tif(a.y<EPS&&EPS<b.y&&cross(a,b)>EPS)x=!x;\n\t}\n\treturn x?in:out;\n}\nint main()\n{\n\tSegment s;\n\tcin>>s.p1.x>>s.p1.y>>s.p2.x>>s.p2.y;\n\tint q;cin>>q;\n\tPoint a;\n\tint f;\n\tfor(int i=0;i<q;i++)\n\t{\n\t\tcin>>a.x>>a.y;\n\t\tf=ccw_online(s.p1,s.p2,a);\n\t\tif(f==on_segment)cout<<\"ON_SEGMENT\"<<endl;\n\t\telse if(f==online_front)cout<<\"ONLINE_FRONT\"<<endl;\n\t\telse if(f==online_back)cout<<\"ONLINE_BACK\"<<endl;\n\t\telse if(f==clockwise)cout<<\"CLOCKWISE\"<<endl;\n\t\telse cout<<\"COUNTER_CLOCKWISE\"<<endl;\n\t}\n\treturn 0;\t\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nstruct vec{\n    double x,y;\n};\n\nconst double eps = 0.00001;\n\nint main(void){\n    vec p0,p1,p2,v1,v2;\n    int q;\n    cin >> p0.x >> p0.y >> p1.x >> p1.y;\n    v1.x=p1.x-p0.x; v1.y=p1.y-p0.y;\n    cin >> q;\n    cout.precision(10);\n    cout.setf(std::ios::showpoint);\n    for(int i=0;i<q;i++){\n        cin >> p2.x >> p2.y;\n        v2.x=p2.x-p0.x; v2.y=p2.y-p0.y;\n        double p=v1.x*v2.y-v1.y*v2.x;\n        if(p>eps){\n            cout << \"COUNTER_CLOCKWISE\" << endl;\n            continue;\n        }\n        if(p<-eps){\n            cout << \"CLOCKWISE\" << endl;\n            continue;\n        }\n        p=v2.x/v1.x;\n        if(p<0){\n            cout << \"ONLINE_BACK\" << endl;\n        }else if(p<1){\n            cout << \"ON_SEGMENT\" << endl;\n        }else{\n            cout << \"ONLINE_FRONT\" << endl;\n        }\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n\nint main(void) {\n  int x1, y1, x2, y2, xp, yp;\n  scanf(\"%d%d%d%d\", &x1, &y1, &x2, &y2);\n  x2 -= x1, y2 -= y1;\n  int q, i;\n  scanf(\"%d\", &q);\n  for(i = 0; i < q; ++i) {\n    scanf(\"%d%d\", &xp, &yp);\n    xp -= x1, yp -= y1;\n    int op = xp * y2 - yp * x2;\n    if(op > 0) printf(\"CLOCKWISE\\n\");\n    else if(op < 0) printf(\"COUNTER_CLOCKWISE\\n\");\n    else {\n      if(xp * x2 < 0 || yp * y2 < 0) printf(\"ONLINE_BACK\\n\");\n      else if((x2 > 0 && x2 > xp) || (y2 > 0 && y2 > yp) || (y2 < 0 && y2 < yp) || (x2 < 0 && x2 < xp)) printf(\"ON_SEGMENT\\n\");\n      else printf(\"ONLINE_FRONT\\n\");\n    }\n  }\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <complex>\nusing namespace std;\n\n#define X real()\n#define Y imag()\n#define EPS (1e-10)\n\ntypedef complex<double> P;\ntypedef P Vec;\n\ndouble dot(Vec v1, Vec v2) {\n  return (v1*conj(v2)).X;\n}\n\ndouble cross(Vec v1, Vec v2) {\n  return (v1*conj(v2)).Y;\n}\n\nconst int COUNTER_CLOCKWISE = 0,\n  CLOCKWISE    = 1,\n  ONLINE_FRONT = 2,\n  ONLINE_BACK  = 3,\n  ON_SEGMENT   = 4;\n\nint ccw(P p0, P p1, P p2) {\n  Vec a = p1 - p0;\n  Vec b = p2 - p0;\n  if(cross(a, b) > EPS) return CLOCKWISE;\n  if(cross(a, b) < -EPS) return COUNTER_CLOCKWISE;\n  if(dot(a, b) < -EPS) return ONLINE_BACK;\n  if(norm(a) < norm(b)) return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\n\nvoid putResult(int x) {\n  if(x == COUNTER_CLOCKWISE) cout << \"COUNTER_CLOCKWISE\" << endl;\n  if(x == CLOCKWISE) cout << \"CLOCKWISE\" << endl;\n  if(x == ONLINE_FRONT) cout << \"ONLINE_FRONT\" << endl;\n  if(x == ONLINE_BACK) cout << \"ONLINE_BACK\" << endl;\n  if(x == ON_SEGMENT) cout << \"ON_SEGMENT\" << endl;\n}\n\nint main() {\n  double x, y;\n  P p0, p1;\n  \n  cin >> x >> y; p0 = P(x, y);\n  cin >> x >> y; p1 = P(x, y);\n  \n  int n;\n  cin >> n;\n  for(int i=0; i<n; i++) {\n    cin >> x >> y;\n    P p2 = P(x, y);\n    \n    putResult( ccw(p0, p1, p2) );\n  }\n  \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<iomanip>\n#include<algorithm>\n#define _USE_MATH_DEFINES\n#include<math.h>\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS )\nusing namespace std;\n\nclass Point {\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0) :x(x), y(y) {}\n\tPoint operator + (Point p) {\n\t\treturn Point(x + p.x, y + p.y); \n\t}\n\tPoint operator - (Point p) {\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n\tPoint operator * (double a) {\n\t\treturn Point(a * x, a * y);\n\t}\n\tPoint operator / (double a) {\n\t\treturn Point(x / a, y / a);\n\t}\n\n\tdouble abs() {\n\t\treturn sqrt(norm());\n\t}\n\tdouble norm() {\n\t\treturn x * x + y * y;\n\t}\n\n\tbool operator < (const Point &p)const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p)const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b);\ndouble cross(Vector a, Vector b);\ndouble getDistanceSP(Point p, Point p1, Point p2);\ndouble angle(Vector a, Vector b);\nbool doIntersect(Point p1, Point p2, Point p3, Point p4);\ndouble getDistanceSS(Point p1, Point p2, Point p3, Point p4);\nvoid clockwise(Point p0, Point p1, Point p2);\n\nint main() {\n    int i, q;\n\tdouble x0, x1, x2, y0, y1, y2;\n\tcin >> x0 >> y0 >> x1 >> y1;\n\tPoint p0(x0, y0), p1(x1, y1);\n\tcin >> q;\n\tfor (i = 0; i < q; i++) {\n\t\tcin >> x2 >> y2;\n\t\tPoint p2(x2, y2);\n\t\tclockwise(p0, p1, p2);\n\t}\n\treturn 0;\n}\n\ndouble dot(Vector a, Vector b) {\n\treturn a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n\treturn a.x * b.y - a.y * b.x;\n}\n\ndouble getDistanceSP(Point p, Point p1, Point p2) {\n\tif (dot(p - p1, p2 - p1) < 0.0)return (p - p1).abs();\n\telse if (dot(p - p2, p1 - p2) < 0.0)return (p - p2).abs();\n\telse return  fabs(cross(p2 - p1, p - p1)) / (p2 - p1).abs();\n}\n\n\ndouble angle(Vector a, Vector b) {\n\tif (cross(a, b) >= 0.0)return acos(dot(a, b) / a.abs() / b.abs());\n\telse return (-1) * acos(dot(a, b) / a.abs() / b.abs());\n}\n\nbool doIntersect(Point p1, Point p2, Point p3, Point p4) {\n\tif ((equals(fabs(angle(p2 - p1, p4 - p1)), 0) || equals(fabs(angle(p2 - p1, p4 - p1)), M_PI)) && (equals(fabs(angle(p2 - p1, p3 - p1)), 0) || equals(fabs(angle(p2 - p1, p3 - p1)), M_PI)))return false;\n\telse if (angle(p3 - p1, p4 - p1) >= angle(p3 - p1, p2 - p1) && angle(p3 - p1, p2 - p1) >= 0.0 && angle(p2 - p3, p1 - p3) >= angle(p2 - p3, p4 - p3) && angle(p2 - p3, p4 - p3) >= 0.0)return true;\n\telse if (angle(p3 - p2, p4 - p2) >= angle(p3 - p2, p1 - p2) && angle(p3 - p2, p1 - p2) >= 0.0 && angle(p1 - p3, p2 - p3) >= angle(p1 - p3, p4 - p3) && angle(p1 - p3, p4 - p3) >= 0.0)return true;\n\telse return false;\n}\n\ndouble getDistanceSS(Point p1, Point p2, Point p3, Point p4) {\n\tif (doIntersect(p1, p2, p3, p4))return 0;\n\telse return min({ getDistanceSP(p4, p1, p2), getDistanceSP(p3, p1, p2), getDistanceSP(p1, p3, p4), getDistanceSP(p2, p3, p4) });\n}\n\nvoid clockwise(Point p0, Point p1, Point p2) {\n\tif(equals((p2 - p0).abs(), 0) || equals((p2 - p1).abs(), 0))cout << \"ON_SEGMENT\" << endl;\n\telse if (equals(angle(p1 - p0, p2 - p0), M_PI))cout << \"ONLINE_BACK\" << endl;\n\telse if (equals(angle(p1 - p0, p2 - p0), 0)) {\n\t\tif ((p1 - p0).norm() > (p2 - p0).norm())cout << \"ON_SEGMENT\" << endl;\n\t\telse cout << \"ONLINE_FRONT\" << endl;\n\t}\n\telse if (cross(p1 - p0, p2 - p0) > 0) cout << \"COUNTER_CLOCKWISE\" << endl;\n\telse cout << \"CLOCKWISE\" << endl;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n//点を表す構造体\nclass Point {\n  public:\n  double x,y;\n  Point(double x=0,double y=0): x(x),y(y){}\n\n  //各種演算\n  Point operator+ (Point p) { return Point(x+p.x,y+p.y); }\n  Point operator- (Point p) { return Point(x-p.x,y-p.y); }\n  Point operator* (double a) {return Point(a*x,a*y); }\n  Point operator/ (double a) {return Point(x/a,y/a); }\n\n  double abs() { return sqrt(norm()); }\n  double norm() { return x*x+y*y; }\n\n  bool operator< (const Point &p) const{\n    return x!=p.x ? x<p.x : y<p.y;\n  }\n\n  bool operator> (const Point &p) const{\n    return x!=p.x ? x>p.x : y>p.y;\n  }\n\n  bool operator== (const Point &p) const{\n    return fabs(x-p.x)<EPS && fabs(y-p.y)<EPS;\n  }\n};\n\n//ベクトルを表す構造体\ntypedef Point Vector;\n\n//線分を表す構造体\nstruct Segment{\n  Segment(Point p1 = Point(), Point p2 = Point()) : p1(p1), p2(p2) {}\n  Point p1,p2;\n};\n\n//直線を表す構造体\ntypedef Segment Line;\n\n//円を表すクラス\nclass Circle{\n  public:\n  //円の中心\n  Point c;\n  //半径\n  double r;\n  Circle(Point c=Point(),double r=0.0): c(c),r(r) {}\n};\n\n//多角形の表現\ntypedef vector<Point> Polygon;\n\n//ベクトルaとbの内積\ndouble dot(Vector a,Vector b){\n  return a.x*b.x+a.y*b.y;\n}\n\n//ベクトルaとbの外積\ndouble cross(Vector a,Vector b){\n  return a.x*b.y-a.y*b.x;\n}\n\n//ベクトルaとbの直交判定\nbool isOrthogonal(Vector a,Vector b){\n  return equals(dot(a,b),0.0);\n}\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n  return isOrthogonal(a1-a2,b1-b2);\n}\nbool isOrthogonal(Segment s1,Segment s2){\n  return equals(dot(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n\n//ベクトルaとbの平行判定\nbool isParallel(Vector a,Vector b){\n  return equals(cross(a,b),0.0);\n}\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n  return isParallel(a1-a2,b1-b2);\n}\nbool isParallel(Segment s1,Segment s2){\n  return equals(cross(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n\n//線分sに対する点pの射影\nPoint project(Segment s,Point p){\n  Vector base=s.p2-s.p1;\n  double r=dot(p-s.p1,base)/base.norm();\n  return s.p1+base*r;\n}\n\n//線分sを対称軸とした点pの線対称の点\nPoint reflect(Segment s,Point p){\n  return p+(project(s,p)-p)*2.0;\n}\n/*\n//点aと点bの距離\ndouble getDistace(Point a,Point b){\n  return abs(a-b);\n}\n//直線lと点pの距離\ndouble getDistaceLP(Line l,Point p){\n  return abs(cross(l.p2-l.p1,p-l.p1)/abs(l.p2-l.p1));\n} \n//線分sと点pの距離\ndouble getDistaceSP(Segment s,Point p){\n  if(dot(s.p2-s.p1,p-s.p1)<0.0) return abs(p-s.p1);\n  if(dot(s.p1-s.p2,p-s.p2)<0.0) return abs(p-s.p2);\n  return getDistaceLP(s,p);\n}\n//線分s1と線分s2の距離\ndouble getDistace(Segment s1,Segment s2){\n  if(intersect(s1,s2)) return 0.0;\n  return min(min(getDistaceSP(s1,s2.p1),getDistaceSP(s1,s2.p2)),min(getDistaceSP(s2,s1.p1),getDistac\n}*/\n\n//反時計回りCCW\nstatic const int COUNTER_CLOCKWISE=1;\nstatic const int CLOCKWISE=-1;\nstatic const int ONLINE_BACK=2;\nstatic const int ONLINE_FRONT=-2;\nstatic const int ON_SEGMENT=0;\n//反時計回りCCW\nint ccw(Point p0,Point p1,Point p2){\n  Vector a=p1-p0;\n  Vector b=p2-p0;\n  if(cross(a,b)>EPS) return COUNTER_CLOCKWISE;\n  if(cross(a,b)<-EPS) return CLOCKWISE;\n  if(dot(a,b)<-EPS) return ONLINE_BACK;\n  if(a.norm()<b.norm()) return ONLINE_FRONT;\n\n  return ON_SEGMENT;\n}\n\n//線分s1と線分s2の交点(ダメらしい)\nPoint getCrossPoint(Segment s1,Segment s2){\n  Vector base=s2.p2-s2.p1;\n  double d1=abs(cross(base,s1.p1-s2.p1));\n  double d2=abs(cross(base,s1.p2-s2.p1));\n  double t=d1/(d1+d2);\n  return s1.p1+(s1.p2-s1.p1)*t;\n}\n\n\nint main(){\n  cin.tie(nullptr);\n  ios_base::sync_with_stdio(false);\n  int x0,x1,y0,y1;\n  cin>>x0>>y0>>x1>>y1;\n  Point p0(x0,y0),p1(x1,y1);\n  int n;\n  cin>>n;\n  for(int i=0;i<n;i++){\n    int x2,y2;\n    cin>>x2>>y2;\n    Point p2(x2,y2);\n    int fg=ccw(p0,p1,p2);\n    if(fg==COUNTER_CLOCKWISE){\n      cout<<\"COUNTER_CLOCKWISE\"<<'\\n';\n    }\n    else if(fg==CLOCKWISE){\n      cout<<\"CLOCKWISE\"<<'\\n';\n    }\n    else if(fg==ONLINE_BACK){\n      cout<<\"ONLINE_BACK\"<<'\\n';\n    }\n    else if(fg==ONLINE_FRONT){\n      cout<<\"ONLINE_FRONT\"<<'\\n';\n    }\n    else{\n      cout<<\"ON_SEGMENT\"<<'\\n';\n    }\n  }\n  return(0);\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <stdio.h>\n\n#include <cmath>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nconst double EPS = 1e-10;\n\nconst int COUNTER_CLOCKWISE = 1;\nconst int CLOCKWISE = -1;\nconst int ONLINE_BACK = 2;\nconst int ONLINE_FRONT = -2;\nconst int ON_SEGMENT = 0;\n\ndouble add(double a, double b){\n    if(abs(a + b) < EPS * (abs(a) + abs(b)))return 0;\n    return a + b;\n}\n\nbool equals(double a, double b){\n    return fabs(a - b) < EPS;\n}\n\nstruct Pt {\n    double x, y;\n    Pt(){}\n    Pt(double x, double y):x(x), y(y){}\n    Pt operator + (Pt p){return Pt(add(x, p.x), add(y, p.y));}\n    Pt operator - (Pt p){return Pt(add(x, -p.x), add(y, -p.y));}\n    Pt operator * (double d){return Pt(x * d, y * d);}\n    Pt operator / (double d){return Pt(x / d, y / d);}\n    bool operator < (const Pt &p)const {return x != p.x ? x < p.x : y < p.y;}\n    bool operator == (const Pt &p)const {return equals(x, p.x)&&equals(y, p.y);}\n    double dot(Pt p){return add(x * p.x, y * p.y);}\n    double det(Pt p){return add(x * p.y, -y * p.x);}\n    double norm(){return x*x+y*y;}\n    double abs(){return sqrt(norm());}\n    bool isOrthogonal(Pt v){return equals(dot(v), 0.0);}\n    bool isParallel(Pt v){return equals(det(v), 0.0);}\n    double distance(Pt p){return Pt(add(x, -p.x), add(y, -p.y)).abs();}\n    int ccw(Pt p1, Pt p2){\n        Pt v1 = p1 - Pt(x, y);\n        Pt v2 = p2 - Pt(x, y);\n        if(v1.det(v2) > EPS) return COUNTER_CLOCKWISE;\n        if(v1.det(v2) < -EPS)return CLOCKWISE;\n        if(v1.dot(v2) < -EPS)return ONLINE_BACK;\n        if(v1.norm() < v2.norm())return ONLINE_FRONT;\n        return ON_SEGMENT;\n    }\n};\n\nstruct Cr{\n    Pt p;\n    double r;\n    Cr(){}\n    Cr(double x, double y, double r):p(Pt(x, y)), r(r){}\n    Cr(Pt p, double r):p(p), r(r){}\n};\n\nstruct Pl{\n    vector<Pt>pts;\n};\n\nstruct Ln {\n    Pt p1, p2;\n    Ln(){}\n    Ln(double x1, double y1, double x2, double y2):p1(Pt(x1, y1)), p2(Pt(x2, y2)){}\n    Ln(Pt p1, Pt p2):p1(p1), p2(p2){}\n    Pt project(Pt p){\n        Pt base = p2 - p1;\n        double r = base.dot(p - p1) / base.norm();\n        return p1 + base * r;\n    }\n    Pt reflect(Pt p){\n        return p + Pt(project(p) - p) * 2.0;\n    }\n    bool isOrthogonal(Ln line){\n        Pt v1 = p2 - p1;\n        Pt v2 = line.p2 - line.p1;\n        return v1.isOrthogonal(v2);\n    }\n    bool isParallel(Ln line){\n        Pt v1 = p2 - p1;\n        Pt v2 = line.p2 - line.p1;\n        return v1.isParallel(v2);\n    }\n    bool intersect(Ln seg){\n        Pt p3 = seg.p1;\n        Pt p4 = seg.p2;\n        return ( p1.ccw(p2, p3) * p1.ccw(p2, p4) <= 0 && p3.ccw(p4, p1) * p3.ccw(p4, p2) <= 0);\n    }\n    double distanceLP(Pt p){\n        return abs(Pt(p2-p1).det(p-p1)) / Pt(p2 - p1).abs();\n    }\n    double distanceSP(Pt p){\n        if(Pt(p2-p1).dot(p-p1) < 0.0)return Pt(p-p1).abs();\n        if(Pt(p2-p1).dot(p-p2) < 0.0)return Pt(p-p2).abs();\n        return distanceLP(p);\n    }\n    double distance(Ln sg){\n        if(intersect(sg))return 0.0;\n        return min(min(distanceSP(sg.p1), distanceSP(sg.p2)), min(sg.distanceSP(p1), sg.distanceSP(p2)));\n    }\n    Pt crossPt(Ln line){\n        double txa = p2.x - p1.x;\n        double tya = p2.y - p1.y;\n        double txb = line.p2.x - line.p1.x;\n        double tyb = line.p2.y - line.p1.y;\n        double t = (txb * (line.p1.y - p1.y) - tyb * (line.p1.x - p1.x)) / (txb * tya - txa * tyb);\n        return p1 + (p2 - p1) * t;\n    }\n};\n\n\nsigned main(){\n    double x0, y0, x1, y1, x2, y2;\n    scanf(\"%lf %lf %lf %lf\", &x0, &y0, &x1, &y1);\n    Pt p(x0, y0), p1(x1, y1);\n    int n;\n    scanf(\"%d\", &n);\n    for(int i=0;i<n;i++){\n        scanf(\"%lf %lf\", &x2, &y2);\n        Pt p2(x2, y2);\n        int ccw = p.ccw(p1, p2);\n        if(ccw==1)printf(\"COUNTER_CLOCKWISE\\n\");\n        if(ccw==-1)printf(\"CLOCKWISE\\n\");\n        if(ccw==2)printf(\"ONLINE_BACK\\n\");\n        if(ccw==-2)printf(\"ONLINE_FRONT\\n\");\n        if(ccw==0)printf(\"ON_SEGMENT\\n\");\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\nusing Point = complex< double >;\nconst double EPS = 1e-10, PI = acos(-1);\n\nbool eq(double a, double b){ return fabs(a-b) < EPS; }\n\nistream &operator>> (istream &is, Point &p) {\n  double a, b;\n  is >> a >> b;\n  p = Point(a, b);\n  return is;\n}\n\nostream &operator<< (ostream &os, Point &p) {\n  return os << fixed << setprecision(10) << p.real() << \" \" << p.imag();\n}\n\nbool operator<(const Point &a, const Point &b) {\n  return a.real() != b.real() ? a.real() < b.real() : a.imag() < b.imag();\n}\n\n// rotate Φ(rad)\n// x = r * cos(θ + Φ)\n//   = r * cos(θ) * cos(Φ) - r * sin(θ) * sin(Φ)\n//   = x * cos(Φ) - y * sin(Φ) (∵ cos(θ) = x/r, sin(θ) = y/r)  \nPoint rotate(double phi, const Point &p) {\n  double x = p.real(), y = p.imag();\n  return Point(x * cos(phi) - y * sin(phi), x * sin(phi) + y * cos(phi));\n}\n\ndouble radian_to_degree(double r) {\n  return (r * 180.0 / PI);\n}\n\ndouble degree_to_radian(double d) {\n  return (d * PI / 180.0);\n}\n\nstruct Line{\n  Point a, b;\n\n  Line() = default;\n\n  Line(Point a, Point b) : a(a), b(b){}\n\n  Line(double A, double B, double C){\n    //ax + by = c\n    if(eq(A, 0)){\n      a = Point(0, C/B), b = Point(1, C/B);\n    }else if(eq(B, 0)){\n      a = Point(C/A, 0), b = Point(C/A, 1);\n    }else{\n      a = Point(0, C/B), b = Point(C/A, 0);\n    }\n  }\n\n  friend istream &operator>>(istream &is, Line &a) {\n    return is >> a.a >> a.b;\n  }\n  friend ostream &operator<<(ostream &os, Line &a) {\n    return os << a.a << \" to \" << a.b;\n  }\n};\n\nstruct Segment: Line{\n  Segment() = default;\n\n  Segment(Point a, Point b) : Line(a, b) {}\n};\n\nstruct Circle {\n  Point p;\n  double r;\n\n  Circle() = default;\n\n  Circle(Point p, double r): p(p), r(r){}\n};\n\nusing Points = vector<Point>;\nusing Polygon = vector<Point>;\nusing Segments = vector<Segment>;\nusing Lines = vector<Line>;\nusing Circles = vector<Circle>;\n\ndouble cross(const Point &a, const Point &b) {\n  return a.real() * b.imag() - a.imag() * b.real();\n}\n\ndouble dot(const Point& a, const Point &b) {\n  return a.real() * b.real() + a.imag() * b.imag();\n}\n\n//https://mathtrain.jp/projection\nPoint projection(const Line &l, const Point &p){\n  double t = dot(p - l.a, l.a-l.b) / norm(l.a - l.b);\n  return l.a + (l.a - l.b) * t;\n}\n\nPoint projection(const Segment &l, const Point &p){\n  double t = dot(p - l.a, l.b-l.a) / norm(l.a - l.b);\n  return l.a + (l.b - l.a) * t;\n}\n\nPoint reflection(const Line &l, const Point &p){\n  return p + (projection(l, p) - p) * 2.0;\n}\n\nint ccw(const Point &a, Point b, Point c) {\n  b -= a, c -= a;\n  if(cross(b, c) > EPS) return 1;   // \"COUNTER_CLOCKWISE\"\n  if(cross(b, c) < -EPS) return -1; // \"CLOCKWISE\"\n  if(dot(b, c) < -EPS) return 2;    // \"ONLINE_BACK\" c-a-b\n  if(norm(b) < norm(c)) return -2;  // \"ONLINE_FRONT\" a-b-c\n  return 0;                         // \"ON_SEGMENT\" a-c-b\n  \n}\nint main(){\n  Point a, b;\n  cin >> a >> b;\n  int q; cin >> q;\n  while(q--){\n    Point p; cin >> p;\n    int t = ccw(a, b, p);\n    string s;\n    switch(t){\n      case 2: s = \"ONLINE_BACK\"; break;\n      case 1: s = \"COUNTER_CLOCKWISE\"; break;\n      case 0: s = \"ON_SEGMENT\"; break;\n      case -1: s = \"CLOCKWISE\"; break;\n      case -2: s = \"ONLINE_FRONT\"; break;\n      default: break;\n    };\n    cout << s << endl;\n  }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\nusing namespace std;\n\nint main()\n{\n\tint p0x = 0, p0y = 0, p1x = 0, p1y = 0, q = 0, px = 0, py = 0;\n\tint a = 0, b = 0;\n\tlong y = 0;\n\tdouble t = 0;\n\n\tcin >> p0x >> p0y >> p1x >> p1y;\n\tcin >> q;\n\n\ta = p1x - p0x;\n\tb = p1y - p0y;\n\n\tfor (int i = 0; i < q; i++) {\n\t\tcin >> px >> py;\n\n\t\ty = -b * px + a * py;\n\n\t\tif(y > 0)\n\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\telse if(y < 0)\n\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\telse {\n\t\t\tif (a != 0)\n\t\t\t\tt = (double)(px - p0x) / (double)a;\n\t\t\telse\n\t\t\t\tt = (double)(py - p0y) / (double)b;\n\t\t\t\t\n\t\t\tif (t < 0)\n\t\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t\telse if (t > 1)\n\t\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t\telse\n\t\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t}\n\t}\n\t\t\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#pragma warning(disable : 4267) // \"int n = (unsigned)size\"\n\nusing vi = vector<int>; using vvi = vector<vi>; using vvvi = vector<vvi>;\nusing ll = long long int;\nusing vll = vector<ll>; using vvll = vector<vll>; using vvvll = vector<vvll>;\nusing vd = vector<double>; using vvd = vector<vd>; using vvvd = vector<vvd>;\nusing P = pair<int, int>;\nusing Pll = pair<ll, ll>;\nusing cdouble = complex<double>;\n\nconst double eps = 1e-9;\nconst double INFD = numeric_limits<double>::infinity();\n#define Loop(i, n) for(int i = 0; i < int(n); i++)\n#define Loopll(i, n) for(ll i = 0; i < ll(n); i++)\n#define Loop1(i, n) for(int i = 1; i <= int(n); i++)\n#define Loopll1(i, n) for(ll i = 1; i <= ll(n); i++)\n#define Loopr(i, n) for(int i = int(n) - 1; i >= 0; i--)\n#define Looprll(i, n) for(ll i = ll(n) - 1; i >= 0; i--)\n#define Loopr1(i, n) for(int i = int(n); i >= 1; i--)\n#define Looprll1(i, n) for(ll i = ll(n); i >= 1; i--)\n#define Foreach(buf, container) for(auto buf : container)\n#define Loopdiag(i, j, h, w, sum) for(int i = ((sum) >= (h) ? (h) - 1 : (sum)), j = (sum) - i; i >= 0 && j < (w); i--, j++)\n#define Loopdiagr(i, j, h, w, sum) for(int j = ((sum) >= (w) ? (w) - 1 : (sum)), i = (sum) - j; j >= 0 && i < (h); j--, i++)\n#define Loopdiagsym(i, j, h, w, gap) for (int i = ((gap) >= 0 ? (gap) : 0), j = i - (gap); i < (h) && j < (w); i++, j++)\n#define Loopdiagsymr(i, j, h, w, gap) for (int i = ((gap) > (h) - (w) - 1 ? (h) - 1 : (w) - 1 + (gap)), j = i - (gap); i >= 0 && j >= 0; i--, j--)\n#define Loopitr(itr, container) for(auto itr = container.begin(); itr != container.end(); itr++)\n#define printv(vector) Loop(ex_i, vector.size()) { cout << vector[ex_i] << \" \"; } cout << endl;\n#define printmx(matrix) Loop(ex_i, matrix.size()) { Loop(ex_j, matrix[ex_i].size()) { cout << matrix[ex_i][ex_j] << \" \"; } cout << endl; }\n#define quickio() ios::sync_with_stdio(false); cin.tie(0);\n#define bitmanip(m,val) static_cast<bitset<(int)m>>(val)\n#define Comp(type_t) bool operator<(const type_t &another) const\n#define fst first\n#define snd second\nbool nearlyeq(double x, double y) { return abs(x - y) < eps; }\nbool inrange(ll x, ll t) { return x >= 0 && x < t; }\nbool inrange(vll xs, ll t) { Foreach(x, xs) if (!(x >= 0 && x < t)) return false; return true; }\nint ceillog2(ll x) { int ret = 0;\tx--; while (x > 0) { ret++; x >>= 1; } return ret; }\nll rndf(double x) { return (ll)(x + (x >= 0 ? 0.5 : -0.5)); }\nll floorsqrt(ll x) { ll m = (ll)sqrt((double)x); return m + (m * m <= x ? 0 : -1); }\nll ceilsqrt(ll x) { ll m = (ll)sqrt((double)x); return m + (x <= m * m ? 0 : 1); }\nll rnddiv(ll a, ll b) { return (a / b + (a % b * 2 >= b ? 1 : 0)); }\nll ceildiv(ll a, ll b) { return (a / b + (a % b == 0 ? 0 : 1)); }\nll gcd(ll m, ll n) { if (n == 0) return m; else return gcd(n, m % n); }\nll lcm(ll m, ll n) { return m * n / gcd(m, n); }\n\n/*******************************************************/\n\nstruct point_t {\n\tdouble x, y;\n\tpoint_t operator+(const point_t &p) { return { x + p.x, y + p.y }; }\n\tpoint_t operator-(const point_t &p) { return { x - p.x, y - p.y }; }\n\tpoint_t operator*(const double &c) { return { x * c, y * c }; }\n};\n\n// ax + by + c = 0\nstruct line_t {\n\tdouble a, b, c;\n};\n\npoint_t cross_point(line_t l, line_t m) {\n\tpoint_t ret = { INFD, INFD };\n\tdouble d = l.a * m.b - m.a * l.b;\n\tif (nearlyeq(d, 0)) return ret;\n\tdouble x = l.b * m.c - m.b * l.c;\n\tdouble y = l.a * m.c - m.a * l.c;\n\tret = { x / d, y / -d };\n\treturn ret;\n}\n\n// normal vector = (a, b), passing p\nline_t solve_line(double a, double b, point_t p) {\n\treturn { a, b, -a * p.x - b * p.y };\n}\n\n// t should be radius\npoint_t rot(point_t p, double r) {\n\treturn {\n\t\tcos(r) * p.x - sin(r) * p.y,\n\t\tsin(r) * p.x + cos(r) * p.y\n\t};\n}\n\ndouble abs(point_t p) {\n\treturn sqrt(p.x * p.x + p.y * p.y);\n}\n\n// angle [0, 2PI) of vector p to vector q\ndouble angle(point_t p, point_t q) {\n\tp = p * (1.0 / abs(p));\n\tq = q * (1.0 / abs(q));\n\tdouble r0 = acos(p.x * q.x + p.y * q.y);\n\tdouble r1 = asin(p.x * q.y - p.y * q.x);\n\tif (r1 >= 0) return r0;\n\telse return 2 * M_PI - r0;\n}\n\nint main() {\n\tpoint_t p0, p1;\n\tcin >> p0.x >> p0.y >> p1.x >> p1.y;\n\tint q; cin >> q;\n\tcout << setprecision(20);\n\tLoop(i, q) {\n\t\tpoint_t p2;\n\t\tcin >> p2.x >> p2.y;\n\t\tpoint_t p = p1 - p0;\n\t\tpoint_t q = p2 - p0;\n\t\tif (nearlyeq(abs(p), 0)) {\n\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t}\n\t\telse if (nearlyeq(abs(q), 0)) {\n\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t}\n\t\telse {\n\t\t\tdouble r = angle(p, q);\n\t\t\tif (nearlyeq(r, M_PI)) {\n\t\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t\t}\n\t\t\telse if (nearlyeq(r, 0)) {\n\t\t\t\tif (abs(q) > abs(p)) {\n\t\t\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (r < M_PI) {\n\t\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\t\t}\n\t\t}\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint main(){\n\n\tint p0x,p0y,p1x,p1y,p2x,p2y;\n\tint q,cr;\n\n\tcin>>p0x>>p0y>>p1x>>p1y;\n\tcin>>q;\n\n\tfor(int i=0;i<q;i++){\n\t\tcin>>p2x>>p2y;\n\t\tcr=(p2x-p0x)*(p1y-p0y)-(p1x-p0x)*(p2y-p0y);\n\t\tif(cr==0){\n\t\t\tif(p2x-p0x<0==p1x-p0x<0&&p2y-p0y<0==p1y-p0y){\n\t\t\t\tif(pow(p2x-p0x,2.0)+(p2y-p0y,2.0)>pow(p1x-p0x,2.0)+(p1y-p0y,2.0)){\n\t\t\t\t\tcout<<\"ONLINE_FRONT\"<<endl;\n\t\t\t\t}\n\t\t\t\telse cout<<\"ON_SEGMENT\"<<endl;\n\t\t\t}\n\t\t\telse cout<<\"ONLINE_BACK\"<<endl;\n\t\t}\n\t\telse if(cr>0) cout<<\"CLOCKWISE\"<<endl;\n\t\telse cout<<\"COUNTER_CLOCKWISE\"<<endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<iomanip>\n#include<cmath>\n#include<vector>\n#include<algorithm>\n\nusing namespace std;\n\nconst double EPS = 1e-10;\nbool equals(double a, double b){ return (fabs(a) - fabs(b)) < EPS;};\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nclass Point{\npublic:\n\tdouble x, y;\n\t\n\tPoint(double x = 0, double y = 0): x(x), y(y) {}\n\tPoint(const Point &p) { x = p.x; y = p.y;};\n\t\n\tPoint operator + (const Point &p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (const Point &p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (const double &a) { return Point(x * a, y * a); }\n\tPoint operator / (const double &a) { return Point(x / a, y / a); }\n\t\n\tPoint & operator = (const Point& p) {x = p.x; y = p.y; return *this;};\n\tPoint & operator += (const Point& p) {x += p.x; y += p.y; return *this;};\n\tPoint & operator -= (const Point& p) {x -= p.x; y -= p.y; return *this;};\n\tPoint & operator *= (const Point& p) {x *= p.x; y *= p.y; return *this;};\n\tPoint & operator /= (const Point& p) {x /= p.x; y /= p.y; return *this;};\n\t\n\tbool operator < (const Point &p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\t\n\tbool operator > (const Point &p) const {\n\t\treturn x != p.x ? x > p.x : y > p.y;\n\t}\n\t\n\tbool operator == (const Point &p) const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n\t\n\tdouble abs() { return sqrt(norm()); };\n\tdouble norm() { return x * x + y * y;};\n};\n\ntypedef Point Vector;\n\n\ndouble norm(Vector a){\n\treturn a.x * a.x + a.y * a.y;\n}\n\ndouble abs(Vector a){\n\treturn sqrt(norm(a));\n}\n\ndouble dot(Vector a, Vector b){\n\treturn a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b){\n\treturn a.x * b.y - a.y * b.x;\n}\n\nstruct Segment{\n\tPoint p1, p2;\n};\n\ntypedef Segment Line;\n\n\n\n\nbool isOrthogonal(Vector a, Vector b){\n\treturn equals(dot(a,b), 0.0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2){\n\treturn isOrthogonal(a1 - a2, b1 - b2);\n}\n\nbool isOrthogonal(Segment s1, Segment s2){\n\treturn equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n\nbool isParallel(Vector a, Vector b){\n\treturn equals(cross(a, b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2){\n\treturn isParallel(a1 - a2, b1 - b2);\n}\n\nbool isPrallel(Segment s1, Segment s2){\n\treturn equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n\nint ccw(Point p0, Point p1, Point p2){\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif(cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif(cross(a, b) < -EPS) return CLOCKWISE;\n\tif(dot(a, b) < - EPS) return ONLINE_BACK;\n\tif(a.norm() < b.norm()) return ONLINE_FRONT;\n\t\n\treturn ON_SEGMENT;\n}\n\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0): c(c), r(r) {}\n};\n\ntypedef vector<Point> Polygon;\n\nsigned main(){\n\tcin.tie(0);\n\tios::sync_with_stdio(false);\n\tcout<<fixed<<setprecision(10);\n\t\n\tint q;\n\tPoint p0, p1;\n\t\n\tcin>>p0.x>>p0.y;\n\tcin>>p1.x>>p1.y;\n\t\n\tcin>>q;\n\t\n\tfor(int i = 0; i < q; i++){\n\t\tPoint p2;\n\t\tint ans;\n\t\t\n\t\tcin>>p2.x>>p2.y;\n\t\t\n\t\tans = ccw(p0, p1, p2);\n\t\t\n\t\tswitch(ans){\n\t\t\tcase COUNTER_CLOCKWISE: cout<<\"COUNTER_CLOCKWISE\"<<endl; break;\n\t\t\tcase CLOCKWISE: cout<<\"CLOCKWISE\"<<endl; break;\n\t\t\tcase ONLINE_BACK: cout<<\"ONLINE_BACK\"<<endl; break;\n\t\t\tcase ONLINE_FRONT: cout<<\"ONLINE_FRONT\"<<endl; break;\n\t\t\tcase ON_SEGMENT: cout<<\"ON_SEGMENT\"<<endl; break;\n\t\t}\n\t}\n\t\n\t\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <complex>\n#include <vector>\n#include <cmath>\n\nconst double EPS=1e-10;\n\n#define equals(a, b) (fabs((a)-b(b))<EPS)\n#define X real()\n#define Y imag()\n\nusing namespace std;\n\ntypedef complex<double> Point;\ntypedef complex<double> Vector;\n\nstruct Segment {\n    Point p1, p2;\n};\ntypedef Segment Line;\n\nstruct Circle {\n    Point c;\n    double r;\n    Circle(Point c=Point(), double r=0.0) :\n        c(c),r(r){}\n};\n\ntypedef vector<Point> Polygon;\n\ndouble dot(Vector a, Vector b) {\n    return a.X*b.X + a.Y*b.Y;\n}\n\ndouble cross(Vector a,Vector b) {\n    return a.X*b.Y - a.Y*b.X;\n}\n\nPoint project(Segment s, Point p) {\n    Vector base = s.p2-s.p1;\n    double r=dot(p-s.p1,base) / norm(base);\n    return s.p1+base*r;\n}\n\nPoint reflect(Segment s, Point p) {\n    return p+(project(s,p)-p)*2.0;\n}\n\nint main() {\n    Point p0,p1;\n    {\n        double x1,y1,x2,y2;\n        cin>>x1>>y1>>x2>>y2;\n        p0=Point(x1,y1);\n        p1=Point(x2,y2);\n    }\n    int q; cin>>q;\n    while(q-->0) {\n        double x1,y1;\n        cin>>x1>>y1;\n        Point p2=Point(x1,y1);\n        Vector a=p1-p0;\n        Vector b=p2-p0;\n        if(cross(a,b)>EPS) cout<<\"COUNTER_CLOCKWISE\"<<endl;\n        else if(cross(a,b)<-EPS) cout<<\"CLOCKWISE\"<<endl;\n        else if(dot(a,b)<-EPS) cout<<\"ONLINE_BACK\"<<endl;\n        else if(norm(a)<norm(b)) cout<<\"ONLINE_FRONT\"<<endl;\n        else cout<<\"ON_SEGMENT\"<<endl;\n\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define rep(i, n) for(int i = 0; i < (n); ++i)\nusing namespace std;\n\nconst double EPS = 1e-10;\nbool eq(double a, double b) {return fabs(a - b) < EPS;}\n\nstruct Point {\n    double x, y;\n    Point(double x = 0.0, double y = 0.0) : x(x), y(y) {}\n    Point operator + (Point &p);\n    Point operator - (Point &p);\n    Point operator * (double k);\n    Point operator / (double k);\n    bool operator == (const Point &p) const;\n    double norm();\n    double abs();\n    void print();\n} typedef Vec;\n\nstruct Segment {\n    Point p1, p2;\n    Segment(Point p1, Point p2) : p1(p1), p2(p2) {}\n    Segment(double x1, double y1, double x2, double y2) : p1(Point(x1, y1)), p2(Point(x2, y2)) {}\n} typedef Line;\n\nstruct Circle {\n    Point o; double r;\n    Circle(Point o, double r) : o(o), r(r) {}\n    Circle(double x, double y, double r) : o(Point(x, y)), r(r) {}\n};\n\ndouble norm(Vec a);\ndouble abs(Vec a);\n\ndouble dot(Vec a, Vec b);\ndouble cross(Vec a, Vec b);\n\nint ccw(Point a, Point b, Point c);\n\nbool isOrthogonal(Vec a, Vec b);\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2);\nbool isOrthogonal(Segment s1, Segment s2);\n\nbool isParallel(Vec a, Vec b);\nbool isParallel(Point a1, Point a2, Point b1, Point b2);\nbool isParallel(Segment s1, Segment s2);\n\nPoint project(Segment s, Point p);\nPoint reflect(Segment s, Point p);\n\nint main() {\n    double x0, y0, x1, y1;\n    cin >> x0 >> y0 >> x1 >> y1;\n    Point p0(x0, y0);\n    Point p1(x1, y1);\n    int q; cin >> q;\n    while(q--) {\n        double x, y;\n        cin >> x >> y;\n        Point p2(x, y);\n        int n = ccw(p0, p1, p2);\n        if(n == 1) cout << \"COUNTER_CLOCKWISE\" << '\\n';\n        else if(n == -1) cout << \"CLOCKWISE\" << '\\n';\n        else if(n == 2) cout << \"ONLINE_BACK\" << '\\n';\n        else if(n == -2) cout << \"ONLINE_FRONT\" << '\\n';\n        else cout << \"ON_SEGMENT\" << '\\n';\n    }\n    return 0;\n}\n\nPoint Point::operator + (Point &p) {return Point(x + p.x, y + p.y);}\nPoint Point::operator - (Point &p) {return Point(x - p.x, y - p.y);}\nPoint Point::operator * (double k) {return Point(x * k, y * k);}\nPoint Point::operator / (double k) {return Point(x / k, y / k);}\nbool Point::operator == (const Point &p) const {return eq(x, p.x) && eq(y, p.y);}\ndouble Point::norm() {return x * x + y * y;}\ndouble Point::abs() {return sqrt(norm());}\nvoid Point::print() {printf(\"%.10lf %.10lf\\n\", x, y);}\n\ndouble norm(Vec a) {return a.x * a.x + a.y * a.y;}\ndouble abs(Vec a) {return sqrt(norm(a));}\n\ndouble dot(Vec a, Vec b) {return a.x * b.x + a.y * b.y;}\ndouble cross(Vec a, Vec b) {return a.x * b.y - a.y * b.x;}\n\nint ccw(Point a, Point b, Point c) {\n    b = b - a;\n    c = c - a;\n    if(cross(b, c) > EPS) return 1; // COUNTER_CLOCKLWISE\n    if(cross(b, c) < -EPS) return -1; // CLOCKWISE\n    if(dot(b, c) < -EPS) return 2; // ONLINE_BACK\n    if(norm(b) < norm(c)) return -2; // ONLINE_FRONT\n    return 0; // ON_SEGMENT\n}\n\nbool isOrthogonal(Vec a, Vec b) {return eq(dot(a, b), 0.0);}\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {return isOrthogonal(a1 - a2, b1 - b2);}\nbool isOrthogonal(Segment s1, Segment s2) {return eq(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);}\n\nbool isParallel(Vec a, Vec b) {return eq(cross(a, b), 0.0);}\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {return isParallel(a1 - a2, b1 - b2);}\nbool isParallel(Segment s1, Segment s2) {return eq(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);}\n\nPoint project(Segment s, Point p) {\n    Vec base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / norm(base);\n    return base * r + s.p1;\n};\nPoint reflect(Segment s, Point p) {return (project(s, p) - p) * 2.0 + p;}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define maxn 100005\n#define maxm 500005\n#define inf 0x7fffffff\n#define ll long long\n#define ld long double\n#define debug(x) cerr<<#x<<\": \"<<x<<endl\n#define fgx cerr<<\"--------------\"<<endl\n#define dgx cerr<<\"==============\"<<endl\n\nusing namespace std;\nstruct vc{\n\tld x,y;\n\tvc operator*(const ld b){vc t;t.x=x*b,t.y=y*b;return t;}\n};\nstruct pt{\n\tld x,y;\n\tpt operator+(const vc b){pt t;t.x=x+b.x,t.y=y+b.y;return t;}\n\tvc operator-(const pt b){vc t;t.x=x-b.x,t.y=y-b.y;return t;}\n};\n\ninline int read(){\n\tint x=0,f=1; char c=getchar();\n\tfor(;!isdigit(c);c=getchar()) if(c=='-') f=-1;\n\tfor(;isdigit(c);c=getchar()) x=x*10+c-'0';\n\treturn x*f;\n}\n\ninline pt get(){pt t;t.x=read(),t.y=read();return t;}\ninline ld cross(vc a,vc b){return a.x*b.y-a.y*b.x;}\ninline ld dot(vc a,vc b){return a.x*b.x+a.y*b.y;}\ninline ld len(vc a){return dot(a,a);}\n\nint main(){\n\tpt p0=get(),p1=get();\n\tint Q=read();\n\twhile(Q--){\n\t\tpt p2=get(); \n\t\tvc a=p1-p0,b=p2-p0;\n\t\tld cj=cross(a,b);\n\t\tif(cj!=0){\n\t\t\tif(cj>0) printf(\"COUNTER_CLOCKWISE\\n\");\n\t\t\telse printf(\"CLOCKWISE\\n\");\n\t\t}\n\t\telse{\n\t\t\tif(dot(a,b)<0) printf(\"ONLINE_BACK\\n\");\n\t\t\telse{\n\t\t\t\tif(len(a)<len(b)) printf(\"ONLINE_FRONT\\n\");\n\t\t\t\telse printf(\"ON_SEGMENT\\n\");\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nnamespace Computational_Geometry\n{\n\tconst long double eps=1e-10;\n\tstruct Vector2\n\t{\n\t\tlong double x,y;\n\t\tVector2(long double X=0.0,long double Y=0.0):x(X),y(Y) {}\n\t\tVector2 *read() {scanf(\"%Lf%Lf\",&x,&y); return this;}\n\t\tvoid print() {printf(\"%.10Lf %.10Lf\",x,y); return;}\n\t\tinline Vector2 operator - () const{return Vector2(-x,-y);}\n\t\tinline Vector2 operator + (const Vector2 &A) const{return Vector2(x+A.x,y+A.y);}\n\t\tinline Vector2 operator - (const Vector2 &A) const{return Vector2(x-A.x,y-A.y);}\n\t\tinline Vector2 operator * (const long double &k) const{return Vector2(x*k,y*k);}\n\t\tinline Vector2 operator / (const long double &k) const{return Vector2(x/k,y/k);}\n\t\tinline long double operator * (const Vector2 &A) const{return x*A.x+y*A.y;}\n\t\tinline long double operator ^ (const Vector2 &A) const{return x*A.y-y*A.x;}\n\t\tinline long double norm2() const{return x*x+y*y;}\n\t\tinline long double norm() const{return sqrtl(x*x+y*y);}\n\t\tinline bool operator < (const Vector2 &A) const{return (x<A.x-eps)||(x<=A.x+eps)&&(y<A.y-eps);}\n\t\tinline bool operator == (const Vector2 &A) const{return fabsl(x-A.x)<=eps&&fabsl(y-A.y)<=eps;}\n\t\tinline bool operator << (const Vector2 &A) const{return (y<-eps)^(A.y<-eps)?A.y<-eps:((*this^A)>eps)||((*this^A)>=-eps)&&(x>=-eps)&&(A.x<-eps);}\n\t\tinline Vector2 trans(long double a_11,long double a_12,long double a_21,long double a_22) const{return Vector2(x*a_11+y*a_12,x*a_21+y*a_22);}\n\t};\n\t#define Point Vector2\n\tPoint Projection(Point P,Point L1,Point L2)\n\t{\n\t\tlong double k1=(L2-L1)*(P-L1),k2=(L2-L1).norm2();\n\t\treturn L1+((L2-L1)*(k1/k2));\n\t}\n\tPoint Reflection(Point P,Point L1,Point L2)\n\t{\n\t\tlong double k1=(L2-L1)*(P-L1),k2=(L2-L1).norm2();\n\t\tPoint mid=L1+(L2-L1)*(k1/k2);\n\t\treturn mid*2-P;\n\t}\n\t#define COUNTER_CLOCKWISE 1\n\t#define CLOCKWISE 2\n\t#define ONLINE_BACK 3\n\t#define ONLINE_FRONT 4\n\t#define ON_SEGMENT 5\n\tint Counter_Clockwise(Point S,Point T1,Point T2)\n\t{\n\t\tif(((T1-S)^(T2-S))>eps) return COUNTER_CLOCKWISE;\n\t\telse if(((T1-S)^(T2-S))<-eps) return CLOCKWISE;\n\t\telse if(((T1-S)*(T2-S))<-eps) return ONLINE_BACK;\n\t\telse if(((T2-S).norm2()-(T1-S).norm2())>eps) return ONLINE_FRONT;\n\t\telse return ON_SEGMENT;\n\t}\n\t\n};\nusing namespace Computational_Geometry;\nPoint P0,P1,P;\nint Q;\nint main()\n{\n\tP0.read(),P1.read();\n\tscanf(\"%d\",&Q);\n\twhile(Q--)\n\t{\n\t\tP.read();\n\t\tint Ans=Counter_Clockwise(P0,P1,P);\n\t\tif(Ans==COUNTER_CLOCKWISE) puts(\"COUNTER_CLOCKWISE\");\n\t\telse if(Ans==CLOCKWISE) puts(\"CLOCKWISE\");\n\t\telse if(Ans==ONLINE_BACK) puts(\"ONLINE_BACK\");\n\t\telse if(Ans==ONLINE_FRONT) puts(\"ONLINE_FRONT\");\n\t\telse puts(\"ON_SEGMENT\");\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n\nusing flt = double;\nconst flt eps = 1e-12, inf = 1e18, PI = acos(-1.0);\ntemplate<typename T>\ninline T sqr(T x) {return x * x;}\ninline flt cmp(flt a, flt b, flt e = eps) {\n  return fabs(a - b) >= e + fabs(a) * e ? a - b : 0;\n}\ninline int sgn(flt x, flt e = eps) {return x < -e ? -1 : (x > e);}\ninline flt fix(flt x, flt e = eps) {return cmp(x, 0, e);}\n\nstruct point {\n  flt x, y;\n  point(flt x = 0, flt y = 0): x(x), y(y) {}\n  bool operator < (const point &rhs) const {\n    return cmp(x, rhs.x) < 0 || (cmp(x, rhs.x) == 0 && cmp(y, rhs.y) < 0);\n  }\n  bool operator == (const point &rhs) const {\n    return cmp(x, rhs.x) == 0 && cmp(y, rhs.y) == 0;\n  }\n  point operator + (const point &rhs) const {\n    return point(x + rhs.x, y + rhs.y);\n  }\n  point operator - (const point &rhs) const {\n    return point(x - rhs.x, y - rhs.y);\n  }\n  point operator * (const flt k) const {\n    return point(x * k, y * k);\n  }\n  point operator / (const flt k) const {\n    return point(x / k, y / k);\n  }\n  point operator ~ () const {// counter clockwise rotate 90 degree\n    return point(-y, x);\n  }\n  flt dot(const point &rhs) const {\n    return x * rhs.x + y * rhs.y;\n  }\n  flt det(const point &rhs) const {\n    return x * rhs.y - y * rhs.x;\n  }\n  flt norm2() const {\n    return x * x + y * y;\n  }\n  flt norm() const {\n    return hypot(x, y);\n  }\n  point rot(flt a) const {// counter clockwise rotate A rad\n    return point(x * cos(a) - y * sin(a), x * sin(a) + y * cos(a));\n  }\n  point rot(flt cosa, flt sina) const {// counter clockwise rotate using cos/sin\n    return point(x * cosa - y * sina, x * sina + y * cosa);\n  }\n  point trunc(flt a = 1.0) const {\n    return (*this) * (a / this->norm());\n  }\n};\n\nint main() {\n  point A, B;\n  scanf(\"%lf%lf%lf%lf\", &A.x, &A.y, &B.x, &B.y);\n  int q;\n  scanf(\"%d\", &q);\n  for (int i = 0; i < q; ++i) {\n    point O;\n    scanf(\"%lf%lf\", &O.x, &O.y);\n    int side = sgn((B - A).det(O - A));\n    if (side > 0) {\n      puts(\"COUNTER_CLOCKWISE\");\n    } else if (side < 0) {\n      puts(\"CLOCKWISE\");\n    } else {\n      int d1 = sgn((B - A).dot(O - A));\n      int d2 = sgn((A - B).dot(O - B));\n      if (d1 < 0) puts(\"ONLINE_BACK\");\n      else if (d2 < 0) puts(\"ONLINE_FRONT\");\n      else puts(\"ON_SEGMENT\");\n    }\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n\ntypedef long double     lf;\n\nusing namespace std;\n\nconst lf EPS = 1e-9;\n\nstruct pt {\n  lf x, y;\n  pt( ) { }\n  pt( lf x, lf y ) : x( x ), y ( y ) { }\n};\n\ninline lf x( pt P ) { return P.x; }\ninline lf y( pt P ) { return P.y; }\n\nistream& operator >> ( istream& in, pt& p ) {\n  lf x,y; in >> x >> y;\n  p = pt(x,y); return in;\n}\n\nostream& operator << ( ostream& out, const pt& p ) {\n  out << double(p.x) << \" \" << double(p.y);\n  return out;\n}\n\npt operator + ( const pt& A, const pt& B ) {\n  return pt( x(A)+x(B), y(A)+y(B) );\n}\n\npt operator - ( const pt& A, const pt& B ) {\n  return pt( x(A)-x(B), y(A)-y(B) );\n}\n\n\npt operator * ( const lf& B, const pt& A ) {\n  return pt( x(A)*B, y(A)*B );\n}\n\npt operator * ( const pt& A, const lf& B ) {\n  return pt( x(A)*B, y(A)*B  );\n}\n\ninline lf dot( pt A, pt B ) {\n  return x(A)*x(B) + y(A)*y(B);\n}\n\ninline lf norm( pt A ) {\n  return x(A)*x(A) + y(A)*y(A);\n}\n\ninline lf abs( pt A ) {\n  return sqrt( norm(A) );\n}\n\ninline lf dist ( pt A, pt B ) { return abs( B - A ); }\n\nlf distToLine (pt p, pt A, pt B, pt &c) {\n  lf u = dot( p-A , B-A ) / norm( B-A );\n  c = A + u*( B-A );\n  return dist( p , c );\n}\n\npt refPoint(pt X, pt A, pt B) {\n  pt aux; distToLine(X, A, B, aux);\n  return X + lf(2.0)*(aux-X);\n}\n\n/// --------------------------------------------\n\ninline bool same ( lf a, lf b ) {\n  return a+EPS > b && b+EPS > a;\n}\n\ninline lf cross( pt A, pt B ) {\n  return x(A)*y(B) - y(A)*x(B);\n}\n\n///CHANGE\n// 0  for collineal points ( angle = 0 )\n// 1  for angle BAX counter clockwise\n// -1 for angle BAX clockwise\ninline int ccw (pt X, pt A, pt B) {\n  lf c = cross( B-A, X-A );\n  if( same( c, 0.0 ) ) { return 0; }\n  if( c > EPS ) { return 1; }\n  return -1;\n}\n\n///CHANGE\ninline bool segContains ( pt X, pt A, pt B) {\n  if ( !same ( 0, cross ( A-X, B-X ) ) ) return 0;\n  return ( dot ( A-X, B-X ) < EPS );\n}\n\npt p0,p1,p2;\nint n;\n\nint main() {\n  ios_base::sync_with_stdio(0);\n  cin.tie(0);\n  cout << fixed << setprecision(10);\n\n\n  cin >> p0 >> p1 >> n;\n  for( int i = 0; i < n; ++i ) {\n    cin >> p2;\n    lf c = ccw( p2, p0, p1 );\n    if( c == 1 ) {\n      cout << \"COUNTER_CLOCKWISE\\n\";\n    }\n    else if( c == -1 ) {\n      cout << \"CLOCKWISE\\n\";\n    }\n    else {\n      if( segContains( p2, p0, p1 ) ) {\n        cout << \"ON_SEGMENT\\n\";\n      }\n      else if( segContains( p0, p1, p2 ) ) {\n        cout << \"ONLINE_BACK\\n\";\n      }\n      else if( segContains( p1, p0, p2 ) ) {\n        cout << \"ONLINE_FRONT\\n\";\n      }\n\n    }\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int SIZE = 210;\nconst double eps = 1e-10;\n\ntypedef complex<double> P;\n\ntypedef double P_type;\ntypedef complex<P_type> P;\nconst P_type P_eps = 1e-8; //整数の時はゼロ\n\nnamespace std{\n  template<class T> bool operator<(const complex<T> &a, const complex<T> &b){\n    return a.real() == b.real() ? a.imag() < b.imag() : a.real() < b.real();\n  }\n};\n\nP rotate(P p, double theta){\n  return p * P(cos(theta), sin(theta));\n}\n\n//内積\ndouble dot(P a, P b) {\n  return (a * conj(b)).real();\n}\n\n//外積\ndouble cross(P a, P b) {\n  return (conj(a) * b).imag();\n}\n\n//反時計回り\nint ccw(P a, P b, P c){\n  if(cross(b-a,c-a) > P_eps) return 1; //COUNTER_CLOCKWISE\n  if(cross(b-a,c-a) < -P_eps) return -1; //CLOCKWISE\n  if(dot(b-a,c-a) < -P_eps) return -2; //ONLINE_BACK\n  if(dot(a-b,c-b) < -P_eps) return 2; //ONLINE_FRONT\n  return 0; //ON_SEGMENT\n}\n\nint main(){\n  int x0, y0, x1, y1;\n  P p0, p1;\n\n  scanf(\"%d%d%d%d\",&x0,&y0,&x1,&y1);\n  p0 = P(x0, y0);\n  p1 = P(x1, y1);\n\n  int n;\n  scanf(\"%d\",&n);\n  \n  for(int i=0;i<n;i++){\n    int x2, y2;\n    scanf(\"%d%d\",&x2, &y2);\n\n    switch(ccw(p0,p1,P(x2,y2))){\n    case 1:\n      puts(\"COUNTER_CLOCKWISE\");\n      break;\n    case -1:\n      puts(\"CLOCKWISE\");\n      break;\n    case 2:\n      puts(\"ONLINE_FRONT\");\n      break;\n    case -2:\n      puts(\"ONLINE_BACK\");\n      break;\n    case 0:\n      puts(\"ON_SEGMENT\");\n      break;\n    }\n  }\n  \n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <utility>\n#include <vector>\n#include <complex>\n#include <cmath>\n\nusing namespace std;\n\nstatic const double EPS=1e-12;\nstatic const double INF=1e24;\n\nusing Point=complex<double>;\nusing Plane=vector<Point>;\n\nbool operator<(const Point &a, const Point &b) {\n    return real(a)!=real(b)? real(a)<real(b) : imag(a)<imag(b);\n}\n\ndouble cross_prod(const Point &a, const Point &b) {\n    return imag(conj(a)*b);\n}\n\ndouble dot_prod(const Point &a, const Point &b) {\n    return real(conj(a)*b);\n}\n\nstruct Line: public vector<Point> {\n    Line() {}\n    Line(const Point &a, const Point &b) {\n        push_back(a);\n        push_back(b);\n    }\n};\n\nstruct Circle {\n    Point p;\n    double r;\n    Circle() {}\n    Circle(const Point &p, const double r): p(p), r(r) {}\n};\n\nenum {\n    ONLINE_FRONT=-2,\n    CLOCKWISE,\n    ON_SEGMENT,\n    COUNTER_CLOCKWISE,\n    ONLINE_BACK,\n};    \n\nint ccwise(Point a, Point b, Point c) {\n    b -= a; c -= a;\n\n    if (cross_prod(b, c) > 0) {\n        return COUNTER_CLOCKWISE;\n    } else if (cross_prod(b, c) < 0) {\n        return CLOCKWISE;\n    } else if (dot_prod(b, c) < 0) {\n        return ONLINE_BACK;\n    } else if (norm(b) < norm(c)) {\n        return ONLINE_FRONT;\n    } else {\n        return ON_SEGMENT;\n    }\n}\n\nint main() {\n    double x, y;\n    scanf(\"%lf %lf\", &x, &y);\n    Point p0(x, y);\n\n    scanf(\"%lf %lf\", &x, &y);\n    Point p1(x, y);\n\n    size_t q;\n    scanf(\"%zu\", &q);\n    for (size_t i=0; i<q; ++i) {\n        double x, y;\n        scanf(\"%lf %lf\", &x, &y);\n        Point p2(x, y);\n\n        int state=ccwise(p0, p1, p2);\n        if (state == ONLINE_FRONT) {\n            printf(\"ONLINE_FRONT\\n\");\n        } else if (state == CLOCKWISE) {\n            printf(\"CLOCKWISE\\n\");\n        } else if (state == ON_SEGMENT) {\n            printf(\"ON_SEGMENT\\n\");\n        } else if (state == COUNTER_CLOCKWISE) {\n            printf(\"COUNTER_CLOCKWISE\\n\");\n        } else if (state == ONLINE_BACK) {\n            printf(\"ONLINE_BACK\\n\");\n        }\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<stdio.h>\n#include<math.h>\n#include<algorithm>\n#include<string>\n#include<map>\n\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n\nclass Point {\npublic:\n\tdouble x, y;\n\n\n\tPoint(double x = 0, double y = 0) :x(x), y(y) {}\n\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a) { return Point(a * x, a * y); }\n\tPoint operator / (double a) { return Point(x / a, y / a); }\n\n\tdouble abs() { return sqrt(norm()); }\n\tdouble norm() { return x * x + y * y; };\n\n\tbool operator < (const Point& p)const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator ==(const Point& p)const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b) {\n\treturn a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n\treturn a.x * b.y - a.y * b.x;\n}\n\nbool isOrthogonal(Vector a, Vector b) {\n\treturn equals(dot(a, b), 0.0);\n}\n\nbool isParallel(Vector a, Vector b) {\n\treturn equals(cross(a, b), 0.0);\n}\nstruct Segment {\n\tPoint p1, p2;\n\tSegment() {}\n\tSegment(Point p1, Point p2) :p1(p1), p2(p2) {}\n};\ntypedef Segment  Line;\n\ndouble norm(Vector a) {\n\treturn a.x * a.x + a.y * a.y;\n}\ndouble abs(Vector a) {\n\treturn sqrt(norm(a));\n}\n\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / norm(base);\n\treturn s.p1 + base * r;\n}\n\nPoint reflect(Segment s, Point p) {\n\treturn p + (project(s, p) - p) * 2.0;\n}\ndouble getDistance(Point a, Point b) {\n\treturn abs(a - b);\n}\n\ndouble getDistanceLP(Line l, Point p) {\n\treturn fabs(cross(l.p2 - l.p1, p - l.p1)/abs(l.p2 - l.p1));\n}\n\ndouble getDistanceSP(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0)return abs(p - s.p1);\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0)return abs(p - s.p2);\n\treturn getDistanceLP(s, p);\n\n}\n\ndouble getDistance(Segment s1, Segment s2) {\n\t//if (intersect(s1, s2))return 0.0;\n\treturn min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n\t\tmin(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (cross(a, b) > EPS)return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS) return CLOCKWISE;\n\tif (dot(a, b) < -EPS)return ONLINE_BACK;\n\tif (a.norm()<b.norm()) return ONLINE_FRONT;\n\n\treturn ON_SEGMENT;\n\n\n}\n\n\nint main() {\n\tdouble x1, y1, x2, y2, x0, y0;\n\tcin >> x1 >> y1 >> x2 >> y2;\n\tint q;\n\tLine s = Line(Point(x1, y1), Point(x2, y2));\n\tmap<int, string> m;\n\tm[COUNTER_CLOCKWISE] = \"COUNTER_CLOCKWISE\";\n\tm[CLOCKWISE] = \"CLOCKWISE\";\n\tm[ONLINE_BACK] = \"ONLINE_BACK\";\n\tm[ONLINE_FRONT] = \"ONLINE_FRONT\";\n\tm[ON_SEGMENT] = \"ON_SEGMENT\";\n\n\tcin >> q;\n\tfor (int i = 0; i < q; i++) {\n\t\tcin >> x0 >> y0;\n\t\tcout <<m[ ccw(Point(x1, y1), Point(x2, y2), Point(x0, y0))] << endl;;\n\t\t//printf(\"%.8lf %.8lf\\n\", ans.x, ans.y);\n\t}\n\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#pragma GCC optimize(3,\"Ofast\",\"inline\")\n#pragma GCC target(\"avx\")\n#include <bits/stdc++.h>\nusing namespace std;\n#ifdef ONLINE_JUDGE\n#define getchar gc\ninline char gc(){\n\tstatic char buf[1<<16],*p1=buf,*p2=buf;\n\tif(p1==p2){\n\t\tp2=(p1=buf)+fread(buf,1,1<<16,stdin);\n\t\tif(p2==p1) return EOF;\n\t}\n\treturn *p1++;\n}\n#endif\ntemplate<class t> inline t read(t &x){\n    char c=getchar();bool f=0;x=0;\n    while(!isdigit(c)) f|=c=='-',c=getchar();\n    while(isdigit(c)) x=(x<<1)+(x<<3)+(c^48),c=getchar();\n    if(f) x=-x;return x;\n}\ntemplate<class t> inline void write(t x){\n    if(x<0) putchar('-'),write(-x);\n    else{if(x>9) write(x/10);putchar('0'+x%10);}\n}\n\nconst double eps=1e-9;\nconst double pi=acos(-1);\n\n\nstruct point{\n\tdouble x,y;\n\tinline void read(){\n\t\tscanf(\"%lf%lf\",&x,&y);\n\t}\n\tinline point operator + (const point &nt) const {\n\t\treturn (point){x+nt.x,y+nt.y};\n\t}\n\tinline point operator - (const point &nt) const {\n\t\treturn (point){x-nt.x,y-nt.y};\n\t}\n\tinline point operator * (const double &nt) const {\n\t\treturn (point){x*nt,y*nt};\n\t}\n\tinline double length(){\n\t\treturn sqrt(x*x+y*y);\n\t}\n}x,y,o;\n\ndouble DJ(point x,point y){ //点积 \n\treturn x.x*y.x+x.y*y.y;\n}\n\ndouble CJ(point x,point y){ //叉积 \n\treturn x.x*y.y-x.y*y.x;\n}\n\ndouble distance(point x,point y){ //距离 \n\treturn sqrt((y.x-x.x)*(y.x-x.x)+(y.y-x.y)*(y.y-x.y));\n}\n\nstruct segment{\n\tpoint x,y;\n\tinline void read(){\n\t\tx.read();y.read();\n\t}\n\tinline double length(){ //线段长度 \n\t\treturn distance(x,y);\n\t}\n};\n\npoint trpoint(segment x){ //将有向线段转成向量点 \n\treturn x.y-x.x;\n}\n\ndouble prolen(point x,segment a){ //点在有向线段上的投影长度 \n\treturn DJ(trpoint((segment){a.x,x}),trpoint(a))/a.length();\n}\n\npoint propoint(point x,segment a){ //点在直线上的投影点 \n\treturn a.x+trpoint(a)*(prolen(x,a)/a.length());\n}\n\npoint refpoint(point x,segment a){ //点在直线上的投影点 \n\tpoint y=propoint(x,a);\n\treturn x+(y-x)*2;\n}\n\nvoid doit(){\n\ty.read();y=y-o;\n\tif(CJ(x,y)>0) puts(\"COUNTER_CLOCKWISE\");\n\telse if(CJ(y,x)>0) puts(\"CLOCKWISE\");\n\telse if(DJ(x,y)<0) puts(\"ONLINE_BACK\");\n\telse if(y.length()>x.length()) puts(\"ONLINE_FRONT\");\n\telse puts(\"ON_SEGMENT\");\n}\n\nsigned main(){\n\to.read();x.read();x=x-o;\n\tint t;\n\tread(t);\n\twhile(t--) doit();\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\n\n//constant----------------------------------------\nconst double EPS=1e-9;\nconst double INF=1e9;\nconst int COUNTER_CLOCKWISE=2;\nconst int CLOCKWISE=-2;\nconst int ONLINE_FRONT=1;\nconst int ONLINE_BACK=-1;\nconst int ON_SEGMENT=0;\n\n\ntypedef complex<double>Point;\ntypedef vector<Point>Polygon;\nstruct Line{\n    Point p1,p2;\n    Line(const Point &p1,const Point &p2):p1(p1),p2(p2){}\n};\nstruct Segment{\n    Point p1,p2;\n    Segment(const Point &p1,const Point &p2):p1(p1),p2(p2){}\n};\nstruct Circle{\n    Point p;\n    int r;\n    Circle(Point &p,int r):p(p),r(r){}\n};\n\ndouble dot(Point &p1,Point &p2){\n    return real(p1)*real(p2)+imag(p1)+imag(p2);\n}\n\ndouble cross(Point &p1,Point &p2){\n    return real(p1)*imag(p2)-real(p2)*imag(p1);\n}\n\nint CCW(Point &p1,Point &p2,Point &p3){\n    Point a=p2-p1,b=p3-p1;\n    if(cross(a,b)>EPS)return COUNTER_CLOCKWISE;\n    if(cross(a,b)<-EPS)return CLOCKWISE;\n    if(dot(a,b)<-EPS)return ONLINE_BACK;\n    if(abs(b)>abs(a)+EPS)return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\nsigned main(){\n    double x,y;\n    scanf(\"%lf%lf\",&x,&y);\n    Point p1(x,y);\n    scanf(\"%lf%lf\",&x,&y);\n    Point p2(x,y);\n\n    int q;scanf(\"%d\",&q);\n    while(q--){\n        scanf(\"%lf%lf\",&x,&y);\n        Point p3(x,y);\n        if(CCW(p1,p2,p3)==COUNTER_CLOCKWISE)puts(\"COUNTER_CLOCKWISE\");\n        if(CCW(p1,p2,p3)==CLOCKWISE)puts(\"CLOCKWISE\");\n        if(CCW(p1,p2,p3)==ONLINE_BACK)puts(\"ONLINE_BACK\");\n        if(CCW(p1,p2,p3)==ONLINE_FRONT)puts(\"ONLINE_FRONT\");\n        if(CCW(p1,p2,p3)==ON_SEGMENT)puts(\"ON_SEGMENT\");\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <math.h>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\n#define EPS (1e-10)\nstruct point\n{\n\tdouble x, y;\n\tpoint(double a = 0, double b = 0):x(a),y(b){}\n};\ntypedef point Point;\nPoint operator +(Point a, Point b){\n\treturn Point(a.x + b.x, a.y + b.y);\n}\nPoint operator -(Point a, Point b){\n\treturn Point(a.x - b.x, a.y - b.y);\n}\nPoint operator *(Point a, double k){\n\treturn Point(a.x * k, a.y * k);\n}\ndouble norm(Point a){\n\treturn a.x * a.x + a.y * a.y;\n}\ndouble abs(Point a){\n\treturn sqrt(norm(a));\n}\ndouble dot(Point a, Point b){\n\treturn a.x * b.x + a.y * b.y;\n}\ndouble cross(Point a, Point b){\n\treturn a.x * b.y - a.y * b.x;\n}\nconst int COUNTER_CLOCKWISE = 1;\nconst int CLOCKWISE = -1;\nconst int ONLINE_BACK = 2;\nconst int ONLINE_FRONT = -2;\nconst int ON_SEGEMENT = 0;\nint ccw(Point p0, Point p1, Point p2){\n\tPoint a = p1 - p0;\n\tPoint b = p2 - p0;\n\tif(cross(a,b) > EPS) return COUNTER_CLOCKWISE;\n\tif(cross(a,b) < -EPS) return CLOCKWISE;\n\tif(dot(a,b) < -EPS) return ONLINE_BACK;\n\tif(norm(a) < norm(b)) return ONLINE_FRONT;\n\treturn ON_SEGEMENT;\n}\nint main(){\n\tint n;\n\tPoint a, b;\n\tscanf(\"%lf %lf %lf %lf\",&a.x, &a.y, &b.x, &b.y);\n\tscanf(\"%d\",&n);\n\twhile(n--){\n\t\tPoint c;\n\t\tscanf(\"%lf %lf\",&c.x, &c.y);\n\t\tint cnt = ccw(a, b, c);\n\t\tif(cnt == 1) printf(\"COUNTER_CLOCKWISE\\n\");\n\t\telse if(cnt == -1) printf(\"CLOCKWISE\\n\");\n\t\telse if(cnt == 2) printf(\"ONLINE_BACK\\n\");\n\t\telse if(cnt == -2) printf(\"ONLINE_FRONT\\n\");\n\t\telse printf(\"ON_SEGMENT\\n\");\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define ll long long\n#define rep(i,n) for(ll i=0;i<n;i++)\nusing namespace std;\nconst double pi = acos(-1);\nconst double eps = 1e-10;\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\n\ntemplate<class T>\nbool equals(T a,T b){ return fabs((a)-(b)) < eps; }\n\nstruct Point{\n    double x, y;\n    Point(){}\n    Point(double x, double y) : x(x), y(y){}\n    Point operator + (Point p) { return Point(x+p.x, y+p.y); }\n    Point operator - (Point p) { return Point(x-p.x, y-p.y); }\n    Point operator * (double a) { return Point(x*a, y*a); }\n    Point operator / (double a) { return Point(x/a, y/a); }\n    double norm() {return x*x+y*y;}\n    double abs() {return sqrt(norm());}\n\n    bool operator < (const Point &p) const {\n        return x!=p.x ? x<p.x : y<p.y;\n    }\n    bool operator == (const Point &p) const {\n        return fabs(x-p.x) < eps && fabs(y-p.y) < eps;\n    }\n};\n\nbool sort_x(Point a, Point b){ return !equals(a.x,b.x)?a.x<b.x:a.y<b.y; }\nbool sort_y(Point a, Point b){ return !equals(a.y,b.y)?a.y<b.y:a.x<b.x; }\n\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\ndouble norm(Vector a) { return a.x*a.x+a.y*a.y; }\ndouble abs(Vector a) { return sqrt(norm(a)); }\ndouble dot(Vector a, Vector b) { return a.x*b.x+a.y*b.y; }\ndouble cross(Vector a, Vector b) { return a.x*b.y-a.y*b.x; }\n\nstruct Segment {\n    Point p1, p2;\n    Segment(){}\n    Segment(Point p1, Point p2):p1(p1),p2(p2){}\n};\ntypedef Segment Line;\n\nstruct Circle{\n    Point c;\n    double r;\n    Circle(){}\n    Circle(Point c, double r) : c(c),r(r) {}\n};\n\nint ccw(Point p0, Point p1, Point p2){\n    Vector a=p1-p0;\n    Vector b=p2-p0;\n    if(cross(a,b)>eps) return COUNTER_CLOCKWISE;\n    if(cross(a,b)< -eps) return CLOCKWISE;\n    if(dot(a,b)< -eps) return ONLINE_BACK;\n    if(a.norm() < b.norm()) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\nbool isOrthogonal(Vector a, Vector b){\n    return equals(dot(a,b), 0.0);\n}\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2){\n    return isOrthogonal(a1-a2, b1-b2);\n}\nbool isOrthogonal(Segment s1, Segment s2){\n    return equals(dot(s1.p2-s1.p1, s2.p2-s2.p1),0.0);\n}\n\nbool isParallel(Vector a, Vector b){\n    return equals(cross(a,b), 0.0);\n}\nbool isParallel(Point a1, Point a2, Point b1, Point b2){\n    return isParallel(a1-a2, b1-b2);\n}\nbool isParallel(Segment s1, Segment s2){\n    return equals(cross(s1.p2-s1.p1, s2.p2-s2.p1),0.0);\n}\n\nPoint project(Segment s, Point p){\n    Vector base=s.p2-s.p1;\n    double r=dot(p-s.p1,base)/norm(base);\n    return s.p1+base*r;\n}\nPoint reflect(Segment s,Point p){\n    return p+(project(s,p)-p)*2.0;\n}\n\ndouble getDistance(Point a, Point b){\n    return abs(a-b);\n}\ndouble getDistanceLP(Line l, Point p){\n    return abs(cross(l.p2-l.p1, p-l.p1))/abs(l.p2-l.p1);\n}\ndouble getDistanceSP(Segment s, Point p){\n    if(dot(s.p2-s.p1,p-s.p1) < 0.0) return abs(p-s.p1);\n    if(dot(s.p1-s.p2,p-s.p2) < 0.0) return abs(p-s.p2);\n    return getDistanceLP(s,p);\n}\ndouble getDistanceSS(Segment s1, Segment s2){\n\n}\nint main(){\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    cout << fixed << setprecision(15);\n    double x0,y0,x1,y1;\n    cin>>x0>>y0>>x1>>y1;\n    Point p0(x0,y0),p1(x1,y1);\n    ll q;cin>>q;\n    rep(Q,q){\n        double x2,y2;cin>>x2>>y2;\n        Point p2(x2,y2);\n        int x=ccw(p0,p1,p2);\n        string s;\n        if(x==0) s=\"ON_SEGMENT\";\n        else if(x==1) s=\"COUNTER_CLOCKWISE\";\n        else if(x==-1) s=\"CLOCKWISE\";\n        else if(x==2) s=\"ONLINE_BACK\";\n        else if(x==-2) s=\"ONLINE_FRONT\";\n        cout<<s<<endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <unistd.h>\n\n#include <bits/stdc++.h>\n\nconst int INF = (1 << 29);\ntypedef std::uint_fast32_t u32;\ntypedef std::int_fast32_t s32;\ntypedef std::uint_fast64_t u64;\n\ntemplate<typename T>\ninline std::istream& operator >> (std::istream& is, std::complex<T>& C) {\n  T R, I;\n  std::cin >> R >> I;\n  C = std::complex<T>(R, I);\n  return is;\n}\n\ntemplate<typename T>\nclass n32 {\n  double EPS = 0.000001;\npublic:\n  int operator () (std::complex<T> L1, std::complex<T> L2, std::complex<T> P) {\n    if( ((P - L1) * conj(L2 - L1)).imag() > EPS ) return 1;\n    else if( ((P - L1) * conj(L2 - L1)).imag() < -EPS ) return -1;\n    return 0;\n  }\n};\n\nn32<double> up_and_down_decision;\n\nint main() {\n\n  std::complex<double> L1, L2;\n  std::cin >> L1 >> L2;\n\n  int n;\n  std::cin >> n;\n  for(int i = 0; i < n; ++i) {\n    std::complex<double> P;\n    std::cin >> P;\n    \n    auto res = up_and_down_decision(L1, L2, P);\n    if( res == 1 ) {\n      std::cout << \"COUNTER_CLOCKWISE\" << std::endl;\n    }\n    else if( res == -1 ) {\n      std::cout << \"CLOCKWISE\" << std::endl;\n    }\n    else {\n      if( L2.real() < P.real() ) {\n        std::cout << \"ONLINE_FRONT\" << std::endl;\n      }\n      else if( P.real() < L1.real() ) {\n        std::cout << \"ONLINE_BACK\" << std::endl;\n      }\n      else {\n        std::cout << \"ON_SEGMENT\" << std::endl;\n      }\n    }\n  }\n  \n  return 0;\n};"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\n#include <cmath>\n#include <iomanip>\n#include <stack>\n#include <queue>\n#include <vector>\n#include <algorithm>\n\n\nusing namespace std;\n\n//-------------------------------------------------------------------------------------\n/*2点[(x1,y1),(x2,y2)]を入力し二点を通る直線ax+by+cの(a,b,c)を返す,  */\n/*x1==x2ならfalseを返す*/\n/*falseならばx=cの形の直線*/\nvoid straight_line_passing_through_the_two_points(double x1, double y1, double x2, double y2, double *a, double *b, double *c){\n    *a=(y2-y1);\n    *b=-(x2-x1);\n    *c=y2*(x2-x1)-x2*(y2-y1);\n}\n\n//-------------------------------------------------------------------------------------\n/*(x,y)を通るa1x+b1y+c1=0に垂直な直線a2x+b2y+c2=0を返す*/\nbool vertical_straight_line(double x, double y, double a1, double b1, double c1, double *a2, double *b2, double *c2){\n    if(a1*x+b1*y+c1==0)return false;\n    *a2 = -b1;\n    *b2 = a1;\n    *c2 = b1*x - a1*y;\n    return true;\n}\n\n\n//-------------------------------------------------------------------------------------\n/*2直線 a1x+b1y+c1=0 a2x+b2y+c2=0 の交点 (x,y)を返す*/\n/*2直線が平行であるならば0を返す*/\nint intersection_and_parallel(double a1, double b1, double c1, double a2, double b2, double c2, double *x, double *y){\n    if(a1*b2==a2*b1)return false;//平行の判定\n    \n    *x = (b1*c2-b2*c1)/(a1*b2-a2*b1);\n    *y = (a2*c1-a1*c2)/(a1*b2-a2*b1);\n    \n    return true;\n}\n\n//-------------------------------------------------------------------------------------\n/* \n a1x+b1y+c1=0 と　a2x+b2y+c2=0 が\n 平行なら2\n 直交なら1\n それ以外は0\n を返す\n */\nint judges_whether_parallel_or_perpendicular(double a1, double b1, double c1, double a2, double b2, double c2){\n    if(a1*b2 == a2*b1)return 2;\n    if(a1*a2 + b1*b2 == 0)return 1;\n    return 0;\n}\n\n\n//-------------------------------------------------------------------------------------\n/*直線ax+by+c=0に対し　(x1,y1)と線対称な位置(x2,y2)を出力*/\n/*vertical_straight_lineを使用*/\n/*intersection_and_parallelを使用*/\nvoid line_symmetry(double a, double b, double c, double x1, double y1, double *x2, double *y2){\n    if(a*x1+b*y1+c==0){//(x1,y1)が直線上にある.\n        *x2=x1;\n        *y2=y1;\n        return;\n    }\n    \n    //垂直な直線を求める\n    double a2,b2,c2;\n    vertical_straight_line(x1, y1, a, b, c, &a2, &b2, &c2);\n    \n    //垂直な直線との交点を求める\n    double c_x, c_y;\n    intersection_and_parallel(a, b, c, a2, b2, c2, &c_x, &c_y);\n    *x2 = x1 + 2*(c_x-x1);\n    *y2 = y1 + 2*(c_y-y1);\n}\n\n\n\n//-------------------------------------------------------------------------------------\n/*2点(x1,y1), (x2,y2) の距離*/\ndouble distance_between_the_two_pointss(double x1,double y1, double x2, double y2){\n    return  sqrt(fabs((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)));\n}\n\n\n//-------------------------------------------------------------------------------------\n/* (x1,y1)から(x2,y2)へ伸ばした直線の角度を求める  */\n/*-π　〜　+π　まで*/\ndouble angle_of_the_line(double x1, double y1, double x2, double y2){\n    if(x1==x2&&y1==y2)return 0.0;\n    return atan2(y2-y1, x2-x1);\n}\n\n//-------------------------------------------------------------------------------------\n/*(x1,y1)と(x2,y2)を両端に持つ線分と*/\n/*(x3,y3)と(x4,y4)を両端に持つ線分が*/\n/*交差するなら1 交差しないなら0を出力する*/\n/* straight_line_passing_through_the_two_pointsを使用 */\n/* intersection_and_parallelを使用 */\nint line_segment_cross_decision(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4){\n    double a1,b1,c1, a2,b2,c2;\n    straight_line_passing_through_the_two_points(x1, y1, x2, y2, &a1, &b1, &c1);\n    straight_line_passing_through_the_two_points(x3, y3, x4, y4, &a2, &b2, &c2);\n    double c_x,c_y;\n    bool is_parallel = intersection_and_parallel(a1, b1, c1, a2, b2, c2, &c_x, &c_y);\n    if(is_parallel==false){\n        if( (a1==a2&&b1==b2&&c1==c2) || (a1==0 && (b1/b2)==(c1/c2)) || (b1==0 && (a1/a2)==(c1/c2)) ){//一直線上にある.\n            //cout<<1111;\n            if(min(x1,x2)<=x3&&x3<=max(x1,x2)&&min(y1,y2)<=y3&&y3<=max(y1,y2))return 1;\n            if(min(x1,x2)<=x4&&x4<=max(x1,x2)&&min(y1,y2)<=y4&&y4<=max(y1,y2))return 1;\n            if(min(x3,x4)<=x1&&x1<=max(x3,x4)&&min(y3,y4)<=y1&&y1<=max(y3,y4))return 1;\n            if(min(x3,x4)<=x2&&x2<=max(x3,x4)&&min(y3,y4)<=y2&&y2<=max(y3,y4))return 1;\n            \n\n\n        }\n        return 0;\n    }\n    if(x1>x2)swap(x1, x2);\n    if(x3>x4)swap(x3, x4);\n    if(y1>y2)swap(y1, y2);\n    if(y3>y4)swap(y3, y4);\n\n    if(x1<=c_x&&c_x<=x2&&x3<=c_x&&c_x<=x4){\n        if(y1<=c_y&&c_y<=y2&&y3<=c_y&&c_y<=y4)return 1;\n    }\n    return 0;\n    \n}\n\n\n\n//-------------------------------------------------------------------------------------\n/*点(p_x,p_y)と線分(x1,y1)(x2,y2)の距離*/\n/* straight_line_passing_through_the_two_points */\n/* vertical_straight_line */\n/* intersection_and_parallel */\ndouble distance_between_the_line_segment_and_point(double p_x, double p_y, double x1, double y1, double x2, double y2){\n    double a,b,c;//(x1,y1)(x2,y2)を通る直線\n    straight_line_passing_through_the_two_points(x1, y1, x2, y2, &a, &b, &c);\n    double a2,b2,c2;//直線ax+by+c=0に垂直な直線\n    double v_x, v_y;//二つの直線の交点\n    bool is_not_parallel = vertical_straight_line(p_x, p_y, a, b, c, &a2, &b2, &c2);\n    intersection_and_parallel(a, b, c, a2, b2, c2, &v_x, &v_y);\n    \n    if(is_not_parallel){\n        if(min(x1,x2)<=v_x&&v_x<=max(x1,x2)&&min(y1,y2)<=v_y&&v_y<=max(y1,y2)){//(v_x,v_y)は線分の中にある\n            //cout<<\"a \";\n            return distance_between_the_two_pointss(p_x, p_y, v_x, v_y);\n        }else{//(v_x,v_y)は線分の外にある\n            double l1 = distance_between_the_two_pointss(p_x, p_y, x1, y1);\n            double l2 = distance_between_the_two_pointss(p_x, p_y, x2, y2);\n            //cout<<\"b \";\n            return min(l1,l2);\n        }\n    }else{\n        if(min(x1,x2)<=p_x&&p_x<=max(x1,x2)&&min(y1,y2)<=p_y&&p_y<=max(y1,y2)){//(p_x,p_y)は線分の中にある\n            //cout<<\"c \";\n            return 0.0;\n        }else{//(p_x,p_y)は線分の外にある\n            double l1 = distance_between_the_two_pointss(p_x, p_y, x1, y1);\n            double l2 = distance_between_the_two_pointss(p_x, p_y, x2, y2);\n            //cout<<\"d \";\n            return min(l1,l2);\n        }\n    }\n    \n}\n\n\n//-------------------------------------------------------------------------------------\n/*線分(x1,y1)(x2,y2)と線分(x3,y3)(x4,y4)の距離*/\n\ndouble distance_between_two_line_segment(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4){\n    //同一直線上にある場合\n    \n    //ぶつかる場合\n    if(line_segment_cross_decision(x1, y1, x2, y2, x3, y3, x4, y4)){\n        return 0.0;\n    }\n    \n    //ぶつからない場合\n    double l1,l2,l3,l4;\n    l1=distance_between_the_line_segment_and_point(x1, y1, x3, y3, x4, y4);\n    //cout<<l1<<endl;\n    l2=distance_between_the_line_segment_and_point(x2, y2, x3, y3, x4, y4);\n    //cout<<l2<<endl;\n\n    l3=distance_between_the_line_segment_and_point(x3, y3, x1, y1, x2, y2);\n    //cout<<l3<<endl;\n    l4=distance_between_the_line_segment_and_point(x4, y4, x1, y1, x2, y2);\n    \n        \n    //cout<<l4<<endl;\n    \n    return min(l1,min(l2,min(l3,l4)));\n}\n\n//-------------------------------------------------------------------------------------\n/*多角形の面積*/\n/*頂点数n　頂点の集合 */\ndouble area_of_the_polygon(int n, double p_xy[10000][2]){\n    double s=0.0;\n    for(int i=0; i<n; i++){\n        s+=(p_xy[i][0]-p_xy[(i+1)%n][0])*(p_xy[i][1]+p_xy[(i+1)%n][1])/2;\n    }\n    return s;\n}\n\n\n//-------------------------------------------------------------------------------------\n/*角abcの角度　a(xa,ya), b(xb,yb), c(xc,yc),*/\n/*2辺の角度*/\n/*aとb　またはbとcが重なっていればPIを返す*/\ndouble angle_of_the_two_edges(double ax, double ay, double bx, double by, double cx, double cy){\n    if(ax==bx&&ay==by)return M_PI;\n    if(cx==bx&&cy==by)return M_PI;\n    \n    double angle1 = angle_of_the_line(ax, ay, bx, by);\n    double angle2 = angle_of_the_line(bx, by, cx, cy);\n    \n    double ret = angle1+(M_PI-angle2);\n    if(ret>M_PI * 2)ret -= M_PI * 2;\n    if(ret<0)ret += M_PI * 2;\n    return /*2*M_PI- */ret;\n    \n}\n\n//-------------------------------------------------------------------------------------\n/*多角形に対する点の内外判定*/\n/* n頂点の多角形p_xy[n]に対して点(x,y)の内外判定を行う*/\n/* 内なら2 線上なら1 外なら0*/\nint inside_and_outside_the_determination_of_the_polygon_and_point(int n, double p_xy[10000][2], double x, double y){\n    //点が線分上にあるか\n    for(int i=0; i<n; i++){\n        double l = distance_between_the_line_segment_and_point(x, y, p_xy[i][0], p_xy[i][1], p_xy[(i+1)%n][0], p_xy[(i+1)%n][1]);\n        if(l==0.0)return 1;\n    }\n    \n    //点が中にあるか外にあるか\n    int ans = 0;\n    for(int i=0; i<n; i++){\n        if(p_xy[i][0]!=p_xy[(i+1)%n][0]){\n            ans += line_segment_cross_decision(p_xy[i][0], p_xy[i][1], p_xy[(i+1)%n][0], p_xy[(i+1)%n][1], x, y, x, y+1000000.0);\n            \n            if(distance_between_the_line_segment_and_point(p_xy[i][0], p_xy[i][1],x, y, x, y+1000000.0)==0.0){\n                if(p_xy[i][0]>p_xy[(i+1)%n][0])ans--;\n            }\n            if(distance_between_the_line_segment_and_point(p_xy[(i+1)%n][0], p_xy[(i+1)%n][1],x, y, x, y+1000000.0)==0.0){\n                if(p_xy[i][0]<p_xy[(i+1)%n][0])ans--;\n            }\n        }\n        \n    }\n    //cout<<\" \"<<ans<<\" \";\n    if(ans%2==0)return 0;\n    else return 2;\n}\n//-------------------------------------------------------------------------------------\n/*二点の角度*/\n/*0~2π*/\ndouble angle_line_0_359(double x1, double y1, double x2, double y2){\n    if(x1==x2&&y1==y2)return 0.0;\n    \n    \n    double angle = atan2(y2-y1, x2-x1);\n    if(angle<0)angle = 2*M_PI+angle;\n    return angle;\n}\n\n//-------------------------------------------------------------------------------------\n/*二辺の角度*/\n/*反時計回りの内側*/\n/*0~2π*/\ndouble angle_two_line_0_359(double x1, double y1, double x2, double y2, double x3, double y3){\n    if(x1==x2&&y1==y2)return 0.0;\n    if(x3==x2&&y3==y2)return 0.0;\n    \n    double angle = atan2(y2-y1, x2-x1);\n    if(angle<0)angle = 2*M_PI+angle;\n    if(angle==2*M_PI)angle=0.0;\n    \n    double angle2 = atan2(y3-y2, x3-x2);\n    if(angle2<0)angle2 = 2*M_PI+angle2;\n    if(angle2==2*M_PI)angle2=0.0;\n    \n    double ret = 2*M_PI-( angle+(M_PI-angle2) );\n    if(ret<0)ret+=2*M_PI;\n    if(ret>=2*M_PI)ret-=2*M_PI;\n    \n    \n    \n    return ret;\n}\n\n//-------------------------------------------------------------------------------------\n/*二次元配列のクイックソート*/\n/*xoryが0ならx座標　1なら座標でソート*/\nvoid two_dimensional_qsort(double xy[100000][2], int left, int right, int xory)\n{\n    int i, j;\n    double pivot,pivot2;\n    \n    i = left;                      /* ソートする配列の一番小さい要素の添字 */\n    j = right;                     /* ソートする配列の一番大きい要素の添字 */\n    \n    pivot = xy[(left + right) / 2][xory]; /* 基準値を配列の中央付近にとる */\n    pivot2 = xy[(left + right) / 2][(xory+1)%2];\n    \n    \n    while (1) {                    /* 無限ループ */\n        \n        while (xy[i][xory] < pivot || (xy[i][xory] == pivot && xy[i][(xory+1)%2] < pivot2))       /* pivot より大きい値が */\n            i++;                   /* 出るまで i を増加させる */\n        \n        while (pivot < xy[j][xory] || (xy[j][xory] == pivot &&  pivot2 < xy[j][(xory+1)%2]))       /* pivot より小さい値が */\n            j--;                   /*  出るまで j を減少させる */\n        if (i >= j)                /* i >= j なら */\n            break;                 /* 無限ループから抜ける */\n        \n        swap(xy[i][xory], xy[j][xory]);            /* x[i] と x[j]を交換 */\n        swap(xy[i][(xory+1)%2], xy[j][(xory+1)%2]);            /* x[i] と x[j]を交換 */\n        i++;                       /* 次のデータ */\n        j--;\n    }\n    \n    if (left < i - 1)              /* 基準値の左に 2 以上要素があれば */\n        two_dimensional_qsort(xy, left, i - 1, xory);     /* 左の配列を Q ソートする */\n    if (j + 1 <  right)            /* 基準値の右に 2 以上要素があれば */\n        two_dimensional_qsort(xy, j + 1, right, xory);    /* 右の配列を Q ソートする */\n}\n\n\n//-------------------------------------------------------------------------------------\n/*凸包*/\n/*２次元平面における点の集合Pに対する凸包（convex hull）を求めて下さい。凸包とは点集合Pの全ての点を含む最小の凸多角形です。*/\n/*集合の要素数 n*/\n/*集合 p_xy[1000000][2]*/\n/*解答の要素数 q*/\n/*解答 ans[1000000][2]　最も下の最も左から反時計回り*/\n\nvoid convex_hull(int n, double p_xy[100000][2], int *q, double ans[100000][2]){\n\n    two_dimensional_qsort(p_xy, 0, n-1, 1);\n    /*\n    for(int i=0; i<n; i++){\n        cout<<p_xy[i][0]<<\" \"<<p_xy[i][1]<<endl;\n    }\n     */\n    \n    \n    int k=0;\n    for(int i=0; i<n; i++){\n        while(k > 1 && (angle_two_line_0_359(ans[k-2][0], ans[k-2][1], ans[k-1][0], ans[k-1][1], p_xy[i][0], p_xy[i][1])>M_PI))k--;\n        ans[k][0]=p_xy[i][0];\n        ans[k][1]=p_xy[i][1];\n        k++;\n    }\n    \n    \n    int t=k;\n    for(int i=n-2; i>=0; i--){\n        while(k > t && (angle_two_line_0_359(ans[k-2][0], ans[k-2][1], ans[k-1][0], ans[k-1][1], p_xy[i][0], p_xy[i][1])>M_PI))k--;\n        ans[k][0]=p_xy[i][0];\n        ans[k][1]=p_xy[i][1];\n        k++;\n    }\n    *q=k-1;\n}\n//-------------------------------------------------------------------------------------\n/*点の集合(凸多角形)の最遠点距離*/\ndouble diameter_of_the_polygon(int n, double p_xy[100000][2]){\n    double ch[100000][2];\n    int q;\n    convex_hull(n, p_xy, &q, ch);\n    \n    \n    int i=0;\n    int j=0;\n    for(int k=0; k<q; k++){\n        if(ch[j][1]<ch[k][1]){\n            j=k;\n        }\n    }\n    \n    int si=i;\n    int sj=j;\n    double res =  distance_between_the_two_pointss(ch[si][0], ch[si][1], ch[sj][0], ch[sj][1]);\n    while(1){\n        if(i==sj||j==si)break;\n        \n        double cross = (ch[(si+1)%n][0]-ch[si][0])*(ch[(sj+1)%n][1]-ch[sj][1]) - (ch[(si+1)%n][1]-ch[si][1])*(ch[(sj+1)%n][0]-ch[sj][0]);\n        //cout<<cross<<endl;\n        \n        if(cross<0){\n            si=(si+1)%n;\n            //res = max(res,a);\n        }else{\n            sj=(sj+1)%n;\n            //res = max(res,b);\n        }\n        \n        res =  max(res,distance_between_the_two_pointss(ch[si][0], ch[si][1], ch[sj][0], ch[sj][1]));\n                                                    \n        \n    }\n    \n    return res;\n}\n//-------------------------------------------------------------------------------------\n/*点の集合の最近点距離*/\n/*使用前に sort(a, a+n); をおこなう*/\n/*使用注意 他と仕様が違う*/\n/*点にpairを使っている*/\n\n\nbool compare_y(pair<double, double> a,pair<double, double> b){\n    return a.second<b.second;\n}\n\ndouble length_of_the_nearest_point_to(pair<double, double> a[100000], int n){\n    if(n<=1)return 999999999.9;\n    int m=n/2;\n    double x=a[m].first;\n    double d=min(length_of_the_nearest_point_to(a, m), length_of_the_nearest_point_to(a+m, n-m));\n    //inplace_merge(a, a+m, a+n, compare_y);\n    sort(a, a+n, compare_y);\n    vector<pair<double, double> >b;\n    for(int i=0; i<n; i++){\n        if(fabs(a[i].first-x)>=d)continue;\n        for(int j=0; j<b.size(); j++){\n            double dx=a[i].first-b[b.size()-j-1].first;\n            double dy=a[i].second-b[b.size()-j-1].second;\n            if(dy>=d)break;\n            d=min(d,sqrt(dx*dx+dy*dy));\n            \n        }\n        b.push_back(a[i]);\n    }\n    return d;\n}\n                                      \n//-------------------------------------------------------------------------------------\n/* 2点(x1,y1) (x2,y2)を通る直線に点(px,py)から引いた垂線の直線との交点(x, y)を返す */\nvoid intersection_of_the_normal_to_the_straight_line_passing_through_the_two_points(double px,double py,double x1, double y1,double x2, double y2,double *x, double *y){\n    double a,b,c;\n    straight_line_passing_through_the_two_points(x1, y1, x2, y2, &a, &b, &c);\n    *x = px-(a*px+b*py+c)/(a*a+b*b)*a;\n    *y = py-(a*px+b*py+c)/(a*a+b*b)*b;\n}\n                                      \nint main(){\n    double x0,y0,x1,y1,x2,y2;\n    cin>>x0>>y0>>x1>>y1;\n    int q;\n    cin>>q;\n    for(int i=0; i<q; i++){\n        cin>>x2>>y2;\n        \n        double a = angle_two_line_0_359(x1, y1, x0, y0, x2, y2);\n        //cout<<a/M_PI * 180.0<<endl;\n        \n        if(a==M_PI)cout<<\"ONLINE_BACK\"<<endl;\n        else if(0<a&&a<M_PI)cout<<\"COUNTER_CLOCKWISE\"<<endl;\n        else if(M_PI<a&&a<M_PI*2)cout<<\"CLOCKWISE\"<<endl;\n        else if(a==0||a==2*M_PI){\n            double l1 = distance_between_the_two_pointss(x1, y1, x0, y0);\n            double l2 = distance_between_the_two_pointss(x2, y2, x0, y0);\n            if(l1<l2)cout<<\"ONLINE_FRONT\"<<endl;\n            else cout<<\"ON_SEGMENT\"<<endl;\n        }\n        \n        \n        \n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <string>\n#include <cstring>\n#include <deque>\n#include <list>\n#include <queue>\n#include <stack>\n#include <vector>\n#include <utility>\n#include <algorithm>\n#include <map>\n#include <set>\n#include <complex>\n#include <cmath>\n#include <limits>\n#include <climits>\n#include <ctime>\nusing namespace std;\n\n#define rep(i,a,n) for(int i=a; i<n; i++)\n#define repr(i,a,n) for(int i=a; i>=n; i--)\n#define pb(a) push_back(a)\n#define fr first\n#define sc second\n#define INF 999999999\n\n#define X real()\n#define Y imag()\n#define EPS (1e-10)\n#define EQ(a,b) (abs((a) - (b)) < EPS)\n#define EQV(a,b) ( EQ((a).X, (b).X) && EQ((a).Y, (b).Y) )\n#define LE(n, m) ((n) < (m) + EPS)\n#define GE(n, m) ((n) + EPS > (m))\n\ntypedef vector<int> VI;\ntypedef vector<VI> MAT;\ntypedef pair<int, int> pii;\ntypedef long long int ll;\n\ntypedef complex<double> P;\ntypedef pair<P, P> L;\ntypedef pair<P, double> C;\n\nint dy[]={0, 0, 1, -1};\nint dx[]={1, -1, 0, 0};\nint const MOD = 1000000007;\n\nnamespace std {\n    bool operator<(const P a, const P b) {\n        return a.X != b.X ? a.X < b.X : a.Y < b.Y;\n    }\n}\n\n// 2???????????????????????????????±???????\ndouble dot(P a, P b) {\n    return (a.X * b.X + a.Y * b.Y);\n}\n\n// 2???????????????????????????????±???????\ndouble cross(P a, P b) {\n    return (a.X * b.Y - a.Y * b.X);\n}\n\n// ccw (c ?????´???(??????) ab ???????????????????????????????????¢?????????)\n// +1 ... a ??? b ??§???????¨??????????????????? b ??? c (COUNTER_CLOCKWISE)\n// -1 ... a ??? b ??§????¨??????????????????? b ??? c (CLOCKWISE)\n// +2 ... c, a, b ??????????????§????????´?????¶???????????´??? (ONLINE_BACK)\n// -2 ... a, b, c ??????????????§????????´?????¶???????????´??? ( or a == b ) (ONLINE_FRONT)\n//  0 ... c ????????? ab ??????????????´??? (??? a, b ????????????) (ON_SEGMENT)\nint ccw(P a, P b, P c) {\n    b -= a; c -= a;\n    if( cross(b,c) > EPS ) return +1;\n    if( cross(b,c) < -EPS ) return -1;\n    if( dot(b,c) < 0 ) return +2;\n    if( norm(b) < norm(c) ) return -2;\n    return 0;\n}\n\nint main() {\n    P a, b, c; cin >> a.X >> a.Y >> b.X >> b.Y;\n    int n; cin >> n;\n    map<int, string> m;\n    m[1] = \"COUNTER_CLOCKWISE\";\n    m[-1] = \"CLOCKWISE\";\n    m[2] = \"ONLINE_BACK\";\n    m[-2] = \"ONLINE_FRONT\";\n    m[0] = \"ON_SEGMENT\";\n    rep(i,0,n) {\n        cin >> c.X >> c.Y;\n        int ans = ccw(a, b, c);\n        cout << m[ans] << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define INTMAX 2147483647LL\n#define PII pair<int,int>\n#define MK make_pair\n#define re register\n#define Eps (1e-10)\n#define Equal(a,b) (fabs((a)-(b))<Eps)\nusing namespace std;\ntypedef long long ll;\ntypedef double db;\nconst double Pi=acos(-1.0);\nconst int Inf=0x3f3f3f3f;\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\ninline int read(){\n\tre int x=0,f=1,ch=getchar();\n\twhile(!isdigit(ch))f=ch=='-'?-1:1,ch=getchar();\n\twhile(isdigit(ch))x=x*10+ch-48,ch=getchar();\n\treturn x*f;\n}\ninline ll readll(){\n\tre ll x=0,f=1,ch=getchar();\n\twhile(!isdigit(ch))f=ch=='-'?-1:1,ch=getchar();\n\twhile(isdigit(ch))x=x*10+ch-48,ch=getchar();\n\treturn x*f;\n}\n\nstruct Point{\n\tdb x,y;\n\tPoint(){}\n\tPoint(db xx,db yy):x(xx),y(yy){}\n\tinline Point operator +(const Point &p){return Point(x+p.x,y+p.y);}\n\tinline Point operator -(const Point &p){return Point(x-p.x,y-p.y);}\n\tinline Point operator *(const db &k){return Point(x*k,y*k);}\n\tinline Point operator /(const db &k){return Point(x/k,y/k);}\n\tinline db Norm(){return x*x+y*y;}\n\tinline db abs(){return sqrt(Norm());}\n\tinline bool operator <(const Point &p)const{return x!=p.x?x<p.x:y<p.y;}\n\tinline bool operator ==(const Point &p)const{return fabs(x-p.x)<Eps&&fabs(y-p.y)<Eps;}\n}; \n\ntypedef Point Vector;\ntypedef vector<Point> Poly;\n\nstruct Segment{\n\tPoint p1,p2;\n\tSegment(){}\n\tSegment(Point p1_,Point p2_):p1(p1_),p2(p2_){}\n};\ntypedef Segment Line;\nstruct Circle{\n\tPoint c;db r;\n\tCircle(Point cc,db rr):c(cc),r(rr){}\n};\n\ndouble norm(Vector a){return a.x*a.x+a.y*a.y;}\ndouble abs(Vector a){return sqrt(norm(a));}\ndouble dot(Vector a,Vector b){return a.x*b.x+a.y*b.y;}\ndouble cross(Vector a,Vector b){return a.x*b.y-a.y*b.x;}\n\ninline bool Is_Vertical(Vector a,Vector b){return Equal(dot(a,b),0.0);}\ninline bool Is_Vertical(Point a1,Point a2,Point b1,Point b2){return Is_Vertical(a1-a2,b1-b2);}\ninline bool Is_Vertical(Segment s1,Segment s2){return Equal(dot(s1.p2-s1.p1,s2.p2-s2.p1),0.0);}\n\ninline bool Is_Parallel(Vector a,Vector b){return Equal(cross(a,b),0.0);}\ninline bool Is_Parallel(Point a1,Point a2,Point b1,Point b2){return Is_Parallel(a1-a2,b1-b2);}\ninline bool Is_Parallel(Segment s1,Segment s2){return Equal(cross(s1.p2-s1.p1,s2.p2-s2.p1),0.0);}\n\nPoint Project(Segment s,Point p){\n\tVector bse=s.p2-s.p1;\n\tdouble res=dot(p-s.p1,bse)/norm(bse);\n\treturn s.p1+bse*res;\n}\nPoint Reflect(Segment s,Point p){return p+(Project(s,p)-p)*2.0;}\n\ninline int CCW(Point p0,Point p1,Point p2){\n\tVector a=p1-p0,b=p2-p0;\n\tif(cross(a,b)>Eps) return COUNTER_CLOCKWISE;\n\tif(cross(a,b)<-Eps)return CLOCKWISE;\n\tif(dot(a,b)<-Eps)  return ONLINE_BACK;\n\tif(a.Norm()<b.Norm()) return ONLINE_FRONT;\n\treturn ON_SEGMENT; \n}\n\ndouble x,y,xx,yy;\nint q;\n\nint main(){\n\tmap<int,string> m;\n\tm[COUNTER_CLOCKWISE]=\"COUNTER_CLOCKWISE\";\n    m[CLOCKWISE]=\"CLOCKWISE\";\n    m[ONLINE_BACK]=\"ONLINE_BACK\";\n    m[ONLINE_FRONT]=\"ONLINE_FRONT\";\n    m[ON_SEGMENT]=\"ON_SEGMENT\";\n    cin>>x>>y>>xx>>yy;\n\tPoint p1=Point(x,y),p2=Point(xx,yy);\n\tq=read();\n\twhile(q--){\n\t\tcin>>x>>y;\n\t\tcout<<m[CCW(p1,p2,Point(x,y))]<<endl;;\n\t}\n\treturn 0;\n\t \n}\n"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#include<iostream>\n#include<fstream>\n#include<iomanip>\n#include<float.h>\n#include<math.h>\nusing namespace std;\n\ntemplate <class T>\nclass _Point{\npublic:\n\tT x;\n\tT y;\n\t_Point(){}\n\t_Point(T _x, T _y) :x(_x), y(_y){}\n\t_Point(const _Point & v) :x(v.x), y(v.y){}\n\n\tconst _Point operator + (const _Point & v)\n\t{\n\t\treturn _Point(x+v.x,y+v.y);\n\t}\n\tconst _Point operator - (const _Point & v)\n\t{\n\t\treturn _Point(x - v.x, y - v.y);\n\t}\n\tT abs() const {\n\t\treturn sqrt(x*x + y*y);\n\t}\n\t_Point unit() const{\n\t\tT len = abs();\n\t\treturn _Point(x / len, y / len);\n\t}\n\tT operator*(const _Point &v) const\n\t{\n\t\treturn x * v.x + y * v.y;\n\t}\n\tconst _Point operator*(const T &len) const\n\t{\n\t\treturn _Point(len * x, len * y);\n\t}\n};\ntypedef double R;\ntypedef _Point<R> Point;\ntypedef Point Vector;\n\nint main(){\n\tstd::istream & c_in = cin;\n\n\tPoint p0, p1;\n\tc_in >> p0.x >> p0.y >> p1.x >> p1.y;\n\tVector P10(p1 - p0);\n\tVector e10(P10.unit());\n\n\tint q;\n\tc_in >> q;\n\tfor (int i = 0; i < q; ++i)\n\t{\n\t\tPoint p2;\n\t\tc_in >> p2.x >> p2.y;\n\n\t\tVector P20 = p2 - p0;\n\t\tVector e20(P20.unit());\n\t\tbool zero = P20.abs() < DBL_EPSILON*16;\n\t\tR projection = e10*e20;\n\t\tif (zero)\n\t\t{\n\t\t\t//(5)\n\t\t\tcout << \"ON_SEGMENT\";\n\t\t}\n\t\telse if (fabs(projection) > 1 - DBL_EPSILON * 16)\n\t\t{\n\t\t\t//??´???\n\t\t\tif (projection > 0)\n\t\t\t{\n\t\t\t\tif (P20.abs() <= P10.abs())\n\t\t\t\t{\n\t\t\t\t\t//(5)\n\t\t\t\t\tcout << \"ON_SEGMENT\";\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t//(4)\n\t\t\t\t\tcout << \"ONLINE_FRONT\";\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//(3)\n\t\t\t\tcout << \"ONLINE_BACK\";\n\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tVector ey(-e10.y, e10.x);\n\t\t\tR projection2 = ey*P20;\n\t\t\tif (projection2 > 0)\n\t\t\t{\n\t\t\t\t//???????¨??????????????????´??? (1) \n\t\t\t\tcout << \"COUNTER_CLOCKWISE\";\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//????¨??????????????????´???(2) \n\t\t\t\tcout << \"CLOCKWISE\";\n\t\t\t}\n\t\t}\n\t\tcout << endl;\n\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n/*\n#include<algolithm>\n#include<array>\n#include<vector>\n*/\nusing namespace std;\n\ntypedef double Real;\nconstexpr Real EPS = 1e-8;\n\nenum { CCW=1, CW = -1, BACK= 2, FRONT=-2, ON=0};\n\n\nint sign(Real d) {\n\tif (d>EPS) { return 1; }\n\tif (d<-EPS) { return -1; }\n\treturn 0;\n}\n\nstruct Point {\n\tReal x,y;\n\n\tPoint(Real x_=0, Real y_=0): x(x_), y(y_) {}\n\n\tPoint operator+(const Point &p) const {\n\t\treturn Point(x+p.x,y+p.y);\n\t}\n\tPoint operator-(const Point &p) const {\n\t\treturn Point(x-p.x,y-p.y);\n\t}\n\tPoint operator*(Real s) const {\n\t\treturn Point(x*s,y*s);\n\t}\n\tPoint operator/(Real s) const {\n\t\treturn Point(x/s,y/s);\n\t}\n\tPoint operator<(const Point &p) const {\n\t\treturn sign(x - p.x) == -1 || (sign(x - p.x)==0 && sign(y - p.y)==-1);\n\t}\n\tPoint operator==(const Point &p) const { return sign(x-p.x) == 0 && sign(y - p.y)==0; }\n\n};\n\nistream &operator>>(istream &is, Point &p) {\n\treturn is >> p.x >> p.y;\n}\nostream &operator<<(ostream &os, Point &p) {\n\treturn os << '(' << p.x << \", \" << p.y << ')';\n}\n\nstruct Line : public array<Point, 2> { //??????\n\tLine(const Point &a, const Point &b) { at(0) = a; at(1) = b; }\n};\n\nstruct Segment : public array<Point, 2> { //??´???\n\tSegment(const Point &a, const Point &b) { at(0) = a; at(1) = b; }\n};\n\nstruct Circle {\n\tPoint c;\n\tReal r;\n\tCircle(const Point &c_, Real r_): c(c_), r(r_) {}\n};\n\ntypedef vector<Point> Polygon;\n\n\n\n\n//--- solve ---\nPoint rotate90(const Point &p) { //???????¨???????\n\treturn Point(-p.y,p.x);\n}\n\nPoint rotate(const Point &p, Real theta) {\n\tconst Real s = sin(theta), c = cos(theta);\n\treturn Point(c*p.x - s*p.y, s*p.x + c*p.y);\n}\n\nReal angle(const Point &p) {\n\treturn atan2(p.y, p.x);\n}\n\nReal norm(const Point &p) {\n\treturn p.x * p.x + p.y * p.y;\n}\n\nReal abs(const Point &p) {\n\treturn sqrt(norm(p));\n}\n\nReal dot(const Point &a, const Point &b) { //??????\n\treturn a.x * b.x + a.y * b.y;\n}\n\nReal cross(const Point &a, const Point &b) {\n\treturn a.x * b.y + a.y * b.x;\n}\n\n\nPoint project(const Line &l, const Point &p) { //?°???±\n\tconst Point a = p - l[0];\n\tconst Point b = l[1] - l[0];\n\treturn l[0] + b * (dot(a,b) / norm(b));\n}\n\nbool intersect(const Line &a, const Line &b) { //\n\treturn sign(cross(a[1]-a[0], b[1]-b[0])) != 0\n\t\t|| sign(cross(a[1]-a[0], b[1]-a[0])) == 0;\n}\n\nint ccw(const Point &a, const Point &b, const Point &c) {\n\tconst Point p = b - a;\n\tconst Point q = c - a;\n\tconst Real cr = cross(p,q);\n\n\tif (sign(cr) == 1) { return CCW; }\n\telse if (sign(cr) == -1) { return CW; }\n\telse if (sign(dot(p,q)) == -1) { return BACK; }\n\telse if (sign(norm(p) - norm(q)) == -1) { return FRONT; }\n\treturn ON;\n}\n\n\n//CCW=1, CW = -1, BACK= 2, FRONT=-2, ON=0\nint main() {\n\tPoint p1,p2;\n\tint q;\n\tint x,y;\n\n\tcout.setf(ios::fixed);\n\tcout.precision(10);\n\tcin >> p1.x >> p1.y >> p2.x >> p2.y;\n\tcin >> q;\n\tfor(int i=0; i < q; i++) {\n\t\tPoint p;\n\t\tcin >> p.x >> p.y;\n\t\tint num = ccw(p1,p2,p);\n\t\tswitch(num) {\n\t\t\tcase CCW:\n\t\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t\t\tbreak;\n\t\t\tcase CW:\n\t\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\t\t\tbreak;\n\t\t\tcase BACK:\n\t\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t\t\tbreak;\n\t\t\tcase FRONT:\n\t\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t\t\tbreak;\n\t\t\tcase ON:\n\t\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t\t\tbreak;\n\t\t}\n\n\t}\n\t\n\n\treturn EXIT_SUCCESS;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <algorithm>\n#include <iomanip>\nusing namespace std;\n\ntypedef struct Point {\n\tdouble x; \n\tdouble y;\n\n\tPoint() { }\n\n\tPoint(double x, double y) :x(x), y(y) { }\n\n\tPoint operator+(Point& p) {\n\t\treturn Point(x + p.x, y + p.y);\n\t}\n\n\tPoint operator-(Point& p) {\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n};\n\ntypedef Point Vector;\n\n struct Line {\n\tPoint p1, p2;\n\tLine() {}\n\tLine(const Point& a,const Point& b) : p1(a),p2(b) { }\n};\n\n typedef Line Segment;\n\ndouble abs(Point p1, Point p2) {\n\tdouble norm = (p1.x - p2.x)*(p1.x - p2.x) + (p1.y - p2.y)*(p1.y - p2.y);\n\treturn sqrt(norm);\n}\n\ndouble product(Point p1, Point p2) {\n\treturn p1.x*p2.x + p1.y + p2.y;\n}\n\ndouble cross(Point p1, Point p2) {\n\treturn p1.x*p2.y - p1.y*p2.x;\n}\n\nint ccw(Point p0, Point p1, Point p2) {\n\tVector v0 = p2 - p0;\n\tVector v1 = p1 - p0;\n\tif (cross(v0, v1) > 0.0) return 1;   //p0,p1,p2??????????¨???????\n\tif (cross(v0, v1) < 0.0) return -1;   //p0,p1,p2???????¨???????\n\tif (product(v0, v1) < 0.0) return 2;  //p2,p0,p1????????§????????´??????\n\tif (abs(p0, p1) < abs(p0, p2)) return -2;  //p0,p1,p2????????§????????´??????\n\treturn 0;   //p2?????????(p0,p1)???\n}\n\nbool intersect(Point p0, Point p1, Point p2, Point p3) {\n\treturn (ccw(p0, p1, p2)*ccw(p0, p1, p3) <= 0&&ccw(p2,p3,p0)*ccw(p2,p3,p1)<=0);\n\t//?????????????????????????????¶\n}\n\nbool intersect(Segment s1, Segment s2) {\n\treturn intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\ndouble DistanceLP(Line l, Point p) {\n\treturn abs(cross(l.p2 - l.p1, p - l.p1)/abs(l.p1,l.p2));\n}\n\ndouble DistanceSP(Segment s, Point p) {\n\tif (product(s.p2 - s.p1, p - s.p1) < 0.0) return abs(p, s.p1);\n\tif (product(s.p1 - s.p2, p - s.p2) < 0.0) return abs(p, s.p2);\n\treturn DistanceLP(s, p);\n}\n\ndouble DistanceSS(Segment s1, Segment s2) {\n\tif (intersect(s1, s2)) return 0.0;\n\treturn min(min(DistanceSP(s1, s2.p1), DistanceSP(s1,s2.p2)), min(DistanceSP(s2, s1.p1), DistanceSP(s2, s1.p2)));\n}\n\nint main() {\n\tPoint p0, p1,p2;\n\tcin >> p0.x; cin >> p0.y;\n\tcin >> p1.x; cin >> p1.y;\n\tint q; \n\tcin >> q;\n\tfor (int i = 0;i < q;i++) {\n\t\tcin >> p2.x; cin >> p2.y;\n\t\tint c = ccw(p0, p1, p2);\n\t\tif (c == 1) cout << \"COUNTER_CLOCKWISE\" << endl;\n\t\tif (c == -1) cout << \"CLOCKWISE\" << endl;\n\t\tif (c == 2) cout << \"ONLINE_BACK\" << endl;\n\t\tif (c == -2) cout << \"ONLINE_FRONT\" << endl;\n\t\tif (c == 0) cout << \"ON_SEGMENT\" << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<cstdlib>\n#include<cmath>\n#include<iostream>\n#include<vector>\n#include<algorithm>\n\nusing namespace std;\n\nint main()\n{\n\tdouble p1x, p1y, p2x, p2y, p0x, p0y;\n\tint q;\n\n\tscanf(\"%lf %lf %lf %lf\", &p0x, &p0y, &p1x, &p1y);\n\n\tpair<double, double> v01 = { p1x - p0x, p1y - p0y };\n\n\n\tscanf(\"%d\", &q);\n\n\tfor (int i = 0; i < q; i++)\n\t{\n\t\tscanf(\"%lf %lf\", &p2x, &p2y);\n\n\t\tif ((p2x == p0x && p2y == p0y) || (p2x == p1x && p2y == p0y)){\n\t\t\tprintf(\"ONLINE_SEGMENT\\n\");\n\n\t\t\tcontinue;\n\t\t}\n\n\t\tpair<double, double> v02 = { p2x - p0x, p2y - p0x };\n\n\t\tif (v01.first*v02.second == v01.second*v01.first)\n\t\t{\n\t\t\tif (v01.first*v02.first < 0)\n\t\t\t{\n\t\t\t\tprintf(\"ONLINE_BACK\\n\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tabs(v01.first) < abs(v02.first) ? printf(\"ONLINE_FRONT\\n\") : printf(\"ONLINE_SEGMENT\\n\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\n\t\tdouble y01 = (v01.second / v01.first)*(p2x - p0x) + p0y;\n\t\ty01 < p2y ? printf(\"COUNTER_CLOCKWISE\\n\") : printf(\"CLOCKWISE\\n\");\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\n#define EPS (1e-10)\n\nclass Point{\npublic:\n  double x,y;\n  \n  Point(double x = 0, double y = 0): x(x),y(y){}\n \n  Point operator + (Point p){\n    return Point( x+p.x , y+p.y );\n  }\n  Point operator - (Point p){\n    return Point( x-p.x , y-p.y );\n  }\n  Point operator * (double a){\n    return Point( a*x , a*y );\n  }\n \n  double abs(){\n    return sqrt(norm());\n  }\n  double norm(){\n    return x*x+y*y;\n  }\n};\n \ndouble dot(Point a,Point b){\n  return a.x*b.x + a.y*b.y;\n}\n \ndouble cross(Point a,Point b){\n  return a.x*b.y - b.x*a.y;\n}\n \nint ccw( Point p0 , Point p1 , Point p2 ){\n  Point a = p1 - p0;\n  Point b = p2 - p0;\n  if( cross(a,b) > EPS ) return 1;\n  if( cross(a,b) < -EPS ) return -1;\n  if( dot(a,b) < -EPS ) return 2;\n  if( a.norm() < b.norm() ) return -2;\n  return 0;\n}\n\nint main(){\n  Point p0,p1,p2;\n  int n;\n\n  cin >> p0.x >> p0.y >> p1.x >> p1.y;\n  cin >> n;\n  for(int i = 0 ; i < n ; i++){\n    cin >> p2.x >> p2.y;\n\n    switch(ccw(p0,p1,p2)){\n    case 1:\n      cout << \"COUNTER_CLOCKWISE\" << endl;\n      break;\n    case -1:\n      cout << \"CLOCKWISE\" << endl;\n      break;\n    case 2:\n      cout << \"ONLINE_BACK\" << endl;\n      break;\n    case -2:\n      cout << \"ONLINE_FRONT\" << endl;\n      break;\n    default:\n      cout << \"ON_SEGMENT\" << endl;\n      break;\n    }\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <math.h>\n#include <algorithm>\nusing namespace std;\n \nint main(){\n    double x1,x2,xp,y1,y2,yp1,yp,naiseki,norm1,norm2,gaiseki;\n    int q;\n \n    scanf(\"%lf %lf %lf %lf\",&x1,&y1,&x2,&y2);\n    scanf(\"%d\",&q);\n \n    for(int i=0; i < q; i++){\n        scanf(\"%lf %lf\",&xp,&yp);\n        norm1 = sqrt((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1));\n        norm2 = sqrt((xp-x1)*(xp-x1)+(yp-y1)*(yp-y1));\n        naiseki = (xp-x1)*(x2-x1)+(yp-y1)*(y2-y1);\n        gaiseki = (x2-x1)*(yp-y1)-(xp-x1)*(y2-y1);\n        if(fabs(naiseki/(norm1*norm2)+1) < 0.00000001){\n            printf(\"ONLINE_BACK\\n\");\n        }else if(fabs(naiseki-norm1*norm2)< 0.00000001){\n            if(norm1 >= norm2){\n                printf(\"ON_SEGMENT\\n\");\n            }else{\n                printf(\"ONLINE_FRONT\\n\");\n            }\n        }else if(gaiseki > 0){\n            printf(\"COUNTER_CLOCKWISE\\n\");\n        }else{\n            printf(\"CLOCKWISE\\n\");\n        }\n    }\n \n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nstruct vec{\n    double x,y;\n};\n\nconst double eps = 0.00001;\n\nint main(void){\n    vec p0,p1,p2,v1,v2;\n    int q;\n    cin >> p0.x >> p0.y >> p1.x >> p1.y;\n    v1.x=p1.x-p0.x; v1.y=p1.y-p0.y;\n    cin >> q;\n    cout.precision(10);\n    cout.setf(std::ios::showpoint);\n    for(int i=0;i<q;i++){\n        cin >> p2.x >> p2.y;\n        v2.x=p2.x-p0.x; v2.y=p2.y-p0.y;\n        double p=v1.x*v2.y-v1.y*v2.x;\n        if(p>eps){\n            cout << \"COUNTER_CLOCKWISE\" << endl;\n            continue;\n        }\n        if(p<-eps){\n            cout << \"CLOCKWISE\" << endl;\n            continue;\n        }\n        p=v2.x/v1.x;\n        if(p<0){\n            cout << \"ONLINE_BACK\" << endl;\n        }else if(p<=1){\n            cout << \"ON_SEGMENT\" << endl;\n        }else{\n            cout << \"ONLINE_FRONT\" << endl;\n        }\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <fstream>\n#include <string>\n#include <iomanip>\n#include <math.h>\nusing namespace std;\n\nclass Point {\n    public:\n    double x, y;\n\n    Point(double x = 0, double y = 0): x(x), y(y) {}\n\n    Point operator + (Point p) { return Point(x+p.x, y+p.y); }\n    Point operator - (Point p) { return Point(x-p.x, y-p.y); }\n    Point operator * (double a) { return Point(a*x, a*y); }\n    Point operator / (double a) { return Point(x/a, y/a); }\n\n    double abs() {return sqrt(norm()); }\n    double norm() {return x*x + y*y; }\n};\n\ntypedef Point Vector;\n\n\ndouble dot(Vector a, Vector b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n    return a.x*b.y - a.y*b.x;\n}\n\nint main(){\n    //cinの入力元をテキストファイルに(テスト用)\n    #if 0\n    std::ifstream in(\"input.txt\");\n    std::cin.rdbuf(in.rdbuf());\n    #endif\n\n    Point p0, p1;\n    int q;\n    string message[6] = {\"ERROR\", \"COUNTER_CLOCKWISE\", \"CLOCKWISE\", \"ONLINE_BACK\", \"ONLINE_FRONT\", \"ON_SEGMENT\"};\n\n    //標準入力\n    cin >> p0.x;\n    cin >> p0.y;\n    cin >> p1.x;\n    cin >> p1.y;\n    cin >> q;\n\n    Vector v01 = p1 - p0;\n\n    for(int i=0; i<q; i++){\n        int num = 0;\n        Point p2;\n        cin >> p2.x;\n        cin >> p2.y;\n\n        Vector v02= p2 - p0;\n\n        double Dot = dot(v01, v02);\n        double Cross = cross(v01, v02);\n\n        if(Cross > 0){num = 1;}\n        else if (Cross < 0){num = 2;}\n        else\n        {\n            if(Dot < 0){num = 3;}\n            else{\n                if(v01.norm() < v02.norm()){num = 4;}\n                else{num = 5;}\n            }\n        }\n        cout << message[num] << \"\\n\";\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define For(i, a, b) for(int (i)=(a); (i)<(b); ++(i))\n#define rFor(i, a, b) for(int (i)=(a)-1; (i)>=(b); --(i))\n#define rep(i, n) For((i), 0, (n))\n#define rrep(i, n) rFor((i), (n), 0)\n#define fi first\n#define se second\nusing namespace std;\ntypedef long long lint;\ntypedef unsigned long long ulint;\ntypedef pair<int, int> pii;\ntypedef complex<double> xy_t;\ntypedef pair<xy_t, int> pci;\ntypedef vector<lint> poly;\ntemplate<class T>bool chmax(T &a, const T &b){if(a<b){a=b; return true;} return false;}\ntemplate<class T>bool chmin(T &a, const T &b){if(a>b){a=b; return true;} return false;}\n\nconstexpr lint mod = 1e9+7;\nconstexpr lint INF = mod*mod;\nconstexpr int MAX = 100010;\n\nconstexpr double eps=1e-9;\n\ninline int sgn(double x){\n    if(x<-eps) return -1;\n    if(x>eps) return 1;\n    return 0;\n}\n\ninline bool EQ(double x, double y){\n    return sgn(x-y)==0;\n}\n\ninline bool GE(double x, double y){\n    return sgn(x-y)==1;\n}\n\ninline bool LE(double x, double y){\n    return sgn(x-y)==-1;\n}\n\ninline bool GEQ(double x, double y){\n    return sgn(x-y)>=0;\n}\n\ninline bool LEQ(double x, double y){\n    return sgn(x-y)<=0;\n}\n\nstruct Point{\n    double x, y;\n    Point(double x, double y): x(x), y(y){}\n\n    Point operator+(const Point &p){\n        return {x+p.x, y+p.y};\n    }\n\n    Point operator-(const Point &p){\n        return {x-p.x, y-p.y};\n    }\n\n    Point operator*(const double k){\n        return {k*x, k*y};\n    }\n\n    Point operator/(const double k){\n        return {x/k, y/k};\n    }\n\n    double operator*(const Point &p){\n        return x*p.x+y*p.y;\n    }\n\n    double operator^(const Point &p){\n        return x*p.y-y*p.x;\n    }\n\n    bool operator==(const Point &p){\n        return EQ(x, p.x) && EQ(y, p.y);\n    }\n};\n\nusing Vec=Point;\nusing pdi=pair<double, int>;\n\ndouble abs(Point p){\n    return hypot(p.x, p.y);\n}\n\ndouble arg(Point p){\n    return atan2(p.y, p.x);\n}\n\nconstexpr int CCW_COUNTER_CLOCKWISE=1;\nconstexpr int CCW_CLOCKWISE=-1;\nconstexpr int CCW_ONLINE_BACK=-2;\nconstexpr int CCW_ONLINE_FRONT=2;\nconstexpr int CCW_ON_SEGMENT=0;\n\ninline int ccw(Point a, Point b, Point c){\n    Vec v=b-a, w=c-a;\n    if(GE(v^w, 0)) return CCW_COUNTER_CLOCKWISE;\n    if(LE(v^w, 0)) return CCW_CLOCKWISE;\n    if(LE(v*w, 0)) return CCW_ONLINE_BACK;\n    if(LE((a-b)*(c-b), 0)) return CCW_ONLINE_FRONT;\n    return CCW_ON_SEGMENT;\n}\n\nPoint getCrossPointLL(Point p, Vec v, Point q, Vec w){\n    double s=((q-p)^w)/(v^w);\n    return p+v*s;\n}\n\nint main(){\n    double x, y;\n    scanf(\"%lf%lf\", &x, &y);\n    Point p0(x, y);\n    scanf(\"%lf%lf\", &x, &y);\n    Point p1(x, y);\n    int q;\n    scanf(\"%d\", &q);\n\n    while(q--){\n        scanf(\"%lf%lf\", &x, &y);\n        Point p2(x, y);\n        int flag=ccw(p0, p1, p2);\n        if(flag==CCW_COUNTER_CLOCKWISE) printf(\"COUNTER_CLOCKWISE\\n\");\n        if(flag==CCW_CLOCKWISE) printf(\"CLOCKWISE\\n\");\n        if(flag==CCW_ONLINE_BACK) printf(\"ONLINE_BACK\\n\");\n        if(flag==CCW_ONLINE_FRONT) printf(\"ONLINE_FRONT\\n\");\n        if(flag==CCW_ON_SEGMENT) printf(\"ON_SEGMENT\\n\");\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <iostream>\n\nusing namespace std;\n\n#define EPS 1e-9\n\n#define PI 3.1415926535897932385\n\ndouble dist(int x, int y)\n{\n\treturn sqrt(x * x + y * y);\n}\n\ndouble angle(int x, int y)\n{\n\treturn atan2((double)(y), (double)(x));\n}\n\nint main()\n{\n\tint x0, y0, x1, y1, x2, y2, q;\n\n\tcin >> x0 >> y0 >> x1 >> y1 >> q;\n\n\tfor (int i = 0; i < q; i++)\n\t{\n\t\tcin >> x2 >> y2;\n\n\t\tint ax = x1 - x0;\n\t\tint ay = y1 - y0;\n\t\tint bx = x2 - x0;\n\t\tint by = y2 - y0;\n\n\t\tdouble ad = dist(ax, ay);\n\t\tdouble bd = dist(bx, by);\n\n\t\tdouble at = angle(ax, ay);\n\t\tdouble bt = angle(bx, by);\n\n\t\tdouble st = bt - at;\n\n\t\tif (st < -PI - EPS)\n\t\t{\n\t\t\tst += 2 * PI;\n\t\t}\n\n\t\tif (st > PI + EPS)\n\t\t{\n\t\t\tst -= 2 * PI;\n\t\t}\n\n\t\tif (bx == 0 && by == 0)\n\t\t{\n\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t}\n\t\telse if (PI - EPS < abs(st) && abs(st) < PI + EPS)\n\t\t{\n\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t}\n\t\telse if (-EPS < st && st < EPS)\n\t\t{\n\t\t\tif (ad < bd)\n\t\t\t{\n\t\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t\t}\n\t\t}\n\t\telse if (st > EPS)\n\t\t{\n\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\t}\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include <cstdlib>\n#include <stack>\n#include <queue>\n#include <list>\n#include <vector>\n#include <sstream>\n\nusing namespace std;\n\nclass c_main\n{\nprivate:\n    \npublic:\n    c_main();\n    void f_input();\n};\n\nc_main::c_main()\n{\n\n}\n\nvoid c_main::f_input()\n{\n    double xp1,yp1,xp2,yp2;\n    int q;\n    int i;\n    double x[1000];\n    double y[1000];\n    double a;\n    double b;\n    double x_a;\n    double y_a;\n    double a_a;\n    double b_a;\n    int pt1;\n\n    cin >> xp1 >> yp1 >> xp2 >> yp2;\n    \n    if (xp1 == xp2){\n        x_a = xp1;\n        y_a = 0;\n        pt1 = 0;\n    }else if (yp1 == yp2){\n        x_a = 0;\n        y_a = yp1; \n        pt1 = 1;\n    }else{\n        \n        a_a = (yp2-yp1)/(xp2-xp1);\n      \n        a = -1 * (1/a_a);\n       \n        b_a = -1 * a_a * xp1+ yp1;\n        pt1 = 2;\n    }\n    \n    cin >> q;\n    \n    for ( i = 0; i < q; ++i){\n        cin >> x[i] >> y[i];\n        if (pt1 == 0){\n            if(yp1 >= yp2){\n                if(x[i] == x_a){\n                    if(y[i] > yp1){\n                        cout << \"ONLINE_BACK\" << endl;\n                    }else if(y[i] < yp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(yp2 <= y[i] && y[i] <= yp1){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(x[i] < x_a){\n                    cout << \"CLOCKWISE\" << endl;\n                    \n                }else if(x[i] > x_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n     \n                }\n            }else{\n                if(x[i] == x_a){\n                    if(y[i] < yp1){\n                        cout << \"ONLINE_BACK\" << endl;\n                    }else if(y[i] > yp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(yp1 <= y[i] && y[i] <= yp2){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(x[i] < x_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n                    \n                    \n                    \n                }else if(x[i] > x_a){\n                    cout << \"CLOCKWISE\" << endl;\n                }\n            }\n            //printf(\"%10.10f %10.10f\\n\", x_a,y[i]);\n            \n        }else if(pt1 == 1){\n            if(xp1 >= xp2){\n                if(y[i] == y_a){\n                    if(x[i] > xp1){\n                        cout << \"ONLINE_BACK\" << endl;\n                    }else if(x[i] < xp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(xp2 <= x[i] && x[i] <= xp1){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(y[i] < y_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n                }else if(y[i] > y_a){\n                    cout << \"CLOCKWISE\" << endl;\n                }\n            }else{\n                if(y[i] == y_a){\n                    if(x[i] < xp1){\n                        cout << \"ONLINE_BACK\" << endl;\n                    }else if(x[i] > xp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(xp1 <= x[i] && x[i] <= xp2){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(y[i] < y_a){\n                    cout << \"CLOCKWISE\" << endl;\n                }else if(y[i] > y_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n                }\n            }\n            //printf(\"%10.10f %10.10f\\n\", x[i],y_a);\n        }else if(pt1 == 2){\n            b = -1 * a * x[i] + y[i];\n            x_a = (b - b_a)/(a_a - a);\n            y_a = a_a * x_a + b_a;\n            if(xp1 >= xp2){\n                if(y[i] == y_a){\n                    if(x[i] > xp1){\n                        cout << \"ONLINE_BACK\" << endl;\n                    }else if(x[i] < xp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(xp2 <= x[i] && x[i] <= xp1){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(y[i] < y_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n                }else if(y[i] > y_a){\n                    \n                    cout << \"CLOCKWISE\" << endl;\n                }\n            }else{\n                if(y[i] == y_a){\n                    if(x[i] < xp1){\n                        cout << \"ONLINE_BACK\" << endl;\n                    }else if(x[i] > xp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(xp1 <= x[i] && x[i] <= xp2){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(y[i] < y_a){\n                    cout << \"CLOCKWISE\" << endl;\n                }else if(y[i] > y_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n                }\n            }\n            //printf(\"%10.10f %10.10f\\n\", x_a,y_a);\n        }\n    }\n}\n\nint main(){\n    c_main main01;\n    main01.f_input();\n    \n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> P;\n \ndouble eps = 1e-9;\n \nstring ccw(P a,P b,P c){\n  P ab=b-a;\n  P ac=c-a;\n  P k=ac/ab;\n  if( k.imag() > eps ){\n    return \"COUNTER_CLOCKWISE\";\n  }\n  if( k.imag() < -eps ){\n    return \"CLOCKWISE\";\n  }\n  if( k.real() < -eps ){\n    return \"ONLINE_BACK\";\n  }\n  if( 1+eps < k.real() ){\n    return \"ONLINE_FRONT\";\n  }\n  return \"ON_SEGMENT\";\n}\n \nint main(){\n \n  double x0,y0,x1,y1,x2,y2;\n  cin>>x0>>y0>>x1>>y1;\n  P a(x0,y0);\n  P b(x1,y1);\n  int n;\n  cin>>n;\n  while(n--){\n    cin>>x2>>y2;\n    P c(x2,y2);\n    cout<< ccw(a,b,c) <<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<cmath>\n#include<algorithm>\n\nusing namespace std;\n\nint main()\n{\n\tdouble p1x, p1y, p2x, p2y, p0x, p0y;\n\tint q;\n\n\tscanf(\"%lf %lf %lf %lf\", &p0x, &p0y, &p1x, &p1y);\n\n\tpair<double, double> v01 = { p1x - p0x, p1y - p0y };\n\n\n\tscanf(\"%d\", &q);\n\n\tfor (int i = 0; i < q; i++)\n\t{\n\t\tscanf(\"%lf %lf\", &p2x, &p2y);\n\n\t\tif ((p2x == p0x && p2y == p0y) || (p2x == p1x && p2y == p1y)){\n\t\t\tprintf(\"ON_SEGMENT\\n\");\n\n\t\t\tcontinue;\n\t\t}\n\n\t\tpair<double, double> v02 = { p2x - p0x, p2y - p0y };\n\n\t\tif (v01.first*v02.second == v01.second*v02.first)\n\t\t{\n\t\t\tif ((v01.first*v02.first < 0)||(v01.second*v02.second<0))\n\t\t\t{\n\t\t\t\tprintf(\"ONLINE_BACK\\n\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (pow(v01.first,2)+pow(v01.second,2)<pow(v02.first,2)+pow(v02.second,2)){\n\t\t\t\t\tprintf(\"ONLINE_FRONT\\n\");\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tprintf(\"ON_SEGMENT\\n\");\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t\tdouble sin = (v01.first*v02.second - v01.second*v02.first);\n\n\t\tif (sin > 0){\n\t\t\tprintf(\"COUNTER_CLOCKWISE\\n\");\n\n\t\t\tcontinue;\n\t\t}\n\t\telse{\n\t\t\tprintf(\"CLOCKWISE\\n\");\n\n\t\t\tcontinue;\n\t\t}\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <vector>\n#include <cmath>\nusing namespace std;\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nclass Point {\npublic:\n    double x, y;\n\n    Point(double x = 0.0, double y = 0.0): x(x), y(y) {};\n\n    Point operator + (Point &p) {return Point(x + p.x, y + p.y);}\n    Point operator - (Point &p) {return Point(x - p.x, y - p.y);}\n    Point operator * (double k) {return Point(x * k, y * k);}\n    Point operator / (double k) {return Point(x / k, y / k);}\n\n    double norm(void) {return x * x + y * y;}\n    double abs(void) {return sqrt(norm());}\n\n    bool operator == (const Point &p) const {\n        return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n    }\n\n    bool operator < (const Point &p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    double dot(Point a) {\n        return x * a.x + y * a.y;\n    }\n\n    double cross(Point a) {\n        return x * a.y - y * a.x;\n    }\n};\n\ntypedef Point Vector;\n\nstruct Segment {\n    Point p1, p2;\n};\n\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nint ccw(Point p0, Point p1, Point p2) {\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if (a.cross(b) > EPS) return COUNTER_CLOCKWISE;\n    if (a.cross(b) < -EPS) return CLOCKWISE;\n    if (a.dot(b) < -EPS) return ONLINE_BACK;\n    if (a.norm() < b.norm()) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\n\nint main(void) {\n    int x1, x2, y1, y2, q, px, py;\n    scanf(\"%d %d %d %d\", &x1, &y1, &x2, &y2);\n    Point p0 = Point(x1, y1);\n    Point p1 = Point(x2, y2);\n    scanf(\"%d\", &q);\n\n    for (int i = 0; i < q; i++) {\n        scanf(\"%d %d\", &px, &py);\n        int ret = ccw(p0, p1, Point(px, py));\n\n        switch (ret) {\n            case -2: printf(\"ONLINE_FRONT\\n\"); break;\n            case -1: printf(\"CLOCKWISE\\n\"); break;\n            case 0:  printf(\"ON_SEGMENT\\n\"); break;\n            case 1:  printf(\"COUNTER_CLOCKWISE\\n\"); break;\n            case 2:  printf(\"ONLINE_BACK\\n\"); break;\n        }\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n\nclass Point{\n    public:\n    double x,y;\n    Point(double x=0,double y=0):x(x),y(y){}\n    Point operator+(const Point &p){\n        return Point(x+p.x,y+p.y);\n    }\n    Point operator-(const Point &p){\n        return Point(x-p.x,y-p.y);\n    }\n    Point operator*(const double &a){\n        return Point(a*x,a*y);\n    }\n    Point operator/(const double &a){\n        return Point(x/a,y/a);\n    }\n    double abs(){\n        return sqrt(norm());\n    }\n    double norm(){\n        return x*x+y*y;\n    }\n    bool operator<(const Point &p){\n        return x!=p.x?x<p.x:y<p.y;\n    }\n    bool operator==(const Point &p){\n        return fabs(x-p.x)<EPS&&fabs(y-p.y)<EPS;\n    }\n};\ntypedef Point Vector;\nstruct Segment{\n    Point p1,p2;\n    Segment(){}\n    Segment(Point p1,Point p2):p1(p1),p2(p2){}\n};\ntypedef Segment Line;\n\ndouble dot(Vector a,Vector b){\n    return a.x*b.x+a.y*b.y;\n}\n\ndouble cross(Vector a,Vector b){\n    return a.x*b.y-a.y*b.x;\n}\n\nbool isOrthogonal(Segment s1,Segment s2){\n    return equals(dot(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n\nbool isParallel(Segment s1,Segment s2){\n    return equals(cross(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n\nPoint project(Segment s,Point p){\n    Vector base=s.p2-s.p1;\n    double r=dot(p-s.p1,base)/base.norm();\n    return s.p1+base*r;   \n}\n\nPoint reflect(Segment s,Point p){\n    return p+(project(s,p)-p)*2;\n}\n\ndouble getDistanceLP(Line l,Point p){\n    return abs(cross(l.p2-l.p1,p-l.p1))/(l.p2-l.p1).abs();\n}\n\ndouble getDistanceSP(Segment s,Point p){\n    if(dot(s.p2-s.p1,p-s.p1)<0){\n        return (p-s.p1).abs();\n    }\n    if(dot(s.p1-s.p2,p-s.p2)<0){\n        return (p-s.p2).abs();\n    }\n    return getDistanceLP(s,p);\n}\n\nint ccw(Point p0,Point p1,Point p2){\n    Vector a=p1-p0;\n    Vector b=p2-p0;\n    if(cross(a,b)>EPS) return 1;\n    if(cross(a,b)<-EPS) return -1;\n    if(dot(a,b)<-EPS) return 2;\n    if(a.norm()<b.norm()) return -2;\n    return 0;\n}\n\nbool intersect(Point p1,Point p2,Point p3,Point p4){\n    return (ccw(p1,p2,p3)*ccw(p1,p2,p4)<=0&&\n        ccw(p3,p4,p1)*ccw(p3,p4,p2)<=0);\n}\n\nbool intersect(Segment s1,Segment s2){\n    return intersect(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n\ndouble getDistance(Segment s1,Segment s2){\n    if(intersect(s1,s2)) return 0;\n    return min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),\n        min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n}\n\nPoint getCrossPoint(Segment s1,Segment s2){\n    Vector base=s2.p2-s2.p1;\n    double d1=abs(cross(base,s1.p1-s2.p1));\n    double d2=abs(cross(base,s1.p2-s2.p1));\n    double t=d1/(d1+d2);\n    return s1.p1+(s1.p2-s1.p1)*t;\n}\n\nint main(){\n    int q;\n    int a,b,c,d,e,f;\n    int x;\n    cin>>a>>b>>c>>d;\n    cin>>q;\n    Point p0(a,b),p1(c,d);\n    for(int i=0;i<q;i++){\n        cin>>e>>f;\n        Point p2(e,f);\n        x=ccw(p0,p1,p2);\n        if(x==1) cout<<\"COUNTER_CLOCKWISE\"<<endl;\n        if(x==-1) cout<<\"CLOCKWISE\"<<endl;\n        if(x==2) cout<<\"ONLINE_BACK\"<<endl;\n        if(x==-2) cout<<\"ONLINE_FRONT\"<<endl;\n        if(x==0) cout<<\"ON_SEGMENT\"<<endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <algorithm>\n#include <iostream>\n#include <cstring>\n#include <string>\n#include <sstream>\n#include <queue>\n#include <vector>\n#include <set>\n#include <map>\n#include <functional>\n#include <bitset>\n#include <deque>\n#include <cmath>\n \nusing namespace std;\n \ntypedef long long LL;\ntypedef unsigned long long ULL;\ntypedef long double LD;\n \n#define rep(i, a, b) for(int i = a; i <= b; ++i)\n#define dow(i, a, b) for(int i = a; i >= b; --i)\n#define mem(a) memset(a, 0, sizeof(a))\n#define mst(a, b) memset(a, b, sizeof(a))\n#define sfi(a) scanf(\"%d\", &a)\n#define sfl(a) scanf(\"%lld\", &a)\n#define sfd(a) scanf(\"%lf\", &a)\n#define sfs(a) scanf(\"%s\", a)\n#define pb(a) push_back(a)\n#define sync ios::sync_with_stdio(0); cin.tie(0);\n \nconst int MAXN = 1000 + 5;\nconst double EPS = 1e-6;\nconst double PI = acos(-1.0);\n\nconst int L = 2;\nconst LL MOD = 100000 + 50;\nconst int MAX = 100000 + 50;\n\ntypedef struct Point Point;\ntypedef struct Line Line;\ntypedef struct Polygon Polygon;\ntypedef struct Polygon_convex Polygon_convex;\n \nint cmp(double x);\ndouble sqr(double x);\ndouble det(Point a, Point b);\ndouble dot(Point a, Point b);\ndouble dist(Point a, Point b);\nPoint rotate_point(Point p, double A);\nbool parallel(Line a, Line b);\nbool orthogonal(Line a, Line b);\nPoint PointProjLine(Point p, Line l, Point &ans);\nPoint reflect(Line l, Point p);\ndouble dis_point_segment(Point p, Line l);\ndouble dis_segment_segment(Line a, Line b);\nLine point_make_line(Point a, Point b);\nbool in_segment(Line l, Point p);\nint dcmp(double k);\ndouble mysqrt(double n);\nPoint rotate(Point p, double cost, double sint);\npair<Point, Point> crosspoint(Point ap, double ar, Point bp, double br);\nbool PointOnSegment(Point p, Point s, Point t);\nbool comp_less(Point a, Point b);\nPolygon_convex convex_hull(vector<Point> a);\ndouble convex_diameter(Polygon_convex a, int &First, int &Second);\ndouble min_dist(Point a[], int s[], int l, int r);\ndouble Min_Dist(Point a[], int s[], int n);\nnstruct Point\n{\n    double x, y;\n    Point() {}\n    Point(double a, double b): x(a), y(b) {}\n \n    friend Point operator -(Point a, Point b)\n    {\n        return Point(a.x-b.x,a.y-b.y);\n    }\n    friend Point operator +(Point a, Point b)\n    {\n        return Point(a.x+b.x,a.y+b.y);\n    }\n    friend bool operator ==(Point a, Point b)\n    {\n        return cmp(a.x-b.x)==0 && cmp(a.y-b.y)==0;\n    }\n    friend Point operator *(Point a, double b)\n    {\n        return Point(a.x*b,a.y*b);\n    }\n    friend Point operator *(double a, Point b)\n    {\n        return Point(a*b.x,a*b.y);\n    }\n    friend Point operator /(Point a, double b)\n    {\n        return Point(a.x/b,a.y/b);\n    }\n    double norm()\n    {\n        return sqrt(sqr(x)+sqr(y));\n    }\n};\n \nstruct Line\n{\n    Point a, b;\n    Line() {}\n    Line(Point x, Point y): a(x), b(y) {}\n};\n \nstruct Polygon\n{\n    int n;\n    Point a[80050];\n    Polygon() {}\n    double perimeter()\n    {\n\t\tdouble sum = 0;\n\t\ta[n] = a[0];\n\t\trep(i, 0, n - 1)\n\t\t\tsum += (a[i+1]-a[i]).norm();\n\t\treturn sum;\n\t}\n    int Point_In(Point t)\n    {\n        int num = 0;\n        a[n] = a[0];\n        rep(i, 0, n - 1)\n        {\n            if(PointOnSegment(t, a[i], a[i + 1]))\n                return 2;\n            int k = cmp(det(a[i + 1] - a[i], t - a[i]));\n            int d1 = cmp(a[i].y - t.y);\n            int d2 = cmp(a[i + 1].y - t.y);\n            if(k > 0 && d1 <= 0 && d2 > 0)\n                num++;\n            if(k < 0 && d2 <= 0 && d1 > 0)\n                num--;\n        }\n        return num != 0;\n    }\n};\n \nstruct Polygon_convex\n{\n    vector<Point> P;\n    Polygon_convex(int Size = 0)\n    {\n        P.resize(Size);\n    }\n};\n\nbool comp_less(Point a, Point b)\n{\n    return cmp(a.x-b.x)<0 || cmp(a.x-b.x)==0 && cmp(a.y-b.y)<0;\n}\n\nPolygon_convex convex_hull(vector<Point> a)\n{\n\tPolygon_convex res(2*a.size()+5);\n    sort(a.begin(), a.end(), comp_less);\n    a.erase(unique(a.begin(), a.end()), a.end());\n    int m = 0;\n    int len = a.size();\n    rep(i, 0, len - 1)\n    {\n        while(m>1&&cmp(det(res.P[m-1]-res.P[m-2],a[i]-res.P[m-2]))<=0)\n            --m;\n        res.P[m++] = a[i];\n    }\n    int k = m;\n    len = a.size();\n    dow(i, len - 2, 0)\n    {\n        while(m>k && cmp(det(res.P[m-1]-res.P[m-2],a[i]-res.P[m-2]))<=0)\n            --m;\n        res.P[m++] = a[i];\n    }\n    res.P.resize(m);\n    if(a.size()>1)\n        res.P.resize(m-1);\n       return res;\n}\n\nbool PointOnSegment(Point p, Point s, Point t)\n{\n    return cmp(det(p-s,t-s)) == 0 && cmp(dot(p-s,p-t))<=0;\n}\nbool parallel(Line a, Line b)\n{\n    return !cmp(det(a.a-a.b,b.a-b.b));\n}  \n \nbool orthogonal(Line a, Line b)\n{\n    return !cmp(dot(a.a - a.b, b.a - b.b));\n}\n\nPoint PointProjLine(Point p, Line l)\n{\n    Point ans;\n    double r = dot((l.b-l.a),(p-l.a))/dot(l.b-l.a,l.b-l.a);\n    ans = l.a + r*(l.b-l.a);\n    return ans;\n}\n\nint cmp(double x)\n{\n    if(abs(x) < EPS)\n        return 0;\n    if(x > 0)\n        return 1;\n    return -1;\n}\n\ndouble dis_point_segment(Point p, Line l)\n{\n    if(cmp(dot(p-l.a,l.b-l.a))<0)\n        return (p-l.a).norm();\n    if(cmp(dot(p-l.b,l.a-l.b))<0)\n        return (p-l.b).norm();\n    return abs(det(l.a-p,l.b-p))/dist(l.a,l.b);\n}\n\nbool line_make_point(Line a, Line b, Point &res)\n{\n    if(parallel(a,b))\n        return false;\n    double s1 = det(a.a-b.a,b.b-b.a);\n    double s2 = det(a.b-b.a,b.b-b.a);\n    res = (s1*a.b-s2*a.a)/(s1-s2);\n    return true;\n}\n\ndouble dis_segment_segment(Line a, Line b)\n{\n    Point res;\n    if(line_make_point(a, b, res) && in_segment(a, res) && in_segment(b, res))\n        return 0.;\n    return min(min(dis_point_segment(b.a, a), dis_point_segment(b.b, a)), min(dis_point_segment(a.a, b), dis_point_segment(a.b, b)));\n}\n\ndouble sqr(double x)\n{\n    return x * x;\n}\n\ndouble det(Point a, Point b)\n{\n    return a.x*b.y-a.y*b.x;\n}\n\ndouble dot(Point a, Point b)\n{\n    return a.x*b.x+a.y*b.y;\n}\n\ndouble dist(Point a, Point b)\n{\n    return (a-b).norm();\n}\n\nPoint rotate_point(Point p, double A)\n{\n    double tx = p.x, ty = p.y;\n    return Point(tx*cos(A)-ty*sin(A),tx*sin(A)+ty*cos(A));\n}\n\nPoint reflect(Line l, Point p)\n{\n    return p + ((PointProjLine(p, l) - p) * 2.0);\n}\n\nbool in_segment(Line l, Point p)\n{\n    bool fa = false, fb = false;\n    if((cmp(p.x-l.a.x) != -1 && cmp(p.x-l.b.x) != 1) || (cmp(p.x-l.a.x) != 1 && cmp(p.x-l.b.x) != -1))\n        fa = true;\n    if((cmp(p.y-l.a.y) != -1 && cmp(p.y-l.b.y) != 1) || (cmp(p.y-l.a.y) != 1 && cmp(p.y-l.b.y) != -1))\n        fb = true;\n    return fa && fb;\n}\nint dcmp(double k)\n{\n    return k < -EPS ? -1 : k > EPS ? 1 : 0;\n}\n\ndouble mysqrt(double n)\n{\n    return sqrt(max(0.0, n));\n}\n\nvoid circle_cross_line(Point a, Point b, Point o, double r, Point ret[], int &num)\n{\n    double x0 = o.x, y0 = o.y;\n    double x1 = a.x, y1 = a.y;\n    double x2 = b.x, y2 = b.y;\n    double dx = x2 - x1, dy = y2 - y1;\n    double A = dx*dx+dy*dy;\n    double B = 2*dx*(x1-x0)+2*dy*(y1-y0);\n    double C = sqr(x1-x0)+sqr(y1-y0)-sqr(r);\n    double delta = B*B-4*A*C;\n    num = 0;\n    if(dcmp(delta) >= 0)\n    {\n        double t1 = (-B - mysqrt(delta)) / (2*A);\n        double t2 = (-B + mysqrt(delta)) / (2*A);\n        ret[num++] = Point(x1 + t1*dx, y1 + t1*dy);\n        ret[num++] = Point(x1 + t2*dx, y1 + t2*dy);\n    }\n     \n}\n\nPoint rotate(Point p, double cost, double sint)\n{\n    double x = p.x, y = p.y;\n    return Point(x*cost - y*sint, x*sint + y*cost);\n}\n\npair<Point, Point> crosspoint(Point ap, double ar, Point bp, double br)\n{\n    double d = (ap - bp).norm();\n    double cost = (ar*ar + d*d - br*br) / (2*ar*d);\n    double sint = sqrt(1. - cost*cost);\n    Point v = (bp - ap) / (bp - ap).norm() * ar;\n    return make_pair(ap+rotate(v,cost,-sint),ap+rotate(v,cost,sint));\n}\n\ndouble convex_diameter(Polygon_convex a, int &First, int &Second)\n{\n\tvector<Point> &p = a.P;\n\tint n = p.size();\n\tdouble maxd = 0.0;\n\tif(n == 1)\n\t{\n\t\tFirst = Second = 0;\n\t\treturn maxd;\n\t}\n\t#define next(i) ((i+1)%n)\n\tfor(int i = 0, j = 1; i < n; ++i)\n\t{\n\t\twhile(cmp(det(p[next(i)]-p[i],p[j]-p[i])-det(p[next(i)]-p[i],p[next(j)]-p[i]))<0)\n\t\t\tj = next(j);\n\t\tdouble d = dist(p[i], p[j]);\n\t\tif(d > maxd)\n\t\t{\n\t\t\tmaxd = d;\n\t\t\tFirst = i, Second = j;\n\t\t}\n\t\td = dist(p[next(i)],p[next(j)]);\n\t\tif(d > maxd)\n\t\t{\n\t\t\tmaxd = d;\n\t\t\tFirst = i, Second = j;\n\t\t}\n\t}\n\treturn maxd;\n}\n\n\nvoid ccw(Point p0, Point p1, Point p2)\n{\n\tPoint a = p1 - p0;\n\tPoint b = p2 - p0;\n\tif(det(a, b) > EPS)\n\t\tputs(\"COUNTER_CLOCKWISE\");\n\telse if(det(a, b) < -EPS)\n\t\tputs(\"CLOCKWISE\");\n\telse if(dot(a, b) < -EPS)\n\t\tputs(\"ONLINE_BACK\");\n\telse if(a.norm() < b.norm())\n\t\tputs(\"ONLINE_FRONT\");\n\telse\n\t\tputs(\"ON_SEGMENT\");\n}\n\nint main()\n{   \n#ifdef LOCAL\n    //~ freopen(\"in.txt\", \"r\", stdin);\n#endif\n \n\tPoint a, b, c;\n\tscanf(\"%lf%lf%lf%lf\", &a.x, &a.y, &b.x, &b.y);\n\tint n;\n\tsfi(n);\n\twhile(n - 1)\n\t{\n\t\tscanf(\"%lf%lf\", &c.x, &c.y);\n\t\tccw(a, b, c);\n\t}\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define FOR(i, s, n) for(int i = s; i < (int)n; ++i)\n#define per(i, n) for(int i = n; i >= 0; i--)\n#define ROF(i, s, n) for(int i = s; i >= (int)n; i--)\n#define FORIT(i, A) for (auto i : A)\n#define PRINT(x) cout << (x) << \"\\n\"\n#define ALL(a) (a).begin(),(a).end()\n#define RALL(a) (a).rbegin(), (a).rend()\n#define MP make_pair\n#define PB push_back\n#define EACH(i, n) for (__typeof((n).begin()) i = (n).begin(); i != (n).end(); ++i)\n#define SZ(a) int((a).size())\n#define EXIST(s,e) ((s).find(e)!=(s).end())\n#define SORT(c) sort((c).begin(),(c).end())\n#define CLR(a) memset((a), 0 ,sizeof(a))\n#define NCLR(a) memset((a), -1 ,sizeof(a))\n#define sq(n) (n) * (n)\ntypedef vector<int> VI;\ntypedef vector<VI> VVI;\ntypedef vector<string> VS;\ntypedef pair<int, int> PII;\ntypedef complex<long double> P;\ntypedef long long LL;\ntypedef vector<LL> VLL;\ntypedef vector<VLL> VVLL;\ntypedef unsigned int uint;\ntypedef unsigned long long ull;\ntypedef priority_queue<int> maxpq;\ntypedef priority_queue< int, vector<int>, greater<int> > minpq;\ntypedef complex<double> Point;\nstatic const double EPS = 1e-10;\nstatic const double PI = acos( -1.0 );\nstatic const int mod = 1000000007;\nstatic const int INF = 1 << 29;\nstatic const LL LL_INF = 1ll << 60;\nstatic const int dx[] = { -1, 0, 1, 0, 1, -1, 1, -1 };\nstatic const int dy[] = { 0, -1, 0, 1, 1, 1, -1, -1 };\n\n#ifdef WIN32\n#define dump(x) cerr << #x << \" = \" << (x) << \"\\n\"\n#define debug(x) cerr << #x << \" = \" << (x) << \" (L\" << __LINE__ << \")\" << \" \" << __FILE__ << \"\\n\"\n#else\n#define dump(x)\n#define debug(x)\n#endif\n\ntemplate<class T> ostream &operator<<( ostream &os, vector<T> &v ) {\n  for ( int i = 0; i < v.size(); i++ ) {\n    if ( i ) os << \" \";\n    os << v[ i ];\n  }\n  return os;\n}\n\nlong double ClockWise(P p0, P p1, P p2)\n{\n  p1 -= p0;\n  p2 -= p0;\n  return arg( p1 ) - arg( p2 );\n}\n\nint main() {\n  ios::sync_with_stdio( false );\n  cin.tie( 0 );\n#ifdef WIN32\n  cerr << fixed;\n#endif\n  cout << fixed;\n  P p0, p1, p2;\n  long double x, y;\n  cin >> x >> y;\n  p0 = P( x, y );\n  cin >> x >> y;\n  p1 = P( x, y );\n  int n;\n  cin >> n;\n  for ( int i = 0; i < n; i++ ) {\n    cin >> x >> y;\n    p2 = P( x, y );\n    long double a = ClockWise( p0, p1, p2 );\n    if ( abs(a) < EPS )\n    {\n      if ( abs(p1) < abs(p2) )\n      {\n        PRINT( \"ONLINE_FRONT\" );\n      }\n      else {\n        PRINT( \"ON_SEGMENT\" );\n      }\n    }\n    else if ( abs(a) == acosl(-1) )\n    {\n      PRINT( \"ONLINE_BACK\" );\n    }\n    else if ( a < 0 - EPS && abs( a ) < acosl( -1 ) )\n    {\n      PRINT( \"COUNTER_CLOCKWISE\" );\n    }\n    else\n    {\n      PRINT( \"CLOCKWISE\" );\n    }\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "    #include <bits/stdc++.h>\n    using namespace std;\n    #define Int int64_t\n    #define dump(x) cout << (x) << endl\n    #define fi first\n    #define se second\n    Int mod = 1e9+7;\n    Int INF = 1e18;\n    double EPS = 0.00000001;\n    //Int mod = 1e6+3;\n\n    int main() {\n        double ax, ay, bx, by;\n        cin >> ax >> ay >> bx >> by;\n        complex<double> a(ax, ay), b(bx, by);\n        int q;\n        cin >> q;\n        for (int i = 0; i < q; i++) {\n            double px, py;\n            cin >> px >> py;\n            complex<double> p(px, py);\n            complex<double> ab = (b - a), ap = (p - a);\n            complex<double> e = ab / abs(ab);\n            ap = ap / e;\n            if (imag(ap) - EPS > 0) {\n                dump(\"COUNTER_CLOCKWISE\");\n            }\n            else if (imag(ap) + EPS < 0) {\n                dump(\"CLOCKWISE\");\n            }\n            else {\n                if (real(ap) + EPS < 0) {\n                    dump(\"ONLINE_BACK\");\n                }\n                else if (real(ap) - EPS > abs(ab)) {\n                    dump(\"ONLINE_FRONT\");\n                }\n                else {\n                    dump(\"ON_SEGMENT\");\n                }\n            }\n        }\n        return 0;\n    }\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nconst double EPS = 1e-10;\nconst double PI = acos(-1.0);\n\nint sign(double x) {  //???????????°???????°???????????¢?\n    return abs(x) < EPS ? 0 : x < 0 ? -1 : 1;\n}\n\nstruct Point { //????????????\n    double x, y;\n    Point(double x=0.0, double y=0.0) : x(x), y(y) {}\n    Point operator + (const Point &rhs) const {  //????????????\n        return Point(x + rhs.x, y + rhs.y);\n    }\n    Point operator - (const Point &rhs) const {  //????????????\n        return Point(x - rhs.x, y - rhs.y);\n    }\n    Point operator * (double p) const {  //???????????\\??????\n        return Point(x * p, y * p);\n    }\n    Point operator / (double p) const {  //???????????\\??????\n        return Point(x / p, y / p);\n    }\n    bool operator < (const Point &rhs) const {  //??????????????????\n        return x < rhs.x || (x == rhs.x && y < rhs.y);\n    }\n    bool operator == (const Point &rhs) const {  //??????????????????\n        return sign(x - rhs.x) == 0 && sign(y - rhs.y) == 0;\n    }\n    void read() {\n        scanf(\"%lf%lf\", &x, &y);\n    }\n    void print() {\n        printf(\"(%.2f, %.2f)\\n\", x, y);\n    }\n};\ntypedef Point Vector;  //???????????????\n\ndouble dot(Vector A, Vector B) {  //??????????§???????????????????????§??????????????§??????????????????????????????????????§????\n    return A.x * B.x + A.y * B.y;\n}\ndouble cross(Vector A, Vector B) {  //??????????§??????????????????????????§???¢???????????¢?§????????????????????????????????????????\n    return A.x * B.y - A.y * B.x;\n}\ndouble polar_angle(Vector A) {  //??????????§?\n    return atan2(A.y, A.x);\n}\ndouble length(Vector A) {  //???????????????????§?\n    return sqrt(dot(A, A));\n}\ndouble angle(Vector A, Vector B) {  //????????¬?§?????????¶??????????§?\n    return acos(dot(A, B)/length(A)/length(B));\n}\nVector rotate(Vector A, double rad) {  //???????????¬????????¶???\n    return Vector(A.x*cos(rad)-A.y*sin(rad), A.x*sin(rad)+A.y*cos(rad));\n    //????????´?????¬????????¶????????????????????¢??¬??????x'=xcos(theta)+ysin(theta), y'=ycos(theta)-xsin(theta)\n}\nVector normal(Vector A) {  //?????????????????????????????????A????????¶??????\n    double len = length(A);\n    return Vector(-A.y/len, A.x/len);\n}\nbool on_seg(Point p, Point a, Point b) {  //???????????¨??????????????????????????????????????????\n    return sign(cross(a-p, b-p)) == 0 && sign(dot(a-p, b-p)) < 0;  //???p????????¨??????ab???\n}\nPoint point_line_proj(Point p, Point a, Point b) {  //?????¨??´??????????????±????????????\n    Vector V = b - a;\n    return a + V * (dot (V, p-a)/dot(V, V));  //???p??°??´???ab????????±\n}\n\nint main() {\n    Point p0, p1;\n    p0.read();\n    p1.read();\n    int q; scanf(\"%d\", &q);\n    while(q --) {\n        Point p2;\n        p2.read();\n        double alpha = cross(p2-p0, p1-p0);\n        if(sign(alpha) > 0) puts(\"CLOCKWISE\");\n        else if(sign(alpha) < 0) puts(\"COUNTER_CLOCKWISE\");\n        else {\n            if(on_seg(p0, p1, p2)) puts(\"ONLINE_BACK\");\n            else if(on_seg(p2, p0, p1)) puts(\"ONLINE_FRONT\");\n            else puts(\"ON_SEGMENT\");\n            \n        }\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <algorithm>\n#include <cstdio>\n#include <vector>\n#include <queue>\n#include <set>\n#include <map>\n#include <numeric>\n#include <cmath>\n \nusing namespace std;\n \ntypedef long long int ll;\ntypedef pair<int,int> Pint;\ntypedef pair<double,double> Pdouble;\n \n#define all(x) x.begin(),x.end()\n \nconst ll mod = 1e9+7;\nconst ll INF = 1e9;\nconst ll MAXN = 1e9;\nconst double EPS = 1e-15;\n \ndouble dot(Pint p1,Pint p2){\n    return p1.first*p2.first + p1.second*p2.second;\n}\n\ndouble closs(Pint p1,Pint p2){\n    return p1.first*p2.second - p1.second*p2.first;\n}\ndouble vector_length(Pint p){\n    return pow(p.first*p.first+p.second*p.second,0.5);\n}\n \ndouble cos_(Pint p1,Pint p2){\n    return dot(p1,p2)/(vector_length(p1)*vector_length(p2));\n}\n\ndouble sin_(Pint p1,Pint p2){\n    return closs(p1,p2)/(vector_length(p1)*vector_length(p2));\n}\n \nPdouble proj(Pint p1,Pint p2,Pint a,Pint b){\n    Pint pp = Pint(p2.first-p1.first,p2.second-p1.second);\n    double ans_x = (double)p1.first + vector_length(a)*cos_(a,b)*pp.first/vector_length(pp);\n    double ans_y = (double)p1.second + vector_length(a)*cos_(a,b)*pp.second/vector_length(pp);\n\n    return Pdouble(ans_x,ans_y);\n}\n \nbool vector_equal(Pint p,Pint q){\n    return (p.first == q.first) && (p.second == q.second);\n}\n\nvoid clock_wise(Pint q0,Pint q1,Pint q2){\n    Pint q0q1 = Pint(q1.first-q0.first,q1.second-q0.second);\n    Pint q0q2 = Pint(q2.first-q0.first,q2.second-q0.second);\n\n    //printf(\"%.12f\\n\", cos_(q0q1,q0q2));\n    if(vector_equal(q0,q2) || vector_equal(q1,q2)) cout << \"ON_SEGMENT\" << endl;\n    else if(abs(cos_(q0q1,q0q2)+1)<EPS){\n        cout << \"ONLINE_BACK\" << endl;\n    }else if(abs(cos_(q0q1,q0q2)-1)<EPS){\n        //cout << \"alkhfl\" << endl;\n        if(vector_length(q0q1)<vector_length(q0q2)) cout << \"ONLINE_FRONT\" << endl;\n        else cout << \"ON_SEGMENT\" << endl;\n    }else{\n        if(sin_(q0q1,q0q2)>0) cout << \"COUNTER_CLOCKWISE\" << endl;\n        else if(sin_(q0q1,q0q2)<0) cout << \"CLOCKWISE\" << endl;\n        else{\n            if(cos_(q0q1,q0q2)<0) cout << \"ONLINE_BACK\" << endl;\n            else if(vector_length(q0q1)<vector_length(q0q2)) cout << \"ONLINE_FRONT\" << endl;\n            else cout << \"ON_SEGMENT\" << endl;\n        }\n    }\n}\n \nint main()\n{\n    Pint p0,p1;\n    cin >> p0.first >> p0.second >> p1.first >> p1.second;\n    int q;\n    cin >> q;\n    for(int i = 0; i < q; i++){\n        Pint p2;\n        cin >> p2.first >> p2.second;\n \n        if(vector_equal(p2,p1)||vector_equal(p2,p0)){\n            cout << \"ON_SEGMENT\" << endl;\n            continue;\n        }\n \n        clock_wise(p0,p1,p2);\n    }\n \n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include <cstdlib>\n#include <stack>\n#include <queue>\n#include <list>\n#include <vector>\n#include <sstream>\n\nusing namespace std;\n\nclass c_main\n{\nprivate:\n    \npublic:\n    c_main();\n    void f_input();\n};\n\nc_main::c_main()\n{\n\n}\n\nvoid c_main::f_input()\n{\n    double xp1,yp1,xp2,yp2;\n    int q;\n    int i;\n    double x[1000];\n    double y[1000];\n    double a;\n    double b;\n    double x_a;\n    double y_a;\n    double a_a;\n    double b_a;\n    int pt1;\n\n    cin >> xp1 >> yp1 >> xp2 >> yp2;\n    \n    if (xp1 == xp2){\n        x_a = xp1;\n        y_a = 0;\n        pt1 = 0;\n    }else if (yp1 == yp2){\n        x_a = 0;\n        y_a = yp1; \n        pt1 = 1;\n    }else{\n        \n        a_a = (yp2-yp1)/(xp2-xp1);\n      \n        a = -1 * (1/a_a);\n       \n        b_a = -1 * a_a * xp1+ yp1;\n        pt1 = 2;\n    }\n    \n    cin >> q;\n    \n    for ( i = 0; i < q; ++i){\n        cin >> x[i] >> y[i];\n        if (pt1 == 0){\n            if(yp1 >= yp2){\n                if(x[i] == x_a){\n                    if(y[i] > yp1){\n                        cout << \"ONLINE__BACK\" << endl;\n                    }else if(y[i] < yp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(yp2 <= y[i] && y[i] <= yp1){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(x[i] < x_a){\n                    cout << \"CLOCKWISE\" << endl;\n                }else if(x[i] > x_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n                }\n            }else{\n                if(x[i] == x_a){\n                    if(y[i] < yp1){\n                        cout << \"ONLINE_BACK\" << endl;\n                    }else if(y[i] > yp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(yp1 <= y[i] && y[i] <= yp2){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(x[i] < x_a){\n                    cout << \"CLOCKWISE\" << endl;\n                }else if(x[i] > x_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n                }\n            }\n            //printf(\"%10.10f %10.10f\\n\", x_a,y[i]);\n            \n        }else if(pt1 == 1){\n            if(xp1 >= xp2){\n                if(y[i] == y_a){\n                    if(x[i] > xp1){\n                        cout << \"ONLINE_BACK\" << endl;\n                    }else if(x[i] < xp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(xp2 <= x[i] && x[i] <= xp1){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(y[i] < y_a){\n                    cout << \"CLOCKWISE\" << endl;\n                }else if(y[i] > y_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n                }\n            }else{\n                if(y[i] == y_a){\n                    if(x[i] < xp1){\n                        cout << \"ONLINE_BACK\" << endl;\n                    }else if(x[i] > xp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(xp1 <= x[i] && x[i] <= xp2){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(y[i] < y_a){\n                    cout << \"CLOCKWISE\" << endl;\n                }else if(y[i] > y_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n                }\n            }\n            //printf(\"%10.10f %10.10f\\n\", x[i],y_a);\n        }else if(pt1 == 2){\n            b = -1 * a * x[i] + y[i];\n            x_a = (b - b_a)/(a_a - a);\n            y_a = a_a * x_a + b_a;\n            if(xp1 >= xp2){\n                if(y[i] == y_a){\n                    if(x[i] > xp1){\n                        cout << \"ONLINE_BACK\" << endl;\n                    }else if(x[i] < xp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(xp2 <= x[i] && x[i] <= xp1){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(y[i] < y_a){\n                    cout << \"CLOCKWISE\" << endl;\n                }else if(y[i] > y_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n                }\n            }else{\n                if(y[i] == y_a){\n                    if(x[i] < xp1){\n                        cout << \"ONLINE_BACK\" << endl;\n                    }else if(x[i] > xp2){\n                        cout << \"ONLINE_FRONT\" << endl;\n                    }else if(xp1 <= x[i] && x[i] <= xp2){\n                        cout << \"ON_SEGMENT\" << endl;\n                    }\n                }else if(y[i] < y_a){\n                    cout << \"CLOCKWISE\" << endl;\n                }else if(y[i] > y_a){\n                    cout << \"COUNTER_CLOCKWISE\" << endl;\n                }\n            }\n            //printf(\"%10.10f %10.10f\\n\", x_a,y_a);\n        }\n    }\n}\n\nint main(){\n    c_main main01;\n    main01.f_input();\n    \n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "////////////////////////////////////////////////////////////////////////////////\n// 平面幾何\n\n// 型変換できるもの\n//   double  -> Point\n//   Segment -> Line\n\n// 誤差の話：絶対誤差でも相対誤差でも死ぬ例\n// int main(){\n//   const double EPS = 1e-9;\n//   double a = 1.3, b = 1e8, c = a + b;\n//   c = c - b;\n//   printf(\"%d\\n\", equal(a, c));          // => 0\n//   printf(\"%d\\n\", relative_equal(a, c)); // => 0\n// }\n\n////////////////////\n// ライブラリ\n#include<cmath>\n#include<algorithm>\n#include<cassert>\n////////////////////\n// 定数\nconst double EPS = 1e-9;                // |EPS|未満の数は0として扱う\n////////////////////\n// 構造体\nstruct Point {\n  double x, y;\n  Point(const double d = 0.0) :x(d), y(d) {}\n  Point(const double x, const double y) :x(x), y(y) {}\n};\nstruct Segment {\n  Point initial, terminal;\n  Segment(const Point& initial, const Point& terminal) :initial(initial), terminal(terminal) {}\n  Segment(const double x1, const double y1, const double x2, const double y2) :initial(x1, y1), terminal(x2, y2) {}\n};\nstruct Line {\n  Point initial, terminal;\n  Line(const Point& initial, const Point& terminal) :initial(initial), terminal(terminal) {}\n  Line(const double x1, const double y1, const double x2, const double y2) :initial(x1, y1), terminal(x2, y2) {}\n  Line(const Segment& s) :initial(s.initial), terminal(s.terminal) {}\n};\n////////////////////\n// 実装\nbool relative_equal(const double d1, const double d2) {return d1 == 0 ? std::abs(d2) < EPS : std::abs((d1 - d2) / d1) < EPS;}\n// 演算子オーバーロード\nbool operator==(const Point& lhs, const Point& rhs) {return relative_equal(lhs.x, rhs.x) && relative_equal(lhs.y, rhs.y);}\nbool operator<(const Point& lhs, const Point& rhs) {return lhs.x != rhs.x ? lhs.x < rhs.x : lhs.y < rhs.y;}\nbool operator>(const Point& lhs, const Point& rhs) {return lhs.x != rhs.x ? lhs.x > rhs.x : lhs.y > rhs.y;}\nbool operator!=(const Point& lhs, const Point& rhs) {return !(lhs == rhs);}\nbool operator<=(const Point& lhs, const Point& rhs) {return !(lhs > rhs);}\nbool operator>=(const Point& lhs, const Point& rhs) {return !(lhs < rhs);}\nconst Point operator+(const Point& lhs, const Point& rhs) {return Point(lhs.x + rhs.x, lhs.y + rhs.y);}\nconst Point operator-(const Point& lhs, const Point& rhs) {return Point(lhs.x - rhs.x, lhs.y - rhs.y);}\nconst Point operator*(const Point& lhs, const Point& rhs) {return Point(lhs.x * rhs.x, lhs.y * rhs.y);}\nconst Point operator/(const Point& lhs, const Point& rhs) {return Point(lhs.x / rhs.x, lhs.y / rhs.y);}\nconst Point operator-(const Point& p) {return Point(-p.x, -p.y);}\n// 点\ndouble abs(const Point& p) {return std::hypot(p.x, p.y);}\ndouble norm(const Point& p) {return p.x * p.x + p.y * p.y;}\ndouble dot(const Point& a, const Point& b) {return a.x * b.x + a.y * b.y;}\ndouble cross(const Point& a, const Point& b) {return a.x * b.y - a.y * b.x;}\n// const Point normalize(const Point& p) {return p / abs(p);}\n// 線\nbool parallel(const Line& l1, const Line& l2) {return std::abs(cross(l2.terminal - l2.initial, l1.terminal - l1.initial)) < EPS;}\nbool orthogonal(const Line& l1, const Line& l2) {return std::abs(dot(l2.terminal - l2.initial, l1.terminal - l1.initial)) < EPS;}\n// 点の位置関係\nenum POSITION {ONLINE_FRONT = -2, CLOCKWISE, ON_SEGMENT, COUNTER_CLOCKWISE, ONLINE_BACK}; \nPOSITION ccw(const Point& a, const Point& b, const Point& p) {\n  Point v1 = b - a;\n  Point v2 = p - a;\n  if(cross(v1, v2) >= EPS) return COUNTER_CLOCKWISE;\n  if(cross(v1, v2) <= -EPS) return CLOCKWISE;\n  if(dot(v1, v2) <= -EPS) return ONLINE_BACK;\n  if(norm(v1) < norm(v2)) return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\n// 交差判定\nbool intersect(const Point& p1, const Point& p2) {return p1 == p2;}\nbool intersect(const Point& p, const Segment& s) {return abs(p - s.initial) + abs(p - s.terminal) - abs(s.initial - s.terminal) <= EPS;}\nbool intersect(const Segment& s, const Point& p) {return intersect(p, s);}\nbool intersect(const Point& p, const Line& l) {return !parallel(Line(p, l.initial), Line(p, l.terminal));}\nbool intersect(const Line& l, const Point& p) {return intersect(p, l);}\nbool intersect(const Segment& s1, const Segment& s2) {\n  return ccw(s1.initial, s1.terminal, s2.initial) * ccw(s1.initial, s1.terminal, s2.terminal) <= 0\n      && ccw(s2.initial, s2.terminal, s1.initial) * ccw(s2.initial, s2.terminal, s1.terminal) <= 0;\n}\nbool intersect(const Segment& s, const Line& l) {\n  auto v1 = l.terminal - l.initial;\n  auto v2 = s.initial  - l.initial;\n  auto v3 = s.terminal - l.initial;\n  return cross(v1, v2) * cross(v1, v3) <= EPS;\n}\nbool intersect(const Line& l, const Segment& s) {return intersect(s, l);}\nbool intersect(const Line& l1, const Line& l2) {return !parallel(l1, l2) || intersect(l1.initial, l2);}\n// 点の移動\nPoint projection(const Point& p, const Line& l) {\n  auto v = l.initial - l.terminal;\n  return l.initial + dot(p - l.initial, v) / norm(v) * v;\n}\nPoint projection(const Line& l, const Point& p) {return projection(p, l);}\nPoint reflection(const Point& p, const Line& l) {return p + 2 * (projection(p, l) - p);}\nPoint reflection(const Line& l, const Point& p) {return reflection(p, l);}\n// 距離\ndouble distance(const Point& p1, const Point& p2) {\n  auto p = p1 - p2;\n  return hypot(p.x, p.y);\n}\ndouble distance(const Point& p, const Segment& s) {\n  auto r = projection(s, p);\n  return intersect(r, s) ? distance(p, r) : std::min(distance(p, s.initial), distance(p, s.terminal));\n}\ndouble distance(const Segment& s, const Point& p) {return distance(p, s);}\ndouble distance(const Point& p, const Line& l) {return distance(p, projection(p, l));}\ndouble distance(const Line& l, const Point& p) {return distance(p, l);}\ndouble distance(const Segment& s1, const Segment& s2) {\n  return intersect(s1, s2) ? 0.0 : std::min({distance(s1, s2.initial), distance(s1, s2.terminal), distance(s2, s1.initial), distance(s2, s1.terminal)});\n}\ndouble distance(const Segment& s, const Line& l) {return intersect(s, l) ? 0.0 : std::min(distance(s.initial, l), distance(s.terminal, l));}\ndouble distance(const Line& l,const Segment& s) {return distance(s, l);}\ndouble distance(const Line& l1, const Line& l2) {return intersect(l1, l2) ? 0.0 : distance(l1.initial, l2);}\n// 交点\nconst Point crosspoint(const Line& l1, const Line& l2) {\n  assert(intersect(l1, l2));\n  if(parallel(l1, l2)) return l1.initial;                   // 平行なときl1の始点を返す\n  double A = cross(l1.terminal - l1.initial, l2.terminal - l2.initial);\n  double B = cross(l1.terminal - l1.initial, l1.terminal - l2.initial);\n  return l2.initial + B / A * (l2.terminal - l2.initial);\n}\nconst Point crosspoint(const Segment& s, const Line& l) {\n  assert(intersect(s, l));\n  if(parallel(s, l)) return s.initial;\n  Point cp = crosspoint(Line(s), l);\n  assert(intersect(s, cp));\n  return cp;\n}\nconst Point crosspoint(const Line& l, const Segment& s) {return crosspoint(s, l);}\nconst Point crosspoint(const Segment& s1, const Segment& s2) {\n  assert(intersect(s1, s2));\n  if(parallel(s1, s2)) {                                    // 平行なときいずれかの端点を返す\n    if(intersect(s1.initial,  s2)) return s1.initial;\n    if(intersect(s1.terminal, s2)) return s1.terminal;\n    if(intersect(s2.initial,  s1)) return s2.initial;\n    if(intersect(s2.terminal, s1)) return s2.terminal;\n  }\n  return crosspoint(Line(s1), Line(s2));\n}\n// デバッグ用\n#include<bits/stdc++.h>\nusing namespace std;\nvoid print(const Point& p) {cout<<\"point: \"; cout<<\"(\"<<p.x<<\",\"<<p.y<<\")\";}\nvoid print(const Segment& l) {cout<<\"segment: \"; print(l.initial); cout<<\" - \";print(l.terminal);}\nvoid print(const Line& l) {cout<<\"line: \"; print(l.initial); cout<<\" - \";print(l.terminal);}\n////////////////////////////////////////////////////////////////////////////////\n// 多角形\n//   辺をメンバ変数にしない→メモリ節約・edge(void)がO(頂点数)。edge().begin()を使っている箇所は書き換える必要がある\n#include<vector>\n#include<algorithm>\n#include<numeric>\n#include<utility>\nclass Polygon {\npublic:\n  // 編集\n  void add(const Point& p) {\n    if(!vertex_.empty()) {\n      if(!edge_.empty()) edge_.pop_back();\n      edge_.push_back(Segment(vertex_.back(), p));\n      edge_.push_back(Segment(p, vertex_.front()));\n    }\n    vertex_.push_back(p);\n  }\n  void clear() {\n    vertex_.clear();\n    edge_.clear();\n  };\n  // 情報\n  int size() const {return vertex_.size();}\n  Point vertex(const int n) const {return vertex_.at(n);}\n  Segment edge(const int n) const {return edge_.at(n);}\n  const std::vector<Point>& vertex() const {return vertex_;}\n  const std::vector<Segment>& edge() const {return edge_;}\n  // 道具\n  bool touch(const Point& p) const {\n    return std::any_of(edge().begin(), edge().end(), [=](const Segment& s) {return ccw(s.initial, s.terminal, p) == ON_SEGMENT;});\n  }\n  bool intersect(const Point& p) const {\n    bool in = false;                    // p=(x,y)から(INF,y)への半直線と多角形とが交差する回数 mod 2\n    for(const auto& e: edge()) {\n      if(::intersect(p, e)) return true;\n      Point a = e.initial  - p;\n      Point b = e.terminal - p;\n      if(a.y > b.y) std::swap(a, b);\n      if(a.y <= EPS && -EPS < b.y && cross(a, b) < EPS) in = !in;\n    }\n    return in;\n  }\n  double area() const {\n    return std::abs(std::accumulate(edge().begin(), edge().end(), 0, [=](const int sum, const Segment& e){return sum + cross(e.initial, e.terminal);})) / 2.0;\n  }\n  bool convex() const {\n    bool positive = false;\n    bool negative = false;\n    for(int i = 0; i < size(); ++i) {\n      auto position = ccw(vertex(i), vertex((i + 1) % size()), vertex((i + 2) % size()));\n      positive |= position == CLOCKWISE;\n      negative |= position == COUNTER_CLOCKWISE;\n      if(negative && positive) return false;\n    }\n    return true;\n  }\nprivate:\n  std::vector<Point> vertex_;\n  std::vector<Segment> edge_;\n};\n////////////////////////////////////////////////////////////////////////////////\n#include<bits/stdc++.h>\nusing namespace std;\nint main() {\n  // Points/Vectors\n  // C\n  int a, b, c, d;\n  cin >> a >> b >> c >> d;\n  Segment s(Point(a, b), Point(c, d));\n  int q;\n  for(cin >> q; q > 0; --q) {\n    int x, y;\n    cin >> x >> y;\n    switch(ccw(s.initial, s.terminal, Point(x, y))) {\n    case COUNTER_CLOCKWISE:\n      cout << \"COUNTER_CLOCKWISE\" << endl;\n      break;\n    case CLOCKWISE:\n      cout << \"CLOCKWISE\" << endl;\n      break;\n    case ONLINE_BACK:\n      cout << \"ONLINE_BACK\" << endl;\n      break;\n    case ONLINE_FRONT:\n      cout << \"ONLINE_FRONT\" << endl;\n      break;\n    case ON_SEGMENT:\n      cout << \"ON_SEGMENT\" << endl;\n      break;\n    }\n  }\n\n  // Segments/Lines\n//   int n;\n//   for(cin >> n; n > 0; --n) {\n//     int a, b, c, d, e, f, g, h;\n//     cin >> a >> b >> c >> d >> e >> f >> g >> h;\n//     Segment s(Point(a, b), Point(c, d));\n//     Segment t(Point(e, f), Point(g, h));\n//     // A\n// //     cout << (parallel(s, t) ? 2 : (orthogonal(s, t) ? 1 : 0)) << endl;\n//     // B\n// //     cout << (intersect(s, t) ? 1 : 0) << endl;\n//     // C\n// //     auto cp = crosspoint(s, t);\n// //     cout << setprecision(10) << fixed << cp.x << \" \" << cp.y << endl;\n//     // D\n// //     cout << setprecision(10) << fixed << distance(s, t) << endl;\n//   }\n\n  // Polygon\n//   int n;\n//   Polygon polygon;\n//   for(cin >> n; n > 0; --n) {\n//     int x, y;\n//     cin >> x >> y;\n//     polygon.add(Point(x, y));\n//   }\n//   // A\n// //   cout << setprecision(1) << fixed  << polygon.area() << endl;\n//   // B\n// //   cout << (polygon.convex() ? 1 : 0) << endl;\n//   // C\n//   int q;\n//   for(cin >> q; q > 0; --q) {\n//     int x, y;\n//     cin >> x >> y;\n//     Point p(x, y);\n//     cout << (polygon.touch(p) ? 1 : (polygon.intersect(p) ? 2 : 0)) << endl;\n//   }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <array>\n#include <vector>\n#include <cmath>\n\nconst double EPSILON = 1e-10;\n\ninline bool equals(double a, double b) {\n    return std::fabs(a - b) < EPSILON;\n}\n\nstruct Point {\n    double x;\n    double y;\n\n    bool operator < (const Point& p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point& p) const {\n        return equals(x, p.x) && equals(y, p.y);\n    }\n};\n\nPoint operator + (const Point& p1, const Point& p2) {\n    return Point{p1.x + p2.x, p1.y + p2.y};\n}\n\nPoint operator - (const Point& p1, const Point& p2) {\n    return Point{p1.x - p2.x, p1.y - p2.y};\n}\n\nPoint operator * (const Point& p1, double k) {\n    return Point{p1.x * k, p1.y * k};\n}\n\nstruct Segment {\n    Point p1, p2;\n};\n\nstruct Circle {\n    Point center;\n    double radius;\n};\n\nusing Vector = Point;\nusing Line = Segment;\nusing Polygon = std::vector<Point>;\n\n\ndouble norm(const Vector& p) {\n    return p.x * p.x + p.y + p.y;\n}\n\ndouble abs(const Vector& p) {\n    return std::sqrt(norm(p));\n}\n\ndouble dot(const Vector& a, const Vector& b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(const Vector& a, const Vector& b) {\n    return a.x * b.y - a.y * b.x;\n}\n\n\nVector projection(const Segment& s, const Point& p) {\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / norm(base);\n    return s.p1 + base * r;\n}\n\nVector reflection(const Segment& s, const Point& p) {\n    auto proj = projection(s, p);\n    return p + (projection(s, p) - p) * 2.0;\n}\n\nbool is_orthogonal(const Vector& a, const Vector& b) {\n    return equals(dot(a, b), 0.0);\n}\n\nbool is_orthogonal(const Segment& s1, const Segment& s2) {\n    return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nbool is_parallel(const Vector& a, const Vector& b) {\n    return equals(cross(a, b), 0.0);\n}\n\nbool is_parallel(const Segment& s1, const Segment& s2) {\n    return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nenum {\n    COUNTER_CLOCKWISE = 1,\n    CLOCKWISE = -1,\n    ONLINE_BACK = 2,\n    ONLINE_FRONT = -2,\n    ON_SEGMENT = 0,\n};\n\nint ccw(const Point& p0, const Point& p1, const Point& p2) {\n    auto a = p1 - p0;\n    auto b = p2 - p0;\n    if (cross(a, b) > EPSILON) return COUNTER_CLOCKWISE;\n    if (cross(a, b) < -EPSILON) return CLOCKWISE;\n    if (dot(a, b) < -EPSILON) return ONLINE_BACK;\n    if (norm(a) < norm(b)) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\nbool intersect(const Point& p1, const Point& p2, const Point& p3, const Point& p4) {\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n            ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\n\nbool intersect(const Segment& s1, const Segment& s2) {\n    return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\ndouble distance(const Point& a, const Point& b) {\n    return abs(a - b);\n}\n\ndouble distanceLP(const Line& l, const Point& p) {\n    return abs(cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1));\n}\n\ndouble distanceSP(const Segment& s, const Point& p) {\n    if (dot(s.p2 - s.p1, p - s.p1) < 0.0) return abs(p - s.p1);\n    if (dot(s.p1 - s.p2, p - s.p2) < 0.0) return abs(p - s.p2);\n    return distanceLP(s, p);\n}\n\ndouble distance(const Segment& s1, const Segment& s2) {\n    using std::min;\n    if (intersect(s1, s2)) return 0.0;\n    return min(min(distanceSP(s1, s2.p1), distanceSP(s1, s2.p2)),\n               min(distanceSP(s2, s1.p1), distanceSP(s2, s1.p2)));\n}\n\n\nint main() {\n    using namespace std;\n\n    array<Point, 3> points;\n    for (int i = 0; i < 2; ++i) {\n        cin >> points[i].x >> points[i].y;\n    }\n    int q;\n    cin >> q;\n    for (int i = 0; i < q; ++i) {\n        cin >> points[2].x >> points[2].y;\n        switch (ccw(points[0], points[1], points[2])) {\n        case COUNTER_CLOCKWISE:\n            cout << \"COUNTER_CLOCKWISE\";\n            break;\n        case CLOCKWISE:\n            cout << \"CLOCKWISE\";\n            break;\n        case ONLINE_BACK:\n            cout << \"ONLINE_BACK\";\n            break;\n        case ONLINE_FRONT:\n            cout << \"ONLINE_FRONT\";\n            break;\n        case ON_SEGMENT:\n            cout << \"ON_SEGMENT\";\n            break;\n        }\n        cout << endl;\n    }\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define syosu(x) fixed<<setprecision(x)\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int,int> P;\ntypedef pair<double,double> pdd;\ntypedef pair<ll,ll> pll;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef vector<double> vd;\ntypedef vector<vd> vvd;\ntypedef vector<ll> vl;\ntypedef vector<vl> vvl;\ntypedef vector<string> vs;\ntypedef vector<P> vp;\ntypedef vector<vp> vvp;\ntypedef vector<pll> vpll;\ntypedef pair<P,int> pip;\ntypedef vector<pip> vip;\nconst int inf=1<<30;\nconst ll INF=1ll<<60;\nconst double pi=acos(-1);\nconst double eps=1e-8;\nconst ll mod=1e9+7;\nconst int dx[4]={-1,0,1,0},dy[4]={0,-1,0,1};\n\ntypedef complex<double> C;\ntypedef pair<C,C> pp;\ntypedef vector<C> VP;\n#define eq(a,b) (fabs(a-b)<eps)\n#define veq(a,b) (eq(a.real(),b.real())&&eq(a.imag(),b.imag()))\nconst C O{0,0};\n\nvoid In(C& p){\n\tdouble x,y;\n\tcin>>x>>y;\n\tp=C(x,y);\n}\n\nvoid Out(C p){\n\tcout<<p.real()<<' '<<p.imag()<<endl;\n}\n\ndouble Dot(C p,C q){\n\treturn p.real()*q.real()+p.imag()*q.imag();\n}\n\ndouble Det(C p,C q){\n\treturn p.real()*q.imag()-q.real()*p.imag();\n}\n\nC Normal(C p){\n\treturn C(p.imag(),-p.real());\n}\n\nbool Comp(C p,C q){\n\tif(eq(p.real(),q.real())) return p.imag()<q.imag();\n\treturn p.real()<q.real();\n}\n\nint Clock(C a,C b,C c){\n\tdouble t=Det(b-a,c-a);\n\tif(t>eps) return 1;\n\tif(t<-eps) return -1;\n\tif(Dot(b-a,c-a)<-eps) return 2;\n\tif(Dot(a-b,c-b)<-eps) return -2;\n\treturn 0;\n}\n\nbool is_Orthgonal(C a,C b,C c,C d){\n\treturn eq(Dot(a-b,c-d),0);\n}\n\nbool is_Parallel(C a,C b,C c,C d){\n\treturn eq(Det(a-b,c-d),0);\n}\n\nbool is_Cross(C a,C b,C c,C d){\n\tif(is_Parallel(a,b,c,d)){\n\t\tif(Clock(a,b,c)==0||Clock(a,b,d)==0) return 1;\n\t\treturn 0;\n\t}\n\tC A=b-a,B=d-c;\n\treturn 1;\n}\n\nint n;\n\nint main(){\n\tC p,q;\n\tIn(p);In(q);\n\tcin>>n;\n\tfor(int i=0;i<n;i++){\n\t\tC a;\n\t\tIn(a);\n\t\tint t=Clock(p,q,a);\n\t\tif(t==1) cout<<\"COUNTER_CLOCKWISE\"<<endl;\n\t\tif(t==-1) cout<<\"CLOCKWISE\"<<endl;\n\t\tif(t==2) cout<<\"ONLINE_BACK\"<<endl;\n\t\tif(t==-2) cout<<\"ONLINE_FRONT\"<<endl;\n\t\tif(t==0) cout<<\"ON_SEGMENT\"<<endl;\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <complex>\nusing namespace std;\n\nusing vec = complex<double>;\nusing line = pair<vec,vec>;\nconst double eps = 0.0000001;\n\ndouble inner_product(vec u,vec v){\n    return real(u*conj(v));\n}\ndouble cross_product(vec u,vec v){\n    return imag(conj(u)*v);\n}\n\ndouble norm(vec& u){\n    return abs(u);\n}\n\nvec projection(line l,vec p){//p???l???????°???±\n    vec s=l.first, t=l.second;\n    double k = inner_product(t-s,p-s)/inner_product(t-s,t-s);\n    return (1.0-k)*s+k*t;\n}\n\nvec reflection(line l,vec p){\n    return 2.0*projection(l,p)-p;\n}\n\nint ccw(vec& a, vec& b, vec& c){\n    vec ab = b-a, ac = c-a;\n    double o = cross_product(ab,ac);\n    if(o>0) return 1; //CCW\n    if(o<0) return -1; //CW\n    if(inner_product(ab,ac)<0){\n        return 2; //C-A-B\n    }else{\n        if(inner_product(ab,ab)<inner_product(ac,ac)){\n            return -2; //A-B-C\n        }else{\n            return 0; //A-C-B\n        }\n    }\n}\n\nint main(void){\n    double x,y;\n    cin >> x >> y;\n    vec p0(x,y);\n    cin >> x >> y;\n    vec p1(x,y);\n    int q;\n    cin >> q;\n    for(int i=0;i<q;i++){\n        cin>>x>>y;\n        vec p2(x,y);\n        switch(ccw(p0,p1,p2)){\n            case 1:\n                cout << \"COUNTER_CLOCKWISE\" << endl;\n                break;\n            case -1:\n                cout << \"CLOCKWISE\" << endl;\n                break;\n            case 2:\n                cout << \"ONLINE_BACK\" << endl;\n                break;\n            case -2:\n                cout << \"ONLINE_FRONT\" << endl;\n                break;\n            case 0:\n                cout << \"ON_SEGMENT\" << endl;\n                break;\n            default:\n                ;\n        }\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nstruct point{\n\tint x,y;\n\tpoint operator - (const point p){\n\t\tpoint pp;\n\t\tpp.x=x-p.x;\n\t\tpp.y=y-p.y;\n\t\treturn pp;\n\t}\n}p0,p1,p2;\ndouble waiji(point p1,point p2){\n\treturn p1.x*p2.y-p1.y*p2.x;\n}\ndouble neiji(point p1,point p2){\n\treturn p1.x*p2.x+p1.y*p2.y;\n}\nvoid solve(){\n\tdouble xc=waiji(p1-p0,p2-p0);\t\n\tif(xc>0){cout<<\"COUNTER_CLOCKWISE\"<<endl;return;}\n\tif(xc<0){cout<<\"CLOCKWISE\"<<endl;return;}\n\tif(neiji(p1-p0,p2-p0)<0){cout<<\"ONLINE_BACK\"<<endl;return;}\n\tif(abs(p1.x-p0.x)<abs(p2.x-p0.x)||abs(p1.y-p0.y)<abs(p2.y-p0.y)){cout<<\"ONLINE_FRONT\"<<endl;return;}\n\tcout<<\"ON_SEGMENT\"<<endl;\n}\nint main(){\n\tcin>>p0.x>>p0.y;\n\tcin>>p1.x>>p1.y;\n\tint T; cin>>T;\n\twhile(T--){\n\t\tcin>>p2.x>>p2.y;\n\t\tsolve();\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\nusing namespace std;\n\nint main()\n{\n\tint p0x = 0, p0y = 0, p1x = 0, p1y = 0, q = 0, px = 0, py = 0;\n\tint a = 0, b = 0;\n\tlong long y = 0;\n\tdouble t = 0;\n\n\tcin >> p0x >> p0y >> p1x >> p1y;\n\tcin >> q;\n\n\ta = p1x - p0x;\n\tb = p1y - p0y;\n\n\tfor (int i = 0; i < q; i++) {\n\t\tcin >> px >> py;\n\n\t\ty = -b * px + a * py;\n\n\t\tif(y > 0)\n\t\t\tcout << \"COUNTER_CLOCKWISE\" << endl;\n\t\telse if(y < 0)\n\t\t\tcout << \"CLOCKWISE\" << endl;\n\t\telse {\n\t\t\tif (a != 0)\n\t\t\t\tt = (double)(px - p0x) / (double)a;\n\t\t\telse\n\t\t\t\tt = (double)(py - p0y) / (double)b;\n\t\t\t\t\n\t\t\tif (t < 0)\n\t\t\t\tcout << \"ONLINE_BACK\" << endl;\n\t\t\telse if (t > 1)\n\t\t\t\tcout << \"ONLINE_FRONT\" << endl;\n\t\t\telse\n\t\t\t\tcout << \"ON_SEGMENT\" << endl;\n\t\t}\n\t}\n\t\t\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint main() {\n\t\n\tint p0x,p0y,p1x,p1y,q;\n\tcin>>p0x>>p0y>>p1x>>p1y>>q;\n\t\n\tfor(int i=0;i<q;++i){\n\t\tint x,y;\n\t\tcin>>x>>y;\n\t\t\n\t\tint crossp = (p1x-p0x) * (y-p0y) - (p1y-p0y) * (x-p0x);\n\t\tint dotp = (p1x-p0x) * (x-p0x) + (p1y-p0y) * (y-p0y);\n\t\t\n\t\tif(crossp>0)cout<<\"COUNTER_CLOCKWISE\"<<endl;\n\t\telse if(crossp<0)cout<<\"CLOCKWISE\"<<endl;\n\t\telse{\n\t\t\tif(dotp<0)cout<<\"ONLINE_BACK\"<<endl;\n\t\t\telse if( abs(p1x-p0x) >= abs(x-p0x) && abs(p1y-p0y) >= abs(y-p0y) )cout<<\"ON_SEGMENT\"<<endl;\n\t\t\telse cout<<\"ONLINE_FRONT\"<<endl;\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cmath>\n#include<iomanip>\nusing namespace std;\nstruct Point{\n    double x,y;\n    Point(){}\n    Point(double x,double y):x(x),y(y){}\n};\ntypedef Point Vector;\nVector operator + (Vector A,Vector B){\n    return Vector(A.x+B.x,A.y+B.y);\n}\nVector operator - (Vector A,Vector B){\n    return Vector(A.x-B.x,A.y-B.y);\n}\nVector operator * (Vector A,double p){\n    return Vector(A.x*p,A.y*p);\n}\nVector operator / (Vector A,double p){\n    return Vector(A.x/p,A.y/p);\n}\nbool operator < (const Point& a,const Point& b){\n    return a.x<b.x||(a.x==b.x&&a.y<b.y);\n}\nconst double eps = 1e-10;\nint dcmp(double x){\n    if(fabs(x)<eps) return 0; else return (x<0?-1:1);\n}\nbool operator == (const Point& a,const Point& b){\n    return dcmp(a.x-b.x)==0 && dcmp(a.y-b.y)==0;\n}\n//点积\ndouble Dot(Vector A,Vector B){\n    return A.x*B.x+A.y*B.y;\n}\ndouble Length(Vector A){\n    return sqrt(Dot(A,A));\n}\ndouble Angle(Vector A,Vector B){\n    return acos(Dot(A,B)/Length(A)/Length(B));\n}\n \n//叉积\ndouble Cross(Vector A,Vector B){\n    return (A.x*B.y-A.y*B.x);\n}\n//三角形面积的二倍的叉乘公式\ndouble Area2(Point A,Point B,Point C){\n    return Cross(B-A,C-A);\n}\n//向量旋转,rad是弧度\nVector Rotate(Vector A,double rad){\n    return Vector(A.x*cos(rad)-A.y*sin(rad),A.x*sin(rad)+A.y*cos(rad));\n}\n//计算向量的单位法线,先逆时针旋转90度，然后把长度归一化\nVector Normal(Vector A){\n    double Len=Length(A);\n    return Vector(-A.y/Len,A.x/Len);\n}\n//求两直线交点\n//调用前请确保P+tv和Q+tw有唯一交点，当且仅当Cross(v,w)非0\nPoint GetLineIntersection(Point P,Vector v,Point Q,Vector w){\n    Vector u=P-Q;\n    double t=Cross(w,u)/Cross(v,w);\n    return P+v*t;\n}\n//点到直线的距离\ndouble DistanceToLine(Point P,Point A,Point B){\n    Vector v1=B-A,v2=P-A;\n    return fabs(Cross(v1,v2))/Length(v1);\n}\n//点到线段的距离\ndouble DistanceToSegment(Point P,Point A,Point B){\n    if(A==B) return Length(P-A);\n    Vector v1=B-A,v2=P-A,v3=P-B;\n    if(dcmp(Dot(v1,v2))<0) return Length(v2);\n    else if(dcmp(Dot(v1,v3))>0) return Length(v3);\n    else return fabs(Cross(v1,v2))/Length(v1);\n}\n//点在直线上的投影\nPoint GetLineProjection(Point P,Point A,Point B){\n    Vector v=B-A;\n    return A+v*(Dot(v,P-A)/Dot(v,v));\n}\nPoint GetLineReflection(Point P,Point A,Point B){\n    return GetLineProjection(P,A,B)*2-P;\n}\nint main(){\n    Point A,B;\n    cin>>A.x>>A.y>>B.x>>B.y;\n    int t;\n    cin>>t;\n    while(t--){\n        Point P;\n        cin>>P.x>>P.y;\n        double cro=Cross(B-A,P-A);\n        double dot=Dot(B-A,P-A);\n        double dot2=Dot(A-B,P-B);\n        if(dcmp(cro)<0){\n            cout<<\"CLOCKWISE\";\n        }else if(dcmp(cro)>0){\n            cout<<\"COUNTER_CLOCKWISE\";\n        }else{\n            if(dcmp(dot)<0){\n                cout<<\"ONLINE_BACK\";\n            }else{\n                if(dcmp(dot2)<0){\n                    cout<<\"ONLINE_FRONT\";\n                }else{\n                    cout<<\"ON_SEGMENT\";\n                }\n            }\n        }\n        cout<<\"\\n\";\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <cmath>\n\nusing namespace std;\n\nstruct Vec2;\n\ndouble SqrMagnitude(const Vec2& v);\n\ndouble Magnitude(const Vec2& v);\n\ndouble Dot(const Vec2& v1, const Vec2& v2);\n\n\nstruct Vec2 {\n    double x, y;\n    Vec2() = default;\n    Vec2(double in_x, double in_y)\n        : x {in_x}, y {in_y} {};\n    Vec2(const Vec2&) = default;\n    Vec2(Vec2&&) = default;\n\n    Vec2 normalized() const{\n        double mag = Magnitude(*this);\n        return {x / mag, y / mag};\n    }\n\n    Vec2 normalize() {\n        double mag = Magnitude(*this);\n        return {x /= mag, y /= mag};\n    }\n\n    Vec2 operator-() {\n        return {-x, -y};\n    }\n\n    Vec2 operator+(const Vec2& rhs) const{\n        return {x + rhs.x, y + rhs.y};\n    }\n\n    Vec2 operator-(const Vec2& rhs) const{\n        return {x - rhs.x, y - rhs.y};\n    }\n\n    Vec2 operator*(double rhs) const{\n        return {x * rhs, y * rhs};\n    }\n\n    Vec2 operator/(double rhs) const{\n        return {x / rhs, y / rhs};\n    }\n\n    Vec2& operator+=(const Vec2& rhs) {\n        x += rhs.x;\n        y += rhs.y;\n        return *this;\n    }\n\n    Vec2& operator-=(const Vec2& rhs) {\n        x -= rhs.x;\n        y -= rhs.y;\n        return *this;\n    }\n\n    Vec2& operator*=(double rhs) {\n        x *= rhs;\n        y *= rhs;\n        return *this;\n    }\n\n    Vec2& operator/=(double rhs) {\n        x /= rhs;\n        y /= rhs;\n        return *this;\n    }\n};\n\ninline Vec2 operator*(double s, const Vec2& v) {\n    return {s * v.x, s * v.y};\n}\n\n\n\ninline double SqrMagnitude(const Vec2& v) {\n    return Dot(v, v);\n}\n\ninline double Magnitude(const Vec2& v) {\n    return sqrt(SqrMagnitude(v));\n}\n\ninline double Dot(const Vec2& v1, const Vec2& v2) {\n    return v1.x * v2.x + v1.y * v2.y;\n}\n\ninline double Cross(const Vec2& v1, const Vec2& v2) {\n    return v1.x * v2.y - v1.y *v2.x;\n}\n\nint main() {\n    constexpr double tolerance = 0.00001f;\n\n    Vec2 p0, p1, p2;\n\n    cin >> p0.x >> p0.y >> p1.x >> p1.y;\n\n    int n;\n    cin >> n;\n\n    auto p_01 = p1 - p0;\n\n    for(int i = 0; i < n && cin >> p2.x >> p2.y; ++i) {\n        auto p_02 = p2 - p0;        \n\n        auto cross = Cross(p_01, p_02);\n\n        if(cross > tolerance) {\n            cout << \"COUNTER_CLOCKWISE\" << endl;\n        }\n        else if(cross < -tolerance){\n            cout << \"CLOCKWISE\" << endl;\n        }\n        else {\n            double normalizedDot {Dot(p_01.normalized(), p_02)};\n            if(normalizedDot >= 0.0) {\n                cout << (normalizedDot > Magnitude(p_01) ? \"ONLINE_FRONT\" : \"ON_SEGMENT\") << endl;\n            }\n            else {\n                cout << \"ONLINE_BACK\" << endl;\n            }\n            \n        }\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\nconst double EPS = 1e-9;    // 許容誤差。問題によって変える\ntypedef complex<double> P;  // Point\n#define X real()\n#define Y imag()\nnamespace std{\n    bool operator < (const P a, const P b){\n        return a.X != b.X ? a.X <b.X : a.Y < b.Y;\n    }\n    P operator+(const P p1, const P p2) { return P(p1.X + p2.X, p1.Y + p2.Y); }\n    P operator-(const P p1, const P p2) { return P(p1.X - p2.X, p1.Y - p2.Y); }\n    P operator*(const P p, double k) { return P(p.X * k, p.Y * k); }\n    P operator/(const P p, double k) { return P(p.X / k, p.Y / k); }\n}\n//外積cross(a,b) = |a||b|sinθ=a1b2+a2b1\ndouble cross(const P& a, const P& b) {\n  return (conj(a)*b).Y;\n}\n//内積dot(a,b) = |a||b|cosθ=a1b1+a2b2\ndouble dot(const P& a, const P& b) {\n  return (conj(a)*b).X;\n}\n\n//位置関係判定(線分abを軸にcがどちら側にあるか)\nint ccw(P a, P b, P c){\n    b -= a;\n    c -= a; //aからの向きを考える\n    if (cross(b, c) > EPS)\n        return +1; //clockwise\n    else if (cross(b, c) < -EPS)\n        return -1; //counter clockwise\n    else if (dot(b, c) < -EPS)\n        return +2; //c-a-b\n    else if (norm(b) < norm(c))\n        return -2; //a-b-c\n    else return 0;    //他\n}\n\nint main(){\n    double x0,y0,x1,y1;\n    cin>>x0>>y0>>x1>>y1;\n    P p0 = P(x0, y0), p1 = P(x1, y1);\n    int q;\n    cin >> q;\n    for (int i = 0; i < q;i++){\n        double x2,y2;\n        cin>>x2>>y2;\n        int pos=ccw(p0,p1,P(x2,y2));\n        if(pos==-1) cout << \"CLOCKWISE\" << endl;\n        else if(pos==1) cout << \"COUNTER_CLOCKWISE\" << endl;\n        else if(pos==2) cout << \"ONLINE_BACK\" << endl;\n        else if(pos==-2) cout << \"ONLINE_FRONT\" << endl;\n        else  cout << \"ON_SEGMENT\" << endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "Haskell",
    "code": "inner_product (ax,ay) (bx,by) = ax * bx + ay * by\nvabs (ax,ay) = sqrt (ax*ax+ay*ay)\nvmul a (ax,ay) = (a*ax,a*ay)\nvadd (ax,ay) (bx,by) = (ax+bx,ay+by)\nvsub (ax,ay) (bx,by) = (ax-bx,ay-by)\n\nvatan (x,y) = atan2 y x\nvnorm (x,y) = x*x+y*y\n\nfmod m v\n  | v > m = fmod m (v-m)\n  | v < 0 = fmod m (v+m)\n  | otherwise = v\n\njudge a1 t1 a2 t2\n  | a2 == 0  = \"ON_SEGMENT\"\n  | da == 0  = if a2 > a1\n               then \"ONLINE_FRONT\"\n               else \"ON_SEGMENT\"\n  | da == pi = \"ONLINE_BACK\"\n  | da <  pi = \"COUNTER_CLOCKWISE\"\n  | otherwise= \"CLOCKWISE\"\n  where\n    da = fmod (2*pi) (t2-t1)\n\nans p0 p1 p2 =\n  let v1 = p1 `vsub` p0\n      v2 = p2 `vsub` p0\n      t1 = vatan v1\n      t2 = vatan v2\n      a1 = vnorm v1\n      a2 = vnorm v2\n  in\n    judge a1 t1 a2 t2\n\nmain = do\n  l <- getLine\n  getLine\n  qs' <- getContents\n  let (p0x:p0y:p1x:p1y:_) = map read $ words l :: [Double]\n      qs = map (map read) $ map words $ lines qs' :: [[Double]]\n      o = map (\\ (p2x:p2y:_) -> ans (p0x,p0y) (p1x,p1y) (p2x,p2y) ) qs\n  mapM_ putStrLn o"
  },
  {
    "language": "Haskell",
    "code": "import Control.Applicative ((<$>))\nimport Control.Monad\nimport Data.Complex\n\ntype Vector = Complex Double\n\neps :: Double\neps = 1e-7\n\ndot :: Vector -> Vector -> Double\ndot a b = realPart $ conjugate a * b\n\ncross :: Vector -> Vector -> Double\ncross a b = imagPart $ conjugate a * b\n\nreadWords :: Read a => IO [a]\nreadWords = map read . words <$> getLine\n\nmain :: IO ()\nmain = do\n  [x1,y1,x2,y2] <- readWords :: IO [Double]\n  let\n    p0 = x1:+y1\n    p1 = x2:+y2\n\n  q <- readLn\n\n  ps <- replicateM q $ do\n    [x,y] <- readWords :: IO [Double]\n    return $ x:+y\n\n  forM_ ps $ \\p2 -> do\n    let sgn = (p1-p0)`cross`(p2-p0)\n\n    when (sgn > eps) $ putStrLn \"COUNTER_CLOCKWISE\"\n    when (sgn < -eps) $ putStrLn \"CLOCKWISE\"\n\n    when (abs sgn < eps) $ do\n      if (p1-p0)`dot`(p2-p0) < 0\n        then putStrLn \"ONLINE_BACK\"\n        else if magnitude (p2-p0) > magnitude (p1-p0)\n          then putStrLn \"ONLINE_FRONT\"\n          else putStrLn \"ON_SEGMENT\""
  },
  {
    "language": "Haskell",
    "code": "inner_product (ax,ay) (bx,by) = ax * bx + ay * by\nvabs (ax,ay) = sqrt (ax*ax+ay*ay)\nvmul a (ax,ay) = (a*ax,a*ay)\nvadd (ax,ay) (bx,by) = (ax+bx,ay+by)\nvsub (ax,ay) (bx,by) = (ax-bx,ay-by)\n\nvatan (x,y) = atan2 y x\nvnorm (x,y) = x*x+y*y\n\nfmod m v\n  | v > m = fmod m (v-m)\n  | v < 0 = fmod m (v+m)\n  | otherwise = v\n\njudge a1 t1 a2 t2\n  | da == 0  = if a2 > a1\n               then \"ONLINE_FRONT\"\n               else \"ON_SEGMENT\"\n  | da == pi = \"ONLINE_BACK\"\n  | da <  pi = \"COUNTER_CLOCKWISE\"\n  | otherwise= \"CLOCKWISE\"\n  where\n    da = fmod (2*pi) (t2-t1)\n\nans p0 p1 p2 =\n  let v1 = p1 `vsub` p0\n      v2 = p2 `vsub` p0\n      t1 = vatan v1\n      t2 = vatan v2\n      a1 = vnorm v1\n      a2 = vnorm v2\n  in\n    judge a1 t1 a2 t2\n\nmain = do\n  l <- getLine\n  getLine\n  qs' <- getContents\n  let (p0x:p0y:p1x:p1y:_) = map read $ words l :: [Double]\n      qs = map (map read) $ map words $ lines qs' :: [[Double]]\n      o = map (\\ (p2x:p2y:_) -> ans (p0x,p0y) (p1x,p1y) (p2x,p2y) ) qs\n  mapM_ putStrLn o"
  },
  {
    "language": "Haskell",
    "code": "inner_product (ax,ay) (bx,by) = ax * bx + ay * by\nvabs (ax,ay) = sqrt (ax*ax+ay*ay)\nvmul a (ax,ay) = (a*ax,a*ay)\nvadd (ax,ay) (bx,by) = (ax+bx,ay+by)\nvsub (ax,ay) (bx,by) = (ax-bx,ay-by)\n\nvatan (x,y) = atan2 y x\nvnorm (x,y) = x*x+y*y\n\njudge a1 t1 a2 t2\n  | t1 == t2    = if a2 > a1\n                  then \"ONLINE_FRONT\"\n                  else \"ON_SEGMENT\"\n  | abs (t1-t2) == pi = \"ONLINE_BACK\"\n  | t2 >  t1    = \"COUNTER_CLOCKWISE\"\n  | otherwise   = \"CLOCKWISE\"\n\nans p0 p1 p2 =\n  let v1 = p1 `vsub` p0\n      v2 = p2 `vsub` p0\n      t1 = vatan v1\n      t2 = vatan v2\n      a1 = vnorm v1\n      a2 = vnorm v2\n  in\n    judge a1 t1 a2 t2\n\nmain = do\n  l <- getLine\n  getLine\n  qs' <- getContents\n  let (p0x:p0y:p1x:p1y:_) = map read $ words l :: [Double]\n      qs = map (map read) $ map words $ lines qs' :: [[Double]]\n      o = map (\\ (p2x:p2y:_) -> ans (p0x,p0y) (p1x,p1y) (p2x,p2y) ) qs\n  mapM_ putStrLn o"
  },
  {
    "language": "Haskell",
    "code": "{-# LANGUAGE GeneralizedNewtypeDeriving #-}\n\nimport           Control.Applicative\nimport           Control.Monad\nimport qualified Data.ByteString.Char8 as B\nimport           Text.Printf\n\nreadi :: B.ByteString -> Int\nreadi b | Just (n, _) <- B.readInt b = n\n\n--\n\nnewtype VDouble =\n    VDouble Double\n    deriving (Show, Read, Num, Floating, Fractional)\n\ninstance Eq VDouble where\n    VDouble a == VDouble b = abs (a - b) < 1e-10\n\ninstance Ord VDouble where\n    VDouble a `compare` VDouble b\n        | VDouble a == VDouble b = EQ\n        | a <  b                 = LT\n        | otherwise              = GT\n\n--\n\nnewtype V2 =\n    V2 (VDouble, VDouble)\n    deriving (Show)\n\n(|+|) :: V2 -> V2 -> V2\nV2 (a, b) |+| V2 (c, d) = V2 (a + c, b + d)\n\n(|-|) :: V2 -> V2 -> V2\nV2 (a, b) |-| V2 (c, d) = V2 (a - c, b - d)\n\n(*|) :: VDouble -> V2 -> V2\nk *| V2 (c, d) = V2 (k * c, k * d)\n\nnorm :: V2 -> VDouble\nnorm (V2 (a, b)) = a * a + b * b\n\nabs' :: V2 -> VDouble\nabs' = sqrt . norm\n\ndot :: V2 -> V2 -> VDouble\nV2 (a, b) `dot` V2 (c, d) = a * c + b * d\n\ncross :: V2 -> V2 -> VDouble\nV2 (a, b) `cross` V2 (c, d) = a * d - b * c\n\n--\n\ndata Wise\n    = COUNTER_CLOCKWISE\n    | CLOCKWISE\n    | ONLINE_BACK\n    | ONLINE_FRONT\n    | ON_SEGMENT\n    deriving (Show)\n\nccw :: V2 -> V2 -> V2 -> Wise\nccw p0 p1 p2\n    | cross a b > 0   = COUNTER_CLOCKWISE\n    | cross a b < 0   = CLOCKWISE\n    | dot a b < 0     = ONLINE_BACK\n    | norm a < norm b = ONLINE_FRONT\n    | otherwise       = ON_SEGMENT\n  where\n    a = p1 |-| p0\n    b = p2 |-| p0\n\nmain :: IO ()\nmain = do\n    [x0, y0, x1, y1] <- fmap (fromIntegral . readi) . B.words <$> B.getLine\n    let p0 = V2 (x0, y0)\n    let p1 = V2 (x1, y1)\n    q <- readLn\n    replicateM_ q $ do\n        [a, b] <- fmap (fromIntegral . readi) . B.words <$> B.getLine\n        let p2 = V2 (a, b)\n        print $ ccw p0 p1 p2\n\n"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<math.h>\n#include<stdlib.h>\n#define max(a,b) a<b?b:a\n#define min(a,b) a<b?b:a\n#define POW2(a)  a*a\n#define ROOP(i,n) for(i = 0;i < n;i++)\n#define _USE_MATH_DEFINES\n\ntypedef struct POINT{\n\tdouble x;\n\tdouble y;\n}POINT;\ntypedef struct LINE{\n\tPOINT s;//start point\n\tPOINT e;//end point\n}LINE;\ntypedef struct COMPLEX{\n\tdouble r;//?????¢\n\tdouble q;//????§???????theta\n}COMPLEX;\n\n//POINT????????????\nvoid print_p(POINT a){\n\tprintf(\"(%lf,%lf)\\n\",a.x,a.y);\n}\n\n//LINE????????????\nvoid print_l(LINE a){\n\tprintf(\"(%lf,%lf) -> (%lf,%lf)\\n\",(a.s).x,(a.s).y,(a.e).x,(a.e).y);\n}\n\n//COMPLEX????????????\nvoid print_c(COMPLEX a){\n\tprintf(\"(%lf,%lf)\\n\",a.r,a.q);\n}\n\n//????????????????????¢?????????\ndouble norm2(POINT a){\n\treturn POW2(a.x)+POW2(a.y);\n}\n\n//????????????????????¢\ndouble norm(POINT a){\n\treturn sqrt(norm2(a));\n}\n\n//a->b?????´??§???????????????\nPOINT make_vec(POINT a,POINT b){\n\tb.x -= a.x;\n\tb.y -= a.y;\n\treturn b;\n}\n\n//2???a,b???????????¢\ndouble distance(POINT a,POINT b){\n\treturn norm(make_vec(a,b));\n}\n\n//??´??§????????????\nPOINT sum_vec(POINT a,POINT b){\n\ta.x += b.x;\n\ta.y += b.y;\n\treturn a;\n}\n\n//??´??§????????????\n//mkae_vec??¨?????£??????????????¨???????????????\n//??????????????????\nPOINT dif_vec(POINT a,POINT b){\n\ta.x -= b.x;\n\ta.y -= b.y;\n\treturn a;\n}\n\n//??´??§????????????????????????\nPOINT scalar_vec(POINT a,double k){\n\ta.x *= k;\n\ta.y *= k;\n\treturn a;\n}\n\n//???????????????\nPOINT minus_vec(POINT a){\n\treturn scalar_vec(a,-1.0);\n}\n\n//??????\ndouble dot(POINT a,POINT b){\n\treturn a.x*b.x + a.y*b.y;\n}\n\n//??????\ndouble cross(POINT a,POINT b){\n\treturn a.x*b.y - a.y*b.x;\n}\n\n//AP:PB=t:s??¨?????????????±???????\n//k, 0:??????, 1:??????\n//* t:(1-t)??§???????????£??????????????£????????????????????????????????????????????????????????¨?????£???\nPOINT division(POINT a,POINT b,double t,double s,int k){\n\tdouble tmp = t + s * (1 - k*2);\n\ta.x += (make_vec(a,b)).x / tmp * t;\n\ta.y += (make_vec(a,b)).y / tmp * t;\n\treturn a;\n}\n\n//???p????????´???a?????????????????????????¶??????????\nPOINT perpendicular(LINE a,POINT p){\n\tPOINT ps = make_vec(p,a.s);\n\tPOINT pe = make_vec(p,a.e);\n\tdouble t = norm2(ps) - dot(ps,pe);\n\tdouble s = norm2(pe) - dot(ps,pe);\n\treturn division(a.s,a.e,t,s,0);\n}\n\n//??´???a???????????????p??¨????§°???????????????\nPOINT reflection(LINE a,POINT p){\n\tPOINT h = perpendicular(a,p);\n\treturn sum_vec(h,make_vec(p,h));\n}\n\n//* ????§???¢?????????\nint inclusion(POINT a[],int n,POINT p){\n\tint ans = 0;\n\tint i;\n\tPOINT g[n+1];\n\tdouble w,rad = 0.0;\n\n\tfor(i = 0;i < n;i++){\n\t\tg[i] = a[i];\n\t}\n\tg[n] = g[0];\n\n\tfor(i = 0;i < n;i++){\n\t\tif(g[i].x == p.x && g[i].y == p.y){\n\t\t\treturn ans = 1;\n\t\t}\n\t}\n\tfor(i = 0;i < n;i++){\n\t\tw = atan2(cross(make_vec(p,g[i]),make_vec(p,g[i+1])),\n\t\t\t\tdot(make_vec(p,g[i]),make_vec(p,g[i+1])));\n\t\trad += w;\n\t\tif(fabs(w - M_PI) <= 0.000001 ||\n\t\t\t fabs(w + M_PI) <= 0.000001)\n\t\t\treturn ans = 1;\n\t}\n\tif(fabs(rad - M_PI*2)<=0.000001){//2??\n\t\treturn ans = 2;//in!\n\t}\n\treturn ans;\n}\n\n//\nint ccw(LINE a,POINT p){\n\t// a.s, a.e, p?????????????????????\n\t// ???????¨???????????????????????????????  1\n\t// ????¨?????????????????????????????????? -1\n\t// p, a.s, a.e????????????????????? 2\n\t// a.s, a.e, p?????????????????????-2\n\t// ???p?????´???a???????????????????????? 0\n\tint cls = cross(make_vec(a.s,a.e),make_vec(a.s,p));\n\tif(cls > 0){\n\t\treturn  1;\n\t}else if(cls < 0){\n\t\treturn -1;\n\t}else if(dot(make_vec(a.s,a.e),make_vec(a.s,p)) < 0){\n\t\treturn  2;\n\t}else if(dot(make_vec(a.s,a.e),make_vec(a.s,p)) > 0){\n\t\treturn -2;\n\t}else{\n\t\treturn 1\\0;\n\t}\n}\n\nint main(){\n\t\n/*\n\tPOINT a,b,q;\n\tdouble t,s;\n\n\tscanf(\"%lf%lf%lf%lf%lf%lf\",&a.x,&a.y,&b.x,&b.y,&t,&s);\n\n\tq = division(a,b,t,s,0);\n\tprintf(\"%lf %lf\\n\",q.x,q.y);\n*/\n\n\tLINE a;\n\tPOINT b;\n\tint k;\n\tchar s[5][100]={{ONLINE_FRONT},{CLOCKWISE},{ON_SEGMENT},{COUNTER_CLOCKWISE},{ONLINE_BACK}};\n\t\n\tscanf(\"%lf%lf%lf%lf%d\",&a.s.x,&a.s.y,&a.e.x,&a.e.y,&k);\n\twhile(k--){\n\t\tscanf(\"%lf%lf\",&b.x,&b.y);\n\t\tprintf(\"%s\\n\",s[ccw(a,b)+2]);\n\t}\n\n/*\n\tPOINT a,b;\n\tint k;\n\twhile(1){\n\t\tscanf(\"%lf%lf%lf%lf%d\",&a.x,&a.y,&b.x,&b.y,&k);\n\t\tprint_p(sum_vec(a,b));\n\t\tprint_p(dif_vec(a,b));\n\t\tprint_p(scalar_vec(a,k));\n\t\tprint_p(minus_vec(a));\n\t}\n*/\n/*\n\tPOINT a,b;\n\twhile(1){\n\t\tscanf(\"%lf%lf%lf%lf\",&a.x,&a.y,&b.x,&b.y);\n\t\tprintf(\"%lf\\n\",distance(a,b));\n\t}\n*/\n/*\n\tint i,m,n;\n\tPOINT g[100];//n\n\tPOINT q;//m\n\tint ans = 0;\n\n\tscanf(\"%d\",&n);\n\tfor(i = 0;i < n;i++){\n\t\tscanf(\"%lf%lf\",&g[i].x,&g[i].y);\n\t}\n\tscanf(\"%d\",&m);\n\tfor(i = 0;i < m;i++){\n\t\tscanf(\"%lf%lf\",&q.x,&q.y);\n\t\tans = inclusion(g,n,q);\n\t\tprintf(\"%d\\n\",ans);\n\t}\n*/\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<math.h>\n#include<stdlib.h>\n#define max(a,b) a<b?b:a\n#define min(a,b) a<b?b:a\n#define POW2(a)  a*a\n#define ROOP(i,n) for(i = 0;i < n;i++)\n#define _USE_MATH_DEFINES\n\ntypedef struct POINT{\n\tdouble x;\n\tdouble y;\n}POINT;\ntypedef struct LINE{\n\tPOINT s;//start point\n\tPOINT e;//end point\n}LINE;\ntypedef struct COMPLEX{\n\tdouble r;//?????¢\n\tdouble q;//????§???????theta\n}COMPLEX;\n\n//POINT????????????\nvoid print_p(POINT a){\n\tprintf(\"(%lf,%lf)\\n\",a.x,a.y);\n}\n\n//LINE????????????\nvoid print_l(LINE a){\n\tprintf(\"(%lf,%lf) -> (%lf,%lf)\\n\",(a.s).x,(a.s).y,(a.e).x,(a.e).y);\n}\n\n//COMPLEX????????????\nvoid print_c(COMPLEX a){\n\tprintf(\"(%lf,%lf)\\n\",a.r,a.q);\n}\n\n//????????????????????¢?????????\ndouble norm2(POINT a){\n\treturn POW2(a.x)+POW2(a.y);\n}\n\n//????????????????????¢\ndouble norm(POINT a){\n\treturn sqrt(norm2(a));\n}\n\n//a->b?????´??§???????????????\nPOINT make_vec(POINT a,POINT b){\n\tb.x -= a.x;\n\tb.y -= a.y;\n\treturn b;\n}\n\n//2???a,b???????????¢\ndouble distance(POINT a,POINT b){\n\treturn norm(make_vec(a,b));\n}\n\n//??´??§????????????\nPOINT sum_vec(POINT a,POINT b){\n\ta.x += b.x;\n\ta.y += b.y;\n\treturn a;\n}\n\n//??´??§????????????\n//mkae_vec??¨?????£??????????????¨???????????????\n//??????????????????\nPOINT dif_vec(POINT a,POINT b){\n\ta.x -= b.x;\n\ta.y -= b.y;\n\treturn a;\n}\n\n//??´??§????????????????????????\nPOINT scalar_vec(POINT a,double k){\n\ta.x *= k;\n\ta.y *= k;\n\treturn a;\n}\n\n//???????????????\nPOINT minus_vec(POINT a){\n\treturn scalar_vec(a,-1.0);\n}\n\n//??????\ndouble dot(POINT a,POINT b){\n\treturn a.x*b.x + a.y*b.y;\n}\n\n//??????\ndouble cross(POINT a,POINT b){\n\treturn a.x*b.y - a.y*b.x;\n}\n\n//AP:PB=t:s??¨?????????????±???????\n//k, 0:??????, 1:??????\n//* t:(1-t)??§???????????£??????????????£????????????????????????????????????????????????????????¨?????£???\nPOINT division(POINT a,POINT b,double t,double s,int k){\n\tdouble tmp = t + s * (1 - k*2);\n\ta.x += (make_vec(a,b)).x / tmp * t;\n\ta.y += (make_vec(a,b)).y / tmp * t;\n\treturn a;\n}\n\n//???p????????´???a?????????????????????????¶??????????\nPOINT perpendicular(LINE a,POINT p){\n\tPOINT ps = make_vec(p,a.s);\n\tPOINT pe = make_vec(p,a.e);\n\tdouble t = norm2(ps) - dot(ps,pe);\n\tdouble s = norm2(pe) - dot(ps,pe);\n\treturn division(a.s,a.e,t,s,0);\n}\n\n//??´???a???????????????p??¨????§°???????????????\nPOINT reflection(LINE a,POINT p){\n\tPOINT h = perpendicular(a,p);\n\treturn sum_vec(h,make_vec(p,h));\n}\n\n//* ????§???¢?????????\nint inclusion(POINT a[],int n,POINT p){\n\tint ans = 0;\n\tint i;\n\tPOINT g[n+1];\n\tdouble w,rad = 0.0;\n\n\tfor(i = 0;i < n;i++){\n\t\tg[i] = a[i];\n\t}\n\tg[n] = g[0];\n\n\tfor(i = 0;i < n;i++){\n\t\tif(g[i].x == p.x && g[i].y == p.y){\n\t\t\treturn ans = 1;\n\t\t}\n\t}\n\tfor(i = 0;i < n;i++){\n\t\tw = atan2(cross(make_vec(p,g[i]),make_vec(p,g[i+1])),\n\t\t\t\tdot(make_vec(p,g[i]),make_vec(p,g[i+1])));\n\t\trad += w;\n\t\tif(fabs(w - M_PI) <= 0.000001 ||\n\t\t\t fabs(w + M_PI) <= 0.000001)\n\t\t\treturn ans = 1;\n\t}\n\tif(fabs(rad - M_PI*2)<=0.000001){//2??\n\t\treturn ans = 2;//in!\n\t}\n\treturn ans;\n}\n\n//\nint ccw(LINE a,POINT p){\n\t// a.s, a.e, p?????????????????????\n\t// ???????¨???????????????????????????????  1\n\t// ????¨?????????????????????????????????? -1\n\t// p, a.s, a.e????????????????????? 2\n\t// a.s, a.e, p?????????????????????-2\n\t// ???p?????´???a???????????????????????? 0\n\tint cls = cross(make_vec(a.s,a.e),make_vec(a.s,p));\n\tif(cls > 0){\n\t\treturn  1;\n\t}else if(cls < 0){\n\t\treturn -1;\n\t}else if(dot(make_vec(a.s,a.e),make_vec(a.s,p)) < 0){\n\t\treturn  2;\n\t}else if(dot(make_vec(a.s,a.e),make_vec(a.s,p)) > 0){\n\t\treturn -2;\n\t}else{\n\t\treturn  1;\n\t}\n}\n\nint main(){\n\t\n/*\n\tPOINT a,b,q;\n\tdouble t,s;\n\n\tscanf(\"%lf%lf%lf%lf%lf%lf\",&a.x,&a.y,&b.x,&b.y,&t,&s);\n\n\tq = division(a,b,t,s,0);\n\tprintf(\"%lf %lf\\n\",q.x,q.y);\n*/\n\n\tLINE a;\n\tPOINT b;\n\tint k;\n\tchar s[5][100]={{ONLINE_FRONT},{CLOCKWISE},{ON_SEGMENT},{COUNTER_CLOCKWISE},{ONLINE_BACK}};\n\t\n\tscanf(\"%lf%lf%lf%lf%d\",&a.s.x,&a.s.y,&a.e.x,&a.e.y,&k);\n\twhile(k--){\n\t\tscanf(\"%lf%lf\",&b.x,&b.y);\n\t\tprintf(\"%s\\n\",s[ccw(a,b)+2]);\n\t}\n\n/*\n\tPOINT a,b;\n\tint k;\n\twhile(1){\n\t\tscanf(\"%lf%lf%lf%lf%d\",&a.x,&a.y,&b.x,&b.y,&k);\n\t\tprint_p(sum_vec(a,b));\n\t\tprint_p(dif_vec(a,b));\n\t\tprint_p(scalar_vec(a,k));\n\t\tprint_p(minus_vec(a));\n\t}\n*/\n/*\n\tPOINT a,b;\n\twhile(1){\n\t\tscanf(\"%lf%lf%lf%lf\",&a.x,&a.y,&b.x,&b.y);\n\t\tprintf(\"%lf\\n\",distance(a,b));\n\t}\n*/\n/*\n\tint i,m,n;\n\tPOINT g[100];//n\n\tPOINT q;//m\n\tint ans = 0;\n\n\tscanf(\"%d\",&n);\n\tfor(i = 0;i < n;i++){\n\t\tscanf(\"%lf%lf\",&g[i].x,&g[i].y);\n\t}\n\tscanf(\"%d\",&m);\n\tfor(i = 0;i < m;i++){\n\t\tscanf(\"%lf%lf\",&q.x,&q.y);\n\t\tans = inclusion(g,n,q);\n\t\tprintf(\"%d\\n\",ans);\n\t}\n*/\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\n\ntypedef struct point{\n    double x, y;\n}point;\n\ndouble inclination(point p1, point p2);\ndouble clockwise(point a, point b, point c);\ndouble length(point a, point b);\n\nint main(void)\n{\n    point a, b, c;\n    int n, i;\n    double ans;\n\n    scanf(\"%lf%lf\", &a.x, &a.y);\n\n    scanf(\"%lf%lf\", &b.x, &b.y);\n\n    scanf(\"%d\",&n);\n\n    for (i = 0; i < n; i++) {\n        scanf(\"%lf%lf\", &c.x, &c.y);\n        if (a.x == c.x && a.y == c.y) {\n            puts(\"ON_SEGMENT\");\n            continue;\n        }\n        ans = clockwise(a, b, c);\n        if ((3.1415926534 < ans && ans < 3.1415926536)) {\n            puts(\"ONLINE_BACK\");\n        } else if (ans < 0) {\n            puts(\"CLOCKWIZE\");\n        } else if (ans > 0) {\n            puts(\"COUNTER_CLOCKWIZE\");\n        } else if (length(a,c) > length(a,b)) {\n            puts(\"ONLINE_FRONT\");\n        } else {\n            puts(\"ON_SEGMENT\");\n        }\n    }\n    return 0;\n}\n\ndouble clockwise(point a, point b, point c) \n{\n    //*abを軸としてacの角度を求める\n    double rad1, rad2;\n\n    rad1 = atan2(b.y - a.y, b.x - a.x);\n    rad2 = atan2(c.y - a.y, c.x - a.x);\n\n    return rad2 - rad1;\n}\n\ndouble inclination(point p1, point p2)\n{\n    //*傾き\n    if (-0.00000000002 < p2.x - p1.x && p2.x - p1.x < 0.00000000002) {\n        return 2100000000.0;\n    } else {\n        return (p2.y - p1.y) / (p2.x - p1.x);\n    }\n}\n\ndouble length(point a, point b)\n{\n    return sqrt((b.x-a.x)*(b.x-a.x) + (b.y-a.y)*(b.y-a.y));\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\n\ntypedef struct point{\n    double x, y;\n}point;\n\ndouble inclination(point p1, point p2);\ndouble clockwise(point a, point b, point c);\ndouble length(point a, point b);\n\nint main(void)\n{\n    point a, b, c;\n    int n, i;\n    double ans;\n\n    scanf(\"%lf%lf\", &a.x, &a.y);\n\n    scanf(\"%lf%lf\", &b.x, &b.y);\n\n    scanf(\"%d\",&n);\n\n    for (i = 0; i < n; i++) {\n        scanf(\"%lf%lf\", &c.x, &c.y);\n        if (a.x == c.x && a.y == c.y) {\n            puts(\"ON_SEGMENT\");\n            continue;\n        }\n        ans = clockwise(a, b, c);\n        //printf(\"%.10lf\\n\",ans);\n        if ((3.1415926534 < ans && ans < 3.1415926536)) {\n            puts(\"ONLINE_BACK\");\n        } else if (ans < 0) {\n            puts(\"CLOCKWISE\");\n        } else if (ans > 0) {\n            puts(\"COUNTER_CLOCKWISE\");\n        } else if (length(a,c) > length(a,b)) {\n            puts(\"ONLINE_FRONT\");\n        } else {\n            puts(\"ON_SEGMENT\");\n        }\n    }\n    return 0;\n}\n\ndouble clockwise(point a, point b, point c) \n{\n    //*abを軸としてacの角度を求める\n    double rad1, rad2;\n\n    rad1 = fabs(atan2(b.y - a.y, b.x - a.x));\n    rad2 = fabs(atan2(c.y - a.y, c.x - a.x));\n    //printf(\"%lf %lf\\n\",rad1, rad2);\n\n    return rad2 - rad1;\n}\n\ndouble inclination(point p1, point p2)\n{\n    //*傾き\n    if (-0.00000000002 < p2.x - p1.x && p2.x - p1.x < 0.00000000002) {\n        return 2100000000.0;\n    } else {\n        return (p2.y - p1.y) / (p2.x - p1.x);\n    }\n}\n\ndouble length(point a, point b)\n{\n    return sqrt((b.x-a.x)*(b.x-a.x) + (b.y-a.y)*(b.y-a.y));\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\n\ndouble get_radian(double x1, double y1, double x2, double y2) {\n\tif(fabs(x1-x2) < 0.00001f) {\n\t\tif(fabs(y1-y2) < 0.00001f) {\n\t\t\treturn 0.0f;\n\t\t} else if(y1 > y2) {\n\t\t\treturn 3 * M_PI / 2;\n\t\t} else {\n\t\t\treturn M_PI / 2;\n\t\t}\n\t} else if(fabs(y1-y2) < 0.00001f) {\n\t\tif(x1 >= x2) {\n\t\t\treturn M_PI;\n\t\t}\n\t\treturn 0.0;\n\t}\n\t\n\tif(x2 >= x1) {\n\t\tif(y2 >= y1) {\n\t\t\treturn atan((y2-y1)/(x2-x1));\n\t\t}\n\t\treturn 2 * M_PI + atan((y2-y1)/(x2-x1));\n\t} else {\n\t\tif(y2 >= y1) {\n\t\t\treturn M_PI - atan((y2-y1)/(x1-x2));\n\t\t}\n\t\treturn M_PI + atan((y2-y1)/(x2-x1));\n\t}\n}\n\nint main(void) {\n\tdouble base_x, base_y, x, y;\n\tdouble base_rad, target_rad;\n\tdouble rad;\n\tdouble r1, r2, rdiff;\n\tint i, n;\n\t\n\tscanf(\"%lf %lf %lf %lf\\n\", &base_x, &base_y, &x, &y);\n\tscanf(\"%d\\n\", &n);\n\tbase_rad = get_radian(base_x, base_y, x, y);\n\tr1 = sqrt((x-base_x)*(x-base_x)+(y-base_y)*(y-base_y));\n\t\n\tfor(i=0;i<n;i++) {\n\t\tscanf(\"%lf %lf\\n\", &x, &y);\n\t\ttarget_rad = get_radian(base_x, base_y, x, y);\n\t\tr2 = sqrt((x-base_x)*(x-base_x)+(y-base_y)*(y-base_y));\n\t\t\n\t\trdiff = fmod(2*M_PI+target_rad-base_rad, 2*M_PI);\n\n\t\tif(fabs(rdiff) < 0.00001) {\n\t\t\tif(r2 > r1) {\n\t\t\t\tprintf(\"ONLINE_FRONT\\n\");\n\t\t\t} else {\n\t\t\t\tprintf(\"ON_SEGMENT\\n\");\n\t\t\t}\n\t\t} else if(fabs(rdiff-M_PI) < 0.00001) {\n\t\t\tprintf(\"ONLINE_BACK\\n\");\n\t\t} else if(rdiff < M_PI) {\n\t\t\tprintf(\"COUNTER_CLOCKWISE\\n\");\n\t\t} else {\n\t\t\tprintf(\"CLOCKWISE\\n\");\n\t\t}\n\t}\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\n#include <float.h>\n\ninline double cross_product_z(double v0x, double v0y, double vx, double vy) {\n    return v0x * vy - v0y * vx;\n}\n\nint main() {\n    int x, y, x0, y0, x1, y1;\n    int q;\n    double v0x, v0y, vx, vy, cp, cosa, denom, v0v, vv;\n    const char *judge;\n    const char *message[] = {\n        \"COUNTER_CLOCKWISE\",\n        \"CLOCKWISE\",\n        \"ONLINE_BACK\",\n        \"ONLINE_FRONT\",\n        \"ON_SEGMENT\"\n    };\n\n    scanf(\"%d %d %d %d\", &x0, &y0, &x1, &y1);\n    scanf(\"%d\", &q);\n\n    v0x = x1 - x0;\n    v0y = y1 - y0;\n    \n    while (q--) {\n        scanf(\"%d %d\", &x, &y);\n        vx = x - x0;\n        vy = y - y0;\n        cp = cross_product_z(v0x, v0y, vx, vy);\n        if (cp > 0) {\n            judge = message[0];\n        }\n        else if (cp < 0) {\n            judge = message[1];\n        }\n        else {\n            v0v = v0x*v0x+v0y*v0y;\n            vv = vx*vx+vy*vy;\n            denom = sqrt(v0v) * sqrt(vv);\n            if (denom < DBL_MIN * 10) {\n                judge = message[4];\n            }\n            else {\n                cosa = (v0x*vx + v0y*vy)/denom;\n                if (abs(cosa + 1) < DBL_MIN) {\n                    judge = message[2];\n                }\n                else {\n                    if (v0v < vv) {\n                        judge = message[3];\n                    }\n                    else {\n                        judge = message[4];\n                    }\n                }\n            }\n\n        }\n        printf(\"%s\\n\", judge);\n    }\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<stdlib.h>\n#include<math.h>\n\ntypedef long long int int64;\n\n#define MAX(a,b) ((a)>(b)?(a):(b))\n#define MIN(a,b) ((a)<(b)?(a):(b))\n#define ABS(a) ((a)>(0)?(a):-(a))\n\nvoid run(void){\n  int a,b,c,d;\n  scanf(\"%d%d%d%d\",&a,&b,&c,&d);\n  int p=c-a;\n  int q=d-b;\n  int query;\n  scanf(\"%d\",&query);\n  while(query--){\n    int x,y;\n    scanf(\"%d%d\",&x,&y);\n    x-=a;\n    y-=b;\n    int innernorm=p*x+q*y;\n    if((int64)innernorm*innernorm==(int64)(p*p+q*q)*(x*x+y*y)){//parallel\n      if(ABS(p+x)<ABS(p)+ABS(x) || ABS(q+y)<ABS(q)+ABS(y)){\n\tprintf(\"ONLINE_BACK\\n\");\n      } else {\n\tif(p*p+q*q<x*x+y*y){\n\t  printf(\"ONLINE_FRONT\\n\");\n\t} else {\n\t  printf(\"ON_SEGMENT\\n\");\n\t}\n      }\n    } else {\n      int t=p*y-q*x;\n      printf(\"%s\\n\",t>0?\"COUNTER_CLOCKWISE\":\"CLOCKWISE\");\n    }\n  }\n}\n\nint main(void){\n  run();\n  return 0;\n}\n\n"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\n#include <float.h>\n\ninline double cross_product_z(double v0x, double v0y, double vx, double vy) {\n    return v0x * vy - v0y * vx;\n}\n\nint main() {\n    int x, y, x0, y0, x1, y1;\n    int q;\n    double v0x, v0y, vx, vy, cp, cosa, denom, v0v, vv;\n    const char *judge;\n    const char *message[] = {\n        \"COUNTER_CLOCKWISE\",\n        \"CLOCKWISE\",\n        \"ONLINE_BACK\",\n        \"ONLINE_FRONT\",\n        \"ON_SEGMENT\"\n    };\n\n    scanf(\"%d %d %d %d\", &x0, &y0, &x1, &y1);\n    scanf(\"%d\", &q);\n\n    v0x = x1 - x0;\n    v0y = y1 - y0;\n    \n    while (q--) {\n        scanf(\"%d %d\", &x, &y);\n        vx = x - x0;\n        vy = y - y0;\n        cp = cross_product_z(v0x, v0y, vx, vy);\n        if (cp > 0) {\n            judge = message[0];\n        }\n        else if (cp < 0) {\n            judge = message[1];\n        }\n        else {\n            v0v = v0x*v0x+v0y*v0y;\n            vv = vx*vx+vy*vy;\n            denom = sqrt(v0v) * sqrt(vv);\n            if (denom < DBL_MIN) {\n                judge = message[4];\n            }\n            else {\n                cosa = (v0x*vx + v0y*vy)/denom;\n                if (fabs(cosa + 1) < 0.1e-10) {\n                    judge = message[2];\n                }\n                else {\n                    if (v0v < vv) {\n                        judge = message[3];\n                    }\n                    else {\n                        judge = message[4];\n                    }\n                }\n            }\n\n        }\n        printf(\"%s\\n\", judge);\n    }\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\n\ntypedef struct point{\n    double x, y;\n}point;\n\ndouble inclination(point p1, point p2);\ndouble clockwise(point a, point b, point c);\ndouble length(point a, point b);\n\nint main(void)\n{\n    point a, b, c;\n    int n, i;\n    double ans;\n\n    scanf(\"%lf%lf\", &a.x, &a.y);\n\n    scanf(\"%lf%lf\", &b.x, &b.y);\n\n    scanf(\"%d\",&n);\n\n    for (i = 0; i < n; i++) {\n        scanf(\"%lf%lf\", &c.x, &c.y);\n        if (a.x == c.x && a.y == c.y) {\n            puts(\"ON_SEGMENT\");\n            continue;\n        }\n        ans = clockwise(a, b, c);\n        if ((3.1415926534 < ans && ans < 3.1415926536)) {\n            puts(\"ONLINE_BACK\");\n        } else if (ans < 0) {\n            puts(\"CLOCKWISE\");\n        } else if (ans > 0) {\n            puts(\"COUNTER_CLOCKWISE\");\n        } else if (length(a,c) > length(a,b)) {\n            puts(\"ONLINE_FRONT\");\n        } else {\n            puts(\"ON_SEGMENT\");\n        }\n    }\n    return 0;\n}\n\ndouble clockwise(point a, point b, point c) \n{\n    //*abを軸としてacの角度を求める\n    double rad1, rad2;\n\n    rad1 = atan2(b.y - a.y, b.x - a.x);\n    rad2 = atan2(c.y - a.y, c.x - a.x);\n\n    return rad2 - rad1;\n}\n\ndouble inclination(point p1, point p2)\n{\n    //*傾き\n    if (-0.00000000002 < p2.x - p1.x && p2.x - p1.x < 0.00000000002) {\n        return 2100000000.0;\n    } else {\n        return (p2.y - p1.y) / (p2.x - p1.x);\n    }\n}\n\ndouble length(point a, point b)\n{\n    return sqrt((b.x-a.x)*(b.x-a.x) + (b.y-a.y)*(b.y-a.y));\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<stdlib.h>\n#include<math.h>\n\ntypedef long long int int64;\n\n#define MAX(a,b) ((a)>(b)?(a):(b))\n#define MIN(a,b) ((a)<(b)?(a):(b))\n#define ABS(a) ((a)>(0)?(a):-(a))\n\ntypedef struct vector{\n  int x,y;\n} vec;\n\nint64 innerNorm(vec a,vec b){\n  return a.x*b.x+a.y*b.y;\n}\n\nint64 norm(vec a){\n  return a.x*a.x+a.y*a.y;\n}\n\nint64 isParallel(vec a,vec b){\n  int64 in=innerNorm(a,b);\n  int64 x=norm(a);\n  int64 y=norm(b);\n  return in*in==x*y;\n}\n\nvoid run(void){\n  int a,b,c,d;\n  scanf(\"%d%d%d%d\",&a,&b,&c,&d);\n  vec p;\n  p.x=c-a;\n  p.y=d-b;\n  int query;\n  scanf(\"%d\",&query);\n  while(query--){\n    int x,y;\n    scanf(\"%d%d\",&x,&y);\n    vec q;\n    q.x=x-a;\n    q.y=y-b;\n    if(isParallel(p,q)){\n      if(ABS(p.x+q.x)<ABS(p.x)+ABS(q.x) || ABS(p.y+q.y)<ABS(p.y)+ABS(q.y)){\n\tprintf(\"ONLINE_BACK\\n\");\n      } else {\n\tif(norm(p)<norm(q)){\n\t  printf(\"ONLINE_FRONT\\n\");\n\t} else {\n\t  printf(\"ON_SEGMENT\\n\");\n\t}\n      }\n    } else {\n      int t=p.x*q.y-p.y*q.x;\n      printf(\"%s\\n\",t>0?\"COUNTER_CLOCKWISE\":\"CLOCKWISE\");\n    }\n  }\n}\n\nint main(void){\n  run();\n  return 0;\n}\n\n"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<stdlib.h>\n#include<math.h>\n\ntypedef long long int int64;\n\n#define MAX(a,b) ((a)>(b)?(a):(b))\n#define MIN(a,b) ((a)<(b)?(a):(b))\n#define ABS(a) ((a)>(0)?(a):-(a))\n\ntypedef struct vector{\n  int64 x,y;\n} vec;\n\nint64 innerNorm(vec a,vec b){\n  return a.x*b.x+a.y*b.y;\n}\n\nint64 norm(vec a){\n  return a.x*a.x+a.y*a.y;\n}\n\nint64 isParallel(vec a,vec b){\n  int64 in=innerNorm(a,b);\n  int64 x=norm(a);\n  int64 y=norm(b);\n  return in*in==x*y;\n}\n\nvoid run(void){\n  int a,b,c,d;\n  scanf(\"%d%d%d%d\",&a,&b,&c,&d);\n  vec p;\n  p.x=c-a;\n  p.y=d-b;\n  int query;\n  scanf(\"%d\",&query);\n  while(query--){\n    int x,y;\n    scanf(\"%d%d\",&x,&y);\n    vec q;\n    q.x=x-a;\n    q.y=y-b;\n    if(isParallel(p,q)){\n      if(ABS(p.x+q.x)<ABS(p.x)+ABS(q.x) || ABS(p.y+q.y)<ABS(p.y)+ABS(q.y)){\n\tprintf(\"ONLINE_BACK\\n\");\n      } else {\n\tif(norm(p)<norm(q)){\n\t  printf(\"ONLINE_FRONT\\n\");\n\t} else {\n\t  printf(\"ON_SEGMENT\\n\");\n\t}\n      }\n    } else {\n      int t=p.x*q.y-p.y*q.x;\n      printf(\"%s\\n\",t>0?\"COUNTER_CLOCKWISE\":\"CLOCKWISE\");\n    }\n  }\n}\n\nint main(void){\n  run();\n  return 0;\n}\n\n"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<math.h>\n#include<stdlib.h>\n#define max(a,b) a<b?b:a\n#define min(a,b) a<b?b:a\n#define POW2(a)  a*a\n#define ROOP(i,n) for(i = 0;i < n;i++)\n#define _USE_MATH_DEFINES\n\ntypedef struct POINT{\n\tdouble x;\n\tdouble y;\n}POINT;\ntypedef struct LINE{\n\tPOINT s;//start point\n\tPOINT e;//end point\n}LINE;\ntypedef struct COMPLEX{\n\tdouble r;//?????¢\n\tdouble q;//????§???????theta\n}COMPLEX;\n\n//POINT????????????\nvoid print_p(POINT a){\n\tprintf(\"(%lf,%lf)\\n\",a.x,a.y);\n}\n\n//LINE????????????\nvoid print_l(LINE a){\n\tprintf(\"(%lf,%lf) -> (%lf,%lf)\\n\",(a.s).x,(a.s).y,(a.e).x,(a.e).y);\n}\n\n//COMPLEX????????????\nvoid print_c(COMPLEX a){\n\tprintf(\"(%lf,%lf)\\n\",a.r,a.q);\n}\n\n//????????????????????¢?????????\ndouble norm2(POINT a){\n\treturn POW2(a.x)+POW2(a.y);\n}\n\n//????????????????????¢\ndouble norm(POINT a){\n\treturn sqrt(norm2(a));\n}\n\n//a->b?????´??§???????????????\nPOINT make_vec(POINT a,POINT b){\n\tb.x -= a.x;\n\tb.y -= a.y;\n\treturn b;\n}\n\n//2???a,b???????????¢\ndouble distance(POINT a,POINT b){\n\treturn norm(make_vec(a,b));\n}\n\n//??´??§????????????\nPOINT sum_vec(POINT a,POINT b){\n\ta.x += b.x;\n\ta.y += b.y;\n\treturn a;\n}\n\n//??´??§????????????\n//mkae_vec??¨?????£??????????????¨???????????????\n//??????????????????\nPOINT dif_vec(POINT a,POINT b){\n\ta.x -= b.x;\n\ta.y -= b.y;\n\treturn a;\n}\n\n//??´??§????????????????????????\nPOINT scalar_vec(POINT a,double k){\n\ta.x *= k;\n\ta.y *= k;\n\treturn a;\n}\n\n//???????????????\nPOINT minus_vec(POINT a){\n\treturn scalar_vec(a,-1.0);\n}\n\n//??????\ndouble dot(POINT a,POINT b){\n\treturn a.x*b.x + a.y*b.y;\n}\n\n//??????\ndouble cross(POINT a,POINT b){\n\treturn a.x*b.y - a.y*b.x;\n}\n\n//AP:PB=t:s??¨?????????????±???????\n//k, 0:??????, 1:??????\n//* t:(1-t)??§???????????£??????????????£????????????????????????????????????????????????????????¨?????£???\nPOINT division(POINT a,POINT b,double t,double s,int k){\n\tdouble tmp = t + s * (1 - k*2);\n\ta.x += (make_vec(a,b)).x / tmp * t;\n\ta.y += (make_vec(a,b)).y / tmp * t;\n\treturn a;\n}\n\n//???p????????´???a?????????????????????????¶??????????\nPOINT perpendicular(LINE a,POINT p){\n\tPOINT ps = make_vec(p,a.s);\n\tPOINT pe = make_vec(p,a.e);\n\tdouble t = norm2(ps) - dot(ps,pe);\n\tdouble s = norm2(pe) - dot(ps,pe);\n\treturn division(a.s,a.e,t,s,0);\n}\n\n//??´???a???????????????p??¨????§°???????????????\nPOINT reflection(LINE a,POINT p){\n\tPOINT h = perpendicular(a,p);\n\treturn sum_vec(h,make_vec(p,h));\n}\n\n//* ????§???¢?????????\nint inclusion(POINT a[],int n,POINT p){\n\tint ans = 0;\n\tint i;\n\tPOINT g[n+1];\n\tdouble w,rad = 0.0;\n\n\tfor(i = 0;i < n;i++){\n\t\tg[i] = a[i];\n\t}\n\tg[n] = g[0];\n\n\tfor(i = 0;i < n;i++){\n\t\tif(g[i].x == p.x && g[i].y == p.y){\n\t\t\treturn ans = 1;\n\t\t}\n\t}\n\tfor(i = 0;i < n;i++){\n\t\tw = atan2(cross(make_vec(p,g[i]),make_vec(p,g[i+1])),\n\t\t\t\tdot(make_vec(p,g[i]),make_vec(p,g[i+1])));\n\t\trad += w;\n\t\tif(fabs(w - M_PI) <= 0.000001 ||\n\t\t\t fabs(w + M_PI) <= 0.000001)\n\t\t\treturn ans = 1;\n\t}\n\tif(fabs(rad - M_PI*2)<=0.000001){//2??\n\t\treturn ans = 2;//in!\n\t}\n\treturn ans;\n}\n\n//\nint ccw(LINE a,POINT p){\n\t// a.s, a.e, p?????????????????????\n\t// ???????¨???????????????????????????????  1\n\t// ????¨?????????????????????????????????? -1\n\t// p, a.s, a.e????????????????????? 2\n\t// a.s, a.e, p?????????????????????-2\n\t// ???p?????´???a???????????????????????? 0\n\tint cls = cross(make_vec(a.s,a.e),make_vec(a.s,p));\n\tif(cls > 0){\n\t\treturn  1;\n\t}else if(cls < 0){\n\t\treturn -1;\n\t}else if(dot(make_vec(a.s,a.e),make_vec(a.s,p)) < 0){\n\t\treturn  2;\n\t}else if(dot(make_vec(a.e,a.s),make_vec(a.e,p)) > 0){\n\t\treturn -2;\n\t}else{\n\t\treturn  1;\n\t}\n}\n\nint main(){\n\t\n/*\n\tPOINT a,b,q;\n\tdouble t,s;\n\n\tscanf(\"%lf%lf%lf%lf%lf%lf\",&a.x,&a.y,&b.x,&b.y,&t,&s);\n\n\tq = division(a,b,t,s,0);\n\tprintf(\"%lf %lf\\n\",q.x,q.y);\n*/\n\n\tLINE a;\n\tPOINT b;\n\tint k;\n\tchar s[5][100]={{\"ONLINE_FRONT\"},{\"CLOCKWISE\"},{\"ON_SEGMENT\"},{\"COUNTER_CLOCKWISE\"},{\"ONLINE_BACK\"}};\n\t\n\tscanf(\"%lf%lf%lf%lf%d\",&a.s.x,&a.s.y,&a.e.x,&a.e.y,&k);\n\twhile(k--){\n\t\tscanf(\"%lf%lf\",&b.x,&b.y);\n\t\tprintf(\"%s\\n\",s[ccw(a,b)+2]);\n\t}\n\n/*\n\tPOINT a,b;\n\tint k;\n\twhile(1){\n\t\tscanf(\"%lf%lf%lf%lf%d\",&a.x,&a.y,&b.x,&b.y,&k);\n\t\tprint_p(sum_vec(a,b));\n\t\tprint_p(dif_vec(a,b));\n\t\tprint_p(scalar_vec(a,k));\n\t\tprint_p(minus_vec(a));\n\t}\n*/\n/*\n\tPOINT a,b;\n\twhile(1){\n\t\tscanf(\"%lf%lf%lf%lf\",&a.x,&a.y,&b.x,&b.y);\n\t\tprintf(\"%lf\\n\",distance(a,b));\n\t}\n*/\n/*\n\tint i,m,n;\n\tPOINT g[100];//n\n\tPOINT q;//m\n\tint ans = 0;\n\n\tscanf(\"%d\",&n);\n\tfor(i = 0;i < n;i++){\n\t\tscanf(\"%lf%lf\",&g[i].x,&g[i].y);\n\t}\n\tscanf(\"%d\",&m);\n\tfor(i = 0;i < m;i++){\n\t\tscanf(\"%lf%lf\",&q.x,&q.y);\n\t\tans = inclusion(g,n,q);\n\t\tprintf(\"%d\\n\",ans);\n\t}\n*/\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\n\ndouble get_radian(double x1, double y1, double x2, double y2) {\n\tif(fabs(x1-x2) < 0.00000001f) {\n\t\tif(fabs(y1-y2) < 0.00000001f) {\n\t\t\treturn 0.0f;\n\t\t} else if(y1 > y2) {\n\t\t\treturn 3 * M_PI / 2;\n\t\t} else {\n\t\t\treturn M_PI / 2;\n\t\t}\n\t} else if(fabs(y1-y2) < 0.00000001f) {\n\t\tif(fabs(x1-x2) < 0.00000001f) {\n\t\t\treturn 0.0f;\n\t\t} else if(x1 > x2) {\n\t\t\treturn M_PI;\n\t\t}\n\t\treturn 0.0;\n\t}\n\t\n\tif(x2 >= x1) {\n\t\tif(y2 >= y1) {\n\t\t\treturn atan((y2-y1)/(x2-x1));\n\t\t}\n\t\treturn 2 * M_PI + atan((y2-y1)/(x2-x1));\n\t} else {\n\t\tif(y2 >= y1) {\n\t\t\treturn M_PI - atan((y2-y1)/(x1-x2));\n\t\t}\n\t\treturn M_PI + atan((y2-y1)/(x2-x1));\n\t}\n}\n\nint main(void) {\n\tdouble base_x, base_y, x, y;\n\tdouble base_rad, target_rad;\n\tdouble rad;\n\tdouble r1, r2, rdiff;\n\tint i, n;\n\t\n\tscanf(\"%lf %lf %lf %lf\\n\", &base_x, &base_y, &x, &y);\n\tscanf(\"%d\\n\", &n);\n\tbase_rad = get_radian(base_x, base_y, x, y);\n\tr1 = sqrt((x-base_x)*(x-base_x)+(y-base_y)*(y-base_y));\n\t\n\tfor(i=0;i<n;i++) {\n\t\tscanf(\"%lf %lf\\n\", &x, &y);\n\t\ttarget_rad = get_radian(base_x, base_y, x, y);\n\t\tr2 = sqrt((x-base_x)*(x-base_x)+(y-base_y)*(y-base_y));\n\t\t\n\t\trdiff = fmod(2*M_PI+target_rad-base_rad, 2*M_PI);\n\n\t\tif(fabs(r1) < 0.0001) {\n\t\t\tprintf(\"ONLINE_FRONT\\n\");\n\t\t} else if(fabs(r2) < 0.0001) {\n\t\t\tprintf(\"ON_SEGMENT\\n\");\n\t\t} else if(fabs(rdiff) < 0.00001) {\n\t\t\tif(r2 > r1) {\n\t\t\t\tprintf(\"ONLINE_FRONT\\n\");\n\t\t\t} else {\n\t\t\t\tprintf(\"ON_SEGMENT\\n\");\n\t\t\t}\n\t\t} else if(fabs(rdiff-M_PI) < 0.00001) {\n\t\t\tprintf(\"ONLINE_BACK\\n\");\n\t\t} else if(rdiff < M_PI) {\n\t\t\tprintf(\"COUNTER_CLOCKWISE\\n\");\n\t\t} else {\n\t\t\tprintf(\"CLOCKWISE\\n\");\n\t\t}\n\t}\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\n\ndouble get_radian(double x1, double y1, double x2, double y2) {\n\tif(fabs(x1-x2) < 0.00000001f) {\n\t\tif(y1 >= y2) {\n\t\t\treturn 3 * M_PI / 2;\n\t\t}\n\t\treturn M_PI / 2;\n\t} else if(fabs(y1-y2) < 0.00000001f) {\n\t\tif(x1 >= x2) {\n\t\t\treturn M_PI;\n\t\t}\n\t\treturn 0.0;\n\t}\n\t\n\tif(x2 >= x1) {\n\t\tif(y2 >= y1) {\n\t\t\treturn atan((y2-y1)/(x2-x1));\n\t\t}\n\t\treturn 2 * M_PI + atan((y2-y1)/(x2-x1));\n\t} else {\n\t\tif(y2 >= y1) {\n\t\t\treturn M_PI - atan((y2-y1)/(x1-x2));\n\t\t}\n\t\treturn M_PI + atan((y2-y1)/(x2-x1));\n\t}\n}\n\nint main(void) {\n\tdouble base_x, base_y, x, y;\n\tdouble base_rad, target_rad;\n\tdouble rad;\n\tdouble r1, r2, rdiff;\n\tint i, n;\n\t\n\tscanf(\"%lf %lf %lf %lf\\n\", &base_x, &base_y, &x, &y);\n\tscanf(\"%d\\n\", &n);\n\tbase_rad = get_radian(base_x, base_y, x, y);\n\tr1 = sqrt((x-base_x)*(x-base_x)+(y-base_y)*(y-base_y));\n\t\n\tfor(i=0;i<n;i++) {\n\t\tscanf(\"%lf %lf\\n\", &x, &y);\n\t\ttarget_rad = get_radian(base_x, base_y, x, y);\n\t\tr2 = sqrt((x-base_x)*(x-base_x)+(y-base_y)*(y-base_y));\n\t\t\n\t\trdiff = fmod(2*M_PI+target_rad-base_rad, 2*M_PI);\n\n\t\tif(fabs(rdiff) < 0.0000001) {\n\t\t\tif(r2 > r1) {\n\t\t\t\tprintf(\"ONLINE_FRONT\\n\");\n\t\t\t} else {\n\t\t\t\tprintf(\"ON_SEGMENT\\n\");\n\t\t\t}\n\t\t} else if(fabs(rdiff-M_PI) < 0.0000001) {\n\t\t\tprintf(\"ONLINE_BACK\\n\");\n\t\t} else if(rdiff < M_PI) {\n\t\t\tprintf(\"COUNTER_CLOCKWISE\\n\");\n\t\t} else {\n\t\t\tprintf(\"CLOCKWISE\\n\");\n\t\t}\n\t}\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\n#define EPS 0.0000000002\n#define MAX 1010001000\n\ntypedef struct point{\n    double x, y;\n}point;\n\ntypedef struct line{\n    point st, en;\n}line;\n\ndouble norm(point a);\ndouble norm2(point a);\ndouble distans(point a, point b);\npoint sum_vector(point a, point b);\npoint diff_vector(point a, point b);\npoint minus_vector(point a);\ndouble dot(point a, point b);\ndouble prod(point a, point b);\n\npoint reflection(line a, point p);\npoint projection(line a, point p);\nint ccw(line a, point p);\n\npoint reflection(line a, point p)\n{\n    //直線aについて点pと線対称な点を返す\n    return sum_vector(projection(a, p), diff_vector(projection(a, p), p));\n}\n\npoint projection(line a, point p)\n{\n    //直線ab上に点pから垂線を下ろしたときの点h//\n    point h;\n    double k = dot(diff_vector(a.st, p), diff_vector(a.st, a.en))\n                / dot(diff_vector(a.en, a.st), diff_vector(a.en, a.st));\n    h.x = k * (a.en.x - a.st.x) + a.st.x;\n    h.y = k * (a.en.y - a.st.y) + a.st.y;\n    return h;\n}\n\ndouble norm(point a)\n{\n    //原点からの距離\n    return sqrt((a.x * a.x) + (a.y * a.y));\n}\n\ndouble norm2(point a)\n{\n    //原点からの距離の二乗\n    return (a.x * a.x) + (a.y * a.y);\n}\n\ndouble distans(point a, point b)\n{\n    //二点間の距離\n    point tmp = sum_vector(b, minus_vector(a));\n    return norm(tmp);\n}\n\npoint sum_vector(point a, point b)\n{\n    //ベクトルの和\n    a.x += b.x;\n    a.y += b.y;\n    return a;\n}\n\npoint diff_vector(point a, point b)\n{\n    //ベクトルの差\n    a.x -= b.x;\n    a.y -= b.y;\n    return a;\n}\n\npoint minus_vector(point a)\n{\n    //逆ベクトル\n    a.x *= -1;\n    a.y *= -1;\n    return a;\n}\n\ndouble dot(point a, point b)\n{\n    //内積\n    return (a.x * b.x) + (a.y * b.y);\n}\n\ndouble prod(point a, point b)\n{\n    //外積\n    return (a.x * b.y) - (b.x * a.y);\n}\n\nint ccw(line a, point p)\n{\n    //counter clockwise == 1\n    //clockwise == 2\n    //online back == 3\n    //online front == 4\n    //on segment == 5\n    int cls = prod(diff_vector(a.en, a.st), diff_vector(p, a.st));\n    if (cls > 0) {\n        return 1;\n    } else if (cls < 0) {\n        return 2;\n    } else if (dot(diff_vector(a.en, a.st), diff_vector(p, a.st)) < 0) {\n        return 3;\n    } else if (norm(diff_vector(a.st, a.en)) < norm(diff_vector(a.st, p))) {\n        return 4;\n    } else {\n        return 5;\n    }\n}\n\n///////////////////////////////////////\n\nint main(void)\n{\n    point p;\n    line ab;\n    int n, i, a;\n\n    scanf(\"%lf%lf%lf%lf%d\", &ab.st.x, &ab.st.y, &ab.en.x, &ab.en.y, &n);\n    for (i = 0; i < n; i++) {\n        scanf(\"%lf%lf\", &p.x, &p.y);\n        a = ccw(ab, p);\n        if (a == 1) {\n            puts(\"COUNTER_CLOCKWISE\");\n        } else if (a == 2) {\n            puts(\"CLOCKWISE\");\n        } else if (a == 3) {\n            puts(\"ONLINE_BACK\");\n        } else if (a == 4) {\n            puts(\"ONLINE_FRONT\");\n        } else {\n            puts(\"ON_SEGMENT\");\n        }\n    }\n    return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<math.h>\nint main(){\n    int n,ax,ay,bx,by,cx,cy,m,bax,bay,cax,cay,u;\n    double t,x,y,p,q,r,s;\n    scanf(\"%d%d%d%d\",&ax,&ay,&bx,&by);\n    scanf(\"%d\",&n);\n    bax=bx-ax;\n    bay=by-ay;\n    while(n--){\n        scanf(\"%d%d\",&cx,&cy);\n        cax=cx-ax;\n        cay=cy-ay;\n        t=(bax*cax+bay*cay)/(pow(bax,2)+pow(bay,2));\n        x=ax+t*bax;\n        y=ay+t*bay;\n        m=-(cx-x)*bay+(cy-y)*bax;\n        u=bax*cax+bay*cay;\n        p=pow(u,2);\n        q=(pow(bax,2)+pow(bay,2))*(pow(cax,2)+pow(cay,2));\n        if(p==q&&u<0&&(ax!=cx||ay!=cy)){\n            puts(\"ONLINE_BACK\");\n        }else if(p==q){\n            r=pow(bax,2)+pow(bay,2);\n            s=pow(cax,2)+pow(cay,2);\n            if(s>r){\n                puts(\"ONLINE_FRONT\");\n            }else{\n                puts(\"ON_SEGMENT\");\n            }\n        }else if(m>0){\n            puts(\"COUNTER_CLOCKWISE\");\n        }else if(m<0){\n            puts(\"CLOCKWISE\");\n        }\n    }\n    return 0;\n}"
  },
  {
    "language": "C",
    "code": "// AOJ CGL_1_C Counter-Clockwise\n// 2018.5.2 bal4u\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\ntypedef struct { double x, y; } PP;\ntypedef struct { PP s, e; } SEG, LINE;\n\n#define INF\t\t\t1e8\n#define EPS\t\t\t1e-8\n#define EQ(a,b)\t\t(fabs((a)-(b))<EPS)\n#define PPeQ(a,b)\t(EQ(a.x,b.x)&&EQ(a.y,b.y))\n\nint dcmp(double x) { if (fabs(x) < EPS) return 0; return x <= 0 ? -1 : 1; }\nPP vset(double x, double y) { PP r; r.x = x, r.y = y; return r; }\nPP vadd(PP p1, PP p2) { PP r; r.x = p1.x + p2.x, r.y = p1.y + p2.y; return r; }\nPP vsub(PP p1, PP p2) { PP r; r.x = p1.x - p2.x, r.y = p1.y - p2.y; return r; }\nPP vsmul(PP p, double k) { PP r; r.x = p.x * k, r.y = p.y * k; return r; }\nPP vmul(PP p1, PP p2) { PP r;\n\tr.x = p1.x * p2.x - p1.y * p2.y, r.y = p1.x * p2.y + p1.y * p2.x; return r; }\ndouble vabs(PP a) { return hypot(a.x, a.y); }\ndouble dist(PP p1, PP p2) {\treturn hypot(p1.x-p2.x, p1.y-p2.y); };\ndouble cross(PP a, PP b) { return a.x * b.y - a.y * b.x; }\ndouble dot(PP a, PP b) { return a.x * b.x + a.y * b.y; }\ndouble norm(PP a) { return a.x * a.x + a.y * a.y; }\n\n#if 1\n#define gc() getchar_unlocked()\n#else\n#define gc() getchar()\n#endif\nint in()\n{\n\tint n = 0, c = gc();\n\tif (c == '-') {\tc = gc();\n\t\tdo n = 10*n + (c & 0xf), c = gc(); while (c >= '0');\n\t\treturn -n;\n\t}\n\tdo n = 10*n + (c & 0xf), c = gc(); while (c >= '0');\n\treturn n;\n}\n\n#define COUNTER_CLOCKWISE\nint ccw(PP p0, PP p1, PP p2)\n{\n\tPP a, b;\n\tdouble t;\n\n\ta = vsub(p1, p0), b = vsub(p2, p0), t = cross(a, b);\n\tif (t >  EPS) return 1;\tif (t < -EPS) return -1;\n\tif (dot(a, b) < -EPS) return 2;\tif (norm(a) < norm(b)) return -2;\n\treturn 0;\n}\n\nchar *msg[5] = { \"ONLINE_FRONT\", \"CLOCKWISE\", \"ON_SEGMENT\", \n                 \"COUNTER_CLOCKWISE\", \"ONLINE_BACK\" };\n\nint main()\n{\n\tint q, x, y, ans;\n\tPP p0, p1, p2;\n\n\tx = in(), y = in(), p0 = vset(x, y);\n\tx = in(), y = in(), p1 = vset(x, y);\n\n\tq = in(); while (q--) {\n\t\tx = in(), y = in(), p2 = vset(x, y);\n\t\tans = ccw(p0, p1, p2);\n\t\tputs(msg[2+ans]);\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<math.h>\n#include<stdlib.h>\n#define max(a,b) a<b?b:a\n#define min(a,b) a<b?b:a\n#define POW2(a)  a*a\n#define ROOP(i,n) for(i = 0;i < n;i++)\n#define _USE_MATH_DEFINES\n\ntypedef struct POINT{\n\tdouble x;\n\tdouble y;\n}POINT;\ntypedef struct LINE{\n\tPOINT s;//start point\n\tPOINT e;//end point\n}LINE;\ntypedef struct COMPLEX{\n\tdouble r;//?????¢\n\tdouble q;//????§???????theta\n}COMPLEX;\n\n//POINT????????????\nvoid print_p(POINT a){\n\tprintf(\"(%lf,%lf)\\n\",a.x,a.y);\n}\n\n//LINE????????????\nvoid print_l(LINE a){\n\tprintf(\"(%lf,%lf) -> (%lf,%lf)\\n\",(a.s).x,(a.s).y,(a.e).x,(a.e).y);\n}\n\n//COMPLEX????????????\nvoid print_c(COMPLEX a){\n\tprintf(\"(%lf,%lf)\\n\",a.r,a.q);\n}\n\n//????????????????????¢?????????\ndouble norm2(POINT a){\n\treturn POW2(a.x)+POW2(a.y);\n}\n\n//????????????????????¢\ndouble norm(POINT a){\n\treturn sqrt(norm2(a));\n}\n\n//a->b?????´??§???????????????\nPOINT make_vec(POINT a,POINT b){\n\tb.x -= a.x;\n\tb.y -= a.y;\n\treturn b;\n}\n\n//2???a,b???????????¢\ndouble distance(POINT a,POINT b){\n\treturn norm(make_vec(a,b));\n}\n\n//??´??§????????????\nPOINT sum_vec(POINT a,POINT b){\n\ta.x += b.x;\n\ta.y += b.y;\n\treturn a;\n}\n\n//??´??§????????????\n//mkae_vec??¨?????£??????????????¨???????????????\n//??????????????????\nPOINT dif_vec(POINT a,POINT b){\n\ta.x -= b.x;\n\ta.y -= b.y;\n\treturn a;\n}\n\n//??´??§????????????????????????\nPOINT scalar_vec(POINT a,double k){\n\ta.x *= k;\n\ta.y *= k;\n\treturn a;\n}\n\n//???????????????\nPOINT minus_vec(POINT a){\n\treturn scalar_vec(a,-1.0);\n}\n\n//??????\ndouble dot(POINT a,POINT b){\n\treturn a.x*b.x + a.y*b.y;\n}\n\n//??????\ndouble cross(POINT a,POINT b){\n\treturn a.x*b.y - a.y*b.x;\n}\n\n//AP:PB=t:s??¨?????????????±???????\n//k, 0:??????, 1:??????\n//* t:(1-t)??§???????????£??????????????£????????????????????????????????????????????????????????¨?????£???\nPOINT division(POINT a,POINT b,double t,double s,int k){\n\tdouble tmp = t + s * (1 - k*2);\n\ta.x += (make_vec(a,b)).x / tmp * t;\n\ta.y += (make_vec(a,b)).y / tmp * t;\n\treturn a;\n}\n\n//???p????????´???a?????????????????????????¶??????????\nPOINT perpendicular(LINE a,POINT p){\n\tPOINT ps = make_vec(p,a.s);\n\tPOINT pe = make_vec(p,a.e);\n\tdouble t = norm2(ps) - dot(ps,pe);\n\tdouble s = norm2(pe) - dot(ps,pe);\n\treturn division(a.s,a.e,t,s,0);\n}\n\n//??´???a???????????????p??¨????§°???????????????\nPOINT reflection(LINE a,POINT p){\n\tPOINT h = perpendicular(a,p);\n\treturn sum_vec(h,make_vec(p,h));\n}\n\n//* ????§???¢?????????\nint inclusion(POINT a[],int n,POINT p){\n\tint ans = 0;\n\tint i;\n\tPOINT g[n+1];\n\tdouble w,rad = 0.0;\n\n\tfor(i = 0;i < n;i++){\n\t\tg[i] = a[i];\n\t}\n\tg[n] = g[0];\n\n\tfor(i = 0;i < n;i++){\n\t\tif(g[i].x == p.x && g[i].y == p.y){\n\t\t\treturn ans = 1;\n\t\t}\n\t}\n\tfor(i = 0;i < n;i++){\n\t\tw = atan2(cross(make_vec(p,g[i]),make_vec(p,g[i+1])),\n\t\t\t\tdot(make_vec(p,g[i]),make_vec(p,g[i+1])));\n\t\trad += w;\n\t\tif(fabs(w - M_PI) <= 0.000001 ||\n\t\t\t fabs(w + M_PI) <= 0.000001)\n\t\t\treturn ans = 1;\n\t}\n\tif(fabs(rad - M_PI*2)<=0.000001){//2??\n\t\treturn ans = 2;//in!\n\t}\n\treturn ans;\n}\n\n//\nint ccw(LINE a,POINT p){\n\t// a.s, a.e, p?????????????????????\n\t// ???????¨???????????????????????????????  1\n\t// ????¨?????????????????????????????????? -1\n\t// p, a.s, a.e????????????????????? 2\n\t// a.s, a.e, p?????????????????????-2\n\t// ???p?????´???a???????????????????????? 0\n\tint cls = cross(make_vec(a.s,a.e),make_vec(a.s,p));\n\tif(cls > 0){\n\t\treturn  1;\n\t}else if(cls < 0){\n\t\treturn -1;\n\t}else if(dot(make_vec(a.s,a.e),make_vec(a.s,p)) < 0){\n\t\treturn  2;\n\t}else if(dot(make_vec(a.s,a.e),make_vec(a.s,p)) > 0){\n\t\treturn -2;\n\t}else{\n\t\treturn  1;\n\t}\n}\n\nint main(){\n\t\n/*\n\tPOINT a,b,q;\n\tdouble t,s;\n\n\tscanf(\"%lf%lf%lf%lf%lf%lf\",&a.x,&a.y,&b.x,&b.y,&t,&s);\n\n\tq = division(a,b,t,s,0);\n\tprintf(\"%lf %lf\\n\",q.x,q.y);\n*/\n\n\tLINE a;\n\tPOINT b;\n\tint k;\n\tchar s[5][100]={{\"ONLINE_FRONT\"},{\"CLOCKWISE\"},{\"ON_SEGMENT\"},{\"COUNTER_CLOCKWISE\"},{\"ONLINE_BACK\"}};\n\t\n\tscanf(\"%lf%lf%lf%lf%d\",&a.s.x,&a.s.y,&a.e.x,&a.e.y,&k);\n\twhile(k--){\n\t\tscanf(\"%lf%lf\",&b.x,&b.y);\n\t\tprintf(\"%s\\n\",s[ccw(a,b)+2]);\n\t}\n\n/*\n\tPOINT a,b;\n\tint k;\n\twhile(1){\n\t\tscanf(\"%lf%lf%lf%lf%d\",&a.x,&a.y,&b.x,&b.y,&k);\n\t\tprint_p(sum_vec(a,b));\n\t\tprint_p(dif_vec(a,b));\n\t\tprint_p(scalar_vec(a,k));\n\t\tprint_p(minus_vec(a));\n\t}\n*/\n/*\n\tPOINT a,b;\n\twhile(1){\n\t\tscanf(\"%lf%lf%lf%lf\",&a.x,&a.y,&b.x,&b.y);\n\t\tprintf(\"%lf\\n\",distance(a,b));\n\t}\n*/\n/*\n\tint i,m,n;\n\tPOINT g[100];//n\n\tPOINT q;//m\n\tint ans = 0;\n\n\tscanf(\"%d\",&n);\n\tfor(i = 0;i < n;i++){\n\t\tscanf(\"%lf%lf\",&g[i].x,&g[i].y);\n\t}\n\tscanf(\"%d\",&m);\n\tfor(i = 0;i < m;i++){\n\t\tscanf(\"%lf%lf\",&q.x,&q.y);\n\t\tans = inclusion(g,n,q);\n\t\tprintf(\"%d\\n\",ans);\n\t}\n*/\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<math.h>\nint main(){\n    int n,ax,ay,bx,by,cx,cy,m,bax,bay,cax,cay,u;\n    double t,x,y,p,q,r,s;\n    scanf(\"%d%d%d%d\",&ax,&ay,&bx,&by);\n    scanf(\"%d\",&n);\n    bax=bx-ax;\n    bay=by-ay;\n    while(n--){\n        scanf(\"%d%d\",&cx,&cy);\n        cax=cx-ax;\n        cay=cy-ay;\n        t=(bax*cax+bay*cay)/(pow(bax,2)+pow(bay,2));\n        x=ax+t*bax;\n        y=ay+t*bay;\n        m=-(cx-x)*bay+(cy-y)*bax;\n        u=bax*cax+bay*cay;\n        p=pow(u,2);\n        q=(pow(bax,2)+pow(bay,2))*(pow(cax,2)+pow(cay,2));\n        if(p==q&&u<0&&(ax!=cx||ay!=cy)){\n            puts(\"ONLINE_BACKE\");\n        }else if(p==q){\n            r=pow(bax,2)+pow(bay,2);\n            s=pow(cax,2)+pow(cay,2);\n            if(s>r){\n                puts(\"ONLINE_FRONT\");\n            }else{\n                puts(\"ON_SEGMENT\");\n            }\n        }else if(m>0){\n            puts(\"COUNTER_CLOCKWISE\");\n        }else if(m<0){\n            puts(\"CLOCKWISE\");\n        }\n    }\n    return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n\nint main(void){\n   double k1, k2, l1, l2;\n   //kは傾き、lはベクトルのx軸の向きと長さを示す\n   int i, n, a, b, c, d, x, y;\n   scanf(\"%d %d %d %d\", &a, &b, &c, &d);\n   scanf(\"%d\", &n);\n   l1 = c - a;\n   y = d - b;\n   if(a != c){\n   k1 = y / l1;\n   }else{\n       if(d > b){\n           k1 = 100000;\n       }else{\n           k1 = -100000;\n       }\n   }\n   if(l1 > 0){\n       x = 1;\n   }else if(l1 < 0){\n       x = 0;\n   }else if(k1 > 0){\n       x = 2;\n   }else{\n       x = 3;\n   }\n   for(i = 0; i < n; i++){\n       scanf(\"%d %d\", &c, &d);\n       l2 = c - a;\n       if(a != c){\n           k2 = (d - b) / l2;\n           \n       }else{\n           if(d > b){\n               k2 = 100000;\n               \n           }else{\n               k2 = -100000;\n               \n           } \n           \n       }\n       switch(x){\n           case 0:\n           if(a == c && b == d){\n               printf(\"ON_SEGMENT\\n\");\n           }else if((l2 >= 0 && k2 > k1)||(l2 < 0 && k2 < k1) ){\n\t\t\t   printf(\"CLOCKWISE\\n\");\n\t\t   }else if((l2 >= 0 && k2 < k1)||(l2 < 0 && k2 > k1) ){\n\t\t\t   printf(\"COUNTER_CLOCKWISE\\n\");\n\t\t   }else if(l1 / l2 < 0){\n\t\t\t   printf(\"ONLINE_BACK\\n\");\n\t\t   }else if(l1 > l2){\n\t\t\t   printf(\"ONLINE_FRONT\\n\");\n\t\t   }else{\n\t\t\t   printf(\"ON_SEGMENT\\n\");\n\t\t   }\n\t\t   break;\n\t\t   case 1:\n           if(a == c && b == d){\n               printf(\"ON_SEGMENT\\n\");\n           }else if((l2 >= 0 && k2 < k1)||(l2 < 0 && k2 > k1) ){\n\t\t\t   printf(\"CLOCKWISE\\n\");\n\t\t   }else if((l2 >= 0 && k2 > k1)||(l2 < 0 && k2 < k1) ){\n\t\t\t   printf(\"COUNTER_CLOCKWISE\\n\");\n\t\t   }else if(l1 / l2 < 0){\n\t\t\t   printf(\"ONLINE_BACK\\n\");\n\t\t   }else if(l1 < l2){\n\t\t\t   printf(\"ONLINE_FRONT\\n\");\n\t\t   }else{\n\t\t\t   printf(\"ON_SEGMENT\\n\");\n\t\t   }\n\t\t   break;\n\t\t   case 2:\n           if(a == c && b == d){\n               printf(\"ON_SEGMENT\\n\");\n           }else if(l2 > 0){\n\t\t\t   printf(\"CLOCKWISE\\n\");\n\t\t   }else if(l2 < 0){\n\t\t\t   printf(\"COUNTER_CLOCKWISE\\n\");\n\t\t   }else if(k2 < 0){\n\t\t\t   printf(\"ONLINE_BACK\\n\");\n\t\t   }else if(d - b > y){\n\t\t\t   printf(\"ONLINE_FRONT\\n\");\n\t\t   }else{\n\t\t\t   printf(\"ON_SEGMENT\\n\");\n\t\t   }\n\t\t   break;\n\t\t   case 3:\n           if(a == c && b == d){\n               printf(\"ON_SEGMENT\\n\");\n           }else if(l2 < 0){\n\t\t\t   printf(\"CLOCKWISE\\n\");\n\t\t   }else if(l2 > 0){\n\t\t\t   printf(\"COUNTER_CLOCKWISE\\n\");\n\t\t   }else if(k2 > 0){\n\t\t\t   printf(\"ONLINE_BACK\\n\");\n\t\t   }else if(d - b < y){\n\t\t\t   printf(\"ONLINE_FRONT\\n\");\n\t\t   }else{\n\t\t\t   printf(\"ON_SEGMENT\\n\");\n\t\t   }\n\t\t   break;\n       }\n   }\n   return 0;\n}\n"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\n#define y1 y11111\n\ndouble x1,y1,x2,y2;\nint main(){\n\tscanf(\"%lf%lf%lf%lf\",&x1,&y1,&x2,&y2);\n\tx2-=x1;\n\ty2-=y1;\n\tint q;\n\tscanf(\"%d\",&q);\n\twhile(q--){\n\t\tdouble x,y;\n\t\tscanf(\"%lf%lf\",&x,&y);\n\t\tx-=x1;\n\t\ty-=y1;\n\t\tint c=x2*y-y2*x;\n\t\tif(c>0)puts(\"COUNTER_CLOCKWISE\");\n\t\telse if(c<0)puts(\"CLOCKWISE\");\n\t\telse{\n\t\t\tint r=x*x2+y*y2;\n\t\t\tif(r<0)puts(\"ONLINE_BACK\");\n\t\t\telse if(r>x2*x2+y2*y2)puts(\"ONLINE_FRONT\");\n\t\t\telse puts(\"ON_SEGMENT\");\n\t\t}\n\t}\n}\n"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\n\nint main(void){\n  double xp1,xp0,yp1,yp0,xp2,yp2;\n  int q;\n  scanf(\"%lf %lf %lf %lf\",&xp0,&yp0,&xp1,&yp1);\n  scanf(\"%d\",&q);\n  double z,k;\n  for(int i=0;i<q;i++){\n    scanf(\"%lf %lf\",&xp2,&yp2);\n    z=(xp1-xp0)*(yp2-yp0)-(yp1-yp0)*(xp2-xp0);\n    if(z>0){\n      printf(\"COUNTER_CLOCKWISE\\n\");\n    }\n    else if(z<0){\n      printf(\"CLOCKWISE\\n\");\n    }\n    else{\n      if(xp1==xp0){\n        k=(yp1-yp0)/(yp2-yp0);\n      }\n      else{\n        k=(xp1-xp0)/(xp2-xp0);\n      }\n      if(k<0){\n        printf(\"ONLINE_BACK\\n\");\n      }\n      else if(k<1){\n        printf(\"ONLINE_FRONT\\n\");\n      }\n      else{\n        printf(\"ON_SEGMENT\\n\");\n      }\n    }\n  }\n  return 0;\n}\n\n"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<stdlib.h>\n#include<math.h>\n\ntypedef long long int int64;\n\n#define MAX(a,b) ((a)>(b)?(a):(b))\n#define MIN(a,b) ((a)<(b)?(a):(b))\n#define ABS(a) ((a)>(0)?(a):-(a))\n\ntypedef struct vector{\n  int x,y;\n} vec;\n\nint innerNorm(vec a,vec b){\n  return a.x*b.x+a.y*b.y;\n}\n\nint norm(vec a){\n  return a.x*a.x+a.y*a.y;\n}\n\nint isParallel(vec a,vec b){\n  int in=innerNorm(a,b);\n  int x=norm(a);\n  int y=norm(b);\n  return (int64)in*in==(int64)x*y;\n}\n\nvoid run(void){\n  int a,b,c,d;\n  scanf(\"%d%d%d%d\",&a,&b,&c,&d);\n  vec p;\n  p.x=c-a;\n  p.y=d-b;\n  int query;\n  scanf(\"%d\",&query);\n  while(query--){\n    int x,y;\n    scanf(\"%d%d\",&x,&y);\n    vec q;\n    q.x=x-a;\n    q.y=y-b;\n    if(isParallel(p,q)){\n      if(ABS(p.x+q.x)<ABS(p.x)+ABS(q.x) || ABS(p.y+q.y)<ABS(p.y)+ABS(q.y)){\n\tprintf(\"ONLINE_BACK\\n\");\n      } else {\n\tif(norm(p)<norm(q)){\n\t  printf(\"ONLINE_FRONT\\n\");\n\t} else {\n\t  printf(\"ON_SEGMENT\\n\");\n\t}\n      }\n    } else {\n      int t=p.x*q.y-p.y*q.x;\n      printf(\"%s\\n\",t>0?\"COUNTER_CLOCKWISE\":\"CLOCKWISE\");\n    }\n  }\n}\n\nint main(void){\n  run();\n  return 0;\n}\n\n"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<math.h>\n#include<stdlib.h>\n#define max(a,b) a<b?b:a\n#define min(a,b) a<b?b:a\n#define POW2(a)  a*a\n#define ROOP(i,n) for(i = 0;i < n;i++)\n#define _USE_MATH_DEFINES\n\ntypedef struct POINT{\n\tdouble x;\n\tdouble y;\n}POINT;\ntypedef struct LINE{\n\tPOINT s;//start point\n\tPOINT e;//end point\n}LINE;\ntypedef struct COMPLEX{\n\tdouble r;//?????¢\n\tdouble q;//????§???????theta\n}COMPLEX;\n\n//POINT????????????\nvoid print_p(POINT a){\n\tprintf(\"(%lf,%lf)\\n\",a.x,a.y);\n}\n\n//LINE????????????\nvoid print_l(LINE a){\n\tprintf(\"(%lf,%lf) -> (%lf,%lf)\\n\",(a.s).x,(a.s).y,(a.e).x,(a.e).y);\n}\n\n//COMPLEX????????????\nvoid print_c(COMPLEX a){\n\tprintf(\"(%lf,%lf)\\n\",a.r,a.q);\n}\n\n//????????????????????¢?????????\ndouble norm2(POINT a){\n\treturn POW2(a.x)+POW2(a.y);\n}\n\n//????????????????????¢\ndouble norm(POINT a){\n\treturn sqrt(norm2(a));\n}\n\n//a->b?????´??§???????????????\nPOINT make_vec(POINT a,POINT b){\n\tb.x -= a.x;\n\tb.y -= a.y;\n\treturn b;\n}\n\n//2???a,b???????????¢\ndouble distance(POINT a,POINT b){\n\treturn norm(make_vec(a,b));\n}\n\n//??´??§????????????\nPOINT sum_vec(POINT a,POINT b){\n\ta.x += b.x;\n\ta.y += b.y;\n\treturn a;\n}\n\n//??´??§????????????\n//mkae_vec??¨?????£??????????????¨???????????????\n//??????????????????\nPOINT dif_vec(POINT a,POINT b){\n\ta.x -= b.x;\n\ta.y -= b.y;\n\treturn a;\n}\n\n//??´??§????????????????????????\nPOINT scalar_vec(POINT a,double k){\n\ta.x *= k;\n\ta.y *= k;\n\treturn a;\n}\n\n//???????????????\nPOINT minus_vec(POINT a){\n\treturn scalar_vec(a,-1.0);\n}\n\n//??????\ndouble dot(POINT a,POINT b){\n\treturn a.x*b.x + a.y*b.y;\n}\n\n//??????\ndouble cross(POINT a,POINT b){\n\treturn a.x*b.y - a.y*b.x;\n}\n\n//AP:PB=t:s??¨?????????????±???????\n//k, 0:??????, 1:??????\n//* t:(1-t)??§???????????£??????????????£????????????????????????????????????????????????????????¨?????£???\nPOINT division(POINT a,POINT b,double t,double s,int k){\n\tdouble tmp = t + s * (1 - k*2);\n\ta.x += (make_vec(a,b)).x / tmp * t;\n\ta.y += (make_vec(a,b)).y / tmp * t;\n\treturn a;\n}\n\n//???p????????´???a?????????????????????????¶??????????\nPOINT perpendicular(LINE a,POINT p){\n\tPOINT ps = make_vec(p,a.s);\n\tPOINT pe = make_vec(p,a.e);\n\tdouble t = norm2(ps) - dot(ps,pe);\n\tdouble s = norm2(pe) - dot(ps,pe);\n\treturn division(a.s,a.e,t,s,0);\n}\n\n//??´???a???????????????p??¨????§°???????????????\nPOINT reflection(LINE a,POINT p){\n\tPOINT h = perpendicular(a,p);\n\treturn sum_vec(h,make_vec(p,h));\n}\n\n//* ????§???¢?????????\nint inclusion(POINT a[],int n,POINT p){\n\tint ans = 0;\n\tint i;\n\tPOINT g[n+1];\n\tdouble w,rad = 0.0;\n\n\tfor(i = 0;i < n;i++){\n\t\tg[i] = a[i];\n\t}\n\tg[n] = g[0];\n\n\tfor(i = 0;i < n;i++){\n\t\tif(g[i].x == p.x && g[i].y == p.y){\n\t\t\treturn ans = 1;\n\t\t}\n\t}\n\tfor(i = 0;i < n;i++){\n\t\tw = atan2(cross(make_vec(p,g[i]),make_vec(p,g[i+1])),\n\t\t\t\tdot(make_vec(p,g[i]),make_vec(p,g[i+1])));\n\t\trad += w;\n\t\tif(fabs(w - M_PI) <= 0.000001 ||\n\t\t\t fabs(w + M_PI) <= 0.000001)\n\t\t\treturn ans = 1;\n\t}\n\tif(fabs(rad - M_PI*2)<=0.000001){//2??\n\t\treturn ans = 2;//in!\n\t}\n\treturn ans;\n}\n\n//\nint ccw(LINE a,POINT p){\n\t// a.s, a.e, p?????????????????????\n\t// ???????¨???????????????????????????????  1\n\t// ????¨?????????????????????????????????? -1\n\t// p, a.s, a.e????????????????????? 2\n\t// a.s, a.e, p?????????????????????-2\n\t// ???p?????´???a???????????????????????? 0\n\tint cls = cross(make_vec(a.s,a.e),make_vec(a.s,p));\n\tif(cls > 0){\n\t\treturn  1;\n\t}else if(cls < 0){\n\t\treturn -1;\n\t}else if(dot(make_vec(a.s,a.e),make_vec(a.s,p)) < 0){\n\t\treturn  2;\n\t}else if(dot(make_vec(a.e,a.s),make_vec(a.e,p)) < 0){\n\t\treturn -2;\n\t}else{\n\t\treturn  0;\n\t}\n}\n\nint main(){\n\t\n/*\n\tPOINT a,b,q;\n\tdouble t,s;\n\n\tscanf(\"%lf%lf%lf%lf%lf%lf\",&a.x,&a.y,&b.x,&b.y,&t,&s);\n\n\tq = division(a,b,t,s,0);\n\tprintf(\"%lf %lf\\n\",q.x,q.y);\n*/\n\n\tLINE a;\n\tPOINT b;\n\tint k;\n\tchar s[5][100]={{\"ONLINE_FRONT\"},{\"CLOCKWISE\"},{\"ON_SEGMENT\"},{\"COUNTER_CLOCKWISE\"},{\"ONLINE_BACK\"}};\n\t\n\tscanf(\"%lf%lf%lf%lf%d\",&a.s.x,&a.s.y,&a.e.x,&a.e.y,&k);\n\twhile(k--){\n\t\tscanf(\"%lf%lf\",&b.x,&b.y);\n\t\tprintf(\"%s\\n\",s[ccw(a,b)+2]);\n\t}\n\n/*\n\tPOINT a,b;\n\tint k;\n\twhile(1){\n\t\tscanf(\"%lf%lf%lf%lf%d\",&a.x,&a.y,&b.x,&b.y,&k);\n\t\tprint_p(sum_vec(a,b));\n\t\tprint_p(dif_vec(a,b));\n\t\tprint_p(scalar_vec(a,k));\n\t\tprint_p(minus_vec(a));\n\t}\n*/\n/*\n\tPOINT a,b;\n\twhile(1){\n\t\tscanf(\"%lf%lf%lf%lf\",&a.x,&a.y,&b.x,&b.y);\n\t\tprintf(\"%lf\\n\",distance(a,b));\n\t}\n*/\n/*\n\tint i,m,n;\n\tPOINT g[100];//n\n\tPOINT q;//m\n\tint ans = 0;\n\n\tscanf(\"%d\",&n);\n\tfor(i = 0;i < n;i++){\n\t\tscanf(\"%lf%lf\",&g[i].x,&g[i].y);\n\t}\n\tscanf(\"%d\",&m);\n\tfor(i = 0;i < m;i++){\n\t\tscanf(\"%lf%lf\",&q.x,&q.y);\n\t\tans = inclusion(g,n,q);\n\t\tprintf(\"%d\\n\",ans);\n\t}\n*/\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n\nint updown(double a[2], double b[2], double c[2]) \n{\n    double dxab, dyab, dxac, dyac, ans;\n\n    dxab = b[0] - a[0];\n    dyab = b[1] - a[1];\n\n    dxac = c[0] - a[0];\n    dyac = c[1] - a[1];\n\n    ans = dxab * dyac - dyab * dxac;\n\n    if (ans > 0) {\n        puts(\"COUNTER_CLOCKWIZE\");\n    } else if (ans < 0) {\n        puts(\"CLOCKWIZE\");\n    } else {    //equal\n        if ( dxab * dxac < 0 || dyab * dyac < 0) {\n            puts(\"ONLINE_BACK\");\n        } else {\n            if ( ((dxab * dxab) + (dyab * dyab)) <\n                    ((dxac * dxac) + (dyac * dyac)) ) {\n                puts(\"ONLINE_FRONT\"); \n            } else {\n                puts(\"ON_SEGMENT\");\n            }\n        }\n    }\n    return ans;\n}\n\nint main(void)\n{\n    double a[2], b[2], tmp[2], ans;\n    int n, i;\n\n    for (i = 0; i < 2; i++) {\n        scanf(\"%lf\", &a[i]);\n    }\n\n    for (i = 0; i < 2; i++) {\n        scanf(\"%lf\", &b[i]);\n    }\n\n    scanf(\"%d\",&n);\n\n    for (i = 0; i < n; i++) {\n        scanf(\"%lf%lf\", &tmp[0], &tmp[1]);\n        ans = updown(a, b, tmp);\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\n#include <float.h>\n\ninline double cross_product_z(double v0x, double v0y, double vx, double vy) {\n    return v0x * vy - v0y * vx;\n}\n\nint main() {\n    int x, y, x0, y0, x1, y1;\n    int q;\n    double v0x, v0y, vx, vy, cp, cosa, denom, v0v, vv;\n    const char *judge;\n    const char *message[] = {\n        \"COUNTER_CLOCKWISE\",\n        \"CLOCKWISE\",\n        \"ONLINE_BACK\",\n        \"ONLINE_FRONT\",\n        \"ON_SEGMENT\"\n    };\n\n    scanf(\"%d %d %d %d\", &x0, &y0, &x1, &y1);\n    scanf(\"%d\", &q);\n\n    v0x = x1 - x0;\n    v0y = y1 - y0;\n    \n    while (q--) {\n        scanf(\"%d %d\", &x, &y);\n        vx = x - x0;\n        vy = y - y0;\n        cp = cross_product_z(v0x, v0y, vx, vy);\n        if (cp > 0) {\n            judge = message[0];\n        }\n        else if (cp < 0) {\n            judge = message[1];\n        }\n        else {\n            v0v = v0x*v0x+v0y*v0y;\n            vv = vx*vx+vy*vy;\n            denom = sqrt(v0v) * sqrt(vv);\n            if (denom < DBL_MIN * 10) {\n                judge = message[4];\n            }\n            else {\n                cosa = (v0x*vx + v0y*vy)/denom;\n                if (cosa + 1 < DBL_MIN) {\n                    judge = message[2];\n                }\n                else {\n                    if (v0v < vv) {\n                        judge = message[3];\n                    }\n                    else {\n                        judge = message[4];\n                    }\n                }\n            }\n\n        }\n        printf(\"%s\\n\", judge);\n    }\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#define DOT(v1, v2) (v1.x * v2.x + v1.y * v2.y)\n#define CROSS(v1, v2) (v1.x * v2.y - v1.y * v2.x)\n#define NORM(v) (v.x * v.x + v.y * v.y)\n\ntypedef struct { double x, y; } point_t;\ntypedef point_t vector_t;\ntypedef struct { point_t p0, p1; } segment_t;\ntypedef segment_t line_t;\n\nstatic vector_t minus(vector_t v1, vector_t v2) {\n  vector_t ret = { v1.x - v2.x, v1.y - v2.y };\n  return ret;\n}\n\nstatic char *clockwise(segment_t s, point_t p) {\n  vector_t a = minus(s.p1, s.p0);\n  vector_t b = minus(p, s.p0);\n  double c = CROSS(a, b);\n  double d = DOT(a, b);\n  double na = NORM(a);\n  double nb = NORM(b);\n  if (c > 0.0) return \"COUNTER_CLOCKWISE\";\n  if (c < 0.0) return \"CLOCKWISE\";\n  if (d < 0.0) return \"ONLINE_BACK\";\n  if (nb > na) return \"ONLINE_FRONT\";\n  return \"ON_SEGMENT\";\n}\n\nint main(int argc, char **argv) {\n  int q, i;\n  segment_t s;\n  point_t p;\n\n  scanf(\"%lf %lf %lf %lf\", &s.p0.x, &s.p0.y, &s.p1.x, &s.p1.y);\n  scanf(\"%d\", &q);\n  for (i = 0; i < q; ++i) {\n    scanf(\"%lf %lf\", &p.x, &p.y);\n    printf(\"%s\\n\", clockwise(s, p));\n  }\n}\n"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<math.h>\n#include<stdlib.h>\n#define max(a,b) a<b?b:a\n#define min(a,b) a<b?b:a\n#define POW2(a)  a*a\n#define ROOP(i,n) for(i = 0;i < n;i++)\n#define _USE_MATH_DEFINES\n\ntypedef struct POINT{\n\tdouble x;\n\tdouble y;\n}POINT;\ntypedef struct LINE{\n\tPOINT s;//start point\n\tPOINT e;//end point\n}LINE;\ntypedef struct COMPLEX{\n\tdouble r;//?????¢\n\tdouble q;//????§???????theta\n}COMPLEX;\n\n//POINT????????????\nvoid print_p(POINT a){\n\tprintf(\"(%lf,%lf)\\n\",a.x,a.y);\n}\n\n//LINE????????????\nvoid print_l(LINE a){\n\tprintf(\"(%lf,%lf) -> (%lf,%lf)\\n\",(a.s).x,(a.s).y,(a.e).x,(a.e).y);\n}\n\n//COMPLEX????????????\nvoid print_c(COMPLEX a){\n\tprintf(\"(%lf,%lf)\\n\",a.r,a.q);\n}\n\n//????????????????????¢?????????\ndouble norm2(POINT a){\n\treturn POW2(a.x)+POW2(a.y);\n}\n\n//????????????????????¢\ndouble norm(POINT a){\n\treturn sqrt(norm2(a));\n}\n\n//a->b?????´??§???????????????\nPOINT make_vec(POINT a,POINT b){\n\tb.x -= a.x;\n\tb.y -= a.y;\n\treturn b;\n}\n\n//2???a,b???????????¢\ndouble distance(POINT a,POINT b){\n\treturn norm(make_vec(a,b));\n}\n\n//??´??§????????????\nPOINT sum_vec(POINT a,POINT b){\n\ta.x += b.x;\n\ta.y += b.y;\n\treturn a;\n}\n\n//??´??§????????????\n//mkae_vec??¨?????£??????????????¨???????????????\n//??????????????????\nPOINT dif_vec(POINT a,POINT b){\n\ta.x -= b.x;\n\ta.y -= b.y;\n\treturn a;\n}\n\n//??´??§????????????????????????\nPOINT scalar_vec(POINT a,double k){\n\ta.x *= k;\n\ta.y *= k;\n\treturn a;\n}\n\n//???????????????\nPOINT minus_vec(POINT a){\n\treturn scalar_vec(a,-1.0);\n}\n\n//??????\ndouble dot(POINT a,POINT b){\n\treturn a.x*b.x + a.y*b.y;\n}\n\n//??????\ndouble cross(POINT a,POINT b){\n\treturn a.x*b.y - a.y*b.x;\n}\n\n//AP:PB=t:s??¨?????????????±???????\n//k, 0:??????, 1:??????\n//* t:(1-t)??§???????????£??????????????£????????????????????????????????????????????????????????¨?????£???\nPOINT division(POINT a,POINT b,double t,double s,int k){\n\tdouble tmp = t + s * (1 - k*2);\n\ta.x += (make_vec(a,b)).x / tmp * t;\n\ta.y += (make_vec(a,b)).y / tmp * t;\n\treturn a;\n}\n\n//???p????????´???a?????????????????????????¶??????????\nPOINT perpendicular(LINE a,POINT p){\n\tPOINT ps = make_vec(p,a.s);\n\tPOINT pe = make_vec(p,a.e);\n\tdouble t = norm2(ps) - dot(ps,pe);\n\tdouble s = norm2(pe) - dot(ps,pe);\n\treturn division(a.s,a.e,t,s,0);\n}\n\n//??´???a???????????????p??¨????§°???????????????\nPOINT reflection(LINE a,POINT p){\n\tPOINT h = perpendicular(a,p);\n\treturn sum_vec(h,make_vec(p,h));\n}\n\n//* ????§???¢?????????\nint inclusion(POINT a[],int n,POINT p){\n\tint ans = 0;\n\tint i;\n\tPOINT g[n+1];\n\tdouble w,rad = 0.0;\n\n\tfor(i = 0;i < n;i++){\n\t\tg[i] = a[i];\n\t}\n\tg[n] = g[0];\n\n\tfor(i = 0;i < n;i++){\n\t\tif(g[i].x == p.x && g[i].y == p.y){\n\t\t\treturn ans = 1;\n\t\t}\n\t}\n\tfor(i = 0;i < n;i++){\n\t\tw = atan2(cross(make_vec(p,g[i]),make_vec(p,g[i+1])),\n\t\t\t\tdot(make_vec(p,g[i]),make_vec(p,g[i+1])));\n\t\trad += w;\n\t\tif(fabs(w - M_PI) <= 0.000001 ||\n\t\t\t fabs(w + M_PI) <= 0.000001)\n\t\t\treturn ans = 1;\n\t}\n\tif(fabs(rad - M_PI*2)<=0.000001){//2??\n\t\treturn ans = 2;//in!\n\t}\n\treturn ans;\n}\n\n//\nint ccw(LINE a,POINT p){\n\t// a.s, a.e, p?????????????????????\n\t// ???????¨???????????????????????????????  1\n\t// ????¨?????????????????????????????????? -1\n\t// p, a.s, a.e????????????????????? 2\n\t// a.s, a.e, p?????????????????????-2\n\t// ???p?????´???a???????????????????????? 0\n\tint cls = cross(make_vec(a.s,a.e),make_vec(a.s,p));\n\tif(cls > 0){\n\t\treturn  1;\n\t}else if(cls < 0){\n\t\treturn -1;\n\t}else if(dot(make_vec(a.s,a.e),make_vec(a.s,p)) < 0){\n\t\treturn  2;\n\t}else if(dot(make_vec(a.e,a.s),make_vec(a.e,p)) < 0){\n\t\treturn -2;\n\t}else{\n\t\treturn  1;\n\t}\n}\n\nint main(){\n\t\n/*\n\tPOINT a,b,q;\n\tdouble t,s;\n\n\tscanf(\"%lf%lf%lf%lf%lf%lf\",&a.x,&a.y,&b.x,&b.y,&t,&s);\n\n\tq = division(a,b,t,s,0);\n\tprintf(\"%lf %lf\\n\",q.x,q.y);\n*/\n\n\tLINE a;\n\tPOINT b;\n\tint k;\n\tchar s[5][100]={{\"ONLINE_FRONT\"},{\"CLOCKWISE\"},{\"ON_SEGMENT\"},{\"COUNTER_CLOCKWISE\"},{\"ONLINE_BACK\"}};\n\t\n\tscanf(\"%lf%lf%lf%lf%d\",&a.s.x,&a.s.y,&a.e.x,&a.e.y,&k);\n\twhile(k--){\n\t\tscanf(\"%lf%lf\",&b.x,&b.y);\n\t\tprintf(\"%s\\n\",s[ccw(a,b)+2]);\n\t}\n\n/*\n\tPOINT a,b;\n\tint k;\n\twhile(1){\n\t\tscanf(\"%lf%lf%lf%lf%d\",&a.x,&a.y,&b.x,&b.y,&k);\n\t\tprint_p(sum_vec(a,b));\n\t\tprint_p(dif_vec(a,b));\n\t\tprint_p(scalar_vec(a,k));\n\t\tprint_p(minus_vec(a));\n\t}\n*/\n/*\n\tPOINT a,b;\n\twhile(1){\n\t\tscanf(\"%lf%lf%lf%lf\",&a.x,&a.y,&b.x,&b.y);\n\t\tprintf(\"%lf\\n\",distance(a,b));\n\t}\n*/\n/*\n\tint i,m,n;\n\tPOINT g[100];//n\n\tPOINT q;//m\n\tint ans = 0;\n\n\tscanf(\"%d\",&n);\n\tfor(i = 0;i < n;i++){\n\t\tscanf(\"%lf%lf\",&g[i].x,&g[i].y);\n\t}\n\tscanf(\"%d\",&m);\n\tfor(i = 0;i < m;i++){\n\t\tscanf(\"%lf%lf\",&q.x,&q.y);\n\t\tans = inclusion(g,n,q);\n\t\tprintf(\"%d\\n\",ans);\n\t}\n*/\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <iostream>\n#include <iomanip>\n#include <vector>\n#include <map>\n#include <set>\n#include <deque>\n#include <stack>\n#include <queue>\n#include <algorithm>\n#include <numeric>\n#include <cstdio>\n#include <cmath>\n#include <cstdlib>\n#include <cctype>\n#include <string>\n#include <cstring>\n#include <ctime>\n#include <cassert>\n#include <climits>\n\nusing namespace std;\n\ntypedef long long lint;\n\n//定数\nconst double EPS = 1e-10;\nconst int dx[] = {-1, 0, 1, 0};\nconst int dy[] = {0, 1, 0, -1};\nconst int INF = 1001001001;\nconst lint INFLL = 1001001001001001001ll;\n\n//初期化関連\n#define zclear(a) memset((a), 0 ,sizeof(a))\n#define mclear(a) memset((a), -1, sizeof(a))\n\n//デバッグ出力\n#define show(x)  cerr << #x << \" = \" << (x) << endl;\n#define debug(x) cerr << #x << \" = \" << (x) << \" (L\" << __LINE__ << \")\" << \" \" << __FILE__ << endl;\n\nbool eq(double a, double b) //a == b\n{\n    return (fabs(a - b) <= EPS);\n}\n\nbool neq(double a, double b) //a != b\n{\n    return (!eq(a, b));\n}\n  \nbool lt(double a, double b) //a < b\n{\n    return (a - b < -EPS);\n}\n  \nbool leq(double a, double b) //a <= b\n{\n    return (lt(a, b) || eq(a, b));\n}\n  \nbool gt(double a, double b) //a > b\n{\n    return (a - b > +EPS);\n}\n  \nbool geq(double a, double b) //a >= b\n{\n    return (gt(a, b) || eq(a, b));\n}\n\nclass Point{\npublic:\n\tdouble x, y;\n\tPoint(double x = 0, double y = 0): x(x), y(y){}\n\tPoint operator + (Point p){return Point(x + p.x, y + p.y);}\n\tPoint operator - (Point p){return Point(x - p.x, y - p.y);}\n\tPoint operator * (double a){return Point(x * a, y * a);}\n\tPoint operator / (double a){return Point(x / a, y / a);}\n\tPoint operator * (const Point &a){\n\t\treturn Point(x * a.x - y * a.y, x * a.y + y * a.x);\n\t}\n\tbool operator < (const Point &p) const {\n\t\treturn (x != p.x ? x < p.x : y < p.y);\n\t}\n\tbool operator == (const Point &p) const {\n\t\treturn (fabs(x - p.x) < EPS && fabs(y - p.y) < EPS);\n\t}\n};\n\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\ndouble norm(Vector a){return (a.x * a.x + a.y * a.y);}\ndouble abs(Vector a){return (sqrt(norm(a)));}\ndouble abs(Vector a, Vector b){return (sqrt(norm(a - b)));}\ndouble dot(Vector a, Vector b){return (a.x * b.x + a.y * b.y);}\ndouble cross(Vector a, Vector b){return (a.x * b.y - a.y * b.x);}\ndouble atan(Vector a){return atan2(a.y, a.x);}\nbool sortX(Point a, Point b){return (a.x != b.x ? lt(a.x, b.x) : lt(a.y, b.y));}\nbool sortY(Point a, Point b){return (a.y != b.y ? lt(a.y, b.y) : lt(a.x, b.x));}\nPoint baseP;\nbool sortT(Point a, Point b){return (gt(cross(a - baseP, b - baseP), 0));}\n\nint ccw(Point p0, Point p1, Point p2)\n{\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (cross(a, b) > EPS) return (+1); //p0, p1, p2 が反時計周り\n\tif (cross(a, b) < -EPS) return (-1);//p0, p1, p2 が時計回り\n\tif (dot(a, b) < -EPS) return (+2); //p2--p0--p1 の順で一直線上\n\tif (norm(a) < norm(b)) return (-2); //p0--p1--p2 の順で一直線上\n\treturn (0); //p0--p2--p1 の順で一直線上\n}\n\nPolygon normalize(Polygon &v)\n{\n    int pt = 0;\n    for (int i = 1; i < v.size(); i++){\n        if (v[pt].y > v[i].y || (v[pt].y == v[i].y && v[pt].x > v[i].x)){\n            pt = i;\n        }\n    }\n    swap(v[pt], v[0]);\n    baseP = v[0];\n    sort(v.begin() + 1, v.end(), sortT);\n    return (v);\n}\n\nPolygon conhel(Polygon& ps)\n{\n    sort(ps.begin(), ps.end());\n    int k = 0, n = (int)ps.size();\n    Polygon qs(n * 2);\n      \n    for (int i = 0; i < n; i++){\n      while (k > 1 && cross(qs[k - 1] - qs[k - 2], ps[i] - qs[k - 1]) < EPS) k--;\n      qs[k++] = ps[i];\n    }\n  \n    for (int i = n - 2, t = k; i >= 0; i--){\n      while (k > t && cross(qs[k - 1] - qs[k - 2], ps[i] - qs[k - 1]) < EPS) k--;\n      qs[k++] = ps[i];\n    }\n  \n    qs.resize(k - 1);\n    return (qs);\n}\n\ndouble getArea(Polygon t){\n    double ans = 0.0;\n\tt = normalize(t);\n    for (unsigned int i = 0; i < t.size(); i++)\n        ans += cross(t[i] , t[(i + 1) % t.size()]);\n    return (fabs(ans) / 2);\n}\n\nbool isIntersectLL(Point p1, Point p2, Point p3, Point p4)\n{// 同一直線の場合は交差していると判定する.\n\treturn (abs(cross(p2 - p1, p4 - p3)) > EPS || // 傾きが異なる\n\t\tabs(cross(p2 - p1, p4 - p3)) < EPS); // 同じ直線である\n}\nbool isIntersectLS(Point p1, Point p2, Point p3, Point p4)\n{// 同一直線上にある場合も交差と判定\n\treturn (cross(p2 - p1, p3 - p1) * cross(p2 - p1, p4 - p1) < EPS);\n}\nbool isIntersectLP(Point p1, Point p2, Point p)\n{\n\treturn (neq(abs(ccw(p1, p2, p)), 1));\n}\nbool isIntersectSS(Point p1, Point p2, Point p3, Point p4)\n{\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n             ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\nbool isIntersectSP(Point p1, Point p2, Point p)\n{\n\treturn (eq(ccw(p1, p2, p), 0));\n}\nbool isInsideCP(Point c, double r, Point p)\n{\n\treturn (leq(abs(c - p), r));\n}\nbool isInsideCC(Point c1, double r1, Point c2, double r2)\n{\n\treturn (leq(abs(c1 - c2), r1 + r2) && geq(abs(c1 - c2), abs(r1 - r2)));\n}\nbool isInsidePolyP(Polygon gon, Point p)\n{\n    for (int i = 0; i < gon.size(); i++){\n        if (ccw(gon[i], gon[(i + 1) % gon.size()], p) == -1) return (false);\n    }\n    return (true);\n}\n\nPoint projection(Point p1, Point p2, Point p3) //直線p1p2 上への写像\n{\n\tdouble t = dot(p3 - p1, p2 - p1) / norm(p2 - p1);\n\treturn (p1 + (p2 - p1) * t);\n}\nPoint reflection(Point p1, Point p2, Point p3) //直線p1p2 上への反射\n{\n\treturn (p3 + (projection(p1, p2, p3) - p3) * 2);\n}\ndouble distanceLP(Point p1, Point p2, Point p)\n{\n\treturn (abs(p - projection(p1, p2, p)));\n}\ndouble distanceLL(Point l1, Point l2, Point m1, Point m2)\n{\n\treturn (isIntersectLL(l1, l2, m1, m2) ? 0 : distanceLP(l1, l2, m1));\n}\ndouble distanceLS(Point l1, Point l2, Point s1, Point s2)\n{\n    if (isIntersectLS(l1, l2, s1, s2)) return (0);\n\treturn (min(distanceLP(l1, l2, s1), distanceLP(l1, l2, s2)));\n}\ndouble distanceSP(Point s1, Point s2, Point p)\n{\n\tPoint r = projection(s1, s2, p);\n\tif (isIntersectSP(s1, s2, r)) return (abs(r - p));\n\treturn (min(abs(s1 - p), abs(s2 - p)));\n}\ndouble distanceSS(Point s1, Point s2, Point t1, Point t2){\n\tif (isIntersectSS(s1, s2, t1, t2)) return (0);\n\treturn (min(min(distanceSP(s1, s2, t1), distanceSP(s1, s2, t2)),\n\t\t\tmin(distanceSP(t1, t2, s1), distanceSP(t1, t2, s2))));\n}\nPoint interPointLL(Point a1, Point a2, Point b1, Point b2)\n{\n\tdouble d = cross(a2 - a1, b2 - b1);\n\tif (abs(d) < EPS) throw \"Segment is Paralell!\";\n\tPoint a = a2 - a1, b = b2 - b1;\n    double t = cross(b, b1 - a1) / cross(b, a);\n    return (a1 + a * t);\n}\nvector<Point> interPointCC(Point c1, double r1, Point c2, double r2)\n{\n\tvector<Point> res;\n\tif (abs(c1 - c2) < EPS) return (vector<Point>()); // 交点が絶対にない\n\tdouble d = abs(c1 - c2);\n\tdouble rc = (d * d + r1 * r1 - r2 * r2) / (2 * d);\n\tdouble rs = sqrt(r1 * r1 - rc * rc);\n\tPoint diff = (c2 - c1) / d;\n\tres.push_back(Point(c1 + diff * Point(rc, rs)));\n\tres.push_back(Point(c1 + diff * Point(rc, -rs)));\n\treturn (res);\n}\nvector<Point> crosspointCL(Point a, double ra, Point b1, Point b2)\n{\n\tvector<Point> res;\n\tdouble dist = distanceLP(b1, b2, a);\n\tif (leq(dist, ra)){\n\t\tPoint s = projection(b1, b2, a);\n\t\tdist = sqrt(ra * ra - dist * dist);\n\t\tPoint t = (b2 - b1) / abs(b2 - b1);\n\t\tres.push_back(s + t * dist);\n\t\tres.push_back(s - t * dist);\n\t}\n\treturn (res);\n}\n\nPoint unitVector(Vector t)\n{\n    double u = abs(t);\n    return (Point(t.x / u , t.y / u));\n}\n\nPoint normalVector(Point p, Point a, Point b)\n{\n    Point v = unitVector(b - a);\n    v = cross(v, p - a) > 0 ? Point(v.y, -v.x) : Point(-v.y, v.x);\n    return v * distanceLP(p, a, b);\n}\n  \ndouble getCos(Vector a, Vector b)\n{\n    return (dot(a, b) / (abs(a) * abs(b)));\n}\n  \ndouble getSin(Vector a, Vector b)\n{\n    double t = getCos(a, b);\n    return (sqrt(1.0 - t * t));\n}\n  \ndouble getArg(Vector v)\n{\n    return (atan2(v.y, v.x));\n}\n\nPoint rotate(Point t, Point p, double r)\n{\n    double ta = cos(r) * (t.x - p.x) - sin(r) * (t.y - p.y) + p.x;\n    double tb = sin(r) * (t.x - p.x) + cos(r) * (t.y - p.y) + p.y;\n    return (Point(ta, tb));\n}\n\nint main()\n{\n\tint n;\n\tPoint p0, p1;\n\t\n\tscanf(\"%lf %lf %lf %lf\", &p0.x, &p0.y, &p1.x, &p1.y);\n\tscanf(\"%d\", &n);\n\t\n\tfor (int i = 0; i < n; i++){\n\t\tPoint p2;\n\t\tscanf(\"%lf %lf\", &p2.x, &p2.y);\n\t\tint J = ccw(p0, p1, p2);\n\t\tif (J == 1) printf(\"COUNTER_CLOCKWISE\\n\");\n\t\telse if (J == -1) printf(\"CLOCKWISE\\n\");\n\t\telse if (J == 2) printf(\"ONLINE_BACK\\n\");\n\t\telse if (J == -2) printf(\"ONLINE_FRONT\\n\");\n\t\telse printf(\"ON_SEGMENT\\n\");\n\t}\n\t\n\treturn (0);\n}"
  },
  {
    "language": "Java",
    "code": "import java.awt.geom.Line2D;\nimport java.awt.geom.Point2D;\nimport java.util.*;\n\nimport javax.sound.sampled.Line;\npublic class Main {\n\tScanner in = new Scanner(System.in);\n\tpublic static void main(String[] args) {\n\t\tnew Main();\n\t}\n\n\tpublic Main() {\n\t\tnew AOJCGL_1C().doIt();\n\t}\n\n\tclass AOJCGL_1C{\n\t\tboolean Online(Point2D from,Point2D to,Point2D target){\n\t\t\tLine2D l = new Line2D.Double(from, to);\n//\t\t\tSystem.out.println(l.ptSegDist(target));\n\t\t\tdouble d = l.ptSegDist(target);\n\t\t\tif(d<0.000000001)return true;\n\t\t\treturn false;\n\t\t}\n\n\n\t\tvoid doIt(){\n\t\t\tPoint2D p0 = new Point2D.Double(in.nextDouble(),in.nextDouble());\n\t\t\tPoint2D p1 = new Point2D.Double(in.nextDouble(),in.nextDouble());\n\t\t\tint q = in.nextInt();\n\t\t\tfor(int i=0;i<q;i++){\n\t\t\t\tPoint2D p2 = new Point2D.Double(in.nextDouble(), in.nextDouble());\n\t\t\t\tif(i==89)System.out.println(p2);\n\t\t\t\tint d = right_left(p0, p1, p2);\n\t\t\t\tif(d>0)System.out.println(\"CLOCKWISE\");\t\n\t\t\t\telse if(d<0)System.out.println(\"COUNTER_CLOCKWISE\");\n\t\t\t\telse if(Online(p0,p1,p2))System.out.println(\"ON_SEGMENT\");\n\t\t\t\telse if(Online(p2, p1, p0))System.out.println(\"ONLINE_BACK\");\n\t\t\t\telse if(Online(p0, p2, p1))System.out.println(\"ONLINE_FRONT\");\n\t\t\t}\n\t\t}\n\t}\n\n\tint right_left(Point2D a,Point2D b,Point2D target){ //a-bの直線はtargetの右か左か\n\t\tPoint2D q = new Point2D.Double(b.getX()-a.getX(),b.getY()-a.getY());\n\t\tPoint2D r = new Point2D.Double(target.getX()-a.getX(),target.getY()-a.getY());\n\t\tif(cross(q, r)>0)return -1;//左側\n\t\telse if(cross(q,r)<0)return 1;//右側\n\t\telse return 0;//重なっている\n\t}\n\tdouble cross(Point2D p1,Point2D p2){\n\t\treturn p1.getX()*p2.getY()-p1.getY()*p2.getX();\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\n//import java.io.*;\nimport java.util.stream.IntStream;\n\npublic class Main{\n    static int sum=0;\n    public static void main (String args[]){\n        //初期処理\n        Scanner sc=new Scanner(System.in);\n        // BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        // try{\n            // int n = Integer.parseInt(br.readLine());\n        Vector p0 = new Vector(sc.nextInt(), sc.nextInt());\n        Vector p1 = new Vector(sc.nextInt(), sc.nextInt());\n        int n = sc.nextInt();\n        for(int i=0; i<n; i++){\n            Vector p2 = new Vector(sc.nextInt(), sc.nextInt());\n\n            int iAns = Vector.ccw(p0,p1,p2);\n            String ans=\"\";\n            switch (iAns) {\n                case Vector.COUNTER_CLOCKWISE: ans = \"COUNTER_CLOCKWISE\";break;\n                case Vector.CLOCKWISE: ans = \"CLOCKWISE\";break;\n                case Vector.ONLINE_BACK: ans = \"ONLINE_BACK\";break;\n                case Vector.ONLINE_FRONT: ans = \"ONLINE_FRONT\";break;\n                case Vector.ON_SEGMENT: ans = \"ON_SEGMENT\";break;\n                default:break;\n            }\n            System.out.println(ans);\n\n        }\n\n    }\n}\n\nclass Vector{\n    public static final double EPS = 1e-10;\n    public static final int COUNTER_CLOCKWISE=1;\n    public static final int CLOCKWISE=-1;\n    public static final int ONLINE_BACK=2;\n    public static final int ONLINE_FRONT=-2;\n    public static final int ON_SEGMENT=0;\n\n    public double x,y;\n\n    public Vector(){}\n    public Vector(double x, double y){this.x=x;this.y=y;}\n\n    public Vector plus(Vector p){return new Vector(this.x+p.x, this.y+p.y);}\n    public Vector minus(Vector p){return new Vector(this.x-p.x, this.y-p.y);}\n    public Vector multiple(double a){return new Vector(this.x*a, this.y*a);}\n    public Vector divide(double a){return new Vector(this.x/a, this.y/a);}\n\n    public double abs(){return Math.sqrt(this.norm());}\n    public double norm(){return x*x+y*y;}\n\n    \n    public static double dot(Vector a, Vector b){\n        return a.x*b.x+a.y*b.y;\n    }\n\n    public static double cross(Vector a, Vector b){\n        return a.x*b.y-a.y*b.x;\n    }\n\n    //point.projectで垂線の足の座標\n    public Vector project(Vector seg1, Vector seg2){\n        Vector seg = seg2.minus(seg1);\n        Vector relPoint = this.minus(seg1);\n        double t = dot(seg, relPoint)/seg.norm();\n        return seg1.plus(seg.multiple(t));\n    }\n    \n    //point.reflectionで対称点\n    public Vector reflection(Vector seg1, Vector seg2){\n        Vector projected = this.project(seg1, seg2);\n        Vector ashi = projected.minus(this);\n        return this.plus(ashi.multiple(2));\n    }\n\n    //p0が始点\n    public static int ccw(Vector p0, Vector p1, Vector p2){\n        Vector s1 = p1.minus(p0);\n        Vector s2 = p2.minus(p0);\n\n        double cross = Vector.cross(s1, s2);\n        double dot = Vector.dot(s1, s2);\n\n        if(cross>0){return COUNTER_CLOCKWISE;}\n        if(cross<0){return CLOCKWISE;}\n        if(dot<0){return ONLINE_BACK;}\n        if(s1.abs()<s2.abs()){return ONLINE_FRONT;}\n        return ON_SEGMENT;\n    }\n}\n"
  },
  {
    "language": "Java",
    "code": "import java.awt.geom.Line2D;\nimport java.awt.geom.Point2D;\nimport java.util.*;\npublic class Main {\n\tScanner in = new Scanner(System.in);\n\tpublic static void main(String[] args) {\n\t\tnew Main();\n\t}\n\tpublic Main() {\n\t\tnew AOJCGL_1C().doIt();\n\t}\n\n\tclass AOJCGL_1C{\n\n\t\tboolean Online(Point2D from,Point2D to,Point2D target){\n\t\t\tLine2D l = new Line2D.Double(from, to);\n\t\t\treturn l.ptSegDist(target)==0;\n\t\t}\n\n\t\tboolean Online2(Point2D from,Point2D to,Point2D target){\n\t\t\tLine2D l = new Line2D.Double(from, to);\n\t\t\treturn l.ptLineDist(target)==0;\n\t\t}\n\n\t\tvoid doIt(){\n\t\t\tPoint2D p0 = new Point2D.Double(in.nextDouble(),in.nextDouble());\n\t\t\tPoint2D p1 = new Point2D.Double(in.nextDouble(),in.nextDouble());\n\t\t\tint q = in.nextInt();\n\t\t\tfor(int i=0;i<q;i++){\n\t\t\t\tPoint2D p2 = new Point2D.Double(in.nextDouble(), in.nextDouble());\n\t\t\t\tint d = right_left(p0, p1, p2);\n\t\t\t\tif(d>0)System.out.println(\"CLOCKWISE\");\t\n\t\t\t\telse if(d<0)System.out.println(\"COUNTER_CLOCKWISE\");\n\t\t\t\telse if(Online(p0,p2,p1))System.out.println(\"ONLINE_FRONT\");\n\t\t\t\telse if(Online(p0,p1,p2))System.out.println(\"ON_SEGMENT\");\n\t\t\t\telse if(Online2(p0,p1,p2))System.out.println(\"ONLINE_BACK\");\n\t\t\t}\n\t\t}\n\t}\n\n\tint right_left(Point2D a,Point2D b,Point2D target){ //a-bの直線はtargetの右か左か\n\t\tPoint2D q = new Point2D.Double(b.getX()-a.getX(),b.getY()-a.getY());\n\t\tPoint2D r = new Point2D.Double(target.getX()-a.getX(),target.getY()-a.getY());\n\t\t//          System.out.println(\"q= \"+q);\n\t\t//          System.out.println(\"r= \"+r);\n\t\t//          System.out.println(cross(q, r));\n\t\tif(cross(q, r)>0)return -1;//左側\n\t\telse if(cross(q,r)<0)return 1;//右側\n\t\telse return 0;//重なっている\n\t}\n\tdouble cross(Point2D p1,Point2D p2){\n\t\treturn p1.getX()*p2.getY()-p1.getY()*p2.getX();\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "\nimport java.awt.geom.AffineTransform;\nimport java.awt.geom.Point2D;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\npublic class Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\n\t\tString[] tmpArray = br.readLine().split(\" \");\n\t\tdouble px1 = Double.parseDouble(tmpArray[0]);\n\t\tdouble py1 = Double.parseDouble(tmpArray[1]);\n\t\tdouble px2 = Double.parseDouble(tmpArray[2]);\n\t\tdouble py2 = Double.parseDouble(tmpArray[3]);\n\n\t\tPoint2D p1 = new Point2D.Double(px1, py1);\n\t\tPoint2D p2 = new Point2D.Double(px2, py2);\n\n\t\tint q = Integer.parseInt(br.readLine());\n\n\t\tfor(int i = 0; i < q; i++){\n\t\t\ttmpArray = br.readLine().split(\" \");\n\t\t\tdouble x = Double.parseDouble(tmpArray[0]);\n\t\t\tdouble y = Double.parseDouble(tmpArray[1]);\n\n\t\t\tPoint2D p = new Point2D.Double(x,y);\n\n\t\t\tint result = checkClockwise(p, p1, p2);\n\n\t\t\tswitch (result) {\n\t\t\tcase COUNTER_CLOCKWISE:\n\t\t\t\tSystem.out.println(\"COUNTER_CLOCKWISE\");\n\t\t\t\tbreak;\n\n\t\t\tcase CLOCKWISE:\n\t\t\t\tSystem.out.println(\"CLOCKWISE\");\n\t\t\t\tbreak;\n\n\t\t\tcase ONLINE_BACK:\n\t\t\t\tSystem.out.println(\"ONLINE_BACK\");\n\t\t\t\tbreak;\n\n\t\t\tcase ONLINE_FRONT:\n\t\t\t\tSystem.out.println(\"ONLINE_FRONT\");\n\t\t\t\tbreak;\n\n\t\t\tcase ON_SEGMENT:\n\t\t\t\tSystem.out.println(\"ON_SEGMENT\");\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t}\n\n\tstatic final int COUNTER_CLOCKWISE = 1;\n\tstatic final int CLOCKWISE = 2;\n\tstatic final int ONLINE_BACK = 3;\n\tstatic final int ONLINE_FRONT = 4;\n\tstatic final int ON_SEGMENT = 5;\n\tstatic final double EPS = 0.00000001;\n\n\t//p1,p2が作るベクトルに対してpの位置関係を調べる\n\tstatic int checkClockwise(Point2D p, Point2D p1, Point2D p2){\n\t\tif(p1.getX() > p2.getX() || (p1.getX() == p2.getX() && p1.getY() > p2.getY())){\n\t\t\tAffineTransform rotate = AffineTransform.getQuadrantRotateInstance(2);\n\t\t\tPoint2D tmp = null;\n\t\t\tp = rotate.transform(p, tmp);\n\t\t\tp1 = rotate.transform(p1, tmp);\n\t\t\tp2 = rotate.transform(p2, tmp);\n\n//\t\t\tSystem.out.println(p);\n\t\t}\n\n\t\tdouble theta = Math.PI/2;\n\n\t\t//直線のなす角が90度ではないときはここで計算\n\t\tif(p1.getX() != p2.getX()){\n\t\t\ttheta = Math.atan((p1.getY() - p2.getY()) / (p1.getX() - p2.getX()));\n\t\t}\n\n\n\t\tAffineTransform affine;// = AffineTransform.getTranslateInstance(p1.getX(), p1.getY());\n//\t\taffine.concatenate(AffineTransform.getRotateInstance(theta));\n//\t\taffine.concatenate(new AffineTransform(1, 0, 0, -1, 0, 0));\n\t\taffine = AffineTransform.getRotateInstance(-theta);\n\t\taffine.concatenate(AffineTransform.getTranslateInstance(-p1.getX(), -p1.getY()));\n\n\t\tPoint2D pD = new Point2D.Double();\n\t\tpD = affine.transform(p, pD);\n\t\tPoint2D p2D = new Point2D.Double();\n\t\tp2D = affine.transform(p2, p2D);\n\n\t\tif(pD.getY() > EPS){\n\t\t\treturn COUNTER_CLOCKWISE;\n\t\t}\n\t\telse if(pD.getY() < -EPS){\n\t\t\treturn CLOCKWISE;\n\t\t}\n\t\telse if(pD.getX() < 0){\n\t\t\treturn ONLINE_BACK;\n\t\t}\n\t\telse if(pD.getX() > p2D.getX()){\n\t\t\treturn ONLINE_FRONT;\n\t\t}\n\t\telse {\n\t\t\treturn ON_SEGMENT;\n\t\t}\n\n\t}\n\n}\n\n"
  },
  {
    "language": "Java",
    "code": "import java.awt.geom.Line2D;\nimport java.awt.geom.Point2D;\nimport java.util.*;\npublic class Main {\n\tScanner in = new Scanner(System.in);\n\tpublic static void main(String[] args) {\n\t\tnew Main();\n\t}\n\t\n\tpublic Main() {\n\t\tnew AOJCGL_1C().doIt();\n\t}\n\n\tclass AOJCGL_1C{\n\t\tboolean Online(Point2D from,Point2D to,Point2D target){\n\t\t\tLine2D l = new Line2D.Double(from, to);\n\t\t\tdouble d = l.ptSegDist(target);\n\t\t\treturn d == 0;\n\t\t}\n\t\t\n\t\tboolean Online2(Point2D from,Point2D to,Point2D target){\n\t\t\tLine2D l = new Line2D.Double(from, to);\n\t\t\tdouble d = l.ptSegDist(target);\n\t\t\tif(d!=0)return false;\n\t\t\tif(from.equals(target))return false;\n\t\t\tif(to.equals(target))return false;\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\tvoid doIt(){\n\t\t\tPoint2D p0 = new Point2D.Double(in.nextDouble(),in.nextDouble());\n\t\t\tPoint2D p1 = new Point2D.Double(in.nextDouble(),in.nextDouble());\n\t\t\tint q = in.nextInt();\n\t\t\tfor(int i=0;i<q;i++){\n\t\t\t\tPoint2D p2 = new Point2D.Double(in.nextDouble(), in.nextDouble());\n\t\t\t\tint d = right_left(p0, p1, p2);\n\t\t\t\tif(d>0)System.out.println(\"CLOCKWISE\");\t\n\t\t\t\telse if(d<0)System.out.println(\"COUNTER_CLOCKWISE\");\n\t\t\t\telse if(Online(p0,p1,p2))System.out.println(\"ON_SEGMENT\");\n\t\t\t\telse if(Online(p2, p1, p0))System.out.println(\"ONLINE_BACK\");\n\t\t\t\telse if(Online(p0, p2, p1))System.out.println(\"ONLINE_FRONT\");\n\t\t\t}\n\t\t}\n\t}\n\n\tint right_left(Point2D a,Point2D b,Point2D target){ //a-bの直線はtargetの右か左か\n\t\tPoint2D q = new Point2D.Double(b.getX()-a.getX(),b.getY()-a.getY());\n\t\tPoint2D r = new Point2D.Double(target.getX()-a.getX(),target.getY()-a.getY());\n\t\tif(cross(q, r)>0)return -1;//左側\n\t\telse if(cross(q,r)<0)return 1;//右側\n\t\telse return 0;//重なっている\n\t}\n\tdouble cross(Point2D p1,Point2D p2){\n\t\treturn p1.getX()*p2.getY()-p1.getY()*p2.getX();\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\nclass Main{\n\tstatic String judge(double xp0, double yp0, double xp1, double yp1, double xp2, double yp2){\n\t\tdouble[] p1_to_p2 = {xp2 - xp1, yp2 - yp1};\n\t\t//double BorderLine = p1_to_p2[1] / p1_to_p2[0];\n\t\tdouble[] p1 = {xp1 - xp0, yp1 - yp0};\n\t\tdouble[] p2 = {xp2 - xp0, yp2 - yp0};\n\n\t\tif(cross(p1, p2)){ //parallel\n\t\t\tif(normSqr(p1) >= normSqr(p2) && inPro(p1, p2) >= 0){ //ON_SEGMENT?\n\t\t\t\treturn(\"ON_SEGMENT\");\n\t\t\t}else{\n\t\t\t\tif(normSqr(p2) > normSqr(p1) && inPro(p1, p2) >= 0){\n\t\t\t\t\treturn(\"ONLINE_FRONT\");\n\t\t\t\t}else{\n\t\t\t\t\treturn(\"ONLINE_BACK\");\n\t\t\t\t}\n\t\t\t}\n\t\t}else{ //not_parallel\n\t\t\tif(isThisClockwise(p1, p2)){\n\t\t\t\treturn(\"CLOCKWISE\");\n\t\t\t}else{\n\t\t\t\treturn(\"COUNTER_CLOCKWISE\");\n\t\t\t}\n\t\t}\n\t}\n\n\tstatic boolean isThisClockwise(double[] p1, double[] p2){\n\t\tdouble[] p1_to_p2 = {p2[0] - p1[0], p2[1] - p1[1]};\n\n\t\tif(p1_to_p2[0] == 0){\n\t\t\tif(p1_to_p2[1] > 0){\n\t\t\t\treturn false;\n\t\t\t}else{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}else if(p1_to_p2[1] == 0){\n\t\t\tif(p1_to_p2[0] > 0){\n\t\t\t\treturn true;\n\t\t\t}else{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}else{\n\t\t\tdouble t = - p1[0] / p1_to_p2[0];\n\t\t\tif(p1[1] + t * p1_to_p2[1] >= 0){ //????????????????°?????????????\n\t\t\t\tif(p1_to_p2[0] >= 0){\n\t\t\t\t\treturn true;\n\t\t\t\t}else{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tif(p1_to_p2[0] >= 0){\n\t\t\t\t\treturn false;\n\t\t\t\t}else{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tstatic boolean cross(double[] p1, double[] p2){\n\t\treturn((p1[0]*p2[1] - p1[1]*p2[0] == 0) ? (true) : (false));\n\t}\n\n\tstatic double inPro(double[] p1, double[] p2){\n\t\treturn(p1[0] * p2[0] + p1[1] * p2[1]);\n\t}\n\n\tstatic double normSqr(double[] p){\n\t\treturn(p[0]*p[0] + p[1]*p[1]);\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\n\t\tint xp0 = in.nextInt();\n\t\tint yp0 = in.nextInt();\n\t\tint xp1 = in.nextInt();\n\t\tint yp1 = in.nextInt();\n\t\tint q = in.nextInt();\n\n\t\tfor(int i = 0; i < q; i ++){\n\t\t\tSystem.out.println(judge(xp0, yp0, xp1, yp1, in.nextInt(), in.nextInt()));\n\t\t}\n\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\nclass Main{\n\tstatic String judge(int xp0, int yp0, int xp1, int yp1, int xp2, int yp2){\n\t\tdouble[] p1_to_p2 = {xp2 - xp1, yp2 - yp1};\n\t\tdouble aLine = (double)p1_to_p2[1] / (double)p1_to_p2[0];\n\t\tdouble[] p1 = {xp1 - xp0, yp1 - yp0};\n\t\tdouble[] p2 = {xp2 - xp0, yp2 - yp0};\n\t\tdouble[] p1plusp2 = {p1[0] + p2[0], p1[1] + p2[1]};\n\t\tboolean parallel;\n\n\t\tif(p1[0] != 0 && p1[1] != 0){\n\t\t\tif(p2[0] / p1[0] == p2[1] / p1[1]){\n\t\t\t\tparallel = true;\n\t\t\t}else{\n\t\t\t\tparallel = false;\n\t\t\t}\n\t\t}else{\n\t\t\tif(p1[0] == 0 && p2[0] == 0){\n\t\t\t\tparallel = true;\n\t\t\t}else if(p1[1] == 0 && p2[1] == 0){\n\t\t\t\tparallel = true;\n\t\t\t}else{\n\t\t\t\tparallel = false;\n\t\t\t}\n\t\t}\n\n\t\tif(parallel){ //parallel or p2=0\n\t\t\tif(p1[0] * p2[0] + p1[1] * p1[1] >= 0){ //naiseki_plus\n\t\t\t\tif(Math.abs(p2[0]) > Math.abs(p1[0])){\n\t\t\t\t\treturn \"ONLINE_FRONT\";\n\t\t\t\t}else{\n\t\t\t\t\treturn \"ON_SEGMENT\";\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\treturn \"ONLINE_BACK\";\n\t\t\t}\n\t\t}else{//not parallel\n\t\t\tif(p1_to_p2[0] > 0){\n\t\t\t\tif(yp1 < aLine * xp1){\n\t\t\t\t\treturn \"COUNTER_CLOCKWISE\";\n\t\t\t\t}else{\n\t\t\t\t\treturn \"CLOCKWISE\";\n\t\t\t\t}\n\t\t\t}else if(p1_to_p2[0] == 0){\n\t\t\t\tif(p1_to_p2[1] > 0 && xp1 > 0){\n\t\t\t\t\treturn \"COUNTER_CLOCKWISE\";\n\t\t\t\t}else if(p1_to_p2[1] > 0 && xp1 < 0){\n\t\t\t\t\treturn \"CLOCKWISE\";\n\t\t\t\t}else if(p1_to_p2[1] < 0 && xp1 > 0){\n\t\t\t\t\treturn \"CLOCKWISE\";\n\t\t\t\t}else if(p1_to_p2[1] < 0 && xp1 < 0){\n\t\t\t\t\treturn \"COUNTER_CLOCKWISE\";\n\t\t\t\t}else{\n\t\t\t\t\treturn \"nulldesu\";\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tif(yp1 < aLine * xp1){\n\t\t\t\t\treturn \"CLOCKWISE\";\n\t\t\t\t}else{\n\t\t\t\t\treturn \"COUNTER_CLOCKWISE\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\n\t\tint xp0 = in.nextInt();\n\t\tint yp0 = in.nextInt();\n\t\tint xp1 = in.nextInt();\n\t\tint yp1 = in.nextInt();\n\t\tint q = in.nextInt();\n\n\t\tfor(int i = 0; i < q; i ++){\n\t\t\tSystem.out.println(judge(xp0, yp0, xp1, yp1, in.nextInt(), in.nextInt()));\n\t\t}\n\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.awt.geom.Line2D;\nimport java.awt.geom.Point2D;\nimport java.util.*;\n\nimport javax.sound.sampled.Line;\npublic class Main {\n\tScanner in = new Scanner(System.in);\n\tpublic static void main(String[] args) {\n\t\tnew Main();\n\t}\n\n\tpublic Main() {\n\t\tnew AOJCGL_1C().doIt();\n\t}\n\n\tclass AOJCGL_1C{\n\t\tboolean Online(Point2D from,Point2D to,Point2D target){\n//\t\t\tSystem.out.println(from);\n//\t\t\tSystem.out.println(to);\n//\t\t\tSystem.out.println(target);\n\t\t\tif(from.getX()<=target.getX()&&from.getY()<=target.getY()\n\t\t\t\t\t&&target.getX()<=to.getX()&&target.getY()<=to.getY())return true;\n\t\t\telse if(from.getX()>=target.getX()&&from.getY()>=target.getY()\n\t\t\t\t\t&&target.getX()>=to.getX()&&target.getY()>=to.getY())return true;\n\t\t\treturn false;\n\t\t}\n\n\n\t\tvoid doIt(){\n\t\t\tPoint2D p0 = new Point2D.Double(in.nextDouble(),in.nextDouble());\n\t\t\tPoint2D p1 = new Point2D.Double(in.nextDouble(),in.nextDouble());\n\t\t\tint q = in.nextInt();\n\t\t\tfor(int i=0;i<q;i++){\n\t\t\t\tPoint2D p2 = new Point2D.Double(in.nextDouble(), in.nextDouble());\n\t\t\t\tif(i==89)System.out.println(p2);\n\t\t\t\tint d = right_left(p0, p1, p2);\n\t\t\t\tif(d>0)System.out.println(\"CLOCKWISE\");\t\n\t\t\t\telse if(d<0)System.out.println(\"COUNTER_CLOCKWISE\");\n\t\t\t\telse if(Online(p0,p1,p2))System.out.println(\"ON_SEGMENT\");\n\t\t\t\telse if(Online(p2, p1, p0))System.out.println(\"ONLINE_BACK\");\n\t\t\t\telse if(Online(p0, p2, p1))System.out.println(\"ONLINE_FRONT\");\n\t\t\t}\n\t\t}\n\t}\n\n\tint right_left(Point2D a,Point2D b,Point2D target){ //a-bの直線はtargetの右か左か\n\t\tPoint2D q = new Point2D.Double(b.getX()-a.getX(),b.getY()-a.getY());\n\t\tPoint2D r = new Point2D.Double(target.getX()-a.getX(),target.getY()-a.getY());\n\t\tif(cross(q, r)>0)return -1;//左側\n\t\telse if(cross(q,r)<0)return 1;//右側\n\t\telse return 0;//重なっている\n\t}\n\tdouble cross(Point2D p1,Point2D p2){\n\t\treturn p1.getX()*p2.getY()-p1.getY()*p2.getX();\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "public class Main{\n  public void run(java.io.InputStream in, java.io.PrintStream out){\n    java.util.Scanner sc = new java.util.Scanner(in);\n/*answer*/\n    double xp0, xp1, yp0, yp1;\n    int q;\n    double[] xp2, yp2;\n    int i;\n    double s1x, s1y, s2x, s2y, s;\n\n    xp0 = sc.nextDouble();\n    yp0 = sc.nextDouble();\n    xp1 = sc.nextDouble();\n    yp1 = sc.nextDouble();\n    q = sc.nextInt();\n    xp2 = new double[q];\n    yp2 = new double[q];\n\n    s1x = xp1 - xp0;\n    s1y = yp1 - yp0;\n\n    for(i = 0;i < q;i++){\n      xp2[i] = sc.nextDouble();\n      yp2[i] = sc.nextDouble();\n      s2x = xp2[i] - xp0;\n      s2y = yp2[i] - yp0;\n\n      s = s1x * s2y - s1y * s2x;\n\n      if(s > 0){\n        System.out.println(\"COUNTER_CLOCKWISE\");\n      }else if(s < 0){\n        System.out.println(\"CLOCKWISE\");\n      }else{\n        if(s1x * s2x < 0 || s1y * s2y < 0){\n          System.out.println(\"ONLINE_BACK\");\n        }else{\n          if(((s1x * s1x) + (s1y * s1y)) < ((s2x * s2x) + (s2y * s2y))){\n            System.out.println(\"ONLINE_FRONT\");\n          }else{\n            System.out.println(\"ON_SEGMENT\");\n          }\n        }\n      }\n    }\n    sc.close();\n\n\n  }\n  public static void main(String[] args){\n    (new Main()).run(System.in, System.out);\n  }\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\npublic class Main{\n\tpublic static String clockwise(Vector v1, Vector v2){\n\t\tlong cross = v1.x * v2.y - v1.y * v2.x;\n\t\tlong value = v1.x * v2.x + v1.y * v2.y;\n\t\tlong len1 = v1.x * v1.x + v1.y * v1.y;\n\t\tlong len2 = v2.x * v2.x + v2.y * v2.y;\n\t\tif(cross == 0L){\n\t\t\tif(value < 0L)\n\t\t\t\treturn \"ONLINE_BACK\";\n\t\t\telse if(len1 < len2)\n\t\t\t\treturn \"ONLINE_FRONT\";\n\t\t\telse\n\t\t\t\treturn \"ON_SEGMENT\";\n\t\t}\n\t\telse if(cross > 0L){\n\t\t\treturn \"COUNTER_CLOCKWISE\";\n\t\t}\n\t\telse{\n\t\t\treturn \"CLOCKWISE\";\n\t\t}\n\t}\n\tpublic static void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tPoint p0 = new Point(sc.nextLong(),sc.nextLong());\n\t\tPoint p1 = new Point(sc.nextLong(),sc.nextLong());\n\t\tVector v1 = new Vector(p0,p1);\n\t\tint q = sc.nextInt();\n\t\tfor(int i = 0 ; i < q ; i++){\n\t\t\tPoint p2 = new Point(sc.nextLong(),sc.nextLong());\n\t\t\tVector v2 = new Vector(p0,p2);\n\t\t\tSystem.out.println(clockwise(v1,v2));\n\t\t}\n\t}\n}\nclass Point{\n    long x;\n    long y;\n    Point(long x, long y){\n        this.x = x;\n        this.y = y;\n    }\n}\nclass Vector{\n        long x;\n\tlong y;\n\tVector(Point ps, Point pg){\n\t\tx = pg.x - ps.x;\n\t\ty = pg.y - ps.y;\n\t}\n}\n"
  },
  {
    "language": "Java",
    "code": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.PrintWriter;\n\npublic class Main {\n\tstatic boolean debug = false;\n\n\tpublic static void main(String[] args) throws IOException {\n\n\t\tUserScanner scan = new UserScanner();\n\t\tPrintWriter pwriter = new PrintWriter(System.out);\n\n\t\tGeometry geom = new Geometry();\n\n\t\tint x0 = scan.nextInt();\n\t\tint y0 = scan.nextInt();\n\t\tint x1 = scan.nextInt();\n\t\tint y1 = scan.nextInt();\n\n\t\tgeom.setBaseLine(new Point(x0, y0), new Point(x1, y1));\n\t\tPoint base = geom.rotateBaseX(new Point(x0, y0), true);\n\t\t\n\t\tint q = scan.nextInt();\n\t\tfor (int i = 0; i < q; i++) {\n\t\t\tint x2 = scan.nextInt();\n\t\t\tint y2 = scan.nextInt();\n\t\t\tPoint ans = geom.rotateBaseX(new Point(x2, y2), true);\n\t\t\tif (geom.isSameLine(new Point(x0, y0), new Point(x1, y1), new Point(x2, y2)))\n\t\t\t\tif (ans.x < 0)\n\t\t\t\t\tpwriter.println(\"ONLINE_BACK\");\n\t\t\t\telse if (Math.abs(x2 - x0) > Math.abs(x1 - x0) || Math.abs(y2 - y0) > Math.abs(y1 - y0))\n\t\t\t\t\tpwriter.println(\"ONLINE_FRONT\");\n\t\t\t\telse\n\t\t\t\t\tpwriter.println(\"ON_SEGMENT\");\n\t\t\telse if (ans.y > base.y)\n\t\t\t\tpwriter.println(\"COUNTER_CLOCKWISE\");\n\t\t\telse\n\t\t\t\tpwriter.println(\"CLOCKWISE\");\n\t\t}\n\t\tpwriter.flush();\n\n\t\tscan.close();\n\t\tSystem.exit(0);\n\t}\n}\n\nclass Point {\n\tpublic double x, y;\n\n\tpublic Point(double x, double y) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t}\n\n}\n\nclass Geometry {\n\tdouble sin, cos, cos2, sin2, sincos, cos2msin2;\n\n\tpublic void setBaseLine(Point p0, Point p1) {\n\t\tdouble t2 = (p1.x - p0.x) * (p1.x - p0.x) + (p1.y - p0.y) * (p1.y - p0.y);\n\t\tcos2 = (p1.x - p0.x) * (p1.x - p0.x) / t2;\n\t\tsin2 = (p1.y - p0.y) * (p1.y - p0.y) / t2;\n\t\tsincos = (p1.x - p0.x) * (p1.y - p0.y) / t2;\n\t\tsin = (p1.y - p0.y) / Math.sqrt(t2);\n\t\tcos = (p1.x - p0.x) / Math.sqrt(t2);\n\t}\n\n\tpublic boolean isSameLine(Point p0, Point p1, Point p2) {\n\t\tif ((p1.x - p0.x) * (p2.y - p0.y) == (p2.x - p0.x) * (p1.y - p0.y))\n\t\t\treturn true;\n\t\telse\n\t\t\treturn false;\n\t}\n\n\tpublic Point rotateBaseX(Point p, boolean direction) {\n\t\tif (direction)\n\t\t\treturn new Point(p.x * cos + p.y * sin, -p.x * sin + p.y * cos);\n\t\telse\n\t\t\treturn new Point(p.x * cos - p.y * sin, p.x * sin + p.y * cos);\n\t}\n\n}\n\nclass UserScanner {\n\tprivate final InputStream in = System.in;\n\tprivate final byte[] buffer = new byte[1024];\n\tprivate int ptr = 0;\n\tprivate int buflen = 0;\n\n\tprivate boolean read() throws IOException {\n\t\tptr = 0;\n\t\tbuflen = in.read(buffer);\n\t\tif (buflen <= 0)\n\t\t\treturn false;\n\t\telse\n\t\t\treturn true;\n\t}\n\n\tprivate byte getByte() throws IOException {\n\t\tif (ptr >= buflen)\n\t\t\tread();\n\t\tif (isCtlSpace(buffer[ptr])) {\n\t\t\treturn -1;\n\t\t} else\n\t\t\treturn buffer[ptr++];\n\t}\n\n\tprivate void skipCtlSpace() throws IOException {\n\t\tif (ptr >= buflen)\n\t\t\tread();\n\t\tif (isCtlSpace(buffer[ptr])) {\n\t\t\tptr++;\n\t\t\tskipCtlSpace();\n\t\t}\n\t}\n\n\tprivate boolean isCtlSpace(byte b) {\n\t\tif (b <= ' ' || b > '~')\n\t\t\treturn true;\n\t\telse\n\t\t\treturn false;\n\t}\n\n\tpublic void close() throws IOException {\n\t\tin.close();\n\t}\n\n\tpublic String next() throws IOException {\n\t\tskipCtlSpace();\n\t\tStringBuilder sb = new StringBuilder();\n\t\tbyte b;\n\t\twhile ((b = getByte()) != -1) {\n\t\t\tsb.appendCodePoint(b);\n\t\t}\n\t\treturn sb.toString();\n\t}\n\n\tpublic int nextInt() throws IOException {\n\t\tskipCtlSpace();\n\t\tint n = 0;\n\t\tboolean minus = false;\n\t\tbyte b;\n\t\twhile ((b = getByte()) != -1) {\n\t\t\tif (b == '-')\n\t\t\t\tminus = true;\n\t\t\telse {\n\t\t\t\tn *= 10;\n\t\t\t\tn += (b - '0');\n\t\t\t}\n\t\t}\n\t\tif (minus)\n\t\t\treturn n * -1;\n\t\telse\n\t\t\treturn n;\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\nclass Main{\n\tstatic String judge(int xp0, int yp0, int xp1, int yp1, int xp2, int yp2){\n\t\tint[] p1_to_p2 = {xp2 - xp1, yp2 - yp1};\n\t\tdouble aLine = (double)p1_to_p2[1] / (double)p1_to_p2[0];\n\t\tint[] p1 = {xp1 - xp0, yp1 - yp0};\n\t\tint[] p2 = {xp2 - xp0, yp2 - yp0};\n\t\tint[] p1plusp2 = {p1[0] + p2[0], p1[1] + p2[1]};\n\t\tboolean parallel;\n\n\t\tif(p1[0] == 0 && p1[0] == 0){\n\t\t\tif(p2[0] / p1[0] == p2[1] / p1[1]){\n\t\t\t\tparallel = true;\n\t\t\t}else{\n\t\t\t\tparallel = false;\n\t\t\t}\n\t\t}else{\n\t\t\tif(p1[0] == 0 && p2[0] == 0){\n\t\t\t\tparallel = true;\n\t\t\t}else if(p1[1] == 0 && p2[1] == 0){\n\t\t\t\tparallel = true;\n\t\t\t}else{\n\t\t\t\tparallel = false;\n\t\t\t}\n\t\t}\n\n\t\tif(parallel){ //parallel or p2=0\n\t\t\tif(p1[0] * p2[0] + p1[1] * p1[1] >= 0){ //naiseki_plus\n\t\t\t\tif(Math.abs(p2[0]) > Math.abs(p1[0])){\n\t\t\t\t\treturn \"ONLINE_FRONT\";\n\t\t\t\t}else{\n\t\t\t\t\treturn \"ON_SEGMENT\";\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\treturn \"ONLINE_BACK\";\n\t\t\t}\n\t\t}else{//not parallel\n\t\t\tif(p1_to_p2[0] > 0){\n\t\t\t\tif(yp1 < aLine * xp1){\n\t\t\t\t\treturn \"COUNTER_CLOCKWISE\";\n\t\t\t\t}else{\n\t\t\t\t\treturn \"CLOCKWISE\";\n\t\t\t\t}\n\t\t\t}else if(p1_to_p2[0] == 0){\n\t\t\t\tif(p1_to_p2[1] > 0 && xp1 > 0){\n\t\t\t\t\treturn \"COUNTER_CLOCKWISE\";\n\t\t\t\t}else if(p1_to_p2[1] > 0 && xp1 < 0){\n\t\t\t\t\treturn \"CLOCKWISE\";\n\t\t\t\t}else if(p1_to_p2[1] < 0 && xp1 > 0){\n\t\t\t\t\treturn \"CLOCKWISE\";\n\t\t\t\t}else if(p1_to_p2[1] < 0 && xp1 < 0){\n\t\t\t\t\treturn \"COUNTER_CLOCKWISE\";\n\t\t\t\t}else{\n\t\t\t\t\treturn \"nulldesu\";\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tif(yp1 < aLine * xp1){\n\t\t\t\t\treturn \"CLOCKWISE\";\n\t\t\t\t}else{\n\t\t\t\t\treturn \"COUNTER_CLOCKWISE\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\n\t\tint xp0 = in.nextInt();\n\t\tint yp0 = in.nextInt();\n\t\tint xp1 = in.nextInt();\n\t\tint yp1 = in.nextInt();\n\t\tint q = in.nextInt();\n\n\t\tfor(int i = 0; i < q; i ++){\n\t\t\tSystem.out.println(judge(xp0, yp0, xp1, yp1, in.nextInt(), in.nextInt()));\n\t\t}\n\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\nclass Point {\n\tstatic double EPS = 0.0000000001;\n\tdouble x; double y;\n\tpublic Point(double ax, double ay){x=ax;y=ay;}\n\tpublic Vector sum(Point p) { return new Vector(x+p.x,y+p.y); }\n\tpublic Vector diff(Point p) { return new Vector(x-p.x,y-p.y); }\n\tpublic Vector mult(double k) { return new Vector(x*k,y*k); }\n\tpublic Vector div(double k) { return new Vector(x*(1.0/k),y*(1.0/k)); }\n\tpublic boolean equals(Point p){return Math.abs(x-p.x)<EPS && Math.abs(y-p.y)<EPS;}\n\tpublic String toString(){return \"(\"+x+\",\"+y+\")\";}\n}\nclass Vector extends Point {\n\tpublic Vector(double ax, double ay) {super(ax,ay);}\n\tpublic Vector(Point p1, Point p2) {super(p1.x-p2.x,p2.x-p2.y);}\n\tpublic double norm() {return x*x+y*y;}\n\tpublic double abs() {return Math.sqrt(norm());}\n\t// TODO:\n\tpublic boolean isSmallerThan(Vector v) {return x!=v.x?x<v.x:y<v.y;}\n\tpublic double dotProduct(Vector v) {return x*v.x+y*v.y;}\n\tpublic double crossProduct(Vector v) {return x*v.y - y*v.x;}\n}\n\npublic class Main {\n\tstatic double EPS = 0.0000000001;\n\tpublic static void main(){\n\t\tScanner scan = new Scanner(System.in);\n\t\t\n\t\tPoint p0 = new Point(scan.nextInt(), scan.nextInt());\n\t\tPoint p1 = new Point(scan.nextInt(), scan.nextInt());\n\t\tint p = scan.nextInt();\n\t\tfor (int i=0;i<p;i++) {\n\t\t\tPoint p2 = new Point(scan.nextInt(), scan.nextInt());\n\t\t\tint res=ccw(p0,p1,p2);\n\t\t\tif (res==1) System.out.println(\"COUNTER_CLOCKWISE\");\n\t\t\tif (res==2) System.out.println(\"CLOCKWISE\");\n\t\t\tif (res==3) System.out.println(\"ONLINE_BACK\");\n\t\t\tif (res==5) System.out.println(\"ON_SEGMENT\");\n\t\t\tif (res==4) System.out.println(\"ONLINE_FRONT\");\n\t\t}\n\t}\n\tstatic int ccw(Point lp0, Point lp1, Point p) {\n\t\tVector lv = lp1.diff(lp0);\n\t\tVector pv = p.diff(lp0);\n\t\tdouble cp=0.0;\n\t\tif ((cp=lv.crossProduct(pv))>EPS) {return 1;} // counter-clockwise\n\t\tif (cp<-EPS) {return 2;} // clockwise\n\t\tif (lv.dotProduct(pv)<-EPS) return 3; // online-back\n\t\tif (lv.norm() < pv.norm()) return 4; // online-front\n\t\treturn 5; // on-segment\n\t}\n\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\t// 入力\n\t\tScanner sc = new Scanner(System.in);\n\t\tdouble xp0 = sc.nextDouble();\n\t\tdouble yp0 = sc.nextDouble();\n\t\tVector2d p0 = new Vector2d(xp0, yp0);\n\t\tdouble xp1 = sc.nextDouble();\n\t\tdouble yp1 = sc.nextDouble();\n\t\tVector2d p1 = new Vector2d(xp1, yp1);\n\t\tint q = sc.nextInt();\n\t\tfor (int i=0; i<q; i++) {\n\t\t\tdouble x = sc.nextDouble();\n\t\t\tdouble y = sc.nextDouble();\n\t\t\tSystem.out.println(solve(p0, p1, new Vector2d(x, y)));\n\t\t}\n\t\tsc.close();\n\t}\n\n\tstatic class Vector2d {\n\t\tVector2d(Double x, Double y){\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t}\n\t\tDouble x;\n\t\tDouble y;\n\t\tpublic String toString() {\n\t\t\treturn String.format(\"%1$.10f %2$.10f\", x, y);\n\t\t}\n\t}\n\n\tpublic static Vector2d sub(Vector2d v1, Vector2d v2){\n\t\treturn new Vector2d(v2.x - v1.x, v2.y - v1.y);\n\t}\n\n\tpublic static String solve(Vector2d p0, Vector2d p1, Vector2d p2) {\n\t\tVector2d v1 = sub(p0, p1);\n\t\tVector2d v2 = sub(p0, p2);\n\t\tDouble a = v1.x * v2.y - v1.y * v2.x;\n\t\tif(a == 0) {\n\t\t\tif(v2.x / v1.x < 0 || v2.y / v1.y < 0) {\n\t\t\t\treturn \"ONLINE_BACK\";\n\t\t\t} else if(v2.x / v1.x > 1 || v2.y / v1.y > 1) {\n\t\t\t\treturn \"ONLINE_FRONT\";\n\t\t\t} else {\n\t\t\t\treturn \"ON_SEGMENT\";\n\t\t\t}\n\t\t} else if(a > 0) {\n\t\t\treturn \"COUNTER_CLOCKWISE\";\n\t\t} else {\n\t\t\treturn \"CLOCKWISE\";\n\t\t}\n\t}\n}\n\n"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\nimport java.lang.*;\n\npublic class Main {\n    static final int INF = (1 << 31) - 1;             \n    static final int MAXN = 11111;     \n    \n    public static void main(String[] args) throws Exception {                \n        Scanner input = new Scanner(System.in);\n        int x0, y0, x1, y1, x2, y2;\n        int q;\n        x0 = input.nextInt();\n        y0 = input.nextInt();\n        x1 = input.nextInt();\n        y1 = input.nextInt();        \n        q = input.nextInt();\n        for (int i = 0; i < q; ++i) {\n            x2 = input.nextInt();\n            y2 = input.nextInt();\n            int d = ccw(x1 - x0, y1 - y0, x2 - x1, y2 - y1);\n            if (d > 0) System.out.println(\"COUNTER_CLOCKWISE\");\n            else if (d < 0) System.out.println(\"CLOCKWISE\");            \n            else {\n                int a2, b2, a1, b1;\n                a1 = x1 - x0;\n                b1 = y1 - y0;\n                a2 = x2 - x0;\n                b2 = y2 - y0;\n                if (a1 * a2 <= 0 && b1 * b2 <= 0 && (a1 * a1 + b1 * b1 != 0 && a2 * a2 + b2 * b2 != 0)) System.out.println(\"ONLINE_BACK\");\n                else if (Math.hypot(a1, b1) < Math.hypot(a2, b2)) System.out.println(\"ONLINE_FRONT\");                                    \n                else System.out.println(\"ON_SEGMENT\");\n            }                    \n        }\n    }\n    \n    static int ccw(int a0, int b0, int a1, int b1) {\n        int d = a0 * b1 - a1 * b0;\n        return d;\n    }\n}"
  },
  {
    "language": "Java",
    "code": "\nimport java.util.*;\nimport java.math.BigDecimal;\n\nclass Main{\n\tpublic static void main(String[] args){\n\t\tScanner stdIn = new Scanner(System.in);\n\t\tdouble x1 = stdIn.nextDouble();\n\t\tdouble y1 = stdIn.nextDouble();\n\t\tdouble x2 = stdIn.nextDouble();\n\t\tdouble y2 = stdIn.nextDouble();\n\t\tint q = stdIn.nextInt();\n\t\tPoint p0 = new Point(x1,y1);\n\t\tPoint p1 = new Point(x2,y2);\n\t\tfor(int i=0;i<q;i++){\n\t\t\tdouble xp = stdIn.nextDouble();\n\t\t\tdouble yp = stdIn.nextDouble();\n\t\t\tPoint p2 = new Point(xp,yp);\n\t\t\tswitch(p0.CCW(p1,p2)){\n\t\t\t\tcase -1:\n\t\t\t\tSystem.out.println(\"COUNTER_CLOCKWISE\");\n\t\t\t\tbreak;\n\n\t\t\t\tcase 1:\n\t\t\t\tSystem.out.println(\"CLOCKWISE\");\n\t\t\t\tbreak;\n\n\t\t\t\tcase -2:\n\t\t\t\tSystem.out.println(\"ONLINE_BACK\");\n\t\t\t\tbreak;\n\n\t\t\t\tcase 2:\n\t\t\t\tSystem.out.println(\"ONLINE_FRONT\");\n\t\t\t\tbreak;\n\n\t\t\t\tcase 0:\n\t\t\t\tSystem.out.println(\"ON_SEGMENT\");\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t}\t\n}\n\nclass Vector{\n\tpublic final double EPS = Math.pow(10,-8);\n\tpublic double x,y;\n\tfinal int cutoff = 9;\n\n\tVector( double x1 , double y1 , double x2 , double y2 ){\n\t\tthis.x = x2 - x1;\n\t\tthis.y = y2 - y1;\n\t}\n\n\tdouble dot( Vector a ){\t\n\t\treturn rounding(this.x * a.x + this.y * a.y);\n\t}\n\tdouble cross( Vector a ){\t\n\t\treturn rounding(this.x * a.y - this.y * a.x);\n\t}\n\n\tvoid add( Vector a ){\n\t\tthis.x = rounding(this.x + a.x);\n\t\tthis.y = rounding(this.y + a.y);\n\t}\n\tvoid sub( Vector a ){\n\t\tthis.x = rounding(this.x - a.x);\n\t\tthis.y = rounding(this.y - a.y);\n\t}\n\tvoid mul( double z ){\n\t\tthis.x = rounding(this.x * z);\n\t\tthis.y = rounding(this.y * z);\n\t}\n\tvoid div( double z ){\n\t\tthis.x = rounding(this.x / z);\n\t\tthis.y = rounding(this.y / z);\n\t}\n\n\tdouble abs(){\n\t\treturn Math.sqrt(norm());\n\t}\n\tdouble norm(){\n\t\treturn rounding(this.x * this.x + this.y * this.y);\n\t}\n\n\tvoid projection( Vector a ){\n\t\tif(judge(a.norm())){\n\t\t\tthis.x = 0;\n\t\t\tthis.y = 0;\n\t\t}\n\t\telse{\n\t\t\tdouble cos = dot(a)/(abs() * a.abs());\n\t\t\tdouble frac = a.abs() * cos/abs();\n\t\t\tmul(frac);\n\t\t}\n\t}\n\tVector reflection( Vector a ){\n\t\tprojection(a);\n\t\treturn new Vector(a.x,a.y,this.x,this.y);\n\t}\n\n\tboolean judgeisOrthogonal( Vector a ){\t\n\t\treturn judge(dot(a)) ? true : false;\n\t}  \n\tboolean judgeisParallel( Vector a ){\t\n\t\treturn judge(cross(a)) ? true : false;\n\t}\n\n\tboolean judge( double a ){\t\t\n\t\treturn Math.abs(a)<EPS ? true : false;\n\t}\n\tdouble rounding(double a){\n\t\tBigDecimal bi = new BigDecimal(String.valueOf(a));\n\t\treturn bi.setScale(cutoff,BigDecimal.ROUND_HALF_UP).doubleValue();\n\t}\n} \n\n\nclass Point{\n\n\tpublic double x,y;\n\tfinal double EPS = Math.pow(10,-8);\n\tfinal int cutoff = 9;\n\n\tPoint(double x,double y){\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t}\n\n\tdouble abs(){\n\t\tPoint a = new Point(0,0);\t\n\t\treturn Math.sqrt(norm(a));\t\n\t}\n\tdouble abs( Point a ){\n\t\treturn Math.sqrt(norm(a));\n\t}\n\tdouble norm( Point a ){\t\n\t\treturn rounding((this.x - a.x) * (this.x - a.x) + (this.y - a.y) * (this.y - a.y));\n\t}\n\n\tvoid add( Point a ){\n\t\tthis.x = rounding(this.x + a.x);\n\t\tthis.y = rounding(this.y + a.y);\n\t}\n\tvoid sub( Point a ){\n\t\tthis.x = rounding(this.x - a.x);\n\t\tthis.y = rounding(this.y - a.y);\n\t}\n\tvoid mul( double z){\n\t\tthis.x = rounding(this.x * z);\n\t\tthis.y = rounding(this.x * z);\n\t}\n\tvoid div( double z){\n\t\tthis.x = rounding(this.x / z);\n\t\tthis.y = rounding(this.x / z);\n\t}\n\n\tPoint getCrossPoint( Point a , Point b , Point c ){\n\t\tPoint d = new Point(this.x,this.y);\n\t\tVector s1 = new Vector(d.x,d.y,a.x,a.y);\n\t\tVector s2 = new Vector(b.x,b.y,c.x,c.y);\n\t\tdouble t1 = getDistanceSP(b,c);\n\t\tdouble t2 = a.getDistanceSP(b,c);\n\t\ts1.mul(t1/(t1+t2));\n\t\tVector s3 = new Vector(b.x,b.y,d.x,d.y);\n\t\ts3.add(s1);\n\t\treturn new Point(b.x+s3.x,b.y+s3.y);\n\t}\n\n\tdouble getDistance( Point a , Point b , Point c ){\n\t\tif(intersect(a,b,c)){\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn Math.min(getDistanceSP(b,c),a.getDistanceSP(b,c));\n\t}\n\tdouble getDistanceSP( Point a , Point b ){\n\t\tVector s = new Vector( a.x , a.y , b.x , b.y);\n\t\tVector sa = new Vector( a.x , a.y , this.x , this.y );\n\t\tVector sb = new Vector( b.x , b.y , this.x , this.y );\n\t\tif(s.dot(sa)<0.00){\n\t\t\treturn abs(a);\n\t\t}\n\t\ts.mul(-1);\n\t\tif(s.dot(sb)<0.00){\n\t\t\treturn abs(b);\n\t\t}\n\t\treturn Math.abs(s.cross(sb)/s.abs());\n\t}\n\n\tint CCW( Point a , Point b ){\n\t\tVector sa = new Vector( this.x , this.y , a.x , a.y );\n\t\tVector sb = new Vector( this.x , this.y , b.x , b.y );\n\t\tif(sa.cross(sb) > EPS){\n\t\t\treturn -1;\n\t\t}\n\t\telse if(sa.cross(sb) < -EPS){\n\t\t\treturn 1;\n\t\t}\n\t\telse if(sa.dot(sb) < -EPS){\n\t\t\treturn -2;\n\t\t}\n\t\telse if(sa.norm() < sb.norm()){\n\t\t\treturn 2;\n\t\t}\n\t\telse{\n\t\t\treturn 0;\n\t\t}\n\t}\n\tboolean intersect( Point a , Point b , Point c ){\n\t\tPoint d = new Point(this.x,this.y);\n\t\tif(CCW(a,b)*CCW(a,c) <= 0 && b.CCW(c,a)*b.CCW(c,d) <= 0){\n\t\t\treturn true;\n\t\t}\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tint contains( Point[] query ){\n\t\tboolean flag1 = false;\n\t\tboolean flag2 = false;\n\t\tPoint p1 = new Point(this.x+1,this.y);\n\t\tfor(int i=0;i<query.length;i++){\n\t\t\tif(CCW(query[i],p1) == 2 || CCW(query[i],p1) == 0){\n\t\t\t\tflag1 = true;\n\t\t\t}\n\t\t}\n\t\tPoint p2 = new Point(Integer.MAX_VALUE/2,this.y);\n\t\tfinal int l = query.length;\n\t\tfor(int i=0;i<l;i++){\n\t\t\tif(intersect(p2,query[i%l],query[(i+1)%l])){\n\t\t\t\tflag2 = true;\n\t\t\t}\n\t\t}\n\n\t\tif(flag1){\n\t\t\treturn 2;\n\t\t}\n\t\telse if(flag2){\n\t\t\treturn 1;\n\t\t}\n\t\treturn 0;\n\t}\n\n\tvoid temp( Point a ){\n\t\tPoint temp = new Point(0,0);\n\t\ttemp.x = this.x;\n\t\ttemp.y = this.y;\n\t\tthis.x = a.x;\n\t\tthis.y = a.y;\n\t\ta.x = temp.x;\n\t\ta.y = temp.y;\n\t}\n\tvoid sort( Point[] query ){\n\t\tfor(int i=0;i<query.length;i++){\n\t\t\tfor(int j=0;j<query.length-1-i;j++){\n\t\t\t\tif(query[j].x > query[j+1].x){\n\t\t\t\t\tquery[j].temp(query[j+1]);\n\t\t\t\t}\n\t\t\t\telse if(query[j].x == query[j+1].x && query[j].y > query[j+1].y){\n\t\t\t\t\tquery[j].temp(query[j+1]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tArrayList<Point> andrewScan( Point[] query ){\n\t\tArrayList<Point> list = new ArrayList<Point>();\n\t\tif(query.length<4){\n\t\t\tfor(int i=0;i<query.length;i++){\n\t\t\t\tlist.add(query[i]);\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tsort(query);\n\t\t\tArrayList<Point> list1 = new ArrayList<Point>();\n\t\t\tArrayList<Point> list2 = new ArrayList<Point>();\n\t\t\tlist1.add(query[0]);\n\t\t\tlist1.add(query[1]);\n\t\t\tint next = 2;\n\t\t\twhile(next<query.length-1){\n\t\t\t\tif(list1.size()<2){\n\t\t\t\t\tlist1.add(query[next]);\n\t\t\t\t\tnext++;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tPoint p1 = list1.get(list1.size()-2);\n\t\t\t\t\tPoint p2 = list1.get(list1.size()-1);\n\t\t\t\t\tif(p1.CCW(p2,query[next])!=-1){\n\t\t\t\t\t\tlist1.add(query[next]);\n\t\t\t\t\t\tnext++;\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tlist1.remove(list1.size()-1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tPoint p1 = list1.get(list1.size()-2);\n\t\t\tPoint p2 = list1.get(list1.size()-1);\n\t\t\tif(p1.CCW(p2,query[query.length-1])!=-1){\n\t\t\t\tlist1.add(query[query.length-1]);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tlist1.remove(list1.size()-1);\n\t\t\t\tlist1.add(query[query.length-1]);\n\t\t\t}\n\t\t\tlist2.add(query[query.length-1]);\n\t\t\tlist2.add(query[query.length-2]);\n\t\t\tnext = query.length-3;\n\t\t\twhile(next>0){\n\t\t\t\tif(list2.size()<2){\n\t\t\t\t\tlist2.add(query[next]);\n\t\t\t\t\tnext--;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tPoint a = list2.get(list2.size()-2);\n\t\t\t\t\tPoint b = list2.get(list2.size()-1);\n\t\t\t\t\tif(a.CCW(b,query[next])!=-1){\n\t\t\t\t\t\tlist2.add(query[next]);\n\t\t\t\t\t\tnext--;\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tlist2.remove(list2.size()-1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tp1 = list2.get(list2.size()-2);\n\t\t\tp2 = list2.get(list2.size()-1);\n\t\t\tif(p1.CCW(p2,query[0])>=0){\n\t\t\t\tlist2.add(query[0]);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tlist2.remove(list2.size()-1);\n\t\t\t\tlist2.add(query[0]);\n\t\t\t}\n\t\t\tfor(int i=0;i<list1.size();i++){\n\t\t\t\tlist.add(list1.get(i));\n\t\t\t}\n\t\t\tfor(int i=1;i<list2.size()-1;i++){\n\t\t\t\tlist.add(list2.get(i));\n\t\t\t}\n\t\t}\n\t\treturn list;\n\t}\n\n\tPoint polarCos(double cos_a){\n\t\tdouble sin_a = Math.sqrt(1-Math.pow(cos_a,2));\n\t\tdouble x = cos_a*this.x - sin_a*this.y;\n\t\tdouble y = sin_a*this.x + cos_a*this.y;\n\t\treturn new Point(x,y); \n\t}\n\tPoint polarSin(double sin_a){\n\t\tdouble cos_a = Math.sqrt(1-Math.pow(sin_a,2));\n\t\tdouble x = cos_a*this.x - sin_a*this.y;\n\t\tdouble y = sin_a*this.x + cos_a*this.y;\n\t\treturn new Point(x,y); \n\t}\n\n\tboolean judge( Point a ){\t\n\t\tif( Math.abs( this.x - a.x ) < EPS && Math.abs( this.y - a.y ) < EPS){\n\t\t\treturn true;\n\t\t}\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\t}\n\tdouble rounding(double a){\n\t\tBigDecimal bi = new BigDecimal(String.valueOf(a));\n\t\treturn bi.setScale(cutoff,BigDecimal.ROUND_HALF_UP).doubleValue();\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\n/**\n * Points/Vectors - Counter-Clockwise\n */\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tString line;\n\t\tString[] words;\n\n\t\tdouble xp0, yp0, xp1, yp1;\n\t\txp0 = sc.nextDouble();\n\t\typ0 = sc.nextDouble();\n\t\txp1 = sc.nextDouble();\n\t\typ1 = sc.nextDouble();\n\n\t\tPoint p0, p1;\n\t\tp0 = new Point(xp0, yp0);\n\t\tp1 = new Point(xp1, yp1);\n\n\t\tint q = sc.nextInt();\n\n\t\tfor (int i = 0; i < q; i++) {\n\t\t\tdouble xp2, yp2;\n\t\t\txp2 = sc.nextDouble();\n\t\t\typ2 = sc.nextDouble();\n\t\t\tPoint p2 = new Point(xp2, yp2);\n\n\t\t\tSystem.out.println(Geometries.order(p0, p1, p2).toString());\n\n\t\t}\n\n\t} //end main\n}\n\nclass Geometries {\n\n\tstatic double EPS = 1e-10;\n\n\t//????????????\n\tstatic boolean equals(double a, double b) {\n\t\treturn Math.abs(a - b) < EPS;\n\t}\n\n\t//\n\tstatic enum Order {\n\t\tCOUNTER_CLOCKWISE,  //???????¨???????\n\t\tCLOCKWISE,          //????¨???????\n\t\tONLINE_BACK,        //????????´??????\n\t\tONLINE_FRONT,       //????????´??????\n\t\tON_SEGMENT,         //????????´??????\n\t}\n\n\t//?????????\n\tstatic Order order(Point p0, Point p1, Point p2) {\n\t\tPoint v1 = p1.subtract(p0);\n\t\tPoint v2 = p2.subtract(p0);\n\t\tif (v1.outer(v2) > EPS) {return Order.COUNTER_CLOCKWISE;}\n\t\tif (v1.outer(v2) < -EPS) {return Order.CLOCKWISE;}\n\t\tif (v1.inner(v2) < -EPS) {return Order.ONLINE_BACK;}\n\t\tif (v1.norm() < v2.norm()) {return Order.ONLINE_FRONT;}\n\t\treturn Order.ON_SEGMENT;\n\t}\n\n\t//??´?????????\n\tstatic boolean isOrthogonal(Point a, Point b) {\n\t\treturn equals(a.inner(b), 0.0);\n\t}\n\n\tstatic boolean isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n\t\treturn isOrthogonal(\n\t\t\t\ta1.subtract(a2),\n\t\t\t\tb1.subtract(b2)\n\t\t);\n\t}\n\n\tstatic boolean isOrthogonal(Segment s1, Segment s2) {\n\t\treturn isOrthogonal(\n\t\t\t\ts1.p2.subtract(s1.p1),\n\t\t\t\ts2.p2.subtract(s2.p1)\n\t\t);\n\t}\n\n\t//????????????\n\tstatic boolean isParallel(Point a, Point b) {\n\t\treturn equals(a.outer(b), 0.0);\n\t}\n\n\tstatic boolean isParallel(Point a1, Point a2, Point b1, Point b2) {\n\t\treturn isParallel(\n\t\t\t\ta1.subtract(a2),\n\t\t\t\tb1.subtract(b2)\n\t\t);\n\t}\n\n\tstatic boolean isParallel(Segment s1, Segment s2) {\n\t\treturn isParallel(\n\t\t\t\ts1.p2.subtract(s1.p1),\n\t\t\t\ts2.p2.subtract(s2.p1)\n\t\t);\n\t}\n\n\t//????????????\n\tstatic boolean isIntersect(Point a1, Point a2, Point b1, Point b2) {\n\t\treturn false;\n\t}\n\n\tstatic boolean isIntersect(Segment s1, Segment s2) {\n\t\treturn false;\n\t}\n}\n\nclass Point implements Comparable<Point> {\n\n\tstatic double EPS = 1e-10;\n\n\tdouble x, y;\n\n\tPoint() {\n\t\tthis(0.0, 0.0);\n\t}\n\n\tpublic Point(double x, double y) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t}\n\n\t@Override\n\tpublic int compareTo(Point p) {\n\t\tif (equals(p)) {\n\t\t\treturn 0;\n\t\t} else {\n\t\t\tif (x != p.x) {\n\t\t\t\treturn Double.compare(y, p.y);\n\t\t\t} else {\n\t\t\t\treturn Double.compare(x, p.x);\n\t\t\t}\n\t\t}\n\t}\n\n\t@Override\n\tpublic boolean equals(Object obj) {\n\t\tPoint p = (Point) obj;\n\t\treturn x - p.x < EPS && y - p.y < EPS;\n\t}\n\n\tPoint add(Point p) {\n\t\treturn new Point(x + p.x, y + p.y);\n\t}\n\n\tPoint subtract(Point p) {\n\t\treturn new Point(x - p.x, y - p.y);\n\t}\n\n\tPoint multiply(double k) {\n\t\treturn new Point(x * k, y * k);\n\t}\n\n\tPoint devide(double k) {\n\t\treturn new Point(x / k, y / k);\n\t}\n\n\tdouble inner(Point p) {\n\t\treturn x * p.x + y * p.y;\n\t}\n\n\tdouble outer(Point p) {\n\t\treturn x * p.y - y * p.x;\n\t}\n\n\tdouble norm() {\n\t\treturn x * x + y * y;\n\t}\n\n\tdouble abs() {\n\t\treturn Math.sqrt(norm());\n\t}\n}\n\nclass Segment {\n\tPoint p1, p2;\n\n\tpublic Segment() {\n\t\tthis(new Point(), new Point());\n\t}\n\n\tpublic Segment(Point p1, Point p2) {\n\t\tthis.p1 = p1;\n\t\tthis.p2 = p2;\n\t}\n}\n\nclass Circle {\n\tPoint c;\n\tdouble r;\n\n\tpublic Circle() {\n\t\tthis(new Point(), 0.0);\n\t}\n\n\tpublic Circle(Point c, double r) {\n\t\tthis.c = c;\n\t\tthis.r = r;\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.awt.geom.AffineTransform;\nimport java.awt.geom.Point2D;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        String[] tmpArray = br.readLine().split(\" \");\n        double px1 = Double.parseDouble(tmpArray[0]);\n        double py1 = Double.parseDouble(tmpArray[1]);\n        double px2 = Double.parseDouble(tmpArray[2]);\n        double py2 = Double.parseDouble(tmpArray[3]);\n        \n        Point2D p1 = new Point2D.Double(px1, py1);\n        Point2D p2 = new Point2D.Double(px2, py2);\n        \n        int q = Integer.parseInt(br.readLine());\n        \n        for(int i = 0; i < q; i++) {\n            tmpArray = br.readLine().split(\" \");\n            double x = Double.parseDouble(tmpArray[0]);\n            double y = Double.parseDouble(tmpArray[1]);\n            \n            Point2D p = new Point2D.Double(x, y);\n            \n            int result = checkClockwise(p, p1, p2);\n            \n            switch(result) {\n                case COUNTER_CLOCKWISE:\n                    System.out.println(\"COUNTER_CLOCKWISE\");\n                    break;\n                \n                case CLOCKWISE:\n                    System.out.println(\"CLOCKWISE\");\n                    break;\n                \n                case ONLINE_BACK:\n                    System.out.println(\"ONLINE_BACK\");\n                    break;\n                \n                case ONLINE_FRONT:\n                    System.out.println(\"ONLINE_FRONT\");\n                    break;\n                \n                case ON_SEGMENT:\n                    System.out.println(\"ON_SEGMENT\");\n                    break;\n                    \n                default:\n                    break;\n            }\n        }\n    }\n    \n    static final int COUNTER_CLOCKWISE = 1;\n    static final int CLOCKWISE         = 2;\n    static final int ONLINE_BACK       = 3;\n    static final int ONLINE_FRONT      = 4;\n    static final int ON_SEGMENT        = 5;\n    static final double EPS            = 0.00000001;\n    \n    //p1, p2が作るベクトルに対しpの位置関係を調べる\n    static int checkClockwise(Point2D p, Point2D p1, Point2D p2) {\n        if(p1.getX() > p2.getX() || (p1.getX() == p2.getX() && p1.getY() > p2.getY())) {\n            AffineTransform rotate = AffineTransform.getQuadrantRotateInstance(2);\n            Point2D tmp = null;\n            p  = rotate.transform(p , tmp);\n            p1 = rotate.transform(p1, tmp);\n            p2 = rotate.transform(p2, tmp);\n        }\n        double theta = Math.PI / 2;\n        \n        //直線のなす角が90度でないときはここで計算\n        if(p1.getX() != p2.getX()) {\n            theta = Math.atan((p1.getY() - p2.getY()) / (p1.getX() - p2.getX()));\n        }\n        \n        AffineTransform affine;\n        affine = AffineTransform.getRotateInstance(-theta);\n        affine.concatenate(AffineTransform.getTranslateInstance(-p1.getX(), -p1.getY()));\n        Point2D pD = new Point2D.Double();\n        pD = affine.transform(p, pD);\n        Point2D p2D = new Point2D.Double();\n        p2D = affine.transform(p2, p2D);\n        \n        if(pD.getY() > EPS) {\n            return COUNTER_CLOCKWISE;\n        }\n        else if(pD.getY() < -EPS) {\n            return CLOCKWISE;\n        }\n        else if(pD.getX() < 0) {\n            return ONLINE_BACK;\n        }\n        else if(pD.getX() > p2D.getX()) {\n            return ONLINE_FRONT;\n        }\n        else {\n            return ON_SEGMENT;\n        }\n    }   \n    \n}\n"
  },
  {
    "language": "Java",
    "code": "import java.awt.geom.Point2D.Double;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\nimport static java.lang.Integer.parseInt;\n\npublic class Main {\n\n  public static void main(String[] args) {\n    new Main().run();\n  }\n\n  public void run() {\n\n    try(BufferedReader br = new BufferedReader(new InputStreamReader(System.in))) {\n\n      Point2D p0, p1, p2;\n      String[] line = br.readLine().split(\" \");\n      p0 = new Point2D(parseInt(line[0]), parseInt(line[1]));\n      p1 = new Point2D(parseInt(line[2]), parseInt(line[3]));\n      int q = parseInt(br.readLine());\n\n      StringBuilder buf = new StringBuilder();\n      for(int i=0; i<q; i++) {\n        line = br.readLine().split(\" \");\n        p2 = new Point2D(parseInt(line[0]), parseInt(line[1]));\n        buf.append(jadgeClockwise(p0, p1, p2)).append(\"\\n\");\n      }\n\n      System.out.print(buf);\n\n    }\n    catch( IOException e ) {\n      System.out.println(e);\n    }\n  }\n\n  public String jadgeClockwise (Point2D p0, Point2D p1, Point2D p2) {\n    Vector v = new Vector();\n    Point2D a = p1.diff(p0);\n    Point2D b = p2.diff(p0);\n\n    if(v.cross(a, b) >  v.EPS ) { return \"COUNTER_CLOCKWISE\"; }\n    if(v.cross(a, b) < -v.EPS ) { return \"CLOCKWISE\"; }\n    if(v.dot(a, b) < -v.EPS ) { return \"ONLINE_BACK\"; }\n    if(a.norm() < b.norm()) { return \"ONLINE_FRONT\"; }\n\n    return \"ON_SEGMENT\";\n  }\n  private class Point2D extends Double {\n    private static final long serialVersionUID = 1L;\n    double EPS = 1e-10;\n\n    public Point2D() { super(); }\n    public Point2D(double x, double y) { super(x, y); }\n\n    public boolean equals (double a, double b) {\n      return Math.abs(a-b) < EPS;\n    }\n    public Point2D sum(Point2D b) {\n      return new Point2D(x+b.x, y+b.y);\n    }\n    public Point2D diff(Point2D b) {\n      return new Point2D(x-b.x, y-b.y);\n    }\n    public Point2D multiple(double k) {\n      return new Point2D(x*k, y*k);\n    }\n    public double norm() {\n      return x * x + y * y;\n    }\n    public double abs(Point2D a) {\n      return Math.sqrt(a.norm());\n    }\n\n    @Override\n    public String toString() {\n      return String.format(\"%.10f %.10f\", x,y);\n    }\n  }\n\n  private class Vector extends Point2D {\n\n    private static final long serialVersionUID = 1L;\n\n    public Vector() { super(); }\n    public Vector(double x, double y) { super(x, y); }\n    public Vector(Point2D p) { super(p.x, p.y); }\n\n    public double dot(Point2D a, Point2D b) {\n      return a.x * b.x + a.y * b.y;\n    }\n    public double cross(Point2D a, Point2D b) {\n      return a.x * b.y - a.y * b.x;\n    }\n    public boolean isOrthogonal(Point2D a, Point2D b) {\n      return equals(dot(a,b) , 0.0);\n    }\n    public boolean isOrthogonal(Point2D a1, Point2D a2, Point2D b1, Point2D b2) {\n      return isOrthogonal(a1.diff(a2), b1.diff(b2));\n    }\n    public boolean isParallel(Point2D a, Point2D b) {\n      return equals(cross(a, b), 0.0);\n    }\n    public boolean isParallel(Point2D a1, Point2D a2, Point2D b1, Point2D b2) {\n      return isParallel(a1.diff(a2), b1.diff(b2));\n    }\n\n    public Point2D project(Point2D sp1, Point2D sp2, Point2D p) {\n      Vector base = new Vector( sp2.diff(sp1) );\n      double r = dot(p.diff(sp1), base) / base.norm();\n\n      return sp1.sum(base.multiple(r));\n    }\n    public Point2D reflect(Point2D sp1, Point2D sp2, Point2D p) {\n      return p.sum(project(sp1,sp2,p).diff(p).multiple(2.0));\n    }\n\n  }\n}\n"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\nclass Main{\n\tstatic String judge(int xp0, int yp0, int xp1, int yp1, int xp2, int yp2){\n\t\tdouble[] p1_to_p2 = {xp2 - xp1, yp2 - yp1};\n\t\tdouble aLine = (double)p1_to_p2[1] / (double)p1_to_p2[0];\n\t\tdouble[] p1 = {xp1 - xp0, yp1 - yp0};\n\t\tdouble[] p2 = {xp2 - xp0, yp2 - yp0};\n\t\tdouble[] p1plusp2 = {p1[0] + p2[0], p1[1] + p2[1]};\n\t\tboolean parallel;\n\n\t\tif(p1[0] != 0 && p1[1] != 0){\n\t\t\tif(p2[0] / p1[0] == p2[1] / p1[1]){\n\t\t\t\tparallel = true;\n\t\t\t}else{\n\t\t\t\tparallel = false;\n\t\t\t}\n\t\t}else{\n\t\t\tif(p1[0] == 0 && p2[0] == 0){\n\t\t\t\tparallel = true;\n\t\t\t}else if(p1[1] == 0 && p2[1] == 0){\n\t\t\t\tparallel = true;\n\t\t\t}else{\n\t\t\t\tparallel = false;\n\t\t\t}\n\t\t}\n\n\t\tif(parallel){ //parallel or p2=0\n\t\t\tif(p1[0] * p2[0] + p1[1] * p2[1] >= 0){ //naiseki_plus\n\t\t\t\tif(Math.abs(p2[0]*p2[0] + p2[1]*p2[1]) > Math.abs(p1[0]*p1[0] + p1[1]*p1[1])){\n\t\t\t\t\treturn \"ONLINE_FRONT\";\n\t\t\t\t}else{\n\t\t\t\t\treturn \"ON_SEGMENT\";\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\treturn \"ONLINE_BACK\";\n\t\t\t}\n\t\t}else{//not parallel\n\t\t\tif(p1_to_p2[0] > 0){\n\t\t\t\tif(yp1 < aLine * xp1){\n\t\t\t\t\treturn \"COUNTER_CLOCKWISE\";\n\t\t\t\t}else{\n\t\t\t\t\treturn \"CLOCKWISE\";\n\t\t\t\t}\n\t\t\t}else if(p1_to_p2[0] == 0){\n\t\t\t\tif(p1_to_p2[1] > 0 && xp1 > 0){\n\t\t\t\t\treturn \"COUNTER_CLOCKWISE\";\n\t\t\t\t}else if(p1_to_p2[1] > 0 && xp1 < 0){\n\t\t\t\t\treturn \"CLOCKWISE\";\n\t\t\t\t}else if(p1_to_p2[1] < 0 && xp1 > 0){\n\t\t\t\t\treturn \"CLOCKWISE\";\n\t\t\t\t}else if(p1_to_p2[1] < 0 && xp1 < 0){\n\t\t\t\t\treturn \"COUNTER_CLOCKWISE\";\n\t\t\t\t}else{\n\t\t\t\t\treturn \"nulldesu\";\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tif(yp1 < aLine * xp1){\n\t\t\t\t\treturn \"CLOCKWISE\";\n\t\t\t\t}else{\n\t\t\t\t\treturn \"COUNTER_CLOCKWISE\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\n\t\tint xp0 = in.nextInt();\n\t\tint yp0 = in.nextInt();\n\t\tint xp1 = in.nextInt();\n\t\tint yp1 = in.nextInt();\n\t\tint q = in.nextInt();\n\n\t\tfor(int i = 0; i < q; i ++){\n\t\t\tSystem.out.println(judge(xp0, yp0, xp1, yp1, in.nextInt(), in.nextInt()));\n\t\t}\n\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.awt.geom.Line2D;\nimport java.awt.geom.Point2D;\nimport java.util.*;\n\nimport javax.sound.sampled.Line;\npublic class Main {\n\tScanner in = new Scanner(System.in);\n\tpublic static void main(String[] args) {\n\t\tnew Main();\n\t}\n\n\tpublic Main() {\n\t\tnew AOJCGL_1C().doIt();\n\t}\n\n\tclass AOJCGL_1C{\n\t\tboolean Online(Point2D from,Point2D to,Point2D target){\n\t\t\tLine2D l = new Line2D.Double(from, to);\n//\t\t\tSystem.out.println(l.ptSegDist(target));\n\t\t\tif(l.ptSegDist(target)==0.0)return true;\n\t\t\treturn false;\n\t\t}\n\n\n\t\tvoid doIt(){\n\t\t\tPoint2D p0 = new Point2D.Double(in.nextDouble(),in.nextDouble());\n\t\t\tPoint2D p1 = new Point2D.Double(in.nextDouble(),in.nextDouble());\n\t\t\tint q = in.nextInt();\n\t\t\tfor(int i=0;i<q;i++){\n\t\t\t\tPoint2D p2 = new Point2D.Double(in.nextDouble(), in.nextDouble());\n\t\t\t\tif(i==89)System.out.println(p2);\n\t\t\t\tint d = right_left(p0, p1, p2);\n\t\t\t\tif(d>0)System.out.println(\"CLOCKWISE\");\t\n\t\t\t\telse if(d<0)System.out.println(\"COUNTER_CLOCKWISE\");\n\t\t\t\telse if(Online(p0,p1,p2))System.out.println(\"ON_SEGMENT\");\n\t\t\t\telse if(Online(p2, p1, p0))System.out.println(\"ONLINE_BACK\");\n\t\t\t\telse if(Online(p0, p2, p1))System.out.println(\"ONLINE_FRONT\");\n\t\t\t}\n\t\t}\n\t}\n\n\tint right_left(Point2D a,Point2D b,Point2D target){ //a-bの直線はtargetの右か左か\n\t\tPoint2D q = new Point2D.Double(b.getX()-a.getX(),b.getY()-a.getY());\n\t\tPoint2D r = new Point2D.Double(target.getX()-a.getX(),target.getY()-a.getY());\n\t\tif(cross(q, r)>0)return -1;//左側\n\t\telse if(cross(q,r)<0)return 1;//右側\n\t\telse return 0;//重なっている\n\t}\n\tdouble cross(Point2D p1,Point2D p2){\n\t\treturn p1.getX()*p2.getY()-p1.getY()*p2.getX();\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.util.NoSuchElementException;\n\npublic class Main {\n\tstatic FastScanner sc = new FastScanner();\n\tstatic final double ALLOWABLE_ERROR = 0.00000001;\n\tstatic final double HOSEI = 0.0000000000000001;\n\n\tpublic static void main(String[] args) {\n\t\tdouble x0 = sc.nextDouble();\n\t\tdouble y0 = sc.nextDouble();\n\t\tdouble x1 = sc.nextDouble() + HOSEI;\n\t\tdouble y1 = sc.nextDouble() + HOSEI;\n\t\t\n\t\tdouble a = (y1 - y0) / (x1 - x0);\n\t\tdouble b = y1 - a * x1;\n\t\t\n\t\tint q = sc.nextInt();\n\t\tStringBuilder ans = new StringBuilder();\n\t\tfor(int i=0; i<q; i++) {\n\t\t\tdouble x = sc.nextDouble();\n\t\t\tdouble y = sc.nextDouble();\n\t\t\tif(Math.abs(y - (a * x + b)) < ALLOWABLE_ERROR) {\n\t\t\t\tif((x0 <= x && x <= x1) || (x1 <= x && x <= x0)) {\n\t\t\t\t\tans.append(\"ON_SEGMENT\");\n\t\t\t\t} else if(distance(x0, y0, x, y) < distance(x1, y1, x, y)) {\n\t\t\t\t\tans.append(\"ONLINE_BACK\");\n\t\t\t\t} else {\n\t\t\t\t\tans.append(\"ONLINE_FRONT\");\n\t\t\t\t}\n\t\t\t} else if((x0 < x1 && y - (a * x + b) > 0) || (x0 > x1 && y - (a * x + b) < 0)) {\n\t\t\t\tans.append(\"COUNTER_CLOCKWISE\");\n\t\t\t} else {\n\t\t\t\tans.append(\"CLOCKWISE\");\n\t\t\t}\n\t\t\t\n\t\t\tans.append(\"\\n\");\n\t\t}\n\t\t\n\t\tSystem.out.print(ans);\n\t}\n\t\n\tstatic double distance(double x1, double y1, double x2, double y2) {\n\t\treturn (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);\n\t}\n\n\tstatic class FastScanner {\n        private final InputStream in = System.in;\n        private final byte[] buffer = new byte[1024];\n        private int ptr = 0;\n        private int buflen = 0;\n        private boolean hasNextByte() {\n            if(ptr < buflen) {\n                return true;\n            } else {\n                ptr = 0;\n                try {\n                    buflen = in.read(buffer);\n                } catch(IOException e) {\n                    e.printStackTrace();\n                }\n                if(buflen <= 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        private int readByte() { if (hasNextByte()) return buffer[ptr++]; else return -1;}\n        private static boolean isPrintableChar(int c) { return 33 <= c && c <= 126;}\n        private void skipUnprintable() { while(hasNextByte() && !isPrintableChar(buffer[ptr])) ptr++;}\n        public boolean hasNext() { skipUnprintable(); return hasNextByte();}\n        public String next() {\n            if (!hasNext()) throw new NoSuchElementException();\n            StringBuilder sb = new StringBuilder();\n            int b = readByte();\n            while(isPrintableChar(b)) {\n                sb.appendCodePoint(b);\n                b = readByte();\n            }\n            return sb.toString();\n        }\n        public long nextLong() {\n            return Long.parseLong(next());\n        }\n        public int nextInt(){\n            return Integer.parseInt(next());\n        }\n        public double nextDouble(){\n            return Double.parseDouble(next());\n        }\n    }\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.PrintWriter;\n\npublic class Main {\n\tstatic boolean debug = false;\n\n\tpublic static void main(String[] args) throws IOException {\n\n\t\tUserScanner scan = new UserScanner();\n\t\tPrintWriter pwriter = new PrintWriter(System.out);\n\n\t\tGeometry geom = new Geometry();\n\n\t\tint x0 = scan.nextInt();\n\t\tint y0 = scan.nextInt();\n\t\tint x1 = scan.nextInt();\n\t\tint y1 = scan.nextInt();\n\n\t\tgeom.setBaseLine(new Point(x0, y0), new Point(x1, y1));\n\n\t\tint q = scan.nextInt();\n\t\tfor (int i = 0; i < q; i++) {\n\t\t\tint x2 = scan.nextInt();\n\t\t\tint y2 = scan.nextInt();\n\n\t\t\tPoint ans = geom.rotateBaseX(new Point(x2, y2), true);\n\t\t\tif (geom.isSameLine(new Point(x0, y0), new Point(x1, y1), new Point(x2, y2)))\n\t\t\t\tif (ans.x < 0)\n\t\t\t\t\tpwriter.println(\"ONLINE_BACK\");\n\t\t\t\telse if (Math.abs(x2 - x0) > Math.abs(x1 - x0) || Math.abs(y2 - y0) > Math.abs(y1 - y0))\n\t\t\t\t\tpwriter.println(\"ONLINE_FRONT\");\n\t\t\t\telse\n\t\t\t\t\tpwriter.println(\"ON_SEGMENT\");\n\t\t\telse if (ans.y > 0)\n\t\t\t\tpwriter.println(\"COUNTER_CLOCKWISE\");\n\t\t\telse\n\t\t\t\tpwriter.println(\"CLOCKWISE\");\n\t\t}\n\t\tpwriter.flush();\n\n\t\tscan.close();\n\t\tSystem.exit(0);\n\t}\n}\n\nclass Point {\n\tpublic double x, y;\n\n\tpublic Point(double x, double y) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t}\n\n}\n\nclass Geometry {\n\tdouble sin, cos, cos2, sin2, sincos, cos2msin2;\n\n\tpublic void setBaseLine(Point p0, Point p1) {\n\t\tdouble t2 = (p1.x - p0.x) * (p1.x - p0.x) + (p1.y - p0.y) * (p1.y - p0.y);\n\t\tcos2 = (p1.x - p0.x) * (p1.x - p0.x) / t2;\n\t\tsin2 = (p1.y - p0.y) * (p1.y - p0.y) / t2;\n\t\tsincos = (p1.x - p0.x) * (p1.y - p0.y) / t2;\n\t\tsin = (p1.y - p0.y) / Math.sqrt(t2);\n\t\tcos = (p1.x - p0.x) / Math.sqrt(t2);\n\t}\n\n\tpublic boolean isSameLine(Point p0, Point p1, Point p2) {\n\t\tdouble d1 = (p1.x - p0.x) * (p2.y - p0.y);\n\t\tdouble d2 = (p2.x - p0.x) * (p1.y - p0.y);\n\t\tif (d1 == d2 || d1 == -d2)\n\t\t\treturn true;\n\t\telse\n\t\t\treturn false;\n\t}\n\n\tpublic Point rotateBaseX(Point p, boolean direction) {\n\t\tif (direction)\n\t\t\treturn new Point(p.x * cos + p.y * sin, -p.x * sin + p.y * cos);\n\t\telse\n\t\t\treturn new Point(p.x * cos - p.y * sin, p.x * sin + p.y * cos);\n\t}\n\n}\n\nclass UserScanner {\n\tprivate final InputStream in = System.in;\n\tprivate final byte[] buffer = new byte[1024];\n\tprivate int ptr = 0;\n\tprivate int buflen = 0;\n\n\tprivate boolean read() throws IOException {\n\t\tptr = 0;\n\t\tbuflen = in.read(buffer);\n\t\tif (buflen <= 0)\n\t\t\treturn false;\n\t\telse\n\t\t\treturn true;\n\t}\n\n\tprivate byte getByte() throws IOException {\n\t\tif (ptr >= buflen)\n\t\t\tread();\n\t\tif (isCtlSpace(buffer[ptr])) {\n\t\t\treturn -1;\n\t\t} else\n\t\t\treturn buffer[ptr++];\n\t}\n\n\tprivate void skipCtlSpace() throws IOException {\n\t\tif (ptr >= buflen)\n\t\t\tread();\n\t\tif (isCtlSpace(buffer[ptr])) {\n\t\t\tptr++;\n\t\t\tskipCtlSpace();\n\t\t}\n\t}\n\n\tprivate boolean isCtlSpace(byte b) {\n\t\tif (b <= ' ' || b > '~')\n\t\t\treturn true;\n\t\telse\n\t\t\treturn false;\n\t}\n\n\tpublic void close() throws IOException {\n\t\tin.close();\n\t}\n\n\tpublic String next() throws IOException {\n\t\tskipCtlSpace();\n\t\tStringBuilder sb = new StringBuilder();\n\t\tbyte b;\n\t\twhile ((b = getByte()) != -1) {\n\t\t\tsb.appendCodePoint(b);\n\t\t}\n\t\treturn sb.toString();\n\t}\n\n\tpublic int nextInt() throws IOException {\n\t\tskipCtlSpace();\n\t\tint n = 0;\n\t\tboolean minus = false;\n\t\tbyte b;\n\t\twhile ((b = getByte()) != -1) {\n\t\t\tif (b == '-')\n\t\t\t\tminus = true;\n\t\t\telse {\n\t\t\t\tn *= 10;\n\t\t\t\tn += (b - '0');\n\t\t\t}\n\t\t}\n\t\tif (minus)\n\t\t\treturn n * -1;\n\t\telse\n\t\t\treturn n;\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.awt.geom.Line2D;\nimport java.awt.geom.Point2D;\nimport java.util.*;\npublic class Main {\n\tScanner in = new Scanner(System.in);\n\tpublic static void main(String[] args) {\n\t\tnew Main();\n\t}\n\tpublic Main() {\n\t\tnew AOJCGL_1C().doIt();\n\t}\n\n\tclass AOJCGL_1C{\n\n\t\tboolean Online(Point2D from,Point2D to,Point2D target){\n\t\t\tLine2D l = new Line2D.Double(from, to);\n\t\t\tif(l.ptSegDist(target)!=0)return false;\n//\t\t\tif(to.equals(target))return false;\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\tboolean Online3(Point2D from,Point2D to,Point2D target){\n\t\t\tLine2D l = new Line2D.Double(from, to);\n\t\t\tif(l.ptSegDist(target)!=0)return false;\n\t\t\tif(to.equals(target))return false;\n\t\t\treturn true;\n\t\t}\n\n\t\tboolean Online2(Point2D from,Point2D to,Point2D target){\n\t\t\tLine2D l = new Line2D.Double(from, to);\n\t\t\treturn l.ptLineDist(target)==0;\n\t\t}\n\n\t\tvoid doIt(){\n\t\t\tPoint2D p0 = new Point2D.Double(in.nextDouble(),in.nextDouble());\n\t\t\tPoint2D p1 = new Point2D.Double(in.nextDouble(),in.nextDouble());\n\t\t\tint q = in.nextInt();\n\t\t\tfor(int i=0;i<q;i++){\n\t\t\t\tPoint2D p2 = new Point2D.Double(in.nextDouble(), in.nextDouble());\n\t\t\t\tint d = right_left(p0, p1, p2);\n\t\t\t\tif(d>0)System.out.println(\"CLOCKWISE\");\t\n\t\t\t\telse if(d<0)System.out.println(\"COUNTER_CLOCKWISE\");\n\t\t\t\telse if(Online3(p0,p2,p1))System.out.println(\"ONLINE_FRONT\");\n\t\t\t\telse if(Online(p0,p1,p2))System.out.println(\"ON_SEGMENT\");\n\t\t\t\telse if(Online2(p0,p1,p2))System.out.println(\"ONLINE_BACK\");\n\t\t\t}\n\t\t}\n\t}\n\n\tint right_left(Point2D a,Point2D b,Point2D target){ //a-bの直線はtargetの右か左か\n\t\tPoint2D q = new Point2D.Double(b.getX()-a.getX(),b.getY()-a.getY());\n\t\tPoint2D r = new Point2D.Double(target.getX()-a.getX(),target.getY()-a.getY());\n\t\t//          System.out.println(\"q= \"+q);\n\t\t//          System.out.println(\"r= \"+r);\n\t\t//          System.out.println(cross(q, r));\n\t\tif(cross(q, r)>0)return -1;//左側\n\t\telse if(cross(q,r)<0)return 1;//右側\n\t\telse return 0;//重なっている\n\t}\n\tdouble cross(Point2D p1,Point2D p2){\n\t\treturn p1.getX()*p2.getY()-p1.getY()*p2.getX();\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.util.*;\nimport java.util.concurrent.CountDownLatch;\n\nimport javax.sound.midi.MidiMessage;\n \npublic class Main {\n\t\tstatic long MOD=(long) (Math.pow(10, 9)+7);\n\tpublic static void main(String[] args){\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tInputReader sc=new InputReader(System.in);\n\t\tint x1 = sc.nextInt();\n        int y1 = sc.nextInt();\n        int x2 = sc.nextInt();\n        int y2 = sc.nextInt();\n        int q = sc.nextInt();\n        Geometric geometric=new Geometric();\n        for(int i = 0 ; i < q ; i++){\n            int px = sc.nextInt();\n            int py = sc.nextInt();\n            int kummi=geometric.direction((double)x1,(double)y1,(double)x2,(double)y2,(double)px,(double)py);\n            if (kummi==1) {\n\t\t\t\tout.println(\"COUNTER_CLOCKWISE\");\n\t\t\t}\n            else if (kummi==2) {\n\t\t\t\tout.println(\"CLOCKWISE\");\n\t\t\t}\n            else if (kummi==3) {\n\t\t\t\tout.println(\"ONLINE_BACK\");\n\t\t\t}\n            else if (kummi==4) {\n\t\t\t\tout.println(\"ONLINE_FRONT\");\n\t\t\t}\n            else {\n\t\t\t\tout.println(\"ON_SEGMENT\");\n\t\t\t}\n        }\n        out.flush();\n\t}\n\tstatic class Geometric{\n\t\tstatic final double eps = 0.0000000001;\n\t\tdouble[] project(double x1, double y1, double x2, double y2, double px, double py){\n\t\t\t//(x1,y1)と(x2,y2)を直線lとして、(px,py)からlに下した垂線の足をもとめる。\n\t        if(y1 == y2) {\n\t        \tdouble[] ans= {px,y1};\n\t        \treturn ans;\n\t        \t}\n\t        else if(x1 == x2) {\n\t        \tdouble[] ans= {x1,py};\n\t        \treturn ans;\n\t        }\n\t        else{\n\t            double katamuki1 = (y2 - y1)/(x2 - x1);\n\t            double seppen1 = -katamuki1 * x1 + y1;\n\t            double katamuki2 = -1.0 / katamuki1;\n\t            double seppen2 = -katamuki2 * px + py;\n\t            double ansx = (seppen2 - seppen1)/(katamuki1 - katamuki2);\n\t            double ansy = ansx * katamuki1 + seppen1;\n\t            double[] ans= {ansx,ansy};\n\t            return ans;\n\t        }\n\t    }\n\t    double[] project2(double x1, double y1, double x2, double y2, double px, double py){\n\t    \t//(x1,y1)と(x2,y2)を直線lとして、lに対して(px,py)の対称な点をもとめる。\n\t        if(y1 == y2) {\n\t        \tdouble[] ans= {px,(py - 2*(py - y1))};\n\t        \treturn ans;\n\t        }\n\t        else if(x1 == x2) {\n\t        \tdouble[] ans= {(px - 2*(px - x1)),py};\n\t        \treturn ans;\n\t        }\n\t        else{\n\t            double katamuki1 = (y2 - y1)/(x2 - x1);\n\t            double seppen1 = -1.0 * katamuki1 * x1 + y1;\n\t            double katamuki2 = -1.0 / katamuki1;\n\t            double seppen2 = -1.0 * katamuki2 * px + py;\n\t            double ansx = (seppen2 - seppen1)/(katamuki1 - katamuki2);\n\t            double ansy = ansx * katamuki1 + seppen1;\n\t            double[] ans= {(px - 2*(px - ansx)),(py- 2 * (py - ansy))};\n\t            return ans;\n\t        }\n\t    }\n\t    public double d2(double x0,double y0,double x1,double y1){\n\t\t\treturn (x0-x1)*(x0-x1) + (y0-y1)*(y0-y1);\n\t\t}\n\t\t\n\t    int direction(double x0,double y0,double x1,double y1,double x2,double y2){\n\t\t\t//x0 y0を起点としてp1ベクトル（x1-x0,y1-y0）から見てp2ベクトルが、反時計回りなら１、時計回りなら２、反対方向なら３、\n\t    \t//同じ方向かつp2のほうが大きい場合４、以下の場合５．\n\t\t\tif(x1 == x0 && y1 == y0){\n\t\t\t\treturn 4;\n\t\t\t}\n\t\t\telse if(x2 == x0 && y2 == y0){\n\t\t\t\treturn 5;\n\t\t\t}\n\t\t\t\n\t\t\t//外積の第三成分 = |→p1||→p2|sinθ\n\t\t\tdouble det = (x1 -x0)*(y2-y0) - (x2 -x0)*(y1 - y0);\n\t\t\t\n\t\t\tif(det>eps){\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\telse if(det<-eps){\n\t\t\t\treturn 2;\n\t\t\t}\n\t\t\telse{\t//同一直線状\n\t\t\t\tif((x1-x0 >0 == x2-x0 <0) && x1-x0 != 0){\t//反対側\n\t\t\t\t\treturn 3;\n\t\t\t\t}\n\t\t\t\telse if((y1-y0 >0 == y2-y0 <0) && y1-y0 != 0){\t//反対側\n\t\t\t\t\treturn 3;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tdouble d10 = d2(x0,y0,x1,y1);\t//p1とp0の距離^2\n\t\t\t\t\tdouble d20 = d2(x0,y0,x2,y2);\t//p2とp0の距離^2\n\t\t\t\t\tif(d10 < d20){\t//p2のほうが遠い\n\t\t\t\t\t\treturn 4;\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\treturn 5;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t    int paralell_or_vertical(double x0,double y0,double x1,double y1,double x2,double y2,double x3,double y3) {\n\t    \t//平行なら2　垂直なら1　それ以外は０を返す。\n\t    \tdouble naiseki=(x1-x0)*(x3-x2)+(y1-y0)*(y3-y2);\n\t    \tdouble d1=Math.sqrt(d2(x0, y0, x1, y1));\n\t    \tdouble d2=Math.sqrt(d2(x2, y2, x3, y3));\n\t    \tdouble cos=naiseki/(d1*d2);\n\t    \t\n\t    \tif (cos+eps>=1||cos-eps<=-1) {\n\t\t\t\treturn 2;\n\t\t\t}\n\t    \telse if(cos<eps&&cos>-eps){\n\t\t\t\treturn 1;\n\t\t\t}\n\t    \telse {\n\t\t\t\treturn 0;\n\t\t\t}\n\t    }\n\t}\n\tstatic class InputReader { \n\t\tprivate InputStream in;\n\t\tprivate byte[] buffer = new byte[1024];\n\t\tprivate int curbuf;\n\t\tprivate int lenbuf;\n\t\tpublic InputReader(InputStream in) {\n\t\t\tthis.in = in;\n\t\t\tthis.curbuf = this.lenbuf = 0;\n\t\t}\n \n\t\tpublic boolean hasNextByte() {\n\t\t\tif (curbuf >= lenbuf) {\n\t\t\t\tcurbuf = 0;\n\t\t\t\ttry {\n\t\t\t\t\tlenbuf = in.read(buffer);\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tthrow new InputMismatchException();\n\t\t\t\t}\n\t\t\t\tif (lenbuf <= 0)\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n \n\t\tprivate int readByte() {\n\t\t\tif (hasNextByte())\n\t\t\t\treturn buffer[curbuf++];\n\t\t\telse\n\t\t\t\treturn -1;\n\t\t}\n \n\t\tprivate boolean isSpaceChar(int c) {\n\t\t\treturn !(c >= 33 && c <= 126);\n\t\t}\n \n\t\tprivate void skip() {\n\t\t\twhile (hasNextByte() && isSpaceChar(buffer[curbuf]))\n\t\t\t\tcurbuf++;\n\t\t}\n \n\t\tpublic boolean hasNext() {\n\t\t\tskip();\n\t\t\treturn hasNextByte();\n\t\t}\n \n\t\tpublic String next() {\n\t\t\tif (!hasNext())\n\t\t\t\tthrow new NoSuchElementException();\n\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\tint b = readByte();\n\t\t\twhile (!isSpaceChar(b)) {\n\t\t\t\tsb.appendCodePoint(b);\n\t\t\t\tb = readByte();\n\t\t\t}\n\t\t\treturn sb.toString();\n\t\t}\n \n\t\tpublic int nextInt() {\n\t\t\tif (!hasNext())\n\t\t\t\tthrow new NoSuchElementException();\n\t\t\tint c = readByte();\n\t\t\twhile (isSpaceChar(c))\n\t\t\t\tc = readByte();\n\t\t\tboolean minus = false;\n\t\t\tif (c == '-') {\n\t\t\t\tminus = true;\n\t\t\t\tc = readByte();\n\t\t\t}\n\t\t\tint res = 0;\n\t\t\tdo {\n\t\t\t\tif (c < '0' || c > '9')\n\t\t\t\t\tthrow new InputMismatchException();\n\t\t\t\tres = res * 10 + c - '0';\n\t\t\t\tc = readByte();\n\t\t\t} while (!isSpaceChar(c));\n\t\t\treturn (minus) ? -res : res;\n\t\t}\n \n\t\tpublic long nextLong() {\n\t\t\tif (!hasNext())\n\t\t\t\tthrow new NoSuchElementException();\n\t\t\tint c = readByte();\n\t\t\twhile (isSpaceChar(c))\n\t\t\t\tc = readByte();\n\t\t\tboolean minus = false;\n\t\t\tif (c == '-') {\n\t\t\t\tminus = true;\n\t\t\t\tc = readByte();\n\t\t\t}\n\t\t\tlong res = 0;\n\t\t\tdo {\n\t\t\t\tif (c < '0' || c > '9')\n\t\t\t\t\tthrow new InputMismatchException();\n\t\t\t\tres = res * 10 + c - '0';\n\t\t\t\tc = readByte();\n\t\t\t} while (!isSpaceChar(c));\n\t\t\treturn (minus) ? -res : res;\n\t\t}\n \n\t\tpublic double nextDouble() {\n\t\t\treturn Double.parseDouble(next());\n\t\t}\n \n\t\tpublic int[] nextIntArray(int n) {\n\t\t\tint[] a = new int[n];\n\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t\ta[i] = nextInt();\n\t\t\treturn a;\n\t\t}\n \n\t\tpublic long[] nextLongArray(int n) {\n\t\t\tlong[] a = new long[n];\n\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t\ta[i] = nextLong();\n\t\t\treturn a;\n\t\t}\n \n\t\tpublic char[][] nextCharMap(int n, int m) {\n\t\t\tchar[][] map = new char[n][m];\n\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t\tmap[i] = next().toCharArray();\n\t\t\treturn map;\n\t\t}\n\t}\n}\n"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\nclass Main {\n\tpublic static void main(String args[]) {\n\t\tScanner scan = new Scanner(System.in);\n\t\t\n\t\tdouble px, py, x1, y1, x2, y2, angle1, angle2, back, rad, leng1, leng2;\n\t\t\n\t\tint q;\n\t\t\n\t\tpx = scan.nextDouble();\n\t\tpy = scan.nextDouble();\n\t\tx1 = scan.nextDouble();\n\t\ty1 = scan.nextDouble();\n\n\t\trad = Math.atan2(y1 - py, x1 - px);\n\t\t\n\t\tangle1 = rad * 180 / Math.PI;\n\t\t\n\t\tif(angle1 < 0) angle1 += 360;\n\t\t\n\t\tback = angle1 + 180;\n\t\t\n\t\tleng1 = Math.sqrt((x1 - px) * (x1 - px) + (y1 - py) * (y1 - py));\n\n\t\tif(back >= 360) back -= 360;\n\t\t\n\t\tq = scan.nextInt();\n\t\t\n\t\tfor(int i = 0; i < q; i++) {\n\t\t\tx2 = scan.nextDouble();\n\t\t\ty2 = scan.nextDouble();\n\n\t\t\trad = Math.atan2(y2 - py, x2 - px);\n\t\t\tangle2 = rad * 180 / Math.PI;\n\t\t\t\n\t\t\tif(angle2 < 0) angle2 += 360;\n\t\t\t\n\t\t\tif(px == x2 && py == y2) {\n\t\t\t\tSystem.out.println(\"ON_SEGMENT\");\n\t\t\t\t\n\t\t\t} else if(angle2 == angle1) {\n\t\t\t\tleng2 = Math.sqrt((x2 - px) * (x2 - px) + (y2 - py) * (y2 - py));\n\t\t\t\t\n\t\t\t\tif((leng2 - leng1) <= 0) {\n\t\t\t\t\tSystem.out.println(\"ON_SEGMENT\");\n\t\t\t\t\t\n\t\t\t\t} else {\n\t\t\t\t\tSystem.out.println(\"ONLINE_FRONT\");\n\t\t\t\t\t\n\t\t\t\t}\t\t\t\t\n\t\t\t} else if(angle2 == back) {\n\t\t\t\tSystem.out.println(\"ONLINE_BACK\");\n\t\t\t\t\n\t\t\t} else if (back < 180) {\n\t\t\t\tif(angle2 > back && angle2 < angle1) {\n\t\t\t\t\tSystem.out.println(\"CLOCKWISE\");\n\t\t\t\t\t\n\t\t\t\t} else {\n\t\t\t\t\tSystem.out.println(\"COUNTER_CLOCKWISE\");\n\t\t\t\t}\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\tif(angle2 < back && angle2 > angle1) {\n\t\t\t\t\tSystem.out.println(\"COUNTER_CLOCKWISE\");\n\t\t\t\t\t\n\t\t\t\t} else {\n\t\t\t\t\tSystem.out.println(\"CLOCKWISE\");\n\t\t\t\t}\t\t\t\t\n\t\t\t}\n\t\t}\n\t\tscan.close();\n\t}\n\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.PrintWriter;\n\npublic class Main {\n\tstatic boolean debug = false;\n\n\tpublic static void main(String[] args) throws IOException {\n\n\t\tUserScanner scan = new UserScanner();\n\t\tPrintWriter pwriter = new PrintWriter(System.out);\n\n\t\tGeometry geom = new Geometry();\n\n\t\tint x0 = scan.nextInt();\n\t\tint y0 = scan.nextInt();\n\t\tint x1 = scan.nextInt();\n\t\tint y1 = scan.nextInt();\n\n\t\tgeom.setBaseLine(new Point(x0, y0), new Point(x1, y1));\n\n\t\tint q = scan.nextInt();\n\t\tfor (int i = 0; i < q; i++) {\n\t\t\tint x2 = scan.nextInt();\n\t\t\tint y2 = scan.nextInt();\n\n\t\t\tPoint ans = geom.rotateBaseX(new Point(x2, y2), true);\n\t\t\tif (geom.isSameLine(new Point(x0, y0), new Point(x1, y1), new Point(x2, y2)))\n\t\t\t\tif (ans.x < 0)\n\t\t\t\t\tpwriter.println(\"ONLINE_BACK\");\n\t\t\t\telse if (Math.abs(x2 - x0) > Math.abs(x1 - x0) || Math.abs(y2 - y0) > Math.abs(y1 - y0))\n\t\t\t\t\tpwriter.println(\"ONLINE_FRONT\");\n\t\t\t\telse\n\t\t\t\t\tpwriter.println(\"ON_SEGMENT\");\n\t\t\telse if (ans.y > 0)\n\t\t\t\tpwriter.println(\"COUNTER_CLOCKWISE\");\n\t\t\telse\n\t\t\t\tpwriter.println(\"CLOCKWISE\");\n\t\t}\n\t\tpwriter.flush();\n\n\t\tscan.close();\n\t\tSystem.exit(0);\n\t}\n}\n\nclass Point {\n\tpublic double x, y;\n\n\tpublic Point(double x, double y) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t}\n\n}\n\nclass Geometry {\n\tdouble sin, cos, cos2, sin2, sincos, cos2msin2;\n\n\tpublic void setBaseLine(Point p0, Point p1) {\n\t\tdouble t2 = (p1.x - p0.x) * (p1.x - p0.x) + (p1.y - p0.y) * (p1.y - p0.y);\n\t\tcos2 = (p1.x - p0.x) * (p1.x - p0.x) / t2;\n\t\tsin2 = (p1.y - p0.y) * (p1.y - p0.y) / t2;\n\t\tsincos = (p1.x - p0.x) * (p1.y - p0.y) / t2;\n\t\tsin = (p1.y - p0.y) / Math.sqrt(t2);\n\t\tcos = (p1.x - p0.x) / Math.sqrt(t2);\n\t}\n\n\tpublic boolean isSameLine(Point p0, Point p1, Point p2) {\n\t\tif ((p1.x - p0.x) * (p2.y - p0.y) == (p2.x - p0.x) * (p1.y - p0.y))\n\t\t\treturn true;\n\t\telse\n\t\t\treturn false;\n\t}\n\n\tpublic Point rotateBaseX(Point p, boolean direction) {\n\t\tif (direction)\n\t\t\treturn new Point(p.x * cos + p.y * sin, -p.x * sin + p.y * cos);\n\t\telse\n\t\t\treturn new Point(p.x * cos - p.y * sin, p.x * sin + p.y * cos);\n\t}\n\n}\n\nclass UserScanner {\n\tprivate final InputStream in = System.in;\n\tprivate final byte[] buffer = new byte[1024];\n\tprivate int ptr = 0;\n\tprivate int buflen = 0;\n\n\tprivate boolean read() throws IOException {\n\t\tptr = 0;\n\t\tbuflen = in.read(buffer);\n\t\tif (buflen <= 0)\n\t\t\treturn false;\n\t\telse\n\t\t\treturn true;\n\t}\n\n\tprivate byte getByte() throws IOException {\n\t\tif (ptr >= buflen)\n\t\t\tread();\n\t\tif (isCtlSpace(buffer[ptr])) {\n\t\t\treturn -1;\n\t\t} else\n\t\t\treturn buffer[ptr++];\n\t}\n\n\tprivate void skipCtlSpace() throws IOException {\n\t\tif (ptr >= buflen)\n\t\t\tread();\n\t\tif (isCtlSpace(buffer[ptr])) {\n\t\t\tptr++;\n\t\t\tskipCtlSpace();\n\t\t}\n\t}\n\n\tprivate boolean isCtlSpace(byte b) {\n\t\tif (b <= ' ' || b > '~')\n\t\t\treturn true;\n\t\telse\n\t\t\treturn false;\n\t}\n\n\tpublic void close() throws IOException {\n\t\tin.close();\n\t}\n\n\tpublic String next() throws IOException {\n\t\tskipCtlSpace();\n\t\tStringBuilder sb = new StringBuilder();\n\t\tbyte b;\n\t\twhile ((b = getByte()) != -1) {\n\t\t\tsb.appendCodePoint(b);\n\t\t}\n\t\treturn sb.toString();\n\t}\n\n\tpublic int nextInt() throws IOException {\n\t\tskipCtlSpace();\n\t\tint n = 0;\n\t\tboolean minus = false;\n\t\tbyte b;\n\t\twhile ((b = getByte()) != -1) {\n\t\t\tif (b == '-')\n\t\t\t\tminus = true;\n\t\t\telse {\n\t\t\t\tn *= 10;\n\t\t\t\tn += (b - '0');\n\t\t\t}\n\t\t}\n\t\tif (minus)\n\t\t\treturn n * -1;\n\t\telse\n\t\t\treturn n;\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\npublic class Main{\n\tpublic static void main(String[] args) {\n\t\tScanner scan = new Scanner(System.in);\n\t\tdouble x_p0 = scan.nextDouble();\n\t\tdouble y_p0 = scan.nextDouble();\n\t\tdouble x_p1 = scan.nextDouble();\n\t\tdouble y_p1 = scan.nextDouble();\n\t\tdouble vx = x_p1 - x_p0;\n\t\tdouble vy = y_p1 - y_p0;\n\t\tint q = scan.nextInt();\n\t\tfor(int i = 0; i < q; i++) {\n\t\t\tdouble x = scan.nextDouble();\n\t\t\tdouble y = scan.nextDouble();\n\t\t\tdouble ux = x - x_p0;\n\t\t\tdouble uy = y - y_p0;\n\t\t\tdouble t = dot(ux, uy, vx, vy);\n\t\t\tdouble f = 0.00000001;\n\t\t\tif(cross(vx, vy, ux, uy) > f) {\n\t\t\t\tSystem.out.println(\"COUNTER_CLOCKWISE\");\n\t\t\t}else if(cross(vx, vy, ux, uy) < -f){\n\t\t\t\tSystem.out.println(\"CLOCKWISE\");\n\t\t\t}else if(dot(vx, vy, ux, uy) < -f) {\n\t\t\t\tSystem.out.println(\"ONLINE_BACK\");\n\t\t\t}else if(norm(vx, vy) < norm(ux, uy)) {\n\t\t\t\tSystem.out.println(\"ONLINE_FRONT\");\n\t\t\t}else {\n\t\t\t\tSystem.out.println(\"ON_SEGMENT\");\n\t\t\t}\n\t\t}\n\t\tscan.close();\n\n\t}\n\tstatic double dot(double x1, double y1, double x2, double y2) {\n\t\treturn x1 * x2 + y1 * y2;\n\t}\n\tstatic double norm(double x1, double y1, double x2, double y2) {\n\t\treturn (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);\n\t}\n\tstatic double norm(double x, double y) {\n\t\treturn x * x + y * y;\n\t}\n\tstatic double cross(double x1, double y1, double x2, double y2) {\n\t\treturn x1 * y2 - y1 * x2;\n\t}\n}\n"
  },
  {
    "language": "Java",
    "code": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.util.NoSuchElementException;\n\npublic class Main {\n\tstatic FastScanner sc = new FastScanner();\n\tstatic final double ALLOWABLE_ERROR = 0.00000001;\n\n\tpublic static void main(String[] args) {\n\t\tdouble x0 = sc.nextDouble();\n\t\tdouble y0 = sc.nextDouble();\n\t\tdouble x1 = sc.nextDouble();\n\t\tdouble y1 = sc.nextDouble();\n\t\t\n\t\tdouble a = (y1 - y0) / (x1 - x0);\n\t\tdouble b = y1 - a * x1;\n\t\t\n\t\tint q = sc.nextInt();\n\t\tStringBuilder ans = new StringBuilder();\n\t\tfor(int i=0; i<q; i++) {\n\t\t\tdouble x = sc.nextDouble();\n\t\t\tdouble y = sc.nextDouble();\n\t\t\tif(x0 == x1) {\n\t\t\t\tif(x == x0) {\n\t\t\t\t\tif((y0 <= y && y <= y1) || (y1 <= y && y <= y0)) {\n\t\t\t\t\t\tans.append(\"ON_SEGMENT\");\n\t\t\t\t\t} else if(distance(x0, y0, x, y) < distance(x1, y1, x, y)) {\n\t\t\t\t\t\tans.append(\"ONLINE_BACK\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tans.append(\"ONLINE_FRONT\");\n\t\t\t\t\t}\n\t\t\t\t} else if((y0 < y1 && y < y0) || (y0 > y1 && y > y0)) {\n\t\t\t\t\tans.append(\"COUNTER_CLOCKWISE\");\n\t\t\t\t} else {\n\t\t\t\t\tans.append(\"CLOCKWISE\");\n\t\t\t\t}\t\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\tif(Math.abs(y - (a * x + b)) < ALLOWABLE_ERROR) {\n\t\t\t\t\tif((x0 <= x && x <= x1) || (x1 <= x && x <= x0)) {\n\t\t\t\t\t\tans.append(\"ON_SEGMENT\");\n\t\t\t\t\t} else if(distance(x0, y0, x, y) < distance(x1, y1, x, y)) {\n\t\t\t\t\t\tans.append(\"ONLINE_BACK\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tans.append(\"ONLINE_FRONT\");\n\t\t\t\t\t}\n\t\t\t\t} else if((x0 < x1 && y - (a * x + b) > 0) || (x0 > x1 && y - (a * x + b) < 0)) {\n\t\t\t\t\tans.append(\"COUNTER_CLOCKWISE\");\n\t\t\t\t} else {\n\t\t\t\t\tans.append(\"CLOCKWISE\");\n\t\t\t\t}\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tans.append(\"\\n\");\n\t\t}\n\t\t\n\t\tSystem.out.print(ans);\n\t}\n\t\n\tstatic double distance(double x1, double y1, double x2, double y2) {\n\t\treturn (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);\n\t}\n\n\tstatic class FastScanner {\n        private final InputStream in = System.in;\n        private final byte[] buffer = new byte[1024];\n        private int ptr = 0;\n        private int buflen = 0;\n        private boolean hasNextByte() {\n            if(ptr < buflen) {\n                return true;\n            } else {\n                ptr = 0;\n                try {\n                    buflen = in.read(buffer);\n                } catch(IOException e) {\n                    e.printStackTrace();\n                }\n                if(buflen <= 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        private int readByte() { if (hasNextByte()) return buffer[ptr++]; else return -1;}\n        private static boolean isPrintableChar(int c) { return 33 <= c && c <= 126;}\n        private void skipUnprintable() { while(hasNextByte() && !isPrintableChar(buffer[ptr])) ptr++;}\n        public boolean hasNext() { skipUnprintable(); return hasNextByte();}\n        public String next() {\n            if (!hasNext()) throw new NoSuchElementException();\n            StringBuilder sb = new StringBuilder();\n            int b = readByte();\n            while(isPrintableChar(b)) {\n                sb.appendCodePoint(b);\n                b = readByte();\n            }\n            return sb.toString();\n        }\n        public long nextLong() {\n            return Long.parseLong(next());\n        }\n        public int nextInt(){\n            return Integer.parseInt(next());\n        }\n        public double nextDouble(){\n            return Double.parseDouble(next());\n        }\n    }\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.util.NoSuchElementException;\n\npublic class Main {\n\tstatic FastScanner sc = new FastScanner();\n\tstatic final double ALLOWABLE_ERROR = 0.00000001;\n\tstatic final double HOSEI = 0.0000000000000001;\n\n\tpublic static void main(String[] args) {\n\t\tdouble x0 = sc.nextDouble();\n\t\tdouble y0 = sc.nextDouble();\n\t\tdouble x1 = sc.nextDouble() + HOSEI;\n\t\tdouble y1 = sc.nextDouble() + HOSEI;\n\t\t\n\t\tdouble a = (y1 - y0) / (x1 - x0);\n\t\tdouble b = y1 - a * x1;\n\t\t\n\t\tint q = sc.nextInt();\n\t\tStringBuilder ans = new StringBuilder();\n\t\tfor(int i=0; i<q; i++) {\n\t\t\tdouble x = sc.nextDouble();\n\t\t\tdouble y = sc.nextDouble();\n\t\t\tif(Math.abs(y - (a * x + b)) < ALLOWABLE_ERROR) {\n\t\t\t\tif((x0 <= x && x <= x1) || (x1 <= x && x <= x0)) {\n\t\t\t\t\tans.append(\"ON_SEGMENT\");\n\t\t\t\t} else if(distance(x0, y0, x, y) < distance(x1, y1, x, y)) {\n\t\t\t\t\tans.append(\"ONLINE_BACK\");\n\t\t\t\t} else {\n\t\t\t\t\tans.append(\"ONLINE_FRONT\");\n\t\t\t\t}\n\t\t\t} else if((a > 0 && y - (a * x + b) > 0) || (a < 0 && y - (a * x + b) < 0)) {\n\t\t\t\tans.append(\"COUNTER_CLOCKWISE\");\n\t\t\t} else {\n\t\t\t\tans.append(\"CLOCKWISE\");\n\t\t\t}\n\t\t\t\n\t\t\tans.append(\"\\n\");\n\t\t}\n\t\t\n\t\tSystem.out.print(ans);\n\t}\n\t\n\tstatic double distance(double x1, double y1, double x2, double y2) {\n\t\treturn (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);\n\t}\n\n\tstatic class FastScanner {\n        private final InputStream in = System.in;\n        private final byte[] buffer = new byte[1024];\n        private int ptr = 0;\n        private int buflen = 0;\n        private boolean hasNextByte() {\n            if(ptr < buflen) {\n                return true;\n            } else {\n                ptr = 0;\n                try {\n                    buflen = in.read(buffer);\n                } catch(IOException e) {\n                    e.printStackTrace();\n                }\n                if(buflen <= 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        private int readByte() { if (hasNextByte()) return buffer[ptr++]; else return -1;}\n        private static boolean isPrintableChar(int c) { return 33 <= c && c <= 126;}\n        private void skipUnprintable() { while(hasNextByte() && !isPrintableChar(buffer[ptr])) ptr++;}\n        public boolean hasNext() { skipUnprintable(); return hasNextByte();}\n        public String next() {\n            if (!hasNext()) throw new NoSuchElementException();\n            StringBuilder sb = new StringBuilder();\n            int b = readByte();\n            while(isPrintableChar(b)) {\n                sb.appendCodePoint(b);\n                b = readByte();\n            }\n            return sb.toString();\n        }\n        public long nextLong() {\n            return Long.parseLong(next());\n        }\n        public int nextInt(){\n            return Integer.parseInt(next());\n        }\n        public double nextDouble(){\n            return Double.parseDouble(next());\n        }\n    }\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\nimport java.lang.*;\n\npublic class Main {\n    static final int INF = (1 << 31) - 1;             \n    static final int MAXN = 11111;     \n    \n    public static void main(String[] args) throws Exception {                \n        Scanner input = new Scanner(System.in);\n        int x0, y0, x1, y1, x2, y2;\n        int q;\n        x0 = input.nextInt();\n        y0 = input.nextInt();\n        x1 = input.nextInt();\n        y1 = input.nextInt();        \n        q = input.nextInt();\n        for (int i = 0; i < q; ++i) {\n            x2 = input.nextInt();\n            y2 = input.nextInt();\n            int d = ccw(x1 - x0, y1 - y0, x2 - x1, y2 - y1);\n            if (d > 0) System.out.println(\"COUNTER_CLOCKWISE\");\n            else if (d < 0) System.out.println(\"CLOCKWISE\");            \n            else {\n                int a2, b2, a1, b1;\n                a1 = x1 - x0;\n                b1 = y1 - y0;\n                a2 = x2 - x0;\n                b2 = y2 - y0;\n                if (a1 * a2 <= 0 && b1 * b2 <= 0 && (a1 * a1 + b1 * b1 != 0 && a2 * a2 + b2 * b2 != 0)) System.out.println(\"ONLINE_BACK\");\n                else if (Math.hypot(a1, b1) <= Math.hypot(a2, b2)) System.out.println(\"ONLINE_FRONT\");                                    \n                else System.out.println(\"ON_SEGMENT\");\n            }                    \n        }\n    }\n    \n    static int ccw(int a0, int b0, int a1, int b1) {\n        int d = a0 * b1 - a1 * b0;\n        return d;\n    }\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\npublic class Main {\n\t\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\n\t\tint xp0 = sc.nextInt();\n\t\tint yp0 = sc.nextInt();\n\t\tint xp1 = sc.nextInt();\n\t\tint yp1 = sc.nextInt();\n\n\t\tint q = sc.nextInt();\n\t\tfor (int i = 0; i < q; i++) {\n\t\t\tint xp2 = sc.nextInt();\n\t\t\tint yp2 = sc.nextInt();\n\n\t\t\tint ax = xp1 - xp0;\n\t\t\tint ay = yp1 - yp0;\n\t\t\tint bx = xp2 - xp0;\n\t\t\tint by = yp2 - yp0;\n\t\t\tint dot = Geom.dot(ax, ay, bx, by);\n\t\t\tint cross = Geom.cross(ax, ay, bx, by);\n\t\t\tint a2 = Geom.sumofsquare(ax, ay);\n\n\t\t\tif (cross > 0) {\n\t\t\t\tSystem.out.println(\"COUNTER_CLOCKWISE\");\n\t\t\t} else if (cross < 0) {\n\t\t\t\tSystem.out.println(\"CLOCKWISE\");\n\t\t\t} else {\n\t\t\t\tif (dot < 0) {\n\t\t\t\t\tSystem.out.println(\"ONLINE_BACK\");\n\t\t\t\t} else if (dot > a2) {\n\t\t\t\t\tSystem.out.println(\"ONLINE_FRONT\");\n\t\t\t\t} else {\n\t\t\t\t\tSystem.out.println(\"ON_SEGMENT\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tsc.close();\n\t}\n\t\n\tprivate static class Geom {\n\t\tstatic int dot(int xa, int ya, int xb, int yb) {\n\t\t\treturn xa * xb + ya * yb;\n\t\t}\n\n\t\tstatic int cross(int xa, int ya, int xb, int yb) {\n\t\t\treturn xa * yb - xb * ya;\n\t\t}\n\t\t\n\t\tstatic int sumofsquare(int xa, int ya) {\n\t\t\treturn xa * xa + ya * ya;\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\nclass Main{\n\tstatic String judge(int xp0, int yp0, int xp1, int yp1, int xp2, int yp2){\n\t\tint[] p1_to_p2 = {xp2 - xp1, yp2 - yp1};\n\t\tdouble aLine = (double)p1_to_p2[1] / (double)p1_to_p2[0];\n\t\tint[] p1 = {xp1 - xp0, yp1 - yp0};\n\t\tint[] p2 = {xp2 - xp0, yp2 - yp0};\n\t\tint[] p1plusp2 = {p1[0] + p2[0], p1[1] + p2[1]};\n\t\tboolean parallel;\n\n\t\tif(p1[0] != 0 && p1[1] != 0){\n\t\t\tif(p2[0] / p1[0] == p2[1] / p1[1]){\n\t\t\t\tparallel = true;\n\t\t\t}else{\n\t\t\t\tparallel = false;\n\t\t\t}\n\t\t}else{\n\t\t\tif(p1[0] == 0 && p2[0] == 0){\n\t\t\t\tparallel = true;\n\t\t\t}else if(p1[1] == 0 && p2[1] == 0){\n\t\t\t\tparallel = true;\n\t\t\t}else{\n\t\t\t\tparallel = false;\n\t\t\t}\n\t\t}\n\n\t\tif(parallel){ //parallel or p2=0\n\t\t\tif(p1[0] * p2[0] + p1[1] * p1[1] >= 0){ //naiseki_plus\n\t\t\t\tif(Math.abs(p2[0]) > Math.abs(p1[0])){\n\t\t\t\t\treturn \"ONLINE_FRONT\";\n\t\t\t\t}else{\n\t\t\t\t\treturn \"ON_SEGMENT\";\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\treturn \"ONLINE_BACK\";\n\t\t\t}\n\t\t}else{//not parallel\n\t\t\tif(p1_to_p2[0] > 0){\n\t\t\t\tif(yp1 < aLine * xp1){\n\t\t\t\t\treturn \"COUNTER_CLOCKWISE\";\n\t\t\t\t}else{\n\t\t\t\t\treturn \"CLOCKWISE\";\n\t\t\t\t}\n\t\t\t}else if(p1_to_p2[0] == 0){\n\t\t\t\tif(p1_to_p2[1] > 0 && xp1 > 0){\n\t\t\t\t\treturn \"COUNTER_CLOCKWISE\";\n\t\t\t\t}else if(p1_to_p2[1] > 0 && xp1 < 0){\n\t\t\t\t\treturn \"CLOCKWISE\";\n\t\t\t\t}else if(p1_to_p2[1] < 0 && xp1 > 0){\n\t\t\t\t\treturn \"CLOCKWISE\";\n\t\t\t\t}else if(p1_to_p2[1] < 0 && xp1 < 0){\n\t\t\t\t\treturn \"COUNTER_CLOCKWISE\";\n\t\t\t\t}else{\n\t\t\t\t\treturn \"nulldesu\";\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tif(yp1 < aLine * xp1){\n\t\t\t\t\treturn \"CLOCKWISE\";\n\t\t\t\t}else{\n\t\t\t\t\treturn \"COUNTER_CLOCKWISE\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\n\t\tint xp0 = in.nextInt();\n\t\tint yp0 = in.nextInt();\n\t\tint xp1 = in.nextInt();\n\t\tint yp1 = in.nextInt();\n\t\tint q = in.nextInt();\n\n\t\tfor(int i = 0; i < q; i ++){\n\t\t\tSystem.out.println(judge(xp0, yp0, xp1, yp1, in.nextInt(), in.nextInt()));\n\t\t}\n\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.PrintWriter;\n\npublic class Main {\n\tstatic boolean debug = false;\n\n\tpublic static void main(String[] args) throws IOException {\n\n\t\tUserScanner scan = new UserScanner();\n\t\tPrintWriter pwriter = new PrintWriter(System.out);\n\n\t\tGeometry geom = new Geometry();\n\n\t\tint x0 = scan.nextInt();\n\t\tint y0 = scan.nextInt();\n\t\tint x1 = scan.nextInt();\n\t\tint y1 = scan.nextInt();\n\n\t\tgeom.setBaseLine(new Point(x0, y0), new Point(x1, y1));\n\t\tPoint p0r = geom.rotateBaseX(new Point(x0, y0), true);\n\t\tPoint p1r = geom.rotateBaseX(new Point(x1, y1), true);\n\t\tp1r.x -= p0r.x;\n\t\tp1r.y -= p0r.y;\n\n\t\tint q = scan.nextInt();\n\t\tfor (int i = 0; i < q; i++) {\n\t\t\tint x2 = scan.nextInt();\n\t\t\tint y2 = scan.nextInt();\n\t\t\tPoint p2r = geom.rotateBaseX(new Point(x2, y2), true);\n\t\t\tp2r.x -= p0r.x;\n\t\t\tp2r.y -= p0r.y;\n\t\t//\tpwriter.println(p2r.x);\n\t\t\tif (p2r.y == 0)\n\t\t\t\tif (p2r.x < 0)\n\t\t\t\t\tpwriter.println(\"ONLINE_BACK\");\n\t\t\t\telse if (p2r.x > p1r.x)\n\t\t\t\t\tpwriter.println(\"ONLINE_FRONT\");\n\t\t\t\telse\n\t\t\t\t\tpwriter.println(\"ON_SEGMENT\");\n\t\t\telse if (p2r.y > 0)\n\t\t\t\tpwriter.println(\"COUNTER_CLOCKWISE\");\n\t\t\telse\n\t\t\t\tpwriter.println(\"CLOCKWISE\");\n\t\t}\n\t\tpwriter.flush();\n\n\t\tscan.close();\n\t\tSystem.exit(0);\n\t}\n}\n\nclass Point {\n\tpublic double x, y;\n\n\tpublic Point(double x, double y) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t}\n\n}\n\nclass Geometry {\n\tdouble sin, cos, cos2, sin2, sincos, cos2msin2;\n\n\tpublic void setBaseLine(Point p0, Point p1) {\n\t\tdouble t2 = (p1.x - p0.x) * (p1.x - p0.x) + (p1.y - p0.y) * (p1.y - p0.y);\n\t\tcos2 = (p1.x - p0.x) * (p1.x - p0.x) / t2;\n\t\tsin2 = (p1.y - p0.y) * (p1.y - p0.y) / t2;\n\t\tsincos = (p1.x - p0.x) * (p1.y - p0.y) / t2;\n\t\tsin = (p1.y - p0.y) / Math.sqrt(t2);\n\t\tcos = (p1.x - p0.x) / Math.sqrt(t2);\n\t}\n\n\tpublic boolean isSameLine(Point p0, Point p1, Point p2) {\n\t\tif ((p1.x - p0.x) * (p2.y - p0.y) == (p2.x - p0.x) * (p1.y - p0.y))\n\t\t\treturn true;\n\t\telse\n\t\t\treturn false;\n\t}\n\n\tpublic Point rotateBaseX(Point p, boolean direction) {\n\t\tif (direction)\n\t\t\treturn new Point(round(p.x * cos + p.y * sin), round(-p.x * sin + p.y * cos));\n\t\telse\n\t\t\treturn new Point(round(p.x * cos - p.y * sin), round(p.x * sin + p.y * cos));\n\t}\n\n\tprivate double round(double d) {\n\t\treturn (double) Math.round(d * 1000000000) / 1000000000;\n\t}\n\n}\n\nclass UserScanner {\n\tprivate final InputStream in = System.in;\n\tprivate final byte[] buffer = new byte[1024];\n\tprivate int ptr = 0;\n\tprivate int buflen = 0;\n\n\tprivate boolean read() throws IOException {\n\t\tptr = 0;\n\t\tbuflen = in.read(buffer);\n\t\tif (buflen <= 0)\n\t\t\treturn false;\n\t\telse\n\t\t\treturn true;\n\t}\n\n\tprivate byte getByte() throws IOException {\n\t\tif (ptr >= buflen)\n\t\t\tread();\n\t\tif (isCtlSpace(buffer[ptr])) {\n\t\t\treturn -1;\n\t\t} else\n\t\t\treturn buffer[ptr++];\n\t}\n\n\tprivate void skipCtlSpace() throws IOException {\n\t\tif (ptr >= buflen)\n\t\t\tread();\n\t\tif (isCtlSpace(buffer[ptr])) {\n\t\t\tptr++;\n\t\t\tskipCtlSpace();\n\t\t}\n\t}\n\n\tprivate boolean isCtlSpace(byte b) {\n\t\tif (b <= ' ' || b > '~')\n\t\t\treturn true;\n\t\telse\n\t\t\treturn false;\n\t}\n\n\tpublic void close() throws IOException {\n\t\tin.close();\n\t}\n\n\tpublic String next() throws IOException {\n\t\tskipCtlSpace();\n\t\tStringBuilder sb = new StringBuilder();\n\t\tbyte b;\n\t\twhile ((b = getByte()) != -1) {\n\t\t\tsb.appendCodePoint(b);\n\t\t}\n\t\treturn sb.toString();\n\t}\n\n\tpublic int nextInt() throws IOException {\n\t\tskipCtlSpace();\n\t\tint n = 0;\n\t\tboolean minus = false;\n\t\tbyte b;\n\t\twhile ((b = getByte()) != -1) {\n\t\t\tif (b == '-')\n\t\t\t\tminus = true;\n\t\t\telse {\n\t\t\t\tn *= 10;\n\t\t\t\tn += (b - '0');\n\t\t\t}\n\t\t}\n\t\tif (minus)\n\t\t\treturn n * -1;\n\t\telse\n\t\t\treturn n;\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "public class Main{\n  public void run(java.io.InputStream in, java.io.PrintStream out){\n    java.util.Scanner sc = new java.util.Scanner(in);\n/*answer*/\n    double xp0, xp1, yp0, yp1;\n    int q;\n    double[] xp2, yp2;\n    int i;\n    double s1x, s1y, s2x, s2y, s;\n\n    xp0 = sc.nextDouble();\n    yp0 = sc.nextDouble();\n    xp1 = sc.nextDouble();\n    yp1 = sc.nextDouble();\n    q = sc.nextInt();\n    xp2 = new double[q];\n    yp2 = new double[q];\n\n    s1x = xp1 - xp0;\n    s1y = yp1 - yp0;\n\n    for(i = 0;i < q;i++){\n      xp2[i] = sc.nextDouble();\n      yp2[i] = sc.nextDouble();\n      s2x = xp2[i] - xp0;\n      s2y = yp2[i] - yp0;\n\n      s = s1x * s2y - s1y * s2x;\n\n      if(s > 0){\n        System.out.println(\"COUNTER_CLOCKWISE\");\n      }else if(s < 0){\n        System.out.println(\"CLOCKWISE\");\n      }else{\n        if(s1x * s2x < 0){\n          System.out.println(\"ONLINE_BACK\");\n        }else{\n          if(((s1x * s1x) + (s1y * s1y)) < ((s2x * s2x) + (s2y * s2y))){\n            System.out.println(\"ONLINE_FRONT\");\n          }else{\n            System.out.println(\"ON_SEGMENT\");\n          }\n        }\n      }\n    }\n    sc.close();\n\n\n  }\n  public static void main(String[] args){\n    (new Main()).run(System.in, System.out);\n  }\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.PrintWriter;\nimport java.util.*;\nimport java.math.BigInteger;\n \npublic class Main implements Runnable {\n\t\n\tstatic int mod = 1000000007;\n\t\n    public static void main(String[] args) {\n    \tnew Thread(null, new Main(), \"\", 1024 * 1024 * 1024).start();\n    }\n    \n    public void run() {\n       \tPrintWriter out = new PrintWriter(System.out);\n        FastScanner sc = new FastScanner();\n\n        Point p0 = new Point(sc.nextDouble(),sc.nextDouble());\n        Point p1 = new Point(sc.nextDouble(),sc.nextDouble());\n        \n        int q = sc.nextInt();\n        \n        for(int i=0;i<q;i++){\n        \tPoint p2 = new Point(sc.nextDouble(),sc.nextDouble());\n        \tint dir = p0.direction(p1, p2);\n        \t\n            switch(dir){\n            case 1:\n                System.out.println(\"COUNTER_CLOCKWISE\");\n                break;\n            case 2:\n                System.out.println(\"CLOCKWISE\");\n                break;\n            case 3:\n                System.out.println(\"ONLINE_BACK\");\n                break;\n            case 4:\n                System.out.println(\"ONLINE_FRONT\");\n                break;\n            case 5:\n                System.out.println(\"ON_SEGMENT\");\n                break;\n            }\n        }\n        \n        out.flush();\n    }\n\n}\n\nclass Point implements Comparable<Point>{\n\tdouble x,y;\n\tstatic final double eps = 0.00000001;\n\t\n\tpublic Point(double a, double b){\n\t\tthis.x = a;\n\t\tthis.y = b;\n\t}\n\t\n\t//距離の2乗\n\tpublic double d2(Point b){\n\t\treturn (x-b.x)*(x-b.x) + (y-b.y)*(y-b.y);\n\t}\n\t\n\t//通常のユークリッド距離\n\tpublic double dist(Point b){\n\t\treturn Math.sqrt((x-b.x)*(x-b.x) + (y-b.y)*(y-b.y));\n\t}\n\t\n\t//p1へのベクトルからみてp2へのベクトルが反時計回りなら1、時計回りなら2\n\t//↑が同一直線状にあるとき、→p2が→p1と反対側なら3、→p2が→p1の延長線上なら4、→p2が→p1上にあれば5を返す\n\tint direction(Point p1, Point p2){\n\t\t\n\t\tif(p1.x == x && p1.y == y){\n\t\t\treturn 5;\n\t\t}\n\t\telse if(p2.x == x && p2.y == y){\n\t\t\treturn 5;\n\t\t}\n\t\t\n\t\t//外積の第三成分 = |→p1||→p2|sinθ\n\t\tdouble det = (p1.x -x)*(p2.y-y) - (p2.x -x)*(p1.y - y);\n\t\t\n\t\tif(det>eps){\n\t\t\treturn 1;\n\t\t}\n\t\telse if(det<-eps){\n\t\t\treturn 2;\n\t\t}\n\t\telse{\t//同一直線状\n\t\t\tif((p1.x-x >0 == p2.x-x <0) && p1.x-x != 0){\t//反対側\n\t\t\t\treturn 3;\n\t\t\t}\n\t\t\telse if((p1.y-y >0 == p2.y-y <0) && p1.y-y != 0){\t//反対側\n\t\t\t\treturn 3;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tdouble d10 = d2(p1);\t//p1とp0の距離^2\n\t\t\t\tdouble d20 = d2(p2);\t//p2とp0の距離^2\n\t\t\t\tif(d10 < d20){\t//p2のほうが遠い\n\t\t\t\t\treturn 4;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\treturn 5;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t}\n\n\t@Override\n\tpublic int hashCode() {\n\t\tfinal int prime = 31;\n\t\tint result = 1;\n\t\tlong temp;\n\t\ttemp = Double.doubleToLongBits(x);\n\t\tresult = prime * result + (int) (temp ^ (temp >>> 32));\n\t\ttemp = Double.doubleToLongBits(y);\n\t\tresult = prime * result + (int) (temp ^ (temp >>> 32));\n\t\treturn result;\n\t}\n\n\t@Override\n\tpublic boolean equals(Object obj) {\n\t\tif (this == obj)\n\t\t\treturn true;\n\t\tif (obj == null)\n\t\t\treturn false;\n\t\tif (getClass() != obj.getClass())\n\t\t\treturn false;\n\t\tPoint other = (Point) obj;\n\t\tif (Double.doubleToLongBits(x) != Double.doubleToLongBits(other.x))\n\t\t\treturn false;\n\t\tif (Double.doubleToLongBits(y) != Double.doubleToLongBits(other.y))\n\t\t\treturn false;\n\t\treturn true;\n\t}\n\t\n\t@Override\n\tpublic int compareTo(Point o){\n\t\tif(x!=o.x){\n\t\t\treturn Double.compare(x,o.x);\n\t\t}\n\t\treturn Double.compare(y, o.y);\n\t}\n\t\t\n}\n\nclass FastScanner {\n\tprivate final InputStream in = System.in;\n\tprivate final byte[] buffer = new byte[1024];\n\tprivate int ptr = 0;\n\tprivate int buflen = 0;\n\tprivate boolean hasNextByte() {\n\t\tif (ptr < buflen) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\tptr = 0;\n\t\t\ttry {\n\t\t\t\tbuflen = in.read(buffer);\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\tif (buflen <= 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\tprivate int readByte() {\n\t\tif (hasNextByte())\n\t\t\treturn buffer[ptr++];\n\t\telse\n\t\t\treturn -1;\n\t}\n\tprivate static boolean isPrintableChar(int c) {\n\t\treturn 33 <= c && c <= 126;\n\t}\n\tpublic boolean hasNext() {\n\t\twhile (hasNextByte() && !isPrintableChar(buffer[ptr]))\n\t\t\tptr++;\n\t\treturn hasNextByte();\n\t}\n\tpublic String next() {\n\t\tif (!hasNext())\n\t\t\tthrow new NoSuchElementException();\n\t\tStringBuilder sb = new StringBuilder();\n\t\tint b = readByte();\n\t\twhile (isPrintableChar(b)) {\n\t\t\tsb.appendCodePoint(b);\n\t\t\tb = readByte();\n\t\t}\n\t\treturn sb.toString();\n\t}\n\tpublic long nextLong() {\n\t\tif (!hasNext())\n\t\t\tthrow new NoSuchElementException();\n\t\tlong n = 0;\n\t\tboolean minus = false;\n\t\tint b = readByte();\n\t\tif (b == '-') {\n\t\t\tminus = true;\n\t\t\tb = readByte();\n\t\t}\n\t\tif (b < '0' || '9' < b) {\n\t\t\tthrow new NumberFormatException();\n\t\t}\n\t\twhile (true) {\n\t\t\tif ('0' <= b && b <= '9') {\n\t\t\t\tn *= 10;\n\t\t\t\tn += b - '0';\n\t\t\t} else if (b == -1 || !isPrintableChar(b)) {\n\t\t\t\treturn minus ? -n : n;\n\t\t\t} else {\n\t\t\t\tthrow new NumberFormatException();\n\t\t\t}\n\t\t\tb = readByte();\n\t\t}\n\t}\n\tpublic int nextInt() {\n\t\tlong nl = nextLong();\n\t\tif (nl < Integer.MIN_VALUE || nl > Integer.MAX_VALUE)\n\t\t\tthrow new NumberFormatException();\n\t\treturn (int) nl;\n\t}\n\tpublic int[] nextintArray(int n){\n\t\tint[] a = new int[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\ta[i] = nextInt();\n\t\t}\n\t\treturn a;\n\t}\n\tpublic long[] nextlongArray(int n){\n\t\tlong[] a = new long[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\ta[i] = nextLong();\n\t\t}\n\t\treturn a;\n\t}\n\tpublic Integer[] nextIntegerArray(int n){\n\t\tInteger[] a = new Integer[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\ta[i] = nextInt();\n\t\t}\n\t\treturn a;\n\t}\n\tpublic int[][] nextintMatrix(int h, int w){\n\t\tint[][] mat = new int[h][w];\n\t\tfor(int i=0;i<h;i++){\n\t\t\tfor(int j=0;j<w;j++){\n\t\t\t\tmat[i][j] = nextInt();\n\t\t\t}\n\t\t}\n\t\treturn mat;\n\t}\n\tpublic double nextDouble() {\n\t\treturn Double.parseDouble(next());\n\t}\n}\n"
  },
  {
    "language": "Java",
    "code": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.util.NoSuchElementException;\n\npublic class Main {\n\tstatic FastScanner sc = new FastScanner();\n\tstatic final double ALLOWABLE_ERROR = 0.00000001;\n\n\tpublic static void main(String[] args) {\n\t\tdouble x0 = sc.nextDouble();\n\t\tdouble y0 = sc.nextDouble();\n\t\tdouble x1 = sc.nextDouble();\n\t\tdouble y1 = sc.nextDouble();\n\t\t\n\t\tdouble a = (y1 - y0) / (x1 - x0);\n\t\tdouble b = y1 - a * x1;\n\t\t\n\t\tint q = sc.nextInt();\n\t\tStringBuilder ans = new StringBuilder();\n\t\tfor(int i=0; i<q; i++) {\n\t\t\tdouble x = sc.nextDouble();\n\t\t\tdouble y = sc.nextDouble();\n\t\t\tif(x0 == x1) {\n\t\t\t\tif(x == x0) {\n\t\t\t\t\tif((y0 <= y && y <= y1) || (y1 <= y && y <= y0)) {\n\t\t\t\t\t\tans.append(\"ON_SEGMENT\");\n\t\t\t\t\t} else if(distance(x0, y0, x, y) < distance(x1, y1, x, y)) {\n\t\t\t\t\t\tans.append(\"ONLINE_BACK\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tans.append(\"ONLINE_FRONT\");\n\t\t\t\t\t}\n\t\t\t\t} else if((y0 < y1 && x < x0) || (y0 > y1 && x > x0)) {\n\t\t\t\t\tans.append(\"COUNTER_CLOCKWISE\");\n\t\t\t\t} else {\n\t\t\t\t\tans.append(\"CLOCKWISE\");\n\t\t\t\t}\t\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\tif(Math.abs(y - (a * x + b)) < ALLOWABLE_ERROR) {\n\t\t\t\t\tif((x0 <= x && x <= x1) || (x1 <= x && x <= x0)) {\n\t\t\t\t\t\tans.append(\"ON_SEGMENT\");\n\t\t\t\t\t} else if(distance(x0, y0, x, y) < distance(x1, y1, x, y)) {\n\t\t\t\t\t\tans.append(\"ONLINE_BACK\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tans.append(\"ONLINE_FRONT\");\n\t\t\t\t\t}\n\t\t\t\t} else if((x0 < x1 && y - (a * x + b) > 0) || (x0 > x1 && y - (a * x + b) < 0)) {\n\t\t\t\t\tans.append(\"COUNTER_CLOCKWISE\");\n\t\t\t\t} else {\n\t\t\t\t\tans.append(\"CLOCKWISE\");\n\t\t\t\t}\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tans.append(\"\\n\");\n\t\t}\n\t\t\n\t\tSystem.out.print(ans);\n\t}\n\t\n\tstatic double distance(double x1, double y1, double x2, double y2) {\n\t\treturn (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);\n\t}\n\n\tstatic class FastScanner {\n        private final InputStream in = System.in;\n        private final byte[] buffer = new byte[1024];\n        private int ptr = 0;\n        private int buflen = 0;\n        private boolean hasNextByte() {\n            if(ptr < buflen) {\n                return true;\n            } else {\n                ptr = 0;\n                try {\n                    buflen = in.read(buffer);\n                } catch(IOException e) {\n                    e.printStackTrace();\n                }\n                if(buflen <= 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        private int readByte() { if (hasNextByte()) return buffer[ptr++]; else return -1;}\n        private static boolean isPrintableChar(int c) { return 33 <= c && c <= 126;}\n        private void skipUnprintable() { while(hasNextByte() && !isPrintableChar(buffer[ptr])) ptr++;}\n        public boolean hasNext() { skipUnprintable(); return hasNextByte();}\n        public String next() {\n            if (!hasNext()) throw new NoSuchElementException();\n            StringBuilder sb = new StringBuilder();\n            int b = readByte();\n            while(isPrintableChar(b)) {\n                sb.appendCodePoint(b);\n                b = readByte();\n            }\n            return sb.toString();\n        }\n        public long nextLong() {\n            return Long.parseLong(next());\n        }\n        public int nextInt(){\n            return Integer.parseInt(next());\n        }\n        public double nextDouble(){\n            return Double.parseDouble(next());\n        }\n    }\n}"
  },
  {
    "language": "Java",
    "code": "public class Main{\n  public void run(java.io.InputStream in, java.io.PrintStream out){\n    java.util.Scanner sc = new java.util.Scanner(in);\n/*answer*/\n    double xp0, xp1, yp0, yp1;\n    int q;\n    double[] xp2, yp2;\n    int i;\n    double s1x, s1y, s2x, s2y, s;\n\n    xp0 = sc.nextDouble();\n    yp0 = sc.nextDouble();\n    xp1 = sc.nextDouble();\n    yp1 = sc.nextDouble();\n    q = sc.nextInt();\n    xp2 = new double[q];\n    yp2 = new double[q];\n\n    s1x = xp1 - xp0;\n    s1y = yp1 - yp0;\n\n    for(i = 0;i < q;i++){\n      xp2[i] = sc.nextDouble();\n      yp2[i] = sc.nextDouble();\n      s2x = xp2[i] - xp0;\n      s2y = yp2[i] - yp0;\n\n      s = s1x * s2y - s1y * s2x;\n      if(s > 0){\n        System.out.println(\"COUNTER_CLOCKWISE\");\n      }else if(s < 0){\n        System.out.println(\"CLOCKWISE\");\n      }else{\n        if(s1x * s2x < 0){\n          System.out.println(\"ONLINE_BACK\");\n        }else{\n          if(s1x < 0)s1x *= -1;\n          if(s2x < 0)s2x *= -1;\n          if(s1x < s2x){\n            System.out.println(\"ONLINE_FRONT\");\n          }else{\n            System.out.println(\"ON_SEGMENT\");\n          }\n        }\n      }\n    }\n    sc.close();\n\n\n  }\n  public static void main(String[] args){\n    (new Main()).run(System.in, System.out);\n  }\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\nclass Point {\n\tstatic double EPS = 0.0000000001;\n\tdouble x; double y;\n\tpublic Point(double ax, double ay){x=ax;y=ay;}\n\tpublic Vector sum(Point p) { return new Vector(x+p.x,y+p.y); }\n\tpublic Vector diff(Point p) { return new Vector(x-p.x,y-p.y); }\n\tpublic Vector mult(double k) { return new Vector(x*k,y*k); }\n\tpublic Vector div(double k) { return new Vector(x*(1.0/k),y*(1.0/k)); }\n\tpublic boolean equals(Point p){return Math.abs(x-p.x)<EPS && Math.abs(y-p.y)<EPS;}\n\tpublic String toString(){return \"(\"+x+\",\"+y+\")\";}\n}\nclass Vector extends Point {\n\tpublic Vector(double ax, double ay) {super(ax,ay);}\n\tpublic Vector(Point p1, Point p2) {super(p1.x-p2.x,p2.x-p2.y);}\n\tpublic double norm() {return x*x+y*y;}\n\tpublic double abs() {return Math.sqrt(norm());}\n\t// TODO:\n\tpublic boolean isSmallerThan(Vector v) {return x!=v.x?x<v.x:y<v.y;}\n\tpublic double dotProduct(Vector v) {return x*v.x+y*v.y;}\n\tpublic double crossProduct(Vector v) {return x*v.y - y*v.x;}\n}\n\npublic class Main {\n\tstatic double EPS = 0.0000000001;\n\tpublic static void main(String[] a){\n\t\tScanner scan = new Scanner(System.in);\n\t\t\n\t\tPoint p0 = new Point(scan.nextInt(), scan.nextInt());\n\t\tPoint p1 = new Point(scan.nextInt(), scan.nextInt());\n\t\tint p = scan.nextInt();\n\t\tfor (int i=0;i<p;i++) {\n\t\t\tPoint p2 = new Point(scan.nextInt(), scan.nextInt());\n\t\t\tint res=ccw(p0,p1,p2);\n\t\t\tif (res==1) System.out.println(\"COUNTER_CLOCKWISE\");\n\t\t\tif (res==2) System.out.println(\"CLOCKWISE\");\n\t\t\tif (res==3) System.out.println(\"ONLINE_BACK\");\n\t\t\tif (res==5) System.out.println(\"ON_SEGMENT\");\n\t\t\tif (res==4) System.out.println(\"ONLINE_FRONT\");\n\t\t}\n\t}\n\tstatic int ccw(Point lp0, Point lp1, Point p) {\n\t\tVector lv = lp1.diff(lp0);\n\t\tVector pv = p.diff(lp0);\n\t\tdouble cp=0.0;\n\t\tif ((cp=lv.crossProduct(pv))>EPS) {return 1;} // counter-clockwise\n\t\tif (cp<-EPS) {return 2;} // clockwise\n\t\tif (lv.dotProduct(pv)<-EPS) return 3; // online-back\n\t\tif (lv.norm() < pv.norm()) return 4; // online-front\n\t\treturn 5; // on-segment\n\t}\n\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\nclass Main{\n\tstatic String judge(double xp0, double yp0, double xp1, double yp1, double xp2, double yp2){\n\t\tdouble[] p1_to_p2 = {xp2 - xp1, yp2 - yp1};\n\t\t//double BorderLine = p1_to_p2[1] / p1_to_p2[0];\n\t\tdouble[] p1 = {xp1 - xp0, yp1 - yp0};\n\t\tdouble[] p2 = {xp2 - xp0, yp2 - yp0};\n\n\t\tif(cross(p1, p2)){ //parallel\n\t\t\tif(normSqr(p1) >= normSqr(p2) && inPro(p1, p2) >= 0){ //ON_SEGMENT?\n\t\t\t\treturn(\"ON_SEGMENT\");\n\t\t\t}else{\n\t\t\t\tif(normSqr(p2) > normSqr(p1) && inPro(p1, p2) >= 0){\n\t\t\t\t\treturn(\"ONLINE_FRONT\");\n\t\t\t\t}else{\n\t\t\t\t\treturn(\"ONLINE_BACK\");\n\t\t\t\t}\n\t\t\t}\n\t\t}else{ //not_parallel\n\t\t\tif(isThisClockwise(p1, p2)){\n\t\t\t\treturn(\"CLOCKWISE\");\n\t\t\t}else{\n\t\t\t\treturn(\"COUNTER_CLOCKWISE\");\n\t\t\t}\n\t\t}\n\t}\n\n\tstatic boolean isThisClockwise(double[] p1, double[] p2){\n\t\tdouble[] p1_to_p2 = {p2[0] - p1[0], p2[1] - p1[1]};\n\n\t\tif(p1_to_p2[0] == 0){\n\t\t\tif(p1_to_p2[1] >= 0){\n\t\t\t\tif(p1[0] >= 0){\n\t\t\t\t\treturn false;\n\t\t\t\t}else{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tif(p1[0] >= 0){\n\t\t\t\t\treturn true;\n\t\t\t\t}else{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}else if(p1_to_p2[1] == 0){\n\t\t\tif(p1_to_p2[0] >= 0){\n\t\t\t\tif(p1[1] >= 0){\n\t\t\t\t\treturn true;\n\t\t\t\t}else{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tif(p1[1] >= 0){\n\t\t\t\t\treturn false;\n\t\t\t\t}else{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}else{\n\t\t\tdouble t = - p1[0] / p1_to_p2[0];\n\t\t\tif(p1[1] + t * p1_to_p2[1] >= 0){ //????????????????°?????????????\n\t\t\t\tif(p1_to_p2[0] >= 0){\n\t\t\t\t\treturn true;\n\t\t\t\t}else{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tif(p1_to_p2[0] >= 0){\n\t\t\t\t\treturn false;\n\t\t\t\t}else{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tstatic boolean cross(double[] p1, double[] p2){\n\t\treturn((p1[0]*p2[1] - p1[1]*p2[0] == 0) ? (true) : (false));\n\t}\n\n\tstatic double inPro(double[] p1, double[] p2){\n\t\treturn(p1[0] * p2[0] + p1[1] * p2[1]);\n\t}\n\n\tstatic double normSqr(double[] p){\n\t\treturn(p[0]*p[0] + p[1]*p[1]);\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\n\t\tint xp0 = in.nextInt();\n\t\tint yp0 = in.nextInt();\n\t\tint xp1 = in.nextInt();\n\t\tint yp1 = in.nextInt();\n\t\tint q = in.nextInt();\n\n\t\tfor(int i = 0; i < q; i ++){\n\t\t\tSystem.out.println(judge(xp0, yp0, xp1, yp1, in.nextInt(), in.nextInt()));\n\t\t}\n\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.PrintWriter;\n\npublic class Main {\n\tstatic boolean debug = false;\n\n\tpublic static void main(String[] args) throws IOException {\n\n\t\tUserScanner scan = new UserScanner();\n\t\tPrintWriter pwriter = new PrintWriter(System.out);\n\n\t\tGeometry geom = new Geometry();\n\n\t\tint x0 = scan.nextInt();\n\t\tint y0 = scan.nextInt();\n\t\tint x1 = scan.nextInt();\n\t\tint y1 = scan.nextInt();\n\n\t\tgeom.setBaseLine(new Point(x0, y0), new Point(x1, y1));\n\t\tPoint p0r = geom.rotateBaseX(new Point(x0, y0), true);\n\t\tPoint p1r = geom.rotateBaseX(new Point(x1, y1), true);\n\t\tp1r.x -= p0r.x;\n\t\tp1r.y -= p0r.y;\n\n\t\tint q = scan.nextInt();\n\t\tfor (int i = 0; i < q; i++) {\n\t\t\tint x2 = scan.nextInt();\n\t\t\tint y2 = scan.nextInt();\n\t\t\tPoint p2r = geom.rotateBaseX(new Point(x2, y2), true);\n\t\t\tp2r.x -= p0r.x;\n\t\t\tp2r.y -= p0r.y;\n\t\t\tif (p2r.y == 0)\n\t\t\t\tif (p2r.x < 0)\n\t\t\t\t\tpwriter.println(\"ONLINE_BACK\");\n\t\t\t\telse if (p2r.x > p1r.x)\n\t\t\t\t\tpwriter.println(\"ONLINE_FRONT\");\n\t\t\t\telse\n\t\t\t\t\tpwriter.println(\"ON_SEGMENT\");\n\t\t\telse if (p2r.y > 0)\n\t\t\t\tpwriter.println(\"COUNTER_CLOCKWISE\");\n\t\t\telse\n\t\t\t\tpwriter.println(\"CLOCKWISE\");\n\t\t}\n\t\tpwriter.flush();\n\n\t\tscan.close();\n\t\tSystem.exit(0);\n\t}\n}\n\nclass Point {\n\tpublic double x, y;\n\n\tpublic Point(double x, double y) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t}\n\n}\n\nclass Geometry {\n\tdouble sin, cos, cos2, sin2, sincos, cos2msin2;\n\n\tpublic void setBaseLine(Point p0, Point p1) {\n\t\tdouble t2 = (p1.x - p0.x) * (p1.x - p0.x) + (p1.y - p0.y) * (p1.y - p0.y);\n\t\tcos2 = (p1.x - p0.x) * (p1.x - p0.x) / t2;\n\t\tsin2 = (p1.y - p0.y) * (p1.y - p0.y) / t2;\n\t\tsincos = (p1.x - p0.x) * (p1.y - p0.y) / t2;\n\t\tsin = (p1.y - p0.y) / Math.sqrt(t2);\n\t\tcos = (p1.x - p0.x) / Math.sqrt(t2);\n\t}\n\n\tpublic boolean isSameLine(Point p0, Point p1, Point p2) {\n\t\tif ((p1.x - p0.x) * (p2.y - p0.y) == (p2.x - p0.x) * (p1.y - p0.y))\n\t\t\treturn true;\n\t\telse\n\t\t\treturn false;\n\t}\n\n\tpublic Point rotateBaseX(Point p, boolean direction) {\n\t\tif (direction)\n\t\t\treturn new Point(p.x * cos + p.y * sin, -p.x * sin + p.y * cos);\n\t\telse\n\t\t\treturn new Point(p.x * cos - p.y * sin, p.x * sin + p.y * cos);\n\t}\n\n}\n\nclass UserScanner {\n\tprivate final InputStream in = System.in;\n\tprivate final byte[] buffer = new byte[1024];\n\tprivate int ptr = 0;\n\tprivate int buflen = 0;\n\n\tprivate boolean read() throws IOException {\n\t\tptr = 0;\n\t\tbuflen = in.read(buffer);\n\t\tif (buflen <= 0)\n\t\t\treturn false;\n\t\telse\n\t\t\treturn true;\n\t}\n\n\tprivate byte getByte() throws IOException {\n\t\tif (ptr >= buflen)\n\t\t\tread();\n\t\tif (isCtlSpace(buffer[ptr])) {\n\t\t\treturn -1;\n\t\t} else\n\t\t\treturn buffer[ptr++];\n\t}\n\n\tprivate void skipCtlSpace() throws IOException {\n\t\tif (ptr >= buflen)\n\t\t\tread();\n\t\tif (isCtlSpace(buffer[ptr])) {\n\t\t\tptr++;\n\t\t\tskipCtlSpace();\n\t\t}\n\t}\n\n\tprivate boolean isCtlSpace(byte b) {\n\t\tif (b <= ' ' || b > '~')\n\t\t\treturn true;\n\t\telse\n\t\t\treturn false;\n\t}\n\n\tpublic void close() throws IOException {\n\t\tin.close();\n\t}\n\n\tpublic String next() throws IOException {\n\t\tskipCtlSpace();\n\t\tStringBuilder sb = new StringBuilder();\n\t\tbyte b;\n\t\twhile ((b = getByte()) != -1) {\n\t\t\tsb.appendCodePoint(b);\n\t\t}\n\t\treturn sb.toString();\n\t}\n\n\tpublic int nextInt() throws IOException {\n\t\tskipCtlSpace();\n\t\tint n = 0;\n\t\tboolean minus = false;\n\t\tbyte b;\n\t\twhile ((b = getByte()) != -1) {\n\t\t\tif (b == '-')\n\t\t\t\tminus = true;\n\t\t\telse {\n\t\t\t\tn *= 10;\n\t\t\t\tn += (b - '0');\n\t\t\t}\n\t\t}\n\t\tif (minus)\n\t\t\treturn n * -1;\n\t\telse\n\t\t\treturn n;\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.awt.geom.Line2D;\nimport java.awt.geom.Point2D;\nimport java.util.*;\npublic class Main {\n\tScanner in = new Scanner(System.in);\n\tpublic static void main(String[] args) {\n\t\tnew Main();\n\t}\n\n\tpublic Main() {\n\t\tnew AOJCGL_1C().doIt();\n\t}\n\n\tclass AOJCGL_1C{\n\t\tint CCW(Point2D a,Point2D b,Point2D target){ //a-bの直線はtargetの右か左か\n\t\t\tPoint2D q = new Point2D.Double(b.getX()-a.getX(),b.getY()-a.getY());\n\t\t\tPoint2D r = new Point2D.Double(target.getX()-a.getX(),target.getY()-a.getY());\n\t\t\tif(cross(q, r)>0)return -1;//左側\n\t\t\telse if(cross(q,r)<0)return 1;//右側\n\t\t\telse return 0;//重なっている\n\t\t}\n\n\t\tdouble cross(Point2D p1,Point2D p2){\n\t\t\treturn p1.getX()*p2.getY()-p1.getY()*p2.getX();\n\t\t}\n\n\t\tint OnLine(Point2D p0,Point2D p1,Point2D p2){\n\t\t\tdouble a1 = p1.getX() - p0.getX();\n\t\t\tdouble b1 = p1.getY() - p0.getY();\n\t\t\tdouble a2 = p2.getX() - p0.getX();\n\t\t\tdouble b2 = p2.getY() - p0.getY();\n\t\t\tif (a1 * a2 <= 0 && b1 * b2 <= 0 && (a1 * a1 + b1 * b1 != 0 && a2 * a2 + b2 * b2 != 0))return -1;\n\t\t\telse if (Math.hypot(a1, b1) < Math.hypot(a2, b2))return 1;\n\t\t\telse return 0;\n\t\t}\n\n\t\tvoid doIt(){\n\t\t\tPoint2D p0 = new Point2D.Double(in.nextDouble(),in.nextDouble());\n\t\t\tPoint2D p1 = new Point2D.Double(in.nextDouble(),in.nextDouble());\n\t\t\tint q = in.nextInt();\n\t\t\tfor(int i=0;i<q;i++){\n\t\t\t\tPoint2D p2 = new Point2D.Double(in.nextDouble(), in.nextDouble());\n\t\t\t\tint d = CCW(p0, p1, p2);\n\t\t\t\tif(d>0)System.out.println(\"CLOCKWISE\");\n\t\t\t\telse if(d<0)System.out.println(\"COUNTER_CLOCKWISE\");\n\t\t\t\telse{\n\t\t\t\t\tint s = OnLine(p0, p1, p2);\n\t\t\t\t\tif(s<0)System.out.println(\"ONLINE_BACK\");\n\t\t\t\t\telse if(s>0)System.out.println(\"ONLINE_FRONT\");\n\t\t\t\t\telse if(s==0)System.out.println(\"ON_SEGMENT\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\nclass Main{\n\tstatic String judge(int xp0, int yp0, int xp1, int yp1, int xp2, int yp2){\n\t\tint[] p1_to_p2 = {xp2 - xp1, yp2 - yp1};\n\t\tdouble aLine = (double)p1_to_p2[1] / (double)p1_to_p2[0];\n\t\tint[] p1 = {xp1 - xp0, yp1 - yp0};\n\t\tint[] p2 = {xp2 - xp0, yp2 - yp0};\n\t\tint[] p1plusp2 = {p1[0] + p2[0], p1[1] + p2[1]};\n\t\tboolean parallel;\n\n\t\tif(p1[0] == 0 && p1[0] == 0){\n\t\t\tif(p2[0] / p1[0] == p2[1] / p1[1]){\n\t\t\t\tparallel = true;\n\t\t\t}else{\n\t\t\t\tparallel = false;\n\t\t\t}\n\t\t}else{\n\t\t\tif(p1[0] == 0 && p2[0] == 0){\n\t\t\t\tparallel = true;\n\t\t\t}else if(p1[1] == 0 && p2[1] == 0){\n\t\t\t\tparallel = true;\n\t\t\t}else{\n\t\t\t\tparallel = false;\n\t\t\t}\n\t\t}\n\n\t\tif(parallel){ //parallel or p2=0\n\t\t\tif(p1[0] * p2[0] + p1[1] * p1[1] >= 0){ //naiseki_plus\n\t\t\t\tif(Math.abs(p2[0]) > Math.abs(p1[0])){\n\t\t\t\t\treturn \"ONLINE_FRONT\";\n\t\t\t\t}else{\n\t\t\t\t\treturn \"ON_SEGMENT\";\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\treturn \"ONLINE_BACK\";\n\t\t\t}\n\t\t}else{//not parallel\n\t\t\tif(p1_to_p2[0] > 0){\n\t\t\t\tif(yp1 < aLine * xp1){\n\t\t\t\t\treturn \"COUNTER_CLOCKWISE\";\n\t\t\t\t}else{\n\t\t\t\t\treturn \"CLOCKWISE\";\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tif(yp1 < aLine * xp1){\n\t\t\t\t\treturn \"CLOCKWISE\";\n\t\t\t\t}else{\n\t\t\t\t\treturn \"COUNTER_CLOCKWISE\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\n\t\tint xp0 = in.nextInt();\n\t\tint yp0 = in.nextInt();\n\t\tint xp1 = in.nextInt();\n\t\tint yp1 = in.nextInt();\n\t\tint q = in.nextInt();\n\n\t\tfor(int i = 0; i < q; i ++){\n\t\t\tSystem.out.println(judge(xp0, yp0, xp1, yp1, in.nextInt(), in.nextInt()));\n\t\t}\n\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.awt.geom.Line2D;\nimport java.awt.geom.Point2D;\nimport java.util.*;\n\nimport javax.sound.sampled.Line;\npublic class Main {\n\tScanner in = new Scanner(System.in);\n\tpublic static void main(String[] args) {\n\t\tnew Main();\n\t}\n\n\tpublic Main() {\n\t\tnew AOJCGL_1C().doIt();\n\t}\n\n\tclass AOJCGL_1C{\n\t\tboolean Online(Point2D from,Point2D to,Point2D target){\n\t\t\tLine2D l = new Line2D.Double(from, to);\n//\t\t\tSystem.out.println(l.ptSegDist(target));\n\t\t\tdouble d = l.ptSegDist(target);\n\t\t\tif(d<0.000000001)return true;\n\t\t\treturn false;\n\t\t}\n\n\n\t\tvoid doIt(){\n\t\t\tPoint2D p0 = new Point2D.Double(in.nextDouble(),in.nextDouble());\n\t\t\tPoint2D p1 = new Point2D.Double(in.nextDouble(),in.nextDouble());\n\t\t\tint q = in.nextInt();\n\t\t\tfor(int i=0;i<q;i++){\n\t\t\t\tPoint2D p2 = new Point2D.Double(in.nextDouble(), in.nextDouble());\n//\t\t\t\tif(i==89)System.out.println(p2);\n\t\t\t\tint d = right_left(p0, p1, p2);\n\t\t\t\tif(d>0)System.out.println(\"CLOCKWISE\");\t\n\t\t\t\telse if(d<0)System.out.println(\"COUNTER_CLOCKWISE\");\n\t\t\t\telse if(Online(p0,p1,p2))System.out.println(\"ON_SEGMENT\");\n\t\t\t\telse if(Online(p2, p1, p0))System.out.println(\"ONLINE_BACK\");\n\t\t\t\telse if(Online(p0, p2, p1))System.out.println(\"ONLINE_FRONT\");\n\t\t\t}\n\t\t}\n\t}\n\n\tint right_left(Point2D a,Point2D b,Point2D target){ //a-bの直線はtargetの右か左か\n\t\tPoint2D q = new Point2D.Double(b.getX()-a.getX(),b.getY()-a.getY());\n\t\tPoint2D r = new Point2D.Double(target.getX()-a.getX(),target.getY()-a.getY());\n\t\tif(cross(q, r)>0)return -1;//左側\n\t\telse if(cross(q,r)<0)return 1;//右側\n\t\telse return 0;//重なっている\n\t}\n\tdouble cross(Point2D p1,Point2D p2){\n\t\treturn p1.getX()*p2.getY()-p1.getY()*p2.getX();\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.awt.geom.Line2D;\nimport java.awt.geom.Point2D;\nimport java.util.*;\npublic class Main {\n\tScanner in = new Scanner(System.in);\n\tpublic static void main(String[] args) {\n\t\tnew Main();\n\t}\n\t\n\tpublic Main() {\n\t\tnew AOJCGL_1C().doIt();\n\t}\n\n\tclass AOJCGL_1C{\n\t\tboolean Online(Point2D from,Point2D to,Point2D target){\n\t\t\tLine2D l = new Line2D.Double(from, to);\n\t\t\tdouble d = l.ptSegDist(target);\n\t\t\treturn d == 0;\n\t\t}\n\t\t\n\t\tboolean Online2(Point2D from,Point2D to,Point2D target){\n\t\t\tLine2D l = new Line2D.Double(from, to);\n\t\t\tdouble d = l.ptSegDist(target);\n\t\t\tif(d!=0)return false;\n\t\t\tif(from.equals(target))return false;\n\t\t\tif(to.equals(target))return false;\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\tvoid doIt(){\n\t\t\tPoint2D p0 = new Point2D.Double(in.nextDouble(),in.nextDouble());\n\t\t\tPoint2D p1 = new Point2D.Double(in.nextDouble(),in.nextDouble());\n\t\t\tint q = in.nextInt();\n\t\t\tfor(int i=0;i<q;i++){\n\t\t\t\tPoint2D p2 = new Point2D.Double(in.nextDouble(), in.nextDouble());\n\t\t\t\tint d = right_left(p0, p1, p2);\n\t\t\t\tif(d>0)System.out.println(\"CLOCKWISE\");\t\n\t\t\t\telse if(d<0)System.out.println(\"COUNTER_CLOCKWISE\");\n\t\t\t\telse if(Online(p0,p1,p2))System.out.println(\"ON_SEGMENT\");\n\t\t\t\telse if(Online(p2, p1, p0))System.out.println(\"ONLINE_FRONT\");\n\t\t\t\telse if(Online(p0, p2, p1))System.out.println(\"ONLINE_BACK\");\n\t\t\t}\n\t\t}\n\t}\n\n\tint right_left(Point2D a,Point2D b,Point2D target){ //a-bの直線はtargetの右か左か\n\t\tPoint2D q = new Point2D.Double(b.getX()-a.getX(),b.getY()-a.getY());\n\t\tPoint2D r = new Point2D.Double(target.getX()-a.getX(),target.getY()-a.getY());\n\t\t//          System.out.println(\"q= \"+q);\n\t\t//          System.out.println(\"r= \"+r);\n\t\t//          System.out.println(cross(q, r));\n\t\tif(cross(q, r)>0)return -1;//左側\n\t\telse if(cross(q,r)<0)return 1;//右側\n\t\telse return 0;//重なっている\n\t}\n\tdouble cross(Point2D p1,Point2D p2){\n\t\treturn p1.getX()*p2.getY()-p1.getY()*p2.getX();\n\t}\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Program {\n    static int ReadInt() { return int.Parse(Console.ReadLine()); }\n    static int[] ReadInts() { return Console.ReadLine().Split().Select(int.Parse).ToArray(); }\n    static string[] ReadStrings() { return Console.ReadLine().Split(); }\n\n    static int Sign(double x) {\n        if (x > 0) return 1;\n        if (x < 0) return -1;\n        return 0;\n    }\n\n    static string Calc(Vec2f a, Vec2f b, Vec2f c) {\n        var ab = b - a;\n        var ac = c - a;\n\n        var q = ab.Cross(ac);\n        if (q > 0) return \"COUNTER_CLOCKWISE\";\n        if (q < 0) return \"CLOCKWISE\";\n\n        // when q = 0\n\n        // |ab||ac|cos(pi) ??§???cos(pi) = -1 ????????§??????????????????\n        if (ab.Dot(ac) < 0) return \"ONLINE_BACK\";\n\n        if (ab.SqrMagnitude() >= ac.SqrMagnitude()) {\n            return \"ON_SEGMENT\";\n        }\n        return \"ONLINE_FRONT\";\n    }\n\n    static void Main() {\n        var xs = ReadInts();\n        var p0 = new Vec2f(xs[0], xs[1]);\n        var p1 = new Vec2f(xs[2], xs[3]);\n\n        int q = ReadInt();\n        for (int i = 0; i < q; i++) {\n            var xy = ReadInts();\n            var p2 = new Vec2f(xy[0], xy[1]);\n            var ans = Calc(p0, p1, p2);\n            Console.WriteLine(ans);\n        }\n    }\n}\n\nstruct Vec2f {\n    public double X { get; private set; }\n    public double Y { get; private set; }\n\n    public Vec2f(double x, double y) : this() {\n        X = x;\n        Y = y;\n    }\n\n    public override string ToString() {\n        return string.Format(\"({0}, {1})\", X, Y);\n    }\n\n    public static Vec2f operator+(Vec2f a, Vec2f b) {\n        return new Vec2f(a.X + b.X, a.Y + b.Y);\n    }\n\n    public static Vec2f operator-(Vec2f a, Vec2f b) {\n        return new Vec2f(a.X - b.X, a.Y - b.Y);\n    }\n\n    public static Vec2f operator*(Vec2f a, double t) {\n        return new Vec2f(a.X * t, a.Y * t);\n    }\n\n    public static Vec2f operator*(double t, Vec2f a) {\n        return new Vec2f(a.X * t, a.Y * t);\n    }\n\n    // a???b = |a||b|cos??\n    public double Dot(Vec2f other) {\n        return X * other.X + Y * other.Y;\n    }\n\n    public double Cross(Vec2f other) {\n        return X * other.Y - Y * other.X;\n    }\n\n    public Vec2f Normalized() {\n        var m = Magnitude();\n        if (m != 0 && m != 1) {\n            return new Vec2f(X / m, Y / m);\n        }\n        return this;\n    }\n\n    public double Magnitude() {\n        return Math.Sqrt(X * X + Y * Y);\n    }\n\n    public double SqrMagnitude() {\n        return X * X + Y * Y;\n    }\n\n    public static double Distance(Vec2f a, Vec2f b) {\n        return (a - b).Magnitude();\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Collections;\nusing System.Collections.Specialized;\nusing System.Linq;\nusing System.Text;\nusing System.IO;\nusing System.Reflection;\nusing static System.Math;\nusing System.Numerics;\nusing static Exg;\nstatic class Program{\n\tconst int mod=(int)1e9+7;\n\tconst double eps=1e-11;\n\tstatic void Main(){\n\t\tSc sc=new Sc();\n\t\tvar d=sc.Da;\n\t\tint n=sc.I;\n\t\tPair a=new Pair(d[0],d[1]);\n\t\tPair b=new Pair(d[2],d[3]);\n\t\tvar pa=new Pair[n];\n\t\tfor(int i = 0;i<n;i++) {\n\t\t\tvar c=new Pair(sc.Da);\n\t\t\tvar e=Gp15(a,b,c);\n\t\t\tvar t=\"\";\n\t\t\tif(e==1){t=\"COUNTER_CLOCKWISE\";}\n\t\t\telse if(e==-1){t=\"CLOCKWISE\";}\n\t\t\telse if(a==c||b==c){t=\"ON_SEGMENT\";}\n\t\t\telse if(a.x!=b.x){\n\t\t\t\tif((a.x>b.x&&b.x>c.x)||(a.x<b.x&&b.x<c.x)){t=\"ONLINE_FRONT\";}\n\t\t\t\telse if((a.x>c.x&&c.x>b.x)||(a.x<c.x&&c.x<b.x)){t=\"ON_SEGMENT\";}\n\t\t\t\telse{t=\"ONLINE_BACK\";}\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif((a.y>b.y&&b.y>c.y)||(a.y<b.y&&b.y<c.y)){t=\"ONLINE_FRONT\";}\n\t\t\t\telse if((a.y>c.y&&c.y>b.y)||(a.y<c.y&&c.y<b.y)){t=\"ON_SEGMENT\";}\n\t\t\t\telse{t=\"ONLINE_BACK\";}\n\t\t\t}\n\t\t\tConsole.WriteLine(t);\n\t\t}\n\t}\n}\n\npublic struct Pair{\n\tpublic double x,y;\n\tpublic Pair(double x,double y){this.x=x;this.y=y;}\n\tpublic Pair(double[] da){x=da[0];y=da[1];}\n\tpublic Pair(Pair p){x=p.x;y=p.y;}\n\tpublic override string ToString()=>x.ToString()+\" \"+y.ToString();\n\tpublic static Pair operator+(Pair a,Pair b){a.x+=b.x;a.y+=b.y;return a;}\n\tpublic static Pair operator*(Pair a,double n){a.x*=n;a.y*=n;return a;}\n\tpublic static Pair operator/(Pair a,double n){a.x/=n;a.y/=n;return a;}\n\tpublic static Pair operator-(Pair a,Pair b){a.x-=b.x;a.y-=b.y;return a;}\n\tpublic static bool operator==(Pair a,Pair b){return a.x==b.x&&a.y==b.y;}\n\tpublic static bool operator!=(Pair a,Pair b){return a.x!=b.x||a.y!=b.y;}\n}\nstatic class Exg{\n\tstatic public double Gp0(Pair a,Pair b){return Sqrt((a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y));}\n\tstatic public Tuple<bool,Pair> Gp1(Pair p1,Pair p2,Pair p3,Pair p4){\n\t\tdouble t1=(p4.y-p3.y)*(p4.x-p1.x)-(p4.x-p3.x)*(p4.y-p1.y);\n\t\tdouble t2=(p2.x-p1.x)*(p4.y-p1.y)-(p2.y-p1.y)*(p4.x-p1.x);\n\t\tdouble t3=(p2.x-p1.x)*(p4.y-p3.y)-(p2.y-p1.y)*(p4.x-p3.x);\n\t\tif(t3==0){\n\t\t\tif(Abs(Atan2(p2.y-p1.y,p2.x-p1.x))!=Abs(Atan2(p3.y-p1.y,p3.x-p1.x))){return Tuple.Create(p1.x==p3.x&&p1.y==p3.y?true:false,p1);}\n\t\t\tvar a=new Tuple<Pair,int>[]{Tuple.Create(p1,1),Tuple.Create(p2,2),Tuple.Create(p3,3),Tuple.Create(p4,4)};\n\t\t\tArray.Sort(a,(d,e)=>{var c=d.Item1.x.CompareTo(e.Item1.y);return c==0?e.Item1.y.CompareTo(d.Item1.y):c;});\n\t\t\treturn Tuple.Create((Abs(a[0].Item2-a[1].Item2)!=1||Abs(a[2].Item2-a[3].Item2)!=1)||(a[1].Item1.x==a[2].Item1.x&&a[1].Item1.y==a[2].Item1.y)?true:false,a[1].Item1);\n\t\t}\n\t\tdouble t4=t1/t3,t5=t2/t3;\n\t\tif(t4<0||t4>1||t5<0||t5>1){return Tuple.Create(false,new Pair(0,0));}\n\t\telse{return Tuple.Create(true,new Pair(p1.x+t4*(p2.x-p1.x),p1.y+t4*(p2.y-p1.y)));}\n\t}\n\tstatic public double Gp2(Pair p1,Pair p2,Pair p0){return Abs((p2.y-p1.y)*p0.x-(p2.x-p1.x)*p0.y+p2.x*p1.y-p1.x*p2.y)/Sqrt((p2.y-p1.y)*(p2.y-p1.y)+(p2.x-p1.x)*(p2.x-p1.x));}\n\tstatic public double Gp3(Pair p1,Pair p2,Pair p0){return (p1.x-p2.x)*(p0.y-p1.y)+(p1.y-p2.y)*(p1.x-p0.x);}\n\tstatic public double Gp4(Pair a,Pair b,Pair c){\n\t\tdouble a1=a.x-b.x,a2=a.y-b.y,c1=c.x-b.x,c2=c.y-b.y;\n\t\treturn Acos((a1*c1+a2*c2)/Sqrt((a1*a1+a2*a2)*(c1*c1+c2*c2)))*180/PI;\n\t}\n\tstatic public Tuple<bool,Pair> Gp5(Pair p1,Pair p2,Pair p0){\n\t\tdouble rx=p0.x,ry=p0.y;\n\t\tif(p1.x==p2.x){rx=p1.x;}\n\t\telse if(p1.y==p2.y){ry=p1.y;}\n\t\telse{\n\t\t\tdouble m1=(p2.y-p1.y)/(p2.x-p1.x),b1=p1.y-(m1*p1.x),m2=-1.0/m1,b2=p0.y-(m2*p0.x);\n\t\t\trx=(b2-b1)/(m1-m2);\n\t\t\try=(b2*m1-b1*m2)/(m1-m2);\n\t\t}\n\t\treturn Tuple.Create(((p1.x>=rx&&p2.x<=rx)||(p2.x>=rx&&p1.x<=rx))&&((p1.y>=ry&&p2.y<=ry)||(p2.y>=ry&&p1.y<=ry)),new Pair(rx,ry));\n\t}\n\tstatic public Pair Gp6(Pair a,Pair b,Pair c,int n){\n\t\tdouble l1=Sqrt((a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y));\n\t\tdouble l2=Sqrt((c.x-b.x)*(c.x-b.x)+(c.y-b.y)*(c.y-b.y));\n\t\tdouble ex=(a.x+(b.x+(c.x-b.x)*(l1/l2)))/2,ey=(a.y+(b.y+(c.y-b.y)*(l1/l2)))/2;\n\t\tex+=(ex-b.x)*n;ey+=(ey-b.y)*n;\n\t\treturn new Pair(ex,ey);\n\t}\n\tstatic public Pair Gp7(Pair a,double k,double p){return new Pair(a.x+k*Cos(p),a.y+k*Sin(p));}\n\tstatic public bool Gp8(Pair a,Pair b,Pair c){return (c.x-a.x)*(b.y-a.y)==(b.x-a.x)*(c.y-a.y);}\n\tstatic public Pair Gp9(Pair a,Pair b,Pair c){\n\t\tdouble d=a.x*a.x+a.y*a.y,e=b.x*b.x+b.y*b.y,f=c.x*c.x+c.y*c.y,g=2*(a.x*(b.y-c.y)+b.x*(c.y-a.y)+c.x*(a.y-b.y));\n\t\treturn new Pair((d*(b.y-c.y)+e*(c.y-a.y)+f*(a.y-b.y))/g,(d*(c.x-b.x)+e*(a.x-c.x)+f*(b.x-a.x))/g);\n\t}\n\tstatic public Pair[] Gp10(Pair p0,double r,Pair p1,Pair p2){\n\t\tdouble a=p2.y-p1.y,b=p1.x-p2.x;\n\t\tdouble d=p0.x*-a+p0.y*-b+a*p1.x+b*p1.y;\n\t\tdouble g=a*a+b*b;\n\t\tdouble k=g*r*r-d*d;\n\t\tif(k<0){return new Pair[]{};}\n\t\tif(k==0){return new Pair[]{new Pair((a*d)/g+p0.x,(b*d)/g+p0.y)};}\n\t\tk=Sqrt(k);\n\t\treturn new Pair[]{new Pair((a*d-b*k)/g+p0.x,(b*d+a*k)/g+p0.y),new Pair((a*d+b*k)/g+p0.x,(b*d-a*k)/g+p0.y)};\n\t}\n\tstatic public Pair[] Gp11(Pair p1,double r1,Pair p2,double r2){\n\t\tp2-=p1;\n\t\tdouble a=(p2.x*p2.x+p2.y*p2.y+r1*r1-r2*r2)/2;\n\t\tdouble g=p2.x*p2.x+p2.y*p2.y;\n\t\tdouble k=g*r1*r1-a*a;\n\t\tif(k<0){return new Pair[]{};}\n\t\tif(k==0){return new Pair[]{new Pair((p2.x*a)/g,(p2.y*a)/g)+p1};}\n\t\tk=Sqrt(k);\n\t\treturn new Pair[]{new Pair((p2.x*a+p2.y*k)/g,(p2.y*a-p2.x*k)/g)+p1,new Pair((p2.x*a-p2.y*k)/g,(p2.y*a+p2.x*k)/g)+p1};\n\t}\n\tstatic Tuple<double,double> Gp12(Pair[] pa){\n\t\tint n=pa.Length;\n\t\tdouble sumx=0,sumy=0,sumxy=0,sumx2=0;\n\t\tfor(int i = 0;i<n;i++) {\n\t\t\tsumxy+=pa[i].x*pa[i].y;\n\t\t\tsumx+=pa[i].x;\n\t\t\tsumy+=pa[i].y;\n\t\t\tsumx2+=pa[i].x*pa[i].x;\n\t\t}\n\t\treturn Tuple.Create((n*sumxy-sumx*sumy)/(n*sumx2-sumx*sumx),(sumx2*sumy-sumxy*sumx)/(n*sumx2-sumx*sumx));\n\t}\n\tstatic public Pair[] Gp13(Pair a,Pair p1,double r){\n\t\ta-=p1;\n\t\tdouble g=a.x*a.x+a.y*a.y,k=Sqrt(g-r*r);\n\t\treturn new Pair[]{new Pair(r*(a.x*r+a.y*k)/g,r*(a.y*r-a.x*k)/g)+p1,new Pair(r*(a.x*r-a.y*k)/g,r*(a.y*r+a.x*k)/g)+p1};\n\t}\n\tstatic public double Gp14(Pair a,Pair b,Pair c){\n\t\tb-=a;c-=a;\n\t\treturn Abs(b.x*c.y-b.y*c.x)/2;\n\t}\n\tstatic public double Gp15(Pair a,Pair b,Pair c){return Sign((b.x-a.x)*(c.y-a.y)-(c.x-a.x)*(b.y-a.y));}\n\tstatic public Tuple<long,long,long> Gp98(Pair a,Pair b){\n\t\tlong d=(long)(b.y-a.y),e=(long)(a.x-b.x),f=(long)(d*a.x+e*a.y),v=1;\n\t\td=-d;e=-e;\n\t\tif(d==0){v=f==0?e:Gcd(e,f);}\n\t\telse if(e==0){v=f==0?d:Gcd(d,f);}\n\t\telse{\n\t\t\tv=Gcd(d,e);\n\t\t\tif(f!=0){v=Gcd(v,f);}\n\t\t}\n\t\treturn Tuple.Create(d/v,e/v,f/v);\n\t}\n\tstatic long Gcd(long a,long b){\n\t\tlong c=Max(a,b)%(b=Min(a,b));\n\t\twhile(c!=0){a=b%c;b=c;c=a;}\n\t\treturn b;\n\t}\n\tstatic public Tuple<double,double,double> Gp99(Pair a,Pair b){\n\t\tdouble d=b.y-a.y,e=a.x-b.x;\n\t\t\n\t\treturn Tuple.Create(-d,-e,d*a.x+e*a.y);\n\t}\n\tstatic public Tuple<Pair,double>[] Psort(Pair[] pa,Pair p){\n\t\tvar arr=new Tuple<Pair,double>[pa.Length];\n\t\tfor(int i = 0;i<pa.Length;i++) {arr[i]=Tuple.Create(pa[i],Atan2(pa[i].y-p.y,pa[i].x-p.x)*180/PI+180);}\n\t\tArray.Sort(arr,(u,v)=>u.Item2.CompareTo(v.Item2));\n\t\treturn arr;\n\t}\n\tstatic public Tuple<Pair,double>[] Psort2(Pair[] pa,Pair p){\n\t\tint n=pa.Length;\n\t\tvar arr=new Tuple<Pair,double>[n];\n\t\tfor(int i = 0;i<n;i++) {arr[i]=Tuple.Create(pa[i],Atan2(pa[i].y-p.y,pa[i].x-p.x)*180/PI+180);}\n\t\tArray.Sort(arr,(u,v)=>u.Item2.CompareTo(v.Item2));\n\t\tArray.Resize(ref arr,n<<1);\n\t\tfor(int i = 0;i<n;i++) {arr[i+n]=Tuple.Create(arr[i].Item1,arr[i].Item2+360);}\n\t\treturn arr;\n\t}\n}\npublic class Sc{\n\tpublic int I{get{return int.Parse(Console.ReadLine());}}\n\tpublic long L{get{return long.Parse(Console.ReadLine());}}\n\tpublic double D{get{return double.Parse(Console.ReadLine());}}\n\tpublic string S{get{return Console.ReadLine();}}\n\tpublic int[] Ia{get{return Array.ConvertAll(Console.ReadLine().Split(),int.Parse);}}\n\tpublic long[] La{get{return Array.ConvertAll(Console.ReadLine().Split(),long.Parse);}}\n\tpublic double[] Da{get{return Array.ConvertAll(Console.ReadLine().Split(),double.Parse);}}\n\tpublic string[] Sa{get{return Console.ReadLine().Split();}}\n\tpublic object[] Oa{get{return Console.ReadLine().Split();}}\n\tpublic int[] Ia2{get{return Array.ConvertAll((\"0 \"+Console.ReadLine()+\" 0\").Split(),int.Parse);}}\n\tpublic int[] Ia3(int a){return Array.ConvertAll((a.ToString()+\" \"+Console.ReadLine()).Split(),int.Parse);}\n\tpublic int[] Ia3(bool a,int b,bool c,int d){return Array.ConvertAll(((a?b.ToString()+\" \":\"\")+Console.ReadLine()+(c?\" \"+d.ToString():\"\")).Split(),int.Parse);}\n\tpublic long[] La2{get{return Array.ConvertAll((\"0 \"+Console.ReadLine()+\" 0\").Split(),long.Parse);}}\n\tpublic long[] La3(int a){return Array.ConvertAll((a.ToString()+\" \"+Console.ReadLine()).Split(),long.Parse);}\n\tpublic long[] La3(bool a,int b,bool c,int d){return Array.ConvertAll(((a?b.ToString()+\" \":\"\")+Console.ReadLine()+(c?\" \"+d.ToString():\"\")).Split(),long.Parse);}\n\tpublic double[] Da2{get{return Array.ConvertAll((\"0 \"+Console.ReadLine()+\" 0\").Split(),double.Parse);}}\n\tpublic double[] Da3(int a){return Array.ConvertAll((a.ToString()+\" \"+Console.ReadLine()).Split(),double.Parse);}\n\tpublic double[] Da3(bool a,int b,bool c,int d){return Array.ConvertAll(((a?b.ToString()+\" \":\"\")+Console.ReadLine()+(c?\" \"+d.ToString():\"\")).Split(),double.Parse);}\n\tpublic T[] Arr<T>(int n,Func<T> f){var a=new T[n];for(int i=0;i<n;i++){a[i]=f();}return a;}\n\tpublic T[] Arr<T>(int n,Func<int,T> f){var a=new T[n];for(int i=0;i<n;i++){a[i]=f(i);}return a;}\n\tpublic T[] Arr<T>(int n,Func<string[],T> f){var a=new T[n];for(int i=0;i<n;i++){a[i]=f(Console.ReadLine().Split());}return a;}\n\tpublic T[] Arr<T>(int n,Func<int,string[],T> f){var a=new T[n];for(int i=0;i<n;i++){a[i]=f(i,Console.ReadLine().Split());}return a;}\n}\n"
  },
  {
    "language": "C#",
    "code": "using System;\n//using System.Collections.Generic;\n//using System.Linq;\n//using Vector = CGL.Point;\n//using Line = CGL.Segment;\n//using Polygon = System.Collections.Generic.List<CGL.Point>;\n\nnamespace CGL\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var t = scan;\n            var q = scan[0];\n            var p0 = new Point(t[0], t[1]);\n            var p1 = new Point(t[2], t[3]);\n\n            for (int i = 0; i < q; i++)\n            {\n                t = scan;\n                var p2 = new Point(t[0], t[1]);\n                var k = (p1 - p0).CCW(p2 - p0);\n                if (k == 1) Console.WriteLine(\"COUNTER_CLOCKWISE\");\n                else if (k == -1) Console.WriteLine(\"CLOCKWISE\");\n                else if (k == 2) Console.WriteLine(\"ONLINE_BACK\");\n                else if (k == -2) Console.WriteLine(\"ONLINE_FRONT\");\n                else Console.WriteLine(\"ON_SEGMENT\");\n            }\n\n            /*var q = scan[0];\n            for (int i = 0; i < q; i++)\n            {\n                var t = scan;\n                var P = new Point[4];\n                for (int j = 0; j < 4; j++)\n                {\n                    P[j] = new Point(t[j * 2], t[j * 2 + 1]);\n                }\n                var s1 = new Segment(P[0], P[1]);\n                var s2 = new Segment(P[2], P[3]);\n                Console.WriteLine(s1.GetDistance(s2));\n            }*/\n        }\n        static int[] scan { get { return Array.ConvertAll(Console.ReadLine().Split(), int.Parse); } }\n    }\n    \n    struct Point\n    {\n        static readonly double EPS = 1E-10;\n        public double x, y;\n        public Point(double x, double y)\n        {\n            this.x = x;\n            this.y = y;\n        }\n\n        public static Point operator +(Point a, Point b) { return new Point(a.x + b.x, a.y + b.y); }\n        public static Point operator -(Point a, Point b) { return new Point(a.x - b.x, a.y - b.y); }\n        public static Point operator *(double k, Point a) { return new Point(k * a.x, k * a.y); }\n        public static Point operator /(double k, Point a) { return new Point(a.x / k, a.y / k); }\n        \n        public double Abs { get { return Math.Sqrt(Norm); } }  \n        public double Norm { get { return x * x + y * y; } }\n\n        public static bool operator <(Point a, Point b) { return Math.Abs(a.x - b.x) > EPS ? a.x < b.x : a.y < b.y; }\n        public static bool operator >(Point a, Point b) { return Math.Abs(a.x - b.x) > EPS ? a.x > b.x : a.y > b.y; }\n        public static bool operator ==(Point a, Point b) { return Math.Abs(a.x - b.x) < EPS && Math.Abs(a.y - b.y) < EPS; }\n        public static bool operator !=(Point a, Point b) { return Math.Abs(a.x - b.x) >= EPS || Math.Abs(a.y - b.y) >= EPS; }\n\n        public override bool Equals(object p){  return Math.Abs(x - ((Point)p).x) < EPS && Math.Abs(y - ((Point)p).y) < EPS; }\n        public override int GetHashCode(){ return x.GetHashCode() ^ y.GetHashCode(); }\n\n        public double Dot(Point p) { return x * p.x + y * p.y; }\n        public double Cross(Point p) { return x * p.y - y * p.x; }\n        public double GetDistance(Point p) { return (this - p).Abs; }\n\n        public int CCW(Point b)\n        {\n            if (Cross(b) > EPS) return 1;\n            if (Cross(b) < -EPS) return -1;\n            if (Dot(b) < -EPS) return 2;\n            if (Norm < b.Norm) return -2;\n            return 0;\n        }\n    }\n    struct Segment\n    {\n        public Point p1, p2;\n        public Segment(Point p1, Point p2)\n        {\n            this.p1 = p1;\n            this.p2 = p2;\n        }\n        public Point Projection(Point p)\n        {\n            Point b = p2 - p1;\n            double r = b.Dot(p - p1) / b.Norm;\n            return p1 + r * b;\n        }\n        public Point Reflection(Point p)\n        {\n            return p + 2 * (Projection(p) - p);\n        }\n        public double GetD_LP(Point p)\n        {\n            return Math.Abs((p - p1).Cross(p2 - p1) / (p2 - p1).Abs);\n        }\n        public double GetD_SP(Point p)\n        {\n            if ((p - p1).Dot(p2 - p1) < 0) return (p - p1).Abs;\n            if ((p - p2).Dot(p1 - p2) < 0) return (p - p2).Abs;\n            return GetD_LP(p);\n        }\n        public double GetDistance(Segment s)\n        {\n            //if (this.Intersect(s)) return 0;\n            return Math.Min(Math.Min(GetD_SP(s.p1), GetD_SP(s.p2)), Math.Min(s.GetD_SP(p1), s.GetD_SP(p2)));\n        }\n    }\n    /*struct Circle\n    {\n        public Point c; double r;\n        public Circle(Point c, double r)\n        {\n            this.c = c;\n            this.r = r;\n        }\n\n    }*/\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Program {\n    static int ReadInt() { return int.Parse(Console.ReadLine()); }\n    static int[] ReadInts() { return Console.ReadLine().Split().Select(int.Parse).ToArray(); }\n    static string[] ReadStrings() { return Console.ReadLine().Split(); }\n\n    static int Sign(double x) {\n        if (x > 0) return 1;\n        if (x < 0) return -1;\n        return 0;\n    }\n\n    static string Calc(Vec2f a, Vec2f b, Vec2f c) {\n        var ab = b - a;\n        var ac = c - a;\n\n        var q = ab.Cross(ac);\n        if (q > 0) return \"COUNTER_CLOCKWISE\";\n        if (q < 0) return \"CLOCKWISE\";\n\n        // when q = 0\n        // c ??? a ????????? b ??¨?????????\n        if ((a.X == c.X && a.Y == c.Y) || (b.X == c.X && b.Y == c.Y))\n            return \"ON_SEGMENT\";\n\n        // ????????????????????????\n        if (Sign(ab.X) == Sign(ac.X) && Sign(ab.Y) == Sign(ac.Y)) {\n            if (ab.SqrMagnitude() >= ac.SqrMagnitude())\n                return \"ON_SEGMENT\";\n            return \"ONLINE_FRONT\";\n        }\n        else {\n            return \"ONLINE_BACK\";\n        }\n    }\n\n    static void Main() {\n        var xs = ReadInts();\n        var p0 = new Vec2f(xs[0], xs[1]);\n        var p1 = new Vec2f(xs[2], xs[3]);\n\n        int q = ReadInt();\n        for (int i = 0; i < q; i++) {\n            var xy = ReadInts();\n            var p2 = new Vec2f(xy[0], xy[1]);\n            var ans = Calc(p0, p1, p2);\n            Console.WriteLine(ans);\n        }\n    }\n}\n\nstruct Vec2f {\n    public double X { get; private set; }\n    public double Y { get; private set; }\n\n    public Vec2f(double x, double y) : this() {\n        X = x;\n        Y = y;\n    }\n\n    public override string ToString() {\n        return string.Format(\"({0}, {1})\", X, Y);\n    }\n\n    public static Vec2f operator+(Vec2f a, Vec2f b) {\n        return new Vec2f(a.X + b.X, a.Y + b.Y);\n    }\n\n    public static Vec2f operator-(Vec2f a, Vec2f b) {\n        return new Vec2f(a.X - b.X, a.Y - b.Y);\n    }\n\n    public static Vec2f operator*(Vec2f a, double t) {\n        return new Vec2f(a.X * t, a.Y * t);\n    }\n\n    public static Vec2f operator*(double t, Vec2f a) {\n        return new Vec2f(a.X * t, a.Y * t);\n    }\n\n    // a???b = |a||b|cos??\n    public double Dot(Vec2f other) {\n        return X * other.X + Y * other.Y;\n    }\n\n    public double Cross(Vec2f other) {\n        return X * other.Y - Y * other.X;\n    }\n\n    public Vec2f Normalized() {\n        var m = Magnitude();\n        if (m != 0 && m != 1) {\n            return new Vec2f(X / m, Y / m);\n        }\n        return this;\n    }\n\n    public double Magnitude() {\n        return Math.Sqrt(X * X + Y * Y);\n    }\n\n    public double SqrMagnitude() {\n        return X * X + Y * Y;\n    }\n\n    public static double Distance(Vec2f a, Vec2f b) {\n        return (a - b).Magnitude();\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\n\nclass Program\n{\n  static readonly int COUNTER_CLOCKWISE = 1;\n  static readonly int CLOCKWISE = -1;\n  static readonly int ONLINE_BACK = 2;\n  static readonly int ONLINE_FRONT = -2;\n  static readonly int ON_SEGMENT = 0;\n\n  public class Vector\n  {\n    public double x, y;\n    public Vector(double x, double y)\n    {\n      this.x = x;\n      this.y = y;\n    }\n\n    public static Vector operator-(Vector v1, Vector v2)\n    {\n\n      return new Vector(v1.x-v2.x, v1.y-v2.y);\n    }\n  }\n  public static double dot(Vector v1, Vector v2)\n  {\n\n    return v1.x*v2.x + v1.y*v2.y;\n  }\n\n  public static double cross(Vector v1, Vector v2)\n  {\n\n    return v1.x*v2.y - v1.y*v2.x;\n  }\n\n  public static double norm(Vector v)\n  {\n\n    return v.x*v.x + v.y*v.y;\n  }\n\n  public static int ccw(Vector p1, Vector p2, Vector p3)\n  {\n    Vector a = p2 - p1;\n    Vector b = p3 - p1;\n    if(cross(a, b) > Double.Epsilon) { return COUNTER_CLOCKWISE; }\n    if(cross(a, b) < -Double.Epsilon) { return CLOCKWISE; }\n    if(dot(a, b)< -Double.Epsilon) { return ONLINE_BACK; }\n    if(norm(a) < norm(b)) { return ONLINE_FRONT; }\n    return ON_SEGMENT;\n  }\n\n  public static void Main()\n  {\n    string[] s = Console.ReadLine().Split(' ');\n    Vector v1 = new Vector(int.Parse(s[0]), int.Parse(s[1]));\n    Vector v2 = new Vector(int.Parse(s[2]), int.Parse(s[3]));\n\n    int n = int.Parse(Console.ReadLine());\n    for(int i=0; i<n; i++)\n      {\n\tstring[] s1 = Console.ReadLine().Split(' ');\n        Vector v = new Vector(int.Parse(s1[0]), int.Parse(s1[1]));\n\n\tint ans = ccw(v1, v2, v);\n\tif(ans == COUNTER_CLOCKWISE) {\n\t  Console.WriteLine(\"COUNTER_CLOCKWISE\");\n\t}\n\tif(ans == CLOCKWISE) {\n\t  Console.WriteLine(\"CLOCKWISE\");\n\t}\n\tif(ans == ONLINE_BACK){\n\t  Console.WriteLine(\"ONLINE_BACK\");\n\t}\n\tif(ans == ONLINE_FRONT){\n\t  Console.WriteLine(\"ONLINE_FRONT\");\n\t}\n\tif(ans == ON_SEGMENT){\n\t  Console.WriteLine(\"ON_SEGMENT\");\n\t}\n      }\n  }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Linq;//リストの使用\nusing System.Collections.Generic;\nclass Program\n{\n\n\tstatic void Main()\n\t{\n\t\tstring[] input = Console.ReadLine().Split(' ');//Splitで区切り文字を指定して複数個受け取る。\n\t\tVector2 beginPoint = new Vector2(decimal.Parse(input[0]), decimal.Parse(input[1]));\n    Vector2 endPoint = new Vector2(decimal.Parse(input[2]), decimal.Parse(input[3]));\n\t\tlong q = long.Parse(Console.ReadLine());\n\n    for(long i = 0; i < q; i++)\n    {\n      string[] inputSub = Console.ReadLine().Split(' ');\n      Vector2 QuestionPoint = \n        new Vector2(decimal.Parse(inputSub[0]), decimal.Parse(inputSub[1]));\n      Vector2.WhereVector(beginPoint, endPoint, QuestionPoint);\n    }\n\t}\n}\n\nclass Vector2//2次元ベクトル\n{\nstatic decimal verySmallDecimal = 1e-10m;//小数比較\n\n  public Vector2 (decimal X, decimal Y)\n  {\n    this.x = X;\n    this.y = Y;\n  }\n\n  public decimal x {private set; get;}\n  public decimal y {private set; get;}\n\n  public static Vector2 operator + (Vector2 ob1, Vector2 ob2)//ベクトルの基本演算\n  {\n    return new Vector2 (ob1.x + ob2.x, ob1.y + ob2.y);\n  }\n  public static Vector2 operator - (Vector2 ob1, Vector2 ob2)\n  {\n    return new Vector2 (ob1.x - ob2.x, ob1.y - ob2.y);\n  }\n  public static Vector2 operator * (Vector2 ob, decimal scalar)\n  {\n    return new Vector2 (ob.x * scalar, ob.y * scalar);\n  }\n  public static Vector2 operator * (decimal scalar, Vector2 ob)\n  {\n    return new Vector2 (ob.x * scalar, ob.y * scalar);\n  }\n\n  public decimal Length()//ベクトルの長さ\n  {\n    return x * x + y * y;\n  }\n  public static decimal DotProduct(Vector2 ob1, Vector2 ob2)//内積\n  {\n    return ob1.x * ob2.x + ob1.y * ob2.y;\n  }\n  public static decimal CrossProduct(Vector2 ob1, Vector2 ob2)//内積\n  {\n    return ob1.x * ob2.y - ob1.y * ob2.x;\n  }\n\n  public static Vector2 Projection(Vector2 beginPoint, Vector2 endPoint, Vector2 point)//点の射影\n  {\n    Vector2 segment = endPoint - beginPoint;\n    decimal ratio = Vector2.DotProduct(point - beginPoint, segment) / segment.Length();\n    return beginPoint + segment * ratio;//始点にたす\n  }\n\n  public static void WhereVector(Vector2 beginPoint, Vector2 endPoint, Vector2 point)\n  {\n    Vector2 segment = endPoint - beginPoint;\n    Vector2 aimVec = point - beginPoint;\n    if(Vector2.CrossProduct(segment, aimVec) > verySmallDecimal)\n      Console.WriteLine(\"COUNTER_CLOCKWISE\");\n    else if(Vector2.CrossProduct(segment, aimVec) < -verySmallDecimal)\n      Console.WriteLine(\"CLOCKWISE\");\n    else if(Vector2.DotProduct(segment, aimVec) < -1+verySmallDecimal)\n      Console.WriteLine(\"ONLINE_BACK\");\n    else if(segment.Length() < aimVec.Length())\n      Console.WriteLine(\"ONLINE_FRONT\");\n    else\n      Console.WriteLine(\"ON_SEGMENT\");\n  }\n  \n}\n\n"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace ConsoleApplication1\n{\n    enum CCW { COUNTER_CLOCKWISE = 1, CLOCKWISE = -1, ONLINE_BACK = 2, ONLINE_FRONT = -2, ON_SEGMENT = 0 }\n\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            double[] input = Array.ConvertAll(Console.ReadLine().Split(' '), double.Parse);\n            Pt a = new Pt(input[0], input[1]);\n            Pt b = new Pt(input[2], input[3]);\n\n            int q = int.Parse(Console.ReadLine());\n            \n            StringBuilder sb = new StringBuilder();\n            for (int i = 0; i < q; i++)\n            {\n                input = Array.ConvertAll(Console.ReadLine().Split(' '), double.Parse);\n                Pt p = new Pt(input[0], input[1]);\n\n                sb.AppendLine(CheckCCW(a, b, p).ToString());\n            }\n            Console.Write(sb);\n        }\n\n        static CCW CheckCCW(Pt p0, Pt p1, Pt p2)\n        {\n            Pt a = p1 - p0;\n            Pt b = p2 - p0;\n\n            if (a.Cross(b) > 0) return CCW.COUNTER_CLOCKWISE;\n            if (a.Cross(b) < 0) return CCW.CLOCKWISE;\n            if (a.Dot(b) < 0) return CCW.ONLINE_BACK;\n            if (a.Norm < b.Norm) return CCW.ONLINE_FRONT;\n            return CCW.ON_SEGMENT;\n        }\n    }\n\n    struct Pt : IComparable<Pt>\n    {\n        static readonly double EPS = 1E-10;\n\n        internal double x, y;\n\n        public Pt(double x, double y)\n        {\n            this.x = x;\n            this.y = y;\n        }\n\n        public double Abs { get { return Math.Sqrt(Norm); } }\n        public double Norm { get { return x * x + y * y; } }\n\n        public double Dot(Pt p) { return x * p.x + y * p.y; }\n        public double Cross(Pt p) { return x * p.y - y * p.x; }\n\n        public static Pt operator +(Pt a, Pt b) { return new Pt(a.x + b.x, a.y + b.y); }\n        public static Pt operator -(Pt a, Pt b) { return new Pt(a.x - b.x, a.y - b.y); }\n        public static Pt operator *(Pt p, double d) { return new Pt(p.x * d, p.y * d); }\n        public static Pt operator /(Pt p, double d) { return new Pt(p.x / d, p.y / d); }\n        public static bool operator <(Pt a, Pt b) { return Math.Abs(a.x - b.x) > EPS ? a.x < b.x : a.y < b.y; }\n        public static bool operator >(Pt a, Pt b) { return Math.Abs(a.x - b.x) > EPS ? a.x > b.x : a.y > b.y; }\n        public static bool operator ==(Pt a, Pt b) { return Math.Abs(a.x - b.x) < EPS && Math.Abs(a.y - b.y) < EPS; }\n        public static bool operator !=(Pt a, Pt b) { return Math.Abs(a.x - b.x) >= EPS || Math.Abs(a.y - b.y) >= EPS; }\n\n        public int CompareTo(Pt other)\n        {\n            return x != other.x ? (int)(x - other.x) : (int)(y - other.y);\n        }\n\n        public override bool Equals(object obj)\n        {\n            Pt other = (Pt)obj;\n            return Math.Abs(x - other.x) < EPS && Math.Abs(y - other.y) < EPS;\n        }\n\n        public override int GetHashCode()\n        {\n            return x.GetHashCode() ^ y.GetHashCode();\n        }\n\n        public override string ToString()\n        {\n            return string.Format(\"{0:f10} {1:f10}\", x, y);\n        }\n    }\n\n    struct Seg\n    {\n        internal Pt p1, p2;\n\n        public Seg(Pt a, Pt b)\n        {\n            p1 = a;\n            p2 = b;\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\nusing System.Collections.Generic;\nusing System.Diagnostics;\n//using System.Numerics;\nusing Enu = System.Linq.Enumerable;\n\npublic class Program\n{\n    public void Solve()\n    {\n        var A = new Point(Reader.Int(), Reader.Int());\n        var B = new Point(Reader.Int(), Reader.Int());\n        int NQ = Reader.Int();\n        var seg = new Segment(A, B);\n\n        for (int q = 0; q < NQ; q++)\n        {\n            var P = new Point(Reader.Int(), Reader.Int());\n            Console.WriteLine(CCW(seg, P));\n        }\n        Console.ReadLine();\n    }\n\n\n    public enum CCWType\n    {\n        COUNTER_CLOCKWISE, CLOCKWISE, ON_SEGMENT, ONLINE_FRONT, ONLINE_BACK\n    }\n\n    // seg.A -> seg.B -> p\n    public CCWType CCW(Segment seg, Point p)\n    {\n        var b = seg.B - seg.A;\n        var c = p - seg.A;\n        var det = b.Det(c);\n        if (det > 0) return CCWType.COUNTER_CLOCKWISE;\n        if (det < 0) return CCWType.CLOCKWISE;\n        if (b.Dot(c) < 0) return CCWType.ONLINE_BACK;\n        if (b.Dot(b) < c.Dot(c)) return CCWType.ONLINE_FRONT;\n        return CCWType.ON_SEGMENT;\n    }\n\n    public class Segment\n    {\n        public Point A, B;\n        public Segment(Point a, Point b) { A = a; B = b; }\n    }\n\n    public struct Point : IEquatable<Point>, IComparable<Point>\n    {\n        public static readonly double Eps = 1e-10;\n        public double X, Y;\n\n        public Point(double x, double y) { X = x; Y = y; }\n\n        public static Point operator +(Point a, Point b)\n        {\n            return new Point(Add(a.X, b.X), Add(a.Y, b.Y));\n        }\n        public static Point operator -(Point a, Point b)\n        {\n            return new Point(Add(a.X, -b.X), Add(a.Y, -b.Y));\n        }\n        public static Point operator *(Point p, double d)\n        {\n            return new Point(p.X * d, p.Y * d);\n        }\n        public double Dot(Point b) { return Add(X * b.X, Y * b.Y); }\n        public double Det(Point b) { return Add(X * b.Y, -Y * b.X); }\n        public bool Equals(Point b) { return X == b.X && Y == b.Y; }\n        public int CompareTo(Point b) { return X != b.X ? Math.Sign(X - b.X) : Math.Sign(Y - b.Y); }\n        public override int GetHashCode() { return (int)(X * 100000 + Y); }\n        public override string ToString() { return X + \", \" + Y; }\n\n        private static double Add(double a, double b)\n        {\n            if (Math.Abs(a + b) < Eps * (Math.Abs(a) + Math.Abs(b))) return 0;\n            return a + b;\n        }\n    }\n}\n\n\nclass Entry { static void Main() { new Program().Solve(); } }\nclass Reader\n{\n    private static TextReader reader = Console.In;\n    private static readonly char[] separator = { ' ' };\n    private static readonly StringSplitOptions op = StringSplitOptions.RemoveEmptyEntries;\n    private static string[] A = new string[0];\n    private static int i;\n    private static void Init() { A = new string[0]; }\n    public static void Set(TextReader r) { reader = r; Init(); }\n    public static void Set(string file) { reader = new StreamReader(file); Init(); }\n    public static bool HasNext() { return CheckNext(); }\n    public static string String() { return Next(); }\n    public static int Int() { return int.Parse(Next()); }\n    public static long Long() { return long.Parse(Next()); }\n    public static double Double() { return double.Parse(Next()); }\n    public static int[] IntLine() { return Array.ConvertAll(Split(Line()), int.Parse); }\n    public static int[] IntArray(int N) { return Enu.Range(0, N).Select(i => Int()).ToArray(); }\n    public static int[][] IntTable(int H) { return Enu.Range(0, H).Select(i => IntLine()).ToArray(); }\n    public static string[] StringArray(int N) { return Enu.Range(0, N).Select(i => Next()).ToArray(); }\n    public static string Line() { return reader.ReadLine().Trim(); }\n    private static string[] Split(string s) { return s.Split(separator, op); }\n    private static string Next() { CheckNext(); return A[i++]; }\n    private static bool CheckNext()\n    {\n        if (i < A.Length) return true;\n        string line = reader.ReadLine();\n        if (line == null) return false;\n        if (line == \"\") return CheckNext();\n        A = Split(line);\n        i = 0;\n        return true;\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\n//using System.Collections.Generic;\n//using System.Linq;\n//using Vector = CGL.Point;\n//using Line = CGL.Segment;\n//using Polygon = System.Collections.Generic.List<CGL.Point>;\n\nnamespace CGL\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var t = scan;\n            var q = scan[0];\n            var p0 = new Point(t[0], t[1]);\n            var p1 = new Point(t[2], t[3]);\n\n            for (int i = 0; i < q; i++)\n            {\n                t = scan;\n                var p2 = new Point(t[0], t[1]);\n                var k = (p1 - p0).CCW(p2 - p0);\n                if (k == 1) Console.WriteLine(\"COUNTER_CLOCKWISE\");\n                if (k == -1) Console.WriteLine(\"CLOCKWISE\");\n                if (k == 2) Console.WriteLine(\"ONLINE_BACK\");\n                if (k == -2) Console.WriteLine(\"ONLINE_FRONT\");\n                else Console.WriteLine(\"ON_SEGMENT\");\n            }\n\n            /*var q = scan[0];\n            for (int i = 0; i < q; i++)\n            {\n                var t = scan;\n                var P = new Point[4];\n                for (int j = 0; j < 4; j++)\n                {\n                    P[j] = new Point(t[j * 2], t[j * 2 + 1]);\n                }\n                var s1 = new Segment(P[0], P[1]);\n                var s2 = new Segment(P[2], P[3]);\n                Console.WriteLine(s1.GetDistance(s2));\n            }*/\n        }\n        static int[] scan { get { return Array.ConvertAll(Console.ReadLine().Split(), int.Parse); } }\n    }\n    \n    struct Point\n    {\n        static readonly double EPS = 1E-10;\n        public double x, y;\n        public Point(double x, double y)\n        {\n            this.x = x;\n            this.y = y;\n        }\n\n        public static Point operator +(Point a, Point b) { return new Point(a.x + b.x, a.y + b.y); }\n        public static Point operator -(Point a, Point b) { return new Point(a.x - b.x, a.y - b.y); }\n        public static Point operator *(double k, Point a) { return new Point(k * a.x, k * a.y); }\n        public static Point operator /(double k, Point a) { return new Point(a.x / k, a.y / k); }\n        \n        public double Abs { get { return Math.Sqrt(Norm); } }  \n        public double Norm { get { return x * x + y * y; } }\n\n        public static bool operator <(Point a, Point b) { return Math.Abs(a.x - b.x) > EPS ? a.x < b.x : a.y < b.y; }\n        public static bool operator >(Point a, Point b) { return Math.Abs(a.x - b.x) > EPS ? a.x > b.x : a.y > b.y; }\n        public static bool operator ==(Point a, Point b) { return Math.Abs(a.x - b.x) < EPS && Math.Abs(a.y - b.y) < EPS; }\n        public static bool operator !=(Point a, Point b) { return Math.Abs(a.x - b.x) >= EPS || Math.Abs(a.y - b.y) >= EPS; }\n\n        public override bool Equals(object p){  return Math.Abs(x - ((Point)p).x) < EPS && Math.Abs(y - ((Point)p).y) < EPS; }\n        public override int GetHashCode(){ return x.GetHashCode() ^ y.GetHashCode(); }\n\n        public double Dot(Point p) { return x * p.x + y * p.y; }\n        public double Cross(Point p) { return x * p.y - y * p.x; }\n        public double GetDistance(Point p) { return (this - p).Abs; }\n\n        public int CCW(Point b)\n        {\n            if (Cross(b) > EPS) return 1;\n            if (Cross(b) < -EPS) return -1;\n            if (Dot(b) < -EPS) return 2;\n            if (Norm < b.Norm) return -2;\n            return 0;\n        }\n    }\n    struct Segment\n    {\n        public Point p1, p2;\n        public Segment(Point p1, Point p2)\n        {\n            this.p1 = p1;\n            this.p2 = p2;\n        }\n        public Point Projection(Point p)\n        {\n            Point b = p2 - p1;\n            double r = b.Dot(p - p1) / b.Norm;\n            return p1 + r * b;\n        }\n        public Point Reflection(Point p)\n        {\n            return p + 2 * (Projection(p) - p);\n        }\n        public double GetD_LP(Point p)\n        {\n            return Math.Abs((p - p1).Cross(p2 - p1) / (p2 - p1).Abs);\n        }\n        public double GetD_SP(Point p)\n        {\n            if ((p - p1).Dot(p2 - p1) < 0) return (p - p1).Abs;\n            if ((p - p2).Dot(p1 - p2) < 0) return (p - p2).Abs;\n            return GetD_LP(p);\n        }\n        public double GetDistance(Segment s)\n        {\n            //if (this.Intersect(s)) return 0;\n            return Math.Min(Math.Min(GetD_SP(s.p1), GetD_SP(s.p2)), Math.Min(s.GetD_SP(p1), s.GetD_SP(p2)));\n        }\n    }\n    /*struct Circle\n    {\n        public Point c; double r;\n        public Circle(Point c, double r)\n        {\n            this.c = c;\n            this.r = r;\n        }\n\n    }*/\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Diagnostics;\nusing Aoj.CGL.Lib;\n\nnamespace Aoj.CGL.Chapter1C\n{\n    using Point = Vector;\n\n    class Program\n    {\n        public static string ConvertCcwIntToStr(int ccw)\n        {\n            var map = new Dictionary<int, string> (){\n                {MathUtil.CounterClockwise, \"COUNTER_CLOCKWISE\"},\n                {MathUtil.Clockwise,        \"CLOCKWISE\"},\n                {MathUtil.OnLineBack,       \"ONLINE_BACK\" },\n                {MathUtil.OnSegment,        \"ON_SEGMENT\"},\n                {MathUtil.OnLineFront,      \"ONLINE_FRONT\"},\n            };\n\n            return map[ccw];\n        }\n\n        public static void Solve()\n        {\n            var input = Array.ConvertAll(Console.ReadLine().Split(' '), double.Parse);\n            var p0 = new Point(input[0], input[1]);\n            var p1 = new Point(input[2], input[3]);\n\n            int q = int.Parse(Console.ReadLine());\n \n            for (int i = 0; i < q; i++)\n            {\n                var x_y = Array.ConvertAll(Console.ReadLine().Split(' '), double.Parse);\n\n                var p2 = new Point(x_y[0], x_y[1]);\n                int ccw = MathUtil.Ccw(p0, p1, p2);\n\n                Console.WriteLine(\"{0}\", ConvertCcwIntToStr(ccw));\n            }\n        }\n\n        public static void Main()\n        {\n            // Console.SetIn(new System.IO.StreamReader(\"ComputationalGeometry/Input/01_Projection_C_04.txt\"));\n            // var sw = new Stopwatch();\n            // sw.Start();\n\n            Solve();\n\n            // Console.WriteLine(\"{0}ms\", sw.ElapsedMilliseconds);\n        }\n    }\n}\n\nnamespace Aoj.CGL.Lib\n{\n    using Line = Segment;\n\n    using Point = Vector;\n\n    using Polygon = List<Vector>;\n\n    public struct Segment\n    {\n        private Point _p1;\n        private Point _p2;\n\n        public Point P1 { get{ return _p1; } }\n        public Point P2 { get{ return _p2; } }\n\n        public Segment(Point p1, Point p2)\n        {\n            _p1 = p1;\n            _p2 = p2;\n        }\n\n        public Segment(double x1, double y1, double x2, double y2)\n        {\n            _p1 = new Point(x1, y1);\n            _p2 = new Point(x2, y2);\n        }\n\n        public override string ToString()\n        {\n            return string.Format(\"P1x:{0},P1y:{1}, P2x:{2},P2y:{3}\", P1.X, P1.Y, P2.X, P2.Y);\n        }\n    }\n\n    public struct Circle\n    {\n        private Point _p;\n        private double _r;\n\n        public Point P { get { return _p; } }\n        public double R { get { return _r; } }\n\n        public Circle(Point p, double r)\n        {\n            _p = p;\n            _r = r;\n        }\n\n        public override string ToString()\n        {\n            return string.Format(\"px:{0},py:{1},r:{2}\", P.X, P.Y, R);\n        }\n    }\n\n    public struct Vector\n    {\n        private double _x;\n        private double _y;\n\n        public double X { get { return _x;} }\n        public double Y { get { return _y;} }\n\n        public Vector(double x, double y)\n        {\n            _x = x;\n            _y = y;\n        }\n\n        public double Norm()\n        {\n            return X * X + Y * Y;\n        }\n\n        public double Abs()\n        {\n            return Math.Sqrt(Norm());\n        }\n\n        public Vector Normalize()\n        {\n            double mag = Abs();\n            return new Vector(X * mag, Y * mag);\n        }\n\n        public static Vector operator +(Vector v1, Vector v2)\n        {\n            return new Vector(v1.X + v2.X, v1.Y + v2.Y);\n        }\n\n        public static Vector operator -(Vector v1, Vector v2)\n        {\n            return new Vector(v1.X - v2.X, v1.Y - v2.Y);\n        }\n\n        public static Vector operator *(Vector v, double k)\n        {\n            return new Vector(v.X * k, v.Y * k);\n        }\n\n        public static Vector operator *(double k, Vector v)\n        {\n            return v * k;\n        }\n\n        public override string ToString()\n        {\n            return string.Format(\"x:{0},y:{1}\", X, Y);\n        }\n    }\n\n    public static class MathUtil\n    {\n        public static double Dot(Vector v1, Vector v2)\n        {\n            return v1.X * v2.X + v1.Y * v2.Y;\n        }\n\n        public static double Cross(Vector v1, Vector v2)\n        {\n            return v1.X * v2.Y - v1.Y * v2.X;\n        }\n\n        public static bool IsOrthogonal(Vector v1, Vector v2)\n        {\n            return Dot(v1, v2) == 0.0;\n        }\n\n        public static bool IsOrthogonal(Point a1, Point a2, Point b1, Point b2)\n        {\n            return IsOrthogonal(a1 - a2, b1 - b2);\n        }\n\n        public static bool IsOrthogonal(Segment s1, Segment s2)\n        {\n            return IsOrthogonal((Vector)(s1.P1 - s1.P2), (Vector)(s2.P1 - s2.P2));\n        }\n\n        public static bool IsParallel(Vector v1, Vector v2)\n        {\n            return Cross(v1, v2) == 0.0;\n        }\n\n        public static bool IsParallel(Point a1, Point a2, Point b1, Point b2)\n        {\n            return IsParallel(a1 - a2, b1 - b2);\n        }\n        public static bool IsParallel(Segment s1, Segment s2)\n        {\n            return IsParallel((Vector)(s1.P1 - s1.P2), (Vector)(s2.P1 - s2.P2));\n        }\n\n        public static Vector Project(Vector v, Vector onNormal)\n        {\n            // mag = |b|cos?? / |a|\n            //     = |a||b|cos?? / |a|^2\n            double mag = Dot(v, onNormal) / onNormal.Norm();\n            return new Vector(onNormal.X * mag, onNormal.Y * mag);\n        }\n\n        public static Point Project(Point p, Segment s)\n        {\n            Vector v  = p - s.P1;\n            Vector baseV = s.P2 - s.P1;\n            Vector project = Project(v, baseV);\n            return s.P1 + project;\n        }\n\n        public static Point Reflect(Point p, Segment s)\n        {\n            Point project = Project(p, s);\n            return p + (project - p) * 2.0;\n        }\n\n        // public static Ccw CountrClockWise(Vector baseV, Vector v)\n        // {\n        //     double cross = Cross(baseV, v);\n        //     if (cross > 0.0)\n        //         return Ccw.CounterClockwise;\n        //     else if (cross < 0.0)\n        //         return Ccw.Clockwise;\n        //     else if (Dot(baseV, v) < 0.0)\n        //         return Ccw.OnLineBack;\n        //     else if (baseV.Norm() < v.Norm())\n        //         return Ccw.OnLineFront;\n        //     else\n        //        return Ccw.OnSegment;\n        // }\n\n        // ??????????????????????¨??????? ~ ????¨????????????¢???????????°???\n        public const int OnLineBack = 2;\n        public const int CounterClockwise = 1;\n        public const int OnSegment = 0;\n        public const int Clockwise = -1;\n        public const int OnLineFront = -2;\n\n        /// <summary>\n        /// ??????p0p2??????????????????p0p1??????????¨??????? ~ ????¨?????????????????????????????????????int??§?????????\n        /// </summary>\n        /// <param name=\"p0\"></param>\n        /// <param name=\"p1\"></param>\n        /// <param name=\"p2\"></param>\n        /// <returns></returns>\n        public static int Ccw(Point p0, Point p1, Point p2)\n        {\n            var baseV = p1 - p0;\n            var v = p2 - p0;\n            if (Cross(baseV, v) > 0)\n                return CounterClockwise;\n            else if (Cross(baseV, v) < 0)\n                return Clockwise;\n            else if (Dot(baseV, v) < 0)\n                return OnLineBack;\n            else if (baseV.Norm() < v.Norm())\n                return OnLineFront;\n            return OnSegment;\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\nusing System.Text.RegularExpressions;\nusing static System.Math;\n\nnamespace CSharpSpiral {\n    class Program {\n        static void Main(string[] args) {\n            var sw = new StreamWriter(Console.OpenStandardOutput()) { AutoFlush = false };\n            Console.SetOut(sw);\n            new Program().Solve(new ConsoleInput(Console.In, ' '));\n            Console.Out.Flush();\n        }\n\t\tpublic void Solve(ConsoleInput cin) {\n\t\t\tvar line = cin.ReadLongArray(4);\n\t\t\tlong x1 = line[0], y1 = line[1], x2 = line[2], y2 = line[3];\n\t\t\tlong dx = x2 - x1, dy = y2 - y1;\n\t\t\tvar lenSq = dx * dx + dy * dy;\n\t\t\tvar q = cin.ReadInt;\n\t\t\tfor(int i = 0; i < q; i++) {\n\t\t\t\tvar p = cin.ReadLongArray(2);\n\t\t\t\tvar px = p[0] - x1;\n\t\t\t\tvar py = p[1] - y1;\n\t\t\t\tvar outer = px * dy - py * dx;\n\t\t\t\tstring state;\n\t\t\t\tswitch(outer.CompareTo(0)) {\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tstate = \"CLOCKWISE\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase -1:\n\t\t\t\t\t\tstate = \"COUNTER_CLOCKWISE\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tvar inner = px * dx + py * dy;\n\t\t\t\t\t\tif(inner < 0) state = \"ONLINE_BACK\";\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tvar lenSqP = px * px + py * py;\n\t\t\t\t\t\t\tif(lenSqP > lenSq) state = \"ONLINE_FRONT\";\n\t\t\t\t\t\t\telse state = \"ON_SEGMENT\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tConsole.WriteLine(state);\n\t\t\t}\n\t\t}\n\t}\n\tstatic class ExtendClass {\n\t\tpublic static string Join<T>(this IEnumerable<T> X, string separator = \" \") => string.Join(separator, X);\n\t}\n\tclass ConsoleInput {\n\t\tprivate readonly TextReader _stream;\n\t\tprivate readonly char _separator = ' ';\n\t\tprivate readonly Queue<string> inputStream;\n\t\tpublic ConsoleInput(TextReader stream, char separator = ' ') {\n\t\t\tthis._separator = separator;\n\t\t\tthis._stream = stream;\n\t\t\tinputStream = new Queue<string>();\n\t\t}\n\t\tpublic string Read {\n\t\t\tget {\n\t\t\t\tif(inputStream.Count != 0) return inputStream.Dequeue();\n\t\t\t\tstring[] tmp = _stream.ReadLine().Split(_separator);\n\t\t\t\tfor(int i = 0; i < tmp.Length; ++i)\n\t\t\t\t\tinputStream.Enqueue(tmp[i]);\n\t\t\t\treturn inputStream.Dequeue();\n\t\t\t}\n\t\t}\n\t\tpublic string ReadLine { get { return _stream.ReadLine(); } }\n\t\tpublic int ReadInt { get { return int.Parse(Read); } }\n\t\tpublic long ReadLong { get { return long.Parse(Read); } }\n\t\tpublic double ReadDouble { get { return double.Parse(Read); } }\n\t\tpublic string[] ReadStrArray(long N) {\n\t\t\tvar ret = new string[N];\n\t\t\tfor(long i = 0; i < N; ++i)\n\t\t\t\tret[i] = Read;\n\t\t\treturn ret;\n\t\t}\n\t\tpublic int[] ReadIntArray(long N) { var ret = new int[N]; for(long i = 0; i < N; ++i) ret[i] = ReadInt; return ret; }\n\t\tpublic long[] ReadLongArray(long N) { var ret = new long[N]; for(long i = 0; i < N; ++i) ret[i] = ReadLong; return ret; }\n\t\tpublic double[] ReadDoubleArray(long N) { var ret = new double[N]; for(long i = 0; i < N; ++i) ret[i] = ReadDouble; return ret; }\n\t}\n}\n\n"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Linq;\n\nnamespace geometry\n{\n\tpublic class Point{\n\t\tpublic double x, y;\n\t\tpublic Point(){\n\t\t\tthis.x = this.y = 0;\n\t\t}\n\n\t\tpublic Point(double x, double y){\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t}\n\n\t\tpublic static Point operator+(Point p1, Point p2){\n\t\t\treturn new Point (p1.x + p2.x, p1.y + p2.y);\n\t\t}\n\n\t\tpublic static Point operator-(Point p1, Point p2){\n\t\t\treturn new Point (p1.x - p2.x, p1.y - p2.y);\n\t\t}\n\n\t\tpublic static Point operator*(Point p1, double a){\n\t\t\treturn new Point (p1.x * a, p1.y * a);\n\t\t}\n\n\t\tpublic static Point operator/(Point p1, double a){\n\t\t\treturn new Point (p1.x / a, p1.y / a);\n\t\t}\n\n\t\tpublic double norm(){\n\t\t\treturn this.x * this.x + this.y * this.y;\n\t\t}\n\n\t\tpublic double abs(){\n\t\t\treturn Math.Sqrt(norm()); \n\t\t}\n\n\t\tpublic Point Clone(){\n\t\t\tPoint clone = new Point (this.x, this.y);\n\t\t\treturn clone;\n\t\t}\n\t}\n\n\tpublic class Line{\n\t\tpublic Point p1, p2;\n\t\tpublic Line(){\n\t\t\tthis.p1 = new Point ();\n\t\t\tthis.p2 = new Point ();\n\t\t}\n\n\t\tpublic Line(double p1x, double p1y, double p2x, double p2y){\n\t\t\tthis.p1 = new Point(p1x, p1y);\n\t\t\tthis.p2 = new Point(p2x, p2y);\n\t\t}\n\n\t\tpublic Line(Point p1, Point p2){\n\t\t\tthis.p1 = p1.Clone();\n\t\t\tthis.p2 = p2.Clone();\n\t\t}\n\n\t\tpublic Line Clone(){\n\t\t\tLine clone = new Line (this.p1, this.p2);\n\t\t\treturn clone;\n\t\t}\n\t}\n\n\tpublic class Circle{\n\t\tpublic Point c;\n\t\tpublic double r;\n\t\tpublic Circle(){\n\t\t\tthis.c = new Point ();\n\t\t\tthis.r = 0.0;\n\t\t}\n\n\t\tpublic Circle(double cx, double cy, double r){\n\t\t\tthis.c.x = cx;\n\t\t\tthis.c.y = cy;\n\t\t\tthis.r = r;\n\t\t}\n\n\t\tpublic Circle(Point c, double r){\n\t\t\tthis.c = c.Clone();\n\t\t\tthis.r = r;\n\t\t}\n\n\t\tpublic Circle Clone(){\n\t\t\tCircle clone = new Circle (this.c, this.r);\n\t\t\treturn clone;\n\t\t}\n\t}\n\n\tclass MainClass{\n\t\tstatic bool is_equal(double a, double b){\n\t\t\tif (Math.Abs (a - b) < 0.000001) {\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tstatic double dot(Point v1, Point v2){\n\t\t\treturn v1.x * v2.x + v1.y * v2.y;\n\t\t}\n\n\t\tstatic double cross(Point v1, Point v2){\n\t\t\treturn v1.x * v2.y - v1.y * v2.x;\n\t\t}\n\n\t\t// ??´?????????\n\t\tstatic bool is_orthogonal(Line s1, Line s2){\n\t\t\treturn is_equal(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n\t\t}\n\n\t\t// ????????????\n\t\tstatic bool is_parallel(Line s1, Line s2){\n\t\t\treturn is_equal(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n\t\t}\n\n\t\t// ????????????\n\t\tstatic bool is_intersect(Line s1, Line s2){\n\t\t\treturn ccw(s1.p1, s1.p2, s2.p1) * ccw(s1.p1, s1.p2, s2.p2) <= 0 && ccw(s2.p1, s2.p2, s1.p1) * ccw(s2.p1, s2.p2, s1.p2) <= 0;\n\t\t}\n\n\t\t// ?°???±??¢??°\n\t\tstatic Point project(Line s, Point p){\n\t\t\tPoint base_v = s.p2 - s.p1;\n\t\t\tdouble r = dot (p - s.p1, base_v) / base_v.norm ();\n\t\t\treturn s.p1 + base_v * r;\n\t\t}\n\n\t\t// ????°???¢??°\n\t\tstatic Point reflect(Line s, Point p){\n\t\t\treturn p + (project(s, p) - p) * 2;\n\t\t}\n\n\t\t// ???????¨???????\n\t\tstatic int ccw(Point p0, Point p1, Point p2){\n\t\t\tPoint v1 = p1 - p0;\n\t\t\tPoint v2 = p2 - p0;\n\t\t\tif (cross (v1, v2) > 0.000001) {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\tif (cross (v1, v2) < -0.000001) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tif (dot (v1, v2) < -0.000001) {\n\t\t\t\treturn 2;\n\t\t\t}\n\t\t\tif (v1.norm() < v2.norm()) {\n\t\t\t\treturn -2;\n\t\t\t}\n\t\t\treturn 0;\n\t\t}\n\n\t\tstatic double get_distance_p2p(Point p1, Point p2){\n\t\t\treturn (p2 - p1).abs();\n\t\t}\n\n\t\tstatic double get_distance_l2p(Line l, Point p){\n\t\t\treturn Math.Abs (cross (l.p2 - l.p1, p - l.p1)) / (l.p2 - l.p1).abs ();\n\t\t}\n\n\t\tstatic double get_distance_s2p(Line s, Point p){\n\t\t\tif (dot (s.p2 - s.p1, p - s.p1) < 0.0) {\n\t\t\t\treturn (p - s.p1).abs ();\n\t\t\t} else if (dot (s.p1 - s.p2, p - s.p2) < 0.0) {\n\t\t\t\treturn (p - s.p2).abs ();\n\t\t\t}\n\t\t\treturn get_distance_l2p (s, p);\n\t\t}\n\n\t\tstatic double[] input_line(){\n\t\t\tstring[] s = Console.ReadLine().Split(' ');\n\t\t\tdouble[] d = s.Select(i => double.Parse(i)).ToArray();\n\t\t\treturn d;\n\t\t}\n\n\t\t// ?°???±\n\t\tstatic void CGL_1_A(){\n\t\t\tdouble[] d = input_line ();\n\t\t\tLine l = new Line(d[0], d[1], d[2], d[3]);\n\n\t\t\tint q = int.Parse(Console.ReadLine());\n\t\t\tfor (int i = 0; i < q; i++) {\n\t\t\t\tdouble[] p_pos = input_line ();\n\t\t\t\tPoint p1 = new Point (p_pos[0], p_pos[1]);\n\t\t\t\tPoint p2 = project (l, p1);\n\t\t\t\tConsole.WriteLine (\"{0} {1}\", p2.x, p2.y);\n\t\t\t}\n\t\t}\n\n\t\t// ????°?\n\t\tstatic void CGL_1_B(){\n\t\t\tdouble[] d = input_line ();\n\t\t\tLine l = new Line(d[0], d[1], d[2], d[3]);\n\n\t\t\tint q = int.Parse(Console.ReadLine());\n\t\t\tfor (int i = 0; i < q; i++) {\n\t\t\t\tdouble[] p_pos = input_line ();\n\t\t\t\tPoint p1 = new Point (p_pos [0], p_pos [1]);\n\t\t\t\tPoint p2 = reflect (l, p1);\n\t\t\t\tConsole.WriteLine (\"{0} {1}\", p2.x, p2.y);\n\t\t\t}\n\t\t}\n\n\t\t// ???????¨???????\n\t\tstatic void CGL_1_C(){\n\t\t\tdouble[] d = input_line ();\n\t\t\tPoint p0 = new Point (d [0], d [1]);\n\t\t\tPoint p1 = new Point (d [2], d [3]);\n\n\t\t\tint q = int.Parse(Console.ReadLine());\n\t\t\tfor (int i = 0; i < q; i++) {\n\t\t\t\tdouble[] p_pos = input_line ();\n\t\t\t\tPoint p2 = new Point (p_pos [0], p_pos [1]);\n\t\t\t\tstring s;\n\t\t\t\tint c = ccw (p0, p1, p2);\n\t\t\t\tif (c == 1) {\n\t\t\t\t\ts = \"COUNTER_CLOCKWISE\";\n\t\t\t\t} else if (c == -1) {\n\t\t\t\t\ts = \"CLOCKWISE\";\n\t\t\t\t} else if (c == 2) {\n\t\t\t\t\ts = \"ONLINE_BACK\";\n\t\t\t\t} else if (c == -2) {\n\t\t\t\t\ts = \"ONLINE_FRONT\";\n\t\t\t\t} else {\n\t\t\t\t\ts = \"ON_SEGMENT\";\n\t\t\t\t}\n\t\t\t\tConsole.WriteLine (\"{0}\", s);\n\t\t\t}\n\t\t}\n\n\t\t// ??´????????´???/????????????\n\t\tstatic void CGL_2_A(){\n\t\t\tint q = int.Parse(Console.ReadLine());\n\t\t\tfor (int i = 0; i < q; i++) {\n\t\t\t\tdouble[] s_pos = input_line ();\n\t\t\t\tLine s1 = new Line(s_pos[0], s_pos[1], s_pos[2], s_pos[3]);\n\t\t\t\tLine s2 = new Line(s_pos[4], s_pos[5], s_pos[6], s_pos[7]);\n\t\t\t\tif (is_parallel (s1, s2)) {\n\t\t\t\t\tConsole.Write (\"2\\n\");\n\t\t\t\t} else if (is_orthogonal (s1, s2)) {\n\t\t\t\t\tConsole.Write (\"1\\n\");\n\t\t\t\t} else {\n\t\t\t\t\tConsole.Write (\"0\\n\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// ?????????????????????\n\t\tstatic void CGL_2_B(){\n\t\t\tint q = int.Parse(Console.ReadLine());\n\t\t\tfor (int i = 0; i < q; i++) {\n\t\t\t\tdouble[] s_pos = input_line ();\n\t\t\t\tLine s1 = new Line(s_pos[0], s_pos[1], s_pos[2], s_pos[3]);\n\t\t\t\tLine s2 = new Line(s_pos[4], s_pos[5], s_pos[6], s_pos[7]);\n\n\t\t\t\tif (is_intersect (s1, s2)) {\n\t\t\t\t\tConsole.Write (\"1\\n\");\n\t\t\t\t} else {\n\t\t\t\t\tConsole.Write (\"0\\n\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tpublic static void Main (string[] args){\n\t\t\t// ?°???±\n\t\t\t//CGL_1_A ();\n\t\t\t// ????°?\n\t\t\t//CGL_1_B ();\n\t\t\t// ???????¨???????\n\t\t\tCGL_1_C ();\n\t\t\t// ??´????????´???/????????????\n\t\t\t//CGL_2_A ();\n\t\t\t// ?????????????????????\n\t\t\t//CGL_2_B ();\n\n\t\t}\n\t}\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Program {\n    static int ReadInt() { return int.Parse(Console.ReadLine()); }\n    static int[] ReadInts() { return Console.ReadLine().Split().Select(int.Parse).ToArray(); }\n    static string[] ReadStrings() { return Console.ReadLine().Split(); }\n\n    static int Sign(double x) {\n        if (x > 0) return 1;\n        if (x < 0) return -1;\n        return 0;\n    }\n\n    static string Calc(Vec2f a, Vec2f b, Vec2f c) {\n        var ab = b - a;\n        var ac = c - a;\n\n        var q = ab.Cross(ac);\n        if (q > 0) return \"COUNTER_CLOCKWISE\";\n        if (q < 0) return \"CLOCKWISE\";\n\n        // when q = 0\n        // c ??? a ????????? b ??¨?????????\n        if ((a.X == c.X && a.Y == c.Y) || (b.X == c.X && b.Y == c.Y))\n            return \"ONLINE_SEGMENT\";\n\n        // ????????????????????????\n        if (Sign(ab.X) == Sign(ac.X) && Sign(ab.Y) == Sign(ac.Y)) {\n            if (ab.SqrMagnitude() >= ac.SqrMagnitude())\n                return \"ONLINE_SEGMENT\";\n            return \"ONLINE_FRONT\";\n        }\n        else {\n            return \"ONLINE_BACK\";\n        }\n    }\n\n    static void Main() {\n        var xs = ReadInts();\n        var p0 = new Vec2f(xs[0], xs[1]);\n        var p1 = new Vec2f(xs[2], xs[3]);\n\n        int q = ReadInt();\n        for (int i = 0; i < q; i++) {\n            var xy = ReadInts();\n            var p2 = new Vec2f(xy[0], xy[1]);\n            var ans = Calc(p0, p1, p2);\n            Console.WriteLine(ans);\n        }\n    }\n}\n\nstruct Vec2f {\n    public double X { get; private set; }\n    public double Y { get; private set; }\n\n    public Vec2f(double x, double y) : this() {\n        X = x;\n        Y = y;\n    }\n\n    public override string ToString() {\n        return string.Format(\"({0}, {1})\", X, Y);\n    }\n\n    public static Vec2f operator+(Vec2f a, Vec2f b) {\n        return new Vec2f(a.X + b.X, a.Y + b.Y);\n    }\n\n    public static Vec2f operator-(Vec2f a, Vec2f b) {\n        return new Vec2f(a.X - b.X, a.Y - b.Y);\n    }\n\n    public static Vec2f operator*(Vec2f a, double t) {\n        return new Vec2f(a.X * t, a.Y * t);\n    }\n\n    public static Vec2f operator*(double t, Vec2f a) {\n        return new Vec2f(a.X * t, a.Y * t);\n    }\n\n    // a???b = |a||b|cos??\n    public double Dot(Vec2f other) {\n        return X * other.X + Y * other.Y;\n    }\n\n    public double Cross(Vec2f other) {\n        return X * other.Y - Y * other.X;\n    }\n\n    public Vec2f Normalized() {\n        var m = Magnitude();\n        if (m != 0 && m != 1) {\n            return new Vec2f(X / m, Y / m);\n        }\n        return this;\n    }\n\n    public double Magnitude() {\n        return Math.Sqrt(X * X + Y * Y);\n    }\n\n    public double SqrMagnitude() {\n        return X * X + Y * Y;\n    }\n\n    public static double Distance(Vec2f a, Vec2f b) {\n        return (a - b).Magnitude();\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Diagnostics;\nusing Aoj.CGL.Lib;\n\nnamespace Aoj.CGL.Chapter1C\n{\n    class Program\n    {\n        public static string ConvertCcwToStr(Ccw ccw)\n        {\n            var map = new Dictionary<Ccw, string> (){\n                {Ccw.CounterClockWise, \"COUNTER_CLOCK_WISE\"},\n                {Ccw.ClockWise, \"CLOCK_WISE\"},\n                {Ccw.OnLineBack, \"ON_LINE_BACK\" },\n                {Ccw.OnSegment, \"ON_SEGMENT\"},\n                {Ccw.OnLineFront, \"ON_LINE_FRONT\"},\n            };\n\n            return map[ccw];\n        }\n\n        public static void Solve()\n        {\n            int[] input = Array.ConvertAll(Console.ReadLine().Split(' '), int.Parse);\n            Vector v1 = new Vector(input[0], input[1]);\n            Vector v2 = new Vector(input[2], input[3]);\n            Vector baseV = v2 - v1;\n\n            int q = int.Parse(Console.ReadLine());\n \n            for (int i = 0; i < q; i++)\n            {\n                int[] x_y = Array.ConvertAll(Console.ReadLine().Split(' '), int.Parse);\n\n                Vector v = new Vector(x_y[0], x_y[1]) - v1;\n                Ccw ccw = Vector.CountrClockWise(baseV, v);\n\n                Console.WriteLine(\"{0}\", ConvertCcwToStr(ccw));\n            }\n        }\n\n        public static void Main()\n        {\n            // Console.SetIn(new System.IO.StreamReader(\"ComputationalGeometry/Input/01_Projection_C_02.txt\"));\n            // var sw = new Stopwatch();\n            // sw.Start();\n\n            Solve();\n\n            // Console.WriteLine(\"{0}ms\", sw.ElapsedMilliseconds);\n        }\n    }\n}\n\nnamespace Aoj.CGL.Lib\n{\n    using Line = Segment;\n\n    using Polygon = List<Point>;\n\n    public enum Ccw\n    {\n        CounterClockWise,\n        ClockWise,\n        OnLineBack,\n        OnSegment,\n        OnLineFront,\n    };\n\n    public struct Point\n    {\n        private double _x;\n        private double _y;\n\n        public double X { get { return _x;} }\n        public double Y { get { return _y;} }\n\n        public Point(double x, double y)\n        {\n            _x = x;\n            _y = y;\n        }\n\n        public static Point operator +(Point p1, Point p2)\n        {\n            return new Point(p1.X + p2.X, p1.Y + p2.Y);\n        }\n\n        public static Point operator -(Point p1, Point p2)\n        {\n            return new Point(p1.X - p2.X, p1.Y - p2.Y);\n        }\n\n        public static Point operator *(Point p, double k)\n        {\n            return new Point(p.X * k, p.Y * k);\n        }\n\n        public static Point operator *(double k, Point p)\n        {\n            return p * k;\n        }\n\n        public static explicit operator Vector(Point p)\n        {\n            return new Vector(p.X, p.Y);\n        }\n\n        public static bool IsOrthogonal(Point a1, Point a2, Point b1, Point b2)\n        {\n            return Vector.IsOrthogonal((Vector)(a1 - a2), (Vector)(b1 - b2));\n        }\n\n        public static bool IsParallel(Point a1, Point a2, Point b1, Point b2)\n        {\n            return Vector.IsParallel((Vector)(a1 - a2), (Vector)(b1 - b2));\n        }\n\n        public override string ToString()\n        {\n            return string.Format(\"x:{0},y:{1}\", X, Y);\n        }\n    }\n\n    public struct Segment\n    {\n        private Point _p1;\n        private Point _p2;\n\n        public Point P1 { get{ return _p1; } }\n        public Point P2 { get{ return _p2; } }\n\n        public Segment(Point p1, Point p2)\n        {\n            _p1 = p1;\n            _p2 = p2;\n        }\n\n        public Segment(double x1, double y1, double x2, double y2)\n        {\n            _p1 = new Point(x1, y1);\n            _p2 = new Point(x2, y2);\n        }\n        public static bool IsOrthogonal(Segment s1, Segment s2)\n        {\n            return Vector.IsOrthogonal((Vector)(s1.P1 - s1.P2), (Vector)(s2.P1 - s2.P2));\n        }\n\n        public static bool IsParallel(Segment s1, Segment s2)\n        {\n            return Vector.IsParallel((Vector)(s1.P1 - s1.P2), (Vector)(s2.P1 - s2.P2));\n        }\n\n        public override string ToString()\n        {\n            return string.Format(\"P1x:{0},P1y:{1}, P2x:{2},P2y:{3}\", P1.X, P1.Y, P2.X, P2.Y);\n        }\n    }\n\n    public struct Circle\n    {\n        private Point _p;\n        private double _r;\n\n        public Point P { get { return _p; } }\n        public double R { get { return _r; } }\n\n        public Circle(Point p, double r)\n        {\n            _p = p;\n            _r = r;\n        }\n\n        public override string ToString()\n        {\n            return string.Format(\"px:{0},py:{1},r:{2}\", P.X, P.Y, R);\n        }\n    }\n\n    public struct Vector\n    {\n        private double _x;\n        private double _y;\n\n        public double X { get { return _x;} }\n        public double Y { get { return _y;} }\n\n        public Vector(double x, double y)\n        {\n            _x = x;\n            _y = y;\n        }\n\n        public double Norm()\n        {\n            return X * X + Y * Y;\n        }\n\n        public double Abs()\n        {\n            return Math.Sqrt(Norm());\n        }\n\n        public Vector Normalize()\n        {\n            double mag = Abs();\n            return new Vector(X * mag, Y * mag);\n        }\n\n        public static Vector operator +(Vector v1, Vector v2)\n        {\n            return new Vector(v1.X + v2.X, v1.Y + v2.Y);\n        }\n\n        public static Vector operator -(Vector v1, Vector v2)\n        {\n            return new Vector(v1.X - v2.X, v1.Y - v2.Y);\n        }\n\n        public static Vector operator *(Vector v, double k)\n        {\n            return new Vector(v.X * k, v.Y * k);\n        }\n\n        public static Vector operator *(double k, Vector v)\n        {\n            return v * k;\n        }\n\n        public static double Dot(Vector v1, Vector v2)\n        {\n            return v1.X * v2.X + v1.Y * v2.Y;\n        }\n\n        public static double Cross(Vector v1, Vector v2)\n        {\n            return v1.X * v2.Y - v1.Y * v2.X;\n        }\n\n        public static bool IsOrthogonal(Vector v1, Vector v2)\n        {\n            return Dot(v1, v2) == 0.0;\n        }\n\n        public static bool IsParallel(Vector v1, Vector v2)\n        {\n            return Cross(v1, v2) == 0.0;\n        }\n\n        public static Vector Project(Vector v, Vector onNormal)\n        {\n            // mag = |b|cos?? / |a|\n            //     = |a||b|cos?? / |a|^2\n            double mag = Dot(v, onNormal) / onNormal.Norm();\n            return new Vector(onNormal.X * mag, onNormal.Y * mag);\n        }\n\n        public static Vector Reflect(Vector v, Vector inNormal)\n        {\n            // TODO Unity????????¨????????????????????????????????????\n            Vector p = Project(v, inNormal);\n            return 2.0 * p - v;\n        }\n\n        public static Ccw CountrClockWise(Vector baseV, Vector v)\n        {\n            double cross = Cross(baseV, v);\n            if (cross > 0.0)\n                return Ccw.CounterClockWise;\n            else if (cross < 0.0)\n                return Ccw.ClockWise;\n            else if (Dot(baseV, v) < 0.0)\n                return Ccw.OnLineBack;\n            else if (baseV.Norm() < v.Norm())\n                return Ccw.OnLineFront;\n            else\n               return Ccw.OnSegment;\n        }\n\n        public override string ToString()\n        {\n            return string.Format(\"x:{0},y:{1}\", X, Y);\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Text;\n\nnamespace CGL_1_C_Counter_Clockwise\n{\n\tclass Program\n\t{\n\t\tstatic void Main ( string[] args )\n\t\t{\n\t\t\tint[] inputNum = Array.ConvertAll (Console.ReadLine ().Split (' '), int.Parse);\n\t\t\tint inputCount = int.Parse (Console.ReadLine ());\n\n\t\t\tStringBuilder output = new StringBuilder (inputCount * 18);\n\n\t\t\tVector2 point1 = new Vector2 (inputNum[0], inputNum[1]);\n\t\t\tVector2 point2 = new Vector2 (inputNum[2], inputNum[3]);\n\n\t\t\tfor (int lp = 0; lp < inputCount; lp++)\n\t\t\t{\n\t\t\t\tinputNum = Array.ConvertAll (Console.ReadLine ().Split (' '), int.Parse);\n\t\t\t\tVector2 point3 = new Vector2 (inputNum[0], inputNum[1]);\n\n\t\t\t\tint result = Vector2.PointState (point1, point2, point3);\n\n\t\t\t\tswitch (result)\n\t\t\t\t{\n\t\t\t\t\tcase Vector2.Counter_Clockwise: output.AppendLine (\"COUNTER_CLOCKWISE\"); break;\n\t\t\t\t\tcase Vector2.Clockwise: output.AppendLine (\"CLOCKWISE\"); break;\n\t\t\t\t\tcase Vector2.OnlineBack: output.AppendLine (\"ONLINE_BACK\"); break;\n\t\t\t\t\tcase Vector2.OnlineFront: output.AppendLine (\"ON_SEGMENT\"); break;\n\t\t\t\t\tcase Vector2.OnSegment: output.AppendLine (\"ONLINE_FRONT\"); break;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tConsole.Write (output);\n\t\t}\n\t}\n\n\n\tclass Vector2\n\t{\n\t\tpublic Vector2 ( decimal x, decimal y )\n\t\t{\n\t\t\tthis.X = x;\n\t\t\tthis.Y = y;\n\t\t}\n\n\t\tpublic decimal X { private set; get; }\n\t\tpublic decimal Y { private set; get; }\n\n\t\tpublic static Vector2 operator + ( Vector2 ob1, Vector2 ob2 )\n\t\t{\n\t\t\treturn new Vector2 (ob1.X + ob2.X, ob1.Y + ob2.Y);\n\t\t}\n\t\tpublic static Vector2 operator - ( Vector2 ob1, Vector2 ob2 )\n\t\t{\n\t\t\treturn new Vector2 (ob1.X - ob2.X, ob1.Y - ob2.Y);\n\t\t}\n\t\tpublic static Vector2 operator * ( Vector2 ob, decimal scalar )\n\t\t{\n\t\t\treturn new Vector2 (ob.X * scalar, ob.Y * scalar);\n\t\t}\n\n\t\tpublic decimal Length ()\n\t\t{\n\t\t\treturn X * X + Y * Y;\n\t\t}\n\t\tpublic static decimal DotProduct ( Vector2 ob1, Vector2 ob2 )\n\t\t{\n\t\t\treturn ob1.X * ob2.X + ob1.Y * ob2.Y;\n\t\t}\n\t\tpublic static decimal CrossProduct ( Vector2 ob1, Vector2 ob2 )\n\t\t{\n\t\t\treturn ob1.X * ob2.Y - ob1.Y * ob2.X;\n\t\t}\n\n\t\tpublic const int Counter_Clockwise = 1;\n\t\tpublic const int Clockwise = -1;\n\t\tpublic const int OnlineBack = 2;\n\t\tpublic const int OnlineFront = -2;\n\t\tpublic const int OnSegment = 0;\n\n\t\tpublic static int PointState ( Vector2 point1, Vector2 point2, Vector2 point3 )\n\t\t{\n\t\t\tVector2 line1 = point2 - point1;\n\t\t\tVector2 line2 = point3 - point1;\n\n\t\t\tdecimal crossProduct = CrossProduct (line1, line2);\n\n\t\t\tif (crossProduct > 0m)\n\t\t\t{\n\t\t\t\treturn Counter_Clockwise;\n\t\t\t}\n\t\t\telse if (crossProduct < 0m)\n\t\t\t{\n\t\t\t\treturn Clockwise;\n\t\t\t}\n\t\t\telse if (DotProduct (line1, line2) < 0m)\n\t\t\t{\n\t\t\t\treturn OnlineBack;\n\t\t\t}\n\t\t\telse if (line1.Length () < line2.Length ())\n\t\t\t{\n\t\t\t\treturn OnlineFront;\n\t\t\t}\n\n\t\t\treturn OnSegment;\n\t\t}\n\t}\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Diagnostics;\nusing Aoj.CGL.Lib;\n \nnamespace Aoj.CGL.Chapter1C\n{\n    class Program\n    {\n        public static string ConvertCcwToStr(Ccw ccw)\n        {\n            var map = new Dictionary<Ccw, string> (){\n                {Ccw.CounterClockwise, \"COUNTER_CLOCKWISE\"},\n                {Ccw.Clockwise, \"CLOCKWISE\"},\n                {Ccw.OnLineBack, \"ONLINE_BACK\" },\n                {Ccw.OnSegment, \"ON_SEGMENT\"},\n                {Ccw.OnLineFront, \"ONLINE_FRONT\"},\n            };\n \n            return map[ccw];\n        }\n \n        public static void Solve()\n        {\n            int[] input = Array.ConvertAll(Console.ReadLine().Split(' '), int.Parse);\n            Vector v1 = new Vector(input[0], input[1]);\n            Vector v2 = new Vector(input[2], input[3]);\n            Vector baseV = v2 - v1;\n \n            int q = int.Parse(Console.ReadLine());\n  \n            for (int i = 0; i < q; i++)\n            {\n                int[] x_y = Array.ConvertAll(Console.ReadLine().Split(' '), int.Parse);\n \n                Vector v = new Vector(x_y[0], x_y[1]) - v1;\n                Ccw ccw = Vector.CountrClockWise(baseV, v);\n \n                Console.WriteLine(\"{0}\", ConvertCcwToStr(ccw));\n            }\n        }\n \n        public static void Main()\n        {\n            // Console.SetIn(new System.IO.StreamReader(\"ComputationalGeometry/Input/01_Projection_C_03.txt\"));\n            // var sw = new Stopwatch();\n            // sw.Start();\n \n            Solve();\n \n            // Console.WriteLine(\"{0}ms\", sw.ElapsedMilliseconds);\n        }\n    }\n}\n \nnamespace Aoj.CGL.Lib\n{\n    using Line = Segment;\n \n    using Polygon = List<Point>;\n \n    public enum Ccw\n    {\n        CounterClockwise,\n        Clockwise,\n        OnLineBack,\n        OnSegment,\n        OnLineFront,\n    };\n \n    public struct Point\n    {\n        private double _x;\n        private double _y;\n \n        public double X { get { return _x;} }\n        public double Y { get { return _y;} }\n \n        public Point(double x, double y)\n        {\n            _x = x;\n            _y = y;\n        }\n \n        public static Point operator +(Point p1, Point p2)\n        {\n            return new Point(p1.X + p2.X, p1.Y + p2.Y);\n        }\n \n        public static Point operator -(Point p1, Point p2)\n        {\n            return new Point(p1.X - p2.X, p1.Y - p2.Y);\n        }\n \n        public static Point operator *(Point p, double k)\n        {\n            return new Point(p.X * k, p.Y * k);\n        }\n \n        public static Point operator *(double k, Point p)\n        {\n            return p * k;\n        }\n \n        public static explicit operator Vector(Point p)\n        {\n            return new Vector(p.X, p.Y);\n        }\n \n        public static bool IsOrthogonal(Point a1, Point a2, Point b1, Point b2)\n        {\n            return Vector.IsOrthogonal((Vector)(a1 - a2), (Vector)(b1 - b2));\n        }\n \n        public static bool IsParallel(Point a1, Point a2, Point b1, Point b2)\n        {\n            return Vector.IsParallel((Vector)(a1 - a2), (Vector)(b1 - b2));\n        }\n \n        public override string ToString()\n        {\n            return string.Format(\"x:{0},y:{1}\", X, Y);\n        }\n    }\n \n    public struct Segment\n    {\n        private Point _p1;\n        private Point _p2;\n \n        public Point P1 { get{ return _p1; } }\n        public Point P2 { get{ return _p2; } }\n \n        public Segment(Point p1, Point p2)\n        {\n            _p1 = p1;\n            _p2 = p2;\n        }\n \n        public Segment(double x1, double y1, double x2, double y2)\n        {\n            _p1 = new Point(x1, y1);\n            _p2 = new Point(x2, y2);\n        }\n        public static bool IsOrthogonal(Segment s1, Segment s2)\n        {\n            return Vector.IsOrthogonal((Vector)(s1.P1 - s1.P2), (Vector)(s2.P1 - s2.P2));\n        }\n \n        public static bool IsParallel(Segment s1, Segment s2)\n        {\n            return Vector.IsParallel((Vector)(s1.P1 - s1.P2), (Vector)(s2.P1 - s2.P2));\n        }\n \n        public override string ToString()\n        {\n            return string.Format(\"P1x:{0},P1y:{1}, P2x:{2},P2y:{3}\", P1.X, P1.Y, P2.X, P2.Y);\n        }\n    }\n \n    public struct Circle\n    {\n        private Point _p;\n        private double _r;\n \n        public Point P { get { return _p; } }\n        public double R { get { return _r; } }\n \n        public Circle(Point p, double r)\n        {\n            _p = p;\n            _r = r;\n        }\n \n        public override string ToString()\n        {\n            return string.Format(\"px:{0},py:{1},r:{2}\", P.X, P.Y, R);\n        }\n    }\n \n    public struct Vector\n    {\n        private double _x;\n        private double _y;\n \n        public double X { get { return _x;} }\n        public double Y { get { return _y;} }\n \n        public Vector(double x, double y)\n        {\n            _x = x;\n            _y = y;\n        }\n \n        public double Norm()\n        {\n            return X * X + Y * Y;\n        }\n \n        public double Abs()\n        {\n            return Math.Sqrt(Norm());\n        }\n \n        public Vector Normalize()\n        {\n            double mag = Abs();\n            return new Vector(X * mag, Y * mag);\n        }\n \n        public static Vector operator +(Vector v1, Vector v2)\n        {\n            return new Vector(v1.X + v2.X, v1.Y + v2.Y);\n        }\n \n        public static Vector operator -(Vector v1, Vector v2)\n        {\n            return new Vector(v1.X - v2.X, v1.Y - v2.Y);\n        }\n \n        public static Vector operator *(Vector v, double k)\n        {\n            return new Vector(v.X * k, v.Y * k);\n        }\n \n        public static Vector operator *(double k, Vector v)\n        {\n            return v * k;\n        }\n \n        public static double Dot(Vector v1, Vector v2)\n        {\n            return v1.X * v2.X + v1.Y * v2.Y;\n        }\n \n        public static double Cross(Vector v1, Vector v2)\n        {\n            return v1.X * v2.Y - v1.Y * v2.X;\n        }\n \n        public static bool IsOrthogonal(Vector v1, Vector v2)\n        {\n            return Dot(v1, v2) == 0.0;\n        }\n \n        public static bool IsParallel(Vector v1, Vector v2)\n        {\n            return Cross(v1, v2) == 0.0;\n        }\n \n        public static Vector Project(Vector v, Vector onNormal)\n        {\n            // mag = |b|cos?? / |a|\n            //     = |a||b|cos?? / |a|^2\n            double mag = Dot(v, onNormal) / onNormal.Norm();\n            return new Vector(onNormal.X * mag, onNormal.Y * mag);\n        }\n \n        public static Vector Reflect(Vector v, Vector inNormal)\n        {\n            // TODO Unity?????????¨????????????????????????????????????\n            Vector p = Project(v, inNormal);\n            return 2.0 * p - v;\n        }\n \n        public static Ccw CountrClockWise(Vector baseV, Vector v)\n        {\n            double cross = Cross(baseV, v);\n            if (cross > 0.0)\n                return Ccw.CounterClockwise;\n            else if (cross < 0.0)\n                return Ccw.Clockwise;\n            else if (Dot(baseV, v) < 0.0)\n                return Ccw.OnLineBack;\n            else if (baseV.Norm() < v.Norm())\n                return Ccw.OnLineFront;\n            else\n               return Ccw.OnSegment;\n        }\n \n        public override string ToString()\n        {\n            return string.Format(\"x:{0},y:{1}\", X, Y);\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace ConsoleApplication1\n{\n    enum CCW { COUNTER_CLOCKWISE = 1, CLOCKWISE = -1, ONLINE_BACK = 2, ONLINE_FRONT = -2, ON_SEGMENT = 0 }\n\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            double[] input = Array.ConvertAll(Console.ReadLine().Split(' '), double.Parse);\n            Pt a = new Pt(input[0], input[1]);\n            Pt b = new Pt(input[2], input[3]);\n\n            int q = int.Parse(Console.ReadLine());\n            \n            StringBuilder sb = new StringBuilder();\n            for (int i = 0; i < q; i++)\n            {\n                input = Array.ConvertAll(Console.ReadLine().Split(' '), double.Parse);\n                Pt p = new Pt(input[0], input[1]);\n\n                sb.AppendLine(CheckCCW(a, b, p).ToString());\n            }\n            Console.Write(sb);\n        }\n\n        static CCW CheckCCW(Pt p0, Pt p1, Pt p2)\n        {\n            Pt a = p1 - p0;\n            Pt b = p2 - p0;\n\n            if (a.Cross(b) > 0) return CCW.COUNTER_CLOCKWISE;\n            if (a.Cross(b) < 0) return CCW.CLOCKWISE;\n            if (a.Dot(b) < 0) return CCW.ONLINE_BACK;\n            if (a.Norm < b.Norm) return CCW.ONLINE_FRONT;\n            return CCW.ON_SEGMENT;\n        }\n    }\n\n    class Pt : IComparable<Pt>\n    {\n        static readonly double EPS = 1E-10;\n\n        internal double x, y;\n\n        public Pt(double x, double y)\n        {\n            this.x = x;\n            this.y = y;\n        }\n\n        public double Abs { get { return Math.Sqrt(Norm); } }\n        public double Norm { get { return x * x + y * y; } }\n\n        public double Dot(Pt p) { return x * p.x + y * p.y; }\n        public double Cross(Pt p) { return x * p.y - y * p.x; }\n\n        public static Pt operator +(Pt a, Pt b) { return new Pt(a.x + b.x, a.y + b.y); }\n        public static Pt operator -(Pt a, Pt b) { return new Pt(a.x - b.x, a.y - b.y); }\n        public static Pt operator *(Pt p, double d) { return new Pt(p.x * d, p.y * d); }\n        public static Pt operator /(Pt p, double d) { return new Pt(p.x / d, p.y / d); }\n        public static bool operator <(Pt a, Pt b) { return Math.Abs(a.x - b.x) > EPS ? a.x < b.x : a.y < b.y; }\n        public static bool operator >(Pt a, Pt b) { return Math.Abs(a.x - b.x) > EPS ? a.x > b.x : a.y > b.y; }\n        public static bool operator ==(Pt a, Pt b) { return Math.Abs(a.x - b.x) < EPS && Math.Abs(a.y - b.y) < EPS; }\n        public static bool operator !=(Pt a, Pt b) { return Math.Abs(a.x - b.x) >= EPS || Math.Abs(a.y - b.y) >= EPS; }\n\n        public int CompareTo(Pt other)\n        {\n            return x != other.x ? (int)(x - other.x) : (int)(y - other.y);\n        }\n\n        public override bool Equals(object obj)\n        {\n            Pt other = (Pt)obj;\n            return Math.Abs(x - other.x) < EPS && Math.Abs(y - other.y) < EPS;\n        }\n\n        public override int GetHashCode()\n        {\n            return x.GetHashCode() ^ y.GetHashCode();\n        }\n\n        public override string ToString()\n        {\n            return string.Format(\"{0:f10} {1:f10}\", x, y);\n        }\n    }\n\n    class Seg\n    {\n        internal Pt p1, p2;\n\n        public Seg(Pt a, Pt b)\n        {\n            p1 = a;\n            p2 = b;\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace CSharpSample01\n{\n\n    class Vector2\n    {\n        public double x;\n        public double y;\n\n        public Vector2() { }\n        public Vector2(double x, double y)\n        {\n            this.x = x;\n            this.y = y;\n        }\n\n        //「射影」\n        //点pからベクトルp1p2への射影ベクトルを求める\n        public Vector2 Projection(Vector2 p1, Vector2 p2, Vector2 p)\n        {\n\n            Vector2 hypo = new Vector2(p.x - p1.x, p.y - p1.y);\n\n            Vector2 ground = new Vector2(p2.x - p1.x, p2.y - p1.y);\n\n            Vector2 shadow = new Vector2\n            {\n                x = p1.x + ground.x * (hypo.x * ground.x + hypo.y * ground.y) / (ground.x * ground.x + ground.y * ground.y),\n                y = p1.y + ground.y * (hypo.x * ground.x + hypo.y * ground.y) / (ground.x * ground.x + ground.y * ground.y)\n            };\n\n            return shadow;\n        }\n\n        //内積\n        public double Dot(Vector2 a, Vector2 b)\n        {\n            return a.x * b.x + a.y * b.y;\n        }\n\n        //外積\n        public double Cross(Vector2 a, Vector2 b)\n        {\n            return a.x * b.y - a.y * b.x;\n        }\n\n        //ベクトルの大きさ\n        public double Norm(Vector2 a)\n        {\n            return Math.Sqrt(a.x * a.x + a.y * a.y);\n        }\n        \n\n        public string Clockwise(Vector2 p0, Vector2 p1, Vector2 p2)\n        {\n\n            string str;\n\n            Vector2 p0p1 = new Vector2(p1.x - p0.x, p1.y - p0.y);\n            Vector2 p0p2 = new Vector2(p2.x - p0.x, p2.y - p0.y);\n            \n            if (Cross(p0p1, p0p2) > 0)\n            {\n                str = \"COUNTER_CLOCKWISE\";\n            }\n            else if(Cross(p0p1, p0p2) < 0)\n            {\n                str = \"CLOCKWISE\";\n            }\n            else\n            {\n                double t;\n              \n                if(p0p1.x != 0)\n                {\n                    t = p0p2.x / p0p1.x;\n                }\n                else\n                {\n                    t = p0p2.y / p0p1.y;\n                }\n                \n                if(t < 0)\n                {\n                    str = \"ONLINE_BACK\";\n                }\n                else if(t > 1)\n                {\n                    str = \"ONLINE_FRONT\";\n                }\n                else\n                {\n                    str = \"ON_SEGMENT\";\n                }\n\n            }\n\n            return str;\n        }\n\n\n    }\n\n\n    class Program\n    {\n\n\n        static void Main(string[] args)\n        {\n            double[] data = Console.ReadLine().Split(' ').Select(x => double.Parse(x)).ToArray();\n\n            Vector2 p0 = new Vector2(data[0], data[1]);\n            Vector2 p1 = new Vector2(data[2], data[3]);\n          \n            int q = int.Parse(Console.ReadLine());\n\n            Vector2 h = new Vector2();\n\n            for(int i = 0; i < q; i++)\n            {\n                string[] input = Console.ReadLine().Split(' ');\n                double s = double.Parse(input[0]);\n                double t = double.Parse(input[1]);\n\n                Vector2 p2 = new Vector2(s, t);\n\n                Console.WriteLine(h.Clockwise(p0, p1, p2));\n\n            }\n\n\n        }\n    }\n}\n\n"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Diagnostics;\nusing Aoj.CGL.Lib;\n\nnamespace Aoj.CGL.Chapter1C\n{\n    class Program\n    {\n        public static string ConvertCcwToStr(Ccw ccw)\n        {\n            var map = new Dictionary<Ccw, string> (){\n                {Ccw.CounterClockwise, \"COUNTER_CLOCKWISE\"},\n                {Ccw.Clockwise, \"CLOCKWISE\"},\n                {Ccw.OnLineBack, \"ON_LINE_BACK\" },\n                {Ccw.OnSegment, \"ON_SEGMENT\"},\n                {Ccw.OnLineFront, \"ON_LINE_FRONT\"},\n            };\n\n            return map[ccw];\n        }\n\n        public static void Solve()\n        {\n            int[] input = Array.ConvertAll(Console.ReadLine().Split(' '), int.Parse);\n            Vector v1 = new Vector(input[0], input[1]);\n            Vector v2 = new Vector(input[2], input[3]);\n            Vector baseV = v2 - v1;\n\n            int q = int.Parse(Console.ReadLine());\n \n            for (int i = 0; i < q; i++)\n            {\n                int[] x_y = Array.ConvertAll(Console.ReadLine().Split(' '), int.Parse);\n\n                Vector v = new Vector(x_y[0], x_y[1]) - v1;\n                Ccw ccw = Vector.CountrClockWise(baseV, v);\n\n                Console.WriteLine(\"{0}\", ConvertCcwToStr(ccw));\n            }\n        }\n\n        public static void Main()\n        {\n            // Console.SetIn(new System.IO.StreamReader(\"ComputationalGeometry/Input/01_Projection_C_03.txt\"));\n            // var sw = new Stopwatch();\n            // sw.Start();\n\n            Solve();\n\n            // Console.WriteLine(\"{0}ms\", sw.ElapsedMilliseconds);\n        }\n    }\n}\n\nnamespace Aoj.CGL.Lib\n{\n    using Line = Segment;\n\n    using Polygon = List<Point>;\n\n    public enum Ccw\n    {\n        CounterClockwise,\n        Clockwise,\n        OnLineBack,\n        OnSegment,\n        OnLineFront,\n    };\n\n    public struct Point\n    {\n        private double _x;\n        private double _y;\n\n        public double X { get { return _x;} }\n        public double Y { get { return _y;} }\n\n        public Point(double x, double y)\n        {\n            _x = x;\n            _y = y;\n        }\n\n        public static Point operator +(Point p1, Point p2)\n        {\n            return new Point(p1.X + p2.X, p1.Y + p2.Y);\n        }\n\n        public static Point operator -(Point p1, Point p2)\n        {\n            return new Point(p1.X - p2.X, p1.Y - p2.Y);\n        }\n\n        public static Point operator *(Point p, double k)\n        {\n            return new Point(p.X * k, p.Y * k);\n        }\n\n        public static Point operator *(double k, Point p)\n        {\n            return p * k;\n        }\n\n        public static explicit operator Vector(Point p)\n        {\n            return new Vector(p.X, p.Y);\n        }\n\n        public static bool IsOrthogonal(Point a1, Point a2, Point b1, Point b2)\n        {\n            return Vector.IsOrthogonal((Vector)(a1 - a2), (Vector)(b1 - b2));\n        }\n\n        public static bool IsParallel(Point a1, Point a2, Point b1, Point b2)\n        {\n            return Vector.IsParallel((Vector)(a1 - a2), (Vector)(b1 - b2));\n        }\n\n        public override string ToString()\n        {\n            return string.Format(\"x:{0},y:{1}\", X, Y);\n        }\n    }\n\n    public struct Segment\n    {\n        private Point _p1;\n        private Point _p2;\n\n        public Point P1 { get{ return _p1; } }\n        public Point P2 { get{ return _p2; } }\n\n        public Segment(Point p1, Point p2)\n        {\n            _p1 = p1;\n            _p2 = p2;\n        }\n\n        public Segment(double x1, double y1, double x2, double y2)\n        {\n            _p1 = new Point(x1, y1);\n            _p2 = new Point(x2, y2);\n        }\n        public static bool IsOrthogonal(Segment s1, Segment s2)\n        {\n            return Vector.IsOrthogonal((Vector)(s1.P1 - s1.P2), (Vector)(s2.P1 - s2.P2));\n        }\n\n        public static bool IsParallel(Segment s1, Segment s2)\n        {\n            return Vector.IsParallel((Vector)(s1.P1 - s1.P2), (Vector)(s2.P1 - s2.P2));\n        }\n\n        public override string ToString()\n        {\n            return string.Format(\"P1x:{0},P1y:{1}, P2x:{2},P2y:{3}\", P1.X, P1.Y, P2.X, P2.Y);\n        }\n    }\n\n    public struct Circle\n    {\n        private Point _p;\n        private double _r;\n\n        public Point P { get { return _p; } }\n        public double R { get { return _r; } }\n\n        public Circle(Point p, double r)\n        {\n            _p = p;\n            _r = r;\n        }\n\n        public override string ToString()\n        {\n            return string.Format(\"px:{0},py:{1},r:{2}\", P.X, P.Y, R);\n        }\n    }\n\n    public struct Vector\n    {\n        private double _x;\n        private double _y;\n\n        public double X { get { return _x;} }\n        public double Y { get { return _y;} }\n\n        public Vector(double x, double y)\n        {\n            _x = x;\n            _y = y;\n        }\n\n        public double Norm()\n        {\n            return X * X + Y * Y;\n        }\n\n        public double Abs()\n        {\n            return Math.Sqrt(Norm());\n        }\n\n        public Vector Normalize()\n        {\n            double mag = Abs();\n            return new Vector(X * mag, Y * mag);\n        }\n\n        public static Vector operator +(Vector v1, Vector v2)\n        {\n            return new Vector(v1.X + v2.X, v1.Y + v2.Y);\n        }\n\n        public static Vector operator -(Vector v1, Vector v2)\n        {\n            return new Vector(v1.X - v2.X, v1.Y - v2.Y);\n        }\n\n        public static Vector operator *(Vector v, double k)\n        {\n            return new Vector(v.X * k, v.Y * k);\n        }\n\n        public static Vector operator *(double k, Vector v)\n        {\n            return v * k;\n        }\n\n        public static double Dot(Vector v1, Vector v2)\n        {\n            return v1.X * v2.X + v1.Y * v2.Y;\n        }\n\n        public static double Cross(Vector v1, Vector v2)\n        {\n            return v1.X * v2.Y - v1.Y * v2.X;\n        }\n\n        public static bool IsOrthogonal(Vector v1, Vector v2)\n        {\n            return Dot(v1, v2) == 0.0;\n        }\n\n        public static bool IsParallel(Vector v1, Vector v2)\n        {\n            return Cross(v1, v2) == 0.0;\n        }\n\n        public static Vector Project(Vector v, Vector onNormal)\n        {\n            // mag = |b|cos?? / |a|\n            //     = |a||b|cos?? / |a|^2\n            double mag = Dot(v, onNormal) / onNormal.Norm();\n            return new Vector(onNormal.X * mag, onNormal.Y * mag);\n        }\n\n        public static Vector Reflect(Vector v, Vector inNormal)\n        {\n            // TODO Unity????????¨????????????????????????????????????\n            Vector p = Project(v, inNormal);\n            return 2.0 * p - v;\n        }\n\n        public static Ccw CountrClockWise(Vector baseV, Vector v)\n        {\n            double cross = Cross(baseV, v);\n            if (cross > 0.0)\n                return Ccw.CounterClockwise;\n            else if (cross < 0.0)\n                return Ccw.Clockwise;\n            else if (Dot(baseV, v) < 0.0)\n                return Ccw.OnLineBack;\n            else if (baseV.Norm() < v.Norm())\n                return Ccw.OnLineFront;\n            else\n               return Ccw.OnSegment;\n        }\n\n        public override string ToString()\n        {\n            return string.Format(\"x:{0},y:{1}\", X, Y);\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Linq;\n\nclass C2\n{\n\tstatic int[] Read() => Console.ReadLine().Split().Select(int.Parse).ToArray();\n\tstatic void Main()\n\t{\n\t\tvar h = Read();\n\t\tint x1 = h[2] - h[0], y1 = h[3] - h[1];\n\n\t\tvar q = int.Parse(Console.ReadLine());\n\t\tvar r = new int[q].Select(_ => Read())\n\t\t\t.Select(v =>\n\t\t\t{\n\t\t\t\tint x2 = v[0] - h[0], y2 = v[1] - h[1];\n\t\t\t\treturn\n\t\t\t\t\tx1 * y2 > x2 * y1 ? \"COUNTER_CLOCKWISE\" :\n\t\t\t\t\tx1 * y2 < x2 * y1 ? \"CLOCKWISE\" :\n\t\t\t\t\tx1 * x2 < 0 || y1 * y2 < 0 ? \"ONLINE_BACK\" :\n\t\t\t\t\tMath.Abs(x1) < Math.Abs(x2) || Math.Abs(y1) < Math.Abs(y2) ? \"ONLINE_FRONT\" :\n\t\t\t\t\t\"ON_SEGMENT\";\n\t\t\t});\n\t\tConsole.WriteLine(string.Join(\"\\n\", r));\n\t}\n}\n\n"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Linq;\nusing System.Collections.Generic;\nusing static System.Console;\nusing System.Text;\nusing System.IO;\n\n\nnamespace AOJ\n{\n    using Vector = Point;\n    using Line = Segment;\n    using Polygon = List<Point>;\n\n    class Consts\n    {\n        public static readonly double EPS = 1e-10;\n    }\n    class Point\n    {\n        double x, y;\n        public double X { get { return this.x; } set { this.x = value; } }\n        public double Y { get { return this.y; } set { this.y = value; } }\n        public Point(double x = 0, double y = 0)\n        {\n            this.x = x;\n            this.y = y;\n        }\n\n        static public Point operator +(Point p1, Point p2) => new Point(p1.x + p2.x, p1.y + p2.y);\n        static public Point operator -(Point p1, Point p2) => new Point(p1.x - p2.x, p1.y - p2.y);\n        static public Point operator *(Point p, double a) => new Point(a * p.x, a * p.y);\n        static public Point operator *(double a, Point p) => p * a;\n        static public Point operator /(Point p, double a) => new Point(p.x / a, p.y / a);\n        static public bool operator <(Point p1, Point p2) => p1.x != p2.x ? p1.x < p2.x : p1.y < p2.y;\n        static public bool operator >(Point p1, Point p2) => p2 < p1;\n\n        static public bool operator ==(Point p1, Point p2) => (p1.x - p2.x) < Consts.EPS && (p1.y - p2.y) < Consts.EPS;\n        static public bool operator !=(Point p1, Point p2) => !(p1 == p2);\n\n        public double abs() => Math.Abs(norm());\n        public double norm() => this.x * this.x + this.y * this.y;\n        public double euclideannorm() => Math.Sqrt(norm());//ユークリッド距離\n\n        public override bool Equals(object obj)\n        {\n            if ((object)obj == null || this.GetType() != obj.GetType())\n            {\n                return false;\n            }\n            var c = (Point)obj;\n            return this == c;\n        }\n        public override int GetHashCode()\n        {\n            return this.x.GetHashCode() ^ this.y.GetHashCode();\n        }\n    }\n    struct Segment\n    {\n        public Point p1, p2;\n    }\n    class Circle\n    {\n        public Point c;\n        public double r;\n        public Circle(Point c, double r)\n        {\n            this.c = c;\n            this.r = r;\n        }\n    }\n\n    class VecCalc\n    {\n        static bool equals(double a, double b) => Math.Abs(a - b) < Consts.EPS;\n        //内積\n        static public double dot(Vector a, Vector b)\n        {\n            return a.X * b.X + a.Y * b.Y;\n        }\n        //外積\n        static public double cross(Vector a, Vector b)\n        {\n            return a.X * b.Y - a.Y * b.X;\n        }\n        //16.2 直行判定\n        static public bool isOrthogonal(Vector a, Vector b)\n        {\n            return equals(dot(a, b), 0.0);\n        }\n        static public bool isOrthogonal(Point a1, Point a2, Point b1, Point b2)\n        {\n            return isOrthogonal(a1 - a2, b1 - b2);\n        }\n        static public bool isOrthogonal(Segment s1, Segment s2)\n        {\n            return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n        }\n        //16.2 平行判定\n        static public bool isParallel(Vector a, Vector b)\n        {\n            return equals(cross(a, b), 0.0);\n        }\n        static public bool isParallel(Point a1, Point a2, Point b1, Point b2)\n        {\n            return isParallel(a1 - a2, b1 - b2);\n        }\n        static public bool isParallel(Segment s1, Segment s2)\n        {\n            return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n        }\n        //16.3 射影\n        static public Point project(Segment s, Point p)\n        {\n            Vector b = s.p2 - s.p1;\n            double r = dot(p - s.p1, b) / b.norm();\n            return s.p1 + b * r;\n        }\n        //16.4 反射\n        static public Point reflection(Segment s, Point p)\n        {\n            return 2 * project(s, p) - p;\n            //mid = project(s, p) - p;\n            //return mid + mid - p;\n        }\n        //16.5 距離\n        //2点間の距離\n        static public double getDistance(Point a, Point b)\n        {\n            return (a - b).abs();\n        }\n        //直線lと点pの距離\n        static public double getDistanceLP(Line l,Point p)\n        {\n            return Math.Abs(cross(l.p2 - l.p1, p - l.p1) / (l.p2 - l.p1).abs());\n        }\n        //線分sと点pの距離\n        static public double getDistanceSP(Segment s, Point p)\n        {\n            if (dot(s.p2 - s.p1, p - s.p1) < 0.0) return (p - s.p1).abs();\n            if (dot(s.p1 - s.p2, p - s.p2) < 0.0) return (p - s.p2).abs();\n            return getDistanceLP(s, p);\n        }\n        static public double getDistance(Segment s1, Segment s2)\n        {\n            if (false) return 0.0;\n            return Math.Min(\n                    Math.Min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n                    Math.Min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2))\n                );\n        }\n        //16.6 反時計回り\n        static public readonly int COUNTER_CLOCKWISE=1;\n        static public readonly int CLOCKWISE = 2;\n        static public readonly int ONLINE_BACK = 3;\n        static public readonly int ONLINE_FRONT = 4;\n        static public readonly int ON_SEGMENT = 5;\n        static public double ccw(Segment s, Point p)\n        {\n            var p1 = s.p2 - s.p1;\n            var p2 = p - s.p1;\n            var dot_ = dot(p1, p2);\n            var cross_ = cross(p1, p2);\n            if (equals(cross_, 0))//直線状\n            {\n                if (dot_ < 0)//逆方向\n                { return ONLINE_BACK; }\n                else//同方向\n                {\n                    if (p1.norm() < p2.norm())\n                    { return ONLINE_FRONT; }\n                    return ON_SEGMENT;\n                }\n            }\n            if (0 < cross_) return COUNTER_CLOCKWISE;//反時計\n            return CLOCKWISE;//時計\n        }\n    }\n    class Program\n    {\n        static public long[] Sarray() { return ReadLine().Trim().Split().Select(long.Parse).ToArray(); }\n        static public List<long> Slist() { return ReadLine().Split().Select(long.Parse).ToList(); }\n\n\n        static void Main(string[] args)\n        {\n            var p1p2 = Sarray();\n            var p1 = new Point(p1p2[0], p1p2[1]);\n            var p2 = new Point(p1p2[2], p1p2[3]);\n            var seg = new Segment() { p1 = p1, p2 = p2 };\n            var Q = Sarray()[0];\n            for (var i = 0; i < Q; ++i)\n            {\n                var pi = Sarray();\n                var p = new Point(pi[0], pi[1]);\n                var num = VecCalc.ccw(seg, p);\n                //WriteLine($\"{ans.X} {ans.Y}\");\n                var ans = string.Empty;\n                if (num == 1) ans = \"COUNTER_CLOCKWISE\";\n                if (num == 2) ans = \"CLOCKWISE\";\n                if (num == 3) ans = \"ONLINE_BACK\";\n                if (num == 4) ans = \"ONLINE_FRONT\";\n                if (num == 5) ans = \"ON_SEGMENT\";\n                WriteLine(ans);\n            }\n        }\n    }\n}\n"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Text.RegularExpressions;\nusing static System.Console;\nusing static System.Math;\nusing static MyIO;\nusing static MyUtil;\n\nusing static Geometory;\nusing Vector = Geometory.Point;\nusing Line = Geometory.Segment;\n\npublic class C\n{\n\tpublic static void Main() => (new Solver()).Solve();\n}\n\npublic class Solver\n{\n\tprivate string[] str = new string[]\n\t{\n\t\t\"ONLINE_FRONT\", \"CLOCKWISE\", \"ON_SEGMENT\", \"COUNTER_CLOCKWISE\", \"ONLINE_BACK\"\n\t};\n\n\tpublic void Solve()\n\t{\n\t\tvar p0 = new Point(GetDouble(), GetDouble());\n\t\tvar p1 = new Point(GetDouble(), GetDouble());\n\t\tint Q = GetInt();\n\t\tvar ans = new string[Q];\n\t\tfor(int i = 0; i < Q; i++)\n\t\t\tans[i] = str[2 + Ccw(p0, p1, new Point(GetDouble(), GetDouble()))];\n\n\t\tWriteLine(string.Join(\"\\n\", ans));\n\t}\n}\n\npublic static class Geometory\n{\n\tprivate const double EPS = 1e-10;\n\tpublic static bool Equals(double a, double b) => Math.Abs(a - b) < EPS;\n\n\tpublic class Point\n\t{\n\t\tpublic double X;\n\t\tpublic double Y;\t\t\n\t\tpublic Point(double x, double y)\n\t\t{\n\t\t\tX = x;\n\t\t\tY = y;\n\t\t}\n\t\n\t\tpublic static Point operator+(Point p, Point q) => new Point(p.X + q.X, p.Y + q.Y);\n\t\tpublic static Point operator-(Point p, Point q) => new Point(p.X - q.X, p.Y - q.Y);\n\t\tpublic static Point operator*(Point p, double a) => new Point(a * p.X, a * p.Y);\n\t\tpublic static Point operator*(double a, Point p) => new Point(a * p.X, a * p.Y);\n\t\tpublic static Point operator/(Point p, double a) => new Point(p.X / a, p.Y / a);\n\t}\n\n\tpublic class Segment\n\t{\n\t\tpublic Point P1;\n\t\tpublic Point P2;\n\t\tpublic Segment(Point p1, Point p2)\n\t\t{\n\t\t\tP1 = p1;\n\t\t\tP2 = p2;\n\t\t}\n\t}\n\n\tpublic static double Abs(Vector a) => Math.Sqrt(Norm(a));\n\tpublic static double Norm(Vector a) => a.X * a.X + a.Y * a.Y;\n\tpublic static double Dot(Vector a, Vector b) => a.X * b.X + a.Y * b.Y;\n\tpublic static double Cross(Vector a, Vector b) => a.X * b.Y - a.Y * b.X;\n\n\tpublic static bool IsOrthogonal(Vector a, Vector b) => Equals(Dot(a, b), 0.0);\n\tpublic static bool IsOrthogonal(Point a1, Point a2, Point b1, Point b2) => IsOrthogonal(a1 - a2, b1 - b2);\n\tpublic static bool IsOrthogonal(Segment s1, Segment s2) => Equals(Dot(s1.P2 - s1.P1, s2.P2 - s2.P1), 0.0);\n\tpublic static bool IsParallel(Vector a, Vector b) => Equals(Cross(a, b), 0.0);\n\tpublic static bool IsParallel(Point a1, Point a2, Point b1, Point b2) => IsParallel(a1 - a2, b1 - b2);\n\tpublic static bool IsParallel(Segment s1, Segment s2) => Equals(Cross(s1.P2 - s1.P1, s2.P2 - s2.P1), 0.0);\n\n\tpublic static Point Project(Segment s, Point p)\n\t{\n\t\tVector b = s.P2 - s.P1;\n\t\tdouble r = Dot(p - s.P1, b) / Norm(b);\n\t\treturn s.P1 + b * r;\n\t}\n\tpublic static Point Reflect(Segment s, Point p) => p + (Project(s, p) - p) * 2.0;\n\n\tpublic static double GetDistance(Point a, Point b) => Abs(a - b);\n\tpublic static double GetDistanceLP(Line l, Point p) => Math.Abs(Cross(l.P2 - l.P1, p - l.P1) / Abs(l.P2 - l.P1));\n\tpublic static double GetDistanceSP(Segment s, Point p)\n\t{\n\t\tif(Dot(s.P2 - s.P1, p - s.P1) < 0.0) return Abs(p - s.P1);\n\t\tif(Dot(s.P1 - s.P2, p - s.P2) < 0.0) return Abs(p - s.P2);\n\t\treturn GetDistanceLP(s, p);\n\t}\n\tpublic static double GetDistance(Segment s1, Segment s2)\n\t{\n\t\tif(Intersect(s1, s2)) return 0.0;\n\t\treturn Math.Min(Math.Min(GetDistanceSP(s1, s2.P1), GetDistanceSP(s1, s2.P2)),\n\t\t                Math.Min(GetDistanceSP(s2, s1.P1), GetDistanceSP(s2, s1.P2)));\n\t}\n\n\tpublic const int COUNTER_CLOCKWISE = 1;\n\tpublic const int CLOCKWISE = -1;\n\tpublic const int ONLINE_BACK = 2;\n\tpublic const int ONLINE_FRONT = -2;\n\tpublic const int ON_SEGMENT = 0;\n\tpublic static int Ccw(Point p0, Point p1, Point p2)\n\t{\n\t\tVector a = p1 - p0;\n\t\tVector b = p2 - p0;\n\t\tif(Cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\t\tif(Cross(a, b) < -EPS) return CLOCKWISE;\n\t\tif(Dot(a, b) < -EPS) return ONLINE_BACK;\n\t\tif(Norm(a) < Norm(b)) return ONLINE_FRONT;\n\t\treturn ON_SEGMENT;\n\t}\n\tpublic static bool Intersect(Point p1, Point p2, Point p3, Point p4)\n\t{\n\t\treturn (Ccw(p1, p2, p3) * Ccw(p1, p2, p4) <= 0 && \n\t\t        Ccw(p3, p4, p1) * Ccw(p3, p4, p2) <= 0);\n\t}\n\tpublic static bool Intersect(Segment s1, Segment s2) => Intersect(s1.P1, s1.P2, s2.P1, s2.P2);\n}\n\npublic static class MyIO\n{\n\tprivate static string[] args = null;\n\tprivate static int num = -1;\n\tprivate static int used = -1;\n\n\tprivate static string getArg()\n\t{\n\t\tif(used == num)\n\t\t{\n\t\t\targs = Console.ReadLine().Split(' ');\n\t\t\tnum = args.Length;\n\t\t\tused = 0;\n\t\t}\n\t\treturn args[used++];\n\t}\n\n\tpublic static int GetInt() => int.Parse(getArg());\n\tpublic static long GetLong() => long.Parse(getArg());\n\tpublic static double GetDouble() => double.Parse(getArg());\n\tpublic static decimal GetDecimal() => decimal.Parse(getArg());\n\tpublic static string GetString() => getArg();\n\tpublic static char GetChar() => getArg()[0];\n\tpublic static int[] GetInts(long N) => Enumerable.Range(0, (int)N).Select(_ => GetInt()).ToArray();\n\tpublic static long[] GetLongs(long N) => Enumerable.Range(0, (int)N).Select(_ => GetLong()).ToArray();\n\tpublic static double[] GetDoubles(long N) => Enumerable.Range(0, (int)N).Select(_ => GetDouble()).ToArray();\n\tpublic static decimal[] GetDecimals(long N) => Enumerable.Range(0, (int)N).Select(_ => GetDecimal()).ToArray();\n\tpublic static string[] GetStrings(long N) => Enumerable.Range(0, (int)N).Select(_ => GetString()).ToArray();\n}\n\npublic static class MyUtil\n{\n\tpublic static void chmax<T>(ref T x, T y) where T : IComparable<T>\n\t{\n\t\tif(x.CompareTo(y) < 0)\n\t\t\tx = y;\n\t}\n\n\tpublic static void chmin<T>(ref T x, T y) where T : IComparable<T>\n\t{\n\t\tif(x.CompareTo(y) > 0)\n\t\t\tx = y;\n\t}\n\n\tpublic static void swap<T>(ref T x, ref T y)\n\t{\n\t\tT tmp = x;\n\t\tx = y;\n\t\ty = tmp;\n\t}\n}\n"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Text;\n\nnamespace CGL_1_C_Counter_Clockwise\n{\n\tclass Program\n\t{\n\t\tstatic void Main ( string[] args )\n\t\t{\n\t\t\tint[] inputNum = Array.ConvertAll (Console.ReadLine ().Split (' '), int.Parse);\n\t\t\tint inputCount = int.Parse (Console.ReadLine ());\n\n\t\t\tStringBuilder output = new StringBuilder (inputCount * 18);\n\n\t\t\tVector2 point1 = new Vector2 (inputNum[0], inputNum[1]);\n\t\t\tVector2 point2 = new Vector2 (inputNum[2], inputNum[3]);\n\n\t\t\tfor (int lp = 0; lp < inputCount; lp++)\n\t\t\t{\n\t\t\t\tinputNum = Array.ConvertAll (Console.ReadLine ().Split (' '), int.Parse);\n\t\t\t\tVector2 point3 = new Vector2 (inputNum[0], inputNum[1]);\n\n\t\t\t\tint result = Vector2.PointState (point1, point2, point3);\n\n\t\t\t\tswitch (result)\n\t\t\t\t{\n\t\t\t\t\tcase Vector2.Counter_Clockwise: output.AppendLine (\"COUNTER_CLOCKWISE\"); break;\n\t\t\t\t\tcase Vector2.Clockwise: output.AppendLine (\"CLOCKWISE\"); break;\n\t\t\t\t\tcase Vector2.OnlineBack: output.AppendLine (\"ONLINE_BACK\"); break;\n\t\t\t\t\tcase Vector2.OnlineFront: output.AppendLine (\"ONLINE_FRONT\"); break;\n\t\t\t\t\tcase Vector2.OnSegment: output.AppendLine (\"ON_SEGMENT\"); break;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tConsole.Write (output);\n\t\t}\n\t}\n\n\n\tclass Vector2\n\t{\n\t\tpublic Vector2 ( decimal x, decimal y )\n\t\t{\n\t\t\tthis.X = x;\n\t\t\tthis.Y = y;\n\t\t}\n\n\t\tpublic decimal X { private set; get; }\n\t\tpublic decimal Y { private set; get; }\n\n\t\tpublic static Vector2 operator + ( Vector2 ob1, Vector2 ob2 )\n\t\t{\n\t\t\treturn new Vector2 (ob1.X + ob2.X, ob1.Y + ob2.Y);\n\t\t}\n\t\tpublic static Vector2 operator - ( Vector2 ob1, Vector2 ob2 )\n\t\t{\n\t\t\treturn new Vector2 (ob1.X - ob2.X, ob1.Y - ob2.Y);\n\t\t}\n\t\tpublic static Vector2 operator * ( Vector2 ob, decimal scalar )\n\t\t{\n\t\t\treturn new Vector2 (ob.X * scalar, ob.Y * scalar);\n\t\t}\n\n\t\tpublic decimal Length ()\n\t\t{\n\t\t\treturn X * X + Y * Y;\n\t\t}\n\t\tpublic static decimal DotProduct ( Vector2 ob1, Vector2 ob2 )\n\t\t{\n\t\t\treturn ob1.X * ob2.X + ob1.Y * ob2.Y;\n\t\t}\n\t\tpublic static decimal CrossProduct ( Vector2 ob1, Vector2 ob2 )\n\t\t{\n\t\t\treturn ob1.X * ob2.Y - ob1.Y * ob2.X;\n\t\t}\n\n\t\tpublic const int Counter_Clockwise = 1;\n\t\tpublic const int Clockwise = -1;\n\t\tpublic const int OnlineBack = 2;\n\t\tpublic const int OnlineFront = -2;\n\t\tpublic const int OnSegment = 0;\n\n\t\tpublic static int PointState ( Vector2 point1, Vector2 point2, Vector2 point3 )\n\t\t{\n\t\t\tVector2 line1 = point2 - point1;\n\t\t\tVector2 line2 = point3 - point1;\n\n\t\t\tdecimal crossProduct = CrossProduct (line1, line2);\n\n\t\t\tif (crossProduct > 0m)\n\t\t\t{\n\t\t\t\treturn Counter_Clockwise;\n\t\t\t}\n\t\t\telse if (crossProduct < 0m)\n\t\t\t{\n\t\t\t\treturn Clockwise;\n\t\t\t}\n\t\t\telse if (DotProduct (line1, line2) < 0m)\n\t\t\t{\n\t\t\t\treturn OnlineBack;\n\t\t\t}\n\t\t\telse if (line1.Length () < line2.Length ())\n\t\t\t{\n\t\t\t\treturn OnlineFront;\n\t\t\t}\n\n\t\t\treturn OnSegment;\n\t\t}\n\t}\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace ConsoleApplication1\n{\n    enum CCW { COUNTER_CLOCKWISE = 1, CLOCKWISE = -1, ONLINE_BACK = 2, ONLINE_FRONT = -2, ON_SEGMENT = 0 }\n\n    class Program\n    {\n        static readonly double EPS = 1E-10;\n\n        static void Main(string[] args)\n        {\n            double[] input = Array.ConvertAll(Console.ReadLine().Split(' '), double.Parse);\n            Pt a = new Pt(input[0], input[1]);\n            Pt b = new Pt(input[2], input[3]);\n\n            int q = int.Parse(Console.ReadLine());\n\n            StringBuilder sb = new StringBuilder();\n            for (int i = 0; i < q; i++)\n            {\n                input = Array.ConvertAll(Console.ReadLine().Split(' '), double.Parse);\n                Pt p = new Pt(input[0], input[1]);\n\n                sb.AppendLine(CheckCCW(a, b, p).ToString());\n            }\n            Console.Write(sb);\n        }\n\n        static CCW CheckCCW(Pt p0, Pt p1, Pt p2)\n        {\n            Pt a = p1 - p0;\n            Pt b = p2 - p0;\n\n            if (a.Cross(b) > EPS) return CCW.COUNTER_CLOCKWISE;\n            if (a.Cross(b) < -EPS) return CCW.CLOCKWISE;\n            if (a.Dot(b) < -EPS) return CCW.ONLINE_BACK;\n            if (a.Norm < b.Norm) return CCW.ONLINE_FRONT;\n            return CCW.ON_SEGMENT;\n        }\n    }\n\n    class Pt : IComparable<Pt>\n    {\n        static readonly double EPS = 1E-10;\n\n        internal double x, y;\n\n        public Pt(double x, double y)\n        {\n            this.x = x;\n            this.y = y;\n        }\n\n        public double Abs { get { return Math.Sqrt(Norm); } }\n        public double Norm { get { return x * x + y * y; } }\n\n        public double Dot(Pt p) { return x * p.x + y * p.y; }\n        public double Cross(Pt p) { return x * p.y - y * p.x; }\n\n        public static Pt operator +(Pt a, Pt b) { return new Pt(a.x + b.x, a.y + b.y); }\n        public static Pt operator -(Pt a, Pt b) { return new Pt(a.x - b.x, a.y - b.y); }\n        public static Pt operator *(Pt p, double d) { return new Pt(p.x * d, p.y * d); }\n        public static Pt operator /(Pt p, double d) { return new Pt(p.x / d, p.y / d); }\n        public static bool operator <(Pt a, Pt b) { return Math.Abs(a.x - b.x) > EPS ? a.x < b.x : a.y < b.y; }\n        public static bool operator >(Pt a, Pt b) { return Math.Abs(a.x - b.x) > EPS ? a.x > b.x : a.y > b.y; }\n        public static bool operator ==(Pt a, Pt b) { return Math.Abs(a.x - b.x) < EPS && Math.Abs(a.y - b.y) < EPS; }\n        public static bool operator !=(Pt a, Pt b) { return Math.Abs(a.x - b.x) >= EPS || Math.Abs(a.y - b.y) >= EPS; }\n\n        public int CompareTo(Pt other)\n        {\n            return x != other.x ? (int)(x - other.x) : (int)(y - other.y);\n        }\n\n        public override bool Equals(object obj)\n        {\n            Pt other = (Pt)obj;\n            return Math.Abs(x - other.x) < EPS && Math.Abs(y - other.y) < EPS;\n        }\n\n        public override int GetHashCode()\n        {\n            return x.GetHashCode() ^ y.GetHashCode();\n        }\n\n        public override string ToString()\n        {\n            return string.Format(\"{0:f10} {1:f10}\", x, y);\n        }\n    }\n\n    class Seg\n    {\n        internal Pt p1, p2;\n\n        public Seg(Pt a, Pt b)\n        {\n            p1 = a;\n            p2 = b;\n        }\n    }\n}"
  },
  {
    "language": "JavaScript",
    "code": "// Vector2d\nvar Vector2D = class Vector2D {\n\tconstructor(x,y){\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t}\n}\n\nVector2D.prototype.Init = function(x,y){\n\tthis.x = x;\n\tthis.y = y;\n}\n\n/*\n * v: Vector2D\n */\nfunction rotateVector90(v){\n\tvar r = new Vector2D();\n\tr.x = -v.y;\n\tr.y = v.x;\n\treturn r;\n}\n\n/*\n * get degree to radian return radian\n */\nfunction getDegreeToRadian(degree){\n\tvar pi = 3.14159265358979323846;\n\treturn degree * pi / 180;\n}\n\n/*\n * vec:Vector2D return Vector2D\n */\nfunction getRotateVector(vec,degree){\n\tvar radian = getDegreeToRadian(degree);\n\n\tvar sin = Math.sin(radian);\n\tvar cos = Math.cos(radian);\n\n\tvar r = new Vector2D();\n\tr.x = vec.x * cos - vec.y * sin;\n\tr.y = vec.x * sin + vec.y * cos;\n\n\treturn r;\n}\n\nfunction isEqualVectors(a,b){\n\treturn equalFloats(a.x - b.x,0) && equalFloats(a.y - b.y,0);\n}\n\n/**\n * vec:Vector2D\n * \n * return unitVector\n */\nfunction getUnitVector(vec){\n\tvar length = getVectorLength2D(vec);\n\tif(length > 0){\n\t\treturn getDivideVector(vec,length);\n\t}\n\treturn vec;\n}\n\n/**\n * return vector length\n * \n * vec:Vector2D\n */\nfunction getVectorLength2D(vec){\n\treturn Math.sqrt((vec.x * vec.x) + (vec.y * vec.y));\n}\n\nfunction getDivideVector(vec2D,length){\n\tvec2D.x = vec2D.x / length;\n\tvec2D.y = vec2D.y / length;\n\treturn vec2D;\n}\n\nfunction equalFloats(a,b){\n\tvar threshold = 1 / 8192;\n\treturn Math.abs(a - b) < threshold;\n}\n\nfunction isParallelVector(vectorA,vectorB){\n\tvar na = rotateVector90(vectorA);\n\treturn equalFloats(0,dotProduct2D(na,vectorB));\n}\n\nfunction subtractVector(vecA,vecB){\n\tvar vec = new Vector2D();\n\tvec.x = vecA.x - vecB.x;\n\tvec.y = vecA.y - vecB.y;\n\treturn vec;\n}\n\nfunction dotProduct2D(vecA,vecB){\n\treturn vecA.x * vecB.x + vecA.y * vecB.y;\n}\n\n/**\n * 外積\n * \n * @param vecA\n * @param vecB\n * @returns\n */\nfunction getCloss(vecA,vecB){\n\treturn vecA.x * vecB.y - vecA.y * vecB.x;;\n}\n\n/**\n * line segment\n * \n * point1:Vector2D point2:Vector2D\n */\nvar LineSegment2D = class LineSegment2D {\n\tconstructor(point1,point2){\n\t\tthis.point1 = point1;\n\t\tthis.point2 = point2;\n\t}\n}\n\nLineSegment2D.prototype.Init = function(point1,point2){\n\tthis.point1 = point1;\n\tthis.point2 = point2;\n}\n\n/*\n * Line Object\n */\nfunction Line(){\n\t// vector2D\n\tthis.base;\n\t// vector2D\n\tthis.direction\n}\n\nLine.prototype.Init = function(base,direction,color){\n\tthis.base = base;\n\tthis.direction = direction;\n}\n\n/**\n * Range\n */\nvar Range = class Range {\n\tconstructor(min,max){\n\t\tthis.min = min;\n\t\tthis.max = max;\n\t}\n}\n\nfunction getMaxMinRange(range1,range2){\n\tvar range = new Range();\n\trange.min = range1.min < range2.min ? range1.min : range2.min;\n\trange.max = range1.max < range2.max ? range2.max : range1.max;\n\treturn range;\n}\n\nfunction getSortRange(range){\n\tvar sorted = new Range(range.min,range.max);\n\tif(range.min > range.max){\n\t\tsorted.min = range.max;\n\t\tsorted.max = range.min;\n\t}\n\treturn sorted;\n}\n\nfunction getNegateVector(vector){\n\tvector.x = -vector.x;\n\tvector.y = -vector.y;\n\treturn vector;\n}\n\nfunction getAddVector(vecA,vecB){\n\treturn new Vector2D(vecA.x + vecB.x,vecA.y + vecB.y);\n}\n\n/**\n * segment:segment onto:Vector2D\n * \n * return Range\n */\nfunction getProjectSegment(segment,onto){\n\tvar ontoUnitVec = getUnitVector(onto);\n\n\tvar range = new Range();\n\trange.min = dotProduct2D(ontoUnitVec,segment.point1);\n\trange.max = dotProduct2D(ontoUnitVec,segment.point2);\n\n\trange = getSortRange(range);\n\treturn range;\n}\n\nfunction isOverLappingRanges(range1,range2){\n\treturn overLapping(range1.min,range1.max,range2.min,range2.max);\n}\n\nfunction projectVector(project,onto){\n\tvar d = dotProduct2D(onto,onto);\n\tconsole.log(\"d = \" + d);\n\n\tif(0 < d){\n\t    var dp = dotProduct2D(project,onto);\n\t    console.log(\"dp = \" + dp);\n\t    return multiplyVector(onto,dp / d);\n\t}\n\treturn onto;\n}\n\nfunction getNorm(vec){\n\treturn vec.x * vec.x + vec.y * vec.y;\n}\n\n/**\n * point class\n */\nvar Point2D = class Point2D {\n\tconstructor(x,y){\n\t\tthis.x = x;\n\t\tthis.y = y;\n\n\t}\n}\n\nfunction addPoint(point1,point2){\n\treturn new Point2D(point1.x + point2.x,point1.y + point2.y);\n}\n\nfunction subtractPoint(point1,point2){\n\treturn new Point2D(point1.x - point2.x,point1.y - point2.y);\n}\n\nfunction multiplyPoint(point,scalar){\n\treturn new Point2D(point.x * scalar,point.y * scalar);\n}\n\n/**\n * segment : LineSegment2D\n * point : Point\n */\nfunction getProjectPoint(segment,point){\n\tvar vec1 = new Vector2D(segment.point2.x - segment.point1.x,segment.point2.y - segment.point1.y);\n\tvar vec2 = new Vector2D(point.x - segment.point1.x,point.y - segment.point1.y);\n\tvar rate = dotProduct2D(vec2,vec1) / getNorm(vec1);\n\tvar vec3 = multiplyVector(vec1,rate);\n\tvar project = new Point2D(segment.point1.x + vec3.x,segment.point1.y + vec3.y);\n\treturn project; \n}\n\nfunction getReflectionPoint(segment,point){\n\tvar projection = getProjectPoint(segment,point);\n\t// pから射影点までのベクトル\n\tvar vec = subtractPoint(projection,point);\n\t// 2倍したものが射影点になる\n\tvar refrectionPoint = multiplyPoint(vec,2);\n\t// 始点を足す\n\treturn addPoint(refrectionPoint,point);\n}\n\nfunction multiplyVector(vec,scalar){\n\tvar temp = new Vector2D();\n\ttemp.x = vec.x * scalar;\n\ttemp.y = vec.y * scalar;\n\treturn temp;\n}\n\nfunction clampOnRange(x,min,max){\n\tif(x < min){\n\t\treturn min;\n\t}else if(x > max){\n\t\treturn max;\n\t}else{\n\t\treturn x;\n\t}\n}\n\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\n//var input = require('fs').readFileSync('input.txt', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\t\nvar nums = Arr[0].split(\" \").map(Number);\nvar p0 = new Point2D(nums[0],nums[1]);\nvar p1 = new Point2D(nums[2],nums[3]);\n\n// 消す\nArr.shift();\nArr.shift();\n\nArr.forEach(function(v){\n   var x = (v.split(\" \"))[0] - 0;\n   var y = (v.split(\" \"))[1] - 0;   \n   var vecA = new Vector2D(p0.x - p1.x,p0.y - p1.y);\n   var vecB = new Vector2D(p0.x - x,p0.y - y);\n   var closs = getCloss(vecA,vecB);\n   var dot = dotProduct2D(vecA,vecB);\n   var ans = \"ON_SEGMENT\";\n   \n   if(closs > Number.EPSILON){\n\t   ans = \"COUNTER_CLOCKWISE\";\n   }\n   else if(closs < -Number.EPSILON){\n\t   ans = \"CLOCKWISE\";\n   }\n   else if(dot < -Number.EPSILON){\n\t   ans = \"ONLINE_BACK\";\n   }\n   else if(getNorm(vecA) < getNorm(vecB)){\n\t   ans = \"ONLINE_FRONT\";\n   }\n   console.log(ans);\n});\n"
  },
  {
    "language": "Ruby",
    "code": "x0, y0, x1, y1 = gets.chomp.split.map(&:to_f)\nlen1 = (x1 - x0) ** 2 + (y1 - y0) ** 2\n \ngets.to_i.times{\n    x2, y2 = gets.chomp.split.map(&:to_f)\n    len2 = (x2 - x0) ** 2 + (y2 - y0) ** 2\n    yonline = (y1 - y0) / (x1 - x0) * (x2 - x0) + y0 if x0 != x1\n \n    arr = []\n    if x0 < x1\n        arr = [yonline, y2, (x1 - x0) * (x2 - x0)]\n    elsif x0 > x1\n        arr = [y2, yonline, (x1 - x0) * (x2 - x0)]\n    else\n        if y0 < y1\n            arr = [x2, x0, (y1 - y0) * (y2 - y0)]\n        else\n            arr = [x0, x2, (y1 - y0) * (y2 - y0)]\n        end\n    end\n \n    judge = \"\"\n    if arr[0] < arr[1]\n        judge = \"COUNTER_CLOCKWISE\"\n    elsif arr[0] > arr[1]\n        judge = \"CLOCKWISE\"\n    else\n        if arr[2] < 0\n            judge = \"ONLINE_BACK\"\n        else\n            if len1 < len2\n                judge = \"ONLINE_FRONT\"\n            else\n                judge = \"ON_SEGMENT\"\n            end\n        end\n    end\n    puts judge\n}\n\n"
  },
  {
    "language": "Ruby",
    "code": "x1, y1, x2, y2 = gets.split.map(&:to_i)\nu = (x2 - x1) + (y2 - y1) * 1i\ngets.to_i.times do\n  x, y = gets.split.map(&:to_i)\n  v = x - x1 + (y - y1) * 1i\n  d, c = (u.conj * v).rect\n  case\n  when c > 0\n    puts 'COUNTER_CLOCKWISE'\n  when c < 0\n    puts 'CLOCKWISE'\n  when d < 0\n    puts 'ONLINE_BACK'\n  when d > (u.conj * u).real\n    puts 'ONLINE_FRONT'\n  else\n    puts 'ON_SEGMENT'\n  end\nend"
  },
  {
    "language": "Ruby",
    "code": "def projecter(x, y, xp, yp)\n  return (xp * x + yp * y) / (x ** 2 + y ** 2), (yp * x - xp * y) / (x ** 2 + y ** 2)\nend\ndef main(input = STDIN)\n  x1, y1, x2, y2 = input.gets.split(\" \").map(&:to_r)\n  q = input.gets.to_i\n  x, y = (x2 - x1), (y2 - y1)\n  q.times do\n    xp, yp = input.gets.split(\" \").map(&:to_r)\n    a, b = projecter(x, y, xp - x1, yp - y1)\n    if b > 0\n      puts \"COUNTER_CLOCKWISE\"\n    elsif b < 0\n      puts \"CLOCKWISE\"\n    elsif a < 0\n      puts \"ONLINE_BACK\"\n    elsif a > 1\n      puts \"ONLINE_FRONT\"\n    else\n      puts \"ON_SEGMENT\"\n    end\n  end\nend\nmain"
  },
  {
    "language": "Ruby",
    "code": "x0, y0, x1, y1 = gets.chomp.split.map(&:to_f)\nlen1 = (x1 - x0) ** 2 + (y1 - y0) ** 2\n\ngets.to_i.times{\n    x2, y2 = gets.chomp.split.map(&:to_f)\n    len2 = (x2 - x0) ** 2 + (y2 - y0) ** 2\n    yonline = Rational((y1 - y0) * (x2 - x0) + (x1 - x0) * y0, x1 - x0)\n\n    arr = []\n    if x0 < x1\n        arr = [yonline, Rational(y2, 1), (x1 - x0) * (x2 - x0)]\n    elsif x0 > x1\n        arr = [Rational(y2, 1), yonline, (x1 - x0) * (x2 - x0)]\n    else\n        if y0 < y1\n            arr = [x2, x0, (y1 - y0) * (y2 - y0)]\n        else\n            arr = [x0, x2, (y1 - y0) * (y2 - y0)]\n        end\n    end\n    judge = \"\"\n    if arr[0] < arr[1]\n        judge = \"COUNTER_CLOCKWISE\"\n    elsif arr[0] > arr[1]\n        judge = \"CLOCKWISE\"\n    else\n        if arr[2] < 0\n            judge = \"ONLINE_BACK\"\n        else\n            if len1 < len2\n                judge = \"ONLINE_FRONT\"\n            else\n                judge = \"ON_SEGMENT\"\n            end\n        end\n    end\n    puts judge\n}\n\n"
  },
  {
    "language": "Ruby",
    "code": "x1, y1, x2, y2 = gets.split.map(&:to_i)\nu = (x2 - x1) + (y2 - y1) * 1i\ngets.to_i.times do\n  x, y = gets.split.map(&:to_i)\n  v = x - x1 + (y - y1) * 1i\n  d = (u.conj * v).imag\n  case\n  when d > 0\n    puts 'COUNTER_CLOCKWISE'\n  when d < 0\n    puts 'CLOCKWISE'\n  else\n    d = (v / u).real\n    case\n    when d < 0\n      puts 'ONLINE_BACK'\n    when d <= 1\n      puts 'ON_SEGMENT'\n    else\n      puts 'ONLINE_FRONT'\n    end\n  end\nend"
  },
  {
    "language": "Ruby",
    "code": "require 'matrix'\n\np0x, p0y, p1x, p1y = gets.split.map &:to_i\np0 = Vector[p0x, p0y]\np1 = Vector[p1x, p1y]\n\nq = gets.to_i\n\ndef cross(p1, p2)\n  return p1[0] * p2[1] - p1[1] * p2[0]\nend\n\nq.times do\n  p2x, p2y = gets.split.map &:to_i\n  p2 = Vector[p2x, p2y]\n  if cross(p2-p1, p0-p1) > 0\n    puts \"COUNTER_CLOCKWISE\"\n  elsif cross(p2-p1, p0-p1) < 0\n    puts \"CLOCKWISE\"\n  elsif (p0-p1).inner_product(p2-p1) < 0\n    puts \"ONLINE_FRONT\"\n  elsif (p0-p1).norm >= (p2-p1).norm\n    puts \"ON_SEGMENT\"\n  else\n    puts \"ONLINE_BACK\"\n  end\nend"
  },
  {
    "language": "Ruby",
    "code": "class Point\n  attr_accessor :x, :y\n  def initialize(x, y)\n    @x = x\n    @y = y\n  end\n\n  def -(p)\n    Point.new(x - p.x, y - p.y)\n  end\n\n  def norm\n    @x * @x + @y * @y\n  end\nend\n\ndef dot(a, b)\n  a.x * b.x + a.y * b.y\nend\n\ndef cross(a, b)\n  a.x * b.y - a.y * b.x\nend\n\nSegment = Struct.new('Segment', :p1, :p2)\n\ndef is_orthogonal?(s1, s2)\n  dot(s1.p2 - s1.p1, s2.p2 - s2.p1).zero?\nend\n\ndef is_parallel?(s1, s2)\n  cross(s1.p2 - s1.p1, s2.p2 - s2.p1).zero?\nend\n\ndef ccw(p0, p1, p2)\n  a = p1 - p0\n  b = p2 - p0\n  return \"COUNTER_CLOCKWISE\" if cross(a, b) > 0\n  return \"CLOCKWISE\" if cross(a, b) < 0\n  return \"ONLINE_BACK\" if dot(a, b) < 0\n  return \"ONLINE_FRONT\" if a.norm < b.norm\n  return \"ON_SEGMENT\"\nend\n\nx0, y0, x1, y1 = gets.split.map(&:to_i)\np0 = Point.new(x0, y0)\np1 = Point.new(x1, y1)\nn = gets.to_i\nn.times do\n  x2, y2 = gets.split.map(&:to_i)\n  p2 = Point.new(x2, y2)\n  puts ccw(p0, p1, p2)\nend\n\n"
  },
  {
    "language": "Ruby",
    "code": "x1, y1, x2, y2 = gets.split.map(&:to_i)\nu = (x2 - x1) + (y2 - y1) * 1i\ngets.to_i.times do\n  x, y = gets.split.map(&:to_i)\n  v = x - x1 + (y - y1) * 1i\n  d = (u.conj * v).imag\n  case\n  when d > 0\n    puts 'COUNTER_CLOCKWISE'\n  when d < 0\n    puts 'CLOCKWISE'\n  else\n    d = (v / u).real\n    case\n    when d < 0\n      puts 'ONLINE_BACK'\n    when d < 1\n      puts 'ON_SEGMENT'\n    else\n      puts 'ONLINE_FRONT'\n    end\n  end\nend"
  },
  {
    "language": "Ruby",
    "code": "x0, y0, x1, y1 = gets.split.map(&:to_f)\n\nv0x = x1 - x0\nv0y = y1 - y0\nr0 = v0x*v0x+v0y*v0y\nq = gets.to_i\nq.times{\n  x, y = gets.split.map(&:to_f)\n  v1x = x - x0\n  v1y = y - y0\n  r1 = v1x*v1x+v1y*v1y\n  cross_product = v0x * v1y - v0y * v1x\n  if cross_product > 0\n    puts \"COUNTER_CLOCKWISE\"\n  elsif cross_product < 0\n    puts \"CLOCKWISE\"\n  else\n    if v0x * v1x < 0 || v0y * v1y < 0\n      puts \"ONLINE_BACK\"\n    else\n      if r0 < r1\n        puts \"ONLINE_FRONT\"\n      else\n        puts \"ON_SEGMENT\"\n      end\n    end\n  end\n}"
  },
  {
    "language": "Ruby",
    "code": "x0, y0, x1, y1 = gets.chomp.split.map(&:to_f)\nlen1 = (x1 - x0) ** 2 + (y1 - y0) ** 2\n\ngets.to_i.times{\n    x2, y2 = gets.chomp.split.map(&:to_f)\n    len2 = (x2 - x0) ** 2 + (y2 - y0) ** 2\n    yonline = Rational((y1 - y0) * (x2 - x0) + (x1 - x0) * y0, x1 - x0) if x0 != x1\n\n    arr = []\n    if x0 < x1\n        arr = [yonline, Rational(y2, 1), (x1 - x0) * (x2 - x0)]\n    elsif x0 > x1\n        arr = [Rational(y2, 1), yonline, (x1 - x0) * (x2 - x0)]\n    else\n        if y0 < y1\n            arr = [x2, x0, (y1 - y0) * (y2 - y0)]\n        else\n            arr = [x0, x2, (y1 - y0) * (y2 - y0)]\n        end\n    end\n    judge = \"\"\n    if arr[0] < arr[1]\n        judge = \"COUNTER_CLOCKWISE\"\n    elsif arr[0] > arr[1]\n        judge = \"CLOCKWISE\"\n    else\n        if arr[2] < 0\n            judge = \"ONLINE_BACK\"\n        else\n            if len1 < len2\n                judge = \"ONLINE_FRONT\"\n            else\n                judge = \"ON_SEGMENT\"\n            end\n        end\n    end\n    puts judge\n}\n\n"
  },
  {
    "language": "Ruby",
    "code": "x0, y0, x1, y1 = gets.split.map(&:to_f)\n\nv0x = x1 - x0\nv0y = y1 - y0\n\nq = gets.to_i\nq.times{\n  x, y = gets.split.map(&:to_f)\n  v1x = x - x0\n  v1y = y - y0\n  cross_product = v0x * v1y - v0y * v1x\n  if cross_product > 0\n    puts \"COUNTER_CLOCKWISE\"\n  elsif cross_product < 0\n    puts \"CLOCKWISE\"\n  else\n    if v0x * v1x < 0 || v0y * v1y < 0\n      puts \"ONLINE_BACK\"\n    else\n      if v0x > v1x\n        puts \"ON_SEGMENT\"\n      else\n        puts \"ONLINE_FRONT\"\n      end\n    end\n  end\n}"
  },
  {
    "language": "Ruby",
    "code": "x0, y0, x1, y1 = gets.split.map(&:to_f)\n\nv0x = x1 - x0\nv0y = y1 - y0\n\nq = gets.to_i\nq.times{\n  x, y = gets.split.map(&:to_f)\n  v1x = x - x0\n  v1y = y - y0\n  cross_product = v0x * v1y - v0y * v1x\n  if cross_product > 0\n    puts \"COUNTER_CLOCKWISE\"\n  elsif cross_product < 0\n    puts \"CLOCKWISE\"\n  else\n    if v0x * v1x < 0 || v0y * v1y < 0\n      puts \"ONLINE_BACK\"\n    else\n      if v0x < v1x\n        puts \"ONLINE_FRONT\"\n      else\n        puts \"ON_SEGMENT\"\n      end\n    end\n  end\n}"
  },
  {
    "language": "Ruby",
    "code": "require 'complex'\n\n# Complex * Complex -> Double                                                          \n\ndef dot(c1, c2)\n  (c1.conj * c2).real\nend\n\n# Complex * Complex -> Double                                                          \ndef cross(c1, c2)\n  (c1.conj * c2).imag\nend\n\n# Complex * Complex * Complex -> Complex                                               \n# return the proj of vector p0p to vector p0p1                                         \ndef proj(p0, p1, p)\n  (p1 - p0) * dot(p1 - p0, p - p0) / ((p1 - p0).abs ** 2) + p0\nend\n\n\ndef sign d\n  eps = 1e-8\n  d < -eps ? -1 : (d > eps ? 1 : 0)\nend\n\n# Complex * Complex * Complex -> Bool                                                  \n# Return true if Point q is on segment p1p2                                            \n# otherwise return false                                                               \ndef on_seg(p1, p2, q)\n  sign(cross(p1 - q, p2 - q)) == 0 &&\n    sign(dot(p1 - q, p2 - q)) < 0\nend\n\ndef direct(p0, p1, p2)\n  d = cross(p1 - p0, p2 - p0)\n  if sign(d) == 1\n    :COUNTER_CLOCKWISE\n  elsif sign(d) == -1\n    :CLOCKWISE\n  else\n    if on_seg(p2, p1, p0)\n      :ONLINE_BACK\n    elsif on_seg(p0, p2, p1)\n      :ONLINE_FRONT\n    else\n      :ON_SEGMENT\n    end\n  end  \nend\n\ndef main\n  xp0, yp0, xp1, yp1 = gets.chomp.split(/\\s/).collect { |x| x.to_f}\n  q = gets.chomp.to_i\n  (1..q).each do |ca|\n    p0 = Complex(xp0, yp0)\n    p1 = Complex(xp1, yp1)\n    x, y = gets.chomp.split(/\\s/).collect { |x| x.to_f}\n    p = Complex(x, y)\n    puts direct(p0, p1, p).to_s\n  end\nend\n\nmain"
  },
  {
    "language": "Go",
    "code": "package main\n\nimport (\n\t\"strings\"\n\t\"fmt\"\n\t\"bufio\"\n\t\"strconv\"\n\t\"math\"\n\t\"os\"\n)\n\n// print\nfunc p(input interface{}) {\n\tfmt.Println(input)\n}\n\n// test\nfunc Test_solve() {\n\tinput := `\n0 0 2 0\n5\n-1 1\n-1 -1\n-1 0\n0 0\n3 0\n\n`\n\tinput = strings.Trim(input, \"\\n\")\n\n\tsolve(bufio.NewScanner(strings.NewReader(input)))\n}\n\n//\nfunc subVector(p1, p2 []float64) []float64 {\n\treturn []float64{\n\t\tp1[0] - p2[0],\n\t\tp1[1] - p2[1],\n\t}\n}\n\n//\nfunc dotVector(p1, p2 []float64) float64{\n\treturn p1[0] * p2[0] + p1[1] * p2[1]\n}\n\n//\nfunc crossVector(p1, p2 []float64) float64{\n\treturn p1[0] * p2[1] - p1[1] * p2[0]\n}\n\n//\nfunc absVector(p []float64) float64 {\n\treturn math.Sqrt(p[0] * p[0] + p[1] * p[1])\n}\n\n//\nfunc norrmalize(p []float64) float64 {\n\treturn p[0] * p[0] + p[1] * p[1]\n}\n\n//\n// 1: p1-p2より反時計周り側にp3\n// 2: p1-p2より時計周り側にp3\n// 3: p1-p2直線上、p2の先にp3\n// 4: p1-p2直線上、p1の前にp3\n// 5: p1-p2線分上にp3\nfunc checkClockWise(p1, p2, p3 []float64) int {\n\tp1p2 := subVector(p2, p1)\n\tp1p3 := subVector(p3, p1)\n\tif crossVector(p1p2, p1p3) > 0.0 {\n\t\treturn 1\n\t} else if crossVector(p1p2, p1p3) < 0.0 {\n\t\treturn 2\n\t} else if dotVector(p1p2, p1p3) < 0.0 {\n\t\treturn 4\n\t} else if norrmalize(p1p2) < norrmalize(p1p3) {\n\t\treturn 3\n\t}\n\treturn 5\n}\n\n// solve\nfunc solve(sc *bufio.Scanner) {\n\tsc.Scan()\n\telements := strings.Split(sc.Text(), \" \")\n\tp1 := make([]float64, 2)\n\tp2 := make([]float64, 2)\n\n\tpStr, _ := strconv.Atoi(elements[0])\n\tp1[0] = float64(pStr)\n\tpStr, _ = strconv.Atoi(elements[1])\n\tp1[1] = float64(pStr)\n\tpStr, _ = strconv.Atoi(elements[2])\n\tp2[0] = float64(pStr)\n\tpStr, _ = strconv.Atoi(elements[3])\n\tp2[1] = float64(pStr)\n\n\tsc.Scan()\n\tn, _ := strconv.Atoi(sc.Text())\n\n\tfor i := 0; i < n; i++ {\n\t\tsc.Scan()\n\t\telements = strings.Split(sc.Text(), \" \")\n\n\t\tp3 := make([]float64, 2)\n\n\t\tpStr, _ := strconv.Atoi(elements[0])\n\t\tp3[0] = float64(pStr)\n\t\tpStr, _ = strconv.Atoi(elements[1])\n\t\tp3[1] = float64(pStr)\n\n\t\tresult := checkClockWise(p1, p2, p3)\n\n\t\tword := \"\"\n\t\tswitch result {\n\t\tcase 1: word = \"COUNTER_CLOCKWISE\"\n\t\tcase 2: word = \"CLOCKWISE\"\n\t\tcase 3: word = \"ONLINE_FRONT\"\n\t\tcase 4: word = \"ONLINE_BACK\"\n\t\tcase 5: word = \"ON_SEGMENT\"\n\t\t}\n\n\t\tfmt.Printf(\"%s\\n\", word)\n\t}\n}\n\n// main\nfunc main() {\n\n\t//Test_solve()\n\tsolve(bufio.NewScanner(os.Stdin))\n}\n\n"
  },
  {
    "language": "Go",
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strconv\"\n)\n\nvar scanner = bufio.NewScanner(os.Stdin)\n\nfunc nextString() string {\n\tscanner.Scan()\n\treturn scanner.Text()\n}\n\nfunc nextInt() int {\n\tn, err := strconv.Atoi(nextString())\n\tif err != nil {\n\t\tfmt.Printf(\"strconv.Atoi failed: %v\\n\", err)\n\t}\n\treturn n\n}\n\nfunc nextFloat64() (float64, error) {\n\treturn strconv.ParseFloat(nextString(), 64)\n}\n\nfunc norm2(x, y float64) float64 {\n\treturn x*x + y*y\n}\n\nfunc crossProd(x1, y1, x2, y2 float64) float64 {\n\treturn x1*y2 - x2*y1\n}\n\nfunc lte(x1, y1, x2, y2 float64) bool {\n\tif x1 == x2 {\n\t\treturn y1 <= y2\n\t}\n\treturn x1 <= x2\n}\n\nfunc main() {\n\tscanner.Split(bufio.ScanWords)\n\n\tp0x, _ := nextFloat64()\n\tp0y, _ := nextFloat64()\n\tp1x, _ := nextFloat64()\n\tp1y, _ := nextFloat64()\n\n\tp1x -= p0x\n\tp1y -= p0y\n\n\tnQueries := nextInt()\n\tfor i := 0; i < nQueries; i++ {\n\t\tp2x, _ := nextFloat64()\n\t\tp2y, _ := nextFloat64()\n\t\tp2x -= p0x\n\t\tp2y -= p0y\n\n\t\tcross := crossProd(p1x, p1y, p2x, p2y)\n\t\t// fmt.Println(cross)\n\t\tif cross > 0 {\n\t\t\tfmt.Println(\"COUNTER_CLOCKWISE\")\n\t\t} else if cross < 0 {\n\t\t\tfmt.Println(\"CLOCKWISE\")\n\t\t} else {\n\t\t\tif (lte(0, 0, p2x, p2y) && lte(p2x, p2y, p1x, p1y)) || (lte(p1x, p1y, p2x, p2y) && lte(p2x, p2y, 0, 0)) {\n\t\t\t\tfmt.Println(\"ON_SEGMENT\")\n\t\t\t} else if (lte(0, 0, p1x, p1y) && lte(p1x, p1y, p2x, p2y)) || (lte(p2x, p2y, p1x, p1y) && lte(p1x, p1y, 0, 0)) {\n\t\t\t\tfmt.Println(\"ONLINE_FRONT\")\n\t\t\t} else if (lte(p2x, p2y, 0, 0) && lte(0, 0, p1x, p1y)) || (lte(p1x, p1y, 0, 0) && lte(0, 0, p2x, p2y)) {\n\t\t\t\tfmt.Println(\"ONLINE_BACK\")\n\t\t\t}\n\t\t}\n\t}\n}\n\n"
  },
  {
    "language": "Go",
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"math\"\n\t\"math/cmplx\"\n\t\"os\"\n\t\"strconv\"\n)\n\nfunc getScanner(fp *os.File) *bufio.Scanner {\n\tscanner := bufio.NewScanner(fp)\n\tscanner.Split(bufio.ScanWords)\n\tscanner.Buffer(make([]byte, 1000005), 1000005)\n\treturn scanner\n}\nfunc getNextString(scanner *bufio.Scanner) string {\n\tscanner.Scan()\n\treturn scanner.Text()\n}\nfunc getNextInt(scanner *bufio.Scanner) int {\n\ti, _ := strconv.Atoi(getNextString(scanner))\n\treturn i\n}\nfunc getNextInt64(scanner *bufio.Scanner) int64 {\n\ti, _ := strconv.ParseInt(getNextString(scanner), 10, 64)\n\treturn i\n}\nfunc getNextUint64(scanner *bufio.Scanner) uint64 {\n\ti, _ := strconv.ParseUint(getNextString(scanner), 10, 64)\n\treturn i\n}\nfunc getNextFloat64(scanner *bufio.Scanner) float64 {\n\ti, _ := strconv.ParseFloat(getNextString(scanner), 64)\n\treturn i\n}\nfunc main() {\n\tfp := os.Stdin\n\twfp := os.Stdout\n\tcnt := 0\n\tif os.Getenv(\"MASPY\") == \"ますピ\" {\n\t\tfp, _ = os.Open(os.Getenv(\"BEET_THE_HARMONY_OF_PERFECT\"))\n\t\tcnt = 1\n\t}\n\tif os.Getenv(\"MASPYPY\") == \"ますピッピ\" {\n\t\twfp, _ = os.Create(os.Getenv(\"NGTKANA_IS_GENIUS10\"))\n\t}\n\tscanner := getScanner(fp)\n\twriter := bufio.NewWriter(wfp)\n\tsolve(scanner, writer)\n\tfor i := 0; i < cnt; i++ {\n\t\tfmt.Fprintln(writer, \"-----------------------------------\")\n\t\tsolve(scanner, writer)\n\t}\n\twriter.Flush()\n}\nfunc solve(scanner *bufio.Scanner, writer *bufio.Writer) {\n\tx1 := getNextFloat64(scanner)\n\ty1 := getNextFloat64(scanner)\n\tx2 := getNextFloat64(scanner)\n\ty2 := getNextFloat64(scanner)\n\n\tv := complex(x2-x1, y2-y1)\n\tr, th := cmplx.Polar(v)\n\tq := getNextInt(scanner)\n\teps := 1e-10\n\tfor i := 0; i < q; i++ {\n\t\tx := getNextFloat64(scanner) - x1\n\t\ty := getNextFloat64(scanner) - y1\n\t\tvv := rotate(complex(x, y), -th)\n\t\tif imag(vv) > eps {\n\t\t\tfmt.Fprintln(writer, \"COUNTER_CLOCKWISE\")\n\t\t\tcontinue\n\t\t}\n\t\tif imag(vv) < -eps {\n\t\t\tfmt.Fprintln(writer, \"CLOCKWISE\")\n\t\t\tcontinue\n\t\t}\n\t\tr2, th2 := cmplx.Polar(vv)\n\t\tif math.Abs(th2) > eps {\n\t\t\tfmt.Fprintln(writer, \"ONLINE_BACK\")\n\t\t\tcontinue\n\t\t}\n\t\tif r2 > r+eps {\n\t\t\tfmt.Fprintln(writer, \"ONLINE_FRONT\")\n\t\t\tcontinue\n\t\t}\n\t\tfmt.Fprintln(writer, \"ON_SEGMENT\")\n\t}\n}\n\nfunc rotate(v complex128, theta float64) complex128 {\n\tr, th := cmplx.Polar(v)\n\tth += theta\n\treturn cmplx.Rect(r, th)\n}\n\n"
  },
  {
    "language": "OCaml",
    "code": "module Point = struct\n\n  type t = { x : float; y : float }\n\n  let make x y = { x; y }\n\n  let equal a b = abs_float (a.x -. b.x) < 1e-10 && abs_float (a.y -. b.y) < 1e-10\n\n  let sum a b = { x = a.x +. b.x; y = a.y +. b.y }\n\n  let diff a b = { x = a.x -. b.x; y = a.y -. b.y }\n\n  let multi p k = { x = p.x *. k; y = p.y *. k }\n\n  let div p k = { x = p.x /. k; y = p.y /. k }\n\n  let norm p = p.x *. p.x +. p.y *. p.y\n\n  let abs p = norm p |> sqrt\n\n  let dot a b = a.x *. b.x +. a.y *. b.y\n\n  let cross a b = a.x *. b.y -. a.y *. b.x\n\n  let project p1 p2 p =\n    let base = diff p2 p1 in\n    dot (diff p p1) base /. norm base\n    |> multi base\n    |> sum p1\n\n  let reflect p1 p2 p =\n    multi (diff (project p1 p2 p) p) 2.\n    |> sum p\n\nend\n\nopen Point\n\nlet eps = 1e-10\n\nlet ccw p0 p1 p2 =\n  let a = diff p1 p0 in\n  let b = diff p2 p0 in\n  let c = cross a b in\n  if c > eps then \"COUNTER_CLOCKWISE\"\n  else if c < (-. eps) then \"CLOCKWISE\"\n  else if dot a b < (-. eps) then \"ONLINE_BACK\"\n  else if norm a < norm b then \"ONLINE_FRONT\"\n  else \"ON_SEGMENT\"\n\nlet () =\n  let x0, y0, x1, y1 = Scanf.scanf \"%f %f %f %f \" (fun a b c d -> a,b,c,d) in\n  let p0 = make x0 y0 in\n  let p1 = make x1 y1 in\n  let q = Scanf.scanf \"%d \" (fun i -> i) in\n  for _ = 0 to q - 1 do\n    let x, y = Scanf.scanf \"%f %f \" (fun x y -> x,y) in\n    make x y |> ccw p0 p1 |> print_endline\n  done"
  },
  {
    "language": "OCaml",
    "code": "let () =\n  let cross (x0,y0) (x1,y1) = x0*.y1-.x1*.y0 and\n      inner (x0,y0) (x1,y1) = x0*.x1+.y0*.y1 and\n      norm (x,y) = x*.x+.y*.y\n  in\n  let (px0,py0,px1,py1) = Scanf.scanf \" %f %f %f %f\" (fun w x y z -> (w,x,y,z)) and\n      n = read_int () in\n  let v0 = (px1-.px0, py1-.py0) in\n  let rec read = function\n      0 -> ()\n    | i ->\n       let (px2,py2) = Scanf.scanf \" %f %f\" (fun x y -> (x,y)) in\n       let v1 = (px2-.px0, py2-.py0) in\n       if cross v0 v1 > (1e-10) then print_endline \"COUNTER_CLOCKWISE\"\n       else if cross v0 v1 < -.(1e-10) then print_endline \"CLOCKWISE\"\n       else if inner v0 v1 < -.(1e-10) then print_endline \"ONLINE_BACK\"\n       else if norm v0 < norm v1 then print_endline \"ONLINE_FRONT\"\n       else print_endline \"ON_SEGMENT\";\n       read (i-1)\n  in read n\n;;"
  },
  {
    "language": "OCaml",
    "code": "let () =\n  let cross (x0,y0) (x1,y1) = x0*.y1-.x1*.y0 and\n      inner (x0,y0) (x1,y1) = x0*.x1+.y0*.y1 and\n      norm (x,y) = x*.x+.y*.y\n  in\n  let (px0,py0,px1,py1) = Scanf.scanf \" %f %f %f %f\\n\" (fun w x y z -> (w,x,y,z)) and\n      n = Scanf.scanf \"%d\\n\" (fun x -> x) in\n  let v0 = (px1-.px0, py1-.py0) in\n  let rec read = function\n      0 -> ()\n    | i ->\n       let (px2,py2) = Scanf.scanf \" %f %f\\n\" (fun x y -> (x,y)) in\n       let v1 = (px2-.px0, py2-.py0) in\n       if cross v0 v1 > (1e-10) then print_endline \"COUNTER_CLOCKWISE\"\n       else if cross v0 v1 < -.(1e-10) then print_endline \"CLOCKWISE\"\n       else if inner v0 v1 < -.(1e-10) then print_endline \"ONLINE_BACK\"\n       else if norm v0 < norm v1 then print_endline \"ONLINE_FRONT\"\n       else print_endline \"ON_SEGMENT\";\n       read (i-1)\n  in read n\n;;"
  },
  {
    "language": "OCaml",
    "code": "module Point = struct\n\n  type t = { x : float; y : float }\n\n  let make x y = { x; y }\n\n  let equal a b = abs_float (a.x -. b.x) < 1e-10 && abs_float (a.y -. b.y) < 1e-10\n\n  let sum a b = { x = a.x +. b.x; y = a.y +. b.y }\n\n  let diff a b = { x = a.x -. b.x; y = a.y -. b.y }\n\n  let multi p k = { x = p.x *. k; y = p.y *. k }\n\n  let div p k = { x = p.x /. k; y = p.y /. k }\n\n  let norm p = p.x *. p.x +. p.y *. p.y\n\n  let abs p = norm p |> sqrt\n\n  let dot a b = a.x *. b.x +. a.y *. b.y\n\n  let cross a b = a.x *. b.y -. a.y *. b.x\n\n  let project p1 p2 p =\n    let base = diff p2 p1 in\n    dot (diff p p1) base /. norm base\n    |> multi base\n    |> sum p1\n\n  let reflect p1 p2 p =\n    multi (diff (project p1 p2 p) p) 2.\n    |> sum p\n\nend\n\nopen Point\n\nlet eps = 1e-10\n\nlet ccw p1 p2 p =\n  let a = diff p1 p in\n  let b = diff p2 p in\n  let c = cross a b in\n  if c > eps then \"COUNTER_CLOCKWISE\"\n  else if c < (-. eps) then \"CLOCKWISE\"\n  else if dot a b < (-. eps) then \"ONLINE_BACK\"\n  else if norm a < norm b then \"ONLINE_FRONT\"\n  else \"ON_SEGMENT\"\n\nlet () =\n  let x1, y1, x2, y2 = Scanf.scanf \"%f %f %f %f \" (fun a b c d -> a,b,c,d) in\n  let p1 = make x1 y1 in\n  let p2 = make x2 y2 in\n  let q = Scanf.scanf \"%d \" (fun i -> i) in\n  for _ = 0 to q - 1 do\n    let x, y = Scanf.scanf \"%f %f \" (fun x y -> x,y) in\n    make x y |> ccw p1 p2 |> print_endline\n  done"
  },
  {
    "language": "OCaml",
    "code": "let () =\n  let cross (x0,y0) (x1,y1) = x0*.y1-.x1*.y0 and\n      inner (x0,y0) (x1,y1) = x0*.x1+.y0*.y1 and\n      norm (x,y) = x*.x+.y*.y\n  in\n  let (px0,py0,px1,py1) = Scanf.scanf \" %f %f %f %f\\n\" (fun w x y z -> (w,x,y,z)) and\n      n = read_int () in\n  let v0 = (px1-.px0, py1-.py0) in\n  let rec read = function\n      0 -> ()\n    | i ->\n       let (px2,py2) = Scanf.scanf \" %f %f\\n\" (fun x y -> (x,y)) in\n       let v1 = (px2-.px0, py2-.py0) in\n       if cross v0 v1 > (1e-10) then print_endline \"COUNTER_CLOCKWISE\"\n       else if cross v0 v1 < -.(1e-10) then print_endline \"CLOCKWISE\"\n       else if inner v0 v1 < -.(1e-10) then print_endline \"ONLINE_BACK\"\n       else if norm v0 < norm v1 then print_endline \"ONLINE_FRONT\"\n       else print_endline \"ON_SEGMENT\";\n       read (i-1)\n  in read n\n;;"
  },
  {
    "language": "D",
    "code": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.math;\nimport std.range;\nimport std.stdio;\nimport std.string;\nimport std.typecons;\n\nint readint() { return readln.chomp.to!int; }\nint[] readints() { return readln.split.map!(to!int).array; }\n\nstring calc(Vec2 a, Vec2 b, Vec2 c) {\n    auto ab = b - a;\n    auto ac = c - a;\n\n    auto d = ab.cross(ac);\n    if (d > 0)\n        return \"COUNTER_CLOCKWISE\";\n    if (d < 0)\n        return \"CLOCKWISE\";\n\n    // |ab||ac|cos(pi) で cos(pi) = -1 なので負なら逆向き\n    if (ab.dot(ac) < 0)\n        return \"ONLINE_BACK\";\n\n    if (ab.magSq() >= ac.magSq())\n        return \"ON_SEGMENT\";\n    return \"ONLINE_FRONT\";\n}\n\nvoid main() {\n    auto xs = readints();\n    auto a = Vec2(xs[0], xs[1]);\n    auto b = Vec2(xs[2], xs[3]);\n\n    int q = readint();\n    for (int i = 0; i < q; i++) {\n        auto xy = readints();\n        auto c = Vec2(xy[0], xy[1]);\n        auto ans = calc(a, b, c);\n        writeln(ans);\n    }\n}\n\nstruct Vec2 {\n    immutable double x;\n    immutable double y;\n\n    this(double x, double y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    Vec2 opNeg() { return Vec2(-this.x, -this.y); }\n    Vec2 opAdd(Vec2 other) { return Vec2(this.x + other.x, this.y + other.y); }\n    Vec2 opSub(Vec2 other) { return Vec2(this.x - other.x, this.y - other.y); }\n    Vec2 opMul(double d) { return Vec2(this.x * d, this.y * d); }\n\n    double dot(Vec2 other) { return this.x * other.x + this.y * other.y; }\n    double cross(Vec2 other) { return this.x * other.y - other.x * this.y; }\n    double mag() { return sqrt(magSq()); }\n    double magSq() { return this.x * this.x + this.y * this.y; }\n\n    Vec2 normalized() {\n        auto m = mag();\n        if (m != 0 && m != 1)\n            return Vec2(this.x / m, this.y / m);\n        return this;\n    }\n\n    static double distance(Vec2 a, Vec2 b) {\n        return (a - b).mag();\n    }\n}\n\n"
  },
  {
    "language": "D",
    "code": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.math;\nimport std.range;\nimport std.stdio;\nimport std.string;\nimport std.typecons;\n\nint readint() {\n    return readln.chomp.to!int;\n}\n\nint[] readints() {\n    return readln.split.map!(to!int).array;\n}\n\nstring calc(Vec2 p0, Vec2 p1, Vec2 p2) {\n    auto p01 = p1 - p0;\n    auto p02 = p2 - p0;\n\n    auto d = p01.cross(p02);\n    if (d > 0)\n        return \"COUNTER_CLOCKWISE\";\n    if (d < 0)\n        return \"CLOCKWISE\";\n\n    // |p01||p02|cos(pi) ??§ cos(pi) = -1 ????????§??????????????????\n    if (p01.dot(p02) < 0)\n        return \"ONLINE_BACK\";\n\n    if (p01.magSq() >= p02.magSq())\n        return \"ON_SEGMENT\";\n    return \"ONLINE_FRONT\";\n}\n\nvoid main() {\n    auto xs = readints();\n    auto p0 = Vec2(xs[0], xs[1]);\n    auto p1 = Vec2(xs[2], xs[3]);\n\n    int q = readint();\n    for (int i = 0; i < q; i++) {\n        auto xy = readints();\n        auto p2 = Vec2(xy[0], xy[1]);\n        auto ans = calc(p0, p1, p2);\n        writeln(ans);\n    }\n}\n\nstruct Vec2 {\n    immutable double x;\n    immutable double y;\n\n    this(double x, double y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    Vec2 opAdd(Vec2 other) {\n        return Vec2(this.x + other.x, this.y + other.y);\n    }\n\n    Vec2 opSub(Vec2 other) {\n        return Vec2(this.x - other.x, this.y - other.y);\n    }\n\n    Vec2 opMul(double d) {\n        return Vec2(this.x * d, this.y * d);\n    }\n\n    double dot(Vec2 other) {\n        return this.x * other.x + this.y * other.y;\n    }\n\n    double cross(Vec2 other) {\n        return this.x * other.y - other.x * this.y;\n    }\n\n    double mag() {\n        return sqrt(magSq());\n    }\n\n    double magSq() {\n        return this.x * this.x + this.y * this.y;\n    }\n\n    Vec2 normalize() {\n        auto m = mag();\n        if (m != 0 && m != 1)\n            return Vec2(this.x / m, this.y / m);\n        return this;\n    }\n\n    static double distance(Vec2 a, Vec2 b) {\n        return (a - b).mag();\n    }\n}"
  },
  {
    "language": "D",
    "code": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.math;\nimport std.range;\nimport std.stdio;\nimport std.string;\nimport std.typecons;\n\nint readint() {\n    return readln.chomp.to!int;\n}\n\nint[] readints() {\n    return readln.split.map!(to!int).array;\n}\n\nstring calc(Vec2 p0, Vec2 p1, Vec2 p2) {\n    auto p01 = p1 - p0;\n    auto p02 = p2 - p0;\n\n    auto d = p01.cross(p02);\n    if (d > 0)\n        return \"COUNTER_CLOCKWISE\";\n    if (d < 0)\n        return \"CLOCKWISE\";\n\n    // |p01||p02|cos(pi) ??§ cos(pi) = -1 ????????§??????????????????\n    if (p01.dot(p02) < 0)\n        return \"ONLINE_BACK\";\n\n    if (p01.magSq() > p02.magSq())\n        return \"ON_SEGMENT\";\n    return \"ONLINE_FRONT\";\n}\n\nvoid main() {\n    auto xs = readints();\n    auto p0 = Vec2(xs[0], xs[1]);\n    auto p1 = Vec2(xs[2], xs[3]);\n\n    int q = readint();\n    for (int i = 0; i < q; i++) {\n        auto xy = readints();\n        auto p2 = Vec2(xy[0], xy[1]);\n        auto ans = calc(p0, p1, p2);\n        writeln(ans);\n    }\n}\n\nstruct Vec2 {\n    immutable double x;\n    immutable double y;\n\n    this(double x, double y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    Vec2 opAdd(Vec2 other) {\n        return Vec2(this.x + other.x, this.y + other.y);\n    }\n\n    Vec2 opSub(Vec2 other) {\n        return Vec2(this.x - other.x, this.y - other.y);\n    }\n\n    Vec2 opMul(double d) {\n        return Vec2(this.x * d, this.y * d);\n    }\n\n    double dot(Vec2 other) {\n        return this.x * other.x + this.y * other.y;\n    }\n\n    double cross(Vec2 other) {\n        return this.x * other.y - other.x * this.y;\n    }\n\n    double mag() {\n        return sqrt(magSq());\n    }\n\n    double magSq() {\n        return this.x * this.x + this.y * this.y;\n    }\n\n    Vec2 normalize() {\n        auto m = mag();\n        if (m != 0 && m != 1)\n            return Vec2(this.x / m, this.y / m);\n        return this;\n    }\n\n    static double distance(Vec2 a, Vec2 b) {\n        return (a - b).mag();\n    }\n}"
  },
  {
    "language": "D",
    "code": "import std.stdio, std.conv, std.string, std.array, std.range, std.algorithm, std.container;\nimport std.math, std.random, std.bigint, std.datetime, std.format;\nvoid main(string[] args){ if(args.length > 1) if(args[1] == \"-debug\") DEBUG = 1; solve(); } bool DEBUG = 0; \nvoid log(A ...)(lazy A a){ if(DEBUG) print(a); }\nvoid print(){ writeln(\"\"); } void print(T)(T t){ writeln(t); } void print(T, A ...)(T t, A a){ write(t, \" \"), print(a); }\nstring unsplit(T)(T xs){ return xs.array.to!(string[]).join(\" \"); }\nstring scan(){ static string[] ss; while(!ss.length) ss = readln.chomp.split; string res = ss[0]; ss.popFront; return res; }\nT scan(T)(){ return scan.to!T; } T[] scan(T)(int n){ return n.iota.map!(i => scan!T()).array; }\nT lowerTo(T)(ref T x, T y){ if(x > y) x = y; return x; } T raiseTo(T)(ref T x, T y){ if(x < y) x = y; return x; }\n\n// ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- //\n\nvoid solve(){\n\tlong x0 = scan!long, y0 = scan!long, x1 = scan!long, y1 = scan!long;\n\tVector v1 = Vector(x1 - x0, y1 - y0);\n\tint q = scan!int;\n\tforeach(_; 0 .. q){\n\t\tVector v2 = Vector(scan!long - x0, scan!long - y0);\n\t\tstring ans;\n\t\tif(v2.square == 0) ans = \"ON_SEGMENT\";\n\t\telse if(v2.arg == v1.arg){\n\t\t\tif(v2.square > v1.square) ans = \"ONLINE_FRONT\";\n\t\t\telse ans = \"ON_SEGMENT\";\n\t\t}\n\t\telse if(v2.arg == -v1.arg) ans = \"ONLINE_BACK\";\n\t\telse if(v2.isLeftTo(v1)) ans = \"COUNTER_CLOCKWISE\";\n\t\telse ans = \"CLOCKWISE\";\n\t\t\n\t\tans.print;\n\t}\n}\n\nstruct Vector{\n    long x, y;\n    Argument arg;\n    long square;\n    real length;\n    this(long x, long y){\n        this.x = x, this.y = y;\n        if(x != 0 || y != 0) arg = Argument(x, y);\n        square = x * x + y * y;\n        length = square.to!real.sqrt;\n    }\n    bool opEquals(Vector v){\n        return x == v.x && y == v.y;\n    }\n\tVector opUnary(string s)(){\n\t\tif(s == \"+\") return Vector(x, y);\n\t\tif(s == \"-\") return Vector(-x, -y);\n\t\tassert(0, \"Operator unary \" ~ s ~ \" not implemented\");\n\t}\n\tVector opBinary(string s)(Vector v){\n\t\tif(s == \"+\") return Vector(x + v.x, y + v.y);\n\t\tif(s == \"-\") return Vector(x - v.x, y - v.y);\n\t\tassert(0, \"Operator \" ~ s ~ \" not implemented\");\n\t}\n    Vector opBinary(string s)(long k){\n        if(s == \"*\") return Vector(x * k, y * k);\n\t\tassert(0, \"Operator \" ~ s ~ \" not implemented\");\n    }\n    Vector opBinaryRight(string s)(long k){\n        if(s == \"*\") return Vector(k * x, k * y);\n\t\tassert(0, \"Operator \" ~ s ~ \" not implemented\");\n    }\n\n    int quadrant(){ return arg.quadrant; }\n    bool isLeftTo(Vector v){ return arg.isLeftTo(v.arg); }\n    bool follows(Vector v){ return arg.follows(v.arg); }\n}\nstruct Argument{\n    long x, y;\n    this(long x, long y){\n        assert(x != 0 || y != 0);\n        this.x = x, this.y = y;\n    }\n    \n    bool opEquals(Argument a){\n        return quadrant == a.quadrant && y * a.x == x * a.y;\n    }\n\tArgument opUnary(string s)(){\n\t\tif(s == \"+\") return Argument(x, y);\n\t\tif(s == \"-\") return Argument(-x, -y);\n\t\tassert(0, \"Operator unary \" ~ s ~ \" not implemented\");\n\t}\n\tArgument opBinary(string s)(Argument a){\n\t\tif(s == \"+\") return Argument(x * a.x - y * a.y, y * a.x + x * a.y);\n\t\tif(s == \"-\") return Argument(x * a.x + y * a.y, y * a.x - x * a.y);\n\t\tassert(0, \"Operator \" ~ s ~ \" not implemented\");\n\t}\n\n    // 象限\n    // (1, 0) ≦ this ＜ (0, 1) のとき 1　など\n    int quadrant(){\n        if(x > 0 && y >= 0) return 1;\n        if(x <= 0 && y > 0) return 2;\n        if(x < 0 && y <= 0) return 3;\n        if(x >= 0 && y < 0) return 4;\n        assert(0);\n    }\n\n    // a から見て this は左側である（aと平行は含まない）\n    bool isLeftTo(Argument a){\n        return y * a.x - x * a.y > 0;\n    }\n\n    // (1, 0) から反時計回りに見て this < a である\n    bool follows(Argument a){\n        int q = this.quadrant, aq = a.quadrant;\n        if(q != aq) return q < aq;\n        else return a.isLeftTo(this);\n    }\n}\n\n"
  },
  {
    "language": "Python",
    "code": "#! /usr/bin/env python3\n\nfrom typing import List, Tuple\nfrom math import sqrt\nfrom enum import Enum\n\nEPS = 1e-10\n\n\ndef float_equal(x: float, y: float) -> bool:\n    return abs(x - y) < EPS\n\n\nclass PointLocation(Enum):\n    COUNTER_CLOCKWISE = 1\n    CLOCKWISE = 2\n    ONLINE_BACK = 3\n    ONLINE_FRONT = 4\n    ON_SEGMENT = 5\n\n\nclass Point:\n\n    def __init__(self, x: float=0.0, y: float=0.0) -> None:\n        self.x = x\n        self.y = y\n\n    def __repr__(self) -> str:\n        return \"Point({}, {})\".format(self.x, self.y)\n\n    def __eq__(self, other: object) -> bool:\n        if not isinstance(other, Point):\n            # print(\"NotImplemented in Point\")\n            return NotImplemented\n        return float_equal(self.x, other.x) and \\\n            float_equal(self.y, other.y)\n\n    def __add__(self, other: 'Point') -> 'Point':\n        return Point(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other: 'Point') -> 'Point':\n        return Point(self.x - other.x, self.y - other.y)\n\n    def __mul__(self, k: float) -> 'Point':\n        return Point(self.x * k, self.y * k)\n\n    def __rmul__(self, k: float) -> 'Point':\n        return self * k\n\n    def __truediv__(self, k: float) -> 'Point':\n        return Point(self.x / k, self.y / k)\n\n    def __lt__(self, other: 'Point') -> bool:\n        return self.y < other.y \\\n            if abs(self.x - other.x) < EPS \\\n            else self.x < other.x\n\n    def norm(self):\n        return self.x * self.x + self.y * self.y\n\n    def abs(self):\n        return sqrt(self.norm())\n\n    def dot(self, other: 'Point') -> float:\n        return self.x * other.x + self.y * other.y\n\n    def cross(self, other: 'Point') -> float:\n        return self.x * other.y - self.y * other.x\n\n    def is_orthogonal(self, other: 'Point') -> bool:\n        return float_equal(self.dot(other), 0.0)\n\n    def is_parallel(self, other: 'Point') -> bool:\n        return float_equal(self.cross(other), 0.0)\n\n    def distance(self, other: 'Point') -> float:\n        return (self - other).abs()\n\n    def in_side_of(self, seg: 'Segment') -> bool:\n        return seg.vector().dot(\n            Segment(seg.p1, self).vector()) >= 0\n\n    def in_width_of(self, seg: 'Segment') -> bool:\n        return \\\n            self.in_side_of(seg) and \\\n            self.in_side_of(seg.reverse())\n\n    def distance_to_line(self, seg: 'Segment') -> float:\n        return \\\n            abs((self - seg.p1).cross(seg.vector())) / \\\n            seg.length()\n\n    def distance_to_segment(self, seg: 'Segment') -> float:\n        if not self.in_side_of(seg):\n            return self.distance(seg.p1)\n        if not self.in_side_of(seg.reverse()):\n            return self.distance(seg.p2)\n        else:\n            return self.distance_to_line(seg)\n\n    def location(self, seg: 'Segment') -> PointLocation:\n        p = self - seg.p1\n        d = seg.vector().cross(p)\n        if d > EPS:\n            return PointLocation.COUNTER_CLOCKWISE\n        if d < -EPS:\n            return PointLocation.CLOCKWISE\n        if seg.vector().dot(p) < 0.0:\n            return PointLocation.ONLINE_BACK\n        if seg.vector().norm() < p.norm():\n            return PointLocation.ONLINE_FRONT\n        return PointLocation.ON_SEGMENT\n\n\nVector = Point\n\n\nclass Segment:\n\n    def __init__(self, p1: Point = None, p2: Point = None) -> None:\n        self.p1: Point = Point() if p1 is None else p1\n        self.p2: Point = Point() if p2 is None else p2\n\n    def __repr__(self) -> str:\n        return \"Segment({}, {})\".format(self.p1, self.p2)\n\n    def __eq__(self, other: object) -> bool:\n        if not isinstance(other, Segment):\n            # print(\"NotImplemented in Segment\")\n            return NotImplemented\n        return self.p1 == other.p1 and self.p2 == other.p2\n\n    def vector(self) -> Vector:\n        return self.p2 - self.p1\n\n    def reverse(self) -> 'Segment':\n        return Segment(self.p2, self.p1)\n\n    def length(self) -> float:\n        return self.p1.distance(self.p2)\n\n    def is_orthogonal(self, other: 'Segment') -> bool:\n        return self.vector().is_orthogonal(other.vector())\n\n    def is_parallel(self, other: 'Segment') -> bool:\n        return self.vector().is_parallel(other.vector())\n\n    def projection(self, p: Point) -> Point:\n        v = self.vector()\n        vp = p - self.p1\n        return v.dot(vp) / v.norm() * v + self.p1\n\n    def reflection(self, p: Point) -> Point:\n        x = self.projection(p)\n        return p + 2 * (x - p)\n\n    def intersect_ratio(self, other: 'Segment') -> Tuple[float, float]:\n        a = self.vector()\n        b = other.vector()\n        c = self.p1 - other.p1\n        s = b.cross(c) / a.cross(b)\n        t = a.cross(c) / a.cross(b)\n        return s, t\n\n    def intersects(self, other: 'Segment') -> bool:\n        s, t = self.intersect_ratio(other)\n        return (0 <= s <= 1) and (0 <= t <= 1)\n\n    def intersection(self, other: 'Segment') -> Point:\n        s, _ = self.intersect_ratio(other)\n        return self.p1 + s * self.vector()\n\n    def distance_with_segment(self, other: 'Segment') -> float:\n        if not self.is_parallel(other) and \\\n                self.intersects(other):\n            return 0\n        else:\n            return min(\n                self.p1.distance_to_segment(other),\n                self.p2.distance_to_segment(other),\n                other.p1.distance_to_segment(self),\n                other.p2.distance_to_segment(self))\n\n\nLine = Segment\n\n\nclass Circle:\n\n    def __init__(self, c: Point=None, r: float=0.0) -> None:\n        self.c: Point = Point() if c is None else c\n        self.r: float = r\n\n    def __eq__(self, other: object) -> bool:\n        if not isinstance(other, Circle):\n            return NotImplemented\n        return self.c == other.c and self.r == other.r\n\n    def __repr__(self) -> str:\n        return \"Circle({}, {})\".format(self.c, self.r)\n\ndef main() -> None:\n    x0, y0, x1, y1 = [int(x) for x in input().split()]\n    s = Segment(Point(x0, y0), Point(x1, y1))\n    q = int(input())\n\n    for _ in range(q):\n        x2, y2 = [int(x) for x in input().split()]\n        print(Point(x2, y2).location(s).name)\n\n\nif __name__ == \"__main__\":\n    main()\n\n"
  },
  {
    "language": "Python",
    "code": "x0, y0, x1, y1 = map(int, input().split())\nq = int(input())\n\np0, p1 = complex(x0, y0), complex(x1, y1)\np0p1 = p1 - p0\n\nwhile q:\n    q -= 1\n    p2 = complex(*map(int, input().split()))\n    p0p2 = p2 - p0\n    prod_cross = p0p1.real * p0p2.imag + p0p1.imag * p0p2.real\n    if abs(prod_cross) < 1e-6:\n        if p0p1.real * p0p2.real >= 0:\n            print('ONLINE_FRONT' if p0p1.real < p0p2.real else 'ON_SEGMENT')\n        else:\n            print('ONLINE_BACK')\n    else:\n        print('COUNTER_CLOCKWISE' if prod_cross > 0 else 'CLOCKWISE')"
  },
  {
    "language": "Python",
    "code": "# coding: utf-8\n# Your code here!\n\nCOUNTER_CLOCKWISE = 1\nCLOCKWISE = -1\nONLINE_BACK = 2\nONLINE_FRONT = -2\nON_SEGMENT = 0\n\nEPS = 0.0000000001\n\nclass Point:\n    \n    global EPS\n    \n    def __init__(self, x = 0, y = 0):\n        self.x = x\n        self.y = y\n        \n        \n    def __add__(a, b):\n        s = a.x + b.x\n        t = a.y + b.y\n        return Point(s, t)\n        \n    def __sub__(a, b):\n        s = a.x - b.x\n        t = a.y - b.y\n        return Point(s, t)\n            \n    def __mul__(self, a):\n        s = a * self.x\n        t = a * self.y\n        return Point(s, t)\n        \n    def __truediv__(self, a):\n        s = self.x / a\n        t = self.y / a\n        return Point(s, t)\n            \n            \n            \n            \n    def norm(self):\n        return self.x * self.x + self.y * self.y\n        \n    def abs(self):\n        return self.norm() ** 0.5\n            \n    \n            \n            \n    def __eq__(self, other):\n        return abs(self.x - other.y) < self.EPS and abs(self.y - other.y) < self.EPS\n            \n            \n            \n    def dot(self, b):\n        return self.x * b.x + self.y * b.y\n        \n    def cross(self, b):\n        return self.x * b.y - self.y * b.x\n    \n    \nclass Segment:\n    def __init__(self, p1, p2):\n        self.p1 = p1\n        self.p2 = p2\n\n\ndef ccw(p0, p1, p2):\n    a = p1-p0\n    b = p2-p0\n    \n    if a.cross(b) > 0:\n        return COUNTER_CLOCKWISE\n    elif a.cross(b) <0:\n        return CLOCKWISE\n    elif a.dot(b) < 0:\n        return ONLINE_BACK\n    elif a.abs() < b.abs():\n        return ONLINE_FRONT\n    else:\n        return ON_SEGMENT\n        \n        \nnums=list(map(int,input().split()))\np1 = Point(nums[0], nums[1])\np2 = Point(nums[2], nums[3])\nn = int(input())\nfor i in range(n):\n    nums=list(map(int,input().split()))\n    p = Point(nums[0], nums[1])\n    result = ccw(p1, p2, p)\n    if result == COUNTER_CLOCKWISE:\n        print(\"COUNTER_CLOCKWISE\")\n    elif result == CLOCKWISE:\n        print(\"CLOCKWISE\")\n    elif result == ONLINE_BACK:\n        print(\"ONLINE_BACK\")\n    elif result == ONLINE_FRONT:\n        print(\"ONLINE_FRONT\")\n    elif result == ON_SEGMENT:\n        print(\"ON_SEGMENT\")\n\n\n\n"
  },
  {
    "language": "Python",
    "code": "x0, y0, x1, y1 = map(int, input().split())\nq = int(input())\n\np0, p1 = complex(x0, y0), complex(x1, y1)\np0p1 = p1 - p0\n\nwhile q:\n    q -= 1\n    p2 = complex(*map(int, input().split()))\n    p0p2 = p2 - p0\n    prod_cross = p0p1.real * p0p2.imag - p0p1.imag * p0p2.real\n    if abs(prod_cross) < 1e-6:\n        if p0p1.real * p0p2.real >= 0:\n            print('ONLINE_FRONT' if p0p1.real < p0p2.real else 'ON_SEGMENT')\n        else:\n            print('ONLINE_BACK')\n    else:\n        print('COUNTER_CLOCKWISE' if prod_cross > 0 else 'CLOCKWISE')"
  },
  {
    "language": "Python",
    "code": "#!/usr/bin/env python\n\nimport sys\nimport math\nimport itertools as it\nfrom collections import deque\n\nsys.setrecursionlimit(10000000)\n\nx0, y0, x1, y1 = map(int, raw_input().split())\na1, b1 = [x1 - x0, y1 - y0]\nq = input()\n\nfor loop in range(q):\n    x2, y2 = map(int, raw_input().split())\n    a2, b2 = [x2 - x0, y2 - y0]\n\n    if a1 * b2 - b1 * a2 > 0:\n        print \"COUNTER_CLOCKWISE\"\n    elif a1 * b2 - b1 * a2 < 0:\n        print \"CLOCKWISE\"\n    elif a1 * a2 + b1 * b2 < 0:\n        print \"ONLINE_BACK\"\n    elif abs(a2) <= abs(a1) and abs(b2) <= abs(b1):\n        print \"ON_SEGMENT\"\n    else:\n        print \"ONLINE_FRONT\"\n\n"
  },
  {
    "language": "Python",
    "code": "import math\n\nclass Vector:\n    def __init__(self,x,y):\n        self.x = x\n        self.y = y\n        \n    def __add__(self,other):\n        return Vector(self.x+other.x,self.y+other.y)\n    \n    def __sub__(self,other):\n        return Vector(self.x-other.x,self.y-other.y)\n    \n    def __mul__(self,scalar):\n        return Vector(self.x*scalar,self.y*scalar)\n    def __rmul__(self, scalar):\n        return Vector(self.x*scalar,self.y*scalar)\n   \n    def __repr__(self):\n        return str([self.x,self.y])\n        \n    def norm_2(self):\n        return dot(self,self)\n    \n    def norm(self):\n        return math.sqrt(self.norm_2())\n    \ndef v_sum(v1,v2):\n    return Vector(v1.x+v2.x,v1.y+v2.y) \ndef scalar_multi(k,v):\n    return Vector(k*v.x,k*v.y)\ndef v_diff(v1,v2):\n    return v_sum(v1,scalar_multi(-1,v2))\n    \ndef dot(vector1,vector2):\n    return vector1.x*vector2.x+vector1.y*vector2.y\n\ndef cross(vector1,vector2):\n    return vector1.x*vector2.y-vector1.y*vector2.x\n\n\nx1,y1,x2,y2 = map(float,input().split())\np1 = Vector(x1,y1)\np2 = Vector(x2,y2)\n\nq = int(input())\n\nfor i in range(q):\n    x,y = map(float,input().split())\n    p3 = Vector(x,y)\n    \n    a = p2-p1\n    v = p3-p1\n    if cross(a,v) > 0:\n        print('COUNTER_CLOCKWISE')\n    elif cross(a,v) < 0:\n        print('CLOCKWISE')\n    else:\n        if dot(a,v)<0:\n            print('ONLINE_BACK')\n        elif dot(a,v)>a.norm_2():\n            print('ONLINE_FRONT')\n        else:\n            print('ON_SEGMENT')\n"
  },
  {
    "language": "Python",
    "code": "import sys\nfrom itertools import starmap\nreadline = sys.stdin.readline\nEPS = 1e-9\nONLINE_FRONT = -2\nCLOCKWISE = -1\nON_SEGMENT = 0\nCOUNTER_CLOCKWISE = 1\nONLINE_BACK = 2\nclass Segment(object):\n    __slots__ = ('fi', 'se')\n    def __init__(self, fi, se):\n        self.fi = fi\n        self.se = se\ndef cross(a, b):\n    return a.real * b.imag - a.imag * b.real\ndef dot(a, b):\n    return a.real * b.real + a.imag * b.imag\ndef norm(base):\n    return abs(base) ** 2\ndef project(s, p2):\n    base = s.fi - s.se\n    r = dot(p2 - s.fi, base) / norm(base)\n    return s.fi + base * r\ndef reflect(s, p):\n    return p + (project(s, p) - p) * 2.0\ndef ccw(p1, p2, p3):\n    a = p2 - p1\n    b = p3 - p1\n    if cross(a, b) > EPS: return 1\n    if cross(a, b) < -EPS: return -1\n    if dot(a, b) < -EPS: return 2\n    if norm(a) < norm(b): return -2\n    return 0\ndef intersect4(p1, p2, p3, p4):\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 and\n\t\t\tccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0)\ndef intersect2(s1, s2):\n    return intersect4(s1.fi, s1.se, s2.fi, s2.se)\ndef getDistance(a, b):  return abs(a - b)\ndef getDistanceLP(l, p):\n    return abs(cross(l.se - l.fi, p - l.fi) / abs(l.se - l.fi))\ndef getDistanceSP(s, p):\n    if dot(s.se - s.fi, p - s.fi) < 0.0: return abs(p - s.fi)\n    if dot(s.fi - s.se, p - s.se) < 0.0: return abs(p - s.se)\n    return getDistanceLP(s, p)\ndef getDistances(s1, s2):\n    if intersect2(s1, s2): return 0.0\n    return min(getDistanceSP(s1, s2.fi), getDistanceSP(s1, s2.se),\n               getDistanceSP(s2, s1.fi), getDistanceSP(s2, s1.se))\np0, p1 = starmap(complex, zip(*[map(int, input().split())] * 2))\nn = int(readline())\nfor _ in [0] * n:\n    res = ccw(p0, p1, complex(*map(float, readline().split())))\n    if res == COUNTER_CLOCKWISE: print(\"COUNTER_CLOCKWISE\")\n    elif res == CLOCKWISE: print(\"CLOCKWISE\")\n    elif res == ONLINE_BACK: print(\"ONLINE_BACK\")\n    elif res == ONLINE_FRONT: print(\"ONLINE_FRONT\")\n    else: print(\"ON_SEGMENT\")"
  },
  {
    "language": "Python",
    "code": "# coding=utf-8\n\n\ndef cross_product(vect1, vect2):\n    return vect1[0]*vect2[1] - vect1[1]*vect2[0]\n\n\ndef vector_plus(vect1, vect2):\n    return [el1 + el2 for el1, el2 in zip(vect1, vect2)]\n\n\ndef vector_minus(vect1, vect2):\n    return [el1 - el2 for el1, el2 in zip(vect1, vect2)]\n\n\ndef vector_product(vect1, vect2):\n    return [el1 * el2 for el1, el2 in zip(vect1, vect2)]\n\n\ndef vector_divide(vect1, vect2):\n    return [el1 / el2 for el1, el2 in zip(vect1, vect2)]\n\n\ndef which_place(origin, line_to1, line_to2):\n    line1 = vector_minus(line_to1, origin)\n    line2 = vector_minus(line_to2, origin)\n    judge = cross_product(line1, line2)\n\n    if judge > 0:\n        return \"COUNTER_CLOCKWISE\"\n    if judge < 0:\n        return \"CLOCKWISE\"\n    if judge == 0:\n        judge2 = line2[0]/line1[0]\n        if judge2 < 0:\n            return \"ONLINE_BACK\"\n        if judge2 > 1:\n            return \"ONLINE_FRONT\"\n        else:\n            return \"ON_SEGMENT\"\n\n\nif __name__ == '__main__':\n    xy_list = list(map(int, input().split()))\n    p0_list = xy_list[:2]\n    p1_list = xy_list[2:]\n    Q = int(input())\n\n    for i in range(Q):\n        p2_list = list(map(int, input().split()))\n        place = which_place(p0_list, p1_list, p2_list)\n        print(place)\n\n"
  },
  {
    "language": "Python",
    "code": "from math import sqrt\nx0,y0,x1,y1 = map(int, input().split())\na = [x0,y0]\nb = [x1, y1]\nq = int(input())\n\nCCW = {1: 'COUNTER_CLOCKWISE',\n       2: 'CLOCKWISE',\n       3: 'ONLINE_BACK',\n       4: 'ONLINE_FRONT',\n       5: 'ON_SEGMENT',}\n\ndef dot(a,b):\n  return sum ([i * j for i, j in zip(a,b)])\n\ndef sub(a,b):\n  return [a[0] - b[0], a[1] - b[1]]\n\ndef cross(a,b):\n  return a[0] * b[1] - a[1] * b[0]\n\ndef _abs(a):\n  return sqrt(a[0] ** 2 + a[1] ** 2)\n\ndef ccw(a, b, c):\n  x = sub(b,a)\n  y = sub(c,a)\n  if cross(x, y) > 0:\n    return 1\n  if cross(x, y) < 0:\n    return 2\n  if dot(x,y)<0:\n    return 3\n  if _abs(x) < _abs(y):\n    return 4\n  return 5\n\nfor i in range(q):\n  c = list(map(int, input().split()))\n  print(CCW[ccw(a,b,c)])\n\n"
  },
  {
    "language": "Python",
    "code": "class Point:\n    def __init__(self, x , y):\n        self.x = x\n        self.y = y\n    def __sub__(self, p):\n        x_sub = self.x - p.x\n        y_sub = self.y - p.y\n        return Point(x_sub, y_sub)\n\nclass Vector:\n    def __init__(self, p):\n        self.x = p.x\n        self.y = p.y\n    def norm(self):\n        return (self.x ** 2 + self.y ** 2) ** 0.5\n\ndef cross(v1, v2):\n    return v1.x * v2.y - v1.y * v2.x\n\ndef dot(v1, v2):\n    return v1.x * v2.x + v1.x * v2.x\n\ndef ccw(p0, p1, p2):\n    a = Vector(p1 - p0)\n    b = Vector(p2 - p0)\n    cross_ab = cross(a, b)\n    if cross_ab > 0:\n        print(\"COUNTER_CLOCKWISE\")\n    elif cross_ab < 0:\n        print(\"CLOCKWISE\")\n    elif dot(a, b) < 0:\n        print(\"ONLINE_BACK\")\n    elif a.norm() < b.norm():\n        print(\"ONLINE_FRONT\")\n    else:\n        print(\"ON_SEGMENT\")\n\nimport sys\n\nfile_input = sys.stdin\n\nx_p0, y_p0, x_p1, y_p1 = map(int, file_input.readline().split())\np0 = Point(x_p0, y_p0)\np1 = Point(x_p1, y_p1)\n\nq = map(int, file_input.readline())\n\nfor line in file_input:\n    x_p2, y_p2 = map(int, line.split())\n    p2 = Point(x_p2, y_p2)\n    ccw(p0, p1, p2)"
  },
  {
    "language": "Python",
    "code": "from collections import defaultdict,deque\nimport sys,heapq,bisect,math,itertools,string,queue\nsys.setrecursionlimit(10**8)\nINF = float('inf')\nmod = 10**9+7\neps = 10**-7\ndef inp(): return int(input())\ndef inpl(): return list(map(int, input().split()))\ndef inpl_str(): return list(input().split())\n\n###########################\n#          幾何\n###########################\ndef sgn(a):\n    if a < -eps: return -1\n    if a >  eps: return  1\n    return 0\n\nclass Point:\n    def __init__(self,x,y):\n        self.x = x\n        self.y = y\n        pass\n\n    def tolist(self):\n        return [self.x,self.y]\n\n    def __add__(self,p):\n        return Point(self.x+p.x, self.y+p.y)\n    def __iadd__(self,p):\n        return self + p\n\n    def __sub__(self,p):\n        return Point(self.x - p.x, self.y - p.y)\n    def __isub__(self,p):\n        return self - p\n\n    def __truediv__(self,n):\n        return Point(self.x/n, self.y/n)\n    def __itruediv__(self,n):\n        return self / n\n\n    def __mul__(self,n):\n        return Point(self.x*n, self.y*n)\n    def __imul__(self,n):\n        return self * n\n\n    def __lt__(self,other):\n        tmp = sgn(self.x - other.x)\n        if tmp != 0:\n            return tmp < 0\n        else:\n            return sgn(self.y - other.y) < 0\n\n    def __eq__(self,other):\n        return sgn(self.x - other.x) == 0 and sgn(self.y - other.y) == 0\n\n    def abs(self):\n        return math.sqrt(self.x**2+self.y**2)\n\n    def dot(self,p):\n        return self.x * p.x + self.y*p.y\n\n    def det(self,p):\n        return self.x * p.y - self.y*p.x\n\n    def arg(self,p):\n        return math.atan2(y,x)\n\n# 点の進行方向 a -> b -> c\ndef iSP(a,b,c):\n    tmp = sgn((b-a).det(c-a))\n    if tmp > 0:   return 1   # 左に曲がる場合\n    elif tmp < 0: return -1  # 右に曲がる場合\n    else: # まっすぐ\n        if sgn((b-a).dot(c-a)) < 0: return -2 # c-a-b の順\n        if sgn((a-b).dot(c-b)) < 0: return  2 # a-b-c の順\n        return 0 # a-c-bの順\n\n# ab,cd の直線交差\ndef isToleranceLine(a,b,c,d):\n    if sgn((b-a).det(c-d)) != 0: return 1 # 交差する\n    else:\n        if sgn((b-a).det(c-a)) != 0: return 0 # 平行\n        else: return -1 # 同一直線\n\n# ab,cd の線分交差 重複，端点での交差もTrue\ndef isToleranceSegline(a,b,c,d):\n    return sgn(iSP(a,b,c)*iSP(a,b,d))<=0 and sgn(iSP(c,d,a)*iSP(c,d,b)) <= 0\n\n# 直線ab と 直線cd の交点 (存在する前提)\ndef Intersection(a,b,c,d):\n    tmp1 = (b-a)*((c-a).det(d-c))\n    tmp2 = (b-a).det(d-c)\n    return a+(tmp1/tmp2)\n\n# 直線ab と 点c の距離\ndef DistanceLineToPoint(a,b,c):\n    return abs(((c-a).det(b-a))/((b-a).abs()))\n\n# 線分ab と 点c の距離\ndef DistanceSeglineToPoint(a,b,c):\n    if sgn((b-a).dot(c-a)) < 0: # <cab が鈍角\n        return (c-a).abs()\n    if sgn((a-b).dot(c-b)) < 0: # <cba が鈍角\n        return (c-b).abs()\n    return DistanceLineToPoint(a,b,c)\n\n# 直線ab への 点c からの垂線の足\ndef Vfoot(a,b,c):\n    d = c + Point((b-a).y,-(b-a).x)\n    return Intersection(a,b,c,d)\n\n# 多角形の面積\ndef PolygonArea(Plist):\n    Plist = ConvexHull(Plist)\n    L = len(Plist)\n    S = 0\n    for i in range(L):\n        tmpS = (Plist[i-1].det(Plist[i]))/2\n        S += tmpS\n    return S\n\n# 多角形の重心\ndef PolygonG(Plist):\n    Plist = ConvexHull(Plist)\n    L = len(Plist)\n    S = 0\n    G = Point(0,0)\n    for i in range(L):\n        tmpS = (Plist[i-1].det(Plist[i]))/2\n        S += tmpS\n        G += (Plist[i-1]+Plist[i])/3*tmpS\n    return G/S\n\n# 凸法\ndef ConvexHull(Plist):\n    Plist.sort()\n    L = len(Plist)\n    qu = deque([])\n    quL = 0\n    for p in Plist:\n        while quL >= 2 and iSP(qu[quL-2],qu[quL-1],p) == 1:\n            qu.pop()\n            quL -= 1\n        qu.append(p)\n        quL += 1\n\n    qd = deque([])\n    qdL = 0\n    for p in Plist:\n        while qdL >= 2 and iSP(qd[qdL-2],qd[qdL-1],p) == -1:\n            qd.pop()\n            qdL -= 1\n        qd.append(p)\n        qdL += 1\n\n    qd.pop()\n    qu.popleft()\n    hidari = list(qd) + list(reversed(qu)) # 左端開始，左回りPlist\n    return hidari\n\nx1,y1,x2,y2 = inpl()\np0,p1 = Point(x1,y1), Point(x2,y2)\nq = inp()\nfor _ in range(q):\n    p2 = Point(*inpl())\n    tmp = iSP(p1,p0,p2)\n    if tmp == -1:\n        print('COUNTER_CLOCKWISE')\n    elif tmp == 1:\n        print('CLOCKWISE')\n    elif tmp == 2:\n        print('ONLINE_BACK')\n    elif tmp == -2:\n        print('ONLINE_FRONT')\n    else:\n        print('ON_SEGMENT')\n\n"
  },
  {
    "language": "Python",
    "code": "# -*- coding: utf-8 -*-\n\nimport collections\nimport math\n\n\nclass Vector2(collections.namedtuple(\"Vector2\", [\"x\",  \"y\"])):\n\n    def __add__(self, other):\n        return Vector2(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other):\n        return Vector2(self.x - other.x, self.y - other.y)\n\n    def __mul__(self, scalar):\n        return Vector2(self.x * scalar, self.y * scalar)\n\n    def __neg__(self):\n        return Vector2(-self.x, -self.y)\n\n    def __pos__(self):\n        return Vector2(+self.x, +self.y)\n\n    def __abs__(self):  # norm\n        return math.sqrt(float(self.x * self.x + self.y * self.y))\n\n    def dot(self, other):  # dot product\n        return self.x * other.x + self.y * other.y\n\n    def cross(self, other):  # cross product\n        return self.x * other.y - self.y * other.x\n\n\ndef getDistanceSP(segment, point):\n    p = point\n    p1, p2 = segment\n    if (p2 - p1).dot(p - p1) < 0:\n        return abs(p - p1)\n    if (p1 - p2).dot(p - p2) < 0:\n        return abs(p - p2)\n    return abs((p2 - p1).cross(p - p1)) / abs(p2 - p1)\n\n\ndef getDistance(s1, s2):\n    if 0:  # intersect\n        return 0\n    a, b = s1\n    c, d = s2\n    return min(getDistanceSP(s1, c), getDistanceSP(s1, d), getDistanceSP(s2, a), getDistanceSP(s2, b))\n\n\ndef ccw(p0, p1, p2):\n    a = p1 - p0\n    b = p2 - p0\n    if a.cross(b) > 0:\n        return 1\n    elif a.cross(b) < 0:\n        return -1\n    elif a.dot(b) < 0:\n        return 2\n    elif abs(a) < abs(b):\n        return -2\n    else:\n        return 0\n\n\nif __name__ == '__main__':\n\n    a, b, c, d = map(int, input().split())\n    p0 = Vector2(a, b)\n    p1 = Vector2(c, d)\n    q = int(input())\n    ans = []\n    for _ in range(q):\n        e, f = map(int, input().split())\n        p2 = Vector2(e, f)\n        ans.append(ccw(p0, p1, p2))\n    dic = {1: \"COUNTER_CLOCKWISE\", -1: \"CLOCLWISE\",\n           2: \"ONLINE_BACK\", -2: \"ONLINE_FRONT\", 0: \"ON_SEGMENT\"}\n    for a in ans:\n        print(dic[a])\n\n"
  },
  {
    "language": "Python",
    "code": "import math\n\nclass Point():\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Vector():\n    def __init__(self, start, end):\n        self.x = end.x - start.x\n        self.y = end.y - start.y\n        self.r = math.sqrt(pow(self.x, 2) + pow(self.y, 2))\n        self.theta = math.atan2(self.y, self.x)\n\nx0, y0, x1, y1 = list(map(int, input().split(' ')))\np0, p1 = Point(x0, y0), Point(x1, y1)\nvec1 = Vector(p0, p1)\n\nq = int(input())\nfor i in range(q):\n    x2, y2 = list(map(int, input().split(' ')))\n    p2 = Point(x2, y2)\n    vec2 = Vector(p0, p2)\n    if vec2.r == 0:\n        print('ON_SEGMENT')\n    elif vec1.theta == vec2.theta:\n        if vec1.r < vec2.r:\n            print('ONLINE_FRONT')\n        else:\n            print('ON_SEGMENT')\n    elif abs(vec1.theta - vec2.theta) == math.pi:\n        print('ONLINE_BACK')\n    elif (0 < vec2.theta - vec1.theta and vec2.theta - vec1.theta < math.pi)  or vec2.theta - vec1.theta < -1*math.pi:\n        print('COUNTER_CLOCKWISE')\n    elif (-1*math.pi < vec2.theta - vec1.theta and vec2.theta - vec1.theta < 0) or vec2.theta - vec1.theta > math.pi:\n        print('CLOCKWISE')\n\n"
  },
  {
    "language": "Python",
    "code": "import math\n\nEPS = 1e-10\n\ndef equals(a, b):\n    return abs(a - b) < EPS\n\n\nclass Point:\n    def __init__(self, x=0, y=0):\n        self.x = x\n        self.y = y\n\n    def __add__(self, p):\n        return Point(self.x + p.x, self.y + p.y)\n\n    def __sub__(self, p):\n        return Point(self.x - p.x, self.y - p.y)\n\n    def __mul__(self, a):\n        return Point(self.x * a, self.y * a)\n\n    def __rmul__(self, a):\n        return self * a\n\n    def __truediv__(self, a):\n        return Point(self.x / a, self.y / a)\n\n    def norm(self):\n        return self.x * self.x + self.y * self.y\n\n    def abs(self):\n        return math.sqrt(self.norm())\n\n    def __lt__(self, p):\n        if self.x != p.x:\n            return self. x < p.x\n        else:\n            return self.y < p.y\n\n    def __eq__(self, p):\n        return equals(self.x, p.x) and equals(self.y, p.y)\n\n\nclass Segment:\n    def __init__(self, p1, p2):\n        self.p1 = p1\n        self.p2 = p2\n\n\ndef dot(a, b):\n    return a.x * b.x + a.y * b.y\n\n\ndef cross(a, b):\n    return a.x * b.y - a.y * b.x\n\n\ndef ccw(p0, p1, p2):\n    a = p1 - p0\n    b = p2 - p0\n    if cross(a, b) > EPS:\n        return 'COUNTER_CLOCKWISE'\n    if cross(a, b) < -EPS:\n        return 'CLOCKWISE'\n    if dot(a, b) < -EPS:\n        return 'ONLINE_BACK'\n    if a.norm() < b.norm():\n        return 'ONLINE_FRONT'\n    return 'ON_SEGMENT'\n\n\nif __name__ == '__main__':\n    x0, y0, x1, y1 = [int(v) for v in input().split()]\n    p0 = Point(x0, y0)\n    p1 = Point(x1, y1)\n    q = int(input())\n    ans = []\n    for i in range(q):\n        x2, y2 = [int(v) for v in input().split()]\n        p2 = Point(x2, y2)\n        ans.append(ccw(p0, p1, p2))\n\n    for v in ans:\n        print(v)\n"
  },
  {
    "language": "Python",
    "code": "import cmath\nEPS = 1e-4\n\n#外積\ndef OuterProduct(one, two):\n\ttmp = one.conjugate() * two\n\treturn tmp.imag\n\n#内積\ndef InnerProduct(one, two):\n\ttmp = one.conjugate() * two\n\treturn tmp.real\n\n#点が線分上にあるか\ndef IsOnSegment(point, begin, end):\n\tif abs(OuterProduct(begin-point, end-point)) <= EPS and InnerProduct(begin-point, end-point) <= EPS:\n\t\treturn True\n\telse:\n\t\treturn False\n\n#3点が反時計回りか\n#一直線上のときの例外処理できていない→とりあえずF\ndef CCW(p, q, r):\n\tone, two = q-p, r-q\n\tif OuterProduct(one, two) > -EPS:\n\t\treturn True\n\telse:\n\t\treturn False\n\ndef solve(p, q, r):\n\tif abs(OuterProduct(q-r, p-r)) <= EPS:\n\t\tif InnerProduct(q-r, p-r) <= EPS:\n\t\t\treturn \"ON_SEGMENT\"\n\t\telif abs(p-r) < abs(q-r):\n\t\t\treturn \"ONLINE_BACK\"\n\t\telse:\n\t\t\treturn \"ONLINE_FRONT\"\n\telif CCW(p, q, r):\n\t\treturn \"COUNTER_CLOCKWISE\"\n\telse:\n\t\treturn \"CLOCKWISE\"\n\na, b, c, d = map(int, input().split())\np, q = complex(a, b), complex(c, d)\nn = int(input())\nfor _ in range(n):\n\tx, y = map(int, input().split())\n\tr = complex(x, y)\n\tprint(solve(p, q, r))\n"
  },
  {
    "language": "Python",
    "code": "import math\n\nclass Point():\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Vector():\n    def __init__(self, start, end):\n        self.x = end.x - start.x\n        self.y = end.y - start.y\n        self.r = math.sqrt(pow(self.x, 2) + pow(self.y, 2))\n        self.theta = math.atan2(self.y, self.x)\n\nx0, y0, x1, y1 = list(map(int, input().split(' ')))\np0, p1 = Point(x0, y0), Point(x1, y1)\nvec1 = Vector(p0, p1)\n\nq = int(input())\nfor i in range(q):\n    x2, y2 = list(map(int, input().split(' ')))\n    p2 = Point(x2, y2)\n    vec2 = Vector(p0, p2)\n    if vec1.theta == vec2.theta:\n        if vec1.r < vec2.r:\n            print('ONLINE_FRONT')\n        else:\n            print('ON_SEGMENT')\n    elif abs(vec1.theta - vec2.theta) == math.pi:\n        print('ONLINE_BACK')\n    elif vec2.theta - vec1.theta > 0 or vec2.theta - vec1.theta < -1*math.pi:\n        print('COUNTER_CLOCKWISE')\n    elif vec2.theta - vec1.theta < 0 or vec2.theta - vec1.theta > math.pi:\n        print('CLOCKWISE')\n\n"
  },
  {
    "language": "Python",
    "code": "import sys\nimport math\ninput = sys.stdin.readline\n\n\nclass Vector():\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __add__(self, vec):\n        return Vector(self.x+vec.x, self.y+vec.y)\n\n    def __sub__(self, vec):\n        return Vector(self.x-vec.x, self.y-vec.y)\n\n    def __mul__(self, sc):\n        return Vector(self.x*sc, self.y*sc)\n\n    def __truediv__(self, sc):\n        return Vector(self.x/sc, self.y/sc)\n\n    def __iadd__(self, vec):\n        self.x += vec.x\n        self.y += vec.y\n        return self\n\n    def __isub__(self, vec):\n        self.x -= vec.x\n        self.y -= vec.y\n        return self\n\n    def __imul__(self, sc):\n        self.x *= sc\n        self.y *= sc\n        return self\n\n    def __itruediv__(self, sc):\n        self.x /= sc\n        self.y /= sc\n        return self\n\n    def __str__(self):\n        return '{:.9f} {:.9f}'.format(self.x, self.y)\n\n    def __eq__(self, vec):\n        return self.x == vec.x and self.y == vec.y\n\n    def dot(self, vec):\n        return self.x * vec.x + self.y * vec.y\n\n    def cross(self, vec):\n        return self.x * vec.y - self.y * vec.x\n\n    def abs(self):\n        return (self.x*self.x + self.y*self.y)**0.5\n\n    def ortho(self):\n        return Vector(-self.y, self.x)\n\nx0, y0, x1, y1 = map(int, input().split())\np0 = Vector(x0, y0)\np1 = Vector(x1, y1)\nv1 = p1-p0\n\nfor _ in [0]*int(input()):\n    x, y = map(int, input().split())\n    p2 = Vector(x, y)\n    v2 = p2-p0\n\n    det = v2.cross(v1)\n    if det > 0:\n        print('CLOCKWISE')\n    elif det < 0:\n        print('COUNTER_CLOCKWISE')\n    elif v2.dot(v1) < 0:\n        print('ONLINE_BACK')\n    elif v2.dot(v2) > v1.dot(v1):\n        print('ONLINE_FRONT')\n    else:\n        print('ON_SEGMENT')\n\n"
  },
  {
    "language": "Python",
    "code": "#!/usr/bin/env python3\n\nimport enum\n\n\nEPS = 1e-10\n\n\nclass PointsRelation(enum.Enum):\n    counter_clockwise = 1\n    clockwise = 2\n    online_back = 3\n    on_segment = 4\n    online_front = 5\n\n\ndef inner_product(v1, v2):\n    return v1.real * v2.real + v1.imag * v2.imag\n\n\ndef outer_product(v1, v2):\n    return v1.real * v2.imag - v1.imag * v2.real\n\n\ndef judge_relation(p0, p1, p2):\n    v1 = p1 - p0\n    v2 = p2 - p0\n    op = outer_product(v1, v2)\n    if op > EPS:\n        return PointsRelation.counter_clockwise\n    elif op < -EPS:\n        return PointsRelation.clockwise\n    elif inner_product(v1, v2) < -EPS:\n        return PointsRelation.online_back\n    elif abs(v1) < abs(v2):\n        return PointsRelation.online_front\n    else:\n        return PointsRelation.on_segment\n\n\ndef main():\n    x_p0, y_p0, x_p1, y_p1 = map(float, input().split())\n    p0 = complex(x_p0, y_p0)\n    p1 = complex(x_p1, y_p1)\n    q = int(input())\n    for _ in range(q):\n        p2 = complex(*map(float, input().split()))\n        ans = judge_relation(p0, p1, p2)\n        if ans == PointsRelation.counter_clockwise:\n            print(\"COUNTER_CLOCKWISE\")\n        elif ans == PointsRelation.clockwise:\n            print(\"CLOCKWISE\")\n        elif ans == PointsRelation.online_back:\n            print(\"ONLINE_BACK\")\n        elif ans == PointsRelation.online_front:\n            print(\"ONLINE_FRONT\")\n        else:\n            print(\"ON_SEGMENT\")\n\n\nif __name__ == '__main__':\n    main()"
  },
  {
    "language": "Python",
    "code": "import math\n\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    def __add__(self, other):\n        return Point(self.x + other.x, self.y + other.y)\n    def __sub__(self, other):\n        return Point(self.x - other.x, self.y - other.y)\n    def __mul__(self, other):\n        return Point(self.x * other, self.y * other)\n    def __floordiv__(self, other):\n        return Point(self.x / other, self.y / other)\n    def __repr__(self):\n        return str(self.x) + ' ' + str(self.y)\n\nclass Vector(Point):\n    pass\n\nclass Line:\n    def __init__(self, p1, p2):\n        self.p1 = p1\n        self.p2 = p2\n\nclass Segment(Line):\n    pass\n\ndef points_to_vector(p1, p2):\n    x = p1.x - p2.x\n    y = p1.y - p2.y\n    return Vector(x, y)\n\ndef vector(p):\n    return Vector(p.x, p.y)\n\ndef dot(v1, v2):\n    return v1.x * v2.x + v1.y * v2.y\n\ndef cross(v1, v2):\n    return v1.x * v2.y - v1.y * v2.x\n\ndef norm(v):\n    return v.x**2 + v.y**2\n\ndef distance(v):\n    return math.sqrt(norm(v))\n\ndef project(s, p):\n    base = points_to_vector(s.p1, s.p2)\n    hypo = points_to_vector(p, s.p1)\n    r = dot(hypo, base) / norm(base)\n    return s.p1 + base * r\n\ndef reflect(s, p):\n    return p + (project(s, p) -p) * 2\n\ndef ccw(p0, p1, p2):\n    EPS = 1e-10\n    v1 = p1 - p0\n    v2 = p2 - p0\n    if cross(v1, v2) > EPS:\n        return 'COUNTER_CLOCKWISE'\n    elif cross(v1, v2) < -EPS:\n        return 'CLOCKWISE'\n    elif dot(v1, v2) < -EPS:\n        return 'ONLINE_BACK'\n    elif norm(v1) < norm(v2):\n        return 'ONLINE_FRONT'\n    else:\n        return 'ON_SEGMENT'\n\nimport sys\n# sys.stdin = open('input.txt')\n\ntemp = list(map(int, input().split()))\np0 = Point(temp[0], temp[1])\np1 = Point(temp[2], temp[3])\nq = int(input())\nfor i in range(q):\n    x, y = map(int, input().split())\n    p2 = Point(x, y)\n    print(ccw(p0, p1, p2))\n\n"
  },
  {
    "language": "Python",
    "code": "import math\n\n\nclass Vector2():\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __add__(self, v):\n        return Vector2(self.x+v.x, self.y+v.y)\n\n    def __sub__(self, v):\n        return Vector2(self.x-v.x, self.y-v.y)\n\n    def __mul__(self, v):\n        return Vector2(self.x*v, self.y*v)\n\n    def __truediv__(self, v):\n        return Vector2(self.x/v, self.y/v)\n\n    def __abs__(self):\n        return math.sqrt(float(self.x*self.x+self.y*self.y))\n\n    def dot(self, v):\n        return self.x*v.x+self.y*v.y\n\n    def cross(self, v):\n        return self.x*v.y-self.y*v.x\n\n    def norm(self):\n        d = abs(self)\n        return Vector2(self.x/d, self.y/d)\n\n\ndef distanceLP(v1, v2, p):\n    '''\n    v1 -> v2の直線とpとの距離\n    '''\n    return abs((v2-v1).cross(p-v1))/abs(v2-v1)\n\n\ndef distanceSP(v1, v2, p):\n    '''\n    v1 -> v2の線分とpとの距離\n    '''\n    if (v2-v1).dot(p-v1) < 0.0:\n        return abs(p-v1)\n    if (v1-v2).dot(p-v2) < 0.0:\n        return abs(p-v2)\n    return distanceLP(v1, v2, p)\n\n\ndef intersect(p1, p2, p3, p4):\n    '''\n    p1p2とp3p4の交差判定\n    '''\n    t1 = (p1.x-p2.x)*(p3.y-p1.y)+(p1.y-p2.y)*(p1.x-p3.x)\n    t2 = (p1.x-p2.x)*(p4.y-p1.y)+(p1.y-p2.y)*(p1.x-p4.x)\n    t3 = (p3.x-p4.x)*(p1.y-p3.y)+(p3.y-p4.y)*(p3.x-p1.x)\n    t4 = (p3.x-p4.x)*(p2.y-p3.y)+(p3.y-p4.y)*(p3.x-p2.x)\n    return (t1*t2) < 0.0 and (t3*t4) < 0.0\n\n\ndef distance(a1, a2, b1, b2):\n    '''\n    線分a1a2とb1b2の距離\n    '''\n    if intersect(a1, a2, b1, b2):\n        return 0.0\n    return min([\n        min([distanceSP(a1, a2, b1), distanceSP(a1, a2, b2)]),\n        min([distanceSP(b1, b2, a1), distanceSP(b1, b2, a2)])\n    ])\n\n\np0x, p0y, p1x, p1y = map(int, input().split())\np0 = Vector2(p0x, p0y)\np1 = Vector2(p1x, p1y)\nq = int(input())\nfor i in range(q):\n    x, y = map(int, input().split())\n    p2 = Vector2(x, y)\n    c = (p1-p0).cross(p2-p0)\n    if math.isclose(c, 0.0):\n        d = (p1-p0).dot(p2-p0)\n        if d < 0.0:\n            print(\"ONLINE_BACK\")\n        else:\n            d1 = abs(p1-p0)\n            d2 = abs(p2-p0)\n            if d1 < d2:\n                print(\"ONLINE_FRONT\")\n            else:\n                print(\"ON_SEGMENT\")\n    elif c < 0.0:\n        print(\"CLOCKWISE\")\n    else:\n        print(\"COUNTER_CLOCKWISE\")\n\n"
  },
  {
    "language": "Python",
    "code": "import math\n\nclass Point():\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Vector():\n    def __init__(self, start, end):\n        self.x = end.x - start.x\n        self.y = end.y - start.y\n        self.r = math.sqrt(pow(self.x, 2) + pow(self.y, 2))\n        self.theta = math.atan2(self.y, self.x)\n\nx0, y0, x1, y1 = list(map(int, input().split(' ')))\np0, p1 = Point(x0, y0), Point(x1, y1)\nvec1 = Vector(p0, p1)\n\nq = int(input())\nfor i in range(q):\n    x2, y2 = list(map(int, input().split(' ')))\n    p2 = Point(x2, y2)\n    vec2 = Vector(p0, p2)\n    if vec1.theta == vec2.theta:\n        if vec1.r < vec2.r:\n            print('ONLINE_FRONT')\n        else:\n            print('ON_SEGMENT')\n    elif abs(vec1.theta - vec2.theta) == math.pi:\n        print('ONLINE_BACK')\n    elif (0 < vec2.theta - vec1.theta and vec2.theta - vec1.theta < math.pi)  or vec2.theta - vec1.theta < -1*math.pi:\n        print('COUNTER_CLOCKWISE')\n    elif (-1*math.pi < vec2.theta - vec1.theta and vec2.theta - vec1.theta < 0) or vec2.theta - vec1.theta > math.pi:\n        print('CLOCKWISE')\n\n"
  },
  {
    "language": "Python",
    "code": "from sys import stdin\n\nEPS = 1e-10\n\nclass Vector:\n    def __init__(self, x=None, y=None):\n        self.x = x\n        self.y = y\n\n    def __add__(self, other):\n        return Vector(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other):\n        return Vector(self.x - other.x, self.y - other.y)\n\n    def __mul__(self, k):\n        return Vector(self.x * k, self.y * k)\n\n    def __gt__(self, other):\n        return self.x > other.x and self.y > other.yb\n\n    def __lt__(self, other):\n        return self.x < other.x and self.y < other.yb\n\n    def __eq__(self, other):\n        return self.x == other.x and self.y == other.y\n\n    def dot(self, other):\n        return self.x * other.x + self.y * other.y\n\n    # usually cross operation return Vector but it returns scalor\n    def cross(self, other):\n        return self.x * other.y - self.y * other.x\n\n    def norm(self):\n        return self.x * self.x + self.y * self.y\n\n    def abs(self):\n        return math.sqrt(self.norm())\n\nclass Point(Vector):\n    def __init__(self, *args, **kargs):\n        return super().__init__(*args, **kargs)\n\nclass Segment:\n    def __init__(self, p1=Point(0, 0), p2=Point(1, 1)):\n        self.p1 = p1\n        self.p2 = p2\n\ndef ccw(p0, p1, p2):\n    a = p1 - p0\n    b = p2 - p0\n    if a.cross(b) > EPS:\n        return 1\n    elif a.cross(b) < -EPS:\n        return -1\n    elif a.dot(b) < -EPS:\n        return 2\n    elif a.norm() < b.norm():\n        return -2\n    else:\n        return 0\n\ndef read_and_print_results(p0, p1, n):\n    for _ in range(n):\n        line = stdin.readline().strip().split()\n        p2 = Vector(int(line[0]), int(line[1]))\n        result = ccw(p0, p1, p2)\n        if result == 1:\n            print('COUNTER_CLOCKWISE')\n        elif result == -1:\n            print('CLOCKWISE')\n        elif result == 2:\n            print('ONLINE_BACK')\n        elif result == -2:\n            print('ONLINE_FRONT')\n        elif result == 0:\n            print('ON_SEGMENT')\n\nx0, y0, x1, y1 = [int(i) for i in input().split()]\np0 = Point(x0, y0)\np1 = Point(x1, y1)\nn = int(input())\nread_and_print_results(p0, p1, n)\n"
  },
  {
    "language": "Python",
    "code": "# coding: utf-8\nimport math\nclass Point():\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n        # self.z = 0\n        self.length = math.sqrt(x**2 + y**2)\n\ninit_point = map(float,raw_input().split())\np0 = Point(init_point[0], init_point[1])\np1 = Point(init_point[2], init_point[3])\n\nq = int(raw_input())\nfor i in range(q):\n    xp2,yp2 = map(float,raw_input().split())\n    p2 = Point(xp2,yp2)\n    p0p2 = Point(p2.x - p0.x, p2.y - p0.y)\n    p0p1 = Point(p1.x - p0.x, p1.y - p0.y)\n    p1p2 = Point(p2.x - p1.x, p2.y - p1.y)\n    # ?????????????????????(3)(4)(5)\n    if p0p1.x * p0p2.y - p0p1.y * p0p2.x == 0:\n        if max(p0p1.length, p0p2.length) < p1p2.length: \n            print \"ONLINE_BACK\"\n        elif p0p1.length < p0p2.length:\n            print \"ONLINE_FRONT\"\n        elif p0p1.length >= p0p2.length:\n            print \"ON_SEGMENT\"\n    else:\n        # ?????????z????????????\n        z = p0p1.x * p0p2.y - p0p1.y * p0p2.x\n        if z > 0:\n            print \"COUNTER_CLOCKWISE\"\n        else:\n            print \"CLOCKWISE\""
  },
  {
    "language": "Python",
    "code": "# -*- coding: utf-8 -*-\n\"\"\"\nhttp://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_C&lang=jp\n\n\"\"\"\nimport sys\nfrom sys import stdin\ninput = stdin.readline\n\n\nclass Point(object):\n    epsilon = 1e-10\n\n    def __init__(self, x=0.0, y=0.0):\n        if isinstance(x, tuple):\n            self.x = x[0]\n            self.y = x[1]\n        else:\n            self.x = x\n            self.y = y\n\n    # ????????????\n    def __add__(self, other):\n        return Point(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other):\n        return Point(self.x - other.x, self.y - other.y)\n\n    def __mul__(self, other):\n        return Point(other * self.x, other * self.y)\n\n    def __truediv__(self, other):\n        return Point(other / self.x, other / self.y)\n\n    def __lt__(self, other):\n        if self.x == other.x:\n            return self.y < other.y\n        else:\n            return self.x < other.x\n\n    def __eq__(self, other):\n        from math import fabs\n        if fabs(self.x - other.x) < Point.epsilon and fabs(self.y - other.y) < Point.epsilon:\n            return True\n        else:\n            return False\n\n    def norm(self):\n        return self.x * self.x + self.y * self.y\n\n    def abs(self):\n        from math import sqrt\n        return sqrt(self.norm())\n\n\nclass Vector(Point):\n    def __init__(self, x=0.0, y=0.0):\n        if isinstance(x, tuple):\n            self.x = x[0]\n            self.y = x[1]\n        elif isinstance(x, Point):\n            self.x = x.x\n            self.y = x.y\n        else:\n            self.x = x\n            self.y = y\n\n    # ????????????\n    def __add__(self, other):\n        return Vector(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other):\n        return Vector(self.x - other.x, self.y - other.y)\n\n    def __mul__(self, other):\n        return Vector(other * self.x, other * self.y)\n\n    def __truediv__(self, other):\n        return Vector(other / self.x, other / self.y)\n\n    @classmethod\n    def dot(cls, a, b):\n        return a.x * b.x + a.y * b.y\n\n    @classmethod\n    def cross(cls, a, b):\n        return a.x * b.y - a.y * b.x\n\n    @classmethod\n    def is_orthogonal(cls, a, b):\n        return Vector.dot(a, b) == 0.0\n\n    @classmethod\n    def is_parallel(cls, a, b):\n        return Vector.cross(a, b) == 0.0\n\n\nclass Segment(object):\n    def __init__(self, p1=Point(), p2=Point()):\n        if isinstance(p1, Point):\n            self.p1 = p1\n            self.p2 = p2\n        elif isinstance(p1, tuple):\n            self.p1 = Point(p1[0], p1[1])\n            self.p2 = Point(p2[0], p2[1])\n\n    @classmethod\n    def is_orthogonal(cls, s1, s2):\n        a = Vector(s1.p2 - s1.p1)\n        b = Vector(s2.p2 - s2.p1)\n        return Vector.is_orthogonal(a, b)\n\n    @classmethod\n    def is_parallel(cls, s1, s2):\n        a = Vector(s1.p2 - s1.p1)\n        b = Vector(s2.p2 - s2.p1)\n        return Vector.is_parallel(a, b)\n\n\nclass Line(Segment):\n    pass\n\n\nclass Cirle(object):\n    def __init__(self, c=Point(), r=0.0):\n        self.c = c\n        self.r = r\n\n\ndef ccw(p0, p1, p2):\n    a = Vector(p1 - p0)\n    b = Vector(p2 - p0)\n    epsilon = 1e-10\n    if Vector.cross(a, b) > epsilon:\n        return 'COUNTER_CLOCKWISE'\n    elif Vector.cross(a, b) < -epsilon:\n        return 'CLOCKWISE'\n    elif Vector.dot(a, b) < -epsilon:\n        return 'ONLINE_BACK'\n    elif a.norm() < b.norm():\n        return 'ONLINE_FRONT'\n    else:\n        return 'ON_SEGMENT'\n\n\ndef main(args):\n    x_p0, y_p0, x_p1, y_p1 = map(int, input().split())\n    p0 = Point(x_p0, y_p0)\n    p1 = Point(x_p1, y_p1)\n    q = int(input())\n    for _ in range(q):\n        x_p2, y_p2 = map(int, input().split())\n        p2 = Point(x_p2, y_p2)\n        result = ccw(p0, p1, p2)\n        print(result)\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"
  },
  {
    "language": "Python",
    "code": "# -*- coding: utf-8 -*-\n\nimport collections\nimport math\n\n\nclass Vector2(collections.namedtuple(\"Vector2\", [\"x\",  \"y\"])):\n\n    def __add__(self, other):\n        return Vector2(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other):\n        return Vector2(self.x - other.x, self.y - other.y)\n\n    def __mul__(self, scalar):\n        return Vector2(self.x * scalar, self.y * scalar)\n\n    def __neg__(self):\n        return Vector2(-self.x, -self.y)\n\n    def __pos__(self):\n        return Vector2(+self.x, +self.y)\n\n    def __abs__(self):  # norm\n        return math.sqrt(float(self.x * self.x + self.y * self.y))\n\n    def dot(self, other):  # dot product\n        return self.x * other.x + self.y * other.y\n\n    def cross(self, other):  # cross product\n        return self.x * other.y - self.y * other.x\n\n\ndef getDistanceSP(segment, point):\n    p = point\n    p1, p2 = segment\n    if (p2 - p1).dot(p - p1) < 0:\n        return abs(p - p1)\n    if (p1 - p2).dot(p - p2) < 0:\n        return abs(p - p2)\n    return abs((p2 - p1).cross(p - p1)) / abs(p2 - p1)\n\n\ndef getDistance(s1, s2):\n    if 0:  # intersect\n        return 0\n    a, b = s1\n    c, d = s2\n    return min(getDistanceSP(s1, c), getDistanceSP(s1, d), getDistanceSP(s2, a), getDistanceSP(s2, b))\n\n\ndef ccw(p0, p1, p2):\n    a = p1 - p0\n    b = p2 - p0\n    if a.cross(b) > 0:\n        return 1\n    elif a.cross(b) < 0:\n        return -1\n    elif a.dot(b) < 0:\n        return 2\n    elif abs(a) < abs(b):\n        return -2\n    else:\n        return 0\n\n\nif __name__ == '__main__':\n\n    a, b, c, d = map(int, input().split())\n    p0 = Vector2(a, b)\n    p1 = Vector2(c, d)\n    q = int(input())\n    ans = []\n    for _ in range(q):\n        e, f = map(int, input().split())\n        p2 = Vector2(e, f)\n        ans.append(ccw(p0, p1, p2))\n    dic = {1: \"COUNTER_CLOCKWISE\", -1: \"CLOCKWISE\",\n           2: \"ONLINE_BACK\", -2: \"ONLINE_FRONT\", 0: \"ON_SEGMENT\"}\n    for a in ans:\n        print(dic[a])\n\n"
  },
  {
    "language": "Python",
    "code": "x0,y0,x1,y1 = map(int, input().split( ))\np0 = [x0,y0]\np1= [x1,y1]\nv1 =[p1[0]-p0[0],p1[1]-p0[1]]\nq = int(input())\ndef cross(a,b):\n    crs = a[0]*b[1] - a[1]*b[0]\n    return crs\ndef dot(a,b):\n    dt = a[0]*b[0] + a[1]*b[1]\n    return dt\neps = 0.000001\nfor i in range(q):\n    p2 = list(map(int, input().split( )))\n    v2=[p2[0]-p0[0],p2[1]-p0[1]]\n    if cross(v1,v2) >eps:\n        print(\"COUNTER_CLOCKWISE\")\n    elif cross(v1,v2) <-eps:\n        print(\"CLOCKWISE\")\n    elif dot(v1,v2)<-eps:\n        print(\"ONLINE_BACK\")\n    elif v1[0]**2+v1[1]**2 < v2[0]**2+v2[1]**2:#abs(v1[0])<abs(v2[0]):はx成分0でおかしい\n        print(\"ONLINE_FRONT\")\n    else:#p1=p2はこっち\n        print(\"ON_SEGMENT\")\n"
  },
  {
    "language": "Python",
    "code": "#!/usr/bin/env python3\n# CGL_1_C: Points/Vectors - Counter-Clockwise\n\nfrom enum import Enum\nfrom math import sqrt\n\n\nclass Position(Enum):\n    COUNTER_CLOCKWISE = 0\n    CLOCKWISE = 1\n    ONLINE_BACK = 2\n    ONLINE_FRONT = 3\n    ON_SEGMENT = 4\n\n\ndef dot(v1, v2):\n    x1, y1 = v1\n    x2, y2 = v2\n    return x1 * x2 + y1 * y2\n\n\ndef length(v):\n    x, y = v\n    return sqrt(x**2 + y**2)\n\n\ndef orthogonal(v):\n    x, y = v\n    return -y, x\n\n\ndef ccw(v1, v2):\n    d1 = dot(v1, v2)\n    d2 = dot(orthogonal(v1), v2)\n\n    if d2 > 0:\n        return Position.COUNTER_CLOCKWISE\n    elif d2 < 0:\n        return Position.CLOCKWISE\n    elif d1 < 0:\n        return Position.ONLINE_BACK\n    else:\n        if length(v1) >= length(v2):\n            return Position.ON_SEGMENT\n        else:\n            return Position.ONLINE_FRONT\n\n\ndef run():\n    x0, y0, x1, y1 = [int(i) for i in input().split()]\n    q = int(input())\n\n    for _ in range(q):\n        x2, y2 = [int(i) for i in input().split()]\n        pos = ccw((x1-x0, y1-y0), (x2-x0, y2-y0))\n        print(pos.name)\n\n\nif __name__ == '__main__':\n    run()\n\n"
  },
  {
    "language": "Python",
    "code": "import math\nfrom typing import Union\n\n\nclass Point(object):\n    __slots__ = ['x', 'y']\n\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __add__(self, other):\n        return Point(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other):\n        return Point(self.x - other.x, self.y - other.y)\n\n    def __mul__(self, other: Union[int, float]):\n        return Point(self.x * other, self.y * other)\n\n    def __repr__(self):\n        return f\"({self.x},{self.y})\"\n\n\nclass Vector(Point):\n    __slots__ = ['x', 'y', 'pt1', 'pt2']\n\n    def __init__(self, pt1: Point, pt2: Point):\n        from_pt1_to_pt2 = pt2 - pt1\n        super().__init__(from_pt1_to_pt2.x, from_pt1_to_pt2.y)\n        self.pt1 = pt1\n        self.pt2 = pt2\n\n    def dot(self, other):\n        return self.x * other.x + self.y * other.y\n\n    def cross(self, other):\n        return self.x * other.y - self.y * other.x\n\n    def norm(self):\n        return pow(self.x, 2) + pow(self.y, 2)\n\n    def abs(self):\n        return math.sqrt(self.norm())\n\n    def __repr__(self):\n        return f\"{self.pt1},{self.pt2}\"\n\n\nclass Segment(Vector):\n    __slots__ = ['x', 'y', 'pt1', 'pt2']\n\n    def __init__(self, pt1: Point, pt2: Point):\n        super().__init__(pt1, pt2)\n\n    def projection(self, pt: Point)-> Point:\n        t = self.dot(Vector(self.pt1, pt)) / pow(self.abs(), 2)\n        return Point(self.pt1.x + t * self.x, self.pt1.y + t * self.y)\n\n    def reflection(self, pt: Point) -> Point:\n        return self.projection(pt) * 2 - pt\n\n    def point_geometry(self, pt: Point):\n        vec_pt1_to_pt = Vector(self.pt1, pt)\n        cross = self.cross(vec_pt1_to_pt)\n        if cross > 0:\n            print('COUNTER_CLOCKWISE')\n            return\n        elif cross < 0:\n            print('CLOCKWISE')\n            return\n        else:           # cross == 0\n            dot = self.dot(vec_pt1_to_pt)\n            if dot < 0:\n                print('ONLINE_BACK')\n                return\n            else:       # dot > 0\n                if self.abs() < vec_pt1_to_pt.abs():\n                    print('ONLINE_FRONT')\n                    return\n                else:\n                    print('ON_SEGMENT')\n                    return\n\n    def __repr__(self):\n        return f\"{self.pt1},{self.pt2}\"\n\n\ndef main():\n    p0_x, p0_y, p1_x, p1_y = map(int, input().split())\n    p0 = Point(p0_x, p0_y)\n    seg = Segment(p0, Point(p1_x, p1_y))\n    num_query = int(input())\n\n    for i in range(num_query):\n        p2_x, p2_y = map(int, input().split())\n        seg.point_geometry(Point(p2_x, p2_y))\n    return\n\n\nmain()\n"
  },
  {
    "language": "Python",
    "code": "from sys import stdin\nreadline = stdin.readline\n\n\n\ndef lt(a, b):\n    if a.real != b.real:\n        return a.real < b.real\n    return a.imag < b.imag\n\n\ndef main():\n    x1, y1, x2, y2 = map(int, readline().split())\n    p1, p2 = x1 + y1 * 1j, x2 + y2 * 1j\n    q = int(readline())\n    for i in range(q):\n        xi, yi = map(int, readline().split())\n        pi = xi + yi * 1j\n\n        s = cross(p2 - p1, pi - p1)\n        if abs(s) < 1e-10:\n            if (lt(p1, p2) and lt(p2, pi)) or (lt(pi, p2) and lt(p2, p1)):\n                print('ONLINE_FRONT')\n            elif (lt(pi, p1) and lt(p1, p2)) or (lt(p2, p1) and lt(p1, pi)):\n                print('ONLINE_BACK')\n            else:\n                print('ON_SEGMENT')\n        elif s < 0:\n            print('CLOCKWISE')\n        else:\n            print('COUNTER_CLOCKWISE')\n\n\ndef projecter(a, b):\n    return dot(a, b) / dot(a, a)\n\n\ndef dot(a, b):\n    return a.real * b.real + a.imag * b.imag\n\n\ndef cross(a, b):\n    return a.real * b.imag - a.imag * b.real\nmain()"
  },
  {
    "language": "Python",
    "code": "# coding=utf-8\n\n\ndef cross_product(vect1, vect2):\n    return vect1[0]*vect2[1] - vect1[1]*vect2[0]\n\n\ndef vector_plus(vect1, vect2):\n    return [el1 + el2 for el1, el2 in zip(vect1, vect2)]\n\n\ndef vector_minus(vect1, vect2):\n    return [el1 - el2 for el1, el2 in zip(vect1, vect2)]\n\n\ndef vector_product(vect1, vect2):\n    return [el1 * el2 for el1, el2 in zip(vect1, vect2)]\n\n\ndef vector_divide(vect1, vect2):\n    return [el1 / el2 for el1, el2 in zip(vect1, vect2)]\n\n\ndef which_place(origin, line_to1, line_to2):\n    line1 = vector_minus(line_to1, origin)\n    line2 = vector_minus(line_to2, origin)\n    judge = cross_product(line1, line2)\n\n    if judge > 0:\n        return \"COUNTER_CLOCKWISE\"\n    if judge < 0:\n        return \"CLOCKWISE\"\n    if judge == 0:\n        try:\n            judge2 = line2[0]/line1[0]\n        except ZeroDivisionError:\n            judge2 = line2[1]/line1[1]\n        \n        if judge2 < 0:\n            return \"ONLINE_BACK\"\n        if judge2 > 1:\n            return \"ONLINE_FRONT\"\n        else:\n            return \"ON_SEGMENT\"\n\n\nif __name__ == '__main__':\n    xy_list = list(map(int, input().split()))\n    p0_list = xy_list[:2]\n    p1_list = xy_list[2:]\n    Q = int(input())\n\n    for i in range(Q):\n        p2_list = list(map(int, input().split()))\n        place = which_place(p0_list, p1_list, p2_list)\n        print(place)\n\n"
  },
  {
    "language": "Python",
    "code": "#! /usr/bin/env python3\n\nfrom typing import List, Tuple\nfrom math import sqrt\nfrom enum import Enum\n\nEPS = 1e-10\n\n\ndef float_equal(x: float, y: float) -> bool:\n    return abs(x - y) < EPS\n\n\nclass PointLocation(Enum):\n    COUNTER_CLOCKWISE = 1\n    CLOCKWISE = 2\n    ONLINE_BACK = 3\n    ONLINE_FRONT = 4\n    ON_SEGMENT = 5\n\n\nclass Point:\n\n    def __init__(self, x: float=0.0, y: float=0.0) -> None:\n        self.x = x\n        self.y = y\n\n    def __repr__(self) -> str:\n        return \"Point({}, {})\".format(self.x, self.y)\n\n    def __eq__(self, other: object) -> bool:\n        if not isinstance(other, Point):\n            # print(\"NotImplemented in Point\")\n            return NotImplemented\n        return float_equal(self.x, other.x) and \\\n            float_equal(self.y, other.y)\n\n    def __add__(self, other: 'Point') -> 'Point':\n        return Point(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other: 'Point') -> 'Point':\n        return Point(self.x - other.x, self.y - other.y)\n\n    def __mul__(self, k: float) -> 'Point':\n        return Point(self.x * k, self.y * k)\n\n    def __rmul__(self, k: float) -> 'Point':\n        return self * k\n\n    def __truediv__(self, k: float) -> 'Point':\n        return Point(self.x / k, self.y / k)\n\n    def __lt__(self, other: 'Point') -> bool:\n        return self.y < other.y \\\n            if abs(self.x - other.x) < EPS \\\n            else self.x < other.x\n\n    def norm(self):\n        return self.x * self.x + self.y * self.y\n\n    def abs(self):\n        return sqrt(self.norm())\n\n    def dot(self, other: 'Point') -> float:\n        return self.x * other.x + self.y * other.y\n\n    def cross(self, other: 'Point') -> float:\n        return self.x * other.y - self.y * other.x\n\n    def is_orthogonal(self, other: 'Point') -> bool:\n        return float_equal(self.dot(other), 0.0)\n\n    def is_parallel(self, other: 'Point') -> bool:\n        return float_equal(self.cross(other), 0.0)\n\n    def distance(self, other: 'Point') -> float:\n        return (self - other).abs()\n\n    def in_side_of(self, seg: 'Segment') -> bool:\n        return seg.vector().dot(\n            Segment(seg.p1, self).vector()) >= 0\n\n    def in_width_of(self, seg: 'Segment') -> bool:\n        return \\\n            self.in_side_of(seg) and \\\n            self.in_side_of(seg.reverse())\n\n    def distance_to_line(self, seg: 'Segment') -> float:\n        return \\\n            abs((self - seg.p1).cross(seg.vector())) / \\\n            seg.length()\n\n    def distance_to_segment(self, seg: 'Segment') -> float:\n        if not self.in_side_of(seg):\n            return self.distance(seg.p1)\n        if not self.in_side_of(seg.reverse()):\n            return self.distance(seg.p2)\n        else:\n            return self.distance_to_line(seg)\n\n    def location(self, seg: 'Segment') -> PointLocation:\n        p = self - seg.p1\n        d = seg.vector().cross(p)\n        if d < 0:\n            return PointLocation.CLOCKWISE\n        elif d > 0:\n            return PointLocation.COUNTER_CLOCKWISE\n        else:\n            r = (self.x - seg.p1.x) / (seg.p2.x - seg.p1.x)\n            if r < 0:\n                return PointLocation.ONLINE_BACK\n            elif r > 1:\n                return PointLocation.ONLINE__FRONT\n            else:\n                return PointLocation.ON_SEGMENT\n\n\nVector = Point\n\n\nclass Segment:\n\n    def __init__(self, p1: Point = None, p2: Point = None) -> None:\n        self.p1: Point = Point() if p1 is None else p1\n        self.p2: Point = Point() if p2 is None else p2\n\n    def __repr__(self) -> str:\n        return \"Segment({}, {})\".format(self.p1, self.p2)\n\n    def __eq__(self, other: object) -> bool:\n        if not isinstance(other, Segment):\n            # print(\"NotImplemented in Segment\")\n            return NotImplemented\n        return self.p1 == other.p1 and self.p2 == other.p2\n\n    def vector(self) -> Vector:\n        return self.p2 - self.p1\n\n    def reverse(self) -> 'Segment':\n        return Segment(self.p2, self.p1)\n\n    def length(self) -> float:\n        return self.p1.distance(self.p2)\n\n    def is_orthogonal(self, other: 'Segment') -> bool:\n        return self.vector().is_orthogonal(other.vector())\n\n    def is_parallel(self, other: 'Segment') -> bool:\n        return self.vector().is_parallel(other.vector())\n\n    def projection(self, p: Point) -> Point:\n        v = self.vector()\n        vp = p - self.p1\n        return v.dot(vp) / v.norm() * v + self.p1\n\n    def reflection(self, p: Point) -> Point:\n        x = self.projection(p)\n        return p + 2 * (x - p)\n\n    def intersect_ratio(self, other: 'Segment') -> Tuple[float, float]:\n        a = self.vector()\n        b = other.vector()\n        c = self.p1 - other.p1\n        s = b.cross(c) / a.cross(b)\n        t = a.cross(c) / a.cross(b)\n        return s, t\n\n    def intersects(self, other: 'Segment') -> bool:\n        s, t = self.intersect_ratio(other)\n        return (0 <= s <= 1) and (0 <= t <= 1)\n\n    def intersection(self, other: 'Segment') -> Point:\n        s, _ = self.intersect_ratio(other)\n        return self.p1 + s * self.vector()\n\n    def distance_with_segment(self, other: 'Segment') -> float:\n        if not self.is_parallel(other) and \\\n                self.intersects(other):\n            return 0\n        else:\n            return min(\n                self.p1.distance_to_segment(other),\n                self.p2.distance_to_segment(other),\n                other.p1.distance_to_segment(self),\n                other.p2.distance_to_segment(self))\n\n\nLine = Segment\n\n\nclass Circle:\n\n    def __init__(self, c: Point=None, r: float=0.0) -> None:\n        self.c: Point = Point() if c is None else c\n        self.r: float = r\n\n    def __eq__(self, other: object) -> bool:\n        if not isinstance(other, Circle):\n            return NotImplemented\n        return self.c == other.c and self.r == other.r\n\n    def __repr__(self) -> str:\n        return \"Circle({}, {})\".format(self.c, self.r)\n\ndef main() -> None:\n    x0, y0, x1, y1 = [int(x) for x in input().split()]\n    s = Segment(Point(x0, y0), Point(x1, y1))\n    q = int(input())\n\n    for _ in range(q):\n        x2, y2 = [int(x) for x in input().split()]\n        print(Point(x2, y2).location(s).name)\n\n\nif __name__ == \"__main__\":\n    main()\n    \n"
  },
  {
    "language": "Python",
    "code": "if __name__ == \"__main__\":\n    x_p0, y_p0, x_p1, y_p1 = map(lambda x: int(x), input().split())\n    q = int(input())\n\n    p0 = complex(x_p0, y_p0)\n    p1 = complex(x_p1, y_p1)\n    p0p1 = p1 - p0\n\n    for _ in range(q):\n        x_p2, y_p2 = map(lambda x: int(x), input().split())\n        p2 = complex(x_p2, y_p2)\n        p0p2 = p2 - p0\n        # Imaginary part of p0p2 / p0p1 (ignoring denominator factor)\n        sin_theta_val = p0p1.real * p0p2.imag - p0p1.imag * p0p2.real\n\n        if abs(sin_theta_val) < 1e-9:\n            if 0 <= p0p1.real * p0p2.real and 0 <= p0p1.imag * p0p2.imag:\n                if abs(p0p1) < abs(p0p2):\n                    print(\"ONLINE_FRONT\")\n                else:\n                    print(\"ON_SEGMENT\")\n            else:\n                print(\"ONLINE_BACK\")\n        else:\n            if 0 < sin_theta_val:\n                print(\"COUNTER_CLOCKWISE\")\n            else:\n                print(\"CLOCKWISE\")\n\n"
  },
  {
    "language": "Python",
    "code": "#! /usr/bin/env python3\n\nfrom typing import List, Tuple\nfrom math import sqrt\nfrom enum import Enum\n\nEPS = 1e-10\n\n\ndef float_equal(x: float, y: float) -> bool:\n    return abs(x - y) < EPS\n\n\nclass PointLocation(Enum):\n    COUNTER_CLOCKWISE = 1\n    CLOCKWISE = 2\n    ONLINE_BACK = 3\n    ONLINE_FRONT = 4\n    ON_SEGMENT = 5\n\n\nclass Point:\n\n    def __init__(self, x: float=0.0, y: float=0.0) -> None:\n        self.x = x\n        self.y = y\n\n    def __repr__(self) -> str:\n        return \"Point({}, {})\".format(self.x, self.y)\n\n    def __eq__(self, other: object) -> bool:\n        if not isinstance(other, Point):\n            # print(\"NotImplemented in Point\")\n            return NotImplemented\n        return float_equal(self.x, other.x) and \\\n            float_equal(self.y, other.y)\n\n    def __add__(self, other: 'Point') -> 'Point':\n        return Point(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other: 'Point') -> 'Point':\n        return Point(self.x - other.x, self.y - other.y)\n\n    def __mul__(self, k: float) -> 'Point':\n        return Point(self.x * k, self.y * k)\n\n    def __rmul__(self, k: float) -> 'Point':\n        return self * k\n\n    def __truediv__(self, k: float) -> 'Point':\n        return Point(self.x / k, self.y / k)\n\n    def __lt__(self, other: 'Point') -> bool:\n        return self.y < other.y \\\n            if abs(self.x - other.x) < EPS \\\n            else self.x < other.x\n\n    def norm(self):\n        return self.x * self.x + self.y * self.y\n\n    def abs(self):\n        return sqrt(self.norm())\n\n    def dot(self, other: 'Point') -> float:\n        return self.x * other.x + self.y * other.y\n\n    def cross(self, other: 'Point') -> float:\n        return self.x * other.y - self.y * other.x\n\n    def is_orthogonal(self, other: 'Point') -> bool:\n        return float_equal(self.dot(other), 0.0)\n\n    def is_parallel(self, other: 'Point') -> bool:\n        return float_equal(self.cross(other), 0.0)\n\n    def distance(self, other: 'Point') -> float:\n        return (self - other).abs()\n\n    def in_side_of(self, seg: 'Segment') -> bool:\n        return seg.vector().dot(\n            Segment(seg.p1, self).vector()) >= 0\n\n    def in_width_of(self, seg: 'Segment') -> bool:\n        return \\\n            self.in_side_of(seg) and \\\n            self.in_side_of(seg.reverse())\n\n    def distance_to_line(self, seg: 'Segment') -> float:\n        return \\\n            abs((self - seg.p1).cross(seg.vector())) / \\\n            seg.length()\n\n    def distance_to_segment(self, seg: 'Segment') -> float:\n        if not self.in_side_of(seg):\n            return self.distance(seg.p1)\n        if not self.in_side_of(seg.reverse()):\n            return self.distance(seg.p2)\n        else:\n            return self.distance_to_line(seg)\n\n    def location(self, seg: 'Segment') -> PointLocation:\n        p = self - seg.p1\n        d = seg.vector().cross(p)\n        if d < 0:\n            return PointLocation.CLOCKWISE\n        elif d > 0:\n            return PointLocation.COUNTER_CLOCKWISE\n        else:\n            if seg.p2.x != seg.p1.x:\n                r = (self.x - seg.p1.x) / (seg.p2.x - seg.p1.x)\n            else:\n                r = (self.y - seg.p1.y) / (seg.p2.y - seg.p1.y)\n            if r < 0:\n                return PointLocation.ONLINE_BACK\n            elif r > 1:\n                return PointLocation.ONLINE_FRONT\n            else:\n                return PointLocation.ON_SEGMENT\n\n\nVector = Point\n\n\nclass Segment:\n\n    def __init__(self, p1: Point = None, p2: Point = None) -> None:\n        self.p1: Point = Point() if p1 is None else p1\n        self.p2: Point = Point() if p2 is None else p2\n\n    def __repr__(self) -> str:\n        return \"Segment({}, {})\".format(self.p1, self.p2)\n\n    def __eq__(self, other: object) -> bool:\n        if not isinstance(other, Segment):\n            # print(\"NotImplemented in Segment\")\n            return NotImplemented\n        return self.p1 == other.p1 and self.p2 == other.p2\n\n    def vector(self) -> Vector:\n        return self.p2 - self.p1\n\n    def reverse(self) -> 'Segment':\n        return Segment(self.p2, self.p1)\n\n    def length(self) -> float:\n        return self.p1.distance(self.p2)\n\n    def is_orthogonal(self, other: 'Segment') -> bool:\n        return self.vector().is_orthogonal(other.vector())\n\n    def is_parallel(self, other: 'Segment') -> bool:\n        return self.vector().is_parallel(other.vector())\n\n    def projection(self, p: Point) -> Point:\n        v = self.vector()\n        vp = p - self.p1\n        return v.dot(vp) / v.norm() * v + self.p1\n\n    def reflection(self, p: Point) -> Point:\n        x = self.projection(p)\n        return p + 2 * (x - p)\n\n    def intersect_ratio(self, other: 'Segment') -> Tuple[float, float]:\n        a = self.vector()\n        b = other.vector()\n        c = self.p1 - other.p1\n        s = b.cross(c) / a.cross(b)\n        t = a.cross(c) / a.cross(b)\n        return s, t\n\n    def intersects(self, other: 'Segment') -> bool:\n        s, t = self.intersect_ratio(other)\n        return (0 <= s <= 1) and (0 <= t <= 1)\n\n    def intersection(self, other: 'Segment') -> Point:\n        s, _ = self.intersect_ratio(other)\n        return self.p1 + s * self.vector()\n\n    def distance_with_segment(self, other: 'Segment') -> float:\n        if not self.is_parallel(other) and \\\n                self.intersects(other):\n            return 0\n        else:\n            return min(\n                self.p1.distance_to_segment(other),\n                self.p2.distance_to_segment(other),\n                other.p1.distance_to_segment(self),\n                other.p2.distance_to_segment(self))\n\n\nLine = Segment\n\n\nclass Circle:\n\n    def __init__(self, c: Point=None, r: float=0.0) -> None:\n        self.c: Point = Point() if c is None else c\n        self.r: float = r\n\n    def __eq__(self, other: object) -> bool:\n        if not isinstance(other, Circle):\n            return NotImplemented\n        return self.c == other.c and self.r == other.r\n\n    def __repr__(self) -> str:\n        return \"Circle({}, {})\".format(self.c, self.r)\n\n\ndef main() -> None:\n    x0, y0, x1, y1 = [int(x) for x in input().split()]\n    s = Segment(Point(x0, y0), Point(x1, y1))\n    q = int(input())\n\n    for _ in range(q):\n        x2, y2 = [int(x) for x in input().split()]\n        print(Point(x2, y2).location(s).name)\n\n\nif __name__ == \"__main__\":\n    main()\n\n"
  },
  {
    "language": "Python",
    "code": "from math import pi, cos, sin, atan2\nEPS = 10**(-9)\n\ndef eq(value1, value2):\n    return abs(value1-value2) <= EPS\n\nclass Point():\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n        self.arg = atan2(y, x) # -PI ~ PI\n    \n    def __str__(self):\n        return \"{0:.8f} {1:.8f}\".format(self.x, self.y)\n    \n    def __add__(self, other):\n        return Point(self.x + other.x, self.y + other.y)\n    \n    def __sub__(self, other):\n        return Point(self.x - other.x, self.y - other.y)\n    \n    def __mul__(self, scal):\n        return Point(self.x*scal, self.y*scal)\n    \n    def __truediv__(self, scal):\n        return Point(self.x/scal, self.y/scal)\n    \n    def __eq__(self, other):\n        return eq(self.x, other.x) and eq(self.y, other.y)\n\n    # 原点からの距離\n    def __abs__(self):\n        return (self.x**2+self.y**2)**0.5\n    \n# 原点を中心にrad角だけ回転した点\ndef Rotation(vec: Point, rad):\n    return Point(vec.x*cos(rad)-vec.y*sin(rad), vec.x*sin(rad)+vec.y*cos(rad))\n\n\nclass Circle():\n    def __init__(self, p, r):\n        self.p = p\n        self.r = r\n\n\nclass Line():\n    # 点a, bを通る\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n        self.arg = (a-b).arg % pi\n    \n    def __str__(self):\n        return \"[({0}, {1}) - ({2}, {3})]\".format(self.a.x, self.a.y, self.b.x, self.b.y)\n\n    # pointを通って平行\n    def par(self, point):\n        return Line(point, point+(self.a-self.b))\n\n    # pointを通って垂直\n    def tan(self, point):\n        return Line(point, point + Rotation(self.a-self.b, pi/2))\n\n\nclass Segment(Line):\n    def __init__(self, a, b):\n        super(Line, self).__init__(a, b)\n\n\n# 符号付き面積\ndef cross(vec1: Point, vec2: Point):\n    return vec1.x*vec2.y - vec1.y*vec2.x\n\n# 内積\ndef dot(vec1: Point, vec2: Point):\n    return vec1.x*vec2.x + vec1.y*vec2.y\n\n# 点a->b->cの回転方向\ndef ccw(a, b, c):\n    if cross(b-a, c-a) > EPS: return +1 # COUNTER_CLOCKWISE\n    if cross(b-a, c-a) < -EPS: return -1 # CLOCKWISE\n    if dot(c-a, b-a) < -EPS: return +2 # c -> a -> b\n    if abs(b-a) < abs(c-a): return -2 # a -> b -> c\n    return 0 # a -> c -> b\n\n\n# pのlへの射影\ndef projection(l, p):\n    t = dot(l.b-l.a, p-l.a) / abs(l.a-l.b)**2\n    return l.a + (l.b-l.a)*t\n\n# pのlによる反射\ndef reflection(l, p):\n    return p + (projection(l, p) - p)*2\n\ndef isPararell(l1, l2):\n    return eq(cross(l1.a-l1.b, l2.a-l2.b), 0)\n\ndef isVertical(l1, l2):\n    return eq(dot(l1.a-l1.b, l2.a-l2.b), 0)\n\n\ndef isIntersect_lp(l, p):\n    return abs(ccw(l.a, l.b, p)) != 1\n\ndef isIntersect_ll(l1, l2):\n    return not isPararell(l1, l2) or isIntersect_lp(l1, l2.a)\n\ndef isIntersect_sp(s, p):\n    return ccw(s.a, s.b, p) == 0\n\ndef isIntersect_ss(s1, s2):\n    return ccw(s1.a, s1.b, s2.a)*ccw(s1.a, s1.b, s2.b) <= 0 and ccw(s2.a, s2.b, s1.a)*ccw(s2.a, s2.b, s1.b) <= 0\n\ndef isIntersect_ls(l, s):\n    return cross(l.b - l.a, s.a - l.a) * cross(l.b - l.a, s.b - l.a) < EPS\n\ndef isIntersect_cp(c, p):\n    return abs(abs(c.p - p) - c.r) < EPS\n\ndef isIntersect_cl(c, l):\n    return distance_lp(l, c.p) <= c.r + EPS\n\ndef isIntersect_cs(c, s):\n    pass\n\ndef isIntersect_cc(c1, c2):\n    pass\n\n\ndef distance_pp(p1, p2):\n    return abs(p1-p2)\n\ndef distance_lp(l, p):\n    return abs(projection(l,p)-p)\n\ndef distance_ll(l1, l2):\n    return 0 if isIntersect_ll(l1, l2) else distance_lp(l1, l2.a)\n\ndef distance_sp(s, p):\n    r = projection(s, p)\n    if isIntersect_sp(s, r): return abs(r-p)\n    return min(abs(s.a-p), abs(s.b-p))\n\ndef distance_ss(s1, s2):\n    if isIntersect_ss(s1, s2): return 0\n    return min([distance_sp(s1, s2.a), distance_sp(s1, s2.b), distance_sp(s2, s1.a), distance_sp(s2, s1.b)])\n\ndef distance_ls(l, s):\n    if isIntersect_ls(l, s): return 0\n    return min(distance_lp(l, s.a), distance_lp(l, s.b))\n\n\ndef crosspoint_ll(l1, l2):\n    A = cross(l1.b - l1.a, l2.b - l2.a)\n    B = cross(l1.b - l1.a, l1.b - l2.a)\n    if eq(abs(A), 0) and eq(abs(B), 0): return l2.a\n    return l2.a + (l2.b - l2.a) * B / A\n\ndef crosspoint_ss(s1, s2):\n    return crosspoint_ll(s1, s2)\n\ndef crosspoint_lc(l, c):\n    if eq(distance_lp(l, c.p), c.r): return [c.p]\n    p = projection(l, c.p)\n    e = (l.b - l.a) / abs(l.b-l.a)\n    dis = (c.r**2-abs(p-c.p)**2)**0.5\n    return [p + e*dis, p - e*dis]\n\ndef crosspoint_sc(s, c):\n    pass\n\ndef crosspoint_cc(c1, c2):\n    d = abs(c1.p-c2.p)\n    if not abs(c1.r-c2.r) <= d <= c1.r+c2.r:\n        return []\n    mid_p = (c2.p * (c1.r**2-c2.r**2+d**2) + c1.p * (c2.r**2-c1.r**2+d**2)) / (2*d**2)\n    tanvec = Rotation(c1.p-c2.p, pi/2)\n    return crosspoint_lc(Line(mid_p, mid_p+tanvec), c1)\n\n\n# pからのcの接点\ndef tangent_cp(c, p):\n    return crosspoint_cc(c, Circle(p, (abs(p-c.p)**2 - c.r**2)**0.5))\n\n\n\n\n\nimport sys\ninput = sys.stdin.readline\n\ndef verify_1A():\n    p1x, p1y, p2x, p2y = map(int, input().split())\n    l = Line(Point(p1x, p1y), Point(p2x, p2y))\n    Q = int(input())\n    Query = [list(map(int, input().split())) for _ in range(Q)]\n    for px, py in Query:\n        p = Point(px, py)\n        print(projection(l, p))\n\ndef verify_1B():\n    p1x, p1y, p2x, p2y = map(int, input().split())\n    l = Line(Point(p1x, p1y), Point(p2x, p2y))\n    Q = int(input())\n    Query = [list(map(int, input().split())) for _ in range(Q)]\n    for px, py in Query:\n        p = Point(px, py)\n        print(reflection(l, p))\n\ndef verify_1C():\n    p1x, p1y, p2x, p2y = map(int, input().split())\n    p1 = Point(p1x, p1y); p2 = Point(p2x, p2y)\n    Q = int(input())\n    Query = [list(map(int, input().split())) for _ in range(Q)]\n    for px, py in Query:\n        p = Point(px, py)\n        result = ccw(p1, p2, p)\n        if result == 1:\n            print(\"COUNTER_CLOCKWISE\")\n        elif result == -1:\n            print(\"CLOCKWISE\")\n        elif result == 2:\n            print(\"ONLINE_BACK\")\n        elif result == -2:\n            print(\"ONLINE_FRONT\")\n        else:\n            print(\"ON_SEGMENT\")\n\nverify_1C()\n"
  },
  {
    "language": "Python",
    "code": "import math\n\nx0,y0,x1,y1 = map(float, raw_input().split())\nq = int(raw_input())\nfor _ in xrange(q):\n  x2,y2 = map(float, raw_input().split())\n  ax = x1-x0\n  ay = y1-y0\n  bx = x2-x0\n  by = y2-y0\n  # check sin is positive or negative\n  sin = ax*by-ay*bx\n  if sin == 0:\n    if(ax*bx < 0 or ay*by < 0):\n      print \"ONLINE_BACK\"\n    else:\n      if math.fabs(bx) > math.fabs(ax) or math.fabs(by) > math.fabs(ay):\n        print \"ONLINE_FRONT\"\n      else:\n        print \"ON_SEGMENT\"\n  elif sin > 0:\n    print \"COUNTER_CLOCKWISE\"\n  else:\n    print \"CLOCKWISE\""
  },
  {
    "language": "Python",
    "code": "import math\nEPS=1e-10\n\n#点类\nclass Point():\n\n    def __init__(self,x,y):\n        self.x=x\n        self.y=y\n    \n    def __sub__(self,p):\n        return Point(self.x - p.x, self.y - p.y);\n    def __add__(self,p):\n        return Point(self.x + p.x, self.y + p.y)\n           \n    def __mul__(self,a): #a: scalar\n        return Point(self.x * a, self.y * a)\n    def __truediv__(self,a): #a: scalar\n        return Point(self.x / a, self.y / a)\n   \n    def __str__(self):\n       return  str(self.x)+','+str(self.y)\n    def __repr__(self):\n        return  'Point('+str(self.x)+','+str(self.y)+')'\n    \n    def __lt__(self, other):    \n        if self.y-other.y==0:\n            return self.x<other.x\n        else:\n            return self.y<other.y\n            \n    def __eq__(self, other):    \n        return abs(self.x-other.x)<EPS and  abs(self.y-other.y)<EPS\n\n\n# 线段类\nclass Segment():\n    def __init__(self,p1, p2):\n        self.p1=p1\n        self.p2=p2\n    def __str__(self):\n        return  'segment:('+str(self.p1)+';'+str(self.p2)+')'\n    def __repr__(self):\n        return  'segment:('+str(self.p1)+';'+str(self.p2)+')'\n\n\nclass Circle():\n    def __init__(self,c, r):\n        self.c=c\n        self.r=r\n\n    def __str__(self):\n       return  'Circle:(center point: '+str(self.c)+'; radius: '+str(self.r)+')'\n    def __repr__(self):\n       return  'Circle:(center point: '+str(self.c)+'; radius: '+str(self.r)+')'\n   \n    \n#定义多边形\nclass Polygon():\n    def __init__(self,ps=[]):\n        self.ps=ps\n        self.size=len(ps)\n  \n    def __getitem__(self, i):#iter override \n        return self.ps[i]  \n    def __setitem__(self,i,p): \n        self.ps[i]=p               \n    def __iter__(self):     \n        return self.ps  \n    \n    def addpoint(self,i,p):\n        self.ps.insert(i,p)\n        self.size+=1\n    def delpoint(self,i):\n        self.size-=1\n        return self.ps.pop(i)\n    def sortYX(self):\n        self.ps.sort()\n        #self.ps.sort(key=attrgetter('y','x'))\n    def __str__(self):\n       return  'Polygon:'+str(tuple(self.ps))\n    def __repr__(self):\n       return  'Polygon:'+str(tuple(self.ps))\n        \n    def __len__(self):\n        return len(self.ps)\n    def __eq__(self, other):  \n         return self.ps==other.ps\n    \n    def draw(self):\n      \n       turtle.screensize(800,800,\"black\")\n       #turtle.setup(width=0.9,height=0.9)\n       turtle.title(\"Polygon convex hull\")\n       turtle.setworldcoordinates(-400,-400,400,400) \n\n       #print(turtle.screensize())\n       #mywin = turtle.Screen()    \n       #mywin.   \n       t=turtle.Turtle() \n       #mywin=turtle.Screen()\n       \n       t.pencolor(\"red\")\n       for pt in self.ps:\n           t.goto(pt.x,pt.y)\n           t.dot(10,'white')\n       \n \n\n#***************************点、向量****************************\n\n#向量的模的平方\ndef norm(p):  \n    return p.x * p.x + p.y * p.y\n\n\n#向量P的长度\ndef length(p):\n    return math.sqrt(p.x * p.x + p.y * p.y)\n\n\n# 向量的(点)内积, dot(a,b)=|a|*|b|*cos(a,b) (从a,到b的角)\n# =============================================================================\n# r=dot(a,b),得到矢量a和b的点积，如果两个矢量都非零矢量  \n# r<0：两矢量夹角为钝角； \n# r=0：两矢量夹角为直角； \n# r>0：两矢量夹角为锐角  \n# =============================================================================\ndef dot(a, b) :\n    return a.x * b.x + a.y * b.y\n\n\n\n# =============================================================================\n# # 向量的（叉）外积 cross(a,b)=|a||b|*sin(a,b) (从a,到b的角)由a,b构成的平行四边的面积\n# r=cross(a,b),得到向量a和向量b的叉积  \n# r>0：b在矢量a的逆时针方向；  \n# r=0：a,b 平行共线；  \n# r<0：b在向量a的顺时针方向 \n# =============================================================================\ndef cross( a, b) :\n    return a.x * b.y - a.y * b.x\n\n# 点p在线段s上的投影\ndef project(s, p):\n    base = s.p2 - s.p1\n    r = dot(p - s.p1, base) / norm(base)\n    return s.p1 + base * r \n\n\n# 点a到点b的距离\ndef getDistance(a, b) :\n    return length(a - b)\n\n# 线段l和点p的距离\ndef getDistanceLP(l, p) :\n    return abs( cross(l.p2 - l.p1, p - l.p1) / length(l.p2 - l.p1) )\n\n#getDistanceLP(s3, p7)\n    \n#线段s与点p的距离\ndef getDistanceSP(s, p) :\n    if (dot(s.p2 - s.p1, p - s.p1) < 0.0):\n        return length(p - s.p1)\n    if (dot(s.p1 - s.p2, p - s.p2) < 0.0):\n        return length(p - s.p2)\n    return getDistanceLP(s, p)\n\n#print(getDistanceLP(s3, Point(5,5)))\n#print(getDistanceSP(s3, Point(5,5)))\n\n\n#*************************线段********************************/\n# 线段s1，s2是否正交 <==> 内积为0\ndef isOrthogonalSG(s1, s2) :\n    return abs(dot(s1.p2 - s1.p1, s2.p2 - s2.p1))<EPS\n\n\n# 线段s1，s2是否平行 <==> 叉积为0\ndef isParallelLN(s1,s2) :\n    return abs(cross(s1.p2 - s1.p1, s2.p2 - s2.p1))<0\n\n\n\n\n# 逆时针方向ccw（Counter-Clockwise）\nCOUNTER_CLOCKWISE = 1;\nCLOCKWISE = -1;\nONLINE_BACK = -2;\nONLINE_FRONT = 2;\nON_SEGMENT = 0;\n\ndef ccw(p0, p1, p2) :\n    a = p1 - p0\n    b = p2 - p0\n    if (cross(a, b) > EPS):\n        return COUNTER_CLOCKWISE\n    if (cross(a, b) < -EPS):\n        return CLOCKWISE\n    if (dot(a, b) < -EPS):\n        return ONLINE_BACK\n    if (norm(a) < norm(b)):\n        return ONLINE_FRONT\n    \n    return ON_SEGMENT;\n\n\ndef toleft(p0,p1,p2):\n    a = p1 - p0\n    b = p2 - p0  \n    tmp=cross(a,b)\n    if tmp > EPS:\n        return 1\n    elif abs(tmp)<EPS and norm(a)<=norm(b):\n        return 2  #共线，p2在p0p1的右延长线上\n    elif abs(tmp)<EPS and norm(a)>norm(b):\n        return -2  #共线，p2在p0p1的left延长线上    \n    else:\n        return -1\n\n\n#以线段s为对称轴与点p成线对称的点\ndef reflect(s, p) :\n    return p + (project(s, p) - p) * 2.0\n\n# 判断线段p1p2和线段p3p4是否相交\ndef intersectP4(p1, p2, p3, p4) :\n    return ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 and \\\n            ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0\n\n\n#判断线段s1和s2是否相交\ndef intersectSG(s1, s2) :\n    return intersectP4(s1.p1, s1.p2, s2.p1, s2.p2)\n\n\n# 线段s1和线段s2的距离\ndef getDistanceSG(s1, s2) :\n    # 相交\n    if (intersectSG(s1, s2)):\n        return 0.0\n    return min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2),\\\n        getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2))\n\n\n\n\ns= [int(x) for x in input().split()]\np0=Point(s[0],s[1])\np1=Point(s[2],s[3])\n\nq=int(input())\nfor i in range(0,q):\n    s= [int(x) for x in input().split()]\n    p2=Point(s[0],s[1])\n    \n    vector1=p1-p0\n    vector2=p2-p0\n    if cross(vector1,vector2)>0:\n        print('COUNTER_CLOCKWISE')\n    \n    if cross(vector1,vector2)<0:\n        print('CLOCKWISE')\n        \n    if cross(vector1,vector2)==0:\n        if dot(vector1,vector2)<0:\n            print('ONLINE_BACK')     \n        elif dot(vector1,vector2)>=0 and length(vector1)>=length(vector2) : \n            print('ON_SEGMENT')\n        elif dot(vector1,vector2)>0 and length(vector1)<length(vector2) : \n            print('ONLINE_FRONT')\n            \n       \n"
  },
  {
    "language": "Python",
    "code": "# -*- coding: utf-8 -*-\n\nimport sys\n\nsys.setrecursionlimit(10 ** 9)\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\nINF=float('inf')\n\nclass Geometry:\n\n    EPS = 10 ** -9\n\n    def add(self, a, b):\n        x1, y1 = a\n        x2, y2 = b\n        return (x1+x2, y1+y2)\n\n    def sub(self, a, b):\n        x1, y1 = a\n        x2, y2 = b\n        return (x1-x2, y1-y2)\n\n    def mul(self, a, b):\n        x1, y1 = a\n        if not isinstance(b, tuple):\n            return (x1*b, y1*b)\n        x2, y2 = b \n        return (x1*x2, y1*y2)\n\n    def norm(self, a):\n        x, y = a\n        return x**2 + y**2\n\n    def dot(self, a, b):\n        x1, y1 = a\n        x2, y2 = b\n        return x1*x2 + y1*y2\n\n    def cross(self, a, b):\n        x1, y1 = a\n        x2, y2 = b\n        return x1*y2 - y1*x2\n\n    def project(self, seg, p):\n        \"\"\" 線分segに対する点pの射影 \"\"\"\n        p1, p2 = seg\n        base = self.sub(p2, p1)\n        r = self.dot(self.sub(p, p1), base) / self.norm(base)\n        return self.add(p1, self.mul(base, r))\n\n    def reflect(self, seg, p):\n        \"\"\" 線分segを対称軸とした点pの線対称の点 \"\"\"\n        return self.add(p, self.mul(self.sub(self.project(seg, p), p), 2))\n\n    def ccw(self, p0, p1, p2):\n        \"\"\" 線分p0,p1から線分p0,p2への回転方向 \"\"\"\n        a = self.sub(p1, p0)\n        b = self.sub(p2, p0)\n        # 反時計回り\n        if self.cross(a, b) > self.EPS: return 1\n        # 時計回り\n        if self.cross(a, b) < -self.EPS: return -1\n        # 直線上(p2 => p0 => p1)\n        if self.dot(a, b) < -self.EPS: return 2\n        # 直線上(p0 => p1 => p2)\n        if self.norm(a) < self.norm(b): return -2\n        # 直線上(p0 => p2 => p1)\n        return 0\n\ngm = Geometry()\nx1, y1, x2, y2 = MAP()\na, b = (x1, y1), (x2, y2)\nQ = INT()\nfor i in range(Q):\n    x3, y3  = MAP()\n    res = gm.ccw(a, b, (x3, y3))\n    if res == 1:\n        print('COUNTER_CLOCKWISE')\n    elif res == -1:\n        print('CLOCKWISE')\n    elif res == 2:\n        print('ONLINE_BACK')\n    elif res == -2:\n        print('ONLINE_FRONT')\n    elif res == 0:\n        print('ON_SEGMENT')\n\n"
  },
  {
    "language": "Python",
    "code": "x0,y0,x1,y1 = map(int, input().split())\np0=complex(x0,y0)\np1=complex(x1,y1)\nq = int(input())\n\nCCW = {1: 'COUNTER_CLOCKWISE',\n       -1: 'CLOCKWISE',\n       2: 'ONLINE_BACK',\n       -2: 'ONLINE_FRONT',\n       0: 'ON_SEGMENT',}\n\ndef dot(a, b):\n  return a.real * b.real + a.imag * b.imag\n\ndef cross(a, b):\n  return a.real * b.imag - a.imag * b.real\n\ndef ccw(p0, p1, p2):\n  a = p1-p0\n  b = p2-p0\n  if cross(a,b) > 0:\n    return 1 #couner_clockwise\n  elif cross(a,b) <0:\n    return -1 #clockwise\n  elif dot(a,b) < 0:\n    return 2 #online_back\n  elif abs(a) < abs(b):\n    return -2 #online_front\n  else:\n    return 0 #on_segment\n\nfor i in range(q):\n  p2=complex(*map(int,input().split()))\n  print(CCW[ccw(p0,p1,p2)])\n"
  },
  {
    "language": "Python",
    "code": "import math\n\nEPS = 1e-10\n\nCOUNTER_CLOCKWISE = 1\nCLOCKWISE = -1\nONLINE_BACK = 2\nONLINE_FRONT = -2\nON_SEGMENT = 0\n\nclass Segment():\n    def __init__(self, p1, p2):\n        self.p1 = p1\n        self.p2 = p2\n\nclass Point():\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __add__(self, point):\n        # + 演算子での挙動を指定\n        return Point(self.x+point.x, self.y+point.y)\n\n    def __sub__(self, point):\n        # - 演算子での挙動を指定\n        return Point(self.x-point.x, self.y-point.y)\n\n    def __mul__(self, a):\n        # * 演算子での挙動を指定\n        return Point(a*self.x, a*self.y)\n\n    def __truediv__(self, a):\n        # / 演算子での挙動を指定\n        return Point(self.x/a, self.y/a)\n\n    def __abs__(self):\n        # abs関数での挙動を指定\n        return math.sqrt(self.norm())\n\n    def norm(self):\n        return self.x**2+self.y**2\n\n    def __eq__(self, point):\n        # == 演算子での挙動を指定\n        return abs(self.x-point.x) < EPS and abs(self.y-point.y) <EPS\n\ndef dot(a, b):\n    return a.x*b.x+a.y*b.y\n\ndef cross(a, b):\n    return a.x*b.y - a.y*b.x\n\ndef isOrthogonal(a, b):\n    return dot(a, b) == 0\n\ndef isParallel(a, b):\n    return cross(a, b) == 0\n\ndef project(s, p):\n    #s: Segment(), p: Point()\n    base = s.p2 - s.p1\n    r = dot(p-s.p1, base)/base.norm()\n    return s.p1+base*r\n\ndef reflect(s, p):\n    return p+(project(s, p)-p)*2\n\ndef get_distance(a, b):\n    return abs(a-b)\n\ndef get_distance_lp(l, p):\n    return abs(cross(l.p2-l.p1, p-l.p1)/abs(l.p2-l.p1))\n\ndef get_distance_sp(s, p):\n    if dot(s.p2-s.p1, p-s.p1) < 0:\n        return abs(p-s.p1)\n    if dot(s.p1-s.p2, p-s.p2) < 0:\n        return abs(p-s.p2)\n    return get_distance_lp(s, p)\n\ndef intersect(s1, s2):\n    return True\n    \ndef get_distance(s1, s2):\n    if intersect(s1, s2):\n        return 0\n    return min([get_distance_sp(s1, s2.p1), get_distance_sp(s1, s2.p2),\n                get_distance_sp(s2, s1.p1), get_distance_sp(s2, s1.p2)])\n\ndef ccw(p0, p1, p2):\n    a = p1 - p0\n    b = p2 - p0\n    if cross(a, b) > EPS:\n        return COUNTER_CLOCKWISE\n    if cross(a, b) < -EPS:\n        return CLOCKWISE\n    if dot(a, b) < -EPS:\n        return ONLINE_BACK\n    if a.norm() < b.norm():\n        return ONLINE_FRONT\n    return ON_SEGMENT\n\n\nif __name__ == '__main__':\n    from sys import stdin\n    input = stdin.readline\n\n    x0, y0, x1, y1 = map(int, input().split())\n    p0 = Point(x0, y0)\n    p1 = Point(x1, y1)\n\n    q = int(input())\n    for _ in range(q):\n        x2, y2 = map(int, input().split())\n        p2 = Point(x2, y2)\n        # このccw関数の書き方は、この問題では冗長な書き方となるが、\n        # 今後のために上記のような形にしている。\n        ans = ccw(p0, p1, p2)\n        if ans == -2:\n            print('ONLINE_FRONT')\n        if ans == -1:\n            print('CLOCKWISE')\n        if ans == 0:\n            print('ON_SEGMENT')\n        if ans == 1:\n            print('COUNTER_CLOCKWISE')\n        if ans == 2:\n            print('ONLINE_BACK')\n\n"
  },
  {
    "language": "Python",
    "code": "#! /usr/bin/env python3\n\nfrom typing import List, Tuple\nfrom math import sqrt\nfrom enum import Enum\n\nEPS = 1e-10\n\n\ndef float_equal(x: float, y: float) -> bool:\n    return abs(x - y) < EPS\n\n\nclass PointLocation(Enum):\n    COUNTER_CLOCKWISE = 1\n    CLOCKWISE = 2\n    ONLINE_BACK = 3\n    ONLINE__FRONT = 4\n    ON_SEGMENT = 5\n\n\nclass Point:\n\n    def __init__(self, x: float=0.0, y: float=0.0) -> None:\n        self.x = x\n        self.y = y\n\n    def __repr__(self) -> str:\n        return \"Point({}, {})\".format(self.x, self.y)\n\n    def __eq__(self, other: object) -> bool:\n        if not isinstance(other, Point):\n            # print(\"NotImplemented in Point\")\n            return NotImplemented\n        return float_equal(self.x, other.x) and \\\n            float_equal(self.y, other.y)\n\n    def __add__(self, other: 'Point') -> 'Point':\n        return Point(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other: 'Point') -> 'Point':\n        return Point(self.x - other.x, self.y - other.y)\n\n    def __mul__(self, k: float) -> 'Point':\n        return Point(self.x * k, self.y * k)\n\n    def __rmul__(self, k: float) -> 'Point':\n        return self * k\n\n    def __truediv__(self, k: float) -> 'Point':\n        return Point(self.x / k, self.y / k)\n\n    def __lt__(self, other: 'Point') -> bool:\n        return self.y < other.y \\\n            if abs(self.x - other.x) < EPS \\\n            else self.x < other.x\n\n    def norm(self):\n        return self.x * self.x + self.y * self.y\n\n    def abs(self):\n        return sqrt(self.norm())\n\n    def dot(self, other: 'Point') -> float:\n        return self.x * other.x + self.y * other.y\n\n    def cross(self, other: 'Point') -> float:\n        return self.x * other.y - self.y * other.x\n\n    def is_orthogonal(self, other: 'Point') -> bool:\n        return float_equal(self.dot(other), 0.0)\n\n    def is_parallel(self, other: 'Point') -> bool:\n        return float_equal(self.cross(other), 0.0)\n\n    def distance(self, other: 'Point') -> float:\n        return (self - other).abs()\n\n    def in_side_of(self, seg: 'Segment') -> bool:\n        return seg.vector().dot(\n            Segment(seg.p1, self).vector()) >= 0\n\n    def in_width_of(self, seg: 'Segment') -> bool:\n        return \\\n            self.in_side_of(seg) and \\\n            self.in_side_of(seg.reverse())\n\n    def distance_to_line(self, seg: 'Segment') -> float:\n        return \\\n            abs((self - seg.p1).cross(seg.vector())) / \\\n            seg.length()\n\n    def distance_to_segment(self, seg: 'Segment') -> float:\n        if not self.in_side_of(seg):\n            return self.distance(seg.p1)\n        if not self.in_side_of(seg.reverse()):\n            return self.distance(seg.p2)\n        else:\n            return self.distance_to_line(seg)\n\n    def location(self, seg: 'Segment') -> PointLocation:\n        p = self - seg.p1\n        d = seg.vector().cross(p)\n        if d < 0:\n            return PointLocation.CLOCKWISE\n        elif d > 0:\n            return PointLocation.COUNTER_CLOCKWISE\n        else:\n            r = (self.x - seg.p1.x) / (seg.p2.x - seg.p1.x)\n            if r < 0:\n                return PointLocation.ONLINE_BACK\n            elif r > 1:\n                return PointLocation.ONLINE__FRONT\n            else:\n                return PointLocation.ON_SEGMENT\n\n\nVector = Point\n\n\nclass Segment:\n\n    def __init__(self, p1: Point = None, p2: Point = None) -> None:\n        self.p1: Point = Point() if p1 is None else p1\n        self.p2: Point = Point() if p2 is None else p2\n\n    def __repr__(self) -> str:\n        return \"Segment({}, {})\".format(self.p1, self.p2)\n\n    def __eq__(self, other: object) -> bool:\n        if not isinstance(other, Segment):\n            # print(\"NotImplemented in Segment\")\n            return NotImplemented\n        return self.p1 == other.p1 and self.p2 == other.p2\n\n    def vector(self) -> Vector:\n        return self.p2 - self.p1\n\n    def reverse(self) -> 'Segment':\n        return Segment(self.p2, self.p1)\n\n    def length(self) -> float:\n        return self.p1.distance(self.p2)\n\n    def is_orthogonal(self, other: 'Segment') -> bool:\n        return self.vector().is_orthogonal(other.vector())\n\n    def is_parallel(self, other: 'Segment') -> bool:\n        return self.vector().is_parallel(other.vector())\n\n    def projection(self, p: Point) -> Point:\n        v = self.vector()\n        vp = p - self.p1\n        return v.dot(vp) / v.norm() * v + self.p1\n\n    def reflection(self, p: Point) -> Point:\n        x = self.projection(p)\n        return p + 2 * (x - p)\n\n    def intersect_ratio(self, other: 'Segment') -> Tuple[float, float]:\n        a = self.vector()\n        b = other.vector()\n        c = self.p1 - other.p1\n        s = b.cross(c) / a.cross(b)\n        t = a.cross(c) / a.cross(b)\n        return s, t\n\n    def intersects(self, other: 'Segment') -> bool:\n        s, t = self.intersect_ratio(other)\n        return (0 <= s <= 1) and (0 <= t <= 1)\n\n    def intersection(self, other: 'Segment') -> Point:\n        s, _ = self.intersect_ratio(other)\n        return self.p1 + s * self.vector()\n\n    def distance_with_segment(self, other: 'Segment') -> float:\n        if not self.is_parallel(other) and \\\n                self.intersects(other):\n            return 0\n        else:\n            return min(\n                self.p1.distance_to_segment(other),\n                self.p2.distance_to_segment(other),\n                other.p1.distance_to_segment(self),\n                other.p2.distance_to_segment(self))\n\n\nLine = Segment\n\n\nclass Circle:\n\n    def __init__(self, c: Point=None, r: float=0.0) -> None:\n        self.c: Point = Point() if c is None else c\n        self.r: float = r\n\n    def __eq__(self, other: object) -> bool:\n        if not isinstance(other, Circle):\n            return NotImplemented\n        return self.c == other.c and self.r == other.r\n\n    def __repr__(self) -> str:\n        return \"Circle({}, {})\".format(self.c, self.r)\n\ndef main() -> None:\n    x0, y0, x1, y1 = [int(x) for x in input().split()]\n    s = Segment(Point(x0, y0), Point(x1, y1))\n    q = int(input())\n\n    for _ in range(q):\n        x2, y2 = [int(x) for x in input().split()]\n        print(Point(x2, y2).location(s).name)\n\n\nif __name__ == \"__main__\":\n    main()\n    \n"
  },
  {
    "language": "Python",
    "code": "#! /usr/bin/env python3\n\nfrom typing import List, Tuple\nfrom math import sqrt\nfrom enum import Enum\n\nEPS = 1e-10\n\n\ndef float_equal(x: float, y: float) -> bool:\n    return abs(x - y) < EPS\n\n\nclass PointLocation(Enum):\n    COUNTER_CLOCKWISE = 1\n    CLOCKWISE = 2\n    ONLINE_BACK = 3\n    ONLINE_FRONT = 4\n    ON_SEGMENT = 5\n\n\nclass Point:\n\n    def __init__(self, x: float=0.0, y: float=0.0) -> None:\n        self.x = x\n        self.y = y\n\n    def __repr__(self) -> str:\n        return \"Point({}, {})\".format(self.x, self.y)\n\n    def __eq__(self, other: object) -> bool:\n        if not isinstance(other, Point):\n            # print(\"NotImplemented in Point\")\n            return NotImplemented\n        return float_equal(self.x, other.x) and \\\n            float_equal(self.y, other.y)\n\n    def __add__(self, other: 'Point') -> 'Point':\n        return Point(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other: 'Point') -> 'Point':\n        return Point(self.x - other.x, self.y - other.y)\n\n    def __mul__(self, k: float) -> 'Point':\n        return Point(self.x * k, self.y * k)\n\n    def __rmul__(self, k: float) -> 'Point':\n        return self * k\n\n    def __truediv__(self, k: float) -> 'Point':\n        return Point(self.x / k, self.y / k)\n\n    def __lt__(self, other: 'Point') -> bool:\n        return self.y < other.y \\\n            if abs(self.x - other.x) < EPS \\\n            else self.x < other.x\n\n    def norm(self):\n        return self.x * self.x + self.y * self.y\n\n    def abs(self):\n        return sqrt(self.norm())\n\n    def dot(self, other: 'Point') -> float:\n        return self.x * other.x + self.y * other.y\n\n    def cross(self, other: 'Point') -> float:\n        return self.x * other.y - self.y * other.x\n\n    def is_orthogonal(self, other: 'Point') -> bool:\n        return float_equal(self.dot(other), 0.0)\n\n    def is_parallel(self, other: 'Point') -> bool:\n        return float_equal(self.cross(other), 0.0)\n\n    def distance(self, other: 'Point') -> float:\n        return (self - other).abs()\n\n    def in_side_of(self, seg: 'Segment') -> bool:\n        return seg.vector().dot(\n            Segment(seg.p1, self).vector()) >= 0\n\n    def in_width_of(self, seg: 'Segment') -> bool:\n        return \\\n            self.in_side_of(seg) and \\\n            self.in_side_of(seg.reverse())\n\n    def distance_to_line(self, seg: 'Segment') -> float:\n        return \\\n            abs((self - seg.p1).cross(seg.vector())) / \\\n            seg.length()\n\n    def distance_to_segment(self, seg: 'Segment') -> float:\n        if not self.in_side_of(seg):\n            return self.distance(seg.p1)\n        if not self.in_side_of(seg.reverse()):\n            return self.distance(seg.p2)\n        else:\n            return self.distance_to_line(seg)\n\n    def location(self, seg: 'Segment') -> PointLocation:\n        p = self - seg.p1\n        d = seg.vector().cross(p)\n        if d < 0:\n            return PointLocation.CLOCKWISE\n        elif d > 0:\n            return PointLocation.COUNTER_CLOCKWISE\n        else:\n            r = (self.x - seg.p1.x) / (seg.p2.x - seg.p1.x)\n            if r < 0:\n                return PointLocation.ONLINE_BACK\n            elif r > 1:\n                return PointLocation.ONLINE_FRONT\n            else:\n                return PointLocation.ON_SEGMENT\n\n\nVector = Point\n\n\nclass Segment:\n\n    def __init__(self, p1: Point = None, p2: Point = None) -> None:\n        self.p1: Point = Point() if p1 is None else p1\n        self.p2: Point = Point() if p2 is None else p2\n\n    def __repr__(self) -> str:\n        return \"Segment({}, {})\".format(self.p1, self.p2)\n\n    def __eq__(self, other: object) -> bool:\n        if not isinstance(other, Segment):\n            # print(\"NotImplemented in Segment\")\n            return NotImplemented\n        return self.p1 == other.p1 and self.p2 == other.p2\n\n    def vector(self) -> Vector:\n        return self.p2 - self.p1\n\n    def reverse(self) -> 'Segment':\n        return Segment(self.p2, self.p1)\n\n    def length(self) -> float:\n        return self.p1.distance(self.p2)\n\n    def is_orthogonal(self, other: 'Segment') -> bool:\n        return self.vector().is_orthogonal(other.vector())\n\n    def is_parallel(self, other: 'Segment') -> bool:\n        return self.vector().is_parallel(other.vector())\n\n    def projection(self, p: Point) -> Point:\n        v = self.vector()\n        vp = p - self.p1\n        return v.dot(vp) / v.norm() * v + self.p1\n\n    def reflection(self, p: Point) -> Point:\n        x = self.projection(p)\n        return p + 2 * (x - p)\n\n    def intersect_ratio(self, other: 'Segment') -> Tuple[float, float]:\n        a = self.vector()\n        b = other.vector()\n        c = self.p1 - other.p1\n        s = b.cross(c) / a.cross(b)\n        t = a.cross(c) / a.cross(b)\n        return s, t\n\n    def intersects(self, other: 'Segment') -> bool:\n        s, t = self.intersect_ratio(other)\n        return (0 <= s <= 1) and (0 <= t <= 1)\n\n    def intersection(self, other: 'Segment') -> Point:\n        s, _ = self.intersect_ratio(other)\n        return self.p1 + s * self.vector()\n\n    def distance_with_segment(self, other: 'Segment') -> float:\n        if not self.is_parallel(other) and \\\n                self.intersects(other):\n            return 0\n        else:\n            return min(\n                self.p1.distance_to_segment(other),\n                self.p2.distance_to_segment(other),\n                other.p1.distance_to_segment(self),\n                other.p2.distance_to_segment(self))\n\n\nLine = Segment\n\n\nclass Circle:\n\n    def __init__(self, c: Point=None, r: float=0.0) -> None:\n        self.c: Point = Point() if c is None else c\n        self.r: float = r\n\n    def __eq__(self, other: object) -> bool:\n        if not isinstance(other, Circle):\n            return NotImplemented\n        return self.c == other.c and self.r == other.r\n\n    def __repr__(self) -> str:\n        return \"Circle({}, {})\".format(self.c, self.r)\n\ndef main() -> None:\n    x0, y0, x1, y1 = [int(x) for x in input().split()]\n    s = Segment(Point(x0, y0), Point(x1, y1))\n    q = int(input())\n\n    for _ in range(q):\n        x2, y2 = [int(x) for x in input().split()]\n        print(Point(x2, y2).location(s).name)\n\n\nif __name__ == \"__main__\":\n    main()\n    \n"
  },
  {
    "language": "Python",
    "code": "def LI(): return list(map(int, input().split()))\ndef II(): return int(input())\ndef LS(): return input().split()\ndef S(): return input()\ndef LIR(n): return [LI() for i in range(n)]\ndef MI(): return map(int, input().split())\n\n#1\n#1_A\n\"\"\"\nx,y,s,t = map(float, input().split())\na = int(input())\ns-=x\nt-=y\nwhile a:\n    a -= 1\n    p,q = map(float, input().split())\n    p-=x\n    q-=y\n    ans_x = s*(q*t+p*s)/(t*t+s*s)\n    ans_y = t*(q*t+p*s)/(t*t+s*s)\n    print(x+ans_x, y+ans_y)\n\"\"\"\n\n#1_B\n\"\"\"\np1x,p1y,c,d = MI()\nq = II()\nif p1x == c:\n    f = 0\nelif p1y == d:\n    f = 1\nelse:\n    f = 2\n    m = (d-p1y)/(c-p1x)\nfor _ in range(q):\n    px,py = MI()\n    if not f:\n        a = 2*p1x-px\n        b = py\n    elif f == 1:\n        a = px\n        b = 2*p1y-py\n    else:\n        a = (2*py+(1/m-m)*px+2*m*p1x-2*p1y)/(m+1/m)\n        b = -1/m*(a-px)+py\n    print(a,b)\n\"\"\"\n\n#1_C\ndef inner_product(a,b):\n    return a[0]*b[0]+a[1]*b[1]\n\ndef cross_product(a,b):\n    return a[0]*b[1]-a[1]*b[0]\np,q,c,d = MI()\na = [c-p,d-q]\nr = II()\nfor _ in range(r):\n    c,d = MI()\n    b = [c-p,d-q]\n    co = inner_product(a,b)\n    si = cross_product(a,b)\n    if si == 0:\n        if co >= 0:\n            if a[0]**2+a[1]**2 >= b[0]**2+b[1]**2:\n                print(\"ON_SEGMENT\")\n            else:\n                print(\"ONLINE_FRONT\")\n        else:\n            print(\"ONLINE_BACK\")\n    elif si > 0:\n        print(\"COUNTER_CLOCKWISE\")\n    else:\n        print(\"CLOCKWISE\")\n\n"
  },
  {
    "language": "Python",
    "code": "import math\n\neps = 10 ** -8\n\nline = input()\nx1, y1, x2, y2 = list(map(int, line.split()))\nline = input()\nq = int(line)\npts = []\nfor _ in range(0, q):\n    line = input()\n    x, y = list(map(int, line.split()))\n    pts += [[x, y]]\n\ndef solve():\n    l1 = math.sqrt((x1 - x2)**2 + (y1 - y2)**2)\n    for x, y in pts:\n        l2 = math.sqrt((x - x1)**2 + (y - y1)**2)\n        dx = (x2 - x1) / l1\n        dy = (y2 - y1) / l1\n        ip = (x - x1) * (x2 - x1) + (y - y1) * (y2 - y1)\n        sine = (x - x1) * (y2 - y1) - (y - y1) * (x2 - x1)\n        if sine < 0.0:\n            print(\"COUNTER_CLOCKWISE\")\n        elif sine > 0.0:\n            print(\"CLOCKWISE\")\n        elif abs(ip - l1 * l2) < eps:\n            if l1 < l2:\n                print(\"ONLINE_FRONT\")\n            else:\n                print(\"ON_SEGMENT\")\n        elif ip + l1 * l2 < eps:\n            print(\"ONLINE_BACK\")\nsolve()\n\n"
  },
  {
    "language": "Python",
    "code": "x0, y0, x1, y1 = map(int, input().split())\nq = int(input())\n\np0, p1 = complex(x0, y0), complex(x1, y1)\np0p1 = p1 - p0\n\nwhile q:\n    q -= 1\n    p2 = complex(*map(int, input().split()))\n    p0p2 = p2 - p0\n    prod_cross = p0p1.real * p0p2.imag - p0p1.imag * p0p2.real\n    if abs(prod_cross) < 1e-6:\n        if p0p1.real * p0p2.real >= 0 and p0p1.imag * p0p2.imag >= 0:\n            print('ONLINE_FRONT' if p0p1.real < p0p2.real else 'ON_SEGMENT')\n        else:\n            print('ONLINE_BACK')\n    else:\n        print('COUNTER_CLOCKWISE' if prod_cross > 0 else 'CLOCKWISE')"
  },
  {
    "language": "Python",
    "code": "import cmath\nimport os\nimport sys\n\nif os.getenv(\"LOCAL\"):\n    sys.stdin = open(\"_in.txt\", \"r\")\n\nsys.setrecursionlimit(10 ** 9)\nINF = float(\"inf\")\nIINF = 10 ** 18\nMOD = 10 ** 9 + 7\n# MOD = 998244353\n\n\nINF = float(\"inf\")\nPI = cmath.pi\nTAU = cmath.pi * 2\nEPS = 1e-10\n\nclass Point:\n    \"\"\"\n    2次元空間上の点\n    \"\"\"\n\n    # 反時計回り側にある\n    CCW_COUNTER_CLOCKWISE = 1\n    # 時計回り側にある\n    CCW_CLOCKWISE = -1\n    # 線分の後ろにある\n    CCW_ONLINE_BACK = 2\n    # 線分の前にある\n    CCW_ONLINE_FRONT = -2\n    # 線分上にある\n    CCW_ON_SEGMENT = 0\n\n    def __init__(self, x: float, y: float):\n        self.c = complex(x, y)\n\n    @property\n    def x(self):\n        return self.c.real\n\n    @property\n    def y(self):\n        return self.c.imag\n\n    @staticmethod\n    def from_complex(c: complex):\n        return Point(c.real, c.imag)\n\n    @staticmethod\n    def from_polar(r: float, phi: float):\n        c = cmath.rect(r, phi)\n        return Point(c.real, c.imag)\n\n    def __add__(self, p):\n        \"\"\"\n        :param Point p:\n        \"\"\"\n        c = self.c + p.c\n        return Point(c.real, c.imag)\n\n    def __iadd__(self, p):\n        \"\"\"\n        :param Point p:\n        \"\"\"\n        self.c += p.c\n        return self\n\n    def __sub__(self, p):\n        \"\"\"\n        :param Point p:\n        \"\"\"\n        c = self.c - p.c\n        return Point(c.real, c.imag)\n\n    def __isub__(self, p):\n        \"\"\"\n        :param Point p:\n        \"\"\"\n        self.c -= p.c\n        return self\n\n    def __mul__(self, f: float):\n        c = self.c * f\n        return Point(c.real, c.imag)\n\n    def __imul__(self, f: float):\n        self.c *= f\n        return self\n\n    def __truediv__(self, f: float):\n        c = self.c / f\n        return Point(c.real, c.imag)\n\n    def __itruediv__(self, f: float):\n        self.c /= f\n        return self\n\n    def __repr__(self):\n        return \"({}, {})\".format(round(self.x, 10), round(self.y, 10))\n\n    def __neg__(self):\n        c = -self.c\n        return Point(c.real, c.imag)\n\n    def __eq__(self, p):\n        return abs(self.c - p.c) < EPS\n\n    def __abs__(self):\n        return abs(self.c)\n\n    @staticmethod\n    def ccw(a, b, c):\n        \"\"\"\n        線分 ab に対する c の位置\n        線分上にあるか判定するだけなら on_segment とかのが速い\n        Verify: http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_C&lang=ja\n        :param Point a:\n        :param Point b:\n        :param Point c:\n        \"\"\"\n        b = b - a\n        c = c - a\n        det = b.det(c)\n        if det > EPS:\n            return Point.CCW_COUNTER_CLOCKWISE\n        if det < -EPS:\n            return Point.CCW_CLOCKWISE\n        if b.dot(c) < -EPS:\n            return Point.CCW_ONLINE_BACK\n        if b.dot(b - c) < -EPS:\n            return Point.CCW_ONLINE_FRONT\n        return Point.CCW_ON_SEGMENT\n\n    def dot(self, p):\n        \"\"\"\n        内積\n        :param Point p:\n        :rtype: float\n        \"\"\"\n        return self.x * p.x + self.y * p.y\n\n    def det(self, p):\n        \"\"\"\n        外積\n        :param Point p:\n        :rtype: float\n        \"\"\"\n        return self.x * p.y - self.y * p.x\n\n\nx1, y1, x2, y2 = list(map(int, sys.stdin.buffer.readline().split()))\nQ = int(sys.stdin.buffer.readline())\nXY = [list(map(int, sys.stdin.buffer.readline().split())) for _ in range(Q)]\n\np1 = Point(x1, y1)\np2 = Point(x2, y2)\nfor x3, y3 in XY:\n    ccw = Point.ccw(p1, p2, Point(x3, y3))\n    if ccw == Point.CCW_COUNTER_CLOCKWISE:\n        print('COUNTER_CLOCKWISE')\n    if ccw == Point.CCW_CLOCKWISE:\n        print('CLOCKWISE')\n    if ccw == Point.CCW_ONLINE_BACK:\n        print('ONLINE_BACK')\n    if ccw == Point.CCW_ONLINE_FRONT:\n        print('ONLINE_FRONT')\n    if ccw == Point.CCW_ON_SEGMENT:\n        print('ON_SEGMENT')\n\n"
  },
  {
    "language": "Python",
    "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\ninput:\n0 0 2 0\n3\n-1 0\n0 0\n3 0\n\noutput:\nONLINE_BACK\nON_SEGMENT\nONLINE_FRONT\n\"\"\"\n\nimport sys\n\nEPS = 1e-9\n\n\ndef cross(a, b):\n    return a.real * b.imag - a.imag * b.real\n\n\ndef dot(a, b):\n    return a.real * b.real + a.imag * b.imag\n\n\ndef calc_distance(p_info):\n    for point in p_info:\n        p2_real, p2_imag = map(int, point)\n        p2 = p2_real + p2_imag * 1j\n        a, b = p1 - p0, p2 - p0\n        if cross(a, b) > EPS:\n            print('COUNTER_CLOCKWISE')\n        elif cross(a, b) < -1 * EPS:\n            print('CLOCKWISE')\n        elif dot(a, b) < -1 * EPS:\n            print('ONLINE_BACK')\n        elif abs(a) < abs(b):\n            print('ONLINE_FRONT')\n        else:\n            print('ON_SEGMENT')\n    return None\n\n\nif __name__ == '__main__':\n    _input = sys.stdin.readlines()\n    base_line = tuple(map(int, _input[0].split()))\n    p0, p1 = (x + y * 1j for x, y in zip(base_line[::2], base_line[1::2]))\n\n    q_num = int(_input[1])\n    q_list = map(lambda x: x.split(), _input[2:])\n    calc_distance(q_list)"
  },
  {
    "language": "Python",
    "code": "#! /usr/bin/env python3\n\nfrom typing import List, Tuple\nfrom math import sqrt\nfrom enum import Enum\n\nEPS = 1e-10\n\n\ndef float_equal(x: float, y: float) -> bool:\n    return abs(x - y) < EPS\n\n\nclass PointLocation(Enum):\n    COUNTER_CLOCKWISE = 1\n    CLOCKWISE = 2\n    ONLINE_BACK = 3\n    ONLINE_FRONT = 4\n    ON_SEGMENT = 5\n\n\nclass Point:\n\n    def __init__(self, x: float=0.0, y: float=0.0) -> None:\n        self.x = x\n        self.y = y\n\n    def __repr__(self) -> str:\n        return \"Point({}, {})\".format(self.x, self.y)\n\n    def __eq__(self, other: object) -> bool:\n        if not isinstance(other, Point):\n            # print(\"NotImplemented in Point\")\n            return NotImplemented\n        return float_equal(self.x, other.x) and \\\n            float_equal(self.y, other.y)\n\n    def __add__(self, other: 'Point') -> 'Point':\n        return Point(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other: 'Point') -> 'Point':\n        return Point(self.x - other.x, self.y - other.y)\n\n    def __mul__(self, k: float) -> 'Point':\n        return Point(self.x * k, self.y * k)\n\n    def __rmul__(self, k: float) -> 'Point':\n        return self * k\n\n    def __truediv__(self, k: float) -> 'Point':\n        return Point(self.x / k, self.y / k)\n\n    def __lt__(self, other: 'Point') -> bool:\n        return self.y < other.y \\\n            if abs(self.x - other.x) < EPS \\\n            else self.x < other.x\n\n    def norm(self):\n        return self.x * self.x + self.y * self.y\n\n    def abs(self):\n        return sqrt(self.norm())\n\n    def dot(self, other: 'Point') -> float:\n        return self.x * other.x + self.y * other.y\n\n    def cross(self, other: 'Point') -> float:\n        return self.x * other.y - self.y * other.x\n\n    def is_orthogonal(self, other: 'Point') -> bool:\n        return float_equal(self.dot(other), 0.0)\n\n    def is_parallel(self, other: 'Point') -> bool:\n        return float_equal(self.cross(other), 0.0)\n\n    def distance(self, other: 'Point') -> float:\n        return (self - other).abs()\n\n    def in_side_of(self, seg: 'Segment') -> bool:\n        return seg.vector().dot(\n            Segment(seg.p1, self).vector()) >= 0\n\n    def in_width_of(self, seg: 'Segment') -> bool:\n        return \\\n            self.in_side_of(seg) and \\\n            self.in_side_of(seg.reverse())\n\n    def distance_to_line(self, seg: 'Segment') -> float:\n        return \\\n            abs((self - seg.p1).cross(seg.vector())) / \\\n            seg.length()\n\n    def distance_to_segment(self, seg: 'Segment') -> float:\n        if not self.in_side_of(seg):\n            return self.distance(seg.p1)\n        if not self.in_side_of(seg.reverse()):\n            return self.distance(seg.p2)\n        else:\n            return self.distance_to_line(seg)\n\n    def location(self, seg: 'Segment') -> PointLocation:\n        p = self - seg.p1\n        d = seg.vector().cross(p)\n        if float_equal(d, 0.0):\n            if seg.p2.x != seg.p1.x:\n                r = (self.x - seg.p1.x) / (seg.p2.x - seg.p1.x)\n            else:\n                r = (self.y - seg.p1.y) / (seg.p2.y - seg.p1.y)\n            if r < 0:\n                return PointLocation.ONLINE_BACK\n            elif r > 1:\n                return PointLocation.ONLINE_FRONT\n            else:\n                return PointLocation.ON_SEGMENT\n        elif d > 0:\n            return PointLocation.COUNTER_CLOCKWISE\n        else:\n            return PointLocation.CLOCKWISE\n\n\nVector = Point\n\n\nclass Segment:\n\n    def __init__(self, p1: Point = None, p2: Point = None) -> None:\n        self.p1: Point = Point() if p1 is None else p1\n        self.p2: Point = Point() if p2 is None else p2\n\n    def __repr__(self) -> str:\n        return \"Segment({}, {})\".format(self.p1, self.p2)\n\n    def __eq__(self, other: object) -> bool:\n        if not isinstance(other, Segment):\n            # print(\"NotImplemented in Segment\")\n            return NotImplemented\n        return self.p1 == other.p1 and self.p2 == other.p2\n\n    def vector(self) -> Vector:\n        return self.p2 - self.p1\n\n    def reverse(self) -> 'Segment':\n        return Segment(self.p2, self.p1)\n\n    def length(self) -> float:\n        return self.p1.distance(self.p2)\n\n    def is_orthogonal(self, other: 'Segment') -> bool:\n        return self.vector().is_orthogonal(other.vector())\n\n    def is_parallel(self, other: 'Segment') -> bool:\n        return self.vector().is_parallel(other.vector())\n\n    def projection(self, p: Point) -> Point:\n        v = self.vector()\n        vp = p - self.p1\n        return v.dot(vp) / v.norm() * v + self.p1\n\n    def reflection(self, p: Point) -> Point:\n        x = self.projection(p)\n        return p + 2 * (x - p)\n\n    def intersect_ratio(self, other: 'Segment') -> Tuple[float, float]:\n        a = self.vector()\n        b = other.vector()\n        c = self.p1 - other.p1\n        s = b.cross(c) / a.cross(b)\n        t = a.cross(c) / a.cross(b)\n        return s, t\n\n    def intersects(self, other: 'Segment') -> bool:\n        s, t = self.intersect_ratio(other)\n        return (0 <= s <= 1) and (0 <= t <= 1)\n\n    def intersection(self, other: 'Segment') -> Point:\n        s, _ = self.intersect_ratio(other)\n        return self.p1 + s * self.vector()\n\n    def distance_with_segment(self, other: 'Segment') -> float:\n        if not self.is_parallel(other) and \\\n                self.intersects(other):\n            return 0\n        else:\n            return min(\n                self.p1.distance_to_segment(other),\n                self.p2.distance_to_segment(other),\n                other.p1.distance_to_segment(self),\n                other.p2.distance_to_segment(self))\n\n\nLine = Segment\n\n\nclass Circle:\n\n    def __init__(self, c: Point=None, r: float=0.0) -> None:\n        self.c: Point = Point() if c is None else c\n        self.r: float = r\n\n    def __eq__(self, other: object) -> bool:\n        if not isinstance(other, Circle):\n            return NotImplemented\n        return self.c == other.c and self.r == other.r\n\n    def __repr__(self) -> str:\n        return \"Circle({}, {})\".format(self.c, self.r)\n\n\ndef main() -> None:\n    x0, y0, x1, y1 = [int(x) for x in input().split()]\n    s = Segment(Point(x0, y0), Point(x1, y1))\n    q = int(input())\n\n    for _ in range(q):\n        x2, y2 = [int(x) for x in input().split()]\n        print(Point(x2, y2).location(s).name)\n\n\nif __name__ == \"__main__\":\n    main()\n\n"
  },
  {
    "language": "Python",
    "code": "x0, y0, x1, y1 = map(int, input().split())\nq = int(input())\n\np0, p1 = complex(x0, y0), complex(x1, y1)\np0p1 = p1 - p0\n\nwhile q:\n    q -= 1\n    p2 = complex(*map(int, input().split()))\n    p0p2 = p2 - p0\n    prod_cross = p0p1.real * p0p2.imag - p0p1.imag * p0p2.real\n    if abs(prod_cross) < 1e-6:\n        if p0p1.real * p0p2.real >= 0 and p0p1.imag * p0p2.imag >= 0:\n            print('ONLINE_FRONT' if abs(p0p1) < abs(p0p2) else 'ON_SEGMENT')\n        else:\n            print('ONLINE_BACK')\n    else:\n        print('COUNTER_CLOCKWISE' if prod_cross > 0 else 'CLOCKWISE')"
  },
  {
    "language": "Python",
    "code": "class Point:\n    def __init__(self, x , y):\n        self.x = x\n        self.y = y\n    def __sub__(self, p):\n        x_sub = self.x - p.x\n        y_sub = self.y - p.y\n        return Point(x_sub, y_sub)\n\nclass Vector:\n    def __init__(self, p):\n        self.x = p.x\n        self.y = p.y\n    def norm(self):\n        return (self.x ** 2 + self.y ** 2) ** 0.5\n\ndef cross(v1, v2):\n    return v1.x * v2.y - v1.y * v2.x\n\ndef dot(v1, v2):\n    return v1.x * v2.x + v1.y * v2.y\n\ndef ccw(p0, p1, p2):\n    a = Vector(p1 - p0)\n    b = Vector(p2 - p0)\n    cross_ab = cross(a, b)\n    if cross_ab > 0:\n        print(\"COUNTER_CLOCKWISE\")\n    elif cross_ab < 0:\n        print(\"CLOCKWISE\")\n    elif dot(a, b) < 0:\n        print(\"ONLINE_BACK\")\n    elif a.norm() < b.norm():\n        print(\"ONLINE_FRONT\")\n    else:\n        print(\"ON_SEGMENT\")\n\nimport sys\n\nfile_input = sys.stdin\n\nx_p0, y_p0, x_p1, y_p1 = map(int, file_input.readline().split())\np0 = Point(x_p0, y_p0)\np1 = Point(x_p1, y_p1)\n\nq = map(int, file_input.readline())\n\nfor line in file_input:\n    x_p2, y_p2 = map(int, line.split())\n    p2 = Point(x_p2, y_p2)\n    ccw(p0, p1, p2)"
  },
  {
    "language": "Python",
    "code": "def dot(a,b):\n    return a[0]*b[0] + a[1]*b[1]\n\ndef cross(a,b):\n    return a[0]*b[1] - a[1]*b[0]\n\nx0,y0,x1,y1 = [int(i) for i in input().split()] \na = [x1-x0,y1-y0]\n\nq = int(input())\nfor i in range(q):\n    x2,y2 = [int(i) for i in input().split()]\n    b = [x2-x0,y2-y0]\n    crs = cross(a,b)\n    if crs > 0 :\n        print(\"COUNTER_CLOCKWISE\")\n    elif crs < 0 :\n        print(\"CLOCKWISE\")\n    else :\n        if dot(a,b) < 0 :\n            print(\"ONLINE_BACK\")\n        elif dot(a,a) < dot(b,b) :\n            print(\"ONLINE_FRONT\")\n        else :\n            print(\"ON_SEGMENT\")"
  },
  {
    "language": "Python",
    "code": "import math\n\nclass Point():\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Vector():\n    def __init__(self, start, end):\n        self.x = end.x - start.x\n        self.y = end.y - start.y\n        self.r = math.sqrt(pow(self.x, 2) + pow(self.y, 2))\n        self.theta = math.atan2(self.y, self.x)\n\nx0, y0, x1, y1 = list(map(int, input().split(' ')))\np0, p1 = Point(x0, y0), Point(x1, y1)\nvec1 = Vector(p0, p1)\n\nq = int(input())\nfor i in range(q):\n    x2, y2 = list(map(int, input().split(' ')))\n    p2 = Point(x2, y2)\n    vec2 = Vector(p0, p2)\n    if vec1.theta == vec2.theta:\n        if vec1.r < vec2.r:\n            print('ONLINE_FRONT')\n        else:\n            print('ON_SEGMENT')\n    elif abs(vec1.theta - vec2.theta) == math.pi:\n        print('ONLINE_BACK')\n    elif vec2.theta - vec1.theta > 0:\n        print('COUNTER_CLOCKWISE')\n    elif vec2.theta - vec1.theta < 0:\n        print('CLOCKWISE')\n\n"
  },
  {
    "language": "Python",
    "code": "#  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_C&lang=jp\n#  Counter-Clockwise : python3\n#  2018.12.11 yonezawa\n\n#from collections import deque\nimport sys\ninput = sys.stdin.readline\n#import cProfile\nfrom math import cos,sin,radians,sqrt\n\ndef crossProduct(s1,s2,s3):\n    (x1,y1) = s1\n    (x2,y2) = s2\n    (x3,y3) = s3\n    x1 = x1 - x2\n    y1 = y1 - y2\n    x3 = x3 - x2\n    y3 = y3 - y2\n    d = x1 * y3 - y1 * x3\n    return d\ndef distance(s1,s2):\n    (x1,y1) = s1\n    (x2,y2) = s2\n    return sqrt(pow((x1-x2),2) + pow((y1-y2),2))\n\n    \n\n    \n\ndef main():\n    (x1,y1,x2,y2) = map(int,input().split())\n    for i in range(int(input())):\n        (x3,y3) = map(int,input().split())\n        n = crossProduct((x1,y1),(x2,y2),(x3,y3))\n        if n == 0:\n            d1 = distance((x1,y1),(x2,y2))\n            d2 = distance((x1,y1),(x3,y3))\n            d3 = distance((x2,y2),(x3,y3))\n            #print (d1,d2,d3,\"p1:\",x1,y1,\"p2:\",x2,y2,\"p3:\",x3,y3)\n            #print (round(d1+d2,10),round(d3,10))\n            if round(d1 + d2,5) == round(d3,5) and d1 != 0 and d2 != 0:\n                print (\"ONLINE_BACK\")\n            elif d1 >= d2 :\n                print (\"ON_SEGMENT\")\n            else:\n                print (\"ONLINE_FRONT\")\n        elif n > 0:\n            print (\"CLOCKWISE\") \n        elif n < 0:\n            print (\"COUNTER_CLOCKWISE\")\n\n\nif __name__ == '__main__':\n    main()\n    #pr = cProfile.Profile()\n    #pr.runcall(main)\n    #pr.print_stats()\n"
  },
  {
    "language": "Python",
    "code": "EPS = 10**(-9)\ndef is_equal(a,b):\n    return abs(a-b) < EPS\n\ndef norm(v,i=2):\n    import math\n    ret = 0\n    n = len(v)\n    for j in range(n):\n        ret += abs(v[j])**i\n    return math.pow(ret,1/i)\n\nclass Vector(list):\n    \"\"\"\n    ベクトルクラス\n    対応演算子\n    +  : ベクトル和 \n    -  : ベクトル差\n    *  : スカラー倍、または内積\n    /  : スカラー除法\n    ** : 外積\n    += : ベクトル和\n    -= : ベクトル差\n    *= : スカラー倍\n    /= : スカラー除法\n\n    メソッド\n    self.norm(i) : L{i}ノルムを計算\n    \"\"\"\n    def __add__(self,other):\n        n = len(self)\n        ret = [0]*n\n        for i in range(n):\n            ret[i] = super().__getitem__(i) + other.__getitem__(i)\n        return self.__class__(ret)\n    \n    def __radd__(self,other):\n        n = len(self)\n        ret = [0]*n\n        for i in range(n):\n            ret[i] = other.__getitem__(i) + super().__getitem__(i)\n        return self.__class__(ret)\n    \n    def __iadd__(self, other):\n        n = len(self)\n        for i in range(n):\n            self[i] += other.__getitem__(i)\n        return self\n\n    def __sub__(self,others):\n        n = len(self) \n        ret = [0]*n\n        for i in range(n):\n            ret[i] = super().__getitem__(i) - others.__getitem__(i)\n        return self.__class__(ret)\n\n    def __iadd__(self, other):\n        n = len(self)\n        for i in range(n):\n            self[i] -= other.__getitem__(i)\n        return self\n\n    def __rsub__(self,others):\n        n = len(self) \n        ret = [0]*n\n        for i in range(n):\n            ret[i] = others.__getitem__(i) - super().__getitem__(i)\n        return self.__class__(ret)\n    \n    def __mul__(self,other):\n        n = len(self)\n        if isinstance(other,list):\n            ret = 0\n            for i in range(n):\n                ret += super().__getitem__(i)*other.__getitem__(i)\n            return ret\n        else:\n            ret = [0]*n\n            for i in range(n):\n                ret[i] = super().__getitem__(i)*other\n            return self.__class__(ret)\n\n    def __rmul__(self,other):\n        n = len(self)\n        if isinstance(other,list):\n            ret = 0\n            for i in range(n):\n                ret += super().__getitem__(i)*other.__getitem__(i)\n            return ret\n        else:\n            ret = [0]*n\n            for i in range(n):\n                ret[i] = super().__getitem__(i)*other\n            return self.__class__(ret)\n    \n    \n    def __truediv__(self,other):\n        \"\"\"\n        ベクトルのスカラー除法\n        Vector/scalar\n        \"\"\"\n        n = len(self)\n        ret = [0]*n\n        for i in range(n):\n            ret[i] = super().__getitem__(i)/other\n        return self.__class__(ret)\n    \n    def norm(self,i):\n        \"\"\"\n        L{i}ノルム\n        self.norm(i)\n        \"\"\"\n        return norm(self,i)\n    \n    def __pow__(self,other):\n        \"\"\"\n        外積\n        self**other\n        \"\"\"\n        n = len(self)\n        ret = [0]*3\n        x = self[:]\n        y = other[:]\n        if n == 2:\n            x.append(0)\n            y.append(0)\n        if n == 2 or n == 3:\n            for i in range(3):\n                ret[0],ret[1],ret[2] = x[1]*y[2]-x[2]*y[1],x[2]*y[0]-x[0]*y[2],x[0]*y[1]-x[1]*y[0]\n            ret = Vector(ret)\n            if n == 2:\n                return ret\n            else:\n                return ret\n\nclass Segment:\n    \"\"\"\n    線分クラス\n    \"\"\"\n    def __init__(self,v1,v2):\n        self.v1 = v1\n        self.v2 = v2\n    \n    def length(self):\n        return norm(self.v1-self.v2)\n\n    def get_unit_vec(self):\n        #方向単位ベクトル\n        dist = norm(self.v2-self.v1)\n        if dist != 0:\n            return (self.v2-self.v1)/dist\n        else:\n            return False\n    \n    def projection(self,vector):\n        #射影点(線分を直線と見たときの)\n        unit_vec = self.get_unit_vec()\n        t = unit_vec*(vector-self.v1)\n        return self.v1 + t*unit_vec\n    \n    def is_vertical(self,other):\n        #線分の直交判定\n        return is_equal(0,self.get_unit_vec()*other.get_unit_vec())\n    \n    def is_horizontal(self,other):\n        #線分の平行判定\n        return is_equal(0,self.get_unit_vec()**other.get_unit_vec())\n    \n    def reflection(self,vector):\n        #反射点(線分を直線と見たときの)\n        projection = self.projection(vector)\n        v = projection - vector\n        return projection + vector\n    \n    def include(self,vector):\n        #線分が点を含むか否か\n        proj = self.projection(vector)\n        if not is_equal(norm(proj-vector),0):\n            return False\n        else:\n            n = len(self.v1)\n            f = True\n            for i in range(n):\n                f &= ((self.v1[i] <= vector[i] <= self.v2[i]) or (self.v2[i] <= vector[i] <=self.v1[i]))\n            return f\n    \n    def distance(self,other):\n        #点と線分の距離\n        if isinstance(other,Vector):\n            proj = self.projection(other)\n            if self.include(proj):\n                return norm(proj-other)\n            else:\n                ret = []\n                ret.append(norm(self.v1-other))\n                ret.append(norm(self.v2-other))\n                return min(ret)\n\n\nclass Line(Segment):\n    \"\"\"\n    直線クラス\n    \"\"\"\n    #直線上に点が存在するか否か\n    def include(self,vector):\n        proj = self.projection(vector)\n        return is_equal(norm(proj-vector),0)\n\nxp0,yp0,xp1,yp1 = map(int,input().split())\np0 = Vector([xp0,yp0])\np1 = Vector([xp1,yp1])\np01 = p1-p0\nq = int(input())\np2s = [0]*q\np02s = [0]*q\nL01 = Line(p0,p1)\nS01 = Segment(p0,p1)\nfor i in range(q):\n    p2s[i] = Vector(list(map(int,input().split())))\n    p02s[i] = p2s[i]-p0\n\nans = [0]*q\nfor i in range(q):\n    p02 = p02s[i]\n    p2 = p2s[i]\n    S21 = Segment(p2,p1)\n    S02 = Segment(p0,p2)\n    if L01.include(p2):\n        if S01.include(p2):\n                ans[i] = \"ON_SEGMENT\"\n        elif S02.length != 0 and S02.include(p1):\n            ans[i] = \"ONLINE_FRONT\"\n        elif S21.length != 0 and S21.include(p0):\n            ans[i] = \"ONLINE_BACK\"\n    else:\n        cross = p01**p02\n        if cross[2] > 0:\n            ans[i] = \"COUNTER_CLOCKWISE\"\n        else:\n            ans[i] = \"CLOCKWISE\"\n\nfor i in range(q):\n    print(ans[i])\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "language": "Python",
    "code": "# https://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/all/CGL_1_C\n# この問題は後の交差判定のところで使う\nfrom math import sqrt\n\n\nclass Vector:\n    def __init__(self, ls):\n        '''\n        ls ... list\n        '''\n        self.vec = ls\n\n    def __len__(self):\n        return len(self.vec)\n\n    def __getitem__(self, idx):\n        return self.vec[idx]\n\n    def __repr__(self):\n        return f'Vector({self.vec})'\n\n    def add(self, vec):\n        '''\n        vec ... vector class\n        '''\n        assert len(self) == len(vec)\n        ret = [a + b for a, b in zip(self.vec, vec.vec)]\n        return Vector(ret)\n\n    def sub(self, vec):\n        '''\n        vec ... vector class\n        '''\n        assert len(self) == len(vec)\n        ret = [a - b for a, b in zip(self.vec, vec.vec)]\n        return Vector(ret)\n\n    def mul(self, vec):\n        '''\n        vec ... vector class\n        '''\n        assert len(self) == len(vec)\n        ret = [a * b for a, b in zip(self.vec, vec.vec)]\n        return Vector(ret)\n\n    def norm(self):\n        tmp = sum([x * x for x in self.vec])\n        return sqrt(tmp)\n\n\ndef norm(vec):\n    '''\n    vec ... Vector class\n    '''\n    return vec.norm()\n\n\ndef cross(a, b):\n    '''\n    Outer product for 2d\n    a,b ... Vector class\n    '''\n    assert len(a) == 2 and len(b) == 2\n    first = a[0] * b[1]\n    second = a[1] * b[0]\n    return first - second\n\n\ndef dot(a, b):\n    return sum(a.mul(b))\n\n\nEPS = 1e-10\n\n\ndef ccw(p0, p1, p2):\n    '''\n    問題を解くための関数\n    引数はすべてVector\n    '''\n    a = p1.sub(p0)\n    b = p2.sub(p0)\n    if cross(a, b) > EPS:\n        return 'COUNTER_CLOCKWISE'\n    elif cross(a, b) < -EPS:\n        return 'CLOCKWISE'\n    elif dot(a, b) < 0:  # 同一直線状でa,bが逆を向いている\n        return 'ONLINE_BACK'\n    elif a.norm() < b.norm():  # a,bが同じ方向を向いて かつ bがaよりも長い\n        return 'ONLINE_FRONT'\n    else:\n        return 'ON_SEGMENT'\n\n\n# load data\nx0, y0, x1, y1 = list(map(int, input().split()))\nN = int(input())\np0 = Vector([x0, y0])\np1 = Vector([x1, y1])\nfor _ in range(N):\n    x2, y2 = list(map(int, input().split()))\n    p2 = Vector([x2, y2])\n    print(ccw(p0, p1, p2))\n\n"
  },
  {
    "language": "Python",
    "code": "import math,sys\ntry: sys.stdin = open('in.in','r')\nexcept: pass\n\nclass Point:\n\tdef __init__(self,x,y):\n\t\tself.x = x\n\t\tself.y = y\n\tdef __add__(self,p):\n\t\treturn Point(self.x+p.x,self.y+p.y)\n\tdef __sub__(self,p):\n\t\treturn Point(self.x-p.x,self.y-p.y)\n\tdef __mul__(self,p):\n\t\treturn Point(self.x*p,self.y*p)\n\ndef Dot(a,b):\n\treturn a.x*b.x + a.y*b.y\ndef Cross(a,b):\n\treturn a.x*b.y - a.y*b.x\ndef Dis(a,b):\n\treturn math.sqrt( (a.x-b.x)*(a.x-b.x) + (a.y-b.y)*(a.y-b.y) )\ndef Dis2(a,b):\n\treturn (a.x-b.x)*(a.x-b.x) + (a.y-b.y)*(a.y-b.y)\n\nx0,y0,x1,y1 = map(int,input().split())\np0 = Point(x0,y0)\np1 = Point(x1,y1)\nq = int(input())\nfor i in range(q):\n\tx2,y2 = map(int,input().split())\n\tp2 = Point(x2,y2)\n\n\tcross = Cross(p1-p0,p2-p0)\n\tif cross > 0:\n\t\tprint('COUNTER_CLOCKWISE')\n\telif cross < 0:\n\t\tprint('CLOCKWISE')\n\telse:\n\t\tdot = Dot(p1-p0,p2-p0)\n\t\tif dot < 0:\n\t\t\tprint('ONLINE_BACK')\n\t\telse:\n\t\t\tlen1 = Dis2(p1,p0)\n\t\t\tlen2 = Dis2(p2,p0)\n\t\t\tprint( 'ONLINE_FRONT' if len1 < len2 else 'ON_SEGMENT' )\n\n"
  },
  {
    "language": "Python",
    "code": "def dot(a,b):return a[0]*b[0] + a[1]*b[1]\ndef cross(a,b):return a[0]*b[1] - a[1]*b[0]\ndef Order(a,b):\n    crs = cross(a,b)\n    if crs > 0 : return \"COUNTER_CLOCKWISE\"\n    elif crs < 0 : return \"CLOCKWISE\"\n    else:\n        if dot(a,b) < 0 : return \"ONLINE_BACK\"\n        elif dot(a,a) < dot(b,b) : return \"ONLINE_FRONT\"\n        else : return \"ON_SEGMENT\"\n\nx0,y0,x1,y1 = [int(i) for i in input().split()] \na = [x1-x0,y1-y0]\n\nq = int(input())\nfor i in range(q):\n    x2,y2 = [int(i) for i in input().split()]\n    b = [x2-x0,y2-y0]\n    print(Order(a,b))"
  },
  {
    "language": "Python",
    "code": "x0, y0, x1, y1 = map(int, input().split())\n\nq = int(input())\nfor _ in range(q):\n    x2, y2 = map(int, input().split())\n\n    cross = (x1 - x0)*(y2 - y0) - (y1 - y0)*(x2 - x0)\n    if cross > 0:\n        print('COUNTER_CLOCKWISE')\n        continue\n    if cross < 0:\n        print('CLOCKWISE')\n        continue\n\n    dot = (x1 - x0)*(x2 - x0) + (y1 - y0)*(y2 - y0)\n    if dot < 0:\n        print('ONLINE_BACK')\n        continue\n    if (x1 - x0)**2 + (y1 - y0)**2 < (x2 - x0)**2 + (y2 - y0)**2:\n        print('ONLINE_FRONT')\n    else:\n        print('ON_SEGMENT')\n\n"
  },
  {
    "language": "Python",
    "code": "x0, y0, x1, y1 = map(int, raw_input().split())\ndx = x1 - x0\ndy = y1 - y0\nr = dx**2 + dy**2\nfor t in xrange(input()):\n    x, y = map(int, raw_input().split())\n    ex = x - x0\n    ey = y - y0\n    ov = dx*ey - dy*ex\n    if ov > 0:\n        print \"COUNTER_CLOCKWISE\"\n    elif ov < 0:\n        print \"CLOCKWISE\"\n    else:\n        iv = dx*ex + dy*ey\n        if iv < 0:\n            print \"ONLINE_BACK\"\n        elif 0 <= iv <= r:\n            print \"ON_SEGMENT\"\n        else:\n            print \"ONLINE_FRONT\""
  },
  {
    "language": "Python",
    "code": "class Point(object):\n    __slots__ = [\"x\", \"y\"]\n\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __iter__(self):\n        yield self.x\n        yield self.y\n\n    def __add__(self, other: \"Point\") -> \"Point\":\n        return Point(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other: \"Point\") -> \"Point\":\n        return Point(self.x - other.x, self.y - other.y)\n\n    def __mul__(self, s: int):\n        return Point(self.x * s, self.y * s)\n\n    def project(self, vector: \"Vector\") -> \"Point\":\n        return (vector * (Vector(vector.p1, self).dot(vector) / vector.norm)).p2\n\n    def reflect(self, vector: \"Vector\") -> \"Point\":\n        return self + (self.project(vector) - self) * 2\n\n\nclass Vector(object):\n    __slots__ = [\"p1\", \"p2\", \"x\", \"y\", \"norm\", \"abs\"]\n\n    def __init__(self, p1: Point, p2: Point):\n        self.p1 = p1\n        self.p2 = p2\n        self.x = p2.x - p1.x\n        self.y = p2.y - p1.y\n        self.norm = self.x ** 2 + self.y ** 2\n        self.abs = abs(self.x + self.y)\n\n    def __mul__(self, s):\n        return Vector(self.p1, Point(self.p1.x + self.x * s, self.p1.y + self.y * s))\n\n    def __lt__(self, other: \"Vector\"):\n        return other.abs > self.abs\n\n    def __gt__(self, other: \"Vector\"):\n        return other.abs < self.abs\n\n    def dot(self, other: \"Vector\"):\n        return self.x * other.x + self.y * other.y\n\n    def cross(self, other: \"Vector\"):\n        return self.x * other.y - self.y * other.x\n\n\nif __name__ == \"__main__\":\n    a = list(map(int, input().split()))\n    p1, p2 = Point(*a[:2]), Point(*a[2:])\n    vector1 = Vector(p1, p2)\n    for p3 in (Point(*map(int, input().split())) for _ in [0]*int(input())):\n        vector2 = Vector(p1, p3)\n        if vector1.cross(vector2) > 0:\n            print(\"COUNTER_CLOCKWISE\")\n        elif vector1.cross(vector2) < 0:\n            print(\"CLOCKWISE\")\n        elif vector1.dot(vector2) < 0:\n            print(\"ONLINE_BACK\")\n        elif vector1 < vector2:\n            print(\"ONLINE_FRONT\")\n        else:\n            print(\"ON_SEGMENT\")\n"
  },
  {
    "language": "Python",
    "code": "from math import sqrt\nxp0, yp0, xp1, yp1 = map(int, input().split())\na = [xp0, yp0]\nb = [xp1, yp1]\nq = int(input())\n\nCCW = {1: 'COUNTER_CLOCKWISE',\n       2: 'CLOCKWISE',\n       3: 'ONLINE_BACK',\n       4: 'ONLINE_FRONT',\n       5: 'ON_SEGMENT',}\n\ndef dot(a, b):\n    return sum([i * j for i,j in zip(a, b)])\n\ndef sub(a, b):\n    return [a[0] - b[0],a[1] - b[1]]\n\ndef cross(a, b):\n    return  a[0] * b[1] - a[1] * b[0]\n\ndef _abs(a):\n    return sqrt(a[0] ** 2 + a[1] ** 2)\n\ndef ccw(a, b, c):\n    x = sub(b, c)\n    y = sub(c, a)\n    if cross(x, y) > 0: return 1\n    if cross(x, y) < 0: return 2\n    if dot(x, y) < 0: return 3\n    if _abs(x) < _abs(y): return 4\n    return 5\n\nfor i in range(q):\n    c = list(map(int, input().split()))\n    print(CCW[ccw(a, b, c)])"
  },
  {
    "language": "Python",
    "code": "from math import sqrt\nxp0, yp0, xp1, yp1 = map(int, input().split())\na = [xp0, yp0]\nb = [xp1, yp1]\nq = int(input())\n\nCCW = {1: 'COUNTER_CLOCKWISE',\n       2: 'CLOCKWISE',\n       3: 'ONLINE_BACK',\n       4: 'ONLINE_FRONT',\n       5: 'ON_SEGMENT',}\n\ndef dot(a, b):\n    return sum([i * j for i,j in zip(a, b)])\n\ndef sub(a, b):\n    return [a[0] - b[0],a[1] - b[1]]\n\ndef cross(a, b):\n    return  a[0] * b[1] - a[1] * b[0]\n\ndef _abs(a):\n    return sqrt(a[0] ** 2 + a[1] ** 2)\n\ndef ccw(a, b, c):\n    x = sub(b, a)\n    y = sub(c, a)\n    if cross(x, y) > 0: return 1\n    if cross(x, y) < 0: return 2\n    if dot(x, y) < 0: return 3\n    if _abs(x) < _abs(y): return 4\n    return 5\n\nfor i in range(q):\n    c = list(map(int, input().split()))\n    print(CCW[ccw(a, b, c)])\n    "
  },
  {
    "language": "Python",
    "code": "x0,y0,x1,y1 = map(float, raw_input().split())\nq = int(raw_input())\nfor _ in xrange(q):\n  x2,y2 = map(float, raw_input().split())\n  ax = x1-x0\n  ay = y1-y0\n  bx = x2-x0\n  by = y2-y0\n  # check sin is positive or negative\n  sin = ax*by-ay*bx\n  if sin == 0:\n    if(ax*bx < 0):\n      print \"ONLINE_BACK\"\n    else:\n      if bx > ax:\n        print \"ONLINE_FRONT\"\n      else:\n        print \"ON_SEGMENT\"\n  elif sin > 0:\n    print \"COUNTER_CLOCKWISE\"\n  else:\n    print \"CLOCKWISE\""
  },
  {
    "language": "Python",
    "code": "pp = list(map(int, input().split()))\nn = int(input())\n\ndef cross(a, b):\n    return a[0]*b[1]-a[1]*b[0]\n        \ndef dot(a, b):\n    n = len(a)\n    if n != len(b):\n        return None\n    ans = 0\n    for i, j in zip(a, b):\n        ans += i*j\n    return ans\n    \nfor i in range(n):\n    bb = list(map(int, input().split()))\n    a = (pp[2]-pp[0], pp[3]-pp[1])\n    b = (bb[0]-pp[0], bb[1]-pp[1])\n    if cross(a, b) > 0:\n        print(\"COUNTER_CLOCKWISE\")\n    elif cross(a, b) < 0:\n        print(\"CLOCKWISE\")\n    else:\n        if dot(a,b)<0:\n            print(\"ONLINE_BACK\")\n        elif dot(a, (b[0]-a[0],b[1]-a[1]))>0: \n            print(\"ONLINE_FRONT\")\n        else:\n            print(\"ON_SEGMENT\")\n"
  },
  {
    "language": "Python",
    "code": "#!/usr/bin/python3\n\nimport array\nfrom fractions import Fraction\nimport math\nimport os\nimport sys\n\n\nclass Vec(object):\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n        super().__init__()\n\n    def __add__(self, other):\n        return Vec(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other):\n        return Vec(self.x - other.x, self.y - other.y)\n\n    def __mul__(self, scalar):\n        return Vec(self.x * scalar, self.y * scalar)\n\n    def __rmul__(self, scalar):\n        return Vec(self.x * scalar, self.y * scalar)\n\n    def __truediv__(self, scalar):\n        return Vec(self.x / scalar, self.y / scalar)\n\n    def __iadd__(self, other):\n        self.x += other.x\n        self.y += other.y\n        return self\n\n    def __isub__(self, other):\n        self.x -= other.x\n        self.y -= other.y\n        return self\n\n    def __imul__(self, scalar):\n        self.x *= scalar\n        self.y *= scalar\n        return self\n\n    def __idiv__(self, scalar):\n        self.x /= scalar\n        self.y /= scalar\n        return self\n\n    def __neg__(self):\n        return Vec(-self.x, -self.y)\n\n    def dot(self, other):\n        return self.x * other.x + self.y * other.y\n\n    def cross(self, other):\n        return self.x * other.y - self.y * other.x\n\n    def abs2(self):\n        return self.x * self.x + self.y * self.y\n\n    def __abs__(self):\n        return math.sqrt(float(self.abs2()))\n\n    def __str__(self):\n        return '({}, {})'.format(self.x, self.y)\n\n\ndef main():\n    x1, y1, x2, y2 = read_ints()\n    Q = read_int()\n    for _ in range(Q):\n        x, y = read_ints()\n        print(solve(Vec(x1, y1), Vec(x2, y2), Vec(x, y)))\n\n\nCCW = 'COUNTER_CLOCKWISE'\nCW = 'CLOCKWISE'\nOLB = 'ONLINE_BACK'\nOLF = 'ONLINE_FRONT'\nOL = 'ON_SEGMENT'\n\n\ndef solve(u, v, a):\n    v -= u\n    a -= u\n    c = v.cross(a)\n    if c > 0:\n        return CCW\n    if c < 0:\n        return CW\n    d = v.dot(a)\n    if d < 0:\n        return OLB\n    if v.abs2() < a.abs2():\n        return OLF\n    return OL\n\n\n###############################################################################\n# AUXILIARY FUNCTIONS\n\nDEBUG = 'DEBUG' in os.environ\n\n\ndef inp():\n    return sys.stdin.readline().rstrip()\n\n\ndef read_int():\n    return int(inp())\n\n\ndef read_ints():\n    return [int(e) for e in inp().split()]\n\n\ndef dprint(*value, sep=' ', end='\\n'):\n    if DEBUG:\n        print(*value, sep=sep, end=end)\n\n\nif __name__ == '__main__':\n    main()\n\n"
  },
  {
    "language": "Python",
    "code": "xp0, yp0, xp1, yp1 = map(int, input().split())\nq = int(input())\n\nxp1 = complex(xp1 - xp0, yp1 - yp0)\neps = 1e-8\n\nfor _ in range(q):\n    x, y = map(int, input().split())\n    xp2 = complex(x - xp0, y - yp0)\n\n    temp = xp1.conjugate() * xp2\n    dot = temp.real\n    cross = temp.imag\n    if abs(cross) < eps:\n        if dot == 0:\n            print(\"ON_SEGMENT\")\n        elif dot > 0:\n            if abs(xp1) >= abs(xp2):\n                print(\"ON_SEGMENT\")\n            else:\n                print(\"ONLINE_FRONT\")\n        else:\n            print(\"ONLINE_BACK\")\n    elif cross > 0:\n        print(\"COUNTER_CLOCKWISE\")\n    else:\n        print(\"CLOCKWISE\")\n\n"
  },
  {
    "language": "Python",
    "code": "def dot(a,b):\n    return a.real*b.real+a.imag*b.imag\n\ndef cross(a,b):\n    return a.real*b.imag-a.imag*b.real\n\nx0,y0,x1,y1=map(int,input().split())\nq=int(input())\np0=x0+y0*1j\np1=x1+y1*1j\na=p1-p0\n\nfor x2, y2 in (map(int, input().split()) for _ in [0]*q):\n    p2=x2+y2*1j\n    b=p2-p0\n    S=cross(a,b)\n    if S>0: #符号付面積が正だったら\n        print(\"COUNTER_CLOCKWISE\")\n    elif S<0: #符号付面積が負だったら\n        print(\"CLOCKWISE\")\n    else:               #符号付面積が0だったら(一直線上に存在する)\n        if dot(a,b)>=0:\n            if dot(a,a)<dot(b,b):\n                print(\"ONLINE_FRONT\") \n            else:\n                print(\"ON_SEGMENT\") \n        else:\n            print(\"ONLINE_BACK\")\n"
  },
  {
    "language": "Rust",
    "code": "macro_rules ! input { ( source = $ s : expr , $ ( $ r : tt ) * ) => { let mut iter = $ s . split_whitespace ( ) ; input_inner ! { iter , $ ( $ r ) * } } ; ( iter = $ iter : ident , $ ( $ r : tt ) * ) => { let s = { use std :: io :: Read ; let mut s = String :: new ( ) ; std :: io :: stdin ( ) . read_to_string ( & mut s ) . unwrap ( ) ; s } ; let mut $ iter = s . split_whitespace ( ) ; input_inner ! { $ iter , $ ( $ r ) * } } ; ( $ ( $ r : tt ) * ) => { let s = { use std :: io :: Read ; let mut s = String :: new ( ) ; std :: io :: stdin ( ) . read_to_string ( & mut s ) . unwrap ( ) ; s } ; let mut iter = s . split_whitespace ( ) ; input_inner ! { iter , $ ( $ r ) * } } ; }\nmacro_rules ! input_inner { ( $ iter : expr ) => { } ; ( $ iter : expr , ) => { } ; ( $ iter : expr , mut $ var : ident : $ t : tt $ ( $ r : tt ) * ) => { let mut $ var = read_value ! ( $ iter , $ t ) ; input_inner ! { $ iter $ ( $ r ) * } } ; ( $ iter : expr , mut $ var : ident $ ( $ r : tt ) * ) => { input_inner ! { $ iter , mut $ var : usize $ ( $ r ) * } } ; ( $ iter : expr , $ var : ident : $ t : tt $ ( $ r : tt ) * ) => { let $ var = read_value ! ( $ iter , $ t ) ; input_inner ! { $ iter $ ( $ r ) * } } ; ( $ iter : expr , $ var : ident $ ( $ r : tt ) * ) => { input_inner ! { $ iter , $ var : usize $ ( $ r ) * } } ; }\nmacro_rules ! read_value { ( $ iter : expr , ( $ ( $ t : tt ) ,* ) ) => { ( $ ( read_value ! ( $ iter , $ t ) ) ,* ) } ; ( $ iter : expr , [ $ t : tt ; $ len : expr ] ) => { ( 0 ..$ len ) . map ( | _ | read_value ! ( $ iter , $ t ) ) . collect ::< Vec < _ >> ( ) } ; ( $ iter : expr , { chars : $ base : expr } ) => { read_value ! ( $ iter , String ) . chars ( ) . map ( | c | ( c as u8 - $ base as u8 ) as usize ) . collect ::< Vec < usize >> ( ) } ; ( $ iter : expr , { char : $ base : expr } ) => { read_value ! ( $ iter , { chars : $ base } ) [ 0 ] } ; ( $ iter : expr , chars ) => { read_value ! ( $ iter , String ) . chars ( ) . collect ::< Vec < char >> ( ) } ; ( $ iter : expr , char ) => { read_value ! ( $ iter , chars ) [ 0 ] } ; ( $ iter : expr , usize1 ) => { read_value ! ( $ iter , usize ) - 1 } ; ( $ iter : expr , $ t : ty ) => { $ iter . next ( ) . unwrap ( ) . parse ::<$ t > ( ) . unwrap ( ) } ; }\n#[derive(Clone, Copy, Debug, Default, PartialEq)]\npub struct Complex {\n    pub x: f64,\n    pub y: f64,\n}\nimpl Complex {\n    pub fn new(x: f64, y: f64) -> Complex {\n        Complex { x: x, y: y }\n    }\n    pub fn from_radian(theta: f64) -> Complex {\n        Complex::new(theta.cos(), theta.sin())\n    }\n    pub fn abs(self) -> f64 {\n        (self.x * self.x + self.y * self.y).sqrt()\n    }\n    pub fn dot(self, other: Complex) -> f64 {\n        self.x * other.x + self.y * other.y\n    }\n    pub fn cross(self, other: Complex) -> f64 {\n        self.x * other.y - self.y * other.x\n    }\n    pub fn conjugate(self) -> Complex {\n        Complex {\n            x: self.x,\n            y: -self.y,\n        }\n    }\n    pub fn angle(self) -> f64 {\n        self.y.atan2(self.x)\n    }\n}\nimpl std::ops::Add for Complex {\n    type Output = Complex;\n    fn add(self, other: Complex) -> Complex {\n        Complex {\n            x: self.x + other.x,\n            y: self.y + other.y,\n        }\n    }\n}\nimpl std::ops::Add<f64> for Complex {\n    type Output = Complex;\n    fn add(self, other: f64) -> Complex {\n        Complex {\n            x: self.x + other,\n            y: self.y + other,\n        }\n    }\n}\nimpl std::ops::Sub for Complex {\n    type Output = Complex;\n    fn sub(self, other: Complex) -> Complex {\n        Complex {\n            x: self.x - other.x,\n            y: self.y - other.y,\n        }\n    }\n}\nimpl std::ops::Sub<f64> for Complex {\n    type Output = Complex;\n    fn sub(self, other: f64) -> Complex {\n        Complex {\n            x: self.x - other,\n            y: self.y - other,\n        }\n    }\n}\nimpl std::ops::Mul for Complex {\n    type Output = Complex;\n    fn mul(self, other: Complex) -> Complex {\n        Complex {\n            x: self.x * other.x - self.y * other.y,\n            y: self.x * other.y + self.y * other.x,\n        }\n    }\n}\nimpl std::ops::Mul<f64> for Complex {\n    type Output = Complex;\n    fn mul(self, other: f64) -> Complex {\n        Complex {\n            x: self.x * other,\n            y: self.y * other,\n        }\n    }\n}\nimpl std::ops::Div for Complex {\n    type Output = Complex;\n    fn div(self, other: Complex) -> Complex {\n        self * other.conjugate() / other.abs()\n    }\n}\nimpl std::ops::Div<f64> for Complex {\n    type Output = Complex;\n    fn div(self, other: f64) -> Complex {\n        Complex {\n            x: self.x / other,\n            y: self.y / other,\n        }\n    }\n}\nimpl std::ops::Neg for Complex {\n    type Output = Complex;\n    fn neg(self) -> Complex {\n        Complex {\n            x: -self.x,\n            y: -self.y,\n        }\n    }\n}\nfn ccw(a: Complex, b: Complex, c: Complex) -> i8 {\n    let x = b - a;\n    let y = c - a;\n    if x.cross(y) > 0. {\n        return 1; // COUNTER_CLOCKWISE\n    }\n    if x.cross(y) < 0. {\n        return -1; // CLOCKWISE\n    }\n    if x.dot(y) < 0. {\n        return 2; // ONLINE_BACK\n    }\n    if x.abs() < y.abs() {\n        return -2; // ONLINE_FRONT\n    };\n    return 0; // ON_SEGMENT\n}\nfn main() {\n    input! { p0: [(f64, f64); 2], q, ps: [(f64, f64); q] };\n    let p0 = p0\n        .into_iter()\n        .map(|(x, y)| Complex::new(x, y))\n        .collect::<Vec<_>>();\n    let ps = ps\n        .into_iter()\n        .map(|(x, y)| Complex::new(x, y))\n        .collect::<Vec<_>>();\n    for i in 0..q {\n        let s = match ccw(p0[0], p0[1], ps[i]) {\n            1 => \"COUNTER_CLOCKWISE\",\n            -1 => \"CLOCKWISE\",\n            2 => \"ONLINE_BACK\",\n            -2 => \"ONLINE_FRONT\",\n            0 => \"ON_SEGMENT\",\n            _ => unreachable!(),\n        };\n        println!(\"{}\", s);\n    }\n}\n\n"
  },
  {
    "language": "Rust",
    "code": "use std::f64::consts::PI;\n\nconst EPS: f64 = 1e-8;\n\nfn main() {\n    let mut sc = Scanner::new();\n\n    let p0 = sc.next::<Pt>();\n    let p1 = sc.next::<Pt>();\n    let n = sc.next::<usize>();\n\n    for _ in 0..n {\n        let p2 = sc.next::<Pt>();\n\n        let ans = match ccw(p1, p0, p2) {\n            CCW::CounterClockwise => \"COUNTER_CLOCKWISE\",\n            CCW::Clockwise => \"CLOCKWISE\",\n            CCW::OnLineFront => \"ONLINE_FRONT\",\n            CCW::OnLineBack => \"ONLINE_BACK\",\n            CCW::OnSegment => \"ON_SEGMENT\",\n        };\n\n        println!(\"{}\", ans);\n    }\n}\n\npub fn cross(a: Pt, b: Pt) -> f64 {\n    (a.conj() * b).im\n}\n\npub fn dot(a: Pt, b: Pt) -> f64 {\n    (a.conj() * b).re\n}\n\npub enum CCW {\n    CounterClockwise = 1,\n    Clockwise = -1,\n    OnLineBack = 2,\n    OnLineFront = -2,\n    OnSegment = 0,\n}\n\npub fn ccw(a: Pt, b: Pt, c: Pt) -> CCW {\n    let b = b - a;\n    let c = c - a;\n    if cross(b, c) > 0.0 {\n        CCW::Clockwise\n    } else if cross(b, c) < 0.0 {\n        CCW::CounterClockwise\n    } else if dot(b, c) < 0.0 {\n        CCW::OnLineFront\n    } else if b.norm() < c.norm() {\n        CCW::OnLineBack\n    } else {\n        CCW::OnSegment\n    }\n}\n\n//==========\n\nuse std::fmt::Debug;\nuse std::ops::{Add, Div, Mul, Sub};\n\n#[derive(PartialEq, Eq, Copy, Clone, Hash, Debug, Default)]\n#[repr(C)]\npub struct Complex<T> {\n    /// Real portion of the complex number\n    pub re: T,\n    /// Imaginary portion of the complex number\n    pub im: T,\n}\n\nimpl<T> Complex<T> {\n    #[inline]\n    pub fn new(re: T, im: T) -> Self {\n        Complex { re, im }\n    }\n}\n\nimpl Complex<f64> {\n    #[inline]\n    pub fn conj(&self) -> Self {\n        Self::new(self.re.clone(), -self.im.clone())\n    }\n\n    #[inline]\n    pub fn norm(&self) -> f64 {\n        self.re.hypot(self.im)\n    }\n\n    #[inline]\n    pub fn arg(&self) -> f64 {\n        self.im.atan2(self.re)\n    }\n\n    #[inline]\n    pub fn abs(&self) -> f64 {\n        self.im.atan2(self.re)\n    }\n}\n\nimpl<T: Add<Output = T>> Add for Complex<T> {\n    type Output = Self;\n    fn add(self, rhs: Self) -> Self::Output {\n        Self::new(self.re + rhs.re, self.im + rhs.im)\n    }\n}\n\nimpl<T: Sub<Output = T>> Sub for Complex<T> {\n    type Output = Self;\n    fn sub(self, rhs: Self) -> Self::Output {\n        Self::new(self.re - rhs.re, self.im - rhs.im)\n    }\n}\n\nimpl<T: Copy + Add<Output = T> + Sub<Output = T> + Mul<Output = T>> Mul for Complex<T> {\n    type Output = Self;\n    fn mul(self, rhs: Self) -> Self::Output {\n        Self::new(\n            self.re * rhs.re - self.im * rhs.im,\n            self.re * rhs.im + self.im * rhs.re,\n        )\n    }\n}\n\nimpl<T: Copy + Add<Output = T> + Sub<Output = T> + Mul<Output = T> + Div<Output = T>> Div\n    for Complex<T>\n{\n    type Output = Self;\n    fn div(self, rhs: Self) -> Self::Output {\n        let d = rhs.re * rhs.re + rhs.im * rhs.im;\n        Self::new(\n            (self.re * rhs.re + self.im * rhs.im) / d,\n            (self.im * rhs.re - self.re * rhs.im) / d,\n        )\n    }\n}\n\ntype Pt = Complex<f64>;\n\n//==========\n\npub struct Scanner {\n    buf: Vec<char>,\n    cur: usize,\n}\n\nimpl Scanner {\n    pub fn new() -> Scanner {\n        Scanner {\n            buf: vec![],\n            cur: 0,\n        }\n    }\n\n    fn fill(&mut self) {\n        let mut s = String::new();\n        let len = std::io::stdin().read_line(&mut s).unwrap();\n        if len == 0 {\n            panic!(\"unexpected EOF\");\n        }\n        for c in s.chars() {\n            self.buf.push(c);\n        }\n    }\n\n    pub fn next_char(&mut self) -> char {\n        'outer: loop {\n            if self.cur >= self.buf.len() {\n                self.fill();\n            }\n            while self.cur < self.buf.len() {\n                if !self.buf[self.cur].is_whitespace() {\n                    break 'outer;\n                }\n                self.cur += 1;\n            }\n        }\n        let ret = self.buf[self.cur];\n        self.cur += 1;\n        ret\n    }\n\n    pub fn next_word(&mut self) -> String {\n        'outer: loop {\n            if self.cur >= self.buf.len() {\n                self.fill();\n            }\n            while self.cur < self.buf.len() {\n                if !self.buf[self.cur].is_whitespace() {\n                    break 'outer;\n                }\n                self.cur += 1;\n            }\n        }\n\n        let mut s = String::new();\n        while self.cur < self.buf.len() && !self.buf[self.cur].is_whitespace() {\n            s.push(self.buf[self.cur]);\n            self.cur += 1;\n        }\n        s\n    }\n\n    pub fn next<T: Reader>(&mut self) -> T {\n        T::read(self)\n    }\n\n    pub fn next_vec_len<T: Reader>(&mut self) -> Vec<T> {\n        let n: usize = self.next();\n        self.next_vec(n)\n    }\n\n    pub fn next_vec<T: Reader>(&mut self, n: usize) -> Vec<T> {\n        (0..n).map(|_| self.next()).collect()\n    }\n}\n\npub trait Reader {\n    fn read(sc: &mut Scanner) -> Self;\n}\n\nimpl<T: Reader> Reader for Complex<T> {\n    fn read(sc: &mut Scanner) -> Self {\n        Self::new(sc.next(), sc.next())\n    }\n}\n\nimpl Reader for char {\n    fn read(sc: &mut Scanner) -> Self {\n        sc.next_char()\n    }\n}\n\nmacro_rules! impl_for_from_str {\n    ($typ:ty) => {\n        impl Reader for $typ {\n            fn read(sc: &mut Scanner) -> Self {\n                sc.next_word().parse().unwrap()\n            }\n        }\n    };\n}\n\nimpl_for_from_str!(i8);\nimpl_for_from_str!(u8);\nimpl_for_from_str!(i16);\nimpl_for_from_str!(u16);\nimpl_for_from_str!(i32);\nimpl_for_from_str!(u32);\nimpl_for_from_str!(i64);\nimpl_for_from_str!(u64);\n// impl_for_from_str!(i128);\n// impl_for_from_str!(u128);\nimpl_for_from_str!(isize);\nimpl_for_from_str!(usize);\nimpl_for_from_str!(f32);\nimpl_for_from_str!(f64);\nimpl_for_from_str!(String);\n\n"
  }
]