[
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Python",
    "code": "def solve():\n    n, T = map(int, input().split())\n    songs = []\n    for _ in range(n):\n        t, g = map(int, input().split())\n        songs.append((t, g))\n    \n    MOD = 10**9 + 7\n    dp = [[[0 for _ in range(4)] for _ in range(T+1)] for _ in range(1 << n)]\n    dp[0][0][0] = 1\n    \n    for mask in range(1 << n):\n        for time in range(T+1):\n            for last_genre in range(4):\n                if dp[mask][time][last_genre] == 0:\n                    continue\n                \n                for i in range(n):\n                    if mask & (1 << i):\n                        continue\n                    \n                    new_time = time + songs[i][0]\n                    if new_time > T:\n                        continue\n                    \n                    new_genre = songs[i][1]\n                    if new_genre == last_genre:\n                        continue\n                    \n                    new_mask = mask | (1 << i)\n                    dp[new_mask][new_time][new_genre] += dp[mask][time][last_genre]\n                    dp[new_mask][new_time][new_genre] %= MOD\n    \n    total = 0\n    for last_genre in range(1, 4):\n        total += dp[(1 << n) - 1][T][last_genre]\n        total %= MOD\n    \n    return total\n\nprint(solve())",
    "timestamp": "2025-08-05 17:31:53"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Python",
    "code": "n, T = map(int, input().split())\nsongs = []\nfor _ in range(n):\n    t, g = map(int, input().split())\n    songs.append((t, g))\n\nMOD = 10**9 + 7\n\n# dp[mask][time][last_genre] = number of ways\ndp = [[[0] * 4 for _ in range(T + 1)] for __ in range(1 << n)]\nfor i in range(n):\n    t, g = songs[i]\n    if t <= T:\n        dp[1 << i][t][g] += 1\n\nresult = 0\nfor mask in range(1 << n):\n    for time in range(T + 1):\n        for last_genre in range(1, 4):\n            if dp[mask][time][last_genre] == 0:\n                continue\n            if time == T:\n                result += dp[mask][time][last_genre]\n                result %= MOD\n                continue\n            for i in range(n):\n                if not (mask & (1 << i)):\n                    new_t, new_g = songs[i]\n                    if new_g == last_genre:\n                        continue\n                    if time + new_t > T:\n                        continue\n                    new_mask = mask | (1 << i)\n                    dp[new_mask][time + new_t][new_g] += dp[mask][time][last_genre]\n                    dp[new_mask][time + new_t][new_g] %= MOD\n\nprint(result % MOD)",
    "timestamp": "2025-08-05 17:32:07"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "MOD = 10**9 + 7\n\ndef count_playlists(n, T, songs):\n    dp = [[[0] * 4 for _ in range(T + 1)] for _ in range(1 << n)]\n    dp[0][0][0] = 1\n\n    for mask in range(1 << n):\n        for current_time in range(T + 1):\n            for last_genre in range(4):\n                if dp[mask][current_time][last_genre] == 0:\n                    continue\n                for i in range(n):\n                    song_time, song_genre = songs[i]\n                    if (mask & (1 << i)) == 0 and current_time + song_time <= T:\n                        if last_genre != song_genre:\n                            dp[mask | (1 << i)][current_time + song_time][song_genre] += dp[mask][current_time][last_genre]\n                            dp[mask | (1 << i)][current_time + song_time][song_genre] %= MOD\n\n    result = 0\n    for last_genre in range(1, 4):\n        result = (result + dp[(1 << n) - 1][T][last_genre]) % MOD\n\n    return result\n\nn, T = map(int, input().split())\nsongs = [tuple(map(int, input().split())) for _ in range(n)]\n\nresult = count_playlists(n, T, songs)\nprint(result)",
    "timestamp": "2025-08-12 21:41:43"
  }
]