[
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\n#define MAX_DIGITS 10\n\nint target;\nchar number[MAX_DIGITS];\nint best_sum;\nint best_parts[MAX_DIGITS];\nint best_count;\nint rejected;\n\nvoid backtrack(int pos, int current_sum, int parts[], int part_count) {\n    if (pos == strlen(number)) {\n        if (current_sum <= target) {\n            if (current_sum > best_sum) {\n                best_sum = current_sum;\n                best_count = part_count;\n                for (int i = 0; i < part_count; i++) {\n                    best_parts[i] = parts[i];\n                }\n                rejected = 0;\n            } else if (current_sum == best_sum) {\n                rejected = 1;\n            }\n        }\n        return;\n    }\n\n    int num = 0;\n    for (int i = pos; i < strlen(number); i++) {\n        num = num * 10 + (number[i] - '0');\n        if (current_sum + num > target) {\n            break;\n        }\n        parts[part_count] = num;\n        backtrack(i + 1, current_sum + num, parts, part_count + 1);\n    }\n}\n\nint main() {\n    while (1) {\n        scanf(\"%d %s\", &target, number);\n        if (target == 0 && strcmp(number, \"0\") == 0) {\n            break;\n        }\n\n        if (atoi(number) == target) {\n            printf(\"%d %d\\n\", target, target);\n            continue;\n        }\n\n        best_sum = -1;\n        best_count = 0;\n        rejected = 0;\n        int parts[MAX_DIGITS];\n\n        backtrack(0, 0, parts, 0);\n\n        if (best_sum == -1) {\n            printf(\"error\\n\");\n        } else if (rejected) {\n            printf(\"rejected\\n\");\n        } else {\n            printf(\"%d\", best_sum);\n            for (int i = 0; i < best_count; i++) {\n                printf(\" %d\", best_parts[i]);\n            }\n            printf(\"\\n\");\n        }\n    }\n    return 0;\n}",
    "timestamp": "2025-08-05 19:14:56"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class ShredderSimulation {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        \n        while (true) {\n            int target = scanner.nextInt();\n            int number = scanner.nextInt();\n            \n            if (target == 0 && number == 0) {\n                break;\n            }\n            \n            if (target == number) {\n                System.out.println(\"original\");\n                continue;\n            }\n            \n            List<List<Integer>> validCombinations = findCombinations(target, number);\n            \n            if (validCombinations.isEmpty()) {\n                System.out.println(\"error\");\n            } else if (validCombinations.size() > 1) {\n                System.out.println(\"rejected\");\n            } else {\n                List<Integer> bestCombination = validCombinations.get(0);\n                int sum = bestCombination.stream().mapToInt(Integer::intValue).sum();\n                System.out.println(sum + \" \" + String.join(\" \", bestCombination.stream().map(String::valueOf).toArray(String[]::new)));\n            }\n        }\n        \n        scanner.close();\n    }\n    \n    private static List<List<Integer>> findCombinations(int target, int number) {\n        List<List<Integer>> validCombinations = new ArrayList<>();\n        \n        for (int i = 1; i <= number / 2; i++) {\n            if (canCreateCombination(target, number, i)) {\n                List<Integer> combination = generateCombination(target, number, i);\n                if (combination != null) {\n                    validCombinations.add(combination);\n                }\n            }\n        }\n        \n        return validCombinations;\n    }\n    \n    private static boolean canCreateCombination(int target, int number, int pieces) {\n        return number % pieces == 0 || (number / pieces + number % pieces <= target);\n    }\n    \n    private static List<Integer> generateCombination(int target, int number, int pieces) {\n        int baseValue = number / pieces;\n        int remainder = number % pieces;\n        \n        List<Integer> combination = new ArrayList<>();\n        int currentSum = 0;\n        \n        for (int i = 0; i < pieces; i++) {\n            int value = baseValue + (remainder > 0 ? 1 : 0);\n            combination.add(value);\n            currentSum += value;\n            remainder--;\n        }\n        \n        if (currentSum <= target) {\n            return combination;\n        }\n        \n        return null;\n    }\n}",
    "timestamp": "2025-08-05 19:15:06"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\nvector<vector<int>> results;\nint max_sum;\nstring num_str;\nint target;\n\nvoid backtrack(int start, vector<int>& path, int current_sum) {\n    if (start == num_str.length()) {\n        if (current_sum <= target) {\n            if (current_sum > max_sum) {\n                max_sum = current_sum;\n                results.clear();\n                results.push_back(path);\n            } else if (current_sum == max_sum) {\n                results.push_back(path);\n            }\n        }\n        return;\n    }\n\n    for (int end = start + 1; end <= num_str.length(); ++end) {\n        string part_str = num_str.substr(start, end - start);\n        int part = stoi(part_str);\n        if (current_sum + part > target) continue;\n        path.push_back(part);\n        backtrack(end, path, current_sum + part);\n        path.pop_back();\n    }\n}\n\nint main() {\n    while (true) {\n        int paper;\n        cin >> target >> paper;\n        if (target == 0 && paper == 0) break;\n\n        num_str = to_string(paper);\n        results.clear();\n        max_sum = -1;\n        vector<int> path;\n        backtrack(0, path, 0);\n\n        if (max_sum == -1) {\n            cout << \"error\" << endl;\n        } else if (results.size() > 1) {\n            cout << \"rejected\" << endl;\n        } else {\n            cout << max_sum << \" \";\n            for (int i = 0; i < results[0].size(); ++i) {\n                if (i != 0) cout << \" \";\n                cout << results[0][i];\n            }\n            cout << endl;\n        }\n    }\n    return 0;\n}",
    "timestamp": "2025-08-05 19:15:26"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <limits.h>\n\n#define MAX_PARTS 100\n\nvoid findCombination(int target, int number) {\n    if (target == number) {\n        printf(\"%d\\n\", number);\n        return;\n    }\n\n    int bestSum = 0;\n    int bestParts[MAX_PARTS];\n    int bestPartCount = 0;\n    int solutions = 0;\n\n    for (int mask = 1; mask < (1 << 20); mask++) {\n        int sum = 0;\n        int parts[MAX_PARTS];\n        int partCount = 0;\n\n        for (int j = 0; j < 20; j++) {\n            if (mask & (1 << j)) {\n                int currentPart = 1 << j;\n                if (currentPart > number) break;\n                \n                sum += currentPart;\n                parts[partCount++] = currentPart;\n            }\n        }\n\n        if (sum == number) continue;\n        \n        if (sum <= target && sum > bestSum) {\n            bestSum = sum;\n            bestPartCount = partCount;\n            for (int k = 0; k < partCount; k++) {\n                bestParts[k] = parts[k];\n            }\n            solutions = 1;\n        } else if (sum <= target && sum == bestSum) {\n            solutions++;\n        }\n    }\n\n    if (bestSum == 0) {\n        printf(\"error\\n\");\n    } else if (solutions > 1) {\n        printf(\"rejected\\n\");\n    } else {\n        printf(\"%d \", bestSum);\n        for (int i = 0; i < bestPartCount; i++) {\n            printf(\"%d%s\", bestParts[i], i == bestPartCount - 1 ? \"\\n\" : \" \");\n        }\n    }\n}\n\nint main() {\n    int target, number;\n\n    while (1) {\n        scanf(\"%d %d\", &target, &number);\n        \n        if (target == 0 && number == 0) break;\n        \n        findCombination(target, number);\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-05 19:15:35"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\n\nusing namespace std;\n\nvoid findShredderCombination(int target, int number) {\n    if (number == target) {\n        cout << \"No need to shred\" << endl;\n        return;\n    }\n\n    vector<int> parts;\n    vector<vector<int>> validCombinations;\n    int closestSum = 0;\n\n    for (int i = 1; i <= number / 2; ++i) {\n        if (number % i == 0) {\n            int complement = number / i;\n            int currentSum = i + complement;\n\n            if (currentSum <= target) {\n                if (currentSum > closestSum) {\n                    closestSum = currentSum;\n                    validCombinations.clear();\n                    validCombinations.push_back({i, complement});\n                } else if (currentSum == closestSum) {\n                    validCombinations.push_back({i, complement});\n                }\n            }\n        }\n    }\n\n    if (validCombinations.empty()) {\n        cout << \"error\" << endl;\n    } else if (validCombinations.size() > 1) {\n        cout << \"rejected\" << endl;\n    } else {\n        cout << closestSum << \" \" << validCombinations[0][0] << \" \" << validCombinations[0][1] << endl;\n    }\n}\n\nint main() {\n    int target, number;\n    while (true) {\n        cin >> target >> number;\n        if (target == 0 && number == 0) break;\n        findShredderCombination(target, number);\n    }\n    return 0;\n}",
    "timestamp": "2025-08-05 19:15:42"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class Shredder {\n    static List<String> bestParts;\n    static int bestSum;\n    static int target;\n    static boolean multiple;\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        while (true) {\n            target = scanner.nextInt();\n            String number = scanner.next();\n            if (target == 0 && number.equals(\"0\")) {\n                break;\n            }\n            if (Integer.parseInt(number) == target) {\n                System.out.println(target + \" \" + target);\n                continue;\n            }\n            bestSum = -1;\n            bestParts = new ArrayList<>();\n            multiple = false;\n            backtrack(number, new ArrayList<>(), 0);\n            if (bestSum == -1) {\n                System.out.println(\"error\");\n            } else if (multiple) {\n                System.out.println(\"rejected\");\n            } else {\n                System.out.print(bestSum + \" \");\n                System.out.println(String.join(\" \", bestParts));\n            }\n        }\n        scanner.close();\n    }\n\n    static void backtrack(String remaining, List<String> currentParts, int currentSum) {\n        if (remaining.isEmpty()) {\n            if (currentSum <= target && currentSum >= bestSum) {\n                if (currentSum == bestSum) {\n                    multiple = true;\n                } else {\n                    bestSum = currentSum;\n                    bestParts = new ArrayList<>(currentParts);\n                    multiple = false;\n                }\n            }\n            return;\n        }\n        for (int i = 1; i <= remaining.length(); i++) {\n            String part = remaining.substring(0, i);\n            int num = Integer.parseInt(part);\n            if (currentSum + num > target) {\n                continue;\n            }\n            currentParts.add(part);\n            backtrack(remaining.substring(i), currentParts, currentSum + num);\n            currentParts.remove(currentParts.size() - 1);\n        }\n    }\n}",
    "timestamp": "2025-08-05 19:16:01"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def shredder_simulation():\n    from itertools import combinations\n\n    def find_best_combination(target, number_on_paper):\n        if target == number_on_paper:\n            return 'target equals paper'\n\n        parts = list(map(int, str(number_on_paper)))\n        best_sum = -1\n        best_parts_combination = None\n\n        all_combinations = []\n        for i in range(1, len(parts) + 1):\n            all_combinations.extend(combinations(parts, i))\n        \n        for comb in all_combinations:\n            comb_sum = sum(comb)\n            if comb_sum <= target:\n                if comb_sum > best_sum:\n                    best_sum = comb_sum\n                    best_parts_combination = comb\n                elif comb_sum == best_sum:\n                    return 'rejected'\n        \n        if best_parts_combination is None:\n            return 'error'\n        else:\n            return best_sum, best_parts_combination\n\n    while True:\n        input_line = input().strip()\n        target, number_on_paper = map(int, input_line.split())\n        if target == 0 and number_on_paper == 0:\n            break\n\n        result = find_best_combination(target, number_on_paper)\n\n        if result == 'target equals paper':\n            print(f\"{target}\")\n        elif result == 'error':\n            print('error')\n        elif result == 'rejected':\n            print('rejected')\n        else:\n            best_sum, parts_combination = result\n            print(f\"{best_sum} {' '.join(map(str, parts_combination))}\")\n\n# Calling the function to run the simulation\nshredder_simulation()",
    "timestamp": "2025-08-13 03:13:48"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "java",
    "code": "import java.util.*;\n\npublic class ShredderSimulation {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String line;\n        while (!(line = scanner.nextLine()).equals(\"0 0\")) {\n            String[] inputs = line.split(\" \");\n            int target = Integer.parseInt(inputs[0]);\n            int number = Integer.parseInt(inputs[1]);\n\n            if (target == number) {\n                System.out.println(number);\n                continue;\n            }\n\n            List<Integer> result = new ArrayList<>();\n            List<Integer> current = new ArrayList<>();\n            int[] bestSum = {0};\n            boolean[] isRejected = {false};\n\n            shred(new int[] {number}, target, 0, current, result, bestSum, isRejected);\n\n            if (result.isEmpty()) {\n                System.out.println(\"error\");\n            } else if (isRejected[0]) {\n                System.out.println(\"rejected\");\n            } else {\n                System.out.println(bestSum[0] + \" \" + result);\n            }\n        }\n        scanner.close();\n    }\n\n    private static void shred(int[] numbers, int target, int start, List<Integer> current, List<Integer> bestResult, int[] bestSum, boolean[] isRejected) {\n        int currentSum = current.stream().mapToInt(Integer::intValue).sum();\n        if (currentSum == target) {\n            isRejected[0] = false;\n            bestResult.clear();\n            bestResult.addAll(current);\n            bestSum[0] = currentSum;\n            return;\n        } else if (currentSum > bestSum[0] && currentSum < target) {\n            isRejected[0] = false;\n            bestResult.clear();\n            bestResult.addAll(current);\n            bestSum[0] = currentSum;\n        } else if (currentSum == bestSum[0] && currentSum != 0) {\n            isRejected[0] = true;\n        }\n\n        for (int i = start; i < numbers.length; i++) {\n            int number = numbers[i];\n            for (int j = 0; j <= String.valueOf(number).length(); j++) {\n                if (j == 0) continue;\n                int part = Integer.parseInt(String.valueOf(number).substring(0, j));\n                int remaining = number % (int) Math.pow(10, (String.valueOf(number).length() - j));\n                \n                current.add(part);\n                shred(new int[] {remaining}, target, 0, current, bestResult, bestSum, isRejected);\n                current.remove(current.size() - 1);\n            }\n        }\n    }\n}",
    "timestamp": "2025-08-13 03:13:55"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n\n#define MAX_PIECES 100\n\nvoid shredPaper(int target, int number) {\n    if (target == number) {\n        printf(\"error\\n\");\n        return;\n    }\n\n    int bestSum = 0;\n    int bestCount = 0;\n    int bestPieces[MAX_PIECES];\n    int solutionsFound = 0;\n\n    for (int i = 1; i <= number; i++) {\n        if (number % i == 0) {\n            int sum = 0;\n            int count = 0;\n            int pieces[MAX_PIECES];\n\n            for (int j = i; sum + j <= target; j += i) {\n                pieces[count++] = i;\n                sum += i;\n            }\n\n            if (sum > bestSum) {\n                bestSum = sum;\n                bestCount = count;\n                for (int k = 0; k < count; k++) {\n                    bestPieces[k] = pieces[k];\n                }\n                solutionsFound = 1;\n            } else if (sum == bestSum && count != bestCount) {\n                solutionsFound = 2;\n            }\n        }\n    }\n\n    if (solutionsFound == 0 || bestSum == 0) {\n        printf(\"error\\n\");\n    } else if (solutionsFound == 2) {\n        printf(\"rejected\\n\");\n    } else {\n        printf(\"%d sum \", bestSum);\n        for (int i = 0; i < bestCount; i++) {\n            printf(\"%d \", bestPieces[i]);\n        }\n        printf(\"\\n\");\n    }\n}\n\nint main() {\n    int target, number;\n    while (scanf(\"%d %d\", &target, &number), target != 0 || number != 0) {\n        shredPaper(target, number);\n    }\n    return 0;\n}",
    "timestamp": "2025-08-13 03:13:59"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def find_shredder_pieces(target, number):\n    if target == number:\n        return None\n    \n    def backtrack(current_sum, current_pieces, start):\n        if current_sum == target:\n            return current_pieces\n        \n        if current_sum > target or start >= len(str(number)):\n            return None\n        \n        results = []\n        for i in range(start, len(str(number))):\n            for j in range(i+1, len(str(number))+1):\n                piece = int(str(number)[i:j])\n                new_sum = current_sum + piece\n                \n                if new_sum > target:\n                    break\n                \n                result = backtrack(new_sum, current_pieces + [piece], j)\n                if result:\n                    results.append(result)\n        \n        return results\n    \n    all_combinations = backtrack(0, [], 0)\n    \n    if not all_combinations:\n        return 'error'\n    \n    max_sum_combinations = []\n    max_sum = 0\n    \n    for combination in all_combinations:\n        current_sum = sum(combination)\n        if current_sum > max_sum and current_sum <= target:\n            max_sum = current_sum\n            max_sum_combinations = [combination]\n        elif current_sum == max_sum:\n            max_sum_combinations.append(combination)\n    \n    if len(max_sum_combinations) > 1:\n        return 'rejected'\n    \n    return f\"{max_sum} {' '.join(map(str, max_sum_combinations[0]))}\"\n\ndef main():\n    while True:\n        target, number = map(int, input().split())\n        \n        if target == 0 and number == 0:\n            break\n        \n        result = find_shredder_pieces(target, number)\n        print(result)\n\nif __name__ == \"__main__\":\n    main()",
    "timestamp": "2025-08-13 03:14:18"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def solve():\n    import sys\n    from itertools import combinations\n\n    for line in sys.stdin:\n        target, paper = line.strip().split()\n        if target == '0' and paper == '0':\n            break\n        target = int(target)\n        paper_str = paper\n        paper = list(paper_str)\n        \n        max_sum = -1\n        best_parts = []\n        found = False\n        \n        for r in range(1, len(paper) + 1):\n            for indices in combinations(range(1, len(paper)), r - 1):\n                indices = sorted(indices)\n                parts = []\n                start = 0\n                valid = True\n                for i in indices:\n                    part = paper_str[start:i]\n                    if part.startswith('0') and len(part) > 1:\n                        valid = False\n                        break\n                    parts.append(part)\n                    start = i\n                part = paper_str[start:]\n                if part.startswith('0') and len(part) > 1:\n                    valid = False\n                if not valid:\n                    continue\n                parts.append(part)\n                nums = list(map(int, parts))\n                current_sum = sum(nums)\n                if current_sum <= target and current_sum > max_sum:\n                    max_sum = current_sum\n                    best_parts = [parts]\n                    found = True\n                elif current_sum <= target and current_sum == max_sum:\n                    best_parts.append(parts)\n        \n        if not found:\n            print(\"error\")\n        else:\n            if len(best_parts) > 1:\n                print(\"rejected\")\n            else:\n                print(max_sum, ' '.join(best_parts[0]))\n\nsolve()",
    "timestamp": "2025-08-13 03:14:32"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <sstream>\n\nusing namespace std;\n\nvoid processTestCase(int target, int number) {\n    if (target == number) {\n        cout << number << \" = \" << number << \"\\n\";\n        return;\n    }\n    \n    string strNumber = to_string(number);\n    int n = strNumber.size();\n    vector<int> pieces;\n    bool found = false;\n    int maxSum = -1;\n    vector<string> bestCombination;\n    int count = 0;\n\n    for (int mask = 0; mask < (1 << (n - 1)); ++mask) {\n        pieces.clear();\n        string currentPiece = \"\";\n        \n        for (int j = 0; j < n; ++j) {\n            currentPiece += strNumber[j];\n            \n            if (j == n - 1 || (mask & (1 << j))) {\n                pieces.push_back(stoi(currentPiece));\n                currentPiece = \"\";\n            }\n        }\n\n        int sum = 0;\n        for (int piece : pieces) {\n            sum += piece;\n        }\n\n        if (sum <= target) {\n            if (sum > maxSum) {\n                maxSum = sum;\n                count = 1;\n                bestCombination.clear();\n                stringstream ss;\n                ss << pieces[0];\n                for (int i = 1; i < pieces.size(); ++i) {\n                    ss << \" + \" << pieces[i];\n                }\n                bestCombination.push_back(ss.str());\n            } else if (sum == maxSum) {\n                count++;\n            }\n        }\n    }\n\n    if (maxSum == -1) {\n        cout << \"error\\n\";\n    } else if (count > 1) {\n        cout << \"rejected\\n\";\n    } else {\n        cout << maxSum << \" = \" << bestCombination[0] << \"\\n\";\n    }\n}\n\nint main() {\n    while (true) {\n        int target, number;\n        cin >> target >> number;\n        if (target == 0 && number == 0) break;\n        processTestCase(target, number);\n    }\n    return 0;\n}",
    "timestamp": "2025-08-13 11:10:29"
  }
]