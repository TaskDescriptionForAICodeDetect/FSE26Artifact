[
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAX(a, b) ((a) > (b) ? (a) : (b))\n#define MIN(a, b) ((a) < (b) ? (a) : (b))\n\nint largestRectangleArea(int* heights, int heightsSize) {\n    int* stack = malloc(heightsSize * sizeof(int));\n    int top = -1;\n    int maxArea = 0;\n    int i, h, w;\n\n    for (i = 0; i <= heightsSize; i++) {\n        h = (i == heightsSize) ? 0 : heights[i];\n        \n        while (top != -1 && h < heights[stack[top]]) {\n            int height = heights[stack[top--]];\n            w = (top == -1) ? i : i - stack[top] - 1;\n            maxArea = MAX(maxArea, height * w);\n        }\n        \n        stack[++top] = i;\n    }\n    \n    free(stack);\n    return maxArea;\n}\n\nint largest0Rectangle(int** matrix, int H, int W) {\n    int* heights = malloc(W * sizeof(int));\n    int maxArea = 0;\n    int i, j;\n\n    memset(heights, 0, W * sizeof(int));\n\n    for (i = 0; i < H; i++) {\n        for (j = 0; j < W; j++) {\n            heights[j] = (matrix[i][j] == 0) ? heights[j] + 1 : 0;\n        }\n        \n        int area = largestRectangleArea(heights, W);\n        maxArea = MAX(maxArea, area);\n    }\n\n    free(heights);\n    return maxArea;\n}",
    "timestamp": "2025-08-05 22:17:23"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n\nint max(int a, int b) {\n    return (a > b) ? a : b;\n}\n\nint min(int a, int b) {\n    return (a < b) ? a : b;\n}\n\nint maximalRectangle(int* matrix, int H, int W) {\n    if (H == 0 || W == 0) return 0;\n    \n    int* heights = (int*)calloc(W, sizeof(int));\n    int max_area = 0;\n    \n    for (int i = 0; i < H; i++) {\n        for (int j = 0; j < W; j++) {\n            if (matrix[i * W + j] == 0) {\n                heights[j] += 1;\n            } else {\n                heights[j] = 0;\n            }\n        }\n        \n        int* stack = (int*)malloc(W * sizeof(int));\n        int top = -1;\n        \n        for (int j = 0; j <= W; j++) {\n            int h = (j == W) ? 0 : heights[j];\n            while (top != -1 && h < heights[stack[top]]) {\n                int height = heights[stack[top--]];\n                int width = (top == -1) ? j : j - stack[top] - 1;\n                max_area = max(max_area, height * width);\n            }\n            stack[++top] = j;\n        }\n        free(stack);\n    }\n    free(heights);\n    return max_area;\n}\n\nint main() {\n    int H, W;\n    scanf(\"%d %d\", &H, &W);\n    int* matrix = (int*)malloc(H * W * sizeof(int));\n    for (int i = 0; i < H * W; i++) {\n        scanf(\"%d\", &matrix[i]);\n    }\n    printf(\"%d\\n\", maximalRectangle(matrix, H, W));\n    free(matrix);\n    return 0;\n}",
    "timestamp": "2025-08-05 22:17:40"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <vector>\n#include <stack>\n#include <algorithm>\n\nusing namespace std;\n\nint maximalRectangle(vector<vector<int>>& matrix) {\n    if (matrix.empty() || matrix[0].empty()) return 0;\n    int H = matrix.size();\n    int W = matrix[0].size();\n    vector<int> heights(W, 0);\n    int maxArea = 0;\n\n    for (int i = 0; i < H; ++i) {\n        for (int j = 0; j < W; ++j) {\n            if (matrix[i][j] == 0) {\n                heights[j] += 1;\n            } else {\n                heights[j] = 0;\n            }\n        }\n        stack<int> st;\n        for (int j = 0; j <= W; ++j) {\n            while (!st.empty() && (j == W || heights[st.top()] > heights[j])) {\n                int h = heights[st.top()];\n                st.pop();\n                int w = st.empty() ? j : j - st.top() - 1;\n                maxArea = max(maxArea, h * w);\n            }\n            st.push(j);\n        }\n    }\n    return maxArea;\n}",
    "timestamp": "2025-08-05 22:17:53"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.Stack;\n\npublic class MaxZeroRectangleArea {\n    public int maximalRectangle(int[][] matrix) {\n        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {\n            return 0;\n        }\n        int rows = matrix.length;\n        int cols = matrix[0].length;\n        int[] heights = new int[cols];\n        int maxArea = 0;\n        \n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (matrix[i][j] == 0) {\n                    heights[j] += 1;\n                } else {\n                    heights[j] = 0;\n                }\n            }\n            maxArea = Math.max(maxArea, largestRectangleArea(heights));\n        }\n        return maxArea;\n    }\n    \n    private int largestRectangleArea(int[] heights) {\n        Stack<Integer> stack = new Stack<>();\n        int maxArea = 0;\n        int n = heights.length;\n        \n        for (int i = 0; i <= n; i++) {\n            int h = (i == n) ? 0 : heights[i];\n            while (!stack.isEmpty() && h < heights[stack.peek()]) {\n                int height = heights[stack.pop()];\n                int width = stack.isEmpty() ? i : i - stack.peek() - 1;\n                maxArea = Math.max(maxArea, height * width);\n            }\n            stack.push(i);\n        }\n        return maxArea;\n    }\n}",
    "timestamp": "2025-08-05 22:18:09"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "class Solution {\n    public int largestRectangle(int[][] matrix) {\n        if (matrix == null || matrix.length == 0) return 0;\n        \n        int rows = matrix.length;\n        int cols = matrix[0].length;\n        int[][] heights = new int[rows][cols];\n        \n        // Compute histogram heights\n        for (int j = 0; j < cols; j++) {\n            for (int i = 0; i < rows; i++) {\n                if (matrix[i][j] == 0) {\n                    heights[i][j] = (i == 0) ? 1 : heights[i-1][j] + 1;\n                }\n            }\n        }\n        \n        int maxArea = 0;\n        \n        // Find max rectangle in each row's histogram\n        for (int i = 0; i < rows; i++) {\n            maxArea = Math.max(maxArea, largestRectangleHistogram(heights[i]));\n        }\n        \n        return maxArea;\n    }\n    \n    private int largestRectangleHistogram(int[] heights) {\n        int n = heights.length;\n        Stack<Integer> stack = new Stack<>();\n        int maxArea = 0;\n        \n        for (int i = 0; i <= n; i++) {\n            int h = (i == n) ? 0 : heights[i];\n            \n            while (!stack.isEmpty() && h < heights[stack.peek()]) {\n                int height = heights[stack.pop()];\n                int width = stack.isEmpty() ? i : i - stack.peek() - 1;\n                maxArea = Math.max(maxArea, height * width);\n            }\n            \n            stack.push(i);\n        }\n        \n        return maxArea;\n    }\n}",
    "timestamp": "2025-08-05 22:18:15"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "class Solution {\npublic:\n    int largestRectangle(vector<vector<int>>& matrix) {\n        if (matrix.empty() || matrix[0].empty()) return 0;\n        \n        int H = matrix.size();\n        int W = matrix[0].size();\n        vector<int> heights(W, 0);\n        int maxArea = 0;\n        \n        for (int row = 0; row < H; row++) {\n            // Update histogram heights\n            for (int col = 0; col < W; col++) {\n                if (matrix[row][col] == 0) {\n                    heights[col]++;\n                } else {\n                    heights[col] = 0;\n                }\n            }\n            \n            // Find largest rectangle in histogram\n            maxArea = max(maxArea, largestRectangleHistogram(heights));\n        }\n        \n        return maxArea;\n    }\n    \nprivate:\n    int largestRectangleHistogram(vector<int>& heights) {\n        int n = heights.size();\n        stack<int> s;\n        int maxArea = 0;\n        \n        for (int i = 0; i <= n; i++) {\n            int h = (i == n) ? 0 : heights[i];\n            \n            while (!s.empty() && h < heights[s.top()]) {\n                int height = heights[s.top()];\n                s.pop();\n                \n                int width = s.empty() ? i : i - s.top() - 1;\n                maxArea = max(maxArea, height * width);\n            }\n            \n            s.push(i);\n        }\n        \n        return maxArea;\n    }\n};",
    "timestamp": "2025-08-05 22:18:21"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def maximalRectangle(matrix):\n    if not matrix:\n        return 0\n    \n    H = len(matrix)\n    W = len(matrix[0])\n    height = [0] * (W + 1)\n    max_area = 0\n    \n    for row in matrix:\n        for i in range(W):\n            height[i] = height[i] + 1 if row[i] == '0' else 0\n        \n        stack = [-1]\n        \n        for i in range(W + 1):\n            while height[i] < height[stack[-1]]:\n                h = height[stack.pop()]\n                w = i - stack[-1] - 1\n                max_area = max(max_area, h * w)\n            stack.append(i)\n            \n    return max_area\n\n# Example usage:\nmatrix = [\n    ['1', '0', '1', '0', '0'],\n    ['1', '0', '1', '1', '1'],\n    ['1', '1', '1', '0', '0'],\n    ['1', '0', '0', '1', '0']\n]\n\nprint(maximalRectangle(matrix))  # Output will be the area of maximum rectangle of 0s",
    "timestamp": "2025-08-13 09:52:37"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "java",
    "code": "public class LargestRectangleOfZeros {\n\n    public static int maximalRectangle(int[][] matrix) {\n        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {\n            return 0;\n        }\n\n        int maxArea = 0;\n        int rowCount = matrix.length;\n        int colCount = matrix[0].length;\n        int[] heights = new int[colCount];\n        \n        for (int i = 0; i < rowCount; i++) {\n            for (int j = 0; j < colCount; j++) {\n                if (matrix[i][j] == 0) {\n                    heights[j]++;\n                } else {\n                    heights[j] = 0;\n                }\n            }\n            maxArea = Math.max(maxArea, largestRectangleArea(heights));\n        }\n        return maxArea;\n    }\n\n    private static int largestRectangleArea(int[] heights) {\n        int[] lessFromLeft = new int[heights.length];\n        int[] lessFromRight = new int[heights.length];\n        \n        lessFromRight[heights.length - 1] = heights.length;\n        lessFromLeft[0] = -1;\n        for (int i = 1; i < heights.length; i++) {\n            int p = i - 1;\n            while (p >= 0 && heights[p] >= heights[i]) {\n                p = lessFromLeft[p];\n            }\n            lessFromLeft[i] = p;\n        }\n        \n        for (int i = heights.length - 2; i >= 0; i--) {\n            int p = i + 1;\n            while (p < heights.length && heights[p] >= heights[i]) {\n                p = lessFromRight[p];\n            }\n            lessFromRight[i] = p;\n        }\n        \n        int maxArea = 0;\n        for (int i = 0; i < heights.length; i++) {\n            maxArea = Math.max(maxArea, heights[i] * (lessFromRight[i] - lessFromLeft[i] - 1));\n        }\n        return maxArea;\n    }\n\n    public static void main(String[] args) {\n        int[][] matrix = {\n            {1, 0, 0, 0, 1},\n            {1, 0, 0, 0, 0},\n            {1, 1, 0, 0, 0}\n        };\n        System.out.println(maximalRectangle(matrix));  // Output: 6\n    }\n}",
    "timestamp": "2025-08-13 09:52:42"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint largestRectangleArea(int* heights, int size) {\n    int stack[size], top = -1;\n    int maxArea = 0;\n    for (int i = 0; i <= size; i++) {\n        int currentHeight = (i == size) ? 0 : heights[i];\n        while (top != -1 && currentHeight < heights[stack[top]]) {\n            int height = heights[stack[top--]];\n            int width = top == -1 ? i : i - stack[top] - 1;\n            maxArea = maxArea > height * width ? maxArea : height * width;\n        }\n        stack[++top] = i;\n    }\n    return maxArea;\n}\n\nint maximalRectangle(int** matrix, int matrixSize, int* matrixColSize) {\n    if (matrixSize == 0 || *matrixColSize == 0) return 0;\n\n    int maxArea = 0;\n    int heights[matrixColSize[0]];\n    memset(heights, 0, sizeof(heights));\n    \n    for (int i = 0; i < matrixSize; i++) {\n        for (int j = 0; j < matrixColSize[0]; j++) {\n            heights[j] = (matrix[i][j] == 0) ? heights[j] + 1 : 0;\n        }\n        int area = largestRectangleArea(heights, matrixColSize[0]);\n        maxArea = maxArea > area ? maxArea : area;\n    }\n    return maxArea;\n}\n\nint main() {\n    int H = 4, W = 5;\n    int mat[4][5] = {\n        {1, 0, 1, 0, 0},\n        {1, 0, 1, 0, 1},\n        {1, 1, 1, 0, 1},\n        {1, 0, 0, 0, 1}\n    };\n    \n    // Convert the 2D array to a pointer to an array of pointers for dynamic use in the function\n    int* matrix[H];\n    for (int i = 0; i < H; i++) {\n        matrix[i] = mat[i];\n    }\n    int matrixColSize[1] = {W};\n    printf(\"Largest rectangle area of zeros: %d\\n\", maximalRectangle(matrix, H, matrixColSize));\n    \n    return 0;\n}",
    "timestamp": "2025-08-13 09:52:47"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def largest_zero_rectangle(matrix):\n    if not matrix or not matrix[0]:\n        return 0\n    \n    def largest_zero_histogram(heights):\n        heights.append(0)\n        stack = [-1]\n        max_area = 0\n        \n        for i in range(len(heights)):\n            while stack[-1] != -1 and heights[stack[-1]] >= heights[i]:\n                height = heights[stack.pop()]\n                width = i - stack[-1] - 1\n                max_area = max(max_area, height * width)\n            stack.append(i)\n        \n        heights.pop()\n        return max_area\n    \n    rows, cols = len(matrix), len(matrix[0])\n    heights = [0] * cols\n    max_zero_rectangle = 0\n    \n    for row in range(rows):\n        for col in range(cols):\n            if matrix[row][col] == 0:\n                heights[col] += 1\n            else:\n                heights[col] = 0\n        \n        max_zero_rectangle = max(max_zero_rectangle, largest_zero_histogram(heights))\n    \n    return max_zero_rectangle",
    "timestamp": "2025-08-13 09:53:00"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def maximal_rectangle(matrix):\n    if not matrix or not matrix[0]:\n        return 0\n    \n    rows = len(matrix)\n    cols = len(matrix[0])\n    heights = [0] * cols\n    max_area = 0\n    \n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] == '0':\n                heights[j] += 1\n            else:\n                heights[j] = 0\n        \n        stack = []\n        for j in range(cols + 1):\n            while stack and (j == cols or heights[stack[-1]] > heights[j]):\n                height = heights[stack.pop()]\n                width = j if not stack else j - stack[-1] - 1\n                max_area = max(max_area, height * width)\n            stack.append(j)\n    \n    return max_area\n\ndef largest_zero_rectangle(matrix):\n    if not matrix or not matrix[0]:\n        return 0\n    \n    rows = len(matrix)\n    cols = len(matrix[0])\n    \n    max_area = 0\n    dp = [[0] * cols for _ in range(rows)]\n    \n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] == '0':\n                if i == 0:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = dp[i-1][j] + 1\n    \n    for i in range(rows):\n        max_area = max(max_area, maximal_rectangle([['0' if num > 0 else '1' for num in row] for row in dp[:i+1]]))\n    \n    return max_area\n\n# Example usage:\n# matrix = [\n#     ['1', '0', '1', '0', '0'],\n#     ['1', '0', '1', '1', '1'],\n#     ['1', '1', '1', '1', '1'],\n#     ['1', '0', '0', '1', '0']\n# ]\n# print(largest_zero_rectangle(matrix))",
    "timestamp": "2025-08-13 09:53:15"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c++",
    "code": "#include <iostream>\n#include <vector>\n#include <stack>\n#include <algorithm>\n\nusing namespace std;\n\nint largestRectangleArea(vector<int>& heights) {\n    stack<int> s;\n    heights.push_back(0); // Append a zero to handle remaining bars\n    int max_area = 0;\n    for (int i = 0; i < heights.size(); ++i) {\n        while (!s.empty() && heights[s.top()] > heights[i]) {\n            int h = heights[s.top()];\n            s.pop();\n            int width = s.empty() ? i : i - s.top() - 1;\n            max_area = max(max_area, h * width);\n        }\n        s.push(i);\n    }\n    return max_area;\n}\n\nint maximalRectangle(vector<vector<int>>& matrix) {\n    if (matrix.empty() || matrix[0].empty()) return 0;\n    int H = matrix.size();\n    int W = matrix[0].size();\n    vector<int> heights(W, 0);\n    int max_area = 0;\n    \n    for (int i = 0; i < H; ++i) {\n        for (int j = 0; j < W; ++j) {\n            if (matrix[i][j] == 0) {\n                heights[j]++;\n            } else {\n                heights[j] = 0;\n            }\n        }\n        max_area = max(max_area, largestRectangleArea(heights));\n    }\n    \n    return max_area;\n}\n\nint main() {\n    vector<vector<int>> matrix {\n        {1, 0, 0, 1, 0},\n        {0, 0, 0, 0, 1},\n        {0, 0, 1, 0, 0},\n        {1, 0, 0, 0, 0}\n    };\n    cout << \"Area of the largest rectangle containing only 0s is: \" \n         << maximalRectangle(matrix) << endl;\n    return 0;\n}",
    "timestamp": "2025-08-13 11:55:33"
  }
]