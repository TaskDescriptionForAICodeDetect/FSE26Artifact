[
  {
    "language": "C++",
    "code": "#include<iostream>\n\nusing namespace std;\n\n#define rep(i, n) for (int i = 0; i < int(n); ++i)\n\nvoid solve() {\n  string str;\n  getline(cin, str);\n  int n;\n  cin >> n;\n  cin.ignore();\n  string buf;\n  int cur = 0;\n  rep (_, n) {\n    getline(cin, buf);\n    if (buf == \"forward char\") {\n      cur = min(cur + 1, (int)str.size());\n    } else if (buf == \"forward word\") {\n      if (cur == (int)str.size()) continue;\n      while ((int)str.size() != cur && str[cur] == ' ') ++cur;\n      while ((int)str.size() != cur && str[cur] != ' ') ++cur;\n    } else if (buf == \"backward char\") {\n      cur = max(cur - 1, 0);\n    } else if (buf == \"backward word\") {\n      if (cur == 0) continue;\n      while (0 != cur && str[cur] == ' ') --cur;\n      while (0 != cur && str[cur] != ' ') --cur;\n    } else if (buf == \"delete char\") {\n      if (cur == (int)str.size()) continue;\n      str = str.substr(0, cur) + str.substr(cur + 1);\n    } else if (buf == \"delete word\") {\n      if (cur == (int)str.size()) continue;\n      do {\n\tstr = str.substr(0, cur) + str.substr(cur + 1);\n      } while (cur != (int)str.size() && str[cur] != ' ');\n    } else {\n      rep (i, buf.size()) if (buf[i] == ' ') {\n\tstring ins = buf.substr(i + 1);\n\tins = ins.substr(1, ins.size() - 2);\n\tstr = str.substr(0, cur) + ins + str.substr(cur);\n\tcur += ins.size();\n      }\n    }\n  }\n  rep (i, str.size() + 1) {\n    if (i == cur) cout << \"^\";\n    if (i < (int)str.size()) cout << str[i];\n  }\n  cout << endl;\n}\n\nint main() {\n  int t;\n  cin >> t;\n  cin.ignore();\n  rep (i, t) solve();\n}"
  },
  {
    "language": "C++",
    "code": "//02\n#include<iostream>\n#include<string>\n\nusing namespace std;\n\nint main(){\n  int t;\n  cin>>t;\n  cin.ignore();\n  while(t--){\n    string s;\n    getline(cin,s);\n    int c=0;\n    int m;\n    cin>>m;\n    while(m--){\n      string ca,cb;\n      cin>>ca;\n      getline(cin,cb);\n      if(ca==\"forward\"){\n\tif(cb==\" char\"){\n\t  if(c<s.size()){\n\t    c++;\n\t  }\n\t}else{\n\t  while(c<s.size()&&s[c]==' '){\n\t    c++;\n\t  }\n\t  while(c<s.size()&&s[c]!=' '){\n\t    c++;\n\t  }\n\t}\n      }else if(ca==\"backward\"){\n\tif(cb==\" char\"){\n\t  if(c!=0){\n\t    c--;\n\t  }\n\t}else{\n\t  while(c!=0&&s[c]==' '){\n\t    c--;\n\t  }\n\t  while(c!=0&&s[c]!=' '){\n\t    c--;\n\t  }\n\t}\n      }else if(ca==\"insert\"){\n\ts.insert(c,cb.substr(2,cb.size()-3));\n\tc+=cb.size()-3;\n      }else{\n\tif(cb==\" char\"){\n\t  if(c!=s.size()){\n\t    s.erase(c,1);\n\t  }\n\t}else{\n\t  while(c!=s.size()&&s[c]==' '){\n\t    s.erase(c,1);\n\t  }\n\t  while(c!=s.size()&&s[c]!=' '){\n\t    s.erase(c,1);\n\t  }\n\t}\n      }\n    }\n    for(int i=0;i<s.size();i++){\n      if(i==c){\n\tcout<<'^';\n      }\n      cout<<s[i];\n    }\n    if(c==s.size()){\n      cout<<'^';\n    }\n    cout<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nvoid setPos(string &buff,int &pos){\n    for(int i = 0; i < buff.size(); i++){\n        if(buff[i]=='^'){\n            pos=i;\n            return;\n        }\n    }\n}\n\nint main(){\n    int n;\n    cin>>n;\n    string gb;\n    getline(cin,gb);\n    while(n--){\n        string buff;\n        getline(cin,buff);\n        int m;\n        cin>>m;\n        getline(cin,gb);\n        int pos=0;\n        buff='^'+buff;\n        while(m--){\n            string op;\n            getline(cin,op);\n            if(op==\"forward char\"){\n                if(pos!=buff.size()-1){\n                    swap(buff[pos],buff[pos+1]);\n                    pos++;\n                    setPos(buff,pos);\n                }\n            }\n            else if(op==\"forward word\"){\n                // ツ右ツづ可閉カツ篠堋づーツ探ツつオツづ可つ「ツつォツ、ツ個ゥツづつつゥツづつスツづァツつサツづ個閉カツ篠堋療アツづ個催渉可づ個暗環置ツづ慊づカツーツソツδ仰づーツ暗堋督ョ\n                if(pos!=buff.size()-1){\n                    int initPos=pos;\n                    pos++;\n                    while(pos<buff.size()&&buff[pos]==' ')pos++;\n                    while(pos<buff.size()&&buff[pos]!=' ')pos++;\n                    buff=buff.substr(0,initPos)+buff.substr(initPos+1);\n                    if(pos-1==buff.size())\n                        buff+='^';\n                    else{\n                        pos--;\n                        buff=buff.substr(0,pos)+'^'+buff.substr(pos);\n                    }\n                    setPos(buff,pos);\n                }\n            }\n            else if(op==\"backward char\"){\n                if(pos!=0){\n                    swap(buff[pos],buff[pos-1]);\n                    setPos(buff,pos);\n                }\n            }\n            else if(op==\"backward word\"){\n                if(pos!=0){\n                    int initPos=pos;\n                    pos--;\n                    while(pos>=0&&buff[pos]==' ')pos--;\n                    while(pos>=0&&buff[pos]!=' ')pos--;\n                    buff=buff.substr(0,initPos)+buff.substr(initPos+1);\n                    if(pos==-1)\n                        buff='^'+buff;\n                    else{\n                        pos++;\n                        buff=buff.substr(0,pos)+'^'+buff.substr(pos);\n                    }\n                    setPos(buff,pos);\n                }\n            }\n            else if(op==\"delete char\"){\n                if(pos!=buff.size()-1)\n                    buff=buff.substr(0,pos+1)+buff.substr(pos+2);\n                setPos(buff,pos);\n            }\n            else if(op==\"delete word\"){\n                int initPos=pos;\n                if(pos!=buff.size()-1){\n                    pos++;\n                    while(pos<buff.size()&&buff[pos]==' ')pos++;\n                    while(pos<buff.size()&&buff[pos]!=' ')pos++;\n                    //if(pos==buff.size())\n                    //    buff=buff.substr(0,initPos+1);\n                    //else\n                        buff=buff.substr(0,initPos+1)+buff.substr(pos);\n                    setPos(buff,pos);\n                }\n            }\n            else if(op.substr(0,6)==\"insert\"){\n                string ins=op.substr(7);\n                ins=ins.substr(1);\n                ins=ins.substr(0,ins.size()-1);\n                buff=buff.substr(0,pos)+ins+'^'+buff.substr(pos+1);\n                setPos(buff,pos);\n            }\n        }\n        cout<<buff<<endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "\n#include <iostream>\n#include <string>\n\nusing namespace std;\n\nbool ischr(int c) {\n\tif (c >= 'A' && c <= 'Z') return true;\n\tif (c >= 'a' && c <= 'z') return true;\n\tif (c >= '0' && c <= '9') return true;\n\tif (c == ',' || c == '.') return true;\n\treturn false;\n}\n\nint main() {\n\tint n;\n\tstring buf, cmd, dum;\n\tcin >> n;\n\tgetline(cin, dum);\n\tfor (int i = 0; i < n; i++) {\n\t\tint cur = 1, m;\n\t\tgetline(cin, buf);\n\t\tbuf = \"$\" + buf;\n\t\tbuf = buf.substr(0, buf.find_first_of('\\r'));\n\t\tcin >> m;\n\t\tgetline(cin, dum);\n\t\tfor (int j = 0; j < m; j++) {\n\t\t\tgetline(cin, cmd);\n\t\t\tif (cmd.substr(0, 8) == \"forward \") {\n\t\t\t\tstring subcmd = cmd.substr(8, 4);\n\t\t\t\tif (subcmd == \"char\") {\n\t\t\t\t\tif (buf[cur] != '\\0') cur++;\n\t\t\t\t} else if (subcmd == \"word\") {\n\t\t\t\t\twhile (buf[cur] == ' ') cur++;\n\t\t\t\t\twhile (ischr(buf[cur])) cur++;\n\t\t\t\t}\n\t\t\t} else if (cmd.substr(0, 9) == \"backward \") {\n\t\t\t\tstring subcmd = cmd.substr(9, 4);\n\t\t\t\tif (subcmd == \"char\") {\n\t\t\t\t\tif (cur > 1) cur--;\n\t\t\t\t} else if (subcmd == \"word\") {\n\t\t\t\t\tdo cur--; while (buf[cur] == ' ');\n\t\t\t\t\twhile (ischr(buf[cur])) cur--;\n\t\t\t\t\tcur++;\n\t\t\t\t}\n\t\t\t} else if (cmd.substr(0, 7) == \"insert \") {\n\t\t\t\tint begin = cmd.find_first_of(\"\\\"\")+1;\n\t\t\t\tint end = cmd.find_last_of(\"\\\"\");\n\t\t\t\tstring ins = cmd.substr(begin, end-begin);\n\t\t\t\tbuf = buf.substr(0, cur) + ins + buf.substr(cur);\n\t\t\t\tcur += ins.size();\n\t\t\t} else if (cmd.substr(0, 7) == \"delete \") {\n\t\t\t\tstring subcmd = cmd.substr(7, 4);\n\t\t\t\tif (subcmd == \"char\") {\n\t\t\t\t\tif (buf[cur] != '\\0')\n\t\t\t\t\t\tbuf = buf.substr(0, cur) + buf.substr(cur+1);\n\t\t\t\t} else if (subcmd == \"word\") {\n\t\t\t\t\tint tail = cur;\n\t\t\t\t\twhile (buf[tail] == ' ') tail++;\n\t\t\t\t\twhile (ischr(buf[tail])) tail++;\n\t\t\t\t\tbuf = buf.substr(0, cur) + buf.substr(tail);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (int i = 1; i < buf.size(); i++) {\n\t\t\tif (i == cur)\n\t\t\t\tcout << '^';\n\t\t\tcout << buf[i];\n\t\t}\n\t\tif (cur == buf.size())\n\t\t\tcout << '^' << endl;\n\t\telse\n\t\t\tcout << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <map>\n#include <set>\n#include <queue>\nusing namespace std;\n\ntypedef vector<int> vi;\ntypedef pair<int, int> pii;\n\n#define rep(i, n) for(int i=0; i<n; i++)\n#define repa(i, s, e) for(int i=s; i<=e; i++) \n\nint T, N, c;\nstring str, proc;\n\nvoid process(string& p) {\n\tif(p == \"forward char\") {\n\t\tif(c < str.size()) c++;\n\t}\n\telse if(p == \"backward char\") {\n\t\tif(c > 0) c--;\n\t}\n\telse if(p == \"forward word\") {\n\t\tif(c == str.size()) return;\n\t\twhile(str[c] == ' ' && c < str.size()) c++;\n\t    while(str[c] != ' ' && c < str.size()) c++;\n\t}\n\telse if(p == \"backward word\") {\n\t\tif(c == 0) return;\n\t\twhile(str[c] == ' ' && c > 0) c--;\n\t\twhile(str[c] != ' ' && c > 0) c--;\n\t}\n\telse if(p == \"delete char\") {\n\t\tif(c != str.size()) str.erase(c, 1);\n\t}\n\telse if(p == \"delete word\") {\n\t\tif(c == str.size()) return;\n\t\tint ct = c;\n\t\twhile(str[ct] == ' ' && ct != str.size()) ct++;\n\t\tif(ct == str.size()) return;\n\t\twhile(str[ct] != ' ' && ct != str.size()) ct++;\n\t\tstr.erase(c, ct-c);\n\t}\n\telse {\n\t\tsize_t s = p.find_first_of('\"');\n\t\tsize_t e = p.find_last_of('\"');\n\t\tstring a = p.substr(s+1, e-s-1);\n\t    // cout << a << endl;\n\t\tif(c != str.size()) {\n\t\t\tstr = str.substr(0, c) + a + str.substr(c, str.size()-1);\n\t\t} else {\n\t\t\tstr = str + a;\n\t\t}\n\t\tc = c + a.size();\n\t}\n}\n\nvoid out() {\n\trep(i,c) printf(\"%c\", str[i]);\n\tprintf(\"^\");\n\trepa(i,c,(int)str.size()-1) printf(\"%c\", str[i]);\n\tprintf(\"\\n\");\n}\n\nint main() {\n\tchar buf[256];\n\tcin >> T;\n\tcin.ignore();\n\trep(t,T) {\n\t\tfgets(buf, sizeof(buf), stdin);\n\t\t*(strchr(buf, '\\n')) = '\\0';\n\t\tstr = string(buf);\n\n\t\tscanf(\"%d\\n\", &N);\n\t\tc = 0;\n\t\trep(i,N) {\n\t\t\tgetline(cin, proc);\n\t\t\tprocess(proc);\n\t\t\t// out();\n\t\t}\n\t\tout();\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<vector>\nusing namespace std;\n\nint main(){\n  int n;\n  cin >>n;\n  cin.ignore();\n  for(int i=0;i<n;i++){\n    string str;\n    int cn,pos;\n    if(!getline(cin,str)){\n      str = \"\";\n    }\n    cin >> cn;\n    pos = 0;\n    for(int j=0;j<cn;j++){\n      string command,target;\n      char ch;\n      cin >> command;\n      getline(cin,target);\n      target.erase(0,1);\n      if(command == \"forward\"){\n        if(pos<str.size()){\n          if(target == \"word\"){\n            int judge = 0;\n            while(pos<str.size()){\n              if(str[pos]!=' '){\n                judge = 1;\n                break;\n              }\n              pos++;\n            }\n            if(judge==1){\n              do{\n                pos++;\n              }while(pos<str.size()&&str[pos]!=' ');\n            }\n          }else{\n            pos++;\n          }\n        }\n      }else if(command == \"delete\"){\n        if(str.size()!=0&&pos!=str.size()){\n          if(target == \"word\"){\n            int temp = pos;\n            int stage = 0;\n            while(pos<str.size()){\n              if(stage==0){\n                if(str[temp]!=' '){\n                  stage = 1;\n                }\n              }else{\n                if(str[temp]==' '){\n                  break;\n                }\n              }\n              str.erase(pos,1);\n            }\n            while(pos<str.size()&&str[pos]!=' '){\n              str.erase(pos,1);\n            }\n          }else{\n            str.erase(pos,1);\n          }\n        }\n      }else if(command == \"backward\"){\n        if(pos>0){\n          if(target == \"word\"){\n            int judge = 0;\n            while(pos>=0){\n              if(str[pos]!=' '){\n                judge = 1;\n                break;\n              }\n              pos--;\n            }\n            if(judge==1){\n              do{\n                pos--;\n              }while(pos>0&&str[pos]!=' ');\n            }\n          }else{\n            pos--;\n          }\n        }\n      }else if(command == \"insert\"){\n        target = target.substr(1,target.size()-2);\n        str.insert(pos,target);\n        pos += target.size();\n      }\n    }\n    str.insert(pos,\"^\");\n    cout << str << endl;\n  }\n  \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint main() {\n    int N;\n    cin >> N;\n    cin.ignore();\n\n    while(N--) {\n        string str;\n        getline(cin, str);\n        int cursor = 0;\n        int M;\n        cin >> M;\n        cin.ignore();\n\n        while(M--) {\n            string cmdline;\n            getline(cin, cmdline);\n\n            int delim = cmdline.find(' ');\n            string cmd = cmdline.substr(0, delim);\n            string target = cmdline.substr(delim+1);\n            if(cmd == \"forward\") {\n                if(target == \"word\") {\n                    while(cursor < str.size() && str[cursor] == ' ') ++cursor;\n                    while(cursor < str.size() && str[cursor] != ' ') ++cursor;\n                }\n                else if(target == \"char\") {\n                    if(cursor < str.size()) ++cursor;\n                }\n                else {\n                    cerr << \"Unknown target in forward: \" << target << endl;\n                }\n            }\n            else if(cmd == \"backward\") {\n                if(target == \"word\") {\n                    while(cursor > 0 && str[cursor] == ' ') --cursor;\n                    while(cursor > 0 && str[cursor] != ' ') --cursor;\n                }\n                else if(target == \"char\") {\n                    if(cursor > 0) --cursor;\n                }\n                else {\n                    cerr << \"Unknown target in backward: \" << target << endl;\n                }\n            }\n            else if(cmd == \"delete\") {\n                if(target == \"word\") {\n                    int idx = cursor;\n                    bool ok = false;\n                    while(idx < str.size() && str[idx] == ' ') ++idx;\n                    while(idx < str.size() && str[idx] != ' ') {++idx; ok = true; }\n                    if(ok) {\n                        str.erase(cursor, idx-cursor);\n                    }\n                }\n                else if(target == \"char\") {\n                    if(cursor >= str.size()) continue;\n                    str.erase(cursor, 1);\n                }\n                else {\n                    cerr << \"Unknown target in delete: \" << target << endl;\n                }\n            }\n            else if(cmd == \"insert\") {\n                str = str.substr(0, cursor) + target.substr(1, target.size()-2) + str.substr(cursor);\n                cursor += target.size()-2;\n            }\n            else {\n                //cerr << \"Unknown command: \" << cmd << endl;\n            }\n        }\n        cout << str.substr(0, cursor) << '^' << str.substr(cursor) << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cmath>\nusing namespace std;\n\nint main()\n{\n    int nb_cas;\n    cin>>nb_cas;\n    cin.ignore();\n    while(nb_cas--)\n    {\n        string texte;\n        getline(cin,texte);\n        int nb_op;\n        cin>>nb_op;\n        int curseur = 0;\n        for(int c=0;c<nb_op;c++)\n        {\n            string s1,s2;\n            cin>>s1;\n            cin.ignore();\n            getline(cin,s2);\n            if(s1==\"forward\"||s1==\"backward\")\n            {\n                int d = (s1==\"forward\"?1:-1);\n                if(s2==\"char\") curseur+=d;\n                else if(s2==\"word\")\n                {\n                    while(curseur>= 0 && curseur<=texte.size()&&(curseur == texte.size()||texte[curseur]==' ')) curseur+=d;\n                    while(curseur>=-0&&curseur<=texte.size()&&(curseur==texte.size()||texte[curseur]!=' '))\n                    {\n                        curseur += d;\n                    }\n                }\n                curseur = max(curseur,0);\n                curseur = min(curseur,(int)texte.size());\n            }\n            else if(s1==\"delete\")\n            {\n                if(s2==\"char\"&&curseur+1<texte.size())\n                {\n                    texte = texte.substr(0,curseur)+(curseur+1<texte.size()?texte.substr(curseur+1):\"\");\n                }\n                else if(s2==\"word\")\n                {\n                    int finMot = curseur;\n                    while(finMot<texte.size()&&texte[finMot]==' ') finMot++;\n                    while(finMot<texte.size()&&texte[finMot]!=' ')\n                    {\n                        finMot ++;\n                    }\n                    texte = texte.substr(0,curseur)+(finMot < texte.size()?texte.substr(finMot):\"\");\n                }\n            }\n            else\n            {\n                s2 = s2.substr(1,s2.size()-2);\n                texte = texte.substr(0,curseur)+s2+(curseur<(int)texte.size()?texte.substr(curseur):\"\");\n                curseur += s2.size();\n            }\n        }\n        cout<<texte.substr(0,curseur)+\"^\"+(curseur<(int)texte.size()?texte.substr(curseur):\"\")<<endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <string.h>\n\nint pos;\nint lb;\nchar buf[1005];\n\nint forward_char(){\n    if(buf[pos+1]!='\\n'){\n        buf[pos] = buf[pos+1];\n        buf[pos+1] = '^';\n        pos++;\n    }\n    /*printf(\"%s\",buf);*/\n}\n\nint forward_word(){\n    while(buf[pos+1]==' '){/*word????????????????????????????????£?????????*/\n        buf[pos] = buf[pos+1];\n        pos++;\n    }\n    while(buf[pos+1]!=' '&&buf[pos+1]!='\\n'){\n        buf[pos] = buf[pos+1];\n        pos++;\n    }\n    buf[pos] = '^';\n    /*printf(\"%s\",buf);*/\n}\n\nint backward_char(){\n    if(pos){\n        buf[pos] = buf[pos-1];\n        buf[pos-1] = '^';\n        pos--;\n    }\n    /*printf(\"%s\",buf);*/\n}  \n\nint backward_word(){\n    while(buf[pos-1]==' '){\n        buf[pos] = buf[pos-1];\n        pos--;\n    }\n    while(buf[pos-1]!=' '&&pos){\n        buf[pos] = buf[pos-1];\n        pos--;\n    }\n    buf[pos] = '^';\n    /*printf(\"%s\",buf);*/\n}\n\nint insert(char *text){\n    int i;\n    int lt = strlen(text);\n    for(i=lb-1;i>=pos;i--)buf[i+lt] = buf[i];\n    for(i=0;i<lt;i++)buf[pos+i] = text[i];\n    lb += lt;\n    pos += lt;\n    /*printf(\"%s\",buf);*/\n}\n\nint delete_char(){\n    int i;\n    if(buf[pos+1]!='\\n'){\n        for(i=pos+1;i<lb;i++)buf[i] = buf[i+1];\n        lb--;\n    }\n    /*printf(\"%s\",buf);*/\n}\n\nint delete_word(){\n    int tmp = pos;\n    int i;\n    if(buf[tmp+1]=='\\n')return 0;\n    while(buf[tmp+1]==' '){\n        tmp++;\n        if(buf[tmp+1]=='\\n')return 0;\n    }\n    while(buf[tmp+1]!=' ')tmp++;\n    for(i=pos+1;i<lb;i++)buf[i] = buf[i+tmp-pos];\n    /*printf(\"%s\",buf);*/\n}\n\nint main(){\n    int n,m,lt;\n    int i,j,k;\n    char op[120];\n    char c[1003];/*1000???+'\\n','\\0','^'*/\n    scanf(\"%d\",&n);\n    getchar();/*????????????????????????????????????*/\n    for(i=0;i<n;i++){\n        pos = 0;\n        buf[0] = '^';\n        fgets(c,1003,stdin);\n        for(j=0;j<1003;j++)buf[j+1] = c[j];\n        /*printf(\"%s\",buf);*/\n        lb = strlen(buf);\n        /*printf(\"How many op?: \");*/\n        scanf(\"%d\",&m);\n        getchar();\n        for(j=0;j<m;j++){\n            /*printf(\"(op %d/%d): \",j+1,m);*/\n            fgets(op,120,stdin);\n            if(!strncmp(op,\"forward char\",12))forward_char();\n            if(!strncmp(op,\"forward word\",12))forward_word();\n            if(!strncmp(op,\"backward char\",13))backward_char();\n            if(!strncmp(op,\"backward word\",13))backward_word();\n            if(!strncmp(op,\"delete char\",11))delete_char();\n            if(!strncmp(op,\"delete word\",11))delete_word();\n            if(!strncmp(op,\"insert\",6)){\n               lt = strlen(op);\n               op[lt-2] = '\\0';\n               for(k=8;k<lt-1;k++)op[k-8] = op[k];\n               lt -= 9;\n               insert(op);\n            }\n            /*printf(\"%s\",buf);*/\n        }\n        printf(\"%s\",buf);\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream> \n#include <sstream> \n#include <iomanip> \n#include <algorithm> \n#include <cmath> \n#include <string> \n#include <vector> \n#include <list> \n#include <queue> \n#include <stack> \n#include <set> \n#include <map> \n#include <bitset> \n#include <numeric> \n#include <climits> \n#include <cfloat> \nusing namespace std; \n\nint main()\n{\n    int n;\n    cin >> n;\n    cin.ignore();\n\n    while(--n >= 0){\n        string s;\n        getline(cin, s);\n        int m;\n        cin >> m;\n        cin.ignore();\n\n        list<char> text(s.begin(), s.end());\n        list<char>::iterator it = text.begin();\n\n        while(--m >= 0){\n            string ope;\n            getline(cin, ope);\n\n            if(ope == \"forward char\"){\n                if(it != text.end())\n                    ++ it;\n            }else if(ope == \"forward word\"){\n                list<char>::iterator it2 = it;\n                while(it2 != text.end() && (*it2) == ' ')\n                    ++ it2;\n                if(it2 != text.end()){\n                    it = it2;\n                    while(it != text.end() && (*it) != ' ')\n                        ++ it;\n                }\n            }else if(ope == \"backward char\"){\n                if(it != text.begin())\n                    -- it;\n            }else if(ope == \"backward word\"){\n                if(text.size() > 0){\n                    list<char>::iterator it2 = it;\n                    -- it2;\n                    while(it2 != text.begin() && (*it2) == ' ')\n                        -- it2;\n                    if((*it2) != ' '){\n                        it = it2;\n                        while(it != text.begin() && (*it) != ' ')\n                            -- it;\n                        if((*it) != ' ')\n                            ++ it;\n                    }\n                }\n            }else if(ope == \"delete char\"){\n                if(it != text.end())\n                    it = text.erase(it);\n            }else if(ope == \"delete word\"){\n                list<char>::iterator it2 = it;\n                while(it2 != text.end() && (*it2) == ' ')\n                    ++ it2;\n                if(it2 != text.end()){\n                    it = text.erase(it, it2);\n                    while(it != text.end() && (*it) != ' ')\n                        it = text.erase(it);\n                }\n            }else{\n                for(unsigned i=8; i<ope.size()-1; ++i){\n                    it = text.insert(it, ope[i]);\n                    ++ it;\n                }\n            }\n        }\n\n        cout << string(text.begin(), it) << '^' << string(it, text.end()) << endl;\n    }\n    \n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstdlib>\n#include <cmath>\n#include <climits>\n#include <cfloat>\n#include <cstring>\n#include <map>\n#include <utility>\n#include <set>\n#include <iostream>\n#include <memory>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <functional>\n#include <sstream>\n#include <fstream>\n#include <complex>\n#include <stack>\n#include <queue>\n\nusing namespace std;\ntypedef long long LL;\ntypedef pair<int, int> PII;\nstatic const double EPS = 1e-5;\n\n#define FOR(i,k,n) for (int i=(k); i<(int)(n); ++i)\n#define REP(i,n) FOR(i,0,n)\n\nint main(void){\n  int N;\n  cin>>N;\n  cin.ignore();\n  while(N--){\n    string buf;\n    getline(cin,buf);\n    int M;\n    cin>>M;\n    cin.ignore();\n    string::iterator it = buf.begin();\n    while(M--){\n      {\n      int dist = distance(buf.begin(),it);\n      REP(i,buf.size()){\n        if(i==dist)putchar('^');\n        putchar(buf[i]);\n      }\n      if(it==buf.end())putchar('^');\n      putchar('\\n');\n      }\n      string command;\n      getline(cin,command);\n      if(command==\"forward char\"&&it!=buf.end()) it++;\n      if(command==\"backward char\"&&it!=buf.begin()) it--;\n      if(command==\"forward word\"){\n        while(it!=buf.end()&&*it==' ')it++;\n        while(it!=buf.end()&&*it!=' ')it++;\n      }\n      if(command==\"backward word\"){\n        while(it!=buf.begin()&&(*it)==' ')it--;\n        while(it!=buf.begin()&&(*it)!=' ')it--;\n      }\n      if(command==\"delete char\"&&it!=buf.end()) it = buf.erase(it);\n      if(command==\"delete word\"){\n        string::iterator it2 = find(it,buf.end(),' ');\n        //if(it2!=buf.end())it2++;\n        it = buf.erase(it,it2);\n      }\n      if(command.find(\"insert\",0)!=string::npos){\n        string ins = command.substr(8);\n        string::iterator ir = ins.end()-1;\n        ins.erase(ir);\n        cout<<ins<<endl;\n        REP(i,ins.size()){\n          it = buf.insert(it,ins[i]);\n          it++;\n        }\n      }\n    }\n    int dist = distance(buf.begin(),it);\n    REP(i,buf.size()){\n      if(i==dist)putchar('^');\n      putchar(buf[i]);\n    }\n    if(it==buf.end())putchar('^');\n    putchar('\\n');\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <string>\n#include <sstream>\nusing namespace std;\n \nint main() {\n  int Tc;\n  cin >> Tc;\n  cin.ignore();\n  for(int tc = 0; tc < Tc; ++tc) {\n    string text;\n    int M;\n    int cursor = 0;\n\n    getline(cin, text);\n    cin >> M;\n    cin.ignore();\n\n    while(M--) {\n\n      string a, b;\n      {\n        string line;\n        getline(cin, line);\n        for(int i = 0; i < line.size(); ++i) {\n          if(line[i] == ' ') {\n            a = line.substr(0, i);\n            b = line.substr(i+1);\n            break;\n          }\n        }\n      }\n\n      int N = text.size();\n      if(0) {\n\n      } else if(a == \"forward\" && b == \"char\") {\n\n        cursor = min(cursor+1, N);\n\n      } else if(a == \"forward\" && b == \"word\") {\n\n        for(; cursor < N && text[cursor] == ' '; ++cursor);\n        for(; cursor < N && text[cursor] != ' '; ++cursor);\n\n      } else if(a == \"backward\" && b == \"char\") {\n\n        cursor = max(cursor-1, 0);\n\n      } else if(a == \"backward\" && b == \"word\") {\n\n        for(; cursor > 0 && text[cursor-1] == ' '; --cursor);\n        for(; cursor > 0 && text[cursor-1] != ' '; --cursor);\n\n      } else if(a == \"insert\") {\n\n        b = b.substr(1, b.size()-2);\n        text.insert(cursor, b);\n        cursor += b.size();\n\n      } else if(a == \"delete\" && b == \"char\") {\n\n        if(cursor < N) text.erase(cursor, 1);\n\n      } else if(a == \"delete\" && b == \"word\") {\n\n        int begin = cursor;\n        int end = cursor;\n        for(; end < N && text[end] == ' '; ++end);\n        for(; end < N && text[end] != ' '; ++end);\n        if(begin < N && end-begin > 0) text.erase(begin, end-begin);\n\n      }\n\n    }\n    text.insert(cursor, \"^\");\n    cout << text << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cmath>\n#include <string>\n\nusing namespace std;\nint main(){\n\tint n,r;\n\tcin >> n;\n\tcin.ignore();\n\twhile(n--){\n\t\tint cur = 0;\n\t\tstring text, command;\n\t\tgetline(cin, text);\n\t\tint len = text.size();\n\t\tcin\t>> r;\n\t\tcin.ignore();\n\t\twhile(r--){\n\t\t\tgetline(cin, command);\n\t\t\tif(command == \"forward char\"){\n\t\t\t\tcur=min(len, cur+1);\n\t\t\t}else if(command == \"forward word\"){\n\t\t\t\tfor(;cur<len && text[cur] == ' '; cur++);\n\t\t\t\tfor(;cur<len && text[cur] != ' '; cur++);\n\t\t\t}else if(command == \"backward char\"){\n\t\t\t\tcur=max(0, cur-1);\n\t\t\t}else if(command == \"backward word\"){\n\t\t\t\tfor(;cur>0 && text[cur-1] == ' '; cur--);\n\t\t\t\tfor(;cur>0 && text[cur-1] != ' '; cur--);\n\t\t\t}else if(command == \"delete char\"){\n\t\t\t\tif(cur>=len) continue;\n\t\t\t\ttext.erase(text.begin()+cur);\n\t\t\t\tlen--;\n\t\t\t}else if(command == \"delete word\"){\n\t\t\t\tint s = cur;\n\t\t\t\tfor(;s<len && text[s] == ' '; s++);\n\t\t\t\tfor(;s<len && text[s] != ' ';){\n\t\t\t\t\ttext.erase(text.begin()+s);\n\t\t\t\t\tlen--;\n\t\t\t\t}\n\t\t\t}else if(command.find(\"insert\")!=command.npos){\n\t\t\t\tstring ins;\n\t\t\t\tint s = command.find('\"');\n\t\t\t\tint t = command.find('\"',s+1);\n\t\t\t\tins = command.substr(s+1,t-s-1);\n\t\t\t\ttext.insert(cur,ins);\n\t\t\t\tlen+=t-s-1;\n\t\t\t\tcur+=t-s-1;\n\t\t\t}\n\t\t\t\n\t\t}\n\t\tcout<<text.substr(0,cur)<<\"^\"<<text.substr(cur)<<endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <iostream>\n#include <string>\n#include <cmath>\n\nusing namespace std;\n\nint main(){    \n    int n;\n    cin>>n;\n    for(int i=0;i<n;i++){\n        string buf;\n        char c;\n        scanf(\"%c\", &c);\n\n        getline(cin,buf);\n       // cout << \"buf is \" << buf << endl;\n        int pos=0;\n        int cn;\n        cin>>cn;\n        for(int k=0;k<cn;k++){\n            string command;\n            cin >> command;\n            if(command==\"forward\"){\n                cin >> command;\n                if(command==\"char\"){\n                    if(!buf.empty())\n                    pos = min(pos+1,(int)buf.size());\n                }else{\n                    // word\n                    while(buf[pos]==' ' && pos < buf.size())pos++;\n                    while(buf[pos]!=' ' && pos < buf.size())pos++;\n                }\n            }else if(command==\"backward\"){\n                cin >> command;\n                if(command==\"char\"){\n                    pos = max(pos-1,0);\n                }else{\n                    // word\n                    while(buf[pos]==' ' && pos > 0)pos--;\n                    while(buf[pos]!=' ' && pos > 0)pos--;\n                }\n            }else if(command==\"insert\"){\n                getline(cin,command);\n                ungetc('\\n',stdin);\n                string text;\n                bool f= false;\n                for(int i=0;i<command.size();i++){\n                    if(f&&command[i]=='\\\"')break;\n                    if(f)text.push_back(command[i]);\n                    if(command[i]=='\\\"')f=true;\n                }\n                buf.insert(pos,text);\n                pos+= text.size();\n            }else {//delete\n                cin >> command;\n                if(command== \"char\"){\n                    if(!buf.empty()&&pos!=buf.size()){\n                        buf.erase(pos,1);\n                        //pos = min(pos,(int)buf.size());\n                    }\n\n                }else{\n                    if(!buf.empty()){\n                        int t=pos;\n                        while(t<buf.size() && buf[t]==' ')t++;\n                        while(t<buf.size() && buf[t]!=' ')t++;\n                        while(t<buf.size() && buf[t]==' ')t++;\n\n                        buf.erase(pos,t-pos);\n                    }\n                }\n            }\n        }\n        //cout << buf << \"****\" << endl;\n        if(buf.empty()){\n            printf(\"^\\n\");\n        }else{\n        for(int p=0;p<buf.size();p++){\n            if(pos==p)printf(\"^\");\n            printf(\"%c\",buf[p]);\n        }\n\n        if(pos==buf.size())printf(\"^\");\n        printf(\"\\n\");\n        }\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<cctype>\nusing namespace std;\nclass SimpleEditor{\npublic:\n  int cur;\n  string s;\n  SimpleEditor(string s):s(s),cur(0){}\n  int RightWord(){\n    int i=cur;\n    while(s[i]==' '&&s[i]!='#')++i;\n    if(s[i]=='#')return -1;\n    for(i;i<s.length();++i){\n      if(s[i]==' ')return i-1;\n    }\n    return s.length()-1;\n  }\n  int LeftWord(){\n    int i=cur-1;\n    while(s[i]==' '&&i>=0)--i;\n    if(i==0)return -1;\n    for(i;i>=0;--i){\n      if(s[i]==' ')return i+1;\n    }\n    return 0;\n  }\n  void ForwardChar(){\n    ++cur;\n    if(cur>=s.length())cur=s.length()-1;\n  }\n  void BackwardChar(){\n    --cur;\n    if(cur<0)cur=0;\n  }\n  void ForwardWord(){\n    cur = RightWord();\n    if(cur==-1)cur=s.length()-1;\n    return ;\n    while(s[cur]==' '&&s[cur]!='#')ForwardChar();\n    while(s[cur]!=' '&&s[cur]!='#')ForwardChar();\n    if(s[cur]==' ')\n      BackwardChar();\n  }\n  void BackwardWord(){\n    cur = LeftWord();\n    if(cur==-1)cur=0;\n    return ;\n    while(s[cur]==' '&&cur>0)BackwardChar();\n    if(s[cur-1]==' '){cur=0;return ;}\n    while(s[cur]!=' '&&cur>0)BackwardChar();\n    if(s[cur]==' ')\n      ForwardChar();\n  }\n  void Insert(string text){\n    s.insert(s.begin()+cur,text.begin()+8,text.end()-1);\n    cur += text.length()-9;\n  }\n  bool DeleteChar(){\n    if(cur<s.length()-1)\n      if(*(s.begin()+cur+1)!='#'){\n\ts.erase(s.begin()+cur+1);\n\treturn true;\n      }\n    return false;\n  }\n  void DeleteWord(){\n    int i=RightWord();\n    if(i>=0){\n      //cout << \" RIGHT : \" << i << endl;\n      for(int j=cur;j<i;++j)DeleteChar();\n      s.erase(s.begin()+cur);\n    }\n  }\n  string ToString()const{\n    string ret;\n    for(int i=0;i<s.length();++i){\n      //if(i==cur)ret+='[';\n      if(i==cur)ret+='^';\n      ret+=s[i];\n      //if(i==cur)ret+=']';\n    }\n    ret.erase(ret.end()-1);\n    return ret;\n  }\n};\nvoid GetLine(string &s){\n  getline(cin,s);\n  for(int i =0;i<s.length();++i){\n    if(iscntrl(s[i])){s.erase(s.begin()+i);--i;}\n  }\n}\nint main(){\n  string dam;\n  int T;\n  cin >> T;\n  GetLine(dam);\n  for(int tc=1;tc<=T;++tc){\n    string s;\n    GetLine(s);\n    s+='#';\n    SimpleEditor se(s);\n    //cout << \"NUMBER OF TEST CASE : \" << T << \" INITIAL STRING : \" << s << endl;\n    int t;\n    cin >> t;\n    GetLine(dam);\n    for(int i = 0; i < t; ++i){\n      string inst;\n      GetLine(inst);\n      if(inst==\"forward char\")se.ForwardChar();\n      if(inst==\"forward word\")se.ForwardWord();\n      if(inst==\"backward char\")se.BackwardChar();\n      if(inst==\"backward word\")se.BackwardWord();\n      if(inst.find(\"insert\")!=string::npos)se.Insert(inst);\n      if(inst==\"delete char\")se.DeleteChar();\n      if(inst==\"delete word\")se.DeleteWord();\n      //cout<<i<<\"/\" <<t<<\":\"<<\" INST:\" <<inst<<\" ED:\"<<se.ToString() << endl;\n    }\n    cout << se.ToString() << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "using namespace std;\n#include <iostream>\n#include <vector>\n#include <string.h>\n#include <string>\n\n#define REP(i, n) for(int i=0; i<n; i++)\n\ntypedef vector<int> VI;\n\nint T, N;\nstring text;\nstring cmd;\nstring tmp;\n\nvoid execute(string& text, string cmd)\n{\n\tif(cmd == \"forward char\"){\n\t\tREP(i, text.size())\n\t\t{\n\t\t\tif(text[i] == '^')\n\t\t\t{\n\t\t\t\tif(i != text.size()-1)\n\t\t\t\t{\n\t\t\t\t\ttext[i] = text[i+1];\n\t\t\t\t\ttext[i+1] = '^';\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse if(cmd ==\"forward word\")\n\t{\n\t\tint iCaret = -1;\n\t\tREP(i, text.size())\n\t\t{\n\t\t\tif(text[i] == '^')\n\t\t\t{\n\t\t\t\tiCaret = i;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif(text[i] == ' ' && iCaret != -1)\n\t\t\t{\n\t\t\t\tif(i != 0)\n\t\t\t\t{\n\t\t\t\t\tif(text[i-1] == ' ' || text[i-1] == '^')\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttext.insert(text.begin()+i, '^');\n\t\t\t\ttext.erase(text.begin()+iCaret);\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif(i == text.size()-1 && iCaret != -1)\n\t\t\t{\n\t\t\t\ttext.insert(text.end(), '^');\n\t\t\t\ttext.erase(text.begin()+iCaret);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\telse if(cmd == \"backward char\")\n\t{\n\t\tREP(i, text.size())\n\t\t{\n\t\t\tif(text[i] == '^')\n\t\t\t{\n\t\t\t\tif(i != 0)\n\t\t\t\t{\n\t\t\t\t\ttext[i] = text[i-1];\n\t\t\t\t\ttext[i-1] = '^';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse if(cmd == \"backward word\")\n\t{\n\t\tint iCaret = -1;\n\t\tfor(int i=text.size()-1; i>=0; i--)\n\t\t{\n\t\t\tif(text[i] == '^')\n\t\t\t{\n\t\t\t\tiCaret = i;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif(text[i] == ' ' && iCaret != -1)\n\t\t\t{\n\t\t\t\tif(i != text.size()-1)\n\t\t\t\t{\n\t\t\t\t\tif(text[i+1] == ' ' || text[i+1] == '^')\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttext.erase(text.begin() + iCaret);\n\t\t\t\ttext.insert(text.begin() + i, '^');\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif(i == 0 && iCaret != -1)\n\t\t\t{\n\t\t\t\ttext.erase(text.begin() + iCaret);\n\t\t\t\ttext.insert(text.begin(), '^');\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\telse if(cmd == \"delete char\")\n\t{\n\t\tREP(i, text.size())\n\t\t{\n\t\t\tif(text[i] == '^')\n\t\t\t{\n\t\t\t\tif(i != text.size()-1)\n\t\t\t\t{\n\t\t\t\t\ttext.erase(text.begin() + i+1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse if(cmd == \"delete word\")\n\t{\n\t\tint first = 0;\n\t\tint last = 0;\n\t\tREP(i, text.size())\n\t\t{\n\t\t\tif(text[i] == '^')\n\t\t\t{\n\t\t\t<\tfirst = i;\n\t\t\t}\n\t\t\t\n\t\t\tif((text[i] == ' ' || i == text.size()-1) && first != 0)\n\t\t\t{\n\t\t\t\tif(i != 0)\n\t\t\t\t{\n\t\t\t\t\tif(text[i-1] == ' ' || text[i-1] == ' ')\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttext.erase(text.begin()+first+1, text.begin()+i);\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tbool is_insert = true;\n\t\tstring str_insert = \"insert\";\n\t\tREP(i, str_insert.size())\n\t\t{\n\t\t\tif(str_insert[i] != cmd[i])\n\t\t\t{\n\t\t\t\tis_insert = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif(is_insert)\n\t\t{\n\t\t\tstring word_insert = string(cmd, str_insert.size()+2, cmd.size()-str_insert.size()-3);\n\t\t\tstd::copy(cmd.begin()+str_insert.size()+2, cmd.end()-1, word_insert.begin());\n\t\t\tcout << word_insert << endl;\n\t\t\t\n\t\t\tREP(i, text.size())\n\t\t\t{\n\t\t\t\tif(text[i] == '^')\n\t\t\t\t{\n\t\t\t\t\ttext.insert(i, word_insert);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main()\n{\n\tgetline(cin, tmp);\n\tT = atoi(tmp.c_str());\n\n\tREP(t, T)\n\t{\n\t\tgetline(cin, text);\n\t\ttext = \"^\" + text;\n\t\tcout << text << endl;\n\n\t\tgetline(cin, tmp);\n\t\tN = atoi(tmp.c_str());\n\t\tREP(n, N)\n\t\t{\n\t\t\tgetline(cin, cmd);\n\t\t\texecute(text, cmd);\n\t\t\tcout << text << endl;\n\t\t}\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#define S_N 1010\nusing namespace std;\n\nint dataN, cmdN;\nstring text, cmd1,cmd2;\nchar s[S_N];\nint pos, index;\n\nvoid pr(){\n  string s1 = text.substr(0,pos);\n  string s2=\"\";\n\n  if( pos<text.length() )\n    s2 = text.substr(pos);\n\n  if( true )\n    cout << s1<< \"^\" << s2 << endl;\n  else\n    cout << text <<\":\"<<pos << endl;\n}\n\nint main(){\n\n  cin >> dataN;\n  fgets( s, S_N, stdin ); // üsÇÝÝ\n  for( int loop=0;loop<dataN;loop++ ){\n    fgets( s, S_N, stdin );\n    text=s;\n    text = text.substr( 0,text.length()-1 );\n\n    pos=0;\n    cin >> cmdN;\n    for( int cmdL=0;cmdL<cmdN;cmdL++ ){\n      cin >> cmd1 ;\n      fgets( s,S_N,stdin );      cmd2=s;\n      // æªÌXy[XÆöÌüsðí\n      cmd2 = cmd2.substr( 1,cmd2.length()-2 );\n\n      if( cmd1==\"forward\" ){\n\tif( cmd2==\"char\" ){\n\t  if( pos<text.length()-1 ) pos++;\n\t}else{\n\t  // wordÌÅãöÖÚ® (space ðw·æ¤ÉÚ®)\n\t  if( pos<text.length() ){\n\t    if( text[pos]==' ' ){\n\t      while( pos<text.length() && text[pos]==' ' )\n\t\t++pos;\n\t    }\n\t    while( pos<text.length() && text[pos]!=' ' )\n\t      ++pos;\n\t  }\n\t}\n      }else if( cmd1==\"backward\" ){\n\tif( cmd2==\"char\" ){\n\t  if( pos>0 ) pos--;\n\t}else{\n\t  // word ÌæªÖÚ®\n\t  if( pos>0 ){\n\t    if( text[pos]==' '){\n\t      while( pos>0 && text[pos]==' ' )\n\t\t--pos;\n\t    }\n\t    while( pos>0 && text[pos]!=' ' )\n\t      --pos;\n\t    if( pos>0 )\n\t      ++pos;\n\t  }\n\t}\n      }else if( cmd1==\"insert\" ){\n\tif( cmd2.length()>2 ){ // cmd2==\"\" ÅÍÈ¢\n\t  cmd2 = cmd2.substr( 1,cmd2.length()-2 );\n\t  string s1=text.substr(0,pos), s2=\"\";\n\t  if( pos<text.length() )\n\t    s2=text.substr(pos);\n\t  text = s1 + cmd2 + s2;\n\t  pos += cmd2.length();\n\t}\n      }else if( cmd1==\"delete\" ){\n\tif( cmd2==\"char\" ){\n\t  if( pos<text.length() ){\n\t    string s1=text.substr(0,pos), s2=\"\";\n\t    if( pos+1<text.length() )\n\t      s2=text.substr(pos+1);\n\t    text = s1 + s2;\n\t  }\n\t}else{\n\t  if( pos<text.length() ){\n\t    string s1 = text.substr(0,pos), s2=\"\";\n\t    int p=pos; //s2ÌæªÌ¶ðw·æ¤É·é.\n\t    if( text[p]==' ' ){\n\t      while( p<text.length() && text[p]==' ' )\n\t\tp++;\n\t    }\n\t    while( p<text.length() && text[p]!=' ' )\n\t      p++;\n\t    if( p<text.length() )\n\t      s2=text.substr( p );\n\t    text = s1 + s2;\n\t  }\n\t  /*\n\t  int p=pos;\n\t  if( p<text.length() && text[p]==' ' ) p++;\n\t  while( p<text.length() && text[p]!=' ' )\n\t    ++p;\n\t  string s1=text.substr(0,pos), s2=\"\";\n\t  if( p!=text.length() )\n\t    s2 = text.substr( p );\n\t  text = s1 + s2;\n\t  */\n\t}\n      }\n    }\n    pr();\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <sstream>\n#include <string>\nusing namespace std;\n\nint GetForwardLast( int cs, string t )\n{\n    if ( cs == (int)t.size() ) return cs;\n\n    bool flag = false;\n    for ( int i = cs; i < (int)t.size(); i++ )\n    {\n        if ( t[i] == ' ' )\n        {\n            if ( flag )\n            {\n                return i;\n            }\n        }\n        else\n        {\n            flag = true;\n        }\n    }\n    return (int)t.size();\n}\n\nint GetBackwardFirst( int cs, string t )\n{\n    if ( cs == 0 ) return 0;\n\n    bool flag = false;\n    for ( int i = cs-1; i >= 0; i-- )\n    {\n        if ( t[i] == ' ' )\n        {\n            if ( flag )\n            {\n                return i + 1;\n            }\n        }\n        else\n        {\n            flag = true;\n        }\n    }\n    return 0;\n}\n\nint main( void )\n{\n    string line;\n\n    getline( cin, line );\n    istringstream is( line );\n    int n;\n    is >> n;\n\n    for ( int i = 0; i < n; i++ )\n    {\n        int cs = 0;\n\n        getline( cin, line );\n        string text = line;\n\n        getline( cin, line );\n        istringstream is( line );\n        int m;\n        is >> m;\n        is.clear();\n\n        for ( int j = 0; j < m; j++ )\n        {\n            getline( cin, line );\n            string c = line;\n            istringstream is( c );\n            string c1, c2;\n            is >> c1;\n            getline( is, c2 );\n            c2 = c2.substr( 1 );\n            is.clear();\n\n            int cs_f = GetForwardLast( cs, text );\n            int cs_b = GetBackwardFirst( cs, text );\n\n            if ( c1 == \"forward\" )\n            {\n                if ( c2 == \"char\" )\n                {\n                    if ( cs + 1 <= (int)text.size() ) cs++;\n                }\n                else\n                {\n                    cs = cs_f;\n                }\n            }\n            else if ( c1 == \"backward\" )\n            {\n                if ( c2 == \"char\" )\n                {\n                    if ( cs - 1 >= 0 ) cs--;\n                }\n                else\n                {\n                    cs = cs_b;\n                }\n            }\n            else if ( c1 == \"insert\" )\n            {\n                string next;\n                string trim;\n                for ( int k = 1; k + 1 < (int)c2.size(); k++ ) trim += c2[k];\n                for ( int k = 0; k < cs; k++ ) next += text[k];\n                for ( int k = 0; k < (int)trim.size(); k++ ) next += trim[k];\n                for ( int k = cs; k < (int)text.size(); k++ ) next += text[k];\n                text = next;\n                cs += (int)trim.size();\n            }\n            else if ( c1 == \"delete\" )\n            {\n                if ( c2 == \"char\" )\n                {\n                    if ( cs < (int)text.size() )\n                    {\n                        string next = text.substr( 0, cs ) + text.substr( cs+1 );\n                        text = next;\n                    }\n                }\n                else\n                {\n                    bool blank = true;\n                    for ( int k = cs; k < (int)text.size(); k++ ) if ( text[k] != ' ' ) blank = false;\n                    if ( blank == false && cs < (int)text.size() )\n                    {\n                        string next = text.substr( 0, cs ) + text.substr( cs_f );\n                        text = next;\n                    }\n                }\n            }\n        }\n\n        for ( int i = 0; i <= (int)text.size(); i++ )\n        {\n            if ( i == cs ) cout << \"^\";\n            if ( i < (int)text.size() ) cout << text[i];\n        }\n        cout << endl;\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <string>\n#include <iostream>\n\nusing namespace std;\n\nint n,m;\n\nint main(void){\n\tscanf(\"%d%*c\",&n);\n\tfor(int dd=0;dd<n;dd++){\n\t\tstring str;\n\t\tgetline(cin,str);\n\t\tscanf(\"%d%*c\",&m);\n\t\tint point=0;\n\t\tfor(int i=0;i<m;i++){\n\t\t\tstring com;\n\t\t\tgetline(cin,com);\n\t\t\tif(com==\"forward char\"){\n\t\t\t\tif(point<str.size()){\n\t\t\t\t\tpoint++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(com==\"forward word\"){\n\t\t\t\tif(point<str.size()){\n\t\t\t\t\twhile(point<str.size() && str[point]==' ')point++;\n\t\t\t\t\twhile(point<str.size() && str[point]!=' ')point++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(com==\"backward char\"){\n\t\t\t\tif(point>0){\n\t\t\t\t\tpoint--;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(com==\"backward word\"){\n\t\t\t\tif(point>0){\n\t\t\t\t\twhile(point>0 && str[point-1]==' ')point--;\n\t\t\t\t\twhile(point>0 && str[point-1]!=' ')point--;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(com[0]=='i'){\n\t\t\t\tstring str2;\n\t\t\t\tstring str3;\n\t\t\t\tstring str4;\n\t\t\t\tstr2=str.substr(0,point);\n\t\t\t\tstr3=str.substr(point);\n\t\t\t\tstr4=com.substr(8,com.size()-9);\n\t\t\t\tstr=str2+str4+str3;\n\t\t\t\tpoint+=com.size()-9;\n\t\t\t\t//cout << str4 << endl;\n\t\t\t}\n\t\t\tif(com==\"delete char\"){\n\t\t\t\tif(str.size()==point)continue;\n\t\t\t\tstring str2;\n\t\t\t\tstring str3;\n\t\t\t\tstr2=str.substr(0,point);\n\t\t\t\tstr3=str.substr(point+1);\n\t\t\t\tstr=str2+str3;\n\t\t\t}\n\t\t\tif(com==\"delete word\"){\n\t\t\t\tif(str.size()==point)continue;\n\t\t\t\tint e=1;\n\t\t\t\tif(str[point]==' '){\n\t\t\t\t\twhile(point+e<str.size() && str[point+e]==' ')e++;\n\t\t\t\t}\n\t\t\t\twhile(point+e<str.size() && str[point+e]!=' ')e++;\n\n\t\t\t\tstring str2;\n\t\t\t\tstring str3;\n\t\t\t\tstr2=str.substr(0,point);\n\t\t\t\tstr3=str.substr(point+e);\n\t\t\t\tstr=str2+str3;\n\t\t\t}\n\t\t}\n\t\tstring res=\"\";\n\t\tfor(int i=0;i<str.size();i++){\n\t\t\tif(i==point)res+='^';\n\t\t\tres+=str[i];\n\t\t}\n\t\tif(str.size()==point)res+='^';\n\t\tcout << res << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdlib>\n#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring text;\nint cursor;\n\nvoid forward_char()\n{\n\tif (cursor < text.length()) ++cursor;\n}\n\nvoid backward_char()\n{\n\tif (0 < cursor) --cursor;\n}\n\nvoid forward_word()\n{\n\twhile (cursor < text.length() && text[cursor] == ' ') ++cursor;\n\twhile (cursor < text.length() && text[cursor] != ' ') ++cursor;\n}\n\nvoid backward_word()\n{\n\twhile (0 < cursor && text[cursor - 1] == ' ') --cursor;\n\twhile (0 < cursor && text[cursor - 1] != ' ') --cursor;\n}\n\nvoid insert_text(const string &str)\n{\n\ttext.insert(cursor, str);\n\tcursor += str.length();\n}\n\nvoid delete_char()\n{\n\tif (cursor < text.length()) text.erase(cursor, 1);\n}\n\nvoid delete_word()\n{\n\twhile (cursor < text.length() && text[cursor] == ' ') text.erase(cursor, 1);\n\twhile (cursor < text.length() && text[cursor] != ' ') text.erase(cursor, 1);\n}\n\nstring get_insert_string(const string &str)\n{\n\tint i = str.find('\"'), j = str.rfind('\"');\n\treturn str.substr(i + 1, j - i - 1);\n}\n\nint main()\n{\n\tstring line;\n\n\tint N;\n\tgetline(cin, line);\n\tN = atoi(line.c_str());\n\twhile(N-->0)\n\t{\n\t\tgetline(cin, text);\n\n\t\tcursor = 0;\n\n\t\tgetline(cin, line);\n\t\tint M = atoi(line.c_str());\n\t\tfor (int i = 0; i < M; i++)\n\t\t{\n\t\t\tgetline(cin, line);\n\t\t\t     if (line == \"forward char\")  forward_char();\n\t\t\telse if (line == \"forward word\")  forward_word();\n\t\t\telse if (line == \"backward char\") backward_char();\n\t\t\telse if (line == \"backward word\") backward_word();\n\t\t\telse if (line == \"delete char\")   delete_char();\n\t\t\telse if (line == \"delete word\")   delete_word();\n\t\t\telse if (line.compare(0, 6, \"insert\") == 0)\n\t\t\t\tinsert_text(get_insert_string(line));\n\t\t}\n\t\tcout << text.substr(0, cursor) << \"^\" << text.substr(cursor) << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<vector>\nusing namespace std;\n\nint main(){\n  int n;\n  cin >>n;\n  cin.ignore();\n  for(int i=0;i<n;i++){\n    string str;\n    int cn,pos;\n    if(!getline(cin,str)){\n      str = \"\";\n    }\n    cin >> cn;\n    pos = 0;\n    for(int j=0;j<cn;j++){\n      string command,target;\n      char ch;\n      cin >> command;\n      getline(cin,target);\n      target.erase(0,1);\n      if(command == \"forward\"){\n        if(pos<str.size()){\n          if(target == \"word\"){\n            do{\n              pos++;\n            }while(pos<str.size()&&str[pos]!=' ');\n          }else{\n            pos++;\n          }\n        }\n      }else if(command == \"delete\"){\n        if(str.size()!=0&&pos!=str.size()){\n          if(target == \"word\"){\n            do{\n              str.erase(pos,1);\n            }while(pos<str.size()&&str[pos]!=' ');\n          }else{\n            str.erase(pos,1);\n          }\n        }\n      }else if(command == \"backward\"){\n        if(pos>0){\n          if(target == \"word\"){\n            do{\n              pos--;\n            }while(pos>0&&str[pos]!=' ');\n          }else{\n            pos--;\n          }\n        }\n      }else if(command == \"insert\"){\n        target = target.substr(1,target.size()-2);\n        str.insert(pos,target);\n        pos += target.size();\n      }\n    }\n    str.insert(pos,\"^\");\n    cout << str << endl;\n  }\n  \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <climits>\n#include <cfloat>\n#include <ctime>\n#include <cassert>\n#include <map>\n#include <utility>\n#include <set>\n#include <iostream>\n#include <memory>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <functional>\n#include <sstream>\n#include <complex>\n#include <stack>\n#include <queue>\n#include <numeric>\n#include <list>\n#include <iomanip>\n#include <iterator>\n \nusing namespace std;\n \ntypedef long long ll;\ntypedef pair<int,int> Pii;\ntypedef pair<ll,ll> Pll;\n \n#define FOR(i,n) for(int i = 0; i < (n); i++)\n#define sz(c) ((int)c.size())\n\ntypedef unsigned long long ull;\nconst int INF = (int)1e8;\n\nvoid operate(string &val,int &cur,string op){\n\tint n = sz(val);\n\tif(op == \"forward char\"){\n\t\tif(cur != n) cur++;\n\t} else if(op == \"forward word\"){\n\t\twhile(cur != n && val[cur] != ' ') cur++; \n\t} else if(op == \"backward char\"){\n\t\tif(cur != 0) cur--;\n\t} else if(op == \"backward word\"){\n\t\twhile(cur != 0 && val[cur-1] != ' ') cur--; \n\t} else if(op == \"delete char\"){\n\t\tif(cur != n)\n\t\t\tval.erase(cur,1);\n\t} else if(op == \"delete word\"){\n\t\tif(cur != n){\n\t\t\tint pos = 1;\n\t\t\twhile(cur + pos != n && val[cur + pos - 1] != ' ') pos++;\n\t\t\tval.erase(cur,pos);\n\t\t}\n\t} else {\n\t\tstring a = op.substr(8);\n\t\tval.insert(val.begin() + cur,a.begin(),a.end() - 1);\n\t\tcur += a.size() - 1;\n\t}\n}\n\nint main(){\n\tint t; cin>>t;\n\tstring buf;\n\tgetline(cin,buf);\n\twhile(t--){\n\t\tstring val; getline(cin,val);\n\t\tint m; cin>>m;\n\t\tgetline(cin,buf);\n\t\tvector<string> op(m); FOR(i,m) getline(cin,op[i]);\n\t\tint cur = 0;\n\t\tFOR(i,m){\n\t\t\toperate(val,cur,op[i]);\n\t\t}\n\n\t\tval.insert(val.begin() + cur,'^');\n\t\tcout << val << endl; \n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<cctype>\nusing namespace std;\nclass SimpleEditor{\npublic:\n  int cur;\n  string s;\n  SimpleEditor(string s):s(s),cur(0){}\n  void ForwardChar(){\n    ++cur;\n    if(cur>=s.length())cur=s.length()-1;\n  }\n  void BackwardChar(){\n    --cur;\n    if(cur<0)cur=0;\n  }\n  void ForwardWord(){\n    while(s[cur]==' '&&s[cur]!='#')ForwardChar();\n    while(s[cur]!=' '&&s[cur]!='#')ForwardChar();\n    if(s[cur]==' ')\n      BackwardChar();\n  }\n  void BackwardWord(){\n    while(s[cur]==' '&&cur>0)BackwardChar();\n    if(s[cur-1]==' '){cur=0;return ;}\n    while(s[cur]!=' '&&cur>0)BackwardChar();\n    if(s[cur]==' ')\n      ForwardChar();\n  }\n  void Insert(string text){\n    s.insert(s.begin()+cur,text.begin()+8,text.end()-1);\n    cur += text.length()-9;\n  }\n  bool DeleteChar(){\n    if(cur<s.length()-1&&*(s.begin()+cur+1)!='#'){\n      s.erase(s.begin()+cur+1);\n      return true;\n    }\n    return false;\n  }\n  void DeleteWord(){\n    if(cur+1>=s.length())return ;\n    while(s[cur+1]==' '&&DeleteChar());\n    while(s[cur+1]!=' '&&DeleteChar());\n    if(s[cur]!=' ')s.erase(s.begin()+cur);\n  }\n  string ToString()const{\n    string ret;\n    for(int i=0;i<s.length();++i){\n      //if(i==cur)ret+='[';\n      if(i==cur)ret+='^';\n      ret+=s[i];\n      //if(i==cur)ret+=']';\n    }\n    ret.erase(ret.end()-1);\n    return ret;\n  }\n};\nvoid GetLine(string &s){\n  getline(cin,s);\n  for(int i =0;i<s.length();++i){\n    if(iscntrl(s[i])){s.erase(s.begin()+i);--i;}\n  }\n}\nint main(){\n  string dam;\n  int T;\n  cin >> T;\n  GetLine(dam);\n  for(int tc=1;tc<=T;++tc){\n    string s;\n    GetLine(s);\n    s+='#';\n    SimpleEditor se(s);\n    //cout << \"NUMBER OF TEST CASE : \" << T << \" INITIAL STRING : \" << s << endl;\n    int t;\n    cin >> t;\n    GetLine(dam);\n    for(int i = 0; i < t; ++i){\n      string inst;\n      GetLine(inst);\n      if(inst==\"forward char\")se.ForwardChar();\n      if(inst==\"forward word\")se.ForwardWord();\n      if(inst==\"backward char\")se.BackwardChar();\n      if(inst==\"backward word\")se.BackwardWord();\n      if(inst.find(\"insert\")!=string::npos)se.Insert(inst);\n      if(inst==\"delete char\")se.DeleteChar();\n      if(inst==\"delete word\")se.DeleteWord();\n      //cout<<i<<\"/\" <<t<<\":\"<<\" INST:\" <<inst<<\" ED:\"<<se.ToString() << endl;\n    }\n    cout << se.ToString() << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <climits>\n#include <cfloat>\n#include <ctime>\n#include <cassert>\n#include <map>\n#include <utility>\n#include <set>\n#include <iostream>\n#include <memory>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <functional>\n#include <sstream>\n#include <complex>\n#include <stack>\n#include <queue>\n#include <numeric>\n#include <list>\n#include <iomanip>\n#include <iterator>\n \nusing namespace std;\n \ntypedef long long ll;\ntypedef pair<int,int> Pii;\ntypedef pair<ll,ll> Pll;\n \n#define FOR(i,n) for(int i = 0; i < (n); i++)\n#define sz(c) ((int)c.size())\n\ntypedef unsigned long long ull;\nconst int INF = (int)1e8;\n\nvoid OUT_CUR(string& val,int cur) { \n#ifdef _DEBUG\n\tputs(val.c_str());\n\tFOR(i,cur) putchar(' ');\n\tputs(\"^\");\n#endif\n}\n\nvoid operate(string &val,int &cur,string op){\n\tint n = sz(val);\n\tif(op == \"forward char\"){\n\t\tif(cur != n) cur++;\n\t} else if(op == \"forward word\"){\n\t\tif(cur != n){\n\t\t\tcur++;\n\t\t\twhile(cur != n && val[cur] != ' ') cur++; \n\t\t\twhile(cur+1 < n && val[cur+1] == ' ') cur++;\n\t\t}\n\t} else if(op == \"backward char\"){\n\t\tif(cur != 0) cur--;\n\t} else if(op == \"backward word\"){\n\t\tif(cur != 0){\n\t\t\tcur--;\n\t\t\twhile(cur != 0 && val[cur-1] != ' ') cur--; \n\t\t\twhile(cur-1 > 0 && val[cur-2] == ' ') cur--; \n\t\t}\n\t} else if(op == \"delete char\"){\n\t\tif(cur != n)\n\t\t\tval.erase(cur,1);\n\t} else if(op == \"delete word\"){\n\t\tif(cur != n){\n\t\t\tint pos = 1;\n\t\t\twhile(cur + pos != n && val[cur + pos - 1] == ' ') pos++;\n\t\t\twhile(cur + pos != n && val[cur + pos - 1] != ' ') pos++;\n\t\t\tval.erase(cur,pos);\n\t\t}\n\t} else {\n\t\tstring a = op.substr(8);\n\t\ta.erase(a.end()-1);\n\t\tval.insert(val.begin() + cur,a.begin(),a.end());\n\t\tcur += a.size();\n\t}\n\n\tOUT_CUR(val,cur);\n}\n\nint main(){\n\tint t; cin>>t;\n\tstring buf;\n\tgetline(cin,buf);\n\twhile(t--){\n\t\tstring val; getline(cin,val);\n\t\tint m; cin>>m;\n\t\tgetline(cin,buf);\n\t\tvector<string> op(m); FOR(i,m) getline(cin,op[i]);\n\t\tint cur = 0;\n\t\tFOR(i,m){\n\t\t\toperate(val,cur,op[i]);\n\t\t}\n\n\t\tval.insert(val.begin() + cur,'^');\n\t\tcout << val << endl; \n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <climits>\n#include <cmath>\n#include <ctime>\n#include <cassert>\n#include <iostream>\n#include <fstream>\n#include <sstream>\n#include <iomanip>\n#include <complex>\n#include <string>\n#include <vector>\n#include <list>\n#include <deque>\n#include <stack>\n#include <queue>\n#include <set>\n#include <map>\n#include <bitset>\n#include <iterator>\n#include <functional>\n#include <utility>\n#include <algorithm>\n#include <numeric>\n#include <typeinfo>\n\nusing namespace std;\n\n#define rep(i,n) for(int i=0; i<n; i++)\n\nvoid solve(){\n    string t; getline(cin,t);\n    list<char> s(t.begin(),t.end());\n\n    auto it=s.begin();\n    int n; cin>>n; cin.get();\n    while(n--){\n        string cmd; getline(cin,cmd);\n\n        if(cmd==\"forward char\"){\n            if(it!=s.end()) ++it;\n        } else if(cmd==\"forward word\"){\n            while(it!=s.end() && *it==' ')\n                ++it;\n            while(it!=s.end() && *it!=' ')\n                ++it;\n        } else if(cmd==\"backward char\"){\n            if(it!=s.begin()) --it;\n        } else if(cmd==\"backward word\"){\n            while(it!=s.begin() && *--it==' ')\n                ;\n            while(it!=s.begin()){\n                --it;\n                if(*it==' '){\n                    ++it;\n                    break;\n                }\n            }\n        } else if(cmd.substr(0,6)==\"insert\"){\n            int i=cmd.find('\"')+1,j=cmd.find('\"',i);\n            s.insert(it,cmd.begin()+i,cmd.begin()+j);\n        } else if(cmd==\"delete char\"){\n            if(it!=s.end()) it=s.erase(it);\n        } else if(cmd==\"delete word\"){\n            auto it2=it;\n            while(it2!=s.end() && *it2==' ') ++it2;\n            if(it2==s.end()) continue;\n            while(it2!=s.end() && *it2!=' ') ++it2;\n            it=s.erase(it,it2);\n        }\n    }\n    for(auto i=s.begin(); i!=s.end();++i){\n        if(i==it)\n            cout<<'^';\n        cout<<*i;\n    }\n    cout<<endl;\n}\n\nint main(){\n    int t; cin>>t; cin.get();\n    while(t--) solve();\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nint main(){\n        int n;\n        cin >> n;\n        string dummy;\n        getline(cin, dummy);\n        while(n--){\n                string text;\n                getline(cin, text);\n\n                int m, c = 0;\n                cin >> m;\n                while(m--){\n                        string cmd;\n                        cin >> cmd;\n                        if(cmd == \"forward\"){\n                                cin >> cmd;\n                                if(cmd == \"char\"){\n                                        if(c < text.size()){ ++c; }\n                                }else if(cmd == \"word\"){\n                                        for(; c < text.size(); ++c){\n                                                if(text[c] != ' '){ break; }\n                                        }\n                                        for(; c < text.size(); ++c){\n                                                if(text[c] == ' '){ break; }\n                                        }\n                                }\n                                getline(cin, dummy);\n                        }else if(cmd == \"backward\"){\n                                cin >> cmd;\n                                if(cmd == \"char\"){\n                                        if(c > 0){ --c; }\n                                }else if(cmd == \"word\"){\n                                        for(; c > 0; --c){\n                                                if(text[c - 1] != ' '){ break; }\n                                        }\n                                        for(; c > 0; --c){\n                                                if(text[c - 1] == ' '){ break; }\n                                        }\n                                }\n                                getline(cin, dummy);\n                        }else if(cmd == \"insert\"){\n                                getline(cin, cmd);\n                                int front = cmd.find_first_of('\"');\n                                int tail = cmd.find_last_of('\"');\n                                cmd = cmd.substr(front + 1, tail - front - 1);\n                                text.insert(c, cmd);\n                                c += cmd.size();\n                        }else if(cmd == \"delete\"){\n                                cin >> cmd;\n                                if(cmd == \"char\"){\n                                        if(c < text.size()){ text.erase(text.begin() + c); }\n                                }else if(cmd == \"word\"){\n                                        int front = c;\n                                        int end = c;\n                                        for(; end < text.size(); ++end){\n                                                if(text[end] != ' '){ break; }\n                                        }\n                                        for(; end < text.size(); ++end){\n                                                if(text[end] == ' '){ break; }\n                                        }\n                                        text.erase(text.begin() + c, text.begin() + end);\n                                }\n                                getline(cin, dummy);\n                        }\n                }\n                text.insert(c, \"^\");\n                cout << text << endl;\n        }\n        return 0;\n}"
  },
  {
    "language": "C++",
    "code": "/*judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1101*/\n/*Text Editor*/\n\n#include <stdio.h>\n#include <string.h>\n\nint pos;\nint lb;\nchar buf[1005];\n\nint forward_char(){\n    if(buf[pos+1]!='\\n'){\n        buf[pos] = buf[pos+1];\n        buf[pos+1] = '^';\n        pos++;\n    }\n    /*printf(\"%s\",buf);*/\n}\n\nint forward_word(){\n    while(buf[pos+1]==' '){/*word?????????????J???[???\\??????????????????????????????????????*/\n        buf[pos] = buf[pos+1];\n        pos++;\n    }\n    while(buf[pos+1]!=' '&&buf[pos+1]!='\\n'){\n        buf[pos] = buf[pos+1];\n        pos++;\n    }\n    buf[pos] = '^';\n    /*printf(\"%s\",buf);*/\n}\n\nint backward_char(){\n    if(pos){\n        buf[pos] = buf[pos-1];\n        buf[pos-1] = '^';\n        pos--;\n    }\n    /*printf(\"%s\",buf);*/\n}  \n\nint backward_word(){\n    while(buf[pos-1]==' '){\n        buf[pos] = buf[pos-1];\n        pos--;\n    }\n    while(buf[pos-1]!=' '&&pos){\n        buf[pos] = buf[pos-1];\n        pos--;\n    }\n    buf[pos] = '^';\n    /*printf(\"%s\",buf);*/\n}\n\nint insert(char *text){\n    int i;\n    int lt = strlen(text);\n    for(i=lb-1;i>=pos;i--)buf[i+lt] = buf[i];\n    for(i=0;i<lt;i++)buf[pos+i] = text[i];\n    lb += lt;\n    pos += lt;\n    /*printf(\"%s\",buf);*/\n}\n\nint delete_char(){\n    int i;\n    if(buf[pos+1]!='\\n'){\n        for(i=pos+1;i<lb;i++)buf[i] = buf[i+1];\n        lb--;\n    }\n    /*printf(\"%s\",buf);*/\n}\n\nint delete_word(){\n    int tmp = pos;\n    int i;\n    if(buf[tmp+1]=='\\n')return 0;\n    while(buf[tmp+1]==' '){\n        tmp++;\n        if(buf[tmp+1]=='\\n')return 0;\n    }\n    while(buf[tmp+1]!=' ')tmp++;\n    for(i=pos+1;i<lb;i++)buf[i] = buf[i+tmp-pos];\n    /*printf(\"%s\",buf);*/\n}\n\nint main(){\n    int n,m,lt;\n    int i,j,k;\n    char op[120];\n    char c[1003];/*1000??????+'\\n','\\0','^'*/\n    scanf(\"%d\",&n);\n    getchar();/*???????????????????????s?????????????????c??????????????*/\n    for(i=0;i<n;i++){\n        pos = 0;\n        buf[0] = '^';\n        fgets(c,1003,stdin);\n        for(j=0;j<1003;j++)buf[j+1] = c[j];\n        /*printf(\"%s\",buf);*/\n        lb = strlen(buf);\n        /*printf(\"How many op?: \");*/\n        scanf(\"%d\",&m);\n        getchar();\n        for(j=0;j<m;j++){\n            /*printf(\"(op %d/%d): \",j+1,m);*/\n            fgets(op,120,stdin);\n            if(!strncmp(op,\"forward char\",12))forward_char();\n            if(!strncmp(op,\"forward word\",12))forward_word();\n            if(!strncmp(op,\"backward char\",13))backward_char();\n            if(!strncmp(op,\"backward word\",13))backward_word();\n            if(!strncmp(op,\"delete char\",11))delete_char();\n            if(!strncmp(op,\"delete word\",11))delete_word();\n            if(!strncmp(op,\"insert\",6)){\n               lt = strlen(op);\n               op[lt-2] = '\\0';\n               for(k=8;k<lt-1;k++)op[k-8] = op[k];\n               lt -= 9;\n               insert(op);\n            }\n            /*printf(\"%s\",buf);*/\n        }\n        printf(\"%s\",buf);\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <cassert>\n#include <iostream>\n#include <cstdio>\n#include <vector>\n#include <algorithm>\n#include <complex>\n#include <cstring>\n#include <cstdlib>\n#include <string>\n#include <cmath>\n#include <queue>\n#include <set>\n#include <map>\nusing namespace std;\n\n#define REP(i,n) for(int i=0;i<(int)n;++i)\n#define FOR(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i)\n#define ALL(c) (c).begin(), (c).end()\nconst int INF = 1<<29;\n\nvoid forwardChar(string &s, int &c) {\n  if (c != s.size()) c++;\n}\nvoid forwardWord(string &s, int &c) {\n  for (;c<s.size()&&s[c]==' ';++c);\n  for (;c<s.size()&&s[c]!=' ';++c);\n}\nvoid backwardChar(string &s, int &c) {\n  if (c) c--;\n}\nvoid backwardWord(string &s, int &c) {\n  for (;c>0&&s[c-1]==' ';--c);\n  for (;c>0&&s[c-1]==' ';--c);\n}\nvoid insertText(string &s, int &c, const string &t) {\n  s.insert(c, t);\n  c += t.size();\n}\nvoid deleteChar(string &s, int &c) {\n  if (c != s.size()) s.erase(s.begin()+c);\n}\nvoid deleteWord(string &s, int &c) {\n  bool state = 0;\n  int p = c;\n  for (; p<s.size()&&s[p]==' '; ++p);\n  if (p==s.size()) return;\n  for (; p<s.size()&&s[p]!=' '; ++p);\n  if (p>c) s.erase(c,p-c);\n}\n\nint main() {\n  int n;\n  cin >> n;\n  cin.ignore();\n  while(n--) {\n    string text;\n    getline(cin, text);\n    int m; cin >> m; cin.ignore();\n    // cout << m << endl;\n    // cout << text << endl;\n    int cursor = 0;\n    while(m--) {\n      string op1, op2;\n      cin >> op1;\n      cin.ignore();\n      getline(cin,op2);\n      // cout << op1 << \" : \" << op2 << endl;\n      \n      if (op1[0] == 'f') {\n        if (op2[0] == 'c') forwardChar(text, cursor);\n        else forwardWord(text, cursor);\n      } else if (op1[0] == 'b') {\n        if (op2[0] == 'c') backwardChar(text, cursor);\n        else backwardWord(text, cursor);\n      } else if (op1[0] == 'i') {\n        assert(op2[0]=='\"' && op2[op2.size()-1]=='\"');\n        op2 = op2.substr(1, op2.size()-2);\n        insertText(text, cursor, op2);\n      } else if (op1[0] == 'd') {\n        if (op2[0] == 'c') deleteChar(text, cursor);\n        else deleteWord(text, cursor);\n      } else {\n        assert(0);\n      }\n      // cout << text << \" \" << cursor << endl;\n    }\n\n    text.insert(cursor, \"^\");\n    cout << text << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cassert>\n\nusing namespace std;\n\n#define rep(i, n) for (int i = 0; i < int(n); ++i)\n\nvoid solve() {\n  string str;\n  getline(cin, str);\n  int n;\n  cin >> n;\n  cin.ignore();\n  string buf;\n  int cur = 0;\n  rep (_, n) {\n    assert(0 <= cur && cur <= (int)str.size());\n    getline(cin, buf);\n    if (buf == \"forward char\") {\n      cur = min(cur + 1, (int)str.size());\n    } else if (buf == \"forward word\") {\n      while ((int)str.size() != cur && str[cur] == ' ') ++cur;\n      while ((int)str.size() != cur && str[cur] != ' ') ++cur;\n    } else if (buf == \"backward char\") {\n      cur = max(cur - 1, 0);\n    } else if (buf == \"backward word\") {\n      while (0 != cur && str[cur - 1] == ' ') --cur;\n      while (0 != cur && str[cur - 1] != ' ') --cur;\n    } else if (buf == \"delete char\") {\n      if (cur == (int)str.size()) continue;\n      str = str.substr(0, cur) + str.substr(cur + 1);\n    } else if (buf == \"delete word\") {\n      int s = cur;\n      while ((int)str.size() != s && str[s] == ' ') ++s;\n      if (s == (int)str.size()) continue;\n      while ((int)str.size() != s && str[s] != ' ') ++s;\n      str = str.substr(0, cur) + str.substr(s);\n    } else if (buf.substr(0, 6) == \"insert\") {\n      int s = buf.find('\"');\n      int t = buf.find('\"', s + 1);\n      string ins = buf.substr(s + 1, t - s - 1);\n      str = str.substr(0, cur) + ins + str.substr(cur);\n      cur += ins.size();\n    } else {\n      assert(0);\n    }\n  }\n  assert(0 <= cur && cur <= (int)str.size());\n  cout << str.substr(0, cur) << \"^\" << str.substr(cur) << endl;\n}\n\nint main() {\n  int t;\n  cin >> t;\n  cin.ignore();\n  rep (i, t) solve();\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <iostream>\n#include <string>\n#include <cmath>\n\nusing namespace std;\n\nint main(){    \n    int n;\n    cin>>n;\n    for(int i=0;i<n;i++){\n        string buf;\n        char c;\n        scanf(\"%c\", &c);\n\n        getline(cin,buf);\n       // cout << \"buf is \" << buf << endl;\n        int pos=0;\n        int cn;\n        cin>>cn;\n        for(int k=0;k<cn;k++){\n            string command;\n            cin >> command;\n            if(command==\"forward\"){\n                cin >> command;\n                if(command==\"char\"){\n                    if(!buf.empty())\n                    pos = min(pos+1,(int)buf.size());\n                }else{\n                    // word\n                    while(buf[pos]==' ' && pos < buf.size())pos++;\n                    while(buf[pos]!=' ' && pos < buf.size())pos++;\n                }\n            }else if(command==\"backward\"){\n                cin >> command;\n                if(command==\"char\"){\n                    pos = max(pos-1,0);\n                }else{\n                    // word\n                    while(buf[pos]==' ' && pos > 0)pos--;\n                    while(buf[pos]!=' ' && pos > 0)pos--;\n                }\n            }else if(command==\"insert\"){\n                getline(cin,command);\n                ungetc('\\n',stdin);\n                string text;\n                bool f= false;\n                for(int i=0;i<command.size();i++){\n                    if(f&&command[i]=='\\\"')break;\n                    if(f)text.push_back(command[i]);\n                    if(command[i]=='\\\"')f=true;\n                }\n                buf.insert(pos,text);\n                pos+= text.size();\n            }else {//delete\n                cin >> command;\n                if(command== \"char\"){\n                    if(!buf.empty()&&pos!=buf.size()){\n                        buf.erase(pos,1);\n                        pos = min(pos,(int)buf.size());\n                    }\n\n                }else{\n                    if(!buf.empty()){\n                        int t=pos;\n                        while(t<buf.size() && buf[t]==' ')t++;\n                        while(t<buf.size() && buf[t]!=' ')t++;\n                        while(t<buf.size() && buf[t]==' ')t++;\n\n                        buf.erase(pos,t-pos);\n                    }\n                }\n            }\n        }\n        //cout << buf << \"****\" << endl;\n        if(buf.empty()){\n            printf(\"^\\n\");\n        }else{\n        for(int p=0;p<buf.size();p++){\n            if(pos==p)printf(\"^\");\n            printf(\"%c\",buf[p]);\n        }\n\n        if(pos==buf.size())printf(\"^\");\n        printf(\"\\n\");\n        }\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<vector>\nusing namespace std;\n\n#define REP(i,n) for(int i = 0; i < (int)(n); i++)\n\nint main() {\n  int T; cin >> T >> ws;\n  while(T--) {\n    string buf;\n    getline(cin, buf);\n    //     cout << buf << endl;\n    // i == buf.size()ÆÈé±Æà éB\n    // eof <=> i == buf.size()\n    int i = 0;\n    int M; cin >> M >> ws;\n    REP(m, M) {\n      string line;\n      string command, op;\n      getline(cin, line);\n      int j = 0;\n      for(j = 0; line[j] != ' '; j++);\n      command = line.substr(0, j);\n      op = line.substr(j + 1);\n\n      //       cout << command << \" \" << op << endl;\n      if( command == \"forward\" ) {\n        if( op == \"word\" ) {\n          while( i < buf.size() && buf[i] == ' ' ) i++;\n          while( i < buf.size() && buf[i] != ' ' ) i++;\n        } else if( op == \"char\" ) {\n          if( i != buf.size() ) i++;\n        }\n      }\n\n      if( command == \"backward\" ) {\n        if( op == \"word\" ) {\n          while( i >= 0 && buf[i] == ' ' ) i--;\n          while( i >= 0 && buf[i] != ' ' ) i--;\n          i++;\n        } else if( op == \"char\" ) {\n          if( i > 0 ) i--;\n        }\n      }\n\n      if( command == \"insert\" ) {\n        string text = op.substr(1, op.size() - 2);\n\n        buf.insert(i, text);\n        i += text.size();\n      }\n\n      if( command == \"delete\" ) {\n        if( i < buf.size() ) {\n          if( op == \"char\" ) {\n            buf.erase(i,1);\n          }\n\n          if( op == \"word\" ) {\n            int len = 0;\n            while( i + len < buf.size() && buf[i + len] == ' ' ) len++;\n            if( i + len == buf.size() ) {\n              ;\n            } else {\n              while( i + len < buf.size() && buf[i+len] != ' ' )len++;\n              buf.erase( i, len );\n            }\n          }\n        }\n      }\n      //       cout << buf << \" \" << i <<  endl;\n\n    }\n    buf.insert(i, 1, '^');\n    cout << buf << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <iostream>\n#include <string>\n#include <cmath>\n\nusing namespace std;\n\nint main(){    \n    int n;\n    cin>>n;\n    for(int i=0;i<n;i++){\n        char b[1009];\n        gets(b);\n\n        gets(b);\n        string buf(b);\n        //cout << \"buf is \" << buf << endl;\n        int pos=0;\n        int cn;\n        cin>>cn;\n        for(int k=0;k<cn;k++){\n            string command;\n            cin >> command;\n            if(command==\"forward\"){\n                cin >> command;\n                if(command==\"char\"){\n                    if(!buf.empty())\n                    pos = min(pos+1,(int)buf.size());\n                }else{\n                    // word\n                    while(buf[pos]==' ' && pos < buf.size())pos++;\n                    while(buf[pos]!=' ' && pos < buf.size())pos++;\n                }\n            }else if(command==\"backward\"){\n                cin >> command;\n                if(command==\"char\"){\n                    if(!buf.empty())\n                    pos = max(pos-1,0);\n                }else{\n                    // word\n                    while(buf[pos]==' ' && pos > 0)pos--;\n                    while(buf[pos]!=' ' && pos > 0)pos--;\n                }\n            }else if(command==\"insert\"){\n                getline(cin,command);\n                string text;\n                bool f= false;\n                for(int i=0;i<command.size();i++){\n                    if(f&&command[i]=='\\\"')break;\n                    if(f)text.push_back(command[i]);\n                    if(command[i]=='\\\"')f=true;\n                }\n                buf.insert(pos,text);\n                pos+= text.size();\n            }else {//delete\n                cin >> command;\n                if(command== \"char\"){\n                    if(!buf.empty()&&pos!=buf.size()){\n                        buf.erase(pos,1);\n                        pos = min(pos,(int)buf.size());\n                    }\n\n                }else{\n                    if(!buf.empty()){\n                        int t=pos;\n                        while(t<buf.size() && buf[t]!=' ')t++;\n                        while(t<buf.size() && buf[t]==' ')t++;\n\n                        buf.erase(pos,t-pos);\n                    }\n                }\n            }\n        }\n        //cout << buf << \"****\" << endl;\n        if(buf.empty()){\n            printf(\"^\\n\");\n        }else{\n        for(int p=0;p<buf.size();p++){\n            if(pos==p)printf(\"^\");\n            printf(\"%c\",buf[p]);\n        }\n\n        if(pos==buf.size())printf(\"^\");\n        printf(\"\\n\");}\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint bword(string str, int n)\n{\n\tif(n==0) return 0;\n\tbool nb=false;\n\tint ret;\n\n\tfor(ret=n-1; ret>0; ret--)\n\t{\n\t\tif(!nb)\n\t\t{\n\t\t\tif(str[ret]!=' ') nb=true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(str[ret]==' ') return ret+1;\n\t\t}\n\t}\n\tif(nb) return ret+1;\n\treturn ret;\n}\n\nint fword(string str, int n)\n{\n\tbool nb=false;\n\tint ret;\n\tfor(ret=n; ret<str.size(); ret++)\n\t{\n\t\tif(!nb)\n\t\t{\n\t\t\tif(str[ret]!=' ') nb=true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(str[ret]==' ') return ret;\n\t\t}\n\n\t}\n\n\treturn ret;\n}\n\nint dword(string str, int n)\n{\n\tbool nb=false;\n\tint ret;\n\tfor(ret=n; ret<str.size(); ret++)\n\t{\n\t\tif(!nb)\n\t\t{\n\t\t\tif(str[ret]!=' ') nb=true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(str[ret]==' ') return ret;\n\t\t}\n\n\t}\n\n\tif(str[str.size()-1]!=' ') return str.size();\n\n\treturn n;\n}\n\nint main()\n{\n\tint N,M;\n\tstring str;\n\n\tcin >> N;\n\tgetline(cin,str);\n\n\twhile(N--)\n\t{\n\t\tgetline(cin,str);\n\t\t//str.erase(str.end()-1);\n\t\tint pos=0;\n\t\tcin >> M;\n\t\twhile(M--)\n\t\t{\n\t\t\tstring cmd;\n\t\t\tcin >> cmd;\n\t\t\tif(cmd[0]=='f')\n\t\t\t{\t\t\t\t\n\t\t\t\tgetline(cin,cmd);\n\t\t\t\tif(cmd[1]=='c')\n\t\t\t\t{\n\t\t\t\t\tif(pos<str.size()) pos++;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tpos=fword(str, pos);\n\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(cmd[0]=='b')\n\t\t\t{\n\t\t\t\tgetline(cin,cmd);\n\t\t\t\tif(cmd[1]=='c')\n\t\t\t\t{\n\t\t\t\t\tif(pos>0) pos--;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tpos=bword(str, pos);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(cmd[0]=='d')\n\t\t\t{\n\t\t\t\tgetline(cin,cmd);\n\t\t\t\tif(cmd[1]=='c')\n\t\t\t\t{\n\t\t\t\t\tif(pos!=str.size()) \n\t\t\t\t\t\tstr.erase(str.begin()+pos);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif(pos!=str.size())\n\t\t\t\t\t{\n\t\t\t\t\t\tint np=dword(str,pos);\n\t\t\t\t\t\tif(pos!=np) str.erase(str.begin()+pos, str.begin()+np);\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t\tif(cmd[0]=='i')\n\t\t\t{\n\t\t\t\tgetline(cin, cmd);\n\t\t\t\tcmd.assign(cmd.begin()+2, cmd.end()-2);\n\t\t\t\tstr.insert(pos, cmd);\n\t\t\t\tpos+=cmd.size();\n\t\t\t}\n\n\t\t}\n\n\t\tstr.insert(str.begin()+pos, '^');\n\t\tcout << str << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <iostream>\n#include <string>\n#include <cmath>\n\nusing namespace std;\n\nint main(){    \n    int n;\n    cin>>n;\n    for(int i=0;i<n;i++){\n        string buf;\n        char c;\n        scanf(\"%c\", &c);\n\n        getline(cin,buf);\n       // cout << \"buf is \" << buf << endl;\n        int pos=0;\n        int cn;\n        cin>>cn;\n        for(int k=0;k<cn;k++){\n            string command;\n            cin >> command;\n            if(command==\"forward\"){\n                cin >> command;\n                if(command==\"char\"){\n                    if(!buf.empty())\n                    pos = min(pos+1,(int)buf.size());\n                }else{\n                    // word\n                    while(pos < buf.size()&& buf[pos]==' ')pos++;\n                    while(pos < buf.size()&& buf[pos]!=' ')pos++;\n                }\n            }else if(command==\"backward\"){\n                cin >> command;\n                if(command==\"char\"){\n                    pos = max(pos-1,0);\n                }else{\n                    // word\n                    while(pos > 0 && buf[pos]==' ' )pos--;\n                    while(pos > 0 && buf[pos-1]!=' ')pos--;\n                }\n            }else if(command==\"insert\"){\n                getline(cin,command);\n                ungetc('\\n',stdin);\n                string text;\n                bool f= false;\n                for(int i=0;i<command.size();i++){\n                    if(f&&command[i]=='\\\"')break;\n                    if(f)text.push_back(command[i]);\n                    if(command[i]=='\\\"')f=true;\n                }\n                buf.insert(pos,text);\n                pos+= text.size();\n            }else {//delete\n                cin >> command;\n                if(command== \"char\"){\n                    if(!buf.empty()&&pos!=buf.size()){\n                        buf.erase(pos,1);\n                    }\n\n                }else{\n                    if(!buf.empty()){\n                        int t=pos;\n                        while(t<buf.size() && buf[t]==' ')t++;\n                        while(t<buf.size() && buf[t]!=' ')t++;\n                        while(t<buf.size() && buf[t]==' ')t++;\n\n                        buf.erase(pos,t-pos);\n                    }\n                }\n            }\n        }\n        //cout << buf << \"****\" << endl;\n        if(buf.empty()){\n            printf(\"^\\n\");\n        }else{\n        for(int p=0;p<buf.size();p++){\n            if(pos==p)printf(\"^\");\n            printf(\"%c\",buf[p]);\n        }\n\n        if(pos==buf.size())printf(\"^\");\n        printf(\"\\n\");\n        }\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint main() {\n    int N;\n    cin >> N;\n    cin.ignore();\n\n    while(N--) {\n        string str;\n        getline(cin, str);\n        int cursor = 0;\n        int M;\n        cin >> M;\n        cin.ignore();\n\n        while(M--) {\n            string cmdline;\n            getline(cin, cmdline);\n\n            int delim = cmdline.find(' ');\n            string cmd = cmdline.substr(0, delim);\n            string target = cmdline.substr(delim+1);\n            if(cmd == \"forward\") {\n                if(target == \"word\") {\n                    while(cursor < str.size() && str[cursor] == ' ') ++cursor;\n                    while(cursor < str.size() && str[cursor] != ' ') ++cursor;\n                }\n                else if(target == \"char\") {\n                    if(cursor < str.size()) ++cursor;\n                }\n                else {\n                    cerr << \"Unknown target in forward: \" << target << endl;\n                }\n            }\n            else if(cmd == \"backward\") {\n                if(target == \"word\") {\n                    while(cursor > 0 && str[cursor] == ' ') --cursor;\n                    while(cursor > 0 && str[cursor] != ' ') --cursor;\n                }\n                else if(target == \"char\") {\n                    if(cursor > 0) --cursor;\n                }\n                else {\n                    cerr << \"Unknown target in backward: \" << target << endl;\n                }\n            }\n            else if(cmd == \"delete\") {\n                if(target == \"word\") {\n                    int idx = cursor;\n                    bool ok = false;\n                    while(idx < str.size() && str[idx] == ' ') ++idx;\n                    while(idx < str.size() && str[idx] != ' ') {++idx; ok = true; }\n                    if(ok) {\n                        str.erase(cursor, idx-cursor);\n                    }\n                }\n                else if(target == \"char\") {\n                    if(cursor >= str.size()) continue;\n                    str.erase(cursor, 1);\n                }\n                else {\n                    cerr << \"Unknown target in delete: \" << target << endl;\n                }\n            }\n            else if(cmd == \"insert\") {\n                str = str.substr(0, cursor) + target.substr(1, target.size()-2) + str.substr(cursor);\n                cursor += target.size()-2;\n            }\n            else {\n                //cerr << \"Unknown command: \" << cmd << endl;\n            }\n        }\n        cout << str.substr(0, cursor) << '^' << str.substr(cursor) << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<stack>\n#include<cstdio>\nusing namespace std;\n\n\nclass Text_editor{\n\tstack<char> text_before_cursor;\n\tstack<char> text_after_cursor;\n\tvoid forward_char();\n\tvoid forward_word();\n\tvoid backward_char();\n\tvoid backward_word();\n\tvoid delete_char();\n\tvoid delete_word();\n\tvoid insert(string s);\npublic:\n\tText_editor(string in){\n\t\tstring::iterator it;\n\t\tfor(it=in.end()-1; it!=in.begin()-1; it--){\n\t\t\tchar ch = *it;\n\t\t\ttext_after_cursor.push(ch);\n\t\t}}\n\tvoid command(string cmd);\n\tvoid output();\n};\n\nvoid Text_editor::forward_char(){\n\tif(text_after_cursor.size()){\n\t\tchar ch = text_after_cursor.top();\n\t\ttext_after_cursor.pop();\n\t\ttext_before_cursor.push(ch);\n\t}\n}\n\nvoid Text_editor::forward_word(){\n\tif(text_after_cursor.size()){\n\t\twhile(text_after_cursor.top()==' '){\n\t\t\ttext_before_cursor.push(text_after_cursor.top());\n\t\t\ttext_after_cursor.pop();\n\t\t}\n\t\twhile(text_after_cursor.size() && text_after_cursor.top()!='.' && text_after_cursor.top()!=',' && text_after_cursor.top()!=' '){\n\t\t\ttext_before_cursor.push(text_after_cursor.top());\n\t\t\ttext_after_cursor.pop();\n\t\t}\n\t\tif(text_after_cursor.size() && (text_after_cursor.top()=='.' || text_after_cursor.top()==',') ){\n\t\ttext_before_cursor.push(text_after_cursor.top());\n\t\ttext_after_cursor.pop();\n\t\t}\n\t}\n}\n\nvoid Text_editor::backward_char(){\n\tif(text_before_cursor.size()){\n\t\ttext_after_cursor.push(text_before_cursor.top());\n\t\ttext_before_cursor.pop();\n\t}\n}\n\nvoid Text_editor::backward_word(){\n\tif(text_before_cursor.size()){\n\t\twhile(text_before_cursor.size() && text_before_cursor.top()==' '){\n\t\t \ttext_after_cursor.push(text_before_cursor.top());\n\t\t \ttext_before_cursor.pop();\n\t\t }\n\t\twhile(text_before_cursor.size() && text_before_cursor.top()!='.' && text_before_cursor.top()!=',' && text_before_cursor.top()!=' '){\n\t\t\ttext_after_cursor.push(text_before_cursor.top());\n\t\t\ttext_before_cursor.pop();\n\t\t}\n\t}\n}\n\nvoid Text_editor::delete_char(){\n\tif(text_after_cursor.size()){\n\t\ttext_after_cursor.pop();\n\t}\n}\n\nvoid Text_editor::delete_word(){\n\tif(text_after_cursor.size()){\n\t\twhile(text_after_cursor.top()!='.' && text_after_cursor.top()!=',' && text_after_cursor.top()!=' ' && text_after_cursor.size() ){\n\t\t\ttext_after_cursor.pop();\n\t\t}\n\t\tif(text_after_cursor.top()==',' || text_after_cursor.top()=='.'){\n\t\t\ttext_after_cursor.pop();\n\t\t}\n\t}\n}\n\nvoid Text_editor::insert(string s){\n\tfor(unsigned int i=0; i<s.size(); i++){\n\t\ttext_before_cursor.push(s[i]);\n\t}\n}\n\nvoid Text_editor::command(string cmd){\n\n\tchar c1=cmd[0], c2;\n\n\tswitch(c1){\n\tcase 'f':{\n\t\tc2 = cmd[8];\n\t\tif(c2=='c'){\n\t\t\tforward_char();\n\t\t}else{\n\t\t\tforward_word();\n\t\t}\n\t\tbreak;\n\t}\n\tcase 'd':{\n\t\tc2 = cmd[7];\n\t\tif(c2=='c'){\n\t\t\tdelete_char();\n\t\t}else{\n\t\t\tdelete_word();\n\t\t}\n\t\tbreak;\n\t}\n\tcase 'b':{\n\t\tc2 = cmd[9];\n\t\tif(c2=='c'){\n\t\t\tbackward_char();\n\t\t}else{\n\t\t\tbackward_word();\n\t\t}\n\t\tbreak;\n\t}\n\tcase 'i':{\n\t\tcmd.erase(0, 8);\n\t\tcmd.erase(cmd.size()-1, 1);\n\t\tinsert(cmd);\t\t\n\t\tbreak;\n\t}\n\t}\n\n}\n\nvoid Text_editor::output(){\n\ttext_after_cursor.push('^');\n\twhile(text_before_cursor.size()){\n\t\ttext_after_cursor.push(text_before_cursor.top());\n\t\ttext_before_cursor.pop();\n\t}\n\tstring out;\n\twhile(text_after_cursor.size()){\n\t\tout.push_back(text_after_cursor.top());\n\t\ttext_after_cursor.pop();\n\t}\n\tcout << out << endl;\n}\n\n\nint main()\n{\n\tint n;\n\tscanf(\"%d\\n\", &n);\n\t\n\tfor(int i=0; i<n; i++){\n\t\tstring in;\n\t\tint ncmd;\n\t\tgetline(cin, in);\n\t\tText_editor txtE(in);\n\t\tscanf(\"%d\\n\", &ncmd);\n\t\tfor(int j=0; j<ncmd; j++){\n\t\t\tstring cmd;\n\t\t\tgetline(cin, cmd);\n\t\t\ttxtE.command(cmd);\n\t\t}\n\t\ttxtE.output();\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\n#include<algorithm>\n#include<cmath>\n#include<cassert>\n#include<sstream>\n#define REP(i,s,n) for(int i=s;i<n;i++)\n#define rep(i,n) REP(i,0,n)\n#define inf (1<<28)\n\nusing namespace std;\nint cursor;\n\nvoid ForwardChar(string &message)\n{\n  assert(message[cursor] == '^');\n  string tmp = \"\";\n  bool found = false;\n  rep(i,message.size())\n    {\n      if(message[i] == '^')\n\t{\n\t  found = true;\n\t  continue;\n\t}\n\n      tmp += message[i];\n      if(found)\n\t{\n\t  tmp += \"^\";\n\t  found = false;\n\t}\t\n    }\n  if(found)tmp += \"^\",cursor--;\n  cursor++;\n  message = tmp;\n}\n\nvoid ForwardWord(string &message)\n{\n  assert(message[cursor] == '^');\n  string tmp = \"\";\n  bool cursor_found = false;\n  bool word_found = false;\n  rep(i,message.size())\n    {\n      if(message[i] == '^')\n\t{\n\t  cursor_found = true;\n\t  continue;\n\t}\n      if(cursor_found && word_found && message[i] == ' ')\n\t{\n\t  cursor_found = word_found = false;\n\t  tmp += \"^\";\n\t  cursor = tmp.size()-1;\n\t}\n      tmp += message[i];\n      if(cursor_found && message[i] != ' ')\n\t{\n\t  word_found = true;\n\t}\n    }\n  if(cursor_found)\n    {\n      tmp += \"^\";\n      cursor = tmp.size()-1;\n    }\n  message = tmp;\n\n}\n\nvoid BackwardChar(string &message)\n{\n  assert(message[cursor] == '^');\n  int last = message.size();\n  string tmp = \"\";\n  bool found = false;\n  for(int i=last-1;i>=0;i--)\n    {\n      if(message[i] == '^')\n\t{\n\t  found = true;\n\t  continue;\n\t}\n\n      tmp += message[i];\n\n      if(found)\n\t{\n\t  found = false;\n\t  tmp += \"^\";\n\t  cursor--;\n\t}\n    }\n  if(found)tmp += \"^\";\n  reverse(tmp.begin(),tmp.end());\n  message = tmp;\n}\n\nvoid BackwardWord(string &message)\n{\n  assert(message[cursor] == '^');\n  string tmp = \"\";\n  bool cursor_found = false;\n  bool word_found = false;\n  for(int i=message.size()-1;i>=0;i--)\n    {\n      if(message[i] == '^')\n\t{\n\t  cursor_found = true;\n\t  continue;\n\t}\n      if(cursor_found && word_found && message[i] == ' ')\n\t{\n\t  cursor_found = word_found = false;\n\t  tmp += \"^\";\n\t}\n      tmp += message[i];\n      if(cursor_found && message[i] != ' ')\n\t{\n\t  word_found = true;\n\t}\n    }\n  if(cursor_found)\n    {\n      tmp += \"^\";\n    }\n  reverse(tmp.begin(),tmp.end());\n  message = tmp;\n  rep(i,message.size())\n    if(message[i] == '^')\n      {\n\tcursor = i;\n\tbreak;\n      }\n}\n\nvoid Insert(string &message,string text)\n{\n  assert(message[cursor] == '^');\n  string tmp = \"\";\n  rep(i,message.size())\n    {\n      if(message[i] == '^')\n\t{\n\t  tmp += text + \"^\";\n\t  cursor += text.size();\n\t  continue;\n\t}\n      tmp += message[i];\n    }\n  message = tmp;\n\n}\n\nvoid DeleteChar(string &message)\n{\n  assert(message[cursor] == '^');\n  bool found = false;\n  string tmp = \"\";\n  rep(i,message.size())\n    {\n      if(message[i] == '^')\n\t{\n\t  found = true;\n\t  tmp += \"^\";\n\t  continue;\n\t}\n      if(!found)\n\ttmp += message[i];\n      else\n\tfound = false;\n    }\n  message = tmp;\n}\n\nvoid DeleteWord(string &message)\n{\n  assert(message[cursor] == '^');\n  string tmp = \"\";\n  bool cursor_found = false;\n  bool word_found = false;\n  rep(i,message.size())\n    {\n      if(message[i] == '^')\n\t{\n\t  tmp += \"^\";\n\t  cursor_found = true;\n\t  continue;\n\t}\n\n      if(!cursor_found)\n\t{\n\t  tmp += message[i];\n\t}\n      else if(cursor_found && message[i] != ' ')\n\t{\n\t  word_found = true;\n\t}      \n      else if(cursor_found && word_found && message[i] == ' ')\n\t{\n\t  cursor_found = word_found = false;\n\t  tmp += message[i];\n\t}\n    }\n\n  message = tmp;\n}\n\n\n\nint main()\n{\n  int T,n;\n  cin >>T;\n  bool f = true;\n  while(T--)\n    {\n      cursor = 0;\n      if(f)\n\tcin.ignore();\n      f =false;\n      string line;\n      getline(cin,line);\n\n      line = \"^\" + line;\n      cin >> n;\n      cin.ignore();\n      string o1,o2;\n      rep(_,n)\n\t{\n\n\t  cin >> o1;\n\t  cin.ignore();\n\t  getline(cin,o2);\n\t  if(o1 == \"forward\")\n\t    {\n\t      if(o2 == \"char\")\n\t\t{\n\t\t  ForwardChar(line);\n\t\t}\n\t      else if(o2 == \"word\")\n\t\t{\n\t\t  ForwardWord(line);\n\t\t}\n\t      else assert(false);\n\t    }\n\t  else if(o1 == \"backward\")\n\t    {\n\t      if(o2 == \"char\")\n\t\t{\n\t\t  BackwardChar(line);\n\t\t}\n\t      else if(o2 == \"word\")\n\t\t{\n\t\t  BackwardWord(line);\n\t\t}\n\t      else assert(false);\n\t    }\n\t  else if(o1 == \"insert\")\n\t    {\n\t      o2 = o2.substr(1,o2.size()-2);\n\t      Insert(line,o2);\n\t    }\n\t  else if(o1 == \"delete\")\n\t    {\n\t      if(o2 == \"char\")\n\t\t{\n\t\t  DeleteChar(line);\n\t\t}\n\t      else if(o2 == \"word\")\n\t\t{\n\t\t  DeleteWord(line);\n\t\t}\n\t    }\n\t  else \n\t    {\n\t      cerr << o1 << \" \" << o2 << \" is invalid\"<<endl;\n\t      assert(false);\n\t    }\n\t}\n      cout << line << endl;\n    }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <iostream>\n#include <string>\n#include <cmath>\n\nusing namespace std;\n\nint main(){    \n    int n;\n    cin>>n;\n    for(int i=0;i<n;i++){\n        string buf;\n        char c;\n        scanf(\"%c\", &c);\n\n        getline(cin,buf);\n       // cout << \"buf is \" << buf << endl;\n        int pos=0;\n        int cn;\n        cin>>cn;\n        for(int k=0;k<cn;k++){\n            string command;\n            cin >> command;\n            if(command==\"forward\"){\n                cin >> command;\n                if(command==\"char\"){\n                    if(!buf.empty())\n                    pos = min(pos+1,(int)buf.size());\n                }else{\n                    // word\n                    while(buf[pos]==' ' && pos < buf.size())pos++;\n                    while(buf[pos]!=' ' && pos < buf.size())pos++;\n                }\n            }else if(command==\"backward\"){\n                cin >> command;\n                if(command==\"char\"){\n                    if(!buf.empty())\n                    pos = max(pos-1,0);\n                }else{\n                    // word\n                    while(buf[pos]==' ' && pos > 0)pos--;\n                    while(buf[pos]!=' ' && pos > 0)pos--;\n                }\n            }else if(command==\"insert\"){\n                getline(cin,command);\n                ungetc('\\n',stdin);\n                string text;\n                bool f= false;\n                for(int i=0;i<command.size();i++){\n                    if(f&&command[i]=='\\\"')break;\n                    if(f)text.push_back(command[i]);\n                    if(command[i]=='\\\"')f=true;\n                }\n                buf.insert(pos,text);\n                pos+= text.size();\n            }else {//delete\n                cin >> command;\n                if(command== \"char\"){\n                    if(!buf.empty()&&pos!=buf.size()){\n                        buf.erase(pos,1);\n                        pos = min(pos,(int)buf.size());\n                    }\n\n                }else{\n                    if(!buf.empty()){\n                        int t=pos;\n                        while(t<buf.size() && buf[t]!=' ')t++;\n                        while(t<buf.size() && buf[t]==' ')t++;\n\n                        buf.erase(pos,t-pos);\n                    }\n                }\n            }\n        }\n        //cout << buf << \"****\" << endl;\n        if(buf.empty()){\n            printf(\"^\\n\");\n        }else{\n        for(int p=0;p<buf.size();p++){\n            if(pos==p)printf(\"^\");\n            printf(\"%c\",buf[p]);\n        }\n\n        if(pos==buf.size())printf(\"^\");\n        printf(\"\\n\");}\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "using namespace std;\n#include <iostream>\n#include <vector>\n#include <stdlib.h>\n#include <string.h>\n#include <string>\n\n#define REP(i, n) for(int i=0; i<n; i++)\n\ntypedef vector<int> VI;\n\nint T, N;\nstring text;\nstring cmd;\nstring tmp;\n\nvoid execute(string& text, string cmd)\n{\n\tif(cmd == \"forward char\"){\n\t\tREP(i, text.size())\n\t\t{\n\t\t\tif(text[i] == '^')\n\t\t\t{\n\t\t\t\tif(i != text.size()-1)\n\t\t\t\t{\n\t\t\t\t\ttext[i] = text[i+1];\n\t\t\t\t\ttext[i+1] = '^';\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse if(cmd ==\"forward word\")\n\t{\n\t\tint iCaret = -1;\n\t\tREP(i, text.size())\n\t\t{\n\t\t\tif(text[i] == '^')\n\t\t\t{\n\t\t\t\tiCaret = i;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif(i == text.size()-1 && iCaret != -1)\n\t\t\t{\n\t\t\t\ttext.insert(text.end(), '^');\n\t\t\t\ttext.erase(text.begin()+iCaret);\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif(text[i] == ' ' && iCaret != -1)\n\t\t\t{\n\t\t\t\tif(i != 0)\n\t\t\t\t{\n\t\t\t\t\tif(text[i-1] == ' ' || text[i-1] == '^')\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttext.insert(text.begin()+i, '^');\n\t\t\t\ttext.erase(text.begin()+iCaret);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\telse if(cmd == \"backward char\")\n\t{\n\t\tREP(i, text.size())\n\t\t{\n\t\t\tif(text[i] == '^')\n\t\t\t{\n\t\t\t\tif(i != 0)\n\t\t\t\t{\n\t\t\t\t\ttext[i] = text[i-1];\n\t\t\t\t\ttext[i-1] = '^';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse if(cmd == \"backward word\")\n\t{\n\t\tint iCaret = -1;\n\t\tfor(int i=text.size()-1; i>=0; i--)\n\t\t{\n\t\t\tif(text[i] == '^')\n\t\t\t{\n\t\t\t\tiCaret = i;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif(i == 0 && iCaret != -1)\n\t\t\t{\n\t\t\t\ttext.erase(text.begin() + iCaret);\n\t\t\t\ttext.insert(text.begin(), '^');\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif(text[i] == ' ' && iCaret != -1)\n\t\t\t{\n\t\t\t\tif(i != text.size()-1)\n\t\t\t\t{\n\t\t\t\t\tif(text[i+1] == ' ' || text[i+1] == '^')\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttext.erase(text.begin() + iCaret);\n\t\t\t\ttext.insert(text.begin() + i, '^');\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\telse if(cmd == \"delete char\")\n\t{\n\t\tREP(i, text.size())\n\t\t{\n\t\t\tif(text[i] == '^')\n\t\t\t{\n\t\t\t\tif(i != text.size()-1)\n\t\t\t\t{\n\t\t\t\t\ttext.erase(text.begin() + i+1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse if(cmd == \"delete word\")\n\t{\n\t\tint first = 0;\n\t\tint last = 0;\n\t\tREP(i, text.size())\n\t\t{\n\t\t\tif(text[i] == '^')\n\t\t\t{\n\t\t\t\tfirst = i;\n\t\t\t}\n\t\t\t\n\t\t\tif((text[i] == ' ' || i == text.size()-1) && first != 0)\n\t\t\t{\n\t\t\t\tif(i != 0)\n\t\t\t\t{\n\t\t\t\t\tif(text[i-1] == ' ' || text[i-1] == ' ')\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttext.erase(text.begin()+first+1, text.begin()+i);\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tbool is_insert = true;\n\t\tstring str_insert = \"insert\";\n\t\tREP(i, str_insert.size())\n\t\t{\n\t\t\tif(str_insert[i] != cmd[i])\n\t\t\t{\n\t\t\t\tis_insert = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif(is_insert)\n\t\t{\n\t\t\tstring word_insert = string(cmd, str_insert.size()+2, cmd.size()-str_insert.size()-3);\n\t\t\t\n\t\t\tREP(i, text.size())\n\t\t\t{\n\t\t\t\tif(text[i] == '^')\n\t\t\t\t{\n\t\t\t\t\ttext.insert(i, word_insert);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main()\n{\n\tgetline(cin, tmp);\n\tT = atoi(tmp.c_str());\n\n\tREP(t, T)\n\t{\n\t\tgetline(cin, text);\n\t\ttext = \"^\" + text;\n\t\t//cout << text << endl;\n\n\t\tgetline(cin, tmp);\n\t\tN = atoi(tmp.c_str());\n\t\tREP(n, N)\n\t\t{\n\t\t\tgetline(cin, cmd);\n\t\t\texecute(text, cmd);\n\t\t}\n\t\tcout << text << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "\n#include <iostream>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <map>\n#include <set>\n#include <queue>\nusing namespace std;\n\ntypedef vector<int> vi;\ntypedef pair<int, int> pii;\n\n#define rep(i, n) for(int i=0; i<n; i++)\n#define repa(i, s, e) for(int i=s; i<=e; i++) \n\nint T, N, c;\nstring str, proc;\n\nvoid process(string& p) {\n\tif(p == \"forward char\") {\n\t\tif(c < str.size()) c++;\n\t}\n\telse if(p == \"backward char\") {\n\t\tif(c > 0) c--;\n\t}\n\telse if(p == \"forward word\") {\n\t\tif(c == str.size()) return;\n\t\twhile(str[c] == ' ' && c < str.size()) c++;\n\t    while(str[c] != ' ' && c < str.size()) c++;\n\t}\n\telse if(p == \"backward word\") {\n\t\tif(c == 0) return;\n\t\twhile(str[c-1] == ' ' && c > 0) c--;\n\t\twhile(str[c-1] != ' ' && c > 0) c--;\n\t}\n\telse if(p == \"delete char\") {\n\t\tif(c != str.size()) str.erase(c, 1);\n\t}\n\telse if(p == \"delete word\") {\n\t\tif(c == str.size()) return;\n\t\tint ct = c;\n\t\twhile(str[ct] == ' ' && ct != str.size()) ct++;\n\t\tif(ct == str.size()) return;\n\t\twhile(str[ct] != ' ' && ct != str.size()) ct++;\n\t\tstr.erase(c, ct-c);\n\t}\n\telse {\n\t\tsize_t s = p.find_first_of('\"');\n\t\tsize_t e = p.find_last_of('\"');\n\t\tstring a = p.substr(s+1, e-s-1);\n\t    // cout << a << endl;\n\t\tif(c != str.size()) {\n\t\t\tstr = str.substr(0, c) + a + str.substr(c, str.size()-1);\n\t\t} else {\n\t\t\tstr = str + a;\n\t\t}\n\t\tc = c + a.size();\n\t}\n}\n\nvoid out() {\n\trep(i,c) printf(\"%c\", str[i]);\n\tprintf(\"^\");\n\trepa(i,c,(int)str.size()-1) printf(\"%c\", str[i]);\n\tprintf(\"\\n\");\n}\n\nint main() {\n\tchar buf[256];\n\tcin >> T;\n\tcin.ignore();\n\trep(t,T) {\n\t\tfgets(buf, sizeof(buf), stdin);\n\t\t*(strchr(buf, '\\n')) = '\\0';\n\t\tstr = string(buf);\n\n\t\tscanf(\"%d\\n\", &N);\n\t\tc = 0;\n\t\trep(i,N) {\n\t\t\tgetline(cin, proc);\n\t\t\tprocess(proc);\n//\t\t\tout();\n\t\t}\n\t\tout();\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n\nusing namespace std;\n\n#define rep(i, n) for (int i = 0; i < int(n); ++i)\n\nvoid solve() {\n  string str;\n  getline(cin, str);\n  int n;\n  cin >> n;\n  string buf;\n  getline(cin, buf);\n  int cur = 0;\n  rep (_, n) {\n    getline(cin, buf);\n    if (buf == \"forward char\") {\n      cur = min(cur + 1, (int)str.size());\n    } else if (buf == \"forward word\") {\n      if (cur == (int)str.size()) continue;\n      do {\n\t++cur;\n      } while (cur < (int)str.size() && str[cur] != ' ');\n    } else if (buf == \"backward char\") {\n      cur = max(cur - 1, 0);\n    } else if (buf == \"backward word\") {\n      if (cur == 0) continue;\n      do {\n\t--cur;\n      } while (0 != cur && str[cur] != ' ');\n    } else if (buf == \"delete char\") {\n      if (cur == (int)str.size()) continue;\n      str = str.substr(0, cur) + str.substr(cur + 1);\n    } else if (buf == \"delete word\") {\n      if (cur == (int)str.size()) continue;\n      do {\n\tstr = str.substr(0, cur) + str.substr(cur + 1);\n      } while (cur != (int)str.size() && str[cur] != ' ');\n    } else {\n      rep (i, buf.size()) if (buf[i] == ' ') {\n\tstring ins = buf.substr(i + 1);\n\tins = ins.substr(1, ins.size() - 2);\n\tstr = str.substr(0, cur) + ins + str.substr(cur);\n\tcur += ins.size();\n      }\n    }\n  }\n  rep (i, str.size() + 1) {\n    if (i == cur) cout << \"^\";\n    if (i < (int)str.size()) cout << str[i];\n  }\n  cout << endl;\n}\n\nint main() {\n  int t;\n  cin >> t;\n  string buf;\n  getline(cin, buf);\n  rep (i, t) solve();\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <string>\n#include <algorithm>\n#include <cctype>\nusing namespace std;\n\nstring str, op;\nint len, cursor;\n\nstring make_str(string in){\n  int i;\n  for(i = 0 ; in[i] != '\"' ; i++);\n  string out = \"\";\n  for(i = i+1 ; in[i] != '\"' ; i++){\n    out += in[i];\n  }\n  //cout << out << endl;\n  return out;\n}\n\n\nvoid forward_char(){\n  if(cursor < len) cursor++;\n}\n\nvoid forward_word(){\n  bool space = 0;\n  int tmp = 0;\n  for(tmp = cursor ; ; tmp++){\n    if(str[tmp+1] == ' '){\n      space = 1;\n    }\n    if(space) break;\n    \n    if(tmp >= len){\n      cursor = len;\n      return;\n    }\n  }\n  \n  while(1){\n    if(tmp >= len){\n      cursor = len;\n      return;\n    }\n    if(isalpha(str[tmp])) break;\n    tmp++;\n  }\n  \n  while(1){\n    if(tmp >= len){\n      cursor = len;\n      return;\n    }\n    if(str[tmp+1] == ' '){\n      cursor = tmp;\n      return;\n    }\n   tmp++;\n  }\n}\n\nvoid backward_char(){\n  if(cursor > 0) cursor--;\n  return;\n}\n\nvoid backward_word(){\n  int space = 0;\n  int tmp = 0;\n  for(tmp = cursor ; ; tmp--){\n    if(str[tmp] == ' ') space++;\n    if(space == 1){\n      cursor = tmp;\n      break;\n    }\n    if(tmp <= 0){\n      cursor = 0;\n      break;\n    }\n  }\n}\n\nvoid insert_text(string in){\n  str.insert(cursor+1, in);\n  cursor += in.size();\n  len += in.size();\n}\n\nvoid delete_char(){\n  if(cursor < len){\n    str.erase(str.begin()+cursor+1);\n    len--;\n  }\n}\n\nvoid delete_word(){\n  if(len == 0) return;\n  int space = 0;\n  int tmp = 0;\n  cursor--;\n  for(tmp = cursor+1 ;  ;){\n    str.erase(str.begin()+tmp);\n    len--;\n    if(str[tmp] == ' ') space++;\n    if(space == 1 || tmp >= len) return;\n  }\n}\n\nint main(){\n  int T;\n  cin >> T;\n  cin.ignore();\n  while(T--){\n    getline(cin, str);\n    len = str.size()-1;\n    if(len < 0) len = 0;\n    cursor = 0;\n    int N;\n    cin >> N;\n    cin.ignore();\n    while(N--){\n      getline(cin, op);\n      if(op == \"forward char\") forward_char();\n      else if(op == \"forward word\") forward_word();\n      else if(op == \"backward char\") backward_char();\n      else if(op == \"backward word\") backward_word();\n      else if(op.substr(0, 6) == \"insert\") insert_text(make_str(op));\n      else if(op == \"delete char\") delete_char();\n      else if(op == \"delete word\") delete_word();\n      /*\n      cout << op << endl;\n      for(int i = 0 ; i <= len ; i++){\n\tif(i == cursor) cout << str[i] << '^';\n\telse cout << str[i];\n      }\n      cout << endl;\n      printf(\"cursor = %d\\n\", cursor);\n      printf(\"len = %d\\n\", len);\n      cout << endl;*/\n    }\n    \n    if(len == 0){\n      cout << '^' << endl;\n      continue;\n    }\n    for(int i = 0 ; i <= len ; i++){\n      if(i == cursor) cout << str[i] << '^';\n      else cout << str[i];\n    }\n    cout << endl;\n  }\n  return 0;\n}\n\n    "
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cctype>\n#include <cstring>\n#include <string>\n\n#define MIN(A,B) \\\n  ( (B) < (A) ? (B) : (A) )\n#define MAX(A,B) \\\n  ( (B) > (A) ? (B) : (A) )\n\nusing namespace std;\n\n/** Application main entry point. */\nint\nmain (\n  int     argc,\n  char  * argv[ ]\n  )\n{\n  char buf[ 256 ];\n  int n;\n\n  fgets ( buf, sizeof ( buf ), stdin );\n  sscanf ( buf, \"%d\", &n );\n  while ( n-- )\n  {\n    string res;\n    int m;\n    int p = 0;\n\n    fgets ( buf, sizeof ( buf ), stdin );\n    *( strchr ( buf, '\\n' ) ) = '\\0';\n    res.assign ( buf );\n\n    fgets ( buf, sizeof ( buf ), stdin );\n    sscanf ( buf, \"%d\", &m );\n\n    while ( m-- )\n    {\n      fgets ( buf, sizeof ( buf ), stdin );\n\n      if ( !strncmp ( buf, \"forward char\", 12 ) )\n      {\n        ++p;\n        p = MIN( p, res.size ( ) );\n        continue ;\n      }\n      if ( !strncmp ( buf, \"backward char\", 13 ) )\n      {\n        --p;\n        p = MAX( p, 0 );\n        continue ;\n      }\n      if ( !strncmp ( buf, \"forward word\", 12 ) )\n      {\n        while ( p < res.size ( ) && isspace ( res[ p ] ) ) ++p;\n        while ( p < res.size ( ) && !isspace ( res[ p ] ) ) ++p;\n        continue ;\n      }\n      if ( !strncmp ( buf, \"backward word\", 13 ) )\n      {\n        while ( p > 0 && isspace ( res[ p - 1 ] ) ) --p;\n        while ( p > 0 && !isspace ( res[ p - 1 ] ) ) --p;\n        continue ;\n      }\n      if ( !strncmp ( buf, \"insert\", 6 ) )\n      {\n        *( strrchr ( buf, '\\\"' ) ) = '\\0';\n        res.insert ( p, strchr ( buf, '\\\"' ) + 1 );\n        p += strlen ( strchr ( buf, '\\\"' ) + 1 );\n\n        continue ;\n      }\n      if ( !strncmp ( buf, \"delete char\", 11 ) )\n      {\n        if ( p < res.size ( ) ) res.erase ( p, 1 );\n\n        continue ;\n      }\n      if ( !strncmp ( buf, \"delete word\", 11 ) )\n      {\n        int q = p;\n\n        while ( q < res.size ( ) && isspace ( res[ q ] ) ) ++q;\n        while ( q < res.size ( ) && !isspace ( res[ q ] ) ) ++q;\n        res.erase ( p, q - p );\n\n        continue ;\n      }\n    }\n\n    printf ( \"%s^%s\\n\"\n           , res.substr ( 0, p ).c_str ( )\n           , res.substr ( p, res.size ( ) - p ).c_str ( ) );\n  }\n\n  return ( 0 );\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\nint main() {\n\tint N;\n\tcin >> N;\n\twhile (N--)\n\t{\n\t\tstring buf;\n\t\tcin.ignore();\n\t\tgetline(cin, buf);\n\t\tstring::iterator cur = buf.begin();\n\t\tint n;\n\t\tcin >> n;\n\t\twhile (n--)\n\t\t{\n\t\t\tstring cmd, arg;\n\t\t\tcin >> cmd;\n\t\t\tcin.ignore();\n\t\t\tgetline(cin, arg);\n\t\t\tif (cmd == \"forward\")\n\t\t\t{\n\t\t\t\tif (arg == \"char\" && cur != buf.end()) cur++;\n\t\t\t\telse cur = find(cur, buf.end(), ' ');\n\t\t\t}\n\t\t\telse if (cmd == \"backward\")\n\t\t\t{\t\t\t\n\t\t\t\tif (arg == \"char\" && cur != buf.begin()) cur--;\n\t\t\t\telse\n\t\t\t\t\twhile (cur != buf.begin()) {\n\t\t\t\t\t\tcur--;\n\t\t\t\t\t\tif (*cur == ' ') { cur++; break; }\n\t\t\t\t\t}\n\t\t\t}\n\t\t\telse if (cmd == \"delete\")\n\t\t\t{\n\t\t\t\tif (arg == \"char\" && cur != buf.end())\n\t\t\t\t{\n\t\t\t\t\tsize_t pos = cur - buf.begin();\n\t\t\t\t\tbuf = string(buf.begin(), cur) + string(cur+1, buf.end());\n\t\t\t\t\tcur = buf.begin() + pos;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tif (cur != buf.end())\n\t\t\t\t\t{\n\t\t\t\t\t\tsize_t pos = cur - buf.begin();\n\t\t\t\t\t\tstring::iterator t = find(cur, buf.end(), ' ');\n\t\t\t\t\t\tif (t == buf.end())\tbuf = string(buf.begin(), cur);\n\t\t\t\t\t\telse buf = string(buf.begin(), cur) + string(t+1, buf.end());\n\t\t\t\t\t\tcur = buf.begin() + pos;\n\t\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tsize_t pos = cur - buf.begin() + arg.size() - 2;\n\t\t\t\tbuf = string(buf.begin(), cur) + string(arg.begin()+1, arg.end()-1) + string(cur, buf.end());\n\t\t\t\tcur = buf.begin() + pos;\n\t\t\t}\n\t\t}\n\t\tcout << string(buf.begin(), cur) << '^' << string(cur, buf.end()) << endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<cstring>\n#include<algorithm>\n\n#define rep(i,n) for(int i=0;i<(n);i++)\n\nusing namespace std;\n\nint main(){\n\tint T; scanf(\"%d%*c\",&T);\n\twhile(T--){\n\t\tchar s[1024]; fgets(s,200,stdin);\n\t\tint len=strlen(s);\n\t\ts[--len]='\\0';\n\n\t\tint cur=0;\n\t\tint m; scanf(\"%d\",&m);\n\t\twhile(m--){\n\t\t\tchar cmd[9]; scanf(\"%s \",cmd);\n\t\t\tchar arg[200]; fgets(arg,200,stdin); arg[strlen(arg)-1]='\\0';\n\n\t\t\tif(cmd[0]=='f' && arg[0]=='c'){ // forward char\n\t\t\t\tcur=min(cur+1,len);\n\t\t\t}\n\t\t\telse if(cmd[0]=='f' && arg[0]=='w'){ // forward word\n\t\t\t\tfor(;cur<len;cur++) if(s[cur]!=' ') break;\n\t\t\t\tfor(;cur<len;cur++) if(s[cur]==' ') break;\n\t\t\t}\n\t\t\telse if(cmd[0]=='b' && arg[0]=='c'){ // backward char\n\t\t\t\tcur=max(cur-1,0);\n\t\t\t}\n\t\t\telse if(cmd[0]=='b' && arg[0]=='w'){ // backward word\n\t\t\t\tfor(;cur>0;cur--) if(s[cur-1]!=' ') break;\n\t\t\t\tfor(;cur>0;cur--) if(s[cur-1]==' ') break;\n\t\t\t}\n\t\t\telse if(cmd[0]=='d' && arg[0]=='c'){ // delete char\n\t\t\t\tif(cur<len){\n\t\t\t\t\tfor(int i=cur;i<len;i++) s[i]=s[i+1];\n\t\t\t\t\tlen--;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(cmd[0]=='d' && arg[0]=='w'){ // delete word\n\t\t\t\tif(cur<len){\n\t\t\t\t\tint i=cur;\n\t\t\t\t\tfor(;i<len;i++) if(s[i]==' ') break;\n\t\t\t\t\tfor(;i<len;i++) if(s[i]!=' ') break;\n\t\t\t\t\trep(j,len-i+1) s[cur+j]=s[i+j];\n\t\t\t\t\tlen-=i-cur;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse{ // insert\n\t\t\t\t// \"\" ðí\n\t\t\t\tint len2=strlen(arg);\n\t\t\t\trep(i,len2-2) arg[i]=arg[i+1];\n\t\t\t\tlen2-=2;\n\t\t\t\targ[len2]='\\0';\n\n\t\t\t\tfor(int i=len;i>=cur;i--) s[i+len2]=s[i];\n\t\t\t\trep(i,len2) s[cur+i]=arg[i];\n\t\t\t\tcur+=len2;\n\t\t\t\tlen+=len2;\n\t\t\t}\n\t\t}\n\n\t\trep(i,len+1){\n\t\t\tif(i==cur) putchar('^');\n\t\t\tif(i<len) putchar(s[i]);\n\t\t}\n\t\tputchar('\\n');\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <climits>\n#include <cfloat>\n#include <ctime>\n#include <cassert>\n#include <map>\n#include <utility>\n#include <set>\n#include <iostream>\n#include <memory>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <functional>\n#include <sstream>\n#include <complex>\n#include <stack>\n#include <queue>\n#include <numeric>\n#include <list>\n#include <iomanip>\n#include <iterator>\n \nusing namespace std;\n \ntypedef long long ll;\ntypedef pair<int,int> Pii;\ntypedef pair<ll,ll> Pll;\n \n#define FOR(i,n) for(int i = 0; i < (n); i++)\n#define sz(c) ((int)c.size())\n\ntypedef unsigned long long ull;\nconst int INF = (int)1e8;\n\nvoid operate(string &val,int &cur,string op){\n\tint n = sz(val);\n\tif(op == \"forward char\"){\n\t\tif(cur != n) cur++;\n\t} else if(op == \"forward word\"){\n\t\tif(cur != n){\n\t\t\twhile(cur < n && val[cur] == ' ') cur++;\n\t\t\twhile(cur < n && val[cur] != ' ') cur++; \n\t\t}\n\t} else if(op == \"backward char\"){\n\t\tif(cur != 0) cur--;\n\t} else if(op == \"backward word\"){\n\t\tif(cur != 0){\n\t\t\twhile(cur > 0 && val[cur-1] == ' ') cur--; \n\t\t\twhile(cur > 0 && val[cur-1] != ' ') cur--; \n\t\t}\n\t} else if(op == \"delete char\"){\n\t\tif(cur != n)\n\t\t\tval.erase(cur,1);\n\t} else if(op == \"delete word\"){\n\t\tif(cur != n){\n\t\t\tint pos = cur;\n\t\t\twhile(pos != n && val[pos] == ' ') pos++;\n\t\t\twhile(pos != n && val[pos] != ' ') pos++;\n\t\t\tval.erase(val.begin() + cur,val.begin() + pos);\n\t\t}\n\t} else {\n\t\tstring a = op.substr(op.find_first_of('\"')+1);\n\t\ta.erase(a.end()-1);\n\t\tval.insert(val.begin() + cur,a.begin(),a.end());\n\t\tcur += a.size();\n\t}\n}\n\nint main(){\n\tint t; cin>>t;\n\tstring buf;\n\tgetline(cin,buf);\n\twhile(t--){\n\t\tstring val; getline(cin,val);\n\t\tint m; cin>>m;\n\t\tgetline(cin,buf);\n\t\tvector<string> op(m); FOR(i,m) getline(cin,op[i]);\n\t\tint cur = 0;\n\t\tFOR(i,m){\n\t\t\toperate(val,cur,op[i]);\n\t\t}\n\n\t\tval.insert(val.begin() + cur,'^');\n\t\tcout << val << endl;\n\t}\n\tcin.get();\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <string>\n#include <algorithm>\n#include <cctype>\nusing namespace std;\n\nstring str, op;\nint len, cursor;\n\nstring make_str(string in){\n  int i;\n  for(i = 0 ; in[i] != '\"' ; i++);\n  string out = \"\";\n  for(i = i+1 ; in[i] != '\"' ; i++){\n    out += in[i];\n  }\n  return out;\n}\n\n\nvoid forward_char(){\n  if(cursor < len) cursor++;\n}\n\nvoid forward_word(){\n  if(len == 0) return;\n  bool space = 0;\n  int tmp = 0;\n  for(tmp = cursor ; ; tmp++){\n    if(str[tmp+1] == ' '){\n      space = 1;\n    }\n    if(space) break;\n    \n    if(tmp >= len){\n      cursor = len;\n      return;\n    }\n  }\n  \n  while(1){\n    if(tmp >= len){\n      cursor = len;\n      return;\n    }\n    if(str[tmp] != ' ') break;\n    tmp++;\n  }\n  \n  while(1){\n    if(tmp >= len){\n      cursor = len;\n      return;\n    }\n    if(str[tmp+1] == ' '){\n      cursor = tmp;\n      return;\n    }\n   tmp++;\n  }\n}\n\nvoid backward_char(){\n  if(len == 0) return;\n  if(cursor > 0) cursor--;\n  return;\n}\n\nvoid backward_word(){\n  if(len == 0) return;\n  bool space = 0;\n  int tmp = 0;\n  for(tmp = cursor ; ; tmp--){\n    if(str[tmp] == ' ') space = 1;\n    if(space) break;\n    if(tmp <= 0){\n      cursor = 0;\n      return;\n    }\n  }\n\n  while(1){\n    if(tmp <= 0){\n      cursor = 0;\n      return;\n    }\n    if(str[tmp] != ' '){\n      cursor = tmp;\n      return;\n    }\n    tmp--;\n  }\n}\n\nvoid insert_text(string in){\n\n  if(len == 0) str.insert(cursor, in);\n  else str.insert(cursor+1, in);\n  cursor += in.size();\n  len += in.size();\n}\n\nvoid delete_char(){\n  if(len == 0) return;\n  if(cursor < len){\n    str.erase(str.begin()+cursor+1);\n    len--;\n  }\n}\n\nvoid delete_word(){\n  if(len == 0) return;\n  int space = 0;\n  int tmp = 0;\n  cursor--;\n  for(tmp = cursor+1 ;  ;){\n    str.erase(str.begin()+tmp);\n    len--;\n    if(str[tmp] == ' ') space++;\n    if(space == 1 || tmp >= len) return;\n  }\n}\n\nint main(){\n  int T;\n  cin >> T;\n  cin.ignore();\n  while(T--){\n    getline(cin, str);\n    len = str.size()-1;\n    if(len < 0) len = 0;\n    if(len == 0) str.clear();\n    cursor = 0;\n    int N;\n    cin >> N;\n    cin.ignore();\n    while(N--){\n      getline(cin, op);\n      if(op == \"forward char\") forward_char();\n      else if(op == \"forward word\") forward_word();\n      else if(op == \"backward char\") backward_char();\n      else if(op == \"backward word\") backward_word();\n      else if(op.substr(0, 6) == \"insert\") insert_text(make_str(op));\n      else if(op == \"delete char\") delete_char();\n      else if(op == \"delete word\") delete_word();\n      /*\n      cout << op << endl;\n      for(int i = 0 ; i <= len ; i++){\n\tif(i == cursor) cout << str[i] << '^';\n\telse cout << str[i];\n      }\n      cout << endl;\n      printf(\"cursor = %d\\n\", cursor);\n      printf(\"len = %d\\n\", len);\n      cout << endl;*/\n    }\n    \n    if(len == 0){\n      cout << '^' << endl;\n      continue;\n    }\n    for(int i = 0 ; i <= len ; i++){\n      if(i == cursor) cout << str[i] << '^';\n      else cout << str[i];\n    }\n    cout << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#define INF 0x3f3f3f3f\n#include <cstdio>\n#include <iostream>\n#include <sstream>\n#include <cmath>\n#include <cstdlib>\n#include <algorithm>\n#include <queue>\n#include <stack>\n#include <limits>\n#include <map>\n#include <string>\n#include <cstring>\n#include <set>\n#include <deque>\n#include <bitset>\n#include <list>\n#include <cctype>\n#include <utility>\n \nusing namespace std;\n \ntypedef long long ll;\ntypedef pair <int,int> P;\ntypedef pair <int,P > PP;\n \nint tx[] = {0,1,0,-1};\nint ty[] = {-1,0,1,0};\n \nstatic const double EPS = 1e-8;\n\nclass Editor{\nprivate:\n  string text;\n  int cursor;\npublic:\n  Editor(const string& _text) : text(_text),cursor(0) {}\n  void forward_char(){\n    if(text.size() > cursor) cursor++;\n  }\n  void forward_word(){\n    int tmp = text.size();\n    for(int pos=cursor;pos+1<text.size();pos++){\n      if(text[pos] != ' '\n\t && text[pos + 1] == ' '){\n\ttmp = pos + 1;\n\tbreak;\n      }\n    }\n    cursor = tmp;\n  }\n  void backward_char(){\n    if(0 < cursor) cursor--;    \n  }\n  void backward_word(){\n    int tmp = 0;\n\n    for(int pos=cursor-1;pos-1>=0;pos--){\n      if(text[pos] != ' '\n\t && text[pos - 1] == ' '){\n\ttmp = pos;\n\tbreak;\n      }\n    }\n    cursor = tmp;\n  }\n  void insert(const string& str){\n    string middle = str;\n    string front = \"\";\n    string rear = \"\";\n    if(cursor > 0) front = text.substr(0,cursor);\n    if(cursor < text.size()) rear = text.substr(cursor,text.size()-cursor);\n\n    cursor = front.size() + middle.size();\n    text = front + middle + rear;\n  }\n  void delete_char(){\n    string front = \"\";\n    string rear = \"\";\n    if(cursor > 0) front = text.substr(0,cursor);\n    if(cursor+1 < text.size()) rear = text.substr(cursor+1,text.size()-(cursor+1));\n    text = front + rear;\n  }\n  void delete_word(){\n    int delete_first = cursor;\n    int delete_last = text.size();\n\n    if(text[cursor] == ' '){\n      bool update = false;\n      for(int pos=cursor;pos<text.size();pos++){\n\tif(text[pos] != ' '){\n\t  update = true;\n\t  break;\n\t}\n      }\n      if(!update) return;\n\n      for(int pos=cursor;pos<text.size();pos++){\n\tif(text[pos] != ' '\n\t   && text[pos+1] == ' '){\n\t  delete_last = pos;\n\t  break;\n\t}\n      }\n    }\n    else{\n      for(int pos=cursor;pos<text.size();pos++){\n\tif(text[pos] == ' '){\n\t  delete_last = pos - 1;\n\t  break;\n\t}\n      }\n    }\n\n    string front = \"\";\n    string rear = \"\";\n    if(delete_first > 0){\n      front = text.substr(0,delete_first);\n    }\n    if(delete_last < text.size()){\n      rear = text.substr(delete_last+1,text.size()-delete_last + 1);\n    }\n    text = front + rear;\n    // cout << front << \"*****\" << endl;\n    // cout << rear << \"*****\" << endl;\n  }\n  void print_text(){\n    string front = \"\";\n    string rear = \"\";\n    if(cursor > 0) front = text.substr(0,cursor);\n    if(cursor < text.size()) rear = text.substr(cursor,text.size()-cursor);\n    cout << front << \"^\" << rear << endl;\n  }\n};\n\nint main(){\n  string total_test_cases_str;\n\n  while(getline(cin,total_test_cases_str)){\n    stringstream ttc_ss;\n    ttc_ss << total_test_cases_str;\n    int total_test_cases;\n    ttc_ss >> total_test_cases;\n\n    for(int test_idx=0;test_idx<total_test_cases;test_idx++){\n      string text;\n      getline(cin,text);\n      \n      Editor editor(text);\n\n      string total_commands_str;\n\n      getline(cin,total_commands_str);\n      stringstream total_commands_ss;\n      total_commands_ss << total_commands_str;\n      \n      int total_commands;\n      total_commands_ss >> total_commands;\n\n      for(int command_idx=0;command_idx < total_commands; command_idx++){\n\tstring fr_str;\n\n\tgetline(cin,fr_str);\n\n\tstring front=\"\";\n\tstring rear=\"\";\n\tint str_pos = 0;\n\tfor(int i=0;i<fr_str.size();i++){\n\t  if(fr_str[i] == ' '){\n\t    str_pos = i+1;\n\t    break;\n\t  }\n\t  front += fr_str[i];\n\t}\n\tfor(int i=str_pos;i<fr_str.size();i++){\n\t  rear += fr_str[i];\n\n\t  if(i==str_pos && fr_str[i] == '\"') {\n\t    //nothing todo\n\t  }\n\t  else if(fr_str[i] == '\"'){\n\t    break;\n\t  }\n\t}\n\n\tif(front == \"forward\"){\n\t  if(rear == \"char\"){\n\t    editor.forward_char();\n\t    // editor.print_text();\n\t  }\n\t  else if(rear == \"word\"){\n\t    editor.forward_word();\n\t    // editor.print_text();\n\t  }\n\t}\n\telse if(front == \"backward\"){\n\t  if(rear == \"char\"){\n\t    editor.backward_char();\n\t    // editor.print_text();\n\t  }\n\t  else if(rear == \"word\"){\n\t    editor.backward_word();\n\t    // editor.print_text();\n\t  }\n\t}\n\telse if(front == \"insert\"){\n\t  editor.insert(rear.substr(1,rear.size()-2));\n\t  // editor.print_text();\n\t}\n\telse if(front == \"delete\"){\n\t  if(rear == \"char\"){\n\t    editor.delete_char();\n\t    // editor.print_text();\n\t  }\n\t  else if(rear == \"word\"){\n\t    editor.delete_word();\n\t    // editor.print_text();\n\t  }\n\t}\n      }\n      editor.print_text();\n    }\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cmath>\n#include <string>\n\nusing namespace std;\nint main(){\n\tint n,r;\n\tcin >> n;\n\tcin.ignore();\n\twhile(n--){\n\t\tint cur = 0;\n\t\tstring text, command;\n\t\tgetline(cin, text);\n\t\tint len = text.size();\n\t\tcin\t>> r;\n\t\tcin.ignore();\n\t\twhile(r--){\n\t\t\tgetline(cin, command);\n\t\t\tif(command == \"forward char\"){\n\t\t\t\tcur=min(len, cur+1);\n\t\t\t}else if(command == \"forward word\"){\n\t\t\t\tfor(;cur<len && text[cur] == ' '; cur++);\n\t\t\t\tfor(;cur<len && text[cur] != ' '; cur++);\n\t\t\t}else if(command == \"backward char\"){\n\t\t\t\tcur=max(0, cur-1);\n\t\t\t}else if(command == \"backward word\"){\n\t\t\t\tfor(;cur>0 && text[cur-1] == ' '; cur--);\n\t\t\t\tfor(;cur>0 && text[cur-1] != ' '; cur--);\n\t\t\t}else if(command == \"delete char\"){\n\t\t\t\tif(cur>=len) continue;\n\t\t\t\ttext.erase(text.begin()+cur);\n\t\t\t\tlen--;\n\t\t\t}else if(command == \"delete word\"){\n\t\t\t\tint s = cur;\n\t\t\t\tfor(;s<len && text[s] == ' '; s++){\n\t\t\t\t\ttext.erase(text.begin()+s);\n\t\t\t\t\tlen--;\n\t\t\t\t}\n\t\t\t\tfor(;s<len && text[s] != ' ';){\n\t\t\t\t\ttext.erase(text.begin()+s);\n\t\t\t\t\tlen--;\n\t\t\t\t}\n\t\t\t}else if(command.find(\"insert\")!=command.npos){\n\t\t\t\tstring ins;\n\t\t\t\tint s = command.find('\"');\n\t\t\t\tint t = command.find('\"',s+1);\n\t\t\t\tins = command.substr(s+1,t-s-1);\n\t\t\t\ttext.insert(cur,ins);\n\t\t\t\tlen+=t-s-1;\n\t\t\t\tcur+=t-s-1;\n\t\t\t}\n\t\t\t\n\t\t}\n\t\ttext.insert(text.begin()+cur,'^');\n\t\tcout << text << endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<cstring>\n#include<algorithm>\n\n#define rep(i,n) for(int i=0;i<(n);i++)\n\nusing namespace std;\n\nint main(){\n\tint T; scanf(\"%d%*c\",&T);\n\twhile(T--){\n\t\tchar s[1024]; fgets(s,200,stdin);\n\t\tint len=strlen(s);\n\t\ts[--len]='\\0';\n\n\t\tint cur=0;\n\t\tint m; scanf(\"%d\",&m);\n\t\twhile(m--){\n\t\t\tchar cmd[9]; scanf(\"%s \",cmd);\n\t\t\tchar arg[200]; fgets(arg,200,stdin); arg[strlen(arg)-1]='\\0';\n\n\t\t\tif(cmd[0]=='f' && arg[0]=='c'){ // forward char\n\t\t\t\tcur=min(cur+1,len);\n\t\t\t}\n\t\t\telse if(cmd[0]=='f' && arg[0]=='w'){ // forward word\n\t\t\t\tfor(;cur<len;cur++) if(s[cur]!=' ') break;\n\t\t\t\tfor(;cur<len;cur++) if(s[cur]==' ') break;\n\t\t\t}\n\t\t\telse if(cmd[0]=='b' && arg[0]=='c'){ // backward char\n\t\t\t\tcur=max(cur-1,0);\n\t\t\t}\n\t\t\telse if(cmd[0]=='b' && arg[0]=='w'){ // backward word\n\t\t\t\tfor(;cur>0;cur--) if(s[cur-1]!=' ') break;\n\t\t\t\tfor(;cur>0;cur--) if(s[cur-1]==' ') break;\n\t\t\t}\n\t\t\telse if(cmd[0]=='d' && arg[0]=='c'){ // delete char\n\t\t\t\tif(cur<len){\n\t\t\t\t\tfor(int i=cur;i<len;i++) s[i]=s[i+1];\n\t\t\t\t\tlen--;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(cmd[0]=='d' && arg[0]=='w'){ // delete word\n\t\t\t\tif(cur<len){\n\t\t\t\t\tint i=cur;\n\t\t\t\t\tfor(;i<len;i++) if(s[i]!=' ') break;\n\t\t\t\t\tfor(;i<len;i++) if(s[i]==' ') break;\n\t\t\t\t\trep(j,len-i+1) s[cur+j]=s[i+j];\n\t\t\t\t\tlen-=i-cur;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse{ // insert\n\t\t\t\t// \"\" ðí\n\t\t\t\tint len2=strlen(arg);\n\t\t\t\trep(i,len2-2) arg[i]=arg[i+1];\n\t\t\t\tlen2-=2;\n\t\t\t\targ[len2]='\\0';\n\n\t\t\t\tfor(int i=len;i>=cur;i--) s[i+len2]=s[i];\n\t\t\t\trep(i,len2) s[cur+i]=arg[i];\n\t\t\t\tcur+=len2;\n\t\t\t\tlen+=len2;\n\t\t\t}\n\t\t}\n\n\t\trep(i,len+1){\n\t\t\tif(i==cur) putchar('^');\n\t\t\tif(i<len) putchar(s[i]);\n\t\t\tif(i<len && s[i]=='\\n') for(;;);\n\t\t}\n\t\tputchar('\\n');\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdlib>\n#include <string>\nusing namespace std;\n\nint main()\n{\n\tint N,n,c;\n\tstring str,cmd;\n\n\tgetline(cin,cmd);\n\tN=atoi(cmd.c_str());\n\twhile(N--)\n\t{\n\t\tc=0;\n\t\tgetline(cin,str);\n\t\tgetline(cin,cmd);\n\t\tn=atoi(cmd.c_str());\n\t\twhile(n--)\n\t\t{\n\t\t\tgetline(cin,cmd);\n\t\t\tif(cmd==\"forward char\")\n\t\t\t{\n\t\t\t\tif(c<str.size()) c++;\n\t\t\t}\n\t\t\telse if(cmd==\"forward word\")\n\t\t\t{\n\t\t\t\tbool ws = false;\n\t\t\t\twhile(c<str.size())\n\t\t\t\t{\n\t\t\t\t\tif(str[c]!=' ') \n\t\t\t\t\t{\n\t\t\t\t\t\tws=true;\n\t\t\t\t\t}\n\t\t\t\t\telse if(ws)\n\t\t\t\t\t{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tc++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(cmd==\"backward char\")\n\t\t\t{\n\t\t\t\tif(0<c) c--;\n\t\t\t}\n\t\t\telse if(cmd==\"backward word\")\n\t\t\t{\n\t\t\t\tbool ws = false;\n\t\t\t\twhile(0<c)\n\t\t\t\t{\n\t\t\t\t\tif(str[c]!=' ') \n\t\t\t\t\t{\n\t\t\t\t\t\tws=true;\n\t\t\t\t\t}\n\t\t\t\t\telse if(ws)\n\t\t\t\t\t{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tc--;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(cmd==\"delete char\")\n\t\t\t{\n\t\t\t\tif(c<str.size())\n\t\t\t\tstr.erase(str.begin()+c);\n\t\t\t}\n\t\t\telse if(cmd==\"delete word\")\n\t\t\t{\n\t\t\t\tint t=c; bool ws=false;\n\t\t\t\twhile(t<str.size())\n\t\t\t\t{\n\t\t\t\t\tif(str[t]!=' ') \n\t\t\t\t\t{\n\t\t\t\t\t\tws=true;\n\t\t\t\t\t}\n\t\t\t\t\telse if(ws)\n\t\t\t\t\t{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tt++;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(ws)\n\t\t\t\t{\n\t\t\t\t\tstr.erase(str.begin()+c,str.begin()+t);\n\t\t\t\t}\n\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcmd.erase(0,8);\n\t\t\t\tcmd.erase(cmd.end()-1);\n\t\t\t\tstr.insert(c,cmd);\n\t\t\t\tc += cmd.size();\n\t\t\t}\n\t\t}\n\n\t\tstr.insert(c,\"^\");\n\t\tcout << str << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cmath>\nusing namespace std;\n\nint main()\n{\n    string bla = \"bla\";\n    cout<<bla.substr(3)<<endl;\n    int nb_cas;\n    cin>>nb_cas;\n    cin.ignore();\n    while(nb_cas--)\n    {\n        string texte;\n        getline(cin,texte);\n        int nb_op;\n        cin>>nb_op;\n        int curseur = 0;\n        for(int c=0;c<nb_op;c++)\n        {\n            string s1,s2;\n            cin>>s1;\n            cin.ignore();\n            getline(cin,s2);\n            if(s1==\"forward\"||s1==\"backward\")\n            {\n                int d = (s1==\"forward\"?1:-1);\n                if(s2==\"char\") curseur+=d;\n                else if(s2==\"word\")\n                {\n                    while(curseur>= 0 && curseur<=texte.size()&&(curseur == texte.size()||texte[curseur]==' ')) curseur+=d;\n                    while(curseur>=-0&&curseur<=texte.size()&&(curseur==texte.size()||texte[curseur]!=' '))\n                    {\n                        curseur += d;\n                    }\n                    if(s1==\"backward\") curseur++;\n                }\n                curseur = max(curseur,0);\n                curseur = min(curseur,(int)texte.size());\n            }\n            else if(s1==\"delete\")\n            {\n                if(s2==\"char\"&&curseur<texte.size())\n                {\n                    texte.erase(texte.begin()+curseur);\n                }\n                else if(s2==\"word\")\n                {\n                    int finMot = curseur;\n                    while(finMot<texte.size()&&texte[finMot]==' ') finMot++;\n                    if(finMot == texte.size()) continue;\n                    while(finMot<texte.size()&&texte[finMot]!=' ')\n                    {\n                        finMot ++;\n                    }\n                    texte = texte.substr(0,curseur)+(finMot < texte.size()?texte.substr(finMot):\"\");\n                }\n            }\n            else\n            {\n                while(s2[0]!='\"') s2=s2.substr(1);\n                while(s2[s2.size()-1]!='\"') s2 = s2.substr(s2.size()-1);\n                s2 = s2.substr(1,s2.size()-2);\n                texte = texte.substr(0,curseur)+s2+(curseur<(int)texte.size()?texte.substr(curseur):\"\");\n                curseur += s2.size();\n            }\n        }\n        cout<<texte.substr(0,curseur)+\"^\"+(curseur<(int)texte.size()?texte.substr(curseur):\"\")<<endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cmath>\n#include <string>\n\nusing namespace std;\nint main(){\n\tint n,r;\n\tcin >> n;\n\tcin.ignore();\n\twhile(n--){\n\t\tint cur = 0;\n\t\tstring text, command;\n\t\tgetline(cin, text);\n\t\tint len = text.size();\n\t\tcin\t>> r;\n\t\tcin.ignore();\n\t\twhile(r--){\n\t\t\tgetline(cin, command);\n\t\t\tif(command == \"forward char\"){\n\t\t\t\tcur=min(len, cur+1);\n\t\t\t}else if(command == \"forward word\"){\n\t\t\t\tfor(;cur<len && text[cur] == ' '; cur++);\n\t\t\t\tfor(;cur<len && text[cur] != ' '; cur++);\n\t\t\t}else if(command == \"backward char\"){\n\t\t\t\tcur=max(0, cur-1);\n\t\t\t}else if(command == \"backward word\"){\n\t\t\t\tfor(;cur>0 && text[cur-1] == ' '; cur--);\n\t\t\t\tfor(;cur>0 && text[cur-1] != ' '; cur--);\n\t\t\t}else if(command == \"delete char\"){\n\t\t\t\tif(cur>=len) continue;\n\t\t\t\ttext.erase(text.begin()+cur);\n\t\t\t\tlen--;\n\t\t\t}else if(command == \"delete word\"){\n\t\t\t\tint s = cur;\n\t\t\t\tfor(;s<len && text[s] == ' ';){\n\t\t\t\t\ttext.erase(text.begin()+s);\n\t\t\t\t\tlen--;\n\t\t\t\t}\n\t\t\t\tfor(;s<len && text[s] != ' ';){\n\t\t\t\t\ttext.erase(text.begin()+s);\n\t\t\t\t\tlen--;\n\t\t\t\t}\n\t\t\t}else if(command.find(\"insert\")!=command.npos){\n\t\t\t\tstring ins;\n\t\t\t\tint s = command.find('\"');\n\t\t\t\tint t = command.find('\"',s+1);\n\t\t\t\tins = command.substr(s+1,t-s-1);\n\t\t\t\ttext.insert(cur,ins);\n\t\t\t\tlen+=t-s-1;\n\t\t\t\tcur+=t-s-1;\n\t\t\t}\n\t\t}\n\t\ttext.insert(text.begin()+cur,'^');\n\t\tcout << text << endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream> \n#include <sstream> \n#include <iomanip> \n#include <algorithm> \n#include <cmath> \n#include <string> \n#include <vector> \n#include <list> \n#include <queue> \n#include <stack> \n#include <set> \n#include <map> \n#include <bitset> \n#include <numeric> \n#include <climits> \n#include <cfloat> \nusing namespace std; \n\nint main()\n{\n    int n;\n    cin >> n;\n    cin.ignore();\n\n    while(--n >= 0){\n        string s;\n        getline(cin, s);\n        int m;\n        cin >> m;\n        cin.ignore();\n\n        list<char> text(s.begin(), s.end());\n        list<char>::iterator it = text.begin();\n\n        while(--m >= 0){\n            string ope;\n            getline(cin, ope);\n\n            if(ope == \"forward char\"){\n                if(it != text.end())\n                    ++ it;\n            }else if(ope == \"backward char\"){\n                if(it != text.begin())\n                    -- it;\n            }else if(ope == \"delete char\"){\n                if(it != text.end())\n                    it = text.erase(it);\n            }else if(ope == \"forward word\"){\n                while(it != text.end() && (*it) == ' ')\n                    ++ it;\n                while(it != text.end() && (*it) != ' ')\n                    ++ it;\n            }else if(ope == \"backward word\"){\n                if(text.size() > 0 && it != text.begin()){\n                    -- it;\n                    while(it != text.begin() && (*it) == ' ')\n                        -- it;\n                    while(it != text.begin() && (*it) != ' ')\n                        -- it;\n                    if((*it) == ' ')\n                        ++ it;\n                }\n            }else if(ope == \"delete word\"){\n                list<char>::iterator it2 = it;\n                while(it2 != text.end() && (*it2) == ' ')\n                    ++ it2;\n                if(it2 != text.end()){\n                    it = text.erase(it, it2);\n                    while(it != text.end() && (*it) != ' ')\n                        it = text.erase(it);\n                }\n            }else{\n                for(unsigned i=8; i<ope.size()-1; ++i){\n                    it = text.insert(it, ope[i]);\n                    ++ it;\n                }\n            }\n        }\n\n        cout << string(text.begin(), it) << '^' << string(it, text.end()) << endl;\n    }\n    \n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <cstdlib>\nusing namespace std;\n\nchar space()\n{\n  char c;\n  while (isblank(c = getchar()) || c == '\\n');\n  return c;\n}\n\nchar _space()\n{\n  char c;\n  while (isblank(c = getchar()));\n  return c;\n}\n\nstring nextStr()\n{\n  char c = space();\n  string str = \"\";\n  do {\n    str += c;\n  }  while (!isblank(c = getchar()) && (c != '\\n'));\n  return str;\n}\n\nstring nextLine()\n{\n  string str;\n  char c;\n  c = _space();\n  if (c == '\\n') return str;\n  do {\n    str+=c;\n  } while ((c = getchar()) != '\\n');\n\n  return string(str);\n}\n\nstring nextQuote()\n{\n  space();\n  char c;\n  string str = \"\";\n  while ((c = getchar()) != '\"') {\n    str += c;\n  }\n  return str;\n}\n\nint main()\n{\n  int nTest;  \n  scanf(\"%d \",&nTest);\n  //cout << nTest << endl;\n    \n  for (int testIdx = 0; testIdx < nTest; testIdx++) {\n    string text = nextLine();\n    //cout << text << endl;\n    //    cin.ignore();\n\n    int N;\n    scanf(\" %d \", &N);\n    //cout << \"N = \" << N << endl;\n    //cin.ignore();\n    int cur = 0;\n    for (int i = 0; i < N; i++) {\n      string cmd, arg;\n      cmd = nextStr();\n      if (cmd == \"forward\") {\n\targ = nextStr();\n\tif (arg == \"char\") {\n\t  if (cur < text.size()) {\n\t    cur++;\n\t  }\n\t} else {\t\n\t  while (cur < text.size() && isblank(text[cur])) {cur++;}\n\t  while (cur < text.size() && !isblank(text[cur])) {cur++;}\n\t}\n      } else if (cmd == \"backward\") {\n\targ = nextStr();\n\tif (arg == \"char\") {\n\t  if (cur > 0) {\n\t    cur--;\n\t  }\n\t} else {\t  \n\t  while (cur > 0 && !isblank(text[cur])) {cur--;}\n\t  while (cur > 0 && isblank(text[cur])) {cur--;}\n\t}\n      } else if (cmd == \"insert\") {\n\targ = nextQuote();\n\ttext.insert(text.begin() + cur, arg.begin(), arg.end());\n\tcur += arg.size();\n      } else if (cmd == \"delete\") {\n\targ = nextStr();\n\tif (arg == \"char\") {\n\t  if (cur < text.size()) {\n\t    text.erase(text.begin() + cur);\n\t  }\n\t} else {\n\t  while (cur < text.size() && isblank(text[cur])) {\n\t    text.erase(text.begin() + cur);\n\t  }\n\t  while (cur < text.size() && !isblank(text[cur])) {\n\t    text.erase(text.begin() + cur);\n\t  }\n\t  /*\n\t  */\n\t}\n      }\n      //cout << \"cmd, arg = \" << cmd << \", \" << arg << endl;\n      //cout << \"cur = \" << cur << endl;\n      //cout << text << endl;\n    }\n    for (int i = 0; i < cur; i++) {\n      cout << text[i];\n    }\n    cout << \"^\";\n    for (int i = cur; i < text.size(); i++) {\n      cout << text[i];\n    }\n    cout << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long int uli;\nconst int mx=100+10;\nint main(){\n//   freopen(\"data.in\",\"r\",stdin);\n   ios_base::sync_with_stdio(0);\n   int t,q;\n   string s,op;\n   char ch;\n   cin>>t;\n   while(t--){\n      getline(cin,s);\n      getline(cin,s);\n      cin>>q;\n      int ix=0;\n      while(q--){\n         cin>>op;\n         if(op[0]=='f'){\n            cin>>op;\n            if(op[0]=='c')ix=min(ix+1,int(s.size()));\n            else{\n               while(ix<int(s.size()) && s[ix]==' ')ix++;\n               while(ix<int(s.size())&&s[ix]!=' ')ix++;\n            }\n         }\n         else if(op[0]=='b'){\n            cin>>op;\n            if(op[0]=='c')ix=max(0,ix-1);\n            else{\n               while(ix-1>=0 && s[ix-1]==' ')ix--;\n               while(ix-1>=0 && s[ix-1]!=' ')ix--;\n            }            \n         }\n         else if(op[0]=='i'){\n            string x=\"\";\n            while(cin>>ch,ch!='\"') {}\n            while(cin>>noskipws>>ch,ch!='\"') x+=string(1,ch);                                    \n            s.insert(ix,x);\n            ix=ix+int(x.size());\n            cin>>skipws;\n         }\n         else if(op[0]=='d'){\n            cin>>op;\n            if(op[0]=='c')s.erase(ix,1);\n            else if(op[0]=='w'){\n               int j=ix;\n               while(j<int(s.size()) && s[j]==' ')j++;\n               while(j<int(s.size()) && s[j]!=' ')j++;\n               j--;\n               s.erase(ix,j-ix+1);\n            }\n         }\n         \n//         cout<<s.substr(0,ix)<<\"^\"<<s.substr(ix)<<'\\n';\n      }\n      cout<<s.substr(0,ix)<<\"^\"<<s.substr(ix)<<'\\n';\n   }\n   return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <string>\n#include <sstream>\nusing namespace std;\n \nint main() {\n  int Tc;\n  cin >> Tc;\n  cin.ignore();\n  for(int tc = 0; tc < Tc; ++tc) {\n    string text;\n    int M;\n    int cursor = 0;\n\n    getline(cin, text);\n    cin >> M;\n    cin.ignore();\n\n    while(M--) {\n\n      string a, b;\n      {\n        string line;\n        getline(cin, line);\n        for(int i = 0; i < line.size(); ++i) {\n          if(line[i] == ' ') {\n            a = line.substr(0, i);\n            b = line.substr(i+1);\n            break;\n          }\n        }\n      }\n\n      int N = text.size();\n      if(0) {\n\n      } else if(a == \"forward\" && b == \"char\") {\n\n        cursor = min(cursor+1, N);\n\n      } else if(a == \"forward\" && b == \"word\") {\n\n        for(; cursor < N && text[cursor] == ' '; ++cursor);\n        for(; cursor < N && text[cursor] != ' '; ++cursor);\n\n      } else if(a == \"backward\" && b == \"char\") {\n\n        cursor = max(cursor-1, 0);\n\n      } else if(a == \"backward\" && b == \"word\") {\n\n        for(; cursor > 0 && text[cursor-1] == ' '; --cursor);\n        for(; cursor > 0 && text[cursor-1] != ' '; --cursor);\n\n      } else if(a == \"insert\") {\n\n        b = b.substr(1, b.size()-2);\n        text.insert(cursor, b);\n        cursor += b.size();\n\n      } else if(a == \"delete\" && b == \"char\") {\n\n        if(cursor < N) text.erase(cursor, 1);\n\n      } else if(a == \"delete\" && b == \"word\") {\n\n        int begin = cursor;\n        int end = cursor;\n        for(; end < N && text[end] == ' '; ++end);\n        for(; end < N && text[end] != ' '; ++end);\n        if(begin < N && end-begin > 0) text.erase(begin, end-begin);\n\n      }\n\n    }\n    cout << text.substr(0, cursor) << \"^\" << text.substr(cursor) << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<vector>\nusing namespace std;\n\nint main(){\n  int n;\n  cin >>n;\n  cin.ignore();\n  for(int i=0;i<n;i++){\n    string str;\n    int cn,pos;\n    if(!getline(cin,str)){\n      str = \"\";\n    }\n    cin >> cn;\n    pos = 0;\n    for(int j=0;j<cn;j++){\n      string command,target;\n      char ch;\n      cin >> command;\n      getline(cin,target);\n      target.erase(0,1);\n      if(command == \"forward\"){\n        if(pos<str.size()){\n          if(target == \"word\"){\n            do{\n              pos++;\n            }while(pos<str.size()&&str[pos]!=' ');\n          }else{\n            pos++;\n          }\n        }\n      }else if(command == \"delete\"){\n        if(str.size()!=0&&pos!=str.size()){\n          if(target == \"word\"){\n            do{\n              str.erase(pos,1);\n            }while(pos<str.size()&&str[pos]!=' ');\n            str.erase(pos,1);\n          }else{\n            str.erase(pos,1);\n          }\n        }\n      }else if(command == \"backward\"){\n        if(pos>0){\n          if(target == \"word\"){\n            do{\n              pos--;\n            }while(pos>0&&str[pos]!=' ');\n          }else{\n            pos--;\n          }\n        }\n      }else if(command == \"insert\"){\n        target = target.substr(1,target.size()-2);\n        str.insert(pos,target);\n        pos += target.size();\n      }\n    }\n    str.insert(pos,\"^\");\n    cout << str << endl;\n  }\n  \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <map>\nusing namespace std;\n\npair<string,int> operation(string op,string opa,string buffer,int cur) {\n    if(op == \"forward\") {\n        if(opa == \"word\") {\n            while(cur < buffer.length() && buffer[cur] == ' ') cur++;\n            while(cur < buffer.length() && buffer[cur] != ' ') cur++;\n        }else{\n            cur++;\n            cur = min(cur,(int)buffer.length());\n        }\n    }else if(op == \"backward\") {\n        if(opa == \"word\") {\n            while(cur >= 0 && buffer[cur] == ' ') cur--;\n            while(cur >= 0 && buffer[cur] != ' ') cur--;\n            if(cur >= 0 && buffer[cur] == ' ') cur++;\n            cur = max(0,cur);\n        }else{\n            cur--;\n            cur = max(0,cur);\n        }\n    }else if(op == \"delete\") {\n        if(opa == \"word\") {\n            int pc = cur;\n\n            for(int i=cur; i<buffer.length(); ++i) {\n                if(buffer[i] != ' ') break;\n                // no word exists in the right\n                if(i == buffer.length()-1) {\n                    return make_pair(buffer,cur);\n                }\n            }\n\n            while(cur < buffer.length() && buffer[cur] == ' ') cur++;\n            while(cur < buffer.length() && buffer[cur] != ' ') cur++;\n            buffer = buffer.substr(0,pc) + buffer.substr(cur);\n            cur = pc;\n        }else{\n            if(cur < buffer.length()) {\n                buffer = buffer.substr(0,cur)\n                    + ((cur==buffer.length()-1)?\"\":buffer.substr(cur+1));\n            }\n        }\n    }else if(op == \"insert\") {\n        buffer = buffer.substr(0,cur) + opa + buffer.substr(cur);\n        cur += opa.length();\n    }\n\n    return make_pair(buffer,cur);\n}\n\nint main() {\n    int t,n;\n    cin>>t;\n    string buffer,op,opa;\n    string lastop = \"nop\";\n    for(int i=0; i<t; ++i) {\n        if(lastop != \"insert\") cin.ignore();\n        getline(cin,buffer);\n//        cout<<buffer<<endl;\n        cin>>n;\n        int cur = 0;\n\n        for(int j=0; j<n; ++j) {\n            cin>>op;\n            lastop = op;\n            if(op != \"insert\") {\n                cin>>opa;\n            }else{\n                getline(cin,opa);\n                for(int i=0; i<opa.length(); ++i)\n                    if(opa[i] == '\\\"') {\n                        opa = opa.substr(i+1);\n                        break;\n                    }\n                opa = opa.substr(0,opa.length()-1);\n            }\n            pair<string,int> ret = operation(op,opa,buffer,cur);\n            cur = ret.second;\n            buffer = ret.first;\n//            cout<<cur<<\" \"<<buffer<<endl;\n        }\n\n        for(int i=0; i<buffer.length(); ++i) {\n            if(i == cur) cout<<\"^\";\n            cout<<buffer[i];\n        }\n        if(cur == buffer.length()) cout<<\"^\";\n\n        cout<<endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "using namespace std;\n#include <iostream>\n#include <vector>\n#include <stdlib.h>\n#include <string.h>\n#include <string>\n\n#define REP(i, n) for(int i=0; i<n; i++)\n\ntypedef vector<int> VI;\n\nint T, N;\nstring text;\nstring cmd;\nstring tmp;\n\nvoid execute(string& text, string cmd)\n{\n\tif(cmd == \"forward char\"){\n\t\tREP(i, text.size())\n\t\t{\n\t\t\tif(text[i] == '^')\n\t\t\t{\n\t\t\t\tif(i != text.size()-1)\n\t\t\t\t{\n\t\t\t\t\ttext[i] = text[i+1];\n\t\t\t\t\ttext[i+1] = '^';\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse if(cmd ==\"forward word\")\n\t{\n\t\tint iCaret = -1;\n\t\tREP(i, text.size())\n\t\t{\n\t\t\tif(text[i] == '^')\n\t\t\t{\n\t\t\t\tiCaret = i;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif(text[i] == ' ' && iCaret != -1)\n\t\t\t{\n\t\t\t\tbool is_blank_neighbor = false;\n\t\t\t\tif(i != 0)\n\t\t\t\t{\n\t\t\t\t\tif(text[i-1] == ' ' || text[i-1] == '^')\n\t\t\t\t\t{\n\t\t\t\t\t\tis_blank_neighbor = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif(!is_blank_neighbor)\n\t\t\t\t{\n\t\t\t\t\ttext.insert(text.begin()+i, '^');\n\t\t\t\t\ttext.erase(text.begin()+iCaret);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(i == text.size()-1 && iCaret != -1)\n\t\t\t{\n\t\t\t\ttext.insert(text.end(), '^');\n\t\t\t\ttext.erase(text.begin()+iCaret);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\telse if(cmd == \"backward char\")\n\t{\n\t\tREP(i, text.size())\n\t\t{\n\t\t\tif(text[i] == '^')\n\t\t\t{\n\t\t\t\tif(i != 0)\n\t\t\t\t{\n\t\t\t\t\ttext[i] = text[i-1];\n\t\t\t\t\ttext[i-1] = '^';\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse if(cmd == \"backward word\")\n\t{\n\t\tint iCaret = -1;\n\t\tfor(int i=text.size()-1; i>=0; i--)\n\t\t{\n\t\t\tif(text[i] == '^')\n\t\t\t{\n\t\t\t\tiCaret = i;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif(text[i] == ' ' && iCaret != -1)\n\t\t\t{\n\t\t\t\tbool is_blank_neighbor = false;\n\t\t\t\tif(i != text.size()-1)\n\t\t\t\t{\n\t\t\t\t\tif(text[i+1] == ' ' || text[i+1] == '^')\n\t\t\t\t\t{\n\t\t\t\t\t\tis_blank_neighbor = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif(!is_blank_neighbor)\n\t\t\t\t{\n\t\t\t\t\ttext.erase(text.begin() + iCaret);\n\t\t\t\t\ttext.insert(text.begin() + i+1, '^');\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(i == 0 && iCaret != -1)\n\t\t\t{\n\t\t\t\ttext.erase(text.begin() + iCaret);\n\t\t\t\ttext.insert(text.begin(), '^');\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\telse if(cmd == \"delete char\")\n\t{\n\t\tREP(i, text.size())\n\t\t{\n\t\t\tif(text[i] == '^')\n\t\t\t{\n\t\t\t\tif(i != text.size()-1)\n\t\t\t\t{\n\t\t\t\t\ttext.erase(text.begin() + i+1);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse if(cmd == \"delete word\")\n\t{\n\t\tint first = 0;\n\t\tint last = 0;\n\t\tREP(i, text.size())\n\t\t{\n\t\t\tif(text[i] == '^')\n\t\t\t{\n\t\t\t\tfirst = i;\n\t\t\t}\n\t\t\t\n\t\t\tif((text[i] == ' ' || i == text.size()-1) && first != 0)\n\t\t\t{\n\t\t\t\tif(i != 0)\n\t\t\t\t{\n\t\t\t\t\tif(text[i-1] == ' ' || text[i-1] == '^')\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttext.erase(text.begin()+first+1, text.begin()+i);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tbool is_insert = true;\n\t\tstring str_insert = \"insert\";\n\t\tREP(i, str_insert.size())\n\t\t{\n\t\t\tif(str_insert[i] != cmd[i])\n\t\t\t{\n\t\t\t\tis_insert = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif(is_insert)\n\t\t{\n\t\t\tstring word_insert = string(cmd, str_insert.size()+2, cmd.size()-str_insert.size()-3);\n\t\t\t\n\t\t\tREP(i, text.size())\n\t\t\t{\n\t\t\t\tif(text[i] == '^')\n\t\t\t\t{\n\t\t\t\t\ttext.insert(i, word_insert);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main()\n{\n\tgetline(cin, tmp);\n\tT = atoi(tmp.c_str());\n\n\tREP(t, T)\n\t{\n\t\tgetline(cin, text);\n\t\ttext = \"^\" + text;\n\t\t//cout << text << endl;\n\n\t\tgetline(cin, tmp);\n\t\tN = atoi(tmp.c_str());\n\t\tREP(n, N)\n\t\t{\n\t\t\tgetline(cin, cmd);\n\t\t\texecute(text, cmd);\n\t\t}\n\t\tcout << text << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#define S_N 1010\nusing namespace std;\n\nint dataN, cmdN;\nstring text, cmd1,cmd2;\nchar s[S_N];\nint pos, index;\n\nvoid pr(){\n  string s1 = text.substr(0,pos);\n  string s2=\"\";\n\n  if( pos<text.length() )\n    s2 = text.substr(pos);\n\n  cout << s1<< \"^\" << s2 << endl;\n}\n\nint main(){\n\n  cin >> dataN;\n  fgets( s, S_N, stdin ); // üsÇÝÝ\n  for( int loop=0;loop<dataN;loop++ ){\n    fgets( s, S_N, stdin );\n    text=s;\n    text = text.substr( 0,text.length()-1 );\n\n    pos=0;\n    cin >> cmdN;\n    for( int cmdL=0;cmdL<cmdN;cmdL++ ){\n      cin >> cmd1 ;\n      fgets( s,S_N,stdin );      cmd2=s;\n      // æªÌXy[XÆöÌüsðí\n      cmd2 = cmd2.substr( 1,cmd2.length()-2 );\n\n      if( cmd1==\"forward\" ){\n\tif( cmd2==\"char\" ){\n\t  if( pos<text.length() ) pos++;\n\t}else{\n\t  // wordÌÅãöÖÚ® (space ðw·æ¤ÉÚ®)\n\t  if( pos<text.length() ){\n\t    if( text[pos]==' ' ){\n\t      while( pos<text.length() && text[pos]==' ' )\n\t\t++pos;\n\t    }\n\t    while( pos<text.length() && text[pos]!=' ' )\n\t      ++pos;\n\t  }\n\t}\n      }else if( cmd1==\"backward\" ){\n\tif( cmd2==\"char\" ){\n\t  if( pos>0 ) pos--;\n\t}else{\n\t  // word ÌæªÖÚ®\n\t  if( pos>0 ){\n\t    if( text[pos]==' '){\n\t      while( pos>0 && text[pos]==' ' )\n\t\t--pos;\n\t    }\n\t    while( pos>0 && text[pos]!=' ' )\n\t      --pos;\n\t    if( pos>0 )\n\t      ++pos;\n\t  }\n\t}\n      }else if( cmd1==\"insert\" ){\n\tif( cmd2.length()>2 ){ // cmd2==\"\" ÅÍÈ¢\n\t  cmd2 = cmd2.substr( 1,cmd2.length()-2 );\n\t  string s1=text.substr(0,pos), s2=\"\";\n\t  if( pos<text.length() )\n\t    s2=text.substr(pos);\n\t  text = s1 + cmd2 + s2;\n\t  pos += cmd2.length();\n\t}\n      }else if( cmd1==\"delete\" ){\n\tif( cmd2==\"char\" ){\n\t  if( pos<text.length() ){\n\t    string s1=text.substr(0,pos), s2=\"\";\n\t    if( pos+1<text.length() )\n\t      s2=text.substr(pos+1);\n\t    text = s1 + s2;\n\t  }\n\t}else{\n\t  if( pos<text.length() ){\n\t    string s1 = text.substr(0,pos), s2=\"\";\n\t    int p=pos; //s2ÌæªÌ¶ðw·æ¤É·é.\n\t    if( text[p]==' ' ){\n\t      while( p<text.length() && text[p]==' ' )\n\t\tp++;\n\t    }\n\t    while( p<text.length() && text[p]!=' ' )\n\t      p++;\n\t    if( p<text.length() )\n\t      s2=text.substr( p );\n\t    text = s1 + s2;\n\t  }\n\t  /*\n\t  int p=pos;\n\t  if( p<text.length() && text[p]==' ' ) p++;\n\t  while( p<text.length() && text[p]!=' ' )\n\t    ++p;\n\t  string s1=text.substr(0,pos), s2=\"\";\n\t  if( p!=text.length() )\n\t    s2 = text.substr( p );\n\t  text = s1 + s2;\n\t  */\n\t}\n      }\n    }\n    pr();\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nvoid setPos(string &buff,int &pos){\n    for(int i = 0; i < buff.size(); i++){\n        if(buff[i]=='^'){\n            pos=i;\n            return;\n        }\n    }\n}\n\nint main(){\n    int n;\n    cin>>n;\n    string gb;\n    getline(cin,gb);\n    while(n--){\n        string buff;\n        getline(cin,buff);\n        int m;\n        cin>>m;\n        getline(cin,gb);\n        int pos=0;\n        buff='^'+buff;\n        while(m--){\n            string op;\n            getline(cin,op);\n            if(op==\"forward char\"){\n                if(pos!=buff.size()-1){\n                    swap(buff[pos],buff[pos+1]);\n                    pos++;\n                    setPos(buff,pos);\n                }\n            }\n            else if(op==\"forward word\"){\n                // ツ右ツづ可閉カツ篠堋づーツ探ツつオツづ可つ「ツつォツ、ツ個ゥツづつつゥツづつスツづァツつサツづ個閉カツ篠堋療アツづ個催渉可づ個暗環置ツづ慊づカツーツソツδ仰づーツ暗堋督ョ\n                if(pos!=buff.size()-1){\n                    int initPos=pos;\n                    pos++;\n                    while(pos<buff.size()&&buff[pos]==' ')pos++;\n                    while(pos<buff.size()&&buff[pos]!=' ')pos++;\n                    buff=buff.substr(0,initPos)+buff.substr(initPos+1);\n                    if(pos-1==buff.size())\n                        buff+='^';\n                    else{\n                        pos--;\n                        buff=buff.substr(0,pos)+'^'+buff.substr(pos);\n                    }\n                    setPos(buff,pos);\n                }\n            }\n            else if(op==\"backward char\"){\n                if(pos!=0){\n                    swap(buff[pos],buff[pos-1]);\n                    setPos(buff,pos);\n                }\n            }\n            else if(op==\"backward word\"){\n                if(pos!=0){\n                    int initPos=pos;\n                    pos--;\n                    while(pos>=0&&buff[pos]==' ')pos--;\n                    while(pos>=0&&buff[pos]!=' ')pos--;\n                    buff=buff.substr(0,initPos)+buff.substr(initPos+1);\n                    if(pos==-1)\n                        buff='^'+buff;\n                    else{\n                        pos++;\n                        buff=buff.substr(0,pos)+'^'+buff.substr(pos);\n                    }\n                    setPos(buff,pos);\n                }\n            }\n            else if(op==\"delete char\"){\n                if(pos!=buff.size()-1)\n                    buff=buff.substr(0,pos+1)+buff.substr(pos+2);\n                setPos(buff,pos);\n            }\n            else if(op==\"delete word\"){\n                int initPos=pos;\n                if(pos!=buff.size()-1){\n                    pos++;\n                    while(pos<buff.size()&&buff[pos]==' ')pos++;\n                    while(pos<buff.size()&&buff[pos]!=' ')pos++;\n                    if(pos==buff.size())\n                        buff=buff.substr(0,pos+1);\n                    else\n                        buff=buff.substr(0,initPos+1)+buff.substr(pos);\n                    setPos(buff,pos);\n                }\n            }\n            else if(op.substr(0,6)==\"insert\"){\n                string ins=op.substr(7);\n                ins=ins.substr(1);\n                ins=ins.substr(0,ins.size()-1);\n                buff=buff.substr(0,pos)+ins+'^'+buff.substr(pos+1);\n                setPos(buff,pos);\n            }\n        }\n        cout<<buff<<endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "using namespace std;\n#include <iostream>\n#include <vector>\n#include <stdlib.h>\n#include <string.h>\n#include <string>\n\n#define REP(i, n) for(int i=0; i<n; i++)\n\ntypedef vector<int> VI;\n\nint T, N;\nstring text;\nstring cmd;\nstring tmp;\n\nvoid execute(string& text, string cmd)\n{\n\tif(cmd == \"forward char\"){\n\t\tREP(i, text.size())\n\t\t{\n\t\t\tif(text[i] == '^')\n\t\t\t{\n\t\t\t\tif(i != text.size()-1)\n\t\t\t\t{\n\t\t\t\t\ttext[i] = text[i+1];\n\t\t\t\t\ttext[i+1] = '^';\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse if(cmd ==\"forward word\")\n\t{\n\t\tint iCaret = -1;\n\t\tREP(i, text.size())\n\t\t{\n\t\t\tif(text[i] == '^')\n\t\t\t{\n\t\t\t\tiCaret = i;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif(text[i] == ' ' && iCaret != -1)\n\t\t\t{\n\t\t\t\tbool is_blank_neighbor = false;\n\t\t\t\tif(i != 0)\n\t\t\t\t{\n\t\t\t\t\tif(text[i-1] == ' ' || text[i-1] == '^')\n\t\t\t\t\t{\n\t\t\t\t\t\tis_blank_neighbor = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif(!is_blank_neighbor)\n\t\t\t\t{\n\t\t\t\t\ttext.insert(text.begin()+i, '^');\n\t\t\t\t\ttext.erase(text.begin()+iCaret);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(i == text.size()-1 && iCaret != -1)\n\t\t\t{\n\t\t\t\ttext.insert(text.end(), '^');\n\t\t\t\ttext.erase(text.begin()+iCaret);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\telse if(cmd == \"backward char\")\n\t{\n\t\tREP(i, text.size())\n\t\t{\n\t\t\tif(text[i] == '^')\n\t\t\t{\n\t\t\t\tif(i != 0)\n\t\t\t\t{\n\t\t\t\t\ttext[i] = text[i-1];\n\t\t\t\t\ttext[i-1] = '^';\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse if(cmd == \"backward word\")\n\t{\n\t\tint iCaret = -1;\n\t\tfor(int i=text.size()-1; i>=0; i--)\n\t\t{\n\t\t\tif(text[i] == '^')\n\t\t\t{\n\t\t\t\tiCaret = i;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif(text[i] == ' ' && iCaret != -1)\n\t\t\t{\n\t\t\t\tbool is_blank_neighbor = false;\n\t\t\t\tif(i != text.size()-1)\n\t\t\t\t{\n\t\t\t\t\tif(text[i+1] == ' ' || text[i+1] == '^')\n\t\t\t\t\t{\n\t\t\t\t\t\tis_blank_neighbor = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif(!is_blank_neighbor)\n\t\t\t\t{\n\t\t\t\t\ttext.erase(text.begin() + iCaret);\n\t\t\t\t\ttext.insert(text.begin() + i, '^');\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(i == 0 && iCaret != -1)\n\t\t\t{\n\t\t\t\ttext.erase(text.begin() + iCaret);\n\t\t\t\ttext.insert(text.begin(), '^');\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\telse if(cmd == \"delete char\")\n\t{\n\t\tREP(i, text.size())\n\t\t{\n\t\t\tif(text[i] == '^')\n\t\t\t{\n\t\t\t\tif(i != text.size()-1)\n\t\t\t\t{\n\t\t\t\t\ttext.erase(text.begin() + i+1);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse if(cmd == \"delete word\")\n\t{\n\t\tint first = 0;\n\t\tint last = 0;\n\t\tREP(i, text.size())\n\t\t{\n\t\t\tif(text[i] == '^')\n\t\t\t{\n\t\t\t\tfirst = i;\n\t\t\t}\n\t\t\t\n\t\t\tif((text[i] == ' ' || i == text.size()-1) && first != 0)\n\t\t\t{\n\t\t\t\tif(i != 0)\n\t\t\t\t{\n\t\t\t\t\tif(text[i-1] == ' ' || text[i-1] == '^')\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttext.erase(text.begin()+first+1, text.begin()+i);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tbool is_insert = true;\n\t\tstring str_insert = \"insert\";\n\t\tREP(i, str_insert.size())\n\t\t{\n\t\t\tif(str_insert[i] != cmd[i])\n\t\t\t{\n\t\t\t\tis_insert = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif(is_insert)\n\t\t{\n\t\t\tstring word_insert = string(cmd, str_insert.size()+2, cmd.size()-str_insert.size()-3);\n\t\t\t\n\t\t\tREP(i, text.size())\n\t\t\t{\n\t\t\t\tif(text[i] == '^')\n\t\t\t\t{\n\t\t\t\t\ttext.insert(i, word_insert);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main()\n{\n\tgetline(cin, tmp);\n\tT = atoi(tmp.c_str());\n\n\tREP(t, T)\n\t{\n\t\tgetline(cin, text);\n\t\ttext = \"^\" + text;\n\t\t//cout << text << endl;\n\n\t\tgetline(cin, tmp);\n\t\tN = atoi(tmp.c_str());\n\t\tREP(n, N)\n\t\t{\n\t\t\tgetline(cin, cmd);\n\t\t\texecute(text, cmd);\n\t\t}\n\t\tcout << text << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <cassert>\n#include <iostream>\n#include <cstdio>\n#include <vector>\n#include <algorithm>\n#include <complex>\n#include <cstring>\n#include <cstdlib>\n#include <string>\n#include <cmath>\n#include <queue>\n#include <set>\n#include <map>\nusing namespace std;\n\n#define REP(i,n) for(int i=0;i<(int)n;++i)\n#define FOR(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i)\n#define ALL(c) (c).begin(), (c).end()\nconst int INF = 1<<29;\n\nvoid forwardChar(string &s, int &c) {\n  if (c != s.size()) c++;\n}\nvoid forwardWord(string &s, int &c) {\n  for (;c<s.size()&&s[c]==' ';++c);\n  for (;c<s.size()&&s[c]!=' ';++c);\n}\nvoid backwardChar(string &s, int &c) {\n  if (c) c--;\n}\nvoid backwardWord(string &s, int &c) {\n  for (;c>0&&s[c-1]==' ';--c);\n  for (;c>0&&s[c-1]==' ';--c);\n}\nvoid insertText(string &s, int &c, const string &t) {\n  s.insert(c, t);\n  c += t.size();\n}\nvoid deleteChar(string &s, int &c) {\n  if (c != s.size()) s.erase(s.begin()+c);\n}\nvoid deleteWord(string &s, int &c) {\n  bool state = 0;\n  int p = c;\n  for (; p<s.size()&&s[p]==' '; ++p);\n  if (p==s.size()) return;\n  for (; p<s.size()&&s[p]!=' '; ++p);\n  if (p>c) s.erase(c,p-c);\n}\n\nint main() {\n  int n;\n  cin >> n;\n  cin.ignore();\n  while(n--) {\n    string text;\n    getline(cin, text);\n    string mtext;\n    getline(cin,mtext);\n    assert(mtext.size() <= 100);\n    assert(isdigit(mtext[0]));\n    int m = atoi(mtext.c_str());\n    // cout << m << endl;\n    // cout << text << endl;\n    int cursor = 0;\n    while(m--) {\n      string op1, op2;\n      cin >> op1;\n      cin.ignore();\n      getline(cin,op2);\n      // cout << op1 << \" : \" << op2 << endl;\n\n      if (op1[0] == 'f') {\n        if (op2[0] == 'c') forwardChar(text, cursor);\n        else forwardWord(text, cursor);\n      } else if (op1[0] == 'b') {\n        if (op2[0] == 'c') backwardChar(text, cursor);\n        else backwardWord(text, cursor);\n      } else if (op1[0] == 'i') {\n        assert(op2[0]=='\"' && op2[op2.size()-1]=='\"');\n        op2 = op2.substr(1, op2.size()-2);\n        insertText(text, cursor, op2);\n      } else {\n        if (op2[0] == 'c') deleteChar(text, cursor);\n        else deleteWord(text, cursor);\n      }\n      // cout << text << \" \" << cursor << endl;\n    }\n\n    text.insert(cursor, \"^\");\n    cout << text << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <iostream>\n#include <string>\n#include <cmath>\n\nusing namespace std;\n\nint main(){    \n    int n;\n    cin>>n;\n    for(int i=0;i<n;i++){\n        string buf;\n        getline(cin,buf);\n        getline(cin,buf);\n        //cout << \"buf is \" << buf << endl;\n        int pos=0;\n        int cn;\n        cin>>cn;\n        for(int k=0;k<cn;k++){\n            string command;\n            cin >> command;\n            if(command==\"forward\"){\n                cin >> command;\n                if(command==\"char\"){\n                    if(!buf.empty())\n                    pos = min(pos+1,(int)buf.size());\n                }else{\n                    // word\n                    while(buf[pos]==' ' && pos < buf.size())pos++;\n                    while(buf[pos]!=' ' && pos < buf.size())pos++;\n                }\n            }else if(command==\"backward\"){\n                cin >> command;\n                if(command==\"char\"){\n                    if(!buf.empty())\n                    pos = max(pos-1,0);\n                }else{\n                    // word\n                    while(buf[pos]==' ' && pos > 0)pos--;\n                    while(buf[pos]!=' ' && pos > 0)pos--;\n                }\n            }else if(command==\"insert\"){\n                getline(cin,command);\n                string text;\n                bool f= false;\n                for(int i=0;i<command.size();i++){\n                    if(f&&command[i]=='\\\"')break;\n                    if(f)text.push_back(command[i]);\n                    if(command[i]=='\\\"')f=true;\n                }\n                buf.insert(pos,text);\n                pos+= text.size();\n            }else {//delete\n                cin >> command;\n                if(command== \"char\"){\n                    if(!buf.empty()&&pos!=buf.size()){\n                        buf.erase(pos,1);\n                        pos = min(pos,(int)buf.size());\n                    }\n\n                }else{\n                    if(!buf.empty()){\n                        int t=pos;\n                        while(t<buf.size() && buf[t]!=' ')t++;\n                        while(t<buf.size() && buf[t]==' ')t++;\n\n                        buf.erase(pos,t-pos);\n                    }\n                }\n            }\n        }\n        //cout << buf << \"****\" << endl;\n        if(buf.empty()){\n            printf(\"^\\n\");\n        }else{\n        for(int p=0;p<buf.size();p++){\n            if(pos==p)printf(\"^\");\n            printf(\"%c\",buf[p]);\n        }\n\n        if(pos==buf.size())printf(\"^\");\n        printf(\"\\n\");}\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <algorithm>\n#include <cstdio>\n\nusing namespace std;\n\nchar buf[2000];\nstring ope;\nint pos, size;\n\nvoid print(){\n  //cout << \"\\\"\";\n  for(int i=0;i<=size;i++){\n    if(pos == i) cout << \"^\";\n    if(i >= size) break;\n    cout << buf[i];\n  }\n  //cout << \"\\\"\";\n  cout << endl;\n}\n\nvoid forwardWord(){\n  for(;pos<size;pos++){\n    if(buf[pos] != ' '){\n      for(;pos<size;pos++) if(buf[pos] == ' ') break;\n      return;\n    }\n  }\n}\n\nvoid backwardWord(){\n  if(pos == 0) return;\n  for(pos=pos-1;pos>0;pos--){\n    if(buf[pos] != ' '){\n      for(;pos>0;pos--) if(buf[pos-1] == ' ') break;\n      return;\n    }\n  }\n}\n\nvoid insert(string str){\n  if(pos == size){\n    for(int i=0;i<str.size();i++) buf[pos+i] = str[i];\n  }else{\n    for(int i=size-1;i>=0;i--){\n      buf[i+str.size()] = buf[i];\n      if(i == pos) break;\n    }\n    for(int j=0;j<str.size();j++) buf[pos+j] = str[j];\n  }\n  pos += str.size();\n  size += str.size();\n}\n\nvoid deleteChar(){\n  if(pos == size) return;\n  for(int i=pos+1;i<size;i++) buf[i-1] = buf[i];\n  size--;\n}\n\nvoid deleteWord(){\n  bool f = false;\n  int i;\n  for(i=pos;i<size;i++){\n    if(buf[i] != ' '){\n      f = true;\n      break;\n    }\n  }\n  if(!f) return;  \n  for(;i<size;i++){\n    if(buf[i] == ' ') break;\n  }\n\n  int j = pos;\n  for(int k=i;k<size;k++){\n    buf[j++] = buf[k];\n  }\n  size -= i - pos;\n}\n\nmain(){\n  int tc, n;\n  cin >> tc;\n  getchar();\n  while(tc--){\n    pos = size = 0;\n    getline(cin, ope);\n    insert(ope);\n    pos = 0;\n    cin >> n;\n    getchar();\n    for(int i=0;i<n;i++){\n      getline(cin, ope);\n      if(ope == \"forward char\" && pos + 1 < size) pos++;\n      else if(ope == \"forward word\") forwardWord();\n      else if(ope == \"backward char\" && pos) pos--;\n      else if(ope == \"backward word\") backwardWord();\n      else if(ope.substr(0, 6) == \"insert\"){\n        insert(ope.substr(8, (int)ope.size()-9));\n      }else if(ope == \"delete char\") deleteChar();\n      else if(ope == \"delete word\") deleteWord();\n      //print();\n    }\n    print();\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <climits>\n#include <cfloat>\n#include <ctime>\n#include <cassert>\n#include <map>\n#include <utility>\n#include <set>\n#include <iostream>\n#include <memory>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <functional>\n#include <sstream>\n#include <complex>\n#include <stack>\n#include <queue>\n#include <numeric>\n#include <list>\n#include <iomanip>\n#include <iterator>\n \nusing namespace std;\n \ntypedef long long ll;\ntypedef pair<int,int> Pii;\ntypedef pair<ll,ll> Pll;\n \n#define FOR(i,n) for(int i = 0; i < (n); i++)\n#define sz(c) ((int)c.size())\n\ntypedef unsigned long long ull;\nconst int INF = (int)1e8;\n\nvoid OUT_CUR(string& val,int cur) { \n#ifdef _DEBUG\n\tputs(val.c_str());\n\tFOR(i,cur) putchar(' ');\n\tputs(\"^\");\n#endif\n}\n\nvoid operate(string &val,int &cur,string op){\n\tint n = sz(val);\n\tif(op == \"forward char\"){\n\t\tif(cur != n) cur++;\n\t} else if(op == \"forward word\"){\n\t\tif(cur != n){\n\t\t\twhile(cur < n && val[cur] == ' ') cur++;\n\t\t\twhile(cur < n && val[cur] != ' ') cur++; \n\t\t}\n\t} else if(op == \"backward char\"){\n\t\tif(cur != 0) cur--;\n\t} else if(op == \"backward word\"){\n\t\tif(cur != 0){\n\t\t\twhile(cur > 0 && val[cur-1] == ' ') cur--; \n\t\t\twhile(cur > 0 && val[cur-1] != ' ') cur--; \n\t\t}\n\t} else if(op == \"delete char\"){\n\t\tif(cur != n)\n\t\t\tval.erase(cur,1);\n\t} else if(op == \"delete word\"){\n\t\tif(cur != n){\n\t\t\tint pos = 1;\n\t\t\twhile(cur + pos != n && val[cur + pos - 1] == ' ') pos++;\n\t\t\twhile(cur + pos != n && val[cur + pos - 1] != ' ') pos++;\n\t\t\tval.erase(cur,pos);\n\t\t}\n\t} else {\n\t\tstring a = op.substr(8);\n\t\ta.erase(a.end()-1);\n\t\tval.insert(val.begin() + cur,a.begin(),a.end());\n\t\tcur += a.size();\n\t}\n\n\tOUT_CUR(val,cur);\n}\n\nint main(){\n\tint t; cin>>t;\n\tstring buf;\n\tgetline(cin,buf);\n\twhile(t--){\n\t\tstring val; getline(cin,val);\n\t\tint m; cin>>m;\n\t\tgetline(cin,buf);\n\t\tvector<string> op(m); FOR(i,m) getline(cin,op[i]);\n\t\tint cur = 0;\n\t\tFOR(i,m){\n\t\t\toperate(val,cur,op[i]);\n\t\t}\n\n\t\tval.insert(val.begin() + cur,'^');\n\t\tcout << val << endl;\n\t}\n\tcin.get();\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <cstdlib>\n#include <vector>\n#include <cstdio>\n\nusing namespace std;\n\nstring txt;\nint p;\n\nvector<string> split(string str)\n{\n  vector<string> vec;\n\n  for(int i = 0; i < str.size(); ++i)\n    if(str[i] == ' '){\n      vec.push_back(str.substr(0, i));\n      if(vec[0] == \"insert\"){\n\tvec.push_back(\"\");\n\tfor(int j = i+2; j < str.size()-1; ++j) vec[1] += str[j];\n      } else {\n\tvec.push_back(str.substr(i+1));\n      }\n    }\n\n  return vec;\n}\n\nint main()\n{\n  int n, m, t;\n  string str;\n  vector<string> vec;\n\n  while(getline(cin, str)){\n    n = atoi(str.c_str());\n\n    while(n--){\n      getline(cin, txt);\n      p = 0;\n      getline(cin, str);\n      m = atoi(str.c_str());\n\n      while(m--){\n\tgetline(cin, str);\n\tvec = split(str);\n\t// cout << vec[0] << \" \" << vec[1] << endl;\n\n\tif(vec[0] == \"insert\"){\n\t  txt.insert(p, vec[1]);\n\t  p += vec[1].size();\n\t} else if(vec[0] == \"forward\"){\n\t  if(vec[1] == \"char\" && p < txt.size()){\n\t    ++p;\n\t  } else if(vec[1] == \"word\"){\n\t    while(p < txt.size() && txt[p] == ' ') ++p;\n\t    while(p < txt.size() && txt[p] != ' ') ++p;\n\t  }\n\t} else if(vec[0] == \"backward\"){\n\t  if(vec[1] == \"char\" && p > 0){\n\t    --p;\n\t  } else if(vec[1] == \"word\"){\n\t    while(p > 0 && txt[p] == ' ') --p;\n\t    while(p > 0 && txt[p] != ' ') --p;\n\t  }\n\t} else if(vec[0] == \"delete\"){\n\t  if(vec[1] == \"char\" && p < txt.size()){\n\t    txt.erase(txt.begin()+p);\n\t  } else if(vec[1] == \"word\"){\n\t    t = p;\n\t    while(t < txt.size() && txt[t] == ' ') ++t;\n\t    if(t >= txt.size()) continue;\n\t    while(t < txt.size() && txt[t] != ' ') ++t;\n\t    txt = txt.substr(0, p) + txt.substr(t);\n\t  }\n\t}\n      }\n      txt.insert(p, \"^\");\n      cout << txt << endl;\n      txt.clear();\n    }\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstdlib>\n#include <cmath>\n#include <climits>\n#include <cfloat>\n#include <cstring>\n#include <map>\n#include <utility>\n#include <set>\n#include <iostream>\n#include <memory>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <functional>\n#include <sstream>\n#include <fstream>\n#include <complex>\n#include <stack>\n#include <queue>\n \nusing namespace std;\ntypedef long long LL;\ntypedef pair<int, int> PII;\nstatic const double EPS = 1e-5;\n \n#define FOR(i,k,n) for (int i=(k); i<(int)(n); ++i)\n#define REP(i,n) FOR(i,0,n)\n \nint main(void){\n  int N;\n  cin>>N;\n  cin.ignore();\n  while(N--){\n    string buf;\n    getline(cin,buf);\n    int M;\n    cin>>M;\n    cin.ignore();\n    string::iterator it = buf.begin();\n    while(M--){\n      /*\n      {\n      int dist = distance(buf.begin(),it);\n      REP(i,buf.size()){\n        if(i==dist)putchar('^');\n        putchar(buf[i]);\n      }\n      if(it==buf.end())putchar('^');\n      putchar('\\n');\n      }\n      */\n      string command;\n      getline(cin,command);\n      if(command==\"forward char\"&&it!=buf.end()) it++;\n      if(command==\"backward char\"&&it!=buf.begin()) it--;\n      if(command==\"forward word\"){\n        while(it!=buf.end()&&*it==' ')it++;\n        while(it!=buf.end()&&*it!=' ')it++;\n      }\n      if(command==\"backward word\"){\n        if(it!=buf.begin())it--;\n        while(it!=buf.begin()&&(*it)==' ')it--;\n        while(it!=buf.begin()&&(*it)!=' ')it--;\n        if(*it==' ') it++;\n      }\n      if(command==\"delete char\"&&it!=buf.end()) it = buf.erase(it);\n      if(command==\"delete word\"){\n        string::iterator it2 = it; \n        while(it2!=buf.end()&&*it2==' ')it2++;\n        if(it2!=buf.end()){\n          while(it2!=buf.end()&&*it2!=' ')it2++;\n          //if(it2!=buf.end())it2++;\n          it = buf.erase(it,it2);\n        }\n      }\n      if(command.find(\"insert\",0)!=string::npos){\n        string ins = command.substr(8);\n        string::iterator ir = ins.end()-1;\n        ins.erase(ir);\n        //cout<<ins<<endl;\n        REP(i,ins.size()){\n          it = buf.insert(it,ins[i]);\n          it++;\n        }\n      }\n    }\n    int dist = distance(buf.begin(),it);\n    REP(i,buf.size()){\n      if(i==dist)putchar('^');\n      putchar(buf[i]);\n    }\n    if(it==buf.end())putchar('^');\n    putchar('\\n');\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long int uli;\nconst int mx=100+10;\nint main(){\n   freopen(\"data.in\",\"r\",stdin);\n   ios_base::sync_with_stdio(0);\n   int t,q;\n   string s,op;\n   char ch;\n   cin>>t;\n   while(t--){\n      getline(cin,s);\n      getline(cin,s);\n      cin>>q;\n      int ix=0;\n      while(q--){\n         cin>>op;\n         if(op[0]=='f'){\n            cin>>op;\n            if(op[0]=='c')ix++;              \n            else{\n               while(ix<int(s.size()) && s[ix]==' ')ix++;\n               while(ix<int(s.size())&&s[ix]!=' ')ix++;\n            }\n         }\n         else if(op[0]=='b'){\n            cin>>op;\n            if(op[0]=='c')ix--;\n            else{\n               while(ix-1>=0 && s[ix-1]==' ')ix--;\n               while(ix-1>=0 && s[ix-1]!=' ')ix--;\n            }            \n         }\n         else if(op[0]=='i'){\n            string x=\"\";\n            while(cin>>ch,ch!='\"') {}\n            while(cin>>noskipws>>ch,ch!='\"') x+=string(1,ch);                                    \n            s.insert(ix,x);\n            ix=ix+int(x.size());\n            cin>>skipws;\n         }\n         else if(op[0]=='d'){\n            cin>>op;\n            if(op[0]=='c')s.erase(ix,1);\n            else if(op[0]=='w'){\n               int j=ix;\n               while(j<int(s.size()) && s[j]==' ')j++;\n               while(j<int(s.size()) && s[j]!=' ')j++;\n               j--;\n               s.erase(ix,j-ix+1);\n            }\n         }\n         \n//         cout<<s.substr(0,ix)<<\"^\"<<s.substr(ix)<<'\\n';\n      }\n      cout<<s.substr(0,ix)<<\"^\"<<s.substr(ix)<<'\\n';\n   }\n   return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstdlib>\n#include <cmath>\n#include <climits>\n#include <cfloat>\n#include <map>\n#include <utility>\n#include <set>\n#include <iostream>\n#include <memory>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <functional>\n#include <sstream>\n#include <complex>\n#include <stack>\n#include <queue>\n#include <cstring>\n#include <sstream>\n#ifndef M_PI\n#define M_PI 3.1415926535897932384626433832795\n#endif\nusing namespace std;\nstatic const double EPS = 1e-5;\ntypedef long long ll;\ntypedef pair<int,int> PI;\n#define rep(i,n) for(int i=0;i<(int)n;++i)\n#define FOR(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i)\n#define ALL(c) (c).begin(), (c).end()\n#define mp(a,b) make_pair(a,b)\n#define pb(a) push_back(a)\n#define F first\n#define S second\n\nint dx[]={0,1,0,-1};\nint dy[]={1,0,-1,0};\n\nstring in;\nint pos;\n\n\nmain(){\n  int n;\n  cin>>n;\n  cin.ignore();\n  while(n--){\n    pos=0;\n    getline(cin,in);\n    int t;\n    cin>>t;\n    cin.ignore();\n    while(t--){\n      string com;\n      getline(cin,com);\n      if(com==\"forward char\" && pos<in.size())++pos;\n      else if(com==\"backward char\" && pos)--pos;\n      else if(com==\"forward word\"){\n\twhile(pos<in.size() && in[pos]==' ')++pos;\n\twhile(pos<in.size() && in[pos]!=' ')++pos;\n      }else if(com==\"backward word\"){\n\twhile(pos && in[pos-1]==' ')--pos;\n\twhile(pos && in[pos-1]!=' ')--pos;\n      }else if(com[0]=='i'){\n\tin.insert(pos,com.substr(8,com.size()-9));\n\tpos+=com.size()-9;\n      }else if(com==\"delete char\"){\n\tin.erase(pos,1);\n      }else if(com==\"delete word\"){\n\tint sz=0;\n\twhile(pos+sz<in.size() && in[pos+sz]==' ')++sz;\n\twhile(pos+sz<in.size() && in[pos+sz]!=' ')++sz;\n\tin.erase(pos,sz);\n      }\n    }\n    rep(i,in.size()){\n      if(i==pos)cout<<'^';\n      cout<<in[i];\n    }\n    if(pos==in.size())cout<<'^';\n    cout<<endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <iostream>\n#include <queue>\nusing namespace std;\n\nvoid forwardChar(string &text, int &cursorIndex){\n    int length = text.length();\n    if (cursorIndex == length - 1) {\n        return ;\n    }\n    \n    text[cursorIndex] = text[cursorIndex + 1];\n    text[cursorIndex + 1] = '^';\n    cursorIndex++;\n}\n\nvoid forwardWord(string &text,int &cursorIndex){\n    int length = text.length();\n    if (cursorIndex == length - 1) {\n        return ;\n    }\n    \n    int i, nextWordStart, nextWordEnd;\n    for( i = cursorIndex ; (text[i] == '^' || text[i] == ' ') && i < length; i++);\n    nextWordStart = i;\n    for(i = nextWordStart; i < length && text[i] != ' '; i++);\n    nextWordEnd = i;\n    \n    if (nextWordStart >= length) {\n        return;\n    }\n    \n    string movedWord;\n    \n    movedWord = text.substr(cursorIndex + 1, nextWordEnd - cursorIndex - 1);\n    \n    text.replace(cursorIndex, movedWord.length(), movedWord);\n    text[nextWordEnd - 1] = '^';\n    cursorIndex = nextWordEnd - 1;\n}\n\nvoid backwardChar(string &text, int &cursorIndex){\n    if (cursorIndex == 0) {\n        return ;\n    }\n    \n    text[cursorIndex] = text[cursorIndex - 1];\n    text[cursorIndex - 1] = '^';\n    cursorIndex--;\n\n}\n\nvoid backwardWord(string &text,int &cursorIndex){\n    if (cursorIndex == 0) {\n        return ;\n    }\n    \n    int i, nextWordStart, nextWordEnd;\n    for( i = cursorIndex ; (text[i] == '^' || text[i] == ' ') && i >= 0; i--);\n    nextWordEnd = i;\n    for(i = nextWordEnd; i >= 0 && text[i] != ' '; i--);\n    nextWordStart = i;\n    \n    if(nextWordEnd < 0){\n        return;\n    }\n    \n    string movedWord;\n    \n    movedWord = text.substr(nextWordStart + 1, cursorIndex - nextWordStart - 1);\n    \n    text.replace(nextWordStart + 2, movedWord.length(), movedWord);\n    text[nextWordStart + 1] = '^';\n    cursorIndex = nextWordStart + 1;\n}\n\nvoid insertString(string &text, string insert, int &cursorIndex){\n    int length = insert.length();\n    \n    text.insert(cursorIndex,insert);\n    cursorIndex += length;\n}\n\nvoid deleteChar(string &text, int &cursorIndex){\n    int length = text.length();\n    if(cursorIndex == length - 1){\n        return ;\n    }\n    \n    text.erase(cursorIndex+ 1, 1);\n}\n\nvoid deleteWord(string &text, int &cursorIndex){\n    int length = text.length();\n    if (cursorIndex == length - 1) {\n        return ;\n    }\n    \n    int i, nextWordStart, nextWordEnd;\n    for( i = cursorIndex ; (text[i] == '^' || text[i] == ' ') && i < length ; i++);\n    nextWordStart = i;\n    for(i = nextWordStart; i < length && text[i] != ' '; i++);\n    nextWordEnd = i;\n    \n    if (nextWordStart >= length) {\n        return;\n    }\n    \n    text.erase(cursorIndex + 1, nextWordEnd - cursorIndex - 1);\n    \n}\n\nint main(){\n    int testNum, commandNum, cursorIndex;\n    queue<string> results;\n    cin>>testNum;\n    getchar();\n    int i, j;\n    string text, command1, command2;\n    char buff[1500];\n    \n    for(i = 1; i <= testNum; i++){\n        getline(cin, text);\n        text = \"^\" + text;\n        cursorIndex = 0;\n        cin>>commandNum;\n        for (j = 1; j <= commandNum; j++) {\n            cin>>command1;\n            getchar();\n            getline(cin, command2);\n            \n            if (command1 == \"forward\") {\n                if (command2 == \"char\") {\n                    forwardChar(text, cursorIndex);\n                }\n                else{\n                    forwardWord(text, cursorIndex);\n                }\n            }\n            \n            else if (command1 == \"backward\"){\n                if (command2 == \"char\") {\n                    backwardChar(text, cursorIndex);\n                }\n                else{\n                    backwardWord(text, cursorIndex);\n                }\n            }\n            \n            else if (command1 == \"delete\"){\n                if (command2 == \"char\") {\n                    deleteChar(text, cursorIndex);\n                }\n                else{\n                    deleteWord(text, cursorIndex);\n                }\n            }\n            \n            else{\n                int length = command2.length();\n                insertString(text, command2.substr(1, length - 2), cursorIndex);\n            }\n        }\n        \n        results.push(text);\n    }\n    \n    while(!results.empty()){\n        cout<<results.front()<<endl;\n        results.pop();\n    }\n    \n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cmath>\n#include <string>\n\nusing namespace std;\nint main(){\n\tint n,r;\n\tcin >> n;\n\tcin.ignore();\n\twhile(n--){\n\t\tint cur = 0;\n\t\tstring text, command;\n\t\tgetline(cin, text);\n\t\tint len = text.size();\n\t\tcin\t>> r;\n\t\tcin.ignore();\n\t\twhile(r--){\n\t\t\tgetline(cin, command);\n\t\t\tif(command == \"forward char\"){\n\t\t\t\tcur=min(len, cur+1);\n\t\t\t}else if(command == \"forward word\"){\n\t\t\t\tfor(;cur<len && text[cur] == ' '; cur++);\n\t\t\t\tfor(;cur<len && text[cur] != ' '; cur++);\n\t\t\t}else if(command == \"backward char\"){\n\t\t\t\tcur=max(0, cur-1);\n\t\t\t}else if(command == \"backward word\"){\n\t\t\t\tfor(;cur>0 && text[cur-1] == ' '; cur--);\n\t\t\t\tfor(;cur>0 && text[cur-1] != ' '; cur--);\n\t\t\t}else if(command == \"delete char\"){\n\t\t\t\tif(cur>=len) continue;\n\t\t\t\ttext.erase(text.begin()+cur);\n\t\t\t\tlen--;\n\t\t\t}else if(command == \"delete word\"){\n\t\t\t\tint s = cur;\n\t\t\t\tfor(;s<len && text[s] == ' '; s++);\n\t\t\t\tfor(;s<len && text[s] != ' ';){\n\t\t\t\t\ttext.erase(text.begin()+s);\n\t\t\t\t\tlen--;\n\t\t\t\t}\n\t\t\t}else if(command.find(\"insert\")!=command.npos){\n\t\t\t\tstring ins;\n\t\t\t\tint s = command.find('\"');\n\t\t\t\tint t = command.find('\"',s+1);\n\t\t\t\tins = command.substr(s+1,t-s-1);\n\t\t\t\ttext.insert(cur,ins);\n\t\t\t\tlen+=t-s-1;\n\t\t\t\tcur+=t-s-1;\n\t\t\t}\n\t\t\t\n\t\t}\n\t\ttext.insert(text.begin()+cur,'^');\n\t\tcout << text;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint main() {\n    int N;\n    cin >> N;\n    cin.ignore();\n\n    while(N--) {\n        string str;\n        getline(cin, str);\n        int cursor = 0;\n        int M;\n        cin >> M;\n        cin.ignore();\n\n        while(M--) {\n            string cmdline;\n            getline(cin, cmdline);\n\n            int delim = cmdline.find(' ');\n            string cmd = cmdline.substr(0, delim);\n            string target = cmdline.substr(delim+1);\n            if(cmd == \"forward\") {\n                if(target == \"word\") {\n                    while(cursor < str.size() && str[cursor] == ' ') ++cursor;\n                    while(cursor < str.size() && str[cursor] != ' ') ++cursor;\n                }\n                else if(target == \"char\") {\n                    if(cursor < str.size()) ++cursor;\n                }\n                else {\n                    cerr << \"Unknown target in forward: \" << target << endl;\n                }\n            }\n            else if(cmd == \"backward\") {\n                if(target == \"word\") {\n                    while(cursor > 0 && str[cursor] == ' ') --cursor;\n                    while(cursor > 0 && str[--cursor] != ' ') ;\n                }\n                else if(target == \"char\") {\n                    if(cursor > 0) --cursor;\n                }\n                else {\n                    cerr << \"Unknown target in backward: \" << target << endl;\n                }\n            }\n            else if(cmd == \"delete\") {\n                if(target == \"word\") {\n                    int idx = cursor;\n                    bool ok = false;\n                    while(idx < str.size() && str[idx] == ' ') ++idx;\n                    while(idx < str.size() && str[idx] != ' ') {++idx; ok = true; }\n                    if(ok) {\n                        str.erase(cursor, idx-cursor);\n                    }\n                }\n                else if(target == \"char\") {\n                    if(cursor >= str.size()) continue;\n                    str.erase(cursor, 1);\n                }\n                else {\n                    cerr << \"Unknown target in delete: \" << target << endl;\n                }\n            }\n            else if(cmd == \"insert\") {\n                str = str.substr(0, cursor) + target.substr(1, target.size()-2) + str.substr(cursor);\n                cursor += target.size()-2;\n            }\n            else {\n                //cerr << \"Unknown command: \" << cmd << endl;\n            }\n            //cout << cmdline << endl;\n            //cout << \"\\t\" << str.substr(0, cursor) << '^' << str.substr(cursor) << endl;\n        }\n        cout << str.substr(0, cursor) << '^' << str.substr(cursor) << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#define INF 0x3f3f3f3f\n#include <cstdio>\n#include <iostream>\n#include <sstream>\n#include <cmath>\n#include <cstdlib>\n#include <algorithm>\n#include <queue>\n#include <stack>\n#include <limits>\n#include <map>\n#include <string>\n#include <cstring>\n#include <set>\n#include <deque>\n#include <bitset>\n#include <list>\n#include <cctype>\n#include <utility>\n \nusing namespace std;\n \ntypedef long long ll;\ntypedef pair <int,int> P;\ntypedef pair <int,P > PP;\n \nint tx[] = {0,1,0,-1};\nint ty[] = {-1,0,1,0};\n \nstatic const double EPS = 1e-8;\n\nclass Editor{\nprivate:\n  string text;\n  int cursor;\npublic:\n  Editor(const string& _text) : text(_text),cursor(0) {}\n  void forward_char(){\n    if(text.length() > cursor) cursor++;\n  }\n  void forward_word(){\n    int tmp = text.length();\n    for(int pos=cursor;pos+1<text.length();pos++){\n      if(text[pos] != ' '\n\t && text[pos + 1] == ' '){\n\ttmp = pos + 1;\n\tbreak;\n      }\n    }\n    cursor = tmp;\n  }\n  void backward_char(){\n    if(0 < cursor) cursor--;    \n  }\n  void backward_word(){\n    int tmp = 0;\n\n    for(int pos=cursor-1;pos-1>=0;pos--){\n      if(text[pos] != ' '\n\t && text[pos - 1] == ' '){\n\ttmp = pos;\n\tbreak;\n      }\n    }\n    cursor = tmp;\n  }\n  void insert(const string& str){\n    string middle = str;\n    string front = \"\";\n    string rear = \"\";\n    if(cursor > 0) front = text.substr(0,cursor);\n    if(cursor < text.length()) rear = text.substr(cursor,text.length()-cursor);\n\n    cursor = front.length() + middle.length();\n    text = front + middle + rear;\n  }\n  void delete_char(){\n    string front = \"\";\n    string rear = \"\";\n    if(cursor > 0) front = text.substr(0,cursor);\n    if(cursor+1 < text.length()) rear = text.substr(cursor+1,text.length()-(cursor+1));\n    text = front + rear;\n  }\n  void delete_word(){\n    int delete_first = cursor;\n    int delete_last = text.length();\n\n    bool char_flag = false;\n    for(int pos=cursor;pos<text.length();pos++){\n      if(text[pos] == ' '){\n\tif(char_flag){\n\t  delete_last = pos - 1;\n\t  break;\n\t}\n      }\n      else if(text[pos] != ' '){\n\tchar_flag = true;\n      }\n    }\n\n    string front = \"\";\n    string rear = \"\";\n    if(delete_first > 0) front = text.substr(0,delete_first);\n    if(delete_last + 1 < text.length()) rear = text.substr(delete_last + 1,text.length()-(delete_last+1));\n    text = front + rear;\n  }\n  void print_text(){\n    string front = \"\";\n    string rear = \"\";\n    if(cursor > 0) front = text.substr(0,cursor);\n    if(cursor < text.length()) rear = text.substr(cursor,text.length()-cursor);\n    cout << front << \"^\" << rear << endl;\n  }\n};\n\nint main(){\n  string total_test_cases_str;\n\n  while(getline(cin,total_test_cases_str)){\n    stringstream ttc_ss;\n    ttc_ss << total_test_cases_str;\n    int total_test_cases;\n    ttc_ss >> total_test_cases;\n\n    for(int test_idx=0;test_idx<total_test_cases;test_idx++){\n      string text;\n      getline(cin,text);\n      \n      Editor editor(text);\n\n      string total_commands_str;\n\n      getline(cin,total_commands_str);\n      stringstream total_commands_ss;\n      total_commands_ss << total_commands_str;\n      \n      int total_commands;\n      total_commands_ss >> total_commands;\n\n      for(int command_idx=0;command_idx < total_commands; command_idx++){\n\tstring fr_str;\n\n\tgetline(cin,fr_str);\n\n\tstring front=\"\";\n\tstring rear=\"\";\n\tint str_pos = 0;\n\tfor(int i=0;i<fr_str.size();i++){\n\t  if(fr_str[i] == ' '){\n\t    str_pos = i+1;\n\t    break;\n\t  }\n\t  front += fr_str[i];\n\t}\n\tfor(int i=str_pos;i<fr_str.size();i++){\n\t  rear += fr_str[i];\n\n\t  if(i==str_pos && fr_str[i] == '\"') {\n\t    //nothing todo\n\t  }\n\t  else if(fr_str[i] == '\"'){\n\t    break;\n\t  }\n\t}\n\n\tif(front == \"forward\"){\n\t  if(rear == \"char\"){\n\t    editor.forward_char();\n\t    // editor.print_text();\n\t  }\n\t  else if(rear == \"word\"){\n\t    editor.forward_word();\n\t    // editor.print_text();\n\t  }\n\t}\n\telse if(front == \"backward\"){\n\t  if(rear == \"char\"){\n\t    editor.backward_char();\n\t    // editor.print_text();\n\t  }\n\t  else if(rear == \"word\"){\n\t    editor.backward_word();\n\t    // editor.print_text();\n\t  }\n\t}\n\telse if(front == \"insert\"){\n\t  editor.insert(rear.substr(1,rear.length()-2));\n\t  // editor.print_text();\n\t}\n\telse if(front == \"delete\"){\n\t  if(rear == \"char\"){\n\t    editor.delete_char();\n\t    // editor.print_text();\n\t  }\n\t  else if(rear == \"word\"){\n\t    editor.delete_word();\n\t    // editor.print_text();\n\t  }\n\t}\n      }\n      editor.print_text();\n    }\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdlib>\n#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring text;\nint cursor;\n\nvoid forward_char()\n{\n\tif (cursor < text.length()) ++cursor;\n}\n\nvoid backward_char()\n{\n\tif (0 < cursor) --cursor;\n}\n\nvoid forward_word()\n{\n\twhile (cursor < text.length() && text[cursor] == ' ') ++cursor;\n\twhile (cursor < text.length() && text[cursor] != ' ') ++cursor;\n}\n\nvoid backward_word()\n{\n\twhile (0 < cursor && text[cursor - 1] == ' ') --cursor;\n\twhile (0 < cursor && text[cursor - 1] != ' ') --cursor;\n}\n\nvoid insert_text(const string &str)\n{\n\ttext.insert(cursor, str);\n\tcursor += str.length();\n}\n\nvoid delete_char()\n{\n\tif (cursor < text.length()) text.erase(cursor, 1);\n}\n\nvoid delete_word()\n{\n\tint off = cursor;\n\twhile (off < text.length() && text[off] == ' ') ++off;\n\tif (off == text.length()) return;\n\twhile (off < text.length() && text[off] != ' ') ++off;\n\ttext.erase(cursor, off - cursor);\n}\n\nstring get_insert_string(const string &str)\n{\n\tint i = str.find('\"'), j = str.rfind('\"');\n\treturn str.substr(i + 1, j - i - 1);\n}\n\nint main()\n{\n\tstring line;\n\n\tint N;\n\tgetline(cin, line);\n\tN = atoi(line.c_str());\n\twhile(N--)\n\t{\n\t\tgetline(cin, text);\n\n\t\tcursor = 0;\n\n\t\tgetline(cin, line);\n\t\tint M = atoi(line.c_str());\n\t\tfor (int i = 0; i < M; i++)\n\t\t{\n\t\t\tgetline(cin, line);\n\t\t\t     if (line == \"forward char\")  forward_char();\n\t\t\telse if (line == \"forward word\")  forward_word();\n\t\t\telse if (line == \"backward char\") backward_char();\n\t\t\telse if (line == \"backward word\") backward_word();\n\t\t\telse if (line == \"delete char\")   delete_char();\n\t\t\telse if (line == \"delete word\")   delete_word();\n\t\t\telse if (line.compare(0, 6, \"insert\") == 0)\n\t\t\t\tinsert_text(get_insert_string(line));\n\t\t}\n\t\tcout << text.substr(0, cursor) << \"^\" << text.substr(cursor) << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<vector>\nusing namespace std;\n\n#define REP(i,n) for(int i = 0; i < (int)(n); i++)\n\nint main() {\n  int T; cin >> T >> ws;\n  while(T--) {\n    string buf;\n    getline(cin, buf);\n    //     cout << buf << endl;\n    // i == buf.size()ÆÈé±Æà éB\n    // eof <=> i == buf.size()\n    int i = 0;\n    int M; cin >> M >> ws;\n    REP(m, M) {\n      string line;\n      string command, op;\n      getline(cin, line);\n      int j = 0;\n      for(j = 0; line[j] != ' '; j++);\n      command = line.substr(0, j);\n      op = line.substr(j + 1);\n\n      //       cout << command << \" \" << op << endl;\n      if( command == \"forward\" ) {\n        if( op == \"word\" ) {\n          while( i < buf.size() && buf[i] == ' ' ) i++;\n          while( i < buf.size() && buf[i] != ' ' ) i++;\n        } else if( op == \"char\" ) {\n          if( i != buf.size() ) i++;\n        }\n      }\n\n      if( command == \"backward\" ) {\n        if( op == \"word\" ) {\n          while( i >= 0 && buf[i] == ' ' ) i--;\n          while( i >= 0 && buf[i] != ' ' ) i--;\n          i++;\n        } else if( op == \"char\" ) {\n          if( i > 0 ) i--;\n        }\n      }\n\n      if( command == \"insert\" ) {\n        string text = op.substr(1, op.size() - 2);\n\n        buf.insert(i, text);\n        i += text.size();\n      }\n\n\n      if( command == \"delete\" ) {\n        if( i < buf.size() ) {\n          if( op == \"char\" ) {\n            buf.erase(i,1);\n          }\n\n          if( op == \"word\" ) {\n            while( i < buf.size() && buf[i] == ' ' )\n              buf.erase(i, 1);\n\n            while( i < buf.size() && buf[i] != ' ' )\n              buf.erase(i, 1);\n          }\n        }\n      }\n      //       cout << buf << \" \" << i <<  endl;\n\n    }\n    buf.insert(i, 1, '^');\n    cout << buf << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<vector>\nusing namespace std;\n\nint main(){\n  int n;\n  cin >>n;\n  cin.ignore();\n  for(int i=0;i<n;i++){\n    string str;\n    int cn,pos;\n    if(!getline(cin,str)){\n      str = \"\";\n    }\n    cin >> cn;\n    pos = 0;\n    for(int j=0;j<cn;j++){\n      string command,target;\n      char ch;\n      cin >> command;\n      getline(cin,target);\n      target.erase(0,1);\n      if(command == \"forward\"){\n        if(pos<str.size()){\n          if(target == \"word\"){\n            do{\n              pos++;\n            }while(pos<str.size()&&str[pos]!=' ');\n          }else{\n            pos++;\n          }\n        }\n      }else if(command == \"delete\"){\n        if(str.size()!=0&&pos!=str.size()){\n          if(target == \"word\"){\n            do{\n              str.erase(pos,1);\n            }while(pos<str.size()&&str[pos]!=' ');\n          }else{\n            str.erase(pos,1);\n          }\n        }\n      }else if(command == \"backward\"){\n        if(pos>0){\n          if(target == \"word\"){\n            do{\n              pos--;\n            }while(pos>0&&str[pos]!=' ');\n          }else{\n            pos--;\n          }\n        }\n      }else if(command == \"insert\"){\n        target = target.substr(1,target.size()-2);\n        str.insert(pos,target);\n        pos += target.size();\n      }\n      /*\n        if(pos>=str.size()){\n        pos = str.size() -1;\n        }else if(pos<0){\n        pos = 0;\n        }\n      */\n      //cout << str << endl;\n    }\n    str.insert(pos,\"^\");\n    cout << str << endl;\n  }\n  \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <string>\n#include <iostream>\n\nusing namespace std;\n\nint n,m;\n\nint main(void){\n\tscanf(\"%d%*c\",&n);\n\tfor(int dd=0;dd<n;dd++){\n\t\tstring str;\n\t\tgetline(cin,str);\n\t\tscanf(\"%d%*c\",&m);\n\t\tint point=0;\n\t\tfor(int i=0;i<m;i++){\n\t\t\tstring com;\n\t\t\tgetline(cin,com);\n\t\t\tif(com==\"forward char\"){\n\t\t\t\tif(point<str.size()){\n\t\t\t\t\tpoint++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(com==\"forward word\"){\n\t\t\t\tif(point<str.size()){\n\t\t\t\t\twhile(point<str.size() && str[point]==' ')point++;\n\t\t\t\t\twhile(point<str.size() && str[point]!=' ')point++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(com==\"backward char\"){\n\t\t\t\tif(point>0){\n\t\t\t\t\tpoint--;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(com==\"backward word\"){\n\t\t\t\tif(point>0){\n\t\t\t\t\twhile(point>0 && str[point]==' ')point--;\n\t\t\t\t\twhile(point>0 && str[point]!=' ')point--;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(com[0]=='i'){\n\t\t\t\tstring str2;\n\t\t\t\tstring str3;\n\t\t\t\tstring str4;\n\t\t\t\tstr2=str.substr(0,point);\n\t\t\t\tstr3=str.substr(point);\n\t\t\t\tstr4=com.substr(8,com.size()-9);\n\t\t\t\tstr=str2+str4+str3;\n\t\t\t\tpoint+=com.size()-9;\n\t\t\t\t//cout << str4 << endl;\n\t\t\t}\n\t\t\tif(com==\"delete char\"){\n\t\t\t\tif(str.size()==point)continue;\n\t\t\t\tstring str2;\n\t\t\t\tstring str3;\n\t\t\t\tstr2=str.substr(0,point);\n\t\t\t\tstr3=str.substr(point+1);\n\t\t\t\tstr=str2+str3;\n\t\t\t}\n\t\t\tif(com==\"delete word\"){\n\t\t\t\tif(str.size()==point)continue;\n\t\t\t\tint e=1;\n\t\t\t\tif(str[point]==' '){\n\t\t\t\t\twhile(str[point+e]==' ')e++;\n\t\t\t\t}\n\t\t\t\tif(str[point]!=' '){\n\t\t\t\t\twhile(str[point+e]!=' ')e++;\n\t\t\t\t}\n\t\t\t\tstring str2;\n\t\t\t\tstring str3;\n\t\t\t\tstr2=str.substr(0,point);\n\t\t\t\tstr3=str.substr(point+e);\n\t\t\t\tstr=str2+str3;\n\t\t\t}\n\t\t\t//cout << str  << \" \" << point << endl;\n\t\t}\n\t\tstring res=\"\";\n\t\tfor(int i=0;i<str.size();i++){\n\t\t\tif(i==point)res+='^';\n\t\t\tres+=str[i];\n\t\t}\n\t\tif(str.size()==point)res+='^';\n\t\tcout << res << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstdlib>\n#include <cmath>\n#include <climits>\n#include <cfloat>\n#include <cstring>\n#include <map>\n#include <utility>\n#include <set>\n#include <iostream>\n#include <memory>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <functional>\n#include <sstream>\n#include <fstream>\n#include <complex>\n#include <stack>\n#include <queue>\n\nusing namespace std;\ntypedef long long LL;\ntypedef pair<int, int> PII;\nstatic const double EPS = 1e-5;\n\n#define FOR(i,k,n) for (int i=(k); i<(int)(n); ++i)\n#define REP(i,n) FOR(i,0,n)\n\nint main(void){\n  int N;\n  cin>>N;\n  cin.ignore();\n  while(N--){\n    string buf;\n    getline(cin,buf);\n    int M;\n    cin>>M;\n    cin.ignore();\n    string::iterator it = buf.begin();\n    while(M--){\n      /*\n      {\n      int dist = distance(buf.begin(),it);\n      REP(i,buf.size()){\n        if(i==dist)putchar('^');\n        putchar(buf[i]);\n      }\n      if(it==buf.end())putchar('^');\n      putchar('\\n');\n      }\n      */\n      string command;\n      getline(cin,command);\n      if(command==\"forward char\"&&it!=buf.end()) it++;\n      if(command==\"backward char\"&&it!=buf.begin()) it--;\n      if(command==\"forward word\"){\n        while(it!=buf.end()&&*it==' ')it++;\n        while(it!=buf.end()&&*it!=' ')it++;\n      }\n      if(command==\"backward word\"){\n        if(it!=buf.begin())it--;\n        while(it!=buf.begin()&&(*it)==' ')it--;\n        while(it!=buf.begin()&&(*it)!=' ')it--;\n        if(*it==' ') it++;\n      }\n      if(command==\"delete char\"&&it!=buf.end()) it = buf.erase(it);\n      if(command==\"delete word\"){\n        string::iterator it2 = it; \n        while(it2!=buf.end()&&*it2==' ')it2++;\n        if(it2==buf.end()) break;\n        while(it2!=buf.end()&&*it2!=' ')it2++;\n        //if(it2!=buf.end())it2++;\n        it = buf.erase(it,it2);\n      }\n      if(command.find(\"insert\",0)!=string::npos){\n        string ins = command.substr(8);\n        string::iterator ir = ins.end()-1;\n        ins.erase(ir);\n        //cout<<ins<<endl;\n        REP(i,ins.size()){\n          it = buf.insert(it,ins[i]);\n          it++;\n        }\n      }\n    }\n    int dist = distance(buf.begin(),it);\n    REP(i,buf.size()){\n      if(i==dist)putchar('^');\n      putchar(buf[i]);\n    }\n    if(it==buf.end())putchar('^');\n    putchar('\\n');\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint main() {\n    int N;\n    cin >> N;\n    cin.ignore();\n\n    while(N--) {\n        string str;\n        getline(cin, str);\n        int cursor = 0;\n        int M;\n        cin >> M;\n        cin.ignore();\n\n        while(M--) {\n            string cmdline;\n            getline(cin, cmdline);\n\n            int delim = cmdline.find(' ');\n            string cmd = cmdline.substr(0, delim);\n            string target = cmdline.substr(delim+1);\n            if(cmd == \"forward\") {\n                if(target == \"word\") {\n                    int start = str.find_first_not_of(' ', cursor);\n                    if(start == string::npos) {\n                        cursor = str.size();\n                        continue;\n                    }\n                    int end = str.find_first_of(' ', start);\n                    if(end == string::npos) {\n                        cursor = str.size();\n                        continue;\n                    }\n                    cursor = end;\n                }\n                else if(target == \"char\") {\n                    if(cursor < str.size()) ++cursor;\n                }\n                else {\n                    cerr << \"Unknown target in forward: \" << target << endl;\n                }\n            }\n            else if(cmd == \"backward\") {\n                if(target == \"word\") {\n                    int start = str.find_last_not_of(' ', cursor-1);\n                    if(start == string::npos) {\n                        cursor = 0;\n                        continue;\n                    }\n                    int end = str.find_last_of(' ', start);\n                    if(end == string::npos) {\n                        cursor = 0;\n                        continue;\n                    }\n                    cursor = end+1;\n                }\n                else if(target == \"char\") {\n                    if(cursor > 0) --cursor;\n                }\n                else {\n                    cerr << \"Unknown target in backward: \" << target << endl;\n                }\n            }\n            else if(cmd == \"delete\") {\n                if(target == \"word\") {\n                    int startword = str.find_first_not_of(' ', cursor);\n                    if(startword == string::npos) continue;\n                    int end = str.find_first_of(' ', startword);\n                    if(end == string::npos) end = str.size();\n                    str.erase(cursor, end-cursor);\n                }\n                else if(target == \"char\") {\n                    if(cursor >= str.size()) continue;\n                    str.erase(cursor, 1);\n                }\n                else {\n                    cerr << \"Unknown target in delete: \" << target << endl;\n                }\n            }\n            else if(cmd == \"insert\") {\n                str = str.substr(0, cursor) + target.substr(1, target.find_last_of('\"')-1) + str.substr(cursor);\n                cursor += target.size()-2;\n            }\n            else {\n                //cerr << \"Unknown command: \" << cmd << endl;\n            }\n        }\n        cout << str.substr(0, cursor) << '^' << str.substr(cursor) << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cmath>\n#include <string>\n\nusing namespace std;\nint main(){\n\tint n,r;\n\tcin >> n;\n\tcin.ignore();\n\twhile(n--){\n\t\tint cur = 0;\n\t\tstring text, command;\n\t\tgetline(cin, text);\n\t\tint len = text.size();\n\t\tcin\t>> r;\n\t\tcin.ignore();\n\t\twhile(r--){\n\t\t\tgetline(cin, command);\n\t\t\tif(command == \"forward char\"){\n\t\t\t\tcur=min(len, cur+1);\n\t\t\t}else if(command == \"forward word\"){\n\t\t\t\tfor(;cur<len && text[cur] == ' '; cur++);\n\t\t\t\tfor(;cur<len && text[cur] != ' '; cur++);\n\t\t\t}else if(command == \"backward char\"){\n\t\t\t\tcur=max(0, cur-1);\n\t\t\t}else if(command == \"backward word\"){\n\t\t\t\tfor(;cur>0 && text[cur-1] == ' '; cur--);\n\t\t\t\tfor(;cur>0 && text[cur-1] != ' '; cur--);\n\t\t\t}else if(command == \"delete char\"){\n\t\t\t\tif(cur>=len) continue;\n\t\t\t\ttext.erase(text.begin()+cur);\n\t\t\t\tlen--;\n\t\t\t}else if(command == \"delete word\"){\n\t\t\t\tint s = cur;\n\t\t\t\tfor(;s<len && text[s] == ' '; s++);\n\t\t\t\tfor(;s<len && text[s] != ' ';){\n\t\t\t\t\ttext.erase(text.begin()+s);\n\t\t\t\t\tlen--;\n\t\t\t\t}\n\t\t\t}else if(command.find(\"insert\")!=command.npos){\n\t\t\t\tstring ins;\n\t\t\t\tint s = command.find('\"');\n\t\t\t\tint t = command.find('\"',s+1);\n\t\t\t\tins = command.substr(s+1,t-s-1);\n\t\t\t\ttext.insert(cur,ins);\n\t\t\t\tlen+=t-s-1;\n\t\t\t\tcur+=t-s-1;\n\t\t\t}\n\t\t\t\n\t\t}\n\t\ttext.insert(text.begin()+cur,'^');\n\t\tcout << text;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint main() {\n    int N;\n    cin >> N;\n    cin.ignore();\n\n    while(N--) {\n        string str;\n        getline(cin, str);\n        int cursor = 0;\n        int M;\n        cin >> M;\n        cin.ignore();\n\n        while(M--) {\n            string cmdline;\n            getline(cin, cmdline);\n\n            int delim = cmdline.find(' ');\n            string cmd = cmdline.substr(0, delim);\n            string target = cmdline.substr(delim+1);\n            if(cmd == \"forward\") {\n                if(target == \"word\") {\n                    int start = str.find_first_not_of(' ', cursor);\n                    if(start == string::npos) {\n                        cursor = str.size();\n                        continue;\n                    }\n                    int end = str.find_first_of(' ', start);\n                    if(end == string::npos) {\n                        cursor = str.size();\n                        continue;\n                    }\n                    cursor = end;\n                }\n                else if(target == \"char\") {\n                    if(cursor < str.size()+1) ++cursor;\n                }\n                else {\n                    cerr << \"Unknown target in forward: \" << target << endl;\n                }\n            }\n            else if(cmd == \"backward\") {\n                if(target == \"word\") {\n                    int start = str.find_last_not_of(' ', cursor-1);\n                    if(start == string::npos) {\n                        cursor = 0;\n                        continue;\n                    }\n                    int end = str.find_last_of(' ', start);\n                    if(end == string::npos) {\n                        cursor = 0;\n                        continue;\n                    }\n                    cursor = end+1;\n                }\n                else if(target == \"char\") {\n                    if(cursor > 0) --cursor;\n                }\n                else {\n                    cerr << \"Unknown target in backward: \" << target << endl;\n                }\n            }\n            else if(cmd == \"delete\") {\n                if(target == \"word\") {\n                    int end = str.find_first_of(' ', cursor);\n                    if(end == string::npos) end = str.size();\n                    str.erase(cursor, end-cursor);\n                }\n                else if(target == \"char\") {\n                    if(cursor >= str.size()) continue;\n                    str.erase(cursor, 1);\n                }\n                else {\n                    cerr << \"Unknown target in delete: \" << target << endl;\n                }\n            }\n            else if(cmd == \"insert\") {\n                str = str.substr(0, cursor) + target.substr(1, target.find_last_of('\"')-1) + str.substr(cursor);\n                cursor += target.size()-2;\n            }\n            else {\n                //cerr << \"Unknown command: \" << cmd << endl;\n            }\n        }\n        cout << str.substr(0, cursor) << '^' << str.substr(cursor) << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<vector>\nusing namespace std;\n\nint main(){\n  int n;\n  cin >>n;\n  cin.ignore();\n  for(int i=0;i<n;i++){\n    string str;\n    int cn,pos;\n    getline(cin,str);\n    cin >> cn;\n    pos = 0;\n    for(int j=0;j<cn;j++){\n      string command,target;\n      char ch;\n      cin >> command;\n      getline(cin,target);\n      target.erase(0,1);\n      if(command == \"forward\"){\n        if(target == \"word\"){\n          do{\n            pos++;\n          }while(pos<str.size()&&str[pos]!=' ');\n        }else{\n          pos++;\n        }\n      }else if(command == \"delete\"){\n        if(target == \"word\"){\n          do{\n            str.erase(pos,1);\n          }while(str[pos]!=' ');\n        }else{\n          str.erase(pos,1);\n        }\n      }else if(command == \"backward\"){\n        if(target == \"word\"){\n          do{\n            pos--;\n          }while(pos>0&&str[pos]!=' ');\n        }else{\n          pos--;\n        }\n      }else if(command == \"insert\"){\n        target = target.substr(1,target.size()-2);\n        str.insert(pos,target);\n        pos += target.size();\n      }\n      /*\n        if(pos>=str.size()){\n        pos = str.size() -1;\n        }else if(pos<0){\n        pos = 0;\n        }\n      */\n      cout << str << endl;\n    }\n    str.insert(pos,\"^\");\n    cout << str << endl;\n  }\n  \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <iostream>\n#include <string>\n#include <cmath>\n\nusing namespace std;\n\nint main(){    \n    int n;\n    cin>>n;\n    for(int i=0;i<n;i++){\n        string buf;\n        char c;\n        scanf(\"%c\", &c);\n\n        getline(cin,buf);\n       // cout << \"buf is \" << buf << endl;\n        int pos=0;\n        int cn;\n        cin>>cn;\n        for(int k=0;k<cn;k++){\n            string command;\n            cin >> command;\n            if(command==\"forward\"){\n                cin >> command;\n                if(command==\"char\"){\n                    if(!buf.empty())\n                    pos = min(pos+1,(int)buf.size());\n                }else{\n                    // word\n                    while(pos < buf.size()&& buf[pos]==' ')pos++;\n                    while(pos < buf.size()&& buf[pos]!=' ')pos++;\n                }\n            }else if(command==\"backward\"){\n                cin >> command;\n                if(command==\"char\"){\n                    pos = max(pos-1,0);\n                }else{\n                    // word\n                    while(pos > 0 && buf[pos-1]==' ' )pos--;\n                    while(pos > 0 && buf[pos-1]!=' ')pos--;\n                }\n            }else if(command==\"insert\"){\n                getline(cin,command);\n                ungetc('\\n',stdin);\n                string text;\n                bool f= false;\n                for(int i=0;i<command.size();i++){\n                    if(f&&command[i]=='\\\"')break;\n                    if(f)text.push_back(command[i]);\n                    if(command[i]=='\\\"')f=true;\n                }\n                buf.insert(pos,text);\n                pos+= text.size();\n            }else {//delete\n                cin >> command;\n                if(command== \"char\"){\n                    if(!buf.empty()&&pos!=buf.size()){\n                        buf.erase(pos,1);\n                    }\n\n                }else{\n                    if(!buf.empty()){\n                        int t=pos;\n                        while(t<buf.size() && buf[t]==' ')t++;\n                        while(t<buf.size() && buf[t]!=' ')t++;\n                        while(t<buf.size() && buf[t]==' ')t++;\n\n                        buf.erase(pos,t-pos);\n                    }\n                }\n            }\n        }\n        //cout << buf << \"****\" << endl;\n        if(buf.empty()){\n            printf(\"^\\n\");\n        }else{\n        for(int p=0;p<buf.size();p++){\n            if(pos==p)printf(\"^\");\n            printf(\"%c\",buf[p]);\n        }\n\n        if(pos==buf.size())printf(\"^\");\n        printf(\"\\n\");\n        }\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstdlib>\n#include <cmath>\n#include <climits>\n#include <cfloat>\n#include <cstring>\n#include <map>\n#include <utility>\n#include <set>\n#include <iostream>\n#include <memory>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <functional>\n#include <sstream>\n#include <fstream>\n#include <complex>\n#include <stack>\n#include <queue>\n\nusing namespace std;\ntypedef long long LL;\ntypedef pair<int, int> PII;\nstatic const double EPS = 1e-5;\n\n#define FOR(i,k,n) for (int i=(k); i<(int)(n); ++i)\n#define REP(i,n) FOR(i,0,n)\n\nint main(void){\n  int N;\n  cin>>N;\n  cin.ignore();\n  while(N--){\n    string buf;\n    getline(cin,buf);\n    int M;\n    cin>>M;\n    cin.ignore();\n    string::iterator it = buf.begin();\n    while(M--){\n      {\n      int dist = distance(buf.begin(),it);\n      REP(i,buf.size()){\n        if(i==dist)putchar('^');\n        putchar(buf[i]);\n      }\n      if(it==buf.end())putchar('^');\n      putchar('\\n');\n      }\n      string command;\n      getline(cin,command);\n      if(command==\"forward char\"&&it!=buf.end()) it++;\n      if(command==\"backward char\"&&it!=buf.begin()) it--;\n      if(command==\"forward word\"){\n        while(it!=buf.end()&&*it==' ')it++;\n        while(it!=buf.end()&&*it!=' ')it++;\n      }\n      if(command==\"backward word\"){\n        if(it!=buf.begin())it--;\n        while(it!=buf.begin()&&(*it)==' ')it--;\n        while(it!=buf.begin()&&(*it)!=' ')it--;\n        if(*it==' ') it++;\n      }\n      if(command==\"delete char\"&&it!=buf.end()) it = buf.erase(it);\n      if(command==\"delete word\"){\n        string::iterator it2 = find(it,buf.end(),' ');\n        //if(it2!=buf.end())it2++;\n        it = buf.erase(it,it2);\n      }\n      if(command.find(\"insert\",0)!=string::npos){\n        string ins = command.substr(8);\n        string::iterator ir = ins.end()-1;\n        ins.erase(ir);\n        //cout<<ins<<endl;\n        REP(i,ins.size()){\n          it = buf.insert(it,ins[i]);\n          it++;\n        }\n      }\n    }\n    int dist = distance(buf.begin(),it);\n    REP(i,buf.size()){\n      if(i==dist)putchar('^');\n      putchar(buf[i]);\n    }\n    if(it==buf.end())putchar('^');\n    putchar('\\n');\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <cstring>\n#include <climits>\n#include <algorithm>\n#include <map>\n\nusing namespace std;\n\nvoid fowardChar(string &text, int &cur) {\n    if (cur == (int)text.size()-1) return ;\n    swap(text[cur], text[cur+1]);\n    cur ++;\n}\n\nvoid fowardWord(string &text, int &cur) {\n    if (cur == (int)text.size()-1) return ;\n    while (1) {\n        fowardChar(text, cur);\n        if (cur == (int)text.size()-1) break;\n        if (text[cur-1] != ' ' && text[cur+1] == ' ') break;\n    }\n}\n\nvoid backwardChar(string &text, int &cur) {\n    if (cur == 0) return ;\n    swap(text[cur], text[cur-1]);\n    cur --;\n}\n\nvoid backwardWord(string &text, int &cur) {\n    if (cur == 0) return ;\n    while (1) {\n        backwardChar(text, cur);\n        if (cur == 0) break;\n        if (text[cur+1] != ' ' && text[cur-1] == ' ') break;\n    }\n}\n\nvoid deleteChar(string &text, int &cur) {\n    if (cur == (int)text.size()-1) return ;\n    text.erase(text.begin()+cur+1);\n}\n\nvoid deleteWord(string &text, int &cur) {\n    if (cur == (int)text.size()-1) return ;\n    int pos = cur+1;\n    while (pos+1 < (int)text.size()) {\n        if (text[pos] == ' ' || (text[pos] != ' ' && text[pos+1] != ' ')) {\n            pos ++;\n        } else {\n            break;\n        }\n    }\n    if (text[pos] == ' ') return ;\n    for (int i=0; i<pos-cur; ++i) {\n        deleteChar(text, cur);\n    }\n}\n\nvoid insert(string &text, int &cur, string anytext) {\n    text = text.substr(0, cur) + anytext + text.substr(cur);\n    cur += anytext.size();\n}\n\nint main() {\n    int N, M;\n    cin >> N; cin.ignore();\n    for (int i=0; i<N; ++i) {\n        string text, com;\n        getline(cin, text);\n        text = \"^\" + text;\n        int cur = 0;\n        cin >> M; cin.ignore();\n        for (int j=0; j<M; ++j) {\n            getline(cin, com);\n            if (com == \"forward char\") fowardChar(text, cur);\n            else if (com == \"forward word\") fowardWord(text, cur);\n            else if (com == \"backward char\") backwardChar(text, cur);\n            else if (com == \"backward word\") backwardWord(text, cur);\n            else if (com == \"delete char\") deleteChar(text, cur);\n            else if (com == \"delete word\") deleteWord(text, cur);\n            else { // insert anytext\n                string anytext = com.substr(8, (int)com.size()-9);\n                insert(text, cur, anytext);\n            }\n        }\n        cout << text << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint bword(string str, int n)\n{\n\tbool nb=false;\n\tint ret;\n\tif(n==0) return 0;\n\tfor(ret=n-1; ret>0; ret--)\n\t{\n\n\t\tif(!nb)\n\t\t{\n\t\t\tif(str[ret]!=' ') nb=true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(str[ret]==' ') return ret+1;\n\t\t}\n\t}\n\treturn ret;\n}\n\nint fword(string str, int n)\n{\n\tbool nb=false;\n\tint ret;\n\tfor(ret=n; ret<str.size(); ret++)\n\t{\n\t\tif(!nb)\n\t\t{\n\t\t\tif(str[ret]!=' ') nb=true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(str[ret]==' ') return ret;\n\t\t}\n\n\t}\n\n\treturn ret;\n}\n\nint dword(string str, int n)\n{\n\tbool nb=false;\n\tint ret;\n\tfor(ret=n; ret<str.size(); ret++)\n\t{\n\t\tif(!nb)\n\t\t{\n\t\t\tif(str[ret]!=' ') nb=true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(str[ret]==' ') return ret;\n\t\t}\n\n\t}\n\n\tif(str[str.size()-1]!=' ') return str.size();\n\n\treturn n;\n}\n\nint main()\n{\n\tint N,M;\n\tstring str;\n\n\tcin >> N;\n\tgetline(cin,str);\n\n\twhile(N--)\n\t{\n\t\tgetline(cin,str);\n\t\t//str.erase(str.end()-1);\n\t\tint pos=0;\n\t\tcin >> M;\n\t\twhile(M--)\n\t\t{\n\t\t\tstring cmd;\n\t\t\tcin >> cmd;\n\t\t\tif(cmd[0]=='f')\n\t\t\t{\t\t\t\t\n\t\t\t\tgetline(cin,cmd);\n\t\t\t\tif(cmd[1]=='c')\n\t\t\t\t{\n\t\t\t\t\tif(pos<str.size()) pos++;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tpos=fword(str, pos);\n\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(cmd[0]=='b')\n\t\t\t{\n\t\t\t\tgetline(cin,cmd);\n\t\t\t\tif(cmd[1]=='c')\n\t\t\t\t{\n\t\t\t\t\tif(pos>0) pos--;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tpos=bword(str, pos);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(cmd[0]=='d')\n\t\t\t{\n\t\t\t\tgetline(cin,cmd);\n\t\t\t\tif(cmd[1]=='c')\n\t\t\t\t{\n\t\t\t\t\tif(pos!=str.size()) \n\t\t\t\t\t\tstr.erase(str.begin()+pos);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif(pos!=str.size())\n\t\t\t\t\t{\n\t\t\t\t\t\tint np=dword(str,pos);\n\t\t\t\t\t\tif(pos!=np) str.erase(str.begin()+pos, str.begin()+np);\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t\tif(cmd[0]=='i')\n\t\t\t{\n\t\t\t\tgetline(cin, cmd);\n\t\t\t\tcmd.assign(cmd.begin()+2, cmd.end()-2);\n\t\t\t\tstr.insert(pos, cmd);\n\t\t\t\tpos+=cmd.size();\n\t\t\t}\n\n\t\t}\n\n\t\tstr.insert(str.begin()+pos, '^');\n\t\tcout << str << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream> \n#include <sstream> \n#include <iomanip> \n#include <algorithm> \n#include <cmath> \n#include <string> \n#include <vector> \n#include <list> \n#include <queue> \n#include <stack> \n#include <set> \n#include <map> \n#include <bitset> \n#include <numeric> \n#include <climits> \n#include <cfloat> \nusing namespace std; \n\nint main()\n{\n    int n;\n    cin >> n;\n    cin.ignore();\n\n    while(--n >= 0){\n        string s;\n        getline(cin, s);\n        int m;\n        cin >> m;\n        cin.ignore();\n\n        list<char> text(s.begin(), s.end());\n        list<char>::iterator it = text.begin();\n\n        while(--m >= 0){\n            string ope;\n            getline(cin, ope);\n\n            if(ope == \"forward char\"){\n                if(it != text.end())\n                    ++ it;\n            }else if(ope == \"forward word\"){\n                list<char>::iterator it2 = it;\n                while(it2 != text.end() && (*it2) == ' ')\n                    ++ it2;\n                if(it2 != text.end()){\n                    it = it2;\n                    while(it != text.end() && (*it) != ' ')\n                        ++ it;\n                }\n            }else if(ope == \"backward char\"){\n                if(it != text.begin())\n                    -- it;\n            }else if(ope == \"backward word\"){\n                if(text.size() > 0){\n                    list<char>::iterator it2 = it;\n                    -- it2;\n                    while(it2 != text.begin() && (*it2) == ' ')\n                        -- it2;\n                    if((*it2) != ' '){\n                        it = it2;\n                        while(it != text.begin() && (*it) != ' ')\n                            -- it;\n                        if((*it) == ' ')\n                            ++ it;\n                    }\n                }\n            }else if(ope == \"delete char\"){\n                if(it != text.end())\n                    it = text.erase(it);\n            }else if(ope == \"delete word\"){\n                list<char>::iterator it2 = it;\n                while(it2 != text.end() && (*it2) == ' ')\n                    ++ it2;\n                if(it2 != text.end()){\n                    it = text.erase(it, it2);\n                    while(it != text.end() && (*it) != ' ')\n                        it = text.erase(it);\n                }\n            }else{\n                for(unsigned i=8; i<ope.size()-1; ++i){\n                    it = text.insert(it, ope[i]);\n                    ++ it;\n                }\n            }\n        }\n\n        cout << string(text.begin(), it) << '^' << string(it, text.end()) << endl;\n    }\n    \n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cassert>\n#include <cctype>\n#include <cstdlib>\n#include <iostream>\n#include <vector>\nusing namespace std;\n\n#define REP(i, a, b) for(int i = (a); i < (int)(b); ++i)\n#define rep(i, n) REP(i, 0, n)\n\nvoid Forward(const string &text, unsigned &cursor, bool is_char) {\n\tif(is_char) {\n\t\tif(cursor < text.size()) ++cursor;\n\t}\n\telse {\n\t\twhile(cursor < text.size() && text[cursor] == ' ') ++cursor;\n\t\twhile(cursor < text.size() && text[cursor] != ' ') ++cursor;\n\t}\n}\n\nvoid Backward(const string &text, unsigned &cursor, bool is_char) {\n\tif(is_char) {\n\t\tif(cursor > 0) --cursor;\n\t}\n\telse {\n\t\twhile(cursor > 0 && text[cursor - 1] == ' ') --cursor;\n\t\twhile(cursor > 0 && text[cursor - 1] != ' ') --cursor;\n\t}\n}\n\nvoid Insert(string &text, unsigned &cursor, const string &target) {\n\tconst string insert_text = target.substr(1, target.size() - 2);\n\ttext.insert(cursor, insert_text);\n\tcursor += insert_text.size();\n}\n\nvoid Delete(string &text, unsigned cursor, bool is_char) {\n\tif(is_char) {\n\t\tif(cursor < text.size()) text.erase(text.begin() + cursor);\n\t}\n\telse {\n\t\tunsigned idx = cursor;\n\t\tForward(text, idx, false);\n\t\ttext.erase(text.begin() + cursor, text.begin() + idx);\n\t}\n}\n\nstring solve() {\n\tstring text;\n\tgetline(cin, text);\n\n\tint n;\n\tcin >> n;\n\tcin.ignore();\n\n\tunsigned cursor = 0;\n\trep(i, n) {\n\t\tstring line;\n\t\tgetline(cin, line);\n\n\t\tconst unsigned idx_space = line.find(' ');\n\t\tconst string command = line.substr(0, idx_space);\n\t\tconst string target = line.substr(idx_space + 1);\n\n\t\tswitch(command[0]) {\n\t\tcase 'f': Forward(text, cursor, target[0] == 'c'); break;\n\t\tcase 'b': Backward(text, cursor, target[0] == 'c'); break;\n\t\tcase 'i': Insert(text, cursor, target); break;\n\t\tcase 'd': Delete(text, cursor, target[0] == 'c'); break;\n\t\tdefault: assert(false);\n\t\t}\n/*\n\t\tstring tmp = text;\n\t\ttmp.insert(tmp.begin() + cursor, '^');\n\t\tcout << tmp << endl;\n*/\n\t\tassert(0 <= cursor && cursor <= text.size());\n\t}\n\n\ttext.insert(text.begin() + cursor, '^');\n\treturn text;\n}\n\nint main() {\n\tcin.tie(nullptr);\n\tios::sync_with_stdio(false);\n\n\tint t;\n\tcin >> t;\n\tcin.ignore();\n\twhile(t--) cout << solve() << endl;\n\n\treturn EXIT_SUCCESS;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstdlib>\n#include <cmath>\n#include <climits>\n#include <cfloat>\n#include <map>\n#include <utility>\n#include <set>\n#include <iostream>\n#include <memory>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <functional>\n#include <sstream>\n#include <complex>\n#include <stack>\n#include <queue>\n#include <cstring>\n#include <sstream>\n#ifndef M_PI\n#define M_PI 3.1415926535897932384626433832795\n#endif\nusing namespace std;\nstatic const double EPS = 1e-5;\ntypedef long long ll;\ntypedef pair<int,int> PI;\n#define rep(i,n) for(int i=0;i<(int)n;++i)\n#define FOR(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i)\n#define ALL(c) (c).begin(), (c).end()\n#define mp(a,b) make_pair(a,b)\n#define pb(a) push_back(a)\n#define F first\n#define S second\n\nint dx[]={0,1,0,-1};\nint dy[]={1,0,-1,0};\n\nstring in;\nint pos;\n\n\nmain(){\n  int n;\n  cin>>n;\n  cin.ignore();\n  while(n--){\n    pos=0;\n    getline(cin,in);\n    int t;\n    cin>>t;\n    cin.ignore();\n    while(t--){\n      string com;\n      getline(cin,com);\n      if(com==\"forward char\" && pos<in.size())++pos;\n      else if(com==\"backward char\" && pos)--pos;\n      else if(com==\"forward word\"){\n\twhile(pos<in.size() && in[pos]==' ')++pos;\n\twhile(pos<in.size() && in[pos]!=' ')++pos;\n      }else if(com==\"backward word\"){\n\twhile(pos && in[pos]==' ')--pos;\n\twhile(pos && in[pos]!=' ')--pos;\n      }else if(com[0]=='i'){\n\tin.insert(pos,com.substr(8,com.size()-9));\n\tpos+=com.size()-9;\n      }else if(com==\"delete char\"){\n\tin.erase(pos,1);\n      }else if(com==\"delete word\"){\n\tint sz=0;\n\twhile(pos+sz<in.size() && in[pos+sz]==' ')++sz;\n\twhile(pos+sz<in.size() && in[pos+sz]!=' ')++sz;\n\tin.erase(pos,sz);\n      }\n    }\n    rep(i,in.size()){\n      if(i==pos)cout<<'^';\n      cout<<in[i];\n    }\n    if(pos==in.size())cout<<'^';\n    cout<<endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <map>\n#include <set>\n#include <queue>\n#include <list>\n#include <stack>\n#include <algorithm>\n#include <functional>\n#include <numeric>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <climits>\n#include <sstream>\nusing namespace std;\n\n#define REP(i,a,n) for(i=a; i<n; i++)\n#define rep(i,n) REP(i,0,n)\n#define all(x) x.begin(), x.end()\n#define rall(x) x.rbegin(), x.rend()\n#define foreach(it,x) for(typeof(x.begin()) it=x.begin(); it!=x.end(); it++)\n\n/*\n  AOJ :: 1101\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1101&lang=jp\n */\n\n// YET_SYSTEM_TEST\n\nlist<char> buffer;\nlist<char>::iterator it;\n\nvoid build_buffer(const string& in){\n    int i, n = in.length();\n    buffer.clear();\n    rep(i,n) buffer.push_back(in[i]);\n    it = buffer.begin();\n}\n\nvoid forward_char(){\n    if( it != buffer.end() ) it++;\n}\nvoid forward_word(){\n    // óÌê\n    if( it != buffer.end() && *it == ' ' ){\n        while( it != buffer.end() && *it == ' ' ) it++;\n    }\n    while( it != buffer.end() && *it != ' ' ) it++;\n}\n\nvoid backward_char(){\n    if( it != buffer.begin() ) it--;\n}\nvoid backward_word(){\n    if( it == buffer.end() ) it--;\n\n    list<char>::iterator tmp = it;\n    tmp--;\n    if( tmp != buffer.begin() && *tmp == ' ' ){ // PêÌæª¾Á½ê\n        it = tmp;\n    }\n    while( it != buffer.begin() && *it == ' ' ) it--;\n    while( it != buffer.begin() && *it != ' ' ){\n        it--;\n        if( *it == ' ' ){\n            it++; break;\n        }\n    }\n}\n\nvoid delete_char(){\n    if( it != buffer.end() ) it = buffer.erase(it);\n}\nvoid delete_word(){\n    // spaceðí\n    while( it != buffer.end() && *it == ' ' ){\n        it = buffer.erase(it);\n    }\n    while( it != buffer.end() && *it != ' ' ){\n        it = buffer.erase(it);\n    }\n}\n\nvoid insertion(const string& in){\n    int i, n = in.length();\n\n    rep(i,n){\n        buffer.insert(it, in[i]);\n    }\n}\n\nint main(){\n    int T,i,n;\n    string in;\n\n    cin >> T; cin.ignore();\n    while( T-- ){\n        getline(cin, in);\n        cin >> n; cin.ignore();\n\n        build_buffer(in);\n\n        rep(i,n){\n            getline(cin, in);\n            if( in == \"forward char\" ){\n                forward_char();\n            }\n            else if( in == \"forward word\" ){\n                forward_word();\n            }\n            else if( in == \"backward char\" ){\n                backward_char();\n            }\n            else if( in == \"backward word\" ){\n                backward_word();\n            }\n            else if( in.substr(0,6)  == \"insert\" ){\n                string tmp = in.substr(8,in.length() - 9);\n                //cout << tmp << endl;\n                insertion(tmp);\n            }\n            else if( in == \"delete char\" ){\n                delete_char();\n            }\n            else if( in == \"delete word\" ){\n                delete_word();\n            }\n\n            // debug\n            /*\n            printf(\"%d : \", i);\n            foreach(s,buffer){\n                if( s == it ) putchar('^');\n                cout << *s;\n            }\n            if( it == buffer.end() ) putchar('^');\n            cout << endl;\n            */\n        }\n\n        // output\n        foreach(s,buffer){\n            if( s == it ) putchar('^');\n            cout << *s;\n        }\n        if( it == buffer.end() ) putchar('^');\n        cout << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<list>\n#include<cstdlib>\nusing namespace std;\ntypedef list<char>L;\ntypedef L::iterator I;\nint main()\n{\n\tint N,M;\n\tstring cmd,s;\n\tL buf;\n\tI cur;\n\tfor(getline(cin,s),N=atoi(s.c_str());N--;)\n\t{\n\t\tgetline(cin,s);\n\t\tbuf.assign(s.begin(),s.end());\n\t\tcur=buf.begin();\n\t\tfor(getline(cin,s),M=atoi(s.c_str());M--;)\n\t\t{\n\t\t\tgetline(cin,cmd);\n\t\t\tif(cmd==\"forward char\")\n\t\t\t{\n\t\t\t\tif(cur!=buf.end())++cur;\n\t\t\t}\n\t\t\telse if(cmd==\"backward char\")\n\t\t\t{\n\t\t\t\tif(!buf.empty()&&cur!=buf.begin())--cur;\n\t\t\t}\n\t\t\telse if(cmd==\"forward word\")\n\t\t\t{\n\t\t\t\tbool c=0;\n\t\t\t\tfor(;cur!=buf.end();++cur)\n\t\t\t\t{\n\t\t\t\t\tif(*cur==' ')\n\t\t\t\t\t{\n\t\t\t\t\t\tif(c)break;\n\t\t\t\t\t}\n\t\t\t\t\telse c=1;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(cmd==\"backward word\")\n\t\t\t{\n\t\t\t\tbool c=0;\n\t\t\t\tif(!buf.empty()&&cur!=buf.begin())\n\t\t\t\t\tfor(--cur;cur!=buf.begin();--cur)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(*cur==' ')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(c){++cur;break;}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse c=1;\n\t\t\t\t\t}\n\t\t\t}\n\t\t\telse if(cmd==\"delete char\")\n\t\t\t{\n\t\t\t\tif(cur!=buf.end())\n\t\t\t\t{\n\t\t\t\t\tcur=buf.erase(cur);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(cmd==\"delete word\")\n\t\t\t{\n\t\t\t\tI b=cur;\n\t\t\t\tbool c=0;\n\t\t\t\tfor(;cur!=buf.end();++cur)\n\t\t\t\t{\n\t\t\t\t\tif(*cur==' ')\n\t\t\t\t\t{\n\t\t\t\t\t\tif(c)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbuf.erase(b,cur);\n\t\t\t\t\t\t\tc=0;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse c=1;\n\t\t\t\t}\n\t\t\t\tif(c)buf.erase(b,cur);\n\t\t\t}\n\t\t\telse if(cmd.find(\"insert\")!=string::npos)\n\t\t\t{\n\t\t\t\ts=cmd.substr(cmd.find('\"')+1);\n\t\t\t\ts.erase(s.find('\"'));\n\t\t\t\tbuf.insert(cur,s.begin(),s.end());\n\t\t\t}\n\t\t}\n\t\tfor(I i=buf.begin();i!=buf.end();++i)\n\t\t{\n\t\t\tif(i==cur)cout<<'^';\n\t\t\tcout<<*i;\n\t\t}\n\t\tif(buf.end()==cur)cout<<'^';\n\t\tcout<<'\\n';\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cassert>\n#include <iostream>\n#include <cstdio>\n#include <vector>\n#include <algorithm>\n#include <complex>\n#include <cstring>\n#include <cstdlib>\n#include <string>\n#include <cmath>\n#include <queue>\n#include <set>\n#include <map>\nusing namespace std;\n\n#define REP(i,n) for(int i=0;i<(int)n;++i)\n#define FOR(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i)\n#define ALL(c) (c).begin(), (c).end()\nconst int INF = 1<<29;\n\nvoid forwardChar(string &s, int &c) {\n  if (c != s.size()) c++;\n}\nvoid forwardWord(string &s, int &c) {\n  bool state = 0;\n  for (; c<=s.size(); ++c) {\n    if (c == s.size()) return;\n    if (s[c] == ' ') {\n      if (state) return;\n    } else if (state == 0) state = 1;\n  }\n}\nvoid backwardChar(string &s, int &c) {\n  if (c) c--;\n}\nvoid backwardWord(string &s, int &c) {\n  bool state = 0;\n  for (; c>=0; --c) {\n    if (c == s.size()) continue;\n    if (s[c] == ' ') {\n      if (state) break;\n    } else if (!state) state = 1;\n  }\n  if (c<(int)s.size()) {\n    c++;\n  }\n}\nvoid insertText(string &s, int &c, const string &t) {\n  s.insert(c, t);\n  c += t.size();\n}\nvoid deleteChar(string &s, int &c) {\n  if (c != s.size()) s.erase(s.begin()+c);\n}\nvoid deleteWord(string &s, int &c) {\n  bool state = 0;\n  int p = c;\n  for (; p<s.size(); ++p) {\n    if (s[p] == ' ') {\n      if (state) break;\n    } else if (!state) state = 1;\n  }\n  if (state) {\n    if (p>c) s.erase(c,p-c);\n  }\n}\n\nint main() {\n  int n;\n  cin >> n;\n  cin.ignore();\n  while(n--) {\n    string text;\n    getline(cin, text);\n    string mtext;\n    getline(cin,mtext);\n    assert(mtext.size() <= 100);\n    assert(isdigit(mtext[0]));\n    int m = atoi(mtext.c_str());\n    // cout << m << endl;\n    // cout << text << endl;\n    int cursor = 0;\n    while(m--) {\n      string op1, op2;\n      cin >> op1;\n      cin.ignore();\n      getline(cin,op2);\n      // cout << op1 << \" : \" << op2 << endl;\n\n      if (op1[0] == 'f') {\n        if (op2[0] == 'c') forwardChar(text, cursor);\n        else forwardWord(text, cursor);\n      } else if (op1[0] == 'b') {\n        if (op2[0] == 'c') backwardChar(text, cursor);\n        else backwardWord(text, cursor);\n      } else if (op1[0] == 'i') {\n        assert(op2[0]=='\"' && op2[op2.size()-1]=='\"');\n        op2 = op2.substr(1, op2.size()-2);\n        insertText(text, cursor, op2);\n      } else {\n        if (op2[0] == 'c') deleteChar(text, cursor);\n        else deleteWord(text, cursor);\n      }\n      // cout << text << \" \" << cursor << endl;\n    }\n\n    text.insert(cursor, \"^\");\n    cout << text << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <sstream>\n#include <algorithm>\nusing namespace std;\n\nstring s;\nint nextWordToFor(int cur)\n{\n\tif(cur==s.size()) return cur;\n\n\tfor(; cur<s.size(); cur++)\n\t{\n\t\tif(s[cur]!=' ') break;\n\t}\n\tfor(; cur<s.size(); cur++)\n\t{\n\t\tif(s[cur]==' ') break;\n\t}\n\n\treturn cur;\n}\n\nint nextWordToDel(int cur)\n{\n\tint tcur=nextWordToFor(cur);\n\n\treturn tcur;\n}\n\nint prevWordToBak(int cur)\n{\n\tif(cur==0) return cur;\n\tcur--;\n\n\tfor(; cur>0; cur--)\n\t{\n\t\tif(s[cur]!=' ') break;\n\t}\n\tfor(; cur>0; cur--)\n\t{\n\t\tif(s[cur]==' ') \n\t\t{\n\t\t\tcur++;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn cur;\n}\n\nint main()\n{\n\tint N;\n\tcin >> N;\n\t\n\tgetline(cin, s);\n\twhile(N--)\n\t{\n\t\tint cur=0;\n\t\tgetline(cin, s);\n\t\n\t\tint C;\n\t\tcin >> C;\n\t\twhile(C--)\n\t\t{\n\t\t\tstring c,cmd,obj;\n\t\t\tcin >> cmd;\n\t\t\tgetchar();\n\t\t\tgetline(cin, obj);\n\n\t\t\tif(cmd[0]=='f')\n\t\t\t{\n\t\t\t\tif(obj[0]=='c') \n\t\t\t\t{\n\t\t\t\t\tif(cur<s.size()) cur++;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tcur=nextWordToFor(cur);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(cmd[0]=='b')\n\t\t\t{\n\t\t\t\tif(obj[0]=='c') \n\t\t\t\t{\n\t\t\t\t\tif(cur>0) cur--;\n\t\t\t\t}\n\t\t\t\telse cur = prevWordToBak(cur);\n\t\t\t}\n\t\t\tif(cmd[0]=='d')\n\t\t\t{\n\t\t\t\tif(obj[0]=='c')\n\t\t\t\t{\n\t\t\t\t\tif(cur==s.size()) continue;\n\t\t\t\t\ts.erase(s.begin()+cur);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tint cur2;\n\t\t\t\t\tcur2=nextWordToFor(cur);\n\t\t\t\t\tif(cur==s.size()) continue;\n\t\t\t\t\tif(s[cur2-1]==' ') continue;\n\n\t\t\t\t\ts.erase(s.begin()+cur, s.begin()+cur2);\t\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(cmd[0]=='i')\n\t\t\t{\n\t\t\t\tobj = obj.substr(1, obj.size()-2);\n\t\t\t\ts.insert(cur, obj);\n\t\t\t\tcur += obj.size();\n\t\t\t}\n\t\t\tstring h(s);\n\t\t\th.insert(cur, \"7\");\n\t\t\t//cout << h << endl;\n\t\t}\n\n\t\ts.insert(cur, \"^\");\n\t\tcout << s << endl;\n\t}\n\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define FOR(i,a,b) for(int i=(a);i<(b);++i)\n#define rep(i,n)   FOR(i,0,n)\n#define pb push_back\n#define mp make_pair\ntypedef long long ll;\ntypedef pair<int,int> pint;\n\nint main(){\n    int n,m;\n    string s,q;\n    cin>>n;cin.ignore();\n    while(n--){\n        int cur=0;\n        string t(\"^\");\n        getline(cin,s);\n        s=t+s;\n        cin>>m;cin.ignore();\n        rep(i,m){\n            getline(cin,q);\n            if(q==\"forward char\"){\n                if(cur<s.size()-1) {\n                    swap(s[cur],s[cur+1]);\n                    ++cur;\n                } \n            }\n            else if(q==\"forward word\"){\n                int spcnt=(s[cur+1]!=' ')?1:0;\n                while(cur<s.size()-1){\n                    if(s[cur+1]==' '){\n                        ++spcnt;\n                        if(spcnt==2) break;\n                        while(s[cur+1]==' '){\n                            swap(s[cur],s[cur+1]);\n                            ++cur;\n                        } \n                    }\n                    if(cur<s.size()-1){\n                    swap(s[cur],s[cur+1]);\n                    ++cur;\n                    }\n                }\n            }\n            else if(q==\"backward char\"){\n                if(cur>0) {\n                    swap(s[cur],s[cur-1]);\n                    --cur;\n                } \n            }\n            else if(q==\"backward word\"){\n                int spcnt=(s[cur-1]!=' ')?1:0;;\n                while(cur>0){\n                    if(s[cur-1]==' '){\n                        ++spcnt;\n                        if(spcnt==2) break;\n                        while(s[cur-1]==' '){\n                            swap(s[cur],s[cur-1]);\n                            --cur;\n                        }\n                    }\n                    if(cur>0){\n                    swap(s[cur],s[cur-1]);\n                    --cur;\n                    }\n                }\n            }\n            else if(q[0]=='i'){\n                s.insert(cur,q,8,q.size()-9);\n                cur +=q.size()-9;\n            }\n            else if(q==\"delete char\"){\n                if(cur<s.size()-1){\n                s.erase(cur+1,1);\n                }\n            }\n            else if(q==\"delete word\"){\n                int spcnt=(s[cur+1]!=' ')?1:0,tm=cur;\n                while(tm<s.size()-1){\n                    if(s[tm+1]==' '){\n                        ++spcnt;\n                        if(spcnt==2) break;\n                        while(tm<s.size()-1&&s[tm+1]==' '){\n                            swap(s[tm],s[tm+1]);\n                            ++tm;\n                        } \n                    }\n                    if(tm==s.size()-1&&s[tm-1]==' '){\n                        while(cur!=tm){\n                            swap(s[tm],s[tm-1]);\n                            --tm;\n                        }\n                        break;\n                    }\n                    if(tm<s.size()-1){\n                        swap(s[tm],s[tm+1]);++tm;\n                    }     \n                }\n                while(tm!=cur){\n                    s.erase(tm-1,1);\n                    --tm;\n                }\n            }\n        }\n        cout<<s<<endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <list>\n#include <string>\n\nusing namespace std;\n\nvoid printlst(list<char> str){\n  for(list<char>::iterator i=str.begin(); i!=str.end(); i++)\n    cout << *i;\n  cout << endl;\n}\n\nint main(){\n  int n;\n  cin >> n;\n  for(int i=0; i<n; i++){\n    int m;\n    list<char> str;\n    string sstr;\n    getline(cin,sstr);    getline(cin,sstr);\n    cin >> m;\n\n    for(int i=0; i<sstr.size(); i++) str.push_back(sstr[i]);\n    list<char>::iterator cur=str.begin();\n    //    printlst(str);\n\n    for(int j=0; j<m; j++){\n      string op1,op2;\n      cin >> op1;\n      if(op1==\"insert\"){\n\tchar c;\n\twhile((c=getchar())!='\"') ;\n\twhile((c=getchar())!='\"') op2+=c;\n\tfor(int i=0; i<op2.size(); i++)\n\t  str.insert(cur,op2[i]);\n      }else{\n\tcin >> op2;\n\tif(op1==\"forward\"){\n\t  if(op2==\"char\"){\n\t    if(cur!=str.end())\n\t      cur++;\n\t  }else{\n\t    while(*cur==' ') cur++;\n\t    while(true){\n\t      if(*cur==' ' || cur==str.end())\n\t\tbreak;\n\t      cur++;\n\t    }\n\t  }\n\t}else if(op1==\"backward\"){\n\t  if(op2==\"char\"){\n\t    if(cur!=str.begin())\n\t      cur--;\n\t  }else{\n\t    if(cur!=str.begin())\n\t      cur--;\n\t    while(*cur==' ') cur--;\n\t    while(true){\n\t      if(*cur==' '){\n\t\tcur++;\n\t\tbreak;\n\t      }else if(cur==str.begin()){\n\t\tbreak;\n\t      }\n\t      cur--;\n\t    }\n\t  }\n\t}else if(op1==\"delete\"){\n\t  if(op2==\"char\"){\n\t    if(cur!=str.end())\n\t      str.erase(cur++);\n\t  }else{\n\t    list<char>::iterator cur2=cur;\n\t    while(*cur2==' ') cur2++;\n\t    if(cur2!=str.end()){\n\t      while(*cur==' ') str.erase(cur++);\n\t      while(true){\n\t\tif(*cur==' ' || cur==str.end())\n\t\t  break;\n\t\tstr.erase(cur++);\n\t      }\n\t    }\n\t  }\n\t}\n      }\n      // str.insert(cur,'^');\n      // printlst(str);\n      // str.erase((--cur)++);\n    }\n\n    str.insert(cur,'^');\n    printlst(str);\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cmath>\n#include <string>\n\nusing namespace std;\nint main(){\n\tint n,r;\n\tcin >> n;\n\tcin.ignore();\n\twhile(n--){\n\t\tint cur = 0;\n\t\tstring text, command;\n\t\tgetline(cin, text);\n\t\tint len = text.size();\n\t\tcin\t>> r;\n\t\tcin.ignore();\n\t\twhile(r--){\n\t\t\tgetline(cin, command);\n\t\t\tif(command == \"forward char\"){\n\t\t\t\tcur=min(len, cur+1);\n\t\t\t}else if(command == \"forward word\"){\n\t\t\t\tfor(;cur<len && text[cur] == ' '; cur++);\n\t\t\t\tfor(;cur<len && text[cur] != ' '; cur++);\n\t\t\t}else if(command == \"backward char\"){\n\t\t\t\tcur=max(0, cur-1);\n\t\t\t}else if(command == \"backward word\"){\n\t\t\t\tfor(;cur>0 && text[cur-1] == ' '; cur--);\n\t\t\t\tfor(;cur>0 && text[cur-1] != ' '; cur--);\n\t\t\t}else if(command == \"delete char\"){\n\t\t\t\tif(cur>=len) continue;\n\t\t\t\ttext.erase(text.begin()+cur);\n\t\t\t\tlen--;\n\t\t\t}else if(command == \"delete word\"){\n\t\t\t\tint s = cur;\n\t\t\t\tfor(;s<len && text[s] == ' '; s++);\n\t\t\t\tfor(;s<len && text[s] != ' ';){\n\t\t\t\t\ttext.erase(text.begin()+s);\n\t\t\t\t\tlen--;\n\t\t\t\t}\n\t\t\t}else{//insert\n\t\t\t\tstring ins;\n\t\t\t\tint s = command.find('\"');\n\t\t\t\tint t = command.find('\"',s+1);\n\t\t\t\tins = command.substr(s+1,t-s-1);\n\t\t\t\ttext.insert(cur,ins);\n\t\t\t\tlen+=t-s-1;\n\t\t\t\tcur+=t-s-1;\n\t\t\t}\n\t\t\t\n\t\t}\n\t\ttext.insert(text.begin()+cur,'^');\n\t\tcout << text;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<cstring>\n#include<algorithm>\n\n#define rep(i,n) for(int i=0;i<(n);i++)\n\nusing namespace std;\n\nint main(){\n\tint T; scanf(\"%d%*c\",&T);\n\twhile(T--){\n\t\tchar s[1024]; fgets(s,200,stdin);\n\t\tint len=strlen(s);\n\t\ts[--len]='\\0';\n\n\t\tint cur=0;\n\t\tint m; scanf(\"%d\",&m);\n\t\twhile(m--){\n\t\t\tchar cmd[9]; scanf(\"%s \",cmd);\n\t\t\tchar arg[200]; fgets(arg,200,stdin); arg[strlen(arg)-1]='\\0';\n\n\t\t\tif(cmd[0]=='f' && arg[0]=='c'){ // forward char\n\t\t\t\tcur=min(cur+1,len);\n\t\t\t}\n\t\t\telse if(cmd[0]=='f' && arg[0]=='w'){ // forward word\n\t\t\t\tfor(;cur<len;cur++) if(s[cur]!=' ') break;\n\t\t\t\tfor(;cur<len;cur++) if(s[cur]==' ') break;\n\t\t\t}\n\t\t\telse if(cmd[0]=='b' && arg[0]=='c'){ // backward char\n\t\t\t\tcur=max(cur-1,0);\n\t\t\t}\n\t\t\telse if(cmd[0]=='b' && arg[0]=='w'){ // backward word\n\t\t\t\tfor(;cur>0;cur--) if(s[cur-1]!=' ') break;\n\t\t\t\tfor(;cur>0;cur--) if(s[cur-1]==' ') break;\n\t\t\t}\n\t\t\telse if(cmd[0]=='d' && arg[0]=='c'){ // delete char\n\t\t\t\tif(cur<len){\n\t\t\t\t\tfor(int i=cur;i<len;i++) s[i]=s[i+1];\n\t\t\t\t\tlen--;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(cmd[0]=='d' && arg[0]=='w'){ // delete word\n\t\t\t\tif(cur<len){\n\t\t\t\t\tint i=cur;\n\t\t\t\t\tfor(;i<len;i++) if(s[i]!=' ') break;\n\t\t\t\t\tfor(;i<len;i++) if(s[i]==' ') break;\n\t\t\t\t\trep(j,len-i+1) s[cur+j]=s[i+j];\n\t\t\t\t\tlen-=i-cur;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse{ // insert\n\t\t\t\t// \"\" ðí\n\t\t\t\tint len2=strlen(arg);\n\t\t\t\trep(i,len2-2) arg[i]=arg[i+1];\n\t\t\t\tlen2-=2;\n\t\t\t\targ[len2]='\\0';\n\n\t\t\t\tfor(int i=len;i>=cur;i--) s[i+len2]=s[i];\n\t\t\t\trep(i,len2) s[cur+i]=arg[i];\n\t\t\t\tcur+=len2;\n\t\t\t\tlen+=len2;\n\t\t\t}\n\t\t}\n\n\t\trep(i,len+1){\n\t\t\tif(i==cur) putchar('^');\n\t\t\tif(i<len) putchar(s[i]);\n\t\t}\n\t\tputchar('\\n');\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#include<string.h>\nchar a[10000];\nint cur=0;\nint get_fb(char x[])\n{\n\tif(x[0] == 'f')\n\t\treturn 0;\n\telse if(x[0] == 'b')\n\t\treturn 1;\n\telse if(x[0] == 'd')\n\t\treturn 2;\n\telse return 3;\n}\nchar *get_nc(char x[])\n{\n\tint i, j;\n\tchar nc[1000];\n\tfor(i=0;x[i]>32;i++);\n\tfor(;x[i]==32;i++);\n\ti++;\n\tfor(j=0;x[i]!='\"';j++,i++)\n\t\tnc[j] = x[i];\n\tnc[j] = 0;\n\treturn nc;\n}\nint get_cw(char x[])\n{\n\tint i, j;\n\tfor(i=0;x[i]>32;i++);\n\tfor(;x[i]==32;i++);\n\tif(x[i]=='c')return 0;\n\telse return 1;\n}\nvoid insert(char nc[])\n{\n\tint i, j;\n\tfor(j=0;nc[j];j++)\n\t{\n\t\tfor(i=cur;a[i];i++);\n\t\tfor(;i>cur;i--)\n\t\t\ta[i] = a[i-1];\n\t\ta[cur] = nc[j];\n\t\tcur++;\n\t}\n}\nvoid doit(int x,int y)\n{\n\tint i, j;\n\tif(x==0)\t\t// for\n\t{\n\t\tif(a[cur+1])\n\t\t{\n\t\t\tif(y==0)\n\t\t\t{\n\t\t\t\ta[cur]=a[cur+1];\n\t\t\t\ta[cur+1]='^';\n\t\t\t\tcur++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tj=cur+1;\n\t\t\t\twhile(a[j] && a[j]==32)j++;\n\t\t\t\twhile(a[j] && a[j]>32)j++;\n\t\t\t\tfor(i=cur;i<j;i++)\n\t\t\t\t\ta[i]=a[i+1];\n\t\t\t\ta[j-1]='^';\n\t\t\t\tcur = j-1;\n\t\t\t}\n\t\t}\n\t}\n\telse if(x==1)\t// back\n\t{\n\t\tif(cur>0)\n\t\t{\n\t\t\tif(y==0)\n\t\t\t{\n\t\t\t\ta[cur] = a[cur-1];\n\t\t\t\ta[cur-1] = '^';\n\t\t\t\tcur--;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tj = cur-1;\n\t\t\t\twhile(j>=0 && a[j]== 32)j--;\n\t\t\t\twhile(j>=0 && a[j]>32)j--;\n\t\t\t\tfor(i=cur;i>j;i--)\n\t\t\t\t\ta[i]=a[i-1];\n\t\t\t\ta[j+1]='^';\n\t\t\t\tcur = j+1;\n\t\t\t}\n\t\t}\n\t}\n\telse if(x==2)\t// del\n\t{\n\n\t\tif(y==0)\n\t\t{\n\t\t\tfor(i=cur;a[i];i++)\n\t\t\t{\n\t\t\t\ta[i] = a[i+1];\n\t\t\t}\n\t\t\ta[cur] = '^';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tj=cur+1;\n\t\t\tint k=0;\n\t\t\twhile(a[j] && a[j]==32)j++;\n\t\t\twhile(a[j] && a[j]>32){j++;k=1;}\n\t\t\tj--;\n\t\t\tif(k)\n\t\t\t{\n\t\t\t\tfor(i=cur;a[i];i++,j++)\n\t\t\t\t\ta[i]=a[j];\n\t\t\t\ta[cur] = '^';\n\t\t\t}\n\t\t}\n\t}\n}\nint main()\n{\n\tint t;\n\tscanf(\"%d\\n\",&t);\n\twhile(t--)\n\t{\n\t\tmemset(a,0,sizeof(a));\n\t\tgets(a+1);\n\t\tcur=0;\n\t\ta[0] = '^';\n\t\tint m;\n\t\tscanf(\"%d\\n\",&m);\n\t\twhile(m--)\n\t\t{\n\t\t\tchar comand[1000];\n\t\t\tchar *nc;\n\t\t\tgets(comand);\n\t\t\tint x = get_fb(comand);\n\t\t\tif(x==3)\n\t\t\t{\n\t\t\t\tnc = get_nc(comand);\n\t\t\t\tinsert(nc);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tint y;\n\t\t\t\ty = get_cw(comand);\n\t\t\t\tdoit(x,y);\n\t\t\t}\n\t\t\t//printf(\"%s\\n\",a);\n\t\t}\n\t\tprintf(\"%s\\n\",a);\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <string>\n#include <sstream>\nusing namespace std;\n\nint main() {\n  int Tc;\n  cin >> Tc;\n  cin.ignore();\n  for(int tc = 0; tc < Tc; ++tc) {\n    string text;\n    getline(cin, text);\n    int M;\n    cin >> M;\n    cin.ignore();\n    int cursor = 0;\n    while(M--) {\n      string a, b;\n      {\n\tstring line;\n\tgetline(cin, line);\n\tfor(int i = 0; i < line.size(); ++i) {\n\t  if(line[i] == ' ') {\n\t    a = line.substr(0, i);\n\t    b = line.substr(i+1);\n\t    break;\n\t  }\n\t}\n      }\n      int N = text.size();\n      if(0) {\n      } else if(a == \"forward\" && b == \"char\") {\n\tcursor = min(cursor+1, N);\n      } else if(a == \"forward\" && b == \"word\") {\n\tfor(; cursor < N && text[cursor] == ' '; ++cursor);\n\tfor(; cursor < N && text[cursor] != ' '; ++cursor);\n      } else if(a == \"backward\" && b == \"char\") {\n\tcursor = max(cursor-1, 0);\n      } else if(a == \"backward\" && b == \"word\") {\n\tfor(; cursor > 0 && text[cursor-1] == ' '; --cursor);\n\tfor(; cursor > 0 && text[cursor-1] != ' '; --cursor);\n      } else if(a == \"insert\") {\n\tb = b.substr(1, b.size()-2);\n\ttext.insert(cursor, b);\n\tcursor += b.size();\n      } else if(a == \"delete\" && b == \"char\") {\n\ttext.erase(cursor, 1);\n      } else if(a == \"delete\" && b == \"word\") {\n\tint begin = cursor;\n\tint end;\n\tfor(end = cursor; end < N && text[end] == ' '; ++end);\n\tfor(; end < N && text[end] != ' '; ++end);\n\ttext.erase(begin, end-begin);\n      }\n    }\n    text.insert(cursor, \"^\");\n    cout << text << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint main() {\n    int N;\n    cin >> N;\n    cin.ignore();\n\n    while(N--) {\n        string str;\n        getline(cin, str);\n        int cursor = 0;\n        int M;\n        cin >> M;\n        cin.ignore();\n\n        while(M--) {\n            string cmdline;\n            getline(cin, cmdline);\n\n            int delim = cmdline.find(' ');\n            string cmd = cmdline.substr(0, delim);\n            string target = cmdline.substr(delim+1);\n            if(cmd == \"forward\") {\n                if(target == \"word\") {\n                    while(cursor < str.size() && str[cursor] == ' ') ++cursor;\n                    while(cursor < str.size() && str[cursor] != ' ') ++cursor;\n                }\n                else if(target == \"char\") {\n                    if(cursor < str.size()) ++cursor;\n                }\n                else {\n                    cerr << \"Unknown target in forward: \" << target << endl;\n                }\n            }\n            else if(cmd == \"backward\") {\n                if(target == \"word\") {\n                    while(cursor > 0 && str[cursor] == ' ') --cursor;\n                    while(cursor > 0 && str[cursor] != ' ') --cursor;\n                    if(str[cursor] == ' ' && str[cursor+1] != ' ') ++cursor;\n                }\n                else if(target == \"char\") {\n                    if(cursor > 0) --cursor;\n                }\n                else {\n                    cerr << \"Unknown target in backward: \" << target << endl;\n                }\n            }\n            else if(cmd == \"delete\") {\n                if(target == \"word\") {\n                    int idx = cursor;\n                    bool ok = false;\n                    while(idx < str.size() && str[idx] == ' ') ++idx;\n                    while(idx < str.size() && str[idx] != ' ') {++idx; ok = true; }\n                    if(ok) {\n                        str.erase(cursor, idx-cursor);\n                    }\n                }\n                else if(target == \"char\") {\n                    if(cursor >= str.size()) continue;\n                    str.erase(cursor, 1);\n                }\n                else {\n                    cerr << \"Unknown target in delete: \" << target << endl;\n                }\n            }\n            else if(cmd == \"insert\") {\n                str = str.substr(0, cursor) + target.substr(1, target.size()-2) + str.substr(cursor);\n                cursor += target.size()-2;\n            }\n            else {\n                //cerr << \"Unknown command: \" << cmd << endl;\n            }\n            //cout << cmdline << endl;\n            //cout << \"\\t\" << str.substr(0, cursor) << '^' << str.substr(cursor) << endl;\n        }\n        cout << str.substr(0, cursor) << '^' << str.substr(cursor) << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdlib>\n#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring text;\nint cursor;\n\nvoid forward_char()\n{\n\tif (cursor < text.length()) ++cursor;\n}\n\nvoid backward_char()\n{\n\tif (0 < cursor) --cursor;\n}\n\nvoid forward_word()\n{\n\twhile (cursor < text.length() && text[cursor] == ' ') ++cursor;\n\twhile (cursor < text.length() && text[cursor] != ' ') ++cursor;\n}\n\nvoid backward_word()\n{\n\twhile (0 < cursor && text[cursor] == ' ') --cursor;\n\twhile (0 < cursor && text[cursor - 1] != ' ') --cursor;\n}\n\nvoid insert_text(const string &str)\n{\n\ttext.insert(cursor, str);\n\tcursor += str.length();\n}\n\nvoid delete_char()\n{\n\tif (cursor < text.length()) text.erase(cursor, 1);\n}\n\nvoid delete_word()\n{\n\twhile (cursor < text.length() && text[cursor] == ' ') text.erase(cursor, 1);\n\twhile (cursor < text.length() && text[cursor] != ' ') text.erase(cursor, 1);\n}\n\nstring get_insert_string(const string &str)\n{\n\tint i = str.find('\"'), j = str.rfind('\"');\n\treturn str.substr(i + 1, j - i - 1);\n}\n\nint main()\n{\n\tstring line;\n\n\tint N;\n\tgetline(cin, line);\n\tN = atoi(line.c_str());\n\twhile(N-->0)\n\t{\n\t\tgetline(cin, text);\n\n\t\tcursor = 0;\n\n\t\tgetline(cin, line);\n\t\tint M = atoi(line.c_str());\n\t\tfor (int i = 0; i < M; i++)\n\t\t{\n\t\t\tgetline(cin, line);\n\t\t\tif (line == \"forward char\") forward_char();\n\t\t\telse if (line == \"forward word\") forward_word();\n\t\t\telse if (line == \"backward char\") backward_char();\n\t\t\telse if (line == \"backward word\") backward_word();\n\t\t\telse if (line == \"delete char\") delete_char();\n\t\t\telse if (line == \"delete word\") delete_word();\n\t\t\telse if (line.compare(0, 6, \"insert\") == 0)\n\t\t\t\tinsert_text(get_insert_string(line));\n\t\t}\n\t\tcout << text.substr(0, cursor) << \"^\" << text.substr(cursor) << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <climits>\n#include <cfloat>\n#include <ctime>\n#include <cassert>\n#include <map>\n#include <utility>\n#include <set>\n#include <iostream>\n#include <memory>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <functional>\n#include <sstream>\n#include <complex>\n#include <stack>\n#include <queue>\n#include <numeric>\n#include <list>\n#include <iomanip>\n#include <iterator>\n \nusing namespace std;\n \ntypedef long long ll;\ntypedef pair<int,int> Pii;\ntypedef pair<ll,ll> Pll;\n \n#define FOR(i,n) for(int i = 0; i < (n); i++)\n#define sz(c) ((int)c.size())\n\ntypedef unsigned long long ull;\nconst int INF = (int)1e8;\n\nvoid operate(string &val,int &cur,string op){\n\tint n = sz(val);\n\tif(op == \"forward char\"){\n\t\tif(cur != n) cur++;\n\t} else if(op == \"forward word\"){\n\t\tif(cur != n){\n\t\t\twhile(cur < n && val[cur] == ' ') cur++;\n\t\t\twhile(cur < n && val[cur] != ' ') cur++; \n\t\t}\n\t} else if(op == \"backward char\"){\n\t\tif(cur != 0) cur--;\n\t} else if(op == \"backward word\"){\n\t\tif(cur != 0){\n\t\t\twhile(cur > 0 && val[cur-1] == ' ') cur--; \n\t\t\twhile(cur > 0 && val[cur-1] != ' ') cur--; \n\t\t}\n\t} else if(op == \"delete char\"){\n\t\tif(cur != n)\n\t\t\tval.erase(cur,1);\n\t} else if(op == \"delete word\"){\n\t\tif(cur != n){\n\t\t\tint pos = cur;\n\t\t\twhile(pos != n && val[pos] == ' ') pos++;\n\t\t\twhile(pos != n && val[pos] != ' ') pos++;\n\t\t\tval.erase(val.begin() + cur,val.begin() + pos);\n\t\t}\n\t} else {\n\t\tstring a = op.substr(8);\n\t\ta.erase(a.end()-1);\n\t\tval.insert(val.begin() + cur,a.begin(),a.end());\n\t\tcur += a.size();\n\t}\n}\n\nint main(){\n\tint t; cin>>t;\n\tstring buf;\n\tgetline(cin,buf);\n\twhile(t--){\n\t\tstring val; getline(cin,val);\n\t\tint m; cin>>m;\n\t\tgetline(cin,buf);\n\t\tvector<string> op(m); FOR(i,m) getline(cin,op[i]);\n\t\tint cur = 0;\n\t\tFOR(i,m){\n\t\t\toperate(val,cur,op[i]);\n\t\t}\n\n\t\tval.insert(val.begin() + cur,'^');\n\t\tcout << val;\n\t\tif(t) cout << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nvoid setPos(string &buff,int &pos){\n    for(int i = 0; i < buff.size(); i++){\n        if(buff[i]=='^'){\n            pos=i;\n            return;\n        }\n    }\n}\n\nint main(){\n    int n;\n    cin>>n;\n    string gb;\n    getline(cin,gb);\n    while(n--){\n        string buff;\n        getline(cin,buff);\n        int m;\n        cin>>m;\n        getline(cin,gb);\n        int pos=0;\n        buff='^'+buff;\n        while(m--){\n            string op;\n            getline(cin,op);\n            if(op==\"forward char\"){\n                if(pos!=buff.size()-1){\n                    swap(buff[pos],buff[pos+1]);\n                    pos++;\n                }\n            }\n            else if(op==\"forward word\"){\n                // ツ右ツづ可閉カツ篠堋づーツ探ツつオツづ可つ「ツつォツ、ツ個ゥツづつつゥツづつスツづァツつサツづ個閉カツ篠堋療アツづ個催渉可づ個暗環置ツづ慊づカツーツソツδ仰づーツ暗堋督ョ\n                if(pos!=buff.size()-1){\n                    int initPos=pos;\n                    pos++;\n                    while(pos<buff.size()&&buff[pos]==' ')pos++;\n                    while(pos<buff.size()&&buff[pos]!=' ')pos++;\n                    buff=buff.substr(0,initPos)+buff.substr(initPos+1);\n                    if(pos-1==buff.size())\n                        buff+='^';\n                    else{\n                        pos--;\n                        buff=buff.substr(0,pos)+'^'+buff.substr(pos);\n                    }\n                    setPos(buff,pos);\n                }\n            }\n            else if(op==\"backward char\"){\n                if(pos!=0){\n                    swap(buff[pos],buff[pos-1]);\n                    setPos(buff,pos);\n                }\n            }\n            else if(op==\"backward word\"){\n                if(pos!=0){\n                    int initPos=pos;\n                    pos--;\n                    while(pos>=0&&buff[pos]==' ')pos--;\n                    while(pos>=0&&buff[pos]!=' ')pos--;\n                    buff=buff.substr(0,initPos)+buff.substr(initPos+1);\n                    if(pos==-1)\n                        buff='^'+buff;\n                    else{\n                        pos++;\n                        buff=buff.substr(0,pos)+'^'+buff.substr(pos);\n                    }\n                    setPos(buff,pos);\n                }\n            }\n            else if(op==\"delete char\"){\n                if(pos!=buff.size()-1)\n                    buff=buff.substr(0,pos+1)+buff.substr(pos+2);\n                setPos(buff,pos);\n            }\n            else if(op==\"delete word\"){\n                int initPos=pos;\n                if(pos!=buff.size()-1){\n                    while(pos<buff.size()&&buff[pos]==' ')pos++;\n                    while(pos<buff.size()&&buff[pos]!=' ')pos++;\n                    if(pos==buff.size())\n                        buff=buff.substr(0,pos+1);\n                    else\n                        buff=buff.substr(0,initPos+1)+buff.substr(pos);\n                    setPos(buff,pos);\n                }\n            }\n            else if(op.substr(0,6)==\"insert\"){\n                string ins=op.substr(7);\n                ins=ins.substr(1);\n                ins=ins.substr(0,ins.size()-1);\n                buff=buff.substr(0,pos)+ins+'^'+buff.substr(pos+1);\n                setPos(buff,pos);\n            }\n        }\n        cout<<buff<<endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <stdlib>\n#include <string>\nusing namespace std;\n\nint main()\n{\n\tint N,n,c;\n\tstring str,cmd;\n\n\tgetline(cin,cmd);\n\tN=atoi(cmd.c_str());\n\twhile(N--)\n\t{\n\t\tc=0;\n\t\tgetline(cin,str);\n\t\tgetline(cin,cmd);\n\t\tn=atoi(cmd.c_str());\n\t\twhile(n--)\n\t\t{\n\t\t\tgetline(cin,cmd);\n\t\t\tif(cmd==\"forward char\")\n\t\t\t{\n\t\t\t\tif(c<str.size()) c++;\n\t\t\t}\n\t\t\telse if(cmd==\"forward word\")\n\t\t\t{\n\t\t\t\tbool ws = false;\n\t\t\t\twhile(c<str.size())\n\t\t\t\t{\n\t\t\t\t\tif(str[c]!=' ') \n\t\t\t\t\t{\n\t\t\t\t\t\tws=true;\n\t\t\t\t\t}\n\t\t\t\t\telse if(ws)\n\t\t\t\t\t{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tc++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(cmd==\"backward char\")\n\t\t\t{\n\t\t\t\tif(0<c) c--;\n\t\t\t}\n\t\t\telse if(cmd==\"backward word\")\n\t\t\t{\n\t\t\t\tbool ws = false;\n\t\t\t\twhile(0<c)\n\t\t\t\t{\n\t\t\t\t\tif(str[c]!=' ') \n\t\t\t\t\t{\n\t\t\t\t\t\tws=true;\n\t\t\t\t\t}\n\t\t\t\t\telse if(ws)\n\t\t\t\t\t{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tc--;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(cmd==\"delete char\")\n\t\t\t{\n\t\t\t\tif(c<str.size())\n\t\t\t\tstr.erase(str.begin()+c);\n\t\t\t}\n\t\t\telse if(cmd==\"delete word\")\n\t\t\t{\n\t\t\t\tint t=c; bool ws=false;\n\t\t\t\twhile(t<str.size())\n\t\t\t\t{\n\t\t\t\t\tif(str[t]!=' ') \n\t\t\t\t\t{\n\t\t\t\t\t\tws=true;\n\t\t\t\t\t}\n\t\t\t\t\telse if(ws)\n\t\t\t\t\t{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tt++;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(ws)\n\t\t\t\t{\n\t\t\t\t\tstr.erase(str.begin()+c,str.begin()+t);\n\t\t\t\t}\n\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcmd.erase(0,8);\n\t\t\t\tcmd.erase(cmd.end()-1);\n\t\t\t\tstr.insert(c,cmd);\n\t\t\t\tc += cmd.size();\n\t\t\t}\n\t\t}\n\n\t\tstr.insert(c,\"^\");\n\t\tcout << str << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nint main(){\n    int n;\n    cin >> n;\n    string tmp;\n    getline(cin, tmp);\n    for(int rep=0; rep<n; rep++){\n        int p = 0;\n        string s;\n        getline(cin, s);\n        s = \"^\" + s;\n        int m;\n        cin >> m;\n        getline(cin, tmp);\n        for(int i=0; i<m; i++){\n            string cmd;\n            getline(cin, cmd);\n            int len = s.length();\n            if(cmd == \"forward char\"){\n                if(p < len-1){\n                    swap(s[p], s[p+1]);\n                    p++;\n                }\n            }else if(cmd == \"backward char\"){\n                if(p > 0){\n                    swap(s[p], s[p-1]);\n                    p--;\n                }\n            }else if(cmd == \"delete char\"){\n                if(p < len-1){\n                    s.erase(s.begin()+p+1);\n                }\n            }else if(cmd == \"forward word\"){\n                while(p<len-1 and s[p+1]==' '){\n                    swap(s[p], s[p+1]);\n                    p++;\n                }\n                while(p<len-1 and s[p+1]!=' '){\n                    swap(s[p], s[p+1]);\n                    p++;\n                }\n            }else if(cmd == \"backward word\"){\n                while(p>0 and s[p-1]==' '){\n                    swap(s[p], s[p-1]);\n                    p--;\n                }\n                while(p>0 and s[p-1]!=' '){\n                    swap(s[p], s[p-1]);\n                    p--;\n                }\n            }else if(cmd == \"delete word\"){\n                int ptr = p;\n                while(ptr<len-1 and s[ptr+1]==' '){\n                    ptr++;\n                }\n                int head = ptr;\n                while(ptr<len-1 and s[ptr+1]!=' '){\n                    ptr++;\n                }\n                if(head != ptr){\n                    s.erase(s.begin()+p+1, s.begin()+ptr+1);\n                }\n            }else{\n                string ins = cmd.substr(8, cmd.length()-9);\n                s.insert(s.begin()+p, ins.begin(), ins.end());\n                p += ins.length();\n            }\n        }\n        cout << s << endl;\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#include<algorithm>\n#include<string.h>\nusing namespace std;\nchar str[11000];\nchar in[11000];\nint main(){\n\tint T;scanf(\"%d\",&T);gets(in);\n\twhile(T--){\n\t\tfor(int i=0;i<11000;i++)str[i]=0;\n\t\tgets(str);\n\t\tint a;scanf(\"%d\",&a);gets(in);\n\t\tint at=0;\n\t\tfor(int i=0;i<a;i++){\n\t\t\tgets(in);\n\t\t\tif(in[0]=='f'){\n\t\t\t\tif(in[8]=='c'){\n\t\t\t\t\tif(str[at])at++;\n\t\t\t\t}else{\n\t\t\t\t\twhile(str[at]==' ')at++;\n\t\t\t\t\twhile(str[at]!=' '&&str[at])at++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(in[0]=='b'){\n\t\t\t\tif(in[9]=='c'){\n\t\t\t\t\tat=max(0,at-1);\n\t\t\t\t}else{\n\t\t\t\t\twhile(at&&str[at-1]==' ')at--;\n\t\t\t\t\twhile(at&&str[at-1]!=' ')at--;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(in[0]=='i'){\n\t\t\t\tint n=strlen(str);\n\t\t\t\tint t=strlen(in)-9;\n\t\t\t\tfor(int i=n;i>=at;i--){\n\t\t\t\t\tstr[i+t]=str[i];\n\t\t\t\t}\n\t\t\t\tfor(int i=0;i<t;i++)str[at+i]=in[8+i];\n\t\t\t\tat+=t;\n\t\t\t}\n\t\t\tif(in[0]=='d'){\n\t\t\t\tif(in[7]=='c'){\n\t\t\t\t\tif(str[at]){\n\t\t\t\t\t\tint n=strlen(str);\n\t\t\t\t\t\tfor(int i=at;i<n;i++)str[i]=str[i+1];\n\t\t\t\t\t}\n\t\t\t\t}else{\n\t\t\t\t\tif(str[at]){\n\t\t\t\t\t\tint t=at;\n\t\t\t\t\t\twhile(str[t]==' ')t++;\n\t\t\t\t\t\twhile(str[t]!=' '&&str[t])t++;\n\t\t\t\t\t\tint len=t-at;\n\t\t\t\t\t\tfor(int i=0;str[at+i];i++){\n\t\t\t\t\t\t\tstr[at+i]=str[at+len+i];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(int i=0;i<at;i++)printf(\"%c\",str[i]);\n\t\tprintf(\"^\");\n\t\tfor(int i=at;str[i];i++)printf(\"%c\",str[i]);\n\t\tprintf(\"\\n\");\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#define INF 0x3f3f3f3f\n#include <cstdio>\n#include <iostream>\n#include <sstream>\n#include <cmath>\n#include <cstdlib>\n#include <algorithm>\n#include <queue>\n#include <stack>\n#include <limits>\n#include <map>\n#include <string>\n#include <cstring>\n#include <set>\n#include <deque>\n#include <bitset>\n#include <list>\n#include <cctype>\n#include <utility>\n \nusing namespace std;\n \ntypedef long long ll;\ntypedef pair <int,int> P;\ntypedef pair <int,P > PP;\n \nint tx[] = {0,1,0,-1};\nint ty[] = {-1,0,1,0};\n \nstatic const double EPS = 1e-8;\n\nclass Editor{\nprivate:\n  string text;\n  int cursor;\npublic:\n  Editor(const string& _text) : text(_text),cursor(0) {}\n  void forward_char(){\n    if(text.length() > cursor) cursor++;\n  }\n  void forward_word(){\n    int tmp = text.length();\n    for(int pos=cursor;pos+1<text.length();pos++){\n      if(text[pos] != ' '\n\t && text[pos + 1] == ' '){\n\ttmp = pos+1;\n\tbreak;\n      }\n    }\n    cursor = tmp;\n  }\n  void backward_char(){\n    if(0 < cursor) cursor--;    \n  }\n  void backward_word(){\n    int tmp = -1;\n    for(int pos=cursor;pos-1>=0;pos--){\n      if(text[pos] == ' '\n\t && text[pos - 1] != ' '){\n\ttmp = pos;\n\tbreak;\n      }\n    }\n    if(tmp != -1) cursor = tmp-1;\n  }\n  void insert(const string& str){\n    string middle = str;\n    string front = \"\";\n    string rear = \"\";\n    if(cursor > 0) front = text.substr(0,cursor);\n    if(cursor < text.length()) rear = text.substr(cursor,text.length()-cursor);\n\n    cursor = front.length() + middle.length();\n    text = front + middle + rear;\n  }\n  void delete_char(){\n    string front = \"\";\n    string rear = \"\";\n    if(cursor > 0) front = text.substr(0,cursor);\n    if(cursor+1 < text.length()) rear = text.substr(cursor+1,text.length()-(cursor+1));\n    text = front + rear;\n  }\n  void delete_word(){\n    int delete_first = cursor;\n    int delete_last = cursor;\n\n    bool char_flag = false;\n    for(int pos=cursor;pos<text.length();pos++){\n      if(text[pos] == ' '){\n\tif(char_flag){\n\t  delete_last = pos - 1;\n\t}\n      }\n      else if(text[pos] != ' '){\n\tchar_flag = true;\n      }\n    }\n    if(delete_last == delete_first) return;\n\n    string front = \"\";\n    string rear = \"\";\n    if(delete_first > 0) front = text.substr(0,delete_first);\n    if(delete_last + 1 < text.length()) rear = text.substr(delete_last + 1,text.length()-(delete_last+1));\n    text = front + rear;\n  }\n  void print_text(){\n    string front = \"\";\n    string rear = \"\";\n    if(cursor > 0) front = text.substr(0,cursor);\n    if(cursor < text.length()) rear = text.substr(cursor,text.length()-cursor);\n    cout << front << \"^\" << rear << endl;\n  }\n};\n\nint main(){\n  string total_test_cases_str;\n\n  while(getline(cin,total_test_cases_str)){\n    stringstream ttc_ss;\n    ttc_ss << total_test_cases_str;\n    int total_test_cases;\n    ttc_ss >> total_test_cases;\n\n    for(int test_idx=0;test_idx<total_test_cases;test_idx++){\n      string text;\n      getline(cin,text);\n      \n      Editor editor(text);\n\n      string total_commands_str;\n\n      getline(cin,total_commands_str);\n      stringstream total_commands_ss;\n      total_commands_ss << total_commands_str;\n      \n      int total_commands;\n      total_commands_ss >> total_commands;\n\n      for(int command_idx=0;command_idx < total_commands; command_idx++){\n\tstring fr_str;\n\n\tgetline(cin,fr_str);\n\n\tstring front=\"\";\n\tstring rear=\"\";\n\tint str_pos = 0;\n\tfor(int i=0;i<fr_str.size();i++){\n\t  if(fr_str[i] == ' '){\n\t    str_pos = i+1;\n\t    break;\n\t  }\n\t  front += fr_str[i];\n\t}\n\tfor(int i=str_pos;i<fr_str.size();i++){\n\t  if(i==str_pos && fr_str[i] == '\"') {\n\t    //nothing todo\n\t  }\n\t  else if(fr_str[i] == '\"'){\n\t    break;\n\t  }\n\t  rear += fr_str[i];\n\t}\n\n\tif(front == \"forward\"){\n\t  if(rear == \"char\"){\n\t    editor.forward_char();\n\t  }\n\t  else if(rear == \"word\"){\n\t    editor.forward_word();\n\t  }\n\t}\n\telse if(front == \"backward\"){\n\t  if(rear == \"char\"){\n\t    editor.backward_char();\n\t  }\n\t  else if(rear == \"word\"){\n\t    editor.backward_word();\n\t  }\n\t}\n\telse if(front == \"insert\"){\n\t  editor.insert(rear.substr(1,rear.length()-1));\n\t}\n\telse if(front == \"delete\"){\n\t  if(rear == \"char\"){\n\t    editor.delete_char();\n\t  }\n\t  else if(rear == \"word\"){\n\t    editor.delete_word();\n\t  }\n\t}\n      }\n      editor.print_text();\n    }\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <algorithm>\n#include <cstdio>\n\nusing namespace std;\n\nchar buf[2000];\nstring ope;\nint pos, size;\n\nvoid print(){\n  //cout << \"\\\"\";\n  for(int i=0;i<=size;i++){\n    if(pos == i) cout << \"^\";\n    if(i >= size) break;\n    cout << buf[i];\n  }\n  //cout << \"\\\"\";\n  cout << endl;\n}\n\nvoid forwardWord(){\n  for(;pos<size;pos++){\n    if(buf[pos] != ' '){\n      for(;pos<size;pos++) if(buf[pos] == ' ') break;\n      return;\n    }\n  }\n}\n\nvoid backwardWord(){\n  for(;pos>0;pos--){\n    if(buf[pos] != ' '){\n      for(;pos>0;pos--) if(buf[pos-1] == ' ') break;\n      return;\n    }\n  }\n}\n\nvoid insert(string str){\n  if(pos == size){\n    for(int i=0;i<str.size();i++) buf[pos+i] = str[i];\n  }else{\n    for(int i=size-1;i>=0;i--){\n      buf[i+str.size()] = buf[i];\n      if(i == pos) break;\n    }\n    for(int j=0;j<str.size();j++) buf[pos+j] = str[j];\n  }\n  pos += str.size();\n  size += str.size();\n}\n\nvoid deleteChar(){\n  if(pos == size) return;\n  for(int i=pos+1;i<size;i++) buf[i-1] = buf[i];\n  size--;\n}\n\nvoid deleteWord(){\n  bool f = false;\n  int i;\n  for(i=pos;i<size;i++){\n    if(buf[i] != ' '){\n      f = true;\n      break;\n    }\n  }\n  if(!f) return;  \n  for(;i<size;i++){\n    if(buf[i] == ' ') break;\n  }\n\n  int j = pos;\n  for(int k=i;k<size;k++){\n    buf[j++] = buf[k];\n  }\n  size -= i - pos;\n}\n\nmain(){\n  int tc, n;\n  cin >> tc;\n  getchar();\n  while(tc--){\n    pos = size = 0;\n    getline(cin, ope);\n    insert(ope);\n    pos = 0;\n    cin >> n;\n    getchar();\n    for(int i=0;i<n;i++){\n      getline(cin, ope);\n      if(ope == \"forward char\" && pos + 1 < size) pos++;\n      else if(ope == \"forward word\") forwardWord();\n      else if(ope == \"backward char\" && pos) pos--;\n      else if(ope == \"backward word\") backwardWord();\n      else if(ope.substr(0, 6) == \"insert\"){\n        insert(ope.substr(8, (int)ope.size()-9));\n      }else if(ope == \"delete char\") deleteChar();\n      else if(ope == \"delete word\") deleteWord();\n      //print();\n    }\n    print();\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <map>\nusing namespace std;\n\npair<string,int> operation(string op,string opa,string buffer,int cur) {\n    if(op == \"forward\") {\n        if(opa == \"word\") {\n            while(cur < buffer.length() && buffer[cur] == ' ') cur++;\n            while(cur < buffer.length() && buffer[cur] != ' ') cur++;\n        }else{\n            cur++;\n            cur = min(cur,(int)buffer.length());\n        }\n    }else if(op == \"backward\") {\n        if(opa == \"word\") {\n            cur--;\n            while(cur >= 0 && buffer[cur] == ' ') cur--;\n            while(cur >= 0 && buffer[cur] != ' ') cur--;\n            if(cur >= 0 && buffer[cur] == ' ') cur++;\n            cur = max(0,cur);\n        }else{\n            cur--;\n            cur = max(0,cur);\n        }\n    }else if(op == \"delete\") {\n        if(opa == \"word\") {\n            int pc = cur;\n\n            for(int i=cur; i<buffer.length(); ++i) {\n                if(buffer[i] != ' ') break;\n                // no word exists in the right\n                if(i == buffer.length()-1) {\n                    return make_pair(buffer,cur);\n                }\n            }\n\n            while(cur < buffer.length() && buffer[cur] == ' ') cur++;\n            while(cur < buffer.length() && buffer[cur] != ' ') cur++;\n            buffer = buffer.substr(0,pc) + buffer.substr(cur);\n            cur = pc;\n        }else{\n            if(cur < buffer.length()) {\n                buffer = buffer.substr(0,cur)\n                    + ((cur==buffer.length()-1)?\"\":buffer.substr(cur+1));\n            }\n        }\n    }else if(op == \"insert\") {\n        buffer = buffer.substr(0,cur) + opa + buffer.substr(cur);\n        cur += opa.length();\n    }\n\n    return make_pair(buffer,cur);\n}\n\nint main() {\n    int t,n;\n    cin>>t;\n    string buffer,op,opa;\n    string lastop = \"nop\";\n    for(int i=0; i<t; ++i) {\n        if(lastop != \"insert\") cin.ignore();\n        getline(cin,buffer);\n//        cout<<buffer<<endl;\n        cin>>n;\n        int cur = 0;\n\n        for(int j=0; j<n; ++j) {\n            cin>>op;\n            lastop = op;\n            if(op != \"insert\") {\n                cin>>opa;\n            }else{\n                getline(cin,opa);\n                for(int i=0; i<opa.length(); ++i)\n                    if(opa[i] == '\\\"') {\n                        opa = opa.substr(i+1);\n                        break;\n                    }\n                opa = opa.substr(0,opa.length()-1);\n            }\n            pair<string,int> ret = operation(op,opa,buffer,cur);\n            cur = ret.second;\n            buffer = ret.first;\n//            cout<<cur<<\" \"<<buffer<<endl;\n        }\n\n        for(int i=0; i<buffer.length(); ++i) {\n            if(i == cur) cout<<\"^\";\n            cout<<buffer[i];\n        }\n        if(cur == buffer.length()) cout<<\"^\";\n\n        cout<<endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <cstdlib>\nusing namespace std;\n\nchar space()\n{\n  char c;\n  while (isblank(c = getchar()) || c == '\\n');\n  return c;\n}\n\nchar _space()\n{\n  char c;\n  while (isblank(c = getchar()));\n  return c;\n}\n\nstring nextStr()\n{\n  char c = space();\n  string str = \"\";\n  do {\n    str += c;\n  }  while (!isblank(c = getchar()) && (c != '\\n'));\n  return str;\n}\n\nstring nextLine()\n{\n  string str;\n  char c;\n  c = _space();\n  if (c == '\\n') return str;\n  do {\n    str+=c;\n  } while ((c = getchar()) != '\\n');\n\n  return string(str);\n}\n\nstring nextQuote()\n{\n  space();\n  char c;\n  string str = \"\";\n  while ((c = getchar()) != '\"') {\n    str += c;\n  }\n  return str;\n}\n\nint main()\n{\n  int nTest;  \n  scanf(\"%d \",&nTest);\n  //cout << nTest << endl;\n    \n  for (int testIdx = 0; testIdx < nTest; testIdx++) {\n    string text = nextLine();\n    //cout << text << endl;\n    //    cin.ignore();\n\n    int N;\n    scanf(\" %d \", &N);\n    //cout << \"N = \" << N << endl;\n    //cin.ignore();\n    int cur = 0;\n    for (int i = 0; i < N; i++) {\n      string cmd, arg;\n      cmd = nextStr();\n      if (cmd == \"forward\") {\n\targ = nextStr();\n\tif (arg == \"char\") {\n\t  if (cur < text.size()) {\n\t    cur++;\n\t  }\n\t} else {\t\n\t  while (cur < text.size() && isblank(text[cur])) {cur++;}\n\t  while (cur < text.size() && !isblank(text[cur])) {cur++;}\n\t}\n      } else if (cmd == \"backward\") {\n\targ = nextStr();\n\tif (arg == \"char\") {\n\t  if (cur > 0) {\n\t    cur--;\n\t  }\n\t} else {\t  \n\t  while (cur > 0 && isblank(text[cur])) {cur--;}\n\t  while (cur > 0 && !isblank(text[cur])) {cur--;}\n\t}\n      } else if (cmd == \"insert\") {\n\targ = nextQuote();\n\ttext.insert(text.begin() + cur, arg.begin(), arg.end());\n\tcur += arg.size();\n      } else if (cmd == \"delete\") {\n\targ = nextStr();\n\tif (arg == \"char\") {\n\t  if (cur < text.size()) {\n\t    text.erase(text.begin() + cur);\n\t  }\n\t} else {\n\t  bool hasWord = false;\n\t  for (int id = cur; id < text.size(); id++) {\n\t    if (!isblank(text[id])) {\n\t      hasWord = true;\n\t    }\n\t  }\n\t  if (hasWord) {\n\t    while (cur < text.size() && isblank(text[cur])) {\n\t      text.erase(text.begin() + cur);\n\t    }\n\t    while (cur < text.size() && !isblank(text[cur])) {\n\t      text.erase(text.begin() + cur);\n\t    }\n\t  }\n\t  /*\n\t  */\n\t}\n      }\n      //cout << \"cmd, arg = \" << cmd << \", \" << arg << endl;\n      //cout << \"cur = \" << cur << endl;\n      //cout << text << endl;\n    }\n    for (int i = 0; i < cur; i++) {\n      cout << text[i];\n    }\n    cout << \"^\";\n    for (int i = cur; i < text.size(); i++) {\n      cout << text[i];\n    }\n    cout << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint main() {\n    int N;\n    cin >> N;\n    cin.ignore();\n\n    while(N--) {\n        string str;\n        getline(cin, str);\n        int cursor = 0;\n        int M;\n        cin >> M;\n        cin.ignore();\n\n        while(M--) {\n            string cmdline;\n            getline(cin, cmdline);\n\n            int delim = cmdline.find(' ');\n            string cmd = cmdline.substr(0, delim);\n            string target = cmdline.substr(delim+1);\n            if(cmd == \"forward\") {\n                if(target == \"word\") {\n                    int start = str.find_first_not_of(' ', cursor);\n                    if(start == string::npos) {\n                        cursor = str.size();\n                        continue;\n                    }\n                    int end = str.find_first_of(' ', start);\n                    if(end == string::npos) {\n                        cursor = str.size();\n                        continue;\n                    }\n                    cursor = end;\n                }\n                else if(target == \"char\") {\n                    if(cursor < str.size()) ++cursor;\n                }\n                else {\n                    cerr << \"Unknown target in forward: \" << target << endl;\n                }\n            }\n            else if(cmd == \"backward\") {\n                if(target == \"word\") {\n                    int start = str.find_last_not_of(' ', cursor-1);\n                    if(start == string::npos) {\n                        cursor = 0;\n                        continue;\n                    }\n                    int end = str.find_last_of(' ', start);\n                    if(end == string::npos) {\n                        cursor = 0;\n                        continue;\n                    }\n                    cursor = end+1;\n                }\n                else if(target == \"char\") {\n                    if(cursor > 0) --cursor;\n                }\n                else {\n                    cerr << \"Unknown target in backward: \" << target << endl;\n                }\n            }\n            else if(cmd == \"delete\") {\n                if(target == \"word\") {\n                    int startword = str.find_first_not_of(' ', cursor);\n                    if(startword == string::npos) continue;\n                    int end = str.find_first_of(' ', startword);\n                    if(end == string::npos) end = str.size();\n                    str.erase(cursor, end-cursor);\n                }\n                else if(target == \"char\") {\n                    if(cursor >= str.size()) continue;\n                    str.erase(cursor, 1);\n                }\n                else {\n                    cerr << \"Unknown target in delete: \" << target << endl;\n                }\n            }\n            else if(cmd == \"insert\") {\n                str = str.substr(0, cursor) + target.substr(1, target.find_last_of('\"')-1) + str.substr(cursor);\n                cursor += target.size()-2;\n            }\n            else {\n                //cerr << \"Unknown command: \" << cmd << endl;\n            }\n        }\n        cout << str.substr(0, cursor) << '^' << str.substr(cursor) << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cmath>\nusing namespace std;\n\nint main()\n{\n    string bla = \"bla\";\n    cout<<bla.substr(3)<<endl;\n    int nb_cas;\n    cin>>nb_cas;\n    cin.ignore();\n    while(nb_cas--)\n    {\n        string texte;\n        getline(cin,texte);\n        int nb_op;\n        cin>>nb_op;\n        int curseur = 0;\n        for(int c=0;c<nb_op;c++)\n        {\n            string s1,s2;\n            cin>>s1;\n            cin.ignore();\n            getline(cin,s2);\n            if(s1==\"forward\"||s1==\"backward\")\n            {\n                int d = (s1==\"forward\"?1:-1);\n                if(s2==\"char\") curseur+=d;\n                else if(s2==\"word\")\n                {\n                    while(curseur>= 0 && curseur<=texte.size()&&(curseur == texte.size()||texte[curseur]==' ')) curseur+=d;\n                    while(curseur>=-0&&curseur<=texte.size()&&(curseur==texte.size()||texte[curseur]!=' '))\n                    {\n                        curseur += d;\n                    }\n                }\n                curseur = max(curseur,0);\n                curseur = min(curseur,(int)texte.size());\n            }\n            else if(s1==\"delete\")\n            {\n                if(s2==\"char\"&&curseur<texte.size())\n                {\n                    texte = texte.substr(0,curseur)+texte.substr(curseur+1);\n                }\n                else if(s2==\"word\")\n                {\n                    int finMot = curseur;\n                    while(finMot<texte.size()&&texte[finMot]==' ') finMot++;\n                    if(finMot == texte.size()) continue;\n                    while(finMot<texte.size()&&texte[finMot]!=' ')\n                    {\n                        finMot ++;\n                    }\n                    texte = texte.substr(0,curseur)+(finMot < texte.size()?texte.substr(finMot):\"\");\n                }\n            }\n            else\n            {\n                while(s2[0]!=\"\\\"\") s2=s2.substr(1);\n                while(s2[s2.size()-1]!=\"\\\"\") s2 = s2.substr(s2.size()-1);\n                s2 = s2.substr(1,s2.size()-2);\n                texte = texte.substr(0,curseur)+s2+(curseur<(int)texte.size()?texte.substr(curseur):\"\");\n                curseur += s2.size();\n            }\n        }\n        cout<<texte.substr(0,curseur)+\"^\"+(curseur<(int)texte.size()?texte.substr(curseur):\"\")<<endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cassert>\n\nusing namespace std;\n\n#define rep(i, n) for (int i = 0; i < int(n); ++i)\n\nvoid solve() {\n  string str;\n  getline(cin, str);\n  int n;\n  cin >> n;\n  cin.ignore();\n  string buf;\n  int cur = 0;\n  rep (_, n) {\n    getline(cin, buf);\n    if (buf == \"forward char\") {\n      cur = min(cur + 1, (int)str.size());\n    } else if (buf == \"forward word\") {\n      while ((int)str.size() != cur && str[cur] == ' ') ++cur;\n      while ((int)str.size() != cur && str[cur] != ' ') ++cur;\n    } else if (buf == \"backward char\") {\n      cur = max(cur - 1, 0);\n    } else if (buf == \"backward word\") {\n      while (0 != cur && str[cur] == ' ') --cur;\n      while (0 != cur && str[cur] != ' ') --cur;\n    } else if (buf == \"delete char\") {\n      if (cur == (int)str.size()) continue;\n      str = str.substr(0, cur) + str.substr(cur + 1);\n    } else if (buf == \"delete word\") {\n      int s = cur, t;\n      while ((int)str.size() != s && str[s] == ' ') ++s;\n      if (s == (int)str.size()) continue;\n      for (t = s; t < (int)str.size() && str[t] != ' '; ++t);\n      str = str.substr(0, cur) + str.substr(t);\n    } else if (buf.substr(0, 6) == \"insert\") {\n      int s = buf.find('\"');\n      int t = buf.find('\"', s + 1);\n      string ins = buf.substr(s + 1, t - s - 1);\n      str = str.substr(0, cur) + ins + str.substr(cur);\n      cur += ins.size();\n    } else {\n      assert(0);\n    }\n  }\n  cout << str.substr(0, cur) << \"^\" << str.substr(cur) << endl;\n}\n\nint main() {\n  int t;\n  cin >> t;\n  cin.ignore();\n  rep (i, t) solve();\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <algorithm>\n#include <cstdio>\n\nusing namespace std;\n\nchar buf[1000000];\nstring ope;\nint pos, size;\n\nvoid print(){\n  //cout << \"\\\"\";\n  for(int i=0;i<=size;i++){\n    if(pos == i) cout << \"^\";\n    if(i >= size) break;\n    cout << buf[i];\n  }\n  //cout << \"\\\"\";\n  cout << endl;\n}\n\nvoid forwardWord(){\n  for(;pos<size;pos++){\n    if(buf[pos] != ' '){\n      for(;pos<size;pos++) if(buf[pos] == ' ') break;\n      return;\n    }\n  }\n}\n\nvoid backwardWord(){\n  for(;pos>0;pos--){\n    if(buf[pos] != ' '){\n      for(;pos>0;pos--) if(buf[pos-1] == ' ') break;\n      return;\n    }\n  }\n}\n\nvoid insert(string str){\n  if(pos == size){\n    for(int i=0;i<str.size();i++) buf[pos++] = str[i];\n  }else{\n    for(int i=size-1;i>=0;i--){\n      buf[i+str.size()] = buf[i];\n      if(i == pos) break;\n    }\n    for(int j=0;j<str.size();j++) buf[pos+j] = str[j];\n  }\n  pos += str.size();\n  size += str.size();\n}\n\nvoid deleteChar(){\n  if(pos == size) return;\n  for(int i=pos+1;i<size;i++) buf[i-1] = buf[i];\n  size--;\n}\n\nvoid deleteWord(){\n  bool f = false;\n  int i;\n  for(i=pos;i<size;i++){\n    if(buf[i] != ' '){\n      f = true;\n      break;\n    }\n  }\n  if(!f) return;  \n  for(;i<size;i++){\n    if(buf[i] == ' ') break;\n  }\n\n  int j = pos;\n  for(int k=i;k<size;k++){\n    buf[j++] = buf[k];\n  }\n  size -= i - pos;\n}\n\nmain(){\n  int tc, n;\n  cin >> tc;\n  getchar();\n  while(tc--){\n    pos = size = 0;\n    getline(cin, ope);\n    insert(ope);\n    pos = 0;\n    cin >> n;\n    getchar();\n    for(int i=0;i<n;i++){\n      getline(cin, ope);\n      if(ope == \"forward char\" && pos + 1 < size) pos++;\n      else if(ope == \"forward word\") forwardWord();\n      else if(ope == \"backward char\" && pos) pos--;\n      else if(ope == \"backward word\") backwardWord();\n      else if(ope.substr(0, 6) == \"insert\"){\n        insert(ope.substr(8, (int)ope.size()-9));\n      }else if(ope == \"delete char\") deleteChar();\n      else if(ope == \"delete word\") deleteWord();\n      //print();\n    }\n    print();\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<cctype>\nusing namespace std;\nclass SimpleEditor{\npublic:\n  int cur;\n  string s;\n  SimpleEditor(string s):s(s),cur(0){}\n  int RightWord(){\n    int i=cur;\n    while(s[i]==' '&&s[i]!='#')++i;\n    if(s[i]=='#')return -1;\n    for(i;i<s.length();++i){\n      if(s[i]==' ')return i;\n    }\n    return s.length()-1;\n  }\n  int LeftWord(){\n    int i=cur-1;\n    while(s[i]==' '&&i>=0)--i;\n    if(i==0)return -1;\n    for(i;i>=0;--i){\n      if(s[i]==' ')return i+1;\n    }\n    return 0;\n  }\n  void ForwardChar(){\n    ++cur;\n    if(cur>=s.length())cur=s.length()-1;\n  }\n  void BackwardChar(){\n    --cur;\n    if(cur<0)cur=0;\n  }\n  void ForwardWord(){\n    cur = RightWord();\n    if(cur==-1)cur=s.length()-1;\n  }\n  void BackwardWord(){\n    cur = LeftWord();\n    if(cur==-1)cur=0;\n  }\n  void Insert(string text){\n    s.insert(s.begin()+cur,text.begin()+8,text.end()-1);\n    cur += text.length()-9;\n  }\n  void DeleteChar(){\n    if(*(s.begin()+cur)!='#'){\n      s.erase(s.begin()+cur);\n    }\n  }\n  void DeleteWord(){\n    int i=RightWord();\n    if(i>=0){\n      //cout << \" RIGHT : \" << i << endl;\n      for(int j=cur;j<i;++j)DeleteChar();\n    }\n  }\n  string ToString()const{\n    string ret;\n    for(int i=0;i<s.length();++i){\n      //if(i==cur)ret+='[';\n      if(i==cur)ret+='^';\n      ret+=s[i];\n      //if(i==cur)ret+=']';\n    }\n    ret.erase(ret.end()-1);\n    return ret;\n  }\n};\nvoid GetLine(string &s){\n  getline(cin,s);\n  for(int i =0;i<s.length();++i){\n    if(iscntrl(s[i])){s.erase(s.begin()+i);--i;}\n  }\n}\nint main(){\n  string dam;\n  int T;\n  cin >> T;\n  GetLine(dam);\n  for(int tc=1;tc<=T;++tc){\n    string s;\n    GetLine(s);\n    s+='#';\n    SimpleEditor se(s);\n    //cout << \"NUMBER OF TEST CASE : \" << T << \" INITIAL STRING : \" << s << endl;\n    int t;\n    cin >> t;\n    GetLine(dam);\n    for(int i = 0; i < t; ++i){\n      string inst;\n      GetLine(inst);\n      if(inst==\"forward char\")se.ForwardChar();\n      if(inst==\"forward word\")se.ForwardWord();\n      if(inst==\"backward char\")se.BackwardChar();\n      if(inst==\"backward word\")se.BackwardWord();\n      if(inst.find(\"insert\")!=string::npos)se.Insert(inst);\n      if(inst==\"delete char\")se.DeleteChar();\n      if(inst==\"delete word\")se.DeleteWord();\n      //cout<<i<<\"/\" <<t<<\":\"<<\" INST:\" <<inst<<\" ED:\"<<se.ToString() << endl;\n    }\n    cout << se.ToString() << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstdlib>\n#include <cmath>\n#include <climits>\n#include <cfloat>\n#include <cstring>\n#include <map>\n#include <utility>\n#include <set>\n#include <iostream>\n#include <memory>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <functional>\n#include <sstream>\n#include <fstream>\n#include <complex>\n#include <stack>\n#include <queue>\n\nusing namespace std;\ntypedef long long LL;\ntypedef pair<int, int> PII;\nstatic const double EPS = 1e-5;\n\n#define FOR(i,k,n) for (int i=(k); i<(int)(n); ++i)\n#define REP(i,n) FOR(i,0,n)\n\nint main(void){\n  int N;\n  cin>>N;\n  cin.ignore();\n  while(N--){\n    string buf;\n    getline(cin,buf);\n    int M;\n    cin>>M;\n    cin.ignore();\n    string::iterator it = buf.begin();\n    while(M--){\n      /*\n      {\n      int dist = distance(buf.begin(),it);\n      REP(i,buf.size()){\n        if(i==dist)putchar('^');\n        putchar(buf[i]);\n      }\n      if(it==buf.end())putchar('^');\n      putchar('\\n');\n      }\n      */\n      string command;\n      getline(cin,command);\n      if(command==\"forward char\"&&it!=buf.end()) it++;\n      if(command==\"backward char\"&&it!=buf.begin()) it--;\n      if(command==\"forward word\"){\n        while(it!=buf.end()&&*it==' ')it++;\n        while(it!=buf.end()&&*it!=' ')it++;\n      }\n      if(command==\"backward word\"){\n        if(it!=buf.begin())it--;\n        while(it!=buf.begin()&&(*it)==' ')it--;\n        while(it!=buf.begin()&&(*it)!=' ')it--;\n        if(*it==' ') it++;\n      }\n      if(command==\"delete char\"&&it!=buf.end()) it = buf.erase(it);\n      if(command==\"delete word\"){\n        string::iterator it2 = it; \n        while(it2!=buf.end()&&*it2==' ')it2++;\n        if(it2!=buf.end()){\n          while(it2!=buf.end()&&*it2!=' ')it2++;\n          //if(it2!=buf.end())it2++;\n          it = buf.erase(it,it2);\n        }\n      }\n      if(command.find(\"insert\",0)!=string::npos){\n        string ins = command.substr(8);\n        string::iterator ir = ins.end()-1;\n        ins.erase(ir);\n        //cout<<ins<<endl;\n        REP(i,ins.size()){\n          it = buf.insert(it,ins[i]);\n          it++;\n        }\n      }\n    }\n    int dist = distance(buf.begin(),it);\n    REP(i,buf.size()){\n      if(i==dist)putchar('^');\n      putchar(buf[i]);\n    }\n    if(it==buf.end())putchar('^');\n    putchar('\\n');\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n\nusing namespace std;\n\n#define rep(i, n) for (int i = 0; i < int(n); ++i)\n\nvoid solve() {\n  string str;\n  getline(cin, str);\n  int n;\n  cin >> n;\n  cin.ignore();\n  string buf;\n  int cur = 0;\n  rep (_, n) {\n    getline(cin, buf);\n    if (buf == \"forward char\") {\n      cur = min(cur + 1, (int)str.size());\n    } else if (buf == \"forward word\") {\n      while ((int)str.size() != cur && str[cur] == ' ') ++cur;\n      while ((int)str.size() != cur && str[cur] != ' ') ++cur;\n    } else if (buf == \"backward char\") {\n      cur = max(cur - 1, 0);\n    } else if (buf == \"backward word\") {\n      while (0 != cur && str[cur] == ' ') --cur;\n      while (0 != cur && str[cur] != ' ') --cur;\n    } else if (buf == \"delete char\") {\n      if (cur == (int)str.size()) continue;\n      str = str.substr(0, cur) + str.substr(cur + 1);\n    } else if (buf == \"delete word\") {\n      int s = cur, t;\n      while ((int)str.size() != s && str[s] == ' ') ++s;\n      if (s == (int)str.size()) continue;\n      for (t = s; t < (int)str.size() && str[t] != ' '; ++t);\n      str = str.substr(0, cur) + str.substr(t);\n    } else {\n      int s = buf.find('\"');\n      int t = buf.find('\"', s + 1);\n      string ins = buf.substr(s + 1, t - s - 1);\n      str = str.substr(0, cur) + ins + str.substr(cur);\n      cur += ins.size();\n    }\n  }\n  cout << str.substr(0, cur) << \"^\" << str.substr(cur) << endl;\n}\n\nint main() {\n  int t;\n  cin >> t;\n  cin.ignore();\n  rep (i, t) solve();\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <cstdlib>\nusing namespace std;\n\nchar space()\n{\n  char c;\n  while (isblank(c = getchar()) || c == '\\n');\n  return c;\n}\n\nchar _space()\n{\n  char c;\n  while (isblank(c = getchar()));\n  return c;\n}\n\nstring nextStr()\n{\n  char c = space();\n  string str = \"\";\n  do {\n    str += c;\n  }  while (!isblank(c = getchar()) && (c != '\\n'));\n  return str;\n}\n\nstring nextLine()\n{\n  string str;\n  char c;\n  c = _space();\n  if (c == '\\n') return str;\n  do {\n    str+=c;\n  } while ((c = getchar()) != '\\n');\n\n  return string(str);\n}\n\nstring nextQuote()\n{\n  space();\n  char c;\n  string str = \"\";\n  while ((c = getchar()) != '\"') {\n    str += c;\n  }\n  return str;\n}\n\nbool hasWord(int cur, const string& text)\n{\n  for (int id = cur; id < text.size(); id++) {\n    if (!isblank(text[id])) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/*\nbool backHasWord(int cur, const string& text)\n{\n  for (int id = cur - 1; id >= 0; id--) {\n    if (!isblank(text[id])) {\n      return true;\n    }\n  }\n  return false;\n}\n*/\n\nint main()\n{\n  int nTest;  \n  scanf(\"%d \",&nTest);\n  //cout << nTest << endl;\n    \n  for (int testIdx = 0; testIdx < nTest; testIdx++) {\n    string text = nextLine();\n    //cout << text << endl;\n    //    cin.ignore();\n\n    int N;\n    scanf(\" %d \", &N);\n    //cout << \"N = \" << N << endl;\n    //cin.ignore();\n    int cur = 0;\n    for (int i = 0; i < N; i++) {\n      string cmd, arg;\n      cmd = nextStr();\n      if (cmd == \"forward\") {\n\targ = nextStr();\n\tif (arg == \"char\") {\n\t  if (cur < text.size()) {\n\t    cur++;\n\t  }\n\t} else if (\"word\") {\t\n\t  while (cur < text.size() && isblank(text[cur])) {cur++;}\n\t  while (cur < text.size() && !isblank(text[cur])) {cur++;}\n\t} else {\n\t  1/0;\n\t}\n      } else if (cmd == \"backward\") {\n\targ = nextStr();\n\tif (arg == \"char\") {\n\t  if (cur > 0) {\n\t    cur--;\n\t  }\n\t} else if (arg == \"word\"){\t  \n\t  while (cur > 0 && isblank(text[cur])) {cur--;}\n\t  while (cur > 0 && !isblank(text[cur])) {cur--;}\n\t} else {\n\t  1/0;\n\t}\n      } else if (cmd == \"insert\") {\n\targ = nextQuote();\n\ttext.insert(text.begin() + cur, arg.begin(), arg.end());\n\tcur += arg.size();\n      } else if (cmd == \"delete\") {\n\targ = nextStr();\n\tif (arg == \"char\") {\n\t  if (cur < text.size()) {\n\t    text.erase(text.begin() + cur);\n\t  }\n\t} else if (arg == \"word\"){\n\t  if (hasWord(cur, text)) {\n\t    while (cur < text.size() && isblank(text[cur])) {\n\t      text.erase(text.begin() + cur);\n\t    }\n\t    while (cur < text.size() && !isblank(text[cur])) {\n\t      text.erase(text.begin() + cur);\n\t    }\n\t  }\n\t  /*\n\t  */\n\t} else {\n\t  1/0;\n\t}\n      }\n      //cout << \"cmd, arg = \" << cmd << \", \" << arg << endl;\n      //cout << \"cur = \" << cur << endl;\n      //cout << text << endl;\n    }\n    for (int i = 0; i < cur; i++) {\n      cout << text[i];\n    }\n    cout << \"^\";\n    for (int i = cur; i < text.size(); i++) {\n      cout << text[i];\n    }\n    cout << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nusing db = double;\nusing ll = long long;\nusing vi = vector <int>;\n#define op operator\n#define pb push_back\n\nint main() {\n\tcout << fixed << setprecision(9);\n\tios :: sync_with_stdio(0);\n\n\tint t; cin >> t;\n\tstring s; getline(cin, s);\n\twhile(t --) {\n\t\tstring s;\n\t\tgetline(cin, s);\n\t\tlist <char> l;\n\t\tfor(char c : s)\n\t\t\tl.push_back(c);\n\t\tauto i = l.begin();\n\t\tint q; cin >> q;\n\t\twhile(q --) {\n\t\t\tstring s, t; cin >> s;\n\t\t\tgetline(cin, t); t = t.substr(1);\n\t\t\tif(s == \"forward\") {\n\t\t\t\tif(t == \"char\") {\n\t\t\t\t\tif(i != l.end()) i ++;\n\t\t\t\t} else {\n\t\t\t\t\tbool word = 0;\n\t\t\t\t\twhile(i != l.end()) {\n\t\t\t\t\t\tif(*i != ' ')\n\t\t\t\t\t\t\tword = 1;\n\t\t\t\t\t\telse if(word)\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\ti ++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(s == \"backward\") {\n\t\t\t\tif(t == \"char\") {\n\t\t\t\t\tif(i != l.begin()) i --;\n\t\t\t\t} else {\n\t\t\t\t\tbool word = 0;\n\t\t\t\t\twhile(i != l.begin()) {\n\t\t\t\t\t\ti --;\n\t\t\t\t\t\tif(*i != ' ')\n\t\t\t\t\t\t\tword = 1;\n\t\t\t\t\t\tif(word && *prev(i) == ' ')\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(s == \"insert\") {\n\t\t\t\tt = t.substr(1, t.size() - 2);\n\t\t\t\ti = l.insert(i, t.begin(), t.end());\n\t\t\t\tadvance(i, t.size());\n\t\t\t}\n\n\t\t\tif(s == \"delete\") {\n\t\t\t\tif(t == \"char\") {\n\t\t\t\t\tif(i != l.end()) {\n\t\t\t\t\t\ti ++;\n\t\t\t\t\t\tl.erase(prev(i));\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif(i != l.end()) {\n\t\t\t\t\t\tbool word = 0;\n\t\t\t\t\t\tfor(auto j = i; j != l.end(); j ++)\n\t\t\t\t\t\t\tif(*j != ' ') word = 1;\n\t\t\t\t\t\tif(word) {\n\t\t\t\t\t\t\tword = 0;\n\t\t\t\t\t\t\twhile(i != l.end()) {\n\t\t\t\t\t\t\t\tif(*i != ' ')\n\t\t\t\t\t\t\t\t\tword = 1;\n\t\t\t\t\t\t\t\telse if(word)\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\ti ++;\n\t\t\t\t\t\t\t\tl.erase(prev(i));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t/*\n\t\t\tfor(auto it = l.begin(); it != l.end(); it ++) {\n\t\t\t\tif(it == i) cout << '^';\n\t\t\t\tcout << *it;\n\t\t\t}\n\t\t\tif(i == l.end()) cout << '^';\n\t\t\tcout << '\\n';\n\t\t\t*/\n\t\t}\n\n\t\tfor(auto it = l.begin(); it != l.end(); it ++) {\n\t\t\tif(it == i) cout << '^';\n\t\t\tcout << *it;\n\t\t}\n\t\tif(i == l.end()) cout << '^';\n\t\tcout << '\\n';\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <cstdlib>\nusing namespace std;\n\nchar space()\n{\n  char c;\n  while (isblank(c = getchar()) || c == '\\n');\n  return c;\n}\n\nchar _space()\n{\n  char c;\n  while (isblank(c = getchar()));\n  return c;\n}\n\nstring nextStr()\n{\n  char c = space();\n  string str = \"\";\n  do {\n    str += c;\n  }  while (!isblank(c = getchar()) && (c != '\\n'));\n  return str;\n}\n\nstring nextLine()\n{\n  string str;\n  char c;\n  c = _space();\n  if (c == '\\n') return str;\n  do {\n    str+=c;\n  } while ((c = getchar()) != '\\n');\n\n  return string(str);\n}\n\nstring nextQuote()\n{\n  space();\n  char c;\n  string str = \"\";\n  while ((c = getchar()) != '\"') {\n    str += c;\n  }\n  return str;\n}\n\nbool hasWord(int cur, const string& text)\n{\n  for (int id = cur; id < text.size(); id++) {\n    if (!isblank(text[id])) {\n      return true;\n    }\n  }\n  return false;\n}\n\nbool backHasWord(int cur, const string& text)\n{\n  for (int id = cur - 1; id >= 0; id--) {\n    if (!isblank(text[id])) {\n      return true;\n    }\n  }\n  return false;\n}\n\nint main()\n{\n  int nTest;  \n  scanf(\"%d \",&nTest);\n  //cout << nTest << endl;\n    \n  for (int testIdx = 0; testIdx < nTest; testIdx++) {\n    string text = nextLine();\n    //cout << text << endl;\n    //    cin.ignore();\n\n    int N;\n    scanf(\" %d \", &N);\n    //cout << \"N = \" << N << endl;\n    //cin.ignore();\n    int cur = 0;\n    for (int i = 0; i < N; i++) {\n      string cmd, arg;\n      cmd = nextStr();\n      if (cmd == \"forward\") {\n\targ = nextStr();\n\tif (arg == \"char\") {\n\t  if (cur < text.size()) {\n\t    cur++;\n\t  }\n\t} else {\t\n\t  if (hasWord(cur, text)) {\n\t    while (cur < text.size() && isblank(text[cur])) {cur++;}\n\t    while (cur < text.size() && !isblank(text[cur])) {cur++;}\n\t  }\n\t}\n      } else if (cmd == \"backward\") {\n\targ = nextStr();\n\tif (arg == \"char\") {\n\t  if (cur > 0) {\n\t    cur--;\n\t  }\n\t} else {\t  \n\t  if (backHasWord(cur, text)) {\n\t    while (cur > 0 && isblank(text[cur])) {cur--;}\n\t    while (cur > 0 && !isblank(text[cur])) {cur--;}\n\t  }\n\t}\n      } else if (cmd == \"insert\") {\n\targ = nextQuote();\n\ttext.insert(text.begin() + cur, arg.begin(), arg.end());\n\tcur += arg.size();\n      } else if (cmd == \"delete\") {\n\targ = nextStr();\n\tif (arg == \"char\") {\n\t  if (cur < text.size()) {\n\t    text.erase(text.begin() + cur);\n\t  }\n\t} else {\n\t  if (hasWord(cur, text)) {\n\t    while (cur < text.size() && isblank(text[cur])) {\n\t      text.erase(text.begin() + cur);\n\t    }\n\t    while (cur < text.size() && !isblank(text[cur])) {\n\t      text.erase(text.begin() + cur);\n\t    }\n\t  }\n\t  /*\n\t  */\n\t}\n      }\n      //cout << \"cmd, arg = \" << cmd << \", \" << arg << endl;\n      //cout << \"cur = \" << cur << endl;\n      //cout << text << endl;\n    }\n    for (int i = 0; i < cur; i++) {\n      cout << text[i];\n    }\n    cout << \"^\";\n    for (int i = cur; i < text.size(); i++) {\n      cout << text[i];\n    }\n    cout << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream> \n#include <sstream> \n#include <iomanip> \n#include <algorithm> \n#include <cmath> \n#include <string> \n#include <vector> \n#include <list> \n#include <queue> \n#include <stack> \n#include <set> \n#include <map> \n#include <bitset> \n#include <numeric> \n#include <climits> \n#include <cfloat> \nusing namespace std; \n\nint main()\n{\n    int n;\n    cin >> n;\n    cin.ignore();\n\n    while(--n >= 0){\n        string s;\n        getline(cin, s);\n        int m;\n        cin >> m;\n        cin.ignore();\n\n        list<char> text(s.begin(), s.end());\n        list<char>::iterator it = text.begin();\n\n        while(--m >= 0){\n            string ope;\n            getline(cin, ope);\n\n            if(ope == \"forward char\"){\n                if(it != text.end())\n                    ++ it;\n            }else if(ope == \"backward char\"){\n                if(it != text.begin())\n                    -- it;\n            }else if(ope == \"delete char\"){\n                if(it != text.end())\n                    it = text.erase(it);\n            }else if(ope == \"forward word\"){\n                while(it != text.end() && (*it) == ' ')\n                    ++ it;\n                while(it != text.end() && (*it) != ' ')\n                    ++ it;\n            }else if(ope == \"backward word\"){\n                while(it != text.begin() && (*it) == ' ')\n                    -- it;\n                while(it != text.begin() && (*it) != ' ')\n                    -- it;\n                if((*it) == ' ')\n                    ++ it;\n            }else if(ope == \"delete word\"){\n                list<char>::iterator it2 = it;\n                while(it2 != text.end() && (*it2) == ' ')\n                    ++ it2;\n                if(it2 != text.end()){\n                    it = text.erase(it, it2);\n                    while(it != text.end() && (*it) != ' ')\n                        it = text.erase(it);\n                }\n            }else{\n                for(unsigned i=8; i<ope.size()-1; ++i){\n                    it = text.insert(it, ope[i]);\n                    ++ it;\n                }\n            }\n        }\n\n        cout << string(text.begin(), it) << '^' << string(it, text.end()) << endl;\n    }\n    \n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#define INF 0x3f3f3f3f\n#include <cstdio>\n#include <iostream>\n#include <sstream>\n#include <cmath>\n#include <cstdlib>\n#include <algorithm>\n#include <queue>\n#include <stack>\n#include <limits>\n#include <map>\n#include <string>\n#include <cstring>\n#include <set>\n#include <deque>\n#include <bitset>\n#include <list>\n#include <cctype>\n#include <utility>\n \nusing namespace std;\n \ntypedef long long ll;\ntypedef pair <int,int> P;\ntypedef pair <int,P > PP;\n \nint tx[] = {0,1,0,-1};\nint ty[] = {-1,0,1,0};\n \nstatic const double EPS = 1e-8;\n\nclass Editor{\nprivate:\n  string text;\n  int cursor;\npublic:\n  Editor(const string& _text) : text(_text),cursor(0) {}\n  void forward_char(){\n    if(text.size() > cursor) cursor++;\n  }\n  void forward_word(){\n    int tmp = text.size();\n    for(int pos=cursor;pos+1<text.size();pos++){\n      if(text[pos] != ' '\n\t && text[pos + 1] == ' '){\n\ttmp = pos + 1;\n\tbreak;\n      }\n    }\n    cursor = tmp;\n  }\n  void backward_char(){\n    if(0 < cursor) cursor--;    \n  }\n  void backward_word(){\n    int tmp = 0;\n\n    for(int pos=cursor-1;pos-1>=0;pos--){\n      if(text[pos] != ' '\n\t && text[pos - 1] == ' '){\n\ttmp = pos;\n\tbreak;\n      }\n    }\n    cursor = tmp;\n  }\n  void insert(const string& str){\n    string middle = str;\n    string front = \"\";\n    string rear = \"\";\n    if(cursor > 0) front = text.substr(0,cursor);\n    if(cursor < text.size()) rear = text.substr(cursor,text.size()-cursor);\n\n    cursor = front.size() + middle.size();\n    text = front + middle + rear;\n  }\n  void delete_char(){\n    string front = \"\";\n    string rear = \"\";\n    if(cursor > 0) front = text.substr(0,cursor);\n    if(cursor+1 < text.size()) rear = text.substr(cursor+1,text.size()-(cursor+1));\n    text = front + rear;\n  }\n  void delete_word(){\n    int delete_first = cursor;\n    int delete_last = text.size();\n\n    if(text[cursor] == ' '){\n      bool update = false;\n      for(int pos=cursor;pos<text.size();pos++){\n\tif(text[pos] != ' '){\n\t  update = true;\n\t  break;\n\t}\n      }\n      if(!update) return;\n\n      for(int pos=cursor;pos<text.size();pos++){\n\tif(text[pos] != ' '\n\t   && text[pos+1] == ' '){\n\t  delete_last = pos;\n\t  break;\n\t}\n      }\n    }\n    else{\n      for(int pos=cursor;pos<text.size();pos++){\n\tif(text[pos] == ' '){\n\t  delete_last = pos - 1;\n\t  break;\n\t}\n      }\n    }\n\n    string front = \"\";\n    string rear = \"\";\n    if(delete_first > 0){\n      front = text.substr(0,delete_first);\n    }\n    if(delete_last < text.size()){\n      rear = text.substr(delete_last+1,text.size()-delete_last);\n    }\n    text = front + rear;\n    // cout << front << \"*****\" << endl;\n    // cout << rear << \"*****\" << endl;\n  }\n  void print_text(){\n    string front = \"\";\n    string rear = \"\";\n    if(cursor > 0) front = text.substr(0,cursor);\n    if(cursor < text.size()) rear = text.substr(cursor,text.size()-cursor);\n    cout << front << \"^\" << rear << endl;\n  }\n};\n\nint main(){\n  string total_test_cases_str;\n\n  while(getline(cin,total_test_cases_str)){\n    stringstream ttc_ss;\n    ttc_ss << total_test_cases_str;\n    int total_test_cases;\n    ttc_ss >> total_test_cases;\n\n    for(int test_idx=0;test_idx<total_test_cases;test_idx++){\n      string text;\n      getline(cin,text);\n      \n      Editor editor(text);\n\n      string total_commands_str;\n\n      getline(cin,total_commands_str);\n      stringstream total_commands_ss;\n      total_commands_ss << total_commands_str;\n      \n      int total_commands;\n      total_commands_ss >> total_commands;\n\n      for(int command_idx=0;command_idx < total_commands; command_idx++){\n\tstring fr_str;\n\n\tgetline(cin,fr_str);\n\n\tstring front=\"\";\n\tstring rear=\"\";\n\tint str_pos = 0;\n\tfor(int i=0;i<fr_str.size();i++){\n\t  if(fr_str[i] == ' '){\n\t    str_pos = i+1;\n\t    break;\n\t  }\n\t  front += fr_str[i];\n\t}\n\tfor(int i=str_pos;i<fr_str.size();i++){\n\t  rear += fr_str[i];\n\n\t  if(i==str_pos && fr_str[i] == '\"') {\n\t    //nothing todo\n\t  }\n\t  else if(fr_str[i] == '\"'){\n\t    break;\n\t  }\n\t}\n\n\tif(front == \"forward\"){\n\t  if(rear == \"char\"){\n\t    editor.forward_char();\n\t    // editor.print_text();\n\t  }\n\t  else if(rear == \"word\"){\n\t    editor.forward_word();\n\t    // editor.print_text();\n\t  }\n\t}\n\telse if(front == \"backward\"){\n\t  if(rear == \"char\"){\n\t    editor.backward_char();\n\t    // editor.print_text();\n\t  }\n\t  else if(rear == \"word\"){\n\t    editor.backward_word();\n\t    // editor.print_text();\n\t  }\n\t}\n\telse if(front == \"insert\"){\n\t  editor.insert(rear.substr(1,rear.size()-2));\n\t  // editor.print_text();\n\t}\n\telse if(front == \"delete\"){\n\t  if(rear == \"char\"){\n\t    editor.delete_char();\n\t    // editor.print_text();\n\t  }\n\t  else if(rear == \"word\"){\n\t    editor.delete_word();\n\t    // editor.print_text();\n\t  }\n\t}\n      }\n      editor.print_text();\n    }\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cctype>\n#include <cstring>\n#include <string>\n\n#define MIN(A,B) \\\n  ( (B) < (A) ? (B) : (A) )\n#define MAX(A,B) \\\n  ( (B) > (A) ? (B) : (A) )\n\nusing namespace std;\n\n/** Application main entry point. */\nint\nmain (\n  int     argc,\n  char  * argv[ ]\n  )\n{\n  char buf[ 256 ];\n  int n;\n\n  fgets ( buf, sizeof ( buf ), stdin );\n  sscanf ( buf, \"%d\", &n );\n  while ( n-- )\n  {\n    string res;\n    int m;\n    int p = 0;\n\n    fgets ( buf, sizeof ( buf ), stdin );\n    *( strchr ( buf, '\\n' ) ) = '\\0';\n    res.assign ( buf );\n\n    fgets ( buf, sizeof ( buf ), stdin );\n    sscanf ( buf, \"%d\", &m );\n\n    while ( m-- )\n    {\n      fgets ( buf, sizeof ( buf ), stdin );\n\n      if ( !strncmp ( buf, \"forward char\", 12 ) )\n      {\n        ++p;\n        p = MIN( p, res.size ( ) );\n        continue ;\n      }\n      if ( !strncmp ( buf, \"backward char\", 13 ) )\n      {\n        --p;\n        p = MAX( p, 0 );\n        continue ;\n      }\n      if ( !strncmp ( buf, \"forward word\", 12 ) )\n      {\n        while ( p < res.size ( ) && isspace ( res[ p ] ) ) ++p;\n        while ( p < res.size ( ) && !isspace ( res[ p ] ) ) ++p;\n        continue ;\n      }\n      if ( !strncmp ( buf, \"backward word\", 13 ) )\n      {\n        while ( p > 0 && isspace ( res[ p - 1 ] ) ) --p;\n        while ( p > 0 && !isspace ( res[ p - 1 ] ) ) --p;\n        continue ;\n      }\n      if ( !strncmp ( buf, \"insert\", 6 ) )\n      {\n        *( strrchr ( buf, '\\\"' ) ) = '\\0';\n        res.insert ( p, strchr ( buf, '\\\"' ) + 1 );\n        p += strlen ( strchr ( buf, '\\\"' ) + 1 );\n        continue ;\n      }\n      if ( !strncmp ( buf, \"delete char\", 11 ) )\n      {\n        if ( p < res.size ( ) ) res.erase ( p, 1 );\n        continue ;\n      }\n      if ( !strncmp ( buf, \"delete word\", 11 ) )\n      {\n        int q = p;\n\n        while ( q < res.size ( ) && isspace ( res[ q ] ) ) ++q;\n        while ( q < res.size ( ) && !isspace ( res[ q ] ) ) ++q;\n        res.erase ( p, q - p );\n        continue ;\n      }\n    }\n\n#if 0\n    printf ( \"%s^%s\\n\"\n           , res.substr ( 0, p ).c_str ( )\n           , res.substr ( p, res.size ( ) - p ).c_str ( ) );\n#endif\n    putchar ( '^' );\n    puts ( res.c_str ( ) );\n  }\n\n  return ( 0 );\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <climits>\n#include <cmath>\n#include <ctime>\n#include <cassert>\n#include <iostream>\n#include <fstream>\n#include <sstream>\n#include <iomanip>\n#include <complex>\n#include <string>\n#include <vector>\n#include <list>\n#include <deque>\n#include <stack>\n#include <queue>\n#include <set>\n#include <map>\n#include <bitset>\n#include <iterator>\n#include <functional>\n#include <utility>\n#include <algorithm>\n#include <numeric>\n#include <typeinfo>\n\nusing namespace std;\n\n#define repi(i,a,b) for(int i=int(a);i<int(b);i++)\n#define rep(i,n) repi(i,0,n)\n#define all(c) (c).begin(), (c).end()\n#define mp make_pair\n\nvoid solve(){\n    string t;\n    getline(cin,t);\n    list<char> s(all(t));\n    rep(i,t.size())\n        s.push_back(t[i]);\n\n    auto it = s.begin();\n    int n; cin>>n; cin.get();\n    rep(x,n){\n        string op;\n        getline(cin,op);\n\n        if(op==\"forward char\")\n            if(it!=s.end()) ++it;\n        if(op==\"backward char\")\n            if(it!=s.begin()) --it;\n\n\n        if(op==\"forward word\"){\n            while(it!=s.end() && *it==' ') ++it;\n        }\n        if(op==\"backward word\"){\n            while(it!=s.begin() && *--it==' ') continue;\n            while(it!=s.begin()){\n                --it;\n                if(*it==' '){\n                    ++it;\n                    break;\n                }\n            }\n        }\n\n        if(op.substr(0,6)==\"insert\"){\n            int i=op.find('\"')+1,j=op.find('\"',i);\n            s.insert(it,op.begin()+i,op.begin()+j);\n        }\n\n        if(op==\"delete char\")\n            if(it!=s.end()) it=s.erase(it);\n\n        if(op==\"delete word\"){\n            auto it2 = it;\n            while(it2!=s.end() && *it2==' ') ++it2;\n            if(it2==s.end()) continue;\n            while(it2!=s.end() && *it2!=' ') ++it2;\n            it=s.erase(it,it2);\n        }\n    }\n\n    for(auto i = s.begin();; ++i){\n        if(i==it)\n            cout << '^';\n        if(i==s.end())\n            break;\n        cout << *i;\n    }\n    cout<<endl;\n}\n\nint main(){\n    int t;\n    cin>>t; cin.get();\n    rep(i,t) solve();\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cmath>\nusing namespace std;\n\nint main()\n{\n    int nb_cas;\n    cin>>nb_cas;\n    cin.ignore();\n    while(nb_cas--)\n    {\n        string texte;\n        getline(cin,texte);\n        int nb_op;\n        cin>>nb_op;\n        int curseur = 0;\n        for(int c=0;c<nb_op;c++)\n        {\n            string s1,s2;\n            cin>>s1;\n            cin.ignore();\n            getline(cin,s2);\n\n            if(s1==\"forward\")\n            {\n                if(s2==\"char\") curseur++;\n                else\n                {\n                    while(curseur<texte.size()&&texte[curseur]==' ') curseur++;\n                    while(curseur<texte.size()&&texte[curseur]!=' ') curseur++;\n                }\n                curseur = min(curseur,(int)texte.size());\n            }\n\n            else if(s1==\"backward\")\n            {\n                if(s2==\"char\") curseur--;\n                else\n                {\n                    while(curseur>0&&texte[curseur-1]==' ') curseur--;\n                    while(curseur>0&&texte[curseur-1]!=' ') curseur--;\n                }\n                curseur = max(curseur,0);\n            }\n            else if(s1==\"delete\")\n            {\n                if(s2==\"char\"&&curseur<texte.size())\n                {\n                    texte.erase(texte.begin()+curseur);\n                }\n                else if(s2==\"word\")\n                {\n                    int finMot = curseur;\n                    while(finMot<texte.size()&&texte[finMot]==' ') finMot++;\n                    if(finMot == texte.size()) continue;\n                    while(finMot<texte.size()&&texte[finMot]!=' ')\n                    {\n                        finMot ++;\n                    }\n                    texte = texte.substr(0,curseur)+(finMot < texte.size()?texte.substr(finMot):\"\");\n                }\n            }\n            else\n            {\n                while(s2[0]!='\"') s2=s2.substr(1);\n                while(s2[s2.size()-1]!='\"') s2 = s2.substr(s2.size()-1);\n                s2 = s2.substr(1,s2.size()-2);\n                texte = texte.substr(0,curseur)+s2+(curseur<(int)texte.size()?texte.substr(curseur):\"\");\n                curseur += s2.size();\n            }\n        }\n        cout<<texte.substr(0,curseur)+\"^\"+(curseur<(int)texte.size()?texte.substr(curseur):\"\")<<endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nvoid setPos(string &buff,int &pos){\n    for(int i = 0; i < buff.size(); i++){\n        if(buff[i]=='^'){\n            pos=i;\n            return;\n        }\n    }\n}\n\nint main(){\n    int n;\n    cin>>n;\n    string gb;\n    getline(cin,gb);\n    while(n--){\n        string buff;\n        getline(cin,buff);\n        int m;\n        cin>>m;\n        getline(cin,gb);\n        int pos=0;\n        buff='^'+buff;\n        while(m--){\n            string op;\n            getline(cin,op);\n            if(op==\"forward char\"){\n                if(pos!=buff.size()-1){\n                    swap(buff[pos],buff[pos+1]);\n                    pos++;\n                    setPos(buff,pos);\n                }\n            }\n            else if(op==\"forward word\"){\n                // ツ右ツづ可閉カツ篠堋づーツ探ツつオツづ可つ「ツつォツ、ツ個ゥツづつつゥツづつスツづァツつサツづ個閉カツ篠堋療アツづ個催渉可づ個暗環置ツづ慊づカツーツソツδ仰づーツ暗堋督ョ\n                if(pos!=buff.size()-1){\n                    int initPos=pos;\n                    pos++;\n                    while(pos<buff.size()&&buff[pos]==' ')pos++;\n                    while(pos<buff.size()&&buff[pos]!=' ')pos++;\n                    buff=buff.substr(0,initPos)+buff.substr(initPos+1);\n                    if(pos-1==buff.size())\n                        buff+='^';\n                    else{\n                        pos--;\n                        buff=buff.substr(0,pos)+'^'+buff.substr(pos);\n                    }\n                    setPos(buff,pos);\n                }\n            }\n            else if(op==\"backward char\"){\n                if(pos!=0){\n                    swap(buff[pos],buff[pos-1]);\n                    setPos(buff,pos);\n                }\n            }\n            else if(op==\"backward word\"){\n                if(pos!=0){\n                    int initPos=pos;\n                    pos--;\n                    while(pos>=0&&buff[pos]==' ')pos--;\n                    while(pos>=0&&buff[pos]!=' ')pos--;\n                    buff=buff.substr(0,initPos)+buff.substr(initPos+1);\n                    if(pos==-1)\n                        buff='^'+buff;\n                    else{\n                        pos++;\n                        buff=buff.substr(0,pos)+'^'+buff.substr(pos);\n                    }\n                    setPos(buff,pos);\n                }\n            }\n            else if(op==\"delete char\"){\n                if(pos!=buff.size()-1)\n                    buff=buff.substr(0,pos+1)+buff.substr(pos+2);\n                setPos(buff,pos);\n            }\n            else if(op==\"delete word\"){\n                int initPos=pos;\n                if(pos!=buff.size()-1){\n                    while(pos<buff.size()&&buff[pos]==' ')pos++;\n                    while(pos<buff.size()&&buff[pos]!=' ')pos++;\n                    if(pos==buff.size())\n                        buff=buff.substr(0,pos+1);\n                    else\n                        buff=buff.substr(0,initPos+1)+buff.substr(pos);\n                    setPos(buff,pos);\n                }\n            }\n            else if(op.substr(0,6)==\"insert\"){\n                string ins=op.substr(7);\n                ins=ins.substr(1);\n                ins=ins.substr(0,ins.size()-1);\n                buff=buff.substr(0,pos)+ins+'^'+buff.substr(pos+1);\n                setPos(buff,pos);\n            }\n        }\n        cout<<buff<<endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<vector>\nusing namespace std;\n\n#define REP(i,n) for(int i = 0; i < (int)(n); i++)\n\nint main() {\n  int T; cin >> T >> ws;\n  while(T--) {\n    string buf;\n    getline(cin, buf);\n    //     cout << buf << endl;\n    // i == buf.size()ÆÈé±Æà éB\n    // eof <=> i == buf.size()\n    int i = 0;\n    int M; cin >> M >> ws;\n    REP(m, M) {\n      string line;\n      string command, op;\n      getline(cin, line);\n      int j = 0;\n      for(j = 0; line[j] != ' '; j++);\n      command = line.substr(0, j);\n      op = line.substr(j + 1);\n\n      //       cout << command << \" \" << op << endl;\n      if( command == \"forward\" ) {\n        if( op == \"word\" ) {\n          while( i < buf.size() && buf[i] == ' ' ) i++;\n          while( i < buf.size() && buf[i] != ' ' ) i++;\n        } else if( op == \"char\" ) {\n          if( i != buf.size() ) i++;\n        }\n      }\n\n      if( command == \"backward\" ) {\n        if( op == \"word\" ) {\n          i--;\n          while( i >= 0 && buf[i] == ' ' ) i--;\n          while( i >= 0 && buf[i] != ' ' ) i--;\n          i++;\n        } else if( op == \"char\" ) {\n          if( i > 0 ) i--;\n        }\n      }\n\n      if( command == \"insert\" ) {\n        string text = op.substr(1, op.size() - 2);\n\n        buf.insert(i, text);\n        i += (int)text.size();\n      }\n\n      if( command == \"delete\" ) {\n        if( i < buf.size() ) {\n          if( op == \"char\" ) {\n            buf.erase(i,1);\n          }\n\n          if( op == \"word\" ) {\n            int len = 0;\n            while( i + len < buf.size() && buf[i + len] == ' ' ) len++;\n            if( i + len == buf.size() ) {\n              ;\n            } else {\n              while( i + len < buf.size() && buf[i + len] != ' ' )len++;\n              buf.erase( i, len );\n            }\n          }\n        }\n      }\n//             cout << buf << \" \" << i <<  endl;\n\n    }\n    buf.insert(i, 1, '^');\n    cout << buf << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cmath>\n#include <string>\n\nusing namespace std;\nint main(){\n\tint n,r;\n\tcin >> n;\n\tcin.ignore();\n\twhile(n--){\n\t\tint cur = 0;\n\t\tstring text, command;\n\t\tgetline(cin, text);\n\t\tint len = text.size();\n\t\tcin\t>> r;\n\t\tcin.ignore();\n\t\twhile(r--){\n\t\t\tgetline(cin, command);\n\t\t\tif(command == \"forward char\"){\n\t\t\t\tcur=min(len, cur+1);\n\t\t\t}else if(command == \"forward word\"){\n\t\t\t\tfor(;cur<len && text[cur] == ' '; cur++);\n\t\t\t\tfor(;cur<len && text[cur] != ' '; cur++);\n\t\t\t}else if(command == \"backward char\"){\n\t\t\t\tcur=max(0, cur-1);\n\t\t\t}else if(command == \"backward word\"){\n\t\t\t\tfor(;cur>0 && text[cur-1] == ' '; cur--);\n\t\t\t\tfor(;cur>0 && text[cur-1] != ' '; cur--);\n\t\t\t}else if(command == \"delete char\"){\n\t\t\t\tif(cur>=len) continue;\n\t\t\t\ttext.erase(text.begin()+cur);\n\t\t\t\tlen--;\n\t\t\t}else if(command == \"delete word\"){\n\t\t\t\tfor(;cur<len && text[cur] != ' ';){\n\t\t\t\t\ttext.erase(text.begin()+cur);\n\t\t\t\t\tlen--;\n\t\t\t\t}\n\t\t\t}else{//insert\n\t\t\t\tstring ins;\n\t\t\t\tint s = command.find('\"');\n\t\t\t\tint t = command.find('\"',s+1);\n\t\t\t\tins = command.substr(s+1,t-s-1);\n\t\t\t\ttext.insert(cur,ins);\n\t\t\t\tlen+=t-s-1;\n\t\t\t\tcur+=t-s-1;\n\t\t\t}\n\t\t\t\n\t\t}\n\t\ttext.insert(text.begin()+cur,'^');\n\t\tcout << text;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cmath>\nusing namespace std;\n\nint main()\n{\n    string bla = \"bla\";\n    cout<<bla.substr(3)<<endl;\n    int nb_cas;\n    cin>>nb_cas;\n    cin.ignore();\n    while(nb_cas--)\n    {\n        string texte;\n        getline(cin,texte);\n        int nb_op;\n        cin>>nb_op;\n        int curseur = 0;\n        for(int c=0;c<nb_op;c++)\n        {\n            string s1,s2;\n            cin>>s1;\n            cin.ignore();\n            getline(cin,s2);\n            if(s1==\"forward\"||s1==\"backward\")\n            {\n                int d = (s1==\"forward\"?1:-1);\n                if(s2==\"char\") curseur+=d;\n                else if(s2==\"word\")\n                {\n                    while(curseur>= 0 && curseur<=texte.size()&&(curseur == texte.size()||texte[curseur]==' ')) curseur+=d;\n                    while(curseur>=-0&&curseur<=texte.size()&&(curseur==texte.size()||texte[curseur]!=' '))\n                    {\n                        curseur += d;\n                    }\n                }\n                curseur = max(curseur,0);\n                curseur = min(curseur,(int)texte.size());\n            }\n            else if(s1==\"delete\")\n            {\n                if(s2==\"char\")\n                {\n                    texte = texte.substr(0,min((int)texte.size(),curseur))+texte.substr(min(curseur+1,(int)texte.size()));\n                }\n                else if(s2==\"word\")\n                {\n                    int finMot = curseur;\n                    while(finMot<texte.size()&&texte[finMot]==' ') finMot++;\n                    while(finMot<texte.size()&&texte[finMot]!=' ')\n                    {\n                        finMot ++;\n                    }\n                    texte = texte.substr(0,curseur)+(finMot < texte.size()?texte.substr(finMot):\"\");\n                }\n            }\n            else\n            {\n                s2 = s2.substr(1,s2.size()-2);\n                texte = texte.substr(0,curseur)+s2+(curseur<(int)texte.size()?texte.substr(curseur):\"\");\n                curseur += s2.size();\n            }\n        }\n        cout<<texte.substr(0,curseur)+\"^\"+(curseur<(int)texte.size()?texte.substr(curseur):\"\")<<endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define FOR(i,a,b) for(int i=(a);i<(b);++i)\n#define rep(i,n)   FOR(i,0,n)\n#define pb push_back\n#define mp make_pair\ntypedef long long ll;\ntypedef pair<int,int> pint;\n\nint main(){\n    int n,m;\n    string s,q;\n    cin>>n;cin.ignore();\n    while(n--){\n        int cur=0;\n        string t(\"^\");\n        getline(cin,s);\n        s=t+s;\n        cin>>m;cin.ignore();\n        rep(i,m){\n            getline(cin,q);\n            if(q==\"forward char\"){\n                if(cur<s.size()-1) {\n                    swap(s[cur],s[cur+1]);\n                    ++cur;\n                } \n            }\n            else if(q==\"forward word\"){\n                int spcnt=(s[cur+1]!=' ')?1:0;\n                while(cur<s.size()-1){\n                    if(s[cur+1]==' '){\n                        ++spcnt;\n                        if(spcnt==2) break;\n                        while(s[cur+1]==' '){\n                            swap(s[cur],s[cur+1]);\n                            ++cur;\n                        } \n                    }\n                    if(cur<s.size()-1){\n                    swap(s[cur],s[cur+1]);\n                    ++cur;\n                    }\n                }\n            }\n            else if(q==\"backward char\"){\n                if(cur>0) {\n                    swap(s[cur],s[cur-1]);\n                    --cur;\n                } \n            }\n            else if(q==\"backward word\"){\n                int spcnt=(s[cur-1]!=' ')?1:0;;\n                while(cur>0){\n                    if(s[cur-1]==' '){\n                        ++spcnt;\n                        if(spcnt==2) break;\n                        while(s[cur-1]==' '){\n                            swap(s[cur],s[cur-1]);\n                            --cur;\n                        }\n                    }\n                    if(cur>0){\n                    swap(s[cur],s[cur-1]);\n                    --cur;\n                    }\n                }\n            }\n            else if(q[0]=='i'){\n                s.insert(cur,q,8,q.size()-9);\n                cur +=q.size()-9;\n            }\n            else if(q==\"delete char\"){\n                if(cur<s.size()-1){\n                s.erase(cur+1,1);\n                }\n            }\n            else if(q==\"delete word\"){\n                int spcnt=(s[cur+1]!=' ')?1:0,tm=cur;\n                while(tm<s.size()-1){\n                    if(s[tm+1]==' '){\n                        ++spcnt;\n                        if(spcnt==2) break;\n                        while(s[tm+1]==' '){\n                            swap(s[tm],s[tm+1]);\n                            ++tm;\n                        } \n                    }\n                    if(tm<s.size()-1){\n                        swap(s[tm],s[tm+1]);++tm;\n                    }\n                }\n                while(tm!=cur){\n                    s.erase(tm-1,1);\n                    --tm;\n                }\n            }\n        }\n        cout<<s<<endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nvoid setPos(string &buff,int &pos){\n    for(int i = 0; i < buff.size(); i++){\n        if(buff[i]=='^'){\n            pos=i;\n            return;\n        }\n    }\n}\n\nint main(){\n    int n;\n    cin>>n;\n    string gb;\n    getline(cin,gb);\n    while(n--){\n        string buff;\n        getline(cin,buff);\n        int m;\n        cin>>m;\n        getline(cin,gb);\n        int pos=0;\n        buff='^'+buff;\n        while(m--){\n            string op;\n            getline(cin,op);\n            if(op==\"forward char\"){\n                if(pos!=buff.size()-1){\n                    swap(buff[pos],buff[pos+1]);\n                    pos++;\n                }\n            }\n            else if(op==\"forward word\"){\n                // ツ右ツづ可閉カツ篠堋づーツ探ツつオツづ可つ「ツつォツ、ツ個ゥツづつつゥツづつスツづァツつサツづ個閉カツ篠堋療アツづ個催渉可づ個暗環置ツづ慊づカツーツソツδ仰づーツ暗堋督ョ\n                if(pos!=buff.size()-1){\n                    int initPos=pos;\n                    pos++;\n                    while(pos<buff.size()&&buff[pos]==' ')pos++;\n                    while(pos<buff.size()&&buff[pos]!=' ')pos++;\n                    buff=buff.substr(0,initPos)+buff.substr(initPos+1);\n                    if(pos-1==buff.size())\n                        buff+='^';\n                    else{\n                        pos--;\n                        buff=buff.substr(0,pos)+'^'+buff.substr(pos);\n                    }\n                    setPos(buff,pos);\n                }\n            }\n            else if(op==\"backward char\"){\n                if(pos!=0){\n                    swap(buff[pos],buff[pos-1]);\n                    setPos(buff,pos);\n                }\n            }\n            else if(op==\"backward word\"){\n                if(pos!=0){\n                    int initPos=pos;\n                    pos--;\n                    while(pos>=0&&buff[pos]==' ')pos--;\n                    while(pos>=0&&buff[pos]!=' ')pos--;\n                    buff=buff.substr(0,initPos)+buff.substr(initPos+1);\n                    if(pos==-1)\n                        buff='^'+buff;\n                    else{\n                        pos++;\n                        buff=buff.substr(0,pos)+'^'+buff.substr(pos);\n                    }\n                    setPos(buff,pos);\n                }\n            }\n            else if(op==\"delete char\"){\n                if(pos!=buff.size()-1)\n                    buff=buff.substr(0,pos+1)+buff.substr(pos+2);\n                setPos(buff,pos);\n            }\n            else if(op==\"delete word\"){\n                int initPos=pos;\n                if(pos!=buff.size()-1){\n                    while(pos<buff.size()&&buff[pos]==' ')pos++;\n                    while(pos<buff.size()&&buff[pos]!=' ')pos++;\n                    buff=buff.substr(0,initPos+1)+buff.substr(pos);\n                    setPos(buff,pos);\n                }\n            }\n            else if(op.substr(0,6)==\"insert\"){\n                string ins=op.substr(7);\n                ins=ins.substr(1);\n                ins=ins.substr(0,ins.size()-1);\n                buff=buff.substr(0,pos)+ins+'^'+buff.substr(pos+1);\n                setPos(buff,pos);\n            }\n        }\n        cout<<buff<<endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\nusing namespace std;\n\nint main(){\n  int t,m;\n  string str,com,arg;\n\n  cin >> t;\n  cin.ignore();\n  while(t--){\n    getline(cin,str);\n    cin >> m;\n\n    int pos = 0;\n    for(int i=0;i<m;i++){\n      cin >> com;\n      cin.ignore();\n      getline(cin,arg);\n      //cout << com << \" \" << arg <<endl;\n      if(com == \"forward\"){\n\tif(arg == \"char\"){\n\t  if(pos!=(int)str.size())pos++;\t  \n\t}else{\n\t  while(pos<(int)str.size() && str[pos]!=' ')pos++;\n\t}\n      }\n      if(com == \"backward\"){\n\tif(arg == \"char\"){\n\t  if(pos)pos--;\n\t}else{\n\t  while(pos>0 && pos<(int)str.size() && str[pos]!=' ')pos--;\n\t}\n      }\n      if(com == \"delete\"){\n\tif(arg == \"char\"){\n\t  if(pos!=(int)str.size())str.erase(str.begin()+pos);\n\t}else{\n\t  while(pos<(int)str.size() && str[pos]!=' ')str.erase(str.begin()+pos);\n\t  while(pos<(int)str.size() && str[pos]==' ')str.erase(str.begin()+pos);\n\t}\n      }\n      if(com == \"insert\"){\n\tfor(int j=1;j<(int)arg.size()-1;j++){\n\t  if(pos==(int)str.size()){\n\t    str.push_back(arg[j]);\n\t    pos++;\n\t  }else{\n\t    str.insert(str.begin()+pos++,arg[j]);\n\t  }\n\t}\n      }\n      //cout << str << endl;\n    }\n    if(pos==(int)str.size())str.push_back('^');\n    else str.insert(str.begin()+pos,'^');\n    cout << str << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nvoid setPos(string &buff,int &pos){\n    for(int i = 0; i < buff.size(); i++){\n        if(buff[i]=='^'){\n            pos=i;\n            return;\n        }\n    }\n}\n\nint main(){\n\n    int n;\n    cin>>n;\n    string gb;\n    getline(cin,gb);\n    while(n--){\n        string buff;\n        getline(cin,buff);\n        int m;\n        cin>>m;\n        getline(cin,gb);\n        int pos=0;\n        buff='^'+buff;\n        while(m--){\n            string op;\n            getline(cin,op);\n            if(op==\"forward char\"){\n                if(pos!=buff.size()-1){\n                    swap(buff[pos],buff[pos+1]);\n                    pos++;\n                }\n            }\n            else if(op==\"forward word\"){\n                // ツ右ツづ可閉カツ篠堋づーツ探ツつオツづ可つ「ツつォツ、ツ個ゥツづつつゥツづつスツづァツつサツづ個閉カツ篠堋療アツづ個催渉可づ個暗環置ツづ慊づカツーツソツδ仰づーツ暗堋督ョ\n                if(pos!=buff.size()-1){\n                    int initPos=pos;\n                    pos++;\n                    while(pos<buff.size()&&buff[pos]==' ')pos++;\n                    while(pos<buff.size()&&buff[pos]!=' ')pos++;\n                    buff=buff.substr(0,initPos)+buff.substr(initPos+1);\n                    if(pos==buff.size()-1)\n                        buff+='^';\n                    else{\n                        pos--;\n                        buff=buff.substr(0,pos)+'^'+buff.substr(pos);\n                    }\n                    setPos(buff,pos);\n                }\n            }\n            else if(op==\"backward char\"){\n                if(pos!=0){\n                    swap(buff[pos],buff[pos-1]);\n                    setPos(buff,pos);\n                }\n            }\n            else if(op==\"backward word\"){\n                if(pos!=0){\n                    int initPos=pos;\n                    pos--;\n                    while(pos>=0&&buff[pos]==' ')pos--;\n                    while(pos>=0&&buff[pos]!=' ')pos--;\n                    buff=buff.substr(0,initPos)+buff.substr(initPos+1);\n                    if(pos==-1)\n                        buff='^'+buff;\n                    else{\n                        pos++;\n                        buff=buff.substr(0,pos)+'^'+buff.substr(pos);\n                    }\n                    setPos(buff,pos);\n                }\n            }\n            else if(op==\"delete char\"){\n                //if(m==3){\n                //    cout<<endl;\n                //}\n                if(pos!=buff.size()-1){\n                    buff=buff.substr(0,pos+1)+buff.substr(pos+2);\n                }\n                setPos(buff,pos);\n            }\n            else if(op==\"delete word\"){\n                int initPos=pos;\n                if(pos!=buff.size()-1){\n                    while(pos<buff.size()&&buff[pos]==' ')pos++;\n                    while(pos<buff.size()&&buff[pos]!=' ')pos++;\n                    buff=buff.substr(0,initPos+1)+buff.substr(pos);\n                    setPos(buff,pos);\n                }\n            }\n            else if(op.substr(0,6)==\"insert\"){\n                string ins=op.substr(7);\n                ins=ins.substr(1);\n                ins=ins.substr(0,ins.size()-1);\n                buff=buff.substr(0,pos)+ins+'^'+buff.substr(pos+1);\n                setPos(buff,pos);\n            }\n        }\n        cout<<buff<<endl;\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<vector>\nusing namespace std;\n\n#define REP(i,n) for(int i = 0; i < (int)(n); i++)\n\nint main() {\n  int T; cin >> T >> ws;\n  while(T--) {\n    string buf;\n    getline(cin, buf);\n    //     cout << buf << endl;\n    // i == buf.size()ÆÈé±Æà éB\n    // eof <=> i == buf.size()\n    int i = 0;\n    int M; cin >> M >> ws;\n    REP(m, M) {\n      string line;\n      string command, op;\n      getline(cin, line);\n      int j = 0;\n      for(j = 0; line[j] != ' '; j++);\n      command = line.substr(0, j);\n      op = line.substr(j + 1);\n\n      //       cout << command << \" \" << op << endl;\n      if( command == \"forward\" ) {\n        if( op == \"word\" ) {\n          while( i < buf.size() && buf[i] == ' ' ) i++;\n          while( i < buf.size() && buf[i] != ' ' ) i++;\n        } else if( op == \"char\" ) {\n          if( i != buf.size() ) i++;\n        }\n      }\n\n      if( command == \"backward\" ) {\n        if( op == \"word\" ) {\n          while( i >= 0 && buf[i] != ' ' ) i--;\n          i++;\n        } else if( op == \"char\" ) {\n          if( i != 0 ) i--;\n        }\n      }\n\n      if( command == \"insert\" ) {\n        string text = op.substr(1, op.size() - 2);\n\n        buf.insert(i, text);\n        i += text.size();\n      }\n\n\n      if( command == \"delete\" ) {\n        if( i < buf.size() ) {\n          if( op == \"char\" ) {\n            buf.erase(i,1);\n          }\n\n          if( op == \"word\" ) {\n            while( i < buf.size() && buf[i] == ' ' )\n              buf.erase(i, 1);\n\n            while( i < buf.size() && buf[i] != ' ' )\n              buf.erase(i, 1);\n          }\n        }\n      }\n      //       cout << buf << \" \" << i <<  endl;\n\n    }\n    buf.insert(i, 1, '^');\n    cout << buf << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstring>\nusing namespace std;\n\nchar buffer[1024], command[1024];\n\nint main()\n{\n  int T;\n  scanf(\"%d\\n\", &T);\n  while (T--) {\n    int M;\n    fgets(buffer, sizeof(buffer), stdin);\n    *strchr(buffer, '\\n') = '\\0';\n    scanf(\"%d\\n\", &M);\n    int cur = 0;\n    for (int i = 0; i < M; ++i) {\n      fgets(command, sizeof(command), stdin);\n      if (strstr(command, \"forward char\")) {\n        if (buffer[cur])\n          ++cur;\n      } else if (strstr(command, \"forward word\")) {\n        for (; buffer[cur]; ++cur)\n          if (buffer[cur] != ' ')\n            break;\n        for (; buffer[cur]; ++cur)\n          if (buffer[cur] == ' ')\n            break;\n      } else if (strstr(command, \"backward char\")) {\n        if (cur > 0)\n          --cur;\n      } else if (strstr(command, \"backward word\")) {\n        for (; cur > 0; --cur)\n          if (buffer[cur-1] != ' ')\n            break;\n        for (; cur > 0; --cur)\n          if (buffer[cur-1] == ' ')\n            break;\n      } else if (strstr(command, \"insert\")) {\n        char* first = strchr(command, '\"') + 1;\n        char* last = strchr(first, '\"');\n        int length = last - first;\n        memmove(buffer + cur + length, buffer + cur, length);\n        memcpy(buffer + cur, first, length);\n        cur += length;\n      } else if (strstr(command, \"delete char\")) {\n        int j;\n        for (j = cur + 1; buffer[j]; ++j)\n          buffer[j-1] = buffer[j];\n        buffer[j-1] = '\\0';\n      } else if (strstr(command, \"delete word\")) {\n        int j, k;\n        for (j = cur; buffer[j]; ++j)\n          if (buffer[j] != ' ')\n            break;\n        for (; buffer[j]; ++j)\n          if (buffer[j] == ' ')\n            break;\n        for (k = cur; buffer[j]; ++j, ++k)\n          buffer[k] = buffer[j];\n        buffer[k] = '\\0';\n      }\n    }\n    for (int i = 0; buffer[i]; ++i) {\n      if (i == cur)\n        putchar('^');\n      putchar(buffer[i]);\n    }\n    if (buffer[cur] == '\\0')\n      putchar('^');\n    putchar('\\n');\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <algorithm>\n#include <cctype>\nusing namespace std;\n\nint bword(string str, int n)\n{\n\tbool nb=false;\n\tint ret;\n\tfor(ret=n; ret>0; ret--)\n\t{\n\t\tif(!nb)\n\t\t{\n\t\t\tif(str[ret]!=' ') nb=true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(str[ret]==' ') return ret;\n\t\t}\n\t}\n\treturn ret;\n}\n\nint fword(string str, int n)\n{\n\tbool nb=false;\n\tint ret;\n\tfor(ret=n; ret<str.size(); ret++)\n\t{\n\t\tif(!nb)\n\t\t{\n\t\t\tif(str[ret]!=' ') nb=true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(str[ret]==' ') return ret;\n\t\t}\n\n\t}\n\n\treturn ret;\n}\n\nint dword(string str, int n)\n{\n\tbool nb=false;\n\tint ret;\n\tfor(ret=n; ret<str.size(); ret++)\n\t{\n\t\tif(!nb)\n\t\t{\n\t\t\tif(str[ret]!=' ') nb=true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(str[ret]==' ') return ret;\n\t\t}\n\n\t}\n\n\tif(str[str.size()-1]!=' ') return str.size();\n\n\treturn n;\n}\n\nint main()\n{\n\tint N,M;\n\tstring str;\n\n\tcin >> N;\n\tgetline(cin,str);\n\n\twhile(N--)\n\t{\n\t\tgetline(cin,str);\n\t\t//str.erase(str.end()-1);\n\t\tint pos=0;\n\t\tcin >> M;\n\t\twhile(M--)\n\t\t{\n\t\t\tstring cmd;\n\t\t\tcin >> cmd;\n\t\t\tif(cmd[0]=='f')\n\t\t\t{\t\t\t\t\n\t\t\t\tgetline(cin,cmd);\n\t\t\t\tif(cmd[1]=='c')\n\t\t\t\t{\n\t\t\t\t\tif(pos<str.size()) pos++;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tpos=fword(str, pos);\n\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(cmd[0]=='b')\n\t\t\t{\n\t\t\t\tgetline(cin,cmd);\n\t\t\t\tif(cmd[1]=='c')\n\t\t\t\t{\n\t\t\t\t\tif(pos>0) pos--;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tpos=bword(str, pos);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(cmd[0]=='d')\n\t\t\t{\n\t\t\t\tgetline(cin,cmd);\n\t\t\t\tif(cmd[1]=='c')\n\t\t\t\t{\n\t\t\t\t\tif(pos!=str.size()) \n\t\t\t\t\t\tstr.erase(str.begin()+pos);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif(pos!=str.size())\n\t\t\t\t\t{\n\t\t\t\t\t\tint np=dword(str,pos);\n\t\t\t\t\t\tif(pos!=np) str.erase(str.begin()+pos, str.begin()+np);\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t\tif(cmd[0]=='i')\n\t\t\t{\n\t\t\t\tgetline(cin, cmd);\n\t\t\t\tcmd.assign(cmd.begin()+2, cmd.end()-2);\n\t\t\t\tstr.insert(pos, cmd);\n\t\t\t\tpos+=cmd.size();\n\t\t\t}\n\n\t\t}\n\n\t\tstr.insert(str.begin()+pos, '^');\n\t\tcout << str << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <cassert>\n#include <iostream>\n#include <cstdio>\n#include <vector>\n#include <algorithm>\n#include <complex>\n#include <cstring>\n#include <cstdlib>\n#include <string>\n#include <cmath>\n#include <queue>\n#include <set>\n#include <map>\nusing namespace std;\n\n#define REP(i,n) for(int i=0;i<(int)n;++i)\n#define FOR(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i)\n#define ALL(c) (c).begin(), (c).end()\nconst int INF = 1<<29;\n\nvoid forwardChar(string &s, int &c) {\n  if (c != s.size()) c++;\n}\nvoid forwardWord(string &s, int &c) {\n  for (;c<s.size()&&s[c]==' ';++c);\n  for (;c<s.size()&&s[c]!=' ';++c);\n}\nvoid backwardChar(string &s, int &c) {\n  if (c) c--;\n}\nvoid backwardWord(string &s, int &c) {\n  for (;c>0&&s[c-1]==' ';--c);\n  for (;c>0&&s[c-1]==' ';--c);\n}\nvoid insertText(string &s, int &c, const string &t) {\n  s = s.substr(0,c) + t + s.substr(c);\n  c += t.size();\n}\nvoid deleteChar(string &s, int &c) {\n  if (c != s.size()) s.erase(s.begin()+c);\n}\nvoid deleteWord(string &s, int &c) {\n  bool state = 0;\n  int p = c;\n  for (; p<s.size()&&s[p]==' '; ++p);\n  if (p==s.size()) return;\n  for (; p<s.size()&&s[p]!=' '; ++p);\n  s = s.substr(0,c) + s.substr(p);\n  // if (p>c) s.erase(c,p-c);\n}\n\nint main() {\n  int n;\n  cin >> n;\n  cin.ignore();\n  while(n--) {\n    string text;\n    getline(cin, text);\n    int m; cin >> m; cin.ignore();\n    // cout << m << endl;\n    // cout << text << endl;\n    int cursor = 0;\n    while(m--) {\n      string op1, op2;\n      cin >> op1;\n      cin.ignore();\n      getline(cin,op2);\n      // cout << op1 << \" : \" << op2 << endl;\n      \n      if (op1[0] == 'f') {\n        if (op2[0] == 'c') forwardChar(text, cursor);\n        else forwardWord(text, cursor);\n      } else if (op1[0] == 'b') {\n        if (op2[0] == 'c') backwardChar(text, cursor);\n        else backwardWord(text, cursor);\n      } else if (op1[0] == 'i') {\n        assert(op2[0]=='\"' && op2[op2.size()-1]=='\"');\n        op2 = op2.substr(1, op2.size()-2);\n        insertText(text, cursor, op2);\n      } else if (op1[0] == 'd') {\n        if (op2[0] == 'c') deleteChar(text, cursor);\n        else deleteWord(text, cursor);\n      } else {\n        assert(0);\n      }\n      // cout << text << \" \" << cursor << endl;\n    }\n\n    text = text.substr(0,cursor) + \"^\" + text.substr(cursor);\n    cout << text << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <list>\n#include <string>\n\nusing namespace std;\n\nvoid printlst(list<char> str){\n  for(list<char>::iterator i=str.begin(); i!=str.end(); i++)\n    cout << *i;\n  cout << endl;\n}\n\nint main(){\n  int n;\n  cin >> n;\n  for(int i=0; i<n; i++){\n    int m;\n    list<char> str;\n    string sstr;\n    getline(cin,sstr);    getline(cin,sstr);\n    cin >> m;\n\n    for(int i=0; i<sstr.size(); i++) str.push_back(sstr[i]);\n    list<char>::iterator cur=str.begin();\n    //    printlst(str);\n\n    for(int j=0; j<m; j++){\n      string op1,op2;\n      cin >> op1;\n      if(op1==\"insert\"){\n\tchar c;\n\twhile((c=getchar())!='\"') ;\n\twhile((c=getchar())!='\"') op2+=c;\n\tfor(int i=0; i<op2.size(); i++)\n\t  str.insert(cur,op2[i]);\n      }else{\n\tcin >> op2;\n\tif(op1==\"forward\"){\n\t  if(op2==\"char\"){\n\t    cur++;\n\t  }else{\n\t    while(*cur==' ') cur++;\n\t    while(true){\n\t      if(*cur==' ' || cur==str.end())\n\t\tbreak;\n\t      cur++;\n\t    }\n\t  }\n\t}else if(op1==\"backward\"){\n\t  if(op2==\"char\"){\n\t    if(cur!=str.begin())\n\t      cur--;\n\t  }else{\n\t    if(cur!=str.begin())\n\t      cur--;\n\t    while(*cur==' ') cur--;\n\t    while(true){\n\t      if(*cur==' '){\n\t\tcur++;\n\t\tbreak;\n\t      }else if(cur==str.begin()){\n\t\tbreak;\n\t      }\n\t      cur--;\n\t    }\n\t  }\n\t}else if(op1==\"delete\"){\n\t  if(op2==\"char\"){\n\t    if(cur!=str.end())\n\t      str.erase(cur++);\n\t  }else{\n\t    while(*cur==' ') str.erase(cur++);\n\t    while(true){\n\t      if(*cur==' ' || cur==str.end())\n\t\tbreak;\n\t      str.erase(cur++);\n\t    }\n\t  }\n\t}\n      }\n      //      str.insert(cur,'^');\n      //      printlst(str);\n      //      str.erase((--cur)++);\n    }\n\n    str.insert(cur,'^');\n    printlst(str);\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#define MAX 1010\nchar buffer[MAX], temp[MAX];\nint cursor, length;\nvoid print(const char* arg)\n{\n#ifdef __HOGEOVER30__DEBUG__\n\tint i;\n\tprintf(\"%16s: \", arg);\n\tfor (i = 0; i < cursor; ++i) putchar(buffer[i]);\n\tputchar('^');\n\tfor (i = cursor; i < length; ++i) putchar(buffer[i]);\n\tputs(\"\");\n#endif\n}\nvoid forwardChar(void)\n{\n\tif (cursor < length) cursor++;\n\tprint(\"foward char\");\n}\nvoid forwardWord(void)\n{\n\tif (cursor == length) return;\n\twhile (cursor < length && buffer[cursor] == ' ') cursor++;\n\twhile (cursor < length && buffer[cursor] != ' ') cursor++;\n\tprint(\"forward word\");\n}\nvoid backwardChar(void)\n{\n\tif (cursor > 0) cursor--;\n\tprint(\"backward char\");\n}\nvoid backwardWord(void)\n{\n\tif (cursor == 0) return;\n\twhile (cursor > 0 && buffer[cursor] == ' ') cursor--;\n\twhile (cursor > 0 && buffer[cursor] != ' ') cursor--;\n\tif (buffer[cursor] == ' ') cursor++;\n\tprint(\"backward word\");\n}\nvoid insert(const char* text)\n{\n\tint i;\n\tint n = strlen(text);\n\tfor (i = length; i >= cursor; --i) buffer[i+n] = buffer[i];\n\tfor (i = 0; i < n; ++i) buffer[cursor++] = text[i];\n//\twhile (cursor > 0 && buffer[cursor-1] == ' ') cursor--;\n\tlength += n;\n\tprint(\"insert\");\n}\nvoid deleteChar(void)\n{\n\tint i;\n\tif (cursor == length) return;\n\tfor (i = cursor; i < length; ++i) buffer[i] = buffer[i+1];\n\tlength--;\n\tprint(\"delete char\");\n}\nvoid deleteWord(void)\n{\n\tint i;\n\tint k = 0;\n\tif (cursor == length) return;\n\twhile (k + cursor < length && buffer[k + cursor] == ' ') k++;\n\twhile (k + cursor < length && buffer[k + cursor] != ' ') k++;\n\tfor (i = cursor; i < length; ++i) buffer[i] = buffer[i+k];\n\tlength -= k;\n\tprint(\"delete word\");\n}\nint main(void)\n{\n\tint T = atoi(fgets(temp, MAX, stdin));\n\twhile (T--) {\n\t\tint i, n;\n\t\tfgets(buffer, MAX, stdin);\n\t\tbuffer[strlen(buffer)-1] = '\\0';\n\t\tlength = strlen(buffer);\n\t\tcursor = 0;\n\t\tn = atoi(fgets(temp, MAX, stdin));\n\t\tfor (i = 0; i < n; ++i) {\n\t\t\tfgets(temp, MAX, stdin);\n\t\t\tif (!strcmp(temp, \"forward char\\n\")) forwardChar();\n\t\t\tif (!strcmp(temp, \"forward word\\n\")) forwardWord();\n\t\t\tif (!strcmp(temp, \"backward char\\n\")) backwardChar();\n\t\t\tif (!strcmp(temp, \"backward word\\n\")) backwardWord();\n\t\t\tif (!strcmp(temp, \"delete char\\n\")) deleteChar();\n\t\t\tif (!strcmp(temp, \"delete word\\n\")) deleteWord();\n\t\t\tif (!strncmp(temp, \"insert\", 6)) {\n\t\t\t\tchar *p;\n\t\t\t\tstrtok(temp, \"\\\"\\n\");\n\t\t\t\tp = strtok(NULL, \"\\\"\\n\");\n\t\t\t\tif (p) insert(p);\n\t\t\t}\n\t\t}\n\t\tfor (i = 0; i < cursor; ++i) putchar(buffer[i]);\n\t\tputchar('^');\n\t\tfor (i = cursor; i < length; ++i) putchar(buffer[i]);\n\t\tputs(\"\");\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint main() {\n    int N;\n    cin >> N;\n    cin.ignore();\n\n    while(N--) {\n        string str;\n        getline(cin, str);\n        int cursor = 0;\n        int M;\n        cin >> M;\n        cin.ignore();\n\n        while(M--) {\n            string cmdline;\n            getline(cin, cmdline);\n\n            int delim = cmdline.find(' ');\n            string cmd = cmdline.substr(0, delim);\n            string target = cmdline.substr(delim+1);\n            if(cmd == \"forward\") {\n                if(target == \"word\") {\n                    while(cursor < str.size() && str[cursor] == ' ') ++cursor;\n                    while(cursor < str.size() && str[cursor] != ' ') ++cursor;\n                }\n                else if(target == \"char\") {\n                    if(cursor < str.size()) ++cursor;\n                }\n                else {\n                    cerr << \"Unknown target in forward: \" << target << endl;\n                }\n            }\n            else if(cmd == \"backward\") {\n                if(target == \"word\") {\n                    while(cursor > 0 && str[cursor] == ' ') --cursor;\n                    while(cursor > 0 && str[cursor] != ' ') --cursor;\n                }\n                else if(target == \"char\") {\n                    if(cursor > 0) --cursor;\n                }\n                else {\n                    cerr << \"Unknown target in backward: \" << target << endl;\n                }\n            }\n            else if(cmd == \"delete\") {\n                if(target == \"word\") {\n                    int idx = cursor;\n                    bool ok = false;\n                    while(idx < str.size() && str[idx] == ' ') ++idx;\n                    while(idx < str.size() && str[idx] != ' ') {++idx; ok = true; }\n                    if(ok) {\n                        str.erase(cursor, idx-cursor);\n                    }\n                }\n                else if(target == \"char\") {\n                    if(cursor >= str.size()) continue;\n                    str.erase(cursor, 1);\n                }\n                else {\n                    cerr << \"Unknown target in delete: \" << target << endl;\n                }\n            }\n            else if(cmd == \"insert\") {\n                str = str.substr(0, cursor) + target.substr(1, target.size()-2) + str.substr(cursor);\n                cursor += target.size()-2;\n            }\n            else {\n                //cerr << \"Unknown command: \" << cmd << endl;\n                while(1) ;\n            }\n        }\n        cout << str.substr(0, cursor) << '^' << str.substr(cursor) << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cassert>\n\nusing namespace std;\n\n#define rep(i, n) for (int i = 0; i < int(n); ++i)\n\nvoid solve() {\n  string str;\n  getline(cin, str);\n  int n;\n  cin >> n;\n  cin.ignore();\n  string buf;\n  int cur = 0;\n  rep (_, n) {\n    assert(0 <= cur && cur <= (int)str.size());\n    getline(cin, buf);\n    if (buf == \"forward char\") {\n      cur = min(cur + 1, (int)str.size());\n    } else if (buf == \"forward word\") {\n      while ((int)str.size() != cur && str[cur] == ' ') ++cur;\n      while ((int)str.size() != cur && str[cur] != ' ') ++cur;\n    } else if (buf == \"backward char\") {\n      cur = max(cur - 1, 0);\n    } else if (buf == \"backward word\") {\n      while (0 != cur && (cur == (int)str.size() || str[cur] == ' ')) --cur;\n      while (0 != cur && (cur == (int)str.size() || str[cur] != ' ')) --cur;\n    } else if (buf == \"delete char\") {\n      if (cur == (int)str.size()) continue;\n      str = str.substr(0, cur) + str.substr(cur + 1);\n    } else if (buf == \"delete word\") {\n      int s = cur, t;\n      while ((int)str.size() != s && str[s] == ' ') ++s;\n      if (s == (int)str.size()) continue;\n      for (t = s; t < (int)str.size() && str[t] != ' '; ++t);\n      str = str.substr(0, cur) + str.substr(t);\n    } else if (buf.substr(0, 6) == \"insert\") {\n      int s = buf.find('\"');\n      int t = buf.find('\"', s + 1);\n      string ins = buf.substr(s + 1, t - s - 1);\n      str = str.substr(0, cur) + ins + str.substr(cur);\n      cur += ins.size();\n    } else {\n      assert(0);\n    }\n  }\n  assert(0 <= cur && cur <= (int)str.size());\n  cout << str.substr(0, cur) << \"^\" << str.substr(cur) << endl;\n}\n\nint main() {\n  int t;\n  cin >> t;\n  cin.ignore();\n  rep (i, t) solve();\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <vector>\n#include <algorithm>\n#include <complex>\n#include <cstring>\n#include <cstdlib>\n#include <string>\n#include <cmath>\n#include <queue>\n#include <set>\n#include <map>\nusing namespace std;\n\n#define REP(i,n) for(int i=0;i<(int)n;++i)\n#define FOR(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i)\n#define ALL(c) (c).begin(), (c).end()\nconst int INF = 1<<29;\n\nvoid forwardChar(string &s, int &c) {\n  if (c != s.size()) c++;\n}\nvoid forwardWord(string &s, int &c) {\n  bool state = 0;\n  for (; c<=s.size(); ++c) {\n    if (c == s.size()) return;\n    if (s[c] == ' ') {\n      if (state) return;\n    } else if (state == 0) state = 1;\n  }\n}\nvoid backwardChar(string &s, int &c) {\n  if (c) c--;\n}\nvoid backwardWord(string &s, int &c) {\n  bool state = 0;\n  for (; c>=0; --c) {\n    if (c == s.size()) continue;\n    if (s[c] == ' ') {\n      if (state) break;\n    } else if (!state) state = 1;\n  }\n  if (c<(int)s.size()) {\n    c++;\n  }\n}\nvoid insertText(string &s, int &c, const string &t) {\n  s.insert(c, t);\n  c += t.size();\n}\nvoid deleteChar(string &s, int &c) {\n  if (c != s.size()) s.erase(s.begin()+c);\n}\nvoid deleteWord(string &s, int &c) {\n  bool state = 0;\n  int p = c;\n  for (; p<s.size(); ++p) {\n    if (s[p] == ' ') {\n      if (state) break;\n    } else if (!state) state = 1;\n  }\n  if (state) {\n    if (p>c) s.erase(c,p-c);\n  }\n}\n\nint main() {\n  int n;\n  cin >> n;\n  cin.ignore();\n  while(n--) {\n    string text;\n    getline(cin, text);\n    string mtext;\n    getline(cin,mtext);\n    int m = atoi(mtext.c_str());\n    // cout << m << endl;\n    // cout << text << endl;\n    int cursor = 0;\n    while(m--) {\n      string op1, op2;\n      cin >> op1;\n      cin.ignore();\n      getline(cin,op2);\n      // cout << op1 << \" : \" << op2 << endl;\n\n      if (op1[0] == 'f') {\n        if (op2[0] == 'c') forwardChar(text, cursor);\n        else forwardWord(text, cursor);\n      } else if (op1[0] == 'b') {\n        if (op2[0] == 'c') backwardChar(text, cursor);\n        else backwardWord(text, cursor);\n      } else if (op1[0] == 'i') {\n        op2 = op2.substr(1, op2.size()-2);\n        insertText(text, cursor, op2);\n      } else {\n        if (op2[0] == 'c') deleteChar(text, cursor);\n        else deleteWord(text, cursor);\n      }\n      // cout << text << \" \" << cursor << endl;\n    }\n\n    text.insert(cursor, \"^\");\n    cout << text << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <cassert>\n#include <cctype>\n#include <cstdlib>\n#include <iostream>\n#include <vector>\nusing namespace std;\n\n#define REP(i, a, b) for(int i = (a); i < (int)(b); ++i)\n#define rep(i, n) REP(i, 0, n)\n\nvoid Forward(const string &text, int &cursor, bool is_char) {\n\tif(is_char) {\n\t\tif(cursor < text.size()) ++cursor;\n\t}\n\telse {\n\t\twhile(cursor < text.size() && isblank(text[cursor])) ++cursor;\n\t\twhile(cursor < text.size() && !isblank(text[cursor])) ++cursor;\n\t}\n}\n\nvoid Backward(const string &text, int &cursor, bool is_char) {\n\tif(is_char) {\n\t\tif(cursor > 0) --cursor;\n\t}\n\telse {\n\t\twhile(cursor > 0 && isblank(text[cursor])) --cursor;\n\t\twhile(cursor > 0 && !isblank(text[cursor])) --cursor;\n\t}\n}\n\nvoid Insert(string &text, int &cursor, const string &target) {\n\tconst string insert_text = target.substr(1, target.size() - 2);\n\ttext.insert(cursor, insert_text);\n\tcursor += insert_text.size();\n}\n\nvoid Delete(string &text, int cursor, bool is_char) {\n\tif(is_char) {\n\t\tif(cursor < text.size()) text.erase(text.begin() + cursor);\n\t}\n\telse {\n\t\tint idx = cursor;\n\t\tForward(text, idx, false);\n\t\ttext.erase(text.begin() + cursor, text.begin() + idx);\n\t}\n}\n\nstring solve() {\n\tstring text;\n\tgetline(cin, text);\n\n\tint n;\n\tcin >> n;\n\tcin.ignore();\n\n\tint cursor = 0;\n\trep(i, n) {\n\t\tstring line;\n\t\tgetline(cin, line);\n\n\t\tconst int idx_space = line.find(' ');\n\t\tconst string command = line.substr(0, idx_space);\n\t\tconst string target = line.substr(idx_space + 1);\n\n\t\tswitch(command[0]) {\n\t\tcase 'f': Forward(text, cursor, target[0] == 'c'); break;\n\t\tcase 'b': Backward(text, cursor, target[0] == 'c'); break;\n\t\tcase 'i': Insert(text, cursor, target); break;\n\t\tcase 'd': Delete(text, cursor, target[0] == 'c'); break;\n\t\tdefault: assert(false);\n\t\t}\n\t}\n\n\ttext.insert(text.begin() + cursor, '^');\n\treturn text;\n}\n\nint main() {\n\tcin.tie(nullptr);\n\tios::sync_with_stdio(false);\n\n\tint t;\n\tcin >> t;\n\tcin.ignore();\n\twhile(t--) cout << solve() << endl;\n\n\treturn EXIT_SUCCESS;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<cstring>\n#include<algorithm>\n\n#define rep(i,n) for(int i=0;i<(n);i++)\n\nusing namespace std;\n\nint main(){\n\tint T; scanf(\"%d%*c\",&T);\n\twhile(T--){\n\t\tchar s[1024]; fgets(s,200,stdin);\n\t\tint len=strlen(s);\n\t\ts[--len]='\\0';\n\n\t\tint cur=0;\n\t\tint m; scanf(\"%d\",&m);\n\t\twhile(m--){\n\t\t\tchar cmd[9]; scanf(\"%s \",cmd);\n\t\t\tchar arg[200]; fgets(arg,200,stdin); arg[strlen(arg)-1]='\\0';\n\n\t\t\tif(cmd[0]=='f' && arg[0]=='c'){ // forward char\n\t\t\t\tcur=min(cur+1,len);\n\t\t\t}\n\t\t\telse if(cmd[0]=='f' && arg[0]=='w'){ // forward word\n\t\t\t\tfor(;cur<len;cur++) if(s[cur]!=' ') break;\n\t\t\t\tfor(;cur<len;cur++) if(s[cur]==' ') break;\n\t\t\t}\n\t\t\telse if(cmd[0]=='b' && arg[0]=='c'){ // backward char\n\t\t\t\tcur=max(cur-1,0);\n\t\t\t}\n\t\t\telse if(cmd[0]=='b' && arg[0]=='w'){ // backward word\n\t\t\t\tfor(;cur>0;cur--) if(s[cur-1]==' ') break;\n\t\t\t\tfor(;cur>0;cur--) if(s[cur-1]!=' ') break;\n\t\t\t}\n\t\t\telse if(cmd[0]=='d' && arg[0]=='c'){ // delete char\n\t\t\t\tif(cur<len){\n\t\t\t\t\tfor(int i=cur;i<len;i++) s[i]=s[i+1];\n\t\t\t\t\tlen--;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(cmd[0]=='d' && arg[0]=='w'){ // delete word\n\t\t\t\tif(cur<len){\n\t\t\t\t\tint i=cur;\n\t\t\t\t\tfor(;i<len;i++) if(s[i]==' ') break;\n\t\t\t\t\tfor(;i<len;i++) if(s[i]!=' ') break;\n\t\t\t\t\trep(j,len-i+1) s[cur+j]=s[i+j];\n\t\t\t\t\tlen-=i-cur;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse{ // insert\n\t\t\t\t// \"\" ðí\n\t\t\t\tint len2=strlen(arg);\n\t\t\t\trep(i,len2-2) arg[i]=arg[i+1];\n\t\t\t\tlen2-=2;\n\t\t\t\targ[len2]='\\0';\n\n\t\t\t\tfor(int i=len;i>=cur;i--) s[i+len2]=s[i];\n\t\t\t\trep(i,len2) s[cur+i]=arg[i];\n\t\t\t\tcur+=len2;\n\t\t\t\tlen+=len2;\n\t\t\t}\n\t\t}\n\n\t\trep(i,len+1){\n\t\t\tif(i==cur) putchar('^');\n\t\t\tif(i<len) putchar(s[i]);\n\t\t}\n\t\tputchar('\\n');\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <string>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n\nclass text_editor {\nprivate:\n\tstring text;\npublic:\n\n\tvoid read_text(istream &in) {\n\t\tstring line;\n\t\tgetline(in,line);\n\t\tthis->text = \"^\" + line;\n\t}\n\n\tvoid forward_char() {\n\t\tauto cursor = find(this->text.begin(),this->text.end(),'^');\n\t\tif (cursor + 1 != this->text.end()) { // if cursor not at the end of text\n\t\t\tswap(*cursor,*(cursor + 1));\n\t\t}\n\t}\n\n\tvoid forward_word() {\n\t\tauto cursor = find(this->text.begin(),this->text.end(),'^');\n\t\twhile (cursor + 1 != this->text.end() && *(cursor + 1) == ' ') {\n\t\t\tswap(*cursor,*(cursor + 1));\n\t\t\t++cursor;\n\t\t}\n\t\twhile (cursor + 1 != this->text.end() && *(cursor + 1) != ' ') {\n\t\t\tswap(*cursor,*(cursor + 1));\n\t\t\t++cursor;\n\t\t}\n\t}\n\n\tvoid backward_char() {\n\t\tauto cursor = find(this->text.begin(),this->text.end(),'^');\n\t\tif (cursor != this->text.begin()) {\n\t\t\tswap(*cursor,*(cursor - 1));\n\t\t}\n\t}\n\n\tvoid backward_word() {\n\t\tauto cursor = find(this->text.begin(),this->text.end(),'^');\n\t\twhile (cursor != this->text.begin() && *(cursor - 1) == ' ') {\n\t\t\tswap(*cursor,*(cursor - 1));\n\t\t\t--cursor;\n\t\t}\n\t\twhile (cursor != this->text.begin() && *(cursor - 1) != ' ') {\n\t\t\tswap(*cursor,*(cursor - 1));\n\t\t\t--cursor;\n\t\t}\n\t}\n\n\tvoid delete_char() {\n\t\tauto cursor = find(this->text.begin(),this->text.end(),'^');\n\t\tif (cursor + 1 != this->text.end()) {\n\t\t\tthis->text.erase(cursor + 1);\n\t\t}\n\t}\n\n\tvoid delete_word() {\n\t\tauto cursor = find(this->text.begin(),this->text.end(),'^');\n\t\tauto pos = cursor + 1;\n\t\twhile (pos != this->text.end() && *pos == ' ') {\n\t\t\t++pos;\n\t\t}\n\t\tif (pos != this->text.end()) {\n\t\t\tthis->text.erase(cursor + 1,find(pos,this->text.end(),' '));\n\t\t}\n\t}\n\n\tvoid insert_any_text(string any_text) {\n\t\tthis->text.insert(this->text.find('^'),any_text);\n\t}\n\n\tstring get_text() {\n\t\treturn this->text;\n\t}\n};\n\nint main() {\n\ttext_editor edtr;\n\tint n; // number of texts\n\tcin >> n;\n\tcin.ignore();\n\twhile (n--) {\n\t\tedtr.read_text(cin);\n\t\tint cmd_num; // number of commands\n\t\tcin >> cmd_num;\n\t\tcin.ignore();\n\t\twhile (cmd_num--) {\n\t\t\tstring cmd;\n\t\t\tgetline(cin,cmd);\n\t\t\tif (cmd == \"forward char\") {\n\t\t\t\tedtr.forward_char();\n\t\t\t} else if (cmd == \"forward word\") {\n\t\t\t\tedtr.forward_word();\n\t\t\t} else if (cmd == \"backward char\") {\n\t\t\t\tedtr.backward_char();\n\t\t\t} else if (cmd == \"backward word\") {\n\t\t\t\tedtr.backward_word();\n\t\t\t} else if (cmd == \"delete char\") {\n\t\t\t\tedtr.delete_char();\n\t\t\t} else if (cmd == \"delete word\") {\n\t\t\t\tedtr.delete_word();\n\t\t\t} else { // insert \"any-text\"\n\t\t\t\tauto first_quot = cmd.find_first_of(\"\\\"\");\n\t\t\t\tauto last_quot = cmd.find_last_of(\"\\\"\");\n\t\t\t\tedtr.insert_any_text(cmd.substr(first_quot + 1,last_quot - first_quot - 1));\n\t\t\t}\n\t\t}\n\t\tcout << edtr.get_text() << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint main() {\n    int N;\n    cin >> N;\n    cin.ignore();\n\n    while(N--) {\n        string str;\n        getline(cin, str);\n        int cursor = 0;\n        int M;\n        cin >> M;\n        cin.ignore();\n\n        while(M--) {\n            string cmdline;\n            getline(cin, cmdline);\n\n            int delim = cmdline.find(' ');\n            string cmd = cmdline.substr(0, delim);\n            string target = cmdline.substr(delim+1);\n            if(cmd == \"forward\") {\n                if(target == \"word\") {\n                    while(cursor < str.size() && str[cursor] == ' ') ++cursor;\n                    while(cursor < str.size() && str[cursor] != ' ') ++cursor;\n                }\n                else if(target == \"char\") {\n                    if(cursor < str.size()) ++cursor;\n                }\n                else {\n                    cerr << \"Unknown target in forward: \" << target << endl;\n                }\n            }\n            else if(cmd == \"backward\") {\n                if(target == \"word\") {\n                    while(cursor > 0 && str[cursor] == ' ') --cursor;\n                    while(cursor > 0 && str[cursor] != ' ') --cursor;\n                }\n                else if(target == \"char\") {\n                    if(cursor > 0) --cursor;\n                }\n                else {\n                    cerr << \"Unknown target in backward: \" << target << endl;\n                }\n            }\n            else if(cmd == \"delete\") {\n                if(target == \"word\") {\n                    int idx = cursor;\n                    bool ok = false;\n                    while(idx < str.size() && str[idx] == ' ') ++idx;\n                    while(idx < str.size() && str[idx] != ' ') {++idx; ok = true; }\n                    if(ok) {\n                        str.erase(cursor, idx-cursor);\n                    }\n                }\n                else if(target == \"char\") {\n                    if(cursor >= str.size()) continue;\n                    str.erase(cursor, 1);\n                }\n                else {\n                    cerr << \"Unknown target in delete: \" << target << endl;\n                }\n            }\n            else if(cmd == \"insert\") {\n                str = str.substr(0, cursor) + target.substr(1, target.find_last_of('\"')-1) + str.substr(cursor);\n                cursor += target.size()-2;\n            }\n            else {\n                //cerr << \"Unknown command: \" << cmd << endl;\n            }\n        }\n        cout << str.substr(0, cursor) << '^' << str.substr(cursor) << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <sstream>\n#include <fstream>\n#include <iomanip>\n#include <numeric>\n#include <map>\n#include <vector>\n#include <string>\n#include <vector>\n#include <cassert>\n#include <cmath>\n#include <cctype>\n#include <queue>\n#include <algorithm>\n#include <memory>\n#include <memory.h>\n\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int, int> P;\ntypedef pair<int, P> PP;\ntypedef pair<P,P> P2;\nconst int INF = 1 << 30;\nconst double EPS = 1E-9;\n\nsize_t cur;\nstring s;\n\nvoid fc(){\n\tif(cur < s.size() - 1){\n\t\tchar ch = s[cur];\n\t\ts[cur] = s[cur+1];\n\t\ts[cur+1] = ch;\n\t\tcur++;\n\t}\n}\n\nvoid fw(){\n\tif(cur < s.size() - 1){\n\t\tint j = cur+1;\n\t\twhile(j < s.size() && s[j] == ' ') j++;\n\t\tif(j < s.size()){\n\t\t\twhile(j < s.size() && s[j] != ' ') j++;\n\t\t}\n\t\tfor(int i = cur; i < j-1; i++){\n\t\t\ts[i] = s[i+1];\n\t\t}\n\t\ts[j-1] = '^';\n\t\tcur = j-1;\n\t}\n}\n\nvoid bc(){\n\tif(cur > 0){\n\t\tchar ch = s[cur];\n\t\ts[cur] = s[cur-1];\n\t\ts[cur-1] = ch;\n\t\tcur--;\n\t}\n}\n\nvoid bw(){\n\tif(cur != 0){\n\t\tint j = cur - 1;\n\t\twhile(j >= 0 && s[j] == ' ') j--;\n\t\twhile(j >= 0 && s[j] != ' ') j--;\n\t\tfor(int i = cur; i > j + 1; i--){\n\t\t\ts[i] = s[i-1];\n\t\t}\n\t\ts[j+1] = '^';\n\t\tcur = j+1;\n\t}\n}\n\nvoid ins(string s2){\n\ts.insert(cur, s2);\n\tcur += s2.size();\n}\n\nvoid dc(){\n\tif(cur < s.size()-1){\n\t\ts.erase(cur+1,1);\n\t}\n}\n\nvoid dw(){\n\tif(cur < s.size()){\n\t\tint j = cur + 1;\n\t\twhile(j < s.size() && s[j] == ' ') j++;\n\t\tif(j == s.size() ) return;\n\t\twhile(j < s.size() && s[j] != ' ') j++;\n\t\tstring a = s.substr(0, cur+1);\n\t\tstring b = s.substr(j, s.size() - j);\n\t\ts = a + b;\n\t}\n}\n\nint main(){\n\tint n;\n\tcin >> n;\n\tgetline(cin, s);\n\tfor(int i = 0; i < n; i++){\n\t\tint m;\n\t\tstring s2;\n\t\tgetline(cin, s2);\n\t\tcin >> m;\n\t\tgetline(cin, s);\n\t\ts = \"^\" + s2;\n\t\tcur = 0;\n\t\tfor(int j = 0; j < m; j++){\n\t\t\tstring a;\n\t\t\tcout << s << endl;\n\t\t\tgetline(cin, a);\n\t\t\tif(a == \"forward char\"){\n\t\t\t\tfc();\n\t\t\t}else if(a == \"forward word\"){\n\t\t\t\tfw();\n\t\t\t}else if(a == \"backward char\"){\n\t\t\t\tbc();\n\t\t\t}else if(a == \"backward word\"){\n\t\t\t\tbw();\n\t\t\t}else if(a[0] == 'i'){\n\t\t\t\tstring c(a.begin()+8, a.end()-1);\n\t\t\t\tins(c);\n\t\t\t}else if(a == \"delete char\"){\n\t\t\t\tdc();\n\t\t\t}else{\n\t\t\t\tdw();\n\t\t\t}\n\t\t}\n\t\tcout << s << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#define INF 0x3f3f3f3f\n#include <cstdio>\n#include <iostream>\n#include <sstream>\n#include <cmath>\n#include <cstdlib>\n#include <algorithm>\n#include <queue>\n#include <stack>\n#include <limits>\n#include <map>\n#include <string>\n#include <cstring>\n#include <set>\n#include <deque>\n#include <bitset>\n#include <list>\n#include <cctype>\n#include <utility>\n \nusing namespace std;\n \ntypedef long long ll;\ntypedef pair <int,int> P;\ntypedef pair <int,P > PP;\n \nint tx[] = {0,1,0,-1};\nint ty[] = {-1,0,1,0};\n \nstatic const double EPS = 1e-8;\n\nclass Editor{\nprivate:\n  string text;\n  int cursor;\npublic:\n  Editor(const string& _text) : text(_text),cursor(0) {}\n  void forward_char(){\n    if(text.size() > cursor) cursor++;\n  }\n  void forward_word(){\n    int tmp = text.size();\n    for(int pos=cursor;pos+1<text.size();pos++){\n      if(text[pos] != ' '\n\t && text[pos + 1] == ' '){\n\ttmp = pos + 1;\n\tbreak;\n      }\n    }\n    cursor = tmp;\n  }\n  void backward_char(){\n    if(0 < cursor) cursor--;    \n  }\n  void backward_word(){\n    int tmp = 0;\n\n    for(int pos=cursor-1;pos-1>=0;pos--){\n      if(text[pos] != ' '\n\t && text[pos - 1] == ' '){\n\ttmp = pos;\n\tbreak;\n      }\n    }\n    cursor = tmp;\n  }\n  void insert(const string& str){\n    string middle = str;\n    string front = \"\";\n    string rear = \"\";\n    if(cursor > 0) front = text.substr(0,cursor);\n    if(cursor < text.size()) rear = text.substr(cursor,text.size()-cursor);\n\n    cursor = front.size() + middle.size();\n    text = front + middle + rear;\n  }\n  void delete_char(){\n    string front = \"\";\n    string rear = \"\";\n    if(cursor > 0) front = text.substr(0,cursor);\n    if(cursor+1 < text.size()) rear = text.substr(cursor+1,text.size()-(cursor+1));\n    text = front + rear;\n  }\n  void delete_word(){\n    int delete_first = cursor;\n    int delete_last = text.size();\n\n    if(text[cursor] == ' '){\n      bool update = false;\n      for(int pos=cursor;pos<text.size();pos++){\n\tif(text[pos] != ' '){\n\t  update = true;\n\t  break;\n\t}\n      }\n      if(!update) return;\n\n      for(int pos=cursor;pos<text.size();pos++){\n\tif(text[pos] != ' '\n\t   && text[pos+1] == ' '){\n\t  delete_last = pos;\n\t  break;\n\t}\n      }\n    }\n    else{\n      for(int pos=cursor;pos<text.size();pos++){\n\tif(text[pos] == ' '){\n\t  delete_last = pos - 1;\n\t  break;\n\t}\n      }\n    }\n\n    string front = \"\";\n    string rear = \"\";\n    if(delete_first > 0){\n      front = text.substr(0,delete_first);\n    }\n    if(delete_last < text.size()){\n      rear = text.substr(delete_last+1,text.size()-delete_last);\n    }\n    text = front + rear;\n  }\n  void print_text(){\n    string front = \"\";\n    string rear = \"\";\n    if(cursor > 0) front = text.substr(0,cursor);\n    if(cursor < text.size()) rear = text.substr(cursor,text.size()-cursor);\n    cout << front << \"^\" << rear << endl;\n  }\n};\n\nint main(){\n  string total_test_cases_str;\n\n  while(getline(cin,total_test_cases_str)){\n    stringstream ttc_ss;\n    ttc_ss << total_test_cases_str;\n    int total_test_cases;\n    ttc_ss >> total_test_cases;\n\n    for(int test_idx=0;test_idx<total_test_cases;test_idx++){\n      string text;\n      getline(cin,text);\n      \n      Editor editor(text);\n\n      string total_commands_str;\n\n      getline(cin,total_commands_str);\n      stringstream total_commands_ss;\n      total_commands_ss << total_commands_str;\n      \n      int total_commands;\n      total_commands_ss >> total_commands;\n\n      for(int command_idx=0;command_idx < total_commands; command_idx++){\n\tstring fr_str;\n\n\tgetline(cin,fr_str);\n\n\tstring front=\"\";\n\tstring rear=\"\";\n\tint str_pos = 0;\n\tfor(int i=0;i<fr_str.size();i++){\n\t  if(fr_str[i] == ' '){\n\t    str_pos = i+1;\n\t    break;\n\t  }\n\t  front += fr_str[i];\n\t}\n\tfor(int i=str_pos;i<fr_str.size();i++){\n\t  rear += fr_str[i];\n\n\t  if(i==str_pos && fr_str[i] == '\"') {\n\t    //nothing todo\n\t  }\n\t  else if(fr_str[i] == '\"'){\n\t    break;\n\t  }\n\t}\n\n\tif(front == \"forward\"){\n\t  if(rear == \"char\"){\n\t    editor.forward_char();\n\t  }\n\t  else if(rear == \"word\"){\n\t    editor.forward_word();\n\t  }\n\t}\n\telse if(front == \"backward\"){\n\t  if(rear == \"char\"){\n\t    editor.backward_char();\n\t  }\n\t  else if(rear == \"word\"){\n\t    editor.backward_word();\n\t  }\n\t}\n\telse if(front == \"insert\"){\n\t  editor.insert(rear.substr(1,rear.size()-2));\n\t}\n\telse if(front == \"delete\"){\n\t  if(rear == \"char\"){\n\t    editor.delete_char();\n\t  }\n\t  else if(rear == \"word\"){\n\t    editor.delete_word();\n\t  }\n\t}\n      }\n      editor.print_text();\n    }\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <sstream>\n#include <fstream>\n#include <iomanip>\n#include <numeric>\n#include <map>\n#include <vector>\n#include <string>\n#include <vector>\n#include <cassert>\n#include <cmath>\n#include <cctype>\n#include <queue>\n#include <algorithm>\n#include <memory>\n#include <memory.h>\n\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int, int> P;\ntypedef pair<int, P> PP;\ntypedef pair<P,P> P2;\nconst int INF = 1 << 30;\nconst double EPS = 1E-9;\n\nsize_t cur;\nstring s;\n\nvoid fc(){\n\tif(cur < s.size() - 1){\n\t\tchar ch = s[cur];\n\t\ts[cur] = s[cur+1];\n\t\ts[cur+1] = ch;\n\t\tcur++;\n\t}\n}\n\nvoid fw(){\n\tif(cur < s.size() - 1){\n\t\tint j = cur+1;\n\t\twhile(j < s.size() && s[j] == ' ') j++;\n\t\tif(j < s.size()){\n\t\t\twhile(j < s.size() && s[j] != ' ') j++;\n\t\t}\n\t\tfor(int i = cur; i < j-1; i++){\n\t\t\ts[i] = s[i+1];\n\t\t}\n\t\ts[j-1] = '^';\n\t\tcur = j-1;\n\t}\n}\n\nvoid bc(){\n\tif(cur > 0){\n\t\tchar ch = s[cur];\n\t\ts[cur] = s[cur-1];\n\t\ts[cur-1] = ch;\n\t\tcur--;\n\t}\n}\n\nvoid bw(){\n\tif(cur != 0){\n\t\tint j = cur - 1;\n\t\twhile(j >= 0 && s[j] == ' ') j--;\n\t\twhile(j >= 0 && s[j] != ' ') j--;\n\t\tfor(int i = cur; i > j + 1; i--){\n\t\t\ts[i] = s[i-1];\n\t\t}\n\t\ts[j+1] = '^';\n\t\tcur = j+1;\n\t}\n}\n\nvoid ins(string s2){\n\ts.insert(cur, s2);\n\tcur += s2.size();\n}\n\nvoid dc(){\n\tif(cur < s.size()-1){\n\t\ts.erase(cur+1,1);\n\t}\n}\n\nvoid dw(){\n\tif(cur < s.size()){\n\t\tint j = cur + 1;\n\t\twhile(j < s.size() && s[j] == ' ') j++;\n\t\tif(j == s.size() ) return;\n\t\twhile(j < s.size() && s[j] != ' ') j++;\n\t\tstring a = s.substr(0, cur+1);\n\t\tstring b = s.substr(j, s.size() - j);\n\t\ts = a + b;\n\t}\n}\n\nint main(){\n\tint n;\n\tcin >> n;\n\tgetline(cin, s);\n\tfor(int i = 0; i < n; i++){\n\t\tint m;\n\t\tstring s2;\n\t\tgetline(cin, s2);\n\t\tcin >> m;\n\t\tgetline(cin, s);\n\t\ts = \"^\" + s2;\n\t\tcur = 0;\n\t\tcout << s2 << endl;\n\t\tfor(int j = 0; j < m; j++){\n\t\t\tstring a;\n\t\t\tgetline(cin, a);\n\t\t\tif(a == \"forward char\"){\n\t\t\t\tfc();\n\t\t\t}else if(a == \"forward word\"){\n\t\t\t\tfw();\n\t\t\t}else if(a == \"backward char\"){\n\t\t\t\tbc();\n\t\t\t}else if(a == \"backward word\"){\n\t\t\t\tbw();\n\t\t\t}else if(a == \"insert\"){\n\t\t\t\tstring c(a.begin()+8, a.end()-1);\n\t\t\t\tins(c);\n\t\t\t}else if(a == \"delete char\"){\n\t\t\t\tdc();\n\t\t\t}else{\n\t\t\t\tdw();\n\t\t\t}\n\t\t}\n\t\tcout << s << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define FOR(i,a,b) for(int i=(a);i<(b);++i)\n#define rep(i,n)   FOR(i,0,n)\n#define pb push_back\n#define mp make_pair\ntypedef long long ll;\ntypedef pair<int,int> pint;\n\nint main(){\n    int n,m;\n    string s,q;\n    cin>>n;cin.ignore();\n    while(n--){\n        int cur=0;\n        string t(\"^\");\n        getline(cin,s);\n        s=t+s;\n        cin>>m;cin.ignore();\n        rep(i,m){\n            getline(cin,q);\n            if(q==\"forward char\"){\n                if(cur<s.size()-1) {\n                    swap(s[cur],s[cur+1]);\n                    ++cur;\n                } \n            }\n            else if(q==\"forward word\"){\n                int spcnt=(s[cur+1]!=' ')?1:0;\n                while(cur<s.size()-1){\n                    if(s[cur+1]==' '){\n                        ++spcnt;\n                        if(spcnt==2) break;\n                        while(s[cur+1]==' '){\n                            swap(s[cur],s[cur+1]);\n                            ++cur;\n                        } \n                    }\n                    swap(s[cur],s[cur+1]);\n                    ++cur;\n                }\n            }\n            else if(q==\"backward char\"){\n                if(cur>0) {\n                    swap(s[cur],s[cur-1]);\n                    --cur;\n                } \n            }\n            else if(q==\"backward word\"){\n                int spcnt=(s[cur-1]!=' ')?1:0;;\n                while(cur>0){\n                    if(s[cur-1]==' '){\n                        ++spcnt;\n                        if(spcnt==2) break;\n                        while(s[cur-1]==' '){\n                            swap(s[cur],s[cur-1]);\n                            --cur;\n                        }\n                    }\n                    swap(s[cur],s[cur-1]);\n                    --cur;\n                }\n            }\n            else if(q[0]=='i'){\n                s.insert(cur,q,8,q.size()-9);\n                cur +=q.size()-9;\n            }\n            else if(q==\"delete char\"){\n                s.erase(cur+1,1);\n            }\n            else if(q==\"delete word\"){\n                int spcnt=(s[cur+1]!=' ')?1:0,tm=cur;\n                while(tm<s.size()-1){\n                    if(s[tm+1]==' '){\n                        ++spcnt;\n                        if(spcnt==2) break;\n                        while(s[tm+1]==' '){\n                            swap(s[tm],s[tm+1]);\n                            ++tm;\n                        } \n                    }\n                    swap(s[tm],s[tm+1]);\n                    ++tm;\n                }\n                while(tm!=cur){\n                    s.erase(tm-1,1);\n                    --tm;\n                }\n            }\n        }\n    cout<<s<<endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <algorithm>\n#include <sstream>\n#include <vector>\nusing namespace std;\n\nint main(){\n\tint T;\n\tcin >> T;\n\tstring dummy;\n\tgetline(cin,dummy);\n\twhile(T--){\n\t\tstring l;\n\t\tgetline(cin,l);\n\t\tl.erase(remove(l.begin(),l.end(),'\\r'),l.end());\n\t\tint p = 0;\n\t\tint M;\n\t\tcin >> M;\n\t\tgetline(cin,dummy);\n\t\tl += \" \";\n\t\tfor(int i = 0 ; i < M ; i++){\n\t\t\tstring t;\n\t\t\tgetline(cin,t);\n\t\t\tt.erase(remove(t.begin(),t.end(),'\\r'),t.end());\n\t\t\tstringstream ss(t);\n\t\t\tstring a,b;\n\t\t\tss >> a;\n\t\t\tchar c;\n\t\t\tss.get(c);\n\t\t\tgetline(ss,b);\n\t\t\tif(a == \"forward\" && b == \"char\"){\n\t\t\t\tp = min(p+1,(int)l.size()-1);\n\t\t\t}\n\t\t\tif(a == \"forward\" && b == \"word\"){\n\t\t\t\twhile(p+1 < l.size() && l[p] == ' ')p++;\n\t\t\t\twhile(p+1 < l.size() && l[p] != ' ')p++;\n\t\t\t}\n\t\t\tif(a == \"backward\" && b == \"char\"){\n\t\t\t\tp = max(p-1,0);\n\t\t\t}\n\t\t\tif(a == \"backward\" && b == \"word\"){\n\t\t\t\tif( p ) p--;\n\t\t\t\twhile(p >= 1 && l[p] == ' ')p--;\n\t\t\t\twhile(p >= 1 && l[p] != ' ')p--;\n\t\t\t\tif( l[p] == ' ') p++;\n\t\t\t}\n\t\t\tif(a == \"insert\" ){\n\t\t\t\tb = b.substr(1,b.size()-2);\n\t\t\t\tl.insert(p,b);\n\t\t\t\tp += b.size();\n\t\t\t}\n\t\t\tif(a == \"delete\" && b == \"char\"){\n\t\t\t\tif(p < l.size()-1) l.erase(p,1);\n\t\t\t}\n\t\t\tif(a == \"delete\" && b == \"word\"){\n\t\t\t\tint t = p;\n\t\t\t\tint f = 0;\n\t\t\t\twhile(t+1 < l.size() && l[t] == ' ')t++;\n\t\t\t\twhile(t+1 < l.size() && l[t] != ' ')t++,f=1;\n\t\t\t\tif(f){\n\t\t\t\t\tint d = t - p ;\n\t\t\t\t\tl.erase(p,d);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t\tfor(int j = 0 ; j+1 < l.size() ; j++){\n\t\t\tif( j == p ){\n\t\t\t\tcout << \"^\";\n\t\t\t}\n\t\t\tcout << l[j];\n\t\t}\n\t\tif( p == l.size()- 1) cout << \"^\";\n\t\tcout << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\n \nusing namespace std;\n \n \nvoid input(string& s, vector<string>& v){\n  getline(cin,s);\n  int q;\n  cin >> q;\n  cin.ignore();\n  v.resize(q);\n  for(int i = 0; i < q; i++) getline(cin,v[i]);\n}\n \nbool isAlf(char c){ return 'A'<=c&&c<='Z'||'a'<=c&&c<='z';}\n \n//forward word\nvoid FW(const string& s, int& pos){\n  while(pos < (int)s.length() && s[pos] == ' ') pos++;\n  while(pos < (int)s.length() && s[pos] != ' ') pos++;\n}\n//backward word\nvoid BW(const string& s, int& pos){\n  while(pos > 0 && s[pos] == ' ') pos--;\n  while(pos > 0 && s[pos] != ' ') pos--;\n}\n \n//delete char\nvoid DC(string& s, int& pos){\n  if((int)s.length() <= pos) return;\n  s = s.substr(0,pos)+s.substr(pos+1);  \n}\n \n \n//delete word\nvoid DW(string& s, int pos){\n  if((int)s.length() <= pos) return;\n \n  int begin = pos;\n  if(s[pos] == ' '){\n    while(s[pos] == ' ') pos++;\n  }else{\n    while(s[pos] != ' ') pos++;\n  }\n \n  string res = \"\";\n  for(int i = 0; i < (int)s.length(); i++)\n    if(!(begin <= i && i <= pos)) res += s[i];\n \n  s = res;\n}\n \n//insert \nvoid insert(string& s, int& pos, string w){\n \n  w = w.substr(1,w.length()-2);\n   \n  string res = \"\";\n  \n  res += s.substr(0,pos);\n  res += w;\n  res += s.substr(pos);\n  s = res;\n \n  pos += w.length();\n}\n \nvoid solve(string& s, const vector<string>& v){\n  int pos = 0;\n \n  for(int i = 0; i < (int)v.size(); i++){\n    if(v[i] == \"forward char\") pos = min(pos+1,(int)s.length());\n    if(v[i] == \"forward word\") FW(s,pos);\n    if(v[i] == \"backward char\") pos = max(pos-1,0);\n    if(v[i] == \"backward word\") BW(s,pos);\n    if(v[i][0] == 'i') insert(s,pos,v[i].substr(7));\n    if(v[i] == \"delete char\") DC(s,pos);\n    if(v[i] == \"delete word\") DW(s,pos);\n    //  cout << s.substr(0,pos) << \"^\" << s.substr(pos) << endl;\n  }\n  cout << s.substr(0,pos) << \"^\" << s.substr(pos) << endl;\n}\n \nint main(){\n  int T;\n  cin >> T;\n  cin.ignore();\n  while(T--){\n    string txt;\n    vector<string> V;\n    input(txt,V);\n    solve(txt,V);\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nvoid setPos(string &buff,int &pos){\n    for(int i = 0; i < buff.size(); i++){\n        if(buff[i]=='^'){\n            pos=i;\n            return;\n        }\n    }\n}\n\nint main(){\n    int n;\n    cin>>n;\n    string gb;\n    getline(cin,gb);\n    while(n--){\n        string buff;\n        getline(cin,buff);\n        int m;\n        cin>>m;\n        getline(cin,gb);\n        int pos=0;\n        buff='^'+buff;\n        while(m--){\n            string op;\n            getline(cin,op);\n            if(op==\"forward char\"){\n                if(pos!=buff.size()-1){\n                    swap(buff[pos],buff[pos+1]);\n                    pos++;\n                    setPos(buff,pos);\n                }\n            }\n            else if(op==\"forward word\"){\n                // ツ右ツづ可閉カツ篠堋づーツ探ツつオツづ可つ「ツつォツ、ツ個ゥツづつつゥツづつスツづァツつサツづ個閉カツ篠堋療アツづ個催渉可づ個暗環置ツづ慊づカツーツソツδ仰づーツ暗堋督ョ\n                if(pos!=buff.size()-1){\n                    int initPos=pos;\n                    pos++;\n                    while(pos<buff.size()&&buff[pos]==' ')pos++;\n                    while(pos<buff.size()&&buff[pos]!=' ')pos++;\n                    buff=buff.substr(0,initPos)+buff.substr(initPos+1);\n                    if(pos-1==buff.size())\n                        buff+='^';\n                    else{\n                        pos--;\n                        buff=buff.substr(0,pos)+'^'+buff.substr(pos);\n                    }\n                    setPos(buff,pos);\n                }\n            }\n            else if(op==\"backward char\"){\n                if(pos!=0){\n                    swap(buff[pos],buff[pos-1]);\n                    setPos(buff,pos);\n                }\n            }\n            else if(op==\"backward word\"){\n                if(pos!=0){\n                    int initPos=pos;\n                    pos--;\n                    while(pos>=0&&buff[pos]==' ')pos--;\n                    bool ok=false;\n                    while(pos>=0&&buff[pos]!=' '){\n                        ok=true;\n                        pos--;\n                    }\n                    buff=buff.substr(0,initPos)+buff.substr(initPos+1);\n                    if(pos==-1)\n                        buff='^'+buff;\n                    else{\n                        pos++;\n                        buff=buff.substr(0,pos)+'^'+buff.substr(pos);\n                    }\n                    setPos(buff,pos);\n                }\n            }\n            else if(op==\"delete char\"){\n                if(pos!=buff.size()-1)\n                    buff=buff.substr(0,pos+1)+buff.substr(pos+2);\n                setPos(buff,pos);\n            }\n            else if(op==\"delete word\"){\n                int initPos=pos;\n                if(pos!=buff.size()-1){\n                    pos++;\n                    while(pos<buff.size()&&buff[pos]==' ')pos++;\n                    bool f=false;\n                    while(pos<buff.size()&&buff[pos]!=' '){\n                        f=true;\n                        pos++;\n                    }\n                    // ツ単ツ古ェツづーツづ青づづつづづv è\n                    if(f){\n                        if(pos==buff.size())\n                            buff=buff.substr(0,initPos+1);\n                        else\n                            buff=buff.substr(0,initPos+1)+buff.substr(pos);\n                    }\n                    setPos(buff,pos);\n                }\n            }\n            else if(op.substr(0,6)==\"insert\"){\n                string ins=op.substr(7);\n                ins=ins.substr(1);\n                ins=ins.substr(0,ins.size()-1);\n                buff=buff.substr(0,pos)+ins+'^'+buff.substr(pos+1);\n                setPos(buff,pos);\n            }\n        }\n        cout<<buff<<endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\nusing namespace std;\n \nint i;\nstring text;\n \nvoid forChar(void){\n    if(i != text.length()){\n        i++;\n    }\n}\n \nvoid forWord(void){\n  int len = text.length();\n \n  if(i == text.length()) return;\n \n  if(text.at(i) == ' '){\n    for(;i<len && text.at(i)==' ';i++);\n    if(i == len) return;\n  }\n  for(;i<len && text.at(i)!=' ';i++);\n}\n \nvoid backChar(void){\n    if(i != 0){\n        i--;\n    }\n}\n \nvoid backWord(void){\n  if(i == 0) return;\n \n  if(text.at(i-1) == ' '){\n    for(;i>0 && text.at(i-1)==' ';i--);\n    if(i == 0) return;\n  }\n  for(;i>0 && text.at(i-1)!=' ';i--);\n}\n \nvoid insert(string s){\n    text.insert(i,s);\n    i += s.length();\n}\n \nvoid delChar(void){\n    if(i != text.length()){\n        text.erase(text.begin()+i);\n    }\n}\n \nvoid delWord(void){\n    int len = text.length();\n    int gi=i;\n \n    if(i == len) return;\n \n    if(text.at(i) == ' '){\n        for(;gi<len && text.at(gi)==' ';gi++);\n        if(gi == len) return;\n    }\n    for(;gi<len && text.at(gi)!=' ';gi++);\n \n    text.erase(text.begin()+i, text.begin()+gi);\n}\n \nint main(void){\n    int n,m;\n    string s,s2;\n    char tmp;\n \n    cin>>n;\n    cin.get();\n \n    while(n--){\n        getline(cin,text);\n        cin>>m;\n \n        i=0;\n \n        while(m--){\n            cin>>s;\n            getline(cin,s2);\n            s2.erase(s2.begin(),s2.begin()+1);\n \n            if(s == \"forward\"){\n                if(s2 == \"char\"){\n                    forChar();\n                }\n                else{\n                    forWord();\n                }\n            }\n            else if(s == \"backward\"){\n                if(s2 == \"char\"){\n                    backChar();\n                }\n                else{\n                    backWord();\n                }\n            }\n            else if(s == \"insert\"){\n                s2.erase(s2.end()-1,s2.end());\n                s2.erase(s2.begin(),s2.begin()+1);\n                insert(s2);\n            }\n            else{\n                if(s2 == \"char\"){\n                    delChar();\n                }\n                else{\n                    delWord();\n                }\n            }\n        }\n        text.insert(i,\"^\");\n        cout<<text<<endl;\n    }\n \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#define INF 0x3f3f3f3f\n#include <cstdio>\n#include <iostream>\n#include <sstream>\n#include <cmath>\n#include <cstdlib>\n#include <algorithm>\n#include <queue>\n#include <stack>\n#include <limits>\n#include <map>\n#include <string>\n#include <cstring>\n#include <set>\n#include <deque>\n#include <bitset>\n#include <list>\n#include <cctype>\n#include <utility>\n \nusing namespace std;\n \ntypedef long long ll;\ntypedef pair <int,int> P;\ntypedef pair <int,P > PP;\n \nint tx[] = {0,1,0,-1};\nint ty[] = {-1,0,1,0};\n \nstatic const double EPS = 1e-8;\n\nclass Editor{\nprivate:\n  string text;\n  int cursor;\npublic:\n  Editor(const string& _text) : text(_text),cursor(0) {}\n  void forward_char(){\n    if(text.length() > cursor) cursor++;\n  }\n  void forward_word(){\n    int tmp = text.length();\n    for(int pos=cursor;pos+1<text.length();pos++){\n      if(text[pos] != ' '\n\t && text[pos + 1] == ' '){\n\ttmp = pos+1;\n\tbreak;\n      }\n    }\n    cursor = tmp;\n  }\n  void backward_char(){\n    if(0 < cursor) cursor--;    \n  }\n  void backward_word(){\n    int tmp = 0;\n    for(int pos=cursor;pos-1>=0;pos--){\n      if(text[pos] != ' '\n\t && text[pos - 1] == ' '){\n\ttmp = pos-1;\n\tbreak;\n      }\n    }\n    cursor = tmp;\n  }\n  void insert(const string& str){\n    string middle = str;\n    string front = \"\";\n    string rear = \"\";\n    if(cursor > 0) front = text.substr(0,cursor);\n    if(cursor < text.length()) rear = text.substr(cursor,text.length()-cursor);\n\n    cursor = front.length() + middle.length();\n    text = front + middle + rear;\n  }\n  void delete_char(){\n    string front = \"\";\n    string rear = \"\";\n    if(cursor > 0) front = text.substr(0,cursor);\n    if(cursor+1 < text.length()) rear = text.substr(cursor+1,text.length()-(cursor+1));\n    text = front + rear;\n  }\n  void delete_word(){\n    int delete_first = cursor;\n    int delete_last = cursor;\n\n    bool char_flag = false;\n    for(int pos=cursor;pos<text.length();pos++){\n      if(text[pos] == ' '){\n\tif(char_flag){\n\t  delete_last = pos - 1;\n\t}\n      }\n      else if(text[pos] != ' '){\n\tchar_flag = true;\n      }\n    }\n    if(delete_last == delete_first) return;\n\n    string front = \"\";\n    string rear = \"\";\n    if(delete_first > 0) front = text.substr(0,delete_first);\n    if(delete_last + 1 < text.length()) rear = text.substr(delete_last + 1,text.length()-(delete_last+1));\n    text = front + rear;\n  }\n  void print_text(){\n    string front = \"\";\n    string rear = \"\";\n    if(cursor > 0) front = text.substr(0,cursor);\n    if(cursor < text.length()) rear = text.substr(cursor,text.length()-cursor);\n    cout << front << \"^\" << rear << endl;\n  }\n};\n\nint main(){\n  string total_test_cases_str;\n\n  while(getline(cin,total_test_cases_str)){\n    stringstream ttc_ss;\n    ttc_ss << total_test_cases_str;\n    int total_test_cases;\n    ttc_ss >> total_test_cases;\n\n    for(int test_idx=0;test_idx<total_test_cases;test_idx++){\n      string text;\n      getline(cin,text);\n      \n      Editor editor(text);\n\n      string total_commands_str;\n\n      getline(cin,total_commands_str);\n      stringstream total_commands_ss;\n      total_commands_ss << total_commands_str;\n      \n      int total_commands;\n      total_commands_ss >> total_commands;\n\n      for(int command_idx=0;command_idx < total_commands; command_idx++){\n\tstring fr_str;\n\n\tgetline(cin,fr_str);\n\n\tstring front=\"\";\n\tstring rear=\"\";\n\tint str_pos = 0;\n\tfor(int i=0;i<fr_str.size();i++){\n\t  if(fr_str[i] == ' '){\n\t    str_pos = i+1;\n\t    break;\n\t  }\n\t  front += fr_str[i];\n\t}\n\tfor(int i=str_pos;i<fr_str.size();i++){\n\t  if(i==str_pos && fr_str[i] == '\"') {\n\t    //nothing todo\n\t  }\n\t  else if(fr_str[i] == '\"'){\n\t    break;\n\t  }\n\t  rear += fr_str[i];\n\t}\n\n\tif(front == \"forward\"){\n\t  if(rear == \"char\"){\n\t    editor.forward_char();\n\t  }\n\t  else if(rear == \"word\"){\n\t    editor.forward_word();\n\t  }\n\t}\n\telse if(front == \"backward\"){\n\t  if(rear == \"char\"){\n\t    editor.backward_char();\n\t  }\n\t  else if(rear == \"word\"){\n\t    editor.backward_word();\n\t  }\n\t}\n\telse if(front == \"insert\"){\n\t  editor.insert(rear.substr(1,rear.length()-1));\n\t}\n\telse if(front == \"delete\"){\n\t  if(rear == \"char\"){\n\t    editor.delete_char();\n\t  }\n\t  else if(rear == \"word\"){\n\t    editor.delete_word();\n\t  }\n\t}\n      }\n      editor.print_text();\n    }\n  }\n}"
  },
  {
    "language": "C++",
    "code": "\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nvoid setPos(string &buff,int &pos){\n    for(int i = 0; i < buff.size(); i++){\n        if(buff[i]=='^'){\n            pos=i;\n            return;\n        }\n    }\n}\n\nint main(){\n    int n;\n    cin>>n;\n    string gb;\n    getline(cin,gb);\n    while(n--){\n        string buff;\n        getline(cin,buff);\n        int m;\n        cin>>m;\n        getline(cin,gb);\n        int pos=0;\n        buff='^'+buff;\n        while(m--){\n            string op;\n            getline(cin,op);\n            if(op==\"forward char\"){\n                if(pos!=buff.size()-1){\n                    swap(buff[pos],buff[pos+1]);\n                    pos++;\n                }\n            }\n            else if(op==\"forward word\"){\n                // ツ右ツづ可閉カツ篠堋づーツ探ツつオツづ可つ「ツつォツ、ツ個ゥツづつつゥツづつスツづァツつサツづ個閉カツ篠堋療アツづ個催渉可づ個暗環置ツづ慊づカツーツソツδ仰づーツ暗堋督ョ\n                if(pos!=buff.size()-1){\n                    int initPos=pos;\n                    pos++;\n                    while(pos<buff.size()&&buff[pos]==' ')pos++;\n                    while(pos<buff.size()&&buff[pos]!=' ')pos++;\n                    buff=buff.substr(0,initPos)+buff.substr(initPos+1);\n                    if(pos-1==buff.size())\n                        buff+='^';\n                    else{\n                        pos--;\n                        buff=buff.substr(0,pos)+'^'+buff.substr(pos);\n                    }\n                    setPos(buff,pos);\n                }\n            }\n            else if(op==\"backward char\"){\n                if(pos!=0){\n                    swap(buff[pos],buff[pos-1]);\n                    setPos(buff,pos);\n                }\n            }\n            else if(op==\"backward word\"){\n                if(pos!=0){\n                    int initPos=pos;\n                    pos--;\n                    while(pos>=0&&buff[pos]==' ')pos--;\n                    while(pos>=0&&buff[pos]!=' ')pos--;\n                    buff=buff.substr(0,initPos)+buff.substr(initPos+1);\n                    if(pos==-1)\n                        buff='^'+buff;\n                    else{\n                        pos++;\n                        buff=buff.substr(0,pos)+'^'+buff.substr(pos);\n                    }\n                    setPos(buff,pos);\n                }\n            }\n            else if(op==\"delete char\"){\n                if(pos!=buff.size()-1)\n                    buff=buff.substr(0,pos+1)+buff.substr(pos+2);\n                setPos(buff,pos);\n            }\n            else if(op==\"delete word\"){\n                int initPos=pos;\n                if(pos!=buff.size()-1){\n                    while(pos<buff.size()&&buff[pos]==' ')pos++;\n                    while(pos<buff.size()&&buff[pos]!=' ')pos++;\n                    if(pos==buff.size())\n                        buff=buff.substr(0,pos+1);\n                    else\n                        buff=buff.substr(0,initPos+1)+buff.substr(pos);\n                    setPos(buff,pos);\n                }\n            }\n            else if(op.substr(0,6)==\"insert\"){\n                string ins=op.substr(7);\n                ins=ins.substr(1);\n                ins=ins.substr(0,ins.size()-1);\n                buff=buff.substr(0,pos)+ins+'^'+buff.substr(pos+1);\n                setPos(buff,pos);\n            }\n        }\n        cout<<buff<<endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "\n#include <iostream>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <map>\n#include <set>\n#include <queue>\nusing namespace std;\n\ntypedef vector<int> vi;\ntypedef pair<int, int> pii;\n\n#define rep(i, n) for(int i=0; i<n; i++)\n#define repa(i, s, e) for(int i=s; i<=e; i++) \n\nint T, N, c;\nstring str, proc;\n\nvoid process(string& p) {\n\tif(p == \"forward char\") {\n\t\tif(c < str.size()) c++;\n\t}\n\telse if(p == \"backward char\") {\n\t\tif(c > 0) c--;\n\t}\n\telse if(p == \"forward word\") {\n\t\tif(c == str.size()) return;\n\t\twhile(str[c] == ' ' && c < str.size()) c++;\n\t    while(str[c] != ' ' && c < str.size()) c++;\n\t}\n\telse if(p == \"backward word\") {\n\t\tif(c == 0) return;\n\t\twhile(str[c] == ' ' && c > 0) c--;\n\t\twhile(str[c] != ' ' && c > 0) c--;\n\t\tc++;\n\t}\n\telse if(p == \"delete char\") {\n\t\tif(c != str.size()) str.erase(c, 1);\n\t}\n\telse if(p == \"delete word\") {\n\t\tif(c == str.size()) return;\n\t\tint ct = c;\n\t\twhile(str[ct] == ' ' && ct != str.size()) ct++;\n\t\tif(ct == str.size()) return;\n\t\twhile(str[ct] != ' ' && ct != str.size()) ct++;\n\t\tstr.erase(c, ct-c);\n\t}\n\telse {\n\t\tsize_t s = p.find_first_of('\"');\n\t\tsize_t e = p.find_last_of('\"');\n\t\tstring a = p.substr(s+1, e-s-1);\n\t    // cout << a << endl;\n\t\tif(c != str.size()) {\n\t\t\tstr = str.substr(0, c) + a + str.substr(c, str.size()-1);\n\t\t} else {\n\t\t\tstr = str + a;\n\t\t}\n\t\tc = c + a.size();\n\t}\n}\n\nvoid out() {\n\trep(i,c) printf(\"%c\", str[i]);\n\tprintf(\"^\");\n\trepa(i,c,(int)str.size()-1) printf(\"%c\", str[i]);\n\tprintf(\"\\n\");\n}\n\nint main() {\n\tchar buf[256];\n\tcin >> T;\n\tcin.ignore();\n\trep(t,T) {\n\t\tfgets(buf, sizeof(buf), stdin);\n\t\t*(strchr(buf, '\\n')) = '\\0';\n\t\tstr = string(buf);\n\n\t\tscanf(\"%d\\n\", &N);\n\t\tc = 0;\n\t\trep(i,N) {\n\t\t\tgetline(cin, proc);\n\t\t\tprocess(proc);\n//\t\t\tout();\n\t\t}\n\t\tout();\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\n\nusing namespace std;\n\n\nvoid input(string& s, vector<string>& v){\n  getline(cin,s);\n  int q;\n  cin >> q;\n  cin.ignore();\n  v.resize(q);\n  for(int i = 0; i < q; i++) getline(cin,v[i]);\n}\n\nbool isAlf(char c){ return 'A'<=c&&c<='Z'||'a'<=c&&c<='z';}\n\n//forward word\nvoid FW(const string& s, int& pos){\n  if(pos >= (int)s.length()) return;\n  bool word = false, blank = false;\n  if(pos == 0) blank = true;\n\n  while(1){\n    if(pos == (int)s.length()) break;\n    if(s[pos] == ' '){\n      blank = true;\n      if(blank && word) return;\n    }\n    if(s[pos] != ' ') word = true;\n    pos++;\n  }\n}\n//backward word\nvoid BW(const string& s, int& pos){\n  if(pos == 0) return;\n  while(1){\n    pos--;\n    if(pos == 0) break;\n    if(s[pos] == ' ') break;\n  }\n}\n\n//delete char\nvoid DC(string& s, int& pos){\n  if((int)s.length() <= pos) return;\n  s = s.substr(0,pos)+s.substr(pos+1);  \n}\n\n\n//delete word\nvoid DW(string& s, int pos){\n  if((int)s.length() <= pos) return;\n\n  while(!isAlf(s[pos]) && s[pos] != ' ') pos++;\n  \n  if((int)s.length() <= pos) return;\n  \n \n\n  int begin = pos;\n  if(s[pos] == ' '){\n    while(s[pos] == ' ') pos++;\n  }else{\n    while(s[pos] != ' ') pos++;\n  }\n\n  string res = \"\";\n  for(int i = 0; i < (int)s.length(); i++)\n    if(!(begin <= i && i <= pos)) res += s[i];\n\n  s = res;\n}\n\n//insert \nvoid insert(string& s, int& pos, string w){\n\n  w = w.substr(1,w.length()-2);\n  \n  string res = \"\";\n \n  res += s.substr(0,pos);\n  res += w;\n  res += s.substr(pos);\n  s = res;\n\n  pos += w.length();\n}\n\nvoid solve(string& s, const vector<string>& v){\n  int pos = 0;\n\n  for(int i = 0; i < (int)v.size(); i++){\n    if(v[i] == \"forward char\") pos = min(pos+1,(int)s.length());\n    if(v[i] == \"forward word\") FW(s,pos);\n    if(v[i] == \"backward char\") pos = max(pos-1,0);\n    if(v[i] == \"backward word\") BW(s,pos);\n    if(v[i][0] == 'i') insert(s,pos,v[i].substr(7));\n    if(v[i] == \"delete char\") DC(s,pos);\n    if(v[i] == \"delete word\") DW(s,pos);\n    //  cout << s.substr(0,pos) << \"^\" << s.substr(pos) << endl;\n  }\n  cout << s.substr(0,pos) << \"^\" << s.substr(pos) << endl;\n}\n\nint main(){\n  int T;\n  cin >> T;\n  cin.ignore();\n  while(T--){\n    string txt;\n    vector<string> V;\n    input(txt,V);\n    solve(txt,V);\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <stdlib.h>\n#include <string.h>\n#include <string>\n\n#define REP(i, n) for(int i=0; i<n; i++)\n\ntypedef vector<int> VI;\n\nint T, N;\nstring text;\nstring cmd;\nstring tmp;\n\nvoid execute(string& text, string cmd)\n{\n\tif(cmd == \"forward char\"){\n\t\tREP(i, text.size())\n\t\t{\n\t\t\tif(text[i] == '^')\n\t\t\t{\n\t\t\t\tif(i != text.size()-1)\n\t\t\t\t{\n\t\t\t\t\ttext[i] = text[i+1];\n\t\t\t\t\ttext[i+1] = '^';\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse if(cmd ==\"forward word\")\n\t{\n\t\tint iCaret = -1;\n\t\tREP(i, text.size())\n\t\t{\n\t\t\tif(text[i] == '^')\n\t\t\t{\n\t\t\t\tiCaret = i;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif(text[i] == ' ' && iCaret != -1)\n\t\t\t{\n\t\t\t\tif(i != 0)\n\t\t\t\t{\n\t\t\t\t\tif(text[i-1] == ' ' || text[i-1] == '^')\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttext.insert(text.begin()+i, '^');\n\t\t\t\ttext.erase(text.begin()+iCaret);\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif(i == text.size()-1 && iCaret != -1)\n\t\t\t{\n\t\t\t\ttext.insert(text.end(), '^');\n\t\t\t\ttext.erase(text.begin()+iCaret);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\telse if(cmd == \"backward char\")\n\t{\n\t\tREP(i, text.size())\n\t\t{\n\t\t\tif(text[i] == '^')\n\t\t\t{\n\t\t\t\tif(i != 0)\n\t\t\t\t{\n\t\t\t\t\ttext[i] = text[i-1];\n\t\t\t\t\ttext[i-1] = '^';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse if(cmd == \"backward word\")\n\t{\n\t\tint iCaret = -1;\n\t\tfor(int i=text.size()-1; i>=0; i--)\n\t\t{\n\t\t\tif(text[i] == '^')\n\t\t\t{\n\t\t\t\tiCaret = i;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif(text[i] == ' ' && iCaret != -1)\n\t\t\t{\n\t\t\t\tif(i != text.size()-1)\n\t\t\t\t{\n\t\t\t\t\tif(text[i+1] == ' ' || text[i+1] == '^')\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttext.erase(text.begin() + iCaret);\n\t\t\t\ttext.insert(text.begin() + i, '^');\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif(i == 0 && iCaret != -1)\n\t\t\t{\n\t\t\t\ttext.erase(text.begin() + iCaret);\n\t\t\t\ttext.insert(text.begin(), '^');\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\telse if(cmd == \"delete char\")\n\t{\n\t\tREP(i, text.size())\n\t\t{\n\t\t\tif(text[i] == '^')\n\t\t\t{\n\t\t\t\tif(i != text.size()-1)\n\t\t\t\t{\n\t\t\t\t\ttext.erase(text.begin() + i+1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse if(cmd == \"delete word\")\n\t{\n\t\tint first = 0;\n\t\tint last = 0;\n\t\tREP(i, text.size())\n\t\t{\n\t\t\tif(text[i] == '^')\n\t\t\t{\n\t\t\t\tfirst = i;\n\t\t\t}\n\t\t\t\n\t\t\tif((text[i] == ' ' || i == text.size()-1) && first != 0)\n\t\t\t{\n\t\t\t\tif(i != 0)\n\t\t\t\t{\n\t\t\t\t\tif(text[i-1] == ' ' || text[i-1] == ' ')\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttext.erase(text.begin()+first+1, text.begin()+i);\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tbool is_insert = true;\n\t\tstring str_insert = \"insert\";\n\t\tREP(i, str_insert.size())\n\t\t{\n\t\t\tif(str_insert[i] != cmd[i])\n\t\t\t{\n\t\t\t\tis_insert = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif(is_insert)\n\t\t{\n\t\t\tstring word_insert = string(cmd, str_insert.size()+2, cmd.size()-str_insert.size()-3);\n\t\t\tstd::copy(cmd.begin()+str_insert.size()+2, cmd.end()-1, word_insert.begin());\n\t\t\tcout << word_insert << endl;\n\t\t\t\n\t\t\tREP(i, text.size())\n\t\t\t{\n\t\t\t\tif(text[i] == '^')\n\t\t\t\t{\n\t\t\t\t\ttext.insert(i, word_insert);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main()\n{\n\tgetline(cin, tmp);\n\tT = atoi(tmp.c_str());\n\n\tREP(t, T)\n\t{\n\t\tgetline(cin, text);\n\t\ttext = \"^\" + text;\n\t\tcout << text << endl;\n\n\t\tgetline(cin, tmp);\n\t\tN = atoi(tmp.c_str());\n\t\tREP(n, N)\n\t\t{\n\t\t\tgetline(cin, cmd);\n\t\t\texecute(text, cmd);\n\t\t\tcout << text << endl;\n\t\t}\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <cstdlib>\n#include <algorithm>\nusing namespace std;\n\nvoid escape(string& s)\n{\n  if (s.find_first_of(\"\\n\") != string::npos)\n    s.erase(s.end()-1);\n  if (s.find_first_of(\"\\r\") != string::npos)\n    s.erase(s.end()-1);\n}\n\nint main()\n{\n  string s, t;\n  getline(cin, t);\n\n  int T = atoi(t.c_str());\n  for (int dataset = 0; dataset < T; ++dataset) {\n    getline(cin, s);\n    escape(s);\n    getline(cin, t);\n\n    int M = atoi(t.c_str()), cur = 0;\n    for (int i = 0; i < M; ++i) {\n      getline(cin, t);\n      escape(t);\n\n      if (t == \"forward char\") {\n\tif (cur < s.size())\n\t  ++cur;\n      } else if (t == \"forward word\") {\n\twhile (cur < s.size() && s[cur] == ' ')\n\t  ++cur;\n\twhile (cur < s.size() && s[cur] != ' ') {\n\t  ++cur;\n\t}\n      } else if (t == \"backward char\") {\n\tif (cur > 0)\n\t  --cur;\n      } else if (t == \"backward word\") {\n\tif (cur != 0) {\n\t  while (cur > 0 && s[cur-1] == ' ')\n\t    --cur;\n\t  while (cur > 0 && s[cur-1] != ' ')\n\t    --cur;\n\t}\n      } else if (t == \"delete char\") {\n\tif (cur < s.size())\n\t  s.erase(cur, 1);\n      } else if (t == \"delete word\") {\n\tif (cur < s.size()) {\n\t  int end = cur;\n\t  while (end < s.size() && s[end] == ' ')\n\t    ++end;\n\t  if (end < s.size()) {\n\t    while (end < s.size() && s[end] != ' ')\n\t      ++end;\n\t    s.erase(cur, end-cur);\n\t  }\n\t}\n      } else {\n\tstring ins = t.substr(t.find_first_of(\"\\\"\")+1);\n\tins.erase(ins.end()-1);\n\ts.insert(cur, ins);\n\tcur += ins.size();\n      }\n    }\n    for (unsigned int i = 0; i <= s.size(); ++i) {\n      if (i == cur)\n\tcout << \"^\";\n      if (i < s.size())\n\tcout << s[i];\n    }\n    cout << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <climits>\n#include <cfloat>\n#include <ctime>\n#include <cassert>\n#include <map>\n#include <utility>\n#include <set>\n#include <iostream>\n#include <memory>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <functional>\n#include <sstream>\n#include <complex>\n#include <stack>\n#include <queue>\n#include <numeric>\n#include <list>\n#include <iomanip>\n#include <iterator>\n \nusing namespace std;\n \ntypedef long long ll;\ntypedef pair<int,int> Pii;\ntypedef pair<ll,ll> Pll;\n \n#define FOR(i,n) for(int i = 0; i < (n); i++)\n#define sz(c) ((int)c.size())\n\ntypedef unsigned long long ull;\nconst int INF = (int)1e8;\n\nvoid operate(string &val,int &cur,string op){\n\tint n = sz(val);\n\tif(op == \"forward char\"){\n\t\tif(cur != n) cur++;\n\t} else if(op == \"forward word\"){\n\t\twhile(cur != n && val[cur] != ' ') cur++; \n\t} else if(op == \"backward char\"){\n\t\tif(cur != 0) cur--;\n\t} else if(op == \"backward word\"){\n\t\twhile(cur != 0 && val[cur-1] != ' ') cur--; \n\t} else if(op == \"delete char\"){\n\t\tif(cur != n)\n\t\t\tval.erase(cur,1);\n\t} else if(op == \"delete word\"){\n\t\tif(cur != n){\n\t\t\tint pos = 1;\n\t\t\twhile(cur + pos != n && val[cur + pos - 1] != ' ') pos++;\n\t\t\tval.erase(cur,pos);\n\t\t}\n\t} else {\n\t\tint start = 0;\n\t\twhile(op[start] != '\"') start++;\n\t\tstart++;\n\t\tint end = start+1;\n\t\twhile(op[end] != '\"') end++;\n\t\tstring a = op.substr(start,end - start);\n\t\tval.insert(val.begin() + cur,a.begin(),a.end());\n\t\tcur += a.size();\n\t}\n}\n\nint main(){\n\tint t; cin>>t;\n\tstring buf;\n\tgetline(cin,buf);\n\twhile(t--){\n\t\tstring val; getline(cin,val);\n\t\tint m; cin>>m;\n\t\tgetline(cin,buf);\n\t\tvector<string> op(m); FOR(i,m) getline(cin,op[i]);\n\t\tint cur = 0;\n\t\tFOR(i,m){\n\t\t\toperate(val,cur,op[i]);\n\t\t}\n\n\t\tval.insert(val.begin() + cur,'^');\n\t\tcout << val << endl; \n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#define INF 0x3f3f3f3f\n#include <cstdio>\n#include <iostream>\n#include <sstream>\n#include <cmath>\n#include <cstdlib>\n#include <algorithm>\n#include <queue>\n#include <stack>\n#include <limits>\n#include <map>\n#include <string>\n#include <cstring>\n#include <set>\n#include <deque>\n#include <bitset>\n#include <list>\n#include <cctype>\n#include <utility>\n \nusing namespace std;\n \ntypedef long long ll;\ntypedef pair <int,int> P;\ntypedef pair <int,P > PP;\n \nint tx[] = {0,1,0,-1};\nint ty[] = {-1,0,1,0};\n \nstatic const double EPS = 1e-8;\n\nclass Editor{\nprivate:\n  string text;\n  int cursor;\npublic:\n  Editor(const string& _text) : text(_text),cursor(0) {}\n  void forward_char(){\n    if(text.length() > cursor) cursor++;\n  }\n  void forward_word(){\n    int tmp = text.length();\n    for(int pos=cursor;pos+1<text.length();pos++){\n      if(text[pos] != ' '\n\t && text[pos + 1] == ' '){\n\ttmp = pos + 1;\n\tbreak;\n      }\n    }\n    cursor = tmp;\n  }\n  void backward_char(){\n    if(0 < cursor) cursor--;    \n  }\n  void backward_word(){\n    int tmp = 0;\n\n    for(int pos=cursor;pos-1>=0;pos--){\n      if(text[pos] != ' '\n\t && text[pos - 1] == ' '){\n\ttmp = pos;\n\tbreak;\n      }\n    }\n    cursor = tmp;\n  }\n  void insert(const string& str){\n    string middle = str;\n    string front = \"\";\n    string rear = \"\";\n    if(cursor > 0) front = text.substr(0,cursor);\n    if(cursor < text.length()) rear = text.substr(cursor,text.length()-cursor);\n\n    cursor = front.length() + middle.length();\n    text = front + middle + rear;\n  }\n  void delete_char(){\n    string front = \"\";\n    string rear = \"\";\n    if(cursor > 0) front = text.substr(0,cursor);\n    if(cursor+1 < text.length()) rear = text.substr(cursor+1,text.length()-(cursor+1));\n    text = front + rear;\n  }\n  void delete_word(){\n    int delete_first = cursor;\n    int delete_last = text.length();\n\n    bool char_flag = false;\n    for(int pos=cursor;pos<text.length();pos++){\n      if(text[pos] == ' '){\n\tif(char_flag){\n\t  delete_last = pos - 1;\n\t  break;\n\t}\n      }\n      else if(text[pos] != ' '){\n\tchar_flag = true;\n      }\n    }\n\n    string front = \"\";\n    string rear = \"\";\n    if(delete_first > 0) front = text.substr(0,delete_first);\n    if(delete_last + 1 < text.length()) rear = text.substr(delete_last + 1,text.length()-(delete_last+1));\n    text = front + rear;\n  }\n  void print_text(){\n    string front = \"\";\n    string rear = \"\";\n    if(cursor > 0) front = text.substr(0,cursor);\n    if(cursor < text.length()) rear = text.substr(cursor,text.length()-cursor);\n    cout << front << \"^\" << rear << endl;\n  }\n};\n\nint main(){\n  string total_test_cases_str;\n\n  while(getline(cin,total_test_cases_str)){\n    stringstream ttc_ss;\n    ttc_ss << total_test_cases_str;\n    int total_test_cases;\n    ttc_ss >> total_test_cases;\n\n    for(int test_idx=0;test_idx<total_test_cases;test_idx++){\n      string text;\n      getline(cin,text);\n      \n      Editor editor(text);\n\n      string total_commands_str;\n\n      getline(cin,total_commands_str);\n      stringstream total_commands_ss;\n      total_commands_ss << total_commands_str;\n      \n      int total_commands;\n      total_commands_ss >> total_commands;\n\n      for(int command_idx=0;command_idx < total_commands; command_idx++){\n\tstring fr_str;\n\n\tgetline(cin,fr_str);\n\n\tstring front=\"\";\n\tstring rear=\"\";\n\tint str_pos = 0;\n\tfor(int i=0;i<fr_str.size();i++){\n\t  if(fr_str[i] == ' '){\n\t    str_pos = i+1;\n\t    break;\n\t  }\n\t  front += fr_str[i];\n\t}\n\tfor(int i=str_pos;i<fr_str.size();i++){\n\t  rear += fr_str[i];\n\n\t  if(i==str_pos && fr_str[i] == '\"') {\n\t    //nothing todo\n\t  }\n\t  else if(fr_str[i] == '\"'){\n\t    break;\n\t  }\n\t}\n\n\tif(front == \"forward\"){\n\t  if(rear == \"char\"){\n\t    editor.forward_char();\n\t  }\n\t  else if(rear == \"word\"){\n\t    editor.forward_word();\n\t  }\n\t}\n\telse if(front == \"backward\"){\n\t  if(rear == \"char\"){\n\t    editor.backward_char();\n\t  }\n\t  else if(rear == \"word\"){\n\t    editor.backward_word();\n\t  }\n\t}\n\telse if(front == \"insert\"){\n\t  editor.insert(rear.substr(1,rear.length()-2));\n\t}\n\telse if(front == \"delete\"){\n\t  if(rear == \"char\"){\n\t    editor.delete_char();\n\t  }\n\t  else if(rear == \"word\"){\n\t    editor.delete_word();\n\t  }\n\t}\n      }\n      editor.print_text();\n    }\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<vector>\nusing namespace std;\n\nint main(){\n  int n;\n  cin >>n;\n  cin.ignore();\n  for(int i=0;i<n;i++){\n    string str;\n    int cn,pos;\n    if(!getline(cin,str)){\n      str = \"\";\n    }\n    cin >> cn;\n    pos = 0;\n    for(int j=0;j<cn;j++){\n      string command,target;\n      char ch;\n      cin >> command;\n      getline(cin,target);\n      target.erase(0,1);\n      if(command == \"forward\"){\n        if(pos<str.size()){\n          if(target == \"word\"){\n            int temp = pos;\n            int judge = 0;\n            while(temp<str.size()){\n              if(str[temp]!=' '){\n                judge = 1;\n                break;\n              }\n              temp++;\n            }\n            if(judge==1){\n              do{\n                pos++;\n              }while(pos<str.size()&&str[pos]!=' ');\n            }\n          }else{\n            pos++;\n          }\n        }\n      }else if(command == \"delete\"){\n        if(str.size()!=0&&pos!=str.size()){\n          if(target == \"word\"){\n            int temp = pos;\n            int stage = 0;\n            while(pos<str.size()){\n              if(stage==0){\n                if(str[temp]!=' '){\n                  stage = 1;\n                }\n              }else{\n                if(str[temp]==' '){\n                  break;\n                }\n              }\n              str.erase(pos,1);\n            }\n            while(pos<str.size()&&str[pos]!=' '){\n              str.erase(pos,1);\n            }\n          }else{\n            str.erase(pos,1);\n          }\n        }\n      }else if(command == \"backward\"){\n        if(pos>0){\n          if(target == \"word\"){\n            int temp = pos;\n            int judge = 0;\n            while(temp>=0){\n              if(str[temp]!=' '){\n                judge = 1;\n                break;\n              }\n              temp--;\n            }\n            if(judge==1){\n              do{\n                pos--;\n              }while(pos>0&&str[pos]!=' ');\n            }\n          }else{\n            pos--;\n          }\n        }\n      }else if(command == \"insert\"){\n        target = target.substr(1,target.size()-2);\n        str.insert(pos,target);\n        pos += target.size();\n      }\n    }\n    str.insert(pos,\"^\");\n    cout << str << endl;\n  }\n  \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <cstring>\n#include <climits>\n#include <algorithm>\n#include <map>\n\nusing namespace std;\n\nvoid fowardChar(string &text, int &cur) {\n    if (cur == (int)text.size()-1) return ;\n    char t = text[cur];\n    text[cur] = text[cur+1];\n    text[cur+1] = t;\n    cur ++;\n}\n\nvoid fowardWord(string &text, int &cur) {\n    if (cur == (int)text.size()-1) return ;\n    while (1) {\n        fowardChar(text, cur);\n        if (cur == (int)text.size()-1) break;\n        if (text[cur-1] != ' ' && text[cur+1] == ' ') break;\n    }\n}\n\nvoid backwardChar(string &text, int &cur) {\n    if (cur == 0) return ;\n    char t = text[cur];\n    text[cur] = text[cur-1];\n    text[cur-1] = t;\n    cur --;\n}\n\nvoid backwardWord(string &text, int &cur) {\n    if (cur == 0) return ;\n    while (1) {\n        backwardChar(text, cur);\n        if (cur == 0) break;\n        if (text[cur+1] != ' ' && text[cur-1] == ' ') break;\n    }\n}\n\nvoid deleteChar(string &text, int &cur) {\n    if (cur == (int)text.size()-1) return ;\n\n    string t = text.substr(0, cur+1);\n    if (cur+2 < (int)text.size()) {\n        t += text.substr(cur+2);\n    }\n    text = t;\n}\n\nvoid deleteWord(string &text, int &cur) {\n    if (cur == (int)text.size()-1) return ;\n\n    int del_l = cur+1, del_r = cur+1;\n    while (1) {\n        if (del_r == (int)text.size()-1) break;\n        if (text[del_r] != ' ' && text[del_r+1] == ' ') break;\n        del_r ++;\n    }\n\n    string t = text.substr(0, del_l);\n    if (del_r+1 < (int)text.size()) {\n        t += text.substr(del_r+1);\n    }\n    text = t;\n}\n\nvoid insert(string &text, int &cur, string anytext) {\n    text = text.substr(0, cur) + anytext + text.substr(cur);\n    cur += anytext.size();\n}\n\nint main() {\n    int N, M;\n    cin >> N; cin.ignore();\n    for (int i=0; i<N; ++i) {\n        string text, com;\n        getline(cin, text);\n        text = \"^\" + text;\n        int cur = 0;\n        cin >> M; cin.ignore();\n        for (int j=0; j<M; ++j) {\n            getline(cin, com);\n            if (com == \"forward char\") {\n                fowardChar(text, cur);\n            } else if (com == \"forward word\") {\n                fowardWord(text, cur);\n            } else if (com == \"backward char\") {\n                backwardChar(text, cur);\n            } else if (com == \"backward word\") {\n                backwardWord(text, cur);\n            } else if (com == \"delete char\") {\n                deleteChar(text, cur);\n            } else if (com == \"delete word\") {\n                deleteWord(text, cur);\n            } else { // insert anytext\n                string anytext = com.substr(8, (int)com.size()-9);\n                insert(text, cur, anytext);\n            }\n        }\n        cout << text << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nvector<string> split(string s, string t) {\n\tvector<string> r;\n\tint p = s.find(t);\n\tif (p != s.npos) {\n\t\tr.push_back(s.substr(0, p));\n\t\ts = s.substr(p+t.size());\n\t}\n\tr.push_back(s);\n\treturn r;\n}\n\nvoid output(string text, int cursor) {\n\tint ts = (int)text.size();\n\tfor (int i=0; i<ts; i++) {\n\t\tif (i == cursor) {\n\t\t\tcout << '^' << text[i];\n\t\t} else {\n\t\t\tcout << text[i];\n\t\t}\n\t}\n\tif (cursor == ts) cout << '^';\n\tcout << endl;\n}\n\nint main() {\n\tint n; cin >> n;\n\tint i = 0;\n\t\n\twhile (i<n) {\n\t\t// solver\n\t\tstring text;\n\t\tgetline(cin, text);\n\t\t\n\t\tint cursor = 0;\n\t\t\n\t\tint m; cin >> m;\n\t\t\n\t\tfor (int j=0; j<m; j++) {\n\t\t\tstring command;\n\t\t\tgetline(cin, command);\n\t\t\t\n\t\t\tvector<string> com = split(command, \" \");\n\t\t\t\n\t\t\tif (com[0]==\"forward\") {\n\t\t\t\n\t\t\t\tif (com[1]==\"char\") {\n\t\t\t\t\n\t\t\t\t\tif (cursor < (int)text.size()) cursor++;\n\t\t\t\t\t\n\t\t\t\t} else if (com[1]==\"word\") {\n\t\t\t\t\n\t\t\t\t\tbool find = false;\n\t\t\t\t\tint k;\n\t\t\t\t\tfor (k=cursor; k<(int)text.size() && !find; k++) {\n\t\t\t\t\t\tif (text[k]==' ') {\n\t\t\t\t\t\t\tfind = true;\n\t\t\t\t\t\t\tcursor = k;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (!find) cursor = (int)text.size();\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t} else if (com[0]==\"backward\") {\n\t\t\t\n\t\t\t\tif (com[1]==\"char\") {\n\t\t\t\t\n\t\t\t\t\tif (cursor > 0) cursor--;\n\t\t\t\t\t\n\t\t\t\t} else if (com[1]==\"word\") {\n\t\t\t\t\n\t\t\t\t\tbool find = false;\n\t\t\t\t\tint k = cursor;\n\t\t\t\t\tfor (; k>=0 && !find; k--) {\n\t\t\t\t\t\tif (text[k]==' ') find = true;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (find) {\n\t\t\t\t\t\tbool find2 = false;\n\t\t\t\t\t\tfor (; k>=0 && !find2; k--) {\n\t\t\t\t\t\t\tif (text[k]==' ') {\n\t\t\t\t\t\t\t\tfind2 = true;\n\t\t\t\t\t\t\t\tcursor = k + 1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!find2) cursor = 0;\n\t\t\t\t\t\t\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcursor = 0;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t} else if (com[0]==\"insert\") {\n\t\t\t\t\n\t\t\t\tstring ins = com[1].substr(1, (int)com[1].size()-2);\n\t\t\t\ttext = text.substr(0, cursor) + ins + text.substr(cursor);\n\t\t\t\tcursor += (int)ins.size();\n\t\t\t\t\n\t\t\t} else if (com[0]==\"delete\") {\n\t\t\t\t\n\t\t\t\tif (com[1] == \"char\") {\n\t\t\t\t\t\n\t\t\t\t\tif (cursor < (int)text.size()) {\n\t\t\t\t\t\ttext = text.substr(0, cursor) + text.substr(cursor + 1);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t} else if (com[1]==\"word\") {\n\t\t\t\t\t\n\t\t\t\t\tint del = cursor + 1;\t\t\t\t\t\n\t\t\t\t\tfor (; del < (int)text.size(); del++) {\n\t\t\t\t\t\tif (text[del] == ' ') {\n\t\t\t\t\t\t\tdel++;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t\ttext = text.substr(0, cursor) + text.substr(del);\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t\t\n\t\t// output\n\t\toutput(text, cursor);\n\t\t\n\t\t\n\t\ti++;\n\t}\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\nusing namespace std;\n\nint main(){\n  int t,m;\n  string str,com,arg;\n\n  cin >> t;\n  cin.ignore();\n  while(t--){\n    getline(cin,str);\n    cin >> m;\n\n    int pos = 0;\n    for(int i=0;i<m;i++){\n      cin >> com;\n      cin.ignore();\n      getline(cin,arg);\n      //cout << com << \" \" << arg <<endl;\n      if(com == \"forward\"){\n\tif(arg == \"char\"){\n\t  if(pos!=(int)str.size())pos++;\t  \n\t}else{\n\t  while(pos<(int)str.size() && str[pos]==' ')pos++;\n\t  while(pos<(int)str.size() && str[pos]!=' ')pos++;\n\t}\n      }\n      if(com == \"backward\"){\n\tif(arg == \"char\"){\n\t  if(pos)pos--;\n\t}else{\n\t  while(pos>0 && str[pos]==' ')pos--;\n\t  while(pos>0 && str[pos]!=' ')pos--;\n\t  while(pos>0 && str[pos]==' ')pos--;\n\t}\n      }\n      if(com == \"delete\"){\n\tif(arg == \"char\"){\n\t  if(pos!=(int)str.size())str.erase(str.begin()+pos);\n\t}else{\n\t  while(pos<(int)str.size() && str[pos]==' ')str.erase(str.begin()+pos);\n\t  while(pos<(int)str.size() && str[pos]!=' ')str.erase(str.begin()+pos);\n\t  while(pos<(int)str.size() && str[pos]==' ')str.erase(str.begin()+pos);\n\t}\n      }\n      if(com == \"insert\"){\n\tfor(int j=1;j<(int)arg.size()-1;j++){\n\t  if(pos==(int)str.size()){\n\t    str.push_back(arg[j]);\n\t    pos++;\n\t  }else{\n\t    str.insert(str.begin()+pos++,arg[j]);\n\t  }\n\t}\n      }\n      cout << pos << \" \" << str << endl;\n    }\n    if(pos==(int)str.size())str.push_back('^');\n    else str.insert(str.begin()+pos,'^');\n    cout << str << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "{\n  string str;\n  char c;\n  c = _space();\n  if (c == '\\n') return str;\n  do {\n    str+=c;\n  } while ((c = getchar()) != '\\n');\n\n  return string(str);\n}\n\nstring nextQuote()\n{\n  space();\n  char c;\n  string str = \"\";\n  while ((c = getchar()) != '\"') {\n    str += c;\n  }\n  return str;\n}\n\nint main()\n{\n  int nTest;  \n  scanf(\"%d \",&nTest);\n  //cout << nTest << endl;\n    \n  for (int testIdx = 0; testIdx < nTest; testIdx++) {\n    string text = nextLine();\n    //cout << text << endl;\n    //    cin.ignore();\n\n    int N;\n    scanf(\" %d \", &N);\n    //cout << \"N = \" << N << endl;\n    //cin.ignore();\n    int cur = 0;\n    for (int i = 0; i < N; i++) {\n      string cmd, arg;\n      cmd = nextStr();\n      if (cmd == \"forward\") {\n\targ = nextStr();\n\tif (arg == \"char\") {\n\t  if (cur < text.size()) {\n\t    cur++;\n\t  }\n\t} else {\t\n\t  while (cur < text.size() && isblank(text[cur])) {cur++;}\n\t  while (cur < text.size() && !isblank(text[cur])) {cur++;}\n\t}\n      } else if (cmd == \"backward\") {\n\targ = nextStr();\n\tif (arg == \"char\") {\n\t  if (cur > 0) {\n\t    cur--;\n\t  }\n\t} else {\t  \n\t  while (cur > 0 && !isblank(text[cur])) {cur--;}\n\t  //while (cur > 0 && isblank(text[cur])) {cur--;}\n\t}\n      } else if (cmd == \"insert\") {\n\targ = nextQuote();\n\ttext.insert(text.begin() + cur, arg.begin(), arg.end());\n\tcur += arg.size();\n      } else if (cmd == \"delete\") {\n\targ = nextStr();\n\tif (arg == \"char\") {\n\t  if (cur < text.size()) {\n\t    text.erase(text.begin() + cur);\n\t  }\n\t} else {\n\t  while (cur < text.size() && isblank(text[cur])) {\n\t    text.erase(text.begin() + cur);\n\t  }\n\t  while (cur < text.size() && !isblank(text[cur])) {\n\t    text.erase(text.begin() + cur);\n\t  }\n\t  /*\n\t  */\n\t}\n      }\n      //cout << \"cmd, arg = \" << cmd << \", \" << arg << endl;\n      //cout << \"cur = \" << cur << endl;\n      //cout << text << endl;\n    }\n    for (int i = 0; i < cur; i++) {\n      cout << text[i];\n    }\n    cout << \"^\";\n    for (int i = cur; i < text.size(); i++) {\n      cout << text[i];\n    }\n    cout << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cmath>\nusing namespace std;\n\nint main()\n{\n    string bla = \"bla\";\n    cout<<bla.substr(3)<<endl;\n    int nb_cas;\n    cin>>nb_cas;\n    cin.ignore();\n    while(nb_cas--)\n    {\n        string texte;\n        getline(cin,texte);\n        int nb_op;\n        cin>>nb_op;\n        int curseur = 0;\n        for(int c=0;c<nb_op;c++)\n        {\n            string s1,s2;\n            cin>>s1;\n            cin.ignore();\n            getline(cin,s2);\n            if(s1==\"forward\"||s1==\"backward\")\n            {\n                int d = (s1==\"forward\"?1:-1);\n                if(s2==\"char\") curseur+=d;\n                else if(s2==\"word\")\n                {\n                    while(curseur>= 0 && curseur<=texte.size()&&(curseur == texte.size()||texte[curseur]==' ')) curseur+=d;\n                    while(curseur>=-0&&curseur<=texte.size()&&(curseur==texte.size()||texte[curseur]!=' '))\n                    {\n                        curseur += d;\n                    }\n                }\n                curseur = max(curseur,0);\n                curseur = min(curseur,(int)texte.size());\n            }\n            else if(s1==\"delete\")\n            {\n                if(s2==\"char\")\n                {\n                    texte = texte.substr(0,min(texte.size(),(int)curseur))+texte.substr(min(curseur+1,(int)texte.size()));\n                }\n                else if(s2==\"word\")\n                {\n                    int finMot = curseur;\n                    while(finMot<texte.size()&&texte[finMot]==' ') finMot++;\n                    while(finMot<texte.size()&&texte[finMot]!=' ')\n                    {\n                        finMot ++;\n                    }\n                    texte = texte.substr(0,curseur)+(finMot < texte.size()?texte.substr(finMot):\"\");\n                }\n            }\n            else\n            {\n                s2 = s2.substr(1,s2.size()-2);\n                texte = texte.substr(0,curseur)+s2+(curseur<(int)texte.size()?texte.substr(curseur):\"\");\n                curseur += s2.size();\n            }\n        }\n        cout<<texte.substr(0,curseur)+\"^\"+(curseur<(int)texte.size()?texte.substr(curseur):\"\")<<endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstdlib>\n#include <cmath>\n#include <climits>\n#include <cfloat>\n#include <cstring>\n#include <map>\n#include <utility>\n#include <set>\n#include <iostream>\n#include <memory>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <functional>\n#include <sstream>\n#include <fstream>\n#include <complex>\n#include <stack>\n#include <queue>\n\nusing namespace std;\ntypedef long long LL;\ntypedef pair<int, int> PII;\nstatic const double EPS = 1e-5;\n\n#define FOR(i,k,n) for (int i=(k); i<(int)(n); ++i)\n#define REP(i,n) FOR(i,0,n)\n\nint main(void){\n  int N;\n  cin>>N;\n  cin.ignore();\n  while(N--){\n    string buf;\n    getline(cin,buf);\n    int M;\n    cin>>M;\n    cin.ignore();\n    string::iterator it = buf.begin();\n    while(M--){\n      /*\n      {\n      int dist = distance(buf.begin(),it);\n      REP(i,buf.size()){\n        if(i==dist)putchar('^');\n        putchar(buf[i]);\n      }\n      if(it==buf.end())putchar('^');\n      putchar('\\n');\n      }\n      */\n      string command;\n      getline(cin,command);\n      if(command==\"forward char\"&&it!=buf.end()) it++;\n      if(command==\"backward char\"&&it!=buf.begin()) it--;\n      if(command==\"forward word\"){\n        while(it!=buf.end()&&*it==' ')it++;\n        while(it!=buf.end()&&*it!=' ')it++;\n      }\n      if(command==\"backward word\"){\n        if(it!=buf.begin())it--;\n        while(it!=buf.begin()&&(*it)==' ')it--;\n        while(it!=buf.begin()&&(*it)!=' ')it--;\n        if(*it==' ') it++;\n      }\n      if(command==\"delete char\"&&it!=buf.end()) it = buf.erase(it);\n      if(command==\"delete word\"){\n        string::iterator it2 = it; \n        while(it2!=buf.end()&&*it2==' ')it2++;\n        while(it2!=buf.end()&&*it2!=' ')it2++;\n        //if(it2!=buf.end())it2++;\n        it = buf.erase(it,it2);\n      }\n      if(command.find(\"insert\",0)!=string::npos){\n        string ins = command.substr(8);\n        string::iterator ir = ins.end()-1;\n        ins.erase(ir);\n        //cout<<ins<<endl;\n        REP(i,ins.size()){\n          it = buf.insert(it,ins[i]);\n          it++;\n        }\n      }\n    }\n    int dist = distance(buf.begin(),it);\n    REP(i,buf.size()){\n      if(i==dist)putchar('^');\n      putchar(buf[i]);\n    }\n    if(it==buf.end())putchar('^');\n    putchar('\\n');\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\nusing namespace std;\n\nint main(){\n  int t,m;\n  string str,com,arg;\n\n  cin >> t;\n  cin.ignore();\n  while(t--){\n    getline(cin,str);\n    cin >> m;\n\n    int pos = 0;\n    for(int i=0;i<m;i++){\n      cin >> com;\n      cin.ignore();\n      getline(cin,arg);\n      //cout << com << \" \" << arg <<endl;\n      if(com == \"forward\"){\n\tif(arg == \"char\"){\n\t  if(pos!=(int)str.size())pos++;\t  \n\t}else{\n\t  while(pos<(int)str.size() && str[pos]==' ')pos++;\n\t  while(pos<(int)str.size() && str[pos]!=' ')pos++;\n\t}\n      }\n      if(com == \"backward\"){\n\tif(arg == \"char\"){\n\t  if(pos)pos--;\n\t}else{\n\t  while(pos>0 && str[pos]==' ')pos--;\n\t  while(pos>0 && str[pos]!=' ')pos--;\n\t}\n      }\n      if(com == \"delete\"){\n\tif(arg == \"char\"){\n\t  if(pos!=(int)str.size())str.erase(str.begin()+pos);\n\t}else{\n\t  while(pos<(int)str.size() && str[pos]==' ')str.erase(str.begin()+pos);\n\t  while(pos<(int)str.size() && str[pos]!=' ')str.erase(str.begin()+pos);\n\t  while(pos<(int)str.size() && str[pos]==' ')str.erase(str.begin()+pos);\n\t}\n      }\n      if(com == \"insert\"){\n\tfor(int j=1;j<(int)arg.size()-1;j++){\n\t  if(pos==(int)str.size()){\n\t    str.push_back(arg[j]);\n\t    pos++;\n\t  }else{\n\t    str.insert(str.begin()+pos++,arg[j]);\n\t  }\n\t}\n      }\n      //cout << pos << \" \" << str << endl;\n    }\n    if(pos==(int)str.size())str.push_back('^');\n    else str.insert(str.begin()+pos,'^');\n    cout << str << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<vector>\nusing namespace std;\n\nint main(){\n  int n;\n  cin >>n;\n  cin.ignore();\n  for(int i=0;i<n;i++){\n    string str;\n    int cn,pos;\n    if(!getline(cin,str)){\n      str = \"\";\n    }\n    cin >> cn;\n    pos = 0;\n    for(int j=0;j<cn;j++){\n      string command,target;\n      char ch;\n      cin >> command;\n      getline(cin,target);\n      target.erase(0,1);\n      if(command == \"forward\"){\n        if(pos<str.size()){\n          if(target == \"word\"){\n            do{\n              pos++;\n            }while(pos<str.size()&&str[pos]!=' ');\n          }else{\n            pos++;\n          }\n        }\n      }else if(command == \"delete\"){\n        if(str.size()!=0&&pos!=str.size()){\n          if(target == \"word\"){\n            do{\n              str.erase(pos,1);\n            }while(str.size()>0&&str[pos]!=' ');\n          }else{\n            str.erase(pos,1);\n          }\n        }\n      }else if(command == \"backward\"){\n        if(pos>0){\n          if(target == \"word\"){\n            do{\n              pos--;\n            }while(pos>0&&str[pos]!=' ');\n          }else{\n            pos--;\n          }\n        }\n      }else if(command == \"insert\"){\n        target = target.substr(1,target.size()-2);\n        str.insert(pos,target);\n        pos += target.size();\n      }\n      /*\n        if(pos>=str.size()){\n        pos = str.size() -1;\n        }else if(pos<0){\n        pos = 0;\n        }\n      */\n      //cout << str << endl;\n    }\n    str.insert(pos,\"^\");\n    cout << str << endl;\n  }\n  \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<stack>\n#include<cstdio>\nusing namespace std;\n\n\nclass Text_editor{\n\tstack<char> text_before_cursor;\n\tstack<char> text_after_cursor;\n\tvoid forward_char();\n\tvoid forward_word();\n\tvoid backward_char();\n\tvoid backward_word();\n\tvoid delete_char();\n\tvoid delete_word();\n\tvoid insert(string s);\npublic:\n\tText_editor(string in){\n\t\tstring::iterator it;\n\t\tfor(it=in.end()-1; it!=in.begin()-1; it--){\n\t\t\tchar ch = *it;\n\t\t\ttext_after_cursor.push(ch);\n\t\t}}\n\tvoid command(string cmd);\n\tvoid output();\n};\n\nvoid Text_editor::forward_char(){\n\tif(text_after_cursor.size()){\n\t\tchar ch = text_after_cursor.top();\n\t\ttext_after_cursor.pop();\n\t\ttext_before_cursor.push(ch);\n\t}\n}\n\nvoid Text_editor::forward_word(){\n\tif(text_after_cursor.size()){\n\t\twhile(text_after_cursor.top()==' '){\n\t\t\ttext_before_cursor.push(text_after_cursor.top());\n\t\t\ttext_after_cursor.pop();\n\t\t}\n\t\twhile(text_after_cursor.size() && text_after_cursor.top()!='.' && text_after_cursor.top()!=',' && text_after_cursor.top()!=' '){\n\t\t\ttext_before_cursor.push(text_after_cursor.top());\n\t\t\ttext_after_cursor.pop();\n\t\t}\n\t\tif(text_after_cursor.size() && (text_after_cursor.top()=='.' || text_after_cursor.top()==',') ){\n\t\ttext_before_cursor.push(text_after_cursor.top());\n\t\ttext_after_cursor.pop();\n\t\t}\n\t}\n}\n\nvoid Text_editor::backward_char(){\n\tif(text_before_cursor.size()){\n\t\ttext_after_cursor.push(text_before_cursor.top());\n\t\ttext_before_cursor.pop();\n\t}\n}\n\nvoid Text_editor::backward_word(){\n\tif(text_before_cursor.size()){\n\t\twhile(text_before_cursor.size() && text_before_cursor.top()==' '){\n\t\t \ttext_after_cursor.push(text_before_cursor.top());\n\t\t \ttext_before_cursor.pop();\n\t\t }\n\t\twhile(text_before_cursor.size() && text_before_cursor.top()!='.' && text_before_cursor.top()!=',' && text_before_cursor.top()!=' '){\n\t\t\ttext_after_cursor.push(text_before_cursor.top());\n\t\t\ttext_before_cursor.pop();\n\t\t}\n\t}\n}\n\nvoid Text_editor::delete_char(){\n\tif(text_after_cursor.size()){\n\t\ttext_after_cursor.pop();\n\t}\n}\n\nvoid Text_editor::delete_word(){\n\tif(text_after_cursor.size()){\n\t\twhile(text_after_cursor.top()!='.' && text_after_cursor.top()!=',' && text_after_cursor.top()!=' ' && text_after_cursor.size() ){\n\t\t\ttext_after_cursor.pop();\n\t\t}\n\t\tif(text_after_cursor.top()==',' || text_after_cursor.top()=='.'){\n\t\t\ttext_after_cursor.pop();\n\t\t}\n\t}\n}\n\nvoid Text_editor::insert(string s){\n\tfor(unsigned int i=0; i<s.size(); i++){\n\t\ttext_before_cursor.push(s[i]);\n\t}\n}\n\nvoid Text_editor::command(string cmd){\n\n\tchar c1=cmd[0], c2;\n\n\tswitch(c1){\n\tcase 'f':{\n\t\tc2 = cmd[8];\n\t\tif(c2=='c'){\n\t\t\tforward_char();\n\t\t}else{\n\t\t\tforward_word();\n\t\t}\n\t\tbreak;\n\t}\n\tcase 'd':{\n\t\tc2 = cmd[7];\n\t\tif(c2=='c'){\n\t\t\tdelete_char();\n\t\t}else{\n\t\t\tdelete_word();\n\t\t}\n\t\tbreak;\n\t}\n\tcase 'b':{\n\t\tc2 = cmd[9];\n\t\tif(c2=='c'){\n\t\t\tbackward_char();\n\t\t}else{\n\t\t\tbackward_word();\n\t\t}\n\t\tbreak;\n\t}\n\tcase 'i':{\n\t\tcmd.erase(0, 8);\n\t\tcmd.erase(cmd.size()-1, 1);\n\t\tinsert(cmd);\t\t\n\t\tbreak;\n\t}\n\t}\n\n}\n\nvoid Text_editor::output(){\n\ttext_after_cursor.push('^');\n\twhile(text_before_cursor.size()){\n\t\ttext_after_cursor.push(text_before_cursor.top());\n\t\ttext_before_cursor.pop();\n\t}\n\tstring out;\n\twhile(text_after_cursor.size()){\n\t\tout.push_back(text_after_cursor.top());\n\t\ttext_after_cursor.pop();\n\t}\n\tcout << out << endl;\n}\n\n\nint main()\n{\n\tint n;\n\tscanf(\"%d\\n\", &n);\n\t\n\tfor(int i=0; i<n; i++){\n\t\tstring in;\n\t\tint ncmd;\n\t\tgetline(cin, in);\n\t\tText_editor txtE(in);\n\t\tscanf(\"%d\\n\", &ncmd);\n\t\tfor(int j=0; j<ncmd; j++){\n\t\t\tstring cmd;\n\t\t\tgetline(cin, cmd);\n\t\t\ttxtE.command(cmd);\n\t\t}\n\t\ttxtE.output();\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint main() {\n    int N;\n    cin >> N;\n    cin.ignore();\n\n    while(N--) {\n        string str;\n        getline(cin, str);\n        int cursor = 0;\n        int M;\n        cin >> M;\n        cin.ignore();\n\n        while(M--) {\n            string cmdline;\n            getline(cin, cmdline);\n\n            int delim = cmdline.find(' ');\n            string cmd = cmdline.substr(0, delim);\n            string target = cmdline.substr(delim+1);\n            if(cmd == \"forward\") {\n                if(target == \"word\") {\n                    int start = str.find_first_not_of(' ', cursor);\n                    if(start == string::npos) {\n                        cursor = str.size();\n                        continue;\n                    }\n                    int end = str.find_first_of(' ', start);\n                    if(end == string::npos) {\n                        cursor = str.size();\n                        continue;\n                    }\n                    cursor = end;\n                }\n                else if(target == \"char\") {\n                    if(cursor < str.size()) ++cursor;\n                }\n                else {\n                    cerr << \"Unknown target in forward: \" << target << endl;\n                }\n            }\n            else if(cmd == \"backward\") {\n                if(target == \"word\") {\n                    int start = str.find_last_not_of(' ', cursor-1);\n                    if(start == string::npos) {\n                        cursor = 0;\n                        continue;\n                    }\n                    int end = str.find_last_of(' ', start);\n                    if(end == string::npos) {\n                        cursor = 0;\n                        continue;\n                    }\n                    cursor = end+1;\n                }\n                else if(target == \"char\") {\n                    if(cursor > 0) --cursor;\n                }\n                else {\n                    cerr << \"Unknown target in backward: \" << target << endl;\n                }\n            }\n            else if(cmd == \"delete\") {\n                if(target == \"word\") {\n                    int end = str.find_first_of(' ', cursor);\n                    if(end == string::npos) end = str.size();\n                    str.erase(cursor, end-cursor);\n                }\n                else if(target == \"char\") {\n                    if(cursor >= str.size()) continue;\n                    str.erase(cursor, 1);\n                }\n                else {\n                    cerr << \"Unknown target in delete: \" << target << endl;\n                }\n            }\n            else if(cmd == \"insert\") {\n                str = str.substr(0, cursor) + target.substr(1, target.find_last_of('\"')-1) + str.substr(cursor);\n                cursor += target.size()-2;\n            }\n            else {\n                //cerr << \"Unknown command: \" << cmd << endl;\n            }\n        }\n        cout << str.substr(0, cursor) << '^' << str.substr(cursor) << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nvector<string> split(string s, string t) {\n\tvector<string> r;\n\tint p = s.find(t);\n\tif (p != s.npos) {\n\t\tr.push_back(s.substr(0, p));\n\t\ts = s.substr(p+t.size());\n\t}\n\tr.push_back(s);\n\treturn r;\n}\n\nvoid output(string text, int cursor) {\n\tif ((int)text.size() == 0) cout << '^' << endl;\n\telse cout << text.substr(0, cursor) << '^' << text.substr(cursor) << endl;\n}\n\nint main() {\n\tint n; cin >> n;\n\tcin.ignore();\n\tint i = 0;\n\t\n\twhile (i<n) {\n\t\t// solver\n\t\tstring text;\n\t\tgetline(cin, text);\n\t\t\n\t\tint cursor = 0;\n\t\t\n\t\tint m; cin >> m;\n\t\tcin.ignore();\n\t\t\n\t\tfor (int j=0; j<m; j++) {\n\t\t\tstring command;\n\t\t\tgetline(cin, command);\n\t\t\t\n\t\t\tvector<string> com = split(command, \" \");\n\t\t\t\n\t\t\tif (com[0]==\"forward\") {\n\t\t\t\n\t\t\t\tif (com[1]==\"char\") {\n\t\t\t\t\n\t\t\t\t\tif (cursor < (int)text.size()) cursor++;\n\t\t\t\t\t\n\t\t\t\t} else if (com[1]==\"word\") {\n\t\t\t\t\n\t\t\t\t\tbool find = false;\n\t\t\t\t\tint k;\n\t\t\t\t\tfor (k=cursor; k<(int)text.size() && !find; k++) {\n\t\t\t\t\t\tif (text[k]==' ') {\n\t\t\t\t\t\t\tfind = true;\n\t\t\t\t\t\t\tcursor = k;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (!find) cursor = (int)text.size();\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t} else if (com[0]==\"backward\") {\n\t\t\t\n\t\t\t\tif (com[1]==\"char\") {\n\t\t\t\t\n\t\t\t\t\tif (cursor > 0) cursor--;\n\t\t\t\t\t\n\t\t\t\t} else if (com[1]==\"word\") {\n\t\t\t\t\n\t\t\t\t\tbool find = false;\n\t\t\t\t\tint k = cursor;\n\t\t\t\t\tfor (; k>=0 && !find; k--) {\n\t\t\t\t\t\tif (text[k]==' ') find = true;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (find) {\n\t\t\t\t\t\tbool find2 = false;\n\t\t\t\t\t\tfor (; k>=0 && !find2; k--) {\n\t\t\t\t\t\t\tif (text[k]==' ') {\n\t\t\t\t\t\t\t\tfind2 = true;\n\t\t\t\t\t\t\t\tcursor = k + 1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!find2) cursor = 0;\n\t\t\t\t\t\t\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcursor = 0;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t} else if (com[0]==\"insert\") {\n\t\t\t\t\n\t\t\t\tstring ins = com[1].substr(1, (int)com[1].size()-2);\n\t\t\t\ttext = text.substr(0, cursor) + ins + text.substr(cursor);\n\t\t\t\tcursor += (int)ins.size();\n\t\t\t\t\n\t\t\t} else if (com[0]==\"delete\") {\n\t\t\t\t\n\t\t\t\tif (com[1] == \"char\") {\n\t\t\t\t\t\n\t\t\t\t\tif (cursor < (int)text.size()) {\n\t\t\t\t\t\ttext = text.substr(0, cursor) + text.substr(cursor + 1);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t} else if (com[1]==\"word\") {\n\t\t\t\t\t\n\t\t\t\t\tint del = cursor + 1;\t\t\t\t\t\n\t\t\t\t\tfor (; del < (int)text.size(); del++) {\n\t\t\t\t\t\tif (text[del] == ' ') {\n\t\t\t\t\t\t\tdel++;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t\ttext = text.substr(0, cursor) + text.substr(del);\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t\t\n\t\t// output\n\t\toutput(text, cursor);\n\t\t\n\t\t\n\t\ti++;\n\t}\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <climits>\n#include <cmath>\n#include <ctime>\n#include <cassert>\n#include <iostream>\n#include <fstream>\n#include <sstream>\n#include <iomanip>\n#include <complex>\n#include <string>\n#include <vector>\n#include <list>\n#include <deque>\n#include <stack>\n#include <queue>\n#include <set>\n#include <map>\n#include <bitset>\n#include <iterator>\n#include <functional>\n#include <utility>\n#include <algorithm>\n#include <numeric>\n#include <typeinfo>\n\nusing namespace std;\n\n#define dump(n) cerr<<\"# \"<<#n<<\"=\"<<(n)<<endl\n#define repi(i,a,b) for(int i=int(a);i<int(b);i++)\n#define peri(i,a,b) for(int i=int(b);i-->int(a);)\n#define rep(i,n) repi(i,0,n)\n#define per(i,n) peri(i,0,n)\n#define iter(c) __typeof__((c).begin())\n#define foreach(i,c) for(iter(c) i=(c).begin();i!=(c).end();++i)\n#define allof(c) (c).begin(),(c).end()\n#define mp make_pair\n\ntypedef unsigned int uint;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef vector<double> vd;\ntypedef vector<vd> vvd;\ntypedef vector<string> vs;\ntypedef pair<int,int> pii;\n\nvoid solve()\n{\n\tlist<char> s;\n\t{\n\t\tstring t; getline(cin,t);\n\t\trep(i,t.size())\n\t\t\ts.push_back(t[i]);\n\t}\n\t\n\titer(s) it=s.begin();\n\tint n; scanf(\"%d \",&n);\n\twhile(n--){\n\t\tstring cmd; getline(cin,cmd);\n\t\tif(cmd==\"forward char\")\n\t\t\tif(it!=s.end())\n\t\t\t\t++it;\n\t\tif(cmd==\"forward word\")\n\t\t\twhile(it!=s.end() && *it!=' ')\n\t\t\t\t++it;\n\t\tif(cmd==\"backward char\")\n\t\t\tif(it!=s.begin())\n\t\t\t\t--it;\n\t\tif(cmd==\"backward word\")\n\t\t\twhile(it!=s.begin()){\n\t\t\t\t--it;\n\t\t\t\tif(*it==' '){\n\t\t\t\t\t++it;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\tif(cmd.substr(0,6)==\"insert\"){\n\t\t\tint i=cmd.find('\"')+1,j=cmd.find('\"',i);\n\t\t\ts.insert(it,cmd.begin()+i,cmd.begin()+j);\n\t\t}\n\t\tif(cmd==\"delete char\")\n\t\t\tif(it!=s.end())\n\t\t\t\tit=s.erase(it);\n\t\tif(cmd==\"delete word\"){\n\t\t\twhile(it!=s.end() && *it!=' ')\n\t\t\t\tit=s.erase(it);\n\t\t\twhile(it!=s.end() && *it==' ')\n\t\t\t\tit=s.erase(it);\n\t\t}\n\t}\n\tfor(iter(s) i=s.begin();;++i){\n\t\tif(i==it)\n\t\t\tcout<<'^';\n\t\tif(i==s.end())\n\t\t\tbreak;\n\t\tcout<<*i;\n\t}\n\tcout<<endl;\n}\n\nint main()\n{\n\tint t; scanf(\"%d \",&t);\n\twhile(t--)\n\t\tsolve();\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cmath>\nusing namespace std;\n\nint main()\n{\n    string bla = \"bla\";\n    cout<<bla.substr(3)<<endl;\n    int nb_cas;\n    cin>>nb_cas;\n    cin.ignore();\n    while(nb_cas--)\n    {\n        string texte;\n        getline(cin,texte);\n        int nb_op;\n        cin>>nb_op;\n        int curseur = 0;\n        for(int c=0;c<nb_op;c++)\n        {\n            string s1,s2;\n            cin>>s1;\n            cin.ignore();\n            getline(cin,s2);\n            if(s1==\"forward\"||s1==\"backward\")\n            {\n                int d = (s1==\"forward\"?1:-1);\n                if(s2==\"char\") curseur+=d;\n                else if(s2==\"word\")\n                {\n                    while(curseur>= 0 && curseur<=texte.size()&&(curseur == texte.size()||texte[curseur]==' ')) curseur+=d;\n                    while(curseur>=-0&&curseur<=texte.size()&&(curseur==texte.size()||texte[curseur]!=' '))\n                    {\n                        curseur += d;\n                    }\n                }\n                curseur = max(curseur,0);\n                curseur = min(curseur,(int)texte.size());\n            }\n            else if(s1==\"delete\")\n            {\n                if(s2==\"char\")\n                {\n                    texte = texte.substr(0,min(texte.size(),curseur))+texte.substr(min(curseur+1,(int)texte.size()));\n                }\n                else if(s2==\"word\")\n                {\n                    int finMot = curseur;\n                    while(finMot<texte.size()&&texte[finMot]==' ') finMot++;\n                    while(finMot<texte.size()&&texte[finMot]!=' ')\n                    {\n                        finMot ++;\n                    }\n                    texte = texte.substr(0,curseur)+(finMot < texte.size()?texte.substr(finMot):\"\");\n                }\n            }\n            else\n            {\n                s2 = s2.substr(1,s2.size()-2);\n                texte = texte.substr(0,curseur)+s2+(curseur<(int)texte.size()?texte.substr(curseur):\"\");\n                curseur += s2.size();\n            }\n        }\n        cout<<texte.substr(0,curseur)+\"^\"+(curseur<(int)texte.size()?texte.substr(curseur):\"\")<<endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\n \nusing namespace std;\n \n \nvoid input(string& s, vector<string>& v){\n  getline(cin,s);\n  int q;\n  cin >> q;\n  cin.ignore();\n  v.resize(q);\n  for(int i = 0; i < q; i++) getline(cin,v[i]);\n}\n \nbool isAlf(char c){ return 'A'<=c&&c<='Z'||'a'<=c&&c<='z';}\n \n//forward word\nvoid FW(const string& s, int& pos){\n  while(pos < (int)s.length() && s[pos] == ' ') pos++;\n  while(pos < (int)s.length() && s[pos] != ' ') pos++;\n}\n//backward word\nvoid BW(const string& s, int& pos){\n  while(pos > 0 && s[pos] == ' ') pos--;\n  while(pos > 0 && s[pos] != ' ') pos--;\n}\n \n//delete char\nvoid DC(string& s, int& pos){\n  if((int)s.length() <= pos) return;\n  s = s.substr(0,pos)+s.substr(pos+1);  \n}\n \n \n//delete word\nvoid DW(string& s, int pos){\n  if((int)s.length() <= pos) return;\n \n  int begin = pos;\n  while(s[begin] == ' ') begin++;\n  int end = begin;\n  while(s[end] != ' ') end++;\n  \n  if(begin >= s.length() || end >= s.length()) return;\n \n  string res = \"\";\n  for(int i = 0; i < (int)s.length(); i++)\n    if(!(begin <= i && i <= end)) res += s[i];\n \n  s = res;\n}\n \n//insert \nvoid insert(string& s, int& pos, string w){\n \n  w = w.substr(1,w.length()-2);\n   \n  string res = \"\";\n  \n  res += s.substr(0,pos);\n  res += w;\n  res += s.substr(pos);\n  s = res;\n \n  pos += w.length();\n}\n \nvoid solve(string& s, const vector<string>& v){\n  int pos = 0;\n \n  for(int i = 0; i < (int)v.size(); i++){\n    if(v[i] == \"forward char\") pos = min(pos+1,(int)s.length());\n    if(v[i] == \"forward word\") FW(s,pos);\n    if(v[i] == \"backward char\") pos = max(pos-1,0);\n    if(v[i] == \"backward word\") BW(s,pos);\n    if(v[i][0] == 'i') insert(s,pos,v[i].substr(7));\n    if(v[i] == \"delete char\") DC(s,pos);\n    if(v[i] == \"delete word\") DW(s,pos);\n    //  cout << s.substr(0,pos) << \"^\" << s.substr(pos) << endl;\n  }\n  cout << s.substr(0,pos) << \"^\" << s.substr(pos) << endl;\n}\n \nint main(){\n  int T;\n  cin >> T;\n  cin.ignore();\n  while(T--){\n    string txt;\n    vector<string> V;\n    input(txt,V);\n    solve(txt,V);\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <sstream>\n#include <string>\nusing namespace std;\n\nint GetForwardLast( int cs, string t )\n{\n    if ( cs == (int)t.size() ) return cs;\n\n    bool flag = false;\n    for ( int i = cs; i < (int)t.size(); i++ )\n    {\n        if ( t[i] == ' ' )\n        {\n            if ( flag )\n            {\n                return i;\n            }\n        }\n        else\n        {\n            flag = true;\n        }\n    }\n    return (int)t.size();\n}\n\nint GetBackwardFirst( int cs, string t )\n{\n    if ( cs == 0 ) return 0;\n\n    bool flag = false;\n    for ( int i = cs-1; i >= 0; i-- )\n    {\n        if ( t[i] == ' ' )\n        {\n            if ( flag )\n            {\n                return i + 1;\n            }\n        }\n        else\n        {\n            flag = true;\n        }\n    }\n    return 0;\n}\n\nint main( void )\n{\n    istringstream is;\n    string line;\n\n    getline( cin, line );\n    is.str( line );\n    int n;\n    is >> n;\n    is.clear();\n\n    for ( int i = 0; i < n; i++ )\n    {\n        int cs = 0;\n\n        getline( cin, line );\n        string text = line;\n\n        getline( cin, line );\n        is.str( line );\n        int m;\n        is >> m;\n        is.clear();\n\n        for ( int j = 0; j < m; j++ )\n        {\n            getline( cin, line );\n            string c = line;\n            is.str( c );\n            string c1, c2;\n            is >> c1;\n            getline( is, c2 );\n            c2 = c2.substr( 1 );\n            is.clear();\n\n            int cs_f = GetForwardLast( cs, text );\n            int cs_b = GetBackwardFirst( cs, text );\n\n            if ( c1 == \"forward\" )\n            {\n                if ( c2 == \"char\" )\n                {\n                    if ( cs + 1 <= (int)text.size() ) cs++;\n                }\n                else\n                {\n                    cs = cs_f;\n                }\n            }\n            else if ( c1 == \"backward\" )\n            {\n                if ( c2 == \"char\" )\n                {\n                    if ( cs - 1 >= 0 ) cs--;\n                }\n                else\n                {\n                    cs = cs_b;\n                }\n            }\n            else if ( c1 == \"insert\" )\n            {\n                string next;\n                string trim;\n                for ( int k = 1; k + 1 < (int)c2.size(); k++ ) trim += c2[k];\n                for ( int k = 0; k < cs; k++ ) next += text[k];\n                for ( int k = 0; k < (int)trim.size(); k++ ) next += trim[k];\n                for ( int k = cs; k < (int)text.size(); k++ ) next += text[k];\n                text = next;\n                cs += (int)trim.size();\n            }\n            else if ( c1 == \"delete\" )\n            {\n                if ( c2 == \"char\" )\n                {\n                    if ( cs < (int)text.size() )\n                    {\n                        string next = text.substr( 0, cs ) + text.substr( cs+1 );\n                        text = next;\n                    }\n                }\n                else\n                {\n                    if ( cs < (int)text.size() )\n                    {\n                        string next = text.substr( 0, cs ) + text.substr( cs_f );\n                        text = next;\n                    }\n                }\n            }\n        }\n\n        for ( int i = 0; i <= (int)text.size(); i++ )\n        {\n            if ( i == cs ) cout << \"^\";\n            if ( i < (int)text.size() ) cout << text[i];\n        }\n        cout << endl;\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <iostream>\n#include <string>\n#include <cmath>\n\nusing namespace std;\n\nint main(){    \n    int n;\n    cin>>n;\n    for(int i=0;i<n;i++){\n        string buf;\n        char c;\n        scanf(\"%c\", &c);\n\n        getline(cin,buf);\n       // cout << \"buf is \" << buf << endl;\n        int pos=0;\n        int cn;\n        cin>>cn;\n        for(int k=0;k<cn;k++){\n            string command;\n            cin >> command;\n            if(command==\"forward\"){\n                cin >> command;\n                if(command==\"char\"){\n                    if(!buf.empty())\n                    pos = min(pos+1,(int)buf.size());\n                }else{\n                    // word\n                    while(buf[pos]==' ' && pos < buf.size())pos++;\n                    while(buf[pos]!=' ' && pos < buf.size())pos++;\n                }\n            }else if(command==\"backward\"){\n                cin >> command;\n                if(command==\"char\"){\n                    pos = max(pos-1,0);\n                }else{\n                    // word\n                    while(buf[pos]==' ' && pos > 0)pos--;\n                    while(buf[pos]!=' ' && pos > 0)pos--;\n                }\n            }else if(command==\"insert\"){\n                getline(cin,command);\n                ungetc('\\n',stdin);\n                string text;\n                bool f= false;\n                for(int i=0;i<command.size();i++){\n                    if(f&&command[i]=='\\\"')break;\n                    if(f)text.push_back(command[i]);\n                    if(command[i]=='\\\"')f=true;\n                }\n                buf.insert(pos,text);\n                pos+= text.size();\n            }else {//delete\n                cin >> command;\n                if(command== \"char\"){\n                    if(!buf.empty()&&pos!=buf.size()){\n                        buf.erase(pos,1);\n                    }\n\n                }else{\n                    if(!buf.empty()){\n                        int t=pos;\n                        while(t<buf.size() && buf[t]==' ')t++;\n                        while(t<buf.size() && buf[t]!=' ')t++;\n                        while(t<buf.size() && buf[t]==' ')t++;\n\n                        buf.erase(pos,t-pos);\n                    }\n                }\n            }\n        }\n        //cout << buf << \"****\" << endl;\n        if(buf.empty()){\n            printf(\"^\\n\");\n        }else{\n        for(int p=0;p<buf.size();p++){\n            if(pos==p)printf(\"^\");\n            printf(\"%c\",buf[p]);\n        }\n\n        if(pos==buf.size())printf(\"^\");\n        printf(\"\\n\");\n        }\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <string>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n\nclass text_editor {\nprivate:\n\tstring text;\npublic:\n\n\tvoid read_text(istream &in) {\n\t\tstring line;\n\t\tgetline(in,line);\n\t\tthis->text = \"^\" + line;\n\t}\n\n\tvoid forward_char() {\n\t\tauto cursor_pos = find(this->text.begin(),this->text.end(),'^');\n\t\tif (this->text.back() != *cursor_pos) { // if cursor not at the end of text\n\t\t\tswap(*cursor_pos,*(cursor_pos+1));\n\t\t}\n\t}\n\n\tvoid forward_word() {\n\t\tauto cursor_pos = find(this->text.begin(),this->text.end(),'^');\n\t\twhile (this->text.back() != *cursor_pos && *(cursor_pos+1) == ' ') {\n\t\t\tswap(*cursor_pos,*(cursor_pos+1));\n\t\t\t++cursor_pos;\n\t\t}\n\t\twhile (this->text.back() != *cursor_pos && *(cursor_pos+1) != ' ') {\n\t\t\tswap(*cursor_pos,*(cursor_pos+1));\n\t\t\t++cursor_pos;\n\t\t}\n\t}\n\n\tvoid backward_char() {\n\t\tauto cursor_pos = find(this->text.begin(),this->text.end(),'^');\n\t\tif (this->text.front() != *cursor_pos) {\n\t\t\tswap(*cursor_pos,*(cursor_pos-1));\n\t\t}\n\t}\n\n\tvoid backward_word() {\n\t\tauto cursor_pos = find(this->text.begin(),this->text.end(),'^');\n\t\twhile (this->text.front() != *cursor_pos && *(cursor_pos-1) == ' ') {\n\t\t\tswap(*cursor_pos,*(cursor_pos-1));\n\t\t\t--cursor_pos;\n\t\t}\n\t\twhile (this->text.front() != *cursor_pos && *(cursor_pos-1) != ' ') {\n\t\t\tswap(*cursor_pos,*(cursor_pos-1));\n\t\t\t--cursor_pos;\n\t\t}\n\t}\n\n\tvoid delete_char() {\n\t\tauto cursor_pos = find(this->text.begin(),this->text.end(),'^');\n\t\tif (this->text.back() != *cursor_pos) {\n\t\t\tthis->text.erase(cursor_pos+1);\n\t\t}\n\t}\n\n\tvoid delete_word() {\n\t\tauto cursor_pos = find(this->text.begin(),this->text.end(),'^');\n\t\tthis->text.erase(cursor_pos+1,find(cursor_pos+1,this->text.end(),' '));\n\t}\n\n\tvoid insert_any_text(string any_text) {\n\t\tthis->text.insert(this->text.find('^'),any_text);\n\t}\n\n\tstring get_text() {\n\t\treturn this->text;\n\t}\n};\n\nint main() {\n\ttext_editor edtr;\n\tint n; // number of texts\n\tcin >> n;\n\tcin.ignore();\n\twhile (n--) {\n\t\tedtr.read_text(cin);\n\t\tint cmd_num; // number of commands\n\t\tcin >> cmd_num;\n\t\tcin.ignore();\n\t\twhile (cmd_num--) {\n\t\t\tstring cmd;\n\t\t\tgetline(cin,cmd);\n\t\t\tif (cmd == \"forward char\") {\n\t\t\t\tedtr.forward_char();\n\t\t\t} else if (cmd == \"forward word\") {\n\t\t\t\tedtr.forward_word();\n\t\t\t} else if (cmd == \"backward char\") {\n\t\t\t\tedtr.backward_char();\n\t\t\t} else if (cmd == \"backward word\") {\n\t\t\t\tedtr.backward_word();\n\t\t\t} else if (cmd == \"delete char\") {\n\t\t\t\tedtr.delete_char();\n\t\t\t} else if (cmd == \"delete word\") {\n\t\t\t\tedtr.delete_word();\n\t\t\t} else { // insert \"any-text\"\n\t\t\t\tauto first_quot = cmd.find_first_of(\"\\\"\");\n\t\t\t\tauto last_quot = cmd.find_last_of(\"\\\"\");\n\t\t\t\tedtr.insert_any_text(cmd.substr(first_quot+1,last_quot - first_quot - 1));\n\t\t\t}\n\t\t}\n\t\tcout << edtr.get_text() << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <fstream>\n#include <algorithm>\n#include <bitset>\n#include <cassert>\n#include <cctype>\n#include <cmath>\n#include <complex>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <ctime>\n#include <deque>\n#include <iomanip>\n#include <map>\n#include <numeric>\n#include <queue>\n#include <set>\n#include <stack>\n#include <sstream>\n#include <string>\n#include <vector>\nusing namespace std;\n\n#pragma comment(linker, \"/STACK:400000000\")\n\n#define EPS 1e-9\n#define INF MOD\n#define MOD 1000000007LL\n#define fir first\n#define foreach(it,X) for(it=X.begin();it!=X.end();it++)\n#define iss istringstream\n#define ite iterator\n#define ll long long\n#define mp make_pair\n#define rep(i,n) rep2(i,0,n)\n#define rep2(i,m,n) for(int i=m;i<n;i++)\n#define pi pair<int,int>\n#define pb push_back\n#define sec second\n#define sh(i) (1LL<<i)\n#define sst stringstream\n#define sz size()\n#define vi vector<int>\n#define vc vector\n#define vl vector<ll>\n#define vs vector<string>\n\nint T,M;\nstring s;\n\nint main(){\n\tcin>>T;\n    getline(cin,s);\n    rep(tc,T){\n        getline(cin,s);\n        cin>>M;\n        string t;\n        getline(cin,t);\n        int cur=0;\n        rep(h,M){\n            getline(cin,t);\n            \n            if(t[0]=='f' && t[8]=='c'){\n                cur=min(cur+1,(int)s.sz);\n            }\n            if(t[0]=='f' && t[8]=='w'){\n                int mode=0;\n                rep2(i,cur,s.sz+1){\n                    if(i==s.sz)cur=s.sz;\n                    if(s[i]==' '){\n                        if(mode==1){\n                            cur=i;break;\n                        }\n                    }else mode=1;\n                }\n            }\n            \n            if(t[0]=='b' && t[9]=='c'){\n                cur=max(cur-1,0);\n            }\n            if(t[0]=='b' && t[9]=='w'){\n                int mode=0;\n                for(int i=cur-1;i>=-1;i--){\n                    if(i==-1)cur=0;\n                    if(s[i]==' '){\n                        if(mode==1){\n                            cur=i+1;break;\n                        }\n                    }else mode=1;\n                }\n            }\n            \n            if(t[0]=='i'){\n                string u=t.substr(8,t.sz-9);\n                string s1=s.substr(0,cur);\n                string s2=s.substr(cur);\n                s=s1+u+s2;\n                cur+=u.sz;\n            }\n            \n            if(t[0]=='d' && t[7]=='c')if(cur<s.sz){\n                string s1=s.substr(0,cur);\n                string s2=s.substr(cur+1);\n                s=s1+s2;\n            }\n            if(t[0]=='d' && t[7]=='w'){\n                int mode=0;\n                rep2(i,cur,s.sz+1){\n                    if(s[i]==' ' || i==s.sz){\n                        if(mode==1){\n                            string s1=s.substr(0,cur);\n                            string s2=s.substr(i);\n                            s=s1+s2;\n                            break;\n                        }\n                    }else mode=1;\n                }\n            }\n            \n            //cout<<cur<<\"/\"<<s.sz<<endl<<s<<endl;\n        }\n        cout<<s.substr(0,cur)<<\"^\"<<s.substr(cur)<<endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nbool ischr(int c) {\n\tif (c >= 'A' && c <= 'Z') return true;\n\tif (c >= 'a' && c <= 'z') return true;\n\tif (c >= '0' && c <= '9') return true;\n\tif (c == ',' || c == '.') return true;\n\treturn false;\n}\n\nint main() {\n\tint n;\n\tstring buf, cmd, dum;\n\tcin >> n;\n\tgetline(cin, dum);\n\tfor (int i = 0; i < n; i++) {\n\t\tint cur = 1, m;\n\t\tgetline(cin, buf);\n\t\tbuf = \"$\" + buf;\n\t\tcin >> m;\n\t\tgetline(cin, dum);\n\t\tfor (int j = 0; j < m; j++) {\n\t\t\tgetline(cin, cmd);\n\t\t\tif (cmd.substr(0, 8) == \"forward \") {\n\t\t\t\tstring subcmd = cmd.substr(8, 4);\n\t\t\t\tif (subcmd == \"char\") {\n\t\t\t\t\tif (buf[cur] != '\\0') cur++;\n\t\t\t\t} else if (subcmd == \"word\") {\n\t\t\t\t\twhile (buf[cur] == ' ') cur++;\n\t\t\t\t\twhile (ischr(buf[cur])) cur++;\n\t\t\t\t}\n\t\t\t} else if (cmd.substr(0, 9) == \"backward \") {\n\t\t\t\tstring subcmd = cmd.substr(9, 4);\n\t\t\t\tif (subcmd == \"char\") {\n\t\t\t\t\tif (cur > 1) cur--;\n\t\t\t\t} else if (subcmd == \"word\") {\n\t\t\t\t\tdo cur--; while (buf[cur] == ' ');\n\t\t\t\t\twhile (ischr(buf[cur])) cur--;\n\t\t\t\t\tcur++;\n\t\t\t\t}\n\t\t\t} else if (cmd.substr(0, 7) == \"insert \") {\n\t\t\t\tint begin = cmd.find_first_of(\"\\\"\")+1;\n\t\t\t\tint end = cmd.find_last_of(\"\\\"\");\n\t\t\t\tstring ins = cmd.substr(begin, end-begin);\n\t\t\t\tbuf = buf.substr(0, cur) + ins + buf.substr(cur);\n\t\t\t\tcur += ins.size();\n\t\t\t} else if (cmd.substr(0, 7) == \"delete \") {\n\t\t\t\tstring subcmd = cmd.substr(7, 4);\n\t\t\t\tif (subcmd == \"char\") {\n\t\t\t\t\tif (buf[cur] != '\\0')\n\t\t\t\t\t\tbuf = buf.substr(0, cur) + buf.substr(cur+1);\n\t\t\t\t} else if (subcmd == \"word\") {\n\t\t\t\t\tint tail = cur;\n\t\t\t\t\twhile (buf[tail] == ' ') tail++;\n\t\t\t\t\twhile (ischr(buf[tail])) tail++;\n\t\t\t\t\tbuf = buf.substr(0, cur) + buf.substr(tail);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (int i = 1; ; i++) {\n\t\t\tif (i == cur)\n\t\t\t\tcout << \"^\";\n\t\t\tif (i >= buf.size())\n\t\t\t\tbreak;\n\t\t\tcout << buf[i];\n\t\t}\n\t\tcout << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\n#include<unordered_map>\n#include<unordered_set>\n#pragma warning(disable:4996)\nusing namespace std;\nusing ld = long double;\nconst ld eps = 1e-9;\n\n//// < \"d:\\d_download\\visual studio 2015\\projects\\programing_contest_c++\\debug\\a.txt\" > \"d:\\d_download\\visual studio 2015\\projects\\programing_contest_c++\\debug\\b.txt\"\n\nvoid pr(string st, int i) {\n\tfor (int c = 0; c < st.size(); ++c) {\n\t\tif (c == i)cout << '^';\n\t\tcout << st[c];\n\t}\n\tif (i == st.size())cout << '^';\n\tcout << endl;\n}\n\nint main() {\n\tint N; cin >> N;\n\tstring dummy;\n\tgetline(cin, dummy);\n\twhile (N--) {\n\t\tstring st;\n\t\tgetline(cin, st);\n\t\tint M; cin >> M;\n\t\tint i = 0;\n\t\tgetline(cin, dummy);\n\t\twhile (M--) {\n\t\t\tstring order; getline(cin, order);\n\t\t\tif (order == \"forward char\") {\n\t\t\t\tif (i != st.size())i++;\n\t\t\t}\n\t\t\telse if (order == \"forward word\") {\n\t\t\t\twhile (i != st.size() && st[i] == ' ') {\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t\twhile (i != st.size()&&st[i]!=' ') {\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (order == \"backward char\") {\n\t\t\t\tif (i)i--;\n\t\t\t}\n\t\t\telse if (order == \"backward word\") {\n\t\t\t\twhile (i && st[i - 1] == ' ') {\n\t\t\t\t\ti--;\n\t\t\t\t}\n\t\t\t\twhile (i && st[i-1] != ' ') {\n\t\t\t\t\ti--;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (order == \"delete char\") {\n\t\t\t\tif (i != st.size()) {\n\t\t\t\t\tst.erase(i,1);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (order == \"delete word\") {\n\t\t\t\tif (st.find_first_not_of(' ',i) != string::npos) {\n\t\t\t\t\twhile (i != st.size() && st[i] == ' ') {\n\t\t\t\t\t\tst.erase(i, 1);\n\t\t\t\t\t}\n\t\t\t\t\twhile (i != st.size() && st[i] != ' ') {\n\t\t\t\t\t\tst.erase(i, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\telse {\n\t\t\t\tstring ins = order.substr(order.find(' ') + 2, order.size()-3- order.find(' '));\n\t\t\t\tst.insert(i, ins);\n\t\t\t\ti += ins.size();\n\t\t\t}\n\n\t\t\tpr(st, i);\n\t\t}\n\t\tpr(st, i);\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\n#include<algorithm>\n#include<cmath>\n#include<cassert>\n#include<sstream>\n#define REP(i,s,n) for(int i=s;i<n;i++)\n#define rep(i,n) REP(i,0,n)\n#define inf (1<<28)\n\nusing namespace std;\nint cursor;\n\nvoid ForwardChar(string &message)\n{\n  assert(message[cursor] == '^');\n  string tmp = \"\";\n  bool found = false;\n  rep(i,message.size())\n    {\n      if(message[i] == '^')\n\t{\n\t  found = true;\n\t  continue;\n\t}\n\n      tmp += message[i];\n      if(found)\n\t{\n\t  tmp += \"^\";\n\t  found = false;\n\t}\t\n    }\n  if(found)tmp += \"^\",cursor--;\n  cursor++;\n  message = tmp;\n}\n\nvoid ForwardWord(string &message)\n{\n  assert(message[cursor] == '^');\n  string tmp = \"\";\n  bool cursor_found = false;\n  bool word_found = false;\n  rep(i,message.size())\n    {\n      if(message[i] == '^')\n\t{\n\t  cursor_found = true;\n\t  continue;\n\t}\n      if(cursor_found && word_found && message[i] == ' ')\n\t{\n\t  cursor_found = word_found = false;\n\t  tmp += \"^\";\n\t  cursor = tmp.size()-1;\n\t}\n      tmp += message[i];\n      if(cursor_found && message[i] != ' ')\n\t{\n\t  word_found = true;\n\t}\n    }\n  if(cursor_found)\n    {\n      tmp += \"^\";\n      cursor = tmp.size()-1;\n    }\n  message = tmp;\n\n}\n\nvoid BackwardChar(string &message)\n{\n  assert(message[cursor] == '^');\n  int last = message.size();\n  string tmp = \"\";\n  bool found = false;\n  for(int i=last-1;i>=0;i--)\n    {\n      if(message[i] == '^')\n\t{\n\t  found = true;\n\t  continue;\n\t}\n\n      tmp += message[i];\n\n      if(found)\n\t{\n\t  found = false;\n\t  tmp += \"^\";\n\t  cursor--;\n\t}\n    }\n  if(found)tmp += \"^\";\n  reverse(tmp.begin(),tmp.end());\n  message = tmp;\n}\n\nvoid BackwardWord(string &message)\n{\n  assert(message[cursor] == '^');\n  string tmp = \"\";\n  bool cursor_found = false;\n  bool word_found = false;\n  for(int i=message.size()-1;i>=0;i--)\n    {\n      if(message[i] == '^')\n\t{\n\t  cursor_found = true;\n\t  continue;\n\t}\n      if(cursor_found && word_found && message[i] == ' ')\n\t{\n\t  cursor_found = word_found = false;\n\t  tmp += \"^\";\n\t}\n      tmp += message[i];\n      if(cursor_found && message[i] != ' ')\n\t{\n\t  word_found = true;\n\t}\n    }\n  if(cursor_found)\n    {\n      tmp += \"^\";\n    }\n  reverse(tmp.begin(),tmp.end());\n  message = tmp;\n  rep(i,message.size())\n    if(message[i] == '^')\n      {\n\tcursor = i;\n\tbreak;\n      }\n}\n\nvoid Insert(string &message,string text)\n{\n  assert(message[cursor] == '^');\n  string tmp = \"\";\n  rep(i,message.size())\n    {\n      if(message[i] == '^')\n\t{\n\t  tmp += text + \"^\";\n\t  cursor += text.size();\n\t  continue;\n\t}\n      tmp += message[i];\n    }\n  message = tmp;\n\n}\n\nvoid DeleteChar(string &message)\n{\n  assert(message[cursor] == '^');\n  bool found = false;\n  string tmp = \"\";\n  rep(i,message.size())\n    {\n      if(message[i] == '^')\n\t{\n\t  found = true;\n\t  tmp += \"^\";\n\t  continue;\n\t}\n      if(!found)\n\ttmp += message[i];\n      else\n\tfound = false;\n    }\n  message = tmp;\n}\n\nvoid DeleteWord(string &message)\n{\n  assert(message[cursor] == '^');\n\n  bool ok = false;\n  bool ok2 = false;\n  for(int i=message.size()-1;i>=0;i--)\n    {\n      if(message[i] != ' ' && message[i] != '^')ok = true;\n      if(ok && message[i] == '^')\n\t{\n\t  ok2 = true;\n\t  break;\n\t}\n    }\n  if(!ok2)return;\n  string tmp = \"\";\n  bool cursor_found = false;\n  bool word_found = false;\n  rep(i,message.size())\n    {\n      if(message[i] == '^')\n\t{\n\t  tmp += \"^\";\n\t  cursor_found = true;\n\t  continue;\n\t}\n\n      if(!cursor_found)\n\t{\n\t  tmp += message[i];\n\t}\n      else if(cursor_found && message[i] != ' ')\n\t{\n\t  word_found = true;\n\t}      \n      else if(cursor_found && word_found && message[i] == ' ')\n\t{\n\t  cursor_found = word_found = false;\n\t  tmp += message[i];\n\t}\n    }\n\n  message = tmp;\n}\n\n\n\nint main()\n{\n  int T,n;\n  cin >>T;\n  cin.ignore();\n\n  while(T--)\n    {\n      cursor = 0;\n\n      string line;\n      getline(cin,line);\n\n      line = \"^\" + line;\n      cin >> n;\n      cin.ignore();\n      string o1,o2;\n      rep(_,n)\n\t{\n\n\t  cin >> o1;\n\t  cin.ignore();\n\t  getline(cin,o2);\n\t  if(o1 == \"forward\")\n\t    {\n\t      if(o2 == \"char\")\n\t\t{\n\t\t  ForwardChar(line);\n\t\t}\n\t      else if(o2 == \"word\")\n\t\t{\n\t\t  ForwardWord(line);\n\t\t}\n\t      else assert(false);\n\t    }\n\t  else if(o1 == \"backward\")\n\t    {\n\t      if(o2 == \"char\")\n\t\t{\n\t\t  BackwardChar(line);\n\t\t}\n\t      else if(o2 == \"word\")\n\t\t{\n\t\t  BackwardWord(line);\n\t\t}\n\t      else assert(false);\n\t    }\n\t  else if(o1 == \"insert\")\n\t    {\n\t      o2 = o2.substr(1,o2.size()-2);\n\t      Insert(line,o2);\n\t    }\n\t  else if(o1 == \"delete\")\n\t    {\n\t      if(o2 == \"char\")\n\t\t{\n\t\t  DeleteChar(line);\n\t\t}\n\t      else if(o2 == \"word\")\n\t\t{\n\t\t  DeleteWord(line);\n\t\t}\n\t    }\n\t  else \n\t    {\n\t      assert(false);\n\t    }\n\t}\n      cout << line << endl;\n\n    }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\nint main() {\n\tint N;\n\tcin >> N;\n\tcin.ignore();\n\twhile (N--)\n\t{\n\t\tstring buf;\n\t\tgetline(cin, buf);\n\t\tstring::iterator cur = buf.begin();\n\n\t\tint n;\n\t\tcin >> n;\n\n\t\twhile (n--)\n\t\t{\n\t\t\tstring cmd, arg;\n\t\t\tcin >> cmd;\n\t\t\tcin.ignore();\n\t\t\tgetline(cin, arg);\n\n\t\t\tif (cmd == \"forward\")\n\t\t\t{\n\t\t\t\tif (arg == \"char\" && cur != buf.end()) cur++;\n\t\t\t\telse cur = find(cur, buf.end(), ' ');\n\t\t\t}\n\t\t\telse if (cmd == \"backward\")\n\t\t\t{\t\t\t\n\t\t\t\tif (arg == \"char\" && cur != buf.begin()) cur--;\n\t\t\t\telse\n\t\t\t\t\twhile (cur != buf.begin()) {\n\t\t\t\t\t\tcur--;\n\t\t\t\t\t\tif (*cur == ' ') { cur++; break; }\n\t\t\t\t\t}\n\t\t\t}\n\t\t\telse if (cmd == \"delete\")\n\t\t\t{\n\t\t\t\tif (arg == \"char\" && cur != buf.end())\n\t\t\t\t{\n\t\t\t\t\tsize_t pos = cur - buf.begin();\n\t\t\t\t\tbuf = string(buf.begin(), cur) + string(cur+1, buf.end());\n\t\t\t\t\tcur = buf.begin() + pos;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tif (cur != buf.end())\n\t\t\t\t\t{\n\t\t\t\t\t\tsize_t pos = cur - buf.begin();\n\t\t\t\t\t\tstring::iterator t = find(cur, buf.end(), ' ');\n\t\t\t\t\t\tif (t == buf.end())\tbuf = string(buf.begin(), cur);\n\t\t\t\t\t\telse buf = string(buf.begin(), cur) + string(t+1, buf.end());\n\t\t\t\t\t\tcur = buf.begin() + pos;\n\t\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tsize_t pos = cur - buf.begin() + arg.size() - 2;\n\t\t\t\tbuf = string(buf.begin(), cur) + string(arg.begin()+1, arg.end()-1) + string(cur, buf.end());\n\t\t\t\tcur = buf.begin() + pos;\n\t\t\t}\n\t\t}\n\t\tcout << string(buf.begin(), cur) << '^' << string(cur, buf.end()) << endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstdlib>\n#include <cmath>\n#include <climits>\n#include <cfloat>\n#include <map>\n#include <utility>\n#include <set>\n#include <iostream>\n#include <memory>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <functional>\n#include <sstream>\n#include <complex>\n#include <stack>\n#include <queue>\n#include <cstring>\n#include <sstream>\n#ifndef M_PI\n#define M_PI 3.1415926535897932384626433832795\n#endif\nusing namespace std;\nstatic const double EPS = 1e-5;\ntypedef long long ll;\ntypedef pair<int,int> PI;\n#define rep(i,n) for(int i=0;i<(int)n;++i)\n#define FOR(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i)\n#define ALL(c) (c).begin(), (c).end()\n#define mp(a,b) make_pair(a,b)\n#define pb(a) push_back(a)\n#define F first\n#define S second\n\nint dx[]={0,1,0,-1};\nint dy[]={1,0,-1,0};\n\nstring in;\nint pos;\n\n\nmain(){\n  int n;\n  cin>>n;\n  cin.ignore();\n  while(n--){\n    pos=0;\n    getline(cin,in);\n    int t;\n    cin>>t;\n    cin.ignore();\n    while(t--){\n      string com;\n      getline(cin,com);\n      if(com==\"forward char\" && pos<in.size())++pos;\n      else if(com==\"backward char\" && pos)--pos;\n      else if(com==\"forward word\"){\n\twhile(pos<in.size() && in[pos]==' ')++pos;\n\twhile(pos<in.size() && in[pos]!=' ')++pos;\n      }else if(com==\"backward word\"){\n\twhile(pos && in[pos]!=' ')--pos;\n      }else if(com[0]=='i'){\n\tin.insert(pos,com.substr(8,com.size()-9));\n\tpos+=com.size()-9;\n      }else if(com==\"delete char\"){\n\tin.erase(pos,1);\n      }else if(com==\"delete word\"){\n\tint sz=0;\n\twhile(pos+sz<in.size() && in[pos+sz]!=' ')++sz;\n\tin.erase(pos,sz);\n      }\n    }\n    rep(i,in.size()){\n      if(i==pos)cout<<'^';\n      cout<<in[i];\n    }\n    if(pos==in.size())cout<<'^';\n    cout<<endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <cassert>\n#include <iostream>\n#include <cstdio>\n#include <vector>\n#include <algorithm>\n#include <complex>\n#include <cstring>\n#include <cstdlib>\n#include <string>\n#include <cmath>\n#include <queue>\n#include <set>\n#include <map>\nusing namespace std;\n\n#define REP(i,n) for(int i=0;i<(int)n;++i)\n#define FOR(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i)\n#define ALL(c) (c).begin(), (c).end()\nconst int INF = 1<<29;\n\nvoid forwardChar(string &s, int &c) {\n  if (c != s.size()) c++;\n}\nvoid forwardWord(string &s, int &c) {\n  for (;c<s.size()&&s[c]==' ';++c);\n  for (;c<s.size()&&s[c]!=' ';++c);\n}\nvoid backwardChar(string &s, int &c) {\n  if (c) c--;\n}\nvoid backwardWord(string &s, int &c) {\n  for (;c>0&&s[c-1]==' ';--c);\n  for (;c>0&&s[c-1]==' ';--c);\n}\nvoid insertText(string &s, int &c, const string &t) {\n  s = s.substr(0,c) + t + s.substr(c);\n  c += t.size();\n}\nvoid deleteChar(string &s, int &c) {\n  if (c != s.size()) s.erase(s.begin()+c);\n}\nvoid deleteWord(string &s, int &c) {\n  bool state = 0;\n  int p = c;\n  for (; p<s.size()&&s[p]==' '; ++p);\n  if (p==s.size()) return;\n  for (; p<s.size()&&s[p]!=' '; ++p);\n  if (p>c) s.erase(c,p-c);\n}\n\nint main() {\n  int n;\n  cin >> n;\n  cin.ignore();\n  while(n--) {\n    string text;\n    getline(cin, text);\n    int m; cin >> m; cin.ignore();\n    // cout << m << endl;\n    // cout << text << endl;\n    int cursor = 0;\n    while(m--) {\n      string op1, op2;\n      cin >> op1;\n      cin.ignore();\n      getline(cin,op2);\n      // cout << op1 << \" : \" << op2 << endl;\n      \n      if (op1[0] == 'f') {\n        if (op2[0] == 'c') forwardChar(text, cursor);\n        else forwardWord(text, cursor);\n      } else if (op1[0] == 'b') {\n        if (op2[0] == 'c') backwardChar(text, cursor);\n        else backwardWord(text, cursor);\n      } else if (op1[0] == 'i') {\n        assert(op2[0]=='\"' && op2[op2.size()-1]=='\"');\n        op2 = op2.substr(1, op2.size()-2);\n        insertText(text, cursor, op2);\n      } else if (op1[0] == 'd') {\n        if (op2[0] == 'c') deleteChar(text, cursor);\n        else deleteWord(text, cursor);\n      } else {\n        assert(0);\n      }\n      // cout << text << \" \" << cursor << endl;\n    }\n\n    text = text.substr(0,cursor) + \"^\" + text.substr(cursor);\n    cout << text << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<vector>\nusing namespace std;\n\nint main(){\n  int n;\n  cin >>n;\n  cin.ignore();\n  for(int i=0;i<n;i++){\n    string str;\n    int cn,pos;\n    if(!getline(cin,str)){\n      str = \"\";\n    }\n    cin >> cn;\n    pos = 0;\n    for(int j=0;j<cn;j++){\n      string command,target;\n      char ch;\n      cin >> command;\n      getline(cin,target);\n      target.erase(0,1);\n      if(command == \"forward\"){\n        if(target == \"word\"){\n          do{\n            pos++;\n          }while(pos<str.size()&&str[pos]!=' ');\n        }else{\n          pos++;\n        }\n      }else if(command == \"delete\"){\n        if(str.size()!=0){\n          if(target == \"word\"){\n            do{\n              str.erase(pos,1);\n            }while(str[pos]!=' ');\n          }else{\n            str.erase(pos,1);\n          }\n        }\n      }else if(command == \"backward\"){\n        if(target == \"word\"){\n          do{\n            pos--;\n          }while(pos>0&&str[pos]!=' ');\n        }else{\n          pos--;\n        }\n      }else if(command == \"insert\"){\n        target = target.substr(1,target.size()-2);\n        str.insert(pos,target);\n        pos += target.size();\n      }\n      /*\n        if(pos>=str.size()){\n        pos = str.size() -1;\n        }else if(pos<0){\n        pos = 0;\n        }\n      */\n      cout << str << endl;\n    }\n    str.insert(pos,\"^\");\n    cout << str << endl;\n  }\n  \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint main() {\n    int N;\n    cin >> N;\n    cin.ignore();\n\n    while(N--) {\n        string str;\n        getline(cin, str);\n        int cursor = 0;\n        int M;\n        cin >> M;\n        cin.ignore();\n\n        while(M--) {\n            string cmdline;\n            getline(cin, cmdline);\n\n            int delim = cmdline.find(' ');\n            string cmd = cmdline.substr(0, delim);\n            string target = cmdline.substr(delim+1);\n            if(cmd == \"forward\") {\n                if(target == \"word\") {\n                    while(cursor < str.size() && str[cursor] == ' ') ++cursor;\n                    while(cursor < str.size() && str[cursor] != ' ') ++cursor;\n                }\n                else if(target == \"char\") {\n                    if(cursor < str.size()) ++cursor;\n                }\n                else {\n                    cerr << \"Unknown target in forward: \" << target << endl;\n                }\n            }\n            else if(cmd == \"backward\") {\n                if(target == \"word\") {\n                    if(cursor > 0) --cursor;\n                    while(cursor > 0 && str[cursor] == ' ') --cursor;\n                    while(cursor > 0 && str[cursor] != ' ') --cursor;\n                    if(str[cursor] == ' ' && str[cursor+1] != ' ') ++cursor;\n                }\n                else if(target == \"char\") {\n                    if(cursor > 0) --cursor;\n                }\n                else {\n                    cerr << \"Unknown target in backward: \" << target << endl;\n                }\n            }\n            else if(cmd == \"delete\") {\n                if(target == \"word\") {\n                    int idx = cursor;\n                    bool ok = false;\n                    while(idx < str.size() && str[idx] == ' ') ++idx;\n                    while(idx < str.size() && str[idx] != ' ') {++idx; ok = true; }\n                    if(ok) {\n                        str.erase(cursor, idx-cursor);\n                    }\n                }\n                else if(target == \"char\") {\n                    if(cursor >= str.size()) continue;\n                    str.erase(cursor, 1);\n                }\n                else {\n                    cerr << \"Unknown target in delete: \" << target << endl;\n                }\n            }\n            else if(cmd == \"insert\") {\n                str = str.substr(0, cursor) + target.substr(1, target.size()-2) + str.substr(cursor);\n                cursor += target.size()-2;\n            }\n            else {\n                //cerr << \"Unknown command: \" << cmd << endl;\n            }\n            //cout << cmdline << endl;\n            //cout << \"\\t\" << str.substr(0, cursor) << '^' << str.substr(cursor) << endl;\n        }\n        cout << str.substr(0, cursor) << '^' << str.substr(cursor) << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <iostream>\n#include <string>\n#include <cmath>\n\nusing namespace std;\n\nint main(){    \n    int n;\n    cin>>n;\n    for(int i=0;i<n;i++){\n        string buf;\n        char c;\n        scanf(\"%c\", &c);\n\n        getline(cin,buf);\n       // cout << \"buf is \" << buf << endl;\n        int pos=0;\n        int cn;\n        cin>>cn;\n        for(int k=0;k<cn;k++){\n            string command;\n            cin >> command;\n            if(command==\"forward\"){\n                cin >> command;\n                if(command==\"char\"){\n                    if(!buf.empty())\n                    pos = min(pos+1,(int)buf.size());\n                }else{\n                    // word\n                    while(pos < buf.size()&& buf[pos]==' ')pos++;\n                    while(pos < buf.size()&& buf[pos]!=' ')pos++;\n                }\n            }else if(command==\"backward\"){\n                cin >> command;\n                if(command==\"char\"){\n                    pos = max(pos-1,0);\n                }else{\n                    // word\n                    while(pos > 0 && buf[pos-1]==' ' )pos--;\n                    while(pos > 0 && buf[pos-1]!=' ')pos--;\n                }\n            }else if(command==\"insert\"){\n                getline(cin,command);\n                ungetc('\\n',stdin);\n                string text;\n                bool f= false;\n                for(int i=0;i<command.size();i++){\n                    if(f&&command[i]=='\\\"')break;\n                    if(f)text.push_back(command[i]);\n                    if(command[i]=='\\\"')f=true;\n                }\n                buf.insert(pos,text);\n                pos+= text.size();\n            }else {//delete\n                cin >> command;\n                if(command== \"char\"){\n                    if(!buf.empty()&&pos!=buf.size()){\n                        buf.erase(pos,1);\n                    }\n\n                }else{\n                    if(!buf.empty()){\n                        int t=pos;\n                        while(t<buf.size() && buf[t]==' ')t++;\n                        if(t<buf.size()){\n                        while(t<buf.size() && buf[t]!=' ')t++;\n                       // while(t<buf.size() && buf[t]==' ')t++;\n\n                        buf.erase(pos,t-pos);}\n                    }\n                }\n            }\n        }\n       cout << buf.substr(0,pos) << \"^\" << buf.substr(pos) << endl; \n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <string>\n#include <iostream>\n\nusing namespace std;\n\nint n,m;\n\nint main(void){\n\tscanf(\"%d%*c\",&n);\n\tfor(int dd=0;dd<n;dd++){\n\t\tstring str;\n\t\tgetline(cin,str);\n\t\tscanf(\"%d%*c\",&m);\n\t\tint point=0;\n\t\tfor(int i=0;i<m;i++){\n\t\t\tstring com;\n\t\t\tgetline(cin,com);\n\t\t\tif(com==\"forward char\"){\n\t\t\t\tif(point<str.size()){\n\t\t\t\t\tpoint++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(com==\"forward word\"){\n\t\t\t\tif(point<str.size()){\n\t\t\t\t\twhile(point<str.size() && str[point]==' ')point++;\n\t\t\t\t\twhile(point<str.size() && str[point]!=' ')point++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(com==\"backward char\"){\n\t\t\t\tif(point>0){\n\t\t\t\t\tpoint--;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(com==\"backward word\"){\n\t\t\t\tif(point>0){\n\t\t\t\t\twhile(point>0 && str[point-1]==' ')point--;\n\t\t\t\t\twhile(point>0 && str[point-1]!=' ')point--;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(com[0]=='i'){\n\t\t\t\tstring str2;\n\t\t\t\tstring str3;\n\t\t\t\tstring str4;\n\t\t\t\tstr2=str.substr(0,point);\n\t\t\t\tstr3=str.substr(point);\n\t\t\t\tstr4=com.substr(8,com.size()-9);\n\t\t\t\tstr=str2+str4+str3;\n\t\t\t\tpoint+=com.size()-9;\n\t\t\t}\n\t\t\tif(com==\"delete char\"){\n\t\t\t\tif(str.size()==point)continue;\n\t\t\t\tstring str2;\n\t\t\t\tstring str3;\n\t\t\t\tstr2=str.substr(0,point);\n\t\t\t\tstr3=str.substr(point+1);\n\t\t\t\tstr=str2+str3;\n\t\t\t}\n\t\t\tif(com==\"delete word\"){\n\t\t\t\tif(str.size()==point)continue;\n\t\t\t\tint e=1;\n\t\t\t\tif(str[point]==' '){\n\t\t\t\t\twhile(point+e<str.size() && str[point+e]==' ')e++;\n\t\t\t\t}\n\t\t\t\tint flag2=0;\n\t\t\t\twhile(point+e<str.size() && str[point+e]!=' '){\n\t\t\t\t\te++;\n\t\t\t\t\tflag2=1;\n\t\t\t\t}\n\t\t\t\tif(flag2==0)continue;\n\t\t\t\tstring str2;\n\t\t\t\tstring str3;\n\t\t\t\tstr2=str.substr(0,point);\n\t\t\t\tstr3=str.substr(point+e);\n\t\t\t\tstr=str2+str3;\n\t\t\t}\n\t\t\t//cout << str << endl;\n\t\t}\n\t\tstring res=\"\";\n\t\tfor(int i=0;i<str.size();i++){\n\t\t\tif(i==point)res+='^';\n\t\t\tres+=str[i];\n\t\t}\n\t\tif(str.size()==point)res+='^';\n\t\tcout << res << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "//02\n#include<iostream>\n#include<string>\n\nusing namespace std;\n\nint main(){\n  int t;\n  cin>>t;\n  cin.ignore();\n  while(t--){\n    string s;\n    getline(cin,s);\n    int c=0;\n    int m;\n    cin>>m;\n    while(m--){\n      string ca,cb;\n      cin>>ca;\n      getline(cin,cb);\n      if(ca==\"forward\"){\n\tif(cb==\" char\"){\n\t  if(c<s.size()){\n\t    c++;\n\t  }\n\t}else{\n\t  while(c<s.size()&&s[c]==' '){\n\t    c++;\n\t  }\n\t  while(c<s.size()&&s[c]!=' '){\n\t    c++;\n\t  }\n\t}\n      }else if(ca==\"backward\"){\n\tif(cb==\" char\"){\n\t  if(c!=0){\n\t    c--;\n\t  }\n\t}else{\n\t  while(c!=0&&s[c]==' '){\n\t    c--;\n\t  }\n\t  while(c!=0&&s[c]!=' '){\n\t    c--;\n\t  }\n\t  c+=s[c]==' ';\n\t}\n      }else if(ca==\"insert\"){\n\ts.insert(c,cb.substr(2,cb.size()-3));\n\tc+=cb.size()-3;\n      }else{\n\tif(cb==\" char\"){\n\t  if(c!=s.size()){\n\t    s.erase(c,1);\n\t  }\n\t}else{\n\t  bool a=false;\n\t  for(int i=c;i<s.size();i++){\n\t    a|=s[i]!=' ';\n\t  }\n\t  if(a){\n\t    while(c!=s.size()&&s[c]==' '){\n\t      s.erase(c,1);\n\t    }\n\t    while(c!=s.size()&&s[c]!=' '){\n\t      s.erase(c,1);\n\t    }\n\t  }\n\t}\n      }\n    }\n    for(int i=0;i<s.size();i++){\n      if(i==c){\n\tcout<<'^';\n      }\n      cout<<s[i];\n    }\n    if(c==s.size()){\n      cout<<'^';\n    }\n    cout<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <string>\n#include <iostream>\n\nusing namespace std;\n\nint n,m;\n\nint main(void){\n\tscanf(\"%d%*c\",&n);\n\tfor(int dd=0;dd<n;dd++){\n\t\tstring str;\n\t\tgetline(cin,str);\n\t\tscanf(\"%d%*c\",&m);\n\t\tint point=0;\n\t\tfor(int i=0;i<m;i++){\n\t\t\tstring com;\n\t\t\tgetline(cin,com);\n\t\t\tif(com==\"forward char\"){\n\t\t\t\tif(point<str.size()){\n\t\t\t\t\tpoint++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(com==\"forward word\"){\n\t\t\t\tif(point<str.size()){\n\t\t\t\t\twhile(point<str.size() && str[point]==' ')point++;\n\t\t\t\t\twhile(point<str.size() && str[point]!=' ')point++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(com==\"backward char\"){\n\t\t\t\tif(point>0){\n\t\t\t\t\tpoint--;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(com==\"backward word\"){\n\t\t\t\tif(point>0){\n\t\t\t\t\twhile(point>0 && str[point]==' ')point--;\n\t\t\t\t\twhile(point>0 && str[point]!=' ')point--;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(com[0]=='i'){\n\t\t\t\tstring str2;\n\t\t\t\tstring str3;\n\t\t\t\tstring str4;\n\t\t\t\tstr2=str.substr(0,point);\n\t\t\t\tstr3=str.substr(point);\n\t\t\t\tstr4=com.substr(8,com.size()-9);\n\t\t\t\tstr=str2+str4+str3;\n\t\t\t\tpoint+=com.size()-9;\n\t\t\t\t//cout << str4 << endl;\n\t\t\t}\n\t\t\tif(com==\"delete char\"){\n\t\t\t\tif(str.size()==point)continue;\n\t\t\t\tstring str2;\n\t\t\t\tstring str3;\n\t\t\t\tstr2=str.substr(0,point);\n\t\t\t\tstr3=str.substr(point+1);\n\t\t\t\tstr=str2+str3;\n\t\t\t}\n\t\t\tif(com==\"delete word\"){\n\t\t\t\tif(str.size()==point)continue;\n\t\t\t\tint e=1;\n\t\t\t\tif(str[point]==' '){\n\t\t\t\t\twhile(point+e<str.size() && str[point+e]==' ')e++;\n\t\t\t\t}\n\t\t\t\tif(str[point]!=' '){\n\t\t\t\t\twhile(point+e<str.size() && str[point+e]!=' ')e++;\n\t\t\t\t}\n\t\t\t\tstring str2;\n\t\t\t\tstring str3;\n\t\t\t\tstr2=str.substr(0,point);\n\t\t\t\tstr3=str.substr(point+e);\n\t\t\t\tstr=str2+str3;\n\t\t\t}\n\t\t}\n\t\tstring res=\"\";\n\t\tfor(int i=0;i<str.size();i++){\n\t\t\tif(i==point)res+='^';\n\t\t\tres+=str[i];\n\t\t}\n\t\tif(str.size()==point)res+='^';\n\t\tcout << res << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#include<string.h>\nchar a[10000];\nint cur=0;\nint get_fb(char x[])\n{\n\tif(x[0] == 'f')\n\t\treturn 0;\n\telse if(x[0] == 'b')\n\t\treturn 1;\n\telse if(x[0] == 'd')\n\t\treturn 2;\n\telse return 3;\n}\nchar *get_nc(char x[])\n{\n\tint i, j;\n\tchar nc[1000];\n\tfor(i=0;x[i]>32;i++);\n\tfor(;x[i]==32;i++);\n\ti++;\n\tfor(j=0;x[i]!='\"';j++,i++)\n\t\tnc[j] = x[i];\n\tnc[j] = 0;\n\treturn nc;\n}\nint get_cw(char x[])\n{\n\tint i, j;\n\tfor(i=0;x[i]>32;i++);\n\tfor(;x[i]==32;i++);\n\tif(x[i]=='c')return 0;\n\telse return 1;\n}\nvoid insert(char nc[])\n{\n\tint i, j;\n\tfor(j=0;nc[j];j++)\n\t{\n\t\tfor(i=cur;a[i];i++);\n\t\tfor(;i>cur;i--)\n\t\t\ta[i] = a[i-1];\n\t\ta[cur] = nc[j];\n\t\tcur++;\n\t}\n}\nvoid doit(int x,int y)\n{\n\tint i, j;\n\tif(x==0)\t\t// for\n\t{\n\t\tif(a[cur+1])\n\t\t{\n\t\t\tif(y==0)\n\t\t\t{\n\t\t\t\ta[cur]=a[cur+1];\n\t\t\t\ta[cur+1]='^';\n\t\t\t\tcur++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tj=cur+1;\n\t\t\t\twhile(a[j] && a[j]==32)j++;\n\t\t\t\twhile(a[j] && a[j]>32)j++;\n\t\t\t\tfor(i=cur;i<j;i++)\n\t\t\t\t\ta[i]=a[i+1];\n\t\t\t\ta[j-1]='^';\n\t\t\t\tcur = j-1;\n\t\t\t}\n\t\t}\n\t}\n\telse if(x==1)\t// back\n\t{\n\t\tif(cur>0)\n\t\t{\n\t\t\tif(y==0)\n\t\t\t{\n\t\t\t\ta[cur] = a[cur-1];\n\t\t\t\ta[cur-1] = '^';\n\t\t\t\tcur--;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tj = cur-1;\n\t\t\t\twhile(j>=0 && a[j]== 32)j--;\n\t\t\t\twhile(j>=0 && a[j]>32)j--;\n\t\t\t\tfor(i=cur;i>j;i--)\n\t\t\t\t\ta[i]=a[i-1];\n\t\t\t\ta[j+1]='^';\n\t\t\t\tcur = j+1;\n\t\t\t}\n\t\t}\n\t}\n\telse if(x==2)\t// del\n\t{\n\n\t\tif(y==0)\n\t\t{\n\t\t\tfor(i=cur;a[i];i++)\n\t\t\t{\n\t\t\t\ta[i] = a[i+1];\n\t\t\t}\n\t\t\ta[cur] = '^';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tj=cur+1;\n\t\t\tint k=0;\n\t\t\twhile(a[j] && a[j]==32)j++;\n\t\t\twhile(a[j] && a[j]>32){j++;k=1;}\n\t\t\tif(k)\n\t\t\t{\n\t\t\t\tfor(i=cur;a[i];i++,j++)\n\t\t\t\t\ta[i]=a[j];\n\t\t\t\ta[cur] = '^';\n\t\t\t}\n\t\t}\n\t}\n}\nint main()\n{\n\tint t;\n\tscanf(\"%d\\n\",&t);\n\twhile(t--)\n\t{\n\t\tmemset(a,0,sizeof(a));\n\t\tgets(a+1);\n\t\tcur=0;\n\t\ta[0] = '^';\n\t\tint m;\n\t\tscanf(\"%d\\n\",&m);\n\t\twhile(m--)\n\t\t{\n\t\t\tchar comand[1000];\n\t\t\tchar *nc;\n\t\t\tgets(comand);\n\t\t\tint x = get_fb(comand);\n\t\t\tif(x==3)\n\t\t\t{\n\t\t\t\tnc = get_nc(comand);\n\t\t\t\tinsert(nc);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tint y;\n\t\t\t\ty = get_cw(comand);\n\t\t\t\tdoit(x,y);\n\t\t\t}\n\t\t}\n\t\tprintf(\"%s\\n\",a);\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <list>\n#include <string>\n\nusing namespace std;\n\nvoid printlst(list<char> str){\n  for(list<char>::iterator i=str.begin(); i!=str.end(); i++)\n    cout << *i;\n  cout << endl;\n}\n\nint main(){\n  int n;\n  cin >> n;\n  for(int i=0; i<n; i++){\n    int m;\n    list<char> str;\n    string sstr;\n    getline(cin,sstr);    getline(cin,sstr);\n    cin >> m;\n\n    for(int i=0; i<sstr.size(); i++) str.push_back(sstr[i]);\n    list<char>::iterator cur=str.begin();\n    //    printlst(str);\n\n    for(int j=0; j<m; j++){\n      string op1,op2;\n      cin >> op1;\n      if(op1==\"insert\"){\n\tchar c;\n\twhile((c=getchar())!='\"') ;\n\twhile((c=getchar())!='\"') op2+=c;\n\tfor(int i=0; i<op2.size(); i++)\n\t  str.insert(cur,op2[i]);\n      }else{\n\tcin >> op2;\n\tif(op1==\"forward\"){\n\t  if(op2==\"char\"){\n\t    if(cur!=str.end())\n\t      cur++;\n\t  }else{\n\t    while(*cur==' ') cur++;\n\t    while(true){\n\t      if(*cur==' ' || cur==str.end())\n\t\tbreak;\n\t      cur++;\n\t    }\n\t  }\n\t}else if(op1==\"backward\"){\n\t  if(op2==\"char\"){\n\t    if(cur!=str.begin())\n\t      cur--;\n\t  }else{\n\t    if(cur!=str.begin())\n\t      cur--;\n\t    while(*cur==' ') cur--;\n\t    while(true){\n\t      if(*cur==' '){\n\t\tcur++;\n\t\tbreak;\n\t      }else if(cur==str.begin()){\n\t\tbreak;\n\t      }\n\t      cur--;\n\t    }\n\t  }\n\t}else if(op1==\"delete\"){\n\t  if(op2==\"char\"){\n\t    if(cur!=str.end())\n\t      str.erase(cur++);\n\t  }else{\n\t    while(*cur==' ') str.erase(cur++);\n\t    while(true){\n\t      if(*cur==' ' || cur==str.end())\n\t\tbreak;\n\t      str.erase(cur++);\n\t    }\n\t  }\n\t}\n      }\n           str.insert(cur,'^');\n           printlst(str);\n           str.erase((--cur)++);\n    }\n\n    str.insert(cur,'^');\n    printlst(str);\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <cassert>\n#include <cctype>\n#include <cstdlib>\n#include <iostream>\n#include <vector>\nusing namespace std;\n\n#define REP(i, a, b) for(int i = (a); i < (int)(b); ++i)\n#define rep(i, n) REP(i, 0, n)\n\nvoid Forward(const string &text, unsigned &cursor, bool is_char) {\n\tif(is_char) {\n\t\tif(cursor < text.size()) ++cursor;\n\t}\n\telse {\n\t\twhile(cursor < text.size() && text[cursor] == ' ') ++cursor;\n\t\twhile(cursor < text.size() && text[cursor] != ' ') ++cursor;\n\t}\n}\n\nvoid Backward(const string &text, unsigned &cursor, bool is_char) {\n\tif(is_char) {\n\t\tif(cursor > 0) --cursor;\n\t}\n\telse {\n\t\twhile(cursor > 0 && text[cursor - 1] == ' ') --cursor;\n\t\twhile(cursor > 0 && text[cursor - 1] != ' ') --cursor;\n\t}\n}\n\nvoid Insert(string &text, unsigned &cursor, const string &target) {\n\tconst string insert_text = target.substr(1, target.size() - 2);\n\ttext.insert(cursor, insert_text);\n\tcursor += insert_text.size();\n}\n\nvoid Delete(string &text, unsigned cursor, bool is_char) {\n\tif(is_char) {\n\t\tif(cursor < text.size()) text.erase(text.begin() + cursor);\n\t}\n\telse {\n\t\tunsigned idx = cursor;\n\t\tForward(text, idx, false);\n\t\ttext.erase(text.begin() + cursor, text.begin() + idx);\n\t}\n}\n\nstring solve() {\n\tstring text;\n\tgetline(cin, text);\n\n\tint n;\n\tcin >> n;\n\tcin.ignore();\n\n\tunsigned cursor = 0;\n\trep(i, n) {\n\t\tstring line;\n\t\tgetline(cin, line);\n\n\t\tconst unsigned idx_space = line.find(' ');\n\t\tconst string command = line.substr(0, idx_space);\n\t\tconst string target = line.substr(idx_space + 1);\n\n\t\tswitch(command[0]) {\n\t\tcase 'f': Forward(text, cursor, target[0] == 'c'); break;\n\t\tcase 'b': Backward(text, cursor, target[0] == 'c'); break;\n\t\tcase 'i': Insert(text, cursor, target); break;\n\t\tcase 'd': Delete(text, cursor, target[0] == 'c'); break;\n\t\tdefault: assert(false);\n\t\t}\n\t}\n\n\ttext.insert(text.begin() + cursor, '^');\n\treturn text;\n}\n\nint main() {\n\tcin.tie(nullptr);\n\tios::sync_with_stdio(false);\n\n\tint t;\n\tcin >> t;\n\tcin.ignore();\n\twhile(t--) cout << solve() << endl;\n\n\treturn EXIT_SUCCESS;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <map>\n#include <set>\n#include <queue>\nusing namespace std;\n\ntypedef vector<int> vi;\ntypedef pair<int, int> pii;\n\n#define rep(i, n) for(int i=0; i<n; i++)\n#define repa(i, s, e) for(int i=s; i<=e; i++) \n\nint T, N, c;\nstring str, proc;\n\nvoid process(string& p) {\n\tif(p == \"forward char\") {\n\t\tif(c < str.size()) c++;\n\t}\n\telse if(p == \"backward char\") {\n\t\tif(c > 0) c--;\n\t}\n\telse if(p == \"forward word\") {\n\t\tif(c == str.size()) return;\n\t\twhile(str[c] == ' ' && c < str.size()) c++;\n\t    while(str[c] != ' ' && c < str.size()) c++;\n\t}\n\telse if(p == \"backward word\") {\n\t\twhile(str[c] != ' ' && c > 0) c--;\n\t}\n\telse if(p == \"delete char\") {\n\t\tif(c != str.size()) str.erase(c, 1);\n\t}\n\telse if(p == \"delete word\") {\n\t\tif(c == str.size()) return;\n\t\twhile(str[c] == ' ') str.erase(c, 1);\n\t\twhile(str[c] != ' ' && c != str.size()) str.erase(c, 1);\n\t}\n\telse {\n\t\tsize_t s = p.find_first_of('\"');\n\t\tsize_t e = p.find_last_of('\"');\n\t\tstring a = p.substr(s+1, e-s-1);\n\t    // cout << a << endl;\n\t\tif(c != str.size()) {\n\t\t\tstr = str.substr(0, c) + a + str.substr(c, str.size()-1);\n\t\t} else {\n\t\t\tstr = str + a;\n\t\t}\n\t\tc = c + a.size();\n\t}\n}\n\nvoid out() {\n\trep(i,c) printf(\"%c\", str[i]);\n\tprintf(\"^\");\n\trepa(i,c,(int)str.size()-1) printf(\"%c\", str[i]);\n\tprintf(\"\\n\");\n}\n\nint main() {\n\tchar buf[256];\n\tcin >> T;\n\tcin.ignore();\n\trep(t,T) {\n\t\tfgets(buf, sizeof(buf), stdin);\n\t\t*(strchr(buf, '\\n')) = '\\0';\n\t\tstr = string(buf);\n\n\t\tscanf(\"%d\\n\", &N);\n\t\tc = 0;\n\t\trep(i,N) {\n\t\t\tgetline(cin, proc);\n\t\t\tprocess(proc);\n\t\t\t// out();\n\t\t}\n\t\tout();\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cmath>\n#include <string>\n\nusing namespace std;\nint main(){\n\tint n,r;\n\tcin >> n;\n\tcin.ignore();\n\twhile(n--){\n\t\tint cur = 0;\n\t\tstring text, command;\n\t\tgetline(cin, text);\n\t\tint len = text.size();\n\t\tcin\t>> r;\n\t\tcin.ignore();\n\t\twhile(r--){\n\t\t\tgetline(cin, command);\n\t\t\tif(command == \"forward char\"){\n\t\t\t\tcur=min(len, cur+1);\n\t\t\t}else if(command == \"forward word\"){\n\t\t\t\tfor(;cur<len && text[cur] == ' '; cur++);\n\t\t\t\tfor(;cur<len && text[cur] != ' '; cur++);\n\t\t\t}else if(command == \"backward char\"){\n\t\t\t\tcur=max(0, cur-1);\n\t\t\t}else if(command == \"backward word\"){\n\t\t\t\tfor(;cur>0 && text[cur-1] == ' '; cur--);\n\t\t\t\tfor(;cur>0 && text[cur-1] != ' '; cur--);\n\t\t\t}else if(command == \"delete char\"){\n\t\t\t\tif(cur>=len) continue;\n\t\t\t\ttext.erase(text.begin()+cur);\n\t\t\t\tlen--;\n\t\t\t}else if(command == \"delete word\"){\n\t\t\t\tint s = cur;\n\t\t\t\tfor(;s<len && text[s] == ' '; s++);\n\t\t\t\tfor(;s<len && text[s] != ' ';){\n\t\t\t\t\ttext.erase(text.begin()+s);\n\t\t\t\t\tlen--;\n\t\t\t\t}\n\t\t\t}else if(command.find(\"insert\")!=command.npos){\n\t\t\t\tstring ins;\n\t\t\t\tint s = command.find('\"');\n\t\t\t\tint t = command.find('\"',s+1);\n\t\t\t\tins = command.substr(s+1,t-s-1);\n\t\t\t\ttext.insert(cur,ins);\n\t\t\t\tlen+=t-s-1;\n\t\t\t\tcur+=t-s-1;\n\t\t\t}\n\t\t\t\n\t\t}\n\t\ttext.insert(text.begin()+cur,'^');\n\t\tcout << text << endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nint main(){\n        int n;\n        cin >> n;\n        string dummy;\n        getline(cin, dummy);\n        while(n--){\n                string text;\n                getline(cin, text);\n\n                int m, c = 0;\n                cin >> m;\n                while(m--){\n                        string cmd;\n                        cin >> cmd;\n                        if(cmd == \"forward\"){\n                                cin >> cmd;\n                                if(cmd == \"char\"){\n                                        if(c < text.size()){ ++c; }\n                                }else if(cmd == \"word\"){\n                                        for(; c < text.size(); ++c){\n                                                if(text[c] != ' '){ break; }\n                                        }\n                                        for(; c < text.size(); ++c){\n                                                if(text[c] == ' '){ break; }\n                                        }\n                                }\n                                getline(cin, dummy);\n                        }else if(cmd == \"backward\"){\n                                cin >> cmd;\n                                if(cmd == \"char\"){\n                                        if(c > 0){ --c; }\n                                }else if(cmd == \"word\"){\n                                        for(; c > 0; --c){\n                                                if(text[c - 1] != ' '){ break; }\n                                        }\n                                        for(; c > 0; --c){\n                                                if(text[c - 1] == ' '){ break; }\n                                        }\n                                }\n                                getline(cin, dummy);\n                        }else if(cmd == \"insert\"){\n                                getline(cin, cmd);\n                                int front = cmd.find_first_of('\"');\n                                int tail = cmd.find_last_of('\"');\n                                cmd = cmd.substr(front + 1, tail - front - 1);\n                                text.insert(c, cmd);\n                                c += cmd.size();\n                        }else if(cmd == \"delete\"){\n                                cin >> cmd;\n                                if(cmd == \"char\"){\n                                        if(c < text.size()){ text.erase(text.begin() + c); }\n                                }else if(cmd == \"word\"){\n                                        int end = c;\n                                        bool erase = false;\n                                        for(; end < text.size(); ++end){\n                                                if(text[end] != ' '){\n                                                        erase = true;\n                                                        break;\n                                                }\n                                        }\n                                        for(; end < text.size(); ++end){\n                                                if(text[end] == ' '){ break; }\n                                        }\n                                        if(erase){\n                                                text.erase(text.begin() + c, text.begin() + end);\n                                        }\n                                }\n                                getline(cin, dummy);\n                        }\n                }\n                text.insert(c, \"^\");\n                cout << text << endl;\n        }\n        return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <cstdlib>\n\nusing namespace std;\n\nstring text,in,dum;\nint cur,len;\n\nint main()\n{\n\tint CS, n;\n\tcin >> CS; getline(cin, dum);\n\tfor (int cs = 0; cs < CS; cs++) {\n\t\tgetline(cin,text);\n\t\tcin >> n; getline(cin, dum);\n\t\tlen = text.size();\n\t\tcur = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tgetline(cin, in);\n\t\t\tif (in == \"forward char\")\n\t\t\t\tcur = min(cur+1,len);\n\t\t\telse if (in == \"backward char\")\n\t\t\t\tcur = max(cur-1,0);\n\t\t\telse if (in == \"delete char\") {\n\t\t\t\tif (cur >= text.size()) continue;\n\t\t\t\ttext.erase(text.begin()+cur); len--;\n\t\t\t} else if (in.find(\"insert\") != in.npos) {\n\t\t\t\tint s = in.find('\"'), t = in.find('\"',s+1);\n\t\t\t\ttext = text.substr(0,cur) + in.substr(s+1,t-s-1) + text.substr(cur);\n\t\t\t\tcur += t-s-1; len += t-s-1;\n\t\t\t} else if (in == \"forward word\") {\n\t\t\t\twhile (cur < len && text[cur] == ' ') cur++;\n\t\t\t\twhile (cur < len && text[cur] != ' ') cur++;\n\t\t\t} else if (in == \"backward word\") {\n\t\t\t\twhile (cur > 0 && text[cur-1] == ' ') cur--;\n\t\t\t\twhile (cur > 0 && text[cur-1] != ' ') cur--;\n\t\t\t}\n\t\t\telse if (in == \"delete word\") {\n\t\t\t\tint s = cur, t;\n\t\t\t\twhile (text[s] == ' ') s++;\n\t\t\t\tif (s >= len) continue;\n\t\t\t\tfor(t = s; text[t] != ' ' && t < len; t++);\n\t\t\t\ttext = text.substr(0,cur) + text.substr(t);\n\t\t\t\tlen -= t-cur;\n\t\t\t}\n\t\t}\n\t\tcout << text.substr(0,cur) << \"^\" << text.substr(cur) << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <string>\n#include <sstream>\nusing namespace std;\n \nint main() {\n  int Tc;\n  cin >> Tc;\n  cin.ignore();\n  for(int tc = 0; tc < Tc; ++tc) {\n    string text;\n    int M;\n    int cursor = 0;\n\n    getline(cin, text);\n    cin >> M;\n    cin.ignore();\n\n    while(M--) {\n\n      string a, b;\n      {\n        string line;\n        getline(cin, line);\n        for(int i = 0; i < line.size(); ++i) {\n          if(line[i] == ' ') {\n            a = line.substr(0, i);\n            b = line.substr(i+1);\n            break;\n          }\n        }\n      }\n\n      int N = text.size();\n      if(0) {\n\n      } else if(a == \"forward\" && b == \"char\") {\n\n        cursor = min(cursor+1, N);\n\n      } else if(a == \"forward\" && b == \"word\") {\n\n        for(; cursor < N && text[cursor] == ' '; ++cursor);\n        for(; cursor < N && text[cursor] != ' '; ++cursor);\n\n      } else if(a == \"backward\" && b == \"char\") {\n\n        cursor = max(cursor-1, 0);\n\n      } else if(a == \"backward\" && b == \"word\") {\n\n        for(; cursor > 0 && text[cursor-1] == ' '; --cursor);\n        for(; cursor > 0 && text[cursor-1] != ' '; --cursor);\n\n      } else if(a == \"insert\") {\n\n        b = b.substr(1, b.size()-2);\n        text.insert(cursor, b);\n        cursor += b.size();\n\n      } else if(a == \"delete\" && b == \"char\") {\n\n        if(cursor < N) text.erase(cursor, 1);\n\n      } else if(a == \"delete\" && b == \"word\") {\n\n        int begin = cursor;\n        int end = cursor;\n        for(; end < N && text[end] == ' '; ++end);\n        if(end == N) continue;\n        for(; end < N && text[end] != ' '; ++end);\n        if(begin < N && end-begin > 0) text.erase(begin, end-begin);\n\n      }\n\n    }\n\n    text.insert(cursor, \"^\");\n    cout << text << endl;\n\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cmath>\nusing namespace std;\n\nint main()\n{\n    string bla = \"bla\";\n    cout<<bla.substr(3)<<endl;\n    int nb_cas;\n    cin>>nb_cas;\n    cin.ignore();\n    while(nb_cas--)\n    {\n        string texte;\n        getline(cin,texte);\n        int nb_op;\n        cin>>nb_op;\n        int curseur = 0;\n        for(int c=0;c<nb_op;c++)\n        {\n            string s1,s2;\n            cin>>s1;\n            cin.ignore();\n            getline(cin,s2);\n            if(s1==\"forward\"||s1==\"backward\")\n            {\n                int d = (s1==\"forward\"?1:-1);\n                if(s2==\"char\") curseur+=d;\n                else if(s2==\"word\")\n                {\n                    while(curseur>= 0 && curseur<=texte.size()&&(curseur == texte.size()||texte[curseur]==' ')) curseur+=d;\n                    while(curseur>=-0&&curseur<=texte.size()&&(curseur==texte.size()||texte[curseur]!=' '))\n                    {\n                        curseur += d;\n                    }\n                }\n                curseur = max(curseur,0);\n                curseur = min(curseur,(int)texte.size());\n            }\n            else if(s1==\"delete\")\n            {\n                if(s2==\"char\")\n                {\n                    texte = texte.substr(0,curseur)+texte.substr(curseur+1);\n                }\n                else if(s2==\"word\")\n                {\n                    int finMot = curseur;\n                    while(finMot<texte.size()&&texte[finMot]==' ') finMot++;\n                    while(finMot<texte.size()&&texte[finMot]!=' ')\n                    {\n                        finMot ++;\n                    }\n                    texte = texte.substr(0,curseur)+(finMot < texte.size()?texte.substr(finMot):\"\");\n                }\n            }\n            else\n            {\n                s2 = s2.substr(1,s2.size()-2);\n                texte = texte.substr(0,curseur)+s2+(curseur<(int)texte.size()?texte.substr(curseur):\"\");\n                curseur += s2.size();\n            }\n        }\n        cout<<texte.substr(0,curseur)+\"^\"+(curseur<(int)texte.size()?texte.substr(curseur):\"\")<<endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\n#include<unordered_map>\n#include<unordered_set>\n#pragma warning(disable:4996)\nusing namespace std;\nusing ld = long double;\nconst ld eps = 1e-9;\n\n//// < \"d:\\d_download\\visual studio 2015\\projects\\programing_contest_c++\\debug\\a.txt\" > \"d:\\d_download\\visual studio 2015\\projects\\programing_contest_c++\\debug\\b.txt\"\n\nvoid pr(string st, int i) {\n\tfor (int c = 0; c < st.size(); ++c) {\n\t\tif (c == i)cout << '^';\n\t\tcout << st[c];\n\t}\n\tif (i == st.size())cout << '^';\n\tcout << endl;\n}\n\nint main() {\n\tint N; cin >> N;\n\tstring dummy;\n\tgetline(cin, dummy);\n\twhile (N--) {\n\t\tstring st;\n\t\tgetline(cin, st);\n\t\tint M; cin >> M;\n\t\tint i = 0;\n\t\tgetline(cin, dummy);\n\t\twhile (M--) {\n\t\t\tstring order; getline(cin, order);\n\t\t\tif (order == \"forward char\") {\n\t\t\t\tif (i != st.size())i++;\n\t\t\t}\n\t\t\telse if (order == \"forward word\") {\n\t\t\t\tif (i != st.size())i++;\n\t\t\t\twhile (i != st.size()&&st[i]!=' ') {\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (order == \"backward char\") {\n\t\t\t\tif (i)i--;\n\t\t\t}\n\t\t\telse if (order == \"backward word\") {\n\t\t\t\tif (i )i--;\n\t\t\t\twhile (i && st[i-1] != ' ') {\n\t\t\t\t\ti--;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (order == \"delete char\") {\n\t\t\t\tif (i != st.size()) {\n\t\t\t\t\tst.erase(i,1);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (order == \"delete word\") {\n\t\t\t\twhile (i != st.size()&&st[i]==' ') {\n\t\t\t\t\tst.erase(i,1);\n\t\t\t\t}\n\t\t\t\twhile (i != st.size()&&st[i]!=' ') {\n\t\t\t\t\tst.erase(i,1);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tstring ins = order.substr(order.find(' ') + 2, order.size()-3- order.find(' '));\n\t\t\t\tst.insert(i, ins);\n\t\t\t\ti += ins.size();\n\t\t\t}\n\n\t\t\t//pr(st, i);\n\t\t}\n\t\tpr(st, i);\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <cstdlib>\n\nusing namespace std;\n\nstring text,in;\nint cur,len;\n\nint main()\n{\n\tint CS, n;\n\tcin >> CS; cin.ignore();\n\tfor (int cs = 0; cs < CS; cs++) {\n\t\tgetline(cin,text);\n\t\tcin >> n; cin.ignore();\n\t\tlen = text.size();\n\t\tcur = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tgetline(cin, in);\n\t\t\tif (in == \"forward char\")\n\t\t\t\tcur = min(cur+1,len);\n\t\t\telse if (in == \"backward char\")\n\t\t\t\tcur = max(cur-1,0);\n\t\t\telse if (in == \"delete char\") {\n\t\t\t\tif (cur >= text.size()) continue;\n\t\t\t\ttext.erase(text.begin()+cur); len--;\n\t\t\t} else if (in.find(\"insert\") != in.npos) {\n\t\t\t\tint s = in.find('\"'), t = in.find('\"',s+1);\n\t\t\t\ttext = text.substr(0,cur) + in.substr(s+1,t-s-1) + text.substr(cur);\n\t\t\t\tcur += t-s-1; len += t-s-1;\n\t\t\t} else if (in == \"forward word\") {\n\t\t\t\twhile (cur < len && text[cur] == ' ') cur++;\n\t\t\t\twhile (cur < len && text[cur] != ' ') cur++;\n\t\t\t} else if (in == \"backward word\") {\n\t\t\t\twhile (cur > 0 && text[cur-1] == ' ') cur--;\n\t\t\t\twhile (cur > 0 && text[cur-1] != ' ') cur--;\n\t\t\t}\n\t\t\telse if (in == \"delete word\") {\n\t\t\t\tint s = cur, t;\n\t\t\t\twhile (text[s] == ' ') s++;\n\t\t\t\tif (s >= len) continue;\n\t\t\t\tfor(t = s; text[t] != ' ' && t < len; t++);\n\t\t\t\ttext = text.substr(0,cur) + text.substr(t);\n\t\t\t\tlen -= t-cur;\n\t\t\t}\n\t\t}\n\t\tcout << text.substr(0,cur) << \"^\" << text.substr(cur) << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cmath>\n#include <string>\n\nusing namespace std;\nint main(){\n\tint n,r;\n\tcin >> n;\n\tcin.ignore();\n\twhile(n--){\n\t\tint cur = 0;\n\t\tstring text, command;\n\t\tgetline(cin, text);\n\t\tint len = text.size();\n\t\tcin\t>> r;\n\t\tcin.ignore();\n\t\twhile(r--){\n\t\t\tgetline(cin, command);\n\t\t\tif(command == \"forward char\"){\n\t\t\t\tcur=min(len, cur+1);\n\t\t\t}else if(command == \"forward word\"){\n\t\t\t\tfor(;cur<len && text[cur] == ' '; cur++);\n\t\t\t\tfor(;cur<len && text[cur] != ' '; cur++);\n\t\t\t}else if(command == \"backward char\"){\n\t\t\t\tcur=max(0, cur-1);\n\t\t\t}else if(command == \"backward word\"){\n\t\t\t\tfor(;cur>0 && text[cur-1] == ' '; cur--);\n\t\t\t\tfor(;cur>0 && text[cur-1] != ' '; cur--);\n\t\t\t}else if(command == \"delete char\"){\n\t\t\t\tif(cur>=len) continue;\n\t\t\t\ttext.erase(text.begin()+cur);\n\t\t\t\tlen--;\n\t\t\t}else if(command == \"delete word\"){\n\t\t\t\tint s = cur;\n\t\t\t\tfor(;s<len && text[s] == ' '; s++){\n\t\t\t\t\t#include <iostream>\n#include <cstdio>\n#include <cmath>\n#include <string>\n\nusing namespace std;\nint main(){\n\tint n,r;\n\tcin >> n;\n\tcin.ignore();\n\twhile(n--){\n\t\tint cur = 0;\n\t\tstring text, command;\n\t\tgetline(cin, text);\n\t\tint len = text.size();\n\t\tcin\t>> r;\n\t\tcin.ignore();\n\t\twhile(r--){\n\t\t\tgetline(cin, command);\n\t\t\tif(command == \"forward char\"){\n\t\t\t\tcur=min(len, cur+1);\n\t\t\t}else if(command == \"forward word\"){\n\t\t\t\tfor(;cur<len && text[cur] == ' '; cur++);\n\t\t\t\tfor(;cur<len && text[cur] != ' '; cur++);\n\t\t\t}else if(command == \"backward char\"){\n\t\t\t\tcur=max(0, cur-1);\n\t\t\t}else if(command == \"backward word\"){\n\t\t\t\tfor(;cur>0 && text[cur-1] == ' '; cur--);\n\t\t\t\tfor(;cur>0 && text[cur-1] != ' '; cur--);\n\t\t\t}else if(command == \"delete char\"){\n\t\t\t\tif(cur>=len) continue;\n\t\t\t\ttext.erase(text.begin()+cur);\n\t\t\t\tlen--;\n\t\t\t}else if(command == \"delete word\"){\n\t\t\t\tint s = cur;\n\t\t\t\tfor(;s<len && text[s] == ' '; s++){\n\t\t\t\t\ttext.erase(text.begin()+s);\n\t\t\t\t\tlen--;\n\t\t\t\t}\n\t\t\t\tfor(;s<len && text[s] != ' ';){\n\t\t\t\t\ttext.erase(text.begin()+s);\n\t\t\t\t\tlen--;\n\t\t\t\t}\n\t\t\t}else if(command.find(\"insert\")!=command.npos){\n\t\t\t\tstring ins;\n\t\t\t\tint s = command.find('\"');\n\t\t\t\tint t = command.find('\"',s+1);\n\t\t\t\tins = command.substr(s+1,t-s-1);\n\t\t\t\ttext.insert(cur,ins);\n\t\t\t\tlen+=t-s-1;\n\t\t\t\tcur+=t-s-1;\n\t\t\t}\n\t\t\t\n\t\t}\n\t\tcout<<text.substr(0,cur)<<\"^\"<<text.substr(cur)<<endl;\n\t}\n\n\treturn 0;\n}\n\n\t\t\t\t}\n\t\t\t\tfor(;s<len && text[s] != ' ';){\n\t\t\t\t\ttext.erase(text.begin()+s);\n\t\t\t\t\tlen--;\n\t\t\t\t}\n\t\t\t}else if(command.find(\"insert\")!=command.npos){\n\t\t\t\tstring ins;\n\t\t\t\tint s = command.find('\"');\n\t\t\t\tint t = command.find('\"',s+1);\n\t\t\t\tins = command.substr(s+1,t-s-1);\n\t\t\t\ttext.insert(cur,ins);\n\t\t\t\tlen+=t-s-1;\n\t\t\t\tcur+=t-s-1;\n\t\t\t}\n\t\t\t\n\t\t}\n\t\ttext.insert(text.begin()+cur,'^');\n\t\tcout << text << endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <stdlib.h>\n#include <string.h>\n#include <string>\n\n#define REP(i, n) for(int i=0; i<n; i++)\n\ntypedef vector<int> VI;\n\nint T, N;\nstring text;\nstring cmd;\nstring tmp;\n\nvoid execute(string& text, string cmd)\n{\n\tif(cmd == \"forward char\"){\n\t\tREP(i, text.size())\n\t\t{\n\t\t\tif(text[i] == '^')\n\t\t\t{\n\t\t\t\tif(i != text.size()-1)\n\t\t\t\t{\n\t\t\t\t\ttext[i] = text[i+1];\n\t\t\t\t\ttext[i+1] = '^';\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse if(cmd ==\"forward word\")\n\t{\n\t\tint iCaret = -1;\n\t\tREP(i, text.size())\n\t\t{\n\t\t\tif(text[i] == '^')\n\t\t\t{\n\t\t\t\tiCaret = i;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif(i == text.size()-1 && iCaret != -1)\n\t\t\t{\n\t\t\t\ttext.insert(text.end(), '^');\n\t\t\t\ttext.erase(text.begin()+iCaret);\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif(text[i] == ' ' && iCaret != -1)\n\t\t\t{\n\t\t\t\tif(i != 0)\n\t\t\t\t{\n\t\t\t\t\tif(text[i-1] == ' ' || text[i-1] == '^')\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttext.insert(text.begin()+i, '^');\n\t\t\t\ttext.erase(text.begin()+iCaret);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\telse if(cmd == \"backward char\")\n\t{\n\t\tREP(i, text.size())\n\t\t{\n\t\t\tif(text[i] == '^')\n\t\t\t{\n\t\t\t\tif(i != 0)\n\t\t\t\t{\n\t\t\t\t\ttext[i] = text[i-1];\n\t\t\t\t\ttext[i-1] = '^';\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse if(cmd == \"backward word\")\n\t{\n\t\tint iCaret = -1;\n\t\tfor(int i=text.size()-1; i>=0; i--)\n\t\t{\n\t\t\tif(text[i] == '^')\n\t\t\t{\n\t\t\t\tiCaret = i;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif(i == 0 && iCaret != -1)\n\t\t\t{\n\t\t\t\ttext.erase(text.begin() + iCaret);\n\t\t\t\ttext.insert(text.begin(), '^');\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif(text[i] == ' ' && iCaret != -1)\n\t\t\t{\n\t\t\t\tif(i != text.size()-1)\n\t\t\t\t{\n\t\t\t\t\tif(text[i+1] == ' ' || text[i+1] == '^')\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttext.erase(text.begin() + iCaret);\n\t\t\t\ttext.insert(text.begin() + i, '^');\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\telse if(cmd == \"delete char\")\n\t{\n\t\tREP(i, text.size())\n\t\t{\n\t\t\tif(text[i] == '^')\n\t\t\t{\n\t\t\t\tif(i != text.size()-1)\n\t\t\t\t{\n\t\t\t\t\ttext.erase(text.begin() + i+1);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse if(cmd == \"delete word\")\n\t{\n\t\tint first = 0;\n\t\tint last = 0;\n\t\tREP(i, text.size())\n\t\t{\n\t\t\tif(text[i] == '^')\n\t\t\t{\n\t\t\t\tfirst = i;\n\t\t\t}\n\t\t\t\n\t\t\tif((text[i] == ' ' || i == text.size()-1) && first != 0)\n\t\t\t{\n\t\t\t\tif(i != 0)\n\t\t\t\t{\n\t\t\t\t\tif(text[i-1] == ' ' || text[i-1] == ' ')\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttext.erase(text.begin()+first+1, text.begin()+i);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tbool is_insert = true;\n\t\tstring str_insert = \"insert\";\n\t\tREP(i, str_insert.size())\n\t\t{\n\t\t\tif(str_insert[i] != cmd[i])\n\t\t\t{\n\t\t\t\tis_insert = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif(is_insert)\n\t\t{\n\t\t\tstring word_insert = string(cmd, str_insert.size()+2, cmd.size()-str_insert.size()-3);\n\t\t\t\n\t\t\tREP(i, text.size())\n\t\t\t{\n\t\t\t\tif(text[i] == '^')\n\t\t\t\t{\n\t\t\t\t\ttext.insert(i, word_insert);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main()\n{\n\tgetline(cin, tmp);\n\tT = atoi(tmp.c_str());\n\n\tREP(t, T)\n\t{\n\t\tgetline(cin, text);\n\t\ttext = \"^\" + text;\n\t\t//cout << text << endl;\n\n\t\tgetline(cin, tmp);\n\t\tN = atoi(tmp.c_str());\n\t\tREP(n, N)\n\t\t{\n\t\t\tgetline(cin, cmd);\n\t\t\texecute(text, cmd);\n\t\t}\n\t\tcout << text << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream> \n#include <sstream> \n#include <iomanip> \n#include <algorithm> \n#include <cmath> \n#include <string> \n#include <vector> \n#include <list> \n#include <queue> \n#include <stack> \n#include <set> \n#include <map> \n#include <bitset> \n#include <numeric> \n#include <climits> \n#include <cfloat> \nusing namespace std; \n\nint main()\n{\n    int n;\n    cin >> n;\n    cin.ignore();\n\n    while(--n >= 0){\n        string s;\n        getline(cin, s);\n        int m;\n        cin >> m;\n        cin.ignore();\n\n        list<char> text(s.begin(), s.end());\n        list<char>::iterator it = text.begin();\n\n        while(--m >= 0){\n            string ope;\n            getline(cin, ope);\n\n            if(ope == \"forward char\"){\n                if(it != text.end())\n                    ++ it;\n            }else if(ope == \"forward word\"){\n                list<char>::iterator it2 = it;\n                while(it2 != text.end() && (*it2) == ' ')\n                    ++ it2;\n                if(it2 != text.end()){\n                    it = it2;\n                    while(it != text.end() && (*it) != ' ')\n                        ++ it;\n                }\n            }else if(ope == \"backward char\"){\n                if(it != text.begin())\n                    -- it;\n            }else if(ope == \"backward word\"){\n                if(text.size() > 0 && it != text.begin()){\n                    list<char>::iterator it2 = it;\n                    -- it2;\n                    while(it2 != text.begin() && (*it2) == ' ')\n                        -- it2;\n                    if((*it2) != ' '){\n                        it = it2;\n                        while(it != text.begin() && (*it) != ' ')\n                            -- it;\n                        if((*it) == ' ')\n                            ++ it;\n                    }\n                }\n            }else if(ope == \"delete char\"){\n                if(it != text.end())\n                    it = text.erase(it);\n            }else if(ope == \"delete word\"){\n                list<char>::iterator it2 = it;\n                while(it2 != text.end() && (*it2) == ' ')\n                    ++ it2;\n                if(it2 != text.end()){\n                    it = text.erase(it, it2);\n                    while(it != text.end() && (*it) != ' ')\n                        it = text.erase(it);\n                }\n            }else{\n                for(unsigned i=8; i<ope.size()-1; ++i){\n                    it = text.insert(it, ope[i]);\n                    ++ it;\n                }\n            }\n        }\n\n        cout << string(text.begin(), it) << '^' << string(it, text.end()) << endl;\n    }\n    \n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nbool ischr(int c) {\n\tif (c >= 'A' && c <= 'Z') return true;\n\tif (c >= 'a' && c <= 'z') return true;\n\tif (c >= '0' && c <= '9') return true;\n\tif (c == ',' || c == '.') return true;\n\treturn false;\n}\n\nint main() {\n\tint n;\n\tstring buf, cmd, dum;\n\tcin >> n;\n\tgetline(cin, dum);\n\tfor (int i = 0; i < n; i++) {\n\t\tint cur = 1, m;\n\t\tgetline(cin, buf);\n\t\tbuf = \"$\" + buf;\n\t\tbuf = buf.substr(0, buf.find_first_of('\\r'));\n\t\tcin >> m;\n\t\tgetline(cin, dum);\n\t\tfor (int j = 0; j < m; j++) {\n\t\t\tgetline(cin, cmd);\n\t\t\tif (cmd.substr(0, 8) == \"forward \") {\n\t\t\t\tstring subcmd = cmd.substr(8, 4);\n\t\t\t\tif (subcmd == \"char\") {\n\t\t\t\t\tif (buf[cur] != '\\0') cur++;\n\t\t\t\t} else if (subcmd == \"word\") {\n\t\t\t\t\twhile (buf[cur] == ' ') cur++;\n\t\t\t\t\twhile (ischr(buf[cur])) cur++;\n\t\t\t\t}\n\t\t\t} else if (cmd.substr(0, 9) == \"backward \") {\n\t\t\t\tstring subcmd = cmd.substr(9, 4);\n\t\t\t\tif (subcmd == \"char\") {\n\t\t\t\t\tif (cur > 1) cur--;\n\t\t\t\t} else if (subcmd == \"word\") {\n\t\t\t\t\tdo cur--; while (buf[cur] == ' ');\n\t\t\t\t\twhile (ischr(buf[cur])) cur--;\n\t\t\t\t\tcur++;\n\t\t\t\t}\n\t\t\t} else if (cmd.substr(0, 7) == \"insert \") {\n\t\t\t\tint begin = cmd.find_first_of(\"\\\"\")+1;\n\t\t\t\tint end = cmd.find_last_of(\"\\\"\");\n\t\t\t\tstring ins = cmd.substr(begin, end-begin);\n\t\t\t\tbuf = buf.substr(0, cur) + ins + buf.substr(cur);\n\t\t\t\tcur += ins.size();\n\t\t\t} else if (cmd.substr(0, 7) == \"delete \") {\n\t\t\t\tstring subcmd = cmd.substr(7, 4);\n\t\t\t\tif (subcmd == \"char\") {\n\t\t\t\t\tif (buf[cur] != '\\0')\n\t\t\t\t\t\tbuf = buf.substr(0, cur) + buf.substr(cur+1);\n\t\t\t\t} else if (subcmd == \"word\") {\n\t\t\t\t\tint tail = cur;\n\t\t\t\t\twhile (buf[tail] == ' ') tail++;\n\t\t\t\t\twhile (ischr(buf[tail])) tail++;\n\t\t\t\t\tbuf = buf.substr(0, cur) + buf.substr(tail);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (int i = 1; i < buf.size(); i++) {\n\t\t\tif (i == cur)\n\t\t\t\tcout << '^';\n\t\t\tcout << buf[i];\n\t\t}\n\t\tif (cur == buf.size())\n\t\t\tcout << '^' << endl;\n\t\telse\n\t\t\tcout << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\n\nbool isChar(char c) {\n\treturn c != ' ';\n}\n\nint main() {\n\tint N;\n\tcin >> N;\n\tcin.ignore();\n\twhile (N--)\n\t{\n\t\tstring buf;\n\t\tgetline(cin, buf);\n\t\tstring::iterator cur = buf.begin();\n\n\t\tint n;\n\t\tcin >> n;\n\n\t\twhile (n--)\n\t\t{\n\t\t\tstring cmd, arg;\n\t\t\tcin >> cmd;\n\t\t\tcin.ignore();\n\t\t\tgetline(cin, arg);\n\n\t\t\tif (cmd == \"forward\")\n\t\t\t{\n\t\t\t\tif (arg == \"char\" && cur != buf.end()) cur++;\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tcur = find_if(cur, buf.end(), isChar);\n\t\t\t\t\tcur = find(cur, buf.end(), ' ');\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (cmd == \"backward\")\n\t\t\t{\t\t\t\n\t\t\t\tif (arg == \"char\" && cur != buf.begin()) cur--;\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (cur != buf.begin())\n\t\t\t\t\t{\n\t\t\t\t\t\twhile (cur != buf.begin() && *cur != ' ')\n\t\t\t\t\t\t\tcur--;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (cur != buf.begin())\n\t\t\t\t\t{\n\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\tcur--;\n\t\t\t\t\t\t\tif (*cur == ' ') { cur++; break; }\n\t\t\t\t\t\t} while (cur != buf.begin());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (cmd == \"delete\")\n\t\t\t{\n\t\t\t\tif (arg == \"char\" && cur != buf.end())\n\t\t\t\t{\n\t\t\t\t\tsize_t pos = cur - buf.begin();\n\t\t\t\t\tbuf = string(buf.begin(), cur) + string(cur+1, buf.end());\n\t\t\t\t\tcur = buf.begin() + pos;\n\t\t\t\t}\n\t\t\t\telse if (cur != buf.end())\n\t\t\t\t{\n\t\t\t\t\tsize_t pos = cur - buf.begin();\n\t\t\t\t\tstring::iterator t = find_if(cur, buf.end(), isChar);\n\t\t\t\t\tt = find(t, buf.end(), ' ');\n\t\t\t\t\tbuf = string(buf.begin(), cur) + string(t, buf.end());\n\t\t\t\t\tcur = buf.begin() + pos;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tsize_t pos = cur - buf.begin() + arg.size() - 2;\n\t\t\t\tbuf = string(buf.begin(), cur) + string(arg.begin()+1, arg.end()-1) + string(cur, buf.end());\n\t\t\t\tcur = buf.begin() + pos;\n\t\t\t}\n\t\t}\n\t\tcout << string(buf.begin(), cur) << '^' << string(cur, buf.end()) << endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <string>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n\nclass text_editor {\nprivate:\n\tstring text;\npublic:\n\n\tvoid read_text(istream &in) {\n\t\tstring line;\n\t\tgetline(in,line);\n\t\tthis->text = \"^\" + line;\n\t}\n\n\tvoid forward_char() {\n\t\tauto cursor = find(this->text.begin(),this->text.end(),'^');\n\t\tif (cursor + 1 != this->text.end()) { // if cursor not at the end of text\n\t\t\tswap(*cursor,*(cursor + 1));\n\t\t}\n\t}\n\n\tvoid forward_word() {\n\t\tauto cursor = find(this->text.begin(),this->text.end(),'^');\n\t\t// if (cursor != this->text.begin() && *(cursor - 1) != ' ') {\n\t\t// \twhile (cursor + 1 != this->text.end() && *(cursor + 1) != ' ') {\n\t\t// \t\tswap(*cursor,*(cursor + 1));\n\t\t// \t\t++cursor;\n\t\t// \t}\n\t\t// }\n\t\twhile (cursor + 1 != this->text.end() && *(cursor + 1) == ' ') {\n\t\t\tswap(*cursor,*(cursor + 1));\n\t\t\t++cursor;\n\t\t}\n\t\twhile (cursor + 1 != this->text.end() && *(cursor + 1) != ' ') {\n\t\t\tswap(*cursor,*(cursor + 1));\n\t\t\t++cursor;\n\t\t}//\n\t}\n\n\tvoid backward_char() {\n\t\tauto cursor = find(this->text.begin(),this->text.end(),'^');\n\t\tif (cursor != this->text.begin()) {\n\t\t\tswap(*cursor,*(cursor - 1));\n\t\t}\n\t}\n\n\tvoid backward_word() {\n\t\tauto cursor = find(this->text.begin(),this->text.end(),'^');\n\t\t// if (cursor + 1 != this->text.end() && *(cursor + 1) != ' ') {\n\t\t// \twhile (cursor != this->text.begin() && *(cursor - 1) != ' ') {\n\t\t// \t\tswap(*cursor,*(cursor - 1));\n\t\t// \t\t--cursor;\n\t\t// \t}\n\t\t// }\n\t\twhile (cursor != this->text.begin() && *(cursor - 1) == ' ') {\n\t\t\tswap(*cursor,*(cursor - 1));\n\t\t\t--cursor;\n\t\t}\n\t\twhile (cursor != this->text.begin() && *(cursor - 1) != ' ') {\n\t\t\tswap(*cursor,*(cursor - 1));\n\t\t\t--cursor;\n\t\t}//\n\t}\n\n\tvoid delete_char() {\n\t\tauto cursor = find(this->text.begin(),this->text.end(),'^');\n\t\tif (cursor + 1 != this->text.end()) {\n\t\t\tthis->text.erase(cursor + 1);\n\t\t}\n\t}\n\n\tvoid delete_word() {\n\t\tauto cursor = find(this->text.begin(),this->text.end(),'^');\n\t\tauto pos = cursor + 1;\n\t\twhile (pos != this->text.end() && *pos == ' ') {\n\t\t\t++pos;\n\t\t}\n\t\tthis->text.erase(cursor + 1,find(pos,this->text.end(),' '));\n\t}\n\n\tvoid insert_any_text(string any_text) {\n\t\tthis->text.insert(this->text.find('^'),any_text);\n\t}\n\n\tstring get_text() {\n\t\treturn this->text;\n\t}\n};\n\nint main() {\n\ttext_editor edtr;\n\tint n; // number of texts\n\tcin >> n;\n\tcin.ignore();\n\twhile (n--) {\n\t\tedtr.read_text(cin);\n\t\tint cmd_num; // number of commands\n\t\tcin >> cmd_num;\n\t\tcin.ignore();\n\t\twhile (cmd_num--) {\n\t\t\tstring cmd;\n\t\t\tgetline(cin,cmd);\n\t\t\tif (cmd == \"forward char\") {\n\t\t\t\tedtr.forward_char();\n\t\t\t} else if (cmd == \"forward word\") {\n\t\t\t\tedtr.forward_word();\n\t\t\t} else if (cmd == \"backward char\") {\n\t\t\t\tedtr.backward_char();\n\t\t\t} else if (cmd == \"backward word\") {\n\t\t\t\tedtr.backward_word();\n\t\t\t} else if (cmd == \"delete char\") {\n\t\t\t\tedtr.delete_char();\n\t\t\t} else if (cmd == \"delete word\") {\n\t\t\t\tedtr.delete_word();\n\t\t\t} else { // insert \"any-text\"\n\t\t\t\tauto first_quot = cmd.find_first_of(\"\\\"\");\n\t\t\t\tauto last_quot = cmd.find_last_of(\"\\\"\");\n\t\t\t\tedtr.insert_any_text(cmd.substr(first_quot + 1,last_quot - first_quot - 1));\n\t\t\t}\n\t\t\t// cout << edtr.get_text() << endl;\n\t\t}\n\t\tcout << edtr.get_text() << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint main() {\n    int N;\n    cin >> N;\n    cin.ignore();\n\n    while(N--) {\n        string str;\n        getline(cin, str);\n        int cursor = 0;\n        int M;\n        cin >> M;\n        cin.ignore();\n\n        while(M--) {\n            string cmdline;\n            getline(cin, cmdline);\n\n            int delim = cmdline.find(' ');\n            string cmd = cmdline.substr(0, delim);\n            string target = cmdline.substr(delim+1);\n            if(cmd == \"forward\") {\n                if(target == \"word\") {\n                    while(cursor < str.size() && str[cursor] == ' ') ++cursor;\n                    while(cursor < str.size() && str[cursor] != ' ') ++cursor;\n                }\n                else if(target == \"char\") {\n                    if(cursor < str.size()) ++cursor;\n                }\n                else {\n                    cerr << \"Unknown target in forward: \" << target << endl;\n                }\n            }\n            else if(cmd == \"backward\") {\n                if(target == \"word\") {\n                    while(cursor > 0 && str[cursor] == ' ') --cursor;\n                    while(cursor > 0 && str[cursor] != ' ') --cursor;\n                }\n                else if(target == \"char\") {\n                    if(cursor > 0) --cursor;\n                }\n                else {\n                    cerr << \"Unknown target in backward: \" << target << endl;\n                }\n            }\n            else if(cmd == \"delete\") {\n                if(target == \"word\") {\n                    int startword = str.find_first_not_of(' ', cursor);\n                    if(startword == string::npos) continue;\n                    int end = str.find_first_of(' ', startword);\n                    if(end == string::npos) end = str.size();\n                    str.erase(cursor, end-cursor);\n                }\n                else if(target == \"char\") {\n                    if(cursor >= str.size()) continue;\n                    str.erase(cursor, 1);\n                }\n                else {\n                    cerr << \"Unknown target in delete: \" << target << endl;\n                }\n            }\n            else if(cmd == \"insert\") {\n                str = str.substr(0, cursor) + target.substr(1, target.find_last_of('\"')-1) + str.substr(cursor);\n                cursor += target.size()-2;\n            }\n            else {\n                //cerr << \"Unknown command: \" << cmd << endl;\n            }\n        }\n        cout << str.substr(0, cursor) << '^' << str.substr(cursor) << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <sstream>\n#include <algorithm>\nusing namespace std;\n\nstring s;\nint nextWordToFor(int cur)\n{\n\tif(cur==s.size()) return cur;\n\n\tfor(; cur<s.size(); cur++)\n\t{\n\t\tif(s[cur]!=' ') break;\n\t}\n\tfor(; cur<s.size(); cur++)\n\t{\n\t\tif(s[cur]==' ') break;\n\t}\n\n\treturn cur;\n}\n\nint nextWordToDel(int cur)\n{\n\tint tcur=nextWordToFor(cur);\n\n\treturn tcur;\n}\n\nint prevWordToBak(int cur)\n{\n\tif(cur==0) return cur;\n\tcur--;\n\n\tfor(; cur>0; cur--)\n\t{\n\t\tif(s[cur]!=' ') break;\n\t}\n\n\tfor(; cur>0; cur--)\n\t{\n\t\tif(s[cur]==' ') \n\t\t{\n\t\t\tcur++;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn cur;\n}\n\nint main()\n{\n\tint N;\n\tcin >> N;\n\t\n\t\tgetline(cin, s);\n\twhile(N--)\n\t{\n\t\tint cur=0;\n\t\tgetline(cin, s);\n\t\n\t\tint C;\n\t\tcin >> C;\n\t\twhile(C--)\n\t\t{\n\t\t\tstring c,cmd,obj;\n\t\t\tcin >> cmd;\n\t\t\tgetchar();\n\t\t\tgetline(cin, obj);\n\n\t\t\tif(cmd[0]=='f')\n\t\t\t{\n\t\t\t\tif(obj[0]=='c') \n\t\t\t\t{\n\t\t\t\t\tif(cur<s.size()) cur++;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tcur=nextWordToFor(cur);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(cmd[0]=='b')\n\t\t\t{\n\t\t\t\tif(obj[0]=='c') if(cur>0) cur--;\n\t\t\t\telse cur = prevWordToBak(cur);\n\t\t\t}\n\t\t\tif(cmd[0]=='d')\n\t\t\t{\n\t\t\t\tif(obj[0]=='c')\n\t\t\t\t{\n\t\t\t\t\tif(cur==s.size()) continue;\n\t\t\t\t\ts.erase(s.begin()+cur);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tint cur2;\n\t\t\t\t\tcur2=nextWordToFor(cur);\n\t\t\t\t\tif(cur==s.size()) continue;\n\t\t\t\t\tif(s[cur2-1]==' ') continue;\n\n\t\t\t\t\ts.erase(s.begin()+cur, s.begin()+cur2);\t\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(cmd[0]=='i')\n\t\t\t{\n\t\t\t\tobj = obj.substr(1, obj.size()-2);\n\t\t\t\ts.insert(cur, obj);\n\t\t\t\tcur += obj.size();\n\t\t\t}\n\n\t\t\t//cout << s << endl;\n\t\t}\n\n\t\ts.insert(cur, \"^\");\n\t\tcout << s << endl;\n\t}\n\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <map>\n#include <set>\n#include <queue>\n#include <list>\n#include <stack>\n#include <algorithm>\n#include <functional>\n#include <numeric>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <climits>\n#include <sstream>\nusing namespace std;\n\n#define REP(i,a,n) for(i=a; i<n; i++)\n#define rep(i,n) REP(i,0,n)\n#define all(x) x.begin(), x.end()\n#define rall(x) x.rbegin(), x.rend()\n#define foreach(it,x) for(typeof(x.begin()) it=x.begin(); it!=x.end(); it++)\n\n/*\n  AOJ :: 1101\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1101&lang=jp\n */\n\n// YET_SYSTEM_TEST\n\nlist<char> buffer;\nlist<char>::iterator it;\n\nvoid build_buffer(const string& in){\n    int i, n = in.length();\n    buffer.clear();\n    rep(i,n) buffer.push_back(in[i]);\n    it = buffer.begin();\n}\n\nvoid forward_char(){\n    if( it != buffer.end() ) it++;\n}\nvoid forward_word(){\n    // óÌê\n    if( it != buffer.end() && *it == ' ' ){\n        while( it != buffer.end() && *it == ' ' ) it++;\n    }\n    while( it != buffer.end() && *it != ' ' ) it++;\n}\n\nvoid backward_char(){\n    if( it != buffer.begin() ) it--;\n}\nvoid backward_word(){\n    if( it == buffer.end() ) it--;\n\n    list<char>::iterator tmp = it;\n    tmp--;\n    if( tmp != buffer.begin() && *tmp == ' ' ){ // PêÌæª¾Á½ê\n        it = tmp;\n    }\n    while( it != buffer.begin() && *it == ' ' ) it--;\n    while( it != buffer.begin() && *it != ' ' ){\n        it--;\n        if( *it == ' ' ){\n            it++; break;\n        }\n    }\n}\n\nvoid delete_char(){\n    if( it != buffer.end() ) it = buffer.erase(it);\n}\nvoid delete_word(){\n    // spaceðí\n    list<char>::iterator tmp = it;\n    while( tmp != buffer.end() && *tmp == ' ' ) tmp++;\n    if( tmp != buffer.end() ){\n        while( it != buffer.end() && *it == ' ' ){\n            it = buffer.erase(it);\n        }\n        while( it != buffer.end() && *it != ' ' ){\n            it = buffer.erase(it);\n        }\n    }\n}\n\nvoid insertion(const string& in){\n    int i, n = in.length();\n\n    rep(i,n){\n        buffer.insert(it, in[i]);\n    }\n}\n\nint main(){\n    int T,i,n;\n    string in;\n\n    cin >> T; cin.ignore();\n    while( T-- ){\n        getline(cin, in);\n        cin >> n; cin.ignore();\n\n        build_buffer(in);\n\n        rep(i,n){\n            getline(cin, in);\n            if( in == \"forward char\" ){\n                forward_char();\n            }\n            else if( in == \"forward word\" ){\n                forward_word();\n            }\n            else if( in == \"backward char\" ){\n                backward_char();\n            }\n            else if( in == \"backward word\" ){\n                backward_word();\n            }\n            else if( in.substr(0,6)  == \"insert\" ){\n                string tmp = in.substr(8,in.length() - 9);\n                //cout << tmp << endl;\n                insertion(tmp);\n            }\n            else if( in == \"delete char\" ){\n                delete_char();\n            }\n            else if( in == \"delete word\" ){\n                delete_word();\n            }\n\n            // debug\n            /*\n            printf(\"%d : \", i);\n            foreach(s,buffer){\n                if( s == it ) putchar('^');\n                cout << *s;\n            }\n            if( it == buffer.end() ) putchar('^');\n            cout << endl;\n            */\n        }\n\n        // output\n        foreach(s,buffer){\n            if( s == it ) putchar('^');\n            cout << *s;\n        }\n        if( it == buffer.end() ) putchar('^');\n        cout << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <climits>\n#include <cmath>\n#include <ctime>\n#include <cassert>\n#include <iostream>\n#include <fstream>\n#include <sstream>\n#include <iomanip>\n#include <complex>\n#include <string>\n#include <vector>\n#include <list>\n#include <deque>\n#include <stack>\n#include <queue>\n#include <set>\n#include <map>\n#include <bitset>\n#include <iterator>\n#include <functional>\n#include <utility>\n#include <algorithm>\n#include <numeric>\n#include <typeinfo>\n\nusing namespace std;\n\n#define repi(i,a,b) for(int i=int(a);i<int(b);i++)\n#define rep(i,n) repi(i,0,n)\n#define all(c) (c).begin(), (c).end()\n#define mp make_pair\n\nvoid solve(){\n    string t;\n    getline(cin,t);\n    list<char> s(all(t));\n    rep(i,t.size())\n        s.push_back(t[i]);\n\n    auto it = s.begin();\n    int n; cin>>n; cin.get();\n    rep(x,n){\n        string op;\n        getline(cin,op);\n\n        if(op==\"forward char\")\n            if(it!=s.end()) ++it;\n        if(op==\"backward char\")\n            if(it!=s.begin()) --it;\n\n\n        if(op==\"forward word\"){\n            while(it!=s.end() && *it==' ') ++it;\n            while(it!=s.end() && *it!=' ') ++it;\n        }\n        if(op==\"backward word\"){\n            while(it!=s.begin() && *--it==' ') continue;\n            while(it!=s.begin()){\n                --it;\n                if(*it==' '){\n                    ++it;\n                    break;\n                }\n            }\n        }\n\n        if(op.substr(0,6)==\"insert\"){\n            int i=op.find('\"')+1,j=op.find('\"',i);\n            s.insert(it,op.begin()+i,op.begin()+j);\n        }\n\n        if(op==\"delete char\")\n            if(it!=s.end()) it=s.erase(it);\n\n        if(op==\"delete word\"){\n            auto it2 = it;\n            while(it2!=s.end() && *it2==' ') ++it2;\n            if(it2==s.end()) continue;\n            while(it2!=s.end() && *it2!=' ') ++it2;\n            it=s.erase(it,it2);\n        }\n    }\n\n    for(auto i = s.begin();; ++i){\n        if(i==it)\n            cout << '^';\n        if(i==s.end())\n            break;\n        cout << *i;\n    }\n    cout<<endl;\n}\n\nint main(){\n    int t;\n    cin>>t; cin.get();\n    rep(i,t) solve();\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <cstdlib>\nusing namespace std;\n\nchar space()\n{\n  char c;\n  while (isblank(c = getchar()) || c == '\\n');\n  return c;\n}\n\nchar _space()\n{\n  char c;\n  while (isblank(c = getchar()));\n  return c;\n}\n\nstring nextStr()\n{\n  char c = space();\n  string str = \"\";\n  do {\n    str += c;\n  }  while (!isblank(c = getchar()) && (c != '\\n'));\n  return str;\n}\n\nstring nextLine()\n{\n  string str;\n  char c;\n  c = _space();\n  if (c == '\\n') return str;\n  do {\n    str+=c;\n  } while ((c = getchar()) != '\\n');\n\n  return string(str);\n}\n\nstring nextQuote()\n{\n  space();\n  char c;\n  string str = \"\";\n  while ((c = getchar()) != '\"') {\n    str += c;\n  }\n  return str;\n}\n\nbool hasWord(int cur, const string& text)\n{\n  for (int id = cur; id < text.size(); id++) {\n    if (!isblank(text[id])) {\n      return true;\n    }\n  }\n  return false;\n}\n\nbool backHasWord(int cur, const string& text)\n{\n  for (int id = cur - 1; id >= 0; id--) {\n    if (!isblank(text[id])) {\n      return true;\n    }\n  }\n  return false;\n}\n\nint main()\n{\n  int nTest;  \n  scanf(\"%d \",&nTest);\n  //cout << nTest << endl;\n    \n  for (int testIdx = 0; testIdx < nTest; testIdx++) {\n    string text = nextLine();\n    //cout << text << endl;\n    //    cin.ignore();\n\n    int N;\n    scanf(\" %d \", &N);\n    //cout << \"N = \" << N << endl;\n    //cin.ignore();\n    int cur = 0;\n    for (int i = 0; i < N; i++) {\n      string cmd, arg;\n      cmd = nextStr();\n      if (cmd == \"forward\") {\n\targ = nextStr();\n\tif (arg == \"char\") {\n\t  if (cur < text.size()) {\n\t    cur++;\n\t  }\n\t} else {\t\n\t  if (hasWord(cur, text)) {\n\t    while (cur < text.size() && isblank(text[cur])) {cur++;}\n\t    while (cur < text.size() && !isblank(text[cur])) {cur++;}\n\t  } else {\n\t    cur = text.size();\n\t  }\n\t}\n      } else if (cmd == \"backward\") {\n\targ = nextStr();\n\tif (arg == \"char\") {\n\t  if (cur > 0) {\n\t    cur--;\n\t  }\n\t} else {\t  \n\t  if (backHasWord(cur, text)) {\n\t    while (cur > 0 && isblank(text[cur])) {cur--;}\n\t    while (cur > 0 && !isblank(text[cur])) {cur--;}\n\t  } else {\n\t    cur = 0;\n\t  }\n\t}\n      } else if (cmd == \"insert\") {\n\targ = nextQuote();\n\ttext.insert(text.begin() + cur, arg.begin(), arg.end());\n\tcur += arg.size();\n      } else if (cmd == \"delete\") {\n\targ = nextStr();\n\tif (arg == \"char\") {\n\t  if (cur < text.size()) {\n\t    text.erase(text.begin() + cur);\n\t  }\n\t} else {\n\t  if (hasWord(cur, text)) {\n\t    while (cur < text.size() && isblank(text[cur])) {\n\t      text.erase(text.begin() + cur);\n\t    }\n\t    while (cur < text.size() && !isblank(text[cur])) {\n\t      text.erase(text.begin() + cur);\n\t    }\n\t  }\n\t  /*\n\t  */\n\t}\n      }\n      //cout << \"cmd, arg = \" << cmd << \", \" << arg << endl;\n      //cout << \"cur = \" << cur << endl;\n      //cout << text << endl;\n    }\n    for (int i = 0; i < cur; i++) {\n      cout << text[i];\n    }\n    cout << \"^\";\n    for (int i = cur; i < text.size(); i++) {\n      cout << text[i];\n    }\n    cout << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n\nint c[100][2];\nint n;\n\nint ring(int e,int l,int done[]){/*e:?????????e+1,e?????§???????????????l,???????????¨?±\\??´done*/\n    int i;\n    int cpy[100];\n    int templ;\n    int end = 1;\n    int lmax = l;\n    /*printf(\"called: ring(%d,%d,[\",e,l);\n    for(i=0;i<7;i++)printf(\"%d,\",done[i]);\n    printf(\"])\\n\");*/\n    for(i=0;i<100;i++)cpy[i]=done[i];\n    for(i=0;i<n;i++){/*?????????e+1????´??????¢???*/\n        if(c[i][0]==e+1&&cpy[c[i][1]-1]){\n            end = 0;\n            cpy[c[i][1]-1] = 0;\n            templ = ring(c[i][1]-1,l+1,cpy);\n            cpy[c[i][1]-1] = 1;\n            if(templ>lmax)lmax=templ;\n        }\n        if(c[i][1]==e+1&&cpy[c[i][0]-1]){\n            end = 0;\n            cpy[c[i][0]-1] = 0;\n            templ = ring(c[i][0]-1,l+1,cpy);\n            cpy[c[i][0]-1] = 1;\n            if(templ>lmax)lmax=templ;\n        }\n    }\n    /*printf(\"return(from ring(%d,%d)): %d)\\n\",e,l,lmax);*/\n    return end ? l : lmax;\n}\n\nint main(){\n    int i;\n    int done[100];/*done[i] 1:i+1???????????¨ 0;i+1????????¨???or?????´??????*/\n    int ans,tmp;\n    scanf(\"%d\",&n);\n    while(n){\n        for(i=0;i<100;i++)done[i]=0;\n        for(i=0;i<n;i++){\n            scanf(\"%d %d\",&c[i][0],&c[i][1]);\n            done[c[i][0]-1] = 1;\n            done[c[i][1]-1] = 1;\n        }\n        ans = 0;\n        for(i=0;i<100;i++){/*?§?????????????????????????*/\n            if(done[i]){\n                done[i] = 0;\n                tmp = ring(i,1,done);\n                done[i] = 1;\n                if(tmp>ans)ans=tmp;\n            }\n        }\n        printf(\"%d\\n\",ans);\n        scanf(\"%d\",&n);\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <algorithm>\n#include <cstdio>\n\nusing namespace std;\n\nchar buf[1010];\nstring ope;\nint pos, size;\n\nvoid print(){\n  //cout << \"\\\"\";\n  for(int i=0;i<=size;i++){\n    if(pos == i) cout << \"^\";\n    if(i >= size) break;\n    cout << buf[i];\n  }\n  //cout << \"\\\"\";\n  cout << endl;\n}\n\nvoid forwardWord(){\n  for(;pos<size;pos++){\n    if(buf[pos] != ' '){\n      for(;pos<size;pos++) if(buf[pos] == ' ') break;\n      return;\n    }\n  }\n}\n\nvoid backwardWord(){\n  for(;pos>0;pos--){\n    if(buf[pos] != ' '){\n      for(;pos>0;pos--) if(buf[pos-1] == ' ') break;\n      return;\n    }\n  }\n}\n\nvoid insert(string str){\n  if(pos == size){\n    for(int i=0;i<str.size();i++) buf[pos++] = str[i];\n  }else{\n    for(int i=size-1;i>=0;i--){\n      buf[i+str.size()] = buf[i];\n      if(i == pos) break;\n    }\n    for(int j=0;j<str.size();j++) buf[pos+j] = str[j];\n  }\n  pos += str.size();\n  size += str.size();\n}\n\nvoid deleteChar(){\n  if(pos == size) return;\n  for(int i=pos+1;i<size;i++) buf[i-1] = buf[i];\n  size--;\n}\n\nvoid deleteWord(){\n  bool f = false;\n  int i;\n  for(i=pos;i<size;i++){\n    if(buf[i] != ' '){\n      f = true;\n      break;\n    }\n  }\n  if(!f) return;  \n  for(;i<size;i++){\n    if(buf[i] == ' ') break;\n  }\n\n  int j = pos;\n  for(int k=i;k<size;k++){\n    buf[j++] = buf[k];\n  }\n  size -= i - pos;\n}\n\nmain(){\n  int tc, n;\n  cin >> tc;\n  getchar();\n  while(tc--){\n    pos = size = 0;\n    getline(cin, ope);\n    insert(ope);\n    pos = 0;\n    cin >> n;\n    getchar();\n    for(int i=0;i<n;i++){\n      getline(cin, ope);\n      if(ope == \"forward char\" && pos + 1 < size) pos++;\n      else if(ope == \"forward word\") forwardWord();\n      else if(ope == \"backward char\" && pos) pos--;\n      else if(ope == \"backward word\") backwardWord();\n      else if(ope.substr(0, 6) == \"insert\"){\n        insert(ope.substr(8, (int)ope.size()-9));\n      }else if(ope == \"delete char\") deleteChar();\n      else if(ope == \"delete word\") deleteWord();\n      //print();\n      if(pos < 0){\n        for(int j=0;j<1000000000;j++);\n      }\n    }\n    print();\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cmath>\nusing namespace std;\n\nint main()\n{\n    int nb_cas;\n    cin>>nb_cas;\n    cin.ignore();\n    while(nb_cas--)\n    {\n        string texte;\n        getline(cin,texte);\n        int nb_op;\n        cin>>nb_op;\n        int curseur = -1;\n        for(int c=0;c<nb_op;c++)\n        {\n            string s1,s2;\n            cin>>s1;\n            cin.ignore();\n            getline(cin,s2);\n            if(s1==\"forward\"||s1==\"backward\")\n            {\n                int d = (s1==\"forward\"?1:-1);\n                if(s2==\"char\"&&curseur>=-1&&curseur<(int)texte.size()) curseur+=d;\n                else if(s2==\"word\"){while(curseur>= -1 && curseur<(int)texte.size()&&texte[curseur+1]==' ')curseur+=d; while(curseur>=-1&&curseur<(int)texte.size()&&(curseur+1>=(int)texte.size()||texte[curseur+1]!=' '))\n                {\n                    curseur += d;\n                    if(s2==\"char\") break;\n                }}\n                curseur = max(curseur,-1);\n                curseur = min(curseur,(int)texte.size()-1);\n            }\n            else if(s1==\"delete\")\n            {\n                if(s2==\"char\"&&curseur+1<(int)texte.size()){ texte = texte.substr(0,curseur+1)+(curseur+2<(int)texte.size()?texte.substr(curseur+2):\"\");}\n                else if(s2==\"word\")\n                {\n                    int finMot = curseur+1;\n                    while(finMot>=0&&finMot<texte.size()&&texte[finMot]==' ') finMot++;\n                    while(finMot<(int)texte.size()&&texte[finMot]!=' ')\n                    {\n                        finMot ++;\n                    }\n                    texte = texte.substr(0,curseur+1)+(finMot < texte.size()?texte.substr(finMot):\"\");\n                }\n            }\n            else\n            {\n                s2 = s2.substr(1,s2.size()-2);\n                texte = texte.substr(0,curseur+1)+s2+(curseur+1<(int)texte.size()?texte.substr(curseur+1):\"\");\n                curseur += s2.size();\n            }\n        }\n        cout<<texte.substr(0,curseur+1)+\"^\"+(curseur+1<(int)texte.size()?texte.substr(curseur+1):\"\")<<endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#define S_N 1010\nusing namespace std;\n\nint dataN, cmdN;\nstring text, cmd1,cmd2;\nchar s[S_N];\nint pos, index;\n\nvoid pr(){\n  string s1 = text.substr(0,pos);\n  string s2=\"\";\n\n  if( pos<text.length() )\n    s2 = text.substr(pos);\n\n  cout << s1<< \"^\" << s2 << endl;\n}\n\nint main(){\n\n  cin >> dataN;\n  fgets( s, S_N, stdin ); // üsÇÝÝ\n  for( int loop=0;loop<dataN;loop++ ){\n    fgets( s, S_N, stdin );\n    text=s;\n    text = text.substr( 0,text.length()-1 );\n\n    pos=0;\n    cin >> cmdN;\n    for( int cmdL=0;cmdL<cmdN;cmdL++ ){\n      cin >> cmd1 ;\n      fgets( s,S_N,stdin );      cmd2=s;\n      // æªÌXy[XÆöÌüsðí\n      cmd2 = cmd2.substr( 1,cmd2.length()-2 );\n\n      if( cmd1==\"forward\" ){\n\tif( cmd2==\"char\" ){\n\t  pos = min( pos+1,(int)text.length() );\n\t}else{\n\t  // wordÌÅãöÖÚ® (space ðw·æ¤ÉÚ®)\n\t  for( ;pos<text.length() && text[pos]==' ';pos++ );\n\t  for( ;pos<text.length() && text[pos]!=' ';pos++ );\n\t}\n      }else if( cmd1==\"backward\" ){\n\tif( cmd2==\"char\" ){\n\t  pos = max( pos-1,0);\n\t}else{\n\t  // word ÌæªÖÚ®\n\t  for( ;pos>0 && text[pos-1]==' ';--pos );\n\t  for( ;pos>0 && text[pos-1]!=' ';--pos );\n\t}\n      }else if( cmd1==\"insert\" ){\n\tif( cmd2.length()>2 ){ // cmd2==\"\" ÅÍÈ¢\n\t  cmd2 = cmd2.substr( 1,cmd2.length()-2 );\n\t  string s1=text.substr(0,pos), s2=\"\";\n\t  if( pos<text.length() )\n\t    s2=text.substr(pos);\n\t  text = s1 + cmd2 + s2;\n\t  pos += cmd2.length();\n\t}\n      }else if( cmd1==\"delete\" ){\n\tif( cmd2==\"char\" ){\n\t  if( pos<text.length() )\n\t    text.erase( text.begin()+pos );\n\t}else{\n\t  int s=pos, t;\n\t  for( ;text[s]==' ';s++ );\n\t  if( s<text.length() ){\n\t    for( t=s;text[t]!=' ' && t<text.length();t++ );\n\t    text = text.substr(0,pos) + text.substr(t);\n\t  }\n\t}\n      }\n    }\n    pr();\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#define S_N 1010\nusing namespace std;\n\nint dataN, cmdN;\nstring text, cmd1,cmd2;\nchar s[S_N];\nint pos, index;\n\nvoid pr(){\n  string s1 = text.substr(0,pos);\n  string s2=\"\";\n\n  if( pos<text.length() )\n    s2 = text.substr(pos);\n\n  cout << s1<< \"^\" << s2 << endl;\n}\n\nint main(){\n\n  cin >> dataN;\n  fgets( s, S_N, stdin ); // üsÇÝÝ\n  for( int loop=0;loop<dataN;loop++ ){\n    fgets( s, S_N, stdin );\n    text=s;\n    text = text.substr( 0,text.length()-1 );\n\n    pos=0;\n    cin >> cmdN;\n    for( int cmdL=0;cmdL<cmdN;cmdL++ ){\n      cin >> cmd1 ;\n      fgets( s,S_N,stdin );      cmd2=s;\n      // æªÌXy[XÆöÌüsðí\n      cmd2 = cmd2.substr( 1,cmd2.length()-2 );\n\n      if( cmd1==\"forward\" ){\n\tif( cmd2==\"char\" ){\n\t  pos = min( pos+1,(int)text.length() );\n\t}else{\n\t  // wordÌÅãöÖÚ® (space ðw·æ¤ÉÚ®)\n\t  for( ;pos<text.length() && text[pos]==' ';pos++ );\n\t  for( ;pos<text.length() && text[pos]!=' ';pos++ );\n\t}\n      }else if( cmd1==\"backward\" ){\n\tif( cmd2==\"char\" ){\n\t  pos = max( pos-1,0);\n\t}else{\n\t  // word ÌæªÖÚ®\n\t  for( ;pos>0 && text[pos]==' ';--pos );\n\t  for( ;pos>0 && text[pos]!=' ';--pos );\n\t}\n      }else if( cmd1==\"insert\" ){\n\tif( cmd2.length()>2 ){ // cmd2==\"\" ÅÍÈ¢\n\t  cmd2 = cmd2.substr( 1,cmd2.length()-2 );\n\t  string s1=text.substr(0,pos), s2=\"\";\n\t  if( pos<text.length() )\n\t    s2=text.substr(pos);\n\t  text = s1 + cmd2 + s2;\n\t  pos += cmd2.length();\n\t}\n      }else if( cmd1==\"delete\" ){\n\tif( cmd2==\"char\" ){\n\t  if( pos<text.length() )\n\t    text.erase( text.begin()+pos );\n\t}else{\n\t  int s=pos, t;\n\t  for( ;text[s]==' ';s++ );\n\t  if( s<text.length() ){\n\t    for( t=s;text[t]!=' ' && t<text.length();t++ );\n\t    text = text.substr(0,pos) + text.substr(t);\n\t  }\n\t}\n      }\n    }\n    pr();\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstdlib>\n#include <cmath>\n#include <climits>\n#include <cfloat>\n#include <cstring>\n#include <map>\n#include <utility>\n#include <set>\n#include <iostream>\n#include <memory>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <functional>\n#include <sstream>\n#include <fstream>\n#include <complex>\n#include <stack>\n#include <queue>\n\nusing namespace std;\ntypedef long long LL;\ntypedef pair<int, int> PII;\nstatic const double EPS = 1e-5;\n\n#define FOR(i,k,n) for (int i=(k); i<(int)(n); ++i)\n#define REP(i,n) FOR(i,0,n)\n\nint main(void){\n  int N;\n  cin>>N;\n  cin.ignore();\n  while(N--){\n    string buf;\n    getline(cin,buf);\n    int M;\n    cin>>M;\n    cin.ignore();\n    string::iterator it = buf.begin();\n    while(M--){\n      /*\n      {\n      int dist = distance(buf.begin(),it);\n      REP(i,buf.size()){\n        if(i==dist)putchar('^');\n        putchar(buf[i]);\n      }\n      if(it==buf.end())putchar('^');\n      putchar('\\n');\n      }\n      */\n      string command;\n      getline(cin,command);\n      if(command==\"forward char\"&&it!=buf.end()) it++;\n      if(command==\"backward char\"&&it!=buf.begin()) it--;\n      if(command==\"forward word\"){\n        while(it!=buf.end()&&*it==' ')it++;\n        while(it!=buf.end()&&*it!=' ')it++;\n      }\n      if(command==\"backward word\"){\n        while(it!=buf.begin()&&(*it)==' ')it--;\n        while(it!=buf.begin()&&(*it)!=' ')it--;\n      }\n      if(command==\"delete char\"&&it!=buf.end()) it = buf.erase(it);\n      if(command==\"delete word\"){\n        string::iterator it2 = find(it,buf.end(),' ');\n        //if(it2!=buf.end())it2++;\n        it = buf.erase(it,it2);\n      }\n      if(command.find(\"insert\",0)!=string::npos){\n        string ins = command.substr(8);\n        string::iterator ir = ins.end()-1;\n        ins.erase(ir);\n        //cout<<ins<<endl;\n        REP(i,ins.size()){\n          it = buf.insert(it,ins[i]);\n          it++;\n        }\n      }\n    }\n    int dist = distance(buf.begin(),it);\n    REP(i,buf.size()){\n      if(i==dist)putchar('^');\n      putchar(buf[i]);\n    }\n    if(it==buf.end())putchar('^');\n    putchar('\\n');\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <string>\n#include <iostream>\n#include <list>\n\nusing namespace std;\n\n#define rep(i,n) for(int i=0; i<n; i++)\n\nvoid solve(){\n    string t;\n    getline(cin,t);\n    list<char> s(t.begin(), t.end());\n\n    auto it = s.begin();\n    int n; cin>>n; cin.get();\n    while(n--){\n        string cmd; getline(cin,cmd);\n\n        if(cmd==\"forward char\"){\n            if(it!=s.end()) ++it;\n        } else if(cmd==\"forward word\"){\n            while(it!=s.end() && *it==' ') ++it;\n            while(it!=s.end() && *it!=' ') ++it;\n        } else if(cmd==\"backward char\"){\n            if(it!=s.begin()) --it;\n        } else if(cmd==\"backward word\"){\n            while(it!=s.begin() && *--it==' ') continue;\n            while(it!=s.begin()){\n                --it;\n                if(*it==' '){\n                    ++it;\n                    break;\n                }\n            }\n        } else if(cmd.substr(0,6)==\"insert\"){\n            int i = cmd.find('\"') + 1;\n            int j = cmd.find('\"',i);\n            s.insert(it,cmd.begin()+i,cmd.begin()+j);\n        } else if(cmd==\"delete char\"){\n            if(it!=s.end()) it = s.erase(it);\n        } else if(cmd==\"delete word\"){\n            auto it2 = it;\n            while(it2!=s.end() && *it2==' ') ++it2;\n            if(it2==s.end()) continue;\n            while(it2!=s.end() && *it2!=' ') ++it2;\n            it=s.erase(it,it2);\n        }\n    }\n\n    for(auto i=s.begin();;++i){\n        if(i==it)\n            cout<<'^';\n        if(i==s.end())\n            break;\n        cout<<*i;\n    }\n    cout<<endl;\n}\n\nint main(){\n    int t; cin>>t;\n    cin.get();\n    rep(i,t) solve();\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <string>\n#include <algorithm>\n#include <cctype>\nusing namespace std;\n\nstring str, op;\nint len, cursor;\n\nstring make_str(string in){\n  int i;\n  for(i = 0 ; in[i] != '\"' ; i++);\n  string out = \"\";\n  for(i = i+1 ; in[i] != '\"' ; i++){\n    out += in[i];\n  }\n  return out;\n}\n\n\nvoid forward_char(){\n  if(cursor < len) cursor++;\n}\n\nvoid forward_word(){\n  if(len == 0) return;\n  bool space = 0;\n  int tmp = 0;\n  for(tmp = cursor ; ; tmp++){\n    if(str[tmp+1] == ' '){\n      space = 1;\n    }\n    if(space) break;\n    \n    if(tmp >= len){\n      cursor = len;\n      return;\n    }\n  }\n  \n  while(1){\n    if(tmp >= len){\n      cursor = len;\n      return;\n    }\n    if(str[tmp] != ' ') break;\n    tmp++;\n  }\n  \n  while(1){\n    if(tmp >= len){\n      cursor = len;\n      return;\n    }\n    if(str[tmp+1] == ' '){\n      cursor = tmp;\n      return;\n    }\n   tmp++;\n  }\n}\n\nvoid backward_char(){\n  if(len == 0) return;\n  if(cursor > 0) cursor--;\n  return;\n}\n\nvoid backward_word(){\n  if(len == 0) return;\n  bool space = 0;\n  int tmp = 0;\n  for(tmp = cursor ; ; tmp--){\n    if(str[tmp] == ' ') space = 1;\n    if(space) break;\n    if(tmp <= 0){\n      cursor = 0;\n      return;\n    }\n  }\n\n  while(1){\n    if(tmp <= 0){\n      cursor = 0;\n      return;\n    }\n    if(str[tmp] != ' '){\n      cursor = tmp;\n      return;\n    }\n    tmp--;\n  }\n}\n\nvoid insert_text(string in){\n  str.insert(cursor+1, in);\n  cursor += in.size();\n  len += in.size();\n}\n\nvoid delete_char(){\n  if(len == 0) return;\n  if(cursor < len){\n    str.erase(str.begin()+cursor+1);\n    len--;\n  }\n}\n\nvoid delete_word(){\n  if(len == 0) return;\n  int space = 0;\n  int tmp = 0;\n  cursor--;\n  for(tmp = cursor+1 ;  ;){\n    str.erase(str.begin()+tmp);\n    len--;\n    if(str[tmp] == ' ') space++;\n    if(space == 1 || tmp >= len) return;\n  }\n}\n\nint main(){\n  int T;\n  cin >> T;\n  cin.ignore();\n  while(T--){\n    str = \"A\";\n    getline(cin, str);\n    len = str.size()-1;\n    if(len < 0) len = 0;\n    cursor = 0;\n    int N;\n    cin >> N;\n    cin.ignore();\n    while(N--){\n      getline(cin, op);\n      if(op == \"forward char\") forward_char();\n      else if(op == \"forward word\") forward_word();\n      else if(op == \"backward char\") backward_char();\n      else if(op == \"backward word\") backward_word();\n      else if(op.substr(0, 6) == \"insert\") insert_text(make_str(op));\n      else if(op == \"delete char\") delete_char();\n      else if(op == \"delete word\") delete_word();\n      /*\n      cout << op << endl;\n      for(int i = 0 ; i <= len ; i++){\n\tif(i == cursor) cout << str[i] << '^';\n\telse cout << str[i];\n      }\n      cout << endl;\n      printf(\"cursor = %d\\n\", cursor);\n      printf(\"len = %d\\n\", len);\n      cout << endl;*/\n    }\n    \n    if(len == 0){\n      cout << '^' << endl;\n      continue;\n    }\n    for(int i = 0 ; i <= len ; i++){\n      if(i == cursor) cout << str[i] << '^';\n      else cout << str[i];\n    }\n    cout << endl;\n  }\n  return 0;\n}\n\n    "
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <climits>\n#include <cmath>\n#include <ctime>\n#include <cassert>\n#include <iostream>\n#include <fstream>\n#include <sstream>\n#include <iomanip>\n#include <complex>\n#include <string>\n#include <vector>\n#include <list>\n#include <deque>\n#include <stack>\n#include <queue>\n#include <set>\n#include <map>\n#include <bitset>\n#include <iterator>\n#include <functional>\n#include <utility>\n#include <algorithm>\n#include <numeric>\n#include <typeinfo>\n\nusing namespace std;\n\n#define dump(n) cerr<<\"# \"<<#n<<\"=\"<<(n)<<endl\n#define repi(i,a,b) for(int i=int(a);i<int(b);i++)\n#define peri(i,a,b) for(int i=int(b);i-->int(a);)\n#define rep(i,n) repi(i,0,n)\n#define per(i,n) peri(i,0,n)\n#define iter(c) __typeof__((c).begin())\n#define foreach(i,c) for(iter(c) i=(c).begin();i!=(c).end();++i)\n#define allof(c) (c).begin(),(c).end()\n#define mp make_pair\n\ntypedef unsigned int uint;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef vector<double> vd;\ntypedef vector<vd> vvd;\ntypedef vector<string> vs;\ntypedef pair<int,int> pii;\n\nvoid solve()\n{\n\tlist<char> s;\n\t{\n\t\tstring t; getline(cin,t);\n\t\trep(i,t.size())\n\t\t\ts.push_back(t[i]);\n\t}\n\t\n\titer(s) it=s.begin();\n\tint n; scanf(\"%d \",&n);\n\twhile(n--){\n\t\tstring cmd; getline(cin,cmd);\n\t\tif(cmd==\"forward char\")\n\t\t\tif(it!=s.end())\n\t\t\t\t++it;\n\t\tif(cmd==\"forward word\"){\n\t\t\twhile(it!=s.end() && *it==' ')\n\t\t\t\t++it;\n\t\t\twhile(it!=s.end() && *it!=' ')\n\t\t\t\t++it;\n\t\t}\n\t\tif(cmd==\"backward char\")\n\t\t\tif(it!=s.begin())\n\t\t\t\t--it;\n\t\tif(cmd==\"backward word\"){\n\t\t\twhile(it!=s.begin() && *--it==' ')\n\t\t\t\t;\n\t\t\twhile(it!=s.begin() && *--it!=' ')\n\t\t\t\t;\n\t\t}\n\t\tif(cmd.substr(0,6)==\"insert\"){\n\t\t\tint i=cmd.find('\"')+1,j=cmd.find('\"',i);\n\t\t\ts.insert(it,cmd.begin()+i,cmd.begin()+j);\n\t\t}\n\t\tif(cmd==\"delete char\")\n\t\t\tif(it!=s.end())\n\t\t\t\tit=s.erase(it);\n\t\tif(cmd==\"delete word\"){\n\t\t\twhile(it!=s.end() && *it==' ')\n\t\t\t\tit=s.erase(it);\n\t\t\twhile(it!=s.end() && *it!=' ')\n\t\t\t\tit=s.erase(it);\n\t\t}\n\t}\n\tfor(iter(s) i=s.begin();;++i){\n\t\tif(i==it)\n\t\t\tcout<<'^';\n\t\tif(i==s.end())\n\t\t\tbreak;\n\t\tcout<<*i;\n\t}\n\tcout<<endl;\n}\n\nint main()\n{\n\tint t; scanf(\"%d \",&t);\n\twhile(t--)\n\t\tsolve();\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstring>\nusing namespace std;\n\nchar buffer[1024], command[1024];\n\nint main()\n{\n  int T;\n  scanf(\"%d\\n\", &T);\n  while (T--) {\n    int M;\n    fgets(buffer, sizeof(buffer), stdin);\n    *strchr(buffer, '\\n') = '\\0';\n    scanf(\"%d\\n\", &M);\n    int cur = 0;\n    for (int i = 0; i < M; ++i) {\n      fgets(command, sizeof(command), stdin);\n      if (strstr(command, \"insert\")) {\n        char* first = strchr(command, '\"') + 1;\n        char* last = strchr(first, '\"');\n        int length = last - first;\n        memmove(buffer + cur + length, buffer + cur, length);\n        memcpy(buffer + cur, first, length);\n        cur += length;\n      } else if (strstr(command, \"forward char\")) {\n        if (buffer[cur])\n          ++cur;\n      } else if (strstr(command, \"forward word\")) {\n        for (; buffer[cur]; ++cur)\n          if (buffer[cur] != ' ')\n            break;\n        for (; buffer[cur]; ++cur)\n          if (buffer[cur] == ' ')\n            break;\n      } else if (strstr(command, \"backward char\")) {\n        if (cur > 0)\n          --cur;\n      } else if (strstr(command, \"backward word\")) {\n        for (; cur > 0; --cur)\n          if (buffer[cur-1] != ' ')\n            break;\n        for (; cur > 0; --cur)\n          if (buffer[cur-1] == ' ')\n            break;\n      } else if (strstr(command, \"delete char\")) {\n        int j;\n        for (j = cur + 1; buffer[j]; ++j)\n          buffer[j-1] = buffer[j];\n        buffer[j-1] = '\\0';\n      } else if (strstr(command, \"delete word\")) {\n        int j, k;\n        for (j = cur; buffer[j]; ++j)\n          if (buffer[j] != ' ')\n            break;\n        for (; buffer[j]; ++j)\n          if (buffer[j] == ' ')\n            break;\n        for (k = cur; buffer[j]; ++j, ++k)\n          buffer[k] = buffer[j];\n        buffer[k] = '\\0';\n      }\n    }\n    for (int i = 0; buffer[i]; ++i) {\n      if (i == cur)\n        putchar('^');\n      putchar(buffer[i]);\n    }\n    if (buffer[cur] == '\\0')\n      putchar('^');\n    putchar('\\n');\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <sstream>\n#include <string>\nusing namespace std;\n\nint GetForwardLast( int cs, string t )\n{\n    if ( cs == (int)t.size() ) return cs;\n\n    bool flag = false;\n    for ( int i = cs; i < (int)t.size(); i++ )\n    {\n        if ( t[i] == ' ' )\n        {\n            if ( flag )\n            {\n                return i;\n            }\n        }\n        else\n        {\n            flag = true;\n        }\n    }\n    return (int)t.size();\n}\n\nint GetBackwardFirst( int cs, string t )\n{\n    if ( cs == 0 ) return 0;\n\n    bool flag = false;\n    for ( int i = cs-1; i >= 0; i-- )\n    {\n        if ( t[i] == ' ' )\n        {\n            if ( flag )\n            {\n                return i + 1;\n            }\n        }\n        else\n        {\n            flag = true;\n        }\n    }\n    return 0;\n}\n\nint main( void )\n{\n    istringstream is;\n    string line;\n\n    getline( cin, line );\n    is.str( line );\n    int n;\n    is >> n;\n    is.clear();\n\n    for ( int i = 0; i < n; i++ )\n    {\n        int cs = 0;\n\n        getline( cin, line );\n        string text = line;\n\n        getline( cin, line );\n        is.str( line );\n        int m;\n        is >> m;\n        is.clear();\n\n        for ( int j = 0; j < m; j++ )\n        {\n            getline( cin, line );\n            string c = line;\n            is.str( c );\n            string c1, c2;\n            is >> c1;\n            getline( is, c2 );\n            c2 = c2.substr( 1 );\n            is.clear();\n\n            int cs_f = GetForwardLast( cs, text );\n            int cs_b = GetBackwardFirst( cs, text );\n\n            if ( c1 == \"forward\" )\n            {\n                if ( c2 == \"char\" )\n                {\n                    if ( cs + 1 <= (int)text.size() ) cs++;\n                }\n                else\n                {\n                    cs = cs_f;\n                }\n            }\n            else if ( c1 == \"backward\" )\n            {\n                if ( c2 == \"char\" )\n                {\n                    if ( cs - 1 >= 0 ) cs--;\n                }\n                else\n                {\n                    cs = cs_b;\n                }\n            }\n            else if ( c1 == \"insert\" )\n            {\n                string next;\n                string trim;\n                for ( int k = 1; k + 1 < (int)c2.size(); k++ ) trim += c2[k];\n                for ( int k = 0; k < cs; k++ ) next += text[k];\n                for ( int k = 0; k < (int)trim.size(); k++ ) next += trim[k];\n                for ( int k = cs; k < (int)text.size(); k++ ) next += text[k];\n                text = next;\n                cs += (int)trim.size();\n            }\n            else if ( c1 == \"delete\" )\n            {\n                if ( c2 == \"char\" )\n                {\n                    if ( cs < (int)text.size() )\n                    {\n                        string next = text.substr( 0, cs ) + text.substr( cs+1 );\n                        text = next;\n                    }\n                }\n                else\n                {\n                    if ( cs < (int)text.size() )\n                    {\n                        string next = text.substr( 0, cs ) + text.substr( cs_f );\n                        text = next;\n                    }\n                }\n            }\n        }\n\n        for ( int i = 0; i <= (int)text.size(); i++ )\n        {\n            if ( i == cs ) cout << \"^\";\n            if ( i < (int)text.size() ) cout << text[i];\n        }\n        cout << endl;\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <map>\n#include <set>\n#include <queue>\n#include <list>\n#include <stack>\n#include <algorithm>\n#include <functional>\n#include <numeric>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <climits>\n#include <sstream>\nusing namespace std;\n\n#define REP(i,a,n) for(i=a; i<n; i++)\n#define rep(i,n) REP(i,0,n)\n#define all(x) x.begin(), x.end()\n#define rall(x) x.rbegin(), x.rend()\n#define foreach(it,x) for(typeof(x.begin()) it=x.begin(); it!=x.end(); it++)\n\n/*\n  AOJ :: 1101\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1101&lang=jp\n */\n\n// YET_SYSTEM_TEST\n\nlist<char> buffer;\nlist<char>::iterator it;\n\nvoid build_buffer(const string& in){\n    int i, n = in.length();\n    buffer.clear();\n    rep(i,n) buffer.push_back(in[i]);\n    it = buffer.begin();\n}\n\nvoid forward_char(){\n    if( it != buffer.end() ) it++;\n}\nvoid forward_word(){\n    bool f = false;\n    while( it != buffer.end() ){\n        if( f && *it == ' ' ) break;\n        if( *it != ' ' ) f = true;\n        it++;\n    }\n}\n\nvoid backward_char(){\n    if( it != buffer.begin() ) it--;\n}\nvoid backward_word(){\n    while( it != buffer.begin() ){\n        if( *it == ' ' ) break;\n        it--;\n    }\n    while( it != buffer.begin() && *it == ' ' ){\n        it--;\n    }\n}\n\nvoid delete_char(){\n    if( it != buffer.end() ) it = buffer.erase(it);\n}\nvoid delete_word(){\n    // ツ催渉可づ行pace only\n    while( it != buffer.end() && *it == ' ' ){\n        it = buffer.erase(it);\n    }\n    while( it != buffer.end() && *it != ' ' ){\n        it = buffer.erase(it);\n    }\n}\n\nvoid insertion(const string& in){\n    int i, n = in.length();\n\n    rep(i,n){\n        buffer.insert(it, in[i]);\n    }\n}\n\nint main(){\n    int T,i,n;\n    string in;\n\n    cin >> T; cin.ignore();\n    while( T-- ){\n        getline(cin, in);\n        cin >> n; cin.ignore();\n\n        build_buffer(in);\n\n        rep(i,n){\n            getline(cin, in);\n            if( in == \"forward char\" ){\n                forward_char();\n            }\n            else if( in == \"forward word\" ){\n                forward_word();\n            }\n            else if( in == \"backward char\" ){\n                backward_char();\n            }\n            else if( in == \"backward word\" ){\n                backward_word();\n            }\n            else if( in.substr(0,6)  == \"insert\" ){\n                string tmp = in.substr(8,in.length() - 9);\n                //cout << tmp << endl;\n                insertion(tmp);\n            }\n            else if( in == \"delete char\" ){\n                delete_char();\n            }\n            else if( in == \"delete word\" ){\n                delete_word();\n            }\n\n            // debug\n            /*\n            printf(\"%d : \", i);\n            foreach(s,buffer){\n                if( s == it ) putchar('^');\n                cout << *s;\n            }\n            if( it == buffer.end() ) putchar('^');\n            cout << endl;\n            */\n        }\n\n        // output\n        foreach(s,buffer){\n            if( s == it ) putchar('^');\n            cout << *s;\n        }\n        if( it == buffer.end() ) putchar('^');\n        cout << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\nusing namespace std;\nclass SimpleEditor{\npublic:\n  int cur;\n  string s;\n  SimpleEditor(string s):s(s),cur(s.length()-1){}\n  void ForwardChar(){\n    ++cur;\n    if(cur>=s.length())cur=s.length()-1;\n  }\n  void BackwardChar(){\n    --cur;\n    if(cur<0)cur=0;\n  }\n  void ForwardWord(){\n    while(s[cur]==' ')++cur;\n    while(s[cur]!=' ')++cur;\n    BackwardChar();\n  }\n  void BackwardWord(){\n    while(s[cur]==' ')--cur;\n    while(s[cur]!=' ')--cur;\n    ForwardChar();\n  }\n  void Insert(string text){\n    s.insert(s.begin()+cur,text.begin()+7,text.end()-1);\n  }\n  void DeleteChar(){\n    if(s.begin()+cur+1!=s.end())\n      s.erase(s.begin()+cur+1);\n  }\n  void DeleteWord(){\n    while(s[cur]==' ')DeleteChar();\n    while(s[cur]!=' ')DeleteChar();\n  }\n  string ToString(){\n    string ret;\n    for(int i=0;i<s.length();++i){\n      ret+=s[i];\n      if(i==cur)\n\tret+='^';\n    }\n    return ret;\n  }\n};\nint main(){\n  string dam;\n  int T;\n  cin >> T;\n  getline(cin,dam);\n  for(int tc=1;tc<=T;++tc){\n    string s;\n    getline(cin,s);\n    SimpleEditor se(s);\n    cout << \"NUMBER OF TEST CASE : \" << T << \" INITIAL STRING : \" << s << endl;\n    int t;\n    cin >> t;\n    getline(cin,dam);\n    for(int i = 0; i < t; ++i){\n      string inst;\n      getline(cin,inst);\n      cout<<i<<\"/\" <<t<<\":\"<<\" INST:\" <<inst<<\" ED:\"<<se.ToString() << endl;\n      if(inst==\"forward char\")se.ForwardChar();\n      if(inst==\"forward word\")se.ForwardWord();\n      if(inst==\"backward char\")se.BackwardChar();\n      if(inst==\"backward word\")se.BackwardWord();\n      if(inst.find(\"insert\")!=string::npos)se.Insert(inst);\n      if(inst==\"delete char\")se.DeleteChar();\n      if(inst==\"delete word\")se.DeleteWord();\n    }\n    cout << se.ToString() << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n\nusing namespace std;\n\n#define rep(i, n) for (int i = 0; i < int(n); ++i)\n\nvoid solve() {\n  string str;\n  getline(cin, str);\n  int n;\n  cin >> n;\n  cin.ignore();\n  string buf;\n  int cur = 0;\n  rep (_, n) {\n    getline(cin, buf);\n    if (buf == \"forward char\") {\n      cur = min(cur + 1, (int)str.size());\n    } else if (buf == \"forward word\") {\n      if (cur == (int)str.size()) continue;\n      while ((int)str.size() != cur && str[cur] == ' ') ++cur;\n      while ((int)str.size() != cur && str[cur] != ' ') ++cur;\n    } else if (buf == \"backward char\") {\n      cur = max(cur - 1, 0);\n    } else if (buf == \"backward word\") {\n      if (cur == 0) continue;\n      while (0 != cur && str[cur] == ' ') --cur;\n      while (0 != cur && str[cur] != ' ') --cur;\n    } else if (buf == \"delete char\") {\n      if (cur == (int)str.size()) continue;\n      str = str.substr(0, cur) + str.substr(cur + 1);\n    } else if (buf == \"delete word\") {\n      while ((int)str.size() != cur && str[cur] == ' ') ++cur;\n      if (cur == (int)str.size()) continue;\n      do {\n\tstr = str.substr(0, cur) + str.substr(cur + 1);\n      } while (cur != (int)str.size() && str[cur] != ' ');\n    } else {\n      rep (i, buf.size()) if (buf[i] == ' ') {\n\tstring ins = buf.substr(i + 1);\n\tins = ins.substr(1, ins.size() - 2);\n\tstr = str.substr(0, cur) + ins + str.substr(cur);\n\tcur += ins.size();\n      }\n    }\n  }\n  rep (i, str.size() + 1) {\n    if (i == cur) cout << \"^\";\n    if (i < (int)str.size()) cout << str[i];\n  }\n  cout << endl;\n}\n\nint main() {\n  int t;\n  cin >> t;\n  cin.ignore();\n  rep (i, t) solve();\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<vector>\nusing namespace std;\n\nint main(){\n  int n;\n  cin >>n;\n  cin.ignore();\n  for(int i=0;i<n;i++){\n    string str;\n    int cn,pos;\n    if(!getline(cin,str)){\n      str = \"\";\n    }\n    cin >> cn;\n    pos = 0;\n    for(int j=0;j<cn;j++){\n      string command,target;\n      char ch;\n      cin >> command;\n      getline(cin,target);\n      target.erase(0,1);\n      if(command == \"forward\"){\n        if(pos<str.size()){\n          if(target == \"word\"){\n            do{\n              pos++;\n            }while(pos<str.size()&&str[pos]!=' ');\n          }else{\n            pos++;\n          }\n        }\n      }else if(command == \"delete\"){\n        if(str.size()!=0&&pos!=str.size()){\n          if(target == \"word\"){\n            do{\n              str.erase(pos,1);\n            }while(str[pos]!=' ');\n          }else{\n            str.erase(pos,1);\n          }\n        }\n      }else if(command == \"backward\"){\n        if(pos>0){\n          if(target == \"word\"){\n            do{\n              pos--;\n            }while(pos>0&&str[pos]!=' ');\n          }else{\n            pos--;\n          }\n        }\n      }else if(command == \"insert\"){\n        target = target.substr(1,target.size()-2);\n        str.insert(pos,target);\n        pos += target.size();\n      }\n      /*\n        if(pos>=str.size()){\n        pos = str.size() -1;\n        }else if(pos<0){\n        pos = 0;\n        }\n      */\n      //cout << str << endl;\n    }\n    str.insert(pos,\"^\");\n    cout << str << endl;\n  }\n  \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstdlib>\n#include <cmath>\n#include <climits>\n#include <cfloat>\n#include <map>\n#include <utility>\n#include <set>\n#include <iostream>\n#include <memory>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <functional>\n#include <sstream>\n#include <complex>\n#include <stack>\n#include <queue>\n#include <cstring>\n#include <sstream>\n#ifndef M_PI\n#define M_PI 3.1415926535897932384626433832795\n#endif\nusing namespace std;\nstatic const double EPS = 1e-5;\ntypedef long long ll;\ntypedef pair<int,int> PI;\n#define rep(i,n) for(int i=0;i<(int)n;++i)\n#define FOR(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i)\n#define ALL(c) (c).begin(), (c).end()\n#define mp(a,b) make_pair(a,b)\n#define pb(a) push_back(a)\n#define F first\n#define S second\n\nint dx[]={0,1,0,-1};\nint dy[]={1,0,-1,0};\n\nstring in;\nint pos;\n\n\nmain(){\n  int n;\n  cin>>n;\n  cin.ignore();\n  while(n--){\n    pos=0;\n    getline(cin,in);\n    int t;\n    cin>>t;\n    cin.ignore();\n    while(t--){\n      string com;\n      getline(cin,com);\n      if(com==\"forward char\")pos=min(pos+1,(int)in.size());\n      else if(com==\"backward char\")pos=max(0,pos-1);\n      else if(com==\"forward word\"){\n\twhile(pos<in.size() && in[pos]==' ')++pos;\n\twhile(pos<in.size() && in[pos]!=' ')++pos;\n      }else if(com==\"backward word\"){\n\twhile(pos && in[pos-1]==' ')--pos;\n\twhile(pos && in[pos-1]!=' ')--pos;\n      }else if(com[0]=='i'){\n\tin.insert(pos,com.substr(8,com.size()-9));\n\tpos+=com.size()-9;\n      }else if(com==\"delete char\"){\n\tif(pos<in.size())in.erase(pos,1);\n      }else if(com==\"delete word\"){\n\tint sz=0;\n\twhile(pos+sz<in.size() && in[pos+sz]==' ')++sz;\n\tif(pos+sz==in.size())continue;\n\twhile(pos+sz<in.size() && in[pos+sz]!=' ')++sz;\n\tin.erase(pos,sz);\n      }\n    }\n    rep(i,in.size()){\n      if(i==pos)cout<<'^';\n      cout<<in[i];\n    }\n    if(pos==in.size())cout<<'^';\n    cout<<endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <climits>\n#include <cmath>\n#include <ctime>\n#include <cassert>\n#include <iostream>\n#include <fstream>\n#include <sstream>\n#include <iomanip>\n#include <complex>\n#include <string>\n#include <vector>\n#include <list>\n#include <deque>\n#include <stack>\n#include <queue>\n#include <set>\n#include <map>\n#include <bitset>\n#include <iterator>\n#include <functional>\n#include <utility>\n#include <algorithm>\n#include <numeric>\n#include <typeinfo>\n\nusing namespace std;\n\n#define dump(n) cerr<<\"# \"<<#n<<\"=\"<<(n)<<endl\n#define repi(i,a,b) for(int i=int(a);i<int(b);i++)\n#define peri(i,a,b) for(int i=int(b);i-->int(a);)\n#define rep(i,n) repi(i,0,n)\n#define per(i,n) peri(i,0,n)\n#define iter(c) __typeof__((c).begin())\n#define foreach(i,c) for(iter(c) i=(c).begin();i!=(c).end();++i)\n#define allof(c) (c).begin(),(c).end()\n#define mp make_pair\n\ntypedef unsigned int uint;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef vector<double> vd;\ntypedef vector<vd> vvd;\ntypedef vector<string> vs;\ntypedef pair<int,int> pii;\n\nvoid solve()\n{\n\tlist<char> s;\n\t{\n\t\tstring t; getline(cin,t);\n\t\trep(i,t.size())\n\t\t\ts.push_back(t[i]);\n\t}\n\t\n\titer(s) it=s.begin();\n\tint n; cin>>n; cin.get();\n\twhile(n--){\n\t\tstring cmd; getline(cin,cmd);\n\t\tif(cmd==\"forward char\")\n\t\t\tif(it!=s.end())\n\t\t\t\t++it;\n\t\tif(cmd==\"forward word\"){\n\t\t\twhile(it!=s.end() && *it==' ')\n\t\t\t\t++it;\n\t\t\twhile(it!=s.end() && *it!=' ')\n\t\t\t\t++it;\n\t\t}\n\t\tif(cmd==\"backward char\")\n\t\t\tif(it!=s.begin())\n\t\t\t\t--it;\n\t\tif(cmd==\"backward word\"){\n\t\t\twhile(it!=s.begin() && *--it==' ')\n\t\t\t\t;\n\t\t\twhile(it!=s.begin()){\n\t\t\t\t--it;\n\t\t\t\tif(*it==' '){\n\t\t\t\t\t++it;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(cmd.substr(0,6)==\"insert\"){\n\t\t\tint i=cmd.find('\"')+1,j=cmd.find('\"',i);\n\t\t\ts.insert(it,cmd.begin()+i,cmd.begin()+j);\n\t\t}\n\t\tif(cmd==\"delete char\")\n\t\t\tif(it!=s.end())\n\t\t\t\tit=s.erase(it);\n\t\tif(cmd==\"delete word\"){\n\t\t\titer(s) it2=it;\n\t\t\twhile(it2!=s.end() && *it2==' ')\n\t\t\t\t++it2;\n\t\t\tif(it2==s.end())\n\t\t\t\tcontinue;\n\t\t\twhile(it2!=s.end() && *it2!=' ')\n\t\t\t\t++it2;\n\t\t\tit=s.erase(it,it2);\n\t\t}\n\t}\n\tfor(iter(s) i=s.begin();;++i){\n\t\tif(i==it)\n\t\t\tcout<<'^';\n\t\tif(i==s.end())\n\t\t\tbreak;\n\t\tcout<<*i;\n\t}\n\tcout<<endl;\n}\n\nint main()\n{\n\tint t; cin>>t; cin.get();\n\twhile(t--)\n\t\tsolve();\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\n\nbool isChar(char c) {\n\treturn c != ' ';\n}\n\nint main() {\n\tint N;\n\tcin >> N;\n\tcin.ignore();\n\twhile (N--)\n\t{\n\t\tstring buf;\n\t\tgetline(cin, buf);\n\t\tstring::iterator cur = buf.begin();\n\n\t\tint n;\n\t\tcin >> n;\n\n\t\twhile (n--)\n\t\t{\n\t\t\tstring cmd, arg;\n\t\t\tcin >> cmd;\n\t\t\tcin.ignore();\n\t\t\tgetline(cin, arg);\n\n\t\t\tif (cmd == \"forward\")\n\t\t\t{\n\t\t\t\tif (arg == \"char\" && cur != buf.end()) cur++;\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tcur = find_if(cur, buf.end(), isChar);\n\t\t\t\t\tcur = find(cur, buf.end(), ' ');\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (cmd == \"backward\")\n\t\t\t{\t\t\t\n\t\t\t\tif (arg == \"char\" && cur != buf.begin()) cur--;\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (cur != buf.begin())\n\t\t\t\t\t{\n\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\tcur--;\n\t\t\t\t\t\t} while (cur != buf.begin() && *cur != ' ');\n\t\t\t\t\t}\n\n\t\t\t\t\tif (cur != buf.begin())\n\t\t\t\t\t{\n\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\tcur--;\n\t\t\t\t\t\t\tif (*cur == ' ') { cur++; break; }\n\t\t\t\t\t\t} while (cur != buf.begin());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (cmd == \"delete\")\n\t\t\t{\n\t\t\t\tif (arg == \"char\" && cur != buf.end())\n\t\t\t\t{\n\t\t\t\t\tsize_t pos = cur - buf.begin();\n\t\t\t\t\tbuf = string(buf.begin(), cur) + string(cur+1, buf.end());\n\t\t\t\t\tcur = buf.begin() + pos;\n\t\t\t\t}\n\t\t\t\telse if (cur != buf.end())\n\t\t\t\t{\n\t\t\t\t\tsize_t pos = cur - buf.begin();\n\t\t\t\t\tstring::iterator t = find_if(cur, buf.end(), isChar);\n\t\t\t\t\tt = find(t, buf.end(), ' ');\n\t\t\t\t\tbuf = string(buf.begin(), cur) + string(t, buf.end());\n\t\t\t\t\tcur = buf.begin() + pos;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tsize_t pos = cur - buf.begin() + arg.size() - 2;\n\t\t\t\tbuf = string(buf.begin(), cur) + string(arg.begin()+1, arg.end()-1) + string(cur, buf.end());\n\t\t\t\tcur = buf.begin() + pos;\n\t\t\t}\n\t\t}\n\t\tcout << string(buf.begin(), cur) << '^' << string(cur, buf.end()) << endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cmath>\n#include <string>\n\nusing namespace std;\nint main(){\n\tint n,r;\n\tcin >> n;\n\tcin.ignore();\n\twhile(n--){\n\t\tint cur = 0;\n\t\tstring text, command;\n\t\tgetline(cin, text);\n\t\tint len = text.size();\n\t\tcin\t>> r;\n\t\tcin.ignore();\n\t\twhile(r--){\n\t\t\tgetline(cin, command);\n\t\t\tif(command == \"forward char\"){\n\t\t\t\tcur=min(len, cur+1);\n\t\t\t}else if(command == \"forward word\"){\n\t\t\t\tfor(;cur<len && text[cur] == ' '; cur++);\n\t\t\t\tfor(;cur<len && text[cur] != ' '; cur++);\n\t\t\t}else if(command == \"backward char\"){\n\t\t\t\tcur=max(0, cur-1);\n\t\t\t}else if(command == \"backward word\"){\n\t\t\t\tfor(;cur>0 && text[cur-1] == ' '; cur--);\n\t\t\t\tfor(;cur>0 && text[cur-1] != ' '; cur--);\n\t\t\t}else if(command == \"delete char\"){\n\t\t\t\tif(cur>=len) continue;\n\t\t\t\ttext.erase(text.begin()+cur);\n\t\t\t\tlen--;\n\t\t\t}else if(command == \"delete word\"){\n\t\t\t\tint s = cur;\n\t\t\t\tfor(;s<len && text[s] == ' ';){\n\t\t\t\t\ttext.erase(text.begin()+s);\n\t\t\t\t\tlen--;\n\t\t\t\t}\n\t\t\t\tfor(;s<len && text[s] != ' ';){\n\t\t\t\t\ttext.erase(text.begin()+s);\n\t\t\t\t\tlen--;\n\t\t\t\t}\n\t\t\t}else if(command.find(\"insert\")!=command.npos){\n\t\t\t\tstring ins;\n\t\t\t\tint s = command.find('\"');\n\t\t\t\tint t = command.find('\"',s+1);\n\t\t\t\tins = command.substr(s+1,t-s-1);\n\t\t\t\ttext.insert(cur,ins);\n\t\t\t\tlen+=t-s-1;\n\t\t\t\tcur+=t-s-1;\n\t\t\t}\n\t\t}\n\t\ttext.insert(text.begin()+cur,'^');\n\t\tcout << text << endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <cstdlib>\n\nusing namespace std;\n\nstring text,in,dum;\nint cur,len;\n\nint main()\n{\n\tint CS, n;\n\tcin >> CS; getline(cin, dum);\n\tfor (int cs = 0; cs < CS; cs++) {\n\t\tgetline(cin,text);\n\t\tcin >> n; getline(cin, dum);\n\t\tlen = text.size();\n\t\tcur = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tgetline(cin, in);\n\t\t\tif (in == \"forward char\")\n\t\t\t\tcur = min(cur+1,len);\n\t\t\telse if (in == \"backward char\")\n\t\t\t\tcur = max(cur-1,0);\n\t\t\telse if (in == \"forward word\") {\n\t\t\t\twhile (cur < len && text[cur] == ' ') cur++;\n\t\t\t\twhile (cur < len && text[cur] != ' ') cur++;\n\t\t\t} else if (in == \"backward word\") {\n\t\t\t\twhile (cur > 0 && text[cur-1] == ' ') cur--;\n\t\t\t\twhile (cur > 0 && text[cur-1] != ' ') cur--;\n\t\t\t} else if (in == \"delete char\") {\n\t\t\t\tif (cur >= len) continue;\n\t\t\t\ttext.erase(text.begin()+cur);\n\t\t\t\tlen--;\n\t\t\t} else if (in.find(\"insert\") != in.npos) {\n\t\t\t\tint s = in.find('\"'), t = in.find('\"',s+1);\n\t\t\t\tint l = t-s-1;\n\t\t\t\ttext = text.substr(0,cur) + in.substr(s+1,l) + text.substr(cur);\n\t\t\t\tcur += l;\n\t\t\t\tlen += l;\n\t\t\t} else if (in == \"delete word\") {\n\t\t\t\tint s = cur, t;\n\t\t\t\twhile (text[s] == ' ') s++;\n\t\t\t\tif (s >= len) continue;\n\t\t\t\twhile (text[s] != ' ' && s < len) s++;\n\t\t\t\ttext = text.substr(0,cur) + text.substr(s);\n\t\t\t\tlen -= s-cur;\n\t\t\t}\n\t\t}\n\t\tcout << text.substr(0,cur) << \"^\" << text.substr(cur) << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <vector>\n#include <string>\n#include <sstream>\n#include <cstdio>\n#include <complex>\nusing namespace std;\n\nint main() {\n  int n;\n  bool f = 1;\n  cin >> n;\n  while (n--) {\n    string str;\n    if (f) cin.ignore();\n    else f = 1;\n    getline(cin, str);\n    int m;\n    cin >> m;\n    int cur = 0;\n    string tmp;\n    for (int i = 0; i < m; i++) {\n      cin >> tmp;\n      if (tmp == \"forward\") {\n        cin >> tmp;\n        if (tmp == \"word\") {\n          while (str.size() > cur && str[cur] == ' ') cur++;\n          for (; cur < str.size(); cur++) {\n            if (str[cur] == ' ') break;\n          }\n        } else {\n          if (cur < str.size()) cur++;\n        }\n      } else if (tmp == \"backward\") {\n        cin >> tmp;\n        if (tmp == \"word\") {\n          while (cur > 0 && str[cur-1] == ' ') cur--;\n          for (; cur > 0; cur--) {\n            if (str[cur-1] == ' ') break;\n          }\n        } else {\n          if (cur > 0) cur--;\n        }\n      } else if (tmp == \"delete\") {\n        cin >> tmp;\n        if (tmp == \"word\") {\n          while (str.size() > cur && str[cur] == ' ') str = str.erase(cur, 1);\n          while (str.size() && str[cur] != ' ') {\n            str = str.erase(cur, 1);\n          }\n        } else {\n          str = str.erase(cur, 1);\n        }\n      } else {\n        cin.ignore();\n        getline(cin, tmp);\n        tmp = tmp.erase(0, 1);\n        tmp = tmp.erase(tmp.size()-1, 1);\n        str = str.insert(cur, tmp);\n        cur += tmp.size();\n        f = 0;\n      }\n    }\n    cout << str.insert(cur, \"^\") << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <vector>\n#include <string>\n#include <sstream>\n#include <cstdio>\n#include <complex>\nusing namespace std;\n\nint main() {\n  int n;\n  bool f = 1;\n  cin >> n;\n  while (n--) {\n    string str;\n    if (f) cin.ignore();\n    else f = 1;\n    getline(cin, str);\n    int m;\n    cin >> m;\n    int cur = 0;\n    string tmp;\n    for (int i = 0; i < m; i++) {\n      cin >> tmp;\n      if (tmp == \"forward\") {\n        cin >> tmp;\n        if (tmp == \"word\") {\n          while (str.size() > cur && str[cur] == ' ') cur++;\n          for (; cur < str.size(); cur++) {\n            if (str[cur] == ' ') break;\n          }\n        } else {\n          if (cur < str.size()) cur++;\n        }\n      } else if (tmp == \"backward\") {\n        cin >> tmp;\n        if (tmp == \"word\") {\n          while (cur > 0 && str[cur-1] == ' ') cur--;\n          for (; cur > 0; cur--) {\n            if (str[cur-1] == ' ') break;\n          }\n        } else {\n          if (cur > 0) cur--;\n        }\n      } else if (tmp == \"delete\") {\n        cin >> tmp;\n        if (tmp == \"word\") {\n          while (str.size() > cur && str[cur] == ' ') str = str.erase(cur, 1);\n          while (cur < str.size() && str.size() && str[cur] != ' ') {\n            str = str.erase(cur, 1);\n          }\n        } else {\n          str = str.erase(cur, 1);\n        }\n      } else {\n        cin.ignore();\n        getline(cin, tmp);\n        tmp = tmp.erase(0, 1);\n        tmp = tmp.erase(tmp.size()-1, 1);\n        str = str.insert(cur, tmp);\n        cur += tmp.size();\n        f = 0;\n      }\n    }\n    cout << str.insert(cur, \"^\") << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <iostream>\n#include <string>\n#include <cmath>\n\nusing namespace std;\n\nint main(){    \n    int n;\n    cin>>n;\n    for(int i=0;i<n;i++){\n        string buf;\n        char c;\n        scanf(\"%c\", &c);\n\n        getline(cin,buf);\n       // cout << \"buf is \" << buf << endl;\n        int pos=0;\n        int cn;\n        cin>>cn;\n        for(int k=0;k<cn;k++){\n            string command;\n            cin >> command;\n            if(command==\"forward\"){\n                cin >> command;\n                if(command==\"char\"){\n                    if(!buf.empty())\n                    pos = min(pos+1,(int)buf.size());\n                }else{\n                    // word\n                    while(pos < buf.size()&& buf[pos]==' ')pos++;\n                    while(pos < buf.size()&& buf[pos]!=' ')pos++;\n                }\n            }else if(command==\"backward\"){\n                cin >> command;\n                if(command==\"char\"){\n                    pos = max(pos-1,0);\n                }else{\n                    // word\n                    while(pos > 0 && buf[pos-1]==' ' )pos--;\n                    while(pos > 0 && buf[pos-1]!=' ')pos--;\n                }\n            }else if(command==\"insert\"){\n                getline(cin,command);\n                ungetc('\\n',stdin);\n                string text;\n                bool f= false;\n                for(int i=0;i<command.size();i++){\n                    if(f&&command[i]=='\\\"')break;\n                    if(f)text.push_back(command[i]);\n                    if(command[i]=='\\\"')f=true;\n                }\n                buf.insert(pos,text);\n                pos+= text.size();\n            }else {//delete\n                cin >> command;\n                if(command== \"char\"){\n                    if(!buf.empty()&&pos!=buf.size()){\n                        buf.erase(pos,1);\n                    }\n\n                }else{\n                    if(!buf.empty()){\n                        int t=pos;\n                        while(t<buf.size() && buf[t]==' ')t++;\n                        while(t<buf.size() && buf[t]!=' ')t++;\n                       // while(t<buf.size() && buf[t]==' ')t++;\n\n                        buf.erase(pos,t-pos);\n                    }\n                }\n            }\n        }\n        //cout << buf << \"****\" << endl;\n        if(buf.empty()){\n            printf(\"^\\n\");\n        }else{\n        for(int p=0;p<buf.size();p++){\n            if(pos==p)printf(\"^\");\n            printf(\"%c\",buf[p]);\n        }\n\n        if(pos==buf.size())printf(\"^\");\n        printf(\"\\n\");\n        }\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#define S_N 1010\nusing namespace std;\n\nint dataN, cmdN;\nstring text, cmd1,cmd2;\nchar s[S_N];\nint pos, index;\n\nvoid pr(){\n  string s1 = text.substr(0,pos);\n  string s2=\"\";\n\n  if( pos<text.length() )\n    s2 = text.substr(pos);\n\n  if( true )\n    cout << s1<< \"^\" << s2 << endl;\n  else\n    cout << text <<\":\"<<pos << endl;\n}\n\nint main(){\n\n  cin >> dataN;\n  fgets( s, S_N, stdin ); // üsÇÝÝ\n  //  cout << \"dataN=\"<<dataN<<endl;\n  for( int loop=0;loop<dataN;loop++ ){\n    fgets( s, S_N, stdin );\n    text=s;\n    text = text.substr( 0,text.length()-1 );\n\n    pos=0;\n    cin >> cmdN;\n    //    cout << \"text=[\"<<text<<\"] cmdN=\"<<cmdN << endl;\n    for( int cmdL=0;cmdL<cmdN;cmdL++ ){\n      cin >> cmd1 ;\n      fgets( s,S_N,stdin );      cmd2=s;\n      // æªÌXy[XÆöÌüsðí\n      cmd2 = cmd2.substr( 1,cmd2.length()-2 );\n      /*\n      pr();\n      cout <<\"[\"<< cmd1 << \"] [\" << cmd2 <<\"]\"<< endl;\n      */\n\n      if( cmd1==\"forward\" ){\n\tif( cmd2==\"char\" ){\n\t  if( pos<text.length()-1 ) pos++;\n\t}else{\n\t  // wordÌÅãöÖÚ®\n\t  if( pos<text.length() ){\n\t    if( text[pos]==' ' ){\n\t      while( pos<text.length() && text[pos]==' ' )\n\t\t++pos;\n\t      while( pos<text.length() && text[pos]!=' ' )\n\t\t++pos;\n\t    }else{\n\t      while( pos<text.length() && text[pos]!=' ' )\n\t\t++pos;\n\t    }\n\t  }\n\t}\n      }else if( cmd1==\"backward\" ){\n\tif( cmd2==\"char\" ){\n\t  if( pos>0 ) pos--;\n\t}else{\n\t  // word ÌæªÖÚ®\n\t  if( pos>0 ){\n\t    if( text[pos]==' '){\n\t      while( pos>0 && text[pos]==' ' )\n\t\t--pos;\n\t      while( pos>0 && text[pos]!=' ' )\n\t\t--pos;\n\t      if( pos>0 )\n\t\t++pos;\n\t    }else{\n\t      while( pos>0 && text[pos]!=' ' )\n\t\t--pos;\n\t      if( pos>0 )\n\t\t++pos;\n\t    }\n\t  }\n\t}\n      }else if( cmd1==\"insert\" ){\n\tcmd2 = cmd2.substr( 1,cmd2.length()-2 );\n\t//\tcout << \"insert : [\"<<cmd2<<\"]\" << endl;\n\tstring s1=text.substr(0,pos), s2=\"\";\n\tif( pos<text.length() )\n\t  s2=text.substr(pos);\n\ttext = s1 + cmd2 + s2;\n\tpos += cmd2.length();\n      }else if( cmd1==\"delete\" ){\n\tif( cmd2==\"char\" ){\n\t  if( pos+1<text.length() ){\n\t    string s1=text.substr(0,pos);\n\t    string s2=text.substr(pos+1);\n\t    text = s1 + s2;\n\t  }\n\t}else{\n\t  int p=pos;\n\t  if( p<text.length() && text[p]==' ' ) p++;\n\t  while( p<text.length() && text[p]!=' ' )\n\t    ++p;\n\t  string s1=text.substr(0,pos), s2=\"\";\n\t  if( p!=text.length() )\n\t    s2 = text.substr( p );\n\t  text = s1 + s2;\n\t}\n      }\n    }\n    pr();\n    //    cout << \"---------------------------------------\"<<endl;\n    //    break;\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint\nmain()\n{\n    int n_lines;\n\n    cin >> n_lines;\n    cin.ignore();\n\n    while (n_lines--) {\n        string text;\n        int cursor = 0;\n        int n_commands;\n\n        getline(cin, text);\n        cin >> n_commands;\n        cin.ignore();\n\n        while (n_commands--) {\n            string command;\n            getline(cin, command);\n\n            if (command == \"forward char\") {\n                if (cursor < text.size()) cursor++;\n            } else if (command == \"forward word\") {\n                while (cursor < text.size() && text[cursor] == ' ') cursor++;\n                while (cursor < text.size() && text[cursor] != ' ') cursor++;\n            } else if (command == \"backward char\") {\n                if (cursor > 0) cursor--;\n            } else if (command == \"backward word\") {\n                while (cursor > 0 && text[cursor - 1] == ' ') cursor--;\n                while (cursor > 0 && text[cursor - 1] != ' ') cursor--;\n            } else if (command.find(\"insert \") == 0) {\n                size_t start = command.find_first_of('\"') + 1;\n                size_t end = command.find_first_of('\"', start);\n                string arg = command.substr(start, end - start);\n\n                text = text.substr(0, cursor) + arg + text.substr(cursor);\n                cursor += arg.size();\n            } else if (command == \"delete char\") {\n                if (cursor < text.size()) {\n                    text.erase(cursor, 1);\n                }\n            } else if (command == \"delete word\") {\n                if (cursor < text.size()) {\n                    size_t word_end = cursor;\n\n                    while (word_end < text.size() && text[word_end] == ' ')\n                        word_end++;\n                    if (word_end == text.size()) continue;\n\n                    while (word_end < text.size() && text[word_end] != ' ')\n                        word_end++;\n\n                    text = text.substr(0, cursor) + text.substr(word_end);\n                }\n            }\n        }\n\n        cout << text.substr(0, cursor) << '^' << text.substr(cursor) << endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cassert>\n\nusing namespace std;\n\n#define rep(i, n) for (int i = 0; i < int(n); ++i)\n\nvoid solve() {\n  string str;\n  getline(cin, str);\n  int n;\n  cin >> n;\n  cin.ignore();\n  string buf;\n  int cur = 0;\n  rep (_, n) {\n    assert(0 <= cur && cur <= (int)str.size());\n    getline(cin, buf);\n    if (buf == \"forward char\") {\n      cur = min(cur + 1, (int)str.size());\n    } else if (buf == \"forward word\") {\n      while ((int)str.size() != cur && str[cur] == ' ') ++cur;\n      while ((int)str.size() != cur && str[cur] != ' ') ++cur;\n    } else if (buf == \"backward char\") {\n      cur = max(cur - 1, 0);\n    } else if (buf == \"backward word\") {\n      while (0 != cur && (cur == (int)str.size() || str[cur] == ' ')) --cur;\n      while (0 != cur && (cur == (int)str.size() || str[cur] == ' ')) --cur;\n    } else if (buf == \"delete char\") {\n      if (cur == (int)str.size()) continue;\n      str = str.substr(0, cur) + str.substr(cur + 1);\n    } else if (buf == \"delete word\") {\n      int s = cur, t;\n      while ((int)str.size() != s && str[s] == ' ') ++s;\n      if (s == (int)str.size()) continue;\n      for (t = s; t < (int)str.size() && str[t] != ' '; ++t);\n      str = str.substr(0, cur) + str.substr(t);\n    } else if (buf.substr(0, 6) == \"insert\") {\n      int s = buf.find('\"');\n      int t = buf.find('\"', s + 1);\n      string ins = buf.substr(s + 1, t - s - 1);\n      str = str.substr(0, cur) + ins + str.substr(cur);\n      cur += ins.size();\n    } else {\n      assert(0);\n    }\n  }\n  assert(0 <= cur && cur <= (int)str.size());\n  cout << str.substr(0, cur) << \"^\" << str.substr(cur) << endl;\n}\n\nint main() {\n  int t;\n  cin >> t;\n  cin.ignore();\n  rep (i, t) solve();\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nvector<string> split(string s, string t) {\n\tvector<string> r;\n\tint p = s.find(t);\n\tif (p != s.npos) {\n\t\tr.push_back(s.substr(0, p));\n\t\ts = s.substr(p+t.size());\n\t}\n\tr.push_back(s);\n\treturn r;\n}\n\nvoid output(string text, int cursor) {\n\tcout << text.substr(0, cursor) << '^' << text.substr(cursor) << endl;\n}\n\nint main() {\n\tint n; cin >> n;\n\tcin.ignore();\n\tint i = 0;\n\t\n\twhile (i<n) {\n\t\t// solver\n\t\tstring text;\n\t\tgetline(cin, text);\n\t\t\n\t\tint cursor = 0;\n\t\t\n\t\tint m; cin >> m;\n\t\tcin.ignore();\n\t\t\n\t\tfor (int j=0; j<m; j++) {\n\t\t\tstring command;\n\t\t\tgetline(cin, command);\n\t\t\t\n\t\t\tvector<string> com = split(command, \" \");\n\t\t\t\n\t\t\tif (com[0]==\"forward\") {\n\t\t\t\n\t\t\t\tif (com[1]==\"char\") {\n\t\t\t\t\n\t\t\t\t\tif (cursor < (int)text.size()) cursor++;\n\t\t\t\t\t\n\t\t\t\t} else if (com[1]==\"word\") {\n\t\t\t\t\n\t\t\t\t\tbool find = false;\n\t\t\t\t\tint k;\n\t\t\t\t\tfor (k=cursor; k<(int)text.size() && !find; k++) {\n\t\t\t\t\t\tif (text[k]==' ') {\n\t\t\t\t\t\t\tfind = true;\n\t\t\t\t\t\t\tcursor = k;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (!find) cursor = (int)text.size();\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t} else if (com[0]==\"backward\") {\n\t\t\t\n\t\t\t\tif (com[1]==\"char\") {\n\t\t\t\t\n\t\t\t\t\tif (cursor > 0) cursor--;\n\t\t\t\t\t\n\t\t\t\t} else if (com[1]==\"word\") {\n\t\t\t\t\n\t\t\t\t\tbool find = false;\n\t\t\t\t\tint k = cursor;\n\t\t\t\t\tfor (; k>=0 && !find; k--) {\n\t\t\t\t\t\tif (text[k]==' ') find = true;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (find) {\n\t\t\t\t\t\tbool find2 = false;\n\t\t\t\t\t\tfor (; k>=0 && !find2; k--) {\n\t\t\t\t\t\t\tif (text[k]==' ') {\n\t\t\t\t\t\t\t\tfind2 = true;\n\t\t\t\t\t\t\t\tcursor = k + 1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!find2) cursor = 0;\n\t\t\t\t\t\t\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcursor = 0;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t} else if (com[0]==\"insert\") {\n\t\t\t\t\n\t\t\t\tstring ins = com[1].substr(1, (int)com[1].size()-2);\n\t\t\t\ttext = text.substr(0, cursor) + ins + text.substr(cursor);\n\t\t\t\tcursor += (int)ins.size();\n\t\t\t\t\n\t\t\t} else if (com[0]==\"delete\") {\n\t\t\t\t\n\t\t\t\tif (com[1] == \"char\" && (int)text.size() > 0) {\n\t\t\t\t\t\n\t\t\t\t\tif (cursor < (int)text.size()) {\n\t\t\t\t\t\ttext = text.substr(0, cursor) + text.substr(cursor + 1);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t} else if (com[1]==\"word\" && (int)text.size() > 0) {\n\t\t\t\t\t\n\t\t\t\t\tint del = cursor + 1;\t\t\t\t\t\n\t\t\t\t\tfor (; del < (int)text.size(); del++) {\n\t\t\t\t\t\tif (text[del] == ' ') {\n\t\t\t\t\t\t\tdel++;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t\ttext = text.substr(0, cursor) + text.substr(del);\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t\t\n\t\t// output\n\t\toutput(text, cursor);\n\t\t\n\t\t\n\t\ti++;\n\t}\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#define S_N 1010\nusing namespace std;\n\nint dataN, cmdN;\nstring text, cmd1,cmd2;\nchar s[S_N];\nint pos, index;\n\nvoid pr(){\n  string s1 = text.substr(0,pos);\n  string s2=\"\";\n\n  if( pos<text.length() )\n    s2 = text.substr(pos);\n\n  cout << s1<< \"^\" << s2 << endl;\n}\n\nint main(){\n\n  cin >> dataN;\n  fgets( s, S_N, stdin ); // üsÇÝÝ\n  for( int loop=0;loop<dataN;loop++ ){\n    fgets( s, S_N, stdin );\n    text=s;\n    text = text.substr( 0,text.length()-1 );\n\n    pos=0;\n    cin >> cmdN;\n    for( int cmdL=0;cmdL<cmdN;cmdL++ ){\n      cin >> cmd1 ;\n      fgets( s,S_N,stdin );      cmd2=s;\n      // æªÌXy[XÆöÌüsðí\n      cmd2 = cmd2.substr( 1,cmd2.length()-2 );\n\n      if( cmd1==\"forward\" ){\n\tif( cmd2==\"char\" ){\n\t  pos = min( pos+1,(int)text.length() );\n\t}else{\n\t  // wordÌÅãöÖÚ® (space ðw·æ¤ÉÚ®)\n\t  for( ;pos<text.length() && text[pos]==' ';pos++ );\n\t  for( ;pos<text.length() && text[pos]!=' ';pos++ );\n\t}\n      }else if( cmd1==\"backward\" ){\n\tif( cmd2==\"char\" ){\n\t  pos = max( pos-1,0);\n\t}else{\n\t  // word ÌæªÖÚ®\n\t  for( ;pos>0 && text[pos]==' ';--pos );\n\t  for( ;pos>0 && text[pos]!=' ';--pos );\n\t}\n      }else if( cmd1==\"insert\" ){\n\tif( cmd2.length()>2 ){ // cmd2==\"\" ÅÍÈ¢\n\t  cmd2 = cmd2.substr( 1,cmd2.length()-2 );\n\t  string s1=text.substr(0,pos), s2=\"\";\n\t  if( pos<text.length() )\n\t    s2=text.substr(pos);\n\t  text = s1 + cmd2 + s2;\n\t  pos += cmd2.length();\n\t}\n      }else if( cmd1==\"delete\" ){\n\tif( cmd2==\"char\" ){\n\t  if( pos<text.length() )\n\t    text.erase( text.begin()+pos );\n\t}else{\n\t  int s=pos, t;\n\t  for( ;text[s]==' ';pos++ );\n\t  if( s<text.length() ){\n\t    for( t=s;text[t]!=' ' && t<text.length();t++ );\n\t    text = text.substr(0,pos) + text.substr(t);\n\t  }\n\t}\n      }\n    }\n    pr();\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <string>\n#include <sstream>\nusing namespace std;\n \nint main() {\n  int Tc;\n  cin >> Tc;\n  cin.ignore();\n  for(int tc = 0; tc < Tc; ++tc) {\n    string text;\n    getline(cin, text);\n    int M;\n    cin >> M;\n    cin.ignore();\n    int cursor = 0;\n    while(M--) {\n\n      string a, b;\n      {\n        string line;\n        getline(cin, line);\n        for(int i = 0; i < line.size(); ++i) {\n          if(line[i] == ' ') {\n            a = line.substr(0, i);\n            b = line.substr(i+1);\n            break;\n          }\n        }\n      }\n\n      int N = text.size();\n      if(0) {\n\n      } else if(a == \"forward\" && b == \"char\") {\n\n        cursor = min(cursor+1, N);\n\n      } else if(a == \"forward\" && b == \"word\") {\n\n        for(; cursor < N && text[cursor] == ' '; ++cursor);\n        for(; cursor < N && text[cursor] != ' '; ++cursor);\n\n      } else if(a == \"backward\" && b == \"char\") {\n\n        cursor = max(cursor-1, 0);\n\n      } else if(a == \"backward\" && b == \"word\") {\n\n        for(; cursor > 0 && text[cursor-1] == ' '; --cursor);\n        for(; cursor > 0 && text[cursor-1] != ' '; --cursor);\n\n      } else if(a == \"insert\") {\n\n        b = b.substr(1, b.size()-2);\n        text.insert(cursor, b);\n        cursor += b.size();\n\n      } else if(a == \"delete\" && b == \"char\") {\n\n        if(cursor < N) text.erase(cursor, 1);\n\n      } else if(a == \"delete\" && b == \"word\") {\n\n        int begin = cursor;\n        int end = cursor;\n        for(; end < N && text[end] == ' '; ++end);\n        for(; end < N && text[end] != ' '; ++end);\n        text.erase(begin, end-begin);\n\n      }\n\n    }\n    text.insert(cursor, \"^\");\n    cout << text << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nvoid setPos(string &buff,int &pos){\n    for(int i = 0; i < buff.size(); i++){\n        if(buff[i]=='^'){\n            pos=i;\n            return;\n        }\n    }\n}\n\nint main(){\n    int n;\n    cin>>n;\n    string gb;\n    getline(cin,gb);\n    while(n--){\n        string buff;\n        getline(cin,buff);\n        int m;\n        cin>>m;\n        getline(cin,gb);\n        int pos=0;\n        buff='^'+buff;\n        while(m--){\n            string op;\n            getline(cin,op);\n            if(op==\"forward char\"){\n                if(pos!=buff.size()-1){\n                    swap(buff[pos],buff[pos+1]);\n                    pos++;\n                    setPos(buff,pos);\n                }\n            }\n            else if(op==\"forward word\"){\n                // ツ右ツづ可閉カツ篠堋づーツ探ツつオツづ可つ「ツつォツ、ツ個ゥツづつつゥツづつスツづァツつサツづ個閉カツ篠堋療アツづ個催渉可づ個暗環置ツづ慊づカツーツソツδ仰づーツ暗堋督ョ\n                if(pos!=buff.size()-1){\n                    int initPos=pos;\n                    pos++;\n                    while(pos<buff.size()&&buff[pos]==' ')pos++;\n                    while(pos<buff.size()&&buff[pos]!=' ')pos++;\n                    buff=buff.substr(0,initPos)+buff.substr(initPos+1);\n                    if(pos-1==buff.size())\n                        buff+='^';\n                    else{\n                        pos--;\n                        buff=buff.substr(0,pos)+'^'+buff.substr(pos);\n                    }\n                    setPos(buff,pos);\n                }\n            }\n            else if(op==\"backward char\"){\n                if(pos!=0){\n                    swap(buff[pos],buff[pos-1]);\n                    setPos(buff,pos);\n                }\n            }\n            else if(op==\"backward word\"){\n                if(pos!=0){\n                    int initPos=pos;\n                    pos--;\n                    while(pos>=0&&buff[pos]==' ')pos--;\n                    while(pos>=0&&buff[pos]!=' ')pos--;\n                    buff=buff.substr(0,initPos)+buff.substr(initPos+1);\n                    if(pos==-1)\n                        buff='^'+buff;\n                    else{\n                        pos++;\n                        buff=buff.substr(0,pos)+'^'+buff.substr(pos);\n                    }\n                    setPos(buff,pos);\n                }\n            }\n            else if(op==\"delete char\"){\n                if(pos!=buff.size()-1)\n                    buff=buff.substr(0,pos+1)+buff.substr(pos+2);\n                setPos(buff,pos);\n            }\n            else if(op==\"delete word\"){\n                int initPos=pos;\n                if(pos!=buff.size()-1){\n                    pos++;\n                    while(pos<buff.size()&&buff[pos]==' ')pos++;\n                    while(pos<buff.size()&&buff[pos]!=' ')pos++;\n                    if(pos==buff.size())\n                        buff=buff.substr(0,initPos+1);\n                    else\n                        buff=buff.substr(0,initPos+1)+buff.substr(pos);\n                    setPos(buff,pos);\n                }\n            }\n            else if(op.substr(0,6)==\"insert\"){\n                string ins=op.substr(7);\n                ins=ins.substr(1);\n                ins=ins.substr(0,ins.size()-1);\n                buff=buff.substr(0,pos)+ins+'^'+buff.substr(pos+1);\n                setPos(buff,pos);\n            }\n        }\n        cout<<buff<<endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <string.h>\n \nint pos;\nint lb;\nchar buf[10050];\n \nint forward_char(){\n    if(buf[pos+1]!='\\n'){\n        buf[pos] = buf[pos+1];\n        buf[pos+1] = '^';\n        pos++;\n    }\n    /*printf(\"%s\",buf);*/\n}\n \nint forward_word(){\n    while(buf[pos+1]==' '){/*word?????????????????????????????????£?????????*/\n        buf[pos] = buf[pos+1];\n        pos++;\n    }\n    while(buf[pos+1]!=' '&&buf[pos+1]!='\\n'){\n        buf[pos] = buf[pos+1];\n        pos++;\n    }\n    buf[pos] = '^';\n    /*printf(\"%s\",buf);*/\n}\n \nint backward_char(){\n    if(pos){\n        buf[pos] = buf[pos-1];\n        buf[pos-1] = '^';\n        pos--;\n    }\n    /*printf(\"%s\",buf);*/\n}  \n \nint backward_word(){\n    while(buf[pos-1]==' '){\n        buf[pos] = buf[pos-1];\n        pos--;\n    }\n    while(buf[pos-1]!=' '&&pos){\n        buf[pos] = buf[pos-1];\n        pos--;\n    }\n    buf[pos] = '^';\n    /*printf(\"%s\",buf);*/\n}\n \nint insert(char *text){\n    int i;\n    int lt = strlen(text);\n    for(i=lb-1;i>=pos;i--)buf[i+lt] = buf[i];\n    for(i=0;i<lt;i++)buf[pos+i] = text[i];\n    lb += lt;\n    pos += lt;\n    /*printf(\"%s\",buf);*/\n}\n \nint delete_char(){\n    int i;\n    if(buf[pos+1]!='\\n'){\n        for(i=pos+1;i<lb;i++)buf[i] = buf[i+1];\n        lb--;\n    }\n    /*printf(\"%s\",buf);*/\n}\n \nint delete_word(){\n    int tmp = pos;\n    int i;\n    if(buf[tmp+1]=='\\n')return 0;\n    while(buf[tmp+1]==' '){\n        tmp++;\n        if(buf[tmp+1]=='\\n')return 0;\n    }\n    while(buf[tmp+1]!=' ')tmp++;\n    for(i=pos+1;i<lb;i++)buf[i] = buf[i+tmp-pos];\n    /*printf(\"%s\",buf);*/\n}\n \nint main(){\n    int n,m,lt;\n    int i,j,k;\n    char op[1200];\n    char c[10030];/*1000???+'\\n','\\0','^'*/\n    scanf(\"%d\",&n);\n    getchar();/*????????????????????????????????????*/\n    for(i=0;i<n;i++){\n        pos = 0;\n        buf[0] = '^';\n        fgets(c,10030,stdin);\n        for(j=0;j<1003;j++)buf[j+1] = c[j];\n        /*printf(\"%s\",buf);*/\n        lb = strlen(buf);\n        /*printf(\"How many op?: \");*/\n        scanf(\"%d\",&m);\n        getchar();\n        for(j=0;j<m;j++){\n            /*printf(\"(op %d/%d): \",j+1,m);*/\n            fgets(op,1200,stdin);\n            if(!strncmp(op,\"forward char\",12))forward_char();\n            if(!strncmp(op,\"forward word\",12))forward_word();\n            if(!strncmp(op,\"backward char\",13))backward_char();\n            if(!strncmp(op,\"backward word\",13))backward_word();\n            if(!strncmp(op,\"delete char\",11))delete_char();\n            if(!strncmp(op,\"delete word\",11))delete_word();\n            if(!strncmp(op,\"insert\",6)){\n               lt = strlen(op);\n               op[lt-2] = '\\0';\n               for(k=8;k<lt-1;k++)op[k-8] = op[k];\n               lt -= 9;\n               insert(op);\n            }\n            /*printf(\"%s\",buf);*/\n        }\n        printf(\"%s\",buf);\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nint main(){\n        int n;\n        cin >> n;\n        string dummy;\n        getline(cin, dummy);\n        while(n--){\n                string text;\n                getline(cin, text);\n\n                int m, c = 0;\n                cin >> m;\n                while(m--){\n                        string cmd;\n                        cin >> cmd;\n                        if(cmd == \"forward\"){\n                                cin >> cmd;\n                                if(cmd == \"char\"){\n                                        if(c < text.size()){ ++c; }\n                                }else if(cmd == \"word\"){\n                                        for(; c < text.size(); ++c){\n                                                if(text[c] == ' '){ break; }\n                                        }\n                                }\n                                getline(cin, dummy);\n                        }else if(cmd == \"backward\"){\n                                cin >> cmd;\n                                if(cmd == \"char\"){\n                                        if(c > 0){ --c; }\n                                }else if(cmd == \"word\"){\n                                        for(; c > 0; --c){\n                                                if(text[c - 1] == ' '){ break; }\n                                        }\n                                }\n                                getline(cin, dummy);\n                        }else if(cmd == \"insert\"){\n                                getline(cin, cmd);\n                                int front = cmd.find_first_of('\"');\n                                int tail = cmd.find_last_of('\"');\n                                cmd = cmd.substr(front + 1, tail - front - 1);\n                                text.insert(c, cmd);\n                                c += cmd.size();\n                        }else if(cmd == \"delete\"){\n                                cin >> cmd;\n                                if(cmd == \"char\"){\n                                        if(c < text.size()){ text.erase(text.begin() + c); }\n                                }else if(cmd == \"word\"){\n                                        int front = c;\n                                        int end = c;\n                                        for(; end < text.size(); ++end){\n                                                if(text[end] != ' '){ break; }\n                                        }\n                                        for(; end < text.size(); ++end){\n                                                if(text[end] == ' '){ break; }\n                                        }\n                                        for(; end < text.size(); ++end){\n                                                if(text[end] != ' '){ break; }\n                                        }\n                                        text.erase(text.begin() + c, text.begin() + end);\n                                }\n                                getline(cin, dummy);\n                        }\n                }\n                text.insert(c, \"^\");\n                cout << text << endl;\n        }\n        return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cmath>\nusing namespace std;\n\nint main()\n{\n    string bla = \"bla\";\n    cout<<bla.substr(3)<<endl;\n    int nb_cas;\n    cin>>nb_cas;\n    cin.ignore();\n    while(nb_cas--)\n    {\n        string texte;\n        getline(cin,texte);\n        int nb_op;\n        cin>>nb_op;\n        int curseur = 0;\n        for(int c=0;c<nb_op;c++)\n        {\n            string s1,s2;\n            cin>>s1;\n            cin.ignore();\n            getline(cin,s2);\n            if(s1==\"forward\"||s1==\"backward\")\n            {\n                int d = (s1==\"forward\"?1:-1);\n                if(s2==\"char\") curseur+=d;\n                else if(s2==\"word\")\n                {\n                    while(curseur>= 0 && curseur<=texte.size()&&(curseur == texte.size()||texte[curseur]==' ')) curseur+=d;\n                    while(curseur>=-0&&curseur<=texte.size()&&(curseur==texte.size()||texte[curseur]!=' '))\n                    {\n                        curseur += d;\n                    }\n                }\n                curseur = max(curseur,0);\n                curseur = min(curseur,(int)texte.size());\n            }\n            else if(s1==\"delete\")\n            {\n                if(s2==\"char\"&&curseur<texte.size())\n                {\n                    texte = texte.substr(0,curseur)+texte.substr(curseur+1);\n                }\n                else if(s2==\"word\")\n                {\n                    int finMot = curseur;\n                    while(finMot<texte.size()&&texte[finMot]==' ') finMot++;\n                    if(finMot == texte.size()) continue;\n                    while(finMot<texte.size()&&texte[finMot]!=' ')\n                    {\n                        finMot ++;\n                    }\n                    texte = texte.substr(0,curseur)+(finMot < texte.size()?texte.substr(finMot):\"\");\n                }\n            }\n            else\n            {\n                while(s2[0]!='\"') s2=s2.substr(1);\n                while(s2[s2.size()-1]!='\"') s2 = s2.substr(s2.size()-1);\n                s2 = s2.substr(1,s2.size()-2);\n                texte = texte.substr(0,curseur)+s2+(curseur<(int)texte.size()?texte.substr(curseur):\"\");\n                curseur += s2.size();\n            }\n        }\n        cout<<texte.substr(0,curseur)+\"^\"+(curseur<(int)texte.size()?texte.substr(curseur):\"\")<<endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <map>\n#include <set>\n#include <queue>\n#include <list>\n#include <stack>\n#include <algorithm>\n#include <functional>\n#include <numeric>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <climits>\n#include <sstream>\nusing namespace std;\n\n#define REP(i,a,n) for(i=a; i<n; i++)\n#define rep(i,n) REP(i,0,n)\n#define all(x) x.begin(), x.end()\n#define rall(x) x.rbegin(), x.rend()\n#define foreach(it,x) for(typeof(x.begin()) it=x.begin(); it!=x.end(); it++)\n\n/*\n  AOJ :: 1101\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1101&lang=jp\n */\n\n// YET_SYSTEM_TEST\n\nlist<char> buffer;\nlist<char>::iterator it;\n\nvoid build_buffer(const string& in){\n    int i, n = in.length();\n    buffer.clear();\n    rep(i,n) buffer.push_back(in[i]);\n    it = buffer.begin();\n}\n\nvoid forward_char(){\n    if( it != buffer.end() ) it++;\n}\nvoid forward_word(){\n    bool f = false;\n    while( it != buffer.end() ){\n        if( f && *it == ' ' ) break;\n        if( *it != ' ' ) f = true;\n        it++;\n    }\n}\n\nvoid backward_char(){\n    if( it != buffer.begin() ) it--;\n}\nvoid backward_word(){\n    while( it != buffer.begin() ){\n        if( *it == ' ' ) break;\n        it--;\n    }\n    while( it != buffer.begin() && *it == ' ' ){\n        it--;\n    }\n}\n\nvoid delete_char(){\n    if( it != buffer.end() ) it = buffer.erase(it);\n}\nvoid delete_word(){\n    // Xy[XªÝéÀèèOÉßé\n    while( it != buffer.begin() && *it == ' ' ){\n        it--;\n        if( *it != ' ' ){\n            it++; break;\n        }\n    }\n    // spaceðí\n    while( it != buffer.end() && *it == ' ' ){\n        it = buffer.erase(it);\n    }\n    while( it != buffer.end() && *it != ' ' ){\n        it = buffer.erase(it);\n    }\n}\n\nvoid insertion(const string& in){\n    int i, n = in.length();\n\n    rep(i,n){\n        buffer.insert(it, in[i]);\n    }\n}\n\nint main(){\n    int T,i,n;\n    string in;\n\n    cin >> T; cin.ignore();\n    while( T-- ){\n        getline(cin, in);\n        cin >> n; cin.ignore();\n\n        build_buffer(in);\n\n        rep(i,n){\n            getline(cin, in);\n            if( in == \"forward char\" ){\n                forward_char();\n            }\n            else if( in == \"forward word\" ){\n                forward_word();\n            }\n            else if( in == \"backward char\" ){\n                backward_char();\n            }\n            else if( in == \"backward word\" ){\n                backward_word();\n            }\n            else if( in.substr(0,6)  == \"insert\" ){\n                string tmp = in.substr(8,in.length() - 9);\n                //cout << tmp << endl;\n                insertion(tmp);\n            }\n            else if( in == \"delete char\" ){\n                delete_char();\n            }\n            else if( in == \"delete word\" ){\n                delete_word();\n            }\n\n            // debug\n            /*\n            printf(\"%d : \", i);\n            foreach(s,buffer){\n                if( s == it ) putchar('^');\n                cout << *s;\n            }\n            if( it == buffer.end() ) putchar('^');\n            cout << endl;\n            */\n        }\n\n        // output\n        foreach(s,buffer){\n            if( s == it ) putchar('^');\n            cout << *s;\n        }\n        if( it == buffer.end() ) putchar('^');\n        cout << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <climits>\n#include <cfloat>\n#include <ctime>\n#include <cassert>\n#include <map>\n#include <utility>\n#include <set>\n#include <iostream>\n#include <memory>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <functional>\n#include <sstream>\n#include <complex>\n#include <stack>\n#include <queue>\n#include <numeric>\n#include <list>\n#include <iomanip>\n#include <iterator>\n \nusing namespace std;\n \ntypedef long long ll;\ntypedef pair<int,int> Pii;\ntypedef pair<ll,ll> Pll;\n \n#define FOR(i,n) for(int i = 0; i < (n); i++)\n#define sz(c) ((int)c.size())\n\ntypedef unsigned long long ull;\nconst int INF = (int)1e8;\n\nvoid OUT_CUR(string& val,int cur) { \n#ifdef _DEBUG\n\tputs(val.c_str());\n\tFOR(i,cur) putchar(' ');\n\tputs(\"^\");\n#endif\n}\n\nvoid operate(string &val,int &cur,string op){\n\tint n = sz(val);\n\tif(op == \"forward char\"){\n\t\tif(cur != n) cur++;\n\t} else if(op == \"forward word\"){\n\t\tif(cur != n){\n\t\t\tcur++;\n\t\t\twhile(cur != n && val[cur] != ' ') cur++; \n\t\t\twhile(cur+1 < n && val[cur+1] == ' ') cur++;\n\t\t}\n\t} else if(op == \"backward char\"){\n\t\tif(cur != 0) cur--;\n\t} else if(op == \"backward word\"){\n\t\tif(cur != 0){\n\t\t\tcur--;\n\t\t\twhile(cur != 0 && val[cur-1] != ' ') cur--; \n\t\t\twhile(cur-1 > 0 && val[cur-2] == ' ') cur--; \n\t\t}\n\t} else if(op == \"delete char\"){\n\t\tif(cur != n)\n\t\t\tval.erase(cur,1);\n\t} else if(op == \"delete word\"){\n\t\tif(cur != n){\n\t\t\tint pos = 1;\n\t\t\twhile(cur + pos != n && val[cur + pos - 1] != ' ') pos++;\n\t\t\tval.erase(cur,pos);\n\t\t}\n\t} else {\n\t\tstring a = op.substr(8);\n\t\ta.erase(a.end()-1);\n\t\tval.insert(val.begin() + cur,a.begin(),a.end());\n\t\tcur += a.size();\n\t}\n\n\tOUT_CUR(val,cur);\n}\n\nint main(){\n\tint t; cin>>t;\n\tstring buf;\n\tgetline(cin,buf);\n\twhile(t--){\n\t\tstring val; getline(cin,val);\n\t\tint m; cin>>m;\n\t\tgetline(cin,buf);\n\t\tvector<string> op(m); FOR(i,m) getline(cin,op[i]);\n\t\tint cur = 0;\n\t\tFOR(i,m){\n\t\t\toperate(val,cur,op[i]);\n\t\t}\n\n\t\tval.insert(val.begin() + cur,'^');\n\t\tcout << val << endl; \n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nvector<string> split(string s, string t) {\n\tvector<string> r;\n\tint p = s.find(t);\n\tif (p != s.npos) {\n\t\tr.push_back(s.substr(0, p));\n\t\ts = s.substr(p+t.size());\n\t}\n\tr.push_back(s);\n\treturn r;\n}\n\nvoid output(string text, int cursor) {\n\tcout << text.substr(0, cursor) << '^' << text.substr(cursor) << endl;\n}\n\nint main() {\n\tint n; cin >> n;\n\tcin.ignore();\n\tint i = 0;\n\t\n\twhile (i<n) {\n\t\t// solver\n\t\tstring text;\n\t\tgetline(cin, text);\n\t\t\n\t\tint cursor = 0;\n\t\t\n\t\tint m; cin >> m;\n\t\tcin.ignore();\n\t\t\n\t\tfor (int j=0; j<m; j++) {\n\t\t\tstring command;\n\t\t\tgetline(cin, command);\n\t\t\t\n\t\t\tvector<string> com = split(command, \" \");\n\t\t\t\n\t\t\tif (com[0]==\"forward\") {\n\t\t\t\n\t\t\t\tif (com[1]==\"char\") {\n\t\t\t\t\n\t\t\t\t\tif (cursor < (int)text.size()) cursor++;\n\t\t\t\t\t\n\t\t\t\t} else if (com[1]==\"word\") {\n\t\t\t\t\n\t\t\t\t\tbool find = false;\n\t\t\t\t\tint k;\n\t\t\t\t\tfor (k=cursor; k<(int)text.size() && !find; k++) {\n\t\t\t\t\t\tif (text[k]==' ') {\n\t\t\t\t\t\t\tfind = true;\n\t\t\t\t\t\t\tcursor = k;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (!find) cursor = (int)text.size();\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t} else if (com[0]==\"backward\") {\n\t\t\t\n\t\t\t\tif (com[1]==\"char\") {\n\t\t\t\t\n\t\t\t\t\tif (cursor > 0) cursor--;\n\t\t\t\t\t\n\t\t\t\t} else if (com[1]==\"word\") {\n\t\t\t\t\n\t\t\t\t\tbool find = false;\n\t\t\t\t\tint k = cursor;\n\t\t\t\t\tfor (; k>=0 && !find; k--) {\n\t\t\t\t\t\tif (text[k]==' ') find = true;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (find) {\n\t\t\t\t\t\tbool find2 = false;\n\t\t\t\t\t\tfor (; k>=0 && !find2; k--) {\n\t\t\t\t\t\t\tif (text[k]==' ') {\n\t\t\t\t\t\t\t\tfind2 = true;\n\t\t\t\t\t\t\t\tcursor = k + 1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!find2) cursor = 0;\n\t\t\t\t\t\t\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcursor = 0;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t} else if (com[0]==\"insert\") {\n\t\t\t\t\n\t\t\t\tstring ins = com[1].substr(1, (int)com[1].size()-2);\n\t\t\t\ttext = text.substr(0, cursor) + ins + text.substr(cursor);\n\t\t\t\tcursor += (int)ins.size();\n\t\t\t\t\n\t\t\t} else if (com[0]==\"delete\") {\n\t\t\t\t\n\t\t\t\tif (com[1] == \"char\" && (int)text.size() > 0 && cursor < (int)text.size()) {\n\t\t\t\t\t\n\t\t\t\t\tif (cursor < (int)text.size()) {\n\t\t\t\t\t\ttext = text.substr(0, cursor) + text.substr(cursor + 1);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t} else if (com[1]==\"word\" && (int)text.size() > 0 && cursor < (int)text.size()) {\n\t\t\t\t\t\n\t\t\t\t\tint del = cursor + 1;\t\t\t\t\t\n\t\t\t\t\tfor (; del < (int)text.size(); del++) {\n\t\t\t\t\t\tif (text[del] == ' ') {\n\t\t\t\t\t\t\tdel++;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t\ttext = text.substr(0, cursor) + text.substr(del);\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t\t\n\t\t// output\n\t\toutput(text, cursor);\n\t\t\n\t\t\n\t\ti++;\n\t}\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <algorithm>\n#include <cstdio>\n\nusing namespace std;\n\nchar buf[1010];\nstring ope;\nint pos, size;\n\nvoid print(){\n  //cout << \"\\\"\";\n  for(int i=0;i<=size;i++){\n    if(pos == i) cout << \"^\";\n    if(i >= size) break;\n    cout << buf[i];\n  }\n  //cout << \"\\\"\";\n  cout << endl;\n}\n\nvoid forwardWord(){\n  for(;pos<size;pos++){\n    if(buf[pos] != ' '){\n      for(;pos<size;pos++) if(buf[pos] == ' ') break;\n      return;\n    }\n  }\n}\n\nvoid backwardWord(){\n  for(;pos>0;pos--){\n    if(buf[pos] != ' '){\n      for(;pos>0;pos--) if(buf[pos-1] == ' ') break;\n      return;\n    }\n  }\n}\n\nvoid insert(string str){\n  if(pos == size){\n    for(int i=0;i<str.size();i++) buf[pos++] = str[i];\n  }else{\n    for(int i=size-1;i>=0;i--){\n      buf[i+str.size()] = buf[i];\n      if(i == pos) break;\n    }\n    for(int j=0;j<str.size();j++) buf[pos+j] = str[j];\n  }\n  pos += str.size();\n  size += str.size();\n}\n\nvoid deleteChar(){\n  if(pos == size) return;\n  for(int i=pos+1;i<size;i++) buf[i-1] = buf[i];\n  size--;\n}\n\nvoid deleteWord(){\n  bool f = false;\n  int i;\n  for(i=pos;i<size;i++){\n    if(buf[i] != ' '){\n      f = true;\n      break;\n    }\n  }\n  if(!f) return;  \n  for(;i<size;i++){\n    if(buf[i] == ' ') break;\n  }\n\n  int j = pos;\n  for(int k=i;k<size;k++){\n    buf[j++] = buf[k];\n  }\n  size -= i - pos;\n}\n\nmain(){\n  int tc, n;\n  cin >> tc;\n  getchar();\n  while(tc--){\n    pos = size = 0;\n    getline(cin, ope);\n    insert(ope);\n    pos = 0;\n    cin >> n;\n    getchar();\n    for(int i=0;i<n;i++){\n      getline(cin, ope);\n      if(ope == \"forward char\" && pos + 1 < size) pos++;\n      else if(ope == \"forward word\") forwardWord();\n      else if(ope == \"backward char\" && pos) pos--;\n      else if(ope == \"backward word\") backwardWord();\n      else if(ope.substr(0, 6) == \"insert\"){\n        insert(ope.substr(8, (int)ope.size()-9));\n      }else if(ope == \"delete char\") deleteChar();\n      else if(ope == \"delete word\") deleteWord();\n      //print();\n    }\n    print();\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cmath>\n#include <string>\n\nusing namespace std;\nint main(){\n\tint n,r;\n\tcin >> n;\n\tcin.ignore();\n\twhile(n--){\n\t\tint cur = 0;\n\t\tstring text, command;\n\t\tgetline(cin, text);\n\t\tint len = text.size();\n\t\tcin\t>> r;\n\t\tcin.ignore();\n\t\twhile(r--){\n\t\t\tgetline(cin, command);\n\t\t\tif(command == \"forward char\"){\n\t\t\t\tcur=min(len, cur+1);\n\t\t\t}else if(command == \"forward word\"){\n\t\t\t\tfor(;cur<len && text[cur] == ' '; cur++);\n\t\t\t\tfor(;cur<len && text[cur] != ' '; cur++);\n\t\t\t}else if(command == \"backward char\"){\n\t\t\t\tcur=max(0, cur-1);\n\t\t\t}else if(command == \"backward word\"){\n\t\t\t\tfor(;cur>0 && text[cur-1] == ' '; cur--);\n\t\t\t\tfor(;cur>0 && text[cur-1] != ' '; cur--);\n\t\t\t}else if(command == \"delete char\"){\n\t\t\t\tif(cur>=len) continue;\n\t\t\t\ttext.erase(text.begin()+cur);\n\t\t\t\tlen--;\n\t\t\t}else if(command == \"delete word\"){\n\t\t\t\tint s = cur;\n\t\t\t\tfor(;s<len && text[s] == ' '; s++){\n\t\t\t\t\ttext.erase(text.begin()+s);\n\t\t\t\t\tlen--;\n\t\t\t\t}\n\t\t\t\tfor(;s<len && text[s] != ' ';){\n\t\t\t\t\ttext.erase(text.begin()+s);\n\t\t\t\t\tlen--;\n\t\t\t\t}\n\t\t\t}else if(command.find(\"insert\")!=command.npos){\n\t\t\t\tstring ins;\n\t\t\t\tint s = command.find('\"');\n\t\t\t\tint t = command.find('\"',s+1);\n\t\t\t\tins = command.substr(s+1,t-s-1);\n\t\t\t\ttext.insert(cur,ins);\n\t\t\t\tlen+=t-s-1;\n\t\t\t\tcur+=t-s-1;\n\t\t\t}\n\t\t\t\n\t\t}\n\t\tcout<<text.substr(0,cur)<<\"^\"<<text.substr(cur)<<endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cmath>\n#include <string>\n\nusing namespace std;\nint main(){\n\tint n,r;\n\tcin >> n;\n\tcin.ignore();\n\twhile(n--){\n\t\tint cur = 0;\n\t\tstring text, command;\n\t\tgetline(cin, text);\n\t\tint len = text.size();\n\t\tcin\t>> r;\n\t\tcin.ignore();\n\t\twhile(r--){\n\t\t\tgetline(cin, command);\n\t\t\tif(command == \"forward char\"){\n\t\t\t\tcur=min(len, cur+1);\n\t\t\t}else if(command == \"forward word\"){\n\t\t\t\tfor(;cur<len && text[cur] == ' '; cur++);\n\t\t\t\tfor(;cur<len && text[cur] != ' '; cur++);\n\t\t\t}else if(command == \"backward char\"){\n\t\t\t\tcur=max(0, cur-1);\n\t\t\t}else if(command == \"backward word\"){\n\t\t\t\tfor(;cur>0 && text[cur-1] == ' '; cur--);\n\t\t\t\tfor(;cur>0 && text[cur-1] != ' '; cur--);\n\t\t\t}else if(command == \"delete char\"){\n\t\t\t\tif(cur>=len) continue;\n\t\t\t\ttext.erase(text.begin()+cur);\n\t\t\t\tlen--;\n\t\t\t}else if(command == \"delete word\"){\n\t\t\t\tint s = cur;\n\t\t\t\tfor(;s<len && text[s] == ' '; s++);\n\t\t\t\tfor(;s<len && text[s] != ' ';){\n\t\t\t\t\ttext.erase(text.begin()+s);\n\t\t\t\t\tlen--;\n\t\t\t\t}\n\t\t\t}else if(command.find(\"insert\")!=command.npos){\n\t\t\t\tstring ins;\n\t\t\t\tint s = command.find('\"');\n\t\t\t\tint t = command.find('\"',s+1);\n\t\t\t\tins = command.substr(s+1,t-s-1);\n\t\t\t\ttext.insert(cur,ins);\n\t\t\t\tlen+=t-s-1;\n\t\t\t\tcur+=t-s-1;\n\t\t\t}\n\t\t\t\n\t\t}\n\t\ttext.insert(text.begin()+cur,'^');\n\t\tcout << text << endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <cstdlib>\nusing namespace std;\n\nchar space()\n{\n  char c;\n  while (isblank(c = getchar()) || c == '\\n');\n  return c;\n}\n\nchar _space()\n{\n  char c;\n  while (isblank(c = getchar()));\n  return c;\n}\n\nstring nextStr()\n{\n  char c = space();\n  string str = \"\";\n  do {\n    str += c;\n  }  while (!isblank(c = getchar()) && (c != '\\n'));\n  return str;\n}\n\nstring nextLine()\n{\n  string str;\n  char c;\n  c = _space();\n  if (c == '\\n') return str;\n  do {\n    str+=c;\n  } while ((c = getchar()) != '\\n');\n\n  return string(str);\n}\n\nstring nextQuote()\n{\n  space();\n  char c;\n  string str = \"\";\n  while ((c = getchar()) != '\"') {\n    str += c;\n  }\n  return str;\n}\n\nbool hasWord(int cur, const string& text)\n{\n  for (int id = cur; id < text.size(); id++) {\n    if (!isblank(text[id])) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/*\nbool backHasWord(int cur, const string& text)\n{\n  for (int id = cur - 1; id >= 0; id--) {\n    if (!isblank(text[id])) {\n      return true;\n    }\n  }\n  return false;\n}\n*/\n\nint main()\n{\n  int nTest;  \n  scanf(\"%d \",&nTest);\n  //cout << nTest << endl;\n    \n  for (int testIdx = 0; testIdx < nTest; testIdx++) {\n    string text = nextLine();\n    //cout << text << endl;\n    //    cin.ignore();\n\n    int N;\n    scanf(\" %d \", &N);\n    //cout << \"N = \" << N << endl;\n    //cin.ignore();\n    int cur = 0;\n    for (int i = 0; i < N; i++) {\n      string cmd, arg;\n      cmd = nextStr();\n      if (cmd == \"forward\") {\n\targ = nextStr();\n\tif (arg == \"char\") {\n\t  if (cur < text.size()) {\n\t    cur++;\n\t  }\n\t} else {\t\n\t  while (cur < text.size() && isblank(text[cur])) {cur++;}\n\t  while (cur < text.size() && !isblank(text[cur])) {cur++;}\n\t}\n      } else if (cmd == \"backward\") {\n\targ = nextStr();\n\tif (arg == \"char\") {\n\t  if (cur > 0) {\n\t    cur--;\n\t  }\n\t} else {\t  \n\t  while (cur > 0 && isblank(text[cur])) {cur--;}\n\t  while (cur > 0 && !isblank(text[cur])) {cur--;}\n\t}\n      } else if (cmd == \"insert\") {\n\targ = nextQuote();\n\ttext.insert(text.begin() + cur, arg.begin(), arg.end());\n\tcur += arg.size();\n      } else if (cmd == \"delete\") {\n\targ = nextStr();\n\tif (arg == \"char\") {\n\t  if (cur < text.size()) {\n\t    text.erase(text.begin() + cur);\n\t  }\n\t} else {\n\t  if (hasWord(cur, text)) {\n\t    while (cur < text.size() && isblank(text[cur])) {\n\t      text.erase(text.begin() + cur);\n\t    }\n\t    while (cur < text.size() && !isblank(text[cur])) {\n\t      text.erase(text.begin() + cur);\n\t    }\n\t  }\n\t  /*\n\t  */\n\t}\n      }\n      //cout << \"cmd, arg = \" << cmd << \", \" << arg << endl;\n      //cout << \"cur = \" << cur << endl;\n      //cout << text << endl;\n    }\n    for (int i = 0; i < cur; i++) {\n      cout << text[i];\n    }\n    cout << \"^\";\n    for (int i = cur; i < text.size(); i++) {\n      cout << text[i];\n    }\n    cout << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <cstdlib>\nusing namespace std;\n\nchar space()\n{\n  char c;\n  while (isblank(c = getchar()) || c == '\\n');\n  return c;\n}\n\nchar _space()\n{\n  char c;\n  while (isblank(c = getchar()));\n  return c;\n}\n\nstring nextStr()\n{\n  char c = space();\n  string str = \"\";\n  do {\n    str += c;\n  }  while (!isblank(c = getchar()) && (c != '\\n'));\n  return str;\n}\n\nstring nextLine()\n{\n  string str;\n  char c;\n  c = _space();\n  if (c == '\\n') return str;\n  do {\n    str+=c;\n  } while ((c = getchar()) != '\\n');\n\n  return string(str);\n}\n\nstring nextQuote()\n{\n  space();\n  char c;\n  string str = \"\";\n  while ((c = getchar()) != '\"') {\n    str += c;\n  }\n  return str;\n}\n\nint main()\n{\n  int nTest;  \n  scanf(\"%d \",&nTest);\n  //cout << nTest << endl;\n    \n  for (int testIdx = 0; testIdx < nTest; testIdx++) {\n    string text = nextLine();\n    //cout << text << endl;\n    //    cin.ignore();\n\n    int N;\n    scanf(\" %d \", &N);\n    //cout << \"N = \" << N << endl;\n    //cin.ignore();\n    int cur = 0;\n    for (int i = 0; i < N; i++) {\n      string cmd, arg;\n      cmd = nextStr();\n      if (cmd == \"forward\") {\n\targ = nextStr();\n\tif (arg == \"char\") {\n\t  if (cur < text.size()) {\n\t    cur++;\n\t  }\n\t} else {\t\n\t  while (cur < text.size() && isblank(text[cur])) {cur++;}\n\t  while (cur < text.size() && !isblank(text[cur])) {cur++;}\n\t}\n      } else if (cmd == \"backward\") {\n\targ = nextStr();\n\tif (arg == \"char\") {\n\t  if (cur > 0) {\n\t    cur--;\n\t  }\n\t} else {\t  \n\t  while (cur > 0 && !isblank(text[cur])) {cur--;}\n\t  while (cur > 0 && isblank(text[cur])) {cur--;}\n\t}\n      } else if (cmd == \"insert\") {\n\targ = nextQuote();\n\ttext.insert(text.begin() + cur, arg.begin(), arg.end());\n\tcur += arg.size();\n      } else if (cmd == \"delete\") {\n\targ = nextStr();\n\tif (arg == \"char\") {\n\t  if (cur < text.size()) {\n\t    text.erase(text.begin() + cur);\n\t  }\n\t} else {\n\t  while (cur < text.size() && !isblank(text[cur])) {\n\t    text.erase(text.begin() + cur);\n\t  }\n\t  /*\n\t  while (cur < text.size() && isblank(text[cur])) {\n\t    text.erase(text.begin() + cur);\n\t  }\n\t  */\n\t}\n      }\n      //cout << \"cmd, arg = \" << cmd << \", \" << arg << endl;\n      //cout << \"cur = \" << cur << endl;\n      //cout << text << endl;\n    }\n    for (int i = 0; i < cur; i++) {\n      cout << text[i];\n    }\n    cout << \"^\";\n    for (int i = cur; i < text.size(); i++) {\n      cout << text[i];\n    }\n    cout << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n\nusing namespace std;\n\n#define rep(i, n) for (int i = 0; i < int(n); ++i)\n\nvoid solve() {\n  string str;\n  getline(cin, str);\n  int n;\n  cin >> n;\n  cin.ignore();\n  string buf;\n  int cur = 0;\n  rep (_, n) {\n    getline(cin, buf);\n    if (buf == \"forward char\") {\n      cur = min(cur + 1, (int)str.size());\n    } else if (buf == \"forward word\") {\n      while ((int)str.size() != cur && str[cur] == ' ') ++cur;\n      while ((int)str.size() != cur && str[cur] != ' ') ++cur;\n    } else if (buf == \"backward char\") {\n      cur = max(cur - 1, 0);\n    } else if (buf == \"backward word\") {\n      while (0 != cur && str[cur] == ' ') --cur;\n      while (0 != cur && str[cur] != ' ') --cur;\n    } else if (buf == \"delete char\") {\n      if (cur == (int)str.size()) continue;\n      str = str.substr(0, cur) + str.substr(cur + 1);\n    } else if (buf == \"delete word\") {\n      int s = cur, t;\n      while ((int)str.size() != s && str[s] == ' ') ++s;\n      if (s == (int)str.size()) continue;\n      for (t = s; t < (int)str.size() && str[t] != ' '; ++t);\n      str = str.substr(0, cur) + str.substr(t);\n    } else {\n      rep (i, buf.size()) if (buf[i] == ' ') {\n\tstring ins = buf.substr(i + 1);\n\tins = ins.substr(1, ins.size() - 2);\n\tstr = str.substr(0, cur) + ins + str.substr(cur);\n\tcur += ins.size();\n      }\n    }\n  }\n  cout << str.substr(0, cur) << \"^\" << str.substr(cur) << endl;\n}\n\nint main() {\n  int t;\n  cin >> t;\n  cin.ignore();\n  rep (i, t) solve();\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <cstdlib>\n#include <vector>\n#include <cstdio>\n\nusing namespace std;\n\nstring txt;\nint p;\n\nvector<string> split(string str)\n{\n  vector<string> vec;\n\n  for(int i = 0; i < str.size(); ++i)\n    if(str[i] == ' '){\n      vec.push_back(str.substr(0, i));\n      if(vec[0] == \"insert\"){\n\tvec.push_back(\"\");\n\tfor(int j = i+2; j < str.size()-1; ++j) vec[1] += str[j];\n      } else {\n\tvec.push_back(str.substr(i+1));\n      }\n    }\n\n  return vec;\n}\n\nint main()\n{\n  int n, m;\n  string str;\n  vector<string> vec;\n\n  while(getline(cin, str)){\n    n = atoi(str.c_str());\n\n    while(n--){\n      getline(cin, txt);\n      p = 0;\n      getline(cin, str);\n      m = atoi(str.c_str());\n\n      while(m--){\n\tgetline(cin, str);\n\tvec = split(str);\n\t// cout << vec[0] << \" \" << vec[1] << endl;\n\n\tif(vec[0] == \"insert\"){\n\t  txt.insert(p, vec[1]);\n\t  p += vec[1].size();\n\t} else if(vec[0] == \"forward\"){\n\t  if(vec[1] == \"char\" && p < txt.size()){\n\t    ++p;\n\t  } else if(vec[1] == \"word\"){\n\t    while(p < txt.size() && txt[p] == ' ') ++p;\n\t    while(p < txt.size() && txt[p] != ' ') ++p;\n\t  }\n\t} else if(vec[0] == \"backward\"){\n\t  if(vec[1] == \"char\" && p > 0){\n\t    --p;\n\t  } else if(vec[1] == \"word\"){\n\t    while(p > 0 && txt[p] != ' ') --p;\n\t  }\n\t} else if(vec[0] == \"delete\"){\n\t  if(vec[1] == \"char\" && p < txt.size()-1){\n\t    txt.erase(txt.begin()+p);\n\t  } else if(vec[1] == \"word\"){\n\t    for(int i = (txt[p] == ' ')? 1 : 0; p < txt.size() && txt[p] != ' '; ++i)\n\t      txt.erase(txt.begin()+(p));\n\t  }\n\t}\n\t// cout << m << \" \" << txt << endl;\n      }\n      // cout << p << endl;\n      txt.insert(p, \"^\");\n      cout << txt << endl;\n      txt.clear();\n    }\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long int uli;\nconst int mx=100+10;\nint main(){\n   ios_base::sync_with_stdio(0);\n   int t,q;\n   string s,op;\n   char ch;\n   cin>>t;\n   while(t--){\n      getline(cin,s);\n      getline(cin,s);\n      cin>>q;\n      int ix=0;\n      while(q--){\n         cin>>op;\n         if(op[0]=='f'){\n            cin>>op;\n            if(op[0]=='c')ix=min(ix+1,int(s.size()));\n            else{\n               while(ix<int(s.size()) && s[ix]==' ')ix++;\n               while(ix<int(s.size())&&s[ix]!=' ')ix++;\n            }\n         }\n         else if(op[0]=='b'){\n            cin>>op;\n            if(op[0]=='c')ix=max(0,ix-1);\n            else{\n               while(ix-1>=0 && s[ix-1]==' ')ix--;\n               while(ix-1>=0 && s[ix-1]!=' ')ix--;\n            }            \n         }\n         else if(op[0]=='i'){\n            string x=\"\";\n            while(cin>>ch,ch!='\"') {}\n            while(cin>>noskipws>>ch,ch!='\"') x+=string(1,ch);                                    \n            s.insert(ix,x);\n            ix=ix+int(x.size());\n            cin>>skipws;\n         }\n         else if(op[0]=='d'){\n            cin>>op;\n            if(op[0]=='c')s.erase(ix,1);\n            else if(op[0]=='w'){\n               int j=ix;\n               while(j<int(s.size()) && s[j]==' ')j++;\n               int ch=0;\n               while(j<int(s.size()) && s[j]!=' ')j++,ch++;\n\n               if(ch>0){\n                  j--;\n                  s.erase(ix,j-ix+1);\n               }\n            }\n         }\n\n//         cout<<s.substr(0,ix)<<\"^\"<<s.substr(ix)<<'\\n';\n      }\n      cout<<s.substr(0,ix)<<\"^\"<<s.substr(ix)<<'\\n';\n   }\n   return 0;\n}"
  },
  {
    "language": "C++",
    "code": "using namespace std;\n#include <iostream>\n#include <vector>\n#include <stdlib.h>\n#include <string.h>\n#include <string>\n\n#define REP(i, n) for(int i=0; i<n; i++)\n\ntypedef vector<int> VI;\n\nint T, N;\nstring text;\nstring cmd;\nstring tmp;\n\nvoid execute(string& text, string cmd)\n{\n\tif(cmd == \"forward char\"){\n\t\tREP(i, text.size())\n\t\t{\n\t\t\tif(text[i] == '^')\n\t\t\t{\n\t\t\t\tif(i != text.size()-1)\n\t\t\t\t{\n\t\t\t\t\ttext[i] = text[i+1];\n\t\t\t\t\ttext[i+1] = '^';\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse if(cmd ==\"forward word\")\n\t{\n\t\tint iCaret = -1;\n\t\tREP(i, text.size())\n\t\t{\n\t\t\tif(text[i] == '^')\n\t\t\t{\n\t\t\t\tiCaret = i;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif(text[i] == ' ' && iCaret != -1)\n\t\t\t{\n\t\t\t\tif(i != 0)\n\t\t\t\t{\n\t\t\t\t\tif(text[i-1] == ' ' || text[i-1] == '^')\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttext.insert(text.begin()+i, '^');\n\t\t\t\ttext.erase(text.begin()+iCaret);\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif(i == text.size()-1 && iCaret != -1)\n\t\t\t{\n\t\t\t\ttext.insert(text.end(), '^');\n\t\t\t\ttext.erase(text.begin()+iCaret);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\telse if(cmd == \"backward char\")\n\t{\n\t\tREP(i, text.size())\n\t\t{\n\t\t\tif(text[i] == '^')\n\t\t\t{\n\t\t\t\tif(i != 0)\n\t\t\t\t{\n\t\t\t\t\ttext[i] = text[i-1];\n\t\t\t\t\ttext[i-1] = '^';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse if(cmd == \"backward word\")\n\t{\n\t\tint iCaret = -1;\n\t\tfor(int i=text.size()-1; i>=0; i--)\n\t\t{\n\t\t\tif(text[i] == '^')\n\t\t\t{\n\t\t\t\tiCaret = i;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif(text[i] == ' ' && iCaret != -1)\n\t\t\t{\n\t\t\t\tif(i != text.size()-1)\n\t\t\t\t{\n\t\t\t\t\tif(text[i+1] == ' ' || text[i+1] == '^')\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttext.erase(text.begin() + iCaret);\n\t\t\t\ttext.insert(text.begin() + i, '^');\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif(i == 0 && iCaret != -1)\n\t\t\t{\n\t\t\t\ttext.erase(text.begin() + iCaret);\n\t\t\t\ttext.insert(text.begin(), '^');\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\telse if(cmd == \"delete char\")\n\t{\n\t\tREP(i, text.size())\n\t\t{\n\t\t\tif(text[i] == '^')\n\t\t\t{\n\t\t\t\tif(i != text.size()-1)\n\t\t\t\t{\n\t\t\t\t\ttext.erase(text.begin() + i+1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse if(cmd == \"delete word\")\n\t{\n\t\tint first = 0;\n\t\tint last = 0;\n\t\tREP(i, text.size())\n\t\t{\n\t\t\tif(text[i] == '^')\n\t\t\t{\n\t\t\t\tfirst = i;\n\t\t\t}\n\t\t\t\n\t\t\tif((text[i] == ' ' || i == text.size()-1) && first != 0)\n\t\t\t{\n\t\t\t\tif(i != 0)\n\t\t\t\t{\n\t\t\t\t\tif(text[i-1] == ' ' || text[i-1] == ' ')\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttext.erase(text.begin()+first+1, text.begin()+i);\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tbool is_insert = true;\n\t\tstring str_insert = \"insert\";\n\t\tREP(i, str_insert.size())\n\t\t{\n\t\t\tif(str_insert[i] != cmd[i])\n\t\t\t{\n\t\t\t\tis_insert = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif(is_insert)\n\t\t{\n\t\t\tstring word_insert = string(cmd, str_insert.size()+2, cmd.size()-str_insert.size()-3);\n\t\t\tstd::copy(cmd.begin()+str_insert.size()+2, cmd.end()-1, word_insert.begin());\n\t\t\t\n\t\t\tREP(i, text.size())\n\t\t\t{\n\t\t\t\tif(text[i] == '^')\n\t\t\t\t{\n\t\t\t\t\ttext.insert(i, word_insert);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main()\n{\n\tgetline(cin, tmp);\n\tT = atoi(tmp.c_str());\n\n\tREP(t, T)\n\t{\n\t\tgetline(cin, text);\n\t\ttext = \"^\" + text;\n\t\t//cout << text << endl;\n\n\t\tgetline(cin, tmp);\n\t\tN = atoi(tmp.c_str());\n\t\tREP(n, N)\n\t\t{\n\t\t\tgetline(cin, cmd);\n\t\t\texecute(text, cmd);\n\t\t}\n\t\tcout << text << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<cstring>\n#include<algorithm>\n\n#define rep(i,n) for(int i=0;i<(n);i++)\n\nusing namespace std;\n\nint main(){\n\tint T; scanf(\"%d%*c\",&T);\n\twhile(T--){\n\t\tchar s[1024]; fgets(s,200,stdin);\n\t\tint len=strlen(s);\n\t\ts[--len]='\\0';\n\n\t\tint cur=0;\n\t\tint m; scanf(\"%d\",&m);\n\t\twhile(m--){\n\t\t\tchar cmd[9]; scanf(\"%s \",cmd);\n\t\t\tchar arg[200]; fgets(arg,200,stdin); arg[strlen(arg)-1]='\\0';\n\n\t\t\tif(cmd[0]=='f' && arg[0]=='c'){ // forward char\n\t\t\t\tcur=min(cur+1,len);\n\t\t\t}\n\t\t\telse if(cmd[0]=='f' && arg[0]=='w'){ // forward word\n\t\t\t\tfor(;cur<len;cur++) if(s[cur]!=' ') break;\n\t\t\t\tfor(;cur<len;cur++) if(s[cur]==' ') break;\n\t\t\t}\n\t\t\telse if(cmd[0]=='b' && arg[0]=='c'){ // backward char\n\t\t\t\tcur=max(cur-1,0);\n\t\t\t}\n\t\t\telse if(cmd[0]=='b' && arg[0]=='w'){ // backward word\n\t\t\t\tfor(;cur>0;cur--) if(s[cur-1]==' ') break;\n\t\t\t\tfor(;cur>0;cur--) if(s[cur-1]!=' ') break;\n\t\t\t}\n\t\t\telse if(cmd[0]=='d' && arg[0]=='c'){ // delete char\n\t\t\t\tif(cur<len){\n\t\t\t\t\tfor(int i=cur;i<len;i++) s[i]=s[i+1];\n\t\t\t\t\tlen--;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(cmd[0]=='d' && arg[0]=='w'){ // delete word\n\t\t\t\tif(cur<len){\n\t\t\t\t\tint i=cur;\n\t\t\t\t\tfor(;i<len;i++) if(s[i]!=' ') break;\n\t\t\t\t\tfor(;i<len;i++) if(s[i]==' ') break;\n\t\t\t\t\trep(j,len-i+1) s[cur+j]=s[i+j];\n\t\t\t\t\tlen-=i-cur;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse{ // insert\n\t\t\t\t// \"\" ðí\n\t\t\t\tint len2=strlen(arg);\n\t\t\t\trep(i,len2-2) arg[i]=arg[i+1];\n\t\t\t\tlen2-=2;\n\t\t\t\targ[len2]='\\0';\n\n\t\t\t\tfor(int i=len;i>=cur;i--) s[i+len2]=s[i];\n\t\t\t\trep(i,len2) s[cur+i]=arg[i];\n\t\t\t\tcur+=len2;\n\t\t\t\tlen+=len2;\n\t\t\t}\n\t\t}\n\n\t\trep(i,len+1){\n\t\t\tif(i==cur) putchar('^');\n\t\t\tif(i<len) putchar(s[i]);\n\t\t}\n\t\tputchar('\\n');\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <string>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n\nclass text_editor {\nprivate:\n\tstring text;\npublic:\n\n\tvoid read_text(istream &in) {\n\t\tstring line;\n\t\tgetline(in,line);\n\t\tthis->text = \"^\" + line;\n\t}\n\n\tvoid forward_char() {\n\t\tauto cursor_pos = find(this->text.begin(),this->text.end(),'^');\n\t\tif (this->text.back() != *cursor_pos) { // if cursor not at the end of text\n\t\t\tswap(*cursor_pos,*(cursor_pos+1));\n\t\t}\n\t}\n\n\tvoid forward_word() {\n\t\tauto cursor_pos = find(this->text.begin(),this->text.end(),'^');\n\t\twhile (*(cursor_pos+1) == ' ') {\n\t\t\tswap(*cursor_pos,*(cursor_pos+1));\n\t\t\t++cursor_pos;\n\t\t}\n\t\twhile (this->text.back() != *cursor_pos && *(cursor_pos+1) != ' ') {\n\t\t\tswap(*cursor_pos,*(cursor_pos+1));\n\t\t\t++cursor_pos;\n\t\t}\n\t}\n\n\tvoid backward_char() {\n\t\tauto cursor_pos = find(this->text.begin(),this->text.end(),'^');\n\t\tif (this->text.front() != *cursor_pos) {\n\t\t\tswap(*cursor_pos,*(cursor_pos-1));\n\t\t}\n\t}\n\n\tvoid backward_word() {\n\t\tauto cursor_pos = find(this->text.begin(),this->text.end(),'^');\n\t\twhile (*(cursor_pos-1) == ' ') {\n\t\t\tswap(*cursor_pos,*(cursor_pos-1));\n\t\t\t--cursor_pos;\n\t\t}\n\t\twhile (this->text.front() != *cursor_pos && *(cursor_pos-1) != ' ') {\n\t\t\tswap(*cursor_pos,*(cursor_pos-1));\n\t\t\t--cursor_pos;\n\t\t}\n\t}\n\n\tvoid delete_char() {\n\t\tauto cursor_pos = find(this->text.begin(),this->text.end(),'^');\n\t\tif (this->text.back() != *cursor_pos) {\n\t\t\tthis->text.erase(cursor_pos+1);\n\t\t}\n\t}\n\n\tvoid delete_word() {\n\t\tauto cursor_pos = find(this->text.begin(),this->text.end(),'^');\n\t\tthis->text.erase(cursor_pos+1,find(cursor_pos+1,this->text.end(),' '));\n\t}\n\n\tvoid insert_any_text(string any_text) {\n\t\tthis->text.insert(this->text.find('^'),any_text);\n\t}\n\n\tstring get_text() {\n\t\treturn this->text;\n\t}\n};\n\nint main() {\n\ttext_editor edtr;\n\tint n; // number of texts\n\tcin >> n;\n\tcin.ignore();\n\twhile (n--) {\n\t\tedtr.read_text(cin);\n\t\tint cmd_num; // number of commands\n\t\tcin >> cmd_num;\n\t\tcin.ignore();\n\t\twhile (cmd_num--) {\n\t\t\tstring cmd;\n\t\t\tgetline(cin,cmd);\n\t\t\tif (cmd == \"forward char\") {\n\t\t\t\tedtr.forward_char();\n\t\t\t} else if (cmd == \"forward word\") {\n\t\t\t\tedtr.forward_word();\n\t\t\t} else if (cmd == \"backward char\") {\n\t\t\t\tedtr.backward_char();\n\t\t\t} else if (cmd == \"backward word\") {\n\t\t\t\tedtr.backward_word();\n\t\t\t} else if (cmd == \"delete char\") {\n\t\t\t\tedtr.delete_char();\n\t\t\t} else if (cmd == \"delete word\") {\n\t\t\t\tedtr.delete_word();\n\t\t\t} else { // insert \"any-text\"\n\t\t\t\tauto first_quot = cmd.find_first_of(\"\\\"\");\n\t\t\t\tauto last_quot = cmd.find_last_of(\"\\\"\");\n\t\t\t\tedtr.insert_any_text(cmd.substr(first_quot+1,last_quot - first_quot - 1));\n\t\t\t}\n\t\t}\n\t\tcout << edtr.get_text() << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cmath>\nusing namespace std;\n\nint main()\n{\n    string bla = \"bla\";\n    cout<<bla.substr(3)<<endl;\n    int nb_cas;\n    cin>>nb_cas;\n    cin.ignore();\n    while(nb_cas--)\n    {\n        string texte;\n        getline(cin,texte);\n        int nb_op;\n        cin>>nb_op;\n        int curseur = 0;\n        for(int c=0;c<nb_op;c++)\n        {\n            string s1,s2;\n            cin>>s1;\n            cin.ignore();\n            getline(cin,s2);\n\n            if(s1==\"forward\")\n            {\n                if(s2==\"char\") curseur++;\n                else\n                {\n                    while(curseur<texte.size()&&texte[curseur]==' ') curseur++;\n                    while(curseur<texte.size()&&texte[curseur]!=' ') curseur++;\n                }\n                curseur = min(curseur,(int)texte.size());\n            }\n\n            else if(s1==\"backward\")\n            {\n                if(s2==\"char\") curseur--;\n                else\n                {\n                    while(curseur>0&&texte[curseur-1]==' ') curseur--;\n                    while(curseur>0&&texte[curseur-1]!=' ') curseur--;\n                }\n                curseur = max(curseur,0);\n            }\n            else if(s1==\"delete\")\n            {\n                if(s2==\"char\"&&curseur<texte.size())\n                {\n                    texte.erase(texte.begin()+curseur);\n                }\n                else if(s2==\"word\")\n                {\n                    int finMot = curseur;\n                    while(finMot<texte.size()&&texte[finMot]==' ') finMot++;\n                    if(finMot == texte.size()) continue;\n                    while(finMot<texte.size()&&texte[finMot]!=' ')\n                    {\n                        finMot ++;\n                    }\n                    texte = texte.substr(0,curseur)+(finMot < texte.size()?texte.substr(finMot):\"\");\n                }\n            }\n            else\n            {\n                while(s2[0]!='\"') s2=s2.substr(1);\n                while(s2[s2.size()-1]!='\"') s2 = s2.substr(s2.size()-1);\n                s2 = s2.substr(1,s2.size()-2);\n                texte = texte.substr(0,curseur)+s2+(curseur<(int)texte.size()?texte.substr(curseur):\"\");\n                curseur += s2.size();\n            }\n        }\n        cout<<texte.substr(0,curseur)+\"^\"+(curseur<(int)texte.size()?texte.substr(curseur):\"\")<<endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <climits>\n#include <cfloat>\n#include <ctime>\n#include <cassert>\n#include <map>\n#include <utility>\n#include <set>\n#include <iostream>\n#include <memory>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <functional>\n#include <sstream>\n#include <complex>\n#include <stack>\n#include <queue>\n#include <numeric>\n#include <list>\n#include <iomanip>\n#include <iterator>\n \nusing namespace std;\n \ntypedef long long ll;\ntypedef pair<int,int> Pii;\ntypedef pair<ll,ll> Pll;\n \n#define FOR(i,n) for(int i = 0; i < (n); i++)\n#define sz(c) ((int)c.size())\n\ntypedef unsigned long long ull;\nconst int INF = (int)1e8;\n\nvoid operate(string &val,int &cur,string op){\n\tint n = sz(val);\n\tif(op == \"forward char\"){\n\t\tif(cur != n) cur++;\n\t} else if(op == \"forward word\"){\n\t\tif(cur != n){\n\t\t\twhile(cur < n && val[cur] == ' ') cur++;\n\t\t\twhile(cur < n && val[cur] != ' ') cur++; \n\t\t}\n\t} else if(op == \"backward char\"){\n\t\tif(cur != 0) cur--;\n\t} else if(op == \"backward word\"){\n\t\tif(cur != 0){\n\t\t\twhile(cur > 0 && val[cur-1] == ' ') cur--; \n\t\t\twhile(cur > 0 && val[cur-1] != ' ') cur--; \n\t\t}\n\t} else if(op == \"delete char\"){\n\t\tif(cur != n)\n\t\t\tval.erase(cur,1);\n\t} else if(op == \"delete word\"){\n\t\tif(cur != n){\n\t\t\tint pos = cur;\n\t\t\twhile(pos != n && val[pos] == ' ') pos++;\n\t\t\twhile(pos != n && val[pos] != ' ') pos++;\n\t\t\tval.erase(val.begin() + cur,val.begin() + pos);\n\t\t}\n\t} else {\n\t\tstring a = op.substr(8);\n\t\ta.erase(a.end()-1);\n\t\tval.insert(val.begin() + cur,a.begin(),a.end());\n\t\tcur += a.size();\n\t}\n}\n\nint main(){\n\tint t; cin>>t;\n\tstring buf;\n\tgetline(cin,buf);\n\twhile(t--){\n\t\tstring val; getline(cin,val);\n\t\tint m; cin>>m;\n\t\tgetline(cin,buf);\n\t\tvector<string> op(m); FOR(i,m) getline(cin,op[i]);\n\t\tint cur = 0;\n\t\tFOR(i,m){\n\t\t\toperate(val,cur,op[i]);\n\t\t}\n\n\t\tval.insert(val.begin() + cur,'^');\n\t\tcout << val << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cassert>\n#include <cctype>\n#include <cstdlib>\n#include <iostream>\n#include <vector>\nusing namespace std;\n\n#define REP(i, a, b) for(int i = (a); i < (int)(b); ++i)\n#define rep(i, n) REP(i, 0, n)\n\nvoid Forward(const string &text, unsigned &cursor, bool is_char) {\n\tif(is_char) {\n\t\tif(cursor < text.size()) ++cursor;\n\t}\n\telse {\n\t\twhile(cursor < text.size() && isblank(text[cursor])) ++cursor;\n\t\twhile(cursor < text.size() && !isblank(text[cursor])) ++cursor;\n\t}\n}\n\nvoid Backward(const string &text, unsigned &cursor, bool is_char) {\n\tif(is_char) {\n\t\tif(cursor > 0) --cursor;\n\t}\n\telse {\n\t\twhile(cursor > 0 && isblank(text[cursor - 1])) --cursor;\n\t\twhile(cursor > 0 && !isblank(text[cursor - 1])) --cursor;\n\t}\n}\n\nvoid Insert(string &text, unsigned &cursor, const string &target) {\n\tconst string insert_text = target.substr(1, target.size() - 2);\n\ttext.insert(cursor, insert_text);\n\tcursor += insert_text.size();\n}\n\nvoid Delete(string &text, unsigned cursor, bool is_char) {\n\tif(is_char) {\n\t\tif(cursor < text.size()) text.erase(text.begin() + cursor);\n\t}\n\telse {\n\t\tunsigned idx = cursor;\n\t\tForward(text, idx, false);\n\t\tif(idx == 0 || isblank(text[idx - 1])) return;\n\t\ttext.erase(text.begin() + cursor, text.begin() + idx);\n\t}\n}\n\nstring solve() {\n\tstring text;\n\tgetline(cin, text);\n\n\tint n;\n\tcin >> n;\n\tcin.ignore();\n\n\tunsigned cursor = 0;\n\trep(i, n) {\n\t\tstring line;\n\t\tgetline(cin, line);\n\n\t\tconst unsigned idx_space = line.find(' ');\n\t\tconst string command = line.substr(0, idx_space);\n\t\tconst string target = line.substr(idx_space + 1);\n\n\t\tswitch(command[0]) {\n\t\tcase 'f': Forward(text, cursor, target[0] == 'c'); break;\n\t\tcase 'b': Backward(text, cursor, target[0] == 'c'); break;\n\t\tcase 'i': Insert(text, cursor, target); break;\n\t\tcase 'd': Delete(text, cursor, target[0] == 'c'); break;\n\t\tdefault: assert(false);\n\t\t}\n\t}\n\n\ttext.insert(text.begin() + cursor, '^');\n\treturn text;\n}\n\nint main() {\n\tcin.tie(nullptr);\n\tios::sync_with_stdio(false);\n\n\tint t;\n\tcin >> t;\n\tcin.ignore();\n\twhile(t--) cout << solve() << endl;\n\n\treturn EXIT_SUCCESS;\n}"
  },
  {
    "language": "C++",
    "code": "#include <string>\n#include <iostream>\n#include <list>\n\nusing namespace std;\n\n#define rep(i,n) for(int i=0; i<n; i++)\n\nvoid solve(){\n    string t; getline(cin,t);\n    list<char> s(t.begin(),t.end());\n\n    auto it=s.begin();\n    int n; cin>>n; cin.get();\n    while(n--){\n        string cmd; getline(cin,cmd);\n\n        if(cmd==\"forward char\"){\n            if(it!=s.end()) ++it;\n        } else if(cmd==\"forward word\"){\n            while(it!=s.end() && *it==' ')\n                ++it;\n            while(it!=s.end() && *it!=' ')\n                ++it;\n        } else if(cmd==\"backward char\"){\n            if(it!=s.begin()) --it;\n        } else if(cmd==\"backward word\"){\n            while(it!=s.begin() && *--it==' ')\n                ;\n            while(it!=s.begin()){\n                --it;\n                if(*it==' '){\n                    ++it;\n                    break;\n                }\n            }\n        } else if(cmd.substr(0,6)==\"insert\"){\n            int i=cmd.find('\"')+1,j=cmd.find('\"',i);\n            s.insert(it,cmd.begin()+i,cmd.begin()+j);\n        } else if(cmd==\"delete char\"){\n            if(it!=s.end()) it=s.erase(it);\n        } else if(cmd==\"delete word\"){\n            auto it2=it;\n            while(it2!=s.end() && *it2==' ') ++it2;\n            if(it2==s.end()) continue;\n            while(it2!=s.end() && *it2!=' ') ++it2;\n            it=s.erase(it,it2);\n        }\n    }\n    for(auto i=s.begin();;++i){\n        if(i==it)\n            cout<<'^';\n        if(i==s.end())\n            break;\n        cout<<*i;\n    }\n    cout<<endl;\n}\n\nint main(){\n    int t; cin>>t;\n    cin.get();\n    rep(i,t) solve();\n}"
  },
  {
    "language": "C++",
    "code": "3\nA sample input\n9\nforward word\ndelete char\nforward word\ndelete char\nforward word\ndelete char\nbackward word\nbackward word\nforward word\nHallow, Word.\n7\nforward char\ndelete word\ninsert \"ello, \"\nforward word\nbackward char\nbackward char\ninsert \"l\"\n\n3\nforward word\nbackward word\ndelete word"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <string>\n#include <algorithm>\n#include <cctype>\nusing namespace std;\n\nstring str, op;\nint len, cursor;\n\nstring make_str(string in){\n  int i;\n  for(i = 0 ; in[i] != '\"' ; i++);\n  string out = \"\";\n  for(i = i+1 ; in[i] != '\"' ; i++){\n    out += in[i];\n  }\n  return out;\n}\n\n\nvoid forward_char(){\n  if(cursor < len) cursor++;\n}\n\nvoid forward_word(){\n  if(len == 0) return;\n  bool space = 0;\n  int tmp = 0;\n  for(tmp = cursor ; ; tmp++){\n    if(str[tmp+1] == ' '){\n      space = 1;\n    }\n    if(space) break;\n    \n    if(tmp >= len){\n      cursor = len;\n      return;\n    }\n  }\n  \n  while(1){\n    if(tmp >= len){\n      cursor = len;\n      return;\n    }\n    if(isalpha(str[tmp])) break;\n    tmp++;\n  }\n  \n  while(1){\n    if(tmp >= len){\n      cursor = len;\n      return;\n    }\n    if(str[tmp+1] == ' '){\n      cursor = tmp;\n      return;\n    }\n   tmp++;\n  }\n}\n\nvoid backward_char(){\n  if(len == 0) return;\n  if(cursor > 0) cursor--;\n  return;\n}\n\nvoid backward_word(){\n  if(len == 0) return;\n  int space = 0;\n  int tmp = 0;\n  for(tmp = cursor ; ; tmp--){\n    if(str[tmp] == ' ') space++;\n    if(space == 1){\n      cursor = tmp;\n      break;\n    }\n    if(tmp <= 0){\n      cursor = 0;\n      break;\n    }\n  }\n}\n\nvoid insert_text(string in){\n  str.insert(cursor+1, in);\n  cursor += in.size();\n  len += in.size();\n}\n\nvoid delete_char(){\n  if(len == 0) return;\n  if(cursor < len){\n    str.erase(str.begin()+cursor+1);\n    len--;\n  }\n}\n\nvoid delete_word(){\n  if(len == 0) return;\n  int space = 0;\n  int tmp = 0;\n  cursor--;\n  for(tmp = cursor+1 ;  ;){\n    str.erase(str.begin()+tmp);\n    len--;\n    if(str[tmp] == ' ') space++;\n    if(space == 1 || tmp >= len) return;\n  }\n}\n\nint main(){\n  int T;\n  cin >> T;\n  cin.ignore();\n  while(T--){\n    getline(cin, str);\n    len = str.size()-1;\n    if(len < 0) len = 0;\n    cursor = 0;\n    int N;\n    cin >> N;\n    cin.ignore();\n    while(N--){\n      getline(cin, op);\n      if(op == \"forward char\") forward_char();\n      else if(op == \"forward word\") forward_word();\n      else if(op == \"backward char\") backward_char();\n      else if(op == \"backward word\") backward_word();\n      else if(op.substr(0, 6) == \"insert\") insert_text(make_str(op));\n      else if(op == \"delete char\") delete_char();\n      else if(op == \"delete word\") delete_word();\n      /*\n      cout << op << endl;\n      for(int i = 0 ; i <= len ; i++){\n\tif(i == cursor) cout << str[i] << '^';\n\telse cout << str[i];\n      }\n      cout << endl;\n      printf(\"cursor = %d\\n\", cursor);\n      printf(\"len = %d\\n\", len);\n      cout << endl;*/\n    }\n    \n    if(len == 0){\n      cout << '^' << endl;\n      continue;\n    }\n    for(int i = 0 ; i <= len ; i++){\n      if(i == cursor) cout << str[i] << '^';\n      else cout << str[i];\n    }\n    cout << endl;\n  }\n  return 0;\n}\n\n    "
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <algorithm>\n#include <cctype>\nusing namespace std;\n\nint bword(string str, int n)\n{\n\tbool nb=false;\n\tint ret;\n\tfor(ret=n; ret>0; ret--)\n\t{\n\t\tif(!nb)\n\t\t{\n\t\t\tif(str[ret]!=' ') nb=true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(str[ret]==' ') return ret;\n\t\t}\n\t}\n\treturn ret;\n}\n\nint fword(string str, int n)\n{\n\tbool nb=false;\n\tint ret;\n\tfor(ret=n; ret<str.size(); ret++)\n\t{\n\t\tif(!nb)\n\t\t{\n\t\t\tif(str[ret]!=' ') nb=true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(str[ret]==' ') return ret;\n\t\t}\n\n\t}\n\n\treturn ret;\n}\n\nint dword(string str, int n)\n{\n\tbool nb=false;\n\tint ret;\n\tfor(ret=n; ret<str.size(); ret++)\n\t{\n\t\tif(!nb)\n\t\t{\n\t\t\tif(str[ret]!=' ') nb=true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(str[ret]==' ') return ret;\n\t\t}\n\n\t}\n\n\treturn n;\n}\n\nint main()\n{\n\tint N,M;\n\tstring str;\n\n\tcin >> N;\n\tgetline(cin,str);\n\n\twhile(N--)\n\t{\n\t\tgetline(cin,str);\n\t\t//str.erase(str.end()-1);\n\t\tint pos=0;\n\t\tcin >> M;\n\t\twhile(M--)\n\t\t{\n\t\t\tstring cmd;\n\t\t\tcin >> cmd;\n\t\t\tif(cmd[0]=='f')\n\t\t\t{\t\t\t\t\n\t\t\t\tgetline(cin,cmd);\n\t\t\t\tif(cmd[1]=='c')\n\t\t\t\t{\n\t\t\t\t\tif(pos<str.size()) pos++;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tpos=fword(str, pos);\n\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(cmd[0]=='b')\n\t\t\t{\n\t\t\t\tgetline(cin,cmd);\n\t\t\t\tif(cmd[1]=='c')\n\t\t\t\t{\n\t\t\t\t\tif(pos>0) pos--;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tpos=bword(str, pos);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(cmd[0]=='d')\n\t\t\t{\n\t\t\t\tgetline(cin,cmd);\n\t\t\t\tif(cmd[1]=='c')\n\t\t\t\t{\n\t\t\t\t\tif(pos!=str.size()) \n\t\t\t\t\t\tstr.erase(str.begin()+pos);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif(pos!=str.size())\n\t\t\t\t\t{\n\t\t\t\t\t\tint np=dword(str,pos);\n\t\t\t\t\t\tif(pos!=np) str.erase(str.begin()+pos, str.begin()+np);\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t\tif(cmd[0]=='i')\n\t\t\t{\n\t\t\t\tcin.ignore();\n\t\t\t\tgetline(cin, cmd);\n\t\t\t\tcmd.assign(cmd.begin()+1, cmd.end()-2);\n\t\t\t\tstr.insert(pos, cmd);\n\t\t\t\tpos+=cmd.size();\n\t\t\t}\n\n\t\t}\n\n\t\tstr.insert(str.begin()+pos, '^');\n\t\tcout << str << endl;\n\t}\n\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nint main(){\n        int n;\n        cin >> n;\n        string dummy;\n        getline(cin, dummy);\n        while(n--){\n                string text;\n                getline(cin, text);\n\n                int m, c = 0;\n                cin >> m;\n                while(m--){\n                        string cmd;\n                        cin >> cmd;\n                        if(cmd == \"forward\"){\n                                cin >> cmd;\n                                if(cmd == \"char\"){\n                                        if(c < text.size()){ ++c; }\n                                }else if(cmd == \"word\"){\n                                        for(; c < text.size(); ++c){\n                                                if(text[c] == ' '){ break; }\n                                        }\n                                }\n                                getline(cin, dummy);\n                        }else if(cmd == \"backward\"){\n                                cin >> cmd;\n                                if(cmd == \"char\"){\n                                        if(c > 0){ --c; }\n                                }else if(cmd == \"word\"){\n                                        for(; c > 0; --c){\n                                                if(text[c - 1] == ' '){ break; }\n                                        }\n                                }\n                                getline(cin, dummy);\n                        }else if(cmd == \"insert\"){\n                                getline(cin, cmd);\n                                int front = cmd.find_first_of('\"');\n                                int tail = cmd.find_last_of('\"');\n                                cmd = cmd.substr(front + 1, tail - front - 1);\n                                text.insert(c, cmd);\n                                c += cmd.size();\n                        }else if(cmd == \"delete\"){\n                                cin >> cmd;\n                                if(cmd == \"char\"){\n                                        if(c < text.size()){ text.erase(text.begin() + c); }\n                                }else if(cmd == \"word\"){\n                                        int front = c;\n                                        int end = text.find_first_of(' ', c + 1);\n                                        for(; front < text.size(); ++front){\n                                                if(text[front] != ' '){ break; }\n                                        }\n                                        if(end == string::npos){ end = text.size(); }\n                                        if(end != text.size()){ ++end; }\n                                        text.erase(text.begin() + c, text.begin() + end);\n                                }\n                                getline(cin, dummy);\n                        }\n                }\n                text.insert(c, \"^\");\n                cout << text << endl;\n        }\n        return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<sstream>\n#include<algorithm>\n#include<numeric>\n#include<vector>\n#include<map>\n#include<set>\n#include<queue>\n#include<cstdio>\n#include<cmath>\n#include<cstdlib>\n#include<cstring>\n#include<cassert>\n\n#define rep(i,n) for(int i=0;i<n;i++)\n#define all(c) (c).begin(),(c).end()\n#define fr(i,c) for(__typeof((c).begin()) i=(c).begin();i!=(c).end();i++)\n#define mp make_pair\n#define pb push_back\n#define dbg(x) cerr<<#x<<\" = \"<<(x)<<endl\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef vector<int> vi;\ntypedef pair<int,int> pi;\n\nconst int inf=1<<28;\nconst double INF=1e12,EPS=1e-9;\n\nstring text,in;\nint cur,len;\n\nvoid out(){\n  cout<<text.substr(0,cur)<<\"^\"<<text.substr(cur)<<endl;\n}\n\nint main()\n{\n  int CS,n; cin>>CS; cin.ignore();\n  rep(cs,CS){\n    getline(cin,text);\n    cin>>n; cin.ignore();\n    len=text.size();\n    cur=0;\n    rep(i,n){\n      getline(cin,in);\n      if(in==\"forward char\")cur=min(cur+1,len);\n      else if(in==\"backward char\")cur=max(cur-1,0);\n      else if(in==\"delete char\"){\n\tif(cur>=text.size())continue;\n\ttext.erase(text.begin()+cur); len--;\n      }\n      else if(in.find(\"insert\")!=in.npos){\n\tint s=in.find('\"'),t=in.find('\"',s+1);\n\ttext=text.substr(0,cur)+in.substr(s+1,t-s-1)+text.substr(cur);\n\tcur+=t-s-1; len+=t-s-1;\n      }\n      else if(in==\"forward word\"){\n\tfor(;cur<len&&text[cur]==' ';cur++);\n\tfor(;cur<len&&text[cur]!=' ';cur++);\n      }\n      else if(in==\"backward word\"){\n\tfor(;cur>0&&text[cur-1]==' ';cur--);\n\tfor(;cur>0&&text[cur-1]!=' ';cur--);\n      }\n      else if(in==\"delete word\"){\n\tint s=cur,t;\n\tfor(;text[s]==' ';s++);\n\tif(s>=len)continue;\n\tfor(t=s;text[t]!=' '&&t<len;t++);\n\ttext=text.substr(0,cur)+text.substr(t); len-=t-cur;\n      }\n    }\n    out();\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cassert>\n\nusing namespace std;\n\n#define rep(i, n) for (int i = 0; i < int(n); ++i)\n\nvoid solve() {\n  string str;\n  getline(cin, str);\n  int n;\n  cin >> n;\n  cin.ignore();\n  string buf;\n  int cur = 0;\n  rep (_, n) {\n    assert(0 <= cur && cur <= (int)str.size());\n    getline(cin, buf);\n    if (buf == \"forward char\") {\n      cur = min(cur + 1, (int)str.size());\n    } else if (buf == \"forward word\") {\n      while ((int)str.size() != cur && str[cur] == ' ') ++cur;\n      while ((int)str.size() != cur && str[cur] != ' ') ++cur;\n    } else if (buf == \"backward char\") {\n      cur = max(cur - 1, 0);\n    } else if (buf == \"backward word\") {\n      while (0 != cur && (cur == (int)str.size() || str[cur] == ' ')) --cur;\n      while (0 != cur && (cur == (int)str.size() || str[cur] != ' ')) --cur;\n    } else if (buf == \"delete char\") {\n      if (cur == (int)str.size()) continue;\n      str = str.substr(0, cur) + str.substr(cur + 1);\n    } else if (buf == \"delete word\") {\n      int s = cur;\n      while ((int)str.size() != s && str[s] == ' ') ++s;\n      if (s == (int)str.size()) continue;\n      while ((int)str.size() != s && str[s] != ' ') ++s;\n      str = str.substr(0, cur) + str.substr(s);\n    } else if (buf.substr(0, 6) == \"insert\") {\n      int s = buf.find('\"');\n      int t = buf.find('\"', s + 1);\n      string ins = buf.substr(s + 1, t - s - 1);\n      str = str.substr(0, cur) + ins + str.substr(cur);\n      cur += ins.size();\n    } else {\n      assert(0);\n    }\n  }\n  assert(0 <= cur && cur <= (int)str.size());\n  cout << str.substr(0, cur) << \"^\" << str.substr(cur) << endl;\n}\n\nint main() {\n  int t;\n  cin >> t;\n  cin.ignore();\n  rep (i, t) solve();\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <cmath>\n#include <algorithm>\n#include <cfloat>\n#include <stack>\n#include <queue>\n#include <vector>\n#include <string>\n#include <iostream>\n#include <set>\n#include <map>\n#include <time.h>\ntypedef long long int ll;\ntypedef unsigned long long int ull;\n#define BIG_NUM 2000000000\n#define MOD 1000000007\n#define EPS 0.000000001\nusing namespace std;\n\nint N;\n\nvoid func(){\n\n\tstring base_string;\n\n\tgetline(cin,base_string);\n\n\tint loc = 0;\n\n\tint Q,right;\n\tscanf(\"%d\",&Q);\n\tgetchar();\n\n\tstring tmp;\n\tbool FLG;\n\n\tfor(int i = 0; i < Q; i++){\n\t\tgetline(cin,tmp);\n\n\t\tif(tmp == \"forward char\"){\n\t\t\tif(loc < base_string.size())loc++;\n\t\t}else if(tmp == \"forward word\"){\n\t\t\tif(loc < base_string.size()){\n\t\t\t\twhile(loc < base_string.size() && base_string[loc] == ' ')loc++;\n\t\t\t\twhile(loc < base_string.size() && base_string[loc] != ' ')loc++;\n\t\t\t}\n\t\t}else if(tmp == \"backward char\"){\n\t\t\tif(loc > 0)loc--;\n\t\t}else if(tmp == \"backward word\"){\n\t\t\twhile(loc > 0 && base_string[loc-1] == ' ')loc--;\n\t\t\twhile(loc > 0 && base_string[loc-1] != ' ')loc--;\n\t\t}else if(tmp == \"delete char\"){\n\t\t\tif(loc < base_string.size()){\n\t\t\t\tstring str1 = base_string.substr(0,loc);\n\t\t\t\tstring str2 = base_string.substr(loc+1);\n\n\t\t\t\tbase_string = str1+str2;\n\t\t\t}\n\t\t}else if(tmp == \"delete word\"){\n\t\t\tif(loc < base_string.size()){\n\t\t\t\tright = loc;\n\t\t\t\twhile(right < base_string.size() && base_string[right] == ' ')right++;\n\t\t\t\tFLG = false;\n\t\t\t\twhile(right < base_string.size() && base_string[right] != ' '){\n\t\t\t\t\tright++;\n\t\t\t\t\tFLG = true;\n\t\t\t\t}\n\t\t\t\tif(!FLG)continue;\n\n\t\t\t\tstring str1 = base_string.substr(0,loc);\n\t\t\t\tstring str2 = base_string.substr(right);\n\n\t\t\t\tbase_string = str1 + str2;\n\n\t\t\t}\n\t\t}else{ //Insert\n\t\t\tbase_string.insert(loc,tmp.substr(8,tmp.size()-9));\n\t\t\tloc += tmp.size()-9;\n\t\t}\n\t}\n\n\tbase_string.insert(loc,\"^\");\n\tprintf(\"%s\\n\",base_string.c_str());\n}\n\n\nint main(){\n\n\tscanf(\"%d\",&N);\n\tgetchar();\n\n\tfor(int i = 0; i < N; i++)func();\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <cstdlib>\n#include <vector>\n#include <cstdio>\n\nusing namespace std;\n\nstring txt;\nint p;\n\nvector<string> split(string str)\n{\n  vector<string> vec;\n\n  for(int i = 0; i < str.size(); ++i)\n    if(str[i] == ' '){\n      vec.push_back(str.substr(0, i));\n      if(vec[0] == \"insert\"){\n\tvec.push_back(\"\");\n\tfor(int j = i+2; j < str.size()-1; ++j) vec[1] += str[j];\n      } else {\n\tvec.push_back(str.substr(i+1));\n      }\n    }\n\n  return vec;\n}\n\nint main()\n{\n  int n, m, t;\n  string str;\n  vector<string> vec;\n\n  while(getline(cin, str)){\n    n = atoi(str.c_str());\n\n    while(n--){\n      getline(cin, txt);\n      p = 0;\n      getline(cin, str);\n      m = atoi(str.c_str());\n\n      while(m--){\n\tgetline(cin, str);\n\tvec = split(str);\n\n\tif(vec[0] == \"insert\"){\n\t  txt.insert(p, vec[1]);\n\t  p += vec[1].size();\n\t} else if(vec[0] == \"forward\"){\n\t  if(vec[1] == \"char\" && p < txt.size()){\n\t    ++p;\n\t  } else if(vec[1] == \"word\"){\n\t    while(p < txt.size() && txt[p] == ' ') ++p;\n\t    while(p < txt.size() && txt[p] != ' ') ++p;\n\t  }\n\t} else if(vec[0] == \"backward\"){\n\t  if(vec[1] == \"char\" && p > 0){\n\t    --p;\n\t  } else if(vec[1] == \"word\"){\n\t    while(p > 0 && txt[p] == ' ') --p;\n\t    while(p > 0 && txt[p] != ' ') --p;\n\t  }\n\t} else if(vec[0] == \"delete\"){\n\t  if(vec[1] == \"char\" && p < txt.size()){\n\t    txt.erase(txt.begin()+p);\n\t  } else if(vec[1] == \"word\"){\n\t    t = p;\n\t    while(t < txt.size() && txt[t] == ' ') ++t;\n\t    if(t >= txt.size()) continue;\n\t    while(t < txt.size() && txt[t] != ' ') ++t;\n\t    txt = txt.substr(0, p) + txt.substr(t);\n\t  }\n\t}\n      }\n      txt.insert(p, \"^\");\n      cout << txt << endl;\n      txt.clear();\n    }\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <climits>\n#include <cfloat>\n#include <ctime>\n#include <cassert>\n#include <map>\n#include <utility>\n#include <set>\n#include <iostream>\n#include <memory>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <functional>\n#include <sstream>\n#include <complex>\n#include <stack>\n#include <queue>\n#include <numeric>\n#include <list>\n#include <iomanip>\n#include <iterator>\n \nusing namespace std;\n \ntypedef long long ll;\ntypedef pair<int,int> Pii;\ntypedef pair<ll,ll> Pll;\n \n#define FOR(i,n) for(int i = 0; i < (n); i++)\n#define sz(c) ((int)c.size())\n\ntypedef unsigned long long ull;\nconst int INF = (int)1e8;\n\nvoid OUT_CUR(string& val,int cur) { \n#ifdef _DEBUG\n\tputs(val.c_str());\n\tFOR(i,cur) putchar(' ');\n\tputs(\"^\");\n#endif\n}\n\nvoid operate(string &val,int &cur,string op){\n\tint n = sz(val);\n\tif(op == \"forward char\"){\n\t\tif(cur != n) cur++;\n\t} else if(op == \"forward word\"){\n\t\tif(cur != n){\n\t\t\twhile(cur < n && val[cur] == ' ') cur++;\n\t\t\twhile(cur < n && val[cur] != ' ') cur++; \n\t\t}\n\t} else if(op == \"backward char\"){\n\t\tif(cur != 0) cur--;\n\t} else if(op == \"backward word\"){\n\t\tif(cur != 0){\n\t\t\twhile(cur > 0 && val[cur-1] == ' ') cur--; \n\t\t\twhile(cur > 0 && val[cur-1] != ' ') cur--; \n\t\t}\n\t} else if(op == \"delete char\"){\n\t\tif(cur != n)\n\t\t\tval.erase(cur,1);\n\t} else if(op == \"delete word\"){\n\t\tif(cur != n){\n\t\t\tint pos = 1;\n\t\t\twhile(cur + pos != n && val[cur + pos - 1] == ' ') pos++;\n\t\t\twhile(cur + pos != n && val[cur + pos - 1] != ' ') pos++;\n\t\t\tval.erase(cur,pos);\n\t\t}\n\t} else {\n\t\tstring a = op.substr(8);\n\t\ta.erase(a.end()-1);\n\t\tval.insert(val.begin() + cur,a.begin(),a.end());\n\t\tcur += a.size();\n\t}\n\n\tOUT_CUR(val,cur);\n}\n\nint main(){\n\tint t; cin>>t;\n\tstring buf;\n\tgetline(cin,buf);\n\twhile(t--){\n\t\tstring val; getline(cin,val);\n\t\tint m; cin>>m;\n\t\tgetline(cin,buf);\n\t\tvector<string> op(m); FOR(i,m) getline(cin,op[i]);\n\t\tint cur = 0;\n\t\tFOR(i,m){\n\t\t\toperate(val,cur,op[i]);\n\t\t}\n\n\t\tval.insert(val.begin() + cur,'^');\n\t\tcout << val << endl; \n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <string>\n#include <iostream>\n\nusing namespace std;\n\nint n,m;\n\nint main(void){\n\tscanf(\"%d%*c\",&n);\n\tfor(int dd=0;dd<n;dd++){\n\t\tstring str;\n\t\tgetline(cin,str);\n\t\tscanf(\"%d%*c\",&m);\n\t\tint point=0;\n\t\tfor(int i=0;i<m;i++){\n\t\t\tstring com;\n\t\t\tgetline(cin,com);\n\t\t\tif(com==\"forward char\"){\n\t\t\t\tif(point<str.size()){\n\t\t\t\t\tpoint++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(com==\"forward word\"){\n\t\t\t\tif(point<str.size()){\n\t\t\t\t\twhile(point<str.size() && str[point]==' ')point++;\n\t\t\t\t\twhile(point<str.size() && str[point]!=' ')point++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(com==\"backward char\"){\n\t\t\t\tif(point>0){\n\t\t\t\t\tpoint--;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(com==\"backward word\"){\n\t\t\t\tif(point>0){\n\t\t\t\t\twhile(point>0 && str[point-1]==' ')point--;\n\t\t\t\t\twhile(point>0 && str[point-1]!=' ')point--;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(com[0]=='i'){\n\t\t\t\tstring str2;\n\t\t\t\tstring str3;\n\t\t\t\tstring str4;\n\t\t\t\tstr2=str.substr(0,point);\n\t\t\t\tstr3=str.substr(point);\n\t\t\t\tstr4=com.substr(8,com.size()-9);\n\t\t\t\tstr=str2+str4+str3;\n\t\t\t\tpoint+=com.size()-9;\n\t\t\t\t//cout << str4 << endl;\n\t\t\t}\n\t\t\tif(com==\"delete char\"){\n\t\t\t\tif(str.size()==point)continue;\n\t\t\t\tstring str2;\n\t\t\t\tstring str3;\n\t\t\t\tstr2=str.substr(0,point);\n\t\t\t\tstr3=str.substr(point+1);\n\t\t\t\tstr=str2+str3;\n\t\t\t}\n\t\t\tif(com==\"delete word\"){\n\t\t\t\tif(str.size()==point)continue;\n\t\t\t\tint e=1;\n\t\t\t\tif(str[point]==' '){\n\t\t\t\t\twhile(point+e<str.size() && str[point+e]==' ')e++;\n\t\t\t\t}\n\t\t\t\twhile(point+e<str.size() && str[point+e]!=' ')e++;\n\n\t\t\t\tstring str2;\n\t\t\t\tstring str3;\n\t\t\t\tstr2=str.substr(0,point);\n\t\t\t\tstr3=str.substr(point+e);\n\t\t\t\tstr=str2+str3;\n\t\t\t}\n\t\t}\n\t\tstring res=\"\";\n\t\tfor(int i=0;i<str.size();i++){\n\t\t\tif(i==point)res+='^';\n\t\t\tres+=str[i];\n\t\t}\n\t\tif(str.size()==point)res+='^';\n\t\tcout << res << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\n#include<unordered_map>\n#include<unordered_set>\n#pragma warning(disable:4996)\nusing namespace std;\nusing ld = long double;\nconst ld eps = 1e-9;\n\n//// < \"d:\\d_download\\visual studio 2015\\projects\\programing_contest_c++\\debug\\a.txt\" > \"d:\\d_download\\visual studio 2015\\projects\\programing_contest_c++\\debug\\b.txt\"\n\nvoid pr(string st, int i) {\n\tfor (int c = 0; c < st.size(); ++c) {\n\t\tif (c == i)cout << '^';\n\t\tcout << st[c];\n\t}\n\tif (i == st.size())cout << '^';\n\tcout << endl;\n}\n\nint main() {\n\tint N; cin >> N;\n\tstring dummy;\n\tgetline(cin, dummy);\n\twhile (N--) {\n\t\tstring st;\n\t\tgetline(cin, st);\n\t\tint M; cin >> M;\n\t\tint i = 0;\n\t\tgetline(cin, dummy);\n\t\twhile (M--) {\n\t\t\tstring order; getline(cin, order);\n\t\t\tif (order == \"forward char\") {\n\t\t\t\tif (i != st.size())i++;\n\t\t\t}\n\t\t\telse if (order == \"forward word\") {\n\t\t\t\twhile (i != st.size() && st[i] == ' ') {\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t\twhile (i != st.size()&&st[i]!=' ') {\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (order == \"backward char\") {\n\t\t\t\tif (i)i--;\n\t\t\t}\n\t\t\telse if (order == \"backward word\") {\n\t\t\t\twhile (i && st[i - 1] == ' ') {\n\t\t\t\t\ti--;\n\t\t\t\t}\n\t\t\t\twhile (i && st[i-1] != ' ') {\n\t\t\t\t\ti--;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (order == \"delete char\") {\n\t\t\t\tif (i != st.size()) {\n\t\t\t\t\tst.erase(i,1);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (order == \"delete word\") {\n\t\t\t\tif (st.find_first_not_of(' ',i) != string::npos) {\n\t\t\t\t\twhile (i != st.size() && st[i] == ' ') {\n\t\t\t\t\t\tst.erase(i, 1);\n\t\t\t\t\t}\n\t\t\t\t\twhile (i != st.size() && st[i] != ' ') {\n\t\t\t\t\t\tst.erase(i, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\telse {\n\t\t\t\tstring ins = order.substr(order.find(' ') + 2, order.size()-3- order.find(' '));\n\t\t\t\tst.insert(i, ins);\n\t\t\t\ti += ins.size();\n\t\t\t}\n\n\t\t\t//pr(st, i);\n\t\t}\n\t\tpr(st, i);\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <string>\n#include <sstream>\nusing namespace std;\n\nint main() {\n  int Tc;\n  cin >> Tc;\n  cin.ignore();\n  for(int tc = 0; tc < Tc; ++tc) {\n    string text;\n    getline(cin, text);\n    int M;\n    cin >> M;\n    cin.ignore();\n    int cursor = 0;\n    while(M--) {\n      string a, b;\n      {\n\tstring line;\n\tgetline(cin, line);\n\tfor(int i = 0; i < line.size(); ++i) {\n\t  if(line[i] == ' ') {\n\t    a = line.substr(0, i);\n\t    b = line.substr(i+1);\n\t    break;\n\t  }\n\t}\n      }\n      int N = text.size();\n      if(0) {\n      } else if(a == \"forward\" && b == \"char\") {\n\tcursor = min(cursor+1, N);\n      } else if(a == \"forward\" && b == \"word\") {\n\tint begin;\n\tfor(begin = cursor; begin < N && text[begin] == ' ';\n\t    ++begin);\n\tfor(cursor = begin; cursor < N && text[cursor] != ' ';\n\t    ++cursor);\n      } else if(a == \"backward\" && b == \"char\") {\n\tcursor = max(cursor-1, 0);\n      } else if(a == \"backward\" && b == \"word\") {\n\tint begin;\n\tfor(begin = cursor; begin > 0 && text[begin-1] == ' ';\n\t    --begin);\n\tfor(cursor = begin; cursor > 0 && text[cursor-1] != ' ';\n\t    --cursor);\n      } else if(a == \"insert\") {\n\tb = b.substr(1, b.size()-2);\n\ttext.insert(cursor, b);\n\tcursor += b.size();\n      } else if(a == \"delete\" && b == \"char\") {\n\ttext.erase(cursor, 1);\n      } else if(a == \"delete\" && b == \"word\") {\n\tint begin = cursor;\n\tint end;\n\tfor(end = cursor; end < N && text[end] == ' ';\n\t    ++end);\n\tfor(; end < N && text[end] != ' ';\n\t    ++end);\n\ttext.erase(begin, end-begin);\n      }\n    }\n    text.insert(cursor, \"^\");\n    cout << text << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint main() {\n    int N;\n    cin >> N;\n    cin.ignore();\n\n    while(N--) {\n        string str;\n        getline(cin, str);\n        int cursor = 0;\n        int M;\n        cin >> M;\n        cin.ignore();\n\n        while(M--) {\n            string cmdline;\n            getline(cin, cmdline);\n\n            int delim = cmdline.find(' ');\n            string cmd = cmdline.substr(0, delim);\n            string target = cmdline.substr(delim+1);\n            if(cmd == \"forward\") {\n                if(target == \"word\") {\n                    while(cursor < str.size() && str[cursor] == ' ') ++cursor;\n                    while(cursor < str.size() && str[cursor] != ' ') ++cursor;\n                }\n                else if(target == \"char\") {\n                    if(cursor < str.size()) ++cursor;\n                }\n                else {\n                    cerr << \"Unknown target in forward: \" << target << endl;\n                    while(1) ;\n                }\n            }\n            else if(cmd == \"backward\") {\n                if(target == \"word\") {\n                    while(cursor > 0 && str[cursor] == ' ') --cursor;\n                    while(cursor > 0 && str[cursor] != ' ') --cursor;\n                }\n                else if(target == \"char\") {\n                    if(cursor > 0) --cursor;\n                }\n                else {\n                    cerr << \"Unknown target in backward: \" << target << endl;\n                    while(1) ;\n                }\n            }\n            else if(cmd == \"delete\") {\n                if(target == \"word\") {\n                    int idx = cursor;\n                    bool ok = false;\n                    while(idx < str.size() && str[idx] == ' ') ++idx;\n                    while(idx < str.size() && str[idx] != ' ') {++idx; ok = true; }\n                    if(ok) {\n                        str.erase(cursor, idx-cursor);\n                    }\n                }\n                else if(target == \"char\") {\n                    if(cursor >= str.size()) continue;\n                    str.erase(cursor, 1);\n                }\n                else {\n                    cerr << \"Unknown target in delete: \" << target << endl;\n                    while(1) ;\n                }\n            }\n            else if(cmd == \"insert\") {\n                str = str.substr(0, cursor) + target.substr(1, target.find_last_of('\"')-1) + str.substr(cursor);\n                cursor += target.size()-2;\n            }\n            else {\n                //cerr << \"Unknown command: \" << cmd << endl;\n            }\n        }\n        cout << str.substr(0, cursor) << '^' << str.substr(cursor) << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\n#include<unordered_map>\n#include<unordered_set>\n#pragma warning(disable:4996)\nusing namespace std;\nusing ld = long double;\nconst ld eps = 1e-9;\n\n//// < \"d:\\d_download\\visual studio 2015\\projects\\programing_contest_c++\\debug\\a.txt\" > \"d:\\d_download\\visual studio 2015\\projects\\programing_contest_c++\\debug\\b.txt\"\n\nvoid pr(string st, int i) {\n\tfor (int c = 0; c < st.size(); ++c) {\n\t\tif (c == i)cout << '^';\n\t\tcout << st[c];\n\t}\n\tif (i == st.size())cout << '^';\n\tcout << endl;\n}\n\nint main() {\n\tint N; cin >> N;\n\tstring dummy;\n\tgetline(cin, dummy);\n\twhile (N--) {\n\t\tstring st;\n\t\tgetline(cin, st);\n\t\tint M; cin >> M;\n\t\tint i = 0;\n\t\tgetline(cin, dummy);\n\t\twhile (M--) {\n\t\t\tstring order; getline(cin, order);\n\t\t\tif (order == \"forward char\") {\n\t\t\t\tif (i != st.size())i++;\n\t\t\t}\n\t\t\telse if (order == \"forward word\") {\n\t\t\t\tif (i != st.size())i++;\n\t\t\t\twhile (i != st.size()&&st[i]!=' ') {\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (order == \"backward char\") {\n\t\t\t\tif (i)i--;\n\t\t\t}\n\t\t\telse if (order == \"backward word\") {\n\t\t\t\tif (i )i--;\n\t\t\t\twhile (i && st[i-1] != ' ') {\n\t\t\t\t\ti--;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (order == \"delete char\") {\n\t\t\t\tif (i != st.size()) {\n\t\t\t\t\tst.erase(i,1);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (order == \"delete word\") {\n\t\t\t\tif (st.find_first_not_of(' ',i) != string::npos) {\n\t\t\t\t\twhile (i != st.size() && st[i] == ' ') {\n\t\t\t\t\t\tst.erase(i, 1);\n\t\t\t\t\t}\n\t\t\t\t\twhile (i != st.size() && st[i] != ' ') {\n\t\t\t\t\t\tst.erase(i, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\telse {\n\t\t\t\tstring ins = order.substr(order.find(' ') + 2, order.size()-3- order.find(' '));\n\t\t\t\tst.insert(i, ins);\n\t\t\t\ti += ins.size();\n\t\t\t}\n\n\t\t\t//pr(st, i);\n\t\t}\n\t\tpr(st, i);\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nvector<string> split(string s, string t) {\n\tvector<string> r;\n\tint p = s.find(t);\n\tif (p != s.npos) {\n\t\tr.push_back(s.substr(0, p));\n\t\ts = s.substr(p+t.size());\n\t}\n\tr.push_back(s);\n\treturn r;\n}\n\nvoid output(string text, int cursor) {\n\tcout << text.substr(0, cursor) << '^' << text.substr(cursor) << endl;\n}\n\nint main() {\n\tint n; cin >> n;\n\tcin.ignore();\n\tint i = 0;\n\t\n\twhile (i<n) {\n\t\t// solver\n\t\tstring text;\n\t\tgetline(cin, text);\n\t\t\n\t\tint cursor = 0;\n\t\t\n\t\tint m; cin >> m;\n\t\tcin.ignore();\n\t\t\n\t\tfor (int j=0; j<m; j++) {\n\t\t\tstring command;\n\t\t\tgetline(cin, command);\n\t\t\t\n\t\t\tvector<string> com = split(command, \" \");\n\t\t\t\n\t\t\tif (com[0]==\"forward\") {\n\t\t\t\n\t\t\t\tif (com[1]==\"char\") {\n\t\t\t\t\n\t\t\t\t\tif (cursor < (int)text.size()) cursor++;\n\t\t\t\t\t\n\t\t\t\t} else if (com[1]==\"word\") {\n\t\t\t\t\n\t\t\t\t\tif (cursor == 0) {\n\t\t\t\t\t\tbool find = false;\n\t\t\t\t\t\tint k;\n\t\t\t\t\t\tfor (k=cursor; k<(int)text.size() && !find; k++) {\n\t\t\t\t\t\t\tif (text[k]==' ') {\n\t\t\t\t\t\t\t\tfind = true;\n\t\t\t\t\t\t\t\tcursor = k;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!find) cursor = (int)text.size();\n\t\t\t\t\t\t\n\t\t\t\t\t} else {\n\t\t\t\t\t\n\t\t\t\t\t\tbool find = false;\n\t\t\t\t\t\tint b = cursor;\n\t\t\t\t\t\tfor (; b<(int)text.size() && !find; b++) {\n\t\t\t\t\t\t\tif (text[b]!=' ') {\n\t\t\t\t\t\t\t\tfind = true;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (find) {\n\t\t\t\t\t\t\tfind = false;\n\t\t\t\t\t\t\tint k = b;\n\t\t\t\t\t\t\tfor (; k<(int)text.size() && !find; k++) {\n\t\t\t\t\t\t\t\tif (text[k]==' ') {\n\t\t\t\t\t\t\t\t\tfind = true;\n\t\t\t\t\t\t\t\t\tcursor = k;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (!find) cursor = (int)text.size();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcursor = (int)text.size();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t} else if (com[0]==\"backward\") {\n\t\t\t\n\t\t\t\tif (com[1]==\"char\") {\n\t\t\t\t\n\t\t\t\t\tif (cursor > 0) cursor--;\n\t\t\t\t\t\n\t\t\t\t} else if (com[1]==\"word\") {\n\t\t\t\t\n\t\t\t\t\tbool find = false;\n\t\t\t\t\tint k = cursor;\n\t\t\t\t\tfor (; k>=0 && !find; k--) {\n\t\t\t\t\t\tif (text[k]==' ') find = true;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (find) {\n\t\t\t\t\t\tbool find2 = false;\n\t\t\t\t\t\tfor (; k>=0 && !find2; k--) {\n\t\t\t\t\t\t\tif (text[k]==' ') {\n\t\t\t\t\t\t\t\tfind2 = true;\n\t\t\t\t\t\t\t\tcursor = k + 1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!find2) cursor = 0;\n\t\t\t\t\t\t\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcursor = 0;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t} else if (com[0]==\"insert\") {\n\t\t\t\t\n\t\t\t\tstring ins = com[1].substr(1, (int)com[1].size()-2);\n\t\t\t\ttext = text.substr(0, cursor) + ins + text.substr(cursor);\n\t\t\t\tcursor += (int)ins.size();\n\t\t\t\t\n\t\t\t} else if (com[0]==\"delete\") {\n\t\t\t\t\n\t\t\t\tif (com[1] == \"char\" && cursor < (int)text.size()) {\n\t\t\t\t\t\n\t\t\t\t\tif (cursor < (int)text.size()) {\n\t\t\t\t\t\ttext = text.substr(0, cursor) + text.substr(cursor + 1);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t} else if (com[1]==\"word\" && cursor < (int)text.size()) {\n\t\t\t\t\t\n\t\t\t\t\tint del = cursor + 1;\t\t\t\t\t\n\t\t\t\t\tfor (; del < (int)text.size(); del++) {\n\t\t\t\t\t\tif (text[del] == ' ') {\n\t\t\t\t\t\t\tdel++;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t\ttext = text.substr(0, cursor) + text.substr(del);\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\toutput(text, cursor);\n\t\t}\n\t\t\n\t\t// output\n\t\t\n\t\t\n\t\ti++;\n\t}\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstdlib>\n#include <cmath>\n#include <climits>\n#include <cfloat>\n#include <cstring>\n#include <map>\n#include <utility>\n#include <set>\n#include <iostream>\n#include <memory>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <functional>\n#include <sstream>\n#include <fstream>\n#include <complex>\n#include <stack>\n#include <queue>\n\nusing namespace std;\ntypedef long long LL;\ntypedef pair<int, int> PII;\nstatic const double EPS = 1e-5;\n\n#define FOR(i,k,n) for (int i=(k); i<(int)(n); ++i)\n#define REP(i,n) FOR(i,0,n)\n\nint main(void){\n  int N;\n  cin>>N;\n  cin.ignore();\n  while(N--){\n    string buf;\n    getline(cin,buf);\n    int M;\n    cin>>M;\n    cin.ignore();\n    string::iterator it = buf.begin();\n    while(M--){\n      /*\n      {\n      int dist = distance(buf.begin(),it);\n      REP(i,buf.size()){\n        if(i==dist)putchar('^');\n        putchar(buf[i]);\n      }\n      if(it==buf.end())putchar('^');\n      putchar('\\n');\n      }\n      */\n      string command;\n      getline(cin,command);\n      if(command==\"forward char\"&&it!=buf.end()) it++;\n      if(command==\"backward char\"&&it!=buf.begin()) it--;\n      if(command==\"forward word\"){\n        while(it!=buf.end()&&*it==' ')it++;\n        while(it!=buf.end()&&*it!=' ')it++;\n      }\n      if(command==\"backward word\"){\n        if(it!=buf.begin())it--;\n        while(it!=buf.begin()&&(*it)==' ')it--;\n        while(it!=buf.begin()&&(*it)!=' ')it--;\n        if(*it==' ') it++;\n      }\n      if(command==\"delete char\"&&it!=buf.end()) it = buf.erase(it);\n      if(command==\"delete word\"){\n        string::iterator it2 = find(it,buf.end(),' ');\n        //if(it2!=buf.end())it2++;\n        it = buf.erase(it,it2);\n      }\n      if(command.find(\"insert\",0)!=string::npos){\n        string ins = command.substr(8);\n        string::iterator ir = ins.end()-1;\n        ins.erase(ir);\n        //cout<<ins<<endl;\n        REP(i,ins.size()){\n          it = buf.insert(it,ins[i]);\n          it++;\n        }\n      }\n    }\n    int dist = distance(buf.begin(),it);\n    REP(i,buf.size()){\n      if(i==dist)putchar('^');\n      putchar(buf[i]);\n    }\n    if(it==buf.end())putchar('^');\n    putchar('\\n');\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<cctype>\nusing namespace std;\nclass SimpleEditor{\npublic:\n  int cur;\n  string s;\n  SimpleEditor(string s):s(s),cur(0){}\n  void ForwardChar(){\n    ++cur;\n    if(cur>=s.length())cur=s.length()-1;\n  }\n  void BackwardChar(){\n    --cur;\n    if(cur<0)cur=0;\n  }\n  void ForwardWord(){\n    while(s[cur]==' '&&cur<=s.length()-1)++cur;\n    while(s[cur]!=' '&&cur<=s.length()-1)++cur;\n    BackwardChar();\n  }\n  void BackwardWord(){\n    while(s[cur]==' '&&cur>=0)--cur;\n    while(s[cur]!=' '&&cur>=0)--cur;\n    ForwardChar();\n  }\n  void Insert(string text){\n    s.insert(s.begin()+cur,text.begin()+8,text.end()-1);\n    cur += text.length()-9;\n  }\n  bool DeleteChar(){\n    if(s.begin()+cur+1!=s.end()){\n      s.erase(s.begin()+cur+1);\n      return true;\n    }\n    return false;\n  }\n  void DeleteWord(){\n    if(cur+1>=s.length())return ;\n    while(s[cur+1]==' '&&DeleteChar());\n    while(s[cur+1]!=' '&&DeleteChar());\n    if(s[cur]!=' ')s.erase(s.begin()+cur);\n  }\n  string ToString(){\n    string ret;\n    for(int i=0;i<s.length();++i){\n      //if(i==cur)ret+='[';\n      if(i==cur)ret+='^';\n      ret+=s[i];\n      //if(i==cur)ret+=']';\n    }\n    ret.erase(ret.end()-1);\n    return ret;\n  }\n};\nvoid GetLine(string &s){\n  getline(cin,s);\n  for(int i =0;i<s.length();++i){\n    if(iscntrl(s[i])){s.erase(s.begin()+i);--i;}\n  }\n}\nint main(){\n  string dam;\n  int T;\n  cin >> T;\n  GetLine(dam);\n  for(int tc=1;tc<=T;++tc){\n    string s;\n    GetLine(s);\n    s+='#';\n    SimpleEditor se(s);\n    //cout << \"NUMBER OF TEST CASE : \" << T << \" INITIAL STRING : \" << s << endl;\n    int t;\n    cin >> t;\n    GetLine(dam);\n    for(int i = 0; i < t; ++i){\n      string inst;\n      GetLine(inst);\n      if(inst==\"forward char\")se.ForwardChar();\n      if(inst==\"forward word\")se.ForwardWord();\n      if(inst==\"backward char\")se.BackwardChar();\n      if(inst==\"backward word\")se.BackwardWord();\n      if(inst.find(\"insert\")!=string::npos)se.Insert(inst);\n      if(inst==\"delete char\")se.DeleteChar();\n      if(inst==\"delete word\")se.DeleteWord();\n      //cout<<i<<\"/\" <<t<<\":\"<<\" INST:\" <<inst<<\" ED:\"<<se.ToString() << endl;\n    }\n    cout << se.ToString() << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <sstream>\n#include <string>\nusing namespace std;\n\nint GetForwardLast( int cs, string t )\n{\n    if ( cs == (int)t.size() ) return cs;\n\n    bool flag = false;\n    for ( int i = cs; i < (int)t.size(); i++ )\n    {\n        if ( t[i] == ' ' )\n        {\n            if ( flag )\n            {\n                return i;\n            }\n        }\n        else\n        {\n            flag = true;\n        }\n    }\n    return (int)t.size();\n}\n\nint GetBackwardFirst( int cs, string t )\n{\n    if ( cs == 0 ) return 0;\n\n    bool flag = false;\n    for ( int i = cs-1; i >= 0; i-- )\n    {\n        if ( t[i] == ' ' )\n        {\n            if ( flag )\n            {\n                return i + 1;\n            }\n        }\n        else\n        {\n            flag = true;\n        }\n    }\n    return 0;\n}\n\nint main( void )\n{\n    string line;\n\n    getline( cin, line );\n    istringstream is( line );\n    int n;\n    is >> n;\n\n    for ( int i = 0; i < n; i++ )\n    {\n        int cs = 0;\n\n        getline( cin, line );\n        string text = line;\n\n        getline( cin, line );\n        istringstream is( line );\n        int m;\n        is >> m;\n        is.clear();\n\n        for ( int j = 0; j < m; j++ )\n        {\n            getline( cin, line );\n            string c = line;\n            istringstream is( c );\n            string c1, c2;\n            is >> c1;\n            getline( is, c2 );\n            c2 = c2.substr( 1 );\n            is.clear();\n\n            int cs_f = GetForwardLast( cs, text );\n            int cs_b = GetBackwardFirst( cs, text );\n\n            if ( c1 == \"forward\" )\n            {\n                if ( c2 == \"char\" )\n                {\n                    if ( cs + 1 <= (int)text.size() ) cs++;\n                }\n                else\n                {\n                    cs = cs_f;\n                }\n            }\n            else if ( c1 == \"backward\" )\n            {\n                if ( c2 == \"char\" )\n                {\n                    if ( cs - 1 >= 0 ) cs--;\n                }\n                else\n                {\n                    cs = cs_b;\n                }\n            }\n            else if ( c1 == \"insert\" )\n            {\n                string next;\n                string trim;\n                for ( int k = 1; k + 1 < (int)c2.size(); k++ ) trim += c2[k];\n                for ( int k = 0; k < cs; k++ ) next += text[k];\n                for ( int k = 0; k < (int)trim.size(); k++ ) next += trim[k];\n                for ( int k = cs; k < (int)text.size(); k++ ) next += text[k];\n                text = next;\n                cs += (int)trim.size();\n            }\n            else if ( c1 == \"delete\" )\n            {\n                if ( c2 == \"char\" )\n                {\n                    if ( cs < (int)text.size() )\n                    {\n                        string next = text.substr( 0, cs ) + text.substr( cs+1 );\n                        text = next;\n                    }\n                }\n                else\n                {\n                    bool blank = true;\n                    for ( int k = 0; k < (int)text.size(); k++ ) if ( text[k] != ' ' ) blank = false;\n                    if ( blank == false && cs < (int)text.size() )\n                    {\n                        string next = text.substr( 0, cs ) + text.substr( cs_f );\n                        text = next;\n                    }\n                }\n            }\n        }\n\n        for ( int i = 0; i <= (int)text.size(); i++ )\n        {\n            if ( i == cs ) cout << \"^\";\n            if ( i < (int)text.size() ) cout << text[i];\n        }\n        cout << endl;\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <sstream>\n#include <string>\nusing namespace std;\n\nint GetForwardLast( int cs, string t )\n{\n    if ( cs == (int)t.size() ) return cs;\n\n    bool flag = false;\n    for ( int i = cs; i < (int)t.size(); i++ )\n    {\n        if ( t[i] == ' ' )\n        {\n            if ( flag )\n            {\n                return i;\n            }\n        }\n        else\n        {\n            flag = true;\n        }\n    }\n    return (int)t.size();\n}\n\nint GetBackwardFirst( int cs, string t )\n{\n    if ( cs == 0 ) return 0;\n\n    bool flag = false;\n    for ( int i = cs-1; i >= 0; i-- )\n    {\n        if ( t[i] == ' ' )\n        {\n            if ( flag )\n            {\n                return i + 1;\n            }\n        }\n        else\n        {\n            flag = true;\n        }\n    }\n    return 0;\n}\n\nint main( void )\n{\n    string line;\n\n    getline( cin, line );\n    istringstream is( line );\n    int n;\n    is >> n;\n\n    for ( int i = 0; i < n; i++ )\n    {\n        int cs = 0;\n\n        getline( cin, line );\n        string text = line;\n\n        getline( cin, line );\n        istringstream is( line );\n        int m;\n        is >> m;\n        is.clear();\n\n        for ( int j = 0; j < m; j++ )\n        {\n            getline( cin, line );\n            string c = line;\n            istringstream is( c );\n            string c1, c2;\n            is >> c1;\n            getline( is, c2 );\n            c2 = c2.substr( 1 );\n            is.clear();\n\n            int cs_f = GetForwardLast( cs, text );\n            int cs_b = GetBackwardFirst( cs, text );\n\n            if ( c1 == \"forward\" )\n            {\n                if ( c2 == \"char\" )\n                {\n                    if ( cs + 1 <= (int)text.size() ) cs++;\n                }\n                else\n                {\n                    cs = cs_f;\n                }\n            }\n            else if ( c1 == \"backward\" )\n            {\n                if ( c2 == \"char\" )\n                {\n                    if ( cs - 1 >= 0 ) cs--;\n                }\n                else\n                {\n                    cs = cs_b;\n                }\n            }\n            else if ( c1 == \"insert\" )\n            {\n                string next;\n                string trim;\n                for ( int k = 1; k + 1 < (int)c2.size(); k++ ) trim += c2[k];\n                for ( int k = 0; k < cs; k++ ) next += text[k];\n                for ( int k = 0; k < (int)trim.size(); k++ ) next += trim[k];\n                for ( int k = cs; k < (int)text.size(); k++ ) next += text[k];\n                text = next;\n                cs += (int)trim.size();\n            }\n            else if ( c1 == \"delete\" )\n            {\n                if ( c2 == \"char\" )\n                {\n                    if ( cs < (int)text.size() )\n                    {\n                        string next = text.substr( 0, cs ) + text.substr( cs+1 );\n                        text = next;\n                    }\n                }\n                else\n                {\n                    if ( cs < (int)text.size() )\n                    {\n                        string next = text.substr( 0, cs ) + text.substr( cs_f );\n                        text = next;\n                    }\n                }\n            }\n        }\n\n        for ( int i = 0; i <= (int)text.size(); i++ )\n        {\n            if ( i == cs ) cout << \"^\";\n            if ( i < (int)text.size() ) cout << text[i];\n        }\n        cout << endl;\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <climits>\n#include <cfloat>\n#include <ctime>\n#include <cassert>\n#include <map>\n#include <utility>\n#include <set>\n#include <iostream>\n#include <memory>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <functional>\n#include <sstream>\n#include <complex>\n#include <stack>\n#include <queue>\n#include <numeric>\n#include <list>\n#include <iomanip>\n#include <iterator>\n \nusing namespace std;\n \ntypedef long long ll;\ntypedef pair<int,int> Pii;\ntypedef pair<ll,ll> Pll;\n \n#define FOR(i,n) for(int i = 0; i < (n); i++)\n#define sz(c) ((int)c.size())\n\ntypedef unsigned long long ull;\nconst int INF = (int)1e8;\n\nvoid OUT_CUR(string& val,int cur) { \n#ifdef _DEBUG\n\tputs(val.c_str());\n\tFOR(i,cur) putchar(' ');\n\tputs(\"^\");\n#endif\n}\n\nvoid operate(string &val,int &cur,string op){\n\tint n = sz(val);\n\tif(op == \"forward char\"){\n\t\tif(cur != n) cur++;\n\t} else if(op == \"forward word\"){\n\t\tif(cur != n){\n\t\t\tcur++;\n\t\t\twhile(cur != n && val[cur] != ' ') cur++; \n\t\t\twhile(cur+1 < n && val[cur+1] == ' ') cur++;\n\t\t}\n\t} else if(op == \"backward char\"){\n\t\tif(cur != 0) cur--;\n\t} else if(op == \"backward word\"){\n\t\tif(cur != 0){\n\t\t\tcur--;\n\t\t\twhile(cur != 0 && val[cur-1] != ' ') cur--; \n\t\t\twhile(cur-1 > 0 && val[cur-1] == ' ') cur--; \n\t\t}\n\t} else if(op == \"delete char\"){\n\t\tif(cur != n)\n\t\t\tval.erase(cur,1);\n\t} else if(op == \"delete word\"){\n\t\tif(cur != n){\n\t\t\tint pos = 1;\n\t\t\twhile(cur + pos != n && val[cur + pos - 1] == ' ') pos++;\n\t\t\twhile(cur + pos != n && val[cur + pos - 1] != ' ') pos++;\n\t\t\tval.erase(cur,pos);\n\t\t}\n\t} else {\n\t\tstring a = op.substr(8);\n\t\ta.erase(a.end()-1);\n\t\tval.insert(val.begin() + cur,a.begin(),a.end());\n\t\tcur += a.size();\n\t}\n\n\tOUT_CUR(val,cur);\n}\n\nint main(){\n\tint t; cin>>t;\n\tstring buf;\n\tgetline(cin,buf);\n\twhile(t--){\n\t\tstring val; getline(cin,val);\n\t\tint m; cin>>m;\n\t\tgetline(cin,buf);\n\t\tvector<string> op(m); FOR(i,m) getline(cin,op[i]);\n\t\tint cur = 0;\n\t\tFOR(i,m){\n\t\t\toperate(val,cur,op[i]);\n\t\t}\n\n\t\tval.insert(val.begin() + cur,'^');\n\t\tcout << val << endl; \n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint main() {\n    int N;\n    cin >> N;\n    cin.ignore();\n\n    while(N--) {\n        string str;\n        getline(cin, str);\n        int cursor = 0;\n        int M;\n        cin >> M;\n        cin.ignore();\n\n        while(M--) {\n            string cmdline;\n            getline(cin, cmdline);\n\n            int delim = cmdline.find(' ');\n            string cmd = cmdline.substr(0, delim);\n            string target = cmdline.substr(delim+1);\n            if(cmd == \"forward\") {\n                if(target == \"word\") {\n                    int start = str.find_first_not_of(' ', cursor);\n                    if(start == string::npos) {\n                        cursor = str.size();\n                        continue;\n                    }\n                    int end = str.find_first_of(' ', start);\n                    if(end == string::npos) {\n                        cursor = str.size();\n                        continue;\n                    }\n                    cursor = end;\n                }\n                else if(target == \"char\") {\n                    if(cursor < str.size()) ++cursor;\n                }\n                else {\n                    cerr << \"Unknown target in forward: \" << target << endl;\n                }\n            }\n            else if(cmd == \"backward\") {\n                if(target == \"word\") {\n                    int start = str.find_last_not_of(' ', cursor-1);\n                    if(start == string::npos) {\n                        cursor = 0;\n                        continue;\n                    }\n                    int end = str.find_last_of(' ', start);\n                    if(end == string::npos) {\n                        cursor = 0;\n                        continue;\n                    }\n                    cursor = end+1;\n                }\n                else if(target == \"char\") {\n                    if(cursor > 0) --cursor;\n                }\n                else {\n                    cerr << \"Unknown target in backward: \" << target << endl;\n                }\n            }\n            else if(cmd == \"delete\") {\n                if(target == \"word\") {\n                    int startword = str.find_first_not_of(' ', cursor);\n                    if(startword == string::npos) {\n                        continue;\n                    }\n                    int end = str.find_first_of(' ', startword);\n                    if(end == string::npos) continue;\n                    str.erase(cursor, end-cursor);\n                }\n                else if(target == \"char\") {\n                    if(cursor >= str.size()) continue;\n                    str.erase(cursor, 1);\n                }\n                else {\n                    cerr << \"Unknown target in delete: \" << target << endl;\n                }\n            }\n            else if(cmd == \"insert\") {\n                str = str.substr(0, cursor) + target.substr(1, target.find_last_of('\"')-1) + str.substr(cursor);\n                cursor += target.size()-2;\n            }\n            else {\n                //cerr << \"Unknown command: \" << cmd << endl;\n            }\n        }\n        cout << str.substr(0, cursor) << '^' << str.substr(cursor) << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "//02\n#include<iostream>\n#include<string>\n\nusing namespace std;\n\nint main(){\n  int t;\n  cin>>t;\n  cin.ignore();\n  while(t--){\n    string s;\n    getline(cin,s);\n    int c=0;\n    int m;\n    cin>>m;\n    while(m--){\n      string ca,cb;\n      cin>>ca;\n      getline(cin,cb);\n      if(ca==\"forward\"){\n\tif(cb==\" char\"){\n\t  if(c<s.size()){\n\t    c++;\n\t  }\n\t}else{\n\t  while(c<s.size()&&s[c]==' '){\n\t    c++;\n\t  }\n\t  while(c<s.size()&&s[c]!=' '){\n\t    c++;\n\t  }\n\t}\n      }else if(ca==\"backward\"){\n\tif(cb==\" char\"){\n\t  if(c!=0){\n\t    c--;\n\t  }\n\t}else{\n\t  while(c!=0&&s[c]==' '){\n\t    c--;\n\t  }\n\t  while(c!=0&&s[c]!=' '){\n\t    c--;\n\t  }\n\t  c+=s[c]==' ';\n\t}\n      }else if(ca==\"insert\"){\n\ts.insert(c,cb.substr(2,cb.size()-3));\n\tc+=cb.size()-3;\n      }else{\n\tif(cb==\" char\"){\n\t  if(c!=s.size()){\n\t    s.erase(c,1);\n\t  }\n\t}else{\n\t  while(c!=s.size()&&s[c]==' '){\n\t    s.erase(c,1);\n\t  }\n\t  while(c!=s.size()&&s[c]!=' '){\n\t    s.erase(c,1);\n\t  }\n\t}\n      }\n    }\n    for(int i=0;i<s.size();i++){\n      if(i==c){\n\tcout<<'^';\n      }\n      cout<<s[i];\n    }\n    if(c==s.size()){\n      cout<<'^';\n    }\n    cout<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <climits>\n#include <cmath>\n#include <ctime>\n#include <cassert>\n#include <iostream>\n#include <fstream>\n#include <sstream>\n#include <iomanip>\n#include <complex>\n#include <string>\n#include <vector>\n#include <list>\n#include <deque>\n#include <stack>\n#include <queue>\n#include <set>\n#include <map>\n#include <bitset>\n#include <iterator>\n#include <functional>\n#include <utility>\n#include <algorithm>\n#include <numeric>\n#include <typeinfo>\n\nusing namespace std;\n\n#define dump(n) cerr<<\"# \"<<#n<<\"=\"<<(n)<<endl\n#define repi(i,a,b) for(int i=int(a);i<int(b);i++)\n#define peri(i,a,b) for(int i=int(b);i-->int(a);)\n#define rep(i,n) repi(i,0,n)\n\ntypedef unsigned int uint;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef vector<double> vd;\ntypedef vector<vd> vvd;\ntypedef vector<string> vs;\ntypedef pair<int,int> pii;\n\nvoid solve(){\n    string t; getline(cin,t);\n    list<char> s(t.begin(),t.end());\n\n    auto it=s.begin();\n    int n; cin>>n; cin.get();\n    while(n--){\n        string cmd; getline(cin,cmd);\n        if(cmd==\"forward char\")\n            if(it!=s.end())\n                ++it;\n        if(cmd==\"forward word\"){\n            while(it!=s.end() && *it==' ')\n                ++it;\n            while(it!=s.end() && *it!=' ')\n                ++it;\n        }\n        if(cmd==\"backward char\")\n            if(it!=s.begin())\n                --it;\n        if(cmd==\"backward word\"){\n            while(it!=s.begin() && *--it==' ')\n                ;\n            while(it!=s.begin()){\n                --it;\n                if(*it==' '){\n                    ++it;\n                    break;\n                }\n            }\n        }\n        if(cmd.substr(0,6)==\"insert\"){\n            int i=cmd.find('\"')+1,j=cmd.find('\"',i);\n            s.insert(it,cmd.begin()+i,cmd.begin()+j);\n        }\n        if(cmd==\"delete char\")\n            if(it!=s.end())\n                it=s.erase(it);\n        if(cmd==\"delete word\"){\n            auto it2=it;\n            while(it2!=s.end() && *it2==' ')\n                ++it2;\n            if(it2==s.end())\n                continue;\n            while(it2!=s.end() && *it2!=' ')\n                ++it2;\n            it=s.erase(it,it2);\n        }\n    }\n    for(auto i=s.begin();;++i){\n        if(i==it)\n            cout<<'^';\n        if(i==s.end())\n            break;\n        cout<<*i;\n    }\n    cout<<endl;\n}\n\nint main()\n{\n    int t; cin>>t; cin.get();\n    while(t--)\n        solve();\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <climits>\n#include <cfloat>\n#include <ctime>\n#include <cassert>\n#include <map>\n#include <utility>\n#include <set>\n#include <iostream>\n#include <memory>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <functional>\n#include <sstream>\n#include <complex>\n#include <stack>\n#include <queue>\n#include <numeric>\n#include <list>\n#include <iomanip>\n#include <iterator>\n \nusing namespace std;\n \ntypedef long long ll;\ntypedef pair<int,int> Pii;\ntypedef pair<ll,ll> Pll;\n \n#define FOR(i,n) for(int i = 0; i < (n); i++)\n#define sz(c) ((int)c.size())\n\ntypedef unsigned long long ull;\nconst int INF = (int)1e8;\n\nvoid OUT_CUR(string& val,int cur) { \n#ifdef _DEBUG\n\tputs(val.c_str());\n\tFOR(i,cur) putchar(' ');\n\tputs(\"^\");\n#endif\n}\n\nvoid operate(string &val,int &cur,string op){\n\tint n = sz(val);\n\tif(op == \"forward char\"){\n\t\tif(cur != n) cur++;\n\t} else if(op == \"forward word\"){\n\t\tif(cur != n){\n\t\t\twhile(cur < n && val[cur] == ' ') cur++;\n\t\t\twhile(cur < n && val[cur] != ' ') cur++; \n\t\t}\n\t} else if(op == \"backward char\"){\n\t\tif(cur != 0) cur--;\n\t} else if(op == \"backward word\"){\n\t\tif(cur != 0){\n\t\t\twhile(cur > 0 && val[cur-1] == ' ') cur--; \n\t\t\twhile(cur > 0 && val[cur-1] != ' ') cur--; \n\t\t}\n\t} else if(op == \"delete char\"){\n\t\tif(cur != n)\n\t\t\tval.erase(cur,1);\n\t} else if(op == \"delete word\"){\n\t\tif(cur != n){\n\t\t\tint pos = 1;\n\t\t\twhile(cur + pos != n && val[cur + pos - 1] == ' ') pos++;\n\t\t\twhile(cur + pos != n && val[cur + pos - 1] != ' ') pos++;\n\t\t\tval.erase(cur,pos);\n\t\t}\n\t} else {\n\t\tstring a = op.substr(8);\n\t\ta.erase(a.end()-1);\n\t\tval.insert(val.begin() + cur,a.begin(),a.end());\n\t\tcur += a.size();\n\t}\n\n\tOUT_CUR(val,cur);\n}\n\nint main(){\n\tint t; cin>>t;\n\tstring buf;\n\tgetline(cin,buf);\n\twhile(t--){\n\t\tstring val; getline(cin,val);\n\t\tint m; cin>>m;\n\t\tgetline(cin,buf);\n\t\tvector<string> op(m); FOR(i,m) getline(cin,op[i]);\n\t\tint cur = 0;\n\t\tFOR(i,m){\n\t\t\toperate(val,cur,op[i]);\n\t\t}\n\n\t\tval.insert(val.begin() + cur,'^');\n\t\tcout << val;\n\t\tif(t) cout << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cassert>\n\nusing namespace std;\n\n#define rep(i, n) for (int i = 0; i < int(n); ++i)\n\nvoid solve() {\n  string str;\n  getline(cin, str);\n  int n;\n  cin >> n;\n  cin.ignore();\n  string buf;\n  int cur = 0;\n  rep (_, n) {\n    assert(0 <= cur && cur <= (int)str.size());\n    getline(cin, buf);\n    if (buf == \"forward char\") {\n      cur = min(cur + 1, (int)str.size());\n    } else if (buf == \"forward word\") {\n      while ((int)str.size() != cur && str[cur] == ' ') ++cur;\n      while ((int)str.size() != cur && str[cur] != ' ') ++cur;\n    } else if (buf == \"backward char\") {\n      cur = max(cur - 1, 0);\n    } else if (buf == \"backward word\") {\n      while (0 != cur && (cur == (int)str.size() || str[cur] == ' ')) --cur;\n      while (0 != cur && (cur == (int)str.size() || str[cur] == ' ')) ++cur;\n    } else if (buf == \"delete char\") {\n      if (cur == (int)str.size()) continue;\n      str = str.substr(0, cur) + str.substr(cur + 1);\n    } else if (buf == \"delete word\") {\n      int s = cur, t;\n      while ((int)str.size() != s && str[s] == ' ') ++s;\n      if (s == (int)str.size()) continue;\n      for (t = s; t < (int)str.size() && str[t] != ' '; ++t);\n      str = str.substr(0, cur) + str.substr(t);\n    } else if (buf.substr(0, 6) == \"insert\") {\n      int s = buf.find('\"');\n      int t = buf.find('\"', s + 1);\n      string ins = buf.substr(s + 1, t - s - 1);\n      str = str.substr(0, cur) + ins + str.substr(cur);\n      cur += ins.size();\n    } else {\n      assert(0);\n    }\n  }\n  assert(0 <= cur && cur <= (int)str.size());\n  cout << str.substr(0, cur) << \"^\" << str.substr(cur) << endl;\n}\n\nint main() {\n  int t;\n  cin >> t;\n  cin.ignore();\n  rep (i, t) solve();\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstdlib>\n#include <cmath>\n#include <climits>\n#include <cfloat>\n#include <map>\n#include <utility>\n#include <set>\n#include <iostream>\n#include <memory>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <functional>\n#include <sstream>\n#include <complex>\n#include <stack>\n#include <queue>\n#include <cstring>\n#include <sstream>\n#ifndef M_PI\n#define M_PI 3.1415926535897932384626433832795\n#endif\nusing namespace std;\nstatic const double EPS = 1e-5;\ntypedef long long ll;\ntypedef pair<int,int> PI;\n#define rep(i,n) for(int i=0;i<(int)n;++i)\n#define FOR(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i)\n#define ALL(c) (c).begin(), (c).end()\n#define mp(a,b) make_pair(a,b)\n#define pb(a) push_back(a)\n#define F first\n#define S second\n\nint dx[]={0,1,0,-1};\nint dy[]={1,0,-1,0};\n\nstring in;\nint pos;\n\n\nmain(){\n  int n;\n  cin>>n;\n  cin.ignore();\n  while(n--){\n    pos=0;\n    getline(cin,in);\n    int t;\n    cin>>t;\n    cin.ignore();\n    while(t--){\n      string com;\n      getline(cin,com);\n      if(com==\"forward char\" && pos<in.size())++pos;\n      else if(com==\"backward char\" && pos)--pos;\n      else if(com==\"forward word\"){\n\twhile(pos<in.size() && in[pos]==' ')++pos;\n\twhile(pos<in.size() && in[pos]!=' ')++pos;\n      }else if(com==\"backward word\"){\n\twhile(pos && in[pos]!=' ')--pos;\n      }else if(com[0]=='i'){\n\tin.insert(pos,com.substr(8,com.size()-9));\n\tpos+=com.size()-9;\n      }else if(com==\"delete char\"){\n\tif(pos+1<in.size())in.erase(pos,1);\n      }else if(com==\"delete word\"){\n\tint sz=0;\n\twhile(pos+sz<in.size() && in[pos+sz]!=' ')++sz;\n\tin.erase(pos,sz);\n      }\n    }\n    rep(i,in.size()){\n      if(i==pos)cout<<'^';\n      cout<<in[i];\n    }\n    if(pos==in.size())cout<<'^';\n    cout<<endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <algorithm>\n#include <cctype>\nusing namespace std;\n\nint bword(string str, int n)\n{\n\tbool nb=false;\n\tint ret;\n\tfor(ret=n; ret>0; ret--)\n\t{\n\t\tif(!nb)\n\t\t{\n\t\t\tif(str[ret]!=' ') nb=true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(str[ret]==' ') return ret;\n\t\t}\n\t}\n\treturn ret;\n}\n\nint fword(string str, int n)\n{\n\tbool nb=false;\n\tint ret;\n\tfor(ret=n; ret<str.size(); ret++)\n\t{\n\t\tif(!nb)\n\t\t{\n\t\t\tif(str[ret]!=' ') nb=true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(str[ret]==' ') return ret;\n\t\t}\n\n\t}\n\n\treturn ret;\n}\n\nint dword(string str, int n)\n{\n\tbool nb=false;\n\tint ret;\n\tfor(ret=n; ret<str.size(); ret++)\n\t{\n\t\tif(!nb)\n\t\t{\n\t\t\tif(str[ret]!=' ') nb=true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(str[ret]==' ') return ret;\n\t\t}\n\n\t}\n\n\treturn n;\n}\n\nint main()\n{\n\tint N,M;\n\tstring str;\n\n\tcin >> N;\n\tgetline(cin,str);\n\n\twhile(N--)\n\t{\n\t\tgetline(cin,str);\n\t\tstr.erase(str.end()-1);\n\t\tint pos=0;\n\t\tcin >> M;\n\t\twhile(M--)\n\t\t{\n\t\t\tstring cmd;\n\t\t\tcin >> cmd;\n\t\t\tif(cmd[0]=='f')\n\t\t\t{\t\t\t\t\n\t\t\t\tgetline(cin,cmd);\n\t\t\t\tif(cmd[1]=='c')\n\t\t\t\t{\n\t\t\t\t\tif(pos<str.size()) pos++;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tpos=fword(str, pos);\n\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(cmd[0]=='b')\n\t\t\t{\n\t\t\t\tgetline(cin,cmd);\n\t\t\t\tif(cmd[1]=='c')\n\t\t\t\t{\n\t\t\t\t\tif(pos>0) pos--;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tpos=bword(str, pos);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(cmd[0]=='d')\n\t\t\t{\n\t\t\t\tgetline(cin,cmd);\n\t\t\t\tif(cmd[1]=='c')\n\t\t\t\t{\n\t\t\t\t\tif(pos!=str.size()) \n\t\t\t\t\t\tstr.erase(str.begin()+pos);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif(pos!=str.size())\n\t\t\t\t\t{\n\t\t\t\t\t\tint np=dword(str,pos);\n\t\t\t\t\t\tif(pos!=np) str.erase(str.begin()+pos, str.begin()+np);\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t\tif(cmd[0]=='i')\n\t\t\t{\n\t\t\t\tcin.ignore();\n\t\t\t\tgetline(cin, cmd);\n\t\t\t\tcmd.assign(cmd.begin()+1, cmd.end()-2);\n\t\t\t\tstr.insert(pos, cmd);\n\t\t\t\tpos+=cmd.size();\n\t\t\t}\n\n\t\t}\n\n\t\tstr.insert(str.begin()+pos, '^');\n\t\tcout << str << endl;\n\t}\n\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <climits>\n#include <cmath>\n#include <ctime>\n#include <cassert>\n#include <iostream>\n#include <fstream>\n#include <sstream>\n#include <iomanip>\n#include <complex>\n#include <string>\n#include <vector>\n#include <list>\n#include <deque>\n#include <stack>\n#include <queue>\n#include <set>\n#include <map>\n#include <bitset>\n#include <iterator>\n#include <functional>\n#include <utility>\n#include <algorithm>\n#include <numeric>\n#include <typeinfo>\n\nusing namespace std;\n\n#define repi(i,a,b) for(int i=int(a);i<int(b);i++)\n#define rep(i,n) repi(i,0,n)\n#define all(c) (c).begin(), (c).end()\n#define mp make_pair\n\nvoid solve(){\n    string t;\n    getline(cin,t);\n    list<char> s(all(t));\n    rep(i,t.size()) s.push_back(t[i]);\n\n    auto it = s.begin();\n    int n; cin>>n; cin.get();\n    while(n--){\n        string op;\n        getline(cin,op);\n        if(op==\"forward char\")\n            if(it!=s.end())\n                ++it;\n        if(op==\"forward word\"){\n            while(it!=s.end() && *it==' ')\n                ++it;\n            while(it!=s.end() && *it!=' ')\n                ++it;\n        }\n        if(op==\"backward char\")\n            if(it!=s.begin())\n                --it;\n        if(op==\"backward word\"){\n            while(it!=s.begin() && *--it==' ')\n                ;\n            while(it!=s.begin()){\n                --it;\n                if(*it==' '){\n                    ++it;\n                    break;\n                }\n            }\n        }\n        if(op.substr(0,6)==\"insert\"){\n            int i=op.find('\"')+1,j=op.find('\"',i);\n            s.insert(it,op.begin()+i,op.begin()+j);\n        }\n        if(op==\"delete char\")\n            if(it!=s.end())\n                it=s.erase(it);\n        if(op==\"delete word\"){\n            auto it2 = it;\n            while(it2!=s.end() && *it2==' ')\n                ++it2;\n            if(it2==s.end())\n                continue;\n            while(it2!=s.end() && *it2!=' ')\n                ++it2;\n            it=s.erase(it,it2);\n        }\n    }\n    for(auto i=s.begin();;++i){\n        if(i==it)\n            cout<<'^';\n        if(i==s.end())\n            break;\n        cout<<*i;\n    }\n    cout<<endl;\n}\n\nint main()\n{\n    int t; cin>>t; cin.get();\n    while(t--)\n        solve();\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <iostream>\n#include <string>\n#include <cmath>\n\nusing namespace std;\n\nint main(){    \n    int n;\n    cin>>n;\n    for(int i=0;i<n;i++){\n        string buf;\n        char c;\n        scanf(\"%c\", &c);\n\n        getline(cin,buf);\n       // cout << \"buf is \" << buf << endl;\n        int pos=0;\n        int cn;\n        cin>>cn;\n        for(int k=0;k<cn;k++){\n            string command;\n            cin >> command;\n            if(command==\"forward\"){\n                cin >> command;\n                if(command==\"char\"){\n                    if(!buf.empty())\n                    pos = min(pos+1,(int)buf.size());\n                }else{\n                    // word\n                    while(pos < buf.size()&& buf[pos]==' ')pos++;\n                    while(pos < buf.size()&& buf[pos]!=' ')pos++;\n                }\n            }else if(command==\"backward\"){\n                cin >> command;\n                if(command==\"char\"){\n                    pos = max(pos-1,0);\n                }else{\n                    // word\n                    while(pos > 0 && buf[pos]==' ' )pos--;\n                    while(pos > 0 && buf[pos-1]!=' ')pos--;\n                }\n            }else if(command==\"insert\"){\n                getline(cin,command);\n                ungetc('\\n',stdin);\n                string text;\n                bool f= false;\n                for(int i=0;i<command.size();i++){\n                    if(f&&command[i]=='\\\"')break;\n                    if(f)text.push_back(command[i]);\n                    if(command[i]=='\\\"')f=true;\n                }\n                buf.insert(pos,text);\n                pos+= text.size();\n            }else {//delete\n                cin >> command;\n                if(command== \"char\"){\n                    if(!buf.empty()&&pos!=buf.size()){\n                        buf.erase(pos,1);\n                    }\n\n                }else{\n                    if(!buf.empty()){\n                        int t=pos;\n                        while(t<buf.size() && buf[t]==' ')t++;\n                        while(t<buf.size() && buf[t]!=' ')t++;\n                       // while(t<buf.size() && buf[t]==' ')t++;\n\n                        buf.erase(pos,t-pos);\n                    }\n                }\n            }\n        }\n        //cout << buf << \"****\" << endl;\n        if(buf.empty()){\n            printf(\"^\\n\");\n        }else{\n        for(int p=0;p<buf.size();p++){\n            if(pos==p)printf(\"^\");\n            printf(\"%c\",buf[p]);\n        }\n\n        if(pos==buf.size())printf(\"^\");\n        printf(\"\\n\");\n        }\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint main() {\n    int N;\n    cin >> N;\n    cin.ignore();\n\n    while(N--) {\n        string str;\n        getline(cin, str);\n        int cursor = 0;\n        int M;\n        cin >> M;\n        cin.ignore();\n\n        while(M--) {\n            string cmdline;\n            getline(cin, cmdline);\n\n            int delim = cmdline.find(' ');\n            string cmd = cmdline.substr(0, delim);\n            string target = cmdline.substr(delim+1);\n            if(cmd == \"forward\") {\n                if(target == \"word\") {\n                    int start = str.find_first_not_of(' ', cursor);\n                    if(start == string::npos) {\n                        cursor = str.size();\n                        continue;\n                    }\n                    int end = str.find_first_of(' ', start);\n                    if(end == string::npos) {\n                        cursor = str.size();\n                        continue;\n                    }\n                    cursor = end;\n                }\n                else if(target == \"char\") {\n                    if(cursor < str.size()) ++cursor;\n                }\n                else {\n                    cerr << \"Unknown target in forward: \" << target << endl;\n                }\n            }\n            else if(cmd == \"backward\") {\n                if(target == \"word\") {\n                    int start = str.find_last_not_of(' ', cursor-1);\n                    if(start == string::npos) {\n                        cursor = 0;\n                        continue;\n                    }\n                    int end = str.find_last_of(' ', start);\n                    if(end == string::npos) {\n                        cursor = 0;\n                        continue;\n                    }\n                    cursor = end+1;\n                }\n                else if(target == \"char\") {\n                    if(cursor > 0) --cursor;\n                }\n                else {\n                    cerr << \"Unknown target in backward: \" << target << endl;\n                }\n            }\n            else if(cmd == \"delete\") {\n                if(target == \"word\") {\n                    int startword = str.find_first_not_of(' ', cursor);\n                    if(startword == string::npos) {\n                        str.erase(cursor);\n                        continue;\n                    }\n                    int end = str.find_first_of(' ', startword);\n                    if(end == string::npos) end = str.size();\n                    str.erase(cursor, end-cursor);\n                }\n                else if(target == \"char\") {\n                    if(cursor >= str.size()) continue;\n                    str.erase(cursor, 1);\n                }\n                else {\n                    cerr << \"Unknown target in delete: \" << target << endl;\n                }\n            }\n            else if(cmd == \"insert\") {\n                str = str.substr(0, cursor) + target.substr(1, target.find_last_of('\"')-1) + str.substr(cursor);\n                cursor += target.size()-2;\n            }\n            else {\n                //cerr << \"Unknown command: \" << cmd << endl;\n            }\n        }\n        cout << str.substr(0, cursor) << '^' << str.substr(cursor) << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\nusing namespace std;\n\nint i;\nstring text;\n\nvoid forChar(void){\n\tif(i != text.length()){\n\t\ti++;\n\t}\n}\n\nvoid forWord(void){\n  int len = text.length();\n\n  if(i == text.length()) return;\n\n  if(text.at(i) == ' '){\n    for(;i<len && text.at(i)==' ';i++);\n    if(i == len) return;\n  }\n  for(;i<len && text.at(i)!=' ';i++);\n}\n\nvoid backChar(void){\n\tif(i != 0){\n\t\ti--;\n\t}\n}\n\nvoid backWord(void){\n  if(i == 0) return;\n\n  if(text.at(i-1) == ' '){\n    for(;i>0 && text.at(i-1)==' ';i--);\n    if(i == 0) return;\n  }\n  for(;i>0 && text.at(i-1)!=' ';i--);\n}\n\nvoid insert(string s){\n\ttext.insert(i,s);\n\ti += s.length();\n}\n\nvoid delChar(void){\n\tif(i != text.length()){\n\t\ttext.erase(text.begin()+i);\n\t}\n}\n\nvoid delWord(void){\n\tint len = text.length();\n\tint gi=i;\n\n\tif(i == len) return;\n\n\tif(text.at(i) == ' '){\n\t\tfor(;gi<len && text.at(gi)==' ';gi++);\n\t\tif(gi == len) return;\n\t}\n\tfor(;gi<len && text.at(gi)!=' ';gi++);\n\n\ttext.erase(text.begin()+i, text.begin()+gi);\n}\n\nint main(void){\n\tint n,m;\n\tstring s,s2;\n\tchar tmp;\n\n\tcin>>n;\n\tcin.get();\n\n\twhile(n--){\n\t\tgetline(cin,text);\n\t\tcin>>m;\n\n\t\ti=0;\n\n\t\twhile(m--){\n\t\t\tcin>>s;\n\t\t\tgetline(cin,s2);\n\t\t\ts2.erase(s2.begin(),s2.begin()+1);\n\n\t\t\tif(s == \"forward\"){\n\t\t\t\tif(s2 == \"char\"){\n\t\t\t\t\tforChar();\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tforWord();\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(s == \"backward\"){\n\t\t\t\tif(s2 == \"char\"){\n\t\t\t\t\tbackChar();\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tbackWord();\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(s == \"insert\"){\n\t\t\t\ts2.erase(s2.end()-1,s2.end());\n\t\t\t\ts2.erase(s2.begin(),s2.begin()+1);\n\t\t\t\tinsert(s2);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif(s2 == \"char\"){\n\t\t\t\t\tdelChar();\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tdelWord();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ttext.insert(i,\"^\");\n\t\tcout<<text<<endl;\n\t}\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <climits>\n#include <cfloat>\n#include <ctime>\n#include <cassert>\n#include <map>\n#include <utility>\n#include <set>\n#include <iostream>\n#include <memory>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <functional>\n#include <sstream>\n#include <complex>\n#include <stack>\n#include <queue>\n#include <numeric>\n#include <list>\n#include <iomanip>\n#include <iterator>\n \nusing namespace std;\n \ntypedef long long ll;\ntypedef pair<int,int> Pii;\ntypedef pair<ll,ll> Pll;\n \n#define FOR(i,n) for(int i = 0; i < (n); i++)\n#define sz(c) ((int)c.size())\n\ntypedef unsigned long long ull;\nconst int INF = (int)1e8;\n\nvoid OUT_CUR(string& val,int cur) { \n#ifdef _DEBUG\n\tputs(val.c_str());\n\tFOR(i,cur) putchar(' ');\n\tputs(\"^\");\n#endif\n}\n\nvoid operate(string &val,int &cur,string op){\n\tint n = sz(val);\n\tif(op == \"forward char\"){\n\t\tif(cur != n) cur++;\n\t} else if(op == \"forward word\"){\n\t\tif(cur != n){\n\t\t\twhile(cur < n && val[cur] == ' ') cur++;\n\t\t\twhile(cur < n && val[cur] != ' ') cur++; \n\t\t}\n\t} else if(op == \"backward char\"){\n\t\tif(cur != 0) cur--;\n\t} else if(op == \"backward word\"){\n\t\tif(cur != 0){\n\t\t\tcur--;\n\t\t\twhile(cur > 0 && val[cur-1] == ' ') cur--; \n\t\t\twhile(cur > 0 && val[cur-1] != ' ') cur--; \n\t\t}\n\t} else if(op == \"delete char\"){\n\t\tif(cur != n)\n\t\t\tval.erase(cur,1);\n\t} else if(op == \"delete word\"){\n\t\tif(cur != n){\n\t\t\tint pos = 1;\n\t\t\twhile(cur + pos != n && val[cur + pos - 1] == ' ') pos++;\n\t\t\twhile(cur + pos != n && val[cur + pos - 1] != ' ') pos++;\n\t\t\tval.erase(cur,pos);\n\t\t}\n\t} else {\n\t\tstring a = op.substr(8);\n\t\ta.erase(a.end()-1);\n\t\tval.insert(val.begin() + cur,a.begin(),a.end());\n\t\tcur += a.size();\n\t}\n\n\tOUT_CUR(val,cur);\n}\n\nint main(){\n\tint t; cin>>t;\n\tstring buf;\n\tgetline(cin,buf);\n\twhile(t--){\n\t\tstring val; getline(cin,val);\n\t\tint m; cin>>m;\n\t\tgetline(cin,buf);\n\t\tvector<string> op(m); FOR(i,m) getline(cin,op[i]);\n\t\tint cur = 0;\n\t\tFOR(i,m){\n\t\t\toperate(val,cur,op[i]);\n\t\t}\n\n\t\tval.insert(val.begin() + cur,'^');\n\t\tcout << val << endl; \n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<vector>\nusing namespace std;\n\nint main(){\n  int n;\n  cin >>n;\n  cin.ignore();\n  for(int i=0;i<n;i++){\n    string str;\n    int cn,pos;\n    if(!getline(cin,str)){\n      str = \"\";\n    }\n    cin >> cn;\n    pos = 0;\n    for(int j=0;j<cn;j++){\n      string command,target;\n      char ch;\n      cin >> command;\n      getline(cin,target);\n      target.erase(0,1);\n      if(command == \"forward\"){\n        if(pos<str.size()){\n          if(target == \"word\"){\n            do{\n              pos++;\n            }while(pos<str.size()&&str[pos]!=' ');\n          }else{\n            pos++;\n          }\n        }\n      }else if(command == \"delete\"){\n        if(str.size()!=0&&pos!=str.size()){\n          if(target == \"word\"){\n            while(pos<str.size()&&str[pos]!=' '){\n              str.erase(pos,1);\n            }\n          }else{\n            str.erase(pos,1);\n          }\n        }\n      }else if(command == \"backward\"){\n        if(pos>0){\n          if(target == \"word\"){\n            do{\n              pos--;\n            }while(pos>0&&str[pos]!=' ');\n          }else{\n            pos--;\n          }\n        }\n      }else if(command == \"insert\"){\n        target = target.substr(1,target.size()-2);\n        str.insert(pos,target);\n        pos += target.size();\n      }\n    }\n    str.insert(pos,\"^\");\n    cout << str << endl;\n  }\n  \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cctype>\n#include <cstring>\n#include <string>\n\n#define MIN(A,B) \\\n  ( (B) < (A) ? (B) : (A) )\n#define MAX(A,B) \\\n  ( (B) > (A) ? (B) : (A) )\n\nusing namespace std;\n\n/** Application main entry point. */\nint\nmain (\n  int     argc,\n  char  * argv[ ]\n  )\n{\n  char buf[ 256 ];\n  int n;\n\n  fgets ( buf, sizeof ( buf ), stdin );\n  sscanf ( buf, \"%d\", &n );\n  while ( n-- )\n  {\n    string res;\n    int m;\n    int p = 0;\n\n    fgets ( buf, sizeof ( buf ), stdin );\n    *( strchr ( buf, '\\n' ) ) = '\\0';\n    res.assign ( buf );\n\n    fgets ( buf, sizeof ( buf ), stdin );\n    sscanf ( buf, \"%d\", &m );\n\n    while ( m-- )\n    {\n      fgets ( buf, sizeof ( buf ), stdin );\n\n      if ( !strncmp ( buf, \"forward char\", 12 ) )\n      {\n        ++p;\n        p = MIN( p, res.size ( ) );\n        continue ;\n      }\n      if ( !strncmp ( buf, \"backward char\", 13 ) )\n      {\n        --p;\n        p = MAX( p, 0 );\n        continue ;\n      }\n      if ( !strncmp ( buf, \"forward word\", 12 ) )\n      {\n        while ( p < res.size ( ) && isspace ( res[ p ] ) ) ++p;\n        while ( p < res.size ( ) && !isspace ( res[ p ] ) ) ++p;\n        continue ;\n      }\n      if ( !strncmp ( buf, \"backward word\", 13 ) )\n      {\n        while ( p > 0 && isspace ( res[ p - 1 ] ) ) --p;\n        while ( p > 0 && !isspace ( res[ p - 1 ] ) ) --p;\n        continue ;\n      }\n      if ( !strncmp ( buf, \"insert\", 6 ) )\n      {\n        *( strrchr ( buf, '\\\"' ) ) = '\\0';\n        res.insert ( p, strchr ( buf, '\\\"' ) + 1 );\n        p += strlen ( strchr ( buf, '\\\"' ) + 1 );\n        continue ;\n      }\n      if ( !strncmp ( buf, \"delete char\", 11 ) )\n      {\n        if ( p < res.size ( ) ) res.erase ( p, 1 );\n        continue ;\n      }\n      if ( !strncmp ( buf, \"delete word\", 11 ) )\n      {\n        int q = p;\n\n        while ( q < res.size ( ) && isspace ( res[ q ] ) ) ++q;\n        while ( q < res.size ( ) && !isspace ( res[ q ] ) ) ++q;\n        if ( !isspace ( res[ q - 1 ] ) ) res.erase ( p, q - p );\n        continue ;\n      }\n    }\n\n    printf ( \"%s^%s\"\n           , res.substr ( 0, p ).c_str ( )\n           , res.substr ( p, res.size ( ) - p ).c_str ( ) );\n    puts ( \"\" );\n  }\n\n  return ( 0 );\n}"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#include<algorithm>\n#include<string.h>\nusing namespace std;\nchar str[11000];\nchar in[11000];\nint main(){\n\tint T;scanf(\"%d\",&T);gets(in);\n\twhile(T--){\n\t\tgets(str);\n\t\tint a;scanf(\"%d\",&a);gets(in);\n\t\tint at=0;\n\t\tfor(int i=0;i<a;i++){\n\t\t\tgets(in);\n\t\t\tif(in[0]=='f'){\n\t\t\t\tif(in[8]=='c'){\n\t\t\t\t\tif(str[at])at++;\n\t\t\t\t}else{\n\t\t\t\t\twhile(str[at]==' ')at++;\n\t\t\t\t\twhile(str[at]!=' '&&str[at])at++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(in[0]=='b'){\n\t\t\t\tif(in[9]=='c'){\n\t\t\t\t\tat=max(0,at-1);\n\t\t\t\t}else{\n\t\t\t\t\twhile(at&&str[at-1]==' ')at--;\n\t\t\t\t\twhile(at&&str[at-1]!=' ')at--;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(in[0]=='i'){\n\t\t\t\tint n=strlen(str);\n\t\t\t\tint t=strlen(in)-9;\n\t\t\t\tfor(int i=n;i>=at;i--){\n\t\t\t\t\tstr[i+t]=str[i];\n\t\t\t\t}\n\t\t\t\tfor(int i=0;i<t;i++)str[at+i]=in[8+i];\n\t\t\t\tat+=t;\n\t\t\t}\n\t\t\tif(in[0]=='d'){\n\t\t\t\tif(in[7]=='c'){\n\t\t\t\t\tif(str[at]){\n\t\t\t\t\t\tint n=strlen(str);\n\t\t\t\t\t\tfor(int i=at;i<n;i++)str[i]=str[i+1];\n\t\t\t\t\t}\n\t\t\t\t}else{\n\t\t\t\t\tif(str[at]){\n\t\t\t\t\t\tint t=at;\n\t\t\t\t\t\twhile(str[t]==' ')t++;\n\t\t\t\t\t\twhile(str[t]!=' '&&str[t])t++;\n\t\t\t\t\t\tint len=t-at;\n\t\t\t\t\t\tfor(int i=0;str[at+i];i++){\n\t\t\t\t\t\t\tstr[at+i]=str[at+len+i];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(int i=0;i<at;i++)printf(\"%c\",str[i]);\n\t\tprintf(\"^\");\n\t\tfor(int i=at;str[i];i++)printf(\"%c\",str[i]);\n\t\tprintf(\"\\n\");\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstring>\nusing namespace std;\n\nchar buffer[1024], command[1024];\n\nint main()\n{\n  int T;\n  scanf(\"%d\\n\", &T);\n  while (T--) {\n    int M;\n    fgets(buffer, sizeof(buffer), stdin);\n    *strchr(buffer, '\\n') = '\\0';\n    scanf(\"%d\\n\", &M);\n    int cur = 0;\n    for (int i = 0; i < M; ++i) {\n      fgets(command, sizeof(command), stdin);\n      if (strstr(command, \"insert\")) {\n        char* first = strchr(command, '\"') + 1;\n        char* last = strchr(first, '\"');\n        int length = last - first;\n        memmove(buffer + cur + length, buffer + cur, length);\n        memcpy(buffer + cur, first, length);\n        cur += length;\n      } else if (strstr(command, \"forward char\")) {\n        if (buffer[cur])\n          ++cur;\n      } else if (strstr(command, \"forward word\")) {\n        for (; buffer[cur]; ++cur)\n          if (buffer[cur] != ' ')\n            break;\n        for (; buffer[cur]; ++cur)\n          if (buffer[cur] == ' ')\n            break;\n      } else if (strstr(command, \"backward char\")) {\n        if (cur > 0)\n          --cur;\n      } else if (strstr(command, \"backward word\")) {\n        for (; cur > 0; --cur)\n          if (buffer[cur-1] != ' ')\n            break;\n        for (; cur > 0; --cur)\n          if (buffer[cur-1] == ' ')\n            break;\n      } else if (strstr(command, \"delete char\")) {\n        if (buffer[cur]) {\n          int j;\n          for (j = cur + 1; buffer[j]; ++j)\n            buffer[j-1] = buffer[j];\n          buffer[j-1] = '\\0';\n        }\n      } else if (strstr(command, \"delete word\")) {\n        int j, k;\n        for (j = cur; buffer[j]; ++j)\n          if (buffer[j] != ' ')\n            break;\n        if (buffer[j]) {\n          for (; buffer[j]; ++j)\n            if (buffer[j] == ' ')\n              break;\n          for (k = cur; buffer[j]; ++j, ++k)\n            buffer[k] = buffer[j];\n          buffer[k] = '\\0';\n        }\n      }\n    }\n    for (int i = 0; buffer[i]; ++i) {\n      if (i == cur)\n        putchar('^');\n      putchar(buffer[i]);\n    }\n    if (buffer[cur] == '\\0')\n      putchar('^');\n    putchar('\\n');\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<sstream>\n#include<vector>\n\nusing namespace std;\n\nint cursor;\nstring str;\n\nstring getInsertText(string s){\n  string re;\n  bool addMode = false;\n  \n  for(int i = 0;i<s.size();i++){\n    if(addMode && s[i] == '\"')\n      break;\n    if(addMode)\n      re += s[i];\n    if(s[i] == '\"')\n      addMode = !addMode;\n  }\n  return re;\n}\n\nvoid forChar(){\n  if(cursor + 1 <= str.size())\n    cursor++;\n}\n\nvoid forWord(){\n  for(;cursor<str.size();cursor++)\n    if(cursor+1 < str.size() && str[cursor] != ' ' && str[cursor+1] == ' '){\n      cursor++;\n      break;\n    }\n}\n\nvoid backChar(){\n  cursor--;\n  if(cursor < 0)\n    cursor++;\n}\n\nvoid backWord(){\n  for(;cursor>0;cursor--)\n    if(str[cursor] != ' ' && str[cursor-1] == ' '){\n      cursor--;\n      break;\n    }\n}\n\nvoid delChar(){\n  string newString;\n\n  if(cursor < str.size()){\n    str = str.substr(0,cursor) + str.substr(cursor+1);\n  }\n}  \n\nbool isWordExist(){\n  for(int i = cursor;i<str.size();i++)\n    if(str[i] != ' ')\n      return true;\n  return false;\n}\n\nint getDelWordEndPos(){\n  int i;\n  for(i = cursor;i<str.size();i++)\n    if(i+1 < str.size() && str[i] != ' ' && str[i+1] == ' '){\n      return i;\n    }\n  return i;\n}\n\nvoid delWord(){\n  int initialPos = cursor;\n\n  if(cursor < str.size() && isWordExist()){\n    int endpos = getDelWordEndPos();\n    \n    str = str.substr(0,initialPos) + str.substr(endpos+1);\n  }\n}\n\nvoid insert(string insertString){\n  str = str.substr(0,cursor) + insertString + str.substr(cursor);\n  cursor += insertString.size()-1;\n}\n\nvoid outputString(){\n  for(int i = 0;i<str.size();i++){\n    cout << str[i];\n    if(cursor == i)\n      cout << \"^\";\n  }\n  if(cursor == str.size())\n      cout << \"^\";\n  cout << endl;\n}\n\nmain(){\n  int t;\n  cin >>t;\n  \n  getline(cin,str);\n  while(t--){\n    getline(cin,str);\n    cursor = 0;\n    \n    int m;\n    string com;\n    cin >> m;\n    getline(cin,com);\n    for(int i = 0;i<m;i++){\n      //cout << \"i = \" << i << \", cursor = \" << cursor << endl;\n      \n      getline(cin,com);\n      \n      istringstream sin(com);\n      string coms1,coms2;\n\n      sin >> coms1;\n      if(coms1 == \"forward\"){\n\tsin >> coms2;\n\tif(coms2 == \"char\")\n\t  forChar();\n\telse\n\t  forWord();\n      }\n      else if(coms1 == \"backward\"){\n\tsin >> coms2;\n\tif(coms2 == \"char\")\n\t  backChar();\n\telse\n\t  backWord();\n      }\n      else if(coms1 == \"delete\"){\n\tsin >> coms2;\n\tif(coms2 == \"char\")\n\t  delChar();\n\telse\n\t  delWord();\n      }\n      else{\n\tgetline(sin,coms2);\n\tstring str2 = getInsertText(coms2);\n\n\tinsert(str2);\n      }\n    }\n    outputString();\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <algorithm>\n#include <sstream>\n#include <vector>\nusing namespace std;\n\nint main(){\n\tint T;\n\tcin >> T;\n\tstring dummy;\n\tgetline(cin,dummy);\n\twhile(T--){\n\t\tstring l;\n\t\tgetline(cin,l);\n\t\tl.erase(remove(l.begin(),l.end(),'\\r'),l.end());\n\t\tint p = 0;\n\t\tint M;\n\t\tcin >> M;\n\t\tgetline(cin,dummy);\n\t\tl += \" \";\n\t\tfor(int i = 0 ; i < M ; i++){\n\t\t\tstring t;\n\t\t\tgetline(cin,t);\n\t\t\tt.erase(remove(t.begin(),t.end(),'\\r'),t.end());\n\t\t\tstringstream ss(t);\n\t\t\tstring a,b;\n\t\t\tss >> a;\n\t\t\tchar c;\n\t\t\tss.get(c);\n\t\t\tgetline(ss,b);\n\t\t\tif(a == \"forward\" && b == \"char\"){\n\t\t\t\tp = min(p+1,(int)l.size()-1);\n\t\t\t}\n\t\t\tif(a == \"forward\" && b == \"word\"){\n\t\t\t\twhile(p+1 < l.size() && l[p] == ' ')p++;\n\t\t\t\twhile(p+1 < l.size() && l[p] != ' ')p++;\n\t\t\t}\n\t\t\tif(a == \"backward\" && b == \"char\"){\n\t\t\t\tp = max(p-1,0);\n\t\t\t}\n\t\t\tif(a == \"backward\" && b == \"word\"){\n\t\t\t\tif( p ) p--;\n\t\t\t\twhile(p >= 1 && l[p] == ' ')p--;\n\t\t\t\twhile(p >= 1 && l[p] != ' ')p--;\n\t\t\t\tif( p != l.size()-1 && l[p] == ' ') p++;\n\t\t\t}\n\t\t\tif(a == \"insert\" ){\n\t\t\t\tb = b.substr(1,b.size()-2);\n\t\t\t\tl.insert(p,b);\n\t\t\t\tp += b.size();\n\t\t\t}\n\t\t\tif(a == \"delete\" && b == \"char\"){\n\t\t\t\tif(p < l.size()-1) l.erase(p,1);\n\t\t\t}\n\t\t\tif(a == \"delete\" && b == \"word\"){\n\t\t\t\tint t = p;\n\t\t\t\tint f = 0;\n\t\t\t\twhile(t+1 < l.size() && l[t] == ' ')t++;\n\t\t\t\twhile(t+1 < l.size() && l[t] != ' ')t++,f=1;\n\t\t\t\tif(f){\n\t\t\t\t\tint d = t - p ;\n\t\t\t\t\tl.erase(p,d);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(int j = 0 ; j+1 < l.size() ; j++){\n\t\t\tif( j == p ){\n\t\t\t\tcout << \"^\";\n\t\t\t}\n\t\t\tcout << l[j];\n\t\t}\n\t\tif( p == l.size()- 1) cout << \"^\";\n\t\tcout << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <string>\n#include <algorithm>\n#include <cctype>\nusing namespace std;\n\nstring str, op;\nint len, cursor;\n\nstring make_str(string in){\n  int i;\n  for(i = 0 ; in[i] != '\"' ; i++);\n  string out = \"\";\n  for(i = i+1 ; in[i] != '\"' ; i++){\n    out += in[i];\n  }\n  return out;\n}\n\n\nvoid forward_char(){\n  if(cursor < len) cursor++;\n}\n\nvoid forward_word(){\n  if(len == 0) return;\n  bool space = 0;\n  int tmp = 0;\n  for(tmp = cursor ; ; tmp++){\n    if(str[tmp+1] == ' '){\n      space = 1;\n    }\n    if(space) break;\n    \n    if(tmp >= len){\n      cursor = len;\n      return;\n    }\n  }\n  \n  while(1){\n    if(tmp >= len){\n      cursor = len;\n      return;\n    }\n    if(str[tmp] != ' ') break;\n    tmp++;\n  }\n  \n  while(1){\n    if(tmp >= len){\n      cursor = len;\n      return;\n    }\n    if(str[tmp+1] == ' '){\n      cursor = tmp;\n      return;\n    }\n   tmp++;\n  }\n}\n\nvoid backward_char(){\n  if(len == 0) return;\n  if(cursor > 0) cursor--;\n  return;\n}\n\nvoid backward_word(){\n  if(len == 0) return;\n  bool space = 0;\n  int tmp = 0;\n  for(tmp = cursor ; ; tmp--){\n    if(str[tmp] == ' ') space = 1;\n    if(space) break;\n    if(tmp <= 0){\n      cursor = 0;\n      return;\n    }\n  }\n\n  while(1){\n    if(tmp <= 0){\n      cursor = 0;\n      return;\n    }\n    if(str[tmp] != ' '){\n      cursor = tmp;\n      return;\n    }\n    tmp--;\n  }\n}\n\nvoid insert_text(string in){\n\n  if(len == 0) str.insert(cursor, in);\n  else if(cursor == len) str.insert(cursor, in);\n  else str.insert(cursor+1, in);\n  cursor += in.size();\n  len += in.size();\n}\n\nvoid delete_char(){\n  if(len == 0) return;\n  if(cursor < len){\n    str.erase(str.begin()+cursor+1);\n    len--;\n  }\n}\n\nvoid delete_word(){\n  if(len == 0) return;\n  int space = 0;\n  int tmp = 0;\n  cursor--;\n  for(tmp = cursor+1 ;  ;){\n    str.erase(str.begin()+tmp);\n    len--;\n    if(str[tmp] == ' ') space++;\n    if(space == 1 || tmp >= len) return;\n  }\n}\n\nint main(){\n  int T;\n  cin >> T;\n  cin.ignore();\n  while(T--){\n    getline(cin, str);\n    len = str.size()-1;\n    if(len < 0) len = 0;\n    if(len == 0) str.clear();\n    cursor = 0;\n    int N;\n    cin >> N;\n    cin.ignore();\n    while(N--){\n      getline(cin, op);\n      if(op == \"forward char\") forward_char();\n      else if(op == \"forward word\") forward_word();\n      else if(op == \"backward char\") backward_char();\n      else if(op == \"backward word\") backward_word();\n      else if(op.substr(0, 6) == \"insert\") insert_text(make_str(op));\n      else if(op == \"delete char\") delete_char();\n      else if(op == \"delete word\") delete_word();\n      /*\n      cout << op << endl;\n      for(int i = 0 ; i <= len ; i++){\n\tif(i == cursor) cout << str[i] << '^';\n\telse cout << str[i];\n      }\n      cout << endl;\n      printf(\"cursor = %d\\n\", cursor);\n      printf(\"len = %d\\n\", len);\n      cout << endl;*/\n    }\n    \n    if(len == 0){\n      cout << '^' << endl;\n      continue;\n    }\n    for(int i = 0 ; i <= len ; i++){\n      if(i == cursor) cout << str[i] << '^';\n      else cout << str[i];\n    }\n    cout << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<vector>\nusing namespace std;\n\nint main(){\n  int n;\n  cin >>n;\n  cin.ignore();\n  for(int i=0;i<n;i++){\n    string str;\n    int cn,pos;\n    if(!getline(cin,str)){\n      str = \"\";\n    }\n    cin >> cn;\n    pos = 0;\n    for(int j=0;j<cn;j++){\n      string command,target;\n      char ch;\n      cin >> command;\n      getline(cin,target);\n      target.erase(0,1);\n      if(command == \"forward\"){\n        if(pos<str.size()){\n          if(target == \"word\"){\n            int temp = pos;\n            int judge = 0;\n            while(temp<str.size()){\n              if(str[temp]!=' '){\n                judge = 1;\n                break;\n              }\n              temp++;\n            }\n            if(judge==1){\n              do{\n                pos++;\n              }while(pos<str.size()&&str[pos]!=' ');\n            }\n          }else{\n            pos++;\n          }\n        }\n      }else if(command == \"delete\"){\n        if(str.size()!=0&&pos!=str.size()){\n          if(target == \"word\"){\n            int stage = 0;\n            while(pos<str.size()){\n              if(stage==0){\n                if(str[temp]!=\" \"){\n                  stage = 1;\n                }\n              }else{\n                if(str[temp]==\" \"){\n                  break;\n                }\n              }\n              str.erase(pos,1);\n            }\n            while(pos<str.size()&&str[pos]!=' '){\n              str.erase(pos,1);\n            }\n          }else{\n            str.erase(pos,1);\n          }\n        }\n      }else if(command == \"backward\"){\n        if(pos>0){\n          if(target == \"word\"){\n            int temp = pos;\n            int judge = 0;\n            while(temp>=0){\n              if(str[temp]!=' '){\n                judge = 1;\n                break;\n              }\n              temp--;\n            }\n            if(judge==1){\n              do{\n                pos--;\n              }while(pos>0&&str[pos]!=' ');\n            }\n          }else{\n            pos--;\n          }\n        }\n      }else if(command == \"insert\"){\n        target = target.substr(1,target.size()-2);\n        str.insert(pos,target);\n        pos += target.size();\n      }\n    }\n    str.insert(pos,\"^\");\n    cout << str << endl;\n  }\n  \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <iostream>\n#include <string>\n#include <cmath>\n\nusing namespace std;\n\nint main(){    \n    int n;\n    cin>>n;\n    for(int i=0;i<n;i++){\n        string buf;\n        char c;\n        scanf(\"%c\", &c);\n\n        getline(cin,buf);\n       // cout << \"buf is \" << buf << endl;\n        int pos=0;\n        int cn;\n        cin>>cn;\n        for(int k=0;k<cn;k++){\n            string command;\n            cin >> command;\n            if(command==\"forward\"){\n                cin >> command;\n                if(command==\"char\"){\n                    if(!buf.empty())\n                    pos = min(pos+1,(int)buf.size());\n                }else{\n                    // word\n                    while(pos < buf.size()&& buf[pos]==' ')pos++;\n                    while(pos < buf.size()&& buf[pos]!=' ')pos++;\n                }\n            }else if(command==\"backward\"){\n                cin >> command;\n                if(command==\"char\"){\n                    pos = max(pos-1,0);\n                }else{\n                    // word\n                    while(pos > 0 && buf[pos-1]==' ' )pos--;\n                    while(pos > 0 && buf[pos-1]!=' ')pos--;\n                }\n            }else if(command==\"insert\"){\n                getline(cin,command);\n                ungetc('\\n',stdin);\n                string text;\n                bool f= false;\n                for(int i=0;i<command.size();i++){\n                    if(f&&command[i]=='\\\"')break;\n                    if(f)text.push_back(command[i]);\n                    if(command[i]=='\\\"')f=true;\n                }\n                buf.insert(pos,text);\n                pos+= text.size();\n            }else {//delete\n                cin >> command;\n                if(command== \"char\"){\n                    if(!buf.empty()&&pos!=buf.size()){\n                        buf.erase(pos,1);\n                    }\n\n                }else{\n                    if(!buf.empty()){\n                        int t=pos;\n                        while(t<buf.size() && buf[t]==' ')t++;\n                        while(t<buf.size() && buf[t]!=' ')t++;\n                       // while(t<buf.size() && buf[t]==' ')t++;\n\n                        buf.erase(pos,t-pos);\n                    }\n                }\n            }\n        }\n       cout << buf.substr(0,pos) << \"^\" << buf.substr(pos) << endl; \n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <climits>\n#include <cfloat>\n#include <ctime>\n#include <cassert>\n#include <map>\n#include <utility>\n#include <set>\n#include <iostream>\n#include <memory>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <functional>\n#include <sstream>\n#include <complex>\n#include <stack>\n#include <queue>\n#include <numeric>\n#include <list>\n#include <iomanip>\n#include <iterator>\n \nusing namespace std;\n \ntypedef long long ll;\ntypedef pair<int,int> Pii;\ntypedef pair<ll,ll> Pll;\n \n#define FOR(i,n) for(int i = 0; i < (n); i++)\n#define sz(c) ((int)c.size())\n\ntypedef unsigned long long ull;\nconst int INF = (int)1e8;\n\nvoid operate(string &val,int &cur,string op){\n\tint n = sz(val);\n\tif(op == \"forward char\"){\n\t\tif(cur != n) cur++;\n\t} else if(op == \"forward word\"){\n\t\tif(cur != n){\n\t\t\twhile(cur < n && val[cur] == ' ') cur++;\n\t\t\twhile(cur < n && val[cur] != ' ') cur++; \n\t\t}\n\t} else if(op == \"backward char\"){\n\t\tif(cur != 0) cur--;\n\t} else if(op == \"backward word\"){\n\t\tif(cur != 0){\n\t\t\twhile(cur > 0 && val[cur-1] == ' ') cur--; \n\t\t\twhile(cur > 0 && val[cur-1] != ' ') cur--; \n\t\t}\n\t} else if(op == \"delete char\"){\n\t\tif(cur != n)\n\t\t\tval.erase(cur,1);\n\t} else if(op == \"delete word\"){\n\t\tif(cur != n){\n\t\t\tint pos = cur;\n\t\t\twhile(pos != n && val[pos] == ' ') pos++;\n\t\t\twhile(pos != n && val[pos] != ' ') pos++;\n\t\t\tval.erase(val.begin() + cur,val.begin() + pos);\n\t\t}\n\t} else {\n\t\tstring a = op.substr(op.find_first_of('\"')+1);\n\t\ta.erase(a.end()-1);\n\t\tval.insert(val.begin() + cur,a.begin(),a.end());\n\t\tcur += a.size();\n\t}\n}\n\nint main(){\n\tint t; cin>>t;\n\tstring buf;\n\tgetline(cin,buf);\n\twhile(t--){\n\t\tstring val; getline(cin,val);\n\t\tint m; cin>>m;\n\t\tgetline(cin,buf);\n\t\tvector<string> op(m); FOR(i,m) getline(cin,op[i]);\n\t\tint cur = 0;\n\t\tFOR(i,m){\n\t\t\toperate(val,cur,op[i]);\n\t\t}\n\n\t\tval.insert(val.begin() + cur,'^');\n\t\tcout << val << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\n\nusing namespace std;\n\n\nvoid input(string& s, vector<string>& v){\n  getline(cin,s);\n  int q;\n  cin >> q;\n  cin.ignore();\n  v.resize(q);\n  for(int i = 0; i < q; i++) getline(cin,v[i]);\n}\n\nbool isAlf(char c){ return 'A'<=c&&c<='Z'||'a'<=c&&c<='z';}\n\n//forward word\nvoid FW(const string& s, int& pos){\n  if(pos >= (int)s.length()) return;\n  bool word = false, blank = false;\n  if(pos == 0) blank = true;\n\n  while(1){\n    if(pos == (int)s.length()) break;\n    if(s[pos] == ' '){\n      blank = true;\n      if(blank && word) return;\n    }\n    if(s[pos] != ' ') word = true;\n    pos++;\n  }\n}\n//backward word\nvoid BW(const string& s, int& pos){\n  if(pos == 0) return;\n  while(1){\n    pos--;\n    if(pos == 0) break;\n    if(s[pos] == ' ') break;\n  }\n}\n\n//delete char\nvoid DC(string& s, int& pos){\n  if((int)s.length() <= pos) return;\n  s = s.substr(0,pos)+s.substr(pos+1);  \n}\n\n\n//delete word\nvoid DW(string& s, int pos){\n  if((int)s.length() <= pos) return;\n\n  int begin = pos;\n  if(s[pos] == ' '){\n    while(s[pos] == ' ') pos++;\n  }else{\n    while(s[pos] != ' ') pos++;\n  }\n\n  string res = \"\";\n  for(int i = 0; i < (int)s.length(); i++)\n    if(!(begin <= i && i <= pos)) res += s[i];\n\n  s = res;\n}\n\n//insert \nvoid insert(string& s, int& pos, string w){\n\n  w = w.substr(1,w.length()-2);\n  \n  string res = \"\";\n \n  res += s.substr(0,pos);\n  res += w;\n  res += s.substr(pos);\n  s = res;\n\n  pos += w.length();\n}\n\nvoid solve(string& s, const vector<string>& v){\n  int pos = 0;\n\n  for(int i = 0; i < (int)v.size(); i++){\n    if(v[i] == \"forward char\") pos = min(pos+1,(int)s.length());\n    if(v[i] == \"forward word\") FW(s,pos);\n    if(v[i] == \"backward char\") pos = max(pos-1,0);\n    if(v[i] == \"backward word\") BW(s,pos);\n    if(v[i][0] == 'i') insert(s,pos,v[i].substr(7));\n    if(v[i] == \"delete char\") DC(s,pos);\n    if(v[i] == \"delete word\") DW(s,pos);\n    //  cout << s.substr(0,pos) << \"^\" << s.substr(pos) << endl;\n  }\n  cout << s.substr(0,pos) << \"^\" << s.substr(pos) << endl;\n}\n\nint main(){\n  int T;\n  cin >> T;\n  cin.ignore();\n  while(T--){\n    string txt;\n    vector<string> V;\n    input(txt,V);\n    solve(txt,V);\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#include<algorithm>\n#include<string.h>\nusing namespace std;\nchar str[11000];\nchar in[11000];\nint main(){\n\tint T;scanf(\"%d\",&T);gets(in);\n\twhile(T--){\n\t\tfor(int i=0;i<11000;i++)str[i]=0;\n\t\tgets(str);\n\t\tint a;scanf(\"%d\",&a);gets(in);\n\t\tint at=0;\n\t\tfor(int i=0;i<a;i++){\n\t\t\tgets(in);\n\t\t\tif(in[0]=='f'){\n\t\t\t\tif(in[8]=='c'){\n\t\t\t\t\tif(str[at])at++;\n\t\t\t\t}else{\n\t\t\t\t\twhile(str[at]==' ')at++;\n\t\t\t\t\twhile(str[at]!=' '&&str[at])at++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(in[0]=='b'){\n\t\t\t\tif(in[9]=='c'){\n\t\t\t\t\tat=max(0,at-1);\n\t\t\t\t}else{\n\t\t\t\t\twhile(at&&str[at-1]==' ')at--;\n\t\t\t\t\twhile(at&&str[at-1]!=' ')at--;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(in[0]=='i'){\n\t\t\t\tint n=strlen(str);\n\t\t\t\tint t=strlen(in)-9;\n\t\t\t\tfor(int i=n;i>=at;i--){\n\t\t\t\t\tstr[i+t]=str[i];\n\t\t\t\t}\n\t\t\t\tfor(int i=0;i<t;i++)str[at+i]=in[8+i];\n\t\t\t\tat+=t;\n\t\t\t}\n\t\t\tif(in[0]=='d'){\n\t\t\t\tif(in[7]=='c'){\n\t\t\t\t\tif(str[at]){\n\t\t\t\t\t\tint n=strlen(str);\n\t\t\t\t\t\tfor(int i=at;i<n;i++)str[i]=str[i+1];\n\t\t\t\t\t}\n\t\t\t\t}else{\n\t\t\t\t\tif(str[at]){\n\t\t\t\t\t\tint t=at;\n\t\t\t\t\t\twhile(str[t]==' ')t++;\n\t\t\t\t\t\twhile(str[t]!=' '&&str[t])t++;\n\t\t\t\t\t\tif(str[t-1]==' ')continue;\n\t\t\t\t\t\tint len=t-at;\n\t\t\t\t\t\tfor(int i=0;str[at+i];i++){\n\t\t\t\t\t\t\tstr[at+i]=str[at+len+i];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t/*\tfor(int j=0;j<at;j++)printf(\"%c\",str[j]);\n\t\t\tprintf(\"^\");\n\t\t\tfor(int j=at;str[j];j++)printf(\"%c\",str[j]);\n\t\t\tprintf(\"\\n\");*/\n\t\t}\n\t\tfor(int i=0;i<at;i++)printf(\"%c\",str[i]);\n\t\tprintf(\"^\");\n\t\tfor(int i=at;str[i];i++)printf(\"%c\",str[i]);\n\t\tprintf(\"\\n\");\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "using namespace std;\n#include <iostream>\n#include <vector>\n#include <stdlib.h>\n#include <string.h>\n#include <string>\n\n#define REP(i, n) for(int i=0; i<n; i++)\n\ntypedef vector<int> VI;\n\nint T, N;\nstring text;\nstring cmd;\nstring tmp;\n\nvoid execute(string& text, string cmd)\n{\n\tif(cmd == \"forward char\"){\n\t\tREP(i, text.size())\n\t\t{\n\t\t\tif(text[i] == '^')\n\t\t\t{\n\t\t\t\tif(i != text.size()-1)\n\t\t\t\t{\n\t\t\t\t\ttext[i] = text[i+1];\n\t\t\t\t\ttext[i+1] = '^';\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse if(cmd ==\"forward word\")\n\t{\n\t\tint iCaret = -1;\n\t\tREP(i, text.size())\n\t\t{\n\t\t\tif(text[i] == '^')\n\t\t\t{\n\t\t\t\tiCaret = i;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif(text[i] == ' ' && iCaret != -1)\n\t\t\t{\n\t\t\t\tbool is_blank_neighbor = false;\n\t\t\t\tif(i != 0)\n\t\t\t\t{\n\t\t\t\t\tif(text[i-1] == ' ' || text[i-1] == '^')\n\t\t\t\t\t{\n\t\t\t\t\t\tis_blank_neighbor = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif(!is_blank_neighbor)\n\t\t\t\t{\n\t\t\t\t\ttext.insert(text.begin()+i, '^');\n\t\t\t\t\ttext.erase(text.begin()+iCaret);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(i == text.size()-1 && iCaret != -1)\n\t\t\t{\n\t\t\t\ttext.insert(text.end(), '^');\n\t\t\t\ttext.erase(text.begin()+iCaret);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\telse if(cmd == \"backward char\")\n\t{\n\t\tREP(i, text.size())\n\t\t{\n\t\t\tif(text[i] == '^')\n\t\t\t{\n\t\t\t\tif(i != 0)\n\t\t\t\t{\n\t\t\t\t\ttext[i] = text[i-1];\n\t\t\t\t\ttext[i-1] = '^';\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse if(cmd == \"backward word\")\n\t{\n\t\tint iCaret = -1;\n\t\tfor(int i=text.size()-1; i>=0; i--)\n\t\t{\n\t\t\tif(text[i] == '^')\n\t\t\t{\n\t\t\t\tiCaret = i;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif(text[i] == ' ' && iCaret != -1)\n\t\t\t{\n\t\t\t\tbool is_blank_neighbor = false;\n\t\t\t\tif(i != text.size()-1)\n\t\t\t\t{\n\t\t\t\t\tif(text[i+1] == ' ' || text[i+1] == '^')\n\t\t\t\t\t{\n\t\t\t\t\t\tis_blank_neighbor = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif(!is_blank_neighbor)\n\t\t\t\t{\n\t\t\t\t\ttext.erase(text.begin() + iCaret);\n\t\t\t\t\ttext.insert(text.begin() + i, '^');\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(i == 0 && iCaret != -1)\n\t\t\t{\n\t\t\t\ttext.erase(text.begin() + iCaret);\n\t\t\t\ttext.insert(text.begin(), '^');\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\telse if(cmd == \"delete char\")\n\t{\n\t\tREP(i, text.size())\n\t\t{\n\t\t\tif(text[i] == '^')\n\t\t\t{\n\t\t\t\tif(i != text.size()-1)\n\t\t\t\t{\n\t\t\t\t\ttext.erase(text.begin() + i+1);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse if(cmd == \"delete word\")\n\t{\n\t\tint first = 0;\n\t\tint last = 0;\n\t\tREP(i, text.size())\n\t\t{\n\t\t\tif(text[i] == '^')\n\t\t\t{\n\t\t\t\tfirst = i;\n\t\t\t}\n\t\t\t\n\t\t\tif((text[i] == ' ' || i == text.size()-1) && first != 0)\n\t\t\t{\n\t\t\t\tif(i != 0)\n\t\t\t\t{\n\t\t\t\t\tif(text[i-1] == ' ' || text[i-1] == ' ')\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttext.erase(text.begin()+first+1, text.begin()+i);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tbool is_insert = true;\n\t\tstring str_insert = \"insert\";\n\t\tREP(i, str_insert.size())\n\t\t{\n\t\t\tif(str_insert[i] != cmd[i])\n\t\t\t{\n\t\t\t\tis_insert = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif(is_insert)\n\t\t{\n\t\t\tstring word_insert = string(cmd, str_insert.size()+2, cmd.size()-str_insert.size()-3);\n\t\t\t\n\t\t\tREP(i, text.size())\n\t\t\t{\n\t\t\t\tif(text[i] == '^')\n\t\t\t\t{\n\t\t\t\t\ttext.insert(i, word_insert);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main()\n{\n\tgetline(cin, tmp);\n\tT = atoi(tmp.c_str());\n\n\tREP(t, T)\n\t{\n\t\tgetline(cin, text);\n\t\ttext = \"^\" + text;\n\t\t//cout << text << endl;\n\n\t\tgetline(cin, tmp);\n\t\tN = atoi(tmp.c_str());\n\t\tREP(n, N)\n\t\t{\n\t\t\tgetline(cin, cmd);\n\t\t\texecute(text, cmd);\n\t\t}\n\t\tcout << text << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <cassert>\n#include <iostream>\n#include <cstdio>\n#include <vector>\n#include <algorithm>\n#include <complex>\n#include <cstring>\n#include <cstdlib>\n#include <string>\n#include <cmath>\n#include <queue>\n#include <set>\n#include <map>\nusing namespace std;\n\n#define REP(i,n) for(int i=0;i<(int)n;++i)\n#define FOR(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i)\n#define ALL(c) (c).begin(), (c).end()\nconst int INF = 1<<29;\n\nvoid forwardChar(string &s, int &c) {\n  if (c != s.size()) c++;\n}\nvoid forwardWord(string &s, int &c) {\n  for (;c<s.size()&&s[c]==' ';++c);\n  for (;c<s.size()&&s[c]!=' ';++c);\n}\nvoid backwardChar(string &s, int &c) {\n  if (c) c--;\n}\nvoid backwardWord(string &s, int &c) {\n  for (;c>0&&s[c-1]==' ';--c);\n  for (;c>0&&s[c-1]==' ';--c);\n}\nvoid insertText(string &s, int &c, const string &t) {\n  s = s.substr(0,c) + t + s.substr(c);\n  c += t.size();\n}\nvoid deleteChar(string &s, int &c) {\n  if (c != s.size()) {\n    s = s.substr(0,c) + s.substr(c+1);\n  }\n}\nvoid deleteWord(string &s, int &c) {\n  int p = c;\n  for (; p<s.size()&&s[p]==' '; ++p);\n  if (p==s.size()) return;\n  for (; p<s.size()&&s[p]!=' '; ++p);\n  s = s.substr(0,c) + s.substr(p);\n}\n\nint main() {\n  int n;\n  cin >> n;\n  cin.ignore();\n  while(n--) {\n    string text;\n    getline(cin, text);\n    int m; cin >> m; cin.ignore();\n    // cout << m << endl;\n    // cout << text << endl;\n    int cursor = 0;\n    while(m--) {\n      string op1, op2;\n      cin >> op1;\n      cin.ignore();\n      getline(cin,op2);\n      // cout << op1 << \" : \" << op2 << endl;\n      \n      if (op1[0] == 'f') {\n        if (op2[0] == 'c') forwardChar(text, cursor);\n        else forwardWord(text, cursor);\n      } else if (op1[0] == 'b') {\n        if (op2[0] == 'c') backwardChar(text, cursor);\n        else backwardWord(text, cursor);\n      } else if (op1[0] == 'i') {\n        assert(op2[0]=='\"' && op2[op2.size()-1]=='\"');\n        op2 = op2.substr(1, op2.size()-2);\n        insertText(text, cursor, op2);\n      } else if (op1[0] == 'd') {\n        if (op2[0] == 'c') deleteChar(text, cursor);\n        else deleteWord(text, cursor);\n      } else {\n        assert(0);\n      }\n      assert(cursor>=0 && cursor<=text.size());\n      // cout << text << \" \" << cursor << endl;\n    }\n\n    text = text.substr(0,cursor) + \"^\" + text.substr(cursor);\n    cout << text << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<vector>\nusing namespace std;\n\nint main(){\n  int n;\n  cin >>n;\n  cin.ignore();\n  for(int i=0;i<n;i++){\n    string str;\n    int cn,pos;\n    if(!getline(cin,str)){\n      str = \"\";\n    }\n    cin >> cn;\n    pos = 0;\n    for(int j=0;j<cn;j++){\n      string command,target;\n      char ch;\n      cin >> command;\n      getline(cin,target);\n      target.erase(0,1);\n      if(command == \"forward\"){\n        if(target == \"word\"){\n          do{\n            pos++;\n          }while(pos<str.size()&&str[pos]!=' ');\n        }else{\n          pos++;\n        }\n      }else if(command == \"delete\"){\n        if(target == \"word\"){\n          do{\n            str.erase(pos,1);\n          }while(str[pos]!=' ');\n        }else{\n          str.erase(pos,1);\n        }\n      }else if(command == \"backward\"){\n        if(target == \"word\"){\n          do{\n            pos--;\n          }while(pos>0&&str[pos]!=' ');\n        }else{\n          pos--;\n        }\n      }else if(command == \"insert\"){\n        target = target.substr(1,target.size()-2);\n        str.insert(pos,target);\n        pos += target.size();\n      }\n      /*\n        if(pos>=str.size()){\n        pos = str.size() -1;\n        }else if(pos<0){\n        pos = 0;\n        }\n      */\n      cout << str << endl;\n    }\n    str.insert(pos,\"^\");\n    cout << str << endl;\n  }\n  \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nvoid setPos(string &buff,int &pos){\n    for(int i = 0; i < buff.size(); i++){\n        if(buff[i]=='^'){\n            pos=i;\n            return;\n        }\n    }\n}\n\nint main(){\n    int n;\n    cin>>n;\n    string gb;\n    getline(cin,gb);\n    while(n--){\n        string buff;\n        getline(cin,buff);\n        int m;\n        cin>>m;\n        getline(cin,gb);\n        int pos=0;\n        buff='^'+buff;\n        while(m--){\n            string op;\n            getline(cin,op);\n            if(op==\"forward char\"){\n                if(pos!=buff.size()-1){\n                    swap(buff[pos],buff[pos+1]);\n                    pos++;\n                    setPos(buff,pos);\n                }\n            }\n            else if(op==\"forward word\"){\n                // ツ右ツづ可閉カツ篠堋づーツ探ツつオツづ可つ「ツつォツ、ツ個ゥツづつつゥツづつスツづァツつサツづ個閉カツ篠堋療アツづ個催渉可づ個暗環置ツづ慊づカツーツソツδ仰づーツ暗堋督ョ\n                if(pos!=buff.size()-1){\n                    int initPos=pos;\n                    pos++;\n                    while(pos<buff.size()&&buff[pos]==' ')pos++;\n                    while(pos<buff.size()&&buff[pos]!=' ')pos++;\n                    buff=buff.substr(0,initPos)+buff.substr(initPos+1);\n                    if(pos-1==buff.size())\n                        buff+='^';\n                    else{\n                        pos--;\n                        buff=buff.substr(0,pos)+'^'+buff.substr(pos);\n                    }\n                    setPos(buff,pos);\n                }\n            }\n            else if(op==\"backward char\"){\n                if(pos!=0){\n                    swap(buff[pos],buff[pos-1]);\n                    setPos(buff,pos);\n                }\n            }\n            else if(op==\"backward word\"){\n                if(pos!=0){\n                    int initPos=pos;\n                    pos--;\n                    while(pos>=0&&buff[pos]==' ')pos--;\n                    bool ok=false;\n                    while(pos>=0&&buff[pos]!=' '){\n                        ok=true;\n                        pos--;\n                    }\n                    buff=buff.substr(0,initPos)+buff.substr(initPos+1);\n                    if(pos==-1)\n                        buff='^'+buff;\n                    else{\n                        pos++;\n                        buff=buff.substr(0,pos)+'^'+buff.substr(pos);\n                    }\n                    setPos(buff,pos);\n                }\n            }\n            else if(op==\"delete char\"){\n                if(pos!=buff.size()-1)\n                    buff=buff.substr(0,pos+1)+buff.substr(pos+2);\n                setPos(buff,pos);\n            }\n            else if(op==\"delete word\"){\n                int initPos=pos;\n                if(pos!=buff.size()-1){\n                    pos++;\n                    while(pos<buff.size()&&buff[pos]==' ')pos++;\n                    bool f=false;\n                    while(pos<buff.size()&&buff[pos]!=' '){\n                        f=true;\n                        pos++;\n                    }\n                    // ツ単ツ古ェツづーツづ青づづつづづv è\n                    if(!f){\n\n                    }\n                    else{\n                        if(pos==buff.size())\n                            buff=buff.substr(0,initPos+1);\n                        else\n                            buff=buff.substr(0,initPos+1)+buff.substr(pos);\n                    }\n                    setPos(buff,pos);\n                }\n            }\n            else if(op.substr(0,6)==\"insert\"){\n                string ins=op.substr(7);\n                ins=ins.substr(1);\n                ins=ins.substr(0,ins.size()-1);\n                buff=buff.substr(0,pos)+ins+'^'+buff.substr(pos+1);\n                setPos(buff,pos);\n            }\n        }\n        cout<<buff<<endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\n#include<algorithm>\n#include<cmath>\n#include<cassert>\n#include<sstream>\n#define REP(i,s,n) for(int i=s;i<n;i++)\n#define rep(i,n) REP(i,0,n)\n#define inf (1<<28)\n\nusing namespace std;\nint cursor;\n\nvoid ForwardChar(string &message)\n{\n  assert(message[cursor] == '^');\n  string tmp = \"\";\n  bool found = false;\n  rep(i,message.size())\n    {\n      if(message[i] == '^')\n\t{\n\t  found = true;\n\t  continue;\n\t}\n\n      tmp += message[i];\n      if(found)\n\t{\n\t  tmp += \"^\";\n\t  found = false;\n\t}\t\n    }\n  if(found)tmp += \"^\",cursor--;\n  cursor++;\n  message = tmp;\n}\n\nvoid ForwardWord(string &message)\n{\n  assert(message[cursor] == '^');\n  string tmp = \"\";\n  bool cursor_found = false;\n  bool word_found = false;\n  rep(i,message.size())\n    {\n      if(message[i] == '^')\n\t{\n\t  cursor_found = true;\n\t  continue;\n\t}\n      if(cursor_found && word_found && message[i] == ' ')\n\t{\n\t  cursor_found = word_found = false;\n\t  tmp += \"^\";\n\t  cursor = tmp.size()-1;\n\t}\n      tmp += message[i];\n      if(cursor_found && message[i] != ' ')\n\t{\n\t  word_found = true;\n\t}\n    }\n  if(cursor_found)\n    {\n      tmp += \"^\";\n      cursor = tmp.size()-1;\n    }\n  message = tmp;\n\n}\n\nvoid BackwardChar(string &message)\n{\n  assert(message[cursor] == '^');\n  int last = message.size();\n  string tmp = \"\";\n  bool found = false;\n  for(int i=last-1;i>=0;i--)\n    {\n      if(message[i] == '^')\n\t{\n\t  found = true;\n\t  continue;\n\t}\n\n      tmp += message[i];\n\n      if(found)\n\t{\n\t  found = false;\n\t  tmp += \"^\";\n\t  cursor--;\n\t}\n    }\n  if(found)tmp += \"^\";\n  reverse(tmp.begin(),tmp.end());\n  message = tmp;\n}\n\nvoid BackwardWord(string &message)\n{\n  assert(message[cursor] == '^');\n  string tmp = \"\";\n  bool cursor_found = false;\n  bool word_found = false;\n  for(int i=message.size()-1;i>=0;i--)\n    {\n      if(message[i] == '^')\n\t{\n\t  cursor_found = true;\n\t  continue;\n\t}\n      if(cursor_found && word_found && message[i] == ' ')\n\t{\n\t  cursor_found = word_found = false;\n\t  tmp += \"^\";\n\t}\n      tmp += message[i];\n      if(cursor_found && message[i] != ' ')\n\t{\n\t  word_found = true;\n\t}\n    }\n  if(cursor_found)\n    {\n      tmp += \"^\";\n    }\n  reverse(tmp.begin(),tmp.end());\n  message = tmp;\n  rep(i,message.size())\n    if(message[i] == '^')\n      {\n\tcursor = i;\n\tbreak;\n      }\n}\n\nvoid Insert(string &message,string text)\n{\n  assert(message[cursor] == '^');\n  string tmp = \"\";\n  rep(i,message.size())\n    {\n      if(message[i] == '^')\n\t{\n\t  tmp += text + \"^\";\n\t  cursor += text.size();\n\t  continue;\n\t}\n      tmp += message[i];\n    }\n  message = tmp;\n\n}\n\nvoid DeleteChar(string &message)\n{\n  assert(message[cursor] == '^');\n  bool found = false;\n  string tmp = \"\";\n  rep(i,message.size())\n    {\n      if(message[i] == '^')\n\t{\n\t  found = true;\n\t  tmp += \"^\";\n\t  continue;\n\t}\n      if(!found)\n\ttmp += message[i];\n      else\n\tfound = false;\n    }\n  message = tmp;\n}\n\nvoid DeleteWord(string &message)\n{\n  assert(message[cursor] == '^');\n  string tmp = \"\";\n  bool cursor_found = false;\n  bool word_found = false;\n  rep(i,message.size())\n    {\n      if(message[i] == '^')\n\t{\n\t  tmp += \"^\";\n\t  cursor_found = true;\n\t  continue;\n\t}\n\n      if(!cursor_found)\n\t{\n\t  tmp += message[i];\n\t}\n      else if(cursor_found && message[i] != ' ')\n\t{\n\t  word_found = true;\n\t}      \n      else if(cursor_found && word_found && message[i] == ' ')\n\t{\n\t  cursor_found = word_found = false;\n\t  tmp += message[i];\n\t}\n    }\n\n  message = tmp;\n}\n\n\n\nint main()\n{\n  int T,n;\n  cin >>T;\n  cin.ignore();\n\n  while(T--)\n    {\n      cursor = 0;\n\n      string line;\n      getline(cin,line);\n\n      line = \"^\" + line;\n      cin >> n;\n      cin.ignore();\n      string o1,o2;\n      rep(_,n)\n\t{\n\n\t  cin >> o1;\n\t  cin.ignore();\n\t  getline(cin,o2);\n\t  if(o1 == \"forward\")\n\t    {\n\t      if(o2 == \"char\")\n\t\t{\n\t\t  ForwardChar(line);\n\t\t}\n\t      else if(o2 == \"word\")\n\t\t{\n\t\t  ForwardWord(line);\n\t\t}\n\t      else assert(false);\n\t    }\n\t  else if(o1 == \"backward\")\n\t    {\n\t      if(o2 == \"char\")\n\t\t{\n\t\t  BackwardChar(line);\n\t\t}\n\t      else if(o2 == \"word\")\n\t\t{\n\t\t  BackwardWord(line);\n\t\t}\n\t      else assert(false);\n\t    }\n\t  else if(o1 == \"insert\")\n\t    {\n\t      o2 = o2.substr(1,o2.size()-2);\n\t      Insert(line,o2);\n\t    }\n\t  else if(o1 == \"delete\")\n\t    {\n\t      if(o2 == \"char\")\n\t\t{\n\t\t  DeleteChar(line);\n\t\t}\n\t      else if(o2 == \"word\")\n\t\t{\n\t\t  DeleteWord(line);\n\t\t}\n\t    }\n\t  else \n\t    {\n\t      assert(false);\n\t    }\n\t}\n      cout << line << endl;\n    }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\nusing namespace std;\n\nint main(){\n  int t,m;\n  string str,com,arg;\n\n  cin >> t;\n  cin.ignore();\n  while(t--){\n    getline(cin,str);\n    cin >> m;\n\n    int pos = 0;\n    for(int i=0;i<m;i++){\n      cin >> com;\n      cin.ignore();\n      getline(cin,arg);\n      //cout << com << \" \" << arg <<endl;\n      if(com == \"forward\"){\n\tif(arg == \"char\"){\n\t  if(pos!=(int)str.size())pos++;\t  \n\t}else{\n\t  while(pos<(int)str.size() && str[pos]!=' ')pos++;\n\t}\n      }\n      if(com == \"backward\"){\n\tif(arg == \"char\"){\n\t  if(pos)pos--;\n\t}else{\n\t  while(pos>0 && str[pos]!=' ')pos--;\n\t}\n      }\n      if(com == \"delete\"){\n\tif(arg == \"char\"){\n\t  if(pos!=(int)str.size())str.erase(str.begin()+pos);\n\t}else{\n\t  while(pos<(int)str.size() && str[pos]!=' ')str.erase(str.begin()+pos);\n\t  while(pos<(int)str.size() && str[pos]==' ')str.erase(str.begin()+pos);\n\t}\n      }\n      if(com == \"insert\"){\n\tfor(int j=1;j<(int)arg.size()-1;j++){\n\t  if(pos==(int)str.size()){\n\t    str.push_back(arg[j]);\n\t    pos++;\n\t  }else{\n\t    str.insert(str.begin()+pos++,arg[j]);\n\t  }\n\t}\n      }\n      //cout << pos << \" \" << str << endl;\n    }\n    if(pos==(int)str.size())str.push_back('^');\n    else str.insert(str.begin()+pos,'^');\n    cout << str << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <sstream>\n#include <string>\nusing namespace std;\n\nint GetForwardLast( int cs, string t )\n{\n    if ( cs == (int)t.size() ) return cs;\n\n    bool flag = false;\n    for ( int i = cs; i < (int)t.size(); i++ )\n    {\n        if ( t[i] == ' ' )\n        {\n            if ( flag )\n            {\n                return i;\n            }\n        }\n        else\n        {\n            flag = true;\n        }\n    }\n    return (int)t.size();\n}\n\nint GetBackwardFirst( int cs, string t )\n{\n    if ( cs == 0 ) return 0;\n\n    bool flag = false;\n    for ( int i = cs-1; i >= 0; i-- )\n    {\n        if ( t[i] == ' ' )\n        {\n            if ( flag )\n            {\n                return i + 1;\n            }\n        }\n        else\n        {\n            flag = true;\n        }\n    }\n    return 0;\n}\n\nint main( void )\n{\n    istringstream is;\n    string line;\n\n    getline( cin, line );\n    is.str( line );\n    int n;\n    is >> n;\n    is.clear();\n\n    for ( int i = 0; i < n; i++ )\n    {\n        int cs = 0;\n\n        getline( cin, line );\n        string text = line;\n\n        getline( cin, line );\n        is.str( line );\n        int m;\n        is >> m;\n        is.clear();\n\n        for ( int j = 0; j < m; j++ )\n        {\n            getline( cin, line );\n            string c = line;\n            is.str( c );\n            string c1, c2;\n            is >> c1;\n            getline( is, c2 );\n            c2 = c2.substr( 1 );\n            is.clear();\n\n            int cs_f = GetForwardLast( cs, text );\n            int cs_b = GetBackwardFirst( cs, text );\n\n            if ( c1 == \"forward\" )\n            {\n                if ( c2 == \"char\" )\n                {\n                    if ( cs + 1 <= (int)text.size() ) cs++;\n                }\n                else\n                {\n                    cs = cs_f;\n                }\n            }\n            else if ( c1 == \"backward\" )\n            {\n                if ( c2 == \"char\" )\n                {\n                    if ( cs - 1 >= 0 ) cs--;\n                }\n                else\n                {\n                    cs = cs_b;\n                }\n            }\n            else if ( c1 == \"insert\" )\n            {\n                string next;\n                string trim;\n                for ( int k = 1; k + 1 < (int)c2.size(); k++ ) trim += c2[k];\n                for ( int k = 0; k < cs; k++ ) next += text[k];\n                for ( int k = 0; k < (int)trim.size(); k++ ) next += trim[k];\n                for ( int k = cs; k < (int)text.size(); k++ ) next += text[k];\n                text = next;\n                cs += (int)trim.size();\n            }\n            else if ( c1 == \"delete\" )\n            {\n                if ( c2 == \"char\" )\n                {\n                    if ( cs < (int)text.size() )\n                    {\n                        string next = text.substr( 0, cs ) + text.substr( cs+1 );\n                        text = next;\n                    }\n                }\n                else\n                {\n                    if ( cs < (int)text.size() )\n                    {\n                        string next = text.substr( 0, cs ) + text.substr( cs_f );\n                        text = next;\n                    }\n                }\n            }\n        }\n\n        for ( int i = 0; i <= (int)text.size(); i++ )\n        {\n            if ( i == cs ) cout << \"^\";\n            if ( i < (int)text.size() ) cout << text[i];\n        }\n        cout << endl;\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\nusing namespace std;\n\nint main(){\n  int t,m;\n  string str,com,arg;\n\n  cin >> t;\n  cin.ignore();\n  while(t--){\n    getline(cin,str);\n    cin >> m;\n\n    int pos = 0;\n    for(int i=0;i<m;i++){\n      cin >> com;\n      cin.ignore();\n      getline(cin,arg);\n      //cout << com << \" \" << arg <<endl;\n      if(com == \"forward\"){\n\tif(arg == \"char\"){\n\t  if(pos<(int)str.size())pos++;\t  \n\t}else{\n\t  while(pos<(int)str.size() && str[pos]==' ')pos++;\n\t  while(pos<(int)str.size() && str[pos]!=' ')pos++;\n\t}\n      }\n      if(com == \"backward\"){\n\tif(arg == \"char\"){\n\t  if(pos)pos--;\n\t}else{\n\t  while(pos && str[pos-1]==' ')pos--;\n\t  while(pos && str[pos-1]!=' ')pos--;\n\t}\n      }\n      if(com == \"delete\"){\n\tif(arg == \"char\"){\n\t  if(pos!=(int)str.size())str.erase(str.begin()+pos);\n\t}else{\n\t  bool f=false;\n\t  int d = 0;\n\t  while(pos+d<(int)str.size()){\n\t    if(str[pos+d]!=' '){\n\t      f=true;\n\t      break;\n\t    }\n\t    d++;\n\t  }\n\t  if(f){\n\t    while(pos<(int)str.size() && str[pos]==' ')str.erase(str.begin()+pos);\n\t    while(pos<(int)str.size() && str[pos]!=' ')str.erase(str.begin()+pos);\n\t  }\n\t}\n      }\n      if(com == \"insert\"){\n\tfor(int j=1;j<(int)arg.size()-1;j++){\n\t  str.insert(str.begin()+pos++,arg[j]);\n\t}\n      }\n      //cout << pos << \" \" << str << endl;\n    }\n    if(pos==(int)str.size())str.push_back('^');\n    else str.insert(str.begin()+pos,'^');\n    cout << str << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <algorithm>\n#include <cctype>\nusing namespace std;\n\nint bword(string str, int n)\n{\n\tbool nb=false;\n\tint ret;\n\tfor(ret=n; ret>0; ret--)\n\t{\n\t\tif(ret==str.size()) continue;\n\n\t\tif(!nb)\n\t\t{\n\t\t\tif(str[ret]!=' ') nb=true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(str[ret]==' ') return ret+1;\n\t\t}\n\t}\n\treturn ret;\n}\n\nint fword(string str, int n)\n{\n\tbool nb=false;\n\tint ret;\n\tfor(ret=n; ret<str.size(); ret++)\n\t{\n\t\tif(!nb)\n\t\t{\n\t\t\tif(str[ret]!=' ') nb=true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(str[ret]==' ') return ret;\n\t\t}\n\n\t}\n\n\treturn ret;\n}\n\nint dword(string str, int n)\n{\n\tbool nb=false;\n\tint ret;\n\tfor(ret=n; ret<str.size(); ret++)\n\t{\n\t\tif(!nb)\n\t\t{\n\t\t\tif(str[ret]!=' ') nb=true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(str[ret]==' ') return ret;\n\t\t}\n\n\t}\n\n\tif(str[str.size()-1]!=' ') return str.size();\n\n\treturn n;\n}\n\nint main()\n{\n\tint N,M;\n\tstring str;\n\n\tcin >> N;\n\tgetline(cin,str);\n\n\twhile(N--)\n\t{\n\t\tgetline(cin,str);\n\t\t//str.erase(str.end()-1);\n\t\tint pos=0;\n\t\tcin >> M;\n\t\twhile(M--)\n\t\t{\n\t\t\tstring cmd;\n\t\t\tcin >> cmd;\n\t\t\tif(cmd[0]=='f')\n\t\t\t{\t\t\t\t\n\t\t\t\tgetline(cin,cmd);\n\t\t\t\tif(cmd[1]=='c')\n\t\t\t\t{\n\t\t\t\t\tif(pos<str.size()) pos++;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tpos=fword(str, pos);\n\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(cmd[0]=='b')\n\t\t\t{\n\t\t\t\tgetline(cin,cmd);\n\t\t\t\tif(cmd[1]=='c')\n\t\t\t\t{\n\t\t\t\t\tif(pos>0) pos--;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tpos=bword(str, pos);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(cmd[0]=='d')\n\t\t\t{\n\t\t\t\tgetline(cin,cmd);\n\t\t\t\tif(cmd[1]=='c')\n\t\t\t\t{\n\t\t\t\t\tif(pos!=str.size()) \n\t\t\t\t\t\tstr.erase(str.begin()+pos);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif(pos!=str.size())\n\t\t\t\t\t{\n\t\t\t\t\t\tint np=dword(str,pos);\n\t\t\t\t\t\tif(pos!=np) str.erase(str.begin()+pos, str.begin()+np);\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t\tif(cmd[0]=='i')\n\t\t\t{\n\t\t\t\tgetline(cin, cmd);\n\t\t\t\tcmd.assign(cmd.begin()+2, cmd.end()-2);\n\t\t\t\tstr.insert(pos, cmd);\n\t\t\t\tpos+=cmd.size();\n\t\t\t}\n\n\t\t}\n\n\t\tstr.insert(str.begin()+pos, '^');\n\t\tcout << str << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <climits>\n#include <cfloat>\n#include <ctime>\n#include <cassert>\n#include <map>\n#include <utility>\n#include <set>\n#include <iostream>\n#include <memory>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <functional>\n#include <sstream>\n#include <complex>\n#include <stack>\n#include <queue>\n#include <numeric>\n#include <list>\n#include <iomanip>\n#include <iterator>\n \nusing namespace std;\n \ntypedef long long ll;\ntypedef pair<int,int> Pii;\ntypedef pair<ll,ll> Pll;\n \n#define FOR(i,n) for(int i = 0; i < (n); i++)\n#define sz(c) ((int)c.size())\n\ntypedef unsigned long long ull;\nconst int INF = (int)1e8;\n\nvoid OUT_CUR(string& val,int cur) { \n#ifdef _DEBUG\n\tputs(val.c_str());\n\tFOR(i,cur) putchar(' ');\n\tputs(\"^\");\n#endif\n}\n\nvoid operate(string &val,int &cur,string op){\n\tint n = sz(val);\n\tif(op == \"forward char\"){\n\t\tif(cur != n) cur++;\n\t} else if(op == \"forward word\"){\n\t\tif(cur != n){\n\t\t\tcur++;\n\t\t\twhile(cur != n && val[cur] != ' ') cur++; \n\t\t}\n\t} else if(op == \"backward char\"){\n\t\tif(cur != 0) cur--;\n\t} else if(op == \"backward word\"){\n\t\tif(cur != 0){\n\t\t\tcur--;\n\t\t\twhile(cur != 0 && val[cur-1] != ' ') cur--; \n\t\t}\n\t} else if(op == \"delete char\"){\n\t\tif(cur != n)\n\t\t\tval.erase(cur,1);\n\t} else if(op == \"delete word\"){\n\t\tif(cur != n){\n\t\t\tint pos = 1;\n\t\t\twhile(cur + pos != n && val[cur + pos - 1] != ' ') pos++;\n\t\t\tval.erase(cur,pos);\n\t\t}\n\t} else {\n\t\tint start = 0;\n\t\twhile(op[start] != '\"') start++;\n\t\tstart++;\n\t\tint end = start+1;\n\t\twhile(op[end] != '\"') end++;\n\t\tstring a = op.substr(start,end - start);\n\t\tval.insert(val.begin() + cur,a.begin(),a.end());\n\t\tcur += a.size();\n\t}\n\n\tOUT_CUR(val,cur);\n}\n\nint main(){\n\tint t; cin>>t;\n\tstring buf;\n\tgetline(cin,buf);\n\twhile(t--){\n\t\tstring val; getline(cin,val);\n\t\tint m; cin>>m;\n\t\tgetline(cin,buf);\n\t\tvector<string> op(m); FOR(i,m) getline(cin,op[i]);\n\t\tint cur = 0;\n\t\tFOR(i,m){\n\t\t\toperate(val,cur,op[i]);\n\t\t}\n\n\t\tval.insert(val.begin() + cur,'^');\n\t\tcout << val << endl; \n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cctype>\n#include <cstring>\n#include <string>\n\n#define MIN(A,B) \\\n  ( (B) < (A) ? (B) : (A) )\n#define MAX(A,B) \\\n  ( (B) > (A) ? (B) : (A) )\n\nusing namespace std;\n\n/** Application main entry point. */\nint\nmain (\n  int     argc,\n  char  * argv[ ]\n  )\n{\n  char buf[ 256 ];\n  int n;\n\n  fgets ( buf, sizeof ( buf ), stdin );\n  sscanf ( buf, \"%d\", &n );\n  while ( n-- )\n  {\n    string res;\n    int m;\n    int p = 0;\n\n    fgets ( buf, sizeof ( buf ), stdin );\n    *( strchr ( buf, '\\n' ) ) = '\\0';\n    res.assign ( buf );\n\n    fgets ( buf, sizeof ( buf ), stdin );\n    sscanf ( buf, \"%d\", &m );\n\n    while ( m-- )\n    {\n      fgets ( buf, sizeof ( buf ), stdin );\n\n      if ( !strncmp ( buf, \"forward char\", 12 ) )\n      {\n        ++p;\n        p = MIN( p, res.size ( ) );\n        continue ;\n      }\n      if ( !strncmp ( buf, \"backward char\", 13 ) )\n      {\n        --p;\n        p = MAX( p, 0 );\n        continue ;\n      }\n      if ( !strncmp ( buf, \"forward word\", 12 ) )\n      {\n        while ( p < res.size ( ) && isspace ( res[ p ] ) ) ++p;\n        while ( p < res.size ( ) && !isspace ( res[ p ] ) ) ++p;\n        continue ;\n      }\n      if ( !strncmp ( buf, \"backward word\", 13 ) )\n      {\n        while ( p > 0 && isspace ( res[ p - 1 ] ) ) --p;\n        while ( p > 0 && !isspace ( res[ p - 1 ] ) ) --p;\n        continue ;\n      }\n      if ( !strncmp ( buf, \"insert\", 6 ) )\n      {\n        *( strrchr ( buf, '\\\"' ) ) = '\\0';\n        res.insert ( p, strchr ( buf, '\\\"' ) + 1 );\n        p += strlen ( strchr ( buf, '\\\"' ) + 1 );\n        continue ;\n      }\n      if ( !strncmp ( buf, \"delete char\", 11 ) )\n      {\n        if ( p < res.size ( ) ) res.erase ( p, 1 );\n        continue ;\n      }\n      if ( !strncmp ( buf, \"delete word\", 11 ) )\n      {\n        int q = p;\n\n        while ( q < res.size ( ) && isspace ( res[ q ] ) ) ++q;\n        while ( q < res.size ( ) && !isspace ( res[ q ] ) ) ++q;\n        res.erase ( p, q - p );\n        continue ;\n      }\n    }\n\n    printf ( \"%s^%s\"\n           , res.substr ( 0, p ).c_str ( )\n           , res.substr ( p, res.size ( ) - p ).c_str ( ) );\n    puts ( \"\" );\n  }\n\n  return ( 0 );\n}"
  },
  {
    "language": "C++",
    "code": "//02\n#include<iostream>\n#include<string>\n\nusing namespace std;\n\nint main(){\n  int t;\n  cin>>t;\n  cin.ignore();\n  while(t--){\n    string s;\n    getline(cin,s);\n    int c=0;\n    int m;\n    cin>>m;\n    while(m--){\n      string ca,cb;\n      cin>>ca;\n      getline(cin,cb);\n      if(ca==\"forward\"){\n\tif(cb==\" char\"){\n\t  if(c<s.size()){\n\t    c++;\n\t  }\n\t}else{\n\t  while(c<s.size()&&s[c]==' '){\n\t    c++;\n\t  }\n\t  while(c<s.size()&&s[c]!=' '){\n\t    c++;\n\t  }\n\t}\n      }else if(ca==\"backward\"){\n\tif(cb==\" char\"){\n\t  if(c!=0){\n\t    c--;\n\t  }\n\t}else{\n\t  while(c-1>=0&&s[c-1]==' '){\n\t    c--;\n\t  }\n\t  while(c-1>=0&&s[c-1]!=' '){\n\t    c--;\n\t  }\n\t}\n      }else if(ca==\"insert\"){\n\ts.insert(c,cb.substr(2,cb.size()-3));\n\tc+=cb.size()-3;\n      }else{\n\tif(cb==\" char\"){\n\t  if(c!=s.size()){\n\t    s.erase(c,1);\n\t  }\n\t}else{\n\t  bool a=false;\n\t  for(int i=c;i<s.size();i++){\n\t    a|=s[i]!=' ';\n\t  }\n\t  if(a){\n\t    while(c!=s.size()&&s[c]==' '){\n\t      s.erase(c,1);\n\t    }\n\t    while(c!=s.size()&&s[c]!=' '){\n\t      s.erase(c,1);\n\t    }\n\t  }\n\t}\n      }\n    }\n    for(int i=0;i<s.size();i++){\n      if(i==c){\n\tcout<<'^';\n      }\n      cout<<s[i];\n    }\n    if(c==s.size()){\n      cout<<'^';\n    }\n    cout<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring text,in;\nint cur,len;\n\nint main()\n{\n  int CS,n; cin>>CS; cin.ignore();\n  for (int cs = 0; cs < CS; cs++) {\n    getline(cin,text);\n    cin>>n; cin.ignore();\n    len=text.size();\n    cur=0;\n    for (int i = 0; i < n; i++) {\n      getline(cin,in);\n      if(in==\"forward char\")cur=min(cur+1,len);\n      else if(in==\"backward char\")cur=max(cur-1,0);\n      else if(in==\"delete char\"){\n\tif(cur>=text.size())continue;\n\ttext.erase(text.begin()+cur); len--;\n      }\n      else if(in.find(\"insert\")!=in.npos){\n\tint s=in.find('\"'),t=in.find('\"',s+1);\n\ttext=text.substr(0,cur)+in.substr(s+1,t-s-1)+text.substr(cur);\n\tcur+=t-s-1; len+=t-s-1;\n      }\n      else if(in==\"forward word\"){\n\tfor(;cur<len&&text[cur]==' ';cur++);\n\tfor(;cur<len&&text[cur]!=' ';cur++);\n      }\n      else if(in==\"backward word\"){\n\tfor(;cur>0&&text[cur-1]==' ';cur--);\n\tfor(;cur>0&&text[cur-1]!=' ';cur--);\n      }\n      else if(in==\"delete word\"){\n\tint s=cur,t;\n\tfor(;text[s]==' ';s++);\n\tif(s>=len)continue;\n\tfor(t=s;text[t]!=' '&&t<len;t++);\n\ttext=text.substr(0,cur)+text.substr(t); len-=t-cur;\n      }\n    }\n    cout<<text.substr(0,cur)<<\"^\"<<text.substr(cur)<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nvector<string> split(string s, string t) {\n\tvector<string> r;\n\tint p = s.find(t);\n\tif (p != s.npos) {\n\t\tr.push_back(s.substr(0, p));\n\t\ts = s.substr(p+t.size());\n\t}\n\tr.push_back(s);\n\treturn r;\n}\n\nvoid output(string text, int cursor) {\n\tcout << text.substr(0, cursor) << '^' << text.substr(cursor) << endl;\n}\n\nint main() {\n\tint n; cin >> n;\n\tcin.ignore();\n\tint i = 0;\n\t\n\twhile (i<n) {\n\t\t// solver\n\t\tstring text;\n\t\tgetline(cin, text);\n\t\t\n\t\tint cursor = 0;\n\t\t\n\t\tint m; cin >> m;\n\t\tcin.ignore();\n\t\t\n\t\tfor (int j=0; j<m; j++) {\n\t\t\tstring command;\n\t\t\tgetline(cin, command);\n\t\t\t\n\t\t\tvector<string> com = split(command, \" \");\n\t\t\t\n\t\t\tif (com[0]==\"forward\") {\n\t\t\t\n\t\t\t\tif (com[1]==\"char\") {\n\t\t\t\t\n\t\t\t\t\tif (cursor < (int)text.size()) cursor++;\n\t\t\t\t\t\n\t\t\t\t} else if (com[1]==\"word\") {\n\t\t\t\t\n\t\t\t\t\tbool find = false;\n\t\t\t\t\tint k;\n\t\t\t\t\tfor (k=cursor; k<(int)text.size() && !find; k++) {\n\t\t\t\t\t\tif (text[k]==' ') {\n\t\t\t\t\t\t\tfind = true;\n\t\t\t\t\t\t\tcursor = k;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (!find) cursor = (int)text.size();\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t} else if (com[0]==\"backward\") {\n\t\t\t\n\t\t\t\tif (com[1]==\"char\") {\n\t\t\t\t\n\t\t\t\t\tif (cursor > 0) cursor--;\n\t\t\t\t\t\n\t\t\t\t} else if (com[1]==\"word\") {\n\t\t\t\t\n\t\t\t\t\tbool find = false;\n\t\t\t\t\tint k = cursor;\n\t\t\t\t\tfor (; k>=0 && !find; k--) {\n\t\t\t\t\t\tif (text[k]==' ') find = true;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (find) {\n\t\t\t\t\t\tbool find2 = false;\n\t\t\t\t\t\tfor (; k>=0 && !find2; k--) {\n\t\t\t\t\t\t\tif (text[k]==' ') {\n\t\t\t\t\t\t\t\tfind2 = true;\n\t\t\t\t\t\t\t\tcursor = k + 1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!find2) cursor = 0;\n\t\t\t\t\t\t\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcursor = 0;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t} else if (com[0]==\"insert\") {\n\t\t\t\t\n\t\t\t\tstring ins = com[1].substr(1, (int)com[1].size()-2);\n\t\t\t\ttext = text.substr(0, cursor) + ins + text.substr(cursor);\n\t\t\t\tcursor += (int)ins.size();\n\t\t\t\t\n\t\t\t} else if (com[0]==\"delete\") {\n\t\t\t\t\n\t\t\t\tif (com[1] == \"char\" && cursor < (int)text.size()) {\n\t\t\t\t\t\n\t\t\t\t\tif (cursor < (int)text.size()) {\n\t\t\t\t\t\ttext = text.substr(0, cursor) + text.substr(cursor + 1);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t} else if (com[1]==\"word\" && cursor < (int)text.size()) {\n\t\t\t\t\t\n\t\t\t\t\tint del = cursor + 1;\t\t\t\t\t\n\t\t\t\t\tfor (; del < (int)text.size(); del++) {\n\t\t\t\t\t\tif (text[del] == ' ') {\n\t\t\t\t\t\t\tdel++;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t\ttext = text.substr(0, cursor) + text.substr(del);\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t\t\n\t\t// output\n\t\toutput(text, cursor);\n\t\t\n\t\t\n\t\ti++;\n\t}\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nusing db = double;\nusing ll = long long;\nusing vi = vector <int>;\n#define op operator\n#define pb push_back\n\nint main() {\n\tcout << fixed << setprecision(9);\n\tios :: sync_with_stdio(0);\n\n\tint t; cin >> t;\n\tstring s; getline(cin, s);\n\twhile(t --) {\n\t\tstring s;\n\t\tgetline(cin, s);\n\t\tlist <char> l;\n\t\tfor(char c : s)\n\t\t\tl.push_back(c);\n\t\tauto i = l.begin();\n\t\tint q; cin >> q;\n\t\twhile(q --) {\n\t\t\tstring s, t; cin >> s;\n\t\t\tgetline(cin, t); t = t.substr(1);\n\t\t\t//cout << s << ' ' << t << '\\n';\n\t\t\tif(s == \"forward\") {\n\t\t\t\tif(t == \"char\") {\n\t\t\t\t\tif(i != l.end()) i ++;\n\t\t\t\t} else {\n\t\t\t\t\tbool word = 0;\n\t\t\t\t\twhile(i != l.end()) {\n\t\t\t\t\t\tif(*i != ' ')\n\t\t\t\t\t\t\tword = 1;\n\t\t\t\t\t\telse if(word)\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\ti ++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(s == \"backward\") {\n\t\t\t\tif(t == \"char\") {\n\t\t\t\t\tif(i != l.begin()) i --;\n\t\t\t\t} else {\n\t\t\t\t\tbool word = 0;\n\t\t\t\t\twhile(i != l.begin()) {\n\t\t\t\t\t\ti --;\n\t\t\t\t\t\tif(*i != ' ')\n\t\t\t\t\t\t\tword = 1;\n\t\t\t\t\t\telse if(word && *prev(i) == ' ')\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(s == \"insert\") {\n\t\t\t\tt = t.substr(1, t.size() - 2);\n\t\t\t\ti = l.insert(i, t.begin(), t.end());\n\t\t\t\tadvance(i, t.size());\n\t\t\t}\n\n\t\t\tif(s == \"delete\") {\n\t\t\t\tif(t == \"char\") {\n\t\t\t\t\tif(i != l.end()) {\n\t\t\t\t\t\ti ++;\n\t\t\t\t\t\tl.erase(prev(i));\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif(i != l.end()) {\n\t\t\t\t\t\tbool word = 0;\n\t\t\t\t\t\tfor(auto j = i; j != l.end(); j ++)\n\t\t\t\t\t\t\tif(*j != ' ') word = 1;\n\t\t\t\t\t\tif(word) {\n\t\t\t\t\t\t\tword = 0;\n\t\t\t\t\t\t\twhile(i != l.end()) {\n\t\t\t\t\t\t\t\tif(*i != ' ')\n\t\t\t\t\t\t\t\t\tword = 1;\n\t\t\t\t\t\t\t\telse if(word)\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\ti ++;\n\t\t\t\t\t\t\t\tl.erase(prev(i));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor(auto it = l.begin(); it != l.end(); it ++) {\n\t\t\tif(it == i) cout << '^';\n\t\t\tcout << *it;\n\t\t}\n\t\tif(i == l.end()) cout << '^';\n\t\tcout << '\\n';\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <cstdlib>\nusing namespace std;\n\nint main()\n{\n  int nTest;\n  cin >> nTest;\n  cin.ignore();\n  //cout << nTest << endl;\n    \n  for (int testIdx = 0; testIdx < nTest; testIdx++) {\n    string text;\n    cin.ignore();\n    getline(cin, text);\n    //cout << text << endl;\n    //    cin.ignore();\n\n    int N;\n    cin >> N;\n    //cout << \"N = \" << N << endl;\n    //cin.ignore();\n    int cur = 0;\n    for (int i = 0; i < N; i++) {\n      string cmd, arg;\n      cin >> cmd;\n      if (cmd == \"forward\") {\n\tcin >> arg;\n\tif (arg == \"char\") {\n\t  if (cur != text.size()) {\n\t    cur++;\n\t  }\n\t} else {\t\n\t  while (cur < text.size() && isblank(text[cur])) {cur++;}\n\t  while (cur < text.size() && !isblank(text[cur])) {cur++;}\n\t}\n      } else if (cmd == \"backward\") {\n\tcin >> arg;\n\tif (arg == \"char\") {\n\t  if (cur > 0) {\n\t    cur--;\n\t  }\n\t} else {\t  \n\t  while (cur > 0 && !isblank(text[cur])) {cur--;}\n\t  while (cur > 0 && isblank(text[cur])) {cur--;}\n\t}\n      } else if (cmd == \"insert\") {\n\tgetline(cin, arg);\n\ttext.insert(text.begin() + cur, arg.begin() + 2, arg.end() - 1);\n\tcur += arg.size()- 3;\n      } else if (cmd == \"delete\") {\n\tcin >> arg;\n\tif (arg == \"char\") {\n\t  if (cur < text.size()) {\n\t    text.erase(text.begin() + cur);\n\t  }\n\t} else {\n\t  while (cur < text.size() && !isblank(text[cur])) {\n\t    text.erase(text.begin() + cur);\n\t  }\n\t  /*\n\t  while (cur < text.size() && isblank(text[cur])) {\n\t    text.erase(text.begin() + cur);\n\t  }\n\t  */\n\t}\n      }\n      //cout << \"cur = \" << cur << endl;\n      //cout << text << endl;\n    }\n    for (int i = 0; i < cur; i++) {\n      cout << text[i];\n    }\n    cout << \"^\";\n    for (int i = cur; i < text.size(); i++) {\n      cout << text[i];\n    }\n    cout << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <cstdlib>\nusing namespace std;\n\nchar space()\n{\n  char c;\n  while (isblank(c = getchar()) || c == '\\n');\n  return c;\n}\n\nchar _space()\n{\n  char c;\n  while (isblank(c = getchar()));\n  return c;\n}\n\nstring nextStr()\n{\n  char c = space();\n  string str = \"\";\n  do {\n    str += c;\n  }  while (!isblank(c = getchar()) && (c != '\\n'));\n  return str;\n}\n\nstring nextLine()\n{\n  string str;\n  char c;\n  c = _space();\n  if (c == '\\n') return str;\n  do {\n    str+=c;\n  } while ((c = getchar()) != '\\n');\n\n  return string(str);\n}\n\nstring nextQuote()\n{\n  space();\n  char c;\n  string str = \"\";\n  while ((c = getchar()) != '\"') {\n    str += c;\n  }\n  return str;\n}\n\nint main()\n{\n  int nTest;  \n  scanf(\"%d \",&nTest);\n  //cout << nTest << endl;\n    \n  for (int testIdx = 0; testIdx < nTest; testIdx++) {\n    string text = nextLine();\n    //cout << text << endl;\n    //    cin.ignore();\n\n    int N;\n    scanf(\" %d \", &N);\n    //cout << \"N = \" << N << endl;\n    //cin.ignore();\n    int cur = 0;\n    for (int i = 0; i < N; i++) {\n      string cmd, arg;\n      cmd = nextStr();\n      if (cmd == \"forward\") {\n\targ = nextStr();\n\tif (arg == \"char\") {\n\t  if (cur < text.size()) {\n\t    cur++;\n\t  }\n\t} else {\t\n\t  while (cur < text.size() && isblank(text[cur])) {cur++;}\n\t  while (cur < text.size() && !isblank(text[cur])) {cur++;}\n\t}\n      } else if (cmd == \"backward\") {\n\targ = nextStr();\n\tif (arg == \"char\") {\n\t  if (cur > 0) {\n\t    cur--;\n\t  }\n\t} else {\t  \n\t  while (cur > 0 && !isblank(text[cur])) {cur--;}\n\t  //while (cur > 0 && isblank(text[cur])) {cur--;}\n\t}\n      } else if (cmd == \"insert\") {\n\targ = nextQuote();\n\ttext.insert(text.begin() + cur, arg.begin(), arg.end());\n\tcur += arg.size();\n      } else if (cmd == \"delete\") {\n\targ = nextStr();\n\tif (arg == \"char\") {\n\t  if (cur < text.size()) {\n\t    text.erase(text.begin() + cur);\n\t  }\n\t} else {\n\t  while (cur < text.size() && isblank(text[cur])) {\n\t    text.erase(text.begin() + cur);\n\t  }\n\t  while (cur < text.size() && !isblank(text[cur])) {\n\t    text.erase(text.begin() + cur);\n\t  }\n\t  /*\n\t  */\n\t}\n      }\n      //cout << \"cmd, arg = \" << cmd << \", \" << arg << endl;\n      //cout << \"cur = \" << cur << endl;\n      //cout << text << endl;\n    }\n    for (int i = 0; i < cur; i++) {\n      cout << text[i];\n    }\n    cout << \"^\";\n    for (int i = cur; i < text.size(); i++) {\n      cout << text[i];\n    }\n    cout << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<cctype>\nusing namespace std;\nclass SimpleEditor{\npublic:\n  int cur;\n  string s;\n  SimpleEditor(string s):s(s),cur(0){}\n  void ForwardChar(){\n    ++cur;\n    if(cur>=s.length())cur=s.length()-1;\n  }\n  void BackwardChar(){\n    --cur;\n    if(cur<0)cur=0;\n  }\n  void ForwardWord(){\n    while(s[cur]==' '&&cur<s.length())ForwardChar();\n    while(s[cur]!=' '&&s[cur]!='#'&&cur<s.length())ForwardChar();\n    if(s[cur]!='#')\n      BackwardChar();\n  }\n  void BackwardWord(){\n    while(s[cur]==' '&&cur>0)BackwardChar();\n    while(s[cur]!=' '&&cur>0)BackwardChar();\n    if(s[cur]==' ')\n      ForwardChar();\n  }\n  void Insert(string text){\n    s.insert(s.begin()+cur,text.begin()+8,text.end()-1);\n    cur += text.length()-9;\n  }\n  bool DeleteChar(){\n    if(cur<s.length()-1&&*(s.begin()+cur+1)!='#'){\n      s.erase(s.begin()+cur+1);\n      return true;\n    }\n    return false;\n  }\n  void DeleteWord(){\n    if(cur+1>=s.length())return ;\n    while(s[cur+1]==' '&&DeleteChar());\n    while(s[cur+1]!=' '&&DeleteChar());\n    if(s[cur]!=' ')s.erase(s.begin()+cur);\n  }\n  string ToString()const{\n    string ret;\n    for(int i=0;i<s.length();++i){\n      //if(i==cur)ret+='[';\n      if(i==cur)ret+='^';\n      ret+=s[i];\n      //if(i==cur)ret+=']';\n    }\n    ret.erase(ret.end()-1);\n    return ret;\n  }\n};\nvoid GetLine(string &s){\n  getline(cin,s);\n  for(int i =0;i<s.length();++i){\n    if(iscntrl(s[i])){s.erase(s.begin()+i);--i;}\n  }\n}\nint main(){\n  string dam;\n  int T;\n  cin >> T;\n  GetLine(dam);\n  for(int tc=1;tc<=T;++tc){\n    string s;\n    GetLine(s);\n    s+='#';\n    SimpleEditor se(s);\n    //cout << \"NUMBER OF TEST CASE : \" << T << \" INITIAL STRING : \" << s << endl;\n    int t;\n    cin >> t;\n    GetLine(dam);\n    for(int i = 0; i < t; ++i){\n      string inst;\n      GetLine(inst);\n      if(inst==\"forward char\")se.ForwardChar();\n      if(inst==\"forward word\")se.ForwardWord();\n      if(inst==\"backward char\")se.BackwardChar();\n      if(inst==\"backward word\")se.BackwardWord();\n      if(inst.find(\"insert\")!=string::npos)se.Insert(inst);\n      if(inst==\"delete char\")se.DeleteChar();\n      if(inst==\"delete word\")se.DeleteWord();\n      //cout<<i<<\"/\" <<t<<\":\"<<\" INST:\" <<inst<<\" ED:\"<<se.ToString() << endl;\n    }\n    cout << se.ToString() << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<vector>\nusing namespace std;\n\nint main(){\n  int n;\n  cin >>n;\n  cin.ignore();\n  for(int i=0;i<n;i++){\n    string str;\n    int cn,pos;\n    if(!getline(cin,str)){\n      str = \"\";\n    }\n    cin >> cn;\n    pos = 0;\n    for(int j=0;j<cn;j++){\n      string command,target;\n      char ch;\n      cin >> command;\n      getline(cin,target);\n      target.erase(0,1);\n      if(command == \"forward\"){\n        if(pos<str.size()){\n          if(target == \"word\"){\n            int judge = 0;\n            while(pos<str.size()){\n              if(str[pos]!=' '){\n                judge = 1;\n                break;\n              }\n              pos++;\n            }\n            if(judge==1){\n              do{\n                pos++;\n              }while(pos<str.size()&&str[pos]!=' ');\n            }\n          }else{\n            pos++;\n          }\n        }\n      }else if(command == \"delete\"){\n        if(str.size()!=0&&pos!=str.size()){\n          if(target == \"word\"){\n            int judge = 0;\n            int temp = pos;\n            while(temp<str.size()){\n              if(judge==0){\n                if(str[temp]!=' '){\n                  judge = 1;\n                }\n              }else{\n                if(str[temp]==' '){\n                  str.erase(pos,temp-pos);\n                  break;\n                }\n              }\n              temp++;\n            }\n            \n          }else{\n            str.erase(pos,1);\n          }\n        }\n      }else if(command == \"backward\"){\n        if(pos>0){\n          if(target == \"word\"){\n            int judge = 0;\n            while(pos>=0){\n              if(str[pos]!=' '){\n                judge = 1;\n                break;\n              }\n              pos--;\n            }\n            if(judge==1){\n              do{\n                pos--;\n              }while(pos>0&&str[pos]!=' ');\n            }\n          }else{\n            pos--;\n          }\n        }\n      }else if(command == \"insert\"){\n        target = target.substr(1,target.size()-2);\n        str.insert(pos,target);\n        pos += target.size();\n      }\n      //str.insert(pos,\"^\");\n      //cout << str << endl;\n      //str.erase(pos,1);\n    }\n    str.insert(pos,\"^\");\n    cout << str << endl;\n  }\n  \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cassert>\n#include <iostream>\n#include <cstdio>\n#include <vector>\n#include <algorithm>\n#include <complex>\n#include <cstring>\n#include <cstdlib>\n#include <string>\n#include <cmath>\n#include <queue>\n#include <set>\n#include <map>\nusing namespace std;\n\n#define REP(i,n) for(int i=0;i<(int)n;++i)\n#define FOR(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i)\n#define ALL(c) (c).begin(), (c).end()\nconst int INF = 1<<29;\n\nvoid forwardChar(string &s, int &c) {\n  if (c != s.size()) c++;\n}\nvoid forwardWord(string &s, int &c) {\n  for (;c<s.size()&&s[c]==' ';++c);\n  for (;c<s.size()&&s[c]!=' ';++c);\n}\nvoid backwardChar(string &s, int &c) {\n  if (c) c--;\n}\nvoid backwardWord(string &s, int &c) {\n  for (;c>0&&s[c-1]==' ';--c);\n  for (;c>0&&s[c-1]!=' ';--c);\n}\nvoid insertText(string &s, int &c, const string &t) {\n  s = s.substr(0,c) + t + s.substr(c);\n  c += t.size();\n}\nvoid deleteChar(string &s, int &c) {\n  if (c != s.size()) {\n    s = s.substr(0,c) + s.substr(c+1);\n  }\n}\nvoid deleteWord(string &s, int &c) {\n  int p = c;\n  for (; p<s.size()&&s[p]==' '; ++p);\n  if (p==s.size()) return;\n  for (; p<s.size()&&s[p]!=' '; ++p);\n  s = s.substr(0,c) + s.substr(p);\n}\n\nint main() {\n  int n;\n  cin >> n;\n  cin.ignore();\n  while(n--) {\n    string text;\n    getline(cin, text);\n    int m; cin >> m;\n    // cout << m << endl;\n    // cout << text << endl;\n    int cursor = 0;\n    while(m--) {\n      string op1, op2;\n      cin >> op1;\n      cin.ignore();\n      getline(cin,op2);\n      // cout << op1 << \" : \" << op2 << endl;\n      \n      if (op1[0] == 'f') {\n        if (op2[0] == 'c') forwardChar(text, cursor);\n        else forwardWord(text, cursor);\n      } else if (op1[0] == 'b') {\n        if (op2[0] == 'c') backwardChar(text, cursor);\n        else backwardWord(text, cursor);\n      } else if (op1[0] == 'i') {\n        assert(op2[0]=='\"' && op2[op2.size()-1]=='\"');\n        op2 = op2.substr(1, op2.size()-2);\n        insertText(text, cursor, op2);\n      } else if (op1[0] == 'd') {\n        if (op2[0] == 'c') deleteChar(text, cursor);\n        else deleteWord(text, cursor);\n      } else {\n        assert(0);\n      }\n      assert(cursor>=0 && cursor<=text.size());\n      // cout << text << \" \" << cursor << endl;\n    }\n\n    text = text.substr(0,cursor) + \"^\" + text.substr(cursor);\n    cout << text << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cctype>\n#include <cstring>\n#include <string>\n\n#define MIN(A,B) \\\n  ( (B) < (A) ? (B) : (A) )\n#define MAX(A,B) \\\n  ( (B) > (A) ? (B) : (A) )\n\nusing namespace std;\n\n/** Application main entry point. */\nint\nmain (\n  int     argc,\n  char  * argv[ ]\n  )\n{\n  char buf[ 256 ];\n  int n;\n\n  fgets ( buf, sizeof ( buf ), stdin );\n  sscanf ( buf, \"%d\", &n );\n  while ( n-- )\n  {\n    string res;\n    int m;\n    int p = 0;\n\n    fgets ( buf, sizeof ( buf ), stdin );\n    *( strchr ( buf, '\\n' ) ) = '\\0';\n    res.assign ( buf );\n\n    fgets ( buf, sizeof ( buf ), stdin );\n    sscanf ( buf, \"%d\", &m );\n\n    while ( m-- )\n    {\n      fgets ( buf, sizeof ( buf ), stdin );\n\n      if ( !strncmp ( buf, \"forward char\", 12 ) )\n      {\n        ++p;\n        p = MIN( p, res.size ( ) );\n        continue ;\n      }\n      if ( !strncmp ( buf, \"backward char\", 13 ) )\n      {\n        --p;\n        p = MAX( p, 0 );\n        continue ;\n      }\n      if ( !strncmp ( buf, \"forward word\", 12 ) )\n      {\n        while ( p < res.size ( ) && isspace ( res[ p ] ) ) ++p;\n        while ( p < res.size ( ) && !isspace ( res[ p ] ) ) ++p;\n        continue ;\n      }\n      if ( !strncmp ( buf, \"backward word\", 13 ) )\n      {\n        while ( p > 0 && isspace ( res[ p - 1 ] ) ) --p;\n        while ( p > 0 && !isspace ( res[ p - 1 ] ) ) --p;\n        continue ;\n      }\n      if ( !strncmp ( buf, \"insert\", 6 ) )\n      {\n        *( strrchr ( buf, '\\\"' ) ) = '\\0';\n        res.insert ( p, strchr ( buf, '\\\"' ) + 1 );\n        p += strlen ( strchr ( buf, '\\\"' ) + 1 );\n\n        continue ;\n      }\n      if ( !strncmp ( buf, \"delete char\", 11 ) )\n      {\n        if ( p < res.size ( ) ) res.erase ( p, 1 );\n\n        continue ;\n      }\n      if ( !strncmp ( buf, \"delete word\", 11 ) )\n      {\n        int q = p;\n\n        while ( q < res.size ( ) && isspace ( res[ q ] ) ) ++q;\n        while ( q < res.size ( ) && !isspace ( res[ q ] ) ) ++q;\n        res.erase ( p, q - p );\n\n        continue ;\n      }\n    }\n\n    printf ( \"%s^%s\\r\\n\"\n           , res.substr ( 0, p ).c_str ( )\n           , res.substr ( p, res.size ( ) - p ).c_str ( ) );\n  }\n\n  return ( 0 );\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<vector>\nusing namespace std;\n\nint main(){\n  int n;\n  cin >>n;\n  for(int i=0;i<n;i++){\n    string str;\n    int cn,pos;\n    cin.ignore();\n    getline(cin,str);\n    cin >> cn;\n    pos = 0;\n    for(int j=0;j<cn;j++){\n      string command,target;\n      char ch;\n      cin >> command;\n      getline(cin,target);\n      target.erase(0,1);\n      if(command == \"forward\"){\n        if(target == \"word\"){\n          do{\n            pos++;\n          }while(pos<str.size()&&str[pos]!=' ');\n        }else{\n          pos++;\n        }\n      }else if(command == \"delete\"){\n        if(target == \"word\"){\n          do{\n            str.erase(pos,1);\n          }while(str[pos]!=' ');\n        }else{\n          str.erase(pos,1);\n        }\n      }else if(command == \"backward\"){\n        if(target == \"word\"){\n          do{\n            pos--;\n          }while(pos>0&&str[pos]!=' ');\n        }else{\n          pos--;\n        }\n      }else if(command == \"insert\"){\n        target = target.substr(1,target.size()-2);\n        str.insert(pos,target);\n        pos += target.size();\n      }\n      /*\n      if(pos>=str.size()){\n        pos = str.size() -1;\n      }else if(pos<0){\n        pos = 0;\n      }*/\n      cout << str << endl;\n    }\n    str.insert(pos,\"^\");\n    cout << str << endl;\n  }\n    \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <cstdlib>\nusing namespace std;\n\nchar space()\n{\n  char c;\n  while (isblank(c = getchar()) || c == '\\n');\n  return c;\n}\n\nchar _space()\n{\n  char c;\n  while (isblank(c = getchar()));\n  return c;\n}\n\nstring nextStr()\n{\n  char c = space();\n  string str = \"\";\n  do {\n    str += c;\n  }  while (!isblank(c = getchar()) && (c != '\\n'));\n  return str;\n}\n\nstring nextLine()\n{\n  string str;\n  char c;\n  c = _space();\n  if (c == '\\n') return str;\n  do {\n    str+=c;\n  } while ((c = getchar()) != '\\n');\n\n  return string(str);\n}\n\nstring nextQuote()\n{\n  space();\n  char c;\n  string str = \"\";\n  while ((c = getchar()) != '\"') {\n    str += c;\n  }\n  return str;\n}\n\nint main()\n{\n  int nTest;  \n  scanf(\"%d \",&nTest);\n  //cout << nTest << endl;\n    \n  for (int testIdx = 0; testIdx < nTest; testIdx++) {\n    string text = nextLine();\n    //cout << text << endl;\n    //    cin.ignore();\n\n    int N;\n    scanf(\" %d \", &N);\n    //cout << \"N = \" << N << endl;\n    //cin.ignore();\n    int cur = 0;\n    for (int i = 0; i < N; i++) {\n      string cmd, arg;\n      cmd = nextStr();\n      if (cmd == \"forward\") {\n\targ = nextStr();\n\tif (arg == \"char\") {\n\t  if (cur < text.size()) {\n\t    cur++;\n\t  }\n\t} else {\t\n\t  while (cur < text.size() && isblank(text[cur])) {cur++;}\n\t  while (cur < text.size() && !isblank(text[cur])) {cur++;}\n\t}\n      } else if (cmd == \"backward\") {\n\targ = nextStr();\n\tif (arg == \"char\") {\n\t  if (cur > 0) {\n\t    cur--;\n\t  }\n\t} else {\t  \n\t  while (cur > 0 && isblank(text[cur])) {cur--;}\n\t  while (cur > 0 && !isblank(text[cur])) {cur--;}\n\t}\n      } else if (cmd == \"insert\") {\n\targ = nextQuote();\n\ttext.insert(text.begin() + cur, arg.begin(), arg.end());\n\tcur += arg.size();\n      } else if (cmd == \"delete\") {\n\targ = nextStr();\n\tif (arg == \"char\") {\n\t  if (cur < text.size()) {\n\t    text.erase(text.begin() + cur);\n\t  }\n\t} else {\n\t  while (cur < text.size() && isblank(text[cur])) {\n\t    text.erase(text.begin() + cur);\n\t  }\n\t  while (cur < text.size() && !isblank(text[cur])) {\n\t    text.erase(text.begin() + cur);\n\t  }\n\t  /*\n\t  */\n\t}\n      }\n      //cout << \"cmd, arg = \" << cmd << \", \" << arg << endl;\n      //cout << \"cur = \" << cur << endl;\n      //cout << text << endl;\n    }\n    for (int i = 0; i < cur; i++) {\n      cout << text[i];\n    }\n    cout << \"^\";\n    for (int i = cur; i < text.size(); i++) {\n      cout << text[i];\n    }\n    cout << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cmath>\nusing namespace std;\n\nint main()\n{\n    string bla = \"bla\";\n    cout<<bla.substr(3)<<endl;\n    int nb_cas;\n    cin>>nb_cas;\n    cin.ignore();\n    while(nb_cas--)\n    {\n        string texte;\n        getline(cin,texte);\n        int nb_op;\n        cin>>nb_op;\n        int curseur = 0;\n        for(int c=0;c<nb_op;c++)\n        {\n            string s1,s2;\n            cin>>s1;\n            cin.ignore();\n            getline(cin,s2);\n            if(s1==\"forward\"||s1==\"backward\")\n            {\n                int d = (s1==\"forward\"?1:-1);\n                if(s2==\"char\") curseur+=d;\n                else if(s2==\"word\")\n                {\n                    while(curseur>= 0 && curseur<=texte.size()&&(curseur == texte.size()||texte[curseur]==' ')) curseur+=d;\n                    while(curseur>=-0&&curseur<=texte.size()&&(curseur==texte.size()||texte[curseur]!=' '))\n                    {\n                        curseur += d;\n                    }\n                }\n                curseur = max(curseur,0);\n                curseur = min(curseur,(int)texte.size());\n            }\n            else if(s1==\"delete\")\n            {\n                if(s2==\"char\"&&curseur<texte.size())\n                {\n                    texte = texte.substr(0,curseur)+texte.substr(curseur+1);\n                }\n                else if(s2==\"word\")\n                {\n                    int finMot = curseur;\n                    while(finMot<texte.size()&&texte[finMot]==' ') finMot++;\n                    if(finMot == texte.size()) continue;\n                    while(finMot<texte.size()&&texte[finMot]!=' ')\n                    {\n                        finMot ++;\n                    }\n                    texte = texte.substr(0,curseur)+(finMot < texte.size()?texte.substr(finMot):\"\");\n                }\n            }\n            else\n            {\n                s2 = s2.substr(1,s2.size()-2);\n                texte = texte.substr(0,curseur)+s2+(curseur<(int)texte.size()?texte.substr(curseur):\"\");\n                curseur += s2.size();\n            }\n        }\n        cout<<texte.substr(0,curseur)+\"^\"+(curseur<(int)texte.size()?texte.substr(curseur):\"\")<<endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define FOR(i,a,b) for(int i=(a);i<(b);++i)\n#define rep(i,n)   FOR(i,0,n)\n#define pb push_back\n#define mp make_pair\ntypedef long long ll;\ntypedef pair<int,int> pint;\n\nint main(){\n    int n,m;\n    string s,q;\n    cin>>n;cin.ignore();\n    while(n--){\n        int cur=0;\n        string t(\"^\");\n        getline(cin,s);\n        s=t+s;\n        cin>>m;cin.ignore();\n        rep(i,m){\n            getline(cin,q);\n            if(q==\"forward char\"){\n                if(cur<s.size()-1) {\n                    swap(s[cur],s[cur+1]);\n                    ++cur;\n                } \n            }\n            else if(q==\"forward word\"){\n                int spcnt=(s[cur-1]!=' ')?1:0;\n                while(cur<s.size()-1){\n                    if(s[cur+1]==' '){\n                        ++spcnt;\n                        if(spcnt==2) break;\n                        while(s[cur+1]==' '){\n                            swap(s[cur],s[cur+1]);\n                            ++cur;\n                        } \n                    }\n                    swap(s[cur],s[cur+1]);\n                    ++cur;\n                }\n            }\n            else if(q==\"backward char\"){\n                if(cur>0) {\n                    swap(s[cur],s[cur-1]);\n                    --cur;\n                } \n            }\n            else if(q==\"backward word\"){\n                int spcnt=(s[cur+1]!=' ')?1:0;;\n                while(cur>0){\n                    if(s[cur-1]==' '){\n                        ++spcnt;\n                        if(spcnt==2) break;\n                        while(s[cur-1]==' '){\n                            swap(s[cur],s[cur-1]);\n                            --cur;\n                        }\n                    }\n                    swap(s[cur],s[cur-1]);\n                    --cur;\n                }\n            }\n            else if(q[0]=='i'){\n                s.insert(cur,q,8,q.size()-9);\n                cur +=q.size()-9;\n            }\n            else if(q==\"delete char\"){\n                s.erase(cur+1,1);\n            }\n            else if(q==\"delete word\"){\n                \n                int spcnt=(s[cur-1]!=' ')?1:0,tm=cur;\n                while(tm<s.size()-1){\n                    if(s[tm+1]==' '){\n                        ++spcnt;\n                        if(spcnt==2) break;\n                        while(s[tm+1]==' '){\n                            swap(s[tm],s[tm+1]);\n                            ++tm;\n                        } \n                    }\n                    swap(s[tm],s[tm+1]);\n                    ++tm;\n                }\n                while(tm!=cur){\n                    s.erase(tm-1,1);\n                    --tm;\n                }\n            }\n        }\n    cout<<s<<endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<vector>\nusing namespace std;\n\nint main(){\n  int n;\n  cin >>n;\n  for(int i=0;i<n;i++){\n    string str;\n    int cn,pos;\n    cin.ignore();\n    getline(cin,str);\n    cin >> cn;\n    pos = 0;\n    for(int j=0;j<cn;j++){\n      string command,target;\n      cin >> command >> target;\n      if(command == \"forward\"){\n        if(target == \"word\"){\n          do{\n            pos++;\n          }while(pos<str.size()&&str[pos]!=' ');\n        }else{\n          pos++;\n        }\n      }else if(command == \"delete\"){\n        if(target == \"word\"){\n          do{\n            str.erase(pos,1);\n          }while(str[pos]!=' ');\n        }else{\n          str.erase(pos,1);\n        }\n      }else if(command == \"backward\"){\n        if(target == \"word\"){\n          do{\n            pos--;\n          }while(pos>0&&str[pos]!=' ');\n        }else{\n          pos--;\n        }\n      }else if(command == \"insert\"){\n        target = target.substr(1,target.size()-2);\n        str.insert(pos,target);\n        pos += target.size();\n      }\n      /*\n      if(pos>=str.size()){\n        pos = str.size() -1;\n      }else if(pos<0){\n        pos = 0;\n      }*/\n      //cout << str << endl;\n    }\n    str.insert(pos,\"^\");\n    cout << str << endl;\n  }\n    \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<vector>\nusing namespace std;\n\nint main(){\n  int n;\n  cin >>n;\n  cin.ignore();\n  for(int i=0;i<n;i++){\n    string str;\n    int cn,pos;\n    if(!getline(cin,str)){\n      str = \"\";\n    }\n    cin >> cn;\n    pos = 0;\n    for(int j=0;j<cn;j++){\n      string command,target;\n      char ch;\n      cin >> command;\n      getline(cin,target);\n      target.erase(0,1);\n      if(command == \"forward\"){\n        if(target == \"word\"){\n          do{\n            pos++;\n          }while(pos<str.size()&&str[pos]!=' ');\n        }else{\n          pos++;\n        }\n      }else if(command == \"delete\"){\n        if(str.size()!=0){\n          if(target == \"word\"){\n            do{\n              str.erase(pos,1);\n            }while(str[pos]!=' ');\n          }else{\n            str.erase(pos,1);\n          }\n        }\n      }else if(command == \"backward\"){\n        if(target == \"word\"){\n          do{\n            pos--;\n          }while(pos>0&&str[pos]!=' ');\n        }else{\n          pos--;\n        }\n      }else if(command == \"insert\"){\n        target = target.substr(1,target.size()-2);\n        str.insert(pos,target);\n        pos += target.size();\n      }\n      /*\n        if(pos>=str.size()){\n        pos = str.size() -1;\n        }else if(pos<0){\n        pos = 0;\n        }\n      */\n      //cout << str << endl;\n    }\n    str.insert(pos,\"^\");\n    cout << str << endl;\n  }\n  \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <iostream>\n#include <string>\n#include <cmath>\n\nusing namespace std;\n\nint main(){    \n    int n;\n    cin>>n;\n    for(int i=0;i<n;i++){\n        string buf;\n        char c;\n        scanf(\"%c\", &c);\n\n        getline(cin,buf);\n       // cout << \"buf is \" << buf << endl;\n        int pos=0;\n        int cn;\n        cin>>cn;\n        for(int k=0;k<cn;k++){\n            string command;\n            cin >> command;\n            if(command==\"forward\"){\n                cin >> command;\n                if(command==\"char\"){\n                    if(!buf.empty())\n                    pos = min(pos+1,(int)buf.size());\n                }else{\n                    // word\n                    while(pos < buf.size()&& buf[pos]==' ')pos++;\n                    while(pos < buf.size()&& buf[pos]!=' ')pos++;\n                }\n            }else if(command==\"backward\"){\n                cin >> command;\n                if(command==\"char\"){\n                    pos = max(pos-1,0);\n                }else{\n                    // word\n                    while(pos > 0 && buf[pos]==' ' )pos--;\n                    while(pos > 0 && buf[pos-1]!=' ')pos--;\n                }\n            }else if(command==\"insert\"){\n                getline(cin,command);\n                ungetc('\\n',stdin);\n                string text;\n                bool f= false;\n                for(int i=0;i<command.size();i++){\n                    if(f&&command[i]=='\\\"')break;\n                    if(f)text.push_back(command[i]);\n                    if(command[i]=='\\\"')f=true;\n                }\n                buf.insert(pos,text);\n                pos+= text.size();\n            }else {//delete\n                cin >> command;\n                if(command== \"char\"){\n                    if(!buf.empty()&&pos!=buf.size()){\n                        buf.erase(pos,1);\n                    }\n\n                }else{\n                    if(!buf.empty()){\n                        int t=pos;\n                        while(t<buf.size() && buf[t]==' ')t++;\n                        while(t<buf.size() && buf[t]!=' ')t++;\n                        while(t<buf.size() && buf[t]==' ')t++;\n\n                        buf.erase(pos,t-pos);\n                    }\n                }\n            }\n        }\n        //cout << buf << \"****\" << endl;\n        if(buf.empty()){\n            printf(\"^\\n\");\n        }else{\n        for(int p=0;p<buf.size();p++){\n            if(pos==p)printf(\"^\");\n            printf(\"%c\",buf[p]);\n        }\n\n        if(pos==buf.size())printf(\"^\");\n        printf(\"\\n\");\n        }\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <sstream>\n#include <string>\nusing namespace std;\n\nint GetForwardLast( int cs, string t )\n{\n    if ( cs == (int)t.size() ) return cs;\n\n    bool flag = false;\n    for ( int i = cs; i < (int)t.size(); i++ )\n    {\n        if ( t[i] == ' ' )\n        {\n            if ( flag )\n            {\n                return i;\n            }\n        }\n        else\n        {\n            flag = true;\n        }\n    }\n    return (int)t.size();\n}\n\nint GetBackwardFirst( int cs, string t )\n{\n    if ( cs == 0 ) return 0;\n\n    bool flag = false;\n    for ( int i = cs-1; i >= 0; i-- )\n    {\n        if ( t[i] == ' ' )\n        {\n            if ( flag )\n            {\n                return i + 1;\n            }\n        }\n        else\n        {\n            flag = true;\n        }\n    }\n    return 0;\n}\n\nint main( void )\n{\n    string line;\n\n    getline( cin, line );\n    istringstream is( line );\n    int n;\n    is >> n;\n\n    for ( int i = 0; i < n; i++ )\n    {\n        int cs = 0;\n\n        getline( cin, line );\n        string text = line;\n\n        getline( cin, line );\n        istringstream is( line );\n        int m;\n        is >> m;\n        is.clear();\n\n        for ( int j = 0; j < m; j++ )\n        {\n            getline( cin, line );\n            string c = line;\n            istringstream is( c );\n            string c1, c2;\n            is >> c1;\n            getline( is, c2 );\n            c2 = c2.substr( 1 );\n            is.clear();\n\n            int cs_f = GetForwardLast( cs, text );\n            int cs_b = GetBackwardFirst( cs, text );\n\n            if ( c1 == \"forward\" )\n            {\n                if ( c2 == \"char\" )\n                {\n                    if ( cs + 1 <= (int)text.size() ) cs++;\n                }\n                else\n                {\n                    cs = cs_f;\n                }\n            }\n            else if ( c1 == \"backward\" )\n            {\n                if ( c2 == \"char\" )\n                {\n                    if ( cs - 1 >= 0 ) cs--;\n                }\n                else\n                {\n                    cs = cs_b;\n                }\n            }\n            else if ( c1 == \"insert\" )\n            {\n                string next;\n                string trim;\n                for ( int k = 1; k + 1 < (int)c2.size(); k++ ) trim += c2[k];\n                for ( int k = 0; k < cs; k++ ) next += text[k];\n                for ( int k = 0; k < (int)trim.size(); k++ ) next += trim[k];\n                for ( int k = cs; k < (int)text.size(); k++ ) next += text[k];\n                text = next;\n                cs += (int)trim.size();\n            }\n            else if ( c1 == \"delete\" )\n            {\n                if ( c2 == \"char\" )\n                {\n                    if ( cs < (int)text.size() )\n                    {\n                        string next = text.substr( 0, cs ) + text.substr( cs+1 );\n                        text = next;\n                    }\n                }\n                else\n                {\n                    if ( cs_f != (int)text.size() && cs < (int)text.size() )\n                    {\n                        string next = text.substr( 0, cs ) + text.substr( cs_f );\n                        text = next;\n                    }\n                }\n            }\n        }\n\n        for ( int i = 0; i <= (int)text.size(); i++ )\n        {\n            if ( i == cs ) cout << \"^\";\n            if ( i < (int)text.size() ) cout << text[i];\n        }\n        cout << endl;\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <string>\n#include <iostream>\n\nusing namespace std;\n\nint n,m;\n\nint main(void){\n\tscanf(\"%d%*c\",&n);\n\tfor(int dd=0;dd<n;dd++){\n\t\tstring str;\n\t\tgetline(cin,str);\n\t\tscanf(\"%d%*c\",&m);\n\t\tint point=0;\n\t\tfor(int i=0;i<m;i++){\n\t\t\tstring com;\n\t\t\tgetline(cin,com);\n\t\t\tif(com==\"forward char\"){\n\t\t\t\tif(point<str.size()){\n\t\t\t\t\tpoint++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(com==\"forward word\"){\n\t\t\t\tif(point<str.size()){\n\t\t\t\t\twhile(point<str.size() && str[point]==' ')point++;\n\t\t\t\t\twhile(point<str.size() && str[point]!=' ')point++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(com==\"backward char\"){\n\t\t\t\tif(point>0){\n\t\t\t\t\tpoint--;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(com==\"backward word\"){\n\t\t\t\tif(point>0){\n\t\t\t\t\twhile(point>0 && str[point]==' ')point--;\n\t\t\t\t\twhile(point>0 && str[point]!=' ')point--;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(com[0]=='i'){\n\t\t\t\tstring str2;\n\t\t\t\tstring str3;\n\t\t\t\tstring str4;\n\t\t\t\tstr2=str.substr(0,point);\n\t\t\t\tstr3=str.substr(point);\n\t\t\t\tstr4=com.substr(8,com.size()-9);\n\t\t\t\tstr=str2+str4+str3;\n\t\t\t\tpoint+=com.size()-9;\n\t\t\t\t//cout << str4 << endl;\n\t\t\t}\n\t\t\tif(com==\"delete char\"){\n\t\t\t\tif(str.size()==point)continue;\n\t\t\t\tstring str2;\n\t\t\t\tstring str3;\n\t\t\t\tstr2=str.substr(0,point);\n\t\t\t\tstr3=str.substr(point+1);\n\t\t\t\tstr=str2+str3;\n\t\t\t}\n\t\t\tif(com==\"delete word\"){\n\t\t\t\tif(str.size()==point)continue;\n\t\t\t\tint e=1;\n\t\t\t\tif(str[point]==' '){\n\t\t\t\t\twhile(point+e<str.size() && str[point+e]==' ')e++;\n\t\t\t\t}\n\t\t\t\twhile(point+e<str.size() && str[point+e]!=' ')e++;\n\n\t\t\t\tstring str2;\n\t\t\t\tstring str3;\n\t\t\t\tstr2=str.substr(0,point);\n\t\t\t\tstr3=str.substr(point+e);\n\t\t\t\tstr=str2+str3;\n\t\t\t}\n\t\t}\n\t\tstring res=\"\";\n\t\tfor(int i=0;i<str.size();i++){\n\t\t\tif(i==point)res+='^';\n\t\t\tres+=str[i];\n\t\t}\n\t\tif(str.size()==point)res+='^';\n\t\tcout << res << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<cstring>\n#include<algorithm>\n\n#define rep(i,n) for(int i=0;i<(n);i++)\n\nusing namespace std;\n\nint main(){\n\tint T; scanf(\"%d%*c\",&T);\n\twhile(T--){\n\t\tchar s[1024]; fgets(s,200,stdin);\n\t\tint len=strlen(s);\n\t\ts[--len]='\\0';\n\n\t\tint cur=0;\n\t\tint m; scanf(\"%d\",&m);\n\t\twhile(m--){\n\t\t\tchar cmd[9]; scanf(\"%s \",cmd);\n\t\t\tchar arg[200]; fgets(arg,200,stdin); arg[strlen(arg)-1]='\\0';\n\n\t\t\tif(cmd[0]=='f' && arg[0]=='c'){ // forward char\n\t\t\t\tcur=min(cur+1,len);\n\t\t\t}\n\t\t\telse if(cmd[0]=='f' && arg[0]=='w'){ // forward word\n\t\t\t\tfor(;cur<len;cur++) if(s[cur]!=' ') break;\n\t\t\t\tfor(;cur<len;cur++) if(s[cur]==' ') break;\n\t\t\t}\n\t\t\telse if(cmd[0]=='b' && arg[0]=='c'){ // backward char\n\t\t\t\tcur=max(cur-1,0);\n\t\t\t}\n\t\t\telse if(cmd[0]=='b' && arg[0]=='w'){ // backward word\n\t\t\t\tfor(;cur>0;cur--) if(s[cur-1]!=' ') break;\n\t\t\t\tfor(;cur>0;cur--) if(s[cur-1]==' ') break;\n\t\t\t}\n\t\t\telse if(cmd[0]=='d' && arg[0]=='c'){ // delete char\n\t\t\t\tif(cur<len){\n\t\t\t\t\tfor(int i=cur;i<len;i++) s[i]=s[i+1];\n\t\t\t\t\tlen--;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(cmd[0]=='d' && arg[0]=='w'){ // delete word\n\t\t\t\tif(cur<len){\n\t\t\t\t\tint i=cur;\n\t\t\t\t\tfor(;i<len;i++) if(s[i]!=' ') break;\n\t\t\t\t\tif(i<len){ // J[\\È~ª·×ÄóÈçíµÈ¢\n\t\t\t\t\t\tfor(;i<len;i++) if(s[i]==' ') break;\n\t\t\t\t\t\trep(j,len-i+1) s[cur+j]=s[i+j];\n\t\t\t\t\t\tlen-=i-cur;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse{ // insert\n\t\t\t\t// \"\" ðí\n\t\t\t\tint len2=strlen(arg)-2;\n\t\t\t\trep(i,len2) arg[i]=arg[i+1];\n\t\t\t\targ[len2]='\\0';\n\n\t\t\t\tfor(int i=len;i>=cur;i--) s[i+len2]=s[i];\n\t\t\t\trep(i,len2) s[cur+i]=arg[i];\n\t\t\t\tcur+=len2;\n\t\t\t\tlen+=len2;\n\t\t\t}\n\t\t}\n\n\t\trep(i,len+1){\n\t\t\tif(i==cur) putchar('^');\n\t\t\tif(i<len) putchar(s[i]);\n\t\t}\n\t\tputchar('\\n');\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <sstream>\n#include <fstream>\n#include <iomanip>\n#include <numeric>\n#include <map>\n#include <vector>\n#include <string>\n#include <vector>\n#include <cassert>\n#include <cmath>\n#include <cctype>\n#include <queue>\n#include <algorithm>\n#include <memory>\n#include <memory.h>\n\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int, int> P;\ntypedef pair<int, P> PP;\ntypedef pair<P,P> P2;\nconst int INF = 1 << 30;\nconst double EPS = 1E-9;\n\nsize_t cur;\nstring s;\n\nvoid fc(){\n\tif(cur < s.size() - 1){\n\t\tchar ch = s[cur];\n\t\ts[cur] = s[cur+1];\n\t\ts[cur+1] = ch;\n\t\tcur++;\n\t}\n}\n\nvoid fw(){\n\tif(cur < s.size() - 1){\n\t\tint j = cur+1;\n\t\twhile(j < s.size() && s[j] == ' ') j++;\n\t\tif(j < s.size()){\n\t\t\twhile(j < s.size() && s[j] != ' ') j++;\n\t\t}\n\t\tfor(int i = cur; i < j-1; i++){\n\t\t\ts[i] = s[i+1];\n\t\t}\n\t\ts[j-1] = '^';\n\t\tcur = j-1;\n\t}\n}\n\nvoid bc(){\n\tif(cur > 0){\n\t\tchar ch = s[cur];\n\t\ts[cur] = s[cur-1];\n\t\ts[cur-1] = ch;\n\t\tcur--;\n\t}\n}\n\nvoid bw(){\n\tif(cur != 0){\n\t\tint j = cur - 1;\n\t\twhile(j >= 0 && s[j] == ' ') j--;\n\t\twhile(j >= 0 && s[j] != ' ') j--;\n\t\tfor(int i = cur; i > j + 1; i--){\n\t\t\ts[i] = s[i-1];\n\t\t}\n\t\ts[j+1] = '^';\n\t\tcur = j+1;\n\t}\n}\n\nvoid ins(string s2){\n\ts.insert(cur, s2);\n\tcur += s2.size();\n}\n\nvoid dc(){\n\tif(cur < s.size()-1){\n\t\ts.erase(cur+1,1);\n\t}\n}\n\nvoid dw(){\n\tif(cur < s.size()){\n\t\tint j = cur + 1;\n\t\twhile(j < s.size() && s[j] == ' ') j++;\n\t\tif(j == s.size() ) return;\n\t\twhile(j < s.size() && s[j] != ' ') j++;\n\t\tstring a = s.substr(0, cur+1);\n\t\tstring b = s.substr(j, s.size() - j);\n\t\ts = a + b;\n\t}\n}\n\nint main(){\n\tint n;\n\tcin >> n;\n\tgetline(cin, s);\n\tfor(int i = 0; i < n; i++){\n\t\tint m;\n\t\tstring s2;\n\t\tgetline(cin, s2);\n\t\tcin >> m;\n\t\tgetline(cin, s);\n\t\ts = \"^\" + s2;\n\t\tcur = 0;\n\t\tfor(int j = 0; j < m; j++){\n\t\t\tstring a;\n\t\t\tgetline(cin, a);\n\t\t\tif(a == \"forward char\"){\n\t\t\t\tfc();\n\t\t\t}else if(a == \"forward word\"){\n\t\t\t\tfw();\n\t\t\t}else if(a == \"backward char\"){\n\t\t\t\tbc();\n\t\t\t}else if(a == \"backward word\"){\n\t\t\t\tbw();\n\t\t\t}else if(a[0] == 'i'){\n\t\t\t\tstring c(a.begin()+8, a.end()-1);\n\t\t\t\tins(c);\n\t\t\t}else if(a == \"delete char\"){\n\t\t\t\tdc();\n\t\t\t}else{\n\t\t\t\tdw();\n\t\t\t}\n\t\t}\n\t\tcout << s << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "/*\n\t??????????????´??¨??????\n\t????±??????????1W142208-3\n\t????????\\???2015/10/6\n\t?????????\n\t\t???????????????????????¨??????????????????????????????\n*/\n\n#include<stdio.h>\n#include<stdlib.h>\n\n#define SIZE 101\t//??????????????§????????°???\n\n//????????¨????????????????????????????????????????????????????????¨??§??????????????¢?????§???????§??????????\ntypedef struct CHAR Char;\nstruct CHAR{\n\tchar c;\t//?????????\n\tChar *prev;\t//????????????????????????next???????????´??????NULL???\n\tChar *next;\t//?¬??????????????????????prev???????????´??????NULL???\n};\n\nint Main();\t//???????????????\nint SetCHAR(Char *ch, char _c, Char *_prev, Char *_next);\t//Char?§???????????????????????????¢??°???\nint Output(Char *begin, Char *cursor);\t//??????????????????????????????begin?????????????????????next????????????????????????cursor???????????????????????????????????¢?????¬???????????????\n\nint main(int argc, char *argv[]){\n\tint n = 0, i = 0;\t//????????????????????°???\n\tif( scanf(\"%d\", &n) != 1 ){ return -1; }\n\tfor( i = 0; i < n; i++ ){ Main(); }\n\treturn 0;\n}\n\nint Main(){\n\tChar *begin, *end, *x, *t;\t//???????????????('\\0'?????????)???????????????(?????????????´??????????)?????°?????¨????????????????????°???????????????????????????????????????????????????\n\t//begin??¨end???????????????\n\tbegin = (Char*)malloc(sizeof(Char));\n\tend = (Char*)malloc(sizeof(Char));\n\tSetCHAR(begin, '\\0', NULL, end);\n\tSetCHAR(end, '\\0', begin, NULL);\n\tint numCom = 0;\t//?????????????????°???\n\tchar ch = '\\0';\t//?????????????????\\???????????\\????????????????´???¨???\n\tint i = 0, j = 0;\n\t//????????????????????\\??????\n\tx = begin;\n\tgetchar();\t//??´????????\\?????§????????????????????¨??????\n\t//???????????????1?????????????????????\n\twhile( scanf(\"%c\", &ch) == 1 && ch != '\\n' ){\n\t\tt = (Char*)malloc(sizeof(Char));\n\t\tt->c = ch;\n\t\tx->next = t;\n\t\tt->prev = x;\n\t\tx = x->next;\n\t}\n\tx->next = end;\n\tend->prev = x;\n\tx = begin->next;\t//x?????????????????????????????????\n\tif( scanf(\"%d\", &numCom) != 1 ){ return -1; }\t//??????????????°?????\\??????\n\tfor( i = 0; i < numCom; i++ ){\n\t\t//Output(begin, x);\t//???????????°??¨???\n\t\tchar mCom[10], aCom[SIZE];\t//1?????????????????????(forward, backward, insert, delete)???2?????????????????????(char, word, any-text)???\n\t\tif( scanf(\"%s %[^\\n]\", mCom, aCom) != 2 ){ return -1; }\t//aCom????????????????????????????????????????????????\n\t\t//1???????????????????????§?????¶?????????????????????2???????????????????????????????????????????????????????????????\n\t\tif( strcmp(mCom, \"forward\") == 0 ){\n\t\t\tif( strcmp(aCom, \"char\") == 0 ){\n\t\t\t\t//x???end??§???????????????x????¬?????????????????????????????????????\n\t\t\t\tif( x != end ){ x = x->next; }\n\t\t\t}else if( strcmp(aCom, \"word\") == 0 ){\n\t\t\t\t//????????????????????????????????????????????°????????????????????????????????????????????????\n\t\t\t\tif( x->c == ' ' ){ for( ; x->next != NULL && x->c == ' '; x = x->next ); }\n\t\t\t\t//???????????°????????????????????????????¬??????\\??????????????§????????????????§????????????????\n\t\t\t\tfor( ; x->next != NULL && x->c != ' '; x = x->next );\n\t\t\t}\n\t\t}else if( strcmp(mCom, \"backward\") == 0 ){\n\t\t\tif( strcmp(aCom, \"char\") == 0 ){\n\t\t\t\t//x???1????????¨begin?????¢?????¬???????????´????????´?????????x????????????????????§???????????§???????????§????????´?????????1??????????????????x???????????????????????????\n\t\t\t\tif( x->prev != begin ){ x = x->prev; }\n\t\t\t}else if( strcmp(aCom, \"word\") == 0 ){\n\t\t\t\t//????????????????????????????????????????????°?????????????????????????????????????????????\n\t\t\t\tif( x->prev->c == ' ' ){ for( ; x->prev != begin && x->prev->c == ' '; x = x->prev ); }\n\t\t\t\t//???????????°???????????????????????????????????\\??????????????§????????????????§????????????????\n\t\t\t\tfor( ; x->prev != begin && x->prev->c != ' '; x = x->prev );\n\t\t\t}\n\t\t}else if( strcmp(mCom, \"insert\") == 0 ){\n\t\t\t//?????¨?????????????????????????¨???????????????????\n\t\t\tChar *nx;\n\t\t\tnx = x;\n\t\t\tx = x->prev;\n\t\t\t//?????????????????????????????§?????????????????????????????§???????¶??????????\n\t\t\tfor( j = 1; aCom[j] != '\\\"'; j++ ){\n\t\t\t\tt = (Char*)malloc(sizeof(Char));\n\t\t\t\tt->c = aCom[j];\n\t\t\t\tx->next = t;\n\t\t\t\tt->prev = x;\n\t\t\t\tx = x->next;\n\t\t\t}\n\t\t\t//??????????????£??????\n\t\t\tnx->prev = x;\n\t\t\tx->next = nx;\n\t\t\tx = x->next;\n\t\t}else if( strcmp(mCom, \"delete\") == 0 ){\n\t\t\tif( strcmp(aCom, \"char\") == 0 ){\n\t\t\t\tif( x->next != end && x != end ){\n\t\t\t\t\t//x??¨x->next->next????????????????????????x->next????§£????????????\n\t\t\t\t\tChar *nx;\n\t\t\t\t\tnx = x->next->next;\t//2?????????????????????????????????\n\t\t\t\t\tfree(x->next);\t//??????????????????????§£????????????\n\t\t\t\t\t//??????????????£??????\n\t\t\t\t\tx->next = nx;\n\t\t\t\t\tnx->prev = x;\n\t\t\t\t}\n\t\t\t}else if( strcmp(aCom, \"word\") == 0 ){\n\t\t\t\t//1???????????????(begin?????????)????¨??????????????????????????????????????????????????????????????????¨??£????????????\n\t\t\t\t//??????????????????????????????????????¨???????????????????????????????????´???????????????????????????\n\t\t\t\tChar *temp;\n\t\t\t\tfor( temp = x; temp != end; temp = temp->next ){\n\t\t\t\t\tif( temp->c != ' ' ){ break; }\n\t\t\t\t}\n\t\t\t\tif( temp != end ){\n\t\t\t\t\tChar *bx;\n\t\t\t\t\tbx = x->prev;\n\t\t\t\t\tif( x->next != end && x != end ){\n\t\t\t\t\t\tif( x->c == ' ' ){\n\t\t\t\t\t\t\t//????????????????????????????????????\n\t\t\t\t\t\t\tfor( ; x != end && x->c == ' '; free(x->prev) ){ x = x->next; }\n\t\t\t\t\t\t\t//??????????????£??????\n\t\t\t\t\t\t\tbx->next = x;\n\t\t\t\t\t\t\tx->prev = bx;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//?????????????????????????????§??????????????????????????????\n\t\t\t\t\t\tfor( ; x != end && x->c != ' '; free(x->prev) ){ x = x->next; }\n\t\t\t\t\t\t//??????????????£??????\n\t\t\t\t\t\tbx->next = x;\n\t\t\t\t\t\tx->prev = bx;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tOutput(begin, x);\t//x????????¨???????????????????????????\n\tfor( x = begin; x != end; x = x->next ){\n\t\tfree(x->prev);\n\t}\n\tfree(x);\n\treturn 0;\n}\n\nint SetCHAR(Char *ch, char _c, Char *_prev, Char *_next){\n\tch->c = _c;\n\tch->next = _next;\n\tch->prev = _prev;\n\treturn 0;\n}\n\nint Output(Char *begin, Char *cursor){\n\tChar *x;\n\tfor( x = begin->next; x != NULL; x = x->next ){\n\t\tif( x == cursor ){ printf(\"^\"); }\t//???????????????????????¨?????´????????????'^'???????????????(?????????????????????'^'???????±????????????????)???\n\t\tif( x->next != NULL ){ printf(\"%c\", x->c); }\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nstatic\nchar cln[ 256 ];\n\nvoid getNextLine (\n  void\n  )\n{\n  fgets ( cln, sizeof ( cln ), stdin );\n  *( strchr ( cln, '\\n' ) ) = '\\0';\n}\n\n/** Application main entry point. */\nint main (\n  int     argc,\n  char  * argv[ ]\n  )\n{\n  int tc;\n\n  getNextLine ( );\n  tc = atoi ( cln );\n\n  while ( tc-- )\n  {\n    char    s[ 1024 ];\n    char  * c\n       ,  * e\n       ,  * p;\n    int n;\n\n    getNextLine ( );\n    strcpy ( s, cln );\n    c = s; e = s + strlen ( s );\n\n    getNextLine ( );\n    n = atoi ( cln );\n\n    while ( n-- )\n    {\n      getNextLine ( );\n\n      if ( !strcmp ( cln, \"forward char\" ) )\n      {\n        c += !!( c != e );\n      }\n      else if ( !strcmp ( cln, \"forward word\" ) )\n      {\n        while ( c != e && *c == ' ' ) ++c;\n        while ( c != e && *c != ' ' ) ++c;\n      }\n      else if ( !strcmp ( cln, \"backward char\" ) )\n      {\n        c -= !!( c != s );\n      }\n      else if ( !strcmp ( cln, \"backward word\" ) )\n      {\n        while ( c != s && c[ -1 ] == ' ' ) --c;\n        while ( c != s && c[ -1 ] != ' ' ) --c;\n      }\n      else if ( !strcmp ( cln, \"delete char\" ) )\n      {\n        for ( p = c; p != e && p + 1 != e; ++p ) p[ 0 ] = p[ 1 ];\n        e -= !!( c != e );\n      }\n      else if ( !strcmp ( cln, \"delete word\" ) )\n      {\n        size_t len;\n\n        p = c;\n        while ( p != e && *p == ' ' ) ++p;\n        while ( p != e && *p != ' ' ) ++p;\n        len = p - c;\n\n        for ( p = c; p != e && p + len != e; ++p ) p[ 0 ] = p[ len ];\n        e -= len;\n      }\n      else /* insert */\n      {\n        size_t len;\n\n        for ( p = cln + 8; *p != '\\\"'; ++p );\n        len = p - ( cln + 8 );\n\n        e += len;\n        for ( p = e; p - len != c; --p )  p[ -1 ] = p[ -( len + 1 ) ];\n\n        for ( p = c; p != c + len; ++p )  *p = cln[ 8 + ( p - c ) ];\n        c += len;\n      }\n    }\n\n    for ( p = s; ( p - 1 ) != e; ++p )\n    {\n//      if ( p == c ) putchar ( '^' );\n      if ( p != e ) putchar ( *p );\n    }\n    puts ( \"\" );\n  }\n\n  return ( 0 );\n}"
  },
  {
    "language": "C",
    "code": "/*\n\t??????????????´??¨??????\n\t????±??????????1W142208-3\n\t????????\\???2015/10/6\n\t?????????\n\t\t???????????????????????¨??????????????????????????????\n*/\n\n#include<stdio.h>\n#include<stdlib.h>\n\n#define SIZE 101\t//??????????????§????????°???\n\n//????????¨????????????????????????????????????????????????????????¨??§??????????????¢?????§???????§??????????\ntypedef struct CHAR Char;\nstruct CHAR{\n\tchar c;\t//?????????\n\tChar *prev;\t//????????????????????????next???????????´??????NULL???\n\tChar *next;\t//?¬??????????????????????prev???????????´??????NULL???\n};\n\nint Main();\t//???????????????\nint SetCHAR(Char *ch, char _c, Char *_prev, Char *_next);\t//Char?§???????????????????????????¢??°???\nint Output(Char *begin, Char *cursor);\t//??????????????????????????????begin?????????????????????next????????????????????????cursor???????????????????????????????????¢?????¬???????????????\n\nint main(int argc, char *argv[]){\n\tint n = 0, i = 0;\t//????????????????????°???\n\tif( scanf(\"%d\", &n) != 1 ){ return -1; }\n\tfor( i = 0; i < n; i++ ){ Main(); }\n\treturn 0;\n}\n\nint Main(){\n\tChar *begin, *end, *x, *t;\t//???????????????('\\0'?????????)???????????????(?????????????´??????????)?????°?????¨????????????????????°???????????????????????????????????????????????????\n\t//begin??¨end???????????????\n\tbegin = (Char*)malloc(sizeof(Char));\n\tend = (Char*)malloc(sizeof(Char));\n\tSetCHAR(begin, '\\0', NULL, end);\n\tSetCHAR(end, '\\0', begin, NULL);\n\tint numCom = 0;\t//?????????????????°???\n\tchar ch = '\\0';\t//?????????????????\\???????????\\????????????????´???¨???\n\tint i = 0, j = 0;\n\t//????????????????????\\??????\n\tx = begin;\n\tgetchar();\t//??´????????\\?????§????????????????????¨??????\n\t//???????????????1?????????????????????\n\twhile( scanf(\"%c\", &ch) == 1 && ch != '\\n' ){\n\t\tt = (Char*)malloc(sizeof(Char));\n\t\tt->c = ch;\n\t\tx->next = t;\n\t\tt->prev = x;\n\t\tx = x->next;\n\t}\n\tx->next = end;\n\tend->prev = x;\n\tx = begin->next;\t//x?????????????????????????????????\n\tif( scanf(\"%d\", &numCom) != 1 ){ return -1; }\t//??????????????°?????\\??????\n\tfor( i = 0; i < numCom; i++ ){\n\t\tchar mCom[10], aCom[SIZE];\t//1?????????????????????(forward, backward, insert, delete)???2?????????????????????(char, word, any-text)???\n\t\tif( scanf(\"%s %[^\\n]\", mCom, aCom) != 2 ){ return -1; }\t//aCom????????????????????????????????????????????????\n\t\t//1???????????????????????§?????¶?????????????????????2???????????????????????????????????????????????????????????????\n\t\tif( strcmp(mCom, \"forward\") == 0 ){\n\t\t\tif( strcmp(aCom, \"char\") == 0 ){\n\t\t\t\t//x???end??§???????????????x????¬?????????????????????????????????????\n\t\t\t\tif( x != end ){ x = x->next; }\n\t\t\t}else if( strcmp(aCom, \"word\") == 0 ){\n\t\t\t\t//????????????????????????????????????????????°????????????????????????????????????????????????\n\t\t\t\tif( x->c == ' ' ){ for( ; x->next != NULL && x->c == ' '; x = x->next ); }\n\t\t\t\t//???????????°????????????????????????????¬??????\\??????????????§????????????????§????????????????\n\t\t\t\tfor( ; x->next != NULL && x->c != ' '; x = x->next );\n\t\t\t}\n\t\t}else if( strcmp(mCom, \"backward\") == 0 ){\n\t\t\tif( strcmp(aCom, \"char\") == 0 ){\n\t\t\t\t//x???1????????¨begin?????¢?????¬???????????´????????´?????????x????????????????????§???????????§???????????§????????´?????????1??????????????????x???????????????????????????\n\t\t\t\tif( x->prev != begin ){ x = x->prev; }\n\t\t\t}else if( strcmp(aCom, \"word\") == 0 ){\n\t\t\t\t//????????????????????????????????????????????°?????????????????????????????????????????????\n\t\t\t\tif( x->prev->c == ' ' ){ for( ; x->prev != begin && x->prev->c == ' '; x = x->prev ); }\n\t\t\t\t//???????????°???????????????????????????????????\\??????????????§????????????????§????????????????\n\t\t\t\tfor( ; x->prev != begin && x->prev->c != ' '; x = x->prev );\n\t\t\t}\n\t\t}else if( strcmp(mCom, \"insert\") == 0 ){\n\t\t\t//?????¨?????????????????????????¨???????????????????\n\t\t\tChar *nx;\n\t\t\tnx = x;\n\t\t\tx = x->prev;\n\t\t\t//?????????????????????????????§?????????????????????????????§???????¶??????????\n\t\t\tfor( j = 1; aCom[j] != '\\\"'; j++ ){\n\t\t\t\tt = (Char*)malloc(sizeof(Char));\n\t\t\t\tt->c = aCom[j];\n\t\t\t\tx->next = t;\n\t\t\t\tt->prev = x;\n\t\t\t\tx = x->next;\n\t\t\t}\n\t\t\t//??????????????£??????\n\t\t\tnx->prev = x;\n\t\t\tx->next = nx;\n\t\t\tx = x->next;\n\t\t}else if( strcmp(mCom, \"delete\") == 0 ){\n\t\t\tif( strcmp(aCom, \"char\") == 0 ){\n\t\t\t\tif( x->next != end && x != end ){\n\t\t\t\t\t//x->prev??¨x->next????????????????????????x????§£????????????\n\t\t\t\t\tChar *nx;\n\t\t\t\t\tnx = x->next;\t//2?????????????????????????????????\n\t\t\t\t\tx = x->prev;\n\t\t\t\t\tfree(x->next);\t//??????????????????????§£????????????\n\t\t\t\t\t//??????????????£??????\n\t\t\t\t\tx->next = nx;\n\t\t\t\t\tnx->prev = x;\n\t\t\t\t}\n\t\t\t}else if( strcmp(aCom, \"word\") == 0 ){\n\t\t\t\t//1???????????????(begin?????????)????¨??????????????????????????????????????????????????????????????????¨??£????????????\n\t\t\t\tChar *bx;\n\t\t\t\tbx = x->prev;\n\t\t\t\tif( x->next != end && x != end ){\n\t\t\t\t\tif( x->c == ' ' ){\n\t\t\t\t\t\t//????????????????????????????????????\n\t\t\t\t\t\tfor( ; x != end && x->c == ' '; free(x->prev) ){ x = x->next; }\n\t\t\t\t\t\t//??????????????£??????\n\t\t\t\t\t\tbx->next = x;\n\t\t\t\t\t\tx->prev = bx;\n\t\t\t\t\t}\n\t\t\t\t\t//?????????????????????????????§??????????????????????????????\n\t\t\t\t\tfor( ; x != end && x->c != ' '; free(x->prev) ){ x = x->next; }\n\t\t\t\t\t//??????????????£??????\n\t\t\t\t\tbx->next = x;\n\t\t\t\t\tx->prev = bx;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tOutput(begin, x);\t//x????????¨???????????????????????????\n\treturn 0;\n}\n\nint SetCHAR(Char *ch, char _c, Char *_prev, Char *_next){\n\tch->c = _c;\n\tch->next = _next;\n\tch->prev = _prev;\n\treturn 0;\n}\n\nint Output(Char *begin, Char *cursor){\n\tChar *x;\n\tfor( x = begin->next; x != NULL; x = x->next ){\n\t\tif( x == cursor ){ printf(\"^\"); }\t//???????????????????????¨?????´????????????'^'???????????????(?????????????????????'^'???????±????????????????)???\n\t\tif( x->next != NULL ){ printf(\"%c\", x->c); }\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<string.h>\n\nvoid process_commands(char *buf, int *cursor);\nvoid print_result(char *buf, int cursor);\nvoid forward_char(char *buf, int *cursor);\nvoid forward_word(char *buf, int *cursor);\nvoid backward_char(char *buf, int *cursor);\nvoid backward_word(char *buf, int *cursor);\nvoid insert_text(char *buf, int *cursor, char *text);\nvoid delete_char(char *buf, int cursor);\nvoid delete_word(char *buf, int cursor);\n\nint main()\n{\n    char buf[1024];\n    char numbuf[8];\n    int cursor;\n    int n, m;\n    int i, j;\n\n    /*\n    cursor = 0;\n    strcpy(buf, \"Hallow, Word.\");\n    forward_char(buf, &cursor);\n    delete_word(buf, cursor);\n    insert_text(buf, &cursor, \"\\\"ello, \\\"\");\n    printf(\"%s\\n\", buf);\n    */\n\n    fgets(numbuf, sizeof(numbuf), stdin);\n    sscanf(numbuf, \"%d\", &n);\n\n    for(i = 0; i < n; i++){\n        cursor = 0;\n        fgets(buf, sizeof(buf), stdin);\n        buf[strlen(buf)-1] = '\\0';\n        fgets(numbuf, sizeof(numbuf), stdin);\n        sscanf(numbuf, \"%d\", &m);\n        for(j = 0; j < m; j++) {\n            process_commands(buf, &cursor);\n        }\n        print_result(buf, cursor);\n    }\n\n    return 0;\n}\n\nvoid process_commands(char *buf, int *cursor)\n{\n    char command[128];\n    fgets(command, sizeof(command), stdin);\n    command[strlen(command)-1] = '\\0';\n\n    if(strcmp(command, \"forward char\") == 0) forward_char(buf, cursor);\n    else if(strcmp(command, \"forward word\") == 0) forward_word(buf, cursor);\n    else if(strcmp(command, \"backward word\") == 0) backward_word(buf, cursor);\n    else if(strcmp(command, \"backward char\") == 0) backward_char(buf, cursor);\n    else if(strncmp(command, \"insert\", strlen(\"insert\")) == 0)\n        insert_text(buf, cursor, command+strlen(\"insert \"));\n    else if(strcmp(command, \"delete char\") == 0) delete_char(buf, *cursor);\n    else if(strcmp(command, \"delete word\") == 0) delete_word(buf, *cursor);\n}\n\nvoid forward_char(char *buf, int *cursor)\n{\n    if(*cursor == strlen(buf)) return;\n    (*cursor)++;\n}\n\nvoid forward_word(char *buf, int *cursor)\n{\n    int tmp;\n    for(tmp = *cursor; buf[tmp] == ' '; tmp++);\n    for(; tmp < strlen(buf); tmp++)\n        if(buf[tmp] == ' ') break;\n    *cursor = tmp;\n}\n\nvoid backward_char(char *buf, int *cursor)\n{\n    if(*cursor == 0) return;\n    (*cursor)--;\n}\n\nvoid backward_word(char *buf, int *cursor)\n{\n    int tmp;\n    if(*cursor == 0) return;\n    for(tmp = *cursor-1; buf[tmp] == ' '; tmp--);\n    for(; tmp >= 0; tmp--)\n        if(buf[tmp] == ' ') break;\n    if(tmp == 0) *cursor = tmp;\n    else *cursor = tmp+1;\n}\n\nvoid insert_text(char *buf, int *cursor, char *text_with_quote)\n{\n    char tmp[1024];\n    char text[128];\n    int len = strlen(text_with_quote) - 2;\n    int i;\n\n    for(i = 0; i < len; i++)\n        text[i] = text_with_quote[i+1];\n    text[len] = '\\0';\n    \n    len = strlen(text);\n    strcpy(tmp, buf+(*cursor));\n    strcpy(buf+(*cursor), text);\n    *cursor += len;\n    strcpy(buf+(*cursor), tmp);\n}\n\nvoid delete_char(char *buf, int cursor)\n{\n    if(cursor == strlen(buf)) return;\n    char tmp[1024];\n    strcpy(tmp, buf+cursor);\n    strcpy(buf+cursor, tmp+1);\n}\n\nvoid delete_word(char *buf, int cursor)\n{\n    int head = 0;\n    char tmp[1024];\n\n    for(head = 0; buf[cursor+head] == ' '; head++);\n    if(cursor+head == strlen(buf)) return;\n    for(; cursor+head < strlen(buf); head++)\n        if(buf[cursor+head] == ' '){head++; break;}\n\n    strcpy(tmp, buf+cursor+head);\n    strcpy(buf+cursor, tmp);\n}\n\nvoid print_result(char *buf, int cursor)\n{\n    int i;\n    for(i = 0; i < cursor; i++) putchar(buf[i]);\n    putchar('^');\n    for(; i < strlen(buf); i++) putchar(buf[i]);\n    putchar('\\n');\n}\n\n"
  },
  {
    "language": "C",
    "code": "/*\n\t??????????????´??¨??????\n\t????±??????????1W142208-3\n\t????????\\???2015/10/6\n\t?????????\n\t\t???????????????????????¨??????????????????????????????\n*/\n\n#include<stdio.h>\n#include<stdlib.h>\n\n#define SIZE 101\t//??????????????§????????°???\n\n//????????¨????????????????????????????????????????????????????????¨??§??????????????¢?????§???????§??????????\ntypedef struct CHAR Char;\nstruct CHAR{\n\tchar c;\t//?????????\n\tChar *prev;\t//????????????????????????next???????????´??????NULL???\n\tChar *next;\t//?¬??????????????????????prev???????????´??????NULL???\n};\n\nint Main();\t//???????????????\nint SetCHAR(Char *ch, char _c, Char *_prev, Char *_next);\t//Char?§???????????????????????????¢??°???\nint Output(Char *begin, Char *cursor);\t//??????????????????????????????begin?????????????????????next????????????????????????cursor???????????????????????????????????¢?????¬???????????????\n\nint main(int argc, char *argv[]){\n\tint n = 0, i = 0;\t//????????????????????°???\n\tif( scanf(\"%d\", &n) != 1 ){ return -1; }\n\tfor( i = 0; i < n; i++ ){ Main(); }\n\treturn 0;\n}\n\nint Main(){\n\tChar *begin, *end, *x, *t;\t//???????????????('\\0'?????????)???????????????(?????????????´??????????)?????°?????¨????????????????????°???????????????????????????????????????????????????\n\t//begin??¨end???????????????\n\tbegin = (Char*)malloc(sizeof(Char));\n\tend = (Char*)malloc(sizeof(Char));\n\tSetCHAR(begin, '\\0', NULL, end);\n\tSetCHAR(end, '\\0', begin, NULL);\n\tint numCom = 0;\t//?????????????????°???\n\tchar ch = '\\0';\t//?????????????????\\???????????\\????????????????´???¨???\n\tint i = 0, j = 0;\n\t//????????????????????\\??????\n\tx = begin;\n\tgetchar();\t//??´????????\\?????§????????????????????¨??????\n\t//???????????????1?????????????????????\n\twhile( scanf(\"%c\", &ch) == 1 && ch != '\\n' ){\n\t\tt = (Char*)malloc(sizeof(Char));\n\t\tt->c = ch;\n\t\tx->next = t;\n\t\tt->prev = x;\n\t\tx = x->next;\n\t}\n\tx->next = end;\n\tend->prev = x;\n\tx = begin->next;\t//x?????????????????????????????????\n\tif( scanf(\"%d\", &numCom) != 1 ){ return -1; }\t//??????????????°?????\\??????\n\tfor( i = 0; i < numCom; i++ ){\n\t\tOutput(begin, x);\n\t\tchar mCom[10], aCom[SIZE];\t//1?????????????????????(forward, backward, insert, delete)???2?????????????????????(char, word, any-text)???\n\t\tif( scanf(\"%s %[^\\n]\", mCom, aCom) != 2 ){ return -1; }\t//aCom????????????????????????????????????????????????\n\t\t//1???????????????????????§?????¶?????????????????????2???????????????????????????????????????????????????????????????\n\t\tif( strcmp(mCom, \"forward\") == 0 ){\n\t\t\tif( strcmp(aCom, \"char\") == 0 ){\n\t\t\t\t//x???end??§???????????????x????¬?????????????????????????????????????\n\t\t\t\tif( x != end ){ x = x->next; }\n\t\t\t}else if( strcmp(aCom, \"word\") == 0 ){\n\t\t\t\t//????????????????????????????????????????????°????????????????????????????????????????????????\n\t\t\t\tif( x->c == ' ' ){ for( ; x->next != NULL && x->c == ' '; x = x->next ); }\n\t\t\t\t//???????????°????????????????????????????¬??????\\??????????????§????????????????§????????????????\n\t\t\t\tfor( ; x->next != NULL && x->c != ' '; x = x->next );\n\t\t\t}\n\t\t}else if( strcmp(mCom, \"backward\") == 0 ){\n\t\t\tif( strcmp(aCom, \"char\") == 0 ){\n\t\t\t\t//x???1????????¨begin?????¢?????¬???????????´????????´?????????x????????????????????§???????????§???????????§????????´?????????1??????????????????x???????????????????????????\n\t\t\t\tif( x->prev != begin ){ x = x->prev; }\n\t\t\t}else if( strcmp(aCom, \"word\") == 0 ){\n\t\t\t\t//????????????????????????????????????????????°?????????????????????????????????????????????\n\t\t\t\tif( x->prev->c == ' ' ){ for( ; x->prev != begin && x->prev->c == ' '; x = x->prev ); }\n\t\t\t\t//???????????°???????????????????????????????????\\??????????????§????????????????§????????????????\n\t\t\t\tfor( ; x->prev != begin && x->prev->c != ' '; x = x->prev );\n\t\t\t}\n\t\t}else if( strcmp(mCom, \"insert\") == 0 ){\n\t\t\t//?????¨?????????????????????????¨???????????????????\n\t\t\tChar *nx;\n\t\t\tnx = x;\n\t\t\tx = x->prev;\n\t\t\t//?????????????????????????????§?????????????????????????????§???????¶??????????\n\t\t\tfor( j = 1; aCom[j] != '\\\"'; j++ ){\n\t\t\t\tt = (Char*)malloc(sizeof(Char));\n\t\t\t\tt->c = aCom[j];\n\t\t\t\tx->next = t;\n\t\t\t\tt->prev = x;\n\t\t\t\tx = x->next;\n\t\t\t}\n\t\t\t//??????????????£??????\n\t\t\tnx->prev = x;\n\t\t\tx->next = nx;\n\t\t\tx = x->next;\n\t\t}else if( strcmp(mCom, \"delete\") == 0 ){\n\t\t\tif( strcmp(aCom, \"char\") == 0 ){\n\t\t\t\tif( x->next != end && x != end ){\n\t\t\t\t\t//x->prev??¨x->next????????????????????????x????§£????????????\n\t\t\t\t\tChar *nx;\n\t\t\t\t\tnx = x->next;\t//2?????????????????????????????????\n\t\t\t\t\tx = x->prev;\n\t\t\t\t\tfree(x->next);\t//??????????????????????§£????????????\n\t\t\t\t\t//??????????????£??????\n\t\t\t\t\tx->next = nx;\n\t\t\t\t\tnx->prev = x;\n\t\t\t\t\tx = x->next;\n\t\t\t\t}\n\t\t\t}else if( strcmp(aCom, \"word\") == 0 ){\n\t\t\t\t//1???????????????(begin?????????)????¨??????????????????????????????????????????????????????????????????¨??£????????????\n\t\t\t\t//??????????????????????????????????????¨???????????????????????????????????´???????????????????????????\n\t\t\t\tChar *temp;\n\t\t\t\tfor( temp = x; temp != end; temp = temp->next ){\n\t\t\t\t\tif( temp->c != ' ' ){ break; }\n\t\t\t\t}\n\t\t\t\tif( temp != end ){\n\t\t\t\t\tChar *bx;\n\t\t\t\t\tbx = x->prev;\n\t\t\t\t\tif( x->next != end && x != end ){\n\t\t\t\t\t\tif( x->c == ' ' ){\n\t\t\t\t\t\t\t//????????????????????????????????????\n\t\t\t\t\t\t\tfor( ; x != end && x->c == ' '; free(x->prev) ){ x = x->next; }\n\t\t\t\t\t\t\t//??????????????£??????\n\t\t\t\t\t\t\tbx->next = x;\n\t\t\t\t\t\t\tx->prev = bx;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//?????????????????????????????§??????????????????????????????\n\t\t\t\t\t\tfor( ; x != end && x->c != ' '; free(x->prev) ){ x = x->next; }\n\t\t\t\t\t\t//??????????????£??????\n\t\t\t\t\t\tbx->next = x;\n\t\t\t\t\t\tx->prev = bx;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tOutput(begin, x);\t//x????????¨???????????????????????????\n\tfor( x = begin; x != end; x = x->next ){\n\t\tfree(x->prev);\n\t}\n\tfree(x);\n\treturn 0;\n}\n\nint SetCHAR(Char *ch, char _c, Char *_prev, Char *_next){\n\tch->c = _c;\n\tch->next = _next;\n\tch->prev = _prev;\n\treturn 0;\n}\n\nint Output(Char *begin, Char *cursor){\n\tChar *x;\n\tfor( x = begin->next; x != NULL; x = x->next ){\n\t\tif( x == cursor ){ printf(\"^\"); }\t//???????????????????????¨?????´????????????'^'???????????????(?????????????????????'^'???????±????????????????)???\n\t\tif( x->next != NULL ){ printf(\"%c\", x->c); }\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n\n#define N 1000\n#define DEBUG 0\nint main(void){\n  char s[N];\n  int cursor;\n  int line, loop;\n  int M,    cmdN;\n  char cmd[120];\n  char buf2[1000];\n  int i,j,k,len;\n\n  scanf(\"%d \",&line);\n  //  printf(\"line =%d\\n\",line);\n  for( loop=0;loop<line;loop++){\n    fgets( s,N,stdin);\n    len = strlen( s );\n    s[len-1]='\\0';    \n    len = strlen( s );\n\n    scanf(\"%d \",&M);\n    cursor=0;\n    for( cmdN=0;cmdN<M;cmdN++){\n      fgets( cmd,120,stdin);\n      /*      printf(\"\\tcmd=%s cursor=%d\",cmd,cursor); */\n      if( cmd[0]=='f' ){\n\tif( cmd[8]=='c' ){\n\t  if( cursor<len )\n\t    cursor++;\n\t}else{\n\t  if( s[cursor]!=' ' )\n\t    for(  ;s[cursor]!=' '&&cursor <len;  cursor++ );\n\t  else{\n\t    while( s[cursor]==' '&&cursor<len ) cursor++  ;\n\t    for(  ;s[cursor]!=' '&&cursor <len;  cursor++ );\n\t  }\n\t}\n      } else if( cmd[0]=='b' ){\n\tif( cmd[9]=='c' ){\n\t  if( cursor>0 )\n\t    cursor--;\n\t}else{\n\t  if( s[cursor]!=' ' ){\n\t    for(  ;s[cursor]!=' '&&cursor >0;  cursor-- );\n\t    if( cursor!=0 )\n\t      cursor++;\n\t  } else {\n\t    while( s[cursor]==' '&&cursor!=0 ) cursor-- ;\n\t    for(  ;s[cursor]!=' '&&cursor >0;  cursor-- );\n\t    if( cursor!=0 ) cursor++;\n\t  }\n\t}\n      } else if( cmd[0]=='d' ){\n\tif( cmd[7]=='c' ){\n\t  if( cursor!=len ){\n\t    for(i=cursor;i<len;i++)\n\t      s[i]=s[i+1];\n\t    len--;\n\t  }\n\t}else{\n\t  i=cursor;\n\t  if( i!=len ){\n\t    for(j=i; s[j]!=' '&&j<len;j++ );\n\n\t    if( s[j]=='\\0' ){\n\t      s[i-1]='\\0';\n\t    } else {\n\t      for(k=0;k<j;k++)\n\t\ts[i+k] = s[j+k];\n\t    }\n\t  }\n\t  if(len>=j)\t  len-=j;\n\t}\n      }else{\n\tfor( j=0;cmd[j]!='\"';j++ );\n\ti=0;\n\twhile( 1 ){\n\t  buf2[i] = s[cursor+i];\n\t  if( buf2[i]=='\\0' )\n\t    break;\n\t  i++;\n\t}\n\tk = cursor;\n\twhile( cmd[j]!='\"' ) j++;\n\tj++;\n\twhile( 1 ){\n\t  s[k]= cmd[j++];\n\t  k++;\n\t  if( cmd[j]=='\"' ){\n\t    cursor=k;\n\t    break;\n\t  }\n\t}\n\ti=0;\n\twhile( 1 ){\n\t  s[k] = buf2[i];\n\t  if( s[k]=='\\0' ){\n\t    len = k;\n\t    break;\n\t  }\n\t  k++;i++;\n\t}\n      }\n      if( DEBUG==1 ){\n\tfor( i=0;i<=len;i++ ){\n\t  if( i==cursor )\n\t    printf(\"^\");\n\t  if( i<len )\n\t    printf(\"%c\",s[i]);\n\t}\n\tprintf(\"\\tcursor=%d len=%d\\n\",cursor,len);\n      }\n    }\n    for( i=0;i<=len;i++ ){\n      if( i==cursor )\n\tprintf(\"^\");\n      if( i<len )\n\tprintf(\"%c\",s[i]);\n    }\n    printf(\"\\n\");\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<string.h>\n\nchar text[101];\nint cursor,length=0;\n\nvoid initialize()\n{\n    int i;\n    for(i=0;i<101;i++)\n    {\n        text[i]=0;\n    }\n}\n\nvoid run(int first,int second)\n{\n    int i;\n\n    if(first=='f')\n    {\n        if(second=='c')\n        {\n            if(cursor!=length)\n            {\n                cursor++;\n            }\n        }\n        else if(second=='w')\n        {\n            for(i=cursor+2;i<strlen(text);i++)\n            {\n                if(text[i]==32)\n                {\n                    break;\n                }\n            }\n            cursor=i;\n        }\n    }\n    else if(first=='b')\n    {\n        if(second=='c')\n        {\n            if(cursor!=0)\n            {\n                cursor--;\n            }\n        }\n        else if(second=='w')\n        {\n            for(i=cursor-1;i>=0;i--)\n            {\n                if(text[i]==32)\n                {\n                    break;\n                }\n            }\n            cursor=i+1;\n        }\n    }\n    else if(first=='d')\n    {\n        if(second=='c')\n        {\n            int c;\n            for(i=cursor;i<length;i++)\n            {\n                text[i]=text[i+1];\n                if(text[i+1]==0)\n                {\n                    break;\n                }\n            }\n            length--;\n        }\n        else if(second=='w')\n        {\n            int len;\n            for(i=cursor;i<length;i++)\n            {\n                if(text[i]==32)\n                {\n                    break;\n                }\n            }\n            len=i-cursor;\n            for(i=cursor;i<length;i++)\n            {\n                text[i]=text[i+len+1];\n                if(text[i+len+1]==0)\n                {\n                    break;\n                }\n            }\n            length=strlen(text);\n        }\n    }\n}\n\nint main(void)\n{\n    int n,m;\n    int i,j,k;\n\n    scanf(\"%d\\n\",&n);\n\n    for(i=0;i<n;i++)\n    {\n        initialize();\n        cursor=0;\n        gets(text);\n\n        length=strlen(text);\n\n        scanf(\"%d%*c\",&m);\n\n        for(j=0;j<m;j++)\n        {\n            char command[100]={};\n            scanf(\"%s%*c\",command);\n\n            if(command[0]=='i')\n            {\n                char plus[101]={};\n                char temporary[101]={};\n\n                scanf(\"%*c\");\n                gets(plus);\n\n                if(cursor>0)\n                {\n                    strcpy(temporary,text);\n                    strncpy(text,temporary,cursor-1);\n                    text[cursor]='\\0';\n                    strcat(text,plus);\n\n                    int len=strlen(text)-1;\n                    int k,l=cursor;\n                    for(k=len;k<101;k++)\n                    {\n                        text[k]=temporary[l];\n                        if(temporary[l]==0)\n                        {\n                            break;\n                        }\n                        l++;\n                    }\n                }\n                else\n                {\n                    strncpy(temporary,plus,strlen(plus)-1);\n                    temporary[strlen(plus)]='\\0';\n                    strcat(temporary,text);\n                    strcpy(text,temporary);\n                }\n                cursor+=strlen(plus)-1;\n            }\n            else\n            {\n                char command2[10];\n                scanf(\"%s%*c\",command2);\n                run(command[0],command2[0]);\n            }\n\n            for(k=0;k<cursor;k++)\n            {\n                printf(\"%c\",text[k]);\n            }\n            printf(\"^\");\n            for(k=cursor;k<strlen(text)+1;k++)\n            {\n                printf(\"%c\",text[k]);\n            }\n            printf(\"\\n\");\n        }\n\n        for(k=0;k<cursor;k++)\n        {\n            printf(\"%c\",text[k]);\n        }\n        printf(\"^\");\n        for(k=cursor;k<strlen(text)+1;k++)\n        {\n            printf(\"%c\",text[k]);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}"
  },
  {
    "language": "C",
    "code": "char t[1002],m[9],o[999];c,n,w;M(d){t[c]=t[c+d];t[c+d]='^';c+=d;}D(){memmove(t+c+1,t+c+2,strlen(t+c+1));}main(l){scanf(\"%*d\");for(;t[1]=0,getchar(),~scanf(\"%[^\\n]\",t+1);){t[0]='^';c=0;scanf(\"%d\",&n);for(;n--;){scanf(\"%s\",m);if(strcmp(m,\"insert\")==0){scanf(\" \\\"%[^\\\"]\\\"\",o);l=strlen(o);memmove(t+c+l,t+c,strlen(t+c)+1);memcpy(t+c,o,l);c+=l;}else{scanf(\"%s\",o);w=*o-'c';if(strcmp(m,\"forward\")==0){if(w){for(;t[c+1]==' ';)M(1);for(;t[c+1]&&t[c+1]!=' ';)M(1);}else{if(t[c+1])M(1);}}else if(strcmp(m,\"backward\")==0){if(w){for(;c>0&&t[c+1]==' ';)M(-1);for(;c>0&&t[c-1]!=' ';)M(-1);}else{if(c>0)M(-1);}}else{if(w){for(;t[c+1]==' ';)D();for(;t[c+1]&&t[c+1]!=' ';)D();}else{if(t[c+1])D();}}}}puts(t);}}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar buffer[1024];\nint cursor = 0;\n\ntypedef struct{\n    char cmd[24];\n    char any_text[101];\n}Command;\n\nvoid exec_cmd(Command command);\n\nint main(void)\n{\n    int n, i;\n\n    scanf(\"%d\", &n);\n    getchar();\n    for(i = 0; i < n; i++){\n        cursor = 0;\n        int num_cmd;\n        Command command;\n\n        fgets(buffer, sizeof(buffer), stdin);\n        buffer[strlen(buffer) - 1] = '\\0';\n        scanf(\"%d\", &num_cmd);\n        getchar();\n\n        int j;\n        for(j = 0; j < num_cmd; j++){\n            char temp[256];\n            fgets(temp, sizeof(temp), stdin);\n            int k;\n            for(k = 0; k < strlen(temp); k++){\n                if(temp[k] == '\\n')\n                    temp[k] = '\\0';\n            }\n\n            if(temp[0] != 'i'){\n                strcpy(command.cmd, temp);\n            }else{\n                char *p = temp;\n                while(*p != ' ') p++;\n                *p = '\\0';\n                p += 2;\n                char *start = p;\n                while(*p != '\"') p++;\n                *p = '\\0';\n                strcpy(command.cmd, temp);\n                strcpy(command.any_text, start);\n            }\n\n            exec_cmd(command);\n            //int len = strlen(buffer);\n            //for(k = 0; k <= len; k++){\n            //    if(cursor == k)\n            //        putchar('^');\n            //    putchar(buffer[k]);\n            //}\n            //printf(\"\\n\");\n            //printf(\"\\n\");\n        }\n        int len = strlen(buffer);\n        for(j = 0; j <= len; j++){\n            if(cursor == j)\n                putchar('^');\n            putchar(buffer[j]);\n        }\n        printf(\"\\n\");\n    }\n\n    return 0;\n}\n\nvoid exec_cmd(Command command)\n{\n    if(strcmp(command.cmd, \"forward char\") == 0){\n        if(buffer[cursor] != '\\0')\n            cursor++;\n    }\n\n    else if(strcmp(command.cmd, \"forward word\") == 0){\n        while(buffer[cursor] == ' ' && buffer[cursor] != '\\0'){\n            cursor++;\n        }\n        while(buffer[cursor] != ' ' && buffer[cursor] != '\\0'){\n            cursor++;\n        }\n    }\n\n    else if(strcmp(command.cmd, \"backward char\") == 0){\n        if(cursor != 0)\n            cursor--;\n    }\n\n    else if(strcmp(command.cmd, \"backward word\") == 0){\n        while(buffer[cursor] == ' ' && cursor != 0){\n            cursor--;\n        }\n        while(buffer[cursor] != ' ' && cursor != 0){\n            cursor--;\n        }\n    }\n\n    else if(strcmp(command.cmd, \"insert\") == 0){\n        char temp[1024];\n        strcpy(temp, buffer);\n        temp[cursor] = '\\0';\n        strcat(temp, command.any_text);\n        strcat(temp, buffer + cursor);\n        strcpy(buffer, temp);\n        cursor += strlen(command.any_text);\n    }\n\n    else if(strcmp(command.cmd, \"delete char\") == 0){\n        if(buffer[cursor] != '\\0'){\n            char *p = buffer + cursor + 1;\n            buffer[cursor] = '\\0';\n            strcat(buffer, p);\n        }\n    }\n\n    else if(strcmp(command.cmd, \"delete word\") == 0){\n        char temp[1024];\n        strcpy(temp, buffer);\n        char *p = temp + cursor;\n        if(*p == ' '){\n            *p = '\\0';\n            p++;\n            while(*p == ' '){\n                p++;\n            }\n            strcat(temp, p);\n        }else if(*p != '\\0'){\n            *p = '\\0';\n            p++;\n            while(*p != ' ' && *p != '\\0'){\n                p++;\n            }\n            strcat(temp, p);\n        }\n\n        strcpy(buffer, temp);\n    }\n\n    else{\n        fprintf(stderr, \"command %s not found\\n\", command.cmd);\n        exit(1);\n    }\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nstatic\nchar cln[ 256 ];\n\nvoid getNextLine (\n  void\n  )\n{\n  fgets ( cln, sizeof ( cln ), stdin );\n  *( strchr ( cln, '\\n' ) ) = '\\0';\n}\n\n/** Application main entry point. */\nint main (\n  int     argc,\n  char  * argv[ ]\n  )\n{\n  int tc;\n\n  getNextLine ( );\n  tc = atoi ( cln );\n\n  while ( tc-- )\n  {\n    char    s[ 1024 ];\n    char  * c\n       ,  * e\n       ,  * p;\n    int n;\n\n    getNextLine ( );\n    strcpy ( s, cln );\n    c = s; e = s + strlen ( s );\n\n    getNextLine ( );\n    n = atoi ( cln );\n\n    while ( n-- )\n    {\n      getNextLine ( );\n\n      if ( !strcmp ( cln, \"forward char\" ) )\n      {\n        c += !!( c != e );\n      }\n      else if ( !strcmp ( cln, \"forward word\" ) )\n      {\n        while ( c != e && *c == ' ' ) ++c;\n        while ( c != e && *c != ' ' ) ++c;\n      }\n      else if ( !strcmp ( cln, \"backward char\" ) )\n      {\n        c -= !!( c != s );\n      }\n      else if ( !strcmp ( cln, \"backward word\" ) )\n      {\n        while ( c != s && c[ -1 ] == ' ' ) --c;\n        while ( c != s && c[ -1 ] != ' ' ) --c;\n      }\n      else if ( !strcmp ( cln, \"delete char\" ) )\n      {\n        for ( p = c; p != e && p + 1 != e; ++p ) p[ 0 ] = p[ 1 ];\n        e -= !!( c != e );\n      }\n      else if ( !strcmp ( cln, \"delete word\" ) )\n      {\n        size_t len;\n\n        p = c;\n        while ( p != e && *p == ' ' ) ++p;\n        while ( p != e && *p != ' ' ) ++p;\n        len = p - c;\n\n        for ( p = c; p != e && p + len != e; ++p ) p[ 0 ] = p[ len ];\n        e -= len;\n      }\n      else if ( !strncmp ( cln, \"insert \\\"\", 8 ) )\n      {\n        size_t len;\n\n        for ( p = cln + 8; *p != '\\\"'; ++p );\n        len = p - ( cln + 8 );\n\n        e += len;\n        for ( p = e; p - len != c; --p )  p[ -1 ] = p[ -( len + 1 ) ];\n\n        for ( p = c; p != c + len; ++p )  *p = cln[ 8 + ( p - c ) ];\n        c += len;\n      }\n    }\n\n    for ( p = s; ( p - 1 ) != e; ++p )\n    {\n      if ( p == c ) putchar ( '^' );\n      if ( p != e ) putchar ( *p );\n    }\n    puts ( \"\" );\n  }\n\n  return ( 0 );\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n\n#define N 1000\n\nint main(void){\n  char s[N];\n  int cursor;\n  int line, loop;\n  int M,    cmdN;\n  char cmd[120];\n  char buf[110];\n  char buf2[1000];\n  int i,j,k,len;\n\n  scanf(\"%d \",&line);\n  //  printf(\"line =%d\\n\",line);\n  for( loop=0;loop<line;loop++){\n    fgets( s,N,stdin);\n    len = strlen( s );\n    s[len-1]='\\0';    \n    len = strlen( s );\n\n    scanf(\"%d \",&M);\n    cursor=0;\n    for( cmdN=0;cmdN<M;cmdN++){\n      fgets( cmd,120,stdin);\n      /*      printf(\"\\tcmd=%s cursor=%d\",cmd,cursor); */\n      if( cmd[0]=='f' ){\n\tif( cmd[8]=='c' ){\n\t  if( cursor<len )\n\t    cursor++;\n\t}else{\n\t  if( s[cursor]!=' ' )\n\t    for(  ;s[cursor]!=' '&&cursor <len;  cursor++ );\n\t  else{\n\t    while( s[cursor]==' '&&cursor<len ) cursor++  ;\n\t    for(  ;s[cursor]!=' '&&cursor <len;  cursor++ );\n\t  }\n\t}\n      } else if( cmd[0]=='b' ){\n\tif( cmd[9]=='c' ){\n\t  if( cursor>0 )\n\t    cursor--;\n\t}else{\n\t  if( s[cursor]!=' ' ){\n\t    for(  ;s[cursor]!=' '&&cursor >0;  cursor-- );\n\t    if( cursor!=0 )\n\t      cursor++;\n\t  } else {\n\t    while( s[cursor]==' '&&cursor!=0 ) cursor-- ;\n\t    for(  ;s[cursor]!=' '&&cursor >0;  cursor-- );\n\t    if( cursor!=0 ) cursor++;\n\t  }\n\t}\n      } else if( cmd[0]=='d' ){\n\tif( cmd[7]=='c' ){\n\t  if( cursor!=len ){\n\t    for(i=cursor;i<len;i++)\n\t      s[i]=s[i+1];\n\t    len--;\n\t  }\n\t}else{\n\t  i=cursor;\n\t  if( i!=len ){\n\t    for(j=i; s[j]!=' '&&j<len;j++ );\n\n\t    if( s[j]=='\\0' ){\n\t      s[i-1]='\\0';\n\t    } else {\n\t      for(k=0;k<j;k++)\n\t\ts[i+k] = s[j+k];\n\t    }\n\t  }\n\t  if(len>=j)\t  len-=j;\n\t}\n      }else{\n\tfor( j=0;cmd[j]!='\"';j++ );\n\ti=0;\n\twhile( 1 ){\n\t  buf2[i] = s[cursor+i];\n\t  if( buf2[i]=='\\0' )\n\t    break;\n\t  i++;\n\t}\n\tk = cursor;\n\twhile( cmd[j]!='\"' ) j++;\n\tj++;\n\twhile( 1 ){\n\t  s[k]= cmd[j++];\n\t  k++;\n\t  if( cmd[j]=='\"' ){\n\t    cursor=k;\n\t    break;\n\t  }\n\t}\n\ti=0;\n\twhile( 1 ){\n\t  s[k] = buf2[i];\n\t  if( s[k]=='\\0' ){\n\t    len = k;\n\t    break;\n\t  }\n\t  k++;i++;\n\t}\n      }\n    }\n    for( i=0;i<=len;i++ ){\n      if( i==cursor )\n\tprintf(\"^\");\n      if( i<len )\n\tprintf(\"%c\",s[i]);\n    }\n    /*    printf(\"\\tcursor=%d len=%d\\n\",cursor,len);*/\n    printf(\"\\n\");\n    // printf(\"********************************************************\\n\");\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "/* AOJ 1101 A Simple Offline Text Editor */\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n/* #define DEBUG */\n\n#ifdef DEBUG\n#define DEBUG_PRINT do {print_str(text, len, cursor);} while(0)\n#else\n#define DEBUG_PRINT (0)\n#endif\n\nvoid print_str(char *s, int len, int cursor);\n\nint\nmain(void)\n{\n    int n_texts;\n    char s[BUFSIZ];\n\n    fgets(s, BUFSIZ, stdin);\n    n_texts = atoi(s);\n\n    while (n_texts--) {\n        char text[BUFSIZ];\n        int len;\n        int cursor = 0;\n        int n_commands;\n\n        fgets(text, BUFSIZ, stdin);\n        len = strlen(text);\n        if (text[len - 1] == '\\n') {\n            text[len - 1] = '\\0';\n            len--;\n        }\n        if (strchr(text, '\\r')) puts(\"BANG!\");\n\n        fgets(s, BUFSIZ, stdin);\n        n_commands = atoi(s);\n        while (n_commands--) {\n            fgets(s, BUFSIZ, stdin);\n            if (strstr(s, \"forward char\") == s) {\n                if (cursor < len) cursor++;\n                DEBUG_PRINT;\n            } else if (strstr(s, \"forward word\") == s) {\n                while (cursor < len && text[cursor] == ' ')\n                    cursor++;\n                while (cursor < len && text[cursor] != ' ')\n                    cursor++;\n                DEBUG_PRINT;\n            } else if (strstr(s, \"backward char\") == s) {\n                if (cursor > 0) cursor--;\n                DEBUG_PRINT;\n            } else if (strstr(s, \"backward word\") == s) {\n                while (cursor > 0 && text[cursor - 1] == ' ')\n                    cursor--;\n                while (cursor > 0 && text[cursor - 1] != ' ')\n                    cursor--;\n                DEBUG_PRINT;\n            } else if (strstr(s, \"insert \") == s) {\n                char temp[BUFSIZ];\n                char *start = strchr(s, '\"') + 1;\n                char *end = strchr(start, '\"');\n                int len_arg = (int)(end - start);\n\n                if (cursor == len) {\n                    strncat(text, start, len_arg);\n                } else {\n                    strcpy(temp, text);\n\n                    strncpy(text + cursor, start, len_arg);\n                    text[cursor + len_arg] = '\\0';\n                    strcat(text, temp + cursor);\n                }\n\n                cursor += len_arg;\n                len += len_arg;\n                DEBUG_PRINT;\n            } else if (strstr(s, \"delete char\") == s) {\n                if (cursor < len) {\n                    char temp[BUFSIZ];\n\n                    strcpy(temp, text);\n\n                    text[cursor] = '\\0';\n                    strcat(text, temp + cursor + 1);\n\n                    len--;\n                }\n                DEBUG_PRINT;\n            } else if (strstr(s, \"delete word\") == s) {\n                if (cursor < len) {\n                    char temp[BUFSIZ];\n                    int word_end = cursor;\n                    int len_word = 0;\n\n                    while (word_end < len && text[word_end] == ' ') {\n                        word_end++;\n                        len_word++;\n                    }\n\n                    while (word_end < len && text[word_end] != ' ') {\n                        word_end++;\n                        len_word++;\n                    }\n\n                    strcpy(temp, text);\n                    strcpy(text + cursor, temp + word_end);\n                    len -= len_word;\n                }\n                DEBUG_PRINT;\n            }\n        }\n        print_str(text, len, cursor);\n    }\n\n    return 0;\n}\n\nvoid\nprint_str(char *s, int len, int cursor)\n{\n    int i;\n\n    if (len == 0) {\n        putchar('^');\n    } else {\n        for (i = 0; i < len; i++) {\n            if (i == cursor) putchar('^');\n            putchar(s[i]);\n        }\n\n        if (cursor == len) putchar('^');\n    }\n}"
  },
  {
    "language": "C",
    "code": "/*\n\t??????????????´??¨??????\n\t????±??????????1W142208-3\n\t????????\\???2015/10/6\n\t?????????\n\t\t???????????????????????¨??????????????????????????????\n*/\n\n#include<stdio.h>\n#include<stdlib.h>\n\n#define SIZE 101\t//??????????????§????????°???\n\n//????????¨????????????????????????????????????????????????????????¨??§??????????????¢?????§???????§??????????\ntypedef struct CHAR Char;\nstruct CHAR{\n\tchar c;\t//?????????\n\tChar *prev;\t//????????????????????????next???????????´??????NULL???\n\tChar *next;\t//?¬??????????????????????prev???????????´??????NULL???\n};\n\nint Main();\t//???????????????\nint SetCHAR(Char *ch, char _c, Char *_prev, Char *_next);\t//Char?§???????????????????????????¢??°???\nint Output(Char *begin, Char *cursor);\t//??????????????????????????????begin?????????????????????next????????????????????????cursor???????????????????????????????????¢?????¬???????????????\n\nint main(int argc, char *argv[]){\n\tint n = 0, i = 0;\t//????????????????????°???\n\tif( scanf(\"%d\", &n) != 1 ){ return -1; }\n\tfor( i = 0; i < n; i++ ){ Main(); }\n\treturn 0;\n}\n\nint Main(){\n\tChar *begin, *end, *x, *t;\t//???????????????('\\0'?????????)???????????????(?????????????´??????????)?????°?????¨????????????????????°???????????????????????????????????????????????????\n\t//begin??¨end???????????????\n\tbegin = (Char*)malloc(sizeof(Char));\n\tend = (Char*)malloc(sizeof(Char));\n\tSetCHAR(begin, '\\0', NULL, end);\n\tSetCHAR(end, '\\0', begin, NULL);\n\tint numCom = 0;\t//?????????????????°???\n\tchar ch = '\\0';\t//?????????????????\\???????????\\????????????????´???¨???\n\tint i = 0, j = 0;\n\t//????????????????????\\??????\n\tx = begin;\n\tgetchar();\t//??´????????\\?????§????????????????????¨??????\n\t//???????????????1?????????????????????\n\twhile( scanf(\"%c\", &ch) == 1 && ch != '\\n' ){\n\t\tt = (Char*)malloc(sizeof(Char));\n\t\tt->c = ch;\n\t\tx->next = t;\n\t\tt->prev = x;\n\t\tx = x->next;\n\t}\n\tx->next = end;\n\tend->prev = x;\n\tx = begin->next;\t//x?????????????????????????????????\n\tif( scanf(\"%d\", &numCom) != 1 ){ return -1; }\t//??????????????°?????\\??????\n\tfor( i = 0; i < numCom; i++ ){\n\t\tchar mCom[10], aCom[SIZE];\t//1?????????????????????(forward, backward, insert, delete)???2?????????????????????(char, word, any-text)???\n\t\tif( scanf(\"%s %[^\\n]\", mCom, aCom) != 2 ){ return -1; }\t//aCom????????????????????????????????????????????????\n\t\t//1???????????????????????§?????¶?????????????????????2???????????????????????????????????????????????????????????????\n\t\tif( strcmp(mCom, \"forward\") == 0 ){\n\t\t\tif( strcmp(aCom, \"char\") == 0 ){\n\t\t\t\t//x???end??§???????????????x????¬?????????????????????????????????????\n\t\t\t\tif( x != end ){ x = x->next; }\n\t\t\t}else if( strcmp(aCom, \"word\") == 0 ){\n\t\t\t\t//????????????????????????????????????????????°????????????????????????????????????????????????\n\t\t\t\tif( x->c == ' ' ){ for( ; x->next != NULL && x->c == ' '; x = x->next ); }\n\t\t\t\t//???????????°????????????????????????????¬??????\\??????????????§????????????????§????????????????\n\t\t\t\tfor( ; x->next != NULL && x->c != ' '; x = x->next );\n\t\t\t}\n\t\t}else if( strcmp(mCom, \"backward\") == 0 ){\n\t\t\tif( strcmp(aCom, \"char\") == 0 ){\n\t\t\t\t//x???1????????¨begin?????¢?????¬???????????´????????´?????????x????????????????????§???????????§???????????§????????´?????????1??????????????????x???????????????????????????\n\t\t\t\tif( x->prev != begin ){ x = x->prev; }\n\t\t\t}else if( strcmp(aCom, \"word\") == 0 ){\n\t\t\t\t//????????????????????????????????????????????°?????????????????????????????????????????????\n\t\t\t\tif( x->prev->c == ' ' ){ for( ; x->prev != begin && x->prev->c == ' '; x = x->prev ); }\n\t\t\t\t//???????????°???????????????????????????????????\\??????????????§????????????????§????????????????\n\t\t\t\tfor( ; x->prev != begin && x->prev->c != ' '; x = x->prev );\n\t\t\t}\n\t\t}else if( strcmp(mCom, \"insert\") == 0 ){\n\t\t\t//?????¨?????????????????????????¨???????????????????\n\t\t\tChar *nx;\n\t\t\tnx = x;\n\t\t\tx = x->prev;\n\t\t\t//?????????????????????????????§?????????????????????????????§???????¶??????????\n\t\t\tfor( j = 1; aCom[j] != '\\\"'; j++ ){\n\t\t\t\tt = (Char*)malloc(sizeof(Char));\n\t\t\t\tt->c = aCom[j];\n\t\t\t\tx->next = t;\n\t\t\t\tt->prev = x;\n\t\t\t\tx = x->next;\n\t\t\t}\n\t\t\t//??????????????£??????\n\t\t\tnx->prev = x;\n\t\t\tx->next = nx;\n\t\t\tx = x->next;\n\t\t}else if( strcmp(mCom, \"delete\") == 0 ){\n\t\t\tif( strcmp(aCom, \"char\") == 0 ){\n\t\t\t\tif( x->next != end && x != end ){\n\t\t\t\t\t//x->prev??¨x->next????????????????????????x????§£????????????\n\t\t\t\t\tChar *nx;\n\t\t\t\t\tnx = x->next;\t//2?????????????????????????????????\n\t\t\t\t\tx = x->prev;\n\t\t\t\t\tfree(x->next);\t//??????????????????????§£????????????\n\t\t\t\t\t//??????????????£??????\n\t\t\t\t\tx->next = nx;\n\t\t\t\t\tnx->prev = x;\n\t\t\t\t\tx = x->next;\n\t\t\t\t}\n\t\t\t}else if( strcmp(aCom, \"word\") == 0 ){\n\t\t\t\t//1???????????????(begin?????????)????¨??????????????????????????????????????????????????????????????????¨??£????????????\n\t\t\t\t//??????????????????????????????????????¨???????????????????????????????????´???????????????????????????\n\t\t\t\tChar *temp;\n\t\t\t\tfor( temp = x; temp != end; temp = temp->next ){\n\t\t\t\t\tif( temp->c != ' ' ){ break; }\n\t\t\t\t}\n\t\t\t\tif( temp != end ){\n\t\t\t\t\tChar *bx;\n\t\t\t\t\tbx = x->prev;\n\t\t\t\t\tif( x->next != end && x != end ){\n\t\t\t\t\t\tif( x->c == ' ' ){\n\t\t\t\t\t\t\t//????????????????????????????????????\n\t\t\t\t\t\t\tfor( ; x != end && x->c == ' '; free(x->prev) ){ x = x->next; }\n\t\t\t\t\t\t\t//??????????????£??????\n\t\t\t\t\t\t\tbx->next = x;\n\t\t\t\t\t\t\tx->prev = bx;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//?????????????????????????????§??????????????????????????????\n\t\t\t\t\t\tfor( ; x != end && x->c != ' '; free(x->prev) ){ x = x->next; }\n\t\t\t\t\t\t//??????????????£??????\n\t\t\t\t\t\tbx->next = x;\n\t\t\t\t\t\tx->prev = bx;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tOutput(begin, x);\t//x????????¨???????????????????????????\n\tfor( x = begin; x != end; x = x->next ){\n\t\tfree(x->prev);\n\t}\n\tfree(x);\n\treturn 0;\n}\n\nint SetCHAR(Char *ch, char _c, Char *_prev, Char *_next){\n\tch->c = _c;\n\tch->next = _next;\n\tch->prev = _prev;\n\treturn 0;\n}\n\nint Output(Char *begin, Char *cursor){\n\tChar *x;\n\tfor( x = begin->next; x != NULL; x = x->next ){\n\t\tif( x == cursor ){ printf(\"^\"); }\t//???????????????????????¨?????´????????????'^'???????????????(?????????????????????'^'???????±????????????????)???\n\t\tif( x->next != NULL ){ printf(\"%c\", x->c); }\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n\n}"
  },
  {
    "language": "C",
    "code": "char t[1002],m[9],o[999];c,n,w;M(d){t[c]=t[c+d];t[c+d]='^';c+=d;}D(){memmove(t+c+1,t+c+2,strlen(t+c+1));}main(l){scanf(\"%*d\");for(;t[1]=0,getchar(),~scanf(\"%[^\\n]\",t+1);){t[0]='^';c=0;scanf(\"%d\",&n);for(;n--;){scanf(\"%s\",m);if(strcmp(m,\"insert\")==0){scanf(\" \\\"%[^\\\"]\\\"\",o);l=strlen(o);memmove(t+c+l,t+c,strlen(t+c)+1);memcpy(t+c,o,l);c+=l;}else{scanf(\"%s\",o);w=*o-'c';if(strcmp(m,\"forward\")==0){if(w){for(;t[c+1]==' ';)M(1);for(;t[c+1]&&t[c+1]!=' ';)M(1);}else{if(t[c+1])M(1);}}else if(strcmp(m,\"backward\")==0){if(w){for(;c>0&&t[c-1]==' ';)M(-1);for(;c>0&&t[c-1]!=' ';)M(-1);}else{if(c>0)M(-1);}}else{if(w){for(;t[c+1]==' ';)D();for(;t[c+1]&&t[c+1]!=' ';)D();}else{if(t[c+1])D();}}}}puts(t);}}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#define MAX 1010\nchar buffer[MAX], temp[MAX];\nint cursor, length;\nvoid print(void)\n{\n#ifdef __HOGEOVER30__DEBUG__\n\tint i;\n\tfor (i = 0; i < cursor; ++i) putchar(buffer[i]);\n\tputchar('^');\n\tfor (i = cursor; i < length; ++i) putchar(buffer[i]);\n\tputs(\"\");\n#endif\n}\nvoid forwardChar(void)\n{\n\tif (cursor < length) cursor++;\n\tprint();\n}\nvoid forwardWord(void)\n{\n\tif (cursor == length) return;\n\twhile (cursor < length && buffer[cursor] == ' ') cursor++;\n\twhile (cursor < length && buffer[cursor] != ' ') cursor++;\n\tprint();\n}\nvoid backwardChar(void)\n{\n\tif (cursor > 0) cursor--;\n\tprint();\n}\nvoid backwardWord(void)\n{\n\tif (cursor == 0) return;\n\twhile (cursor > 0 && buffer[cursor] == ' ') cursor--;\n\twhile (cursor > 0 && buffer[cursor] != ' ') cursor--;\n\tprint();\n}\nvoid insert(const char* text)\n{\n\tint i;\n\tint n = strlen(text);\n\tfor (i = length; i >= cursor; --i) buffer[i+n] = buffer[i];\n\tfor (i = 0; i < n; ++i) buffer[cursor++] = text[i];\n\tlength += n;\n\tprint();\n}\nvoid deleteChar(void)\n{\n\tint i;\n\tif (cursor == length) return;\n\tfor (i = cursor; i < length; ++i) buffer[i] = buffer[i+1];\n\tlength--;\n\tprint();\n}\nvoid deleteWord(void)\n{\n\tint i;\n\tint k = 0;\n\tif (cursor == length) return;\n\twhile (k + cursor < length && buffer[k + cursor] == ' ') k++;\n\twhile (k + cursor < length && buffer[k + cursor] != ' ') k++;\n\tfor (i = cursor; i < length; ++i) buffer[i] = buffer[i+k];\n\tlength -= k;\n\tprint();\n}\nint main(void)\n{\n\tint T = atoi(fgets(temp, MAX, stdin));\n\twhile (T--) {\n\t\tint i;\n\t\tint n;\n\t\tfgets(buffer, MAX, stdin);\n\t\tbuffer[strlen(buffer)-1] = '\\0';\n\t\tlength = strlen(buffer);\n\t\tcursor = 0;\n\t\tn = atoi(fgets(temp, MAX, stdin));\n\t\tfor (i = 0; i < n; ++i) {\n\t\t\tfgets(temp, MAX, stdin);\n\t\t\tif (!strcmp(temp, \"forward char\\n\")) forwardChar();\n\t\t\tif (!strcmp(temp, \"forward word\\n\")) forwardWord();\n\t\t\tif (!strcmp(temp, \"backward char\\n\")) backwardChar();\n\t\t\tif (!strcmp(temp, \"backward word\\n\")) backwardWord();\n\t\t\tif (!strcmp(temp, \"delete char\\n\")) deleteChar();\n\t\t\tif (!strcmp(temp, \"delete word\\n\")) deleteWord();\n\t\t\tif (!strncmp(temp, \"insert\", 6)) {\n\t\t\t\tstrtok(temp, \"\\\"\");\n\t\t\t\tinsert(strtok(NULL, \"\\\"\"));\n\t\t\t}\n\t\t}\n\t\tfor (i = 0; i < cursor; ++i) putchar(buffer[i]);\n\t\tputchar('^');\n\t\tfor (i = cursor; i < length; ++i) putchar(buffer[i]);\n\t\tputs(\"\");\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "/* AOJ 1101 A Simple Offline Text Editor */\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n/* #define DEBUG */\n\n#ifdef DEBUG\n#define DEBUG_PRINT do {print_str(text, len, cursor);} while(0)\n#else\n#define DEBUG_PRINT (0)\n#endif\n\nvoid print_str(char *s, int len, int cursor);\n\nint\nmain(void)\n{\n    int n_texts;\n    char s[BUFSIZ];\n\n    fgets(s, BUFSIZ, stdin);\n    n_texts = atoi(s);\n\n    while (n_texts--) {\n        char text[BUFSIZ];\n        int len;\n        int cursor = 0;\n        int n_commands;\n\n        fgets(text, BUFSIZ, stdin);\n        len = strlen(text);\n        if (text[len - 1] == '\\n') {\n            text[len - 1] = '\\0';\n            len--;\n        }\n        if (strchr(text, '\\r')) puts(\"BANG!\");\n\n        fgets(s, BUFSIZ, stdin);\n        n_commands = atoi(s);\n        while (n_commands--) {\n            fgets(s, BUFSIZ, stdin);\n            if (strstr(s, \"forward char\") == s) {\n                if (cursor < len) cursor++;\n                DEBUG_PRINT;\n            } else if (strstr(s, \"forward word\") == s) {\n                while (cursor < len && text[cursor] == ' ')\n                    cursor++;\n                while (cursor < len && text[cursor] != ' ')\n                    cursor++;\n                DEBUG_PRINT;\n            } else if (strstr(s, \"backward char\") == s) {\n                if (cursor > 0) cursor--;\n                DEBUG_PRINT;\n            } else if (strstr(s, \"backward word\") == s) {\n                while (cursor > 0 && text[cursor - 1] == ' ')\n                    cursor--;\n                while (cursor > 0 && text[cursor - 1] != ' ')\n                    cursor--;\n                DEBUG_PRINT;\n            } else if (strstr(s, \"insert \") == s) {\n                char temp[BUFSIZ];\n                char *start = strchr(s, '\"') + 1;\n                char *end = strchr(start, '\"');\n                int len_arg = (int)(end - start);\n\n                if (cursor == len) {\n                    strncat(text, start, len_arg);\n                } else {\n                    strcpy(temp, text);\n\n                    strncpy(text + cursor, start, len_arg);\n                    text[cursor + len_arg] = '\\0';\n                    strcat(text, temp + cursor);\n                }\n\n                cursor += len_arg;\n                len += len_arg;\n                DEBUG_PRINT;\n            } else if (strstr(s, \"delete char\") == s) {\n                if (cursor < len) {\n                    char temp[BUFSIZ];\n\n                    strcpy(temp, text);\n\n                    text[cursor] = '\\0';\n                    strcat(text, temp + cursor + 1);\n\n                    len--;\n                }\n                DEBUG_PRINT;\n            } else if (strstr(s, \"delete word\") == s) {\n                if (cursor < len) {\n                    char temp[BUFSIZ];\n                    int word_end = cursor;\n                    int len_word = 0;\n\n                    while (word_end < len && text[word_end] == ' ') {\n                        word_end++;\n                        len_word++;\n                    }\n\n                    while (word_end < len && text[word_end] != ' ') {\n                        word_end++;\n                        len_word++;\n                    }\n\n                    strcpy(temp, text);\n                    strcpy(text + cursor, temp + word_end);\n                    len -= len_word;\n                }\n                DEBUG_PRINT;\n            }\n        }\n        print_str(text, len, cursor);\n    }\n\n    return 0;\n}\n\nvoid\nprint_str(char *s, int len, int cursor)\n{\n    int i;\n\n    if (len == 0) {\n        putchar('^');\n    } else {\n        for (i = 0; i < len; i++) {\n            if (i == cursor) putchar('^');\n            putchar(s[i]);\n        }\n\n        if (cursor == len) putchar('^');\n    }\n\n    putchar('\\n');\n    putchar('\\n');\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nstatic\nchar cln[ 256 ];\n\nvoid getNextLine (\n  void\n  )\n{\n  fgets ( cln, sizeof ( cln ), stdin );\n  *( strchr ( cln, '\\n' ) ) = '\\0';\n}\n\n/** Application main entry point. */\nint main (\n  int     argc,\n  char  * argv[ ]\n  )\n{\n  int tc;\n\n  getNextLine ( );\n  tc = atoi ( cln );\n\n  while ( tc-- )\n  {\n    char    s[ 1024 ];\n    char  * c\n       ,  * e\n       ,  * p;\n    int n;\n\n    getNextLine ( );\n    strcpy ( s, cln );\n    c = s; e = s + strlen ( s );\n\n    getNextLine ( );\n    n = atoi ( cln );\n\n    while ( n-- )\n    {\n      getNextLine ( );\n\n      if ( !strcmp ( cln, \"forward char\" ) )\n      {\n        c += !!( c != e );\n      }\n      else if ( !strcmp ( cln, \"forward word\" ) )\n      {\n        while ( c != e && isspace ( *c ) ) ++c;\n        while ( c != e && !isspace ( *c ) ) ++c;\n      }\n      else if ( !strcmp ( cln, \"backward char\" ) )\n      {\n        c -= !!( c != s );\n      }\n      else if ( !strcmp ( cln, \"backward word\" ) )\n      {\n        while ( c != s && isspace ( *c ) ) --c;\n        while ( c != s && !isspace ( c[ -1 ] ) ) --c;\n      }\n      else if ( !strcmp ( cln, \"delete char\" ) )\n      {\n        for ( p = c; p != e && p + 1 != e; ++p ) p[ 0 ] = p[ 1 ];\n        e -= !!( c != e );\n      }\n      else if ( !strcmp ( cln, \"delete word\" ) )\n      {\n        size_t len;\n\n        p = c;\n        while ( p != e && isspace ( *p ) ) ++p;\n        while ( p != e && !isspace ( *p ) ) ++p;\n        len = p - c;\n\n        for ( p = c; p != e && p + len != e; ++p ) p[ 0 ] = p[ len ];\n        e -= len;\n      }\n      else /* insert */\n      {\n        size_t len;\n\n        for ( p = cln + 8; *p != '\\\"'; ++p );\n        len = p - ( cln + 8 );\n\n        e += len;\n        for ( p = e; p - len != c; --p )  p[ -1 ] = p[ -( len + 1 ) ];\n\n        for ( p = c; p != c + len; ++p )  *p = cln[ 8 + ( p - c ) ];\n        c += len;\n      }\n    }\n\n    for ( p = s; ( p - 1 ) != e; ++p )\n    {\n      if ( p == c ) putchar ( '^' );\n      if ( p != e ) putchar ( *p );\n    }\n    puts ( \"\" );\n  }\n\n  return ( 0 );\n}"
  },
  {
    "language": "C",
    "code": "// Aizu 1101: A Simple Offline Text Editor\n// 2017.9.18 bal4u@uu\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nchar buf[1010], *p;\n\nint main()\n{\n\tint n, m, cmd, par;\n\tchar t[200], *cp, *q;\n\n\tfgets(t, 50, stdin), n = atoi(t); while (n-- > 0) {\n\t\tfgets(buf, 1000, stdin);\n\t\tp = buf + strlen(buf) - 1; if (*p < ' ' && p >= buf) *p = 0; p = buf; // remove '\\n'\n\t\tfgets(t, 50, stdin), m = atoi(t); while (m-- > 0) {\n\t\t\tfgets(t, 150, stdin); cp = t; while (isspace(*cp)) cp++;\n\t\t\tcmd = *cp; while (isalpha(*cp)) cp++; while (isspace(*cp)) cp++;\n\t\t\tpar = *cp;\n\t\t\tif (cmd == 'f') {    // forward\n\t\t\t\tif (par == 'c') { if (*p) p++; }\n\t\t\t\telse { while (isspace(*p)) p++;\twhile (*p > ' ') p++; }\n\t\t\t} else if (cmd == 'b') {   // backward\n\t\t\t\tif (par == 'c') { if (p > buf) p--; }\n\t\t\t\telse { while (p > buf && *p <= ' ') p--; while (p > buf && *p > ' ') p--; }\n\t\t\t} else if (cmd == 'd') {  // delete\n\t\t\t\tif (par == 'c') { if (*p) strcpy(p, p+1); }\n\t\t\t\telse { q = p; while (isspace(*q)) q++;\twhile (*q > ' ') q++; strcpy(p, q); }\n\t\t\t} else {  // insert\n\t\t\t\tint w = strlen(cp)-2;\n\t\t\t\tq = cp + w; if (*q == '\"') w--;  // remove '\\n'\n\t\t\t\tif (w > 0) {\n\t\t\t\t\tq = buf + strlen(buf);\n\t\t\t\t\twhile (p <= q) *(q + w) = *q, q--;\n\t\t\t\t}\n\t\t\t\tputs(buf);\n\t\t\t\tcp++; while (w-- > 0) *p++ = *cp++;\n\t\t\t}\n//printf(\"--> \");\tq = buf; while (q < p) putchar(*q++); putchar('^'); while (*q) putchar(*q++); putchar('\\n');\n\t\t}\n\t\tq = buf; while (q < p) putchar(*q++); putchar('^'); while (*p) putchar(*p++); putchar('\\n');\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar buffer[1024];\nint cursor = 0;\n\ntypedef struct{\n    char cmd[24];\n    char any_text[101];\n}Command;\n\nvoid exec_cmd(Command command);\n\nint main(void)\n{\n    int n, i;\n\n    scanf(\"%d\", &n);\n    getchar();\n    for(i = 0; i < n; i++){\n        cursor = 0;\n        int num_cmd;\n        Command command;\n\n        fgets(buffer, sizeof(buffer), stdin);\n        buffer[strlen(buffer) - 1] = '\\0';\n        scanf(\"%d\", &num_cmd);\n        getchar();\n\n        int j;\n        for(j = 0; j < num_cmd; j++){\n            char temp[256];\n            fgets(temp, sizeof(temp), stdin);\n            int k;\n            for(k = 0; k < strlen(temp); k++){\n                if(temp[k] == '\\n')\n                    temp[k] = '\\0';\n            }\n\n            if(temp[0] != 'i'){\n                strcpy(command.cmd, temp);\n            }else{\n                char *p = temp;\n                while(*p != ' ') p++;\n                *p = '\\0';\n                p += 2;\n                char *start = p;\n                while(*p != '\"') p++;\n                *p = '\\0';\n                strcpy(command.cmd, temp);\n                strcpy(command.any_text, start);\n            }\n\n            exec_cmd(command);\n            //int len = strlen(buffer);\n            //for(k = 0; k <= len; k++){\n            //    if(cursor == k)\n            //        putchar('^');\n            //    putchar(buffer[k]);\n            //}\n            //printf(\"\\n\");\n            //printf(\"\\n\");\n        }\n        int len = strlen(buffer);\n        for(j = 0; j <= len; j++){\n            if(cursor == j)\n                putchar('^');\n            putchar(buffer[j]);\n        }\n        printf(\"\\n\");\n    }\n\n    return 0;\n}\n\nvoid exec_cmd(Command command)\n{\n    if(strcmp(command.cmd, \"forward char\") == 0){\n        if(buffer[cursor] != '\\0')\n            cursor++;\n    }\n\n    else if(strcmp(command.cmd, \"forward word\") == 0){\n        while(buffer[cursor] == ' ' && buffer[cursor] != '\\0'){\n            cursor++;\n        }\n        while(buffer[cursor] != ' ' && buffer[cursor] != '\\0'){\n            cursor++;\n        }\n    }\n\n    else if(strcmp(command.cmd, \"backward char\") == 0){\n        if(cursor != 0)\n            cursor--;\n    }\n\n    else if(strcmp(command.cmd, \"backward word\") == 0){\n        while(buffer[cursor] == ' ' && cursor != 0){\n            cursor--;\n        }\n        while(buffer[cursor] != ' ' && cursor != 0){\n            cursor--;\n        }\n    }\n\n    else if(strcmp(command.cmd, \"insert\") == 0){\n        char temp[1024];\n        strcpy(temp, buffer);\n        temp[cursor] = '\\0';\n        strcat(temp, command.any_text);\n        strcat(temp, buffer + cursor);\n        strcpy(buffer, temp);\n        cursor += strlen(command.any_text);\n    }\n\n    else if(strcmp(command.cmd, \"delete char\") == 0){\n        if(buffer[cursor] != '\\0'){\n            char *p = buffer + cursor + 1;\n            buffer[cursor] = '\\0';\n            strcat(buffer, p);\n        }\n    }\n\n    else if(strcmp(command.cmd, \"delete word\") == 0){\n        char temp[1024];\n        strcpy(temp, buffer);\n        char *p = temp + cursor;\n        if(*p == ' '){\n            *p = '\\0';\n            p++;\n            while(*p == ' '){\n                p++;\n            }\n            strcat(temp, p);\n        }else if(*p != '\\0'){\n            *p = '\\0';\n            p++;\n            while(*p != ' ' && *p != '\\0'){\n                p++;\n            }\n            strcat(temp, p);\n        }\n\n        strcpy(buffer, temp);\n    }\n\n    else{\n        fprintf(stderr, \"command %s not found\\n\", command.cmd);\n        exit(1);\n    }\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar buffer[1024];\nint cursor = 0;\n\ntypedef struct{\n    char cmd[1024];\n    char any_text[1024];\n}Command;\n\nvoid exec_cmd(Command command);\n\nint main(void)\n{\n    int n, i;\n\n    scanf(\"%d\", &n);\n    getchar();\n    for(i = 0; i < n; i++){\n        cursor = 0;\n        int num_cmd;\n        int k;\n        Command command;\n\n        fgets(buffer, sizeof(buffer), stdin);\n        for(k = 0; k < strlen(buffer); k++){\n            if(buffer[k] == '\\n')\n                buffer[k] = '\\0';\n        }\n\n        scanf(\"%d\", &num_cmd);\n        getchar();\n\n        int j;\n        for(j = 0; j < num_cmd; j++){\n            char temp[1024];\n            fgets(temp, sizeof(temp), stdin);\n            for(k = 0; k < strlen(temp); k++){\n                if(temp[k] == '\\n')\n                    temp[k] = '\\0';\n            }\n\n            if(temp[0] != 'i'){\n                strcpy(command.cmd, temp);\n            }else{\n                char *p = temp;\n                while(*p != ' ') p++;\n                *p = '\\0';\n                p += 2;\n                char *start = p;\n                while(*p != '\"') p++;\n                *p = '\\0';\n                strcpy(command.cmd, temp);\n                strcpy(command.any_text, start);\n            }\n\n            exec_cmd(command);\n            if(cursor > strlen(buffer) + 1){\n                fprintf(stderr, \"command: %s\\n\", command.cmd);\n                fprintf(stderr, \"cursor overflow\\n\");\n                exit(1);\n            }\n            //int len = strlen(buffer);\n            //for(k = 0; k <= len; k++){\n            //    if(cursor == k)\n            //        putchar('^');\n            //    putchar(buffer[k]);\n            //}\n            //printf(\"\\n\");\n            //printf(\"\\n\");\n        }\n        int len = strlen(buffer);\n        for(j = 0; j <= len; j++){\n            if(cursor == j)\n                putchar('^');\n            if(j != len)\n                putchar(buffer[j]);\n        }\n        printf(\"\\n\");\n    }\n\n    return 0;\n}\n\nvoid exec_cmd(Command command)\n{\n    if(strcmp(command.cmd, \"forward char\") == 0){\n        if(buffer[cursor] != '\\0')\n            cursor++;\n    }\n\n    else if(strcmp(command.cmd, \"forward word\") == 0){\n        while(buffer[cursor] == ' ' && buffer[cursor] != '\\0'){\n            cursor++;\n        }\n        while(buffer[cursor] != ' ' && buffer[cursor] != '\\0'){\n            cursor++;\n        }\n    }\n\n    else if(strcmp(command.cmd, \"backward char\") == 0){\n        if(cursor != 0)\n            cursor--;\n    }\n\n    else if(strcmp(command.cmd, \"backward word\") == 0){\n        while(buffer[cursor - 1] == ' ' && cursor != 0){\n            cursor--;\n        }\n        while(buffer[cursor - 1] != ' ' && cursor != 0){\n            cursor--;\n        }\n    }\n\n    else if(strcmp(command.cmd, \"insert\") == 0){\n        char temp[1024];\n        strcpy(temp, buffer);\n        temp[cursor] = '\\0';\n        strcat(temp, command.any_text);\n        strcat(temp, buffer + cursor);\n        strcpy(buffer, temp);\n        cursor += strlen(command.any_text);\n    }\n\n    else if(strcmp(command.cmd, \"delete char\") == 0){\n        if(buffer[cursor] != '\\0'){\n            char *p = buffer + cursor + 1;\n            buffer[cursor] = '\\0';\n            strcat(buffer, p);\n        }\n    }\n\n    else if(strcmp(command.cmd, \"delete word\") == 0){\n        char temp[1024];\n        int flag = 0;\n        strcpy(temp, buffer);\n        char *p = temp + cursor;\n        if(*p == ' '){\n            flag = 1;\n            *p = '\\0';\n            p++;\n            while(*p == ' '){\n                p++;\n            }\n        }\n\n        if(*p != '\\0'){\n            flag = 1;\n            *p = '\\0';\n            p++;\n            while(*p != ' ' && *p != '\\0'){\n                p++;\n            }\n        }\n\n        if(flag){\n            char t[1024];\n            strcpy(t, p);\n            strcat(temp, t);\n            strcpy(buffer, temp);\n        }\n    }\n\n    else{\n        fprintf(stderr, \"command %s not found\\n\", command.cmd);\n        exit(1);\n    }\n}"
  },
  {
    "language": "C",
    "code": "char t[1002],m[9],o[999];c,n,w;M(d){t[c]=t[c+d];t[c+d]='^';c+=d;}D(){memmove(t+c+1,t+c+2,strlen(t+c+1));}main(l){scanf(\"%*d\");for(;t[1]=0,getchar(),~scanf(\"%[^\\n]\",t+1);){t[0]='^';c=0;scanf(\"%d\",&n);for(;n--;){scanf(\"%s\",m);if(strcmp(m,\"insert\")==0){scanf(\" \\\"%[^\\\"]\\\"\",o);l=strlen(o);memmove(t+c+l,t+c,strlen(t+c)+1);memcpy(t+c,o,l);c+=l;}else{scanf(\"%s\",o);w=*o-'c';if(strcmp(m,\"forward\")==0){if(w){for(;t[c+1]==' ';)M(1);for(;t[c+1]&&t[c+1]!=' ';)M(1);}else{if(t[c+1])M(1);}}else if(strcmp(m,\"backward\")==0){if(w){for(;c>0&&t[c-1]==' ';)M(-1);for(;c>0&&t[c-1]!=' ';)M(-1);}else{if(c>0)M(-1);}}else{if(w){int p=c;for(;t[p+1]==' ';)p++;if(t[p+1]&&t[p+1]!=' '){for(;t[p+1]&&t[p+1]!=' ';)p++;for(;t[c+1]==' ';)D();for(;t[c+1]&&t[c+1]!=' ';)D();}}else{if(t[c+1])D();}}}}puts(t);}}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar buffer[1024];\nint cursor = 0;\n\ntypedef struct{\n    char cmd[24];\n    char any_text[101];\n}Command;\n\nvoid exec_cmd(Command command);\n\nint main(void)\n{\n    int n, i;\n\n    scanf(\"%d\", &n);\n    getchar();\n    for(i = 0; i < n; i++){\n        cursor = 0;\n        int num_cmd;\n        Command command;\n\n        fgets(buffer, sizeof(buffer), stdin);\n        buffer[strlen(buffer) - 1] = '\\0';\n        scanf(\"%d\", &num_cmd);\n        getchar();\n\n        int j;\n        for(j = 0; j < num_cmd; j++){\n            char temp[256];\n            fgets(temp, sizeof(temp), stdin);\n            int k;\n            for(k = 0; k < strlen(temp); k++){\n                if(temp[k] == '\\n')\n                    temp[k] = '\\0';\n            }\n\n            if(temp[0] != 'i'){\n                strcpy(command.cmd, temp);\n            }else{\n                char *p = temp;\n                while(*p != ' ') p++;\n                *p = '\\0';\n                p += 2;\n                char *start = p;\n                while(*p != '\"') p++;\n                *p = '\\0';\n                strcpy(command.cmd, temp);\n                strcpy(command.any_text, start);\n            }\n\n            exec_cmd(command);\n            //int len = strlen(buffer);\n            //for(k = 0; k <= len; k++){\n            //    if(cursor == k)\n            //        putchar('^');\n            //    putchar(buffer[k]);\n            //}\n            //printf(\"\\n\");\n            //printf(\"\\n\");\n        }\n        int len = strlen(buffer);\n        for(j = 0; j <= len; j++){\n            if(cursor == j)\n                putchar('^');\n            putchar(buffer[j]);\n        }\n        printf(\"\\n\");\n    }\n\n    return 0;\n}\n\nvoid exec_cmd(Command command)\n{\n    if(strcmp(command.cmd, \"forward char\") == 0){\n        if(buffer[cursor] != '\\0')\n            cursor++;\n    }\n\n    else if(strcmp(command.cmd, \"forward word\") == 0){\n        while(buffer[cursor] == ' ' && buffer[cursor] != '\\0'){\n            cursor++;\n        }\n        while(buffer[cursor] != ' ' && buffer[cursor] != '\\0'){\n            cursor++;\n        }\n    }\n\n    else if(strcmp(command.cmd, \"backward char\") == 0){\n        if(cursor != 0)\n            cursor--;\n    }\n\n    else if(strcmp(command.cmd, \"backward word\") == 0){\n        while(buffer[cursor] == ' ' && cursor != 0){\n            cursor--;\n        }\n        while(buffer[cursor] != ' ' && cursor != 0){\n            cursor--;\n        }\n    }\n\n    else if(strcmp(command.cmd, \"insert\") == 0){\n        char temp[1024];\n        strcpy(temp, buffer);\n        temp[cursor] = '\\0';\n        strcat(temp, command.any_text);\n        strcat(temp, buffer + cursor);\n        strcpy(buffer, temp);\n        cursor += strlen(command.any_text);\n    }\n\n    else if(strcmp(command.cmd, \"delete char\") == 0){\n        if(buffer[cursor] != '\\0'){\n            char *p = buffer + cursor + 1;\n            buffer[cursor] = '\\0';\n            strcat(buffer, p);\n        }\n    }\n\n    else if(strcmp(command.cmd, \"delete word\") == 0){\n        char temp[1024];\n        strcpy(temp, buffer);\n        char *p = temp + cursor;\n        if(*p == ' '){\n            *p = '\\0';\n            p++;\n            while(*p == ' '){\n                p++;\n            }\n            strcat(temp, p);\n        }else if(*p != '\\0'){\n            *p = '\\0';\n            p++;\n            while(*p != ' ' && *p != '\\0'){\n                p++;\n            }\n            strcat(temp, p);\n        }\n\n        strcpy(buffer, temp);\n    }\n\n    else{\n        fprintf(stderr, \"command %s not found\\n\", command.cmd);\n        exit(1);\n    }\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n\n#define N 1000\n#define DEBUG 0\nint main(void){\n  char s[N];\n  int cursor;\n  int line, loop;\n  int M,    cmdN;\n  char cmd[120];\n  char buf2[1000];\n  int i,j,k,len;\n\n  scanf(\"%d \",&line);\n  /*  printf(\"line =%d\\n\",line); */\n  for( loop=0;loop<line;loop++){\n    fgets( s,N,stdin);\n    len = strlen( s );\n    s[len-1]='\\0';    \n    len = strlen( s );\n\n    scanf(\"%d \",&M);\n    cursor=0;\n    for( cmdN=0;cmdN<M;cmdN++){\n      fgets( cmd,120,stdin);\n      i = strlen( cmd );\n      cmd[i-1]='\\0';\n      if( DEBUG==1 ){\n\tprintf(\"[\");\n\tfor( i=0;i<=len;i++ ){\n\t  if( i==cursor )\n\t    printf(\"^\");\n\t  if( i<len )\n\t    printf(\"%c\",s[i]);\n\t}\n\tprintf(\"]\\tcursor=%d len=%d cmd=%s\\n\",cursor,len,cmd);\n      }\n\n      if( cmd[0]=='f' ){\n\tif( cmd[8]=='c' ){\n\t  if( cursor<len )\n\t    cursor++;\n\t}else{\n\t  if( s[cursor]!=' ' )\n\t    for(  ;s[cursor]!=' '&&cursor <len;  cursor++ );\n\t  else{\n\t    while( s[cursor]==' '&&cursor<len ) cursor++  ;\n\t    for(  ;s[cursor]!=' '&&cursor <len;  cursor++ );\n\t  }\n\t}\n      } else if( cmd[0]=='b' ){\n\tif( cmd[9]=='c' ){\n\t  if( cursor>0 )\n\t    cursor--;\n\t}else{\n\t  if( s[cursor]!=' ' ){\n\t    for(  ;s[cursor]!=' '&&cursor >0;  cursor-- );\n\t    if( cursor!=0 )\n\t      cursor++;\n\t  } else {\n\t    while( s[cursor]==' '&&cursor!=0 ) cursor-- ;\n\t    for(  ;s[cursor]!=' '&&cursor >0;  cursor-- );\n\t    if( cursor!=0 ) cursor++;\n\t  }\n\t}\n      } else if( cmd[0]=='d' ){\n\tif( cmd[7]=='c' ){\n\t  if( cursor!=len ){\n\t    for(i=cursor;i<len;i++)\n\t      s[i]=s[i+1];\n\t    len--;\n\t  }\n\t}else{\n\t  i=cursor;\n\t  if( i!=len ){\n\t    j=i;\n\t    while( s[j]==' ' )j++;\n\t    for( ; s[j]!=' '&&j<len;j++ );\n\t   \n\t    if( j==len ){\n\t      s[i]='\\0';\n\t      len=i;\n\t    } else {\n\t      for(k=0; j+k<len;k++)\n\t\ts[i+k] = s[j+k];\n\t      s[i+k]='\\0';\n\t      len=i+k+1;\n\t    }\n\t  }\n\t}\n      }else{\n\tfor( j=0;cmd[j]!='\"';j++ );\n\ti=0;\n\twhile( 1 ){\n\t  buf2[i] = s[cursor+i];\n\t  if( buf2[i]=='\\0' )\n\t    break;\n\t  i++;\n\t}\n\tk = cursor;\n\twhile( cmd[j]!='\"' ) j++;\n\tj++;\n\twhile( 1 ){\n\t  s[k]= cmd[j++];\n\t  k++;\n\t  if( cmd[j]=='\"' ){\n\t    cursor=k;\n\t    break;\n\t  }\n\t}\n\ti=0;\n\twhile( 1 ){\n\t  s[k] = buf2[i];\n\t  if( s[k]=='\\0' ){\n\t    len = k;\n\t    break;\n\t  }\n\t  k++;i++;\n\t}\n      }\n    }\n    for( i=0;i<=len;i++ ){\n      if( i==cursor )\n\tprintf(\"^\");\n      if( i<len )\n\tprintf(\"%c\",s[i]);\n    }\n    printf(\"\\n\");\n    if(DEBUG==1) printf(\"********************************************\\n\");\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n\nint n,m;\nint dd,i,j;\nchar str[1000],com[1000],res[1000];\nchar str2[1001],str3[1001],str4[1001];\nint main(void){\n\tscanf(\"%d%*c\",&n);\n\tfor(dd=0;dd<n;dd++){\n\t\tmemset(str,'\\0',sizeof(str));\n\t\tfgets(str,999,stdin);\n\t\tscanf(\"%d%*c\",&m);\n\t\tint len=strlen(str)-1;\n\t\tint point=0;\n\t\tfor(i=0;i<m;i++){\n\t\t\tmemset(com,'\\0',sizeof(com));\n\t\t\tfgets(com,999,stdin);\n\t\t\tint comlen=strlen(com)-1;\n\t\t\tif(com[0]=='f' && com[8]=='c'){\n\t\t\t\tif(point<len){\n\t\t\t\t\tpoint++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(com[0]=='f' && com[8]=='w'){\n\t\t\t\tif(point<len){\n\t\t\t\t\twhile(point<len && str[point]==' ')point++;\n\t\t\t\t\twhile(point<len && str[point]!=' ')point++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(com[0]=='b' && com[9]=='c'){\n\t\t\t\tif(point>0){\n\t\t\t\t\tpoint--;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(com[0]=='b' && com[9]=='w'){\n\t\t\t\tif(point>0){\n\t\t\t\t\twhile(point>0 && str[point-1]==' ')point--;\n\t\t\t\t\twhile(point>0 && str[point-1]!=' ')point--;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(com[0]=='i'){\n\t\t\t\tmemset(str2,'\\0',sizeof(str2));\n\t\t\t\tmemset(str3,'\\0',sizeof(str3));\n\t\t\t\tmemset(str4,'\\0',sizeof(str4));\n\t\t\t\tfor(j=0;j<point;j++){\n\t\t\t\t\tstr2[j]=str[j];\n\t\t\t\t}\n\t\t\t\tfor(j=point;j<len;j++){\n\t\t\t\t\tstr3[j-point]=str[j];\n\t\t\t\t}\n\t\t\t\tfor(j=8;j<comlen-1;j++){\n\t\t\t\t\tstr4[j-8]=com[j];\n\t\t\t\t}\n\t\t\t\tmemset(str,'\\0',sizeof(str));\n\t\t\t\tfor(j=0;j<point;j++){\n\t\t\t\t\tstr[j]=str2[j];\n\t\t\t\t}\n\t\t\t\tfor(j=0;j<comlen-9;j++){\n\t\t\t\t\tstr[j+point]=str4[j];\n\t\t\t\t}\n\t\t\t\tfor(j=0;j<len-point;j++){\n\t\t\t\t\tstr[j+point+comlen-9]=str3[j];\n\t\t\t\t}\n\t\t\t\tlen=len+comlen-9;\n\t\t\t\tpoint+=comlen-9;\n\t\t\t}\n\t\t\tif(com[0]=='d' && com[7]=='c'){\n\t\t\t\tif(len==point)continue;\n\t\t\t\tmemset(str2,'\\0',sizeof(str2));\n\t\t\t\tmemset(str3,'\\0',sizeof(str3));\n\t\t\t\tfor(j=0;j<point;j++){\n\t\t\t\t\tstr2[j]=str[j];\n\t\t\t\t}\n\t\t\t\tfor(j=point+1;j<len;j++){\n\t\t\t\t\tstr3[j]=str[j];\n\t\t\t\t}\n\t\t\t\tmemset(str,'\\0',sizeof(str));\n\t\t\t\tfor(j=0;j<point;j++){\n\t\t\t\t\tstr[j]=str2[j];\n\t\t\t\t}\n\t\t\t\tfor(j=point+1;j<len;j++){\n\t\t\t\t\tstr[j-1]=str3[j];\n\t\t\t\t}\n\t\t\t\tlen--;\n\t\t\t}\n\t\t\tif(com[0]=='d' && com[7]=='w'){\n\t\t\t\tif(len==point)continue;\n\t\t\t\tint e=1;\n\t\t\t\tif(str[point]==' '){\n\t\t\t\t\twhile(point+e<len && str[point+e]==' ')e++;\n\t\t\t\t}\n\t\t\t\tint flag2=0;\n\t\t\t\twhile(point+e<len && str[point+e]!=' '){\n\t\t\t\t\te++;\n\t\t\t\t\tflag2=1;\n\t\t\t\t}\n\t\t\t\tif(flag2==0)continue;\n\t\t\t\tmemset(str2,'\\0',sizeof(str2));\n\t\t\t\tmemset(str3,'\\0',sizeof(str3));\n\t\t\t\tfor(j=0;j<point;j++){\n\t\t\t\t\tstr2[j]=str[j];\n\t\t\t\t}\n\t\t\t\tfor(j=point+e;j<len;j++){\n\t\t\t\t\tstr3[j-point-e]=str[j];\n\t\t\t\t}\n\t\t\t\tmemset(str,'\\0',sizeof(str));\n\t\t\t\tfor(j=0;j<point;j++){\n\t\t\t\t\tstr[j]=str2[j];\n\t\t\t\t}\n\t\t\t\tfor(j=point+e;j<len;j++){\n\t\t\t\t\tstr[j-e]=str3[j-point-e];\n\t\t\t\t}\n\t\t\t\tlen=len-e;\n\t\t\t}\n\t\t}\n\t\tint reslen=0;\n\t\tmemset(res,'\\0',sizeof(res));\n\t\tfor(i=0;i<len;i++){\n\t\t\tif(i==point)res[reslen++]='^';\n\t\t\tres[reslen++]=str[i];\n\t\t}\n\t\tif(len==point)res[reslen++]='^';\n\t\tprintf(\"%s\\n\",res);\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "/*\n\t??????????????´??¨??????\n\t????±??????????1W142208-3\n\t????????\\???2015/10/6\n\t?????????\n\t\t???????????????????????¨??????????????????????????????\n*/\n\n#include<stdio.h>\n#include<stdlib.h>\n\n#define SIZE 101\t//??????????????§????????°???\n\n//????????¨????????????????????????????????????????????????????????¨??§??????????????¢?????§???????§??????????\ntypedef struct CHAR Char;\nstruct CHAR{\n\tchar c;\t//?????????\n\tChar *prev;\t//????????????????????????next???????????´??????NULL???\n\tChar *next;\t//?¬??????????????????????prev???????????´??????NULL???\n};\n\nint Main();\t//???????????????\nint SetCHAR(Char *ch, char _c, Char *_prev, Char *_next);\t//Char?§???????????????????????????¢??°???\nint Output(Char *begin, Char *cursor);\t//??????????????????????????????begin?????????????????????next????????????????????????cursor???????????????????????????????????¢?????¬???????????????\n\nint main(int argc, char *argv[]){\n\tint n = 0, i = 0;\t//????????????????????°???\n\tif( scanf(\"%d\", &n) != 1 ){ return -1; }\n\tfor( i = 0; i < n; i++ ){ Main(); }\n\treturn 0;\n}\n\nint Main(){\n\tChar *begin, *end, *x, *t;\t//???????????????('\\0'?????????)???????????????(?????????????´??????????)?????°?????¨????????????????????°???????????????????????????????????????????????????\n\t//begin??¨end???????????????\n\tbegin = (Char*)malloc(sizeof(Char));\n\tend = (Char*)malloc(sizeof(Char));\n\tSetCHAR(begin, '\\0', NULL, end);\n\tSetCHAR(end, '\\0', begin, NULL);\n\tint numCom = 0;\t//?????????????????°???\n\tchar ch = '\\0';\t//?????????????????\\???????????\\????????????????´???¨???\n\tint i = 0, j = 0;\n\t//????????????????????\\??????\n\tx = begin;\n\tgetchar();\t//??´????????\\?????§????????????????????¨??????\n\t//???????????????1?????????????????????\n\twhile( scanf(\"%c\", &ch) == 1 && ch != '\\n' ){\n\t\tt = (Char*)malloc(sizeof(Char));\n\t\tt->c = ch;\n\t\tx->next = t;\n\t\tt->prev = x;\n\t\tx = x->next;\n\t}\n\tx->next = end;\n\tend->prev = x;\n\tx = begin->next;\t//x?????????????????????????????????\n\tif( scanf(\"%d\", &numCom) != 1 ){ return -1; }\t//??????????????°?????\\??????\n\tfor( i = 0; i < numCom; i++ ){\n\t\tOutput(begin, x);\n\t\tchar mCom[10], aCom[SIZE];\t//1?????????????????????(forward, backward, insert, delete)???2?????????????????????(char, word, any-text)???\n\t\tif( scanf(\"%s %[^\\n]\", mCom, aCom) != 2 ){ return -1; }\t//aCom????????????????????????????????????????????????\n\t\t//1???????????????????????§?????¶?????????????????????2???????????????????????????????????????????????????????????????\n\t\tif( strcmp(mCom, \"forward\") == 0 ){\n\t\t\tif( strcmp(aCom, \"char\") == 0 ){\n\t\t\t\t//x???end??§???????????????x????¬?????????????????????????????????????\n\t\t\t\tif( x != end ){ x = x->next; }\n\t\t\t}else if( strcmp(aCom, \"word\") == 0 ){\n\t\t\t\t//????????????????????????????????????????????°????????????????????????????????????????????????\n\t\t\t\tif( x->c == ' ' ){ for( ; x->next != NULL && x->c == ' '; x = x->next ); }\n\t\t\t\t//???????????°????????????????????????????¬??????\\??????????????§????????????????§????????????????\n\t\t\t\tfor( ; x->next != NULL && x->c != ' '; x = x->next );\n\t\t\t}\n\t\t}else if( strcmp(mCom, \"backward\") == 0 ){\n\t\t\tif( strcmp(aCom, \"char\") == 0 ){\n\t\t\t\t//x???1????????¨begin?????¢?????¬???????????´????????´?????????x????????????????????§???????????§???????????§????????´?????????1??????????????????x???????????????????????????\n\t\t\t\tif( x->prev != begin ){ x = x->prev; }\n\t\t\t}else if( strcmp(aCom, \"word\") == 0 ){\n\t\t\t\t//????????????????????????????????????????????°?????????????????????????????????????????????\n\t\t\t\tif( x->prev->c == ' ' ){ for( ; x->prev != begin && x->prev->c == ' '; x = x->prev ); }\n\t\t\t\t//???????????°???????????????????????????????????\\??????????????§????????????????§????????????????\n\t\t\t\tfor( ; x->prev != begin && x->prev->c != ' '; x = x->prev );\n\t\t\t}\n\t\t}else if( strcmp(mCom, \"insert\") == 0 ){\n\t\t\t//?????¨?????????????????????????¨???????????????????\n\t\t\tChar *nx;\n\t\t\tnx = x;\n\t\t\tx = x->prev;\n\t\t\t//?????????????????????????????§?????????????????????????????§???????¶??????????\n\t\t\tfor( j = 1; aCom[j] != '\\\"'; j++ ){\n\t\t\t\tt = (Char*)malloc(sizeof(Char));\n\t\t\t\tt->c = aCom[j];\n\t\t\t\tx->next = t;\n\t\t\t\tt->prev = x;\n\t\t\t\tx = x->next;\n\t\t\t}\n\t\t\t//??????????????£??????\n\t\t\tnx->prev = x;\n\t\t\tx->next = nx;\n\t\t\tx = x->next;\n\t\t}else if( strcmp(mCom, \"delete\") == 0 ){\n\t\t\tif( strcmp(aCom, \"char\") == 0 ){\n\t\t\t\tif( x->next != end && x != end ){\n\t\t\t\t\t//x->prev??¨x->next????????????????????????x????§£????????????\n\t\t\t\t\tChar *nx;\n\t\t\t\t\tnx = x->next;\t//2?????????????????????????????????\n\t\t\t\t\tx = x->prev;\n\t\t\t\t\tfree(x->next);\t//??????????????????????§£????????????\n\t\t\t\t\t//??????????????£??????\n\t\t\t\t\tx->next = nx;\n\t\t\t\t\tnx->prev = x;\n\t\t\t\t}\n\t\t\t}else if( strcmp(aCom, \"word\") == 0 ){\n\t\t\t\t//1???????????????(begin?????????)????¨??????????????????????????????????????????????????????????????????¨??£????????????\n\t\t\t\tChar *bx;\n\t\t\t\tbx = x->prev;\n\t\t\t\tif( x->next != end && x != end ){\n\t\t\t\t\tif( x->c == ' ' ){\n\t\t\t\t\t\t//????????????????????????????????????\n\t\t\t\t\t\tfor( ; x != end && x->c == ' '; free(x->prev) ){ x = x->next; }\n\t\t\t\t\t\t//??????????????£??????\n\t\t\t\t\t\tbx->next = x;\n\t\t\t\t\t\tx->prev = bx;\n\t\t\t\t\t}\n\t\t\t\t\t//?????????????????????????????§??????????????????????????????\n\t\t\t\t\tfor( ; x != end && x->c != ' '; free(x->prev) ){ x = x->next; }\n\t\t\t\t\t//??????????????£??????\n\t\t\t\t\tbx->next = x;\n\t\t\t\t\tx->prev = bx;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tOutput(begin, x);\t//x????????¨???????????????????????????\n\treturn 0;\n}\n\nint SetCHAR(Char *ch, char _c, Char *_prev, Char *_next){\n\tch->c = _c;\n\tch->next = _next;\n\tch->prev = _prev;\n\treturn 0;\n}\n\nint Output(Char *begin, Char *cursor){\n\tChar *x;\n\tfor( x = begin->next; x != NULL; x = x->next ){\n\t\tif( x == cursor ){ printf(\"^\"); }\t//???????????????????????¨?????´????????????'^'???????????????(?????????????????????'^'???????±????????????????)???\n\t\tif( x->next != NULL ){ printf(\"%c\", x->c); }\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n\n}"
  },
  {
    "language": "C",
    "code": "/* AOJ 1101 A Simple Offline Text Editor */\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n/* #define DEBUG */\n\n#ifdef DEBUG\n#define DEBUG_PRINT do {print_str(text, len, cursor);} while(0)\n#else\n#define DEBUG_PRINT (0)\n#endif\n\nvoid print_str(char *s, int len, int cursor);\n\nint\nmain(void)\n{\n    int n_texts, i;\n    char s[BUFSIZ];\n\n    fgets(s, BUFSIZ, stdin);\n    n_texts = atoi(s);\n\n    for (i = 0; i < n_texts; i++) {\n        char text[BUFSIZ];\n        int len;\n        int cursor = 0;\n        int n_commands, j;\n\n        fgets(text, BUFSIZ, stdin);\n        len = strlen(text);\n        if (text[len - 1] == '\\n') {\n            text[len - 1] = '\\0';\n            len--;\n        }\n\n        fgets(s, BUFSIZ, stdin);\n        n_commands = atoi(s);\n        for (j = 0; j < n_commands; j++) {\n            fgets(s, BUFSIZ, stdin);\n            if (strstr(s, \"forward char\") == s) {\n                if (cursor < len) cursor++;\n                DEBUG_PRINT;\n            } else if (strstr(s, \"forward word\") == s) {\n                while (cursor < len && text[cursor] == ' ')\n                    cursor++;\n                while (cursor < len && text[cursor] != ' ')\n                    cursor++;\n                DEBUG_PRINT;\n            } else if (strstr(s, \"backward char\") == s) {\n                if (cursor > 0) cursor--;\n                DEBUG_PRINT;\n            } else if (strstr(s, \"backward word\") == s) {\n                while (cursor > 0 && text[cursor - 1] == ' ')\n                    cursor--;\n                while (cursor > 0 && text[cursor - 1] != ' ')\n                    cursor--;\n                DEBUG_PRINT;\n            } else if (strstr(s, \"insert \") == s) {\n                char temp[BUFSIZ];\n                char *start = strchr(s, '\"') + 1;\n                char *end = strchr(start, '\"');\n                int len_arg = (int)(end - start);\n\n                if (cursor == len) {\n                    strncat(text, start, len_arg);\n                } else {\n                    strcpy(temp, text);\n\n                    strncpy(text + cursor, start, len_arg);\n                    text[cursor + len_arg] = '\\0';\n                    strcat(text, temp + cursor);\n                }\n\n                cursor += len_arg;\n                len += len_arg;\n                DEBUG_PRINT;\n            } else if (strstr(s, \"delete char\") == s) {\n                if (cursor < len) {\n                    char temp[BUFSIZ];\n\n                    strcpy(temp, text);\n\n                    text[cursor] = '\\0';\n                    strcat(text, temp + cursor + 1);\n\n                    len--;\n                }\n                DEBUG_PRINT;\n            } else if (strstr(s, \"delete word\") == s) {\n                if (cursor < len) {\n                    char temp[BUFSIZ];\n                    int word_end = cursor;\n                    int len_word = 0;\n\n                    while (word_end < len && text[word_end] == ' ') {\n                        word_end++;\n                        len_word++;\n                    }\n\n                    while (word_end < len && text[word_end] != ' ') {\n                        word_end++;\n                        len_word++;\n                    }\n\n                    strcpy(temp, text);\n                    strcpy(text + cursor, temp + word_end);\n                    len -= len_word;\n                }\n                DEBUG_PRINT;\n            }\n        }\n        print_str(text, len, cursor);\n    }\n\n    return 0;\n}\n\nvoid\nprint_str(char *s, int len, int cursor)\n{\n    int i;\n\n    if (len == 0) {\n        putchar('^');\n    } else {\n        for (i = 0; i < len; i++) {\n            if (i == cursor) putchar('^');\n            putchar(s[i]);\n        }\n\n        if (cursor == len) putchar('^');\n    }\n\n    putchar('\\n');\n}"
  },
  {
    "language": "C",
    "code": "/*\n\t??????????????´??¨??????\n\t????±??????????1W142208-3\n\t????????\\???2015/10/6\n\t?????????\n\t\t???????????????????????¨??????????????????????????????\n*/\n\n#include<stdio.h>\n#include<stdlib.h>\n\n#define SIZE 101\t//??????????????§????????°???\n\n//????????¨????????????????????????????????????????????????????????¨??§??????????????¢?????§???????§??????????\ntypedef struct CHAR Char;\nstruct CHAR{\n\tchar c;\t//?????????\n\tChar *prev;\t//????????????????????????next???????????´??????NULL???\n\tChar *next;\t//?¬??????????????????????prev???????????´??????NULL???\n};\n\nint Main();\t//???????????????\nint SetCHAR(Char *ch, char _c, Char *_prev, Char *_next);\t//Char?§???????????????????????????¢??°???\n\nint main(int argc, char *argv[]){\n\tint n = 0, i = 0;\t//????????????????????°???\n\tif( scanf(\"%d\", &n) != 1 ){ return -1; }\n\tfor( i = 0; i < n; i++ ){ Main(); }\n\treturn 0;\n}\n\nint Main(){\n\tChar *begin, *end, *x, *t;\t//???????????????('\\0'?????????)???????????????(?????????????´??????????)?????°?????¨????????????????????°???????????????????????????????????????????????????\n\t//begin??¨end???????????????\n\tbegin = (Char*)malloc(sizeof(Char));\n\tend = (Char*)malloc(sizeof(Char));\n\tSetCHAR(begin, '\\0', NULL, end);\n\tSetCHAR(end, '\\0', begin, NULL);\n\tint numCom = 0;\t//?????????????????°???\n\tchar ch = '\\0';\t//?????????????????\\???????????\\????????????????´???¨???\n\tint i = 0, j = 0;\n\t//????????????????????\\??????\n\tx = begin;\n\tgetchar();\t//??´????????\\?????§????????????????????¨??????\n\t//???????????????1?????????????????????\n\twhile( scanf(\"%c\", &ch) == 1 && ch != '\\n' ){\n\t\tt = (Char*)malloc(sizeof(Char));\n\t\tt->c = ch;\n\t\tx->next = t;\n\t\tt->prev = x;\n\t\tx = x->next;\n\t}\n\tx->next = end;\n\tend->prev = x;\n\tx = begin->next;\t//x?????????????????????????????????\n\tif( scanf(\"%d\", &numCom) != 1 ){ return -1; }\t//??????????????°?????\\??????\n\tfor( i = 0; i < numCom; i++ ){\n\t\tchar mCom[10], aCom[SIZE];\t//1?????????????????????(forward, backward, insert, delete)???2?????????????????????(char, word, any-text)???\n\t\tif( scanf(\"%s %[^\\n]\", mCom, aCom) != 2 ){ return -1; }\t//aCom????????????????????????????????????????????????\n\t\t//1???????????????????????§?????¶?????????????????????2???????????????????????????????????????????????????????????????\n\t\tif( strcmp(mCom, \"forward\") == 0 ){\n\t\t\tif( strcmp(aCom, \"char\") == 0 ){\n\t\t\t\t//x->NULL??????????????§???????????????????????§???????????????x????¬?????????????????????????????????????\n\t\t\t\tif( x->next != NULL ){ x = x->next; }\n\t\t\t}else if( strcmp(aCom, \"word\") == 0 ){\n\t\t\t\t//????????????????????????????????????????????°????????????????????????????????????????????????\n\t\t\t\tif( x->c == ' ' ){ for( ; x->next != NULL && x->next->c == ' '; x = x->next ); }\n\t\t\t\t//???????????°????????????????????????????¬??????\\??????????????§????????????????§????????????????\n\t\t\t\tfor( ; x->next != NULL && x->next->c != ' '; x = x->next );\n\t\t\t}\n\t\t}else if( strcmp(mCom, \"backward\") == 0 ){\n\t\t\tif( strcmp(aCom, \"char\") == 0 ){\n\t\t\t\t//x???1????????¨begin?????¢?????¬???????????´????????´?????????x???????????????????????§???????????§???????????§????????´?????????1??????????????????x???????????????????????????\n\t\t\t\tif( x->prev != begin ){ x = x->prev; }\n\t\t\t}else if( strcmp(aCom, \"word\") == 0 ){\n\t\t\t\t//????????????????????????????????????????????°?????????????????????????????????????????????\n\t\t\t\tif( x->c == ' ' ){ for( ; x->prev != begin && x->prev->c == ' '; x = x->prev ); }\n\t\t\t\t//???????????°???????????????????????????????????\\??????????????§????????????????§????????????????\n\t\t\t\tfor( ; x->prev != begin && x->prev->c != ' '; x = x->prev );\n\t\t\t}\n\t\t}else if( strcmp(mCom, \"insert\") == 0 ){\n\t\t\t//?????¨?????????????????????????¨???????????????????\n\t\t\tChar *bx;\n\t\t\tbx = x;\n\t\t\tx = x->prev;\n\t\t\t//?????????????????????????????§?????????????????????????????§???????¶??????????\n\t\t\tfor( j = 1; aCom[j] != '\\\"'; j++ ){\n\t\t\t\tt = (Char*)malloc(sizeof(Char));\n\t\t\t\tt->c = aCom[j];\n\t\t\t\tx->next = t;\n\t\t\t\tt->prev = x;\n\t\t\t\tx = x->next;\n\t\t\t}\n\t\t\t//??????????????£??????\n\t\t\tbx->prev = x;\n\t\t\tx->next = bx;\n\t\t}else if( strcmp(mCom, \"delete\") == 0 ){\n\t\t\tif( strcmp(aCom, \"char\") == 0 ){\n\t\t\t\tif( x->next != end && x != end ){\n\t\t\t\t\t//x??¨x->next->next????????????????????????x->next????§£????????????\n\t\t\t\t\tChar *nx;\n\t\t\t\t\tnx = x->next->next;\t//2?????????????????????????????????\n\t\t\t\t\tfree(x->next);\t//??????????????????????§£????????????\n\t\t\t\t\t//??????????????£??????\n\t\t\t\t\tx->next = nx;\n\t\t\t\t\tnx->prev = x;\n\t\t\t\t}\n\t\t\t}else if( strcmp(aCom, \"word\") == 0 ){\n\t\t\t\t//1???????????????(begin?????????)????¨??????????????????????????????????????????????????????????????????¨??£????????????\n\t\t\t\tChar *bx;\n\t\t\t\tbx = x->prev;\n\t\t\t\tif( x->next != end && x != end ){\n\t\t\t\t\tif( x->c == ' ' ){\n\t\t\t\t\t\t//????????????????????????????????????\n\t\t\t\t\t\tfor( ; x != end && x->c == ' '; free(x->prev) ){ x = x->next; }\n\t\t\t\t\t\t//??????????????£??????\n\t\t\t\t\t\tbx->next = x;\n\t\t\t\t\t\tx->prev = bx;\n\t\t\t\t\t}else{\n\t\t\t\t\t\t//?????????????????????????????§??????????????????????????????\n\t\t\t\t\t\tfor( ; x != end && x->c != ' '; free(x->prev) ){ x = x->next; }\n\t\t\t\t\t\t//??????????????£??????\n\t\t\t\t\t\tbx->next = x;\n\t\t\t\t\t\tx->prev = bx;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t//?????????????????????????¨?????????????\n\tChar *cursor;\n\tcursor = x;\n\t//??????????????????????????????\n\tfor( x = begin->next; x != NULL; x = x->next ){\n\t\tprintf(\"%c\", x->c);\n\t\t//???????????????????????¨?????´????????????'^'???????????????(?????????????????????'^'???????±????????????????)???\n\t\tif( x == cursor ){ printf(\"^\"); }\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n\nint SetCHAR(Char *ch, char _c, Char *_prev, Char *_next){\n\tch->c = _c;\n\tch->next = _next;\n\tch->prev = _prev;\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "/* AOJ 1101 A Simple Offline Text Editor */\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n/* #define DEBUG */\n\n#ifdef DEBUG\n#define DEBUG_PRINT do {print_str(text, len, cursor);} while(0)\n#else\n#define DEBUG_PRINT (0)\n#endif\n\nvoid print_str(char *s, int len, int cursor);\n\nint\nmain(void)\n{\n    int n_texts;\n    char s[BUFSIZ];\n\n    fgets(s, BUFSIZ, stdin);\n    n_texts = atoi(s);\n\n    while (n_texts--) {\n        char text[BUFSIZ];\n        int len;\n        int cursor = 0;\n        int n_commands;\n\n        fgets(text, BUFSIZ, stdin);\n        len = strlen(text);\n        if (text[len - 1] == '\\n') {\n            text[len - 1] = '\\0';\n            len--;\n        }\n        if (strchr(text, '\\r')) puts(\"BANG!\");\n\n        fgets(s, BUFSIZ, stdin);\n        n_commands = atoi(s);\n        while (n_commands--) {\n            fgets(s, BUFSIZ, stdin);\n            if (strstr(s, \"forward char\") == s) {\n                if (cursor < len) cursor++;\n                DEBUG_PRINT;\n            } else if (strstr(s, \"forward word\") == s) {\n                while (cursor < len && text[cursor] == ' ')\n                    cursor++;\n                while (cursor < len && text[cursor] != ' ')\n                    cursor++;\n                DEBUG_PRINT;\n            } else if (strstr(s, \"backward char\") == s) {\n                if (cursor > 0) cursor--;\n                DEBUG_PRINT;\n            } else if (strstr(s, \"backward word\") == s) {\n                while (cursor > 0 && text[cursor - 1] == ' ')\n                    cursor--;\n                while (cursor > 0 && text[cursor - 1] != ' ')\n                    cursor--;\n                DEBUG_PRINT;\n            } else if (strstr(s, \"insert \") == s) {\n                char temp[BUFSIZ];\n                char *start = strchr(s, '\"') + 1;\n                char *end = strchr(start, '\"');\n                int len_arg = (int)(end - start);\n\n                if (cursor == len) {\n                    strncat(text, start, len_arg);\n                } else {\n                    strcpy(temp, text);\n\n                    strncpy(text + cursor, start, len_arg);\n                    text[cursor + len_arg] = '\\0';\n                    strcat(text, temp + cursor);\n                }\n\n                cursor += len_arg;\n                len += len_arg;\n                DEBUG_PRINT;\n            } else if (strstr(s, \"delete char\") == s) {\n                if (cursor < len) {\n                    char temp[BUFSIZ];\n\n                    strcpy(temp, text);\n\n                    text[cursor] = '\\0';\n                    strcat(text, temp + cursor + 1);\n\n                    len--;\n                }\n                DEBUG_PRINT;\n            } else if (strstr(s, \"delete word\") == s) {\n                if (cursor < len) {\n                    char temp[BUFSIZ];\n                    int word_end = cursor;\n                    int len_word = 0;\n\n                    while (word_end < len && text[word_end] == ' ') {\n                        word_end++;\n                        len_word++;\n                    }\n\n                    while (word_end < len && text[word_end] != ' ') {\n                        word_end++;\n                        len_word++;\n                    }\n\n                    strcpy(temp, text);\n                    strcpy(text + cursor, temp + word_end);\n                    len -= len_word;\n                }\n                DEBUG_PRINT;\n            }\n        }\n        print_str(text, len, cursor);\n    }\n\n    return 0;\n}\n\nvoid\nprint_str(char *s, int len, int cursor)\n{\n    int i;\n\n    if (len == 0) {\n        putchar('^');\n    } else {\n        for (i = 0; i < len; i++) {\n            if (i == cursor) putchar('^');\n            putchar(s[i]);\n        }\n\n        if (cursor == len) putchar('^');\n    }\n\n    putchar('\\n');\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<string.h>\n\nchar text[101];\nint cursor,length=0;\n\nvoid initialize()\n{\n    int i;\n    for(i=0;i<101;i++)\n    {\n        text[i]=0;\n    }\n}\n\nvoid run(int first,int second)\n{\n    int i;\n\n    if(first=='f')\n    {\n        if(second=='c')\n        {\n            if(cursor!=length)\n            {\n                cursor++;\n            }\n        }\n        else if(second=='w')\n        {\n            for(i=cursor+2;i<strlen(text);i++)\n            {\n                if(text[i]==32)\n                {\n                    break;\n                }\n            }\n            cursor=i;\n        }\n    }\n    else if(first=='b')\n    {\n        if(second=='c')\n        {\n            if(cursor!=0)\n            {\n                cursor--;\n            }\n        }\n        else if(second=='w')\n        {\n            for(i=cursor-1;i>=0;i--)\n            {\n                if(text[i]==32)\n                {\n                    break;\n                }\n            }\n            cursor=i+1;\n        }\n    }\n    else if(first=='d')\n    {\n        if(second=='c')\n        {\n            int c;\n            for(i=cursor;i<length;i++)\n            {\n                text[i]=text[i+1];\n                if(text[i+1]==0)\n                {\n                    break;\n                }\n            }\n            length--;\n        }\n        else if(second=='w')\n        {\n            int len;\n            for(i=cursor;i<length;i++)\n            {\n                if(text[i]==32)\n                {\n                    break;\n                }\n            }\n            len=i-cursor;\n            for(i=cursor;i<length;i++)\n            {\n                text[i]=text[i+len+1];\n                if(text[i+len+1]==0)\n                {\n                    break;\n                }\n            }\n            length=strlen(text);\n        }\n    }\n}\n\nint main(void)\n{\n    int n,m;\n    int i,j,k;\n\n    scanf(\"%d\\n\",&n);\n\n    for(i=0;i<n;i++)\n    {\n        initialize();\n        cursor=0;\n        gets(text);\n\n        length=strlen(text);\n\n        scanf(\"%d%*c\",&m);\n\n        for(j=0;j<m;j++)\n        {\n            char command[100]={};\n            scanf(\"%s%*c\",command);\n\n            if(command[0]=='i')\n            {\n                char plus[101]={};\n                char temporary[101]={};\n\n                scanf(\"%*c\");\n                gets(plus);\n\n                if(cursor>0)\n                {\n                    strcpy(temporary,text);\n                    strncpy(text,temporary,cursor-1);\n                    text[cursor]='\\0';\n                    strcat(text,plus);\n\n                    int len=strlen(text)-1;\n                    int k,l=cursor;\n                    for(k=len;k<101;k++)\n                    {\n                        text[k]=temporary[l];\n                        if(temporary[l]==0)\n                        {\n                            break;\n                        }\n                        l++;\n                    }\n                }\n                else\n                {\n                    strncpy(temporary,plus,strlen(plus)-1);\n                    temporary[strlen(plus)]='\\0';\n                    strcat(temporary,text);\n                    strcpy(text,temporary);\n                }\n                cursor+=strlen(plus)-1;\n            }\n            else\n            {\n                char command2[10];\n                scanf(\"%s%*c\",command2);\n                run(command[0],command2[0]);\n            }\n\n            /*for(k=0;k<cursor;k++)\n            {\n                printf(\"%c\",text[k]);\n            }\n            printf(\"^\");\n            for(k=cursor;k<strlen(text)+1;k++)\n            {\n                printf(\"%c\",text[k]);\n            }\n            printf(\"\\n\");\n            */\n        }\n\n        for(k=0;k<cursor;k++)\n        {\n            printf(\"%c\",text[k]);\n        }\n        printf(\"^\");\n        for(k=cursor;k<strlen(text)+1;k++)\n        {\n            printf(\"%c\",text[k]);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}"
  },
  {
    "language": "C",
    "code": "/*\n\t1009-4 A Simple Offline Text Editor[1998Tokyo D2]\n\tコマンドによってテキストを操作するプログラム\n\n\tDate:2015-10-11\n\tAuthor:笠原 レミン (1W143022-6)\n*/\n#include <stdio.h>\n#include <string.h>\n#define TEXT_BUFFER_SIZE 2000\n#define COMMAND_BUFFER_SIZE 200\n\nchar text[TEXT_BUFFER_SIZE+1];\nint length;\nint cursor;\n\n/* カーソルを右に1文字移動させる */\nvoid forwardChar() {\n\tif (cursor < length) cursor++;\n}\n/* カーソルを右に1単語移動させる */\nvoid forwardWord() {\n\tfor (; text[cursor] == ' ' && cursor < length; cursor++); /* カーソル直後の空白を無視する */\n\tfor (; text[cursor] != ' ' && cursor < length; cursor++);\n}\n/* カーソルを左に1文字移動させる */\nvoid backwardChar() {\n\tif (cursor > 0) cursor--;\n}\n/* カーソルを左に1単語移動させる */\nvoid backwardWord() {\n\tfor (; cursor > 0 && text[cursor-1] == ' '; cursor--); /* カーソル直前の空白を無視する */\n\tfor (; cursor > 0 && text[cursor-1] != ' '; cursor--);\n}\n/* カーソルの右に文字列を挿入する カーソルは挿入した文字列の右に移動する */\nvoid insert(char *s) {\n\tchar buffer[TEXT_BUFFER_SIZE];\n\tint l = strlen(s);\n\tstrncpy(buffer, text, cursor); /* カーソルより左 */\n\tstrncpy(buffer + cursor, s, COMMAND_BUFFER_SIZE); /* 挿入部分 */\n\tstrncpy(buffer + cursor + l, text + cursor, TEXT_BUFFER_SIZE - (cursor + l)); /* カーソルより右 */\n\tstrncpy(text, buffer, TEXT_BUFFER_SIZE); /* bufferからtextに戻す */\n\tlength = strlen(text);\n\tcursor += l;\n}\n/* カーソルの右をn文字削除する */\nvoid deleteChars(int n) {\n\tint i;\n\tif (cursor + n < length) {\n\t\tfor (i = n; i <= length; i++) text[cursor+i-n] = text[cursor+i]; /* 削除部分より後ろの文字を左へ詰める */\n\t} else {\n\t\ttext[cursor] = '\\0'; /* カーソルの右にn文字以上無い */\n\t}\n\tlength = strlen(text);\n}\n/* カーソルの右を1文字削除する */\nvoid deleteChar() {\n\tdeleteChars(1);\n}\n/* カーソルの右を1単語削除する */\nvoid deleteWord() {\n\tint i = 0;\n\t/* 単語の終わりを探す */\n\tfor (; text[cursor + i] == ' ' && cursor + i < length; i++);\n\tif (cursor + i == length) return; /* 単語が無ければ何も削除しない */\n\tfor (; text[cursor + i] != ' ' && cursor + i < length; i++);\n\tdeleteChars(i);\n}\n\n/* テキストの状態をカーソルを含めて出力する */\nvoid printText() {\n\tint i;\n\tfor (i = 0; i < cursor; i++) printf(\"%c\", text[i]); /* カーソルより左 */\n\tprintf(\"^\"); /* カーソル */\n\tfor (; i < length; i++) printf(\"%c\", text[i]); /* カーソルより右 */\n\tprintf(\"\\n\");\n}\n\nint main(void) {\n\tint n; /* データセット数 */\n\tint m; /* コマンド数 */\n\tchar command[110];\n\tint i, j;\n\n\tscanf(\"%d%*1[\\n]\", &n);\n\tfor (i = 0; i < n; i++) {\n\t\t/* 初期テキストを読み込む */\n\t\tfgets(text, TEXT_BUFFER_SIZE, stdin);\n\t\tlength = strlen(text);\n\t\t/* 改行を除去する */\n\t\ttext[length - 1] = '\\0';\n\t\tlength--;\n\t\t/* カーソルの位置を探す */\n\t\tcursor = 0;\n\t\tfor (j = 0; j < length; j++) {\n\t\t\tif (text[cursor] == '^') {\n\t\t\t\tcursor = j;\n\t\t\t\ttext[cursor] = ' ';\n\t\t\t}\n\t\t}\n\n\t\t/* コマンドを処理する */\n\t\tscanf(\"%d%*1[\\n]\", &m);\n\t\tfor (j = 0; j < m; j++) {\n\t\t\tfgets(command, COMMAND_BUFFER_SIZE, stdin);\n\n\t\t\tint l = strlen(command);\n\t\t\tif (command[l - 1] == '\\n') command[l - 1] = '\\0'; /* 改行除去 */\n\n\t\t\tif (strcmp(command, \"forward char\") == 0) forwardChar();\n\t\t\telse if (strcmp(command, \"forward word\") == 0) forwardWord();\n\t\t\telse if (strcmp(command, \"backward char\") == 0) backwardChar();\n\t\t\telse if (strcmp(command, \"backward word\") == 0) backwardWord();\n\t\t\telse if (strcmp(command, \"delete char\") == 0) deleteChar();\n\t\t\telse if (strcmp(command, \"delete word\") == 0) deleteWord();\n\t\t\telse if (strncmp(command, \"insert\", 6) == 0) {\n\t\t\t\tl = strlen(command);\n\t\t\t\tif (command[l - 1] == '\\\"') command[l - 1] = '\\0'; /* 最後の「\"」をNULL文字に置換する */\n\t\t\t\tinsert(command + 8); /* 「insert \"」の次の文字から先を insert する */\n\t\t\t}\n\t\t}\n\n\t\tprintText(); /* 出力 */\n\t}\n    return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<string.h>\n\nvoid process_commands(char *buf, int *cursor);\nvoid print_result(char *buf, int cursor);\nvoid forward_char(char *buf, int *cursor);\nvoid forward_word(char *buf, int *cursor);\nvoid backward_char(char *buf, int *cursor);\nvoid backward_word(char *buf, int *cursor);\nvoid insert_text(char *buf, int *cursor, char *text);\nvoid delete_char(char *buf, int cursor);\nvoid delete_word(char *buf, int cursor);\n\nint main()\n{\n    char buf[1024];\n    char numbuf[8];\n    int cursor;\n    int n, m;\n    int i, j;\n\n    /*\n    cursor = 0;\n    strcpy(buf, \"Hallow, Word.\");\n    forward_char(buf, &cursor);\n    delete_word(buf, cursor);\n    insert_text(buf, &cursor, \"\\\"ello, \\\"\");\n    printf(\"%s\\n\", buf);\n    */\n\n    fgets(numbuf, sizeof(numbuf), stdin);\n    sscanf(numbuf, \"%d\", &n);\n\n    for(i = 0; i < n; i++){\n        cursor = 0;\n        fgets(buf, sizeof(buf), stdin);\n        buf[strlen(buf)-1] = '\\0';\n        fgets(numbuf, sizeof(numbuf), stdin);\n        sscanf(numbuf, \"%d\", &m);\n        for(j = 0; j < m; j++) {\n            process_commands(buf, &cursor);\n        }\n        print_result(buf, cursor);\n    }\n\n    return 0;\n}\n\nvoid process_commands(char *buf, int *cursor)\n{\n    char command[128];\n    fgets(command, sizeof(command), stdin);\n    command[strlen(command)-1] = '\\0';\n\n    if(strcmp(command, \"forward char\") == 0) forward_char(buf, cursor);\n    else if(strcmp(command, \"forward word\") == 0) forward_word(buf, cursor);\n    else if(strcmp(command, \"backward word\") == 0) backward_word(buf, cursor);\n    else if(strcmp(command, \"backward char\") == 0) backward_char(buf, cursor);\n    else if(strncmp(command, \"insert\", strlen(\"insert\")) == 0)\n        insert_text(buf, cursor, command+strlen(\"insert \"));\n    else if(strcmp(command, \"delete char\") == 0) delete_char(buf, *cursor);\n    else if(strcmp(command, \"delete word\") == 0) delete_word(buf, *cursor);\n}\n\nvoid forward_char(char *buf, int *cursor)\n{\n    if(*cursor == strlen(buf)) return;\n    (*cursor)++;\n}\n\nvoid forward_word(char *buf, int *cursor)\n{\n    int tmp;\n    for(tmp = *cursor; buf[tmp] == ' '; tmp++);\n    for(; tmp < strlen(buf); tmp++)\n        if(buf[tmp] == ' ') break;\n    *cursor = tmp;\n}\n\nvoid backward_char(char *buf, int *cursor)\n{\n    if(*cursor == 0) return;\n    (*cursor)--;\n}\n\nvoid backward_word(char *buf, int *cursor)\n{\n    int tmp;\n    if(*cursor == 0) return;\n    for(tmp = *cursor-1; buf[tmp] == ' '; tmp--);\n    for(; tmp >= 0; tmp--)\n        if(buf[tmp] == ' ') break;\n    *cursor = tmp;\n}\n\nvoid insert_text(char *buf, int *cursor, char *text_with_quote)\n{\n    char tmp[1024];\n    char text[128];\n    int len = strlen(text_with_quote) - 2;\n    int i;\n\n    for(i = 0; i < len; i++)\n        text[i] = text_with_quote[i+1];\n    text[len] = '\\0';\n    \n    len = strlen(text);\n    strcpy(tmp, buf+(*cursor));\n    strcpy(buf+(*cursor), text);\n    *cursor += len;\n    strcpy(buf+(*cursor), tmp);\n}\n\nvoid delete_char(char *buf, int cursor)\n{\n    if(cursor == strlen(buf)) return;\n    char tmp[1024];\n    strcpy(tmp, buf+cursor);\n    strcpy(buf+cursor, tmp+1);\n}\n\nvoid delete_word(char *buf, int cursor)\n{\n    int head = 0;\n    char tmp[1024];\n\n    for(head = 0; cursor+head < strlen(buf); head++)\n        if(buf[cursor+head] == ' '){head++; break;}\n    if(cursor+head == strlen(buf)) return;\n\n    strcpy(tmp, buf+cursor+head);\n    strcpy(buf+cursor, tmp);\n}\n\nvoid print_result(char *buf, int cursor)\n{\n    int i;\n    for(i = 0; i < cursor; i++) putchar(buf[i]);\n    putchar('^');\n    for(; i < strlen(buf); i++) putchar(buf[i]);\n    putchar('\\n');\n}\n\n"
  },
  {
    "language": "C",
    "code": "/************************************************************\n * NOTICE\n *      This solution code is <<NOT>> accepted by AOJ.\n * Latest, this code was rated as WA: Presentation Error.\n************************************************************/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nstatic\nchar cln[ 256 ];\n\nvoid getNextLine (\n  void\n  )\n{\n  fgets ( cln, sizeof ( cln ), stdin );\n  *( strchr ( cln, '\\n' ) ) = '\\0';\n}\n\n/** Application main entry point. */\nint main (\n  int     argc,\n  char  * argv[ ]\n  )\n{\n  int tc;\n\n  getNextLine ( );\n  tc = atoi ( cln );\n\n  while ( tc-- )\n  {\n    char    s[ 1024 ];\n    char  * c\n       ,  * e\n       ,  * p;\n    int n;\n\n    getNextLine ( );\n    strcpy ( s, cln );\n    c = s; e = s + strlen ( s );\n\n    getNextLine ( );\n    n = atoi ( cln );\n\n    while ( n-- )\n    {\n      getNextLine ( );\n\n      if ( !strcmp ( cln, \"forward char\" ) )\n      {\n        c += !!( c != e );\n      }\n      else if ( !strcmp ( cln, \"forward word\" ) )\n      {\n        while ( c != e && *c == ' ' ) ++c;\n        while ( c != e && *c != ' ' ) ++c;\n      }\n      else if ( !strcmp ( cln, \"backward char\" ) )\n      {\n        c -= !!( c != s );\n      }\n      else if ( !strcmp ( cln, \"backward word\" ) )\n      {\n        while ( c != s && c[ -1 ] == ' ' ) --c;\n        while ( c != s && c[ -1 ] != ' ' ) --c;\n      }\n      else if ( !strcmp ( cln, \"delete char\" ) )\n      {\n        for ( p = c; p != e && p + 1 != e; ++p ) p[ 0 ] = p[ 1 ];\n        e -= !!( c != e );\n      }\n      else if ( !strcmp ( cln, \"delete word\" ) )\n      {\n        size_t len;\n\n        p = c;\n        while ( p != e && *p == ' ' ) ++p;\n        while ( p != e && *p != ' ' ) ++p;\n        len = p - c;\n\n        for ( p = c; p != e && p + len != e; ++p ) p[ 0 ] = p[ len ];\n        e -= len;\n      }\n      else /* insert */\n      {\n        size_t len;\n\n        for ( p = cln + 8; *p != '\\\"'; ++p );\n        len = p - ( cln + 8 );\n\n        e += len;\n        for ( p = e; p - len != c; --p )  p[ -1 ] = p[ -( len + 1 ) ];\n\n        for ( p = c; p != c + len; ++p )  *p = cln[ 8 + ( p - c ) ];\n        c += len;\n      }\n    }\n\n    for ( p = s; ( p - 1 ) != e; ++p )\n    {\n      if ( p == c ) putchar ( '^' );\n      if ( p != e ) putchar ( *p );\n    }\n    puts ( \"\" );\n  }\n\n  return ( 0 );\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint main(void) {\n\tint text_num,now_text;\n\tchar buffer[2000];\n\tint command_num,now_command;\n\tchar command[200];\n\tchar* cptr;\n\tchar* hikisuu;\n\tint cursor;\n\tint buffer_length;\n\tint text_length;\n\tint word_flag;\n\tint i;\n\tscanf(\"%d \",&text_num);\n\tfor(now_text=0;now_text<text_num;now_text++) {\n\t\tfgets(buffer,sizeof(buffer),stdin);\n\t\tcptr=strchr(buffer,'\\n');\n\t\tif(cptr)*cptr=0;\n\t\tscanf(\"%d \",&command_num);\n\t\tcursor=0;\n\t\tbuffer_length=strlen(buffer);\n\t\tfor(now_command=0;now_command<command_num;now_command++) {\n\t\t\tfgets(command,sizeof(command),stdin);\n\t\t\tcptr=strchr(command,'\\n');\n\t\t\tif(cptr)*cptr=0;\n\t\t\thikisuu=strchr(command,' ');\n\t\t\tif(hikisuu) {\n\t\t\t\t*hikisuu=0;\n\t\t\t\thikisuu++;\n\t\t\t} else hikisuu=&command[strlen(command)];\n\n\t\t\tif(strcmp(command,\"forward\")==0) {\n\t\t\t\tif(strcmp(hikisuu,\"char\")==0) {\n\t\t\t\t\tif(cursor<buffer_length)cursor++;\n\t\t\t\t} else if(strcmp(hikisuu,\"word\")==0) {\n\t\t\t\t\tword_flag=0;\n\t\t\t\t\tfor(;cursor<buffer_length;cursor++) {\n\t\t\t\t\t\tif(isspace(buffer[cursor])) {\n\t\t\t\t\t\t\tif(word_flag)break;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tword_flag=1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else return 1;\n\t\t\t} else if(strcmp(command,\"backward\")==0) {\n\t\t\t\tif(strcmp(hikisuu,\"char\")==0) {\n\t\t\t\t\tif(cursor>0)cursor--;\n\t\t\t\t} else if(strcmp(hikisuu,\"word\")==0) {\n\t\t\t\t\tword_flag=0;\n\t\t\t\t\tfor(cursor--;cursor>=0;cursor--) {\n\t\t\t\t\t\tif(isspace(buffer[cursor])) {\n\t\t\t\t\t\t\tif(word_flag)break;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tword_flag=1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcursor++;\n\t\t\t\t} else return 1;\n\t\t\t} else if(strcmp(command,\"insert\")==0) {\n\t\t\t\ttext_length=strlen(hikisuu)-2;\n\t\t\t\tif(hikisuu[0]!='\\\"' || hikisuu[text_length+1]!='\\\"') {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\tmemmove(&buffer[cursor+text_length],&buffer[cursor],\n\t\t\t\t\tstrlen(&buffer[cursor])+1);\n\t\t\t\tmemmove(&buffer[cursor],&hikisuu[1],text_length);\n\t\t\t\tcursor+=text_length;\n\t\t\t\tbuffer_length=strlen(buffer);\n\t\t\t} else if(strcmp(command,\"delete\")==0) {\n\t\t\t\tif(strcmp(hikisuu,\"char\")==0) {\n\t\t\t\t\tmemmove(&buffer[cursor],&buffer[cursor+1],\n\t\t\t\t\t\tstrlen(&buffer[cursor+1])+1);\n\t\t\t\t} else if(strcmp(hikisuu,\"word\")==0) {\n\t\t\t\t\tword_flag=0;\n\t\t\t\t\tfor(i=0;cursor+i<buffer_length;i++) {\n\t\t\t\t\t\tif(isspace(buffer[cursor+i])) {\n\t\t\t\t\t\t\tif(word_flag)break;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tword_flag=1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(word_flag) {\n\t\t\t\t\t\tmemmove(&buffer[cursor],&buffer[cursor+i],\n\t\t\t\t\t\t\tstrlen(&buffer[cursor+i])+1);\n\t\t\t\t\t}\n\t\t\t\t} else return 1;\n\t\t\t\tbuffer_length=strlen(buffer);\n\t\t\t} else return 1;\n\t\t}\n\t\tfor(i=0;i<buffer_length;i++) {\n\t\t\tif(cursor==i)putchar('^');\n\t\t\tputchar(buffer[i]);\n\t\t}\n\t\tif(cursor==buffer_length)putchar('^');\n\t\tputchar('\\n');\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <cstdio>\n#include <cctype>\n#include <cstring>\n#include <string>\n\n#define MIN(A,B) \\\n  ( (B) < (A) ? (B) : (A) )\n#define MAX(A,B) \\\n  ( (B) > (A) ? (B) : (A) )\n\nusing namespace std;\n\n/** Application main entry point. */\nint\nmain (\n  int     argc,\n  char  * argv[ ]\n  )\n{\n  char buf[ 256 ];\n  int n;\n\n  fgets ( buf, sizeof ( buf ), stdin );\n  sscanf ( buf, \"%d\", &n );\n  while ( n-- )\n  {\n    string res;\n    int m;\n    int p = 0;\n\n    fgets ( buf, sizeof ( buf ), stdin );\n    *( strchr ( buf, '\\n' ) ) = '\\0';\n    res.assign ( buf );\n\n    fgets ( buf, sizeof ( buf ), stdin );\n    sscanf ( buf, \"%d\", &m );\n\n    while ( m-- )\n    {\n      fgets ( buf, sizeof ( buf ), stdin );\n\n      if ( !strncmp ( buf, \"forward char\", 12 ) )\n      {\n        ++p;\n        p = MIN( p, res.size ( ) );\n        continue ;\n      }\n      if ( !strncmp ( buf, \"backward char\", 13 ) )\n      {\n        --p;\n        p = MAX( p, 0 );\n        continue ;\n      }\n      if ( !strncmp ( buf, \"forward word\", 12 ) )\n      {\n        while ( p < res.size ( ) && isspace ( res[ p ] ) ) ++p;\n        while ( p < res.size ( ) && !isspace ( res[ p ] ) ) ++p;\n        continue ;\n      }\n      if ( !strncmp ( buf, \"backward word\", 13 ) )\n      {\n        while ( p > 0 && isspace ( res[ p - 1 ] ) ) --p;\n        while ( p > 0 && !isspace ( res[ p - 1 ] ) ) --p;\n        continue ;\n      }\n      if ( !strncmp ( buf, \"insert\", 6 ) )\n      {\n        *( strrchr ( buf, '\\\"' ) ) = '\\0';\n        res.insert ( p, strchr ( buf, '\\\"' ) + 1 );\n        p += strlen ( strchr ( buf, '\\\"' ) + 1 );\n\n        continue ;\n      }\n      if ( !strncmp ( buf, \"delete char\", 11 ) )\n      {\n        if ( p < res.size ( ) ) res.erase ( p, 1 );\n\n        continue ;\n      }\n      if ( !strncmp ( buf, \"delete word\", 11 ) )\n      {\n        int q = p;\n\n        while ( q < res.size ( ) && isspace ( res[ q ] ) ) ++q;\n        while ( q < res.size ( ) && !isspace ( res[ q ] ) ) ++q;\n        res.erase ( p, q - p );\n\n        continue ;\n      }\n    }\n\n    printf ( \"%s^%s\\n\"\n           , res.substr ( 0, p ).c_str ( )\n           , res.substr ( p, res.size ( ) - p ).c_str ( ) );\n  }\n\n  return ( 0 );\n}"
  },
  {
    "language": "C",
    "code": "/************************************************************\n * NOTICE\n *      This solution code is <<NOT>> accepted by AOJ.\n * Latest, this code was rated as WA: Presentation Error.\n************************************************************/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nstatic\nchar cln[ 256 ];\n\nvoid getNextLine (\n  void\n  )\n{\n  fgets ( cln, sizeof ( cln ), stdin );\n  *( strchr ( cln, '\\n' ) ) = '\\0';\n}\n\n/** Application main entry point. */\nint main (\n  int     argc,\n  char  * argv[ ]\n  )\n{\n  int tc;\n\n  getNextLine ( );\n  tc = atoi ( cln );\n\n  while ( tc-- )\n  {\n    char    s[ 1024 ];\n    char  * c\n       ,  * e\n       ,  * p;\n    int n;\n\n    getNextLine ( );\n    strcpy ( s, cln );\n    c = s; e = s + strlen ( s );\n\n    getNextLine ( );\n    n = atoi ( cln );\n\n    while ( n-- )\n    {\n      getNextLine ( );\n\n      if ( !strcmp ( cln, \"forward char\" ) )\n      {\n        c += !!( c != e );\n      }\n      else if ( !strcmp ( cln, \"forward word\" ) )\n      {\n        while ( c != e && *c == ' ' ) ++c;\n        while ( c != e && *c != ' ' ) ++c;\n      }\n      else if ( !strcmp ( cln, \"backward char\" ) )\n      {\n        c -= !!( c != s );\n      }\n      else if ( !strcmp ( cln, \"backward word\" ) )\n      {\n        while ( c != s && c[ -1 ] == ' ' ) --c;\n        while ( c != s && c[ -1 ] != ' ' ) --c;\n      }\n      else if ( !strcmp ( cln, \"delete char\" ) )\n      {\n        for ( p = c; p != e && p + 1 != e; ++p ) p[ 0 ] = p[ 1 ];\n        e -= !!( c != e );\n      }\n      else if ( !strcmp ( cln, \"delete word\" ) )\n      {\n        size_t len;\n\n        p = c;\n        while ( p != e && *p == ' ' ) ++p;\n        while ( p != e && *p != ' ' ) ++p;\n        len = p - c;\n\n        for ( p = c; p != e && p + len != e; ++p ) p[ 0 ] = p[ len ];\n        e -= len;\n      }\n      else /* insert */\n      {\n        size_t len;\n\n        for ( p = cln + 8; *p != '\\\"'; ++p );\n        len = p - ( cln + 8 );\n\n        e += len;\n        for ( p = e; p - len != c; --p )  p[ -1 ] = p[ -( len + 1 ) ];\n\n        for ( p = c; p != c + len; ++p )  *p = cln[ 8 + ( p - c ) ];\n        c += len;\n      }\n    }\n\n    for ( p = s; ( p - 1 ) != e; ++p )\n    {\n      if ( p == c ) putchar ( '^' );\n      if ( p != e ) putchar ( *p );\n    }\n    puts ( \"\" );\n  }\n\n  return ( 0 );\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<string.h>\n\nvoid process_commands(char *buf, int *cursor);\nvoid print_result(char *buf, int cursor);\nvoid forward_char(char *buf, int *cursor);\nvoid forward_word(char *buf, int *cursor);\nvoid backward_char(char *buf, int *cursor);\nvoid backward_word(char *buf, int *cursor);\nvoid insert_text(char *buf, int *cursor, char *text);\nvoid delete_char(char *buf, int cursor);\nvoid delete_word(char *buf, int cursor);\n\nint main()\n{\n    char buf[1024];\n    char numbuf[8];\n    int cursor;\n    int n, m;\n    int i, j;\n\n    fgets(numbuf, sizeof(numbuf), stdin);\n    sscanf(numbuf, \"%d\", &n);\n\n    for(i = 0; i < n; i++){\n        cursor = 0;\n        fgets(buf, sizeof(buf), stdin);\n        buf[strlen(buf)-1] = '\\0';\n        fgets(numbuf, sizeof(numbuf), stdin);\n        sscanf(numbuf, \"%d\", &m);\n        for(j = 0; j < m; j++) {\n            process_commands(buf, &cursor);\n        }\n        print_result(buf, cursor);\n        if(i != n-1) putchar('\\n');\n    }\n\n    return 0;\n}\n\nvoid process_commands(char *buf, int *cursor)\n{\n    char command[128];\n    fgets(command, sizeof(command), stdin);\n    command[strlen(command)-1] = '\\0';\n\n    if(strcmp(command, \"forward char\") == 0) forward_char(buf, cursor);\n    else if(strcmp(command, \"forward word\") == 0) forward_word(buf, cursor);\n    else if(strcmp(command, \"backward word\") == 0) backward_word(buf, cursor);\n    else if(strcmp(command, \"backward char\") == 0) backward_char(buf, cursor);\n    else if(strncmp(command, \"insert\", strlen(\"insert\")) == 0)\n        insert_text(buf, cursor, command+strlen(\"insert \"));\n    else if(strcmp(command, \"delete char\") == 0) delete_char(buf, *cursor);\n    else if(strcmp(command, \"delete word\") == 0) delete_word(buf, *cursor);\n}\n\nvoid forward_char(char *buf, int *cursor)\n{\n    if(*cursor == strlen(buf)) return;\n    (*cursor)++;\n}\n\nvoid forward_word(char *buf, int *cursor)\n{\n    int tmp;\n    for(tmp = *cursor; buf[tmp] == ' '; tmp++);\n    for(; tmp < strlen(buf); tmp++)\n        if(buf[tmp] == ' ') break;\n    *cursor = tmp;\n}\n\nvoid backward_char(char *buf, int *cursor)\n{\n    if(*cursor == 0) return;\n    (*cursor)--;\n}\n\nvoid backward_word(char *buf, int *cursor)\n{\n    int tmp;\n    if(*cursor == 0) return;\n    for(tmp = *cursor-1; buf[tmp] == ' '; tmp--);\n    for(; tmp >= 0; tmp--)\n        if(buf[tmp] == ' ') break;\n    if(tmp == 0) *cursor = tmp;\n    else *cursor = tmp+1;\n}\n\nvoid insert_text(char *buf, int *cursor, char *text_with_quote)\n{\n    char tmp[1024];\n    char text[128];\n    int len = strlen(text_with_quote) - 2;\n    int i;\n\n    for(i = 0; i < len; i++)\n        text[i] = text_with_quote[i+1];\n    text[len] = '\\0';\n    \n    len = strlen(text);\n    strcpy(tmp, buf+(*cursor));\n    strcpy(buf+(*cursor), text);\n    *cursor += len;\n    strcpy(buf+(*cursor), tmp);\n}\n\nvoid delete_char(char *buf, int cursor)\n{\n    if(cursor == strlen(buf)) return;\n    char tmp[1024];\n    strcpy(tmp, buf+cursor);\n    strcpy(buf+cursor, tmp+1);\n}\n\nvoid delete_word(char *buf, int cursor)\n{\n    int head = 0;\n    char tmp[1024];\n\n    for(head = 0; buf[cursor+head] == ' '; head++);\n    if(cursor+head == strlen(buf)) return;\n    for(; cursor+head < strlen(buf); head++)\n        if(buf[cursor+head] == ' '){head++; break;}\n\n    strcpy(tmp, buf+cursor+head);\n    strcpy(buf+cursor, tmp);\n}\n\nvoid print_result(char *buf, int cursor)\n{\n    int i;\n    for(i = 0; i < cursor; i++) putchar(buf[i]);\n    putchar('^');\n    for(; i < strlen(buf); i++) putchar(buf[i]);\n}\n\n"
  },
  {
    "language": "C",
    "code": "// Aizu 1101: A Simple Offline Text Editor\n// 2017.9.18 bal4u@uu\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar buf[1010], *p;\n\nint main()\n{\n\tint n, m, cmd, par, f;\n\tchar t[200], *cp, *q, *qq;\n\n\tfgets(t, 50, stdin), n = atoi(t); while (n-- > 0) {\n\t\tfgets(buf, 1000, stdin);\n\t\tp = buf + strlen(buf) - 1; if (*p < ' ' && p >= buf) *p = 0; p = buf; // remove '\\n'\n\t\tfgets(t, 50, stdin), m = atoi(t); while (m-- > 0) {\n\t\t\tfgets(t, 150, stdin); cp = t; while (*cp == ' ') cp++;\n\t\t\tcmd = *cp; while (*cp >= 'a') cp++; while (*cp == ' ') cp++;\n\t\t\tpar = *cp;\n\t\t\tif (cmd == 'f') {    // forward\n\t\t\t\tif (!*p) continue;\n\t\t\t\tif (par == 'c') p++;\n\t\t\t\telse { while (*p == ' ') p++; while (*p > ' ') p++; }\n\t\t\t} else if (cmd == 'b') {   // backward\n\t\t\t\tif (p == buf) continue;\n\t\t\t\tif (par == 'c') p--;\n\t\t\t\telse {\n\t\t\t\t\tf = 1, p--;\n\t\t\t\t\twhile (f && *p <= ' ') { if (p == buf) f = 0; else p--;\t}\n\t\t\t\t\twhile (f && *p >  ' ') { if (p == buf) f = 0; else p--; }\n\t\t\t\t\tif (f && *p == ' ') p++;\n\t\t\t\t}\n\t\t\t} else if (cmd == 'd') {  // delete\n\t\t\t\tif (!*p) continue;\n\t\t\t\tif (par == 'c') {\n\t\t\t\t\tqq = p, q = p+1; while (*p) *p++ = *q++; *p = 0; p = qq;\n\t\t\t\t} else {\n\t\t\t\t\tf = 0, q = p; while (*q == ' ') q++; while (*q > ' ') f = 1, q++;\n\t\t\t\t\tif (f) { qq = p; while (*p) *p++ = *q++; *p = 0; p = qq; }\n\t\t\t\t}\n\t\t\t} else {  // insert\n\t\t\t\tint w = strlen(cp)-2;\n\t\t\t\tq = cp + w; if (*q == '\"') w--;  // remove '\\n'\n\t\t\t\tif (w > 0) {\n\t\t\t\t\tq = buf + strlen(buf);\n\t\t\t\t\twhile (p <= q) *(q + w) = *q, q--;\n\t\t\t\t}\n\t\t\t\tcp++; while (w-- > 0) *p++ = *cp++;\n\t\t\t}\n//printf(\"#\"); q = buf; while (q < p) putchar(*q++); putchar('^'); while (*q) putchar(*q++); putchar('\\n');\n\t\t}\n\t\tq = buf; while (q < p) putchar(*q++); putchar('^'); while (*p) putchar(*p++); putchar('\\n');\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n\n#define N 1000\n\nchar s[N];\nint cursor;\n\nint is_match(char cmd[20],char sq[120] ){\n  int len = strlen( cmd );\n  int i;\n  for( i=0;i<len;i++ ){\n    if( cmd[i]!=sq[i] )\n      return -1;\n  }\n  return i;\n}\n\nint main(void){\n  char s[101];\n  int line, loop;\n  int M,    cmdN;\n  char cmd[120];\n  char buf[110];\n  char buf2[1000];\n  int i,j,k,len;\n\n  scanf(\"%d \",&line);\n  //  printf(\"line =%d\\n\",line);\n  for( loop=0;loop<line;loop++){\n    fgets( s,N,stdin);\n    len = strlen( s );\n    s[len-1]='\\0';    // delete return code\n    len = strlen( s );// at the end of the text\n\n    scanf(\"%d \",&M);\n    cursor=0;\n    for( cmdN=0;cmdN<M;cmdN++){\n      fgets( cmd,120,stdin);\n\n      if(       is_match( \"forward char\",cmd)!=-1 ){\n\t//printf(\"\\tforward char\\n\");\n\tif( cursor<len )\n\t  cursor++;\n      }else if( is_match( \"forward word\",cmd)!=-1 ){\n\t//printf(\"\\tforward word\\n\");\n\tfor(  ;s[cursor]!=' '&&cursor <len;  cursor++ );\n\twhile( s[cursor]==' '&&cursor!=len ) cursor++  ;\n\tfor(  ;s[cursor]!=' '&&cursor <len;  cursor++ );\n\n      }else if( is_match( \"backward char\",cmd)!=-1 ){\n\t//printf(\"\\tbackward char\\n\");\n\tif( cursor>0 )\n\t  cursor--;\n      }else if( is_match( \"backward word\",cmd)!=-1 ){\n\t//printf(\"\\tbackward word\\n\");\n\n\tfor(  ;s[cursor]!=' '&&cursor >0;  cursor-- );\n\twhile( s[cursor]==' '&&cursor!=0 ) cursor-- ;\n\tfor(  ;s[cursor]!=' '&&cursor >0;  cursor-- );\n\tif( cursor!=0 ) cursor++;      }else if( (j=is_match( \"insert\",cmd))   !=-1 ){\n\t//printf(\"\\tinsert i=%d\\tcmd=%s\\n\",i,cmd);\n\ti=0;\n\twhile( 1 ){\n\t  buf2[i] = s[cursor+i];\n\t  if( buf2[i]=='\\0' )\n\t    break;\n\t  i++;\n\t}\n\tk = cursor;\n\twhile( cmd[j]!='\"' ) j++;\n\tj++;\n\twhile( 1 ){\n\t  s[k]= cmd[j++];\n\t  k++;\n\t  if( cmd[j]=='\"' ){\n\t    cursor=k;\n\t    break;\n\t  }\n\t}\n\ti=0;\n\twhile( 1 ){\n\t  s[k] = buf2[i];\n\t  if( s[k]=='\\0' ){\n\t    len = k;\n\t    break;\n\t  }\n\t  k++;i++;\n\t}\n\n      }else if( is_match( \"delete char\",cmd)  !=-1 ){\n\t//printf(\"\\tdelete char\\n\");\n\tif( cursor!=len ){\n\t  for(i=cursor;i<len;i++)\n\t    s[i]=s[i+1];\n\t  len--;\n\t}\n      }else if( is_match( \"delete word\",cmd)  !=-1 ){\n\t//printf(\"\\tdelete word\\n\");\n\ti=cursor;\n\tif( i!=len ){\n\t  for(j=i; s[j]!=' '&&j<len;j++ );\n\n\t  if( s[j]=='\\0' ){\n\t    s[i-1]='\\0';\n\t  } else {\n\t    for(k=0;k<j;k++)\n\t      s[i+k] = s[j+k];\n\t  }\n\t}\n\tlen = strlen( s );\n      }\n    }\n    for( i=0;i<=len;i++ ){\n      if( i==cursor )\n\tprintf(\"^\");\n      if( i<len )\n\tprintf(\"%c\",s[i]);\n    }\n    printf(\"\\n\");\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#define MAX 1010\nchar buffer[MAX], temp[MAX];\nint cursor, length;\nvoid print(const char* arg)\n{\n#ifdef __HOGEOVER30__DEBUG__\n\tint i;\n\tprintf(\"%s: \", arg);\n\tfor (i = 0; i < cursor; ++i) putchar(buffer[i]);\n\tputchar('^');\n\tfor (i = cursor; i < length; ++i) putchar(buffer[i]);\n\tputs(\"\");\n#endif\n}\nvoid forwardChar(void)\n{\n\tif (cursor < length) cursor++;\n\tprint(\"foward char\");\n}\nvoid forwardWord(void)\n{\n\tif (cursor == length) return;\n\twhile (cursor < length && buffer[cursor] == ' ') cursor++;\n\twhile (cursor < length && buffer[cursor] != ' ') cursor++;\n\tprint(\"forward word\");\n}\nvoid backwardChar(void)\n{\n\tif (cursor > 0) cursor--;\n\tprint(\"backward char\");\n}\nvoid backwardWord(void)\n{\n\tif (cursor == 0) return;\n\twhile (cursor > 0 && buffer[cursor] == ' ') cursor--;\n\twhile (cursor > 0 && buffer[cursor] != ' ') cursor--;\n\tprint(\"backward word\");\n}\nvoid insert(const char* text)\n{\n\tint i;\n\tint n = strlen(text);\n\tfor (i = length; i >= cursor; --i) buffer[i+n] = buffer[i];\n\tfor (i = 0; i < n; ++i) buffer[cursor++] = text[i];\n\twhile (cursor > 0 && buffer[cursor-1] == ' ') cursor--;\n\tlength += n;\n\tprint(\"insert\");\n}\nvoid deleteChar(void)\n{\n\tint i;\n\tif (cursor == length) return;\n\tfor (i = cursor; i < length; ++i) buffer[i] = buffer[i+1];\n\tlength--;\n\tprint(\"delete char\");\n}\nvoid deleteWord(void)\n{\n\tint i;\n\tint k = 0;\n\tif (cursor == length) return;\n\twhile (k + cursor < length && buffer[k + cursor] == ' ') k++;\n\twhile (k + cursor < length && buffer[k + cursor] != ' ') k++;\n\tfor (i = cursor; i < length; ++i) buffer[i] = buffer[i+k];\n\tlength -= k;\n\tprint(\"delete word\");\n}\nint main(void)\n{\n\tint T = atoi(fgets(temp, MAX, stdin));\n\twhile (T--) {\n\t\tint i, n;\n\t\tfgets(buffer, MAX, stdin);\n\t\tbuffer[strlen(buffer)-1] = '\\0';\n\t\tlength = strlen(buffer);\n\t\tcursor = 0;\n\t\tn = atoi(fgets(temp, MAX, stdin));\n\t\tfor (i = 0; i < n; ++i) {\n\t\t\tfgets(temp, MAX, stdin);\n\t\t\tif (!strcmp(temp, \"forward char\\n\")) forwardChar();\n\t\t\tif (!strcmp(temp, \"forward word\\n\")) forwardWord();\n\t\t\tif (!strcmp(temp, \"backward char\\n\")) backwardChar();\n\t\t\tif (!strcmp(temp, \"backward word\\n\")) backwardWord();\n\t\t\tif (!strcmp(temp, \"delete char\\n\")) deleteChar();\n\t\t\tif (!strcmp(temp, \"delete word\\n\")) deleteWord();\n\t\t\tif (!strncmp(temp, \"insert\", 6)) {\n\t\t\t\tstrtok(temp, \"\\\"\");\n\t\t\t\tinsert(strtok(NULL, \"\\\"\"));\n\t\t\t}\n\t\t}\n\t\tfor (i = 0; i < cursor; ++i) putchar(buffer[i]);\n\t\tputchar('^');\n\t\tfor (i = cursor; i < length; ++i) putchar(buffer[i]);\n\t\tputs(\"\");\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar buffer[1024];\nint cursor = 0;\n\ntypedef struct{\n    char cmd[1024];\n    char any_text[1024];\n}Command;\n\nvoid exec_cmd(Command command);\n\nint main(void)\n{\n    int n, i;\n\n    scanf(\"%d\", &n);\n    getchar();\n    for(i = 0; i < n; i++){\n        cursor = 0;\n        int num_cmd;\n        Command command;\n\n        fgets(buffer, sizeof(buffer), stdin);\n        buffer[strlen(buffer) - 1] = '\\0';\n        scanf(\"%d\", &num_cmd);\n        getchar();\n\n        int j;\n        for(j = 0; j < num_cmd; j++){\n            char temp[1024];\n            fgets(temp, sizeof(temp), stdin);\n            int k;\n            for(k = 0; k < strlen(temp); k++){\n                if(temp[k] == '\\n')\n                    temp[k] = '\\0';\n            }\n\n            if(temp[0] != 'i'){\n                strcpy(command.cmd, temp);\n            }else{\n                char *p = temp;\n                while(*p != ' ') p++;\n                *p = '\\0';\n                p += 2;\n                char *start = p;\n                while(*p != '\"') p++;\n                *p = '\\0';\n                strcpy(command.cmd, temp);\n                strcpy(command.any_text, start);\n            }\n\n            exec_cmd(command);\n            if(cursor > strlen(buffer) + 1){\n                fprintf(stderr, \"command: %s\\n\", command.cmd);\n                fprintf(stderr, \"cursor overflow\\n\");\n                exit(1);\n            }\n            //int len = strlen(buffer);\n            //for(k = 0; k <= len; k++){\n            //    if(cursor == k)\n            //        putchar('^');\n            //    putchar(buffer[k]);\n            //}\n            //printf(\"\\n\");\n            //printf(\"\\n\");\n        }\n        int len = strlen(buffer);\n        for(j = 0; j <= len; j++){\n            if(cursor == j)\n                putchar('^');\n            putchar(buffer[j]);\n        }\n        printf(\"\\n\");\n    }\n\n    return 0;\n}\n\nvoid exec_cmd(Command command)\n{\n    if(strcmp(command.cmd, \"forward char\") == 0){\n        if(buffer[cursor] != '\\0')\n            cursor++;\n    }\n\n    else if(strcmp(command.cmd, \"forward word\") == 0){\n        while(buffer[cursor] == ' ' && buffer[cursor] != '\\0'){\n            cursor++;\n        }\n        while(buffer[cursor] != ' ' && buffer[cursor] != '\\0'){\n            cursor++;\n        }\n    }\n\n    else if(strcmp(command.cmd, \"backward char\") == 0){\n        if(cursor != 0)\n            cursor--;\n    }\n\n    else if(strcmp(command.cmd, \"backward word\") == 0){\n        while(buffer[cursor - 1] == ' ' && cursor != 0){\n            cursor--;\n        }\n        while(buffer[cursor - 1] != ' ' && cursor != 0){\n            cursor--;\n        }\n    }\n\n    else if(strcmp(command.cmd, \"insert\") == 0){\n        char temp[1024];\n        strcpy(temp, buffer);\n        temp[cursor] = '\\0';\n        strcat(temp, command.any_text);\n        strcat(temp, buffer + cursor);\n        strcpy(buffer, temp);\n        cursor += strlen(command.any_text);\n    }\n\n    else if(strcmp(command.cmd, \"delete char\") == 0){\n        if(buffer[cursor] != '\\0'){\n            char *p = buffer + cursor + 1;\n            buffer[cursor] = '\\0';\n            strcat(buffer, p);\n        }\n    }\n\n    else if(strcmp(command.cmd, \"delete word\") == 0){\n        char temp[1024];\n        int flag = 0;\n        strcpy(temp, buffer);\n        char *p = temp + cursor;\n        if(*p == ' '){\n            flag = 1;\n            *p = '\\0';\n            p++;\n            while(*p == ' '){\n                p++;\n            }\n        }\n\n        if(*p != '\\0'){\n            flag = 1;\n            *p = '\\0';\n            p++;\n            while(*p != ' ' && *p != '\\0'){\n                p++;\n            }\n        }\n\n        if(flag){\n            char t[1024];\n            strcpy(t, p);\n            strcat(temp, t);\n            strcpy(buffer, temp);\n        }\n    }\n\n    else{\n        fprintf(stderr, \"command %s not found\\n\", command.cmd);\n        exit(1);\n    }\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n\n#define N 1000\n#define DEBUG 0\nint main(void){\n  char s[N];\n  int cursor;\n  int line, loop;\n  int M,    cmdN;\n  char cmd[120];\n  char buf2[1000];\n  int i,j,k,len;\n\n  scanf(\"%d \",&line);\n  /*  printf(\"line =%d\\n\",line); */\n  for( loop=0;loop<line;loop++){\n    fgets( s,N,stdin);\n    len = strlen( s );\n    s[len-1]='\\0';    \n    len = strlen( s );\n\n    scanf(\"%d \",&M);\n    cursor=0;\n    for( cmdN=0;cmdN<M;cmdN++){\n      fgets( cmd,120,stdin);\n      i = strlen( cmd );\n      cmd[i-1]='\\0';\n      if( DEBUG==1 ){\n\tprintf(\"[\");\n\tfor( i=0;i<=len;i++ ){\n\t  if( i==cursor )\n\t    printf(\"^\");\n\t  if( i<len )\n\t    printf(\"%c\",s[i]);\n\t}\n\tprintf(\"]\\tcursor=%d len=%d cmd=%s\\n\",cursor,len,cmd);\n      }\n\n      if( cmd[0]=='f' ){\n\tif( cmd[8]=='c' ){\n\t  if( cursor<len )\n\t    cursor++;\n\t}else{\n\t  if( s[cursor]!=' ' )\n\t    for(  ;s[cursor]!=' '&&cursor <len;  cursor++ );\n\t  else{\n\t    while( s[cursor]==' '&&cursor<len ) cursor++  ;\n\t    for(  ;s[cursor]!=' '&&cursor <len;  cursor++ );\n\t  }\n\t}\n      } else if( cmd[0]=='b' ){\n\tif( cmd[9]=='c' ){\n\t  if( cursor>0 )\n\t    cursor--;\n\t}else{\n\t  if( s[cursor]!=' ' ){\n\t    for(  ;s[cursor]!=' '&&cursor >0;  cursor-- );\n\t    if( cursor!=0 )\n\t      cursor++;\n\t  } else {\n\t    while( s[cursor]==' '&&cursor!=0 ) cursor-- ;\n\t    for(  ;s[cursor]!=' '&&cursor >0;  cursor-- );\n\t    if( cursor!=0 ) cursor++;\n\t  }\n\t}\n      } else if( cmd[0]=='d' ){\n\tif( cmd[7]=='c' ){\n\t  if( cursor!=len ){\n\t    for(i=cursor;i<=len;i++)\n\t      s[i]=s[i+1];\n\t    len--;\n\t  }\n\t}else{\n\t  i=cursor;\n\t  if( i!=len ){\n\t    j=i;\n\t    while( s[j]==' ' )j++;\n\t    for( ; s[j]!=' '&&j<len;j++ );\n\t   \n\t    if( j==len ){\n\t      s[i]='\\0';\n\t      len=i;\n\t    } else {\n\t      for(k=0; j+k<len;k++)\n\t\ts[i+k] = s[j+k];\n\t      s[i+k]='\\0';\n\t      len=i+k+1;\n\t    }\n\t  }\n\t}\n      }else{\n\tfor( j=0;cmd[j]!='\"';j++ );\n\ti=0;\n\twhile( 1 ){\n\t  buf2[i] = s[cursor+i];\n\t  if( buf2[i]=='\\0' )\n\t    break;\n\t  i++;\n\t}\n\tk = cursor;\n\twhile( cmd[j]!='\"' ) j++;\n\tj++;\n\twhile( 1 ){\n\t  s[k]= cmd[j++];\n\t  k++;\n\t  if( cmd[j]=='\"' ){\n\t    cursor=k;\n\t    break;\n\t  }\n\t}\n\ti=0;\n\twhile( 1 ){\n\t  s[k] = buf2[i];\n\t  if( s[k]=='\\0' ){\n\t    len = k;\n\t    break;\n\t  }\n\t  k++;i++;\n\t}\n      }\n    }\n    for( i=0;i<=len;i++ ){\n      if( i==cursor )\n\tprintf(\"^\");\n      if( i<len )\n\tprintf(\"%c\",s[i]);\n    }\n    printf(\"\\n\");\n    if(DEBUG==1) printf(\"********************************************\\n\");\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<string.h>\n#define MAX 1000\n\nchar text[MAX];\nint cursor;\n\nvoid initialize()\n{\n    int i;\n    for(i=0;i<MAX;i++)\n    {\n        text[i]=0;\n    }\n}\n\nvoid run(int first,int second)\n{\n    int i;\n\n    if(first=='f')\n    {\n        if(second=='c')\n        {\n            if(cursor!=strlen(text))\n            {\n                cursor++;\n            }\n        }\n        else if(second=='w')\n        {\n            for(i=cursor+2;i<strlen(text);i++)\n            {\n                if(text[i]==32)\n                {\n                    cursor=i;\n                    break;\n                }\n            }\n        }\n    }\n    else if(first=='b')\n    {\n        if(second=='c')\n        {\n            if(cursor!=0)\n            {\n                cursor--;\n            }\n        }\n        else if(second=='w')\n        {\n            if(text[cursor-1]==32)\n            {\n                for(i=cursor-1;i>=0;i--)\n                {\n                    if(text[i]!=32)\n                    {\n                        cursor=i+1;\n                        break;\n                    }\n                }\n            }\n\n            for(i=cursor-1;i>=0;i--)\n            {\n                if(text[i]==32)\n                {\n                    break;\n                }\n            }\n            cursor=i+1;\n        }\n    }\n    else if(first=='d')\n    {\n        if(second=='c')\n        {\n            int c;\n            for(i=cursor;i<strlen(text);i++)\n            {\n                text[i]=text[i+1];\n                if(text[i+1]==0)\n                {\n                    break;\n                }\n            }\n        }\n        else if(second=='w')\n        {\n            int len;\n\n            while(1)\n            {\n                if(text[cursor]==32)\n                {\n                    run('d','c');\n                }\n                else\n                {\n                    break;\n                }\n            }\n\n\n            while(1)\n            {\n                if(text[cursor]==32 || cursor==strlen(text))\n                {\n                    break;\n                }\n                run('d','c');\n            }\n        }\n    }\n}\n\nint main(void)\n{\n    int n,m;\n    int i,j,k;\n\n    scanf(\"%d\\n\",&n);\n\n    for(i=0;i<n;i++)\n    {\n        initialize();\n        cursor=0;\n        gets(text);\n\n        scanf(\"%d%*c\",&m);\n\n        for(j=0;j<m;j++)\n        {\n            char command[100]={};\n            scanf(\"%s%*c\",command);\n\n            if(command[0]=='i')\n            {\n                char plus[MAX]={};\n                char temporary[MAX]={};\n\n                scanf(\"%*c\");\n                gets(plus);\n\n                if(cursor>0)\n                {\n                    strcpy(temporary,text);\n                    strncpy(text,temporary,cursor-1);\n                    text[cursor]='\\0';\n                    strcat(text,plus);\n\n                    int len=strlen(text)-1;\n                    int k,l=cursor;\n                    for(k=len;k<MAX;k++)\n                    {\n                        text[k]=temporary[l];\n                        if(temporary[l]==0)\n                        {\n                            break;\n                        }\n                        l++;\n                    }\n                }\n                else\n                {\n                    strncpy(temporary,plus,strlen(plus)-1);\n                    temporary[strlen(plus)]='\\0';\n                    strcat(temporary,text);\n                    strcpy(text,temporary);\n                }\n                cursor+=strlen(plus)-1;\n            }\n            else\n            {\n                char command2[10];\n                scanf(\"%s%*c\",command2);\n                run(command[0],command2[0]);\n            }\n\n            /*for(k=0;k<cursor;k++)\n            {\n                printf(\"%c\",text[k]);\n            }\n            printf(\"^\");\n            for(k=cursor;k<strlen(text)+1;k++)\n            {\n                printf(\"%c\",text[k]);\n            }\n            printf(\"\\n\");*/\n\n        }\n\n        for(k=0;k<cursor;k++)\n        {\n            printf(\"%c\",text[k]);\n        }\n        printf(\"^\");\n        for(k=cursor;k<strlen(text)+1;k++)\n        {\n            printf(\"%c\",text[k]);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nstatic\nchar cln[ 256 ];\n\nvoid getNextLine (\n  void\n  )\n{\n  fgets ( cln, sizeof ( cln ), stdin );\n  *( strchr ( cln, '\\n' ) ) = '\\0';\n}\n\n/** Application main entry point. */\nint main (\n  int     argc,\n  char  * argv[ ]\n  )\n{\n  int tc;\n\n  getNextLine ( );\n  tc = atoi ( cln );\n\n  while ( tc-- )\n  {\n    char    s[ 1024 ];\n    char  * c\n       ,  * e\n       ,  * p;\n    int n;\n\n    getNextLine ( );\n    strcpy ( s, cln );\n    c = s; e = s + strlen ( s );\n\n    getNextLine ( );\n    n = atoi ( cln );\n\n    while ( n-- )\n    {\n      getNextLine ( );\n\n      if ( !strcmp ( cln, \"forward char\" ) )\n      {\n        c += !!( c != e );\n      }\n      else if ( !strcmp ( cln, \"forward word\" ) )\n      {\n        while ( c != e && *c == ' ' ) ++c;\n        while ( c != e && *c != ' ' ) ++c;\n      }\n      else if ( !strcmp ( cln, \"backward char\" ) )\n      {\n        c -= !!( c != s );\n      }\n      else if ( !strcmp ( cln, \"backward word\" ) )\n      {\n        while ( c != s && c[ -1 ] == ' ' ) --c;\n        while ( c != s && c[ -1 ] != ' ' ) --c;\n      }\n      else if ( !strcmp ( cln, \"delete char\" ) )\n      {\n        for ( p = c; p != e && p + 1 != e; ++p ) p[ 0 ] = p[ 1 ];\n        e -= !!( c != e );\n      }\n      else if ( !strcmp ( cln, \"delete word\" ) )\n      {\n        size_t len;\n\n        p = c;\n        while ( p != e && *p == ' ' ) ++p;\n        while ( p != e && *p != ' ' ) ++p;\n        len = p - c;\n\n        for ( p = c; p != e && p + len != e; ++p ) p[ 0 ] = p[ len ];\n        e -= len;\n      }\n      else /* insert */\n      {\n        size_t len;\n\n        for ( p = cln + 8; *p != '\\\"'; ++p );\n        len = p - ( cln + 8 );\n\n        e += len;\n        for ( p = e; p - len != c; --p )  p[ -1 ] = p[ -( len + 1 ) ];\n\n        for ( p = c; p != c + len; ++p )  *p = cln[ 8 + ( p - c ) ];\n        c += len;\n      }\n    }\n\n    for ( p = s; ( p - 1 ) != e; ++p )\n    {\n      if ( p == c ) putchar ( '^' );\n      if ( p != e ) putchar ( *p );\n    }\n    puts ( \"\" );\n  }\n\n  return ( 0 );\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<string.h>\n#define MAX 2000\n\nchar text[MAX];\nint cursor;\n\nvoid print()\n{\n    int k;\n\n    for(k=0;k<cursor;k++)\n    {\n        printf(\"%c\",text[k]);\n    }\n    printf(\"^\");\n    for(k=cursor;k<strlen(text)+1;k++)\n    {\n        printf(\"%c\",text[k]);\n    }\n    printf(\"\\n\");\n    return;\n}\n\nvoid initialize()\n{\n    int i;\n    for(i=0;i<MAX;i++)\n    {\n        text[i]=0;\n    }\n    return;\n}\n\nvoid run(int first,int second)\n{\n    int i;\n\n    if(first=='f')\n    {\n        if(second=='c')\n        {\n            if(cursor!=strlen(text))\n            {\n                cursor++;\n            }\n        }\n        else if(second=='w')\n        {\n            while(1)\n            {\n                if(text[cursor]==32)\n                {\n                    run('f','c');\n                }\n                else\n                {\n                    break;\n                }\n            }\n\n            for(i=cursor;i<strlen(text);i++)\n            {\n                if(text[i]==32)\n                {\n                    break;\n                }\n            }\n            cursor=i;\n        }\n    }\n    else if(first=='b')\n    {\n        if(second=='c')\n        {\n            if(cursor!=0)\n            {\n                cursor--;\n            }\n        }\n        else if(second=='w')\n        {\n            while(1)\n            {\n                if(text[cursor-1]==32)\n                {\n                    run('b','c');\n                }\n                else\n                {\n                    break;\n                }\n            }\n\n            for(i=cursor-1;i>=0;i--)\n            {\n                if(text[i]==32)\n                {\n                    cursor=i+1;\n                    break;\n                }\n            }\n            if(i==-1)\n            {\n                cursor=0;\n            }\n        }\n    }\n    else if(first=='d')\n    {\n        if(second=='c')\n        {\n            int c;\n            for(i=cursor;i<strlen(text);i++)\n            {\n                text[i]=text[i+1];\n                if(text[i+1]==0)\n                {\n                    break;\n                }\n            }\n        }\n        else if(second=='w')\n        {\n            int len;\n\n            while(1)\n            {\n                if(text[cursor]==32)\n                {\n                    run('d','c');\n                }\n                else\n                {\n                    break;\n                }\n            }\n\n            while(1)\n            {\n                if(text[cursor]==32 || cursor==strlen(text))\n                {\n                    break;\n                }\n                run('d','c');\n            }\n        }\n    }\n    return;\n}\n\nint main(void)\n{\n    int n,m;\n    int i,j,k;\n\n    scanf(\"%d\\n\",&n);\n\n    for(i=0;i<n;i++)\n    {\n        initialize();\n        cursor=0;\n        gets(text);\n\n        scanf(\"%d\",&m);\n\n        for(j=0;j<m;j++)\n        {\n            char command[100]={};\n            scanf(\"%s%*c\",command);\n\n            if(command[0]=='i')\n            {\n                char plus[MAX]={};\n                char temporary[MAX]={};\n\n                scanf(\"%*c\");\n                gets(plus);\n//                printf(\"insert %s\\n\",plus);\n\n                if(cursor>0)\n                {\n                    strcpy(temporary,text);\n                    strncpy(text,temporary,cursor-1);\n                    text[cursor]='\\0';\n                    strcat(text,plus);\n\n                    int len=strlen(text)-1;\n                    int k,l=cursor;\n                    for(k=len;k<MAX;k++)\n                    {\n                        text[k]=temporary[l];\n                        if(temporary[l]==0)\n                        {\n                            break;\n                        }\n                        l++;\n                    }\n                }\n                else\n                {\n                    strncpy(temporary,plus,strlen(plus)-1);\n                    temporary[strlen(plus)]='\\0';\n                    strcat(temporary,text);\n                    strcpy(text,temporary);\n                }\n                cursor+=strlen(plus)-1;\n            }\n            else\n            {\n                char command2[10];\n                scanf(\"%s%*c\",command2);\n//            printf(\"%s,%s\\n\",command,command2);\n                run(command[0],command2[0]);\n            }\n            print();\n        }\n\n        print();\n    }\n    return 0;\n}"
  },
  {
    "language": "C",
    "code": "// Aizu 1101: A Simple Offline Text Editor\n// 2017.9.18 bal4u@uu\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nchar buf[1010], *p;\n\nint main()\n{\n\tint n, m, cmd, par;\n\tchar t[200], *cp, *q;\n\n\tfgets(t, 50, stdin), n = atoi(t); while (n-- > 0) {\n\t\tfgets(buf, 1000, stdin);\n\t\tp = buf + strlen(buf) - 1; if (*p < ' ' && p >= buf) *p = 0; p = buf; // remove '\\n'\n\t\tfgets(t, 50, stdin), m = atoi(t); while (m-- > 0) {\n\t\t\tfgets(t, 150, stdin); cp = t; while (*cp == ' ') cp++;\n\t\t\tcmd = *cp; while (isalpha(*cp)) cp++; while (*cp == ' ') cp++;\n\t\t\tpar = *cp;\n\t\t\tif (cmd == 'f') {    // forward\n\t\t\t\tif (!*p) continue;\n\t\t\t\tif (par == 'c') p++;\n\t\t\t\telse { while (*p == ' ') p++; while (*p > ' ') p++; }\n\t\t\t} else if (cmd == 'b') {   // backward\n\t\t\t\tif (p == buf) continue;\n\t\t\t\tif (par == 'c') p--;\n\t\t\t\telse {\n\t\t\t\t\tint f = 1;\n\t\t\t\t\tp--;\n\t\t\t\t\twhile (f && *p <= ' ') { if (p == buf) f = 0; else p--;\t}\n\t\t\t\t\twhile (f && *p >  ' ') { if (p == buf) f = 0; else p--; }\n\t\t\t\t\tif (f && *p == ' ') p++;\n\t\t\t\t}\n\t\t\t} else if (cmd == 'd') {  // delete\n\t\t\t\tif (!*p) continue;\n\t\t\t\tif (par == 'c') strcpy(p, p+1);\n\t\t\t\telse { q = p; while (*q == ' ') q++; while (*q > ' ') q++; strcpy(p, q); }\n\t\t\t} else {  // insert\n\t\t\t\tint w = strlen(cp)-2;\n\t\t\t\tq = cp + w; if (*q == '\"') w--;  // remove '\\n'\n\t\t\t\tif (w > 0) {\n\t\t\t\t\tq = buf + strlen(buf);\n\t\t\t\t\twhile (p <= q) *(q + w) = *q, q--;\n\t\t\t\t}\n\t\t\t\tcp++; while (w-- > 0) *p++ = *cp++;\n\t\t\t}\n//printf(\"--> \");\tq = buf; while (q < p) putchar(*q++); putchar('^'); while (*q) putchar(*q++); putchar('\\n');\n\t\t}\n\t\tq = buf; while (q < p) putchar(*q++); putchar('^'); while (*p) putchar(*p++); putchar('\\n');\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nstatic\nchar cln[ 256 ];\n\nvoid getNextLine (\n  void\n  )\n{\n  fgets ( cln, sizeof ( cln ), stdin );\n  *( strchr ( cln, '\\n' ) ) = '\\0';\n}\n\n/** Application main entry point. */\nint main (\n  int     argc,\n  char  * argv[ ]\n  )\n{\n  int tc;\n\n  getNextLine ( );\n  tc = atoi ( cln );\n\n  while ( tc-- )\n  {\n    char    s[ 1024 ];\n    char  * c\n       ,  * e\n       ,  * p;\n    int n;\n\n    getNextLine ( );\n    memcpy ( s, cln, sizeof ( cln ) );\n    c = s; e = s + strlen ( s );\n\n    getNextLine ( );\n    n = atoi ( cln );\n\n    while ( n-- )\n    {\n      getNextLine ( );\n\n      if ( !strcmp ( cln, \"forward char\" ) )\n      {\n        c += !!( c != e );\n      }\n      else if ( !strcmp ( cln, \"forward word\" ) )\n      {\n        while ( c != e && *c == ' ' ) ++c;\n        while ( c != e && *c != ' ' ) ++c;\n      }\n      else if ( !strcmp ( cln, \"backward char\" ) )\n      {\n        c -= !!( c != s );\n      }\n      else if ( !strcmp ( cln, \"backward word\" ) )\n      {\n        while ( c != s && c[ -1 ] == ' ' ) --c;\n        while ( c != s && c[ -1 ] != ' ' ) --c;\n      }\n      else if ( !strcmp ( cln, \"delete char\" ) )\n      {\n        for ( p = c; p != e && p + 1 != e; ++p ) p[ 0 ] = p[ 1 ];\n        e -= !!( c != e );\n      }\n      else if ( !strcmp ( cln, \"delete word\" ) )\n      {\n        size_t len;\n\n        p = c;\n        while ( p != e && *p == ' ' ) ++p;\n        while ( p != e && *p != ' ' ) ++p;\n        len = p - c;\n\n        for ( p = c; p != e && p + len != e; ++p ) p[ 0 ] = p[ len ];\n        e -= len;\n      }\n      else /* insert */\n      {\n        size_t len;\n\n        for ( p = cln + 8; *p != '\\\"'; ++p );\n        len = p - ( cln + 8 );\n\n        e += len;\n        for ( p = e; p - len != c; --p )  p[ -1 ] = p[ -( len + 1 ) ];\n\n        for ( p = c; p != c + len; ++p )  *p = cln[ 8 + ( p - c ) ];\n        c += len;\n      }\n    }\n\n    for ( p = s; ( p - 1 ) != e; ++p )\n    {\n      if ( p == c ) putchar ( '^' );\n      if ( p != e ) putchar ( *p );\n    }\n    puts ( \"\" );\n  }\n\n  return ( 0 );\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#define MAX 1010\nchar buffer[MAX], temp[MAX];\nint cursor, length;\nvoid print(const char* arg)\n{\n#ifdef __HOGEOVER30__DEBUG__\n\tint i;\n\tprintf(\"%16s: \", arg);\n\tfor (i = 0; i < cursor; ++i) putchar(buffer[i]);\n\tputchar('^');\n\tfor (i = cursor; i < length; ++i) putchar(buffer[i]);\n\tputs(\"\");\n#endif\n}\nvoid forwardChar(void)\n{\n\tif (cursor < length) cursor++;\n\tprint(\"foward char\");\n}\nvoid forwardWord(void)\n{\n\tif (cursor == length) return;\n\twhile (cursor < length && buffer[cursor] == ' ') cursor++;\n\twhile (cursor < length && buffer[cursor] != ' ') cursor++;\n\tprint(\"forward word\");\n}\nvoid backwardChar(void)\n{\n\tif (cursor > 0) cursor--;\n\tprint(\"backward char\");\n}\nvoid backwardWord(void)\n{\n\tif (cursor == 0) return;\n\twhile (cursor > 0 && buffer[cursor] == ' ') cursor--;\n\twhile (cursor > 0 && buffer[cursor] != ' ') cursor--;\n\tif (buffer[cursor] == ' ') cursor++;\n\tprint(\"backward word\");\n}\nvoid insert(const char* text)\n{\n\tint i;\n\tint n = strlen(text);\n\tfor (i = length; i >= cursor; --i) buffer[i+n] = buffer[i];\n\tfor (i = 0; i < n; ++i) buffer[cursor++] = text[i];\n\twhile (cursor > 0 && buffer[cursor-1] == ' ') cursor--;\n\tlength += n;\n\tprint(\"insert\");\n}\nvoid deleteChar(void)\n{\n\tint i;\n\tif (cursor == length) return;\n\tfor (i = cursor; i < length; ++i) buffer[i] = buffer[i+1];\n\tlength--;\n\tprint(\"delete char\");\n}\nvoid deleteWord(void)\n{\n\tint i;\n\tint k = 0;\n\tif (cursor == length) return;\n\twhile (k + cursor < length && buffer[k + cursor] == ' ') k++;\n\twhile (k + cursor < length && buffer[k + cursor] != ' ') k++;\n\tfor (i = cursor; i < length; ++i) buffer[i] = buffer[i+k];\n\tlength -= k;\n\tprint(\"delete word\");\n}\nint main(void)\n{\n\tint T = atoi(fgets(temp, MAX, stdin));\n\twhile (T--) {\n\t\tint i, n;\n\t\tfgets(buffer, MAX, stdin);\n\t\tbuffer[strlen(buffer)-1] = '\\0';\n\t\tlength = strlen(buffer);\n\t\tcursor = 0;\n\t\tn = atoi(fgets(temp, MAX, stdin));\n\t\tfor (i = 0; i < n; ++i) {\n\t\t\tfgets(temp, MAX, stdin);\n\t\t\tif (!strcmp(temp, \"forward char\\n\")) forwardChar();\n\t\t\tif (!strcmp(temp, \"forward word\\n\")) forwardWord();\n\t\t\tif (!strcmp(temp, \"backward char\\n\")) backwardChar();\n\t\t\tif (!strcmp(temp, \"backward word\\n\")) backwardWord();\n\t\t\tif (!strcmp(temp, \"delete char\\n\")) deleteChar();\n\t\t\tif (!strcmp(temp, \"delete word\\n\")) deleteWord();\n\t\t\tif (!strncmp(temp, \"insert\", 6)) {\n\t\t\t\tchar *p;\n\t\t\t\tstrtok(temp, \"\\\"\\n\");\n\t\t\t\tp = strtok(NULL, \"\\\"\\n\");\n\t\t\t\tif (p) insert(p);\n\t\t\t}\n\t\t}\n\t\tfor (i = 0; i < cursor; ++i) putchar(buffer[i]);\n\t\tputchar('^');\n\t\tfor (i = cursor; i < length; ++i) putchar(buffer[i]);\n\t\tputs(\"\");\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<string.h>\n\nvoid process_commands(char *buf, int *cursor);\nvoid print_result(char *buf, int cursor);\nvoid forward_char(char *buf, int *cursor);\nvoid forward_word(char *buf, int *cursor);\nvoid backward_char(char *buf, int *cursor);\nvoid backward_word(char *buf, int *cursor);\nvoid insert_text(char *buf, int *cursor, char *text);\nvoid delete_char(char *buf, int cursor);\nvoid delete_word(char *buf, int cursor);\n\nint main()\n{\n    char buf[1024];\n    char numbuf[8];\n    int cursor;\n    int n, m;\n    int i, j;\n\n    fgets(numbuf, sizeof(numbuf), stdin);\n    sscanf(numbuf, \"%d\", &n);\n\n    for(i = 0; i < n; i++){\n        cursor = 0;\n        fgets(buf, sizeof(buf), stdin);\n        buf[strlen(buf)-1] = '\\0';\n        fgets(numbuf, sizeof(numbuf), stdin);\n        sscanf(numbuf, \"%d\", &m);\n        for(j = 0; j < m; j++) {\n            process_commands(buf, &cursor);\n        }\n        print_result(buf, cursor);\n    }\n\n    return 0;\n}\n\nvoid process_commands(char *buf, int *cursor)\n{\n    char command[128];\n    fgets(command, sizeof(command), stdin);\n    command[strlen(command)-1] = '\\0';\n\n    if(strcmp(command, \"forward char\") == 0) forward_char(buf, cursor);\n    else if(strcmp(command, \"forward word\") == 0) forward_word(buf, cursor);\n    else if(strcmp(command, \"backward word\") == 0) backward_word(buf, cursor);\n    else if(strcmp(command, \"backward char\") == 0) backward_char(buf, cursor);\n    else if(strncmp(command, \"insert\", strlen(\"insert\")) == 0)\n        insert_text(buf, cursor, command+strlen(\"insert \"));\n    else if(strcmp(command, \"delete char\") == 0) delete_char(buf, *cursor);\n    else if(strcmp(command, \"delete word\") == 0) delete_word(buf, *cursor);\n}\n\nvoid forward_char(char *buf, int *cursor)\n{\n    if(*cursor == strlen(buf)) return;\n    (*cursor)++;\n}\n\nvoid forward_word(char *buf, int *cursor)\n{\n    int tmp;\n    for(tmp = *cursor; buf[tmp] == ' '; tmp++);\n    for(; tmp < strlen(buf); tmp++)\n        if(buf[tmp] == ' ') break;\n    *cursor = tmp;\n}\n\nvoid backward_char(char *buf, int *cursor)\n{\n    if(*cursor == 0) return;\n    (*cursor)--;\n}\n\nvoid backward_word(char *buf, int *cursor)\n{\n    int tmp;\n    if(*cursor == 0) return;\n    for(tmp = *cursor-1; buf[tmp] == ' '; tmp--);\n    for(; tmp >= 0; tmp--)\n        if(buf[tmp] == ' ') break;\n    if(tmp == 0) *cursor = tmp;\n    else *cursor = tmp+1;\n}\n\nvoid insert_text(char *buf, int *cursor, char *text_with_quote)\n{\n    char tmp[1024];\n    char text[128];\n    int len = strlen(text_with_quote) - 2;\n    int i;\n\n    for(i = 0; i < len; i++)\n        text[i] = text_with_quote[i+1];\n    text[len] = '\\0';\n    \n    len = strlen(text);\n    strcpy(tmp, buf+(*cursor));\n    strcpy(buf+(*cursor), text);\n    *cursor += len;\n    strcpy(buf+(*cursor), tmp);\n}\n\nvoid delete_char(char *buf, int cursor)\n{\n    if(cursor == strlen(buf)) return;\n    char tmp[1024];\n    strcpy(tmp, buf+cursor);\n    strcpy(buf+cursor, tmp+1);\n}\n\nvoid delete_word(char *buf, int cursor)\n{\n    int head = 0;\n    char tmp[1024];\n\n    for(head = 0; buf[cursor+head] == ' '; head++);\n    if(cursor+head == strlen(buf)) return;\n    for(; cursor+head < strlen(buf); head++)\n        if(buf[cursor+head] == ' ') break;\n\n    strcpy(tmp, buf+cursor+head);\n    strcpy(buf+cursor, tmp);\n}\n\nvoid print_result(char *buf, int cursor)\n{\n    int i;\n    for(i = 0; i < cursor; i++) putchar(buf[i]);\n    putchar('^');\n    for(; i < strlen(buf); i++) putchar(buf[i]);\n    putchar('\\n');\n}\n\n"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nstatic\nchar cln[ 256 ];\n\nvoid getNextLine (\n  void\n  )\n{\n  fgets ( cln, sizeof ( cln ), stdin );\n  *( strchr ( cln, '\\n' ) ) = '\\0';\n}\n\n/** Application main entry point. */\nint main (\n  int     argc,\n  char  * argv[ ]\n  )\n{\n  int tc;\n\n  getNextLine ( );\n  tc = atoi ( cln );\n\n  while ( tc-- )\n  {\n    char    s[ 1024 ];\n    char  * c\n       ,  * e\n       ,  * p;\n    int n;\n\n    getNextLine ( );\n    strcpy ( s, cln );\n    c = s; e = s + strlen ( s );\n\n    getNextLine ( );\n    n = atoi ( cln );\n\n    while ( n-- )\n    {\n      getNextLine ( );\n\n      if ( !strcmp ( cln, \"forward char\" ) )\n      {\n        c += !!( c != e );\n      }\n      else if ( !strcmp ( cln, \"forward word\" ) )\n      {\n        while ( c != e && *c == ' ' ) ++c;\n        while ( c != e && *c != ' ' ) ++c;\n      }\n      else if ( !strcmp ( cln, \"backward char\" ) )\n      {\n        c -= !!( c != s );\n      }\n      else if ( !strcmp ( cln, \"backward word\" ) )\n      {\n        while ( c != s && *c == ' ' ) --c;\n        while ( c != s && c[ -1 ] != ' ' ) --c;\n      }\n      else if ( !strcmp ( cln, \"delete char\" ) )\n      {\n        for ( p = c; p != e && p + 1 != e; ++p ) p[ 0 ] = p[ 1 ];\n        e -= !!( c != e );\n      }\n      else if ( !strcmp ( cln, \"delete word\" ) )\n      {\n        size_t len;\n\n        p = c;\n        while ( p != e && *p == ' ' ) ++p;\n        while ( p != e && *p != ' ' ) ++p;\n        len = p - c;\n\n        for ( p = c; p != e && p + len != e; ++p ) p[ 0 ] = p[ len ];\n        e -= len;\n      }\n      else /* insert */\n      {\n        size_t len;\n\n        for ( p = cln + 8; *p != '\\\"'; ++p );\n        len = p - ( cln + 8 );\n\n        e += len;\n        for ( p = e; p - len != c; --p )  p[ -1 ] = p[ -( len + 1 ) ];\n\n        for ( p = c; p != c + len; ++p )  *p = cln[ 8 + ( p - c ) ];\n        c += len;\n      }\n    }\n\n    for ( p = s; ( p - 1 ) != e; ++p )\n    {\n      if ( p == c ) putchar ( '^' );\n      if ( p != e ) putchar ( *p );\n    }\n    puts ( \"\" );\n  }\n\n  return ( 0 );\n}"
  },
  {
    "language": "C",
    "code": "/* AOJ 1101 A Simple Offline Text Editor */\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n/* #define DEBUG */\n\n#ifdef DEBUG\n#define DEBUG_PRINT do {print_str(text, len, cursor);} while(0)\n#else\n#define DEBUG_PRINT (0)\n#endif\n\nvoid print_str(char *s, int len, int cursor);\n\nint\nmain(void)\n{\n    int n_texts;\n    char s[BUFSIZ];\n\n    fgets(s, BUFSIZ, stdin);\n    n_texts = atoi(s);\n\n    while (n_texts--) {\n        char text[BUFSIZ];\n        int len;\n        int cursor = 0;\n        int n_commands;\n\n        fgets(text, BUFSIZ, stdin);\n        len = strlen(text);\n        if (text[len - 1] == '\\n') {\n            text[len - 1] = '\\0';\n            len--;\n        }\n        if (strchr(text, '\\r')) puts(\"BANG!\");\n\n        fgets(s, BUFSIZ, stdin);\n        n_commands = atoi(s);\n        while (n_commands--) {\n            fgets(s, BUFSIZ, stdin);\n            if (strstr(s, \"forward char\") == s) {\n                if (cursor < len) cursor++;\n                DEBUG_PRINT;\n            } else if (strstr(s, \"forward word\") == s) {\n                while (cursor < len && text[cursor] == ' ')\n                    cursor++;\n                while (cursor < len && text[cursor] != ' ')\n                    cursor++;\n                DEBUG_PRINT;\n            } else if (strstr(s, \"backward char\") == s) {\n                if (cursor > 0) cursor--;\n                DEBUG_PRINT;\n            } else if (strstr(s, \"backward word\") == s) {\n                while (cursor > 0 && text[cursor - 1] == ' ')\n                    cursor--;\n                while (cursor > 0 && text[cursor - 1] != ' ')\n                    cursor--;\n                DEBUG_PRINT;\n            } else if (strstr(s, \"insert \") == s) {\n                char temp[BUFSIZ];\n                char *start = strchr(s, '\"') + 1;\n                char *end = strchr(start, '\"');\n                int len_arg = (int)(end - start);\n\n                if (cursor == len) {\n                    strncat(text, start, len_arg);\n                } else {\n                    strcpy(temp, text);\n\n                    strncpy(text + cursor, start, len_arg);\n                    text[cursor + len_arg] = '\\0';\n                    strcat(text, temp + cursor);\n                }\n\n                cursor += len_arg;\n                len += len_arg;\n                DEBUG_PRINT;\n            } else if (strstr(s, \"delete char\") == s) {\n                if (cursor < len) {\n                    char temp[BUFSIZ];\n\n                    strcpy(temp, text);\n\n                    text[cursor] = '\\0';\n                    strcat(text, temp + cursor + 1);\n\n                    len--;\n                }\n                DEBUG_PRINT;\n            } else if (strstr(s, \"delete word\") == s) {\n                if (cursor < len) {\n                    char temp[BUFSIZ];\n                    int word_end = cursor;\n                    int len_word = 0;\n\n                    while (word_end < len && text[word_end] == ' ') {\n                        word_end++;\n                        len_word++;\n                    }\n\n                    if (word_end == len) continue;\n\n                    while (word_end < len && text[word_end] != ' ') {\n                        word_end++;\n                        len_word++;\n                    }\n\n                    strcpy(temp, text);\n                    strcpy(text + cursor, temp + word_end);\n                    len -= len_word;\n                }\n                DEBUG_PRINT;\n            }\n        }\n        print_str(text, len, cursor);\n    }\n\n    return 0;\n}\n\nvoid\nprint_str(char *s, int len, int cursor)\n{\n    int i;\n\n    if (len == 0) {\n        putchar('^');\n    } else {\n        for (i = 0; i < len; i++) {\n            if (i == cursor) putchar('^');\n            putchar(s[i]);\n        }\n\n        if (cursor == len) putchar('^');\n    }\n\n    putchar('\\n');\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<string.h>\n#define MAX 1000\n\nchar text[MAX];\nint cursor,length=0;\n\nvoid initialize()\n{\n    int i;\n    for(i=0;i<MAX;i++)\n    {\n        text[i]=0;\n    }\n}\n\nvoid run(int first,int second)\n{\n    int i;\n\n    if(first=='f')\n    {\n        if(second=='c')\n        {\n            if(cursor!=length)\n            {\n                cursor++;\n            }\n        }\n        else if(second=='w')\n        {\n            for(i=cursor+2;i<strlen(text);i++)\n            {\n                if(text[i]==32)\n                {\n                    break;\n                }\n            }\n            cursor=i;\n        }\n    }\n    else if(first=='b')\n    {\n        if(second=='c')\n        {\n            if(cursor!=0)\n            {\n                cursor--;\n            }\n        }\n        else if(second=='w')\n        {\n            for(i=cursor-1;i>=0;i--)\n            {\n                if(text[i]==32)\n                {\n                    break;\n                }\n            }\n            cursor=i+1;\n        }\n    }\n    else if(first=='d')\n    {\n        if(second=='c')\n        {\n            int c;\n            for(i=cursor;i<length;i++)\n            {\n                text[i]=text[i+1];\n                if(text[i+1]==0)\n                {\n                    break;\n                }\n            }\n            length--;\n        }\n        else if(second=='w')\n        {\n            int len;\n            for(i=cursor;i<length;i++)\n            {\n                if(text[i]==32)\n                {\n                    break;\n                }\n            }\n            len=i-cursor;\n            for(i=cursor;i<length;i++)\n            {\n                text[i]=text[i+len+1];\n                if(text[i+len+1]==0)\n                {\n                    break;\n                }\n            }\n            length=strlen(text);\n        }\n    }\n}\n\nint main(void)\n{\n    int n,m;\n    int i,j,k;\n\n    scanf(\"%d\\n\",&n);\n\n    for(i=0;i<n;i++)\n    {\n        initialize();\n        cursor=0;\n        gets(text);\n\n        length=strlen(text);\n\n        scanf(\"%d%*c\",&m);\n\n        for(j=0;j<m;j++)\n        {\n            char command[100]={};\n            scanf(\"%s%*c\",command);\n\n            if(command[0]=='i')\n            {\n                char plus[MAX]={};\n                char temporary[MAX]={};\n\n                scanf(\"%*c\");\n                gets(plus);\n\n                if(cursor>0)\n                {\n                    strcpy(temporary,text);\n                    strncpy(text,temporary,cursor-1);\n                    text[cursor]='\\0';\n                    strcat(text,plus);\n\n                    int len=strlen(text)-1;\n                    int k,l=cursor;\n                    for(k=len;k<MAX;k++)\n                    {\n                        text[k]=temporary[l];\n                        if(temporary[l]==0)\n                        {\n                            break;\n                        }\n                        l++;\n                    }\n                }\n                else\n                {\n                    strncpy(temporary,plus,strlen(plus)-1);\n                    temporary[strlen(plus)]='\\0';\n                    strcat(temporary,text);\n                    strcpy(text,temporary);\n                }\n                cursor+=strlen(plus)-1;\n            }\n            else\n            {\n                char command2[10];\n                scanf(\"%s%*c\",command2);\n                //run(command[0],command2[0]);\n            }\n\n            /*for(k=0;k<cursor;k++)\n            {\n                printf(\"%c\",text[k]);\n            }\n            printf(\"^\");\n            for(k=cursor;k<strlen(text)+1;k++)\n            {\n                printf(\"%c\",text[k]);\n            }\n            printf(\"\\n\");\n            */\n        }\n\n        for(k=0;k<cursor;k++)\n        {\n            printf(\"%c\",text[k]);\n        }\n        printf(\"^\");\n        for(k=cursor;k<strlen(text)+1;k++)\n        {\n            printf(\"%c\",text[k]);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nstatic\nchar cln[ 256 ];\n\nvoid getNextLine (\n  void\n  )\n{\n  fgets ( cln, sizeof ( cln ), stdin );\n  *( strchr ( cln, '\\n' ) ) = '\\0';\n}\n\n/** Application main entry point. */\nint main (\n  int     argc,\n  char  * argv[ ]\n  )\n{\n  int tc;\n\n  getNextLine ( );\n  tc = atoi ( cln );\n\n  while ( tc-- )\n  {\n    char    s[ 1024 ];\n    char  * c\n       ,  * e\n       ,  * p;\n    int n;\n\n    getNextLine ( );\n    memcpy ( s, cln, sizeof ( cln ) );\n    c = s; e = s + strlen ( s );\n\n    getNextLine ( );\n    n = atoi ( cln );\n\n    while ( n-- )\n    {\n      getNextLine ( );\n\n      if ( !strcmp ( cln, \"forward char\" ) )\n      {\n        c += !!( c != e );\n      }\n      else if ( !strcmp ( cln, \"forward word\" ) )\n      {\n        while ( c != e && *c == ' ' ) ++c;\n        while ( c != e && *c != ' ' ) ++c;\n      }\n      else if ( !strcmp ( cln, \"backward char\" ) )\n      {\n        c -= !!( c != s );\n      }\n      else if ( !strcmp ( cln, \"backward word\" ) )\n      {\n        while ( c != s && c[ -1 ] == ' ' ) --c;\n        while ( c != s && c[ -1 ] != ' ' ) --c;\n      }\n      else if ( !strcmp ( cln, \"delete char\" ) )\n      {\n        for ( p = c; p != e && p + 1 != e; ++p ) p[ 0 ] = p[ 1 ];\n        e -= !!( c != e );\n      }\n      else if ( !strcmp ( cln, \"delete word\" ) )\n      {\n        size_t len;\n\n        p = c;\n        while ( p != e && *p == ' ' ) ++p;\n        while ( p != e && *p != ' ' ) ++p;\n        len = p - c;\n\n        for ( p = c; p != e && p + len != e; ++p ) p[ 0 ] = p[ len ];\n        e -= len;\n      }\n      else /* insert */\n      {\n        size_t len;\n\n        for ( p = cln + 8; *p != '\\\"'; ++p );\n        len = p - ( cln + 8 );\n\n        e += len;\n        for ( p = e; p - len != c; --p )  p[ -1 ] = p[ -( len + 1 ) ];\n\n        for ( p = c; p != c + len; ++p )  *p = cln[ 8 + ( p - c ) ];\n        c += len;\n      }\n    }\n\n    for ( p = s; ( p - 1 ) != e; ++p )\n    {\n      if ( p == c ) putchar ( '^' );\n      if ( p != e ) putchar ( *p );\n    }\n    putchar ( '\\n' );\n  }\n\n  return ( 0 );\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n\n#define CMD_NUM 7\n\ntypedef struct {\n    int cursor;\n    char text[1001];\n    char buf[1001];\n} editor_t;\n\nvoid skip_space(editor_t *e) {\n    int len = strlen(e->text);\n    while (e->cursor < len &&\n           e->text[e->cursor] == ' ')\n        e->cursor++;\n}\n\nvoid forward_char(editor_t *e, const char *command) {\n    if (e->cursor >= strlen(e->text)) return;\n    e->cursor++;\n}\n\nvoid forward_word(editor_t *e, const char *command) {\n    int len = strlen(e->text);\n    skip_space(e);\n    while (e->cursor < len &&\n           e->text[e->cursor] != ' ')\n        e->cursor++;\n}\n\nvoid backward_char(editor_t *e, const char *command) {\n    if (e->cursor == 0) return;\n    e->cursor--;\n}\n\nvoid backward_word(editor_t *e, const char *command) {\n    while (e->cursor > 0 &&\n           e->text[e->cursor-1] == ' ')\n        e->cursor--;\n\n    while (e->cursor > 0 &&\n           e->text[e->cursor-1] != ' ')\n        e->cursor--;\n}\n\nvoid delete_char(editor_t *e, const char *command) {\n    int len = strlen(e->text);\n    if (e->cursor >= len) return;\n    strncpy(e->buf, e->text + e->cursor + 1, len - e->cursor); // include null\n    strncpy(e->text + e->cursor, e->buf, len - e->cursor);\n}\n\nvoid delete_word(editor_t *e, const char *command) {\n    int cur_pos = e->cursor;\n    int len = strlen(e->text);\n    skip_space(e);\n    if (e->cursor == len) {\n        e->cursor = cur_pos;\n        return;\n    }\n    forward_word(e, \"\");\n    strncpy(e->buf, e->text + e->cursor, len - e->cursor + 1);\n    strncpy(e->text + cur_pos, e->buf, len - e->cursor + 1);\n    e->cursor = cur_pos;\n}\n\nvoid insert(editor_t *e, const char *command) {\n    int len = strlen(e->text);\n    int cmd_len = strlen(command);\n    int a_pos = 8, a_len = cmd_len - 9;\n    strncpy(e->buf, e->text + e->cursor, len - e->cursor + 1);\n    strncpy(e->text + e->cursor, command + a_pos, a_len);\n    strncpy(e->text + e->cursor + a_len, e->buf, len - e->cursor + 1);\n    e->cursor += a_len;\n}\n\nint main () {\n    editor_t editor;\n    char command[120];\n    int i, j, k, n, m; \n    const char *commands[] = {\n        \"forward char\",\n        \"forward word\",\n        \"backward char\",\n        \"backward word\",\n        \"delete char\",\n        \"delete word\",\n        \"insert\"\n    };\n    void (*handlers[])(editor_t*, const char*) = {\n        forward_char,\n        forward_word,\n        backward_char,\n        backward_word,\n        delete_char,\n        delete_word,\n        insert\n    };\n\n    scanf(\"%d\\n\", &n);\n    for (i = 0; i < n; i++) {\n        editor.cursor = 0;\n        gets(editor.text);\n        scanf(\"%d\\n\", &m);\n        for (j = 0; j < m; j++) {\n            gets(command);\n            for (k = 0; k < CMD_NUM; k++) {\n                const char *cmd = commands[k];\n                if (strncmp(cmd, command, strlen(cmd)) == 0) {\n                    handlers[k](&editor, command);\n                    break;\n                }\n\n            }\n        }\n        insert(&editor, \"insert \\\"^\\\"\");\n        printf(\"%s\\n\", editor.text);\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n\n#define N 1000\n\nchar s[N];\nint cursor;\n\nint is_match(char cmd[20],char sq[120] ){\n  int len = strlen( cmd );\n  int i;\n  for( i=0;i<len;i++ ){\n    if( cmd[i]!=sq[i] )\n      return -1;\n  }\n  return i;\n}\n\nint main(void){\n  char s[101];\n  int line, loop;\n  int M,    cmdN;\n  char cmd[120];\n  char buf[110];\n  char buf2[1000];\n  int i,j,k,len;\n\n  scanf(\"%d \",&line);\n  for( loop=0;loop<line;loop++){\n    fgets( s,N,stdin);\n    len = strlen( s );\n    s[len-1]='\\0';\n    len = strlen( s );\n\n    scanf(\"%d \",&M);\n    cursor=0;\n    for( cmdN=0;cmdN<M;cmdN++){\n      fgets( cmd,120,stdin);\n      if(       is_match( \"forward char\",cmd)!=-1 ){\n\tif( cursor<len )\n\t  cursor++;\n      }else if( is_match( \"forward word\",cmd)!=-1 ){\n\tif( s[cursor]!=' ' )\n\t  for(  ;s[cursor]!=' '&&cursor <len;  cursor++ );\n\telse{\n\t  while( s[cursor]==' '&&cursor<len ) cursor++  ;\n\t  for(  ;s[cursor]!=' '&&cursor <len;  cursor++ );\n\t}\n      }else if( is_match( \"backward char\",cmd)!=-1 ){\n\tif( cursor>0 )\n\t  cursor--;\n      }else if( is_match( \"backward word\",cmd)!=-1 ){\n\tif( s[cursor]!=' ' ){\n\t  for(  ;s[cursor]!=' '&&cursor >0;  cursor-- );\n\t  if( cursor!=0 )\n\t    cursor++;\n\t} else {\n\t  while( s[cursor]==' '&&cursor!=0 ) cursor-- ;\n\t  //if( s[cursor]==' ' )\t    cursor--;\n\t  for(  ;s[cursor]!=' '&&cursor >0;  cursor-- );\n\t  if( cursor!=0 ) cursor++;\n\t}\n      }else if( (j=is_match( \"insert\",cmd))   !=-1 ){\n\ti=0;\n\twhile( 1 ){\n\t  buf2[i] = s[cursor+i];\n\t  if( buf2[i]=='\\0' )\n\t    break;\n\t  i++;\n\t}\n\tk = cursor;\n\twhile( cmd[j]!='\"' ) j++;\n\tj++;\n\twhile( 1 ){\n\t  s[k]= cmd[j++];\n\t  k++;\n\t  if( cmd[j]=='\"' ){\n\t    cursor=k;\n\t    break;\n\t  }\n\t}\n\ti=0;\n\twhile( 1 ){\n\t  s[k] = buf2[i];\n\t  if( s[k]=='\\0' ){\n\t    len = k;\n\t    break;\n\t  }\n\t  k++;i++;\n\t}\n\n      }else if( is_match( \"delete char\",cmd)  !=-1 ){\n\tif( cursor!=len ){\n\t  for(i=cursor;i<len;i++)\n\t    s[i]=s[i+1];\n\t  len--;\n\t}\n      }else if( is_match( \"delete word\",cmd)  !=-1 ){\n\ti=cursor;\n\tif( i!=len ){\n\t  for(j=i; s[j]!=' '&&j<len;j++ );\n\n\t  if( s[j]=='\\0' ){\n\t    s[i-1]='\\0';\n\t  } else {\n\t    for(k=0;k<j;k++)\n\t      s[i+k] = s[j+k];\n\t  }\n\t}\n\tlen = strlen( s );\n      }\n    }\n    for( i=0;i<=len;i++ ){\n      if( i==cursor )\n\tprintf(\"^\");\n      if( i<len )\n\tprintf(\"%c\",s[i]);\n    }\n    printf(\"\\n\");\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nstatic\nchar cln[ 256 ];\n\nvoid getNextLine (\n  void\n  )\n{\n  fgets ( cln, sizeof ( cln ), stdin );\n  *( strchr ( cln, '\\n' ) ) = '\\0';\n}\n\n/** Application main entry point. */\nint main (\n  int     argc,\n  char  * argv[ ]\n  )\n{\n  int tc;\n\n  getNextLine ( );\n  tc = atoi ( cln );\n\n  while ( tc-- )\n  {\n    char    s[ 1024 ];\n    char  * c\n       ,  * e\n       ,  * p;\n    int n;\n\n    getNextLine ( );\n    strcpy ( s, cln );\n    c = s; e = s + strlen ( s );\n\n    getNextLine ( );\n    n = atoi ( cln );\n\n    while ( n-- )\n    {\n      getNextLine ( );\n\n      if ( !strcmp ( cln, \"forward char\" ) )\n      {\n        c += !!( c != e );\n      }\n      else if ( !strcmp ( cln, \"forward word\" ) )\n      {\n        while ( c != e && *c == ' ' ) ++c;\n        while ( c != e && *c != ' ' ) ++c;\n      }\n      else if ( !strcmp ( cln, \"backward char\" ) )\n      {\n        c -= !!( c != s );\n      }\n      else if ( !strcmp ( cln, \"backward word\" ) )\n      {\n        while ( c != s && c[ -1 ] == ' ' ) --c;\n        while ( c != s && c[ -1 ] != ' ' ) --c;\n      }\n      else if ( !strcmp ( cln, \"delete char\" ) )\n      {\n        for ( p = c; p != e && p + 1 != e; ++p ) p[ 0 ] = p[ 1 ];\n        e -= !!( c != e );\n      }\n      else if ( !strcmp ( cln, \"delete word\" ) )\n      {\n        size_t len;\n\n        p = c;\n        while ( p != e && *p == ' ' ) ++p;\n        while ( p != e && *p != ' ' ) ++p;\n        len = p - c;\n\n        for ( p = c; p != e && p + len != e; ++p ) p[ 0 ] = p[ len ];\n        e -= len;\n      }\n      else /* insert */\n      {\n        size_t len;\n\n        for ( p = cln + 8; *p != '\\\"'; ++p );\n        len = p - ( cln + 8 );\n\n        e += len;\n        for ( p = e; p - len != c; --p )  p[ -1 ] = p[ -( len + 1 ) ];\n\n        for ( p = c; p != c + len; ++p )  *p = cln[ 8 + ( p - c ) ];\n        c += len;\n      }\n    }\n\n    for ( p = s; ( p - 1 ) != e; ++p )\n    {\n      if ( p == c ) putchar ( '^' );\n      if ( p != e ) putchar ( *p );\n    }\n    puts ( \"\" );\n  }\n\n  return ( 0 );\n}"
  },
  {
    "language": "Kotlin",
    "code": "fun main(args:Array<String>):Unit{\n    repeat(readLine()!!.toInt()){\n        val buffer = TextBuffer(readLine()!!.trim())\n        repeat(readLine()!!.toInt()){\n            val order = readLine()!!.trim()\n            when(order) {\n                \"forward char\" ->\n                    buffer.forwardChar()\n                \"forward word\" ->\n                    buffer.forwardWord()\n                \"backward char\" ->\n                    buffer.backwardChar()\n                \"backward word\" ->\n                    buffer.backwardWord()\n                \"delete char\" ->\n                    buffer.deleteChar()\n                \"delete word\" ->\n                    buffer.deleteWord()\n                else ->\n                    buffer.insertText(\"\\\".*\\\"\".toRegex().find(order)!!.value)\n            }\n            //println(buffer)\n        }\n        println(buffer)\n    }\n}\nclass TextBuffer(text:String){\n    private var mCursor:LinkedText = Text(text)\n    fun forwardChar():Unit {\n        mCursor = mCursor.forwardChar()\n    }\n    fun forwardWord():Unit {\n        mCursor = mCursor.forwardWord()\n    }\n    fun backwardChar():Unit {\n        mCursor = mCursor.backwardChar()\n    }\n    fun backwardWord():Unit {\n        mCursor = mCursor.backwardWord()\n    }\n    fun insertText(text:String){\n        val target = text.removePrefix(\"\\\"\").removeSuffix(\"\\\"\")\n        if (!target.isEmpty())\n            mCursor = mCursor.insertText(target)\n    }\n    fun deleteChar():Unit {\n        mCursor = mCursor.deleteChar()\n    }\n    fun deleteWord():Unit {\n        mCursor = mCursor.deleteWord()\n    }\n    override fun toString(): String = mCursor.toString()\n}\ninterface LinkedText {\n    fun forwardChar(): LinkedText\n    fun forwardWord(): LinkedText\n    fun backwardChar(): LinkedText\n    fun backwardWord(): LinkedText\n    fun insertText(text: String): LinkedText\n    fun deleteChar(): LinkedText\n    fun deleteWord(): LinkedText\n}\nobject Text {\n    operator fun invoke(text:String):LinkedText {\n        return if (text.isEmpty()){\n            val start = TextStart(Dummy)\n            val end = TextEnd(Dummy)\n            start.next = end\n            end.prev = start\n            start\n        }else {\n            val (first, last) = text.toLinkedText()\n            val start = TextStart(first)\n            val end = TextEnd(last)\n            first.prev = start\n            last.next = end\n            start\n        }\n    }\n    private interface StrictLinkedText:LinkedText{\n        override fun forwardChar(): ForwardText\n        override fun forwardWord(): ForwardText\n        override fun deleteChar(): ForwardText\n        override fun deleteWord(): ForwardText\n        override fun backwardChar(): BackwardText\n        override fun backwardWord(): BackwardText\n        override fun insertText(text: String): ForwardText\n    }\n    private interface BackwardText : StrictLinkedText {\n        var next: ForwardText\n        val isWordSeparator:Boolean\n        fun toTextPrev():String\n        fun backwardSub(wordExplored:Boolean = false):BackwardText\n    }\n    private interface ForwardText : StrictLinkedText {\n        var prev: BackwardText\n        fun deleteSub(wordRemoved:Boolean = false):ForwardText\n        fun forwardSub(wordExplored:Boolean = false):ForwardText\n        fun toTextNext():String\n        override fun insertText(text: String): ForwardText {\n            val (first, last) = text.toLinkedText()\n            prev.next = first\n            first.prev = prev\n            last.next = this\n            prev = last\n            return this\n        }\n    }\n    private class InTextCursor(private val mRightChar:Char, override var next: ForwardText, override var prev: BackwardText):BackwardText, ForwardText {\n        override fun backwardSub(wordExplored: Boolean): BackwardText {\n            return when{\n                wordExplored && prev.isWordSeparator -> this\n                else -> prev.backwardSub(!prev.isWordSeparator)\n            }\n        }\n        override fun forwardSub(wordExplored: Boolean): ForwardText {\n            return when{\n                wordExplored && isWordSeparator -> this\n                else -> next.forwardSub(!isWordSeparator)\n            }\n        }\n        override val isWordSeparator: Boolean = mRightChar == ' '\n        override fun toTextPrev(): String = \"${prev.toTextPrev()}$mRightChar\"\n        override fun toTextNext():String = \"$mRightChar${next.toTextNext()}\"\n        override fun deleteSub(wordRemoved: Boolean): ForwardText {\n            return when{\n                wordRemoved ->\n                    when{\n                        isWordSeparator -> this\n                        else -> {\n                            next.prev = prev\n                            prev.next = next\n                            next.deleteSub(true)\n                        }\n                    }\n                else -> {\n                    next.prev = prev\n                    prev.next = next\n                    next.deleteSub(!isWordSeparator)\n                }\n            }\n        }\n        override fun forwardChar(): ForwardText = next\n        override fun forwardWord(): ForwardText = forwardSub()\n        override fun backwardChar(): BackwardText = prev\n        override fun backwardWord(): BackwardText = backwardSub()\n        override fun deleteChar(): ForwardText {\n            prev.next = next\n            next.prev = prev\n            return next\n        }\n        override fun deleteWord(): ForwardText = deleteSub()\n        override fun toString(): String = \"${prev.toTextPrev()}^$mRightChar${next.toTextNext()}\"\n    }\n    private class TextStart(override var next:ForwardText) : BackwardText {\n        override fun backwardSub(wordExplored: Boolean): BackwardText = this\n        override val isWordSeparator: Boolean\n            get() = true\n        override fun forwardChar(): ForwardText = next.forwardChar()\n        override fun forwardWord(): ForwardText = next.forwardWord()\n        override fun deleteChar(): ForwardText {\n            next = next.deleteChar()\n            return next\n        }\n        override fun deleteWord(): ForwardText {\n            next = next.deleteWord()\n            return next\n        }\n        override fun toTextPrev(): String = \"\"\n        override fun backwardChar(): BackwardText = this\n        override fun backwardWord(): BackwardText = this\n        override fun insertText(text: String): ForwardText = next.insertText(text)\n        override fun toString(): String = \"^${next.toTextNext()}\"\n    }\n    private class TextEnd(override var prev:BackwardText) : ForwardText {\n        override fun forwardSub(wordExplored: Boolean): ForwardText = this\n        override fun forwardChar(): ForwardText = this\n        override fun forwardWord(): ForwardText = this\n        override fun deleteChar(): ForwardText = this\n        override fun deleteWord(): ForwardText = this\n        override fun backwardChar(): BackwardText = prev\n        override fun backwardWord(): BackwardText = prev.backwardSub(!prev.isWordSeparator)\n        override fun deleteSub(wordRemoved: Boolean): ForwardText = this\n        override fun toTextNext(): String = \"\"\n        override fun toString(): String = \"${prev.toTextPrev()}^\"\n    }\n    private object Dummy:ForwardText, BackwardText{\n        override fun backwardSub(wordExplored: Boolean): BackwardText {\n            TODO(\"not implemented\") //To change body of created functions use File | Settings | File Templates.\n        }\n\n        override fun forwardSub(wordExplored: Boolean): ForwardText {\n            TODO(\"not implemented\") //To change body of created functions use File | Settings | File Templates.\n        }\n\n        override val isWordSeparator: Boolean\n            get() = TODO(\"not implemented\") //To change initializer of created properties use File | Settings | File Templates.\n\n        override fun forwardChar(): ForwardText {\n            TODO(\"not implemented\") //To change body of created functions use File | Settings | File Templates.\n        }\n\n        override fun forwardWord(): ForwardText {\n            TODO(\"not implemented\") //To change body of created functions use File | Settings | File Templates.\n        }\n\n        override fun deleteChar(): ForwardText {\n            TODO(\"not implemented\") //To change body of created functions use File | Settings | File Templates.\n        }\n\n        override fun deleteWord(): ForwardText {\n            TODO(\"not implemented\") //To change body of created functions use File | Settings | File Templates.\n        }\n\n        override fun backwardChar(): BackwardText {\n            TODO(\"not implemented\") //To change body of created functions use File | Settings | File Templates.\n        }\n\n        override fun backwardWord(): BackwardText {\n            TODO(\"not implemented\") //To change body of created functions use File | Settings | File Templates.\n        }\n\n        override var next: ForwardText\n            get() = TODO(\"not implemented\") //To change initializer of created properties use File | Settings | File Templates.\n            set(value) {}\n\n        override fun toTextPrev(): String {\n            TODO(\"not implemented\") //To change body of created functions use File | Settings | File Templates.\n        }\n\n        override var prev: BackwardText\n            get() = TODO(\"not implemented\") //To change initializer of created properties use File | Settings | File Templates.\n            set(value) {}\n\n        override fun deleteSub(wordRemoved: Boolean): ForwardText {\n            TODO(\"not implemented\") //To change body of created functions use File | Settings | File Templates.\n        }\n\n        override fun toTextNext(): String {\n            TODO(\"not implemented\") //To change body of created functions use File | Settings | File Templates.\n        }\n\n    }\n    private val wordSeparator = listOf(' ')\n    private fun Char.isWordSeparator(): Boolean = wordSeparator.contains(this)\n    private fun String.toLinkedText(): Pair<InTextCursor, InTextCursor> {\n        val result = this.map { InTextCursor(it, Dummy, Dummy) }.toTypedArray()\n        return if (result.size != 1){\n            for (i in 1 until result.size){\n                result[i - 1].next = result[i]\n                result[i].prev = result[i - 1]\n            }\n            Pair(result.first(), result.last())\n        }else{\n            Pair(result.first(), result.first())\n        }\n    }\n}\n"
  },
  {
    "language": "Kotlin",
    "code": "fun main(args:Array<String>):Unit{\n    repeat(readLine()!!.toInt()){\n        val buffer = TextBuffer(readLine()!!.trim())\n        repeat(readLine()!!.toInt()){\n            val order = readLine()!!.trim()\n            when(order) {\n                \"forward char\" ->\n                    buffer.forwardChar()\n                \"forward word\" ->\n                    buffer.forwardWord()\n                \"backward char\" ->\n                    buffer.backwardChar()\n                \"backward word\" ->\n                    buffer.backwardWord()\n                \"delete char\" ->\n                    buffer.deleteChar()\n                \"delete word\" ->\n                    buffer.deleteWord()\n                else ->\n                    buffer.insertText(\"\\\".*\\\"\".toRegex().find(order)!!.value)\n            }\n            //println(buffer)\n        }\n        println(buffer)\n    }\n}\nclass TextBuffer(text:String){\n    private var mCursor:LinkedText = Text(text)\n    fun forwardChar():Unit {\n        mCursor = mCursor.forwardChar()\n    }\n    fun forwardWord():Unit {\n        mCursor = mCursor.forwardWord()\n    }\n    fun backwardChar():Unit {\n        mCursor = mCursor.backwardChar()\n    }\n    fun backwardWord():Unit {\n        mCursor = mCursor.backwardWord()\n    }\n    fun insertText(text:String){\n        val target = text.removePrefix(\"\\\"\").removeSuffix(\"\\\"\")\n        if (!target.isEmpty())\n            mCursor = mCursor.insertText(target)\n    }\n    fun deleteChar():Unit {\n        mCursor = mCursor.deleteChar()\n    }\n    fun deleteWord():Unit {\n        mCursor = mCursor.deleteWord()\n    }\n    override fun toString(): String = mCursor.toString()\n}\ninterface LinkedText {\n    fun forwardChar(): LinkedText\n    fun forwardWord(): LinkedText\n    fun backwardChar(): LinkedText\n    fun backwardWord(): LinkedText\n    fun insertText(text: String): LinkedText\n    fun deleteChar(): LinkedText\n    fun deleteWord(): LinkedText\n}\nobject Text {\n    operator fun invoke(text:String):LinkedText {\n        return if (text.isEmpty()){\n            val start = TextStart(Dummy)\n            val end = TextEnd(Dummy)\n            start.next = end\n            end.prev = start\n            start\n        }else {\n            val (first, last) = text.toLinkedText()\n            val start = TextStart(first)\n            val end = TextEnd(last)\n            first.prev = start\n            last.next = end\n            start\n        }\n    }\n    private interface StrictLinkedText:LinkedText{\n        override fun forwardChar(): ForwardText\n        override fun forwardWord(): ForwardText\n        override fun deleteChar(): ForwardText\n        override fun deleteWord(): ForwardText\n        override fun backwardChar(): BackwardText\n        override fun backwardWord(): BackwardText\n        override fun insertText(text: String): ForwardText\n    }\n    private interface BackwardText : StrictLinkedText {\n        var next: ForwardText\n        val isWordSeparator:Boolean\n        fun toTextPrev():String\n        fun backwardSub(wordExplored:Boolean = false):BackwardText\n    }\n    private interface ForwardText : StrictLinkedText {\n        var prev: BackwardText\n        fun deleteSub(wordRemoved:Boolean = false):ForwardText\n        fun forwardSub(wordExplored:Boolean = false):ForwardText\n        fun toTextNext():String\n        override fun insertText(text: String): ForwardText {\n            val (first, last) = text.toLinkedText()\n            prev.next = first\n            first.prev = prev\n            last.next = this\n            prev = last\n            return this\n        }\n    }\n    private class InTextCursor(private val mRightChar:Char, override var next: ForwardText, override var prev: BackwardText):BackwardText, ForwardText {\n        override fun backwardSub(wordExplored: Boolean): BackwardText {\n            return when{\n                wordExplored && prev.isWordSeparator -> this\n                else -> prev.backwardSub(!prev.isWordSeparator)\n            }\n        }\n        override fun forwardSub(wordExplored: Boolean): ForwardText {\n            return when{\n                wordExplored && isWordSeparator -> this\n                else -> next.forwardSub(!isWordSeparator)\n            }\n        }\n        override val isWordSeparator: Boolean = mRightChar == ' '\n        override fun toTextPrev(): String = \"${prev.toTextPrev()}$mRightChar\"\n        override fun toTextNext():String = \"$mRightChar${next.toTextNext()}\"\n        override fun deleteSub(wordRemoved: Boolean): ForwardText {\n            return when{\n                wordRemoved ->\n                    when{\n                        isWordSeparator -> this\n                        else -> {\n                            next.prev = prev\n                            prev.next = next\n                            next.deleteSub(true)\n                        }\n                    }\n                else -> {\n                    next.prev = prev\n                    prev.next = next\n                    next.deleteSub(!isWordSeparator)\n                }\n            }\n        }\n        override fun forwardChar(): ForwardText = next\n        override fun forwardWord(): ForwardText = forwardSub()\n        override fun backwardChar(): BackwardText = prev\n        override fun backwardWord(): BackwardText = backwardSub()\n        override fun deleteChar(): ForwardText {\n            prev.next = next\n            next.prev = prev\n            return next\n        }\n        override fun deleteWord(): ForwardText = deleteSub()\n        override fun toString(): String = \"${prev.toTextPrev()}^$mRightChar${next.toTextNext()}\"\n    }\n    private class TextStart(override var next:ForwardText) : BackwardText {\n        override fun backwardSub(wordExplored: Boolean): BackwardText = this\n        override val isWordSeparator: Boolean\n            get() = true\n        override fun forwardChar(): ForwardText = next.forwardChar()\n        override fun forwardWord(): ForwardText = next.forwardWord()\n        override fun deleteChar(): ForwardText {\n            next = next.deleteChar()\n            return next\n        }\n        override fun deleteWord(): ForwardText {\n            next = next.deleteWord()\n            return next\n        }\n        override fun toTextPrev(): String = \"\"\n        override fun backwardChar(): BackwardText = this\n        override fun backwardWord(): BackwardText = this\n        override fun insertText(text: String): ForwardText = next.insertText(text)\n        override fun toString(): String = \"^${next.toTextNext()}\"\n    }\n    private class TextEnd(override var prev:BackwardText) : ForwardText {\n        override fun forwardSub(wordExplored: Boolean): ForwardText = this\n        override fun forwardChar(): ForwardText = this\n        override fun forwardWord(): ForwardText = this\n        override fun deleteChar(): ForwardText = this\n        override fun deleteWord(): ForwardText = this\n        override fun backwardChar(): BackwardText = prev\n        override fun backwardWord(): BackwardText = prev.backwardSub(!prev.isWordSeparator)\n        override fun deleteSub(wordRemoved: Boolean): ForwardText = this\n        override fun toTextNext(): String = \"\"\n        override fun toString(): String = \"${prev.toTextPrev()}^\"\n    }\n    private object Dummy:ForwardText, BackwardText{\n        override fun backwardSub(wordExplored: Boolean): BackwardText {\n            TODO(\"not implemented\") //To change body of created functions use File | Settings | File Templates.\n        }\n\n        override fun forwardSub(wordExplored: Boolean): ForwardText {\n            TODO(\"not implemented\") //To change body of created functions use File | Settings | File Templates.\n        }\n\n        override val isWordSeparator: Boolean\n            get() = TODO(\"not implemented\") //To change initializer of created properties use File | Settings | File Templates.\n\n        override fun forwardChar(): ForwardText {\n            TODO(\"not implemented\") //To change body of created functions use File | Settings | File Templates.\n        }\n\n        override fun forwardWord(): ForwardText {\n            TODO(\"not implemented\") //To change body of created functions use File | Settings | File Templates.\n        }\n\n        override fun deleteChar(): ForwardText {\n            TODO(\"not implemented\") //To change body of created functions use File | Settings | File Templates.\n        }\n\n        override fun deleteWord(): ForwardText {\n            TODO(\"not implemented\") //To change body of created functions use File | Settings | File Templates.\n        }\n\n        override fun backwardChar(): BackwardText {\n            TODO(\"not implemented\") //To change body of created functions use File | Settings | File Templates.\n        }\n\n        override fun backwardWord(): BackwardText {\n            TODO(\"not implemented\") //To change body of created functions use File | Settings | File Templates.\n        }\n\n        override var next: ForwardText\n            get() = TODO(\"not implemented\") //To change initializer of created properties use File | Settings | File Templates.\n            set(value) {}\n\n        override fun toTextPrev(): String {\n            TODO(\"not implemented\") //To change body of created functions use File | Settings | File Templates.\n        }\n\n        override var prev: BackwardText\n            get() = TODO(\"not implemented\") //To change initializer of created properties use File | Settings | File Templates.\n            set(value) {}\n\n        override fun deleteSub(blankRemoved: Boolean): ForwardText {\n            TODO(\"not implemented\") //To change body of created functions use File | Settings | File Templates.\n        }\n\n        override fun toTextNext(): String {\n            TODO(\"not implemented\") //To change body of created functions use File | Settings | File Templates.\n        }\n\n    }\n    private val wordSeparator = listOf(' ')\n    private fun Char.isWordSeparator(): Boolean = wordSeparator.contains(this)\n    private fun String.toLinkedText(): Pair<InTextCursor, InTextCursor> {\n        val result = this.map { InTextCursor(it, Dummy, Dummy) }.toTypedArray()\n        return if (result.size != 1){\n            for (i in 1 until result.size){\n                result[i - 1].next = result[i]\n                result[i].prev = result[i - 1]\n            }\n            Pair(result.first(), result.last())\n        }else{\n            Pair(result.first(), result.first())\n        }\n    }\n}\n"
  },
  {
    "language": "Kotlin",
    "code": "fun main(args:Array<String>):Unit{\n    repeat(readLine()!!.toInt()){\n        val buffer = TextBuffer(readLine()!!.trim())\n        repeat(readLine()!!.toInt()){\n            val order = readLine()!!.trim()\n            when(order) {\n                \"forward char\" ->\n                    buffer.forwardChar()\n                \"forward word\" ->\n                    buffer.forwardWord()\n                \"backward char\" ->\n                    buffer.backwardChar()\n                \"backward word\" ->\n                    buffer.backwardWord()\n                \"delete char\" ->\n                    buffer.deleteChar()\n                \"delete word\" ->\n                    buffer.deleteWord()\n                else ->\n                    buffer.insertText(\"\\\".*\\\"\".toRegex().find(order)!!.value)\n            }\n        }\n        println(buffer)\n    }\n}\nclass TextBuffer(text:String){\n    private var mCursor:LinkedText = Text(text)\n    fun forwardChar():Unit {\n        mCursor = mCursor.forwardChar()\n    }\n    fun forwardWord():Unit {\n        mCursor = mCursor.forwardWord()\n    }\n    fun backwardChar():Unit {\n        mCursor = mCursor.backwardChar()\n    }\n    fun backwardWord():Unit {\n        mCursor = mCursor.backwardWord()\n    }\n    fun insertText(text:String){\n        val target = text.removePrefix(\"\\\"\").removeSuffix(\"\\\"\")\n        if (!target.isEmpty())\n            mCursor = mCursor.insertText(target)\n    }\n    fun deleteChar():Unit {\n        mCursor = mCursor.deleteChar()\n    }\n    fun deleteWord():Unit {\n        mCursor = mCursor.deleteWord()\n    }\n    override fun toString(): String = mCursor.toString()\n}\ninterface LinkedText {\n    fun forwardChar(): LinkedText\n    fun forwardWord(): LinkedText\n    fun backwardChar(): LinkedText\n    fun backwardWord(): LinkedText\n    fun insertText(text: String): LinkedText\n    fun deleteChar(): LinkedText\n    fun deleteWord(): LinkedText\n}\nobject Text {\n    operator fun invoke(text:String):LinkedText {\n        return if (text.isEmpty()){\n            val start = TextStart(Dummy)\n            val end = TextEnd(Dummy)\n            start.next = end\n            end.prev = start\n            start\n        }else {\n            val (first, last) = text.toLinkedText()\n            val start = TextStart(first)\n            val end = TextEnd(last)\n            first.prev = start\n            last.next = end\n            start\n        }\n    }\n    private interface StrictLinkedText:LinkedText{\n        override fun forwardChar(): NotStartText\n        override fun forwardWord(): NotStartText\n        override fun deleteChar(): NotStartText\n        override fun deleteWord(): NotStartText\n        override fun backwardChar(): NotEndText\n        override fun backwardWord(): NotEndText\n        override fun insertText(text: String): NotStartText\n    }\n    private interface NotEndText : StrictLinkedText {\n        var next: NotStartText\n        val isWordSeparator:Boolean\n        fun toTextPrev():String\n        fun backwardSub(wordExplored:Boolean = false):NotEndText\n    }\n    private interface NotStartText : StrictLinkedText {\n        var prev: NotEndText\n        fun deleteSub(blankRemoved:Boolean = false):NotStartText\n        fun forwardSub(wordExplored:Boolean = false):NotStartText\n        fun toTextNext():String\n        override fun insertText(text: String): NotStartText {\n            val (first, last) = text.toLinkedText()\n            prev.next = first\n            first.prev = prev\n            last.next = this\n            prev = last\n            return this\n        }\n    }\n    private class InTextCursor(private val mRightChar:Char, override var next: NotStartText, override var prev: NotEndText):NotEndText, NotStartText {\n        override fun backwardSub(wordExplored: Boolean): NotEndText {\n            return when{\n                wordExplored && prev.isWordSeparator -> this\n                else -> prev.backwardSub(!mRightChar.isWordSeparator())\n            }\n        }\n\n        override fun forwardSub(wordExplored: Boolean): NotStartText {\n            return when{\n                wordExplored && mRightChar.isWordSeparator() -> this\n                else -> next.forwardSub(!mRightChar.isWordSeparator())\n            }\n        }\n\n        override val isWordSeparator: Boolean\n            get() = mRightChar == ' '\n        override fun toTextPrev(): String = \"${prev.toTextPrev()}$mRightChar\"\n        override fun toTextNext():String = \"$mRightChar${next.toTextNext()}\"\n        override fun deleteSub(blankRemoved: Boolean): NotStartText {\n            next.prev = prev\n            prev.next = next\n            return when{\n                blankRemoved -> {\n                    when {\n                        mRightChar.isWordSeparator() -> next\n                        else -> next.deleteSub(true)\n                    }\n                }\n                else -> {\n                    when(mRightChar){\n                        ' ' -> deleteSub(false)\n                        else -> deleteSub(true)\n                    }\n                }\n            }\n        }\n        override fun forwardChar(): NotStartText = next\n        override fun forwardWord(): NotStartText = forwardSub()\n        override fun backwardChar(): NotEndText = prev\n        override fun backwardWord(): NotEndText = backwardSub()\n        override fun deleteChar(): NotStartText {\n            prev.next = next\n            next.prev = prev\n            return next\n        }\n        override fun deleteWord(): NotStartText = deleteSub()\n        override fun toString(): String = \"${prev.toTextPrev()}^$mRightChar${next.toTextNext()}\"\n    }\n    private class TextStart(override var next:NotStartText) : NotEndText {\n        override fun backwardSub(wordExplored: Boolean): NotEndText = this\n        override val isWordSeparator: Boolean\n            get() = true\n        override fun forwardChar(): NotStartText = next.forwardChar()\n        override fun forwardWord(): NotStartText = next.forwardWord()\n        override fun deleteChar(): NotStartText {\n            next = next.deleteChar()\n            return next\n        }\n        override fun deleteWord(): NotStartText {\n            next = next.deleteWord()\n            return next\n        }\n        override fun toTextPrev(): String = \"\"\n        override fun backwardChar(): NotEndText = this\n        override fun backwardWord(): NotEndText = this\n        override fun insertText(text: String): NotStartText = next.insertText(text)\n        override fun toString(): String = \"^${next.toTextNext()}\"\n    }\n    private class TextEnd(override var prev:NotEndText) : NotStartText {\n        override fun forwardSub(wordExplored: Boolean): NotStartText = this\n        override fun forwardChar(): NotStartText = this\n        override fun forwardWord(): NotStartText = this\n        override fun deleteChar(): NotStartText = this\n        override fun deleteWord(): NotStartText = this\n        override fun backwardChar(): NotEndText = prev.backwardChar()\n        override fun backwardWord(): NotEndText = prev.backwardWord()\n        override fun deleteSub(blankRemoved: Boolean): NotStartText = this\n        override fun toTextNext(): String = \"\"\n        override fun toString(): String = \"${prev.toTextPrev()}^\"\n    }\n    private object Dummy:NotStartText, NotEndText{\n        override fun backwardSub(wordExplored: Boolean): NotEndText {\n            TODO(\"not implemented\") //To change body of created functions use File | Settings | File Templates.\n        }\n\n        override fun forwardSub(wordExplored: Boolean): NotStartText {\n            TODO(\"not implemented\") //To change body of created functions use File | Settings | File Templates.\n        }\n\n        override val isWordSeparator: Boolean\n            get() = TODO(\"not implemented\") //To change initializer of created properties use File | Settings | File Templates.\n\n        override fun forwardChar(): NotStartText {\n            TODO(\"not implemented\") //To change body of created functions use File | Settings | File Templates.\n        }\n\n        override fun forwardWord(): NotStartText {\n            TODO(\"not implemented\") //To change body of created functions use File | Settings | File Templates.\n        }\n\n        override fun deleteChar(): NotStartText {\n            TODO(\"not implemented\") //To change body of created functions use File | Settings | File Templates.\n        }\n\n        override fun deleteWord(): NotStartText {\n            TODO(\"not implemented\") //To change body of created functions use File | Settings | File Templates.\n        }\n\n        override fun backwardChar(): NotEndText {\n            TODO(\"not implemented\") //To change body of created functions use File | Settings | File Templates.\n        }\n\n        override fun backwardWord(): NotEndText {\n            TODO(\"not implemented\") //To change body of created functions use File | Settings | File Templates.\n        }\n\n        override var next: NotStartText\n            get() = TODO(\"not implemented\") //To change initializer of created properties use File | Settings | File Templates.\n            set(value) {}\n\n        override fun toTextPrev(): String {\n            TODO(\"not implemented\") //To change body of created functions use File | Settings | File Templates.\n        }\n\n        override var prev: NotEndText\n            get() = TODO(\"not implemented\") //To change initializer of created properties use File | Settings | File Templates.\n            set(value) {}\n\n        override fun deleteSub(blankRemoved: Boolean): NotStartText {\n            TODO(\"not implemented\") //To change body of created functions use File | Settings | File Templates.\n        }\n\n        override fun toTextNext(): String {\n            TODO(\"not implemented\") //To change body of created functions use File | Settings | File Templates.\n        }\n\n    }\n    private val wordSeparator = listOf(' ', ',', '.')\n    private fun Char.isWordSeparator(): Boolean = wordSeparator.contains(this)\n    private fun String.toLinkedText(): Pair<InTextCursor, InTextCursor> {\n        val result = this.map { InTextCursor(it, Dummy, Dummy) }\n        return if (result.size != 1){\n            result.zipWithNext().forEach { (prev, next) ->\n                prev.next = next\n                next.prev = prev\n            }\n            Pair(result.first(), result.last())\n        }else{\n            Pair(result.first(), result.first())\n        }\n    }\n}\n"
  },
  {
    "language": "Kotlin",
    "code": "fun main(args:Array<String>):Unit{\n    repeat(readLine()!!.toInt()){\n        val buffer = TextBuffer(readLine()!!.trim())\n        repeat(readLine()!!.toInt()){\n            val order = readLine()!!.trim()\n            when(order) {\n                \"forward char\" ->\n                    buffer.forwardChar()\n                \"forward word\" ->\n                    buffer.forwardWord()\n                \"backward char\" ->\n                    buffer.backwardChar()\n                \"backward word\" ->\n                    buffer.backwardWord()\n                \"delete char\" ->\n                    buffer.deleteChar()\n                \"delete word\" ->\n                    buffer.deleteWord()\n                else ->\n                    buffer.insertText(\"\\\".*\\\"\".toRegex().find(order)!!.value)\n            }\n        }\n        println(buffer)\n    }\n}\nclass TextBuffer(text:String){\n    private var mCursor:LinkedText = Text(text)\n    fun forwardChar():Unit {\n        mCursor = mCursor.forwardChar()\n    }\n    fun forwardWord():Unit {\n        mCursor = mCursor.forwardWord()\n    }\n    fun backwardChar():Unit {\n        mCursor = mCursor.backwardChar()\n    }\n    fun backwardWord():Unit {\n        mCursor = mCursor.backwardWord()\n    }\n    fun insertText(text:String){\n        val target = text.removePrefix(\"\\\"\").removeSuffix(\"\\\"\")\n        if (!target.isEmpty())\n            mCursor = mCursor.insertText(target)\n    }\n    fun deleteChar():Unit {\n        mCursor = mCursor.deleteChar()\n    }\n    fun deleteWord():Unit {\n        mCursor = mCursor.deleteWord()\n    }\n    override fun toString(): String = mCursor.toString()\n}\ninterface LinkedText {\n    fun forwardChar(): LinkedText\n    fun forwardWord(): LinkedText\n    fun backwardChar(): LinkedText\n    fun backwardWord(): LinkedText\n    fun insertText(text: String): LinkedText\n    fun deleteChar(): LinkedText\n    fun deleteWord(): LinkedText\n}\nobject Text {\n    operator fun invoke(text:String):LinkedText {\n        return if (text.isEmpty()){\n            val start = TextStart(Dummy)\n            val end = TextEnd(Dummy)\n            start.next = end\n            end.prev = start\n            start\n        }else {\n            val (first, last) = text.toLinkedText()\n            val start = TextStart(first)\n            val end = TextEnd(last)\n            first.prev = start\n            last.next = end\n            start\n        }\n    }\n    private interface StrictLinkedText:LinkedText{\n        override fun forwardChar(): ForwardText\n        override fun forwardWord(): ForwardText\n        override fun deleteChar(): ForwardText\n        override fun deleteWord(): ForwardText\n        override fun backwardChar(): BackwardText\n        override fun backwardWord(): BackwardText\n        override fun insertText(text: String): ForwardText\n    }\n    private interface BackwardText : StrictLinkedText {\n        var next: ForwardText\n        val isWordSeparator:Boolean\n        fun toTextPrev():String\n        fun backwardSub(wordExplored:Boolean = false):BackwardText\n    }\n    private interface ForwardText : StrictLinkedText {\n        var prev: BackwardText\n        fun forwardSub(wordExplored:Boolean = false):ForwardText\n        fun toTextNext():String\n        override fun insertText(text: String): ForwardText {\n            val (first, last) = text.toLinkedText()\n            prev.next = first\n            first.prev = prev\n            last.next = this\n            prev = last\n            return this\n        }\n    }\n    private class InTextCursor(private val mRightChar:Char, override var next: ForwardText, override var prev: BackwardText):BackwardText, ForwardText {\n        override fun backwardSub(wordExplored: Boolean): BackwardText {\n            return when{\n                wordExplored && prev.isWordSeparator -> this\n                else -> prev.backwardSub(!prev.isWordSeparator)\n            }\n        }\n        override fun forwardSub(wordExplored: Boolean): ForwardText {\n            return when{\n                wordExplored && isWordSeparator -> this\n                else -> next.forwardSub(!isWordSeparator)\n            }\n        }\n        override val isWordSeparator: Boolean = mRightChar == ' '\n        override fun toTextPrev(): String = \"${prev.toTextPrev()}$mRightChar\"\n        override fun toTextNext():String = \"$mRightChar${next.toTextNext()}\"\n        override fun forwardChar(): ForwardText = next\n        override fun forwardWord(): ForwardText = forwardSub()\n        override fun backwardChar(): BackwardText = prev\n        override fun backwardWord(): BackwardText = backwardSub()\n        override fun deleteChar(): ForwardText {\n            prev.next = next\n            next.prev = prev\n            return next\n        }\n        override fun deleteWord(): ForwardText {\n            val wordEnd = forwardWord()\n            return when {\n                wordEnd.backwardChar().isWordSeparator -> this\n                else -> {\n                    prev.next = wordEnd\n                    wordEnd.prev = prev\n                    wordEnd\n                }\n            }\n        }\n        override fun toString(): String = \"${prev.toTextPrev()}^$mRightChar${next.toTextNext()}\"\n    }\n    private class TextStart(override var next:ForwardText) : BackwardText {\n        override fun backwardSub(wordExplored: Boolean): BackwardText = this\n        override val isWordSeparator: Boolean\n            get() = true\n        override fun forwardChar(): ForwardText = next.forwardChar()\n        override fun forwardWord(): ForwardText = next.forwardWord()\n        override fun deleteChar(): ForwardText {\n            next = next.deleteChar()\n            return next\n        }\n        override fun deleteWord(): ForwardText {\n            next = next.deleteWord()\n            return next\n        }\n        override fun toTextPrev(): String = \"\"\n        override fun backwardChar(): BackwardText = this\n        override fun backwardWord(): BackwardText = this\n        override fun insertText(text: String): ForwardText = next.insertText(text)\n        override fun toString(): String = \"^${next.toTextNext()}\"\n    }\n    private class TextEnd(override var prev:BackwardText) : ForwardText {\n        override fun forwardSub(wordExplored: Boolean): ForwardText = this\n        override fun forwardChar(): ForwardText = this\n        override fun forwardWord(): ForwardText = this\n        override fun deleteChar(): ForwardText = this\n        override fun deleteWord(): ForwardText = this\n        override fun backwardChar(): BackwardText = prev\n        override fun backwardWord(): BackwardText = prev.backwardSub(!prev.isWordSeparator)\n        override fun toTextNext(): String = \"\"\n        override fun toString(): String = \"${prev.toTextPrev()}^\"\n    }\n    private object Dummy:ForwardText, BackwardText{\n        override fun backwardSub(wordExplored: Boolean): BackwardText {\n            TODO(\"not implemented\") //To change body of created functions use File | Settings | File Templates.\n        }\n\n        override fun forwardSub(wordExplored: Boolean): ForwardText {\n            TODO(\"not implemented\") //To change body of created functions use File | Settings | File Templates.\n        }\n\n        override val isWordSeparator: Boolean\n            get() = TODO(\"not implemented\") //To change initializer of created properties use File | Settings | File Templates.\n\n        override fun forwardChar(): ForwardText {\n            TODO(\"not implemented\") //To change body of created functions use File | Settings | File Templates.\n        }\n\n        override fun forwardWord(): ForwardText {\n            TODO(\"not implemented\") //To change body of created functions use File | Settings | File Templates.\n        }\n\n        override fun deleteChar(): ForwardText {\n            TODO(\"not implemented\") //To change body of created functions use File | Settings | File Templates.\n        }\n\n        override fun deleteWord(): ForwardText {\n            TODO(\"not implemented\") //To change body of created functions use File | Settings | File Templates.\n        }\n\n        override fun backwardChar(): BackwardText {\n            TODO(\"not implemented\") //To change body of created functions use File | Settings | File Templates.\n        }\n\n        override fun backwardWord(): BackwardText {\n            TODO(\"not implemented\") //To change body of created functions use File | Settings | File Templates.\n        }\n\n        override var next: ForwardText\n            get() = TODO(\"not implemented\") //To change initializer of created properties use File | Settings | File Templates.\n            set(value) {}\n\n        override fun toTextPrev(): String {\n            TODO(\"not implemented\") //To change body of created functions use File | Settings | File Templates.\n        }\n\n        override var prev: BackwardText\n            get() = TODO(\"not implemented\") //To change initializer of created properties use File | Settings | File Templates.\n            set(value) {}\n\n        override fun toTextNext(): String {\n            TODO(\"not implemented\") //To change body of created functions use File | Settings | File Templates.\n        }\n\n    }\n    private val wordSeparator = listOf(' ')\n    private fun Char.isWordSeparator(): Boolean = wordSeparator.contains(this)\n    private fun String.toLinkedText(): Pair<InTextCursor, InTextCursor> {\n        val result = this.map { InTextCursor(it, Dummy, Dummy) }.toTypedArray()\n        return if (result.size != 1){\n            for (i in 1 until result.size){\n                result[i - 1].next = result[i]\n                result[i].prev = result[i - 1]\n            }\n            Pair(result.first(), result.last())\n        }else{\n            Pair(result.first(), result.first())\n        }\n    }\n}\n"
  },
  {
    "language": "Java",
    "code": "import java.io.InputStream;\nimport java.io.PrintWriter;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Deque;\nimport java.util.HashMap;\nimport java.util.InputMismatchException;\nimport java.util.Map;\nimport java.util.PriorityQueue;\nimport java.util.Scanner;\nimport java.math.BigInteger;\nimport java.math.BigDecimal;\n      \npublic class Main{\n  \nstatic final InputStream in=System.in;\nstatic final PrintWriter out=new PrintWriter(System.out);\nstatic final int INF=Integer.MAX_VALUE/2;\nstatic final long LINF=Long.MAX_VALUE/2;\nstatic int MAX=1010;\nstatic char[] str=new char[MAX+1];\n  \npublic static void main(String[] args){\n  Scanner sc=new Scanner(in);\n  int n=sc.nextInt(); sc.nextLine();\n  while(n-->0){\n    String line=sc.nextLine();\n    int cur=0;\n    Arrays.fill(str,'-');\n    for(int i=0;i<line.length();i++) str[i]=line.charAt(i);\n    int m=sc.nextInt(); sc.nextLine();\n    while(m-->0){\n      String com0=sc.next();\n      String com1=sc.next();\n      sc.nextLine();\n      if(\"forward\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(str[cur]!='-') cur++;\n        }\n        else{\n          while(str[cur]==' ') cur++;\n          while(str[cur]!=' '&&str[cur]!='-') cur++;\n        }\n      }\n      else if(\"backward\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(cur>0) cur--;\n        }\n        else{\n          while(cur>0&&str[cur-1]==' ') cur--;\n          while(cur>0&&str[cur-1]!=' ') cur--;\n        }\n      }\n      else if(\"insert\".equals(com0)){\n        if(com1.length()>2){\n          String insertionStr=com1.substring(1,com1.length()-1);\n          for(int i=MAX-insertionStr.length();i>=cur;i--){\n            if(str[i]!='-') str[i+insertionStr.length()]=str[i];\n          }\n          for(int i=0;i<insertionStr.length();i++){\n            str[cur+i]=insertionStr.charAt(i);\n          }\n          cur+=insertionStr.length();\n        }\n      }\n      else if(\"delete\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(str[cur]!='-'){\n            for(int i=cur;;i++){\n              if(str[i]=='-') break;\n              str[i]=str[i+1];\n            }\n          }\n        }\n        else{\n          int cnt=cur;\n          while(str[cnt]==' ') cnt++;\n          if(str[cnt]!='-'){\n            while(str[cnt]!=' '&&str[cnt]!='-') cnt++;\n            for(int i=cur;;i++){\n              if(str[i]=='-') break;\n              str[i]=str[i-cur+cnt];\n            }\n          }\n        }\n      }\n    }\n    StringBuilder sb=new StringBuilder();\n    for(int i=0;;i++){\n      if(i==cur) sb.append(\"^\");\n      if(str[i]=='-') break;\n      sb.append(String.valueOf(str[i]));\n    }\n    out.println(sb);\n  }\nout.flush();\n}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.IOException;\nimport java.util.InputMismatchException;\nimport java.util.Scanner;\n\npublic class Main {\n\tvoid run() {\n\t\tScanner sc = new Scanner(System.in);\n\n\t\tint tc = sc.nextInt();\n\t\tsc.nextLine();\n\t\tfor (int T = 0; T < tc; T++) {\n\t\t\tStringBuilder str = new StringBuilder(sc.nextLine());\n\t\t\tint n = sc.nextInt();\n\t\t\tsc.nextLine();\n\t\t\tint id = 0;\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tString s = sc.nextLine();\n\n\t\t\t\tif (s.equals(\"forward char\")) {\n\t\t\t\t\tid = Math.min(id + 1, str.length());\n\t\t\t\t}\n\t\t\t\tif (s.equals(\"backward char\")) {\n\t\t\t\t\tid = Math.max(id - 1, 0);\n\t\t\t\t}\n\t\t\t\tif (s.equals(\"forward word\")) {\n\t\t\t\t\twhile (id < str.length() && str.charAt(id) == ' ') {\n\t\t\t\t\t\tid++;\n\t\t\t\t\t}\n\t\t\t\t\twhile (id < str.length() && str.charAt(id) != ' ') {\n\t\t\t\t\t\tid++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (s.equals(\"backward word\")) {\n\t\t\t\t\twhile (0 < id && str.charAt(id - 1) == ' ') {\n\t\t\t\t\t\tid--;\n\t\t\t\t\t}\n\t\t\t\t\twhile (0 < id && str.charAt(id - 1) != ' ') {\n\t\t\t\t\t\tid--;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (s.charAt(0) == 'i') {\n\t\t\t\t\tint len = s.length() - 9;\n\t\t\t\t\tchar[] c = new char[len];\n\t\t\t\t\tfor (int j = 0; j < len; j++) {\n\t\t\t\t\t\tc[j] = s.charAt(8 + j);\n\t\t\t\t\t}\n\t\t\t\t\tstr.insert(id, c);\n\t\t\t\t\tid += len;\n\t\t\t\t}\n\t\t\t\tif (s.equals(\"delete char\")) {\n\t\t\t\t\tif (id < str.length()) {\n\t\t\t\t\t\tstr.deleteCharAt(id);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (s.equals(\"delete word\")) {\n\t\t\t\t\tboolean f = false;\n\t\t\t\t\tint idid = id;\n\t\t\t\t\twhile (idid < str.length() && str.charAt(idid) == ' ') {\n\t\t\t\t\t\tidid++;\n\t\t\t\t\t}\n\t\t\t\t\tif (idid < str.length() && str.charAt(idid) != ' ') {\n\t\t\t\t\t\tf = true;\n\t\t\t\t\t}\n\t\t\t\t\tif (f) {\n\t\t\t\t\t\twhile (id < str.length() && str.charAt(id) == ' ') {\n\t\t\t\t\t\t\tstr.deleteCharAt(id);\n\t\t\t\t\t\t}\n\t\t\t\t\t\twhile (id < str.length() && str.charAt(id) != ' ') {\n\t\t\t\t\t\t\tstr.deleteCharAt(id);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//---------------------------------------------------\n\t\t\t\t//\t\t\t\tchar[] c = str.toString().toCharArray();\n\t\t\t\t//\t\t\t\tint m = c.length;\n\t\t\t\t//\t\t\t\tboolean f = false;\n\t\t\t\t//\t\t\t\t//\t\t\t\tSystem.out.print(i + \": \");\n\t\t\t\t//\t\t\t\tfor (int j = 0; j < m; j++) {\n\t\t\t\t//\t\t\t\t\tif (j == id) {\n\t\t\t\t//\t\t\t\t\t\tSystem.out.print(\"^\");\n\t\t\t\t//\t\t\t\t\t\tf = true;\n\t\t\t\t//\t\t\t\t\t}\n\t\t\t\t//\t\t\t\t\tSystem.out.print(c[j]);\n\t\t\t\t//\t\t\t\t}\n\t\t\t\t//\t\t\t\tif (!f) {\n\t\t\t\t//\t\t\t\t\tSystem.out.print(\"^\");\n\t\t\t\t//\t\t\t\t}\n\t\t\t\t//\t\t\t\tSystem.out.println();\n\t\t\t\t//---------------------------------------------------\n\t\t\t}\n\t\t\tchar[] c = str.toString().toCharArray();\n\t\t\tn = c.length;\n\t\t\tboolean f = false;\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tif (i == id) {\n\t\t\t\t\tSystem.out.print(\"^\");\n\t\t\t\t\tf = true;\n\t\t\t\t}\n\t\t\t\tSystem.out.print(c[i]);\n\t\t\t}\n\t\t\tif (!f) {\n\t\t\t\tSystem.out.print(\"^\");\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tnew Main().run();\n\t}\n\n\tpublic void mapDebug(int[][] a) {\n\t\tSystem.out.println(\"--------map display---------\");\n\t\tfor (int i = 0; i < a.length; i++) {\n\t\t\tfor (int j = 0; j < a[i].length; j++) {\n\t\t\t\tSystem.out.printf(\"%3d \", a[i][j]);\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t\tSystem.out.println(\"----------------------------\" + '\\n');\n\t}\n\n\tclass MyScanner {\n\t\tint read() {\n\t\t\ttry {\n\t\t\t\treturn System.in.read();\n\t\t\t} catch (IOException e) {\n\t\t\t\tthrow new InputMismatchException();\n\t\t\t}\n\t\t}\n\n\t\tboolean isSpaceChar(int c) {\n\t\t\treturn c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\n\t\t}\n\n\t\tboolean isEndline(int c) {\n\t\t\treturn c == '\\n' || c == '\\r' || c == -1;\n\t\t}\n\n\t\tint nextInt() {\n\t\t\treturn Integer.parseInt(next());\n\t\t}\n\n\t\tint[] nextIntArray(int n) {\n\t\t\tint[] array = new int[n];\n\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t\tarray[i] = nextInt();\n\t\t\treturn array;\n\t\t}\n\n\t\tlong nextLong() {\n\t\t\treturn Long.parseLong(next());\n\t\t}\n\n\t\tlong[] nextLongArray(int n) {\n\t\t\tlong[] array = new long[n];\n\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t\tarray[i] = nextLong();\n\t\t\treturn array;\n\t\t}\n\n\t\tdouble nextDouble() {\n\t\t\treturn Double.parseDouble(next());\n\t\t}\n\n\t\tdouble[] nextDoubleArray(int n) {\n\t\t\tdouble[] array = new double[n];\n\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t\tarray[i] = nextDouble();\n\t\t\treturn array;\n\t\t}\n\n\t\tString next() {\n\t\t\tint c = read();\n\t\t\twhile (isSpaceChar(c))\n\t\t\t\tc = read();\n\t\t\tStringBuilder res = new StringBuilder();\n\t\t\tdo {\n\t\t\t\tres.appendCodePoint(c);\n\t\t\t\tc = read();\n\t\t\t} while (!isSpaceChar(c));\n\t\t\treturn res.toString();\n\t\t}\n\n\t\tString[] nextStringArray(int n) {\n\t\t\tString[] array = new String[n];\n\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t\tarray[i] = next();\n\n\t\t\treturn array;\n\t\t}\n\n\t\tString nextLine() {\n\t\t\tint c = read();\n\t\t\twhile (isEndline(c))\n\t\t\t\tc = read();\n\t\t\tStringBuilder res = new StringBuilder();\n\t\t\tdo {\n\t\t\t\tres.appendCodePoint(c);\n\t\t\t\tc = read();\n\t\t\t} while (!isEndline(c));\n\t\t\treturn res.toString();\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Deque;\nimport java.util.HashMap;\nimport java.util.InputMismatchException;\nimport java.util.Map;\nimport java.util.PriorityQueue;\nimport java.util.StringTokenizer;\nimport java.math.BigInteger;\nimport java.math.BigDecimal;\n      \npublic class Main{\n  \nstatic final InputStream in=System.in;\nstatic final PrintWriter out=new PrintWriter(System.out);\nstatic final int INF=Integer.MAX_VALUE/2;\nstatic final long LINF=Long.MAX_VALUE/2;\nstatic int MAX=10000;\nstatic char[] str=new char[MAX+1];\n  \npublic static void main(String[] args) throws IOException{\n  BufferedReader br=new BufferedReader(new InputStreamReader(in));\n  int n=Integer.parseInt(br.readLine());\n  while(n-->0){\n    String line=br.readLine();\n    int cur=0;\n    Arrays.fill(str,'-');\n    for(int i=0;i<line.length();i++) str[i]=line.charAt(i);\n    int m=Integer.parseInt(br.readLine());\n    while(m-->0){\n      StringTokenizer st=new StringTokenizer(br.readLine());\n      String com0=st.nextToken();\n      String com1=st.nextToken();\n      if(\"forward\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(str[cur]!='-') cur++;\n        }\n        else{\n          while(str[cur]==' ') cur++;\n          while(str[cur]!=' '&&str[cur]!='-') cur++;\n        }\n      }\n      else if(\"backward\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(cur>0) cur--;\n        }\n        else{\n          while(cur>0&&str[cur-1]==' ') cur--;\n          while(cur>0&&str[cur-1]!=' ') cur--;\n        }\n      }\n      else if(\"insert\".equals(com0)){\n        if(com1.length()>2){\n          String insertionStr=com1.substring(1,com1.length()-1);\n          for(int i=MAX-insertionStr.length();i>=cur;i--){\n            if(str[i]!='-') str[i+insertionStr.length()]=str[i];\n          }\n          for(int i=0;i<insertionStr.length();i++){\n            str[cur+i]=insertionStr.charAt(i);\n          }\n          cur+=insertionStr.length();\n        }\n      }\n      else if(\"delete\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(str[cur]!='-'){\n            for(int i=cur;;i++){\n              if(str[i]=='-') break;\n              str[i]=str[i+1];\n            }\n          }\n        }\n        else{\n          int cnt=cur;\n          while(str[cnt]==' ') cnt++;\n          if(str[cnt]!='-'){\n            while(str[cnt]!=' '&&str[cnt]!='-') cnt++;\n            for(int i=cur;;i++){\n              if(str[i]=='-') break;\n              str[i]=str[i-cur+cnt];\n            }\n          }\n        }\n      }\n    }\n    StringBuilder sb=new StringBuilder();\n    for(int i=0;;i++){\n      if(i==cur) sb.append(\"^\");\n      if(str[i]=='-') break;\n      sb.append(String.valueOf(str[i]));\n    }\n    out.println(sb);\n    out.flush();\n  }\n}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Deque;\nimport java.util.HashMap;\nimport java.util.InputMismatchException;\nimport java.util.Map;\nimport java.util.PriorityQueue;\nimport java.util.StringTokenizer;\nimport java.math.BigInteger;\nimport java.math.BigDecimal;\n       \npublic class Main{\n   \nstatic final InputStream in=System.in;\nstatic final PrintWriter out=new PrintWriter(System.out);\nstatic final int INF=Integer.MAX_VALUE/2;\nstatic final long LINF=Long.MAX_VALUE/2;\nstatic int MAX=1500;\nstatic char[] str=new char[MAX+1];\n   \npublic static void main(String[] args) throws IOException{\n  BufferedReader br=new BufferedReader(new InputStreamReader(in));\n  out.println(\"??????\");\n  int n=Integer.parseInt(br.readLine());\n  while(n-->0){\n    String line=br.readLine();\n    int cur=0;\n    Arrays.fill(str,'-');\n    for(int i=0;i<line.length();i++) str[i]=line.charAt(i);\n    int m=Integer.parseInt(br.readLine());\n    while(m-->0){\n      StringTokenizer st=new StringTokenizer(br.readLine());\n      String com0=st.nextToken();\n      String com1=st.nextToken();\n      if(\"forward\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(str[cur]!='-') cur++;\n        }\n        else if(\"word\".equals(com1)){\n          while(str[cur]==' ') cur++;\n          while(str[cur]!=' '&&str[cur]!='-') cur++;\n        }\n      }\n      else if(\"backward\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(cur>0) cur--;\n        }\n        else if(\"word\".equals(com1)){\n          while(cur>0&&str[cur-1]==' ') cur--;\n          while(cur>0&&str[cur-1]!=' ') cur--;\n        }\n      }\n      else if(\"insert\".equals(com0)){\n        if(com1.length()>2){\n          String insertionStr=com1.substring(1,com1.length()-1);\n          for(int i=MAX-insertionStr.length();i>=cur;i--){\n            if(str[i]!='-') str[i+insertionStr.length()]=str[i];\n          }\n          for(int i=0;i<insertionStr.length();i++){\n            str[cur+i]=insertionStr.charAt(i);\n          }\n          cur+=insertionStr.length();\n        }\n      }\n      else if(\"delete\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(str[cur]!='-'){\n            for(int i=cur;;i++){\n              if(str[i]=='-') break;\n              str[i]=str[i+1];\n            }\n          }\n        }\n        else if(\"word\".equals(com1)){\n          int cnt=cur;\n          while(str[cnt]==' ') cnt++;\n          if(str[cnt]!='-'){\n            while(str[cnt]!=' '&&str[cnt]!='-') cnt++;\n            for(int i=cur;;i++){\n              if(str[i]=='-') break;\n              str[i]=str[i-cur+cnt];\n            }\n          }\n        }\n      }\n    }\n    StringBuilder sb=new StringBuilder();\n    for(int i=0;;i++){\n      if(i==cur) sb.append(\"^\");\n      if(str[i]=='-') break;\n      sb.append(String.valueOf(str[i]));\n    }\n    out.println(sb);\n    out.flush();\n  }\n}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Deque;\nimport java.util.HashMap;\nimport java.util.InputMismatchException;\nimport java.util.Map;\nimport java.util.PriorityQueue;\nimport java.math.BigInteger;\nimport java.math.BigDecimal;\n??????????????\npublic class Main{\n??????\nstatic final InputStream in=System.in;\nstatic final PrintWriter out=new PrintWriter(System.out);\nstatic final int INF=Integer.MAX_VALUE/2;\nstatic final long LINF=Long.MAX_VALUE/2;\nstatic int MAX=100000;\nstatic char[] str=new char[MAX+1];\n??????\npublic static void main(String[] args) throws IOException{\n????BufferedReader br=new BufferedReader(new InputStreamReader(in));\n????int n=Integer.parseInt(br.readLine());\n????while(n-->0){\n????????String line=br.readLine();\n????????int cur=0;\n????????for(int i=0;i<=MAX;i++) str[i]='-';\n????????for(int i=0;i<line.length();i++) str[i]=line.charAt(i);\n????????int m=Integer.parseInt(br.readLine());\n????????while(m-->0){\n????????????String[] com=br.readLine().split(\" \");\n????????????String com0=com[0];\n????????????String com1=com[1];\n????????????if(\"forward\".equals(com0)){\n????????????????if(\"char\".equals(com1)&&str[cur]!='-') cur++;\n????????????????else{\n????????????????????while(str[cur]==' ') cur++;\n????????????????????while(str[cur]!=' '&&str[cur]!='-') cur++;\n????????????????}\n????????????}\n????????????else if(\"backward\".equals(com0)){\n????????????????if(\"char\".equals(com1)&&cur!=0) cur--;\n????????????????else{\n????????????????????while(cur>0&&str[cur-1]==' ') cur--;\n????????????????????while(cur>0&&str[cur-1]!=' ') cur--;\n????????????????}\n????????????}\n????????????else if(\"insert\".equals(com0)){\n????????????????if(com1.length()>2){\n????????????????????String insertionStr=com[1].substring(1,com1.length()-1);\n????????????????????for(int i=MAX-insertionStr.length();i>=cur;i--){\n????????????????????????if(str[i]!='-') str[i+insertionStr.length()]=str[i];\n????????????????????}\n????????????????????for(int i=0;i<insertionStr.length();i++){\n????????????????????????str[cur+i]=insertionStr.charAt(i);\n????????????????????}\n????????????????????cur+=insertionStr.length();\n????????????????}\n????????????}\n????????????else{\n????????????????if(\"char\".equals(com1)&&str[cur]!='-'){\n????????????????????for(int i=cur;i<=MAX;i++){\n????????????????????????if(str[i]=='-') break;\n????????????????????????str[i]=str[i+1];\n????????????????????}\n????????????????}\n????????????????else{\n????????????????????int cnt=cur;\n????????????????????boolean flag=false;\n????????????????????while(str[cnt]==' ') cnt++;\n????????????????????while(str[cnt]!=' '&&str[cnt]!='-'){\n????????????????????????cnt++;\n????????????????????????flag=true;\n????????????????????}\n????????????????????if(flag){\n????????????????????????for(int i=cnt;i<=MAX;i++){\n????????????????????????if(str[i-cnt+cur]=='-') break;\n????????????????????????????str[i-cnt+cur]=str[i];\n????????????????????????}\n????????????????????}\n????????????????}\n????????????}\n????????}\n????????for(int i=0;;i++){\n????????????if(i==cur) out.print(\"^\");\n????????????if(str[i]=='-') break;\n????????????out.print(str[i]);\n????????}\n????????out.println();\n????}\nout.flush();\n}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.InputStream;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.InputMismatchException;\nimport java.util.NoSuchElementException;\nimport java.math.BigInteger;\n   \npublic class Main{\n   \nstatic PrintWriter out;\nstatic InputReader ir;\n   \nstatic void solve(){\n int n=ir.nextInt();\n while(n-->0){\n   String s=ir.next();\n   int cur=0,MAX=1500;\n   char[] str=new char[MAX+1];\n   Arrays.fill(str,'-');\n   for(int i=0;i<s.length();i++) str[i]=s.charAt(i);\n   int m=ir.nextInt();\n   while(m-->0){\n     String com0=ir.next(),com1=ir.next();\n     if(\"forward\".equals(com0)){\n       if(\"char\".equals(com1)){\n         if(str[cur]!='-') cur++;\n       }\n       else if(\"word\".equals(com1)){\n         while(str[cur]==' ') cur++;\n         while(str[cur]!=' '&&str[cur]!='-') cur++;\n       }\n     }\n     else if(\"backward\".equals(com0)){\n       if(\"char\".equals(com1)){\n         if(cur>0) cur--;\n       }\n       else if(\"word\".equals(com1)){\n         while(cur>0&&str[cur-1]==' ') cur--;\n         while(cur>0&&str[cur-1]!=' ') cur--;\n       }\n     }\n     else if(\"insert\".equals(com0)){\n       if(com1.length()>2){\n         String insertionStr=com1.substring(1,com1.length()-1);\n         for(int i=MAX-insertionStr.length();i>=cur;i--){\n           if(str[i]!='-') str[i+insertionStr.length()]=str[i];\n         }\n         for(int i=0;i<insertionStr.length();i++){\n           str[cur+i]=insertionStr.charAt(i);\n         }\n         cur+=insertionStr.length();\n       }\n     }\n     else if(\"delete\".equals(com0)){\n       if(\"char\".equals(com1)){\n         if(str[cur]!='-'){\n           for(int i=cur;;i++){\n             if(str[i]=='-') break;\n             str[i]=str[i+1];\n           }\n         }\n       }\n       else if(\"word\".equals(com1)){\n         int cnt=cur;\n         while(str[cnt]==' ') cnt++;\n         if(str[cnt]!='-'){\n           while(str[cnt]!=' '&&str[cnt]!='-') cnt++;\n           for(int i=cur;;i++){\n             if(str[i]=='-') break;\n             str[i]=str[i-cur+cnt];\n           }\n         }\n       }\n     }\n   }\n   StringBuilder sb=new StringBuilder();\n   for(int i=0;;i++){\n     if(i==cur) sb.append(\"^\");\n     if(str[i]=='-') break;\n     sb.append(String.valueOf(str[i]));\n   }\n   out.println(sb);\n  }\n}\n   \npublic static void main(String[] args) throws Exception{\n ir=new InputReader(System.in);\n out=new PrintWriter(System.out);\n solve();\n out.flush();\n}\n   \nstatic class InputReader {\n private InputStream in;\n private byte[] buffer=new byte[1024];\n private int curbuf;\n private int lenbuf;\n   \n public InputReader(InputStream in) {this.in=in; this.curbuf=this.lenbuf=0;}\n    \n public boolean hasNextByte() {\n  if(curbuf>=lenbuf){\n   curbuf= 0;\n   try{\n    lenbuf=in.read(buffer);\n   }catch(IOException e) {\n    throw new InputMismatchException();\n   }\n   if(lenbuf<=0) return false;\n  }\n  return true;\n }\n   \n private int readByte(){if(hasNextByte()) return buffer[curbuf++]; else return -1;}\n    \n private boolean isSpaceChar(int c){return !(c>=33&&c<=126);}\n    \n private void skip(){while(hasNextByte()&&isSpaceChar(buffer[curbuf])) curbuf++;}\n    \n public boolean hasNext(){skip(); return hasNextByte();}\n    \n public String next(){\n  if(!hasNext()) throw new NoSuchElementException();\n  StringBuilder sb=new StringBuilder();\n  int b=readByte();\n  while(!isSpaceChar(b)){\n   sb.appendCodePoint(b);\n   b=readByte();\n  }\n  return sb.toString();\n }\n    \n public int nextInt() {\n  if(!hasNext()) throw new NoSuchElementException();\n  int c=readByte();\n  while (isSpaceChar(c)) c=readByte();\n  boolean minus=false;\n  if (c=='-') {\n   minus=true;\n   c=readByte();\n  }\n  int res=0;\n  do{\n   if(c<'0'||c>'9') throw new InputMismatchException();\n   res=res*10+c-'0';\n   c=readByte();\n  }while(!isSpaceChar(c));\n  return (minus)?-res:res;\n }\n    \n public long nextLong() {\n  if(!hasNext()) throw new NoSuchElementException();\n  int c=readByte();\n  while (isSpaceChar(c)) c=readByte();\n  boolean minus=false;\n  if (c=='-') {\n   minus=true;\n   c=readByte();\n  }\n  long res = 0;\n  do{\n   if(c<'0'||c>'9') throw new InputMismatchException();\n   res=res*10+c-'0';\n   c=readByte();\n  }while(!isSpaceChar(c));\n  return (minus)?-res:res;\n }\n   \n public double nextDouble(){return Double.parseDouble(next());}\n   \n public BigInteger nextBigInteger(){return new BigInteger(next());}\n   \n public int[] nextIntArray(int n){\n  int[] a=new int[n];\n  for(int i=0;i<n;i++) a[i]=nextInt();\n  return a;\n }\n   \n public long[] nextLongArray(int n){\n  long[] a=new long[n];\n  for(int i=0;i<n;i++) a[i]=nextLong();\n  return a;\n }\n   \n public char[][] nextCharMap(int n,int m){\n  char[][] map=new char[n][m];\n  for(int i=0;i<n;i++) map[i]=next().toCharArray();\n  return map;\n }\n}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\nclass Main{\n    void run(){\n\tScanner sc=new Scanner(System.in);\n\tint M=sc.nextInt();\n\tsc.nextLine();\n\tfor(int attend=0;attend<M;attend++){\n\t    StringBuffer text=new StringBuffer(sc.nextLine());\n\t    int cur=0;\n\t    int n=sc.nextInt();\n\t    String command1;\n\t    String command2;\n\t    sc.nextLine();\n\t    for(int i=0;i<n;i++){\n\t\tString command=sc.nextLine();\n\t\t//System.out.println(command);\n\t\tfor(int j=0;;j++){\n\t\t    if(command.charAt(j)==' '){\n\t\t\tcommand1=command.substring(0,j);\n\t\t\tcommand2=command.substring(j+1);\n\t\t\tbreak;\n\t\t    }\n\t\t}\n\t\tif(\"forward\".equals(command1)){\n\t\t    if(\"char\".equals(command2)){\n\t\t\tcur=cur<text.length()? cur+1:cur;    \n\t\t    }\n\t\t    else{\n\t\t\tfor(;cur<text.length()&&text.charAt(cur)==' ';cur++);\n\t\t\tfor(;cur<text.length()&&text.charAt(cur)!=' ';cur++);\n\t\t    }\n\t\t}\n\t\tif(\"backward\".equals(command1)){\n\t\t    if(\"char\".equals(command2)){\n\t\t\tcur=cur>0? cur-1:cur;    \n\t\t    }\n\t\t    else{\n\t\t\tfor(;cur>0&&text.charAt(cur-1)==' ';cur--);\n\t\t\tfor(;cur>0&&text.charAt(cur-1)!=' ';cur--);\n\t\t    }  \n\t\t}\n\t\tif(\"insert\".equals(command1)){\n\t\t    text.insert(cur,command2.substring(1,command2.length()-1));\n\t\t    cur+=command2.length()-2;\n\t\t}\t\t       \n\t\tif(\"delete\".equals(command1)){\n\t\t    if(\"char\".equals(command2)){\n\t\t\tif(cur!=text.length()){\n\t\t\t    text.deleteCharAt(cur);\n\t\t\t}\n\t\t    }\n\t\t    else{\n\t\t\tint temp=cur;\n\t\t\tfor(;cur<text.length()&&text.charAt(cur)==' ';cur++);\n\t\t\tif(cur!=text.length()){\n\t\t\t    for(;cur<text.length()&&text.charAt(cur)!=' ';cur++);\n\t\t\t    text.delete(temp,cur);\n\t\t\t}\n\t\t\tcur=temp;\n\t\t    }\n\t\t}\n\t\t//print(text,cur);\n\t    }\n\t    print(text,cur);\n\t}\n\t\n    }\n    void print(StringBuffer text,int cur){\n\t    text.insert(cur,\"^\");\n\t    System.out.println(text);\n\t    text.deleteCharAt(cur);\n    }\n    public static void main(String[] args){\n\tnew Main().run();\n    }\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Deque;\nimport java.util.HashMap;\nimport java.util.InputMismatchException;\nimport java.util.Map;\nimport java.util.PriorityQueue;\nimport java.math.BigInteger;\nimport java.math.BigDecimal;\n       \npublic class Main{\n   \nstatic final InputStream in=System.in;\nstatic final PrintWriter out=new PrintWriter(System.out);\nstatic final int INF=Integer.MAX_VALUE/2;\nstatic final long LINF=Long.MAX_VALUE/2;\nstatic int MAX=1000;\nstatic char[] str=new char[MAX+1];\n   \npublic static void main(String[] args) throws IOException{\n  BufferedReader br=new BufferedReader(new InputStreamReader(in));\n  int n=Integer.parseInt(br.readLine());\n  while(n-->0){\n    String line=br.readLine();\n    int cur=0;\n    Arrays.fill(str,'-');\n    for(int i=0;i<line.length();i++) str[i]=line.charAt(i);\n    int m=Integer.parseInt(br.readLine());\n    while(m-->0){\n      String com=br.readLine();\n      if(com.indexOf(\" \")<0) continue;\n      String com0=com.substring(0,com.indexOf(\" \"));\n      String com1=com.substring(com.indexOf(\" \")+1);\n      if(\"forward\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(str[cur]!='-') cur++;\n        }\n        else if(\"word\".equals(com1)){\n          while(str[cur]==' ') cur++;\n          while(str[cur]!=' '&&str[cur]!='-') cur++;\n        }\n      }\n      else if(\"backward\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(cur>0) cur--;\n        }\n        else if(\"word\".equals(com1)){\n          while(cur>0&&str[cur-1]==' ') cur--;\n          while(cur>0&&str[cur-1]!=' ') cur--;\n        }\n      }\n      else if(\"insert\".equals(com0)){\n        if(com1.length()>2){\n          String insertionStr=com1.substring(1,com1.length()-1);\n          for(int i=MAX-insertionStr.length();i>=cur;i--){\n            if(str[i]!='-') str[i+insertionStr.length()]=str[i];\n          }\n          for(int i=0;i<insertionStr.length();i++){\n            str[cur+i]=insertionStr.charAt(i);\n          }\n          cur+=insertionStr.length();\n        }\n      }\n      else if(\"delete\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(str[cur]!='-'){\n            for(int i=cur;;i++){\n              if(str[i]=='-') break;\n              str[i]=str[i+1];\n            }\n          }\n        }\n        else if(\"word\".equals(com1)){\n          int cnt=cur;\n          while(str[cnt]==' ') cnt++;\n          if(str[cnt]!='-'){\n            while(str[cnt]!=' '&&str[cnt]!='-') cnt++;\n            for(int i=cur;;i++){\n              if(str[i]=='-') break;\n              str[i]=str[i-cur+cnt];\n            }\n          }\n        }\n      }\n    }\n    StringBuilder sb=new StringBuilder();\n    for(int i=0;;i++){\n      if(i==cur) sb.append(\"^\");\n      if(str[i]=='-') break;\n      sb.append(String.valueOf(str[i]));\n    }\n    out.println(sb);\n  }\nout.flush();\n}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Deque;\nimport java.util.HashMap;\nimport java.util.InputMismatchException;\nimport java.util.Map;\nimport java.util.PriorityQueue;\nimport java.math.BigInteger;\nimport java.math.BigDecimal;\n       \npublic class Main{\n   \nstatic final InputStream in=System.in;\nstatic final PrintWriter out=new PrintWriter(System.out);\nstatic final int INF=Integer.MAX_VALUE/2;\nstatic final long LINF=Long.MAX_VALUE/2;\nstatic int MAX=1100;\nstatic char[] str=new char[MAX+1];\n   \npublic static void main(String[] args) throws IOException{\n  BufferedReader br=new BufferedReader(new InputStreamReader(in));\n  int n=Integer.parseInt(br.readLine());\n  while(n-->0){\n    String line=br.readLine();\n    int cur=0;\n    Arrays.fill(str,'-');\n    for(int i=0;i<line.length();i++) str[i]=line.charAt(i);\n    int m=Integer.parseInt(br.readLine());\n    while(m-->0){\n      String com=br.readLine();\n      String com0=com.substring(0,com.indexOf(\" \"));\n      String com1=com.substring(com.indexOf(\" \")+1);\n      if(\"forward\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(str[cur]!='-') cur++;\n        }\n        else if(\"word\".equals(com1)){\n          while(str[cur]==' ') cur++;\n          while(str[cur]!=' '&&str[cur]!='-') cur++;\n        }\n      }\n      else if(\"backward\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(cur>0) cur--;\n        }\n        else if(\"word\".equals(com1)){\n          while(cur>0&&str[cur-1]==' ') cur--;\n          while(cur>0&&str[cur-1]!=' ') cur--;\n        }\n      }\n      else if(\"insert\".equals(com0)){\n        if(com1.length()>2){\n          String insertionStr=com1.substring(1,com1.length()-1);\n          for(int i=MAX-insertionStr.length();i>=cur;i--){\n            if(str[i]!='-') str[i+insertionStr.length()]=str[i];\n          }\n          for(int i=0;i<insertionStr.length();i++){\n            str[cur+i]=insertionStr.charAt(i);\n          }\n          cur+=insertionStr.length();\n        }\n      }\n      else if(\"delete\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(str[cur]!='-'){\n            for(int i=cur;;i++){\n              if(str[i]=='-') break;\n              str[i]=str[i+1];\n            }\n          }\n        }\n        else if(\"word\".equals(com1)){\n          int cnt=cur;\n          while(str[cnt]==' ') cnt++;\n          if(str[cnt]!='-'){\n            while(str[cnt]!=' '&&str[cnt]!='-') cnt++;\n            for(int i=cur;;i++){\n              if(str[i]=='-') break;\n              str[i]=str[i-cur+cnt];\n            }\n          }\n        }\n      }\n    }\n    StringBuilder sb=new StringBuilder();\n    for(int i=0;;i++){\n      if(i==cur) sb.append(\"^\");\n      if(str[i]=='-') break;\n      sb.append(String.valueOf(str[i]));\n    }\n    out.println(sb);\n  }\nout.flush();\n}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.IOException;\nimport java.util.InputMismatchException;\nimport java.util.Scanner;\n\npublic class Main {\n\tvoid run() {\n\t\tScanner sc = new Scanner(System.in);\n\n\t\tint tc = sc.nextInt();\n\t\tsc.nextLine();\n\t\tfor (int T = 0; T < tc; T++) {\n\t\t\tStringBuilder str = new StringBuilder(sc.nextLine());\n\t\t\tint n = sc.nextInt();\n\t\t\tsc.nextLine();\n\t\t\tint id = 0;\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tString s = sc.nextLine();\n\n\t\t\t\tif (s.equals(\"forward char\")) {\n\t\t\t\t\tid = Math.min(id + 1, str.length());\n\t\t\t\t}\n\t\t\t\tif (s.equals(\"backward char\")) {\n\t\t\t\t\tid = Math.max(id - 1, 0);\n\t\t\t\t}\n\t\t\t\tif (s.equals(\"forward word\")) {\n\t\t\t\t\twhile (id < str.length() && str.charAt(id) == ' ') {\n\t\t\t\t\t\tid++;\n\t\t\t\t\t}\n\t\t\t\t\twhile (id < str.length() && str.charAt(id) != ' ') {\n\t\t\t\t\t\tid++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (s.equals(\"backward word\")) {\n\t\t\t\t\twhile (0 < id && str.charAt(id - 1) == ' ') {\n\t\t\t\t\t\tid--;\n\t\t\t\t\t}\n\t\t\t\t\twhile (0 < id && str.charAt(id - 1) != ' ') {\n\t\t\t\t\t\tid--;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (s.charAt(0) == 'i') {\n\t\t\t\t\tint len = s.length() - 9;\n\t\t\t\t\tchar[] c = new char[len];\n\t\t\t\t\tfor (int j = 0; j < len; j++) {\n\t\t\t\t\t\tc[j] = s.charAt(8 + j);\n\t\t\t\t\t}\n\t\t\t\t\tstr.insert(id, c);\n\t\t\t\t\tid += len;\n\t\t\t\t}\n\t\t\t\tif (s.equals(\"delete char\")) {\n\t\t\t\t\tif (id < str.length()) {\n\t\t\t\t\t\tstr.deleteCharAt(id);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (s.equals(\"delete word\")) {\n\t\t\t\t\twhile (id < str.length() && str.charAt(id) == ' ') {\n\t\t\t\t\t\tstr.deleteCharAt(id);\n\t\t\t\t\t}\n\t\t\t\t\twhile (id < str.length() && str.charAt(id) != ' ') {\n\t\t\t\t\t\tstr.deleteCharAt(id);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//---------------------------------------------------\n\t\t\t\t//\t\t\t\tchar[] c = str.toString().toCharArray();\n\t\t\t\t//\t\t\t\tint m = c.length;\n\t\t\t\t//\t\t\t\tboolean f = false;\n\t\t\t\t//\t\t\t\tSystem.out.print(i + \": \");\n\t\t\t\t//\t\t\t\tfor (int j = 0; j < m; j++) {\n\t\t\t\t//\t\t\t\t\tif (j == id) {\n\t\t\t\t//\t\t\t\t\t\tSystem.out.print(\"^\");\n\t\t\t\t//\t\t\t\t\t\tf = true;\n\t\t\t\t//\t\t\t\t\t}\n\t\t\t\t//\t\t\t\t\tSystem.out.print(c[j]);\n\t\t\t\t//\t\t\t\t}\n\t\t\t\t//\t\t\t\tif (!f) {\n\t\t\t\t//\t\t\t\t\tSystem.out.print(\"^\");\n\t\t\t\t//\t\t\t\t}\n\t\t\t\t//\t\t\t\tSystem.out.println();\n\t\t\t\t//---------------------------------------------------\n\t\t\t}\n\t\t\tchar[] c = str.toString().toCharArray();\n\t\t\tn = c.length;\n\t\t\tboolean f = false;\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tif (i == id) {\n\t\t\t\t\tSystem.out.print(\"^\");\n\t\t\t\t\tf = true;\n\t\t\t\t}\n\t\t\t\tSystem.out.print(c[i]);\n\t\t\t}\n\t\t\tif (!f) {\n\t\t\t\tSystem.out.print(\"^\");\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tnew Main().run();\n\t}\n\n\tpublic void mapDebug(int[][] a) {\n\t\tSystem.out.println(\"--------map display---------\");\n\t\tfor (int i = 0; i < a.length; i++) {\n\t\t\tfor (int j = 0; j < a[i].length; j++) {\n\t\t\t\tSystem.out.printf(\"%3d \", a[i][j]);\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t\tSystem.out.println(\"----------------------------\" + '\\n');\n\t}\n\n\tclass MyScanner {\n\t\tint read() {\n\t\t\ttry {\n\t\t\t\treturn System.in.read();\n\t\t\t} catch (IOException e) {\n\t\t\t\tthrow new InputMismatchException();\n\t\t\t}\n\t\t}\n\n\t\tboolean isSpaceChar(int c) {\n\t\t\treturn c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\n\t\t}\n\n\t\tboolean isEndline(int c) {\n\t\t\treturn c == '\\n' || c == '\\r' || c == -1;\n\t\t}\n\n\t\tint nextInt() {\n\t\t\treturn Integer.parseInt(next());\n\t\t}\n\n\t\tint[] nextIntArray(int n) {\n\t\t\tint[] array = new int[n];\n\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t\tarray[i] = nextInt();\n\t\t\treturn array;\n\t\t}\n\n\t\tlong nextLong() {\n\t\t\treturn Long.parseLong(next());\n\t\t}\n\n\t\tlong[] nextLongArray(int n) {\n\t\t\tlong[] array = new long[n];\n\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t\tarray[i] = nextLong();\n\t\t\treturn array;\n\t\t}\n\n\t\tdouble nextDouble() {\n\t\t\treturn Double.parseDouble(next());\n\t\t}\n\n\t\tdouble[] nextDoubleArray(int n) {\n\t\t\tdouble[] array = new double[n];\n\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t\tarray[i] = nextDouble();\n\t\t\treturn array;\n\t\t}\n\n\t\tString next() {\n\t\t\tint c = read();\n\t\t\twhile (isSpaceChar(c))\n\t\t\t\tc = read();\n\t\t\tStringBuilder res = new StringBuilder();\n\t\t\tdo {\n\t\t\t\tres.appendCodePoint(c);\n\t\t\t\tc = read();\n\t\t\t} while (!isSpaceChar(c));\n\t\t\treturn res.toString();\n\t\t}\n\n\t\tString[] nextStringArray(int n) {\n\t\t\tString[] array = new String[n];\n\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t\tarray[i] = next();\n\n\t\t\treturn array;\n\t\t}\n\n\t\tString nextLine() {\n\t\t\tint c = read();\n\t\t\twhile (isEndline(c))\n\t\t\t\tc = read();\n\t\t\tStringBuilder res = new StringBuilder();\n\t\t\tdo {\n\t\t\t\tres.appendCodePoint(c);\n\t\t\t\tc = read();\n\t\t\t} while (!isEndline(c));\n\t\t\treturn res.toString();\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\nimport static java.lang.Math.*;\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tfor(int t=Integer.parseInt(sc.nextLine());t>0;t--) {\n\t\t\tStringBuilder sb = new StringBuilder(sc.nextLine());\n\t\t\tint n = sc.nextInt(), p = 0; sc.nextLine();\n\t\t\tfor(;n>0;n--){\n\t\t\t\tString sp = sc.nextLine();\n\t\t\t\tint c1 = sp.charAt(0), c2 = sp.split(\" \")[1].charAt(0);\n\t\t\t\tint c=0;\n\t\t\t\tif(c1=='b') c=-1; else if(c1=='f') c=1; else c=0;\n\t\t\t\tif(c2=='c') { p=min(sb.length(),max(0,p+c)); if(c==0&&sb.length()>p&&p>=0) sb.deleteCharAt(p); }\n\t\t\t\telse if(c2=='w')for(p=min(sb.length(), max(-1, p+c));0<=p&&p<sb.length();p=p+c) if(sb.charAt(p)==' ') break; else if(c==0)sb.deleteCharAt(p);\n\t\t\t\tif(c1=='i') { p=min(sb.length(), max(-1, p+c)); sb.insert(p, sp.substring(8, sp.length()-1)); p+=sp.length()-9;}\n\t\t\t}\n\t\t\tp=min(sb.length(),max(0,p));\n\t\t\tSystem.out.println(sb.substring(0, p) + \"^\" + sb.substring(p));\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.LinkedList;\nimport java.util.ListIterator;\nimport java.util.Scanner;\n\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\t\n\t\tfinal int N = Integer.parseInt(sc.nextLine());\n\t\t\n\t\tfor(int i = 0; i < N; i++){\n\t\t\t\n\t\t\tArrayList<Character> list = new ArrayList<Character>();\n\t\t\tfor(final char in : sc.nextLine().toCharArray()){\n\t\t\t\tlist.add(in);\n\t\t\t}\n\t\t\t\n\t\t\tfinal int M = Integer.parseInt(sc.nextLine());\n\t\t\t\n\t\t\tint pos = 0;\n\t\t\t\n\t\t\tfor(int j = 0; j < M; j++){\n\t\t\t\t/*\n\t\t\t\tfor(int k = 0; k < list.size(); k++){\n\t\t\t\t\tif(k == pos){\n\t\t\t\t\t\tSystem.out.print(\"^\");\n\t\t\t\t\t}\n\t\t\t\t\tSystem.out.print(list.get(k));\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(list.size() == pos){\n\t\t\t\t\tSystem.out.print(\"^\");\n\t\t\t\t}\n\t\t\t\tSystem.out.println();\n\t\t\t\t*/\n\t\t\t\tString str = sc.nextLine();\n\t\t\t\tString ops1 = str.substring(0, str.indexOf(\" \"));\n\t\t\t\tString ops2 = str.substring(str.indexOf(\" \") + 1, str.length());\n\t\t\t\t\n\t\t\t\t//System.out.println(ops1 + \" \" + ops2);\n\t\t\t\t\n\t\t\t\tif(\"forward\".equals(ops1)){\n\t\t\t\t\tif(\"char\".equals(ops2)){\n\t\t\t\t\t\tif(pos < list.size()){\n\t\t\t\t\t\t\tpos++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}else if(\"word\".equals(ops2)){\n\t\t\t\t\t\tboolean flag = false;\n\t\t\t\t\t\t\n\t\t\t\t\t\tfor(int k = pos; k < list.size(); k++){\n\t\t\t\t\t\t\tif(list.get(k) == ' '){\n\t\t\t\t\t\t\t\tpos = k;\n\t\t\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(!flag){\n\t\t\t\t\t\t\tpos = list.size();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}else if(\"backward\".equals(ops1)){\n\t\t\t\t\tif(\"char\".equals(ops2)){\n\t\t\t\t\t\tif(pos > 0){\n\t\t\t\t\t\t\tpos--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}else if(\"word\".equals(ops2)){\n\t\t\t\t\t\tboolean flag = false;\n\t\t\t\t\t\t\n\t\t\t\t\t\tfor(int k = pos - 1; k >= 0; k--){\n\t\t\t\t\t\t\tif(list.get(k) == ' '){\n\t\t\t\t\t\t\t\tpos = k + 1;\n\t\t\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(!flag){\n\t\t\t\t\t\t\tpos = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}else if(\"delete\".equals(ops1)){\n\t\t\t\t\tif(\"char\".equals(ops2)){\n\t\t\t\t\t\tif(pos < list.size()){\n\t\t\t\t\t\t\tlist.remove(pos);\n\t\t\t\t\t\t}\n\t\t\t\t\t}else if(\"word\".equals(ops2)){\n\t\t\t\t\t\tboolean flag = false;\n\t\t\t\t\t\tboolean found = false;\n\t\t\t\t\t\tint del = -1;\n\t\t\t\t\t\t\n\t\t\t\t\t\tfor(int k = pos; k < list.size(); k++){\n\t\t\t\t\t\t\tif(list.get(k) == ' '){\n\t\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\t\t\tdel = k - 1;\n\t\t\t\t\t\t\t}else if(found){\n\t\t\t\t\t\t\t\tdel = k - 1;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(flag){\n\t\t\t\t\t\t\tfor(int k = pos; k <= del; k++){\n\t\t\t\t\t\t\t\tlist.remove(pos);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}else if(\"insert\".equals(ops1)){\n\t\t\t\t\tchar[] input = ops2.replaceAll(\"\\\"\", \"\").toCharArray();\n\t\t\t\t\t\n\t\t\t\t\tfor(int k = input.length - 1; k >= 0; k--){\n\t\t\t\t\t\tlist.add(pos, input[k]);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tpos += input.length;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfor(int j = 0; j < list.size(); j++){\n\t\t\t\tif(j == pos){\n\t\t\t\t\tSystem.out.print(\"^\");\n\t\t\t\t}\n\t\t\t\tSystem.out.print(list.get(j));\n\t\t\t}\n\t\t\t\n\t\t\tif(list.size() == pos){\n\t\t\t\tSystem.out.print(\"^\");\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t\t\n\t}\n\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\nimport static java.lang.Math.*;\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tfor(int t=Integer.parseInt(sc.nextLine());t>0;t--) {\n\t\t\tStringBuilder sb = new StringBuilder(sc.nextLine());\n\t\t\tint n = sc.nextInt(), p = 0; sc.nextLine();\n\t\t\tfor(;n>0;n--){\n\t\t\t\tString sp = sc.nextLine();\n\t\t\t\tint c1 = sp.charAt(0), c2 = sp.split(\" \")[1].charAt(0);\n\t\t\t\tint c=0;\n\t\t\t\tif(c1=='b') c=-1; else if(c1=='f') c=1; else c=0;\n\t\t\t\tif(c2=='c') { p=min(sb.length(),max(0,p+c)); if(c==0&&sb.length()>p&&p>=0) sb.deleteCharAt(p); }\n\t\t\t\telse if(c2=='w')for(p=min(sb.length(), max(-1, p+c));0<=p&&p<sb.length();p=p+c) if(sb.charAt(p)==' ') break; else if(c==0)sb.deleteCharAt(p);\n\t\t\t\tif(c1=='i') { p=min(sb.length(), max(0, p+c)); sb.insert(p, sp.substring(8, sp.length()-1)); p+=sp.length()-9;}\n\t\t\t}\n\t\t\tp=min(sb.length(),max(0,p));\n\t\t\tSystem.out.println(sb.substring(0, p) + \"^\" + sb.substring(p));\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\nclass Main{\n    void run(){\n\tScanner sc=new Scanner(System.in);\n\tint M=sc.nextInt();\n\tsc.nextLine();\n\tfor(int attend=0;attend<M;attend++){\n\t    StringBuffer str=new StringBuffer(sc.nextLine());\n\t    int cur=0;\n\t    int n=sc.nextInt();\n\t    String command1;\n\t    String command2;\n\t    sc.nextLine();\n\t    for(int i=0;i<n;i++){\n\t\tString command=sc.nextLine();\n\t\t//System.out.println(command);\n\t\tint index0=0;\n\t\twhile(true){\n\t\t    if(command.charAt(index0)==' '){\n\t\t\tcommand1=command.substring(0,index0);\n\t\t\tcommand2=command.substring(index0+1);\n\t\t\t//System.out.println(command1);\n\t\t\t//System.out.println(command2);\n\t\t\tbreak;\n\t\t    }\n\t\t    index0++;\n\t\t}\n\t\tif(\"forward\".equals(command1)){\n\t\t    if(\"char\".equals(command2)){\n\t\t\tcur=cur<str.length()? cur+1:cur;    \n\t\t    }\n\t\t    else{\n\t\t\tint index=new String(str).indexOf(\" \",cur+1);\n\t\t\tif(index==-1){\n\t\t\t    cur=str.length();\n\t\t\t}\n\t\t\telse{\n\t\t\t    cur=index;\n\t\t\t    while(true){\n\t\t\t\tif(cur+1==str.length()){cur++;break;}\n\t\t\t\telse if(str.charAt(cur+1)==' ')cur++;\n\t\t\t\telse break;\n\t\t\t    }\n\t\t\t}\n\t\t    }\n\t\t}\n\t\tif(\"backward\".equals(command1)){\n\t\t    if(\"char\".equals(command2)){\n\t\t\tcur=cur>0? cur-1:cur;    \n\t\t    }\n\t\t    else{\n\t\t\twhile(cur>0&&str.charAt(cur-1)==' ')cur--;\n\t\t\tint index=cur;\n\t\t\twhile(index>0&&str.charAt(index-1)!=' ')index--;\n\t\t\tcur=index;\n\t\t\t\n\t\t    }  \n\t\t}\n\t\tif(\"insert\".equals(command1)){\n\t\t    //raplaceALL..\n\t\t    command2=new StringBuffer(command2).deleteCharAt(0).toString();\n\t\t    command2=new StringBuffer(command2).deleteCharAt(command2.length()-1).toString();\n\t\t    str.insert(cur,command2);\n\t\t    cur+=command2.length();\n\t\t}\t\t       \n\t\tif(\"delete\".equals(command1)){\n\t\t    if(\"char\".equals(command2)){\n\t\t\tif(cur!=str.length()){\n\t\t\t    str.deleteCharAt(cur);\n\t\t\t}\n\t\t    }\n\t\t    else{\n\t\t\twhile(true){\n\t\t\t    if(cur==str.length())break;\n\t\t\t    if(str.charAt(cur)!=' ')break;\n\t\t\t    str.deleteCharAt(cur);\n\t\t\t}\n\t\t\twhile(true){\n\t\t\t    if(cur==str.length())break;\n\t\t\t    if(str.charAt(cur)==' ')break;\n\t\t\t    str.deleteCharAt(cur);\n\t\t\t}\n\t\t\twhile(true){\n\t\t\t    if(cur+1>=str.length()||str.charAt(cur+1)!=' ')break;\n\t\t\t    str.deleteCharAt(cur);\t\n\t\t\t}\n\t\t    }\n\t\t}\n\t\n\t\t//print(str,cur);\n\t    }\n\t    print(str,cur);\n\t}\n\t\n    }\n    void print(StringBuffer str,int cur){\n\t    str.insert(cur,\"^\");\n\t    System.out.println(str);\n\t    str.deleteCharAt(cur);\n    }\n    public static void main(String[] args){\n\tnew Main().run();\n    }\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.InputStream;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.InputMismatchException;\nimport java.util.NoSuchElementException;\nimport java.math.BigInteger;\n  \npublic class Main{\n  \nstatic PrintWriter out;\nstatic InputReader ir;\n  \nstatic void solve(){\n int n=ir.nextInt();\n while(n-->0){\n   String s=ir.next();\n   int cur=0,MAX=1500\n   char[] str=new char[MAX+1];\n   Arrays.fill(str,'-');\n   for(int i=0;i<s.length();i++) str[i]=s.charAt(i);\n   int m=ir.nextInt();\n   while(m-->0){\n     String com0=ir.next(),com1=ir.next();\n     if(\"forward\".equals(com0)){\n       if(\"char\".equals(com1)){\n         if(str[cur]!='-') cur++;\n       }\n       else if(\"word\".equals(com1)){\n         while(str[cur]==' ') cur++;\n         while(str[cur]!=' '&&str[cur]!='-') cur++;\n       }\n     }\n     else if(\"backward\".equals(com0)){\n       if(\"char\".equals(com1)){\n         if(cur>0) cur--;\n       }\n       else if(\"word\".equals(com1)){\n         while(cur>0&&str[cur-1]==' ') cur--;\n         while(cur>0&&str[cur-1]!=' ') cur--;\n       }\n     }\n     else if(\"insert\".equals(com0)){\n       if(com1.length()>2){\n         String insertionStr=com1.substring(1,com1.length()-1);\n         for(int i=MAX-insertionStr.length();i>=cur;i--){\n           if(str[i]!='-') str[i+insertionStr.length()]=str[i];\n         }\n         for(int i=0;i<insertionStr.length();i++){\n           str[cur+i]=insertionStr.charAt(i);\n         }\n         cur+=insertionStr.length();\n       }\n     }\n     else if(\"delete\".equals(com0)){\n       if(\"char\".equals(com1)){\n         if(str[cur]!='-'){\n           for(int i=cur;;i++){\n             if(str[i]=='-') break;\n             str[i]=str[i+1];\n           }\n         }\n       }\n       else if(\"word\".equals(com1)){\n         int cnt=cur;\n         while(str[cnt]==' ') cnt++;\n         if(str[cnt]!='-'){\n           while(str[cnt]!=' '&&str[cnt]!='-') cnt++;\n           for(int i=cur;;i++){\n             if(str[i]=='-') break;\n             str[i]=str[i-cur+cnt];\n           }\n         }\n       }\n     }\n   }\n   StringBuilder sb=new StringBuilder();\n   for(int i=0;;i++){\n     if(i==cur) sb.append(\"^\");\n     if(str[i]=='-') break;\n     sb.append(String.valueOf(str[i]));\n   }\n   out.println(sb);\n  }\n}\n  \npublic static void main(String[] args) throws Exception{\n ir=new InputReader(System.in);\n out=new PrintWriter(System.out);\n solve();\n out.flush();\n}\n  \nstatic class InputReader {\n private InputStream in;\n private byte[] buffer=new byte[1024];\n private int curbuf;\n private int lenbuf;\n  \n public InputReader(InputStream in) {this.in=in; this.curbuf=this.lenbuf=0;}\n   \n public boolean hasNextByte() {\n  if(curbuf>=lenbuf){\n   curbuf= 0;\n   try{\n    lenbuf=in.read(buffer);\n   }catch(IOException e) {\n    throw new InputMismatchException();\n   }\n   if(lenbuf<=0) return false;\n  }\n  return true;\n }\n  \n private int readByte(){if(hasNextByte()) return buffer[curbuf++]; else return -1;}\n   \n private boolean isSpaceChar(int c){return !(c>=33&&c<=126);}\n   \n private void skip(){while(hasNextByte()&&isSpaceChar(buffer[curbuf])) curbuf++;}\n   \n public boolean hasNext(){skip(); return hasNextByte();}\n   \n public String next(){\n  if(!hasNext()) throw new NoSuchElementException();\n  StringBuilder sb=new StringBuilder();\n  int b=readByte();\n  while(!isSpaceChar(b)){\n   sb.appendCodePoint(b);\n   b=readByte();\n  }\n  return sb.toString();\n }\n   \n public int nextInt() {\n  if(!hasNext()) throw new NoSuchElementException();\n  int c=readByte();\n  while (isSpaceChar(c)) c=readByte();\n  boolean minus=false;\n  if (c=='-') {\n   minus=true;\n   c=readByte();\n  }\n  int res=0;\n  do{\n   if(c<'0'||c>'9') throw new InputMismatchException();\n   res=res*10+c-'0';\n   c=readByte();\n  }while(!isSpaceChar(c));\n  return (minus)?-res:res;\n }\n   \n public long nextLong() {\n  if(!hasNext()) throw new NoSuchElementException();\n  int c=readByte();\n  while (isSpaceChar(c)) c=readByte();\n  boolean minus=false;\n  if (c=='-') {\n   minus=true;\n   c=readByte();\n  }\n  long res = 0;\n  do{\n   if(c<'0'||c>'9') throw new InputMismatchException();\n   res=res*10+c-'0';\n   c=readByte();\n  }while(!isSpaceChar(c));\n  return (minus)?-res:res;\n }\n  \n public double nextDouble(){return Double.parseDouble(next());}\n  \n public BigInteger nextBigInteger(){return new BigInteger(next());}\n  \n public int[] nextIntArray(int n){\n  int[] a=new int[n];\n  for(int i=0;i<n;i++) a[i]=nextInt();\n  return a;\n }\n  \n public long[] nextLongArray(int n){\n  long[] a=new long[n];\n  for(int i=0;i<n;i++) a[i]=nextLong();\n  return a;\n }\n  \n public char[][] nextCharMap(int n,int m){\n  char[][] map=new char[n][m];\n  for(int i=0;i<n;i++) map[i]=next().toCharArray();\n  return map;\n }\n}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.InputStream;\nimport java.io.PrintWriter;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Deque;\nimport java.util.HashMap;\nimport java.util.InputMismatchException;\nimport java.util.Map;\nimport java.util.PriorityQueue;\nimport java.util.Scanner;\nimport java.math.BigInteger;\nimport java.math.BigDecimal;\n      \npublic class Main{\n  \nstatic final InputStream in=System.in;\nstatic final PrintWriter out=new PrintWriter(System.out);\nstatic final int INF=Integer.MAX_VALUE/2;\nstatic final long LINF=Long.MAX_VALUE/2;\nstatic int MAX=1000;\nstatic char[] str=new char[MAX+1];\n  \npublic static void main(String[] args){\n  Scanner sc=new Scanner(in);\n  int n=sc.nextInt(); sc.nextLine();\n  while(n-->0){\n    String line=sc.nextLine();\n    int cur=0;\n    Arrays.fill(str,'-');\n    for(int i=0;i<line.length();i++) str[i]=line.charAt(i);\n    int m=sc.nextInt(); sc.nextLine();\n    while(m-->0){\n      String com0=sc.next();\n      String com1=sc.next();\n      sc.nextLine();\n      if(\"forward\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(str[cur]!='-') cur++;\n        }\n        else{\n          while(str[cur]==' ') cur++;\n          while(str[cur]!=' '&&str[cur]!='-') cur++;\n        }\n      }\n      else if(\"backward\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(cur>0) cur--;\n        }\n        else{\n          while(cur>0&&str[cur-1]==' ') cur--;\n          while(cur>0&&str[cur-1]!=' ') cur--;\n        }\n      }\n      else if(\"insert\".equals(com0)){\n        if(com1.length()>2){\n          String insertionStr=com1.substring(1,com1.length()-1);\n          for(int i=MAX-insertionStr.length();i>=cur;i--){\n            if(str[i]!='-') str[i+insertionStr.length()]=str[i];\n          }\n          for(int i=0;i<insertionStr.length();i++){\n            str[cur+i]=insertionStr.charAt(i);\n          }\n          cur+=insertionStr.length();\n        }\n      }\n      else if(\"delete\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(str[cur]!='-'){\n            for(int i=cur;;i++){\n              if(str[i]=='-') break;\n              str[i]=str[i+1];\n            }\n          }\n        }\n        else{\n          int cnt=cur;\n          while(str[cnt]==' ') cnt++;\n          if(str[cnt]!='-'){\n            while(str[cnt]!=' '&&str[cnt]!='-') cnt++;\n            for(int i=cur;;i++){\n              if(str[i]=='-') break;\n              str[i]=str[i-cur+cnt];\n            }\n          }\n        }\n      }\n    }\n    StringBuilder sb=new StringBuilder();\n    for(int i=0;;i++){\n      if(i==cur) sb.append(\"^\");\n      if(str[i]=='-') break;\n      sb.append(String.valueOf(str[i]));\n    }\n    out.println(sb);\n  }\nout.flush();\n}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Deque;\nimport java.util.HashMap;\nimport java.util.InputMismatchException;\nimport java.util.Map;\nimport java.util.PriorityQueue;\nimport java.util.StringTokenizer;\nimport java.math.BigInteger;\nimport java.math.BigDecimal;\n       \npublic class Main{\n   \nstatic final InputStream in=System.in;\nstatic final PrintWriter out=new PrintWriter(System.out);\nstatic final int INF=Integer.MAX_VALUE/2;\nstatic final long LINF=Long.MAX_VALUE/2;\nstatic int MAX=1000;\nstatic char[] str=new char[MAX+1];\n   \npublic static void main(String[] args) throws IOException{\n  BufferedReader br=new BufferedReader(new InputStreamReader(in));\n  int n=Integer.parseInt(br.readLine());\n  while(n-->0){\n    String line=br.readLine();\n    int cur=0;\n    Arrays.fill(str,'-');\n    for(int i=0;i<line.length();i++) str[i]=line.charAt(i);\n    int m=Integer.parseInt(br.readLine());\n    while(m-->0){\n      String com=br.readLine();\n      String com0=com.split(\" \")[0];\n      String com1=com.split(\" \")[1];\n      if(\"forward\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(str[cur]!='-') cur++;\n        }\n        else if(\"word\".equals(com1)){\n          while(str[cur]==' ') cur++;\n          while(str[cur]!=' '&&str[cur]!='-') cur++;\n        }\n      }\n      else if(\"backward\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(cur>0) cur--;\n        }\n        else if(\"word\".equals(com1)){\n          while(cur>0&&str[cur-1]==' ') cur--;\n          while(cur>0&&str[cur-1]!=' ') cur--;\n        }\n      }\n      else if(\"insert\".equals(com0)){\n        String insertionStr=\"                  \";\n        for(int i=MAX-insertionStr.length();i>=cur;i--){\n          if(str[i]!='-') str[i+insertionStr.length()]=str[i];\n        }\n        for(int i=0;i<insertionStr.length();i++){\n          str[cur+i]=insertionStr.charAt(i);\n        }\n        cur+=insertionStr.length();\n      }\n      else if(\"delete\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(str[cur]!='-'){\n            for(int i=cur;;i++){\n              if(str[i]=='-') break;\n              str[i]=str[i+1];\n            }\n          }\n        }\n        else if(\"word\".equals(com1)){\n          int cnt=cur;\n          while(str[cnt]==' ') cnt++;\n          if(str[cnt]!='-'){\n            while(str[cnt]!=' '&&str[cnt]!='-') cnt++;\n            for(int i=cur;;i++){\n              if(str[i]=='-') break;\n              str[i]=str[i-cur+cnt];\n            }\n          }\n        }\n      }\n    }\n    StringBuilder sb=new StringBuilder();\n    for(int i=0;;i++){\n      if(i==cur) sb.append(\"^\");\n      if(str[i]=='-') break;\n      sb.append(String.valueOf(str[i]));\n    }\n    out.println(sb);\n    out.flush();\n  }\n}\n}"
  },
  {
    "language": "Java",
    "code": "\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.LinkedList;\nimport java.util.ListIterator;\nimport java.util.Scanner;\n\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\t\n\t\tfinal int N = Integer.parseInt(sc.nextLine());\n\t\t\n\t\tfor(int i = 0; i < N; i++){\n\t\t\t\n\t\t\tArrayList<Character> list = new ArrayList<Character>();\n\t\t\tfor(final char in : sc.nextLine().toCharArray()){\n\t\t\t\tlist.add(in);\n\t\t\t}\n\t\t\t\n\t\t\tfinal int M = Integer.parseInt(sc.nextLine());\n\t\t\t\n\t\t\tint pos = 0;\n\t\t\t\n\t\t\tfor(int j = 0; j < M; j++){\n\t\t\t\t/*\n\t\t\t\tfor(int k = 0; k < list.size(); k++){\n\t\t\t\t\tif(k == pos){\n\t\t\t\t\t\tSystem.out.print(\"^\");\n\t\t\t\t\t}\n\t\t\t\t\tSystem.out.print(list.get(k));\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(list.size() == pos){\n\t\t\t\t\tSystem.out.print(\"^\");\n\t\t\t\t}\n\t\t\t\tSystem.out.println();\n\t\t\t\t*/\n\t\t\t\tString str = sc.nextLine();\n\t\t\t\tString ops1 = str.substring(0, str.indexOf(\" \"));\n\t\t\t\tString ops2 = str.substring(str.indexOf(\" \") + 1, str.length());\n\t\t\t\t\n\t\t\t\t//System.out.println(ops1 + \" \" + ops2);\n\t\t\t\t\n\t\t\t\tif(\"forward\".equals(ops1)){\n\t\t\t\t\tif(\"char\".equals(ops2)){\n\t\t\t\t\t\tif(pos < list.size()){\n\t\t\t\t\t\t\tpos++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}else if(\"word\".equals(ops2)){\n\t\t\t\t\t\tboolean flag = false;\n\t\t\t\t\t\tboolean found = false;\n\t\t\t\t\t\t\n\t\t\t\t\t\tfor(int k = pos; k < list.size(); k++){\n\t\t\t\t\t\t\tif(!found && list.get(k) == ' '){\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}else if(list.get(k) == ' '){\n\t\t\t\t\t\t\t\tpos = k;\n\t\t\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(!flag){\n\t\t\t\t\t\t\tpos = list.size();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}else if(\"backward\".equals(ops1)){\n\t\t\t\t\tif(\"char\".equals(ops2)){\n\t\t\t\t\t\tif(pos > 0){\n\t\t\t\t\t\t\tpos--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}else if(\"word\".equals(ops2)){\n\t\t\t\t\t\tboolean flag = false;\n\t\t\t\t\t\tboolean found = false;\n\t\t\t\t\t\t\n\t\t\t\t\t\tfor(int k = pos - 1; k >= 0; k--){\n\t\t\t\t\t\t\tif(!found && list.get(k) == ' '){\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}else if(list.get(k) == ' '){\n\t\t\t\t\t\t\t\tpos = k + 1;\n\t\t\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(!flag){\n\t\t\t\t\t\t\tpos = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}else if(\"delete\".equals(ops1)){\n\t\t\t\t\tif(\"char\".equals(ops2)){\n\t\t\t\t\t\tif(pos < list.size()){\n\t\t\t\t\t\t\tlist.remove(pos);\n\t\t\t\t\t\t}\n\t\t\t\t\t}else if(\"word\".equals(ops2)){\n\t\t\t\t\t\tboolean flag = false;\n\t\t\t\t\t\tboolean found = false;\n\t\t\t\t\t\tint del = -1;\n\t\t\t\t\t\t\n\t\t\t\t\t\tfor(int k = pos; k < list.size(); k++){\n\t\t\t\t\t\t\tif(!found && list.get(k) == ' '){\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}else if(list.get(k) == ' '){\n\t\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\t\t\tdel = k - 1;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(found && !flag){\n\t\t\t\t\t\t\tdel = list.size() - 1;\n\t\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(flag){\n\t\t\t\t\t\t\tfor(int k = pos; k <= del; k++){\n\t\t\t\t\t\t\t\tlist.remove(pos);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}else if(\"insert\".equals(ops1)){\n\t\t\t\t\tchar[] input = ops2.replaceAll(\"\\\"\", \"\").toCharArray();\n\t\t\t\t\t\n\t\t\t\t\tfor(int k = input.length - 1; k >= 0; k--){\n\t\t\t\t\t\tlist.add(pos, input[k]);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tpos += input.length;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfor(int j = 0; j < list.size(); j++){\n\t\t\t\tif(j == pos){\n\t\t\t\t\tSystem.out.print(\"^\");\n\t\t\t\t}\n\t\t\t\tSystem.out.print(list.get(j));\n\t\t\t}\n\t\t\t\n\t\t\tif(list.size() == pos){\n\t\t\t\tSystem.out.print(\"^\");\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t\t\n\t}\n\n}"
  },
  {
    "language": "Java",
    "code": "\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.LinkedList;\nimport java.util.ListIterator;\nimport java.util.Scanner;\n\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\t\n\t\tfinal int N = Integer.parseInt(sc.nextLine());\n\t\t\n\t\tfor(int i = 0; i < N; i++){\n\t\t\t\n\t\t\tArrayList<Character> list = new ArrayList<Character>();\n\t\t\tfor(final char in : sc.nextLine().toCharArray()){\n\t\t\t\tlist.add(in);\n\t\t\t}\n\t\t\t\n\t\t\tfinal int M = Integer.parseInt(sc.nextLine());\n\t\t\t\n\t\t\tint pos = 0;\n\t\t\t\n\t\t\tfor(int j = 0; j < M; j++){\n\t\t\t\t//System.out.println(list);\n\t\t\t\t\n\t\t\t\tString[] str = sc.nextLine().split(\" \");\n\t\t\t\tString ops1 = str[0];\n\t\t\t\tString ops2 = str[1];\n\t\t\t\t\n\t\t\t\tif(\"forward\".equals(ops1)){\n\t\t\t\t\tif(\"char\".equals(ops2)){\n\t\t\t\t\t\tif(pos < list.size()){\n\t\t\t\t\t\t\tpos++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}else if(\"word\".equals(ops2)){\n\t\t\t\t\t\tboolean flag = false;\n\t\t\t\t\t\t\n\t\t\t\t\t\tfor(int k = pos; k < list.size(); k++){\n\t\t\t\t\t\t\tif(list.get(k) == ' '){\n\t\t\t\t\t\t\t\tpos = k;\n\t\t\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(!flag){\n\t\t\t\t\t\t\tpos = list.size();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}else if(\"backward\".equals(ops1)){\n\t\t\t\t\tif(\"char\".equals(ops2)){\n\t\t\t\t\t\tif(pos > 0){\n\t\t\t\t\t\t\tpos--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}else if(\"word\".equals(ops2)){\n\t\t\t\t\t\tboolean flag = false;\n\t\t\t\t\t\t\n\t\t\t\t\t\tfor(int k = pos - 1; k >= 0; k--){\n\t\t\t\t\t\t\tif(list.get(k) == ' '){\n\t\t\t\t\t\t\t\tpos = k + 1;\n\t\t\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(!flag){\n\t\t\t\t\t\t\tpos = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}else if(\"delete\".equals(ops1)){\n\t\t\t\t\tif(\"char\".equals(ops2)){\n\t\t\t\t\t\tif(pos < list.size()){\n\t\t\t\t\t\t\tlist.remove(pos);\n\t\t\t\t\t\t}\n\t\t\t\t\t}else if(\"word\".equals(ops2)){\n\t\t\t\t\t\tboolean flag = false;\n\t\t\t\t\t\tboolean found = false;\n\t\t\t\t\t\tint del = -1;\n\t\t\t\t\t\t\n\t\t\t\t\t\tfor(int k = pos; k < list.size(); k++){\n\t\t\t\t\t\t\tif(list.get(k) == ' '){\n\t\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\t\t\tdel = k - 1;\n\t\t\t\t\t\t\t}else if(found){\n\t\t\t\t\t\t\t\tdel = k - 1;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(flag){\n\t\t\t\t\t\t\tfor(int k = pos; k <= del; k++){\n\t\t\t\t\t\t\t\tlist.remove(pos);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}else if(\"insert\".equals(ops1)){\n\t\t\t\t\tchar[] input = ops2.replaceAll(\"\\\"\", \"\").toCharArray();\n\t\t\t\t\t\n\t\t\t\t\tfor(int k = input.length - 1; k >= 0; k--){\n\t\t\t\t\t\tlist.add(pos, input[k]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfor(int j = 0; j < list.size(); j++){\n\t\t\t\tif(j == pos){\n\t\t\t\t\tSystem.out.print(\"^\");\n\t\t\t\t}\n\t\t\t\tSystem.out.print(list.get(j));\n\t\t\t}\n\t\t\t\n\t\t\tif(list.size() == pos){\n\t\t\t\tSystem.out.print(\"^\");\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t\t\n\t}\n\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\n//A Simple Offline Text Editor\npublic class Main{\n\n\tvoid run(){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint T = sc.nextInt();sc.nextLine();\n\t\twhile(T--!=0){\n\t\t\tString s = sc.nextLine();\n//\t\t\tSystem.out.println(\"S:\" + s);\n\t\t\tint cur = 0;\n\t\t\tint M = sc.nextInt();\n\t\t\twhile(M--!=0){\n\t\t\t\tString cmd = sc.next();\n//\t\t\t\tSystem.out.println(\"CMD:\" + cmd);\n\t\t\t\tif(\"forward\".equals(cmd)){\n\t\t\t\t\tcmd = sc.next();sc.nextLine();\n//\t\t\t\t\tSystem.out.println(\"OPPE:\" + cmd);\n\t\t\t\t\tif(\"char\".equals(cmd)){\n\t\t\t\t\t\tcur = Math.min(s.length(), cur+1);\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tif(cur==s.length())continue;\n\t\t\t\t\t\tchar ch = s.charAt(cur);\n\t\t\t\t\t\tif(ch==' '){\n\t\t\t\t\t\t\twhile(cur<s.length()&&s.charAt(cur)==' ')cur++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\twhile(cur<s.length()&&s.charAt(cur)!=' ')cur++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if(\"backward\".equals(cmd)){\n\t\t\t\t\tcmd = sc.next();sc.nextLine();\n//\t\t\t\t\tSystem.out.println(\"OPPE:\" + cmd);\n\t\t\t\t\tif(\"char\".equals(cmd)){\n\t\t\t\t\t\tcur = Math.max(0, cur-1);\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tif(cur==0)continue;\n\t\t\t\t\t\tchar ch = s.charAt(cur-1);\n\t\t\t\t\t\tif(ch==' '){\n\t\t\t\t\t\t\twhile(cur>0&&s.charAt(cur-1)==' ')cur--;\n\t\t\t\t\t\t}\n\t\t\t\t\t\twhile(cur>0&&s.charAt(cur-1)!=' ')cur--;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if(\"delete\".equals(cmd)){\n\t\t\t\t\tcmd = sc.next();sc.nextLine();\n//\t\t\t\t\tSystem.out.println(\"OPPE:\" + cmd);\n\t\t\t\t\tif(\"char\".equals(cmd)){\n\t\t\t\t\t\tif(cur==s.length())continue;\n\t\t\t\t\t\ts = s.substring(0, cur) + s.substring(cur+1, s.length());\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tint p = cur;\n\t\t\t\t\t\twhile(p<s.length()&&s.charAt(p)==' ')p++;\n\t\t\t\t\t\tif(p==s.length())continue;\n\t\t\t\t\t\twhile(p<s.length()&&s.charAt(p)!=' ')p++;\n\t\t\t\t\t\ts = s.substring(0, cur) + s.substring(p, s.length());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tString t = sc.nextLine();\n//\t\t\t\t\tSystem.out.println(\"OPPE:\" + t);\n\t\t\t\t\tint i=0;\n\t\t\t\t\twhile(t.charAt(i)!='\\\"')i++;\n\t\t\t\t\tint j=t.length()-1;\n\t\t\t\t\twhile(t.charAt(j)!='\\\"')j--;\n\t\t\t\t\tt = t.substring(i+1, j);\n\t\t\t\t\ts = s.substring(0, cur) + t + s.substring(cur, s.length());\n\t\t\t\t\tcur += t.length();\n\t\t\t\t}\n//\t\t\t\tsc.nextLine();\n\t\t\t}\n\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\tfor(int i=0;i<=s.length();i++){\n\t\t\t\tif(cur==i)sb.append('^');\n\t\t\t\tif(i<s.length())sb.append(s.charAt(i));\n\t\t\t}\n\t\t\tSystem.out.println(sb);\n\t\t}\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\tnew Main().run();\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Deque;\nimport java.util.HashMap;\nimport java.util.InputMismatchException;\nimport java.util.Map;\nimport java.util.PriorityQueue;\nimport java.math.BigInteger;\nimport java.math.BigDecimal;\n      \npublic class Main{\n  \nstatic final InputStream in=System.in;\nstatic final PrintWriter out=new PrintWriter(System.out);\nstatic final int INF=Integer.MAX_VALUE/2;\nstatic final long LINF=Long.MAX_VALUE/2;\nstatic int MAX=100000;\nstatic char[] str=new char[MAX+1];\n  \npublic static void main(String[] args) throws IOException{\n  BufferedReader br=new BufferedReader(new InputStreamReader(in));\n  int n=Integer.parseInt(br.readLine());\n  while(n-->0){\n    String line=br.readLine();\n    int cur=0;\n    for(int i=0;i<=MAX;i++) str[i]='-';\n    for(int i=0;i<line.length();i++) str[i]=line.charAt(i);\n    int m=Integer.parseInt(br.readLine());\n    while(m-->0){\n      String[] com=br.readLine().split(\" \");\n      String com0=com[0];\n      String com1=com[1];\n      if(\"forward\".equals(com0)){\n        if(\"char\".equals(com1)&&str[cur]!='-') cur++;\n        else{\n          while(str[cur]==' ') cur++;\n          while(str[cur]!=' '&&str[cur]!='-') cur++;\n        }\n      }\n      else if(\"backward\".equals(com0)){\n        if(\"char\".equals(com1)&&cur!=0) cur--;\n        else{\n          while(cur!=0&&str[cur-1]==' ') cur--;\n          while(cur!=0&&str[cur-1]!=' ') cur--;\n        }\n      }\n      else if(\"insert\".equals(com0)){\n        if(com1.length()>2){\n          String insertionStr=com[1].substring(1,com1.length()-1);\n          for(int i=MAX-insertionStr.length();i>=cur;i--){\n            str[i+insertionStr.length()]=str[i];\n          }\n          for(int i=0;i<insertionStr.length();i++){\n            str[cur+i]=insertionStr.charAt(i);\n          }\n          cur+=insertionStr.length();\n        }\n      }\n      else{\n        if(\"char\".equals(com1)&&str[cur]!='-'){\n          for(int i=cur;i<=MAX;i++){\n            if(str[i]=='-') break;\n            str[i]=str[i+1];\n          }\n        }\n        else{\n          int cnt=cur;\n          boolean flag=false;\n          while(str[cnt]==' ') cnt++;\n          while(str[cnt]!=' '&&str[cnt]!='-'){\n            cnt++;\n            flag=true;\n          }\n          if(flag){\n            for(int i=cnt;i<=MAX;i++){\n            if(str[i-cnt+cur]=='-') break;\n              str[i-cnt+cur]=str[i];\n            }\n          }\n        }\n      }\n    }\n    for(int i=0;;i++){\n      if(i==cur) out.print(\"^\");\n      if(str[i]=='-') break;\n      out.print(str[i]);\n    }\n    out.println();\n  }\nout.flush();\n}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Deque;\nimport java.util.HashMap;\nimport java.util.InputMismatchException;\nimport java.util.Map;\nimport java.util.PriorityQueue;\nimport java.util.StringTokenizer;\nimport java.math.BigInteger;\nimport java.math.BigDecimal;\n       \npublic class Main{\n   \nstatic final InputStream in=System.in;\nstatic final PrintWriter out=new PrintWriter(System.out);\nstatic final int INF=Integer.MAX_VALUE/2;\nstatic final long LINF=Long.MAX_VALUE/2;\nstatic int MAX=1500;\nstatic char[] str=new char[MAX+1];\n   \npublic static void main(String[] args) throws IOException{\n  BufferedReader br=new BufferedReader(new InputStreamReader(in));\n  int n=Integer.parseInt(br.readLine());\n  while(n-->0){\n    String line=br.readLine();\n    int cur=0;\n    Arrays.fill(str,'-');\n    for(int i=0;i<line.length();i++) str[i]=line.charAt(i);\n    int m=Integer.parseInt(br.readLine());\n    while(m-->0){\n      StringTokenizer st=new StringTokenizer(br.readLine());\n      String com0=st.nextToken();\n      String com1=st.nextToken();\n      if(\"forward\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(str[cur]!='-') cur++;\n        }\n        else if(\"word\".equals(com1)){\n          while(str[cur]==' ') cur++;\n          while(str[cur]!=' '&&str[cur]!='-') cur++;\n        }\n      }\n      else if(\"backward\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(cur>0) cur--;\n        }\n        else if(\"word\".equals(com1)){\n          while(cur>0&&str[cur-1]==' ') cur--;\n          while(cur>0&&str[cur-1]!=' ') cur--;\n        }\n      }\n      else if(\"insert\".equals(com0)){\n        if(com1.length()>2){\n          String insertionStr=com1.substring(1,com1.length()-1);\n          for(int i=MAX-insertionStr.length();i>=cur;i--){\n            if(str[i]!='-') str[i+insertionStr.length()]=str[i];\n          }\n          for(int i=0;i<insertionStr.length();i++){\n            str[cur+i]=insertionStr.charAt(i);\n          }\n          cur+=insertionStr.length();\n        }\n      }\n      else if(\"delete\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(str[cur]!='-'){\n            for(int i=cur;;i++){\n              if(str[i]=='-') break;\n              str[i]=str[i+1];\n            }\n          }\n        }\n        else if(\"word\".equals(com1)){\n          int cnt=cur;\n          while(str[cnt]==' ') cnt++;\n          if(str[cnt]!='-'){\n            while(str[cnt]!=' '&&str[cnt]!='-') cnt++;\n            for(int i=cur;;i++){\n              if(str[i]=='-') break;\n              str[i]=str[i-cur+cnt];\n            }\n          }\n        }\n      }\n    }\n    StringBuilder sb=new StringBuilder();\n    for(int i=0;;i++){\n      if(i==cur) sb.append(\"^\");\n      if(str[i]=='-') break;\n      sb.append(String.valueOf(str[i]));\n    }\n    out.println(sb);\n    out.flush();\n  }\n}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.IOException;\nimport java.util.InputMismatchException;\nimport java.util.Scanner;\n\npublic class Main {\n\tvoid run() {\n\t\tScanner sc = new Scanner(System.in);\n\n\t\tint tc = sc.nextInt();\n\t\tsc.nextLine();\n\t\tfor (int T = 0; T < tc; T++) {\n\t\t\tStringBuilder str = new StringBuilder(sc.nextLine());\n\t\t\tint n = sc.nextInt();\n\t\t\tsc.nextLine();\n\t\t\tint id = 0;\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tString s = sc.nextLine();\n\n\t\t\t\tif (s.equals(\"forward char\")) {\n\t\t\t\t\tid = Math.min(id + 1, str.length());\n\t\t\t\t}\n\t\t\t\tif (s.equals(\"backward char\")) {\n\t\t\t\t\tid = Math.max(id - 1, 0);\n\t\t\t\t}\n\t\t\t\tif (s.equals(\"forward word\")) {\n\t\t\t\t\tid = Math.min(id + 1, str.length());\n\t\t\t\t\twhile (id < str.length() && str.charAt(id) != ' ') {\n\t\t\t\t\t\tid++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (s.equals(\"backward word\")) {\n\t\t\t\t\tid = Math.max(id - 1, 0);\n\t\t\t\t\twhile (0 < id && str.charAt(id - 1) != ' ') {\n\t\t\t\t\t\tid--;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (s.charAt(0) == 'i') {\n\t\t\t\t\tint len = s.length() - 9;\n\t\t\t\t\tchar[] c = new char[len];\n\t\t\t\t\tfor (int j = 0; j < len; j++) {\n\t\t\t\t\t\tc[j] = s.charAt(8 + j);\n\t\t\t\t\t}\n\n\t\t\t\t\tstr.insert(id, c);\n\t\t\t\t\tid += len;\n\t\t\t\t}\n\t\t\t\tif (s.equals(\"delete char\")) {\n\t\t\t\t\tif (id < str.length()) {\n\t\t\t\t\t\tstr.deleteCharAt(id);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (s.equals(\"delete word\")) {\n\t\t\t\t\twhile (id < str.length() && str.charAt(id) != ' ') {\n\t\t\t\t\t\tstr.deleteCharAt(id);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tchar[] c = str.toString().toCharArray();\n\t\t\tn = c.length;\n\t\t\tboolean f = false;\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tif (i == id) {\n\t\t\t\t\tSystem.out.print(\"^\");\n\t\t\t\t\tf = true;\n\t\t\t\t}\n\t\t\t\tSystem.out.print(c[i]);\n\t\t\t}\n\t\t\tif (!f) {\n\t\t\t\tSystem.out.print(\"^\");\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tnew Main().run();\n\t}\n\n\tpublic void mapDebug(int[][] a) {\n\t\tSystem.out.println(\"--------map display---------\");\n\t\tfor (int i = 0; i < a.length; i++) {\n\t\t\tfor (int j = 0; j < a[i].length; j++) {\n\t\t\t\tSystem.out.printf(\"%3d \", a[i][j]);\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t\tSystem.out.println(\"----------------------------\" + '\\n');\n\t}\n\n\tclass MyScanner {\n\t\tint read() {\n\t\t\ttry {\n\t\t\t\treturn System.in.read();\n\t\t\t} catch (IOException e) {\n\t\t\t\tthrow new InputMismatchException();\n\t\t\t}\n\t\t}\n\n\t\tboolean isSpaceChar(int c) {\n\t\t\treturn c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\n\t\t}\n\n\t\tboolean isEndline(int c) {\n\t\t\treturn c == '\\n' || c == '\\r' || c == -1;\n\t\t}\n\n\t\tint nextInt() {\n\t\t\treturn Integer.parseInt(next());\n\t\t}\n\n\t\tint[] nextIntArray(int n) {\n\t\t\tint[] array = new int[n];\n\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t\tarray[i] = nextInt();\n\t\t\treturn array;\n\t\t}\n\n\t\tlong nextLong() {\n\t\t\treturn Long.parseLong(next());\n\t\t}\n\n\t\tlong[] nextLongArray(int n) {\n\t\t\tlong[] array = new long[n];\n\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t\tarray[i] = nextLong();\n\t\t\treturn array;\n\t\t}\n\n\t\tdouble nextDouble() {\n\t\t\treturn Double.parseDouble(next());\n\t\t}\n\n\t\tdouble[] nextDoubleArray(int n) {\n\t\t\tdouble[] array = new double[n];\n\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t\tarray[i] = nextDouble();\n\t\t\treturn array;\n\t\t}\n\n\t\tString next() {\n\t\t\tint c = read();\n\t\t\twhile (isSpaceChar(c))\n\t\t\t\tc = read();\n\t\t\tStringBuilder res = new StringBuilder();\n\t\t\tdo {\n\t\t\t\tres.appendCodePoint(c);\n\t\t\t\tc = read();\n\t\t\t} while (!isSpaceChar(c));\n\t\t\treturn res.toString();\n\t\t}\n\n\t\tString[] nextStringArray(int n) {\n\t\t\tString[] array = new String[n];\n\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t\tarray[i] = next();\n\n\t\t\treturn array;\n\t\t}\n\n\t\tString nextLine() {\n\t\t\tint c = read();\n\t\t\twhile (isEndline(c))\n\t\t\t\tc = read();\n\t\t\tStringBuilder res = new StringBuilder();\n\t\t\tdo {\n\t\t\t\tres.appendCodePoint(c);\n\t\t\t\tc = read();\n\t\t\t} while (!isEndline(c));\n\t\t\treturn res.toString();\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\nimport static java.lang.Math.*;\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tfor(int t=Integer.parseInt(sc.nextLine());t>0;t--) {\n\t\t\tStringBuilder sb = new StringBuilder(sc.nextLine());\n\t\t\tint n = sc.nextInt(), p = 0; sc.nextLine();\n\t\t\tfor(;n>0;n--){\n\t\t\t\tString sp = sc.nextLine();\n\t\t\t\tint c1 = sp.charAt(0), c2 = sp.split(\" \")[1].charAt(0);\n\t\t\t\tint c=0;\n\t\t\t\tif(c1=='b') c=-1; else if(c1=='f') c=1; else c=0;\n\t\t\t\tif(c2=='c') { p=min(sb.length(),max(0,p+c)); if(c==0&&sb.length()>p&&p>=0) sb.deleteCharAt(p); }\n\t\t\t\telse if(c2=='w')for(p=min(sb.length(), max(-1, p+c));0<=p&&p<sb.length();p=p+c) if(sb.charAt(p)==' ') break; else if(c==0)sb.deleteCharAt(p);\n\t\t\t\tif(c1=='i') { sb.insert(min(sb.length(),max(0,p)), sp.substring(8, sp.length()-1)); p+=sp.length()-9;}\n\t\t\t}\n\t\t\tp=min(sb.length(),max(0,p));\n\t\t\tSystem.out.println(sb.substring(0, p) + \"^\" + sb.substring(p));\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Deque;\nimport java.util.HashMap;\nimport java.util.InputMismatchException;\nimport java.util.Map;\nimport java.util.PriorityQueue;\nimport java.util.StringTokenizer;\nimport java.math.BigInteger;\nimport java.math.BigDecimal;\n      \npublic class Main{\n  \nstatic final InputStream in=System.in;\nstatic final PrintWriter out=new PrintWriter(System.out);\nstatic final int INF=Integer.MAX_VALUE/2;\nstatic final long LINF=Long.MAX_VALUE/2;\nstatic int MAX=10000;\nstatic char[] str=new char[MAX+1];\n  \npublic static void main(String[] args) throws IOException{\n  Scanner sc=new Scanner(in);\n  int n=sc.nextInt(); sc.nextLine();\n  while(n-->0){\n    String line=sc.nextLine();\n    int cur=0;\n    Arrays.fill(str,'-');\n    for(int i=0;i<line.length();i++) str[i]=line.charAt(i);\n    int m=sc.nextInt(); sc.nextLine();\n    while(m-->0){\n      String com0=sc.next();\n      String com1=sc.next();\n      if(\"forward\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(str[cur]!='-') cur++;\n        }\n        else{\n          while(str[cur]==' ') cur++;\n          while(str[cur]!=' '&&str[cur]!='-') cur++;\n        }\n      }\n      else if(\"backward\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(cur>0) cur--;\n        }\n        else{\n          while(cur>0&&str[cur-1]==' ') cur--;\n          while(cur>0&&str[cur-1]!=' ') cur--;\n        }\n      }\n      else if(\"insert\".equals(com0)){\n        if(com1.length()>2){\n          String insertionStr=com1.substring(1,com1.length()-1);\n          for(int i=MAX-insertionStr.length();i>=cur;i--){\n            if(str[i]!='-') str[i+insertionStr.length()]=str[i];\n          }\n          for(int i=0;i<insertionStr.length();i++){\n            str[cur+i]=insertionStr.charAt(i);\n          }\n          cur+=insertionStr.length();\n        }\n      }\n      else if(\"delete\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(str[cur]!='-'){\n            for(int i=cur;;i++){\n              if(str[i]=='-') break;\n              str[i]=str[i+1];\n            }\n          }\n        }\n        else{\n          int cnt=cur;\n          while(str[cnt]==' ') cnt++;\n          if(str[cnt]!='-'){\n            while(str[cnt]!=' '&&str[cnt]!='-') cnt++;\n            for(int i=cur;;i++){\n              if(str[i]=='-') break;\n              str[i]=str[i-cur+cnt];\n            }\n          }\n        }\n      }\n    }\n    StringBuilder sb=new StringBuilder();\n    for(int i=0;;i++){\n      if(i==cur) sb.append(\"^\");\n      if(str[i]=='-') break;\n      sb.append(String.valueOf(str[i]));\n    }\n    out.println(sb);\n  }\nout.flush();\n}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Deque;\nimport java.util.HashMap;\nimport java.util.InputMismatchException;\nimport java.util.Map;\nimport java.util.PriorityQueue;\nimport java.math.BigInteger;\nimport java.math.BigDecimal;\n       \npublic class Main{\n   \nstatic final InputStream in=System.in;\nstatic final PrintWriter out=new PrintWriter(System.out);\nstatic final int INF=Integer.MAX_VALUE/2;\nstatic final long LINF=Long.MAX_VALUE/2;\nstatic int MAX=1500;\nstatic char[] str=new char[MAX+1];\n   \npublic static void main(String[] args) throws IOException{\n  BufferedReader br=new BufferedReader(new InputStreamReader(in));\n  int n=Integer.parseInt(br.readLine());\n  while(n-->0){\n    String line=br.readLine();\n    int cur=0;\n    Arrays.fill(str,'-');\n    for(int i=0;i<line.length();i++) str[i]=line.charAt(i);\n    int m=Integer.parseInt(br.readLine());\n    while(m-->0){\n      String com=br.readLine();\n      String com0=com.substring(0,com.indexOf(\" \"));\n      String com1=com.substring(com.indexOf(\" \")+1);\n      if(\"forward\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(str[cur]!='-') cur++;\n        }\n        else if(\"word\".equals(com1)){\n          while(str[cur]==' ') cur++;\n          while(str[cur]!=' '&&str[cur]!='-') cur++;\n        }\n      }\n      else if(\"backward\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(cur>0) cur--;\n        }\n        else if(\"word\".equals(com1)){\n          while(cur>0&&str[cur-1]==' ') cur--;\n          while(cur>0&&str[cur-1]!=' ') cur--;\n        }\n      }\n      else if(\"insert\".equals(com0)){\n        if(com1.length()>2){\n          String insertionStr=com1.substring(1,com1.length()-1);\n          for(int i=MAX-insertionStr.length();i>=cur;i--){\n            if(str[i]!='-') str[i+insertionStr.length()]=str[i];\n          }\n          for(int i=0;i<insertionStr.length();i++){\n            str[cur+i]=insertionStr.charAt(i);\n          }\n          cur+=insertionStr.length();\n        }\n      }\n      else if(\"delete\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(str[cur]!='-'){\n            for(int i=cur;;i++){\n              if(str[i]=='-') break;\n              str[i]=str[i+1];\n            }\n          }\n        }\n        else if(\"word\".equals(com1)){\n          int cnt=cur;\n          while(str[cnt]==' ') cnt++;\n          if(str[cnt]!='-'){\n            while(str[cnt]!=' '&&str[cnt]!='-') cnt++;\n            for(int i=cur;;i++){\n              if(str[i]=='-') break;\n              str[i]=str[i-cur+cnt];\n            }\n          }\n        }\n      }\n    }\n    StringBuilder sb=new StringBuilder();\n    for(int i=0;;i++){\n      if(i==cur) sb.append(\"^\");\n      if(str[i]=='-') break;\n      sb.append(String.valueOf(str[i]));\n    }\n    out.println(sb);\n  }\nout.flush();\n}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\nclass Main{\n    void run(){\n\tScanner sc=new Scanner(System.in);\n\tint M=sc.nextInt();\n\tsc.nextLine();\n\tfor(int attend=0;attend<M;attend++){\n\t    StringBuffer str=new StringBuffer(sc.nextLine());\n\t    int cur=0;\n\t    int n=sc.nextInt();\n\t    String command1;\n\t    String command2;\n\t    sc.nextLine();\n\t    for(int i=0;i<n;i++){\n\t\tString command=sc.nextLine();\n\t\t//System.out.println(command);\n\t\tint index0=0;\n\t\twhile(true){\n\t\t    if(command.charAt(index0)==' '){\n\t\t\tcommand1=command.substring(0,index0);\n\t\t\tcommand2=command.substring(index0+1);\n\t\t\t//System.out.println(command1);\n\t\t\t//System.out.println(command2);\n\t\t\tbreak;\n\t\t    }\n\t\t    index0++;\n\t\t}\n\t\tif(\"forward\".equals(command1)){\n\t\t    if(\"char\".equals(command2)){\n\t\t\tcur=cur<str.length()? cur+1:cur;    \n\t\t    }\n\t\t    else{\n\t\t\tint index=new String(str).indexOf(\" \",cur+1);\n\t\t\tif(index==-1)cur=str.length();\n\t\t\telse{\n\t\t\t    while(true){\n\t\t\t\tif(index==str.length())break;\n\t\t\t\tif(!((str.charAt(index)==' ')&&(str.charAt(index+1)==' ')))break;\n\t\t\t\tindex++;\n\t\t\t    }\n\t\t\t    cur=index;\n\t\t\t}\n\t\t    }\n\t\t}\n\t\tif(\"backward\".equals(command1)){\n\t\t    if(\"char\".equals(command2)){\n\t\t\tcur=cur>0? cur-1:cur;    \n\t\t    }\n\t\t    else{\n\t\t\tint index=0;\n\t\t\twhile(true){\n\t\t\t    int temp=new String(str).indexOf(\" \",index+1);\n\t\t\t    if(temp>=cur||temp==-1)break;\n\t\t\t    index=temp;\n\t\t\t    //System.out.println(index);\n\t\t\t}\n\t\t\tcur=index+1<=str.length()? index+1:str.length();\n\t\t    }  \n\t\t}\n\t\tif(\"insert\".equals(command1)){\n\t\t    //raplaceALL..\n\t\t    command2=new StringBuffer(command2).deleteCharAt(0).toString();\n\t\t    command2=new StringBuffer(command2).deleteCharAt(command2.length()-1).toString();\n\t\t    str.insert(cur,command2);\n\t\t    cur+=command2.length();\n\t\t}\t\t       \n\t\tif(\"delete\".equals(command1)){\n\t\t    if(\"char\".equals(command2)){\n\t\t\tif(cur!=str.length()){\n\t\t\t    str.deleteCharAt(cur);\n\t\t\t}\n\t\t    }\n\t\t    else{\n\t\t\twhile(true){\n\t\t\t    if(cur==str.length())break;\n\t\t\t    if(str.charAt(cur)!=' ')break;\n\t\t\t    str.deleteCharAt(cur);\n\t\t\t}\n\t\t\twhile(true){\n\t\t\t    if(cur==str.length())break;\n\t\t\t    if(str.charAt(cur)==' ')break;\n\t\t\t    str.deleteCharAt(cur);\n\t\t\t}\t\t\t\t\n\t\t    }\n\t\t}\n\t\n\t\t//print(str,cur);\n\t    }\n\t    print(str,cur);\n\t}\n\t\n    }\n    void print(StringBuffer str,int cur){\n\t    str.insert(cur,\"^\");\n\t    System.out.println(str);\n\t    str.deleteCharAt(cur);\n    }\n    public static void main(String[] args){\n\tnew Main().run();\n    }\n}"
  },
  {
    "language": "Java",
    "code": "package p1101;\nimport java.util.*;\n\nclass Main {\n\tScanner sc = new Scanner(System.in);\n\n\tpublic void run() {\n\t\tint Case=sc.nextInt();sc.nextLine();\n\t\twhile (Case--!=0){\n\t\t\tString str=sc.nextLine();\n\t\t\tint n=sc.nextInt();sc.nextLine();\n\t\t\tint cursor=0;\n\t\t\tfor(int i=0;i<n;i++){\n\t\t\t\tString op=sc.nextLine();\n\t\t\t\tif(\"forward word\".equals(op)){\n\t\t\t\t\tif(str.length()==cursor)continue;\n\t\t\t\t\tif(str.charAt(cursor)==' '){\n\t\t\t\t\t\twhile(cursor<str.length() && str.charAt(cursor)==' ')cursor++;\n\t\t\t\t\t}\n\t\t\t\t\twhile(cursor<str.length() && str.charAt(cursor)!=' ')cursor++;\n\t\t\t\t}else if(\"forward char\".equals(op)){\n\t\t\t\t\tcursor=Math.min(str.length(),cursor+1);\n\t\t\t\t}else if(\"backward word\".equals(op)){\n\t\t\t\t\tif(cursor==0)continue;\n\t\t\t\t\tif(str.charAt(cursor-1)==' '){\n\t\t\t\t\t\twhile(cursor>0  && str.charAt(cursor-1)==' ')cursor--;\n\t\t\t\t\t}\n\t\t\t\t\twhile(cursor>0  && str.charAt(cursor-1)!=' ')cursor--;\n\t\t\t\t}else if(\"backward char\".equals(op)){\n\t\t\t\t\tcursor=Math.max(0, cursor-1);\n\t\t\t\t}else if(\"delete char\".equals(op)){\n\t\t\t\t\tif(cursor==str.length())continue;\n\t\t\t\t\tstr=str.substring(0,cursor)+str.substring(cursor+1);\n\t\t\t\t}else if(\"delete word\".equals(op)){\n\t\t\t\t\tint e=cursor;\n\t\t\t\t\twhile(e<str.length() && str.charAt(e)==' ')e++;\n\t\t\t\t\tif(e==str.length())continue;\n\t\t\t\t\twhile(e<str.length() && str.charAt(e)!=' ')e++;\n\t\t\t\t\tstr=str.substring(0,cursor)+str.substring(e);\n\t\t\t\t}else if(op.startsWith(\"insert\")){\n\t\t\t\t\tint s=-1,e=-1;\n\t\t\t\t\tfor(int index=0;index<op.length();index++){\n\t\t\t\t\t\tif(op.charAt(index)=='\"'){\n\t\t\t\t\t\t\tif(s==-1)s=index;\n\t\t\t\t\t\t\telse e=index;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tString word=op.substring(s+1,e);\n\t\t\t\t\tstr=str.substring(0,cursor)+word+str.substring(cursor);\n\t\t\t\t\tcursor+=word.length();\n\t\t\t\t}\n\t\t\t}\n\t\t\tln(str.substring(0,cursor)+\"^\"+str.substring(cursor));\n\t\t}\n\t}\n\tpublic static void main(String[] args) {\n\t\tnew Main().run();\n\t}\n\tpublic static void pr(Object o) {\n\t\tSystem.out.print(o);\n\t}\n\tpublic static void ln(Object o) {\n\t\tSystem.out.println(o);\n\t}\n\tpublic static void ln() {\n\t\tSystem.out.println();\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Deque;\nimport java.util.HashMap;\nimport java.util.InputMismatchException;\nimport java.util.Map;\nimport java.util.PriorityQueue;\nimport java.math.BigInteger;\nimport java.math.BigDecimal;\n       \npublic class Main{\n   \nstatic final InputStream in=System.in;\nstatic final PrintWriter out=new PrintWriter(System.out);\nstatic final int INF=Integer.MAX_VALUE/2;\nstatic final long LINF=Long.MAX_VALUE/2;\nstatic int MAX=1000;\nstatic char[] str=new char[MAX+1];\n   \npublic static void main(String[] args) throws IOException{\n  BufferedReader br=new BufferedReader(new InputStreamReader(in));\n  int n=Integer.parseInt(br.readLine());\n  while(n-->0){\n    String line=br.readLine();\n    int cur=0;\n    Arrays.fill(str,'-');\n    for(int i=0;i<line.length();i++) str[i]=line.charAt(i);\n    int m=Integer.parseInt(br.readLine());\n    while(m-->0){\n      String com=br.readLine();\n      String com0=com.substring(0,com.indexOf(\" \"));\n      String com1=com.substring(com.indexOf(\" \")+1);\n      if(\"forward\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(str[cur]!='-') cur++;\n        }\n        else if(\"word\".equals(com1)){\n          while(str[cur]==' ') cur++;\n          while(str[cur]!=' '&&str[cur]!='-') cur++;\n        }\n      }\n      else if(\"backward\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(cur>0) cur--;\n        }\n        else if(\"word\".equals(com1)){\n          while(cur>0&&str[cur-1]==' ') cur--;\n          while(cur>0&&str[cur-1]!=' ') cur--;\n        }\n      }\n      else if(\"insert\".equals(com0)){\n        if(com1.length()>2){\n          String insertionStr=com1.substring(1,com1.length()-1);\n          for(int i=MAX-insertionStr.length();i>=cur;i--){\n            if(str[i]!='-') str[i+insertionStr.length()]=str[i];\n          }\n          for(int i=0;i<insertionStr.length();i++){\n            str[cur+i]=insertionStr.charAt(i);\n          }\n          cur+=insertionStr.length();\n        }\n      }\n      else if(\"delete\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(str[cur]!='-'){\n            for(int i=cur;;i++){\n              if(str[i]=='-') break;\n              str[i]=str[i+1];\n            }\n          }\n        }\n        else if(\"word\".equals(com1)){\n          int cnt=cur;\n          while(str[cnt]==' ') cnt++;\n          if(str[cnt]!='-'){\n            while(str[cnt]!=' '&&str[cnt]!='-') cnt++;\n            for(int i=cur;;i++){\n              if(str[i]=='-') break;\n              str[i]=str[i-cur+cnt];\n            }\n          }\n        }\n      }\n    }\n    StringBuilder sb=new StringBuilder();\n    for(int i=0;;i++){\n      if(i==cur) sb.append(\"^\");\n      if(str[i]=='-') break;\n      sb.append(String.valueOf(str[i]));\n    }\n    out.println(sb);\n  }\nout.flush();\n}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\n\npublic class Main{\n\t//0032 starting\n\t\n\tprivate void doit(){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint ds = Integer.parseInt(sc.nextLine());\n\t\twhile(ds-- > 0){\n\t\t\tStringBuilder s = new StringBuilder(sc.nextLine());\n\t\t\tint pos = 0;\n\t\t\tint q = Integer.parseInt(sc.nextLine());\n\t\t\twhile(q-- > 0){\n\t\t\t\tString com = sc.nextLine();\n\t\t\t\tString [] coms = com.split(\" \");\n\t\t\t\tswitch (coms[0].charAt(0)) {\n\t\t\t\tcase 'f':\n\t\t\t\t\tif(coms[1].charAt(0) == 'c'){\n\t\t\t\t\t\tpos++;\n\t\t\t\t\t\tif(pos > s.length()) pos--;\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tpos = findFW(s, pos);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'b':\n\t\t\t\t\tif(coms[1].charAt(0) == 'c'){\n\t\t\t\t\t\tpos--;\n\t\t\t\t\t\tif(pos < 0) pos = 0;\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tpos = findBW(s, pos);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'i':\n\t\t\t\t\tString temp = com.substring(7);\n\t\t\t\t\ts.insert(pos, temp.replaceAll(\"\\\"\", \"\"));\n\t\t\t\t\tpos += temp.length() - 2;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'd':\n\t\t\t\t\tif(coms[1].charAt(0) == 'c'){\n\t\t\t\t\t\tif(pos != s.length()){\n\t\t\t\t\t\t\ts.deleteCharAt(pos);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tint res = findFW(s, pos);\n\t\t\t\t\t\tif(res != s.length()){\n\t\t\t\t\t\t\ts.delete(pos, res);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t//print\n\t\t\ts.insert(pos, '^');\n\t\t\tSystem.out.println(s.toString());\n\t\t}\n\t}\n\n\tprivate int findFW(StringBuilder s, int pos) {\n\t\tif(s.length() == pos) return pos;\n\t\tint nowpos = pos;\n\t\tif(s.charAt(pos) == ' '){\n\t\t\tfor(int i = pos; i < s.length(); i++){\n\t\t\t\tif(s.charAt(i) != ' '){\n\t\t\t\t\tnowpos = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(nowpos == pos){\n\t\t\t\treturn s.length();\n\t\t\t}\n\t\t}\n\t\tfor(int i = nowpos; i < s.length(); i++){\n\t\t\tif(s.charAt(i) == ' '){\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn s.length();\n\t}\n\n\tprivate int findBW(StringBuilder s, int pos) {\n\t\tif(pos == 0) return pos;\n\t\tint nowpos = pos-1;\n\t\tif(s.charAt(nowpos) == ' '){\n\t\t\tfor(int i = nowpos; i >= 0; i--){\n\t\t\t\tif(s.charAt(i) != ' '){\n\t\t\t\t\tnowpos = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(nowpos == pos-1){\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t\tfor(int i =nowpos; i >= 0; i--){\n\t\t\tif(s.charAt(i) == ' '){\n\t\t\t\treturn i + 1;\n\t\t\t}\n\t\t}\n\t\treturn 0;\n\t}\n\n\tprivate void debug(Object... o) { System.out.println(\"debug = \" + Arrays.deepToString(o)); }\n\n\tpublic static void main(String[] args) {\n\t\tnew Main().doit();\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\nclass Main{\n    void run(){\n\tScanner sc=new Scanner(System.in);\n\tint M=sc.nextInt();\n\tsc.nextLine();\n\tfor(int attend=0;attend<M;attend++){\n\t    StringBuffer text=new StringBuffer(sc.nextLine());\n\t    int cur=0;\n\t    int n=sc.nextInt();\n\t    String command1;\n\t    String command2;\n\t    sc.nextLine();\n\t    for(int i=0;i<n;i++){\n\t\tString command=sc.nextLine();\n\t\t//System.out.println(command);\n\t\tfor(int j=0;;j++){\n\t\t    if(command.charAt(j)==' '){\n\t\t\tcommand1=command.substring(0,j);\n\t\t\tcommand2=command.substring(j+1);\n\t\t\tbreak;\n\t\t    }\n\t\t}\n\t\tif(\"forward\".equals(command1)){\n\t\t    if(\"char\".equals(command2)){\n\t\t\tcur=cur<text.length()? cur+1:cur;    \n\t\t    }\n\t\t    else{\n\t\t\tfor(;cur<text.length()&&text.charAt(cur)==' ';cur++);\n\t\t\tfor(;cur<text.length()&&text.charAt(cur)!=' ';cur++);\n\t\t    }\n\t\t}\n\t\tif(\"backward\".equals(command1)){\n\t\t    if(\"char\".equals(command2)){\n\t\t\tcur=cur>0? cur-1:cur;    \n\t\t    }\n\t\t    else{\n\t\t\tfor(;cur>0&&text.charAt(cur-1)==' ';cur--);\n\t\t\tfor(;cur>0&&text.charAt(cur-1)!=' ';cur--);\n\t\t    }  \n\t\t}\n\t\tif(\"insert\".equals(command1)){\n\t\t    text.insert(cur,command2.substring(1,command2.length()-1));\n\t\t    cur+=command2.length()-2;\n\t\t}\t\t       \n\t\tif(\"delete\".equals(command1)){\n\t\t    if(\"char\".equals(command2)){\n\t\t\tif(cur!=text.length()){\n\t\t\t    text.deleteCharAt(cur);\n\t\t\t}\n\t\t    }\n\t\t    else{\n\t\t\tint temp=cur;\n\t\t\tfor(;cur<text.length()&&text.charAt(cur)==' ';cur++);\n\t\t\tif(cur==text.length())break;\n\t\t\tfor(;cur<text.length()&&text.charAt(cur)!=' ';cur++);\n\t\t\ttext.delete(temp,cur);\n\t\t\tcur=temp;\n\t\t    }\n\t\t}\n\t\t//print(text,cur);\n\t    }\n\t    print(text,cur);\n\t}\n\t\n    }\n    void print(StringBuffer text,int cur){\n\t    text.insert(cur,\"^\");\n\t    System.out.println(text);\n\t    text.deleteCharAt(cur);\n    }\n    public static void main(String[] args){\n\tnew Main().run();\n    }\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.InputStream;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.InputMismatchException;\nimport java.util.NoSuchElementException;\nimport java.math.BigInteger;\n \npublic class Main{\n \nstatic PrintWriter out;\nstatic InputReader ir;\n \nstatic void solve(){\n int n=ir.nextInt();\n while(n-->0){\n   String s=ir.next();\n   int cur=0;\n   char[] str=new char[1501];\n   Arrays.fill(str,'-');\n   for(int i=0;i<s.length();i++) str[i]=s.charAt(i);\n   int m=ir.nextInt();\n   while(m-->0){\n     String com0=ir.next(),com1=ir.next();\n     if(\"forward\".equals(com0)){\n       if(\"char\".equals(com1)){\n         if(str[cur]!='-') cur++;\n       }\n       else if(\"word\".equals(com1)){\n         while(str[cur]==' ') cur++;\n         while(str[cur]!=' '&&str[cur]!='-') cur++;\n       }\n     }\n     else if(\"backward\".equals(com0)){\n       if(\"char\".equals(com1)){\n         if(cur>0) cur--;\n       }\n       else if(\"word\".equals(com1)){\n         while(cur>0&&str[cur-1]==' ') cur--;\n         while(cur>0&&str[cur-1]!=' ') cur--;\n       }\n     }\n     else if(\"insert\".equals(com0)){\n       if(com1.length()>2){\n         String insertionStr=com1.substring(1,com1.length()-1);\n         for(int i=MAX-insertionStr.length();i>=cur;i--){\n           if(str[i]!='-') str[i+insertionStr.length()]=str[i];\n         }\n         for(int i=0;i<insertionStr.length();i++){\n           str[cur+i]=insertionStr.charAt(i);\n         }\n         cur+=insertionStr.length();\n       }\n     }\n     else if(\"delete\".equals(com0)){\n       if(\"char\".equals(com1)){\n         if(str[cur]!='-'){\n           for(int i=cur;;i++){\n             if(str[i]=='-') break;\n             str[i]=str[i+1];\n           }\n         }\n       }\n       else if(\"word\".equals(com1)){\n         int cnt=cur;\n         while(str[cnt]==' ') cnt++;\n         if(str[cnt]!='-'){\n           while(str[cnt]!=' '&&str[cnt]!='-') cnt++;\n           for(int i=cur;;i++){\n             if(str[i]=='-') break;\n             str[i]=str[i-cur+cnt];\n           }\n         }\n       }\n     }\n   }\n   StringBuilder sb=new StringBuilder();\n   for(int i=0;;i++){\n     if(i==cur) sb.append(\"^\");\n     if(str[i]=='-') break;\n     sb.append(String.valueOf(str[i]));\n   }\n   out.println(sb);\n  }\n}\n \npublic static void main(String[] args) throws Exception{\n ir=new InputReader(System.in);\n out=new PrintWriter(System.out);\n solve();\n out.flush();\n}\n \nstatic class InputReader {\n private InputStream in;\n private byte[] buffer=new byte[1024];\n private int curbuf;\n private int lenbuf;\n \n public InputReader(InputStream in) {this.in=in; this.curbuf=this.lenbuf=0;}\n  \n public boolean hasNextByte() {\n  if(curbuf>=lenbuf){\n   curbuf= 0;\n   try{\n    lenbuf=in.read(buffer);\n   }catch(IOException e) {\n    throw new InputMismatchException();\n   }\n   if(lenbuf<=0) return false;\n  }\n  return true;\n }\n \n private int readByte(){if(hasNextByte()) return buffer[curbuf++]; else return -1;}\n  \n private boolean isSpaceChar(int c){return !(c>=33&&c<=126);}\n  \n private void skip(){while(hasNextByte()&&isSpaceChar(buffer[curbuf])) curbuf++;}\n  \n public boolean hasNext(){skip(); return hasNextByte();}\n  \n public String next(){\n  if(!hasNext()) throw new NoSuchElementException();\n  StringBuilder sb=new StringBuilder();\n  int b=readByte();\n  while(!isSpaceChar(b)){\n   sb.appendCodePoint(b);\n   b=readByte();\n  }\n  return sb.toString();\n }\n  \n public int nextInt() {\n  if(!hasNext()) throw new NoSuchElementException();\n  int c=readByte();\n  while (isSpaceChar(c)) c=readByte();\n  boolean minus=false;\n  if (c=='-') {\n   minus=true;\n   c=readByte();\n  }\n  int res=0;\n  do{\n   if(c<'0'||c>'9') throw new InputMismatchException();\n   res=res*10+c-'0';\n   c=readByte();\n  }while(!isSpaceChar(c));\n  return (minus)?-res:res;\n }\n  \n public long nextLong() {\n  if(!hasNext()) throw new NoSuchElementException();\n  int c=readByte();\n  while (isSpaceChar(c)) c=readByte();\n  boolean minus=false;\n  if (c=='-') {\n   minus=true;\n   c=readByte();\n  }\n  long res = 0;\n  do{\n   if(c<'0'||c>'9') throw new InputMismatchException();\n   res=res*10+c-'0';\n   c=readByte();\n  }while(!isSpaceChar(c));\n  return (minus)?-res:res;\n }\n \n public double nextDouble(){return Double.parseDouble(next());}\n \n public BigInteger nextBigInteger(){return new BigInteger(next());}\n \n public int[] nextIntArray(int n){\n  int[] a=new int[n];\n  for(int i=0;i<n;i++) a[i]=nextInt();\n  return a;\n }\n \n public long[] nextLongArray(int n){\n  long[] a=new long[n];\n  for(int i=0;i<n;i++) a[i]=nextLong();\n  return a;\n }\n \n public char[][] nextCharMap(int n,int m){\n  char[][] map=new char[n][m];\n  for(int i=0;i<n;i++) map[i]=next().toCharArray();\n  return map;\n }\n}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Deque;\nimport java.util.HashMap;\nimport java.util.InputMismatchException;\nimport java.util.Map;\nimport java.util.PriorityQueue;\nimport java.math.BigInteger;\nimport java.math.BigDecimal;\n      \npublic class Main{\n  \nstatic final InputStream in=System.in;\nstatic final PrintWriter out=new PrintWriter(System.out);\nstatic final int INF=Integer.MAX_VALUE/2;\nstatic final long LINF=Long.MAX_VALUE/2;\nstatic int MAX=100000;\nstatic char[] str=new char[MAX+1];\n  \npublic static void main(String[] args) throws IOException{\n  BufferedReader br=new BufferedReader(new InputStreamReader(in));\n  int n=Integer.parseInt(br.readLine());\n  while(n-->0){\n    String line=br.readLine();\n    int cur=0;\n    for(int i=0;i<=MAX;i++) str[i]='-';\n    for(int i=0;i<line.length();i++) str[i]=line.charAt(i);\n    int m=Integer.parseInt(br.readLine());\n    while(m-->0){\n      String[] com=br.readLine().split(\" \");\n      if(\"forward\".equals(com[0])){\n        if(\"char\".equals(com[1])&&str[cur]!='-') cur++;\n        else{\n          while(str[cur]==' ') cur++;\n          while(str[cur]!=' '&&str[cur]!='-') cur++;\n        }\n      }\n      else if(\"backward\".equals(com[0])){\n        if(\"char\".equals(com[1])&&cur!=0) cur--;\n        else{\n          while(cur!=0&&str[cur-1]==' ') cur--;\n          while(cur!=0&&str[cur-1]!=' ') cur--;\n        }\n      }\n      else if(\"insert\".equals(com[0])){\n        if(com[1].length()!=2){\n          String insertionStr=com[1].substring(1,com[1].length()-1);\n          for(int i=MAX-insertionStr.length();i>=cur;i--){\n            str[i+insertionStr.length()]=str[i];\n          }\n\n        }\n      }\n      else{\n        if(\"char\".equals(com[1])&&str[cur]!='-'){\n          for(int i=cur;i<=MAX;i++){\n            if(str[i]=='-') break;\n            str[i]=str[i+1];\n          }\n        }\n        else{\n          int cnt=cur;\n          boolean flag=false;\n          while(str[cnt]==' ') cnt++;\n          while(str[cnt]!=' '&&str[cnt]!='-'){\n            cnt++;\n            flag=true;\n          }\n          if(flag){\n            for(int i=cnt;i<=MAX;i++){\n            if(str[i-cnt+cur]=='-') break;\n              str[i-cnt+cur]=str[i];\n            }\n          }\n        }\n      }\n    }\n    for(int i=0;;i++){\n      if(i==cur) out.print(\"^\");\n      if(str[i]=='-') break;\n      out.print(str[i]);\n    }\n    out.println();\n  }\nout.flush();\n}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Deque;\nimport java.util.HashMap;\nimport java.util.InputMismatchException;\nimport java.util.Map;\nimport java.util.PriorityQueue;\nimport java.math.BigInteger;\nimport java.math.BigDecimal;\n      \npublic class Main{\n  \nstatic final InputStream in=System.in;\nstatic final PrintWriter out=new PrintWriter(System.out);\nstatic final int INF=Integer.MAX_VALUE/2;\nstatic final long LINF=Long.MAX_VALUE/2;\nstatic int MAX=100000;\nstatic char[] str=new char[MAX+1];\n  \npublic static void main(String[] args) throws IOException{\n  BufferedReader br=new BufferedReader(new InputStreamReader(in));\n  int n=Integer.parseInt(br.readLine());\n  while(n-->0){\n    String line=br.readLine();\n    int cur=0;\n    for(int i=0;i<=MAX;i++) str[i]='-';\n    for(int i=0;i<line.length();i++) str[i]=line.charAt(i);\n    int m=Integer.parseInt(br.readLine());\n    while(m-->0){\n      String[] com=br.readLine().split(\" \");\n      if(\"forward\".equals(com[0])){\n        if(\"char\".equals(com[1])&&str[cur]!='-') cur++;\n        else{\n          while(str[cur]==' ') cur++;\n          while(str[cur]!=' '&&str[cur]!='-') cur++;\n        }\n      }\n      else if(\"backward\".equals(com[0])){\n        if(\"char\".equals(com[1])&&cur!=0) cur--;\n        else{\n          while(cur!=0&&str[cur-1]==' ') cur--;\n          while(cur!=0&&str[cur-1]!=' ') cur--;\n        }\n      }\n      else if(\"insert\".equals(com[0])){\n        if(com[1].length()!=2){\n          String insertionStr=com[1].substring(1,com[1].length()-1);\n\n          for(int i=0;i<insertionStr.length();i++){\n            str[cur+i]=insertionStr.charAt(i);\n          }\n        }\n      }\n      else{\n        if(\"char\".equals(com[1])&&str[cur]!='-'){\n          for(int i=cur;i<=MAX;i++){\n            if(str[i]=='-') break;\n            str[i]=str[i+1];\n          }\n        }\n        else{\n          int cnt=cur;\n          boolean flag=false;\n          while(str[cnt]==' ') cnt++;\n          while(str[cnt]!=' '&&str[cnt]!='-'){\n            cnt++;\n            flag=true;\n          }\n          if(flag){\n            for(int i=cnt;i<=MAX;i++){\n            if(str[i-cnt+cur]=='-') break;\n              str[i-cnt+cur]=str[i];\n            }\n          }\n        }\n      }\n    }\n    for(int i=0;;i++){\n      if(i==cur) out.print(\"^\");\n      if(str[i]=='-') break;\n      out.print(str[i]);\n    }\n    out.println();\n  }\nout.flush();\n}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.InputStreamReader;\n\n/*\n\t0 <= cursor <= text.length()\n*/\n\n//public class Problem1101_ASimpleOfflineTextEditor {\npublic class Main {\n\t\n\tprivate String text;\n\tprivate int cursor;\n\t\n\tpublic static void main(String[] args) {\n\t\ttry {\n\t\t//\tProblem1101_ASimpleOfflineTextEditor test = new Problem1101_ASimpleOfflineTextEditor();\n\t\t\tMain test = new Main();\n\t\t\t\n\t\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n\t\t\t\n\t\t\tint caseCount = Integer.parseInt(reader.readLine());\n\t\t\tint caseNumber = 0;\n\t\t\tfor(int i = 0; i < caseCount; i++) {\n\t\t\t\t\n\t\t\t\ttest.initialize(reader.readLine());\n\t\t\t\tint editCount = Integer.parseInt(reader.readLine());\n\t\t\t\tfor(int j = 0; j < editCount; j++) {\n\t\t\t\t\ttest.doCommand(reader.readLine());\n\t\t\t\t}\n\t\t\t\ttest.showAnswer();\n\t\t\t}\n\t\t} catch(Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\tvoid initialize(String line) {\n\t\tsetText(line);\n\t\tcursor = 0;\n\t//\tSystem.out.println(\"ツ渉可甘コツ可サ:cursor:\" + cursor + \"\\t\" + text);\n\t}\n\tvoid doCommand(String command) {\n\t\tif(command.startsWith(\"forward c\")) {\n\t//\t\tSystem.out.println(\"ツコツマツδ督ド:\" + command);\n\t\t\tforwardChar();\n\t\t} else if(command.startsWith(\"forward w\")) {\n\t//\t\tSystem.out.println(\"ツコツマツδ督ド:\" + command);\n\t\t\tforwardWord();\n\t\t} else if(command.startsWith(\"backward c\")) {\n\t//\t\tSystem.out.println(\"ツコツマツδ督ド:\" + command);\n\t\t\tbackwardChar();\n\t\t} else if(command.startsWith(\"backward w\")) {\n\t//\t\tSystem.out.println(\"ツコツマツδ督ド:\" + command);\n\t\t\tbackwardWord();\n\t\t} else if(command.startsWith(\"insert\")) {\n\t//\t\tSystem.out.println(\"ツコツマツδ督ド:\" + command);\n\t\t\tinsert(command.substring(8, command.length()-1));\n\t\t} else if(command.startsWith(\"delete c\")) {\n\t//\t\tSystem.out.println(\"ツコツマツδ督ド:\" + command);\n\t\t\tdeleteChar();\n\t\t} else if(command.startsWith(\"delete w\")) {\n\t//\t\tSystem.out.println(\"ツコツマツδ督ド:\" + command);\n\t\t\tdeleteWord();\n\t\t} else {\n\t//\t\tSystem.out.println(\"**ツコツマツδ督ドツエツδ可ー:\" + command);\n\t\t}\n\t//\tSystem.out.println(\"text:\\t\" + text + \"\\tcursor: \" + cursor);\n\t//\tshowAnswer();\n\t}\n\tprivate void forwardChar() {\n\t\tif(cursor < text.length()) {\n\t//\t\tSystem.out.println(\"ツ北ツ北\");\n\t\t\tcursor++;\n\t\t}\n\t}\n\tprivate void forwardWord() {\n\t\tif(cursor == text.length() || text.length() == 0) {\n\t\t\treturn;\n\t\t}\n\t//\tcursor++;\n\t\twhile(text.charAt(cursor) == ' ') {\n\t\t\tcursor++;\n\t\t\tif(cursor == text.length()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tfor(int i = cursor; i < text.length(); i++) {\n\t\t\tchar targetChar = text.charAt(i);\n\t\t\tif(targetChar == ' ') {\n\t\t\t/*\twhile(text.charAt(i+1) == ' ') {\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t*/\t\n\t\t\t\tcursor = i;\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\t//do more\n\t\t\t}\n\t\t}\n\t\tcursor = text.length();\n\t}\n\tprivate void backwardChar() {\n\t\tif(0 < cursor) {\n\t\t\tcursor--;\n\t\t}\n\t}\n\tprivate void backwardWord() {\n\t\tif(cursor < 1) {\n\t\t\tcursor = 0;\n\t\t\treturn;\n\t\t}\n\t//\tcursor--;\n\t\twhile(text.charAt(cursor-1) == ' ') {\n\t\t\tcursor--;\n\t\t\tif(cursor == 0) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tfor(int i = cursor; i > 0; i--) {\t//ツ催渉可づ個閉カツ篠堋つェツ凝ウツ板陳つセツづつスツ湘ェツ債づ可妥篠可楪つキツづゥツつスツづ淞０ツづ慊づ確ツ認ツつキツづゥ\n\t\t\tchar targetChar = text.charAt(i-1);\n\t\t\tif(targetChar == ' ') {\n\t\t\t\tcursor = i;\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\t//do more\n\t\t\t}\n\t\t}\n\t\tcursor = 0;\n\t}\n\tprivate void insert(String txt) {\n\t\tStringBuilder builder = new StringBuilder(text.substring(0, cursor));\n\t\tbuilder.append(txt);\n\t\tbuilder.append(text.substring(cursor));\n\t\t\n\t\tsetText(builder.toString());\n\t\tcursor += txt.length();\n\t}\n\tprivate void deleteChar() {\n\t\tif(text.length() == cursor) {\t//cursor == text.length()-1 ツづ按づァツ催古」ツ氾カツづ可つ\n\t\t\treturn;\n\t\t} else if(cursor == text.length()-1) {\n\t\t\tsetText(text.substring(0,text.length()-1));\n\t\t\treturn;\n\t\t}\n\t\tStringBuilder builder = new StringBuilder(text.substring(0, cursor));\n\t\tbuilder.append(text.substring(cursor+1));\n\t\t\n\t\tsetText(builder.toString());\n\t}\n\tprivate void deleteWord() {\n\t\tif(text.length() == cursor) {\t//cursor == text.length() ÈçÅãöÉ éÌÅ½àµÈ¢B\n\t\t\treturn;\n\t\t} else if(cursor == text.length()-1) {\n\t\t\tsetText(text.substring(0,text.length()-1));\n\t\t\treturn;\n\t\t}\n\t\tint start = cursor;\n\t//\tmoveToEndOfWord();\n\t\tforwardWord();\n\t\t\n\t\tStringBuilder builder = new StringBuilder(text.substring(0, start));\n\t\tbuilder.append(text.substring(cursor));\n\t\t\n\t\tsetText(builder.toString());\n\t\tcursor = start;\n\t}\n\tprivate void moveToEndOfWord() {\n\t\tif(cursor == text.length()-1) {\n\t\t\treturn;\n\t\t}\n\t\twhile(text.charAt(cursor) == ' ') {\n\t\t\tcursor++;\n\t\t}\n\t\tfor(int i = cursor; i < text.length(); i++) {\n\t\t\tchar targetChar = text.charAt(i);\n\t\t\tif(targetChar == ' ') {\n\t\t\t\tcursor = i-1;\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\t//do more\n\t\t\t}\n\t\t}\n\t\tcursor = text.length()-1;\n\t}\n\tprivate void setText(String txt) {\n\t\ttext = txt;\n\t}\n\tvoid showAnswer() {\n\t//\tSystem.out.println(\"text:\\t\" + text + \"\\tcursor: \" + cursor);\n\t\t\n\t\tStringBuilder resultBuilder;\n\t\tif(cursor == text.length()) {\n\t\t\tresultBuilder = new StringBuilder(text);\n\t\t\tresultBuilder.append(\"^\");\n\t\t} else if(cursor == 0) {\n\t\t\tresultBuilder = new StringBuilder(\"^\");\n\t\t\tresultBuilder.append(text);\n\t\t} else {\n\t\t\tresultBuilder = new StringBuilder(text.substring(0, cursor));\n\t\t\tresultBuilder.append(\"^\");\n\t\t\tresultBuilder.append(text.substring(cursor));\n\t\t}\n\t\tSystem.out.println(resultBuilder.toString());\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Deque;\nimport java.util.HashMap;\nimport java.util.InputMismatchException;\nimport java.util.Map;\nimport java.util.PriorityQueue;\nimport java.util.StringTokenizer;\nimport java.math.BigInteger;\nimport java.math.BigDecimal;\n       \npublic class Main{\n   \nstatic final InputStream in=System.in;\nstatic final PrintWriter out=new PrintWriter(System.out);\nstatic final int INF=Integer.MAX_VALUE/2;\nstatic final long LINF=Long.MAX_VALUE/2;\nstatic int MAX=1000;\nstatic char[] str=new char[MAX+1];\n   \npublic static void main(String[] args) throws IOException{\n  BufferedReader br=new BufferedReader(new InputStreamReader(in));\n  out.println(\"??????\");\n  int n=Integer.parseInt(br.readLine());\n  while(n-->0){\n    String line=br.readLine();\n    int cur=0;\n    Arrays.fill(str,'-');\n    for(int i=0;i<line.length();i++) str[i]=line.charAt(i);\n    int m=Integer.parseInt(br.readLine());\n    while(m-->0){\n      String com=br.readLine();\n      String com0=com.split(\" \")[0];\n      String com1=com.split(\" \")[1];\n      if(\"forward\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(str[cur]!='-') cur++;\n        }\n        else if(\"word\".equals(com1)){\n          while(str[cur]==' ') cur++;\n          while(str[cur]!=' '&&str[cur]!='-') cur++;\n        }\n      }\n      else if(\"backward\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(cur>0) cur--;\n        }\n        else if(\"word\".equals(com1)){\n          while(cur>0&&str[cur-1]==' ') cur--;\n          while(cur>0&&str[cur-1]!=' ') cur--;\n        }\n      }\n      else if(\"insert\".equals(com0)){\n        String insertionStr=com.substring(9,com.length()-1);\n        for(int i=MAX-insertionStr.length();i>=cur;i--){\n          if(str[i]!='-') str[i+insertionStr.length()]=str[i];\n        }\n        for(int i=0;i<insertionStr.length();i++){\n          str[cur+i]=insertionStr.charAt(i);\n        }\n        cur+=insertionStr.length();\n      }\n      else if(\"delete\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(str[cur]!='-'){\n            for(int i=cur;;i++){\n              if(str[i]=='-') break;\n              str[i]=str[i+1];\n            }\n          }\n        }\n        else if(\"word\".equals(com1)){\n          int cnt=cur;\n          while(str[cnt]==' ') cnt++;\n          if(str[cnt]!='-'){\n            while(str[cnt]!=' '&&str[cnt]!='-') cnt++;\n            for(int i=cur;;i++){\n              if(str[i]=='-') break;\n              str[i]=str[i-cur+cnt];\n            }\n          }\n        }\n      }\n    }\n    StringBuilder sb=new StringBuilder();\n    for(int i=0;;i++){\n      if(i==cur) sb.append(\"^\");\n      if(str[i]=='-') break;\n      sb.append(String.valueOf(str[i]));\n    }\n    out.println(sb);\n    out.flush();\n  }\n}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Deque;\nimport java.util.HashMap;\nimport java.util.InputMismatchException;\nimport java.util.Map;\nimport java.util.PriorityQueue;\nimport java.math.BigInteger;\nimport java.math.BigDecimal;\n      \npublic class Main{\n  \nstatic final InputStream in=System.in;\nstatic final PrintWriter out=new PrintWriter(System.out);\nstatic final int INF=Integer.MAX_VALUE/2;\nstatic final long LINF=Long.MAX_VALUE/2;\nstatic int MAX=100000;\nstatic char[] str=new char[MAX+1];\n  \npublic static void main(String[] args) throws IOException{\n  BufferedReader br=new BufferedReader(new InputStreamReader(in));\n  int n=Integer.parseInt(br.readLine());\n  while(n-->0){\n    String line=br.readLine();\n    int cur=0;\n    for(int i=0;i<=MAX;i++) str[i]='-';\n    for(int i=0;i<line.length();i++) str[i]=line.charAt(i);\n    int m=Integer.parseInt(br.readLine());\n    while(m-->0){\n      String[] com=br.readLine().split(\" \");\n      if(\"forward\".equals(com[0])){\n        if(\"char\".equals(com[1])&&str[cur]!='-') cur++;\n        else{\n          while(str[cur]==' ') cur++;\n          while(str[cur]!=' '&&str[cur]!='-') cur++;\n        }\n      }\n      else if(\"backward\".equals(com[0])){\n        if(\"char\".equals(com[1])&&cur!=0) cur--;\n        else{\n          while(cur!=0&&str[cur-1]==' ') cur--;\n          while(cur!=0&&str[cur-1]!=' ') cur--;\n        }\n      }\n      else if(\"insert\".equals(com[0])){\n        if(com[1].length()>2){\n          String insertionStr=com[1].substring(1,(com[1].length()-1));\n          for(int i=MAX-insertionStr.length();i>=cur;i--){\n            str[i+insertionStr.length()]=str[i];\n          }\n          for(int i=0;i<insertionStr.length();i++){\n            str[cur+i]=insertionStr.charAt(i);\n          }\n        }\n      }\n      else{\n        if(\"char\".equals(com[1])&&str[cur]!='-'){\n          for(int i=cur;i<=MAX;i++){\n            if(str[i]=='-') break;\n            str[i]=str[i+1];\n          }\n        }\n        else{\n          int cnt=cur;\n          boolean flag=false;\n          while(str[cnt]==' ') cnt++;\n          while(str[cnt]!=' '&&str[cnt]!='-'){\n            cnt++;\n            flag=true;\n          }\n          if(flag){\n            for(int i=cnt;i<=MAX;i++){\n            if(str[i-cnt+cur]=='-') break;\n              str[i-cnt+cur]=str[i];\n            }\n          }\n        }\n      }\n    }\n    for(int i=0;;i++){\n      if(i==cur) out.print(\"^\");\n      if(str[i]=='-') break;\n      out.print(str[i]);\n    }\n    out.println();\n  }\nout.flush();\n}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Deque;\nimport java.util.HashMap;\nimport java.util.InputMismatchException;\nimport java.util.Map;\nimport java.util.PriorityQueue;\nimport java.math.BigInteger;\nimport java.math.BigDecimal;\n       \npublic class Main{\n   \nstatic final InputStream in=System.in;\nstatic final PrintWriter out=new PrintWriter(System.out);\nstatic final int INF=Integer.MAX_VALUE/2;\nstatic final long LINF=Long.MAX_VALUE/2;\nstatic int MAX=1000;\nstatic char[] str=new char[MAX+1];\n   \npublic static void main(String[] args) throws IOException{\n  BufferedReader br=new BufferedReader(new InputStreamReader(in));\n  int n=Integer.parseInt(br.readLine());\n  while(n-->0){\n    String line=br.readLine();\n    int cur=0;\n    Arrays.fill(str,'-');\n    for(int i=0;i<line.length();i++) str[i]=line.charAt(i);\n    int m=Integer.parseInt(br.readLine());\n    while(m-->0){\n      String com=br.readLine(),com0,com1;\n      for(int i=0;;i++){\n        if(com.charAt(i)==' '){\n          com0=com.substring(0,i);\n          com1=com.substring(i+1);\n          break;\n        }\n      }\n      if(\"forward\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(str[cur]!='-') cur++;\n        }\n        else if(\"word\".equals(com1)){\n          while(str[cur]==' ') cur++;\n          while(str[cur]!=' '&&str[cur]!='-') cur++;\n        }\n      }\n      else if(\"backward\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(cur>0) cur--;\n        }\n        else if(\"word\".equals(com1)){\n          while(cur>0&&str[cur-1]==' ') cur--;\n          while(cur>0&&str[cur-1]!=' ') cur--;\n        }\n      }\n      else if(\"insert\".equals(com0)){\n        if(com1.length()>2){\n          String insertionStr=com1.substring(1,com1.length()-1);\n          for(int i=MAX-insertionStr.length();i>=cur;i--){\n            if(str[i]!='-') str[i+insertionStr.length()]=str[i];\n          }\n          for(int i=0;i<insertionStr.length();i++){\n            str[cur+i]=insertionStr.charAt(i);\n          }\n          cur+=insertionStr.length();\n        }\n      }\n      else if(\"delete\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(str[cur]!='-'){\n            for(int i=cur;;i++){\n              if(str[i]=='-') break;\n              str[i]=str[i+1];\n            }\n          }\n        }\n        else if(\"word\".equals(com1)){\n          int cnt=cur;\n          while(str[cnt]==' ') cnt++;\n          if(str[cnt]!='-'){\n            while(str[cnt]!=' '&&str[cnt]!='-') cnt++;\n            for(int i=cur;;i++){\n              if(str[i]=='-') break;\n              str[i]=str[i-cur+cnt];\n            }\n          }\n        }\n      }\n    }\n    StringBuilder sb=new StringBuilder();\n    for(int i=0;;i++){\n      if(i==cur) sb.append(\"^\");\n      if(str[i]=='-') break;\n      sb.append(String.valueOf(str[i]));\n    }\n    out.println(sb);\n  }\nout.flush();\n}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Deque;\nimport java.util.HashMap;\nimport java.util.InputMismatchException;\nimport java.util.Map;\nimport java.util.PriorityQueue;\nimport java.math.BigInteger;\nimport java.math.BigDecimal;\n       \npublic class Main{\n   \nstatic final InputStream in=System.in;\nstatic final PrintWriter out=new PrintWriter(System.out);\nstatic final int INF=Integer.MAX_VALUE/2;\nstatic final long LINF=Long.MAX_VALUE/2;\nstatic int MAX=1200;\nstatic char[] str=new char[MAX+1];\n   \npublic static void main(String[] args) throws IOException{\n  BufferedReader br=new BufferedReader(new InputStreamReader(in));\n  int n=Integer.parseInt(br.readLine());\n  while(n-->0){\n    String line=br.readLine();\n    int cur=0;\n    Arrays.fill(str,'-');\n    for(int i=0;i<line.length();i++) str[i]=line.charAt(i);\n    int m=Integer.parseInt(br.readLine());\n    while(m-->0){\n      String com=br.readLine();\n      String com0=com.substring(0,com.indexOf(\" \"));\n      String com1=com.substring(com.indexOf(\" \")+1);\n      if(\"forward\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(str[cur]!='-') cur++;\n        }\n        else if(\"word\".equals(com1)){\n          while(str[cur]==' ') cur++;\n          while(str[cur]!=' '&&str[cur]!='-') cur++;\n        }\n      }\n      else if(\"backward\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(cur>0) cur--;\n        }\n        else if(\"word\".equals(com1)){\n          while(cur>0&&str[cur-1]==' ') cur--;\n          while(cur>0&&str[cur-1]!=' ') cur--;\n        }\n      }\n      else if(\"insert\".equals(com0)){\n        if(com1.length()>2){\n          String insertionStr=com1.substring(1,com1.length()-1);\n          for(int i=MAX-insertionStr.length();i>=cur;i--){\n            if(str[i]!='-') str[i+insertionStr.length()]=str[i];\n          }\n          for(int i=0;i<insertionStr.length();i++){\n            str[cur+i]=insertionStr.charAt(i);\n          }\n          cur+=insertionStr.length();\n        }\n      }\n      else if(\"delete\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(str[cur]!='-'){\n            for(int i=cur;;i++){\n              if(str[i]=='-') break;\n              str[i]=str[i+1];\n            }\n          }\n        }\n        else if(\"word\".equals(com1)){\n          int cnt=cur;\n          while(str[cnt]==' ') cnt++;\n          if(str[cnt]!='-'){\n            while(str[cnt]!=' '&&str[cnt]!='-') cnt++;\n            for(int i=cur;;i++){\n              if(str[i]=='-') break;\n              str[i]=str[i-cur+cnt];\n            }\n          }\n        }\n      }\n    }\n    StringBuilder sb=new StringBuilder();\n    for(int i=0;;i++){\n      if(i==cur) sb.append(\"^\");\n      if(str[i]=='-') break;\n      sb.append(String.valueOf(str[i]));\n    }\n    out.println(sb);\n  }\nout.flush();\n}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Deque;\nimport java.util.HashMap;\nimport java.util.InputMismatchException;\nimport java.util.Map;\nimport java.util.PriorityQueue;\nimport java.math.BigInteger;\nimport java.math.BigDecimal;\n      \npublic class Main{\n  \nstatic final InputStream in=System.in;\nstatic final PrintWriter out=new PrintWriter(System.out);\nstatic final int INF=Integer.MAX_VALUE/2;\nstatic final long LINF=Long.MAX_VALUE/2;\nstatic int MAX=10000;\nstatic char[] str=new char[MAX+1];\n  \npublic static void main(String[] args) throws IOException{\n  BufferedReader br=new BufferedReader(new InputStreamReader(in));\n  int n=Integer.parseInt(br.readLine());\n  while(n-->0){\n    String line=br.readLine();\n    int cur=0;\n    for(int i=0;i<=MAX;i++) str[i]='-';\n    for(int i=0;i<line.length();i++) str[i]=line.charAt(i);\n    int m=Integer.parseInt(br.readLine());\n    while(m-->0){\n      String[] com=br.readLine().split(\" \");\n      String com0=com[0];\n      String com1=com[1];\n      if(\"forward\".equals(com0)){\n        if(\"char\".equals(com1)&&str[cur]!='-') cur++;\n        else{\n          while(str[cur]==' ') cur++;\n          while(str[cur]!=' '&&str[cur]!='-') cur++;\n        }\n      }\n      else if(\"backward\".equals(com0)){\n        if(\"char\".equals(com1)&&cur!=0) cur--;\n        else{\n          while(cur!=0&&str[cur-1]==' ') cur--;\n          while(cur!=0&&str[cur-1]!=' ') cur--;\n        }\n      }\n      else if(\"insert\".equals(com0)){\n        if(com1.length()>2){\n          String insertionStr=com[1].substring(1,com1.length()-1);\n          for(int i=MAX-insertionStr.length();i>=cur;i--){\n            str[i+insertionStr.length()]=str[i];\n          }\n          for(int i=0;i<insertionStr.length();i++){\n            str[cur+i]=insertionStr.charAt(i);\n          }\n          cur+=insertionStr.length();\n        }\n      }\n      else{\n        if(\"char\".equals(com1)&&str[cur]!='-'){\n          for(int i=cur;i<=MAX;i++){\n            if(str[i]=='-') break;\n            str[i]=str[i+1];\n          }\n        }\n        else{\n          int cnt=cur;\n          while(str[cnt]==' ') cnt++;\n          if(str[cnt]!='-'){\n            while(str[cnt]!=' '&&str[cnt]!='-') cnt++;\n            for(int i=cnt;i<=MAX;i++){\n              if(str[i-cnt+cur]=='-') break;\n              str[i-cnt+cur]=str[i];\n            }\n          }\n        }\n      }\n    }\n    for(int i=0;;i++){\n      if(i==cur) out.print(\"^\");\n      if(str[i]=='-') break;\n      out.print(String.valueOf(str[i]));\n    }\n    out.println();\n  }\nout.flush();\n}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Deque;\nimport java.util.HashMap;\nimport java.util.InputMismatchException;\nimport java.util.Map;\nimport java.util.PriorityQueue;\nimport java.math.BigInteger;\nimport java.math.BigDecimal;\n      \npublic class Main{\n  \nstatic final InputStream in=System.in;\nstatic final PrintWriter out=new PrintWriter(System.out);\nstatic final int INF=Integer.MAX_VALUE/2;\nstatic final long LINF=Long.MAX_VALUE/2;\nstatic int MAX=100000;\nstatic char[] str=new char[MAX+1];\n  \npublic static void main(String[] args) throws IOException{\n  BufferedReader br=new BufferedReader(new InputStreamReader(in));\n  int n=Integer.parseInt(br.readLine());\n  while(n-->0){\n    String line=br.readLine();\n    int cur=0;\n    for(int i=0;i<=MAX;i++) str[i]='-';\n    for(int i=0;i<line.length();i++) str[i]=line.charAt(i);\n    int m=Integer.parseInt(br.readLine());\n    while(m-->0){\n      String[] com=br.readLine().split(\" \");\n      if(\"forward\".equals(com[0])){\n        if(\"char\".equals(com[1])&&str[cur]!='-') cur++;\n        else{\n          while(str[cur]==' ') cur++;\n          while(str[cur]!=' '&&str[cur]!='-') cur++;\n        }\n      }\n      else if(\"backward\".equals(com[0])){\n        if(\"char\".equals(com[1])&&cur!=0) cur--;\n        else{\n          while(cur!=0&&str[cur-1]==' ') cur--;\n          while(cur!=0&&str[cur-1]!=' ') cur--;\n        }\n      }\n      else if(\"insert\".equals(com[0])){\n        if(com[1].length()!=2){\n          String insertionStr=com[1].substring(1,com[1].length()-1);\n          for(int i=MAX-insertionStr.length();i>=cur;i--){\n            str[i+insertionStr.length()]=str[i];\n          }\n          for(int i=0;i<insertionStr.length();i++){\n            str[cur+i]=insertionStr.charAt(i);\n          }\n        }\n      }\n      \n    }\n    for(int i=0;;i++){\n      if(i==cur) out.print(\"^\");\n      if(str[i]=='-') break;\n      out.print(str[i]);\n    }\n    out.println();\n  }\nout.flush();\n}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\n\nclass Main {\n\tScanner sc = new Scanner(System.in);\n\n\tpublic void run() {\n\t\tint Case=sc.nextInt();sc.nextLine();\n\t\twhile (Case--!=0){\n\t\t\tString str=sc.nextLine();\n\t\t\tint n=sc.nextInt();sc.nextLine();\n\t\t\tint cursor=0;\n\t\t\tfor(int i=0;i<n;i++){\n\t\t\t\tString op=sc.nextLine();\n\t\t\t\tif(\"forward word\".equals(op)){\n\t\t\t\t\tboolean through=false;\n\t\t\t\t\twhile(!through || cursor<str.length() && str.charAt(cursor)!=' '){\n\t\t\t\t\t\tcursor++;\n\t\t\t\t\t\tthrough=true;\n\t\t\t\t\t}\n\t\t\t\t\tif(cursor<str.length())cursor++;\n\t\t\t\t}else if(\"forward char\".equals(op)){\n\t\t\t\t\tif(cursor<str.length()-1)cursor++;\n\t\t\t\t}else if(\"backward word\".equals(op)){\n\t\t\t\t\tboolean through=false;\n\t\t\t\t\twhile(!through ||  cursor>0 && str.charAt(cursor)!=' '){\n\t\t\t\t\t\tcursor--;\n\t\t\t\t\t\tthrough=true;\n\t\t\t\t\t}\n\t\t\t\t\tif(cursor>0)cursor--;\n\t\t\t\t\tif(cursor<0)cursor=0;\n\t\t\t\t}else if(\"backward char\".equals(op)){\n\t\t\t\t\tif(cursor>0)cursor--;\n\t\t\t\t}else if(\"delete char\".equals(op)){\n\t\t\t\t\tif(1<=cursor && cursor <str.length())str=str.substring(0,cursor-1)+str.substring(cursor);\n\t\t\t\t}else if(\"delete word\".equals(op)){\n\t\t\t\t\tif(cursor>str.length())continue;\n\t\t\t\t\tint e=cursor;\n\t\t\t\t\twhile(str.length()>e && str.length()>0 && str.charAt(e)!=' ')e++;\n\t\t\t\t\tstr=str.substring(0,cursor)+str.substring(e);\n\t\t\t\t}else if(op.startsWith(\"insert\")){\n\t\t\t\t\tint s=-1,e=-1;\n\t\t\t\t\tfor(int index=0;index<op.length();index++){\n\t\t\t\t\t\tif(op.charAt(index)=='\"'){\n\t\t\t\t\t\t\tif(s==-1)s=index;\n\t\t\t\t\t\t\telse e=index;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tString word=op.substring(s+1,e);\n\t\t\t\t\tstr=str.substring(0,cursor)+word+str.substring(cursor);\n\t\t\t\t\tcursor+=word.length();\n\t\t\t\t}\n\t\t\t}\n\t\t\tln(str.substring(0,cursor)+\"^\"+str.substring(cursor));\n\t\t}\n\t}\n\tpublic static void main(String[] args) {\n\t\tnew Main().run();\n\t}\n\tpublic static void pr(Object o) {\n\t\tSystem.out.print(o);\n\t}\n\tpublic static void ln(Object o) {\n\t\tSystem.out.println(o);\n\t}\n\tpublic static void ln() {\n\t\tSystem.out.println();\n\t}\n}\n\n\nclass P {\n\tdouble x, y;\n\tpublic static final double EPS = 1e-10;\n\n\tP(double _x, double _y) {\n\t\tx = _x;\n\t\ty = _y;\n\t}\n\n\tpublic static final P Xunit = new P(1, 0);\n\tpublic static final P Yunit = new P(0, 1);\n\tpublic static final P O = new P(0, 0);\n\tpublic static double cross(P a, P b) {\n\t\treturn a.x * b.y - a.y * b.x;\n\t}\n\tpublic P s(P a) {\n\t\treturn new P(x - a.x, y - a.y);\n\t}\n\tpublic static double getS(List<P> plist) {\n\t\tP o1 = plist.get(0);\n\t\tP prev = plist.get(1);\n\t\tdouble S = 0;\n\t\tfor (P p : plist.subList(2, plist.size())) {\n\t\t\tS += getS(o1, prev, p);\n\t\t\tprev = p;\n\t\t}\n\t\treturn S;\n\t}\n\t// 負値がかえることもあるので注意。\n\tpublic static double getS(P o, P a, P b) {\n\t\treturn cross(a.s(o), b.s(o)) / 2;\n\t}\n\n\t@Override\n\tpublic boolean equals(Object obj) {\n\t\tif (obj instanceof P) {\n\t\t\tP p = (P) obj;\n\t\t\treturn x == p.x && y == p.y;\n\t\t}\n\t\treturn false;\n\t}\n\tpublic String toString() {\n\t\treturn \"(\" + x + \",\" + y + \")\";\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Deque;\nimport java.util.HashMap;\nimport java.util.InputMismatchException;\nimport java.util.Map;\nimport java.util.PriorityQueue;\nimport java.math.BigInteger;\nimport java.math.BigDecimal;\n      \npublic class Main{\n  \nstatic final InputStream in=System.in;\nstatic final PrintWriter out=new PrintWriter(System.out);\nstatic final int INF=Integer.MAX_VALUE/2;\nstatic final long LINF=Long.MAX_VALUE/2;\nstatic int MAX=100000;\nstatic char[] str=new char[MAX+1];\n  \npublic static void main(String[] args) throws IOException{\n  BufferedReader br=new BufferedReader(new InputStreamReader(in));\n  int n=Integer.parseInt(br.readLine());\n  while(n-->0){\n    String line=br.readLine();\n    int cur=0;\n    for(int i=0;i<=MAX;i++) str[i]='-';\n    for(int i=0;i<line.length();i++) str[i]=line.charAt(i);\n    int m=Integer.parseInt(br.readLine());\n    while(m-->0){\n      String[] com=br.readLine().split(\" \");\n      if(\"forward\".equals(com[0])){\n        if(\"char\".equals(com[1])&&str[cur]!='-') cur++;\n        else{\n          while(str[cur]==' ') cur++;\n          while(str[cur]!=' '&&str[cur]!='-') cur++;\n        }\n      }\n      else if(\"backward\".equals(com[0])){\n        if(\"char\".equals(com[1])&&cur!=0) cur--;\n        else{\n          while(cur!=0&&str[cur-1]==' ') cur--;\n          while(cur!=0&&str[cur-1]!=' ') cur--;\n        }\n      }\n      else if(\"insert\".equals(com[0])){\n        if(com[1].length()>2){\n          String insertionStr=\"                              \";\n          for(int i=MAX-insertionStr.length();i>=cur;i--){\n            str[i+insertionStr.length()]=str[i];\n          }\n          for(int i=0;i<insertionStr.length();i++){\n            str[cur+i]=insertionStr.charAt(i);\n          }\n        }\n      }\n      else{\n        if(\"char\".equals(com[1])&&str[cur]!='-'){\n          for(int i=cur;i<=MAX;i++){\n            if(str[i]=='-') break;\n            str[i]=str[i+1];\n          }\n        }\n        else{\n          int cnt=cur;\n          boolean flag=false;\n          while(str[cnt]==' ') cnt++;\n          while(str[cnt]!=' '&&str[cnt]!='-'){\n            cnt++;\n            flag=true;\n          }\n          if(flag){\n            for(int i=cnt;i<=MAX;i++){\n            if(str[i-cnt+cur]=='-') break;\n              str[i-cnt+cur]=str[i];\n            }\n          }\n        }\n      }\n    }\n    for(int i=0;;i++){\n      if(i==cur) out.print(\"^\");\n      if(str[i]=='-') break;\n      out.print(str[i]);\n    }\n    out.println();\n  }\nout.flush();\n}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Deque;\nimport java.util.HashMap;\nimport java.util.InputMismatchException;\nimport java.util.Map;\nimport java.util.PriorityQueue;\nimport java.util.StringTokenizer;\nimport java.math.BigInteger;\nimport java.math.BigDecimal;\n       \npublic class Main{\n   \nstatic final InputStream in=System.in;\nstatic final PrintWriter out=new PrintWriter(System.out);\nstatic final int INF=Integer.MAX_VALUE/2;\nstatic final long LINF=Long.MAX_VALUE/2;\nstatic int MAX=1500;\nstatic char[] str=new char[MAX+1];\n   \npublic static void main(String[] args) throws IOException{\n  BufferedReader br=new BufferedReader(new InputStreamReader(in));\n  out.println(\"??????\");\n  int n=Integer.parseInt(br.readLine());\n  while(n-->0){\n    String line=br.readLine();\n    int cur=0;\n    Arrays.fill(str,'-');\n    for(int i=0;i<line.length();i++) str[i]=line.charAt(i);\n    int m=Integer.parseInt(br.readLine());\n    while(m-->0){\n      String com0=line.split(\" \")[0];\n      String com1=line.split(\" \")[1];\n      if(\"forward\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(str[cur]!='-') cur++;\n        }\n        else if(\"word\".equals(com1)){\n          while(str[cur]==' ') cur++;\n          while(str[cur]!=' '&&str[cur]!='-') cur++;\n        }\n      }\n      else if(\"backward\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(cur>0) cur--;\n        }\n        else if(\"word\".equals(com1)){\n          while(cur>0&&str[cur-1]==' ') cur--;\n          while(cur>0&&str[cur-1]!=' ') cur--;\n        }\n      }\n      else if(\"insert\".equals(com0)){\n        String insertionStr=line.substring(8,line.length()-1);\n        for(int i=MAX-insertionStr.length();i>=cur;i--){\n          if(str[i]!='-') str[i+insertionStr.length()]=str[i];\n        }\n        for(int i=0;i<insertionStr.length();i++){\n          str[cur+i]=insertionStr.charAt(i);\n        }\n        cur+=insertionStr.length();\n      }\n      else if(\"delete\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(str[cur]!='-'){\n            for(int i=cur;;i++){\n              if(str[i]=='-') break;\n              str[i]=str[i+1];\n            }\n          }\n        }\n        else if(\"word\".equals(com1)){\n          int cnt=cur;\n          while(str[cnt]==' ') cnt++;\n          if(str[cnt]!='-'){\n            while(str[cnt]!=' '&&str[cnt]!='-') cnt++;\n            for(int i=cur;;i++){\n              if(str[i]=='-') break;\n              str[i]=str[i-cur+cnt];\n            }\n          }\n        }\n      }\n    }\n    StringBuilder sb=new StringBuilder();\n    for(int i=0;;i++){\n      if(i==cur) sb.append(\"^\");\n      if(str[i]=='-') break;\n      sb.append(String.valueOf(str[i]));\n    }\n    out.println(sb);\n    out.flush();\n  }\n}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Deque;\nimport java.util.HashMap;\nimport java.util.InputMismatchException;\nimport java.util.Map;\nimport java.util.PriorityQueue;\nimport java.util.StringTokenizer;\nimport java.math.BigInteger;\nimport java.math.BigDecimal;\n       \npublic class Main{\n   \nstatic final InputStream in=System.in;\nstatic final PrintWriter out=new PrintWriter(System.out);\nstatic final int INF=Integer.MAX_VALUE/2;\nstatic final long LINF=Long.MAX_VALUE/2;\nstatic int MAX=1000;\nstatic char[] str=new char[MAX+1];\n   \npublic static void main(String[] args) throws IOException{\n  BufferedReader br=new BufferedReader(new InputStreamReader(in));\n  int n=Integer.parseInt(br.readLine());\n  while(n-->0){\n    String line=br.readLine();\n    int cur=0;\n    Arrays.fill(str,'-');\n    for(int i=0;i<line.length();i++) str[i]=line.charAt(i);\n    int m=Integer.parseInt(br.readLine());\n    while(m-->0){\n      String com=br.readLine();\n      String com0=com.split(\" \")[0];\n      String com1=com.split(\" \")[1];\n      if(\"forward\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(str[cur]!='-') cur++;\n        }\n        else if(\"word\".equals(com1)){\n          while(str[cur]==' ') cur++;\n          while(str[cur]!=' '&&str[cur]!='-') cur++;\n        }\n      }\n      else if(\"backward\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(cur>0) cur--;\n        }\n        else if(\"word\".equals(com1)){\n          while(cur>0&&str[cur-1]==' ') cur--;\n          while(cur>0&&str[cur-1]!=' ') cur--;\n        }\n      }\n      else if(\"insert\".equals(com0)){\n        String insertionStr=\"=com.substring(8,(com.length()-1));\n        for(int i=MAX-insertionStr.length();i>=cur;i--){\n          if(str[i]!='-') str[i+insertionStr.length()]=str[i];\n        }\n        for(int i=0;i<insertionStr.length();i++){\n          str[cur+i]=insertionStr.charAt(i);\n        }\n        cur+=insertionStr.length();\n      }\n      else if(\"delete\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(str[cur]!='-'){\n            for(int i=cur;;i++){\n              if(str[i]=='-') break;\n              str[i]=str[i+1];\n            }\n          }\n        }\n        else if(\"word\".equals(com1)){\n          int cnt=cur;\n          while(str[cnt]==' ') cnt++;\n          if(str[cnt]!='-'){\n            while(str[cnt]!=' '&&str[cnt]!='-') cnt++;\n            for(int i=cur;;i++){\n              if(str[i]=='-') break;\n              str[i]=str[i-cur+cnt];\n            }\n          }\n        }\n      }\n    }\n    StringBuilder sb=new StringBuilder();\n    for(int i=0;;i++){\n      if(i==cur) sb.append(\"^\");\n      if(str[i]=='-') break;\n      sb.append(String.valueOf(str[i]));\n    }\n    out.println(sb);\n    out.flush();\n  }\n}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Deque;\nimport java.util.HashMap;\nimport java.util.InputMismatchException;\nimport java.util.Map;\nimport java.util.PriorityQueue;\nimport java.util.StringTokenizer;\nimport java.math.BigInteger;\nimport java.math.BigDecimal;\n       \npublic class Main{\n   \nstatic final InputStream in=System.in;\nstatic final PrintWriter out=new PrintWriter(System.out);\nstatic final int INF=Integer.MAX_VALUE/2;\nstatic final long LINF=Long.MAX_VALUE/2;\nstatic int MAX=1000;\nstatic char[] str=new char[MAX+1];\n   \npublic static void main(String[] args) throws IOException{\n  BufferedReader br=new BufferedReader(new InputStreamReader(in));\n  int n=Integer.parseInt(br.readLine());\n  while(n-->0){\n    String line=br.readLine();\n    int cur=0;\n    Arrays.fill(str,'-');\n    for(int i=0;i<line.length();i++) str[i]=line.charAt(i);\n    int m=Integer.parseInt(br.readLine());\n    while(m-->0){\n      String com=br.readLine();\n      String com0=com.split(\" \")[0];\n      String com1=com.split(\" \")[1];\n      if(\"forward\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(str[cur]!='-') cur++;\n        }\n        else if(\"word\".equals(com1)){\n          while(str[cur]==' ') cur++;\n          while(str[cur]!=' '&&str[cur]!='-') cur++;\n        }\n      }\n      else if(\"backward\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(cur>0) cur--;\n        }\n        else if(\"word\".equals(com1)){\n          while(cur>0&&str[cur-1]==' ') cur--;\n          while(cur>0&&str[cur-1]!=' ') cur--;\n        }\n      }\n      else if(\"insert\".equals(com0)){\n        if(com.length()>9){\n          String insertionStr=com.substring(8,com.length()-1);\n          for(int i=MAX-insertionStr.length();i>=cur;i--){\n            if(str[i]!='-') str[i+insertionStr.length()]=str[i];\n          }\n          for(int i=0;i<insertionStr.length();i++){\n            str[cur+i]=insertionStr.charAt(i);\n          }\n          cur+=insertionStr.length();\n        }\n      }\n      else if(\"delete\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(str[cur]!='-'){\n            for(int i=cur;;i++){\n              if(str[i]=='-') break;\n              str[i]=str[i+1];\n            }\n          }\n        }\n        else if(\"word\".equals(com1)){\n          int cnt=cur;\n          while(str[cnt]==' ') cnt++;\n          if(str[cnt]!='-'){\n            while(str[cnt]!=' '&&str[cnt]!='-') cnt++;\n            for(int i=cur;;i++){\n              if(str[i]=='-') break;\n              str[i]=str[i-cur+cnt];\n            }\n          }\n        }\n      }\n    }\n    StringBuilder sb=new StringBuilder();\n    for(int i=0;;i++){\n      if(i==cur) sb.append(\"^\");\n      if(str[i]=='-') break;\n      sb.append(String.valueOf(str[i]));\n    }\n    out.println(sb);\n    out.flush();\n  }\n}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Deque;\nimport java.util.HashMap;\nimport java.util.InputMismatchException;\nimport java.util.Map;\nimport java.util.PriorityQueue;\nimport java.math.BigInteger;\nimport java.math.BigDecimal;\n      \npublic class Main{\n  \nstatic final InputStream in=System.in;\nstatic final PrintWriter out=new PrintWriter(System.out);\nstatic final int INF=Integer.MAX_VALUE/2;\nstatic final long LINF=Long.MAX_VALUE/2;\nstatic int MAX=100000;\nstatic char[] str=new char[MAX+1];\n  \npublic static void main(String[] args) throws IOException{\n  BufferedReader br=new BufferedReader(new InputStreamReader(in));\n  int n=Integer.parseInt(br.readLine());\n  while(n-->0){\n    String line=br.readLine();\n    int cur=0;\n    for(int i=0;i<=MAX;i++) str[i]='-';\n    for(int i=0;i<line.length();i++) str[i]=line.charAt(i);\n    int m=Integer.parseInt(br.readLine());\n    while(m-->0){\n      String[] com=br.readLine().split(\" \");\n      if(\"forward\".equals(com[0])){\n        if(\"char\".equals(com[1])&&str[cur]!='-') cur++;\n        else{\n          while(str[cur]==' ') cur++;\n          while(str[cur]!=' '&&str[cur]!='-') cur++;\n        }\n      }\n      else if(\"backward\".equals(com[0])){\n        if(\"char\".equals(com[1])&&cur!=0) cur--;\n        else{\n          while(cur!=0&&str[cur-1]==' ') cur--;\n          while(cur!=0&&str[cur-1]!=' ') cur--;\n        }\n      }\n      \n      \n    }\n    for(int i=0;;i++){\n      if(i==cur) out.print(\"^\");\n      if(str[i]=='-') break;\n      out.print(str[i]);\n    }\n    out.println();\n  }\nout.flush();\n}\n}"
  },
  {
    "language": "Java",
    "code": "\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.LinkedList;\nimport java.util.ListIterator;\nimport java.util.Scanner;\n\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\t\n\t\tfinal int N = Integer.parseInt(sc.nextLine());\n\t\t\n\t\tfor(int i = 0; i < N; i++){\n\t\t\t\n\t\t\tArrayList<Character> list = new ArrayList<Character>();\n\t\t\tfor(final char in : sc.nextLine().toCharArray()){\n\t\t\t\tlist.add(in);\n\t\t\t}\n\t\t\t\n\t\t\tfinal int M = Integer.parseInt(sc.nextLine());\n\t\t\t\n\t\t\tint pos = 0;\n\t\t\t\n\t\t\tfor(int j = 0; j < M; j++){\n\t\t\t\t//System.out.println(list);\n\t\t\t\t\n\t\t\t\tString[] str = sc.nextLine().split(\" \");\n\t\t\t\tString ops1 = str[0];\n\t\t\t\tString ops2 = str[1];\n\t\t\t\t\n\t\t\t\tif(\"forward\".equals(ops1)){\n\t\t\t\t\tif(\"char\".equals(ops2)){\n\t\t\t\t\t\tif(pos < list.size()){\n\t\t\t\t\t\t\tpos++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}else if(\"word\".equals(ops2)){\n\t\t\t\t\t\tboolean flag = false;\n\t\t\t\t\t\t\n\t\t\t\t\t\tfor(int k = pos; k < list.size(); k++){\n\t\t\t\t\t\t\tif(list.get(k) == ' '){\n\t\t\t\t\t\t\t\tpos = k;\n\t\t\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(!flag){\n\t\t\t\t\t\t\tpos = list.size();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}else if(\"backward\".equals(ops1)){\n\t\t\t\t\tif(\"char\".equals(ops2)){\n\t\t\t\t\t\tif(pos > 0){\n\t\t\t\t\t\t\tpos--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}else if(\"word\".equals(ops2)){\n\t\t\t\t\t\tboolean flag = false;\n\t\t\t\t\t\t\n\t\t\t\t\t\tfor(int k = pos - 1; k >= 0; k--){\n\t\t\t\t\t\t\tif(list.get(k) == ' '){\n\t\t\t\t\t\t\t\tpos = k + 1;\n\t\t\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(!flag){\n\t\t\t\t\t\t\tpos = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}else if(\"delete\".equals(ops1)){\n\t\t\t\t\tif(\"char\".equals(ops2)){\n\t\t\t\t\t\tif(pos < list.size()){\n\t\t\t\t\t\t\tlist.remove(pos);\n\t\t\t\t\t\t}\n\t\t\t\t\t}else if(\"word\".equals(ops2)){\n\t\t\t\t\t\tboolean flag = false;\n\t\t\t\t\t\tboolean found = false;\n\t\t\t\t\t\tint del = -1;\n\t\t\t\t\t\t\n\t\t\t\t\t\tfor(int k = pos; k < list.size(); k++){\n\t\t\t\t\t\t\tif(list.get(k) == ' '){\n\t\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\t\t\tdel = k - 1;\n\t\t\t\t\t\t\t}else if(found){\n\t\t\t\t\t\t\t\tdel = k - 1;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(flag){\n\t\t\t\t\t\t\tfor(int k = pos; k <= del; k++){\n\t\t\t\t\t\t\t\tlist.remove(pos);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}else if(\"insert\".equals(ops1)){\n\t\t\t\t\tchar[] input = ops2.replaceAll(\"\\\"\", \"\").toCharArray();\n\t\t\t\t\t\n\t\t\t\t\tfor(int k = input.length - 1; k >= 0; k--){\n\t\t\t\t\t\tlist.add(pos, input[k]);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tpos += input.length;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfor(int j = 0; j < list.size(); j++){\n\t\t\t\tif(j == pos){\n\t\t\t\t\tSystem.out.print(\"^\");\n\t\t\t\t}\n\t\t\t\tSystem.out.print(list.get(j));\n\t\t\t}\n\t\t\t\n\t\t\tif(list.size() == pos){\n\t\t\t\tSystem.out.print(\"^\");\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t\t\n\t}\n\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Deque;\nimport java.util.HashMap;\nimport java.util.InputMismatchException;\nimport java.util.Map;\nimport java.util.PriorityQueue;\nimport java.util.StringTokenizer;\nimport java.math.BigInteger;\nimport java.math.BigDecimal;\n       \npublic class Main{\n   \nstatic final InputStream in=System.in;\nstatic final PrintWriter out=new PrintWriter(System.out);\nstatic final int INF=Integer.MAX_VALUE/2;\nstatic final long LINF=Long.MAX_VALUE/2;\nstatic int MAX=1000;\nstatic char[] str=new char[MAX+1];\n   \npublic static void main(String[] args) throws IOException{\n  BufferedReader br=new BufferedReader(new InputStreamReader(in));\n  int n=Integer.parseInt(br.readLine());\n  while(n-->0){\n    String line=br.readLine();\n    int cur=0;\n    Arrays.fill(str,'-');\n    for(int i=0;i<line.length();i++) str[i]=line.charAt(i);\n    int m=Integer.parseInt(br.readLine());\n    while(m-->0){\n      String com=br.readLine();\n      String com0=com.split(\" \")[0];\n      String com1=com.split(\" \")[1];\n      if(\"forward\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(str[cur]!='-') cur++;\n        }\n        else if(\"word\".equals(com1)){\n          while(str[cur]==' ') cur++;\n          while(str[cur]!=' '&&str[cur]!='-') cur++;\n        }\n      }\n      else if(\"backward\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(cur>0) cur--;\n        }\n        else if(\"word\".equals(com1)){\n          while(cur>0&&str[cur-1]==' ') cur--;\n          while(cur>0&&str[cur-1]!=' ') cur--;\n        }\n      }\n      else if(\"insert\".equals(com0)){\n        String insertionStr=\"=com.substring(8,com.length()-1);\n        for(int i=MAX-insertionStr.length();i>=cur;i--){\n          if(str[i]!='-') str[i+insertionStr.length()]=str[i];\n        }\n        for(int i=0;i<insertionStr.length();i++){\n          str[cur+i]=insertionStr.charAt(i);\n        }\n        cur+=insertionStr.length();\n      }\n      else if(\"delete\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(str[cur]!='-'){\n            for(int i=cur;;i++){\n              if(str[i]=='-') break;\n              str[i]=str[i+1];\n            }\n          }\n        }\n        else if(\"word\".equals(com1)){\n          int cnt=cur;\n          while(str[cnt]==' ') cnt++;\n          if(str[cnt]!='-'){\n            while(str[cnt]!=' '&&str[cnt]!='-') cnt++;\n            for(int i=cur;;i++){\n              if(str[i]=='-') break;\n              str[i]=str[i-cur+cnt];\n            }\n          }\n        }\n      }\n    }\n    StringBuilder sb=new StringBuilder();\n    for(int i=0;;i++){\n      if(i==cur) sb.append(\"^\");\n      if(str[i]=='-') break;\n      sb.append(String.valueOf(str[i]));\n    }\n    out.println(sb);\n    out.flush();\n  }\n}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.InputStream;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.InputMismatchException;\nimport java.util.NoSuchElementException;\nimport java.math.BigInteger;\n\npublic class Main{\n\nstatic PrintWriter out;\nstatic InputReader ir;\n\nstatic void solve(){\n int n=ir.nextInt();\n while(n-->0){\n   String s=ir.next();\n   int cur=0;\n   Arrays.fill(str,'-');\n   for(int i=0;i<s.length();i++) str[i]=s.charAt(i);\n   int m=ir.nextInt();\n   while(m-->0){\n     String com0=ir.next(),com1=ir.next();\n     if(\"forward\".equals(com0)){\n       if(\"char\".equals(com1)){\n         if(str[cur]!='-') cur++;\n       }\n       else if(\"word\".equals(com1)){\n         while(str[cur]==' ') cur++;\n         while(str[cur]!=' '&&str[cur]!='-') cur++;\n       }\n     }\n     else if(\"backward\".equals(com0)){\n       if(\"char\".equals(com1)){\n         if(cur>0) cur--;\n       }\n       else if(\"word\".equals(com1)){\n         while(cur>0&&str[cur-1]==' ') cur--;\n         while(cur>0&&str[cur-1]!=' ') cur--;\n       }\n     }\n     else if(\"insert\".equals(com0)){\n       if(com1.length()>2){\n         String insertionStr=com1.substring(1,com1.length()-1);\n         for(int i=MAX-insertionStr.length();i>=cur;i--){\n           if(str[i]!='-') str[i+insertionStr.length()]=str[i];\n         }\n         for(int i=0;i<insertionStr.length();i++){\n           str[cur+i]=insertionStr.charAt(i);\n         }\n         cur+=insertionStr.length();\n       }\n     }\n     else if(\"delete\".equals(com0)){\n       if(\"char\".equals(com1)){\n         if(str[cur]!='-'){\n           for(int i=cur;;i++){\n             if(str[i]=='-') break;\n             str[i]=str[i+1];\n           }\n         }\n       }\n       else if(\"word\".equals(com1)){\n         int cnt=cur;\n         while(str[cnt]==' ') cnt++;\n         if(str[cnt]!='-'){\n           while(str[cnt]!=' '&&str[cnt]!='-') cnt++;\n           for(int i=cur;;i++){\n             if(str[i]=='-') break;\n             str[i]=str[i-cur+cnt];\n           }\n         }\n       }\n     }\n   }\n   StringBuilder sb=new StringBuilder();\n   for(int i=0;;i++){\n     if(i==cur) sb.append(\"^\");\n     if(str[i]=='-') break;\n     sb.append(String.valueOf(str[i]));\n   }\n   out.println(sb);\n  }\n}\n\npublic static void main(String[] args) throws Exception{\n ir=new InputReader(System.in);\n out=new PrintWriter(System.out);\n solve();\n out.flush();\n}\n\nstatic class InputReader {\n private InputStream in;\n private byte[] buffer=new byte[1024];\n private int curbuf;\n private int lenbuf;\n\n public InputReader(InputStream in) {this.in=in; this.curbuf=this.lenbuf=0;}\n \n public boolean hasNextByte() {\n  if(curbuf>=lenbuf){\n   curbuf= 0;\n   try{\n    lenbuf=in.read(buffer);\n   }catch(IOException e) {\n    throw new InputMismatchException();\n   }\n   if(lenbuf<=0) return false;\n  }\n  return true;\n }\n\n private int readByte(){if(hasNextByte()) return buffer[curbuf++]; else return -1;}\n \n private boolean isSpaceChar(int c){return !(c>=33&&c<=126);}\n \n private void skip(){while(hasNextByte()&&isSpaceChar(buffer[curbuf])) curbuf++;}\n \n public boolean hasNext(){skip(); return hasNextByte();}\n \n public String next(){\n  if(!hasNext()) throw new NoSuchElementException();\n  StringBuilder sb=new StringBuilder();\n  int b=readByte();\n  while(!isSpaceChar(b)){\n   sb.appendCodePoint(b);\n   b=readByte();\n  }\n  return sb.toString();\n }\n \n public int nextInt() {\n  if(!hasNext()) throw new NoSuchElementException();\n  int c=readByte();\n  while (isSpaceChar(c)) c=readByte();\n  boolean minus=false;\n  if (c=='-') {\n   minus=true;\n   c=readByte();\n  }\n  int res=0;\n  do{\n   if(c<'0'||c>'9') throw new InputMismatchException();\n   res=res*10+c-'0';\n   c=readByte();\n  }while(!isSpaceChar(c));\n  return (minus)?-res:res;\n }\n \n public long nextLong() {\n  if(!hasNext()) throw new NoSuchElementException();\n  int c=readByte();\n  while (isSpaceChar(c)) c=readByte();\n  boolean minus=false;\n  if (c=='-') {\n   minus=true;\n   c=readByte();\n  }\n  long res = 0;\n  do{\n   if(c<'0'||c>'9') throw new InputMismatchException();\n   res=res*10+c-'0';\n   c=readByte();\n  }while(!isSpaceChar(c));\n  return (minus)?-res:res;\n }\n\n public double nextDouble(){return Double.parseDouble(next());}\n\n public BigInteger nextBigInteger(){return new BigInteger(next());}\n\n public int[] nextIntArray(int n){\n  int[] a=new int[n];\n  for(int i=0;i<n;i++) a[i]=nextInt();\n  return a;\n }\n\n public long[] nextLongArray(int n){\n  long[] a=new long[n];\n  for(int i=0;i<n;i++) a[i]=nextLong();\n  return a;\n }\n\n public char[][] nextCharMap(int n,int m){\n  char[][] map=new char[n][m];\n  for(int i=0;i<n;i++) map[i]=next().toCharArray();\n  return map;\n }\n}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.InputStreamReader;\n\n/*\n\t0 <= cursor <= text.length()\n*/\n\n//public class Problem1101_ASimpleOfflineTextEditor {\npublic class Main {\n\t\n\tprivate String text;\n\tprivate int cursor;\n\t\n\tpublic static void main(String[] args) {\n\t\ttry {\n\t\t//\tProblem1101_ASimpleOfflineTextEditor test = new Problem1101_ASimpleOfflineTextEditor();\n\t\t\tMain test = new Main();\n\t\t\t\n\t\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n\t\t\t\n\t\t\tint caseCount = Integer.parseInt(reader.readLine());\n\t\t\tint caseNumber = 0;\n\t\t\tfor(int i = 0; i < caseCount; i++) {\n\t\t\t\t\n\t\t\t\ttest.initialize(reader.readLine());\n\t\t\t\tint editCount = Integer.parseInt(reader.readLine());\n\t\t\t\tfor(int j = 0; j < editCount; j++) {\n\t\t\t\t\ttest.doCommand(reader.readLine());\n\t\t\t\t}\n\t\t\t\ttest.showAnswer();\n\t\t\t}\n\t\t} catch(Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\tvoid initialize(String line) {\n\t\tsetText(line);\n\t\tcursor = 0;\n\t//\tSystem.out.println(\"ツ渉可甘コツ可サ:cursor:\" + cursor + \"\\t\" + text);\n\t}\n\tvoid doCommand(String command) {\n\t\tif(command.startsWith(\"forward c\")) {\n\t//\t\tSystem.out.println(\"ツコツマツδ督ド:\" + command);\n\t\t\tforwardChar();\n\t\t} else if(command.startsWith(\"forward w\")) {\n\t//\t\tSystem.out.println(\"ツコツマツδ督ド:\" + command);\n\t\t\tforwardWord();\n\t\t} else if(command.startsWith(\"backward c\")) {\n\t//\t\tSystem.out.println(\"ツコツマツδ督ド:\" + command);\n\t\t\tbackwardChar();\n\t\t} else if(command.startsWith(\"backward w\")) {\n\t//\t\tSystem.out.println(\"ツコツマツδ督ド:\" + command);\n\t\t\tbackwardWord();\n\t\t} else if(command.startsWith(\"insert\")) {\n\t//\t\tSystem.out.println(\"ツコツマツδ督ド:\" + command);\n\t\t\tinsert(command.substring(8, command.length()-1));\n\t\t} else if(command.startsWith(\"delete c\")) {\n\t//\t\tSystem.out.println(\"ツコツマツδ督ド:\" + command);\n\t\t\tdeleteChar();\n\t\t} else if(command.startsWith(\"delete w\")) {\n\t//\t\tSystem.out.println(\"ツコツマツδ督ド:\" + command);\n\t\t\tdeleteWord();\n\t\t} else {\n\t//\t\tSystem.out.println(\"**ツコツマツδ督ドツエツδ可ー:\" + command);\n\t\t}\n\t//\tSystem.out.println(\"text:\\t\" + text + \"\\tcursor: \" + cursor);\n\t//\tshowAnswer();\n\t}\n\tprivate void forwardChar() {\n\t\tif(cursor < text.length()) {\n\t//\t\tSystem.out.println(\"ツ北ツ北\");\n\t\t\tcursor++;\n\t\t}\n\t}\n\tprivate void forwardWord() {\n\t\tif(cursor == text.length() || text.length() == 0) {\n\t\t\treturn;\n\t\t}\n\t//\tcursor++;\n\t\twhile(text.charAt(cursor) == ' ') {\n\t\t\tcursor++;\n\t\t\tif(cursor == text.length()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tfor(int i = cursor; i < text.length(); i++) {\n\t\t\tchar targetChar = text.charAt(i);\n\t\t\tif(targetChar == ' ') {\n\t\t\t/*\twhile(text.charAt(i+1) == ' ') {\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t*/\t\n\t\t\t\tcursor = i;\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\t//do more\n\t\t\t}\n\t\t}\n\t\tcursor = text.length();\n\t}\n\tprivate void backwardChar() {\n\t\tif(0 < cursor) {\n\t\t\tcursor--;\n\t\t}\n\t}\n\tprivate void backwardWord() {\n\t\tif(cursor < 1) {\n\t\t\tcursor = 0;\n\t\t\treturn;\n\t\t}\n\t//\tcursor--;\n\t\twhile(text.charAt(cursor-1) == ' ') {\n\t\t\tcursor--;\n\t\t\tif(cursor == 0) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tfor(int i = cursor; i > 0; i--) {\t//ツ催渉可づ個閉カツ篠堋つェツ凝ウツ板陳つセツづつスツ湘ェツ債づ可妥篠可楪つキツづゥツつスツづ淞０ツづ慊づ確ツ認ツつキツづゥ\n\t\t\tchar targetChar = text.charAt(i-1);\n\t\t\tif(targetChar == ' ') {\n\t\t\t\tcursor = i;\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\t//do more\n\t\t\t}\n\t\t}\n\t\tcursor = 0;\n\t}\n\tprivate void insert(String txt) {\n\t\tStringBuilder builder = new StringBuilder(text.substring(0, cursor));\n\t\tbuilder.append(txt);\n\t\tbuilder.append(text.substring(cursor));\n\t\t\n\t\tsetText(builder.toString());\n\t\tcursor += txt.length();\n\t}\n\tprivate void deleteChar() {\n\t\tif(text.length() == cursor) {\t//cursor == text.length()-1 ツづ按づァツ催古」ツ氾カツづ可つ\n\t\t\treturn;\n\t\t} else if(cursor == text.length()-1) {\n\t\t\tsetText(text.substring(0,text.length()-1));\n\t\t\treturn;\n\t\t}\n\t\tStringBuilder builder = new StringBuilder(text.substring(0, cursor));\n\t\tbuilder.append(text.substring(cursor+1));\n\t\t\n\t\tsetText(builder.toString());\n\t}\n\tprivate void deleteWord() {\n\t\tif(text.length() == cursor) {\t//cursor == text.length() ÈçÅãöÉ éÌÅ½àµÈ¢B\n\t\t\treturn;\n\t\t} else if(cursor == text.length()-1) {\n\t\t\tsetText(text.substring(0,text.length()-1));\n\t\t\treturn;\n\t\t}\n\t\tint start = cursor;\n\t//\tmoveToEndOfWord();\n\t\tforwardWord();\n\t\t\n\t\tStringBuilder builder = new StringBuilder(text.substring(0, start));\n\t\tbuilder.append(text.substring(cursor));\n\t\t\n\t\tsetText(builder.toString());\n\t\tcursor = start;\n\t}\n\tprivate void moveToEndOfWord() {\n\t\tif(cursor == text.length()-1) {\n\t\t\treturn;\n\t\t}\n\t\twhile(text.charAt(cursor) == ' ') {\n\t\t\tcursor++;\n\t\t}\n\t\tfor(int i = cursor; i < text.length(); i++) {\n\t\t\tchar targetChar = text.charAt(i);\n\t\t\tif(targetChar == ' ') {\n\t\t\t\tcursor = i-1;\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\t//do more\n\t\t\t}\n\t\t}\n\t\tcursor = text.length()-1;\n\t}\n\tprivate void setText(String txt) {\n\t\ttext = txt;\n\t}\n\tvoid showAnswer() {\n\t//\tSystem.out.println(\"text:\\t\" + text + \"\\tcursor: \" + cursor);\n\t\t\n\t\tStringBuilder resultBuilder;\n\t\tif(cursor == text.length()) {\n\t\t\tresultBuilder = new StringBuilder(text);\n\t\t\tresultBuilder.append(\"^\");\n\t\t} else {\n\t\t\tresultBuilder = new StringBuilder(text.substring(0, cursor));\n\t\t\tresultBuilder.append(\"^\");\n\t\t\tresultBuilder.append(text.substring(cursor));\n\t\t}\n\t\tSystem.out.println(resultBuilder.toString());\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\nclass Main{\n    void run(){\n\tScanner sc=new Scanner(System.in);\n\tint M=sc.nextInt();\n\tsc.nextLine();\n\tfor(int attend=0;attend<M;attend++){\n\t    StringBuffer text=new StringBuffer(sc.nextLine());\n\t    int cur=0;\n\t    int n=sc.nextInt();\n\t    String command1;\n\t    String command2;\n\t    sc.nextLine();\n\t    for(int i=0;i<n;i++){\n\t\tString command=sc.nextLine();\n\t\t//System.out.println(command);\n\t\tfor(int j=0;;j++){\n\t\t    if(command.charAt(j)==' '){\n\t\t\tcommand1=command.substring(0,j);\n\t\t\tcommand2=command.substring(j+1);\n\t\t\tbreak;\n\t\t    }\n\t\t}\n\t\tif(\"forward\".equals(command1)){\n\t\t    if(\"char\".equals(command2)){\n\t\t\tcur=cur<text.length()? cur+1:cur;    \n\t\t    }\n\t\t    else{\n\t\t\tfor(;cur<text.length()&&text.charAt(cur)==' ';cur++);\n\t\t\tfor(;cur<text.length()&&text.charAt(cur)!=' ';cur++);\n\t\t    }\n\t\t}\n\t\tif(\"backward\".equals(command1)){\n\t\t    if(\"char\".equals(command2)){\n\t\t\tcur=cur>0? cur-1:cur;    \n\t\t    }\n\t\t    else{\n\t\t\tfor(;cur>0&&text.charAt(cur-1)==' ';cur--);\n\t\t\tfor(;cur>0&&text.charAt(cur-1)!=' ';cur--);\n\t\t    }  \n\t\t}\n\t\tif(\"insert\".equals(command1)){\n\t\t    text.insert(cur,command2.substring(1,command2.length()-1));\n\t\t    cur+=command2.length()-2;\n\t\t}\t\t       \n\t\tif(\"delete\".equals(command1)){\n\t\t    if(\"char\".equals(command2)){\n\t\t\tif(cur!=text.length()){\n\t\t\t    text.deleteCharAt(cur);\n\t\t\t}\n\t\t    }\n\t\t    else{\n\t\t\tint temp=cur;\n\t\t\tfor(;cur<text.length()&&text.charAt(cur)==' ';cur++);\n\t\t\tif(cur==text.length())break;\n\t\t\tfor(;cur<text.length()&&text.charAt(cur)!=' ';cur++);\n\t\t\ttext.delete(temp,cur);\n\t\t\tcur=temp;\n\t\t    }\n\t\t}\n\t\t//print(text,cur);\n\t    }\n\t    print(text,cur);\n\t}\n\t\n    }\n    void print(StringBuffer text,int cur){\n\t    text.insert(cur,\"^\");\n\t    System.out.println(text);\n\t    text.deleteCharAt(cur);\n    }\n    public static void main(String[] args){\n\tnew Main().run();\n    }\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Deque;\nimport java.util.HashMap;\nimport java.util.InputMismatchException;\nimport java.util.Map;\nimport java.util.PriorityQueue;\nimport java.util.StringTokenizer;\nimport java.math.BigInteger;\nimport java.math.BigDecimal;\n       \npublic class Main{\n   \nstatic final InputStream in=System.in;\nstatic final PrintWriter out=new PrintWriter(System.out);\nstatic final int INF=Integer.MAX_VALUE/2;\nstatic final long LINF=Long.MAX_VALUE/2;\nstatic int MAX=5000;\nstatic char[] str=new char[MAX+1];\n   \npublic static void main(String[] args) throws IOException{\n  BufferedReader br=new BufferedReader(new InputStreamReader(in));\n  out.println(\"??????\");\n  int n=Integer.parseInt(br.readLine());\n  while(n-->0){\n    String line=br.readLine();\n    int cur=0;\n    Arrays.fill(str,'-');\n    for(int i=0;i<line.length();i++) str[i]=line.charAt(i);\n    int m=Integer.parseInt(br.readLine());\n    while(m-->0){\n      String com0=line.split(\" \")[0];\n      String com1=line.split(\" \")[1];\n      if(\"forward\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(str[cur]!='-') cur++;\n        }\n        else if(\"word\".equals(com1)){\n          while(str[cur]==' ') cur++;\n          while(str[cur]!=' '&&str[cur]!='-') cur++;\n        }\n      }\n      else if(\"backward\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(cur>0) cur--;\n        }\n        else if(\"word\".equals(com1)){\n          while(cur>0&&str[cur-1]==' ') cur--;\n          while(cur>0&&str[cur-1]!=' ') cur--;\n        }\n      }\n      else if(\"insert\".equals(com0)){\n        String insertionStr=line.substring(8,line.length()-1);\n        for(int i=MAX-insertionStr.length();i>=cur;i--){\n          if(str[i]!='-') str[i+insertionStr.length()]=str[i];\n        }\n        for(int i=0;i<insertionStr.length();i++){\n          str[cur+i]=insertionStr.charAt(i);\n        }\n        cur+=insertionStr.length();\n      }\n      else if(\"delete\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(str[cur]!='-'){\n            for(int i=cur;;i++){\n              if(str[i]=='-') break;\n              str[i]=str[i+1];\n            }\n          }\n        }\n        else if(\"word\".equals(com1)){\n          int cnt=cur;\n          while(str[cnt]==' ') cnt++;\n          if(str[cnt]!='-'){\n            while(str[cnt]!=' '&&str[cnt]!='-') cnt++;\n            for(int i=cur;;i++){\n              if(str[i]=='-') break;\n              str[i]=str[i-cur+cnt];\n            }\n          }\n        }\n      }\n    }\n    StringBuilder sb=new StringBuilder();\n    for(int i=0;;i++){\n      if(i==cur) sb.append(\"^\");\n      if(str[i]=='-') break;\n      sb.append(String.valueOf(str[i]));\n    }\n    out.println(sb);\n    out.flush();\n  }\n}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\nimport java.util.regex.*;\n\nclass Main {\n\n    public static void main(String[] args){\n\tScanner stdin = new Scanner(System.in);\n\tint n = new Scanner(stdin.nextLine()).nextInt();\n\tfor(int i = 0; i < n; i++){\n\t    StringBuilder sb = new StringBuilder(stdin.nextLine());\n\t    String s = stdin.nextLine();\n\t    int k = 0;\n\t    if(!s.equals(\"\")){\n\t\tk = new Scanner(s).nextInt();\n\t    }\n\t    int cursor = 0;\n\t    for(int j = 0; j < k; j++){\n\t\tString input = stdin.nextLine();\n\t\tif(input.equals(\"forward char\")){\n\t\t    if(cursor < sb.length()){\n\t\t\tcursor++;\n\t\t    }\n\t\t} else if(input.equals(\"delete char\")){\n\t\t    if(cursor < sb.length()){\n\t\t\tsb.deleteCharAt(cursor);\n\t\t    }\n\t\t} else if(input.equals(\"forward word\")){\n\t\t    while(cursor < sb.length() && sb.charAt(cursor) == ' '){\n\t\t\tcursor++;\n\t\t    }\n\t\t    while(cursor < sb.length() && sb.charAt(cursor) != ' '){\n\t\t\tcursor++;\n\t\t    }\n\t\t} else if(input.equals(\"backward char\")){\n\t\t    if(cursor > 0){\n\t\t\tcursor--;\n\t\t    }\n\t\t} else if(input.equals(\"backward word\")){\n\t\t    while(cursor > 0 && sb.charAt(cursor - 1) == ' '){\n\t\t\tcursor--;\n\t\t    }\n\t\t    while(cursor > 0 && sb.charAt(cursor - 1) != ' '){\n\t\t\tcursor--;\n\t\t    }\t\t\t  \n\t\t} else if(input.equals(\"delete word\")){\n\t\t    while(cursor < sb.length() && sb.charAt(cursor) != ' '){\n\t\t\tsb.deleteCharAt(cursor);\n\t\t    }\n\t\t} else { //insert\n\t\t    Pattern p = Pattern.compile(\"\\\"(.+)\\\"\");\n\t\t    Matcher m = p.matcher(input);\n\t\t    m.matches();\n\t\t    if(m.find()){\n\t\t\tsb.insert(cursor, m.group(1));\n\t\t\tcursor += m.group(1).length();\n\t\t    }\t\t\t\n\t\t}\n\t    }\n\t    sb.insert(cursor, '^');\n\t    System.out.println(sb);\n\t}\n    }\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Deque;\nimport java.util.HashMap;\nimport java.util.InputMismatchException;\nimport java.util.Map;\nimport java.util.PriorityQueue;\nimport java.math.BigInteger;\nimport java.math.BigDecimal;\n      \npublic class Main{\n  \nstatic final InputStream in=System.in;\nstatic final PrintWriter out=new PrintWriter(System.out);\nstatic final int INF=Integer.MAX_VALUE/2;\nstatic final long LINF=Long.MAX_VALUE/2;\nstatic int MAX=10000;\nstatic char[] str=new char[MAX+1];\n  \npublic static void main(String[] args) throws IOException{\n  BufferedReader br=new BufferedReader(new InputStreamReader(in));\n  int n=Integer.parseInt(br.readLine());\n  while(n-->0){\n    String line=br.readLine();\n    int cur=0;\n    for(int i=0;i<=MAX;i++) str[i]='';\n    for(int i=0;i<line.length();i++) str[i]=line.charAt(i);\n    int m=Integer.parseInt(br.readLine());\n    while(m-->0){\n      String[] com=br.readLine().split(\" \");\n      if(\"forward\".equals(com[0])){\n        if(\"char\".equals(com[1])&&str[cur]!='') cur++;\n        else{\n          while(str[cur]==' ') cur++;\n          while(str[cur]!=' '&&str[cur]!='') cur++;\n        }\n      }\n      else if(\"backward\".equals(com[0])){\n        if(\"char\".equals(com[1])&&cur!=0) cur--;\n        else{\n          while(cur!=0&&str[cur-1]==' ') cur--;\n          while(cur!=0&&str[cur-1]!=' ') cur--;\n        }\n      }\n      else if(\"insert\".equals(com[0])){\n        String insertionStr=com[1].substring(1,com[1].length()-1);\n        for(int i=MAX-insertionStr.length();i>=cur;i--){\n          str[i+insertionStr.length()]=str[i];\n        }\n        for(int i=0;i<insertionStr.length();i++){\n          str[cur+i]=insertionStr.charAt(i);\n        }\n      }\n      else{\n        if(\"char\".equals(com[1])&&str[cur]!=''){\n          for(int i=cur;i<=MAX;i++){\n            if(str[i]=='') break;\n            str[i]=str[i+1];\n          }\n        }\n        else{\n          int cnt=cur;\n          boolean flag=false;\n          while(str[cnt]==' ') cnt++;\n          while(str[cnt]!=' '&&str[cnt]!=''){\n            cnt++;\n            flag=true;\n          }\n          if(flag){\n            for(int i=cnt;i<=MAX;i++){\n            if(str[i-cnt+cur]=='') break;\n              str[i-cnt+cur]=str[i];\n            }\n          }\n        }\n      }\n    }\n    for(int i=0;;i++){\n      if(str[i]=='') break;\n      if(i==cur) out.print(\"^\");\n      out.print(str[i]);\n    }\n    out.println();\n  }\nout.flush();\n}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\nclass Main{\n    void run(){\n\tScanner sc=new Scanner(System.in);\n\tint M=sc.nextInt();\n\tsc.nextLine();\n\tfor(int attend=0;attend<M;attend++){\n\t    StringBuffer str=new StringBuffer(sc.nextLine());\n\t    int cur=0;\n\t    int n=sc.nextInt();\n\t    String command1;\n\t    String command2;\n\t    sc.nextLine();\n\t    for(int i=0;i<n;i++){\n\t\tString command=sc.nextLine();\n\t\t//System.out.println(command);\n\t\tint index0=0;\n\t\twhile(true){\n\t\t    if(command.charAt(index0)==' '){\n\t\t\tcommand1=command.substring(0,index0);\n\t\t\tcommand2=command.substring(index0+1);\n\t\t\t//System.out.println(command1);\n\t\t\t//System.out.println(command2);\n\t\t\tbreak;\n\t\t    }\n\t\t    index0++;\n\t\t}\n\t\tif(\"forward\".equals(command1)){\n\t\t    if(\"char\".equals(command2)){\n\t\t\tcur=cur<str.length()? cur+1:cur;    \n\t\t    }\n\t\t    else{\n\t\t\tint index=new String(str).indexOf(\" \",cur+1);\n\t\t\tif(index==-1){\n\t\t\t    cur=str.length();\n\t\t\t}\n\t\t\telse{\n\t\t\t    cur=index;\n\t\t\t    while(true){\n\t\t\t\tif(cur+1==str.length()){cur++;break;}\n\t\t\t\telse if(str.charAt(cur+1)==' ')cur++;\n\t\t\t\telse break;\n\t\t\t    }\n\t\t\t}\n\t\t    }\n\t\t}\n\t\tif(\"backward\".equals(command1)){\n\t\t    if(\"char\".equals(command2)){\n\t\t\tcur=cur>0? cur-1:cur;    \n\t\t    }\n\t\t    else{\n\t\t\twhile(cur>0&&str.charAt(cur-1)==' ')cur--;\n\t\t\tint index=cur;\n\t\t\twhile(index>0&&str.charAt(index-1)!=' ')index--;\n\t\t\tcur=index;\n\t\t\t\n\t\t    }  \n\t\t}\n\t\tif(\"insert\".equals(command1)){\n\t\t    //raplaceALL..\n\t\t    command2=new StringBuffer(command2).deleteCharAt(0).toString();\n\t\t    command2=new StringBuffer(command2).deleteCharAt(command2.length()-1).toString();\n\t\t    str.insert(cur,command2);\n\t\t    cur+=command2.length();\n\t\t}\t\t       \n\t\tif(\"delete\".equals(command1)){\n\t\t    if(\"char\".equals(command2)){\n\t\t\tif(cur!=str.length()){\n\t\t\t    str.deleteCharAt(cur);\n\t\t\t}\n\t\t    }\n\t\t    else{\n\t\t\twhile(true){\n\t\t\t    if(cur==str.length())break;\n\t\t\t    if(str.charAt(cur)!=' ')break;\n\t\t\t    str.deleteCharAt(cur);\n\t\t\t}\n\t\t\twhile(true){\n\t\t\t    if(cur==str.length())break;\n\t\t\t    if(str.charAt(cur)==' ')break;\n\t\t\t    str.deleteCharAt(cur);\n\t\t\t}\t\t\t\t\n\t\t    }\n\t\t}\n\t\n\t\t//print(str,cur);\n\t    }\n\t    print(str,cur);\n\t}\n\t\n    }\n    void print(StringBuffer str,int cur){\n\t    str.insert(cur,\"^\");\n\t    System.out.println(str);\n\t    str.deleteCharAt(cur);\n    }\n    public static void main(String[] args){\n\tnew Main().run();\n    }\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Deque;\nimport java.util.HashMap;\nimport java.util.InputMismatchException;\nimport java.util.Map;\nimport java.util.PriorityQueue;\nimport java.util.StringTokenizer;\nimport java.math.BigInteger;\nimport java.math.BigDecimal;\n       \npublic class Main{\n   \nstatic final InputStream in=System.in;\nstatic final PrintWriter out=new PrintWriter(System.out);\nstatic final int INF=Integer.MAX_VALUE/2;\nstatic final long LINF=Long.MAX_VALUE/2;\nstatic int MAX=1000;\nstatic char[] str=new char[MAX+1];\n   \npublic static void main(String[] args) throws IOException{\n  BufferedReader br=new BufferedReader(new InputStreamReader(in));\n  int n=Integer.parseInt(br.readLine());\n  while(n-->0){\n    String line=br.readLine();\n    int cur=0;\n    Arrays.fill(str,'-');\n    for(int i=0;i<line.length();i++) str[i]=line.charAt(i);\n    int m=Integer.parseInt(br.readLine());\n    while(m-->0){\n      String com=br.readLine();\n      String com0=com.split(\" \")[0];\n      String com1=com.split(\" \")[1];\n      if(\"forward\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(str[cur]!='-') cur++;\n        }\n        else if(\"word\".equals(com1)){\n          while(str[cur]==' ') cur++;\n          while(str[cur]!=' '&&str[cur]!='-') cur++;\n        }\n      }\n      else if(\"backward\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(cur>0) cur--;\n        }\n        else if(\"word\".equals(com1)){\n          while(cur>0&&str[cur-1]==' ') cur--;\n          while(cur>0&&str[cur-1]!=' ') cur--;\n        }\n      }\n      else if(\"insert\".equals(com0)){\n        String insertionStr=com.substring(8,(com.length()-1));\n        for(int i=MAX-insertionStr.length();i>=cur;i--){\n          if(str[i]!='-') str[i+insertionStr.length()]=str[i];\n        }\n        for(int i=0;i<insertionStr.length();i++){\n          str[cur+i]=insertionStr.charAt(i);\n        }\n        cur+=insertionStr.length();\n      }\n      else if(\"delete\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(str[cur]!='-'){\n            for(int i=cur;;i++){\n              if(str[i]=='-') break;\n              str[i]=str[i+1];\n            }\n          }\n        }\n        else if(\"word\".equals(com1)){\n          int cnt=cur;\n          while(str[cnt]==' ') cnt++;\n          if(str[cnt]!='-'){\n            while(str[cnt]!=' '&&str[cnt]!='-') cnt++;\n            for(int i=cur;;i++){\n              if(str[i]=='-') break;\n              str[i]=str[i-cur+cnt];\n            }\n          }\n        }\n      }\n    }\n    StringBuilder sb=new StringBuilder();\n    for(int i=0;;i++){\n      if(i==cur) sb.append(\"^\");\n      if(str[i]=='-') break;\n      sb.append(String.valueOf(str[i]));\n    }\n    out.println(sb);\n    out.flush();\n  }\n}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\nimport java.util.regex.*;\n\nclass Main {\n\n    public static void main(String[] args){\n\tScanner stdin = new Scanner(System.in);\n\tint n = new Scanner(stdin.nextLine()).nextInt();\n\tfor(int i = 0; i < n; i++){\n\t    StringBuilder sb = new StringBuilder(stdin.nextLine());\n\t    String s = stdin.nextLine();\n\t    int k = 0;\n\t    if(!s.equals(\"\")){\n\t\tk = new Scanner(s).nextInt();\n\t    }\n\t    int cursor = 0;\n\t    for(int j = 0; j < k; j++){\n\t\tString input = stdin.nextLine();\n\t\tif(input.equals(\"forward char\")){\n\t\t    if(cursor < sb.length()){\n\t\t\tcursor++;\n\t\t    }\n\t\t} else if(input.equals(\"delete char\")){\n\t\t    if(cursor < sb.length()){\n\t\t\tsb.deleteCharAt(cursor);\n\t\t    }\n\t\t} else if(input.equals(\"forward word\")){\n\t\t    while(cursor < sb.length() && sb.charAt(cursor) == ' '){\n\t\t\tcursor++;\n\t\t    }\n\t\t    while(cursor < sb.length() && sb.charAt(cursor) != ' '){\n\t\t\tcursor++;\n\t\t    }\n\t\t} else if(input.equals(\"backward char\")){\n\t\t    if(cursor > 0){\n\t\t\tcursor--;\n\t\t    }\n\t\t} else if(input.equals(\"backward word\")){\n\t\t    while(cursor > 0 && sb.charAt(cursor - 1) == ' '){\n\t\t\tcursor--;\n\t\t    }\n\t\t    while(cursor > 0 && sb.charAt(cursor - 1) != ' '){\n\t\t\tcursor--;\n\t\t    }\t\t\t  \n\t\t} else if(input.equals(\"delete word\")){\n\t\t    while(cursor < sb.length() && sb.charAt(cursor) == ' '){\n\t\t\tsb.deleteCharAt(cursor);\n\t\t    }\n\t\t    while(cursor < sb.length() && sb.charAt(cursor) != ' '){\n\t\t\tsb.deleteCharAt(cursor);\n\t\t    }\n\t\t} else { //insert\n\t\t    Pattern p = Pattern.compile(\"\\\"(.+)\\\"\");\n\t\t    Matcher m = p.matcher(input);\n\t\t    m.matches();\n\t\t    if(m.find()){\n\t\t\tsb.insert(cursor, m.group(1));\n\t\t\tcursor += m.group(1).length();\n\t\t    }\t\t\t\n\t\t}\n\t    }\n\t    sb.insert(cursor, '^');\n\t    System.out.println(sb);\n\t}\n    }\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Deque;\nimport java.util.HashMap;\nimport java.util.InputMismatchException;\nimport java.util.Map;\nimport java.util.PriorityQueue;\nimport java.math.BigInteger;\nimport java.math.BigDecimal;\n       \npublic class Main{\n   \nstatic final InputStream in=System.in;\nstatic final PrintWriter out=new PrintWriter(System.out);\nstatic final int INF=Integer.MAX_VALUE/2;\nstatic final long LINF=Long.MAX_VALUE/2;\nstatic int MAX=1500;\nstatic char[] str=new char[MAX+1];\n   \npublic static void main(String[] args) throws IOException{\n  BufferedReader br=new BufferedReader(new InputStreamReader(in));\n  int n=Integer.parseInt(br.readLine());\n  while(n-->0){\n    String line=br.readLine();\n    int cur=0;\n    Arrays.fill(str,'-');\n    for(int i=0;i<line.length();i++) str[i]=line.charAt(i);\n    int m=Integer.parseInt(br.readLine());\n    while(m-->0){\n      String com=br.readLine(),com0,com1;\n      for(int i=0;;i++){\n        if(com.charAt(i)==' '){\n          com0=com.substring(0,i);\n          com1=com.substring(i+1);\n          break;\n        }\n      }\n      if(\"forward\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(str[cur]!='-') cur++;\n        }\n        else if(\"word\".equals(com1)){\n          while(str[cur]==' ') cur++;\n          while(str[cur]!=' '&&str[cur]!='-') cur++;\n        }\n      }\n      else if(\"backward\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(cur>0) cur--;\n        }\n        else if(\"word\".equals(com1)){\n          while(cur>0&&str[cur-1]==' ') cur--;\n          while(cur>0&&str[cur-1]!=' ') cur--;\n        }\n      }\n      else if(\"insert\".equals(com0)){\n        if(com1.length()>2){\n          String insertionStr=com1.substring(1,com1.length()-1);\n          for(int i=MAX-insertionStr.length();i>=cur;i--){\n            if(str[i]!='-') str[i+insertionStr.length()]=str[i];\n          }\n          for(int i=0;i<insertionStr.length();i++){\n            str[cur+i]=insertionStr.charAt(i);\n          }\n          cur+=insertionStr.length();\n        }\n      }\n      else if(\"delete\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(str[cur]!='-'){\n            for(int i=cur;;i++){\n              if(str[i]=='-') break;\n              str[i]=str[i+1];\n            }\n          }\n        }\n        else if(\"word\".equals(com1)){\n          int cnt=cur;\n          while(str[cnt]==' ') cnt++;\n          if(str[cnt]!='-'){\n            while(str[cnt]!=' '&&str[cnt]!='-') cnt++;\n            for(int i=cur;;i++){\n              if(str[i]=='-') break;\n              str[i]=str[i-cur+cnt];\n            }\n          }\n        }\n      }\n    }\n    StringBuilder sb=new StringBuilder();\n    for(int i=0;;i++){\n      if(i==cur) sb.append(\"^\");\n      if(str[i]=='-') break;\n      sb.append(String.valueOf(str[i]));\n    }\n    out.println(sb);\n  }\nout.flush();\n}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Deque;\nimport java.util.HashMap;\nimport java.util.InputMismatchException;\nimport java.util.Map;\nimport java.util.PriorityQueue;\nimport java.util.StringTokenizer;\nimport java.math.BigInteger;\nimport java.math.BigDecimal;\n      \npublic class Main{\n  \nstatic final InputStream in=System.in;\nstatic final PrintWriter out=new PrintWriter(System.out);\nstatic final int INF=Integer.MAX_VALUE/2;\nstatic final long LINF=Long.MAX_VALUE/2;\nstatic int MAX=1000000;\nstatic char[] str=new char[MAX+1];\n  \npublic static void main(String[] args) throws IOException{\n  BufferedReader br=new BufferedReader(new InputStreamReader(in));\n  int n=Integer.parseInt(br.readLine());\n  while(n-->0){\n    String line=br.readLine();\n    int cur=0;\n    for(int i=0;i<=MAX;i++) str[i]='-';\n    for(int i=0;i<line.length();i++) str[i]=line.charAt(i);\n    int m=Integer.parseInt(br.readLine());\n    while(m-->0){\n      StringTokenizer st=new StringTokenizer(br.readLine());\n      String com0=st.nextToken();\n      String com1=st.nextToken();\n      if(\"forward\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(str[cur]!='-') cur++;\n        }\n        else{\n          while(str[cur]==' ') cur++;\n          while(str[cur]!=' '&&str[cur]!='-') cur++;\n        }\n      }\n      else if(\"backward\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(cur>0) cur--;\n        }\n        else{\n          while(cur>0&&str[cur-1]==' ') cur--;\n          while(cur>0&&str[cur-1]!=' ') cur--;\n        }\n      }\n      else if(\"insert\".equals(com0)){\n        if(com1.length()>2){\n          String insertionStr=com1.substring(1,com1.length()-1);\n          for(int i=MAX-insertionStr.length();i>=cur;i--){\n            if(str[i]!='-') str[i+insertionStr.length()]=str[i];\n          }\n          for(int i=0;i<insertionStr.length();i++){\n            str[cur+i]=insertionStr.charAt(i);\n          }\n          cur+=insertionStr.length();\n        }\n      }\n      else if(\"delete\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(str[cur]!='-'){\n            for(int i=cur;;i++){\n              if(str[i]=='-') break;\n              str[i]=str[i+1];\n            }\n          }\n        }\n        else{\n          int cnt=cur;\n          while(str[cnt]==' ') cnt++;\n          if(str[cnt]!='-'){\n            while(str[cnt]!=' '&&str[cnt]!='-') cnt++;\n            for(int i=cur;;i++){\n              if(str[i]=='-') break;\n              str[i]=str[i-cur+cnt];\n            }\n          }\n        }\n      }\n    }\n    StringBuilder sb=new StringBuilder();\n    for(int i=0;;i++){\n      if(i==cur) sb.append(\"^\");\n      if(str[i]=='-') break;\n      sb.append(String.valueOf(str[i]));\n    }\n    out.println(sb);\n  }\nout.flush();\n}\n}"
  },
  {
    "language": "Java",
    "code": "\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.LinkedList;\nimport java.util.ListIterator;\nimport java.util.Scanner;\n\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\t\n\t\tfinal int N = Integer.parseInt(sc.nextLine());\n\t\t\n\t\tfor(int i = 0; i < N; i++){\n\t\t\t\n\t\t\tArrayList<Character> list = new ArrayList<Character>();\n\t\t\tfor(final char in : sc.nextLine().toCharArray()){\n\t\t\t\tlist.add(in);\n\t\t\t}\n\t\t\t\n\t\t\tfinal int M = Integer.parseInt(sc.nextLine());\n\t\t\t\n\t\t\tint pos = 0;\n\t\t\t\n\t\t\tfor(int j = 0; j < M; j++){\n\t\t\t\t/*\n\t\t\t\tfor(int k = 0; k < list.size(); k++){\n\t\t\t\t\tif(k == pos){\n\t\t\t\t\t\tSystem.out.print(\"^\");\n\t\t\t\t\t}\n\t\t\t\t\tSystem.out.print(list.get(k));\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(list.size() == pos){\n\t\t\t\t\tSystem.out.print(\"^\");\n\t\t\t\t}\n\t\t\t\tSystem.out.println();\n\t\t\t\t*/\n\t\t\t\tString str = sc.nextLine();\n\t\t\t\tString ops1 = str.substring(0, str.indexOf(\" \"));\n\t\t\t\tString ops2 = str.substring(str.indexOf(\" \") + 1, str.length());\n\t\t\t\t\n\t\t\t\t//System.out.println(ops1 + \" \" + ops2);\n\t\t\t\t\n\t\t\t\tif(\"forward\".equals(ops1)){\n\t\t\t\t\tif(\"char\".equals(ops2)){\n\t\t\t\t\t\tif(pos < list.size()){\n\t\t\t\t\t\t\tpos++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}else if(\"word\".equals(ops2)){\n\t\t\t\t\t\tboolean flag = false;\n\t\t\t\t\t\tboolean found = false;\n\t\t\t\t\t\t\n\t\t\t\t\t\tfor(int k = pos; k < list.size(); k++){\n\t\t\t\t\t\t\tif(!found && list.get(k) == ' '){\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}else if(list.get(k) == ' '){\n\t\t\t\t\t\t\t\tpos = k;\n\t\t\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(!flag){\n\t\t\t\t\t\t\tpos = list.size();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}else if(\"backward\".equals(ops1)){\n\t\t\t\t\tif(\"char\".equals(ops2)){\n\t\t\t\t\t\tif(pos > 0){\n\t\t\t\t\t\t\tpos--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}else if(\"word\".equals(ops2)){\n\t\t\t\t\t\tboolean flag = false;\n\t\t\t\t\t\tboolean found = false;\n\t\t\t\t\t\t\n\t\t\t\t\t\tfor(int k = pos - 1; k >= 0; k--){\n\t\t\t\t\t\t\tif(!found && list.get(k) == ' '){\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}else if(list.get(k) == ' '){\n\t\t\t\t\t\t\t\tpos = k + 1;\n\t\t\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(!flag){\n\t\t\t\t\t\t\tpos = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}else if(\"delete\".equals(ops1)){\n\t\t\t\t\tif(\"char\".equals(ops2)){\n\t\t\t\t\t\tif(pos < list.size()){\n\t\t\t\t\t\t\tlist.remove(pos);\n\t\t\t\t\t\t}\n\t\t\t\t\t}else if(\"word\".equals(ops2)){\n\t\t\t\t\t\tboolean flag = false;\n\t\t\t\t\t\tboolean found = false;\n\t\t\t\t\t\tint del = -1;\n\t\t\t\t\t\t\n\t\t\t\t\t\tfor(int k = pos; k < list.size(); k++){\n\t\t\t\t\t\t\tif(!found && list.get(k) == ' '){\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}else if(list.get(k) == ' '){\n\t\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\t\t\tdel = k - 1;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(flag){\n\t\t\t\t\t\t\tfor(int k = pos; k <= del; k++){\n\t\t\t\t\t\t\t\tlist.remove(pos);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}else if(\"insert\".equals(ops1)){\n\t\t\t\t\tchar[] input = ops2.replaceAll(\"\\\"\", \"\").toCharArray();\n\t\t\t\t\t\n\t\t\t\t\tfor(int k = input.length - 1; k >= 0; k--){\n\t\t\t\t\t\tlist.add(pos, input[k]);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tpos += input.length;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfor(int j = 0; j < list.size(); j++){\n\t\t\t\tif(j == pos){\n\t\t\t\t\tSystem.out.print(\"^\");\n\t\t\t\t}\n\t\t\t\tSystem.out.print(list.get(j));\n\t\t\t}\n\t\t\t\n\t\t\tif(list.size() == pos){\n\t\t\t\tSystem.out.print(\"^\");\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t\t\n\t}\n\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\nimport static java.lang.Math.*;\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tfor(int t=Integer.parseInt(sc.nextLine());t>0;t--) {\n\t\t\tStringBuilder sb = new StringBuilder(sc.nextLine());\n\t\t\tint n = sc.nextInt(), p = 0; sc.nextLine();\n\t\t\tfor(;n>0;n--){\n\t\t\t\tString sp = sc.nextLine();\n\t\t\t\tint c1 = sp.charAt(0), c2 = sp.split(\" \")[1].charAt(0);\n\t\t\t\tint c=0;\n\t\t\t\tif(c1=='b') c=-1; else if(c1=='f') c=1; else c=0;\n\t\t\t\tif(c2=='c') { p=min(sb.length(),max(0,p+c)); if(c==0&&sb.length()>p&&p>=0) sb.deleteCharAt(p); }\n\t\t\t\telse if(c2=='w')for(p=min(sb.length(), max(-1, p+c));0<=p&&p<sb.length();p=p+c) if(sb.charAt(p)==' ') break; else if(c==0)sb.deleteCharAt(p);\n\t\t\t\tif(c1=='i') { sb.insert(p, sp.substring(8, sp.length()-1)); p+=sp.length()-9;}\n\t\t\t}\n\t\t\tp=min(sb.length(),max(0,p));\n\t\t\tSystem.out.println(sb.substring(0, p) + \"^\" + sb.substring(p));\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Deque;\nimport java.util.HashMap;\nimport java.util.InputMismatchException;\nimport java.util.Map;\nimport java.util.PriorityQueue;\nimport java.math.BigInteger;\nimport java.math.BigDecimal;\n      \npublic class Main{\n  \nstatic final InputStream in=System.in;\nstatic final PrintWriter out=new PrintWriter(System.out);\nstatic final int INF=Integer.MAX_VALUE/2;\nstatic final long LINF=Long.MAX_VALUE/2;\nstatic int MAX=10000;\nstatic char[] str=new char[MAX+1];\n  \npublic static void main(String[] args) throws IOException{\n  BufferedReader br=new BufferedReader(new InputStreamReader(in));\n  int n=Integer.parseInt(br.readLine());\n  while(n-->0){\n    String line=br.readLine();\n    int cur=0;\n    for(int i=0;i<=MAX;i++) str[i]='-';\n    for(int i=0;i<line.length();i++) str[i]=line.charAt(i);\n    int m=Integer.parseInt(br.readLine());\n    while(m-->0){\n      String[] com=br.readLine().split(\" \");\n      String com0=com[0];\n      String com1=com[1];\n      if(\"forward\".equals(com0)){\n        if(\"char\".equals(com1)&&str[cur]!='-') cur++;\n        else{\n          while(str[cur]==' ') cur++;\n          while(str[cur]!=' '&&str[cur]!='-') cur++;\n        }\n      }\n      else if(\"backward\".equals(com0)){\n        if(\"char\".equals(com1)&&cur!=0) cur--;\n        else{\n          while(cur!=0&&str[cur-1]==' ') cur--;\n          while(cur!=0&&str[cur-1]!=' ') cur--;\n        }\n      }\n      else if(\"insert\".equals(com0)){\n        if(com1.length()>2){\n          String insertionStr=com[1].substring(1,com1.length()-1);\n          for(int i=MAX-insertionStr.length();i>=cur;i--){\n            str[i+insertionStr.length()]=str[i];\n          }\n          for(int i=0;i<insertionStr.length();i++){\n            str[cur+i]=insertionStr.charAt(i);\n          }\n          cur+=insertionStr.length();\n        }\n      }\n      else{\n        if(\"char\".equals(com1)&&str[cur]!='-'){\n          for(int i=cur;i<=MAX;i++){\n            if(str[i]=='-') break;\n            str[i]=str[i+1];\n          }\n        }\n        else{\n          int cnt=cur;\n          boolean flag=false;\n          while(str[cnt]==' ') cnt++;\n          while(str[cnt]!=' '&&str[cnt]!='-'){\n            cnt++;\n            flag=true;\n          }\n          if(flag){\n            for(int i=cnt;i<=MAX;i++){\n              if(str[i-cnt+cur]=='-') break;\n              str[i-cnt+cur]=str[i];\n            }\n          }\n        }\n      }\n    }\n    for(int i=0;;i++){\n      if(i==cur) out.print(\"^\");\n      if(str[i]=='-') break;\n      out.print(String.valueOf(str[i]));\n    }\n    out.println();\n  }\nout.flush();\n}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\nclass Main{\n    void run(){\n\tScanner sc=new Scanner(System.in);\n\tint M=sc.nextInt();\n\tsc.nextLine();\n\tfor(int attend=0;attend<M;attend++){\n\t    StringBuffer text=new StringBuffer(sc.nextLine());\n\t    int cur=0;\n\t    int n=sc.nextInt();\n\t    String command1;\n\t    String command2;\n\t    sc.nextLine();\n\t    for(int i=0;i<n;i++){\n\t\tString command=sc.nextLine();\n\t\t//System.out.println(command);\n\t\tfor(int j=0;;j++){\n\t\t    if(command.charAt(j)==' '){\n\t\t\tcommand1=command.substring(0,j);\n\t\t\tcommand2=command.substring(j+1);\n\t\t\tbreak;\n\t\t    }\n\t\t}\n\t\tif(\"forward\".equals(command1)){\n\t\t    if(\"char\".equals(command2)){\n\t\t\tcur=cur<text.length()? cur+1:cur;    \n\t\t    }\n\t\t    else{\n\t\t\tfor(;cur<text.length()&&text.charAt(cur)==' ';cur++);\n\t\t\tfor(;cur<text.length()&&text.charAt(cur)!=' ';cur++);\n\t\t    }\n\t\t}\n\t\tif(\"backward\".equals(command1)){\n\t\t    if(\"char\".equals(command2)){\n\t\t\tcur=cur>0? cur-1:cur;    \n\t\t    }\n\t\t    else{\n\t\t\tfor(;cur>0&&text.charAt(cur-1)==' ';cur--);\n\t\t\tfor(;cur>0&&text.charAt(cur-1)!=' ';cur--);\n\t\t    }  \n\t\t}\n\t\tif(\"insert\".equals(command1)){\n\t\t    text.insert(cur,command2.substring(1,command2.length()-1));\n\t\t    cur+=command2.length()-2;\n\t\t}\t\t       \n\t\tif(\"delete\".equals(command1)){\n\t\t    if(\"char\".equals(command2)){\n\t\t\tif(cur!=text.length()){\n\t\t\t    text.deleteCharAt(cur);\n\t\t\t}\n\t\t    }\n\t\t    else{\n\t\t\tint temp=cur;\n\t\t\tfor(;temp<text.length()&&text.charAt(temp)==' ';temp++);\n\t\t\tif(temp!=text.length()){\n\t\t\t    for(;temp<text.length()&&text.charAt(temp)!=' ';temp++);\n\t\t\t    text.delete(cur,temp);\n\t\t\t}\n\t\t    }\n\t\t}\n\t\t//print(text,cur);\n\t    }\n\t    print(text,cur);\n\t}\n\t\n    }\n    void print(StringBuffer text,int cur){\n\t    text.insert(cur,\"^\");\n\t    System.out.println(text);\n\t    text.deleteCharAt(cur);\n    }\n    public static void main(String[] args){\n\tnew Main().run();\n    }\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Deque;\nimport java.util.HashMap;\nimport java.util.InputMismatchException;\nimport java.util.Map;\nimport java.util.PriorityQueue;\nimport java.math.BigInteger;\nimport java.math.BigDecimal;\n       \npublic class Main{\n   \nstatic final InputStream in=System.in;\nstatic final PrintWriter out=new PrintWriter(System.out);\nstatic final int INF=Integer.MAX_VALUE/2;\nstatic final long LINF=Long.MAX_VALUE/2;\nstatic int MAX=1000;\nstatic char[] str=new char[MAX+1];\n   \npublic static void main(String[] args) throws IOException{\n  BufferedReader br=new BufferedReader(new InputStreamReader(in));\n  int n=Integer.parseInt(br.readLine());\n  while(n-->0){\n    String line=br.readLine();\n    int cur=0;\n    Arrays.fill(str,'-');\n    for(int i=0;i<line.length();i++) str[i]=line.charAt(i);\n    int m=Integer.parseInt(br.readLine());\n    while(m-->0){\n      String com=br.readLine();\n      String com0=com.substring(0,com.indexOf(\" \"));\n      String com1=com.substring(com.indexOf(\" \")+1);\n      if(\"forward\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(str[cur]!='-') cur++;\n        }\n        else if(\"word\".equals(com1)){\n          while(str[cur]==' ') cur++;\n          while(str[cur]!=' '&&str[cur]!='-') cur++;\n        }\n      }\n      else if(\"backward\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(cur>0) cur--;\n        }\n        else if(\"word\".equals(com1)){\n          while(cur>0&&str[cur-1]==' ') cur--;\n          while(cur>0&&str[cur-1]!=' ') cur--;\n        }\n      }\n      else if(\"insert\".equals(com0)){\n        if(com.length()>9){\n          String insertionStr=com.substring(8,com.length()-1);\n          for(int i=MAX-insertionStr.length();i>=cur;i--){\n            if(str[i]!='-') str[i+insertionStr.length()]=str[i];\n          }\n          for(int i=0;i<insertionStr.length();i++){\n            str[cur+i]=insertionStr.charAt(i);\n          }\n          cur+=insertionStr.length();\n        }\n      }\n      else if(\"delete\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(str[cur]!='-'){\n            for(int i=cur;;i++){\n              if(str[i]=='-') break;\n              str[i]=str[i+1];\n            }\n          }\n        }\n        else if(\"word\".equals(com1)){\n          int cnt=cur;\n          while(str[cnt]==' ') cnt++;\n          if(str[cnt]!='-'){\n            while(str[cnt]!=' '&&str[cnt]!='-') cnt++;\n            for(int i=cur;;i++){\n              if(str[i]=='-') break;\n              str[i]=str[i-cur+cnt];\n            }\n          }\n        }\n      }\n    }\n    StringBuilder sb=new StringBuilder();\n    for(int i=0;;i++){\n      if(i==cur) sb.append(\"^\");\n      if(str[i]=='-') break;\n      sb.append(String.valueOf(str[i]));\n    }\n    out.println(sb);\n    out.flush();\n  }\n}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\n\npublic class Main{\n\t//0032 starting\n\t\n\tprivate void doit(){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint ds = Integer.parseInt(sc.nextLine());\n\t\twhile(ds-- > 0){\n\t\t\tStringBuilder s = new StringBuilder(sc.nextLine());\n\t\t\tint pos = 0;\n\t\t\tint q = Integer.parseInt(sc.nextLine());\n\t\t\twhile(q-- > 0){\n\t\t\t\tString com = sc.nextLine();\n\t\t\t\tString [] coms = com.split(\" \");\n\t\t\t\tswitch (coms[0].charAt(0)) {\n\t\t\t\tcase 'f':\n\t\t\t\t\tif(coms[1].charAt(0) == 'c'){\n\t\t\t\t\t\tpos++;\n\t\t\t\t\t\tif(pos > s.length()) pos--;\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tpos = findFW(s, pos);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'b':\n\t\t\t\t\tif(coms[1].charAt(0) == 'c'){\n\t\t\t\t\t\tpos--;\n\t\t\t\t\t\tif(pos < 0) pos = 0;\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tpos = findBW(s, pos);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'i':\n\t\t\t\t\tString temp = com.substring(7);\n\t\t\t\t\ts.insert(pos, temp.replaceAll(\"\\\"\", \"\"));\n\t\t\t\t\tpos += temp.length() - 2;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'd':\n\t\t\t\t\tif(coms[1].charAt(0) == 'c'){\n\t\t\t\t\t\tif(pos != s.length()){\n\t\t\t\t\t\t\ts.deleteCharAt(pos);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tint res = findB(s, pos);\n\t\t\t\t\t\ts.delete(pos, res + 1);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t//print\n\t\t\ts.insert(pos, '^');\n\t\t\tSystem.out.println(s.toString());\n\t\t}\n\t}\n\n\tprivate int findFW(StringBuilder s, int pos) {\n\t\tif(s.length() == pos) return pos;\n\t\tint nowpos = pos;\n\t\tif(s.charAt(pos) == ' '){\n\t\t\tfor(int i = pos; i < s.length(); i++){\n\t\t\t\tif(s.charAt(i) != ' '){\n\t\t\t\t\tnowpos = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(int i = nowpos; i < s.length(); i++){\n\t\t\tif(s.charAt(i) == ' '){\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn s.length();\n\t}\n\n\tprivate int findB(StringBuilder s, int pos) {\n\t\tif(s.length() == pos) return pos;\n\t\tif(s.charAt(pos) == ' '){\n\t\t\tfor(int i = pos; i < s.length(); i++){\n\t\t\t\tif(s.charAt(i) != ' '){\n\t\t\t\t\treturn i - 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn s.length();\n\t\t}\n\t\tfor(int i = pos; i < s.length(); i++){\n\t\t\tif(s.charAt(i) == ' '){\n\t\t\t\treturn i-1;\n\t\t\t}\n\t\t}\n\t\treturn s.length();\n\t}\n\n\tprivate int findBW(StringBuilder s, int pos) {\n\t\tfor(int i = pos-1; i >= 0; i--){\n\t\t\tif(s.charAt(i) == ' '){\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn 0;\n\t}\n\n\tprivate void debug(Object... o) { System.out.println(\"debug = \" + Arrays.deepToString(o)); }\n\n\tpublic static void main(String[] args) {\n\t\tnew Main().doit();\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\nclass Main{\n    void run(){\n\tScanner sc=new Scanner(System.in);\n\tint M=sc.nextInt();\n\tsc.nextLine();\n\tfor(int attend=0;attend<M;attend++){\n\t    StringBuffer str=new StringBuffer(sc.nextLine());\n\t    int cur=0;\n\t    int n=sc.nextInt();\n\t    String command1;\n\t    String command2;\n\t    sc.nextLine();\n\t    for(int i=0;i<n;i++){\n\t\tString command=sc.nextLine();\n\t\t//System.out.println(command);\n\t\tint index0=0;\n\t\twhile(true){\n\t\t    if(command.charAt(index0)==' '){\n\t\t\tcommand1=command.substring(0,index0);\n\t\t\tcommand2=command.substring(index0+1);\n\t\t\t//System.out.println(command1);\n\t\t\t//System.out.println(command2);\n\t\t\tbreak;\n\t\t    }\n\t\t    index0++;\n\t\t}\n\t\tif(\"forward\".equals(command1)){\n\t\t    if(\"char\".equals(command2)){\n\t\t\tcur=cur<str.length()? cur+1:cur;    \n\t\t    }\n\t\t    else{\n\t\t\tint index=new String(str).indexOf(\" \",cur+1);\n\t\t\tif(index==-1)cur=str.length();\n\t\t\telse{\n\t\t\t    while(true){\n\t\t\t\tif(cur==str.length())break;\n\t\t\t\tif(str.charAt(cur)!=' ')break;\n\t\t\t\tindex++;\n\t\t\t    }\n\t\t\t    cur=index;\n\t\t\t}\n\t\t    }\n\t\t}\n\t\tif(\"backward\".equals(command1)){\n\t\t    if(\"char\".equals(command2)){\n\t\t\tcur=cur>0? cur-1:cur;    \n\t\t    }\n\t\t    else{\n\t\t\tint index=0;\n\t\t\twhile(true){\n\t\t\t    int temp=new String(str).indexOf(\" \",index+1);\n\t\t\t    if(temp>=cur||temp==-1)break;\n\t\t\t    index=temp;\n\t\t\t    //System.out.println(index);\n\t\t\t}\n\t\t\tcur=index;\n\t\t    }  \n\t\t}\n\t\tif(\"insert\".equals(command1)){\n\t\t    //raplaceALL..\n\t\t    command2=new StringBuffer(command2).deleteCharAt(0).toString();\n\t\t    command2=new StringBuffer(command2).deleteCharAt(command2.length()-1).toString();\n\t\t    str.insert(cur,command2);\n\t\t    cur+=command2.length();\n\t\t}\t\t       \n\t\tif(\"delete\".equals(command1)){\n\t\t    if(\"char\".equals(command2)){\n\t\t\tif(cur!=str.length()){\n\t\t\t    str.deleteCharAt(cur);\n\t\t\t}\n\t\t    }\n\t\t    else{\n\t\t\twhile(true){\n\t\t\t    if(cur==str.length())break;\n\t\t\t    if(str.charAt(cur)!=' ')break;\n\t\t\t    str.deleteCharAt(cur);\n\t\t\t}\n\t\t\twhile(true){\n\t\t\t    if(cur==str.length())break;\n\t\t\t    if(str.charAt(cur)==' ')break;\n\t\t\t    str.deleteCharAt(cur);\n\t\t\t}\t\t\t\t\n\t\t    }\n\t\t}\n\t\n\t\t\n\t    }\n\t    print(str,cur);\n\t}\n\t\n    }\n    void print(StringBuffer str,int cur){\n\t    str.insert(cur,\"^\");\n\t    System.out.println(str);\n\t    str.deleteCharAt(cur);\n    }\n    public static void main(String[] args){\n\tnew Main().run();\n    }\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.InputStreamReader;\n\n/*\n\t0 <= cursor <= text.length()\n*/\n\n//public class Problem1101_ASimpleOfflineTextEditor {\npublic class Main {\n\t\n\tprivate String text;\n\tprivate int cursor;\n\t\n\tpublic static void main(String[] args) {\n\t\ttry {\n\t\t//\tProblem1101_ASimpleOfflineTextEditor test = new Problem1101_ASimpleOfflineTextEditor();\n\t\t\tMain test = new Main();\n\t\t\t\n\t\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n\t\t\t\n\t\t\tint caseCount = Integer.parseInt(reader.readLine());\n\t\t\tint caseNumber = 0;\n\t\t\tfor(int i = 0; i < caseCount; i++) {\n\t\t\t\t\n\t\t\t\ttest.initialize(reader.readLine());\n\t\t\t\tint editCount = Integer.parseInt(reader.readLine());\n\t\t\t\tfor(int j = 0; j < editCount; j++) {\n\t\t\t\t\ttest.doCommand(reader.readLine());\n\t\t\t\t}\n\t\t\t\ttest.showAnswer();\n\t\t\t}\n\t\t} catch(Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\tvoid initialize(String line) {\n\t\tsetText(line);\n\t\tcursor = 0;\n\t//\tSystem.out.println(\"ツ渉可甘コツ可サ:cursor:\" + cursor + \"\\t\" + text);\n\t}\n\tvoid doCommand(String command) {\n\t\tif(command.startsWith(\"forward c\")) {\n\t//\t\tSystem.out.println(\"ツコツマツδ督ド:\" + command);\n\t\t\tforwardChar();\n\t\t} else if(command.startsWith(\"forward w\")) {\n\t//\t\tSystem.out.println(\"ツコツマツδ督ド:\" + command);\n\t\t\tforwardWord();\n\t\t} else if(command.startsWith(\"backward c\")) {\n\t//\t\tSystem.out.println(\"ツコツマツδ督ド:\" + command);\n\t\t\tbackwardChar();\n\t\t} else if(command.startsWith(\"backward w\")) {\n\t//\t\tSystem.out.println(\"ツコツマツδ督ド:\" + command);\n\t\t\tbackwardWord();\n\t\t} else if(command.startsWith(\"insert\")) {\n\t//\t\tSystem.out.println(\"ツコツマツδ督ド:\" + command);\n\t\t\tinsert(command.substring(8, command.length()-1));\n\t\t} else if(command.startsWith(\"delete c\")) {\n\t//\t\tSystem.out.println(\"ツコツマツδ督ド:\" + command);\n\t\t\tdeleteChar();\n\t\t} else if(command.startsWith(\"delete w\")) {\n\t//\t\tSystem.out.println(\"ツコツマツδ督ド:\" + command);\n\t\t\tdeleteWord();\n\t\t} else {\n\t//\t\tSystem.out.println(\"**ツコツマツδ督ドツエツδ可ー:\" + command);\n\t\t}\n\t//\tSystem.out.println(\"text:\\t\" + text + \"\\tcursor: \" + cursor);\n\t//\tshowAnswer();\n\t}\n\tprivate void forwardChar() {\n\t\tif(cursor < text.length()) {\n\t//\t\tSystem.out.println(\"ツ北ツ北\");\n\t\t\tcursor++;\n\t\t}\n\t}\n\tprivate void forwardWord() {\n\t\tif(cursor == text.length() || text.length() == 0) {\n\t\t\treturn;\n\t\t}\n\t//\tcursor++;\n\t\twhile(text.charAt(cursor) == ' ') {\n\t\t\tcursor++;\n\t\t}\n\t\tfor(int i = cursor; i < text.length(); i++) {\n\t\t\tchar targetChar = text.charAt(i);\n\t\t\tif(targetChar == ' ') {\n\t\t\t/*\twhile(text.charAt(i+1) == ' ') {\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t*/\t\n\t\t\t\tcursor = i;\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\t//do more\n\t\t\t}\n\t\t}\n\t\tcursor = text.length();\n\t}\n\tprivate void backwardChar() {\n\t\tif(0 < cursor) {\n\t\t\tcursor--;\n\t\t}\n\t}\n\tprivate void backwardWord() {\n\t\tif(cursor < 1) {\n\t\t\tcursor = 0;\n\t\t\treturn;\n\t\t}\n\t//\tcursor--;\n\t\twhile(text.charAt(cursor-1) == ' ') {\n\t\t\tcursor--;\n\t\t}\n\t\tfor(int i = cursor; i > 0; i--) {\t//ツ催渉可づ個閉カツ篠堋つェツ凝ウツ板陳つセツづつスツ湘ェツ債づ可妥篠可楪つキツづゥツつスツづ淞０ツづ慊づ確ツ認ツつキツづゥ\n\t\t\tchar targetChar = text.charAt(i-1);\n\t\t\tif(targetChar == ' ') {\n\t\t\t\tcursor = i;\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\t//do more\n\t\t\t}\n\t\t}\n\t\tcursor = 0;\n\t}\n\tprivate void insert(String txt) {\n\t\tStringBuilder builder = new StringBuilder(text.substring(0, cursor));\n\t\tbuilder.append(txt);\n\t\tbuilder.append(text.substring(cursor));\n\t\t\n\t\tsetText(builder.toString());\n\t\tcursor += txt.length();\n\t}\n\tprivate void deleteChar() {\n\t\tif(text.length() == cursor) {\t//cursor == text.length()-1 ツづ按づァツ催古」ツ氾カツづ可つ\n\t\t\treturn;\n\t\t} else if(cursor == text.length()-1) {\n\t\t\tsetText(text.substring(0,text.length()-1));\n\t\t\treturn;\n\t\t}\n\t\tStringBuilder builder = new StringBuilder(text.substring(0, cursor));\n\t\tbuilder.append(text.substring(cursor+1));\n\t\t\n\t\tsetText(builder.toString());\n\t}\n\tprivate void deleteWord() {\n\t\tif(text.length() == cursor) {\t//cursor == text.length() ÈçÅãöÉ éÌÅ½àµÈ¢B\n\t\t\treturn;\n\t\t} else if(cursor == text.length()-1) {\n\t\t\tsetText(text.substring(0,text.length()-1));\n\t\t\treturn;\n\t\t}\n\t\tint start = cursor;\n\t//\tmoveToEndOfWord();\n\t\tforwardWord();\n\t\t\n\t\tStringBuilder builder = new StringBuilder(text.substring(0, start));\n\t\tbuilder.append(text.substring(cursor));\n\t\t\n\t\tsetText(builder.toString());\n\t\tcursor = start;\n\t}\n\tprivate void moveToEndOfWord() {\n\t\tif(cursor == text.length()-1) {\n\t\t\treturn;\n\t\t}\n\t\twhile(text.charAt(cursor) == ' ') {\n\t\t\tcursor++;\n\t\t}\n\t\tfor(int i = cursor; i < text.length(); i++) {\n\t\t\tchar targetChar = text.charAt(i);\n\t\t\tif(targetChar == ' ') {\n\t\t\t\tcursor = i-1;\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\t//do more\n\t\t\t}\n\t\t}\n\t\tcursor = text.length()-1;\n\t}\n\tprivate void setText(String txt) {\n\t\ttext = txt;\n\t}\n\tvoid showAnswer() {\n\t//\tSystem.out.println(\"text:\\t\" + text + \"\\tcursor: \" + cursor);\n\t\t\n\t\tStringBuilder resultBuilder;\n\t\tif(cursor == text.length()) {\n\t\t\tresultBuilder = new StringBuilder(text);\n\t\t\tresultBuilder.append(\"^\");\n\t\t} else {\n\t\t\tresultBuilder = new StringBuilder(text.substring(0, cursor));\n\t\t\tresultBuilder.append(\"^\");\n\t\t\tresultBuilder.append(text.substring(cursor));\n\t\t}\n\t\tSystem.out.println(resultBuilder.toString());\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.InputStream;\nimport java.io.PrintWriter;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Deque;\nimport java.util.HashMap;\nimport java.util.InputMismatchException;\nimport java.util.Map;\nimport java.util.PriorityQueue;\nimport java.util.Scanner;\nimport java.math.BigInteger;\nimport java.math.BigDecimal;\n      \npublic class Main{\n  \nstatic final InputStream in=System.in;\nstatic final PrintWriter out=new PrintWriter(System.out);\nstatic final int INF=Integer.MAX_VALUE/2;\nstatic final long LINF=Long.MAX_VALUE/2;\nstatic int MAX=10000;\nstatic char[] str=new char[MAX+1];\n  \npublic static void main(String[] args){\n  Scanner sc=new Scanner(in);\n  int n=sc.nextInt(); sc.nextLine();\n  while(n-->0){\n    String line=sc.nextLine();\n    int cur=0;\n    Arrays.fill(str,'-');\n    for(int i=0;i<line.length();i++) str[i]=line.charAt(i);\n    int m=sc.nextInt(); sc.nextLine();\n    while(m-->0){\n      String com0=sc.next();\n      String com1=sc.next();\n      sc.nextLine();\n      if(\"forward\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(str[cur]!='-') cur++;\n        }\n        else{\n          while(str[cur]==' ') cur++;\n          while(str[cur]!=' '&&str[cur]!='-') cur++;\n        }\n      }\n      else if(\"backward\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(cur>0) cur--;\n        }\n        else{\n          while(cur>0&&str[cur-1]==' ') cur--;\n          while(cur>0&&str[cur-1]!=' ') cur--;\n        }\n      }\n      else if(\"insert\".equals(com0)){\n        if(com1.length()>2){\n          String insertionStr=com1.substring(1,com1.length()-1);\n          for(int i=MAX-insertionStr.length();i>=cur;i--){\n            if(str[i]!='-') str[i+insertionStr.length()]=str[i];\n          }\n          for(int i=0;i<insertionStr.length();i++){\n            str[cur+i]=insertionStr.charAt(i);\n          }\n          cur+=insertionStr.length();\n        }\n      }\n      else if(\"delete\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(str[cur]!='-'){\n            for(int i=cur;;i++){\n              if(str[i]=='-') break;\n              str[i]=str[i+1];\n            }\n          }\n        }\n        else{\n          int cnt=cur;\n          while(str[cnt]==' ') cnt++;\n          if(str[cnt]!='-'){\n            while(str[cnt]!=' '&&str[cnt]!='-') cnt++;\n            for(int i=cur;;i++){\n              if(str[i]=='-') break;\n              str[i]=str[i-cur+cnt];\n            }\n          }\n        }\n      }\n    }\n    StringBuilder sb=new StringBuilder();\n    for(int i=0;;i++){\n      if(i==cur) sb.append(\"^\");\n      if(str[i]=='-') break;\n      sb.append(String.valueOf(str[i]));\n    }\n    out.println(sb);\n  }\nout.flush();\n}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Deque;\nimport java.util.HashMap;\nimport java.util.InputMismatchException;\nimport java.util.Map;\nimport java.util.PriorityQueue;\nimport java.util.StringTokenizer;\nimport java.math.BigInteger;\nimport java.math.BigDecimal;\n      \npublic class Main{\n  \nstatic final InputStream in=System.in;\nstatic final PrintWriter out=new PrintWriter(System.out);\nstatic final int INF=Integer.MAX_VALUE/2;\nstatic final long LINF=Long.MAX_VALUE/2;\nstatic int MAX=1000000;\nstatic char[] str=new char[MAX+1];\n  \npublic static void main(String[] args) throws IOException{\n  BufferedReader br=new BufferedReader(new InputStreamReader(in));\n  int n=Integer.parseInt(br.readLine());\n  while(n-->0){\n    String line=br.readLine();\n    int cur=0;\n    for(int i=0;i<=MAX;i++) str[i]='-';\n    for(int i=0;i<line.length();i++) str[i]=line.charAt(i);\n    int m=Integer.parseInt(br.readLine());\n    while(m-->0){\n      StringTokenizer st=new StringTokenizer(br.readLine());\n      String com0=st.nextToken();\n      String com1=st.nextToken();\n      if(\"forward\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(str[cur]!='-') cur++;\n        }\n        else{\n          while(str[cur]==' ') cur++;\n          while(str[cur]!=' '&&str[cur]!='-') cur++;\n        }\n      }\n      else if(\"backward\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(cur>0) cur--;\n        }\n        else{\n          while(cur>0&&str[cur-1]==' ') cur--;\n          while(cur>0&&str[cur-1]!=' ') cur--;\n        }\n      }\n      else if(\"insert\".equals(com0)){\n        if(com1.length()>2){\n          String insertionStr=com1.substring(1,com1.length()-1);\n          for(int i=MAX-insertionStr.length();i>=cur;i--){\n            if(str[i]!='-') str[i+insertionStr.length()]=str[i];\n          }\n          for(int i=0;i<insertionStr.length();i++){\n            str[cur+i]=insertionStr.charAt(i);\n          }\n          cur+=insertionStr.length();\n        }\n      }\n      else if(\"delete\".equals(com0)){\n        if(\"char\".equals(com1)&&str[cur]!='-'){\n          for(int i=cur;;i++){\n            if(str[i]=='-') break;\n            str[i]=str[i+1];\n          }\n        }\n        else{\n          int cnt=cur;\n          while(str[cnt]==' ') cnt++;\n          if(str[cnt]!='-'){\n            while(str[cnt]!=' '&&str[cnt]!='-') cnt++;\n            for(int i=cur;;i++){\n              if(str[i]=='-') break;\n              str[i]=str[i-cur+cnt];\n            }\n          }\n        }\n      }\n    }\n    StringBuilder sb=new StringBuilder();\n    for(int i=0;;i++){\n      if(i==cur) sb.append(\"^\");\n      if(str[i]=='-') break;\n      sb.append(String.valueOf(str[i]));\n    }\n    out.println(sb);\n  }\nout.flush();\n}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\n\npublic class Main{\n\t//0032 starting\n\t\n\tprivate void doit(){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint ds = Integer.parseInt(sc.nextLine());\n\t\twhile(ds-- > 0){\n\t\t\tStringBuilder s = new StringBuilder(sc.nextLine());\n\t\t\tint pos = 0;\n\t\t\tint q = Integer.parseInt(sc.nextLine());\n\t\t\twhile(q-- > 0){\n\t\t\t\tString com = sc.nextLine();\n\t\t\t\tString [] coms = com.split(\" \");\n\t\t\t\tswitch (coms[0].charAt(0)) {\n\t\t\t\tcase 'f':\n\t\t\t\t\tif(coms[1].charAt(0) == 'c'){\n\t\t\t\t\t\tpos++;\n\t\t\t\t\t\tif(pos > s.length()) pos--;\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tpos = findFW(s, pos);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'b':\n\t\t\t\t\tif(coms[1].charAt(0) == 'c'){\n\t\t\t\t\t\tpos--;\n\t\t\t\t\t\tif(pos < 0) pos = 0;\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tpos = findBW(s, pos);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'i':\n\t\t\t\t\tString temp = com.substring(7);\n\t\t\t\t\ts.insert(pos, temp.replaceAll(\"\\\"\", \"\"));\n\t\t\t\t\tpos += temp.length() - 2;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'd':\n\t\t\t\t\tif(coms[1].charAt(0) == 'c'){\n\t\t\t\t\t\tif(pos != s.length()){\n\t\t\t\t\t\t\ts.deleteCharAt(pos);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tint res = findB(s, pos);\n\t\t\t\t\t\ts.delete(pos, res + 1);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t//print\n\t\t\ts.insert(pos, '^');\n\t\t\tSystem.out.println(s.toString());\n\t\t}\n\t}\n\n\tprivate int findFW(StringBuilder s, int pos) {\n\t\tif(s.length() == pos) return pos;\n\t\tint nowpos = pos;\n\t\tif(s.charAt(pos) == ' '){\n\t\t\tfor(int i = pos; i < s.length(); i++){\n\t\t\t\tif(s.charAt(i) != ' '){\n\t\t\t\t\tnowpos = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(nowpos == pos){\n\t\t\t\treturn s.length();\n\t\t\t}\n\t\t}\n\t\tfor(int i = nowpos; i < s.length(); i++){\n\t\t\tif(s.charAt(i) == ' '){\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn s.length();\n\t}\n\n\tprivate int findB(StringBuilder s, int pos) {\n\t\tif(s.length() == pos) return pos;\n\t\tif(s.charAt(pos) == ' '){\n\t\t\tfor(int i = pos; i < s.length(); i++){\n\t\t\t\tif(s.charAt(i) != ' '){\n\t\t\t\t\treturn i - 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn s.length();\n\t\t}\n\t\tfor(int i = pos; i < s.length(); i++){\n\t\t\tif(s.charAt(i) == ' '){\n\t\t\t\treturn i-1;\n\t\t\t}\n\t\t}\n\t\treturn s.length();\n\t}\n\n\tprivate int findBW(StringBuilder s, int pos) {\n\t\tif(pos == 0) return pos;\n\t\tint nowpos = pos-1;\n\t\tif(s.charAt(nowpos) == ' '){\n\t\t\tfor(int i = nowpos; i >= 0; i--){\n\t\t\t\tif(s.charAt(i) != ' '){\n\t\t\t\t\tnowpos = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(nowpos == pos-1){\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t\tfor(int i =nowpos; i >= 0; i--){\n\t\t\tif(s.charAt(i) == ' '){\n\t\t\t\treturn i + 1;\n\t\t\t}\n\t\t}\n\t\treturn 0;\n\t}\n\n\tprivate void debug(Object... o) { System.out.println(\"debug = \" + Arrays.deepToString(o)); }\n\n\tpublic static void main(String[] args) {\n\t\tnew Main().doit();\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\nclass Main{\n    void run(){\n\tScanner sc=new Scanner(System.in);\n\tint M=sc.nextInt();\n\tsc.nextLine();\n\tfor(int attend=0;attend<M;attend++){\n\t    StringBuffer str=new StringBuffer(sc.nextLine());\n\t    int cur=0;\n\t    int n=sc.nextInt();\n\t    String command1;\n\t    String command2;\n\t    sc.nextLine();\n\t    for(int i=0;i<n;i++){\n\t\tString command=sc.nextLine();\n\t\tint index0=0;\n\t\twhile(true){\n\t\t    if(command.charAt(index0)==' '){\n\t\t\tcommand1=command.substring(0,index0);\n\t\t\tcommand2=command.substring(index0+1);\n\t\t\tbreak;\n\t\t    }\n\t\t    index0++;\n\t\t}\n\t\tif(\"forward\".equals(command1)){\n\t\t    if(\"char\".equals(command2)){\n\t\t\tcur=cur<str.length()? cur+1:cur;    \n\t\t    }\n\t\t    else{\n\t\t\tint index=new String(str).indexOf(\" \",cur+1);\n\t\t\tif(index==-1)cur=str.length();\n\t\t\telse cur=index;\n\t\t    }\n\t\t}\n\t\tif(\"backward\".equals(command1)){\n\t\t    if(\"char\".equals(command2)){\n\t\t\tcur=cur>0? cur-1:cur;    \n\t\t    }\n\t\t    else{\n\t\t\tint index=0;\n\t\t\twhile(true){\n\t\t\t    int temp=new String(str).indexOf(\" \",index+1);\n\t\t\t    if(temp>=cur||temp==-1)break;\n\t\t\t    index=temp;\n\t\t\t    //System.out.println(index);\n\t\t\t}\n\t\t\tcur=index;\n\t\t    }  \n\t\t}\n\t\tif(\"insert\".equals(command1)){\n\t\t    //raplaceALL..\n\t\t    command2=new StringBuffer(command2).deleteCharAt(0).toString();\n\t\t    command2=new StringBuffer(command2).deleteCharAt(command2.length()-1).toString();\n\t\t    str.insert(cur,command2);\n\t\t    cur+=command2.length();\n\t\t}\t\t       \n\t\tif(\"delete\".equals(command1)){\n\t\t    if(\"char\".equals(command2)){\n\t\t\tif(cur!=str.length()){\n\t\t\t    str.deleteCharAt(cur);\n\t\t\t}\n\t\t    }\n\t\t    else{\n\t\t\twhile(true){\n\t\t\t    if(cur==str.length())break;\n\t\t\t    if(str.charAt(cur)!=' ')break;\n\t\t\t    str.deleteCharAt(cur);\n\t\t\t}\n\t\t\twhile(true){\n\t\t\t    if(cur==str.length())break;\n\t\t\t    if(str.charAt(cur)==' ')break;\n\t\t\t    str.deleteCharAt(cur);\n\t\t\t}\t\t\t\t\n\t\t    }\n\t\t}\n\t\t\n\t\n\t    }\n\t\tprint(str,cur);    \n\t}\n\t\n    }\n    void print(StringBuffer str,int cur){\n\t    str.insert(cur,\"^\");\n\t    System.out.println(str);\n\t    str.deleteCharAt(cur);\n    }\n    public static void main(String[] args){\n\tnew Main().run();\n    }\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\n\npublic class Main{\n\t//0032 starting\n\t\n\tprivate void doit(){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint ds = Integer.parseInt(sc.nextLine());\n\t\twhile(ds-- > 0){\n\t\t\tStringBuilder s = new StringBuilder(sc.nextLine());\n\t\t\tint pos = 0;\n\t\t\tint q = Integer.parseInt(sc.nextLine());\n\t\t\twhile(q-- > 0){\n\t\t\t\tString com = sc.nextLine();\n\t\t\t\tString [] coms = com.split(\" \");\n\t\t\t\tswitch (coms[0].charAt(0)) {\n\t\t\t\tcase 'f':\n\t\t\t\t\tif(coms[1].charAt(0) == 'c'){\n\t\t\t\t\t\tpos++;\n\t\t\t\t\t\tif(pos > s.length()) pos--;\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tpos = findFW(s, pos);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'b':\n\t\t\t\t\tif(coms[1].charAt(0) == 'c'){\n\t\t\t\t\t\tpos--;\n\t\t\t\t\t\tif(pos < 0) pos = 0;\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tpos = findBW(s, pos);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'i':\n\t\t\t\t\tString temp = com.substring(7);\n\t\t\t\t\ts.insert(pos, temp.replaceAll(\"\\\"\", \"\"));\n\t\t\t\t\tpos += temp.length() - 2;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'd':\n\t\t\t\t\tif(coms[1].charAt(0) == 'c'){\n\t\t\t\t\t\tif(pos != s.length()){\n\t\t\t\t\t\t\ts.deleteCharAt(pos);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tint res = findB(s, pos);\n\t\t\t\t\t\ts.delete(pos, res + 1);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t//print\n\t\t\ts.insert(pos, '^');\n\t\t\tSystem.out.println(s.toString());\n\t\t}\n\t}\n\n\tprivate int findFW(StringBuilder s, int pos) {\n\t\tif(s.length() == pos) return pos;\n\t\tint nowpos = pos;\n\t\tif(s.charAt(pos) == ' '){\n\t\t\tfor(int i = pos; i < s.length(); i++){\n\t\t\t\tif(s.charAt(i) != ' '){\n\t\t\t\t\tnowpos = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(int i = nowpos; i < s.length(); i++){\n\t\t\tif(s.charAt(i) == ' '){\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn s.length();\n\t}\n\n\tprivate int findB(StringBuilder s, int pos) {\n\t\tif(s.length() == pos) return pos;\n\t\tif(s.charAt(pos) == ' '){\n\t\t\tfor(int i = pos; i < s.length(); i++){\n\t\t\t\tif(s.charAt(i) != ' '){\n\t\t\t\t\treturn i - 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn s.length();\n\t\t}\n\t\tfor(int i = pos; i < s.length(); i++){\n\t\t\tif(s.charAt(i) == ' '){\n\t\t\t\treturn i-1;\n\t\t\t}\n\t\t}\n\t\treturn s.length();\n\t}\n\n\tprivate int findBW(StringBuilder s, int pos) {\n\t\tif(pos == 0) return pos;\n\t\tint nowpos = pos-1;\n\t\tif(s.charAt(nowpos) == ' '){\n\t\t\tfor(int i = nowpos; i >= 0; i--){\n\t\t\t\tif(s.charAt(i) != ' '){\n\t\t\t\t\tnowpos = i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(int i =nowpos; i >= 0; i--){\n\t\t\tif(s.charAt(i) == ' '){\n\t\t\t\treturn i + 1;\n\t\t\t}\n\t\t}\n\t\treturn 0;\n\t}\n\n\tprivate void debug(Object... o) { System.out.println(\"debug = \" + Arrays.deepToString(o)); }\n\n\tpublic static void main(String[] args) {\n\t\tnew Main().doit();\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Deque;\nimport java.util.HashMap;\nimport java.util.InputMismatchException;\nimport java.util.Map;\nimport java.util.PriorityQueue;\nimport java.math.BigInteger;\nimport java.math.BigDecimal;\n       \npublic class Main{\n   \nstatic final InputStream in=System.in;\nstatic final PrintWriter out=new PrintWriter(System.out);\nstatic final int INF=Integer.MAX_VALUE/2;\nstatic final long LINF=Long.MAX_VALUE/2;\nstatic int MAX=1000;\nstatic char[] str=new char[MAX+1];\n   \npublic static void main(String[] args) throws IOException{\n  BufferedReader br=new BufferedReader(new InputStreamReader(in));\n  int n=Integer.parseInt(br.readLine());\n  while(n-->0){\n    String line=br.readLine();\n    int cur=0;\n    Arrays.fill(str,'-');\n    for(int i=0;i<line.length();i++) str[i]=line.charAt(i);\n    int m=Integer.parseInt(br.readLine());\n    while(m-->0){\n      String com=br.readLine();\n      String com0=com.substring(0,com.indexOf(\" \"));\n      String com1=com.substring(com.indexOf(\" \")+1);\n      if(\"forward\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(str[cur]!='-') cur++;\n        }\n        else if(\"word\".equals(com1)){\n          while(str[cur]==' ') cur++;\n          while(str[cur]!=' '&&str[cur]!='-') cur++;\n        }\n      }\n      else if(\"backward\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(cur>0) cur--;\n        }\n        else if(\"word\".equals(com1)){\n          while(cur>0&&str[cur-1]==' ') cur--;\n          while(cur>0&&str[cur-1]!=' ') cur--;\n        }\n      }\n      else if(\"insert\".equals(com0)){\n        if(com1.length()>2){\n          String insertionStr=com1.substring(1,com1.length()-1);\n          for(int i=MAX-insertionStr.length();i>=cur;i--){\n            if(str[i]!='-') str[i+insertionStr.length()]=str[i];\n          }\n          for(int i=0;i<insertionStr.length();i++){\n            str[cur+i]=insertionStr.charAt(i);\n          }\n          cur+=insertionStr.length();\n        }\n      }\n      else if(\"delete\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(str[cur]!='-'){\n            for(int i=cur;;i++){\n              if(str[i]=='-') break;\n              str[i]=str[i+1];\n            }\n          }\n        }\n        else if(\"word\".equals(com1)){\n          int cnt=cur;\n          while(str[cnt]==' ') cnt++;\n          if(str[cnt]!='-'){\n            while(str[cnt]!=' '&&str[cnt]!='-') cnt++;\n            for(int i=cur;;i++){\n              if(str[i]=='-') break;\n              str[i]=str[i-cur+cnt];\n            }\n          }\n        }\n      }\n    }\n    StringBuilder sb=new StringBuilder();\n    for(int i=0;;i++){\n      if(i==cur) sb.append(\"^\");\n      if(str[i]=='-') break;\n      sb.append(String.valueOf(str[i]));\n    }\n    out.println(sb);\n    out.flush();\n  }\n}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Deque;\nimport java.util.HashMap;\nimport java.util.InputMismatchException;\nimport java.util.Map;\nimport java.util.PriorityQueue;\nimport java.math.BigInteger;\nimport java.math.BigDecimal;\n      \npublic class Main{\n  \nstatic final InputStream in=System.in;\nstatic final PrintWriter out=new PrintWriter(System.out);\nstatic final int INF=Integer.MAX_VALUE/2;\nstatic final long LINF=Long.MAX_VALUE/2;\nstatic int MAX=10000;\nstatic char[] str=new char[MAX+1];\n  \npublic static void main(String[] args) throws IOException{\n  BufferedReader br=new BufferedReader(new InputStreamReader(in));\n  int n=Integer.parseInt(br.readLine());\n  while(n-->0){\n    String line=br.readLine();\n    int cur=0;\n    for(int i=0;i<=MAX;i++) str[i]='-';\n    for(int i=0;i<line.length();i++) str[i]=line.charAt(i);\n    int m=Integer.parseInt(br.readLine());\n    while(m-->0){\n      String[] com=br.readLine().split(\" \");\n      if(\"forward\".equals(com[0])){\n        if(\"char\".equals(com[1])&&str[cur]!='-') cur++;\n        else{\n          while(str[cur]==' ') cur++;\n          while(str[cur]!=' '&&str[cur]!='-') cur++;\n        }\n      }\n      else if(\"backward\".equals(com[0])){\n        if(\"char\".equals(com[1])&&cur!=0) cur--;\n        else{\n          while(cur!=0&&str[cur-1]==' ') cur--;\n          while(cur!=0&&str[cur-1]!=' ') cur--;\n        }\n      }\n      else if(\"insert\".equals(com[0])){\n        String insertionStr=com[1].substring(1,com[1].length()-1);\n        for(int i=MAX-insertionStr.length();i>=cur;i--){\n          str[i+insertionStr.length()]=str[i];\n        }\n        for(int i=0;i<insertionStr.length();i++){\n          str[cur+i]=insertionStr.charAt(i);\n        }\n      }\n      else{\n        if(\"char\".equals(com[1])&&str[cur]!='-'){\n          for(int i=cur;i<=MAX;i++){\n            if(str[i]=='-') break;\n            str[i]=str[i+1];\n          }\n        }\n        else{\n          int cnt=cur;\n          boolean flag=false;\n          while(str[cnt]==' ') cnt++;\n          while(str[cnt]!=' '&&str[cnt]!='-'){\n            cnt++;\n            flag=true;\n          }\n          if(flag){\n            for(int i=cnt;i<=MAX;i++){\n            if(str[i-cnt+cur]=='-') break;\n              str[i-cnt+cur]=str[i];\n            }\n          }\n        }\n      }\n    }\n    for(int i=0;;i++){\n      if(str[i]=='-') break;\n      if(i==cur) out.print(\"^\");\n      out.print(str[i]);\n    }\n    out.println();\n  }\nout.flush();\n}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\n\nclass Main {\n\tScanner sc = new Scanner(System.in);\n\n\tpublic void run() {\n\t\tint Case=sc.nextInt();sc.nextLine();\n\t\twhile (Case--!=0){\n\t\t\tString str=sc.nextLine();\n\t\t\tint n=sc.nextInt();sc.nextLine();\n\t\t\tint cursor=0;\n\t\t\tfor(int i=0;i<n;i++){\n\t\t\t\tString op=sc.nextLine();\n\t\t\t\tif(\"forward word\".equals(op)){\n\t\t\t\t\tif(str.length()==cursor)continue;\n\t\t\t\t\tif(str.charAt(cursor)==' '){\n\t\t\t\t\t\twhile(cursor<str.length() && str.charAt(cursor)==' ')cursor++;\n\t\t\t\t\t}\n\t\t\t\t\twhile(cursor<str.length() && str.charAt(cursor)!=' ')cursor++;\n\t\t\t\t}else if(\"forward char\".equals(op)){\n\t\t\t\t\tcursor=Math.min(str.length(),cursor+1);\n\t\t\t\t}else if(\"backward word\".equals(op)){\n\t\t\t\t\tif(cursor==0)continue;\n\t\t\t\t\tif(str.charAt(cursor-1)==' '){\n\t\t\t\t\t\twhile(cursor>0  && str.charAt(cursor-1)==' ')cursor--;\n\t\t\t\t\t}\n\t\t\t\t\twhile(cursor>0  && str.charAt(cursor-1)!=' ')cursor--;\n\t\t\t\t}else if(\"backward char\".equals(op)){\n\t\t\t\t\tcursor=Math.max(0, cursor-1);\n\t\t\t\t}else if(\"delete char\".equals(op)){\n\t\t\t\t\tif(cursor==str.length())continue;\n\t\t\t\t\tstr=str.substring(0,cursor)+str.substring(cursor+1);\n\t\t\t\t}else if(\"delete word\".equals(op)){\n\t\t\t\t\tint e=cursor;\n\t\t\t\t\twhile(e<str.length() && str.charAt(e)==' ')e++;\n\t\t\t\t\tif(e==str.length())continue;\n\t\t\t\t\twhile(e<str.length() && str.charAt(e)!=' ')e++;\n\t\t\t\t\tstr=str.substring(0,cursor)+str.substring(e);\n\t\t\t\t}else if(op.startsWith(\"insert\")){\n\t\t\t\t\tint s=-1,e=-1;\n\t\t\t\t\tfor(int index=0;index<op.length();index++){\n\t\t\t\t\t\tif(op.charAt(index)=='\"'){\n\t\t\t\t\t\t\tif(s==-1)s=index;\n\t\t\t\t\t\t\telse e=index;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tString word=op.substring(s+1,e);\n\t\t\t\t\tstr=str.substring(0,cursor)+word+str.substring(cursor);\n\t\t\t\t\tcursor+=word.length();\n\t\t\t\t}\n\t\t\t}\n\t\t\tln(str.substring(0,cursor)+\"^\"+str.substring(cursor));\n\t\t}\n\t}\n\tpublic static void main(String[] args) {\n\t\tnew Main().run();\n\t}\n\tpublic static void pr(Object o) {\n\t\tSystem.out.print(o);\n\t}\n\tpublic static void ln(Object o) {\n\t\tSystem.out.println(o);\n\t}\n\tpublic static void ln() {\n\t\tSystem.out.println();\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Deque;\nimport java.util.HashMap;\nimport java.util.InputMismatchException;\nimport java.util.Map;\nimport java.util.PriorityQueue;\nimport java.util.StringTokenizer;\nimport java.math.BigInteger;\nimport java.math.BigDecimal;\n       \npublic class Main{\n   \nstatic final InputStream in=System.in;\nstatic final PrintWriter out=new PrintWriter(System.out);\nstatic final int INF=Integer.MAX_VALUE/2;\nstatic final long LINF=Long.MAX_VALUE/2;\nstatic int MAX=5000;\nstatic char[] str=new char[MAX+1];\n   \npublic static void main(String[] args) throws IOException{\n  BufferedReader br=new BufferedReader(new InputStreamReader(in));\n  out.println(\"??????\");\n  int n=Integer.parseInt(br.readLine());\n  while(n-->0){\n    String line=br.readLine();\n    int cur=0;\n    Arrays.fill(str,'-');\n    for(int i=0;i<line.length();i++) str[i]=line.charAt(i);\n    int m=Integer.parseInt(br.readLine());\n    while(m-->0){\n      line=br.readLine();\n      String com0=line.split(\" \")[0];\n      String com1=line.split(\" \")[1];\n      if(\"forward\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(str[cur]!='-') cur++;\n        }\n        else if(\"word\".equals(com1)){\n          while(str[cur]==' ') cur++;\n          while(str[cur]!=' '&&str[cur]!='-') cur++;\n        }\n      }\n      else if(\"backward\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(cur>0) cur--;\n        }\n        else if(\"word\".equals(com1)){\n          while(cur>0&&str[cur-1]==' ') cur--;\n          while(cur>0&&str[cur-1]!=' ') cur--;\n        }\n      }\n      else if(\"insert\".equals(com0)){\n        String insertionStr=line.substring(8,line.length()-1);\n        for(int i=MAX-insertionStr.length();i>=cur;i--){\n          if(str[i]!='-') str[i+insertionStr.length()]=str[i];\n        }\n        for(int i=0;i<insertionStr.length();i++){\n          str[cur+i]=insertionStr.charAt(i);\n        }\n        cur+=insertionStr.length();\n      }\n      else if(\"delete\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(str[cur]!='-'){\n            for(int i=cur;;i++){\n              if(str[i]=='-') break;\n              str[i]=str[i+1];\n            }\n          }\n        }\n        else if(\"word\".equals(com1)){\n          int cnt=cur;\n          while(str[cnt]==' ') cnt++;\n          if(str[cnt]!='-'){\n            while(str[cnt]!=' '&&str[cnt]!='-') cnt++;\n            for(int i=cur;;i++){\n              if(str[i]=='-') break;\n              str[i]=str[i-cur+cnt];\n            }\n          }\n        }\n      }\n    }\n    StringBuilder sb=new StringBuilder();\n    for(int i=0;;i++){\n      if(i==cur) sb.append(\"^\");\n      if(str[i]=='-') break;\n      sb.append(String.valueOf(str[i]));\n    }\n    out.println(sb);\n    out.flush();\n  }\n}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Deque;\nimport java.util.HashMap;\nimport java.util.InputMismatchException;\nimport java.util.Map;\nimport java.util.PriorityQueue;\nimport java.math.BigInteger;\nimport java.math.BigDecimal;\n      \npublic class Main{\n  \nstatic final InputStream in=System.in;\nstatic final PrintWriter out=new PrintWriter(System.out);\nstatic final int INF=Integer.MAX_VALUE/2;\nstatic final long LINF=Long.MAX_VALUE/2;\nstatic int MAX=100000;\nstatic char[] str=new char[MAX+1];\n  \npublic static void main(String[] args) throws IOException{\n  BufferedReader br=new BufferedReader(new InputStreamReader(in));\n  int n=Integer.parseInt(br.readLine());\n  while(n-->0){\n    String line=br.readLine();\n    int cur=0;\n    for(int i=0;i<=MAX;i++) str[i]='-';\n    for(int i=0;i<line.length();i++) str[i]=line.charAt(i);\n    int m=Integer.parseInt(br.readLine());\n    while(m-->0){\n      String[] com=br.readLine().split(\" \");\n      if(\"forward\".equals(com[0])){\n        if(\"char\".equals(com[1])&&str[cur]!='-') cur++;\n        else{\n          while(str[cur]==' ') cur++;\n          while(str[cur]!=' '&&str[cur]!='-') cur++;\n        }\n      }\n      else if(\"backward\".equals(com[0])){\n        if(\"char\".equals(com[1])&&cur!=0) cur--;\n        else{\n          while(cur!=0&&str[cur-1]==' ') cur--;\n          while(cur!=0&&str[cur-1]!=' ') cur--;\n        }\n      }\n      else if(\"insert\".equals(com[0])){\n        if(com[1].length()!=2){\n          String insertionStr=com[1].substring(1,com[1].length()-1);\n          for(int i=MAX-insertionStr.length();i>=cur;i--){\n            str[i+insertionStr.length()]=str[i];\n          }\n          for(int i=0;i<insertionStr.length();i++){\n            str[cur+i]=insertionStr.charAt(i);\n          }\n        }\n      }\n      else{\n        if(\"char\".equals(com[1])&&str[cur]!='-'){\n          for(int i=cur;i<=MAX;i++){\n            if(str[i]=='-') break;\n            str[i]=str[i+1];\n          }\n        }\n        else{\n          int cnt=cur;\n          boolean flag=false;\n          while(str[cnt]==' ') cnt++;\n          while(str[cnt]!=' '&&str[cnt]!='-'){\n            cnt++;\n            flag=true;\n          }\n          if(flag){\n            for(int i=cnt;i<=MAX;i++){\n            if(str[i-cnt+cur]=='-') break;\n              str[i-cnt+cur]=str[i];\n            }\n          }\n        }\n      }\n    }\n    for(int i=0;;i++){\n      if(i==cur) out.print(\"^\");\n      if(str[i]=='-') break;\n      out.print(str[i]);\n    }\n    out.println();\n  }\nout.flush();\n}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.InputStream;\nimport java.io.PrintWriter;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Deque;\nimport java.util.HashMap;\nimport java.util.InputMismatchException;\nimport java.util.Map;\nimport java.util.PriorityQueue;\nimport java.util.Scanner;\nimport java.math.BigInteger;\nimport java.math.BigDecimal;\n      \npublic class Main{\n  \nstatic final InputStream in=System.in;\nstatic final PrintWriter out=new PrintWriter(System.out);\nstatic final int INF=Integer.MAX_VALUE/2;\nstatic final long LINF=Long.MAX_VALUE/2;\nstatic int MAX=10000;\nstatic char[] str=new char[MAX+1];\n  \npublic static void main(String[] args){\n  Scanner sc=new Scanner(in);\n  int n=sc.nextInt(); sc.nextLine();\n  while(n-->0){\n    String line=sc.nextLine();\n    int cur=0;\n    Arrays.fill(str,'-');\n    for(int i=0;i<line.length();i++) str[i]=line.charAt(i);\n    int m=sc.nextInt(); sc.nextLine();\n    while(m-->0){\n      String com0=sc.next();\n      String com1=sc.next();\n      sc.nextLine();\n      if(\"forward\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(str[cur]!='-') cur++;\n        }\n        else{\n          while(str[cur]==' ') cur++;\n          while(str[cur]!=' '&&str[cur]!='-') cur++;\n        }\n      }\n      else if(\"backward\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(cur>0) cur--;\n        }\n        else{\n          while(cur>0&&str[cur-1]==' ') cur--;\n          while(cur>0&&str[cur-1]!=' ') cur--;\n        }\n      }\n      else if(\"insert\".equals(com0)){\n        if(com1.length()>2){\n          String insertionStr=com1.substring(1,com1.length()-1);\n          for(int i=MAX-insertionStr.length();i>=cur;i--){\n            if(str[i]!='-') str[i+insertionStr.length()]=str[i];\n          }\n          for(int i=0;i<insertionStr.length();i++){\n            str[cur+i]=insertionStr.charAt(i);\n          }\n          cur+=insertionStr.length();\n        }\n      }\n      else if(\"delete\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(str[cur]!='-'){\n            for(int i=cur;;i++){\n              if(str[i]=='-') break;\n              str[i]=str[i+1];\n            }\n          }\n        }\n        else{\n          int cnt=cur;\n          while(str[cnt]==' ') cnt++;\n          if(str[cnt]!='-'){\n            while(str[cnt]!=' '&&str[cnt]!='-') cnt++;\n            for(int i=cur;;i++){\n              if(str[i]=='-') break;\n              str[i]=str[i-cur+cnt];\n            }\n          }\n        }\n      }\n    }\n    StringBuilder sb=new StringBuilder();\n    for(int i=0;;i++){\n      if(i==cur) sb.append(\"^\");\n      if(str[i]=='-') break;\n      sb.append(String.valueOf(str[i]));\n    }\n    out.println(sb);\n  }\nout.flush();\n}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.InputStream;\nimport java.io.PrintWriter;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Deque;\nimport java.util.HashMap;\nimport java.util.InputMismatchException;\nimport java.util.Map;\nimport java.util.PriorityQueue;\nimport java.util.Scanner;\nimport java.math.BigInteger;\nimport java.math.BigDecimal;\n      \npublic class Main{\n  \nstatic final InputStream in=System.in;\nstatic final PrintWriter out=new PrintWriter(System.out);\nstatic final int INF=Integer.MAX_VALUE/2;\nstatic final long LINF=Long.MAX_VALUE/2;\nstatic int MAX=1500;\nstatic char[] str=new char[MAX+1];\n  \npublic static void main(String[] args){\n  Scanner sc=new Scanner(in);\n  int n=sc.nextInt(); sc.nextLine();\n  while(n-->0){\n    String line=sc.nextLine();\n    int cur=0;\n    Arrays.fill(str,'-');\n    for(int i=0;i<line.length();i++) str[i]=line.charAt(i);\n    int m=sc.nextInt(); sc.nextLine();\n    while(m-->0){\n      String com0=sc.next();\n      String com1=sc.next();\n      sc.nextLine();\n      if(\"forward\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(str[cur]!='-') cur++;\n        }\n        else{\n          while(str[cur]==' ') cur++;\n          while(str[cur]!=' '&&str[cur]!='-') cur++;\n        }\n      }\n      else if(\"backward\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(cur>0) cur--;\n        }\n        else{\n          while(cur>0&&str[cur-1]==' ') cur--;\n          while(cur>0&&str[cur-1]!=' ') cur--;\n        }\n      }\n      else if(\"insert\".equals(com0)){\n        if(com1.length()>2){\n          String insertionStr=com1.substring(1,com1.length()-1);\n          for(int i=MAX-insertionStr.length();i>=cur;i--){\n            if(str[i]!='-') str[i+insertionStr.length()]=str[i];\n          }\n          for(int i=0;i<insertionStr.length();i++){\n            str[cur+i]=insertionStr.charAt(i);\n          }\n          cur+=insertionStr.length();\n        }\n      }\n      else if(\"delete\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(str[cur]!='-'){\n            for(int i=cur;;i++){\n              if(str[i]=='-') break;\n              str[i]=str[i+1];\n            }\n          }\n        }\n        else{\n          int cnt=cur;\n          while(str[cnt]==' ') cnt++;\n          if(str[cnt]!='-'){\n            while(str[cnt]!=' '&&str[cnt]!='-') cnt++;\n            for(int i=cur;;i++){\n              if(str[i]=='-') break;\n              str[i]=str[i-cur+cnt];\n            }\n          }\n        }\n      }\n    }\n    StringBuilder sb=new StringBuilder();\n    for(int i=0;;i++){\n      if(i==cur) sb.append(\"^\");\n      if(str[i]=='-') break;\n      sb.append(String.valueOf(str[i]));\n    }\n    out.println(sb);\n  }\nout.flush();\n}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.InputStreamReader;\n\n//public class Problem1101_ASimpleOfflineTextEditor {\npublic class Main {\n\t\n\tprivate String text;\n\tprivate int cursor;\n\t\n\tpublic static void main(String[] args) {\n\t\ttry {\n\t\t//\tProblem1101_ASimpleOfflineTextEditor test = new Problem1101_ASimpleOfflineTextEditor();\n\t\t\tMain test = new Main();\n\t\t\t\n\t\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n\t\t\t\n\t\t\tint caseCount = Integer.parseInt(reader.readLine());\n\t\t\tint caseNumber = 0;\n\t\t\tfor(int i = 0; i < caseCount; i++) {\n\t\t\t\t\n\t\t\t\ttest.initialize(reader.readLine());\n\t\t\t\tint editCount = Integer.parseInt(reader.readLine());\n\t\t\t\tfor(int j = 0; j < editCount; j++) {\n\t\t\t\t\ttest.doCommand(reader.readLine());\n\t\t\t\t}\n\t\t\t\ttest.showAnswer();\n\t\t\t}\n\t\t} catch(Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\tvoid initialize(String line) {\n\t\tsetText(line);\n\t\tcursor = -1;\n\t//\tSystem.out.println(\"ツ渉可甘コツ可サ:cursor:\" + cursor + \"\\t\" + text);\n\t}\n\tvoid doCommand(String command) {\n\t\tif(command.startsWith(\"forward c\")) {\n\t//\t\tSystem.out.println(\"ツコツマツδ督ド:\" + command);\n\t\t\tforwardChar();\n\t\t} else if(command.startsWith(\"forward w\")) {\n\t//\t\tSystem.out.println(\"ツコツマツδ督ド:\" + command);\n\t\t\tforwardWord();\n\t\t} else if(command.startsWith(\"backward c\")) {\n\t//\t\tSystem.out.println(\"ツコツマツδ督ド:\" + command);\n\t\t\tbackwardChar();\n\t\t} else if(command.startsWith(\"backward w\")) {\n\t//\t\tSystem.out.println(\"ツコツマツδ督ド:\" + command);\n\t\t\tbackwardWord();\n\t\t} else if(command.startsWith(\"insert\")) {\n\t//\t\tSystem.out.println(\"ツコツマツδ督ド:\" + command);\n\t\t\tinsert(command.substring(8, command.length()-1));\n\t\t} else if(command.startsWith(\"delete c\")) {\n\t//\t\tSystem.out.println(\"ツコツマツδ督ド:\" + command);\n\t\t\tdeleteChar();\n\t\t} else if(command.startsWith(\"delete w\")) {\n\t//\t\tSystem.out.println(\"ツコツマツδ督ド:\" + command);\n\t\t\tdeleteWord();\n\t\t} else {\n\t//\t\tSystem.out.println(\"**ツコツマツδ督ドツエツδ可ー:\" + command);\n\t\t}\n\t//\tSystem.out.println(\"text:\\t\" + text + \"\\tcursor: \" + cursor);\n\t}\n\tprivate void forwardChar() {\n\t\tif(cursor < text.length()) {\n\t//\t\tSystem.out.println(\"ツ北ツ北\");\n\t\t\tcursor++;\n\t\t}\n\t}\n\tprivate void forwardWord() {\n\t\tif(cursor == text.length()-1 || text.length() == 0) {\n\t\t\treturn;\n\t\t}\n\t\tcursor++;\n\t\twhile(text.charAt(cursor) == ' ') {\n\t\t\tcursor++;\n\t\t}\n\t\tfor(int i = cursor; i < text.length(); i++) {\n\t\t\tchar targetChar = text.charAt(i);\n\t\t\tif(targetChar == ' ') {\n\t\t\t/*\twhile(text.charAt(i+1) == ' ') {\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t*/\t\n\t\t\t\tcursor = i-1;\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\t//do more\n\t\t\t}\n\t\t}\n\t\tcursor = text.length()-1;\n\t}\n\tprivate void backwardChar() {\n\t\tif(-1 < cursor) {\n\t\t\tcursor--;\n\t\t}\n\t}\n\tprivate void backwardWord() {\n\t/*\tif(cursor == text.length()) {\n\t\t\tcursor--;\n\t\t}\t*/\n\t\tif(cursor < 1) {\n\t\t\tcursor = -1;\n\t\t\treturn;\n\t\t}\n\t\tcursor--;\n\t\twhile(text.charAt(cursor) == ' ') {\n\t\t\tcursor--;\n\t\t}\n\t\tfor(int i = cursor; i > -1; i--) {\t//ツ催渉可づ個閉カツ篠堋つェツ凝ウツ板陳つセツづつスツ湘ェツ債づ可妥篠可楪つキツづゥツつスツづ淞０ツづ慊づ確ツ認ツつキツづゥ\n\t\t\tchar targetChar = text.charAt(i);\n\t\t\tif(targetChar == ' ') {\n\t\t\t\tcursor = i+1;\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\t//do more\n\t\t\t}\n\t\t}\n\t\tcursor = -1;\n\t}\n\tprivate void insert(String txt) {\n\t\tStringBuilder builder = new StringBuilder(text.substring(0, cursor+1));\n\t\tbuilder.append(txt);\n\t\tbuilder.append(text.substring(cursor+1));\n\t\t\n\t\ttext = builder.toString();\n\t\tcursor += txt.length();\n\t}\n\tprivate void deleteChar() {\n\t\tif(cursor == text.length()-1) {\n\t\t\treturn;\n\t\t}\n\t\tStringBuilder builder = new StringBuilder(text.substring(0, cursor+1));\n\t\tbuilder.append(text.substring(cursor+2));\n\t\t\n\t\tsetText(builder.toString());\n\t}\n\tprivate void deleteWord() {\n\t\tif(cursor == text.length()-1) {\n\t\t\treturn;\n\t\t}\n\t\tint start = cursor++;\n\t\tmoveToEndOfWord();\n\t\t\n\t\tStringBuilder builder = new StringBuilder(text.substring(0, start+1));\n\t\tbuilder.append(text.substring(cursor+1));\n\t\t\n\t\tsetText(builder.toString());\n\t\tcursor = start;\n\t}\n\tprivate void moveToEndOfWord() {\n\t\tif(cursor == text.length()-1) {\n\t\t\treturn;\n\t\t}\n\t\twhile(text.charAt(cursor) == ' ') {\n\t\t\tcursor++;\n\t\t}\n\t\tfor(int i = cursor; i < text.length(); i++) {\n\t\t\tchar targetChar = text.charAt(i);\n\t\t\tif(targetChar == ' ') {\n\t\t\t\tcursor = i-1;\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\t//do more\n\t\t\t}\n\t\t}\n\t\tcursor = text.length()-1;\n\t}\n\tprivate void setText(String txt) {\n\t\ttext = txt;\n\t}\n\tvoid showAnswer() {\n\t//\tSystem.out.println(\"text:\\t\" + text + \"\\tcursor: \" + cursor);\n\t\t\n\t\tStringBuilder resultBuilder = new StringBuilder(text.substring(0, cursor+1));\n\t\tresultBuilder.append(\"^\");\n\t\tresultBuilder.append(text.substring(cursor+1));\n\t\tSystem.out.println(resultBuilder.toString());\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\nclass Main{\n    void run(){\n\tScanner sc=new Scanner(System.in);\n\tint M=sc.nextInt();\n\tsc.nextLine();\n\tfor(int attend=0;attend<M;attend++){\n\t    StringBuffer str=new StringBuffer(sc.nextLine());\n\t    int cur=0;\n\t    int n=sc.nextInt();\n\t    String command1;\n\t    String command2;\n\t    sc.nextLine();\n\t    for(int i=0;i<n;i++){\n\t\tString command=sc.nextLine();\n\t\t//System.out.println(command);\n\t\tint index0=0;\n\t\twhile(true){\n\t\t    if(command.charAt(index0)==' '){\n\t\t\tcommand1=command.substring(0,index0);\n\t\t\tcommand2=command.substring(index0+1);\n\t\t\t//System.out.println(command1);\n\t\t\t//System.out.println(command2);\n\t\t\tbreak;\n\t\t    }\n\t\t    index0++;\n\t\t}\n\t\tif(\"forward\".equals(command1)){\n\t\t    if(\"char\".equals(command2)){\n\t\t\tcur=cur<str.length()? cur+1:cur;    \n\t\t    }\n\t\t    else{\n\t\t\tint index=new String(str).indexOf(\" \",cur+1);\n\t\t\tif(index==-1)cur=str.length();\n\t\t\telse{\n\t\t\t    while(true){\n\t\t\t\tif(index==str.length())break;\n\t\t\t\tif(!((str.charAt(index)==' ')&&(str.charAt(index+1)==' ')))break;\n\t\t\t\tindex++;\n\t\t\t    }\n\t\t\t    cur=index;\n\t\t\t}\n\t\t    }\n\t\t}\n\t\tif(\"backward\".equals(command1)){\n\t\t    if(\"char\".equals(command2)){\n\t\t\tcur=cur>0? cur-1:cur;    \n\t\t    }\n\t\t    else{\n\t\t\tint index=0;\n\t\t\twhile(true){\n\t\t\t    int temp=new String(str).indexOf(\" \",index+1);\n\t\t\t    if(temp>=cur||temp==-1)break;\n\t\t\t    index=temp;\n\t\t\t    //System.out.println(index);\n\t\t\t}\n\t\t\tcur=index;\n\t\t    }  \n\t\t}\n\t\tif(\"insert\".equals(command1)){\n\t\t    //raplaceALL..\n\t\t    command2=new StringBuffer(command2).deleteCharAt(0).toString();\n\t\t    command2=new StringBuffer(command2).deleteCharAt(command2.length()-1).toString();\n\t\t    str.insert(cur,command2);\n\t\t    cur+=command2.length();\n\t\t}\t\t       \n\t\tif(\"delete\".equals(command1)){\n\t\t    if(\"char\".equals(command2)){\n\t\t\tif(cur!=str.length()){\n\t\t\t    str.deleteCharAt(cur);\n\t\t\t}\n\t\t    }\n\t\t    else{\n\t\t\twhile(true){\n\t\t\t    if(cur==str.length())break;\n\t\t\t    if(str.charAt(cur)!=' ')break;\n\t\t\t    str.deleteCharAt(cur);\n\t\t\t}\n\t\t\twhile(true){\n\t\t\t    if(cur==str.length())break;\n\t\t\t    if(str.charAt(cur)==' ')break;\n\t\t\t    str.deleteCharAt(cur);\n\t\t\t}\t\t\t\t\n\t\t    }\n\t\t}\n\t\n\t\t//print(str,cur);\n\t    }\n\t    print(str,cur);\n\t}\n\t\n    }\n    void print(StringBuffer str,int cur){\n\t    str.insert(cur,\"^\");\n\t    System.out.println(str);\n\t    str.deleteCharAt(cur);\n    }\n    public static void main(String[] args){\n\tnew Main().run();\n    }\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\n\npublic class Main{\n\t//0032 starting\n\t\n\tprivate void doit(){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint ds = Integer.parseInt(sc.nextLine());\n\t\twhile(ds-- > 0){\n\t\t\tStringBuilder s = new StringBuilder(sc.nextLine());\n\t\t\tint pos = 0;\n\t\t\tint q = Integer.parseInt(sc.nextLine());\n\t\t\twhile(q-- > 0){\n\t\t\t\tString com = sc.nextLine();\n\t\t\t\tString [] coms = com.split(\" \");\n\t\t\t\tswitch (coms[0].charAt(0)) {\n\t\t\t\tcase 'f':\n\t\t\t\t\tif(coms[1].charAt(0) == 'c'){\n\t\t\t\t\t\tpos++;\n\t\t\t\t\t\tif(pos > s.length()) pos--;\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tpos = findFW(s, pos);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'b':\n\t\t\t\t\tif(coms[1].charAt(0) == 'c'){\n\t\t\t\t\t\tpos--;\n\t\t\t\t\t\tif(pos < 0) pos = 0;\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tpos = findBW(s, pos);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'i':\n\t\t\t\t\tString temp = com.substring(7);\n\t\t\t\t\ts.insert(pos, temp.replaceAll(\"\\\"\", \"\"));\n\t\t\t\t\tpos += temp.length() - 2;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'd':\n\t\t\t\t\tif(coms[1].charAt(0) == 'c'){\n\t\t\t\t\t\tif(pos != s.length()){\n\t\t\t\t\t\t\ts.deleteCharAt(pos);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tint res = findFW(s, pos);\n\t\t\t\t\t\tboolean flg = false;\n\t\t\t\t\t\tfor(int i = pos; i <= res; i++){\n\t\t\t\t\t\t\tif(i == s.length())continue;\n\t\t\t\t\t\t\tif(s.charAt(i) != ' '){\n\t\t\t\t\t\t\t\tflg = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(flg){\n\t\t\t\t\t\t\ts.delete(pos, res);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t//print\n\t\t\ts.insert(pos, '^');\n\t\t\tSystem.out.println(s.toString());\n\t\t}\n\t}\n\n\tprivate int findFW(StringBuilder s, int pos) {\n\t\tif(s.length() == pos) return pos;\n\t\tint nowpos = pos;\n\t\tif(s.charAt(pos) == ' '){\n\t\t\tfor(int i = pos; i < s.length(); i++){\n\t\t\t\tif(s.charAt(i) != ' '){\n\t\t\t\t\tnowpos = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(nowpos == pos){\n\t\t\t\treturn s.length();\n\t\t\t}\n\t\t}\n\t\tfor(int i = nowpos; i < s.length(); i++){\n\t\t\tif(s.charAt(i) == ' '){\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn s.length();\n\t}\n\n\tprivate int findBW(StringBuilder s, int pos) {\n\t\tif(pos == 0) return pos;\n\t\tint nowpos = pos-1;\n\t\tif(s.charAt(nowpos) == ' '){\n\t\t\tfor(int i = nowpos; i >= 0; i--){\n\t\t\t\tif(s.charAt(i) != ' '){\n\t\t\t\t\tnowpos = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(nowpos == pos-1){\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t\tfor(int i =nowpos; i >= 0; i--){\n\t\t\tif(s.charAt(i) == ' '){\n\t\t\t\treturn i + 1;\n\t\t\t}\n\t\t}\n\t\treturn 0;\n\t}\n\n\tprivate void debug(Object... o) { System.out.println(\"debug = \" + Arrays.deepToString(o)); }\n\n\tpublic static void main(String[] args) {\n\t\tnew Main().doit();\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Deque;\nimport java.util.HashMap;\nimport java.util.InputMismatchException;\nimport java.util.Map;\nimport java.util.PriorityQueue;\nimport java.util.StringTokenizer;\nimport java.math.BigInteger;\nimport java.math.BigDecimal;\n       \npublic class Main{\n   \nstatic final InputStream in=System.in;\nstatic final PrintWriter out=new PrintWriter(System.out);\nstatic final int INF=Integer.MAX_VALUE/2;\nstatic final long LINF=Long.MAX_VALUE/2;\nstatic int MAX=1000;\nstatic char[] str=new char[MAX+1];\n   \npublic static void main(String[] args) throws IOException{\n  BufferedReader br=new BufferedReader(new InputStreamReader(in));\n  out.println(\"??????\");\n  int n=Integer.parseInt(br.readLine());\n  while(n-->0){\n    String line=br.readLine();\n    int cur=0;\n    Arrays.fill(str,'-');\n    for(int i=0;i<line.length();i++) str[i]=line.charAt(i);\n    int m=Integer.parseInt(br.readLine());\n    while(m-->0){\n      String com=br.readLine();\n      String com0=com.split(\" \")[0];\n      String com1=com.split(\" \")[1];\n      if(\"forward\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(str[cur]!='-') cur++;\n        }\n        else if(\"word\".equals(com1)){\n          while(str[cur]==' ') cur++;\n          while(str[cur]!=' '&&str[cur]!='-') cur++;\n        }\n      }\n      else if(\"backward\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(cur>0) cur--;\n        }\n        else if(\"word\".equals(com1)){\n          while(cur>0&&str[cur-1]==' ') cur--;\n          while(cur>0&&str[cur-1]!=' ') cur--;\n        }\n      }\n      else if(\"insert\".equals(com0)){\n        String insertionStr=com.substring(8,com.length()-1);\n        for(int i=MAX-insertionStr.length();i>=cur;i--){\n          if(str[i]!='-') str[i+insertionStr.length()]=str[i];\n        }\n        for(int i=0;i<insertionStr.length();i++){\n          str[cur+i]=insertionStr.charAt(i);\n        }\n        cur+=insertionStr.length();\n      }\n      else if(\"delete\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(str[cur]!='-'){\n            for(int i=cur;;i++){\n              if(str[i]=='-') break;\n              str[i]=str[i+1];\n            }\n          }\n        }\n        else if(\"word\".equals(com1)){\n          int cnt=cur;\n          while(str[cnt]==' ') cnt++;\n          if(str[cnt]!='-'){\n            while(str[cnt]!=' '&&str[cnt]!='-') cnt++;\n            for(int i=cur;;i++){\n              if(str[i]=='-') break;\n              str[i]=str[i-cur+cnt];\n            }\n          }\n        }\n      }\n    }\n    StringBuilder sb=new StringBuilder();\n    for(int i=0;;i++){\n      if(i==cur) sb.append(\"^\");\n      if(str[i]=='-') break;\n      sb.append(String.valueOf(str[i]));\n    }\n    out.println(sb);\n    out.flush();\n  }\n}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Deque;\nimport java.util.HashMap;\nimport java.util.InputMismatchException;\nimport java.util.Map;\nimport java.util.PriorityQueue;\nimport java.util.StringTokenizer;\nimport java.math.BigInteger;\nimport java.math.BigDecimal;\n       \npublic class Main{\n   \nstatic final InputStream in=System.in;\nstatic final PrintWriter out=new PrintWriter(System.out);\nstatic final int INF=Integer.MAX_VALUE/2;\nstatic final long LINF=Long.MAX_VALUE/2;\nstatic int MAX=1000;\nstatic char[] str=new char[MAX+1];\n   \npublic static void main(String[] args) throws IOException{\n  BufferedReader br=new BufferedReader(new InputStreamReader(in));\n  int n=Integer.parseInt(br.readLine());\n  while(n-->0){\n    String line=br.readLine();\n    int cur=0;\n    Arrays.fill(str,'-');\n    for(int i=0;i<line.length();i++) str[i]=line.charAt(i);\n    int m=Integer.parseInt(br.readLine());\n    while(m-->0){\n      String com=br.readLine();\n      StringTokenizer st=new StringTokenizer(com);\n      String com0=st.nextToken();\n      String com1=st.nextToken();\n      if(\"forward\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(str[cur]!='-') cur++;\n        }\n        else if(\"word\".equals(com1)){\n          while(str[cur]==' ') cur++;\n          while(str[cur]!=' '&&str[cur]!='-') cur++;\n        }\n      }\n      else if(\"backward\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(cur>0) cur--;\n        }\n        else if(\"word\".equals(com1)){\n          while(cur>0&&str[cur-1]==' ') cur--;\n          while(cur>0&&str[cur-1]!=' ') cur--;\n        }\n      }\n      else if(\"insert\".equals(com0)){\n        if(com.length()>9){\n          String insertionStr=com.substring(8,com.length()-1);\n          for(int i=MAX-insertionStr.length();i>=cur;i--){\n            if(str[i]!='-') str[i+insertionStr.length()]=str[i];\n          }\n          for(int i=0;i<insertionStr.length();i++){\n            str[cur+i]=insertionStr.charAt(i);\n          }\n          cur+=insertionStr.length();\n        }\n      }\n      else if(\"delete\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(str[cur]!='-'){\n            for(int i=cur;;i++){\n              if(str[i]=='-') break;\n              str[i]=str[i+1];\n            }\n          }\n        }\n        else if(\"word\".equals(com1)){\n          int cnt=cur;\n          while(str[cnt]==' ') cnt++;\n          if(str[cnt]!='-'){\n            while(str[cnt]!=' '&&str[cnt]!='-') cnt++;\n            for(int i=cur;;i++){\n              if(str[i]=='-') break;\n              str[i]=str[i-cur+cnt];\n            }\n          }\n        }\n      }\n    }\n    StringBuilder sb=new StringBuilder();\n    for(int i=0;;i++){\n      if(i==cur) sb.append(\"^\");\n      if(str[i]=='-') break;\n      sb.append(String.valueOf(str[i]));\n    }\n    out.println(sb);\n    out.flush();\n  }\n}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Deque;\nimport java.util.HashMap;\nimport java.util.InputMismatchException;\nimport java.util.Map;\nimport java.util.PriorityQueue;\nimport java.math.BigInteger;\nimport java.math.BigDecimal;\n      \npublic class Main{\n  \nstatic final InputStream in=System.in;\nstatic final PrintWriter out=new PrintWriter(System.out);\nstatic final int INF=Integer.MAX_VALUE/2;\nstatic final long LINF=Long.MAX_VALUE/2;\nstatic int MAX=1000000;\nstatic char[] str=new char[MAX+1];\n  \npublic static void main(String[] args) throws IOException{\n  BufferedReader br=new BufferedReader(new InputStreamReader(in));\n  int n=Integer.parseInt(br.readLine());\n  while(n-->0){\n    String line=br.readLine();\n    int cur=0;\n    for(int i=0;i<=MAX;i++) str[i]='-';\n    for(int i=0;i<line.length();i++) str[i]=line.charAt(i);\n    int m=Integer.parseInt(br.readLine());\n    while(m-->0){\n      String[] com=br.readLine().split(\" \");\n      String com0=com[0];\n      String com1=com[1];\n      if(\"forward\".equals(com0)){\n        if(\"char\".equals(com1)&&str[cur]!='-') cur++;\n        else{\n          while(str[cur]==' ') cur++;\n          while(str[cur]!=' '&&str[cur]!='-') cur++;\n        }\n      }\n      else if(\"backward\".equals(com0)){\n        if(\"char\".equals(com1)&&cur!=0) cur--;\n        else{\n          while(cur!=0&&str[cur-1]==' ') cur--;\n          while(cur!=0&&str[cur-1]!=' ') cur--;\n        }\n      }\n      else if(\"insert\".equals(com0)){\n        if(com1.length()>2){\n          String insertionStr=com1.substring(1,com1.length()-1);\n          for(int i=MAX-insertionStr.length();i>=cur;i--){\n            str[i+insertionStr.length()]=str[i];\n          }\n          for(int i=0;i<insertionStr.length();i++){\n            str[cur+i]=insertionStr.charAt(i);\n          }\n          cur+=insertionStr.length();\n        }\n      }\n      else{\n        if(\"char\".equals(com1)&&str[cur]!='-'){\n          for(int i=cur;i<=MAX;i++){\n            if(str[i]=='-') break;\n            str[i]=str[i+1];\n          }\n        }\n        else{\n          int cnt=cur;\n          while(str[cnt]==' ') cnt++;\n          if(str[cnt]!='-'){\n            while(str[cnt]!=' '&&str[cnt]!='-') cnt++;\n            for(int i=cnt;i<=MAX;i++){\n              if(str[i-cnt+cur]=='-') break;\n              str[i-cnt+cur]=str[i];\n            }\n          }\n        }\n      }\n    }\n    for(int i=0;;i++){\n      if(i==cur) out.print(\"^\");\n      if(str[i]=='-') break;\n      out.print(String.valueOf(str[i]));\n    }\n    out.println();\n  }\nout.flush();\n}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Deque;\nimport java.util.HashMap;\nimport java.util.InputMismatchException;\nimport java.util.Map;\nimport java.util.PriorityQueue;\nimport java.math.BigInteger;\nimport java.math.BigDecimal;\n      \npublic class Main{\n  \nstatic final InputStream in=System.in;\nstatic final PrintWriter out=new PrintWriter(System.out);\nstatic final int INF=Integer.MAX_VALUE/2;\nstatic final long LINF=Long.MAX_VALUE/2;\nstatic int MAX=100000;\nstatic char[] str=new char[MAX+1];\n  \npublic static void main(String[] args) throws IOException{\n  BufferedReader br=new BufferedReader(new InputStreamReader(in));\n  int n=Integer.parseInt(br.readLine());\n  while(n-->0){\n    String line=br.readLine();\n    int cur=0;\n    for(int i=0;i<=MAX;i++) str[i]='-';\n    for(int i=0;i<line.length();i++) str[i]=line.charAt(i);\n    int m=Integer.parseInt(br.readLine());\n    while(m-->0){\n      String[] com=br.readLine().split(\" \");\n      if(\"forward\".equals(com[0])){\n        if(\"char\".equals(com[1])&&str[cur]!='-') cur++;\n        else{\n          while(str[cur]==' ') cur++;\n          while(str[cur]!=' '&&str[cur]!='-') cur++;\n        }\n      }\n      else if(\"backward\".equals(com[0])){\n        if(\"char\".equals(com[1])&&cur!=0) cur--;\n        else{\n          while(cur!=0&&str[cur-1]==' ') cur--;\n          while(cur!=0&&str[cur-1]!=' ') cur--;\n        }\n      }\n      else if(\"insert\".equals(com[0])){\n        String insertionStr=com[1].substring(1,com[1].length()-1);\n        for(int i=MAX-insertionStr.length();i>=cur;i--){\n          str[i+insertionStr.length()]=str[i];\n        }\n        for(int i=0;i<insertionStr.length();i++){\n          str[cur+i]=insertionStr.charAt(i);\n        }\n      }\n      else{\n        if(\"char\".equals(com[1])&&str[cur]!='-'){\n          for(int i=cur;i<=MAX;i++){\n            if(str[i]=='-') break;\n            str[i]=str[i+1];\n          }\n        }\n        else{\n          int cnt=cur;\n          boolean flag=false;\n          while(str[cnt]==' ') cnt++;\n          while(str[cnt]!=' '&&str[cnt]!='-'){\n            cnt++;\n            flag=true;\n          }\n          if(flag){\n            for(int i=cnt;i<=MAX;i++){\n            if(str[i-cnt+cur]=='-') break;\n              str[i-cnt+cur]=str[i];\n            }\n          }\n        }\n      }\n    }\n    for(int i=0;;i++){\n      if(str[i]=='-') break;\n      if(i==cur) out.print(\"^\");\n      out.print(str[i]);\n    }\n    out.println();\n  }\nout.flush();\n}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.InputStream;\nimport java.io.PrintWriter;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Deque;\nimport java.util.HashMap;\nimport java.util.InputMismatchException;\nimport java.util.Map;\nimport java.util.PriorityQueue;\nimport java.util.Scanner;\nimport java.math.BigInteger;\nimport java.math.BigDecimal;\n      \npublic class Main{\n  \nstatic final InputStream in=System.in;\nstatic final PrintWriter out=new PrintWriter(System.out);\nstatic final int INF=Integer.MAX_VALUE/2;\nstatic final long LINF=Long.MAX_VALUE/2;\nstatic int MAX=10000;\nstatic char[] str=new char[MAX+1];\n  \npublic static void main(String[] args){\n  Scanner sc=new Scanner(in);\n  int n=sc.nextInt(); sc.nextLine();\n  while(n-->0){\n    String line=sc.nextLine();\n    int cur=0;\n    Arrays.fill(str,'-');\n    for(int i=0;i<line.length();i++) str[i]=line.charAt(i);\n    int m=sc.nextInt(); sc.nextLine();\n    while(m-->0){\n      String com0=sc.next();\n      String com1=sc.next();\n      if(\"forward\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(str[cur]!='-') cur++;\n        }\n        else{\n          while(str[cur]==' ') cur++;\n          while(str[cur]!=' '&&str[cur]!='-') cur++;\n        }\n      }\n      else if(\"backward\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(cur>0) cur--;\n        }\n        else{\n          while(cur>0&&str[cur-1]==' ') cur--;\n          while(cur>0&&str[cur-1]!=' ') cur--;\n        }\n      }\n      else if(\"insert\".equals(com0)){\n        if(com1.length()>2){\n          String insertionStr=com1.substring(1,com1.length()-1);\n          for(int i=MAX-insertionStr.length();i>=cur;i--){\n            if(str[i]!='-') str[i+insertionStr.length()]=str[i];\n          }\n          for(int i=0;i<insertionStr.length();i++){\n            str[cur+i]=insertionStr.charAt(i);\n          }\n          cur+=insertionStr.length();\n        }\n      }\n      else if(\"delete\".equals(com0)){\n        if(\"char\".equals(com1)){\n          if(str[cur]!='-'){\n            for(int i=cur;;i++){\n              if(str[i]=='-') break;\n              str[i]=str[i+1];\n            }\n          }\n        }\n        else{\n          int cnt=cur;\n          while(str[cnt]==' ') cnt++;\n          if(str[cnt]!='-'){\n            while(str[cnt]!=' '&&str[cnt]!='-') cnt++;\n            for(int i=cur;;i++){\n              if(str[i]=='-') break;\n              str[i]=str[i-cur+cnt];\n            }\n          }\n        }\n      }\n    }\n    StringBuilder sb=new StringBuilder();\n    for(int i=0;;i++){\n      if(i==cur) sb.append(\"^\");\n      if(str[i]=='-') break;\n      sb.append(String.valueOf(str[i]));\n    }\n    out.println(sb);\n  }\nout.flush();\n}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\n\npublic class Main{\n\t//0032 starting\n\t\n\tprivate void doit(){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint ds = Integer.parseInt(sc.nextLine());\n\t\twhile(ds-- > 0){\n\t\t\tStringBuilder s = new StringBuilder(sc.nextLine());\n\t\t\tint pos = 0;\n\t\t\tint q = Integer.parseInt(sc.nextLine());\n\t\t\twhile(q-- > 0){\n\t\t\t\tString com = sc.nextLine();\n\t\t\t\tString [] coms = com.split(\" \");\n\t\t\t\tswitch (coms[0].charAt(0)) {\n\t\t\t\tcase 'f':\n\t\t\t\t\tif(coms[1].charAt(0) == 'c'){\n\t\t\t\t\t\tpos++;\n\t\t\t\t\t\tif(pos > s.length()) pos--;\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tpos = findFW(s, pos);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'b':\n\t\t\t\t\tif(coms[1].charAt(0) == 'c'){\n\t\t\t\t\t\tpos--;\n\t\t\t\t\t\tif(pos < 0) pos = 0;\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tpos = findBW(s, pos);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'i':\n\t\t\t\t\tString temp = com.substring(7);\n\t\t\t\t\ts.insert(pos, temp.replaceAll(\"\\\"\", \"\"));\n\t\t\t\t\tpos += temp.length() - 2;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'd':\n\t\t\t\t\tif(coms[1].charAt(0) == 'c'){\n\t\t\t\t\t\tif(pos != s.length()){\n\t\t\t\t\t\t\ts.deleteCharAt(pos);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tint res = findFW(s, pos);\n\t\t\t\t\t\ts.delete(pos, res);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t//print\n\t\t\ts.insert(pos, '^');\n\t\t\tSystem.out.println(s.toString());\n\t\t}\n\t}\n\n\tprivate int findFW(StringBuilder s, int pos) {\n\t\tif(s.length() == pos) return pos;\n\t\tint nowpos = pos;\n\t\tif(s.charAt(pos) == ' '){\n\t\t\tfor(int i = pos; i < s.length(); i++){\n\t\t\t\tif(s.charAt(i) != ' '){\n\t\t\t\t\tnowpos = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(nowpos == pos){\n\t\t\t\treturn s.length();\n\t\t\t}\n\t\t}\n\t\tfor(int i = nowpos; i < s.length(); i++){\n\t\t\tif(s.charAt(i) == ' '){\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn s.length();\n\t}\n\n\tprivate int findB(StringBuilder s, int pos) {\n\t\tif(s.length() == pos) return pos;\n\t\tif(s.charAt(pos) == ' '){\n\t\t\tfor(int i = pos; i < s.length(); i++){\n\t\t\t\tif(s.charAt(i) != ' '){\n\t\t\t\t\treturn i - 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn s.length();\n\t\t}\n\t\tfor(int i = pos; i < s.length(); i++){\n\t\t\tif(s.charAt(i) == ' '){\n\t\t\t\treturn i-1;\n\t\t\t}\n\t\t}\n\t\treturn s.length();\n\t}\n\n\tprivate int findBW(StringBuilder s, int pos) {\n\t\tif(pos == 0) return pos;\n\t\tint nowpos = pos-1;\n\t\tif(s.charAt(nowpos) == ' '){\n\t\t\tfor(int i = nowpos; i >= 0; i--){\n\t\t\t\tif(s.charAt(i) != ' '){\n\t\t\t\t\tnowpos = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(nowpos == pos-1){\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t\tfor(int i =nowpos; i >= 0; i--){\n\t\t\tif(s.charAt(i) == ' '){\n\t\t\t\treturn i + 1;\n\t\t\t}\n\t\t}\n\t\treturn 0;\n\t}\n\n\tprivate void debug(Object... o) { System.out.println(\"debug = \" + Arrays.deepToString(o)); }\n\n\tpublic static void main(String[] args) {\n\t\tnew Main().doit();\n\t}\n}"
  },
  {
    "language": "JavaScript",
    "code": "function forwardChar(){\n   arr.some(function(v,i){\n      if(v==\"^\" && arr.length-1!=i){\n         arr[i]=arr[i+1];\n         arr[i+1]=\"^\";\n         return true;\n      }\n   });\n}\n\nfunction forwardWord(){\n   arr.some(function(v,i){\n      if(v==\"^\" && i!=arr.length-1){\n         arr[i]=arr[i+1];\n         arr[i+1]=\"^\";\n         i++;\n         while(true){\n            if(i==arr.length-1)return true;\n            if(arr[i+1]==\" \")return true;\n            arr[i]=arr[i+1];\n            arr[i+1]=\"^\";\n            i++;\n         }\n         return true;\n      }\n   });\n}\n\nfunction backwardChar(){\n   arr.some(function(v,i){\n      if(v==\"^\" && i!=0){\n         arr[i]=arr[i-1];\n         arr[i-1]=\"^\";\n      }\n   });\n   var str=arr.join(\"\");\n   arr=str.split(\"\");\n}\n\nfunction backwardWord(){\n   arr.some(function(v,i){\n      if(v==\"^\" && i!=0){\n         arr[i]=arr[i-1];\n         arr[i-1]=\"^\";\n         i--;\n         while(true){\n            if(i-1<0)return true;\n            if(arr[i-1]==\" \")return true;\n            arr[i]=arr[i-1];\n            arr[i-1]=\"^\";\n            i--;\n         }\n         return true;\n      }\n   });\n}\n\nfunction insert(x){\n   var str=arr.join(\"\");\n   str=str.replace(/\\^/,x+\"^\");\n   arr=str.split(\"\");\n}\n\nfunction deleteChar(){\n   arr.some(function(v,i){\n      if(v==\"^\" && i!=arr.length-1){\n         arr[i+1]=\"\";\n         return true;\n      }\n   });\n   var str=arr.join(\"\");\n   arr=str.split(\"\");\n}\n\nfunction deleteWord(){\n   arr.some(function(v,i){\n      if(v==\"^\" && i!=arr.length-1){\n         i++;\n         arr[i]=\"\";\n         while(true){\n            i++;\n            if(i>arr.length-1)return true;\n            if(arr[i]==\" \")return true;\n            arr[i]=\"\";\n         }\n         return true;\n      }\n   });\n   var str=arr.join(\"\");\n   str=str.replace(/\\^ +/,\"^ \");\n   arr=str.split(\"\");\n}\n\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar ARR=input.trim().split(\"\\n\");\nvar L=ARR.shift()-0;\nwhile(L--){\n   var arr=(\"^\"+ARR.shift()).split(\"\");\n   var C=ARR.shift()-0;\n   while(C--){\n      var ary=ARR.shift().split(\" \");\n      if(ary[0]==\"forward\" && ary[1]==\"char\")forwardChar();\n      else if(ary[0]==\"forward\" && ary[1]==\"word\")forwardWord();\n      else if(ary[0]==\"backward\" && ary[1]==\"char\")backwardChar();\n      else if(ary[0]==\"backward\" && ary[1]==\"word\")backwardWord();\n      else if(ary[0]==\"insert\")insert(ary[1].replace(/\\\"/g,\"\"));\n      else if(ary[0]==\"delete\" && ary[1]==\"char\")deleteChar();\n      else if(ary[0]==\"delete\" && ary[1]==\"word\")deleteWord();\n   }\n   console.log(arr.join(\"\"));\n}"
  },
  {
    "language": "Ruby",
    "code": "# AOJ 1101 A Simple Offline Text Editor\n\nclass TextEditor\n  def initialize(text)\n    @text = text\n    @cursor = 0\n  end\n\n  def to_s\n    text_before_cursor + \"^\" + text_after_cursor\n  end\n\n  def inspect\n    %Q|#<TextEditor:0x#{\"%x\".%(object_id)} \"#{to_s}\">|\n  end\n\n  def forward_char\n    @cursor += 1 if @cursor < @text.length\n    self\n  end\n\n  def forward_word\n    # if @cursor < @text.length\n    #   m = /^ +/.match(text_after_cursor)\n    #   @cursor += m[0].length if m\n    # end\n\n    # if @cursor < @text.length\n    #   m = /^[^ ]+/.match(text_after_cursor)\n    #   @cursor += m[0].length if m\n    # end\n\n    @cursor += 1 while @cursor < @text.length && @text[@cursor] == \" \"\n    @cursor += 1 while @cursor < @text.length && @text[@cursor] != \" \"\n\n    self\n  end\n\n  def backward_char\n    @cursor -= 1 if @cursor > 0\n    self\n  end\n\n  def backward_word\n    # if @cursor > 0\n    #   last_blank_pos = text_before_cursor.sub(/\\s+$/, \"\").rindex(\" \")\n    #   if last_blank_pos\n    #     @cursor = last_blank_pos + 1\n    #   else\n    #     @cursor = 0\n    #   end\n    # end\n\n    @cursor -= 1 while @cursor > 0 && @text[@cursor - 1] == \" \"\n    @cursor -= 1 while @cursor > 0 && @text[@cursor - 1] != \" \"\n\n    self\n  end\n\n  def insert(text)\n    @text = text_before_cursor + text + text_after_cursor\n    @cursor += text.length\n\n    self\n  end\n\n  def delete_char\n    unless @cursor == @text.length\n      @text = text_before_cursor + text_after_cursor[1..-1]\n    end\n\n    self\n  end\n\n  def delete_word\n    # unless @cursor == @text.length\n    #   @text = text_before_cursor +\n    #     text_after_cursor.sub(/ *[^ ]*/, \"\")\n    # end\n\n    if @cursor < @text.length\n      word_end = @cursor\n      word_end += 1 while word_end < @text.length && @text[word_end] == \" \"\n      word_end += 1 while word_end < @text.length && @text[word_end] != \" \"\n      @text = text_before_cursor + @text[word_end..-1]\n    end\n\n    self\n  end\n\n  private\n  def text_before_cursor\n    if @cursor.zero?\n      \"\"\n    else\n      @text[0..(@cursor - 1)]\n    end\n  end\n\n  def text_after_cursor\n    if @cursor == @text.length\n      \"\"\n    else\n      @text[@cursor..-1]\n    end\n  end\nend\n\nn_texts = gets.to_i\nn_texts.times do\n  t = TextEditor.new(gets.chomp)\n\n  n_commands = gets.to_i\n  n_commands.times do\n    command, argument = gets.chomp.split(\" \", 2)\n    argument.sub!(/^ +/, \"\")\n\n    case command\n    when \"forward\"\n      case argument\n      when \"char\"\n        t.forward_char\n      when \"word\"\n        t.forward_word\n      end\n    when \"backward\"\n      case argument\n      when \"char\"\n        t.backward_char\n      when \"word\"\n        t.backward_word\n      end\n    when \"insert\"\n      m = /^\"(.*)\"/.match(argument)\n      t.insert m[1] if m\n    when \"delete\"\n      case argument\n      when \"char\"\n        t.delete_char\n      when \"word\"\n        t.delete_word\n      end\n    end\n  end\n\n  print t.to_s\nend"
  },
  {
    "language": "Ruby",
    "code": "# AOJ 1101 A Simple Offline Text Editor\n\nclass TextEditor\n  def initialize(text)\n    @text = text\n    @cursor = 0\n  end\n\n  def to_s\n    text_before_cursor + \"^\" + text_after_cursor\n  end\n\n  def inspect\n    %Q|#<TextEditor:0x#{\"%x\".%(object_id)} \"#{to_s}\">|\n  end\n\n  def forward_char(n = 1)\n    n.times do\n      break unless @cursor < @text.length\n      @cursor += 1\n    end\n\n    self\n  end\n\n  def forward_word(n = 1)\n    n.times do\n      break unless @cursor < @text.length\n\n      m = /^[^ ]* +[^ ]/.match(text_after_cursor[1..-1])\n      if m\n        @cursor += m[0].length - 1\n      else\n        @cursor = @text.length\n      end\n    end\n\n    self\n  end\n\n  def backward_char(n = 1)\n    n.times do\n      break unless @cursor > 0\n      @cursor -= 1\n    end\n\n    self\n  end\n\n  def backward_word(n = 1)\n    n.times do\n      break if @cursor.zero?\n\n      last_blank_pos = text_before_cursor.sub(/\\s+$/, \"\").rindex(\" \")\n      if last_blank_pos\n        @cursor = last_blank_pos + 1\n      else\n        @cursor = 0\n      end\n    end\n\n    self\n  end\n\n  def insert(text)\n    @text = text_before_cursor + text + text_after_cursor\n    @cursor += text.length\n\n    self\n  end\n\n  def delete_char(n = 1)\n    n.times do\n      break if @cursor == @text.length\n      @text = text_before_cursor + text_after_cursor[1..-1]\n    end\n\n    self\n  end\n\n  def delete_word(n = 1)\n    n.times do\n      break if @cursor == @text.length\n      @text = text_before_cursor +\n        text_after_cursor.sub(/ *[^ ]*/, \"\")\n    end\n\n    self\n  end\n\n  private\n  def text_before_cursor\n    if @cursor.zero?\n      \"\"\n    else\n      @text[0..(@cursor - 1)]\n    end\n  end\n\n  def text_after_cursor\n    if @cursor == @text.length\n      \"\"\n    else\n      @text[@cursor..-1]\n    end\n  end\nend\n\nn_texts = gets.to_i\nn_texts.times do\n  t = TextEditor.new(gets.chomp)\n\n  n_commands = gets.to_i\n  n_commands.times do\n    command, argument = gets.chomp.split(\" \", 2)\n    argument.sub!(/^ +/, \"\")\n\n    case command\n    when \"forward\"\n      case argument\n      when \"char\"\n        t.forward_char\n      when \"word\"\n        t.forward_word\n      end\n    when \"backward\"\n      case argument\n      when \"char\"\n        t.backward_char\n      when \"word\"\n        t.backward_word\n      end\n    when \"insert\"\n      m = /^\"(.*?)\"/.match(argument)\n      t.insert m[1] if m\n    when \"delete\"\n      case argument\n      when \"char\"\n        t.delete_char\n      when \"word\"\n        t.delete_word\n      end\n    end\n  end\n\n  puts t\nend"
  },
  {
    "language": "Ruby",
    "code": "# AOJ 1101 A Simple Offline Text Editor\n\nclass TextEditor\n  def initialize(text)\n    @text = text\n    @cursor = 0\n  end\n\n  def to_s\n    text_before_cursor + \"^\" + text_after_cursor\n  end\n\n  def inspect\n    %Q|#<TextEditor:0x#{\"%x\".%(object_id)} \"#{to_s}\">|\n  end\n\n  def forward_char\n    @cursor += 1 if @cursor < @text.length\n    self\n  end\n\n  def forward_word\n    # if @cursor < @text.length\n    #   m = /^ +/.match(text_after_cursor)\n    #   @cursor += m[0].length if m\n    # end\n\n    # if @cursor < @text.length\n    #   m = /^[^ ]+/.match(text_after_cursor)\n    #   @cursor += m[0].length if m\n    # end\n\n    @cursor += 1 while @cursor < @text.length && @text[@cursor] == \" \"\n    @cursor += 1 while @cursor < @text.length && @text[@cursor] != \" \"\n\n    self\n  end\n\n  def backward_char\n    @cursor -= 1 if @cursor > 0\n    self\n  end\n\n  def backward_word\n    # if @cursor > 0\n    #   last_blank_pos = text_before_cursor.sub(/\\s+$/, \"\").rindex(\" \")\n    #   if last_blank_pos\n    #     @cursor = last_blank_pos + 1\n    #   else\n    #     @cursor = 0\n    #   end\n    # end\n\n    @cursor -= 1 while @cursor > 0 && @text[@cursor - 1] == \" \"\n    @cursor -= 1 while @cursor > 0 && @text[@cursor - 1] != \" \"\n\n    self\n  end\n\n  def insert(text)\n    @text = text_before_cursor + text + text_after_cursor\n    @cursor += text.length\n\n    self\n  end\n\n  def delete_char\n    unless @cursor == @text.length\n      @text = text_before_cursor + text_after_cursor[1..-1]\n    end\n\n    self\n  end\n\n  def delete_word\n    # unless @cursor == @text.length\n    #   @text = text_before_cursor +\n    #     text_after_cursor.sub(/ *[^ ]*/, \"\")\n    # end\n\n    if @cursor < @text.length\n      word_end = @cursor\n      word_end += 1 while word_end < @text.length && @text[word_end] == \" \"\n      word_end += 1 while word_end < @text.length && @text[word_end] != \" \"\n      @text = text_before_cursor + @text[word_end..-1]\n    end\n\n    self\n  end\n\n  private\n  def text_before_cursor\n    if @cursor.zero?\n      \"\"\n    else\n      @text[0..(@cursor - 1)]\n    end\n  end\n\n  def text_after_cursor\n    if @cursor == @text.length\n      \"\"\n    else\n      @text[@cursor..-1]\n    end\n  end\nend\n\nn_texts = gets.to_i\nn_texts.times do\n  t = TextEditor.new(gets.chomp)\n\n  n_commands = gets.to_i\n  n_commands.times do\n    command, argument = gets.chomp.split(\" \", 2)\n    argument.sub!(/^ +/, \"\")\n\n    case command\n    when \"forward\"\n      case argument\n      when \"char\"\n        t.forward_char\n      when \"word\"\n        t.forward_word\n      end\n    when \"backward\"\n      case argument\n      when \"char\"\n        t.backward_char\n      when \"word\"\n        t.backward_word\n      end\n    when \"insert\"\n      m = /^\"(.*)\"/.match(argument)\n      t.insert m[1] if m\n    when \"delete\"\n      case argument\n      when \"char\"\n        t.delete_char\n      when \"word\"\n        t.delete_word\n      end\n    end\n  end\n\n  puts t.to_s\nend"
  },
  {
    "language": "Ruby",
    "code": "@buffer = \"\"\ndef swap(i, j)\n  @buffer[i], @buffer[j] = @buffer[j], @buffer[i]\nend\ndef cursor\n  @buffer.index(\"^\")\nend\n\ndef forwardChar\n  swap(cursor, cursor+1) unless cursor == @buffer.size-1\nend\ndef forwardWord\n  while cursor < @buffer.size-1 && @buffer[cursor+1] == \" \" do\n    swap(cursor, cursor+1)\n  end\n  while cursor < @buffer.size-1 && @buffer[cursor+1] != \" \"\n    swap(cursor, cursor+1)\n  end\nend\ndef backwardChar\n  swap(cursor, cursor-1) unless cursor == 0\nend\ndef backwardWord\n  while cursor > 0 && @buffer[cursor-1] == \" \" do\n    swap(cursor, cursor-1)\n  end\n  while cursor > 0 && @buffer[cursor-1] != \" \"\n    swap(cursor, cursor-1)\n  end\nend\ndef insert(text)\n  @buffer.insert(cursor, text)\nend\ndef deleteChar\n  @buffer.slice!(cursor+1) if @buffer[cursor+1]\nend\ndef deleteWord\n  return if @buffer[cursor+1, @buffer.size-cursor-1] !~ /[^ ]/\n  while cursor < @buffer.size-1 && @buffer[cursor+1] == \" \" do\n    deleteChar\n  end\n  while cursor < @buffer.size-1 && @buffer[cursor+1] != \" \" do\n    deleteChar\n  end\nend\n\ngets.to_i.times do\n  @buffer = \"^\"+gets.chomp\n  gets.to_i.times do\n    case gets.chomp\n      when \"forward char\"\n        forwardChar\n      when \"forward word\"\n        forwardWord\n      when \"backward char\"\n        backwardChar\n      when \"backward word\"\n        backwardWord\n      when \"delete char\"\n        deleteChar\n      when \"delete word\"\n        deleteWord\n      when /insert \"(.*)\"/\n        insert($1)\n    end\n  end\n  puts @buffer\nend"
  },
  {
    "language": "Ruby",
    "code": "# AOJ 1101 A Simple Offline Text Editor\n\nclass TextEditor\n  def initialize(text)\n    @text = text\n    @cursor = 0\n  end\n\n  def to_s\n    text_before_cursor + \"^\" + text_after_cursor\n  end\n\n  def inspect\n    %Q|#<TextEditor:0x#{\"%x\".%(object_id)} \"#{to_s}\">|\n  end\n\n  def forward_char\n    @cursor += 1 if @cursor < @text.length\n    self\n  end\n\n  def forward_word\n    if @cursor < @text.length\n      m = /^ +/.match(text_after_cursor)\n      @cursor += m[0].length if m\n    end\n\n    if @cursor < @text.length\n      m = /^[^ ]+/.match(text_after_cursor)\n      @cursor += m[0].length if m\n    end\n\n    self\n  end\n\n  def backward_char\n    @cursor -= 1 if @cursor > 0\n    self\n  end\n\n  def backward_word\n    if @cursor > 0\n      last_blank_pos = text_before_cursor.sub(/\\s+$/, \"\").rindex(\" \")\n      if last_blank_pos\n        @cursor = last_blank_pos + 1\n      else\n        @cursor = 0\n      end\n    end\n\n    self\n  end\n\n  def insert(text)\n    @text = text_before_cursor + text + text_after_cursor\n    @cursor += text.length\n\n    self\n  end\n\n  def delete_char\n    unless @cursor == @text.length\n      @text = text_before_cursor + text_after_cursor[1..-1]\n    end\n\n    self\n  end\n\n  def delete_word\n    if @cursor < @text.length\n      @text = text_before_cursor +\n        text_after_cursor.sub(/ *[^ ]+/, \"\")\n    end\n\n    self\n  end\n\n  private\n  def text_before_cursor\n    if @cursor.zero?\n      \"\"\n    else\n      @text[0..(@cursor - 1)]\n    end\n  end\n\n  def text_after_cursor\n    if @cursor == @text.length\n      \"\"\n    else\n      @text[@cursor..-1]\n    end\n  end\nend\n\nn_texts = gets.to_i\nn_texts.times do\n  t = TextEditor.new(gets.chomp)\n\n  n_commands = gets.to_i\n  n_commands.times do\n    command, argument = gets.chomp.split(\" \", 2)\n    argument.sub!(/^ +/, \"\")\n\n    case command\n    when \"forward\"\n      case argument\n      when \"char\"\n        t.forward_char\n      when \"word\"\n        t.forward_word\n      end\n    when \"backward\"\n      case argument\n      when \"char\"\n        t.backward_char\n      when \"word\"\n        t.backward_word\n      end\n    when \"insert\"\n      m = /^\"(.*)\"/.match(argument)\n      t.insert m[1] if m\n    when \"delete\"\n      case argument\n      when \"char\"\n        t.delete_char\n      when \"word\"\n        t.delete_word\n      end\n    end\n  end\n\n  puts t.to_s\nend"
  },
  {
    "language": "Ruby",
    "code": "### main\n\nn = gets.to_i\n\nn.times do\n  text = gets.delete(\"\\r\\n\")\n  #p text\n\n  pos = 0\n  tlen = text.length\n\n  nc = gets.to_i\n\n  nc.times do\n    cline = gets.strip\n\n    case cline\n    when 'forward char'\n      pos += 1 if pos < tlen\n    when 'forward word'\n      pos += 1 while pos < tlen && text[pos] == ' '\n      pos += 1 while pos < tlen && text[pos] != ' '\n    when 'backward char'\n      pos -= 1 if pos > 0\n    when 'backward word'\n      pos -= 1 while pos > 0 && text[pos - 1] == ' '\n      pos -= 1 while pos > 0 && text[pos - 1] != ' '\n    when 'delete char'\n      if pos < tlen\n        text[pos] = ''\n        tlen -= 1\n      end\n    when 'delete word'\n      pos0 = pos\n      pos0 += 1 while pos0 < tlen && text[pos0] == ' '\n      pos1 = pos0\n      pos1 += 1 while pos1 < tlen && text[pos1] != ' '\n      if pos0 != pos1\n        text[pos...pos1] = ''\n        tlen -= pos1 - pos\n      end\n    else\n      text0 = cline.split('\"').last\n      text[pos, 0] = text0\n      tlen += text0.length\n      pos += text0.length\n    end\n  end\n\n  text[pos, 0] = '^'\n  puts text\nend"
  },
  {
    "language": "Ruby",
    "code": "# AOJ 1101 A Simple Offline Text Editor\n\nclass TextEditor\n  def initialize(text)\n    @text = text\n    @cursor = 0\n  end\n\n  def to_s\n    text_before_cursor + \"^\" + text_after_cursor\n  end\n\n  def inspect\n    %Q|#<TextEditor:0x#{\"%x\".%(object_id)} \"#{to_s}\">|\n  end\n\n  def forward_char(n = 1)\n    n.times do\n      break unless @cursor < @text.length\n      @cursor += 1\n    end\n\n    self\n  end\n\n  def forward_word(n = 1)\n    n.times do\n      break unless @cursor < @text.length\n\n      m = /^[^ ]* +[^ ]/.match(text_after_cursor[1..-1])\n      if m\n        @cursor += m[0].length - 1\n      else\n        @cursor = @text.length\n      end\n    end\n\n    self\n  end\n\n  def backward_char(n = 1)\n    n.times do\n      break unless @cursor > 0\n      @cursor -= 1\n    end\n\n    self\n  end\n\n  def backward_word(n = 1)\n    n.times do\n      break if @cursor.zero?\n\n      last_blank_pos = text_before_cursor.sub(/\\s+$/, \"\").rindex(\" \")\n      if last_blank_pos\n        @cursor = last_blank_pos + 1\n      else\n        @cursor = 0\n      end\n    end\n\n    self\n  end\n\n  def insert(text)\n    @text = text_before_cursor + text + text_after_cursor\n    @cursor += text.length\n\n    self\n  end\n\n  def delete_char(n = 1)\n    n.times do\n      break if @cursor == @text.length\n      @text = text_before_cursor + text_after_cursor[1..-1]\n    end\n\n    self\n  end\n\n  def delete_word(n = 1)\n    n.times do\n      break if @cursor == @text.length\n      @text = text_before_cursor +\n        text_after_cursor.sub(/ *[^ ]*/, \"\")\n    end\n\n    self\n  end\n\n  private\n  def text_before_cursor\n    if @cursor.zero?\n      \"\"\n    else\n      @text[0..(@cursor - 1)]\n    end\n  end\n\n  def text_after_cursor\n    if @cursor == @text.length\n      \"\"\n    else\n      @text[@cursor..-1]\n    end\n  end\nend\n\nn_texts = gets.to_i\nn_texts.times do\n  t = TextEditor.new(gets.chomp)\n\n  n_commands = gets.to_i\n  n_commands.times do\n    command, argument = gets.chomp.split(\" \", 2)\n    argument.sub!(/^ +/, \"\")\n\n    case command\n    when \"forward\"\n      case argument\n      when \"char\"\n        t.forward_char\n      when \"word\"\n        t.forward_word\n      end\n    when \"backward\"\n      case argument\n      when \"char\"\n        t.backward_char\n      when \"word\"\n        t.backward_word\n      end\n    when \"insert\"\n      m = /^\"(.*?)\"/.match(argument)\n      t.insert m[1] if m\n    when \"delete\"\n      case argument\n      when \"char\"\n        t.delete_char\n      when \"word\"\n        t.delete_word\n      end\n    end\n  end\n\n  puts t.to_s\nend"
  },
  {
    "language": "Ruby",
    "code": "@buffer = \"\"\ndef swap(i, j)\n  @buffer[i], @buffer[j] = @buffer[j], @buffer[i]\nend\ndef cursor\n  @buffer.index(\"^\")\nend\n\ndef forwardChar\n  swap(cursor, cursor+1) unless cursor == @buffer.size-1\nend\ndef forwardWord\n  while cursor < @buffer.size-1 && @buffer[cursor+1] == \" \" do\n    swap(cursor, cursor+1)\n  end\n  while cursor < @buffer.size-1 && @buffer[cursor+1] != \" \"\n    swap(cursor, cursor+1)\n  end\nend\ndef backwardChar\n  swap(cursor, cursor-1) unless cursor == 0\nend\ndef backwardWord\n  while cursor > 0 && @buffer[cursor-1] == \" \" do\n    swap(cursor, cursor-1)\n  end\n  while cursor > 0 && @buffer[cursor-1] != \" \"\n    swap(cursor, cursor-1)\n  end\nend\ndef insert(text)\n  @buffer.insert(cursor, text)\nend\ndef deleteChar\n  @buffer.slice!(cursor+1) if @buffer[cursor+1]\nend\ndef deleteWord\n  return if @buffer[cursor+1, @buffer.size-cursor-1] !~ /[^ ]/\n  while cursor < @buffer.size-1 && @buffer[cursor+1] == \" \" do\n    @buffer.slice!(cursor+1)\n  end\n  while cursor < @buffer.size-1 && @buffer[cursor+1] != \" \" do\n    @buffer.slice!(cursor+1)\n  end\nend\n\ngets.to_i.times do\n  @buffer = \"^\"+gets.chomp\n  gets.to_i.times do\n    case gets.chomp\n      when \"forward char\"\n        forwardChar\n      when \"forward word\"\n        forwardWord\n      when \"backward char\"\n        backwardChar\n      when \"backward word\"\n        backwardWord\n      when \"delete char\"\n        deleteChar\n      when \"delete word\"\n        deleteWord\n      when /insert \"(.*)\"/\n        insert($1)\n    end\n  end\n  puts @buffer\nend"
  },
  {
    "language": "Ruby",
    "code": "# AOJ 1101 A Simple Offline Text Editor\n\nclass TextEditor\n  def initialize(text)\n    @text = text\n    @cursor = 0\n  end\n\n  def to_s\n    text_before_cursor + \"^\" + text_after_cursor\n  end\n\n  def inspect\n    %Q|#<TextEditor:0x#{\"%x\".%(object_id)} \"#{to_s}\">|\n  end\n\n  def forward_char\n    @cursor += 1 if @cursor < @text.length\n    self\n  end\n\n  def forward_word\n    # if @cursor < @text.length\n    #   m = /^ +/.match(text_after_cursor)\n    #   @cursor += m[0].length if m\n    # end\n\n    # if @cursor < @text.length\n    #   m = /^[^ ]+/.match(text_after_cursor)\n    #   @cursor += m[0].length if m\n    # end\n\n    @cursor += 1 while @cursor < @text.length && @text[@cursor] == \" \"\n    @cursor += 1 while @cursor < @text.length && @text[@cursor] != \" \"\n\n    self\n  end\n\n  def backward_char\n    @cursor -= 1 if @cursor > 0\n    self\n  end\n\n  def backward_word\n    # if @cursor > 0\n    #   last_blank_pos = text_before_cursor.sub(/\\s+$/, \"\").rindex(\" \")\n    #   if last_blank_pos\n    #     @cursor = last_blank_pos + 1\n    #   else\n    #     @cursor = 0\n    #   end\n    # end\n\n    @cursor -= 1 while @cursor > 0 && @text[@cursor - 1] == \" \"\n    @cursor -= 1 while @cursor > 0 && @text[@cursor - 1] != \" \"\n\n    self\n  end\n\n  def insert(text)\n    @text = text_before_cursor + text + text_after_cursor\n    @cursor += text.length\n\n    self\n  end\n\n  def delete_char\n    unless @cursor == @text.length\n      @text = text_before_cursor + text_after_cursor[1..-1]\n    end\n\n    self\n  end\n\n  def delete_word\n    # unless @cursor == @text.length\n    #   @text = text_before_cursor +\n    #     text_after_cursor.sub(/ *[^ ]*/, \"\")\n    # end\n\n    if @cursor < @text.length\n      word_end = @cursor\n      word_end += 1 while word_end < @text.length && @text[word_end] == \" \"\n      return self if word_end == @text.length\n\n      word_end += 1 while word_end < @text.length && @text[word_end] != \" \"\n      @text = text_before_cursor + @text[word_end..-1]\n    end\n\n    self\n  end\n\n  private\n  def text_before_cursor\n    if @cursor.zero?\n      \"\"\n    else\n      @text[0..(@cursor - 1)]\n    end\n  end\n\n  def text_after_cursor\n    if @cursor == @text.length\n      \"\"\n    else\n      @text[@cursor..-1]\n    end\n  end\nend\n\nn_texts = gets.to_i\nn_texts.times do\n  t = TextEditor.new(gets.chomp)\n\n  n_commands = gets.to_i\n  n_commands.times do\n    command, argument = gets.chomp.split(\" \", 2)\n    argument.sub!(/^ +/, \"\")\n\n    case command\n    when \"forward\"\n      case argument\n      when \"char\"\n        t.forward_char\n      when \"word\"\n        t.forward_word\n      end\n    when \"backward\"\n      case argument\n      when \"char\"\n        t.backward_char\n      when \"word\"\n        t.backward_word\n      end\n    when \"insert\"\n      m = /^\"(.*)\"/.match(argument)\n      t.insert m[1] if m\n    when \"delete\"\n      case argument\n      when \"char\"\n        t.delete_char\n      when \"word\"\n        t.delete_word\n      end\n    end\n  end\n\n  puts t.to_s\nend"
  },
  {
    "language": "Ruby",
    "code": "# AOJ 1101 A Simple Offline Text Editor\n\nclass TextEditor\n  def initialize(text)\n    @text = text\n    @cursor = 0\n  end\n\n  def to_s\n    text_before_cursor + \"^\" + text_after_cursor\n  end\n\n  def inspect\n    %Q|#<TextEditor:0x#{\"%x\".%(object_id)} \"#{to_s}\">|\n  end\n\n  def forward_char\n    @cursor += 1 if @cursor < @text.length\n    self\n  end\n\n  def forward_word\n    # if @cursor < @text.length\n    #   m = /^ +/.match(text_after_cursor)\n    #   @cursor += m[0].length if m\n    # end\n\n    # if @cursor < @text.length\n    #   m = /^[^ ]+/.match(text_after_cursor)\n    #   @cursor += m[0].length if m\n    # end\n\n    @cursor += 1 while @cursor < @text.length && @text[@cursor] == \" \"\n    @cursor += 1 while @cursor < @text.length && @text[@cursor] != \" \"\n\n    self\n  end\n\n  def backward_char\n    @cursor -= 1 if @cursor > 0\n    self\n  end\n\n  def backward_word\n    # if @cursor > 0\n    #   last_blank_pos = text_before_cursor.sub(/\\s+$/, \"\").rindex(\" \")\n    #   if last_blank_pos\n    #     @cursor = last_blank_pos + 1\n    #   else\n    #     @cursor = 0\n    #   end\n    # end\n\n    @cursor -= 1 while @cursor > 0 && @text[@cursor - 1] == \" \"\n    @cursor -= 1 while @cursor > 0 && @text[@cursor - 1] != \" \"\n\n    self\n  end\n\n  def insert(text)\n    @text = text_before_cursor + text + text_after_cursor\n    @cursor += text.length\n\n    self\n  end\n\n  def delete_char\n    unless @cursor == @text.length\n      @text = text_before_cursor + text_after_cursor[1..-1]\n    end\n\n    self\n  end\n\n  def delete_word\n    # unless @cursor == @text.length\n    #   @text = text_before_cursor +\n    #     text_after_cursor.sub(/ *[^ ]*/, \"\")\n    # end\n\n    if @cursor < @text.length\n      word_end = @cursor\n      word_end += 1 while word_end < @text.length && @text[word_end] == \" \"\n      return self if @cursor == @text.length\n\n      word_end += 1 while word_end < @text.length && @text[word_end] != \" \"\n      @text = text_before_cursor + @text[word_end..-1]\n    end\n\n    self\n  end\n\n  private\n  def text_before_cursor\n    if @cursor.zero?\n      \"\"\n    else\n      @text[0..(@cursor - 1)]\n    end\n  end\n\n  def text_after_cursor\n    if @cursor == @text.length\n      \"\"\n    else\n      @text[@cursor..-1]\n    end\n  end\nend\n\nn_texts = gets.to_i\nn_texts.times do\n  t = TextEditor.new(gets.chomp)\n\n  n_commands = gets.to_i\n  n_commands.times do\n    command, argument = gets.chomp.split(\" \", 2)\n    argument.sub!(/^ +/, \"\")\n\n    case command\n    when \"forward\"\n      case argument\n      when \"char\"\n        t.forward_char\n      when \"word\"\n        t.forward_word\n      end\n    when \"backward\"\n      case argument\n      when \"char\"\n        t.backward_char\n      when \"word\"\n        t.backward_word\n      end\n    when \"insert\"\n      m = /^\"(.*)\"/.match(argument)\n      t.insert m[1] if m\n    when \"delete\"\n      case argument\n      when \"char\"\n        t.delete_char\n      when \"word\"\n        t.delete_word\n      end\n    end\n  end\n\n  puts t.to_s\nend"
  },
  {
    "language": "Ruby",
    "code": "# AOJ 1101 A Simple Offline Text Editor\n\nclass TextEditor\n  def initialize(text)\n    @text = text\n    @cursor = 0\n  end\n\n  def to_s\n    text_before_cursor + \"^\" + text_after_cursor\n  end\n\n  def inspect\n    %Q|#<TextEditor:0x#{\"%x\".%(object_id)} \"#{to_s}\">|\n  end\n\n  def forward_char\n    @cursor += 1 if @cursor < @text.length\n    self\n  end\n\n  def forward_word\n    if @cursor < @text.length\n      m = /^ +/.match(text_after_cursor)\n      @cursor += m[0].length if m\n\n      m = /^[^ ]+/.match(text_after_cursor)\n      @cursor += m[0].length if m\n    end\n\n    self\n  end\n\n  def backward_char\n    @cursor -= 1 if @cursor > 0\n    self\n  end\n\n  def backward_word\n    if @cursor > 0\n      last_blank_pos = text_before_cursor.sub(/\\s+$/, \"\").rindex(\" \")\n      if last_blank_pos\n        @cursor = last_blank_pos + 1\n      else\n        @cursor = 0\n      end\n    end\n\n    self\n  end\n\n  def insert(text)\n    @text = text_before_cursor + text + text_after_cursor\n    @cursor += text.length\n\n    self\n  end\n\n  def delete_char\n    unless @cursor == @text.length\n      @text = text_before_cursor + text_after_cursor[1..-1]\n    end\n\n    self\n  end\n\n  def delete_word\n    unless @cursor == @text.length\n      @text = text_before_cursor +\n        text_after_cursor.sub(/ *[^ ]*/, \"\")\n    end\n\n    self\n  end\n\n  private\n  def text_before_cursor\n    if @cursor.zero?\n      \"\"\n    else\n      @text[0..(@cursor - 1)]\n    end\n  end\n\n  def text_after_cursor\n    if @cursor == @text.length\n      \"\"\n    else\n      @text[@cursor..-1]\n    end\n  end\nend\n\nn_texts = gets.to_i\nn_texts.times do\n  t = TextEditor.new(gets.chomp)\n\n  n_commands = gets.to_i\n  n_commands.times do\n    command, argument = gets.chomp.split(\" \", 2)\n    argument.sub!(/^ +/, \"\")\n\n    case command\n    when \"forward\"\n      case argument\n      when \"char\"\n        t.forward_char\n      when \"word\"\n        t.forward_word\n      end\n    when \"backward\"\n      case argument\n      when \"char\"\n        t.backward_char\n      when \"word\"\n        t.backward_word\n      end\n    when \"insert\"\n      m = /^\"(.*?)\"/.match(argument)\n      t.insert m[1] if m\n    when \"delete\"\n      case argument\n      when \"char\"\n        t.delete_char\n      when \"word\"\n        t.delete_word\n      end\n    end\n  end\n\n  puts t.to_s\nend"
  },
  {
    "language": "Ruby",
    "code": "# AOJ 1101 A Simple Offline Text Editor\n\nclass TextEditor\n  def initialize(text)\n    @text = text\n    @cursor = 0\n  end\n\n  def to_s\n    text_before_cursor + \"^\" + text_after_cursor\n  end\n\n  def inspect\n    %Q|#<TextEditor:0x#{\"%x\".%(object_id)} \"#{to_s}\">|\n  end\n\n  def forward_char(n = 1)\n    n.times do\n      break unless @cursor < @text.length\n      @cursor += 1\n    end\n\n    self\n  end\n\n  def forward_word(n = 1)\n    n.times do\n      break unless @cursor < @text.length\n\n      m = /^ +[^ ]*/.match(text_after_cursor)\n      if m\n        @cursor += m[0].length\n        next\n      end\n\n      m = /^[^ ]+/.match(text_after_cursor)\n      if m\n        @cursor += m[0].length\n        next\n      end\n    end\n\n    self\n  end\n\n  def backward_char(n = 1)\n    n.times do\n      break unless @cursor > 0\n      @cursor -= 1\n    end\n\n    self\n  end\n\n  def backward_word(n = 1)\n    n.times do\n      break if @cursor.zero?\n\n      last_blank_pos = text_before_cursor.sub(/\\s+$/, \"\").rindex(\" \")\n      if last_blank_pos\n        @cursor = last_blank_pos + 1\n      else\n        @cursor = 0\n      end\n    end\n\n    self\n  end\n\n  def insert(text)\n    @text = text_before_cursor + text + text_after_cursor\n    @cursor += text.length\n\n    self\n  end\n\n  def delete_char(n = 1)\n    n.times do\n      break if @cursor == @text.length\n      @text = text_before_cursor + text_after_cursor[1..-1]\n    end\n\n    self\n  end\n\n  def delete_word(n = 1)\n    n.times do\n      break if @cursor == @text.length\n      @text = text_before_cursor +\n        text_after_cursor.sub(/ *[^ ]*/, \"\")\n    end\n\n    self\n  end\n\n  private\n  def text_before_cursor\n    if @cursor.zero?\n      \"\"\n    else\n      @text[0..(@cursor - 1)]\n    end\n  end\n\n  def text_after_cursor\n    if @cursor == @text.length\n      \"\"\n    else\n      @text[@cursor..-1]\n    end\n  end\nend\n\nn_texts = gets.to_i\nn_texts.times do\n  t = TextEditor.new(gets.chomp)\n\n  n_commands = gets.to_i\n  n_commands.times do\n    command, argument = gets.chomp.split(\" \", 2)\n    argument.sub!(/^ +/, \"\")\n\n    case command\n    when \"forward\"\n      case argument\n      when \"char\"\n        t.forward_char\n      when \"word\"\n        t.forward_word\n      end\n    when \"backward\"\n      case argument\n      when \"char\"\n        t.backward_char\n      when \"word\"\n        t.backward_word\n      end\n    when \"insert\"\n      m = /^\"(.*?)\"/.match(argument)\n      t.insert m[1] if m\n    when \"delete\"\n      case argument\n      when \"char\"\n        t.delete_char\n      when \"word\"\n        t.delete_word\n      end\n    end\n  end\n\n  puts t.to_s\nend"
  },
  {
    "language": "Python",
    "code": "def main():\n    dic = {\"forward char\": forward_char,\n           \"backward char\": backward_char,\n           \"forward word\": forward_word,\n           \"backward word\": backward_word,\n           \"delete char\": delete_char,\n           \"delete word\": delete_word}\n    for _ in xrange(input()):\n        s = \"^\" + raw_input()\n        for _ in xrange(input()):\n            com = raw_input()\n            if com in dic:\n                s = dic[com](s)\n            else:\n                _, c = my_split(com)\n                s = insert_maker(c.strip('\"'))(s)\n        print s\n\ndef my_split(text):\n    for i, c in enumerate(text):\n        if c == \" \":\n            return text[:i], text[i+1:]\n\ndef forward_char(text):\n    cur = text.find(\"^\")\n    if cur == len(text):\n        return text\n    text = text.replace(\"^\", \"\")\n    return text[:cur+1] + \"^\" + text[cur+1:]\n\ndef backward_char(text):\n    return forward_char(text[::-1])[::-1]\n\ndef insert_maker(c):\n    def insert_char(text):\n        cur = text.find(\"^\")\n        return text.replace(\"^\", c+\"^\")\n    return insert_char\n\ndef forward_word(text):\n    cur = text.find(\"^\")\n    text = text.replace(\"^\", \"\")\n    while cur < len(text) and text[cur] == \" \":\n        cur += 1\n    if cur == len(text):\n        return text + \"^\"\n    for i, c in enumerate(text[cur:], start=cur):        \n        if c == \" \":\n            return text[:i] + \"^\" + text[i:]\n    return text + \"^\"\n\ndef backward_word(text):\n    return forward_word(text[::-1])[::-1]\n\ndef delete_char(text):\n    cur = text.find(\"^\")\n    if cur == len(text):\n        return text\n    return text[:cur+1] + text[cur+2:]\n\ndef delete_word(text):\n    left, right = text.find(\"^\"), forward_word(text).find(\"^\")\n    return text[:left] + \"^\" + text[right+1:].lstrip()\n\nif __name__ == \"__main__\":\n    main()"
  },
  {
    "language": "Python",
    "code": "def operate( cmd, text, cur ):\n    lentxt = len(text)\n    if cmd == \"forward char\":\n        if cur < lentxt: cur += 1\n    elif cmd == \"backward char\":\n        if cur > 0: cur -= 1\n    elif cmd == \"forward word\":\n        while cur < lentxt and text[cur] == ' ': cur += 1\n        while cur < lentxt and text[cur] != ' ': cur += 1\n    elif cmd == \"backward word\":\n        while cur > 0 and text[cur - 1] == ' ': cur -= 1\n        while cur > 0 and text[cur - 1] != ' ': cur -= 1\n    elif cmd == \"delete char\":\n        text = text[:cur] + text[cur + 1:]\n    elif cmd == \"delete word\":\n        d = 0\n        while cur + d < lentxt and text[cur + d] == ' ': d += 1\n        while cur + d < lentxt and text[cur + d] != ' ': d += 1\n        text = text[:cur] + text[cur + d:]\n    else:\n        ins = cmd[8:-1]\n        text = text[:cur] + ins + text[cur:]\n        cur += len(ins)\n    return cur, text\n\nif __name__ == \"__main__\":\n    rnd = int(raw_input())\n    for i in range(rnd):\n        text = raw_input()\n        cnt = int(raw_input())\n        cursor = 0\n        for j in range(cnt):\n            command = raw_input()\n            cursor, text = operate( command, text, cursor)\n        print text[:cursor] + '^' + text[cursor:]"
  },
  {
    "language": "Python",
    "code": "class TextEditor:\n    cur_w = 0\n    cur_c = 0\n\n    def __init__(self, txt):\n        self.words = txt.split(' ')\n        self.queries = {\n            'forward char': self.forward_char,\n            'forward word': self.forward_word,\n            'backward char': self.backward_char,\n            'backward word': self.backward_word,\n            'delete char': self.delete_char,\n            'delete word': self.delete_word\n        }\n\n    def query(self, q):\n        if q[0] == 'i':\n            txt = q.split(maxsplit=1)[1][1:-1]\n            self.insert(txt)\n        else:\n            self.queries[q]()\n\n    def forward_word(self):\n        cw = self.words[self.cur_w]\n        if self.cur_c < len(cw):\n            self.cur_c = len(cw)\n        elif self.cur_w < len(self.words) - 1:\n            self.cur_w += 1\n            self.cur_c = len(self.words[self.cur_w])\n        else:\n            pass\n\n    def forward_char(self):\n        if self.cur_c < len(self.words[self.cur_w]):\n            self.cur_c += 1\n        elif self.cur_w < len(self.words) - 1:\n            self.cur_w += 1\n            self.cur_c = 0\n        else:\n            pass\n\n    def backward_char(self):\n        if self.cur_c > 0:\n            self.cur_c -= 1\n        elif self.cur_w > 0:\n            self.cur_w -= 1\n            self.cur_c = len(self.words[self.cur_w])\n        else:\n            pass\n\n    def backward_word(self):\n        if self.cur_w > 0:\n            self.cur_w -= 1\n            self.cur_c = len(self.words[self.cur_w])\n        else:\n            self.cur_c = 0\n\n    def insert(self, txt):\n        st = txt.split(' ')\n        new_words = self.words[:self.cur_w]\n        if len(st) > 1:\n            cw = self.words[self.cur_w]\n            new_words.append(cw[:self.cur_c] + st[0])\n            new_words.extend(st[1:-1])\n            new_words.append(st[-1] + cw[self.cur_c:])\n        else:\n            cw = self.words[self.cur_w]\n            new_words.append(cw[:self.cur_c] + st[0] + cw[self.cur_c:])\n        new_words.extend(self.words[self.cur_w + 1:])\n        self.cur_w = self.cur_w + len(st) - 1\n        self.cur_c = self.cur_c + len(st[-1])\n        self.words = new_words\n\n    def delete_char(self):\n        cw = self.words[self.cur_w]\n        if len(cw) == 0:\n            self.words.pop(self.cur_w)\n        elif self.cur_c < len(cw):\n            self.words[self.cur_w] = cw[:self.cur_c] + cw[self.cur_c + 1:]\n        elif self.cur_w < len(self.words) - 1:\n            nw = self.words.pop(self.cur_w + 1)\n            self.words[self.cur_w] = cw + nw\n        else:\n            pass\n\n    def delete_word(self):\n        while not len(self.words[self.cur_w]) and len(self.words) > 1:\n            self.words.pop(self.cur_w)\n            self.cur_c = 0\n        self.words[self.cur_w] = self.words[self.cur_w][:self.cur_c]\n\n    def output(self):\n        words = self.words.copy()\n        words[self.cur_w] = self.words[self.cur_w][:self.cur_c] + '^' + \\\n                            self.words[self.cur_w][self.cur_c:]\n        print(*words)\n\n\nn = int(input())\nfor _ in range(n):\n    te = TextEditor(input().strip())\n    q = int(input())\n    for _ in range(q):\n        te.query(input().strip())\n    te.output()"
  },
  {
    "language": "Python",
    "code": "for r in range(input()):\n\ts = raw_input()\n\tcur = 0\n\tfor rr in range(input()):\n\t\tcom = raw_input()\n\t\tif   com == \"forward char\":\n\t\t\tcur = min(len(s),cur+1)\n\t\t\t\n\t\telif com == \"forward word\":\n\t\t\twhile cur < len(s) and s[cur] == \" \": cur+=1\n\t\t\twhile cur < len(s) and s[cur] != \" \": cur+=1\n\t\t\t\t\n\t\telif com == \"backward char\":\n\t\t\tcur = max(0,cur-1)\n\t\t\t\n\t\telif com == \"backward word\":\n\t\t\twhile cur > 0 and s[cur-1] == \" \": cur-=1\n\t\t\twhile cur > 0 and s[cur-1] != \" \": cur-=1\n\t\t\t\n\t\telif com == \"delete char\":\n\t\t\ts = s[:cur] + s[cur+1:]\n\t\t\t\n\t\telif com == \"delete word\":\n\t\t\twhile cur < len(s) and s[cur] == \" \": s = s[:cur] + s[cur+1:]\n\t\t\twhile cur < len(s) and s[cur] != \" \": s = s[:cur] + s[cur+1:]\n\t\t\t\n\t\telif com[:6] == \"insert\":\n\t\t\ts = s[:cur] + com[8:-1] + s[cur:]\n\t\t\tcur += len(com[8:-1])\n\t\t\t\n\tprint s[:cur] + \"^\" + s[cur:]"
  },
  {
    "language": "Python",
    "code": "def operate( cmd, text, cur ):\n    lentxt = len(text)\n    if cmd == \"forward char\":\n        if cur < lentxt: cur += 1\n    elif cmd == \"backward char\":\n        if cur > 0: cur -= 1\n    elif cmd == \"forward word\":\n        while cur < lentxt and text[cur] == ' ': cur += 1\n        while cur < lentxt and text[cur] != ' ': cur += 1\n    elif cmd == \"backward word\":\n        while cur > 0 and text[cur - 1] == ' ': cur -= 1\n        while cur > 0 and text[cur - 1] != ' ': cur -= 1\n    elif cmd == \"delete char\":\n        text = text[:cur] + text[cur + 1:]\n    elif cmd == \"delete word\":\n        d = 0\n        while cur + d < lentxt and text[cur + d] == ' ': d += 1\n        while cur + d < lentxt and text[cur + d] != ' ': d += 1\n        text = text[:cur] + text[cur + d:]\n    else:\n        ins = cmd[8:-1]\n        text = text[:cur] + ins + text[cur:]\n        cur += len(ins)\n    return cur, text\n\nif __name__ == \"__main__\":\n    a = int(raw_input())\n    for i in range(a):\n        text = raw_input()\n        cnt = int(raw_input())\n        cursor = 0\n        for j in range(cnt):\n            command = raw_input()\n            cursor, text = operate( command, text, cursor )\n        print (text[:cursor] + '^' + text[cursor:])"
  },
  {
    "language": "Python",
    "code": "def main():\n    dic = {\"forward char\": forward_char,\n           \"backward char\": backward_char,\n           \"forward word\": forward_word,\n           \"backward word\": backward_word,\n           \"delete char\": delete_char,\n           \"delete word\": delete_word}\n    for _ in xrange(input()):\n        s = \"^\" + raw_input()\n        for _ in xrange(input()):\n            com = raw_input()\n            if com in dic:\n                s = dic[com](s)\n            else:\n                _, c = my_split(com)\n                s = insert_maker(c.strip('\"'))(s)\n        print s\n\ndef my_split(text):\n    for i, c in enumerate(text):\n        if c == \" \":\n            return text[:i], text[i+1:]\n\ndef forward_char(text):\n    cur = text.find(\"^\")\n    if cur == len(text):\n        return text\n    text = text.replace(\"^\", \"\")\n    return text[:cur+1] + \"^\" + text[cur+1:]\n\ndef backward_char(text):\n    return forward_char(text[::-1])[::-1]\n\ndef insert_maker(c):\n    def insert_char(text):\n        cur = text.find(\"^\")\n        return text.replace(\"^\", c+\"^\")\n    return insert_char\n\ndef forward_word(text):\n    cur = text.find(\"^\")\n    text = text.replace(\"^\", \"\")\n    while cur < len(text) and text[cur] == \" \":\n        cur += 1\n    if cur == len(text):\n        return text + \"^\"\n    for i, c in enumerate(text[cur:], start=cur):        \n        if c == \" \":\n            return text[:i] + \"^\" + text[i:]\n    return text + \"^\"\n\ndef backward_word(text):\n    return forward_word(text[::-1])[::-1]\n\ndef delete_char(text):\n    cur = text.find(\"^\")\n    if cur == len(text):\n        return text\n    return text[:cur+1] + text[cur+2:]\n\ndef delete_word(text):\n    left, right = text.find(\"^\"), forward_word(text).find(\"^\")\n    text = text[:left] + \"^\" + text[right+1:].lstrip()\n    cur = text.find(\"^\")\n    while cur+1 < len(text) and text[cur+1] == \" \":\n        text = forward_char(text)\n    return text\n\nif __name__ == \"__main__\":\n    main()"
  },
  {
    "language": "Python",
    "code": "for _ in [0]*int(input()):\n    s=input()\n    char=0\n    for _ in [0]*int(input()):\n        c=input()\n        if c[0]=='i':\n            c=c.split('\"')[1]\n            s=s[:char]+c+s[char:]\n            char += len(c)\n            \n        elif c[8]=='w':\n            while char <len(s) and s[char]==' ':\n                char += 1\n            while char < len(s) and s[char]!=' ':\n                char += 1\n                \n        elif c[7]=='c':\n            s=s[:char]+s[char+1:]\n            \n        elif c[9]=='w':\n            while char > 0 and s[char-1]==' ':\n                char-=1\n            while char > 0 and s[char-1]!=' ':\n                char-=1\n                \n        elif c[8]=='c':\n            char=min(len(s),char+1)\n            \n        elif c[7]=='w':\n            if s[char:].count(' ') == len(s[char:]): \n                continue\n            while char<len(s) and s[char]==' ':\n                s=s[:char]+s[char+1:]\n                \n            while char<len(s) and s[char]!=' ':\n                s=s[:char]+s[char+1:]\n                \n        else:\n            char=max(0,char-1)\n            \n    print(s[:char]+'^'+s[char:])\n\n"
  },
  {
    "language": "Python",
    "code": "def operate( cmd, text, cur ):\n    lentxt = len(text)\n    if cmd == \"forward char\":\n        if cur < lentxt: cur += 1\n    elif cmd == \"backward char\":\n        if cur > 0: cur -= 1\n    elif cmd == \"forward word\":\n        while cur < lentxt and text[cur] == ' ': cur += 1\n        while cur < lentxt and text[cur] != ' ': cur += 1\n    elif cmd == \"backward word\":\n        while cur > 0 and text[cur - 1] == ' ': cur -= 1\n        while cur > 0 and text[cur - 1] != ' ': cur -= 1\n    elif cmd == \"delete char\":\n        text = text[:cur] + text[cur + 1:]\n    elif cmd == \"delete word\":\n        d = 0\n        while cur + d < lentxt and text[cur + d] == ' ': d += 1\n        while cur + d < lentxt and text[cur + d] != ' ': d += 1\n        text = text[:cur] + text[cur + d:]\n    else:\n        ins = cmd[8:-1]\n        text = text[:cur] + ins + text[cur:]\n        cur += len(ins)\n    return cur, text\n\nif __name__ == \"__main__\":\n    a = int(raw_input())\n    for i in range(a):\n        text = raw_input()\n        cnt = int(raw_input())\n        cursor = 0\n        for j in range(cnt):\n            command = raw_input()\n            cursor, text = operate( command, text, cursor )\n        print (text[:cursor] + '^' + text[cursor:]).strip()"
  },
  {
    "language": "Python",
    "code": "for i in range(input()):\n    s=raw_input()\n    cur=0\n    for j in range(input()):\n        cmd=raw_input()\n        if cmd==\"forward char\":\n            cur=min(cur+1,len(s))\n        elif cmd==\"forward word\":\n            while cur<len(s) and s[cur]==\" \":\n                cur+=1\n            while cur<len(s) and s[cur]!=\" \":\n                cur+=1\n        elif cmd==\"backward char\":\n            cur=max(cur-1,0)\n        elif cmd==\"backward word\":\n            while cur>0 and s[cur-1]==\" \":\n                cur-=1\n            while cur>0 and s[cur-1]!=\" \":\n                cur-=1\n        elif cmd==\"delete char\":\n            if cur!=len(s):\n                s=s[:cur]+s[cur+1:]\n        elif cmd==\"delete word\":\n            end=s.find(\" \",cur)\n            if end==-1:\n                end=len(s)\n            s=s[:cur]+s[end+1:]\n        elif \"insert\" in cmd:\n            idx1=cmd.find('\"')\n            idx2=cmd.find('\"',idx1+1)\n            s=s[:cur]+cmd[idx1+1:-1]+s[cur:]\n            cur+=idx2-idx1-1\n    print s[:cur]+\"^\"+s[cur:]"
  },
  {
    "language": "Python",
    "code": "def operate( cmd, text, cur ):\n    lentxt = len(text)\n    if cmd == \"forward char\":\n        if cur < lentxt: cur += 1\n    elif cmd == \"backward char\":\n        if cur > 0: cur -= 1\n    elif cmd == \"forward word\":\n        while cur < lentxt and text[cur] == ' ': cur += 1\n        while cur < lentxt and text[cur] != ' ': cur += 1\n    elif cmd == \"backward word\":\n        while cur > 0 and text[cur - 1] == ' ': cur -= 1\n        while cur > 0 and text[cur - 1] != ' ': cur -= 1\n    elif cmd == \"delete char\":\n        text = text[:cur] + text[cur + 1:]\n    elif cmd == \"delete word\":\n        d = 0\n        while cur + d < lentxt and text[cur + d] == ' ': d += 1\n        while cur + d < lentxt and text[cur + d] != ' ': d += 1\n        text = text[:cur] + text[cur + d:]\n    else:\n        ins = cmd[8:-1]\n        text = text[:cur] + ins + text[cur:]\n        cur += len(ins)\n    return cur, text\n\nif __name__ == \"__main__\":\n    rnd = int(raw_input())\n    for i in range(rnd):\n        text = raw_input()\n        cnt = int(raw_input())\n        cursor = 0\n        for j in range(cnt):\n            command = raw_input()\n            cursor, text = operate( command, text, cursor)\n        print (text[:cursor] + '^' + text[cursor:]).rstrip()"
  },
  {
    "language": "Python",
    "code": "for _ in range(input()):\n\ts = raw_input()\n\tcur = 0\n\tfor __ in range(input()):\n\t\tcmd = raw_input()\n\t\tif   cmd == \"forward char\":\n\t\t\tcur = min(len(s),cur+1)\n\t\t\t\n\t\telif cmd == \"forward word\":\n\t\t\twhile cur < len(s) and s[cur] == \" \": cur+=1\n\t\t\twhile cur < len(s) and s[cur] != \" \": cur+=1\n\t\t\t\t\n\t\telif cmd == \"backward char\":\n\t\t\tcur = max(0,cur-1)\n\t\t\t\n\t\telif cmd == \"backward word\":\n\t\t\twhile cur > 0 and s[cur-1] == \" \": cur-=1\n\t\t\twhile cur > 0 and s[cur-1] != \" \": cur-=1\n\t\t\t\n\t\telif cmd == \"delete char\":\n\t\t\ts = s[:cur] + s[cur+1:]\n\t\t\t\n\t\telif cmd == \"delete word\":\n\t\t\tif s[cur:].count(\" \") == len(s[cur:]): continue\n\t\t\twhile cur < len(s) and s[cur] == \" \": s = s[:cur] + s[cur+1:]\n\t\t\twhile cur < len(s) and s[cur] != \" \": s = s[:cur] + s[cur+1:]\n\t\t\t\n\t\telif cmd[:6] == \"insert\":\n\t\t\ts = s[:cur] + cmd[8:-1] + s[cur:]\n\t\t\tcur += len(cmd[8:-1])\n\n\tprint s[:cur] + \"^\" + s[cur:]"
  },
  {
    "language": "Python",
    "code": "for _ in [0]*int(input()):\n    s=input()\n    cur=0\n    for _ in [0]*int(input()):\n        c=input()\n        if c=='forward word':\n            while cur<len(s) and s[cur]==' ':cur+=1\n            while cur<len(s) and s[cur]!=' ':cur+=1\n        elif c=='delete char':s=s[:cur]+s[cur+1:]\n        elif c=='backward word':\n            while cur>0 and s[cur-1]==' ':cur-=1\n            while cur>0 and s[cur-1]!=' ':cur-=1\n        elif c=='forward char':cur=min(len(s),cur+1)\n        elif c=='delete word':\n            if s[cur:].count(' ') == len(s[cur:]): continue\n            while cur<len(s) and s[cur]==' ':s=s[:cur]+s[cur+1:]\n            while cur<len(s) and s[cur]!=' ':s=s[:cur]+s[cur+1:]\n        elif c[0]=='i':\n            c=c.split('\"')[1]\n            s=s[:cur]+c+s[cur:]\n            cur+=len(c)\n        elif 'backward char':cur=max(0,cur-1)\n    print(s[:cur]+'^'+s[cur:])"
  },
  {
    "language": "Python",
    "code": "for _ in range(input()):\n\ts = raw_input()\n\tcur = 0\n\tfor __ in range(input()):\n\t\tcmd = raw_input()\n\t\tif   cmd == \"forward char\":\n\t\t\tcur = min(len(s),cur+1)\n\t\t\t\n\t\telif cmd == \"forward word\":\n\t\t\twhile cur < len(s) and s[cur] == \" \": cur+=1\n\t\t\twhile cur < len(s) and s[cur] != \" \": cur+=1\n\t\t\t\t\n\t\telif cmd == \"backward char\":\n\t\t\tcur = max(0,cur-1)\n\t\t\t\n\t\telif cmd == \"backward word\":\n\t\t\twhile cur > 0 and s[cur-1] == \" \": cur-=1\n\t\t\twhile cur > 0 and s[cur-1] != \" \": cur-=1\n\t\t\t\n\t\telif cmd == \"delete char\":\n\t\t\ts = s[:cur] + s[cur+1:]\n\t\t\t\n\t\telif cmd == \"delete word\":\n\t\t\ttemp=cur\n\t\t\twhile temp<len(s) and s[temp]==\" \": temp+=1\n\t\t\twhile temp<len(s) and s[temp]!=\" \": temp+=1\n\t\t\ts=s[:cur]+s[temp:]\n\n\t\telif cmd[:6] == \"insert\":\n\t\t\ts = s[:cur] + cmd[8:-1] + s[cur:]\n\t\t\tcur += len(cmd[8:-1])\n\n\tprint s[:cur] + \"^\" + s[cur:]"
  },
  {
    "language": "Python",
    "code": "def operate( cmd, text, cur ):\n    lentxt = len(text)\n    if cmd == \"forward char\":\n        if cur < lentxt: cur += 1\n    elif cmd == \"backward char\":\n        if cur > 0: cur -= 1\n    elif cmd == \"forward word\":\n        while cur < lentxt and text[cur] == ' ': cur += 1\n        while cur < lentxt and text[cur] != ' ': cur += 1\n    elif cmd == \"backward word\":\n        while cur > 0 and text[cur - 1] == ' ': cur -= 1\n        while cur > 0 and text[cur - 1] != ' ': cur -= 1\n    elif cmd == \"delete char\":\n        text = text[:cur] + text[cur + 1:]\n    elif cmd == \"delete word\":\n        d = 0\n        while cur + d < lentxt and text[cur + d] == ' ': d += 1\n        while cur + d < lentxt and text[cur + d] != ' ': d += 1\n        text = text[:cur] + text[cur + d:]\n    else:\n        ins = cmd[8:-1]\n        text = text[:cur] + ins + text[cur:]\n        cur += len(ins)\n    return cur, text\n\nif __name__ == \"__main__\":\n    rnd = int(raw_input())\n    for i in range(rnd):\n        text = raw_input()\n        cnt = int(raw_input())\n        cursor = 0\n        for j in range(cnt):\n            command = raw_input()\n            cursor, text = operate( command, text, cursor)\n            print '......',cursor, text #debug\n        print text[:cursor] + '^' + text[cursor:]"
  },
  {
    "language": "Python",
    "code": "for _ in range(input()):\n\ts = raw_input()\n\tcur = 0\n\tfor __ in range(input()):\n\t\tcmd = raw_input()\n\t\tif   cmd == \"forward char\":\n\t\t\tcur = min(len(s),cur+1)\n\t\t\t\n\t\telif cmd == \"forward word\":\n\t\t\twhile cur < len(s) and s[cur] == \" \": cur+=1\n\t\t\twhile cur < len(s) and s[cur] != \" \": cur+=1\n\t\t\t\t\n\t\telif cmd == \"backward char\":\n\t\t\tcur = max(0,cur-1)\n\t\t\t\n\t\telif cmd == \"backward word\":\n\t\t\twhile cur > 0 and s[cur-1] == \" \": cur-=1\n\t\t\twhile cur > 0 and s[cur-1] != \" \": cur-=1\n\t\t\t\n\t\telif cmd == \"delete char\":\n\t\t\ts = s[:cur] + s[cur+1:]\n\t\t\t\n\t\telif cmd == \"delete word\":\n\t\t\twhile cur < len(s) and s[cur] == \" \": s = s[:cur] + s[cur+1:]\n\t\t\twhile cur < len(s) and s[cur] != \" \": s = s[:cur] + s[cur+1:]\n\t\t\t\n\t\telif cmd[:6] == \"insert\":\n\t\t\ts = s[:cur] + cmd[8:-1] + s[cur:]\n\t\t\tcur += len(cmd[8:-1])\n\n\tprint s[:cur] + \"^\" + s[cur:]"
  },
  {
    "language": "Python",
    "code": "for _ in range(input()):\n\ts = raw_input()\n\tcur = 0\n\tfor __ in range(input()):\n\t\tcmd = raw_input()\n\t\tif   cmd == \"forward char\":\n\t\t\tcur = min(len(s),cur+1)\n\t\t\t\n\t\telif cmd == \"forward word\":\n\t\t\twhile cur < len(s) and s[cur] == \" \": cur+=1\n\t\t\twhile cur < len(s) and s[cur] != \" \": cur+=1\n\t\t\t\t\n\t\telif cmd == \"backward char\":\n\t\t\tcur = max(0,cur-1)\n\t\t\t\n\t\telif cmd == \"backward word\":\n\t\t\twhile cur > 0 and s[cur-1] == \" \": cur-=1\n\t\t\twhile cur > 0 and s[cur-1] != \" \": cur-=1\n\t\t\t\n\t\telif cmd == \"delete char\":\n\t\t\ts = s[:cur] + s[cur+1:]\n\t\t\t\n\t\telif cmd == \"delete word\":\n\t\t\twhile cur < len(s) and s[cur] == \" \": s = s[:cur] + s[cur+1:]\n\t\t\twhile cur < len(s) and s[cur] != \" \": s = s[:cur] + s[cur+1:]\n\t\t\t\n\t\telif cmd[:6] == \"insert\":\n\t\t\ts = s[:cur] + cmd[8:-1] + s[cur:]\n\t\t\tcur += len(cmd[8:-1])\n\n\tprint s[:cur] + \"^\" + s[cur:]"
  },
  {
    "language": "Python",
    "code": "for i in range(input()):\n    s=raw_input()\n    cur=0\n    for j in range(input()):\n        cmd=raw_input()\n        if cmd==\"forward char\":\n            cur=min(cur+1,len(s))\n        elif cmd==\"forward word\":\n            while cur<len(s) and s[cur]==\" \":\n                cur+=1\n            while cur<len(s) and s[cur]!=\" \":\n                cur+=1\n        elif cmd==\"backward char\":\n            cur=max(cur-1,0)\n        elif cmd==\"backward word\":\n            while cur>0 and s[cur-1]==\" \":\n                cur-=1\n            while cur>0 and s[cur-1]!=\" \":\n                cur-=1\n        elif cmd==\"delete char\":\n            if cur!=len(s):\n                s=s[:cur]+s[cur+1:]\n        elif cmd==\"delete word\":\n            temp=cur\n            if temp>=len(s):\n                continue\n            while s[temp]==\" \":\n                temp+=1\n            if temp>=len(s):\n                continue\n            while temp<len(s) and s[temp]!=\" \":\n                temp+=1\n            s=s[:cur]+s[temp:]\n        elif \"insert\" in cmd:\n            idx1=cmd.find('\"')\n            idx2=cmd.find('\"',idx1+1)\n            s=s[:cur]+cmd[idx1+1:-1]+s[cur:]\n            cur+=idx2-idx1-1\n    print s[:cur]+\"^\"+s[cur:]"
  },
  {
    "language": "Python",
    "code": "for r in range(input()):\n\tmsg = raw_input()\n\tcur = 0\n\tfor rr in range(input()):\n\t\tcom = raw_input()\n\t\tif   com == \"forward char\":\n\t\t\tcur = min(len(msg),cur+1)\n\t\t\t\n\t\telif com == \"forward word\":\n\t\t\tflag = 0\n\t\t\twhile 1:\n\t\t\t\tif cur == len(msg): break\n\t\t\t\tif msg[cur] != \" \": flag = 1\n\t\t\t\tif flag and msg[cur] == \" \": break\n\t\t\t\tcur += 1\n\t\t\t\t\n\t\telif com == \"backward char\":\n\t\t\tcur = max(0,cur-1)\n\t\t\t\n\t\telif com == \"backward word\":\n\t\t\tflag = 0\n\t\t\twhile 1:\n\t\t\t\tif cur == 0: break\n\t\t\t\tif cur < len(msg) and msg[cur] != \" \": flag = 1\n\t\t\t\tif flag and msg[cur-1] == \" \": break\n\t\t\t\tcur -= 1\n\t\t\t\t\n\t\telif com == \"delete char\":\n\t\t\tmsg = msg[:cur] + msg[cur+1:]\n\t\t\t\n\t\telif com == \"delete word\":\n\t\t\tflag = 0\n\t\t\twhile 1:\n\t\t\t\tif cur == len(msg): break\n\t\t\t\tif msg[cur] != \" \": flag = 1\n\t\t\t\tif flag and msg[cur] == \" \": break \n\t\t\t\tmsg = msg[:cur] + msg[cur+1:]\n\t\t\t\t\n\t\telif com[:6] == \"insert\":\n\t\t\tmsg = msg[:cur] + com[8:-1] + msg[cur:]\n\t\t\tcur += len(com[8:-1])\n\tprint msg[:cur] + \"^\" + msg[cur:]"
  },
  {
    "language": "Python",
    "code": "for i in range(input()):\n    s=raw_input()\n    cur=0\n    for j in range(input()):\n        temp=raw_input()\n        cmd,obj=temp.replace('\"',\"\").split()\n        if cmd==\"forward\":\n            if obj==\"char\":\n                cur+=1\n                cur=min(cur,len(s))\n            else:\n                while cur<len(s):\n                    if s[cur]==\" \":\n                        break\n                    cur+=1\n        elif cmd==\"backward\":\n            if obj==\"char\":\n                cur-=1\n                cur=max(cur,0)\n            else:\n                while cur>0:\n                    cur-=1\n                    if s[cur]==\" \":\n                        break\n        elif cmd==\"delete\":\n            if obj==\"char\":\n                if cur!=len(s):\n                    s=s[:cur]+s[cur+1:]\n            else:\n                end=s.find(\" \",cur)\n                if end==-1:\n                    end=len(s)\n                s=s[:cur]+s[end+1:]\n        elif cmd==\"insert\":\n            idx=temp.find('\"')+1\n            s=s[:cur]+temp[idx:-1]+s[cur:]\n            cur=len(s[:cur]+temp[idx:-1])\n    print s[:cur]+\"^\"+s[cur:]"
  },
  {
    "language": "Python",
    "code": "def operate( cmd, text, cur ):\n    lentxt = len(text)\n    if cmd == \"forward char\":\n        if cur < lentxt: cur += 1\n    elif cmd == \"backward char\":\n        if cur > 0: cur -= 1\n    elif cmd == \"forward word\":\n        while cur < lentxt and text[cur] == ' ': cur += 1\n        while cur < lentxt and text[cur] != ' ': cur += 1\n    elif cmd == \"backward word\":\n        while cur > 0 and text[cur - 1] == ' ': cur -= 1\n        while cur > 0 and text[cur - 1] != ' ': cur -= 1\n    elif cmd == \"delete char\":\n        text = text[:cur] + text[cur + 1:]\n    elif cmd == \"delete word\":\n        d = 0\n        while cur + d < lentxt and text[cur + d] == ' ': d += 1\n        while cur + d < lentxt and text[cur + d] != ' ': d += 1\n        text = text[:cur] + text[cur + d:]\n    else:\n        ins = cmd[8:-1]\n        text = text[:cur] + ins + text[cur:]\n        cur += len(ins)\n    return cur, text\n\nif __name__ == \"__main__\":\n    a = int(raw_input())\n    for i in range(a):\n        text = raw_input()\n        cnt = int(raw_input())\n        cursor = 0\n        for j in range(cnt):\n            command = raw_input()\n            cursor, text = operate( command, text, cursor )\n        print text[:cursor] + '^' + text[cursor:]"
  },
  {
    "language": "Python",
    "code": "for _ in [0]*int(input()):\n    s=input()\n    cur=0\n    for _ in [0]*int(input()):\n        c=input()\n        if c=='forward word':\n            while cur<len(s) and s[cur]==' ':cur+=1\n            while cur<len(s) and s[cur]!=' ':cur+=1\n        elif c=='delete char' and cur!=len(s):s=s[:cur]+s[cur+1:]\n        elif c=='backward word':\n            while cur>0 and s[cur-1]==' ':cur-=1\n            while cur>0 and s[cur-1]!=' ':cur-=1\n        elif c=='forward char':cur=min(len(s),cur+1)\n        elif c=='delete word':\n            if s[cur:].count(' ') == len(s[cur:]): continue\n            while cur<len(s) and s[cur]==' ':s=s[:cur]+s[cur+1:]\n            while cur<len(s) and s[cur]!=' ':s=s[:cur]+s[cur+1:]\n        elif c[0]=='i':\n            c=c.split('\"')[1]\n            s=s[:cur]+c+s[cur:]\n            cur+=len(c)\n        elif 'backward char':cur=max(0,cur-1)\n    print(s[:cur]+'^'+s[cur:])"
  },
  {
    "language": "Python",
    "code": "def operate( cmd, text, cur ):\n    lentxt = len(text)\n    if cmd == \"forward char\":\n        if cur < lentxt: cur += 1\n    elif cmd == \"backward char\":\n        if cur > 0: cur -= 1\n    elif cmd == \"forward word\":\n        while cur < lentxt and text[cur] == ' ': cur += 1\n        while cur < lentxt and text[cur] != ' ': cur += 1\n    elif cmd == \"backward word\":\n        while cur > 0 and text[cur - 1] == ' ': cur -= 1\n        while cur > 0 and text[cur - 1] != ' ': cur -= 1\n    elif cmd == \"delete char\":\n        text = text[:cur] + text[cur + 1:]\n    elif cmd == \"delete word\":\n        d = 0\n        while cur + d < lentxt and text[cur + d] == ' ': d += 1\n        if cur + d == lentxt: break\n        while cur + d < lentxt and text[cur + d] != ' ': d += 1\n        text = text[:cur] + text[cur + d:]\n    else:\n        ins = cmd[8:-1]\n        text = text[:cur] + ins + text[cur:]\n        cur += len(ins)\n    return cur, text\n\nif __name__ == \"__main__\":\n    a = int(raw_input())\n    for i in range(a):\n        text = raw_input()\n        cnt = int(raw_input())\n        cursor = 0\n        for j in range(cnt):\n            command = raw_input()\n            cursor, text = operate( command, text, cursor )\n        print (text[:cursor] + '^' + text[cursor:])"
  },
  {
    "language": "Python",
    "code": "def main():\n    dic = {\"forward char\": forward_char,\n           \"backward char\": backward_char,\n           \"forward word\": forward_word,\n           \"backward word\": backward_word,\n           \"delete char\": delete_char,\n           \"delete word\": delete_word}\n    for _ in xrange(input()):\n        s = \"^\" + raw_input()\n        for _ in xrange(input()):\n            com = raw_input()\n            if com in dic:\n                s = dic[com](s)\n            else:\n                _, c = my_split(com)\n                s = insert_maker(c.strip('\"'))(s)\n        print s\n\ndef my_split(text):\n    for i, c in enumerate(text):\n        if c == \" \":\n            return text[:i], text[i+1:]\n\ndef forward_char(text):\n    cur = text.find(\"^\")\n    if cur == len(text):\n        return text\n    text = text.replace(\"^\", \"\")\n    return text[:cur+1] + \"^\" + text[cur+1:]\n\ndef backward_char(text):\n    return forward_char(text[::-1])[::-1]\n\ndef insert_maker(c):\n    def insert_char(text):\n        cur = text.find(\"^\")\n        return text.replace(\"^\", c+\"^\")\n    return insert_char\n\ndef forward_word(text):\n    cur = text.find(\"^\")\n    text = text.replace(\"^\", \"\")\n    while cur < len(text) and text[cur] == \" \":\n        cur += 1\n    if cur == len(text):\n        return text + \"^\"\n    for i, c in enumerate(text[cur:], start=cur):        \n        if c == \" \":\n            return text[:i] + \"^\" + text[i:]\n    return text + \"^\"\n\ndef backward_word(text):\n    return forward_word(text[::-1])[::-1]\n\ndef delete_char(text):\n    cur = text.find(\"^\")\n    if cur == len(text):\n        return text\n    return text[:cur+1] + text[cur+2:]\n\ndef delete_word(text):\n    left, right = text.find(\"^\"), forward_word(text).find(\"^\")\n    text = text[:left] + \"^\" + text[right+1:]\n    cur = text.find(\"^\")\n    while cur+1 < len(text) and text[cur+1] == \" \":\n        text = forward_char(text)\n    return text\n\nif __name__ == \"__main__\":\n    main()"
  },
  {
    "language": "Python",
    "code": "for _ in [0]*int(input()):\n    s=input()\n    cur=0\n    for _ in [0]*int(input()):\n        c=input()\n        if c[0]=='i':\n            c=c.split('\"')[1]\n            s=s[:cur]+c+s[cur:]\n            cur+=len(c)\n        elif c[8]=='w':\n            while cur<len(s) and s[cur]==' ':cur+=1\n            while cur<len(s) and s[cur]!=' ':cur+=1\n        elif c[7]=='c':s=s[:cur]+s[cur+1:]\n        elif c[9]=='w':\n            while cur>0 and s[cur-1]==' ':cur-=1\n            while cur>0 and s[cur-1]!=' ':cur-=1\n        elif c[8]=='c':cur=min(len(s),cur+1)\n        elif c[7]=='w':\n            if s[cur:].count(' ') == len(s[cur:]): continue\n            while cur<len(s) and s[cur]==' ':s=s[:cur]+s[cur+1:]\n            while cur<len(s) and s[cur]!=' ':s=s[:cur]+s[cur+1:]\n        else:cur=max(0,cur-1)\n    print(s[:cur]+'^'+s[cur:])"
  },
  {
    "language": "Python",
    "code": "def operate( cmd, text, cur ):\n    lentxt = len(text)\n    if cmd == \"forward char\":\n        if cur < lentxt: cur += 1\n    elif cmd == \"backward char\":\n        if cur > 0: cur -= 1\n    elif cmd == \"forward word\":\n        while cur < lentxt and text[cur] == ' ': cur += 1\n        while cur < lentxt and text[cur] != ' ': cur += 1\n    elif cmd == \"backward word\":\n        while cur > 0 and text[cur - 1] == ' ': cur -= 1\n        while cur > 0 and text[cur - 1] != ' ': cur -= 1\n    elif cmd == \"delete char\":\n        text = text[:cur] + text[cur + 1:]\n    elif cmd == \"delete word\":\n        d = 0\n        while cur + d < lentxt and text[cur + d] == ' ': d += 1\n        if cur + d != lentxt:\n            while cur + d < lentxt and text[cur + d] != ' ': d += 1\n            text = text[:cur] + text[cur + d:]\n    else:\n        ins = cmd[8:-1]\n        text = text[:cur] + ins + text[cur:]\n        cur += len(ins)\n    return cur, text\n\nif __name__ == \"__main__\":\n    a = int(raw_input())\n    for i in range(a):\n        text = raw_input()\n        cnt = int(raw_input())\n        cursor = 0\n        for j in range(cnt):\n            command = raw_input()\n            cursor, text = operate( command, text, cursor )\n        print (text[:cursor] + '^' + text[cursor:])"
  },
  {
    "language": "Python",
    "code": "def operate( cmd, text, cur ):\n    lentxt = len(text)\n    if cmd == \"forward char\":\n        if cur < lentxt: cur += 1\n    elif cmd == \"backward char\":\n        if cur > 0: cur -= 1\n    elif cmd == \"forward word\":\n        while cur < lentxt and text[cur] == ' ': cur += 1\n        while cur < lentxt and text[cur] != ' ': cur += 1\n    elif cmd == \"backward word\":\n        while cur > 0 and text[cur - 1] == ' ': cur -= 1\n        while cur > 0 and text[cur - 1] != ' ': cur -= 1\n    elif cmd == \"delete char\":\n        text = text[:cur] + text[cur + 1:]\n    elif cmd == \"delete word\":\n        d = 0\n        while cur + d < lentxt and text[cur + d] == ' ': d += 1\n        while cur + d < lentxt and text[cur + d] != ' ': d += 1\n        text = text[:cur] + text[cur + d:]\n    else:\n        ins = cmd[8:-1]\n        text = text[:cur] + ins + text[cur:]\n        cur += len(ins)\n    return cur, text\n\nif __name__ == \"__main__\":\n    rnd = int(raw_input())\n    for i in range(rnd):\n        text = raw_input()\n        cnt = int(raw_input())\n        cursor = 0\n        for j in range(cnt):\n            command = raw_input()\n            cursor, text = operate( command, text, cursor )\n        print (text[:cursor] + '^' + text[cursor:]).strip()"
  },
  {
    "language": "Python",
    "code": "for i in range(input()):\n    s=raw_input()\n    cur=0\n    for j in range(input()):\n        cmd=raw_input()\n        if cmd==\"forward char\":\n            cur=min(cur+1,len(s))\n        elif cmd==\"forward word\":\n            while cur<len(s) and s[cur]==\" \":\n                cur+=1\n            while cur<len(s) and s[cur]!=\" \":\n                cur+=1\n        elif cmd==\"backward char\":\n            cur=max(cur-1,0)\n        elif cmd==\"backward word\":\n            while cur>0 and s[cur-1]==\" \":\n                cur-=1\n            while cur>0 and s[cur-1]!=\" \":\n                cur-=1\n        elif cmd==\"delete char\":\n            if cur!=len(s):\n                s=s[:cur]+s[cur+1:]\n        elif cmd==\"delete word\":\n            temp=cur\n            if temp>=len(s):\n                continue\n            while s[temp]==\" \":\n                temp+=1\n            if temp>=len(s):\n                continue\n            while s[temp]!=\" \" and temp<len(s):\n                temp+=1\n            s=s[:cur]+s[temp:]\n        elif \"insert\" in cmd:\n            idx1=cmd.find('\"')\n            idx2=cmd.find('\"',idx1+1)\n            s=s[:cur]+cmd[idx1+1:-1]+s[cur:]\n            cur+=idx2-idx1-1\n    print s[:cur]+\"^\"+s[cur:]"
  },
  {
    "language": "Python",
    "code": "for _ in range(input()):\n\ts = raw_input()\n\tcur = 0\n\tfor __ in range(input()):\n\t\tcmd = raw_input()\n\t\tif   cmd == \"forward char\":\n\t\t\tcur = min(len(s),cur+1)\n\t\t\t\n\t\telif cmd == \"forward word\":\n\t\t\twhile cur < len(s) and s[cur] == \" \": cur+=1\n\t\t\twhile cur < len(s) and s[cur] != \" \": cur+=1\n\t\t\t\t\n\t\telif cmd == \"backward char\":\n\t\t\tcur = max(0,cur-1)\n\t\t\t\n\t\telif cmd == \"backward word\":\n\t\t\twhile cur > 0 and s[cur-1] == \" \": cur-=1\n\t\t\twhile cur > 0 and s[cur-1] != \" \": cur-=1\n\t\t\t\n\t\telif cmd == \"delete char\":\n\t\t\ts = s[:cur] + s[cur+1:]\n\t\t\t\n\t\telif cmd == \"delete word\":\n\t\t\ttemp=cur\n\t\t\tif temp>=len(s):\n\t\t\t\tcontinue\n\t\t\twhile temp<len(s) and s[temp]==\" \":\n\t\t\t\ttemp+=1\n\t\t\tif temp>=len(s):\n\t\t\t\tcontinue\n\t\t\twhile temp<len(s) and s[temp]!=\" \":\n\t\t\t\ttemp+=1\n\t\t\ts = s[:cur] + s[temp:]\n\t\telif cmd[:6] == \"insert\":\n\t\t\ts = s[:cur] + cmd[8:-1] + s[cur:]\n\t\t\tcur += len(cmd[8:-1])\n\n\tprint s[:cur] + \"^\" + s[cur:]"
  },
  {
    "language": "Python",
    "code": "for i in range(input()):\n    s=raw_input()\n    cur=0\n    for j in range(input()):\n        temp=raw_input()\n        if temp.startswith(\"insert\"):\n            cmd=\"insert\"\n        else:\n            cmd,obj=temp.split()\n        if cmd==\"forward\":\n            if obj==\"char\":\n                cur+=1\n                cur=min(cur,len(s))\n            else:\n                while cur<len(s):\n                    if s[cur]==\" \":\n                        break\n                    cur+=1\n        elif cmd==\"backward\":\n            if obj==\"char\":\n                cur-=1\n                cur=max(cur,0)\n            else:\n                while cur>0:\n                    cur-=1\n                    if s[cur]==\" \":\n                        break\n        elif cmd==\"delete\":\n            if obj==\"char\":\n                if cur!=len(s):\n                    s=s[:cur]+s[cur+1:]\n            else:\n                end=s.find(\" \",cur)\n                if end==-1:\n                    end=len(s)\n                s=s[:cur]+s[end+1:]\n        elif cmd==\"insert\":\n            idx=temp.find('\"')+1\n            s=s[:cur]+temp[idx:-1]+s[cur:]\n            cur=len(s[:cur]+temp[idx:-1])\n    print s[:cur]+\"^\"+s[cur:]"
  },
  {
    "language": "Python",
    "code": "for i in range(input()):\n    s=raw_input()\n    cur=0\n    for j in range(input()):\n        cmd=raw_input()\n        if cmd==\"forward char\":\n            cur=min(cur+1,len(s))\n        elif cmd==\"forward word\":\n            while cur<len(s) and s[cur]==\" \":\n                cur+=1\n            while cur<len(s) and s[cur]!=\" \":\n                cur+=1\n        elif cmd==\"backward char\":\n            cur=max(cur-1,0)\n        elif cmd==\"backward word\":\n            while cur>0 and s[cur-1]==\" \":\n                cur-=1\n            while cur>0 and s[cur-1]!=\" \":\n                cur-=1\n        elif cmd==\"delete char\":\n            if cur!=len(s):\n                s=s[:cur]+s[cur+1:]\n        elif cmd==\"delete word\":\n            temp=cur\n            if temp>=len(s):\n                continue\n            while temp<len(s) and s[temp]==\" \":\n                temp+=1\n            if temp>=len(s):\n                continue\n            while temp<len(s) and s[temp]!=\" \":\n                temp+=1\n            s=s[:cur]+s[temp:]\n        elif \"insert\" in cmd:\n            idx1=cmd.find('\"')\n            idx2=cmd.find('\"',idx1+1)\n            s=s[:cur]+cmd[idx1+1:-1]+s[cur:]\n            cur+=idx2-idx1-1\n    print s[:cur]+\"^\"+s[cur:]"
  },
  {
    "language": "Python",
    "code": "class TextEditor:\n    cur_w = 0\n    cur_c = 0\n\n    def __init__(self, txt):\n        self.words = txt.split(' ')\n        self.queries = {\n            'forward char': self.forward_char,\n            'forward word': self.forward_word,\n            'backward char': self.backward_char,\n            'backward word': self.backward_word,\n            'delete char': self.delete_char,\n            'delete word': self.delete_word\n        }\n\n    def query(self, q):\n        if q[0] == 'i':\n            txt = q.split(maxsplit=1)[1][1:-1]\n            self.insert(txt)\n        else:\n            self.queries[q]()\n\n    def forward_char(self):\n        if self.cur_c < len(self.words[self.cur_w]):\n            self.cur_c += 1\n        elif self.cur_w < len(self.words) - 1:\n            self.cur_w += 1\n            self.cur_c = 0\n        else:\n            pass\n\n    def forward_word(self):\n        if self.cur_c < len(self.words[self.cur_w]):\n            self.cur_c = len(self.words[self.cur_w])\n        elif self.cur_w < len(self.words) - 1:\n            self.cur_w += 1\n            while not len(self.words[self.cur_w]) and self.cur_w < len(self.words) - 1:\n                self.cur_w += 1\n            self.cur_c = len(self.words[self.cur_w])\n        else:\n            pass\n\n    def backward_char(self):\n        if self.cur_c > 0:\n            self.cur_c -= 1\n        elif self.cur_w > 0:\n            self.cur_w -= 1\n            self.cur_c = len(self.words[self.cur_w])\n        else:\n            pass\n\n    def backward_word(self):\n        if self.cur_c > 0:\n            self.cur_c = 0\n        elif self.cur_w > 0:\n            self.cur_w -= 1\n            while not len(self.words[self.cur_w]) and self.cur_w > 0:\n                self.cur_w -= 1\n        else:\n            pass\n\n    def insert(self, txt):\n        st = txt.split(' ')\n        new_words = self.words[:self.cur_w]\n        if len(st) > 1:\n            cw = self.words[self.cur_w]\n            new_words.append(cw[:self.cur_c] + st[0])\n            new_words.extend(st[1:-1])\n            new_words.append(st[-1] + cw[self.cur_c:])\n            self.cur_c = len(st[-1])\n        else:\n            cw = self.words[self.cur_w]\n            new_words.append(cw[:self.cur_c] + st[0] + cw[self.cur_c:])\n            self.cur_c = self.cur_c + len(st[0])\n        new_words.extend(self.words[self.cur_w + 1:])\n        self.cur_w = self.cur_w + len(st) - 1\n        self.words = new_words\n\n    def delete_char(self):\n        cw = self.words[self.cur_w]\n        if self.cur_c < len(cw):\n            self.words[self.cur_w] = cw[:self.cur_c] + cw[self.cur_c + 1:]\n        elif self.cur_w < len(self.words) - 1:\n            if len(cw):\n                nw = self.words.pop(self.cur_w + 1)\n                self.words[self.cur_w] = cw + nw\n            else:\n                self.words.pop(self.cur_w)\n        else:\n            pass\n\n    def delete_word(self):\n        if self.cur_c < len(self.words[self.cur_w]):\n            self.words[self.cur_w] = self.words[self.cur_w][:self.cur_c]\n        elif self.cur_w < len(self.words) - 1:\n            tmp_w = self.cur_w + 1\n            while tmp_w < len(self.words) and not len(self.words[tmp_w]):\n                tmp_w += 1\n            if tmp_w < len(self.words):\n                del self.words[self.cur_w + 1:tmp_w + 1]\n\n    def output(self):\n        words = self.words.copy()\n        words[self.cur_w] = self.words[self.cur_w][:self.cur_c] + '^' + \\\n                            self.words[self.cur_w][self.cur_c:]\n        print(*words)\n\n\nn = int(input())\nfor _ in range(n):\n    te = TextEditor(input().strip())\n    q = int(input())\n    for _ in range(q):\n        te.query(input().strip())\n    te.output()"
  },
  {
    "language": "Python",
    "code": "n = int(input())\nfor _ in range(n):\n    tx = list(input())\n    m = int(input())\n    cursorpoint = 0\n    for i in range(m):\n        qur = input().split()\n        if qur[0] == \"forward\":\n            if qur[1] == \"char\":\n                cursorpoint = min(len(tx), cursorpoint+1)\n            else:\n                flag = cursorpoint == 0\n                while cursorpoint < len(tx):\n                    if tx[cursorpoint] == \" \":\n                        if flag:\n                            break\n                        else:\n                            cursorpoint += 1\n                    else:\n                        cursorpoint += 1\n                        flag = True\n        if qur[0] == \"backward\":\n            if qur[1] == \"char\":\n                cursorpoint = max(0,cursorpoint-1)\n            else:\n                flag = False\n                while cursorpoint > 0:\n                    if tx[cursorpoint-1] == \" \":\n                            cursorpoint -= 1\n                            flag = True\n                    elif flag:\n                        break\n                    else:\n                        cursorpoint -= 1\n        if qur[0] == \"insert\":\n            txtt = list(\"\".join(qur[1:]))\n            txtt.remove(\"\\\"\")\n            txtt.remove(\"\\\"\")\n            if cursorpoint <len(tx):\n                tx = tx[:cursorpoint] + txtt + tx[cursorpoint:]\n            else:\n                tx = tx[:cursorpoint] + txtt\n            cursorpoint += len(txtt)\n        if qur[0] == \"delete\":\n            if qur[1] == \"char\":\n                if cursorpoint < len(tx):\n                    tx.pop(cursorpoint)\n            else:\n                memo = cursorpoint\n                flag = cursorpoint == len(tx)\n                dodelete = True\n                while cursorpoint < len(tx):\n                    if tx[cursorpoint] == \" \":\n                        if flag:\n                            break\n                        else:\n                            cursorpoint += 1\n                    else:\n                        cursorpoint += 1\n                        flag = True\n                else:\n                    dodelete = False\n                if dodelete:\n                    tx = tx[:memo]+tx[cursorpoint:]\n                cursorpoint = memo\n\n    print(\"\".join(tx[:cursorpoint])+\"^\"+\"\".join(tx[cursorpoint:]))"
  }
]