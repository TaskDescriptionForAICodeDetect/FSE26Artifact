[
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_TEXT 1001\n#define MAX_INSERT 101\n\nchar text[MAX_TEXT];\nint cursor = 0;\nint length = 0;\n\nvoid move_forward_char(int n) {\n    for (int i = 0; i < n && cursor < length; i++) {\n        cursor++;\n    }\n}\n\nvoid move_backward_char(int n) {\n    for (int i = 0; i < n && cursor > 0; i++) {\n        cursor--;\n    }\n}\n\nvoid move_forward_word(int n) {\n    for (int i = 0; i < n && cursor < length; ) {\n        while (cursor < length && !isalnum(text[cursor])) {\n            cursor++;\n        }\n        if (cursor < length) {\n            while (cursor < length && isalnum(text[cursor])) {\n                cursor++;\n            }\n            i++;\n        }\n    }\n}\n\nvoid move_backward_word(int n) {\n    for (int i = 0; i < n && cursor > 0; ) {\n        while (cursor > 0 && !isalnum(text[cursor - 1])) {\n            cursor--;\n        }\n        if (cursor > 0) {\n            while (cursor > 0 && isalnum(text[cursor - 1])) {\n                cursor--;\n            }\n            i++;\n        }\n    }\n}\n\nvoid insert_text(char *str) {\n    int len = strlen(str);\n    if (length + len >= MAX_TEXT) {\n        return;\n    }\n    memmove(text + cursor + len, text + cursor, length - cursor + 1);\n    memcpy(text + cursor, str, len);\n    cursor += len;\n    length += len;\n}\n\nvoid delete_char(int n) {\n    if (n > 0) {\n        int del = (cursor + n <= length) ? n : length - cursor;\n        memmove(text + cursor, text + cursor + del, length - cursor - del + 1);\n        length -= del;\n    } else if (n < 0) {\n        int del = (cursor + n >= 0) ? -n : cursor;\n        memmove(text + cursor - del, text + cursor, length - cursor + 1);\n        cursor -= del;\n        length -= del;\n    }\n}\n\nvoid delete_word(int n) {\n    if (n > 0) {\n        for (int i = 0; i < n && cursor < length; ) {\n            while (cursor < length && !isalnum(text[cursor])) {\n                delete_char(1);\n            }\n            if (cursor < length) {\n                while (cursor < length && isalnum(text[cursor])) {\n                    delete_char(1);\n                }\n                i++;\n            }\n        }\n    } else if (n < 0) {\n        for (int i = 0; i < -n && cursor > 0; ) {\n            move_backward_word(1);\n            while (cursor < length && !isalnum(text[cursor])) {\n                move_backward_char(1);\n            }\n            int start = cursor;\n            move_backward_word(1);\n            while (start < length && !isalnum(text[start])) {\n                start++;\n            }\n            if (start > cursor) {\n                int del = start - cursor;\n                memmove(text + cursor, text + start, length - start + 1);\n                length -= del;\n                i++;\n            }\n        }\n    }\n}\n\nint main() {\n    fgets(text, MAX_TEXT, stdin);\n    length = strlen(text);\n    if (length > 0 && text[length - 1] == '\\n') {\n        text[--length] = '\\0';\n    }\n    cursor = 0;\n\n    char command[20];\n    int n;\n    char str[MAX_INSERT];\n\n    while (scanf(\"%s\", command) != EOF) {\n        if (strcmp(command, \"forward\") == 0) {\n            scanf(\"%s\", command);\n            scanf(\"%d\", &n);\n            if (strcmp(command, \"char\") == 0) {\n                move_forward_char(n);\n            } else if (strcmp(command, \"word\") == 0) {\n                move_forward_word(n);\n            }\n        } else if (strcmp(command, \"backward\") == 0) {\n            scanf(\"%s\", command);\n            scanf(\"%d\", &n);\n            if (strcmp(command, \"char\") == 0) {\n                move_backward_char(n);\n            } else if (strcmp(command, \"word\") == 0) {\n                move_backward_word(n);\n            }\n        } else if (strcmp(command, \"insert\") == 0) {\n            scanf(\" %[^\\n]\", str);\n            insert_text(str);\n        } else if (strcmp(command, \"delete\") == 0) {\n            scanf(\"%s\", command);\n            scanf(\"%d\", &n);\n            if (strcmp(command, \"char\") == 0) {\n                delete_char(n);\n            } else if (strcmp(command, \"word\") == 0) {\n                delete_word(n);\n            }\n        }\n    }\n\n    printf(\"%s\\n\", text);\n    return 0;\n}",
    "timestamp": "2025-08-05 19:02:41"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class OfflineTextEditor {\n    private StringBuilder text;\n    private int cursor;\n\n    public OfflineTextEditor(String initialText) {\n        this.text = new StringBuilder(initialText);\n        this.cursor = initialText.length();\n    }\n\n    public void moveCursorLeft(int count) {\n        cursor = Math.max(0, cursor - count);\n    }\n\n    public void moveCursorRight(int count) {\n        cursor = Math.min(text.length(), cursor + count);\n    }\n\n    public void moveCursorWordLeft() {\n        while (cursor > 0 && !Character.isLetterOrDigit(text.charAt(cursor - 1))) {\n            cursor--;\n        }\n        while (cursor > 0 && Character.isLetterOrDigit(text.charAt(cursor - 1))) {\n            cursor--;\n        }\n    }\n\n    public void moveCursorWordRight() {\n        while (cursor < text.length() && !Character.isLetterOrDigit(text.charAt(cursor))) {\n            cursor++;\n        }\n        while (cursor < text.length() && Character.isLetterOrDigit(text.charAt(cursor))) {\n            cursor++;\n        }\n    }\n\n    public void insertText(String newText) {\n        if (text.length() + newText.length() <= 1000) {\n            text.insert(cursor, newText);\n            cursor += newText.length();\n        }\n    }\n\n    public void deleteCharacter(int count) {\n        int deleteEnd = Math.min(cursor + count, text.length());\n        text.delete(cursor, deleteEnd);\n    }\n\n    public void deleteWord(int count) {\n        for (int i = 0; i < count; i++) {\n            moveCursorWordRight();\n            int deleteEnd = cursor;\n            moveCursorWordLeft();\n            text.delete(cursor, deleteEnd);\n        }\n    }\n\n    public String getText() {\n        return text.toString();\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String initialText = scanner.nextLine();\n        OfflineTextEditor editor = new OfflineTextEditor(initialText);\n\n        int numCommands = scanner.nextInt();\n        scanner.nextLine();\n\n        for (int i = 0; i < numCommands; i++) {\n            String command = scanner.nextLine();\n            String[] parts = command.split(\" \");\n\n            switch (parts[0]) {\n                case \"ML\":\n                    editor.moveCursorLeft(Integer.parseInt(parts[1]));\n                    break;\n                case \"MR\":\n                    editor.moveCursorRight(Integer.parseInt(parts[1]));\n                    break;\n                case \"WL\":\n                    editor.moveCursorWordLeft();\n                    break;\n                case \"WR\":\n                    editor.moveCursorWordRight();\n                    break;\n                case \"I\":\n                    editor.insertText(parts[1]);\n                    break;\n                case \"DC\":\n                    editor.deleteCharacter(Integer.parseInt(parts[1]));\n                    break;\n                case \"DW\":\n                    editor.deleteWord(Integer.parseInt(parts[1]));\n                    break;\n            }\n        }\n\n        System.out.println(editor.getText());\n        scanner.close();\n    }\n}",
    "timestamp": "2025-08-05 19:02:52"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\nusing namespace std;\n\nint main() {\n    string text;\n    getline(cin, text);\n    int cursor_pos = 0;\n    int num_commands;\n    cin >> num_commands;\n    cin.ignore();\n\n    for (int i = 0; i < num_commands; ++i) {\n        string command;\n        getline(cin, command);\n\n        if (command == \"forward_char\") {\n            if (cursor_pos < text.length()) {\n                cursor_pos++;\n            }\n        } else if (command == \"backward_char\") {\n            if (cursor_pos > 0) {\n                cursor_pos--;\n            }\n        } else if (command == \"forward_word\") {\n            while (cursor_pos < text.length() && text[cursor_pos] == ' ') {\n                cursor_pos++;\n            }\n            while (cursor_pos < text.length() && text[cursor_pos] != ' ') {\n                cursor_pos++;\n            }\n        } else if (command == \"backward_word\") {\n            while (cursor_pos > 0 && text[cursor_pos - 1] == ' ') {\n                cursor_pos--;\n            }\n            while (cursor_pos > 0 && text[cursor_pos - 1] != ' ') {\n                cursor_pos--;\n            }\n        } else if (command.substr(0, 7) == \"insert \") {\n            string insert_text = command.substr(7);\n            text.insert(cursor_pos, insert_text);\n            cursor_pos += insert_text.length();\n        } else if (command == \"delete_char\") {\n            if (cursor_pos < text.length()) {\n                text.erase(cursor_pos, 1);\n            }\n        } else if (command == \"delete_word\") {\n            int end_pos = cursor_pos;\n            while (end_pos < text.length() && text[end_pos] == ' ') {\n                end_pos++;\n            }\n            while (end_pos < text.length() && text[end_pos] != ' ') {\n                end_pos++;\n            }\n            text.erase(cursor_pos, end_pos - cursor_pos);\n        }\n    }\n\n    cout << text << endl;\n    return 0;\n}",
    "timestamp": "2025-08-05 19:03:12"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <ctype.h>\n\n#define MAX_TEXT_LENGTH 1000\n#define MAX_INSERT_LENGTH 100\n\ntypedef struct {\n    char text[MAX_TEXT_LENGTH + 1];\n    int cursor;\n} TextEditor;\n\nvoid initialize_editor(TextEditor *editor, const char *initial_text) {\n    strncpy(editor->text, initial_text, MAX_TEXT_LENGTH);\n    editor->text[MAX_TEXT_LENGTH] = '\\0';\n    editor->cursor = strlen(editor->text);\n}\n\nvoid move_cursor_forward_char(TextEditor *editor) {\n    if (editor->cursor < strlen(editor->text)) {\n        editor->cursor++;\n    }\n}\n\nvoid move_cursor_backward_char(TextEditor *editor) {\n    if (editor->cursor > 0) {\n        editor->cursor--;\n    }\n}\n\nvoid move_cursor_forward_word(TextEditor *editor) {\n    while (editor->cursor < strlen(editor->text) && \n           !isspace(editor->text[editor->cursor])) {\n        editor->cursor++;\n    }\n    while (editor->cursor < strlen(editor->text) && \n           isspace(editor->text[editor->cursor])) {\n        editor->cursor++;\n    }\n}\n\nvoid move_cursor_backward_word(TextEditor *editor) {\n    while (editor->cursor > 0 && \n           isspace(editor->text[editor->cursor - 1])) {\n        editor->cursor--;\n    }\n    while (editor->cursor > 0 && \n           !isspace(editor->text[editor->cursor - 1])) {\n        editor->cursor--;\n    }\n}\n\nvoid insert_text(TextEditor *editor, const char *insert_str) {\n    int insert_len = strlen(insert_str);\n    int text_len = strlen(editor->text);\n    \n    if (text_len + insert_len > MAX_TEXT_LENGTH) {\n        insert_len = MAX_TEXT_LENGTH - text_len;\n    }\n    \n    memmove(editor->text + editor->cursor + insert_len, \n            editor->text + editor->cursor, \n            text_len - editor->cursor + 1);\n    \n    strncpy(editor->text + editor->cursor, insert_str, insert_len);\n    editor->cursor += insert_len;\n}\n\nvoid delete_char(TextEditor *editor) {\n    if (editor->cursor < strlen(editor->text)) {\n        memmove(editor->text + editor->cursor, \n                editor->text + editor->cursor + 1, \n                strlen(editor->text) - editor->cursor);\n    }\n}\n\nvoid delete_backward_char(TextEditor *editor) {\n    if (editor->cursor > 0) {\n        editor->cursor--;\n        memmove(editor->text + editor->cursor, \n                editor->text + editor->cursor + 1, \n                strlen(editor->text) - editor->cursor);\n    }\n}\n\nvoid delete_word(TextEditor *editor) {\n    while (editor->cursor < strlen(editor->text) && \n           !isspace(editor->text[editor->cursor])) {\n        delete_char(editor);\n    }\n    while (editor->cursor < strlen(editor->text) && \n           isspace(editor->text[editor->cursor])) {\n        delete_char(editor);\n    }\n}\n\nvoid delete_backward_word(TextEditor *editor) {\n    while (editor->cursor > 0 && \n           isspace(editor->text[editor->cursor - 1])) {\n        delete_backward_char(editor);\n    }\n    while (editor->cursor > 0 && \n           !isspace(editor->text[editor->cursor - 1])) {\n        delete_backward_char(editor);\n    }\n}\n\nint main() {\n    TextEditor editor;\n    char initial_text[MAX_TEXT_LENGTH + 1];\n    char command[10], param[MAX_INSERT_LENGTH + 1];\n    \n    fgets(initial_text, sizeof(initial_text), stdin);\n    initial_text[strcspn(initial_text, \"\\n\")] = '\\0';\n    \n    initialize_editor(&editor, initial_text);\n    \n    while (scanf(\"%s\", command) == 1) {\n        if (strcmp(command, \"movefc\") == 0) {\n            move_cursor_forward_char(&editor);\n        } else if (strcmp(command, \"movebc\") == 0) {\n            move_cursor_backward_char(&editor);\n        } else if (strcmp(command, \"movefw\") == 0) {\n            move_cursor_forward_word(&editor);\n        } else if (strcmp(command, \"movebw\") == 0) {\n            move_cursor_backward_word(&editor);\n        } else if (strcmp(command, \"insert\") == 0) {\n            scanf(\"%s\", param);\n            insert_text(&editor, param);\n        } else if (strcmp(command, \"delc\") == 0) {\n            delete_char(&editor);\n        } else if (strcmp(command, \"delbc\") == 0) {\n            delete_backward_char(&editor);\n        } else if (strcmp(command, \"delw\") == 0) {\n            delete_word(&editor);\n        } else if (strcmp(command, \"delbw\") == 0) {\n            delete_backward_word(&editor);\n        } else if (strcmp(command, \"print\") == 0) {\n            printf(\"%s\\n\", editor.text);\n        }\n    }\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 19:03:28"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <sstream>\n\nusing namespace std;\n\nclass TextEditor {\nprivate:\n    string text;\n    int cursor;\n\n    bool isWordChar(char c) {\n        return isalnum(c) || c == '_';\n    }\n\npublic:\n    TextEditor() : cursor(0) {}\n\n    void initialize(const string& initialText) {\n        text = initialText;\n        cursor = 0;\n    }\n\n    void moveCursorLeft(int count) {\n        cursor = max(0, cursor - count);\n    }\n\n    void moveCursorRight(int count) {\n        cursor = min((int)text.length(), cursor + count);\n    }\n\n    void moveCursorWordLeft() {\n        while (cursor > 0 && !isWordChar(text[cursor-1])) \n            cursor--;\n        \n        while (cursor > 0 && isWordChar(text[cursor-1])) \n            cursor--;\n    }\n\n    void moveCursorWordRight() {\n        while (cursor < text.length() && !isWordChar(text[cursor])) \n            cursor++;\n        \n        while (cursor < text.length() && isWordChar(text[cursor])) \n            cursor++;\n    }\n\n    void insertText(const string& insertStr) {\n        text.insert(cursor, insertStr);\n        cursor += insertStr.length();\n    }\n\n    void deleteCharLeft() {\n        if (cursor > 0) {\n            text.erase(cursor - 1, 1);\n            cursor--;\n        }\n    }\n\n    void deleteCharRight() {\n        if (cursor < text.length()) {\n            text.erase(cursor, 1);\n        }\n    }\n\n    void deleteWordLeft() {\n        int start = cursor;\n        moveCursorWordLeft();\n        text.erase(cursor, start - cursor);\n    }\n\n    void deleteWordRight() {\n        int start = cursor;\n        moveCursorWordRight();\n        text.erase(start, cursor - start);\n        cursor = start;\n    }\n\n    string getText() const {\n        return text;\n    }\n};\n\nint main() {\n    string initialText;\n    getline(cin, initialText);\n\n    TextEditor editor;\n    editor.initialize(initialText);\n\n    int numCommands;\n    cin >> numCommands;\n    cin.ignore();\n\n    for (int i = 0; i < numCommands; i++) {\n        string command;\n        getline(cin, command);\n        istringstream iss(command);\n        string op;\n        iss >> op;\n\n        if (op == \"move-left\") {\n            int count;\n            iss >> count;\n            editor.moveCursorLeft(count);\n        }\n        else if (op == \"move-right\") {\n            int count;\n            iss >> count;\n            editor.moveCursorRight(count);\n        }\n        else if (op == \"move-word-left\") {\n            editor.moveCursorWordLeft();\n        }\n        else if (op == \"move-word-right\") {\n            editor.moveCursorWordRight();\n        }\n        else if (op == \"insert\") {\n            string insertText;\n            getline(iss, insertText);\n            insertText = insertText.substr(1);  // Remove leading space\n            editor.insertText(insertText);\n        }\n        else if (op == \"delete-char-left\") {\n            editor.deleteCharLeft();\n        }\n        else if (op == \"delete-char-right\") {\n            editor.deleteCharRight();\n        }\n        else if (op == \"delete-word-left\") {\n            editor.deleteWordLeft();\n        }\n        else if (op == \"delete-word-right\") {\n            editor.deleteWordRight();\n        }\n    }\n\n    cout << editor.getText() << endl;\n\n    return 0;\n}",
    "timestamp": "2025-08-05 19:03:42"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.Scanner;\n\npublic class TextEditor {\n    private StringBuilder buffer;\n    private int cursor;\n\n    public TextEditor(String initialText) {\n        this.buffer = new StringBuilder(initialText);\n        this.cursor = 0;\n    }\n\n    public void moveLeft() {\n        if (cursor > 0) {\n            cursor--;\n        }\n    }\n\n    public void moveRight() {\n        if (cursor < buffer.length()) {\n            cursor++;\n        }\n    }\n\n    public void moveLeftWord() {\n        while (cursor > 0 && !Character.isLetterOrDigit(buffer.charAt(cursor - 1))) {\n            cursor--;\n        }\n        while (cursor > 0 && Character.isLetterOrDigit(buffer.charAt(cursor - 1))) {\n            cursor--;\n        }\n    }\n\n    public void moveRightWord() {\n        while (cursor < buffer.length() && !Character.isLetterOrDigit(buffer.charAt(cursor))) {\n            cursor++;\n        }\n        while (cursor < buffer.length() && Character.isLetterOrDigit(buffer.charAt(cursor))) {\n            cursor++;\n        }\n    }\n\n    public void insert(String text) {\n        if (cursor >= 0 && cursor <= buffer.length()) {\n            buffer.insert(cursor, text);\n            cursor += text.length();\n        }\n    }\n\n    public void deleteLeft() {\n        if (cursor > 0) {\n            buffer.deleteCharAt(cursor - 1);\n            cursor--;\n        }\n    }\n\n    public void deleteRight() {\n        if (cursor < buffer.length()) {\n            buffer.deleteCharAt(cursor);\n        }\n    }\n\n    public void deleteLeftWord() {\n        int tempCursor = cursor;\n        while (tempCursor > 0 && !Character.isLetterOrDigit(buffer.charAt(tempCursor - 1))) {\n            tempCursor--;\n        }\n        while (tempCursor > 0 && Character.isLetterOrDigit(buffer.charAt(tempCursor - 1))) {\n            tempCursor--;\n        }\n        buffer.delete(tempCursor, cursor);\n        cursor = tempCursor;\n    }\n\n    public void deleteRightWord() {\n        int tempCursor = cursor;\n        while (tempCursor < buffer.length() && !Character.isLetterOrDigit(buffer.charAt(tempCursor))) {\n            tempCursor++;\n        }\n        while (tempCursor < buffer.length() && Character.isLetterOrDigit(buffer.charAt(tempCursor))) {\n            tempCursor++;\n        }\n        buffer.delete(cursor, tempCursor);\n    }\n\n    public String getText() {\n        return buffer.toString();\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String initialText = scanner.nextLine();\n        TextEditor editor = new TextEditor(initialText);\n\n        int N = Integer.parseInt(scanner.nextLine());\n        for (int i = 0; i < N; i++) {\n            String command = scanner.nextLine();\n            String[] parts = command.split(\" \");\n            switch (parts[0]) {\n                case \"left\":\n                    editor.moveLeft();\n                    break;\n                case \"right\":\n                    editor.moveRight();\n                    break;\n                case \"left_word\":\n                    editor.moveLeftWord();\n                    break;\n                case \"right_word\":\n                    editor.moveRightWord();\n                    break;\n                case \"insert\":\n                    editor.insert(parts[1]);\n                    break;\n                case \"delete_left\":\n                    editor.deleteLeft();\n                    break;\n                case \"delete_right\":\n                    editor.deleteRight();\n                    break;\n                case \"delete_left_word\":\n                    editor.deleteLeftWord();\n                    break;\n                case \"delete_right_word\":\n                    editor.deleteRightWord();\n                    break;\n            }\n        }\n\n        System.out.println(editor.getText());\n        scanner.close();\n    }\n}",
    "timestamp": "2025-08-05 19:04:37"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "class TextEditor:\n    def __init__(self, text):\n        self.text = list(text)\n        self.cursor = 0\n    \n    def move_forward(self, n):\n        self.cursor = min(self.cursor + n, len(self.text))\n    \n    def move_backward(self, n):\n        self.cursor = max(self.cursor - n, 0)\n    \n    def move_forward_word(self, n):\n        for _ in range(n):\n            while self.cursor < len(self.text) and self.text[self.cursor].isspace():\n                self.cursor += 1\n            while self.cursor < len(self.text) and not self.text[self.cursor].isspace():\n                self.cursor += 1\n    \n    def move_backward_word(self, n):\n        for _ in range(n):\n            while self.cursor > 0 and self.text[self.cursor - 1].isspace():\n                self.cursor -= 1\n            while self.cursor > 0 and not self.text[self.cursor - 1].isspace():\n                self.cursor -= 1\n    \n    def insert(self, substr):\n        self.text[self.cursor:self.cursor] = list(substr)\n        self.cursor += len(substr)\n    \n    def delete(self, n):\n        del self.text[self.cursor:self.cursor + n]\n    \n    def delete_word(self, n):\n        for _ in range(n):\n            while self.cursor < len(self.text) and self.text[self.cursor].isspace():\n                self.cursor += 1\n            start = self.cursor\n            while self.cursor < len(self.text) and not self.text[self.cursor].isspace():\n                self.cursor += 1\n            del self.text[start:self.cursor]\n    \n    def get_text(self):\n        return ''.join(self.text)\n\ndef process_commands(text, commands):\n    editor = TextEditor(text)\n    for command in commands:\n        if command[0] == 'F':\n            editor.move_forward(int(command[1]))\n        elif command[0] == 'B':\n            editor.move_backward(int(command[1]))\n        elif command[0] == 'FW':\n            editor.move_forward_word(int(command[1]))\n        elif command[0] == 'BW':\n            editor.move_backward_word(int(command[1]))\n        elif command[0] == 'I':\n            editor.insert(command[1])\n        elif command[0] == 'D':\n            editor.delete(int(command[1]))\n        elif command[0] == 'DW':\n            editor.delete_word(int(command[1]))\n    return editor.get_text()\n\n# Example usage:\ntext = \"hello world\"\ncommands = [(\"F\", \"6\"), (\"I\", \"beautiful \"), (\"FW\", \"1\"), (\"D\", \"1\")]\nresult = process_commands(text, commands)\nprint(result)  # Output should be: \"hello beautiful world\"",
    "timestamp": "2025-08-13 02:09:11"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "java",
    "code": "import java.util.Scanner;\n\npublic class OfflineTextEditor {\n    private StringBuilder textBuffer;\n    private int cursorPosition;\n\n    public OfflineTextEditor(String initialText) {\n        this.textBuffer = new StringBuilder(initialText);\n        this.cursorPosition = 0;\n    }\n\n    public void moveCursorForwardChar() {\n        if (cursorPosition < textBuffer.length()) {\n            cursorPosition++;\n        }\n    }\n\n    public void moveCursorBackwardChar() {\n        if (cursorPosition > 0) {\n            cursorPosition--;\n        }\n    }\n\n    public void moveCursorForwardWord() {\n        while (cursorPosition < textBuffer.length() && \n               !Character.isLetterOrDigit(textBuffer.charAt(cursorPosition))) {\n            cursorPosition++;\n        }\n        while (cursorPosition < textBuffer.length() && \n               Character.isLetterOrDigit(textBuffer.charAt(cursorPosition))) {\n            cursorPosition++;\n        }\n    }\n\n    public void moveCursorBackwardWord() {\n        while (cursorPosition > 0 && \n               !Character.isLetterOrDigit(textBuffer.charAt(cursorPosition - 1))) {\n            cursorPosition--;\n        }\n        while (cursorPosition > 0 && \n               Character.isLetterOrDigit(textBuffer.charAt(cursorPosition - 1))) {\n            cursorPosition--;\n        }\n    }\n\n    public void insertText(String text) {\n        textBuffer.insert(cursorPosition, text);\n        cursorPosition += text.length();\n    }\n\n    public void deleteCharacter() {\n        if (cursorPosition < textBuffer.length()) {\n            textBuffer.deleteCharAt(cursorPosition);\n        }\n    }\n\n    public void deleteWord() {\n        int start = cursorPosition;\n        while (cursorPosition < textBuffer.length() && \n               !Character.isLetterOrDigit(textBuffer.charAt(cursorPosition))) {\n            cursorPosition++;\n        }\n        while (cursorPosition < textBuffer.length() && \n               Character.isLetterOrDigit(textBuffer.charAt(cursorPosition))) {\n            cursorPosition++;\n        }\n        textBuffer.delete(start, cursorPosition);\n        cursorPosition = start;\n    }\n\n    public String getResultantText() {\n        return textBuffer.toString();\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String initialText = scanner.nextLine();\n        OfflineTextEditor editor = new OfflineTextEditor(initialText);\n\n        int commandCount = Integer.parseInt(scanner.nextLine());\n        for (int i = 0; i < commandCount; i++) {\n            String command = scanner.nextLine();\n            String[] parts = command.split(\" \");\n            switch (parts[0]) {\n                case \"MOVE_FORWARD_CHAR\":\n                    editor.moveCursorForwardChar();\n                    break;\n                case \"MOVE_BACKWARD_CHAR\":\n                    editor.moveCursorBackwardChar();\n                    break;\n                case \"MOVE_FORWARD_WORD\":\n                    editor.moveCursorForwardWord();\n                    break;\n                case \"MOVE_BACKWARD_WORD\":\n                    editor.moveCursorBackwardWord();\n                    break;\n                case \"INSERT\":\n                    String textToInsert = command.substring(command.indexOf(' ') + 1);\n                    editor.insertText(textToInsert);\n                    break;\n                case \"DELETE_CHAR\":\n                    editor.deleteCharacter();\n                    break;\n                case \"DELETE_WORD\":\n                    editor.deleteWord();\n                    break;\n            }\n        }\n\n        System.out.println(editor.getResultantText());\n    }\n}",
    "timestamp": "2025-08-13 02:09:34"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c",
    "code": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_TEXT_LENGTH 1000\n#define MAX_INSERT_LENGTH 100\n\n// Helper function to find next word position moving forward\nint find_next_word_forward(char *text, int cursor) {\n    while (text[cursor] != '\\0' && !isspace(text[cursor]) && !ispunct(text[cursor])) {\n        cursor++;\n    }\n    while (isspace(text[cursor]) || ispunct(text[cursor])) {\n        cursor++;\n    }\n    return cursor;\n}\n\n// Helper function to find previous word position moving backward\nint find_previous_word_backward(char *text, int cursor) {\n    if (cursor == 0) return 0;\n    cursor--;\n    while (cursor > 0 && (isspace(text[cursor]) || ispunct(text[cursor]))) {\n        cursor--;\n    }\n    while (cursor > 0 && !isspace(text[cursor]) && !ispunct(text[cursor])) {\n        cursor--;\n    }\n    if (isspace(text[cursor]) || ispunct(text[cursor])) {\n        return cursor + 1;\n    }\n    return cursor;\n}\n\nvoid process_command(char *text, char *command, int *cursor) {\n    if (strncmp(command, \"Insert \", 7) == 0) {\n        char insert_text[MAX_INSERT_LENGTH + 1];\n        sscanf(command + 7, \"%[^\\n]\", insert_text);\n        int insert_length = strlen(insert_text);\n        if (strlen(text) + insert_length <= MAX_TEXT_LENGTH) {\n            memmove(text + *cursor + insert_length, text + *cursor, strlen(text) - *cursor + 1);\n            memcpy(text + *cursor, insert_text, insert_length);\n            *cursor += insert_length;\n        }\n    } else if (strcmp(command, \"Cursor Left\") == 0) {\n        if (*cursor > 0) (*cursor)--;\n    } else if (strcmp(command, \"Cursor Right\") == 0) {\n        if (*cursor < strlen(text)) (*cursor)++;\n    } else if (strcmp(command, \"Cursor Word Left\") == 0) {\n        *cursor = find_previous_word_backward(text, *cursor);\n    } else if (strcmp(command, \"Cursor Word Right\") == 0) {\n        *cursor = find_next_word_forward(text, *cursor);\n    } else if (strcmp(command, \"Delete\") == 0) {\n        if (*cursor < strlen(text)) {\n            memmove(text + *cursor, text + *cursor + 1, strlen(text) - *cursor);\n        }\n    } else if (strcmp(command, \"Delete Word\") == 0) {\n        int next_word = find_next_word_forward(text, *cursor);\n        memmove(text + *cursor, text + next_word, strlen(text) - next_word + 1);\n    }\n}\n\nint main() {\n    char text[MAX_TEXT_LENGTH + 1];\n    fgets(text, sizeof(text), stdin);\n    text[strcspn(text, \"\\n\")] = '\\0'; // removing the newline character\n\n    int cursor = 0;\n    char command[256];\n\n    while (fgets(command, sizeof(command), stdin)) {\n        command[strcspn(command, \"\\n\")] = '\\0'; // removing the newline character\n        process_command(text, command, &cursor);\n    }\n\n    printf(\"%s\\n\", text);\n    return 0;\n}",
    "timestamp": "2025-08-13 02:09:44"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "class TextEditor:\n    def __init__(self, initial_text=\"\"):\n        self.text = list(initial_text)\n        self.cursor = 0\n\n    def move_cursor_forward_char(self):\n        if self.cursor < len(self.text):\n            self.cursor += 1\n\n    def move_cursor_backward_char(self):\n        if self.cursor > 0:\n            self.cursor -= 1\n\n    def move_cursor_forward_word(self):\n        while self.cursor < len(self.text) and not self.text[self.cursor].isalnum():\n            self.cursor += 1\n        while self.cursor < len(self.text) and self.text[self.cursor].isalnum():\n            self.cursor += 1\n\n    def move_cursor_backward_word(self):\n        while self.cursor > 0 and not self.text[self.cursor-1].isalnum():\n            self.cursor -= 1\n        while self.cursor > 0 and self.text[self.cursor-1].isalnum():\n            self.cursor -= 1\n\n    def insert_text(self, text):\n        if len(self.text) + len(text) <= 1000:\n            self.text[self.cursor:self.cursor] = list(text)\n            self.cursor += len(text)\n\n    def delete_char_forward(self):\n        if self.cursor < len(self.text):\n            del self.text[self.cursor]\n\n    def delete_char_backward(self):\n        if self.cursor > 0:\n            del self.text[self.cursor-1]\n            self.cursor -= 1\n\n    def delete_word_forward(self):\n        initial_cursor = self.cursor\n        self.move_cursor_forward_word()\n        del self.text[initial_cursor:self.cursor]\n        self.cursor = initial_cursor\n\n    def delete_word_backward(self):\n        initial_cursor = self.cursor\n        self.move_cursor_backward_word()\n        del self.text[self.cursor:initial_cursor]\n        self.cursor = self.cursor\n\n    def get_text(self):\n        return ''.join(self.text)\n\ndef process_commands(initial_text, commands):\n    editor = TextEditor(initial_text)\n    for command in commands:\n        if command == 'F':\n            editor.move_cursor_forward_char()\n        elif command == 'B':\n            editor.move_cursor_backward_char()\n        elif command == 'fw':\n            editor.move_cursor_forward_word()\n        elif command == 'bw':\n            editor.move_cursor_backward_word()\n        elif command.startswith('I'):\n            editor.insert_text(command[1:])\n        elif command == 'df':\n            editor.delete_char_forward()\n        elif command == 'db':\n            editor.delete_char_backward()\n        elif command == 'dfw':\n            editor.delete_word_forward()\n        elif command == 'dbw':\n            editor.delete_word_backward()\n    return editor.get_text()",
    "timestamp": "2025-08-13 02:10:04"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def text_editor(initial_text, commands):\n    buffer = list(initial_text)\n    cursor_pos = 0  # 0 means before the first character\n    \n    for cmd in commands:\n        if cmd.startswith('FORWARD_CHAR'):\n            if cursor_pos < len(buffer):\n                cursor_pos += 1\n        elif cmd.startswith('BACKWARD_CHAR'):\n            if cursor_pos > 0:\n                cursor_pos -= 1\n        elif cmd.startswith('FORWARD_WORD'):\n            # Move to the start of the next word or end of buffer\n            while cursor_pos < len(buffer) and buffer[cursor_pos] == ' ':\n                cursor_pos += 1\n            while cursor_pos < len(buffer) and buffer[cursor_pos] != ' ':\n                cursor_pos += 1\n        elif cmd.startswith('BACKWARD_WORD'):\n            # Move to the start of the current or previous word\n            while cursor_pos > 0 and buffer[cursor_pos - 1] == ' ':\n                cursor_pos -= 1\n            while cursor_pos > 0 and buffer[cursor_pos - 1] != ' ':\n                cursor_pos -= 1\n        elif cmd.startswith('INSERT'):\n            _, text = cmd.split(maxsplit=1)\n            buffer.insert(cursor_pos, text)\n            cursor_pos += len(text)\n        elif cmd.startswith('DELETE_CHAR'):\n            if cursor_pos < len(buffer):\n                buffer.pop(cursor_pos)\n        elif cmd.startswith('DELETE_WORD'):\n            # Delete from cursor to end of current word or next word if at space\n            end_pos = cursor_pos\n            while end_pos < len(buffer) and buffer[end_pos] == ' ':\n                end_pos += 1\n            while end_pos < len(buffer) and buffer[end_pos] != ' ':\n                end_pos += 1\n            del buffer[cursor_pos:end_pos]\n    \n    return ''.join(buffer)",
    "timestamp": "2025-08-13 02:10:24"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c++",
    "code": "#include <iostream>\n#include <string>\n#include <sstream>\n#include <vector>\n\nclass TextEditor {\n    std::string buffer;\n    size_t cursor;\n\npublic:\n    TextEditor(const std::string& initialText)\n        : buffer(initialText), cursor(0) {}\n\n    void moveCursorForwardChar() {\n        if (cursor < buffer.size()) {\n            cursor++;\n        }\n    }\n\n    void moveCursorBackwardChar() {\n        if (cursor > 0) {\n            cursor--;\n        }\n    }\n\n    void moveCursorForwardWord() {\n        while (cursor < buffer.size() && buffer[cursor] != ' ') {\n            cursor++;\n        }\n        while (cursor < buffer.size() && buffer[cursor] == ' ') {\n            cursor++;\n        }\n    }\n\n    void moveCursorBackwardWord() {\n        if (cursor == 0) return;\n        cursor--;\n        while (cursor > 0 && buffer[cursor] == ' ') {\n            cursor--;\n        }\n        while (cursor > 0 && buffer[cursor] != ' ') {\n            cursor--;\n        }\n        if (buffer[cursor] == ' ') cursor++;\n    }\n\n    void insertText(const std::string& text) {\n        buffer.insert(cursor, text);\n        cursor += text.size();\n    }\n\n    void deleteChar() {\n        if (cursor < buffer.size()) {\n            buffer.erase(cursor, 1);\n        }\n    }\n\n    void deleteWord() {\n        size_t start = cursor;\n        while (cursor < buffer.size() && buffer[cursor] != ' ') {\n            cursor++;\n        }\n        buffer.erase(start, cursor - start);\n        while (cursor < buffer.size() && buffer[cursor] == ' ') {\n            buffer.erase(cursor, 1);\n        }\n    }\n\n    std::string getText() const {\n        return buffer;\n    }\n};\n\nvoid processCommands(TextEditor& editor, const std::vector<std::string>& commands) {\n    for (const auto& cmd : commands) {\n        std::istringstream iss(cmd);\n        std::string command;\n        iss >> command;\n        if (command == \"MOVE_FORWARD_CHAR\") {\n            editor.moveCursorForwardChar();\n        } else if (command == \"MOVE_BACKWARD_CHAR\") {\n            editor.moveCursorBackwardChar();\n        } else if (command == \"MOVE_FORWARD_WORD\") {\n            editor.moveCursorForwardWord();\n        } else if (command == \"MOVE_BACKWARD_WORD\") {\n            editor.moveCursorBackwardWord();\n        } else if (command == \"INSERT_TEXT\") {\n            std::string text;\n            iss >> std::ws;\n            getline(iss, text);\n            editor.insertText(text);\n        } else if (command == \"DELETE_CHAR\") {\n            editor.deleteChar();\n        } else if (command == \"DELETE_WORD\") {\n            editor.deleteWord();\n        }\n    }\n}\n\nint main() {\n    std::string initialText;\n    std::getline(std::cin, initialText);\n\n    int commandCount;\n    std::cin >> commandCount;\n    std::cin.ignore();\n\n    std::vector<std::string> commands(commandCount);\n    for (int i = 0; i < commandCount; ++i) {\n        std::getline(std::cin, commands[i]);\n    }\n\n    TextEditor editor(initialText);\n    processCommands(editor, commands);\n\n    std::cout << editor.getText() << std::endl;\n\n    return 0;\n}",
    "timestamp": "2025-08-13 11:04:31"
  }
]