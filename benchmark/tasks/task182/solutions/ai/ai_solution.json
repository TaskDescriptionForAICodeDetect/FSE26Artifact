[
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <ctype.h>\n#include <string.h>\n\nvoid toUnderscore(char *str) {\n    for (int i = 0; str[i]; i++) {\n        if (isupper(str[i])) {\n            str[i] = tolower(str[i]);\n            if (i != 0) {\n                memmove(str + i + 1, str + i, strlen(str + i) + 1);\n                str[i] = '_';\n                i++;\n            }\n        }\n    }\n}\n\nvoid toLowerCamel(char *str) {\n    int underscoreFound = 0;\n    for (int i = 0; str[i]; i++) {\n        if (str[i] == '_') {\n            underscoreFound = 1;\n            memmove(str + i, str + i + 1, strlen(str + i + 1) + 1);\n            if (str[i]) {\n                str[i] = toupper(str[i]);\n            }\n            i--;\n        } else if (underscoreFound) {\n            str[i] = tolower(str[i]);\n        }\n    }\n}\n\nvoid toUpperCamel(char *str) {\n    toLowerCamel(str);\n    if (str[0]) {\n        str[0] = toupper(str[0]);\n    }\n}\n\nint main() {\n    char identifier[1000];\n    char type;\n\n    while (1) {\n        scanf(\"%s %c\", identifier, &type);\n        if (type == 'X') break;\n\n        switch (type) {\n            case 'U':\n                toUpperCamel(identifier);\n                break;\n            case 'L':\n                toLowerCamel(identifier);\n                break;\n            case 'D':\n                toUnderscore(identifier);\n                break;\n        }\n\n        printf(\"%s\\n\", identifier);\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-05 18:58:39"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.Scanner;\n\npublic class NamingConvention {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        while (true) {\n            String input = scanner.nextLine();\n            if (input.equals(\"X\")) break;\n\n            String[] parts = input.split(\" \");\n            String identifier = parts[0];\n            char convention = parts[1].charAt(0);\n\n            String result = convertNamingConvention(identifier, convention);\n            System.out.println(result);\n        }\n    }\n\n    public static String convertNamingConvention(String identifier, char convention) {\n        String[] words;\n        \n        if (identifier.contains(\"_\")) {\n            words = identifier.split(\"_\");\n        } else {\n            words = splitCamelCase(identifier);\n        }\n\n        switch (convention) {\n            case 'U':\n                return toUpperCamelCase(words);\n            case 'L':\n                return toLowerCamelCase(words);\n            case 'D':\n                return toUnderscoreCase(words);\n            default:\n                return identifier;\n        }\n    }\n\n    private static String[] splitCamelCase(String identifier) {\n        return identifier.split(\"(?=[A-Z])\");\n    }\n\n    private static String toUpperCamelCase(String[] words) {\n        StringBuilder result = new StringBuilder();\n        for (String word : words) {\n            result.append(word.substring(0, 1).toUpperCase())\n                  .append(word.substring(1).toLowerCase());\n        }\n        return result.toString();\n    }\n\n    private static String toLowerCamelCase(String[] words) {\n        StringBuilder result = new StringBuilder(words[0].toLowerCase());\n        for (int i = 1; i < words.length; i++) {\n            result.append(words[i].substring(0, 1).toUpperCase())\n                  .append(words[i].substring(1).toLowerCase());\n        }\n        return result.toString();\n    }\n\n    private static String toUnderscoreCase(String[] words) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < words.length; i++) {\n            if (i > 0) result.append(\"_\");\n            result.append(words[i].toLowerCase());\n        }\n        return result.toString();\n    }\n}",
    "timestamp": "2025-08-05 18:58:47"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <cctype>\n#include <sstream>\n\nusing namespace std;\n\nstring toUpperCamelCase(const string &s) {\n    string result;\n    bool capitalize = true;\n    for (char c : s) {\n        if (c == '_') {\n            capitalize = true;\n        } else {\n            if (capitalize) {\n                result += toupper(c);\n                capitalize = false;\n            } else {\n                result += tolower(c);\n            }\n        }\n    }\n    return result;\n}\n\nstring toLowerCamelCase(const string &s) {\n    string result;\n    bool capitalize = false;\n    bool firstChar = true;\n    for (char c : s) {\n        if (c == '_') {\n            capitalize = true;\n        } else {\n            if (capitalize || (firstChar && isupper(c))) {\n                result += toupper(c);\n                capitalize = false;\n                firstChar = false;\n            } else {\n                result += tolower(c);\n                firstChar = false;\n            }\n        }\n    }\n    return result;\n}\n\nstring toUnderscore(const string &s) {\n    string result;\n    for (size_t i = 0; i < s.size(); ++i) {\n        char c = s[i];\n        if (isupper(c)) {\n            if (i != 0) {\n                result += '_';\n            }\n            result += tolower(c);\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\n\nstring convert(const string &id, char type) {\n    if (type == 'U') {\n        return toUpperCamelCase(id);\n    } else if (type == 'L') {\n        return toLowerCamelCase(id);\n    } else if (type == 'D') {\n        return toUnderscore(id);\n    }\n    return id;\n}\n\nint main() {\n    string line;\n    while (getline(cin, line)) {\n        if (line == \"X\") break;\n        istringstream iss(line);\n        string id;\n        char type;\n        iss >> id >> type;\n        cout << convert(id, type) << endl;\n    }\n    return 0;\n}",
    "timestamp": "2025-08-05 18:59:06"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_LEN 100\n\nvoid convertToUpperCamelCase(char *str) {\n    int i, j = 0;\n    int capitalize = 1;\n    char result[MAX_LEN] = {0};\n\n    for (i = 0; str[i]; i++) {\n        if (str[i] == '_') {\n            capitalize = 1;\n            continue;\n        }\n        \n        if (capitalize) {\n            result[j++] = toupper(str[i]);\n            capitalize = 0;\n        } else {\n            result[j++] = tolower(str[i]);\n        }\n    }\n    \n    strcpy(str, result);\n}\n\nvoid convertToLowerCamelCase(char *str) {\n    int i, j = 0;\n    int capitalize = 0;\n    char result[MAX_LEN] = {0};\n\n    for (i = 0; str[i]; i++) {\n        if (str[i] == '_') {\n            capitalize = 1;\n            continue;\n        }\n        \n        if (capitalize) {\n            result[j++] = toupper(str[i]);\n            capitalize = 0;\n        } else {\n            result[j++] = tolower(str[i]);\n        }\n    }\n    \n    if (result[0]) {\n        result[0] = tolower(result[0]);\n    }\n    \n    strcpy(str, result);\n}\n\nvoid convertToUnderscoreCase(char *str) {\n    int i, j = 0;\n    char result[MAX_LEN] = {0};\n\n    for (i = 0; str[i]; i++) {\n        if (i > 0 && isupper(str[i])) {\n            result[j++] = '_';\n        }\n        result[j++] = tolower(str[i]);\n    }\n    \n    strcpy(str, result);\n}\n\nint main() {\n    char identifier[MAX_LEN];\n    char type;\n\n    while (1) {\n        scanf(\"%s %c\", identifier, &type);\n\n        if (type == 'X') {\n            break;\n        }\n\n        switch (type) {\n            case 'U':\n                convertToUpperCamelCase(identifier);\n                break;\n            case 'L':\n                convertToLowerCamelCase(identifier);\n                break;\n            case 'D':\n                convertToUnderscoreCase(identifier);\n                break;\n        }\n\n        printf(\"%s\\n\", identifier);\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-05 18:59:15"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <sstream>\n#include <vector>\n#include <algorithm>\n\nstd::string toUpperCamelCase(const std::string& input) {\n    std::istringstream iss(input);\n    std::string word, result;\n    \n    while (std::getline(iss, word, '_')) {\n        if (!word.empty()) {\n            word[0] = std::toupper(word[0]);\n            result += word;\n        }\n    }\n    \n    return result;\n}\n\nstd::string toLowerCamelCase(const std::string& input) {\n    std::istringstream iss(input);\n    std::string word, result;\n    bool first = true;\n    \n    while (std::getline(iss, word, '_')) {\n        if (!word.empty()) {\n            if (first) {\n                word[0] = std::tolower(word[0]);\n                first = false;\n            } else {\n                word[0] = std::toupper(word[0]);\n            }\n            result += word;\n        }\n    }\n    \n    return result;\n}\n\nstd::string toUnderscoreCase(const std::string& input) {\n    std::string result;\n    \n    for (size_t i = 0; i < input.length(); ++i) {\n        if (i > 0 && std::isupper(input[i])) {\n            result += '_';\n        }\n        result += std::tolower(input[i]);\n    }\n    \n    return result;\n}\n\nint main() {\n    std::string input;\n    \n    while (std::getline(std::cin, input) && input[0] != 'X') {\n        std::istringstream iss(input);\n        std::string identifier, type;\n        \n        iss >> identifier >> type;\n        \n        if (type == \"U\") {\n            std::cout << toUpperCamelCase(identifier) << std::endl;\n        } else if (type == \"L\") {\n            std::cout << toLowerCamelCase(identifier) << std::endl;\n        } else if (type == \"D\") {\n            std::cout << toUnderscoreCase(identifier) << std::endl;\n        }\n    }\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 18:59:22"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.Scanner;\n\npublic class NamingConventionConverter {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        while (true) {\n            String line = scanner.nextLine();\n            if (line.equals(\"X\")) {\n                break;\n            }\n            String[] parts = line.split(\" \");\n            String identifier = parts[0];\n            char type = parts[1].charAt(0);\n            System.out.println(convert(identifier, type));\n        }\n        scanner.close();\n    }\n\n    private static String convert(String identifier, char type) {\n        if (type == 'U') {\n            return toUpperCamelCase(identifier);\n        } else if (type == 'L') {\n            return toLowerCamelCase(identifier);\n        } else if (type == 'D') {\n            return toUnderscore(identifier);\n        }\n        return identifier;\n    }\n\n    private static String toUpperCamelCase(String identifier) {\n        StringBuilder sb = new StringBuilder();\n        boolean capitalizeNext = true;\n        for (char c : identifier.toCharArray()) {\n            if (c == '_') {\n                capitalizeNext = true;\n            } else {\n                if (capitalizeNext) {\n                    sb.append(Character.toUpperCase(c));\n                    capitalizeNext = false;\n                } else {\n                    sb.append(Character.toLowerCase(c));\n                }\n            }\n        }\n        return sb.toString();\n    }\n\n    private static String toLowerCamelCase(String identifier) {\n        String upperCamel = toUpperCamelCase(identifier);\n        if (upperCamel.isEmpty()) {\n            return upperCamel;\n        }\n        return Character.toLowerCase(upperCamel.charAt(0)) + upperCamel.substring(1);\n    }\n\n    private static String toUnderscore(String identifier) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < identifier.length(); i++) {\n            char c = identifier.charAt(i);\n            if (Character.isUpperCase(c)) {\n                if (i != 0) {\n                    sb.append('_');\n                }\n                sb.append(Character.toLowerCase(c));\n            } else if (c == '_') {\n                sb.append('_');\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString().toLowerCase();\n    }\n}",
    "timestamp": "2025-08-05 18:59:41"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def convert_to_camel_case(identifier, case_type):\n    if case_type == 'U':\n        words = identifier.replace('_', ' ').title().split()\n        return ''.join(words)\n    elif case_type == 'L':\n        words = identifier.replace('_', ' ').title().split()\n        return words[0].lower() + ''.join(words[1:])\n    elif case_type == 'D':\n        words = identifier.replace('_', ' ').lower().split()\n        return '_'.join(words)\n\ndef process_identifiers(input_data):\n    results = []\n    for data in input_data:\n        if data.strip() == 'X':\n            break\n        identifier, output_format = data.rsplit(' ', 1)\n        converted = convert_to_camel_case(identifier, output_format)\n        results.append(converted)\n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input_data = sys.stdin.read().splitlines()\n    results = process_identifiers(input_data)\n    for result in results:\n        print(result)",
    "timestamp": "2025-08-13 01:43:20"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "java",
    "code": "import java.util.Scanner;\n\npublic class IdentifierConverter {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        \n        while (scanner.hasNext()) {\n            String input = scanner.nextLine();\n            if (input.equals(\"X\")) {\n                break;\n            }\n            \n            String[] parts = input.split(\" \");\n            String identifier = parts[0];\n            char targetType = parts[1].charAt(0);\n            \n            if (targetType == 'U') {\n                System.out.println(toUpperCamelCase(identifier));\n            } else if (targetType == 'L') {\n                System.out.println(toLowerCamelCase(identifier));\n            } else if (targetType == 'D') {\n                System.out.println(toUnderscoreFormat(identifier));\n            }\n        }\n        \n        scanner.close();\n    }\n\n    private static String toUpperCamelCase(String identifier) {\n        if (identifier.contains(\"_\")) {\n            return convertFromUnderscore(identifier, true);\n        } else {\n            return capitalizeWords(identifier);\n        }\n    }\n\n    private static String toLowerCamelCase(String identifier) {\n        if (identifier.contains(\"_\")) {\n            return convertFromUnderscore(identifier, false);\n        } else {\n            return decapitalizeFirstWord(capitalizeWords(identifier));\n        }\n    }\n\n    private static String toUnderscoreFormat(String identifier) {\n        if (identifier.contains(\"_\")) {\n            return identifier.toLowerCase();\n        } else {\n            return convertCamelToUnderscore(identifier);\n        }\n    }\n\n    private static String convertFromUnderscore(String identifier, boolean capitalizeFirst) {\n        StringBuilder result = new StringBuilder();\n        String[] words = identifier.split(\"_\");\n        for (int i = 0; i < words.length; i++) {\n            if (i == 0 && !capitalizeFirst) {\n                result.append(words[i].toLowerCase());\n            } else {\n                result.append(capitalize(words[i].toLowerCase()));\n            }\n        }\n        return result.toString();\n    }\n\n    private static String convertCamelToUnderscore(String identifier) {\n        StringBuilder result = new StringBuilder();\n        for (char ch : identifier.toCharArray()) {\n            if (Character.isUpperCase(ch)) {\n                if (result.length() > 0) {\n                    result.append(\"_\");\n                }\n                result.append(Character.toLowerCase(ch));\n            } else {\n                result.append(ch);\n            }\n        }\n        return result.toString();\n    }\n\n    private static String capitalizeWords(String identifier) {\n        StringBuilder result = new StringBuilder();\n        char[] chars = identifier.toCharArray();\n        boolean newWord = true;\n        for (char ch : chars) {\n            if (newWord) {\n                result.append(Character.toUpperCase(ch));\n                newWord = false;\n            } else {\n                result.append(ch);\n            }\n            if (Character.isWhitespace(ch)) {\n                newWord = true;\n            }\n        }\n        return result.toString();\n    }\n\n    private static String decapitalizeFirstWord(String identifier) {\n        if (identifier.isEmpty()) {\n            return identifier;\n        }\n        return Character.toLowerCase(identifier.charAt(0)) + identifier.substring(1);\n    }\n\n    private static String capitalize(String word) {\n        if (word.isEmpty()) {\n            return word;\n        }\n        return Character.toUpperCase(word.charAt(0)) + word.substring(1);\n    }\n}",
    "timestamp": "2025-08-13 01:43:32"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c",
    "code": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <ctype.h>\n\nvoid toUpperCamelCase(char *identifier) {\n    int capitalize = 1;\n    for (int i = 0; identifier[i]; i++) {\n        if (identifier[i] == '_') {\n            capitalize = 1;\n        } else {\n            identifier[i] = capitalize ? toupper(identifier[i]) : tolower(identifier[i]);\n            capitalize = 0;\n        }\n    }\n}\n\nvoid toLowerCamelCase(char *identifier) {\n    int capitalize = 0;\n    for (int i = 0; identifier[i]; i++) {\n        if (identifier[i] == '_') {\n            capitalize = 1;\n        } else {\n            identifier[i] = capitalize ? toupper(identifier[i]) : tolower(identifier[i]);\n            capitalize = 0;\n        }\n    }\n}\n\nvoid toUnderscoreFormat(char *identifier) {\n    for (int i = 0; identifier[i]; i++) {\n        if (isupper(identifier[i])) {\n            if (i > 0 && identifier[i-1] != '_') {\n                putchar('_');\n            }\n            putchar(tolower(identifier[i]));\n        } else {\n            putchar(identifier[i]);\n        }\n    }\n}\n\nvoid processIdentifier(char *identifier, char type) {\n    switch (type) {\n        case 'U':\n            toUpperCamelCase(identifier);\n            printf(\"%s\\n\", identifier);\n            break;\n        case 'L':\n            toLowerCamelCase(identifier);\n            printf(\"%s\\n\", identifier);\n            break;\n        case 'D':\n            toUnderscoreFormat(identifier);\n            putchar('\\n');\n            break;\n        default:\n            break;\n    }\n}\n\nint main() {\n    char buffer[100], identifier[100], type;\n    \n    while (scanf(\"%s %c\", buffer, &type) == 2) {\n        if (strcmp(buffer, \"X\") == 0) {\n            break;\n        }\n        strcpy(identifier, buffer);\n        processIdentifier(identifier, type);\n    }\n    \n    return 0;\n}",
    "timestamp": "2025-08-13 01:43:36"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def convert_case(identifier, current_type, target_type):\n    if current_type == target_type:\n        return identifier\n    \n    # Convert to words\n    if current_type == 'U':\n        words = [identifier[0].lower()] + [word.lower() for word in identifier[1:] if word.isupper()]\n    elif current_type == 'L':\n        words = [identifier[0]] + [word.lower() for word in identifier[1:] if word.isupper()]\n    else:  # 'D'\n        words = identifier.split('_')\n    \n    # Convert to target type\n    if target_type == 'U':\n        return ''.join(word.capitalize() for word in words)\n    elif target_type == 'L':\n        return words[0] + ''.join(word.capitalize() for word in words[1:])\n    else:  # 'D'\n        return '_'.join(word.lower() for word in words)\n\n# Main program\nwhile True:\n    try:\n        line = input().strip()\n        if line == 'X':\n            break\n        \n        identifier, target_type = line.split()\n        current_type = None\n        \n        # Determine current type\n        if identifier[0].isupper() and all(c.islower() or c.isupper() for c in identifier[1:]):\n            current_type = 'U'\n        elif identifier[0].islower() and any(c.isupper() for c in identifier[1:]):\n            current_type = 'L'\n        else:\n            current_type = 'D'\n        \n        # Convert and print\n        print(convert_case(identifier, current_type, target_type))\n    \n    except EOFError:\n        break",
    "timestamp": "2025-08-13 01:43:46"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "import sys\n\ndef convert_identifier(identifier, target_type):\n    words = []\n    # Parse the identifier into words\n    if '_' in identifier:\n        words = identifier.lower().split('_')\n    else:\n        # CamelCase parsing\n        word_start = 0\n        for i in range(1, len(identifier)):\n            if identifier[i].isupper():\n                words.append(identifier[word_start:i].lower())\n                word_start = i\n        words.append(identifier[word_start:].lower())\n    \n    # Convert to target type\n    if target_type == 'U':\n        return ''.join([word.capitalize() for word in words])\n    elif target_type == 'L':\n        if not words:\n            return ''\n        return words[0].lower() + ''.join([word.capitalize() for word in words[1:]])\n    elif target_type == 'D':\n        return '_'.join([word.lower() for word in words])\n    else:\n        return identifier\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        if line == 'X':\n            break\n        parts = line.rsplit(' ', 1)\n        if len(parts) != 2:\n            continue\n        identifier, target_type = parts\n        print(convert_identifier(identifier, target_type))\n\nif __name__ == \"__main__\":\n    main()",
    "timestamp": "2025-08-13 01:44:01"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c++",
    "code": "#include <iostream>\n#include <sstream>\n#include <vector>\n#include <cctype>\n\nstd::string toUpperCamelCase(const std::string& identifier) {\n    std::stringstream result;\n    std::istringstream iss(identifier);\n    std::string word;\n    bool toUpper = true;\n\n    while (std::getline(iss, word, '_')) {\n        for (char c : word) {\n            result << (toUpper ? std::toupper(c) : std::tolower(c));\n            toUpper = false;\n        }\n        toUpper = true;\n    }\n\n    return result.str();\n}\n\nstd::string toLowerCamelCase(const std::string& identifier) {\n    std::stringstream result;\n    std::istringstream iss(identifier);\n    std::string word;\n    bool toUpper = false;\n\n    while (std::getline(iss, word, '_')) {\n        for (char c : word) {\n            result << (toUpper ? std::toupper(c) : std::tolower(c));\n            toUpper = true;\n        }\n    }\n\n    return result.str();\n}\n\nstd::string toUnderscoreFormat(const std::string& identifier) {\n    std::stringstream result;\n    for (char c : identifier) {\n        if (std::isupper(c)) {\n            result << '_' << std::tolower(c);\n        } else {\n            result << c;\n        }\n    }\n\n    return result.str().front() == '_' ? result.str().substr(1) : result.str();\n}\n\nstd::string convertIdentifier(const std::string& identifier, char type) {\n    if (type == 'U') {\n        return toUpperCamelCase(identifier);\n    } else if (type == 'L') {\n        return toLowerCamelCase(identifier);\n    } else if (type == 'D') {\n        return toUnderscoreFormat(identifier);\n    } else {\n        return \"\";\n    }\n}\n\nint main() {\n    std::string line;\n\n    while (true) {\n        std::getline(std::cin, line);\n        if (line == \"X\") {\n            break;\n        }\n\n        std::istringstream iss(line);\n        std::string identifier;\n        char type;\n        iss >> identifier >> type;\n\n        std::string result = convertIdentifier(identifier, type);\n        std::cout << result << std::endl;\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-13 11:01:58"
  }
]