[
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\nstring s[6];\nvoid u(){\n  char p;p=s[0][2];s[0][2]=s[1][2];s[1][2]=s[1][3];s[1][3]=s[0][3];s[0][3]=p;\n  char c[2];\n  c[0]=s[2][0],c[1]=s[2][1];\n  s[2][0]=s[2][2],s[2][1]=s[2][3];\n  s[2][2]=s[2][4],s[2][3]=s[2][5];\n  s[2][4]=s[2][6],s[2][5]=s[2][7];\n  s[2][6]=c[0],s[2][7]=c[1];\n}\nvoid f(){\n  char p;p=s[2][2];s[2][2]=s[3][2];s[3][2]=s[3][3];s[3][3]=s[2][3];s[2][3]=p;\n  char c[2];\n  c[0]=s[1][2],c[1]=s[1][3];\n  s[1][2]=s[3][1],s[1][3]=s[2][1];\n  s[2][1]=s[4][2],s[3][1]=s[4][3];\n  s[4][2]=s[3][4],s[4][3]=s[2][4];\n  s[3][4]=c[1],s[2][4]=c[0];\n}\nvoid r(){\n  char p;p=s[2][4];s[2][4]=s[3][4];s[3][4]=s[3][5];s[3][5]=s[2][5];s[2][5]=p;\n  char c[2];\n  c[0]=s[3][6],c[1]=s[2][6];\n  s[2][6]=s[1][3],s[3][6]=s[0][3];\n  s[0][3]=s[2][3],s[1][3]=s[3][3];\n  s[3][3]=s[5][3],s[2][3]=s[4][3];\n  s[4][3]=c[0],s[5][3]=c[1];\n}\nvoid d(){\n  char p;p=s[4][2];s[4][2]=s[5][2];s[5][2]=s[5][3];s[5][3]=s[4][3];s[4][3]=p;\n  char c[2];\n  c[0]=s[3][0],c[1]=s[3][1];\n  s[3][0]=s[3][6],s[3][1]=s[3][7];\n  s[3][6]=s[3][4],s[3][7]=s[3][5];\n  s[3][4]=s[3][2],s[3][5]=s[3][3];\n  s[3][2]=c[0],s[3][3]=c[1];\n}\nvoid b(){\n  char p;p=s[2][6];s[2][6]=s[3][6];s[3][6]=s[3][7];s[3][7]=s[2][7];s[2][7]=p;\n  char c[2];\n  c[0]=s[0][2],c[1]=s[0][3];\n  s[0][2]=s[2][5],s[0][3]=s[3][5];\n  s[2][5]=s[5][3],s[3][5]=s[5][2];\n  s[5][3]=s[3][0],s[5][2]=s[2][0];\n  s[3][0]=c[0],s[2][0]=c[1];\n}\nvoid l(){\n  char p;p=s[2][0];s[2][0]=s[3][0];s[3][0]=s[3][1];s[3][1]=s[2][1];s[2][1]=p;\n  char c[2];\n  c[0]=s[0][2],c[1]=s[1][2];\n  s[0][2]=s[3][7],s[1][2]=s[2][7];\n  s[3][7]=s[4][2],s[2][7]=s[5][2];\n  s[4][2]=s[2][2],s[5][2]=s[3][2];\n  s[2][2]=c[0],s[3][2]=c[1];\n}\n \nint main(){\n  s[0]=\"..rr....\";\n  s[1]=\"..rr....\";\n  s[2]=\"ggyybbww\";\n  s[3]=\"ggyybbww\";\n  s[4]=\"..oo....\";\n  s[5]=\"..oo....\";\n  string t;\n  cin>>t;\n  for(int i=0;i<t.size();i++){\n    if(t[i]=='U')u();\n    if(t[i]=='F')f();\n    if(t[i]=='R')r();\n    if(t[i]=='D')d();\n    if(t[i]=='B')b();\n    if(t[i]=='L')l();\n  }\n  for(int i=0;i<6;i++)\n    cout<<s[i]<<endl;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdlib>\n#include <iostream>\n#include <string>\nusing namespace std;\n\nenum FACE { UP, DOWN, FRONT, BACK, LEFT, RIGHT };\n\nclass cube {\npublic:\n\tchar col[6][2][2];\n\tcube() {\n\t\tfor(int i = 0; i < 2; ++i) {\n\t\t\tfor(int j = 0; j < 2; ++j) {\n\t\t\t\tcol[UP][i][j] = 'r';\n\t\t\t\tcol[DOWN][i][j] = 'o';\n\t\t\t\tcol[FRONT][i][j] = 'y';\n\t\t\t\tcol[BACK][i][j] = 'w';\n\t\t\t\tcol[LEFT][i][j] = 'g';\n\t\t\t\tcol[RIGHT][i][j] = 'b';\n\t\t\t}\n\t\t}\n\t}\n\n\tvoid roll(FACE f) {\n\t\tchar tmp = col[f][0][0];\n\t\tcol[f][0][0] = col[f][1][0];\n\t\tcol[f][1][0] = col[f][1][1];\n\t\tcol[f][1][1] = col[f][0][1];\n\t\tcol[f][0][1] = tmp;\n\t}\n\n\tvoid up() {\n\t\tchar tmp[2] = {col[FRONT][0][0], col[FRONT][0][1]};\n\t\tfor(int i = 0; i < 2; ++i) {\n\t\t\tcol[FRONT][0][i] = col[RIGHT][0][i];\n\t\t\tcol[RIGHT][0][i] = col[BACK][0][i];\n\t\t\tcol[BACK][0][i] = col[LEFT][0][i];\n\t\t\tcol[LEFT][0][i] = tmp[i];\n\t\t}\n\t\troll(UP);\n\t}\n\tvoid down() {\n\t\tchar tmp[2] = {col[FRONT][1][0], col[FRONT][1][1]};\n\t\tfor(int i = 0; i < 2; ++i) {\n\t\t\tcol[FRONT][1][i] = col[LEFT][1][i];\n\t\t\tcol[LEFT][1][i] = col[BACK][1][i];\n\t\t\tcol[BACK][1][i] = col[RIGHT][1][i];\n\t\t\tcol[RIGHT][1][i] = tmp[i];\n\t\t}\n\t\troll(DOWN);\n\t}\n\n\tvoid front() {\n\t\tchar tmp[2] = {col[UP][1][0], col[UP][1][1]};\n\t\tfor(int i = 0; i < 2; ++i) {\n\t\t\tcol[UP][1][i] = col[LEFT][1 - i][1];\n\t\t\tcol[LEFT][1 - i][1] = col[DOWN][0][1 - i];\n\t\t\tcol[DOWN][0][1 - i] = col[RIGHT][i][0];\n\t\t\tcol[RIGHT][i][0] = tmp[i];\n\t\t}\n\t\troll(FRONT);\n\t}\n\tvoid back() {\n\t\tchar tmp[2] = {col[UP][0][0], col[UP][0][1]};\n\t\tfor(int i = 0; i < 2; ++i) {\n\t\t\tcol[UP][0][i] = col[RIGHT][i][1];\n\t\t\tcol[RIGHT][i][1] = col[DOWN][1][1 - i];\n\t\t\tcol[DOWN][1][1 - i] = col[LEFT][1 - i][0];\n\t\t\tcol[LEFT][1 - i][0] = tmp[i];\n\t\t}\n\t\troll(BACK);\n\t}\n\tvoid right() {\n\t\tchar tmp[2] = {col[FRONT][0][1], col[FRONT][1][1]};\n\t\tfor(int i = 0; i < 2; ++i) {\n\t\t\tcol[FRONT][i][1] = col[DOWN][i][1];\n\t\t\tcol[DOWN][i][1] = col[BACK][1 - i][0];\n\t\t\tcol[BACK][1 - i][0] = col[UP][i][1];\n\t\t\tcol[UP][i][1] = tmp[i];\n\t\t}\n\t\troll(RIGHT);\n\t}\n\tvoid left() {\n\t\tchar tmp[2] = {col[FRONT][0][0], col[FRONT][1][0]};\n\t\tfor(int i = 0; i < 2; ++i) {\n\t\t\tcol[FRONT][i][0] = col[UP][i][0];\n\t\t\tcol[UP][i][0] = col[BACK][1 - i][1];\n\t\t\tcol[BACK][1 - i][1] = col[DOWN][i][0];\n\t\t\tcol[DOWN][i][0] = tmp[i];\n\t\t}\n\t\troll(LEFT);\n\t}\n\n\tvoid print() {\n\t\tfor(int i = 0; i < 2; ++i) {\n\t\t\tcout << \"..\";\n\t\t\tfor(int j = 0; j < 2; ++j)\n\t\t\t\tcout << col[UP][i][j];\n\t\t\tcout << \"....\" << endl;\n\t\t}\n\n\t\tfor(int i = 0; i < 2; ++i) {\n\t\t\tfor(int j = 0; j < 2; ++j)\n\t\t\t\tcout << col[LEFT][i][j];\n\t\t\tfor(int j = 0; j < 2; ++j)\n\t\t\t\tcout << col[FRONT][i][j];\n\t\t\tfor(int j = 0; j < 2; ++j)\n\t\t\t\tcout << col[RIGHT][i][j];\n\t\t\tfor(int j = 0; j < 2; ++j)\n\t\t\t\tcout << col[BACK][i][j];\n\n\t\t\tcout << endl;\n\t\t}\n\n\t\tfor(int i = 0; i < 2; ++i) {\n\t\t\tcout << \"..\";\n\t\t\tfor(int j = 0; j < 2; ++j)\n\t\t\t\tcout << col[DOWN][i][j];\n\t\t\tcout << \"....\" << endl;\n\t\t}\n\t}\n};\n\nint main() {\n\tcin.tie(false);\n\tios::sync_with_stdio(false);\n\n\tstring s;\n\tcin >> s;\n\n\tcube c;\n\tfor(int i = 0; i < s.size(); ++i) {\n\t\tif(s[i] == 'U')\n\t\t\tc.up();\n\t\t\t\n\t\telse if(s[i] == 'F')\n\t\t\tc.front();\n\n\t\telse if(s[i] == 'R')\n\t\t\tc.right();\n\n\t\telse if(s[i] == 'D')\n\t\t\tc.down();\n\n\t\telse if(s[i] == 'B')\n\t\t\tc.back();\n\n\t\telse\n\t\t\tc.left();\n\t}\n\n\tc.print();\n\n\treturn EXIT_SUCCESS;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef vector<int> vi;\ntypedef vector<string> vs;\n\n#define FOR(i, a, b) for (int i = (a); i < (b); i++)\n#define rep(i, n)    FOR(i, 0, n)\n#define pb           push_back\n#define all(a)       (a).begin(), (a).end()\n\nstring cube[6] = {\n    \"..rr....\", \"..rr....\", \"ggyybbww\", \"ggyybbww\", \"..oo....\", \"..oo....\",\n};\n\nvoid rotU() {\n  char tmp = cube[2][0];\n  cube[2][0] = cube[2][2];\n  cube[2][2] = cube[2][4];\n  cube[2][4] = cube[2][6];\n  cube[2][6] = tmp;\n\n  tmp = cube[2][3];\n  cube[2][3] = cube[2][5];\n  cube[2][5] = cube[2][7];\n  cube[2][7] = cube[2][1];\n  cube[2][1] = tmp;\n\n  tmp = cube[1][3];\n  cube[1][3] = cube[0][3];\n  cube[0][3] = cube[0][2];\n  cube[0][2] = cube[1][2];\n  cube[1][2] = tmp;\n}\n\nvoid rotB() {\n  char tmp = cube[2][6];\n  cube[2][6] = cube[3][6];\n  cube[3][6] = cube[3][7];\n  cube[3][7] = cube[2][7];\n  cube[2][7] = tmp;\n\n  tmp = cube[2][0];\n  cube[2][0] = cube[0][3];\n  cube[0][3] = cube[3][5];\n  cube[3][5] = cube[5][2];\n  cube[5][2] = tmp;\n\n  tmp = cube[3][0];\n  cube[3][0] = cube[0][2];\n  cube[0][2] = cube[2][5];\n  cube[2][5] = cube[5][3];\n  cube[5][3] = tmp;\n}\n\nvoid rotF() {\n  char tmp = cube[2][2];\n  cube[2][2] = cube[3][2];\n  cube[3][2] = cube[3][3];\n  cube[3][3] = cube[2][3];\n  cube[2][3] = tmp;\n\n  tmp = cube[1][2];\n  cube[1][2] = cube[3][1];\n  cube[3][1] = cube[4][3];\n  cube[4][3] = cube[2][4];\n  cube[2][4] = tmp;\n\n  tmp = cube[1][3];\n  cube[1][3] = cube[2][1];\n  cube[2][1] = cube[4][2];\n  cube[4][2] = cube[3][4];\n  cube[3][4] = tmp;\n}\n\nvoid rotR() {\n  char tmp = cube[2][4];\n  cube[2][4] = cube[3][4];\n  cube[3][4] = cube[3][5];\n  cube[3][5] = cube[2][5];\n  cube[2][5] = tmp;\n\n  tmp = cube[0][3];\n  cube[0][3] = cube[2][3];\n  cube[2][3] = cube[4][3];\n  cube[4][3] = cube[3][6];\n  cube[3][6] = tmp;\n\n  tmp = cube[1][3];\n  cube[1][3] = cube[3][3];\n  cube[3][3] = cube[5][3];\n  cube[5][3] = cube[2][6];\n  cube[2][6] = tmp;\n}\n\nvoid rotD() {\n  char tmp = cube[3][0];\n  cube[3][0] = cube[3][6];\n  cube[3][6] = cube[3][4];\n  cube[3][4] = cube[3][2];\n  cube[3][2] = tmp;\n\n  tmp = cube[3][1];\n  cube[3][1] = cube[3][7];\n  cube[3][7] = cube[3][5];\n  cube[3][5] = cube[3][3];\n  cube[3][3] = tmp;\n\n  tmp = cube[4][2];\n  cube[4][2] = cube[5][2];\n  cube[5][2] = cube[5][3];\n  cube[5][3] = cube[4][3];\n  cube[4][3] = tmp;\n}\n\nvoid rotL() {\n  char tmp = cube[2][0];\n  cube[2][0] = cube[3][0];\n  cube[3][0] = cube[3][1];\n  cube[3][1] = cube[2][1];\n  cube[2][1] = tmp;\n\n  tmp = cube[1][2];\n  cube[1][2] = cube[2][7];\n  cube[2][7] = cube[5][2];\n  cube[5][2] = cube[3][2];\n  cube[3][2] = tmp;\n\n  tmp = cube[0][2];\n  cube[0][2] = cube[3][7];\n  cube[3][7] = cube[4][2];\n  cube[4][2] = cube[2][2];\n  cube[2][2] = tmp;\n}\n\nvoid rot(char c) {\n  switch (c) {\n    case 'U':\n      return rotU();\n    case 'B':\n      return rotB();\n    case 'F':\n      return rotF();\n    case 'R':\n      return rotR();\n    case 'D':\n      return rotD();\n    case 'L':\n      return rotL();\n    default:\n      cout << \"error occured: unexpected input\" << endl;\n      break;\n  }\n}\n\nvoid printResult() {\n  rep(i, 6) cout << cube[i] << endl;\n}\n\nint main() {\n  string s;\n  cin >> s;\n\n  rep(i, s.size()) {\n    if (s[i] == 'U') {\n      rot('U');\n    } else if (s[i] == 'F') {\n      rot('F');\n    } else if (s[i] == 'R') {\n      rot('R');\n    } else if (s[i] == 'D') {\n      rot('D');\n    } else if (s[i] == 'B') {\n      rot('B');\n    } else if (s[i] == 'L') {\n      rot('L');\n    }\n  }\n\n  printResult();\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#define N 6\n#define M 2\n\nusing namespace std;\n\nchar data[N][M][M];\n\nbool init(){\n  const string color = \"rgybwo\";\n  for(int i=0; i<N; ++i){\n    data[i][0][0] = color[i];\n    data[i][0][1] = color[i];\n    data[i][1][0] = color[i];\n    data[i][1][1] = color[i];\n  }\n}\n\nvoid print_inner(int i, int j){\n  cout << data[i][j][0] << data[i][j][1];\n}\n\nvoid print(){\n  cout << \"..\";\n  print_inner(0, 0);\n  cout << \"....\" << endl;\n  cout << \"..\";\n  print_inner(0, 1);\n  cout << \"....\" << endl;\n\n  print_inner(1, 0);\n  print_inner(2, 0);\n  print_inner(3, 0);\n  print_inner(4, 0);\n  cout << endl;\n\n  print_inner(1, 1);\n  print_inner(2, 1);\n  print_inner(3, 1);\n  print_inner(4, 1);\n  cout << endl;\n\n  cout << \"..\";\n  print_inner(5, 0);\n  cout << \"....\" << endl;\n  cout << \"..\";\n  print_inner(5, 1);\n  cout << \"....\" << endl;\n}\n\nvoid solve(const char& c){\n  char a;\n  if(c == 'U'){\n    a = data[1][0][0];\n    data[1][0][0] = data[2][0][0];\n    data[2][0][0] = data[3][0][0];\n    data[3][0][0] = data[4][0][0];\n    data[4][0][0] = a;\n    a = data[1][0][1];\n    data[1][0][1] = data[2][0][1];\n    data[2][0][1] = data[3][0][1];\n    data[3][0][1] = data[4][0][1];\n    data[4][0][1] = a;\n    a = data[0][0][0];\n    data[0][0][0] = data[0][1][0];\n    data[0][1][0] = data[0][1][1];\n    data[0][1][1] = data[0][0][1];\n    data[0][0][1] = a;\n  }else if(c == 'F'){\n    a = data[1][1][1];\n    data[1][1][1] = data[5][0][1];\n    data[5][0][1] = data[3][0][0];\n    data[3][0][0] = data[0][1][0];\n    data[0][1][0] = a;\n    a = data[1][0][1];\n    data[1][0][1] = data[5][0][0];\n    data[5][0][0] = data[3][1][0];\n    data[3][1][0] = data[0][1][1];\n    data[0][1][1] = a;\n    a = data[2][0][0];\n    data[2][0][0] = data[2][1][0];\n    data[2][1][0] = data[2][1][1];\n    data[2][1][1] = data[2][0][1];\n    data[2][0][1] = a;\n  }else if(c == 'R'){\n    a = data[0][0][1];\n    data[0][0][1] = data[2][0][1];\n    data[2][0][1] = data[5][0][1];\n    data[5][0][1] = data[4][1][0];\n    data[4][1][0] = a;\n    a = data[0][1][1];\n    data[0][1][1] = data[2][1][1];\n    data[2][1][1] = data[5][1][1];\n    data[5][1][1] = data[4][0][0];\n    data[4][0][0] = a;\n    a = data[3][0][0];\n    data[3][0][0] = data[3][1][0];\n    data[3][1][0] = data[3][1][1];\n    data[3][1][1] = data[3][0][1];\n    data[3][0][1] = a;\n  }else if(c == 'D'){\n    a = data[4][1][0];\n    data[4][1][0] = data[3][1][0];\n    data[3][1][0] = data[2][1][0];\n    data[2][1][0] = data[1][1][0];\n    data[1][1][0] = a;\n    a = data[4][1][1];\n    data[4][1][1] = data[3][1][1];\n    data[3][1][1] = data[2][1][1];\n    data[2][1][1] = data[1][1][1];\n    data[1][1][1] = a;\n    a = data[5][0][0];\n    data[5][0][0] = data[5][1][0];\n    data[5][1][0] = data[5][1][1];\n    data[5][1][1] = data[5][0][1];\n    data[5][0][1] = a;\n  }else if(c == 'B'){\n    a = data[0][0][1];\n    data[0][0][1] = data[3][1][1];\n    data[3][1][1] = data[5][1][0];\n    data[5][1][0] = data[1][0][0];\n    data[1][0][0] = a;\n    a = data[0][0][0];\n    data[0][0][0] = data[3][0][1];\n    data[3][0][1] = data[5][1][1];\n    data[5][1][1] = data[1][1][0];\n    data[1][1][0] = a;\n    a = data[4][0][0];\n    data[4][0][0] = data[4][1][0];\n    data[4][1][0] = data[4][1][1];\n    data[4][1][1] = data[4][0][1];\n    data[4][0][1] = a;\n  }else if(c == 'L'){\n    a = data[0][0][0];\n    data[0][0][0] = data[4][1][1];\n    data[4][1][1] = data[5][0][0];\n    data[5][0][0] = data[2][0][0];\n    data[2][0][0] = a;\n    a = data[0][1][0];\n    data[0][1][0] = data[4][0][1];\n    data[4][0][1] = data[5][1][0];\n    data[5][1][0] = data[2][1][0];\n    data[2][1][0] = a;\n    a = data[1][0][0];\n    data[1][0][0] = data[1][1][0];\n    data[1][1][0] = data[1][1][1];\n    data[1][1][1] = data[1][0][1];\n    data[1][0][1] = a;\n  }\n}\n\nint main(){\n  init();\n  string s;\n  cin >> s;\n  for(int i=0; i<s.size(); ++i) solve(s[i]);\n  print();\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<array>\n\nusing namespace std;\n\narray<char,4> plane[6];\nint fn;\n\nvoid rp(int x,int n){\n  while(n--){\n    int t=plane[x][1];\n    int tn[]={1,0,2,3};\n    for(int i=0;i<3;i++){\n      plane[x][tn[i]]=plane[x][tn[i+1]];\n    }\n    plane[x][3]=t;\n  }\n}\n\nvoid cf(char c){\n  while(c!=\"FURBDL\"[fn]){\n    auto t=plane[0];\n    int x[][4]={{0,4,2,5},{0,1,2,3}};\n    int *cx=x[fn%2];\n    for(int i=0;i<3;i++){\n      plane[cx[i]]=plane[cx[i+1]];\n    }\n    plane[cx[3]]=t;\n    if(fn%2==0){\n      for(int i=2;i<=4;i+=2){\n\tfor(int j=0;j<2;j++){\n\t  swap(plane[i][j],plane[i][j^3]);\n\t}\n      }\n    }\n    rp(3+fn%2,1);\n    rp(1+fn%2*4,3);\n    fn=(fn+1)%6;\n  }\n}\n\nint main(){\n  for(int i=0;i<6;i++){\n    fill(begin(plane[i]),end(plane[i]),\"ybwgro\"[i]);\n  }\n  for(char c;cin>>c;){\n    cf(c);\n    rp(0,1);\n    int rt=plane[1][0];\n    int rb=plane[1][2];\n    for(int i=0;i<3;i++){\n      int pn[]={1,4,3,5};\n      int tn[]={0,2,3,1};\n      int bn[]={2,3,1,0};\n      plane[pn[i]][tn[i]]=plane[pn[i+1]][tn[i+1]];\n      plane[pn[i]][bn[i]]=plane[pn[i+1]][bn[i+1]];\n    }\n    plane[5][1]=rt;\n    plane[5][0]=rb;\n  }\n  cf('F');\n  char g[6][8];\n  fill(g[0],g[6],'.');\n  for(int i=0;i<6;i++){\n    int x[]={2,4,6,0,2,2};\n    int y[]={2,2,2,2,0,4};\n    for(int j=0;j<2;j++){\n      for(int k=0;k<2;k++){\n\tg[y[i]+j][x[i]+k]=plane[i][j*2+k];\n      }\n    }\n  }\n  for(auto e:g){\n    for(int i=0;i<8;i++){\n      cout<<e[i];\n    }\n    cout<<endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint main() {\n\tchar cube[6][8] = {{'.', '.', 'r', 'r', '.', '.', '.', '.'},\n\t\t\t\t\t   {'.', '.', 'r', 'r', '.', '.', '.', '.'},\n\t\t\t\t\t   {'g', 'g', 'y', 'y', 'b', 'b', 'w', 'w'},\n\t\t\t\t\t   {'g', 'g', 'y', 'y', 'b', 'b', 'w', 'w'},\n\t\t\t\t\t   {'.', '.', 'o', 'o', '.', '.', '.', '.'},\n\t\t\t\t\t   {'.', '.', 'o', 'o', '.', '.', '.', '.'}};\n\tstring a;\n\tcin >> a;\n\tchar kari, kari2;\n\tfor (int i = 0; i < a.size(); i++) {\n\t\tif (a[i] == 'U') {\n\t\t\tkari = cube[2][0];\n\t\t\tkari2 = cube[2][1];\n\t\t\tfor (int j = 0; j < 6; j++) {\n\t\t\t\tcube[2][j] = cube[2][j+2];\n\t\t\t}\n\t\t\tcube[2][6] = kari;\n\t\t\tcube[2][7] = kari2;\n\t\t\tkari = cube[0][3];\n\t\t\tcube[0][3] = cube[0][2];\n\t\t\tcube[0][2] = cube[1][2];\n\t\t\tcube[1][2] = cube[1][3];\n\t\t\tcube[1][3] = kari;\n\t\t} else if (a[i] == 'D') {\n\t\t\tkari = cube[3][6];\n\t\t\tkari2 = cube[3][7];\n\t\t\tfor (int j = 7; j > 1; j--) {\n\t\t\t\tcube[3][j] = cube[3][j-2];\n\t\t\t}\n\t\t\tcube[3][1] = kari2;\n\t\t\tcube[3][0] = kari;\n\t\t\tkari = cube[4][2];\n\t\t\tcube[4][2] = cube[5][2];\n\t\t\tcube[5][2] = cube[5][3];\n\t\t\tcube[5][3] = cube[4][3];\n\t\t\tcube[4][3] = kari;\n\t\t} else if(a[i] == 'L') {\n\t\t\tkari = cube[4][2];\n\t\t\tkari2 = cube[5][2];\n\t\t\tfor (int j = 5; j > 1; j--) {\n\t\t\t\tcube[j][2] = cube[j-2][2];\n\t\t\t}\n\t\t\tcube[1][2] = cube[2][7];\n\t\t\tcube[0][2] = cube[3][7];\n\t\t\tcube[2][7] = kari2;\n\t\t\tcube[3][7] = kari;\n\t\t\tkari = cube[2][0];\n\t\t\tcube[2][0] = cube[3][0];\n\t\t\tcube[3][0] = cube[3][1];\n\t\t\tcube[3][1] = cube[2][1];\n\t\t\tcube[2][1] = kari;\n\t\t} else if (a[i] == 'R') {\n\t\t\tkari = cube[0][3];\n\t\t\tkari2 = cube[1][3];\n\t\t\tfor (int j = 0; j < 4; j++) {\n\t\t\t\tcube[j][3] = cube[j+2][3];\n\t\t\t}\n\t\t\tcube[4][3] = cube[3][6];\n\t\t\tcube[5][3] = cube[2][6];\n\t\t\tcube[2][6] = kari2;\n\t\t\tcube[3][6] = kari;\n\t\t\tkari = cube[2][4];\n\t\t\tcube[2][4] = cube[3][4];\n\t\t\tcube[3][4] = cube[3][5];\n\t\t\tcube[3][5] = cube[2][5];\n\t\t\tcube[2][5] = kari;\n\t\t} else if (a[i] == 'F') {\n\t\t\tkari = cube[2][2];\n\t\t\tcube[2][2] = cube[3][2];\n\t\t\tcube[3][2] = cube[3][3];\n\t\t\tcube[3][3] = cube[2][3];\n\t\t\tcube[2][3] = kari;\n\t\t\tkari = cube[2][1];\n\t\t\tkari2 = cube[3][1];\n\t\t\tcube[2][1] = cube[4][2];\n\t\t\tcube[3][1] = cube[4][3];\n\t\t\tcube[4][2] = cube[3][4];\n\t\t\tcube[4][3] = cube[2][4];\n\t\t\tcube[2][4] = cube[1][2];\n\t\t\tcube[3][4] = cube[1][3];\n\t\t\tcube[1][2] = kari2;\n\t\t\tcube[1][3] = kari;\n\t\t} else if(a[i] == 'B'){\n\t\t\tkari = cube[2][6];\n\t\t\tcube[2][6] = cube[3][6];\n\t\t\tcube[3][6] = cube[3][7];\n\t\t\tcube[3][7] = cube[2][7];\n\t\t\tcube[2][7] = kari;\n\t\t\tkari = cube[2][5];\n\t\t\tkari2 = cube[3][5];\n\t\t\tcube[2][5] = cube[5][3];\n\t\t\tcube[3][5] = cube[5][2];\n\t\t\tcube[5][2] = cube[2][0];\n\t\t\tcube[5][3] = cube[3][0];\n\t\t\tcube[2][0] = cube[0][3];\n\t\t\tcube[3][0] = cube[0][2];\n\t\t\tcube[0][2] = kari;\n\t\t\tcube[0][3] = kari2;\n\t\t}\n\t}\n\tfor (int i = 0; i < 6; i++) {\n\t\tfor (int j = 0; j < 8; j++) {\n\t\t\tcout << cube[i][j];\n\t\t}\n\t\tcout << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main(){\n\tchar r[6][8]={{'.','.','r','r','.','.','.','.'},\n\t\t\t\t\t\t\t\t{'.','.','r','r','.','.','.','.'},\n\t\t\t\t\t\t\t\t{'g','g','y','y','b','b','w','w'},\n\t\t\t\t\t\t\t\t{'g','g','y','y','b','b','w','w'},\n\t\t\t\t\t\t\t\t{'.','.','o','o','.','.','.','.'},\n\t\t\t\t\t\t\t\t{'.','.','o','o','.','.','.','.'}};\n\t//string s;\n\tchar s[101];\n\tchar tmp;\n\t\n\tcin >> s;\n\t// cout << s << endl;\n\tfor(int i = 0; i < sizeof(s); i++){\n\t\tif(s[i]=='U'){\n\t\t\ttmp=r[2][0]; r[2][0]=r[2][2]; r[2][2]=r[2][4]; r[2][4]=r[2][6]; r[2][6]=tmp;\n\t\t\ttmp=r[2][1]; r[2][1]=r[2][3]; r[2][3]=r[2][5]; r[2][5]=r[2][7]; r[2][7]=tmp;\n\t\t\ttmp=r[0][2]; r[0][2]=r[1][2]; r[1][2]=r[1][3]; r[1][3]=r[0][3]; r[0][3]=tmp;\n\t\t}\n\t\telse if(s[i]=='F'){\n\t\t\ttmp=r[2][1]; r[2][1]=r[4][2]; r[4][2]=r[3][4]; r[3][4]=r[1][3]; r[1][3]=tmp;\n\t\t\ttmp=r[3][1]; r[3][1]=r[4][3]; r[4][3]=r[2][4]; r[2][4]=r[1][2]; r[1][2]=tmp;\n\t\t\ttmp=r[2][2]; r[2][2]=r[3][2]; r[3][2]=r[3][3]; r[3][3]=r[2][3]; r[2][3]=tmp;\n\t\t}\n\t\telse if(s[i]=='R'){\n\t\t\ttmp=r[0][3]; r[0][3]=r[2][3]; r[2][3]=r[4][3]; r[4][3]=r[3][6]; r[3][6]=tmp;\n\t\t\ttmp=r[1][3]; r[1][3]=r[3][3]; r[3][3]=r[5][3]; r[5][3]=r[2][6]; r[2][6]=tmp;\n\t\t\ttmp=r[2][4]; r[2][4]=r[3][4]; r[3][4]=r[3][5]; r[3][5]=r[2][5]; r[2][5]=tmp;\n\t\t}\n\t\telse if(s[i]=='D'){\n\t\t\ttmp=r[3][0]; r[3][0]=r[3][6]; r[3][6]=r[3][4]; r[3][4]=r[3][2]; r[3][2]=tmp;\n\t\t\ttmp=r[3][1]; r[3][1]=r[3][7]; r[3][7]=r[3][5]; r[3][5]=r[3][3]; r[3][3]=tmp;\n\t\t\ttmp=r[4][2]; r[4][2]=r[5][2]; r[5][2]=r[5][3]; r[5][3]=r[4][3]; r[4][3]=tmp;\n\t\t}\n\t\telse if(s[i]=='B'){\n\t\t\ttmp=r[2][5]; r[2][5]=r[5][3]; r[5][3]=r[3][0]; r[3][0]=r[0][2]; r[0][2]=tmp;\n\t\t\ttmp=r[3][5]; r[3][5]=r[5][2]; r[5][2]=r[2][0]; r[2][0]=r[0][3]; r[0][3]=tmp;\n\t\t\ttmp=r[2][6]; r[2][6]=r[3][6]; r[3][6]=r[3][7]; r[3][7]=r[2][7]; r[2][7]=tmp;\n\t\t}\n\t\telse if(s[i]=='L'){\n\t\t\ttmp=r[0][2]; r[0][2]=r[3][7]; r[3][7]=r[4][2]; r[4][2]=r[2][2]; r[2][2]=tmp;\n\t\t\ttmp=r[1][2]; r[1][2]=r[2][7]; r[2][7]=r[5][2]; r[5][2]=r[3][2]; r[3][2]=tmp;\n\t\t\ttmp=r[2][0]; r[2][0]=r[3][0]; r[3][0]=r[3][1]; r[3][1]=r[2][1]; r[2][1]=tmp;\n\t\t}\n\t}\n\n\tfor(int j=0;j<6;j++){\n\t\tfor(int k=0;k<8;k++){\n\t\t\tcout << r[j][k];\n\t\t}\n\t\tcout << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <string>\n\nusing namespace std;\n\nstring dat[6] = \n{\"..rr....\", \"..rr....\", \"ggyybbww\", \"ggyybbww\", \"..oo....\", \"..oo....\"};\n\nvoid funcU(){\n\tstring tmp[6];\n\tfor(int i=0;i<6;i++) tmp[i] = dat[i];\n\tdat[2][0] = tmp[2][2];\n\tdat[2][1] = tmp[2][3];\n\tdat[2][2] = tmp[2][4];\n\tdat[2][3] = tmp[2][5];\n\tdat[2][4] = tmp[2][6];\n\tdat[2][5] = tmp[2][7];\n\tdat[2][6] = tmp[2][0];\n\tdat[2][7] = tmp[2][1];\n\tdat[0][2] = tmp[1][2];\n\tdat[1][2] = tmp[1][3];\n\tdat[1][3] = tmp[0][3];\n\tdat[0][3] = tmp[0][2];\n}\n\nvoid funcF(){\n\tstring tmp[6];\n\tfor(int i=0;i<6;i++) tmp[i] = dat[i];\n\tdat[1][2] = tmp[3][1];\n\tdat[1][3] = tmp[2][1];\n\tdat[2][1] = tmp[4][2];\n\tdat[3][1] = tmp[4][3];\n\tdat[4][2] = tmp[3][4];\n\tdat[4][3] = tmp[2][4];\n\tdat[2][4] = tmp[1][2];\n\tdat[3][4] = tmp[1][3];\n\tdat[2][2] = tmp[3][2];\n\tdat[3][2] = tmp[3][3];\n\tdat[3][3] = tmp[2][3];\n\tdat[2][3] = tmp[2][2];\n}\n\nvoid funcR(){\n\tstring tmp[6];\n\tfor(int i=0;i<6;i++) tmp[i] = dat[i];\n\tdat[0][3] = tmp[2][3];\n\tdat[1][3] = tmp[3][3];\n\tdat[2][3] = tmp[4][3];\n\tdat[3][3] = tmp[5][3];\n\tdat[4][3] = tmp[3][6];\n\tdat[5][3] = tmp[2][6];\n\tdat[2][6] = tmp[1][3];\n\tdat[3][6] = tmp[0][3];\n\tdat[2][4] = tmp[3][4];\n\tdat[3][4] = tmp[3][5];\n\tdat[3][5] = tmp[2][5];\n\tdat[2][5] = tmp[2][4];\n}\n\nvoid funcD(){\n\tstring tmp[6];\n\tfor(int i=0;i<6;i++) tmp[i] = dat[i];\n\tdat[3][0] = tmp[3][6];\n\tdat[3][1] = tmp[3][7];\n\tdat[3][2] = tmp[3][0];\n\tdat[3][3] = tmp[3][1];\n\tdat[3][4] = tmp[3][2];\n\tdat[3][5] = tmp[3][3];\n\tdat[3][6] = tmp[3][4];\n\tdat[3][7] = tmp[3][5];\n\tdat[4][2] = tmp[5][2];\n\tdat[5][2] = tmp[5][3];\n\tdat[5][3] = tmp[4][3];\n\tdat[4][3] = tmp[4][2];\n}\n\nvoid funcB(){\n\tstring tmp[6];\n\tfor(int i=0;i<6;i++) tmp[i] = dat[i];\n\tdat[0][2] = tmp[2][5];\n\tdat[0][3] = tmp[3][5];\n\tdat[2][5] = tmp[5][3];\n\tdat[3][5] = tmp[5][2];\n\tdat[5][2] = tmp[2][0];\n\tdat[5][3] = tmp[3][0];\n\tdat[2][0] = tmp[0][3];\n\tdat[3][0] = tmp[0][2];\n\tdat[2][6] = tmp[3][6];\n\tdat[3][6] = tmp[3][7];\n\tdat[3][7] = tmp[2][7];\n\tdat[2][7] = tmp[2][6];\n}\n\nvoid funcL(){\n\tstring tmp[6];\n\tfor(int i=0;i<6;i++) tmp[i] = dat[i];\n\tdat[0][2] = tmp[3][7];\n\tdat[1][2] = tmp[2][7];\n\tdat[2][7] = tmp[5][2];\n\tdat[3][7] = tmp[4][2];\n\tdat[4][2] = tmp[2][2];\n\tdat[5][2] = tmp[3][2];\n\tdat[2][2] = tmp[0][2];\n\tdat[3][2] = tmp[1][2];\n\tdat[2][0] = tmp[3][0];\n\tdat[3][0] = tmp[3][1];\n\tdat[3][1] = tmp[2][1];\n\tdat[2][1] = tmp[2][0];\n}\n\nint main(){\n\tstring in;\n\tcin >> in;\n\tfor(int i=0;i<in.size();i++){\n\t\tif(in[i] == 'U') funcU();\n\t\telse if(in[i] == 'F') funcF();\n\t\telse if(in[i] == 'R') funcR();\n\t\telse if(in[i] == 'D') funcD();\n\t\telse if(in[i] == 'B') funcB();\n\t\telse if(in[i] == 'L') funcL();\n\t}\n\tfor(int i=0;i<6;i++) cout << dat[i] << endl;\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<algorithm>\n#include<map>\n#include<set>\n#include<utility>\n#include<vector>\n#include<cmath>\n#include<cstring>\n#include<cstdio>\n#include<time.h>\n#define loop(i,a,b) for(int i=a;i<b;i++) \n#define rep(i,a) loop(i,0,a)\n#define pb push_back\n#define mp make_pair\n#define all(in) in.begin(),in.end()\nconst double PI=acos(-1);\nconst double EPS=1e-10;\nconst int inf=1e8;\nusing namespace std;\ntypedef long long ll;\ntypedef vector<int> vi;\nint main(){\n\tstring in[6]={\n\t\t\"..rr....\",\n\t\t\"..rr....\",\n\t\t\"ggyybbww\",\n\t\t\"ggyybbww\",\n\t\t\"..oo....\",\n\t\t\"..oo....\",\n\t};\n\tstring s;\n\tchar tmp;\n\tcin>>s;\n\trep(i,s.size()){\n\t\tif(s[i]=='U'){\n\t\t\tin[2]=in[2].substr(2)+in[2].substr(0,2);\n\t\t\ttmp=in[1][3];\n\t\t\tin[1][3]=in[0][3];\n\t\t\tin[0][3]=in[0][2];\n\t\t\tin[0][2]=in[1][2];\n\t\t\tin[1][2]=tmp;\n\t\t}else if(s[i]=='F'){\n\t\t\ttmp=in[2][2];\n\t\t\tin[2][2]=in[3][2];\n\t\t\tin[3][2]=in[3][3];\n\t\t\tin[3][3]=in[2][3];\n\t\t\tin[2][3]=tmp;\n\t\t\ttmp=in[1][2];\n\t\t\tin[1][2]=in[3][1];\n\t\t\tin[3][1]=in[4][3];\n\t\t\tin[4][3]=in[2][4];\n\t\t\tin[2][4]=tmp;\n\t\t\ttmp=in[1][3];\n\t\t\tin[1][3]=in[2][1];\n\t\t\tin[2][1]=in[4][2];\n\t\t\tin[4][2]=in[3][4];\n\t\t\tin[3][4]=tmp;\n\t\t}else if(s[i]=='R'){\n\t\t\ttmp=in[2][4];\n\t\t\tin[2][4]=in[3][4];\n\t\t\tin[3][4]=in[3][5];\n\t\t\tin[3][5]=in[2][5];\n\t\t\tin[2][5]=tmp;\n\t\t\ttmp=in[0][3];\n\t\t\tin[0][3]=in[2][3];\t\n\t\t\tin[2][3]=in[4][3];\n\t\t\tin[4][3]=in[3][6];\n\t\t\tin[3][6]=tmp;\n\t\t\ttmp=in[1][3];\n\t\t\tin[1][3]=in[3][3];\n\t\t\tin[3][3]=in[5][3];\n\t\t\tin[5][3]=in[2][6];\n\t\t\tin[2][6]=tmp;\n\t\t}else if(s[i]=='D'){\n\t\t\tin[3]=in[3].substr(6)+in[3].substr(0,6);\n\t\t\ttmp=in[4][2];\n\t\t\tin[4][2]=in[5][2];\n\t\t\tin[5][2]=in[5][3];\n\t\t\tin[5][3]=in[4][3];\n\t\t\tin[4][3]=tmp;\n\t\t}else if(s[i]=='B'){\n\t\t\ttmp=in[2][6];\n\t\t\tin[2][6]=in[3][6];\n\t\t\tin[3][6]=in[3][7];\n\t\t\tin[3][7]=in[2][7];\n\t\t\tin[2][7]=tmp;\n\t\t\ttmp=in[2][0];\n\t\t\tin[2][0]=in[0][3];\n\t\t\tin[0][3]=in[3][5];\n\t\t\tin[3][5]=in[5][2];\n\t\t\tin[5][2]=tmp;\n\t\t\ttmp=in[3][0];\n\t\t\tin[3][0]=in[0][2];\n\t\t\tin[0][2]=in[2][5];\n\t\t\tin[2][5]=in[5][3];\n\t\t\tin[5][3]=tmp;\n\t\t}else if(s[i]=='L'){\n\t\t\ttmp=in[2][0];\n\t\t\tin[2][0]=in[3][0];\n\t\t\tin[3][0]=in[3][1];\n\t\t\tin[3][1]=in[2][1];\n\t\t\tin[2][1]=tmp;\n\t\t\ttmp=in[1][2];\n\t\t\tin[1][2]=in[2][7];\n\t\t\tin[2][7]=in[5][2];\n\t\t\tin[5][2]=in[3][2];\n\t\t\tin[3][2]=tmp;\n\t\t\ttmp=in[0][2];\n\t\t\tin[0][2]=in[3][7];\n\t\t\tin[3][7]=in[4][2];\n\t\t\tin[4][2]=in[2][2];\n\t\t\tin[2][2]=tmp;\n\t\t}\n\t}\n\trep(i,6)cout<<in[i]<<endl;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\nusing namespace std;\nvoid rotateU(vector<string>& cube){\n  string s = cube[2].substr(2) + cube[2].substr(0,2);\n  cube[2] = s;\n  char c = cube[0][2];\n  cube[0][2] = cube[1][2];\n  cube[1][2] = cube[1][3];\n  cube[1][3] = cube[0][3];\n  cube[0][3] = c;\n}\nvoid rotateF(vector<string>& cube){\n  char c1 = cube[1][3];\n  char c2 = cube[1][2];\n  cube[1][3] = cube[2][1];\n  cube[1][2] = cube[3][1];\n  cube[2][1] = cube[4][2];\n  cube[3][1] = cube[4][3];\n  cube[4][2] = cube[3][4];\n  cube[4][3] = cube[2][4];\n  cube[3][4] = c1;\n  cube[2][4] = c2;\n  char c = cube[2][2];\n  cube[2][2] = cube[3][2];\n  cube[3][2] = cube[3][3];\n  cube[3][3] = cube[2][3];\n  cube[2][3] = c;\n}\nvoid rotateR(vector<string>& cube){\n  char c1 = cube[0][3];\n  char c2 = cube[1][3];\n  cube[0][3] = cube[2][3];\n  cube[1][3] = cube[3][3];\n  cube[2][3] = cube[4][3];\n  cube[3][3] = cube[5][3];\n  cube[4][3] = cube[3][6];\n  cube[5][3] = cube[2][6];\n  cube[3][6] = c1;\n  cube[2][6] = c2;\n  char c = cube[2][4];\n  cube[2][4] = cube[3][4];\n  cube[3][4] = cube[3][5];\n  cube[3][5] = cube[2][5];\n  cube[2][5] = c;\n}\nvoid rotateD(vector<string>& cube){\n  string s = cube[3].substr(6) + cube[3].substr(0,6);\n  cube[3] = s;\n  char c = cube[4][2];\n  cube[4][2] = cube[5][2];\n  cube[5][2] = cube[5][3];\n  cube[5][3] = cube[4][3];\n  cube[4][3] = c;\n}\nvoid rotateB(vector<string>& cube){\n  char c1 = cube[0][2];\n  char c2 = cube[0][3];\n  cube[0][2] = cube[2][5];\n  cube[0][3] = cube[3][5];\n  cube[2][5] = cube[5][3];\n  cube[3][5] = cube[5][2];\n  cube[5][3] = cube[3][0];\n  cube[5][2] = cube[2][0];\n  cube[3][0] = c1;\n  cube[2][0] = c2;\n  char c = cube[2][6];\n  cube[2][6] = cube[3][6];\n  cube[3][6] = cube[3][7];\n  cube[3][7] = cube[2][7];\n  cube[2][7] = c;\n}\nvoid rotateL(vector<string>& cube){\n  char c1 = cube[1][2];\n  char c2 = cube[0][2];\n  cube[1][2] = cube[2][7];\n  cube[0][2] = cube[3][7];\n  cube[2][7] = cube[5][2];\n  cube[3][7] = cube[4][2];\n  cube[5][2] = cube[3][2];\n  cube[4][2] = cube[2][2];\n  cube[3][2] = c1;\n  cube[2][2] = c2;\n  char c = cube[2][0];\n  cube[2][0] = cube[3][0];\n  cube[3][0] = cube[3][1];\n  cube[3][1] = cube[2][1];\n  cube[2][1] = c;\n}\nint main()\n{\n  vector<string> cube(6);\n  cube[0] = \"..rr....\";\n  cube[1] = \"..rr....\";\n  cube[2] = \"ggyybbww\";\n  cube[3] = \"ggyybbww\";\n  cube[4] = \"..oo....\";\n  cube[5] = \"..oo....\";\n  string s;\n  cin >> s;\n  for(int i=0; i<s.length(); i++){\n    switch(s[i]){\n    case 'U': rotateU(cube); break;\n    case 'F': rotateF(cube); break;\n    case 'R': rotateR(cube); break;\n    case 'D': rotateD(cube); break;\n    case 'B': rotateB(cube); break;\n    case 'L': rotateL(cube); break;\n    }\n  }\n  for(int i=0; i<6; i++){\n    cout << cube[i] << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#define INF 100000000\n  \n#include <iostream>\n#include <cstdio>\n#include <sstream>\n#include <cmath>\n#include <cstdlib>\n#include <algorithm>\n#include <queue>\n#include <stack>\n#include <limits>\n#include <map>\n#include <string>\n#include <cstring>\n#include <set>\n#include <deque>\n#include <bitset>\n#include <list>\n#include <cctype>\n#include <utility>\n  \nusing namespace std;\n  \ntypedef long long ll;\ntypedef pair <int,int> P;\ntypedef pair <int,P> PP;\n  \nstatic const double EPS = 1e-8;\n  \nint tx[] = {0,1,0,-1};\nint ty[] = {-1,0,1,0};\n\nclass Strategy{\npublic:\n  virtual void turn(char cube[6][9]) = 0;\n};\n\n\nclass Upper : public Strategy{\npublic:\n  void turn(char cube[6][9]){\n    char next[6][9];\n    memcpy(next,cube,sizeof(char) * 6 * 9);\n    \n    //red\n    next[0][3] = cube[0][2];\n    next[1][3] = cube[0][3];\n    next[1][2] = cube[1][3];\n    next[0][2] = cube[1][2];\n    \n    //white\n    next[2][4] = cube[2][6];\n    next[2][5] = cube[2][7];\n    \n    //blue\n    next[2][2] = cube[2][4];\n    next[2][3] = cube[2][5];\n    \n    //yellow\n    next[2][0] = cube[2][2];\n    next[2][1] = cube[2][3];\n    \n    //green\n    next[2][6] = cube[2][0];\n    next[2][7] = cube[2][1];\n    \n    memcpy(cube,next,sizeof(char) * 6 * 9);\n  }\n};\n  \nclass Right : public Strategy{\npublic:\n  void turn(char cube[6][9]){\n    char next[6][9];\n    memcpy(next,cube,sizeof(char) * 6 * 9);\n\n    //blue\n    next[2][5] = cube[2][4];\n    next[3][5] = cube[2][5];\n    next[3][4] = cube[3][5];\n    next[2][4] = cube[3][4];\n\n    //red\n    next[2][6] = cube[1][3];\n    next[3][6] = cube[0][3];\n\n    //white\n    next[5][3] = cube[2][6];\n    next[4][3] = cube[3][6];\n\n    //orange\n    next[2][3] = cube[4][3];\n    next[3][3] = cube[5][3];\n\n    //yellow\n    next[0][3] = cube[2][3];\n    next[1][3] = cube[3][3];\n\n    memcpy(cube,next,sizeof(char) * 6 * 9);\n  }\n};\n\nclass Left : public Strategy{\npublic:\n  void turn(char cube[6][9]){\n    char next[6][9];\n    memcpy(next,cube,sizeof(char) * 6 * 9);\n\n    //green\n    next[2][1] = cube[2][0];\n    next[3][1] = cube[2][1];\n    next[3][0] = cube[3][1];\n    next[2][0] = cube[3][0];\n\n    //red\n    next[2][2] = cube[0][2];\n    next[3][2] = cube[1][2];\n\n    //yellow\n    next[4][2] = cube[2][2];\n    next[5][2] = cube[3][2];\n\n    //orange\n    next[3][7] = cube[4][2];\n    next[2][7] = cube[5][2];\n\n    //white\n    next[0][2] = cube[3][7];\n    next[1][2] = cube[2][7];\n\n    memcpy(cube,next,sizeof(char) * 6 * 9);\n  }\n};\n\nclass Front : public Strategy{\npublic:\n  void turn(char cube[6][9]){\n    char next[6][9];\n    memcpy(next,cube,sizeof(char) * 6 * 9);\n\n    //yellow\n    next[2][3] = cube[2][2];\n    next[3][3] = cube[2][3];\n    next[3][2] = cube[3][3];\n    next[2][2] = cube[3][2];\n  \n    //red\n    next[2][4] = cube[1][2];\n    next[3][4] = cube[1][3];\n\n    //blue\n    next[4][3] = cube[2][4];\n    next[4][2] = cube[3][4];\n\n    //orange\n    next[3][1] = cube[4][3];\n    next[2][1] = cube[4][2];\n\n    //green\n    next[1][3] = cube[2][1];\n    next[1][2] = cube[3][1];\n\n    memcpy(cube,next,sizeof(char) * 6 * 9);\n\n  }\n};\n\nclass Down : public Strategy{\npublic:\n  void turn(char cube[6][9]){\n    char next[6][9];\n    memcpy(next,cube,sizeof(char) * 6 * 9);\n\n    //orange\n    next[4][3] = cube[4][2];\n    next[5][3] = cube[4][3];\n    next[5][2] = cube[5][3];\n    next[4][2] = cube[5][2];\n\n    //yellow\n    next[3][4] = cube[3][2];\n    next[3][5] = cube[3][3];\n  \n    //blue\n    next[3][6] = cube[3][4];\n    next[3][7] = cube[3][5];\n\n    //white\n    next[3][0] = cube[3][6];\n    next[3][1] = cube[3][7];\n\n    //green\n    next[3][2] = cube[3][0];\n    next[3][3] = cube[3][1];\n\n    memcpy(cube,next,sizeof(char) * 6 * 9);\n\n  }\n};\n\nclass Back : public Strategy{\npublic:\n  void turn(char cube[6][9]){\n    char next[6][9];\n    memcpy(next,cube,sizeof(char) * 6 * 9);\n\n    //white\n    next[2][7] = cube[2][6];\n    next[3][7] = cube[2][7];\n    next[3][6] = cube[3][7];\n    next[2][6] = cube[3][6];\n\n    //red\n    next[3][0] = cube[0][2];\n    next[2][0] = cube[0][3];\n\n    //green\n    next[5][2] = cube[2][0];\n    next[5][3] = cube[3][0];\n\n    //orange\n    next[3][5] = cube[5][2];\n    next[2][5] = cube[5][3];\n\n    //blue\n    next[0][2] = cube[2][5];\n    next[0][3] = cube[3][5];\n\n    memcpy(cube,next,sizeof(char) * 6 * 9);\n\n  }\n};\n\n\nclass Player{\nprivate:\n  Strategy* mStrategy;\npublic:\n  void turn(char cube[6][9]){\n    mStrategy->turn(cube);\n  }\n  void setStrategy(Strategy* s) {\n    mStrategy = s;\n  }\n};\n\nvoid disp(char cube[6][9]){\n  for(int y=0;y<6;y++){\n    for(int x=0;x<8;x++){\n      printf(\"%c\",cube[y][x]);\n    }\n    printf(\"\\n\");\n  }\n}\n\n\n\nint main(){\n\n  char cube[][9] = {\n    \"..rr....\",\n    \"..rr....\",\n    \"ggyybbww\",\n    \"ggyybbww\",\n    \"..oo....\",\n    \"..oo....\"\n  };\n\n  map<char,Strategy*> algo;\n  algo['U'] = new Upper();\n  algo['F'] = new Front();\n  algo['R'] = new Right();\n  algo['D'] = new Down();\n  algo['B'] = new Back();\n  algo['L'] = new Left();\n\n  string command;\n  Player p;\n  while(cin >> command){\n    for(int i=0;i<command.size();i++){\n      p.setStrategy(algo[command[i]]);\n      p.turn(cube);\n    }\n    disp(cube);\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n\nusing namespace std;\n\nchar cmd[7] = {\"UFRDBL\"};\n\nint dy[6][6][8] = {\n\t{{0,0,0,1,0,0,0,0},{0,0,-1,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},\t{0,0,0,0,0,0,0,0}},\n\t{{ 0, 0, 0, 0, 0, 0, 0, 0},{ 0, 0, 1, 2, 0, 0, 0, 0},{ 0,-1, 0, 1, 2, 0, 0, 0},{ 0,-2,-1, 0, 1, 0, 0, 0},{ 0, 0,-2,-1, 0, 0, 0, 0},{ 0, 0, 0, 0, 0, 0, 0, 0}},\n\t{{0,0,0,3,0,0,0,0},{0,0,0,1,0,0,0,0},{0,0,0,-2,0,1,3,0},{0,0,0,-2,-1,0,1,0},{0,0,0,-2,0,0,0,0},{0,0,0,-2,0,0,0,0}},\n\t{{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,1,0,0,0,0},{0,0,-1,0,0,0,0,0}},\n\t{{0,0,3,2,0,0,0,0},{0,0,0,0,0,0,0,0},{3,0,0,0,0,-2,0,1},{2,0,0,0,0,-3,-1,0},{0,0,0,0,0,0,0,0},{0,0,-2,-3,0,0,0,0}},\n\t{\n\t{ 0, 0, 2, 0, 0, 0, 0, 0},\n\t{ 0, 0, 2, 0, 0, 0, 0, 0},\n\t{ 0, 1, 2, 0, 0, 0, 0,-1},\n\t{-1, 0, 2, 0, 0, 0, 0,-3},\n\t{ 0, 0,-1, 0, 0, 0, 0, 0},\n\t{ 0, 0,-3, 0, 0, 0, 0, 0}}\n};\n\nint dx[6/*コマンド数*/][6/*縦*/][8/*横*/] = {\n\t{{0,0,1,0,0,0,0,0},{0,0,0,-1,0,0,0,0},{6,6,-2,-2,-2,-2,-2,-2},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0}},\n\t{{ 0, 0, 0, 0, 0, 0, 0, 0},{ 0, 0, 2, 1, 0, 0, 0, 0},{ 0, 2, 1, 0,-1, 0, 0, 0},{ 0, 1, 0,-1,-2, 0, 0, 0},{ 0, 0,-1,-2, 0, 0, 0, 0},{ 0, 0, 0, 0, 0, 0, 0, 0}},\n\t{{0,0,0,3,0,0,0,0},{0,0,0,3,0,0,0,0},{0,0,0,0,1,0,-3,0},{0,0,0,0,0,-1,-3,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0}},\n\t{{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{2,2,2,2,2,2,-6,-6},{0,0,1,0,0,0,0,0},{0,0,0,-1,0,0,0,0}},\n\t{{0,0,-2,-3,0,0,0,0},{0,0,0,0,0,0,0,0},{2,0,0,0,0,-3,1,0},{3,0,0,0,0,-2,0,-1},{0,0,0,0,0,0,0,0},{0,0,3,2,0,0,0,0}},\n\t{{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{1,0,0,0,0,0,0,-5},{0,-1,0,0,0,0,0,-5},{0,0,5,0,0,0,0,0},{0,0,5,0,0,0,0,0}}\n};\n\nvoid turn(char table[6][9],int icmd){\n\tchar tmp[6][9], i, j;\n\tfor(i = 0;i < 6;i++){\n\t\tfor(j = 0;j < 8;j++){\n\t\t\ttmp[i + dy[icmd][i][j]][j + dx[icmd][i][j]] = table[i][j];\n\t\t}\n\t\ttmp[i][j] = '\\0';\n\t}\n\tfor(i = 0;i < 6;i++){\n\t\tfor(j = 0;j < 8;j++){\n\t\t\ttable[i][j] = tmp[i][j];\n\t\t}\n\t\ttable[i][j] = '\\0';\n\t}\n}\n\nint main(void){\n\tint i;\n\tchar c, table[6][9] = {{\"..rr....\"},{\"..rr....\"},{\"ggyybbww\"},{\"ggyybbww\"},{\"..oo....\"},{\"..oo....\"}};\n\twhile((c = getchar()) != '\\n'){\n\t\tfor(i = 0;i < 6;i++){\n\t\t\tif(cmd[i] == c){\n\t\t\t\tturn(table,i);\n\t\t\t}\n\t\t}\n\t}\n\tfor(i = 0;i < 6;i++){\n\t\tprintf(\"%s\\n\",table[i]);\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nvoid move_surface(char surface[4]) {\n    char tmp = surface[0];\n    surface[0] = surface[2];\n    surface[2] = surface[3];\n    surface[3] = surface[1];\n    surface[1] = tmp;\n}\n\nvoid move8(char *c1, char *c2, char *c3, char *c4, char *c5, char *c6, char *c7, char *c8) {\n    char tmp1 = *c7;\n    char tmp2 = *c8;\n    *c8 = *c6;\n    *c7 = *c5;\n    *c6 = *c4;\n    *c5 = *c3;\n    *c4 = *c2;\n    *c3 = *c1;\n    *c2 = tmp2;\n    *c1 = tmp1;\n}\n\nvoid rotate(char c, char cube[6][4]) {\n    switch (c) {\n        case 'L':\n            move_surface(cube[0]);\n            move8(  &cube[4][0], &cube[4][2], &cube[1][0], &cube[1][2],\n                    &cube[5][0], &cube[5][2], &cube[3][2], &cube[3][0]);\n            break;\n        case 'F':\n            move_surface(cube[1]);\n            move8(  &cube[4][2], &cube[4][3], &cube[2][0], &cube[2][2],\n                    &cube[5][1], &cube[5][0], &cube[0][3], &cube[0][1]);\n            break;\n        case 'R':\n            move_surface(cube[2]);\n            move8(  &cube[4][3], &cube[4][1], &cube[3][0], &cube[3][2],\n                    &cube[5][3], &cube[5][1], &cube[1][3], &cube[1][1]);\n            break;\n        case 'B':\n            move_surface(cube[3]);\n            move8(  &cube[4][1], &cube[4][0], &cube[0][0], &cube[0][2],\n                    &cube[5][2], &cube[5][3], &cube[2][3], &cube[2][1]);\n            break;\n        case 'U':\n            move_surface(cube[4]);\n            move8(  &cube[3][1], &cube[3][0], &cube[2][1], &cube[2][0],\n                    &cube[1][1], &cube[1][0], &cube[0][1], &cube[0][0]);\n            break;\n        case 'D':\n            move_surface(cube[5]);\n            move8(  &cube[3][2], &cube[3][3], &cube[2][2], &cube[2][3],\n                    &cube[1][2], &cube[1][3], &cube[0][2], &cube[0][3]);\n            break;\n    }\n}\n\nvoid print(char cube[6][4]) {\n    cout << \"..\" << cube[4][0] << cube[4][1] << \"....\" << endl;\n    cout << \"..\" << cube[4][2] << cube[4][3] << \"....\" << endl;\n    cout << cube[0][0] << cube[0][1] << cube[1][0] << cube[1][1];\n    cout << cube[2][0] << cube[2][1] << cube[3][0] << cube[3][1] << endl;\n    cout << cube[0][2] << cube[0][3] << cube[1][2] << cube[1][3];\n    cout << cube[2][2] << cube[2][3] << cube[3][2] << cube[3][3] << endl;\n    cout << \"..\" << cube[5][0] << cube[5][1] << \"....\" << endl;\n    cout << \"..\" << cube[5][2] << cube[5][3] << \"....\" << endl;\n}\n\nint main() {\n    string s;\n    char cube[6][4] = {\n        {'g', 'g', 'g', 'g'},\n        {'y', 'y', 'y', 'y'},\n        {'b', 'b', 'b', 'b'},\n        {'w', 'w', 'w', 'w'},\n        {'r', 'r', 'r', 'r'},\n        {'o', 'o', 'o', 'o'}\n    };\n    cin >> s;\n    for (int i=0; i<(int)s.length(); i++) {\n        rotate(s[i], cube);\n    }\n    print(cube);\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\n\nusing namespace std;\n\ntypedef vector<int> vi;\ntypedef pair<int,int> pii;\ntypedef long long ll;\n\n#define dump(x)  cerr << #x << \" = \" << (x) << endl\n#define rep(i,n) for(ll i=0;i<(ll)(n);i++)\n#define all(a)  (a).begin(),(a).end()\n#define pb push_back\n#define INF 999999999\n/*\nstring data[10]={\n    \"..ab....\",\n    \"..cd....\",\n    \"efghijkl\",\n    \"mnopqrst\",\n    \"..uv....\",\n    \"..wx....\"\n};\n\n*/\n string data[10]={\n \"..rr....\",\n \"..rr....\",\n \"ggyybbww\",\n \"ggyybbww\",\n \"..oo....\",\n \"..oo....\"\n };\n\n\nvoid solve(char ch){\n    if(ch=='U'){\n        char t=data[0][2];\n        data[0][2]=data[1][2];\n        data[1][2]=data[1][3];\n        data[1][3]=data[0][3];\n        data[0][3]=t;\n        \n        int a=data[2][0],b=data[2][1];\n        rep(i,6){\n            data[2][i]=data[2][(i+2)%8];\n        }\n        data[2][6]=a,data[2][7]=b;\n    }\n    if(ch=='D'){\n        char t=data[4][2];\n        data[4][2]=data[5][2];\n        data[5][2]=data[5][3];\n        data[5][3]=data[4][3];\n        data[4][3]=t;\n        \n        int a=data[3][5],b=data[3][4];\n        for(int i=5;i>=0;i--){\n            data[3][i]=data[3][(i+6)%8];\n        }\n        data[3][6]=b;data[3][7]=a;\n    }\n    if(ch=='F'){\n        char t=data[2][2];\n        data[2][2]=data[3][2];\n        data[3][2]=data[3][3];\n        data[3][3]=data[2][3];\n        data[2][3]=t;\n        \n        char a,b;\n        a=data[1][2],b=data[1][3];\n        data[1][2]=data[3][1];\n        data[1][3]=data[2][1];\n        data[3][1]=data[4][3];\n        data[2][1]=data[4][2];\n        data[4][3]=data[2][4];\n        data[4][2]=data[3][4];\n        data[2][4]=a;\n        data[3][4]=b;\n    }\n    if(ch=='B'){\n        char t=data[2][6];\n        data[2][6]=data[3][6];\n        data[3][6]=data[3][7];\n        data[3][7]=data[2][7];\n        data[2][7]=t;\n        \n        char a,b;\n        a=data[0][2],b=data[0][3];\n        data[0][2]=data[2][5];\n        data[0][3]=data[3][5];\n        data[2][5]=data[5][3];\n        data[3][5]=data[5][2];\n        data[5][3]=data[3][0];\n        data[5][2]=data[2][0];\n        data[3][0]=a;\n        data[2][0]=b;\n    }\n    if(ch=='R'){\n        char t=data[2][4];\n        data[2][4]=data[3][4];\n        data[3][4]=data[3][5];\n        data[3][5]=data[2][5];\n        data[2][5]=t;\n        \n        char a,b;\n        a=data[1][3],b=data[0][3];\n        data[1][3]=data[3][3];\n        data[0][3]=data[2][3];\n        data[3][3]=data[5][3];\n        data[2][3]=data[4][3];\n        data[5][3]=data[2][6];\n        data[4][3]=data[3][6];\n        data[2][6]=a;\n        data[3][6]=b;\n    }\n    if(ch=='L'){\n        char t=data[2][0];\n        data[2][0]=data[3][0];\n        data[3][0]=data[3][1];\n        data[3][1]=data[2][1];\n        data[2][1]=t;\n        \n        char a,b;\n        a=data[4][2],b=data[5][2];\n        data[4][2]=data[2][2];\n        data[5][2]=data[3][2];\n        data[2][2]=data[0][2];\n        data[3][2]=data[1][2];\n        data[0][2]=data[3][7];\n        data[1][2]=data[2][7];\n        data[3][7]=a;\n        data[2][7]=b;\n    }\n}\n\nint main(){\n    string s;\n    cin>>s;\n    rep(i,s.size()){\n        solve(s[i]);\n    }\n    rep(i,6){\n        rep(j,8){\n            cout<<data[i][j];\n        }\n        cout<<endl;\n    }\n}\n//UDLRBF"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <climits>\n#include <cfloat>\n#include <ctime>\n#include <cassert>\n#include <map>\n#include <utility>\n#include <set>\n#include <iostream>\n#include <memory>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <functional>\n#include <sstream>\n#include <complex>\n#include <stack>\n#include <queue>\n#include <numeric>\n#include <list>\n#include <iomanip>\n#include <fstream>\n#include <bitset>\n   \nusing namespace std;\n   \n \n#define rep(i, n) for (int i = 0; i < (int)(n); ++i)\n#define foreach(it, c) for (__typeof__((c).begin()) it=(c).begin(); it != (c).end(); ++it)\n#define rforeach(it, c) for (__typeof__((c).rbegin()) it=(c).rbegin(); it != (c).rend(); ++it)\n#define all(c) (c).begin(), (c).end()\n#define rall(c) (c).rbegin(), (c).rend()\n#define CL(arr, val) memset(arr, val, sizeof(arr))\n#define COPY(dest, src) memcpy(dest, src, sizeof(dest))\n#define ten(n) ((long long)(1e##n))\n#define bin(n) (1ull << (n))\n#define erep(i, n) for (int i = 0; i <= (int)(n); ++i)\n#define revrep(i, n) for (int i = (n); i >= 0; --i)\n#define pb push_back\n\ntemplate <class T> void chmax(T& a, const T& b) { a = max(a, b); }\ntemplate <class T> void chmin(T& a, const T& b) { a = min(a, b); }\n\ntemplate <class T> void uniq(T& c) { sort(c.begin(), c.end()); c.erase(unique(c.begin(), c.end()), c.end()); }\n \ntemplate <class T> string to_s(const T& a) { ostringstream os; os << a; return os.str(); }\ntemplate <class T> T to_T(const string& s) { istringstream is(s); T res; is >> res; return res; }\n  \ntemplate <class T, class U> ostream& operator<<(ostream& os, pair<T, U>& p) { os << \"( \" << p.first << \", \" << p.second << \" )\"; return os; }\n  \ntemplate <class T> void print(T a, int n, const string& deli = \" \", int br = 1) { for (int i = 0; i < n; ++i) { cout << a[i]; if (i + 1 != n) cout << deli; } while (br--) cout << endl; }\ntemplate <class T> void print(const T& c, const string& deli = \" \", int br = 1) { foreach (it, c) { cout << *it; if (++it != c.end()) cout << deli;--it; } while (br--) cout << endl; }\ntemplate <class T> void print2d(T a, int w, int h, int width = -1, int br = 1) { for (int i = 0; i < h; ++i) { for (int j = 0; j < w; ++j) {    if (width != -1) cout.width(width); cout << a[i][j] << ' '; } cout << endl; } while (br--) cout << endl; }\n   \ntemplate <class T> void input(T& a, int n) { for (int i = 0; i < n; ++i) cin >> a[i]; }\ntemplate <class T> void input(T* a, int n) { for (int i = 0; i < n; ++i) cin >> a[i]; }\n\nvoid fix_pre(int n) { cout.setf(ios::fixed, ios::floatfield); cout.precision(10); }\nvoid fast_io() { cin.tie(0); ios::sync_with_stdio(false); }\n#define trace(x) (cout << #x << \": \" << (x) << endl)\n \nbool in_rect(int x, int y, int w, int h) { return 0 <= x && x < w && 0 <= y && y < h; }\n\n\ntypedef long long ll;\ntypedef pair<int, int> pint;\n \n// y(v): v>^<  y(^): ^>v<\nconst int dx[] = { 0, 1, 0, -1 };\nconst int dy[] = { 1, 0, -1, 0 };\n\nconst double PI = acos(-1.0);\n\n\n\ntypedef vector<string> vs;\n\nvs mat() { return vs(2, string(2, '@')); }\nvs mat(char c) { return vs(2, string(2, c)); }\n\nvoid print_cube(vs s)\n{\n    rep(i, 6)\n        cout << s[i] << endl;\n}\n\n\n// 2*2\nvs rotate_r(vs s)\n{\n    vs t = mat();\n    t[0][1] = s[0][0];\n    t[1][1] = s[0][1];\n    t[1][0] = s[1][1];\n    t[0][0] = s[1][0];\n    return t;\n}\n// 2*2\nvs rotate_l(vs s)\n{\n    rep(i, 3)\n        s = rotate_r(s);\n    return s;\n}\n\nvs get_up(vs s)\n{\n    vs up = mat();\n    rep(i, 2) rep(j, 2)\n        up[i][j] = s[i][j + 2];\n    return up;\n}\nvs set_up(vs s, vs up)\n{\n    rep(i, 2) rep(j, 2)\n        s[i][j + 2] = up[i][j];\n    return s;\n}\n\nvs get_down(vs s)\n{\n    vs down = mat();\n    rep(i, 2) rep(j, 2)\n        down[i][j] = s[i + 4][j + 2];\n    return down;\n}\nvs set_down(vs s, vs down)\n{\n    rep(i, 2) rep(j, 2)\n        s[i + 4][j + 2] = down[i][j];\n    return s;\n}\n\nvs get_left(vs s)\n{\n    vs left = mat();\n    rep(i, 2) rep(j, 2)\n        left[i][j] = s[i + 2][j];\n    return left;\n}\nvs set_left(vs s, vs left)\n{\n    rep(i, 2) rep(j, 2)\n        s[i + 2][j] = left[i][j];\n    return s;\n}\n\nvs get_right(vs s)\n{\n    vs right = mat();\n    rep(i, 2) rep(j, 2)\n        right[i][j] = s[i + 2][j + 4];\n    return right;\n}\nvs set_right(vs s, vs right)\n{\n    rep(i, 2) rep(j, 2)\n        s[i + 2][j + 4] = right[i][j];\n    return s;\n}\n\nvs get_front(vs s)\n{\n    vs front = mat();\n    rep(i, 2) rep(j, 2)\n        front[i][j] = s[i + 2][j + 2];\n    return front;\n}\nvs set_front(vs s, vs front)\n{\n    rep(i, 2) rep(j, 2)\n        s[i + 2][j + 2] = front[i][j];\n    return s;\n}\n\nvs get_back(vs s)\n{\n    vs back = mat();\n    rep(i, 2) rep(j, 2)\n        back[i][j] = s[i + 2][j + 6];\n    return back;\n}\nvs set_back(vs s, vs back)\n{\n    rep(i, 2) rep(j, 2)\n        s[i + 2][j + 6] = back[i][j];\n    return s;\n}\n\nvs front_to_right(vs s)\n{\n// up\n    s = set_up(s, rotate_l(get_up(s)));\n// down\n    s = set_down(s, rotate_r(get_down(s)));\n\n// rotate right\n    for (int y = 2; y <= 3; ++y)\n        rotate(s[y].begin(), s[y].begin() + 6, s[y].end());\n\n    return s;\n}\nvs front_to_down(vs s)\n{\n    vs t(6, string(8, '.'));\n\n// up -> front, front -> down\n    rep(i, 4) rep(j, 2)\n        t[i + 2][j + 2] = s[i][j + 2];\n\n// back -> up\n    rep(i, 2) rep(j, 2)\n        t[i][j + 2] = s[2 + (i ^ 1)][6 + (j ^ 1)];\n\n// left\n    t = set_left(t, rotate_r(get_left(s)));\n\n// right\n    t = set_right(t, rotate_l(get_right(s)));\n\n// down -> back\n    rep(i, 2) rep(j, 2)\n        t[i + 2][j + 6] = s[4 + (i ^ 1)][2 + (j ^ 1)];\n\n    return t;\n}\n\nvs rotate_90(vs s)\n{\n    vs t = s;\n\n// front\n    t = set_front(t, rotate_r(get_front(t)));\n\n// mawari\n    t[2][4] = s[1][2];\n    t[3][4] = s[1][3];\n\n    t[4][3] = s[2][4];\n    t[4][2] = s[3][4];\n\n    t[3][1] = s[4][3];\n    t[2][1] = s[4][2];\n\n    t[1][2] = s[3][1];\n    t[1][3] = s[2][1];\n\n    return t;\n}\n\nvs F(vs s)\n{\n    return rotate_90(s);\n}\n\nvs L(vs s)\n{\n    vs t = front_to_right(s);\n    t = rotate_90(t);\n    rep(i, 3)\n        t = front_to_right(t);\n    return t;\n}\n\nvs R(vs s)\n{\n    vs t = s;\n    rep(i, 3)\n        t = front_to_right(t);\n    t = rotate_90(t);\n    return front_to_right(t);\n}\n\nvs B(vs s)\n{\n    vs t = s;\n    rep(i, 2)\n        t = front_to_right(t);\n    t = rotate_90(t);\n    rep(i, 2)\n        t = front_to_right(t);\n    return t;\n}\n\nvs U(vs s)\n{\n    vs t = front_to_down(s);\n    t = rotate_90(t);\n    rep(i, 3)\n        t = front_to_down(t);\n    return t;\n}\n\nvs D(vs s)\n{\n    vs t = s;\n    rep(i, 3)\n        t = front_to_down(t);\n    t = rotate_90(t);\n    return front_to_down(t);\n}\n\ntypedef vs (*ff)(vs s);\n\nvs num()\n{\n    vs s = mat();\n    rep(i, 2) rep(j, 2)\n        s[i][j] = '1' + i * 2 + j;\n    return s;\n}\n\nvs init()\n{\n    vs s(6, string(8, '.'));\n    s = set_front(s, mat('y'));\n    s = set_up(s, mat('r'));\n    s = set_left(s, mat('g'));\n    s = set_right(s, mat('b'));\n    s = set_back(s, mat('w'));\n    s = set_down(s, mat('o'));\n    return s;\n}\n\nint main()\n{\n    const char* plane = \"FLRBUD\";\n    ff func[] = { F, L, R, B, U, D };\n\n    vs cube = init();\n\n    string s;\n    cin >> s;\n    rep(i, s.size())\n    {\n        int k = strchr(plane, s[i]) - plane;\n        cube = func[k](cube);\n    }\n\n    print_cube(cube);\n}"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#define INF 100000000\n  \n#include <iostream>\n#include <cstdio>\n#include <sstream>\n#include <cmath>\n#include <cstdlib>\n#include <algorithm>\n#include <queue>\n#include <stack>\n#include <limits>\n#include <map>\n#include <string>\n#include <cstring>\n#include <set>\n#include <deque>\n#include <bitset>\n#include <list>\n#include <cctype>\n#include <utility>\n  \nusing namespace std;\n  \ntypedef long long ll;\ntypedef pair <int,int> P;\ntypedef pair <int,P> PP;\n  \nstatic const double EPS = 1e-8;\n  \nint tx[] = {0,1,0,-1};\nint ty[] = {-1,0,1,0};\n\nclass Strategy{\npublic:\n  virtual void turn(char cube[6][9]) = 0;\n};\n\n\nclass Upper : public Strategy{\npublic:\n  void turn(char cube[6][9]){\n    char next[6][9];\n    memcpy(next,cube,sizeof(char) * 6 * 9);\n    \n    //red\n    next[0][3] = cube[0][2];\n    next[1][3] = cube[0][3];\n    next[1][2] = cube[1][3];\n    next[0][2] = cube[1][2];\n    \n    //white\n    next[2][4] = cube[2][6];\n    next[2][5] = cube[2][7];\n    \n    //blue\n    next[2][2] = cube[2][4];\n    next[2][3] = cube[2][5];\n    \n    //yellow\n    next[2][0] = cube[2][2];\n    next[2][1] = cube[2][3];\n    \n    //green\n    next[2][6] = cube[2][0];\n    next[2][7] = cube[2][1];\n    \n    memcpy(cube,next,sizeof(char) * 6 * 9);\n  }\n};\n  \nclass Right : public Strategy{\npublic:\n  void turn(char cube[6][9]){\n    char next[6][9];\n    memcpy(next,cube,sizeof(char) * 6 * 9);\n\n    //blue\n    next[2][5] = cube[2][4];\n    next[3][5] = cube[2][5];\n    next[3][4] = cube[3][5];\n    next[2][4] = cube[3][4];\n\n    //red\n    next[2][6] = cube[1][3];\n    next[3][6] = cube[0][3];\n\n    //white\n    next[5][3] = cube[2][6];\n    next[4][3] = cube[3][6];\n\n    //orange\n    next[2][3] = cube[4][3];\n    next[3][3] = cube[5][3];\n\n    //yellow\n    next[0][3] = cube[2][3];\n    next[1][3] = cube[3][3];\n\n    memcpy(cube,next,sizeof(char) * 6 * 9);\n  }\n};\n\nclass Left : public Strategy{\npublic:\n  void turn(char cube[6][9]){\n    char next[6][9];\n    memcpy(next,cube,sizeof(char) * 6 * 9);\n\n    //green\n    next[2][1] = cube[2][0];\n    next[3][1] = cube[2][1];\n    next[3][0] = cube[3][1];\n    next[2][0] = cube[3][0];\n\n    //red\n    next[2][2] = cube[0][2];\n    next[3][2] = cube[1][2];\n\n    //yellow\n    next[4][2] = cube[2][2];\n    next[5][2] = cube[3][2];\n\n    //orange\n    next[3][7] = cube[4][2];\n    next[2][7] = cube[5][2];\n\n    //white\n    next[0][2] = cube[3][7];\n    next[1][2] = cube[2][7];\n\n    memcpy(cube,next,sizeof(char) * 6 * 9);\n  }\n};\n\nclass Front : public Strategy{\npublic:\n  void turn(char cube[6][9]){\n    char next[6][9];\n    memcpy(next,cube,sizeof(char) * 6 * 9);\n\n    //yellow\n    next[2][3] = cube[2][2];\n    next[3][3] = cube[2][3];\n    next[3][2] = cube[3][3];\n    next[2][2] = cube[3][2];\n  \n    //red\n    next[2][4] = cube[1][2];\n    next[3][4] = cube[1][3];\n\n    //blue\n    next[4][3] = cube[2][4];\n    next[4][2] = cube[3][4];\n\n    //orange\n    next[3][1] = cube[4][3];\n    next[2][1] = cube[4][2];\n\n    //green\n    next[1][3] = cube[2][1];\n    next[1][2] = cube[3][1];\n\n    memcpy(cube,next,sizeof(char) * 6 * 9);\n\n  }\n};\n\nclass Down : public Strategy{\npublic:\n  void turn(char cube[6][9]){\n    char next[6][9];\n    memcpy(next,cube,sizeof(char) * 6 * 9);\n\n    //orange\n    next[4][3] = cube[4][2];\n    next[5][3] = cube[4][3];\n    next[5][2] = cube[5][3];\n    next[4][2] = cube[5][2];\n\n    //yellow\n    next[3][4] = cube[3][2];\n    next[3][5] = cube[3][3];\n  \n    //blue\n    next[3][6] = cube[3][4];\n    next[3][7] = cube[3][5];\n\n    //white\n    next[3][0] = cube[3][6];\n    next[3][1] = cube[3][7];\n\n    //green\n    next[3][2] = cube[3][0];\n    next[3][3] = cube[3][1];\n\n    memcpy(cube,next,sizeof(char) * 6 * 9);\n\n  }\n};\n\nclass Back : public Strategy{\npublic:\n  void turn(char cube[6][9]){\n    char next[6][9];\n    memcpy(next,cube,sizeof(char) * 6 * 9);\n\n    //white\n    next[2][7] = cube[2][6];\n    next[3][7] = cube[2][7];\n    next[3][6] = cube[3][7];\n    next[2][6] = cube[3][6];\n\n    //red\n    next[3][0] = cube[0][2];\n    next[2][0] = cube[0][3];\n\n    //green\n    next[5][2] = cube[2][0];\n    next[5][3] = cube[3][0];\n\n    //orange\n    next[3][5] = cube[5][2];\n    next[2][5] = cube[5][3];\n\n    //blue\n    next[0][2] = cube[2][5];\n    next[0][3] = cube[3][5];\n\n    memcpy(cube,next,sizeof(char) * 6 * 9);\n\n  }\n};\n\n\nclass Player{\nprivate:\n  Strategy* mStrategy;\npublic:\n  void turn(char cube[6][9]){\n    mStrategy->turn(cube);\n  }\n  void setStrategy(Strategy* s) {\n    mStrategy = s;\n  }\n};\n\nvoid disp(char cube[6][9]){\n  for(int y=0;y<6;y++){\n    for(int x=0;x<8;x++){\n      printf(\"%c\",cube[y][x]);\n    }\n    printf(\"\\n\");\n  }\n}\n\n\n\nint main(){\n\n  char cube[][9] = {\n    \"..rr....\",\n    \"..rr....\",\n    \"ggyybbww\",\n    \"ggyybbww\",\n    \"..oo....\",\n    \"..oo....\"\n  };\n\n  map<char,Strategy*> algo;\n  algo['U'] = new Upper();\n  algo['F'] = new Front();\n  algo['R'] = new Right();\n  algo['D'] = new Down();\n  algo['B'] = new Back();\n  algo['L'] = new Left();\n\n  string command;\n  while(cin >> command){\n    Player p;\n    for(int i=0;i<command.size();i++){\n      p.setStrategy(algo[command[i]]);\n      p.turn(cube);\n    }\n    disp(cube);\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#define INF 100000000\n  \n#include <iostream>\n#include <cstdio>\n#include <sstream>\n#include <cmath>\n#include <cstdlib>\n#include <algorithm>\n#include <queue>\n#include <stack>\n#include <limits>\n#include <map>\n#include <string>\n#include <cstring>\n#include <set>\n#include <deque>\n#include <bitset>\n#include <list>\n#include <cctype>\n#include <utility>\n  \nusing namespace std;\n  \ntypedef long long ll;\ntypedef pair <int,int> P;\ntypedef pair <int,P> PP;\n  \nstatic const double EPS = 1e-8;\n  \nint tx[] = {0,1,0,-1};\nint ty[] = {-1,0,1,0};\n  \nvoid opeU(char cube[6][9]){\n  char next[6][9];\n  memcpy(next,cube,sizeof(char) * 6 * 9);\n\n  //red\n  next[0][3] = cube[0][2];\n  next[1][3] = cube[0][3];\n  next[1][2] = cube[1][3];\n  next[0][2] = cube[1][2];\n\n  //white\n  next[2][4] = cube[2][6];\n  next[2][5] = cube[2][7];\n\n  //blue\n  next[2][2] = cube[2][4];\n  next[2][3] = cube[2][5];\n\n  //yellow\n  next[2][0] = cube[2][2];\n  next[2][1] = cube[2][3];\n\n  //green\n  next[2][6] = cube[2][0];\n  next[2][7] = cube[2][1];\n\n  memcpy(cube,next,sizeof(char) * 6 * 9);\n}\n\nvoid opeR(char cube[6][9]){\n  char next[6][9];\n  memcpy(next,cube,sizeof(char) * 6 * 9);\n\n  //blue\n  next[2][5] = cube[2][4];\n  next[3][5] = cube[2][5];\n  next[3][4] = cube[3][5];\n  next[2][4] = cube[3][4];\n\n  //red\n  next[2][6] = cube[1][3];\n  next[3][6] = cube[0][3];\n\n  //white\n  next[5][3] = cube[2][6];\n  next[4][3] = cube[3][6];\n\n  //orange\n  next[2][3] = cube[4][3];\n  next[3][3] = cube[5][3];\n\n  //yellow\n  next[0][3] = cube[2][3];\n  next[1][3] = cube[3][3];\n\n  memcpy(cube,next,sizeof(char) * 6 * 9);\n}\n\nvoid opeL(char cube[6][9]){\n  char next[6][9];\n  memcpy(next,cube,sizeof(char) * 6 * 9);\n\n  //green\n  next[2][1] = cube[2][0];\n  next[3][1] = cube[2][1];\n  next[3][0] = cube[3][1];\n  next[2][0] = cube[3][0];\n\n  //red\n  next[2][2] = cube[0][2];\n  next[3][2] = cube[1][2];\n\n  //yellow\n  next[4][2] = cube[2][2];\n  next[5][2] = cube[3][2];\n\n  //orange\n  next[3][7] = cube[4][2];\n  next[2][7] = cube[5][2];\n\n  //white\n  next[0][2] = cube[3][7];\n  next[1][2] = cube[2][7];\n\n  memcpy(cube,next,sizeof(char) * 6 * 9);\n}\n\nvoid opeF(char cube[6][9]){  \n  char next[6][9];\n  memcpy(next,cube,sizeof(char) * 6 * 9);\n\n  //yellow\n  next[2][3] = cube[2][2];\n  next[3][3] = cube[2][3];\n  next[3][2] = cube[3][3];\n  next[2][2] = cube[3][2];\n  \n  //red\n  next[2][4] = cube[1][2];\n  next[3][4] = cube[1][3];\n\n  //blue\n  next[4][3] = cube[2][4];\n  next[4][2] = cube[3][4];\n\n  //orange\n  next[3][1] = cube[4][3];\n  next[2][1] = cube[4][2];\n\n  //green\n  next[1][3] = cube[2][1];\n  next[1][2] = cube[3][1];\n\n  memcpy(cube,next,sizeof(char) * 6 * 9);\n}\n\nvoid opeD(char cube[6][9]){\n  char next[6][9];\n  memcpy(next,cube,sizeof(char) * 6 * 9);\n\n  //orange\n  next[4][3] = cube[4][2];\n  next[5][3] = cube[4][3];\n  next[5][2] = cube[5][3];\n  next[4][2] = cube[5][2];\n\n  //yellow\n  next[3][4] = cube[3][2];\n  next[3][5] = cube[3][3];\n  \n  //blue\n  next[3][6] = cube[3][4];\n  next[3][7] = cube[3][5];\n\n  //white\n  next[3][0] = cube[3][6];\n  next[3][1] = cube[3][7];\n\n  //green\n  next[3][2] = cube[3][0];\n  next[3][3] = cube[3][1];\n\n  memcpy(cube,next,sizeof(char) * 6 * 9);\n}\n\nvoid opeB(char cube[6][9]){\n  char next[6][9];\n  memcpy(next,cube,sizeof(char) * 6 * 9);\n\n  //white\n  next[2][7] = cube[2][6];\n  next[3][7] = cube[2][7];\n  next[3][6] = cube[3][7];\n  next[2][6] = cube[3][6];\n\n  //red\n  next[3][0] = cube[0][2];\n  next[2][0] = cube[0][3];\n\n  //green\n  next[5][2] = cube[2][0];\n  next[5][3] = cube[3][0];\n\n  //orange\n  next[3][5] = cube[5][2];\n  next[2][5] = cube[5][3];\n\n  //blue\n  next[0][2] = cube[2][5];\n  next[0][3] = cube[3][5];\n\n  memcpy(cube,next,sizeof(char) * 6 * 9);\n}\n\nvoid disp(char cube[6][9]){\n  for(int y=0;y<6;y++){\n    for(int x=0;x<8;x++){\n      printf(\"%c\",cube[y][x]);\n    }\n    printf(\"\\n\");\n  }\n}\n\nint main(){\n\n  char cube[][9] = {\n    \"..rr....\",\n    \"..rr....\",\n    \"ggyybbww\",\n    \"ggyybbww\",\n    \"..oo....\",\n    \"..oo....\"\n  };\n\n  string command;\n  while(cin >> command){\n    for(int i=0;i<command.size();i++){\n      if(command[i] == 'U'){\n        opeU(cube);\n      }\n      else if(command[i] == 'F'){\n        opeF(cube);\n      }\n      else if(command[i] == 'R'){\n        opeR(cube);\n      }\n      else if(command[i] == 'D'){\n        opeD(cube);\n      }\n      else if(command[i] == 'B'){\n        opeB(cube);\n      }\n      else if(command[i] == 'L'){\n        opeL(cube);\n      }\n    }\n    disp(cube);\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\nusing namespace std;\n \nstring cube[6] = {\"..rr....\",\n                  \"..rr....\",\n                  \"ggyybbww\",\n                  \"ggyybbww\",\n                  \"..oo....\",\n                  \"..oo....\"};\n \n \n \n \n \nvoid U(){\n \n \n   for(int i = 0; i < 2; i++){\n    char tmp = cube[2][0];\n    cube[2][0] = cube[2][1];\n    cube[2][1] = cube[2][2];\n    cube[2][2] = cube[2][3];\n    cube[2][3] = cube[2][4];\n    cube[2][4] = cube[2][5];\n    cube[2][5] = cube[2][6];\n    cube[2][6] = cube[2][7];\n    cube[2][7] = tmp;\n   }\n \n \n    char tmp = cube[0][2];\n    cube[0][2] = cube[1][2];\n    cube[1][2] = cube[1][3];\n    cube[1][3] = cube[0][3];\n    cube[0][3] = tmp;\n}\n \nvoid F(){\n \n  for(int i = 0; i < 2; i++){\n  char tmp = cube[1][2];\n  cube[1][2] = cube[2][1];\n  cube[2][1] = cube[3][1];\n  cube[3][1] = cube[4][2];\n  cube[4][2] = cube[4][3];\n  cube[4][3] = cube[3][4];\n  cube[3][4] = cube[2][4];\n  cube[2][4] = cube[1][3];\n  cube[1][3] = tmp;\n  }\n \n  char tmp = cube[2][2];\n  cube[2][2] = cube[3][2];\n  cube[3][2] = cube[3][3];\n  cube[3][3] = cube[2][3];\n  cube[2][3] = tmp;\n \n}\n \nvoid R(){\n \n  for(int i = 0; i < 2; i++){\n   char tmp = cube[0][3];\n   cube[0][3] = cube[1][3];\n   cube[1][3] = cube[2][3];\n   cube[2][3] = cube[3][3];\n   cube[3][3] = cube[4][3];\n   cube[4][3] = cube[5][3];\n   cube[5][3] = cube[3][6];\n   cube[3][6] = cube[2][6];\n   cube[2][6] = tmp;\n  }\n \n   char tmp = cube[2][4];\n   cube[2][4] = cube[3][4];\n   cube[3][4] = cube[3][5];\n   cube[3][5] = cube[2][5];\n   cube[2][5] = tmp;\n}\n \nvoid D(){\n \n  for(int i = 0; i < 2; i++){\n  char tmp = cube[3][7];\n  cube[3][7] = cube[3][6];\n  cube[3][6] = cube[3][5];\n  cube[3][5] = cube[3][4];\n  cube[3][4] = cube[3][3];\n  cube[3][3] = cube[3][2];\n  cube[3][2] = cube[3][1];\n  cube[3][1] = cube[3][0];\n  cube[3][0] = tmp;\n  }\n \n  char tmp = cube[4][2];\n  cube[4][2] = cube[5][2];\n  cube[5][2] = cube[5][3];\n  cube[5][3] = cube[4][3];\n  cube[4][3] = tmp;\n}\n \nvoid B(){\n \n  for(int i = 0; i < 2; i++){\n \n  char tmp = cube[0][2];\n  cube[0][2] = cube[0][3];\n  cube[0][3] = cube[2][5];\n  cube[2][5] = cube[3][5];\n  cube[3][5] = cube[5][3];\n  cube[5][3] = cube[5][2];\n  cube[5][2] = cube[3][0];\n  cube[3][0] = cube[2][0];\n  cube[2][0] = tmp;\n \n  }\n \n  char tmp = cube[2][6];\n  cube[2][6] = cube[3][6];\n  cube[3][6] = cube[3][7];\n  cube[3][7] = cube[2][7];\n  cube[2][7] = tmp;\n \n \n}\n \nvoid L(){\n \n \n  for(int i = 0; i < 2; i++){\n  char tmp = cube[0][2];\n  cube[0][2] = cube[2][7];\n  cube[2][7] = cube[3][7];\n  cube[3][7] = cube[5][2];\n  cube[5][2] = cube[4][2];\n  cube[4][2] = cube[3][2];\n  cube[3][2] = cube[2][2];\n  cube[2][2] = cube[1][2];\n  cube[1][2] = tmp;\n \n  }\n \n \n  char tmp = cube[2][0];\n  cube[2][0] = cube[3][0];\n  cube[3][0] = cube[3][1];\n  cube[3][1] = cube[2][1];\n  cube[2][1] = tmp;\n \n}\n \nvoid print(){\n  for(int i = 0; i < 6; i++)\n      cout << cube[i] << endl;\n}\n \nint main() {\n  string s;\n  cin >> s;\n \n  for(int i = 0; i < s.length(); i++){\n    if(s[i] == 'U') U();\n    if(s[i] == 'F') F();\n    if(s[i] == 'R') R();\n    if(s[i] == 'D') D();\n    if(s[i] == 'B') B();\n    if(s[i] == 'L') L();\n \n  }\n \n  print();\n \n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\nusing namespace std;\n\nstring str;\nstring ans[6];\n\nchar c[6] = {'U','F','R','D','B','L'};\n\nint v[6][48] = {{\n     0,  1, 10,  2,  4,  5,  6,  7,\n     8,  9, 11,  3, 12, 13, 14, 15,\n    18, 19, 20, 21, 22, 23, 16, 17,\n    24, 25, 26, 27, 28, 29, 30, 31,\n    32, 33, 34, 35, 36, 37, 38, 39,\n    40, 41, 42, 43, 44, 45, 46, 47\n  },{\n     0,  1,  2,  3,  4,  5,  6,  7,\n     8,  9, 25, 17, 12, 13, 14, 15,\n    16, 34, 26, 18, 10, 21, 22, 23,\n    24, 35, 27, 19, 11, 29, 30, 31,\n    32, 33, 28, 20, 36, 37, 38, 39,\n    40, 41, 42, 43, 44, 45, 46, 47\n  },{\n     0,  1,  2, 19,  4,  5,  6,  7,\n     8,  9, 10, 27, 12, 13, 14, 15,\n    16, 17, 18, 35, 28, 20, 11, 23,\n    24, 25, 26, 43, 29, 21,  3, 31,\n    32, 33, 34, 30, 36, 37, 38, 39,\n    40, 41, 42, 22, 44, 45, 46, 47\n  },{\n     0,  1,  2,  3,  4,  5,  6,  7,\n     8,  9, 10, 11, 12, 13, 14, 15,\n    16, 17, 18, 19, 20, 21, 22, 23,\n    30, 31, 24, 25, 26, 27, 28, 29,\n    32, 33, 42, 34, 36, 37, 38, 39,\n    40, 41, 43, 35, 44, 45, 46, 47\n  },{\n     0,  1, 21, 29,  4,  5,  6,  7,\n     8,  9, 10, 11, 12, 13, 14, 15,\n     3, 17, 18, 19, 20, 43, 30, 22,\n     2, 25, 26, 27, 28, 42, 31, 23,\n    32, 33, 34, 35, 36, 37, 38, 39,\n    40, 41, 16, 24, 44, 45, 46, 47\n  },{\n     0,  1, 31,  3,  4,  5,  6,  7,\n     8,  9, 23, 11, 12, 13, 14, 15,\n    24, 16,  2, 19, 20, 21, 22, 42,\n    25, 17, 10, 27, 28, 29, 30, 34,\n    32, 33, 18, 35, 36, 37, 38, 39,\n    40, 41, 26, 43, 44, 45, 46, 47\n  }\n};\n\nvoid solve(){\n  for(int i=0;i<str.size();i++){\n    for(int j=0;j<6;j++){\n      if(str[i] == c[j]){\n        char tmp[6][8];\n        for(int k=0;k<48;k++) tmp[k/8][k%8] = ans[v[j][k]/8][v[j][k]%8];\n        for(int k=0;k<48;k++) ans[k/8][k%8] = tmp[k/8][k%8];\n        break;\n      }\n    }\n  }\n}\n\nint main(){\n  while(cin >> str){\n    for(int i=0;i<2;i++) ans[i] = \"..rr....\";\n    for(int i=2;i<4;i++) ans[i] = \"ggyybbww\";\n    for(int i=4;i<6;i++) ans[i] = \"..oo....\";\n    solve();\n    for(int i=0;i<6;i++) cout << ans[i] << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n\n#define rep(i,n) for(int i=0;i<(n);i++)\n\nusing namespace std;\n\nvoid rot(char &a,char &b,char &c,char &d){\n\tchar t;\n\tt=a;\n\ta=b;\n\tb=c;\n\tc=d;\n\td=t;\n}\n\nint main(){\n\tchar net[6][9]={\n\t\t\"..rr....\",\n\t\t\"..rr....\",\n\t\t\"ggyybbww\",\n\t\t\"ggyybbww\",\n\t\t\"..oo....\",\n\t\t\"..oo....\"\n\t};\n\n\tfor(char c;~(c=getchar());){\n\t\tswitch(c){\n\t\t\tcase 'U':\n\t\t\t\trot(net[0][2],net[1][2],net[1][3],net[0][3]);\n\t\t\t\trot(net[2][0],net[2][2],net[2][4],net[2][6]);\n\t\t\t\trot(net[2][1],net[2][3],net[2][5],net[2][7]);\n\t\t\t\tbreak;\n\t\t\tcase 'F':\n\t\t\t\trot(net[2][2],net[3][2],net[3][3],net[2][3]);\n\t\t\t\trot(net[2][4],net[1][2],net[3][1],net[4][3]);\n\t\t\t\trot(net[3][4],net[1][3],net[2][1],net[4][2]);\n\t\t\t\tbreak;\n\t\t\tcase 'R':\n\t\t\t\trot(net[2][4],net[3][4],net[3][5],net[2][5]);\n\t\t\t\trot(net[3][3],net[5][3],net[2][6],net[1][3]);\n\t\t\t\trot(net[2][3],net[4][3],net[3][6],net[0][3]);\n\t\t\t\tbreak;\n\t\t\tcase 'D':\n\t\t\t\trot(net[4][2],net[5][2],net[5][3],net[4][3]);\n\t\t\t\trot(net[3][6],net[3][4],net[3][2],net[3][0]);\n\t\t\t\trot(net[3][7],net[3][5],net[3][3],net[3][1]);\n\t\t\t\tbreak;\n\t\t\tcase 'B':\n\t\t\t\trot(net[2][6],net[3][6],net[3][7],net[2][7]);\n\t\t\t\trot(net[2][5],net[5][3],net[3][0],net[0][2]);\n\t\t\t\trot(net[3][5],net[5][2],net[2][0],net[0][3]);\n\t\t\t\tbreak;\n\t\t\tcase 'L':\n\t\t\t\trot(net[2][0],net[3][0],net[3][1],net[2][1]);\n\t\t\t\trot(net[2][2],net[0][2],net[3][7],net[4][2]);\n\t\t\t\trot(net[3][2],net[1][2],net[2][7],net[5][2]);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\trep(i,6) puts(net[i]);\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint r[6][3][4] =\n  {\n    {\n      {3,2,10,11},\n      {21,23,17,19},\n      {20,22,16,18}\n    },\n    {\n      {19,18,26,27},\n      {20,10,25,35},\n      {28,11,17,34}\n    },\n    {\n      {21,20,28,29},\n      {22,11,27,43},\n      {30,3,19,35}\n    },\n    {\n      {35,34,42,43},\n      {28,26,24,30},\n      {29,27,25,31}\n    },\n    {\n      {23,22,30,31},\n      {16,3,29,42},\n      {24,2,21,43}\n    },\n    {\n      {17,16,24,25},\n      {18,2,31,34},\n      {26,10,23,42}\n    }\n  };\n\nint c[128];\nconst int H = 6;\nconst int W = 8;\n\nint main() {\n  c['U'] = 0;\n  c['F'] = 1;\n  c['R'] = 2;\n  c['D'] = 3;\n  c['B'] = 4;\n  c['L'] = 5;\n  string s;\n  char G[H][W+1] = {\n    \"..rr....\",\n    \"..rr....\",\n    \"ggyybbww\",\n    \"ggyybbww\",\n    \"..oo....\",\n    \"..oo....\"\n  };\n  cin >> s;\n  for(int i = 0; i < s.size(); ++i) {\n    int m = c[s[i]];\n    for(int j = 0; j < 3; ++j) {\n      int pi = r[m][j][0] / W;\n      int pj = r[m][j][0] % W;\n      char tmp = G[pi][pj];\n      for(int k = 1; k < 4; ++k) {\n        int ai = r[m][j][k] / W;\n        int aj = r[m][j][k] % W;\n        G[pi][pj] = G[ai][aj];\n        pi = ai;\n        pj = aj;\n      }\n      G[pi][pj] = tmp;\n    }\n  }\n\n  for(int i = 0; i < H; ++i) {\n    cout << G[i] << endl;\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\nstring s[6];\nvoid u(){\n  char p;p=s[0][2];s[0][2]=s[1][2];s[1][2]=s[1][3];s[1][3]=s[0][3];s[0][3]=p;\n  char c[2];\n  c[0]=s[2][0],c[1]=s[2][1];\n  s[2][0]=s[2][2],s[2][1]=s[2][3];\n  s[2][2]=s[2][4],s[2][3]=s[2][5];\n  s[2][4]=s[2][6],s[2][5]=s[2][7];\n  s[2][6]=c[0],s[2][7]=c[1];\n}\nvoid f(){\n  char p;p=s[2][2];s[2][2]=s[3][2];s[3][2]=s[3][3];s[3][3]=s[2][3];s[2][3]=p;\n  char c[2];\n  c[0]=s[1][2],c[1]=s[1][3];\n  s[1][2]=s[3][1],s[1][3]=s[2][1];\n  s[2][1]=s[4][2],s[3][1]=s[4][3];\n  s[4][2]=s[3][4],s[4][3]=s[2][4];\n  s[3][4]=c[1],s[2][4]=c[0];\n}\nvoid r(){\n  char p;p=s[2][4];s[2][4]=s[3][4];s[3][4]=s[3][5];s[3][5]=s[2][5];s[2][5]=p;\n  char c[2];\n  c[0]=s[3][6],c[1]=s[2][6];\n  s[2][6]=s[1][3],s[3][6]=s[0][3];\n  s[0][3]=s[2][3],s[1][3]=s[3][3];\n  s[3][3]=s[5][3],s[2][3]=s[4][3];\n  s[4][3]=c[0],s[5][3]=c[1];\n}\nvoid d(){\n  char p;p=s[4][2];s[4][2]=s[5][2];s[5][2]=s[5][3];s[5][3]=s[4][3];s[4][3]=p;\n  char c[2];\n  c[0]=s[3][0],c[1]=s[3][1];\n  s[3][0]=s[3][6],s[3][1]=s[3][7];\n  s[3][6]=s[3][4],s[3][7]=s[3][5];\n  s[3][4]=s[3][2],s[3][5]=s[3][3];\n  s[3][2]=c[0],s[3][3]=c[1];\n}\nvoid b(){\n  char p;p=s[2][6];s[2][6]=s[3][6];s[3][6]=s[3][7];s[3][7]=s[2][7];s[2][7]=p;\n  char c[2];\n  c[0]=s[0][2],c[1]=s[0][3];\n  s[0][2]=s[2][5],s[0][3]=s[3][5];\n  s[2][5]=s[5][3],s[3][5]=s[5][2];\n  s[5][3]=s[3][0],s[5][2]=s[2][0];\n  s[3][0]=c[0],s[2][0]=c[1];\n}\nvoid l(){\n  char p;p=s[2][0];s[2][0]=s[3][0];s[3][0]=s[3][1];s[3][1]=s[2][1];s[2][1]=p;\n  char c[2];\n  c[0]=s[0][2],c[1]=s[1][2];\n  s[0][2]=s[3][7],s[1][2]=s[2][7];\n  s[3][7]=s[4][2],s[2][7]=s[5][2];\n  s[4][2]=s[2][2],s[5][2]=s[3][2];\n  s[2][2]=c[0],s[3][2]=c[1];\n}\n\nint main(){\n  s[0]=\"..rr....\";\n  s[1]=\"..rr....\";\n  s[2]=\"ggyybbww\";\n  s[3]=\"ggyybbww\";\n  s[4]=\"..oo....\";\n  s[5]=\"..oo....\";\n  string t;\n  cin>>t;\n  for(int i=0;i<t.size();i++){\n    if(t[i]=='U')u();\n    if(t[i]=='F')f();\n    if(t[i]=='R')r();\n    if(t[i]=='D')d();\n    if(t[i]=='B')b();\n    if(t[i]=='L')l();\n  }\n  for(int i=0;i<6;i++)\n    cout<<s[i]<<endl;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<string>\n\nusing namespace std;\n\nint main(void){\n\n\tstring rubi[8];\n\tchar tmp;\n\tstring S;\n\n\trubi[0]=(\"..rr......\");\n\trubi[1]=(\"..rr......\");\n\trubi[2]=(\"ggyybbww..\");\n\trubi[3]=(\"ggyybbww..\");\n\trubi[4]=(\"..oo......\");\n\trubi[5]=(\"..oo......\");\n\n\twhile(1){\n\t\tS=getchar();\n\t\tif(S==\"\\n\") break;\n\t\tif(S==\"R\"){\n\t\t\ttmp=rubi[0][3];\n\t\t\trubi[0][3]=rubi[2][3];\n\t\t\trubi[2][3]=rubi[4][3];\n\t\t\trubi[4][3]=rubi[3][6];\n\t\t\trubi[3][6]=tmp;\n\t\t\ttmp=rubi[1][3];\n\t\t\trubi[1][3]=rubi[3][3];\n\t\t\trubi[3][3]=rubi[5][3];\n\t\t\trubi[5][3]=rubi[2][6];\n\t\t\trubi[2][6]=tmp;\n\t\t\ttmp=rubi[2][4];\n\t\t\trubi[2][4]=rubi[3][4];\n\t\t\trubi[3][4]=rubi[3][5];\n\t\t\trubi[3][5]=rubi[2][5];\n\t\t\trubi[2][5]=tmp;\n\t\t}\n\t\tif(S==\"L\"){\n\t\t\ttmp=rubi[0][2];\n\t\t\trubi[0][2]=rubi[3][7];\n\t\t\trubi[3][7]=rubi[4][2];\n\t\t\trubi[4][2]=rubi[2][2];\n\t\t\trubi[2][2]=tmp;\n\t\t\ttmp=rubi[1][2];\n\t\t\trubi[1][2]=rubi[2][7];\n\t\t\trubi[2][7]=rubi[5][2];\n\t\t\trubi[5][2]=rubi[3][2];\n\t\t\trubi[3][2]=tmp;\n\t\t\ttmp=rubi[3][1];\n\t\t\trubi[3][1]=rubi[2][1];\n\t\t\trubi[2][1]=rubi[2][0];\n\t\t\trubi[2][0]=rubi[3][0];\n\t\t\trubi[3][0]=tmp;\n\t\t}\n\t\tif(S==\"U\"){\n\t\t\ttmp=rubi[2][0];\n\t\t\trubi[2][0]=rubi[2][2];\n\t\t\trubi[2][2]=rubi[2][4];\n\t\t\trubi[2][4]=rubi[2][6];\n\t\t\trubi[2][6]=tmp;\n\t\t\ttmp=rubi[2][1];\n\t\t\trubi[2][1]=rubi[2][3];\n\t\t\trubi[2][3]=rubi[2][5];\n\t\t\trubi[2][5]=rubi[2][7];\n\t\t\trubi[2][7]=tmp;\n\t\t\ttmp=rubi[0][2];\n\t\t\trubi[0][2]=rubi[1][2];\n\t\t\trubi[1][2]=rubi[1][3];\n\t\t\trubi[1][3]=rubi[0][3];\n\t\t\trubi[0][3]=tmp;\n\t\t}\n\t\tif(S==\"D\"){\n\t\t\ttmp=rubi[3][0];\n\t\t\trubi[3][0]=rubi[3][6];\n\t\t\trubi[3][6]=rubi[3][4];\n\t\t\trubi[3][4]=rubi[3][2];\n\t\t\trubi[3][2]=tmp;\n\t\t\ttmp=rubi[3][1];\n\t\t\trubi[3][1]=rubi[3][7];\n\t\t\trubi[3][7]=rubi[3][5];\n\t\t\trubi[3][5]=rubi[3][3];\n\t\t\trubi[3][3]=tmp;\n\t\t\ttmp=rubi[4][2];\n\t\t\trubi[4][2]=rubi[5][2];\n\t\t\trubi[5][2]=rubi[5][3];\n\t\t\trubi[5][3]=rubi[4][3];\n\t\t\trubi[4][3]=tmp;\n\t\t}\n\t\tif(S==\"F\"){\n\t\t\ttmp=rubi[1][2];\n\t\t\trubi[1][2]=rubi[3][1];\n\t\t\trubi[3][1]=rubi[4][3];\n\t\t\trubi[4][3]=rubi[2][4];\n\t\t\trubi[2][4]=tmp;\n\t\t\ttmp=rubi[1][3];\n\t\t\trubi[1][3]=rubi[2][1];\n\t\t\trubi[2][1]=rubi[4][2];\n\t\t\trubi[4][2]=rubi[3][4];\n\t\t\trubi[3][4]=tmp;\t\n\t\t\ttmp=rubi[2][3];\n\t\t\trubi[2][3]=rubi[2][2];\n\t\t\trubi[2][2]=rubi[3][2];\n\t\t\trubi[3][2]=rubi[3][3];\n\t\t\trubi[3][3]=tmp;\n\t\t}\n\t\tif(S==\"B\"){\n\t\t\ttmp=rubi[0][2];\n\t\t\trubi[0][2]=rubi[2][5];\n\t\t\trubi[2][5]=rubi[5][3];\n\t\t\trubi[5][3]=rubi[3][0];\n\t\t\trubi[3][0]=tmp;\n\t\t\ttmp=rubi[0][3];\n\t\t\trubi[0][3]=rubi[3][5];\n\t\t\trubi[3][5]=rubi[5][2];\n\t\t\trubi[5][2]=rubi[2][0];\n\t\t\trubi[2][0]=tmp;\n\t\t\ttmp=rubi[2][6];\n\t\t\trubi[2][6]=rubi[3][6];\n\t\t\trubi[3][6]=rubi[3][7];\n\t\t\trubi[3][7]=rubi[2][7];\n\t\t\trubi[2][7]=tmp;\n\t\t}\n\t}\n\n\tfor(int i=0;i<=5;i++){\n\t\tfor(int j=0;j<=7;j++){\n\t\t\tcout<<rubi[i][j];\n\t\t}\n\t\tcout<<endl;\n\t}\n\n}"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#include<algorithm>\nusing namespace std;\nchar str[6][10]={\"..rr....\",\"..rr....\",\"ggyybbww\",\"ggyybbww\",\"..oo....\",\"..oo....\"};\nchar com[110];\nchar tmp[6][10];\nint main(){\n\tscanf(\"%s\",com);\n\tfor(int i=0;com[i];i++){\n\t\tfor(int j=0;j<6;j++)for(int k=0;k<10;k++)tmp[j][k]=str[j][k];\n\t\tswitch(com[i]){\n\t\t\tcase 'U':\n\t\t\t\ttmp[0][2]=str[1][2];\n\t\t\t\ttmp[0][3]=str[0][2];\n\t\t\t\ttmp[1][3]=str[0][3];\n\t\t\t\ttmp[1][2]=str[1][3];\n\t\t\t\ttmp[2][0]=str[2][2];\n\t\t\t\ttmp[2][1]=str[2][3];\n\t\t\t\ttmp[2][2]=str[2][4];\n\t\t\t\ttmp[2][3]=str[2][5];\n\t\t\t\ttmp[2][4]=str[2][6];\n\t\t\t\ttmp[2][5]=str[2][7];\n\t\t\t\ttmp[2][6]=str[2][0];\n\t\t\t\ttmp[2][7]=str[2][1];\n\t\t\t\tbreak;\n\t\t\tcase 'R':\n\t\t\t\ttmp[2][4]=str[3][4];\n\t\t\t\ttmp[2][5]=str[2][4];\n\t\t\t\ttmp[3][5]=str[2][5];\n\t\t\t\ttmp[3][4]=str[3][5];\n\t\t\t\ttmp[0][3]=str[2][3];\n\t\t\t\ttmp[1][3]=str[3][3];\n\t\t\t\ttmp[2][3]=str[4][3];\n\t\t\t\ttmp[3][3]=str[5][3];\n\t\t\t\ttmp[4][3]=str[3][6];\n\t\t\t\ttmp[5][3]=str[2][6];\n\t\t\t\ttmp[2][6]=str[1][3];\n\t\t\t\ttmp[3][6]=str[0][3];\n\t\t\t\tbreak;\n\t\t\tcase 'D':\n\t\t\t\ttmp[4][2]=str[5][2];\n\t\t\t\ttmp[4][3]=str[4][2];\n\t\t\t\ttmp[5][3]=str[4][3];\n\t\t\t\ttmp[5][2]=str[5][3];\n\t\t\t\ttmp[3][0]=str[3][6];\n\t\t\t\ttmp[3][1]=str[3][7];\n\t\t\t\ttmp[3][2]=str[3][0];\n\t\t\t\ttmp[3][3]=str[3][1];\n\t\t\t\ttmp[3][4]=str[3][2];\n\t\t\t\ttmp[3][5]=str[3][3];\n\t\t\t\ttmp[3][6]=str[3][4];\n\t\t\t\ttmp[3][7]=str[3][5];\n\t\t\t\tbreak;\n\t\t\tcase 'L':\n\t\t\t\ttmp[2][0]=str[3][0];\n\t\t\t\ttmp[2][1]=str[2][0];\n\t\t\t\ttmp[3][1]=str[2][1];\n\t\t\t\ttmp[3][0]=str[3][1];\n\t\t\t\ttmp[0][2]=str[3][7];\n\t\t\t\ttmp[1][2]=str[2][7];\n\t\t\t\ttmp[2][2]=str[0][2];\n\t\t\t\ttmp[3][2]=str[1][2];\n\t\t\t\ttmp[4][2]=str[2][2];\n\t\t\t\ttmp[5][2]=str[3][2];\n\t\t\t\ttmp[2][7]=str[5][2];\n\t\t\t\ttmp[3][7]=str[4][2];\n\t\t\t\tbreak;\n\t\t\tcase 'F':\n\t\t\t\ttmp[2][2]=str[3][2];\n\t\t\t\ttmp[2][3]=str[2][2];\n\t\t\t\ttmp[3][3]=str[2][3];\n\t\t\t\ttmp[3][2]=str[3][3];\n\t\t\t\ttmp[1][2]=str[3][1];\n\t\t\t\ttmp[1][3]=str[2][1];\n\t\t\t\ttmp[2][4]=str[1][2];\n\t\t\t\ttmp[3][4]=str[1][3];\n\t\t\t\ttmp[4][3]=str[2][4];\n\t\t\t\ttmp[4][2]=str[3][4];\n\t\t\t\ttmp[3][1]=str[4][3];\n\t\t\t\ttmp[2][1]=str[4][2];\n\t\t\t\tbreak;\n\t\t\tcase 'B':\n\t\t\t\ttmp[2][6]=str[3][6];\n\t\t\t\ttmp[2][7]=str[2][6];\n\t\t\t\ttmp[3][7]=str[2][7];\n\t\t\t\ttmp[3][6]=str[3][7];\n\t\t\t\ttmp[0][3]=str[3][5];\n\t\t\t\ttmp[0][2]=str[2][5];\n\t\t\t\ttmp[2][0]=str[0][3];\n\t\t\t\ttmp[3][0]=str[0][2];\n\t\t\t\ttmp[5][2]=str[2][0];\n\t\t\t\ttmp[5][3]=str[3][0];\n\t\t\t\ttmp[3][5]=str[5][2];\n\t\t\t\ttmp[2][5]=str[5][3];\n\t\t\t\tbreak;\n\t\t}\n\t\tfor(int j=0;j<6;j++)for(int k=0;k<10;k++)str[j][k]=tmp[j][k];\n\t}\n\tfor(int i=0;i<6;i++)printf(\"%s\\n\",str[i]);\n}"
  },
  {
    "language": "C++",
    "code": "#include <vector>\n#include <iostream>\n#include <set>\n#include <cstdio>\n#include <queue>\n#include <cstdio>\n#include <cstdlib>\n#include <cassert>\n#include <ctime>\n#include <algorithm>\n#include <algorithm>\n#include <limits>\n#include <map>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int, int> P;\nint d[6][8][2] = {\n{{2, 0}, {2, 1}, {2, 2}, {2, 3}, {2, 4}, {2, 5}, {2, 6}, {2, 7}},\n{{2, 1}, {3, 1}, {4, 2}, {4, 3}, {3, 4}, {2, 4}, {1, 3}, {1, 2}},\n{{2, 3}, {3, 3}, {4, 3}, {5, 3}, {3, 6}, {2, 6}, {0, 3}, {1, 3}},\n{{3, 7}, {3, 6}, {3, 5}, {3, 4}, {3, 3}, {3, 2}, {3, 1}, {3, 0}},\n{{2, 5}, {3, 5}, {5, 3}, {5, 2}, {3, 0}, {2, 0}, {0, 2}, {0, 3}},\n{{5, 2}, {4, 2}, {3, 2}, {2, 2}, {1, 2}, {0, 2}, {2, 7}, {3, 7}},\n};\nint d2[6][2] = {\n{0, 2}, {2, 2}, {2, 4}, {4, 2}, {2, 6}, {2, 0}\n};\nstring cmd = \"UFRDBL\";\nchar data[6][9] = {\n\"..rr....\",\n\"..rr....\",\n\"ggyybbww\",\n\"ggyybbww\",\n\"..oo....\",\n\"..oo....\",\n};\nchar datab[6][9];\nint main() {\n    string s;\n    cin >> s;\n    for (char c: s) {\n        int t = 0;\n        for (int i = 0; i < cmd.size(); i++) {\n            if (c == cmd[i]) t = i;\n        }\n        copy_n(data[0], 54, datab[0]);\n        for (int i = 0; i < 8; i++) {\n            int x1 = d[t][i][0], y1 = d[t][i][1];\n            int x2 = d[t][(i+2)%8][0], y2 = d[t][(i+2)%8][1];\n            datab[x1][y1] = data[x2][y2];\n        }\n        int x = d2[t][0], y = d2[t][1];\n        int dd[4][2] = {{x, y}, {x+1, y}, {x+1, y+1}, {x, y+1}};\n        for (int i = 0; i < 4; i++) {\n            int x1 = dd[i][0], y1 = dd[i][1];\n            int x2 = dd[(i+1)%4][0], y2 = dd[(i+1)%4][1];\n            datab[x1][y1] = data[x2][y2];\n        }\n        copy_n(datab[0], 54, data[0]);\n    }\n    for (int i = 0; i < 6; i++) {\n        printf(\"%s\\n\", data[i]);\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\n#include<cassert>\n\nusing namespace std;\ntypedef vector<char> vc;\ntypedef vector<vc> vvc;\n\n/*\nrow:6 column:8\nvector<string> G;\nG.resize(6);\nG[0] = \"\";\nG[1] = \"\";\nG[2] = \"\";\nG[3] = \"\";\nG[4] = \"\";\nG[5] = \"\";\nclass RC2x2 RC(G);\n*/\nclass RC2x2\n{\npublic:\n  vector<string> G;\n  \n  RC2x2(vector<string> G2){\n    G.resize(G2.size());\n    for(int i=0;i<G2.size();i++)\n      G[i] = G2[i]; \n  }\n  \n  void S(int x,int y)\n  {\n    char c = G[x][y];\n    G[x][y] = G[x+1][y];\n    G[x+1][y] = G[x+1][y+1];\n    G[x+1][y+1] = G[x][y+1];\n    G[x][y+1] = c;\n  }\n  \n  void U()\n  {\n  S(0,2);\n  char c;\n  for(int i=0;i<2;i++)\n    {\n      c = G[2][0];\n      G[2][0] = G[2][1];\n      G[2][1] = G[2][2];\n      G[2][2] = G[2][3];      \n      G[2][3] = G[2][4];\n      G[2][4] = G[2][5];\n      G[2][5] = G[2][6];\n      G[2][6] = G[2][7];\n      G[2][7] = c;\n    }\n  }\n  \n  \n  void D()\n  { \n    S(4,2);\n    char c;\n    for(int i=0;i<2;i++)\n      {\n\tc = G[3][7];\n\tG[3][7] = G[3][6];\n\tG[3][6] = G[3][5];\n\tG[3][5] = G[3][4];\n\tG[3][4] = G[3][3];\n\tG[3][3] = G[3][2];\n\tG[3][2] = G[3][1];\n\tG[3][1] = G[3][0];\n\tG[3][0] = c;\n      }\n  }\n  \n  \n  void L()\n  {\n    S(2,0);\n    char c;\n    for(int i=0;i<2;i++)\n      {\n\tc = G[0][2];\n\tG[0][2] = G[2][7];\n\tG[2][7] = G[3][7];\n\tG[3][7] = G[5][2];\n\tG[5][2] = G[4][2];\n\tG[4][2] = G[3][2];\n\tG[3][2] = G[2][2]; \n\tG[2][2] = G[1][2];\n\tG[1][2] = c;\n      }\n  }\n  \n  \n  void R()\n  {\n    S(2,4);\n    char c;\n    for(int i=0;i<2;i++)\n      {\n\tc = G[5][3];\n\tG[5][3] = G[3][6];\n\tG[3][6] = G[2][6];\n\tG[2][6] = G[0][3];\n\tG[0][3] = G[1][3];\n\tG[1][3] = G[2][3];\n\tG[2][3] = G[3][3];\n\tG[3][3] = G[4][3];\n\tG[4][3] = c;\n      }\n  }\n  \n  \n  void F()\n  {\n    S(2,2);\n    char c;\n    for(int i=0;i<2;i++)\n      {\n\tc = G[1][2];\n\tG[1][2] = G[2][1];\n\tG[2][1] = G[3][1];\n\tG[3][1] = G[4][2];\n\tG[4][2] = G[4][3];     \n\tG[4][3] = G[3][4];\n\tG[3][4] = G[2][4];\n\tG[2][4] = G[1][3];\n\tG[1][3] = c; \n      }\n  }\n  \n  void B()\n  {\n    S(2,6);\n    char c;\n    for(int i=0;i<2;i++)\n      {\n\tc = G[2][5];\n\tG[2][5] = G[3][5];\n\tG[3][5] = G[5][3];\n\tG[5][3] = G[5][2];\n\tG[5][2] = G[3][0];\n\tG[3][0] = G[2][0];\n\tG[2][0] = G[0][2];\n\tG[0][2] = G[0][3];\n\tG[0][3] = c;\n    }\n  }\n  \n  void print()\n  {\n    for(int i=0;i<6;i++)\n      {\n\tfor(int j=0;j<8;j++)\n\t  {\n\t    cout << G[i][j];\n\t  }\n\tcout << endl;\n      }\n  }\n  \n};\n\nint main()\n{\n  vector<string> G;\n  G.resize(6);\n  G[0] = \"..rr....\";\n  G[1] = \"..rr....\";\n  G[2] = \"ggyybbww\";\n  G[3] = \"ggyybbww\";\n  G[4] = \"..oo....\";\n  G[5] = \"..oo....\";\n  class RC2x2 RC(G);\n\n  string s;\n  cin >> s;\n  for(int i=0;i<s.size();i++)\n    {\n      if(s[i] == 'U')\n\tRC.U();\n      else if(s[i] ==  'D')\n\tRC.D();\n      else if(s[i] == 'L')\n\tRC.L();\n      else if(s[i] == 'R')\n\tRC.R();\n      else if(s[i] == 'F')\n\tRC.F();\n      else if(s[i] == 'B')\n\tRC.B();\n      else \n\tassert(false);\n    }\n  RC.print();\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n#define int long long\nstruct dat{\n  char col[4];\n};\nstruct dat2{\ndat F,B,U,D,L,R;\n};\n\ndat2 cube;\ndat F,B,U,D,L,R;\n\ndat write(dat A,int a1,int a2,dat B,int b1,int b2){\n  A.col[a1] = B.col[b1];\n  A.col[a2] = B.col[b2];\n  return A;\n}\n\nvoid cp(){\n  F = cube.F;\n  B = cube.B;\n  U = cube.U;\n  D = cube.D;\n  L = cube.L;\n  R = cube.R;\n}\n\ndat rot(dat A){\n  swap(A.col[0],A.col[2]);\n  swap(A.col[2],A.col[3]);\n  swap(A.col[3],A.col[1]);\n  return A;\n}\n\nvoid Front(){\n  cp();\n  cube.F  = rot(F);\n  cube.U  = write(U,2,3,L,3,1);\n  cube.L  = write(L,3,1,D,1,0);\n  cube.D  = write(D,1,0,R,0,2);\n  cube.R  = write(R,0,2,U,2,3);\n}\n\nvoid Up(){\n  cp();\n  cube.U = rot(U);\n  cube.F = write(F,0,1,R,0,1);\n  cube.R = write(R,0,1,B,0,1);\n  cube.B = write(B,0,1,L,0,1);\n  cube.L = write(L,0,1,F,0,1);\n}\n\nvoid Down(){\n  cp();\n  cube.D = rot(D);\n  cube.F = write(F,2,3,L,2,3);\n  cube.L = write(L,2,3,B,2,3);\n  cube.B = write(B,2,3,R,2,3);\n  cube.R = write(R,2,3,F,2,3);\n  \n}\n\nvoid Left(){\n  cp();\n  cube.L=rot(L);\n  cube.U = write(U,0,2,B,3,1);\n  cube.B = write(B,3,1,D,0,2);\n  cube.D = write(D,0,2,F,0,2);\n  cube.F = write(F,0,2,U,0,2);\n}\n\nvoid Right(){\n  cp();\n  cube.R = rot(R);\n  cube.U =write(U,1,3,F,1,3);\n  cube.F =write(F,1,3,D,1,3);\n  cube.D =write(D,1,3,B,2,0);\n  cube.B =write(B,2,0,U,1,3);\n}\n\nvoid Back(){\n  cp();\n  cube.B = rot(B);\n  cube.U = write(U,0,1,R,1,3);\n  cube.R = write(R,1,3,D,3,2);\n  cube.D = write(D,3,2,L,2,0);\n  cube.L = write(L,2,0,U,0,1);\n}\n\ndat ume(char c){\n  dat a;\n  for(int i=0;i<4;i++) a.col[i] = c;\n  return a;\n}\n\nsigned main(){\n  string str;\n  cin>>str;\n\n  cube.F = ume('y');\n  cube.B = ume('w');\n  cube.L = ume('g');\n  cube.R = ume('b');\n  cube.U = ume('r');\n  cube.D = ume('o');\n  \n\n  for(int i=0;i<str.size();i++){\n    if(str[i] == 'R') Right();\n    if(str[i] == 'L') Left();\n    if(str[i] == 'U') Up();\n    if(str[i] == 'D') Down();\n    if(str[i] == 'F') Front();\n    if(str[i] == 'B') Back();\n  }\n\n  char mp[6][8];\n  memset(mp,'.',sizeof(mp));\n  \n  for(int i=0;i<4;i++){\n    mp[0+(i/2)][2+(i%2)]=cube.U.col[i];\n    mp[2+(i/2)][0+(i%2)]=cube.L.col[i];\n    mp[2+(i/2)][2+(i%2)]=cube.F.col[i];\n    mp[2+(i/2)][4+(i%2)]=cube.R.col[i];\n    mp[2+(i/2)][6+(i%2)]=cube.B.col[i];\n    mp[4+(i/2)][2+(i%2)]=cube.D.col[i];\n  }\n\n  for(int i=0;i<6;i++){\n    for(int j=0;j<8;j++)cout<<mp[i][j];\n    cout<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\nusing namespace std;\nint main(){\n  string s;\n  char cube[6][2][2];\n  for(int i=0; i<2; i++){\n    for(int j=0; j<2; j++){\n      for(int k=0; k<6; k++){\n\tif(k == 0) cube[k][i][j] = 'r';\n\tif(k == 1) cube[k][i][j] = 'g';\n\tif(k == 2) cube[k][i][j] = 'y';\n\tif(k == 3) cube[k][i][j] = 'b';\n\tif(k == 4) cube[k][i][j] = 'w';\n\tif(k == 5) cube[k][i][j] = 'o';\n      }\n    }\n  }\n  cin >>s;\n  for(int i=0; i<s.size(); i++){\n    if(s[i] == 'U'){\n      char a = cube[1][0][0],b = cube[1][1][0],c = cube[0][0][0];\n      cube[1][0][0] = cube[2][0][0];cube[1][1][0] = cube[2][1][0];\n      cube[2][0][0] = cube[3][0][0];cube[2][1][0] = cube[3][1][0];\n      cube[3][0][0] = cube[4][0][0];cube[3][1][0] = cube[4][1][0];\n      cube[4][0][0] = a;cube[4][1][0] = b;\n      cube[0][0][0] = cube[0][0][1];cube[0][0][1] = cube[0][1][1];\n      cube[0][1][1] = cube[0][1][0];cube[0][1][0] = c;\n    }\n    if(s[i] == 'F'){\n      char a = cube[0][0][1],b = cube[0][1][1],c = cube[2][0][0];\n      cube[0][0][1] = cube[1][1][1];cube[0][1][1] = cube[1][1][0];\n      cube[1][1][1] = cube[5][1][0];cube[1][1][0] = cube[5][0][0];\n      cube[5][1][0] = cube[3][0][0];cube[5][0][0] = cube[3][0][1];\n      cube[3][0][0] = a;cube[3][0][1] = b;\n      cube[2][0][0] = cube[2][0][1];cube[2][0][1] = cube[2][1][1];\n      cube[2][1][1] = cube[2][1][0];cube[2][1][0] = c;\n    }\n    if(s[i] == 'R'){\n      char a = cube[0][1][0],b = cube[0][1][1],c = cube[3][0][0];\n      cube[0][1][0] = cube[2][1][0];cube[0][1][1] = cube[2][1][1];\n      cube[2][1][0] = cube[5][1][0];cube[2][1][1] = cube[5][1][1];\n      cube[5][1][0] = cube[4][0][1];cube[5][1][1] = cube[4][0][0];\n      cube[4][0][1] = a;cube[4][0][0] = b;\n      cube[3][0][0] = cube[3][0][1];cube[3][0][1] = cube[3][1][1];\n      cube[3][1][1] = cube[3][1][0];cube[3][1][0] = c;\n    }\n    if(s[i] == 'D'){\n      char a = cube[1][0][1],b = cube[1][1][1],c = cube[5][0][0];\n      cube[1][0][1] = cube[4][0][1];cube[1][1][1] = cube[4][1][1];\n      cube[4][0][1] = cube[3][0][1];cube[4][1][1] = cube[3][1][1];\n      cube[3][0][1] = cube[2][0][1];cube[3][1][1] = cube[2][1][1];\n      cube[2][0][1] = a;cube[2][1][1] = b;\n      cube[5][0][0] = cube[5][0][1];cube[5][0][1] = cube[5][1][1];\n      cube[5][1][1] = cube[5][1][0];cube[5][1][0] = c;\n    }\n    if(s[i] == 'B'){\n      char a = cube[0][0][0],b = cube[0][1][0],c = cube[4][0][0];\n      cube[0][0][0] = cube[3][1][0];cube[0][1][0] = cube[3][1][1];\n      cube[3][1][0] = cube[5][1][1];cube[3][1][1] = cube[5][0][1];\n      cube[5][1][1] = cube[1][0][1];cube[5][0][1] = cube[1][0][0];\n      cube[1][0][1] = a;cube[1][0][0] = b;\n      cube[4][0][0] = cube[4][0][1];cube[4][0][1] = cube[4][1][1];\n      cube[4][1][1] = cube[4][1][0];cube[4][1][0] = c;\n    }\n    if(s[i] == 'L'){\n      char a = cube[0][0][0],b = cube[0][0][1],c = cube[1][0][0];\n      cube[0][0][0] = cube[4][1][1];cube[0][0][1] = cube[4][1][0];\n      cube[4][1][1] = cube[5][0][0];cube[4][1][0] = cube[5][0][1];\n      cube[5][0][0] = cube[2][0][0];cube[5][0][1] = cube[2][0][1];\n      cube[2][0][0] = a;cube[2][0][1] = b;\n      cube[1][0][0] = cube[1][0][1];cube[1][0][1] = cube[1][1][1];\n      cube[1][1][1] = cube[1][1][0];cube[1][1][0] = c;\n    }\n  }\n  cout <<\"..\"<<cube[0][0][0]<<cube[0][1][0]<<\"....\"<<endl;\n  cout <<\"..\"<<cube[0][0][1]<<cube[0][1][1]<<\"....\"<<endl;\n  for(int i=1; i<5; i++){cout <<cube[i][0][0]<<cube[i][1][0];}cout <<endl;\n  for(int i=1; i<5; i++){cout <<cube[i][0][1]<<cube[i][1][1];}cout <<endl;\n  cout <<\"..\"<<cube[5][0][0]<<cube[5][1][0]<<\"....\"<<endl;\n  cout <<\"..\"<<cube[5][0][1]<<cube[5][1][1]<<\"....\"<<endl;\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nvoid move_surface(char surface[4]) {\n    char tmp = surface[0];\n    surface[0] = surface[2];\n    surface[2] = surface[3];\n    surface[3] = surface[1];\n    surface[1] = tmp;\n}\n\nvoid move8(char *c1, char *c2, char *c3, char *c4, char *c5, char *c6, char *c7, char *c8) {\n    char tmp1 = *c7;\n    char tmp2 = *c8;\n    *c8 = *c6;\n    *c7 = *c5;\n    *c6 = *c4;\n    *c5 = *c3;\n    *c4 = *c2;\n    *c3 = *c1;\n    *c2 = tmp2;\n    *c1 = tmp1;\n}\n\nvoid rotate(char c, char cube[6][4]) {\n    switch (c) {\n        case 'L':\n            move_surface(cube[0]);\n            move8(  &cube[4][0], &cube[4][2], &cube[1][0], &cube[1][2],\n                    &cube[5][0], &cube[5][2], &cube[3][2], &cube[3][0]);\n            break;\n        case 'F':\n            move_surface(cube[1]);\n            move8(  &cube[4][2], &cube[4][3], &cube[2][0], &cube[2][2],\n                    &cube[5][1], &cube[5][0], &cube[0][3], &cube[0][1]);\n            break;\n        case 'R':\n            move_surface(cube[2]);\n            move8(  &cube[4][3], &cube[4][1], &cube[3][0], &cube[3][2],\n                    &cube[5][3], &cube[5][1], &cube[1][3], &cube[1][1]);\n            break;\n        case 'B':\n            move_surface(cube[3]);\n            move8(  &cube[4][1], &cube[4][0], &cube[0][0], &cube[0][2],\n                    &cube[5][2], &cube[5][3], &cube[2][3], &cube[2][1]);\n            break;\n        case 'U':\n            move_surface(cube[4]);\n            move8(  &cube[3][1], &cube[3][0], &cube[2][1], &cube[2][0],\n                    &cube[1][1], &cube[1][0], &cube[0][1], &cube[0][0]);\n            break;\n        case 'D':\n            move_surface(cube[5]);\n            move8(  &cube[1][2], &cube[1][3], &cube[2][2], &cube[2][3],\n                    &cube[3][2], &cube[3][3], &cube[0][2], &cube[0][3]);\n            break;\n    }\n}\n\nvoid print(char cube[6][4]) {\n    cout << \"..\" << cube[4][0] << cube[4][1] << \"....\" << endl;\n    cout << \"..\" << cube[4][2] << cube[4][3] << \"....\" << endl;\n    cout << cube[0][0] << cube[0][1] << cube[1][0] << cube[1][1];\n    cout << cube[2][0] << cube[2][1] << cube[3][0] << cube[3][1] << endl;\n    cout << cube[0][2] << cube[0][3] << cube[1][2] << cube[1][3];\n    cout << cube[2][2] << cube[2][3] << cube[3][2] << cube[3][3] << endl;\n    cout << \"..\" << cube[5][0] << cube[5][1] << \"....\" << endl;\n    cout << \"..\" << cube[5][2] << cube[5][3] << \"....\" << endl;\n}\n\nint main() {\n    string s;\n    char cube[6][4] = {\n        {'g', 'g', 'g', 'g'},\n        {'y', 'y', 'y', 'y'},\n        {'b', 'b', 'b', 'b'},\n        {'w', 'w', 'w', 'w'},\n        {'r', 'r', 'r', 'r'},\n        {'o', 'o', 'o', 'o'}\n    };\n    cin >> s;\n    for (int i=0; i<(int)s.length(); i++) {\n        rotate(s[i], cube);\n    }\n    print(cube);\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n\nusing namespace std;\n\n/*\n\t{'.', '.', 'r', 'r', '.', '.', '.', '.'},\n\t{'.', '.', 'r', 'r', '.', '.', '.', '.'},\n\t{'g', 'g', 'y', 'y', 'b', 'b', 'w', 'w', 'g', 'g'},\n\t{'g', 'g', 'y', 'y', 'b', 'b', 'w', 'w'},\n\t{'.', '.', 'o', 'o', '.', '.', '.', '.'},\n\t{'.', '.', 'o', 'o', '.', '.', '.', '.'},\n\n*/\nchar ini_cube[6][8] = {\n\t{'.', '.', 'r', 'r', '.', '.', '.', '.'},\n\t{'.', '.', 'r', 'r', '.', '.', '.', '.'},\n\t{'g', 'g', 'y', 'y', 'b', 'b', 'w', 'w'},\n\t{'g', 'g', 'y', 'y', 'b', 'b', 'w', 'w'},\n\t{'.', '.', 'o', 'o', '.', '.', '.', '.'},\n\t{'.', '.', 'o', 'o', '.', '.', '.', '.'},\n};\n\nchar cube[6][8];\nchar nxt_cube[6][8];\n\nstring s;\n\nstring Rotate(char c) {\n\tfor (int i=0; i<6; i++) for (int j=0; j<8; j++) nxt_cube[i][j] = cube[i][j];\n\t\n\tif (c=='F') {\n\t\tnxt_cube[2][2] = cube[3][2]; nxt_cube[2][3] = cube[2][2]; nxt_cube[3][3] = cube[2][3]; nxt_cube[3][2] = cube[3][3];\n\t\tnxt_cube[1][2] = cube[3][1]; nxt_cube[1][3] = cube[2][1]; nxt_cube[2][4] = cube[1][2]; nxt_cube[3][4] = cube[1][3];\n\t\tnxt_cube[4][3] = cube[2][4]; nxt_cube[4][2] = cube[3][4]; nxt_cube[2][1] = cube[4][2]; nxt_cube[3][1] = cube[4][3];\n\t}\n\tif (c=='D') {\n\t\tnxt_cube[4][2] = cube[5][2]; nxt_cube[4][3] = cube[4][2]; nxt_cube[5][3] = cube[4][3]; nxt_cube[5][2] = cube[5][3];\n\t\tnxt_cube[3][2] = cube[3][0]; nxt_cube[3][3] = cube[3][1]; nxt_cube[3][4] = cube[3][2]; nxt_cube[3][5] = cube[3][3];\n\t\tnxt_cube[3][6] = cube[3][4]; nxt_cube[3][7] = cube[3][5]; nxt_cube[3][0] = cube[3][6]; nxt_cube[3][1] = cube[3][7];\n\t}\n\tif (c=='R') {\n\t\tnxt_cube[2][4] = cube[3][4]; nxt_cube[2][5] = cube[2][4]; nxt_cube[3][5] = cube[2][5]; nxt_cube[3][4] = cube[3][5];\n\t\tnxt_cube[1][3] = cube[3][3]; nxt_cube[0][3] = cube[2][3]; nxt_cube[2][6] = cube[1][3]; nxt_cube[3][6] = cube[0][3];\n\t\tnxt_cube[4][3] = cube[3][6]; nxt_cube[5][3] = cube[2][6]; nxt_cube[2][3] = cube[4][3]; nxt_cube[3][3] = cube[5][3];\n\t}\n\tif (c=='L') {\n\t\tnxt_cube[2][0] = cube[3][0]; nxt_cube[2][1] = cube[2][0]; nxt_cube[3][1] = cube[2][1]; nxt_cube[3][0] = cube[3][1];\n\t\tnxt_cube[0][2] = cube[3][7]; nxt_cube[1][2] = cube[2][7]; nxt_cube[2][2] = cube[0][2]; nxt_cube[3][2] = cube[1][2];\n\t\tnxt_cube[5][2] = cube[3][2]; nxt_cube[4][2] = cube[2][2]; nxt_cube[2][7] = cube[5][2]; nxt_cube[3][7] = cube[4][2];\n\t}\n\tif (c=='U') {\n\t\tnxt_cube[0][2] = cube[1][2]; nxt_cube[0][3] = cube[0][2]; nxt_cube[1][3] = cube[0][3]; nxt_cube[1][2] = cube[1][3];\n\t\tnxt_cube[2][7] = cube[2][1]; nxt_cube[2][6] = cube[2][0]; nxt_cube[2][5] = cube[2][7]; nxt_cube[2][4] = cube[2][6];\n\t\tnxt_cube[2][2] = cube[2][4]; nxt_cube[2][3] = cube[2][5]; nxt_cube[2][0] = cube[2][2]; nxt_cube[2][1] = cube[2][3];\n\t}\n\tif (c=='B') {\n\t\tnxt_cube[2][6] = cube[3][6]; nxt_cube[2][7] = cube[2][6]; nxt_cube[3][7] = cube[2][7]; nxt_cube[3][6] = cube[3][7];\n\t\tnxt_cube[0][3] = cube[3][5]; nxt_cube[0][2] = cube[2][5]; nxt_cube[2][0] = cube[0][3]; nxt_cube[3][0] = cube[0][2];\n\t\tnxt_cube[5][3] = cube[3][0]; nxt_cube[5][2] = cube[2][0]; nxt_cube[2][5] = cube[5][3]; nxt_cube[3][5] = cube[5][2];\n\t}\n\t\n\tfor (int i=0; i<6; i++) for (int j=0; j<8; j++) cube[i][j] = nxt_cube[i][j];\n\t\n\treturn \"I hate harassment.\";\n}\n\nvoid print_cube() {\n\tfor (int i=0; i<6; i++) {\n\t\tfor (int j=0; j<8; j++) {\n\t\t\tcout << cube[i][j];\n\t\t}\n\t\tcout << endl;\n\t}\n}\n\nint main() {\n\tfor (int i=0; i<6; i++) for (int j=0; j<8; j++) cube[i][j] = ini_cube[i][j];\n\tcin >> s;\n\t\n\tfor (int i=0; i<(int)s.size(); i++) { Rotate(s[i]); print_cube(); cout << endl; }\n\t\n\tprint_cube();\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\nstring cube[6] = {\n\t\"..rr....\",\n\t\"..rr....\",\n\t\"ggyybbww\",\n\t\"ggyybbww\",\n\t\"..oo....\",\n\t\"..oo....\"\n};\n\nvoid g(int *a, int *b, vector<string> &tmp){\n\tfor(int i = 0; i < 8; i++) b[i] = a[i];\n\trotate(b, b+6, b+8);\n\tfor(int i = 0; i < 8; i++){\n\t\tint x2 = b[i] % 8, y2 = b[i] / 8;\n\t\tint x1 = a[i] % 8, y1 = a[i] / 8;\n\t\ttmp[y2][x2] = cube[y1][x1];\n\t}\n}\n\nvoid h(int *a, int *b, vector<string> &tmp){\n\tfor(int i = 0; i < 4; i++) b[i] = a[i];\n\trotate(b, b+3, b+4);\n\tfor(int i = 0; i < 4; i++){\n\t\tint x2 = b[i] % 8, y2 = b[i] / 8;\n\t\tint x1 = a[i] % 8, y1 = a[i] / 8;\n\t\ttmp[y2][x2] = cube[y1][x1];\n\t}\n}\n\nvoid f(char c){\n\tvector<string> tmp(6, \"........\");\n\tif( c == 'U' ){\n\t\t{\n\t\t\tint a[8] = {16,17,18,19,20,21,22,23}, b[8];\n\t\t\tg(a, b, tmp);\n\t\t}\n\t\t{\n\t\t\tint a[4] = {10,11,3,2}, b[4];\n\t\t\th(a, b, tmp);\n\t\t}\n\t}else if( c == 'F' ){\n\t\t{\n\t\t\tint a[8] = {17,25,34,35,28,20,11,10}, b[8];\n\t\t\tg(a, b, tmp);\n\t\t}\n\t\t{\n\t\t\tint a[4] = {26,27,19,18}, b[4];\n\t\t\th(a, b, tmp);\n\t\t}\n\t}else if( c == 'R' ){\n\t\t{\n\t\t\tint a[8] = {19,27,35,43,30,22,3,11}, b[8];\n\t\t\tg(a, b, tmp);\n\t\t}\n\t\t{\n\t\t\tint a[4] = {28,29,21,20}, b[4];\n\t\t\th(a, b, tmp);\n\t\t}\n\t}else if( c == 'D' ){\n\t\t{\n\t\t\tint a[8] = {31,30,29,28,27,26,25,24}, b[8];\n\t\t\tg(a, b, tmp);\n\t\t}\n\t\t{\n\t\t\tint a[4] = {42,43,35,34}, b[4];\n\t\t\th(a, b, tmp);\n\t\t}\n\t}else if( c == 'B' ){\n\t\t{\n\t\t\tint a[8] = {21,29,43,42,24,16,2,3}, b[8];\n\t\t\tg(a, b, tmp);\n\t\t}\n\t\t{\n\t\t\tint a[4] = {30,31,23,22}, b[4];\n\t\t\th(a, b, tmp);\n\t\t}\n\t}else if( c == 'L' ){\n\t\t{\n\t\t\tint a[8] = {10,2,23,31,42,34,26,18}, b[8];\n\t\t\tg(a, b, tmp);\n\t\t}\n\t\t{\n\t\t\tint a[4] = {24,25,17,16}, b[4];\n\t\t\th(a, b, tmp);\n\t\t}\n\t}\n\t\n\tfor(int y = 0; y < 6; y++){\n\t\tfor(int x = 0; x < 8; x++){\n\t\t\tif( tmp[y][x] != '.' ){\n\t\t\t\tcube[y][x] = tmp[y][x];\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main(){\n\tstring s;\n\tcin >> s;\n\tfor(int i = 0; i < s.size(); i++) f(s[i]);\n\t\n\tfor(int y = 0; y < 6; y++){\n\t\tcout << cube[y] << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\nstruct Cube{\n    \n    public:\n    \n    char data[6][8] = {\n        {'.','.','r','r','.','.','.','.'},\n        {'.','.','r','r','.','.','.','.'},\n        {'g','g','y','y','b','b','w','w'},\n        {'g','g','y','y','b','b','w','w'},\n        {'.','.','o','o','.','.','.','.'},\n        {'.','.','o','o','.','.','.','.'}\n    };\n    \n    void print(){\n        for(int i = 0;i < 6;i++){\n            for(int j = 0;j < 8;j++){\n                cout << data[i][j] << (j == 7 ? \"\\n\" : \"\");\n            }\n        }\n    }\n    \n    void up(){\n        char new_data[6][8];\n        for(int i = 0;i < 6;i++){\n            for(int j = 0;j < 8;j++){\n                new_data[i][j] = data[i][j];\n            }\n        }\n        //がんばる\n        new_data[0][2] = data[1][2];\n        new_data[0][3] = data[0][2];\n        new_data[1][2] = data[1][3];\n        new_data[1][3] = data[0][3];\n        new_data[2][0] = data[2][2];\n        new_data[2][1] = data[2][3];\n        new_data[2][2] = data[2][4];\n        new_data[2][3] = data[2][5];\n        new_data[2][4] = data[2][6];\n        new_data[2][5] = data[2][7];\n        new_data[2][6] = data[2][0];\n        new_data[2][7] = data[2][1];\n        //がんばった\n        for(int i = 0;i < 6;i++){\n            for(int j = 0;j < 8;j++){\n                data[i][j] = new_data[i][j];\n            }\n        }\n    }\n    \n    void left(){\n        char new_data[6][8];\n        for(int i = 0;i < 6;i++){\n            for(int j = 0;j < 8;j++){\n                new_data[i][j] = data[i][j];\n            }\n        }\n        //がんばる\n        new_data[0+2][2-2] = data[1+2][2-2];\n        new_data[0+2][3-2] = data[0+2][2-2];\n        new_data[1+2][2-2] = data[1+2][3-2];\n        new_data[1+2][3-2] = data[0+2][3-2];\n        new_data[0][2] = data[3][7];\n        new_data[1][2] = data[2][7];\n        new_data[2][2] = data[0][2];\n        new_data[3][2] = data[1][2];\n        new_data[4][2] = data[2][2];\n        new_data[5][2] = data[3][2];\n        new_data[3][7] = data[4][2];\n        new_data[2][7] = data[5][2];\n        //がんばった\n        for(int i = 0;i < 6;i++){\n            for(int j = 0;j < 8;j++){\n                data[i][j] = new_data[i][j];\n            }\n        }\n    }\n    \n    void front(){\n        char new_data[6][8];\n        for(int i = 0;i < 6;i++){\n            for(int j = 0;j < 8;j++){\n                new_data[i][j] = data[i][j];\n            }\n        }\n        //がんばる\n        new_data[0+2][2] = data[1+2][2];\n        new_data[0+2][3] = data[0+2][2];\n        new_data[1+2][2] = data[1+2][3];\n        new_data[1+2][3] = data[0+2][3];\n        new_data[1][2] = data[3][1];\n        new_data[1][3] = data[2][1];\n        new_data[2][4] = data[1][2];\n        new_data[3][4] = data[1][3];\n        new_data[4][3] = data[2][4];\n        new_data[4][2] = data[3][4];\n        new_data[3][1] = data[4][3];\n        new_data[2][1] = data[4][2];\n        //がんばった\n        for(int i = 0;i < 6;i++){\n            for(int j = 0;j < 8;j++){\n                data[i][j] = new_data[i][j];\n            }\n        }\n    }\n    \n    void right(){\n        char new_data[6][8];\n        for(int i = 0;i < 6;i++){\n            for(int j = 0;j < 8;j++){\n                new_data[i][j] = data[i][j];\n            }\n        }\n        //がんばる\n        new_data[0+2][2+2] = data[1+2][2+2];\n        new_data[0+2][3+2] = data[0+2][2+2];\n        new_data[1+2][2+2] = data[1+2][3+2];\n        new_data[1+2][3+2] = data[0+2][3+2];\n        new_data[5][3] = data[2][6];\n        new_data[4][3] = data[3][6];\n        new_data[3][3] = data[5][3];\n        new_data[2][3] = data[4][3];\n        new_data[1][3] = data[3][3];\n        new_data[0][3] = data[2][3];\n        new_data[2][6] = data[1][3];\n        new_data[3][6] = data[0][3];\n        //がんばった\n        for(int i = 0;i < 6;i++){\n            for(int j = 0;j < 8;j++){\n                data[i][j] = new_data[i][j];\n            }\n        }\n    }\n    \n    void back(){\n        char new_data[6][8];\n        for(int i = 0;i < 6;i++){\n            for(int j = 0;j < 8;j++){\n                new_data[i][j] = data[i][j];\n            }\n        }\n        //がんばる\n        new_data[0+2][2+4] = data[1+2][2+4];\n        new_data[0+2][3+4] = data[0+2][2+4];\n        new_data[1+2][2+4] = data[1+2][3+4];\n        new_data[1+2][3+4] = data[0+2][3+4];\n        new_data[3][5] = data[5][2];\n        new_data[2][5] = data[5][3];\n        new_data[0][3] = data[3][5];\n        new_data[0][2] = data[2][5];\n        new_data[2][0] = data[0][3];\n        new_data[3][0] = data[0][2];\n        new_data[5][2] = data[2][0];\n        new_data[5][3] = data[3][0];\n        //がんばった\n        for(int i = 0;i < 6;i++){\n            for(int j = 0;j < 8;j++){\n                data[i][j] = new_data[i][j];\n            }\n        }\n    }\n    \n    void down(){\n        char new_data[6][8];\n        for(int i = 0;i < 6;i++){\n            for(int j = 0;j < 8;j++){\n                new_data[i][j] = data[i][j];\n            }\n        }\n        //がんばる\n        new_data[0+4][2] = data[1+4][2];\n        new_data[0+4][3] = data[0+4][2];\n        new_data[1+4][2] = data[1+4][3];\n        new_data[1+4][3] = data[0+4][3];\n        new_data[3][0] = data[3][6];\n        new_data[3][1] = data[3][7];\n        new_data[3][2] = data[3][0];\n        new_data[3][3] = data[3][1];\n        new_data[3][4] = data[3][2];\n        new_data[3][5] = data[3][3];\n        new_data[3][6] = data[3][4];\n        new_data[3][7] = data[3][5];\n        //がんばった\n        for(int i = 0;i < 6;i++){\n            for(int j = 0;j < 8;j++){\n                data[i][j] = new_data[i][j];\n            }\n        }\n    }\n    \n}cube;\n\nint main(){\n    string S;\n    cin >> S;\n    for(int i = 0;i < S.size();i++){\n        switch(S[i]){\n            case 'U':\n                cube.up();\n                break;\n            case 'F':\n                cube.front();\n                break;\n            case 'R':\n                cube.right();\n                break;\n            case 'D':\n                cube.down();\n                break;\n            case 'B':\n                cube.back();\n                break;\n            case 'L':\n                cube.left();\n                break;\n            default:\n                return 1;\n        }\n    }\n    cube.print();\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <cstdlib>\n#include <cmath>\n#include <vector>\n#include <string>\n#include <map>\n#include <queue>\n#include <stack>\n#include <algorithm>\n\n#define rep(i,j) REP((i), 0, (j))\n#define REP(i,j,k) for(int i=(j);(i)<(k);++i)\n#define between(a,x,b) ((a)<=(x)&&(x)<=(b))\nusing namespace std;\n\nint main(){\n  char str[128], tmp[2];\n  char cube[6][9] = { {\"..rr....\"},\n\t\t      {\"..rr....\"},\n\t\t      {\"ggyybbww\"},\n\t\t      {\"ggyybbww\"},\n\t\t      {\"..oo....\"},\n\t\t      {\"..oo....\"} };\n\n  scanf(\"%s\", str);\n  rep(i, strlen(str)){\n    switch(str[i]){\n    case 'U':\n      tmp[0] = cube[2][0]; tmp[1] = cube[2][1];\n      REP(j, 2, 8) cube[2][j-2] = cube[2][j];\n      cube[2][6] = tmp[0]; cube[2][7] = tmp[1];\n\n      tmp[0] = cube[0][2]; cube[0][2] = cube[1][2]; cube[1][2] = cube[1][3];\n      cube[1][3] = cube[0][3]; cube[0][3] = tmp[0];\n      break;\n    case 'F':\n      tmp[0] = cube[2][1]; tmp[1] = cube[3][1];\n      cube[2][1] = cube[4][2]; cube[3][1] = cube[4][3];\n      cube[4][2] = cube[3][4]; cube[4][3] = cube[2][4];\n      cube[3][4] = cube[1][3]; cube[2][4] = cube[1][2];\n      cube[1][3] = tmp[0]; cube[1][2] = tmp[1];\n\n      tmp[0] = cube[2][2]; cube[2][2] = cube[3][2];\n      cube[3][2] = cube[3][3]; cube[3][3] = cube[2][3]; cube[2][3] = tmp[0];\n      break;\n    case 'R':\n      tmp[0] = cube[0][3]; tmp[1] = cube[1][3];\n      REP(j, 2, 6) cube[j-2][3] = cube[j][3];\n      cube[4][3] = cube[3][6]; cube[5][3] = cube[2][6];\n      cube[3][6] = tmp[0]; cube[2][6] = tmp[1];\n\n      tmp[0] = cube[2][4]; cube[2][4] = cube[3][4]; cube[3][4] = cube[3][5];\n      cube[3][5] = cube[2][5]; cube[2][5] = tmp[0];\n      break;\n    case 'D':\n      tmp[0] = cube[3][6]; tmp[1] = cube[3][7];\n      for(int j = 5; j >= 0; --j) cube[3][j+2] = cube[3][j];\n      cube[3][0] = tmp[0]; cube[3][1] = tmp[1];\n\n      tmp[0] = cube[4][2]; cube[4][2] = cube[5][2]; cube[5][2] = cube[5][3];\n      cube[5][3] = cube[4][3]; cube[4][3] = tmp[0];\n      break;\n    case 'B':\n      tmp[0] = cube[0][2]; tmp[1] = cube[0][3];\n      cube[0][2] = cube[2][5]; cube[0][3] = cube[3][5];\n      cube[2][5] = cube[5][3]; cube[3][5] = cube[5][2];\n      cube[5][3] = cube[3][0]; cube[5][2] = cube[2][0];\n      cube[3][0] = tmp[0]; cube[2][0] = tmp[1];\n\n      tmp[0] = cube[2][6]; cube[2][6] = cube[3][6]; cube[3][6] = cube[3][7];\n      cube[3][7] = cube[2][7]; cube[2][7] = tmp[0];\n      break;\n    case 'L':\n      tmp[0] = cube[4][2]; tmp[1] = cube[5][2];\n      for(int j = 3; j >= 0; j--) cube[j+2][2] = cube[j][2];\n      cube[0][2] = cube[3][7]; cube[1][2] = cube[2][7];\n      cube[3][7] = tmp[0]; cube[2][7] = tmp[1];\n\n      tmp[0] = cube[2][0]; cube[2][0] = cube[3][0]; cube[3][0] = cube[3][1];\n      cube[3][1] = cube[2][1]; cube[2][1] = tmp[0];\n      break;\n    }\n  }\n\n  rep(i, 6){\n    rep(j, 8) printf(\"%c\", cube[i][j]);\n    puts(\"\");\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<string>\n\nusing namespace std;\n\nint main(void){\n\n\tstring rubi[150];\n\tchar tmp;\n\tstring S;\n\n\trubi[0]=(\"..rr......\");\n\trubi[1]=(\"..rr......\");\n\trubi[2]=(\"ggyybbww..\");\n\trubi[3]=(\"ggyybbww..\");\n\trubi[4]=(\"..oo......\");\n\trubi[5]=(\"..oo......\");\n\n\twhile(1){\n\t\tS=getchar();\n\t\tif(S==\"\\n\") break;\n\t\tif(S==\"R\"){\n\t\t\ttmp=rubi[0][3];\n\t\t\trubi[0][3]=rubi[2][3];\n\t\t\trubi[2][3]=rubi[4][3];\n\t\t\trubi[4][3]=rubi[3][6];\n\t\t\trubi[3][6]=tmp;\n\t\t\ttmp=rubi[1][3];\n\t\t\trubi[1][3]=rubi[3][3];\n\t\t\trubi[3][3]=rubi[5][3];\n\t\t\trubi[5][3]=rubi[2][6];\n\t\t\trubi[2][6]=tmp;\n\t\t\ttmp=rubi[2][4];\n\t\t\trubi[2][4]=rubi[3][4];\n\t\t\trubi[3][4]=rubi[3][5];\n\t\t\trubi[3][5]=rubi[2][5];\n\t\t\trubi[2][5]=tmp;\n\t\t}\n\t\tif(S==\"L\"){\n\t\t\ttmp=rubi[0][2];\n\t\t\trubi[0][2]=rubi[3][7];\n\t\t\trubi[3][7]=rubi[4][2];\n\t\t\trubi[4][2]=rubi[2][2];\n\t\t\trubi[2][2]=tmp;\n\t\t\ttmp=rubi[1][2];\n\t\t\trubi[1][2]=rubi[2][7];\n\t\t\trubi[2][7]=rubi[5][2];\n\t\t\trubi[5][2]=rubi[3][2];\n\t\t\trubi[3][2]=tmp;\n\t\t\ttmp=rubi[3][1];\n\t\t\trubi[3][1]=rubi[2][1];\n\t\t\trubi[2][1]=rubi[2][0];\n\t\t\trubi[2][0]=rubi[3][0];\n\t\t\trubi[3][0]=tmp;\n\t\t}\n\t\tif(S==\"U\"){\n\t\t\ttmp=rubi[2][0];\n\t\t\trubi[2][0]=rubi[2][2];\n\t\t\trubi[2][2]=rubi[2][4];\n\t\t\trubi[2][4]=rubi[2][6];\n\t\t\trubi[2][6]=tmp;\n\t\t\ttmp=rubi[2][1];\n\t\t\trubi[2][1]=rubi[2][3];\n\t\t\trubi[2][3]=rubi[2][5];\n\t\t\trubi[2][5]=rubi[2][7];\n\t\t\trubi[2][7]=tmp;\n\t\t\ttmp=rubi[0][2];\n\t\t\trubi[0][2]=rubi[1][2];\n\t\t\trubi[1][2]=rubi[1][3];\n\t\t\trubi[1][3]=rubi[0][3];\n\t\t\trubi[0][3]=tmp;\n\t\t}\n\t\tif(S==\"D\"){\n\t\t\ttmp=rubi[3][0];\n\t\t\trubi[3][0]=rubi[3][6];\n\t\t\trubi[3][6]=rubi[3][4];\n\t\t\trubi[3][4]=rubi[3][2];\n\t\t\trubi[3][2]=tmp;\n\t\t\ttmp=rubi[3][1];\n\t\t\trubi[3][1]=rubi[3][7];\n\t\t\trubi[3][7]=rubi[3][5];\n\t\t\trubi[3][5]=rubi[3][3];\n\t\t\trubi[3][3]=tmp;\n\t\t\ttmp=rubi[4][2];\n\t\t\trubi[4][2]=rubi[5][2];\n\t\t\trubi[5][2]=rubi[5][3];\n\t\t\trubi[5][3]=rubi[4][3];\n\t\t\trubi[4][3]=tmp;\n\t\t}\n\t\tif(S==\"F\"){\n\t\t\ttmp=rubi[1][2];\n\t\t\trubi[1][2]=rubi[3][1];\n\t\t\trubi[3][1]=rubi[4][3];\n\t\t\trubi[4][3]=rubi[2][4];\n\t\t\trubi[2][4]=tmp;\n\t\t\ttmp=rubi[1][3];\n\t\t\trubi[1][3]=rubi[2][1];\n\t\t\trubi[2][1]=rubi[4][2];\n\t\t\trubi[4][2]=rubi[3][4];\n\t\t\trubi[3][4]=tmp;\t\n\t\t\ttmp=rubi[2][3];\n\t\t\trubi[2][3]=rubi[2][2];\n\t\t\trubi[2][2]=rubi[3][2];\n\t\t\trubi[3][2]=rubi[3][3];\n\t\t\trubi[3][3]=tmp;\n\t\t}\n\t\tif(S==\"B\"){\n\t\t\ttmp=rubi[0][2];\n\t\t\trubi[0][2]=rubi[2][5];\n\t\t\trubi[2][5]=rubi[5][3];\n\t\t\trubi[5][3]=rubi[3][0];\n\t\t\trubi[3][0]=tmp;\n\t\t\ttmp=rubi[0][3];\n\t\t\trubi[0][3]=rubi[3][5];\n\t\t\trubi[3][5]=rubi[5][2];\n\t\t\trubi[5][2]=rubi[2][0];\n\t\t\trubi[2][0]=tmp;\n\t\t\ttmp=rubi[2][6];\n\t\t\trubi[2][6]=rubi[3][6];\n\t\t\trubi[3][6]=rubi[3][7];\n\t\t\trubi[3][7]=rubi[2][7];\n\t\t\trubi[2][7]=tmp;\n\t\t}\n\t}\n\n\tfor(int i=0;i<=7;i++){\n\t\tfor(int j=0;j<=7;j++){\n\t\t\tcout<<rubi[i][j];\n\t\t}\n\t\tcout<<endl;\n\t}\n\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nvector<string> t;\n\nvoid rotateU(){\n  vector<string> t2 = t;\n\n  t[2][0] = t2[2][2];\n  t[2][1] = t2[2][3];\n  t[2][2] = t2[2][4];\n  t[2][3] = t2[2][5];\n  t[2][4] = t2[2][6];\n  t[2][5] = t2[2][7];\n  t[2][6] = t2[2][0];\n  t[2][7] = t2[2][1];\n\n  int ADDX = 2;\n  int ADDY = 0;\n  t[ADDY + 0][ADDX + 0] = t2[ADDY + 1][ADDX + 0];\n  t[ADDY + 1][ADDX + 0] = t2[ADDY + 1][ADDX + 1];\n  t[ADDY + 1][ADDX + 1] = t2[ADDY + 0][ADDX + 1];\n  t[ADDY + 0][ADDX + 1] = t2[ADDY + 0][ADDX + 0];\n}\n\nvoid rotateF(){\n  vector<string> t2 = t;\n\n  t[1][3] = t2[2][1];\n  t[1][2] = t2[3][1];\n  t[2][1] = t2[4][2];\n  t[3][1] = t2[4][3];\n  t[4][2] = t2[3][4];\n  t[4][3] = t2[2][4];\n  t[3][4] = t2[1][3];\n  t[2][4] = t2[1][2];\n\n  int ADDX = 2;\n  int ADDY = 2;\n  t[ADDY + 0][ADDX + 0] = t2[ADDY + 1][ADDX + 0];\n  t[ADDY + 1][ADDX + 0] = t2[ADDY + 1][ADDX + 1];\n  t[ADDY + 1][ADDX + 1] = t2[ADDY + 0][ADDX + 1];\n  t[ADDY + 0][ADDX + 1] = t2[ADDY + 0][ADDX + 0];\n}\n\nvoid rotateR(){\n  vector<string> t2 = t;\n\n  t[0][3] = t2[2][3];\n  t[1][3] = t2[3][3];\n  t[2][3] = t2[4][3];\n  t[3][3] = t2[5][3];\n  t[4][3] = t2[3][6];\n  t[5][3] = t2[2][6];\n  t[3][6] = t2[0][3];\n  t[2][6] = t2[1][3];\n\n  int ADDX = 4;\n  int ADDY = 2;\n  t[ADDY + 0][ADDX + 0] = t2[ADDY + 1][ADDX + 0];\n  t[ADDY + 1][ADDX + 0] = t2[ADDY + 1][ADDX + 1];\n  t[ADDY + 1][ADDX + 1] = t2[ADDY + 0][ADDX + 1];\n  t[ADDY + 0][ADDX + 1] = t2[ADDY + 0][ADDX + 0];\n}\n\nvoid rotateD(){\n  vector<string> t2 = t;\n\n  t[3][0] = t2[3][6];\n  t[3][1] = t2[3][7];\n  t[3][2] = t2[3][0];\n  t[3][3] = t2[3][1];\n  t[3][4] = t2[3][2];\n  t[3][5] = t2[3][3];\n  t[3][6] = t2[3][4];\n  t[3][7] = t2[3][5];\n\n  int ADDX = 2;\n  int ADDY = 4;\n  t[ADDY + 0][ADDX + 0] = t2[ADDY + 1][ADDX + 0];\n  t[ADDY + 1][ADDX + 0] = t2[ADDY + 1][ADDX + 1];\n  t[ADDY + 1][ADDX + 1] = t2[ADDY + 0][ADDX + 1];\n  t[ADDY + 0][ADDX + 1] = t2[ADDY + 0][ADDX + 0];\n}\n\nvoid rotateB(){\n  vector<string> t2 = t;\n\n  t[0][3] = t2[3][5];\n  t[0][2] = t2[2][5];\n  t[2][0] = t2[0][3];\n  t[3][0] = t2[0][2];\n  t[5][2] = t2[2][0];\n  t[5][3] = t2[3][0];\n  t[3][5] = t2[5][2];\n  t[2][5] = t2[5][3];\n\n  int ADDX = 6;\n  int ADDY = 2;\n  t[ADDY + 0][ADDX + 0] = t2[ADDY + 1][ADDX + 0];\n  t[ADDY + 1][ADDX + 0] = t2[ADDY + 1][ADDX + 1];\n  t[ADDY + 1][ADDX + 1] = t2[ADDY + 0][ADDX + 1];\n  t[ADDY + 0][ADDX + 1] = t2[ADDY + 0][ADDX + 0];\n}\n\nvoid rotateL(){\n  vector<string> t2 = t;\n\n  t[0][2] = t2[3][7];\n  t[1][2] = t2[2][7];\n  t[2][2] = t2[0][2];\n  t[3][2] = t2[1][2];\n  t[4][2] = t2[2][2];\n  t[5][2] = t2[3][2];\n  t[3][7] = t2[4][2];\n  t[2][7] = t2[5][2];\n\n  int ADDX = 0;\n  int ADDY = 2;\n  t[ADDY + 0][ADDX + 0] = t2[ADDY + 1][ADDX + 0];\n  t[ADDY + 1][ADDX + 0] = t2[ADDY + 1][ADDX + 1];\n  t[ADDY + 1][ADDX + 1] = t2[ADDY + 0][ADDX + 1];\n  t[ADDY + 0][ADDX + 1] = t2[ADDY + 0][ADDX + 0];\n}\n\nint main(){\n  string s;\n\n  while(cin >> s){\n    t.clear();\n    t.push_back(\"..rr....\");\n    t.push_back(\"..rr....\");\n    t.push_back(\"ggyybbww\");\n    t.push_back(\"ggyybbww\");\n    t.push_back(\"..oo....\");\n    t.push_back(\"..oo....\");\n\n    for(int i = 0; i < s.size(); i++){\n      if(s[i] == 'U') rotateU();\n      if(s[i] == 'F') rotateF();\n      if(s[i] == 'R') rotateR();\n      if(s[i] == 'D') rotateD();\n      if(s[i] == 'B') rotateB();\n      if(s[i] == 'L') rotateL();\n    }\n\n    for(int i = 0; i < t.size(); i++){\n      cout << t[i] << endl;\n    }\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <vector>\n#include <list>\n#include <cmath>\n#include <fstream>\n#include <algorithm>\n#include <sstream>\n#include <string>\n#include <cstring>\n#include <cstdlib>\n#include <climits>\n#include <cmath>\n#include <map>\n\nusing namespace std;\ntypedef long long ll;\n\n\ntypedef pair<int,int> pii;\nmap<char,vector<pair<pii,pii> > > m;\n\nint main(){\n\n  vector<string > field;\n  for(int i=0;i<6;i++)\n    field.push_back(\"........\");\n  for(int i=0;i<=1;i++)\n    for(int j=2;j<=3;j++)\n      field[i][j]='r';\n  for(int i=2;i<=3;i++){\n    for(int j=0;j<=1;j++)\n      field[i][j]='g';\n    for(int j=2;j<=3;j++)\n      field[i][j]='y';\n    for(int j=4;j<=5;j++)\n      field[i][j]='b';\n    for(int j=6;j<=7;j++)\n      field[i][j]='w';\n  }\n  for(int i=4;i<=5;i++)\n    for(int j=2;j<=3;j++)\n      field[i][j]='o';\n  map<char,vector<pii> > faces;\n  {\n    {\n      vector<pair<pii,pii> > v;\n      v.push_back(make_pair(pii(0,3),pii(3,6)));\n      v.push_back(make_pair(pii(1,3),pii(2,6)));\n      v.push_back(make_pair(pii(3,6),pii(4,3)));\n      v.push_back(make_pair(pii(2,6),pii(5,3)));\n      v.push_back(make_pair(pii(4,3),pii(2,3)));\n      v.push_back(make_pair(pii(5,3),pii(3,3)));\n      v.push_back(make_pair(pii(3,3),pii(1,3)));\n      v.push_back(make_pair(pii(2,3),pii(0,3)));\n      faces['R'].push_back(pii(2,4));\n      faces['R'].push_back(pii(2,5));\n      faces['R'].push_back(pii(3,5));\n      faces['R'].push_back(pii(3,4));\n      m['R']=v;\n    }\n    {\n      vector<pair<pii,pii> > v;\n      v.push_back(make_pair(pii(0,2),pii(2,2)));\n      v.push_back(make_pair(pii(1,2),pii(3,2)));\n      v.push_back(make_pair(pii(2,2),pii(4,2)));\n      v.push_back(make_pair(pii(3,2),pii(5,2)));\n      v.push_back(make_pair(pii(4,2),pii(3,7)));\n      v.push_back(make_pair(pii(5,2),pii(2,7)));\n      v.push_back(make_pair(pii(2,7),pii(1,2)));\n      v.push_back(make_pair(pii(3,7),pii(0,2)));\n      m['L']=v;\n      faces['L'].push_back(pii(2,0));\n      faces['L'].push_back(pii(2,1));\n      faces['L'].push_back(pii(3,1));\n      faces['L'].push_back(pii(3,0));\n    }\n  }\n  {\n    {\n      vector<pair<pii,pii> > v;\n      v.push_back(make_pair(pii(2,7),pii(2,5)));\n      v.push_back(make_pair(pii(2,6),pii(2,4)));\n      v.push_back(make_pair(pii(2,5),pii(2,3)));\n      v.push_back(make_pair(pii(2,4),pii(2,2)));\n      v.push_back(make_pair(pii(2,3),pii(2,1)));\n      v.push_back(make_pair(pii(2,2),pii(2,0)));\n      v.push_back(make_pair(pii(2,1),pii(2,7)));\n      v.push_back(make_pair(pii(2,0),pii(2,6)));\n      m['U']=v;\n      faces['U'].push_back(pii(0,2));\n      faces['U'].push_back(pii(0,3));\n      faces['U'].push_back(pii(1,3));\n      faces['U'].push_back(pii(1,2));\n    }\n    {\n      vector<pair<pii,pii> > v;\n      v.push_back(make_pair(pii(3,0),pii(3,2)));\n      v.push_back(make_pair(pii(3,1),pii(3,3)));\n      v.push_back(make_pair(pii(3,2),pii(3,4)));\n      v.push_back(make_pair(pii(3,3),pii(3,5)));\n      v.push_back(make_pair(pii(3,4),pii(3,6)));\n      v.push_back(make_pair(pii(3,5),pii(3,7)));\n      v.push_back(make_pair(pii(3,6),pii(3,0)));\n      v.push_back(make_pair(pii(3,7),pii(3,1)));\n      m['D']=v;\n      faces['D'].push_back(pii(4,2));\n      faces['D'].push_back(pii(4,3));\n      faces['D'].push_back(pii(5,3));\n      faces['D'].push_back(pii(5,2));\n    }\n  }\n  {\n    {\n      vector<pair<pii,pii> > v;\n      v.push_back(make_pair(pii(1,2),pii(2,4)));\n      v.push_back(make_pair(pii(1,3),pii(3,4)));\n      v.push_back(make_pair(pii(2,4),pii(4,3)));\n      v.push_back(make_pair(pii(3,4),pii(4,2)));\n      v.push_back(make_pair(pii(4,3),pii(3,1)));\n      v.push_back(make_pair(pii(4,2),pii(2,1)));\n      v.push_back(make_pair(pii(3,1),pii(1,2)));\n      v.push_back(make_pair(pii(2,1),pii(1,3)));\n      m['F']=v;\n      faces['F'].push_back(pii(2,2));\n      faces['F'].push_back(pii(2,3));\n      faces['F'].push_back(pii(3,3));\n      faces['F'].push_back(pii(3,2));\n    }\n    {\n      vector<pair<pii,pii> > v;\n      v.push_back(make_pair(pii(0,2),pii(3,0)));\n      v.push_back(make_pair(pii(0,3),pii(2,0)));\n\n      v.push_back(make_pair(pii(3,0),pii(5,3)));\n      v.push_back(make_pair(pii(2,0),pii(5,2)));\n\n      v.push_back(make_pair(pii(5,3),pii(2,5)));\n      v.push_back(make_pair(pii(5,2),pii(3,5)));\n      \n      v.push_back(make_pair(pii(2,5),pii(0,2)));\n      v.push_back(make_pair(pii(3,5),pii(0,3)));\n\n      m['B']=v;\n      faces['B'].push_back(pii(2,6));\n      faces['B'].push_back(pii(2,7));\n      faces['B'].push_back(pii(3,7));\n      faces['B'].push_back(pii(3,6));\n    }\n    // for(int i=0;i<(int)v.size();i++)\n    //   swap(v[i].first,v[i].second);\n    // m['B']=v;\n  }\n\n  string s;\n  cin>>s;\n  for(int i=0;i<(int)s.size();i++){\n    vector<pair<pii,pii> > v=m[s[i]];\n    vector<string> nfield=field;\n    for(int j=0;j<(int)v.size();j++){\n      pii from=v[j].first;\n      pii to=v[j].second;\n      char ch=field[from.first][from.second];\n      nfield[to.first][to.second]=ch;\n    }\n    vector<pii> v2=faces[s[i]];\n    for(int j=0;j<(int)v2.size();j++){\n      pii from=v2[j];\n      pii to=v2[(j+1)%(int)v2.size()];\n      char ch=field[from.first][from.second];\n      nfield[to.first][to.second]=ch;\n    }\n    field=nfield;\n  }\n  for(int i=0;i<(int)field.size();i++)\n    cout<<field[i]<<endl;\n  \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\nusing namespace std;\nstring G[6] = {\"..rr....\",\n\t       \"..rr....\",\n\t       \"ggyybbww\",\n\t       \"ggyybbww\",\n\t       \"..oo....\",\n\t       \"..oo....\"};\nvoid roll(int i1, int j1, int i2, int j2, int i3, int j3, int i4, int j4){\n  char t = G[i1][j1];\n  G[i1][j1] = G[i2][j2];\n  G[i2][j2] = G[i3][j3];\n  G[i3][j3] = G[i4][j4];\n  G[i4][j4] = t;\n}\n\nmain(){\n  string com; cin >> com;\n  for ( int i = 0; i < com.size(); i++ ){\n    if ( com[i] == 'F' ){\n      roll(2, 2, 3, 2, 3, 3, 2, 3);\n      roll(2, 1, 4, 2, 3, 4, 1, 3);\n      roll(3, 1, 4, 3, 2, 4, 1, 2);\n    } else if ( com[i] == 'U' ){\n      roll(0, 2, 1, 2, 1, 3, 0, 3);\n      roll(2, 2, 2, 4, 2, 6, 2, 0);\n      roll(2, 3, 2, 5, 2, 7, 2, 1);\n    } else if ( com[i] == 'D' ){\n      roll(4, 2, 5, 2, 5, 3, 4, 3);\n      roll(3, 1, 3, 7, 3, 5, 3, 3);\n      roll(3, 0, 3, 6, 3, 4, 3, 2);\n    } else if ( com[i] == 'L' ){\n      roll(2, 0, 3, 0, 3, 1, 2, 1);\n      roll(2, 7, 5, 2, 3, 2, 1, 2);\n      roll(3, 7, 4, 2, 2, 2, 0, 2);\n    } else if ( com[i] == 'R' ){\n      roll(2, 4, 3, 4, 3, 5, 2, 5);\n      roll(2, 3, 4, 3, 3, 6, 0, 3);\n      roll(3, 3, 5, 3, 2, 6, 1, 3);\n    } else if ( com[i] == 'B' ){\n      roll(2, 6, 3, 6, 3, 7, 2, 7);\n      roll(2, 5, 5, 3, 3, 0, 0, 2);\n      roll(3, 5, 5, 2, 2, 0, 0, 3);\n    }\n  }\n  for ( int i = 0; i < 6; i++ ) cout << G[i] << endl;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nvoid move_surface(char surface[4]) {\n    char tmp = surface[0];\n    surface[0] = surface[2];\n    surface[2] = surface[3];\n    surface[3] = surface[1];\n    surface[1] = tmp;\n}\n\nvoid move8(char *c1, char *c2, char *c3, char *c4, char *c5, char *c6, char *c7, char *c8) {\n    char tmp1 = *c7;\n    char tmp2 = *c8;\n    *c8 = *c6;\n    *c7 = *c5;\n    *c6 = *c4;\n    *c5 = *c3;\n    *c4 = *c2;\n    *c3 = *c1;\n    *c2 = tmp2;\n    *c1 = tmp1;\n}\n\nvoid rotate(char c, char cube[6][4]) {\n    switch (c) {\n        case 'L':\n            move_surface(cube[0]);\n            move8(  &cube[4][0], &cube[4][2], &cube[1][0], &cube[1][2],\n                    &cube[5][0], &cube[5][2], &cube[3][3], &cube[3][1]);\n            break;\n        case 'F':\n            move_surface(cube[1]);\n            move8(  &cube[4][2], &cube[4][3], &cube[2][0], &cube[2][2],\n                    &cube[5][1], &cube[5][0], &cube[0][3], &cube[0][1]);\n            break;\n        case 'R':\n            move_surface(cube[2]);\n            move8(  &cube[4][3], &cube[4][1], &cube[3][0], &cube[3][2],\n                    &cube[5][3], &cube[5][1], &cube[1][3], &cube[1][1]);\n            break;\n        case 'B':\n            move_surface(cube[3]);\n            move8(  &cube[4][1], &cube[4][0], &cube[0][0], &cube[0][2],\n                    &cube[5][2], &cube[5][3], &cube[2][3], &cube[2][1]);\n            break;\n        case 'U':\n            move_surface(cube[4]);\n            move8(  &cube[3][1], &cube[3][0], &cube[2][1], &cube[2][0],\n                    &cube[1][1], &cube[1][0], &cube[0][1], &cube[0][0]);\n            break;\n        case 'D':\n            move_surface(cube[5]);\n            move8(  &cube[0][2], &cube[0][3], &cube[1][2], &cube[1][3],\n                    &cube[2][2], &cube[2][3], &cube[3][2], &cube[3][3]);\n            break;\n    }\n}\n\nvoid print(char cube[6][4]) {\n    cout << \"..\" << cube[4][0] << cube[4][1] << \"....\" << endl;\n    cout << \"..\" << cube[4][2] << cube[4][3] << \"....\" << endl;\n    cout << cube[0][0] << cube[0][1] << cube[1][0] << cube[1][1];\n    cout << cube[2][0] << cube[2][1] << cube[3][0] << cube[3][1] << endl;\n    cout << cube[0][2] << cube[0][3] << cube[1][2] << cube[1][3];\n    cout << cube[2][2] << cube[2][3] << cube[3][2] << cube[3][3] << endl;\n    cout << \"..\" << cube[5][0] << cube[5][1] << \"....\" << endl;\n    cout << \"..\" << cube[5][2] << cube[5][3] << \"....\" << endl;\n}\n\nint main() {\n    string s;\n    char cube[6][4] = {\n        {'g', 'g', 'g', 'g'},\n        {'y', 'y', 'y', 'y'},\n        {'b', 'b', 'b', 'b'},\n        {'w', 'w', 'w', 'w'},\n        {'r', 'r', 'r', 'r'},\n        {'o', 'o', 'o', 'o'}\n    };\n    cin >> s;\n    for (int i=0; i<(int)s.length(); i++) {\n        rotate(s[i], cube);\n    }\n    print(cube);\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#define loop(i,a,b) for(int i=a;i<b;i++)\n#define rep(i,a) loop(i,0,a)\nusing namespace std;\n\nchar dt[6][8];\n\nvoid color(char ch,int x,int y){\n\trep(i,2){\n\t\trep(j,2){\n\t\t\tdt[y+i][x+j]=ch;\n\t\t}\n\t}\n}\n\nvoid turnself(int i,int j){\n\tint alt=dt[i][j];\n\tdt[i][j]=dt[i+1][j];\n\tdt[i+1][j]=dt[i+1][j+1];\n\tdt[i+1][j+1]=dt[i][j+1];\n\tdt[i][j+1]=alt;\n}\n\nvoid turnF(){\n\tint alt1=dt[1][2];\n\tint alt2=dt[1][3];\n\tdt[1][2]=dt[3][1];\n\tdt[1][3]=dt[2][1];\n\tdt[2][1]=dt[4][2];\n\tdt[3][1]=dt[4][3];\n\tdt[4][2]=dt[3][4];\n\tdt[4][3]=dt[2][4];\n\tdt[3][4]=alt2;\n\tdt[2][4]=alt1;\n\tturnself(2,2);\n}\n\nvoid turnR(){\n\tint alt1=dt[0][3];\n\tint alt2=dt[1][3];\n\tdt[0][3]=dt[2][3];\n\tdt[1][3]=dt[3][3];\n\tdt[2][3]=dt[4][3];\n\tdt[3][3]=dt[5][3];\n\tdt[4][3]=dt[3][6];\n\tdt[5][3]=dt[2][6];\n\tdt[3][6]=alt1;\n\tdt[2][6]=alt2;\n\tturnself(2,4);\n}\n\nvoid turnD(){\n\tint alt1=dt[3][0];\n\tint alt2=dt[3][1];\n\tdt[3][0]=dt[3][6];\n\tdt[3][1]=dt[3][7];\n\tdt[3][6]=dt[3][4];\n\tdt[3][7]=dt[3][5];\n\tdt[3][4]=dt[3][2];\n\tdt[3][5]=dt[3][3];\n\tdt[3][2]=alt1;\n\tdt[3][3]=alt2;\n\tturnself(4,2);\n}\n\nvoid turnB(){\n\tint alt1=dt[2][5];\n\tint alt2=dt[3][5];\n\tdt[2][5]=dt[5][3];\n\tdt[3][5]=dt[5][2];\n\tdt[5][3]=dt[3][0];\n\tdt[5][2]=dt[2][0];\n\tdt[3][0]=dt[0][2];\n\tdt[2][0]=dt[0][3];\n\tdt[0][2]=alt1;\n\tdt[0][3]=alt2;\n\tturnself(2,6);\n}\n\nvoid turnL(){\n\tint alt1=dt[4][2];\n\tint alt2=dt[5][2];\n\tdt[4][2]=dt[2][2];\n\tdt[5][2]=dt[3][2];\n\tdt[2][2]=dt[0][2];\n\tdt[3][2]=dt[1][2];\n\tdt[0][2]=dt[3][7];\n\tdt[1][2]=dt[2][7];\n\tdt[3][7]=alt1;\n\tdt[2][7]=alt2;\n\tturnself(2,0);\n}\n\nvoid turnU(){\n\tint alt1=dt[2][0];\n\tint alt2=dt[2][1];\n\tdt[2][0]=dt[2][2];\n\tdt[2][1]=dt[2][3];\n\tdt[2][2]=dt[2][4];\n\tdt[2][3]=dt[2][5];\n\tdt[2][4]=dt[2][6];\n\tdt[2][5]=dt[2][7];\n\tdt[2][6]=alt1;\n\tdt[2][7]=alt2;\n\tturnself(0,2);\n}\n\nint main(){\n\trep(i,6)rep(j,8)dt[i][j]='.';\n\tcolor('r',2,0);\n\tcolor('g',0,2);\n\tcolor('y',2,2);\n\tcolor('o',2,4);\n\tcolor('b',4,2);\n\tcolor('w',6,2);\n\tstring s;\n\tcin>>s;\n\trep(i,s.size()){\n\t\tif(s[i]=='U')turnU();\n\t\telse if(s[i]=='F')turnF();\n\t\telse if(s[i]=='R')turnR();\n\t\telse if(s[i]=='D')turnD();\n\t\telse if(s[i]=='B')turnB();\n\t\telse if(s[i]=='L')turnL();\n\t}\n\trep(i,6){\n\t\trep(j,8){\n\t\t\tcout<<dt[i][j];\n\t\t}\n\t\tcout<<endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <sstream>\n#include <string>\n#include <algorithm>\n#include <vector>\n#include <stack>\n#include <queue>\n#include <set>\n#include <map>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <cassert>\n\nusing namespace std;\n\n#define FOR(i,k,n) for(int i=(k); i<(int)(n); ++i)\n#define REP(i,n) FOR(i,0,n)\n#define FORIT(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i)\n\ntemplate<class T> void debug(T begin, T end){ for(T i = begin; i != end; ++i) cerr<<*i<<\" \"; cerr<<endl; }\ninline bool valid(int x, int y, int W, int H){ return (x >= 0 && y >= 0 && x < W && y < H); }\n\ntypedef long long ll;\nconst int INF = 100000000;\nconst double EPS = 1e-8;\nconst int MOD = 1000000007;\nint dx[8] = {1, 0, -1, 0, 1, -1, -1, 1};\nint dy[8] = {0, 1, 0, -1, 1, 1, -1, -1};\nvoid rotate(string grid[6], int x[8], int y[8]){\n  string tmp[6];\n  REP(i, 6) tmp[i] = grid[i];\n  REP(i, 8) grid[y[i]][x[i]] = tmp[y[(i + 6) % 8]][x[(i + 6) % 8]];\n}\nvoid rotate2(string grid[6], int x[4], int y[4]){\n  string tmp[6];\n  REP(i, 6) tmp[i] = grid[i];\n  REP(i, 4) grid[y[i]][x[i]] = tmp[y[(i + 3) % 4]][x[(i + 3) % 4]];\n}\n\nint main(){\n  string s;\n  while(cin >> s){\n    string grid[6] = {\n      \"..rr....\",\n      \"..rr....\",\n      \"ggyybbww\",\n      \"ggyybbww\",\n      \"..oo....\",\n      \"..oo....\"\n    };\n    REP(i, s.size()){\n      int bx, by;\n      if(s[i] == 'R'){\n        bx = 4, by = 2;\n        int x[] = {6, 6, 3, 3, 3, 3, 3, 3};\n        int y[] = {2, 3, 5, 4, 3, 2, 1, 0};\n        rotate(grid, x, y);\n      }\n      if(s[i] == 'U'){\n        bx = 2, by = 0;\n        int x[] = {7, 6, 5, 4, 3, 2, 1, 0};\n        int y[] = {2, 2, 2, 2, 2, 2, 2, 2};\n        rotate(grid, x, y);\n      }\n      if(s[i] == 'L'){\n        bx = 0, by = 2;\n        int x[] = {2, 2, 2, 2, 2, 2, 7, 7};\n        int y[] = {0, 1, 2, 3, 4, 5, 3, 2};\n        rotate(grid, x, y);\n      }\n      if(s[i] == 'B'){\n        bx = 6, by = 2;\n        int x[] = {0, 0, 2, 3, 5, 5, 3, 2};\n        int y[] = {2, 3, 5, 5, 3, 2, 0, 0};\n        rotate(grid, x, y);\n      }\n      if(s[i] == 'F'){\n        bx = 2, by = 2;\n        int x[] = {1, 1, 2, 3, 4, 4, 3, 2};\n        int y[] = {3, 2, 1, 1, 2, 3, 4, 4};\n        rotate(grid, x, y);\n      }\n      if(s[i] == 'D'){\n        bx = 2, by = 4;\n        int x[] = {0, 1, 2, 3, 4, 5, 6, 7};\n        int y[] = {3, 3, 3, 3, 3, 3, 3, 3};\n        rotate(grid, x, y);\n      }\n      int x2[4], y2[4];\n      int dx[4] = {0, 1, 1, 0};\n      int dy[4] = {0, 0, 1, 1};\n      REP(i, 4) x2[i] = bx + dx[i];\n      REP(i, 4) y2[i] = by + dy[i];\n      rotate2(grid, x2, y2);\n    }\n      REP(i, 6) cout << grid[i] << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint main() {\n\tchar cube[6][8] = {{'.', '.', 'r', 'r', '.', '.', '.', '.'},\n\t\t\t\t\t   {'.', '.', 'r', 'r', '.', '.', '.', '.'},\n\t\t\t\t\t   {'g', 'g', 'y', 'y', 'b', 'b', 'w', 'w'},\n\t\t\t\t\t   {'g', 'g', 'y', 'y', 'b', 'b', 'w', 'w'},\n\t\t\t\t\t   {'.', '.', 'o', 'o', '.', '.', '.', '.'},\n\t\t\t\t\t   {'.', '.', 'o', 'o', '.', '.', '.', '.'}};\n\tstring a;\n\tcin >> a;\n\tchar kari, kari2;\n\tfor (int i = 0; i < a.size(); i++) {\n\t\tif (a[i] == 'U') {\n\t\t\tkari = cube[2][0];\n\t\t\tkari2 = cube[2][1];\n\t\t\tfor (int j = 0; j < 6; j++) {\n\t\t\t\tcube[2][j] = cube[2][j+2];\n\t\t\t}\n\t\t\tcube[2][6] = kari;\n\t\t\tcube[2][7] = kari2;\n\t\t\tkari = cube[0][3];\n\t\t\tcube[0][3] = cube[0][2];\n\t\t\tcube[0][2] = cube[1][2];\n\t\t\tcube[1][2] = cube[1][3];\n\t\t\tcube[1][3] = kari;\n\t\t} else if (a[i] == 'D') {\n\t\t\tkari = cube[3][6];\n\t\t\tkari2 = cube[3][7];\n\t\t\tfor (int j = 7; j > 1; j--) {\n\t\t\t\tcube[3][j] = cube[3][j-2];\n\t\t\t}\n\t\t\tcube[3][1] = kari2;\n\t\t\tcube[3][0] = kari;\n\t\t\tkari = cube[4][2];\n\t\t\tcube[4][2] = cube[5][2];\n\t\t\tcube[5][2] = cube[5][3];\n\t\t\tcube[5][3] = cube[4][3];\n\t\t\tcube[4][3] = kari;\n\t\t} else if(a[i] == 'L') {\n\t\t\tkari = cube[4][2];\n\t\t\tkari2 = cube[5][2];\n\t\t\tfor (int j = 5; j > 1; j--) {\n\t\t\t\tcube[j][2] = cube[j-2][2];\n\t\t\t}\n\t\t\tcube[1][2] = cube[2][7];\n\t\t\tcube[0][2] = cube[3][7];\n\t\t\tcube[2][7] = kari2;\n\t\t\tcube[3][7] = kari;\n\t\t\tkari = cube[2][0];\n\t\t\tcube[2][0] = cube[3][0];\n\t\t\tcube[3][0] = cube[3][1];\n\t\t\tcube[3][1] = cube[2][1];\n\t\t\tcube[2][1] = kari;\n\t\t} else if (a[i] == 'R') {\n\t\t\tkari = cube[0][3];\n\t\t\tkari2 = cube[1][3];\n\t\t\tfor (int j = 0; j < 4; j++) {\n\t\t\t\tcube[j][3] = cube[j+2][3];\n\t\t\t}\n\t\t\tcube[4][3] = cube[3][6];\n\t\t\tcube[5][3] = cube[2][6];\n\t\t\tcube[2][6] = kari2;\n\t\t\tcube[3][6] = kari;\n\t\t\tkari = cube[2][4];\n\t\t\tcube[2][4] = cube[3][4];\n\t\t\tcube[3][4] = cube[3][5];\n\t\t\tcube[3][5] = cube[2][5];\n\t\t\tcube[2][5] = kari;\n\t\t} else if (a[i] == 'F') {\n\t\t\tkari = cube[2][2];\n\t\t\tcube[2][2] = cube[3][2];\n\t\t\tcube[3][2] = cube[3][3];\n\t\t\tcube[3][3] = cube[2][3];\n\t\t\tcube[2][3] = kari;\n\t\t\tkari = cube[2][1];\n\t\t\tkari2 = cube[3][1];\n\t\t\tcube[2][1] = cube[4][2];\n\t\t\tcube[3][1] = cube[4][3];\n\t\t\tcube[4][2] = cube[3][4];\n\t\t\tcube[4][3] = cube[2][4];\n\t\t\tcube[2][4] = cube[1][2];\n\t\t\tcube[3][4] = cube[1][3];\n\t\t\tcube[1][2] = kari2;\n\t\t\tcube[1][3] = kari;\n\t\t} else if(a[i] == 'B'){\n\t\t\tkari = cube[2][6];\n\t\t\tcube[2][6] = cube[3][6];\n\t\t\tcube[3][6] = cube[3][7];\n\t\t\tcube[3][7] = cube[2][7];\n\t\t\tcube[2][7] = kari;\n\t\t\tkari = cube[2][5];\n\t\t\tkari2 = cube[3][5];\n\t\t\tcube[2][5] = cube[5][3];\n\t\t\tcube[3][5] = cube[5][2];\n\t\t\tcube[5][2] = cube[2][0];\n\t\t\tcube[5][3] = cube[3][0];\n\t\t\tcube[2][0] = cube[0][3];\n\t\t\tcube[3][0] = cube[0][2];\n\t\t\tcube[0][2] = kari;\n\t\t\tcube[0][3] = kari2;\n\t\t}\n\t}\n\tfor (int i = 0; i < 6; i++) {\n\t\tfor (int j = 0; j < 8; j++) {\n\t\t\tcout << cube[i][j];\n\t\t}\n\t\tcout << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <string>\n\nusing namespace std;\n\nstring dat[6] = \n{\"..rr....\", \"..rr....\", \"ggyybbww\", \"ggyybbww\", \"..oo....\", \"..oo....\"};\n\nvoid funcU(){\n\tstring tmp[6];\n\tfor(int i=0;i<6;i++) tmp[i] = dat[i];\n\tdat[2][0] = tmp[2][2];\n\tdat[2][1] = tmp[2][3];\n\tdat[2][2] = tmp[2][4];\n\tdat[2][3] = tmp[2][5];\n\tdat[2][4] = tmp[2][6];\n\tdat[2][5] = tmp[2][7];\n\tdat[2][6] = tmp[2][0];\n\tdat[2][7] = tmp[2][1];\n\tdat[0][2] = tmp[1][2];\n\tdat[1][2] = tmp[1][3];\n\tdat[1][3] = tmp[0][3];\n\tdat[0][3] = tmp[0][2];\n}\n\nvoid funcF(){\n\tstring tmp[6];\n\tfor(int i=0;i<6;i++) tmp[i] = dat[i];\n\tdat[1][2] = tmp[3][1];\n\tdat[1][3] = tmp[2][1];\n\tdat[2][1] = tmp[4][2];\n\tdat[3][1] = tmp[4][3];\n\tdat[4][2] = tmp[3][4];\n\tdat[4][3] = tmp[2][4];\n\tdat[2][4] = tmp[1][2];\n\tdat[3][4] = tmp[1][3];\n\tdat[2][2] = tmp[3][2];\n\tdat[3][2] = tmp[3][3];\n\tdat[3][3] = tmp[2][3];\n\tdat[2][3] = tmp[2][2];\n}\n\nvoid funcR(){\n\tstring tmp[6];\n\tfor(int i=0;i<6;i++) tmp[i] = dat[i];\n\tdat[0][3] = tmp[2][3];\n\tdat[1][3] = tmp[3][3];\n\tdat[2][3] = tmp[4][3];\n\tdat[3][3] = tmp[5][3];\n\tdat[4][3] = tmp[3][6];\n\tdat[5][3] = tmp[2][6];\n\tdat[2][6] = tmp[1][3];\n\tdat[3][6] = tmp[0][3];\n\tdat[2][4] = tmp[3][4];\n\tdat[3][4] = tmp[3][5];\n\tdat[3][5] = tmp[2][5];\n\tdat[2][5] = tmp[2][4];\n}\n\nvoid funcD(){\n\tstring tmp[6];\n\tfor(int i=0;i<6;i++) tmp[i] = dat[i];\n\tdat[3][0] = tmp[3][6];\n\tdat[3][1] = tmp[3][7];\n\tdat[3][2] = tmp[3][0];\n\tdat[3][3] = tmp[3][1];\n\tdat[3][4] = tmp[3][2];\n\tdat[3][5] = tmp[3][3];\n\tdat[3][6] = tmp[3][4];\n\tdat[3][7] = tmp[3][5];\n\tdat[4][2] = tmp[5][2];\n\tdat[5][2] = tmp[5][3];\n\tdat[5][3] = tmp[4][3];\n\tdat[4][3] = tmp[4][2];\n}\n\nvoid funcB(){\n\tstring tmp[6];\n\tfor(int i=0;i<6;i++) tmp[i] = dat[i];\n\tdat[0][2] = tmp[2][5];\n\tdat[0][3] = tmp[3][5];\n\tdat[2][5] = tmp[5][3];\n\tdat[3][5] = tmp[5][2];\n\tdat[5][2] = tmp[2][0];\n\tdat[5][3] = tmp[3][0];\n\tdat[2][0] = tmp[0][3];\n\tdat[3][0] = tmp[0][2];\n\tdat[2][6] = tmp[3][6];\n\tdat[3][6] = tmp[3][7];\n\tdat[3][7] = tmp[2][7];\n\tdat[2][7] = tmp[2][6];\n}\n\nvoid funcL(){\n\tstring tmp[6];\n\tfor(int i=0;i<6;i++) tmp[i] = dat[i];\n\tdat[0][2] = tmp[3][7];\n\tdat[1][2] = tmp[2][7];\n\tdat[2][7] = tmp[5][2];\n\tdat[3][7] = tmp[4][2];\n\tdat[4][2] = tmp[2][2];\n\tdat[5][2] = tmp[3][2];\n\tdat[2][2] = tmp[0][2];\n\tdat[3][2] = tmp[1][2];\n\tdat[2][0] = tmp[3][0];\n\tdat[3][0] = tmp[3][1];\n\tdat[3][1] = tmp[2][1];\n\tdat[2][1] = tmp[2][0];\n}\n\nint main(){\n\tstring in;\n\tcin >> in;\n\tfor(int i=0;i<in.size();i++){\n\t\t//for(int j=0;j<6;j++) cout << dat[j] << endl; cout << endl;\n\t\tif(in[i] == 'U') funcU();\n\t\telse if(in[i] == 'F') funcF();\n\t\telse if(in[i] == 'R') funcR();\n\t\telse if(in[i] == 'D') funcD();\n\t\telse if(in[i] == 'B') funcB();\n\t\telse if(in[i] == 'L') funcL();\n\t}\n\tfor(int i=0;i<6;i++) cout << dat[i] << endl;\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <map>\n#include <algorithm>\nusing namespace std;\n\nconst char A[][9]{\n  \"..rr....\",\n  \"..rr....\",\n  \"ggyybbww\",\n  \"ggyybbww\",\n  \"..oo....\",\n  \"..oo....\",\n};\n\nvoid rotate(string s[6],int x,int y,int cnt){\n  const int T[8]={0,0,1,0,1,1,0,1};\n\tstring tmp;\n\tfor(int i=0;i<4;++i)tmp+=s[y+T[2*i+1]][x+T[2*i]];\n\ttmp=(tmp+tmp).substr(4-cnt,4);\n\tfor(int i=0;i<4;++i)s[y+T[2*i+1]][x+T[2*i]]=tmp[i];\n}\n\nint main(void){\n  string s,r[6];\n  cin>>s;\n  for(int i=0;i<6;++i) r[i]=string(A[i]);\n  for(int i=0;i<s.size();++i){\n    if(s[i]=='U'){\n      rotate(r,2,0,1);\n      string tmp=r[2];\n      r[2]=(tmp+tmp).substr(2,8);\n    }else if(s[i]=='F'){\n    \trotate(r,2,2,1);\n    \tconst int F[16]={2,1,3,1,4,2,4,3,3,4,2,4,1,3,1,2};\n    \tstring tmp;\n    \tfor(int j=0;j<8;++j) tmp+=r[F[j*2+1]][F[j*2]];\n    \ttmp=(tmp+tmp).substr(6,8);\n    \tfor(int j=0;j<8;++j) r[F[j*2+1]][F[j*2]]=tmp[j];\n    }else if(s[i]=='R'){\n    \trotate(r,4,2,1);\n    \tconst int R[16]={3,0,3,1,3,2,3,3,3,4,3,5,6,3,6,2};\n    \tstring tmp;\n    \tfor(int j=0;j<8;++j) tmp+=r[R[j*2+1]][R[j*2]];\n    \ttmp=(tmp+tmp).substr(2,8);\n    \tfor(int j=0;j<8;++j) r[R[j*2+1]][R[j*2]]=tmp[j];\n    }else if(s[i]=='D'){\n    \trotate(r,2,4,1);\n      string tmp=r[3];\n      r[3]=(tmp+tmp).substr(6,8);\n    }else if(s[i]=='B'){\n    \trotate(r,6,2,1);\n    \tconst int B[16]={2,0,3,0,5,2,5,3,3,5,2,5,0,3,0,2};\n    \tstring tmp;\n    \tfor(int j=0;j<8;++j) tmp+=r[B[j*2+1]][B[j*2]];\n    \ttmp=(tmp+tmp).substr(2,8);\n    \tfor(int j=0;j<8;++j) r[B[j*2+1]][B[j*2]]=tmp[j];\n    }else if(s[i]=='L'){\n    \trotate(r,0,2,1);\n    \tconst int L[16]={2,0,2,1,2,2,2,3,2,4,2,5,7,3,7,2};\n    \tstring tmp;\n    \tfor(int j=0;j<8;++j) tmp+=r[L[j*2+1]][L[j*2]];\n    \ttmp=(tmp+tmp).substr(6,8);\n    \tfor(int j=0;j<8;++j) r[L[j*2+1]][L[j*2]]=tmp[j];\n    }\n  }\n  for(int i=0;i<6;++i) cout<<r[i]<<endl;;\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <vector>\n#include <string>\n#include <cassert>\n \nusing namespace std;\n \n#define DEBUG(x) cout << #x << \" = \" << x << endl\n \nenum COLOR { R, O, Y, G, B, W };\nenum FACE { FRONT, BACK, UP, DOWN, LEFT, RIGHT };\n \nstruct Cube {\n    vector<vector<int> > f;\n    vector<COLOR> id;\n \n    Cube() : f(vector<vector<int> >(6, vector<int>(4))), id(vector<COLOR>(4*6)) {\n        int k = 0;\n        for(int i = 0; i < 4; i++) { f[FRONT][i] = k; id[k] = Y; k++; }\n        for(int i = 0; i < 4; i++) { f[BACK][i] = k; id[k] = W; k++; }\n        for(int i = 0; i < 4; i++) { f[UP][i] = k; id[k] = R; k++; }\n        for(int i = 0; i < 4; i++) { f[DOWN][i] = k; id[k] = O; k++; }\n        for(int i = 0; i < 4; i++) { f[LEFT][i] = k; id[k] = G; k++; }\n        for(int i = 0; i < 4; i++) { f[RIGHT][i] = k; id[k] = B; k++; }\n    }\n \n    // front -> right\n    void roll_x() {\n        roll(FRONT, RIGHT, BACK, LEFT);\n \n        vector<int> tmp;\n \n        tmp = f[UP];\n        f[UP][0] = tmp[1];\n        f[UP][1] = tmp[3];\n        f[UP][2] = tmp[0];\n        f[UP][3] = tmp[2];\n \n        tmp = f[DOWN];\n        f[DOWN][0] = tmp[2];\n        f[DOWN][1] = tmp[0];\n        f[DOWN][2] = tmp[3];\n        f[DOWN][3] = tmp[1];\n \n        tmp = f[BACK];\n        for(int i = 0; i < 4; i++) {\n            f[BACK][i] = tmp[3 - i];\n        }\n \n        tmp = f[LEFT];\n        for(int i = 0; i < 4; i++) {\n            f[LEFT][i] = tmp[3 - i];\n        }\n    }\n \n    // front -> top\n    void roll_y() {\n        roll(FRONT, UP, BACK, DOWN);\n \n        // rotate RIGHT & LEFT\n        vector<int> tmp;\n \n        tmp = f[RIGHT];\n        f[RIGHT][0] = tmp[2];\n        f[RIGHT][1] = tmp[0];\n        f[RIGHT][2] = tmp[3];\n        f[RIGHT][3] = tmp[1];\n \n        tmp = f[LEFT];\n        f[LEFT][0] = tmp[1];\n        f[LEFT][1] = tmp[3];\n        f[LEFT][2] = tmp[0];\n        f[LEFT][3] = tmp[2];\n \n        /*\n        tmp = f[BACK];\n        for(int i = 0; i < 4; i++) {\n            f[BACK][i] = tmp[3 - i];\n        }\n \n        tmp = f[DOWN];\n        for(int i = 0; i < 4; i++) {\n            f[DOWN][i] = tmp[3 - i];\n        }\n        */\n    }\n \n    void rotate_front() {\n        vector<vector<int> > tmp = f;\n        f[FRONT][0] = tmp[FRONT][2];\n        f[FRONT][1] = tmp[FRONT][0];\n        f[FRONT][2] = tmp[FRONT][3];\n        f[FRONT][3] = tmp[FRONT][1];\n        f[UP][2] = tmp[LEFT][3];\n        f[UP][3] = tmp[LEFT][1];\n        f[LEFT][1] = tmp[DOWN][0];\n        f[LEFT][3] = tmp[DOWN][1];\n        f[DOWN][0] = tmp[RIGHT][2];\n        f[DOWN][1] = tmp[RIGHT][0];\n        f[RIGHT][0] = tmp[UP][2];\n        f[RIGHT][2] = tmp[UP][3];\n    }\n \n    int fshow(FACE face, int index) {\n        return f[face][index];\n    }\n \n    void tr2() {\n        /*\n        printf(\"  ....%3d%3d....\\n\", fshow(UP, 0), fshow(UP, 1));\n        printf(\"  ....%3d%3d....\\n\", fshow(UP, 2), fshow(UP, 3));\n        printf(\"%3d%3d%3d%3d%3d%3d%3d%3d\\n\", fshow(LEFT, 0), fshow(LEFT, 1), fshow(FRONT, 0), fshow(FRONT, 1), fshow(RIGHT, 0), fshow(RIGHT, 1), fshow(BACK, 3), fshow(BACK, 2));\n        printf(\"%3d%3d%3d%3d%3d%3d%3d%3d\\n\", fshow(LEFT, 2), fshow(LEFT, 3), fshow(FRONT, 2), fshow(FRONT, 3), fshow(RIGHT, 2), fshow(RIGHT, 3), fshow(BACK, 1), fshow(BACK, 0));\n        printf(\"  ....%3d%3d....\\n\", fshow(DOWN, 0), fshow(DOWN, 1));\n        printf(\"  ....%3d%3d....\\n\", fshow(DOWN, 2), fshow(DOWN, 3));\n        printf(\"\\n\");\n        */\n    }\n \n    void tr() {\n        printf(\"..%c%c....\\n\", colorCode(UP, 0), colorCode(UP, 1));\n        printf(\"..%c%c....\\n\", colorCode(UP, 2), colorCode(UP, 3));\n        printf(\"%c%c%c%c%c%c%c%c\\n\", colorCode(LEFT, 0), colorCode(LEFT, 1), colorCode(FRONT, 0), colorCode(FRONT, 1), colorCode(RIGHT, 0), colorCode(RIGHT, 1), colorCode(BACK, 3), colorCode(BACK, 2));\n        printf(\"%c%c%c%c%c%c%c%c\\n\", colorCode(LEFT, 2), colorCode(LEFT, 3), colorCode(FRONT, 2), colorCode(FRONT, 3), colorCode(RIGHT, 2), colorCode(RIGHT, 3), colorCode(BACK, 1), colorCode(BACK, 0));\n        printf(\"..%c%c....\\n\", colorCode(DOWN, 0), colorCode(DOWN, 1));\n        printf(\"..%c%c....\\n\", colorCode(DOWN, 2), colorCode(DOWN, 3));\n    }\n \nprivate:\n    void roll(FACE a, FACE b, FACE c, FACE d) {\n        vector<int> tmp = f[b];\n        f[b] = f[a]; f[a] = f[d];\n        f[d] = f[c]; f[c] = tmp;\n    }\n \n    char colorCode(FACE face, int index) {\n        COLOR color = id[f[face][index]];\n        char c;\n        switch(color) {\n            case R: c = 'r'; break;\n                case O: c = 'o'; break;\n                case Y: c = 'y'; break;\n                case G: c = 'g'; break;\n                case B: c = 'b'; break;\n                case W: c = 'w'; break;\n                default: assert(false);\n        }\n        return c;\n    }\n};\n \nvoid tr(Cube cube) {\n    for(int i = 0; i < 4; i++) DEBUG(cube.f[FRONT][i]);\n    for(int i = 0; i < 4; i++) DEBUG(cube.f[BACK][i]);\n    for(int i = 0; i < 4; i++) DEBUG(cube.f[UP][i]);\n    for(int i = 0; i < 4; i++) DEBUG(cube.f[DOWN][i]);\n    for(int i = 0; i < 4; i++) DEBUG(cube.f[LEFT][i]);\n    for(int i = 0; i < 4; i++) DEBUG(cube.f[RIGHT][i]);\n}\n \nint main() {\n    Cube cube;\n \n    cube.tr2();\n \n    string s;\n    cin >> s;\n    int len = s.length();\n    for(int i = 0; i < len; i++) {\n        char c = s[i];\n        switch(c) {\n            case 'F':\n                cube.rotate_front();\n                break;\n            case 'R':\n                cube.roll_x();\n                cube.tr2();\n                cube.roll_x();\n                cube.tr2();\n                cube.roll_x();\n                cube.tr2();\n                cube.rotate_front();\n                cube.tr2();\n                cube.roll_x();\n                cube.tr2();\n                break;\n            case 'B':\n                cube.roll_x();\n                cube.tr2();\n                cube.roll_x();\n                cube.tr2();\n                cube.rotate_front();\n                cube.tr2();\n                cube.roll_x();\n                cube.tr2();\n                cube.roll_x();\n                cube.tr2();\n                break;\n            case 'L':\n                cube.roll_x();\n                cube.tr2();\n                cube.rotate_front();\n                cube.tr2();\n                cube.roll_x();\n                cube.tr2();\n                cube.roll_x();\n                cube.tr2();\n                cube.roll_x();\n                cube.tr2();\n                break;\n            case 'U':\n                cube.roll_y();\n                cube.tr2();\n                cube.roll_y();\n                cube.tr2();\n                cube.roll_y();\n                cube.tr2();\n                cube.rotate_front();\n                cube.tr2();\n                cube.roll_y();\n                cube.tr2();\n                break;\n            case 'D':\n                cube.roll_y();\n                cube.tr2();\n                cube.rotate_front();\n                cube.tr2();\n                cube.roll_y();\n                cube.tr2();\n                cube.roll_y();\n                cube.tr2();\n                cube.roll_y();\n                cube.tr2();\n                break;\n        }\n    }\n    cube.tr();\n    /*\n       cube.tr();\n       cout << \"----------\" << endl;\n       cube.rotate_front();\n       cube.tr();\n       cout << \"----------\" << endl;\n       cube.roll_x();\n       cube.tr();\n       cout << \"----------\" << endl;\n       cube.roll_x();\n       cube.tr();\n       cout << \"----------\" << endl;\n       cube.roll_x();\n       cube.tr();\n       cout << \"----------\" << endl;\n       cube.roll_x();\n       cube.tr();\n       cout << \"----------\" << endl;\n       cube.roll_y();\n       cube.tr();\n       cout << \"----------\" << endl;\n       cube.roll_y();\n       cube.tr();\n       cout << \"----------\" << endl;\n       cube.roll_y();\n       cube.tr();\n       cout << \"----------\" << endl;\n       cube.roll_y();\n       cube.tr();\n       */\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstring>\n \nusing namespace std;\n \nint main()\n{\n    char res[6][9] = {\"..rr....\",\n                      \"..rr....\",\n                      \"ggyybbww\",\n                      \"ggyybbww\",\n                      \"..oo....\",\n                      \"..oo....\"};\n    char q[128];\n     \n    scanf(\"%s\", q);\n     \n    for (int i = 0; q[i]; i++){\n        char next[6][9];\n        memcpy(next, res, sizeof(res));\n        if (q[i] == 'U'){\n            next[0][2] = res[1][2]; next[0][3] = res[0][2];\n            next[1][3] = res[0][3]; next[1][2] = res[1][3];\n            for (int i = 0; i < 8; i++)\n                next[2][i] = res[2][(i + 2) % 8];\n        }\n        if (q[i] == 'D'){\n            next[4][2] = res[5][2]; next[4][3] = res[4][2];\n            next[5][3] = res[4][3]; next[5][2] = res[5][3];\n            for (int i = 0; i < 8; i++)\n                next[3][(i + 2) % 8] = res[3][i];\n        }\n        if (q[i] == 'R'){\n            next[2][4] = res[3][4]; next[2][5] = res[2][4];\n            next[3][5] = res[2][5]; next[3][4] = res[3][5];\n            for (int i = 0; i < 4; i++)\n                next[i][3] = res[i + 2][3];\n            next[4][3] = res[3][6]; next[5][3] = res[2][6];\n            next[2][6] = res[1][3]; next[3][6] = res[0][3];\n        }\n        if (q[i] == 'L'){\n            next[2][0] = res[3][0]; next[2][1] = res[2][0];\n            next[3][1] = res[2][1]; next[3][0] = res[3][1];\n            for (int i = 0; i < 4; i++)\n                next[(i + 2)][2] = res[i][2];\n            next[3][7] = res[4][2]; next[2][7] = res[5][2];\n            next[0][2] = res[3][7]; next[1][2] = res[2][7];\n        }\n        if (q[i] == 'F'){\n            next[2][2] = res[3][2]; next[2][3] = res[2][2];\n            next[3][3] = res[2][3]; next[3][2] = res[3][3];\n            next[1][2] = res[3][1]; next[1][3] = res[2][1];\n            next[2][4] = res[1][2]; next[3][4] = res[1][3];\n            next[4][3] = res[2][4]; next[4][2] = res[3][4];\n            next[3][1] = res[4][3]; next[2][1] = res[4][2];\n        }\n        if (q[i] == 'B'){\n            next[2][6] = res[3][6]; next[2][7] = res[2][6];\n            next[3][7] = res[2][7]; next[3][6] = res[3][7];\n            next[3][5] = res[5][2]; next[2][5] = res[5][3];\n            next[5][2] = res[2][0]; next[5][3] = res[3][0];\n            next[3][0] = res[0][2]; next[2][0] = res[0][3];\n            next[0][2] = res[2][5]; next[0][3] = res[3][5];\n        }\n         \n        memcpy(res, next, sizeof(next));\n    }\n     \n    for (int i = 0; i < 6; i++) printf(\"%s\\n\", res[i]);\n     \n    return (0);\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n\nusing namespace std;\n\n/*\n\t{'.', '.', 'r', 'r', '.', '.', '.', '.'},\n\t{'.', '.', 'r', 'r', '.', '.', '.', '.'},\n\t{'g', 'g', 'y', 'y', 'b', 'b', 'w', 'w', 'g', 'g'},\n\t{'g', 'g', 'y', 'y', 'b', 'b', 'w', 'w'},\n\t{'.', '.', 'o', 'o', '.', '.', '.', '.'},\n\t{'.', '.', 'o', 'o', '.', '.', '.', '.'},\n\n*/\nchar ini_cube[6][8] = {\n\t{'.', '.', 'r', 'r', '.', '.', '.', '.'},\n\t{'.', '.', 'r', 'r', '.', '.', '.', '.'},\n\t{'g', 'g', 'y', 'y', 'b', 'b', 'w', 'w'},\n\t{'g', 'g', 'y', 'y', 'b', 'b', 'w', 'w'},\n\t{'.', '.', 'o', 'o', '.', '.', '.', '.'},\n\t{'.', '.', 'o', 'o', '.', '.', '.', '.'},\n};\n\nchar cube[6][8];\nchar nxt_cube[6][8];\n\nstring s;\n\nstring Rotate(char c) {\n\tfor (int i=0; i<6; i++) for (int j=0; j<8; j++) nxt_cube[i][j] = cube[i][j];\n\t\n\tif (c=='F') {\n\t\tnxt_cube[2][2] = cube[3][2]; nxt_cube[2][3] = cube[2][2]; nxt_cube[3][3] = cube[2][3]; nxt_cube[3][2] = cube[3][3];\n\t\tnxt_cube[1][2] = cube[3][1]; nxt_cube[1][3] = cube[2][1]; nxt_cube[2][4] = cube[1][2]; nxt_cube[3][4] = cube[1][3];\n\t\tnxt_cube[4][3] = cube[2][4]; nxt_cube[4][2] = cube[3][4]; nxt_cube[2][1] = cube[4][2]; nxt_cube[3][1] = cube[4][3];\n\t}\n\tif (c=='D') {\n\t\tnxt_cube[4][2] = cube[5][2]; nxt_cube[4][3] = cube[4][2]; nxt_cube[5][3] = cube[4][3]; nxt_cube[5][2] = cube[5][3];\n\t\tnxt_cube[3][2] = cube[3][0]; nxt_cube[3][3] = cube[3][1]; nxt_cube[3][4] = cube[3][2]; nxt_cube[3][5] = cube[3][3];\n\t\tnxt_cube[3][6] = cube[3][4]; nxt_cube[3][7] = cube[3][5]; nxt_cube[3][0] = cube[3][6]; nxt_cube[3][1] = cube[3][7];\n\t}\n\tif (c=='R') {\n\t\tnxt_cube[2][4] = cube[3][4]; nxt_cube[2][5] = cube[2][4]; nxt_cube[3][5] = cube[2][5]; nxt_cube[3][4] = cube[3][5];\n\t\tnxt_cube[1][3] = cube[3][3]; nxt_cube[0][3] = cube[2][3]; nxt_cube[2][6] = cube[1][3]; nxt_cube[3][6] = cube[0][3];\n\t\tnxt_cube[4][3] = cube[3][6]; nxt_cube[5][3] = cube[2][6]; nxt_cube[2][3] = cube[4][3]; nxt_cube[3][3] = cube[5][3];\n\t}\n\tif (c=='L') {\n\t\tnxt_cube[2][0] = cube[3][0]; nxt_cube[2][1] = cube[2][0]; nxt_cube[3][1] = cube[2][1]; nxt_cube[3][0] = cube[3][1];\n\t\tnxt_cube[0][2] = cube[3][7]; nxt_cube[1][2] = cube[2][7]; nxt_cube[2][2] = cube[0][2]; nxt_cube[3][2] = cube[1][2];\n\t\tnxt_cube[5][2] = cube[3][2]; nxt_cube[4][2] = cube[2][2]; nxt_cube[2][7] = cube[5][2]; nxt_cube[3][7] = cube[4][2];\n\t}\n\tif (c=='U') {\n\t\tnxt_cube[0][2] = cube[1][2]; nxt_cube[0][3] = cube[0][2]; nxt_cube[1][3] = cube[0][3]; nxt_cube[1][2] = cube[1][3];\n\t\tnxt_cube[2][7] = cube[2][1]; nxt_cube[2][6] = cube[2][0]; nxt_cube[2][5] = cube[2][7]; nxt_cube[2][4] = cube[2][6];\n\t\tnxt_cube[2][2] = cube[2][4]; nxt_cube[2][3] = cube[2][5]; nxt_cube[2][0] = cube[2][2]; nxt_cube[2][1] = cube[2][3];\n\t}\n\tif (c=='B') {\n\t\tnxt_cube[2][6] = cube[3][6]; nxt_cube[2][7] = cube[2][6]; nxt_cube[3][7] = cube[2][7]; nxt_cube[3][6] = cube[3][7];\n\t\tnxt_cube[0][3] = cube[3][5]; nxt_cube[0][2] = cube[2][5]; nxt_cube[2][0] = cube[0][3]; nxt_cube[3][0] = cube[0][2];\n\t\tnxt_cube[5][3] = cube[3][0]; nxt_cube[5][2] = cube[2][0]; nxt_cube[2][5] = cube[5][3]; nxt_cube[3][5] = cube[5][2];\n\t}\n\t\n\tfor (int i=0; i<6; i++) for (int j=0; j<8; j++) cube[i][j] = nxt_cube[i][j];\n\t\n\treturn \"I hate harassment.\";\n}\n\nvoid print_cube() {\n\tfor (int i=0; i<6; i++) {\n\t\tfor (int j=0; j<8; j++) {\n\t\t\tcout << cube[i][j];\n\t\t}\n\t\tcout << endl;\n\t}\n}\n\nint main() {\n\tfor (int i=0; i<6; i++) for (int j=0; j<8; j++) cube[i][j] = ini_cube[i][j];\n\tcin >> s;\n\t\n\tfor (int i=0; i<(int)s.size(); i++) Rotate(s[i]);\n\t\n\tprint_cube();\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n\nusing namespace std;\n\nchar s[101];\nchar C[][9]={\"..rr....\",\n             \"..rr....\",\n             \"ggyybbww\",\n             \"ggyybbww\",\n             \"..oo....\",\n             \"..oo....\"};\n\ninline void cyc_(char& a, char& b, char& c, char& d){\n    char t=a;\n    a=b, b=c, c=d, d=t;\n}\nvoid cyc(char c){\n    switch(c){\n    case 'U':\n        cyc_(C[2][4],C[2][6],C[2][0],C[2][2]);\n        cyc_(C[1][3],C[0][3],C[0][2],C[1][2]);\n        cyc_(C[2][5],C[2][7],C[2][1],C[2][3]);\n        break;\n    case 'F':\n        cyc_(C[2][1],C[4][2],C[3][4],C[1][3]);\n        cyc_(C[2][2],C[3][2],C[3][3],C[2][3]);\n        cyc_(C[2][4],C[1][2],C[3][1],C[4][3]);\n        break;\n    case 'R':\n        cyc_(C[2][3],C[4][3],C[3][6],C[0][3]);\n        cyc_(C[3][5],C[2][5],C[2][4],C[3][4]);\n        cyc_(C[2][6],C[1][3],C[3][3],C[5][3]);\n        break;\n    case 'D':\n        cyc_(C[3][1],C[3][7],C[3][5],C[3][3]);\n        cyc_(C[4][3],C[4][2],C[5][2],C[5][3]);\n        cyc_(C[3][4],C[3][2],C[3][0],C[3][6]);\n        break;\n    case 'B':\n        cyc_(C[3][0],C[0][2],C[2][5],C[5][3]);\n        cyc_(C[3][6],C[3][7],C[2][7],C[2][6]);\n        cyc_(C[5][2],C[2][0],C[0][3],C[3][5]);\n        break;\n    case 'L':\n        cyc_(C[3][2],C[1][2],C[2][7],C[5][2]);\n        cyc_(C[2][1],C[2][0],C[3][0],C[3][1]);\n        cyc_(C[3][7],C[4][2],C[2][2],C[0][2]);\n        break;\n    }\n}\n\nint main(){\n    cin>>s;\n    for(char c:s) cyc(c);\n    for(auto s:C) cout<<s<<endl;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n#define t(a,b) t[a][b]\nstring s,t[]={\"..rr....\",\"..rr....\",\"ggyybbww\",\"ggyybbww\",\"..oo....\",\"..oo....\"};\nchar c,d,e;\nint i,j;\n\nvoid r(int y,int x){\n  e=t(y,x),t(y,x)=t(y+1,x),t(y+1,x)=t(y+1,x+1),t(y+1,x+1)=t(y,x+1),t(y,x+1)=e;\n}\nint main(){\n  cin>>s;\n  for(;i<s.size();++i){\n    if(s[i]=='U'){\n      c=t(2,0),d=t(2,1),t(2,0)=t(2,2),t(2,1)=t(2,3),t(2,2)=t(2,4),t(2,3)=t(2,5),t(2,4)=t(2,6),t(2,5)=t(2,7),t(2,6)=c,t(2,7)=d;\n      r(0,2);\n    }else if(s[i]=='F'){\n      c=t(1,2),d=t(1,3),t(1,2)=t(3,1),t(1,3)=t(2,1),t(2,1)=t(4,2),t(3,1)=t(4,3),t(4,2)=t(3,4),t(4,3)=t(2,4),t(2,4)=c,t(3,4)=d;\n      r(2,2);\n    }else if(s[i]=='R'){\n      c=t(0,3),d=t(1,3),t(0,3)=t(2,3),t(1,3)=t(3,3),t(2,3)=t(4,3),t(3,3)=t(5,3),t(4,3)=t(3,6),t(5,3)=t(2,6),t(3,6)=c,t(2,6)=d;\n      r(2,4);\n    }else if(s[i]=='D'){\n      c=t(3,0),d=t(3,1),t(3,0)=t(3,6),t(3,1)=t(3,7),t(3,6)=t(3,4),t(3,7)=t(3,5),t(3,4)=t(3,2),t(3,5)=t(3,3),t(3,2)=c,t(3,3)=d;\n      r(4,2);\n    }else if(s[i]=='B'){\n      c=t(0,3),d=t(0,2),t(0,2)=t(2,5),t(0,3)=t(3,5),t(2,5)=t(5,3),t(3,5)=t(5,2),t(5,3)=t(3,0),t(5,2)=t(2,0),t(2,0)=c,t(3,0)=d;\n      r(2,6);\n    }else if(s[i]=='L'){\n      c=t(0,2),d=t(1,2),t(1,2)=t(2,7),t(0,2)=t(3,7),t(3,7)=t(4,2),t(2,7)=t(5,2),t(4,2)=t(2,2),t(5,2)=t(3,2),t(2,2)=c,t(3,2)=d;\n      r(2,0);\n    }\n  }\n  for(;j<6;++j)cout<<t[j]<<endl;\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <vector>\n#include <map>\n#include <set>\n#include <stack>\n#include <queue>\n#include <algorithm>\n#include <utility>\n#include <functional>\n#include <sstream>\n#include <iostream>\n#include <cstdio>\n#include <cmath>\n#include <cstdlib>\n#include <cctype>\n#include <string>\n#include <cstring>\n#include <ctime>\n#include <climits>\nusing namespace std;\ninline int toInt(string s) { int v; istringstream sin(s); sin >> v; return v;}\ntemplate<class T> inline string toStr(T x) { ostringstream sout; sout << x; return sout.str();}\ntypedef vector<int> vi;\ntypedef vector<vi>  vvi;\ntypedef vector<string> vs;\ntypedef pair<int, int> pii;\ntypedef long long ll;\n#define ALL(a) (a).begin(),(a).end()\n#define RALL(a) (a).rbegin(),(a).rend()\n#define FOR(i,a,b) for(int i=(a);i<=(b);++i)\n#define REP(i,n) FOR(i,0,(n)-1)\nconst double EPS = 1e-12;\nconst double PI = acos(-1.0);\nconst int INF = INT_MAX/10;\n\nint dx[] = {0, 1, 1, 0, 0};\nint dy[] = {0, 0, 1, 1, 0};\n\nchar cube[6][8] = { {'.','.','r','r','.','.','.','.'},\n\t\t\t\t\t{'.','.','r','r','.','.','.','.'},\n\t\t\t\t\t{'g','g','y','y','b','b','w','w'},\n\t\t\t\t\t{'g','g','y','y','b','b','w','w'},\n\t\t\t\t\t{'.','.','o','o','.','.','.','.'},\n\t\t\t\t\t{'.','.','o','o','.','.','.','.'},};\n\nvoid rotate(char c) {\n\tchar field[6][8];\n\tREP(i, 6) {\n\t\tREP(j, 8) {\n\t\t\tfield[i][j] = cube[i][j];\n\t\t}\n\t}\n\n\tswitch(c) {\n\tcase 'U':\n\t\tREP(d, 4) {\n\t\t\tcube[0+dy[d+1]][2+dx[d+1]] = field[0+dy[d]][2+dx[d]];\n\t\t}\n\t\tREP(i, 8) {\n\t\t\tcube[2][i] = field[2][(i+2)%8];\n\t\t}\n\t\tbreak;\n\tcase 'F':\n\t\tREP(d, 4) {\n\t\t\tcube[2+dy[d+1]][2+dx[d+1]] = field[2+dy[d]][2+dx[d]];\n\t\t}\n\t\tcube[1][2] = field[3][1];\n\t\tcube[1][3] = field[2][1];\n\t\tcube[2][4] = field[1][2];\n\t\tcube[3][4] = field[1][3];\n\t\tcube[4][2] = field[3][4];\n\t\tcube[4][3] = field[2][4];\n\t\tcube[2][1] = field[4][2];\n\t\tcube[3][1] = field[4][3];\n\t\tbreak;\n\tcase 'R':\n\t\tREP(d, 4) {\n\t\t\tcube[2+dy[d+1]][4+dx[d+1]] = field[2+dy[d]][4+dx[d]];\n\t\t}\n\t\tcube[0][3] = field[2][3];\n\t\tcube[1][3] = field[3][3];\n\t\tcube[2][3] = field[4][3];\n\t\tcube[3][3] = field[5][3];\n\t\tcube[4][3] = field[3][6];\n\t\tcube[5][3] = field[2][6];\n\t\tcube[2][6] = field[1][3];\n\t\tcube[3][6] = field[0][3];\n\t\tbreak;\n\tcase 'D':\n\t\tREP(d, 4) {\n\t\t\tcube[4+dy[d+1]][2+dx[d+1]] = field[4+dy[d]][2+dx[d]];\n\t\t}\n\t\tREP(i, 8) {\n\t\t\tcube[3][i] = field[3][(i+6)%8];\n\t\t}\n\t\tbreak;\n\tcase 'B':\n\t\tREP(d, 4) {\n\t\t\tcube[2+dy[d+1]][6+dx[d+1]] = field[2+dy[d]][6+dx[d]];\n\t\t}\n\t\tcube[0][2] = field[2][5];\n\t\tcube[0][3] = field[3][5];\n\t\tcube[2][5] = field[5][3];\n\t\tcube[3][5] = field[5][2];\n\t\tcube[5][2] = field[2][0];\n\t\tcube[5][3] = field[3][0];\n\t\tcube[2][0] = field[0][3];\n\t\tcube[3][0] = field[0][2];\n\t\tbreak;\n\tcase 'L':\n\t\tREP(d, 4) {\n\t\t\tcube[2+dy[d+1]][0+dx[d+1]] = field[2+dy[d]][0+dx[d]];\n\t\t}\n\t\tcube[0][2] = field[3][7];\n\t\tcube[1][2] = field[2][7];\n\t\tcube[2][2] = field[0][2];\n\t\tcube[3][2] = field[1][2];\n\t\tcube[4][2] = field[2][2];\n\t\tcube[5][2] = field[3][2];\n\t\tcube[2][7] = field[5][2];\n\t\tcube[3][7] = field[4][2];\n\t\tbreak;\n\tdefault:\n\t\tbreak;\n\t}\n}\n\nint main() {\n\tstring s;\n\tcin >> s;\n\n\tREP(i, s.size()) {\n\t\trotate(s[i]);\n\t}\n\n\tREP(i, 6) {\n\t\tREP(j, 8) {\n\t\t\tcout << cube[i][j];\n\t\t}\n\t\tcout << endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nvoid solve()\n{\n\tstring cube[6] = {  \"..rr....\",\n\t\t\t\t\t\t\"..rr....\",\n\t\t\t\t\t\t\"ggyybbww\",\n\t\t\t\t\t\t\"ggyybbww\",\n\t\t\t\t\t\t\"..oo....\",\n\t\t\t\t\t\t\"..oo....\"};\n\tstring s;\n\tcin >> s;\n\tfor(int i = 0; i < s.size(); ++i)\n\t{\n\t\tif(s[i] == 'U')\n\t\t{\n\t\t\tchar l1 = cube[2][0], l2 = cube[2][1];\n\t\t\tcube[2].erase(cube[2].begin(), cube[2].begin() + 2);\n\t\t\tcube[2] += l1;\n\t\t\tcube[2] += l2;\n\t\t\tl1 = cube[0][2];\n\t\t\tcube[0][2] = cube[1][2];\n\t\t\tcube[1][2] = cube[1][3];\n\t\t\tcube[1][3] = cube[0][3];\n\t\t\tcube[0][3] = l1;\n\t\t}\n\t\telse if(s[i] == 'F')\n\t\t{\n\t\t\tchar l1 = cube[1][2], l2 = cube[1][3];\n\t\t\tcube[1][2] = cube[3][1];\n\t\t\tcube[1][3] = cube[2][1];\n\t\t\tcube[3][1] = cube[4][3];\n\t\t\tcube[2][1] = cube[4][2];\n\t\t\tcube[4][3] = cube[2][4];\n\t\t\tcube[4][2] = cube[3][4];\n\t\t\tcube[2][4] = l1;\n\t\t\tcube[3][4] = l2;\n\t\t\tl1 = cube[2][2];\n\t\t\tcube[2][2] = cube[3][2];\n\t\t\tcube[3][2] = cube[3][3];\n\t\t\tcube[3][3] = cube[2][3];\n\t\t\tcube[2][3] = l1;\n\t\t}\n\t\telse if(s[i] == 'R')\n\t\t{\n\t\t\tchar l1 = cube[0][3], l2 = cube[1][3];\n\t\t\tcube[0][3] = cube[2][3];\n\t\t\tcube[1][3] = cube[3][3];\n\t\t\tcube[2][3] = cube[4][3];\n\t\t\tcube[3][3] = cube[5][3];\n\t\t\tcube[4][3] = cube[3][6];\n\t\t\tcube[5][3] = cube[2][6];\n\t\t\tcube[3][6] = l1;\n\t\t\tcube[2][6] = l2;\n\t\t\tl1 = cube[2][4];\n\t\t\tcube[2][4] = cube[3][4];\n\t\t\tcube[3][4] = cube[3][5];\n\t\t\tcube[3][5] = cube[2][5];\n\t\t\tcube[2][5] = l1;\n\t\t}\n\t\telse if(s[i] == 'D')\n\t\t{\n\t\t\tchar l1 = cube[3][6], l2 = cube[3][7];\n\t\t\tcube[3].erase(cube[3].begin() + 6, cube[3].begin() + 8);\n\t\t\tstring str = \"\";\n\t\t\tstr += l1;\n\t\t\tstr += l2;\n\t\t\tstr += cube[3];\n\t\t\tcube[3] = str;\n\t\t\tl1 = cube[4][2];\n\t\t\tcube[4][2] = cube[5][2];\n\t\t\tcube[5][2] = cube[5][3];\n\t\t\tcube[5][3] = cube[4][3];\n\t\t\tcube[4][3] = l1;\n\t\t}\n\t\telse if(s[i] == 'B')\n\t\t{\n\t\t\tchar l1 = cube[0][2], l2 = cube[0][3];\n\t\t\tcube[0][2] = cube[2][5];\n\t\t\tcube[0][3] = cube[3][5];\n\t\t\tcube[2][5] = cube[5][3];\n\t\t\tcube[3][5] = cube[5][2];\n\t\t\tcube[5][3] = cube[3][0];\n\t\t\tcube[5][2] = cube[2][0];\n\t\t\tcube[2][0] = l2;\n\t\t\tcube[3][0] = l1;\n\t\t\tl1 = cube[2][6];\n\t\t\tcube[2][6] = cube[3][6];\n\t\t\tcube[3][6] = cube[3][7];\n\t\t\tcube[3][7] = cube[2][7];\n\t\t\tcube[2][7] = l1;\n\t\t}\n\t\telse if(s[i] == 'L')\n\t\t{\n\t\t\tchar l1 = cube[5][2], l2 = cube[4][2];\n\t\t\tcube[5][2] = cube[3][2];\n\t\t\tcube[4][2] = cube[2][2];\n\t\t\tcube[3][2] = cube[1][2];\n\t\t\tcube[2][2] = cube[0][2];\n\t\t\tcube[1][2] = cube[2][7];\n\t\t\tcube[0][2] = cube[3][7];\n\t\t\tcube[2][7] = l1;\n\t\t\tcube[3][7] = l2;\n\t\t\tl1 = cube[2][0];\n\t\t\tcube[2][0] = cube[3][0];\n\t\t\tcube[3][0] = cube[3][1];\n\t\t\tcube[3][1] = cube[2][1];\n\t\t\tcube[2][1] = l1;\n\t\t}\n\t}\n\tfor(int i = 0; i < 6; ++i)\n\t{\n\t\tcout << cube[i] << endl;\n\t}\n}\n\nint main()\n{\n\tsolve();\n\treturn(0);\n}"
  },
  {
    "language": "C++",
    "code": "/*\nHokudai Practice Contest 2014\nE - Cube of Two\n\nティツァツ」テヲツウツ陛ッツシツ堙」ツつキテ」ツδ淌」ツδ・テ」ツδャテ」ツδシテ」ツつキテ」ツδァテ」ツδウ\nテ・ツ崢榲ィツサツ「テ」ツつ津ゥツ?妥・ツシツオテ」ツ?」テ」ツ?ヲテ」ツつキテ」ツδ淌」ツδ・テ」ツδャテ」ツδシテ」ツつキテ」ツδァテ」ツδウテ」ツ?凖」ツつ凝」ツ??\nテ」ツつキテ」ツδ淌」ツδ・テ」ツδャテ」ツδシテ」ツつキテ」ツδァテ」ツδウテゥツδィテ・ツ按?」ツ?陛」ツ?暗ヲツ崢クテ」ツ?妥」ツつ古」ツ?ーテ」ツ?づ」ツ?ィテ」ツ?ッテ」ツつ?」ツつ凝」ツ??」ツ?妥」ツ?づ」ツ?療」ツ?凝」ツ?療」ツ?敕」ツつ古」ツ?古」ツ?、テ」ツつ嘉」ツ??」ツ??\n\nテヲツ卍づゥツ鳴禿ィツィツ暗ァツョツ療ゥツ?湘ッツシツ唹(|S|)\n*/\n\n#include<iostream>\n#define rep(i,n) for(int i=0;i<(int)n;i++)\nusing namespace std;\n\n/*\nテ・ツアツ陛ゥツ鳴凝・ツ崢ウテ」ツ?ョテ、ツスツ催ァツスツョテ」ツ?ォテ、ツサツ・テ、ツクツ凝」ツ?ョテ」ツつ暗」ツ??」ツ?ェテァツ閉ェテ・ツ渉キテ、ツサツ佚」ツ?妥」ツつ津ィツ。ツ古」ツ??\n.. .. 00 01 .. .. .. ..\n.. .. 02 03 .. .. .. ..\n04 05 08 09 12 13 16 17\n06 07 10 11 14 15 18 19\n.. .. 20 21 .. .. .. ..\n.. .. 22 23 .. .. .. ..\n*/\n\n//テ・ツ青?」ツつュテ」ツδ・テ」ツδシテ」ツδ姪」ツ?ョティツ。ツィテゥツ敖「2テδ?テδ?テ」ツつ津ィツィツ佚ヲツ?カテ」ツ?凖」ツつ凝ゥツ?催・ツ按?\nint c[24];\n\n//テ・ツ崢榲ィツサツ「テヲツ督催、ツスツ愿」ツ?ォテ」ツつ暗」ツ?」テ」ツ?ヲテ」ツ??」ツ?ゥテ」ツ?ョテゥツ敖「テ」ツ?古・ツ按・テ」ツ?ョテ」ツ?ゥテ」ツ?ョテゥツ敖「テ」ツ?ォテァツァツサテ・ツ仰陛」ツ?凖」ツつ凝」ツ?凝」ツつ津」ツつキテ」ツδ淌」ツδ・テ」ツδャテ」ツδシテ」ツつキテ」ツδァテ」ツδウテ」ツ?凖」ツつ凝ゥツ鳴「テヲツ閉ーテ」ツ?づ」ツ?、テ」ツつ嘉」ツ??\nvoid rot(char r){\n  int t;\n  if(r=='U'){\n    t = c[4]; c[4] = c[8]; c[8] = c[12]; c[12] = c[16]; c[16] = t;\n    t = c[5]; c[5] = c[9]; c[9] = c[13]; c[13] = c[17]; c[17] = t;\n    t = c[0]; c[0] = c[2]; c[2] = c[3]; c[3] = c[1]; c[1] = t; \n  }\n  else if(r=='F'){\n    t = c[2]; c[2] = c[7]; c[7] = c[21]; c[21] = c[12]; c[12] = t;\n    t = c[3]; c[3] = c[5]; c[5] = c[20]; c[20] = c[14]; c[14] = t;\n    t = c[8]; c[8] = c[10]; c[10] = c[11]; c[11] = c[9]; c[9] = t;\n  }\n  else if(r=='R'){\n    t = c[1]; c[1] = c[9]; c[9] = c[21]; c[21] = c[18]; c[18] = t;\n    t = c[3]; c[3] = c[11]; c[11] = c[23]; c[23] = c[16]; c[16] = t;\n    t = c[12]; c[12] = c[14]; c[14] = c[15]; c[15] = c[13]; c[13] = t;\n  }\n  else if(r=='D'){\n    t = c[6]; c[6] = c[18]; c[18] = c[14]; c[14] = c[10]; c[10] = t;\n    t = c[7]; c[7] = c[19]; c[19] = c[15]; c[15] = c[11]; c[11] = t;\n    t = c[20]; c[20] = c[22]; c[22] = c[23]; c[23] = c[21]; c[21] = t;\n  }\n  else if(r=='B'){\n    t = c[0]; c[0] = c[13]; c[13] = c[23]; c[23] = c[6]; c[6] = t;\n    t = c[1]; c[1] = c[15]; c[15] = c[22]; c[22] = c[4]; c[4] = t;\n    t = c[16]; c[16] = c[18]; c[18] = c[19]; c[19] = c[17]; c[17] = t;\n  }\n  else{\n    t = c[0]; c[0] = c[19]; c[19] = c[20]; c[20] = c[8]; c[8] = t;\n    t = c[2]; c[2] = c[17]; c[17] = c[22]; c[22] = c[10]; c[10] = t;\n    t = c[4]; c[4] = c[6]; c[6] = c[7]; c[7] = c[5]; c[5] = t;\n  }\n}\n\n//テ・ツ按敕ヲツ慊淌、ツスツ催ァツスツョテ」ツつ津ヲツ閉ーテ・ツュツ療」ツ?ァティツ。ツィテ」ツ?療」ツ?ヲテ」ツ??」ツつ凝」ツ?淌」ツつ?」ツ??・ツ按敕ヲツ慊淌、ツスツ催ァツスツョテ」ツ?凝」ツつ嘉ィツ可イテ」ツつ津ァツ可ケテ・ツョツ堙」ツ?凖」ツつ凝ゥツ鳴「テヲツ閉ーテ」ツつ津ァツ板ィテ」ツ??」ツつ?\nchar trans(int x){\n  int a = x/4;\n  if(a==0)return 'r';\n  if(a==1)return 'g';\n  if(a==2)return 'y';\n  if(a==3)return 'b';\n  if(a==4)return 'w';\n  return 'o';\n}\n\nint main(){\n  rep(i,24)c[i] = i;\n  string s;\n  cin >> s;\n\n  rep(i,s.size())rot(s[i]);\n\n  cout << \"..\"; rep(i,2)cout << trans(c[i]); cout << \"....\\n\"; \n  cout << \"..\"; rep(i,2)cout << trans(c[i+2]); cout << \"....\\n\";\n  rep(i,2){\n    rep(j,8)cout << trans(c[(j%2)+(j/2)*4+i*2+4]); cout << \"\\n\";\n  }\n  cout << \"..\"; rep(i,2)cout << trans(c[i+20]); cout << \"....\\n\"; \n  cout << \"..\"; rep(i,2)cout << trans(c[i+22]); cout << \"....\\n\";\n}"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#define INF 100000000\n  \n#include <iostream>\n#include <cstdio>\n#include <sstream>\n#include <cmath>\n#include <cstdlib>\n#include <algorithm>\n#include <queue>\n#include <stack>\n#include <limits>\n#include <map>\n#include <string>\n#include <cstring>\n#include <set>\n#include <deque>\n#include <bitset>\n#include <list>\n#include <cctype>\n#include <utility>\n  \nusing namespace std;\n  \ntypedef long long ll;\ntypedef pair <int,int> P;\ntypedef pair <int,P> PP;\n  \nstatic const double EPS = 1e-8;\n  \nint tx[] = {0,1,0,-1};\nint ty[] = {-1,0,1,0};\n  \nvoid opeU(char cube[6][9]){\n  char next[6][9];\n  memcpy(next,cube,sizeof(char) * 6 * 9);\n\n  //red\n  next[0][3] = cube[0][2];\n  next[1][3] = cube[0][3];\n  next[1][2] = cube[1][3];\n  next[0][2] = cube[1][2];\n\n  //white\n  next[2][4] = cube[2][6];\n  next[2][5] = cube[2][7];\n\n  //blue\n  next[2][2] = cube[2][4];\n  next[2][3] = cube[2][5];\n\n  //yellow\n  next[2][0] = cube[2][2];\n  next[2][1] = cube[2][3];\n\n  //green\n  next[2][6] = cube[2][0];\n  next[2][7] = cube[2][1];\n\n  memcpy(cube,next,sizeof(char) * 6 * 9);\n}\n\nvoid opeR(char cube[6][9]){\n  char next[6][9];\n  memcpy(next,cube,sizeof(char) * 6 * 9);\n\n  //blue\n  next[2][5] = cube[2][4];\n  next[3][5] = cube[2][5];\n  next[3][4] = cube[3][5];\n  next[2][4] = cube[3][4];\n\n  //red\n  next[2][6] = cube[1][3];\n  next[3][6] = cube[0][3];\n\n  //white\n  next[5][3] = cube[2][6];\n  next[4][3] = cube[3][6];\n\n  //orange\n  next[2][3] = cube[4][3];\n  next[3][3] = cube[5][3];\n\n  //yellow\n  next[0][3] = cube[2][3];\n  next[1][3] = cube[3][3];\n\n  memcpy(cube,next,sizeof(char) * 6 * 9);\n}\n\nvoid opeL(char cube[6][9]){\n  char next[6][9];\n  memcpy(next,cube,sizeof(char) * 6 * 9);\n\n  //green\n  next[2][1] = cube[2][0];\n  next[3][1] = cube[2][1];\n  next[3][0] = cube[3][1];\n  next[2][0] = cube[3][0];\n\n  //red\n  next[2][2] = cube[0][2];\n  next[3][2] = cube[1][2];\n\n  //yellow\n  next[4][2] = cube[2][2];\n  next[5][2] = cube[3][2];\n\n  //orange\n  next[3][7] = cube[4][2];\n  next[2][7] = cube[5][2];\n\n  //white\n  next[0][2] = cube[3][7];\n  next[1][2] = cube[2][7];\n\n  memcpy(cube,next,sizeof(char) * 6 * 9);\n}\n\nvoid opeF(char cube[6][9]){  \n  char next[6][9];\n  memcpy(next,cube,sizeof(char) * 6 * 9);\n\n  //yellow\n  next[2][3] = cube[2][2];\n  next[3][3] = cube[2][3];\n  next[3][2] = cube[3][3];\n  next[2][2] = cube[3][2];\n  \n  //red\n  next[2][4] = cube[1][2];\n  next[3][4] = cube[1][3];\n\n  //blue\n  next[4][3] = cube[2][4];\n  next[4][2] = cube[3][4];\n\n  //orange\n  next[2][1] = cube[4][3];\n  next[3][1] = cube[4][2];\n\n  //green\n  next[1][3] = cube[2][1];\n  next[1][2] = cube[3][1];\n\n  memcpy(cube,next,sizeof(char) * 6 * 9);\n}\n\nvoid opeD(char cube[6][9]){\n  char next[6][9];\n  memcpy(next,cube,sizeof(char) * 6 * 9);\n\n  //orange\n  next[4][3] = cube[4][2];\n  next[5][3] = cube[4][3];\n  next[5][2] = cube[5][3];\n  next[4][2] = cube[5][2];\n\n  //yellow\n  next[3][4] = cube[3][2];\n  next[3][5] = cube[3][3];\n  \n  //blue\n  next[3][6] = cube[3][4];\n  next[3][7] = cube[3][5];\n\n  //white\n  next[3][0] = cube[3][6];\n  next[3][1] = cube[3][7];\n\n  //green\n  next[3][2] = cube[3][0];\n  next[3][3] = cube[3][1];\n\n  memcpy(cube,next,sizeof(char) * 6 * 9);\n}\n\nvoid opeB(char cube[6][9]){\n  char next[6][9];\n  memcpy(next,cube,sizeof(char) * 6 * 9);\n\n  //white\n  next[2][7] = cube[2][6];\n  next[3][7] = cube[2][7];\n  next[3][6] = cube[3][7];\n  next[2][6] = cube[3][6];\n\n  //red\n  next[3][0] = cube[0][2];\n  next[2][0] = cube[0][3];\n\n  //green\n  next[5][2] = cube[2][0];\n  next[5][3] = cube[3][0];\n\n  //orange\n  next[3][5] = cube[5][2];\n  next[2][5] = cube[5][3];\n\n  //blue\n  next[0][2] = cube[2][5];\n  next[0][3] = cube[3][5];\n\n  memcpy(cube,next,sizeof(char) * 6 * 9);\n}\n\nvoid disp(char cube[6][9]){\n  for(int y=0;y<6;y++){\n    for(int x=0;x<8;x++){\n      printf(\"%c\",cube[y][x]);\n    }\n    printf(\"\\n\");\n  }\n}\n\nint main(){\n\n  char cube[][9] = {\n    \"..rr....\",\n    \"..rr....\",\n    \"ggyybbww\",\n    \"ggyybbww\",\n    \"..oo....\",\n    \"..oo....\"\n  };\n\n  string command;\n  while(cin >> command){\n    // char tmp[6][9];\n    // memcpy(tmp,cube,sizeof(char) * 6 * 9);\n\n    for(int i=0;i<command.size();i++){\n      if(command[i] == 'U'){\n        opeU(cube);\n      }\n      else if(command[i] == 'F'){\n        opeF(cube);\n      }\n      else if(command[i] == 'R'){\n        opeR(cube);\n      }\n      else if(command[i] == 'D'){\n        opeD(cube);\n      }\n      else if(command[i] == 'B'){\n        opeB(cube);\n      }\n      else if(command[i] == 'L'){\n        opeL(cube);\n      }\n    }\n    disp(cube);\n    // memcpy(cube,tmp,sizeof(char) * 6 * 9);\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#define INF 100000000\n  \n#include <iostream>\n#include <cstdio>\n#include <sstream>\n#include <cmath>\n#include <cstdlib>\n#include <algorithm>\n#include <queue>\n#include <stack>\n#include <limits>\n#include <map>\n#include <string>\n#include <cstring>\n#include <set>\n#include <deque>\n#include <bitset>\n#include <list>\n#include <cctype>\n#include <utility>\n  \nusing namespace std;\n  \ntypedef long long ll;\ntypedef pair <int,int> P;\ntypedef pair <int,P> PP;\n  \nstatic const double EPS = 1e-8;\n  \nint tx[] = {0,1,0,-1};\nint ty[] = {-1,0,1,0};\n  \nvoid opeU(char cube[6][9]){\n  char next[6][9];\n  memcpy(next,cube,sizeof(char) * 6 * 9);\n\n  //red\n  next[0][3] = cube[0][2];\n  next[1][3] = cube[0][3];\n  next[1][2] = cube[1][3];\n  next[0][2] = cube[1][2];\n\n  //white\n  next[2][5] = cube[2][6];\n  next[2][4] = cube[2][7];\n\n  //blue\n  next[2][2] = cube[2][4];\n  next[2][3] = cube[2][5];\n\n  //yellow\n  next[2][0] = cube[2][2];\n  next[2][1] = cube[2][3];\n\n  //green\n  next[2][6] = cube[2][0];\n  next[2][7] = cube[2][1];\n\n  memcpy(cube,next,sizeof(char) * 6 * 9);\n}\n\nvoid opeR(char cube[6][9]){\n  char next[6][9];\n  memcpy(next,cube,sizeof(char) * 6 * 9);\n\n  //blue\n  next[2][5] = cube[2][4];\n  next[3][5] = cube[2][5];\n  next[3][4] = cube[3][5];\n  next[2][4] = cube[3][4];\n\n  //red\n  next[2][6] = cube[1][3];\n  next[3][6] = cube[0][3];\n\n  //white\n  next[5][3] = cube[2][6];\n  next[4][3] = cube[3][6];\n\n  //orange\n  next[2][3] = cube[4][3];\n  next[3][3] = cube[5][3];\n\n  //yellow\n  next[0][3] = cube[2][3];\n  next[1][3] = cube[3][3];\n\n  memcpy(cube,next,sizeof(char) * 6 * 9);\n}\n\nvoid opeL(char cube[6][9]){\n  char next[6][9];\n  memcpy(next,cube,sizeof(char) * 6 * 9);\n\n  //green\n  next[2][1] = cube[2][0];\n  next[3][1] = cube[2][1];\n  next[3][0] = cube[3][1];\n  next[2][0] = cube[3][0];\n\n  //red\n  next[2][2] = cube[0][2];\n  next[3][2] = cube[1][2];\n\n  //yellow\n  next[4][2] = cube[2][2];\n  next[5][2] = cube[3][2];\n\n  //orange\n  next[3][7] = cube[4][2];\n  next[2][7] = cube[5][2];\n\n  //white\n  next[0][2] = cube[3][7];\n  next[1][2] = cube[2][7];\n\n  memcpy(cube,next,sizeof(char) * 6 * 9);\n}\n\nvoid opeF(char cube[6][9]){  \n  char next[6][9];\n  memcpy(next,cube,sizeof(char) * 6 * 9);\n\n  //yellow\n  next[2][3] = cube[2][2];\n  next[3][3] = cube[2][3];\n  next[3][2] = cube[3][3];\n  next[2][2] = cube[3][2];\n  \n  //red\n  next[2][4] = cube[1][2];\n  next[3][4] = cube[1][3];\n\n  //blue\n  next[4][3] = cube[2][4];\n  next[4][2] = cube[3][4];\n\n  //orange\n  next[2][1] = cube[4][3];\n  next[3][1] = cube[4][2];\n\n  //green\n  next[1][3] = cube[2][1];\n  next[1][2] = cube[3][1];\n\n  memcpy(cube,next,sizeof(char) * 6 * 9);\n}\n\nvoid opeD(char cube[6][9]){\n  char next[6][9];\n  memcpy(next,cube,sizeof(char) * 6 * 9);\n\n  //orange\n  next[4][3] = cube[4][2];\n  next[5][3] = cube[4][3];\n  next[5][2] = cube[5][3];\n  next[4][2] = cube[5][2];\n\n  //yellow\n  next[3][4] = cube[3][2];\n  next[3][5] = cube[3][3];\n  \n  //blue\n  next[3][6] = cube[3][4];\n  next[3][7] = cube[3][5];\n\n  //white\n  next[3][0] = cube[3][6];\n  next[3][1] = cube[3][7];\n\n  //green\n  next[3][2] = cube[3][0];\n  next[3][3] = cube[3][1];\n\n  memcpy(cube,next,sizeof(char) * 6 * 9);\n}\n\nvoid opeB(char cube[6][9]){\n  char next[6][9];\n  memcpy(next,cube,sizeof(char) * 6 * 9);\n\n  //white\n  next[2][7] = cube[2][6];\n  next[3][7] = cube[2][7];\n  next[3][6] = cube[3][7];\n  next[2][6] = cube[3][6];\n\n  //red\n  next[3][0] = cube[0][2];\n  next[2][0] = cube[0][3];\n\n  //green\n  next[5][2] = cube[2][0];\n  next[5][3] = cube[3][0];\n\n  //orange\n  next[3][5] = cube[5][2];\n  next[2][5] = cube[5][3];\n\n  //blue\n  next[0][2] = cube[2][5];\n  next[0][3] = cube[3][5];\n\n  memcpy(cube,next,sizeof(char) * 6 * 9);\n}\n\nvoid disp(char cube[6][9]){\n  for(int y=0;y<6;y++){\n    for(int x=0;x<8;x++){\n      printf(\"%c\",cube[y][x]);\n    }\n    printf(\"\\n\");\n  }\n}\n\nint main(){\n\n  char cube[][9] = {\n    \"..rr....\",\n    \"..rr....\",\n    \"ggyybbww\",\n    \"ggyybbww\",\n    \"..oo....\",\n    \"..oo....\"\n  };\n\n  string command;\n  while(cin >> command){\n    // char tmp[6][9];\n    // memcpy(tmp,cube,sizeof(char) * 6 * 9);\n\n    for(int i=0;i<command.size();i++){\n      if(command[i] == 'U'){\n        opeU(cube);\n      }\n      else if(command[i] == 'F'){\n        opeF(cube);\n      }\n      else if(command[i] == 'R'){\n        opeR(cube);\n      }\n      else if(command[i] == 'D'){\n        opeD(cube);\n      }\n      else if(command[i] == 'B'){\n        opeB(cube);\n      }\n      else if(command[i] == 'L'){\n        opeL(cube);\n      }\n    }\n    disp(cube);\n    // memcpy(cube,tmp,sizeof(char) * 6 * 9);\n  }\n}"
  },
  {
    "language": "C++",
    "code": "/*\n * 2498.cc: Cube of Two\n */\n\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<cmath>\n#include<iostream>\n#include<string>\n#include<vector>\n#include<map>\n#include<set>\n#include<stack>\n#include<list>\n#include<queue>\n#include<deque>\n#include<algorithm>\n#include<numeric>\n#include<utility>\n#include<complex>\n#include<functional>\n \nusing namespace std;\n\n/* constant */\n\nconst int rps[6][2][4][2] =\n  {{{{3, 0}, {5, 0}, {2, 0}, {4, 3}},\n    {{3, 2}, {5, 2}, {2, 2}, {4, 1}}},\n   {{{3, 1}, {4, 2}, {2, 1}, {5, 1}},\n    {{3, 3}, {4, 0}, {2, 3}, {5, 3}}},\n   {{{5, 2}, {1, 2}, {4, 2}, {0, 2}},\n    {{5, 3}, {1, 3}, {4, 3}, {0, 3}}},\n   {{{5, 0}, {0, 0}, {4, 0}, {1, 0}},\n    {{5, 1}, {0, 1}, {4, 1}, {1, 1}}},\n   {{{1, 1}, {3, 0}, {0, 2}, {2, 3}},\n    {{1, 3}, {3, 1}, {0, 0}, {2, 2}}},\n   {{{3, 2}, {1, 0}, {2, 1}, {0, 3}},\n    {{3, 3}, {1, 2}, {2, 0}, {0, 1}}}};\n\n/* typedef */\n\n/* global variables */\n\nstring sfs[6];\n\n/* subroutines */\n\nvoid print_dev() {\n  vector<string> dv(6, string(8, '.'));\n  dv[0][2] = sfs[3][0]; dv[0][3] = sfs[3][1];\n  dv[1][2] = sfs[3][2]; dv[1][3] = sfs[3][3];\n  dv[2][0] = sfs[0][0]; dv[2][1] = sfs[0][1];\n  dv[3][0] = sfs[0][2]; dv[3][1] = sfs[0][3];\n  dv[2][2] = sfs[5][0]; dv[2][3] = sfs[5][1];\n  dv[3][2] = sfs[5][2]; dv[3][3] = sfs[5][3];\n  dv[2][4] = sfs[1][0]; dv[2][5] = sfs[1][1];\n  dv[3][4] = sfs[1][2]; dv[3][5] = sfs[1][3];\n  dv[2][6] = sfs[4][0]; dv[2][7] = sfs[4][1];\n  dv[3][6] = sfs[4][2]; dv[3][7] = sfs[4][3];\n  dv[4][2] = sfs[2][0]; dv[4][3] = sfs[2][1];\n  dv[5][2] = sfs[2][2]; dv[5][3] = sfs[2][3];\n\n  for (int i = 0; i < 6; i++) cout << dv[i] << endl;\n}\n\nvoid rot_sf(int i) {\n  char t = sfs[i][2];\n  sfs[i][2] = sfs[i][3]; sfs[i][3] = sfs[i][1]; sfs[i][1] = sfs[i][0];\n  sfs[i][0] = t;\n\n  for (int j = 0; j < 2; j++) {\n    const int (&rp)[4][2] = rps[i][j];\n    t = sfs[rp[3][0]][rp[3][1]];\n    for (int k = 3; k > 0; k--)\n      sfs[rp[k][0]][rp[k][1]] = sfs[rp[k - 1][0]][rp[k - 1][1]];\n    sfs[rp[0][0]][rp[0][1]] = t;\n  }\n}\n\n/* main */\n\n// x-=L, x+=R, y-=D, y+=U, z-=B, z+=F\n//  U    3\n// LFRB 0514\n//  D    2\n//\n//         010,011\n//         110,111\n// 010,110 110,111 111,011 011,010\n// 000,100 100,101 101,001 001,000\n//         100,101\n//         000,001\n\nint main() {\n  sfs[0] = string(4, 'g'); // L\n  sfs[1] = string(4, 'b'); // R\n  sfs[2] = string(4, 'o'); // D\n  sfs[3] = string(4, 'r'); // U\n  sfs[4] = string(4, 'w'); // B\n  sfs[5] = string(4, 'y'); // F\n  //print_dev();\n\n  string s;\n  cin >> s;\n\n  char t;\n  \n  for (int i = 0; i < s.size(); i++)\n    switch (s[i]) {\n    case 'L': rot_sf(0); break;\n    case 'R': rot_sf(1); break;\n    case 'D': rot_sf(2); break;\n    case 'U': rot_sf(3); break;\n    case 'B': rot_sf(4); break;\n    case 'F': rot_sf(5); break;\n    }\n\n  print_dev();\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#define INF 100000000\n  \n#include <iostream>\n#include <cstdio>\n#include <sstream>\n#include <cmath>\n#include <cstdlib>\n#include <algorithm>\n#include <queue>\n#include <stack>\n#include <limits>\n#include <map>\n#include <string>\n#include <cstring>\n#include <set>\n#include <deque>\n#include <bitset>\n#include <list>\n#include <cctype>\n#include <utility>\n  \nusing namespace std;\n  \ntypedef long long ll;\ntypedef pair <int,int> P;\ntypedef pair <int,P> PP;\n  \nstatic const double EPS = 1e-8;\n  \nint tx[] = {0,1,0,-1};\nint ty[] = {-1,0,1,0};\n  \nvoid opeU(char cube[6][9]){\n  char next[6][9];\n  memcpy(next,cube,sizeof(char) * 6 * 9);\n\n  //red\n  next[0][3] = cube[0][2];\n  next[1][3] = cube[0][3];\n  next[1][2] = cube[1][3];\n  next[0][2] = cube[1][2];\n\n  //white\n  next[2][4] = cube[2][6];\n  next[2][5] = cube[2][7];\n\n  //blue\n  next[2][2] = cube[2][4];\n  next[2][3] = cube[2][5];\n\n  //yellow\n  next[2][0] = cube[2][2];\n  next[2][1] = cube[2][3];\n\n  //green\n  next[2][6] = cube[2][0];\n  next[2][7] = cube[2][1];\n\n  memcpy(cube,next,sizeof(char) * 6 * 9);\n}\n\nvoid opeR(char cube[6][9]){\n  char next[6][9];\n  memcpy(next,cube,sizeof(char) * 6 * 9);\n\n  //blue\n  next[2][5] = cube[2][4];\n  next[3][5] = cube[2][5];\n  next[3][4] = cube[3][5];\n  next[2][4] = cube[3][4];\n\n  //red\n  next[2][6] = cube[1][3];\n  next[3][6] = cube[0][3];\n\n  //white\n  next[5][3] = cube[2][6];\n  next[4][3] = cube[3][6];\n\n  //orange\n  next[2][3] = cube[4][3];\n  next[3][3] = cube[5][3];\n\n  //yellow\n  next[0][3] = cube[2][3];\n  next[1][3] = cube[3][3];\n\n  memcpy(cube,next,sizeof(char) * 6 * 9);\n}\n\nvoid opeL(char cube[6][9]){\n  char next[6][9];\n  memcpy(next,cube,sizeof(char) * 6 * 9);\n\n  //green\n  next[2][1] = cube[2][0];\n  next[3][1] = cube[2][1];\n  next[3][0] = cube[3][1];\n  next[2][0] = cube[3][0];\n\n  //red\n  next[2][2] = cube[0][2];\n  next[3][2] = cube[1][2];\n\n  //yellow\n  next[4][2] = cube[2][2];\n  next[5][2] = cube[3][2];\n\n  //orange\n  next[3][7] = cube[4][2];\n  next[2][7] = cube[5][2];\n\n  //white\n  next[0][2] = cube[3][7];\n  next[1][2] = cube[2][7];\n\n  memcpy(cube,next,sizeof(char) * 6 * 9);\n}\n\nvoid opeF(char cube[6][9]){  \n  char next[6][9];\n  memcpy(next,cube,sizeof(char) * 6 * 9);\n\n  //yellow\n  next[2][3] = cube[2][2];\n  next[3][3] = cube[2][3];\n  next[3][2] = cube[3][3];\n  next[2][2] = cube[3][2];\n  \n  //red\n  next[2][4] = cube[1][2];\n  next[3][4] = cube[1][3];\n\n  //blue\n  next[4][3] = cube[2][4];\n  next[4][2] = cube[3][4];\n\n  //orange\n  next[3][1] = cube[4][3];\n  next[2][1] = cube[4][2];\n\n  //green\n  next[1][3] = cube[2][1];\n  next[1][2] = cube[3][1];\n\n  memcpy(cube,next,sizeof(char) * 6 * 9);\n}\n\nvoid opeD(char cube[6][9]){\n  char next[6][9];\n  memcpy(next,cube,sizeof(char) * 6 * 9);\n\n  //orange\n  next[4][3] = cube[4][2];\n  next[5][3] = cube[4][3];\n  next[5][2] = cube[5][3];\n  next[4][2] = cube[5][2];\n\n  //yellow\n  next[3][4] = cube[3][2];\n  next[3][5] = cube[3][3];\n  \n  //blue\n  next[3][6] = cube[3][4];\n  next[3][7] = cube[3][5];\n\n  //white\n  next[3][0] = cube[3][6];\n  next[3][1] = cube[3][7];\n\n  //green\n  next[3][2] = cube[3][0];\n  next[3][3] = cube[3][1];\n\n  memcpy(cube,next,sizeof(char) * 6 * 9);\n}\n\nvoid opeB(char cube[6][9]){\n  char next[6][9];\n  memcpy(next,cube,sizeof(char) * 6 * 9);\n\n  //white\n  next[2][7] = cube[2][6];\n  next[3][7] = cube[2][7];\n  next[3][6] = cube[3][7];\n  next[2][6] = cube[3][6];\n\n  //red\n  next[3][0] = cube[0][2];\n  next[2][0] = cube[0][3];\n\n  //green\n  next[5][2] = cube[2][0];\n  next[5][3] = cube[3][0];\n\n  //orange\n  next[3][5] = cube[5][2];\n  next[2][5] = cube[5][3];\n\n  //blue\n  next[0][2] = cube[2][5];\n  next[0][3] = cube[3][5];\n\n  memcpy(cube,next,sizeof(char) * 6 * 9);\n}\n\nvoid disp(char cube[6][9]){\n  for(int y=0;y<6;y++){\n    for(int x=0;x<8;x++){\n      printf(\"%c\",cube[y][x]);\n    }\n    printf(\"\\n\");\n  }\n}\n\nint main(){\n\n  char cube[][9] = {\n    \"..rr....\",\n    \"..rr....\",\n    \"ggyybbww\",\n    \"ggyybbww\",\n    \"..oo....\",\n    \"..oo....\"\n  };\n\n  string command;\n  while(cin >> command){\n    // char tmp[6][9];\n    // memcpy(tmp,cube,sizeof(char) * 6 * 9);\n\n    for(int i=0;i<command.size();i++){\n      if(command[i] == 'U'){\n        opeU(cube);\n      }\n      else if(command[i] == 'F'){\n        opeF(cube);\n      }\n      else if(command[i] == 'R'){\n        opeR(cube);\n      }\n      else if(command[i] == 'D'){\n        opeD(cube);\n      }\n      else if(command[i] == 'B'){\n        opeB(cube);\n      }\n      else if(command[i] == 'L'){\n        opeL(cube);\n      }\n    }\n    disp(cube);\n    // memcpy(cube,tmp,sizeof(char) * 6 * 9);\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\nusing namespace std;\n\nstring str;\nstring ans[6];\n\nchar c[6] = {'U','F','R','D','B','L'};\n\nint v[6][48] = {{\n     0,  1, 10,  2,  4,  5,  6,  7,\n     8,  9, 11,  3, 12, 13, 14, 15,\n    18, 19, 20, 21, 22, 23, 16, 17,\n    24, 25, 26, 27, 28, 29, 30, 31,\n    32, 33, 34, 35, 36, 37, 38, 39,\n    40, 41, 42, 43, 44, 45, 46, 47\n  },{\n     0,  1,  2,  3,  4,  5,  6,  7,\n     8,  9, 25, 17, 12, 13, 14, 15,\n    16, 34, 26, 18, 10, 21, 22, 23,\n    24, 35, 27, 19, 11, 29, 30, 31,\n    32, 33, 28, 20, 36, 37, 38, 39,\n    40, 41, 42, 43, 44, 45, 46, 47\n  },{\n     0,  1,  2, 19,  4,  5,  6,  7,\n     8,  9, 10, 27, 12, 13, 14, 15,\n    16, 17, 18, 35, 28, 20, 11, 23,\n    24, 25, 26, 43, 29, 21,  3, 31,\n    32, 33, 34, 30, 36, 37, 38, 39,\n    40, 41, 42, 22, 44, 45, 46, 47\n  },{\n     0,  1,  2,  3,  4,  5,  6,  7,\n     8,  9, 10, 11, 12, 13, 14, 15,\n    16, 17, 18, 19, 20, 21, 22, 23,\n    30, 31, 24, 25, 26, 27, 28, 29,\n    32, 33, 42, 34, 36, 37, 38, 39,\n    40, 41, 43, 35, 44, 45, 46, 47\n  },{\n     0,  1, 21, 29,  4,  5,  6,  7,\n     8,  9, 10, 11, 12, 13, 14, 15,\n     3, 17, 18, 19, 20, 43, 30, 22,\n     2, 25, 26, 27, 28, 42, 31, 23,\n    32, 33, 34, 35, 36, 37, 38, 39,\n    40, 41, 16, 24, 44, 45, 46, 47\n  },{\n     0,  1, 31,  3,  4,  5,  6,  7,\n     8,  9, 23, 11, 12, 13, 14, 15,\n    24, 16,  2, 19, 20, 21, 22, 42,\n    25, 17, 10, 27, 28, 29, 30, 34,\n    32, 33, 18, 35, 36, 37, 38, 39,\n    40, 41, 26, 43, 44, 45, 46, 47\n  }\n};\n\nvoid solve(){\n  for(int i=0;i<str.size();i++){\n    for(int j=0;j<6;j++){\n      if(str[i] == c[j]){\n        int tmp[6][8];\n        for(int k=0;k<48;k++) tmp[k/8][k%8] = ans[v[j][k]/8][v[j][k]%8];\n        for(int k=0;k<48;k++) ans[k/8][k%8] = tmp[k/8][k%8];\n        break;\n      }\n    }\n  }\n}\n\nint main(){\n  while(cin >> str){\n    for(int i=0;i<2;i++) ans[i] = \"..rr....\";\n    for(int i=2;i<4;i++) ans[i] = \"ggyybbww\";\n    for(int i=4;i<6;i++) ans[i] = \"..oo....\";\n    solve();\n    for(int i=0;i<6;i++) cout << ans[i] << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <climits>\n#include <cassert>\n#include <iostream>\n#include <iomanip>\n#include <sstream>\n#include <algorithm>\n#include <numeric>\n#include <complex>\n#include <stack>\n#include <queue>\n#include <list>\n#include <set>\n#include <map>\n#include <bitset>\n#include <functional>\n#include <iterator>\n\nusing namespace std;\n\n#define dump(n) cout<<\"# \"<<#n<<'='<<(n)<<endl\n#define repi(i,a,b) for(int i=int(a);i<int(b);i++)\n#define peri(i,a,b) for(int i=int(b);i-->int(a);)\n#define rep(i,n) repi(i,0,n)\n#define per(i,n) peri(i,0,n)\n#define iter(c) __typeof__((c).begin())\n#define foreach(i,c) for(iter(c) i=(c).begin();i!=(c).end();++i)\n#define all(c) (c).begin(),(c).end()\n#define mp make_pair\n\ntypedef unsigned int uint;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef vector<double> vd;\ntypedef vector<vd> vvd;\ntypedef vector<string> vs;\ntypedef pair<int,int> pii;\n\nconst int INFTY=1<<29;\nconst double EPS=1e-9;\n\ntemplate<typename T1,typename T2>\nostream& operator<<(ostream& os,const pair<T1,T2>& p){\n\treturn os<<'('<<p.first<<','<<p.second<<')';\n}\ntemplate<typename T>\nostream& operator<<(ostream& os,const vector<T>& a){\n\tos<<'[';\n\trep(i,a.size()) os<<(i?\" \":\"\")<<a[i];\n\treturn os<<']';\n}\n\nvoid rotate4(char& a,char& b,char& c,char& d)\n{\n\tchar x=a;\n\ta=b; b=c; c=d; d=x;\n}\n\nvoid turn_u(string* s)\n{\n\trotate4(s[0][2],s[1][2],s[1][3],s[0][3]);\n\tstd::rotate(s[2].begin(),s[2].begin()+2,s[2].end());\n}\nvoid turn_f(string* s)\n{\n\trotate4(s[2][2],s[3][2],s[3][3],s[2][3]);\n\trotate4(s[1][2],s[3][1],s[4][3],s[2][4]);\n\trotate4(s[1][3],s[2][1],s[4][2],s[3][4]);\n}\nvoid turn_r(string* s)\n{\n\trotate4(s[2][4],s[3][4],s[3][5],s[2][5]);\n\trotate4(s[0][3],s[2][3],s[4][3],s[3][6]);\n\trotate4(s[1][3],s[3][3],s[5][3],s[2][6]);\n}\nvoid turn_d(string* s)\n{\n\trotate4(s[4][2],s[5][2],s[5][3],s[4][3]);\n\tstd::rotate(s[3].begin(),s[3].begin()+6,s[3].end());\n}\nvoid turn_b(string* s)\n{\n\trotate4(s[2][6],s[3][6],s[3][7],s[2][7]);\n\trotate4(s[0][2],s[2][5],s[5][3],s[3][0]);\n\trotate4(s[0][3],s[3][5],s[5][2],s[2][0]);\n}\nvoid turn_l(string* s)\n{\n\trotate4(s[2][0],s[3][0],s[3][1],s[2][1]);\n\trotate4(s[0][2],s[3][7],s[4][2],s[2][2]);\n\trotate4(s[1][2],s[2][7],s[5][2],s[3][2]);\n}\n\nint main()\n{\n\tstring s[6]={\n\t\t\"..rr....\",\n\t\t\"..rr....\",\n\t\t\"ggyybbww\",\n\t\t\"ggyybbww\",\n\t\t\"..oo....\",\n\t\t\"..oo....\",\n\t};\n\t\n\tstring cmd; cin>>cmd;\n\trep(i,cmd.size())\n\t\tswitch(cmd[i]){\n\t\t\tcase 'U': turn_u(s); break;\n\t\t\tcase 'F': turn_f(s); break;\n\t\t\tcase 'R': turn_r(s); break;\n\t\t\tcase 'D': turn_d(s); break;\n\t\t\tcase 'B': turn_b(s); break;\n\t\t\tcase 'L': turn_l(s); break;\n\t\t}\n\t\n\trep(i,6)\n\t\tcout<<s[i]<<endl;\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <complex>\n#include <vector>\n#include <algorithm>\n#include <cstring>\n#include <cassert>\n#include <cstdio>\nusing namespace std;\n\nint d[6][8][2] = {\n  1,0,1,3,2,0,2,3,4,0,4,3,3,0,3,3,\n  0,2,0,1,3,3,3,2,5,0,5,3,2,1,2,0,\n  0,3,0,2,1,3,1,2,5,3,5,2,4,1,4,0,\n  1,2,1,1,3,2,3,1,4,2,4,1,2,2,2,1,\n  0,0,0,3,2,3,2,2,5,2,5,1,3,1,3,0,\n  0,1,0,0,4,3,4,2,5,1,5,0,1,1,1,0\n};\n\nstruct Cube {\n  Cube() {\n    string s = \"rybgwo\";\n    for (int i=0;i<6; ++i)\n      for (int j=0; j<4; ++j)\n        a[i][j] = s[i];\n  }\n  char a[6][4];\n  void rotate(char c) {\n    int id = string(\"UFRDBL\").find(c);\n    for (int i=0; i<6; ++i) {\n      int j1 = d[id][i][0];\n      int k1 = d[id][i][1];\n      int j2 = d[id][(i+2)%8][0];\n      int k2 = d[id][(i+2)%8][1];\n      // printf(\"%d,%d  -  %d,%d\\n\",j1,k1,j2,k2);\n      swap(a[j1][k1], a[j2][k2]);\n    }\n    int id2 = string(\"UFRLBD\").find(c);\n    for (int i=0; i<3; ++i) {\n      swap(a[id2][i],a[id2][(i+1)%4]);\n    }\n  }\n  void print() {\n    printf(\"..%c%c....\\n\",a[0][0],a[0][3]);\n    printf(\"..%c%c....\\n\",a[0][1],a[0][2]);    \n    printf(\"%c%c%c%c%c%c%c%c\\n\",a[3][0],a[3][3],a[1][0],a[1][3],a[2][0],a[2][3],a[4][0],a[4][3]);\n    printf(\"%c%c%c%c%c%c%c%c\\n\",a[3][1],a[3][2],a[1][1],a[1][2],a[2][1],a[2][2],a[4][1],a[4][2]);\n    printf(\"..%c%c....\\n\",a[5][0],a[5][3]);\n    printf(\"..%c%c....\\n\",a[5][1],a[5][2]);\n  }\n};\n\nint main() {\n  string s;\n  while(cin >> s) {\n    Cube cube;\n    for (int i=0;i<s.size(); ++i) {\n      cube.rotate(s[i]);\n    }\n    cube.print();  \n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n\nusing namespace std;\nint main()\n{\n  string s;\n  for(;cin>>s;)\n    {\n      \n      string cube[]=\n\t{\n\t  \"..rr....\",\n\t  \"..rr....\",\n\t  \"ggyybbww\",\n\t  \"ggyybbww\",\n\t  \"..oo....\",\n\t  \"..oo....\"\n\t};\n      /*      \n      string cube[]=\n\t{\n\t  \"..12....\",\n\t  \"..34....\",\n\t  \"56789abc\",\n\t  \"defghijk\",\n\t  \"..lm....\",\n\t  \"..op....\"\n\t  };\n      */\n      for(int i=0;i<s.size();i++)\n\t{\n\t  if(s[i]=='U')\n\t    {\n\t      string tmp;\n\t      //移動色\n\t      tmp+=cube[2][2];\n\t      tmp+=cube[2][3];\n\t      tmp+=cube[2][4];\n\t      tmp+=cube[2][5];\n\t      tmp+=cube[2][6];\n\t      tmp+=cube[2][7];\n\t      tmp+=cube[2][0];\n\t      tmp+=cube[2][1];\n\t      //色移動\n\t      cube[2][0]=tmp[0];\n\t      cube[2][1]=tmp[1];\n\t      cube[2][2]=tmp[2];\n\t      cube[2][3]=tmp[3];\n\t      cube[2][4]=tmp[4];\n\t      cube[2][5]=tmp[5];\n\t      cube[2][6]=tmp[6];\n\t      cube[2][7]=tmp[7];\n\t      //前面移動\n\t      tmp=\"\";\n\t      tmp+=cube[0][2];\n\t      tmp+=cube[0][3];\n\t      tmp+=cube[1][3];\n\t      tmp+=cube[1][2];\n\t      cube[0][3]=tmp[0];\n\t      cube[1][3]=tmp[1];\n\t      cube[1][2]=tmp[2];\n\t      cube[0][2]=tmp[3];\n\t    }\n\t  else if(s[i]=='F')\n\t    {\n\t      string tmp;\n\t      //移動色\n\t      tmp+=cube[3][1];\n\t      tmp+=cube[2][1];\n\t      tmp+=cube[1][2];\n\t      tmp+=cube[1][3];\n\t      tmp+=cube[2][4];\n\t      tmp+=cube[3][4];\n\t      tmp+=cube[4][3];\n\t      tmp+=cube[4][2];\n\t      //色移動\n\t      cube[1][2]=tmp[0];\n\t      cube[1][3]=tmp[1];\n\t      cube[2][4]=tmp[2];\n\t      cube[3][4]=tmp[3];\n\t      cube[4][3]=tmp[4];\n\t      cube[4][2]=tmp[5];\n\t      cube[3][1]=tmp[6];\n\t      cube[2][1]=tmp[7];\n\t      //前面移動\n\t      tmp=\"\";\n\t      tmp+=cube[2][2];\n\t      tmp+=cube[2][3];\n\t      tmp+=cube[3][3];\n\t      tmp+=cube[3][2];\n\t      cube[2][3]=tmp[0];\n\t      cube[3][3]=tmp[1];\n\t      cube[3][2]=tmp[2];\n\t      cube[2][2]=tmp[3];\n\n\t    }\n\t  else if(s[i]=='R')\n\t    {\n\t      string tmp;\n\t      //移動色\n\t      tmp+=cube[2][3];\n\t      tmp+=cube[3][3];\n\t      tmp+=cube[4][3];\n\t      tmp+=cube[5][3];\n\t      tmp+=cube[3][6];\n\t      tmp+=cube[2][6];\n\t      tmp+=cube[1][3];\n\t      tmp+=cube[0][3];\n\t      //色移動\n\t      cube[0][3]=tmp[0];\n\t      cube[1][3]=tmp[1];\n\t      cube[2][3]=tmp[2];\n\t      cube[3][3]=tmp[3];\n\t      cube[4][3]=tmp[4];\n\t      cube[5][3]=tmp[5];\n\t      cube[2][6]=tmp[6];\n\t      cube[3][6]=tmp[7];\n\t      //前面移動\n\t      tmp=\"\";\n\t      tmp+=cube[2][4];\n\t      tmp+=cube[2][5];\n\t      tmp+=cube[3][5];\n\t      tmp+=cube[3][4];\n\t      cube[2][5]=tmp[0];\n\t      cube[3][5]=tmp[1];\n\t      cube[3][4]=tmp[2];\n\t      cube[2][4]=tmp[3];\n\n\t    }\n\t  else if(s[i]=='D')\n\t    {\n\t      string tmp;\n\t      //移動色\n\t      tmp+=cube[3][6];\n\t      tmp+=cube[3][7];\n\t      tmp+=cube[3][0];\n\t      tmp+=cube[3][1];\n\t      tmp+=cube[3][2];\n\t      tmp+=cube[3][3];\n\t      tmp+=cube[3][4];\n\t      tmp+=cube[3][5];\n\t      //色移動\n\t      cube[3][0]=tmp[0];\n\t      cube[3][1]=tmp[1];\n\t      cube[3][2]=tmp[2];\n\t      cube[3][3]=tmp[3];\n\t      cube[3][4]=tmp[4];\n\t      cube[3][5]=tmp[5];\n\t      cube[3][6]=tmp[6];\n\t      cube[3][7]=tmp[7];\n\t      //前面移動\n\t      tmp=\"\";\n\t      tmp+=cube[4][2];\n\t      tmp+=cube[4][3];\n\t      tmp+=cube[5][3];\n\t      tmp+=cube[5][2];\n\t      cube[4][3]=tmp[0];\n\t      cube[5][3]=tmp[1];\n\t      cube[5][2]=tmp[2];\n\t      cube[4][2]=tmp[3];\n\n\t    }\n\t  else if(s[i]=='B')\n\t    {\n\t      string tmp;\n\t      //移動色\n\t      tmp+=cube[2][0];\n\t      tmp+=cube[3][0];\n\t      tmp+=cube[5][2];\n\t      tmp+=cube[5][3];\n\t      tmp+=cube[3][5];\n\t      tmp+=cube[2][5];\n\t      tmp+=cube[0][3];\n\t      tmp+=cube[0][2];\n\t      //色移動\n\t      cube[5][2]=tmp[0];\n\t      cube[5][3]=tmp[1];\n\t      cube[3][5]=tmp[2];\n\t      cube[2][5]=tmp[3];\n\t      cube[0][3]=tmp[4];\n\t      cube[0][2]=tmp[5];\n\t      cube[2][0]=tmp[6];\n\t      cube[3][0]=tmp[7];\n\t      //前面移動\n\t      tmp=\"\";\n\t      tmp+=cube[2][6];\n\t      tmp+=cube[2][7];\n\t      tmp+=cube[3][7];\n\t      tmp+=cube[3][6];\n\t      cube[2][7]=tmp[0];\n\t      cube[3][7]=tmp[1];\n\t      cube[3][6]=tmp[2];\n\t      cube[2][6]=tmp[3];\n\n\t    }\n\t  else if(s[i]=='L')\n\t    {\n\t      string tmp;\n\t      //移動色\n\t      tmp+=cube[3][7];\n\t      tmp+=cube[2][7];\n\t      tmp+=cube[0][2];\n\t      tmp+=cube[1][2];\n\t      tmp+=cube[2][2];\n\t      tmp+=cube[3][2];\n\t      tmp+=cube[5][2];\n\t      tmp+=cube[4][2];\n\t      //色移動\n\t      cube[0][2]=tmp[0];\n\t      cube[1][2]=tmp[1];\n\t      cube[2][2]=tmp[2];\n\t      cube[3][2]=tmp[3];\n\t      cube[4][2]=tmp[4];\n\t      cube[5][2]=tmp[5];\n\t      cube[2][7]=tmp[6];\n\t      cube[3][7]=tmp[7];\n\t      //前面移動\n\t      tmp=\"\";\n\t      tmp+=cube[2][0];\n\t      tmp+=cube[2][1];\n\t      tmp+=cube[3][1];\n\t      tmp+=cube[3][0];\n\t      cube[2][1]=tmp[0];\n\t      cube[3][1]=tmp[1];\n\t      cube[3][0]=tmp[2];\n\t      cube[2][0]=tmp[3];\n\n\t    }\n\t}\n      for(int i=0;i<6;i++)\n\tcout<<cube[i]<<endl;\n\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nint main(void) {\n\tstring banmen[6]={\n\t\t\"..rr....\",\n\t\t\"..rr....\",\n\t\t\"ggyybbww\",\n\t\t\"ggyybbww\",\n\t\t\"..oo....\",\n\t\t\"..oo....\"\n\t};\n\tchar t1,t2;\n\tfor(char c;cin>>c;) {\n\t\tswitch(c) {\n\t\t\tcase 'U':\n\t\t\t\tt1=banmen[2][0];\n\t\t\t\tt2=banmen[2][1];\n\t\t\t\tbanmen[2][0]=banmen[2][2];\n\t\t\t\tbanmen[2][1]=banmen[2][3];\n\t\t\t\tbanmen[2][2]=banmen[2][4];\n\t\t\t\tbanmen[2][3]=banmen[2][5];\n\t\t\t\tbanmen[2][4]=banmen[2][6];\n\t\t\t\tbanmen[2][5]=banmen[2][7];\n\t\t\t\tbanmen[2][6]=t1;\n\t\t\t\tbanmen[2][7]=t2;\n\n\t\t\t\tt1=banmen[0][2];\n\t\t\t\tbanmen[0][2]=banmen[1][2];\n\t\t\t\tbanmen[1][2]=banmen[1][3];\n\t\t\t\tbanmen[1][3]=banmen[0][3];\n\t\t\t\tbanmen[0][3]=t1;\n\t\t\t\tbreak;\n\t\t\tcase 'F':\n\t\t\t\tt1=banmen[1][2];\n\t\t\t\tt2=banmen[1][3];\n\t\t\t\tbanmen[1][2]=banmen[3][1];\n\t\t\t\tbanmen[1][3]=banmen[2][1];\n\t\t\t\tbanmen[3][1]=banmen[4][3];\n\t\t\t\tbanmen[2][1]=banmen[4][2];\n\t\t\t\tbanmen[4][3]=banmen[2][4];\n\t\t\t\tbanmen[4][2]=banmen[3][4];\n\t\t\t\tbanmen[2][4]=t1;\n\t\t\t\tbanmen[3][4]=t2;\n\n\t\t\t\tt1=banmen[2][2];\n\t\t\t\tbanmen[2][2]=banmen[3][2];\n\t\t\t\tbanmen[3][2]=banmen[3][3];\n\t\t\t\tbanmen[3][3]=banmen[2][3];\n\t\t\t\tbanmen[2][3]=t1;\n\t\t\t\tbreak;\n\t\t\tcase 'R':\n\t\t\t\tt1=banmen[0][3];\n\t\t\t\tt2=banmen[1][3];\n\t\t\t\tbanmen[0][3]=banmen[2][3];\n\t\t\t\tbanmen[1][3]=banmen[3][3];\n\t\t\t\tbanmen[2][3]=banmen[4][3];\n\t\t\t\tbanmen[3][3]=banmen[5][3];\n\t\t\t\tbanmen[4][3]=banmen[3][6];\n\t\t\t\tbanmen[5][3]=banmen[2][6];\n\t\t\t\tbanmen[3][6]=t1;\n\t\t\t\tbanmen[2][6]=t2;\n\n\t\t\t\tt1=banmen[2][4];\n\t\t\t\tbanmen[2][4]=banmen[3][4];\n\t\t\t\tbanmen[3][4]=banmen[3][5];\n\t\t\t\tbanmen[3][5]=banmen[2][5];\n\t\t\t\tbanmen[2][5]=t1;\n\t\t\t\tbreak;\n\t\t\tcase 'D':\n\t\t\t\tt1=banmen[3][6];\n\t\t\t\tt2=banmen[3][7];\n\t\t\t\tbanmen[3][6]=banmen[3][4];\n\t\t\t\tbanmen[3][7]=banmen[3][5];\n\t\t\t\tbanmen[3][4]=banmen[3][2];\n\t\t\t\tbanmen[3][5]=banmen[3][3];\n\t\t\t\tbanmen[3][2]=banmen[3][0];\n\t\t\t\tbanmen[3][3]=banmen[3][1];\n\t\t\t\tbanmen[3][0]=t1;\n\t\t\t\tbanmen[3][1]=t2;\n\n\t\t\t\tt1=banmen[4][2];\n\t\t\t\tbanmen[4][2]=banmen[5][2];\n\t\t\t\tbanmen[5][2]=banmen[5][3];\n\t\t\t\tbanmen[5][3]=banmen[4][3];\n\t\t\t\tbanmen[4][3]=t1;\n\t\t\t\tbreak;\n\t\t\tcase 'B':\n\t\t\t\tt1=banmen[0][2];\n\t\t\t\tt2=banmen[0][3];\n\t\t\t\tbanmen[0][2]=banmen[2][5];\n\t\t\t\tbanmen[0][3]=banmen[3][5];\n\t\t\t\tbanmen[2][5]=banmen[5][3];\n\t\t\t\tbanmen[3][5]=banmen[5][2];\n\t\t\t\tbanmen[5][3]=banmen[3][0];\n\t\t\t\tbanmen[5][2]=banmen[2][0];\n\t\t\t\tbanmen[3][0]=t1;\n\t\t\t\tbanmen[2][0]=t2;\n\n\t\t\t\tt1=banmen[2][6];\n\t\t\t\tbanmen[2][6]=banmen[3][6];\n\t\t\t\tbanmen[3][6]=banmen[3][7];\n\t\t\t\tbanmen[3][7]=banmen[2][7];\n\t\t\t\tbanmen[2][7]=t1;\n\t\t\t\tbreak;\n\t\t\tcase 'L':\n\t\t\t\tt1=banmen[4][2];\n\t\t\t\tt2=banmen[5][2];\n\t\t\t\tbanmen[4][2]=banmen[2][2];\n\t\t\t\tbanmen[5][2]=banmen[3][2];\n\t\t\t\tbanmen[2][2]=banmen[0][2];\n\t\t\t\tbanmen[3][2]=banmen[1][2];\n\t\t\t\tbanmen[0][2]=banmen[3][7];\n\t\t\t\tbanmen[1][2]=banmen[2][7];\n\t\t\t\tbanmen[3][7]=t1;\n\t\t\t\tbanmen[2][7]=t2;\n\n\t\t\t\tt1=banmen[2][0];\n\t\t\t\tbanmen[2][0]=banmen[3][0];\n\t\t\t\tbanmen[3][0]=banmen[3][1];\n\t\t\t\tbanmen[3][1]=banmen[2][1];\n\t\t\t\tbanmen[2][1]=t1;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\tfor(int i=0;i<6;i++)cout<<banmen[i]<<endl;\n\t\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nvoid move_surface(char surface[4]) {\n    char tmp = surface[0];\n    surface[0] = surface[2];\n    surface[2] = surface[3];\n    surface[3] = surface[1];\n    surface[1] = tmp;\n}\n\nvoid move8(char *c1, char *c2, char *c3, char *c4, char *c5, char *c6, char *c7, char *c8) {\n    char tmp1 = *c7;\n    char tmp2 = *c8;\n    *c8 = *c6;\n    *c7 = *c5;\n    *c6 = *c4;\n    *c5 = *c3;\n    *c4 = *c2;\n    *c3 = *c1;\n    *c2 = tmp2;\n    *c1 = tmp1;\n}\n\nvoid rotate(char c, char cube[6][4]) {\n    switch (c) {\n        case 'L':\n            move_surface(cube[0]);\n            move8(  &cube[4][0], &cube[4][2], &cube[1][0], &cube[1][2],\n                    &cube[5][0], &cube[5][2], &cube[3][3], &cube[3][1]);\n            break;\n        case 'F':\n            move_surface(cube[1]);\n            move8(  &cube[4][2], &cube[4][3], &cube[2][0], &cube[2][2],\n                    &cube[5][1], &cube[5][0], &cube[0][3], &cube[0][1]);\n            break;\n        case 'R':\n            move_surface(cube[2]);\n            move8(  &cube[4][3], &cube[4][1], &cube[3][0], &cube[3][2],\n                    &cube[5][3], &cube[5][1], &cube[1][3], &cube[1][1]);\n            break;\n        case 'B':\n            move_surface(cube[3]);\n            move8(  &cube[4][1], &cube[4][0], &cube[0][0], &cube[0][2],\n                    &cube[5][2], &cube[5][3], &cube[2][3], &cube[2][1]);\n            break;\n        case 'U':\n            move_surface(cube[4]);\n            move8(  &cube[3][1], &cube[3][0], &cube[2][1], &cube[2][0],\n                    &cube[1][1], &cube[1][0], &cube[0][1], &cube[0][0]);\n            break;\n        case 'D':\n            move_surface(cube[5]);\n            move8(  &cube[3][2], &cube[3][3], &cube[2][2], &cube[2][3],\n                    &cube[1][2], &cube[1][3], &cube[0][2], &cube[0][3]);\n            break;\n    }\n}\n\nvoid print(char cube[6][4]) {\n    cout << \"..\" << cube[4][0] << cube[4][1] << \"....\" << endl;\n    cout << \"..\" << cube[4][2] << cube[4][3] << \"....\" << endl;\n    cout << cube[0][0] << cube[0][1] << cube[1][0] << cube[1][1];\n    cout << cube[2][0] << cube[2][1] << cube[3][0] << cube[3][1] << endl;\n    cout << cube[0][2] << cube[0][3] << cube[1][2] << cube[1][3];\n    cout << cube[2][2] << cube[2][3] << cube[3][2] << cube[3][3] << endl;\n    cout << \"..\" << cube[5][0] << cube[5][1] << \"....\" << endl;\n    cout << \"..\" << cube[5][2] << cube[5][3] << \"....\" << endl;\n}\n\nint main() {\n    string s;\n    char cube[6][4] = {\n        {'g', 'g', 'g', 'g'},\n        {'y', 'y', 'y', 'y'},\n        {'b', 'b', 'b', 'b'},\n        {'w', 'w', 'w', 'w'},\n        {'r', 'r', 'r', 'r'},\n        {'o', 'o', 'o', 'o'}\n    };\n    cin >> s;\n    for (int i=0; i<(int)s.length(); i++) {\n        rotate(s[i], cube);\n    }\n    print(cube);\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#define rep(i,n) for(int i=0;i<n;i++)\nusing namespace std;\n\nint c[24];\n\nvoid rot(char r){\n  int t;\n  if(r=='U'){\n    t = c[4]; c[4] = c[8]; c[8] = c[12]; c[12] = c[16]; c[16] = t;\n    t = c[5]; c[5] = c[9]; c[9] = c[13]; c[13] = c[17]; c[17] = t;\n    t = c[0]; c[0] = c[2]; c[2] = c[3]; c[3] = c[1]; c[1] = t; \n  }\n  else if(r=='F'){\n    t = c[2]; c[2] = c[7]; c[7] = c[21]; c[21] = c[12]; c[12] = t;\n    t = c[3]; c[3] = c[5]; c[5] = c[20]; c[20] = c[14]; c[14] = t;\n    t = c[8]; c[8] = c[10]; c[10] = c[11]; c[11] = c[9]; c[9] = t;\n  }\n  else if(r=='R'){\n    t = c[1]; c[1] = c[9]; c[9] = c[21]; c[21] = c[18]; c[18] = t;\n    t = c[3]; c[3] = c[11]; c[11] = c[23]; c[23] = c[16]; c[16] = t;\n    t = c[12]; c[12] = c[14]; c[14] = c[15]; c[15] = c[13]; c[13] = t;\n  }\n  else if(r=='D'){\n    t = c[6]; c[6] = c[18]; c[18] = c[14]; c[14] = c[10]; c[10] = t;\n    t = c[7]; c[7] = c[19]; c[19] = c[15]; c[15] = c[11]; c[11] = t;\n    t = c[20]; c[20] = c[22]; c[22] = c[23]; c[23] = c[21]; c[21] = t;\n  }\n  else if(r=='B'){\n    t = c[0]; c[0] = c[13]; c[13] = c[23]; c[23] = c[6]; c[6] = t;\n    t = c[1]; c[1] = c[15]; c[15] = c[22]; c[22] = c[4]; c[4] = t;\n    t = c[16]; c[16] = c[18]; c[18] = c[19]; c[19] = c[17]; c[17] = t;\n  }\n  else{\n    t = c[0]; c[0] = c[19]; c[19] = c[20]; c[20] = c[8]; c[8] = t;\n    t = c[2]; c[2] = c[17]; c[17] = c[22]; c[22] = c[10]; c[10] = t;\n    t = c[4]; c[4] = c[6]; c[6] = c[7]; c[7] = c[5]; c[5] = t;\n  }\n}\n\nchar trans(int x){\n  int a = x/4;\n  if(a==0)return 'r';\n  if(a==1)return 'g';\n  if(a==2)return 'y';\n  if(a==3)return 'b';\n  if(a==4)return 'w';\n  return 'o';\n}\n\nint main(){\n  rep(i,24)c[i] = i;\n  string s;\n  cin >> s;\n\n  rep(i,s.size())rot(s[i]);\n\n  cout << \"..\"; rep(i,2)cout << trans(c[i]); cout << \"....\\n\"; \n  cout << \"..\"; rep(i,2)cout << trans(c[i+2]); cout << \"....\\n\";\n  rep(i,2){\n    rep(j,8)cout << trans(c[(j&1)+(j/2)*4+i*2+4]);\n    cout << endl;\n  }\n  cout << \"..\"; rep(i,2)cout << trans(c[i+20]); cout << \"....\\n\"; \n  cout << \"..\"; rep(i,2)cout << trans(c[i+22]); cout << \"....\\n\";\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n\nstring cube[6] = {\n    \"..rr....\",\n    \"..rr....\",\n    \"ggyybbww\",\n    \"ggyybbww\",\n    \"..oo....\",\n    \"..oo....\"\n};\n\nvoid route90(int x, int y){\n    char a = cube[x][y];\n    cube[x][y] = cube[x+1][y];\n    cube[x+1][y] = cube[x+1][y+1];\n    cube[x+1][y+1] = cube[x][y+1];\n    cube[x][y+1] = a;\n}\n\nint main(){\n\n    string s;\n    cin >> s;\n    char a, b;\n    for(int i=0; i< s.size(); i++){\n        if(s[i] == 'R'){\n            a = cube[0][3]; b = cube[1][3];\n            cube[0][3] = cube[2][3]; cube[1][3] = cube[3][3];\n            cube[2][3] = cube[4][3]; cube[3][3] = cube[5][3];\n            cube[4][3] = cube[3][6]; cube[5][3] = cube[2][6];\n            cube[3][6] = a; cube[2][6] = b;\n            route90(2, 4);\n        }\n        else if(s[i] == 'L'){\n            a = cube[4][2]; b = cube[5][2];\n            cube[4][2] = cube[2][2]; cube[5][2] = cube[3][2];\n            cube[2][2] = cube[0][2]; cube[3][2] = cube[1][2];\n            cube[0][2] = cube[3][7]; cube[1][2] = cube[2][7];\n            cube[3][7] = a; cube[2][7] = b;\n            route90(2, 0);\n        }\n        else if(s[i] == 'U'){\n            a = cube[2][0]; b = cube[2][1];\n            cube[2][0] = cube[2][2]; cube[2][1] = cube[2][3];\n            cube[2][2] = cube[2][4]; cube[2][3] = cube[2][5];\n            cube[2][4] = cube[2][6]; cube[2][5] = cube[2][7];\n            cube[2][6] = a; cube[2][7] = b;\n            route90(0, 2);\n        }\n        else if(s[i] == 'D'){\n            a = cube[3][3]; b = cube[3][2];\n            cube[3][3] = cube[3][1]; cube[3][2] = cube[3][0];\n            cube[3][1] = cube[3][7]; cube[3][0] = cube[3][6];\n            cube[3][7] = cube[3][5]; cube[3][6] = cube[3][4];\n            cube[3][5] = a; cube[3][4] = b;\n            route90(4, 2);\n        }\n        else if(s[i] == 'F'){\n            a = cube[3][4]; b = cube[2][4];\n            cube[3][4] = cube[1][3]; cube[2][4] = cube[1][2];\n            cube[1][3] = cube[2][1]; cube[1][2] = cube[3][1];\n            cube[2][1] = cube[4][2]; cube[3][1] = cube[4][3];\n            cube[4][2] = a; cube[4][3] = b;\n            route90(2, 2);\n\n        }\n        else if(s[i] == 'B'){\n            a = cube[3][5]; b = cube[2][5];\n            cube[3][5] = cube[5][2]; cube[2][5] = cube[5][3];\n            cube[5][2] = cube[2][0]; cube[5][3] = cube[3][0];\n            cube[2][0] = cube[0][3]; cube[3][0] = cube[0][2];\n            cube[0][3] = a; cube[0][2] = b;\n            route90(2, 6);\n        }\n    }\n    for(int i=0; i < 6; i++){\n        cout << cube[i] << endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n\nusing namespace std;\n\nchar cmd[7] = {\"UFRDBL\"};\n\nint dy[6][6][8] = {\n\t{{0,0,0,1,0,0,0,0},{0,0,-1,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},\t{0,0,0,0,0,0,0,0}},\n\t{{ 0, 0, 0, 0, 0, 0, 0, 0},{ 0, 0, 1, 2, 0, 0, 0, 0},{ 0,-1, 0, 1, 2, 0, 0, 0},{ 0,-2,-1, 0, 1, 0, 0, 0},{ 0, 0,-2,-1, 0, 0, 0, 0},{ 0, 0, 0, 0, 0, 0, 0, 0}},\n\t{{0,0,0,3,0,0,0,0},{0,0,0,1,0,0,0,0},{0,0,0,-2,0,1,3,0},{0,0,0,-2,-1,0,1,0},{0,0,0,-2,0,0,0,0},{0,0,0,-2,0,0,0,0}},\n\t{{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,1,0,0,0,0},{0,0,-1,0,0,0,0,0}},\n\t{{0,0,3,2,0,0,0,0},{0,0,0,0,0,0,0,0},{3,0,0,0,0,-2,0,1},{2,0,0,0,0,-3,-1,0},{0,0,0,0,0,0,0,0},{0,0,-2,-3,0,0,0,0}},\n\t{\n\t{ 0, 0, 2, 0, 0, 0, 0, 0},\n\t{ 0, 0, 2, 0, 0, 0, 0, 0},\n\t{ 0, 1, 2, 0, 0, 0, 0,-1},\n\t{-1, 0, 2, 0, 0, 0, 0,-3},\n\t{ 0, 0,-1, 0, 0, 0, 0, 0},\n\t{ 0, 0,-3, 0, 0, 0, 0, 0}}\n};\n\nint dx[6/*コマンド数*/][6/*縦*/][8/*横*/] = {\n\t{{0,0,1,0,0,0,0,0},{0,0,0,-1,0,0,0,0},{6,6,-2,-2,-2,-2,-2,-2},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0}},\n\t{{ 0, 0, 0, 0, 0, 0, 0, 0},{ 0, 0, 2, 1, 0, 0, 0, 0},{ 0, 2, 1, 0,-1, 0, 0, 0},{ 0, 1, 0,-1,-2, 0, 0, 0},{ 0, 0,-1,-2, 0, 0, 0, 0},{ 0, 0, 0, 0, 0, 0, 0, 0}},\n\t{{0,0,0,3,0,0,0,0},{0,0,0,3,0,0,0,0},{0,0,0,0,1,0,-3,0},{0,0,0,0,0,-1,-3,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0}},\n\t{{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{2,2,2,2,2,2,-6,-6},{0,0,1,0,0,0,0,0},{0,0,0,-1,0,0,0,0}},\n\t{{0,0,-2,-3,0,0,0,0},{0,0,0,0,0,0,0,0},{2,0,0,0,0,-3,1,0},{3,0,0,0,0,-2,0,-1},{0,0,0,0,0,0,0,0},{0,0,3,2,0,0,0,0}},\n\t{{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{1,0,0,0,0,0,0,-5},{0,-1,0,0,0,0,0,-5},{0,0,5,0,0,0,0,0},{0,0,5,0,0,0,0,0}}\n};\n\nvoid turn(char table[6][9],int icmd){\n\tchar tmp[6][9], i, j;\n\tfor(i = 0;i < 6;i++){\n\t\tfor(j = 0;j < 8;j++){\n\t\t\ttmp[i + dy[icmd][i][j]][j + dx[icmd][i][j]] = table[i][j];\n\t\t}\n\t\ttmp[i][j] = '\\0';\n\t}\n\tfor(i = 0;i < 6;i++){\n\t\tfor(j = 0;j < 8;j++){\n\t\t\ttable[i][j] = tmp[i][j];\n\t\t}\n\t\ttable[i][j] = '\\0';\n\t}\n}\n\nint main(void){\n\tint i;\n\tchar c, table[6][9] = {{\"..rr....\"},{\"..rr....\"},{\"ggyybbww\"},{\"ggyybbww\"},{\"..oo....\"},{\"..oo....\"}};\n\twhile((c = getchar()) != '\\n'){\n\t\tfor(i = 0;i < 6;i++){\n\t\t\tif(cmd[i] == c){\n\t\t\t\tturn(table,i);\n\t\t\t}\n\t\t}\n\t}\n\tfor(i = 0;i < 6;i++){\n\t\tprintf(\"%s\\n\",table[i]);\n\t}\n\twhile(1);\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n \nusing namespace std;\n \nclass Dice{\npublic:\n    int x[24],t[2];\n    Dice(){\n\tfor(int i = 0 ; i < 4 ; i++){ x[i] = 0; }\n\tfor(int i = 0 ; i < 2 ; i++){\n\t    for(int j = 0 ; j < 8 ; j++){ x[j+i*8+4] = j/2+1; }\n\t}\n\tfor(int i = 0 ; i < 4 ; i++){ x[i+20] = 5; }\n    }\n    char c(int a){\n\tswitch(a){\n\tcase 0:\n\t    return 'r';\n\tcase 1:\n\t    return 'g';\n\tcase 2:\n\t    return 'y';\n\tcase 3:\n\t    return 'b';\n\tcase 4:\n\t    return 'w';\n\tcase 5:\n\t    return 'o';\n\t}\n    }\n    void U(){\n\tt[0] = x[4]; t[1] = x[5];\n\tx[4] = x[6]; x[5] = x[7];\n\tx[6] = x[8]; x[7] = x[9];\n\tx[8] = x[10]; x[9] = x[11];\n\tx[10] = t[0]; x[11] = t[1];\n\tt[0] = x[0]; x[0] = x[2];\n\tx[2] = x[3]; x[3] = x[1];\n\tx[1] = t[0];\n    }\n    void F(){\n\tt[0] = x[2]; t[1] = x[3];\n\tx[2] = x[13]; x[3] = x[5];\n\tx[13] = x[21]; x[5] = x[20];\n\tx[21] = x[8]; x[20] = x[16];\n\tx[8] = t[0]; x[16] = t[1];\n\tt[0] = x[6]; x[6] = x[14];\n\tx[14] = x[15]; x[15] = x[7];\n\tx[7] = t[0];\n    }\n    void R(){\n\tt[0] = x[1]; t[1] = x[3];\n\tx[1] = x[7]; x[3] = x[15];\n\tx[7] = x[21]; x[15] = x[23];\n\tx[21] = x[18]; x[23] = x[10];\n\tx[18] = t[0]; x[10] = t[1];\n\tt[0] = x[8]; x[8] = x[16];\n\tx[16] = x[17]; x[17] = x[9];\n\tx[9] = t[0];\n    }\n    void D(){\n\tt[0] = x[12]; t[1] = x[13];\n\tx[12] = x[18]; x[13] = x[19];\n\tx[18] = x[16]; x[19] = x[17];\n\tx[16] = x[14]; x[17] = x[15];\n\tx[14] = t[0]; x[15] = t[1];\n\tt[0] = x[20]; x[20] = x[22];\n\tx[22] = x[23]; x[23] = x[21];\n\tx[21] = t[0];\n    }\n    void B(){\n\tt[0] = x[0]; t[1] = x[1];\n\tx[0] = x[9]; x[1] = x[17];\n\tx[9] = x[23]; x[17] = x[22];\n\tx[23] = x[12]; x[22] = x[4];\n\tx[12] = t[0]; x[4] = t[1];\n\tt[0] = x[10]; x[10] = x[18];\n\tx[18] = x[19]; x[19] = x[11];\n\tx[11] = t[0];\n    }\n    void L(){\n\tt[0] = x[0]; t[1] = x[2];\n\tx[0] = x[19]; x[2] = x[11];\n\tx[19] = x[20]; x[11] = x[22];\n\tx[20] = x[6]; x[22] = x[14];\n\tx[6] = t[0]; x[14] = t[1];\n\tt[0] = x[4]; x[4] = x[12];\n\tx[12] = x[13]; x[13] = x[5];\n\tx[5] = t[0];\n    }\n    void print(){\n\tprintf(\"..%c%c....\\n\",c(x[0]),c(x[1]));\n\tprintf(\"..%c%c....\\n\",c(x[2]),c(x[3]));\n\tfor(int i = 0 ; i < 2 ; i++){\n\t    for(int j = 0 ; j < 8 ; j++){\n\t\tprintf(\"%c\",c(x[j+i*8+4]));\n\t    }\n\t    printf(\"\\n\");\n\t}\n\tprintf(\"..%c%c....\\n\",c(x[20]),c(x[21]));\n\tprintf(\"..%c%c....\\n\",c(x[22]),c(x[23]));\n    }\n};\n \nint main(){\n    Dice d;\n    char ch;\n    while(cin >> ch){\n\tif(ch == 'U') d.U(); \n\tif(ch == 'F') d.F(); \n\tif(ch == 'R') d.R(); \n\tif(ch == 'D') d.D(); \n\tif(ch == 'B') d.B(); \n\tif(ch == 'L') d.L(); \n    }\n    d.print();\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\nchar ten[6][8];\nvoid tr(char*a){\n  char st=a[0];\n  a[0]=a[2];\n  a[2]=a[3];\n  a[3]=a[1];\n  a[1]=st;\n}\nvoid spin(char *a,char*b,char *c,char*d,int aa,int aaa,int bb,int bbb,int cc,int ccc,int dd,int ddd,char*t){\n  tr(t);\n  char st1=a[aa];\n  char st2=a[aaa];\n  a[aa]=b[bb];\n  a[aaa]=b[bbb];\n  b[bb]=c[cc];\n  b[bbb]=c[ccc];\n  c[cc]=d[dd];\n  c[ccc]=d[ddd];\n  d[dd]=st1;\n  d[ddd]=st2;\n}\n\n\nvoid mkten(char*b,int x,int y){\n  ten[x][y]=b[0];\n  ten[x][y+1]=b[1];\n  ten[x+1][y]=b[2];\n  ten[x+1][y+1]=b[3];\n}\nvoid sy(char*a,char c){\n  for(int i=0;i<4;i++){\n    a[i]=c;\n  }\n}\n\n  \nint main(){\n  for(int i=0;i<6;i++){\n    for(int j=0;j<8;j++){\n      ten[i][j]='.';\n    }\n\n  }\n  char fr[4];\n  char up[4];\n  char dow[4];\n  char le[4];\n  char ri[4];\n  char ba[4];\n  sy(fr,'y');\n  sy(up,'r');\n  sy(ri,'b');\n  sy(dow,'o');\n  sy(le,'g');\n  sy(ba,'w');\n  string a;\n  cin >> a;\n  for(int i=0;i<a.size();i++){\n    if(a[i]=='R')spin(fr,dow,ba,up,1,3,1,3,2,0,1,3,ri);\n    else if(a[i]=='F')spin(up,le,dow,ri,2,3,3,1,1,0,0,2,fr);\n    else if(a[i]=='U')spin(ba,le,fr,ri,0,1,0,1,0,1,0,1,up);\n    else if(a[i]=='D')spin(fr,le,ba,ri,2,3,2,3,2,3,2,3,dow);\n    else if(a[i]=='L')spin(up,ba,dow,fr,0,2,3,1,0,2,0,2,le);\n    else spin(up,ri,dow,le,0,1,1,3,3,2,2,0,ba);\n\n\n  }\n  mkten(fr,2,2);\n  mkten(le,2,0);\n  mkten(up,0,2);\n  mkten(ri,2,4);\n  mkten(ba,2,6);\n  mkten(dow,4,2);\n  for(int i=0;i<6;i++){\n    for(int j=0;j<8;j++){\n      cout << ten[i][j];\n    }\n    cout << endl;\n  }\n  return 0;\n}\n\n    \n  "
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nclass Dice{\npublic:\n  int x[24],t[2];\n  Dice(){\n    for(int i = 0 ; i < 4 ; i++){ x[i] = 0; }\n    for(int i = 0 ; i < 2 ; i++){\n      for(int j = 0 ; j < 8 ; j++){ x[j+i*8+4] = j/2+1; }\n    }\n    for(int i = 0 ; i < 4 ; i++){ x[i+20] = 5; }\n  }\n  char c(int a){\n    switch(a){\n    case 0:\n      return 'r';\n    case 1:\n      return 'g';\n    case 2:\n      return 'y';\n    case 3:\n      return 'b';\n    case 4:\n      return 'w';\n    case 5:\n      return 'o';\n    }\n  }\n  void U(){\n    t[0] = x[4]; t[1] = x[5];\n    x[4] = x[6]; x[5] = x[7];\n    x[6] = x[8]; x[7] = x[9];\n    x[8] = x[10]; x[9] = x[11];\n    x[10] = t[0]; x[11] = t[1];\n    t[0] = x[0]; x[0] = x[2];\n    x[2] = x[3]; x[3] = x[1];\n    x[1] = t[0];\n  }\n  void F(){\n    t[0] = x[2]; t[1] = x[3];\n    x[2] = x[13]; x[3] = x[5];\n    x[13] = x[21]; x[5] = x[20];\n    x[21] = x[8]; x[20] = x[16];\n    x[8] = t[0]; x[16] = t[1];\n    t[0] = x[6]; x[6] = x[14];\n    x[14] = x[15]; x[15] = x[7];\n    x[7] = t[0];\n  }\n  void R(){\n    t[0] = x[1]; t[1] = x[3];\n    x[1] = x[7]; x[3] = x[15];\n    x[7] = x[21]; x[15] = x[23];\n    x[21] = x[18]; x[23] = x[10];\n    x[18] = t[0]; x[10] = t[1];\n    t[0] = x[8]; x[8] = x[16];\n    x[16] = x[17]; x[17] = x[9];\n    x[9] = t[0];\n  }\n  void D(){\n    t[0] = x[12]; t[1] = x[13];\n    x[12] = x[18]; x[13] = x[19];\n    x[18] = x[16]; x[19] = x[17];\n    x[16] = x[14]; x[17] = x[15];\n    x[14] = t[0]; x[15] = t[1];\n    t[0] = x[20]; x[20] = x[22];\n    x[22] = x[23]; x[23] = x[21];\n    x[21] = t[0];\n  }\n  void B(){\n    t[0] = x[0]; t[1] = x[1];\n    x[0] = x[9]; x[1] = x[17];\n    x[9] = x[23]; x[17] = x[22];\n    x[23] = x[12]; x[22] = x[4];\n    x[12] = t[0]; x[4] = t[1];\n    t[0] = x[10]; x[10] = x[18];\n    x[18] = x[19]; x[19] = x[11];\n    x[11] = t[0];\n  }\n  void L(){\n    t[0] = x[0]; t[1] = x[2];\n    x[0] = x[19]; x[2] = x[11];\n    x[19] = x[20]; x[11] = x[22];\n    x[20] = x[6]; x[22] = x[14];\n    x[6] = t[0]; x[14] = t[1];\n    t[0] = x[4]; x[4] = x[12];\n    x[12] = x[13]; x[13] = x[5];\n    x[5] = t[0];\n  }\n  void print(){\n    printf(\"..%c%c....\\n\",c(x[0]),c(x[1]));\n    printf(\"..%c%c....\\n\",c(x[2]),c(x[3]));\n    for(int i = 0 ; i < 2 ; i++){\n      for(int j = 0 ; j < 8 ; j++){\n        printf(\"%c\",c(x[j+i*8+4]));\n      }\n      printf(\"\\n\");\n    }\n    printf(\"..%c%c....\\n\",c(x[20]),c(x[21]));\n    printf(\"..%c%c....\\n\",c(x[22]),c(x[23]));\n  }\n};\n\nint main(){\n  Dice d;\n  char ch;\n  while(cin >> ch){\n    if(ch == 'U'){ d.U(); }\n    if(ch == 'F'){ d.F(); }\n    if(ch == 'R'){ d.R(); }\n    if(ch == 'D'){ d.D(); }\n    if(ch == 'B'){ d.B(); }\n    if(ch == 'L'){ d.L(); }\n  }\n  d.print();\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <string>\n\nusing namespace std;\n\nstring dat[6] = \n{\"..rr....\", \"..rr....\", \"ggyybbww\", \"ggyybbww\", \"..oo....\", \"..oo....\"};\n\nvoid funcU(){\n\tstring tmp[6];\n\tfor(int i=0;i<6;i++) tmp[i] = dat[i];\n\tdat[2][0] = tmp[2][2];\n\tdat[2][1] = tmp[2][3];\n\tdat[2][2] = tmp[2][4];\n\tdat[2][3] = tmp[2][5];\n\tdat[2][4] = tmp[2][6];\n\tdat[2][5] = tmp[2][7];\n\tdat[2][6] = tmp[2][0];\n\tdat[2][7] = tmp[2][1];\n\tdat[0][2] = tmp[1][2];\n\tdat[1][2] = tmp[1][3];\n\tdat[1][3] = tmp[0][3];\n\tdat[0][3] = tmp[0][2];\n}\n\nvoid funcF(){\n\tstring tmp[6];\n\tfor(int i=0;i<6;i++) tmp[i] = dat[i];\n\tdat[1][2] = tmp[3][1];\n\tdat[1][3] = tmp[2][1];\n\tdat[2][1] = tmp[4][2];\n\tdat[3][1] = tmp[4][3];\n\tdat[4][2] = tmp[3][4];\n\tdat[4][3] = tmp[2][4];\n\tdat[2][4] = tmp[1][2];\n\tdat[3][4] = tmp[1][3];\n\tdat[2][2] = tmp[3][2];\n\tdat[3][2] = tmp[3][3];\n\tdat[3][3] = tmp[2][3];\n\tdat[2][3] = tmp[2][2];\n}\n\nvoid funcR(){\n\tstring tmp[6];\n\tfor(int i=0;i<6;i++) tmp[i] = dat[i];\n\tdat[0][3] = tmp[2][3];\n\tdat[1][3] = tmp[3][3];\n\tdat[2][3] = tmp[4][3];\n\tdat[3][3] = tmp[5][3];\n\tdat[4][3] = tmp[3][6];\n\tdat[5][3] = tmp[2][6];\n\tdat[2][6] = tmp[1][3];\n\tdat[3][6] = tmp[0][3];\n\tdat[2][4] = tmp[3][4];\n\tdat[3][4] = tmp[3][5];\n\tdat[3][5] = tmp[2][5];\n\tdat[2][5] = tmp[2][4];\n}\n\nvoid funcD(){\n\tstring tmp[6];\n\tfor(int i=0;i<6;i++) tmp[i] = dat[i];\n\tdat[3][0] = tmp[3][6];\n\tdat[3][1] = tmp[3][7];\n\tdat[3][2] = tmp[3][0];\n\tdat[3][3] = tmp[3][1];\n\tdat[3][4] = tmp[3][2];\n\tdat[3][5] = tmp[3][3];\n\tdat[3][6] = tmp[3][4];\n\tdat[3][7] = tmp[3][5];\n\tdat[4][2] = tmp[5][2];\n\tdat[5][2] = tmp[5][3];\n\tdat[5][3] = tmp[4][3];\n\tdat[4][3] = tmp[4][2];\n}\n\nvoid funcB(){\n\tstring tmp[6];\n\tfor(int i=0;i<6;i++) tmp[i] = dat[i];\n\tdat[0][2] = tmp[2][5];\n\tdat[0][3] = tmp[3][5];\n\tdat[2][5] = tmp[5][3];\n\tdat[3][5] = tmp[5][2];\n\tdat[5][2] = tmp[2][0];\n\tdat[5][3] = tmp[3][0];\n\tdat[2][0] = tmp[0][3];\n\tdat[3][0] = tmp[0][2];\n\tdat[2][6] = tmp[3][6];\n\tdat[3][6] = tmp[3][7];\n\tdat[3][7] = tmp[2][7];\n\tdat[2][7] = tmp[2][6];\n}\n\nvoid funcL(){\n\tstring tmp[6];\n\tfor(int i=0;i<6;i++) tmp[i] = dat[i];\n\tdat[0][2] = tmp[3][7];\n\tdat[1][2] = tmp[2][7];\n\tdat[2][7] = tmp[5][2];\n\tdat[3][7] = tmp[4][2];\n\tdat[4][2] = tmp[2][2];\n\tdat[5][2] = tmp[3][2];\n\tdat[2][2] = tmp[0][2];\n\tdat[3][2] = tmp[1][2];\n\tdat[2][0] = tmp[3][0];\n\tdat[3][0] = tmp[3][1];\n\tdat[3][1] = tmp[2][1];\n\tdat[2][1] = tmp[2][0];\n}\n\nint main(){\n\tstring in;\n\tcin >> in;\n\tfor(int i=0;i<in.size();i++){\n\t\t//for(int j=0;j<6;j++) cout << dat[j] << endl; cout << endl;\n\t\tif(in[i] == 'U') funcU();\n\t\telse if(in[i] == 'F') funcF();\n\t\telse if(in[i] == 'R') funcR();\n\t\telse if(in[i] == 'D') funcD();\n\t\telse if(in[i] == 'B') funcB();\n\t\telse if(in[i] == 'L') funcL();\n\t}\n\tfor(int i=0;i<6;i++) cout << dat[i] << endl;\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <iostream>\n#include <string>\nusing namespace std;\n \n \nint rottbl[6][24] = {\n    {2,0,3,1,8,9,6,7,12,13,10,11,16,17,14,15,4,5,18,19,20,21,22,23},\n    {0,1,7,5,4,20,6,21,10,8,11,9,2,13,3,15,16,17,18,19,14,12,22,23},\n    {0,9,2,11,4,5,6,7,8,21,10,23,14,12,15,13,3,17,1,19,20,18,22,16},\n    {0,1,2,3,4,5,18,19,8,9,6,7,12,13,10,11,16,17,14,15,22,20,23,21},\n    {13,15,2,3,1,5,0,7,8,9,10,11,12,23,14,22,18,16,19,17,20,21,4,6},\n    {19,1,17,3,6,4,7,5,0,9,2,11,12,13,14,15,16,22,18,20,8,21,10,23},\n};\n \nint chtbl[128];\n \nint outtbl[54] = {\n    24,24,0,1,24,24,24,24,25,\n    24,24,2,3,24,24,24,24,25,\n    4,5,8,9,12,13,16,17,25,\n    6,7,10,11,14,15,18,19,25,\n    24,24,20,21,24,24,24,24,25,\n    24,24,22,23,24,24,24,24,25,\n};\n \n \nstring rot(const string &s, char ch){\n    string t = s;\n    for(int i = 0; i < 24; ++i){\n        t[i] = s[rottbl[chtbl[ch]][i]];\n    }\n    return t;\n}\n \nvoid output(const string &s){\n    for(int i = 0; i < 54; ++i){\n        cout << s[outtbl[i]];\n    }\n}\n \n \nint main(){\n    chtbl['U'] = 0;\n    chtbl['F'] = 1;\n    chtbl['R'] = 2;\n    chtbl['D'] = 3;\n    chtbl['B'] = 4;\n    chtbl['L'] = 5;\n \n    string s = \"rrrrggggyyyybbbbwwwwoooo.\\n\";\n     \n    string input;\n    cin >> input;\n    for(int i = 0; i < input.size(); ++i){\n        s = rot(s, input[i]);\n    }\n    output(s);\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <iostream>\n#include <string>\nusing namespace std;\n \n \nint rottbl[6][24] = {\n    {2,0,3,1,8,9,6,7,12,13,10,11,16,17,14,15,4,5,18,19,20,21,22,23},\n    {0,1,7,5,4,20,6,21,10,8,11,9,2,13,3,15,16,17,18,19,14,12,22,23},\n    {0,9,2,11,4,5,6,7,8,21,10,23,14,12,15,13,3,17,1,19,20,18,22,16},\n    {0,1,2,3,4,5,18,19,8,9,6,7,12,13,10,11,16,17,14,15,22,20,23,21},\n    {13,15,2,3,1,5,0,7,8,9,10,11,12,23,14,22,18,16,19,17,20,21,4,6},\n    {19,1,17,3,6,4,7,5,0,9,2,11,12,13,14,15,16,22,18,20,8,21,10,23},\n};\n \nint chtbl[128];\n \nint outtbl[54] = {\n    24,24,0,1,24,24,24,24,25,\n    24,24,2,3,24,24,24,24,25,\n    4,5,8,9,12,13,16,17,25,\n    6,7,10,11,14,15,18,19,25,\n    24,24,20,21,24,24,24,24,25,\n    24,24,22,23,24,24,24,24,25,\n};\n \n \nstring rot(const string &s, char ch){\n    string t = s;\n    for(int i = 0; i < 24; ++i){\n        t[i] = s[rottbl[chtbl[ch]][i]];\n    }\n    return t;\n}\n \nvoid output(const string &s){\n    for(int i = 0; i < 54; ++i){\n        cout << s[outtbl[i]];\n    }\n}\n \n \nint main(){\n    chtbl['U'] = 0;\n    chtbl['F'] = 1;\n    chtbl['R'] = 2;\n    chtbl['D'] = 3;\n    chtbl['B'] = 4;\n    chtbl['L'] = 5;\n \n    string s = \"rrrrggggyyyybbbbwwwwoooo.\\n\";\n     \n    string input;\n    cin >> input;\n    for(int i = 0; i < input.size(); ++i){\n        s = rot(s, input[i]);\n    }\n    output(s);\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nstruct Cube {\n  vector<vector<char>> boxes = {\n      {'.', '.', 'r', 'r', '.', '.', '.', '.'},\n      {'.', '.', 'r', 'r', '.', '.', '.', '.'},\n      {'g', 'g', 'y', 'y', 'b', 'b', 'w', 'w'},\n      {'g', 'g', 'y', 'y', 'b', 'b', 'w', 'w'},\n      {'.', '.', 'o', 'o', '.', '.', '.', '.'},\n      {'.', '.', 'o', 'o', '.', '.', '.', '.'},\n  };\n\n  void rotateUp() {\n    const char tmp = boxes[2][0];\n    boxes[2][0] = boxes[2][2];\n    boxes[2][2] = boxes[2][4];\n    boxes[2][4] = boxes[2][6];\n    boxes[2][6] = tmp;\n\n    const char tmp1 = boxes[2][3];\n    boxes[2][3] = boxes[2][5];\n    boxes[2][5] = boxes[2][7];\n    boxes[2][7] = boxes[2][1];\n    boxes[2][1] = tmp1;\n\n    const char tmp2 = boxes[1][3];\n    boxes[1][3] = boxes[0][3];\n    boxes[0][3] = boxes[0][2];\n    boxes[0][2] = boxes[1][2];\n    boxes[1][2] = tmp2;\n  }\n\n  void rotateBack() {\n    const char tmp = boxes[2][6];\n    boxes[2][6] = boxes[3][6];\n    boxes[3][6] = boxes[3][7];\n    boxes[3][7] = boxes[2][7];\n    boxes[2][7] = tmp;\n\n    const char tmp1 = boxes[2][0];\n    boxes[2][0] = boxes[0][3];\n    boxes[0][3] = boxes[3][5];\n    boxes[3][5] = boxes[5][2];\n    boxes[5][2] = tmp1;\n\n    const char tmp2 = boxes[3][0];\n    boxes[3][0] = boxes[0][2];\n    boxes[0][2] = boxes[2][5];\n    boxes[2][5] = boxes[5][3];\n    boxes[5][3] = tmp2;\n  }\n\n  void rotateFront() {\n    char tmp = boxes[2][2];\n    boxes[2][2] = boxes[3][2];\n    boxes[3][2] = boxes[3][3];\n    boxes[3][3] = boxes[2][3];\n    boxes[2][3] = tmp;\n\n    const char tmp1 = boxes[1][2];\n    boxes[1][2] = boxes[3][1];\n    boxes[3][1] = boxes[4][3];\n    boxes[4][3] = boxes[2][4];\n    boxes[2][4] = tmp1;\n\n    const char tmp2 = boxes[1][3];\n    boxes[1][3] = boxes[2][1];\n    boxes[2][1] = boxes[4][2];\n    boxes[4][2] = boxes[3][4];\n    boxes[3][4] = tmp2;\n  }\n\n  void rotateRight() {\n    const char tmp = boxes[2][4];\n    boxes[2][4] = boxes[3][4];\n    boxes[3][4] = boxes[3][5];\n    boxes[3][5] = boxes[2][5];\n    boxes[2][5] = tmp;\n\n    const char tmp1 = boxes[0][3];\n    boxes[0][3] = boxes[2][3];\n    boxes[2][3] = boxes[4][3];\n    boxes[4][3] = boxes[3][6];\n    boxes[3][6] = tmp1;\n\n    const char tmp2 = boxes[1][3];\n    boxes[1][3] = boxes[3][3];\n    boxes[3][3] = boxes[5][3];\n    boxes[5][3] = boxes[2][6];\n    boxes[2][6] = tmp2;\n  }\n\n  void rotateDown() {\n    const char tmp = boxes[3][0];\n    boxes[3][0] = boxes[3][6];\n    boxes[3][6] = boxes[3][4];\n    boxes[3][4] = boxes[3][2];\n    boxes[3][2] = tmp;\n\n    const char tmp1 = boxes[3][1];\n    boxes[3][1] = boxes[3][7];\n    boxes[3][7] = boxes[3][5];\n    boxes[3][5] = boxes[3][3];\n    boxes[3][3] = tmp1;\n\n    const char tmp2 = boxes[4][2];\n    boxes[4][2] = boxes[5][2];\n    boxes[5][2] = boxes[5][3];\n    boxes[5][3] = boxes[4][3];\n    boxes[4][3] = tmp2;\n  }\n\n  void rotateLeft() {\n    char tmp = boxes[2][0];\n    boxes[2][0] = boxes[3][0];\n    boxes[3][0] = boxes[3][1];\n    boxes[3][1] = boxes[2][1];\n    boxes[2][1] = tmp;\n\n    const char tmp1 = boxes[1][2];\n    boxes[1][2] = boxes[2][7];\n    boxes[2][7] = boxes[5][2];\n    boxes[5][2] = boxes[3][2];\n    boxes[3][2] = tmp1;\n\n    const char tmp2 = boxes[0][2];\n    boxes[0][2] = boxes[3][7];\n    boxes[3][7] = boxes[4][2];\n    boxes[4][2] = boxes[2][2];\n    boxes[2][2] = tmp2;\n  }\n\n  void rotate(char c) {\n    switch (c) {\n      case 'U':\n        return rotateUp();\n      case 'B':\n        return rotateBack();\n      case 'F':\n        return rotateFront();\n      case 'R':\n        return rotateRight();\n      case 'D':\n        return rotateDown();\n      case 'L':\n        return rotateLeft();\n      default:\n        cout << \"error occured: unexpected input\" << endl;\n        break;\n    }\n  }\n\n  // TODO vectorを渡して出力するように変えたい\n  void print() {\n    for (int i = 0; i < 6; i++) {\n      for (int j = 0; j < 8; j++) {\n        cout << boxes[i][j];\n        if (j == 7) {\n          cout << endl;\n        }\n      }\n    }\n  }\n};\n\n// vector<vector<char>> cube = {\n//     {'.', '.', 'r', 'r', '.', '.', '.', '.'},\n//     {'.', '.', 'r', 'r', '.', '.', '.', '.'},\n//     {'g', 'g', 'y', 'y', 'b', 'b', 'w', 'w'},\n//     {'g', 'g', 'y', 'y', 'b', 'b', 'w', 'w'},\n//     {'.', '.', 'o', 'o', '.', '.', '.', '.'},\n//     {'.', '.', 'o', 'o', '.', '.', '.', '.'},\n// };\n\n// void rotateUp() {\n//   const char tmp = cube[2][0];\n//   cube[2][0] = cube[2][2];\n//   cube[2][2] = cube[2][4];\n//   cube[2][4] = cube[2][6];\n//   cube[2][6] = tmp;\n\n//   const char tmp1 = cube[2][3];\n//   cube[2][3] = cube[2][5];\n//   cube[2][5] = cube[2][7];\n//   cube[2][7] = cube[2][1];\n//   cube[2][1] = tmp1;\n\n//   const char tmp2 = cube[1][3];\n//   cube[1][3] = cube[0][3];\n//   cube[0][3] = cube[0][2];\n//   cube[0][2] = cube[1][2];\n//   cube[1][2] = tmp2;\n// }\n\n// void rotateBack() {\n//   const char tmp = cube[2][6];\n//   cube[2][6] = cube[3][6];\n//   cube[3][6] = cube[3][7];\n//   cube[3][7] = cube[2][7];\n//   cube[2][7] = tmp;\n\n//   const char tmp1 = cube[2][0];\n//   cube[2][0] = cube[0][3];\n//   cube[0][3] = cube[3][5];\n//   cube[3][5] = cube[5][2];\n//   cube[5][2] = tmp1;\n\n//   const char tmp2 = cube[3][0];\n//   cube[3][0] = cube[0][2];\n//   cube[0][2] = cube[2][5];\n//   cube[2][5] = cube[5][3];\n//   cube[5][3] = tmp2;\n// }\n\n// void rotateFront() {\n//   char tmp = cube[2][2];\n//   cube[2][2] = cube[3][2];\n//   cube[3][2] = cube[3][3];\n//   cube[3][3] = cube[2][3];\n//   cube[2][3] = tmp;\n\n//   const char tmp1 = cube[1][2];\n//   cube[1][2] = cube[3][1];\n//   cube[3][1] = cube[4][3];\n//   cube[4][3] = cube[2][4];\n//   cube[2][4] = tmp1;\n\n//   const char tmp2 = cube[1][3];\n//   cube[1][3] = cube[2][1];\n//   cube[2][1] = cube[4][2];\n//   cube[4][2] = cube[3][4];\n//   cube[3][4] = tmp2;\n// }\n\n// void rotateRight() {\n//   const char tmp = cube[2][4];\n//   cube[2][4] = cube[3][4];\n//   cube[3][4] = cube[3][5];\n//   cube[3][5] = cube[2][5];\n//   cube[2][5] = tmp;\n\n//   const char tmp1 = cube[0][3];\n//   cube[0][3] = cube[2][3];\n//   cube[2][3] = cube[4][3];\n//   cube[4][3] = cube[3][6];\n//   cube[3][6] = tmp1;\n\n//   const char tmp2 = cube[1][3];\n//   cube[1][3] = cube[3][3];\n//   cube[3][3] = cube[5][3];\n//   cube[5][3] = cube[2][6];\n//   cube[2][6] = tmp2;\n// }\n\n// void rotateDown() {\n//   const char tmp = cube[3][0];\n//   cube[3][0] = cube[3][6];\n//   cube[3][6] = cube[3][4];\n//   cube[3][4] = cube[3][2];\n//   cube[3][2] = tmp;\n\n//   const char tmp1 = cube[3][1];\n//   cube[3][1] = cube[3][7];\n//   cube[3][7] = cube[3][5];\n//   cube[3][5] = cube[3][3];\n//   cube[3][3] = tmp1;\n\n//   const char tmp2 = cube[4][2];\n//   cube[4][2] = cube[5][2];\n//   cube[5][2] = cube[5][3];\n//   cube[5][3] = cube[4][3];\n//   cube[4][3] = tmp2;\n// }\n\n// void rotateLeft() {\n//   char tmp = cube[2][0];\n//   cube[2][0] = cube[3][0];\n//   cube[3][0] = cube[3][1];\n//   cube[3][1] = cube[2][1];\n//   cube[2][1] = tmp;\n\n//   const char tmp1 = cube[1][2];\n//   cube[1][2] = cube[2][7];\n//   cube[2][7] = cube[5][2];\n//   cube[5][2] = cube[3][2];\n//   cube[3][2] = tmp1;\n\n//   const char tmp2 = cube[0][2];\n//   cube[0][2] = cube[3][7];\n//   cube[3][7] = cube[4][2];\n//   cube[4][2] = cube[2][2];\n//   cube[2][2] = tmp2;\n// }\n\n// // TODO\n// //\n// 現状は副作用が発生している(可能であれば、副作用が発生しないようにvectorを返すようにして再代入したい)\n// void rotate(char c) {\n//   switch (c) {\n//     case 'U':\n//       return rotateUp();\n//     case 'B':\n//       return rotateBack();\n//     case 'F':\n//       return rotateFront();\n//     case 'R':\n//       return rotateRight();\n//     case 'D':\n//       return rotateDown();\n//     case 'L':\n//       return rotateLeft();\n//     default:\n//       cout << \"error occured: unexpected input\" << endl;\n//       break;\n//   }\n// }\n\n// // TODO vectorを渡して出力するように変えたい\n// void printResult() {\n//   for (int i = 0; i < 6; i++) {\n//     for (int j = 0; j < 8; j++) {\n//       cout << cube[i][j];\n//       if (j == 7) {\n//         cout << endl;\n//       }\n//     }\n//   }\n// }\n\n// int main() {\n//   string s;\n//   cin >> s;\n\n//   for (int i = 0; i < s.size(); i++) {\n//     if (s[i] == 'U') {\n//       rotate('U');\n//     } else if (s[i] == 'F') {\n//       rotate('F');\n//     } else if (s[i] == 'R') {\n//       rotate('R');\n//     } else if (s[i] == 'D') {\n//       rotate('D');\n//     } else if (s[i] == 'B') {\n//       rotate('B');\n//     } else if (s[i] == 'L') {\n//       rotate('L');\n//     }\n//   }\n\n//   printResult();\n// }\n\nint main() {\n  string s;\n  cin >> s;\n\n  Cube cube;\n\n  for (int i = 0; i < s.size(); i++) {\n    if (s[i] == 'U') {\n      cube.rotate('U');\n    } else if (s[i] == 'F') {\n      cube.rotate('F');\n    } else if (s[i] == 'R') {\n      cube.rotate('R');\n    } else if (s[i] == 'D') {\n      cube.rotate('D');\n    } else if (s[i] == 'B') {\n      cube.rotate('B');\n    } else if (s[i] == 'L') {\n      cube.rotate('L');\n    }\n  }\n\n  cube.print();\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <cmath>\n#include <algorithm>\n#include <cfloat>\n#include <stack>\n#include <queue>\n#include <vector>\n#include <string>\n#include <iostream>\n#include <set>\n#include <map>\ntypedef long long int ll;\ntypedef unsigned long long int ull;\n#define BIG_NUM 2000000000\n#define MOD 1000000007\n#define EPS 0.000000001\nusing namespace std;\n\nint main(){\n\n\tchar map[6][8],next[6][8];\n\n\tfor(int row = 0; row < 6; row++){\n\t\tfor(int col = 0; col < 8; col++){\n\t\t\tmap[row][col] = '.';\n\t\t}\n\t}\n\n\tmap[0][2] = 'r';\n\tmap[0][3] = 'r';\n\tmap[1][2] = 'r';\n\tmap[1][3] = 'r';\n\n\tmap[2][0] = 'g';\n\tmap[2][1] = 'g';\n\tmap[3][0] = 'g';\n\tmap[3][1] = 'g';\n\n\tmap[2][2] = 'y';\n\tmap[2][3] = 'y';\n\tmap[3][2] = 'y';\n\tmap[3][3] = 'y';\n\n\tmap[2][4] = 'b';\n\tmap[2][5] = 'b';\n\tmap[3][4] = 'b';\n\tmap[3][5] = 'b';\n\n\tmap[2][6] = 'w';\n\tmap[2][7] = 'w';\n\tmap[3][6] = 'w';\n\tmap[3][7] = 'w';\n\n\tmap[4][2] = 'o';\n\tmap[4][3] = 'o';\n\tmap[5][2] = 'o';\n\tmap[5][3] = 'o';\n\n\n\tfor(int row = 0; row < 6; row++){\n\t\tfor(int col = 0; col < 8; col++){\n\t\t\tnext[row][col] = map[row][col];\n\t\t}\n\t}\n\n\tchar buf[101];\n\tscanf(\"%s\",buf);\n\n\tfor(int i = 0; buf[i] != '\\0'; i++){\n\n\t\tswitch(buf[i]){\n\t\tcase 'U':\n\t\t\tnext[2][2] = map[2][4];\n\t\t\tnext[2][3] = map[2][5];\n\n\t\t\tnext[2][4] = map[2][6];\n\t\t\tnext[2][5] = map[2][7];\n\n\t\t\tnext[2][6] = map[2][0];\n\t\t\tnext[2][7] = map[2][1];\n\n\t\t\tnext[2][0] = map[2][2];\n\t\t\tnext[2][1] = map[2][3];\n\n\t\t\tnext[0][2] = map[1][2];\n\t\t\tnext[0][3] = map[0][2];\n\t\t\tnext[1][2] = map[1][3];\n\t\t\tnext[1][3] = map[0][3];\n\n\t\t\tbreak;\n\t\tcase 'F':\n\t\t\tnext[1][3] = map[2][1];\n\t\t\tnext[1][2] = map[3][1];\n\n\t\t\tnext[2][1] = map[4][2];\n\t\t\tnext[3][1] = map[4][3];\n\n\t\t\tnext[4][2] = map[3][4];\n\t\t\tnext[4][3] = map[2][4];\n\n\t\t\tnext[3][4] = map[1][3];\n\t\t\tnext[2][4] = map[1][2];\n\n\t\t\tnext[2][2] = map[3][2];\n\t\t\tnext[2][3] = map[2][2];\n\t\t\tnext[3][2] = map[3][3];\n\t\t\tnext[3][3] = map[2][3];\n\n\t\t\tbreak;\n\t\tcase 'R':\n\t\t\tnext[0][3] = map[2][3];\n\t\t\tnext[1][3] = map[3][3];\n\n\t\t\tnext[2][3] = map[4][3];\n\t\t\tnext[3][3] = map[5][3];\n\n\t\t\tnext[4][3] = map[3][6];\n\t\t\tnext[5][3] = map[2][6];\n\n\t\t\tnext[3][6] = map[0][3];\n\t\t\tnext[2][6] = map[1][3];\n\n\t\t\tnext[2][4] = map[3][4];\n\t\t\tnext[2][5] = map[2][4];\n\t\t\tnext[3][4] = map[3][5];\n\t\t\tnext[3][5] = map[2][5];\n\n\t\t\tbreak;\n\t\tcase 'D':\n\t\t\tnext[3][5] = map[3][3];\n\t\t\tnext[3][4] = map[3][2];\n\n\t\t\tnext[3][3] = map[3][1];\n\t\t\tnext[3][2] = map[3][0];\n\n\t\t\tnext[3][1] = map[3][7];\n\t\t\tnext[3][0] = map[3][6];\n\n\t\t\tnext[3][7] = map[3][5];\n\t\t\tnext[3][6] = map[3][4];\n\n\t\t\tnext[4][2] = map[5][2];\n\t\t\tnext[5][2] = map[5][3];\n\t\t\tnext[5][3] = map[4][3];\n\t\t\tnext[4][3] = map[4][2];\n\n\t\t\tbreak;\n\t\tcase 'B':\n\t\t\tnext[0][2] = map[2][5];\n\t\t\tnext[0][3] = map[3][5];\n\n\t\t\tnext[2][5] = map[5][3];\n\t\t\tnext[3][5] = map[5][2];\n\n\t\t\tnext[5][3] = map[3][0];\n\t\t\tnext[5][2] = map[2][0];\n\n\t\t\tnext[3][0] = map[0][2];\n\t\t\tnext[2][0] = map[0][3];\n\n\t\t\tnext[2][7] = map[2][6];\n\t\t\tnext[2][6] = map[3][6];\n\t\t\tnext[3][6] = map[3][7];\n\t\t\tnext[3][7] = map[2][7];\n\n\t\t\tbreak;\n\t\tcase 'L':\n\t\t\tnext[3][2] = map[1][2];\n\t\t\tnext[2][2] = map[0][2];\n\n\t\t\tnext[1][2] = map[2][7];\n\t\t\tnext[0][2] = map[3][7];\n\n\t\t\tnext[2][7] = map[5][2];\n\t\t\tnext[3][7] = map[4][2];\n\n\t\t\tnext[5][2] = map[3][2];\n\t\t\tnext[4][2] = map[2][2];\n\n\t\t\tnext[2][1] = map[2][0];\n\t\t\tnext[2][0] = map[3][0];\n\t\t\tnext[3][1] = map[2][1];\n\t\t\tnext[3][0] = map[3][1];\n\n\t\t\tbreak;\n\t\t}\n\t\tfor(int row = 0; row < 6; row++){\n\t\t\tfor(int col = 0; col < 8; col++){\n\t\t\t\tmap[row][col] = next[row][col];\n\t\t\t}\n\t\t}\n\t}\n\n\tfor(int i = 0; i < 6; i++){\n\t\tfor(int k = 0; k < 8; k++){\n\t\t\tprintf(\"%c\",map[i][k]);\n\t\t}\n\t\tprintf(\"\\n\");\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "// AOJ 2498 Cube of Two\n// 2018.4.17 bal4u\n\n#include <stdio.h>\n\nchar s[103];\n\nchar p[6][9] = {\n\"..rr....\",\n\"..rr....\",\n\"ggyybbww\",\n\"ggyybbww\",\n\"..oo....\",\n\"..oo....\"\n};\n  \nvoid uu()\n{\n\tint i;\n\tchar c, d;\n\t\n\tc = p[0][2], p[0][2] = p[1][2], p[1][2] = p[1][3], p[1][3]=p[0][3], p[0][3] = c;\n\tc = p[2][0], d = p[2][1];\n\tfor (i = 0; i < 6; i++) p[2][i] = p[2][(i+2) & 7];\n\tp[2][6] = c, p[2][7] = d;\n}\n\nvoid ff()\n{\n\tchar c, d;\n\n\tc = p[2][2], p[2][2] = p[3][2], p[3][2] = p[3][3], p[3][3] = p[2][3], p[2][3] = c;\n\tc = p[1][2], d = p[1][3];\n\tp[1][2] = p[3][1], p[1][3] = p[2][1], p[3][1] = p[4][3], p[2][1] = p[4][2];\n\tp[4][3] = p[2][4], p[4][2] = p[3][4], p[2][4] = c, p[3][4] = d;\n}\n\nvoid rr()\n{\n\tchar c, d;\n\n\tc = p[2][4], p[2][4] = p[3][4], p[3][4] = p[3][5], p[3][5] = p[2][5], p[2][5] = c;\n\tc = p[1][3], d = p[0][3];\n\tp[1][3] = p[3][3], p[0][3] = p[2][3], p[3][3] = p[5][3], p[2][3] = p[4][3];\n\tp[5][3] = p[2][6], p[4][3] = p[3][6], p[2][6] = c, p[3][6] = d;\n}\n\nvoid dd()\n{\n\tint i;\n\tchar c, d;\n\n\tc = p[4][2], p[4][2] = p[5][2], p[5][2] = p[5][3], p[5][3] = p[4][3], p[4][3] = c;\n\tc = p[3][5], d = p[3][4];\n\tfor (i = 5; i >= 0; i--) p[3][i] = p[3][(i+6) & 7];\n\tp[3][6] = d; p[3][7] = c;\n}\n\nvoid bb()\n{\n\tchar c, d;\n\t\n\tc = p[2][6], p[2][6] = p[3][6], p[3][6] = p[3][7], p[3][7] = p[2][7], p[2][7] = c;\n\tc = p[0][2], d = p[0][3];\n\tp[0][2] = p[2][5], p[0][3] = p[3][5], p[2][5] = p[5][3], p[3][5] = p[5][2];\n\tp[5][3] = p[3][0], p[5][2] = p[2][0], p[3][0] = c, p[2][0] = d;\n}\n\nvoid ll()\n{\n\tchar c, d;\n\n\tc = p[2][0], p[2][0] = p[3][0], p[3][0] = p[3][1], p[3][1] = p[2][1], p[2][1] = c;\n\tc = p[4][2], d = p[5][2];\n\tp[4][2] = p[2][2], p[5][2] = p[3][2], p[2][2] = p[0][2], p[3][2] = p[1][2];\n\tp[0][2] = p[3][7], p[1][2] = p[2][7], p[3][7] = c, p[2][7] = d;\n}\n \nint main()\n{\n\tint r;\n\tchar *q;\n\n\tscanf(\"%s\", q=s);\n\twhile (*q) {\n\t\tif      (*q == 'U') uu();\n\t\telse if (*q == 'F') ff();\n\t\telse if (*q == 'R') rr();\n\t\telse if (*q == 'D') dd();\n\t\telse if (*q == 'B') bb();\n\t\telse                ll();\n\t\tq++;\n\t}\n\tfor (r = 0; r < 6; r++) puts(p[r]);\n\treturn 0;\n}\n"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n\nint main(void) {\n\tchar banmen[6][10]={\n\t\t\"..rr....\",\n\t\t\"..rr....\",\n\t\t\"ggyybbww\",\n\t\t\"ggyybbww\",\n\t\t\"..oo....\",\n\t\t\"..oo....\"\n\t};\n\tchar query[200];\n\tchar t1,t2;\n\tint i;\n\tscanf(\"%s\",query);\n\tfor(i=0;query[i];i++) {\n\t\tswitch(query[i]) {\n\t\t\tcase 'U':\n\t\t\t\tt1=banmen[2][0];\n\t\t\t\tt2=banmen[2][1];\n\t\t\t\tbanmen[2][0]=banmen[2][2];\n\t\t\t\tbanmen[2][1]=banmen[2][3];\n\t\t\t\tbanmen[2][2]=banmen[2][4];\n\t\t\t\tbanmen[2][3]=banmen[2][5];\n\t\t\t\tbanmen[2][4]=banmen[2][6];\n\t\t\t\tbanmen[2][5]=banmen[2][7];\n\t\t\t\tbanmen[2][6]=t1;\n\t\t\t\tbanmen[2][7]=t2;\n\n\t\t\t\tt1=banmen[0][2];\n\t\t\t\tbanmen[0][2]=banmen[1][2];\n\t\t\t\tbanmen[1][2]=banmen[1][3];\n\t\t\t\tbanmen[1][3]=banmen[0][3];\n\t\t\t\tbanmen[0][3]=t1;\n\t\t\t\tbreak;\n\t\t\tcase 'F':\n\t\t\t\tt1=banmen[1][2];\n\t\t\t\tt2=banmen[1][3];\n\t\t\t\tbanmen[1][2]=banmen[3][1];\n\t\t\t\tbanmen[1][3]=banmen[2][1];\n\t\t\t\tbanmen[3][1]=banmen[4][3];\n\t\t\t\tbanmen[2][1]=banmen[4][2];\n\t\t\t\tbanmen[4][3]=banmen[2][4];\n\t\t\t\tbanmen[4][2]=banmen[3][4];\n\t\t\t\tbanmen[2][4]=t1;\n\t\t\t\tbanmen[3][4]=t2;\n\n\t\t\t\tt1=banmen[2][2];\n\t\t\t\tbanmen[2][2]=banmen[3][2];\n\t\t\t\tbanmen[3][2]=banmen[3][3];\n\t\t\t\tbanmen[3][3]=banmen[2][3];\n\t\t\t\tbanmen[2][3]=t1;\n\t\t\t\tbreak;\n\t\t\tcase 'R':\n\t\t\t\tt1=banmen[0][3];\n\t\t\t\tt2=banmen[1][3];\n\t\t\t\tbanmen[0][3]=banmen[2][3];\n\t\t\t\tbanmen[1][3]=banmen[3][3];\n\t\t\t\tbanmen[2][3]=banmen[4][3];\n\t\t\t\tbanmen[3][3]=banmen[5][3];\n\t\t\t\tbanmen[4][3]=banmen[3][6];\n\t\t\t\tbanmen[5][3]=banmen[2][6];\n\t\t\t\tbanmen[3][6]=t1;\n\t\t\t\tbanmen[2][6]=t2;\n\n\t\t\t\tt1=banmen[2][4];\n\t\t\t\tbanmen[2][4]=banmen[3][4];\n\t\t\t\tbanmen[3][4]=banmen[3][5];\n\t\t\t\tbanmen[3][5]=banmen[2][5];\n\t\t\t\tbanmen[2][5]=t1;\n\t\t\t\tbreak;\n\t\t\tcase 'D':\n\t\t\t\tt1=banmen[3][6];\n\t\t\t\tt2=banmen[3][7];\n\t\t\t\tbanmen[3][6]=banmen[3][4];\n\t\t\t\tbanmen[3][7]=banmen[3][5];\n\t\t\t\tbanmen[3][4]=banmen[3][2];\n\t\t\t\tbanmen[3][5]=banmen[3][3];\n\t\t\t\tbanmen[3][2]=banmen[3][0];\n\t\t\t\tbanmen[3][3]=banmen[3][1];\n\t\t\t\tbanmen[3][0]=t1;\n\t\t\t\tbanmen[3][1]=t2;\n\n\t\t\t\tt1=banmen[4][2];\n\t\t\t\tbanmen[4][2]=banmen[5][2];\n\t\t\t\tbanmen[5][2]=banmen[5][3];\n\t\t\t\tbanmen[5][3]=banmen[4][3];\n\t\t\t\tbanmen[4][3]=t1;\n\t\t\t\tbreak;\n\t\t\tcase 'B':\n\t\t\t\tt1=banmen[0][2];\n\t\t\t\tt2=banmen[0][3];\n\t\t\t\tbanmen[0][2]=banmen[2][5];\n\t\t\t\tbanmen[0][3]=banmen[3][5];\n\t\t\t\tbanmen[2][5]=banmen[5][3];\n\t\t\t\tbanmen[3][5]=banmen[5][2];\n\t\t\t\tbanmen[5][3]=banmen[3][0];\n\t\t\t\tbanmen[5][2]=banmen[2][0];\n\t\t\t\tbanmen[3][0]=t1;\n\t\t\t\tbanmen[2][0]=t2;\n\n\t\t\t\tt1=banmen[2][6];\n\t\t\t\tbanmen[2][6]=banmen[3][6];\n\t\t\t\tbanmen[3][6]=banmen[3][7];\n\t\t\t\tbanmen[3][7]=banmen[2][7];\n\t\t\t\tbanmen[2][7]=t1;\n\t\t\t\tbreak;\n\t\t\tcase 'L':\n\t\t\t\tt1=banmen[4][2];\n\t\t\t\tt2=banmen[5][2];\n\t\t\t\tbanmen[4][2]=banmen[2][2];\n\t\t\t\tbanmen[5][2]=banmen[3][2];\n\t\t\t\tbanmen[2][2]=banmen[0][2];\n\t\t\t\tbanmen[3][2]=banmen[1][2];\n\t\t\t\tbanmen[0][2]=banmen[3][7];\n\t\t\t\tbanmen[1][2]=banmen[2][7];\n\t\t\t\tbanmen[3][7]=t1;\n\t\t\t\tbanmen[2][7]=t2;\n\n\t\t\t\tt1=banmen[2][0];\n\t\t\t\tbanmen[2][0]=banmen[3][0];\n\t\t\t\tbanmen[3][0]=banmen[3][1];\n\t\t\t\tbanmen[3][1]=banmen[2][1];\n\t\t\t\tbanmen[2][1]=t1;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\tfor(i=0;i<6;i++)puts(banmen[i]);\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\nint main(){\n  char c1,c2,s[110],r[]={\"UFRDBL\"};\n  char d[][10]={\"..rr....\",\"..rr....\",\"ggyybbww\",\n\t\t\"ggyybbww\",\"..oo....\",\"..oo....\"};\n  int i,j,k,X[][14]={\n    {2,3,3,2,0,1,2,3,4,5,6,7},\n    {2,3,3,2,1,2,3,4,4,3,2,1},\n    {4,5,5,4,3,3,3,3,3,3,6,6},\n    {2,3,3,2,7,6,5,4,3,2,1,0},\n    {6,6,7,7,2,3,5,5,3,2,0,0},\n    {0,0,1,1,2,2,7,7,2,2,2,2},\n  };\n  int Y[][14]={\n    {1,1,0,0,2,2,2,2,2,2,2,2},\n    {3,3,2,2,3,4,4,3,2,1,1,2},\n    {3,3,2,2,0,1,2,3,4,5,3,2},\n    {5,5,4,4,3,3,3,3,3,3,3,3},\n    {2,3,3,2,0,0,2,3,5,5,3,2},\n    {2,3,3,2,1,0,2,3,5,4,3,2}\n  };\n  scanf(\"%s\",s);\n  for(k=0;s[k];k++){\n    for(i=0;r[i]-s[k];i++);\n    c1=d[Y[i][0]][X[i][0]];\n    for(j=1;j<4;j++)d[Y[i][j-1]][X[i][j-1]]=d[Y[i][j]][X[i][j]];\n    d[Y[i][3]][X[i][3]]=c1;\n    //for(j=0;j<6;j++)printf(\"%s\\n\",d[j]);printf(\"\\n\");\n    c1=d[Y[i][4]][X[i][4]];\n    c2=d[Y[i][5]][X[i][5]];//printf(\"%c %c\\n\",c1,c2);\n    for(j=6;j<12;j++)d[Y[i][j-2]][X[i][j-2]]=d[Y[i][j]][X[i][j]];\n    d[Y[i][10]][X[i][10]]=c1;\n    d[Y[i][11]][X[i][11]]=c2;\n  }\n  for(i=0;i<6;i++)printf(\"%s\\n\",d[i]);\n  return 0;\n}\n    "
  },
  {
    "language": "Java",
    "code": "import java.util.*;\n\npublic class Main{\n\tchar [] index = {'R', 'U', 'F', 'D', 'B' ,'L'};\n\tchar [][] data;\n\tint [][][][] rotatetable = {\n\t\t\t{\n\t\t\t\t{\n\t\t\t\t\t{3,5},\n\t\t\t\t\t{3,3},\n\t\t\t\t\t{3,1},\n\t\t\t\t\t{6,2},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t{3,4},\n\t\t\t\t\t{3,2},\n\t\t\t\t\t{3,0},\n\t\t\t\t\t{6,3},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t{4,2},\n\t\t\t\t\t{5,2},\n\t\t\t\t\t{5,3},\n\t\t\t\t\t{4,3},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t{\n\t\t\t\t\t{7,2},\n\t\t\t\t\t{5,2},\n\t\t\t\t\t{3,2},\n\t\t\t\t\t{1,2},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t{6,2},\n\t\t\t\t\t{4,2},\n\t\t\t\t\t{2,2},\n\t\t\t\t\t{0,2},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t{2,0},\n\t\t\t\t\t{3,0},\n\t\t\t\t\t{3,1},\n\t\t\t\t\t{2,1},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t{\n\t\t\t\t\t{2,1},\n\t\t\t\t\t{4,2},\n\t\t\t\t\t{3,4},\n\t\t\t\t\t{1,3},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t{3,1},\n\t\t\t\t\t{4,3},\n\t\t\t\t\t{2,4},\n\t\t\t\t\t{1,2},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t{2,2},\n\t\t\t\t\t{3,2},\n\t\t\t\t\t{3,3},\n\t\t\t\t\t{2,3},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t{\n\t\t\t\t\t{0,3},\n\t\t\t\t\t{2,3},\n\t\t\t\t\t{4,3},\n\t\t\t\t\t{6,3},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t{1,3},\n\t\t\t\t\t{3,3},\n\t\t\t\t\t{5,3},\n\t\t\t\t\t{7,3},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t{2,4},\n\t\t\t\t\t{3,4},\n\t\t\t\t\t{3,5},\n\t\t\t\t\t{2,5},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t{\n\t\t\t\t\t{0,2},\n\t\t\t\t\t{2,5},\n\t\t\t\t\t{5,3},\n\t\t\t\t\t{3,0},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t{0,3},\n\t\t\t\t\t{3,5},\n\t\t\t\t\t{5,2},\n\t\t\t\t\t{2,0},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t{6,2},\n\t\t\t\t\t{7,2},\n\t\t\t\t\t{7,3},\n\t\t\t\t\t{6,3},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t{\n\t\t\t\t\t{2,0},\n\t\t\t\t\t{2,2},\n\t\t\t\t\t{2,4},\n\t\t\t\t\t{7,3},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t{2,1},\n\t\t\t\t\t{2,3},\n\t\t\t\t\t{2,5},\n\t\t\t\t\t{7,2},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t{0,2},\n\t\t\t\t\t{1,2},\n\t\t\t\t\t{1,3},\n\t\t\t\t\t{0,3},\n\t\t\t\t},\n\t\t\t},\n\t};\n\n\tprivate void doit(){\n\t\tScanner sc = new Scanner(System.in);\n\t\twhile(sc.hasNext()){\n\t\t\tString s = sc.next();\n\t\t\tdata = new char[6][8];\n\t\t\t\n\t\t\tinit();\n\t\t\t\n\t\t\tfor(int i = 0; i < s.length();i++){\n\t\t\t\tchar c = s.charAt(i);\n\t\t\t\tint ind = -1;\n\t\t\t\tfor(int j = 0; j < index.length; j++){\n\t\t\t\t\tif(index[j] == c){\n\t\t\t\t\t\tind = j;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\trotate(ind);\n\t\t\t}\n\t\t\tprint();\n\t\t}\n\t}\n\n\tprivate void rotate(int ind) {\n\t\tfor(int i = 0; i < rotatetable[ind].length; i++){\n\t\t\tswap(ind, i);\n\t\t}\n\t}\n\n\tprivate void swap(int ind, int ind2) {\n\t\tint tempx = rotatetable[ind][ind2][0][0];\n\t\tint tempy = rotatetable[ind][ind2][0][1];\n\t\tchar tempvalue = data[tempy][tempx];\n\t\tint prevx = tempx, prevy = tempy;\n\t\tfor(int i = 3; i >= 1; i--){\n\t\t\tint nowx = rotatetable[ind][ind2][i][0];\n\t\t\tint nowy = rotatetable[ind][ind2][i][1];\n\t\t\tdata[prevy][prevx] = data[nowy][nowx];\n\t\t\tprevx = nowx;\n\t\t\tprevy = nowy;\n\t\t}\n\t\tint secx = rotatetable[ind][ind2][1][0];\n\t\tint secy = rotatetable[ind][ind2][1][1];\n\t\tdata[secy][secx] = tempvalue;\n\t}\n\n\tprivate void print() {\n\t\tfor(int i = 0; i < data.length; i++){\n\t\t\tfor(int j = 0; j < data[i].length; j++){\n\t\t\t\tSystem.out.print(data[i][j]);\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n\n\tprivate void init() {\n\t\tfor(int i = 0; i < data.length; i++){\n\t\t\tArrays.fill(data[i], '.');\n\t\t}\n\t\tfor(int i = 0; i < 2; i++){\n\t\t\tfor(int j = 2; j < 4; j++){\n\t\t\t\tdata[i][j] = 'r';\n\t\t\t}\n\t\t}\n\t\tfor(int i = 2; i < 4; i++){\n\t\t\tfor(int j = 0; j < 2; j++){\n\t\t\t\tdata[i][j] = 'g';\n\t\t\t}\n\t\t\tfor(int j = 2; j < 4; j++){\n\t\t\t\tdata[i][j] = 'y';\n\t\t\t}\n\t\t\tfor(int j = 4; j < 6; j++){\n\t\t\t\tdata[i][j] = 'b';\n\t\t\t}\n\t\t\tfor(int j = 6; j < 8; j++){\n\t\t\t\tdata[i][j] = 'w';\n\t\t\t}\n\t\t}\n\t\tfor(int i = 4; i < 6; i++){\n\t\t\tfor(int j = 2; j < 4; j++){\n\t\t\t\tdata[i][j] = 'o';\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate void debug(Object... o) {\n\t\tSystem.out.println(\"debug = \" + Arrays.deepToString(o));\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tnew Main().doit();\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.IOException;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Scanner;\n \n \npublic class Main{\n\t\n\tpublic static class Cube{\n\t\tchar[][] up, front, left, right, back, down;\n\t\t\n\t\tpublic Cube(){\n\t\t\tup    = new char[][]{{'r', 'r'}, {'r', 'r'}};\n\t\t\tfront = new char[][]{{'y', 'y'}, {'y', 'y'}};\n\t\t\tleft  = new char[][]{{'g', 'g'}, {'g', 'g'}};\n\t\t\tright = new char[][]{{'b', 'b'}, {'b', 'b'}};\n\t\t\tback  = new char[][]{{'w', 'w'}, {'w', 'w'}};\n\t\t\tdown  = new char[][]{{'o', 'o'}, {'o', 'o'}};\n\t\t}\n\t\t\n\t\tprivate void rotate(char[][] rot){\n\t\t\tchar tmp = rot[0][0];\n\t\t\trot[0][0] = rot[1][0];\n\t\t\trot[1][0] = rot[1][1];\n\t\t\trot[1][1] = rot[0][1];\n\t\t\trot[0][1] = tmp;\n\t\t}\n\t\t\n\t\tpublic void R(){\n\t\t\tchar tmp_0 = front[0][1];\n\t\t\tchar tmp_1 = front[1][1];\n\t\t\t\n\t\t\tfront[0][1] = down[0][1];\n\t\t\tfront[1][1] = down[1][1];\n\t\t\tdown[0][1] = back[1][0];\n\t\t\tdown[1][1] = back[0][0];\n\t\t\tback[0][0] = up[1][1];\n\t\t\tback[1][0] = up[0][1];\n\t\t\tup[0][1] = tmp_0;\n\t\t\tup[1][1] = tmp_1;\n\t\t\t\n\t\t\trotate(right);\n\t\t}\n\t\t\n\t\tpublic void L(){\n\t\t\tchar tmp_0 = front[0][0];\n\t\t\tchar tmp_1 = front[1][0];\n\t\t\t\n\t\t\tfront[0][0] = up[0][0];\n\t\t\tfront[1][0] = up[1][0];\n\t\t\tup[0][0] = back[1][1];\n\t\t\tup[1][0] = back[0][1];\n\t\t\tback[0][1] = down[1][0];\n\t\t\tback[1][1] = down[0][0];\n\t\t\tdown[0][0] = tmp_0;\n\t\t\tdown[1][0] = tmp_1;\n\t\t\n\t\t\trotate(left);\n\t\t}\n\t\t\n\t\tpublic void U(){\n\t\t\tchar tmp_0 = front[0][0];\n\t\t\tchar tmp_1 = front[0][1];\n\t\t\t\n\t\t\tfront[0][0] = right[0][0];\n\t\t\tfront[0][1] = right[0][1];\n\t\t\tright[0][0] = back[0][0];\n\t\t\tright[0][1] = back[0][1];\n\t\t\tback[0][0] = left[0][0];\n\t\t\tback[0][1] = left[0][1];\n\t\t\tleft[0][0] = tmp_0;\n\t\t\tleft[0][1] = tmp_1;\n\t\t\n\t\t\trotate(up);\n\t\t}\n\t\t\n\t\tpublic void D(){\n\t\t\tchar tmp_0 = front[1][0];\n\t\t\tchar tmp_1 = front[1][1];\n\t\t\t\n\t\t\tfront[1][0] = left[1][0];\n\t\t\tfront[1][1] = left[1][1];\n\t\t\tleft[1][0] = back[1][0];\n\t\t\tleft[1][1] = back[1][1];\n\t\t\tback[1][0] = right[1][0];\n\t\t\tback[1][1] = right[1][1];\n\t\t\tright[1][0] = tmp_0;\n\t\t\tright[1][1] = tmp_1;\n\t\t\n\t\t\trotate(down);\n\t\t}\n\t\t\n\t\tpublic void F(){\n\t\t\tchar tmp_0 = up[1][0];\n\t\t\tchar tmp_1 = up[1][1];\n\t\t\t\n\t\t\tup[1][0] = left[1][1];\n\t\t\tup[1][1] = left[0][1];\n\t\t\tleft[0][1] = down[0][0];\n\t\t\tleft[1][1] = down[0][1];\n\t\t\tdown[0][0] = right[1][0];\n\t\t\tdown[0][1] = right[0][0];\n\t\t\tright[0][0] = tmp_0;\n\t\t\tright[1][0] = tmp_1;\n\t\t\n\t\t\trotate(front);\n\t\t}\n\t\t\n\t\tpublic void B(){\n\t\t\tchar tmp_0 = up[0][0];\n\t\t\tchar tmp_1 = up[0][1];\n\t\t\t\n\t\t\tup[0][0] = right[0][1];\n\t\t\tup[0][1] = right[1][1];\n\t\t\tright[0][1] = down[1][1];\n\t\t\tright[1][1] = down[1][0];\n\t\t\tdown[1][1] = left[1][0];\n\t\t\tdown[1][0] = left[0][0];\n\t\t\tleft[0][0] = tmp_1;\n\t\t\tleft[1][0] = tmp_0;\n\t\t\t\n\t\t\trotate(back);\n\t\t}\n\t\t\n\t\tpublic String toString(){\n\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\tsb.append(\"..\");\n\t\t\tsb.append(up[0][0]);\n\t\t\tsb.append(up[0][1]);\n\t\t\tsb.append(\"..\");\n\t\t\tsb.append(\"..\");\n\t\t\tsb.append(\"\\n\");\n\t\t\tsb.append(\"..\");\n\t\t\tsb.append(up[1][0]);\n\t\t\tsb.append(up[1][1]);\n\t\t\tsb.append(\"..\");\n\t\t\tsb.append(\"..\");\n\t\t\tsb.append(\"\\n\");\n\t\t\t\n\t\t\tsb.append(left[0][0]);\n\t\t\tsb.append(left[0][1]);\n\t\t\tsb.append(front[0][0]);\n\t\t\tsb.append(front[0][1]);\n\t\t\tsb.append(right[0][0]);\n\t\t\tsb.append(right[0][1]);\n\t\t\tsb.append(back[0][0]);\n\t\t\tsb.append(back[0][1]);\n\t\t\tsb.append(\"\\n\");\n\t\t\t\n\t\t\tsb.append(left[1][0]);\n\t\t\tsb.append(left[1][1]);\n\t\t\tsb.append(front[1][0]);\n\t\t\tsb.append(front[1][1]);\n\t\t\tsb.append(right[1][0]);\n\t\t\tsb.append(right[1][1]);\n\t\t\tsb.append(back[1][0]);\n\t\t\tsb.append(back[1][1]);\n\t\t\tsb.append(\"\\n\");\n\t\t\t\n\t\t\tsb.append(\"..\");\n\t\t\tsb.append(down[0][0]);\n\t\t\tsb.append(down[0][1]);\n\t\t\tsb.append(\"..\");\n\t\t\tsb.append(\"..\");\n\t\t\tsb.append(\"\\n\");\n\t\t\tsb.append(\"..\");\n\t\t\tsb.append(down[1][0]);\n\t\t\tsb.append(down[1][1]);\n\t\t\tsb.append(\"..\");\n\t\t\tsb.append(\"..\");\n\t\t\tsb.append(\"\\n\");\n\t\t\n\t\t\treturn sb.toString();\n\t\t}\n\t}\n\t\n    public static void main(String[] args) throws IOException {\n    \tScanner sc = new Scanner(System.in);\n    \t\n    \tchar[] input = sc.next().toCharArray();\n\n    \tCube cube = new Cube();\n    \tfor(char c : input){\n    \t\tif(c == 'R'){\n    \t\t\tcube.R();\n    \t\t}else if(c == 'L'){\n    \t\t\tcube.L();\n    \t\t}else if(c == 'U'){\n    \t\t\tcube.U();\n    \t\t}else if(c == 'D'){\n    \t\t\tcube.D();\n    \t\t}else if(c == 'F'){\n    \t\t\tcube.F();\n    \t\t}else if(c == 'B'){\n    \t\t\tcube.B();\n    \t\t}\n    \t\t\n    \t\t//System.out.println(cube);\n    \t}\n    \t\n    \tSystem.out.print(cube);\n    }\n     \n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\n\npublic class Main {\n\n\tchar[][] map = new char[][]{\n\t\t{'.','.','r','r','.','.','.','.'},\n\t\t{'.','.','r','r','.','.','.','.'},\n\t\t{'g','g','y','y','b','b','w','w'},\n\t\t{'g','g','y','y','b','b','w','w'},\n\t\t{'.','.','o','o','.','.','.','.'},\n\t\t{'.','.','o','o','.','.','.','.'},\t\n\t};\n\t\n\tchar tempA, tempB;\n\t\n\tvoid rotate90(int y, int x){\n\t\ttempA = map[y][x];\n\t\tmap[y][x] = map[y+1][x];\n\t\tmap[y+1][x] = map[y+1][x+1];\n\t\tmap[y+1][x+1] = map[y][x+1];\n\t\tmap[y][x+1] = tempA;\n\t}\n\n\tvoid solve(){\n\t\tScanner sc = new Scanner(System.in);\n\t\t\n\t\twhile(sc.hasNext()){\n\t\t\tString s = sc.next();\n\t\t\t\n\t\t\tfor(int i=0;i<s.length();i++){\n\t\t\t\t//U\n\t\t\t\tif(s.codePointAt(i)==85){\n\t\t\t\t\ttempA = map[2][0];\n\t\t\t\t\ttempB = map[2][1];\n\t\t\t\t\tfor(int j=0;j<6;j++) map[2][j] = map[2][j+2];\n\t\t\t\t\tmap[2][6] = tempA;\n\t\t\t\t\tmap[2][7] = tempB;\n\t\t\t\t\trotate90(0,2);\n\t\t\t\t}\n\t\t\t\t//D\n\t\t\t\telse if(s.codePointAt(i)==68){\n\t\t\t\t\ttempA = map[3][6];\n\t\t\t\t\ttempB = map[3][7];\n\t\t\t\t\tfor(int j=0;j<6;j++) map[3][7-j] = map[3][5-j];\n\t\t\t\t\tmap[3][0] = tempA;\n\t\t\t\t\tmap[3][1] = tempB;\n\t\t\t\t\trotate90(4,2);\n\t\t\t\t}\n\t\t\t\t//R\n\t\t\t\telse if(s.codePointAt(i)==82){\n\t\t\t\t\ttempA = map[0][3];\n\t\t\t\t\ttempB = map[1][3];\n\t\t\t\t\tfor(int j=0;j<4;j++) map[j][3] = map[j+2][3];\n\t\t\t\t\tmap[4][3] = map[3][6];\n\t\t\t\t\tmap[5][3] = map[2][6];\n\t\t\t\t\tmap[3][6] = tempA;\n\t\t\t\t\tmap[2][6] = tempB;\n\t\t\t\t\trotate90(2,4);\n\t\t\t\t}\n\t\t\t\t//L\n\t\t\t\telse if(s.codePointAt(i)==76){\n\t\t\t\t\ttempA = map[4][2];\n\t\t\t\t\ttempB = map[5][2];\n\t\t\t\t\tfor(int j=0;j<4;j++) map[5-j][2] = map[3-j][2];\n\t\t\t\t\tmap[0][2] = map[3][7];\n\t\t\t\t\tmap[1][2] = map[2][7];\n\t\t\t\t\tmap[3][7] = tempA;\n\t\t\t\t\tmap[2][7] = tempB;\n\t\t\t\t\trotate90(2,0);\n\t\t\t\t}\n\t\t\t\t//F\n\t\t\t\telse if(s.codePointAt(i)==70){\t\t\t\t\t\t\n\t\t\t\t\ttempA = map[1][2];\n\t\t\t\t\ttempB = map[1][3];\n\t\t\t\t\tmap[1][2] = map[3][1];\n\t\t\t\t\tmap[1][3] = map[2][1];\n\t\t\t\t\tmap[3][1] = map[4][3];\n\t\t\t\t\tmap[2][1] = map[4][2];\n\t\t\t\t\tmap[4][3] = map[2][4];\n\t\t\t\t\tmap[4][2] = map[3][4];\n\t\t\t\t\tmap[2][4] = tempA;\n\t\t\t\t\tmap[3][4] = tempB;\t\t\t\n\t\t\t\t\trotate90(2,2);\n\t\t\t\t}\n\t\t\t\t//B\n\t\t\t\telse if(s.codePointAt(i)==66){\t\t\t\t\t\t\n\t\t\t\t\ttempA = map[0][2];\n\t\t\t\t\ttempB = map[0][3];\n\t\t\t\t\tmap[0][2] = map[2][5];\n\t\t\t\t\tmap[0][3] = map[3][5];\n\t\t\t\t\tmap[2][5] = map[5][3];\n\t\t\t\t\tmap[3][5] = map[5][2];\n\t\t\t\t\tmap[5][3] = map[3][0];\n\t\t\t\t\tmap[5][2] = map[2][0];\n\t\t\t\t\tmap[3][0] = tempA;\n\t\t\t\t\tmap[2][0] = tempB;\n\t\t\t\t\trotate90(2,6);\n\t\t\t\t}\t\n\t\t\t}\n\t\t\tfor(int k=0;k<6;k++){\n\t\t\t\tfor(int j=0;j<8;j++){\n\t\t\t\t\tSystem.out.print(map[k][j]);\n\t\t\t\t}\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\n\tpublic static void main(String[] args) {\n\t\tnew Main().solve();\n\t}\t\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.IOException;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Scanner;\n \n \npublic class Main{\n\t\n\tpublic static class Cube{\n\t\tchar[][] up, front, left, right, back, down;\n\t\t\n\t\tpublic Cube(){\n\t\t\tup    = new char[][]{{'r', 'r'}, {'r', 'r'}};\n\t\t\tfront = new char[][]{{'y', 'y'}, {'y', 'y'}};\n\t\t\tleft  = new char[][]{{'g', 'g'}, {'g', 'g'}};\n\t\t\tright = new char[][]{{'b', 'b'}, {'b', 'b'}};\n\t\t\tback  = new char[][]{{'w', 'w'}, {'w', 'w'}};\n\t\t\tdown  = new char[][]{{'o', 'o'}, {'o', 'o'}};\n\t\t}\n\t\t\n\t\tprivate void rotate(char[][] rot){\n\t\t\tchar tmp = rot[0][0];\n\t\t\trot[0][0] = rot[1][0];\n\t\t\trot[1][0] = rot[1][1];\n\t\t\trot[1][1] = rot[0][1];\n\t\t\trot[0][1] = tmp;\n\t\t}\n\t\t\n\t\tpublic void R(){\n\t\t\tchar tmp_0 = front[0][1];\n\t\t\tchar tmp_1 = front[1][1];\n\t\t\t\n\t\t\tfront[0][1] = down[0][1];\n\t\t\tfront[1][1] = down[1][1];\n\t\t\tdown[0][1] = back[1][0];\n\t\t\tdown[1][1] = back[0][0];\n\t\t\tback[0][0] = up[1][1];\n\t\t\tback[1][0] = up[0][1];\n\t\t\tup[0][1] = tmp_0;\n\t\t\tup[1][1] = tmp_1;\n\t\t\t\n\t\t\trotate(right);\n\t\t}\n\t\t\n\t\tpublic void L(){\n\t\t\tchar tmp_0 = front[0][0];\n\t\t\tchar tmp_1 = front[1][0];\n\t\t\t\n\t\t\tfront[0][0] = up[0][0];\n\t\t\tfront[1][0] = up[1][0];\n\t\t\tup[0][0] = back[1][1];\n\t\t\tup[1][0] = back[0][1];\n\t\t\tback[0][1] = down[1][0];\n\t\t\tback[1][1] = down[0][0];\n\t\t\tdown[0][0] = tmp_0;\n\t\t\tdown[1][0] = tmp_1;\n\t\t\n\t\t\trotate(left);\n\t\t}\n\t\t\n\t\tpublic void U(){\n\t\t\tchar tmp_0 = front[0][0];\n\t\t\tchar tmp_1 = front[0][1];\n\t\t\t\n\t\t\tfront[0][0] = right[0][0];\n\t\t\tfront[0][1] = right[0][1];\n\t\t\tright[0][0] = back[0][0];\n\t\t\tright[0][1] = back[0][1];\n\t\t\tback[0][0] = left[0][0];\n\t\t\tback[0][1] = left[0][1];\n\t\t\tleft[0][0] = tmp_0;\n\t\t\tleft[0][1] = tmp_1;\n\t\t\n\t\t\trotate(up);\n\t\t}\n\t\t\n\t\tpublic void D(){\n\t\t\tchar tmp_0 = front[1][0];\n\t\t\tchar tmp_1 = front[1][1];\n\t\t\t\n\t\t\tfront[1][0] = left[1][0];\n\t\t\tfront[1][1] = left[1][1];\n\t\t\tleft[1][0] = back[1][0];\n\t\t\tleft[1][1] = back[1][1];\n\t\t\tback[1][0] = right[1][0];\n\t\t\tback[1][1] = right[1][1];\n\t\t\tright[1][0] = tmp_0;\n\t\t\tright[1][1] = tmp_1;\n\t\t\n\t\t\trotate(down);\n\t\t}\n\t\t\n\t\tpublic void F(){\n\t\t\tchar tmp_0 = up[1][0];\n\t\t\tchar tmp_1 = up[1][1];\n\t\t\t\n\t\t\tup[1][0] = left[1][1];\n\t\t\tup[1][1] = left[0][1];\n\t\t\tleft[0][1] = down[0][0];\n\t\t\tleft[1][1] = down[0][1];\n\t\t\tdown[0][0] = right[1][0];\n\t\t\tdown[0][1] = right[0][0];\n\t\t\tright[0][0] = tmp_0;\n\t\t\tright[1][0] = tmp_1;\n\t\t\n\t\t\trotate(front);\n\t\t}\n\t\t\n\t\tpublic void B(){\n\t\t\tchar tmp_0 = up[0][0];\n\t\t\tchar tmp_1 = up[0][1];\n\t\t\t\n\t\t\tup[0][0] = right[0][1];\n\t\t\tup[0][1] = right[1][1];\n\t\t\tright[0][1] = down[1][1];\n\t\t\tright[1][1] = down[1][0];\n\t\t\tdown[1][1] = left[1][0];\n\t\t\tdown[1][0] = left[0][0];\n\t\t\tleft[0][0] = tmp_1;\n\t\t\tleft[1][0] = tmp_0;\n\t\t\t\n\t\t\trotate(back);\n\t\t}\n\t\t\n\t\tpublic String toString(){\n\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\tsb.append(\"..\");\n\t\t\tsb.append(up[0][0]);\n\t\t\tsb.append(up[0][1]);\n\t\t\tsb.append(\"..\");\n\t\t\tsb.append(\"..\");\n\t\t\tsb.append(\"\\n\");\n\t\t\tsb.append(\"..\");\n\t\t\tsb.append(up[1][0]);\n\t\t\tsb.append(up[1][1]);\n\t\t\tsb.append(\"..\");\n\t\t\tsb.append(\"..\");\n\t\t\tsb.append(\"\\n\");\n\t\t\t\n\t\t\tsb.append(left[0][0]);\n\t\t\tsb.append(left[0][1]);\n\t\t\tsb.append(front[0][0]);\n\t\t\tsb.append(front[0][1]);\n\t\t\tsb.append(right[0][0]);\n\t\t\tsb.append(right[0][1]);\n\t\t\tsb.append(back[0][0]);\n\t\t\tsb.append(back[0][1]);\n\t\t\tsb.append(\"\\n\");\n\t\t\t\n\t\t\tsb.append(left[1][0]);\n\t\t\tsb.append(left[1][1]);\n\t\t\tsb.append(front[1][0]);\n\t\t\tsb.append(front[1][1]);\n\t\t\tsb.append(right[1][0]);\n\t\t\tsb.append(right[1][1]);\n\t\t\tsb.append(back[1][0]);\n\t\t\tsb.append(back[1][1]);\n\t\t\tsb.append(\"\\n\");\n\t\t\t\n\t\t\tsb.append(\"..\");\n\t\t\tsb.append(down[0][0]);\n\t\t\tsb.append(down[0][1]);\n\t\t\tsb.append(\"..\");\n\t\t\tsb.append(\"..\");\n\t\t\tsb.append(\"\\n\");\n\t\t\tsb.append(\"..\");\n\t\t\tsb.append(down[1][0]);\n\t\t\tsb.append(down[1][1]);\n\t\t\tsb.append(\"..\");\n\t\t\tsb.append(\"..\");\n\t\t\tsb.append(\"\\n\");\n\t\t\n\t\t\treturn sb.toString();\n\t\t}\n\t}\n\t\n    public static void main(String[] args) throws IOException {\n    \tScanner sc = new Scanner(System.in);\n    \t\n    \tchar[] input = sc.next().toCharArray();\n\n    \tCube cube = new Cube();\n    \tfor(char c : input){\n    \t\tif(c == 'R'){\n    \t\t\tcube.R();\n    \t\t}else if(c == 'L'){\n    \t\t\tcube.L();\n    \t\t}else if(c == 'U'){\n    \t\t\tcube.U();\n    \t\t}else if(c == 'D'){\n    \t\t\tcube.D();\n    \t\t}else if(c == 'F'){\n    \t\t\tcube.F();\n    \t\t}else if(c == 'B'){\n    \t\t\tcube.B();\n    \t\t}\n    \t\t\n    \t\t//System.out.println(cube);\n    \t}\n    \t\n    \tSystem.out.println(cube);\n    }\n     \n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\nimport java.lang.*;\nimport java.math.*;\nimport java.io.*;\nimport static java.lang.Math.*;\nimport static java.util.Arrays.*;\nimport static java.util.Collections.*;\n\npublic class Main{\n\tScanner sc=new Scanner(System.in);\n\n\tint INF=1<<28;\n\tdouble EPS=1e-12;\n\n\tint[] is;\n\tString line;\n\n\tvoid run(){\n\t\tline=sc.next();\n\t\tsolve();\n\t}\n\n\tvoid solve(){\n\t\tis=new int[24];\n\t\tfor(int i=0; i<24; i++){\n\t\t\tis[i]=i/4;\n\t\t}\n//\t\tdebug(is);\n\t\tfor(char c : line.toCharArray()){\n\t\t\tswitch(c){\n\t\t\tcase 'U':\n\t\t\t\tup();\n\t\t\t\tbreak;\n\t\t\tcase 'F':\n\t\t\t\tfront();\n\t\t\t\tbreak;\n\t\t\tcase 'R':\n\t\t\t\tright();\n\t\t\t\tbreak;\n\t\t\tcase 'D':\n\t\t\t\tdown();\n\t\t\t\tbreak;\n\t\t\tcase 'B':\n\t\t\t\tback();\n\t\t\t\tbreak;\n\t\t\tcase 'L':\n\t\t\t\tleft();\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// debug(is);\n\t\tint[][] tab={{-1, -1, 0, 1, -1, -1, -1, -1},\n\t\t\t\t{-1, -1, 3, 2, -1, -1, -1, -1}, {4, 5, 8, 9, 12, 13, 16, 17},\n\t\t\t\t{7, 6, 11, 10, 15, 14, 19, 18},\n\t\t\t\t{-1, -1, 20, 21, -1, -1, -1, -1},\n\t\t\t\t{-1, -1, 23, 22, -1, -1, -1, -1},};\n\t\tfor(int j=0; j<tab.length; j++){\n\t\t\tfor(int i=0; i<tab[j].length; i++){\n\t\t\t\tprint(tab[j][i]==-1?\".\":\"rgybwo\".charAt(is[tab[j][i]])+\"\");\n\t\t\t}\n\t\t\tprintln(\"\");\n\t\t}\n\t}\n\n\tvoid up(){\n\t\tswap(0, 1, 2, 3);\n\t\tswap(4, 16, 12, 8);\n\t\tswap(5, 17, 13, 9);\n\t}\n\n\tvoid front(){\n\t\tswap(8, 9, 10, 11);\n\t\tswap(2, 15, 20, 5);\n\t\tswap(3, 12, 21, 6);\n\t}\n\n\tvoid right(){\n\t\tswap(12, 13, 14, 15);\n\t\tswap(2, 16, 22, 10);\n\t\tswap(1, 19, 21, 9);\n\t}\n\n\tvoid down(){\n\t\tswap(20, 21, 22, 23);\n\t\tswap(11, 15, 19, 7);\n\t\tswap(10, 14, 18, 6);\n\t}\n\n\tvoid back(){\n\t\tswap(16, 17, 18, 19);\n\t\tswap(13, 0, 7, 22);\n\t\tswap(14, 1, 4, 23);\n\t}\n\n\tvoid left(){\n\t\tswap(4, 5, 6, 7);\n\t\tswap(0, 8, 20, 18);\n\t\tswap(3, 11, 23, 17);\n\t}\n\n\tvoid swap(int a, int b, int c, int d){\n\t\tint t=is[d];\n\t\tis[d]=is[c];\n\t\tis[c]=is[b];\n\t\tis[b]=is[a];\n\t\tis[a]=t;\n\t}\n\n\tvoid debug(Object... os){\n\t\tSystem.err.println(Arrays.deepToString(os));\n\t}\n\n\tvoid print(String s){\n\t\tSystem.out.print(s);\n\t}\n\n\tvoid println(String s){\n\t\tSystem.out.println(s);\n\t}\n\n\tpublic static void main(String[] args){\n\t\tnew Main().run();\n\t}\n}"
  },
  {
    "language": "JavaScript",
    "code": "var obj = {};\nobj.U = \"rrrr\".split(\"\");\nobj.D = \"oooo\".split(\"\");\nobj.F = \"yyyy\".split(\"\");\nobj.L = \"gggg\".split(\"\");\nobj.R = \"bbbb\".split(\"\");\nobj.B = \"wwww\".split(\"\");\n \nfunction topRotateFn(k) {\n   var a = obj[k].slice();\n   obj[k][0] = a[2];\n   obj[k][1] = a[0];\n   obj[k][2] = a[3];\n   obj[k][3] = a[1];\n}\n \nfunction mawasu(str) {\n   var arr = str.split(\",\");\n   var a = [];\n   arr.forEach(v => {\n      var getArray = getFn(v);\n      a.push(getArray[0], getArray[1]);\n   });\n   a = a.slice(-2).concat(a.slice(0, -2));\n   arr.forEach((v, i) => {\n      setFn(v, a[i * 2], a[i * 2 + 1]);\n   });\n}\n \nfunction getFn(v) {\n   var [k, n] = v.split(\"\");\n   if (n == \"0\") return [obj[k][0], obj[k][1]];\n   else if (n == \"1\") return [obj[k][1], obj[k][3]];\n   else if (n == \"2\") return [obj[k][2], obj[k][0]];\n   else if (n == \"3\") return [obj[k][3], obj[k][2]];\n}\n \nfunction setFn(v, a, b) {\n   var [k, n] = v.split(\"\");\n   if(n==\"0\"){obj[k][0]=a;obj[k][1]=b;}\n   else if(n==\"1\"){obj[k][1]=a;obj[k][3]=b;}\n   else if(n==\"2\"){obj[k][2]=a;obj[k][0]=b;}\n   else if(n==\"3\"){obj[k][3]=a;obj[k][2]=b;}\n}\n \nfunction writeFn(y, x, s) {\n   yx[y][x] = obj[s][0];\n   yx[y][x + 1] = obj[s][1];\n   yx[y + 1][x] = obj[s][2];\n   yx[y + 1][x + 1] = obj[s][3];\n}\n \nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\"\");\narr.forEach(v => {\n   topRotateFn(v);\n   if (v == \"U\") mawasu(\"F0,L0,B0,R0\")\n   else if (v == \"D\") mawasu(\"F3,R3,B3,L3\");\n   else if (v == \"F\") mawasu(\"R2,D0,L1,U3\");\n   else if (v == \"L\") mawasu(\"F2,D2,B1,U2\");\n   else if (v == \"R\") mawasu(\"U1,B2,D1,F1\");\n   else if (v == \"B\") mawasu(\"R1,U0,L2,D3\");\n});\nvar yx = [];\nfor (var i = 0; i < 6; i++) yx[i] = \"........\".split(\"\");\nfor (var s in obj) {\n   if (s == \"U\") writeFn(0, 2, s);\n   else if (s == \"D\") writeFn(4, 2, s);\n   else if (s == \"F\") writeFn(2, 2, s);\n   else if (s == \"L\") writeFn(2, 0, s);\n   else if (s == \"R\") writeFn(2, 4, s);\n   else if (s == \"B\") writeFn(2, 6, s);\n}\nconsole.log(yx.join(\"\\n\").replace(/\\,/g, \"\"));\n"
  },
  {
    "language": "JavaScript",
    "code": "print=console.log;\nline=require(\"fs\").readFileSync(\"/dev/stdin\",\"utf-8\").split(\"\\n\")[0]\nArray.prototype.rotate = function(n) {\n  return this.slice(n, this.length).concat(this.slice(0, n));\n}\n\ny = \"y\"; g = \"g\"; r = \"r\";\nb = \"b\"; o = \"o\"; w = \"w\";\nA = [y, g ,r]; B = [y, r, b];\nC = [y, b, o]; D = [y, o, g];\nE = [w, b, r]; F = [w, r, g];\nG = [w, g, o]; H = [w, o, b];\ncube = [A,B,C,D,E,F,G,H];\n\nfor (var i=0; i<line.length; ++i)\n  operate(line[i])\n\nprint(\"..\"+cube[5][1]+cube[4][2]+\"....\");\nprint(\"..\"+cube[0][2]+cube[1][1]+\"....\");\nprint(cube[5][2]\n  +cube[0][1]+cube[0][0]\n  +cube[1][0]+cube[1][2]\n  +cube[4][1]+cube[4][0]\n  +cube[5][0]);\nprint(cube[6][1]\n  +cube[3][2]+cube[3][0]\n  +cube[2][0]+cube[2][1]\n  +cube[7][2]+cube[7][0]\n  +cube[6][0]);\nprint(\"..\"+cube[3][1]+cube[2][2]+\"....\");\nprint(\"..\"+cube[6][2]+cube[7][1]+\"....\");\n\nfunction operate(ch) {\n  if (ch == \"R\") {\n    var tmp = cube[1];\n    cube[1] = cube[2].rotate(2);\n    cube[2] = cube[7].rotate(1);\n    cube[7] = cube[4].rotate(2);\n    cube[4] = tmp.rotate(1);\n    return;\n  }\n  else if (ch == \"L\") {\n    var tmp = cube[3];\n    cube[3] = cube[0].rotate(2);\n    cube[0] = cube[5].rotate(1);\n    cube[5] = cube[6].rotate(2);\n    cube[6] = tmp.rotate(1);\n    return;\n  }\n  else if (ch == \"F\") {\n    var tmp = cube[0];\n    cube[0] = cube[3];\n    cube[3] = cube[2];\n    cube[2] = cube[1];\n    cube[1] = tmp;\n    return;\n  }\n  else if (ch == \"B\") {\n    var tmp = cube[4];\n    cube[4] = cube[7];\n    cube[7] = cube[6];\n    cube[6] = cube[5];\n    cube[5] = tmp;\n    return;\n  }\n  else if (ch == \"U\") {\n    var tmp = cube[0];\n    cube[0] = cube[1].rotate(2);\n    cube[1] = cube[4].rotate(1);\n    cube[4] = cube[5].rotate(2);\n    cube[5] = tmp.rotate(1);\n    return;\n  }\n  else {\n    var tmp = cube[6];\n    cube[6] = cube[7].rotate(2);\n    cube[7] = cube[2].rotate(1);\n    cube[2] = cube[3].rotate(2);\n    cube[3] = tmp.rotate(1);\n    return;\n  } \n}"
  },
  {
    "language": "Python",
    "code": "def rotate(s,k):\n    s_ = [[s[i][j] for j in range(8)] for i in range(6)]\n    if k == \"R\":\n        s_[0][3] = s[2][3]\n        s_[1][3] = s[3][3]\n        s_[2][3] = s[4][3]\n        s_[3][3] = s[5][3]\n\n        s_[4][3] = s[3][6]\n        s_[5][3] = s[2][6]\n        s_[3][6] = s[0][3]\n        s_[2][6] = s[1][3]\n\n        s_[2][4] = s[3][4]\n        s_[3][4] = s[3][5]\n        s_[3][5] = s[2][5]\n        s_[2][5] = s[2][4]\n\n    elif k == \"L\":\n        s_[0][2] = s[3][7]\n        s_[1][2] = s[2][7]\n        s_[2][2] = s[0][2]\n        s_[3][2] = s[1][2]\n\n        s_[4][2] = s[2][2]\n        s_[5][2] = s[3][2]\n        s_[3][7] = s[4][2]\n        s_[2][7] = s[5][2]\n\n        s_[2][1] = s[2][0]\n        s_[2][0] = s[3][0]\n        s_[3][0] = s[3][1]\n        s_[3][1] = s[2][1]\n\n    elif k == \"U\":\n        s_[2][0] = s[2][2]\n        s_[2][1] = s[2][3]\n        s_[2][2] = s[2][4]\n        s_[2][3] = s[2][5]\n\n        s_[2][4] = s[2][6]\n        s_[2][5] = s[2][7]\n        s_[2][6] = s[2][0]\n        s_[2][7] = s[2][1]\n\n        s_[0][2] = s[1][2]\n        s_[1][2] = s[1][3]\n        s_[1][3] = s[0][3]\n        s_[0][3] = s[0][2]\n\n    elif k == \"D\":\n        s_[3][0] = s[3][6]\n        s_[3][1] = s[3][7]\n        s_[3][2] = s[3][0]\n        s_[3][3] = s[3][1]\n\n        s_[3][4] = s[3][2]\n        s_[3][5] = s[3][3]\n        s_[3][6] = s[3][4]\n        s_[3][7] = s[3][5]\n\n        s_[4][2] = s[5][2]\n        s_[5][2] = s[5][3]\n        s_[5][3] = s[4][3]\n        s_[4][3] = s[4][2]\n\n    elif k == \"F\":\n        s_[1][2] = s[3][1]\n        s_[1][3] = s[2][1]\n        s_[3][1] = s[4][3]\n        s_[2][1] = s[4][2]\n\n        s_[4][3] = s[2][4]\n        s_[4][2] = s[3][4]\n        s_[2][4] = s[1][2]\n        s_[3][4] = s[1][3]\n\n        s_[2][2] = s[3][2]\n        s_[3][2] = s[3][3]\n        s_[3][3] = s[2][3]\n        s_[2][3] = s[2][2]\n\n    else:\n        s_[0][2] = s[2][5]\n        s_[0][3] = s[3][5]\n        s_[2][5] = s[5][3]\n        s_[3][5] = s[5][2]\n\n        s_[5][3] = s[3][0]\n        s_[5][2] = s[2][0]\n        s_[3][0] = s[0][2]\n        s_[2][0] = s[0][3]\n\n        s_[2][6] = s[3][6]\n        s_[3][6] = s[3][7]\n        s_[3][7] = s[2][7]\n        s_[2][7] = s[2][6]\n    return s_\na = input()\ns = [\"..rr....\", \"..rr....\",\"ggyybbww\",\"ggyybbww\",\"..oo....\",\"..oo....\"]\nfor k in a:\n    s = rotate(s,k)\n\nfor i in s:\n    for j in i:\n        print(j,end = \"\")\n    print()\n\n"
  }
]