[
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint calculate_score(char *cards[], int count) {\n    int score = 0;\n    int aces = 0;\n\n    for (int i = 0; i < count; i++) {\n        char *card = cards[i];\n        if (strcmp(card, \"2\") == 0) score += 2;\n        else if (strcmp(card, \"3\") == 0) score += 3;\n        else if (strcmp(card, \"4\") == 0) score += 4;\n        else if (strcmp(card, \"5\") == 0) score += 5;\n        else if (strcmp(card, \"6\") == 0) score += 6;\n        else if (strcmp(card, \"7\") == 0) score += 7;\n        else if (strcmp(card, \"8\") == 0) score += 8;\n        else if (strcmp(card, \"9\") == 0) score += 9;\n        else if (strcmp(card, \"10\") == 0 || strcmp(card, \"J\") == 0 || strcmp(card, \"Q\") == 0 || strcmp(card, \"K\") == 0) score += 10;\n        else if (strcmp(card, \"A\") == 0) {\n            score += 11;\n            aces++;\n        }\n    }\n\n    while (score > 21 && aces > 0) {\n        score -= 10;\n        aces--;\n    }\n\n    return score;\n}\n\nint main() {\n    char *pile[500];\n    int pile_count = 0;\n    char input[10];\n\n    while (1) {\n        scanf(\"%s\", input);\n        if (strcmp(input, \"J\") == 0 || strcmp(input, \"Q\") == 0 || strcmp(input, \"K\") == 0 || strcmp(input, \"A\") == 0 ||\n            strcmp(input, \"2\") == 0 || strcmp(input, \"3\") == 0 || strcmp(input, \"4\") == 0 || strcmp(input, \"5\") == 0 ||\n            strcmp(input, \"6\") == 0 || strcmp(input, \"7\") == 0 || strcmp(input, \"8\") == 0 || strcmp(input, \"9\") == 0 || strcmp(input, \"10\") == 0) {\n            pile[pile_count] = strdup(input);\n            pile_count++;\n        } else {\n            break;\n        }\n    }\n\n    char *dealer_cards[500];\n    int dealer_count = 0;\n    dealer_cards[dealer_count++] = pile[0];\n    dealer_cards[dealer_count++] = pile[1];\n    int pile_index = 2;\n\n    int score = calculate_score(dealer_cards, dealer_count);\n\n    while (score < 17 && pile_index < pile_count) {\n        dealer_cards[dealer_count++] = pile[pile_index++];\n        score = calculate_score(dealer_cards, dealer_count);\n    }\n\n    printf(\"%d\\n\", score);\n\n    for (int i = 0; i < pile_count; i++) {\n        free(pile[i]);\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-05 21:07:27"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nint calculateScore(const vector<int>& cards) {\n    int score = 0;\n    int aces = 0;\n\n    for (int card : cards) {\n        if (card == 1) {\n            aces++;\n            score += 11;\n        } else if (card >= 10) {\n            score += 10;\n        } else {\n            score += card;\n        }\n    }\n\n    while (score > 21 && aces > 0) {\n        score -= 10;\n        aces--;\n    }\n\n    return score;\n}\n\nint main() {\n    vector<int> pile;\n    int n;\n    cin >> n;\n\n    for (int i = 0; i < n; ++i) {\n        int card;\n        cin >> card;\n        pile.push_back(card);\n    }\n\n    vector<int> dealerCards;\n    dealerCards.push_back(pile[0]);\n    dealerCards.push_back(pile[1]);\n    pile.erase(pile.begin(), pile.begin() + 2);\n\n    int score = calculateScore(dealerCards);\n\n    while (score < 17 && !pile.empty()) {\n        dealerCards.push_back(pile[0]);\n        pile.erase(pile.begin());\n        score = calculateScore(dealerCards);\n    }\n\n    cout << score << endl;\n\n    return 0;\n}",
    "timestamp": "2025-08-05 21:07:40"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.Scanner;\n\npublic class BlackjackDealer {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int card1 = scanner.nextInt();\n        int card2 = scanner.nextInt();\n        \n        int score = card1 + card2;\n        \n        while (score < 17) {\n            int nextCard = scanner.nextInt();\n            score += nextCard;\n        }\n        \n        if (score > 21) {\n            System.out.println(\"BUST\");\n        } else {\n            System.out.println(score);\n        }\n    }\n}",
    "timestamp": "2025-08-05 21:07:46"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class BlackjackDealer {\n    private List<Integer> deck;\n    private List<Integer> dealerHand;\n    private Random random;\n\n    public BlackjackDealer() {\n        initializeDeck();\n        dealerHand = new ArrayList<>();\n        random = new Random();\n    }\n\n    private void initializeDeck() {\n        deck = new ArrayList<>();\n        for (int i = 0; i < 4; i++) {\n            for (int j = 1; j <= 13; j++) {\n                int cardValue = Math.min(j, 10);\n                deck.add(cardValue);\n            }\n        }\n        Collections.shuffle(deck);\n    }\n\n    public int dealInitialHand() {\n        dealerHand.clear();\n        dealerHand.add(drawCard());\n        dealerHand.add(drawCard());\n        return calculateHandScore();\n    }\n\n    private int drawCard() {\n        if (deck.isEmpty()) {\n            initializeDeck();\n        }\n        return deck.remove(0);\n    }\n\n    public int playDealerTurn() {\n        while (calculateHandScore() < 17) {\n            dealerHand.add(drawCard());\n        }\n        return calculateHandScore();\n    }\n\n    private int calculateHandScore() {\n        int score = dealerHand.stream().mapToInt(Integer::intValue).sum();\n        long aceCount = dealerHand.stream().filter(card -> card == 1).count();\n\n        while (score <= 11 && aceCount > 0) {\n            score += 10;\n            aceCount--;\n        }\n\n        return score;\n    }\n\n    public List<Integer> getDealerHand() {\n        return dealerHand;\n    }\n\n    public static void main(String[] args) {\n        BlackjackDealer dealer = new BlackjackDealer();\n        dealer.dealInitialHand();\n        int finalScore = dealer.playDealerTurn();\n        System.out.println(\"Dealer's hand: \" + dealer.getDealerHand());\n        System.out.println(\"Dealer's final score: \" + finalScore);\n    }\n}",
    "timestamp": "2025-08-05 21:07:53"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\n#define DECK_SIZE 52\n\n// Function to generate a random card value\nint drawCard() {\n    int card = rand() % 13 + 1;\n    if (card > 10) return 10;  // Face cards are worth 10\n    return card;\n}\n\n// Calculate score, handling Aces as 1 or 11\nint calculateScore(int hand[], int numCards) {\n    int score = 0;\n    int aces = 0;\n\n    for (int i = 0; i < numCards; i++) {\n        if (hand[i] == 1) {\n            aces++;\n        }\n        score += hand[i];\n    }\n\n    // Adjust for Aces\n    while (aces > 0 && score + 10 <= 21) {\n        score += 10;\n        aces--;\n    }\n\n    return score;\n}\n\nint main() {\n    srand(time(NULL));\n\n    int dealerHand[10];\n    int numCards = 2;\n\n    // Initial draw\n    dealerHand[0] = drawCard();\n    dealerHand[1] = drawCard();\n\n    // Dealer draws until score is at least 17\n    while (calculateScore(dealerHand, numCards) < 17) {\n        dealerHand[numCards] = drawCard();\n        numCards++;\n    }\n\n    int finalScore = calculateScore(dealerHand, numCards);\n    printf(\"Dealer's Final Score: %d\\n\", finalScore);\n\n    return 0;\n}",
    "timestamp": "2025-08-05 21:08:00"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <random>\n#include <algorithm>\n\nclass BlackjackDealer {\nprivate:\n    std::vector<int> deck;\n    std::vector<int> dealerHand;\n    std::mt19937 rng;\n\n    int calculateHandValue() {\n        int total = 0;\n        int aces = 0;\n\n        for (int card : dealerHand) {\n            if (card == 11) {\n                aces++;\n            }\n            total += (card > 10) ? 10 : card;\n        }\n\n        while (aces > 0 && total <= 11) {\n            total += 10;\n            aces--;\n        }\n\n        return total;\n    }\n\n    void initializeDeck() {\n        deck.clear();\n        for (int suit = 0; suit < 4; ++suit) {\n            for (int value = 2; value <= 14; ++value) {\n                deck.push_back(value > 10 ? 10 : value);\n            }\n        }\n        std::shuffle(deck.begin(), deck.end(), rng);\n    }\n\npublic:\n    BlackjackDealer() : rng(std::random_device{}()) {}\n\n    int play() {\n        initializeDeck();\n        dealerHand.clear();\n\n        // Deal initial two cards\n        dealerHand.push_back(deck.back());\n        deck.pop_back();\n        dealerHand.push_back(deck.back());\n        deck.pop_back();\n\n        // Draw additional cards while score is less than 17\n        while (calculateHandValue() < 17) {\n            dealerHand.push_back(deck.back());\n            deck.pop_back();\n        }\n\n        return calculateHandValue();\n    }\n};\n\nint main() {\n    BlackjackDealer dealer;\n    int dealerScore = dealer.play();\n\n    std::cout << \"Dealer's Score: \" << dealerScore << std::endl;\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 21:08:07"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "import random\n\ndef card_value(card):\n    if card in ['J', 'Q', 'K']:\n        return 10\n    elif card == 'A':\n        return 11  # We'll handle Aces separately for flexibility\n    else:\n        return int(card)\n\ndef calculate_score(cards):\n    score = sum(card_value(card) for card in cards)\n    num_aces = cards.count('A')\n    \n    # Adjust for Aces to not exceed 21\n    while score > 21 and num_aces:\n        score -= 10\n        num_aces -= 1\n        \n    return score\n\ndef draw_card(pile):\n    card = random.choice(pile)\n    pile.remove(card)\n    return card\n\ndef dealer_blackjack_score():\n    # Define the deck\n    deck = [\n        '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A'\n    ] * 4\n    \n    # Shuffle the deck\n    random.shuffle(deck)\n    \n    # Dealer starts with two cards\n    dealer_hand = [draw_card(deck), draw_card(deck)]\n    dealer_score = calculate_score(dealer_hand)\n    \n    # Dealer draws cards\n    while dealer_score < 17:\n        dealer_hand.append(draw_card(deck))\n        dealer_score = calculate_score(dealer_hand)\n    \n    return dealer_score\n\nprint(dealer_blackjack_score())",
    "timestamp": "2025-08-13 05:05:27"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "java",
    "code": "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.Random;\n\npublic class BlackjackDealer {\n    private static final int BLACKJACK = 21;\n    private final List<Card> deck;\n    private final Random random;\n\n    public BlackjackDealer() {\n        this.deck = createDeck();\n        this.random = new Random();\n    }\n\n    private List<Card> createDeck() {\n        List<Card> deck = new ArrayList<>(52);\n        String[] ranks = {\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"};\n        for (String rank : ranks) {\n            for (int i = 0; i < 4; i++) {\n                deck.add(new Card(rank));\n            }\n        }\n        return deck;\n    }\n\n    private Card drawCard() {\n        int index = random.nextInt(deck.size());\n        return deck.remove(index);\n    }\n\n    private int cardValue(Card card, int currentScore) {\n        String rank = card.rank;\n        switch (rank) {\n            case \"A\":\n                return currentScore + 11 <= BLACKJACK ? 11 : 1;\n            case \"K\":\n            case \"Q\":\n            case \"J\":\n            case \"10\":\n                return 10;\n            default:\n                return Integer.parseInt(rank);\n        }\n    }\n\n    public int playDealer() {\n        List<Card> dealerHand = new ArrayList<>();\n        dealerHand.add(drawCard());\n        dealerHand.add(drawCard());\n\n        int score = getScore(dealerHand);\n\n        while (score < 17) {\n            dealerHand.add(drawCard());\n            score = getScore(dealerHand);\n        }\n\n        return score;\n    }\n\n    private int getScore(List<Card> hand) {\n        int score = 0;\n        int acesCount = 0;\n\n        for (Card card : hand) {\n            score += cardValue(card, score);\n            if (card.rank.equals(\"A\")) {\n                acesCount++;\n            }\n        }\n\n        while (score > BLACKJACK && acesCount > 0) {\n            score -= 10; \n            acesCount--;\n        }\n\n        return score;\n    }\n\n    private static class Card {\n        String rank;\n\n        Card(String rank) {\n            this.rank = rank;\n        }\n    }\n\n    public static void main(String[] args) {\n        BlackjackDealer dealer = new BlackjackDealer();\n        int dealerScore = dealer.playDealer();\n        System.out.println(\"Dealer's final score: \" + dealerScore);\n    }\n}",
    "timestamp": "2025-08-13 05:05:36"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nint drawCard() {\n    return (rand() % 13) + 1;  // Cards 1 to 13\n}\n\nint cardValue(int card) {\n    if (card > 10) return 10;  // Face cards (J, Q, K) are valued at 10\n    return card;               // Number cards are valued at their number\n}\n\nint main() {\n    srand(time(NULL));\n\n    int score = 0;\n    int aces = 0;\n\n    // Draw initial two cards\n    for (int i = 0; i < 2; i++) {\n        int card = drawCard();\n        if (card == 1) {\n            aces++;\n            score += 11;\n        } else {\n            score += cardValue(card);\n        }\n    }\n\n    // Draw additional cards according to blackjack rules\n    while (score < 17) {\n        int card = drawCard();\n        if (card == 1) {\n            aces++;\n            score += 11;\n        } else {\n            score += cardValue(card);\n        }\n\n        // If score exceeds 21, convert aces from 11 to 1\n        while (score > 21 && aces > 0) {\n            score -= 10;\n            aces--;\n        }\n    }\n\n    printf(\"Dealer's score: %d\\n\", score);\n    return 0;\n}",
    "timestamp": "2025-08-13 05:05:41"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "import random\n\nclass BlackjackDealer:\n    def __init__(self):\n        self.deck = self.create_deck()\n        self.hand = []\n        self.score = 0\n\n    def create_deck(self):\n        suits = ['Hearts', 'Diamonds', 'Clubs', 'Spades']\n        values = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'Jack', 'Queen', 'King', 'Ace']\n        return [{'value': value, 'suit': suit} for suit in suits for value in values]\n\n    def calculate_card_value(self, card):\n        if card['value'] in ['Jack', 'Queen', 'King']:\n            return 10\n        elif card['value'] == 'Ace':\n            return 11 if self.score + 11 <= 21 else 1\n        else:\n            return int(card['value'])\n\n    def draw_card(self):\n        card = random.choice(self.deck)\n        self.deck.remove(card)\n        return card\n\n    def play_hand(self):\n        # Initial two card draw\n        self.hand = [self.draw_card(), self.draw_card()]\n        self.score = sum(self.calculate_card_value(card) for card in self.hand)\n\n        # Draw additional cards if score is less than 17\n        while self.score < 17:\n            new_card = self.draw_card()\n            self.hand.append(new_card)\n            self.score += self.calculate_card_value(new_card)\n\n        return self.score\n\ndef main():\n    dealer = BlackjackDealer()\n    final_score = dealer.play_hand()\n    print(f\"Dealer's final score: {final_score}\")\n\nif __name__ == \"__main__\":\n    main()",
    "timestamp": "2025-08-13 05:06:04"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def calculate_dealer_score(cards):\n    score = 0\n    aces = 0\n    \n    for card in cards:\n        if card in ['J', 'Q', 'K']:\n            score += 10\n        elif card == 'A':\n            score += 11\n            aces += 1\n        else:\n            score += int(card)\n    \n    while score > 21 and aces > 0:\n        score -= 10\n        aces -= 1\n    \n    return score\n\ndef simulate_dealer(initial_cards, pile):\n    dealer_cards = initial_cards.copy()\n    score = calculate_dealer_score(dealer_cards)\n    \n    while score < 17:\n        if not pile:\n            break\n        next_card = pile.pop(0)\n        dealer_cards.append(next_card)\n        score = calculate_dealer_score(dealer_cards)\n    \n    return score\n\n# Example usage:\n# initial_cards = ['A', '9']\n# pile = ['5', 'Q', '7']\n# print(simulate_dealer(initial_cards, pile))",
    "timestamp": "2025-08-13 05:06:17"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c++",
    "code": "#include <iostream>\n#include <vector>\n#include <cstdlib>\n#include <ctime>\n\nclass BlackjackDealer {\npublic:\n    BlackjackDealer() : score(0), aceCount(0) {\n        std::srand(std::time(0));\n        dealInitialCards();\n        play();\n    }\n\n    int getScore() const {\n        return score;\n    }\n\nprivate:\n    int score;\n    int aceCount;\n    std::vector<int> deck;\n\n    void dealInitialCards() {\n        deck.push_back(drawCard());\n        deck.push_back(drawCard());\n        calculateScore();\n    }\n\n    int drawCard() {\n        int card = std::rand() % 13 + 1; // Random card between 1 and 13\n        return card;\n    }\n\n    void calculateScore() {\n        score = 0;\n        aceCount = 0;\n        for (int card : deck) {\n            if (card == 1) { // Ace\n                aceCount++;\n                score += 11; // Initially treat Ace as 11\n            } else if (card >= 10) { // 10, Jack, Queen, King\n                score += 10;\n            } else {\n                score += card;\n            }\n        }\n        // Adjust for Aces if score is too high\n        while (score > 21 && aceCount > 0) {\n            score -= 10;\n            aceCount--;\n        }\n    }\n\n    void play() {\n        // Dealer rules: hit until reaching a score of 17 or higher\n        while (score < 17) {\n            deck.push_back(drawCard());\n            calculateScore();\n        }\n    }\n};\n\nint main() {\n    BlackjackDealer dealer;\n    std::cout << \"Dealer's final score: \" << dealer.getScore() << std::endl;\n    return 0;\n}",
    "timestamp": "2025-08-13 11:22:57"
  }
]