[
  {
    "language": "Scala",
    "code": "import scala.io.StdIn\n\nobject Main {\n\n  case class Point(x: Double = 0, y: Double = 0) {\n\n    def +(p: Point): Point = Point(this.x + p.x, this.y + p.y)\n\n    def -(p: Point): Point = Point(this.x - p.x, this.y - p.y)\n\n    def *(a: Double): Point = Point(this.x * a, this.y * a)\n\n    def /(a: Double): Point = {\n      assert(a == 0)\n      Point(this.x / a, this.y / a)\n    }\n\n    def norm(): Double = this.x * this.x + this.y * this.y\n\n    def abs(): Double = scala.math.sqrt(norm())\n\n    def <(p: Point): Boolean = this.x < p.x && this.y < p.y\n\n\n    def ==(p: Point): Boolean = scala.math.abs(this.x - p.x) < Cgl0A.EPS &&\n      scala.math.abs(this.y - p.y) < Cgl0A.EPS\n\n\n  }\n\n  case class Segment(p1: Point, p2: Point)\n\n  case class Line(p1: Point, p2: Point)\n\n  type GeoVector = Point\n\n  object Cgl0A {\n    val EPS: Double = scala.math.pow(10, -10)\n\n    // 内積\n    def dot(a: Point, b: Point): Double = a.x * b.x + a.y * b.y\n\n    def isOrthogonal(a: GeoVector, b: GeoVector): Boolean = dot(a, b) == 0.0\n\n    def isOrthogonal(a1: Point, a2: Point, b1: Point, b2: Point): Boolean = {\n      isOrthogonal(a1 - a2, b1 - b2)\n    }\n\n    def isOrthogonal(s1: Segment, s2: Segment): Boolean = {\n      dot(s1.p2 - s1.p1, s2.p2 - s2.p1) == 0.0\n    }\n\n    // 外積\n    def cross(a: Point, b: Point): Double = a.x * b.y - a.y * b.x\n\n    def isParallel(a: GeoVector, b: GeoVector): Boolean = cross(a, b) == 0.0\n\n    def isParallel(a1: Point, a2: Point, b1: Point, b2: Point): Boolean = {\n      isParallel(a1 - a2, b1 - b2)\n    }\n\n    def isParallel(s1: Segment, s2: Segment): Boolean = {\n      cross(s1.p2 - s1.p1, s2.p2 - s2.p1) == 0.0\n    }\n\n    def project(s: Segment, p: Point): Point = {\n      val base: GeoVector = s.p2 - s.p1\n      val r: Double = Cgl0A.dot(p - s.p1, base) / base.norm()\n      s.p1 + base * r\n    }\n\n    def reflect(s: Segment, p: Point): Point = {\n      p + (project(s, p) - p) * 2.0\n    }\n\n    def getDistance(a: Point, b: Point): Double = (a - b).abs()\n\n    def getDistanceLP(l: Line, a: Point): Double = {\n      scala.math.abs(cross(l.p2 - l.p1, a - l.p1) / (l.p2 - l.p1).abs())\n    }\n\n    def getDistanceSP(s: Segment, a: Point): Double = {\n      if (dot(s.p2 - s.p1, a - s.p1) < 0.0) (a - s.p1).abs()\n      else if (dot(s.p1 - s.p2, a - s.p2) < 0.0) (a - s.p2).abs()\n      else getDistanceLP(s.asInstanceOf[Line], a)\n    }\n\n    def getDistance(s1: Segment, s2: Segment): Double = {\n      if (intersect(s1, s2)) {\n        0.0\n      }\n      else {\n        math.min(math.min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n          math.min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)))\n      }\n    }\n\n    val COUNTER_CLOCKWISE: Int = 1\n    val CLOCKWISE: Int = -1\n    val ONLINE_BACK: Int = 2\n    val ONLINE_FRONT: Int = -2\n    val ON_SEGMENT: Int = 0\n\n    def ccw(p0: Point, p1: Point, p2: Point): Int = {\n      val a: GeoVector = p1 - p0\n      val b: GeoVector = p2 - p0\n\n      if (cross(a, b) > EPS) COUNTER_CLOCKWISE\n      else if (cross(a, b) < -1 * EPS) CLOCKWISE\n      else if (dot(a, b) < -1 * EPS) ONLINE_BACK\n      else if (a.norm() < b.norm()) ONLINE_FRONT\n      else ON_SEGMENT\n\n    }\n\n    def intersect(p1: Point, p2: Point, p3: Point, p4: Point): Boolean = {\n      Cgl0A.ccw(p1, p2, p3) * Cgl0A.ccw(p1, p2, p4) <= 0 &&\n        Cgl0A.ccw(p3, p4, p1) * Cgl0A.ccw(p3, p4, p2) <= 0\n    }\n\n    def intersect(s1: Segment, s2: Segment): Boolean = {\n      Cgl0A.intersect(s1.p1, s1.p2, s2.p1, s2.p2)\n    }\n\n  }\n\n\n  def main(args: Array[String]): Unit = {\n    val q = StdIn.readLine().toInt\n    (0 until q).foreach { i =>\n      val a = StdIn.readLine().split(' ').map(_.toDouble)\n      val s1 = Segment(Point(a(0), a(1)),Point(a(2), a(3)))\n      val s2 = Segment(Point(a(4), a(5)),Point(a(6), a(7)))\n\n      println(Cgl0A.getDistance(s1, s2))\n      \n    }\n\n  }\n\n}\n"
  },
  {
    "language": "Scala",
    "code": "import scala.io.StdIn\n\nobject Main {\n\n  case class Point(x: Double = 0, y: Double = 0) {\n\n    def +(p: Point): Point = Point(this.x + p.x, this.y + p.y)\n\n    def -(p: Point): Point = Point(this.x - p.x, this.y - p.y)\n\n    def *(a: Double): Point = Point(this.x * a, this.y * a)\n\n    def /(a: Double): Point = {\n      assert(a == 0)\n      Point(this.x / a, this.y / a)\n    }\n\n    def norm(): Double = this.x * this.x + this.y * this.y\n\n    def abs(): Double = scala.math.sqrt(norm())\n\n    def <(p: Point): Boolean = this.x < p.x && this.y < p.y\n\n\n    def ==(p: Point): Boolean = scala.math.abs(this.x - p.x) < Cgl0A.EPS &&\n      scala.math.abs(this.y - p.y) < Cgl0A.EPS\n\n\n  }\n\n  case class Segment(p1: Point, p2: Point)\n\n  case class Line(p1: Point, p2: Point)\n\n  type GeoVector = Point\n\n  object Cgl0A {\n    val EPS: Double = scala.math.pow(10, -10)\n\n    // 内積\n    def dot(a: Point, b: Point): Double = a.x * b.x + a.y * b.y\n\n    def isOrthogonal(a: GeoVector, b: GeoVector): Boolean = dot(a, b) == 0.0\n\n    def isOrthogonal(a1: Point, a2: Point, b1: Point, b2: Point): Boolean = {\n      isOrthogonal(a1 - a2, b1 - b2)\n    }\n\n    def isOrthogonal(s1: Segment, s2: Segment): Boolean = {\n      dot(s1.p2 - s1.p1, s2.p2 - s2.p1) == 0.0\n    }\n\n    // 外積\n    def cross(a: Point, b: Point): Double = a.x * b.y - a.y * b.x\n\n    def isParallel(a: GeoVector, b: GeoVector): Boolean = cross(a, b) == 0.0\n\n    def isParallel(a1: Point, a2: Point, b1: Point, b2: Point): Boolean = {\n      isParallel(a1 - a2, b1 - b2)\n    }\n\n    def isParallel(s1: Segment, s2: Segment): Boolean = {\n      cross(s1.p2 - s1.p1, s2.p2 - s2.p1) == 0.0\n    }\n\n    def project(s: Segment, p: Point): Point = {\n      val base: GeoVector = s.p2 - s.p1\n      val r: Double = Cgl0A.dot(p - s.p1, base) / base.norm()\n      s.p1 + base * r\n    }\n\n    def reflect(s: Segment, p: Point): Point = {\n      p + (project(s, p) - p) * 2.0\n    }\n\n    def getDistance(a: Point, b: Point): Double = (a - b).abs()\n\n    def getDistanceLP(l: Line, a: Point): Double = {\n      scala.math.abs(cross(l.p2 - l.p1, a - l.p1) / (l.p2 - l.p1).abs())\n    }\n\n    def getDistanceSP(s: Segment, a: Point): Double = {\n      if (dot(s.p2 - s.p1, a - s.p1) < 0.0) (a - s.p1).abs()\n      else if (dot(s.p1 - s.p2, a - s.p2) < 0.0) (a - s.p2).abs()\n      else getDistanceLP(Line(s.p1, s.p2), a)\n    }\n\n    def getDistance(s1: Segment, s2: Segment): Double = {\n      if (intersect(s1, s2)) {\n        0.0\n      }\n      else {\n        math.min(math.min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n          math.min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)))\n      }\n    }\n\n    val COUNTER_CLOCKWISE: Int = 1\n    val CLOCKWISE: Int = -1\n    val ONLINE_BACK: Int = 2\n    val ONLINE_FRONT: Int = -2\n    val ON_SEGMENT: Int = 0\n\n    def ccw(p0: Point, p1: Point, p2: Point): Int = {\n      val a: GeoVector = p1 - p0\n      val b: GeoVector = p2 - p0\n\n      if (cross(a, b) > EPS) COUNTER_CLOCKWISE\n      else if (cross(a, b) < -1 * EPS) CLOCKWISE\n      else if (dot(a, b) < -1 * EPS) ONLINE_BACK\n      else if (a.norm() < b.norm()) ONLINE_FRONT\n      else ON_SEGMENT\n\n    }\n\n    def intersect(p1: Point, p2: Point, p3: Point, p4: Point): Boolean = {\n      Cgl0A.ccw(p1, p2, p3) * Cgl0A.ccw(p1, p2, p4) <= 0 &&\n        Cgl0A.ccw(p3, p4, p1) * Cgl0A.ccw(p3, p4, p2) <= 0\n    }\n\n    def intersect(s1: Segment, s2: Segment): Boolean = {\n      Cgl0A.intersect(s1.p1, s1.p2, s2.p1, s2.p2)\n    }\n\n  }\n\n\n  def main(args: Array[String]): Unit = {\n    val q = StdIn.readLine().toInt\n    (0 until q).foreach { i =>\n      val a = StdIn.readLine().split(' ').map(_.toDouble)\n      val s1 = Segment(Point(a(0), a(1)),Point(a(2), a(3)))\n      val s2 = Segment(Point(a(4), a(5)),Point(a(6), a(7)))\n\n      println(f\"${Cgl0A.getDistance(s1, s2)}%.10f\")\n      \n    }\n\n  }\n\n}\n\n\n"
  },
  {
    "language": "Scala",
    "code": "object Main extends App {\n  import scala.io.StdIn._\n  for (_ ← 0 until readInt()) {\n    val Array(x0, y0, x1, y1, x2, y2, x3, y3) = readLine.trim.split(' ').map(_.toInt)\n    val a = Line(Coordinate(x0, y0), Coordinate(x1, y1))\n    val b = Line(Coordinate(x2, y2), Coordinate(x3, y3))\n    println(f\"${a.distance(b)}%.10f\")\n  }\n}\n\ncase class Coordinate(x: Double, y: Double) {\n  def distance(that: Coordinate): Double = (this - that).length\n  def -(that: Coordinate): Vector = Vector(x - that.x, y - that.y)\n}\ncase class Vector(x: Double, y: Double) {\n  def length: Double = math.sqrt(x * x + y * y)\n  def dot(that: Vector): Double = x * that.x + y * that.y\n  def cross(that: Vector): Double = x * that.y - y * that.x\n  def sin(that: Vector): Double = cross(that) / length / that.length\n  def cos(that: Vector): Double = dot(that) / length / that.length\n}\ncase class Line(a: Coordinate, b: Coordinate) {\n  def distance(that: Line): Double = {\n    if ((a - b).sin(that.a - b) * (a - b).sin(that.b - b) < 0 && (that.a - that.b).sin(a - that.b) * (that.a - that.b).sin(b - that.b) < 0) {\n      0.0\n    }else {\n      List(distance(that.a), distance(that.b), that.distance(a), that.distance(b)).min\n    }\n  }\n  def distance(that: Coordinate): Double = {\n    if ((a - b).cos(that - b) >= 0 && (b - a).cos(that - a) >= 0) a.distance(that) * (b - a).sin(that - a).abs\n    else List(a.distance(that), b.distance(that)).min\n  }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define mset(a,b) memset(a,b,sizeof(a))\n#define lson l,m,rt<<1\n#define rson m+1,r,rt<<1|1\nusing namespace std;\ntypedef long long ll;\nconst ll maxn=1e4+200;\nconst int inf=0x3f3f3f3f;\nconst double EPS=1e-10;\n//typedef pair<int,int> PA;\ndouble add(double a,double b){//考虑误差的加法运算\n    if(abs(a+b)<EPS*(abs(a)+abs(b))) return  0;\n    return a+b;\n}\nint sgn(double x){\n    if(abs(x)<EPS)  return 0;\n    if(x<0) return -1;\n    else return 1;\n}\nclass Point{\npublic:\n    double x,y;\n    Point(){}\n    Point(double x,double y):x(x),y(y){\n    }\n    Point operator+ (Point p){\n        return Point(add(x,p.x),add(y,p.y));\n    }\n    Point operator -(Point p){\n        return Point(add(x,-p.x),add(y,-p.y));\n    }\n    Point operator *(double d){\n        return Point(x*d,y*d);\n    }\n    double operator *(Point p){\n        return add(x*p.x,y*p.y);//外积\n    }\n    double operator ^(Point p){//内积\n        return add(x*p.y,-y*p.x);\n    }\n    double det(Point p){\n     return add(x*p.y,-y*p.x);\n    }\n    double len(){\n        return sqrt(add(x*x,y*y));\n    }\n};\nclass Line{\npublic:\n    Point s,e;\n    Line(){}\n    Line(Point s,Point e):s(s),e(e){}\n};\nbool onSge(Line l,Point q){\n    return ((l.s-q)^(l.e-q))==0&&((l.s-q)*(l.e-q))<=0;\n}\nPoint operator *(double d,Point p){\n    return Point(p.x*d,p.y*d);\n}\nPoint getProject(Point p1,Point p2,Point q){//q 在直线p1,p2上的投影坐标\n    double d1=1.0/(p2-p1).len();\n    Point ans=(q-p1)*(p2-p1)*(p2-p1)*d1*d1;\n    return ans+p1;\n}\nPoint getReflect(Point p1,Point p2,Point q){//q 关于直线p1 p2的 反射坐标\n    return 2.0*getProject(p1,p2,q)-q;\n}\ndouble getDisPP(Point a,Point b){//两点之间距离\n    return (b-a).len();\n}\ndouble getDisPL(Line l,Point p){//点到直线距离\n    Point x=getProject(l.s,l.e,p);\n    return (p-x).len();\n}\ndouble getDisPS(Line l,Point p){//点到线段最短距离\n    Point x=getProject(l.s,l.e,p);\n    if(onSge(l,x))\n        return (x-p).len();\n    else\n        return min((p-l.s).len(),(p-l.e).len());\n\n}\ndouble getDisSS(Line la,Line lb){//保证两线段不相交 isInterSS==false\n    return min(min(getDisPS(la,lb.s),getDisPS(la,lb.e)),\n\t\t\tmin(getDisPS(lb,la.s),getDisPS(lb,la.e)));\n}\n\nint getDirPPP(Point p,Point p1,Point p2){\n    return sgn((p1-p)^(p2-p));//1代表 p2在p1的逆时针方向  0共线 ，-1是p2在p1的顺时针方向\n}\nint getStatePP(Point p,Point p1,Point p2){//返回 p2 关于p 在p1的什么方向\n        int a=sgn((p1-p)^(p2-p));\n        int b=sgn((p1-p)*(p2-p));\n        if(a>0){//\n            puts(\"COUNTER_CLOCKWISE\");\n        }\n        else if(a<0){\n            puts(\"CLOCKWISE\");\n        }\n        else if(b<0){\n            puts(\"ONLINE_BACK\");\n        }\n        else if(b>0&&sgn((p1-p)*(p2-p1))>0){\n            puts(\"ONLINE_FRONT\");\n        }\n        else{\n            puts(\"ON_SEGMENT\");\n        }\n        return 0;\n}\nbool isInterSS(Line la,Line lb){//线段是否想交\n    int d1=getDirPPP(lb.s,lb.e,la.s);\n    int d2=getDirPPP(lb.s,lb.e,la.e);\n    int d3=getDirPPP(la.s,la.e,lb.s);\n    int d4=getDirPPP(la.s,la.e,lb.e);\n    if(d1*d2<0&&d3*d4<0)\n        return true;\n    else if(d1==0&&onSge(lb,la.s))\n        return true;\n    else if(d2==0&&onSge(lb,la.e))\n        return true;\n    else if(d3==0&&onSge(la,lb.s))\n        return true;\n    else if(d4==0&&onSge(la,lb.e))\n        return true;\n    else\n        return false;\n\n}\nint getStateLL(Line la,Line lb){//两个直线 垂直，相交或者平行\n    if(sgn((la.e-la.s)^(lb.e-lb.s))==0){\n        return 2;//平行\n    }//两向量平行 内积为0\n    else if(sgn((la.e-la.s)*(lb.e-lb.s))==0){\n        return 1;//垂直\n    }\n    else return 0;\n}\ntypedef Point P;\nPoint getInterLL(Point p1,Point p2,Point q1, Point q2){//得到直线交点\n    return p1+(p2-p1)*((q2-q1).det(q1-p1)/(q2-q1).det(p2-p1));\n}\nint main(){\n    int q;\n    P p0,p1,p2,p3;\n    scanf(\"%d\",&q);\n    while(q--){\n        scanf(\"%lf%lf%lf%lf%lf%lf%lf%lf\",&p0.x,&p0.y,&p1.x,&p1.y,&p2.x,&p2.y,&p3.x,&p3.y);\n        if(isInterSS(Line(p0,p1),Line(p2,p3))){\n            printf(\"%.10f\\n\",0.0);\n            continue;\n        }\n        printf(\"%.10f\\n\",getDisSS(Line(p0,p1),Line(p2,p3)));\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<cmath>\n\nusing namespace std;\n\n\nconst int CCW_COUNTER_CLOCKWISE = 1;\nconst int CCW_CLOCKWISE = -1;\nconst int CCW_ONLINE_BACK = 2;\nconst int CCW_ONLINE_FRONT = -2;\nconst int CCW_ON_SEGMENT = 0;\n\n\nconst double EPS = 1e-10;\ninline bool equals(double x, double y) {\n  return fabs(x-y) < EPS;\n}\n\n\nstruct Point {\n  Point(int _x, int _y) : x(_x), y(_y) {}\n\n  double x, y;\n\n  Point operator+(const Point& other) const {\n    return Point(x+other.x, y+other.y);\n  }\n\n  Point operator-(const Point& other) const {\n    return Point(x-other.x, y-other.y);\n  }\n\n  Point operator*(double k) const {\n    return Point(x*k, y*k);\n  }\n};\n\n\ntypedef Point Vector;\n\n\nstruct Segment {\n  Segment(Point _p1, Point _p2) : p1(_p1), p2(_p2) {}\n  Point p1, p2;\n};\n\n\ntypedef Segment Line;\n\n\ndouble norm(Vector v) {\n  return v.x*v.x + v.y*v.y;\n}\n\ndouble abs(Vector v) {\n  return sqrt(norm(v));\n}\n\ndouble dot(Vector a, Vector b) {\n  return a.x*b.x + a.y*b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n  return a.x*b.y - a.y*b.x;\n}\n\nint ccw(Point p0, Point p1, Point p2) {\n  Vector a = p1 - p0;\n  Vector b = p2 - p0;\n  if (cross(a, b) > EPS) return CCW_COUNTER_CLOCKWISE;\n  if (cross(a, b) < -EPS) return CCW_CLOCKWISE;\n  if (dot(a, b) < -EPS) return CCW_ONLINE_BACK;\n  if (norm(a) < norm(b)) return CCW_ONLINE_FRONT;\n  return CCW_ON_SEGMENT;\n}\n\nbool intersect(Point p0, Point p1, Point p2, Point p3) {\n  return ccw(p0, p1, p2) * ccw(p0, p1, p3) <= 0 &&\n         ccw(p2, p3, p0) * ccw(p2, p3, p1) <= 0;\n}\n\ndouble getDistanceLP(Line line, Point p) {\n  Point p1 = line.p1, p2 = line.p2;\n  return fabs(cross(p2-p1, p-p1) / abs(p2-p1));\n}\n\ndouble getDistanceSP(Segment s, Point p) {\n  if (dot(s.p2-s.p1, p-s.p1) < -EPS) return abs(p-s.p1);\n  if (dot(s.p1-s.p2, p-s.p2) < -EPS) return abs(p-s.p2);\n  return getDistanceLP(s, p);\n}\n\ndouble getDistanceSS(Segment s1, Segment s2) {\n  if (intersect(s1.p1, s1.p2, s2.p1, s2.p2)) return 0.0; \n  return fmin(fmin(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n              fmin(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\n\nvoid solve(int n) {\n  for (int i = 0; i < n; ++i) {\n    int x0, y0, x1, y1, x2, y2, x3, y3;\n    scanf(\"%d %d %d %d %d %d %d %d\", &x0, &y0, &x1, &y1, &x2, &y2, &x3, &y3);\n    Point p0(x0, y0), p1(x1, y1), p2(x2, y2), p3(x3, y3);\n    Segment s1(p0, p1), s2(p2, p3);\n    printf(\"%.10lf\\n\", getDistanceSS(s1, s2));\n  }\n}\n\nint main() {\n  \n  int n;\n  scanf(\"%d\", &n);\n\n  solve(n);\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <sstream>\n#include <string.h>\n#include <vector>\n#include <map>\n#include <algorithm>\n#include <utility>\n#include <set>\n#include <cctype>\n#include <queue>\n#include <stack>\n#include <cstdio>\n#include <cstdlib>\n#include <cmath>\n#include <deque>\n#include <limits>\n#include <iomanip>\n#include <ctype.h>\n#include <unordered_map>\n#include <random>\n#include <numeric>\n#include <iostream>\n#include <array>\n\n#define _USE_MATH_DEFINES\n#include <iostream>\n#include <math.h>\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef pair<ll, ll> pll;\ntypedef pair<ll, double> pld;\ntypedef pair<double, double> pdd;\ntypedef pair<double, ll> pdl;\ntypedef pair<int, char> pic;\ntypedef vector<ll> vl;\ntypedef vector<int> vi;\ntypedef priority_queue<ll, vector<ll>, greater<ll>> llgreaterq;\ntypedef priority_queue<pll, vector<pll>, greater<pll>> pllgreaterq;\ntypedef priority_queue<pair<ll, pll>, vector<pair<ll, pll>>, greater<pair<ll, pll>>> plpllgreaterq;\ntypedef priority_queue<vi, vector<vi>, greater<vi>> vigreaterq;\ntypedef priority_queue<vl, vector<vl>, greater<vl >> vlgreaterq;\nint dx[] = { -1,0,1,0 };\nint dy[] = { 0,-1,0,1 };\n#define bit(x,v) ((ll)x << v)\n#define rep(x,n) for(int x = 0;x < n;x++)\n#define rep2(x,f,v) for(int x=f;x<v;x++)\n// 許容する誤差ε\n#define EPS (1e-10)\n// 2つのスカラーが等しいかどうか\n#define EQ(a,b) (std::abs(a-b) < EPS)\n// 2つのベクトルが等しいかどうか\n#define EQV(a,b) ( EQ((a).real(), (b).real()) && EQ((a).imag(), (b).imag()) )\n#define all(a) a.begin(),a.end()\n#define all0(a) memset(a,0,sizeof(a))\n#define alm1(a) memset(a,-1,sizeof(a))\n\nconst ll INF = 1000000007;\nconst int MAX = 2000010;\nconst int MOD = 1000000007;\n\nlong long fac[MAX], finv[MAX], inv[MAX];\nvoid COMinit() {\n\tfac[0] = fac[1] = 1;\n\tfinv[0] = finv[1] = 1;\n\tinv[1] = 1;\n\tfor (int i = 2; i < MAX; i++) {\n\t\tfac[i] = fac[i - 1] * i % MOD;\n\t\tinv[i] = MOD - inv[MOD % i] * (MOD / i) % MOD;\n\t\tfinv[i] = finv[i - 1] * inv[i] % MOD;\n\t}\n}\n\n// 二項係数計算\nlong long COM(int n, int k) {\n\tif (n < k) return 0;\n\tif (n < 0 || k < 0) return 0;\n\treturn fac[n] * (finv[k] * finv[n - k] % MOD) % MOD;\n}\n\nll gcd(ll a, ll b) {\n\tif (b == 0) return a;\n\treturn gcd(b, a % b);\n}\nint pr[100010];\nint lank[100010];\nvoid uini(int n) {\n\tfor (size_t i = 0; i <= n; i++)\n\t{\n\t\tpr[i] = i;\n\t\tlank[i] = 1;\n\t}\n}\n\nint parent(int x) {\n\tif (x == pr[x]) return x;\n\treturn pr[x] = parent(pr[x]);\n}\n\nint same(int x, int y) {\n\treturn parent(x) == parent(y);\n}\n\nbool unit(int x, int y) {\n\tint px = parent(x);\n\tint py = parent(y);\n\n\tif (px == py) return false;\n\tif (lank[py] < lank[px]) {\n\t\tpr[py] = px;\n\t\tlank[px] += lank[py];\n\t}\n\telse {\n\t\tpr[px] = py;\n\t\tlank[py] += lank[px];\n\t}\n\treturn true;\n}\n\nll bit[200010];\nint max_n = 200000;\nint pm = 0;\nvoid add(int x) {\n\n\twhile (max_n >= x)\n\t{\n\t\tbit[x]++;\n\t\tx += x & -x;\n\t}\n}\nvoid sub(int x) {\n\twhile (max_n >= x)\n\t{\n\t\tbit[x]--;\n\t\tx += x & -x;\n\t}\n}\nll merge(ll* a, int left, int mid, int right) {\n\tll n1 = mid - left;\n\tll n2 = right - mid;\n\tvector<int> L(n1 + 1);\n\tvector<int> R(n2 + 1);\n\tfor (size_t i = 0; i < n1; i++)\n\t{\n\t\tL[i] = a[left + i];\n\t}\n\tfor (size_t i = 0; i < n2; i++)\n\t{\n\t\tR[i] = a[mid + i];\n\t}\n\n\tL[n1] = INF;\n\tR[n2] = INF;\n\tll i = 0;\n\tll j = 0;\n\tll r = 0;\n\tfor (size_t k = left; k < right; k++)\n\t{\n\t\tif (L[i] <= R[j]) {\n\t\t\ta[k] = L[i];\n\t\t\ti++;\n\t\t}\n\t\telse {\n\t\t\ta[k] = R[j];\n\t\t\tr += n1 - i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn r;\n}\nll merge2(pair<int, char>* a, int left, int mid, int right) {\n\tll n1 = mid - left;\n\tll n2 = right - mid;\n\tvector<pair<int, char>> L(n1 + 1);\n\tvector<pair<int, char>> R(n2 + 1);\n\tfor (size_t i = 0; i < n1; i++)\n\t{\n\t\tL[i] = a[left + i];\n\t}\n\tfor (size_t i = 0; i < n2; i++)\n\t{\n\t\tR[i] = a[mid + i];\n\t}\n\n\tL[n1] = make_pair(INF, ' ');\n\tR[n2] = make_pair(INF, ' ');\n\tll i = 0;\n\tll j = 0;\n\tll r = 0;\n\tfor (size_t k = left; k < right; k++)\n\t{\n\t\tif (L[i].first <= R[j].first) {\n\t\t\ta[k] = L[i];\n\t\t\ti++;\n\t\t}\n\t\telse {\n\t\t\ta[k] = R[j];\n\t\t\tr += n1 - i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn r;\n}\nll mergeSort2(pair<int, char>* a, int left, int right) {\n\tll res = 0;\n\tif (left + 1 < right) {\n\t\tint mid = (left + right) / 2;\n\t\tres = mergeSort2(a, left, mid);\n\t\tres += mergeSort2(a, mid, right);\n\t\tres += merge2(a, left, mid, right);\n\t}\n\treturn res;\n}\nll mergeSort(ll* a, int left, int right) {\n\tll res = 0;\n\tif (left + 1 < right) {\n\t\tint mid = (left + right) / 2;\n\t\tres = mergeSort(a, left, mid);\n\t\tres += mergeSort(a, mid, right);\n\t\tres += merge(a, left, mid, right);\n\t}\n\treturn res;\n}\nint partition(pair<int, char>* a, int p, int r) {\n\tpair<int, char> x = a[r];\n\tint i = p - 1;\n\tfor (size_t j = p; j < r; j++)\n\t{\n\t\tif (a[j].first <= x.first) {\n\t\t\ti++;\n\t\t\tswap(a[i], a[j]);\n\t\t}\n\t}\n\tswap(a[i + 1], a[r]);\n\treturn i + 1;\n}\nvoid quick(pair<int, char>* a, int p, int r) {\n\tif (p < r) {\n\t\tint q = partition(a, p, r);\n\t\tquick(a, p, q - 1);\n\t\tquick(a, q + 1, r);\n\t}\n}\n\nll n;\nint ci = 0;\nll P[1000010];\nstruct Node {\n\tint key;\n\tint priority;\n\tNode* parent, * left, * right;\n\tNode(int key, int priority);\n\tNode() {}\n};\nNode NIL;\nNode::Node(int key, int priority) : key(key), priority(priority) {\n\tleft = &NIL;\n\tright = &NIL;\n}\nNode* root = new Node();\nvoid cenrec(Node* k) {\n\tif (k->key == NIL.key) return;\n\tcenrec(k->left);\n\tcout << \" \" << k->key;\n\tcenrec(k->right);\n}\nvoid fastrec(Node* k)\n{\n\tif (k->key == NIL.key) return;\n\tcout << \" \" << k->key;\n\tfastrec(k->left);\n\tfastrec(k->right);\n}\nvoid insert(Node* v) {\n\tNode* y = &NIL;\n\tNode* x = root;\n\twhile (x->key != NIL.key)\n\t{\n\t\ty = x;\n\t\tif (v->key < x->key) {\n\t\t\tx = x->left;\n\t\t}\n\t\telse {\n\t\t\tx = x->right;\n\t\t}\n\t}\n\tv->parent = y;\n\tif (y->key == NIL.key) {\n\t\troot = v;\n\t}\n\telse if (v->key < y->key) {\n\t\ty->left = v;\n\t}\n\telse {\n\t\ty->right = v;\n\t}\n\n}\n\nNode* find(Node* k, ll v)\n{\n\tif (k->key == NIL.key) return &NIL;\n\tif (k->key == v) return k;\n\tif (v < k->key) return find(k->left, v);\n\treturn find(k->right, v);\n}\nvoid delp12(Node* x) {\n\tif (x->key == NIL.key)  return;\n\tNode* l = x->left;\n\tNode* r = x->right;\n\tNode* pr = x->parent;\n\n\tif (l->key == NIL.key\n\t\t&& r->key == NIL.key) {\n\t\tif (pr->left == x) {\n\t\t\tpr->left = &NIL;\n\t\t}\n\t\telse pr->right = &NIL;\n\t}\n\telse if (l->key != NIL.key) {\n\t\tif (pr->left == x) {\n\t\t\tpr->left = l;\n\t\t}\n\t\telse pr->right = l;\n\t\tl->parent = pr;\n\t}\n\telse if (r->key != NIL.key) {\n\t\tif (pr->left == x) {\n\t\t\tpr->left = r;\n\t\t}\n\t\telse pr->right = r;\n\t\tr->parent = pr;\n\t}\n}\nNode* get_next(Node* k) {\n\tif (k->key == NIL.key) return &NIL;\n\tNode* res = get_next(k->left);\n\tif (res->key != NIL.key) return res;\n\treturn k;\n}\nvoid del(Node* x) {\n\n\tif (x->key == NIL.key) return;\n\tNode* l = x->left;\n\tNode* r = x->right;\n\tNode* pr = x->parent;\n\n\tif (l->key != NIL.key && r->key != NIL.key) {\n\t\tNode* nex = get_next(r);\n\t\tx->key = nex->key;\n\t\tdelp12(nex);\n\t}\n\telse {\n\t\tdelp12(x);\n\t}\n}\nNode* rightRotate(Node* t) {\n\tNode* s = t->left;\n\tt->left = s->right;\n\ts->right = t;\n\treturn s;\n}\nNode* leftRotate(Node* t) {\n\tNode* s = t->right;\n\tt->right = s->left;\n\ts->left = t;\n\treturn s;\n}\nNode* _insert(Node* t, int key, int priority) {\n\tif (t->key == NIL.key) {\n\t\treturn new Node(key, priority);\n\t}\n\tif (key == t->key) {\n\t\treturn t;\n\t}\n\n\tif (key < t->key) {\n\t\tt->left = _insert(t->left, key, priority);\n\t\tif (t->priority < t->left->priority) {\n\t\t\tt = rightRotate(t);\n\t\t}\n\t}\n\telse {\n\t\tt->right = _insert(t->right, key, priority);\n\t\tif (t->priority < t->right->priority) {\n\t\t\tt = leftRotate(t);\n\t\t}\n\t}\n\treturn t;\n}\nNode* delete1(Node* t, int key);\nNode* _delete(Node* t, int key) {\n\tif (t->left->key == NIL.key && t->right->key == NIL.key) {\n\t\treturn &NIL;\n\t}\n\telse if (t->left->key == NIL.key) {\n\t\tt = leftRotate(t);\n\t}\n\telse if (t->right->key == NIL.key) {\n\t\tt = rightRotate(t);\n\t}\n\telse\n\t{\n\t\tif (t->left->priority > t->right->priority) {\n\t\t\tt = rightRotate(t);\n\t\t}\n\t\telse\n\t\t\tt = leftRotate(t);\n\t}\n\treturn delete1(t, key);\n}\nNode* delete1(Node* t, int key) {\n\tif (t->key == NIL.key) {\n\t\treturn &NIL;\n\t}\n\tif (key < t->key) {\n\t\tt->left = delete1(t->left, key);\n\t}\n\telse if (key > t->key) {\n\t\tt->right = delete1(t->right, key);\n\t}\n\telse return _delete(t, key);\n\treturn t;\n}\nint H;\nint left(int i) {\n\treturn i * 2 + 1;\n}\nint right(int i) {\n\treturn i * 2 + 2;\n}\nstruct edge {\n\tint from, to;\n\tll val;\n\tedge(int from, int to, ll val) : from(from), to(to), val(val) {}\n};\nll k;\nint _rank[1010];\nint temp[1010];\nbool compare_sa(int i, int j) {\n\tif (_rank[i] != _rank[j]) return _rank[i] < _rank[j];\n\telse {\n\t\tint ri = i + k <= n ? _rank[i + k] : -1;\n\t\tint rj = j + k <= n ? _rank[j + k] : -1;\n\t\treturn ri < rj;\n\t}\n}\nvoid construct_sa(string S, int* sa) {\n\tn = S.length();\n\n\tfor (size_t i = 0; i <= n; i++)\n\t{\n\t\tsa[i] = i;\n\t\t_rank[i] = i < n ? S[i] : -1;\n\t}\n\n\tfor (k = 1; k <= n; k *= 2)\n\t{\n\t\tsort(sa, sa + n + 1, compare_sa);\n\n\t\t// saはソート後の接尾辞の並びになっている、rankは元の位置のindexを保持したまま、更新されている。\n\t\t// ピンとこなかった部分\n\t\ttemp[sa[0]] = 0;\n\t\tfor (size_t i = 1; i <= n; i++)\n\t\t{\n\t\t\ttemp[sa[i]] = temp[sa[i - 1]] + (compare_sa(sa[i - 1], sa[i]) ? 1 : 0);\n\t\t}\n\t\tfor (size_t i = 0; i <= n; i++)\n\t\t{\n\t\t\t_rank[i] = temp[i];\n\t\t}\n\t}\n}\nbool contain(string S, int* sa, string T) {\n\tint a = 0, b = S.length();\n\t// sa は 接尾辞が辞書順に並んでいる、入っているのはその位置のインデックス\n\twhile (b - a > 1) {\n\t\tint c = (a + b) / 2;\n\t\tif (S.compare(sa[c], T.length(), T) < 0) a = c;\n\t\telse b = c;\n\t}\n\treturn S.compare(sa[b], T.length(), T) == 0;\n}\n\n\n#define bit(x,v) ((ll)x << v)\n\nclass BIT {\n\n\tstatic const int MAX_N = 500010;\npublic:\n\tBIT() { memset(bit, 0, sizeof(bit)); }\n\tll bit[MAX_N + 1], n;\n\tll sum(int i) {\n\t\tll s = 0;\n\t\twhile (i > 0)\n\t\t{\n\t\t\ts += bit[i];\n\t\t\ti -= i & -i;\n\t\t}\n\t\treturn s;\n\t}\n\n\tvoid add(int i, int x) {\n\t\twhile (i <= n)\n\t\t{\n\t\t\tbit[i] += x;\n\t\t\ti += i & -i;\n\t\t}\n\t}\n\n\n};\nstruct UnionFind {\n\tvector<int> A;\n\tUnionFind(int n) : A(n, -1) {}\n\tint find(int x) {\n\t\tif (A[x] < 0) return x;\n\t\treturn A[x] = find(A[x]);\n\t}\n\tvoid unite(int x, int y) {\n\t\tx = find(x), y = find(y);\n\t\tif (x == y) return;\n\t\tif (A[x] > A[y]) swap(x, y);\n\t\tA[x] += A[y];\n\t\tA[y] = x;\n\t}\n\tint ngroups() {\n\t\tint ans = 0;\n\t\tfor (auto a : A) if (a < 0) ans++;\n\t\treturn ans;\n\t}\n};\nvoid yes() { cout << \"Yes\\n\"; exit(0); }\nvoid no() { cout << \"No\\n\"; exit(0); }\nvector<ll> getp(ll n) {\n\n\tvector<ll> res;\n\tll a = 2;\n\tif (n % 2 == 0) {\n\t\tres.push_back(2);\n\t\twhile (n % 2 == 0)n /= 2;\n\t}\n\n\tfor (ll i = 3; i * i <= n; i += 2)\n\t{\n\t\tif (n % i == 0) {\n\t\t\tres.push_back(i);\n\t\t\twhile (n % i == 0)n /= i;\n\t\t}\n\t}\n\tif (n != 1) res.push_back(n);\n\treturn res;\n}\nvector<ll> getp2(ll n) {\n\n\tvector<ll> res;\n\tll a = 2;\n\tif (n % 2 == 0) {\n\n\t\twhile (n % 2 == 0) { n /= 2; res.push_back(2); }\n\t}\n\n\tfor (ll i = 3; i * i <= n; i += 2)\n\t{\n\t\tif (n % i == 0) {\n\n\t\t\twhile (n % i == 0) { n /= i; res.push_back(i); }\n\t\t}\n\t}\n\tif (n != 1) res.push_back(n);\n\treturn res;\n}\nvector<pll> getp3(ll n) {\n\tvector<pll> res;\n\tll a = 2;\n\tint si = 0;\n\tif (n % 2 == 0) {\n\n\t\tres.push_back(make_pair(2, 0));\n\t\twhile (n % 2 == 0) { n /= 2; res[si].second++; }\n\t\tsi++;\n\t}\n\n\tfor (ll i = 3; i * i <= n; i += 2)\n\t{\n\t\tif (n % i == 0) {\n\t\t\tres.push_back(make_pair(i, 0));\n\t\t\twhile (n % i == 0) { n /= i; res[si].second++; }\n\t\t\tsi++;\n\t\t}\n\t}\n\tif (n != 1) { res.push_back(make_pair(n,1)); }\n\treturn res;\n}\n\nvector<ll> getDivisors(ll n) {\n\n\tvector<ll> res;\n\tll a = 2;\n\tres.push_back(1);\n\tfor (ll i = 2; i * i <= n; i++)\n\t{\n\n\t\tif (n % i == 0) {\n\t\t\tres.push_back(i);\n\t\t\tif (n / i != i)\n\t\t\t\tres.push_back(n / i);\n\t\t}\n\t}\n\treturn res;\n}\n\nstruct ve {\npublic:\n\tvector<ve> child;\n\tint _t = INF;\n\tve(int t) :_t(t) {}\n\tve(ve _left, ve _right) {\n\t\t_t = _left._t + _right._t;\n\t\tchild.push_back(_left);\n\t\tchild.push_back(_right);\n\t}\n\tbool operator<(const ve& t) const {\n\t\treturn _t > t._t;\n\t}\n};\n\nvector<bool> elas(ll n) {\n\tvector<bool> r(n);\n\tfill(r.begin(), r.end(), 1);\n\tr[0] = 0;\n\tr[1] = 0;\n\tfor (ll i = 2; i * i < n; i++)\n\t{\n\t\tif (!r[i]) continue;\n\t\tll ti = i * 2;\n\t\twhile (ti < n)\n\t\t{\n\t\t\tr[ti] = false;\n\t\t\tti += i;\n\t\t}\n\t}\n\treturn r;\n}\nbool isPrime(ll v) {\n\tfor (ll i = 2; i * i <= v; i++)\n\t{\n\t\tif (v % i == 0) return false;\n\t}\n\treturn true;\n}\n\nll getpow(ll b,ll x, ll md) {\n\n\tll t = b;\n\tll res = 1;\n\twhile (x > 0)\n\t{\n\t\tif (x & 1) {\n\t\t\tres *= t;\n\t\t\tres %= md;\n\t\t}\n\t\tx >>= 1;\n\t\tt *= t;\n\t\tt %= md;\n\t}\n\treturn res;\n}\nll getpow(ll b, ll x) {\n\n\treturn getpow(b, x, INF);\n}\n\nclass SegTree {\n\npublic :\n\tconst static int MAX_N = 100010;\n\tconst static int DAT_SIZE = (1 << 18) - 1;\n\tint N, Q;\n\tint A[MAX_N];\n\t\n\t\n\tll data[DAT_SIZE], datb[DAT_SIZE];\n\tvoid init(int _n) {\n\t\tN = 1;\n\t\twhile (N < _n) N <<= 1;\n\t\tmemset(data, 0, sizeof(data));\n\t\tmemset(datb, 0, sizeof(datb));\n\t}\n\tvoid init(int _n,ll iv) {\n\t\tN = 1;\n\t\twhile (N < _n) N <<= 1;\n\t\trep(i, DAT_SIZE) {\n\t\t\tdata[i] = iv;\n\t\t\tdatb[i] = iv;\n\t\t}\n\t}\n\tvoid add(int a, int b, int x) {\n\t\tadd(a, b + 1, x, 0, 0, N);\n\t}\n\tvoid add(int a, int b, int x, int k, int l, int r) {\n\t\tif (a <= l && r <= b) {\n\t\t\tdata[k] += x;\n\t\t}\n\t\telse if (l < b && a < r) {\n\t\t\tdatb[k] += (min(b, r) - max(a, l)) * x;\n\t\t\tadd(a, b, x, k * 2 + 1, l, (l + r) / 2);\n\t\t\tadd(a, b, x, k * 2 + 2, (l + r)/2, r);\n\t\t}\n\t}\n\n\tvoid change(int a, int b, int x) {\n\t\tchange(a, b + 1, x, 0, 0, N);\n\t}\n\tvoid change(int a, int b, int x, int k, int l, int r) {\n\t\tif (a <= l && r <= b) {\n\t\t\tdata[k] = x;\n\t\t}\n\t\telse if (l < b && a < r) {\n\t\t\tdatb[k] = x;\n\t\t\tchange(a, b, x, k * 2 + 1, l, (l + r) / 2);\n\t\t\tchange(a, b, x, k * 2 + 2, (l + r) / 2, r);\n\t\t}\n\t}\n\n\tll sum(int a, int b) {\n\t\treturn sum(a, b + 1, 0, 0, N);\n\t}\n\tll sum(int a, int b, int k, int l, int r) {\n\t\tif (b <= l || r <= a) {\n\t\t\treturn 0;\n\t\t}\n\t\tif (a <= l && r <= b) {\n\t\t\treturn data[k] * (r - l) + datb[k];\n\t\t}\n\n\t\tll res = (min(b, r) - max(a, l)) * data[k];\n\t\tres += sum(a, b, k * 2 + 1, l, (l + r) / 2);\n\t\tres += sum(a, b, k * 2 + 2, (l + r) / 2, r);\n\t\treturn res;\n\t}\n};\nclass Segment;\nclass Circle;\n\nclass Point {\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0) :x(x), y(y) {}\n\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a) { return Point(a * x, a * y); }\n\tPoint operator / (double a) { return Point(x / a, y /a); }\n\n\tdouble abs() { return sqrt(norm()); }\n\tdouble norm() { return x * x + y * y; }\n\n\tbool operator < (const Point& p)const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\tbool operator == (const Point& p) const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n\tstatic double dot(Point a, Point b) {\n\t\treturn a.x * b.x + a.y * b.y;\n\t}\n\tstatic double cross(Point a, Point b) {\n\t\treturn a.x * b.y - a.y * b.x;\n\t}\n\tstatic bool isOrthogonal(Point a, Point b) {\n\t\treturn EQ(dot(a, b), 0.0);\n\t}\n\tstatic bool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n\t\treturn isOrthogonal(a1 - a2, b1 - b2);\n\t}\n\tstatic bool isOrthogonal(Segment s1, Segment s2);\n\n\tstatic bool isPalallel(Point a, Point b) {\n\t\treturn EQ(cross(a, b), 0.0);\n\t}\n\tstatic bool isPalallel(Point a1, Point a2, Point b1, Point b2) {\n\t\treturn isPalallel(a1 - a2, b1 - b2);\n\t}\n\tstatic bool isPalallel(Segment s1, Segment s2);\n\n\tstatic const int COUNTER_CLOCKWISE = 1;\n\tstatic const int CLOCKWISE = -1;\n\tstatic const int ONLINE_BACK = 2;\n\tstatic const int ONLINE_FRONT = -2;\n\tstatic const int ON_SEGMENT = 0;\n\tstatic int ccw(Point p0, Point p1, Point p2) {\n\t\tPoint a = p1 - p0;\n\t\tPoint b = p2 - p0;\n\t\tif (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\t\tif (cross(a, b) < -EPS) return CLOCKWISE;\n\t\tif (dot(a, b) < -EPS) return ONLINE_BACK;\n\t\tif (a.norm() < b.norm()) return ONLINE_FRONT;\n\t\treturn ON_SEGMENT;\n\t}\n\n\tstatic bool intersect(Point p1, Point p2, Point p3, Point p4) {\n\t\treturn (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0\n\t\t\t&& ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n\t} \n\tstatic bool intersect(Segment s1, Segment s2);\n\tstatic Point project(Segment s, Point p);\n\n\tstatic Point reflect(Segment s, Point p);\n\n\tstatic Point getDistance(Point a, Point b) {\n\t\treturn (a - b).abs();\n\t}\n\n\tstatic double getDistanceLP(Segment s, Point p);\n\n\tstatic double getDistanceSP(Segment s, Point p);\n\t\n\tstatic double getDistance(Segment s1, Segment s2);\n\n\tstatic Point getIntersection(Segment s1, Segment s2);\n\n\tstatic pair<Point, Point> crossPoints(Circle c, Segment s);\n\n\tstatic int contains(vector<Point> g, Point p) {\n\t\tint n = g.size();\n\t\tbool x = false;\n\t\trep(i, n) {\n\t\t\tPoint a = g[i] - p, b = g[(i + 1) % n] - p;\n\t\t\t// 線の上に載っているか\n\t\t\tif (std::abs(cross(a, b)) < EPS && dot(a, b) < EPS) return 1;\n\n\t\t\t// pを基準として上下にあるか\n\t\t\t// または外積が正か?(→にあるか)\n\t\t\tif (a.y > b.y) swap(a, b);\n\t\t\tif (a.y < EPS && EPS < b.y && cross(a, b) > EPS) x = !x;\n\t\t}\n\t\treturn x ? 2 : 0;\n\t}\n\n\tstatic vector<Point> andrewScan(vector<Point> s) {\n\t\tvector<Point> u, l;\n\t\tif (s.size() < 3) return s;\n\t\tsort(all(s));\n\t\tu.push_back(s[0]);\n\t\tu.push_back(s[1]);\n\t\tl.push_back(s[s.size() - 1]);\n\t\tl.push_back(s[s.size() - 2]);\n\n\t\tfor (int i = 2; i < s.size(); i++) {\n\n\t\t\tfor (int _n = u.size(); _n >= 2 && ccw(u[_n - 2], u[_n - 1], s[i]) > CLOCKWISE; _n--) {\n\t\t\t\tu.pop_back();\n\t\t\t}\n\t\t\tu.push_back(s[i]);\n\t\t}\n\n\t\tfor (int i = s.size() - 3; i >= 0; i--) {\n\n\t\t\tfor (int _n = l.size(); _n >= 2 && ccw(l[_n - 2], l[_n - 1], s[i]) > CLOCKWISE; _n--) {\n\t\t\t\tl.pop_back();\n\t\t\t}\n\t\t\tl.push_back(s[i]);\n\t\t}\n\n\t\treverse(all(l));\n\t\tfor (int i = u.size() - 2; i >= 1; i--)\n\t\t{\n\t\t\tl.push_back(u[i]);\n\t\t}\n\n\t\treturn l;\n\t}\n};\n\nclass Segment {\npublic:\n\tPoint p1, p2;\n\tSegment() {}\n\tSegment(Point p1, Point p2) :p1(p1), p2(p2) {}\n\tPoint p1tp2() {\n\t\treturn p2 - p1;\n\t}\n\tPoint p2tp1() {\n\t\treturn p1 - p2;\n\t}\n\tdouble abs() {\n\t\treturn std::abs(norm());\n\t}\n\tdouble norm() {\n\t\treturn (p2 - p1).norm();\n\t}\n};\n\nbool Point::isOrthogonal(Segment s1, Segment s2) {\n\treturn EQ(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\nbool Point::isPalallel(Segment s1, Segment s2) {\n\treturn EQ(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\nbool Point::intersect(Segment s1, Segment s2) {\n\treturn intersect(s1.p1,s1.p2,s2.p1,s2.p2);\n}\nPoint Point::project(Segment s, Point p) {\n\tPoint base = s.p2 - s.p1;\n\tdouble r = Point::dot(p - s.p1, base) / base.norm();\n\treturn s.p1 + base * r;\n}\nPoint Point::reflect(Segment s, Point p) {\n\treturn (project(s, p) * 2) - p;\n}\ndouble Point::getDistanceLP(Segment s, Point p) {\n\treturn std::abs(cross(s.p2 - s.p1,p-s.p1) / (s.p2 - s.p1).abs());\n}\ndouble Point::getDistanceSP(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0) return (p - s.p1).abs();\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0) return (p - s.p2).abs();\n\treturn getDistanceLP(s,p);\n}\ndouble Point::getDistance(Segment s1, Segment s2) {\n\tif (intersect(s1, s2)) return 0.0;\n\treturn min({ getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)\n\t\t,getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2) });\n}\n\nPoint Point::getIntersection(Segment s1, Segment s2) {\n\t// (s1.p1 - s2.p1).norm()\n\tauto bs = s1.p2 - s1.p1;\n\tauto n1 = s2.p1 - s1.p1;\n\tauto n2 = s2.p2 - s1.p1;\n\tauto c1 = std::abs(cross(n1, bs)) / bs.norm();\n\tauto c2 = std::abs(cross(n2, bs)) / bs.norm();\n\treturn s2.p1 + (s2.p2 - s2.p1) *  (c1 / (c1 + c2));\n\t// c1:c2=t:1-t\n\t// c2t=(1-t)c1\n\t// t/(1-t)=c1/(c1+c2)\n\t// \n}\n\ndouble arg(Point p) { return atan2(p.y, p.x); }\nPoint polar(double a, double r) { return Point(cos(r) * a, sin(r) * a); }\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c=Point(),double r = 0.0) : c(c),r(r){}\n\tstatic pair<Point, Point> getCrossPoints(Circle c1, Circle c2) {\n\t\tdouble d = (c1.c - c2.c).abs(); // 中心点どうしの距離\n\t\tdouble a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n\t\tdouble t = arg(c2.c - c1.c);\n\t\treturn make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n\n\t}\n};\n\npair<Point, Point> Point::crossPoints(Circle c, Segment s) {\n\tauto pp = project(s, c.c);\n\tauto f = (pp - c.c).norm();\n\tauto mu = sqrt(c.r * c.r - f );\n\tauto e = s.p1tp2() / s.p1tp2().abs();\n\treturn make_pair(pp + e * mu, pp - e * mu);\n\n}\n\nll divRm(string s, ll x) {\n\n\tll r = 0;\n\tfor (size_t i = 0; i < s.size(); i++)\n\t{\n\t\tr *= 10;\n\t\tr += s[i] - '0';\n\t\tr %= x;\n\t}\n\treturn r;\n}\nll cmbi(ll x, ll b) {\n\n\tll res = 1;\n\tfor (size_t i = 0; i < b; i++)\n\t{\n\t\tres *= x - i;\n\t\tres %= INF;\n\t\tres *= inv[b - i];\n\t\tres %= INF;\n\t}\n\treturn res;\n}\n\ndouble digsum(ll x) {\n\tll res = 0;\n\twhile (x > 0)\n\t{\n\t\tres += x % 10;\n\t\tx /= 10;\n\t}\n\treturn res;\n}\n\nbool maching(char a, char b) {\n\treturn (a == b || a == '?' || b == '?');\n}\nint getArea(ll x, ll v) {\n\tfor (size_t i = 1; i <= 3; i++)\n\t{\n\t\tif (x < v * i) return i - 1;\n\t}\n}\n\nvoid solv() {\n\n\tcin >> n;\n\tcout << fixed << setprecision(10);\n\trep(i, n) {\n\t\tSegment s1, s2;\n\t\tcin >> s1.p1.x >> s1.p1.y >> s1.p2.x >> s1.p2.y;\n\t\tcin >> s2.p1.x >> s2.p1.y >> s2.p2.x >> s2.p2.y;\n\t\tcout << Point::getDistance(s1, s2) << endl;\n\t}\n\t\t\n\n}\nint main() {\n\t//COMinit();\n\tsolv();\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cmath>\n#include <algorithm>\nusing namespace std;\n\n#define equals(a, b) (fabs((a)-(b)) < EPS)\nconst double EPS = (1e-10);\n\nclass Point {\npublic:\n    double x, y;\n\n    Point(double x = 0, double y = 0): x(x), y(y) {}\n\n    Point operator + (Point p) {\n        return Point(x+p.x, y+p.y);\n    }\n    Point operator - (Point p) {\n        return Point(x-p.x, y-p.y);\n    }\n    Point operator * (double a) {\n        return Point(x*a, y*a);\n    }\n    Point operator / (double a) {\n        return Point(x/a, y/a);\n    }\n\n    double abs() {\n        return sqrt(norm());\n    }\n    double norm() {\n        return x*x + y*y;\n    }\n\n    bool operator < (const Point &p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point &p) const {\n        return fabs(x-p.x) < EPS && fabs(y-p.y) < EPS;\n    }\n};\n\ntypedef Point Vector;\n// 内積\ndouble dot(Vector a, Vector b) {\n    return a.x*b.x + a.y*b.y;\n}\n// 外積\ndouble cross(Vector a, Vector b) {\n    return a.x*b.y - a.y*b.x;\n}\n\nclass Segment {\npublic:\n    Point p1, p2;\n\n    Segment(Point p1, Point p2): p1(p1), p2(p2) {}\n};\ntypedef Segment Line;\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\nint ccw(Point p0, Point p1, Point p2) {\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n\n    if (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n    if (cross(a, b) < -EPS) return CLOCKWISE;\n    if (dot(a, b) < -EPS) return ONLINE_BACK;\n    if (a.norm() < b.norm()) return ONLINE_FRONT;\n\n    return ON_SEGMENT;\n}\n\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n    return (ccw(p1, p2, p3)*ccw(p1, p2, p4) <= 0 &&\n            ccw(p3, p4, p1)*ccw(p3, p4, p2) <= 0);\n}\nbool intersect(Segment s1, Segment s2) {\n    return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\ndouble getDistanceLP(Line l, Point p) {\n    return abs(cross(l.p2-l.p1, p-l.p1) / (l.p2-l.p1).abs());\n}\ndouble getDistanceSP(Segment s, Point p) {\n    if (dot(s.p2-s.p1, p-s.p1) < 0.0) return (p-s.p1).abs();\n    if (dot(s.p1-s.p2, p-s.p2) < 0.0) return (p-s.p2).abs();\n    return getDistanceLP(s, p);\n}\ndouble getDistance(Segment s1, Segment s2) {\n    if (intersect(s1, s2)) return 0.0;\n    return min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n               min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\n\n\nint main(void) {\n    int q; cin >> q;\n    double x0, y0, x1, y1, x2, y2, x3, y3;\n    for (int i = 0; i < q; i++) {\n        cin >> x0 >> y0 >> x1 >> y1\n            >> x2 >> y2 >> x3 >> y3;\n        Segment s1(Point(x0, y0), Point(x1, y1));\n        Segment s2(Point(x2, y2), Point(x3, y3));\n\n        printf(\"%.9f\\n\", getDistance(s1, s2));\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <cstdio>\n#include <iostream>\n#include <vector>\nusing namespace std;\n#define EPS 1e-10\n#define equals(a, b) (fabs(a - b) < EPS)\n\nclass Vector {\npublic:\n  double x, y;\n  Vector() {}\n  Vector(double x, double y) : x(x), y(y) {}\n\n  Vector operator+(Vector v) { return Vector(x + v.x, y + v.y); }\n  Vector operator-(Vector v) { return Vector(x - v.x, y - v.y); }\n  Vector operator*(double s) { return Vector(s * x, s * y); }\n  double norm() { return x * x + y * y; }\n  double abs() { return sqrt(norm()); }\n};\n\n// inner product\ndouble dot(Vector v1, Vector v2) { return v1.x * v2.x + v1.y * v2.y; }\n\n// cross product\ndouble cross(Vector v1, Vector v2) { return v1.x * v2.y - v1.y * v2.x; }\n\nclass Line {\npublic:\n  Vector v1, v2;\n  Line() {}\n  Line(Vector v1, Vector v2) : v1(v1), v2(v2) {}\n};\nclass Segment {\npublic:\n  Vector v1, v2;\n  Segment() {}\n  Segment(Vector v1, Vector v2) : v1(v1), v2(v2) {}\n  operator Line() const { return Line(v1, v2); }\n};\n\nbool is_parrallel(Vector a, Vector b) { return equals(cross(a, b), 0); }\nbool is_parrallel(Line a, Line b) {\n  return is_parrallel(a.v1 - a.v2, b.v1 - b.v2);\n}\nbool is_parrallel(Segment a, Segment b) {\n  return is_parrallel((Line)a, (Line)b);\n}\n\nbool is_orthogonal(Vector a, Vector b) { return equals(dot(a, b), 0); }\nbool is_orthogonal(Line a, Line b) {\n  return is_orthogonal(a.v1 - a.v2, b.v1 - b.v2);\n}\n\nVector project(Line l, Vector v) {\n  Vector a = v - l.v1;\n  Vector b = l.v2 - l.v1;\n  return l.v1 + b * (dot(a, b) / b.norm());\n}\n\nVector reflect(Line l, Vector v) { return v + (project(l, v) - v) * 2.0; }\n\ndouble distance(Line l, Vector v) { return (v - project(l, v)).abs(); }\ndouble distance(Vector v1, Vector v2) { return (v1 - v2).abs(); }\nbool in_segment(Segment s, Vector v) {\n  return dot(s.v2 - s.v1, v - s.v1) > 0 && dot(s.v1 - s.v2, v - s.v2) > 0;\n}\ndouble distance(Segment s, Vector v) {\n  auto m = project((Line)s, v);\n  if (in_segment(s, m)) {\n    return distance(m, v);\n  } else\n    return min(distance(s.v1, v), distance(s.v2, v));\n}\nbool opposite(Line l, Vector v1, Vector v2) {\n  auto a = l.v2 - l.v1;\n  auto b = v1 - l.v1;\n  auto c = v2 - l.v1;\n  return cross(a, b) * cross(a, c) < 0;\n}\nbool intersect(Segment s1, Segment s2) {\n  if (is_parrallel(s1, s2)) {\n    return equals(distance(s1, s2.v1), 0) || equals(distance(s1, s2.v2), 0);\n  } else {\n    return opposite((Line)s1, s2.v1, s2.v2) && opposite((Line)s2, s1.v1, s1.v2);\n  }\n}\n\ndouble distance(Segment s1, Segment s2) {\n  if (intersect(s1, s2)) {\n    return 0;\n  }\n  return min({distance(s1, s2.v1), distance(s1, s2.v2), distance(s2, s1.v1),\n              distance(s2, s1.v2)});\n}\n\nint main() {\n  int nq;\n  cin >> nq;\n  for (int i = 0; i < nq; i++) {\n    Segment seg[2];\n    for (int j = 0; j < 2; j++) {\n      int x0, y0, x1, y1;\n      cin >> x0 >> y0 >> x1 >> y1;\n      seg[j] = Segment(Vector(x0, y0), Vector(x1, y1));\n    }\n    printf(\"%.10f\\n\", distance(seg[0], seg[1]));\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<complex>\n#include<utility>\n#include<vector>\n#include<cmath>\n#include<cassert>\n\nusing namespace std;\n\ndouble eps=1e-9;\n\ntypedef complex<double> Point;\ntypedef complex<double> Vector;\n\ntemplate<class T> bool eq(T a,T b){\n\treturn abs(a-b)<eps;\n}\n\ntemplate<class T> int sgn(T r){\n\treturn eq(r,0.0)?0:(r>0?1:-1);\n}\n\nstruct Circle{\n\tPoint center;\n\tdouble r;\n\tCircle(Point c,double r):center(c),r(r){}\n\tCircle(){}\n};\n\nstruct Line{\n\tdouble a,b,c;//ax+by=c\n\tLine(){}\n\tLine(double a,double b,double c):a(a),b(b),c(c){}\n\tLine(Point p1,Point p2){//not verified\n\t\tif(eq(abs(p1-p2),0.0)){\n\t\t\tfprintf(stderr,\"called Line for same points\\n\");\n\t\t\tassert(0);\n\t\t}\n\t\tdouble x1=p1.real(),y1=p1.imag();\n\t\tdouble x2=p2.real(),y2=p2.imag();\n\t\ta=y2-y1;\n\t\tb=-(x2-x1);\n\t\tc=x1*y2-x2*y1;\n\t}\n};\n\nvoid print(Point p){\n\tif(isnan(p.real())||isnan(p.imag())){\n\t\tprintf(\"NaN Point\\n\");\n\t\treturn;\n\t}\n\tprintf(\"(%f,%f)\\n\",p.real(),p.imag());\n}\n\ndouble pointsDistance(Point p1,Point p2){/*abs(p1-p2)と書いてよい*/\n\tdouble dx=p1.real()-p2.real();\n\tdouble dy=p1.imag()-p2.imag();\n\treturn sqrt(dx*dx+dy*dy);\n}\n\ndouble linePointDistance(Line l,Point p){\n\tdouble a=l.a,b=l.b,c=l.c;\n\tdouble x=p.real(),y=p.imag();\n\tdouble num=abs(a*x+b*y-c);\n\tdouble den=sqrt(a*a+b*b);\n\treturn num/den;\n}\n\nVector basisVector(Vector v){\n\tif(eq(v.real(),0.0)&&eq(v.imag(),0.0)) return v;\n\treturn v/sqrt(norm(v));\n}\n\nPoint linePointProjection(Line l,Point p){\n\tdouble dx=l.a,dy=l.b;\n\tdouble a=l.a,b=l.b,c=l.c;\n\tdouble x=p.real(),y=p.imag();\n\tVector ba=basisVector(Vector(dx,dy));\n\tdouble num=a*x+b*y-c;\n\tdouble den=sqrt(a*a+b*b);\n\tVector v=ba*(-num/den);\n\treturn p+v;\n}\n\nvector<Point> circleLineIntersection(Circle c,Line l){\n\tvector<Point> res;\n\tPoint p=linePointProjection(l,c.center);\n\tdouble d=linePointDistance(l,c.center);\n\tint s=sgn(d-c.r);\n\tif(s==1){\n\t\treturn res;//empty\n\t}else if(s==0){\n\t\tres.push_back(p);\n\t\treturn res;\n\t}else{\n\t\tdouble r=c.r;\n\t\tdouble t=sqrt(r*r-d*d);\n\t\tVector e=basisVector(Vector(l.b,-l.a));\n\t\tres.push_back(p+t*e);\n\t\tres.push_back(p-t*e);\n\t\treturn res;\n\t}\n}\n\nvector<Point> circlesIntersection(Circle c1,Circle c2){/*一致するとき処理できない*/\n\tif(eq(c1.center.real(),c2.center.real())&&eq(c1.center.imag(),c2.center.imag())&&\n\t\teq(c1.r,c2.r)){\n\t\t\t\tPoint p=Point(NAN,NAN);\n\t\t\t\tvector<Point> v;\n\t\t\t\tv.push_back(p);\n\t\t\t\treturn v;\n\t}\n\tdouble d=pointsDistance(c1.center,c2.center);\n\tdouble r1=c1.r,r2=c2.r;\n\tdouble dif=max(r1,r2)-min(r1,r2);\n\tdouble sum=r1+r2;\n\tif(sgn(d-sum)==1||sgn(dif-d)==1){//d>sum||dif>d\n\t\tvector<Point> v;\n\t\treturn v;\n\t}\n\tdouble x1=c1.center.real(),y1=c1.center.imag();\n\tdouble x2=c2.center.real(),y2=c2.center.imag();\n\tLine l=Line(-x1*2+x2*2,-y1*2+y2*2,r1*r1-r2*r2-(x1*x1-x2*x2)-(y1*y1-y2*y2));\n\treturn circleLineIntersection(c1,l);\n}\n\ndouble det(double a,double b,double c,double d){\n\treturn a*d-b*c;\n}\n\nPoint linesIntersection(Line l1,Line l2){/*平行の時は常にNAN*/\n\tdouble a=l1.a,b=l1.b,c=l1.c;\n\tdouble d=l2.a,e=l2.b,f=l2.c;\n\tdouble den=det(a,b,d,e);\n\tdouble numx=det(c,b,f,e);\n\tdouble numy=det(a,c,d,f);\n\tif(eq(den,0.0)){\n\t\treturn Point(NAN,NAN);\n\t}\n\treturn Point(numx/den,numy/den);\n}\n\n//circlesIntersection verify AOJ1190 ICPC Domestic 2013 Balloon\n\ndouble crossProduct(Vector a,Vector b){\n\treturn (conj(a)*b).imag();\n}\n\ndouble dotProduct(Vector a,Vector b){\n\treturn (conj(a)*b).real();\n}\n\nint ccw(Point p1,Point p2,Point p3){\n\t/*p1,p2,p3はすべて異なると仮定\n\tそうでない場合の戻り値は不定\n\tではなく\n\tp1!=p2と仮定*/\n\tVector b=p2-p1;\n\tVector c=p3-p1;\n\tint s=sgn(crossProduct(b,c));\n\tif(s==1) return 1;//counterclockwise\n\tif(s==-1) return -1;//clockwise\n\tint t=sgn(dotProduct(b,c));\n\tif(t==-1) return 2;//3--1--2\n\tint u=sgn(norm(b)-norm(c));\n\tif(eq(norm(c),0.0)) return 0;//1==3\n\tif(u==-1) return -2;//1--2--3\n\treturn 0;//1--3--2 or 2==3\n}\n\nstruct Segment{\n\tPoint p1,p2;\n\tLine l;\n\tSegment(){}\n\tSegment(Point p1,Point p2):p1(p1),p2(p2){\n\t\tl=Line(p1,p2);\n\t}\n};\n\nint oneLineCCW(Point p1,Point p2,Point p3){\n\t/*p1!=p2かつp1,p2,p3は一直線上と仮定*/\n\t/*それ以外の時の戻り値は不定*/\n\tVector b=p2-p1,c=p3-p1;\n\tif(sgn(dotProduct(b,c))==-1) return 2;//p3--p1--p2\n\tif(eq(abs(p1-p3),0.0)) return 1;//p1==p3--p2\n\tint s=sgn(norm(b)-norm(c));\n\tif(s==1) return 0;//p1--p3--p2\n\tif(s==0) return -1;//p1--p3==p2\n\telse return -2;//p1--p2--p3\n}\n\ndouble pointSegmentDistance(Point p,Segment s){\n\tLine l=s.l;\n\tdouble d=linePointDistance(l,p);\n\tPoint pr=linePointProjection(l,p);\n//\tint x=oneLineCCW(s.p1,s.p2,pr);\n\tint x=ccw(s.p1,s.p2,pr);\n//\tif(x>=-1&&x<=1) return d;\n\tif(x==0) return d;\n\tdouble a=abs(s.p1-p);\n\tdouble b=abs(s.p2-p);\n\treturn min(a,b);\n}\n\nbool segmentsIntersect(Segment s1,Segment s2){\n\tPoint p[2],q[2];\n\tp[0]=s1.p1,p[1]=s1.p2;\n\tq[0]=s2.p1,q[1]=s2.p2;\n\treturn ccw(p[0],p[1],q[0])*ccw(p[0],p[1],q[1])<=0&&\n\t\tccw(q[0],q[1],p[0])*ccw(q[0],q[1],p[1])<=0;\n}\n\ndouble segmentsDistance(Segment s1,Segment s2){\n\tbool flg=segmentsIntersect(s1,s2);\n\tif(flg) return 0;\n\tPoint p[2],q[2];\n\tp[0]=s1.p1,p[1]=s1.p2;\n\tq[0]=s2.p1,q[1]=s2.p2;\n\tdouble res=-1;\n\tfor(int k=0;k<2;k++){\n\t\tPoint r=linePointProjection(s2.l,p[k]);\n\t//\tif(abs(oneLineCCW(q[0],q[1],r))<=1){\n\t\tif(ccw(q[0],q[1],r)==0){\n\t\t\tdouble tmp=abs(r-p[k]);\n\t\t\tif(res<0||tmp<res) res=tmp;\n\t\t}\n\t\tr=linePointProjection(s1.l,q[k]);\n\t//\tif(abs(oneLineCCW(p[0],p[1],r))<=1){\n\t\tif(ccw(p[0],p[1],r)==0){\n\t\t\tdouble tmp=abs(r-q[k]);\n\t\t\tif(res<0||tmp<res) res=tmp;\n\t\t}\n\t}\n\tfor(int i=0;i<2;i++) for(int j=0;j<2;j++){\n\t\tdouble tmp=abs(p[i]-q[j]);\n\t\tif(res<0||tmp<res) res=tmp;\n\t}\n\treturn res;\n}\n\nPoint inputPoint(){\n\tdouble x,y;\n\tscanf(\"%lf%lf\",&x,&y);\n\treturn Point(x,y);\n}\n\nint main(){\n\tint Q;\n\tscanf(\"%d\",&Q);\n\tfor(int datano=0;datano<Q;datano++){\n\t\tPoint p1,p2;\n\t\tPoint q1,q2;\n\t\tp1=inputPoint();\n\t\tp2=inputPoint();\n\t\tq1=inputPoint();\n\t\tq2=inputPoint();\n\t\tif(abs(p1-p2)<eps) break;\n\t\tSegment s1=Segment(p1,p2);\n\t\tSegment s2=Segment(q1,q2);\n\t\tdouble ans=segmentsDistance(s1,s2);\n\t\tprintf(\"%.9f\\n\",ans);\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define EPS 1e-10\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n#include <cstdio>\n#include <cmath>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\n// definition of turning\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nclass Point\n{\npublic:\n  double x, y;\n  Point (double x = 0, double y = 0) : x(x), y(y) {}\n  Point operator + (Point p) {return Point(x + p.x, y + p.y); }\n  Point operator - (Point p) {return Point(x - p.x, y - p.y); }\n  Point operator * (double a) {return Point(a * x, a * y); }\n  Point operator / (double a) {return Point(x / a, y / a); }\n\n  double norm() { return x * x + y * y; }\n  double abs() { return sqrt(norm()); }\n\n  bool operator < (const Point &p) const\n  {\n    return x != p.x ? x < p.x : y < p.y;\n  }\n\n  bool operator == (const Point &p) const\n  {\n    return equals(x, p.x) && equals(y, p.y);\n  }\n};\n\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\nstruct Segment\n{\n  Point p1, p2;\n  Segment() {}\n  Segment(Point p1, Point p2) : p1(p1), p2(p2) {}\n  Segment(double x1, double y1, double x2, double y2)\n  {\n    p1 = Point(x1, y1);\n    p2 = Point(x2, y2);\n  }\n};\n\ntypedef Segment Line;\n\nclass Circle\n{\npublic:\n  Point c;\n  double r;\n  Circle(Point c = Point(), double r = 0.0) : c(c), r(r) {}\n};\n\n\n// dot and cross product\ndouble dot(Vector a, Vector b)\n{\n  return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b)\n{\n  return a.x * b.y - a.y * b.x;\n}\n\n// orthogonality\nbool isOrthagonal(Vector a, Vector b)\n{\n  return equals(dot(a, b), 0.0);\n}\n\nbool isOrthagonal(Point a1, Point a2, Point b1, Point b2)\n{\n  return isOrthagonal(a1 - a2, b1 - b2);\n}\n\nbool isOrthagonal(Segment s1, Segment s2)\n{\n  return isOrthagonal(s1.p1 - s1.p2, s2.p1 - s2.p2);\n}\n\n// parallelism\nbool isParallel(Vector a, Vector b)\n{\n  return equals(cross(a, b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2)\n{\n  return isParallel(a1 - a2, b1 - b2);\n}\n\nbool isParallel(Segment s1, Segment s2)\n{\n  return isParallel(s1.p1 - s1.p2, s2.p1 - s2.p2);\n}\n\n// projection & reflection\nPoint project(Segment s, Point p)\n{\n  Vector base = s.p2 - s.p1;\n  double r = dot(p - s.p1, base) / base.norm();\n  return s.p1 + base * r;\n}\n\nPoint reflect(Segment s, Point p)\n{\n  return p + (project(s, p) - p) * 2.0;\n}\n\n// distance\ndouble getDistance(Point a, Point b)\n{\n  return (a - b).abs();\n}\n\ndouble getDistanceLP(Line l, Point p)\n{\n  return abs(cross(l.p1 - l.p2, p - l.p1)) / (l.p2 - l.p1).abs();\n}\n\ndouble getDistanceSP(Segment s, Point p)\n{\n  if (dot(p - s.p1, s.p2 - s.p1) < 0) return getDistance(p, s.p1);\n  if (dot(p - s.p2, s.p1 - s.p2) < 0) return getDistance(p, s.p2);\n  return getDistanceLP(s, p);\n}\n\nbool intersect(Point p1, Point p2, Point p3, Point p4);\nbool intersect(Segment s1, Segment s2);\ndouble getDistanceSS(Segment s1, Segment s2)\n{\n  if (intersect(s1, s2)) return 0.0;\n  return min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)), \\\n            min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\n//ccw\nint ccw(Point p0, Point p1, Point p2)\n{\n  Vector a = p1 - p0;\n  Vector b = p2 - p0;\n  if (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n  if (cross(a, b) < -EPS) return CLOCKWISE;\n  if (dot(a, b) < -EPS) return ONLINE_BACK;\n  if (a.norm() < b.norm()) return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\n\n// intersection\nbool intersect(Point p1, Point p2, Point p3, Point p4)\n{\n  return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 && \\\n          ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\n\nbool intersect(Segment s1, Segment s2)\n{\n  return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\nint main()\n{\n  int T;\n  scanf(\"%d\", &T);\n  Segment s1, s2;\n  while (T--)\n  {\n    scanf(\"%lf%lf%lf%lf%lf%lf%lf%lf\", \\\n      &s1.p1.x, &s1.p1.y, &s1.p2.x, &s1.p2.y, &s2.p1.x, &s2.p1.y, &s2.p2.x, &s2.p2.y);\n    printf(\"%.8lf\\n\", getDistanceSS(s1, s2));\n  }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <cmath>\n#include <algorithm>\nusing namespace std;\n\ndouble dis(double x1, double y1, double x2, double y2) {\n\treturn sqrt(pow(x1 - x2, 2) + pow(y1 - y2, 2));\n}\n\ndouble ldis(double x1, double y1, double x2, double y2, double x3, double y3) {\n\t\n\tif ((x1 - x2) * (x3 - x2) + (y1 - y2) * (y3 - y2) > 0 &&\n\t\t(x1 - x3) * (x2 - x3) + (y1 - y3) * (y2 - y3) > 0)\n\t\treturn abs((y3 - y1) * (x2 - x1) - (x3 - x1) * (y2 - y1)) / dis(x2, y2, x3, y3);\n\telse\n\t\treturn min(dis(x1, y1, x2, y2), dis(x1, y1, x3, y3));\n}\n\nint main()\n{\n\tint q = 0;\n\n\tcin >> q;\n\n\tfor (int i = 0; i < q; i++) {\n\t\tdouble p0x = 0, p0y = 0, p1x = 0, p1y = 0, p2x = 0, p2y = 0, p3x = 0, p3y = 0,\n\t\t\t   u = 0, s = 0, t = 0, d = 0;\n\n\t\tcin >> p0x >> p0y >> p1x >> p1y >> p2x >> p2y >> p3x >> p3y;\n\n\t\tu = (p3y - p0y) * (p2x - p0x) - (p3x - p0x) * (p2y - p0y);\n\t\td = min({ ldis(p0x, p0y, p2x, p2y, p3x, p3y), ldis(p1x, p1y, p2x, p2y, p3x, p3y),\n\t\t\tldis(p2x, p2y, p0x, p0y, p1x, p1y), ldis(p3x, p3y, p0x, p0y, p1x, p1y)});\n\n\t\tif (u != 0) {\n\t\t\ts = ((p3y - p0y) * (p1x - p0x) - (p3x - p0x) * (p1y - p0y)) / u;\n\t\t\tt = -((p2y - p0y) * (p1x - p0x) - (p2x - p0x) * (p1y - p0y)) / u;\n\n\t\t\tif (s >= 0 && t >= 0) {\n\t\t\t\tif (s + t >= 1)\n\t\t\t\t\td = 0;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif ((p1y - p0y) * (p2x - p0x) - (p1x - p0x) * (p2y - p0y) != 0) {\n\t\t\t\tif ((p2x - p0x) * (p3x - p0x) + (p2y - p0y) * (p3y - p0y) <= 0)\n\t\t\t\t\td = 0;\n\t\t\t}\n\t\t\telse if (((p2x - p0x) * (p3x - p0x) + (p2y - p0y) * (p3y - p0y) <= 0) | \n\t\t\t\t((p2x - p1x) * (p3x - p1x) + (p2y - p1y) * (p3y - p1y) <= 0))\n\t\t\t\td = 0;\n\t\t}\n\n\t\tcout << setiosflags(ios::showpoint|ios::fixed) << setprecision(10)\n\t\t\t << d << endl;\n\t}\n\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<cmath>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\n\nconst double ESP = 1e-8;\n\nclass Point\n{\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0) : x(x), y(y) {}\n\n\tPoint operator + (Point a) { return Point(x + a.x, y + a.y); }\n\tPoint operator - (Point a) { return Point(x - a.x, y - a.y); }\n\tPoint operator * (double a) { return Point(x * a,y * a); }\n\tPoint operator / (double a) { return Point(x / a, y / a); }\n\n\tdouble abs() { return sqrt(norm()); }\n\tdouble norm() { return x * x + y * y; }\n};\n\ntypedef Point Vector;\n\nstruct Segment\n{\n\tPoint p1, p2;\n};\n\ntypedef Segment Line;\n\ndouble dot(Vector a, Vector b)\n{\n\treturn a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b)\n{\n\treturn a.x * b.y - a.y * b.x;\n}\n\nint ccw(Point p0, Point p1, Point p2)\n{\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\n\tif (cross(a, b) > ESP) return 1;\n\tif (cross(a, b) < -ESP) return -1;\n\tif (dot(a, b) < -ESP) return 2;\n\tif (a.norm() < b.norm()) return -2;\n\treturn 0;\n}\n\nbool intersect(Segment a, Segment b)\n{\n\tPoint p1, p2, p3, p4;\n\tp1 = a.p1, p2 = a.p2;\n\tp3 = b.p1, p4 = b.p2;\n\n\treturn (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 && ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\n\ndouble Distance_LP(Line l, Point p)\n{\n\treturn fabs(cross(l.p2 - l.p1, p - l.p1) / (l.p2 - l.p1).abs());\n}\n\ndouble Distance_SP(Segment s, Point p)\n{\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0) return (p - s.p2).abs();\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0) return (p - s.p1).abs();\n\treturn Distance_LP(s, p);\n}\n\ndouble Distance_SS(Segment a, Segment b)\n{\n\tif (intersect(a, b)) return 0.0;\n\treturn min(min(Distance_SP(a, b.p2), Distance_SP(a, b.p1)), min(Distance_SP(b, a.p2), Distance_SP(b, a.p1)));\n}\n\nvoid read(Point& a)\n{\n\tscanf(\"%lf%lf\", &a.x, &a.y);\n}\n\nint main()\n{\n\tint q;\n\tscanf(\"%d\", &q);\n\n\twhile (q--)\n\t{\n\t\tPoint p[4];\n\t\tfor (int i = 0; i < 4; i++) read(p[i]);\n\n\t\tSegment s1, s2;\n\t\ts1.p1 = p[0], s1.p2 = p[1];\n\t\ts2.p1 = p[2], s2.p2 = p[3];\n\n\t\tprintf(\"%.10lf\\n\", Distance_SS(s1, s2));\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#ifndef ___Geometry_Library\n#define ___Geometry_Library\n\n// ------ Includes ------ //\n#include <cmath>\n#include <complex>\n#include <utility>\n#include <algorithm>\n\n// ------ Defines ------ //\ntypedef long double GType;\ntypedef std::complex<GType> Point;\ntypedef std::pair<Point, Point> Segment;\n\n// ------ Constants ------ //\nconst GType EPS = 1.0e-10L;\n\n// ------ Functions Level 1 ------ //\nGType dot(const Point& p1, const Point& p2) {\n\treturn (std::conj(p1) * p2).real();\n}\nGType cross(const Point& p1, const Point& p2) {\n\treturn (std::conj(p1) * p2).imag();\n}\nint ccw(const Point& p1, const Point& p2, const Point& p3) {\n\tPoint v1 = p2 - p1, v2 = p3 - p1;\n\tif (cross(v1, v2) > EPS) return +1;\n\tif (cross(v1, v2) < -EPS) return -1;\n\tif (dot(v1, v2) < -EPS) return +2;\n\tif (std::norm(v1) < std::norm(v2)) return -2;\n\treturn 0;\n}\n\n// ------ Functions Level 2 ------ //\nbool intersect(const Segment& s1, const Point& p1, bool segflag) {\n\tif (!segflag) return std::abs(cross(s1.second - p1, s1.first - p1)) < EPS;\n\treturn (std::abs(s1.first - p1) + std::abs(s1.second - p1) - std::abs(s1.second - s1.first)) < EPS;\n}\nbool intersect(const Segment& s1, const Segment& s2, bool segflag) {\n\tif (!segflag) return cross(s1.second - s1.first, s2.first - s1.first) * cross(s1.second - s1.first, s2.second - s1.first) < EPS;\n\treturn (ccw(s1.first, s1.second, s2.first) * ccw(s1.first, s1.second, s2.second)) <= 0 && (ccw(s2.first, s2.second, s1.first) * ccw(s2.first, s2.second, s1.second)) <= 0;\n}\nPoint projection(const Segment& s1, const Point& p1) {\n\tGType mul = dot(p1 - s1.first, s1.first - s1.second) / norm(s1.first - s1.second);\n\treturn s1.first + (s1.first - s1.second) * mul;\n}\nPoint reflection(const Segment& s1, const Point& p1) {\n\treturn p1 + (projection(s1, p1) - p1) * (GType)(2);\n}\nGType distance(const Point& p1, const Point& p2) {\n\treturn std::abs(p2 - p1);\n}\nGType distance(const Segment& s1, const Point& p1, bool segflag) {\n\tif (!segflag) return std::abs(p1 - projection(s1, p1));\n\tconst Point p2 = projection(s1, p1);\n\tif (intersect(s1, p2, true)) return std::abs(p2 - p1);\n\treturn std::min(std::abs(s1.first - p1), std::abs(s1.second - p1));\n}\nGType distance(const Segment& s1, const Segment& s2, bool segflag) {\n\tif (intersect(s1, s2, segflag)) return 0;\n\tif (!segflag) return std::min(distance(s1, s2.first), distance(s1, s2.second));\n\treturn std::min({ distance(s1, s2.first, false), distance(s1, s2.second, true), distance(s2, s1.first, true), distance(s2, s1.second, false) });\n}\n\n#endif\n\n#include <iomanip>\n#include <iostream>\nusing namespace std;\nint q, xa, ya, xb, yb; Segment s1, s2;\nint main() {\n\tcin >> q;\n\twhile (q--) {\n\t\tcin >> xa >> ya >> xb >> yb; s1 = make_pair(Point(xa, ya), Point(xb, yb));\n\t\tcin >> xa >> ya >> xb >> yb; s2 = make_pair(Point(xa, ya), Point(xb, yb));\n\t\tcout << fixed << setprecision(15) << distance(s1, s2, true) << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "//By Vlgd\n#include<bits/stdc++.h>\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\nusing namespace std;\nclass Point{\n\tpublic:\n\tdouble x,y;\n\tPoint(double x=0,double y=0):x(x),y(y){}\n\tPoint operator + (Point p){return Point(x+p.x,y+p.y);}\n\tPoint operator - (Point p){return Point(x-p.x,y-p.y);}\n\tPoint operator * (double a){return Point(a*x,a*y);}\n\tPoint operator / (double a){return Point(x/a,y/a);}\n\tdouble abs() {return sqrt(norm());}\n\tdouble norm() {return x*x+y*y;}\n\tbool operator < (const Point &p) const{\n\t\treturn x!=p.x?x<p.x:y<p.y;\n\t}\n\tbool operator == (const Point &p) const{\n\t\treturn fabs(x-p.x)<EPS && fabs(y-p.y)<EPS;\n\t}\n};\ntypedef Point Vector;\nstruct Segment{Point p1,p2;};\ntypedef Segment Line;\ndouble dot(Vector a,Vector b){\n\treturn a.x*b.x+a.y*b.y;\n}\ndouble cross(Vector a,Vector b){\n\treturn a.x*b.y-a.y*b.x;\n}\nint ccw(Point p0,Point p1,Point p2){\n\tVector a=p1-p0,b=p2-p0;\n\tif(cross(a,b)>EPS) return 1;\n\tif(cross(a,b)<-EPS) return -1;\n\tif(dot(a,b)<-EPS) return 2;\n\tif(a.abs()<b.abs()) return -2;\n\tif(a.abs()>=b.abs()) return 0;\n}\nbool intersect(Segment s1,Segment s2){\n\tPoint p1=s1.p1,p2=s1.p2;\n\tPoint p3=s2.p1,p4=s2.p2;\n\treturn (ccw(p1,p2,p3)*ccw(p1,p2,p4)<=0 && ccw(p3,p4,p1)*ccw(p3,p4,p2)<=0 );\n}\ndouble disPtP(Point a,Point b){\n\treturn (b-a).abs();\n}\ndouble disLtP(Line l,Point p){\n\treturn fabs(cross(l.p2-l.p1,p-l.p1)/(l.p2-l.p1).abs());\n}\ndouble disStP(Segment s,Point p){\n\tif(dot(p-s.p1,s.p2-s.p1)<0.0) return (p-s.p1).abs();\n\tif(dot(p-s.p2,s.p1-s.p2)<0.0) return (p-s.p2).abs();\n\treturn disLtP(s,p); \n}\ndouble disStS(Segment s1,Segment s2){\n\tif(intersect(s1,s2)) return 0.0;\n\treturn min(min(disStP(s1,s2.p1),disStP(s1,s2.p2)),min(disStP(s2,s1.p1),disStP(s2,s1.p2)));\n}\nmain(){\n\tint q;\n\tscanf(\"%d\",&q);\n\tfor(int i=0;i<q;i++){\n\t\tint x1,y1,x2,y2;\n\t\tscanf(\"%d%d%d%d\",&x1,&y1,&x2,&y2);\n\t\tPoint p1(x1,y1),p2(x2,y2);\n\t\tSegment s1;\n\t\ts1.p1=p1;s1.p2=p2;\n\t\tscanf(\"%d%d%d%d\",&x1,&y1,&x2,&y2);\n\t\tPoint p3(x1,y1),p4(x2,y2);\n\t\tSegment s2;\n\t\ts2.p1=p3;s2.p2=p4;\n\t\tprintf(\"%.10lf\\n\",disStS(s1,s2));\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define ll long long\n#define rep(i,n) for(ll i=0;i<n;i++)\nusing namespace std;\nconst double pi = acos(-1);\nconst double eps = 1e-10;\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\n\ntemplate<class T>\nbool equals(T a,T b){ return fabs((a)-(b)) < eps; }\n\nstruct Point{\n    double x, y;\n    Point(){}\n    Point(double x, double y) : x(x), y(y){}\n    Point operator + (Point p) { return Point(x+p.x, y+p.y); }\n    Point operator - (Point p) { return Point(x-p.x, y-p.y); }\n    Point operator * (double a) { return Point(x*a, y*a); }\n    Point operator / (double a) { return Point(x/a, y/a); }\n    double norm() {return x*x+y*y;}\n    double abs() {return sqrt(norm());}\n\n    bool operator < (const Point &p) const {\n        return x!=p.x ? x<p.x : y<p.y;\n    }\n    bool operator == (const Point &p) const {\n        return fabs(x-p.x) < eps && fabs(y-p.y) < eps;\n    }\n};\n\nbool sort_x(Point a, Point b){ return !equals(a.x,b.x)?a.x<b.x:a.y<b.y; }\nbool sort_y(Point a, Point b){ return !equals(a.y,b.y)?a.y<b.y:a.x<b.x; }\n\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\ndouble norm(Vector a) { return a.x*a.x+a.y*a.y; }\ndouble abs(Vector a) { return sqrt(norm(a)); }\ndouble dot(Vector a, Vector b) { return a.x*b.x+a.y*b.y; }\ndouble cross(Vector a, Vector b) { return a.x*b.y-a.y*b.x; }\n\nstruct Segment {\n    Point p1, p2;\n    Segment(){}\n    Segment(Point p1, Point p2):p1(p1),p2(p2){}\n};\ntypedef Segment Line;\n\nstruct Circle{\n    Point c;\n    double r;\n    Circle(){}\n    Circle(Point c, double r) : c(c),r(r) {}\n};\n\nint ccw(Point p0, Point p1, Point p2){\n    Vector a=p1-p0;\n    Vector b=p2-p0;\n    if(cross(a,b)>eps) return COUNTER_CLOCKWISE;\n    if(cross(a,b)< -eps) return CLOCKWISE;\n    if(dot(a,b)< -eps) return ONLINE_BACK;\n    if(a.norm() < b.norm()) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\nbool intersect(Point p1, Point p2, Point  p3, Point p4){\n    return (ccw(p1,p2,p3)*ccw(p1,p2,p4)<=0&&ccw(p3,p4,p1)*ccw(p3,p4,p2)<=0);\n}\nbool intersect(Segment s1, Segment s2){\n    return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\nbool isOrthogonal(Vector a, Vector b){\n    return equals(dot(a,b), 0.0);\n}\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2){\n    return isOrthogonal(a1-a2, b1-b2);\n}\nbool isOrthogonal(Segment s1, Segment s2){\n    return equals(dot(s1.p2-s1.p1, s2.p2-s2.p1),0.0);\n}\n\nbool isParallel(Vector a, Vector b){\n    return equals(cross(a,b), 0.0);\n}\nbool isParallel(Point a1, Point a2, Point b1, Point b2){\n    return isParallel(a1-a2, b1-b2);\n}\nbool isParallel(Segment s1, Segment s2){\n    return equals(cross(s1.p2-s1.p1, s2.p2-s2.p1),0.0);\n}\n\nPoint project(Segment s, Point p){\n    Vector base=s.p2-s.p1;\n    double r=dot(p-s.p1,base)/norm(base);\n    return s.p1+base*r;\n}\nPoint reflect(Segment s,Point p){\n    return p+(project(s,p)-p)*2.0;\n}\n\ndouble getDistance(Point a, Point b){\n    return abs(a-b);\n}\ndouble getDistanceLP(Line l, Point p){\n    return abs(cross(l.p2-l.p1, p-l.p1))/abs(l.p2-l.p1);\n}\ndouble getDistanceSP(Segment s, Point p){\n    if(dot(s.p2-s.p1,p-s.p1) < 0.0) return abs(p-s.p1);\n    if(dot(s.p1-s.p2,p-s.p2) < 0.0) return abs(p-s.p2);\n    return getDistanceLP(s,p);\n}\ndouble getDistanceSS(Segment s1, Segment s2){\n    if(intersect(s1,s2)) return 0.0;\n    return min( min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),\n                min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n}\nint main(){\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    cout << fixed << setprecision(15);\n    ll q;cin>>q;\n    rep(Q,q){\n        double x0,y0,x1,y1,x2,y2,x3,y3;\n        cin>>x0>>y0>>x1>>y1>>x2>>y2>>x3>>y3;\n        Point p0(x0,y0),p1(x1,y1),p2(x2,y2),p3(x3,y3);\n        Segment s1(p0,p1),s2(p2,p3);\n        cout<<getDistanceSS(s1,s2)<<endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define FOR(i,a,b) for(int i=(a);i<(b);++i)\n#define rep(i,n)   FOR(i,0,n)\n#define pb emplace_back\n#define mp make_pair\ntypedef long long ll;\ntypedef pair<int,int> pint;\n\n#define eps (1e-10)\nstruct Point{\n    double x,y;\n    Point(){}\n    Point(double x,double y):x(x),y(y){}\n    Point operator+(Point p) {return Point(x+p.x,y+p.y);}\n    Point operator-(Point p) {return Point(x-p.x,y-p.y);}\n    Point operator*(double k){return Point(x*k,y*k);}\n    double norm(){return x*x+y*y;}\n    double abs(){return sqrt(norm());}\n    bool operator == (const Point &p) const{\n    return fabs(x-p.x)<eps && fabs(y-p.y)<eps;\n  }\n  double dot(Point p){return x*p.x+y*p.y;}\n  double det(Point p){return x*p.y-y*p.x;}\n};\nstruct Line{\n  Point p1,p2;\n  Line(){}\n  Line(Point p1, Point p2):p1(p1),p2(p2){}\n};\nint ccw(Point a,Point b,Point c){\n  Point t1=b-a,t2=c-a;\n  if(t1.det(t2)> eps) return 1;//counter clockwise\n  if(t1.det(t2)< -eps) return -1;//clockwise\n  if(t1.dot(t2)< -eps) return 2;//c-a-b online\n  if(t1.norm()<t2.norm()) return -2;//a-b-c online\n  return 0;//a-c-b online\n}\nbool intersectSS(Point a,Point b,Point c,Point d){\n  return (ccw(a,b,c)*ccw(a,b,d)<=0&&ccw(c,d,a)*ccw(c,d,b)<=0);\n}\nbool intersectSS(Line l1,Line l2){\n  return intersectSS(l1.p1,l1.p2,l2.p1,l2.p2);\n}\nbool isOrthogonal(Point a,Point b){\n  return fabs(a.dot(b))<eps;\n}\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n  return isOrthogonal(a1-a2,b1-b2);\n}\nbool isParallel(Point a,Point b){\n  return fabs(a.det(b))<eps;\n}\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n  return isParallel(a1-a2,b1-b2);\n}\nPoint CrossPoint(Line l1,Line l2){\n    double a=(l1.p2-l1.p1).det(l2.p2-l2.p1);\n    double b=(l1.p2-l1.p1).det(l1.p2-l2.p1);\n    if(fabs(a)<eps&&fabs(b)<eps) return l2.p1;\n    return l2.p1+(l2.p2-l2.p1)*(b/a);\n}\nPoint project(Line l,Point p){\n  Point base=l.p2-l.p1;\n  double r=(p-l.p1).dot(base)/base.norm();\n  return l.p1+base*r;\n}\nPoint reflect(Line l,Point p){\n  return p+(project(l,p)-p)*2.0;\n}\nint main(){\n    int q;\n    double xp0,yp0,xp1,yp1,xp2,yp2,xp3,yp3;\n    cin>>q;\n    while(q--){\n        cout<<fixed<<setprecision(10);\n        cin>>xp0>>yp0>>xp1>>yp1>>xp2>>yp2>>xp3>>yp3;\n        Point p0(xp0,yp0),p1(xp1,yp1),p2(xp2,yp2),p3(xp3,yp3);\n        if(intersectSS(p0,p1,p2,p3)) cout<<0.0<<endl;\n        else cout<<min(min((p0-p2).abs(),(p1-p3).abs()),min((p0-p3).abs(),(p1-p2).abs()))<<endl;\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define REP(i,a,b) for(int i=a;i<b;i++)\n#define rep(i,n) REP(i,0,n)\n\ntypedef complex<double> P;\nstruct Line : public vector<P>\n{\n  Line(P a=P(), P b=P()) {\n    push_back(a); push_back(b);\n  }\n};\ntypedef Line Segment;\n\n#define EPS (1e-7)\n\nbool operator < (P const& a, P const& b) {\n  return (a.real() != a.real()) ? a.real() < b.real() : a.imag() < b.imag();\n}\n\ndouble dot(P const& a, P const& b) {\n  return real(conj(a)*b);\n}\n\ndouble cross(P const& a, P const& b) {\n  return imag(conj(a)*b);\n}\n\nP projection_point(P const& a, P const& b, P const& c) {\n  double k = dot(b-a, c-a) / norm(b-a);\n  return a+k*(b-a);\n}\n\nP reflection_point(P const& a, P const& b, P const& c) {\n  return c + 2.*(projection_point(a, b, c) - c);\n}\n\nbool is_parallel(Segment const& s, Segment const& t) {\n  return abs(cross(s[1]-s[0], t[1]-t[0])) < EPS;\n}\n\nbool is_orthogonal(Segment const& s, Segment const& t) {\n  return abs(dot(s[1]-s[0], t[1]-t[0])) < EPS;\n}\n\nint ccw(P a, P b, P c) {\n  b -= a, c -= a;\n  if(cross(b, c) > 0) return +1; // counter clockwise\n  if(cross(b, c) < 0) return -1;  // clockwise\n  if(dot(b, c) < 0) return +2;    // c-a-b\n  if(norm(b) < norm(c)) return -2;  // a-b-c\n  return 0; // on segment\n}\n\nbool is_intersect_ss(Segment const& s, Segment const& t) {\n  return ccw(s[0], s[1], t[0]) * ccw(s[0], s[1], t[1]) <= 0\n         && ccw(t[0], t[1], s[0]) * ccw(t[0], t[1], s[1]) <= 0;\n}\n\nP crosspoint_ss(Segment const& s, Segment const& t) {\n  P bline = t[1]-t[0];\n  double d1 = abs(cross(bline, s[0]-t[0])), d2 = abs(cross(bline, s[1]-t[0]));\n  return s[0] + d1/(d1+d2) * (s[1]-s[0]);\n}\n\nbool is_point_onsegment(Segment const& s, P const& p) {\n  return abs(s[0]-p)+abs(s[1]-p)-abs(s[1]-s[0]) < EPS;\n}\n\ndouble distance_sp(Segment const& s, P const& p) {\n  P q = projection_point(s[0], s[1], p);\n  if(is_point_onsegment(s, p)) return abs(p-q);\n  return min(abs(s[0]-p), abs(s[1]-p));\n}\n\ndouble distance_ss(Segment const& s, Segment const& t) {\n  if(is_intersect_ss(s, t)) return 0.; // 交差は距離 0\n  return min(min(distance_sp(t, s[0]), distance_sp(t, s[1])),\n             min(distance_sp(s, t[0]), distance_sp(s, t[1])));\n}\n\nint main () {\n  \n  int q; cin >> q;\n  for(;q--;) {\n    Segment s, t;\n    cin >> s[0].real() >> s[0].imag();\n    cin >> s[1].real() >> s[1].imag();\n    cin >> t[0].real() >> t[0].imag();\n    cin >> t[1].real() >> t[1].imag();\n    \n    printf(\"%.10f\\n\", distance_ss(s, t));\n  }\n  \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <iomanip>\n\nusing namespace std;\n\n#define NO_INTERSECT POS(-12345, -12345)\n#define PARALLEL POS(-10001, -10001)\n#define COLINE POS(12345, 12345)\ntypedef long double T;\n\nconst T EPS = 1e-10;\n\nclass POS {\npublic:\n    T x, y;\n    POS(const T& x = 0, const T& y = 0) : x(x), y(y) {}\n    POS(const POS& x) : x(x.x), y(x.y) {}\n\n    bool operator==(const POS& rhs) const {\n        return x == rhs.x && y == rhs.y;\n    }\n\n    POS& operator+=(const POS& rhs) {\n        x += rhs.x;\n        y += rhs.y;\n        return *this;\n    }\n\n    POS operator -() {\n        POS tmp(-x, -y);\n        return tmp;\n    }\n\n    double dist(const POS& rhs) const {\n        T tmp_x = x-rhs.x, tmp_y = y-rhs.y;\n        return sqrt(tmp_x*tmp_x+tmp_y*tmp_y);\n    }\n};\n\nPOS const operator-(const POS& lhs, const POS& rhs) {\n    POS tmp = rhs;\n    tmp = -tmp;\n    return POS(lhs) += (tmp);\n}\n\nclass LINE {\npublic:\n    POS start, end, vec;\n    double angle;\n    LINE() {}\n    LINE(const POS& start, const POS& end) :\n        start(start), end(end), vec(end - start),\n        angle(atan2(vec.x, vec.y)) {}\n    LINE(const POS& end) :\n        start(0, 0), end(end), vec(end), angle(atan2(vec.x, vec.y)) {}\n\n    bool operator/(const LINE& rhs) const {\n        return (vec.x*rhs.vec.y == vec.y*rhs.vec.x);\n    }\n\n    POS intersect(const LINE& rhs) const {\n        if(*this==rhs) return COLINE;\n        if(*this/rhs) return PARALLEL;\n        double A1 = vec.y, B1 = -vec.x, C1 = end.x*start.y - start.x*end.y;\n        double A2 = rhs.vec.y, B2 = -rhs.vec.x, C2 = rhs.end.x*rhs.start.y - rhs.start.x*rhs.end.y;\n        return POS( (B2*C1-B1*C2)/(A2*B1-A1*B2), (A1*C2-A2*C1)/(A2*B1-A1*B2));\n    }\n\n    bool operator==(const LINE& rhs) const {\n        return (*this/rhs) && (rhs.on_line(start));\n    }\n\n    bool on_line(const POS& a) const {\n        if(vec.x == 0) {\n            if(start.x != a.x) return false;\n            return true;\n        }\n        if(vec.y == 0) {\n            if(start.y != a.y) return false;\n            return true;\n        }\n        return fabs(((a.x-start.x)/vec.x*vec.y + start.y)-a.y) < EPS;\n    }\n};\n\nclass LINESEG : public LINE {\npublic:\n    LINESEG() : LINE(POS(0, 0)) {}\n    LINESEG(const LINE& input) : LINE(input) {}\n    LINESEG(const POS& start, const POS& end) : LINE(start, end) {}\n\n    bool on_lineseg(const POS& a) const {\n        if(!on_line(a)) return false;\n        bool first, second;\n        if(vec.x >= 0) first = (a.x >= start.x)&&(a.x <= end.x);\n        else first = (a.x <= start.x)&&(a.x >= end.x);\n        if(vec.y >= 0) second = (a.y >= start.y)&&(a.y <= end.y);\n        else second = (a.y <= start.y)&&(a.y >= end.y);\n        return first&&second;\n    }\n\n    T cross(const LINESEG& rhs) const {\n        return vec.x*rhs.vec.y - vec.y*rhs.vec.x;\n    }\n\n    POS intersect(const LINESEG& rhs) const {\n        LINE a1b1(start, rhs.start);\n        LINE a1b2(start, rhs.end);\n        LINE b1a1(rhs.start, start);\n        LINE b1a2(rhs.start, end);\n\n        POS tmp(this->LINE::intersect(rhs));\n\n        if(tmp == COLINE) {\n            if((start==rhs.start) && (!rhs.on_lineseg(end)) && (!on_lineseg(rhs.end))) return start;\n            if((start==rhs.end) && (!rhs.on_lineseg(end)) && (!on_lineseg(rhs.start))) return start;\n            if((end==rhs.end) && (!rhs.on_lineseg(start)) && (!on_lineseg(rhs.end))) return end;\n            if((end==rhs.end) && (!rhs.on_lineseg(start)) && (!on_lineseg(rhs.start))) return end;\n            if(on_lineseg(rhs.start) || on_lineseg(rhs.end) || rhs.on_lineseg(start) || rhs.on_lineseg(end)) return COLINE;\n            return NO_INTERSECT;\n        }\n\n        bool intersected = ((cross(a1b1) * cross(a1b2) < 0) && (rhs.cross(b1a1)*(rhs.cross(b1a2)) < 0));\n        if(!intersected) return NO_INTERSECT;\n        if(!on_lineseg(tmp) || !rhs.on_lineseg(tmp)) return NO_INTERSECT;\n        return tmp;\n    }\n};\n\nint main()\n{\n    int q;\n    cin >> q;\n    cout << fixed << setprecision(10);\n    while(q--){\n        int xp0, yp0, xp1, yp1, xp2, yp2, xp3, yp3;\n        cin >> xp0 >> yp0 >> xp1 >> yp1 >> xp2 >> yp2 >> xp3 >> yp3;\n        POS p0(xp0, yp0), p1(xp1, yp1), p2(xp2, yp2), p3(xp3, yp3);\n        LINESEG l0(p0, p1), l1(p2, p3);\n        if(!(l0.intersect(l1) == NO_INTERSECT)){\n            cout << 0.0000000000 << endl;\n        } else {\n            T ans = 1e14;\n            ans = min(ans, p0.dist(p2));\n            ans = min(ans, p0.dist(p3));\n            ans = min(ans, p1.dist(p2));\n            ans = min(ans, p1.dist(p3));\n            cout << ans << endl;\n        }\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <cmath>\nusing namespace std;\n\nstruct Point\n{\n    double x,y;\n    Point(){}\n    Point(double _x,double _y):x(_x),y(_y){}\n    Point operator -(Point p){return Point(x-p.x,y-p.y);}\n\n    double norm(){return x*x+y*y;}\n    double abs(){return sqrt(norm());}\n\n\n};\ndouble dot(Point a,Point b)\n{\n    return a.x*b.x+a.y*b.y;\n}\ndouble cross(Point a,Point b)\n{\n    return a.x*b.y-a.y*b.x;\n}\ndouble dist(Point a,Point b)\n{\n    return sqrt((a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y));\n}\nint n;\nPoint p1,p2,p3,p4;\nbool is_intersect(Point p1,Point p2,Point p3,Point p4)\n{\n    Point a=p2-p1;\n    Point b=p4-p3;\n    return cross(p1,b)*cross(p2,b)<=0&&cross(p3,a)*cross(p4,a)<=0;\n}\ndouble dist_pl(Point p,Point lp1,Point lp2)\n{\n    Point a=p-lp1;\n    Point b=lp2-lp1;\n    if(dot(p-lp1,lp2-lp1)<0) return dist(p,lp1);\n    if(dot(p-lp2,lp1-lp2)<0) return dist(p,lp2);\n    return fabs(cross(a,b)/b.abs());\n}\ndouble dist_ll(Point p1,Point p2,Point p3,Point p4)\n{\n    if(is_intersect(p1,p2,p3,p4))\n    {\n        return 0;\n\n    }\n    return min(min(dist_pl(p1,p3,p4),dist_pl(p2,p3,p4)),min(dist_pl(p3,p1,p2),dist_pl(p4,p1,p2)));\n\n}\nint main()\n{\n//    freopen(\"in.txt\",\"r\",stdin);\n    scanf(\"%d\",&n);\n    while(n--)\n    {\n        scanf(\"%lf%lf%lf%lf%lf%lf%lf%lf\",&p1.x,&p1.y,&p2.x,&p2.y,&p3.x,&p3.y,&p4.x,&p4.y);\n        printf(\"%.10lf\\n\",dist_ll(p1,p2,p3,p4));\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#include <complex>\n#define rep(i, n) for (int i = 0; i < (n); i++)\n#define loop(i, x, n) for (int i = (x); i < (n); i++)\n#define all(v) (v).begin(), (v).end()\n#define EQ(a, b) (abs((a) - (b)) < EPS)\n#define int long long\n#define INF 1e9\n#define MOD 1e9 + 7\nusing namespace std;\n\ntemplate<typename T> void cmin(T &a, T b) { a = min(a, b); }\ntemplate<typename T> void cmax(T &a, T b) { a = max(a, b); }\n\nusing P = complex<double>;\nconst double PI = acos(-1);\nconst double EPS = 1e-9;\n// P p(a,b)=a+bi -> 点p(a,b)\nnamespace std {\n  bool operator<(const P &a, const P &b) { return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b); }\n  bool operator==(const P &a, const P &b) { return a.real() == b.real() && a.imag() == b.imag(); }\n} // namespace std\n\nstruct L : public vector<P> {\n  L(const P &a, const P &b) {\n    push_back(a);\n    push_back(b);\n  }\n};\n//内積\ndouble dot(P a, P b) { return real(conj(a) * b); }\n//外戚\ndouble cross(P a, P b) { return imag(conj(a) * b); }\n\n//点pから直線aに推薦を下ろした足\nP projection(L a, P p) {\n  double t = dot(p - a[0], a[0] - a[1]) / norm(a[0] - a[1]);\n  return a[0] + t * (a[0] - a[1]);\n}\n\n//点の位置関係\nint ccw(P a, P b, P c) {\n  b -= a;\n  c -= a;\n  if (cross(b, c) > 0) return +1; // counter clockwise\n  if (cross(b, c) < 0) return -1; // clockwise\n  if (dot(b, c) < 0) return +2; // c--a--b on line\n  if (norm(b) < norm(c)) return -2; // a--b--c on line\n  return 0;\n}\n\nbool intersectSS(const L &s, const L &t) { return ccw(s[0], s[1], t[0]) * ccw(s[0], s[1], t[1]) <= 0 && ccw(t[0], t[1], s[0]) * ccw(t[0], t[1], s[1]) <= 0; }\nbool intersectSP(const L &s, const P &p) { // triangle inequality\n  return abs(s[0] - p) + abs(s[1] - p) - abs(s[1] - s[0]) < EPS;\n}\ndouble distanceSP(const L &s, const P &p) {\n  const P r = projection(s, p);\n  if (intersectSP(s, r)) return abs(r - p);\n  return min(abs(s[0] - p), abs(s[1] - p));\n}\n\ndouble distanceSS(const L &s, const L &t) {\n  if (intersectSS(s, t)) return 0;\n  return min(min(distanceSP(s, t[0]), distanceSP(s, t[1])), min(distanceSP(t, s[0]), distanceSP(t, s[1])));\n}\nsigned main() {\n  int q;\n  cin >> q;\n  while (q--) {\n    int a, b, c, d, e, f, g, h;\n    cin >> a >> b >> c >> d >> e >> f >> g >> h;\n    L l(P(a, b), P(c, d)), m(P(e, f), P(g, h));\n    double ans = distanceSS(l, m);\n    printf(\"%.10lf\\n\", ans);\n  }\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <math.h>\nusing namespace std;\n\nconst double eps = 1e-15;\n\nbool IsEq(double d1, double d2)\n{\n    if (d1 - d2 > -eps && d1 - d2 < eps){\n        return true;\n    } else {\n        return false;\n    }\n}\n\nclass Point2D {\npublic:\n    double x, y;\n    Point2D() : x(0), y(0) {}\n    Point2D(double _x, double _y) : x(_x), y(_y) {}\n    virtual ~Point2D() {}\n};\n\nistream& operator >> (istream& input, Point2D& P)\n{\n    input >> P.x >> P.y;\n    return input;\n}\n\nclass Segment {\npublic:\n    Point2D P, Q;\n    Segment() {}\n    Segment(const Point2D& _P, const Point2D& _Q) : P(_P), Q(_Q) {}\n};\n\nistream& operator >> (istream& input, Segment& Seg)\n{\n    input >> Seg.P >> Seg.Q;\n    return input;\n}\n\nclass Vector2D : public Point2D {\npublic:\n    Vector2D(double _x, double _y) : Point2D(_x, _y) {}\n    Vector2D(const Point2D& P) : Point2D(P) {}\n    Vector2D(const Segment& Seg) : Point2D(Seg.Q.x - Seg.P.x, Seg.Q.y - Seg.P.y) {}\n    Vector2D(const Point2D& Start, const Point2D& End) : Point2D(End.x - Start.x, End.y - Start.y) {}\n    double InnerProd(const Vector2D Vec) const\n    {\n        return x * Vec.x + y * Vec.y;\n    }\n    double OuterProd(const Vector2D Vec) const\n    {\n        return x * Vec.y - y * Vec.x;\n    }\n    double Length() const\n    {\n        return sqrt((*this).InnerProd(*this));\n    }\n};\n\nVector2D operator * (double d, const Vector2D& V)\n{\n    return Vector2D(d * V.x, d * V.y);\n}\n\nVector2D operator + (const Vector2D& V1, const Vector2D& V2)\n{\n    return Vector2D(V1.x + V2.x, V1.y + V2.y);\n}\n\nostream& operator << (ostream& out, const Vector2D& V)\n{\n    out << V.x << \" \" << V.y;\n    return out;\n}\n\ndouble Dist(const Point2D& P, const Point2D& Q)\n{\n    Vector2D V(P, Q);\n    return V.Length();\n}\n\nbool IsPara(const Segment& Seg1, const Segment& Seg2)\n{\n    Vector2D V1(Seg1), V2(Seg2);\n    return IsEq(V1.OuterProd(V2), 0.);\n}\n\nbool IsOnSeg(const Point2D& P, const Segment& Seg)\n{\n    Vector2D V(Seg);\n    return IsEq(V.Length(), Dist(P, Seg.P) + Dist(P, Seg.Q));\n}\n\nbool IsIntersect(const Segment& Seg1, const Segment& Seg2) {\n    Vector2D P1(Seg1.P), P2(Seg2.P);\n    Vector2D V1(Seg1), V2(Seg2);\n    if (!IsPara(Seg1, Seg2)) {\n        double t = (P2.OuterProd(V2) - P1.OuterProd(V2)) / V1.OuterProd(V2);\n        double s = (P2.OuterProd(V1) - P1.OuterProd(V1)) / V1.OuterProd(V2);\n        return t > -eps && t < 1 + eps && s > -eps && s < 1 + eps;\n    } else {\n        if (IsOnSeg(Seg1.P, Seg2) || IsOnSeg(Seg1.Q, Seg2) || IsOnSeg(Seg2.P, Seg1) || IsOnSeg(Seg2.Q, Seg1)) return true;\n        return false;\n    }\n}\n\nVector2D CrossPoint(const Segment& Seg1, const Segment& Seg2) {\n    Vector2D P1(Seg1.P), P2(Seg2.P);\n    Vector2D V1(Seg1), V2(Seg2);\n    if (!IsPara(Seg1, Seg2)) {\n        double t = (P2.OuterProd(V2) - P1.OuterProd(V2)) / V1.OuterProd(V2);\n        return P1 + t * V1;\n    } else {\n        return Point2D();\n    }\n}\n\ndouble Dist(const Point2D& P, const Segment& Seg) {\n    Vector2D V1(Seg);\n    Vector2D V2(Seg.P, P);\n    double IP = V1.InnerProd(V2);\n    if (IP < 0.) {\n        return Dist(P, Seg.P);\n    } else if (IP > V1.InnerProd(V1)) {\n        return Dist(P, Seg.Q);\n    } else {\n        return fabs(V1.OuterProd(V2)) / V1.Length();\n    }\n}\n\ndouble Dist(const Segment& Seg1, const Segment& Seg2) {\n    if (IsIntersect(Seg1, Seg2)) return 0.;\n    double Ret = Dist(Seg1.P, Seg2);\n    Ret = min(Ret, Dist(Seg1.Q, Seg2));\n    Ret = min(Ret, Dist(Seg2.P, Seg1));\n    Ret = min(Ret, Dist(Seg2.Q, Seg1));\n    return Ret;\n}\n\nint main(int argc, const char * argv[]) {\n    int q;\n    Segment Seg1, Seg2;\n    cin >> q;\n    for (int i = 0; i < q; ++i) {\n        cin >> Seg1 >> Seg2;\n        cout << fixed << setprecision(15) << Dist(Seg1, Seg2) << endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <cassert>\n#include <cmath>\n\nusing namespace std;\n\nconst double EPS = 1e-7;\n\nstruct Point {\n    double x, y;\n    Point() {}\n    Point(double x, double y) : x(x), y(y) {}\n    Point operator+(const Point& p) const { return Point(x + p.x, y + p.y); }\n    Point operator-(const Point& p) const { return Point(x - p.x, y - p.y); }\n    Point operator*(double k) const { return Point(k * x, k * y); }\n    Point operator/(double k) const { return Point(x / k, y / k); }\n};\ndouble dot(const Point& a, const Point& b) { return a.x * b.x + a.y * b.y; }\ndouble cross(const Point& a, const Point& b) { return a.x * b.y - a.y * b.x; }\ndouble norm(const Point& a) { return sqrt(dot(a, a)); }\nPoint rot90(const Point& p) { return Point(p.y, -p.x); } // 時計回りに90度回転 \nostream& operator<<(ostream& os, const Point& p) { return os << \"(\" << p.x << \",\" << p.y << \")\"; }\nistream& operator>>(istream& is, Point& p) { return is >> p.x >> p.y; }\n\nint ccw(Point a, Point b, Point c){\n    b = b - a; c = c - a;\n    if (cross(b, c) > EPS) return +1;      // a,b,cの順に反時計周り\n    if (cross(b, c) < -EPS) return -1;     // a,b,cの順に時計周り\n    if (dot(b, c) < 0) return +2;          // c--a--b 直線\n    if (norm(b) < norm(c)) return -2;      // a--b--c 直線\n    return 0;                              // a--c--b 直線\n}\n\nstruct Line {\n    Point a, b;\n    Line() {}\n    Line(const Point& a, const Point& b) : a(a), b(b) {}\n};\nbool contains(const Line& l, const Point& p) { return ccw(l.a, l.b, p) % 2 == 0; }\nbool parallel(const Line& s, const Line& t) { return abs(cross(s.b - s.a, t.b - t.a)) < EPS; }\nbool orthogonal(const Line& s, const Line& t) { return abs(dot(s.b - s.a, t.b - t.a)) < EPS; }\nbool equals(const Line& s, const Line& t) { return parallel(s, t) && contains(s, t.a); }\nistream& operator>>(istream& is, Line& l) { return is >> l.a >> l.b; }\n\nPoint projection(const Line& l, const Point& p) {\n    Point u = (p - l.a), v = (l.b - l.a);\n    return l.a + (v / norm(v)) * (dot(u, v) / norm(v));\n}\n\nstruct Segment {\n    Point a, b;\n    Segment() {}\n    Segment(const Point& a, const Point& b) : a(a), b(b) {}\n};\nistream& operator>>(istream& is, Segment& l) { return is >> l.a >> l.b; }\nbool intersects(const Segment& s, const Segment& t) {\n    return ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 && ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0;\n}\ndouble dist(const Segment& s, const Point& p) {\n    Point q = projection(Line(s.a, s.b), p);\n    Segment t(p, q);\n    if (intersects(s, t)) return norm(t.b - t.a);\n    return min(norm(s.a - p), norm(s.b - p));\n}\ndouble dist(const Segment& s, const Segment& t) {\n    if (intersects(s, t)) return 0;\n    return min( min(dist(s, t.a), dist(s, t.b)),\n                min(dist(t, s.a), dist(t, s.b)) );\n}\n\nint main() {\n    int Q; cin >> Q;\n    for (int i = 0; i < Q; i++) {\n        Segment s, t; cin >> s >> t;\n        cout << fixed << setprecision(12) << dist(s, t) << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n#define PI 3.141592653589793238\n#define int long long\n \nusing namespace std;\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nstruct Point{\n  double x,y;\n  Point(){}\n  Point(double x,double y) :x(x),y(y){}\n  Point operator + (Point p) {return Point(x+p.x,y+p.y);}\n  Point operator - (Point p) {return Point(x-p.x,y-p.y);}\n  Point operator * (double k) {return Point(x*k,y*k);}\n  Point operator / (double k) {return Point(x/k,y/k);}\n  double norm(){return x*x+y*y;}\n  double abs(){return sqrt(norm());}\n\n  bool operator < (const Point &p) const{\n    return x!=p.x ? x < p.x : y < p.y;\n  }\n\n  bool operator == (const Point &p) const{\n    return fabs(x-p.x) < EPS && fabs(y-p.y) < EPS;\n  }\n};\n\nistream &operator >> (istream &is,Point &p){\n  is>>p.x>>p.y;\n  return is;\n}\n\nostream &operator << (ostream &os,Point p){\n  os<<fixed<<setprecision(12)<<p.x<<\" \"<<p.y;\n  return os;\n}\n\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\nstruct Segment{\n  Point p1,p2;\n  Segment(){}\n  Segment(Point p1, Point p2):p1(p1),p2(p2){}\n};\ntypedef Segment Line;\n\nstruct Circle{\n  Point c;\n  double r;\n  Circle(){}\n  Circle(Point c,double r):c(c),r(r){}\n};\n\ndouble norm(Vector a){\n  return a.x*a.x+a.y*a.y;\n}\ndouble abs(Vector a){\n  return sqrt(norm(a));\n}\ndouble dot(Vector a,Vector b){\n  return a.x*b.x+a.y*b.y;\n}\ndouble cross(Vector a,Vector b){\n  return a.x*b.y-a.y*b.x;\n}\n\nbool isOrthogonal(Vector a,Vector b){\n  return equals(dot(a,b),0.0);\n}\n\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n  return isOrthogonal(a1-a2,b1-b2);\n}\n\nbool isOrthogonal(Segment s1,Segment s2){\n  return equals(dot(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n\nbool isParallel(Vector a,Vector b){\n  return equals(cross(a,b),0.0);\n}\n\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n  return isParallel(a1-a2,b1-b2);\n}\n\nbool isParallel(Segment s1,Segment s2){\n  return equals(cross(s1.p2-s1.p1,s2.p2-s2.p1),0.0); \n}\n\nPoint project(Segment s,Point p){\n  Vector base=s.p2-s.p1;\n  double r=dot(p-s.p1,base)/norm(base);\n  return s.p1+base*r;\n}\n\nPoint reflect(Segment s,Point p){\n  return p+(project(s,p)-p)*2.0;\n}\n\nint ccw(Point p0,Point p1,Point p2){\n  Vector a = p1-p0;\n  Vector b = p2-p0;\n  if(cross(a,b) > EPS) return COUNTER_CLOCKWISE;\n  if(cross(a,b) < -EPS) return CLOCKWISE;\n  if(dot(a,b) < -EPS) return ONLINE_BACK;\n  if(a.norm()<b.norm()) return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\n\nbool intersect(Point p1,Point p2,Point p3,Point p4){\n  return (ccw(p1,p2,p3)*ccw(p1,p2,p4) <= 0 &&\n\t  ccw(p3,p4,p1)*ccw(p3,p4,p2) <= 0 );\n}\n\nbool intersect(Segment s1,Segment s2){\n  return intersect(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n\ndouble getDistanceLP(Line l,Point p){\n  return abs(cross(l.p2-l.p1,p-l.p1)/abs(l.p2-l.p1));\n}\n\ndouble getDistanceSP(Segment s,Point p){\n  if(dot(s.p2-s.p1,p-s.p1) < 0.0 ) return abs(p-s.p1);\n  if(dot(s.p1-s.p2,p-s.p2) < 0.0 ) return abs(p-s.p2);\n  return getDistanceLP(s,p);\n}\n\ndouble getDistance(Segment s1,Segment s2){\n  if(intersect(s1,s2)) return 0.0;\n  return min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),\n\t     min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n}\n\nPoint getCrossPoint(Segment s1,Segment s2){\n  Vector base=s2.p2-s2.p1;\n  double d1=abs(cross(base,s1.p1-s2.p1));\n  double d2=abs(cross(base,s1.p2-s2.p1));\n  double t=d1/(d1+d2);\n  return s1.p1+(s1.p2-s1.p1)*t;\n}\n\n\npair<Point,Point> getCrossPoints(Circle c,Line l){\n  Vector pr=project(l,c.c);\n  Vector e=(l.p2-l.p1)/abs(l.p2-l.p1);\n  double base=sqrt(c.r*c.r-norm(pr-c.c));\n  return make_pair(pr+e*base,pr-e*base);\n}\n\n\ndouble arg(Vector p){\n  return atan2(p.y,p.x);\n}\n\nVector polar(double a,double r){\n  return Point(cos(r)*a,sin(r)*a);\n}\n\npair<Point,Point> getCrossPoints(Circle c1,Circle c2){\n  double d=abs(c1.c-c2.c);\n  double a=acos((c1.r*c1.r+d*d-c2.r*c2.r)/(2*c1.r*d));\n  double t=arg(c2.c-c1.c);\n  return make_pair(c1.c+polar(c1.r,t+a),c1.c+polar(c1.r,t-a));\n}\n\nint contains(Polygon g,Point p){\n  int n=g.size();\n  bool x=false;\n  for(int i=0;i<n;i++){\n    Point a=g[i]-p,b=g[(i+1)%n]-p;\n    if(fabs(cross(a,b)) < EPS && dot(a,b) < EPS) return 1;\n    if(a.y>b.y) swap(a,b);\n    if(a.y < EPS && EPS < b.y && cross(a,b) > EPS ) x = !x;\n  }\n  return (x?2:0);\n}\n\nPolygon andrewScan(Polygon s){\n  Polygon u,l;\n  if(s.size()<3) return s;\n  sort(s.begin(),s.end());\n  u.push_back(s[0]);\n  u.push_back(s[1]);\n  l.push_back(s[s.size()-1]);\n  l.push_back(s[s.size()-2]);\n  for(int i=2;i<(int)s.size();i++){\n    for(int n=u.size();n>=2&&ccw(u[n-2],u[n-1],s[i]) != CLOCKWISE;n--){\n      u.pop_back();\n    }\n    u.push_back(s[i]);\n  } \n  for(int i=s.size()-3;i>=0;i--){\n    for(int n=l.size();n>=2&&ccw(l[n-2],l[n-1],s[i]) != CLOCKWISE;n--){\n      l.pop_back();\n    }\n    l.push_back(s[i]);\n  }\n  reverse(l.begin(),l.end());\n  for(int i=u.size()-2;i>=1;i--) l.push_back(u[i]);\n  return l;\n} \n\ndouble area(Polygon s){\n  double res=0;\n  for(int i=0;i<(int)s.size();i++){\n    res+=cross(s[i],s[(i+1)%s.size()])/2.0;\n  }\n  return abs(res);\n}\n\n\nPoint getCrossPointLL(Line l1,Line l2){\n  double a=cross(l1.p2-l1.p1,l2.p2-l2.p1);\n  double b=cross(l1.p2-l1.p1,l1.p2-l2.p1);\n  if(abs(a)<EPS&&abs(b)<EPS) return l2.p1;\n  return l2.p1+(l2.p2-l2.p1)*(b/a);\n}\n\nPolygon convexCut(Polygon p,Line l){\n  Polygon q;\n  for(int i=0;i<(int)p.size();i++){\n    Point a=p[i],b=p[(i+1)%p.size()];\n    if(ccw(l.p1,l.p2,a)!=-1) q.push_back(a);\n    if(ccw(l.p1,l.p2,a)*ccw(l.p1,l.p2,b)<0)\n      q.push_back(getCrossPointLL(Line(a,b),l));\n  }\n  return q;\n}\n\nLine bisector(Point p1,Point p2){\n  Circle c1=Circle(p1,abs(p1-p2)),c2=Circle(p2,abs(p1-p2));\n  pair<Point,Point> p=getCrossPoints(c1,c2);\n  if(cross(p2-p1,p.first-p1)>0) swap(p.first,p.second);\n  return Line(p.first,p.second);\n}\n\n\nVector spin(Vector v,double theta){\n  Vector res;\n  res.x=cos(theta)*v.x-sin(theta)*v.y;\n  res.y=sin(theta)*v.x+cos(theta)*v.y;\n  return res;\n}\n\nvector<Line> corner(Line l1,Line l2){\n  vector<Line> res;\n  if(isParallel(l1,l2)){\n    double d=getDistanceLP(l1,l2.p1)/2.0;\n    Vector v1=l1.p2-l1.p1;\n    v1=v1/v1.abs()*d;\n    Point p=l2.p1+spin(v1,90.0*(PI/180.0));\n    double d1=getDistanceLP(l1,p);\n    double d2=getDistanceLP(l2,p);\n    if(abs(d1-d2)>d){\n      p=l2.p1+spin(v1,-90.0*(PI/180.0));\n    }\n    res.push_back(Line(p,p+v1));\n  }else{\n    Point p=getCrossPointLL(l1,l2);\n    Vector v1=l1.p2-l1.p1,v2=l2.p2-l2.p1;\n    v1=v1/v1.abs();\n    v2=v2/v2.abs();\n    res.push_back(Line(p,p+(v1+v2)));\n    res.push_back(Line(p,p+spin(v1+v2,90.0*(PI/180.0))));\n  }\n  return res;\n}\n\nsigned main(){\n  int q;\n  cin>>q;\n  while(q--){\n    Point p0,p1,p2,p3;\n    cin>>p0>>p1>>p2>>p3;\n    cout<<getDistance(Segment(p0,p1),Segment(p2,p3))<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define TemplateVersion \"3.4.0\"\n// Useful Marcos\n//====================START=====================\n// Compile use C++11 and above\n#ifdef LOCAL\n#define debug(args...)                           \\\n    {                                            \\\n        string _s = #args;                       \\\n        replace(_s.begin(), _s.end(), ',', ' '); \\\n        stringstream _ss(_s);                    \\\n        istream_iterator<string> _it(_ss);       \\\n        err(_it, args);                          \\\n    }\nvoid err(istream_iterator<string> it)\n{\n}\ntemplate <typename T, typename... Args>\nvoid err(istream_iterator<string> it, T a, Args... args)\n{\n    cerr << *it << \" = \" << a << endl;\n    err(++it, args...);\n}\n#define MSG cout << \"Finished\" << endl\n#else\n#define debug(args...)\n#define MSG\n#endif\n#if __cplusplus >= 201703L\ntemplate <typename... Args>\nvoid readln(Args &... args)\n{\n    ((cin >> args), ...);\n}\ntemplate <typename... Args>\nvoid writeln(Args... args)\n{\n    ((cout << args << \" \"), ...);\n    cout << endl;\n}\n#elif __cplusplus >= 201103L\nvoid readln()\n{\n}\ntemplate <typename T, typename... Args>\nvoid readln(T &a, Args &... args)\n{\n    cin >> a;\n    readln(args...);\n}\nvoid writeln()\n{\n    cout << endl;\n}\ntemplate <typename T, typename... Args>\nvoid writeln(T a, Args... args)\n{\n    cout << a << \" \";\n    writeln(args...);\n}\n#endif\n#if __cplusplus >= 201103L\n#define FOR(_i, _begin, _end) for (auto _i = _begin; _i < _end; _i++)\n#define FORR(_i, _begin, _end) for (auto _i = _begin; _i > _end; _i--)\n#else\n#define FOR(_i, _begin, _end) for (int _i = (int)_begin; _i < (int)_end; _i++)\n#define FORR(_i, _begin, _end) for (int _i = (int)_begin; _i > (int)_end; _i--)\n#define nullptr NULL\n#endif\n#if __cplusplus >= 201103L\n#define VIS(_kind, _name, _size) \\\n    vector<_kind> _name(_size);  \\\n    for (auto &i : _name)        \\\n        cin >> i;\n#else\n#define VIS(_kind, _name, _size)    \\\n    vector<_kind> _name;            \\\n    _name.resize(_size);            \\\n    for (int i = 0; i < _size; i++) \\\n        cin >> _name[i];\n#endif\n// alias\n#define mp make_pair\n#define pb push_back\n#define eb emplace_back\n#define all(x) (x).begin(), (x).end()\n#define tcase() \\\n    int T;      \\\n    cin >> T;   \\\n    FOR(kase, 1, T + 1)\n// Swap max/min\ntemplate <typename T>\nbool smax(T &a, const T &b)\n{\n    if (a > b)\n        return false;\n    a = b;\n    return true;\n}\ntemplate <typename T>\nbool smin(T &a, const T &b)\n{\n    if (a < b)\n        return false;\n    a = b;\n    return true;\n}\n// ceil divide\ntemplate <typename T>\nT cd(T a, T b)\n{\n    return (a + b - 1) / b;\n}\n// min exchange\ntemplate <typename T>\nbool se(T &a, T &b)\n{\n    if (a < b)\n        return false;\n    swap(a, b);\n    return true;\n}\n// A better MAX choice\nconst int INF = 0x3f3f3f3f;\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int, int> pii;\ntypedef vector<int> vi;\ntypedef vector<ll> vll;\ntypedef set<int> si;\ntypedef vector<string> cb;\n//====================END=====================\n\n// Constants here\nconst double EPS = 1e-8;\nconst double PI = acos(-1);\nconst double FAC = 1e-18;\n\ntypedef double db;\n\nint sgn(db x)\n{\n    if (abs(x) < EPS)\n        return 0;\n    if (x < 0)\n        return -1;\n    return 1;\n}\n\ninline db sqr(db x) { return x * x; }\n\n// Point/Vector\nstruct Point\n{\n    db x, y;\n\n    Point() : x(0.0), y(0.0) {}\n\n    Point(db _x, db _y) : x(_x), y(_y) {}\n\n    bool operator==(const Point &p)\n    {\n        return sgn(x - p.x) == 0 && sgn(y - p.y) == 0;\n    }\n\n    bool operator<(const Point &p)\n    {\n        int c = sgn(x - p.x);\n        if (c)\n            return c == -1;\n        return sgn(y - p.y) == -1;\n    }\n\n    Point operator+(const Point &p) { return Point(x + p.x, y + p.y); }\n    Point operator-(const Point &p) { return Point(x - p.x, y - p.y); }\n    Point operator*(db d) { return Point(x * d, y * d); }\n    Point operator/(db d) { return Point(x / d, y / d); }\n\n    db operator^(const Point &p) { return x * p.y - y * p.x; }\n    db operator*(const Point &p) { return x * p.x + y * p.y; }\n\n    db dis(const Point &p) { return (*this - p).len(); }\n    db alpha() { return atan2(y, x); }\n\n    Point unit() { return *this / len(); }\n\n    Point rotac() { return Point(-y, x); }\n    Point rotcl() { return Point(y, -x); }\n\n    Point rot(Point p, db angle)\n    {\n        Point v = *this - p;\n        db c = cos(angle), s = sin(angle);\n        return Point(p.x + v.x * c - v.y * s, p.y + v.x * s + v.y * c);\n    }\n\n    db len() { return hypot(x, y); }\n    db len2() { return x * x + y * y; }\n\n    db rad(Point a, Point b)\n    {\n        Point ap = a - *this, bp = b - *this;\n        return abs(atan2(abs(ap ^ bp), ap * bp));\n    }\n\n    void read() { cin >> x >> y; }\n    void write() { cout << '(' << x << \", \" << y << \")\\n\"; }\n};\n\n// Line\nstruct Line\n{\n    Point s, e;\n\n    Line(){};\n\n    Line(Point _s, Point _e) : s(_s), e(_e) {}\n\n    Line(Point p, db angle)\n    {\n        s = p;\n        if (sgn(angle - PI / 2))\n            e = (s + Point(1, tan(angle)));\n        else\n            e = (s + Point(0, 1));\n    }\n\n    //ax+by+c=0\n    Line(db a, db b, db c)\n    {\n        if (sgn(a) == 0)\n        {\n            s = Point(0, -c / b);\n            e = Point(1, -c / b);\n        }\n        else if (sgn(b) == 0)\n        {\n            s = Point(-c / a, 0);\n            e = Point(-c / a, 1);\n        }\n        else\n        {\n            s = Point(0, -c / b);\n            e = Point(1, -(c + a) / b);\n        }\n    }\n\n    db len() { return s.dis(e); }\n    db angle()\n    {\n        db ans = atan2(e.y - s.y, e.x - s.x);\n        if (sgn(ans) == -1)\n            ans += PI;\n        if (sgn(ans - PI) == 0)\n            ans -= PI;\n        return ans;\n    }\n\n    // 1 -> On Counter-clockwise\n    // 2 -> On Clockwise\n    // 3 -> On Line BUT MAY NOT ON THE SEGMENT!\n    int relation(Point p)\n    {\n        int c = sgn((p - s) ^ (e - s));\n        if (c < 0)\n            return 1;\n        else if (c > 0)\n            return 2;\n        return 3;\n    }\n\n    bool checkOn(Point p) { return relation(p) == 3 && sgn((p - s) ^ (p - e)) <= 0; }\n\n    bool parallel(Line l) { return sgn((e - s) ^ (l.e - l.s)) == 0; }\n\n    // 0 -> Not Intersect\n    // 1 -> Informal\n    // 2 -> Formal Intersection\n    int crossSS(Line l)\n    {\n        int d1 = sgn((e - s) ^ (l.s - s));\n        int d2 = sgn((e - s) ^ (l.e - s));\n        int d3 = sgn((l.e - l.s) ^ (s - l.s));\n        int d4 = sgn((l.e - l.s) ^ (e - l.s));\n        if ((d1 ^ d2) == -2 && (d3 ^ d4) == -2)\n            return 2;\n        return (d1 == 0 && sgn((l.s - s) * (l.s - e)) <= 0) ||\n               (d2 == 0 && sgn((l.e - s) * (l.e - e)) <= 0) ||\n               (d3 == 0 && sgn((s - l.s) * (s - l.e)) <= 0) ||\n               (d4 == 0 && sgn((e - l.s) * (e - l.e)) <= 0);\n    }\n\n    // 0 -> Not Intersect\n    // 1 -> Informal\n    // 2 -> Formal Intersection\n    int crossLS(Line l)\n    {\n        int d1 = sgn((e - s) ^ (l.s - s));\n        int d2 = sgn((e - s) ^ (l.e - s));\n        if ((d1 ^ d2) == -2)\n            return 2;\n        return (d1 == 0 || d2 == 0);\n    }\n\n    // 0 -> Parallel\n    // 1 -> Same\n    // 2 -> Intersect\n    int crossLL(Line l)\n    {\n        if (this->parallel(l))\n            return l.relation(s) == 3;\n        return 2;\n    }\n\n    Point intersec(Line l)\n    {\n        db a1 = (l.e - l.s) ^ (s - l.s);\n        db a2 = (l.e - l.s) ^ (e - l.s);\n        return Point((s.x * a2 - e.x * a1) / (a2 - a1), (s.y * a2 - e.y * a1) / (a2 - a1));\n    }\n\n    db disPL(Point p) { return abs((p - s) ^ (e - s)) / len(); }\n    db disPS(Point p)\n    {\n        if (sgn((p - s) * (e - s)) < 0 || sgn((p - e) * (s - e)) < 0)\n            return min(p.dis(s), p.dis(e));\n        return disPL(p);\n    }\n    db disSS(Line l) { return min(min(disPS(l.s), disPS(l.e)), min(l.disPS(s), l.disPS(e))); }\n\n    Point proj(Point p) { return s + ((e - s) * ((e - s) * (p - s))) / ((e - s).len2()); }\n    Point refl(Point p)\n    {\n        Point q = proj(p);\n        return Point(2 * q.x - p.x, 2 * q.y - p.y);\n    }\n\n    bool operator==(Line l) { return s == l.s && e == l.e; }\n\n    void adjust()\n    {\n        if (e < s)\n            swap(s, e);\n    }\n\n    void read()\n    {\n        s.read();\n        e.read();\n    }\n\n    void write()\n    {\n        cout << \"Line:\\n\";\n        s.write();\n        e.write();\n    }\n};\n\n// Pre-Build Function\ninline void build()\n{\n}\n\n// Actual Solver\ninline void solve()\n{\n    cout << fixed << setprecision(10);\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        Line l1, l2;\n        l1.read();\n        l2.read();\n        if (!l1.crossSS(l2))\n            cout << l1.disSS(l2) << '\\n';\n        else\n            cout << \"0\\n\";\n    }\n}\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n    cout.tie(nullptr);\n\n#ifdef LOCAL\n    clock_t _begin = clock();\n#endif\n\n    build();\n    solve();\n\n#ifdef LOCAL\n    cerr << \"Time elapsed: \" << (double)(clock() - _begin) * 1000 / CLOCKS_PER_SEC << \"ms.\" << endl;\n#endif\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstdlib>\n#include <cmath>\n#include <cstring>\n\n#include <iostream>\n#include <string>\n#include <algorithm>\n#include <vector>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n\n#include <complex>\n\n#include <functional>\n#include <cassert>\n\ntypedef long long ll;\nusing namespace std;\n\n#define debug(x) cerr << #x << \" = \" << (x) << endl;\n\n\n#define mod 1000000007 //1e9+7(prime number)\n#define INF 1000000000 //1e9\n#define LLINF 2000000000000000000LL //2e18\n#define SIZE 100010\n\ntypedef double P_type;\ntypedef complex<P_type> P;\nconst P_type P_eps = 1e-8; //??´??°???????????????\n\nbool operator<(const P &a, const P &b){\n  return a.real() == b.real() ? a.imag() < b.imag() : a.real() < b.real();\n}\n\nbool operator==(const P &a, const P &b){\n  const double eps = P_eps;\n  return abs(a.real() - b.real()) <= eps && abs(a.imag() - b.imag()) <= eps;\n}\n\nP rotate(P p, double theta){\n  return p * P(cos(theta), sin(theta));\n}\n\n//??????\ndouble dot(P a, P b) {\n  return (a * conj(b)).real();\n}\n\n//??????\ndouble cross(P a, P b) {\n  return (a * conj(b)).imag();\n}\n\n/* ??????ab??¨???c????????¢ */\ndouble distanceSP(P a, P b, P c) {\n  if ( dot(b-a, c-a) < P_eps ) return abs(c-a);\n  if ( dot(a-b, c-b) < P_eps ) return abs(c-b);\n  return abs(cross(b-a, c-a)) / abs(b-a);\n}\n\n/* ??´???ab??¨???c????????¢ */\ndouble distanceLP(P a, P b, P c) {\n  return abs(cross(b-a, c-a)) / abs(b-a);\n}\n\n/* ????????????????????? */\ndouble isContainedCP(P c, double r, P p){\n  return abs(c-p) < r - P_eps; //?????¨??????????????????\n  //return abs(c-p) < r + P_eps; //?????¨????????????\n}\n\n/* ??´??????????????? */\nbool isIntersectedLL(P a1, P a2, P b1, P b2){\n  return abs(cross(a1-a2, b1-b2)) > P_eps;\n}\n\n/* ?????????????????? */\nbool isIntersectedSS(P a1, P a2, P b1, P b2){\n  \n  //??????a ??¨ ??´???b\n  P_type a = cross(b1-b2,a1-b1);\n  P_type b = cross(b1-b2,a2-b1);\n  \n  //??????b ??¨ ??´???a\n  P_type c = cross(a1-a2,b1-a1);\n  P_type d = cross(a1-a2,b2-a1);\n  \n  return a*b < P_eps && c*d < P_eps; // T?????????????????? -P_eps\n}\n\n/* ??????????????? */\nbool isIntersectedCC(P c1, double r1, P c2, double r2){\n  double dist = abs(c1 - c2);\n  \n  return abs(r1 - r2) < dist + P_eps && dist - P_eps < r1 + r2; //?????\\?????\\?????????\n  //return abs(r1 - r2) < dist - P_eps && dist + P_eps < r1 + r2; //?????\\?????\\?????????\n}\n\n/* ?????´??????????????? */\nbool isIntersectedCL(P c, double r, P a1, P a2){\n  return distanceLP(a1, a2, c) < r + P_eps; //??\\????????´????????????????????´??? - P_eps\n}\n\n/* ????????????????????? */\nbool isIntersectedCS(P c, double r, P a1, P a2){\n  return isContainedCP(c,r,a1) &&\n    isContainedCP(c,r,a2) &&\n    distanceLP(a1, a2, c) < r + P_eps; //??\\????????´????????????????????´??? - P_eps\n}\n\n/* ??´???/???????????? */\nP getCrosspointLL(P a1, P a2, P b1, P b2) {\n  //assert(isIntersectedLL(a1, a2, b1, b2));\n  //assert(isIntersectedSS(a1, a2, b1, b2));\n  P a = a2 - a1;\n  P b = b2 - b1;\n  return a1 + a * cross(b, b1-a1) / cross(b, a);\n}\n\nP getCrosspointSS(P a1, P a2, P b1, P b2){\n  return getCrosspointLL(a1, a2, b1, b2);\n}\n\n/* ????????? */\npair<P,P> getCrosspointCC(P c1, double r1, P c2, double r2){\n  //assert(isIntersectedCC(c1, r1, c2, r2));\n  \n  double dist = abs(c1 - c2);\n  double a = acos((r1*r1 + dist * dist - r2 * r2) / (2 * r1 * dist));\n  return {c1 + polar(r1, arg(c2 - c1) + a), c1 + polar(r1, arg(c2 - c1) - a)};\n}\n\n/* ??????????????? */\npair<P,P> getCrosspointCS(P c, double r, P a1, P a2){\n  //assert(isIntersectedCS(c1, r1, c2, r2));\n  \n  P base1 = a2 - a1;\n  P proj = a1 + base1 * dot(c - a1, base1) / norm(base1); //?°???±\n  P e = (a2 - a1) / abs(a2 - a1);\n  P base2 = sqrt(r*r - norm(proj - c));\n  return {proj + e*base2, proj - e*base2};\n}\n\n\nint main(){\n  int q;\n\n  scanf(\"%d\",&q);\n\n  for(int i=0;i<q;i++){\n    int x, y;\n    P p[4];\n\n    for(int j=0;j<4;j++){\n      scanf(\"%d%d\",&x,&y);\n      p[j] = P(x,y);\n    }\n\n    double ans = min({distanceSP(p[0],p[1],p[2]),distanceSP(p[0],p[1],p[3]),\n                      distanceSP(p[2],p[3],p[0]),distanceSP(p[2],p[3],p[1])});\n\n    if(isIntersectedSS(p[0],p[1],p[2],p[3]))\n      ans = 0;\n\n    printf(\"%.10lf\\n\",ans);\n  }\n  \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<complex>\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\ntypedef complex<long double> P;\n\n// ??§????????°INF\n#define INF (1e16)\n// ?¨±?????????????????\n#define EPS (1e-16)\n// 2??????????????????????????????????????????\n#define EQ(a,b) (abs((a)-(b)) < EPS)\n// 2??????????????????????????????????????????\n#define EQV(a,b) ( EQ((a).real(), (b).real()) && EQ((a).imag(), (b).imag()) )\n\n// ?????? (dot product) : a???b = |a||b|cos??\nlong double dot(P a, P b) {\n\treturn (a.real() * b.real() + a.imag() * b.imag());\n}\n\n// ?????? (cross product) : a??b = |a||b|sin??\nlong double cross(P a, P b) {\n\treturn (a.real() * b.imag() - a.imag() * b.real());\n}\n\n// ?????????????????????\nint is_intersected_ls(P a1, P a2, P b1, P b2) {\n\treturn (cross(a2 - a1, b1 - a1) * cross(a2 - a1, b2 - a1) < EPS) &&\n\t\t(cross(b2 - b1, a1 - b1) * cross(b2 - b1, a2 - b1) < EPS);\n}\n\n// 2??´?????????????????? : a//b <=> cross(a, b) = 0\nint is_parallel(P a1, P a2, P b1, P b2) {\n\treturn EQ(cross(a1 - a2, b1 - b2), 0.0);\n}\n\n// ???c?????????a,b????????????????????????(1)\nint is_point_on_line(P a, P b, P c) {\n\treturn EQ(cross(b - a, c - a), 0.0) &&\n\t\t(dot(b - a, c - a) > -EPS) &&\n\t\t(dot(a - b, c - b) > -EPS);\n}\n\n// a1,a2???????????¨??????????????¨b1,b2???????????¨??????????????????????¨????\nP intersection_ls(P a1, P a2, P b1, P b2) {\n\tP b = b2 - b1;\n\tlong double d1 = abs(cross(b, a1 - b1));\n\tlong double d2 = abs(cross(b, a2 - b1));\n\tlong double t = d1 / (d1 + d2);\n\n\treturn a1 + (a2 - a1) * t;\n}\n\n\n// ???a,b???????????¨??????????????¨???c??¨????????¢\nlong double distance_ls_p(P a, P b, P c) {\n\tif (dot(b - a, c - a) < EPS) return abs(c - a);\n\tif (dot(a - b, c - b) < EPS) return abs(c - b);\n\treturn abs(cross(b - a, c - a)) / abs(b - a);\n}\n\nint main() {\n\tint q; cin >> q;\n\tfor (int i = 0; i < q; i++) {\n\t\tlong double x0, y0, x1, y1, x2, y2, x3, y3;\n\t\tcin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n\t\tP p0(x0, y0), p1(x1, y1), p2(x2, y2), p3(x3, y3);\n\t\tlong double d0 = min(distance_ls_p(p0, p1, p2), distance_ls_p(p0, p1, p3));\n\t\tlong double d1 = min(distance_ls_p(p2, p3, p0), distance_ls_p(p2, p3, p1));\n\t\tlong double ans =min(d0,d1) ;\n\n\t\tcout.precision(20);\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define ll  long long\n//#define int long long\n#define inf 0x3f3f3f3f\n#define fi first\n#define se second\n#define pb push_back\n#define pa pair<int,int>\n#define mkp(a,b) make_pair(a,b)\nconst int N=2e5+10;\nconst int mod=998244353;\nusing namespace std;\n\n\nconst double eps=1e-8;\ninline int sgn(double x){return x<-eps?-1:(x>eps?1:0);}\ninline double pf(double x){return x*x;}\nstruct Point\n{\n   double x,y;\n   Point(){}\n   Point(double x,double y):x(x),y(y){}\n   Point(pair<double,double> p):x(p.first),y(p.second){}\n   bool operator == (const Point& p)const {return sgn(x-p.x)==0&&sgn(y-p.y)==0;}\n   bool operator != (const Point& p)const {return sgn(x-p.x)!=0||sgn(y-p.y)!=0;}\n   inline double length()const {return sqrt(pf(x)+pf(y));}\n   inline double angle()const{return atan2(y,x);}\n};\ntypedef Point Vector;\nVector operator + (Vector a,Vector b){return Vector(a.x+b.x,a.y+b.y);}\nVector operator - (Vector a,Vector b){return Vector(a.x-b.x,a.y-b.y);}\nVector operator * (Vector a,double mul){return Vector(a.x*mul,a.y*mul);}\nVector operator / (Vector a,double div){return Vector(a.x/div,a.y/div);}\ninline double dot(Vector a,Vector b){return a.x*b.x+a.y*b.y;}\ninline double cross(Vector a,Vector b){return a.x*b.y-a.y*b.x;}\ninline double dis(Vector a,Vector b){return sqrt(pf(a.x-b.x)+pf(a.y-b.y));}\ninline double angle(Vector a,Vector b){return acos(dot(a,b)/a.length()/b.length());}\nVector rot(Vector a,double rad){return Vector(a.x*cos(rad)-a.y*sin(rad),a.x*sin(rad)+a.y*cos(rad));}//ni shi zhen\nVector unit(Vector v){return v/v.length();}// 单位向量\nVector normal(Vector a){return Vector(-a.y,a.x);} // 法向量\nstruct Line\n{\n   Point p1,p2;\n   Vector v;\n   Line(){}\n   Line(Point p1,Point p2,Vector v): p1(p1),p2(p2),v(v){}\n};\ndouble x[5],y[5];\nint jiao()\n{\n\t if(max(x[1],x[2])<min(x[3],x[4])||min(x[1],x[2])>max(x[3],x[4])||max(y[1],y[2])<min(y[3],y[4])||min(y[1],y[2])>max(y[3],y[4])) \n   \t  {\n   \t  \t return 0;\n   \t  }\t\n   \t  double p1=cross(Point(x[3]-x[1],y[3]-y[1]),Point(x[2]-x[1],y[2]-y[1])); \n   \t  double p2=cross(Point(x[4]-x[1],y[4]-y[1]),Point(x[2]-x[1],y[2]-y[1]));\n   \t  double p3=cross(Point(x[1]-x[3],y[1]-y[3]),Point(x[4]-x[3],y[4]-y[3]));  \n   \t  double p4=cross(Point(x[2]-x[3],y[2]-y[3]),Point(x[4]-x[3],y[4]-y[3]));   \n   \t  if(p1*p2<=0&&p3*p4<=0) return 1;\n   \t  return 0;\n}\ndouble dispointline(Point p,Line l)\n{\n\treturn fabs(cross(p-l.p1,l.v)/l.v.length());\n}\ndouble dispointseg(Point p,Line s)\n{\n\tdouble ans=min(dis(p,s.p1),dis(p,s.p2));\n\tif(dot(p-s.p1,s.p2-s.p1)<-eps||dot(p-s.p2,s.p1-s.p2)<-eps) return ans;\n\treturn dispointline(p,s);\n}\nint32_t main()\n{\n   //ios::sync_with_stdio(0); cin.tie(0);cout.tie(0);\n   int q; scanf(\"%d\",&q);\n   while(q--)\n   {\n   \t  for(int i=1;i<=4;i++) scanf(\"%lf%lf\",&x[i],&y[i]);\n   \t  if(jiao()) {puts(\"0\"); continue; }\n   \t  Line l1=Line(Point(x[1],y[1]),Point(x[2],y[2]),Vector(x[2]-x[1],y[2]-y[1]));\n   \t  Line l2=Line(Point(x[3],y[3]),Point(x[4],y[4]),Vector(x[4]-x[3],y[4]-y[3]));\n   \t  double ans=min(dispointseg(l1.p1,l2),dispointseg(l1.p2,l2));\n   \t  ans=min(ans,min(dispointseg(l2.p1,l1),dispointseg(l2.p2,l1)));\n   \t  printf(\"%.10f\\n\",ans);\n   }\nreturn 0;\n}\n/*\n\n*/\n"
  },
  {
    "language": "C++",
    "code": "#include <complex>\n#include <vector>\n#include <map>\n#include <iostream>\n#include <cstdio>\n#include <cassert>\n\nusing namespace std;\n\n#define REP(i,n) for(int i = 0; i < (int)(n); ++i)\n#define FOR(i,a,b) for(int i = (a); i < (int)(b); ++i)\n#define ALL(c) (c).begin(), (c).end()\n#define SIZE(v) ((int)v.size())\n\nconst double EPS = 1e-8;\nconst double INF = 1e12;\n\ntypedef complex<double> P;\nstruct L : public vector<P> {\n  L(const P &a, const P &b) {\n    push_back(a); push_back(b);\n  }\n};\n\n// ??????\ndouble dot(const P& a, const P& b) {\n    return real(conj(a)*b);\n}\n\n// ????¬?????????????2??????\n// not verified\ndouble norm(const P& a) {\n    return real(conj(a)*a);\n}\n\n// ??????\ndouble cross(const P& a, const P& b) {\n    return imag(conj(a)*b);\n}\n\n// ???p2?????????p0, p1???????????´???????°???±?????????\nP projection(const P& p0, const P& p1, const P& p2) {\n    // ???????????????????????´???\n    P vec1 = p1 - p0;\n    P vec2 = p2 - p0;\n    return p0 + vec1 * dot(vec1, vec2) / dot(vec1, vec1);\n}\n\n// projection?????\\??¨???\n// not verified\nP projection(const L &l, const P &p) {\n    double t = dot(p-l[0], l[0]-l[1]) / norm(l[0]-l[1]);\n    return l[0] + t*(l[0]-l[1]);\n}\n\n// ???p0, p1???????????´??????????§°?????¨????????????p2??¨????§°??????\nP reflection(const P& p0, const P& p1, const P& p2) {\n    P proj = projection(p0, p1, p2);\n    return proj - (p2 - proj);\n}\n\nint ccw(P a, P b, P c) {\n    b -= a; c -= a;\n    if (cross(b, c) > 0)   return +1;       // counter clockwise\n    if (cross(b, c) < 0)   return -1;       // clockwise\n    if (dot(b, c) < 0)     return +2;       // c--a--b on line\n    if (norm(b) < norm(c)) return -2;       // a--b--c on line\n    return 0;                               // a--c--b on line\n}\n\n// 2??´?????????????????????\nbool is_parallel(const L& l1, const L& l2) {\n    P p1 = l1[1] - l1[0];\n    P p2 = l2[1] - l2[0];\n    auto res = ccw(p1, p2, P(0,0));\n    return (res == 2 || res == -2 || res == 0);\n}\n\n// 2??´???????????´?????????\nbool is_ortho(const L& l1, const L& l2) {\n    P p1 = l1[1] - l1[0];\n    P p2 = l2[1] - l2[0];\n    return dot(p1, p2) == 0;\n}\n\n// l: line(??´???)\n// s: segment(??????)\n// not verified\nbool intersectLL(const L &l, const L &m) {\n  return abs(cross(l[1]-l[0], m[1]-m[0])) > EPS || // non-parallel\n         abs(cross(l[1]-l[0], m[0]-l[0])) < EPS;   // same line\n}\n\n// not verified\nbool intersectLS(const L &l, const L &s) {\n    return cross(l[1]-l[0], s[0]-l[0])*       // s[0] is left of l\n        cross(l[1]-l[0], s[1]-l[0]) < EPS; // s[1] is right of l\n}\n\n// not verified\nbool intersectLP(const L &l, const P &p) {\n    return abs(cross(l[1]-p, l[0]-p)) < EPS;\n}\n\nbool intersectSS(const L &s, const L &t) {\n    return ccw(s[0],s[1],t[0])*ccw(s[0],s[1],t[1]) <= 0 &&\n        ccw(t[0],t[1],s[0])*ccw(t[0],t[1],s[1]) <= 0;\n}\n\n// not verified\nbool intersectSP(const L &s, const P &p) {\n    return abs(s[0]-p)+abs(s[1]-p)-abs(s[1]-s[0]) < EPS; // triangle inequality\n}\n\n// not verified\ndouble distanceLP(const L &l, const P &p) {\n    return abs(p - projection(l, p));\n}\n\n// not verified\ndouble distanceLL(const L &l, const L &m) {\n    return intersectLL(l, m) ? 0 : distanceLP(l, m[0]);\n}\n\n// not verified\ndouble distanceLS(const L &l, const L &s) {\n    if (intersectLS(l, s)) return 0;\n    return min(distanceLP(l, s[0]), distanceLP(l, s[1]));\n}\n\ndouble distanceSP(const L &s, const P &p) {\n    const P r = projection(s, p);\n    if (intersectSP(s, r)) return abs(r - p);\n    return min(abs(s[0] - p), abs(s[1] - p));\n}\n\ndouble distanceSS(const L &s, const L &t) {\n    if (intersectSS(s, t)) return 0;\n    return min(min(distanceSP(s, t[0]), distanceSP(s, t[1])),\n               min(distanceSP(t, s[0]), distanceSP(t, s[1])));\n}\n\n// 2??´????????????\nP crosspoint(const L &l, const L &m) {\n    double A = cross(l[1] - l[0], m[1] - m[0]);\n    double B = cross(l[1] - l[0], l[1] - m[0]);\n    if (abs(A) < EPS && abs(B) < EPS) return m[0]; // same line\n    if (abs(A) < EPS) assert(false); // !!!PRECONDITION NOT SATISFIED!!!\n    return m[0] + B / A * (m[1] - m[0]);\n}\n\nint main(){\n    int Q;\n    cin >> Q;\n    REP(q, Q) {\n        double x0, y0, x1, y1, x2, y2, x3, y3;\n        cin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n        P p0(x0, y0);\n        P p1(x1, y1);\n        P p2(x2, y2);\n        P p3(x3, y3);\n        L s0(p0, p1);\n        L s1(p2, p3);\n        printf(\"%.10lf\\n\", distanceSS(s0,s1));\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nconst double eps = 1e-10;\nbool dless(double d1, double d2) { return d1 < d2 + eps; }\nbool dcmp(double d, double d2 = 0) { return abs(d - d2) < eps; }\ndouble sgn(double d) {\n  if (dcmp(d))\n    return 0;\n  if (d > 0)\n    return 1;\n  return -1;\n}\n\nstruct vec {\n  double x, y;\n  vec(double x, double y) : x(x), y(y) {}\n  vec() : x(0), y(0) {}\n  const bool operator==(const vec &v) const {\n    return dcmp(x, v.x) && dcmp(y, v.y);\n  }\n  const bool operator!=(const vec &v) const { return !(*this == v); }\n  const vec operator+(const vec &v) const { return vec(x + v.x, y + v.y); }\n  const vec operator-() const { return vec(-x, -y); }\n  const vec operator-(const vec &v) const { return *this + (-v); }\n  const vec operator*(const double d) const { return vec(x * d, y * d); }\n  const vec operator/(const double d) const { return *this * (1 / d); }\n  const vec unit() const { return *this / len(); };\n  const double len() const { return sqrt(x * x + y * y); }\n  const double dot(const vec &v) const { return x * v.x + y * v.y; }\n  const double cross(const vec &v) const { return x * v.y - y * v.x; }\n  const bool parallel(const vec &v) const { return dcmp(cross(v)); }\n  const bool perpendicular(const vec &v) const { return dcmp(dot(v)); }\n};\n\ntypedef vec point;\n\ntemplate <class T> struct optional {\n  bool has;\n  T val;\n  optional() : has(false) {}\n  optional(T t) : has(true), val(t) {}\n};\n\nstruct line {\n  double a, b, c;\n  line(point p1, point p2) {\n    a = p1.y - p2.y;\n    b = p2.x - p1.x;\n    c = (p1.x - p2.x) * p1.y + (p2.y - p1.y) * p1.x;\n    double m1 = a * p1.x + b * p1.y + c;\n    double m2 = a * p2.x + b * p2.y + c;\n  }\n  bool parallel(line l) { return dcmp(a * l.b, b * l.a); }\n  optional<point> intersect(line l) {\n    if (parallel(l))\n      return optional<point>();\n    return point(-(c * l.b - b * l.c) / (a * l.b - b * l.a),\n                 (c * l.a - a * l.c) / (a * l.b - b * l.a));\n  }\n  bool contains(point p) { return dcmp(a * p.x + b * p.y + c); }\n  point project(point p) {\n    double t = -(a * p.x + b * p.y + c) / (a * a + b * b);\n    return point(p.x + a * t, p.y + b * t);\n  }\n};\n\nstruct segment {\n  point p1, p2;\n  segment(point p1, point p2) : p1(p1), p2(p2) {}\n  line sline() { return line(p1, p2); }\n  bool contains(point p) {\n    double x1 = min(p1.x, p2.x), x2 = max(p1.x, p2.x);\n    double y1 = min(p1.y, p2.y), y2 = max(p1.y, p2.y);\n    bool ok = sline().contains(p) && (dless(x1, p.x) && dless(p.x, x2)) &&\n              (dless(y1, p.y) && dless(p.y, y2));\n    return ok;\n  }\n  bool intersect(segment s) {\n    vec v0 = p2 - p1;\n    vec v1 = s.p2 - s.p1;\n    if (v0.parallel(v1)) {\n      return (contains(s.p1) || contains(s.p2)) ||\n             (s.contains(p1) || s.contains(p2));\n    }\n    point a = p1, b = p2, c = s.p1, d = s.p2;\n    return sgn((a - b).cross(b - c)) != sgn((a - b).cross(b - d)) &&\n           sgn((c - d).cross(d - a)) != sgn((c - d).cross(d - b));\n  }\n  double distance(point p) {\n    point p0 = sline().project(p);\n    if (contains(p0)) {\n      return (p0 - p).len();\n    } else {\n      return min((p1 - p).len(), (p2 - p).len());\n    }\n  }\n  double distance(segment s) {\n    if (intersect(s))\n      return 0.0;\n    return min(min(distance(s.p1), distance(s.p2)),\n               min(s.distance(p1), s.distance(p2)));\n  }\n};\n\nint main() {\n  int n;\n  cin >> n;\n  for (int i = 0; i < n; i++) {\n    point p0, p1, p2, p3;\n    cin >> p0.x >> p0.y >> p1.x >> p1.y >> p2.x >> p2.y >> p3.x >> p3.y;\n    segment l0(p0, p1);\n    segment l1(p2, p3);\n    double d = l0.distance(l1);\n    printf(\"%.10lf\\n\", d);\n  }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <numeric>\n#include <map>\n#include <set>\n#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <bitset>\n#include <climits>\n#define REP(i,n) for (int i=0;i<(n);i++)\n#define FOR(i,a,b) for (int i=(a);i<(b);i++)\n#define RREP(i,n) for (int i=(n)-1;i>=0;i--)\n#define RFOR(i,a,b) for (int i=(a)-1;i>=(b);i--)\n#define ll long long\n#define ull unsigned long long\nint dx[4] = {1, 0, -1, 0};\nint dy[4] = {0, 1, 0, -1};\nconst int INF = 1e9;\nconst int MOD = 1e9 + 7;\n\nusing namespace std;\n#include <vector>\n#include <cmath>\n#include <cstring>\n\nconst double EPS = 1e-10;\n#define equals(a,b) (fabs((a) - (b)) < EPS)\nstruct Point{\n\tdouble x,y;\n\tPoint(double x = 0.0,double y =0.0):x(x),y(y){}\n\tPoint operator + (const Point& p){ return Point(x+p.x,y+p.y);\t}\n\tPoint operator - (const Point& p){ return Point(x-p.x,y-p.y); }\n\tPoint operator * (double k){ return Point(x*k,y*k);\t}\n\tPoint operator / (double k){ return Point(x/k,y/k); }\n\n\tdouble norm(){return x*x+y*y;}\n\tdouble abs(){return sqrt(norm());}\n\n\tbool operator < (const Point& p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\tbool operator == (const Point &p) const{\n\t\treturn fabs(x-p.x) < EPS && fabs(y-p.y) < EPS;\n\t}\n};\ntypedef Point Vector;\n\ndouble norm(Vector a){return a.x*a.x+a.y*a.y;}\ndouble abs(Vector a){return sqrt(norm(a));}\n\n//??????\ndouble dot(Vector a, Vector b){\n\treturn a.x * b.x + a.y * b.y;\n}\n\n//??????\ndouble cross(Vector a, Vector b){\n\treturn a.x*b.y - a.y*b.x;\n}\n\n\nstruct Segment{\n\tPoint p1,p2;\n\tSegment(Point p1,Point p2):p1(p1),p2(p2){}\n\tSegment(double a,double b,double c,double d):p1(Point(a,b)),p2(Point(c,d)){}\n};\n\ntypedef Segment Line;\nclass Circle{\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0): c(c),r(r){}\n};\ntypedef vector<Point> Polygon;\n\nbool isOrthgonal(Vector a, Vector b){\n\treturn equals(dot(a,b),0.0);\n}\n\nbool isOrthgonal(Point a1, Point a2, Point b1, Point b2){\n\treturn isOrthgonal(a1-a2,b1-b2);\n}\n\nbool isOrthgonal(Segment s1, Segment s2){\n\treturn equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1),0.0);\n}\n\nbool isParallel(Vector a,Vector b){\n\treturn equals(cross(a,b),0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2){\n\treturn isParallel(a1-a2,b1-b2);\n}\n\nbool isParallel(Segment s1, Segment s2){\n\treturn equals(cross(s1.p2 - s1.p1,s2.p2-s2.p1),0.0);\n}\n\nPoint project(Segment s,Point p){\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p-s.p1,base)/base.norm();\n\treturn s.p1 + base * r;\n}\n\nPoint reflect(Segment s, Point p){\n\treturn p + (project(s,p) - p) * 2.0;\n}\n\n\n\n//????¨???¨????????§??????\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\nint ccw(Vector a, Vector b){\n\tif(cross(a,b) > EPS)return COUNTER_CLOCKWISE;\n\tif(cross(a,b) < -EPS)return CLOCKWISE;\n\tif(dot(a,b) < -EPS)return ONLINE_BACK;\n\tif(a.norm() < b.norm())return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\nint ccw(Point p1,Point p2,Point p3){\n\tVector a = p2 - p1;\n\tVector b = p3 - p1;\n\tif(cross(a,b) > EPS)return COUNTER_CLOCKWISE;\n\tif(cross(a,b) < -EPS)return CLOCKWISE;\n\tif(dot(a,b) < -EPS)return ONLINE_BACK;\n\tif(a.norm() < b.norm())return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\n\n//??????????????????\nbool intersect(Point p1, Point p2, Point p3,Point p4){\n\treturn ccw(p1,p2,p3)*ccw(p1,p2,p4) <= 0 && ccw(p3,p4,p1)*ccw(p3,p4,p2) <= 0;\n}\n\nbool intersect(Segment s1,Segment s2){\n\treturn intersect(s1.p1,s1.p2, s2.p1,s2.p2);\n}\n\n//??????\nPoint getCrossPoint(Segment s1, Segment s2){\n\tVector base = s2.p2 - s2.p1;\n\tdouble d1 = abs(cross(base,s1.p1 - s2.p1));//?´??????§?¶????\n\tdouble d2 = abs(cross(base,s1.p2 - s2.p1));\n\tdouble t = d1 / (d1+d2);\n\treturn s1.p1 + (s1.p2 - s1.p1)*t;\n}\n\n//{???,??´???,??????}^2????????¢\ndouble getDistance(Point a,Point b){\n\treturn abs(a-b);\n}\n\ndouble getDistanceLP(Line l, Point p){\n\treturn abs(cross(l.p2 - l.p1, p-l.p1) / abs(l.p2 - l.p1));\n}\n\ndouble getDistanceSP(Segment s,Point p){\n\tif(dot(s.p2 - s.p1, p-s.p1) < 0.0) return abs(p-s.p1);\n\tif(dot(s.p1 - s.p2, p-s.p2) < 0.0) return abs(p-s.p2);\n\treturn getDistanceLP(s,p);\n}\n\ndouble getDistance(Segment s1, Segment s2){\n\tif(intersect(s1,s2)) return 0.0;\n\treturn min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n\t\t\t\t\t\t min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\n\nint main(){\n  cin.tie(0);\n  ios::sync_with_stdio(false);\n\tint q;cin>>q; \n\twhile(q--){\n\t\tint a,b,c,d,e,f,g,h;\n\t\tcin>>a>>b>>c>>d>>e>>f>>g>>h;\n\t\tcout << fixed << setprecision(8) << getDistance(Segment(a,b,c,d),Segment(e,f,g,h)) << endl;\n\t}\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<iomanip>\n#include<algorithm>\n#include<cmath>\nusing namespace std;\n#define FOR(i,a,b) for(int i=(a);i<(b);i++)\n#define REP(i,n) for(int i=0;i<(n);i++)\n#define PII pair<int,int>\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n\nclass Point\n{\npublic:\n\tdouble x, y;\n\tPoint(double X = 0, double Y = 0)\n\t{\n\t\tx = X;\n\t\ty = Y;\n\t}\n\tPoint operator +(const Point &p)const { return Point(x + p.x, y + p.y); };\n\tPoint operator -(const Point &p)const { return Point(x - p.x, y - p.y); };\n\tPoint operator *(const double a)const { return Point(x*a, y*a); };\n\tPoint operator /(const double a)const { return Point(x / a, y / a); };\n\tdouble norm()const { return x*x + y*y; };\n\tdouble length()const { return sqrt(norm()); };\n\tdouble dot(const Point &p)const { return x*p.x + y*p.y; };\n\tdouble cross(const Point &p)const { return x*p.y - y*p.x; };\n\tbool operator ==(const Point &p)const\n\t{\n\t\treturn fabs(x - p.x)<EPS &&fabs(y - p.y)<EPS;\n\t}\n\tfriend ostream& operator <<(ostream& os, const Point &p);\n\tint CCW(Point p1, Point p2)\n\t{\n\t\tPoint p0(x, y);\n\t\tPoint V1 = p1 - p0;\n\t\tPoint V2 = p2 - p0;\n\t\tif (V1.cross(V2) > 0.0)return -1;\n\t\telse if (V1.cross(V2) < 0.0)return 1;\n\t\telse if (V1.dot(V2) < 0.0)return -2;\n\t\telse if (V1.norm() < V2.norm())return 2;\n\t\treturn 0;\n\t}\n};\ntypedef Point Vector;\n\nostream& operator <<(ostream& os, const Point &p)\n{\n\treturn os << \"(\" << p.x << \",\" << p.y << \")\";\n}\n\nclass Segment\n{\npublic:\n\tPoint p1, p2;\n\tSegment(double x1, double y1, double x2, double y2)\n\t{\n\t\tp1.x = x1;\n\t\tp1.y = y1;\n\t\tp2.x = x2;\n\t\tp2.y = y2;\n\t}\n\tdouble GetLength()\n\t{\n\t\tPoint temp = p2 - p1;\n\t\treturn temp.length();\n\t}\n\tdouble GetDistanceSeg(double X, double Y)\n\t{\n\t\tPoint p(X, Y);\n\t\tPoint a = p2 - p1;\n\t\tPoint b = p - p1;\n\t\tPoint c = p1 - p2;\n\t\tPoint d = p - p2;\n\t\tif (a.dot(b) < 0.0)return b.length();\n\t\tif (c.dot(d) < 0.0)return d.length();\n\t\treturn GetDistanceLine(X, Y);\n\t}\n\tdouble GetDistanceLine(double X, double Y)\n\t{\n\t\tPoint t(X, Y);\n\t\tPoint a = p2 - p1;\n\t\tPoint b = t - p1;\n\t\treturn abs(a.cross(b) / a.length());\n\t}\n\tbool IsIntersect(Segment &s)\n\t{\n\t\tint s1, s2;\n\t\ts1 = p1.CCW(p2, s.p1)*p1.CCW(p2, s.p2);\n\t\ts2 = s.p1.CCW(s.p2, p1)*s.p1.CCW(s.p2, p2);\n\t\treturn s1 <= 0 && s2 <= 0;\n\t}\n\tbool IsOrthogonal(const Segment &s)\n\t{\n\t\tVector t1 = p2 - p1;\n\t\tVector t2 = s.p2 - s.p1;\n\t\treturn equals(0.0, t1.dot(t2));\n\t}\n\tbool IsParallel(const Segment &s)\n\t{\n\t\tVector t1 = p2 - p1;\n\t\tVector t2 = s.p2 - s.p1;\n\t\treturn equals(0.0, t1.cross(t2));\n\t}\n\tPoint GetProjection(double X, double Y)const\n\t{\n\t\tVector V = p2 - p1;\n\t\tPoint P(X, Y);\n\t\tPoint ret = V*(V.dot(P - p1) / V.norm());\n\t\treturn ret + p1;\n\t}\n\tPoint GetReflect(double X, double Y)\n\t{\n\t\tPoint t(X, Y);\n\t\tPoint Pro = GetProjection(X, Y);\n\t\tVector dV = Pro - t;\n\t\treturn t + dV*2.0;\n\t}\n};\ntypedef Segment Line;\n\nclass Circle\n{\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point C = Point(), double R = 0)\n\t{\n\t\tc = C;\n\t\tr = R;\n\t}\n};\n\nint main()\n{\n\tint q;\n\tcin >> q;\n\tREP(i, q)\n\t{\n\t\tint x0, y0, x1, y1, x2, y2, x3, y3;\n\t\tcin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n\t\tSegment s1(x0, y0, x1, y1), s2(x2, y2, x3, y3);\n\t\tdouble ans;\n\t\tif (s1.IsIntersect(s2))ans = 0;\n\t\telse {ans = min({ s2.GetDistanceSeg(x0, y0), s2.GetDistanceSeg(x1, y1),s1.GetDistanceSeg(x2, y2), s1.GetDistanceSeg(x3, y3) });}\n\t\tcout << fixed << setprecision(10) << ans << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "/**\n * Computing Geometry Library\n * @author Sshwy\n */\n#include<bits/stdc++.h>\nusing namespace std;\n#define pb push_back\n#define FOR(i,a,b) for(int i=(a);i<=(b);++i)\n#define ROF(i,a,b) for(int i=(a);i>=(b);--i)\n\nnamespace cg{\n    typedef long double vtyp;\n    const vtyp eps = 1e-9;\n    bool isZero(vtyp x){ return -eps < x && x < eps; }\n    bool equal(vtyp x, vtyp y){ return isZero(x-y); }\n    bool lt(vtyp x,vtyp y){ return !equal(x,y) && x<y; }\n    bool gt(vtyp x,vtyp y){ return !equal(x,y) && x>y; }\n    struct vec {\n        vtyp x,y;\n        vec(){ x = y = 0; }\n        vec(vtyp _x, vtyp _y){ x = _x, y = _y; }\n        vec operator+(const vec V) const { return vec(x+V.x, y+V.y); }\n        vec operator-() const { return vec(-x, -y); }\n        vec operator-(const vec V) const { return *this + (-V); }\n        vec operator*(const vtyp a) const { return vec(x*a, y*a); }\n        friend vec operator*(const vtyp a, const vec v){ return v*a; }\n        vec operator/(const vtyp a) const { return vec(x/a, y/a); }\n        operator bool() const { return !(isZero(x) && isZero(y)); }\n        bool operator==(const vec V) const { return bool(*this-V) == 0; }\n        vtyp length(){ return sqrt(x*x + y*y); }\n        /**\n         * 方向角，单位 rad\n         */\n        vtyp ang() const { return atan2(y,x); }\n        /**\n         * 方向向量\n         * @return 0向量或者一个单位向量\n         */\n        vec dir() const {\n            if(*this){\n                vtyp ang = atan2(y,x);\n                return vec(cos(ang), sin(ang));\n            } else return vec(0,0);\n        }\n        void read(){ scanf(\"%Lf%Lf\",&x,&y); }\n    };\n    typedef vec point;\n\n    struct line {\n        point p1, p2;\n        line(point _p1, point _p2){ p1 = _p1, p2 = _p2; }\n    };\n    typedef line segment;\n\n    istream & operator>>(istream & in, vec & v){ \n        return in >> v.x >> v.y, in; \n    }\n    ostream & operator<<(ostream & out, const vec & v){ \n        return out << v.x << \" \" << v.y, out;\n    }\n    ifstream & operator>>(ifstream & in, vec & v){ \n        return in >> v.x >> v.y, in; \n    }\n    ofstream & operator<<(ofstream & out, const vec & v){ \n        return out << v.x << \" \" << v.y, out;\n    }\n    /**\n     * 点积\n     * a dot b == |a||b|cos theta\n     */\n    vtyp dot(const vec a, const vec b){ return a.x*b.x + a.y*b.y; }\n    /**\n     * 叉积\n     * 两个向量围成的有向面积\n     */\n    vtyp det(const vec a, const vec b){ return a.x*b.y - a.y*b.x; }\n\n\n    /**\n     * 投影\n     * @param L 直线\n     * @param p 要求投影的点\n     * @return p 在 L 上的投影坐标（即垂足）\n     */\n    point projection(line L, point p){\n        vec d = L.p2 - L.p1;\n        return L.p1 + (dot(d, p-L.p1)/d.length()) * d.dir();\n    }\n    /**\n     * 对称点\n     * @param L 直线\n     * @param p 点\n     * @return p 关于直线 L 的对称点\n     */\n    point reflection(line L, point p){\n        point o = projection(L,p);\n        return vtyp(2)*(o-p)+p;\n    }\n\n    /**\n     * 判断向量是否平行\n     */\n    bool parallel(vec a, vec b){ return isZero(det(a,b)); }\n    /**\n     * 判断直线是否平行\n     */\n    bool parallel(line a, line b){ return parallel(a.p2-a.p1, b.p2-b.p1); }\n    /**\n     * 判断向量是否垂直\n     */\n    bool orthogonal(vec a, vec b){ return isZero(dot(a,b)); }\n    /**\n     * 判断直线是否垂直\n     */\n    bool orthogonal(line a, line b){ return orthogonal(a.p2-a.p1, b.p2-b.p1); }\n    /**\n     * 判断点 p 是否在直线L上\n     */\n    bool online(line L, point p){\n        return parallel(L.p2-L.p1,p-L.p1);\n    }\n    /**\n     * 判断两直线是否重合\n     */\n    bool coincident(line a, line b){\n        return online(a, b.p1) && online(a, b.p2);\n    }\n    /**\n     * 判断点 p 是否与有向线段共线且在反向延长线上\n     */\n    bool online_back(segment sl, point p){\n        vec a = sl.p2-sl.p1, b = p-sl.p1;\n        return parallel(a,b) && lt(dot(a,b),0);\n    }\n    /**\n     * 判断点 p 是否与有向线段共线且在正向延长线上\n     */\n    bool online_front(segment sl, point p){\n        vec a = sl.p1-sl.p2, b = p-sl.p2; // 倒过来\n        return parallel(a,b) && lt(dot(a,b),0);\n    }\n    /**\n     * 判断点 p 是否在线段上（含端点）\n     */\n    bool on_segment(segment sl, point p){\n        return online(sl,p) && !online_back(sl,p) && !online_front(sl,p);\n    }\n    /**\n     * 两条直线的交点\n     * 需确保两条直线不平行\n     */\n    point intersection(line a, line b){\n        assert(!parallel(a,b));\n        vtyp x = det(a.p1-b.p1,b.p2-b.p1);\n        vtyp y = det(b.p2-b.p1,a.p2-b.p1);\n        return a.p1 + (a.p2-a.p1)*x/(x+y);\n    }\n    /**\n     * 判断两个线段是否相交（含边界）\n     */\n    bool check_segment_intersection(segment a, segment b){\n        if(cg::coincident(a,b)){\n            if(on_segment(a,b.p1) \n                    || on_segment(a,b.p2)\n                    || on_segment(b,a.p1) \n                    || on_segment(b,a.p2))return true;\n            else return false;\n        }else if(cg::parallel(a,b)){\n            return false;\n        }else{\n            point o = cg::intersection(a,b);\n            if(cg::on_segment(a,o) && cg::on_segment(b,o))return true;\n            else return false;\n        }\n    }\n    /**\n     * 两个点的距离\n     */\n    vtyp distance(point a,point b){ return (b-a).length(); }\n    /**\n     * 两个线段的距离\n     */\n    vtyp distance(segment a,segment b){\n        if(check_segment_intersection(a,b))return 0;\n        vtyp res = distance(a.p1,b.p1);\n        res = min(res,distance(a.p1,b.p2));\n        res = min(res,distance(a.p2,b.p1));\n        res = min(res,distance(a.p2,b.p2));\n        point o;\n        if(o = projection(b,a.p1), on_segment(b,o)){\n            res = min(res,distance(a.p1,o));\n        }\n        if(o = projection(b,a.p2), on_segment(b,o)){\n            res = min(res,distance(a.p2,o));\n        }\n        if(o = projection(a,b.p1), on_segment(a,o)){\n            res = min(res,distance(b.p1,o));\n        }\n        if(o = projection(a,b.p2), on_segment(a,o)){\n            res = min(res,distance(b.p2,o));\n        }\n        return res;\n    }\n}\nusing cg::point;\nusing cg::line;\nusing cg::segment;\n\n\nint main(){\n    int q;\n    cin>>q;\n    FOR(i,1,q){\n        point p[4];\n        cin>>p[0]>>p[1]>>p[2]>>p[3];\n        segment s1(p[0],p[1]),s2(p[2],p[3]);\n        cout<<setiosflags(ios::fixed) <<setprecision(10)\n            <<cg::distance(s1,s2)<<endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\nconst int MAXN = 2e5 + 5;\ntypedef long long ll;\ntypedef long double ld;\ntypedef unsigned long long ull;\ntemplate <typename T> void chkmax(T &x, T y) {x = max(x, y); }\ntemplate <typename T> void chkmin(T &x, T y) {x = min(x, y); } \ntemplate <typename T> void read(T &x) {\n\tx = 0; int f = 1;\n\tchar c = getchar();\n\tfor (; !isdigit(c); c = getchar()) if (c == '-') f = -f;\n\tfor (; isdigit(c); c = getchar()) x = x * 10 + c - '0';\n\tx *= f;\n}\ntemplate <typename T> void write(T x) {\n\tif (x < 0) x = -x, putchar('-');\n\tif (x > 9) write(x / 10);\n\tputchar(x % 10 + '0');\n}\ntemplate <typename T> void writeln(T x) {\n\twrite(x);\n\tputs(\"\");\n}\nnamespace LibraryOfComputationalGeometry {\n\ttypedef long double ld;\n\tconst ld eps = 1e-9;\n\tstruct point {ld x, y; };\n\tstruct line {point a, b; }; //Be sure that a and b are distinct.\n\tvoid ReadPointInt(point &a) {read(a.x), read(a.y); }\n\tvoid PrintPoint(point a) {printf(\"%.10Lf %.10Lf\\n\", a.x, a.y); }\n\tvoid ReadLineInt(line &a) {ReadPointInt(a.a), ReadPointInt(a.b); }\n\tvoid CerrPoint(point a) {cerr << a.x << ' ' << a.y << endl; }\n\tvoid CerrLine(line a) {cerr << a.a.x << ' ' << a.a.y << ' ' << a.b.x << ' ' << a.b.y << endl; }\n\tpoint operator + (point a, point b) {return (point) {a.x + b.x, a.y + b.y}; }\n\tpoint operator - (point a, point b) {return (point) {a.x - b.x, a.y - b.y}; }\n\tpoint operator * (point a, ld b) {return (point) {a.x * b, a.y * b}; }\n\tld dot(point a, point b) {return a.x * b.x + a.y * b.y; }\n\tld operator * (point a, point b) {return a.x * b.y - a.y * b.x; }\n\tld moo(point a) {return sqrtl(a.x * a.x + a.y * a.y); }\n\tld dist(point a, point b) {return moo(a - b); }\n\tpoint unit(point a) {\n\t\tld tmp = moo(a);\n\t\tassert(tmp > eps);\n\t\treturn a * (1.0 / tmp);\n\t}\n\tpoint Projection(point x, line a) {\n\t\tld d = dot(x - a.a, a.b - a.a) / dist(a.a, a.b);\n\t\treturn a.a + unit(a.b - a.a) * d;\n\t}\n\tpoint Reflection(point x, line a) {\n\t\treturn Projection(x, a) * 2 - x;\n\t}\n\tbool OnLine(point x, line a) {\n\t\treturn fabsl((a.b - a.a) * (x - a.a)) <= eps;\n\t}\n\tbool OnSegment(point x, line a) {\n\t\treturn dist(x, a.a) + dist(x, a.b) - dist(a.a, a.b) <= eps;\n\t}\n\tbool Parallel(line a, line b) {\n\t\treturn fabsl((a.b - a.a) * (b.b - b.a)) <= eps;\n\t}\n\tbool Orthogonal(line a, line b) {\n\t\treturn fabsl(dot(a.b - a.a, b.b - b.a)) <= eps;\n\t}\n\tbool SegmentIntersect(line a, line b) {\n\t\tif (Parallel(a, b)) return OnSegment(b.a, a) || OnSegment(b.b, a) || OnSegment(a.a, b) || OnSegment(a.b, b);\n\t\tld tmp = ((a.b - a.a) * (b.a - a.a)) * ((a.b - a.a) * (b.b - a.a));\n\t\tld tnp = ((b.b - b.a) * (a.a - b.a)) * ((b.b - b.a) * (a.b - b.a));\n\t\treturn tmp <= eps && tnp <= eps;\n\t}\n\tpoint LineIntersection(line a, line b) {\n\t\tassert(!Parallel(a, b));\n\t\tld tmp = (b.a - a.a) * (b.b - a.a);\n\t\tld tnp = (b.b - a.b) * (b.a - a.b);\n\t\treturn (a.a * tnp + a.b * tmp) * (1 / (tmp + tnp));\n\t}\n\tld DistanceToSegment(point x, line a) {\n\t\tpoint tmp = Projection(x, a);\n\t\tif (OnSegment(tmp, a)) return dist(x, tmp);\n\t\telse return min(dist(x, a.a), dist(x, a.b));\n\t}\n}\nint main() {\n\tusing namespace LibraryOfComputationalGeometry;\n\tint q; read(q);\n\twhile (q--) {\n\t\tline a, b;\n\t\tReadLineInt(a);\n\t\tReadLineInt(b);\n\t\tif (SegmentIntersect(a, b)) printf(\"%.10Lf\\n\", (ld) 0.0);\n\t\telse printf(\"%.10Lf\\n\", min(min(DistanceToSegment(a.a, b), DistanceToSegment(a.b, b)),\n\t\t\t\t\t    min(DistanceToSegment(b.a, a), DistanceToSegment(b.b, a))));\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n#define EPS 1e-10\n#define equals(a,b) (fabs( (a) - (b) )< EPS )\ntypedef struct point{\n\tdouble x,y;\n\tpoint(){};\n\tpoint(double x ,double y):x(x),y(y){};\n\tpoint operator + (point &p){ return point(x+p.x,y+p.y);\t}\n\tpoint operator - (point &p){ return point(x-p.x,y-p.y);\t}\n\tpoint operator * (point &p){ return point(x*p.x-y*p.y,x*p.y+y*p.x) ;}\n\tpoint operator * (double a){ return point(x*a,y*a);\t}\n\tpoint operator / (double a){ return point(x/a,y/a);\t}\n\t\n\tdouble abs() { return sqrt(norm()); }\n\tdouble norm() { return x*x+y*y; }\n\t\n\tbool operator < (const point &p) const { return x!=p.x ? x<p.x : y<p.y; }\n\tbool operator == (const point &p) const { return fabs(x-p.x)<EPS && fabs(y-p.y)<EPS; }\n}point;\ndouble abs(point a){return a.abs();}\ndouble norm(point a){return a.norm();}\n\ntypedef complex<double> C;\ntypedef struct { point s,e;} line;\n\nC convert(point a){ return C(a.x,a.y); }\npoint convert( C a){ return point(a.real(),a.imag() );}\ndouble dot(point a,point b){ return a.x*b.x+a.y*b.y ; } //内積　a・b\ndouble cross(point a,point b){ return a.x*b.y - a.y*b.x ; }//外積(z成分)　a×b\npoint vec(line l){return l.e-l.s;}\nline make(point s,point e){\n\tline res; res.s=s; res.e=e;\n\treturn res;\n}\npoint make(){ \n\tdouble x,y; cin>>x>>y;\n       \treturn point(x,y);\n}\n//直交\nbool isorthogonal(point a,point b){ return equals(dot(a,b), 0.0); }\nbool isorthogonal(line l1,line l2){ return isorthogonal(vec(l1),vec(l2)); }\n//平行\nbool isparallel(point a,point b){ return equals(cross(a,b),0.0); }\nbool isparallel(line l1,line l2){ return isparallel(vec(l1),vec(l2)); }\n//射影\npoint project(line s,point p){\n\tpoint base = vec(s);\n\tdouble r=dot(p-s.s,base)/base.norm();\n\tbase = base*r;\n\treturn s.s+base;\n}\n//反射\npoint reflect(line l,point p){\n\tpoint tmp=project(l,p)-p;\n\ttmp= tmp*2.0;\n\treturn p+tmp;\n\n}\n//交差判定\n\nint ccw(point p0,point p1,point p2){\n\tpoint a = p1-p0;\n\tpoint b = p2-p0;\nif(cross(a,b)>EPS) return 1;//counter_clockwise\nif(cross(a,b)<-EPS) return -1;//clockwise\nif(dot(a,b)<-EPS)return 2;//online_back\nif(a.norm()<b.norm() ) return -2;//online_front\nreturn 0;//on_segment\n}\n// line p1-p2 line p3-p4\nbool intersect(point p1,point p2,point p3,point p4){\n\treturn (ccw(p1,p2,p3)*ccw(p1,p2,p4)<=0 && ccw(p3,p4,p1)*ccw(p3,p4,p2) ); \n}\n// line l1,l2\nbool intersect(line l1,line l2){ return intersect(l1.s,l1.e,l2.s,l2.e); }\n\n\n//距離\n//point-point\ndouble distance(point a,point b){ return abs(a-b); }\n//point-line(直線）\ndouble distance2(line l,point p){\n\treturn abs(cross(vec(l),p-l.s)/abs(l.e-l.s));\n}\n//point-line(線分)\ndouble distance(line l,point p){\n\tif( dot(vec(l),p-l.s) <0.0 ) return abs(p-l.s);\n\tif( dot(l.s-l.e,p-l.e) <0.0 ) return abs(p-l.e);\n\treturn distance2(l,p);\n}\n//line-line\ndouble distance(line l1,line l2){\n\tif(intersect(l1,l2)) return 0.0;\n\treturn min(min(distance(l1,l2.s),distance(l1,l2.e) ), min(distance(l2,l1.s),distance(l2,l1.e) ) );\n}\n\n//交点\npoint crosspoint(line l1,line l2){\n\tpoint base = vec(l2);\n\tdouble d1 = abs(cross(base,l1.s-l2.s) );\n\tdouble d2 = abs(cross(base,l1.e-l2.s) );\n\tdouble t = d1/(d1+d2);\n\tpoint tmp = vec(l1)*t;\n\treturn l1.s+tmp;\n}\n\nint main(){\nint q;\ncin>>q;\nfor(int i=0;i<q;i++){\n\tpoint p0=make(),p1=make(),p2=make(),p3=make();\n\tline l0 = make(p0,p1) ,l1 = make(p2,p3);\n\tprintf(\"%0.10lf\\n\",distance(l0,l1) );\n}\n\nreturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef double R;//double long double ??????????????? cmath?????¢??°??????????????????????????????????????????????????§????????????\ntypedef complex<R> Point;\ntypedef pair<Point , Point> Line;\ntypedef pair<Point ,R > Circle;\ntypedef vector<Point> Poly;\n\n#define EPS (1e-10)//??????\n#define EQ(a,b) (abs((a)-(b)) < EPS)//??????????????°???????????????\n#define EQV(a,b) ( EQ((a).real(), (b).real()) && EQ((a).imag(), (b).imag()) )//????????????????????????????????????\n#define ft first\n#define sd second\n#define pb push_back\nint dy[]={0, 0, 1, -1, 0};\nint dx[]={1, -1, 0, 0, 0};\n \n#define FOR(i,a,b) for (int i=(a);i<(b);i++)\n#define RFOR(i,a,b) for (int i=(b)-1;i>=(a);i--)\n#define REP(i,n) for (int i=0;i<(n);i++)\n#define RREP(i,n) for (int i=(n)-1;i>=0;i--)\n\nR dot(Point a,Point b){\n    return (a.real() * b.real() + a.imag() * b.imag());\n}\nR cross(Point a,Point b){\n    return (a.real() * b.imag() - a.imag() * b.real());\n}\n\n\n\n\nbool is_orthogonal(Line a,Line b){//2??´????????´?????????\n    return EQ(dot(a.ft - a.sd,b.ft - b.sd),0.0);\n}\nbool is_parallel(Line a,Line b){//2??´??????????????????\n    return EQ(cross(a.ft - a.sd,b.ft - b.sd),0.0);\n}\n\n\n\n////////////////////????????????\nint ccw(Point a,Point b,Point c){//ok\n    b -= a; c -= a;\n    if(cross(b,c) > EPS) return 1;//a???b??§???????¨???¨???????????????b???c\n    if(cross(b,c) < -EPS) return -1;//a???b??§????¨???¨???????????????b???c\n    if(dot(b,c) < -EPS) return 2;//c--a--b on same line\n    if(norm(c) - norm(b) > EPS) return -2;//a--b--c(abs??????????????????????????????????????????????????????????)\n    return 0;//a--c--b?????????b==c\n}\n\nbool is_intersection_ll(Line l,Line m){//???????????´??????????????????\n    return abs(cross(l.sd - l.ft,m.sd - m.ft)) > EPS || //????????§??????\n        abs(cross(l.sd - l.ft,m.ft - l.ft)) < EPS; //?????????????????????\n}\n\nbool is_intersection_ls(Line l,Line s){//??´???l??¨??????s???????????????\n    return cross(l.sd - l.ft, s.ft-l.ft)*       // s[0] is left of l\n        cross(l.sd - l.ft, s.sd - l.ft) < EPS; // s[1] is right of l\n}\n\nbool is_intersection_lp(Line l,Point p){//??´???l??¨???p???????????????\n    return abs(cross(l.sd - p,l.ft - p));\n}\n\nbool is_intersection_ss(Line a,Line b){//??????????????????????????????ok\n    return ccw(a.ft,a.sd,b.ft)*ccw(a.ft,a.sd,b.sd) <= 0 && ccw(b.ft,b.sd,a.ft)*ccw(b.ft,b.sd,a.sd) <= 0;\n}\n\nbool is_intersection_sp(Line s,Point p){//????????¨?????????????????? ????§??????????????????¨\n    return abs(s.ft - p) + abs(s.sd - p) - abs(s.ft - s.sd) < EPS;\n}\n\n/////////////?????¢\nR dis_lp(Line l,Point p){//??´???l??¨???p????????¢\n    return abs(cross(l.sd - l.ft,p - l.ft)) / abs(l.sd - l.ft);\n}\n\nR dis_ll(Line l,Line m){//???????????´???????????¢\n    return is_intersection_ll(l,m) ? 0.0 : dis_lp(l,m.ft);\n}\n\nR dis_ls(Line l,Line s){//??´???l??¨??????s????????¢\n    if(is_intersection_ls(l,s)) return 0.0;\n    return min(dis_lp(l,s.ft),dis_lp(l,s.sd));\n}\n\nR dis_sp(Line s,Point p){//??????s??¨???p????????¢\n    if(dot(s.sd - s.ft,p - s.ft) < EPS) return abs(p - s.ft);\n    if(dot(s.ft - s.sd,p - s.sd) < EPS) return abs(p - s.sd);\n    return dis_lp(s,p);\n}\n\nR dis_ss(Line s,Line t){//???????????????????????¢\n    if(is_intersection_ss(s,t)) return 0.0;\n    return min(min(dis_sp(s,t.ft),dis_sp(s,t.sd)),\n            min(dis_sp(t,s.ft),dis_sp(t,s.sd)));\n}\n\n\n\n//////////////?°???±??¨????°?\nPoint projection(Line l,Point p){//?°???±????±???????\n    R t = dot(p - l.ft,l.ft - l.sd) / norm(l.ft - l.sd);\n    return l.ft + t * (l.ft - l.sd);\n}\n\nPoint reflection(Line l,Point p){//????°?????±???????\n    return p + 2.0 * (projection(l,p) - p);\n}\n\n\n\n\n//////////////??????(????????????????¨???????????????¨??????????????????????????????????????£??????)\n\nPoint intersection_ll(Line l,Line m){//????????????????????????????????????????????????\n    R A = cross(l.sd - l.ft,m.sd - m.ft);\n    R B = cross(l.sd - l.ft,l.sd - m.ft);\n    if(abs(A) < EPS && abs(B) < EPS) return m.ft;//?????????\n    //if(abs(A) < EPS)assert(false);//????????§????????????\n    return m.ft + B / A * (m.sd - m.ft);\n}\n\nLine intersection_of_two_circles(Circle c1,Circle c2){//ok ????????????????????????Line?????\\????????????(r1 + r2 > sqrt((x1 - x2) ^ 2 + (y1 - y2) ^ 2))???????????????????????????\n    R a =  abs(c2.ft - c1.ft);\n    R b = c1.sd;\n    R c = c2.sd;\n\n    R rc = (a  * a + b * b - c * c) / (2.0 * a);\n    R rs = sqrt(b * b - rc * rc);//C++ ??§???????????????????????????????????§???????????????sqrt ????????? float ?????????????????? long double ????????????????????????????????????????????¨?????§???????????? C ????????°????????§??????sqrt ????????? double ??????????????£??????????????????\n    Point diff = (c2.ft - c1.ft) / a;\n\n    Line p ;\n    p.ft = c1.ft + diff * rc + diff * Point(0,1) * rs;\n    p.sd = c1.ft + diff * rc + diff * Point(0,-1) * rs;\n\n    return p;\n}\n\n/*\nLine conver_line(Line a,Point maxi,Point mini){//??????????????´??????????????? maxi???????????????????????? mini?????????\n\n    if(abs(dot(a.sd - a.ft,Point(1.0,0.0))) < EPS){//??????x???????????´??????\n        ;\n    }\n}*/\n\n\n/////////////////////////polygon\n\n#define currP(P,i) P[i]//????????????\n#define nextP(P,i) P[(i + 1)%P.size()]//?¬??????????\n\nint is_contains_p_in_Poly(Poly po,Point p){//??????????§???¢????????¨(1)????¢????(-1)????????¨(0)??????????????????????????????\n    bool in = false;\n    REP(i,po.size()){\n        Point a = currP(po,i) - p,b = nextP(po,i) - p;\n        if(a.imag() > b.imag())swap(a,b);\n        if(a.imag() < EPS && -EPS < b.imag())\n            if(cross(a,b) < -EPS) in = !in;\n        if(abs(cross(a,b)) == 0.0 && dot(a,b) < EPS)return  -1;\n    }\n    return in;\n}\n\nR area2(Poly po){//????§???¢?????¢????????????????±???????\n    R A = 0.0;\n    REP(i,po.size())\n        A += cross(currP(po,i),nextP(po, i));\n    return A;\n}\n\n\n\n\n///////////////////////////???\n\nPoly convex_hull(Poly ps){\n    int n = ps.size(),k = 0;\n    Poly ch(2*n);\n    for(int i = 0;i < n;ch[k++] = ps[i++])// lower-hull\n        while(k >= 2 && ccw(ch[k - 2],ch[k - 1],ps[i]) <= 0) --k;\n    for(int i = n - 2,t = k + 1;i >= 0;ch[k++] = ps[i--])//upper-hull\n        while(k >= t && ccw(ch[k - 2],ch[k - 1],ps[i]) <= 0) --k;\n    ch.resize(k - 1);\n    return ch;\n}\n\n#define prevP(P, i) P[(i+P.size()-1) % P.size()]\nbool isconvex(Poly P){\n    for(int i = 0;i < P.size();++i)\n        if(ccw(prevP(P,i),currP(P,i),nextP(P,i)) > 0) return false;\n    return true;\n}\n\nint main(void){\n    int q;\n    cin >> q;\n    REP(i,q){\n       int x1,x2,x3,x4,y1,y2,y3,y4;\n       cin >> x1 >> y1 >> x2 >> y2 >> x3 >> y3 >> x4 >> y4;\n       Line s1,s2;\n       s1 = Line(Point(x1,y1),Point(x2,y2));s2 = Line(Point(x3,y3),Point(x4,y4));\n       R d = dis_ss(s1,s2);\n       printf(\"%0.10lf\\n\",d);\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define range(i,a,b) for(int i = (a); i < (b); i++)\n#define rep(i,b) for(int i = 0; i < (b); i++)\n#define all(a) (a).begin(), (a).end()\n#define debug(x) cout << \"debug \" << x << endl;\nconst int INF = 100000000;\nusing namespace std;\n\ntypedef complex<double> Point;\ntypedef Point Vector;\n//???????????¨????§???????\nstruct Segment{ Point p1, p2; };\n//??´????????¨????§???????\ntypedef Segment Line;\n//????§???¢?????¨????§???????\ntypedef vector<Point> Polygon;\n\nnamespace std{\n    bool operator < (const Point &a, const Point &b){\n        return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n    }\n    bool operator == (const Point &a, const Point &b){\n        return a.real() == b.real() && a.imag() == b.imag();\n    }\n}\n\nclass Circle{\npublic:\n    Point c;\n    double r;\n    Circle(Point c = Point(), double r = 0.0): c(c), r(r) {}\n};\n\n// ?¨±???????????????\n#define EPS (1e-10)\n// 2??????????????????????????????????????????\n#define EQ(a,b) (abs((a)-(b)) < EPS)\n// 2??????????????????????????????????????????\n#define EQV(a,b) ( EQ((a).real(), (b).real()) && EQ((a).imag(), (b).imag()) )\n\n// ????????????a?????¶??????????±???????\n//double length = abs(a);\n\n// 2???a,b???????????¢????±???????\n//double distance = abs(a-b);\n\n/*\n// ????????????a?????????????????????????±???????\nPoint b = a / abs(a);\n\n// ????????????a?????????????????????n1,n2????±???????\nPoint n1 = a * Point(0, 1);\nPoint n2 = a * Point(0, -1);\n*/\n\n// ?????? (dot product) : a???b = |a||b|cos??\ndouble dot(Point a, Point b) {\n    return (a.real() * b.real() + a.imag() * b.imag());\n}\n\n// ?????? (cross product) : a??b = |a||b|sin??\ndouble cross(Point a, Point b) {\n    return (a.real() * b.imag() - a.imag() * b.real());\n}\n\n// 2??´????????´????????? : a??\\b <=> dot(a, b) = 0\nint isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n    return EQ( dot(a1-a2, b1-b2), 0.0 );\n}\n\n// 2??´?????????????????? : a//b <=> cross(a, b) = 0\nint isParallel(Point a1, Point a2, Point b1, Point b2) {\n    return EQ( cross(a1-a2, b1-b2), 0.0 );\n}\n\n// ???c?????´???a,b????????????????????????\nint isPointOnLine(Point a, Point b, Point c) {\n    return EQ( cross(b-a, c-a), 0.0 );\n}\n\n// ???a,b???????????´?????¨???c??¨????????¢\ndouble distanceLPoint(Point a, Point b, Point c) {\n    return abs(cross(b-a, c-a)) / abs(b-a);\n}\n\n// ???a,b???????????¨??????????????¨???c??¨????????¢\ndouble distanceLsPoint(Point a, Point b, Point c) {\n    if ( dot(b-a, c-a) < EPS ) return abs(c-a);\n    if ( dot(a-b, c-b) < EPS ) return abs(c-b);\n    return abs(cross(b-a, c-a)) / abs(b-a);\n}\n\n// a1,a2???????????¨??????????????¨b1,b2???????????¨???????????????????????????\nbool isIntersectedLs(Point a1, Point a2, Point b1, Point b2) {\n    return ( cross(a2-a1, b1-a1) * cross(a2-a1, b2-a1) < EPS ) &&\n        ( cross(b2-b1, a1-b1) * cross(b2-b1, a2-b1) < EPS );\n}\n\n// a1,a2???????????¨??????????????¨b1,b2???????????¨??????????????????????¨????\nPoint intersectionLs(Point a1, Point a2, Point b1, Point b2) {\n    Point b = b2-b1;\n    double d1 = abs(cross(b, a1-b1));\n    double d2 = abs(cross(b, a2-b1));\n    double t = d1 / (d1 + d2);\n\n    return a1 + (a2-a1) * t;\n}\n\n// a1,a2???????????´?????¨b1,b2???????????´??????????????????\nbool isIntersectedL(Point a1, Point a2, Point b1, Point b2) {\n    return !EQ( cross(a1-a2, b1-b2), 0.0 );\n}\n\n// a1,a2???????????´?????¨b1,b2???????????´?????????????¨????\nPoint intersectionL(Point a1, Point a2, Point b1, Point b2) {\n    Point a = a2 - a1; Point b = b2 - b1;\n    return a1 + a * cross(b, b1-a1) / cross(b, a);\n}\n\n// ??????s1??¨??????s2????????¢\ndouble distanceLL(Segment s1, Segment s2){\n    if(isIntersectedLs(s1.p1, s1.p2, s2.p1, s2.p2) ) return 0.0;\n    return min(\n            min(distanceLsPoint(s1.p1, s1.p2, s2.p1),\n                distanceLsPoint(s1.p1, s1.p2, s2.p2)),\n            min(distanceLsPoint(s2.p1, s2.p2, s1.p1),\n                distanceLsPoint(s2.p1, s2.p2, s1.p2)) );\n}\n\n// ??????s???????????????p????°???±\nPoint project(Segment s, Point p){\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / norm(base);\n    return Point(s.p1 + base * r);\n}\n\n//??????s???????±??????¨?????????p??????????§°??????\nPoint reflect(Segment s, Point p){\n    return Point(p + (project(s, p) - p) * 2.0);\n}\n\nint main(){\n    int n;\n    cin >> n;\n    while(n--){\n        Segment s[2];\n        rep(i,2){\n            double a, b, c, d;\n            cin >> a >> b >> c >> d;\n            s[i] = Segment{Point(a, b), Point(c, d)};\n        }\n        cout << fixed << setprecision(10) << distanceLL(s[0], s[1]) << endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n\ninline int sign(const double &x){\n    if(x>EPS) return 1;\n    else if(x<-EPS) return -1;\n    return 0;\n}\n\n/*   点  */\nstruct Point{\n    double x,y;\n\n    Point(double x=0,double y=0):x(x),y(y){}\n\n    Point operator + (Point p) { return Point(x+p.x,y+p.y); }\n    Point operator - (Point p) { return Point(x-p.x,y-p.y); }\n    Point operator * (double k) { return Point(k*x,k*y); }\n    Point operator / (double k) { return Point(x/k,y/k); }\n\n    //向量的大小\n    double abs(){ return sqrt(norm()); }\n    double norm() { return x*x+y*y; }\n\n    bool operator < (const Point & p) const{\n        return x!=p.x?x<p.x:y<p.y;\n    }\n\n    bool operator == (const Point & p) const {\n        return fabs(x-p.x)<EPS&&fabs(y-p.y)<EPS;\n    }\n};\n\n//两点间的距离\ndouble getDistance(Point a,Point b){\n    return (a-b).abs();\n}\n\n/*   向量  */\ntypedef Point Vector;\n\n//向量a和b的内积\ndouble dot(Vector a,Vector b){\n    return a.x*b.x+a.y*b.y;\n}\n//向量a和b的外积\ndouble cross(Vector a,Vector b){\n    return a.x*b.y-a.y*b.x;\n}\n\n/*   线段  */\nstruct Segment{\n    Point p1,p2;\n};\n\n/*   直线  */\ntypedef Segment Line;\n\n//点到直线的距离\ndouble getDistanceLP(Line l,Point p){\n    return abs(cross(l.p2-l.p1,p-l.p1)/(l.p2-l.p1).abs());\n}\n\n//点到线段的距离\ndouble getDistanceSP(Segment s,Point p){\n    if(dot(s.p2-s.p1,p-s.p1)<0.0) return (p-s.p1).abs();\n    if(dot(s.p1-s.p2,p-s.p2)<0.0) return (p-s.p2).abs();\n    return getDistanceLP(s,p);\n}\n\n//判断p2与向量p1-p0的位置关系\n\nconst int COUNTER_CLOCKWISE = -1;   //逆时针\nconst int CLOCKWISE = 1;            //顺时针\nconst int ON_SEGMENT = 0;           //在线段上\n\nint ccw(Point p0,Point p1,Point p2){\n    Vector a=p1-p0;\n    Vector b=p2-p0;\n    if(cross(a,b)>EPS) return COUNTER_CLOCKWISE;\n    if(cross(a,b)<-EPS) return CLOCKWISE;\n    return ON_SEGMENT;\n}\n\n//判断线段p1p2与线段p3p4是否相交\nbool intersect(Point p1,Point p2,Point p3,Point p4){\n    return ( ccw(p1,p2,p3)*ccw(p1,p2,p4)<=0 &&\n             ccw(p3,p4,p1)*ccw(p3,p4,p2)<=0 );\n}\n\nbool intersect(Segment s1,Segment s2){\n    return intersect(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n\n//线段与线段的距离\ndouble getDistance(Segment s1,Segment s2){\n    if(intersect(s1,s2)) return 0.0;\n    return min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),\n               min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n}\n\n/* 直线正交\n * 判断向量a，b是否正交 =》a，b的内积为0\n */\nbool isOrthogonal(Vector a,Vector b){\n    return equals(dot(a,b),0.0);\n}\n\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n    return isOrthogonal(a1-a2,b1-b2);\n}\n\n/* 直线平行\n * 判断向量a，b是否平行 =》a，b的内积为0\n */\nbool isParallel(Vector a,Vector b){\n    return equals(cross(a,b),0.0);\n}\n\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n    return isParallel(a1-a2,b1-b2);\n}\n\nstruct Circle{\n    Point c;\n    double r;\n    Circle(Point c = Point() ,double r = 0.0 ):c(c),r(r){}\n};\n\n/*   多边形  */\ntypedef vector<Point> Polygon;\n\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    while(n--){\n        Point p1,p2,p3,p4;\n        scanf(\"%lf%lf%lf%lf%lf%lf%lf%lf\",&p1.x,&p1.y,&p2.x,&p2.y,&p3.x,&p3.y,&p4.x,&p4.y);\n        printf(\"%.10f\\n\",getDistance(Segment{p1,p2},Segment{p3,p4}));\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<vector>\n#include<cmath>\n#include<map>\n#include<set>\n#include<string>\n#include<queue>\n#include<stack>\nusing namespace std;\n#define MON 1000000007\n#define INF (1<<29)\n#define EPS (1e-10)\ntypedef long long Int;\ntypedef pair<Int, Int> P;\n\n#define max(x, y) ((x)>(y)?(x):(y))\n#define min(x, y) ((x)<(y)?(x):(y))\n\n\nclass Vec{\npublic:\n  double x, y;\n  Vec(double x = 0, double y = 0):x(x),y(y){}\n\n  void read(){\n    cin >> x >> y;\n  }\n\n  void print(){\n    printf(\"%.10lf %.10lf\\n\", x, y);\n  }\n  \n  Vec operator+(const Vec &other)\n  {\n    Vec result = *this;\n    result.x += other.x;\n    result.y += other.y;\n    return result;\n  }\n\n  Vec operator-(const Vec &other)\n  {\n    Vec result = *this;\n    result.x -= other.x;\n    result.y -= other.y;\n    return result;\n  }\n\n  Vec operator*(const double &k)\n  {\n    Vec result = *this;\n    result.x *= k;\n    result.y *= k;\n    return result;\n  }\n\n  Vec operator/(const double &k)\n  {\n    Vec result = *this;\n    result.x /= k;\n    result.y /= k;\n    return result;\n  } \n  \n  double cross(const Vec &other)\n  {\n    return x*other.y - y*other.x;\n  }\n\n  double dot(const Vec &other){\n    return x*other.x + y*other.y;\n  }\n  \n  bool operator==(const Vec &other) const\n  {\n    return abs(x - other.x) < EPS && abs(y - other.y) < EPS;\n  }\n\n  double norm()\n  {\n    return sqrt(x*x+y*y);\n  }\n\n  double norm2()\n  {\n    return x*x+y*y;\n  }\n\n  Vec standard(){\n    Vec result = *this;\n    return result/result.norm();\n  }\n};\n\n//ccw:1, cw:-1, other:0\nInt CCW(Vec a, Vec b, Vec c){\n  b = b - a;\n  c = c - a;\n  if(b.cross(c) > EPS)return -1;\n  if(b.cross(c) < -EPS)return 1;\n  return 0;\n}\n\ndouble dist(Vec a, Vec b){\n  return (a-b).norm();\n}\n\t\t\t\n\nclass Line{\npublic:\n  Vec a, b;\n  Vec vect;\n  Line(Vec a = Vec(), Vec b = Vec()):a(a),b(b),vect(b-a){}\n\n  //projection\n  Vec proj(Vec p){\n    p = p - a;\n    return a + vect * vect.dot(p) / vect.norm2();\n  }\n\n  //reflection\n  Vec reflect(Vec p){\n    return proj(p) * 2 - p;\n  }\n\n  bool onSegment(Vec p){\n    return abs((p-a).cross(b-a)) < EPS && (p-a).dot(p-b) < EPS;\n  }\n\n  //other -> LineSegment(not inclusive), this -> Line\n  bool _intersect(Line &other){\n    return CCW(a, b, other.a) * CCW(a, b, other.b) < 0;\n  }\n\n  //other, this: both are LineSegment(inclusive)\n  bool intersect(Line &other){\n    return onSegment(other.a) || onSegment(other.b) || other.onSegment(a) || other.onSegment(b) || _intersect(other) && other._intersect(*this);\n  }\n\n  //low accuracy\n  Vec crossPoint(Line &other){\n    double ratio = (a - other.a).cross(vect) / other.vect.cross(vect);\n    return other.a + other.vect * ratio;\n  }\n\n  double dist(Vec p){\n    Vec pp = proj(p);\n    if(onSegment(pp))return ::dist(p, pp);\n    else return min(::dist(p, a), ::dist(p, b));\n  }\n  \n  double dist(Line &other){\n    if(intersect(other))return 0;\n    return min(min(dist(other.a), dist(other.b)), min(other.dist(a), other.dist(b)));\n  }\n};\n\n\nint main(){\n  Int q;\n  cin >> q;\n  while(q--){\n    Vec p0, p1, p2, p3;\n    p0.read();\n    p1.read();\n    p2.read();\n    p3.read();\n    Line l1(p0, p1), l2(p2, p3);\n    printf(\"%.10lf\\n\", l1.dist(l2));\n  }\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "///\n// File:  cgl_2_d.cpp\n// Author: ymiyamoto\n//\n// Created on Mon Oct 23 00:28:22 2017\n//\n#include <cmath>\n#include <cstdint>\n#include <iomanip>\n#include <iostream>\n\nusing namespace std;\n#define EPS 1e-10\n#define equals(x, y) (fabs(x - y) < EPS)\n\nstruct vector_t {\n  double x;\n  double y;\n\n  vector_t(double a, double b) : x(a), y(b)\n  {\n  }\n\n  double norm2()\n  {\n    return x * x + y * y;\n  }\n\n  double norm()\n  {\n    return sqrt(norm2());\n  }\n\n  double dot(vector_t a)\n  {\n    return x * a.x + y * a.y;\n  }\n\n  double cross(vector_t a)\n  {\n    return x * a.y - y * a.x;\n  }\n\n  vector_t operator*(double a)\n  {\n    return vector_t(a * x, a * y);\n  }\n};\n\nstruct point_t {\n  double x;\n  double y;\n\n  point_t operator+(const point_t a)\n  {\n    return point_t({x + a.x, y + a.y});\n  }\n\n  void print()\n  {\n    cout << fixed << setprecision(10) << x << \" \" << y << endl;\n  }\n\n  point_t operator+(const vector_t vec)\n  {\n    return point_t({x + vec.x, y + vec.y});\n  }\n\n  vector_t operator-(const point_t p)\n  {\n    return vector_t({x - p.x, y - p.y});\n  }\n\n  point_t project(point_t p1, point_t p2)\n  {\n    vector_t vec1(x - p1.x, y - p1.y);\n    vector_t vec2(p2.x - x, p2.y - y);\n    return point_t({x, y}) + vec1 * (vec1.dot(vec2) / vec1.norm2());\n  }\n\n  point_t reflect(point_t p1, point_t p2)\n  {\n    point_t proj = project(p1, p2);\n    return p2 + (proj - p2) * 2.0;\n  }\n};\n\nenum pos_t {\n  CCLOCKWISE = -1,\n  CLOCKWISE = 1,\n  ONLINE_BACK = 2,\n  ONLINE_FRONT = -2,\n  ON_SEGMENT = 0,\n};\n\npos_t ccw(point_t p0, point_t p1, point_t p2)\n{\n  if ((p1 - p0).cross(p2 - p0) > EPS) {\n    return CCLOCKWISE;\n  } else if ((p1 - p0).cross(p2 - p0) < -EPS) {\n    return CLOCKWISE;\n  } else if ((p1 - p0).dot(p2 - p0) < -EPS) {\n    return ONLINE_BACK;\n  } else {\n    if ((p1 - p0).norm2() < (p2 - p0).norm2()) {\n      return ONLINE_FRONT;\n    } else {\n      return ON_SEGMENT;\n    }\n  }\n}\n\nbool intersection(point_t p0, point_t p1, point_t p2, point_t p3)\n{\n  return (ccw(p0, p1, p2) * ccw(p0, p1, p3) <= 0) && (ccw(p2, p3, p0) * ccw(p2, p3, p1) <= 0);\n}\n\nstruct segment_t {\n  point_t a;\n  point_t b;\n\n  double distance(point_t p0)\n  {\n    if ((b - a).dot(p0 - a) < 0.0) {\n      return (p0 - a).norm();\n    } else if ((a - b).dot(p0 - b) < 0.0) {\n      return (p0 - b).norm();\n    } else {\n      return fabs((b - a).cross(p0 - a) / (b - a).norm());\n    }\n  }\n};\n\nint32_t main()\n{\n  uint32_t q;\n  cin >> q;\n\n  for (uint32_t i = 0; i < q; i++) {\n    double x, y;\n    cin >> x >> y;\n    point_t p0({x, y});\n    cin >> x >> y;\n    point_t p1({x, y});\n    cin >> x >> y;\n    point_t p2({x, y});\n    cin >> x >> y;\n    point_t p3({x, y});\n    if (intersection(p0, p1, p2, p3)) {\n      cout << fixed << setprecision(10) << 0.0 << endl;\n    } else {\n      segment_t seg1({p0, p1});\n      segment_t seg2({p2, p3});\n      double dist = min(seg2.distance(p0), min(seg2.distance(p1), min(seg1.distance(p2), seg1.distance(p3))));\n      cout << fixed << setprecision(10) << dist << endl;\n    }\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <vector>\n#include <cmath>\n\nconst double EPSILON = 1e-10;\n\ninline bool equals(double a, double b) {\n    return std::fabs(a - b) < EPSILON;\n}\n\nstruct Point {\n    double x;\n    double y;\n\n    bool operator < (const Point& p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point& p) const {\n        return equals(x, p.x) && equals(y, p.y);\n    }\n};\n\nPoint operator + (const Point& p1, const Point& p2) {\n    return Point{p1.x + p2.x, p1.y + p2.y};\n}\n\nPoint operator - (const Point& p1, const Point& p2) {\n    return Point{p1.x - p2.x, p1.y - p2.y};\n}\n\nPoint operator * (const Point& p1, double k) {\n    return Point{p1.x * k, p1.y * k};\n}\n\nstruct Segment {\n    Point p1, p2;\n};\n\nstruct Circle {\n    Point center;\n    double radius;\n};\n\nusing Vector = Point;\nusing Line = Segment;\nusing Polygon = std::vector<Point>;\n\n\ndouble norm(const Vector& p) {\n    return p.x * p.x + p.y + p.y;\n}\n\ndouble abs(const Vector& p) {\n    return std::sqrt(norm(p));\n}\n\ndouble dot(const Vector& a, const Vector& b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(const Vector& a, const Vector& b) {\n    return a.x * b.y - a.y * b.x;\n}\n\n\nVector projection(const Segment& s, const Point& p) {\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / norm(base);\n    return s.p1 + base * r;\n}\n\nVector reflection(const Segment& s, const Point& p) {\n    auto proj = projection(s, p);\n    return p + (projection(s, p) - p) * 2.0;\n}\n\nbool is_orthogonal(const Vector& a, const Vector& b) {\n    return equals(dot(a, b), 0.0);\n}\n\nbool is_orthogonal(const Segment& s1, const Segment& s2) {\n    return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nbool is_parallel(const Vector& a, const Vector& b) {\n    return equals(cross(a, b), 0.0);\n}\n\nbool is_parallel(const Segment& s1, const Segment& s2) {\n    return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nenum {\n    COUNTER_CLOCKWISE = 1,\n    CLOCKWISE = -1,\n    ONLINE_BACK = 2,\n    ONLINE_FRONT = -1,\n    ON_SEGMENT = 0,\n};\n\nint ccw(const Point& p0, const Point& p1, const Point& p2) {\n    auto a = p1 - p0;\n    auto b = p2 - p0;\n    if (cross(a, b) > EPSILON) return COUNTER_CLOCKWISE;\n    if (cross(a, b) < -EPSILON) return CLOCKWISE;\n    if (dot(a, b) < -EPSILON) return ONLINE_BACK;\n    if (norm(a) < norm(b)) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\ndouble intersect(const Point& p1, const Point& p2, const Point& p3, const Point& p4) {\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n            ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\n\ndouble intersect(const Segment& s1, const Segment& s2) {\n    return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\ndouble distance(const Point& a, const Point& b) {\n    return abs(a - b);\n}\n\ndouble distanceLP(const Line& l, const Point& p) {\n    return abs(cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1));\n}\n\ndouble distanceSP(const Segment& s, const Point& p) {\n    if (dot(s.p2 - s.p1, p - s.p1) < 0.0) return abs(p - s.p1);\n    if (dot(s.p1 - s.p2, p - s.p2) < 0.0) return abs(p - s.p2);\n    return distanceLP(s, p);\n}\n\ndouble distance(const Segment& s1, const Segment& s2) {\n    using std::min;\n    if (intersect(s1, s2)) return 0.0;\n    return min(min(distanceSP(s1, s2.p1), distanceSP(s1, s2.p2)),\n               min(distanceSP(s2, s1.p1), distanceSP(s2, s1.p2)));\n}\n\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n\nusing namespace std;\n\nint main() {\n    int q;\n    cin >> q;\n    for (int i = 0; i < q; ++i) {\n        array<Point, 4> points;\n        for (auto& p : points) {\n            cin >> p.x >> p.y;\n        }\n        Segment s1{points[0], points[1]};\n        Segment s2{points[2], points[3]};\n        cout << distance(s1, s2) << endl;\n    }\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <cmath>\n#include <algorithm>\nusing namespace std;\n\ndouble dis(double x1, double y1, double x2, double y2) {\n\treturn sqrt(pow(x1 - x2, 2) + pow(y1 - y2, 2));\n}\n\ndouble ldis(double x1, double y1, double x2, double y2, double x3, double y3) {\n\t\n\tif ((x1 - x2) * (x3 - x2) + (y1 - y2) * (y3 - y2) > 0 &&\n\t\t(x1 - x3) * (x2 - x3) + (y1 - y3) * (y2 - y3) > 0)\n\t\treturn ((y3 - y1) * (x2 - x1) - (x3 - x1) * (y2 - y1)) / dis(x2, y2, x3, y3);\n\telse\n\t\treturn min(dis(x1, y1, x2, y2), dis(x1, y1, x3, y3));\n}\n\nint main()\n{\n\tint q = 0;\n\n\tcin >> q;\n\n\tfor (int i = 0; i < q; i++) {\n\t\tdouble p0x = 0, p0y = 0, p1x = 0, p1y = 0, p2x = 0, p2y = 0, p3x = 0, p3y = 0,\n\t\t\t   u = 0, s = 0, t = 0, d = 0;\n\n\t\tcin >> p0x >> p0y >> p1x >> p1y >> p2x >> p2y >> p3x >> p3y;\n\n\t\tu = (p3y - p0y) * (p2x - p0x) - (p3x - p0x) * (p2y - p0y);\n\t\td = min({ ldis(p0x, p0y, p2x, p2y, p3x, p3y), ldis(p1x, p1y, p2x, p2y, p3x, p3y),\n\t\t\tldis(p2x, p2y, p0x, p0y, p1x, p1y), ldis(p3x, p3y, p0x, p0y, p1x, p1y)});\n\n\t\tif (u != 0) {\n\t\t\ts = ((p3y - p0y) * (p1x - p0x) - (p3x - p0x) * (p1y - p0y)) / u;\n\t\t\tt = -((p2y - p0y) * (p1x - p0x) - (p2x - p0x) * (p1y - p0y)) / u;\n\n\t\t\tif (s >= 0 && t >= 0) {\n\t\t\t\tif (s + t >= 1)\n\t\t\t\t\td = 0;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif (p1x - p0x != 0) {\n\t\t\t\tif ((p0x - p2x) * (p0x - p3x) <= 0)\n\t\t\t\t\td = 0;\n\t\t\t\telse if (((p2x - p0x) * (p2x - p1x) <= 0) | ((p3x - p0x) * (p3x - p1x) <= 0))\n\t\t\t\t\td = 0;\n\t\t\t}\n\t\t\telse\n\t\t\t\tif ((p0y - p2y) * (p0y - p3y) <= 0)\n\t\t\t\t\td = 0;\n\t\t\t\telse if (((p2y - p0y) * (p2y - p1y) <= 0) | ((p3y - p0y) * (p3y - p1y) <= 0))\n\t\t\t\t\td = 0;\n\t\t}\n\n\t\tcout << setiosflags(ios::showpoint|ios::fixed) << setprecision(10)\n\t\t\t << d << endl;\n\t}\n\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\n#define rep(i, a, b) for (int i = a, i##end = b; i <= i##end; ++i)\n#define per(i, a, b) for (int i = a, i##end = b; i >= i##end; --i)\n#define rep0(i, a) for (int i = 0, i##end = a; i < i##end; ++i)\n#define per0(i, a) for (int i = (int)a-1; ~i; --i)\n#define max(a, b) ((a) > (b) ? (a) : (b))\n#define min(a, b) ((a) < (b) ? (a) : (b))\n#define chkmax(a, b) a = max(a, b)\n#define chkmin(a, b) a = min(a, b)\n#define x first\n#define y second\n#define enter putchar('\\n')\n\ntypedef long long ll;\ntypedef double DB;\n\nconst DB eps = 1e-12;\n\nint sgn(DB x) { return fabs(x) < eps ? 0 : (x > 0 ? 1 : -1); }\n\nstruct Point {\n\tDB x, y;\n\tPoint(DB x = 0, DB y = 0) : x(x), y(y) {}\n\tPoint operator + (Point a) { return Point(x + a.x, y + a.y); }\n\tPoint operator - (Point a) { return Point(x - a.x, y - a.y); }\n\tPoint operator - () { return Point(-x, -y); }\n\tfriend Point operator * (DB k, Point a) { return Point(k * a.x, k * a.y); }\n\tDB operator % (Point a) { return x * a.x + y * a.y; }\n\tDB operator / (Point a) { return x * a.y - y * a.x; }\n\toperator DB() { return sqrt(x*x + y*y); }\n};\n\nPoint gp() { Point a; scanf(\"%lf%lf\", &a.x, &a.y); return a; }\nvoid wp(Point a) { printf(\"%.10lf %.10lf \", a.x, a.y); }\n\nstruct Poly {\n\tstd::vector<Point> a;\n\tPoly(int n = 0) { a.resize(n); rep0(i, n) a[i] = gp(); }\n\tPoint &operator [] (int i) { int n = a.size(); return a[i >= n ? i-n : i]; }\n};\n\nPoint Proj(Point P, Point P1, Point P2) { // Projection\n\tPoint v = P2-P1; DB t = (P-P1)%v / (v%v);\n\treturn P1 + t*v;\n}\n\nint Direct1(Point P, Point P1, Point P2) { return sgn((P1-P)%(P2-P)); }\nint Direct2(Point P, Point P1, Point P2) { return sgn((P1-P)/(P2-P)); }\n\nbool IsSegInter(Point P1, Point P2, Point Q1, Point Q2) {\n\tif (min(P1.x, P2.x) <= max(Q1.x, Q2.x) && max(P1.x, P2.x) >= min(Q1.x, Q2.x) && min(P1.y, P2.y) <= max(Q1.y, Q2.y) && max(P1.y, P2.y) >= min(Q1.y, Q2.y))\n\t\tif (Direct2(P1, P2, Q1) * Direct2(P1, P2, Q2) <= 0 && Direct2(Q1, Q2, P1) * Direct2(Q1, Q2, P2) <= 0) return 1;\n\treturn 0;\n}\n\nPoint GetSegInter(Point P1, Point P2, Point Q1, Point Q2) {\n\tPoint v = P2-P1, w = Q2-Q1; DB t = (Q1-P1)/w / (v/w);\n\treturn P1 + t*v;\n}\n\nDB PointLineDist(Point P, Point P1, Point P2) {\n\treturn DB(Proj(P, P1, P2)-P);\n}\n\nDB PointSegDist(Point P, Point P1, Point P2) {\n\tif (Direct1(P1, P2, P) * Direct1(P2, P1, P) >= 0) return PointLineDist(P, P1, P2);\n\treturn min(DB(P-P1), DB(P-P2));\n}\n\nDB SegDist(Point P1, Point P2, Point Q1, Point Q2) {\n\tif (IsSegInter(P1, P2, Q1, Q2)) return 0;\n\treturn min(min(PointSegDist(P1, Q1, Q2), PointSegDist(P2, Q1, Q2)), min(PointSegDist(Q1, P1, P2), PointSegDist(Q2, P1, P2)));\n}\n\nint q;\n\nint main() {\n\tscanf(\"%d\", &q);\n\twhile (q--) {\n\t\tPoint P1 = gp(), P2 = gp(), Q1 = gp(), Q2 = gp();\n\t\tprintf(\"%.10lf\\n\", SegDist(P1, P2, Q1, Q2));\n\t\t//wp(GetSegInter(P1, P2, Q1, Q2)); enter;\n\t\t//printf(\"%d\\n\", IsInter(P1, P2, Q1, Q2));\n\t\t//wp(Proj(P, P1, P2)); enter;\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <complex>\n#include <cstdlib>\n#include <iomanip>\n\nusing namespace std;\n\nconst double eps = 1e-10;\ntypedef complex<double> Point;\n\ninline double cross(const Point& a, const Point& b){\n    return imag(conj(a) * b);\n}\n\ninline double dot(const Point& a, const Point& b){\n    return real(conj(a) * b);\n}\n\nint ccw(Point a, Point b, Point c){\n    b -= a; c -= a;\n    if(cross(b, c) > eps) return  1;\n    if(cross(b, c) < -eps)return -1;\n    if(dot(b, c) < 0)     return  2;\n    if(norm(b) < norm(c)) return -2;\n    return 0;\n}\n\nstruct Line : vector<Point> {\n    Line(const Point& a, const Point& b):vector<Point>{a, b}{}\n};\n\ninline bool interSP(const Line& s, const Point& p){\n    return abs(s[0] - p) + abs(s[1] - p) - abs(s[1] - s[0]) < eps;\n}\n\ninline bool interSS(const Line& s, const Line& t){\n    return ccw(s[0], s[1], t[0]) * ccw(s[0], s[1], t[1]) <= 0 &&\n           ccw(t[0], t[1], s[0]) * ccw(t[0], t[1], s[1]) <= 0;\n}\n\ninline Point proj(const Line& l, const Point& p){\n    double t = dot(p - l[0], l[1] - l[0]) / norm(l[1] - l[0]);\n    return l[0] + (l[1] - l[0]) * t;\n}\n\ninline double distSP(const Line& s, const Point& p){\n    const Point r = proj(s, p);\n    return interSP(s, r)? abs(r - p): min(abs(s[0] - p), abs(s[1] - p));\n}\n\ninline double distSS(const Line& s, const Line& t){\n    return interSS(s, t)? 0: min(min(distSP(s, t[0]), distSP(s, t[1])),\n                                 min(distSP(t, s[0]), distSP(t, s[1])));\n}\n\nint main(){\n    int q;\n    cin >> q;\n    while(q--){\n        int x0, y0, x1, y1, x2, y2, x3, y3;\n        cin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n        Line s(Point(x0, y0), Point(x1, y1)), t(Point(x2, y2), Point(x3, y3));\n        cout << fixed << setprecision(10) << distSS(s, t) << '\\n';\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <cctype>\n#include <limits.h>\n#include <math.h>\n#include <complex>\n#include <bitset>\n#include <vector>\n#include <map>\n#include <set>\n#include <stack>\n#include <queue>\n#include <cstring>\n#include <string>\n#include <sstream>\n#include <algorithm>\n#include <iomanip>\n#include <iostream>\n\n#define VARIABLE(x) cerr << #x << \"=\" << x << endl\n#define BINARY(x) static_cast<bitset<16> >(x)\n#define rep(i,n) for(int i=0;i<(int)(n);i++)\n#define REP(i,m,n) for (int i=m;i<(int)(n);i++)\n#define if_range(x, y, w, h) if (0<=(int)(x) && (int)(x)<(int)(w) && 0<=(int)(y) && (int)(y)<(int)(h))\n#define ALL(a) (a).begin(),(a).end()\nconst int INF = 1e9;\nconst double PI = 3.14159;\nint dx[4]={0, 1, 0, -1}, dy[4]={-1, 0, 1, 0};\nusing namespace std;\ntypedef long long ll;\n//typedef pair<int, int> P;\n\n/* struct P {\n\tint x, y, n;\n\tP(int n, int x, int y):n(n), x(x), y(y){}\n\tP(){}\n}; */\n\n\n/** 幾何ライブラリ **/\n// to do : 1183\n\n#include <complex>\n\n#define X real()\n#define Y imag()\n\nconst double EPS = 1e-11;\n\ntypedef double D;\ntypedef complex<D> P; // Point\n\nstruct L { // Line\n\tP a, b;\n\tL(){}\n\tL(P aa, P bb) : a(aa), b(bb){}\n};\n\n// 共役複素数 conj(a);\n\n// 符号\nint sig(D a, D b=0) { return a < b - EPS ? -1 : (a > b + EPS ? 1 : 0); }\n\n// 内積\nD dot(P a, P b) { return (conj(a)*b).real(); }\n\n// 外積\nD cross(P a, P b) { return (conj(a)*b).imag(); }\n\n// 線分abに対する点cの位置\nenum CCW{LEFT=1, RIGHT=-1, BACK=2, FRONT=-2, ON=0};\nint ccw(P a, P b, P c)\n{\n\tb -= a, c -= a;\n\tD s = sig(cross(b, c));\n\tif (s) return s>0 ? LEFT : RIGHT;\n\tif (sig(dot(b, c))<0) return BACK;\n\tif (sig(abs(c), abs(b))>0) return FRONT;\n\treturn ON;\n}\n\n// 直線abと点cの距離\nD distLP(L l, P c)\n{\n\treturn abs(cross(l.b-l.a, c-l.a))/abs(l.b-l.a);\n}\n\n// 線分abと点cの距離\nD distSP(L l, P c)\n{\n\tif (sig(dot(l.b-l.a, c-l.a))<0) return abs(c-l.a);\n\tif (sig(dot(l.a-l.b, c-l.b))<0) return abs(c-l.b);\n\treturn abs(cross(l.b-l.a, c-l.a))/abs(l.b-l.a);\n}\n\n// 線分と線分の交差判定\nbool iSS(L s, L t)\n{\n\treturn (ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0)\n\t\t\t&& (ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0);\n}\n\n// 線分と線分の距離\nD distSS(L s, L t)\n{\n\tif (iSS(s, t)) return 0;\n\treturn min(min(distSP(t, s.a), distSP(t, s.b)), min(distSP(s, t.a), distSP(s, t.b)));\n}\n\n// 線分と線分の交点 (公差していることが前提)\nP cSS(L s, L t)\n{\n\tD d1 = distLP(t, s.a);\n\tD d2 = distLP(t, s.b);\n\tD tmp = d1 / (d1 + d2);\n\treturn s.a + (s.b-s.a)*tmp;\n}\n\n// 直線と直線の交差判定\nbool iLL(L s, L t)\n{\n\treturn sig(cross(s.b-s.a, t.b-t.a))!=0;\n}\n\n/** Problem CGL_2-D : Distance **/\nint main()\n{\n\tL s, t;\n\tint q; cin>>q;\n\trep(i, q) {\n\t\tcin>>s.a.X>>s.a.Y>>s.b.X>>s.b.Y;\n\t\tcin>>t.a.X>>t.a.Y>>t.b.X>>t.b.Y;\n\t\t\n\t\tcout << fixed << setprecision(15);\n\t\tcout << distSS(s, t) << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\n#include<string>\n#include<algorithm>\n#include<functional>\n#include<queue>\n#include<utility>\n#include<cstdlib>\n#include<ctime>\n#include<utility>\n#include<cmath>\n#include<cstdio>\nusing namespace std;\n\n\n#define INF 1e+10\n#define EPS 1e-4\n#define EQ(a,b) (abs(a-b)<EPS)\n\n//誤差を考慮して足し算\ndouble add(double a,double b){\n\tif(abs(a+b) < EPS*(abs(a)+abs(b)))return 0;\n\treturn a+b;\n}\nstruct P{//2次元ベクトル\n\tdouble x,y;\n\tP(){}\n\tP(double x,double y):x(x),y(y){}\n\tP operator + (P p){\n\t\treturn P(add(x,p.x),add(y,p.y));\n\t}\n\tP operator - (P p){\n\t\treturn P(add(x,-p.x),add(y,-p.y));\n\t}\n\tP operator * (double d){\n\t\treturn P(x*d,y*d);\n\t}\n\tP operator / (double d){\n\t\treturn P(x/d,y/d);\n\t}\n\tdouble dot(P p){//内積\n\t\treturn add(x*p.x,y*p.y);\n\t}\n\tdouble det(P p){//外積\n\t\treturn add(x*p.y,-y*p.x);\n\t}\n\tbool equal(P p){\n\t\treturn (x-p.x)*(x-p.x)+(y-p.y)*(y-p.y) < EPS*EPS;\n\t}\n\tdouble norm()const{\n\t\treturn sqrt(x*x+y*y);\n\t}\n};\n//typedef pair<P,P> Line;\n\n//線分p1-p2上に点qがあるか判定\nbool on_seg(P p1,P p2,P q){\n\treturn (p1-q).det(p2-q)==0 && (p1-q).dot(p2-q)<=0;\n}\n//直線p1-p2と直線q1-q2の交点\nP intersection(P p1,P p2,P q1,P q2){\n\treturn p1+(p2-p1)*( (q2-q1).det(q1-p1)/(q2-q1).det(p2-p1) );\n}\n//直線p1-p2でqに線対称な点\nP line_symmetry(P p1,P p2,P q){\n\tdouble dx,dy;\n\tdx=p2.x-p1.x;\n\tdy=p2.y-p1.y;\n\tP inter=intersection(p1,p2,q,q+P(dy,-dx));\n\treturn q+(inter-q)*2;\n}\n\n//線分p1-p2と線分q1-q2が交差するか\nbool is_intersect(P p1,P p2,P q1,P q2){\n\tif(on_seg(p1,p2,q1)||on_seg(p1,p2,q2)||on_seg(q1,q2,p1)||on_seg(q1,q2,p2))return true;\n\tif((p1-p2).det(q1-q2)==0 )return false;//平行\n\tP a=intersection(p1,p2,q1,q2);\n\treturn on_seg(p1,p2,a) && on_seg(q1,q2,a);\n}\n//原点中心回転\nP rotate(P p,double rad){\n\tdouble s=sin(rad),c=cos(rad);\n\treturn P(c*p.x-s*p.y, s*p.x+c*p.y);\n}\n//originを中心に回転\nP rotate(P p,double rad,P origin){\n\treturn origin + rotate(p - origin,rad);\n}\n//二点間の距離\ndouble dist(P p,P q){\n\tp = p-q;\n\treturn sqrt(p.x*p.x+p.y*p.y);\n}\n//単位ベクトルに変換\nP to_unit(P p){\n\tdouble d = sqrt(p.x*p.x+p.y*p.y);\n\treturn p/d;\n}\n//線分と点の距離\ndouble dist_LP(P p1,P p2,P q){\n\tdouble dx,dy;\n\tdx = p1.x-p2.x;\n\tdy = p1.y-p2.y;\n\tdouble d = min(dist(p1,q) ,dist(p2,q));\n\tpair<P,P> normal = make_pair(q+to_unit(P(-dy,dx))*d ,q+to_unit(P(dy,-dx))*d);//法線ベクトル\n\tif(is_intersect(p1,p2,normal.first,normal.second)){\n\t\treturn dist(q, intersection(p1,p2,normal.first,normal.second));\n\t}\n\treturn d;\n}\n//線分間の距離 EPS注意\ndouble dist_LL(P p1,P p2,P q1,P q2){\n\tif(is_intersect(p1,p2,q1,q2))return 0;\n\treturn min( min(dist_LP(p1,p2,q1),dist_LP(p1,p2,q2))\n\t\t,min(dist_LP(q1,q2,p1),dist_LP(q1,q2,p2)) );\n}\n\nint main(){\n\tint q;\n\tcin>>q;\n\tfor(int i=0;i<q;i++){\n\t\tP p1,p2,q1,q2;\n\t\tcin>>p1.x>>p1.y;\n\t\tcin>>p2.x>>p2.y;\n\t\tcin>>q1.x>>q1.y;\n\t\tcin>>q2.x>>q2.y;\n\t\tprintf(\"%.10f\\n\",dist_LL(p1,p2,q1,q2));\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define FOR(i,a,b) for(int i=(a);i<(b);++i)\n#define rep(i,n)   FOR(i,0,n)\n#define pb emplace_back\n#define mp make_pair\ntypedef long long ll;\ntypedef pair<int,int> pint;\n\n#define eps (1e-10)\nstruct Point{\n    double x,y;\n    Point(){}\n    Point(double x,double y):x(x),y(y){}\n    Point operator+(Point p) {return Point(x+p.x,y+p.y);}\n    Point operator-(Point p) {return Point(x-p.x,y-p.y);}\n    Point operator*(double k){return Point(x*k,y*k);}\n    double norm(){return x*x+y*y;}\n    double abs(){return sqrt(norm());}\n    bool operator == (const Point &p) const{\n    return fabs(x-p.x)<eps && fabs(y-p.y)<eps;\n  }\n  double dot(Point p){return x*p.x+y*p.y;}\n  double det(Point p){return x*p.y-y*p.x;}\n};\nstruct Line{\n  Point p1,p2;\n  Line(){}\n  Line(Point p1, Point p2):p1(p1),p2(p2){}\n};\nint ccw(Point a,Point b,Point c){\n  Point t1=b-a,t2=c-a;\n  if(t1.det(t2)> eps) return 1;//counter clockwise\n  if(t1.det(t2)< -eps) return -1;//clockwise\n  if(t1.dot(t2)< -eps) return 2;//c-a-b online\n  if(t1.norm()<t2.norm()) return -2;//a-b-c online\n  return 0;//a-c-b online\n}\nbool intersectSS(Point a,Point b,Point c,Point d){\n  return (ccw(a,b,c)*ccw(a,b,d)<=0&&ccw(c,d,a)*ccw(c,d,b)<=0);\n}\nbool intersectSS(Line l1,Line l2){\n  return intersectSS(l1.p1,l1.p2,l2.p1,l2.p2);\n}\nbool isOrthogonal(Point a,Point b){\n  return fabs(a.dot(b))<eps;\n}\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n  return isOrthogonal(a1-a2,b1-b2);\n}\nbool isParallel(Point a,Point b){\n  return fabs(a.det(b))<eps;\n}\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n  return isParallel(a1-a2,b1-b2);\n}\nPoint CrossPoint(Line l1,Line l2){\n    double a=(l1.p2-l1.p1).det(l2.p2-l2.p1);\n    double b=(l1.p2-l1.p1).det(l1.p2-l2.p1);\n    if(fabs(a)<eps&&fabs(b)<eps) return l2.p1;\n    return l2.p1+(l2.p2-l2.p1)*(b/a);\n}\nPoint project(Line l,Point p){\n  Point base=l.p2-l.p1;\n  double r=(p-l.p1).dot(base)/base.norm();\n  return l.p1+base*r;\n}\nPoint reflect(Line l,Point p){\n  return p+(project(l,p)-p)*2.0;\n}\ndouble distance(Line l,Point p){\n    Point r=project(l,p);\n    if(abs(ccw(l.p1,l.p2,r))==0) return (p-r).abs();\n    else return min((p-l.p1).abs(),(p-l.p2).abs());\n}\nint main(){\n    int q;\n    double xp0,yp0,xp1,yp1,xp2,yp2,xp3,yp3;\n    cin>>q;\n    while(q--){\n        cout<<fixed<<setprecision(10);\n        cin>>xp0>>yp0>>xp1>>yp1>>xp2>>yp2>>xp3>>yp3;\n        Point p0(xp0,yp0),p1(xp1,yp1),p2(xp2,yp2),p3(xp3,yp3);\n        if(intersectSS(p0,p1,p2,p3)) cout<<0.0<<endl;\n        else cout<<min(min(distance(Line(p0,p1),p2),distance(Line(p0,p1),p3)),\n        min(distance(Line(p2,p3),p0),distance(Line(p2,p3),p1)))<<endl;\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define REP(i,a,b) for(int i=a;i<b;i++)\n#define rep(i,n) REP(i,0,n)\n\ntypedef complex<double> P;\nstruct Line : public vector<P>\n{\n  Line(P a=P(), P b=P()) {\n    push_back(a); push_back(b);\n  }\n};\ntypedef Line Segment;\n\n#define EPS (1e-8)\n\nbool operator < (P const& a, P const& b) {\n  return (a.real() != a.real()) ? a.real() < b.real() : a.imag() < b.imag();\n}\n\ndouble dot(P const& a, P const& b) {\n  return real(conj(a)*b);\n}\n\ndouble cross(P const& a, P const& b) {\n  return imag(conj(a)*b);\n}\n\nP projection_point(P const& a, P const& b, P const& c) {\n  double k = dot(b-a, c-a) / norm(b-a);\n  return a+k*(b-a);\n}\n\nP reflection_point(P const& a, P const& b, P const& c) {\n  return c + 2.*(projection_point(a, b, c) - c);\n}\n\nbool is_parallel(Segment const& s, Segment const& t) {\n  return abs(cross(s[1]-s[0], t[1]-t[0])) < EPS;\n}\n\nbool is_orthogonal(Segment const& s, Segment const& t) {\n  return abs(dot(s[1]-s[0], t[1]-t[0])) < EPS;\n}\n\nint ccw(P a, P b, P c) {\n  b -= a, c -= a;\n  if(cross(b, c) > 0) return +1; // counter clockwise\n  if(cross(b, c) < 0) return -1;  // clockwise\n  if(dot(b, c) < 0) return +2;    // c-a-b\n  if(norm(b) < norm(c)) return -2;  // a-b-c\n  return 0; // on segment\n}\n\nbool is_intersect_ss(Segment const& s, Segment const& t) {\n  return ccw(s[0], s[1], t[0]) * ccw(s[0], s[1], t[1]) <= 0\n         && ccw(t[0], t[1], s[0]) * ccw(t[0], t[1], s[1]) <= 0;\n}\n\nP crosspoint_ss(Segment const& s, Segment const& t) {\n  P bline = t[1]-t[0];\n  double d1 = abs(cross(bline, s[0]-t[0])), d2 = abs(cross(bline, s[1]-t[0]));\n  return s[0] + d1/(d1+d2) * (s[1]-s[0]);\n}\n\nbool is_point_onsegment(Segment const& s, P const& p) {\n  return abs(s[0]-p)+abs(s[1]-p)-abs(s[1]-s[0]) < EPS;\n}\n\ndouble distance_sp(Segment const& s, P const& p) {\n  P q = projection_point(s[0], s[1], p);\n  if(is_point_onsegment(s, p)) return abs(p-q);\n  return min(abs(s[0]-p), abs(s[1]-p));\n}\n\ndouble distance_ss(Segment const& s, Segment const& t) {\n  if(is_intersect_ss(s, t)) return 0.; // 交差は距離 0\n  return min(min(distance_sp(t, s[0]), distance_sp(t, s[1])),\n             min(distance_sp(s, t[0]), distance_sp(s, t[1])));\n}\n\nint main () {\n  \n  int q; cin >> q;\n  for(;q--;) {\n    Segment s, t;\n    cin >> s[0].real() >> s[0].imag();\n    cin >> s[1].real() >> s[1].imag();\n    cin >> t[0].real() >> t[0].imag();\n    cin >> t[1].real() >> t[1].imag();\n    \n    printf(\"%.10f\\n\", distance_ss(s, t));\n  }\n  \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define _GLIBCXX_DEBUG\nusing namespace std;\nusing ll = long long;\nusing vec = vector<ll>;\nusing vect = vector<double>;\nusing Graph = vector<vector<ll>>;\n#define loop(i, n) for (ll i = 0; i < n; i++)\n#define Loop(i, m, n) for (ll i = m; i < n; i++)\n#define pool(i, n) for (ll i = n; i >= 0; i--)\n#define Pool(i, m, n) for (ll i = n; i >= m; i--)\n#define mod 1000000007ll\n#define setbit bitset<8>\n#define flagcount __builtin_popcount\n#define flag(x) (1 << x)\n#define flagadd(bit, x) bit |= flag(x)\n#define flagpop(bit, x) bit &= ~flag(x)\n#define flagon(bit, i) bit &flag(i)\n#define flagoff(bit, i) !(bit & (1 << i))\n#define all(v) v.begin(), v.end()\n#define low2way(v, x) lower_bound(all(v), x)\n#define high2way(v, x) upper_bound(all(v), x)\n#define count2way(v, x) high2way(v, x) - low2way(v, x)\n#define lower(v, x) low2way(v, x) - v.begin()       //1番左が0、もし見つから無いならｎを出力\n#define higher(v, x) high2way(v, x) - v.begin() - 1 //1番左が0、もし見つからないならn-1を出力（注意）\n#define putout(a) cout << a << endl\n#define putout2(a, b) \\\n    putout(a);        \\\n    putout(b)\n#define putout3(a, b, c) \\\n    putout(a);           \\\n    putout(b);           \\\n    putout(c)\n#define putout4(a, b, c, d) \\\n    putout(a);              \\\n    putout(b);              \\\n    putout(c);              \\\n    putout(d)\n#define putout5(a, b, c, d, e) \\\n    putout(a);                 \\\n    putout(b);                 \\\n    putout(c);                 \\\n    putout(d);                 \\\n    putout(e)\n#define Gput(a, b) G[a].push_back(b)\n#define cin1(a) cin >> a\n#define cin2(a, b) cin >> a >> b\n#define cin3(a, b, c) cin >> a >> b >> c\n#define cin4(a, b, c, d) cin >> a >> b >> c >> d\n#define cin5(a, b, c, d, e) cin >> a >> b >> c >> d >> e\n#define Sum(v) accumulate(all(v), 0ll)\n#define gcd(x, y) __gcd(x, y)\nll ctoi(char c)\n{\n    if (c >= '0' && c <= '9')\n    {\n        return c - '0';\n    }\n    return 0;\n}\ntemplate <typename T>\nT lcm(T x, T y)\n{\n    T z = gcd(x, y);\n    return x * y / z;\n}\ntemplate <typename T>\nbool primejudge(T n)\n{\n    if (n < 2)\n        return false;\n    else if (n == 2)\n        return true;\n    else if (n % 2 == 0)\n        return false;\n    double sqrtn = sqrt(n);\n    for (T i = 3; i < sqrtn + 1; i++)\n    {\n        if (n % i == 0)\n        {\n            return false;\n        }\n        i++;\n    }\n    return true;\n}\ntemplate <typename T>\nT modinv(T a, T m)\n{\n    T b = m, u = 1, v = 0;\n    while (b)\n    {\n        T t = a / b;\n        a -= t * b;\n        swap(a, b);\n        u -= t * v;\n        swap(u, v);\n    }\n    u %= m;\n    if (u < 0)\n        u += m;\n    return u;\n}\n//場合によって使い分ける\n//const ll dx[4]={1,0,-1,0};\n//const ll dy[4]={0,1,0,-1};\nconst ll dx[8] = {1, 1, 0, -1, -1, -1, 0, 1};\nconst ll dy[8] = {0, 1, 1, 1, 0, -1, -1, -1};\n//多次元配列の宣言法\n//vector<vector<ll>> field(h, vector<ll>(w));\ntemplate <class T>\ninline void chmax(T &a, T b)\n{\n    if (a < b)\n        a = b;\n}\ntemplate <class T>\ninline void chmin(T &a, T b)\n{\n    if (a > b)\n        a = b;\n}\n/*\nライブラリをここに置いてコメントを削除\n*/\n//円周率\nstatic const double pi = 3.141592653589793;\n//幾何の問題で入力が多い時に使用\n#define scan(x) scanf(\"%ld\", &x)\n\n//誤差チェッカー\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n//点を表わす構造体\nstruct Point\n{\npublic:\n    double x, y;\n    Point(double _x, double _y) : x(_x), y(_y) {}\n    /*\n    以下ベクトルに対する演算子の定義\n    +:ベクトルの足し算\n    -:ベクトルの引き算\n    *:スカラー倍\n    /:スカラーの逆数倍\n    */\n    Point operator+(const Point p) { return Point(x + p.x, y + p.y); }\n    Point operator-(const Point p) { return Point(x - p.x, y - p.y); }\n    Point operator*(const double k) { return Point(x * k, y * k); }\n    Point operator/(const double k) { return Point(x / k, y / k); }\n    double abs() { return sqrt(norm()); }\n    double norm() { return x * x + y * y; }\n    //ベクトルの比較(x軸方向のベクトルから比較)\n    bool operator<(const Point &p) const\n    {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n    bool operator>(const Point &p) const\n    {\n        return x != p.x ? x > p.x : y > p.y;\n    }\n    bool operator==(const Point &p) const\n    {\n        return equals(x, p.x) && equals(y, p.y);\n    }\n    bool operator!=(const Point &p) const\n    {\n        return (!equals(x, p.x)) || (!equals(y, p.y));\n    }\n};\n//ベクトルとして扱う場合\ntypedef Point Vector;\n//線分を表わす構造体\nstruct Segment\n{\n    Point p1, p2;\n    Segment(Point _p1, Point _p2) : p1(_p1), p2(_p2) {}\n};\n//直線として扱う場合\ntypedef Segment Line;\n//ベクトルのノルム\ndouble norm(Vector a)\n{\n    return a.x * a.x + a.y * a.y;\n}\n//ベクトルの大きさ\ndouble abs(Vector a)\n{\n    return sqrt(norm(a));\n}\n//ベクトルの内積\ndouble dot(Vector a, Vector b)\n{\n    return a.x * b.x + a.y * b.y;\n}\n//ベクトルの外積\ndouble cross(Vector a, Vector b)\n{\n    return a.x * b.y - a.y * b.x;\n}\n//内積≓0かどうかによるベクトルの直交判定(様々な引数で答えられるように複数用意)\nbool Orthogonal(Vector a, Vector b)\n{\n    return equals(dot(a, b), 0.0);\n}\nbool Orthogonal(Point a1, Point a2, Point b1, Point b2)\n{\n    return Orthogonal(a1 - a2, b1 - b2);\n}\nbool Orthogonal(Segment s1, Segment s2)\n{\n    return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n//外積≓0かどうかによるベクトルの平行判定(様々な引数で答えられるように複数用意)\nbool Parallel(Vector a, Vector b)\n{\n    return equals(cross(a, b), 0.0);\n}\nbool Parallel(Point a1, Point a2, Point b1, Point b2)\n{\n    return Parallel(a1 - a2, b1 - b2);\n}\nbool Parallel(Segment s1, Segment s2)\n{\n    return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n//直線sに対して点ｐから垂線を引いたときの交点x(直線sに対する点pの射影)を求める\nPoint Project(Line s, Point p)\n{\n    Vector base = s.p2 - s.p1, hypo = p - s.p1;\n    double scalar = (dot(base, hypo) / norm(base));\n    return s.p1 + base * scalar;\n}\n//直線sに対して点pと線対称の位置にある点p'を求める\nPoint Reflect(Line s, Point p)\n{\n    return p + (Project(s, p) - p) * 2.0;\n}\n//点と点の距離\ndouble GetDist(Point a, Point b)\n{\n    return abs(a - b);\n}\n//直線と点の距離\ndouble GetDistLP(Line l, Point p)\n{\n    return abs(Project(l, p) - p);\n}\n//線分と点の距離\ndouble GetDistSP(Segment s, Point p)\n{\n    if (dot(s.p2 - s.p1, p - s.p1) < 0.0)\n        return abs(p - s.p1);\n    if (dot(s.p1 - s.p2, p - s.p2) < 0.0)\n        return abs(p - s.p2);\n    return GetDistLP(s, p);\n}\n//Counter-Clockwise(AOJ:CGL_1_Cより)\nstatic const int COUNTER_CLOCKWISE = 1; //反時計回り\nstatic const int CLOCKWISE = -1;        //時計回り\nstatic const int ONLINE_BACK = 2;       //線分の後ろにある\nstatic const int ONLINE_FRONT = -2;     //線分の前にある\nstatic const int ON_SEGMENT = 0;        //線分上にある\n//線分p0p1と点p2の位置関係を求める\nint CCW(Point p0, Point p1, Point p2)\n{\n    Vector a = p1 - p0, b = p2 - p0; //a:p0->p1,b:p0->p2\n    if (cross(a, b) > EPS)\n        return COUNTER_CLOCKWISE; //外積が正なら反時計回り(sinθ>0)\n    if (cross(a, b) < -EPS)\n        return CLOCKWISE; //外積が負なら時計回り(sinθ<0)\n    if (dot(a, b) < -EPS)\n        return ONLINE_BACK; //外積が0かつ内積が負(cosθ<0)\n    if (a.norm() < b.norm())\n        return ONLINE_FRONT; //p2がp0p1に含まれないときp0p2=p0p1+p1p2となり|a|^2<|b|^2が成立\n    return ON_SEGMENT;       //最後にp0p2p1が残る\n}\n//2本の線分の交差判定(点と線分で2種類用意)\nbool Intersect(Point p1, Point p2, Point p3, Point p4)\n{\n    return (CCW(p1, p2, p3) * CCW(p1, p2, p4) <= 0 && CCW(p3, p4, p1) * CCW(p3, p4, p2) <= 0);\n}\nbool Intersect(Segment s1, Segment s2)\n{\n    return Intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n//線分と線分の距離\ndouble GetDist(Segment s1, Segment s2)\n{\n    //線分が交差していた場合、距離は0.0\n    if (Intersect(s1, s2))\n        return 0.0;\n    return min(min(GetDistSP(s1, s2.p1), GetDistSP(s1, s2.p2)), min(GetDistSP(s2, s1.p1), GetDistSP(s2, s1.p2)));\n}\n//座標cを中心とする半径rの円を表わす構造体\nstruct Circle\n{\npublic:\n    Point c;\n    double r;\n    Circle(Point _c, double _r) : c(_c), r(_r) {}\n};\n\n//多角形は点の列として扱う\ntypedef vector<Point> Polygon;\nint main()\n{\n    cout << fixed << setprecision(30);\n    /*\n    double a1, a2, b1, b2;\n    cin >> a1 >> a2 >> b1 >> b2;\n    Point p1(a1, a2), p2(b1, b2);\n    Segment s(p1, p2);\n    */\n    ll q;\n    cin >> q;\n    loop(i, q)\n    {\n        vector<double> p(8);\n        loop(j, 8) cin >> p[j];\n        Point p1(p[0], p[1]), p2(p[2], p[3]);\n        Point p3(p[4], p[5]), p4(p[6], p[7]);\n        Segment s1(p1, p2), s2(p3, p4);\n        putout(GetDist(s1, s2));\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<climits>\n#include<iomanip>\n#include<cstdio>\n#include<vector>\n#include<queue>\n#include<stack>\n#include<cmath>\n#include<list>\n#include<map>\n#include<set>\nusing namespace std;\n\ntypedef vector<int> VI;\ntypedef vector<VI> VVI;\ntypedef vector<string> VS;\ntypedef stack<int> SI;\ntypedef queue<int> QI;\ntypedef list<int> LI;\ntypedef pair<int,int> PII;\ntypedef long long LL;\n\n#define d(x)  cout<<#x<<\" = \"<<(x)<<endl;\n#define ALL(a)  (a).begin(),(a).end()\n#define RALL(a) (a).rbegin(), (a).rend()\n#define PB push_back\n#define MP make_pair\n#define EMP empty()\n#define SZ(a) int((a).size())\n#define EACH(i,c) for(typeof((c).begin()) i=(c).begin(); i!=(c).end(); ++i)\n#define REACH(i,c) for(typeof((c).rbegin()) i=(c).rbegin(); i!=(c).rend(); ++i)\n#define EXIST(s,e) ((s).find(e)!=(s).end())\n#define SORT(c,n) sort(c,c+n)\n#define VSORT(c) sort((c).begin(),(c).end())\n#define FOR(i,a,b) for(int i=(a);i<(b);++i)\n#define REP(i,n)  FOR(i,0,n)\n#define DFOR(i,b,a) for(int i=(b)-1;i>=(a);--i)\n#define DREP(i,n) DFOR(i,n,0)\n#define INF 1000000000\n\nconst double EPS = 1e-10;\nconst double PI  = acos(-1.0);\n////////////////////////////////////////////////\nstruct vtr{double x;double y;};\n\n\ndouble absvtr(vtr a)\n{\n\treturn sqrt(a.x*a.x+a.y*a.y);\n}\ndouble dotp(vtr a,vtr b)\n{\n\treturn a.x*b.x+a.y*b.y;\n}\ndouble abscrossp(vtr a,vtr b)\n{\n\treturn abs(a.x*b.y-a.y*b.x);\n}\nvtr plusvtr(vtr a,vtr b)\n{\n\tvtr c;\n\tc.x=a.x+b.x;\n\tc.y=a.y+b.y;\n\treturn c;\n}\nvtr minusvtr(vtr a,vtr b)\n{\n\tvtr c;\n\tc.x=a.x-b.x;\n\tc.y=a.y-b.y;\n\treturn c;\n}\n\nint main()\n{\n\tint n;cin>>n;\n\tvtr p[4];\n\tcout<<fixed<<setprecision(10);\n\tREP(i,n)\n\t{\n\t\tREP(j,4)cin>>p[j].x>>p[j].y;\n\t\tdouble a,b,c,d;\n\t\tif(dotp(minusvtr(p[1],p[0]),minusvtr(p[2],p[0])>0&&dotp(minusvtr(p[0],p[1]),minusvtr(p[2],p[1])>0)\n\t\t{\n\t\t\ta=abscrossp(minusvtr(p[1],p[0]),minusvtr(p[2],p[0]))/absvtr(minusvtr(p[1],p[0]));\n\t\t}\n\t\telse\n\t\t{\n\t\t\ta=min(abs(minusvtr(p[2],p[0])),abs(minusvtr(p[2],p[1])));\n\t\t}\n\t\t\n\t\tif(dotp(minusvtr(p[1],p[0]),minusvtr(p[3],p[0])>0&&dotp(minusvtr(p[0],p[1]),minusvtr(p[3],p[1])>0)\n\t\t{\n\t\t\ta=abscrossp(minusvtr(p[1],p[0]),minusvtr(p[3],p[0]))/absvtr(minusvtr(p[1],p[0]));\n\t\t}\n\t\telse\n\t\t{\n\t\t\ta=min(abs(minusvtr(p[3],p[0])),abs(minusvtr(p[3],p[1])));\n\t\t}\n\t\t\n\t\tif(dotp(minusvtr(p[3],p[2]),minusvtr(p[0],p[2])>0&&dotp(minusvtr(p[2],p[3]),minusvtr(p[0],p[3])>0)\n\t\t{\n\t\t\ta=abscrossp(minusvtr(p[3],p[2]),minusvtr(p[0],p[2]))/absvtr(minusvtr(p[3],p[2]));\n\t\t}\n\t\telse\n\t\t{\n\t\t\ta=min(abs(minusvtr(p[0],p[2])),abs(minusvtr(p[0],p[3])));\n\t\t}\n\t\t\n\t\tif(dotp(minusvtr(p[3],p[2]),minusvtr(p[1],p[2])>0&&dotp(minusvtr(p[2],p[3]),minusvtr(p[1],p[3])>0)\n\t\t{\n\t\t\ta=abscrossp(minusvtr(p[3],p[2]),minusvtr(p[1],p[2]))/absvtr(minusvtr(p[3],p[2]));\n\t\t}\n\t\telse\n\t\t{\n\t\t\ta=min(abs(minusvtr(p[1],p[2])),abs(minusvtr(p[1],p[3])));\n\t\t}\n\t\tcout<<min(min(a,b),min(c,d))<<endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <algorithm>\n#include <iostream>\n#include <cstring>\n#include <string>\n#include <sstream>\n#include <queue>\n#include <vector>\n#include <set>\n#include <map>\n#include <functional>\n#include <bitset>\n#include <deque>\n#include <cmath>\n\nusing namespace std;\n\ntypedef long long LL;\ntypedef unsigned long long ULL;\ntypedef long double LD;\n\n#define rep(i, a, b) for(int i = a; i <= b; ++i)\n#define dow(i, a, b) for(int i = a; i >= b; --i)\n#define mem(a) memset(a, 0, sizeof(a))\n#define mst(a, b) memset(a, b, sizeof(a))\n#define sfi(a) scanf(\"%d\", &a)\n#define sfl(a) scanf(\"%lld\", &a)\n#define sfd(a) scanf(\"%lf\", &a)\n#define sfs(a) scanf(\"%s\", a)\n#define pb(a) push_back(a)\n#define sync ios::sync_with_stdio(0); cin.tie(0);\n\nconst int MAX = 1e2 + 5;\nconst int L = 2;\nconst LL MOD = 10000;\nconst int dir[MAX][MAX] = {{0,1},{0,-1},{1,0},{-1,0},{-1,-1},{-1,1},{1,1},{1,-1}};\n\nconst double EPS = 1e-8;\nconst double PI = acos(-1.0);\n\ntypedef struct Point Point;\ntypedef struct Line Line;\n\nint cmp(double x);\ndouble sqr(double x);\ndouble det(Point a, Point b);\ndouble dot(Point a, Point b);\ndouble dist(Point a, Point b);\nPoint rotate_point(Point p, double A);\nbool parallel(Line a, Line b);\nbool orthogonal(Line a, Line b);\nPoint PointProjLine(Point p, Line l, Point &ans);\nPoint reflect(Line l, Point p);\ndouble dis_point_segment(Point p, Line l);\ndouble dis_segment_segment(Line a, Line b);\nLine point_make_line(Point a, Point b);\nbool in_segment(Line l, Point p);\nnstruct Point\n{\n\tdouble x, y;\n\tPoint() {}\n\tPoint(double a, double b): x(a), y(b) {}\n\n\tfriend Point operator -(Point a, Point b)\n\t{\n\t\treturn Point(a.x-b.x,a.y-b.y);\n\t}\n\tfriend Point operator +(Point a, Point b)\n\t{\n\t\treturn Point(a.x+b.x,a.y+b.y);\n\t}\n\tfriend bool operator ==(Point a, Point b)\n\t{\n\t\treturn cmp(a.x-b.x)==0 && cmp(a.y-b.y)==0;\n\t}\n\tfriend Point operator *(Point a, double b)\n\t{\n\t\treturn Point(a.x*b,a.y*b);\n\t}\n\tfriend Point operator *(double a, Point b)\n\t{\n\t\treturn Point(a*b.x,a*b.y);\n\t}\n\tfriend Point operator /(Point a, double b)\n\t{\n\t\treturn Point(a.x/b,a.y/b);\n\t}\n\tdouble norm()\n\t{\n\t\treturn sqrt(sqr(x)+sqr(y));\n\t}\n};\n\nstruct Line\n{\n\tPoint a, b;\n\tLine() {}\n\tLine(Point x, Point y): a(x), b(y) {}\n};\n\nbool parallel(Line a, Line b)\n{\n\treturn !cmp(det(a.a-a.b,b.a-b.b));\n}\n\t\nbool orthogonal(Line a, Line b)\n{\n\treturn !cmp(dot(a.a - a.b, b.a - b.b));\n}\n\nPoint PointProjLine(Point p, Line l)\n{\n\tPoint ans;\n\tdouble r = dot((l.b-l.a),(p-l.a))/dot(l.b-l.a,l.b-l.a);\n\tans = l.a + r*(l.b-l.a);\n\treturn ans;\n}\n\nint cmp(double x)\n{\n\tif(abs(x) < EPS)\n\t\treturn 0;\n\tif(x > 0)\n\t\treturn 1;\n\treturn -1;\n}\n\ndouble dis_point_segment(Point p, Line l)\n{\n\tif(cmp(dot(p-l.a,l.b-l.a))<0)\n\t\treturn (p-l.a).norm();\n\tif(cmp(dot(p-l.b,l.a-l.b))<0)\n\t\treturn (p-l.b).norm();\n\treturn abs(det(l.a-p,l.b-p))/dist(l.a,l.b);\n}\n\nbool line_make_point(Line a, Line b, Point &res)\n{\n\tif(parallel(a,b))\n\t\treturn false;\n\tdouble s1 = det(a.a-b.a,b.b-b.a);\n\tdouble s2 = det(a.b-b.a,b.b-b.a);\n\tres = (s1*a.b-s2*a.a)/(s1-s2);\n\treturn true;\n}\n\ndouble dis_segment_segment(Line a, Line b)\n{\n\tPoint res;\n\tif(line_make_point(a, b, res) && in_segment(a, res) && in_segment(b, res))\n\t\treturn 0.;\n\treturn min(min(dis_point_segment(b.a, a), dis_point_segment(b.b, a)), min(dis_point_segment(a.a, b), dis_point_segment(a.b, b)));\n}\n\ndouble sqr(double x)\n{\n\treturn x * x;\n}\n\ndouble det(Point a, Point b)\n{\n\treturn a.x*b.y-a.y*b.x;\n}\n\ndouble dot(Point a, Point b)\n{\n\treturn a.x*b.x+a.y*b.y;\n}\ndouble dist(Point a, Point b)\n{\n\treturn (a-b).norm();\n}\n\nPoint rotate_point(Point p, double A)\n{\n\tdouble tx = p.x, ty = p.y;\n\treturn Point(tx*cos(A)-ty*sin(A),tx*sin(A)+ty*cos(A));\n}\n\nPoint reflect(Line l, Point p)\n{\n\treturn p + ((PointProjLine(p, l) - p) * 2.0);\n}\n\nbool in_segment(Line l, Point p)\n{\n\tbool fa = false, fb = false;\n\tif((p.x >= l.a.x && p.x <= l.b.x) || (p.x <= l.a.x && p.x >= l.b.x))\n\t\tfa = true;\n\tif((p.y >= l.a.y && p.y <= l.b.y) || (p.y <= l.a.y && p.y >= l.b.y))\n\t\tfb = true;\n\treturn fa && fb;\n}\n\nint main()\n{\t\n#ifdef LOCAL\n\t//~ freopen(\"in.txt\", \"r\", stdin);\n#endif\n\n\tint T;\n\tsfi(T);\n\twhile(T--)\n\t{\n\t\tLine a, b;\n\t\tscanf(\"%lf%lf%lf%lf%lf%lf%lf%lf\", &a.a.x, &a.a.y, &a.b.x, &a.b.y, &b.a.x, &b.a.y, &b.b.x, &b.b.y);\n\t\tprintf(\"%.10lf\\n\", dis_segment_segment(a, b));\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <vector>\n#include <iomanip>\n#include <algorithm>\n#include <limits>\n#include <iostream>\n#include <cmath>\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\nnamespace libcomp {\nnamespace geometry {\nstatic const double EPS = 1e-9;\ninline double abs(double x){ return std::abs(x); }\ninline bool tolerant_eq(double a, double b){ return abs(a - b) < EPS; }\n}\n}\nnamespace libcomp {\nnamespace geometry {\nstruct Point {\n\tdouble x;\n\tdouble y;\n\texplicit Point(const double &x = 0.0, const double &y = 0.0) :\n\t\tx(x), y(y)\n\t{ }\n\tstatic Point invalid(){\n\t\tdouble qnan = numeric_limits<double>::quiet_NaN();\n\t\treturn Point(qnan, qnan);\n\t}\n\tbool is_valid() const { return !(std::isnan(x) || std::isnan(y)); }\n\tPoint operator+(const Point &p) const { return Point(x + p.x, y + p.y); }\n\tPoint &operator+=(const Point &p){ return *this = *this + p; }\n\tPoint operator-(const Point &p) const { return Point(x - p.x, y - p.y); }\n\tPoint &operator-=(const Point &p){ return *this = *this - p; }\n\tPoint operator*(double s) const { return Point(x * s, y * s); }\n\tPoint &operator*=(double s){ return *this = *this * s; }\n\tPoint operator*(const Point &p) const {\n\t\treturn Point(x * p.x - y * p.y, x * p.y + y * p.x);\n\t}\n\tPoint &operator*=(const Point &p){ return *this = *this * p; }\n\tPoint operator/(double s) const { return Point(x / s, y / s); }\n\tPoint &operator/=(double s){ return *this = *this / s; }\n\tbool operator==(const Point &p) const { return x == p.x && y == p.y; }\n\tbool operator!=(const Point &p) const { return x != p.x || y != p.y; }\n\tbool operator<(const Point &p) const {\n\t\treturn (x == p.x) ? (y < p.y) : (x < p.x);\n\t}\n\tdouble abs() const { return sqrt(x * x + y * y); }\n\tdouble norm() const { return x * x + y * y; }\n\tPoint unit() const { return *this / abs(); }\n\tPoint ortho() const { return Point(-y, x); }\n};\ninline Point operator*(double s, const Point &p){ return p * s; }\ninline bool tolerant_eq(const Point &a, const Point &b){\n\treturn tolerant_eq(a.x, b.x) && tolerant_eq(a.y, b.y);\n}\ninline double cross(const Point &a, const Point &b){\n\treturn a.x * b.y - a.y * b.x;\n}\ninline double dot(const Point &a, const Point &b){\n\treturn a.x * b.x + a.y * b.y;\n}\ninline int ccw(const Point &a, const Point &b, const Point &c){\n\tPoint d = b - a, e = c - a;\n\tif(cross(d, e) > 0.0){ return 1; }\n\tif(cross(d, e) < 0.0){ return -1; }\n\tif(dot(d, e) < 0.0){ return 2; }\n\tif(d.abs() < e.abs()){ return -2; }\n\treturn 0;\n}\n}\n}\nnamespace libcomp {\nnamespace geometry {\nstruct Line {\n\tPoint a;\n\tPoint b;\n\texplicit Line(const Point &a = Point(), const Point &b = Point()) :\n\t\ta(a), b(b)\n\t{ }\n\tstatic Line invalid(){\n\t\tPoint inv = Point::invalid();\n\t\treturn Line(inv, inv);\n\t}\n\tbool is_valid() const { return a.is_valid() && b.is_valid(); }\n\tbool operator<(const Line &l) const {\n\t\treturn (a == l.a) ? (b < l.b) : (a < l.a);\n\t}\n\tPoint projection(const Point &p) const {\n\t\tdouble t = dot(p - a, b - a) / (b - a).norm();\n\t\treturn a + t * (b - a);\n\t}\n\tPoint reflection(const Point &p) const {\n\t\treturn p + 2.0 * (projection(p) - p);\n\t}\n};\ninline bool tolerant_eq(const Line &a, const Line &b){\n\tconst double x = abs(cross(a.b - a.a, b.b - b.a));\n\tconst double y = abs(cross(a.b - a.a, a.b - b.a));\n\treturn x < EPS && y < EPS;\n}\ninline bool directed_tolerant_eq(const Line &a, const Line &b){\n\tif(!tolerant_eq(a, b)){ return false; }\n\treturn tolerant_eq((a.a - a.b).unit(), (b.a - b.b).unit());\n}\ninline bool is_parallel(const Line &a, const Line &b){\n\treturn abs(cross(a.b - a.a, b.b - b.a)) < EPS;\n}\n}\n}\nnamespace libcomp {\nnamespace geometry {\nstruct Segment {\n\tPoint a;\n\tPoint b;\n\texplicit Segment(const Point &a = Point(), const Point &b = Point()) :\n\t\ta(a), b(b)\n\t{ }\n\tstatic Segment invalid(){\n\t\tPoint inv = Point::invalid();\n\t\treturn Segment(inv, inv);\n\t}\n\tbool is_valid() const { return a.is_valid() && b.is_valid(); }\n\tbool operator<(const Segment &s) const {\n\t\treturn (a == s.a) ? (b < s.b) : (a < s.a);\n\t}\n};\ninline bool tolerant_eq(const Segment &a, const Segment &b){\n\tif(tolerant_eq(a.a, b.a) && tolerant_eq(a.b, b.b)){ return true; }\n\tif(tolerant_eq(a.a, b.b) && tolerant_eq(a.b, b.a)){ return true; }\n\treturn false;\n}\ninline bool directed_tolerant_eq(const Segment &a, const Segment &b){\n\treturn tolerant_eq(a.a, b.a) && tolerant_eq(a.b, b.b);\n}\n}\n}\nnamespace libcomp {\nnamespace geometry {\ninline bool intersect(const Point &a, const Point &b){\n\treturn tolerant_eq(a, b);\n}\ninline bool intersect(const Point &a, const Line &b){\n\treturn abs(cross(b.b - a, b.a - a)) < EPS;\n}\ninline bool intersect(const Line &a, const Point &b){\n\treturn intersect(b, a);\n}\ninline bool intersect(const Point &a, const Segment &b){\n\treturn (b.a - a).abs() + (b.b - a).abs() - (b.b - b.a).abs() < EPS;\n}\ninline bool intersect(const Segment &a, const Point &b){\n\treturn intersect(b, a);\n}\ninline bool intersect(const Line &a, const Line &b){\n\tif(abs(cross(a.b - a.a, b.b - b.a)) > EPS){ return true; }\n\treturn tolerant_eq(a, b);\n}\ninline bool intersect(const Line &a, const Segment &b){\n\treturn cross(a.b - a.a, b.a - a.a) * cross(a.b - a.a, b.b - a.a) < EPS;\n}\ninline bool intersect(const Segment &a, const Line &b){\n\treturn intersect(b, a);\n}\ninline bool intersect(const Segment &a, const Segment &b){\n\tif(ccw(a.a, a.b, b.a) * ccw(a.a, a.b, b.b) > 0){ return false; }\n\tif(ccw(b.a, b.b, a.a) * ccw(b.a, b.b, a.b) > 0){ return false; }\n\treturn true;\n}\n}\n}\nnamespace libcomp {\nnamespace geometry {\ninline double distance(const Point &a, const Point &b){\n\treturn (a - b).abs();\n}\ninline double distance(const Point &a, const Line &b){\n\treturn (a - b.projection(a)).abs();\n}\ninline double distance(const Line &a, const Point &b){\n\treturn distance(b, a);\n}\ninline double distance(const Point &a, const Segment &b){\n\tconst Point r = Line(b.a, b.b).projection(a);\n\tif(intersect(b, r)){ return (r - a).abs(); }\n\treturn min((b.a - a).abs(), (b.b - a).abs());\n}\ninline double distance(const Segment &a, const Point &b){\n\treturn distance(b, a);\n}\ninline double distance(const Line &a, const Line &b){\n\treturn intersect(a, b) ? 0.0 : distance(a, b.a);\n}\ninline double distance(const Line &a, const Segment &b){\n\tif(intersect(a, b)){ return 0.0; }\n\treturn min(distance(a, b.a), distance(a, b.b));\n}\ninline double distance(const Segment &a, const Line &b){\n\treturn distance(b, a);\n}\ninline double distance(const Segment &a, const Segment &b){\n\tif(intersect(a, b)){ return 0.0; }\n\tconst double x = min(distance(a.a, b), distance(a.b, b));\n\tconst double y = min(distance(b.a, a), distance(b.b, a));\n\treturn min(x, y);\n}\n}\n}\nnamespace geom = libcomp::geometry;\nint main(){\n\tios_base::sync_with_stdio(false);\n\tcout << setiosflags(ios::fixed) << setprecision(10);\n\tint T;\n\tcin >> T;\n\twhile(T--){\n\t\tgeom::Segment a, b;\n\t\tcin >> a.a.x >> a.a.y >> a.b.x >> a.b.y;\n\t\tcin >> b.a.x >> b.a.y >> b.b.x >> b.b.y;\n\t\tcout << geom::distance(a, b) << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i, n) for (int i = 0; i < n; i++)\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\nconst int COUNTER_CLOCKWISE = 1;\nconst int CLOCKWISE = -1;\nconst int ONLINE_BACK = 2;\nconst int ONLINE_FRONT = -2;\nconst int ON_SEGMENT = 0;\n\nclass Point\n{\npublic:\n  double x, y;\n  Point(double x = 0, double y = 0) : x(x), y(y) {}\n\n  Point operator+(Point p)\n  {\n    return Point(x + p.x, y + p.y);\n  }\n  Point operator-(Point p)\n  {\n    return Point(x - p.x, y - p.y);\n  }\n  Point operator*(double a)\n  {\n    return Point(a * x, a * y);\n  }\n  Point operator/(double a)\n  {\n    return Point(x / a, y / a);\n  }\n\n  double abs()\n  {\n    return sqrt(norm());\n  }\n  double norm()\n  {\n    return x * x + y * y;\n  }\n\n  bool operator<(const Point &p) const\n  {\n    return x != p.x ? x < p.x : y < p.y;\n  }\n  bool operator==(const Point &p) const\n  {\n    return equals(x, p.x) && equals(y, p.y);\n  }\n\n  void print()\n  {\n    printf(\"%.10f %.10f\\n\", x, y);\n  }\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b)\n{\n  return a.x * b.x + a.y * b.y;\n}\ndouble cross(Vector a, Vector b)\n{\n  return a.x * b.y - a.y * b.x;\n}\n\nstruct Segment\n{\n  Point p1, p2;\n};\n\ntypedef Segment Line;\n\nclass Circle\n{\npublic:\n  Point c;\n  double r;\n  Circle(Point c = Point(), double r = 0) : c(c), r(r) {}\n};\n\ntypedef vector<Point> Polygon;\n\nPoint projection(Line l, Point p)\n{\n  return l.p1 + (l.p2 - l.p1) * (dot(p - l.p1, l.p2 - l.p1) / (l.p2 - l.p1).norm());\n}\n\nPoint reflection(Line l, Point p)\n{\n  Point x = projection(l, p);\n  return p + (x - p) * 2;\n}\n\nint ccw(Point p0, Point p1, Point p2)\n{\n  Vector a = p1 - p0, b = p2 - p0;\n  if (cross(a, b) > EPS)\n  {\n    return COUNTER_CLOCKWISE;\n  }\n  if (cross(a, b) < -EPS)\n  {\n    return CLOCKWISE;\n  }\n  if (dot(a, b) < -EPS)\n  {\n    return ONLINE_BACK;\n  }\n  if (a.norm() < b.norm())\n  {\n    return ONLINE_FRONT;\n  }\n  return ON_SEGMENT;\n}\n\nbool is_parallel(Line l1, Line l2)\n{\n  Vector a = l1.p2 - l1.p1, b = l2.p2 - l2.p1;\n  return equals(cross(a, b), 0);\n}\n\nbool is_orthogonal(Line l1, Line l2)\n{\n  Vector a = l1.p2 - l1.p1, b = l2.p2 - l2.p1;\n  return equals(dot(a, b), 0);\n}\n\nbool intersect(Segment s1, Segment s2)\n{\n  Point p0 = s1.p1, p1 = s1.p2, p2 = s2.p1, p3 = s2.p2;\n  return (ccw(p0, p1, p2) * ccw(p0, p1, p3) <= 0) && (ccw(p2, p3, p0) * ccw(p2, p3, p1) <= 0);\n}\n\nPoint intersection(Segment s1, Segment s2)\n{\n  Point p0 = s1.p1, p1 = s1.p2, p2 = s2.p1, p3 = s2.p2;\n  double a0 = fabs(cross(p2 - p0, p3 - p0)), a1 = fabs(cross(p2 - p1, p3 - p1));\n  return (p0 * a1 + p1 * a0) / (a0 + a1);\n}\n\ndouble distance(Segment s, Point p)\n{\n  Point p0 = s.p1, p1 = s.p2;\n  if (dot(p1 - p0, p - p0) < -EPS)\n  {\n    return (p0 - p).abs();\n  }\n  if (dot(p0 - p1, p - p1) < -EPS)\n  {\n    return (p1 - p).abs();\n  }\n  return fabs(cross(p1 - p0, p - p0)) / (p1 - p0).abs();\n}\n\ndouble distance(Segment s1, Segment s2)\n{\n  if (intersect(s1, s2))\n  {\n    return 0;\n  }\n  double res = distance(s1, s2.p1);\n  res = min(res, distance(s1, s2.p2));\n  res = min(res, distance(s2, s1.p1));\n  res = min(res, distance(s2, s1.p2));\n  return res;\n}\n\nint main()\n{\n  int q;\n  cin >> q;\n  vector<bool> ans;\n  rep(i, q)\n  {\n    double x0, y0, x1, y1, x2, y2, x3, y3;\n    cin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n    Segment s1 = {Point{x0, y0}, Point{x1, y1}}, s2 = {Point{x2, y2}, Point{x3, y3}};\n    printf(\"%.10f\\n\", distance(s1, s2));\n  }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> Point;\ntypedef pair<Point, Point> Line;\nconst double EPS = 1e-16;\n\n// 内積 |a||b|cosθ\ndouble dot(Point a, Point b){\n\t// return a.real() * b.real() + a.imag() * b.imag();\n\treturn (conj(a) * b).real();\n}\n// 外積、符号付面積の２倍　|a||b|sinθ\ndouble cross(Point a, Point b){\n\t// return a.real() * b.imag() - a.imag() * b.real();\n\treturn (conj(a) * b).imag();\n}\n// 点と直線の距離\ndouble line_to_point_dis(Line l, Point p){\n    Point a = l.first, b = l.second, c = p;\n    return fabs(cross(c - a, b - a)) / fabs(abs(b - a));\n}\n// 線分と直線の距離\ndouble seg_to_point_dis(Line l, Point p){\n    Point a = l.first, b = l.second, c = p;\n    if(dot(b - a, c - a) < EPS) return abs(c - a);\n    if(dot(a - b, c - b) < EPS) return abs(c - b);\n    return line_to_point_dis(l, p);\n}\n// 線分と線分の距離\ndouble seg_to_seg_dis(Line a, Line b){\n    double res = seg_to_point_dis(a, b.first);\n    res = min(res, seg_to_point_dis(a, b.second));\n    res = min(res, seg_to_point_dis(b, a.first));\n    res = min(res, seg_to_point_dis(b, a.second));\n    return res;\n}\n\nint main(){\n    int q;\n    cin >> q;\n    for(int i = 0; i < q; i++){\n        double x, y;\n        Point p[4];\n        for(int j = 0; j < 4; j++){\n            cin >> x >> y;\n            p[j] = {x, y};\n        }\n        Line s1 = {p[0], p[1]};\n        Line s2 = {p[2], p[3]};\n        double len = seg_to_seg_dis(s1, s2);\n        printf(\"%.16f\\n\", len);\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <vector>\n#include <cmath>\n\nconst double EPSILON = 1e-10;\n\ninline bool equals(double a, double b) {\n    return std::fabs(a - b) < EPSILON;\n}\n\nstruct Point {\n    double x;\n    double y;\n\n    bool operator < (const Point& p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point& p) const {\n        return equals(x, p.x) && equals(y, p.y);\n    }\n};\n\nPoint operator + (const Point& p1, const Point& p2) {\n    return Point{p1.x + p2.x, p1.y + p2.y};\n}\n\nPoint operator - (const Point& p1, const Point& p2) {\n    return Point{p1.x - p2.x, p1.y - p2.y};\n}\n\nPoint operator * (const Point& p1, double k) {\n    return Point{p1.x * k, p1.y * k};\n}\n\nstruct Segment {\n    Point p1, p2;\n};\n\nstruct Circle {\n    Point center;\n    double radius;\n};\n\nusing Vector = Point;\nusing Line = Segment;\nusing Polygon = std::vector<Point>;\n\n\ndouble norm(const Vector& p) {\n    return p.x * p.x + p.y + p.y;\n}\n\ndouble abs(const Vector& p) {\n    return std::sqrt(norm(p));\n}\n\ndouble dot(const Vector& a, const Vector& b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(const Vector& a, const Vector& b) {\n    return a.x * b.y - a.y * b.x;\n}\n\n\nVector projection(const Segment& s, const Point& p) {\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / norm(base);\n    return s.p1 + base * r;\n}\n\nVector reflection(const Segment& s, const Point& p) {\n    auto proj = projection(s, p);\n    return p + (projection(s, p) - p) * 2.0;\n}\n\nbool is_orthogonal(const Vector& a, const Vector& b) {\n    return equals(dot(a, b), 0.0);\n}\n\nbool is_orthogonal(const Segment& s1, const Segment& s2) {\n    return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nbool is_parallel(const Vector& a, const Vector& b) {\n    return equals(cross(a, b), 0.0);\n}\n\nbool is_parallel(const Segment& s1, const Segment& s2) {\n    return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nenum {\n    COUNTER_CLOCKWISE = 1,\n    CLOCKWISE = -1,\n    ONLINE_BACK = 2,\n    ONLINE_FRONT = -1,\n    ON_SEGMENT = 0,\n};\n\nint ccw(const Point& p0, const Point& p1, const Point& p2) {\n    auto a = p1 - p0;\n    auto b = p2 - p0;\n    if (cross(a, b) > EPSILON) return COUNTER_CLOCKWISE;\n    if (cross(a, b) < -EPSILON) return CLOCKWISE;\n    if (dot(a, b) < -EPSILON) return ONLINE_BACK;\n    if (norm(a) < norm(b)) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\ndouble intersect(const Point& p1, const Point& p2, const Point& p3, const Point& p4) {\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n            ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\n\ndouble intersect(const Segment& s1, const Segment& s2) {\n    return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\ndouble distance(const Point& a, const Point& b) {\n    return abs(a - b);\n}\n\ndouble distanceLP(const Line& l, const Point& p) {\n    return abs(cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1));\n}\n\ndouble distanceSP(const Segment& s, const Point& p) {\n    if (dot(s.p2 - s.p1, p - s.p1) < 0.0) return abs(p - s.p1);\n    if (dot(s.p1 - s.p2, p - s.p2) < 0.0) return abs(p - s.p2);\n    return distanceLP(s, p);\n}\n\ndouble distance(const Segment& s1, const Segment& s2) {\n    using std::min;\n    if (intersect(s1, s2)) return 0.0;\n    return min(min(distanceSP(s1, s2.p1), distanceSP(s1, s2.p2)),\n               min(distanceSP(s2, s1.p1), distanceSP(s2, s1.p2)));\n}\n\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n\nusing namespace std;\n\nint main() {\n    int q;\n    cin >> q;\n    for (int i = 0; i < q; ++i) {\n        array<Point, 4> points;\n        for (auto& p : points) {\n            cin >> p.x >> p.y;\n        }\n        Segment s1{points[0], points[1]};\n        Segment s2{points[2], points[3]};\n        cout << distance(s1, s2) << endl;\n    }\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ntemplate<class T>\nbool chmax(T& a, const T& b) {\n    if (a < b) { a = b; return true; }\n    return false;\n}\ntemplate<class T>\nbool chmin(T& a, const T& b) {\n    if (b < a) { a = b; return true; }\n    return false;\n}\n// std::vector Declaration\ntemplate<typename T>\nvector<T> make_v(size_t a) { return vector<T>(a); }\ntemplate<typename T, typename... Ts>\nauto make_v(size_t a, Ts... ts) {\n    return vector<decltype(make_v<T>(ts...))>(a, make_v<T>(ts...));\n}\n// std::vector Declaration and Initialization\ntemplate<typename T>\nvector<T> make_vector(size_t a, T x) { return vector<T>(a, x); }\ntemplate<typename T, typename U, typename... Ts>\nauto make_vector(size_t a, U b, Ts... ts) {\n    return vector<decltype(make_vector<T>(b,ts...))>(a, make_vector<T>(b, ts...));\n}\n// std::vector Input\ntemplate<typename T>\nistream& operator>>(istream& is, vector<T>& v) {\n    for (auto &e : v) is >> e;\n    return is;\n}\n// std::vector Debug\ntemplate<typename T>\nostream& operator<<(ostream& os, const vector<T>& v) {\n    os << \"[\";\n    bool a = 1;\n    for (auto e : v) {\n        os << (a ? \"\" : \" \");\n        os << e;\n        a = 0;\n    }\n    os << \"]\";\n    return os;\n}\n// std::array Debug\ntemplate<typename T, size_t n>\nostream& operator<<(ostream& os, const array<T, n>& v) {\n    os << \"[\";\n    bool a = 1;\n    for (auto e : v) {\n        os << (a ? \"\" : \" \");\n        os << e;\n        a = 0;\n    }\n    os << \"]\";\n    return os;\n}\n// std::deque Debug\ntemplate<typename T>\nostream& operator<<(ostream& os, const deque<T>& d) {\n    os << \"[\";\n    bool a = 1;\n    for (auto e : d) {\n        os << (a ? \"\" : \" \");\n        os << e;\n        a = 0;\n    }\n    os << \"]\";\n    return os;\n}\n// std::pair Debug\ntemplate<typename T, typename U>\nostream& operator<<(ostream& os, const pair<T, U>& p) {\n    os << \"(\" << p.first << \" \" << p.second << \")\";\n    return os;\n}\n// std::set Debug\ntemplate<typename T>\nostream& operator<<(ostream& os, const set<T>& st) {\n    os << \"{\";\n    bool a = 1;\n    for (auto e : st) {\n        os << (a ? \"\" : \" \");\n        os << e;\n        a = 0;\n    }\n    os << \"}\";\n    return os;\n}\n// std::multiset Debug\ntemplate<typename T>\nostream& operator<<(ostream& os, const multiset<T>& st) {\n    os << \"{\";\n    bool a = 1;\n    for (auto e : st) {\n        os << (a ? \"\" : \" \");\n        os << e;\n        a = 0;\n    }\n    os << \"}\";\n    return os;\n}\n// std::map Debug\ntemplate<typename T, typename U>\nostream& operator<<(ostream& os, const map<T, U>& mp) {\n    os << \"{\";\n    bool a = 1;\n    for (auto e : mp) {\n        os << (a ? \"\" : \" \");\n        os << e.first << \":\" << e.second;\n        a = 0;\n    }\n    os << \"}\";\n    return os;\n}\n// std::tuple Debug\ntemplate<int N, class Tuple>\nvoid out(ostream& os, const Tuple& t){}\ntemplate<int N, class Tuple, class H, class ...Ts>\nvoid out(ostream& os, const Tuple& t) {\n    if (N) os << \" \";\n    os << get<N>(t);\n    out<N+1,Tuple,Ts...>(os, t);\n}\ntemplate<class ...Ts>\nostream& operator<<(ostream& os, const tuple<Ts...>& t) {\n    os << \"(\";\n    out<0,tuple<Ts...>,Ts...>(os, t);\n    os << \")\";\n    return os;\n}\n// Debug\n// Weighted edge\ntemplate<typename T>\nstruct edge {\n    int src, to;\n    T cost;\n    edge() {}\n    edge(int to, T cost) : src(-1), to(to), cost(cost) {}\n    edge(int src, int to, T cost) : src(src), to(to), cost(cost) {}\n    friend ostream& operator<<(ostream& os, const edge& e) {\n        return os << \"(\" << e.src << \"->\" << e.to << \":\" << e.cost << \")\";\n    }\n};\nusing LL = int64_t;\nconst int64_t MOD = 1e9+7;\nusing Real = double;\nReal EPS = 1e-8;\nusing Point = complex<Real>;\nstruct Line {\n    Point a, b;\n    Line() {}\n    Line(const Point& a, const Point& b) : a(a), b(b) {}\n    friend ostream& operator<<(ostream& os, Line& l) {\n        return os << \"[\" << l.a << \",\" << l.b << \"]\";\n    }\n};\nstruct Segment : Line {\n    Segment() = default;\n    Segment(const Point& a, const Point& b) : Line(a, b) {}\n};\ninline bool eq(Real a, Real b) { return abs(b - a) < EPS; }\nReal radian_to_degree(Real r) {\n    return r * 180.0 / M_PI;\n}\nReal degree_to_radian(Real d) {\n    return d * M_PI / 180.0;\n}\nPoint rotate(const Point &p, Real theta) {\n    return p * polar(1., theta);\n}\nReal cross(const Point& a, const Point& b) {\n    return a.real() * b.imag() - a.imag() * b.real();\n}\nReal dot(const Point& a, const Point& b) {\n    return a.real() * b.real() + a.imag() * b.imag();\n}\nPoint projection(const Line& l, const Point& p) {\n    Real A = dot(l.b - l.a, p - l.a),\n         B = dot(l.a - l.b, p - l.b);\n    return (A * l.b + B * l.a) / (A + B);\n}\nbool parallel(const Line& l1, const Line& l2) {\n    return eq(cross(l1.a - l1.b, l2.a - l2.b), 0.0);\n}\nbool orthogonal(const Line& l1, const Line& l2) {\n    return eq(dot(l1.a - l1.b, l2.a - l2.b), 0.0);\n}\nconst int COUNTER_CLOCKWISE = 1,\n          CLOCKWISE = -1,\n          ONLINE_BACK = 2,\n          ONLINE_FRONT = -2,\n          ON_SEGMENT = 0;\nint ccw(const Point& a, Point b, Point c) {\n    b = b - a, c = c - a;\n    if (cross(b, c) > EPS) return COUNTER_CLOCKWISE;\n    if (cross(b, c) < -EPS) return CLOCKWISE;\n    if (dot(b, c) < 0) return ONLINE_BACK;\n    if (norm(b) < norm(c)) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\nbool intersected(const Line& l, const Point& p) {\n    return abs(ccw(l.a, l.b, p)) != 1;\n}\nbool intersected(const Segment& s, const Point& p) {\n    return ccw(s.a, s.b, p) == 0;\n}\nbool intersected(const Line& l, const Segment& s) {\n    return cross(l.b - l.a, s.a - l.a) * cross(l.b - l.a, s.b - l.a) < EPS;\n}\nbool intersected(const Segment& s1, const Segment& s2) {\n    return ccw(s1.a, s1.b, s2.a) * ccw(s1.a, s1.b, s2.b) <= 0 and\n           ccw(s2.a, s2.b, s1.a) * ccw(s2.a, s2.b, s1.b) <= 0;\n}\nReal distance(const Line& l, const Point& p) {\n    return abs(p - projection(l, p));\n}\nReal distance(const Segment& s, const Point& p) {\n    Point r = projection(s, p);\n    if (intersected(s, r)) return abs(r - p);\n    return min(abs(s.a - p), abs(s.b - p));\n}\nReal distance(const Line &l, const Segment &s) {\n    if (intersected(l, s)) return 0;\n    return min(distance(l, s.a), distance(l, s.b));\n}\nReal distance(const Segment& s1, const Segment& s2) {\n    if (intersected(s1, s2)) return 0.0;\n    return min({ distance(s1, s2.a), distance(s1, s2.b),\n                 distance(s2, s1.a), distance(s2, s1.b) });\n}\nPoint crosspoint(const Line& l1, const Line& l2) {\n    Real A = cross(l2.a - l1.a, l2.b - l1.a),\n         B = cross(l2.b - l1.b, l2.a - l1.b);\n    return (A * l1.b + B * l1.a) / (A + B);\n}\nint main()\n{\n    cout << fixed << setprecision(10);\n    int q; cin >> q;\n    while (q--) {\n        double x1, y1, x2, y2, x3, y3, x4, y4;\n        cin >> x1 >> y1 >> x2 >> y2 >> x3 >> y3 >> x4 >> y4;\n        Segment l1{Point{x1, y1}, Point{x2, y2}},\n                l2{Point{x3, y3}, Point{x4, y4}};\n        cout << distance(l1, l2) << endl;\n    }\n    return 0;\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<complex>\n#include<utility>\n#include<vector>\n#include<cmath>\n#include<cassert>\n\nusing namespace std;\n\ndouble eps=1e-9;\n\ntypedef complex<double> Point;\ntypedef complex<double> Vector;\n\ntemplate<class T> bool eq(T a,T b){\n\treturn abs(a-b)<eps;\n}\n\ntemplate<class T> int sgn(T r){\n\treturn eq(r,0.0)?0:(r>0?1:-1);\n}\n\nstruct Circle{\n\tPoint center;\n\tdouble r;\n\tCircle(Point c,double r):center(c),r(r){}\n\tCircle(){}\n};\n\nstruct Line{\n\tdouble a,b,c;//ax+by=c\n\tLine(){}\n\tLine(double a,double b,double c):a(a),b(b),c(c){}\n\tLine(Point p1,Point p2){//not verified\n\t\tif(eq(abs(p1-p2),0.0)){\n\t\t\tfprintf(stderr,\"called Line for same points\\n\");\n\t\t\tassert(0);\n\t\t}\n\t\tdouble x1=p1.real(),y1=p1.imag();\n\t\tdouble x2=p2.real(),y2=p2.imag();\n\t\ta=y2-y1;\n\t\tb=-(x2-x1);\n\t\tc=x1*y2-x2*y1;\n\t}\n};\n\nvoid print(Point p){\n\tif(isnan(p.real())||isnan(p.imag())){\n\t\tprintf(\"NaN Point\\n\");\n\t\treturn;\n\t}\n\tprintf(\"(%f,%f)\\n\",p.real(),p.imag());\n}\n\ndouble pointsDistance(Point p1,Point p2){/*abs(p1-p2)と書いてよい*/\n\tdouble dx=p1.real()-p2.real();\n\tdouble dy=p1.imag()-p2.imag();\n\treturn sqrt(dx*dx+dy*dy);\n}\n\ndouble linePointDistance(Line l,Point p){\n\tdouble a=l.a,b=l.b,c=l.c;\n\tdouble x=p.real(),y=p.imag();\n\tdouble num=abs(a*x+b*y-c);\n\tdouble den=sqrt(a*a+b*b);\n\treturn num/den;\n}\n\nVector basisVector(Vector v){\n\tif(eq(v.real(),0.0)&&eq(v.imag(),0.0)) return v;\n\treturn v/sqrt(norm(v));\n}\n\nPoint linePointProjection(Line l,Point p){\n\tdouble dx=l.a,dy=l.b;\n\tdouble a=l.a,b=l.b,c=l.c;\n\tdouble x=p.real(),y=p.imag();\n\tVector ba=basisVector(Vector(dx,dy));\n\tdouble num=a*x+b*y-c;\n\tdouble den=sqrt(a*a+b*b);\n\tVector v=ba*(-num/den);\n\treturn p+v;\n}\n\nvector<Point> circleLineIntersection(Circle c,Line l){\n\tvector<Point> res;\n\tPoint p=linePointProjection(l,c.center);\n\tdouble d=linePointDistance(l,c.center);\n\tint s=sgn(d-c.r);\n\tif(s==1){\n\t\treturn res;//empty\n\t}else if(s==0){\n\t\tres.push_back(p);\n\t\treturn res;\n\t}else{\n\t\tdouble r=c.r;\n\t\tdouble t=sqrt(r*r-d*d);\n\t\tVector e=basisVector(Vector(l.b,-l.a));\n\t\tres.push_back(p+t*e);\n\t\tres.push_back(p-t*e);\n\t\treturn res;\n\t}\n}\n\nvector<Point> circlesIntersection(Circle c1,Circle c2){/*一致するとき処理できない*/\n\tif(eq(c1.center.real(),c2.center.real())&&eq(c1.center.imag(),c2.center.imag())&&\n\t\teq(c1.r,c2.r)){\n\t\t\t\tPoint p=Point(NAN,NAN);\n\t\t\t\tvector<Point> v;\n\t\t\t\tv.push_back(p);\n\t\t\t\treturn v;\n\t}\n\tdouble d=pointsDistance(c1.center,c2.center);\n\tdouble r1=c1.r,r2=c2.r;\n\tdouble dif=max(r1,r2)-min(r1,r2);\n\tdouble sum=r1+r2;\n\tif(sgn(d-sum)==1||sgn(dif-d)==1){//d>sum||dif>d\n\t\tvector<Point> v;\n\t\treturn v;\n\t}\n\tdouble x1=c1.center.real(),y1=c1.center.imag();\n\tdouble x2=c2.center.real(),y2=c2.center.imag();\n\tLine l=Line(-x1*2+x2*2,-y1*2+y2*2,r1*r1-r2*r2-(x1*x1-x2*x2)-(y1*y1-y2*y2));\n\treturn circleLineIntersection(c1,l);\n}\n\ndouble det(double a,double b,double c,double d){\n\treturn a*d-b*c;\n}\n\nPoint linesIntersection(Line l1,Line l2){/*平行の時は常にNAN*/\n\tdouble a=l1.a,b=l1.b,c=l1.c;\n\tdouble d=l2.a,e=l2.b,f=l2.c;\n\tdouble den=det(a,b,d,e);\n\tdouble numx=det(c,b,f,e);\n\tdouble numy=det(a,c,d,f);\n\tif(eq(den,0.0)){\n\t\treturn Point(NAN,NAN);\n\t}\n\treturn Point(numx/den,numy/den);\n}\n\n//circlesIntersection verify AOJ1190 ICPC Domestic 2013 Balloon\n\ndouble crossProduct(Vector a,Vector b){\n\treturn (conj(a)*b).imag();\n}\n\ndouble dotProduct(Vector a,Vector b){\n\treturn (conj(a)*b).real();\n}\n\nint ccw(Point p1,Point p2,Point p3){\n\t/*p1,p2,p3はすべて異なると仮定\n\tそうでない場合の戻り値は不定\n\tではなく\n\tp1!=p2と仮定*/\n\tVector b=p2-p1;\n\tVector c=p3-p2;\n\tint s=sgn(crossProduct(b,c));\n\tif(s==1) return 1;//counterclockwise\n\tif(s==-1) return -1;//clockwise\n\tint t=sgn(dotProduct(b,c));\n\tif(t==-1) return 2;//3--1--2\n\tint u=sgn(norm(b)-norm(c));\n\tif(eq(norm(c),0.0)) return 0;//1==3\n\tif(u==-1) return -2;//1--2--3\n\treturn 0;//1--3--2 or 2==3\n}\n\nstruct Segment{\n\tPoint p1,p2;\n\tLine l;\n\tSegment(){}\n\tSegment(Point p1,Point p2):p1(p1),p2(p2){\n\t\tl=Line(p1,p2);\n\t}\n};\n\nint oneLineCCW(Point p1,Point p2,Point p3){\n\t/*p1!=p2かつp1,p2,p3は一直線上と仮定*/\n\t/*それ以外の時の戻り値は不定*/\n\tVector b=p2-p1,c=p3-p1;\n\tif(sgn(dotProduct(b,c))==-1) return 2;//p3--p1--p2\n\tif(eq(abs(p1-p3),0.0)) return 1;//p1==p3--p2\n\tint s=sgn(norm(b)-norm(c));\n\tif(s==1) return 0;//p1--p3--p2\n\tif(s==0) return -1;//p1--p3==p2\n\telse return -2;//p1--p2--p3\n}\n\ndouble pointSegmentDistance(Point p,Segment s){\n\tLine l=s.l;\n\tdouble d=linePointDistance(l,p);\n\tPoint pr=linePointProjection(l,p);\n\tint x=oneLineCCW(s.p1,s.p2,pr);\n\tif(x>=-1&&x<=1) return d;\n\tdouble a=abs(s.p1-p);\n\tdouble b=abs(s.p2-p);\n\treturn min(a,b);\n}\n\nbool segmentsIntersect(Segment s1,Segment s2){\n\tPoint p[2],q[2];\n\tp[0]=s1.p1,p[1]=s1.p2;\n\tq[0]=s2.p1,q[1]=s2.p2;\n\treturn ccw(p[0],p[1],q[0])*ccw(p[0],p[1],q[1])<=0&&\n\t\tccw(q[0],q[1],p[0])*ccw(q[0],q[1],p[1])<=0;\n}\n\ndouble segmentsDistance(Segment s1,Segment s2){\n\tbool flg=segmentsIntersect(s1,s2);\n\tif(flg) return 0;\n\tPoint p[2],q[2];\n\tp[0]=s1.p1,p[1]=s1.p2;\n\tq[0]=s2.p1,q[1]=s2.p2;\n\tdouble res=-1;\n\tfor(int k=0;k<2;k++){\n\t\tPoint r=linePointProjection(s2.l,p[k]);\n\t\tif(abs(oneLineCCW(q[0],q[1],r))<=1){\n\t\t\tdouble tmp=abs(r-p[k]);\n\t\t\tif(res<0||tmp<res) res=tmp;\n\t\t}\n\t\tr=linePointProjection(s1.l,q[k]);\n\t\tif(abs(oneLineCCW(p[0],p[1],r))<=1){\n\t\t\tdouble tmp=abs(r-q[k]);\n\t\t\tif(res<0||tmp<res) res=tmp;\n\t\t}\n\t}\n\tfor(int i=0;i<2;i++) for(int j=0;j<2;j++){\n\t\tdouble tmp=abs(p[i]-q[j]);\n\t\tif(res<0||tmp<res) res=tmp;\n\t}\n\treturn res;\n}\n\nPoint inputPoint(){\n\tdouble x,y;\n\tscanf(\"%lf%lf\",&x,&y);\n\treturn Point(x,y);\n}\n\nint main(){\n\tint Q;\n\tscanf(\"%d\",&Q);\n\tfor(int datano=0;datano<Q;datano++){\n\t\tPoint p1,p2;\n\t\tPoint q1,q2;\n\t\tp1=inputPoint();\n\t\tp2=inputPoint();\n\t\tq1=inputPoint();\n\t\tq2=inputPoint();\n\t\tif(abs(p1-p2)<eps) break;\n\t\tSegment s1=Segment(p1,p2);\n\t\tSegment s2=Segment(q1,q2);\n\t\tdouble ans=segmentsDistance(s1,s2);\n\t\tprintf(\"%.9f\\n\",ans);\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<string>\n#include<algorithm>\n#include<cmath>\n#include<vector>\n#include<stack>\n#include<climits>\n#include<cstring>\n#include<queue>\nusing namespace std;\n\nconst int INF = INT_MAX / 3;\n\n#define REP(i,n) for(int i=0;i<(int)n;i++)\n#define FOR(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i)\n#define ALL(c) (c).begin(), (c).end()\n\n\ndouble EPS = 1e-10;\n\ndouble add(double a, double b) {\n\tif (abs(a + b) < EPS * (abs(a) + abs(b))) return 0;\n\treturn a + b;\n}\n\nstruct P {\n\tdouble x, y;\n\tP() {}\n\tP(double x, double y) : x(x), y(y) {\n\t}\n\tP operator +(P p) {\n\t\treturn P(add(x, p.x), add(y, p.y));\n\t}\n\tP operator -(P p) {\n\t\treturn P(add(x, -p.x), add(y, -p.y));\n\t}\n\tP operator *(double d) {\n\t\treturn P(d*x, d*y);\n\t}\n\tdouble dot(P p) {\n\t\treturn add(x*p.x, y*p.y);\n\t}\n\tdouble det(P p) {\n\t\treturn add(x*p.y, -y*p.x);\n\t}\n\tvoid print() {\n\t\tprintf(\"%.10lf %.10lf \\n\", x, y);\n\t\treturn;\n\t}\n};\n\ndouble dist(P &p, P &q, P &r){\n\tif((q-p).dot(r-p)*(p-q).dot(r-q) >= 0){\n\t\tdouble a = q.y-p.y;\n\t\tdouble b = -q.x+p.x;\n\t\tdouble c = -p.x*q.y+p.y*q.x;\n\t\treturn fabs(a*r.x+b*r.y+c)/sqrt(a*a+b*b);\n\t}else{\n\t\treturn min (sqrt((r.x-p.x)*(r.x-p.x)+(r.y-p.y)*(r.y-p.y)), sqrt((r.x-q.x)*(r.x-q.x)+(r.y-q.y)*(r.y-q.y)));\n\t}\n\t\n}\n\nP crossPoint(P p0, P p1, P p2, P p3){\n\tP q0 = p1-p0;\n\tP q1 = p3-p2;\n\tP r = p0 + (p1-p0)*((p3-p2).det(p2-p0)/(p3-p2).det(p1-p0));\n\treturn r;\n}\n\nbool isCross(P &p0,P &p1,P &p2,P &p3){\n\tP r = crossPoint(p0, p1, p2, p3);\n\treturn ((p1-p0).dot(r-p0) * (p0-p1).dot(r-p1)) >=0 && ((p3-p2).dot(r-p2) * (p2-p3).dot(r-p3)) >=0;;\n}\n\ndouble Distance(P &p0,P &p1,P &p2,P &p3){\n\tif(isCross(p0, p1, p2, p3)){\n\t\treturn 0;\n\t}\n\tdouble d = dist(p0, p1, p2);\n\td = min(d, dist(p0, p1, p3));\n\td = min(d, dist(p2, p3, p0));\n\td = min(d, dist(p2, p3, p1));\n\treturn d;\n}\n\nint main(){\n\tint q;\n\tcin >> q ;\n\tREP(i,q){\n\t\tP p0, p1, p2, p3;\n\t\tcin >> p0.x >> p0.y >> p1.x >> p1.y >> p2.x >> p2.y >> p3.x >> p3.y ;\n\t\tprintf(\"%.10lf \\n\", Distance(p0, p1, p2, p3));\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <cmath>\n#include <complex>\n#include <iostream>\n#include <vector>\n\n// ???, ????????????\ntypedef std::complex<double> Point;\ntypedef Point Vector;\n\nnamespace std {\n\tbool operator < (const Point &a, const Point &b){\n\t\treturn a.real() != b.real() ? a.real() < b.real() : a.imag() < b.imag();\n\t}\n\tistream& operator >> (istream &is, Point &a){\n\t\tdouble x, y;\n\t\tis >> x >> y;\n\t\ta = Point(x, y);\n\t\treturn is;\n\t}\n}\n\n// ??´???\nstruct Line {\n\tPoint p1, p2;\n\tLine(){}\n\tLine(const Point &p1, const Point &p2): p1(p1), p2(p2){}\n};\ntypedef Line Segment;\n\nnamespace std {\n\tistream& operator >> (istream &is, Line &a){\n\t\treturn is >> a.p1 >> a.p2;\n\t}\n}\n\n// ???\nstruct Circle {\n\tPoint p; double r;\n\tCircle(){}\n\tCircle(const Point &p, double r): p(p), r(r){}\n};\n\nnamespace std {\n\tistream& operator >> (istream &is, Circle &a){\n\t\treturn is >> a.p >> a.r;\n\t}\n}\n\n// ????§???¢\ntypedef std::vector<Point> Polygon;\n\nconst double EPS = 1e-12;\nconst double INF = 1e12;\nconst double PI = acos(-1.0);\n\n// ????????¨??????????????¢???\nenum CCW {\n\tCOUNTER_CLOCKWISE = 1,\n\tCLOCKWISE = -1,\n\tONLINE_BACK = 2,\n\tONLINE_FRONT = -2,\n\tON_SEGMENT = 0,\n};\n\n// ?????¢????£????????????¢???\nenum {\n\tOUT = 0,\n\tON = 1,\n\tIN = 2,\n};\n\n\n// a ??? 2 ??? (a ^ 2)\ndouble SQ(double a);\n\n// ?????????????????????????????¢??°\nbool EQ(double a, double b);\nbool NEQ(double a, double b);\nbool LT(double a, double b);\nbool GT(double a, double b);\nbool LEQ(double a, double b);\nbool GEQ(double a, double b);\n\n// ??§?????? <=> ?????°?????????\ndouble toDeg(double t);\ndouble toRad(double t);\n\n// ????????? (dot(a, a))\ndouble norm(const Vector &a);\n\n// ??????, ??????\ndouble dot(const Vector &a, const Vector &b);\ndouble cross(const Vector &a, const Vector &b);\n\n// ??´???, ??????\nbool orthogonal(const Segment &s1, const Segment &s2);\nbool parallel(const Segment &s1, const Segment &s2);\n\n// ?°???±, ????°?\nPoint project(const Line &l, const Point &p);\nPoint reflect(const Line &l, const Point &p);\n\n// ?????? (p0, p1) ??¨??? p2 ???????????¢???\nint ccw(const Point &p0, const Point &p1, const Point &p2);\n\n// ????????????\nbool intersectLP(const Line &l, const Point &p);\nbool intersectLL(const Line &l1, const Line &l2);\nbool intersectLS(const Line &l, const Segment &s);\nbool intersectSP(const Segment &s, const Point &p);\nbool intersectSS(const Segment &s1, const Segment &s2);\nint intersectCP(const Circle &c, const Point &p);\nbool intersectCL(const Circle &c, const Line &l);\nint intersectCS(const Circle &c, const Segment &s);\nint intersectCC(const Circle &c1, const Circle &c2);\n\n// ?????¢\ndouble distanceLP(const Line &l, const Point &p);\ndouble distanceLL(const Line &l1, const Line &l2);\ndouble distanceLS(const Line &l, const Segment &s);\ndouble distanceSP(const Segment &s, const Point &p);\ndouble distanceSS(const Segment &s1, const Segment &s2);\ndouble distanceCP(const Circle &c, const Point &p);\ndouble distanceCL(const Circle &c, const Line &l);\ndouble distanceCS(const Circle &c, const Segment &s);\ndouble distanceCC(const Circle &c1, const Circle &c2);\n\n// ??????\nPoint crossPointLL(const Line &l1, const Line &l2);\nPoint crossPointLS(const Line &l, const Segment &s);\nPoint crossPointSS(const Segment &s1, const Segment &s2);\nstd::vector<Point> crossPointCL(const Circle &c, const Line &l);\nstd::vector<Point> crossPointCS(const Circle &c, const Segment &s);\nstd::vector<Point> crossPointCC(const Circle &c1, const Circle &c2);\n\n\ndouble SQ(double a){\n\treturn a * a;\n}\n\nbool EQ(double a, double b){\n\treturn std::abs(a - b) < EPS;\n}\n\nbool NEQ(double a, double b){\n\treturn !EQ(a, b);\n}\n\nbool LT(double a, double b){\n\treturn a - b < -EPS;\n}\n\nbool GT(double a, double b){\n\treturn a - b > EPS;\n}\n\nbool LEQ(double a, double b){\n\treturn !GT(a, b);\n}\n\nbool GEQ(double a, double b){\n\treturn !LT(a, b);\n}\n\ndouble toDeg(double t){\n\treturn t * 180 / PI;\n}\n\ndouble toRad(double t){\n\treturn t / 180 * PI;\n}\n\ndouble norm(const Vector &a){\n\treturn SQ(a.real()) + SQ(a.imag());\n}\n\ndouble dot(const Vector &a, const Vector &b){\n\treturn (conj(a) * b).real();\n}\n\ndouble cross(const Vector &a, const Vector &b){\n\treturn (conj(a) * b).imag();\n}\n\n// AOJ CGL_2_A\nbool orthogonal(const Segment &s1, const Segment &s2){\n\treturn EQ(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n// AOJ CGL_2_A\nbool parallel(const Segment &s1, const Segment &s2){\n\treturn EQ(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n// AOJ CGL_1_A\nPoint project(const Line &l, const Point &p){\n\tVector base = l.p2 - l.p1;\n\tdouble r = dot(p - l.p1, base) / norm(base);\n\treturn l.p1 + base * r;\n}\n\n// AOJ CGL_1_B\nPoint reflect(const Line &l, const Point &p){\n\treturn p + (project(l, p) - p) * 2.0;\n}\n\n// AOJ CGL_1_C\nint ccw(const Point &p0, const Point &p1, const Point &p2){\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (GT(cross(a, b), 0.0)) return COUNTER_CLOCKWISE;\n\tif (LT(cross(a, b), 0.0)) return CLOCKWISE;\n\tif (LT(dot(a, b), 0.0)) return ONLINE_BACK;\n\tif (LT(norm(a), norm(b))) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\nbool intersectLP(const Line &l, const Point &p){\n\treturn ~ccw(l.p1, l.p2, p) & 1;\n\t// ONLINE_BACK or ONLINE_FRONT or ON_SEGMENT\n}\n\nbool intersectLL(const Line &l1, const Line &l2){\n\treturn !parallel(l1, l2);\n}\n\nbool intersectLS(const Line &l, const Segment &s){\n\treturn LEQ(cross(l.p2 - l.p1, s.p1 - l.p1) * cross(l.p2 - l.p1, s.p2 - l.p1), 0.0);\n}\n\nbool intersectSP(const Segment &s, const Point &p){\n\treturn ccw(s.p1, s.p2, p) == ON_SEGMENT;\n}\n\n// CGL_2_B\nbool intersectSS(const Segment &s1, const Segment &s2){\n\treturn ccw(s1.p1, s1.p2, s2.p1) * ccw(s1.p1, s1.p2, s2.p2) <= 0 &&\n\t\tccw(s2.p1, s2.p2, s1.p1) * ccw(s2.p1, s2.p2, s1.p2) <= 0;\n}\n\nint intersectCP(const Circle &c, const Point &p){\n\tdouble dd = norm(c.p - p);\n\tif (LT(dd, SQ(c.r))) return IN;\n\tif (EQ(dd, SQ(c.r))) return ON;\n\treturn OUT;\n}\n\nbool intersectCL(const Circle &c, const Line &l){\n\tdouble d = distanceLP(l, c.p);\n\treturn LEQ(d, c.r);\n}\n\nint intersectCS(const Circle &c, const Segment &s){\n\tdouble dd1 = norm(c.p - s.p1);\n\tdouble dd2 = norm(c.p - s.p2);\n\tif (LT(dd1, SQ(c.r)) && LT(dd2, SQ(c.r))) return IN;\n\tif (GT(distanceCS(c, s), 0.0)) return OUT;\n\treturn ON;\n}\n\n// c1 ??? c2 ???????????????????????¨??? IN\n// c1 ??? c2 ????????£???????????¨??? ON\n// c1 ??? c2 ?????????????????¨??? OUT\nint intersectCC(const Circle &c1, const Circle &c2){\n\tif (GT(std::abs(c1.p - c2.p), c1.r + c2.r)) return OUT;\n\tif (LT(std::abs(c1.p - c2.p), c2.r)) return IN;\n\tif (LT(std::abs(c1.p - c2.p), c1.r)) return OUT;\n\treturn ON;\n}\n\ndouble distanceLP(const Line &l, const Point &p){\n\treturn std::abs(cross(l.p2 - l.p1, p - l.p1)) / std::abs(l.p2 - l.p1);\n}\n\ndouble distanceLL(const Line &l1, const Line &l2){\n\tif (intersectLL(l1, l2)) return 0.0;\n\treturn distanceLP(l1, l2.p1);\n}\n\ndouble distanceLS(const Line &l, const Segment &s){\n\tif (intersectLS(l, s)) return 0.0;\n\treturn std::min(distanceLP(l, s.p1), distanceLP(l, s.p2));\n}\n\ndouble distanceSP(const Segment &s, const Point &p){\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0) return std::abs(p - s.p1);\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0) return std::abs(p - s.p2);\n\treturn distanceLP(s, p);\n}\n\ndouble distanceSS(const Segment &s1, const Segment &s2){\n\tif (intersectSS(s1, s2)) return 0.0;\n\treturn std::min(\n\t\tstd::min(\n\t\t\tdistanceSP(s1, s2.p1),\n\t\t\tdistanceSP(s1, s2.p2)\n\t\t),\n\t\tstd::min(\n\t\t\tdistanceSP(s2, s1.p1),\n\t\t\tdistanceSP(s2, s1.p2)\n\t\t)\n\t);\n}\n\ndouble distanceCP(const Circle &c, const Point &p){\n\treturn std::abs(std::abs(c.p - p) - c.r);\n} \n\ndouble distanceCL(const Circle &c, const Line &l){\n\tif (intersectCL(c, l)) return 0.0;\n\treturn distanceLP(l, c.p) - c.r;\n}\n\ndouble distanceCS(const Circle &c, const Segment &s){\n\tif (intersectCS(c, s)) return 0.0;\n\treturn std::min(distanceCP(c, s.p1), distanceCP(c, s.p2));\n}\n\ndouble distanceCC(const Circle &c1, const Circle &c2){\n\tif (intersectCC(c1, c2) == ON) return 0.0;\n\tif (intersectCC(c1, c2) == IN){\n\t\treturn c2.r - (std::abs(c1.p - c2.p) + c1.r);\n\t}\n\tif (intersectCC(c2, c1) == IN){\n\t\treturn c1.r - (std::abs(c1.p - c2.p) + c2.r);\n\t}\n\treturn (c1.r + c2.r) - (c1.r + c2.r);\n}\n\n\n#include <cstdio>\nusing namespace std;\n\nint main()\n{\n\tint q;\n\tcin >> q;\n\twhile (q--){\n\t\tSegment s1, s2;\n\t\tcin >> s1 >> s2;\n\t\tprintf(\"%.20f\\n\", distanceSS(s1, s2));\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "\n#include<bits/stdc++.h>\n\ntypedef long double     lf;\n\nusing namespace std;\n\nconst lf EPS = 1e-9;\nconst lf oo = 1e15;\n\nstruct pt {\n  lf x, y;\n  pt( ) { }\n  pt( lf x, lf y ) : x( x ), y ( y ) { }\n};\n\ninline lf x( pt P ) { return P.x; }\ninline lf y( pt P ) { return P.y; }\n\nistream& operator >> ( istream& in, pt& p ) {\n  lf x,y; in >> x >> y;\n  p = pt(x,y); return in;\n}\n\nostream& operator << ( ostream& out, const pt& p ) {\n  out << double(p.x) << \" \" << double(p.y);\n  return out;\n}\n\npt operator + ( const pt& A, const pt& B ) {\n  return pt( x(A)+x(B), y(A)+y(B) );\n}\n\npt operator - ( const pt& A, const pt& B ) {\n  return pt( x(A)-x(B), y(A)-y(B) );\n}\n\n\npt operator * ( const lf& B, const pt& A ) {\n  return pt( x(A)*B, y(A)*B );\n}\n\npt operator * ( const pt& A, const lf& B ) {\n  return pt( x(A)*B, y(A)*B  );\n}\n\ninline lf dot( pt A, pt B ) {\n  return x(A)*x(B) + y(A)*y(B);\n}\n\ninline lf norm( pt A ) {\n  return x(A)*x(A) + y(A)*y(A);\n}\n\ninline lf abs( pt A ) {\n  return sqrt( norm(A) );\n}\n\ninline lf dist ( pt A, pt B ) { return abs( B - A ); }\n\nlf distToLine (pt p, pt A, pt B, pt &c) {\n  lf u = dot( p-A , B-A ) / norm( B-A );\n  c = A + u*( B-A );\n  return dist( p , c );\n}\n\npt refPoint(pt X, pt A, pt B) {\n  pt aux; distToLine(X, A, B, aux);\n  return X + lf(2.0)*(aux-X);\n}\n\ninline bool same ( lf a, lf b ) {\n  return a+EPS > b && b+EPS > a;\n}\n\ninline lf cross( pt A, pt B ) {\n  return x(A)*y(B) - y(A)*x(B);\n}\n\n///CHANGE\n// 0  for collineal points ( angle = 0 )\n// 1  for angle BAX counter clockwise\n// -1 for angle BAX clockwise\ninline int ccw (pt X, pt A, pt B) {\n  lf c = cross( B-A, X-A );\n  if( same( c, 0.0 ) ) { return 0; }\n  if( c > EPS ) { return 1; }\n  return -1;\n}\n\n///CHANGE\ninline bool segContains ( pt X, pt A, pt B) {\n  if ( !same ( 0, cross ( A-X, B-X ) ) ) return 0;\n  return ( dot ( A-X, B-X ) < EPS );\n}\n\ninline bool parallel( pt A, pt B, pt C, pt D ) {\n  return same ( 0, cross( B-A, D-C ) );\n}\n\n///NEW\ninline bool ortho( pt A, pt B, pt C, pt D ) {\n  return same ( 0, dot( B-A, D-C ) );\n}\n\ninline bool samePt ( pt A, pt B ) {\n  return same ( x(A), x(B) ) && same ( y(A), y(B) );\n}\n\npt linesIntersection ( pt A, pt B, pt C, pt D ) {\n  lf x = cross ( C, D-C ) - cross ( A, D-C );\n  x /= cross ( B-A, D-C );\n  return A + x*(B-A);\n}\n\ninline bool collinearSegsIntersects ( pt A, pt B, pt C, pt D ) {\n  return segContains(A,C,D) || segContains(B,C,D)\n      || segContains(C,A,B) || segContains(D,A,B);\n}\n\nbool segmentsIntersect(pt A, pt B, pt C, pt D) {\n  if( samePt(A,B) )\n    return segContains( A, C, D );\n  if( samePt(C,D) )\n    return segContains( C, A, B );\n  if( parallel(A,B,C,D) )\n    return collinearSegsIntersects( A,B,C,D );\n  pt aux = linesIntersection(A,B,C,D);\n  return segContains(aux,A,B) && segContains(aux,C,D);\n}\n\n/// --------------------------------------------\n\nlf distToSegment(pt p, pt A, pt B, pt &c) {\n  lf u = dot( p-A , B-A ) / norm( B-A );\n  if( u < -EPS ) { c = A; return dist( p , A ); }\n  if( (u-1.0) > EPS ) { c = B; return dist( p, B ); }\n  return distToLine(p,A,B,c);\n}\n\nint n;\n\nint main() {\n  ios_base::sync_with_stdio(0);\n  cin.tie(0);\n  cout << fixed << setprecision(10);\n\n  cin >> n;\n  for( int i = 0; i < n; ++i ) {\n    pt A,B,C,D, aux;\n    cin >> A >> B >> C >> D;\n    lf ans = oo;\n    if( segmentsIntersect( A, B, C, D ) ) {\n      ans = 0.0;\n    }\n    ans = min( ans, distToSegment( C, A, B, aux ) );\n    ans = min( ans, distToSegment( D, A, B, aux ) );\n    cout << double(ans) << '\\n';\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <cstdio>\n#include <iostream>\n#include <vector>\nusing namespace std;\n#define EPS 1e-10\n#define equals(a, b) (fabs(a - b) < EPS)\n\nclass Vector {\npublic:\n  double x, y;\n  Vector() {}\n  Vector(double x, double y) : x(x), y(y) {}\n\n  Vector operator+(Vector v) { return Vector(x + v.x, y + v.y); }\n  Vector operator-(Vector v) { return Vector(x - v.x, y - v.y); }\n  Vector operator*(double s) { return Vector(s * x, s * y); }\n  double norm() { return x * x + y * y; }\n  double abs() { return sqrt(norm()); }\n};\n\n// inner product\ndouble dot(Vector v1, Vector v2) { return v1.x * v2.x + v1.y * v2.y; }\n\n// cross product\ndouble cross(Vector v1, Vector v2) { return v1.x * v2.y - v1.y * v2.x; }\n\nclass Line {\npublic:\n  Vector v1, v2;\n  Line() {}\n  Line(Vector v1, Vector v2) : v1(v1), v2(v2) {}\n};\nclass Segment {\npublic:\n  Vector v1, v2;\n  Segment() {}\n  Segment(Vector v1, Vector v2) : v1(v1), v2(v2) {}\n  operator Line() const { return Line(v1, v2); }\n};\n\nbool is_parrallel(Vector a, Vector b) { return equals(cross(a, b), 0); }\nbool is_parrallel(Line a, Line b) {\n  return is_parrallel(a.v1 - a.v2, b.v1 - b.v2);\n}\n\nbool is_orthogonal(Vector a, Vector b) { return equals(dot(a, b), 0); }\nbool is_orthogonal(Line a, Line b) {\n  return is_orthogonal(a.v1 - a.v2, b.v1 - b.v2);\n}\n\nVector project(Line l, Vector v) {\n  Vector a = v - l.v1;\n  Vector b = l.v2 - l.v1;\n  return l.v1 + b * (dot(a, b) / b.norm());\n}\n\nVector reflect(Line l, Vector v) { return v + (project(l, v) - v) * 2.0; }\n\ndouble distance(Line l, Vector v) { return (v - project(l, v)).abs(); }\ndouble distance(Vector v1, Vector v2) { return (v1 - v2).abs(); }\ndouble distance(Segment s, Vector v) {\n  auto m = project(Line(s.v1, s.v2), v);\n  bool on_segment =\n      (s.v1.x <= m.x && m.x <= s.v2.x) || (s.v2.x <= m.x && m.x <= s.v1.x);\n  if (on_segment)\n    return distance(m, v);\n  else\n    return min(distance(s.v1, v), distance(s.v2, v));\n}\nbool opposite(Line l, Vector v1, Vector v2) {\n  auto a = l.v2 - l.v1;\n  auto b = v1 - l.v1;\n  auto c = v2 - l.v1;\n  return cross(a, b) * cross(a, c) <= 0;\n}\nbool intersect(Segment s1, Segment s2) {\n  return opposite((Line)s1, s2.v1, s2.v2) && opposite((Line)s2, s1.v1, s1.v2);\n}\n\ndouble distance(Segment s1, Segment s2) {\n  if (intersect(s1, s2)) return 0;\n  return min({distance(s1, s2.v1), distance(s1, s2.v2), distance(s2, s1.v1),\n              distance(s2, s1.v2)});\n}\n\nint main() {\n  int nq;\n  cin >> nq;\n  for (int i = 0; i < nq; i++) {\n    Segment seg[2];\n    for (int j = 0; j < 2; j++) {\n      int x0, y0, x1, y1;\n      cin >> x0 >> y0 >> x1 >> y1;\n      seg[j] = Segment(Vector(x0, y0), Vector(x1, y1));\n    }\n    printf(\"%.10f\\n\", distance(seg[0], seg[1]));\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\n#define rep(i,n) for(int i=0;i<(int)(n);i++)\n#define FOR(i,n,m) for(int i=(int)(n); i<=(int)(m); i++)\n#define RFOR(i,n,m) for(int i=(int)(n); i>=(int)(m); i--)\n#define ITR(x,c) for(__typeof(c.begin()) x=c.begin();x!=c.end();x++)\n#define RITR(x,c) for(__typeof(c.rbegin()) x=c.rbegin();x!=c.rend();x++)\n#define setp(n) fixed << setprecision(n)\n\ntemplate<class T> bool chmax(T &a, const T &b) { if (a<b) { a=b; return 1; } return 0; }\ntemplate<class T> bool chmin(T &a, const T &b) { if (a>b) { a=b; return 1; } return 0; }\n\n#define ll long long\n#define vll vector<ll>\n#define vi vector<int>\n#define pll pair<ll,ll>\n#define pi pair<int,int>\n\n#define all(a) (a.begin()),(a.end())\n#define rall(a) (a.rbegin()),(a.rend())\n#define fi first\n#define se second\n#define pb push_back\n#define mp make_pair\n#define ins insert\n\nusing namespace std;\n\n//-------------------------------------------------\n//--Geometry Template (Plane)\n//-------------------------------------------------\n\nusing lf = double;\nconst lf EPS = 1e-9;\nconst lf PI = acos(-1);\n\n#define sgn(x) (((x)<-EPS)?-1:((x)>EPS)?1:0)\n#define EQ(x,y) (sgn((y)-(x))==0)\n\nstruct V {\n    lf x,y;\n    V(){}\n    V(lf x, lf y):x(x),y(y){}\n    V(const V &v):x(v.x),y(v.y){}\n    V& operator+=(const V &v){x+=v.x; y+=v.y; return *this;}\n    V& operator-=(const V &v){x-=v.x; y-=v.y; return *this;}\n    V& operator*=(lf k){x*=k; y*=k; return *this;}\n    V& operator/=(lf k){x/=k; y/=k; return *this;}\n    V operator+(const V &v){return V(*this)+=v;}\n    V operator-(const V &v){return V(*this)-=v;}\n    V operator*(lf k){return V(*this)*=k;}\n    V operator/(lf k){return V(*this)/=k;}\n    V operator-(){return V(-x,-y);}\n    lf sq(){return x*x+y*y;}\n    lf norm(){return sqrt(sq());}\n    V unit(){return V(*this)/=norm();}\n    lf arg(){return atan2(y,x);}\n    V rot(lf c, lf s){return V(x*c-y*s,x*s+y*c);}\n    V rot(lf a){return rot(sin(a),cos(a));}\n    V rot90(){return V(-y,x);}\n    bool operator<(const V &v){return x<v.x;}\n    friend ostream& operator<<(ostream &os, const V &v){return os<<'('<<v.x<<\", \"<<v.y<<')';}\n};\n\nlf dot(const V &a, const V &b){return a.x*b.x+a.y*b.y;}\nlf det(const V &a, const V &b){return a.x*b.y-a.y*b.x;}\n\nint ccw(V a, V b, V c){\n    b-=a; c-=a;\n    if (sgn(det(b,c))>0) return 1;\n    else if(sgn(det(b,c))<0) return -1;\n    else if(sgn(dot(b,c))<0) return 2;\n    else if(sgn(b.norm()-c.norm())<0) return -2;\n    return 0;\n}\n\nstruct Line {\n    V p,q;\n    Line(){}\n    Line(const V &p, const V &q):p(p),q(q){}\n    Line(const Line &l):Line(l.p,l.q){}\n    V unit(){return (q-p).unit();}\n    lf arg(){return (q-p).arg();}\n    Line rot(lf c, lf s){return Line(p.rot(c,s),q.rot(c,s));}\n    Line rot(lf a){return Line(p.rot(a),q.rot(a));}\n    Line rot90(){return Line(p.rot90(),q.rot90());}\n};\n\nstruct Segment : Line {\n    Segment(){}\n    Segment(const V &p, const V &q):Line(p,q){}\n    Segment(const Segment &s):Line(s){}\n    lf sq(){return (Line::q-Line::p).sq();}\n    lf norm(){return (Line::q-Line::p).norm();}\n};\n\n// functions about lines\nbool parallel(V &a, V &b){return EQ(det(a,b),0.0);}\nbool parallel(Line &a, Line &b){return EQ(det(a.q-a.p,b.q-b.p),0.0);}\nbool orthogonal(V &a, V &b){return EQ(dot(a,b),0.0);}\nbool orthogonal(Line &a, Line &b){return EQ(dot(a.q-a.p,b.q-b.p),0.0);}\n\nbool samel(Line &a, Line &b){return parallel(a,b)&&EQ(det(a.q-a.p,b.p-a.p),0.0);}\nbool insec(Line &a, Line &b){return !parallel(a,b);}\nbool insec(Segment &a, Segment &b){\n    int c1 = ccw(a.p,a.q,b.p)*ccw(a.p,a.q,b.q);\n    int c2 = ccw(b.p,b.q,a.p)*ccw(b.p,b.q,a.q);\n    return (c1<=0 && c2<=0);\n}\nbool insec(Line &a, Segment &b){return ccw(a.p,a.q,b.p)*ccw(a.p,a.q,b.q)<=0;}\n\n// use only if lines have intersection\nV cpoint(Line &a, Line &b){\n    V r(a.q-a.p);\n    r *= det(b.p-a.p,b.q-b.p)/det(a.q-a.p,b.q-b.p);\n    return a.p+r;\n}\n\nlf distance(V &a, V &b){return (b-a).norm();}\nlf distance(Line &l, V &v){return abs(det((l.q-l.p).unit(),v-l.p));}\nlf distance(Line &a, Line &b){return (parallel(a,b))?distance(a,b.p):0.0;}\nlf distance(Segment &s, V &v){\n    if (sgn(dot(s.q-s.p,v-s.p))<0) return distance(s.p,v);\n    else if(sgn(dot(s.p-s.q,v-s.q))<0) return distance(s.q,v);\n    return distance((Line&)s,v);\n}\nlf distance(Segment &a, Segment &b){\n    if (insec(a,b)) return 0.0;\n    lf A=min(distance(a,b.p),distance(a,b.q));\n    lf B=min(distance(b,a.p),distance(b,a.q));\n    return min(A,B);\n}\nlf distance(Line &a, Segment &b){\n    if (insec(a,b)) return 0.0;\n    return min(distance(a,b.p),distance(a,b.q));\n}\n\nV subdiv(V &a, V &b, lf m, lf n){return (a*n+b*m)/(m+n);}\nV outside(V &a, V &b, lf m, lf n){return (-a*n+b*m)/(m-n);}\nV ppfoot(Line &l, V &v){\n    V u = (l.q-l.p).unit();\n    return l.p+u*dot(u,v-l.p);\n}\n\nLine vbsector(V &a, V &b){\n    V m = (a+b)/2;\n    return Line(m, m+(b-a).rot90());\n}\nLine absector(V &c, V &a, V &b){\n    lf m=(a-c).norm(), n=(b-c).norm();\n    return Line(c,subdiv(a,b,m,n));\n}\nLine perpend(V &c, V &a, V &b){return Line(c,c+(b-a).rot90());}\n\n//-------------------------------------------------\n\nint main(void)\n{\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    int t; cin>>t;\n    cout<<setp(12);\n    while(t--){\n        int a,b,c,d; cin>>a>>b>>c>>d;\n        Segment s1(V(a,b), V(c,d));\n        cin>>a>>b>>c>>d;\n        Segment s2(V(a,b), V(c,d));\n        cout<<distance(s1,s2)<<\"\\n\";\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef complex<double>Point;\n\nstruct Segment{\n    Point p1,p2;\n    Segment(const Point &p1=Point(),const Point &p2=Point()):p1(p1),p2(p2){}\n};\n\nstruct Circle{\n    Point p;\n    double r;\n    Circle(const Point &p=Point(),double r=0.0):p(p),r(r){}\n};\n\ntypedef Point Vector;\ntypedef Segment Line;\ntypedef vector<Point>Polygon;\n\nconst double PI=acos(-1);\nconst double EPS=1e-8;\nconst double INF=1e16;\nconst int COUNTER_CLOCKWISE=1;\nconst int CLOCKWISE=-1;\nconst int ONLINE_BACK=2;\nconst int ONLINE_FRONT=-2;\nconst int ON_SEGMENT=0;\n\ninline double square(double a){return a*a;}\ninline double norm(const Point &a){return square(a.real())+square(a.imag());}\ninline double dot(const Point &a,const Point &b){return (conj(a)*b).real();}\ninline double cross(const Point &a,const Point &b){return (conj(a)*b).imag();}\ninline double toDeg(double t){return t/PI*180.0;}\ninline double toRad(double t){return t/180.0*t;}\n#define equals(a,b) (fabs((a)-(b))<EPS)\n\nvoid getPoint(Point &p){\n    double x,y;\n    scanf(\"%lf%lf\",&x,&y);\n    p=Point(x,y);\n}\n\nvoid getSegment(Segment &s){\n    getPoint(s.p1);\n    getPoint(s.p2);\n}\n\nbool isOrthogonal(Vector a,Vector b){\n    return equals(dot(a,b),0.0);\n}\n\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n    return isOrthogonal(a1-a2,b1-b2);\n}\n\nbool isOrthogonal(Segment s1,Segment s2){\n    return isOrthogonal(s1.p1-s1.p2,s2.p1-s2.p2);\n}\n\nbool isParallel(Vector a,Vector b){\n    return equals(cross(a,b),0.0);\n}\n\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n    return isParallel(a1-a2,b1-b2);\n}\n\nbool isParallel(Segment s1,Segment s2){\n    return isParallel(s1.p1-s1.p2,s2.p1-s2.p2);\n}\n\nPoint project(Segment s,Point p){\n    Vector base=s.p2-s.p1;\n    double r=dot(p-s.p1,base)/norm(base);\n    return s.p1+base*r;\n}\n\nPoint reflection(Segment s,Point p){\n    return p+(project(s,p)-p)*2.0;\n}\n\nint ccw(Point p0,Point p1,Point p2){\n    Vector a=p1-p0;\n    Vector b=p2-p0;\n    if(cross(a,b)>EPS)return COUNTER_CLOCKWISE;\n    if(cross(a,b)<-EPS)return CLOCKWISE;\n    if(dot(a,b)<-EPS)return ONLINE_BACK;\n    if(norm(a)<norm(b))return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\nbool isIntersectSS(Point p1,Point p2,Point p3,Point p4){\n    return ccw(p1,p2,p3)*ccw(p1,p2,p4)<=0&&\n            ccw(p3,p4,p1)*ccw(p3,p4,p2)<=0;\n}\n\nbool isIntersectSS(Segment s1,Segment s2){\n    return isIntersectSS(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n\nPoint getCrossPointSS(Segment s1,Segment s2){\n    Vector base=s2.p2-s2.p1;\n    double d1=abs(cross(base,s1.p1-s2.p1));\n    double d2=abs(cross(base,s1.p2-s2.p1));\n\n    double t=d1/(d1+d2);\n    return s1.p1+(s1.p2-s1.p1)*t;\n}\n\ndouble getDistancePP(Point a,Point b){\n    return abs(a-b);\n}\n\ndouble getDistanceLP(Line l,Point p){\n    return fabs(cross(l.p2-l.p1,p-l.p1)/abs(l.p2-l.p1));\n}\n\ndouble getDistanceLL(Line l,Line m){\n    if(isParallel(l,m))return getDistanceLP(l,m.p1);\n    return 0.0;\n}\n\ndouble getDistanceSP(Segment s,Point p){\n    if(dot(s.p2-s.p1,p-s.p1)<0.0)return abs(p-s.p1);\n    if(dot(s.p1-s.p2,p-s.p2)<0.0)return abs(p-s.p2);\n    return getDistanceLP(s,p);\n}\n\ndouble getDistanceSS(Segment s1,Segment s2){\n    if(isIntersectSS(s1,s2))return 0;\n    return min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),\n               min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n}\n\n\nint main(){\n    int q;\n    scanf(\"%d\",&q);\n\n    while(q--){\n        Segment s1,s2;\n        getSegment(s1);\n        getSegment(s2);\n\n        printf(\"%.20lf\\n\",getDistanceSS(s1,s2));\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <complex>\n#include <cmath>\n#include <iomanip>\n#include <algorithm>\nusing namespace std;\ntypedef complex<double> xy;\ndouble eps = 1e-9;\ndouble dot_product(xy a,xy b) {return (conj(a)*b).real();}\ndouble cross_product(xy a,xy b) {return (conj(a)*b).imag();}\ndouble dist_lp(xy a1,xy a2,xy p){\n    if(dot_product(a2-a1,p-a1)<eps) return abs(p-a1);\n    if(dot_product(a1-a2,p-a2)<eps) return abs(p-a2);\n    return abs(cross_product(a2-a1,p-a1))/abs(a2-a1);\n}\nxy projection(xy p,xy b) {return b*dot_product(p,b)/norm(b);}\nxy projection2(xy p1,xy p2,xy p){\n    p -= p1; p2 -= p1;\n    xy proj = projection(p,p2);\n    return p1+proj;\n}\n\nbool is_online(xy a1,xy a2,xy p){\n    return abs(a1-p)+abs(a2-p)<=abs(a1-a2)+eps;    \n}\n\nbool is_intersected(xy a1, xy a2, xy b1, xy b2){\n    if(is_online(a1,a2,b1) || is_online(a1,a2,b2)) return true;\n    if(is_online(b1,b2,a1) || is_online(b1,b2,a2)) return true;\n    return (cross_product(a2-a1,b1-a1)*cross_product(a2-a1,b2-a1)<-eps) && \n    (cross_product(b2-b1,a1-b1)*cross_product(b2-b1,a2-b1))<-eps;\n}\n\ndouble dist_ll(xy a1,xy a2,xy b1,xy b2){\n    if(is_intersected(a1,a2,b1,b2)) return 0;\n    return min({dist_lp(a1,a2,b1),dist_lp(a1,a2,b2),dist_lp(b1,b2,a1),dist_lp(b1,b2,a1)\n    ,abs(a1-b1),abs(a1-b2),abs(a2-b1),abs(a2-b2)});   \n}\n\nint Q;\ndouble X[5],Y[5];\nint main(){\n    cin >> Q;\n    for(int i=0;i<Q;i++){\n        for(int j=1;j<=4;j++){\n            cin >> X[j] >> Y[j];\n        }\n        cout << fixed;\n        cout << setprecision(10) << dist_ll(xy(X[1],Y[1]),xy(X[2],Y[2]),xy(X[3],Y[3]),xy(X[4],Y[4])) << endl;       \n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define rep(i, a, b) for(int i = a; i < (b); ++i)\n#define trav(a, x) for(auto& a : x)\n#define all(x) x.begin(), x.end()\n#define sz(x) (int)(x).size()\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef vector<int> vi;\n\ntemplate<class T>\nstruct Point {\n\ttypedef Point P;\n\tT x, y;\n\texplicit Point(T x=0, T y=0) : x(x), y(y) {}\n\tbool operator<(P p) const { return tie(x,y) < tie(p.x,p.y); }\n\tbool operator==(P p) const { return tie(x,y)==tie(p.x,p.y); }\n\tP operator+(P p) const { return P(x+p.x, y+p.y); }\n\tP operator-(P p) const { return P(x-p.x, y-p.y); }\n\tP operator*(T d) const { return P(x*d, y*d); }\n\tP operator/(T d) const { return P(x/d, y/d); }\n\tT dot(P p) const { return x*p.x + y*p.y; }\n\tT cross(P p) const { return x*p.y - y*p.x; }\n\tT cross(P a, P b) const { return (a-*this).cross(b-*this); }\n\tT dist2() const { return x*x + y*y; }\n\tdouble dist() const { return sqrt((double)dist2()); }\n\t// angle to x-axis in interval [-pi, pi]\n\tdouble angle() const { return atan2(y, x); }\n\tP unit() const { return *this/dist(); } // makes dist()=1\n\tP perp() const { return P(-y, x); } // rotates +90 degrees\n\tP normal() const { return perp().unit(); }\n\t// returns point rotated 'a' radians ccw around the origin\n\tP rotate(double a) const {\n\t\treturn P(x*cos(a)-y*sin(a),x*sin(a)+y*cos(a)); }\n};\n\nusing P = Point<long double>;\nlong double segDist(P& s, P& e, P& p) {\n\tif (s==e) return (p-s).dist();\n\tauto d = (e-s).dist2(), t = min(d,max(.0l,(p-s).dot(e-s)));\n\treturn ((p-s)*d-(e-s)*t).dist()/d;\n}\ntemplate<class P>\nbool segmentIntersectionQ(P s1, P e1, P s2, P e2) {\n\tif (e1 == s1) {\n\t\tif (e2 == s2) return e1 == e2;\n\t\tswap(s1,s2); swap(e1,e2);\n\t}\n\tP v1 = e1-s1, v2 = e2-s2, d = s2-s1;\n\tauto a = v1.cross(v2), a1 = d.cross(v1), a2 = d.cross(v2);\n\tif (a == 0) { // parallel\n\t\tauto b1 = s1.dot(v1), c1 = e1.dot(v1),\n\t\t     b2 = s2.dot(v1), c2 = e2.dot(v1);\n\t\treturn !a1 && max(b1,min(b2,c2)) <= min(c1,max(b2,c2));\n\t}\n\tif (a < 0) { a = -a; a1 = -a1; a2 = -a2; }\n\treturn (0 <= a1 && a1 <= a && 0 <= a2 && a2 <= a);\n}\n\nint main(){\n\tios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n\tcout << fixed << setprecision(15);\n\tint q;\n\tcin >> q;\n\tfor(int i = 0; i < q; i++){\n\t\tP p0, p1;\n\t\tcin >> p0.x >> p0.y >> p1.x >> p1.y;\n\t\tP p2, p3;\n\t\tcin >> p2.x >> p2.y >> p3.x >> p3.y;\n\t\tif(segmentIntersectionQ(p0,p1,p2,p3)){\n\t\t\tcout << 0.0 << '\\n';\n\t\t} else {\n\t\t\tlong double ans0 = min(segDist(p0, p1, p2), segDist(p0, p1, p3));\n\t\t\tlong double ans1 = min(segDist(p2, p3, p0), segDist(p2, p3, p1));\n\t\t\tcout << min(ans0, ans1) << '\\n';\n\t\t}\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <cmath>\n#include <algorithm>\nusing namespace std;\n\ndouble dis(double x1, double y1, double x2, double y2) {\n\treturn sqrt(pow(x1 - x2, 2) + pow(y1 - y2, 2));\n}\n\ndouble ldis(double x1, double y1, double x2, double y2, double x3, double y3) {\n\n\tif ((x1 - x2) * (x3 - x2) + (y1 - y2) * (y3 - y2) > 0 &&\n\t\t(x1 - x3) * (x2 - x3) + (y1 - y3) * (y2 - y3) > 0)\n\t\treturn abs((y3 - y1) * (x2 - x1) - (x3 - x1) * (y2 - y1)) / dis(x2, y2, x3, y3);\n\telse\n\t\treturn min(dis(x1, y1, x2, y2), dis(x1, y1, x3, y3));\n}\n\nint main()\n{\n\tint q = 0;\n\n\tcin >> q;\n\n\tfor (int i = 0; i < q; i++) {\n\t\tdouble p0x = 0, p0y = 0, p1x = 0, p1y = 0, p2x = 0, p2y = 0, p3x = 0, p3y = 0,\n\t\t\tu = 0, s = 0, t = 0, d = 0;\n\n\t\tcin >> p0x >> p0y >> p1x >> p1y >> p2x >> p2y >> p3x >> p3y;\n\n\t\tu = (p3y - p0y) * (p2x - p0x) - (p3x - p0x) * (p2y - p0y);\n\t\td = min({ ldis(p0x, p0y, p2x, p2y, p3x, p3y), ldis(p1x, p1y, p2x, p2y, p3x, p3y),\n\t\t\tldis(p2x, p2y, p0x, p0y, p1x, p1y), ldis(p3x, p3y, p0x, p0y, p1x, p1y) });\n\n\t\tif (u != 0) {\n\t\t\ts = ((p3y - p0y) * (p1x - p0x) - (p3x - p0x) * (p1y - p0y)) / u;\n\t\t\tt = -((p2y - p0y) * (p1x - p0x) - (p2x - p0x) * (p1y - p0y)) / u;\n\n\t\t\tif (s >= 0 && t >= 0) {\n\t\t\t\tif (s + t >= 1)\n\t\t\t\t\td = 0;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tdouble t0 = (p2x - p0x) * (p3x - p0x) + (p2y - p0y) * (p3y - p0y),\n\t\t\t\tt1 = (p2x - p1x) * (p3x - p1x) + (p2y - p1y) * (p3y - p1y),\n\t\t\t\tt2 = (p0x - p2x) * (p1x - p2x) + (p0y - p2y) * (p1y - p2y);\n\n\t\t\tif ((p1y - p0y) * (p2x - p0x) - (p1x - p0x) * (p2y - p0y) != 0) {\n\t\t\t\tif (t0 <= 0)\n\t\t\t\t\td = 0;\n\t\t\t}\n\t\t\telse if ((t0 <= 0) || (t1 <= 0) || (t2 <= 0))\n\t\t\t\td = 0;\n\t\t}\n\n\t\tcout << setiosflags(ios::showpoint | ios::fixed) << setprecision(10)\n\t\t\t<< d << endl;\n\t}\n\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <complex>\n#include <cmath>\n#include <algorithm>\n\nusing Real = long double;\n\nconst Real EPS = 1e-10;\n\n// 宇宙船演算子\ninline Real compare(Real a, Real b) {\n    if (std::abs(a - b) < EPS) return 0;\n    return a - b > 0 ? 1 : -1;\n}\n\ntemplate <class T>\ninline T sq(T x) { return x * x; }\n\n\nusing Point = std::complex<Real>;\nusing Segment = std::pair<Point, Point>;\n\ninline Real dist(Point a, Point b) {\n    return std::abs(a - b);\n}\n\ninline Real length(Segment s) {\n    return dist(s.first, s.second);\n}\n\n// inner product\ninline Real dot(Point x, Point y) {\n    return std::real(std::conj(x) * (y));\n}\n\n// outer product\ninline Real cross(Point x, Point y) {\n    return std::imag(std::conj(x) * (y));\n}\n\n// lに対するxの正射影\nPoint proj(Segment s, Point p) {\n    Real ratio = dot(s.second - s.first, p - s.first) / sq(length(s));\n    return s.first + (s.second - s.first) * ratio;\n}\n\n// lを軸としてxに対称な点\nPoint refl(Segment s, Point p) {\n    Point t = proj(s, p);\n    return t + (t - p);\n}\n\n// lに対するpの位置\n// counter clockwise -> 1, clockwise   -> -1\n// online front      -> 2, online back -> -2\n// on segment        -> 0\nint side(Segment s, Point p) {\n    Real c = cross(s.second - s.first, p - s.first);\n    if (compare(c, 0) != 0) return compare(c, 0);\n\n    Real d = dot(s.second - s.first, p - s.first);\n    if (compare(d, 0) < 0) return -2;\n\n    return (compare(length(Segment(s.first, p)), length(s)) > 0 ? 2 : 0);\n}\n\ninline bool isorthogonal(Segment s1, Segment s2) {\n    return compare(dot(s1.second - s1.first, s2.second - s2.first), 0) == 0;\n}\n\ninline bool isparallel(Segment s1, Segment s2) {\n    return compare(cross(s1.second - s1.first, s2.second - s2.first), 0) == 0;\n}\n\ninline bool intersect(Segment s1, Segment s2) {\n    return (side(s1, s2.first) * side(s1, s2.second) <= 0) &&\n           (side(s2, s1.first) * side(s2, s1.second) <= 0);\n}\n\nPoint intersection(Segment s1, Segment s2) {\n    Real c1 = cross(s2.second - s2.first, s1.second - s1.first);\n    Real c2 = cross(s2.second - s2.first, s1.first - s2.first);\n    return s1.first + (s1.second - s1.first) * (-c2 / c1);\n}\n\nReal dist(Segment s, Point p) {\n    Point t = proj(s, p);\n    if (side(s, t) == 0) return dist(p, t);\n    return std::min(dist(p, s.first), dist(p, s.second));\n}\n\nReal dist(Segment s1, Segment s2) {\n    if (intersect(s1, s2)) return 0;\n    return std::min({dist(s1, s2.first),\n                     dist(s1, s2.second),\n                     dist(s2, s1.first),\n                     dist(s2, s1.second)});\n}\n\n\n#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\nint main() {\n    cout << fixed << setprecision(10);\n\n    int Q;\n    cin >> Q;\n\n    for (int q = 0; q < Q; ++q) {\n        Segment s[2];\n        for (int i = 0; i < 2; ++i) {\n            Point p[2];\n            for (int j = 0; j < 2; ++j) {\n                Real x, y;\n                cin >> x >> y;\n                p[j] = Point(x, y);\n            }\n            s[i] = Segment(p[0], p[1]);\n        }\n\n        cout << dist(s[0], s[1]) << endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <cmath>\n#include <cstdio>\n#include <cstring>\nusing namespace std;\nint num;\ndouble x,yy1,yy2,yy3,yy4;\nconst double eps = 1e-8;\nconst double inf = 1e20;\nconst double pi = acos(-1.0);\nint sgn(double x){\n    if(fabs(x)<eps){\n        return 0;\n    }\n    if(x<0){\n        return -1;\n    }else{\n        return 1;\n    }\n}\nstruct Point{\n    double x,y;\n    Point(){}\n    void input(){\n        scanf(\"%lf%lf\",&x,&y);\n    }\n    Point(double _x,double _y){\n        x = _x;y = _y;\n    }\n    bool operator < (Point b)const{\n        return sgn(x-b.x)==0?sgn(y-b.y)<0:x<b.x;\n    }\n    Point operator - (const Point &b)const{\n        return Point(x-b.x,y-b.y);\n    }\n    double operator *(const Point &b)const{\n        return x*b.x+y*b.y;\n    }\n    double operator ^(const Point &b)const{\n        return x*b.y-y*b.x;\n    }\n    double distance(Point p){\n        return hypot(x-p.x,y-p.y);\n    }\n};\nstruct Line{\n    Point s,e;\n    Line(){}\n    Line(Point _s,Point _e){\n        s = _s;e = _e;\n    }\n    // 线段长度\n    double length(){\n        return s.distance(e);\n    }\n    // 判断线段是否相交\n    int segcrossseg(Line v){\n        int d1 = sgn((e-s)^(v.s-s));\n        int d2 = sgn((e-s)^(v.e-s));\n        int d3 = sgn((v.e-v.s)^(s-v.s));\n        int d4 = sgn((v.e-v.s)^(e-v.s));\n        if((d1^d2) == -2 && (d3^d4)==-2){\n            return 2;\n        }\n        return (d1==0&&sgn((v.s-s)*(v.s-e))<=0)||(d2==0&&sgn((v.e-s)*(v.e-e))<=0)||(d3==0&&sgn((s-v.s)*(s-v.e))<=0)||(d4==0&&sgn((e-v.s)*(e-v.e))<=0);\n    }\n    // 点线距离\n    double dispointtoline(Point p){\n        return fabs((p-s)^(e-s))/length();//面积除以高\n    }\n    // 点到线段距离（当是钝角的时候，距离不是延长线，而是到两个端点的最小值）\n    double dispointtoseg(Point p){\n        if(sgn((p-s)*(e-s))<0||sgn((p-e)*(s-e))<0){\n            return min(p.distance(s),p.distance(e));\n        }\n        return dispointtoline(p);\n    }\n    // 线段到线段的距离\n    // 用之前判断是否相交\n    double dissegtoseg(Line v){\n        return min(min(dispointtoseg(v.s),dispointtoseg(v.e)),min(v.dispointtoseg(s),v.dispointtoseg(e)));\n    }\n};\nint main(){\n    int q;\n    scanf(\"%d\",&q);\n    Point p0,p1,p2,p3;\n    while(q--){\n        p0.input();\n        p1.input();\n        p2.input();\n        p3.input();\n        Line line1(p0,p1);\n        Line line2(p2,p3);\n        double ans = 0;\n        if(line1.segcrossseg(line2) == 0){\n            ans = line1.dissegtoseg(line2);\n        }\n        printf(\"%.10f\\n\",ans);\n    }\n\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "//include\n//------------------------------------------\n#include <vector>\n#include <list>\n#include <map>\n#include <climits>\n#include <set>\n#include <deque>\n#include <stack>\n#include <bitset>\n#include <algorithm>\n#include <functional>\n#include <numeric>\n#include <utility>\n#include <sstream>\n#include <iostream>\n#include <iomanip>\n#include <cstdio>\n#include <cmath>\n#include <cstdlib>\n#include <cctype>\n#include <string>\n#include <cstring>\n#include <ctime>\n#include <queue>\n#include <random>\n#include <cctype>\n#include <complex>\n\nusing namespace std;\n\n//typedef\n//------------------------------------------\ntypedef long long LL;\ntypedef vector<int> VI;\ntypedef vector<bool> VB;\ntypedef vector<char> VC;\ntypedef vector<double> VD;\ntypedef vector<string> VS;\ntypedef vector<LL> VLL;\ntypedef vector<VI> VVI;\ntypedef vector<VB> VVB;\ntypedef vector<VS> VVS;\ntypedef vector<VLL> VVLL;\ntypedef vector<VVI> VVVI;\ntypedef vector<VVLL> VVVLL;\ntypedef pair<int, int> PII;\ntypedef pair<LL, LL> PLL;\ntypedef pair<int, string> PIS;\ntypedef pair<string, int> PSI;\ntypedef pair<string, string> PSS;\n\n\n//数値・文字列\n//------------------------------------------\ninline int toInt(string s) {\n    int v;\n    istringstream sin(s);\n    sin >> v;\n    return v;\n}\n\ninline LL toLongLong(string s) {\n    LL v;\n    istringstream sin(s);\n    sin >> v;\n    return v;\n}\n\ntemplate<class T>\ninline string toString(T x) {\n    ostringstream sout;\n    sout << x;\n    return sout.str();\n}\n\ninline VC toVC(string s) {\n    VC data(s.begin(), s.end());\n    return data;\n}\n\ntemplate<typename List>\nvoid SPRIT(const std::string &s, const std::string &delim, List &result) {\n    result.clear();\n    string::size_type pos = 0;\n    while (pos != string::npos) {\n        string::size_type p = s.find(delim, pos);\n        if (p == string::npos) {\n            result.push_back(s.substr(pos));\n            break;\n        } else {\n            result.push_back(s.substr(pos, p - pos));\n        }\n        pos = p + delim.size();\n    }\n}\n\nstring TRIM(const string &str, const char *trimCharacterList = \" \\t\\v\\r\\n\") {\n    string result;\n    string::size_type left = str.find_first_not_of(trimCharacterList);\n    if (left != string::npos) {\n        string::size_type right = str.find_last_not_of(trimCharacterList);\n        result = str.substr(left, right - left + 1);\n    }\n    return result;\n}\n\ntemplate<typename T>\nbool VECTOR_EXISTS(vector<T> vec, T data) {\n    auto itr = std::find(vec.begin(), vec.end(), data);\n    size_t index = distance(vec.begin(), itr);\n    if (index != vec.size()) {\n        return true;\n    } else {\n        return 0;\n    }\n}\n\n#define UPPER(s) transform((s).begin(), (s).end(), (s).begin(), ::toupper)\n#define LOWER(s) transform((s).begin(), (s).end(), (s).begin(), ::tolower)\n\n\n\n//四捨五入 nLen=小数点第N位にする\n//------------------------------------------\n\n//切り上げ\ndouble ceil_n(double dIn, int nLen) {\n    double dOut;\n    dOut = dIn * pow(10.0, nLen);\n    dOut = (double) (int) (dOut + 0.9);\n    return dOut * pow(10.0, -nLen);\n}\n\n//切り捨て\ndouble floor_n(double dIn, int nLen) {\n    double dOut;\n    dOut = dIn * pow(10.0, nLen);\n    dOut = (double) (int) (dOut);\n    return dOut * pow(10.0, -nLen);\n}\n\n//四捨五入\ndouble round_n(double dIn, int nLen) {\n    double dOut;\n    dOut = dIn * pow(10.0, nLen);\n    dOut = (double) (int) (dOut + 0.5);\n    return dOut * pow(10.0, -nLen);\n}\n\n//n桁目の数の取得\nint take_a_n(int num, int n) {\n    string str = toString(num);\n    return str[str.length() - n] - '0';\n}\n\n\n//進数\n//------------------------------------------\n\n//\"1111011\" → 123\nint strbase_2to10(const std::string &s) {\n    int out = 0;\n    for (int i = 0, size = s.size(); i < size; ++i) {\n        out *= 2;\n        out += ((int) s[i] == 49) ? 1 : 0;\n    }\n    return out;\n}\n\n//\"123\" → 1111011\nint strbase_10to2(const std::string &s) {\n    int binary = toInt(s);\n    int out = 0;\n    for (int i = 0; binary > 0; i++) {\n        out = out + (binary % 2) * pow(static_cast<int>(10), i);\n        binary = binary / 2;\n    }\n    return out;\n}\n\n//\"ABC\" 2748\nint strbase_16to10(const std::string &s) {\n    int out = stoi(s, 0, 16);\n    return out;\n}\n\n//1111011 → 123\nint intbase_2to10(int in) {\n    string str = toString(in);\n    return strbase_2to10(str);\n}\n\n//123 → 1111011\nint intbase_10to2(int in) {\n    string str = toString(in);\n    return strbase_10to2(str);\n}\n\nint intbase_16to10(int in) {\n    string str = toString(in);\n    return strbase_16to10(str);\n}\n\n//123→ \"7B\"\nstring intbase_10to16(unsigned int val, bool lower = true) {\n    if (!val)\n        return std::string(\"0\");\n    std::string str;\n    const char hc = lower ? 'a' : 'A';     // 小文字 or 大文字表記\n    while (val != 0) {\n        int d = val & 15;     // 16進数一桁を取得\n        if (d < 10)\n            str.insert(str.begin(), d + '0');  //  10未満の場合\n        else //  10以上の場合\n            str.insert(str.begin(), d - 10 + hc);\n        val >>= 4;\n    }\n    return str;\n}\n\n//整数を2進数表記したときの1の個数を返す\nLL bitcount64(LL bits) {\n    bits = (bits & 0x5555555555555555) + (bits >> 1 & 0x5555555555555555);\n    bits = (bits & 0x3333333333333333) + (bits >> 2 & 0x3333333333333333);\n    bits = (bits & 0x0f0f0f0f0f0f0f0f) + (bits >> 4 & 0x0f0f0f0f0f0f0f0f);\n    bits = (bits & 0x00ff00ff00ff00ff) + (bits >> 8 & 0x00ff00ff00ff00ff);\n    bits = (bits & 0x0000ffff0000ffff) + (bits >> 16 & 0x0000ffff0000ffff);\n    return (bits & 0x00000000ffffffff) + (bits >> 32 & 0x00000000ffffffff);\n}\n\n\n\n//comparison\n//------------------------------------------\n#define C_MAX(a, b) ((a)>(b)?(a):(b))\n#define C_MIN(a, b) ((a)<(b)?(a):(b))\n#define C_ABS(a, b) ((a)<(b)?(b)-(a):(a)-(b))\n\n\n\n//container util\n//------------------------------------------\n#define ALL(a)  (a).begin(),(a).end()\n#define RALL(a) (a).rbegin(), (a).rend()\n#define SZ(a) int((a).size())\n#define EACH(i, c) for(typeof((c).begin()) i=(c).begin(); i!=(c).end(); ++i)\n#define EXIST(s, e) ((s).find(e)!=(s).end())\n#define COUNT(obj, v) count((obj).begin(), (obj).end(), v)\n#define SEARCH(v, w) search((v).begin(), (v).end(), (w).begin(), (w).end())\n#define B_SEARCH(obj, v) binary_search((obj).begin(), (obj).end(), v)\n#define SORT(c) sort((c).begin(),(c).end())\n#define RSORT(c) sort((c).rbegin(),(c).rend())\n#define REVERSE(c) reverse((c).begin(), (c).end())\n#define SUMI(obj) accumulate((obj).begin(), (obj).end(), 0)\n#define SUMD(obj) accumulate((obj).begin(), (obj).end(), 0.)\n#define SUMLL(obj) accumulate((obj).begin(), (obj).end(), 0LL)\n#define SUMS(obj) accumulate((obj).begin(), (obj).end(), string())\n#define UB(obj, n) upper_bound((obj).begin(), (obj).end(), n)\n#define LB(obj, n) lower_bound((obj).begin(), (obj).end(), n)\n#define PB push_back\n#define MP make_pair\n\n\n\n\n//input output\n//------------------------------------------\n#define GL(s) getline(cin, (s))\n#define INIT std::ios::sync_with_stdio(false);std::cin.tie(0);\n#define OUT(d) std::cout<<(d);\n#define OUT_L(d) std::cout<<(d)<<endl;\n#define FOUT(n, data) std::cout<<std::fixed<<std::setprecision(n)<<(data);\n#define FOUT_L(n, data) std::cout<<std::fixed<<std::setprecision(n)<<(data)<<\"\\n\";\n#define EL() std::cout << \"\\n\";\n#define SHOW_VECTOR(v) {std::cerr << #v << \"\\t:\";for(const auto& xxx : v){std::cerr << xxx << \" \";}std::cerr << \"\\n\";}\n#define SHOW_MAP(v) {std::cerr << #v << endl; for(const auto& xxx: v){std::cerr << xxx.first << \" \" << xxx.second << \"\\n\";}}\n\ntemplate<typename T>\nstd::istream &operator>>(std::istream &is, std::vector<T> &vec) {\n    for (T &x : vec) is >> x;\n    return is;\n}\n\ntemplate<typename T>\nstd::ostream &operator<<(std::ostream &os, const std::vector<T> &vec) {\n    for (const T &x : vec) os << x << \" \";\n    return os;\n}\n\n\n//repetition\n//------------------------------------------\n#define FOR(i, a, b) for(int i=(a);i<(b);++i)\n#define RFOR(i, a, b) for(int i=(b)-1;i>=(a);--i)\n#define REP(i, n)  FOR(i,0,n)\n#define RREP(i, n) for(int i = n-1;i >= 0;i--)\n#define FORLL(i, a, b) for(LL i=LL(a);i<LL(b);++i)\n#define RFORLL(i, a, b) for(LL i=LL(b)-1;i>=LL(a);--i)\n#define REPLL(i, n) for(LL i=0;i<LL(n);++i)\n#define RREPLL(i, n) for(LL i=LL(n)-1;i>=0;--i)\n#define FOREACH(x, v) for(auto &(x) : (v))\n#define FORITER(x, v) for(auto (x) = (v).begin(); (x) != (v).end(); ++(x))\n\n\n//constant\n//--------------------------------------------\nconst double EPS = 1e-10;\nconst double PI = acos(-1.0);\nconst int MOD = 1000000007;\nconst int dx[] = {-1, 0, 1, 0};\nconst int dy[] = {0, 1, 0, -1};\n\n\n//math\n//--------------------------------------------\n\n//min <= aim <= max\ntemplate<typename T>\ninline bool BETWEEN(const T aim, const T min, const T max) {\n    if (min <= aim && aim <= max) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\ntemplate<class T>\ninline T SQR(const T x) { return x * x; }\n\ntemplate<class T1, class T2>\ninline T1 POW(const T1 x, const T2 y) {\n    if (!y)return 1;\n    else if ((y & 1) == 0) {\n        return SQR(POW(x, y >> 1));\n    } else return POW(x, y ^ 1) * x;\n}\n\n\ntemplate<typename T>\nconstexpr T ABS(T x) {\n    return x < 0 ? -x : x;\n}\n\n//partial_permutation nPr 順列\n//first・・最初の数\n//middle・・r(取り出す数)\n//last・・n(全体数)\ntemplate<class BidirectionalIterator>\nbool next_partial_permutation(BidirectionalIterator first, BidirectionalIterator middle, BidirectionalIterator last) {\n    reverse(middle, last);\n    return next_permutation(first, last);\n}\n\n//combination nCr 組み合わせ\n//first1・・最初の数\n//last1==first2・・r(取り出す数)\n//last2・・n(全体数)\ntemplate<class BidirectionalIterator>\nbool next_combination(BidirectionalIterator first1, BidirectionalIterator last1, BidirectionalIterator first2,\n                      BidirectionalIterator last2) {\n    if ((first1 == last1) || (first2 == last2)) {\n        return false;\n    }\n    BidirectionalIterator m1 = last1;\n    BidirectionalIterator m2 = last2;\n    --m2;\n    while (--m1 != first1 && !(*m1 < *m2)) {\n    }\n    bool result = (m1 == first1) && !(*first1 < *m2);\n    if (!result) {\n        while (first2 != m2 && !(*m1 < *first2)) {\n            ++first2;\n        }\n        first1 = m1;\n        std::iter_swap(first1, first2);\n        ++first1;\n        ++first2;\n    }\n    if ((first1 != last1) && (first2 != last2)) {\n        m1 = last1;\n        m2 = first2;\n        while ((m1 != first1) && (m2 != last2)) {\n            std::iter_swap(--m1, m2);\n            ++m2;\n        }\n        std::reverse(first1, m1);\n        std::reverse(first1, last1);\n        std::reverse(m2, last2);\n        std::reverse(first2, last2);\n    }\n    return !result;\n}\n\n\n\n\n//numeric_law\n//--------------------------------------------\n\ntemplate<typename T>\nconstexpr bool ODD(T x) {\n    return x % 2 != 0;\n}\n\ntemplate<typename T>\nconstexpr bool EVEN(T x) {\n    return x % 2 == 0;\n}\n\n//最大公約数\ntemplate<class T>\ninline T GCD(const T x, const T y) {\n    if (x < 0)return GCD(-x, y);\n    if (y < 0)return GCD(x, -y);\n    return (!y) ? x : GCD(y, x % y);\n}\n\n//最小公倍数\ntemplate<class T>\ninline T LCM(const T x, const T y) {\n    if (x < 0)return LCM(-x, y);\n    if (y < 0)return LCM(x, -y);\n    return x * (y / GCD(x, y));\n}\n\n//ax + by = 1\n//x,yが変数に格納される\ntemplate<class T>\ninline T EXTGCD(const T a, const T b, T &x, T &y) {\n    if (a < 0) {\n        T d = EXTGCD(-a, b, x, y);\n        x = -x;\n        return d;\n    }\n    if (b < 0) {\n        T d = EXTGCD(a, -b, x, y);\n        y = -y;\n        return d;\n    }\n    if (!b) {\n        x = 1;\n        y = 0;\n        return a;\n    } else {\n        T d = EXTGCD(b, a % b, x, y);\n        T t = x;\n        x = y;\n        y = t - (a / b) * y;\n        return d;\n    }\n}\n\n//素数\ntemplate<class T>\ninline bool ISPRIME(const T x) {\n    if (x <= 1)return false;\n    for (T i = 2; SQR(i) <= x; i++)if (x % i == 0)return false;\n    return true;\n}\n\n//素数をtrueとして返す\ntemplate<class T>\nVB ERATOSTHENES(const T n) {\n    VB arr(n, true);\n    for (int i = 2; SQR(i) < n; i++) {\n        if (arr[i]) {\n            for (int j = 0; i * (j + 2) < n; j++) {\n                arr[i * (j + 2)] = false;\n            }\n        }\n    }\n    return arr;\n}\n\n// a <= x < b の素数を返す\ntemplate<typename T>\nVB ERATOSTHENES(const T a, const T b) {\n    VB small = ERATOSTHENES(b);\n    VB prime(b - a, true);\n\n    for (int i = 2; (T) (SQR(i)) < b; i++) {\n        if (small[i]) {\n            for (T j = max(2, (a + i - 1) / i) * i; j < b; j += i) {\n                prime[j - a] = false;\n            }\n        }\n    }\n\n    return prime;\n}\n\n//約数\ntemplate<class T>\nvector<T> DIVISOR(T n) {\n    vector<T> v;\n    for (int i = 1; i * i <= n; ++i) {\n        if (n % i == 0) {\n            v.push_back(i);\n            if (i != n / i) {\n                v.push_back(n / i);\n            }\n        }\n    }\n    sort(v.begin(), v.end());\n    return v;\n}\n\n//組み合わせ個数\ntemplate<typename T>\nT NCR(T n, T r) {\n    T ans = 1;\n    REPLL(i, r) {\n        ans = ans * (n - i) / (i + 1);\n    }\n    return ans;\n}\n\n//行列\nint MATRIZ_CHAIN(VI &p, VVI &s) {\n    const static int INF = 1 << 20;\n    const int n = p.size() - 1;\n    VVI X(n, VI(n, INF));\n    s.resize(n, VI(n));\n    for (int i = 0; i < n; ++i) X[i][i] = 0;\n    for (int w = 1; w < n; ++w)\n        for (int i = 0, j; j = i + w, j < n; ++i)\n            for (int k = i; k < j; ++k) {\n                int f = p[i] * p[k + 1] * p[j + 1];\n                if (X[i][k] + X[k + 1][j] + f < X[i][j]) {\n                    X[i][j] = X[i][k] + X[k + 1][j] + f;\n                    s[i][j] = k;\n                }\n            }\n    return X[0][n - 1];\n}\n\n//最長増加部分列\nVI LIS(const VI &a) {\n    const static int INF = 99999999;\n    const int n = a.size();\n    VI A(n, INF);\n    VI id(n);\n    for (int i = 0; i < n; ++i) {\n        id[i] = distance(A.begin(), lower_bound(A.begin(), A.end(), a[i]));\n        A[id[i]] = a[i];\n    }\n    int m = *max_element(id.begin(), id.end());\n    VI b(m + 1);\n    for (int i = n - 1; i >= 0; --i)\n        if (id[i] == m) b[m--] = a[i];\n    return b;\n}\n\n//最長共通部分列 string->toVC\ntemplate<typename T>\nvector<T> LCS(const vector<T> &a, const vector<T> &b) {\n    const int n = a.size(), m = b.size();\n    vector<VI> X(n + 1, VI(m + 1));\n    vector<VI> Y(n + 1, VI(m + 1));\n    REP(i, n) {\n        REP(j, m) {\n            if (a[i] == b[j]) {\n                X[i + 1][j + 1] = X[i][j] + 1;\n                Y[i + 1][j + 1] = 0;\n            } else if (X[i + 1][j] < X[i][j + 1]) {\n                X[i + 1][j + 1] = X[i][j + 1];\n                Y[i + 1][j + 1] = +1;\n            } else {\n                X[i + 1][j + 1] = X[i + 1][j];\n                Y[i + 1][j + 1] = -1;\n            }\n        }\n    }\n    vector<T> c;\n    for (int i = n, j = m; i > 0 && j > 0;) {\n        if (Y[i][j] > 0) --i;\n        else if (Y[i][j] < 0) --j;\n        else {\n            c.PB(a[i - 1]);\n            --i;\n            --j;\n        }\n    }\n    REVERSE(c);\n    return c;\n}\n\n//コイン C総額 cs使用できるコインの種類\nVI money_change(int C, VI &cs) {\n    const int INF = 99999999;\n    int n = cs.size();\n    VI xs(C + 1, INF);\n    VI ys(C + 1);\n    xs[0] = 0;\n    for (int i = 0; i < n; ++i) {\n        for (int c = 0; c + cs[i] <= C; ++c) {\n            if (xs[c + cs[i]] > xs[c] + 1) {\n                xs[c + cs[i]] = xs[c] + 1;\n                ys[c + cs[i]] = c;\n            }\n        }\n    }\n    VI zs;\n    for (int c = C; c > 0; c = ys[c]) {\n        zs.push_back(c - ys[c]);\n    }\n    return zs;\n}\n\n\n\n//confirmation\n//--------------------------------------------\n\n//clear memory\n#define CLR(arr, d) memset((arr), (d),sizeof(arr))\n\n//debug\n#define dump(x)  cerr << #x << \" = \" << (x) << endl;\n#define debug(x) cerr << #x << \" = \" << (x) << \" (L\" << __LINE__ << \")\" << \" \" << __FILE__ << endl;\n\n\n\n//平面幾何\n//--------------------------------------------\n//--------------------------------------------\n//--------------------------------------------\n//--------------------------------------------\n//--------------------------------------------\n\n//宣言\n//--------------------------------------------\n\n//long double or double\ntypedef double Real;\n\n//ポイントクラス\ntypedef complex<Real> Point;\n\n//線分クラス\ntypedef pair<Point, Point> Line;\n\n//円\ntypedef pair<Point, Real> Circle;\n\n//ポリゴン\ntypedef vector<Point> Poly;\n\n\n//x座標優先で比較する\nnamespace std {\n    bool operator<(const Point &a, const Point &b) {\n        return real(a) == real(b) ? imag(a) < imag(b) : real(a) < real(b);\n    }\n}\n\n\n//doubleの誤差\n#define EPS (1e-4)\n//double同士の比較\n#define EQ(a, b) (abs((a)-(b)) < EPS)\n//Pointの比較\n#define EQP(a, b) ( EQ((a).real(), (b).real()) && EQ((a).imag(), (b).imag()) )\n\n\n//角度\n//--------------------------------------------\nReal toRadian(double degree) {\n    return degree * PI / 180.0;\n}\n\nReal toDegree(double radian) {\n    return radian * 180.0 / PI;\n}\n\n\n\n\n\n\n\n//内積・外積・単位・法線\n//--------------------------------------------\n\n//ベクトルpの向きの単位ベクトルを返す\nPoint unit_vector(Point p) {\n    return p / abs(p);\n}\n\n\n//pの法線ベクトルを両方返す\npair<Point, Point> norm_vectors(Point p) {\n    return make_pair(p * Point(0, 1), p * Point(0, -1));\n}\n\n//ベクトルを反時計に回す sはラジアン\nPoint rotate_vector(Point v, double s) {\n    return Point(v.real() * cos(s) - v.imag() * sin(s), v.real() * sin(s) + v.imag() * cos(s));\n}\n\n//内積 a・b = |a||b|cosθ\ninline double dot(const Point &a, const Point &b) {\n    return (a.real() * b.real() + a.imag() * b.imag());\n}\n\n//外積 a×b = |a||b|sinθ\ninline double cross(const Point &a, const Point &b) {\n    return (a.real() * b.imag() - a.imag() * b.real());\n}\n\n//凸包\nvector<Point> convex_hull(vector<Point> v) {\n    int n = v.size(), k = 0;\n    sort(v.begin(), v.end());\n    vector<Point> r(2 * n);\n    for (int i = 0; i < n; i++) {\n        while (k > 1 && cross(r[k - 1] - r[k - 2], v[i] - r[k - 1]) <= EPS) k--;\n        r[k++] = v[i];\n    }\n    for (int i = n - 2, t = k; i >= 0; i--) {\n        while (k > t && cross(r[k - 1] - r[k - 2], v[i] - r[k - 1]) <= EPS) k--;\n        r[k++] = v[i];\n    }\n    r.resize(k - 1);\n    return r;\n}\n\n\n//三角形　角度・面積\n//--------------------------------------------\n//3点a, b, cのおける、角bacを返す\nReal args_bac(Point a, Point b, Point c) {\n    return acos(dot(b - a, c - a) / (abs(b - a) * abs(c - a)));\n}\n\n//各辺の長さがa, b, cの三角形の、aの対角の角度を返す\nReal args_bac(Real a, Real b, Real c) {\n    return acos((b * b + c * c - a * a) / (2 * b * c));\n}\n\n//三角形の面積\nReal heron_area(Real a, Real b, Real c) {\n    Real s = (a + b + c) / 2;\n    return sqrt(s * (s - a) * (s - b) * (s - c));\n}\n\n//三角形の重心\nPoint centerOfGravity(Point a, Point b, Point c) {\n    return Point((a.real() + b.real() + c.real()) / 3.0, (a.imag() + b.imag() + c.imag()) / 3.0);\n}\n\n//三角形の外接円の半径\nReal circumScribedCircleRadius(Point a, Point b, Point c) {\n    Real edgeA = abs(b - c);\n    Real angleA = args_bac(a, b, c);\n    return (edgeA / sin(angleA) / 2.0);\n}\n\n//三角形の外接円の中心座標　外心\nPoint circumScribedCircleXY(Point a, Point b, Point c) {\n    Real angleA = args_bac(a, b, c);\n    Real angleB = args_bac(b, a, c);\n    Real angleC = args_bac(c, a, b);\n    Real A = sin(2.0 * angleA);\n    Real B = sin(2.0 * angleB);\n    Real C = sin(2.0 * angleC);\n    Point point((a.real() * A + b.real() * B + c.real() * C) / (A + B + C),\n                (a.imag() * A + b.imag() * B + c.imag() * C) / (A + B + C));\n    return point;\n}\n\n//三角形が点Pを含むか\nbool point_in_triangle(Point a, Point b, Point c, Point p) {\n    Point ab = b - a;\n    Point bp = p - b;\n\n    Point bc = c - b;\n    Point cp = p - c;\n\n    Point ca = a - c;\n    Point ap = p - a;\n\n    Real c1 = cross(ab, bp);\n    Real c2 = cross(bc, cp);\n    Real c3 = cross(ca, ap);\n\n    //内側\n    if ((c1 > 0 && c2 > 0 && c3 > 0) || (c1 < 0 && c2 < 0 && c3 < 0)) {\n        return true;\n    } else {\n        return false;\n    }\n\n}\n\n\n//直線・線分\n//--------------------------------------------\n\n//頂点a, b, cの位置関係判定\nint points_relation(Point a, Point b, Point c) {\n    b -= a;\n    c -= a;\n    if (cross(b, c) > EPS) return 1; //counter-clockwise\n    if (cross(b, c) < -EPS) return -1; //clockwise\n    if (dot(b, c) < -EPS) return 2; //c--a--b on line\n    if (abs(b) < abs(c)) return -2; //a--b--c on line\n    return 0; //on segment\n}\n\n//2直線の直行判定 Point版\nbool is_orthogonal(Point a1, Point a2, Point b1, Point b2) {\n    return EQ(dot(a1 - a2, b1 - b2), 0.0);\n}\n\n//2直線の直行判定 Line版\nbool is_orthogonal(Line line1, Line line2) {\n    return EQ(dot(line1.first - line1.second, line2.first - line2.second), 0.0);\n}\n\n//2直線の平行判定 Point版\nbool is_parallel(Point a1, Point a2, Point b1, Point b2) {\n    return EQ(cross(a1 - a2, b1 - b2), 0.0);\n}\n\n//2直線の平行判定 Line版\nbool is_parallel(Line line1, Line line2) {\n    return EQ(cross(line1.first - line1.second, line2.first - line2.second), 0.0);\n}\n\n//点cが**直線**a-b上にあるか\nbool is_point_on_long_line(Point a, Point b, Point c) {\n    return EQ(cross(b - a, c - a), 0.0);\n}\n\n//点cが**線分**a-b上にあるか\nbool is_point_on_line(Point a, Point b, Point c) {\n    return (abs(a - c) + abs(c - b) < abs(a - b) + EPS);\n}\n\n//点a, bを通る**直線**と,点cとの距離d\ndouble distance_longline_point(Point a, Point b, Point c) {\n    return abs(cross(b - a, c - a)) / abs(b - a);\n}\n\n//直線と点との距離　円用\nReal line_dis(Line a, Point x) {\n    return abs(cross(a.second - a.first, x - a.first)) / abs(a.second - a.first);\n}\n\n//点a, bを端点とする**線分**と、点cとの距離d\nReal distance_line_point(Point a, Point b, Point c) {\n    if (dot(b - a, c - a) < EPS) return abs(c - a);\n    if (dot(a - b, c - b) < EPS) return abs(c - b);\n    return abs(cross(b - a, c - a)) / abs(b - a);\n}\n\n//点a1, a2を端点とする線分と、点b1, b2を端点とする線分の交差判定\nbool is_intersected_lines(Point a1, Point a2, Point b1, Point b2) {\n    return (points_relation(a1, a2, b1) * points_relation(a1, a2, b2) <= 0 &&\n            points_relation(b1, b2, a1) * points_relation(b1, b2, a2) <= 0);\n}\n\n//点a1, a2を端点とする線分と、点b1, b2を端点とする線分の距離\nReal distance_line_line(Point a1, Point a2, Point b1, Point b2) {\n    if (is_intersected_lines(a1, a2, b1, b2)) {\n        return 0;\n    } else {\n        return min({\n                           distance_line_point(a1, a2, b1),\n                           distance_line_point(a1, a2, b2),\n                           distance_line_point(b1, b2, a1),\n                           distance_line_point(b1, b2, a2)\n                   });\n    }\n}\n\n//点a1, a2を端点とする線分と、点b1, b2を端点とする線分の交点\nPoint intersection_lines_point(Point a1, Point a2, Point b1, Point b2) {\n    Point b = b2 - b1;\n    double d1 = abs(cross(b, a1 - b1));\n    double d2 = abs(cross(b, a2 - b1));\n    double t = d1 / (d1 + d2);\n    return a1 + (a2 - a1) * Point(t, 0);\n}\n\n//点a1, a2を通る直線と点b1, b2を通る直線の交点計算\nPoint intersection_longlines_point(Point a1, Point a2, Point b1, Point b2) {\n    Point a = a2 - a1;\n    Point b = b2 - b1;\n    return a1 + a * Point(cross(b, b1 - a1), 0) / Point(cross(b, a), 0);\n}\n\n\n//直線a-bに点pから垂線をおろしたときの交点\nPoint projection_point(Point a, Point b, Point p) {\n    Real t = dot(p - a, a - b) / (abs(a - b) * abs(a - b));\n    return a + (a - b) * t;\n}\n\n//点pを線対称移動させる\nPoint reflection_point(Point a, Point b, Point p) {\n    return p + (projection_point(a, b, p) - p) * (Real) 2.0;\n}\n\n\n\n\n//多角形\n//--------------------------------------------\n\n//面積を返す 反時計回りに整列させておく\nReal poly_area(Poly p) {\n    if (p.size() < 3)return 0;\n    Real res = cross(p[p.size() - 1], p[0]);\n    for (int i = 1; i < p.size(); i++) {\n        res += cross(p[i - 1], p[i]);\n    }\n    return res / 2;\n}\n\n//最遠点対　凸多角形で最も長い距離を返す\n//凸包の後に使うとよい\nReal longest_points_distance(Poly p) {\n    int n = p.size();\n    if (n == 2) {\n        return abs(p[0] - p[1]);\n    }\n\n    int i = 0, j = 0;\n    for (int k = 0; k < n; k++) {\n        if (!(p[i] < p[k])) i = k;\n        if (p[j] < p[k]) j = k;\n    }\n\n    Real res = 0;\n    int si = i, sj = j;\n    while (i != sj || j != si) {\n        res = max(res, abs(p[i] - p[j]));\n        if (cross(p[(i + 1) % n] - p[i], p[(j + 1) % n] - p[j]) < 0) i = (i + 1) % n;\n        else j = (j + 1) % n;\n    }\n\n    return res;\n}\n\n\n\n\n\n//円 第一引数は中点　第二引数は半径\n//--------------------------------------------\n\n//円の面積\nReal circle_area(Circle c) {\n    return PI * c.second * c.second;\n}\n\n//円の中に点xが内部にあるか\nbool circle_in_x(Circle c, Point x) {\n    return (abs(x - c.first) + EPS < c.second);\n}\n\n//円状に点xがあるか\nbool circle_on_x(Circle c, Point x) {\n    return EQ(abs(x - c.first), c.second);\n}\n\n//2つの円a, bの関係\nint circle_relation(Circle a, Circle b) {\n    double d = abs(a.first - b.first);\n\n    if (a.second + b.second + EPS < d) return -1; //no cross point outside\n    if (b.second + d + EPS < a.second) return 1; //no cross point(inside B in A)\n    if (a.second + d + EPS < b.second) return 2; //no cross point(inside A in B)\n\n    if (abs(a.second + b.second - d) < EPS) return -3; //one cross point(outside)\n    if (abs(b.second + d - a.second) < EPS) return 3; //one cross point(inside B in A)\n    if (abs(a.second + d - b.second) < EPS) return 4; //one cross point(inside A in B)\n\n    return 0; //two cross point\n}\n\n//2円a, bの共通面積\nReal intersection_area(Circle a, Circle b) {\n    Real d = abs(a.first - b.first);\n\n    if (a.second + b.second < d + EPS) return 0;\n\n    //円aを半径が大きい方にする\n    if (a.second < b.second) swap(a, b);\n\n    //円bが円aに入ってたら\n    if (b.second + d < a.second + EPS || b.second < EPS) return circle_area(b);\n\n    Real t1 = args_bac(b.second, a.second, d);\n    Real t2 = args_bac(a.second, b.second, d);\n    Real tri = (a.second * a.second * sin(t1 * 2) + b.second * b.second * sin(t2 * 2)) / 2.0;\n    return a.second * a.second * t1 + b.second * b.second * t2 - tri;\n}\n\n//2つの円の交点を返す\nvector<Point> circle_inter_points(Circle a, Circle b) {\n    vector<Point> v;\n    int pos = circle_relation(a, b);\n    if (pos == 0) {\n        Real s = args_bac(b.second, abs(b.first - a.first), a.second);\n        Point x = a.second * unit_vector(b.first - a.first);\n        v.push_back(a.first + rotate_vector(x, s));\n        v.push_back(a.first + rotate_vector(x, -s));\n    } else if (abs(pos) >= 3) {\n        v.push_back(a.first + a.second * unit_vector(b.first - a.first));\n    }\n    return v;\n}\n\n//円と直線の交点\nvector<Point> circle_inter_line_points(Circle a, Line l) {\n    vector<Point> v;\n    Real d = line_dis(l, a.first);\n    if (d < a.second + EPS) {\n        Point x = a.second * unit_vector(l.second - l.first);\n        if (points_relation(l.first, l.second, a.first) == 1) x = a.first + x * Point(0, -1);\n        else x = a.first + x * Point(0, 1);\n        if (d + EPS < a.second) {\n            Real y = sqrt(a.second * a.second - d * d);\n            if (d == 0) d += EPS;\n            Real s = args_bac(y, d, a.second);\n            v.push_back(rotate_vector(x, s));\n            v.push_back(rotate_vector(x, -s));\n        } else if (EQ(d, a.second)) {\n            v.push_back(x);\n        }\n    }\n    return v;\n}\n\n//点pを通る円cの接線\nvector<Line> adjust_line(Circle c, Point p) {\n    vector<Line> res;\n    if (circle_in_x(c, p)) return res;\n    if (circle_on_x(c, p)) {\n        pair<Point, Point> n = norm_vectors(c.first - p);\n        res.push_back(Line(n.first + p, p));\n        return res;\n    }\n    Real x = c.second, z = abs(c.first - p);\n    Real y = sqrt(z * z - x * x);\n    Real s = args_bac(y, x, z);\n    Point v = unit_vector(p - c.first) * c.second;\n\n    res.push_back(Line(rotate_vector(v, s) + c.first, p));\n    res.push_back(Line(rotate_vector(v, -s) + c.first, p));\n    return res;\n}\n\n//円の共通接線を求める\nvector<Line> common_adjust_line(Circle a, Circle b) {\n    vector<Line> res;\n    if (a.second + EPS < b.second) return common_adjust_line(b, a);\n    if (EQ(a.first.real(), b.first.real()) && EQ(a.first.imag(), b.first.imag()) && EQ(a.second, b.second)) return res;\n\n    Point pos = (b.first - a.first) * a.second / (a.second + b.second) + a.first;\n    if (!circle_in_x(a, pos)) res = adjust_line(a, pos);\n\n    if (EQ(a.second, b.second)) {\n        pair<Point, Point> n = norm_vectors(unit_vector(b.first - a.first) * a.second);\n        res.push_back(Line(a.first + n.first, b.first + n.first));\n        res.push_back(Line(a.first + n.second, b.first + n.second));\n    } else {\n        Real c = abs(b.first - a.first);\n        pos = unit_vector(b.first - a.first) * ((a.second * c) / (a.second - b.second)) + a.first;\n        if (!circle_in_x(a, pos)) {\n            vector<Line> tmp = adjust_line(a, pos);\n            for (int i = 0; i < tmp.size(); i++) res.push_back(tmp[i]);\n        }\n    }\n\n    return res;\n}\n\n\n//使い方\n//--------------------------------------------\n\n//xとyの取り出し型\n//a.real(); //x\n//a.imag(); //y\n\n//単位ベクトル\n//Point unit = a / abs(a);\n\n//ベクトルの長さをk倍する\n// a = a * Point(k, 0);\n\n//ベクトルaのk倍の法線ベクトル\n//P p1 = a * P(0, k);\n//P p2 = a * P(0, -k);\n\n//ベクトルaの単位法線ベクトル\n//P p1 = (a * P(0, 1)) /abs(a);\n//P p2 = (a * P(0, -1)) /abs(a);\n\n/*\n *\n *\n *   ~~~~Below My Answer~~~~\n *\n *\n **/\n\n\n\nint main() {\n\n    int q;\n    cin >> q;\n\n\n    for (int i = 0; i < q; i++) {\n        double x[4];\n        double y[4];\n        Point points[4];\n\n        for (int i = 0; i < 4; i++) {\n            double x, y;\n            cin >> x >> y;\n            points[i] = Point(x, y);\n        }\n\n        auto ans = distance_line_line(points[0], points[1], points[2], points[3]);\n\n        cout << fixed << setprecision(10) << ans << endl;\n\n    }\n\n\n    return 0;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#include<stdio.h>\nusing namespace std;\n#define FOR(i,k,n) for(int i = (k); i < (n); i++)\n#define REP(i,n) FOR(i,0,n)\n#define ALL(a) begin(a),end(a)\n#define MS(m,v) memset(m,v,sizeof(m))\n#define D10  fixed<<setprecision(10)\ntypedef vector<int> vi;\ntypedef vector<string> vs;\ntypedef pair<int, int> P;\ntypedef long long ll;\nconst ll INF = 114514810;\nconst ll MOD = 1000000007;\nconst double EPS = 1e-8;\nconst double PI = acos(-1.0);\nstruct edge\n{\n\tint to, cost;\n\tbool operator < (const edge& e) const { return cost < e.cost; }\n\tbool operator >(const edge& e) const { return cost > e.cost; }\n};\nint dx[] = { -1, 0, 0, 1 }; int dy[] = { 0, -1, 1, 0 };\nbool valid(int x, int y, int h, int w) { return (x >= 0 && y >= 0 && x < h&&y < w); }\n///*************************************************************************************///\n///*************************************************************************************///\n///*************************************************************************************///\n\nbool eq(double a, double b) { return fabs(a - b) < EPS; }\n\nstruct point\n{\n\tdouble x, y;\n\tpoint(double x = 0, double y = 0) :x(x), y(y) {};\n\n\tpoint operator + (point p) { return point(x + p.x, y + p.y); }\n\tpoint operator - (point p) { return point(x - p.x, y - p.y); }\n\tpoint operator * (double s) { return point(x * s, y * s); }\n\tpoint operator / (double s) { return point(x / s, y / s); }\n\n\tdouble norm() { return x*x + y*y; }\n\tdouble abs() { return sqrt(norm()); }\n\n\tbool operator < (const point &p) const\n\t{\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const point &p) const\n\t{\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n\n};\n\ndouble dot(point a, point b)\n{\n\treturn a.x*b.x + a.y*b.y;\n}\n\ndouble cross(point a, point b)\n{\n\treturn a.x*b.y - a.y*b.x;\n}\n\nstruct line\n{\n\tpoint a, b;\n\tline(double x1 = 0, double y1 = 0, double x2 = 0, double y2 = 0) :a(point(x1, y1)), b(point(x2, y2)) {};\n\tline(point p, point q) :a(p), b(q) {};\n\tpoint univec() { return (b - a) / (b - a).norm(); }\n};\n\nint ccw(point a, point b, point c)\n{\n\tb = b - a; c = c - a;\n\tif (cross(b, c) > EPS) return 1;\n\tif (cross(b, c) < -EPS) return -1;\n\tif (dot(b, c) < 0) return 2;\n\tif (b.norm() < c.norm()) return -2;\n\treturn 0;\n}\n\nbool isis_sp(line s, point p)\n{\n\treturn ((s.a - p).abs() + (s.b - p).abs() - (s.b - s.a).abs()) < EPS;\n}\n\nbool isis_ss(line s, line t)\n{\n\treturn (ccw(s.a, s.b, t.a)*ccw(s.a, s.b, t.b) <= 0 &&\n\t\tccw(t.a, t.b, s.a)*ccw(t.a, t.b, s.b) <= 0);\n}\n\npoint cross_point_ss(line s1, line s2)\n{\n\tpoint base = s2.b - s2.a;\n\tdouble d1 = abs(cross(base, s1.a - s2.a));\n\tdouble d2 = abs(cross(base, s1.b - s2.a));\n\tdouble t = d1 / (d1 + d2);\n\treturn s1.a + (s1.b - s1.a)*t;\n}\n\npoint projection(line l, point p)\n{\n\tpoint base = l.b - l.a;\n\tdouble r = dot(p - l.a, base) / base.norm();\n\treturn l.a + base*r;\n}\n\ndouble dist_sp(line s, point p)\n{\n\tpoint r = projection(s, p);\n\tif (isis_sp(s, r)) return (r - p).abs();\n\treturn min((s.a - p).abs(), (s.b - p).abs());\n}\n\ndouble dist_ss(line s1, line s2)\n{\n\tif (isis_ss(s1, s2)) return 0;\n\treturn min({ dist_sp(s1, s2.a), dist_sp(s1, s2.b),\n\t\tdist_sp(s2, s1.a), dist_sp(s2, s1.b) });\n}\n\nint main()\n{\n\tint q; cin >> q;\n\twhile (q--)\n\t{\n\t\tdouble x[4], y[4];\n\t\tREP(i, 4) cin >> x[i] >> y[i];\n\t\tline s(x[0], y[0], x[1], y[1]);\n\t\tline t(x[2], y[2], x[3], y[3]);\n\t\tcout << D10 << dist_ss(s, t) << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nnamespace LCY{\n\t#define double long double\n\tconst double EPS=1e-10;\n\tinline int dcmp(double x){if(fabs(x)<EPS)return 0;return (x<0)?-1:1;}\n\tstruct Point{double x,y;Point(double _x=0,double _y=0){x=_x;y=_y;}};\n\tstruct Vector{double x,y;Vector(double _x=0,double _y=0){x=_x;y=_y;}};\n\t\n\tVector operator - (Point a,Point b){return Vector(a.x-b.x,a.y-b.y);}\n\tVector operator * (Vector a,double d){return Vector(a.x*d,a.y*d);}\n\tPoint operator + (Point a,Vector b){return Point(a.x+b.x,a.y+b.y);}\n\t\n\tinline double dot(Vector a,Vector b){return a.x*b.x+a.y*b.y;}\n\tinline double cross(Vector a,Vector b){return a.x*b.y-a.y*b.x;}\n\tinline double norm(Vector a){return dot(a,a);}\n\tinline double abs(Vector a){return std::sqrt(norm(a));}\n\t\n\tstruct Line{\n\t\tPoint p1,p2;\n\t\tLine(Point _p1=Point(0,0),Point _p2=Point(0,0)){p1=_p1;p2=_p2;}\n\t};\n\tinline bool is_parallel(Line l1,Line l2){return dcmp(cross(l2.p2-l2.p1,l1.p2-l1.p1))==0;}\n\tinline bool is_vertical(Line l1,Line l2){return dcmp(dot(l2.p2-l2.p1,l1.p2-l1.p1))==0;}\n\t\n\tPoint project(Line l,Point p){\n\t\tVector base=l.p2-l.p1;\n\t\tdouble r=dot(p-l.p1,base)/norm(base);\n\t\treturn l.p1+base*r;\n\t}\n\tPoint reflect(Line l,Point p){\n\t\tPoint q=project(l,p);\n\t\tVector v=p-q;v.x=-v.x;v.y=-v.y;\n\t\treturn q+v;\n\t}\n\tint ccw(Vector v1,Vector v2){\n\t\tif(dcmp(cross(v1,v2))>0)return 1;//COUNTER_CLOCKWISE\n\t\telse if(dcmp(cross(v1,v2))<0)return 2;//CLOCKWISE\n\t\telse{\n\t\t\tif(dcmp(dot(v1,v2))<0)return 3;//ONLINE_BACK\n\t\t\telse{\n\t\t\t\tif(dcmp(norm(v1)-norm(v2))<0)return 4;//ONLINE_FRONT\n\t\t\t\telse return 5;//ON_SEGMENT\n\t\t\t}\n\t\t}\n\t}\n\tinline bool is_inter(Line l1,Line l2){\n\t\tbool flag=1;\n\t\tint t1=ccw(l1.p2-l1.p1,l2.p1-l1.p1),t2=ccw(l1.p2-l1.p1,l2.p2-l1.p1);\n\t\tif(t1==5 || t2==5) return true;\n\t\telse if(t1==t2)return false;\n\t\telse if(t1>=3 && t2<=2) return false;\n\t\telse if(t1<=2 && t2>=3) return false;\n\t\tswap(l1,l2);\n\t\tt1=ccw(l1.p2-l1.p1,l2.p1-l1.p1),t2=ccw(l1.p2-l1.p1,l2.p2-l1.p1);\n\t\tif(t1==5 || t2==5) return true;\n\t\telse if(t1==t2)return false;\n\t\telse if(t1>=3 && t2<=2) return false;\n\t\telse if(t1<=2 && t2>=3) return false;\n\t\treturn true;\n\t}\n\tinline Point line_intersection(Line l1,Line l2){\n\t\tif(is_parallel(l1,l2)) return Point(233,233);\n\t\tVector u=l1.p1-l2.p1,v=l1.p2-l1.p1,w=l2.p2-l2.p1;\n\t\tdouble t=cross(w,u)/cross(v,w);\n\t\treturn l1.p1+v*t;\n\t}\n\tinline Point segment_intersection(Line l1,Line l2){\n\t\tif(!is_inter(l1,l2)) return Point(233,233);\n\t\treturn line_intersection(l1,l2);\n\t}\n\tinline double line_point_distance(Line l,Point p){\n\t\treturn std::abs(cross(l.p2-l.p1,p-l.p1))/abs(l.p2-l.p1);\n\t}\n\tinline double segment_point_distance(Line l,Point p){\n\t\tif(dcmp(dot(l.p2-l.p1,p-l.p1))<0) return abs(p-l.p1);\n\t\tif(dcmp(dot(l.p1-l.p2,p-l.p2))<0) return abs(p-l.p2);\n\t\treturn line_point_distance(l,p);\n\t}\n\tinline double segment_distance(Line l1,Line l2){\n\t\t#define spd segment_point_distance\n\t\tif(is_inter(l1,l2))return 0.0;\n\t\treturn std::min(std::min(spd(l1,l2.p1),spd(l1,l2.p2)),std::min(spd(l2,l1.p1),spd(l2,l1.p2)));\n\t}\n\t\n}\nusing namespace LCY;\nint main(){\n\tint n;cin>>n;while(n--){\n\t\tPoint p1,p2,p3,p4;\n\t\tcin>>p1.x>>p1.y>>p2.x>>p2.y>>p3.x>>p3.y>>p4.x>>p4.y;\n\t\tcout<<setiosflags(ios::fixed)<<setprecision(10)<<segment_distance(Line(p1,p2),Line(p3,p4))<<endl;\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cmath>\n#include <complex>\n#include <vector>\n#include <algorithm>\nusing namespace std;\nconst double EPS = 1e-10;\nbool EQ(double a, double b){return fabs(a-b) < EPS;}\ntypedef complex<double> Point;\n#define X real()\n#define Y imag()\nnamespace std {\n  bool operator == (const Point &a, const Point &b) {\n    return EQ(a.X, b.X) && EQ(a.Y, b.Y);\n  }\n  bool operator < (const Point &a, const Point &b) {\n    return a.X != b.X ? a.X < b.X : a.Y < b.Y;\n  }\n}\nstruct Segment {\n  Point p1, p2;\n  Segment(){};\n  Segment(Point p1, Point p2) : p1(p1), p2(p2) {};\n};\ntypedef Segment Line;\ntypedef vector<Point> Polygon;\ndouble dot(Point a, Point b){return real(conj(a) * b);}\ndouble cross(Point a, Point b){return imag(conj(a) * b);}\nPoint project(Segment s, Point p) {\n  double r = dot(p - s.p1, s.p2 - s.p1) / norm(s.p2 - s.p1);\n  return s.p1 + (s.p2 - s.p1) * r;\n}\nPoint reflect(Segment s, Point p) {\n  return p + (project(s, p) - p) * 2.0;\n}\nbool isOrthogonal(Line l1, Line l2) {\n  return EQ(dot(l1.p1 - l1.p2, l2.p1 - l2.p2), 0.0);\n}\nbool isParallel(Line l1, Line l2) {\n  return EQ(cross(l1.p1 - l1.p2, l2.p1 - l2.p2), 0.0);\n}\nbool intersectLP(Line l, Point p) {\n  return EQ(cross(l.p2 - p, l.p1 - p), 0.0);\n}\nbool intersectSP(Segment s, Point p) {\n  return EQ(abs(s.p1 - p) + abs(p - s.p2), abs(s.p2 - s.p1));\n}\nconst int COUNTER_CLOCKWISE = +1;\nconst int CLOCKWISE = -1;\nconst int ONLINE_BACK = +2;\nconst int ONLINE_FRONT = -2;\nconst int ON_SEGMENT = 0;\nint ccw(Point a, Point b, Point c) {\n  Point x = b - a;\n  Point y = c - a;\n  if(cross(x, y) > EPS) return COUNTER_CLOCKWISE;\n  if(cross(x, y) < -EPS) return CLOCKWISE;\n  if(dot(x, y) < -EPS) return ONLINE_BACK;\n  if(norm(x) < norm(y)) return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\nbool intersectSS(Segment s1, Segment s2) {\n  return ccw(s1.p1, s1.p2, s2.p1) * ccw(s1.p1, s1.p2, s2.p2) <= 0 &&\n    ccw(s2.p1, s2.p2, s1.p1) * ccw(s2.p1, s2.p2, s1.p2) <= 0;\n}\nbool intersectLS(Line l, Segment s) {\n  return cross(l.p2 - l.p1, s.p1 - l.p1) * cross(l.p2 - l.p1, s.p2 - l.p1) < EPS;\n}\nPoint getCrossPointSS(Segment s1, Segment s2) {\n  Point b = s2.p2 - s2.p1;\n  double d1 = abs(cross(b, s1.p1 - s2.p1));\n  double d2 = abs(cross(b, s1.p2 - s2.p1));\n  double t = d1 / (d1 + d2);\n  return s1.p1 + (s1.p2 - s1.p1) * t;\n}\nbool intersectLL(Line l1, Line l2) {\n  return !isParallel(l1,l2) ||\n    EQ(cross(l1.p2 - l1.p1, l2.p1 - l1.p1), 0.0);\n}\nPoint getCrossPointLL(Line l1, Line l2) {\n  Point a = l1.p2 - l1.p1;\n  Point b = l2.p2 - l2.p1;\n  return l1.p1 + a * cross(b, l2.p1 - l1.p1) / cross(b, a);\n}\ndouble distancePP(Point a, Point b) {\n  return abs(a - b);\n}\ndouble distanceLP(Line l, Point p) {\n  return distancePP(p, project(l, p));\n}\ndouble distanceSP(Segment s, Point p) {\n  if(dot(s.p2 - s.p1, p - s.p1) < -EPS) return distancePP(p, s.p1);\n  if(dot(s.p1 - s.p2, p - s.p2) < -EPS) return distancePP(p, s.p2);\n  return distanceLP(s, p);\n}\ndouble distanceSS(Segment s1, Segment s2) {\n  if(intersectSS(s1, s2)) return 0.0;\n  return min(min(distanceSP(s1, s2.p1), distanceSP(s1, s2.p2)),\n\t     min(distanceSP(s2, s1.p1), distanceSP(s2, s1.p2)));\n}\ndouble distanceLL(Line l1, Line l2) {\n  if(intersectLL(l1, l2)) return 0.0;\n  else return distanceLP(l1, l2.p1);\n}\n#define curr(P,i) P[i]\n#define next(P,i) P[(i+1)%P.size()]\ndouble area(Polygon P) {\n  double a = 0;\n  for(int i = 0; i < P.size(); ++i)\n    a += cross(curr(P,i), next(P,i));\n  return 0.5 * a;\n}\n#define prev(P,i) P[(i+P.size()-1) % P.size()]\nbool isConvex(Polygon P) {\n  for(int i = 0; i < P.size(); ++i)\n    if(ccw(prev(P,i), curr(P,i), next(P,i)) == CLOCKWISE) return false;\n  return true;\n}\nconst int IN = 2;\nconst int ON = 1;\nconst int OUT = 0;\nint contains(Polygon P, Point p) {\n  bool in = false;\n  for(int i = 0; i < P.size(); ++i){\n    Point a = curr(P,i) - p;\n\n    Point b = next(P,i) - p;\n    if(EQ(cross(a,b), 0.0) && dot(a,b) < EPS) return ON;\n    if(a.Y > b.Y) swap(a,b);\n    if(a.Y < EPS && EPS < b.Y && cross(a,b) > EPS) in = !in;\n  }\n  return in ? IN: OUT;\n}\nint main()\n{\n  int n;\n  cin >> n;\n\n  for(int i=0;i<n;i++){\n    Segment l1,l2;\n    cin >> l1.p1.X >> l1.p1.Y >> l1.p2.X >> l1.p2.Y;\n    cin >> l2.p1.X >> l2.p1.Y >> l2.p2.X >> l2.p2.Y;\n\n    printf(\"%.10f\\n\",distanceSS(l1,l2));\n\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n\ninline int sign(const double &x){\n    if(x>EPS) return 1;\n    else if(x<-EPS) return -1;\n    return 0;\n}\n\n/*   点  */\nstruct Point{\n    double x,y;\n\n    Point(double x=0,double y=0):x(x),y(y){}\n\n    Point operator + (Point p) { return Point(x+p.x,y+p.y); }\n    Point operator - (Point p) { return Point(x-p.x,y-p.y); }\n    Point operator * (double k) { return Point(k*x,k*y); }\n    Point operator / (double k) { return Point(x/k,y/k); }\n\n    //向量的大小\n    double abs(){ return sqrt(norm()); }\n    double norm() { return x*x+y*y; }\n\n    bool operator < (const Point & p) const{\n        return x!=p.x?x<p.x:y<p.y;\n    }\n\n    bool operator == (const Point & p) const {\n        return fabs(x-p.x)<EPS&&fabs(y-p.y)<EPS;\n    }\n};\n\n//两点间的距离\ndouble getDistance(Point a,Point b){\n    return (a-b).abs();\n}\n\n/*   向量  */\ntypedef Point Vector;\n\n//向量a和b的内积\ndouble dot(Vector a,Vector b){\n    return a.x*b.x+a.y*b.y;\n}\n//向量a和b的外积\ndouble cross(Vector a,Vector b){\n    return a.x*b.y-a.y*b.x;\n}\n\n/*   线段  */\nstruct Segment{\n    Point p1,p2;\n};\n\n/*   直线  */\ntypedef Segment Line;\n\n//点到直线的距离\ndouble getDistanceLP(Line l,Point p){\n    return abs(cross(l.p2-l.p1,p-l.p1)/(l.p2-l.p1).abs());\n}\n\n//点到线段的距离\ndouble getDistanceSP(Segment s,Point p){\n    if(dot(s.p2-s.p1,p-s.p1)<0.0) return (p-s.p1).abs();\n    if(dot(s.p1-s.p2,p-s.p2)<0.0) return (p-s.p2).abs();\n    return getDistanceLP(s,p);\n}\n\n//判断p2与向量p1-p0的位置关系\n\nconst int COUNTER_CLOCKWISE = -1;   //逆时针\nconst int CLOCKWISE = 1;            //顺时针\nconst int ON_SEGMENT = 0;           //在线段上\n\nint ccw(Point p0,Point p1,Point p2){\n    Vector a=p1-p0;\n    Vector b=p2-p0;\n    if(cross(a,b)>EPS) return COUNTER_CLOCKWISE;\n    if(cross(a,b)<EPS) return CLOCKWISE;\n    return ON_SEGMENT;\n}\n\n//判断线段p1p2与线段p3p4是否相交\nbool intersect(Point p1,Point p2,Point p3,Point p4){\n    return ( ccw(p1,p2,p3)*ccw(p1,p2,p4)<=0 &&\n             ccw(p3,p4,p1)*ccw(p3,p4,p2)<=0 );\n}\n\nbool intersect(Segment s1,Segment s2){\n    return intersect(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n\n//线段与线段的距离\ndouble getDistance(Segment s1,Segment s2){\n    if(intersect(s1,s2)) return 0.0;\n    return min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),\n               min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n}\n\n/* 直线正交\n * 判断向量a，b是否正交 =》a，b的内积为0\n */\nbool isOrthogonal(Vector a,Vector b){\n    return equals(dot(a,b),0.0);\n}\n\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n    return isOrthogonal(a1-a2,b1-b2);\n}\n\n/* 直线平行\n * 判断向量a，b是否平行 =》a，b的内积为0\n */\nbool isParallel(Vector a,Vector b){\n    return equals(cross(a,b),0.0);\n}\n\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n    return isParallel(a1-a2,b1-b2);\n}\n\nstruct Circle{\n    Point c;\n    double r;\n    Circle(Point c = Point() ,double r = 0.0 ):c(c),r(r){}\n};\n\n/*   多边形  */\ntypedef vector<Point> Polygon;\n\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    while(n--){\n        Point p1,p2,p3,p4;\n        scanf(\"%lf%lf%lf%lf%lf%lf%lf%lf\",&p1.x,&p1.y,&p2.x,&p2.y,&p3.x,&p3.y,&p4.x,&p4.y);\n        printf(\"%.10f\\n\",getDistance(Segment{p1,p2},Segment{p3,p4}));\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\ntypedef double ll;\n\nstruct Point\n{\n    ll x,y;\n    Point(){ x = y = 0.0; }\n    Point(ll _x, ll _y) : x(_x), y(_y){}\n\n    Point operator+ (Point p)\n    {\n        return Point(p.x + x, p.y + y);\n    }\n\n    Point operator- (Point p)\n    {\n        return Point(x - p.x, y - p.y);\n    }\n\n    ll operator* (Point p)\n    {\n        return p.x * x + p.y * y;\n    }\n\n    Point operator* (ll t)\n    {\n        return Point(x*t, y*t);\n    }\n\n    ll operator~ ()\n    {\n        return x * x + y * y;\n    }\n\n    ll operator% (Point p)\n    {\n        return x * p.y - y * p.x;\n    }\n\n};\n\nbool areIntersectSegment(Point a, Point b, Point p, Point q)\n{\n    Point v1=(b-a);\n    Point v2=(q-p);\n    double t,t1;\n    if( v1 % v2 != 0 )\n    {\n        t = (double)(( p - a ) % v2) / (double)(v1 % v2);\n        t1 = (double)(( a - p ) % v1) / (double)(v2 % v1);\n        if( t >= 0.0 && t <= 1.0 && t1 >= 0.0 && t1 <= 1.0) return true;\n        else return false;\n    }\n    else\n    {\n        // Segment collinear\n        if( v1 % v2 == 0 && (p - a) % v1 == 0 )\n        {\n            t = (double)((p - a)*v1) /  (double)(v1*v1);\n            t1 = (double)((p+v2-a)*v1) / (double)(v1*v1);\n            //If are in opposite direction\n            if( v1 * v2 < 0 )\n            {\n                if( t1 <= 1.0 && 0.0 <= t ) return true;\n            }\n            else\n            {\n                if( t <= 1.0 && 0.0 <= t1 ) return true;\n            }\n        }\n    }\n    return false;\n}\n\ndouble projection(Point p1, Point p2, Point o)\n{\n    Point a = (p2 - p1);\n    Point b = (o - p1);\n    return ( (a * b) / (a * a) );\n}\n\ndouble distanceSegment(Point a, Point b, Point p, Point q)\n{\n    double t;\n    Point aux;\n    if( !areIntersectSegment(a,b,p,q) )\n    {\n        t = projection(a,b,p);\n        if( t < 0.0 ) return sqrt(~(p - a));\n        if( t > 1.0) return sqrt(~(p - b));\n        aux = a + b * t;\n        return  ~(p - aux);\n    }\n    return 0.0;\n}\n\nint main()\n{\n    cout << fixed;\n    cout.precision(10);\n    ios::sync_with_stdio(0); cin.tie(0);\n    Point p0,p1,p2,p3,ans;\n    Point vec, vec1;\n    int q;\n    cin >> q;\n    while(q--)\n    {\n        cin >> p0.x >> p0.y >> p1.x >> p1.y >> p2.x >> p2.y >> p3.x >> p3.y;\n        cout << distanceSegment(p0, p1, p2, p3) << '\\n';\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> Point;\ntypedef pair<Point, Point> Line;\nconst double EPS = 1e-15;\n\n// 内積 |a||b|cosθ\ndouble dot(Point a, Point b){\n\t// return a.real() * b.real() + a.imag() * b.imag();\n\treturn (conj(a) * b).real();\n}\n// 外積、符号付面積の２倍　|a||b|sinθ\ndouble cross(Point a, Point b){\n\t// return a.real() * b.imag() - a.imag() * b.real();\n\treturn (conj(a) * b).imag();\n}\n// 点と直線の距離\ndouble line_to_point_dis(Line l, Point p){\n    Point a = l.first, b = l.second, c = p;\n    return fabs(cross(c - a, b - a)) / fabs(abs(b - a));\n}\n// 線分と直線の距離\ndouble seg_to_point_dis(Line l, Point p){\n    Point a = l.first, b = l.second, c = p;\n    if(dot(b - a, c - a) < EPS) return abs(c - a);\n    if(dot(a - b, c - b) < EPS) return abs(c - b);\n    return line_to_point_dis(l, p);\n}\n// 線分と線分の距離\ndouble seg_to_seg_dis(Line a, Line b){\n    double res = seg_to_point_dis(a, b.first);\n    res = min(res, seg_to_point_dis(a, b.second));\n    res = min(res, seg_to_point_dis(b, a.first));\n    res = min(res, seg_to_point_dis(b, a.second));\n    return res;\n}\n\nint main(){\n    int q;\n    cin >> q;\n    for(int i = 0; i < q; i++){\n        double x, y;\n        Point p[4];\n        for(int j = 0; j < 4; j++){\n            cin >> x >> y;\n            p[j] = {x, y};\n        }\n        Line s1 = {p[0], p[1]};\n        Line s2 = {p[2], p[3]};\n        double len = seg_to_seg_dis(s1, s2);\n        printf(\"%.15f\\n\", len);\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<cmath>\n#include<iostream>\n#include<algorithm>\n#include<iomanip>\n#include<vector>\n#include<cassert>\n\nusing namespace std;\n\nnamespace geometry2d {\n\n\t//eps　浮動小数点誤差\n\tconst double EPS = 1e-10;\n\n\t//a > 0ならば+1, a == 0ならば0, a < 0ならば-1　を返す。　基本的にEPS込みの評価はこれで行う。\n\t//不等式は、加減算に直してこれに適用する。\n\tint sgn(const double a) {\n\t\treturn (a < -EPS ? -1 : (a > EPS ? +1 : 0));\n\t}\n\n\tstruct Point {\n\t\t//2次元ベクトルのクラス\n\n\t\tdouble x, y;\n\t\tPoint(double _x, double _y) {\n\t\t\tx = _x, y = _y;\n\t\t}\n\t\tPoint() {\n\t\t\tx = 0, y = 0;\n\t\t}\n\n\t\tPoint operator+() const {\n\t\t\treturn *this;\n\t\t}\n\t\tPoint operator-() const {\n\t\t\treturn{ -x, -y };\n\t\t}\n\t\tPoint operator+ (const Point& b) const {\n\t\t\treturn{ x + b.x, y + b.y };\n\t\t}\n\t\tPoint operator- (const Point& b) const {\n\t\t\treturn{ x - b.x, y - b.y };\n\t\t}\n\t\tPoint operator* (const double b) const {\n\t\t\treturn{ x * b, y * b };\n\t\t}\n\t\tPoint operator/ (const double b) const {\n\t\t\treturn{ x / b, y / b };\n\t\t}\n\t\tPoint operator+= (const Point& b) {\n\t\t\tx += b.x, y += b.y;\n\t\t\treturn *this;\n\t\t}\n\t\tPoint operator-= (const Point& b) {\n\t\t\tx -= b.x, y -= b.y;\n\t\t\treturn *this;\n\t\t}\n\t\tPoint operator*= (const double b) {\n\t\t\tx *= b, y *= b;\n\t\t\treturn *this;\n\t\t}\n\t\tPoint operator/= (const double b) {\n\t\t\tx /= b, y /= b;\n\t\t\treturn *this;\n\t\t}\n\t\tbool operator== (const Point& b) {\n\t\t\treturn b.x == x && b.y == y;\n\t\t}\n\n\t\tdouble lengthSquare() const {\n\t\t\treturn (x * x + y * y);\n\t\t}\n\t\tdouble length() const {\n\t\t\treturn std::sqrt(lengthSquare());\n\t\t}\n\t\tdouble dot(const Point& b) const {\n\t\t\treturn x * b.x + y * b.y;\n\t\t}\n\t\tdouble cross(const Point& b) const {\n\t\t\t//Generally, cross product is vector, but in 2D, cross product is also scalar.\n\t\t\treturn x * b.y - y * b.x;\n\t\t}\n\t\tdouble distanceFrom(const Point& b) const {\n\t\t\treturn std::sqrt((x - b.x) * (x - b.x) + (y - b.y) * (y - b.y));\n\t\t}\n\t\tPoint normalized() const {\n\t\t\treturn{ x / length(), y / length() };\n\t\t}\n\t\tbool isZero() const {\n\t\t\treturn sgn(x) == 0 && sgn(y) == 0;\n\t\t}\n\t\t//単位法線ベクトル\n\t\tPoint normalUnitVector() const {\n\t\t\treturn{ -normalized().y, normalized().x };\n\t\t}\n\t\t//(0, 0)中心にarg(弧度法)回転した座標\n\t\tPoint rotation(double arg) const {\n\t\t\tdouble cs = cos(arg), sn = sin(arg);\n\t\t\treturn Point(x * cs - y * sn, x * sn + y * cs);\n\t\t}\n\t\t//(0, 0)中心の円上に乗ってるとしたときの、偏角\n\t\tdouble angle() const {\n\t\t\treturn atan2(y, x);\n\t\t}\n\t};\n\n\tinline Point operator*(double a, const Point& b) {\n\t\treturn{ b.x * a, b.y * a };\n\t}\n\n\ttemplate <class Char>\n\tinline std::basic_ostream<Char>& operator <<(std::basic_ostream<Char>& os, const Point& v)\n\t{\n\t\treturn os << Char('(') << v.x << Char(',') << v.y << Char(')');\n\t}\n\n\ttemplate <class Char>\n\tinline std::basic_istream<Char>& operator >> (std::basic_istream<Char>& is, Point& v)\n\t{\n\t\treturn is >> v.x >> v.y;\n\t}\n\n\t//幾何ライブラリにおいて、解なしのような状態の時に返される点の値\n\tconst Point error_val = { 114514.0, -191981.0 };\n\n\tinline bool operator==(const Point& a, const Point& b) {\n\t\treturn (sgn(a.x - b.x) == 0 && sgn(a.y - b.y) == 0);\n\t}\n\n\t//第一にx, 第二にyを小さい順にソートするためのオーバーロード\n\tinline bool operator<(const Point& a, const Point& b) {\n\t\tif (sgn(a.x - b.x) != 0)return sgn(a.x - b.x) < 0;\n\t\telse sgn(a.y - b.y) < 0;\n\t}\n\n\t/*\n\t3点A, B, Cの位置関係を返す関数 A, Bがすべて異なった点であるのが前提\n\t//ABから見てBCは左に曲がるのなら +1\n\t//ABから見てBCは右に曲がるのなら -1\n\t//ABC(CBA)の順番で一直線上に並ぶなら +2\n\t//ACB(BCA)の順番で一直線上に並ぶなら 0\n\tBAC(CAB)の順番で一直線上に並ぶなら -2\n\t*/\n\tint iSP(const Point& a, const Point& b, const Point& c) {\n\t\tint flg = sgn((b - a).cross(c - a));\n\t\tif (flg == 1) {\n\t\t\treturn +1;\n\t\t}\n\t\telse if (flg == -1) {\n\t\t\treturn -1;\n\t\t}\n\t\telse {\n\t\t\t//ABC(CBA)\n\t\t\tif (sgn((b - a).dot(c - b)) > 0)\n\t\t\t\treturn +2;\n\t\t\t//BAC(CAB)\n\t\t\telse if (sgn((a - b).dot(c - a)) > 0)\n\t\t\t\treturn -2;\n\t\t\t//ACB(BCA)　CがA or Bと一致しても、こっちに含まれる。\n\t\t\telse\n\t\t\t\treturn 0;\n\t\t}\n\t}\n\n\t//直線に関する操作や判定\n\tnamespace line2d {\n\n\t\t//向きつき直線を想定。Segment\n\t\tstruct Line {\n\t\t\t\n\t\t\t//直線の通る二点。有向直線でないのならば、beginやendに違いはない。\n\t\t\tPoint begin, end;\n\n\t\t\tLine() {\n\t\t\t\tbegin = Point(), end = Point();\n\t\t\t}\n\n\t\t\tLine(const Point& b, const Point& e) {\n\t\t\t\tbegin = b, end = e;\n\t\t\t}\n\n\t\t\t//ax+by+c=0\n\t\t\tLine(const double a, const double b, const double c) {\n\t\t\t\tif (sgn(a) == 0 && sgn(b) == 0) {\n\t\t\t\t\tassert(-1);\n\t\t\t\t}\n\n\t\t\t\tif (sgn(b) == 0) {\n\t\t\t\t\t//ax+c=0になる。\n\t\t\t\t\tbegin = Point(-c / a, 0.0);\n\t\t\t\t\tend = Point(-c / a, 1.0);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t//y=-(ax+c)/b　傾きは-a/bで、y切片が-c/b\n\t\t\t\t\tbegin = Point(0, -c / b);\n\t\t\t\t\tend = Point(1.0, -(a + c) / b);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tPoint vec() const {\n\t\t\t\treturn end - begin;\n\t\t\t}\n\n\t\t\tPoint countervec() const {\n\t\t\t\treturn begin - end;\n\t\t\t}\n\n\t\t};\n\n\n\t\t//線分の場合、Lineと同じものになるが、はっきりと区別する\n\t\ttypedef Line Segment;\n\n\n\t\t//直線の交点を返す。交わってなければ、error_valを返す。\n\t\tPoint lineIntersection(const Line& l1, const Line& l2) {\n\t\t\tif (sgn(l1.vec().cross(l2.vec())) == 0)return error_val;\n\n\t\t\tPoint ret;\n\t\t\tret = l1.begin + l1.vec() * \n\t\t\t\tabs((l2.end - l1.begin).cross(l2.vec()) / l1.vec().cross(l2.vec()));\n\t\t\treturn ret;\n\t\t}\n\n\t\t//線分が共通部分を持つかどうか？と線分の交点を返す。共通部分がない、もしくは交点が一意ではないなら、error_valを返す。\n\t\t//trueなら、共通部分を持つ。falseなら、共通部分を持たない。\n\t\tpair<bool, Point> segmentIntersection(const Segment& s1, const Segment& s2) {\n\n\t\t\tif (iSP(s1.begin, s1.end, s2.begin) * iSP(s1.begin, s1.end, s2.end) <= 0 &&\n\t\t\t\tiSP(s2.begin, s2.end, s1.begin) * iSP(s2.begin, s2.end, s1.end) <= 0) {\n\n\t\t\t\t//平行ならば、交点は定まらない。(完全に重なってるので)\n\t\t\t\tif (s1.vec().cross(s2.vec()) == 0)\n\t\t\t\t\treturn make_pair(true, error_val);\n\t\t\t\telse //そうでないのなら、lineIntersection()で交点を返しておく。\n\t\t\t\t\treturn make_pair(true, lineIntersection(s1, s2));\n\n\t\t\t}\n\t\t\treturn make_pair(false, error_val);\n\t\t}\n\n\n\t\t//点と直線の距離。引数は、点、直線上の2点\n\t\tdouble distanceBetweenPointAndLine(const Point& p, const Line& l) {\n\t\t\treturn abs(l.vec().cross(p - l.begin) / l.vec().length());\n\t\t}\n\n\t\t//点と線分の距離。引数は、点、線分の両端\n\t\tdouble distanceBetweenPointAndSegment(const Point& p, const Segment& s) {\n\t\t\tif (sgn(s.vec().dot(p - s.begin)) < 0 || sgn(s.countervec().dot(p - s.end)) < 0) {\n\t\t\t\t//下した垂線は線分の上にはない\n\t\t\t\treturn min(p.distanceFrom(s.begin), p.distanceFrom(s.end));\n\t\t\t}\n\t\t\treturn distanceBetweenPointAndLine(p, s);\n\t\t}\n\n\t\t//二線分間の距離\n\t\tdouble distanceBetweenSegmentAndSegment(const Segment& s1, const Segment& s2) {\n\t\t\tif (segmentIntersection(s1, s2).first)return 0;//交点を持つ\n\n\t\t\tdouble ans = distanceBetweenPointAndSegment(s1.begin, s2);\n\t\t\tans = min(ans, distanceBetweenPointAndSegment(s1.end, s2));\n\t\t\tans = min(ans, distanceBetweenPointAndSegment(s2.begin, s1));\n\t\t\tans = min(ans, distanceBetweenPointAndSegment(s2.end, s1));\n\t\t\treturn ans;\n\t\t}\n\n\t\t//正射影\n\t\t//引数は点A, B, Cで、BAベクトルの直線BC上の正射影を求める。\n\t\tPoint projection(const Point& a, const Line& l) {\n\t\t\tPoint ret;\n\t\t\tret = l.begin + \n\t\t\t\tl.vec().normalized() * (a - l.begin).dot(l.vec()) / l.vec().length();\n\t\t\treturn ret;\n\t\t}\n\n\t\t//鏡映変換。引数は点A, B, Cで、直線BCにおいて、Aと線対称な点を求める。\n\t\tPoint reflection(const Point& a, const Line& l) {\n\t\t\tPoint ret;\n\t\t\tret = a + 2 * (projection(a, l) - a);\n\t\t\treturn ret;\n\t\t}\n\t}\n\n}\n\nint main() {\n\tint q;\n\tcin >> q;\n\twhile (q--) {\n\t\tgeometry2d::line2d::Segment s1, s2;\n\t\tcin >> s1.begin >> s1.end >> s2.begin >> s2.end;\n\t\t\n\t\tcout << setprecision(15) << geometry2d::line2d::distanceBetweenSegmentAndSegment(s1, s2) << endl;\n\t\t\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <cmath>\n#include <vector>\n#include <cstring>\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nusing namespace std;\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nstruct Point {\n    double x, y;\n    Point() {}\n    Point(double _x, double _y) : x(_x), y(_y) {}\n\n    Point operator + (Point p) { return Point(x+p.x, y+p.y); }\n    Point operator - (Point p) { return Point(x-p.x, y-p.y); }\n    Point operator * (double a) { return Point(x*a, y*a); }\n    Point operator / (double a) { return Point(x/a, y/a); }\n\n    double abs() { return sqrt(norm()); }\n    double norm() { return x * x + y * y; }\n\n    bool operator < (const Point &p) const {\n        return equals(x, p.x) ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point &p) const {\n        return equals(x, p.x) && equals(y, p.y);\n    }\n};\n\ntypedef Point Vector;\n\nstruct Segment {\n    Point p1, p2;\n    Segment(Point _p1 = Point(), Point _p2 = Point()) : p1(_p1), p2(_p2) {}\n};\n\ntypedef Segment Line;\n\n\ndouble dot(Vector a, Vector b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n    return a.x * b.y - a.y * b.x;\n}\n\nbool isOrthogonal(Vector a, Vector b) {\n    return equals(dot(a, b), 0.0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n    return isOrthogonal(a1-a2, b1-b2);\n}\n\nbool isOrthogonal(Segment s1, Segment s2) {\n    return equals(dot(s1.p2-s1.p1, s2.p2-s2.p1), 0.0);\n}\n\nbool isParallel(Vector a, Vector b) {\n    return equals(cross(a, b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n    return isParallel(a1-a2, b1-b2);\n}\n\nbool isParallel(Segment s1, Segment s2) {\n    return equals(cross(s1.p2-s1.p1, s2.p2-s2.p1), 0.0);\n}\n\nPoint project(Segment s, Point p) {\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / base.norm();\n    return s.p1 + base * r;\n}\n\nPoint reflect(Segment s, Point p) {\n    return p + (project(s, p) - p) * 2.0;\n}\n\nint ccw(Point p0, Point p1, Point p2) {\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n    if (cross(a, b) > -EPS) return CLOCKWISE;\n    if (dot(a, b) < -EPS) return ONLINE_BACK;\n    if (a.norm() < b.norm()) return ONLINE_FRONT;\n\n    return ON_SEGMENT;\n}\n\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 && \n            ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\n\nbool intersect(Segment s1, Segment s2) {\n    return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\ndouble getDistance(Point a, Point b) {\n    return (a-b).abs();\n}\n\ndouble getDistanceLP(Line l, Point p) {\n    return abs(cross(l.p2-l.p1, p-l.p1) / (l.p2-l.p1).abs());\n}\n\n\ndouble getDistanceSP(Segment s, Point p) {\n    if (dot(s.p2-s.p1, p-s.p1) < 0.0) return (p-s.p1).abs();\n    if (dot(s.p1-s.p2, p-s.p2) < 0.0) return (p-s.p2).abs();\n    return getDistanceLP(s, p);\n}\n\ndouble getDistance(Segment s1, Segment s2) {\n    if (intersect(s1, s2)) return 0.0;\n    return min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n            min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\nint main() {\n    int q;\n    scanf(\"%d\", &q);\n    while (q--) {\n        double x1, y1, x2, y2, x3, y3, x4, y4;\n        scanf(\"%lf %lf %lf %lf %lf %lf %lf %lf\", &x1, &y1, &x2, &y2, &x3, &y3, &x4, &y4);\n        Segment seg1 = Segment(Point(x1, y1), Point(x2, y2));\n        Segment seg2 = Segment(Point(x3, y3), Point(x4, y4));\n        printf(\"%.10lf\\n\", getDistance(seg1, seg2));\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n \n#define EPS (1e-10)\n#define equals(a,b) ( fabs(a-b) < EPS )\n#define PI 3.141592653589793238\n\n// COUNTER CLOCKWISE\nstatic const int CCW_COUNTER_CLOCKWISE = 1;\nstatic const int CCW_CLOCKWISE = -1;\nstatic const int CCW_ONLINE_BACK = 2;\nstatic const int CCW_ONLINE_FRONT = -2;\nstatic const int CCW_ON_SEGMENT = 0;\n\n//Intersect Circle and Circle\nstatic const int ICC_SEPARATE = 4;\nstatic const int ICC_CIRCUMSCRIBE = 3;\nstatic const int ICC_INTERSECT = 2;\nstatic const int ICC_INSCRIBE = 1;\nstatic const int ICC_CONTAIN = 0;\n\nstruct point{\n\tdouble x,y;\n\t//construct\n\tpoint() {} \n\tpoint(double x,double y):x(x),y(y){}\n\t//演算子\n\tpoint operator + (point p) { return point(x+p.x,y+p.y); }\n\tpoint operator - (point p) { return point(x-p.x,y-p.y); }\n\tpoint operator * (double k) { return point(x*k,y*k); }\n\tpoint operator / (double k) { return point(x/k,y/k); }\n\tpoint operator / (point p) { return point( (x*p.x + y*p.y)/p.norm()  , (-x*p.y + y*p.x)/p.norm() ) ; }\n\tbool operator < (point p) { return x!=p.x ? x<p.x : y<p.y; }\n\tbool operator == (point p) { return equals(x,p.x) && equals(y,p.y) ; }\n\t//function\n\tdouble arg() { return atan2(y,x) ; }\n\tdouble norm(){return x*x+y*y; }\n\tdouble abs() { return sqrt(norm() ) ;}\n\tdouble dot(point p) { return p.x*x + p.y*y; }\n\tdouble cross(point p) { return x*p.y - y*p.x; }\n\n\t//input output\n\tvoid input(){cin>>x>>y;}\n\tvoid polar(double r,double theta){ x = r*cos(theta), y= r*sin(theta) ; }\n\tvoid print(){cout<<x<<' '<<y<<endl;};\n\n};\n\nbool sort_x(point a,point b){\n\treturn a.x!=b.x?a.x<b.x:a.y<b.y ;\n}\nbool sort_y(point a,point b){\n\treturn a.y!=b.y?a.y<b.y:a.x<b.x ;\n}\n\ntypedef vector<point> polygon;\n\nstruct segment{\n\tpoint s,t;\n\tsegment() {}\n\tsegment(point s,point t) : s(s),t(t){}\n\tvoid input(){s.input(),t.input(); }\n};\ntypedef segment line;\n\nstruct circle{\n\tpoint c;\n\tdouble r;\n\tcircle() {}\n\tcircle(point c,double r) : c(c),r(r){}\n\n};\n\ndouble norm(point a){\treturn a.norm(); }\ndouble abs(point a){ return a.abs(); }\ndouble arg(point a){ return a.arg(); }\ndouble dot(point a,point b) { return a.x*b.x + a.y*b.y ; }\ndouble cross(point a,point b) { return a.x * b.y - a.y * b.x ; }\npoint polar(double r,double theta){ point a; a.polar(r,theta); return a; }\npoint orth(point p){ return point(-p.y,p.x); }\n\n//isOrthgonal 垂直\nbool isOrthogonal(point a,point b) { return equals(dot(a,b), 0.0 ) ; }\nbool isOrthogonal(point a,point b,point c,point d) { return isOrthogonal(a-b,c-d) ; }\nbool isOrthogonal(line l1,line l2 ){ return isOrthogonal(l1.t-l1.s,l2.t-l2.s); }\n//isParallel 平行\nbool isParallel(point a,point b) { return equals(cross(a,b), 0.0) ; }\nbool isParallel(point a,point b,point c,point d) { return isParallel(a-b,c-d); }\nbool isParallel(line l1,line l2) { return isParallel(l1.t-l1.s,l2.t-l2.s) ; }\n\npoint project(line l,point p){\n\tpoint base = l.t-l.s;\n\tdouble r = dot(p-l.s,base) / norm(base) ;\n\treturn l.s + base*r;\n}\npoint reflect(line l,point p){\n\treturn p + (project(l,p) - p) *2.0;\n}\n\nint ccw(point p0,point p1,point p2){\n\tpoint a = p1-p0;\n\tpoint b = p2-p0;\n\tif(cross(a,b) > EPS ) return CCW_COUNTER_CLOCKWISE ;\n\tif(cross(a,b) < -EPS ) return CCW_CLOCKWISE;\n\tif(dot(a,b) < -EPS ) return CCW_ONLINE_BACK;\n\tif(a.norm() < b.norm() ) return CCW_ONLINE_FRONT;\n\treturn CCW_ON_SEGMENT;\n}\n\n\n//intersect\nbool intersect(point p1,point p2,point p3,point p4){return (ccw(p1,p2,p3)*ccw(p1,p2,p4) <= 0 && ccw(p3,p4,p1)*ccw(p3,p4,p2) <= 0 ) ; }\nbool intersect(line l1,line l2) { return intersect(l1.s,l1.t,l2.s,l2.t) ; }\nbool intersect(polygon p,line l){\n\tint n = p.size();\n\tfor(int i=0;i<n;i++)  if(intersect(line(p[i],p[(i+1)%n] ) , l ) ) return true;\n\treturn false;\n}\nint intersect(circle c1,circle c2){\n\tif(c1.r < c2.r) swap(c1,c2);\n\tdouble d = abs(c1.c-c2.c);\n\tdouble r = c1.r + c2.r;\n\tif(equals(d,r) ) return ICC_CIRCUMSCRIBE;\n\tif(d > r ) return ICC_SEPARATE;\n\tif(equals(d+c2.r,c1.r) ) return ICC_INSCRIBE;\n\tif( d + c2.r < c1.r ) return ICC_CONTAIN;\n\treturn ICC_INTERSECT;\n}\n\n//bool intersectsc(line l,circle c){ return distancesp(l,c.c) <= c.r ; } distanceののち\nint intersectcs(circle c,line l ){// 0\t\t1\t\t2\n\tif(norm(project(l,c.c) - c.c )  - c.r*c.r  > EPS ) return 0;\n\tdouble d1 = abs(c.c-l.s),d2  = abs(c.c-l.t);\n\tif(d1 < c.r + EPS && d2 < c.r + EPS ) return 0;\n\tif( (d1<c.r - EPS && d2 > c.r +EPS) || (d1 > c.r +EPS &&d2 < c.r -EPS ) ) return 1;\n\tpoint h = project(l,c.c) ;\n\tif(dot(l.s-h,l.t-h) < 0 ) return 2;\n\treturn 0;\n}\n\n//distance\n//line point\ndouble distancelp(line l,point p){ return abs(cross(l.t-l.s,p-l.s)/ abs(l.t-l.s)  ); }\n//segment point\ndouble distancesp(line l,point p){ \n\tif(dot(l.t-l.s,p-l.s) < 0.0 ) return abs(p-l.s);\n\tif(dot(l.s-l.t,p-l.t) < 0.0 ) return abs(p-l.t);\n\treturn distancelp(l,p);\n}\n//segment segment \ndouble distancess(line l1,line l2){\n\tif(intersect(l1,l2) ) return 0.0;\n\treturn min( min(distancesp(l1,l2.s) ,distancesp(l1,l2.t) ) , min(distancesp(l2,l1.s),distancesp(l2,l1.t)  ) );\n}\n\nbool intersectsc(line l,circle c){ return distancesp(l,c.c) <= c.r ; }\n\n//crosspoint \n//segment segment\npoint crosspointss(line l1,line l2){\n\tfor(int k=0;k<2;k++){\n\t\tif(distancesp(l1,l2.s) < EPS ) return l2.s;\n\t\tif(distancesp(l1,l2.t) < EPS ) return l2.t;\n\t\tswap(l1,l2);\n\t}\n\tpoint base = l2.t-l2.s;\n\tdouble d1 = abs(cross(base,l1.s-l2.s) );\n\tdouble d2 = abs(cross(base,l1.t-l2.s) );\n\tdouble t = d1/(d1+d2);\n\treturn l1.s + (l1.t-l1.s) * t;\n}\n//line line\npoint crosspointll(line l1,line l2){\n\tdouble a = cross(l1.t-l1.s,l2.t-l2.s);\n\tdouble b = cross(l1.t-l1.s,l1.t-l2.s);\n\tif(abs(a) < EPS && abs(b) < EPS ) return l2.s;\n\treturn l2.s + (l2.t-l2.s) * (b/a) ;\n}\n//circle line\npolygon crosspointCL(circle c,line l){\n\tpolygon ps;\n\tpoint pr = project(l,c.c);\n\tpoint e = (l.t - l.s) / abs(l.t-l.s) ;\n\tif(distancelp(l,c.c) > c.r ) return ps;//付け足した\n\tif(equals(distancelp(l,c.c),c.r) ){\n\t\tps.emplace_back(pr);\n\t}\n\tdouble base = sqrt(c.r*c.r - norm(pr-c.c) );\n\tps.emplace_back(pr + e*base ) ;\n\tps.emplace_back(pr - e*base ) ;\n\treturn ps;\n}\n//circle segment\npolygon crosspointCS(circle c,line l ){\n\tpolygon res = crosspointCL(c,l);\n\tif(intersectcs(c,l) == 2 ) return res;\n\tif(res.size() > 1u ){//一つのみ削る\n\t\tif(dot(l.s-res[0] ,l.t-res[0] ) > 0) swap(res[0],res[1] );\n\t\tres.pop_back();\n\t}\n\treturn res;\n}\npolygon crosspointcc(circle c1,circle c2){\n\tpolygon p(2);\n\tdouble d = abs(c1.c-c2.c);\n\tdouble a = acos( (c1.r *c1.r + d*d -c2.r*c2.r) /(2*c1.r*d ) );\n\tdouble t = arg(c2.c-c1.c);\n\tp[0] = c1.c + polar(c1.r,t+a);\n\tp[1] = c1.c + polar(c1.r,t-a);\n\treturn p;\n}\n\nint contains(polygon g,point p) { //IN:2 ON:1 OUT:0\n    int n = g.size();\n    bool f = false;\n    for(int i=0;i<n;i++){\n\tpoint a = g[i] - p,b = g[(i+1)%n] - p;\n\tif( fabs(cross(a,b) ) < EPS && dot(a,b) < EPS) return 1;\n\tif( a.y > b.y ) swap(a,b);\n\tif( a.y < EPS && EPS < b.y && cross(a,b) > EPS ) f = !f;\n    }\n    return (f?2:0) ;\n}\n\npolygon andrewscan(polygon &s){ //convex hull\n\tpolygon u,l;\n\tif(s.size() < 3) return s;\n\tsort(s.begin(),s.end() );\n\tu.push_back(s[0]);\n\tu.push_back(s[1]);\n\tl.push_back(s[s.size()-1]);\n\tl.push_back(s[s.size()-2]);\n\tfor(int i=2;i<s.size();i++){\n\t\tfor(int n = u.size();n>=2&&ccw(u[n-2],u[n-1],s[i]) != CCW_CLOCKWISE;n--)//凸包の辺上を含めない\n\t\t//for(int n = u.size();n>=2&&ccw(u[n-2],u[n-1],s[i]) == CCW_COUNTER_CLOCKWISE;n--)//凸包の辺上を含める場合\n\t\tu.pop_back();\n\t\tu.push_back(s[i]);\n\t}\n\tfor(int i=s.size()-3;i>=0;i--){\n\t\tfor(int n=l.size();n>=2&&ccw(l[n-2],l[n-1],s[i]) != CCW_CLOCKWISE;n--)//凸包の辺上を含めない\n\t\t\n\t\t//for(int n=l.size();n>=2&&ccw(l[n-2],l[n-1],s[i]) == CCW_COUNTER_CLOCKWISE;n--)//凸包の辺上を含める場合\n\t\tl.pop_back();\n\t\tl.push_back(s[i]);\n\t}\n\treverse(l.begin(),l.end());\n\tfor(int i=u.size()-2;i>=1;i--)l.push_back(u[i]);\n\treturn l;\n}\ndouble diameter(polygon &s){\n\tpolygon p = s;\n\tint n = p.size();\n\tif(n==2) return abs(p[0]-p[1]);\n\tint i=0,j=0;\n\tfor(int k=0;k<n;k++){\n\t\tif(p[i] < p[k]) i = k;\n\t\tif(!(p[j]<p[k]) ) j = k;\n\t}\n\tdouble res = 0;\n\tint si = i,sj = j;\n\twhile( i != sj || j != si ){\n\t\tres = max(res,abs(p[i]-p[j]) );\n\t\tif(cross(p[(i+1)%n]-p[i],p[(j+1)%n]-p[j] ) < 0.0) i = (i+1)%n;\n\t\telse j = (j+1)%n;\n\t}\n\treturn res;\n}\nbool isconvex(polygon p){\n\tbool f = 1;\n\tint n = p.size();\n\tfor(int i=0;i<n;i++){\n\t\tint t = ccw(p[(i+n-1)%n],p[i],p[(i+1)%n] );\n\t\tf&= t!=CCW_CLOCKWISE;\n\t}\n\treturn f;\n}\ndouble area(polygon p){\n\tdouble res =  0.0;\n\tfor(int i=0;i<p.size();i++) res += cross(p[i],p[ (i+1)%p.size() ]);\n\treturn res/2.0;\n}\ndouble area(circle c1,circle c2){\n\tdouble d = abs(c1.c-c2.c);\n\tif(c1.r + c2.r <= d + EPS ) return 0.0;\n\tif(d<=abs(c1.r-c2.r) ){\n\t\tdouble r = min(c1.r,c2.r);\n\t\treturn PI*r*r;\n\t}\n\tdouble rc = (d*d + c1.r*c1.r -c2.r*c2.r)/(2*d);\n\tdouble th = acos(rc/c1.r);\n\tdouble ph = acos( (d-rc)/c2.r);\n\treturn c1.r*c1.r*th + c2.r*c2.r*ph - d * c1.r * sin(th) ;\n}\n\npolygon convex_cut(polygon p,line l){\n\tpolygon q;\n\tint n = p.size();\n\tfor(int i=0;i<n;i++){\n\t\tpoint a = p[i] , b = p[(i+1)%n];\n\t\tif(ccw(l.s,l.t,a) != -1 ) q.push_back(a);\n\t\tif(ccw(l.s,l.t,a) * ccw(l.s,l.t,b) < 0) q.push_back(crosspointss(line(a,b),l) );\n\t}\n\treturn q;\n}\n\nint main(){\n    \tint q;\n\tcin>>q;\n\tfor(int i=0;i<q;i++){\n\t\tline l1,l2;\n\t\tl1.input();\n\t\tl2.input();\n\t\tprintf(\"%0.10lf\\n\",distancess(l1,l2) );\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<cstdlib>\n#define eps 1e-14\n#define double long double\nusing namespace std;\nstruct point{\n\tdouble x,y;\n\tvoid read(){scanf(\"%Lf%Lf\",&x,&y);}\n\tvoid write(){printf(\"%.10Lf %.10Lf\\n\",x,y);}\n\tpoint(double X=0.0,double Y=0.0):x(X),y(Y){}\n\tpoint operator +(const point a)const{return point(x+a.x,y+a.y);}\n\tpoint operator -(const point a)const{return point(x-a.x,y-a.y);}\n\tpoint operator *(double a)const{return point(x*a,y*a);}\n\tpoint operator /(double a)const{return point(x/a,y/a);}\n\tbool operator ==(const point a)const{return abs(x-a.x)<=eps && abs(y-a.y)<=eps;}\n};\ndouble dis(point a,point b=point(0,0)){return sqrt((a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y));}\ndouble dot(point a,point b){return a.x*b.x+a.y*b.y;}\ndouble cross(point a,point b){return a.x*b.y-a.y*b.x;}\ndouble cross3(point o,point a,point b){return cross(a-o,b-o);}\nbool jiao(point a,point b,point c,point d)\n{\n\tif(min(a.x,b.x)>max(c.x,d.x) || min(a.y,b.y)>max(c.y,d.y)) return false;\n\tif(min(c.x,d.x)>max(a.x,b.x) || min(c.y,d.y)>max(a.y,b.y)) return false;\n\tif(cross3(a,b,c)*cross3(a,b,d)>0) return false;\n\tif(cross3(c,d,a)*cross3(c,d,b)>0) return false;\n\treturn true;\n}\nshort int on_line(point o,point a,point b)//oa->ob 0:D 1:U 2:O\n{\n\tif(dot(a-o,b-o)<-eps) return 0;\n\treturn 1+(dis(a-o)>=dis(b-o));\n}\nvoid make_rand(double &x){x=x+(1ll*rand()%10+1)/10.0*eps;}\nstruct Line{\n\tpoint a,b;\n\tvoid read(){a.read();b.read();}\n\tbool operator &&(const Line u){return jiao(a,b,u.a,u.b);}\n\tpoint operator &(const Line u)\n\t{\n\t\tif(a==u.a || a==u.b) return a;\n\t\tif(b==u.a || b==u.b) return b;\n\t\tdouble x1=a.x,x2=b.x,x3=u.a.x,x4=u.b.x;\n\t\tdouble y1=a.y,y2=b.y,y3=u.a.y,y4=u.b.y;\n\t\tif(x3==x4) return point(x3,(y2-y1)*x3/(x2-x1)+(y1*x2-x1*y2)/(x2-x1));\n\t\tif(x1==x2) return point(x1,(y4-y3)*x1/(x4-x3)+(y3*x4-x3*y4)/(x4-x3));\n\t\tmake_rand(x2);\n\t\tdouble x=((y3*x4-y4*x3)*(x2-x1)-(y1*x2-y2*x1)*(x4-x3))/((y2-y1)*(x4-x3)-(y4-y3)*(x2-x1));\n\t\tdouble y=(y2-y1)*x/(x2-x1)+(y1*x2-x1*y2)/(x2-x1);\n\t\treturn point(x,y);\n\t}\n};\npoint project(Line a,point p)\n{\n\tpoint &p1=a.a,&p2=a.b;\n\tdouble len=dot(p2-p1,p-p1)/dis(p2-p1);\n\treturn p1+(p2-p1)/dis(p2-p1)*len;\n}\ndouble dis(Line a,Line b)\n{\n\tif(a && b) return 0;\n\tdouble ans=min(min(dis(a.a,b.a),dis(a.a,b.b)),min(dis(a.b,b.a),dis(a.b,b.b)));\n\tpoint res=project(a,b.a);\n\tif(on_line(a.a,a.b,res)==2) ans=min(ans,dis(res,b.a));\n\tres=project(a,b.b);\n\tif(on_line(a.a,a.b,res)==2) ans=min(ans,dis(res,b.b));\n\tres=project(b,a.a);\n\tif(on_line(b.a,b.b,res)==2) ans=min(ans,dis(res,a.a));\n\tres=project(b,a.b);\n\tif(on_line(b.a,b.b,res)==2) ans=min(ans,dis(res,a.b));\n\treturn ans;\n}\nint main()\n{\n\tint n;\n\tscanf(\"%d\",&n);\n\t\n\tsrand(n);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tLine a,b;\n\t\ta.read();b.read();\n\t\tprintf(\"%.10Lf\\n\",dis(a,b));\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<vector>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0; \n\nclass Point{\n\tpublic:\n\t\tdouble x, y;\n\n\t\tPoint(double x = 0, double y = 0): x(x), y(y) {}\n\n\t\tPoint operator + (Point p){ return Point(x + p.x, y + p.y);}\n\t\tPoint operator - (Point p){ return Point(x - p.x, y - p.y);}\n\t\tPoint operator * (double a){ return Point(a * x, a * y);}\n\t\tPoint operator / (double a){ return Point(x / a, y / a);}\n\n\t\tdouble abs(){ return sqrt(norm());}\n\t\tdouble norm(){ return x * x + y * y;}\n\n\t\tbool operator < (const Point &p) const{\n\t\t\treturn x != p.x ? x < p.x : y < p.y;\n\t\t}\n\n\t\tbool operator == (const Point &p) const{\n\t\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t\t}\n};\n\nstruct Segment {\n\tPoint p1, p2;\n};\ntypedef Segment Line;\n\nclass Circle{\n\tpublic:\n\t\tPoint c;\n\t\tdouble r;\n\t\tCircle(Point c = Point(), double r = 0.0): c(c), r(r) {}\n};\n\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\ndouble dot(Vector a, Vector b){\n\treturn a.x * b.x + a.y * b.y;\n}\ndouble cross(Vector a, Vector b){\n\treturn a.x * b.y - a.y * b.x;\n}\n\nint ccw(Point p0, Point p1, Point p2){\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif(cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif(cross(a, b) < -EPS) return CLOCKWISE;\n\tif(dot(a, b) < EPS) return ONLINE_BACK;\n\tif(a.norm() < b.norm()) return ONLINE_FRONT;\n\n\treturn ON_SEGMENT;\n}\n\nbool intersect(Point p1, Point p2, Point p3, Point p4){\n\treturn (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n\t\t\tccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\nbool intersect(Segment s1, Segment s2){\n\treturn intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\ndouble getDistance(Point a, Point b){\n\treturn (a - b).abs();\n}\ndouble getDistanceLP(Line l, Point p){\n\treturn abs(cross(l.p2 - l.p1, p - l.p1) / (l.p2 - l.p1).abs());\n}\ndouble getDistanceSP(Segment s, Point p){\n\tif(dot(s.p2 - s.p1, p - s.p1) < 0.0) return (p - s.p1).abs();\n\tif(dot(s.p1 - s.p2, p - s.p2) < 0.0) return (p - s.p2).abs();\n\treturn getDistanceLP(s, p);\n}\ndouble getDistance(Segment s1, Segment s2){\n\tif(intersect(s1, s2)) return 0.0;\n\treturn min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n\t\t\tmin(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\nint main(void){\n\tint q;\n\tSegment s1, s2;\n\tcin >> q;\n\tfor(int i = 1; i <= q; i++){\n\t\tcin >> s1.p1.x >> s1.p1.y >> s1.p2.x >> s1.p2.y >> s2.p1.x >> s2.p1.y >> s2.p2.x >> s2.p2.y;\n\t\tdouble ans = getDistance(s1, s2);\n\t\tprintf(\"%.8lf\\n\", ans);\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <fstream>\n#include <string>\n#include <iomanip>\n#include <math.h>\n#include <stdbool.h>\n#include <algorithm>\nusing namespace std;\n\nclass Point {\n    public:\n    double x, y;\n\n    Point(double x = 0, double y = 0): x(x), y(y) {}\n\n    Point operator + (Point p) { return Point(x+p.x, y+p.y); }\n    Point operator - (Point p) { return Point(x-p.x, y-p.y); }\n    Point operator * (double a) { return Point(a*x, a*y); }\n    Point operator / (double a) { return Point(x/a, y/a); }\n\n    double abs() {return sqrt(norm()); }\n    double norm() {return x*x + y*y; }\n};\n\ntypedef Point Vector;\n\n\ndouble dot(Vector a, Vector b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n    return a.x*b.y - a.y*b.x;\n}\n\nPoint projection(Point p1, Point p2, Point p) {\n    Vector v = p2 - p1;\n    Vector u = p - p1;\n    Point t = p1 + v*dot(u,v)/v.norm();\n    return t;\n}\n\n//2つのベクトルが平行かどうか\nbool isParallel(Vector u, Vector v){\n    double Cross = cross(u,v);\n    bool out = (Cross==0)? true : false;\n    return out;\n}\n\n//ポイントp2が線分p0p1上にいるかどうか\nbool isOn(Point p0, Point p1, Point p2){\n    Vector v01 = p1 - p0;\n    Vector v02 = p2 - p0;\n    Vector v10 = p0 - p1;\n    Vector v12 = p2 - p1;\n\n    return cross(v01,v02)==0 && dot(v01,v02)>=0 && dot(v10,v12)>=0;\n}\n\n//ポイントp2がベクトルp1-p0からみて反時計回りにいるかどうか\n//CCW: 1, CW: -1, ON:0\nint isCCW(Point p0, Point p1, Point p2){\n    Vector v01 = p1 - p0;\n    Vector v02 = p2 - p0;\n\n    double Cross = cross(v01, v02);\n    \n    int out = 2;\n    if (Cross>0){out = 1;}\n    else if(Cross<0){out = -1;}\n    else{out = 0;}\n\n    return out;\n}\n\nbool isIntersect(Point p0, Point p1, Point p2, Point p3){\n    Vector s1 = p1-p0;\n    Vector s2 = p3-p2;\n    bool out;\n    //平行な場合\n    if(isParallel(s1,s2))\n    {\n        out = isOn(p0,p1,p2) || isOn(p0,p1,p3) || isOn(p2,p3,p0) || isOn(p2,p3,p1);\n    }\n    //平行でない場合\n    else     \n    {\n        out = ( ( isCCW(p0,p1,p2)*isCCW(p0,p1,p3) ) <= 0 ) && ( ( isCCW(p2,p3,p0)*isCCW(p2,p3,p1) ) <= 0 );\n    }\n    return out;\n}\n\n\ndouble ppd(Point p0, Point p1, Point p);\ndouble dist(Point p0, Point p1, Point p);\n\nint main(){\n    #if 0\n    std::ifstream in(\"input.txt\");\n    std::cin.rdbuf(in.rdbuf());\n    #endif\n\n    int q;\n    cin >> q;\n\n    for(int i=0; i<q; i++){\n        Point p0, p1, p2, p3;\n        cin >> p0.x >> p0.y >> p1.x >> p1.y >> p2.x >> p2.y >> p3.x >> p3.y;\n\n        double min = 0; \n\n        //交差する場合\n        if(isIntersect(p0, p1, p2, p3))\n        {\n            min = 0;\n        }\n        //交差しない場合\n        else\n        {\n            double d0 = dist(p2, p3, p0);\n            double d1 = dist(p2, p3, p1);\n            double d2 = dist(p0, p1, p2);\n            double d3 = dist(p0, p1, p3);\n            double candidate[4] = {d0, d1, d2, d3};\n            min = *std::min_element(candidate, candidate + 4);\n        }\n        cout << setprecision(14) << min <<\"\\n\";\n    }\n    \n    return 0;\n}\n\n//pから直線p0p1に下ろした垂線の長さ\ndouble ppd(Point p0, Point p1, Point p){\n    Vector v = p1 - p0;\n    Vector u = p - p0;\n\n    return fabs(cross(v,u))/v.abs();\n}\n\n//pと線分p0p1の距離\ndouble dist(Point p0, Point p1, Point p){\n    if ( dot(p1-p0, p-p0) < 0 ) { return (p-p0).abs(); }\n    else if ( dot(p0-p1, p-p1) < 0 ){ return (p-p1).abs(); }\n    else { return ppd(p0, p1, p); }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#pragma region Geometry\nconst double EPS=1e-8,PI=acos(-1);\ninline bool EQ(double a,double b){return fabs(b-a)<EPS;}\n\nstatic const int COUNTER_CLOCKWISE=1;\nstatic const int CLOCKWISE=-1;\nstatic const int ONLINE_BACK=2;\nstatic const int ONLINE_FRONT=-2;\nstatic const int ON_SEGMENT=0;\n\nstruct Point{\n    double x,y;\n    Point(){}\n    Point(double x,double y):x(x),y(y){}\n    Point operator+(Point p) const {return Point{x+p.x,y+p.y};}\n    Point operator-(Point p) const {return Point{x-p.x,y-p.y};}\n    Point operator*(double t) const {return Point{x*t,y*t};}\n    Point operator*(Point p) const {return Point{x*p.x-y*p.y,x*p.y+y*p.x};}\n    Point operator/(double t) const {return Point{x/t,y/t};}\n    bool operator<(const Point &p) const {\n        return x!=p.x?x<p.x:y<p.y;\n    }\n    bool operator==(const Point &p) const {\n        return fabs(x-p.x)<EPS&&fabs(y-p.y)<EPS;\n    }\n    friend istream &operator>>(istream &is,Point &p){\n        is >> p.x >> p.y;\n        return is;\n    }\n    friend ostream &operator<<(ostream &os,Point p){\n        os << fixed << setprecision(10) << p.x << ' ' << p.y;\n        return os;\n    }\n};\n\nstruct Line{\n    Point a,b;\n    Line(){}\n    Line(Point a,Point b):a(a),b(b){}\n    friend istream &operator>>(istream &is,Line &l){\n        is >> l.a >> l.b;\n        return is;\n    }\n    friend ostream &operator<<(ostream &os,Line l){\n        os << l.a << \" to \" << l.b;\n        return os;\n    }\n};\n\nstruct Segment:Line{\n    Segment(){}\n    Segment(Point a,Point b):Line(a,b){}\n};\n\nstruct Circle{\n    Point c;\n    double r;\n    Circle(){}\n    Circle(Point c,double r):c(c),r(r){}\n    friend istream &operator>> (istream &is,Circle &c){\n        is >> c.c >> c.r;\n        return is;\n    }\n    friend ostream &operator<<(ostream &os,Circle &c){\n        os << c.c << ' ' << c.r;\n        return os;\n    }\n};\n\ntypedef vector<Point> Polygon;\nistream &operator>>(istream &is,Polygon &p){\n    for (int i=0;i<p.size();++i) is >> p[i];\n    return is;\n}\n\ndouble dot(const Point &a,const Point &b){\n    return a.x*b.x+a.y*b.y;\n}\ndouble cross(const Point &a,const Point &b){\n    return a.x*b.y-a.y*b.x;\n}\ndouble norm(const Point &a){\n    return a.x*a.x+a.y*a.y;\n}\ndouble abs(const Point &a){\n    return sqrt(norm(a));\n}\n\n// https://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/1/CGL_1_A\nPoint proj(const Line &l,const Point &p){\n    double t=dot(p-l.a,l.b-l.a)/norm(l.b-l.a);\n    return l.a+(l.b-l.a)*t;\n}\n// https://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/1/CGL_1_B\nPoint refl(const Line &l,const Point &p){\n    return p+(proj(l,p)-p)*2.0;\n}\n\nPoint rotate(const Point &p,double theta){\n    return Point(cos(theta)*p.x-sin(theta)*p.y,sin(theta)*p.x+cos(theta)*p.y);\n}\ndouble arg(const Point &p){\n    return atan2(p.y,p.x);\n}\ndouble get_angle(const Point &a,const Point &b,const Point &c){\n    const Point v=b-a,w=c-b;\n    double alpha=arg(v),beta=arg(w);\n    if (alpha>beta) swap(alpha,beta);\n    double theta=beta-alpha;\n    return min(theta,2*PI-theta);\n}\n\n// https://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/1/CGL_1_C\nint ccw(const Point &a,Point b,Point c){\n    b=b-a,c=c-a;\n    if (cross(b,c)>EPS) return COUNTER_CLOCKWISE;\n    if (cross(b,c)<-EPS) return CLOCKWISE;\n    if (dot(b,c)<-EPS) return ONLINE_BACK;\n    if (norm(b)<norm(c)) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\n// https://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/2/CGL_2_A\nbool orthogonal(const Point &a,const Point &b){\n    return EQ(dot(a,b),0.0);\n}\nbool orthogonal(const Point &a,const Point &b,const Point &c,const Point &d){\n    return orthogonal(b-a,d-c);\n}\nbool orthogonal(const Line &l,const Line &m){\n    return EQ(dot(l.b-l.a,m.b-m.a),0.0);\n}\n// https://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/2/CGL_2_A\nbool parallel(const Point &a,const Point &b){\n    return EQ(cross(a,b),0.0);\n}\nbool parallel(const Point &a,const Point &b,const Point &c,const Point &d){\n    return parallel(b-a,d-c);\n}\nbool parallel(const Line &l,const Line &m){\n    return EQ(cross(l.b-l.a,m.b-m.a),0.0);\n}\n\nbool intersect(const Line &l,const Point &p){\n    return abs(ccw(l.a,l.b,p))!=1;\n}\nbool intersect(const Line &l,const Line &m){\n    return abs(cross(l.b-l.a,m.b-m.a)>EPS||abs(cross(l.b-l.a,m.b-m.a))<EPS);\n}\nbool intersect(const Line &l,const Segment &s){\n    return cross(l.b-l.a,s.a-l.a)*cross(l.b-l.a,s.b-l.a)<EPS;\n}\nbool intersect(const Segment &s,const Point &p){\n    return ccw(s.a,s.b,p)==0;\n}\n// https://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/2/CGL_2_B\nbool intersect(const Segment &s,const Segment &t){\n    return ccw(s.a,s.b,t.a)*ccw(s.a,s.b,t.b)<=0&&ccw(t.a,t.b,s.a)*ccw(t.a,t.b,s.b)<=0;\n}\nbool intersect(const Circle &c,const Line &l){\n    return (norm(proj(l,c.c)-c.c)-c.r*c.r)<=EPS;\n}\nint intersect(const Circle &c,const Segment &s){\n    if (norm(proj(s,c.c)-c.c)-c.r*c.r>EPS) return 0;\n    double d1=abs(c.c-s.a),d2=abs(c.c-s.b);\n    if (d1<c.r+EPS&&d2<c.r+EPS) return 0;\n    if (d1<c.r-EPS&&d2>c.r+EPS||d1>c.r+EPS&&d2<c.r-EPS) return 1;\n    const Point h=proj(s,c.c);\n    if (dot(s.a-h,s.b-h)<0) return 2;\n    return 0;\n}\nint intersect(Circle c,Circle d){\n    if (c.r<d.r) swap(c,d);\n    double dist=abs(c.c-d.c);\n    if (c.r+d.r<dist) return 4;\n    if (EQ(c.r+d.r,dist)) return 3;\n    if (c.r-d.r<dist) return 2;\n    if (EQ(c.r-d.r,dist)) return 1;\n    return 0;\n}\n\ndouble distance(const Point &a,const Point &b){\n    return abs(b-a);\n}\ndouble distance(const Line &l,const Point &p){\n    return abs(p-proj(l,p));\n}\ndouble distance(const Line &l,const Line &m){\n    return intersect(l,m)?0:distance(l,m.a);\n}\ndouble distance(const Segment &s,const Point &p){\n    Point h=proj(s,p);\n    return intersect(s,h)?abs(h-p):min(abs(s.a-p),abs(s.b-p));\n}\ndouble distance(const Segment &s,const Segment &t){\n    if (intersect(s,t)) return 0;\n    return min({distance(s,t.a),distance(s,t.b),distance(t,s.a),distance(t,s.b)});\n}\ndouble distance(const Line &l,const Segment &s){\n    return intersect(l,s)?0:min(distance(l,s.a),distance(l,s.b));\n}\n\nPoint crosspoint(const Line &l,const Line &m){\n    double d1=cross(l.b-l.a,m.b-m.a),d2=cross(l.b-l.a,l.b-m.a);\n    if (EQ(abs(d1),0.0)&&EQ(abs(d2),0.0)) return m.a;\n    return m.a+(m.b-m.a)*d2/d1;\n}\n// https://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/2/CGL_2_C\nPoint crosspoint(const Segment &s,const Segment &t){\n    assert(intersect(s,t));\n    return crosspoint(Line(s),Line(t));\n}\nvector<Point> crosspoint(const Circle &c,const Line &l){\n    Point pr=proj(l,c.c);\n    Point e=(l.b-l.a)/abs(l.b-l.a);\n    if (EQ(distance(l,c.c),c.r)) return {pr};\n    double base=sqrt(c.r*c.r-norm(pr-c.c));\n    return {pr-e*base,pr+e*base};\n}\nvector<Point> crosspoint(const Circle &c,const Segment &s){\n    Line l=Line(s);\n    assert(intersect(c,l));\n    auto res=crosspoint(c,l);\n    if (intersect(c,l)==2) return res;\n    if (dot(l.a-res[0],l.b-res[0])<0) res.emplace_back(res[0]);\n    else res.pop_back();\n    return res;\n}\nvector<Point> crosspoint(const Circle &c,const Circle &d){\n    double dist=abs(c.c-d.c);\n    double a=acos((c.r*c.r+dist*dist-d.r*d.r)/(2*c.r*dist));\n    double t=arg(d.c-c.c);\n    Point p1=c.c+Point(cos(t+a),sin(t+a))*c.r,p2=c.c+Point(cos(t-a),sin(t-a))*c.r;\n    return {p1,p2};\n}\n\nCircle circumcenter(Point a,Point b,const Point &c){\n    a=(a-c)*0.5;\n    b=(b-c)*0.5;\n    Point center=c+crosspoint(Line(a,a*Point{1,1}),Line{b,b*Point{1,1}});\n    return Circle{center,abs(a-center)};\n}\nvector<Point> center_given_radius(const Point &a,const Point &b,const double &r){\n    Point m=(b-a)*0.5;\n    double d1=abs(m);\n    vector<Point> res;\n    if (EQ(d1,0.0)||d1>r) return res;\n    double d2=sqrt(r*r-d1*d1);\n    Point n=m*Point{0.0,1.0}*d2/d1;\n    res.emplace_back(a+m+n);\n    if (d2>EPS) res.emplace_back(a+m-n);\n    return res;\n}\n\nbool convex(const Polygon &p){\n    int n=p.size();\n    for (int i=0;i<n;++i){\n        if (ccw(p[(i+n-1)%n],p[i],p[(i+1)%n])==-1){\n            return false;\n        }\n    }\n    return true;\n}\n\nPolygon convex_hull(Polygon p){\n    int n=p.size(),k=0;\n    if (n<=2) return p;\n    sort(p.begin(),p.end());\n    Polygon ch(2*n);\n    for (int i=0;i<n;ch[k++]=p[i++]){\n        while(k>=2&&cross(ch[k-1]-ch[k-2],p[i]-ch[k-1])<EPS) --k;\n    }\n    for (int i=n-2,t=k+1;i>=0;ch[k++]=p[i--]){\n        while(k>=t&&cross(ch[k-1]-ch[k-2],p[i]-ch[k-1])<EPS) --k;\n    }\n    ch.resize(k-1);\n    return ch;\n}\n\n#pragma endregion\n\nint main(){\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    cout << fixed << setprecision(10);\n    int q; cin >> q;\n    for (;q--;){\n        Point p0,p1,p2,p3; cin >> p0 >> p1 >> p2 >> p3;\n        Segment s1(p0,p1),s2(p2,p3);\n        cout << distance(s1,s2) << '\\n';\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <cmath>\n\n\nusing namespace std;\n\n#define FOR(i,a,b) for (int i=(a);i<(b);i++)\n#define FORR(i,a,b) for (int i=(a);i>=(b);i--)\n\ntypedef long long ll;\nconst int INF = 1e9;\nconst int MOD = 1e9+7;\nconst double EPS = 1e-9;\n\n\nstruct Vector {\n    double x, y;\n    Vector() {}\n    Vector(double x, double y): x(x), y(y) {}\n};\n\nbool equal(double x, double y) {\n    return abs(y - x) < EPS;\n}\n\ndouble cross(double x1, double y1, double x2, double y2) {\n    return x1 * y2 - x2 * y1;\n}\ndouble cross(Vector& a, Vector& b) {\n    return a.x * b.y - b.x * a.y;\n}\n\ndouble dot(double x1, double y1, double x2, double y2) {\n    return x1 * x2 + y1 * y2;\n}\ndouble dot(Vector& a, Vector& b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble dist(double x1, double y1, double x2, double y2) {\n    return sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n}\ndouble dist(Vector& a, Vector& b) {\n    return sqrt((b.x - a.x) * (b.x - a.x) + (b.y - a.y) * (b.y - a.y));\n}\ndouble dist2(Vector& a, Vector& b) {\n    return (b.x - a.x) * (b.x - a.x) + (b.y - a.y) * (b.y - a.y);\n}\n\n\ndouble distance_between_segment_and_point(Vector& p1, Vector& p2, Vector& q) {\n    Vector pp, pq;\n    pp.x = p2.x - p1.x; pp.y = p2.y - p1.y;\n    pq.x = q.x - p1.x; pq.y = q.y - p1.y;\n    double dotpq = dot(pp, pq);\n    double lenp = dist(p1, p2);\n    double lenpq = dist(p1, q);\n    if (dotpq <= 0.0) {\n        return lenpq;\n    }\n    else if (dotpq < dot(pp, pp)) {\n        double dpr = dotpq / lenp;\n        return sqrt(lenpq * lenpq - dpr * dpr);\n    }\n    return dist(p2, q);\n}\n\ndouble distance_between_2_line_segments(Vector& p1, Vector& p2, Vector& q1, Vector& q2) {\n    double lenp, lenq;\n    lenp = dist(p1, p2);\n    lenq = dist(q1, q2);\n\n    // some segments have 0 length\n    if (equal(lenp, 0) && equal(lenq, 0)) {\n        return dist(p1, q1);\n    }\n    else if (equal(lenp, 0)) {\n        return distance_between_segment_and_point(q1, q2, p1);\n    }\n    else if (equal(lenq, 0)) {\n        return distance_between_segment_and_point(p1, p2, q1);\n    }\n\n    // if two segments is crossing..\n    Vector pp(p2.x - p1.x, p2.y - p1.y), qq(q2.x - q1.x, q2.y - q1.y);\n    double crossq, crossp;\n    crossq = cross(pp.x, pp.y, q1.x - p1.x, q1.y - p1.y) * cross(pp.x, pp.y, q2.x - p1.x, q2.y - p1.y);\n    crossp = cross(qq.x, qq.y, p1.x - q1.x, p1.y - q1.y) * cross(qq.x, qq.y, p2.x - q1.x, p2.y - q1.y);\n    if (crossq < 0 && crossp < 0) {\n        return 0.0;\n    }\n\n    double d1, d2, d3, d4;\n    d1 = distance_between_segment_and_point(p1, p2, q1);\n    d2 = distance_between_segment_and_point(p1, p2, q2);\n    d3 = distance_between_segment_and_point(q1, q2, p1);\n    d4 = distance_between_segment_and_point(q1, q2, p2);\n\n    return min(min(d1, d2), min(d3, d4));\n}\n\n\nint main() {\n    int N;\n    Vector p1, p2, q1, q2;\n    cin >> N;\n    cout << fixed << setprecision(10);\n\n    for (int i = 0; i < N; i++) {\n        cin >> p1.x >> p1.y >> p2.x >> p2.y >> q1.x >> q1.y >> q2.x >> q2.y;\n        cout << distance_between_2_line_segments(p1, p2, q1, q2) << endl;\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define SIZE 300005\n#define MOD 1000000007LL\n#define INF 1 << 29\n#define LLINF 1LL << 60\n#define REP(i,n) for(int i=0;i<n;i++)\n#define FOR(i,a,b) for(int i=a;i<=b;i++)\n#define DOWN(i,b,a) for(int i=b;i>=a;i--)\n#define SET(a,c) memset(a,c,sizeof a)\n#define BIT(i,j) ((i)>>(j))&1\n#define ALL(o) (o).begin(), (o).end()\n#define ERASE(o) (o).erase(unique((o).begin(),(o).end()), (o).end())\n#define SQ(x) ((x)*(x))\nusing namespace std;\ntypedef long long ll;\ntypedef pair<ll,ll> Pll;\ntypedef pair<int, int> Pii;\ntypedef pair<double, double> Pdd;\ntypedef complex<double> dcomplex;\ntemplate<typename T> inline void priv(vector<T>a){REP(i,a.size()){cerr<<a[i]<<((i==a.size()-1)?\"\\n\":\" \");}}\nll gcd(ll a,ll b){int c=max(a,b);int d=min(a,b);return c==0||d==0?c:gcd(c%d,d);}\nll lcm(ll a,ll b){return a==0||b==0?0:a*b/gcd(a,b);}\nll fact(ll a){ll b=1;FOR(i,1,a)b*=i;return b;}\n\nclass P\n{\npublic:\n  double x,y;\n  P(){};P(double x,double y):x(x),y(y){};\n  P operator+(const P&q){P t;t.x=x+q.x;t.y=y+q.y;return t;}\n  P operator+=(const P&q){x+=q.x;y+=q.y;return *this;}\n  P operator-(const P&q){P t;t.x=x-q.x;t.y=y-q.y;return t;}\n  P operator-=(const P&q){x-=q.x;y-=q.y;return *this;}\n  template<typename T> P operator*(T d){return P(x*d,y*d);}\n  template<typename T> P operator*=(T d){x*=d;y*=d;return *this;}\n  template<typename T> P operator/(T d){return P(x/d,y/d);}\n  template<typename T> P operator/=(T d){x/=d;y/=d;return *this;}\n  bool operator<(const P&q){return (x!=q.x)?(x<q.x):(y<q.y);}\n  bool operator>(const P&q){return (x!=q.x)?(x>q.x):(y>q.y);}\n  double norm(void){return sqrt(x*x+y*y);}\n  double arg(void){return acos(x/this->norm())*P(1,0).sign(*this);}\n  P rotate(double t){double c=cos(t),s=sin(t);return P(c*x-s*y,s*x+c*y);}\n  P nvec(void){return P(y,-x);}\n  P reverseX(void){return P(-x,y);}\n  P reverseY(void){return P(x,-y);}\n  P unit(void){return (*this).norm()==0?P(0,0):(*this)/(*this).norm();}\n  P floor(void){return P((int)x,(int)y);}\n  double dot(const P&q){return x*q.x+y*q.y;}\n  double det(const P&q){return x*q.y-y*q.x;}\n  int sign(const P&q){double d = (*this).det(q); return (d>0)-(d<0);}\n  static bool on_seg(P p1,P p2,P q){return (p1-q).det(p2-q)==0&&(p1-q).dot(p2-q)<=0;}\n  static P intersection(P p1,P p2,P q1,P q2){return p1+(p2-p1)*((q2-q1).det(q1-p1)/(q2-q1).det(p2-p1));}\n  static bool crossing(P p1,P p2,P q1,P q2)\n  {\n    if((p2-p1).sign(q2-q1)==0) return on_seg(p1,p2,q1)||on_seg(p1,p2,q2)||on_seg(q1,q2,p1)||on_seg(q1,q2,p2);\n    double x=(q2-q1).det(q1-p1)/(q2-q1).det(p2-p1);\n    double y=(p2-p1).det(p1-q1)/(p2-p1).det(q2-q1);\n    return x<=1 && x>=0 && y<=1 && y>=0;\n  }\n};\n\nint main()\n{\n  int q; cin >> q;\n  REP(i,q)\n  {\n    double ans,x0,y0,x1,y1,x2,y2,x3,y3;\n    cin>>x0>>y0>>x1>>y1>>x2>>y2>>x3>>y3;\n    P p0 = P(x0,y0);\n    P p1 = P(x1,y1);\n    P p2 = P(x2,y2);\n    P p3 = P(x3,y3);\n    P nu = (p1-p0).nvec();\n    P nv = (p3-p2).nvec();\n    P q0 = P::intersection(p2,p3,p0,p0+nv);\n    P q1 = P::intersection(p2,p3,p1,p1+nv);\n    P q2 = P::intersection(p0,p1,p2,p2+nu);\n    P q3 = P::intersection(p0,p1,p3,p3+nu);\n    if(P::crossing(p0,p1,p2,p3)) ans = 0.0;\n    else\n    {\n      double d0,d1,d2,d3;\n      d0 = (p2-p0).norm();\n      d1 = (p2-p1).norm();\n      d2 = (p3-p0).norm();\n      d3 = (p3-p1).norm();\n      double e0,e1,e2,e3;\n      e0 = P::on_seg(p2,p3,q0) ? (q0-p0).norm() : 1e30;\n      e1 = P::on_seg(p2,p3,q1) ? (q1-p1).norm() : 1e30;\n      e2 = P::on_seg(p0,p1,q2) ? (q2-p2).norm() : 1e30;\n      e3 = P::on_seg(p0,p1,q3) ? (q3-p3).norm() : 1e30;\n      ans = min({d0,d1,d2,d3,e0,e1,e2,e3});\n    }\n    printf(\"%.10lf\\n\",ans);\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<complex>\n#include<array>\n#include<vector>\n#include<cstdio>\n#include<cassert>\nusing namespace std;\n\nconst double EPS = 1e-10;\ntemplate<class T>\nbool eq(const T& a, const T& b) {return abs(a - b) < EPS;}\n\ntypedef  complex<double> point;\n\ndouble cross(const point& a, const point& b) {\n\treturn imag(conj(a)*b);\n}\ndouble dot(const point& a, const point& b) {\n\treturn real(conj(a)*b);\n}\nint ccw(point a, point b, point c) {\n\tb -= a; c -= a;\n\tif (cross(b, c) > 0)   return +1;  // counter clockwise\n\tif (cross(b, c) < 0)   return -1;  // clockwise\n\tif (dot(b, c) < 0)     return +2;  // c--a--b on line\n\tif (norm(b) < norm(c)) return -2;  // a--b--c on line\n\treturn 0;  // a--c--b on line or a----bc\n}\n\ntypedef array<point, 2> line;\n\npoint projection(const line& l, const point& p) {\n\tdouble t = dot(p-l[0], l[0]-l[1]) / norm(l[0]-l[1]);\n\treturn l[0] + t*(l[0]-l[1]);\n}\n\npoint reflection(const line& l, const point& p) {\nreturn p + 2. * (projection(l, p) - p);\n}\n typedef array<point, 2> line;\n//using line = array<point, 2>;\n/*\n * 平行かどうか\n */\nbool is_parallel(const line& s, const line& t) {\n\treturn eq(cross(s[0] - s[1], t[0] - t[1]), 0.0);\n}\n\nbool is_orthogonal(const line& s, const line& t) {\n\treturn eq(dot(s[0] - s[1], t[0] - t[1]), 0.0);\n}\n\n// 交差\n// Lはline（直線)\n// Sはsegment(線分)\nbool intersectLL(const line& l, const line& m) {\n\treturn !eq(cross(l[1]-l[0], m[1]-m[0]), 0.) || // non-parallel\n\t\t\teq(cross(l[1]-l[0], m[0]-l[0]), 0.);   // same line\n}\nbool intersectLS(const line& l, const line& s) {\n\treturn cross(l[1]-l[0], s[0]-l[0])*       // s[0] is left of l\n\tcross(l[1]-l[0], s[1]-l[0]) < EPS; // s[1] is right of l\n}\nbool intersectLP(const line& l, const point& p) {\n\treturn eq(cross(l[1]-p, l[0]-p), 0.);\n}\nbool intersectSS(const line &s, const line &t) {\n\treturn ccw(s[0],s[1],t[0])*ccw(s[0],s[1],t[1]) <= 0 &&\n\t\t\tccw(t[0],t[1],s[0])*ccw(t[0],t[1],s[1]) <= 0;\n}\nbool intersectSP(const line &s, const point &p) {\n\treturn abs(s[0]-p) + abs(s[1]-p) - abs(s[1]-s[0]) < EPS; // triangle inequality\n}\npoint crosspoint(const line& l, const line& m) {\n\tdouble A = cross(l[1] - l[0], m[1] - m[0]);\n\tdouble B = cross(l[1] - l[0], l[1] - m[0]);\n\tif (eq(A, 0.) && eq(B, 0.)) return m[0]; // same line\n\tif (eq(A, 0.)) assert(false); // 交点が無い場合に落ちる 実行前に交差判定\n\treturn m[0] + B / A * (m[1] - m[0]);\n}\n\n\n/* 距離 */\n// Lはline（直線)\n// Sはsegment(線分)\ndouble distanceLP(const line& l, const point& p) {\n  return abs(p - projection(l, p));\n}\ndouble distanceLL(const line& l, const line& m) {\n  return intersectLL(l, m) ? 0 : distanceLP(l, m[0]);\n}\ndouble distanceLS(const line& l, const line& s) {\nif (intersectLS(l, s)) return 0;\n return min(distanceLP(l, s[0]), distanceLP(l, s[1]));\n}\ndouble distanceSP(const line& s, const point& p) {\n  const point r = projection(s, p);\n  if (intersectSP(s, r)) return abs(r - p);\n  return min(abs(s[0] - p), abs(s[1] - p));\n}\ndouble distanceSS(const line& s, const line& t) {\n  if (intersectSS(s, t)) return 0;\n  return min(min(distanceSP(s, t[0]), distanceSP(s, t[1])),\n\t     min(distanceSP(t, s[0]), distanceSP(t, s[1])));\n}\n\nint main()\n{\n  int q;\n  cin>>q;\n  for(;q--;)\n    {\n      line l1,l2;\n      double x,y;\n      cin>>x>>y;\n      l1[0]=point(x,y);\n      cin>>x>>y;\n      l1[1]=point(x,y);\n      cin>>x>>y;\n      l2[0]=point(x,y);\n      cin>>x>>y;\n      l2[1]=point(x,y);\n      printf(\"%.10lf\\n\",distanceSS(l1,l2));\n    }\n}"
  },
  {
    "language": "C++",
    "code": "// include\n//------------------------------------------\n#include <bits/stdc++.h>\n\nusing namespace std;\n\n// conversion\n//------------------------------------------\ninline int toInt(string s) {\n    int v;\n    istringstream sin(s);\n    sin >> v;\n    return v;\n}\ntemplate <class T>\ninline string toString(T x) {\n    ostringstream sout;\n    sout << x;\n    return sout.str();\n}\n\n// math\n//-------------------------------------------\ntemplate <class T>\ninline T sqr(T x) {\n    return x * x;\n}\n\n// typedef\n//------------------------------------------\ntypedef vector<int> VI;\ntypedef vector<VI> VVI;\ntypedef vector<string> VS;\ntypedef pair<int, int> PII;\ntypedef long long LL;\n\n// container util\n//------------------------------------------\n#define ALL(a) (a).begin(), (a).end()\n#define RALL(a) (a).rbegin(), (a).rend()\n#define PB push_back\n#define MP make_pair\n#define SZ(a) int((a).size())\n#define EACH(i, c) \\\n    for (typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i)\n#define EXIST(s, e) ((s).find(e) != (s).end())\n#define SORT(c) sort((c).begin(), (c).end())\n\n// repetition\n//------------------------------------------\n#define FOR(i, a, b) for (int i = (a); i < (b); ++i)\n#define REP(i, n) FOR(i, 0, n)\n#define REPI(itr, ds) for (auto itr = ds.begin(); itr != ds.end(); itr++)\n\n// constant\n//--------------------------------------------\nconst double EPS = 1e-10;\nconst double PI = acos(-1.0);\nconst int INF_INT = 2147483647;\nconst LL INF_LL = 9223372036854775807;\n\n// clear memory\n//--------------------------------------------\n#define CLR(a) memset((a), 0, sizeof(a))\n\n// vector\n//--------------------------------------------\ntemplate <typename T>\nistream &operator>>(istream &is, vector<T> &vec) {\n    for (T &x : vec) is >> x;\n    return is;\n}\n\n// pair\n//--------------------------------------------\ntemplate <typename T, typename U>\nostream &operator<<(ostream &os, pair<T, U> &pair_var) {\n    os << \"(\" << pair_var.first << \", \" << pair_var.second << \")\";\n    return os;\n}\n\n// vector\n//--------------------------------------------\ntemplate <typename T>\nostream &operator<<(ostream &os, const vector<T> &vec) {\n    os << \"{\";\n    for (int i = 0; i < vec.size(); i++) {\n        os << vec[i] << (i + 1 == vec.size() ? \"\" : \", \");\n    }\n    os << \"}\";\n    return os;\n}\n\n// list\n//--------------------------------------------\ntemplate <typename T>\nostream &operator<<(ostream &os, const list<T> &lst) {\n    os << \"{\";\n    REPI(itr, lst) {\n        os << *itr;\n        itr++;\n        if (itr != lst.end()) os << \", \";\n        itr--;\n    }\n    os << \"}\";\n    return os;\n}\n\n// map\n//--------------------------------------------\ntemplate <typename T, typename U>\nostream &operator<<(ostream &os, map<T, U> &map_var) {\n    os << \"{\";\n    REPI(itr, map_var) {\n        os << *itr;\n        itr++;\n        if (itr != map_var.end()) os << \", \";\n        itr--;\n    }\n    os << \"}\";\n    return os;\n}\n\n// set\n//--------------------------------------------\ntemplate <typename T>\nostream &operator<<(ostream &os, set<T> &set_var) {\n    os << \"{\";\n    REPI(itr, set_var) {\n        os << *itr;\n        itr++;\n        if (itr != set_var.end()) os << \", \";\n        itr--;\n    }\n    os << \"}\";\n    return os;\n}\n\n// dump\n//--------------------------------------------\n#define DUMPOUT cerr\n\nvoid dump_func() { DUMPOUT << endl; }\ntemplate <class Head, class... Tail>\nvoid dump_func(Head &&head, Tail &&... tail) {\n    DUMPOUT << head;\n    if (sizeof...(Tail) > 0) {\n        DUMPOUT << \", \";\n    }\n    dump_func(std::move(tail)...);\n}\n#ifdef DEBUG_\n#define DEB\n#define dump(...)                                                       \\\n    DUMPOUT << \"  \" << string(#__VA_ARGS__) << \": \"                     \\\n            << \"[\" << to_string(__LINE__) << \":\" << __FUNCTION__ << \"]\" \\\n            << endl                                                     \\\n            << \"    \",                                                  \\\n        dump_func(__VA_ARGS__)\n#else\n#define DEB if (false)\n#define dump(...)\n#endif\n\n// geo\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nclass Point {\npublic:\n    double x, y;\n\n    Point(double x = 0, double y = 0) : x(x), y(y) {}\n\n    Point operator+(Point p) { return Point(x + p.x, y + p.y); }\n    Point operator-(Point p) { return Point(x - p.x, y - p.y); }\n    Point operator*(double a) { return Point(x * a, y * a); }\n    Point operator/(double a) { return Point(x / a, y / a); }\n\n    double abs() { return sqrt(norm()); }\n    double norm() { return x * x + y * y; }\n\n    bool operator==(const Point &p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n};\n\ntypedef Point Vector;\n\nclass Segment {\npublic:\n    Point p1, p2;\n    Segment(Point p1 = Point(), Point p2 = Point()) : p1(p1), p2(p2) {}\n};\n\ntypedef Segment Line;\n\nclass Circle {\npublic:\n    Point c;\n    double r;\n    Circle(Point c = Point(), double r = 0.0) : c(c), r(r) {}\n};\n\nclass vector<Point> Polygon;\n\ndouble norm(Vector a) { return a.x * a.x + a.y * a.y; }\n\ndouble abs(Vector a) { return sqrt(norm(a)); }\n\ndouble dot(Vector a, Vector b) { return a.x * b.x + a.y * b.y; }\n\ndouble cross(Vector a, Vector b) { return a.x * b.y - a.y * b.x; }\n\ndouble getDistance(Point a, Point b) {\n    Vector v = a - b;\n    return v.abs();\n}\n\ndouble getDistanceLP(Line l, Point p) {\n    double c = cross(l.p2 - l.p1, p - l.p1);\n    Vector v = l.p2 - l.p1;\n    return abs(c) / v.abs();\n}\n\ndouble getDistanceSP(Segment s, Point p) {\n    if (dot(s.p2 - s.p1, p - s.p1) < 0.0) return abs(p - s.p1);\n    if (dot(s.p1 - s.p2, p - s.p2) < 0.0) return abs(p - s.p2);\n    return getDistanceLP(s, p);\n}\n\nenum Position {\n    COUNTER_CLOCKWISE = 1,\n    CLOCKWISE = -1,\n    ONLINE_BACK = 2,\n    ON_SEGMENT = 0,\n    ONLINE_FRONT = -2\n};\n\nint ccw(Point p0, Point p1, Point p2) {\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    enum Position p;\n    if (cross(a, b) > EPS)\n        p = COUNTER_CLOCKWISE;\n    else if (cross(a, b) < -EPS)\n        p = CLOCKWISE;\n    else if (dot(a, b) < -EPS)\n        p = ONLINE_BACK;\n    else if (a.norm() < b.norm())\n        p = ONLINE_FRONT;\n    else\n        p = ON_SEGMENT;\n    return p;\n}\n\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n            ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\n\nbool intersect(Segment s1, Segment s2) {\n    return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\ndouble getDistance(Segment s1, Segment s2) {\n    if (intersect(s1, s2)) return 0.0;\n    return min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n               min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\nint main(void) {\n    int n;\n    cin >> n;\n    Segment s1[n], s2[n];\n    REP(i, n)\n    cin >> s1[i].p1.x >> s1[i].p1.y >> s1[i].p2.x >> s1[i].p2.y >> s2[i].p1.x >>\n        s2[i].p1.y >> s2[i].p2.x >> s2[i].p2.y;\n\n    REP(i, n)\n        cout << fixed << setprecision(10) << getDistance(s1[i], s2[i]) << endl;\n\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define ll long long\n#define INF 1000000005\n#define MOD 1000000007\n#define EPS 1e-10\n#define rep(i,n) for(int i=0;i<n;++i)\n\nusing namespace std;\n\ntypedef complex<double> C;\n\nnamespace std\n{\n    bool operator < (const C& a, const C& b) {\n        return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n    }\n}\n\nstruct L : public vector<C>\n{\n    L(const C &a, const C &b) {\n        push_back(a); push_back(b);\n    }\n};\n\n//??????\ndouble cross(const C& a, const C& b)\n{\n    return imag(conj(a)*b);\n}\n//??????\ndouble dot(const C& a, const C& b)\n{\n    return real(conj(a)*b);\n}\n\n\nint ccw(C a, C b, C c)\n{\n    b -= a; c -= a;\n    if (cross(b, c) > 0)   return +1;       // counter clockwise\n    if (cross(b, c) < 0)   return -1;       // clockwise\n    if (dot(b, c) < 0)     return +2;       // c--a--b on line\n    if (norm(b) < norm(c)) return -2;       // a--b--c on line\n    return 0;\n}\n//??´???????????????????????????(????????´??????True)\nbool intersectLL(const L &l, const L &m)\n{\n    return abs(cross(l[1]-l[0], m[1]-m[0])) > EPS || abs(cross(l[1]-l[0], m[0]-l[0])) < EPS;\n}\n//??´?????¨?????????????????????(????????±??????????????¨??????)\nbool intersectLS(const L &l, const L &s)\n{\n    return cross(l[1]-l[0], s[0]-l[0]) * cross(l[1]-l[0], s[1]-l[0]) < EPS;\n}\n//??´?????¨????????????(??±???)??????\nbool intersectLP(const L &l, const C &p)\n{\n    return abs(cross(l[1]-p, l[0]-p)) < EPS;\n}\n//??????????????????????????????(????????±??????????????¨??????)\nbool intersectSS(const L &s, const L &t)\n{\n    return ccw(s[0],s[1],t[0])*ccw(s[0],s[1],t[1]) <= 0 && ccw(t[0],t[1],s[0])*ccw(t[0],t[1],s[1]) <= 0;\n}\n//????????¨????????????(??±???)??????\nbool intersectSP(const L &s, const C &p)\n{\n    return abs(s[0]-p)+abs(s[1]-p)-abs(s[1]-s[0]) < EPS;\n}\n//???p?????´???l???????°???±\nC projection(const L &l, const C &p)\n{\n    double t = dot(p-l[0], l[0]-l[1]) / norm(l[0]-l[1]);\n    return l[0] + t*(l[0]-l[1]);\n}\n//???p?????´???l????????¨??????????§°?§????\nC reflection(const L &l, const C &p)\n{\n    return p + (projection(l, p) - p)*2.0;\n}\n//?????¨??´???????????¢\ndouble distanceLP(const L &l, const C &p)\n{\n    return abs(p - projection(l, p));\n}\n//??´?????¨??´???????????¢\ndouble distanceLL(const L &l, const L &m)\n{\n    return intersectLL(l, m) ? 0 : distanceLP(l, m[0]);\n}\n//??´?????¨??????????????¢\ndouble distanceLS(const L &l, const L &s)\n{\n    if (intersectLS(l, s)) return 0;\n    return min(distanceLP(l, s[0]), distanceLP(l, s[1]));\n}\n//????????¨???????????¢\ndouble distanceSP(const L &s, const C &p)\n{\n    const C r = projection(s, p);\n    if (intersectSP(s, r)) return abs(r - p);\n    return min(abs(s[0] - p), abs(s[1] - p));\n}\n//????????¨??????????????¢\ndouble distanceSS(const L &s, const L &t)\n{\n    if (intersectSS(s, t)) return 0;\n    return min(min(distanceSP(s, t[0]), distanceSP(s, t[1])),min(distanceSP(t, s[0]), distanceSP(t, s[1])));\n}\n//??´???????????????????????????\nC crosspoint(const L &l, const L &m)\n{\n    double A = cross(l[1] - l[0], m[1] - m[0]);\n    double B = cross(l[1] - l[0], l[1] - m[0]);\n    //????????´????????¨???\n    if(abs(A) < EPS && abs(B) < EPS){\n        return m[0];\n    }\n    return m[0] + B / A * (m[1] - m[0]);\n}\n//?????????????????????\nL crosspointSS(C &p1,int r1,C &p2,int r2)\n{\n    double d = norm(p2-p1);\n    double t = r2*r2 - r1*r1 - d;\n    double aa = d,bb = t*(real(p2)-real(p1)),cc = t*t / 4.0 - (imag(p2) - imag(p1))*(imag(p2) - imag(p1))*r1*r1;\n    double x1 = (-bb - sqrt(bb*bb - 4*aa*cc))/(2*aa),x2 = (-bb + sqrt(bb*bb - 4*aa*cc))/(2*aa);\n    double y1,y2;\n    if(imag(p1) == imag(p2)){\n        y1 = -sqrt(r1*r1 - x1*x1);\n        y2 = -y1;\n    }else{\n        y1 = (t+2*(real(p2)-real(p1))*x1)/(-2*(imag(p2)-imag(p1)));\n        y2 = (t+2*(real(p2)-real(p1))*x2)/(-2*(imag(p2)-imag(p1)));\n    }\n    L ln = L(C(x1+real(p1),y1+imag(p1)),C(x2+real(p1),y2+imag(p1)));\n    return ln;\n}\n//??????????±???????\nvector<C> convex_hull(vector<C> ps)\n{\n    int n = ps.size(), k = 0;\n    sort(ps.begin(), ps.end());\n    vector<C> ch(2*n);\n    for (int i = 0; i < n; ch[k++] = ps[i++]){\n        while (k >= 2 && ccw(ch[k-2], ch[k-1], ps[i]) <= 0) k--;\n    }\n    for (int i = n-2, t = k+1; i >= 0; ch[k++] = ps[i--]){\n        while (k >= t && ccw(ch[k-2], ch[k-1], ps[i]) <= 0) k--;\n    }\n    ch.resize(k-1);\n    return ch;\n}\n//?????§??????\nbool isconvex(const vector<C> &ps)\n{\n    rep(i,ps.size()){\n        if (ccw(ps[(i+ps.size()-1) % ps.size()],ps[i],ps[(i+1) % ps.size()])) return false;\n    }\n    return true;\n}\n//????§???¢?????¢???\ndouble area(const vector<C> &ps)\n{\n    double A = 0;\n    rep(i,ps.size()){\n        A += cross(ps[i],ps[(i+1) % ps.size()]);\n    }\n    return A / 2.0;\n}\n//???????§???¢?????´?????§???????????????????????´????????¢\nvector<C> convex_cut(const vector<C> &ps, const L &l)\n{\n    vector<C> Q;\n    rep(i,ps.size()){\n        C A = ps[i], B = ps[(i+1)%ps.size()];\n        if (ccw(l[0], l[1], A) != -1) Q.push_back(A);\n        if (ccw(l[0], l[1], A)*ccw(l[0], l[1], B) < 0)\n            Q.push_back(crosspoint(L(A, B), l));\n    }\n    return Q;\n}\n//??????????§???¢???????????????????????????(0??????????????????,1?????????,2???????????????)\nint contains(const vector<C>& ps, const C& p)\n{\n    bool flag = false;\n    rep(i,ps.size()) {\n        C a = ps[i] - p, b = ps[(i+1)%ps.size()] - p;\n        if (imag(a) > imag(b)) swap(a, b);\n        if (imag(a) <= 0 && 0 < imag(b)){\n            if (cross(a, b) < 0) flag = !flag;\n        }\n        if (cross(a, b) == 0 && dot(a, b) <= 0) return 1;\n  }\n  return flag ? 2 : 0;\n}\n//???????§???¢?????´???????±???????(?????£????????????)\n//maxi,maxj?????????????????¨??????\ndouble convex_diameter(const vector<C> &ps)\n{\n    const int n = ps.size();\n    int is = 0, js = 0;\n    for (int i = 1; i < n; ++i) {\n        if (imag(ps[i]) > imag(ps[is])) is = i;\n        if (imag(ps[i]) < imag(ps[js])) js = i;\n    }\n    double maxd = abs(ps[is]-ps[js]);\n    int i, maxi, j, maxj;\n    i = maxi = is;\n    j = maxj = js;\n    do{\n        if (cross(ps[(i+1)%ps.size()]-ps[i],ps[(j+1)%ps.size()]-ps[j]) >= 0) j = (j+1) % n;\n        else i = (i+1) % n;\n        if (abs(ps[i]-ps[j]) > maxd) {\n            maxd = abs(ps[i]-ps[j]);\n            maxi = i; maxj = j;\n        }\n    } while (i != is || j != js);\n    return maxd;\n}\n\nint main()\n{\n    int n;\n    cin >> n;\n    rep(i,n){\n        int a,b,c,d,e,f,g,h;\n        cin >> a >> b >> c >> d >> e >> f >> g >> h;\n        printf(\"%.10f\\n\",distanceSS(L(C(a,b),C(c,d)),L(C(e,f),C(g,h))));\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <math.h>\nconst double eps=1e-9;\ndouble ABS(double n){return n>=0?n:-n;}\ndouble min(double a,double b){return a>b?b:a;}\ndouble max(double a,double b){return a>b?a:b;}\nbool same(double a,double b){return ABS(a-b)<eps;}\nstruct point{\n\tdouble x;\n\tdouble y;\n\tpoint(){}\n\tpoint(double a,double b){x=a;y=b;}\n\tpoint operator +(const point &a){return point(x+a.x,y+a.y);}\n\tpoint operator -(const point &a){return point(x-a.x,y-a.y);}\n\tpoint operator *(const double &a){return point(x*a,y*a);}\n\tpoint operator /(const double &a){return point(x/a,y/a);}\n\tvoid operator =(const point &a){x=a.x;y=a.y;}\n\tvoid operator +=(const point &a){x+=a.x;y+=a.y;}\n\tvoid operator -=(const point &a){x-=a.x;y-=a.y;}\n\tvoid operator *=(const double &a){x*=a;y*=a;}\n\tvoid operator /=(const double &a){x/=a;y/=a;}\n\tbool operator <(const point &a){return x<a.x||(same(x,a.x)&&y<a.y);}\n\tbool operator ==(const point &a){return same(x,a.x)&&same(y,a.y);}\n\tdouble length(){return sqrt(x*x+y*y);}\n\tvoid in(){scanf(\"%lf%lf\",&x,&y);}\n\tvoid out(){printf(\"%.20lf %.20lf\\n\",x,y);}\n};\nstruct segment{\n\tpoint a;\n\tpoint b;\n\tsegment(){}\n\tsegment(point x,point y){a=x;b=y;}\n};\nstruct line{\n\tdouble A;\n\tdouble B;\n\tdouble C;\n\tline(){}\n\tline(double a,double b,double c){A=a;B=b;C=c;}\n\tline(point a,point b){\n\t\tA=a.y-b.y;\n\t\tB=b.x-a.x;\n\t\tC=A*a.x+B*a.y;\n\t}\n\tline(double a,double b,point p){\n\t\tA=a;\n\t\tB=b;\n\t\tC=A*p.x+B*p.y;\n\t}\n\tline(segment s){\n\t\tA=s.a.y-s.b.y;\n\t\tB=s.b.x-s.a.x;\n\t\tC=A*s.a.x+B*s.a.y;\n\t}\n};\ndouble distance(point a,point b){return (a-b).length();}\ndouble dot(point a,point b){return a.x*b.x+a.y*b.y;}\ndouble cross(point a,point b){return a.x*b.y-b.x*a.y;}\n//angle only returns positive value\ndouble angle(point a,point b){return acos(dot(a,b)/(a.length()*b.length()));}\ndouble area(point a,point b,point c){return ABS(cross(b-a,c-a));}\ndouble distance(point a,line b){return (b.A*a.x+b.B*a.y-b.C)/sqrt(b.A*b.A+b.B*b.B);}\nbool between(point a,point b,point c){\n\tif((a.x-b.x<=eps&&b.x-c.x<=eps)||(eps>=b.x-a.x&&eps>=c.x-b.x))\n\tif((a.y-b.y<=eps&&b.y-c.y<=eps)||(eps>=b.y-a.y&&eps>=c.y-b.y))\n\treturn true;\n\treturn false;\n}\npoint intersect(line a,line b){\n\tdouble x,y,det;\n\tx=(a.C*b.B-b.C*a.B);\n\ty=(a.A*b.C-b.A*a.C);\n\tdet=(a.A*b.B-b.A*a.B);\n\treturn point(x,y)/det;\n}\nbool parallel(line a,line b){return same(a.A*b.B,b.A*a.B);}\ndouble distance(line a,line b){}\ndouble distance(point p,segment s){\n\tline l(s);\n\tpoint a(intersect(line(l.B,-l.A,l.B*p.x-l.A*p.y),l));\n\tif(between(s.a,a,s.b))return distance(p,a);\n\telse return min(distance(p,s.a),distance(p,s.b));\n}\ndouble distance(segment a,segment b){\n\tpoint l(a.a),lm,rm,r(a.b);\n\tfor(int i=0;i<100;i++){\n\t\tlm=(l*2+r)/3;\n\t\trm=(l+r*2)/3;\n\t\tif(distance(lm,b)>distance(rm,b))l=lm;\n\t\telse r=rm;\n\t}\n\treturn distance(l,b);\n}\nbool same(line a,line b){return distance(a,b)<=eps;}\nbool vertical(line a,line b){return ABS(a.A*b.A+a.B*b.B)<=eps;}\nbool hasintersect(segment a,segment b){\n\tline l(a),r(b);\n\tif(parallel(l,r)){\n\t\tif(same(l,r))return between(a.a,b.a,a.b)||between(a.a,b.b,a.b)||between(b.a,a.a,b.b)||between(b.a,a.b,b.b);\n\t\telse return false;\n\t}\n\telse{\n\t\tpoint p(intersect(l,r));\n\t\treturn between(a.a,p,a.b)&&between(b.a,p,b.b);\n\t}\n}\npoint intersect(segment a,segment b){return intersect(line(a),line(b));}\npoint projection(point a,line b){return intersect(line(b.B,-b.A,a),b);}\npoint reflection(point a,line b){return projection(a,b)*2-a;}\nbool online(point p,line l){return ABS(l.A*p.x+l.B*p.y-l.C)<eps;}\nbool onseg(point p,segment s){return online(p,line(s))&&between(s.a,p,s.b);}\nvoid solve(){\n\tsegment a,b;\n\tpoint x,y;\n\tx.in();\n\ty.in();\n\ta=segment(x,y);\n\tx.in();\n\ty.in();\n\tb=segment(x,y);\n\tprintf(\"%.20lf\\n\",distance(a,b));\n\treturn ;\n}\nint main(){\n\tint t;\n\tscanf(\"%d\",&t);\n\twhile(t--)solve();\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n \nusing namespace std;\n \n#define EPS 1e-10\n#define equal(a,b) (fabs(a-b) < EPS)\n\nstruct Point{\n  double x,y;\n\n  Point(){}\n  Point(double x,double y) : x(x),y(y) {}\n\n  Point operator + (const Point &p)const{ return Point(x+p.x,y+p.y); }\n  Point operator - (const Point &p)const{ return Point(x-p.x,y-p.y); }\n  Point operator * (const double &k)const{ return Point(x*k,y*k); }\n  Point operator / (const double &k)const{ return Point(x/k,y/k); }\n};\n\ndouble cross(const Point &a,const Point &b){ return a.x*b.y - b.x*a.y; }\ndouble dot(const Point &a,const Point &b){ return a.x*b.x+a.y*b.y; }\ndouble norm(const Point &p){ return dot(p,p); }\ndouble abs(const Point &p){ return sqrt(norm(p)); }\n\nistream &operator >> (istream &is,Point &p){ \n  return is >> p.x >> p.y;\n}\n\ntypedef Point Vector;\n\n#define COUNTER_CLOCKWISE 1\n#define CLOCKWISE -1\n#define ONLINE_BACK 2\n#define ONLINE_FRONT -2\n#define ON_SEGMENT 0\ntypedef Point Vector;\n\nint ccw(Point p0,Point p1,Point p2){\n  Vector a = p1 - p0;\n  Vector b = p2 - p0;\n  if(cross(a,b) > EPS){ return COUNTER_CLOCKWISE; }\n  if(cross(a,b) < -EPS){ return CLOCKWISE; }\n  if(dot(a,b) < -EPS){ return ONLINE_BACK; }\n  if(norm(a) < norm(b)){ return ONLINE_FRONT; }\n  return ON_SEGMENT;\n}\n\nstruct Segment{\n  Point s,t;\n  Segment(){}\n  Segment(Point s,Point t) : s(s),t(t) {}\n};\n\nPoint projection(Segment s,Point p){\n  Vector b = s.t-s.s;\n  double t = dot(p-s.s,b)/norm(b);\n  return s.s+b*t;\n}\n\nbool isIntersectSP(const Segment &s,const Point &p){\n  return equal(ccw(s.s,s.t,p),0);\n}\n\nbool isIntersectSS(const Segment &a,const Segment &b){\n  Point s[2] = {a.s,a.t}, t[2] = {b.s,b.t};\n  return ccw(s[0],s[1],t[0])*ccw(s[0],s[1],t[1]) <= 0\n    && ccw(t[0],t[1],s[0])*ccw(t[0],t[1],s[1]) <= 0;\n}\n\ndouble distanceSP(const Segment &s,const Point &p){\n  Point r = projection(s,p);\n  if(isIntersectSP(s,p)){ return abs(r-p); }\n  return min(abs(s.s-p),abs(s.t-p));\n}\n\ndouble distanceSS(const Segment a,const Segment b){\n  if(isIntersectSS(a,b)){ return 0; }\n  return min(min(distanceSP(a,b.s),distanceSP(a,b.t)),\n             min(distanceSP(b,a.s),distanceSP(b,a.t)));\n}\n\nint main(){\n  int Q;\n  Segment s1,s2;\n  cin >> Q;\n  while(Q--){\n    cin >> s1.s >> s1.t >> s2.s >> s2.t;\n    double dist = distanceSS(s1,s2);\n    printf(\"%.10f\\n\",dist);\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cmath>\nusing namespace std;\nconst double EPS = 1e-7;\nconst double INF = 1e12;\nstruct Vec {\n    double x,y;\n    Vec(){}\n    Vec(double x,double y){ this->x=x,this->y=y; }\n    void read(){ scanf(\"%lf%lf\",&x,&y); }\n    void prt() {printf(\"%.9f %.9f\\n\",x,y); }\n    double len(){ return sqrt(x*x+y*y); }\n    double len2(){ return x*x+y*y; }\n    \n    Vec operator+(const Vec&o)const{ return Vec(x+o.x,y+o.y); }\n    Vec operator-(const Vec&o)const{ return Vec(x-o.x,y-o.y); }\n    Vec operator*(const double&k)const{ return Vec(k*x,k*y); }\n    double operator*(const Vec&o)const {return x*o.x+y*o.y; }\n    double operator^(const Vec&o)const {return x*o.y-y*o.x; }\n    Vec rotate(double ang){ return Vec(x*cos(ang)-y*sin(ang), x*sin(ang)+y*cos(ang)); }\n    Vec change(double l){ if(len()<EPS) return *this; return (*this)*(l/len()); }\n    double disToLine(Vec A, Vec B) {\n        return abs((A-*this)^(B-*this))/(B-A).len();\n    }\n    Vec Reflection(Vec A,Vec B){\n        Vec P = *this;\n        double dis=P.disToLine(A,B);\n        int sgn=(((B-A)^(P-A))>=0)?-1:+1;\n        return (*this)+(B-A).rotate(acos(-1)/2).change(dis)*sgn;\n    }\n};\n\nVec Lineintersect(Vec A1,Vec A2,Vec B1,Vec B2) {\n    if (abs((A2-A1)^(B2-B1)) < EPS) return Vec(INF,INF);\n    return A1 + (A2 - A1) * ( (((A2-A1)^(B2-B1)) - ((A2-B1)^(B2-B1))) / ((A2-A1)^(B2-B1)) );\n}\n\nVec Segintersect(Vec A1,Vec A2,Vec B1,Vec B2) {\n    Vec P = Lineintersect(A1,A2,B1,B2);\n    //P.prt();\n    if ((P-A1)*(P-A2)<=0 && (P-B1)*(P-B2)<=0) return P; \n    return Vec(INF,INF);\n}\n\nbool onseg(Vec P,Vec A,Vec B){\n    if(P.disToLine(A,B) > EPS) return 0;\n    return (P-A)*(P-B) <= 0;\n}\ndouble minDis(Vec P,Vec A,Vec B){\n    double ans=min((A-P).len(),(B-P).len());\n    Vec H = P.Reflection(A,B);\n    if(onseg(H,A,B)) ans=min(ans,(H-P).len());    \n    return ans;\n}\n\nVec A,B,C,D; int q;\nint main(){\n    scanf(\"%d\",&q);\n    while(q--){\n        A.read(); B.read(); C.read(); D.read();\n        if(Segintersect(A,B,C,D).x != INF) {\n            printf(\"0\\n\"); continue;\n        }\n        double ans=min( min(minDis(A,C,D),minDis(B,C,D)),min(minDis(C,A,B),minDis(D,A,B)) );\n        printf(\"%.8f\\n\", ans);\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <cstdio>\n\nusing namespace std;\n\nstruct Point {\n  double x;\n  double y;\n};\n\ndouble min(double a, double b) {\n  if(a < b) \n    return a;\n  else\n    return b;  \n}\n\ndouble norm(Point p0, Point p1) {\n  return sqrt(pow(p1.x - p0.x, 2) + pow(p1.y - p0.y, 2));\n}\n\ndouble dot(Point p0, Point p1, Point p2) {\n  return (p1.x - p0.x) * (p2.x - p0.x) + (p1.y - p0.y) * (p2.y - p0.y);\n}\n\ndouble cross(Point p0, Point p1, Point p2) {\n  return ( p1.x - p0.x ) * ( p2.y - p0.y ) - ( p2.x - p0.x) * (p1.y - p0.y);\n}\n\nint positional_relationship(Point p0, Point p1, Point p2) {\n  if(cross(p0, p1, p2) > 0) //反時計回り\n    return 1;\n  else if(cross(p0, p1, p2) < 0) //時計回り\n    return -1;\n  else if(dot(p0, p1, p2) < 0) //一直線上で反転向き\n    return 2;\n  else if(norm(p0, p1) < norm(p0, p2)) // 一直線上で同じ向き\n    return -2;\n  else //線分上に存在\n    return 0;  \n}\n\nbool isIntersected(Point p0, Point p1, Point p2, Point p3) {\n  if(positional_relationship(p0, p1, p2) * positional_relationship(p0, p1, p3) <= 0 && positional_relationship(p2, p3 ,p0) * positional_relationship(p2, p3, p1) <= 0)\n    return true;\n  return false;\n};\n\ndouble distance(Point p0, Point p1, Point p2) {\n  if(dot(p0, p1, p2) < 0)\n    return norm(p0, p2);\n  else if(dot(p1, p0, p2) < 0)\n    return norm(p1, p2);\n  else\n    return fabs( cross(p0, p1, p2) ) / ( norm(p0, p1) );  \n}\n\nint main(void) {\n  int q;\n  cin >> q;\n  Point p0, p1, p2, p3;\n\n  for(int i = 0; i < q; i++) {\n    cin >> p0.x >> p0.y >> p1.x >> p1.y >> p2.x >> p2.y >> p3.x >> p3.y;\n    double min_dist = 0.0;\n    if(isIntersected(p0, p1, p2, p3)) {\n      printf(\"%.10lf\\n\", min_dist);\n      continue;\n    }\n    //printf(\"%lf %lf\\n\", distance(p0, p1, p2), distance(p0, p1, p3));\n    min_dist = min(min( distance(p0, p1, p2), distance(p0, p1, p3) ), min( distance(p2, p3, p0), distance(p2, p3, p1) ) );\n    printf(\"%.10lf\\n\", min_dist);\n  }\n\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\nstruct point{\n\tdouble x,y;\n\tpoint(){}\n\tpoint(double _x,double _y){\n\t\tx=_x;y=_y;\n\t}\n\tpoint operator +(const point &b) const{\n\t\treturn point(x+b.x,y+b.y);\n\t}\n\tpoint operator -(const point &b) const{\n\t\treturn point(x-b.x,y-b.y);\n\t}\n\tdouble operator ^(const point &b) const{\n\t\treturn x*b.x+y*b.y;\n\t}\n\tdouble operator *(const point &b) const{\n\t\treturn x*b.y-y*b.x;\n\t}\n\tpoint operator *(const double &b) const{\n\t\treturn point(x*b,y*b);\n\t}\n};\ndouble len(point p){\n\treturn p.x*p.x+p.y*p.y;\n}\nstruct matrix{\n\tdouble xmin,xmax,ymin,ymax;\n}a[2];\nbool check(point p0,point p1,point p2,point p3){\n\ta[0].xmax=max(p0.x,p1.x);\n\ta[0].xmin=min(p0.x,p1.x);\n\ta[0].ymax=max(p0.y,p1.y);\n\ta[0].ymin=min(p0.y,p1.y);\n\ta[1].xmax=max(p2.x,p3.x);\n\ta[1].xmin=min(p2.x,p3.x);\n\ta[1].ymax=max(p2.y,p3.y);\n\ta[1].ymin=min(p2.y,p3.y);\n\tif(!(a[0].xmax<a[1].xmin || a[1].xmax<a[0].xmin || a[0].ymax<a[1].ymin || a[1].ymax<a[0].ymin)){\n\t\tif(((p1-p0)*(p2-p0))*((p1-p0)*(p3-p0))<=0 &&\n\t\t   ((p3-p2)*(p1-p2))*((p3-p2)*(p0-p2))<=0) return 1;\n\t\telse return 0;\n\t}\n\telse return 0;\n}\ndouble dist(point p,point p0,point p1){\n\tpoint q=(p1-p0)*(((p1-p0)^(p-p0))/len(p1-p0))+p0;\n\tif(min(p0.x,p1.x)<=q.x&&q.x<=max(p0.x,p1.x)&&min(p0.y,p1.y)<=q.y&&q.y<=max(p0.y,p1.y)) return sqrt(len(p-q));\n\treturn min(sqrt(len(p0-p)),sqrt(len(p1-p)));\n}\nint main(){\n\tint n;\n\tpoint p0,p1,p2,p3;\n\tcin>>n;\n\twhile(n--){\n\t\tcin>>p0.x>>p0.y>>p1.x>>p1.y>>p2.x>>p2.y>>p3.x>>p3.y;\n\t\tif(check(p0,p1,p2,p3)) printf(\"%.10lf\\n\",0);\n\t\telse printf(\"%.10lf\\n\",min(min(dist(p0,p2,p3),dist(p1,p2,p3)),min(dist(p2,p0,p1),dist(p3,p0,p1))));\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nclass Point {\n    public:\n    double x, y;\n    \n    Point(double x = 0, double y = 0): x(x), y(y) {}\n\n    Point operator + (Point p) { return Point(x + p.x, y + p.y); }\n    Point operator - (Point p) { return Point(x - p.x, y - p.y); }\n    Point operator * (double a) { return Point(a * x, a * y); }\n    Point operator / (double a) { return Point(x / a, y / a); }\n\n    double abs() {\n        return sqrt(norm());\n    }\n    double norm() {\n        return x * x + y * y;\n    }\n\n    bool operator < (const Point &p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point &p) const {\n        return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n    }\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n    return a.x * b.y - a.y * b.x;\n}\n\nstruct Segment {\n    Point p1, p2;\n};\n\ntypedef Segment Line;\n\nclass Circle {\n    public:\n        Point c;\n        double r;\n        Circle(Point c = Point(), double r = 0.0): c(c), r(r) {}\n};\n\ntypedef vector<Point> Polygon;\n\nbool isParallel(Vector a, Vector b) {\n    return equals(dot(a, b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n    return isParallel(a1 - a2, b1 - b2);\n}\n\nbool isParallel(Segment s1, Segment s2) {\n    return equals(cross((s1.p2 - s1.p1), (s2.p2 - s2.p1)), 0.0);\n}\n\nbool isOrthogonal(Vector a, Vector b) {\n    return equals(cross(a, b), 0.0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n    return isOrthogonal(a1 - a2, b1 - b2);\n}\n\nbool isOrthogonal(Segment s1, Segment s2) {\n    return equals(dot((s1.p2 - s1.p1), (s2.p2 - s2.p1)), 0.0);\n}\n\nPoint project(Segment s, Point p) {\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / base.norm();\n    return s.p1 + base * r;\n}\n\nPoint reflect(Segment s, Point p) {\n    Point projection = project(s, p);\n    Vector toReflection = (projection - p) * 2.0;\n    return p + toReflection; \n}\n\nint ccw(Point p0, Point p1, Point p2) {\n    Vector v1 = p1 - p0;\n    Vector v2 = p2 - p0;\n\n    // 反時計\n    if (cross(v1, v2) > 0.0) return 1;\n    // 時計\n    if (cross(v1, v2) < 0.0) return -1;\n\n    // p1, p2 が逆方向\n    if (dot(v1, v2) < 0.0) return 2;\n\n    // p1, p2 が同方向\n    if (v1.abs() < v2.abs()) return -2;\n    return 0;\n}\n\nbool intersect(Segment s1, Segment s2) {\n    return (ccw(s1.p1, s1.p2, s2.p1) * ccw(s1.p1, s1.p2, s2.p2) <= 0\n            && ccw(s2.p1, s2.p2, s1.p1) * ccw(s2.p1, s2.p2, s1.p2) <= 0);\n}\n\ndouble getDistanceLP(Line l, Point p) {\n    return abs(cross(l.p2 - l.p1, p - l.p1)) / (l.p2 - l.p1).abs();\n}\n\ndouble getDistanceSP(Segment s, Point p) {\n    if (dot(s.p2 - s.p1, p - s.p1) < 0) return (p - s.p1).abs();\n    if (dot(s.p1 - s.p2, p - s.p2) < 0) return (p - s.p2).abs();\n\n    return getDistanceLP(s, p);\n}\n\ndouble getDistanceSS(Segment s1, Segment s2) {\n    if (intersect(s1, s2)) {\n        return 0.0;\n    }\n\n    return min(\n        min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n        min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2))\n    );\n}\n\ndouble getDistancePP(Point p1, Point p2) {\n    return (p2 - p1).abs();\n}\n\nint main() {\n    /*\n    cout << fixed << setprecision(11);\n\n    double x1, y1, x2, y2;\n    cin >> x1 >> y1 >> x2 >> y2;\n    Point p1 = {x1, y1};\n    Point p2 = {x2, y2};\n    Segment s1 = {p1, p2};\n\n    double x3, y3, x4, y4;\n    cin >> x3 >> y3 >> x4 >> y4;\n    Point p3 = {x3, y3};\n    Point p4 = {x4, y4};\n    Segment s2 = {p3, p4};\n\n    double dist = distanceBetweenSegments(s1, s2);\n    */\n\n    cout << fixed << setprecision(11);\n    int q;\n    cin >> q;\n    double x0, y0, x1, y1, x2, y2, x3, y3;\n    for (int i = 0; i < q; i++) {\n        cin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n        Point p0 = {x0, y0};\n        Point p1 = {x1, y1};\n        Point p2 = {x2, y2};\n        Point p3 = {x3, y3};\n        Segment s1 = {p0, p1};\n        Segment s2 = {p2, p3};\n\n        cout << getDistanceSS(s1, s2) << endl;\n    }\n\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n\ninline int sign(const double &x){\n    if(x>EPS) return 1;\n    else if(x<-EPS) return -1;\n    return 0;\n}\n\n/*   点  */\nstruct Point{\n    double x,y;\n\n    Point(double x=0,double y=0):x(x),y(y){}\n\n    Point operator + (Point p) { return Point(x+p.x,y+p.y); }\n    Point operator - (Point p) { return Point(x-p.x,y-p.y); }\n    Point operator * (double k) { return Point(k*x,k*y); }\n    Point operator / (double k) { return Point(x/k,y/k); }\n\n    //向量的大小\n    double abs(){ return sqrt(norm()); }\n    double norm() { return x*x+y*y; }\n\n    bool operator < (const Point & p) const{\n        return x!=p.x?x<p.x:y<p.y;\n    }\n\n    bool operator == (const Point & p) const {\n        return fabs(x-p.x)<EPS&&fabs(y-p.y)<EPS;\n    }\n};\n\n//两点间的距离\ndouble getDistance(Point a,Point b){\n    return (a-b).abs();\n}\n\n/*   向量  */\ntypedef Point Vector;\n\n//向量a和b的内积\ndouble dot(Vector a,Vector b){\n    return a.x*b.x+a.y*b.y;\n}\n//向量a和b的外积\ndouble cross(Vector a,Vector b){\n    return a.x*b.y-a.y*b.x;\n}\n\n/*   线段  */\nstruct Segment{\n    Point p1,p2;\n};\n\n/*   直线  */\ntypedef Segment Line;\n\n//点到直线的距离\ndouble getDistanceLP(Line l,Point p){\n    return abs(cross(l.p2-l.p1,p-l.p1)/(l.p2-l.p1).abs());\n}\n\n//点到线段的距离\ndouble getDistanceSP(Segment s,Point p){\n    if(dot(s.p2-s.p1,p-s.p1)<0.0) return (p-s.p1).abs();\n    if(dot(s.p1-s.p2,p-s.p2)<0.0) return (p-s.p2).abs();\n    return getDistanceLP(s,p);\n}\n\n//判断p2与向量p1-p0的位置关系\n\nconst int COUNTER_CLOCKWISE = -1;   //逆时针\nconst int CLOCKWISE = 1;            //顺时针\nconst int ON_SEGMENT = 0;           //在线段上\n\nint ccw(Point p0,Point p1,Point p2){\n    Vector a=p1-p0;\n    Vector b=p2-p0;\n    if(cross(a,b)>EPS) return COUNTER_CLOCKWISE;\n    if(cross(a,b)<EPS) return CLOCKWISE;\n    return ON_SEGMENT;\n}\n\n//判断线段p1p2与线段p3p4是否相交\nbool intersect(Point p1,Point p2,Point p3,Point p4){\n    return ( ccw(p1,p2,p3)*ccw(p1,p2,p4)<=0 &&\n             ccw(p3,p4,p1)*ccw(p3,p4,p2)<=0 );\n}\n\nbool intersect(Segment s1,Segment s2){\n    return intersect(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n\n//线段与线段的距离\ndouble getDistance(Segment s1,Segment s2){\n    if(intersect(s1,s2)) return 0.0;\n    return min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),\n               min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n}\n\n/* 直线正交\n * 判断向量a，b是否正交 =》a，b的内积为0\n */\nbool isOrthogonal(Vector a,Vector b){\n    return equals(dot(a,b),0.0);\n}\n\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n    return isOrthogonal(a1-a2,b1-b2);\n}\n\n/* 直线平行\n * 判断向量a，b是否平行 =》a，b的内积为0\n */\nbool isParallel(Vector a,Vector b){\n    return equals(cross(a,b),0.0);\n}\n\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n    return isParallel(a1-a2,b1-b2);\n}\n\nstruct Circle{\n    Point c;\n    double r;\n    Circle(Point c = Point() ,double r = 0.0 ):c(c),r(r){}\n};\n\n/*   多边形  */\ntypedef vector<Point> Polygon;\n\nint main(void) {\n    int q;cin>>q;\n    while(q) {\n        Segment s1,s2;\n        cin>>s1.p1.x>>s1.p1.y>>s1.p2.x>>s1.p2.y>>s2.p1.x>>s2.p1.y>>s2.p2.x>>s2.p2.y;\n        printf(\"%.10f\\n\",getDistance(s1,s2));\n        q--;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<climits>\n#include<iomanip>\n#include<cstdio>\n#include<vector>\n#include<queue>\n#include<stack>\n#include<cmath>\n#include<list>\n#include<map>\n#include<set>\nusing namespace std;\n\ntypedef vector<int> VI;\ntypedef vector<VI> VVI;\ntypedef vector<string> VS;\ntypedef stack<int> SI;\ntypedef queue<int> QI;\ntypedef list<int> LI;\ntypedef pair<int,int> PII;\ntypedef long long LL;\n\n#define d(x)  cout<<#x<<\" = \"<<(x)<<endl;\n#define ALL(a)  (a).begin(),(a).end()\n#define RALL(a) (a).rbegin(), (a).rend()\n#define PB push_back\n#define MP make_pair\n#define EMP empty()\n#define SZ(a) int((a).size())\n#define EACH(i,c) for(typeof((c).begin()) i=(c).begin(); i!=(c).end(); ++i)\n#define REACH(i,c) for(typeof((c).rbegin()) i=(c).rbegin(); i!=(c).rend(); ++i)\n#define EXIST(s,e) ((s).find(e)!=(s).end())\n#define SORT(c,n) sort(c,c+n)\n#define VSORT(c) sort((c).begin(),(c).end())\n#define FOR(i,a,b) for(int i=(a);i<(b);++i)\n#define REP(i,n)  FOR(i,0,n)\n#define DFOR(i,b,a) for(int i=(b)-1;i>=(a);--i)\n#define DREP(i,n) DFOR(i,n,0)\n#define INF 1000000000\n\nconst double EPS = 1e-10;\nconst double PI  = acos(-1.0);\n////////////////////////////////////////////////\nstruct vtr{double x;double y;};\n\n\ndouble absvtr(vtr a)\n{\n\treturn sqrt(a.x*a.x+a.y*a.y);\n}\ndouble dotp(vtr a,vtr b)\n{\n\treturn a.x*b.x+a.y*b.y;\n}\ndouble abscrossp(vtr a,vtr b)\n{\n\treturn abs(a.x*b.y-a.y*b.x);\n}\nvtr plusvtr(vtr a,vtr b)\n{\n\tvtr c;\n\tc.x=a.x+b.x;\n\tc.y=a.y+b.y;\n\treturn c;\n}\nvtr minusvtr(vtr a,vtr b)\n{\n\tvtr c;\n\tc.x=a.x-b.x;\n\tc.y=a.y-b.y;\n\treturn c;\n}\n\nint main()\n{\n\tint n;cin>>n;\n\tvtr p[4];\n\tcout<<fixed<<setprecision(10);\n\tREP(i,n)\n\t{\n\t\tREP(j,4)cin>>p[j].x>>p[j].y;\n\t\tdouble a,b,c,d;\n\t\tif(dotp(minusvtr(p[1],p[0]),minusvtr(p[2],p[0]))>0&&dotp(minusvtr(p[0],p[1]),minusvtr(p[2],p[1]))>0)\n\t\t{\n\t\t\ta=abscrossp(minusvtr(p[1],p[0]),minusvtr(p[2],p[0]))/absvtr(minusvtr(p[1],p[0]));\n\t\t}\n\t\telse\n\t\t{\n\t\t\ta=min(absvtr(minusvtr(p[2],p[0])),absvtr(minusvtr(p[2],p[1])));\n\t\t}\n\t\t\n\t\tif(dotp(minusvtr(p[1],p[0]),minusvtr(p[3],p[0]))>0&&dotp(minusvtr(p[0],p[1]),minusvtr(p[3],p[1]))>0)\n\t\t{\n\t\t\tb=abscrossp(minusvtr(p[1],p[0]),minusvtr(p[3],p[0]))/absvtr(minusvtr(p[1],p[0]));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tb=min(absvtr(minusvtr(p[3],p[0])),absvtr(minusvtr(p[3],p[1])));\n\t\t}\n\t\t\n\t\tif(dotp(minusvtr(p[3],p[2]),minusvtr(p[0],p[2]))>0&&dotp(minusvtr(p[2],p[3]),minusvtr(p[0],p[3]))>0)\n\t\t{\n\t\t\tc=abscrossp(minusvtr(p[3],p[2]),minusvtr(p[0],p[2]))/absvtr(minusvtr(p[3],p[2]));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc=min(absvtr(minusvtr(p[0],p[2])),absvtr(minusvtr(p[0],p[3])));\n\t\t}\n\t\t\n\t\tif(dotp(minusvtr(p[3],p[2]),minusvtr(p[1],p[2]))>0&&dotp(minusvtr(p[2],p[3]),minusvtr(p[1],p[3]))>0)\n\t\t{\n\t\t\td=abscrossp(minusvtr(p[3],p[2]),minusvtr(p[1],p[2]))/absvtr(minusvtr(p[3],p[2]));\n\t\t}\n\t\telse\n\t\t{\n\t\t\td=min(absvtr(minusvtr(p[1],p[2])),absvtr(minusvtr(p[1],p[3])));\n\t\t}\n\t\tcout<<min(min(a,b),min(c,d))<<endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "/*\n\tGeometry Template\n\tdouble !!!\n\tTODO: test everything!!!\n*/\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst double INF = 1e17;\nconst double EPS = 1e-9;\nconst double PI = 2.0 * asin(1);\n\ninline bool is_in(double a, double b, double x) {\n\tif (a > b) {\n\t\tswap(a, b);\n\t}\n\treturn (a - EPS <= x && x <= b + EPS);\n}\n\nstruct point {\n\tdouble x, y;\n\tpoint() {}\n\tpoint(double _x, double _y) : x(_x), y(_y) {}\n};\n\nbool operator < (const point &P, const point &Q) {\n\tif (abs(P.y - Q.y) > EPS) {\n\t\treturn P.y < Q.y;\n\t}\n\tif (abs(P.x - Q.x) > EPS) {\n\t\treturn P.x < Q.x;\n\t}\n\treturn false;\n}\n\nstruct compare_by_x {\n\tbool operator () (const point &P, const point &Q) {\n\t\tif (abs(P.x - Q.x) > EPS) {\n\t\t\treturn P.x < Q.x;\n\t\t}\n\t\treturn P.y < Q.y;\n\t}\n};\n\nstruct compare_by_y {\n\tbool operator () (const point &P, const point &Q) {\n\t\tif (abs(P.y - Q.y) > EPS) {\n\t\t\treturn P.y < Q.y;\n\t\t}\n\t\treturn P.x < Q.x;\n\t}\n};\ninline void read(point &P) {\n\tcin >> P.x >> P.y;\n}\n\npoint operator + (const point &P, const point &Q) {\n\treturn point(P.x + Q.x, P.y + Q.y);\n}\n\npoint operator - (const point &P, const point &Q) {\n\treturn point(P.x - Q.x, P.y - Q.y);\n}\n\npoint operator * (const point &P, const double k) {\n\treturn point(P.x * k, P.y * k);\n}\n\npoint operator / (const point &P, const double k) {\n\tassert(fabs(k) > EPS);\n\treturn point(P.x / k, P.y / k);\n}\n\ninline double dot(const point &P, const point &Q) {\n\treturn P.x * Q.x + P.y * Q.y;\n}\n\ninline double cross(const point &P, const point &Q) {\n\treturn P.x * Q.y - P.y * Q.x;\n}\n\ninline double norm2(const point &P) {\n\treturn dot(P, P);\n}\n\ninline double norm(const point &P) {\n\treturn sqrt(dot(P, P));\n}\n\ninline double dist2(const point &P, const point &Q) {\n\treturn norm2(P - Q);\n}\n\ninline double dist(const point &P, const point &Q) {\n\treturn sqrt(dot(P - Q, P - Q));\n}\n\n// returns true if P belongs in segment AB\ninline bool is_in(point A, point B, point P) {\n\tif (abs(cross(B - A, P - A)) > EPS) {\n\t\treturn false;\n\t}\n\treturn (is_in(A.x, B.x, P.x) && is_in(A.y, B.y, P.y));\n}\n\n\ninline point project(const point &P, const point &P1, const point &P2) {\n\treturn P1 + (P2 - P1) * (dot(P2 - P1, P - P1) / norm2(P2 - P1));\n}\n\ninline point reflect(const point &P, const point &P1, const point &P2) {\n\treturn project(P, P1, P2) * 2.0 - P;\n}\n\ninline double point_to_line(const point &P, const point &A, const point &B) {\n\t// return abs(cross(B - A, C - A) / norm(B - A));\n\treturn dist(P, project(P, A, B));\n}\n\ninline double point_to_segment(const point &P, const point &A, const point &B) {\n\tpoint PP = project(P, A, B);\n\tif (is_in(A, B, PP)) {\n\t\treturn dist(P, PP);\n\t}\n\treturn min(dist(P, A), dist(P, B));\n}\n\n// line to line intersection\n// A, B difine the first line\n// C, D define the second line\ninline point intersect(const point &A, const point &B, const point &C, const point &D) {\n\treturn A + (B - A) * (cross(C - A, C - D) / cross(B - A, C - D));\n}\n\ninline double segment_to_segment(const point &A, const point &B, const point &C, const point &D) {\n\tpoint I = intersect(A, B, C, D);\n\tif (is_in(A, B, I) && is_in(C, D, I)) {\n\t\treturn 0.0;\n\t}\n\treturn min(min(point_to_segment(A, C, D), point_to_segment(B, C, D)),\n\t\t\t\t\t\t min(point_to_segment(C, A, B), point_to_segment(D, A, B)));\n}\n\nint main() {\n\tios::sync_with_stdio(false);\n\tcin.tie(0);\n\tcout.precision(10);\n\n\tint q;\n\tcin >> q;\n\n\twhile (q--) {\n\t\tpoint A, B, C, D;\n\t\tcin >> A.x >> A.y >> B.x >> B.y >> C.x >> C.y >> D.x >> D.y;\n\t\tdouble answer = segment_to_segment(A, B, C, D);\n\t\tcout << fixed << answer << \"\\n\";\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#define EPS 1e-10\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n#include <cstdio>\n#include <cmath>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\n// definition of turning\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nclass Point\n{\npublic:\n  double x, y;\n  Point (double x = 0, double y = 0) : x(x), y(y) {}\n  Point operator + (Point p) {return Point(x + p.x, y + p.y); }\n  Point operator - (Point p) {return Point(x - p.x, y - p.y); }\n  Point operator * (double a) {return Point(a * x, a * y); }\n  Point operator / (double a) {return Point(x / a, y / a); }\n\n  double norm() { return x * x + y * y; }\n  double abs() { return sqrt(norm()); }\n\n  bool operator < (const Point &p) const\n  {\n    return x != p.x ? x < p.x : y < p.y;\n  }\n\n  bool operator == (const Point &p) const\n  {\n    return equals(x, p.x) && equals(y, p.y);\n  }\n};\n\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\nstruct Segment\n{\n  Point p1, p2;\n  Segment() {}\n  Segment(Point p1, Point p2) : p1(p1), p2(p2) {}\n  Segment(double x1, double y1, double x2, double y2)\n  {\n    p1 = Point(x1, y1);\n    p2 = Point(x2, y2);\n  }\n};\n\ntypedef Segment Line;\n\nclass Circle\n{\npublic:\n  Point c;\n  double r;\n  Circle(Point c = Point(), double r = 0.0) : c(c), r(r) {}\n};\n\n\n// dot and cross product\ndouble dot(Vector a, Vector b)\n{\n  return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b)\n{\n  return a.x * b.y - a.y * b.x;\n}\n\n// orthogonality\nbool isOrthagonal(Vector a, Vector b)\n{\n  return equals(dot(a, b), 0.0);\n}\n\nbool isOrthagonal(Point a1, Point a2, Point b1, Point b2)\n{\n  return isOrthagonal(a1 - a2, b1 - b2);\n}\n\nbool isOrthagonal(Segment s1, Segment s2)\n{\n  return isOrthagonal(s1.p1 - s1.p2, s2.p1 - s2.p2);\n}\n\n// parallelism\nbool isParallel(Vector a, Vector b)\n{\n  return equals(cross(a, b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2)\n{\n  return isParallel(a1 - a2, b1 - b2);\n}\n\nbool isParallel(Segment s1, Segment s2)\n{\n  return isParallel(s1.p1 - s1.p2, s2.p1 - s2.p2);\n}\n\n// projection & reflection\nPoint project(Segment s, Point p)\n{\n  Vector base = s.p2 - s.p1;\n  double r = dot(p - s.p1, base) / base.norm();\n  return s.p1 + base * r;\n}\n\nPoint reflect(Segment s, Point p)\n{\n  return p + (project(s, p) - p) * 2.0;\n}\n\n// distance\ndouble getDistance(Point a, Point b)\n{\n  return (a - b).abs();\n}\n\ndouble getDistanceLP(Line l, Point p)\n{\n  return abs(cross(l.p1 - l.p2, p - l.p1)) / (l.p2 - l.p1).abs();\n}\n\ndouble getDistanceSP(Segment s, Point p)\n{\n  if (dot(p - s.p1, s.p2 - s.p1) < 0) return getDistance(p, s.p1);\n  if (dot(p - s.p2, s.p1 - s.p2) < 0) return getDistance(p, s.p2);\n  return getDistanceLP(s, p);\n}\n\nbool intersect(Point p1, Point p2, Point p3, Point p4);\nbool intersect(Segment s1, Segment s2);\ndouble getDistanceSS(Segment s1, Segment s2)\n{\n  if (intersect(s1, s2)) return 0.0;\n  return min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)), \\\n            min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\n//ccw\nint ccw(Point p0, Point p1, Point p2)\n{\n  Vector a = p1 - p0;\n  Vector b = p2 - p0;\n  if (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n  if (cross(a, b) < -EPS) return CLOCKWISE;\n  if (dot(a, b) < -EPS) return ONLINE_BACK;\n  if (a.norm() < b.norm()) return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\n\n// intersection\nbool intersect(Point p1, Point p2, Point p3, Point p4)\n{\n  return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 && \\\n          ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\n\nbool intersect(Segment s1, Segment s2)\n{\n  return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\nint main()\n{\n  int T;\n  scanf(\"%d\", &T);\n  Segment s1, s2;\n  while (T--)\n  {\n    scanf(\"%lf%lf%lf%lf%lf%lf%lf%lf\", \\\n      &s1.p1.x, &s1.p1.y, &s1.p2.x, &s1.p2.y, &s2.p1.x, &s2.p1.y, &s2.p2.x, &s2.p2.y);\n    printf(\"%.8lf\\n\", getDistanceSS(s1, s2));\n  }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\n#include<iomanip>\n#include<cmath>\n#include<algorithm>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nstruct Point;\ntypedef Point Vector;\nstruct Segment;\ntypedef Segment Line;\ndouble norm(Point a);\ndouble abs(Point a);\ndouble dot(Vector a, Vector b);\ndouble cross(Vector a, Vector b);\ndouble getDistance(Point a, Point b);\ndouble getDistanceLP(Line l, Point p);\ndouble getDistanceSP(Segment s, Point p);\ndouble getDistance(Segment s1, Segment s2);\nbool isOrthogonal(Vector a, Vector b);\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2);\nbool isOrthogonal(Segment s1, Segment s2);\nbool isParallel(Vector a, Vector b);\nbool isParallel(Point a1, Point a2, Point b1, Point b2);\nbool isParallel(Segment s1, Segment s2);\nint ccw(Point p0, Point p1, Point p2);\nbool intersect(Point p1, Point p2, Point p3, Point p4);\nbool intersect(Segment s1, Segment s2);\nPoint project(Segment s, Point p);\nPoint reflect(Segment s, Point p);\n\nstruct Point{\n    double x, y;\n\n    Point(double x = 0, double y = 0) : x(x), y(y) {}\n\n    Point operator + (Point p){ return Point(x+p.x, y+p.y); }\n    Point operator - (Point p){ return Point(x-p.x, y-p.y); }\n    Point operator * (double a){ return Point(a*x, a*y); }\n    Point operator / (double a){ return Point(x/a, y/a); }\n\n    double abs() { return sqrt(norm()); }\n    double norm() { return x*x + y*y; }\n\n    bool operator < (const Point &p) const{\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point &p) const{\n        return fabs(x-p.x) < EPS && fabs(y-p.y) < EPS;\n    }\n};\n\ntypedef Point Vector;\n\n\nstruct Segment{\n    Point p1, p2;\n    Segment(Point p1, Point p2) : p1(p1), p2(p2) {}\n};\n\ntypedef Segment Line;\n\n\ndouble norm(Point a){\n    return a.x * a.x + a.y * a.y;\n}\n\ndouble abs(Point a){\n    return sqrt(norm(a));\n}\n\ndouble dot(Vector a, Vector b){\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b){\n    return a.x * b.y - a.y * b.x;\n}\n\ndouble getDistance(Point a, Point b){\n    return abs(a - b);\n}\n\ndouble getDistanceLP(Line l, Point p){\n    return abs(cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1));\n}\n\ndouble getDistanceSP(Segment s, Point p){\n    if(dot(s.p2-s.p1, p-s.p1) < 0.0)    return abs(p-s.p1);\n    if(dot(s.p1-s.p2, p-s.p2) < 0.0)    return abs(p-s.p2);\n    return getDistanceLP(s, p);\n}\n\ndouble getDistance(Segment s1, Segment s2){\n    if(intersect(s1, s2))   return 0.0;\n    return min({getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2), \n                getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)});\n}\n\n\nbool isOrthogonal(Vector a, Vector b){\n    return equals(dot(a, b), 0.0);\n}\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2){\n    return isOrthogonal(a1-a2, b1-b2);\n}\nbool isOrthogonal(Segment s1, Segment s2){\n    return equals(dot(s1.p2-s1.p1, s2.p2-s2.p1), 0.0);\n}\nbool isParallel(Vector a, Vector b){\n    return equals(cross(a, b), 0.0);\n}\nbool isParallel(Point a1, Point a2, Point b1, Point b2){\n    return isParallel(a1-a2, b1-b2);\n}\nbool isParallel(Segment s1, Segment s2){\n    return equals(cross(s1.p2-s1.p1, s2.p2-s2.p1), 0.0);\n}\n\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;   // p2->p0->p1\nstatic const int ONLINE_FRONT = -2; // p0->p1->p2\nstatic const int ON_SEGMENT = 0;    // p0->p2->p1\n\nint ccw(Point p0, Point p1, Point p2){\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if(cross(a, b) > EPS)   return COUNTER_CLOCKWISE;\n    if(cross(a, b) < -EPS)  return CLOCKWISE;\n    if(dot(a, b) < -EPS)    return ONLINE_BACK;\n    if(norm(a) < norm(b))   return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\nbool intersect(Point p1, Point p2, Point p3, Point p4){\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n            ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\nbool intersect(Segment s1, Segment s2){\n    return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\nPoint project(Segment s, Point p){\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / norm(base);\n    return s.p1 + base * r;\n}\n\nPoint reflect(Segment s, Point p){\n    return p + (project(s, p) - p) * 2.0;\n}\n\n\n\nint main(){\n    int q;\n    cin >> q;\n\n    while(q-- > 0){\n        double x[8];\n        for(int i = 0; i < 8; i++)  cin >> x[i];\n        cout << fixed << setprecision(12) << \n            getDistance(Segment(Point(x[0],x[1]), Point(x[2],x[3])), \n                        Segment(Point(x[4],x[5]), Point(x[6],x[7]))) \n        << endl;\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\n#include <vector>\n\nusing namespace std;\n\n// 2次元ベクトルクラス\nclass Vector {\npublic:\n    float x, y;\n    \n    // コンストラクタ\n    Vector() {\n        x = 0.f;\n        y = 0.f;\n    }\n    \n    // コンストラクタ(引数あり)\n    Vector(float nx, float ny) {\n        x = nx;\n        y = ny;\n    }\n    \n    // x,y成分を設定する\n    void set(float nx, float ny) {\n        x = nx;\n        y = ny;\n    }\n    \n    // 内積を求める\n    float dot(const Vector& vec) const {\n        return x * vec.x + y * vec.y;\n    }\n    \n    // 外積を求める\n    float cross(const Vector& vec) const {\n        return x * vec.y - y * vec.x;\n    }\n    \n    // 余弦を求める\n    float getCos(const Vector& vec) const {\n        float nor = norm() * vec.norm();\n        if (nor == 0.f) {\n            return 0.f;\n        } else {\n            return dot(vec) / nor;\n        }\n    }\n    \n    // ベクトルの大きさを求める\n    float norm() const {\n        return sqrt(x * x + y * y);\n    }\n    \n    // 単位ベクトルを返す\n    Vector getUnit() const {\n        Vector v;\n        float n = norm();\n        if (n == 0.f) {\n            v.set(0.f, 0.f);\n        } else {\n            v.set(x / n, y / n);\n        }\n        return v;\n    }\n    \n    void operator = (const Vector& vec) {\n        x = vec.x;\n        y = vec.y;\n    }\n    \n    Vector operator + (const Vector& vec) const {\n        Vector v(x + vec.x, y + vec.y);\n        return v;\n    }\n    \n    Vector operator - (const Vector& vec) const {\n        Vector v(x - vec.x, y - vec.y);\n        return v;\n    }\n    \n    Vector operator * (const Vector& vec) const {\n        Vector v(x * vec.x, y * vec.y);\n        return v;\n    }\n    \n    Vector operator * (float f) const {\n        Vector v(x * f, y * f);\n        return v;\n    }\n    \n    Vector operator / (const Vector& vec) const {\n        Vector v;\n        if (vec.x == 0.f) {\n            v.x = 0.f;\n        } else {\n            v.x = x / vec.x;\n        }\n        \n        if (vec.y == 0.f) {\n            v.y = 0.f;\n        } else {\n            v.y = y / vec.y;\n        }\n        return v;\n    }\n    \n    Vector operator / (float f) const {\n        Vector v;\n        if (f == 0.f) {\n            v.set(0.f, 0.f);\n        } else {\n            v.set(x / f, y / f);\n        }\n        return v;\n    }\n    \n    void operator += (const Vector& vec) {\n        x += vec.x;\n        y += vec.y;\n    }\n    \n    void operator -= (const Vector& vec) {\n        x -= vec.x;\n        y -= vec.y;\n    }\n    \n    void operator *= (const Vector& vec) {\n        x *= vec.x;\n        y *= vec.y;\n    }\n    \n    void operator /= (const Vector& vec) {\n        if (vec.x == 0.f) {\n            x = 0.f;\n        } else {\n            x /= vec.x;\n        }\n        \n        if (vec.y == 0.f) {\n            y = 0.f;\n        } else {\n            y /= vec.y;\n        }\n    }\n    \n    bool operator == (const Vector& vec) const {\n        if (x == vec.x && y == vec.y) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n};\n\n// ベクトル1をベクトル2に正射影したベクトルを求める\nstatic Vector getProjection(const Vector& vec1, const Vector& vec2) {\n    Vector vec(vec2.getUnit() * vec1.norm() * vec1.getCos(vec2));\n    return vec;\n}\n\n\nclass LineSegment {\nprivate:\n    Vector start; // 始点\n    Vector end; // 終点\n    \npublic:\n    //コンストラクタ\n    LineSegment () {}\n    \n    // 始点と終点を設定する\n    void setStartEnd(float sx, float sy, float ex, float ey) {\n        start.set(sx, sy);\n        end.set(ex, ey);\n    }\n    \n    // 始点を取得する\n    Vector getStart() const {\n        return start;\n    }\n    \n    //　終点を取得する\n    Vector getEnd() const {\n        return end;\n    }\n    \n    // 指定の線分を含むか\n    // このメソッドは線分同士が平行の時しか使用しない\n    bool isInLine(const LineSegment& l) const {\n        bool b1 = isPointInLine(l.getStart());\n        bool b2 = isPointInLine(l.getEnd());\n        if (b1 || b2) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    \n    // 指定の点を線分の中に含むか\n    bool isPointInLine(const Vector& p) const {\n        if (start == p) {\n            return true;\n        }\n        \n        Vector l1 = end - start;\n        Vector l2 = p - start;\n        Vector u1 = l1.getUnit();\n        Vector u2 = l2.getUnit();\n\n        if (u1 == u2 && l2.norm() <= l1.norm()) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    \n    // 指定の線分と交差しているか\n    // @return 0(交差していない), 1(交差している)\n    int isCross(const LineSegment& l) const {\n        Vector l1 = end - start;\n        float c1 = l1.cross(l.getStart() - start);\n        float c2 = l1.cross(l.getEnd() - start);\n        \n        Vector l2 = l.getEnd() - l.getStart();\n        float c3 = l2.cross(start - l.getStart());\n        float c4 = l2.cross(end - l.getStart());\n        \n        if (c1 * c2 == 0.f && c3 * c4 == 0.f) { // 平行のとき\n            LineSegment ls;\n            ls.setStartEnd(start.x, start.y, end.x, end.y);\n            if (isInLine(l) || l.isInLine(ls)) {\n                return 1;\n            }\n            return 0;\n        } else if ((c1 * c2 < 0.f && c3 * c4 <= 0.f)\n                   || (c1 * c2 <= 0.f && c3 * c4 < 0.f)\n                   || (c1 * c2 < 0.f && c3 * c4 < 0.f)) { // 交差するとき\n            return 1;\n        } else { // 交差しないとき\n            return 0;\n        }\n    }\n    \n    // 任意の点が線分の始点より外にあるか\n    bool isOutOfStart(const Vector& vec) const {\n        Vector p = end - start;\n        Vector q = vec - start;\n        float d = p.dot(q);\n        if (d < 0) { // 内積が負のとき\n            return true;\n        }\n        return false;\n    }\n    \n    // 任意の線分との距離を求める\n    float getDistance(const LineSegment& l) const {\n        if (isCross(l)) { // 交差しているとき\n            return 0.f;\n        }\n        float dis1 = getDistance(l.getStart());\n        float dis2 = getDistance(l.getEnd());\n        LineSegment ls;\n        ls.setStartEnd(start.x, start.y, end.x, end.y);\n        float dis3 = l.getDistance(ls.getStart());\n        float dis4 = l.getDistance(ls.getEnd());\n        float min1 = min(dis1, dis2);\n        float min2 = min(dis3, dis4);\n        return min(min1, min2);\n    }\n    \n    // 任意の点との距離を求める\n    float getDistance(const Vector& vec) const {\n        if (isPointInLine(vec)) { // 線分内に点を含むとき\n            return 0.f;\n        }\n        if (!isOutOfStart(vec)) { // 線分の始点より内側に点があるとき\n            Vector p = end - start;\n            Vector q = vec - start;\n            Vector proj = getProjection(q, p);\n            if (p.norm() > proj.norm()) { // 正射影したベクトルが線分より短いとき\n                return (q - proj).norm();\n            } else { // 正射影したベクトルが線分と等しいか、長いとき\n                return (vec - end).norm();\n            }\n        } else { // 線分の始点より外にあるとき\n            return (vec - start).norm();\n        }\n    }\n};\n\nint main() {\n    int n;\n    cin >> n;\n    \n    LineSegment l1, l2;\n    vector<float> result;\n    for (int i = 0; i < n; i++) {\n        float sx1, sy1, ex1, ey1, sx2, sy2, ex2, ey2;\n        cin >> sx1 >> sy1 >> ex1 >> ey1 >> sx2 >> sy2 >> ex2 >> ey2;\n        l1.setStartEnd(sx1, sy1, ex1, ey1);\n        l2.setStartEnd(sx2, sy2, ex2, ey2);\n        result.push_back(l1.getDistance(l2));\n    }\n    \n    for (int i = 0; i < result.size(); i++) {\n        cout << result[i] << endl;\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <utility>\n#include <cctype>\n#include <algorithm>\n#include <complex>\nusing namespace std;\n\n#ifdef __linux\n#define _U(s) s##_unlocked\n#else\n#define _U(s) _##s##_nolock\n#define _CRT_DISABLE_PERFCRIT_LOCKS\n#endif\n#define gcu _U(getchar)\n#define pcu _U(putchar)\n#define _DEF(r, n, ...) inline r n(__VA_ARGS__) noexcept\n#define _T template <typename T>\n#define _HT template <typename H,typename... T>\n#define _OP(t) inline operator t()\nstruct _in {\n#ifdef _GLIBCXX_STRING\n\t_OP(string){string s;char c;while(isspace(c = gcu()));do{s+=c;}while(c=gcu(),c!=' '&&c!='\\n'&&c!=EOF);return s;}\n#define _S\n#endif\n\t_OP(char){char c=gcu();gcu();return c;}\n\t_OP(double){double d; scanf(\"%lf\",&d); gcu();return d;}\n\t_T _OP(T){T n{},m{1},c;while(isspace(c = gcu()));if(c=='-')m=-1,c=gcu();do{n=10*n+(c-'0'),c=gcu();}while(c>='0'&&c<='9');return m*n;}\n} in;\n#define _SCAN(...) _DEF(bool,scan,__VA_ARGS__)\n#ifdef _S\n_SCAN(string &o) {int c{gcu()};if(c==EOF)return false;else{ungetc(c,stdin);string t=move(in);o=t;return true;}}\n#endif\n_T _SCAN(T &o) {int c{gcu()};return c==EOF?false:(ungetc(c,stdin),o=in,true);}\n_HT _SCAN(H &h,T&&... t){return scan(h)&&scan(t...);}\n#define _OUT(...) _DEF(void,out,__VA_ARGS__)\n#define _OUTL(...) _DEF(void,outl,__VA_ARGS__)\n_OUT(bool b){pcu('0'+b);}\n_OUT(const char *s){while(*s)pcu(*s++);}\n_OUT(char c){pcu(c);}\n#ifdef _S\n_OUT(string &s){for(char c:s)pcu(c);}\n#endif\n_T _OUT(T n){static char b[20];char *p=b;T m=n<0?pcu('-'),-1:1;\n\tif(!n)*p++='0';else while(n)*p++=(char)(n%10*m+'0'),n/=10;while(p!=b)pcu(*--p);}\n_OUTL(){out('\\n');}\n#ifdef _GLIBCXX_VECTOR\n\t_T _OUT(vector<T> &v){for(T &x:v)out(&x == &v[0]?\"\":\" \"),out(x);}\n#endif\n\t_HT _OUT(H &&h, T... t){out(h);out(t...);}\n\ttemplate <typename... T> _OUTL(T... t){out(t...);outl();}\n\tstruct range{\n\t\tint e,b=0,s=1;range(int _b,int _e,int _s):e(_e),b(_b),s(_s){} range(int _b,int _e): e(_e), b(_b){} range(int _e):e(_e){}\n\t\tstruct it{int v,s; it(int _v,int _s):v(_v),s(_s){} operator int()const{return v;} operator int&(){return v;}int operator*()const{return v;}\n\t\t\tit& operator++(){v+=s;return *this;} }; it begin(){return {b,s};} it end(){return {e,s};}};\n#define times(i,n) for(int i=n;i;i--)\n\nusing P = complex<double>;\n\nP read() {\n\tint x {in}, y {in};\n\treturn P(x, y);\n}\n\nvoid outl(P a) {\n\tprintf(\"(%f, %f)\\n\", real(a), imag(a));\n}\n\nvoid outl(double a) {\n\tprintf(\"%.10f\\n\", a);\n}\n\ndouble dot(P a, P b) {\n\treturn real(a * conj(b));\n}\ndouble cross(P a, P b) {\n\treturn imag(a * conj(b));\n}\n\nint ccw(P a, P b, P c) {\n\tb -= a; c -= a, a = b * conj(c);\n\treturn imag(a) > 0 ? 1 : imag(a) < 0 ? -1 : real(a) < 0 ? 2 : norm(b) < norm(c) ? -2 : 0;\n}\n\nbool intersection(P &p0, P &p1, P &p2, P &p3) {\n\treturn (ccw(p1, p0, p2) * ccw(p1, p0, p3) <= 0) && (ccw(p3, p2, p0) * ccw(p3, p2, p1) <= 0);\n}\n\ndouble distance(P a, P b, P p) {\n\tif (dot(b - a, p - a) < 0)\n\t\treturn abs(p - a);\n\telse if (dot(a - b, p - b) < 0)\n\t\treturn abs(p - b);\n\telse\n\t\treturn abs(cross(b - a, p - a) / abs(b - a));\n}\n\ndouble distance(P a, P b, P c, P d) {\n\tif (intersection(a, b, c, d))\n\t\treturn 0.;\n\telse\n\t\treturn min(min(distance(a, b, c), distance(a, b, d)),\n\t\t\t\t   min(distance(c, d, a), distance(c, d, b)));\n}\n\nint main() {\n\ttimes (q, in) {\n\t\tP p0 {read()}, p1 {read()}, p2 {read()}, p3 {read()};\n\t\toutl(distance(p0, p1, p2, p3));\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n#define rep(i,n) for (int i=0; i < (n); i++)\ntypedef double D;      // ??§?¨?????????????double???long double?????????\ntypedef complex<D> P;  // Point\ntypedef pair<P, P> L;  // Line\ntypedef vector<P> VP;\nconst D EPS = 1e-9;    // ?¨±??????????????????????????£????????????\n#define X real()\n#define Y imag()\n#define LE(n,m) ((n) < (m) + EPS)\n#define GE(n,m) ((n) + EPS > (m))\n#define EQ(n,m) (abs((n)-(m)) < EPS)\n \n// ?????????dot(a,b) = |a||b|cos??\nD dot(P a, P b) {return (conj(a)*b).X; }\n \n// ?????????cross(a,b) = |a||b|sin??\nD cross(P a, P b) {  return (conj(a)*b).Y;}\n \n// ??????????????????\nint ccw(P a, P b, P c) {\n  b -= a;  c -= a;\n  if (cross(b,c) >  EPS) return +1;  // counter clockwise\n  if (cross(b,c) < -EPS) return -1;  // clockwise\n  if (dot(b,c)   < -EPS) return +2;  // c--a--b on line\n  if (norm(b) < norm(c)) return -2;  // a--b--c on line or a==b\n  return 0;                          // a--c--b on line or a==c or b==c\n}\n\nbool isparallel(L a,L b){\n  return cross(a.first-a.second,b.first-b.second) == 0.0 ;\n}\n \n/* ?????????????????´???????????????????????????????????????????????\\????????´????????????????????¨????????????isec???intersect?????\\ */\n \n// ??´?????¨???\nbool isecLP(P a1, P a2, P b) {\n  return abs(ccw(a1, a2, b)) != 1;  // return EQ(cross(a2-a1, b-a1), 0); ??¨??????\n}\n \n// ??´?????¨??´???\nbool isecLL(P a1, P a2, P b1, P b2) {\n  return !isecLP(a2-a1, b2-b1, 0) || isecLP(a1, b1, b2);\n}\n \n// ??´?????¨??????\nbool isecLS(P a1, P a2, P b1, P b2) {\n  return cross(a2-a1, b1-a1) * cross(a2-a1, b2-a1) < EPS;\n}\n \n// ????????¨??????\nbool isecSS(P a1, P a2, P b1, P b2) {\n  return ccw(a1, a2, b1)*ccw(a1, a2, b2) <= 0 &&\n         ccw(b1, b2, a1)*ccw(b1, b2, a2) <= 0;\n}\n \n// ????????¨???\nbool isecSP(P a1, P a2, P b) {\n  //return !ccw(a1, a2, b);\n   return abs(a1 - b) + abs(a2 - b) - abs(a2 - a1) < EPS;  //Perfective\n}\n \n \n/* ?????¢????????´?????????????????????????????????????????? */\n \n// ???p?????´???a???????°???±????????????\nP proj(P a1, P a2, P p) {\n  return a1 + dot(a2-a1, p-a1)/norm(a2-a1) * (a2-a1);\n}\n \n// ???p?????´???a??????????°?????????????\nP reflection(P a1, P a2, P p) {\n  return 2.0*proj(a1, a2, p) - p;\n}\n \nD distLP(P a1, P a2, P p) {\n  return abs(proj(a1, a2, p) - p);\n}\n \nD distLL(P a1, P a2, P b1, P b2) {\n  return isecLL(a1, a2, b1, b2) ? 0 : distLP(a1, a2, b1);\n}\n \nD distLS(P a1, P a2, P b1, P b2) {\n  return isecLS(a1, a2, b1, b2) ? 0 : min(distLP(a1, a2, b1), distLP(a1, a2, b2));\n}\n \nD distSP(P a1, P a2, P p) {\n  P r = proj(a1, a2, p);\n  if (isecSP(a1, a2, r)) return abs(r-p);\n  return min(abs(a1-p), abs(a2-p));\n}\n \nD distSS(P a1, P a2, P b1, P b2) {\n  if (isecSS(a1, a2, b1, b2)) return 0;\n  return min(min(distSP(a1, a2, b1), distSP(a1, a2, b2)),\n             min(distSP(b1, b2, a1), distSP(b1, b2, a2)));\n}\n \n// 2??´????????????\nP crosspointLL(P a1, P a2, P b1, P b2) {\n  D d1 = cross(b2-b1, b1-a1);\n  D d2 = cross(b2-b1, a2-a1);\n  if (EQ(d1, 0) && EQ(d2, 0)) return a1;  // same line\n  if (EQ(d2, 0)) throw \"kouten ga nai\";   // ???????????????\n  return a1 + d1/d2 * (a2-a1);\n}\n \n \n/* ??? */\n \nD distLC(P a1, P a2, P c, D r) {\n  return max(distLP(a1, a2, c) - r, 0.0);\n}\n \nD distSC(P a1, P a2, P c, D r) {\n  D dSqr1 = norm(c-a1), dSqr2 = norm(c-a2);\n  if (dSqr1 < r*r ^ dSqr2 < r*r) return 0;  // ?????????????????????????????¨????????¢0???????????????OR????????????\n  if (dSqr1 < r*r & dSqr2 < r*r) return r - sqrt(max(dSqr1, dSqr2));\n  return max(distSP(a1, a2, c) - r, 0.0);\n}\n \nVP crosspointLC(P a1, P a2, P c, D r) {\n  VP ps;\n  P ft = proj(a1, a2, c);\n  if (!GE(r*r, norm(ft-c))) return ps;\n \n  P dir = sqrt(max(r*r - norm(ft-c), 0.0)) / abs(a2-a1) * (a2-a1);\n  ps.push_back(ft + dir);\n  if (!EQ(r*r, norm(ft-c))) ps.push_back(ft - dir);\n  return ps;\n}\n \nD distCC(P a, D ar, P b, D br) {\n  D d = abs(a-b);\n  return GE(d, abs(ar-br)) ? max(d-ar-br, 0.0) : abs(ar-br) - d;\n}\n \n// 2????????????\nVP crosspointCC(P a, D ar, P b, D br) {\n  VP ps;\n  P ab = b-a;\n  D d = abs(ab);\n  D crL = (norm(ab) + ar*ar - br*br) / (2*d);\n  if (EQ(d, 0) || ar < abs(crL)) return ps;\n \n  P abN = ab * P(0, sqrt(ar*ar - crL*crL) / d);\n  P cp = a + crL/d * ab;\n  ps.push_back(cp + abN);\n  if (!EQ(norm(abN), 0)) ps.push_back(cp - abN);\n  return ps;\n}\n \n// ???p?????????a????????\\????????\\???\nVP tangentPoints(P a, D ar, P p) {\n  VP ps;\n  D sin = ar / abs(p-a);\n  if (!LE(sin, 1)) return ps;  // ????????§NaN???????????????\n  D t = M_PI_2 - asin(min(sin, 1.0));\n  ps.push_back(                 a + (p-a)*polar(sin, t));\n  if (!EQ(sin, 1)) ps.push_back(a + (p-a)*polar(sin, -t));\n  return ps;\n}\n \n// 2????????±?????\\???????????????????????´????????????????????????????????¨?????\\?????¨??????\nvector<L> tangentLines(P a, D ar, P b, D br) {\n  vector<L> ls;\n  D d = abs(b-a);\n  rep (i,2) {\n    D sin = (ar - (1-i*2)*br) / d;\n    if (!LE(sin*sin, 1)) break;\n    D cos = sqrt(max(1 - sin*sin, 0.0));\n    rep (j,2) {\n      P n = (b-a) * P(sin, (1-j*2)*cos) / d;\n      ls.push_back(L(a + ar*n, b + (1-i*2)*br*n));\n      if (cos < EPS) break;  // ??????????????\\?????????????????????????????????????????????????????????\n    }\n  }\n  return ls;\n}\n \n// ????§???¢???????????????a,b,c???????????????????????£??????????????????\nP circumcenter(P a, P b, P c) {\n  a = (a-c)*0.5;\n  b = (b-c)*0.5;\n  return c + crosspointLL(a, a*P(1,1), b, b*P(1,1));\n}\n \n// ???a??¨???b?????????????????????r????????????????????????\nVP circlesPointsRadius(P a, P b, D r) {\n  VP cs;\n  P abH = (b-a)*0.5;\n  D d = abs(abH);\n  if (d == 0 || d > r) return cs;  // ???????????? !LE(d,r) ??¨?????????1??????????????´????????????\n  D dN = sqrt(r*r - d*d);          // ???????????? max(r*r - d*d, 0) ??¨??????\n  P n = abH * P(0,1) * (dN / d);\n  cs.push_back(a + abH + n);\n  if (dN > 0) cs.push_back(a + abH - n);\n  return cs;\n}\n \n// ???a??¨???b??????????????´???l?????\\??????????????????\nVP circlesPointsTangent(P a, P b, P l1, P l2) {\n  P n = (l2-l1) * P(0,1);\n  P m = (b-a) * P(0,0.5);\n  D rC = dot((a+b)*0.5-l1, n);\n  D qa = norm(n)*norm(m) - dot(n,m)*dot(n,m);\n  D qb = -rC * dot(n,m);\n  D qc = norm(n)*norm(m) - rC*rC;\n  D qd = qb*qb - qa*qc;  // qa*k^2 + 2*qb*k + qc = 0\n \n  VP cs;\n  if (qd < -EPS) return cs;\n  if (EQ(qa, 0)) {\n    if (!EQ(qb, 0)) cs.push_back((a+b)*0.5 - m * (qc/qb/2));\n    return cs;\n  }\n  D t = -qb/qa;\n  cs.push_back(              (a+b)*0.5 + m * (t + sqrt(max(qd, 0.0))/qa));\n  if (qd > EPS) cs.push_back((a+b)*0.5 + m * (t - sqrt(max(qd, 0.0))/qa));\n  return cs;\n}\n \n// ??????????????????????°????????????????\nP minEnclosingCircle(const VP& ps) {\n  P c;\n  double move = 0.5;\n  rep(i,39) {  // 2^(-39-1) \\approx 0.9e-12\n    rep(t,50) {\n      D max = 0;\n      int k = 0;\n      rep (j, ps.size()) if (max < norm(ps[j]-c)) {\n        max = norm(ps[j]-c);\n        k = j;\n      }\n      c += (ps[k]-c) * move;\n    }\n    move /= 2;\n  }\n  return c;\n}\n \n// ?§?????¨????\n// p1???????????¨????????????p???counter clockwise??§?????¢???????????§?¨?\n// D radi=acos((a*a+b*b-c*c)/(2*a*b));\n// radi=radi/M_PI*180;   /---????????????????????§---/\n// (a*a+b*b-c*c)/(2*a*b) = cos X ????????????\n// acos(X) = ????????¢??????????§????\n\n/* ????§???¢ */\n \n// ??????????????????sort???max_element????????????\nnamespace std {\n  bool operator<(const P a, const P b) {\n    return a.X != b.X ? a.X < b.X : a.Y < b.Y;\n  }\n}\n \n// ??????\nVP convexHull(VP ps) {  // ????????????????????????????????????????????????VP&???\n  int n = ps.size(), k = 0;\n  sort(ps.begin(), ps.end());\n  VP ch(2*n);\n  for (int i = 0; i < n; ch[k++] = ps[i++]) // lower-hull\n    while (k >= 2 && ccw(ch[k-2], ch[k-1], ps[i]) <= 0) --k;  // ????¨?????????????????????? == -1 ??¨??????\n  for (int i = n-2, t = k+1; i >= 0; ch[k++] = ps[i--]) // upper-hull\n    while (k >= t && ccw(ch[k-2], ch[k-1], ps[i]) <= 0) --k;\n  ch.resize(k-1);\n  return ch;\n}\n \n// ???????????????????????????????????????ccw???????????¨?????? != 1 ??¨??????\nbool isCcwConvex(const VP& ps) {\n  int n = ps.size();\n  rep (i, n) if (ccw(ps[i], ps[(i+1) % n], ps[(i+2) % n]) == -1) return false;\n  return true;\n}\n \n// ???????§???¢????????¨?????????O(n)\n// ?????????????????¨??????1????¢?????????????2????????¨??????0?????????\nint inConvex(P p, const VP& ps) {\n  int n = ps.size();\n  int dir = ccw(ps[0], ps[1], p);\n  rep (i, n) {\n    int ccwc = ccw(ps[i], ps[(i + 1) % n], p);\n    if (!ccwc) return 2;  // ?????????????????¨\n    if (ccwc != dir) return 0;\n  }\n  return 1;\n}\n \n// ???????§???¢????????¨?????????O(logn)\n// ?????????????????¨??????1????¢?????????????2????????¨??????0?????????\nint inCcwConvex(const VP& ps, P p) {\n  int n = ps.size();\n  P g = (ps[0] + ps[n / 3] + ps[n*2 / 3]) / 3.0;\n  if (g == p) return 1;\n  P gp = p - g;\n \n  int l = 0, r = n;\n  while (l + 1 < r) {\n    int mid = (l + r) / 2;\n    P gl = ps[l] - g;\n    P gm = ps[mid] - g;\n    if (cross(gl, gm) > 0) {\n      if (cross(gl, gp) >= 0 && cross(gm, gp) <= 0) r = mid;\n      else l = mid;\n    }\n    else {\n      if (cross(gl, gp) <= 0 && cross(gm, gp) >= 0) l = mid;\n      else r = mid;\n    }\n  }\n  r %= n;\n  D cr = cross(ps[l] - p, ps[r] - p);\n  return EQ(cr, 0) ? 2 : cr < 0 ? 0 : 1;\n}\n \n// ????§???¢????????¨??????\n// ?????????????????¨??????1????¢?????????????2????????¨??????0?????????\nint inPolygon(const VP& ps, P p) {\n  int n = ps.size();\n  bool in = false;\n  rep (i, n) {\n    P a = ps[i] - p;\n    P b = ps[(i + 1) % n] - p;\n    if (EQ(cross(a,b), 0) && LE(dot(a,b), 0)) return 2;\n    if (a.Y > b.Y) swap(a,b);\n    if ((a.Y*b.Y < 0 || (a.Y*b.Y < EPS && b.Y > EPS)) && LE(cross(a, b), 0)) in = !in;\n  }\n  return in;\n}\n \n// ???????§???¢?????????????????°\nVP convexCut(const VP& ps, P a1, P a2) {\n  int n = ps.size();\n  VP ret;\n  rep(i,n) {\n    int ccwc = ccw(a1, a2, ps[i]);\n    if (ccwc != -1) ret.push_back(ps[i]);\n    int ccwn = ccw(a1, a2, ps[(i + 1) % n]);\n    if (ccwc * ccwn == -1) ret.push_back(crosspointLL(a1, a2, ps[i], ps[(i + 1) % n]));\n  }\n  return ret;\n}\n \n// ???????§???¢?????´?????????????????????\npair<int, int> convexDiameter(const VP& ps) {\n  int n = ps.size();\n  int i = min_element(ps.begin(), ps.end()) - ps.begin();\n  int j = max_element(ps.begin(), ps.end()) - ps.begin();\n  int maxI, maxJ;\n  D maxD = 0;\n  rep(_, 2*n) {\n    if (maxD < norm(ps[i]-ps[j])) {\n      maxD = norm(ps[i]-ps[j]);\n      maxI = i;\n      maxJ = j;\n    }\n    if (cross(ps[i]-ps[(i+1) % n], ps[(j+1) % n]-ps[j]) <= 0) j = (j+1) % n;\n    else                                                      i = (i+1) % n;\n  }\n  return make_pair(maxI, maxJ);\n}\n \n// ????§???¢????¬?????????¢???\nD area(const VP& ps) {\n  D a = 0;\n  rep (i, ps.size()) a += cross(ps[i], ps[(i+1) % ps.size()]);\n  return a / 2;\n}\n \n// ????§???¢?????????????????????\nP centroid(const VP& ps) {\n  int n = ps.size();\n  D aSum = 0;\n  P c;\n  rep (i, n) {\n    D a = cross(ps[i], ps[(i+1) % n]);\n    aSum += a;\n    c += (ps[i] + ps[(i+1) % n]) * a;\n  }\n  return 1 / aSum / 3 * c;\n}\n \n// ??????????????????\nVP voronoiCell(P p, const VP& ps, const VP& outer) {\n  VP cl = outer;\n  rep (i, ps.size()) {\n    if (EQ(norm(ps[i]-p), 0)) continue;\n    P h = (p+ps[i])*0.5;\n    cl = convexCut(cl, h, h + (ps[i]-h)*P(0,1) );\n  }\n  return cl;\n}\n \n/* ????????°?????? */\n \nstruct Edge {\n  int from, to;\n  D cost;\n  Edge(int from, int to, D cost) : from(from), to(to), cost(cost) {}\n};\nstruct Graph {\n  int n;\n  vector<vector<Edge> > edges;\n  Graph(int n) : n(n), edges(n) {}\n  void addEdge(Edge e) {\n    edges[e.from].push_back(e);\n    edges[e.to].push_back(Edge(e.to, e.from, e.cost));\n  }\n};\n \n// ????????¢??¬???????????????????????????????????¢???????????°??????????????????\nGraph segmentArrangement(const vector<L>& segs, VP& ps) {\n  int n = segs.size();\n  rep (i, n) {\n    ps.push_back(segs[i].first);\n    ps.push_back(segs[i].second);\n    rep (j, i) {\n      if (isecSS(                 segs[i].first, segs[i].second, segs[j].first, segs[j].second))\n        ps.push_back(crosspointLL(segs[i].first, segs[i].second, segs[j].first, segs[j].second));\n    }\n  }\n  sort(ps.begin(), ps.end());\n  ps.erase(unique(ps.begin(), ps.end()), ps.end());\n \n  int m = ps.size();\n  Graph gr(m);\n  vector<pair<D, int> > list;\n  rep (i, n) {\n    list.clear();\n    rep (j, m) {\n      if (isecSP(segs[i].first, segs[i].second, ps[j]))\n        list.push_back(make_pair(norm(segs[i].first-ps[j]), j));\n    }\n    sort(list.begin(), list.end());\n    rep (j, list.size() - 1) {\n      int a = list[j  ].second;\n      int b = list[j+1].second;\n      gr.addEdge(Edge(a, b, abs(ps[a]-ps[b])));\n    }\n  }\n  return gr;\n}\n \n// ????????°?????????????????????????????????????????????????????£?????°?????????\nGraph visibilityGraph(const VP& ps, const vector<VP>& objs) {\n  int n = ps.size();\n  Graph gr(n);\n  rep (i,n) rep (j,i) {\n    P a = ps[i], b = ps[j];\n    if (!EQ(norm(a-b), 0)) rep (k, objs.size()) {\n      const VP& obj = objs[k];\n      int inStA = inConvex(a, obj);\n      int inStB = inConvex(b, obj);\n      if ((inStA ^ inStB) % 2 || inStA * inStB != 1 && inConvex((a+b)*0.5, obj) == 1) goto skip;\n      rep (l, obj.size()) {\n        P cur = obj[l];\n        P next = obj[(l + 1) % obj.size()];\n        if (isecSS(a, b, cur, next) && !isecSP(cur, next, a) && !isecSP(cur, next, b)) goto skip;\n      }\n    }\n    gr.addEdge( Edge(i, j, abs(a-b)) );\n    skip: {}\n  }\n  return gr;\n}\n \n \n/* ????????? */\n \n// ?????????????????????????????????\nvector<L> mergeSegments(vector<L> segs) {\n  int n = segs.size();\n  rep (i,n) if (segs[i].second < segs[i].first) swap(segs[i].second, segs[i].first);\n \n  rep (i,n) rep (j,i) {\n    L &l1 = segs[i], &l2 = segs[j];\n    if (EQ(cross(l1.second-l1.first, l2.second-l2.first), 0)\n        && isecLP(l1.first, l1.second, l2.first)\n        && ccw   (l1.first, l1.second, l2.second) != 2\n        && ccw   (l2.first, l2.second, l1.second) != 2) {\n      segs[j] = L(min(l1.first, l2.first), max(l1.second, l2.second));\n      segs[i--] = segs[--n];\n      break;\n    }\n  }\n  segs.resize(n);\n  return segs;\n}\n\nD d[8];\nint main(){\n  int n;\n  cin>>n;\n  while(n--){\n    rep(i,8)cin>>d[i];\n    printf(\"%.12f\\n\",distSS(P(d[0],d[1]),P(d[2],d[3]),P(d[4],d[5]),P(d[6],d[7])));\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define REP(i,n) for(ll (i) = (0);(i) < (n);++i)\n#define REV(i,n) for(ll (i) = (n) - 1;(i) >= 0;--i)\n#define PB push_back\n#define EB emplace_back\n#define MP make_pair\n#define FI first\n#define SE second\n#define SHOW1d(v,n) {REP(WW,n)cerr << v[WW] << ' ';cerr << endl << endl;}\n#define SHOW2d(v,WW,HH) {REP(W_,WW){REP(H_,HH)cerr << v[W_][H_] << ' ';cerr << endl;}cerr << endl;}\n#define ALL(v) v.begin(),v.end()\n#define Decimal fixed<<setprecision(20)\n#define INF 1000000000\n#define LLINF 1000000000000000000LL\n#define MOD 998244353\n\ntypedef long long ll;\ntypedef pair<ll,ll> P;\n//--------geometry original ------------------\n#define curr(PP, i) PP[i]\n#define next(PP, i) PP[(i+1)%PP.size()]\n#define diff(PP, i) (next(PP, i) - curr(PP, i))\n#define eq(n,m) (abs((n)-(m)) < EPS)\n\ntypedef long long ll;\ntypedef pair<ll, ll> P;\n\nconst double EPS = 1e-8;\nconst double EPS_GIG = 1e-3;\nconst double PI = acos(-1.0);\ntypedef complex<double> point;\nnamespace std {\n\tbool operator < (const point& a, const point& b) {\n\t\treturn real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n\t}\n\n\tbool operator == (const point& a,const point& b) {\n\t\treturn (abs(a.real() - b.real()) < EPS && abs(a.imag() - b.imag()) < EPS);\n\t}\n}\nstruct circle {\n\tpoint p; double r;\n\tcircle(){}\n\tcircle(const point &p, double r) : p(p), r(r) { }\n};\n\n// 扇型、中心と半径、二つの端点\n// 現在中心角が180未満の前提\nstruct sector {\n\tpoint o;\n\tpoint a, b;\n\tdouble r;\n\tsector(){}\n\tsector(point O, point A, point B, double _r) :o(O), a(A), b(B), r(_r) {}\n};\n\nstruct segment : public vector<point> {\n\tsegment(const point &a, const point &b) {\n\t\tpush_back(a); push_back(b);\n\t}\n};\n\ndouble cross(const point& a, const point& b) {\n\treturn imag(conj(a)*b);\n}\n\ndouble dot(const point& a, const point& b) {\n\treturn real(conj(a)*b);\n}\n\n//角度足し算\ndouble add_rad(double a,double b){\n\tdouble ret = a + b;\n\tif(ret > 2 * PI)ret -= 2 * PI;\n\treturn ret;\n}\n\n//なす角(vector)\ndouble angle(const point &a,const point &b) {\n\tauto tmp = abs(arg(a) - arg(b));\n\treturn min(tmp, 2 * PI - tmp);\n}\n\ndouble angle(const segment &s1,const segment &s2) {\n\treturn angle(s1[1] - s1[0], s2[1] - s2[0]);\n}\n\n//点の回転\npoint rotate(const point &p, double rad) {\n\tdouble x = p.real() * cos(rad) - p.imag() * sin(rad);\n\tdouble y = p.imag() * cos(rad) + p.real() * sin(rad);\n\treturn point(x, y);\n}\n\n//並行\nbool isParallel(const point &a, const point &b){\n    return abs(cross(a,b)) < EPS;\n}\nbool isParallel(const segment &a, const segment &b){\n    return isParallel(a[1]-a[0], b[1]-b[0]);\n}\n//直行\nbool isOrthogonal(const point &a,const point &b){\n\treturn abs(angle(a,b) - PI / 2) < EPS;\n}\nbool isOrthogonal(const segment &a,const segment &b){\n\treturn isOrthogonal(a[1]-a[0],b[1]-b[0]);\n}\n\n/*\na → b で時計方向に折れて b → c\na → b で半時計方向に折れて b → c\na → b で逆を向いて a を通り越して b → c\na → b でそのまま b → c\na → b で逆を向いて b → c ( または b == c )\n*/\n\nint ccw(point a, point b, point c) {\n\tb -= a; c -= a;\n\tif (cross(b, c) > EPS)   return +1;       // counter clockwise\n\tif (cross(b, c) + EPS < 0)   return -1;       // clockwise\n\tif (dot(b, c) < 0)     return +2;       // c--a--b on line\n\tif (norm(b) < norm(c)) return -2;       // a--b--c on line\n\treturn 0;\n}\n\nbool intersectLL(const segment &l, const segment &m) {\n\treturn abs(cross(l[1] - l[0], m[1] - m[0])) > EPS || // non-parallel\n\t\tabs(cross(l[1] - l[0], m[0] - l[0])) < EPS;   // same line\n}\nbool intersectLS(const segment &l, const segment &s) {\n\treturn cross(l[1] - l[0], s[0] - l[0])*       // s[0] is left of l\n\t\tcross(l[1] - l[0], s[1] - l[0]) < EPS; // s[1] is right of l\n}\nbool intersectLP(const segment &l, const point &p) {\n\treturn abs(cross(l[1] - p, l[0] - p)) < EPS;\n}\nbool intersectSP(const segment &s, const point &p) {\n\tauto a = s[0] - p;\n\tauto b = s[1] - p;\n\treturn (abs(cross(a, b)) < EPS && dot(a, b) <= EPS); // triangle inequality\n}\n//端点の交差も考える\nbool intersectSS(const segment &s, const segment &t) {\n\treturn ccw(s[0], s[1], t[0]) * ccw(s[0], s[1], t[1]) <= 0 &&\n\t\tccw(t[0], t[1], s[0]) * ccw(t[0], t[1], s[1]) <= 0;\n}\n//端点の交差hは考えない\nbool strictIntersectSS(const segment &s, const segment &t) {\n\treturn ccw(s[0], s[1], t[0]) * ccw(s[0], s[1], t[1]) == -1 &&\n\t\tccw(t[0], t[1], s[0]) * ccw(t[0], t[1], s[1]) == -1;\n}\n\npoint projection(const segment &l, const point &p) {\n\tdouble t = dot(p - l[0], l[0] - l[1]) / norm(l[0] - l[1]);\n\treturn l[0] + t*(l[0] - l[1]);\n}\npoint reflection(const segment &l, const point &p) {\n\treturn p + 2. * (projection(l, p) - p);\n}\ndouble distanceLP(const segment &l, const point &p) {\n\treturn abs(p - projection(l, p));\n}\ndouble distanceLL(const segment &l, const segment &m) {\n\treturn intersectLL(l, m) ? 0 : distanceLP(l, m[0]);\n}\ndouble distanceLS(const segment &l, const segment &s) {\n\tif (intersectLS(l, s)) return 0;\n\treturn min(distanceLP(l, s[0]), distanceLP(l, s[1]));\n}\ndouble distanceSP(const segment &s, const point &p) {\n\tconst point r = projection(s, p);\n\tif (intersectSP(s, r)) return abs(r - p);\n\treturn min(abs(s[0] - p), abs(s[1] - p));\n}\ndouble distanceSS(const segment &s, const segment &t) {\n\tif (intersectSS(s, t)) return 0;\n\treturn min(min(distanceSP(s, t[0]), distanceSP(s, t[1])),\n\t\tmin(distanceSP(t, s[0]), distanceSP(t, s[1])));\n}\ndouble distancePP(const point &a,const point &b){\n\treturn abs(a-b);\n}\n\n/*多角形内包判定\nhalf-line crossing method\nOUT:0\nON:1\nIN:2\n*/\nint contains(const vector<point>& Poly, const point& p) {\n\tbool in = false;\n\tfor (int i = 0; i < Poly.size(); ++i) {\n\t\tpoint a = curr(Poly, i) - p, b = next(Poly, i) - p;\n\t\tif (imag(a) > imag(b)) swap(a, b);\n\t\tif (imag(a) + EPS <= 0 && EPS < imag(b))\n\t\t\tif (cross(a, b) < 0) in = !in;\n\t\tif (abs(cross(a, b)) < EPS && dot(a, b) <= EPS) return 1;\n\t}\n\treturn in ? 2 : 0;\n}\n\n/*\nOUT:0\nON:1\nIN:2\n*/\nint contain_sector(const sector &sec, point &p){\n\tif(eq(abs(p - sec.o), sec.r))return 1;\n\tif(intersectSP(segment(sec.o, sec.a), p))return 1;\n\tif(intersectSP(segment(sec.o, sec.b), p))return 1;\n\tif(abs(p - sec.o) + EPS > sec.r)return 0;\n\tpoint vec = p - sec.o;\n\tpoint vecA = sec.a - sec.o;\n\tpoint vecB = sec.b - sec.o;\n\tif(angle(vec, vecA) + EPS < angle(vecA, vecB) && angle(vec, vecB) + EPS < angle(vecA, vecB))return 2;\n\treturn 0;\n}\n\n//交点\npoint crosspointSS(const segment &l, const segment &m) {\n\tdouble A = cross(l[1] - l[0], m[1] - m[0]);\n\tdouble B = cross(l[1] - l[0], l[1] - m[0]);\n\tif (abs(A) < EPS && abs(B) < EPS) return m[0]; // same line\n\tif (abs(A) < EPS) return point(INF,INF); // !!!PRECONDITION NOT SATISFIED!!!\n\treturn m[0] + B / A * (m[1] - m[0]);\n}\n\nvector<point> crosspointCL(const circle &c, const segment &l) {\n\tauto ret = vector<point>(2, point(INF, INF));\n\tauto pro_p = projection(l, c.p);\n\tauto dist = distanceLP(l, c.p);\n\tif(abs(dist - c.r) < EPS){\n\t\tret[0] = pro_p;\n\t\treturn ret;\n\t}\n\tif(c.r < dist){\n\t\treturn ret;\n\t}\n\tpoint vec = (l[1] - l[0]) * sqrt(c.r * c.r - dist * dist) / abs(l[1] - l[0]);\n\tret[0] = pro_p + vec;\n\tret[1] = pro_p - vec;\n\treturn ret;\n}\n\nvector<point> crosspointCC(const circle c1, const circle c2) {\n\tauto ret = vector<point>(2, point(INF, INF));\n\tauto dist = abs(c2.p - c1.p);\n\tif(eq(dist, c1.r + c2.r) || eq(dist, abs(c2.r - c1.r))){\n\t\tauto tmp = c2.p - c1.p;\n\t\tret[0] = c1.p + tmp * (c1.r / dist);\n\t\treturn ret;\n\t}\n\tif(c1.r + c2.r < dist || dist < abs(c1.r - c2.r)){\n\t\treturn ret;\n\t}\n\tauto alpha = acos((c1.r * c1.r + dist * dist - c2.r * c2.r) / (2 * c1.r * dist));\n\tauto theta = atan2(c2.p.imag() - c1.p.imag(), c2.p.real() - c1.p.real());\n\tret[0] = c1.p + point(cos(theta + alpha) * c1.r, sin(theta + alpha) * c1.r);\n\tret[1] = c1.p + point(cos(theta - alpha) * c1.r, sin(theta - alpha) * c1.r);\n\treturn ret;\n}\n\nbool isOnSector(const sector sec, const point p) {\n\tpoint vec = p - sec.o;\n\tpoint vecA = sec.a - sec.o;\n\tpoint vecB = sec.b - sec.o;\n\tif(eq(angle(vec, vecA) + angle(vec, vecB), angle(vecA, vecB)))return true;\n\treturn false;\n}\n\nvector<point> crosspointSecS(const sector sec, const segment s) {\n\tcircle c = circle(sec.o, sec.r);\n\tauto ret = crosspointCL(c, s);\n\tpoint inf = point(INF, INF);\n\tREP(i, 2){\n\t\tif(eq(ret[i], inf))continue;\n\t\tif(!isOnSector(sec, ret[i])){\n\t\t\tret[i] = inf;\n\t\t\tcontinue;\n\t\t}\n\t\tif(!intersectSP(s, ret[i])){\n\t\t\tret[i] = inf;\n\t\t}\n\t}\n\treturn ret;\n}\nvector<point> crosspointSecSec(const sector sec1, const sector sec2) {\n\tcircle c1 = circle(sec1.o, sec1.r);\n\tcircle c2 = circle(sec2.o, sec2.r);\n\tauto ret = crosspointCC(c1, c2);\n\tpoint inf = point(INF, INF);\n\tREP(i, 2){\n\t\tif(!isOnSector(sec1, ret[i])){\n\t\t\tret[i] = inf;\n\t\t\tcontinue;\n\t\t}\n\t\tif(!isOnSector(sec2, ret[i])){\n\t\t\tret[i] = inf;\n\t\t}\n\t}\n\treturn ret;\n}\n\n\n//凸包\nvector<point> convex_hull(vector<point> ps) {\n\tint n = ps.size(), k = 0;\n\tsort(ps.begin(), ps.end());\n\tvector<point> ch(2*n);\n\tfor (int i = 0; i < n; ch[k++] = ps[i++]) // lower-hull\n\t\twhile (k >= 2 && ccw(ch[k-2], ch[k-1], ps[i]) == -1) --k;\n\tfor (int i = n-2, t = k+1;i >= 0; ch[k++] = ps[i--]) // upper-hull\n\t\twhile (k >= t && ccw(ch[k-2], ch[k-1], ps[i]) == -1) --k;\n\tch.resize(k - 1);\n\treturn ch;\n}\n\n//見えるか(可視グラフ用)\nbool block_off(const point &a, const point &b, const vector<point> &obj) {\n  point m = (a + b) * 0.5;\n  bool on = false, in = false;\n  for (int j = 0; j < obj.size(); ++j) {\n    point c = curr(obj,j), d = next(obj,j);\n    if (imag(d) < imag(c)) swap(c, d);\n    if (cross(a-c,b-c) * cross(a-d,b-d) < 0 &&    // strictly intersect.\n        cross(c-a,d-a) * cross(c-b,d-b) < 0) return true;\n    if (cross(a-c,b-c) == 0 && dot(a-c,b-c) < 0) return true;\n    if (imag(c) <= imag(m) && imag(m) < imag(d))  // strictly contain.\n      if (cross(c-m,d-m) < 0) in = !in;\n    if (cross(c-m,d-m) == 0 && dot(c-m,d-m) <= EPS) on = true;\n  }\n  return !on && in;\n}\n\n//面積\ndouble area(const vector<point>& p) {\n\tdouble A = 0;\n\tfor (int i = 0; i < p.size(); ++i)\n\t\tA += cross(curr(p, i), next(p, i));\n\treturn A / 2.;\n}\n\n//凸包判定\nbool isConvex(vector<point> poly){\n\tint sz = poly.size();\n\tREP(i,sz){\n\t\tint tmp = ccw(poly[i],poly[(i+1)%sz],poly[(i+2)%sz]);\n\t\tif(tmp == -1){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndouble convex_diameter(const vector<point> &pt) {\n  const int n = pt.size();\n  int is = 0, js = 0;\n  for (int i = 1; i < n; ++i) {\n    if (imag(pt[i]) > imag(pt[is])) is = i;\n    if (imag(pt[i]) < imag(pt[js])) js = i;\n  }\n  double maxd = norm(pt[is]-pt[js]);\n\n  int i, maxi, j, maxj;\n  i = maxi = is;\n  j = maxj = js;\n  do {\n    if (cross(diff(pt,i), diff(pt,j)) >= 0) j = (j+1) % n;\n    else i = (i+1) % n;\n    if (norm(pt[i]-pt[j]) > maxd) {\n      maxd = norm(pt[i]-pt[j]);\n      maxi = i; maxj = j;\n    }\n  } while (i != is || j != js);\n  return sqrt(maxd); /* farthest pair is (maxi, maxj). */\n}\n\nvector<point> convex_cut(const vector<point> P, const segment& l) {\n  vector<point> Q;\n  for (int i = 0; i < P.size(); ++i) {\n    point A = curr(P, i), B = next(P, i);\n    if (ccw(l[0], l[1], A) != -1) Q.push_back(A);\n    if (ccw(l[0], l[1], A)*ccw(l[0], l[1], B) < 0)\n      Q.push_back(crosspointSS(segment(A, B), l));\n  }\n  return Q;\n}\n\nint main(){\n\tcin.tie(0);cout.tie(0);ios::sync_with_stdio(false);\n\n\tint n;cin >> n;\n\tREP(i, n){\n\t\tdouble a, b, c, d;\n\t\tcin >> a >> b >> c >> d;\n\t\tsegment seg1(point(a, b), point(c, d));\n\t\tcin >> a >> b >> c >> d;\n\t\tsegment seg2(point(a, b), point(c, d));\n\n\n\t\tcout << Decimal << distanceSS(seg1, seg2) << endl;\n\t}\n\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#include<cmath>\n#include<iomanip>\nusing namespace std;\n\nstatic const int COUNTER_CLOCKWISE = 1; //??????????????¨??????\nstatic const int CLOCKWISE = -1;\nstatic const int ON_SEGMENT = 0;\nstatic const int ONLINE_FRONT = 2;\nstatic const int ONLINE_BACK = -2;\nconst double EPS = 1e-10;\n\nbool equals(double a, double b) {\n\treturn fabs(a - b) < EPS;\n}\n\nclass Point {\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0): x(x), y(y) {}\n\n\tPoint operator + (Point p) {\n\t\treturn Point(x + p.x, y + p.y);\n\t}\n\tPoint operator - (Point p) {\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n\tPoint operator * (double k) {\n\t\treturn Point(k * x, k * y);\n\t}\n\tPoint operator / (double k) {\n\t\treturn Point(x / k, y / k);\n\t}\n\n\tdouble norm() {\n\t\treturn x * x + y * y;\n\t}\n\tdouble abs() {\n\t\treturn sqrt(norm());\n\t}\n\n\tbool operator < (const Point &p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p) const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b) {\n\treturn a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n\treturn a.x * b.y - a.y * b.x;\n}\n\nclass Segment {\npublic:\n\tPoint p1, p2;\n\tSegment(Point p1, Point p2): p1(p1), p2(p2) {};\n\n\tPoint project(Point p) {\n\t\tVector a = Vector(p.x - p1.x, p.y - p1.y);\n\t\tVector b = Vector(p2.x - p1.x, p2.y - p1.y);\n\t\treturn p1 + p2 * (dot(a, b) / b.norm());\n\t}\n\n\tPoint refrect(Point p) {\n\t\tPoint pro = project(p);\n\t\treturn pro * 2 - p;\n\t}\n\n\tdouble distance(Point p) {\n\t\tVector a = Vector((p - p1).x, (p - p1).y);\n\t\tVector b = Vector((p2 - p1).x, (p2 - p1).y);\n\t\tVector c = Vector((p - p2).x, (p - p2).y);\n\t\tVector d = Vector((p1 - p2).x, (p1 - p2).y);\n\t\tif (dot(a, b) < 0) return (p - p1).abs();\n\t\telse if (dot(c, d) < 0) return (p - p2).abs();\n\t\telse return fabs(cross(a, b)) / b.abs();\n\t}\n};\n\nint check(Vector v0, Vector v1) { \n\tdouble c = cross(v0, v1);\n\tif (equals(c, 0)) {\n\t\tif (dot(v0, v1) < 0) return ONLINE_BACK;\n\t\telse if (v1.norm() > v0.norm()) return ONLINE_FRONT;\n\t\telse return ON_SEGMENT;\n\t} else if (c > 0) {\n\t\treturn COUNTER_CLOCKWISE;\n\t} else {\n\t\treturn CLOCKWISE;\n\t}\n}\n\nint intersect(Segment s1, Segment s2) { \n\tPoint p1 = s1.p1, p2 = s1.p2, p3 = s2.p1, p4 = s2.p2;\n\tVector v0 = Vector((p2 - p1).x, (p2 - p1).y);\n\tVector v1 = Vector((p3 - p1).x, (p3 - p1).y);\n\tVector v2 = Vector((p4 - p1).x, (p4 - p1).y);\n\tVector v3 = Vector((p4 - p3).x, (p4 - p3).y);\n\tVector v4 = Vector((p1 - p3).x, (p1 - p3).y);\n\tVector v5 = Vector((p2 - p3).x, (p2 - p3).y);\n\tif (check(v0, v1) * check(v0, v2) <= 0 && check(v3, v4) * check(v3, v5) <= 0) return 1;\n\treturn 0;\n}\n\ndouble sDistance(Segment s1, Segment s2) {\n\tPoint p1 = s1.p1, p2 = s1.p2, p3 = s2.p1, p4 = s2.p2;\n\tif (intersect(s1, s2)) return 0;\n\tdouble d1 = s1.distance(p3);\n\tdouble d2 = s1.distance(p4);\n\tdouble d3 = s2.distance(p1);\n\tdouble d4 = s2.distance(p2);\n\treturn min(min(d1, d2), min(d3, d4));\n}\n\nint main() {\n\tint q;\n\tcin >> q;\n\tint x0, y0, x1, y1, x2, y2, x3, y3;\n\tfor (int i = 0; i < q; i++) {\n\t\tcin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n\t\tSegment s1 = Segment(Point(x0, y0), Point(x1, y1));\n\t\tSegment s2 = Segment(Point(x2, y2), Point(x3, y3));\n\t\tcout << fixed << setprecision(10) << sDistance(s1, s2) << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\ninline double add(double a, double b){\n    return abs(a+b)<(1e-10)*(abs(a)+abs(b)) ? 0.0 : a+b;\n}\n\nstruct vec{\n    double x,y;\n    vec operator-(vec b){\n        return (vec){add(x,-b.x),add(y,-b.y)};\n    }\n    vec operator+(vec b){\n        return (vec){add(x,b.x),add(y,b.y)};\n    }\n    vec operator*(double d){\n        return (vec){x*d,y*d};\n    }\n    double dot(vec v){\n        return add(x*v.x,y*v.y);\n    }\n    double cross(vec v){\n        return add(x*v.y,-y*v.x);\n    }\n    double norm(){\n        return sqrt(x*x+y*y);\n    }\n};\n\nconst double eps = 0.0000001;\n\n\nint ccw(vec& a, vec& b, vec& c){\n    vec ab = b-a, ac = c-a;\n    double o = ab.cross(ac);\n    if(o>0) return 1; //CCW\n    if(o<0) return -1; //CW\n    if(ab.dot(ac)<0){\n        return 2; //C-A-B\n    }else{\n        if(ab.dot(ab)<ac.dot(ac)){\n            return -2; //A-B-C\n        }else{\n            return 0; //A-C-B\n        }\n    }\n}\n\nbool isInterSection(vec (&p)[4]){\n    switch(ccw(p[0],p[1],p[2])*ccw(p[0],p[1],p[3])){\n        case -1:\n        case -4:\n        case 0:\n            break;\n        default:\n            return false;\n    }\n    switch(ccw(p[2],p[3],p[0])*ccw(p[2],p[3],p[1])){\n        case -1:\n        case -4:\n        case 0:\n            break;\n        default:\n            return false;\n    }\n   return true;\n}\n\nvec interSection(vec (&p)[4]){\n    vec p23=p[3]-p[2],p02=p[2]-p[0],p01=p[1]-p[0];\n    double k = p23.cross(p02)/p23.cross(p01);\n    return p[0]+p01*k;\n}\n\ndouble dist(vec (&p)[4]){\n    if(isInterSection(p)) return 0;\n    double dist =1e5;\n    vec P;\n    P=p[0]+(p[1]-p[0])*((p[1]-p[0]).dot(p[2]-p[0])/(p[1]-p[0]).dot(p[1]-p[0]));\n    if(!ccw(p[0],p[1],P)){\n        dist = min(dist,sqrt((P-p[2]).dot(P-p[2])));\n    }\n    P=p[0]+(p[1]-p[0])*((p[1]-p[0]).dot(p[3]-p[0])/(p[1]-p[0]).dot(p[1]-p[0]));\n    if(!ccw(p[0],p[1],P)){\n        dist = min(dist,sqrt((P-p[3]).dot(P-p[3])));\n    }\n    P=p[2]+(p[3]-p[2])*((p[3]-p[2]).dot(p[0]-p[2])/(p[3]-p[2]).dot(p[3]-p[2]));\n    if(!ccw(p[2],p[3],P)){\n        dist = min(dist,sqrt((P-p[0]).dot(P-p[0])));\n    }\n    P=p[2]+(p[3]-p[2])*((p[3]-p[2]).dot(p[1]-p[2])/(p[3]-p[2]).dot(p[3]-p[2]));\n    if(!ccw(p[2],p[3],P)){\n        dist = min(dist,sqrt((P-p[1]).dot(P-p[1])));\n    }\n    if(dist!=1e5) return dist;\n    dist = min(dist,(p[2]-p[0]).norm());\n    dist = min(dist,(p[2]-p[1]).norm());\n    dist = min(dist,(p[3]-p[0]).norm());\n    dist = min(dist,(p[3]-p[1]).norm());\n    return dist;\n}\n\nint main(void){\n    vec p[4];\n    int q;\n    cin >> q;\n    cout.precision(10);\n    cout << fixed;\n    while(q--){\n        for(auto& v : p) cin >> v.x >> v.y;\n        cout << dist(p) << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\ntemplate<class T> using vec = vector<T>;\ntemplate<class T> using vvec = vector<vec<T>>;\nusing R = double;\nusing P = complex<R>;\n#define x real()\n#define y imag()\nconst R eps = 1e-9,PI = acos(-1);\n\nbool equal(R a,R b){return abs(b-a)<eps;}\nbool equal0(R a){return equal(a,0.0);}\n\nP operator*(const P& p,const R& d){\n    return P(p.x*d,p.y*d);\n}\n\nistream &operator>>(istream& is,P& p){\n    R a,b;\n    is >> a >> b;\n    p = P(a,b);\n    return is;\n}\n\nostream &operator<<(ostream& os,P& p){\n    os << fixed << setprecision(10) << p.real() << \" \" << p.imag();\n}\n//内積\ndouble dot(P a,P b) {return (conj(a)*b).real();}\n//外積\ndouble cross(P a,P b) {return (conj(a)*b).imag();}\n\nstruct L{\n    P a,b;\n    L(P a,P b):a(a),b(b){}\n    L(R A,R B,R C){\n        if(equal(A,0)) a = P(0,C/B),b = P(1,C/B);\n        else if(equal(B,0)) b = P(C/A,0),b = P(C/A,1);\n        else a = P(0,C/B),b = P(C/A,0);\n    }\n};\n\n//pをbに射影\nP projection(P p,P b) {return b*dot(p,b)/norm(b);}\n\n//pとp1 to p2 に射影\nP projection(L l,P p){\n    p -= l.a; l.b -= l.a;\n    P proj = projection(p,l.b);\n    return l.a+proj;\n}\n\nstruct S:L{\n    S(P a,P b):L(a,b){}\n};\n\n//点の回転方向を判定\nint ccw(P p0,P p1,P p2){\n    p1 -= p0,p2 -= p0;\n    if(cross(p1,p2)>eps) return 1; //\"COUNTER_CLOCKWISE\"\n    if(cross(p1,p2)<-eps) return -1; //\"CLOCKWISE\"\n    if(dot(p1,p2)<0) return 2; //\"ONLINE_BACK\"\n    if(norm(p1)<norm(p2)) return -2; //\"ONLINE_FRONT\"\n    return 0; //\"ON_SEGMENT\"\n}\n\nbool is_parallel(L l1,L l2){\n    return equal0(cross(l1.b-l1.a,l2.b-l2.a));\n}\n\nbool is_orthogonal(L l1,L l2){\n    return equal0(dot(l1.b-l1.a,l2.b-l2.a));\n}\n\n//pをlに関して対称移動\nP reflection(L l,P p){\n    P pj = projection(l,p);\n    return 2.0*pj-p;\n}\n\n//pがl上にあるか\nbool is_online(L l,P p){\n    return abs(ccw(l.a,l.b,p))!=1;\n}\n\nbool is_onsegment(S s,P p){\n    return ccw(s.a,s.b,p)==0;\n}\n\n//線分の交差判定\nbool intersect(S s,S t){\n    return ccw(s.a,s.b,t.a)*ccw(s.a,s.b,t.b)<=0 && ccw(t.a,t.b,s.a)*ccw(t.a,t.b,s.b)<=0;\n}\n\n//2直線の交点\nP crosspoint(L l1,L l2){\n    R a = cross(l1.b-l1.a,l2.b-l2.a);\n    R b = cross(l1.b-l1.a,l1.b-l2.a);\n    if(equal0(abs(a)) && equal0(abs(b))) return l2.a;\n    return l2.a+(l2.b-l2.a)*b/a;\n}\n\nP crosspoint(S s1, S s2){\n    return crosspoint(L(s1),L(s2));\n}\n\nR dist(P a,P b){\n    return abs(a-b);\n}\n\nR dist(L l,P p){\n    return abs(p-projection(l,p));\n}\n\nR dist(L l1,L l2){\n    return is_parallel(l1,l2)? 0:dist(l1,l2.a);\n}\n\nR dist(S s,P p){\n    P r = projection(s,p);\n    if(is_onsegment(s,r)) return abs(r-p);\n    return min(dist(s.a,p),dist(s.b,p));\n}\n\nR dist (S s1,S s2){\n    if(intersect(s1,s2)) return 0;\n    return min({dist(s1,s2.a),dist(s1,s2.b),\n    dist(s2,s1.a),dist(s2,s1.b)});\n}\n\nint main(){\n    int Q;\n    cin >> Q;\n    for(int i=0;i<Q;i++){\n        P p1,p2,p3,p4;\n        cin >> p1 >> p2 >> p3 >> p4;\n        R d = dist(S(p1,p2),S(p3,p4));\n        cout << fixed << setprecision(10) << d << endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst int inf = 1e9 + 7;\nusing pii = pair<int, int>;\n#define rep(i, n) for (int i = 0; i < n; ++i)\n#define rrep(i, st, n) for (int i = st; i < n; ++i)\n#define chmax(a, b) a = max(a, b)\n#define chmin(a, b) a = min(a, b)\n#define eb emplace_back\n#define EQ(a, b) abs(a - (b)) < 1e-10\nconst double eps = 1e-10;\nusing P = complex<double>;\ndouble dot(P a, P b) {return real(conj(a) * b);}\ndouble cross(P a, P b) {return imag(conj(a) * b);}\nstruct L : vector<P> {L(const P &a = P(), const P &b = P()) {push_back(a); push_back(b);}};\ndouble distLP(L l, P p) {return abs(cross(l[0] - l[1], p - l[0])) / abs(l[1] - l[0]);\n    /*return abs(p - projection(l, p));*/}\ndouble distSP(L l, P p) {\n    if (dot(l[1] - l[0], p - l[0]) < eps) return abs(l[0] - p);\n    if (dot(l[0] - l[1], p - l[1]) < eps) return abs(l[1] - p);\n    return distLP(l, p);\n}\ndouble norm(P a) {return a.real() * a.real() + a.imag() * a.imag();}\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\nint ccw(P p0, P p1, P p2) {\n    P a = p1 - p0;\n    P b = p2 - p0;\n    if (cross(a, b) > eps) return COUNTER_CLOCKWISE;\n    if (cross(a, b) < -eps) return CLOCKWISE;\n    if (dot(a, b) < -eps) return ONLINE_BACK;\n    if (norm(a) < norm(b)) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\nbool isec(P p1, P p2, P p3, P p4) {\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n            ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);}\nbool isec(L s1, L s2) {return isec(s1[0], s1[1], s2[0], s2[1]);}\ndouble distSS(L a, L b) {\n    if (isec(a, b)) return 0.0;\n    return min({distSP(a, b[0]), distSP(a, b[1]), distSP(b, a[0]), distSP(b, a[1]), distSP(b, a[0])});\n}\nint main() {\n    int q; cin >> q;\n    while (q--) {\n        double x0, y0, x1, y1, x2, y2, x3, y3;\n        cin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n        P p0(x0, y0), p1(x1, y1), p2(x2, y2), p3(x3, y3);\n        L s0(p0, p1), s1(p2, p3);\n        cout << fixed << setprecision(10) << distSS(s0, s1) << endl;\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> Point;\ntypedef pair<Point, Point> Line;\nconst double EPS = 1e-10;\n\n// 内積 |a||b|cosθ\ndouble dot(Point a, Point b){\n\t// return a.real() * b.real() + a.imag() * b.imag();\n\treturn (conj(a) * b).real();\n}\n// 外積、符号付面積の２倍　|a||b|sinθ\ndouble cross(Point a, Point b){\n\t// return a.real() * b.imag() - a.imag() * b.real();\n\treturn (conj(a) * b).imag();\n}\n// 点と直線の距離\ndouble line_to_point_dis(Line l, Point p){\n    Point a = l.first, b = l.second, c = p;\n    return fabs(cross(c - a, b - a)) / fabs(abs(b - a));\n}\n// 線分と直線の距離\ndouble seg_to_point_dis(Line l, Point p){\n    Point a = l.first, b = l.second, c = p;\n    if(dot(b - a, c - a) < EPS) return abs(c - a);\n    if(dot(a - b, c - b) < EPS) return abs(c - b);\n    return line_to_point_dis(l, p);\n}\n// 線分と線分の距離\ndouble seg_to_seg_dis(Line a, Line b){\n    double res = seg_to_point_dis(a, b.first);\n    res = min(res, seg_to_point_dis(a, b.second));\n    res = min(res, seg_to_point_dis(b, a.first));\n    res = min(res, seg_to_point_dis(b, a.second));\n    return res;\n}\n\nint main(){\n    int q;\n    cin >> q;\n    for(int i = 0; i < q; i++){\n        double x, y;\n        Point p[4];\n        for(int j = 0; j < 4; j++){\n            cin >> x >> y;\n            p[j] = {x, y};\n        }\n        Line s1 = {p[0], p[1]};\n        Line s2 = {p[2], p[3]};\n        double len = seg_to_seg_dis(s1, s2);\n        printf(\"%.10f\\n\", len);\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n\ninline int sign(const double &x){\n    if(x>EPS) return 1;\n    else if(x<-EPS) return -1;\n    return 0;\n}\n\n/*   点  */\nstruct Point{\n    double x,y;\n\n    Point(double x=0,double y=0):x(x),y(y){}\n\n    Point operator + (Point p) { return Point(x+p.x,y+p.y); }\n    Point operator - (Point p) { return Point(x-p.x,y-p.y); }\n    Point operator * (double k) { return Point(k*x,k*y); }\n    Point operator / (double k) { return Point(x/k,y/k); }\n\n    //向量的大小\n    double abs(){ return sqrt(norm()); }\n    double norm() { return x*x+y*y; }\n\n    bool operator < (const Point & p) const{\n        return x!=p.x?x<p.x:y<p.y;\n    }\n\n    bool operator == (const Point & p) const {\n        return fabs(x-p.x)<EPS&&fabs(y-p.y)<EPS;\n    }\n};\n\n//两点间的距离\ndouble getDistance(Point a,Point b){\n    return (a-b).abs();\n}\n\n/*   向量  */\ntypedef Point Vector;\n\n//向量a和b的内积\ndouble dot(Vector a,Vector b){\n    return a.x*b.x+a.y*b.y;\n}\n//向量a和b的外积\ndouble cross(Vector a,Vector b){\n    return a.x*b.y-a.y*b.x;\n}\n\n/*   线段  */\nstruct Segment{\n    Point p1,p2;\n};\n\n/*   直线  */\ntypedef Segment Line;\n\n//点到直线的距离\ndouble getDistanceLP(Line l,Point p){\n    return abs(cross(l.p2-l.p1,p-l.p1)/(l.p2-l.p1).abs());\n}\n\n//点到线段的距离\ndouble getDistanceSP(Segment s,Point p){\n    if(dot(s.p2-s.p1,p-s.p1)<0.0) return (p-s.p1).abs();\n    if(dot(s.p1-s.p2,p-s.p2)<0.0) return (p-s.p2).abs();\n    return getDistanceLP(s,p);\n}\n\n//判断p2与向量p1-p0的位置关系\n\nconst int COUNTER_CLOCKWISE = -1;   //逆时针\nconst int CLOCKWISE = 1;            //顺时针\nconst int ON_SEGMENT = 0;           //在线段上\n\nint ccw(Point p0,Point p1,Point p2){\n    Vector a=p1-p0;\n    Vector b=p2-p0;\n    if(cross(a,b)>EPS) return COUNTER_CLOCKWISE;\n    if(cross(a,b)<-EPS) return CLOCKWISE;\n    return ON_SEGMENT;\n}\n\n//判断线段p1p2与线段p3p4是否相交\nbool intersect(Point p1,Point p2,Point p3,Point p4){\n    return ( ccw(p1,p2,p3)*ccw(p1,p2,p4)<=0 &&\n             ccw(p3,p4,p1)*ccw(p3,p4,p2)<=0 );\n}\n\nbool intersect(Segment s1,Segment s2){\n    return intersect(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n\n//线段与线段的距离\ndouble getDistance(Segment s1,Segment s2){\n    if(intersect(s1,s2)) return 0.0;\n    return min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),\n               min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n}\n\n/* 直线正交\n * 判断向量a，b是否正交 =》a，b的内积为0\n */\nbool isOrthogonal(Vector a,Vector b){\n    return equals(dot(a,b),0.0);\n}\n\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n    return isOrthogonal(a1-a2,b1-b2);\n}\n\n/* 直线平行\n * 判断向量a，b是否平行 =》a，b的内积为0\n */\nbool isParallel(Vector a,Vector b){\n    return equals(cross(a,b),0.0);\n}\n\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n    return isParallel(a1-a2,b1-b2);\n}\n\nstruct Circle{\n    Point c;\n    double r;\n    Circle(Point c = Point() ,double r = 0.0 ):c(c),r(r){}\n};\n\n/*   多边形  */\ntypedef vector<Point> Polygon;\n\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    while(n--){\n        Point p1,p2,p3,p4;\n        scanf(\"%lf%lf%lf%lf%lf%lf%lf%lf\",&p1.x,&p1.y,&p2.x,&p2.y,&p3.x,&p3.y,&p4.x,&p4.y);\n        printf(\"%.10f\\n\",getDistance(Segment{p1,p2},Segment{p3,p4}));\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "// InterestingLSY\n// 2659723130\n// 《幽灵公主》是真的好看！\n#include <bits/stdc++.h>\nusing namespace std;\n#define il inline\n#define elif else if\n\n// Type\n#define ld double\n#define ll long long\n#define ull unsigned ll\n\n// Vector\n#define vc vector\n#define Pb push_back\n#define Pf push_front\n#define Eb emplace_back\n#define All(x) x.begin(),x.end()\n#define AllRev(x) x.rbegin(),x.rend()\n\n// Memory\n#define Ms(_data) memset(_data,0,sizeof(_data))\n#define Msn(_data,_num) memset(_data,_num,sizeof(_data))\n\n// Template\n#define _cl class\n#define _tp template\n#define _tyn typename\n\n// Pair\n#define Mp make_pair\n#define F first\n#define S second\n#define pii pair<int,int>\n#define pli pair<ll,int>\n#define pil pair<int,ll>\n#define pll pair<ll,ll>\n\n// Loop\n#define For(i,j) for( int (i) = 1 ; (i) <= (j) ; ++(i) )\n#define For0(i,j) for( int (i) = 0 ; (i) < (j) ; ++(i) )\n#define Forx(i,j,k) for( int (i) = (j) ; (i) <= (k) ; ++(i) )\n#define Forstep(i,j,k,st) for( int (i) = (j) ; (i) <= (k) ; (i) += (st) )\n#define fOR(i,j) for( int (i) = (j) ; (i) >= 1 ; --(i) )\n#define fOR0(i,j) for( int (i) = (j)-1 ; (i) >= 0 ; --(i) )\n#define fORx(i,j,k) for( int (i) = (k) ; (i) >= (j) ; --(i) )\n\n// Read\nstruct InputReader{\n\t#define bs 1048576\n\tchar buf[bs]; int p;\n\til InputReader(){ p = bs; }\n\til void Flush(){ p = 0; fread(buf,1,bs,stdin); }\n\til char C(){ if(p >= bs) Flush(); return buf[p++]; }\n\til char Readnum(){ char ch = C(); while( !isdigit(ch) && ch != '-' ) ch = C(); return ch; }\n\til void Readalpha( char &c ){ c = C(); while( !isalpha(c) ) c = C(); }\n\tint operator() (){\n\t\tint ans = 0, fu = 1; char ch = Readnum();\n\t\tif( ch == '-' ) fu = -1, ch = C();\n\t\twhile( ch >= '0' && ch <= '9' ){\n\t\t\tans = ans*10 + ch-'0';\n\t\t\tch = C();\n\t\t}\n\t\treturn ans * fu;\n\t}\n\tll Readll(){\n\t\tll ans = 0LL, fu = 1LL; char ch = Readnum();\n\t\tif( ch == '-' ) fu = -1LL, ch = C();\n\t\twhile( ch >= '0' && ch <= '9' ){\n\t\t\tans = ans*10LL + ch-'0';\n\t\t\tch = C();\n\t\t}\n\t\treturn ans * fu;\n\t}\n\til void Readstring( string &x ){\n\t\tx.clear(); char ch = C();\n\t\twhile( !isdigit(ch)  &&  !isalpha(ch)  &&  ch != '#'  &&  ch != '.' ) ch = C();\n\t\twhile( isdigit(ch)  ||  isalpha(ch)  ||  ch == '#'  ||  ch == '.' ){\n\t\t\tx += ch;\n\t\t\tch = C();\n\t\t}\n\t}\n\til void Readchstring( char s[] ){\n\t\tint len = 0; char ch = C();\n\t\twhile( !isdigit(ch)  &&  !isalpha(ch)  /*&&  ch != '*'  &&  ch != '?'*/ ) ch = C();\n\t\twhile( isdigit(ch)  ||  isalpha(ch)  /*||  ch == '*'  ||  ch == '?'*/ ){\n\t\t\ts[len++] = ch;\n\t\t\tch = C();\n\t\t}\n\t\ts[len] = '\\0';\n\t}\n\til void Specialread( char &c ){\n\t\tc = C();\n\t\twhile( !isdigit(c) && !isalpha(c) && c != '#'  &&  c != '.'  &&  c != '='  &&  c != 'B' ) c = C();\n\t}\n\t#undef bs\n}In;\nil void Read( int &x ){ x = In(); }\nil void Read( int &x, int &y ){ x = In(); y = In(); }\nil void Read( int &x1 , int &x2 , int &x3 ){ x1 = In(); x2 = In(); x3 = In(); }\nil void Read( int &x1 , int &x2 , int &x3 , int &x4 ){ x1 = In(); x2 = In(); x3 = In(); x4 = In(); }\nil void Read( ll &x ){ x = In.Readll(); }\nil void Read( ll &x, ll &y ){ x = In.Readll(); y = In.Readll(); }\nil void Read( ll &x1 , ll &x2 , ll &x3 ){ x1 = In.Readll(); x2 = In.Readll(); x3 = In.Readll(); }\nil void Read( ll &x1 , ll &x2 , ll &x3 , ll &x4 ){ x1 = In.Readll(); x2 = In.Readll(); x3 = In.Readll(); x4 = In.Readll(); }\n_tp<_tyn T> void Read( T a[] , int st , int ed ){ Forx(i,st,ed) Read(a[i]); }\n#define iRead(k) int k; Read(k);\n#define iRead2(a,b) iRead(a); iRead(b);\n#define iRead3(a,b,c) iRead2(a,b); iRead(c);\n#define iRead4(a,b,c,d) iRead2(a,b); iRead2(c,d);\n#define lRead(k) ll k; Read(k);\n#define lRead2(a,b) lRead(a); lRead(b);\n#define lRead3(a,b,c) lRead2(a,b); lRead(c);\n#define lRead4(a,b,c,d) lRead2(a,b); lRead2(c,d);\n\n// File\n#define Fin(a) freopen(a,\"r\",stdin)\n#define Fout(a) freopen(a,\"w\",stdout)\nil void FILEIO(){\n\t#ifdef intLSY\n\t\tFin(\"in.in\");\n\t#endif\n}\nil void FILEIO( string pname ){\n\t#ifndef intLSY\n\t\tFin((pname+\".in\").c_str());\n\t\tFout((pname+\".out\").c_str());\n\t#else\n\t\tFin(\"in.in\");\n\t#endif\n}\nil void FILEIO_OICONTEST( string pname ){\n\tFin((pname+\".in\").c_str());\n\t#ifndef intLSY\n\t\tFout((pname+\".out\").c_str());\n\t#endif\n}\nvoid Printtime(){\n\t#ifdef intLSY\n\t\tdouble _timeuse = clock()* 1000.0 / CLOCKS_PER_SEC;\n\t\tfprintf(stderr,\"\\n\\nTime usage:\\n%.0lf ms\\n\",_timeuse);\n\t#endif\n}\nvoid END(){ Printtime(); exit(0); }\n_tp<_tyn T>void END( T mes ){ cout << mes << endl; END(); }\n\n// Debug\n#define B cerr << \"BreakPoint\" << endl;\n#define O(x) cerr << #x << \" \" << x << endl;\n#define o(x) cerr << #x << \" \" << x << \"  \";\n#define Msz(x) cerr << \"Sizeof \" << #x << \" \" << sizeof(x)/1024/1024 << \" MB\" << endl;\n_tp<_tyn T>void Print( T a[] , int s , int t , char sp = ' ' , char ed = '\\n' ){\n\tif( s > t ) return;\n\tfor( int i = s ; i < t ; i++ )\n\t\tcout << a[i] << sp;\n\tcout << a[t] << ed;\n\tcout.flush();\n}\n_tp<_tyn T>void Print( T a , int s = 0 , int t = -1 , char sp = ' ' , char ed = '\\n' ){\n\tif( t == -1 ) t = a.size()-1;\n\tfor( int i = s ; i <= t ; i++ )\n\t\tcout << a[i] << sp;\n\tcout << ed;\n\tcout.flush();\n}\n\n// Optimize\n#define Max(a,b) ((a)>(b)?(a):(b))\n#define Min(a,b) ((a)<(b)?(a):(b))\n#define Mymax(a,b) (a) = max((a),(b))\n#define Mymin(a,b) (a) = min((a),(b))\n#define MyMax(a,b) (a) = Max((a),(b))\n#define MyMin(a,b) (a) = Min((a),(b))\n#define INF (0x3f3f3f3f)\n#define LINF ((long long)(0x3f3f3f3f3f3f3f3f))\n#define Sqr(x) ((x)*(x))\n#define Lowbit(a) ((a)&(-(a)))\nvc<int> Range( int l , int r ){\n\tvc<int> ret{};\n\tForx(i,l,r) ret.Pb(i);\n\treturn ret;\n}\nmt19937 Rand(0xe38195e38293);\t// さん\n///////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////\n#undef ld\n#define ld long double\nconst ld Eps = 1e-10;\nstruct Point{ ld x,y; };\nil Point operator+( const Point &a , const Point &b ){ return {a.x+b.x,a.y+b.y}; }\nil Point operator-( const Point &a , const Point &b ){ return {a.x-b.x,a.y-b.y}; }\nil auto operator^( const Point &a , const Point &b ){ return a.x*b.x + a.y*b.y; }\nil auto operator*( const Point &a , const Point &b ){ return a.x*b.y - b.x*a.y; }\nil Point operator*( const Point &a , const ld &b ){ return {a.x*b,a.y*b}; }\nil bool operator==( const Point &a , const Point &b ){ return a.x == b.x and a.y == b.y; }\nil ld Dis( const Point &a , const Point &b ){ return sqrt((ld)Sqr(a.x-b.x)+Sqr(a.y-b.y)); }\nil ld Dis2( const Point &a , const Point &b ){ return Sqr(a.x-b.x)+Sqr(a.y-b.y); }\nil bool OnSeg( const Point &a , const Point &b , const Point &c ){\n\tPoint ab = b-a, ac = c-a;\n\tif( fabs(ab*ac) > Eps ) return 0;\n\tif( (ab^ac) < -Eps ) return 0;\n\tif( fabs(ab.y*ab.y+ab.x*ab.x) > fabs(ac.y*ac.y+ac.x*ac.x) ) return 0;\n\t// cout << a.x << \" \" << a.y << \"  \" << b.x << \" \" << b.y << \"  \" << c.x << \" \" << c.y << endl;\n\treturn 1;\n}\nbool Ins( Point p1 , Point p2 , Point p3 , Point p4 ){\n\tif( p1 == p3 or p1 == p4 or p2 == p3 or p2 == p4 ) return 1;\n\tif( OnSeg(p1,p3,p2) or OnSeg(p1,p4,p2) or OnSeg(p3,p1,p4) or OnSeg(p3,p2,p4) ) return 1;\n\tif( ((p2-p1)*(p3-p1)<0) == ((p2-p1)*(p4-p1)<0) ) return 0;\n\tif( ((p4-p3)*(p1-p3)<0) == ((p4-p3)*(p2-p3)<0) ) return 0;\n\treturn 1;\n}\nPoint InsPoint( Point p1 , Point p2 , Point p3 , Point p4 ){\n\tld d1 = (ld)abs((p2-p3)*(p3-p1)) / Dis(p1,p2);\n\tld d2 = (ld)abs((p2-p4)*(p4-p1)) / Dis(p1,p2);\n\tld ratio = d1 / (d1+d2);\n\treturn (p4-p3)*ratio + p3;\n}\nPoint H( Point a , Point b , Point p ){\n\tPoint ab = b-a;\n\tld dis2 = Dis2(a,b);\n\tPoint ret = a + ab * (((p-a)^ab)/dis2);\n\treturn ret;\n}\nld Distance( Point p1 , Point p2 , Point p3 , Point p4 ){\n\tif(Ins(p1,p2,p3,p4)) return 0;\n\tld ans = min({ Dis(p1,p3) , Dis(p1,p4) , Dis(p2,p3) , Dis(p2,p4) });\n\tauto Check = [&]( Point a , Point b , Point p ){\n\t\tPoint h = H(a,b,p);\n\t\tif(!OnSeg(a,h,b)) return;\n\t\tld tans = Dis(h,p);\n\t\t// O(tans);\n\t\t// if( tans-1.0 < 1e-9 ){\n\t\t\t// cout << a.x << \" \" << a.y << \"  \" << b.x << \" \" << b.y << \"  \" << p.x << \" \" << p.y << endl;\n\t\t// }\n\t\tMymin(ans,tans);\n\t};\n\tCheck(p1,p2,p3);\n\tCheck(p1,p2,p4);\n\tCheck(p3,p4,p1);\n\tCheck(p3,p4,p2);\n\treturn ans;\n}\n\nint main(){\n\tFILEIO();\n\tcout << setprecision(12) << fixed;\n\n\tiRead(T);\n\tFor(Ti,T){\n\t\tiRead4(x1,y1,x2,y2);\n\t\tiRead4(x3,y3,x4,y4);\n\t\tPoint p1{(ld)x1,(ld)y1}, p2{(ld)x2,(ld)y2}, p3{(ld)x3,(ld)y3}, p4{(ld)x4,(ld)y4};\n\t\tld ans = Distance(p1,p2,p3,p4);\n\t\tcout << ans << endl;\n\t}\n\n\tEND();\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\nconst double EPS = 1e-8;\nconst double INF = 1e12;\nconst double PI = acos(-1);\n\nusing Point = complex<double>;\nusing Polygon = vector<Point>;\n\ninline int sgn(const double &a) { return (a < -EPS ? -1 : (a > EPS ? 1 : 0)); }\n\ninline bool eq(const Point &a, const Point &b) { return abs(a - b) < EPS; }\n\nnamespace std {\ninline bool operator<(const Point &a, const Point &b) {\n    if (sgn(a.real() - b.real()))\n        return sgn(a.real() - b.real()) < 0;\n    return sgn(a.imag() - b.imag()) < 0;\n}\n} // namespace std\n\ndouble dot(const Point &a, const Point &b) { return real(conj(a) * b); }\n\ndouble det(const Point &a, const Point &b) { return imag(conj(a) * b); }\n\nstruct Line {\n    Point p1, p2;\n\n    Line(Point p1 = Point(), Point p2 = Point()) : p1(p1), p2(p2) {}\n\n    bool operator<(const Line &rhs) const {\n        if (eq(p2, rhs.p2))\n            return p1 < rhs.p1;\n        return p2 < rhs.p2;\n    }\n    bool operator==(const Line &rhs) const {\n        return (eq(p1, rhs.p1) && eq(p2, rhs.p2)) ||\n               (eq(p1, rhs.p2) && eq(p2, rhs.p1));\n    }\n};\n\nenum CCW {\n    ONLINE_FRONT = -2,\n    CLOCKWISE,\n    ON_SEGMENT,\n    COUNTER_CLOCKWISE,\n    ONLINE_BACK\n};\n\nint ccw(Point p0, Point p1, Point p2) {\n    Point a = p1 - p0;\n    Point b = p2 - p0;\n    if (sgn(det(a, b)) == 1)\n        return COUNTER_CLOCKWISE;\n    if (sgn(det(a, b)) == -1)\n        return CLOCKWISE;\n    if (sgn(dot(a, b)) == -1)\n        return ONLINE_BACK;\n    if (sgn(norm(b) - norm(a)) == 1)\n        return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\ndouble distanceLP(Line line, Point p) {\n    return abs(det(line.p2 - line.p1, p - line.p1)) / abs(line.p2 - line.p1);\n}\n\ndouble distanceSP(Line line, Point p) {\n    if (sgn(dot(line.p2 - line.p1, p - line.p1)) < 0)\n        return abs(p - line.p1);\n    if (sgn(dot(line.p1 - line.p2, p - line.p2)) < 0)\n        return abs(p - line.p2);\n    return distanceLP(line, p);\n}\n\nbool intersectLS(Line a, Line b, bool segflag) {\n    if (segflag)\n        return (ccw(a.p1, a.p2, b.p1) * ccw(a.p1, a.p2, b.p2) <= 0) &&\n               (ccw(b.p1, b.p2, a.p1) * ccw(b.p1, b.p2, a.p2) <= 0);\n    else\n        return (sgn(det(a.p2 - a.p1, b.p1 - a.p1) *\n                    det(a.p2 - a.p1, b.p2 - a.p1)) <= 0) &&\n               (sgn(det(b.p2 - b.p1, a.p1 - b.p1) *\n                    det(b.p2 - b.p1, a.p2 - b.p1)) <= 0);\n}\n\ndouble distanceSS(Line s1, Line s2){\n    if(intersectLS(s1, s2, true))return 0;\n    double d1 = distanceSP(s1, s2.p1);\n    double d2 = distanceSP(s1, s2.p2);\n    double d3 = distanceSP(s2, s1.p1);\n    double d4 = distanceSP(s2, s1.p2);\n    return min({d1, d2, d3, d4});\n}\n\nint main(){\n    int q;\n    cin >> q;\n    for(int i=0;i<q;++i){\n        double x0, y0, x1, y1, x2, y2, x3, y3;\n        cin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n        Point p0 = Point(x0, y0), p1 = Point(x1, y1), p2 = Point(x2, y2), p3 = Point(x3, y3);\n        Line s1 = Line(p0, p1), s2 = Line(p2, p3);\n        printf(\"%.10f\\n\", distanceSS(s1, s2));\n    }\n\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\n\n#define dTolerance 1.0e-10\nusing namespace std;\n\nstruct POINT{\n    double x;\n    double y;\n};\n\nint LF_COUNTER_CLOCKWIZE(const POINT &p, const POINT &p0, const POINT &p1){\n    if((p1.x - p0.x) * (p.y - p0.y) - (p.x - p0.x) * (p1.y - p0.y) > dTolerance){\n        return 1;\n    } else if((p1.x - p0.x) * (p.y - p0.y) - (p.x - p0.x) * (p1.y - p0.y) < -dTolerance){\n        return -1;\n    } else {\n        return 0;\n    }\n}\n\nint LF_INTERSECT(const POINT &p0, const POINT &p1, const POINT &p2, const POINT &p3){\n    if(LF_COUNTER_CLOCKWIZE(p0,p2,p3) == 0 && LF_COUNTER_CLOCKWIZE(p1,p2,p3) == 0){\n        if(fabs(p0.x - p1.x) < dTolerance){    //y軸平行  y座標比較\n            if(max(p0.y, p1.y) + dTolerance < min(p2.y, p3.y) || max(p2.y, p3.y) + dTolerance < min(p0.y, p1.y)){    //交わらない\n                    return -1;\n                } else {    //交わる\n                    return 1;;\n                }\n        }\n        if(max(p0.x, p1.x) + dTolerance < min(p2.x, p3.x) || max(p2.x, p3.x) + dTolerance < min(p0.x, p1.x)){    //交わらない\n            return -1;\n        } else {    //交わる\n            return 1;;\n        }\n    }\n    if(LF_COUNTER_CLOCKWIZE(p0,p2,p3) * LF_COUNTER_CLOCKWIZE(p1,p2,p3) == 1 || LF_COUNTER_CLOCKWIZE(p2,p0,p1) * LF_COUNTER_CLOCKWIZE(p3,p0,p1) == 1){\n        return 0;\n    }\n    return 1;\n}\n\ndouble dDist(const POINT &a, const POINT &b){\n    return sqrt((a.x - b.x) * (a.x -b.x) + (a.y - b.y) * (a.y - b.y));\n}\n\nbool LF_PROJECTION_ON_SEGMENT(const POINT &p, const POINT &p0, const POINT &p1){\n    if( (p.x - p0.x) * (p1.x - p0.x) + (p.y - p0.y) * (p1.y - p0.y) > -dTolerance &&\n        (p.x - p1.x) * (p0.x - p1.x) + (p.y - p1.y) * (p0.y - p1.y) > -dTolerance ){\n            return true;\n    }\n    return false;    \n}\n\ndouble LF_DIST_POINT_LINE(const POINT &p, const POINT &p0, const POINT &p1){\n    double dTmp = dDist(p, p0) * dDist(p, p0) - ( (p.x - p0.x) * (p1.x - p0.x) + (p.y - p0.y) * (p1.y - p0.y) ) * ( (p.x - p0.x) * (p1.x - p0.x) + (p.y - p0.y) * (p1.y - p0.y) ) \n                                               / (dDist(p0, p1) * dDist(p0, p1));\n    return sqrt(dTmp);\n}\n\nint main(){\n    int n;\n    scanf(\"%d\", &n);\n    for(int i = 0; i < n; i++){\n        POINT zp0,zp1,zp2,zp3;\n        scanf(\"%lf %lf %lf %lf %lf %lf %lf %lf\", &zp0.x, &zp0.y, &zp1.x, &zp1.y, &zp2.x, &zp2.y, &zp3.x, &zp3.y);\n//        printf(\"%d   \",LF_INTERSECT(zp0,zp1,zp2,zp3));\n        if(LF_INTERSECT(zp0, zp1, zp2, zp3) == 1){\n            printf(\"%.15lf\\n\", 0.0);\n        } else {\n            vector<double> vdDistance;\n            vdDistance.push_back(dDist(zp0, zp2));\n            vdDistance.push_back(dDist(zp1, zp2));\n            vdDistance.push_back(dDist(zp0, zp3));\n            vdDistance.push_back(dDist(zp1, zp3));\n            if(LF_PROJECTION_ON_SEGMENT(zp0, zp2, zp3)){\n                vdDistance.push_back(LF_DIST_POINT_LINE(zp0, zp2, zp3));\n            }\n            if(LF_PROJECTION_ON_SEGMENT(zp1, zp2, zp3)){\n                vdDistance.push_back(LF_DIST_POINT_LINE(zp1, zp2, zp3));\n            }\n            if(LF_PROJECTION_ON_SEGMENT(zp2, zp0, zp1)){\n                vdDistance.push_back(LF_DIST_POINT_LINE(zp2, zp0, zp1));\n            }\n            if(LF_PROJECTION_ON_SEGMENT(zp3, zp0, zp1)){\n                vdDistance.push_back(LF_DIST_POINT_LINE(zp3, zp0, zp1));\n            }\n            sort(vdDistance.begin(), vdDistance.end());\n            printf(\"%.15lf\\n\", vdDistance[0]);\n        }\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <limits>\n#include <cmath>\n#include <cstdio>\n\nusing namespace std;\n\n#define EPS (numeric_limits<double>::epsilon())\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nclass Point {\npublic:\n    double x, y;\n\n    Point(double x = 0, double y = 0) : x(x), y(y) {}\n\n    Point operator+(const Point &p) const\n    {\n        return Point(x + p.x, y + p.y);\n    }\n\n    Point operator-(const Point &p) const\n    {\n        return Point(x - p.x, y - p.y);\n    }\n\n    Point operator*(const double &a) const\n    {\n        return Point(a * x, a * y);\n    }\n\n    Point operator/(const double &a) const\n    {\n        return Point(x / a, y / a);\n    }\n\n    double abs()\n    {\n        return sqrt(norm());\n    }\n\n    double norm()\n    {\n        return x * x + y * y;\n    }\n\n    bool operator<(const Point &p) const\n    {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator==(const Point &p) const\n    {\n        return equals(x, p.x) && equals(y, p.y);\n    }\n};\n\ntypedef Point Vector;\n\nstruct Segment {\n    Point p1, p2;\n};\ntypedef Segment Line;\n\n\ndouble dot(Vector a, Vector b)\n{\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b)\n{\n    return a.x * b.y - a.y * b.x;\n}\n\nbool isParallel(Vector a, Vector b)\n{\n    return equals(cross(a, b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2)\n{\n    return equals(cross(a2 - a1, b2 - b1), 0.0);\n}\n\nbool isOrthogonal(Vector a, Vector b)\n{\n    return equals(dot(a, b), 0.0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2)\n{\n    return equals(dot(a2 - a1, b2 - b1), 0.0);\n}\n\nPoint project(Segment s, Point p)\n{\n    Vector hypo = p - s.p1;\n    Vector base = s.p2 - s.p1;\n    return base * (dot(hypo, base) / base.norm()) + s.p1;\n}\n\nPoint reflect(Segment s, Point p)\n{\n    return (project(s, p) - p) * 2.0 + p;\n}\n\ndouble getDistance(Point a, Point b)\n{\n    return (a - b).abs();\n}\n\ndouble getDistanceLP(Line l, Point p)\n{\n    return abs(cross(l.p2 - l.p1, p - l.p1)) / (l.p2 - l.p1).abs();\n}\n\ndouble getDistanceSP(Segment s, Point p)\n{\n    if (dot(s.p2 - s.p1, p - s.p1) < 0.0)\n        return getDistance(p, s.p1);\n    else if (dot(s.p1 - s.p2, p - s.p2) < 0.0)\n        return getDistance(p, s.p2);\n    else\n        return getDistanceLP(s, p);\n}\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nint ccw(Point p0, Point p1, Point p2)\n{\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if (cross(a, b) > 0.0)\n        return COUNTER_CLOCKWISE;\n    else if (cross(a, b) < 0.0)\n        return CLOCKWISE;\n    else if (dot(a, b) < 0.0)\n        return ONLINE_BACK;\n    else if (a.norm() < b.norm())\n        return ONLINE_FRONT;\n    else\n        return ON_SEGMENT;\n}\n\nbool intersect(Point p0, Point p1, Point p2, Point p3)\n{\n    return ccw(p0, p1, p2) * ccw(p0, p1, p3) <= 0\n           && ccw(p2, p3, p0) * ccw(p2, p3, p1) <= 0;\n}\n\ndouble getDistance(Segment s1, Segment s2)\n{\n    if (intersect(s1.p1, s1.p2, s2.p1, s2.p2))\n        return 0.0;\n    else\n        return min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n                   min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\nint main()\n{\n    int query;\n    cin >> query;\n    Point p0, p1, p2, p3;\n    for (int q = 0; q < query; q++)\n    {\n        cin >> p0.x >> p0.y >> p1.x >> p1.y >> p2.x >> p2.y >> p3.x >> p3.y;\n        printf(\"%.10f\\n\", getDistance(Segment{p0, p1}, Segment{p2, p3}));\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <stdio.h>\n#include <vector>\n#include <math.h>\n#include <algorithm>\n\n\nusing namespace std;\n\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a) - (b)) < EPS) //?????????????????????????????????\n\n//??????p0,p1,p2????????????\n#define COUNTER_CLOCKWISE 1 //???????????§???????¨????????????´???\n#define CLOCKWISE  -1 //???????????§????¨????????????´???\n#define ONLINE_BACK 2 //p2,p0,p1??????????????§????????´?????????????????¨???\n#define ONLINE_FRONT -2//???????????§????????´?????????????????¨???\n#define ON_SEGMENT 0 //p2?????????p0 p1??????????????¨???\n\n\n//??????????????????????????????\nclass Point {\n\npublic:\n\n\tdouble x, y;//??§?¨????????????????x,y??????\n\n\tPoint(double x = 0, double y = 0) :x(x), y(y) {}\n\n\tPoint operator + (Point p) {\n\t\treturn Point(x + p.x, y + p.y);\n\t}\n\n\tPoint operator - (Point p) {\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n\n\tPoint operator * (double r) {\n\t\treturn Point(x * r, y * r);\n\t}\n\n\tPoint operator / (double r) {\n\t\treturn Point(x / r, y / r);\n\t}\n\n\tdouble norm() {\n\t\treturn x*x + y*y;\n\t}\n\n\t//?????????????????§???????????????\n\tdouble abs() {\n\t\treturn sqrt(norm());\n\t}\n\n\tbool operator < (const Point &p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p) const {\n\t\treturn fabs(x - p.x) < EPS &&  fabs(y - p.y) < EPS;\n\t}\n\n};\n\ntypedef Point Vector;\n\n//??????????????????????????????\ndouble dot(Vector a, Vector b) {\n\treturn a.x * b.x + a.y * b.y;\n}\n\n//??????????????????????????????\ndouble cross(Vector a, Vector b) {\n\treturn a.x * b.y - a.y * b.x;\n}\n\n\n\nclass Segment {\npublic:\n\tPoint p1, p2;\n\n\tSegment() {}\n\n\t//?????¨????°???±?????????\n\tPoint projection(Point p) {\n\t\tVector base = p2 - p1;\n\n\t\tdouble r = dot(p - p1, base) / base.norm();\n\t\treturn p1 + base * r;\n\t}\n\n\t//????°??????????\n\tPoint reflection(Point p) {\n\t\treturn p + (projection(p) - p)*2.0;\n\t}\n\n\n};\n\n\ntypedef Segment Line;\n\ntypedef vector<Point> Polygon;\n\n\n//?????????????????´?????????\nbool isOrthogonal(Vector a, Vector b);\n\n//??????????§??????¨?????????????????´?????????\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2);\n\n//???????????´?????????\nbool isOrthogonal(Segment s1, Segment s2);\n\n//???????????????????????????\nbool isParallel(Vector a, Vector b);\n\n//??????????§??????¨???????????????????????????\nbool isParallel(Point a1, Point a2, Point b1, Point b2);\n\n//?????????????????????\nbool isParallel(Segment s1, Segment s2);\n\n//?°???±?????????\nPoint projection(Segment s, Point p);\n\n//????°??????????\nPoint reflection(Segment s, Point p);\n\n//2??????????????¢?????????\ndouble getDistance(Point a, Point b);\n\n//??´?????¨???????????¢?????????\ndouble getDistanceLP(Line l, Point p);\n\n//????????¨???????????¢?????????\ndouble getDistanceSP(Segment s, Point p);\n\n//??????s1??¨??????s2????????¢?????????\ndouble getDistance(Segment s1, Segment s2);\n\n\n//???????????¢????????????\nint ccw(Point p0, Point p1, Point p2);\n\n//??????p1p2??¨??????p2p3???????????????\nbool intersect(Point p1, Point p2, Point p3, Point p4);\n\n//??????s1??¨??????s2???????????????\nbool intersect(Segment s1, Segment s2);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//?????????????????´?????????\nbool isOrthogonal(Vector a, Vector b) {\n\treturn equals(dot(a, b), 0.0);\n}\n\n//??????????§??????¨?????????????????´?????????\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n\treturn isOrthogonal(a1 - a2, b1 - b2);\n}\n\n//???????????´?????????\nbool isOrthogonal(Segment s1, Segment s2) {\n\treturn equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n//???????????????????????????\nbool isParallel(Vector a, Vector b) {\n\treturn equals(cross(a, b), 0.0);\n}\n\n//??????????§??????¨???????????????????????????\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n\treturn isParallel(a1 - a2, b1 - b2);\n}\n\n//?????????????????????\nbool isParallel(Segment s1, Segment s2) {\n\treturn equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n//?°???±?????????\nPoint projection(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / base.norm();\n\treturn s.p1 + base * r;\n}\n\n//????°??????????\nPoint reflection(Segment s, Point p) {\n\treturn p + (projection(s, p) - p)*2.0;\n}\n\n//2??????????????¢?????????\ndouble getDistance(Point a, Point b) {\n\treturn (a - b).abs();\n}\n\n//??´?????¨???????????¢?????????\ndouble getDistanceLP(Line l, Point p) {\n\treturn abs(cross(l.p2 - l.p1, p - l.p1) / (l.p2 - l.p1).abs());\n}\n\n//????????¨???????????¢?????????\ndouble getDistanceSP(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0) {\n\t\treturn (p - s.p1).abs();\n\t}\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0) {\n\t\treturn (p - s.p2).abs();\n\t}\n\n\treturn getDistanceLP(s, p);\n}\n\n//??????s1??¨??????s2????????¢?????????\ndouble getDistance(Segment s1, Segment s2) {\n\n\tif (intersect(s1, s2)) {\n\t\treturn 0.0;\n\t}\n\treturn min(min(getDistanceSP(s1,s2.p1), getDistanceSP(s1, s2.p2)),min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\n\n//???????????¢????????????\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\n\tif (cross(a, b) > EPS) {//???????¨?????????????\n\t\treturn COUNTER_CLOCKWISE;\n\t}\n\tif (cross(a, b) < -EPS) {//????¨?????????????\n\t\treturn CLOCKWISE;\n\t}\n\tif (dot(a, b) < -EPS) {//p2,p0,p1??????????????§????????´?????????????????????\n\t\treturn ONLINE_BACK;\n\t}\n\tif (a.norm() < b.norm()) {//p0,p1,p2??????????????§????????´?????????????????????\n\t\treturn ONLINE_FRONT;\n\t}\n\n\treturn ON_SEGMENT;//??????p0 p1??????p2???????????????\n\n}\n\n//??????p1p2??¨??????p2p3???????????????\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n\treturn ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 && ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0;\n}\n\n//??????s1??¨??????s2???????????????\nbool intersect(Segment s1, Segment s2) {\n\treturn intersect(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n\n\n\n\n\n\n\n//???\nclass Circle {\npublic:\n\tPoint c;//??????\n\tdouble r;//??????\n\tCircle(Point c = Point(), double r = 0.0) :c(c), r(r) {}\n};\n\n\nint main(void)\n{\n\tint n;\n\n\tSegment s1;\n\tSegment s2;\n\n\n\tcin >> n;\n\n\tfor (int i = 0; i < n; i++) {\n\t\tcin >> s1.p1.x >> s1.p1.y >> s1.p2.x >> s1.p2.y;\n\t\tcin >> s2.p1.x >> s2.p1.y >> s2.p2.x >> s2.p2.y;\n\n\t\tcout << getDistance(s1, s2) << endl;\n\n\t}\n\n\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n \nusing namespace std;\n \n#define EPS 1e-10\n#define equal(a,b) (fabs(a-b) < EPS)\n\nstruct Point{\n  double x,y;\n\n  Point(){}\n  Point(double x,double y) : x(x),y(y) {}\n\n  Point operator + (const Point &p)const{ return Point(x+p.x,y+p.y); }\n  Point operator - (const Point &p)const{ return Point(x-p.x,y-p.y); }\n  Point operator * (const double &k)const{ return Point(x*k,y*k); }\n  Point operator / (const double &k)const{ return Point(x/k,y/k); }\n};\n\ndouble cross(const Point &a,const Point &b){ return a.x*b.y - b.x*a.y; }\ndouble dot(const Point &a,const Point &b){ return a.x*b.x+a.y*b.y; }\ndouble norm(const Point &p){ return dot(p,p); }\ndouble abs(const Point &p){ return sqrt(norm(p)); }\n\nistream &operator >> (istream &is,Point &p){ \n  return is >> p.x >> p.y;\n}\n\ntypedef Point Vector;\n\n#define COUNTER_CLOCKWISE 1\n#define CLOCKWISE -1\n#define ONLINE_BACK 2\n#define ONLINE_FRONT -2\n#define ON_SEGMENT 0\ntypedef Point Vector;\n\nint ccw(Point p0,Point p1,Point p2){\n  Vector a = p1 - p0;\n  Vector b = p2 - p0;\n  if(cross(a,b) > EPS){ return COUNTER_CLOCKWISE; }\n  if(cross(a,b) < -EPS){ return CLOCKWISE; }\n  if(dot(a,b) < -EPS){ return ONLINE_BACK; }\n  if(norm(a) < norm(b)){ return ONLINE_FRONT; }\n  return ON_SEGMENT;\n}\n\nstruct Segment{\n  Point s,t;\n  Segment(){}\n  Segment(Point s,Point t) : s(s),t(t) {}\n};\n\nPoint projection(Segment s,Point p){\n  Vector b = s.t-s.s;\n  double t = dot(p-s.s,b)/norm(b);\n  return s.s+b*t;\n}\n\nbool isIntersectSP(const Segment &s,const Point &p){\n  return equal(ccw(s.s,s.t,p),0);\n}\n\nbool isIntersectSS(const Segment &a,const Segment &b){\n  Point s[2] = {a.s,a.t}, t[2] = {b.s,b.t};\n  return ccw(s[0],s[1],t[0])*ccw(s[0],s[1],t[1]) <= 0\n    && ccw(t[0],t[1],s[0])*ccw(t[0],t[1],s[1]) <= 0;\n}\n\ndouble distanceSP(const Segment &s,const Point &p){\n  Point r = projection(s,p);\n  if(isIntersectSP(s,r)){ return abs(r-p); }\n  return min(abs(s.s-p),abs(s.t-p));\n}\n\ndouble distanceSS(const Segment &a,const Segment &b){\n  if(isIntersectSS(a,b)){ return 0; }\n  return min(min(distanceSP(a,b.s),distanceSP(a,b.t)),\n             min(distanceSP(b,a.s),distanceSP(b,a.t)));\n}\n\nint main(){\n  int Q;\n  Segment s1,s2;\n  cin >> Q;\n  while(Q--){\n    cin >> s1.s >> s1.t >> s2.s >> s2.t;\n    printf(\"%.10f\\n\",distanceSS(s1,s2));\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#line 1 \"test/geometry/distance.test.cpp\"\n#define PROBLEM \"http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_D\"\n\n#include <bits/stdc++.h>\nusing namespace std;\nusing lint = long long;\n\n#line 1 \"test/geometry/../../library/geometry/geometry.cpp\"\nconst double eps = 1e-10;\ninline bool eq(double a, double b) { return fabs(a - b) < eps; }\nconst double pi = acos(-1);\n\nstruct Point {\n    double x, y;\n    Point() {}\n    Point(double x, double y) : x(x), y(y) {}\n    Point operator+(const Point &p) const { return Point(x + p.x, y + p.y); }\n    Point operator-(const Point &p) const { return Point(x - p.x, y - p.y); }\n    Point operator*(double k) const { return Point(x * k, y * k); }\n    Point operator/(double k) const { return Point(x / k, y / k); }\n};\nistream &operator>>(istream &is, Point &p) {\n    is >> p.x >> p.y;\n    return is;\n}\nostream &operator<<(ostream &os, Point p) {\n    os << fixed << setprecision(10) << p.x << \" \" << p.y;\n    return os;\n}\nbool sort_x(Point a, Point b) { return a.x != b.x ? a.x < b.x : a.y < b.y; }\nbool sort_y(Point a, Point b) { return a.y != b.y ? a.y < b.y : a.x < b.x; }\nbool sort_t(Point a, Point b) { return atan2(a.y, a.x) < atan2(b.y, a.y); }\nPoint rotate(double theta, const Point &p) {\n    return Point(cos(theta) * p.x - sin(theta) * p.y, sin(theta) * p.x + cos(theta) * p.y);\n}\ndouble radian_to_degree(double r) { return (r * 180.0 / pi); }\ndouble degree_to_radian(double d) { return (d * pi / 180.0); }\n\nstruct Line {\n    Point a, b;\n    Line() {}\n    Line(Point a, Point b) : a(a), b(b) {}\n    Line(double A, double B, double C) { // Ax + By = C\n        if (eq(A, 0))\n            a = Point(0, C / B), b = Point(1, C / B);\n        else if (eq(B, 0))\n            a = Point(C / A, 0), b = Point(C / A, 1);\n        else\n            a = Point(0, C / B), b = Point(C / A, 0);\n    }\n    Point vec() const { return b - a; }\n};\nstruct Segment : Line {\n    Segment() {}\n    Segment(Point a, Point b) : Line(a, b) {}\n};\n\nstruct Circle {\n    Point p;\n    double r;\n    Circle() {}\n    Circle(Point p, double r) : p(p), r(r) {}\n};\ndouble norm(const Point &a) { return a.x * a.x + a.y * a.y; }\ndouble abs(const Point &a) { return sqrt(norm(a)); }\ndouble cross(const Point &a, const Point &b) { return a.x * b.y - a.y * b.x; }\ndouble dot(const Point &a, const Point &b) { return a.x * b.x + a.y * b.y; }\n\nPoint project(Line l, Point p) {\n    double t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n    return l.a + (l.a - l.b) * t;\n}\nPoint reflect(Line l, Point p) { return p + (project(l, p) - p) * 2; }\nbool parallel(Line a, Line b) { return eq(cross(a.vec(), b.vec()), 0.0); }\nbool orthogonal(Line a, Line b) { return eq(dot(a.vec(), b.vec()), 0.0); }\nint ccw(const Point &a, Point b, Point c) {\n    b = b - a, c = c - a;\n    if (cross(b, c) > eps)\n        return +1; // \"COUNTER_CLOCKWISE\"\n    if (cross(b, c) < -eps)\n        return -1; // \"CLOCKWISE\"\n    if (dot(b, c) < 0)\n        return +2; // \"ONLINE_BACK\"\n    if (norm(b) < norm(c))\n        return -2; // \"ONLINE_FRONT\"\n    return 0;      // \"ON_SEGMENT\"\n}\nbool intersect(const Line &l, const Point &p) { return abs(ccw(l.a, l.b, p)) != 1; }\nbool intersect(const Line &l, const Line &m) { return !parallel(l, m) || abs(cross(l.vec(), m.b - l.a)) < eps; }\nbool intersect(const Segment &s, const Point &p) { return ccw(s.a, s.b, p) == 0; }\nbool intersect(const Line &l, const Segment &s) { return cross(l.vec(), s.a - l.a) * cross(l.vec(), s.b - l.a) < eps; }\ndouble distance(const Line &l, const Point &p);\nbool intersect(const Circle &c, const Line &l) { return distance(l, c.p) <= c.r + eps; }\nbool intersect(const Circle &c, const Point &p) { return abs(abs(p - c.p) - c.r) < eps; }\nbool intersect(const Segment &s, const Segment &t) {\n    return ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 && ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0;\n}\nint intersect(const Circle &c, const Segment &l) {\n    if (norm(project(l, c.p) - c.p) - c.r * c.r > eps)\n        return 0;\n    auto d1 = abs(c.p - l.a), d2 = abs(c.p - l.b);\n    if (d1 < c.r + eps && d2 < c.r + eps)\n        return 0;\n    if ((d1 < c.r - eps && d2 > c.r + eps) || (d1 > c.r + eps && d2 < c.r - eps))\n        return 1;\n    const Point h = project(l, c.p);\n    if (dot(l.a - h, l.b - h) < 0)\n        return 2;\n    return 0;\n}\nint intersect(Circle c1, Circle c2) {\n    if (c1.r < c2.r)\n        swap(c1, c2);\n    double d = abs(c1.p - c2.p);\n    if (c1.r + c2.r < d)\n        return 4; // do not cross\n    if (eq(c1.r + c2.r, d))\n        return 3; // circumscribed\n    if (c1.r - c2.r < d)\n        return 2; // intersect\n    if (eq(c1.r - c2.r, d))\n        return 1; // inscribed\n    return 0;     // one circle includes another\n}\n\ndouble distance(const Point &a, const Point &b) { return abs(a - b); }\ndouble distance(const Line &l, const Point &p) { return abs(p - project(l, p)); }\ndouble distance(const Line &l, const Line &m) { return intersect(l, m) ? 0 : distance(l, m.a); }\ndouble distance(const Segment &s, const Point &p) {\n    Point r = project(s, p);\n    if (intersect(s, r))\n        return abs(r - p);\n    return min(abs(s.a - p), abs(s.b - p));\n}\ndouble distance(const Segment &a, const Segment &b) {\n    if (intersect(a, b))\n        return 0;\n    return min({distance(a, b.a), distance(a, b.b), distance(b, a.a), distance(b, a.b)});\n}\ndouble distance(const Line &l, const Segment &s) {\n    if (intersect(l, s))\n        return 0;\n    return min(distance(l, s.a), distance(l, s.b));\n}\nPoint crosspoint(const Line &l, const Line &m) {\n    double A = cross(l.vec(), m.vec());\n    double B = cross(l.vec(), l.b - m.a);\n    if (eq(abs(A), 0.0) && eq(abs(B), 0.0))\n        return m.a;\n    return m.a + (m.b - m.a) * B / A;\n}\nPoint crosspoint(const Segment &l, const Segment &m) { return crosspoint(Line(l), Line(m)); }\npair<Point, Point> crosspoint(const Circle &c, const Line l) {\n    Point pr = project(l, c.p);\n    Point e  = (l.b - l.a) / abs(l.b - l.a);\n    if (eq(distance(l, c.p), c.r))\n        return {pr, pr};\n    double base = sqrt(c.r * c.r - norm(pr - c.p));\n    return {pr - e * base, pr + e * base};\n}\npair<Point, Point> crosspoint(const Circle &c, const Segment &l) {\n    Line aa = Line(l.a, l.b);\n    if (intersect(c, l) == 2)\n        return crosspoint(c, aa);\n    auto ret = crosspoint(c, aa);\n    if (dot(l.a - ret.first, l.b - ret.first) < 0)\n        ret.second = ret.first;\n    else\n        ret.first = ret.second;\n    return ret;\n}\npair<Point, Point> crosspoint(const Circle &c1, const Circle &c2) {\n    double d = abs(c1.p - c2.p);\n    double a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n    double t = atan2(c2.p.y - c1.p.y, c2.p.x - c1.p.x);\n    Point p1 = c1.p + Point(cos(t + a) * c1.r, sin(t + a) * c1.r);\n    Point p2 = c1.p + Point(cos(t - a) * c1.r, sin(t - a) * c1.r);\n    return {p1, p2};\n}\nvector<Point> convex_hull(vector<Point> &p) {\n    int n = (int)p.size(), k = 0;\n    if (n <= 2)\n        return p;\n    sort(p.begin(), p.end(), sort_x);\n    vector<Point> ch(2 * n);\n    for (int i = 0; i < n; ch[k++] = p[i++]) {\n        while (k >= 2 && cross(ch[k - 1] - ch[k - 2], p[i] - ch[k - 1]) < -eps)\n            --k;\n    }\n    for (int i = n - 2, t = k + 1; i >= 0; ch[k++] = p[i--]) {\n        while (k >= t && cross(ch[k - 1] - ch[k - 2], p[i] - ch[k - 1]) < -eps)\n            --k;\n    }\n    ch.resize(k - 1);\n    return ch;\n}\n#line 8 \"test/geometry/distance.test.cpp\"\n\nint main() {\n    cin.tie(nullptr);\n    ios::sync_with_stdio(false);\n    int q;\n    cin >> q;\n    vector<Segment> f, t;\n    for (int i = 0; i < q; ++i) {\n        Point a, b, c, d;\n        cin >> a >> b >> c >> d;\n        f.emplace_back(a, b);\n        t.emplace_back(c, d);\n    }\n    for (int i = 0; i < q; ++i) {\n        cout << fixed << setprecision(10) << distance(f[i], t[i]) << \"\\n\";\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <cmath>\n#include <array>\n#include <algorithm>\n\nusing Number = double;\n\nconst Number EPS = 1e-10;\nconst Number INF = 1e10;\nconst Number PI = acos(-1.0);\n\ninline int sign(Number x) { return (x < -EPS) ? -1 : (x > EPS) ? +1 : 0; }\ninline bool equal(Number a, Number b) { return sign(a - b) == 0; }\n\n// change between degree and radian\ninline Number to_radian(const Number degree) { return degree * PI / 180.0; }\ninline Number to_degree(const Number radian) { return radian * 180.0 / PI; }\n\n\n/**\n * Point in two dimensional\n */\nclass Point {\npublic:\n    Number x, y;\n\n    Point() {}\n    Point(Number x, Number y) : x(x), y(y) {}\n\n    // Arithmetic operator between points\n    Point operator+(const Point &rhs) const {\n        return Point(this->x + rhs.x, this->y + rhs.y);\n    }\n    Point operator-(const Point &rhs) const {\n        return Point(this->x - rhs.x, this->y - rhs.y);\n    }\n    Point operator*(const Point &rhs) const { // cross product between points\n        return Point(this->x * rhs.x - this->y * rhs.y,\n                     this->x * rhs.x + this->y * rhs.x);\n    }\n\n    // Unary operator and compound assignment operator\n    Point operator-() const {\n        return Point(-this->x, -this->y);\n    }\n    Point& operator+=(const Point &rhs) {\n        return *this = *this + rhs;\n    }\n    Point& operator-=(const Point &rhs) {\n        return *this = *this - rhs;\n    }\n\n    // Arithmetic operator between point and number\n    Point operator*(Number rhs) const {\n        return Point(this->x * rhs, this->y * rhs);\n    }\n    Point operator/(Number rhs) const {\n        return Point(this->x / rhs, this->y / rhs);\n    }\n\n    // Comparison operation\n    bool operator==(const Point &rhs) const {\n        return sign(this->x - rhs.x) == 0 && sign(this->y - rhs.y) == 0;\n    }\n    bool operator<(const Point &rhs) const {\n        return (this->x < rhs.x) || (this->x == rhs.x && this->y < rhs.y);\n    }\n\n    // Other operator\n    Number abs(void) const {\n        return sqrt(this->x * this->x + this->y * this->y);\n    }\n    Number abs2(void) const {\n        return this->x * this->x + this->y * this->y;\n    }\n    Number arg(void) const {\n        return atan2(this->y, this->x);\n    }\n    Number dot(const Point &rhs) {\n        return this->x * rhs.x + this->y * rhs.y;\n    }\n    Point rotate90(void) const {\n        return Point(-this->y, this->x);\n    }\n    Point rotate(double angle) const {\n        return Point(cos(angle) * this->x - sin(angle) * this->y,\n                     sin(angle) * this->x + cos(angle) * this->y);\n    }\n\n};\ninline Number dot(const Point &p1, const Point &p2) {\n    return p1.x * p2.x + p1.y * p2.y;\n}\ninline Number abs_cross(const Point &p1, const Point &p2) {\n    return p1.x * p2.y - p1.y * p2.x;\n}\n// Output of a point\nstd::ostream& operator<<(std::ostream &os, const Point &p) {\n    return os <<  p.x << ' ' << p.y;\n}\n// Input of a point\nstd::istream& operator>>(std::istream &is, Point &p) {\n    return is >> p.x >> p.y;\n}\n\n// Counter-Clockwise predicate (a, b, c)\nenum CCW {\n    COUNTER_CLOCKWISE = 1,      // counter clockwise\n    CLOCKWISE         = -1,     // clockwise\n    ONLINE_FRONT      = 2,      // a--c--b on line\n    ONLINE_BACK       = -2,      // c--a--b on line\n    ON_SEGMENT        = 0,     // a--b--c on line\n};\nCCW ccw(const Point &a, Point b, Point c) {\n    b -= a;  c -= a;\n    if (abs_cross(b, c) > 0) return COUNTER_CLOCKWISE;\n    if (abs_cross(b, c) < 0) return CLOCKWISE;\n    if (dot(b, c) < 0)       return ONLINE_BACK;\n    if (b.abs2() < c.abs2())   return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\n\n/**\n * Line in two dimensional\n */\nclass Line : public std::array<Point, 2> {\npublic:\n    Line() {}\n    Line(const Point &p1, const Point &p2) {\n        (*this)[0] = p1;\n        (*this)[1] = p2;\n    }\n};\n\n// Input of a line\nstd::istream& operator>>(std::istream &is, Line &l) {\n    return is >> l[0] >> l[1];\n}\ninline CCW ccw(const Line &l, const Point &p) {\n    return ccw(l[0], l[1], p);\n}\n\n\n/**\n * Segment in two dimensional\n */\nclass Segment : public Line {\npublic:\n    Segment() {}\n    Segment(const Point &p1, const Point &p2) : Line(p1, p2) {}\n};\n\n\n/**\n * Circle in two dimensional\n */\nclass Circle : public Point {\npublic:\n    Number r;\n    Circle(const Point &p, Number r = 0.0) : Point(p), r(r) {}\n};\n// Input of a circle\nstd::istream& operator>>(std::istream &is, Circle &c) {\n    return is >> c.x >> c.y >> c.r;\n}\n\n\n\n/**\n * Intersection testing\n */\ninline bool IsOrthogonal(const Line &l1, const Line &l2) {\n    return equal(dot(l1[0] - l1[1], l2[0] - l2[1]), 0.0);\n}\ninline bool IsParallel(const Line &l1, const Line &l2) {\n    return equal(abs_cross(l1[0] - l1[1], l2[0] - l2[1]), 0.0);\n}\n\ninline bool IsIntersect(const Line &l, const Point &p) {\n    return abs(ccw(l[0], l[1], p)) != 1;\n}\ninline bool IsIntersect(const Segment &s, const Point &p) {\n    return ccw(s[0], s[1], p) == 0;\n}\ninline bool IsIntersect(const Line &l1, const Line l2) {\n    return !IsParallel(l1, l2) || IsParallel(l1, Line(l1[0], l2[0]));\n}\ninline bool IsIntersect(const Line &l, const Segment &s) {\n    return abs_cross(l[1] - l[0], s[0] - l[0]) *\n        abs_cross(l[1] - l[0], s[1] - l[0]) < EPS;\n}\ninline bool IsIntersect(const Segment &s1, const Segment &s2) {\n    return ccw(s1[0], s1[1], s2[0]) * ccw(s1[0], s1[1], s2[1]) <= 0 &&\n        ccw(s2[0], s2[1], s1[0]) * ccw(s2[0], s2[1], s1[1]) <= 0;\n}\n\n\n/**\n * Intersection point and Distance\n */\nPoint Projection(const Line &l, const Point &p) {\n    Point dir = l[1] - l[0];\n    Number t = dot(p - l[0], dir) / dir.abs2();\n    return l[0] + dir * t;\n}\nPoint Reflection(const Line &l, const Point &p) {\n    return Projection(l, p) * 2.0 - p;\n}\n\nPoint CrossPoint(const Line &s1, const Line &s2) {\n    Point base = s2[1] - s2[0];\n    Number d1 = abs(abs_cross(base, s1[0] - s2[0]));\n    Number d2 = abs(abs_cross(base, s1[1] - s2[0]));\n    Number t = d1 / (d1 + d2);\n    return s1[0] + (s1[1] - s1[0]) * t;\n}\n\ninline Number Distance(const Point &p1, const Point &p2) {\n    return (p1 - p2).abs();\n}\ninline Number Distance(const Line &l, const Point &p) {\n    return (p - Projection(l, p)).abs();\n}\nNumber Distance(const Segment &s, const Point &p) {\n    // const Point r = Projection(s, p);\n    // if (IsIntersect(s, r)) return (r - p).abs();\n    // return std::min((s[0] - p).abs(), (s[1] - p).abs());\n    if (dot(s[1] - s[0], p - s[0]) < 0.0) return (p - s[0]).abs();\n    if (dot(s[0] - s[1], p - s[1]) < 0.0) return (p - s[1]).abs();\n    return (p - Projection(s, p)).abs();\n}\ninline Number Distance(const Line &l1, const Line &l2) {\n    return IsIntersect(l1, l2) ? 0 : Distance(l1, l2[0]);\n}\nNumber Distance(const Line &l, const Segment &s) {\n    if (IsIntersect(l, s)) return 0.0;\n    return std::min(Distance(l, s[0]), Distance(l, s[1]));\n}\nNumber Distance(const Segment &s1, const Segment &s2) {\n    if (IsIntersect(s1, s2)) return 0.0;\n    return std::min({Distance(s1, s2[0]), Distance(s1, s2[1]),\n                Distance(s2, s1[0]), Distance(s2, s1[1])});\n}\n\nint main()\n{\n    std::cout << std::fixed << std::setprecision(15);\n\n    Segment s1, s2;\n    int q;\n\n    std::cin >> q;\n\n    while (q--) {\n        std::cin >> s1 >> s2;\n        std::cout << Distance(s1, s2) << '\\n';\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "////////////////////////////////////////////////////////////////////////////////\n// 平面幾何\n\n// 型変換できるもの\n//   double  -> Point\n//   Segment -> Line\n\n// 誤差の話：絶対誤差でも相対誤差でも死ぬ例\n// int main(){\n//   const double EPS = 1e-9;\n//   double a = 1.3, b = 1e8, c = a + b;\n//   c = c - b;\n//   printf(\"%d\\n\", equal(a, c));          // => 0\n//   printf(\"%d\\n\", relative_equal(a, c)); // => 0\n// }\n\n////////////////////\n// ライブラリ\n#include<cmath>\n#include<algorithm>\n#include<cassert>\n////////////////////\n// 定数\nconst double EPS = 1e-9;                // |EPS|未満の数は0として扱う\n////////////////////\n// 構造体\nstruct Point {\n  double x, y;\n  Point(const double d = 0.0) :x(d), y(d) {}\n  Point(const double x, const double y) :x(x), y(y) {}\n};\nstruct Segment {\n  Point initial, terminal;\n  Segment(const Point& initial, const Point& terminal) :initial(initial), terminal(terminal) {}\n  Segment(const double x1, const double y1, const double x2, const double y2) :initial(x1, y1), terminal(x2, y2) {}\n};\nstruct Line {\n  Point initial, terminal;\n  Line(const Point& initial, const Point& terminal) :initial(initial), terminal(terminal) {}\n  Line(const double x1, const double y1, const double x2, const double y2) :initial(x1, y1), terminal(x2, y2) {}\n  Line(const Segment& s) :initial(s.initial), terminal(s.terminal) {}\n};\n////////////////////\n// 実装\nbool relative_equal(const double d1, const double d2) {return d1 == 0 ? std::abs(d2) < EPS : std::abs((d1 - d2) / d1) < EPS;}\n// 演算子オーバーロード\nbool operator==(const Point& lhs, const Point& rhs) {return relative_equal(lhs.x, rhs.x) && relative_equal(lhs.y, rhs.y);}\nbool operator<(const Point& lhs, const Point& rhs) {return lhs.x != rhs.x ? lhs.x < rhs.x : lhs.y < rhs.y;}\nbool operator>(const Point& lhs, const Point& rhs) {return lhs.x != rhs.x ? lhs.x > rhs.x : lhs.y > rhs.y;}\nbool operator!=(const Point& lhs, const Point& rhs) {return !(lhs == rhs);}\nbool operator<=(const Point& lhs, const Point& rhs) {return !(lhs > rhs);}\nbool operator>=(const Point& lhs, const Point& rhs) {return !(lhs < rhs);}\nconst Point operator+(const Point& lhs, const Point& rhs) {return Point(lhs.x + rhs.x, lhs.y + rhs.y);}\nconst Point operator-(const Point& lhs, const Point& rhs) {return Point(lhs.x - rhs.x, lhs.y - rhs.y);}\nconst Point operator*(const Point& lhs, const Point& rhs) {return Point(lhs.x * rhs.x, lhs.y * rhs.y);}\nconst Point operator/(const Point& lhs, const Point& rhs) {return Point(lhs.x / rhs.x, lhs.y / rhs.y);}\nconst Point operator-(const Point& p) {return Point(-p.x, -p.y);}\n// 点\ndouble abs(const Point& p) {return std::hypot(p.x, p.y);}\ndouble norm(const Point& p) {return p.x * p.x + p.y * p.y;}\ndouble dot(const Point& a, const Point& b) {return a.x * b.x + a.y * b.y;}\ndouble cross(const Point& a, const Point& b) {return a.x * b.y - a.y * b.x;}\n// const Point normalize(const Point& p) {return p / abs(p);}\n// 線\nbool parallel(const Line& l1, const Line& l2) {return std::abs(cross(l2.terminal - l2.initial, l1.terminal - l1.initial)) < EPS;}\nbool orthogonal(const Line& l1, const Line& l2) {return std::abs(dot(l2.terminal - l2.initial, l1.terminal - l1.initial)) < EPS;}\n// 点の位置関係\nenum POSITION {ONLINE_FRONT = -2, CLOCKWISE, ON_SEGMENT, COUNTER_CLOCKWISE, ONLINE_BACK}; \nPOSITION ccw(const Point& a, const Point& b, const Point& p) {\n  Point v1 = b - a;\n  Point v2 = p - a;\n  if(cross(v1, v2) >= EPS) return COUNTER_CLOCKWISE;\n  if(cross(v1, v2) <= -EPS) return CLOCKWISE;\n  if(dot(v1, v2) <= -EPS) return ONLINE_BACK;\n  if(relative_equal(norm(v2), - norm(v1))) return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\n// 交差判定\nbool intersect(const Point& p1, const Point& p2) {return p1 == p2;}\nbool intersect(const Point& p, const Segment& s) {return abs(p - s.initial) + abs(p - s.terminal) - abs(s.initial - s.terminal) <= EPS;}\nbool intersect(const Segment& s, const Point& p) {return intersect(p, s);}\nbool intersect(const Point& p, const Line& l) {return !parallel(Line(p, l.initial), Line(p, l.terminal));}\nbool intersect(const Line& l, const Point& p) {return intersect(p, l);}\nbool intersect(const Segment& s1, const Segment& s2) {\n  return ccw(s1.initial, s1.terminal, s2.initial) * ccw(s1.initial, s1.terminal, s2.terminal) <= 0\n      && ccw(s2.initial, s2.terminal, s1.initial) * ccw(s2.initial, s2.terminal, s1.terminal) <= 0;\n}\nbool intersect(const Segment& s, const Line& l) {\n  auto v1 = l.terminal - l.initial;\n  auto v2 = s.initial  - l.initial;\n  auto v3 = s.terminal - l.initial;\n  return cross(v1, v2) * cross(v1, v3) <= EPS;\n}\nbool intersect(const Line& l, const Segment& s) {return intersect(s, l);}\nbool intersect(const Line& l1, const Line& l2) {return !parallel(l1, l2) || intersect(l1.initial, l2);}\n// 点の移動\nPoint projection(const Point& p, const Line& l) {\n  auto v = l.initial - l.terminal;\n  return l.initial + dot(p - l.initial, v) / norm(v) * v;\n}\nPoint projection(const Line& l, const Point& p) {return projection(p, l);}\nPoint reflection(const Point& p, const Line& l) {return p + 2 * (projection(p, l) - p);}\nPoint reflection(const Line& l, const Point& p) {return reflection(p, l);}\n// 距離\ndouble distance(const Point& p1, const Point& p2) {\n  auto p = p1 - p2;\n  return hypot(p.x, p.y);\n}\ndouble distance(const Point& p, const Segment& s) {\n  auto r = projection(s, p);\n  return intersect(r, s) ? distance(p, r) : std::min(distance(p, s.initial), distance(p, s.terminal));\n}\ndouble distance(const Segment& s, const Point& p) {return distance(p, s);}\ndouble distance(const Point& p, const Line& l) {return distance(p, projection(p, l));}\ndouble distance(const Line& l, const Point& p) {return distance(p, l);}\ndouble distance(const Segment& s1, const Segment& s2) {\n  return intersect(s1, s2) ? 0.0 : std::min({distance(s1, s2.initial), distance(s1, s2.terminal), distance(s2, s1.initial), distance(s2, s1.terminal)});\n}\ndouble distance(const Segment& s, const Line& l) {return intersect(s, l) ? 0.0 : std::min(distance(s.initial, l), distance(s.terminal, l));}\ndouble distance(const Line& l,const Segment& s) {return distance(s, l);}\ndouble distance(const Line& l1, const Line& l2) {return intersect(l1, l2) ? 0.0 : distance(l1.initial, l2);}\n// 交点\nconst Point crosspoint(const Line& l1, const Line& l2) {\n  assert(intersect(l1, l2));\n  if(parallel(l1, l2)) return l1.initial;                   // 平行なときl1の始点を返す\n  double A = cross(l1.terminal - l1.initial, l2.terminal - l2.initial);\n  double B = cross(l1.terminal - l1.initial, l1.terminal - l2.initial);\n  return l2.initial + B / A * (l2.terminal - l2.initial);\n}\nconst Point crosspoint(const Segment& s, const Line& l) {\n  assert(intersect(s, l));\n  if(parallel(s, l)) return s.initial;\n  Point cp = crosspoint(Line(s), l);\n  assert(intersect(s, cp));\n  return cp;\n}\nconst Point crosspoint(const Line& l, const Segment& s) {return crosspoint(s, l);}\nconst Point crosspoint(const Segment& s1, const Segment& s2) {\n  assert(intersect(s1, s2));\n  if(parallel(s1, s2)) {                                    // 平行なときいずれかの端点を返す\n    if(intersect(s1.initial,  s2)) return s1.initial;\n    if(intersect(s1.terminal, s2)) return s1.terminal;\n    if(intersect(s2.initial,  s1)) return s2.initial;\n    if(intersect(s2.terminal, s1)) return s2.terminal;\n  }\n  return crosspoint(Line(s1), Line(s2));\n}\n// デバッグ用\n#include<bits/stdc++.h>\nusing namespace std;\nvoid print(const Point& p) {cout<<\"point: \"; cout<<\"(\"<<p.x<<\",\"<<p.y<<\")\";}\nvoid print(const Segment& l) {cout<<\"segment: \"; print(l.initial); cout<<\" - \";print(l.terminal);}\nvoid print(const Line& l) {cout<<\"line: \"; print(l.initial); cout<<\" - \";print(l.terminal);}\n////////////////////////////////////////////////////////////////////////////////\n// 多角形\n//   辺をメンバ変数にしない→メモリ節約・edge(void)がO(頂点数)\n#include<vector>\n#include<algorithm>\n#include<utility>\nclass Polygon {\npublic:\n  void add(const Point& p) {\n    if(!vertex_.empty()) {\n      if(!edge_.empty()) edge_.pop_back();\n      edge_.push_back(Segment(vertex_.back(), p));\n      edge_.push_back(Segment(p, vertex_.front()));\n    }\n    vertex_.push_back(p);\n  }\n  int size() const {return vertex_.size();}\n  Point vertex(const int n) const {return vertex_.at(n);}\n  Segment edge(const int n) const {return edge_.at(n);}\n  const std::vector<Point>& vertex() const {return vertex_;}\n  const std::vector<Segment>& edge() const {return edge_;}\n  bool touch(const Point& p) const {\n    return std::any_of(edge_.begin(), edge_.end(), [=](const Segment& s) {return ccw(s.initial, s.terminal, p) == ON_SEGMENT;});\n  }\n  bool intersect(const Point& p) const {\n    bool in = false;                    // p=(x,y)から(INF,y)への半直線と多角形とが交差する回数 mod 2\n    for(const auto& e: edge()) {\n      if(::intersect(p, e)) return true;\n      Point a = e.initial  - p;\n      Point b = e.terminal - p;\n      if(a.y > b.y) std::swap(a, b);\n      if(a.y <= EPS && -EPS < b.y && cross(a, b) < EPS) in = !in;\n    }\n    return in;\n  }\n  void clear() {\n    vertex_.clear();\n    edge_.clear();\n  };\nprivate:\n  std::vector<Point> vertex_;\n  std::vector<Segment> edge_;\n};\n////////////////////////////////////////////////////////////////////////////////\n#include<bits/stdc++.h>\nusing namespace std;\nint main() {\n  int n;\n  for(cin >> n; n > 0; --n) {\n    int a, b, c, d, e, f, g, h;\n    cin >> a >> b >> c >> d >> e >> f >> g >> h;\n    Segment s(Point(a, b), Point(c, d));\n    Segment t(Point(e, f), Point(g, h));\n//     // A\n//     cout << (parallel(s, t) ? 2 : (orthogonal(s, t) ? 1 : 0)) << endl;\n//     // B\n//     cout << (intersect(s, t) ? 1 : 0) << endl;\n//     // C\n//     auto cp = crosspoint(s, t);\n//     cout << setprecision(10) << fixed << cp.x << \" \" << cp.y << endl;\n    // D\n    cout << setprecision(10) << fixed << distance(s, t) << endl;\n  }\n\n//   Polygon polygon;\n//   for(cin >> n; n > 0; --n) {\n//     int x, y;\n//     cin >> x >> y;\n//     polygon.add(Point(x, y));\n//   }\n\n//   int q;\n//   for(cin >> q; q > 0; --q) {\n//     int x, y;\n//     cin >> x >> y;\n//     Point p(x, y);\n//     cout << (polygon.touch(p) ? 1 : (polygon.intersect(p) ? 2 : 0)) << endl;\n//   }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#include<stdio.h>\n#include<cmath>\nusing namespace std;\n\nstruct point{\n    int x,y;\n};\n\nstruct line{\n    point s,t;\n};\n\nstruct bec{\n    int x,y;\n};\n\ndouble keisan(point p, line l){\n    bec p1,p2,bl,bm;\n    p1.x = p.x-l.s.x; p1.y=p.y-l.s.y;\n    p2.x = p.x-l.t.x; p2.y=p.y-l.t.y;\n\n    bl.x = l.t.x-l.s.x; bl.y = l.t.y-l.s.y;\n    bm.x=-1*bl.x; bm.y=-1*bl.y;\n\n    double cp1,cp2;\n    if(sqrt((double)p1.x*(double)p1.x+(double)p1.y*(double)p1.y)==0||sqrt((double)p2.x*(double)p2.x+(double)p2.y*(double)p2.y)==0) return 0;\n    cp1 = ((double)p1.x*(double)bl.x+(double)p1.y*(double)bl.y)\n    /(sqrt((double)p1.x*(double)p1.x+(double)p1.y*(double)p1.y)*sqrt((double)bl.x*(double)bl.x+(double)bl.y*(double)bl.y));\n    cp2 = ((double)p2.x*(double)bm.x+(double)p2.y*(double)bm.y)\n    /(sqrt((double)p2.x*(double)p2.x+(double)p2.y*(double)p2.y)*sqrt((double)bm.x*(double)bm.x+(double)bm.y*(double)bm.y));\n\n    if(cp1<=0){\n        return sqrt((double)p1.x*(double)p1.x+(double)p1.y*(double)p1.y);\n    }\n    else if(cp2<=0){\n        return sqrt((double)p2.x*(double)p2.x+(double)p2.y*(double)p2.y);\n    }\n    else{\n        double d = sqrt((double)p1.x*(double)p1.x+(double)p1.y*(double)p1.y);\n        double k=d*cp1;\n        double kyori = sqrt((double)bl.x*(double)bl.x+(double)bl.y*(double)bl.y);\n        if(kyori==0) return d;\n        double s=((double)l.t.y-(double)l.s.y)/kyori;\n        double c=((double)l.t.x-(double)l.s.x)/kyori;\n        return sqrt(((k*s+l.s.y)-p.y)*((k*s+l.s.y)-p.y)+((k*c+l.s.x)-p.x)*((k*c+l.s.x)-p.x));\n\n    }\n}\n\nvoid solve(line l,line m){\n    double a,b;\n    long ta,tb,tc,td;\n    ta=(m.s.x-m.t.x)*(l.s.y-m.s.y)+(m.s.y-m.t.y)*(m.s.x-l.s.x);\n    tb=(m.s.x-m.t.x)*(l.t.y-m.s.y)+(m.s.y-m.t.y)*(m.s.x-l.t.x);\n    tc=(l.s.x-l.t.x)*(m.s.y-l.s.y)+(l.s.y-l.t.y)*(l.s.x-m.s.x);\n    td=(l.s.x-l.t.x)*(m.t.y-l.s.y)+(l.s.y-l.t.y)*(l.s.x-m.t.x);\n    if(tc*td<0 && ta*tb<0){\n        cout<<\"0\"<<endl;\n    }\n    else{\n        a=min(keisan(l.s,m),keisan(l.t,m));\n        b=min(keisan(m.s,l),keisan(m.t,l));\n        printf(\"%.8f\\n\",min(a,b));\n    }\n}\n\n\nint main(){\n    int n,x0,x1,x2,x3,y0,y1,y2,y3;\n    cin>>n;\n\n    point s1,s2,t1,t2;\n    line l,m;\n\n    for(int i=0;i<n;i++){\n        cin>>x0>>y0>>x1>>y1>>x2>>y2>>x3>>y3;\n        s1.x=x0; s1.y=y0;\n        t1.x=x1; t1.y=y1;\n        s2.x=x2; s2.y=y2;\n        t2.x=x3; t2.y=y3;\n\n        l.s=s1; l.t=t1;\n        m.s=s2; m.t=t2;\n        solve(l,m);\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n//#define int long long\n\nusing namespace std;\nusing LL = long long;\nusing P = pair<int, int>;\nusing Tapris = tuple<int, int, int>;\n\n#define FOR(i, a, n) for(int i = (int)(a); i < (int)(n); ++i)\n#define REP(i, n) FOR(i, 0, n)\n\n#define pb(a) push_back(a)\n#define all(x) (x).begin(),(x).end()\n\nconst int INF = (int)1e9;\nconst LL INFL = (LL)1e15;\nconst int MOD = 1e9 + 7;\n\nint dy[]={0, 0, 1, -1, 0};\nint dx[]={1, -1, 0, 0, 0};\n\ntypedef long double LD;\ntypedef complex<LD> Point;\ntypedef pair<Point, Point> Line;\nconst LD EPS = 1e-10;\n#define X real() // x座標を取得\n#define Y imag() // y座標を取得\n#define LE(n,m) ((n) < (m) + EPS)\n#define GE(n,m) ((n) + EPS > (m))\n#define EQ(n,m) (abs((n)-(m)) < EPS)\n\n// 内積 dot(a, b) = |a||b|cosθ\nLD dot(Point a, Point b){\n    return (conj(a)*b).X;\n}\n\n// 外積 cross(a, b) = |a||b|sinθ\nLD cross(Point a, Point b){\n    return (conj(a)*b).Y;\n}\n\nint ccw(Point a, Point b, Point c){\n    b -= a; c -= a;\n    if (cross(b, c) > 0)   return +1;       // counter clockwise\n    if (cross(b, c) < 0)   return -1;       // clockwise\n    if (dot(b, c) < 0)     return +2;       // c--a--b on line\n    if (norm(b) < norm(c)) return -2;       // a--b--c on line\n    return 0;\n}\n\n\n// 交差判定 (isec) ****************************\n// 点　 := 平面座標にある点\n// 直線 := 点と点を通るどこまでも続く線\n// 線分 := 点と点を結んでその両端で止まっている線\n\n// 直線と点\nbool isecLP(Point a1, Point a2, Point b){\n    return abs(ccw(a1, a2, b)) != 1;\n}\n\n// 直線と直線\nbool isecLL(Point a1, Point a2, Point b1, Point b2) {\n    return !isecLP(a2-a1, b2-b1, 0) || isecLP(a1, b1, b2);\n}\n\n// 直線と線分\nbool isecLS(Point a1, Point a2, Point b1, Point b2) {\n    return cross(a2-a1, b1-a1) * cross(a2-a1, b2-a1) < EPS;\n}\n\n// 線分と線分\nbool isecSS(Point a1, Point a2, Point b1, Point b2) {\n    return ccw(a1, a2, b1)*ccw(a1, a2, b2) <= 0 && ccw(b1, b2, a1)*ccw(b1, b2, a2) <= 0;\n}\n\n// 線分と点\nbool isecSP(Point a1, Point a2, Point b) {\n    return !ccw(a1, a2, b);\n}\n\n// ********************************************\n\n\n// 距離 (dist) ********************************\n// 点pの直線aへの射影点を返す\nPoint proj(Point a1, Point a2, Point p){\n    return a1 + dot(a2-a1, p-a1) / norm(a2-a1) * (a2-a1);\n}\n\n// 点pの直線aへの反射点を返す\nPoint reflection(Point a1, Point a2, Point p){\n    return 2.0L*proj(a1, a2, p) - p;\n}\n\n// 直線と点\nLD distLP(Point a1, Point a2, Point p){\n    return abs(proj(a1, a2, p) - p);\n}\n\n// 直線と直線\nLD distLL(Point a1, Point a2, Point b1, Point b2) {\n    return isecLL(a1, a2, b1, b2) ? 0 : distLP(a1, a2, b1);\n}\n\n// 直線と線分\nLD distLS(Point a1, Point a2, Point b1, Point b2) {\n    return isecLS(a1, a2, b1, b2) ? 0 : min(distLP(a1, a2, b1), distLP(a1, a2, b2));\n}\n\n// 線分と点\nLD distSP(Point a1, Point a2, Point p) {\n    Point r = proj(a1, a2, p);\n    if(isecSP(a1, a2, r)) return abs(r-p);\n    return min(abs(a1-p), abs(a2-p));\n}\n\n// 線分と線分\nLD distSS(Point a1, Point a2, Point b1, Point b2) {\n    if(isecSS(a1, a2, b1, b2)) return 0;\n    return min(min(distSP(a1, a2, b1), distSP(a1, a2, b2)), min(distSP(b1, b2, a1), distSP(b1, b2, a2)));\n}\n\n// ********************************************\n\n\n// 2直線の交点 (crosspoint) *******************\nPoint crosspointLL(Point a1, Point a2, Point b1, Point b2){\n    LD d1 = cross(b2-b1, b1-a1);\n    LD d2 = cross(b2-b1, a2-a1);\n    if (EQ(d1, 0) && EQ(d2, 0)) return a1;\n    if (EQ(d2, 0)) throw \"not exist crosspoint\";\n    return a1 + d1/d2 * (a2-a1);\n}\n// ********************************************\n\n\n/*************** using variables ***************/\nPoint p[4];\nint q;\n/**********************************************/\n\nsigned main(){\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    \n    cin >> q;\n    REP(i, q){\n        LD xp, yp;\n        REP(i, 4){\n            cin >> xp >> yp;\n            p[i] = Point(xp, yp);\n        }\n        LD ans = distSS(p[0], p[1], p[2], p[3]);\n        printf(\"%.10Lf\\n\", ans);\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n\ninline int sign(const double &x){\n    if(x>EPS) return 1;\n    else if(x<-EPS) return -1;\n    return 0;\n}\n\n/*   点  */\nstruct Point{\n    double x,y;\n\n    Point(double x=0,double y=0):x(x),y(y){}\n\n    Point operator + (Point p) { return Point(x+p.x,y+p.y); }\n    Point operator - (Point p) { return Point(x-p.x,y-p.y); }\n    Point operator * (double k) { return Point(k*x,k*y); }\n    Point operator / (double k) { return Point(x/k,y/k); }\n\n    //向量的大小\n    double abs(){ return sqrt(norm()); }\n    double norm() { return x*x+y*y; }\n\n    bool operator < (const Point & p) const{\n        return x!=p.x?x<p.x:y<p.y;\n    }\n\n    bool operator == (const Point & p) const {\n        return fabs(x-p.x)<EPS&&fabs(y-p.y)<EPS;\n    }\n};\n\n//两点间的距离\ndouble getDistance(Point a,Point b){\n    return (a-b).abs();\n}\n\n/*   向量  */\ntypedef Point Vector;\n\n//向量a和b的内积\ndouble dot(Vector a,Vector b){\n    return a.x*b.x+a.y*b.y;\n}\n//向量a和b的外积\ndouble cross(Vector a,Vector b){\n    return a.x*b.y-a.y*b.x;\n}\n\n/*   线段  */\nstruct Segment{\n    Point p1,p2;\n};\n\n/*   直线  */\ntypedef Segment Line;\n\n//点到直线的距离\ndouble getDistanceLP(Line l,Point p){\n    return abs(cross(l.p2-l.p1,p-l.p1)/(l.p2-l.p1).abs());\n}\n\n//点到线段的距离\ndouble getDistanceSP(Segment s,Point p){\n    if(dot(s.p2-s.p1,p-s.p1)<0.0) return (p-s.p1).abs();\n    if(dot(s.p1-s.p2,p-s.p2)<0.0) return (p-s.p2).abs();\n    return getDistanceLP(s,p);\n}\n\n//判断p2与向量p1-p0的位置关系\n\nconst int COUNTER_CLOCKWISE = -1;   //逆时针\nconst int CLOCKWISE = 1;            //顺时针\nconst int ON_SEGMENT = 0;           //在线段上\n\nint ccw(Point p0,Point p1,Point p2){\n    Vector a=p1-p0;\n    Vector b=p2-p0;\n    if(cross(a,b)>EPS) return COUNTER_CLOCKWISE;\n    if(cross(a,b)<-EPS) return CLOCKWISE;\n    if(dot(a,b)<-EPS) return 2;\n    if(a.norm()<b.norm()) return -2;\n    return ON_SEGMENT;\n}\n\n//判断线段p1p2与线段p3p4是否相交\nbool intersect(Point p1,Point p2,Point p3,Point p4){\n    return ( ccw(p1,p2,p3)*ccw(p1,p2,p4)<=0 &&\n             ccw(p3,p4,p1)*ccw(p3,p4,p2)<=0 );\n}\n\nbool intersect(Segment s1,Segment s2){\n    return intersect(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n\n//线段与线段的距离\ndouble getDistance(Segment s1,Segment s2){\n    if(intersect(s1,s2)) return 0.0;\n    return min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),\n               min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n}\n\n/* 直线正交\n * 判断向量a，b是否正交 =》a，b的内积为0\n */\nbool isOrthogonal(Vector a,Vector b){\n    return equals(dot(a,b),0.0);\n}\n\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n    return isOrthogonal(a1-a2,b1-b2);\n}\n\n/* 直线平行\n * 判断向量a，b是否平行 =》a，b的内积为0\n */\nbool isParallel(Vector a,Vector b){\n    return equals(cross(a,b),0.0);\n}\n\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n    return isParallel(a1-a2,b1-b2);\n}\n\nstruct Circle{\n    Point c;\n    double r;\n    Circle(Point c = Point() ,double r = 0.0 ):c(c),r(r){}\n};\n\n/*   多边形  */\ntypedef vector<Point> Polygon;\n\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    while(n--){\n        Point p1,p2,p3,p4;\n        scanf(\"%lf%lf%lf%lf%lf%lf%lf%lf\",&p1.x,&p1.y,&p2.x,&p2.y,&p3.x,&p3.y,&p4.x,&p4.y);\n        printf(\"%.10f\\n\",getDistance(Segment{p1,p2},Segment{p3,p4}));\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <stdio.h>\n#include <vector>\n#include <math.h>\n#include <algorithm>\n\n\nusing namespace std;\n\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a) - (b)) < EPS) //?????????????????????????????????\n\n//??????p0,p1,p2????????????\n#define COUNTER_CLOCKWISE 1 //???????????§???????¨????????????´???\n#define CLOCKWISE  -1 //???????????§????¨????????????´???\n#define ONLINE_BACK 2 //p2,p0,p1??????????????§????????´?????????????????¨???\n#define ONLINE_FRONT -2//???????????§????????´?????????????????¨???\n#define ON_SEGMENT 0 //p2?????????p0 p1??????????????¨???\n\n\n//??????????????????????????????\nclass Point {\n\npublic:\n\n\tdouble x, y;//??§?¨????????????????x,y??????\n\n\tPoint(double x = 0, double y = 0) :x(x), y(y) {}\n\n\tPoint operator + (Point p) {\n\t\treturn Point(x + p.x, y + p.y);\n\t}\n\n\tPoint operator - (Point p) {\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n\n\tPoint operator * (double r) {\n\t\treturn Point(x * r, y * r);\n\t}\n\n\tPoint operator / (double r) {\n\t\treturn Point(x / r, y / r);\n\t}\n\n\tdouble norm() {\n\t\treturn x*x + y*y;\n\t}\n\n\t//?????????????????§???????????????\n\tdouble abs() {\n\t\treturn sqrt(norm());\n\t}\n\n\tbool operator < (const Point &p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p) const {\n\t\treturn fabs(x - p.x) < EPS &&  fabs(y - p.y) < EPS;\n\t}\n\n};\n\ntypedef Point Vector;\n\n//??????????????????????????????\ndouble dot(Vector a, Vector b) {\n\treturn a.x * b.x + a.y * b.y;\n}\n\n//??????????????????????????????\ndouble cross(Vector a, Vector b) {\n\treturn a.x * b.y - a.y * b.x;\n}\n\n\n\nclass Segment {\npublic:\n\tPoint p1, p2;\n\n\tSegment() {}\n\n\t//?????¨????°???±?????????\n\tPoint projection(Point p) {\n\t\tVector base = p2 - p1;\n\n\t\tdouble r = dot(p - p1, base) / base.norm();\n\t\treturn p1 + base * r;\n\t}\n\n\t//????°??????????\n\tPoint reflection(Point p) {\n\t\treturn p + (projection(p) - p)*2.0;\n\t}\n\n\n};\n\n\ntypedef Segment Line;\n\ntypedef vector<Point> Polygon;\n\n\n//?????????????????´?????????\nbool isOrthogonal(Vector a, Vector b);\n\n//??????????§??????¨?????????????????´?????????\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2);\n\n//???????????´?????????\nbool isOrthogonal(Segment s1, Segment s2);\n\n//???????????????????????????\nbool isParallel(Vector a, Vector b);\n\n//??????????§??????¨???????????????????????????\nbool isParallel(Point a1, Point a2, Point b1, Point b2);\n\n//?????????????????????\nbool isParallel(Segment s1, Segment s2);\n\n//?°???±?????????\nPoint projection(Segment s, Point p);\n\n//????°??????????\nPoint reflection(Segment s, Point p);\n\n//2??????????????¢?????????\ndouble getDistance(Point a, Point b);\n\n//??´?????¨???????????¢?????????\ndouble getDistanceLP(Line l, Point p);\n\n//????????¨???????????¢?????????\ndouble getDistanceSP(Segment s, Point p);\n\n//??????s1??¨??????s2????????¢?????????\ndouble getDistance(Segment s1, Segment s2);\n\n\n//???????????¢????????????\nint ccw(Point p0, Point p1, Point p2);\n\n//??????p1p2??¨??????p2p3???????????????\nbool intersect(Point p1, Point p2, Point p3, Point p4);\n\n//??????s1??¨??????s2???????????????\nbool intersect(Segment s1, Segment s2);\n\n\n\n//?????????????????´?????????\nbool isOrthogonal(Vector a, Vector b) {\n\treturn equals(dot(a, b), 0.0);\n}\n\n//??????????§??????¨?????????????????´?????????\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n\treturn isOrthogonal(a1 - a2, b1 - b2);\n}\n\n//???????????´?????????\nbool isOrthogonal(Segment s1, Segment s2) {\n\treturn equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n//???????????????????????????\nbool isParallel(Vector a, Vector b) {\n\treturn equals(cross(a, b), 0.0);\n}\n\n//??????????§??????¨???????????????????????????\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n\treturn isParallel(a1 - a2, b1 - b2);\n}\n\n//?????????????????????\nbool isParallel(Segment s1, Segment s2) {\n\treturn equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n//?°???±?????????\nPoint projection(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / base.norm();\n\treturn s.p1 + base * r;\n}\n\n//????°??????????\nPoint reflection(Segment s, Point p) {\n\treturn p + (projection(s, p) - p)*2.0;\n}\n\n//2??????????????¢?????????\ndouble getDistance(Point a, Point b) {\n\treturn (a - b).abs();\n}\n\n//??´?????¨???????????¢?????????\ndouble getDistanceLP(Line l, Point p) {\n\treturn fabs(cross(l.p2 - l.p1, p - l.p1) / (l.p2 - l.p1).abs());\n}\n\n//????????¨???????????¢?????????\ndouble getDistanceSP(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0) {\n\t\treturn (p - s.p1).abs();\n\t}\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0) {\n\t\treturn (p - s.p2).abs();\n\t}\n\n\treturn getDistanceLP(s, p);\n}\n\n//??????s1??¨??????s2????????¢?????????\ndouble getDistance(Segment s1, Segment s2) {\n\n\tif (intersect(s1, s2)) {\n\t\treturn 0.0;\n\t}\n\treturn min(min(getDistanceSP(s1,s2.p1), getDistanceSP(s1, s2.p2)),min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\n\n//???????????¢????????????\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\n\tif (cross(a, b) > EPS) {//???????¨?????????????\n\t\treturn COUNTER_CLOCKWISE;\n\t}\n\tif (cross(a, b) < -EPS) {//????¨?????????????\n\t\treturn CLOCKWISE;\n\t}\n\tif (dot(a, b) < -EPS) {//p2,p0,p1??????????????§????????´?????????????????????\n\t\treturn ONLINE_BACK;\n\t}\n\tif (a.norm() < b.norm()) {//p0,p1,p2??????????????§????????´?????????????????????\n\t\treturn ONLINE_FRONT;\n\t}\n\n\treturn ON_SEGMENT;//??????p0 p1??????p2???????????????\n\n}\n\n//??????p1p2??¨??????p2p3???????????????\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n\treturn ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 && ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0;\n}\n\n//??????s1??¨??????s2???????????????\nbool intersect(Segment s1, Segment s2) {\n\treturn intersect(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n\n\n\n\n\n\n\n//???\nclass Circle {\npublic:\n\tPoint c;//??????\n\tdouble r;//??????\n\tCircle(Point c = Point(), double r = 0.0) :c(c), r(r) {}\n};\n\n\nint main(void)\n{\n\tint n;\n\n\tSegment s1;\n\tSegment s2;\n\n\n\tcin >> n;\n\n\tfor (int i = 0; i < n; i++) {\n\t\tcin >> s1.p1.x >> s1.p1.y >> s1.p2.x >> s1.p2.y;\n\t\tcin >> s2.p1.x >> s2.p1.y >> s2.p2.x >> s2.p2.y;\n\n\t\tcout << getDistance(s1, s2) << endl;\n\n\t}\n\n\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <cstring>\n#include <cstdio>\n#include <queue>\n#include <vector>\n#include <cmath>\n#include <map>\n#include <stack>\n#include <algorithm>\ntypedef long long int ll;\nusing namespace std;\nconst int MAX=5000+10;\nconst double eps=1e-9;\nconst double PI=acos(-1.0);\n\nint sgn(double x)\n{\n    if (fabs(x)<eps) {\n        return 0;\n    }\n    if (x<0) {\n        return -1;\n    }\n    else return 1;\n}\nstruct point\n{\n    double x,y;\n    point(){}\n    point(double _x,double _y)\n    {\n        x=_x;y=_y;\n    }\n    point operator +(const point &b)const\n    {\n        return point(x+b.x,y+b.y);\n    }\n    point operator -(const point &b)const\n    {\n        return point(x-b.x,y-b.y);\n    }\n    double operator ^(const point &b)const\n    {\n        return x*b.y-y*b.x;\n    }\n    double operator *(const point &b)const\n    {\n        return x*b.x+y*b.y;\n    }\n    point operator *(const double k)const\n    {\n        point kk;kk.x=k*x;kk.y=k*y;return kk;\n    }\n    double len(void)\n    {\n        return sqrt(x*x+y*y);\n    }\n};\n\nstruct line\n{\n    point s,e;\n    line(){}\n    line(point _s,point _e)\n    {\n        s=_s;e=_e;\n    }\n    pair<int, point> operator &(const line &b)const\n    {\n        point res=s;\n        if(sgn((s-e)^(b.s-b.e))==0){\n            if(sgn((s-b.e)^(b.s-b.e))==0){\n                return make_pair(0, res);\n            }\n            else{\n                return make_pair(1,res);\n            }\n        }\n        double t=((s-b.s)^(b.s-b.e))/((s-e)^(b.s-b.e));\n        res.x+=(e.x-s.x)*t;\n        res.y+=(e.y-s.y)*t;\n        return make_pair(2, res);\n    }\n};\n\nbool inter(line l1,line l2)\n{\n    return max(l1.s.x,l1.e.x) >= min(l2.s.x,l2.e.x) &&\n    max(l2.s.x,l2.e.x) >= min(l1.s.x,l1.e.x) &&\n    max(l1.s.y,l1.e.y) >= min(l2.s.y,l2.e.y) &&\n    max(l2.s.y,l2.e.y) >= min(l1.s.y,l1.e.y) &&\n    sgn((l2.s-l1.e)^(l1.s-l1.e))*sgn((l2.e-l1.e)^(l1.s-l1.e)) <= 0 &&\n    sgn((l1.s-l2.e)^(l2.s-l2.e))*sgn((l1.e-l2.e)^(l2.s-l2.e)) <= 0;\n}\ndouble dis(point x,point y)\n{\n    return (x-y).len();\n}\ndouble lpdis(line l,point p)\n{\n    return fabs((l.s-l.e)^p-l.s)/(l.s-l.e).len();\n}\ndouble dis(line l,point p)\n{\n    if (sgn((l.e-l.s)*(p-l.s))==-1) {\n        return (p-l.s).len();\n    }\n    if (sgn((l.s-l.e)*(p-l.e)==-1)) {\n        return (p-l.e).len();\n    }\n    return lpdis(l, p);\n}\ndouble dis(line l1,line l2)\n{\n    if (inter(l1, l2)) {\n        return 0.0;\n    }\n    return min(min(dis(l1, l2.s), dis(l1, l2.e)),min(dis(l2, l1.s), dis(l2, l1.e)));\n}\n\nint main(){\n    //freopen(\"/Users/mac/Desktop/C++?¨????/test/test.txt\", \"r\", stdin);\n    int q;\n    scanf(\"%d\",&q);\n    while(q--){\n        line l1,l2;\n        scanf(\"%lf%lf%lf%lf%lf%lf%lf%lf\",&l1.s.x,&l1.s.y,&l1.e.x,&l1.e.y,&l2.s.x,&l2.s.y,&l2.e.x,&l2.e.y);\n        printf(\"%.8lf\\n\",dis(l1, l2));\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n\nusing namespace std;\n\n#define EPS (1e-6)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n\ninline int sign(const double &x){\n    if(x>EPS) return 1;\n    else if(x<-EPS) return -1;\n    return 0;\n}\n\n/*   点  */\nstruct Point{\n    double x,y;\n\n    Point(double x=0,double y=0):x(x),y(y){}\n\n    Point operator + (Point p) { return Point(x+p.x,y+p.y); }\n    Point operator - (Point p) { return Point(x-p.x,y-p.y); }\n    Point operator * (double k) { return Point(k*x,k*y); }\n    Point operator / (double k) { return Point(x/k,y/k); }\n\n    //向量的大小\n    double abs(){ return sqrt(norm()); }\n    double norm() { return x*x+y*y; }\n\n    bool operator < (const Point & p) const{\n        return x!=p.x?x<p.x:y<p.y;\n    }\n\n    bool operator == (const Point & p) const {\n        return fabs(x-p.x)<EPS&&fabs(y-p.y)<EPS;\n    }\n};\n\n//两点间的距离\ndouble getDistance(Point a,Point b){\n    return (a-b).abs();\n}\n\n/*   向量  */\ntypedef Point Vector;\n\n//向量a和b的内积\ndouble dot(Vector a,Vector b){\n    return a.x*b.x+a.y*b.y;\n}\n//向量a和b的外积\ndouble cross(Vector a,Vector b){\n    return a.x*b.y-a.y*b.x;\n}\n\n/*   线段  */\nstruct Segment{\n    Point p1,p2;\n};\n\n/*   直线  */\ntypedef Segment Line;\n\n//点到直线的距离\ndouble getDistanceLP(Line l,Point p){\n    return abs(cross(l.p2-l.p1,p-l.p1)/(l.p2-l.p1).abs());\n}\n\n//点到线段的距离\ndouble getDistanceSP(Segment s,Point p){\n    if(dot(s.p2-s.p1,p-s.p1)<0.0) return (p-s.p1).abs();\n    if(dot(s.p1-s.p2,p-s.p2)<0.0) return (p-s.p2).abs();\n    return getDistanceLP(s,p);\n}\n\n//判断p2与向量p1-p0的位置关系\n\nconst int COUNTER_CLOCKWISE = -1;   //逆时针\nconst int CLOCKWISE = 1;            //顺时针\nconst int ON_SEGMENT = 0;           //在线段上\n\nint ccw(Point p0,Point p1,Point p2){\n    Vector a=p1-p0;\n    Vector b=p2-p0;\n    if(cross(a,b)>EPS) return COUNTER_CLOCKWISE;\n    if(cross(a,b)<-EPS) return CLOCKWISE;\n    return ON_SEGMENT;\n}\n\n//判断线段p1p2与线段p3p4是否相交\nbool intersect(Point p1,Point p2,Point p3,Point p4){\n    return ( ccw(p1,p2,p3)*ccw(p1,p2,p4)<=0 &&\n             ccw(p3,p4,p1)*ccw(p3,p4,p2)<=0 );\n}\n\nbool intersect(Segment s1,Segment s2){\n    return intersect(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n\n//线段与线段的距离\ndouble getDistance(Segment s1,Segment s2){\n    if(intersect(s1,s2)) return 0.0;\n    return min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),\n               min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n}\n\n/* 直线正交\n * 判断向量a，b是否正交 =》a，b的内积为0\n */\nbool isOrthogonal(Vector a,Vector b){\n    return equals(dot(a,b),0.0);\n}\n\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n    return isOrthogonal(a1-a2,b1-b2);\n}\n\n/* 直线平行\n * 判断向量a，b是否平行 =》a，b的内积为0\n */\nbool isParallel(Vector a,Vector b){\n    return equals(cross(a,b),0.0);\n}\n\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n    return isParallel(a1-a2,b1-b2);\n}\n\nstruct Circle{\n    Point c;\n    double r;\n    Circle(Point c = Point() ,double r = 0.0 ):c(c),r(r){}\n};\n\n/*   多边形  */\ntypedef vector<Point> Polygon;\n\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    while(n--){\n        Point p1,p2,p3,p4;\n        scanf(\"%lf%lf%lf%lf%lf%lf%lf%lf\",&p1.x,&p1.y,&p2.x,&p2.y,&p3.x,&p3.y,&p4.x,&p4.y);\n        printf(\"%.10f\\n\",getDistance(Segment{p1,p2},Segment{p3,p4}));\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include<cstdio>\n#include<cmath>\n#include<cstring>\n#include<algorithm>\n#include<vector>\nusing namespace std;\n#define db double\nconst db eps = 1e-8;\n\nstruct Point{\n    db x, y;\n    Point(db x=0, db y=0): x(x), y(y) {}    //必须有初始化\n    bool operator < (const Point &p){\n        return x < p.x || (x == p.x && y < p.y);\n    }\n};\n\ntypedef Point Vector;\nVector operator + (Vector a, Vector b){ return Point(a.x+b.x, a.y+b.y);}\nVector operator - (Point a, Point b){ return Vector(a.x-b.x, a.y-b.y);}\nVector operator * (Vector a, db k){ return Vector(a.x*k, a.y*k);}\nVector operator / (Vector a, db k){ return Vector(a.x/k, a.y/k);}\n\n//inline将函数名为内联函数，不使用栈空间，直接运算，但不能有while,switch等复杂语句\ninline db dot(Vector a, Vector b){\n    return a.x*b.x + a.y*b.y;\n}\ninline db cross(Vector a, Vector b){\n    return a.x*b.y - b.x*a.y;\n}\ndb length(Vector a){\n    return sqrt(dot(a, a));\n}\ndb angle(Vector a, Vector b){\n    return acos(dot(a, b) / length(a) / length(b));\n}\n\nint dcmp(db x){ //三态函数，eps间返回0，否则>eps返回1，反之-1\n    if(fabs(x) < eps) return 0;\n    return x < 0? -1: 1;\n}\nbool operator == (Point a, Point b){\n    return dcmp(a.x-b.x) == 0 && dcmp(a.y-b.y) == 0;\n}\n\nstruct Segment{\n    Point p1, p2;\n    Segment(Point p1=Point(0, 0), Point p2 = Point(0, 0)): p1(p1), p2(p2) {};\n};\ntypedef Segment Line;\ntypedef vector<Point> Polygon;\nPoint project(Line l, Point p){\n    Vector a = l.p2 - l.p1, b = p - l.p1;\n    db len_a = dot(a, a);   //这里不加sqrt，是因为下面算投影长度时，要除以两次len_a\n    Vector tmp = a * (dot(a, b) / len_a);\n    return Point(tmp.x+l.p1.x, tmp.y+l.p1.y);\n}\nPoint reflect(Line l, Point p){\n    Point tmp = project(l, p);\n    return p + (tmp - p)*2;\n}\n\nvoid line_relation(Point p1, Point p2, Point p3, Point p4){\n    Vector a = p2 - p1, b = p4 - p3;\n    if(cross(a, b) == 0)\n        puts(\"parallel\");\n    else if(dot(a, b) == 0)\n        puts(\"orthogonal\");\n    else\n        puts(\"others\");\n}\nint com_segment_relation(Point p0, Point p1, Point p2){\n    Vector a = p1-p0, b = p2-p0;\n    db flag = cross(p1-p0, p2-p0);\n    if(flag < 0)  return 2;\n    else if(flag > 0)  return 1;\n    else{       //重合\n        if(a.x*b.x < 0 || a.y*b.y < 0) return 3;\n        else if(length(a) < length(b)) return 4;\n        else return 5;\n    }\n}\n\nint segment_intersection(Point p1, Point p2, Point p3, Point p4){\n    Point node1[2] = {p1, p2}, node2[2] = {p3, p4};\n    sort(node1, node1+2), sort(node2, node2+2);\n    if(node2[1] < node1[0] || node1[1] < node2[0])\n        return 0;       //同一直线上，最大最小排除\n    else if(cross(p2-p1, p3-p1)*cross(p2-p1, p4-p1) > 0 || cross(p4-p3, p1-p3)*cross(p4-p3, p2-p3) > 0)\n        return 0;\n    else\n        return 1;\n}\n\nPoint segment_cross_point(Point p1, Point p2, Point p3, Point p4){\n    if(!segment_intersection(p1, p2, p3, p4))\n        exit(0);\n    Vector a = p2-p1, b1 = p3-p1, b2 = p4-p1;\n    db len = length(a);\n    db h1 = fabs(cross(a, b1) / len);   //可以省去除len,求t时会消掉\n    db h2 = fabs(cross(a, b2) / len);\n    db t = h1 / (h1+h2);\n    return p3+(p4-p3)*t;\n}\n\nPoint line_cross_point(Point P, Vector v, Point Q, Vector w){\n    if(cross(v, w) == 0)\n        exit(0);\n    Vector u = P - Q;\n    double t = cross(w, u) / cross(v, w);\n    return P+v*t;\n}\n\ninline db norm(db x){\n    return x*x;\n}\ninline db dist_PtoP(Point p1, Point p2){\n    return length(p2-p1);   //转换为向量模\n}\ndb dist_PtoS(Segment s, Point p){\n    Point pro = project(s, p);\n    if(s.p2 < s.p1) swap(s.p1, s.p2);   //线段两端点必须有序\n    if(pro < s.p1 || s.p2 < pro)    //投影点不在线段上\n        return min(dist_PtoP(p, s.p1), dist_PtoP(p, s.p2));\n    else\n        return dist_PtoP(p, pro);\n}\ninline db dist_PtoL(Line l, Point p){\n    db tmp = cross(l.p2-l.p1, p-l.p1) / length(l.p2-l.p1);\n    return fabs(tmp);\n}\ndb dist_StoS(Segment s1, Segment s2){\n    if(segment_intersection(s1.p1, s1.p2, s2.p1, s2.p2))\n        return 0;\n    db d1 = dist_PtoS(s2, s1.p1), d2 = dist_PtoS(s2, s1.p2), d3 = dist_PtoS(s1, s2.p1), d4 = dist_PtoS(s1, s2.p2);\n    return min(min(d1, d2), min(d3, d4));\n}\nint main()\n{\n    Point p1, p2, p3, p4;\n    int n;\n    cin >>n;\n    while(n --){\n        cin >>p1.x >>p1.y >>p2.x >>p2.y >>p3.x>>p3.y>>p4.x>>p4.y;\n        db ans = dist_StoS(Segment(p1, p2), Segment(p3, p4) );\n        printf(\"%.10f\\n\", ans);\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#define _CRT_SECURE_NO_WARNINGS\n#define _USE_MATH_DEFINES\n#include <iostream>\n#include <cstdio>\n#include <math.h>\n#include <algorithm>\nconst double EPS = 1e-9;\nusing namespace std;\nclass vector {\npublic:\n\tdouble x, y;\n\tvector(double a, double  b) {\n\t\tx = a;\n\t\ty = b;\n\t};\n\tvector operator * (const vector &v)const {\n\t\treturn vector(x*v.x, y* v.y);\n\t}\n\tvector operator * (double a) {\n\t\treturn vector(x * a, y * a);\n\t}\n\tvector operator - (vector v) {\n\t\treturn vector(x - v.x, y - v.y);\n\t}\n\tvector operator + (vector v) {\n\t\treturn vector(x + v.x, y + v.y);\n\t}\n};\ninline double dot(vector v1, vector v2) {\n\treturn v1.x*v2.x + v1.y*v2.y;\n}\ninline double squ(vector v) {\n\treturn v.x*v.x + v.y*v.y;\n}\ninline double norm(vector v) {\n\treturn sqrt(squ(v));\n}\ninline void print(vector v) {\n\tprintf(\"%.10f %.10f\\n\", v.x, v.y);\n}\ninline vector pro(vector base, vector v, vector be) {\n\tdouble a = dot(base, v) / squ(base);\n\tvector v1 = base * a;\n\treturn v1 + be;\n}\ninline vector ref(vector v, vector be) {\n\treturn (v - be)*2 + be;\n}\ninline double cross(vector v1, vector v2) {\n\treturn v1.x*v2.y - v1.y*v2.x;\n}\ninline int ccw(vector v1, vector v2, vector v3) {\n\tvector a = v2 - v1;\n\tvector b = v3 - v1;\n\tif (cross(a, b) < 0.0) return -1;\n\telse if (cross(a, b) > 0.0) return 1;\n\telse if (dot(a, b) < 0.0) return -2;\n\telse if (dot(a, b) > squ(v1)) return 2;\n\telse return 0;\n}\ninline int inter(vector v1, vector v2, vector v3, vector v4) {\n\treturn (ccw(v1, v2, v3) * ccw(v1, v2, v4) <= 0) && (ccw(v3, v4, v1) * ccw(v3, v4, v2) <= 0);\n}\ninline double disPP(vector v1, vector v2) {\n\treturn norm(v2 - v1);\n}\ninline double disLP(vector v1, vector v2, vector v3) {\n\tvector a = v2 - v1;\n\tvector b = v3 - v1;\n\treturn fabs(cross(a, b) / norm(a));\n}\ninline double disSP(vector v1, vector v2, vector v3) {\n\tvector a = v2 - v1;\n\tvector b = v3 - v1;\n\tvector c = v1 - v2;\n\tvector d = v3 - v2;\n\tif (dot(a, b) < 0.0) return disPP(v1, v3);\n\telse if (dot(c, d) < 0.0) return disPP(v2, v3);\n\telse return disLP(v1, v2, v3);\n}\ninline double disSS(vector v1, vector v2, vector v3, vector v4) {\n\tif (inter(v1, v2, v3, v4)) return 0;\n\tdouble a = disSP(v1, v2, v3);\n\tdouble b = disSP(v1, v2, v4);\n\tdouble c = disSP(v3, v4, v1);\n\tdouble d = disSP(v3, v4, v2);\n\treturn min(min(a, b), min(c, d));\n}\n/*int main() {\n\t//inter\n\tint n;\n\tdouble x0, x1, x2, x3, y0, y1, y2, y3;\n\tcin >> n;\n\tfor (int i = 0; i < n; i++) {\n\t\tcin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n\t\tvector v1(x0,y0);\n\t\tvector v2(x1, y1);\n\t\tvector v3(x2, y2);\n\t\tvector v4(x3, y3);\n\t\tcout << inter(v1, v2, v3, v4) << endl;\n\t}\n\treturn 0;\n}\nint main() {\n\t//clo\n\tint n;\n\tdouble x0, x1, x2, y0, y1, y2;\n\tcin >> x0 >> y0 >> x1 >> y1 >> n;\n\tvector v1(x0, y0);\n\tvector v1(x1, y1);\n\tfor(int i = 0; i < n; i++) {\n\t\tcin >> x2 >> y2;\n\t\tvector v2(x2, y2);\n\t\tint ans = ccw(v0, v1, v2);\n\t\t if(ans == -1) cout << \"CLOCKWISE\" << endl;\n\t\t else if(ans == 1) cout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t  else if(ans == -2)cout << \"ONLINE_BACK\" << endl;\n\t\t  else if(ans == 2)cout << \"ONLINE_FRONT\" << endl;\n\t\telse cout << \"ON_SEGMENT\" << endl;\n\t}\n\treturn 0;\n}*/\nint main() {\n\t//distance\n\tint n;\n\tcin >> n;\n\tdouble x0, x1, x2, x3,y0,  y1, y2, y3;\n\tfor (int i = 0; i < n; i++) {\n\t\tcin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n\t\tvector v1(x0, y0);\n\t\tvector v2(x1, y1);\n\t\tvector v3(x2, y2);\n\t\tvector v4(x3, y3);\n\t\tprintf(\"%.10f\\n\", disSS(v1, v2, v3, v4));\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <vector>\n#include <cfloat>\n#include <string>\n#include <cmath>\n#include <set>\n#include <cstdlib>\n#include <map>\n#include <ctime>\n#include <iomanip>\n#include <functional>\n#include <deque>\n#include <iostream>\n#include <cstring>\n#include <queue>\n#include <cstdio>\n#include <stack>\n#include <climits>\n#include <sys/time.h>\n#include <cctype>\n\nusing namespace std;\n\ntypedef long long ll;\n\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a)-(b)) < EPS)\n\nclass Point {\n public:\n  double x, y;\n\n  Point(double x = 0, double y = 0): x(x), y(y) {}\n\n  Point operator + (Point p) { return Point(x+p.x, y+p.y); }\n  Point operator - (Point p) { return Point(x-p.x, y-p.y); }\n  Point operator * (double a) { return Point(a*x, a*y); }\n  Point operator / (double a) { return Point(x/a, y/a); }\n\n  double norm() { return x*x+y*y; }\n  double abs() { return sqrt(norm()); }\n\n  bool operator < (const Point &p) const {\n    return x != p.x ? x < p.x : y < p.y;\n  }\n\n  bool operator == (const Point &p) const {\n    return fabs(x-p.x) < EPS && fabs(y-p.y) < EPS;\n  }\n};\n\ntypedef Point Vector;\ntypedef vector <Vector> Polygon;\n\nclass Segment {\n public:\n  Point p1, p2;\n\n  Segment(Point p1 = Point(), Point p2 = Point()): p1(p1), p2(p2) {}\n};\n\ntypedef Segment Line;\n\ndouble norm(Vector a) {\n  return a.x*a.x+a.y*a.y;\n}\n\ndouble abs(Vector a) {\n  return sqrt(norm(a));\n}\n\n// ?????????|a||b|cos\ndouble cross(Vector a, Vector b) {\n  return a.x*b.y-a.y*b.x;\n}\n// ?????????|a||b|sin\ndouble dot(Vector a, Vector b) {\n  return a.x*b.x+a.y*b.y;\n}\n\n// 1:???????¨??????? -1:????¨??????? 2:p2-p0-p1 -2:p0-p1-p2 0:p2???p0-p1???\nint ccw(Point p0, Point p1, Point p2) {\n  Vector a = p1-p0;\n  Vector b = p2-p0;\n  if (cross(a, b) > EPS) return 1;\n  if (cross(a, b) < -EPS) return -1;\n  if (dot(a, b) < -EPS) return 2;\n  if (a.norm() < b.norm()) return -2;\n\n  return 0;\n}\n\n\n// p1!=p2????????????p3!=p4????????¶\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n  return (ccw(p1, p2, p3)*ccw(p1, p2, p4) <= 0 &&\n          ccw(p3, p4, p1)*ccw(p3, p4, p2) <= 0);\n}\nbool intersect(Segment s1, Segment s2) {\n  return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\n// ??´???l??¨???p????????¢\ndouble getDistanceLP(Line l, Point p) {\n  return abs(cross(l.p2-l.p1, p-l.p1))/abs(l.p2-l.p1);\n}\n\n// ??????s??¨???p????????¢\ndouble getDistanceSP(Segment s, Point p) {\n  if (dot(s.p2-s.p1, p-s.p1) < 0.0) return abs(p-s.p1);\n  if (dot(s.p1-s.p2, p-s.p2) < 0.0) return abs(p-s.p2);\n  return getDistanceLP(s, p);\n}\n\n// ??????s1??¨??????s2????????¢\ndouble getDistance(Segment s1, Segment s2) {\n  if (intersect(s1, s2)) return 0.0;\n  return min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n             min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\nint main() {\n  int q;\n  cin >> q;\n  for (int i = 0; i < q; i++) {\n    Segment s1, s2;\n    cin >> s1.p1.x >> s1.p1.y >> s1.p2.x >> s1.p2.y\n        >> s2.p1.x >> s2.p1.y >> s2.p2.x >> s2.p2.y;\n    cout << fixed << setprecision(20) << getDistance(s1, s2) << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n\ninline int sign(const double &x){\n    if(x>EPS) return 1;\n    else if(x<-EPS) return -1;\n    return 0;\n}\n\n/*   点  */\nstruct Point{\n    double x,y;\n\n    Point(double x=0,double y=0):x(x),y(y){}\n\n    Point operator + (Point p) { return Point(x+p.x,y+p.y); }\n    Point operator - (Point p) { return Point(x-p.x,y-p.y); }\n    Point operator * (double k) { return Point(k*x,k*y); }\n    Point operator / (double k) { return Point(x/k,y/k); }\n\n    //向量的大小\n    double abs(){ return sqrt(norm()); }\n    double norm() { return x*x+y*y; }\n\n    bool operator < (const Point & p) const{\n        return x!=p.x?x<p.x:y<p.y;\n    }\n\n    bool operator == (const Point & p) const {\n        return fabs(x-p.x)<EPS&&fabs(y-p.y)<EPS;\n    }\n};\n\n//两点间的距离\ndouble getDistance(Point a,Point b){\n    return (a-b).abs();\n}\n\n/*   向量  */\ntypedef Point Vector;\n\n//向量a和b的内积\ndouble dot(Vector a,Vector b){\n    return a.x*b.x+a.y*b.y;\n}\n//向量a和b的外积\ndouble cross(Vector a,Vector b){\n    return a.x*b.y-a.y*b.x;\n}\n\n/*   线段  */\nstruct Segment{\n    Point p1,p2;\n};\n\n/*   直线  */\ntypedef Segment Line;\n\n//点到直线的距离\ndouble getDistanceLP(Line l,Point p){\n    return abs(cross(l.p2-l.p1,p-l.p1)/(l.p2-l.p1).abs());\n}\n\n//点到线段的距离\ndouble getDistanceSP(Segment s,Point p){\n    if(dot(s.p2-s.p1,p-s.p1)<0.0) return (p-s.p1).abs();\n    if(dot(s.p1-s.p2,p-s.p2)<0.0) return (p-s.p2).abs();\n    return getDistanceLP(s,p);\n}\n\n//判断p2与向量p1-p0的位置关系\n\nconst int COUNTER_CLOCKWISE = -1;   //逆时针\nconst int CLOCKWISE = 1;            //顺时针\nconst int ON_SEGMENT = 0;           //在线段上\n\nint ccw(Point p0,Point p1,Point p2){\n    Vector a=p1-p0;\n    Vector b=p2-p0;\n    if(cross(a,b)>EPS) return COUNTER_CLOCKWISE;\n    if(cross(a,b)<EPS) return CLOCKWISE;\n    return ON_SEGMENT;\n}\n\n//判断线段p1p2与线段p3p4是否相交\nbool intersect(Point p1,Point p2,Point p3,Point p4){\n    return ( ccw(p1,p2,p3)*ccw(p1,p2,p4)<=0 &&\n             ccw(p3,p4,p1)*ccw(p3,p4,p2)<=0 );\n}\n\nbool intersect(Segment s1,Segment s2){\n    return intersect(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n\n//线段与线段的距离\ndouble getDistance(Segment s1,Segment s2){\n    if(intersect(s1,s2)) return 0.0;\n    return min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),\n               min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n}\n\n/* 直线正交\n * 判断向量a，b是否正交 =》a，b的内积为0\n */\nbool isOrthogonal(Vector a,Vector b){\n    return equals(dot(a,b),0.0);\n}\n\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n    return isOrthogonal(a1-a2,b1-b2);\n}\n\n/* 直线平行\n * 判断向量a，b是否平行 =》a，b的内积为0\n */\nbool isParallel(Vector a,Vector b){\n    return equals(cross(a,b),0.0);\n}\n\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n    return isParallel(a1-a2,b1-b2);\n}\n\nstruct Circle{\n    Point c;\n    double r;\n    Circle(Point c = Point() ,double r = 0.0 ):c(c),r(r){}\n};\n\n/*   多边形  */\ntypedef vector<Point> Polygon;\n\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    while(n--){\n        Point p1,p2,p3,p4;\n        scanf(\"%lf%lf%lf%lf%lf%lf%lf%lf\",&p1.x,&p1.y,&p2.x,&p2.y,&p3.x,&p3.y,&p4.x,&p4.y);\n        printf(\"%.10f\\n\",getDistance(Segment{p1,p2},Segment{p3,p4}));\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<vector>\n#include<algorithm>\n#include<utility>\n#include<numeric>\n#include<iostream>\n#include<array>\n#include<string>\n#include<sstream>\n#include<stack>\n#include<queue>\n#include<list>\n#include<functional>\n#define _USE_MATH_DEFINES\n\n#include<math.h>\n#include<map>\n\n#define INF 200000000\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef pair<ll, ll> pll;\ntypedef pair<ll, int> pli;\n\nstruct OwnVector2\n{\n\tdouble x, y;\n\tOwnVector2(double x,double y):x(x),y(y){}\n\tOwnVector2() :OwnVector2(0, 0) {}\n\tOwnVector2 operator+(const OwnVector2& v)const\n\t{\n\t\treturn OwnVector2(x + v.x, y + v.y);\n\t}\n\tOwnVector2 operator-(const OwnVector2& v)const\n\t{\n\t\treturn OwnVector2(x - v.x, y - v.y);\n\t}\n\tOwnVector2 operator*(const double v)const\n\t{\n\t\treturn OwnVector2(x*v, y*v);\n\t}\n\tbool operator==(const OwnVector2& v)const\n\t{\n\t\treturn abs(x - v.x) <= 0.0000000000001&&abs(y - v.y) <= 0.00000000000001;\n\t}\n\tbool operator!=(const OwnVector2& v)const\n\t{\n\t\treturn abs(x - v.x) > 0.0000000000001||abs(y - v.y) > 0.00000000000001;\n\t}\n\n\tdouble dot(const OwnVector2& v)const\n\t{\n\t\treturn x*v.x + y*v.y;\n\t}\n\tdouble cross(const OwnVector2& v)const\n\t{\n\t\treturn x*v.y - y*v.x;\n\t}\n\tdouble length()const\n\t{\n\t\treturn sqrt(x*x + y*y);\n\t}\n\tdouble length2()const\n\t{\n\t\treturn x*x + y*y;\n\t}\n};\n\ndouble CalcMinDistancePointVSSegment(OwnVector2 p1, OwnVector2 p2, OwnVector2 p3)\n{\n\tOwnVector2 p12, p13, p21, p23;\n\tp12 = p2 - p1; p13 = p3 - p1; p21 = p1 - p2; p23 = p3 - p2;\n\n\tif(p12.dot(p13)<0.0)\n\t{\n\t\treturn p13.length();\n\t}\n\n\tif (p21.dot(p23) < 0.0)\n\t{\n\t\treturn p23.length();\n\t}\n\n\treturn abs(p12.cross(p13)) / p12.length();\n}\n\nOwnVector2 CalcCrossPoint(OwnVector2 p1, OwnVector2 p2, OwnVector2 p3, OwnVector2 p4)\n{\n\tOwnVector2 p12, p13, p14, p34, p31, p32;\n\tp12 = p2 - p1; p13 = p3 - p1; p14 = p4 - p1; p34 = p4 - p3; p31 = p1 - p3; p32 = p2 - p3;\n\n\tdouble d, u, v;\n\n\td = p12.cross(p34);\n\n\tif (abs(d) <= 0.0000000000001)\n\t{\n\t\treturn OwnVector2(INF, INF);\n\t}\n\n\tu = p13.cross(p34) / d;\n\tv = p13.cross(p12) / d;\n\n\tif (u<0.0 || u>1.0)\n\t{\n\t\treturn OwnVector2(INF, INF);\n\t}\n\tif (v<0.0 || v>1.0)\n\t{\n\t\treturn OwnVector2(INF, INF);\n\t}\n\n\treturn p1 + p12*u;\n}\n\nint main()\n{\n\tcin.tie(0);\n\tios::sync_with_stdio(false);\n\n\tint q;\n\tcin >> q;\n\n\tfor (int i = 0; i < q; i++)\n\t{\n\t\tdouble x0, x1, x2, x3, y0, y1, y2, y3;\n\t\tcin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n\n\t\tOwnVector2 p0(x0, y0), p1(x1, y1), p2(x2, y2), p3(x3, y3);\n\n\t\tOwnVector2 crossPoint = CalcCrossPoint(p0, p1, p2, p3);\n\t\tif (crossPoint != OwnVector2(INF, INF))\n\t\t{\n\t\t\tprintf(\"%.10lf\\n\", 0.0);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdouble d0, d1, d2, d3;\n\t\t\td0 = CalcMinDistancePointVSSegment(p0, p1, p2);\n\t\t\td1 = CalcMinDistancePointVSSegment(p0, p1, p3);\n\t\t\td2 = CalcMinDistancePointVSSegment(p2, p3, p0);\n\t\t\td3 = CalcMinDistancePointVSSegment(p2, p3, p1);\n\t\t\tprintf(\"%.10lf\\n\", min(d0, min(d1, min(d2, d3))));\n\t\t}\n\t}\n\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define r(i,n) for(int i=0;i<n;i++)\nusing namespace std;\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\nclass Point{\n  public:\n  double x,y;\n  Point(double x=0,double y=0):x(x),y(y){}\n  Point operator + (Point p){return Point(x+p.x,y+p.y);}\n  Point operator - (Point p){return Point(x-p.x,y-p.y);}\n  Point operator * (double a){return Point(a*x,a*y);}\n  Point operator / (double a){return Point(x/a,y/a);}\n\n  bool operator < (const Point &p) const{\n    return x!=p.x?x<p.x:y<p.y;\n  }\n  bool operator == (const Point &p) const{\n    return fabs(x-p.x)<EPS&&fabs(y-p.y)<EPS;\n  }\n};\n/*class Circle{\npublic:\n  Point c;\n  double r;\n  Circle(Point c=Point(),double r=0.0):c(c),r(r){}\n};*/\ntypedef Point vect;\nstruct seg{Point p1,p2;};\n//????????´???\ndouble norm(Point p){return p.x*p.x+p.y*p.y;}\n//??¶??????\ndouble abs(Point p){return sqrt(norm(p));}\n//??????\ndouble dot(Point a,Point b){\n  return a.x*b.x+a.y*b.y;\n}\n//??????\ndouble cross(Point a,Point b){\n  return a.x*b.y-a.y*b.x;\n}\n//??´?????????\nbool C90(seg s1,seg s2){\n  return equals(dot(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\nbool C0(seg s1,seg s2){\n  return equals(cross(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n//?°???±\nPoint projec(seg s,Point p){\n  Point base = s.p2-s.p1;\n  double r=dot(p-s.p1,base) / norm(base);\n  return s.p1+base*r;\n}\n//????°?\nPoint reflec(seg s,Point p){\n  return  p+(projec(s,p)-p)*2.0;\n}\n//2???????????¢\ndouble getDistancePP(Point a,Point b){\n  return abs(a-b);\n}\n//??´??????????????¢(????°?)\ndouble getDistanceLP(seg l,Point p){\n  return abs(cross(l.p2-l.p1,p-l.p1)/abs(l.p2-l.p1));\n}\n//??´?????´????????¢(????°?)\ndouble getDistanceLL(seg a,seg b){\n  double p[4];\n  p[0]=getDistanceLP(a,b.p1);\n  p[1]=getDistanceLP(a,b.p2);\n  p[2]=getDistanceLP(b,a.p1);\n  p[3]=getDistanceLP(b,a.p2);\n  sort(p,p+4);\n  return p[0];\n}\nmain(){\n  int n;\n  seg a,b;\n  cin>>n;\n  while(n--){\n    cin>>a.p1.x>>a.p1.y>>a.p2.x>>a.p2.y;\n    cin>>b.p1.x>>b.p1.y>>b.p2.x>>b.p2.y;\n    printf(\"%.11f\\n\",getDistanceLL(a,b));\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\nusing Int = long long;\n//BEGIN CUT HERE\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n#define PI 3.141592653589793238\n \n// COUNTER CLOCKWISE\nstatic const int CCW_COUNTER_CLOCKWISE = 1;\nstatic const int CCW_CLOCKWISE = -1;\nstatic const int CCW_ONLINE_BACK = 2;\nstatic const int CCW_ONLINE_FRONT = -2;\nstatic const int CCW_ON_SEGMENT = 0;\n\n//Intercsect Circle & Circle\nstatic const int ICC_SEPERATE = 4;\nstatic const int ICC_CIRCUMSCRIBE = 3;\nstatic const int ICC_INTERSECT = 2;\nstatic const int ICC_INSCRIBE = 1;\nstatic const int ICC_CONTAIN = 0;\n\nstruct Point{\n  double x,y;\n  Point(){}\n  Point(double x,double y) :x(x),y(y){}\n  Point operator+(Point p) {return Point(x+p.x,y+p.y);}\n  Point operator-(Point p) {return Point(x-p.x,y-p.y);}\n  Point operator*(double k){return Point(x*k,y*k);}\n  Point operator/(double k){return Point(x/k,y/k);}\n  double norm(){return x*x+y*y;}\n  double abs(){return sqrt(norm());}\n\n  bool operator < (const Point &p) const{\n    return x!=p.x?x<p.x:y<p.y;\n    //grid-point only\n    //return !equals(x,p.x)?x<p.x:!equals(y,p.y)?y<p.y:0;\n  }\n\n  bool operator == (const Point &p) const{\n    return fabs(x-p.x)<EPS && fabs(y-p.y)<EPS;\n  }\n};\n\nistream &operator >> (istream &is,Point &p){\n  is>>p.x>>p.y;\n  return is;\n}\n\nostream &operator << (ostream &os,Point p){\n  os<<fixed<<setprecision(12)<<p.x<<\" \"<<p.y;\n  return os;\n}\n\nbool sort_x(Point a,Point b){\n  return a.x!=b.x?a.x<b.x:a.y<b.y;\n}\n\nbool sort_y(Point a,Point b){\n  return a.y!=b.y?a.y<b.y:a.x<b.x;\n}\n\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\nistream &operator >> (istream &is,Polygon &p){\n  for(int i=0;i<(int)p.size();i++) cin>>p[i];\n  return is;\n}\n\nstruct Segment{\n  Point p1,p2;\n  Segment(){}\n  Segment(Point p1, Point p2):p1(p1),p2(p2){}\n};\ntypedef Segment Line;\n\nistream &operator >> (istream &is,Segment &s){\n  is>>s.p1>>s.p2;\n  return is;\n}\n\nstruct Circle{\n  Point c;\n  double r;\n  Circle(){}\n  Circle(Point c,double r):c(c),r(r){}\n};\n\nistream &operator >> (istream &is,Circle &c){\n  is>>c.c>>c.r;\n  return is;\n}\n\ndouble norm(Vector a){\n  return a.x*a.x+a.y*a.y;\n}\ndouble abs(Vector a){\n  return sqrt(norm(a));\n}\ndouble dot(Vector a,Vector b){\n  return a.x*b.x+a.y*b.y;\n}\ndouble cross(Vector a,Vector b){\n  return a.x*b.y-a.y*b.x;\n}\n\nPoint orth(Point p){return Point(-p.y,p.x);}\n\nbool isOrthogonal(Vector a,Vector b){\n  return equals(dot(a,b),0.0);\n}\n\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n  return isOrthogonal(a1-a2,b1-b2);\n}\n\nbool isOrthogonal(Segment s1,Segment s2){\n  return equals(dot(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n\nbool isParallel(Vector a,Vector b){\n  return equals(cross(a,b),0.0);\n}\n\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n  return isParallel(a1-a2,b1-b2);\n}\n\nbool isParallel(Segment s1,Segment s2){\n  return equals(cross(s1.p2-s1.p1,s2.p2-s2.p1),0.0); \n}\n\nPoint project(Segment s,Point p){\n  Vector base=s.p2-s.p1;\n  double r=dot(p-s.p1,base)/norm(base);\n  return s.p1+base*r;\n}\n\nPoint reflect(Segment s,Point p){\n  return p+(project(s,p)-p)*2.0;\n}\n\ndouble arg(Vector p){\n  return atan2(p.y,p.x);\n}\n\nVector polar(double a,double r){\n  return Point(cos(r)*a,sin(r)*a);\n}\n\nint ccw(Point p0,Point p1,Point p2);\nbool intersectSS(Point p1,Point p2,Point p3,Point p4);\nbool intersectSS(Segment s1,Segment s2);\nbool intersectPS(Polygon p,Segment l);\nint intersectCC(Circle c1,Circle c2);\nbool intersectSC(Segment s,Circle c);\ndouble getDistanceLP(Line l,Point p);\ndouble getDistanceSP(Segment s,Point p);\ndouble getDistanceSS(Segment s1,Segment s2);\nPoint getCrossPointSS(Segment s1,Segment s2);\nPoint getCrossPointLL(Line l1,Line l2);\nPolygon getCrossPointCL(Circle c,Line l);\nPolygon getCrossPointCC(Circle c1,Circle c2);\nint contains(Polygon g,Point p);\nPolygon andrewScan(Polygon s);\nPolygon convex_hull(Polygon ps);\ndouble diameter(Polygon s);\nbool isConvex(Polygon p);\ndouble area(Polygon s);\nPolygon convexCut(Polygon p,Line l);\nLine bisector(Point p1,Point p2);\nVector translate(Vector v,double theta);\nvector<Line> corner(Line l1,Line l2);\n\nint ccw(Point p0,Point p1,Point p2){\n  Vector a = p1-p0;\n  Vector b = p2-p0;\n  if(cross(a,b) > EPS) return CCW_COUNTER_CLOCKWISE;\n  if(cross(a,b) < -EPS) return CCW_CLOCKWISE;\n  if(dot(a,b) < -EPS) return CCW_ONLINE_BACK;\n  if(a.norm()<b.norm()) return CCW_ONLINE_FRONT;\n  return CCW_ON_SEGMENT;\n}\n\nbool intersectSS(Point p1,Point p2,Point p3,Point p4){\n  return (ccw(p1,p2,p3)*ccw(p1,p2,p4) <= 0 &&\n\t  ccw(p3,p4,p1)*ccw(p3,p4,p2) <= 0 );\n}\n\nbool intersectSS(Segment s1,Segment s2){\n  return intersectSS(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n\nbool intersectPS(Polygon p,Segment l){\n  int n=p.size();\n  for(int i=0;i<n;i++)\n    if(intersectSS(Segment(p[i],p[(i+1)%n]),l)) return 1;\n  return 0;\n}\n\nint intersectCC(Circle c1,Circle c2){\n  if(c1.r<c2.r) swap(c1,c2);\n  double d=abs(c1.c-c2.c);\n  double r=c1.r+c2.r;\n  if(equals(d,r)) return ICC_CIRCUMSCRIBE;\n  if(d>r) return ICC_SEPERATE;\n  if(equals(d+c2.r,c1.r)) return ICC_INSCRIBE;\n  if(d+c2.r<c1.r) return ICC_CONTAIN;\n  return ICC_INTERSECT;\n}\n\nbool intersectSC(Segment s,Circle c){\n  double d=getDistanceSP(s,c.c);\n  return d<=c.r;\n}\n\ndouble getDistanceLP(Line l,Point p){\n  return abs(cross(l.p2-l.p1,p-l.p1)/abs(l.p2-l.p1));\n}\n\ndouble getDistanceSP(Segment s,Point p){\n  if(dot(s.p2-s.p1,p-s.p1) < 0.0 ) return abs(p-s.p1);\n  if(dot(s.p1-s.p2,p-s.p2) < 0.0 ) return abs(p-s.p2);\n  return getDistanceLP(s,p);\n}\n\ndouble getDistanceSS(Segment s1,Segment s2){\n  if(intersectSS(s1,s2)) return 0.0;\n  return min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),\n\t     min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n}\n\nPoint getCrossPointSS(Segment s1,Segment s2){\n  Vector base=s2.p2-s2.p1;\n  double d1=abs(cross(base,s1.p1-s2.p1));\n  double d2=abs(cross(base,s1.p2-s2.p1));\n  double t=d1/(d1+d2);\n  return s1.p1+(s1.p2-s1.p1)*t;\n}\n\nPoint getCrossPointLL(Line l1,Line l2){\n  double a=cross(l1.p2-l1.p1,l2.p2-l2.p1);\n  double b=cross(l1.p2-l1.p1,l1.p2-l2.p1);\n  if(abs(a)<EPS&&abs(b)<EPS) return l2.p1;\n  return l2.p1+(l2.p2-l2.p1)*(b/a);\n}\n\nPolygon getCrossPointCL(Circle c,Line l){\n  Polygon ps;\n  Point pr=project(l,c.c);\n  Vector e=(l.p2-l.p1)/abs(l.p2-l.p1);\n  if(equals(getDistanceLP(l,c.c),c.r)){\n    ps.emplace_back(pr);\n    return ps;\n  }\n  double base=sqrt(c.r*c.r-norm(pr-c.c));\n  ps.emplace_back(pr+e*base);\n  ps.emplace_back(pr-e*base);\n  return ps;\n}\n\nPolygon getCrossPointCC(Circle c1,Circle c2){\n  Polygon p(2);\n  double d=abs(c1.c-c2.c);\n  double a=acos((c1.r*c1.r+d*d-c2.r*c2.r)/(2*c1.r*d));\n  double t=arg(c2.c-c1.c);\n  p[0]=c1.c+polar(c1.r,t+a);\n  p[1]=c1.c+polar(c1.r,t-a);\n  return p;\n}\n\n// IN:2 ON:1 OUT:0\nint contains(Polygon g,Point p){\n  int n=g.size();\n  bool x=false;\n  for(int i=0;i<n;i++){\n    Point a=g[i]-p,b=g[(i+1)%n]-p;\n    if(fabs(cross(a,b)) < EPS && dot(a,b) < EPS) return 1;\n    if(a.y>b.y) swap(a,b);\n    if(a.y < EPS && EPS < b.y && cross(a,b) > EPS ) x = !x;\n  }\n  return (x?2:0);\n}\n\nPolygon andrewScan(Polygon s){\n  Polygon u,l;\n  if(s.size()<3) return s;\n  sort(s.begin(),s.end());\n  u.push_back(s[0]);\n  u.push_back(s[1]);\n  l.push_back(s[s.size()-1]);\n  l.push_back(s[s.size()-2]);\n  for(int i=2;i<(int)s.size();i++){\n    for(int n=u.size();n>=2&&ccw(u[n-2],u[n-1],s[i])!=CCW_CLOCKWISE;n--){\n      u.pop_back();\n    }\n    u.push_back(s[i]);\n  } \n  for(int i=s.size()-3;i>=0;i--){\n    for(int n=l.size();n>=2&&ccw(l[n-2],l[n-1],s[i])!=CCW_CLOCKWISE;n--){\n      l.pop_back();\n    }\n    l.push_back(s[i]);\n  }\n  reverse(l.begin(),l.end());\n  for(int i=u.size()-2;i>=1;i--) l.push_back(u[i]);\n  return l;\n} \n\nPolygon convex_hull(Polygon ps){\n  int n=ps.size();\n  sort(ps.begin(),ps.end(),sort_y);\n  int k=0;\n  Polygon qs(n*2);\n  for(int i=0;i<n;i++){\n    while(k>1&&cross(qs[k-1]-qs[k-2],ps[i]-qs[k-1])<0) k--;\n    qs[k++]=ps[i];\n  }\n  for(int i=n-2,t=k;i>=0;i--){\n    while(k>t&&cross(qs[k-1]-qs[k-2],ps[i]-qs[k-1])<0) k--;\n    qs[k++]=ps[i];\n  }\n  qs.resize(k-1);\n  return qs;\n}\n\ndouble diameter(Polygon s){\n  Polygon p=s;\n  int n=p.size();\n  if(n==2) return abs(p[0]-p[1]);\n  int i=0,j=0;\n  for(int k=0;k<n;k++){\n    if(p[i]<p[k]) i=k;\n    if(!(p[j]<p[k])) j=k;\n  }\n  double res=0;\n  int si=i,sj=j;\n  while(i!=sj||j!=si){\n    res=max(res,abs(p[i]-p[j]));\n    if(cross(p[(i+1)%n]-p[i],p[(j+1)%n]-p[j])<0.0){\n      i=(i+1)%n;\n    }else{\n      j=(j+1)%n;\n    }\n  }\n  return res;\n}\n\nbool isConvex(Polygon p){\n  bool f=1;\n  int n=p.size();\n  for(int i=0;i<n;i++){\n    int t=ccw(p[(i+n-1)%n],p[i],p[(i+1)%n]);\n    f&=t!=CCW_CLOCKWISE;\n  }\n  return f;\n}\n\ndouble area(Polygon s){\n  double res=0;\n  for(int i=0;i<(int)s.size();i++){\n    res+=cross(s[i],s[(i+1)%s.size()])/2.0;\n  }\n  return abs(res);\n}\n\ndouble area(Circle c1,Circle c2){\n  double d=abs(c1.c-c2.c);\n  if(c1.r+c2.r<=d+EPS) return 0;\n  if(d<=abs(c1.r-c2.r)){\n    double r=min(c1.r,c2.r);\n    return PI*r*r;\n  }\n  double rc=(d*d+c1.r*c1.r-c2.r*c2.r)/(2*d);\n  double th=acos(rc/c1.r);\n  double ph=acos((d-rc)/c2.r);\n  return c1.r*c1.r*th+c2.r*c2.r*ph-d*c1.r*sin(th);\n}\n\nPolygon convexCut(Polygon p,Line l){\n  Polygon q;\n  for(int i=0;i<(int)p.size();i++){\n    Point a=p[i],b=p[(i+1)%p.size()];\n    if(ccw(l.p1,l.p2,a)!=-1) q.push_back(a);\n    if(ccw(l.p1,l.p2,a)*ccw(l.p1,l.p2,b)<0)\n      q.push_back(getCrossPointLL(Line(a,b),l));\n  }\n  return q;\n}\n\nLine bisector(Point p1,Point p2){\n  Circle c1=Circle(p1,abs(p1-p2)),c2=Circle(p2,abs(p1-p2));\n  Polygon p=getCrossPointCC(c1,c2);\n  if(cross(p2-p1,p[0]-p1)>0) swap(p[0],p[1]);\n  return Line(p[0],p[1]);\n}\n\nVector translate(Vector v,double theta){\n  Vector res;\n  res.x=cos(theta)*v.x-sin(theta)*v.y;\n  res.y=sin(theta)*v.x+cos(theta)*v.y;\n  return res;\n}\n\nvector<Line> corner(Line l1,Line l2){\n  vector<Line> res;\n  if(isParallel(l1,l2)){\n    double d=getDistanceLP(l1,l2.p1)/2.0;\n    Vector v1=l1.p2-l1.p1;\n    v1=v1/v1.abs()*d;\n    Point p=l2.p1+translate(v1,90.0*(PI/180.0));\n    double d1=getDistanceLP(l1,p);\n    double d2=getDistanceLP(l2,p);\n    if(abs(d1-d2)>d){\n      p=l2.p1+translate(v1,-90.0*(PI/180.0));\n    }\n    res.push_back(Line(p,p+v1));\n  }else{\n    Point p=getCrossPointLL(l1,l2);\n    Vector v1=l1.p2-l1.p1,v2=l2.p2-l2.p1;\n    v1=v1/v1.abs();\n    v2=v2/v2.abs();\n    res.push_back(Line(p,p+(v1+v2)));\n    res.push_back(Line(p,p+translate(v1+v2,90.0*(PI/180.0))));\n  }\n  return res;\n}\n\nPolygon tangent(Circle c1,Point p2){\n  Circle c2=Circle(p2,sqrt(norm(c1.c-p2)-c1.r*c1.r));\n  Polygon p=getCrossPointCC(c1,c2);\n  sort(p.begin(),p.end());\n  return p;\n}\n\nvector<Line> tangent(Circle c1,Circle c2){\n  vector<Line> ls;\n  if(c1.r<c2.r) swap(c1,c2);\n  double g=norm(c1.c-c2.c);\n  if(equals(g,0)) return ls;\n  Point u=(c2.c-c1.c)/sqrt(g);\n  Point v=orth(u);\n  for(int s=1;s>=-1;s-=2){\n    double h=(c1.r+s*c2.r)/sqrt(g);\n    if(equals(1-h*h,0)){\n      ls.emplace_back(c1.c+u*c1.r,c1.c+(u+v)*c1.r);\n    }else if(1-h*h>0){\n      Point uu=u*h,vv=v*sqrt(1-h*h);\n      ls.emplace_back(c1.c+(uu+vv)*c1.r,c2.c-(uu+vv)*c2.r*s);\n      ls.emplace_back(c1.c+(uu-vv)*c1.r,c2.c-(uu-vv)*c2.r*s);\n    }\n  }\n  \n  return ls;\n}\n\n//END CUT HERE\n\n//Projection\nsigned AOJ_CGL1A(){\n  Point p1,p2;\n  cin>>p1>>p2;\n  int q;\n  cin>>q;\n  while(q--){\n    Point p;\n    cin>>p;\n    cout<<project(Line(p1,p2),p)<<endl;\n  }\n  return 0;\n}\n/*\n  verified on 2017/12/31\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_A&lang=jp\n*/\n\n//Reflect\nsigned AOJ_CGL1B(){\n  Point p1,p2;\n  cin>>p1>>p2;\n  int q;\n  cin>>q;\n  while(q--){\n    Point p;\n    cin>>p;\n    cout<<reflect(Line(p1,p2),p)<<endl;\n  }\n  return 0;\n}\n/*\n  verified on 2017/12/31\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_B&lang=jp\n*/\n\n//CCW\nsigned AOJ_CGL1C(){\n  Point p0,p1;\n  cin>>p0>>p1;\n  int q;\n  cin>>q;\n  while(q--){\n    Point p2;\n    cin>>p2;\n    int t=ccw(p0,p1,p2);\n    if(t==CCW_COUNTER_CLOCKWISE) cout<<\"COUNTER_CLOCKWISE\"<<endl;\n    if(t==CCW_CLOCKWISE) cout<<\"CLOCKWISE\"<<endl;\n    if(t==CCW_ONLINE_BACK) cout<<\"ONLINE_BACK\"<<endl;\n    if(t==CCW_ONLINE_FRONT) cout<<\"ONLINE_FRONT\"<<endl;\n    if(t==CCW_ON_SEGMENT) cout<<\"ON_SEGMENT\"<<endl;\n  }\n  return 0;\n}\n/*\n  verified on 2017/12/31\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_C&lang=jp\n*/\n\n//Parallel / Orthogonal\nsigned AOJ_CGL2A(){\n  int q;\n  cin>>q;\n  while(q--){\n    Point p0,p1,p2,p3;\n    cin>>p0>>p1>>p2>>p3;\n    if(isParallel(Line(p0,p1),Line(p2,p3))) cout<<2<<endl;\n    else if(isOrthogonal(Line(p0,p1),Line(p2,p3))) cout<<1<<endl;\n    else cout<<0<<endl;\n  }\n  return 0;\n}\n/*\n  verified on 2017/12/31\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_A&lang=jp\n*/\n\n//intersectSS\nsigned AOJ_CGL2B(){\n  int q;\n  cin>>q;\n  while(q--){\n    Point p0,p1,p2,p3;\n    cin>>p0>>p1>>p2>>p3;\n    cout<<(intersectSS(Segment(p0,p1),Segment(p2,p3)))<<endl;\n  }\n  return 0;\n}\n/*\n  verified on 2017/12/31\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_B&lang=jp\n*/\n\n//cross point\nsigned AOJ_CGL2C(){\n  int q;\n  cin>>q;\n  while(q--){\n    Point p0,p1,p2,p3;\n    cin>>p0>>p1>>p2>>p3;\n    cout<<getCrossPointSS(Segment(p0,p1),Segment(p2,p3))<<endl;\n  }\n  return 0;\n}\n/*\n  verified on 2017/12/31\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_C&lang=jp\n*/\n\n//distanceSS\nsigned AOJ_CGL2D(){\n  int q;\n  cin>>q;\n  while(q--){\n    Point p0,p1,p2,p3;\n    cin>>p0>>p1>>p2>>p3;\n    printf(\"%.12f\\n\",getDistanceSS(Segment(p0,p1),Segment(p2,p3)));\n  }\n  return 0;\n}\n/*\n  verified on 2017/12/31\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_D&lang=jp\n*/\n\n//Common Tangent\nsigned AOJ_CGL7G(){\n  Circle c1,c2;\n  cin>>c1>>c2;\n  auto ls=tangent(c1,c2);\n  Polygon ps;\n  for(auto l:ls) ps.emplace_back(getCrossPointCL(c1,l)[0]);\n  sort(ps.begin(),ps.end());\n  for(auto p:ps) cout<<p<<endl;\n  return 0;\n}\n/*\n  verified on 2017/12/31\n  http://judge.u-aizu.ac.jp/onlinejudge//description.jsp?id=CGL_7_G&lang=jp\n*/\n\nsigned main(){\n  //AOJ_CGL1A();\n  //AOJ_CGL1B();\n  //AOJ_CGL1C();\n\n  //AOJ_CGL2A();\n  //AOJ_CGL2B();\n  //AOJ_CGL2C();\n  AOJ_CGL2D();\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <cmath>\nusing namespace std;\n#define EPS (1e-10)\nstruct Point\n{\n    double x, y;\n    Point() {}\n    Point(double _x,double _y):x(_x),y(_y) {}\n    Point operator +(Point a)\n    {\n        return Point(x+a.x,y+a.y);\n    }\n    Point operator -(Point a)\n    {\n        return Point(x-a.x,y-a.y);\n    }\n\n};\ndouble dot(Point a,Point b)\n{\n    return a.x*b.x+a.y*b.y;\n}\ndouble cross(Point a,Point b)\n{\n    return a.x*b.y-a.y*b.x;\n}\ndouble norm(Point a)\n{\n    return a.x*a.x+a.y*a.y;\n}\ndouble abs(Point a)\n{\n    return sqrt(norm(a));\n}\n\nint n;\nPoint p1,p2,p3,p4;\nint ccw(Point p1,Point p2,Point p)\n{\n    Point a=p2-p1;\n    Point b=p-p1;\n    if(cross(a,b)<-EPS) return -1;\n    if(cross(a,b)>EPS) return 1;\n    if(dot(a,b)<-EPS) return -2;\n    if(norm(a)<norm(b)) return 2;\n    return 0;\n}\nbool is_insect(Point p1,Point p2,Point p3,Point p4)\n{\n    if(ccw(p1,p2,p3)*ccw(p1,p2,p4)<=0&&ccw(p3,p4,p1)*ccw(p3,p4,p2)<=0) return true;\n    return false;\n}\ndouble dist_lp(Point p1,Point p2,Point p)\n{\n    if(dot(p2-p1,p-p1)<0.0) return abs(p-p1);\n    if(dot(p1-p2,p-p2)<0.0) return abs(p-p2);\n    return fabs(cross(p2-p1,p-p1))/abs(p2-p1);\n}\ndouble dist_ll(Point p1,Point p2,Point p3,Point p4)\n{\n     if(is_insect(p1,p2,p3,p4)) return 0.0;\n    return min(min(dist_lp(p1,p2,p3),dist_lp(p1,p2,p4)),min(dist_lp(p3,p4,p1),dist_lp(p3,p4,p2)));\n}\nint main()\n{\n//    freopen(\"in.txt\",\"r\",stdin);\n    scanf(\"%d\",&n);\n    while(n--)\n    {\n        scanf(\"%lf%lf%lf%lf%lf%lf%lf%lf\",&p1.x,&p1.y,&p2.x,&p2.y,&p3.x,&p3.y,&p4.x,&p4.y);\n        printf(\"%.10lf\\n\",dist_ll(p1,p2,p3,p4));\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nconst double eps = 1e-12;\nbool dless(double d1, double d2) { return d1 - d2 <= eps; }\nbool dcmp(double d, double d2 = 0) { return abs(d - d2) < eps; }\ndouble sgn(double d) {\n  if (dcmp(d))\n    return 0;\n  if (d > 0)\n    return 1;\n  return -1;\n}\n\nstruct vec {\n  double x, y;\n  vec(double x, double y) : x(x), y(y) {}\n  vec() : x(0), y(0) {}\n  const bool operator==(const vec &v) const {\n    return dcmp(x, v.x) && dcmp(y, v.y);\n  }\n  const bool operator!=(const vec &v) const { return !(*this == v); }\n  const vec operator+(const vec &v) const { return vec(x + v.x, y + v.y); }\n  const vec operator-() const { return vec(-x, -y); }\n  const vec operator-(const vec &v) const { return *this + (-v); }\n  const vec operator*(const double d) const { return vec(x * d, y * d); }\n  const vec operator/(const double d) const { return *this * (1 / d); }\n  const vec unit() const { return *this / len(); };\n  const double len() const { return sqrt(x * x + y * y); }\n  const double dot(const vec &v) const { return x * v.x + y * v.y; }\n  const double cross(const vec &v) const { return x * v.y - y * v.x; }\n  const bool parallel(const vec &v) const { return dcmp(cross(v)); }\n  const bool perpendicular(const vec &v) const { return dcmp(dot(v)); }\n};\n\ntypedef vec point;\n\ntemplate <class T> struct optional {\n  bool has;\n  T val;\n  optional() : has(false) {}\n  optional(T t) : has(true), val(t) {}\n};\n\nstruct line {\n  double a, b, c;\n  line(point p1, point p2) {\n    a = p1.y - p2.y;\n    b = p2.x - p1.x;\n    c = (p1.x - p2.x) * p1.y + (p2.y - p1.y) * p1.x;\n    double m1 = a * p1.x + b * p1.y + c;\n    double m2 = a * p2.x + b * p2.y + c;\n  }\n  bool parallel(line l) { return dcmp(a * l.b, b * l.a); }\n  optional<point> intersect(line l) {\n    if (parallel(l))\n      return optional<point>();\n    return point(-(c * l.b - b * l.c) / (a * l.b - b * l.a),\n                 (c * l.a - a * l.c) / (a * l.b - b * l.a));\n  }\n  bool contains(point p) { return dcmp(a * p.x + b * p.y + c); }\n  point project(point p) {\n    double t = -(a * p.x + b * p.y + c) / (a * a + b * b);\n    return point(p.x + a * t, p.y + b * t);\n  }\n};\n\nstruct segment {\n  point p1, p2;\n  segment(point p1, point p2) : p1(p1), p2(p2) {}\n  line sline() { return line(p1, p2); }\n  bool contains(point p) {\n    double x1 = min(p1.x, p2.x), x2 = max(p1.x, p2.x);\n    double y1 = min(p1.y, p2.y), y2 = max(p1.y, p2.y);\n    bool ok = sline().contains(p) && (dless(x1, p.x) && dless(p.x, x2)) &&\n              (dless(y1, p.y) && dless(p.y, y2));\n    return ok;\n  }\n  bool intersect(segment s) {\n    vec v0 = p2 - p1;\n    vec v1 = s.p2 - s.p1;\n    if (v0.parallel(v1)) {\n      return (contains(s.p1) || contains(s.p2)) ||\n             (s.contains(p1) || s.contains(p2));\n    }\n    point a = p1, b = p2, c = s.p1, d = s.p2;\n    return sgn((a - b).cross(b - c)) != sgn((a - b).cross(b - d)) &&\n           sgn((c - d).cross(d - a)) != sgn((c - d).cross(d - b));\n  }\n  double distance(point p) {\n    point p0 = sline().project(p);\n    if (contains(p0)) {\n      return (p0 - p).len();\n    } else {\n      return min((p1 - p).len(), (p2 - p).len());\n    }\n  }\n};\n\nint main() {\n  int n;\n  cin >> n;\n  for (int i = 0; i < n; i++) {\n    point p0, p1, p2, p3;\n    cin >> p0.x >> p0.y >> p1.x >> p1.y >> p2.x >> p2.y >> p3.x >> p3.y;\n    segment l0(p0, p1);\n    segment l1(p2, p3);\n    double d = 1.0 / 0.0;\n    d = min(d, l0.distance(p2));\n    d = min(d, l0.distance(p3));\n    d = min(d, l1.distance(p0));\n    d = min(d, l1.distance(p1));\n    if (l0.intersect(l1))\n      d = 0;\n    printf(\"%.11lf\\n\", d);\n  }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n\nusing namespace std;\n\n// 2次元ベクトルクラス\nclass Vector {\npublic:\n    float x, y;\n    \n    // コンストラクタ\n    Vector() {\n        x = 0.f;\n        y = 0.f;\n    }\n    \n    // コンストラクタ(引数あり)\n    Vector(float nx, float ny) {\n        x = nx;\n        y = ny;\n    }\n    \n    // x,y成分を設定する\n    void set(float nx, float ny) {\n        x = nx;\n        y = ny;\n    }\n    \n    // 内積を求める\n    float dot(const Vector& vec) const {\n        return x * vec.x + y * vec.y;\n    }\n    \n    // 外積を求める\n    float cross(const Vector& vec) const {\n        return x * vec.y - y * vec.x;\n    }\n    \n    // 余弦を求める\n    float getCos(const Vector& vec) const {\n        float nor = norm() * vec.norm();\n        if (nor == 0.f) {\n            return 0.f;\n        } else {\n            return dot(vec) / nor;\n        }\n    }\n    \n    // ベクトルの大きさを求める\n    float norm() const {\n        return sqrt(x * x + y * y);\n    }\n    \n    // 単位ベクトルを返す\n    Vector getUnit() const {\n        Vector v;\n        float n = norm();\n        if (n == 0.f) {\n            v.set(0.f, 0.f);\n        } else {\n            v.set(x / n, y / n);\n        }\n        return v;\n    }\n    \n    void operator = (const Vector& vec) {\n        x = vec.x;\n        y = vec.y;\n    }\n    \n    Vector operator + (const Vector& vec) const {\n        Vector v(x + vec.x, y + vec.y);\n        return v;\n    }\n    \n    Vector operator - (const Vector& vec) const {\n        Vector v(x - vec.x, y - vec.y);\n        return v;\n    }\n    \n    Vector operator * (const Vector& vec) const {\n        Vector v(x * vec.x, y * vec.y);\n        return v;\n    }\n    \n    Vector operator * (float f) const {\n        Vector v(x * f, y * f);\n        return v;\n    }\n    \n    Vector operator / (const Vector& vec) const {\n        Vector v;\n        if (vec.x == 0.f) {\n            v.x = 0.f;\n        } else {\n            v.x = x / vec.x;\n        }\n        \n        if (vec.y == 0.f) {\n            v.y = 0.f;\n        } else {\n            v.y = y / vec.y;\n        }\n        return v;\n    }\n    \n    Vector operator / (float f) const {\n        Vector v;\n        if (f == 0.f) {\n            v.set(0.f, 0.f);\n        } else {\n            v.set(x / f, y / f);\n        }\n        return v;\n    }\n    \n    void operator += (const Vector& vec) {\n        x += vec.x;\n        y += vec.y;\n    }\n    \n    void operator -= (const Vector& vec) {\n        x -= vec.x;\n        y -= vec.y;\n    }\n    \n    void operator *= (const Vector& vec) {\n        x *= vec.x;\n        y *= vec.y;\n    }\n    \n    void operator /= (const Vector& vec) {\n        if (vec.x == 0.f) {\n            x = 0.f;\n        } else {\n            x /= vec.x;\n        }\n        \n        if (vec.y == 0.f) {\n            y = 0.f;\n        } else {\n            y /= vec.y;\n        }\n    }\n    \n    bool operator == (const Vector& vec) const {\n        if (x == vec.x && y == vec.y) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n};\n\n// ベクトル1をベクトル2に正射影したベクトルを求める\nstatic Vector getProjection(const Vector& vec1, const Vector& vec2) {\n    Vector vec(vec2.getUnit() * vec1.norm() * vec1.getCos(vec2));\n    return vec;\n}\n\n\nclass LineSegment {\nprivate:\n    Vector start; // 始点\n    Vector end; // 終点\n    \npublic:\n    //コンストラクタ\n    LineSegment () {}\n    \n    // 始点と終点を設定する\n    void setStartEnd(float sx, float sy, float ex, float ey) {\n        start.set(sx, sy);\n        end.set(ex, ey);\n    }\n    \n    // 始点を取得する\n    Vector getStart() const {\n        return start;\n    }\n    \n    //　終点を取得する\n    Vector getEnd() const {\n        return end;\n    }\n    \n    // 指定の線分を含むか\n    // このメソッドは線分同士が平行の時しか使用しない\n    bool isInLine(const LineSegment& l) const {\n        bool b1 = isPointInLine(l.getStart());\n        bool b2 = isPointInLine(l.getEnd());\n        if (b1 || b2) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    \n    // 指定の点を線分の中に含むか\n    bool isPointInLine(const Vector& p) const {\n        if (start == p) {\n            return true;\n        }\n        \n        Vector l1 = end - start;\n        Vector l2 = p - start;\n        Vector u1 = l1.getUnit();\n        Vector u2 = l2.getUnit();\n\n        if (u1 == u2 && l2.norm() <= l1.norm()) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    \n    // 指定の線分と交差しているか\n    // @return 0(交差していない), 1(交差している)\n    int isCross(const LineSegment& l) const {\n        Vector l1 = end - start;\n        float c1 = l1.cross(l.getStart() - start);\n        float c2 = l1.cross(l.getEnd() - start);\n        \n        Vector l2 = l.getEnd() - l.getStart();\n        float c3 = l2.cross(start - l.getStart());\n        float c4 = l2.cross(end - l.getStart());\n        \n        if (c1 * c2 == 0.f && c3 * c4 == 0.f) { // 平行のとき\n            LineSegment ls;\n            ls.setStartEnd(start.x, start.y, end.x, end.y);\n            if (isInLine(l) || l.isInLine(ls)) {\n                return 1;\n            }\n            return 0;\n        } else if ((c1 * c2 < 0.f && c3 * c4 <= 0.f)\n                   || (c1 * c2 <= 0.f && c3 * c4 < 0.f)\n                   || (c1 * c2 < 0.f && c3 * c4 < 0.f)) { // 交差するとき\n            return 1;\n        } else { // 交差しないとき\n            return 0;\n        }\n    }\n    \n    // 任意の点が線分の始点より外にあるか\n    bool isOutOfStart(const Vector& vec) const {\n        Vector p = end - start;\n        Vector q = vec - start;\n        float d = p.dot(q);\n        if (d < 0) { // 内積が負のとき\n            return true;\n        }\n        return false;\n    }\n    \n    // 任意の線分との距離を求める\n    float getDistance(const LineSegment& l) const {\n        if (isCross(l)) { // 交差しているとき\n            return 0.f;\n        }\n        float dis1 = getDistance(l.getStart());\n        float dis2 = getDistance(l.getEnd());\n        LineSegment ls;\n        ls.setStartEnd(start.x, start.y, end.x, end.y);\n        float dis3 = l.getDistance(ls.getStart());\n        float dis4 = l.getDistance(ls.getEnd());\n        float min1 = min(dis1, dis2);\n        float min2 = min(dis3, dis4);\n        return min(min1, min2);\n    }\n    \n    // 任意の点との距離を求める\n    float getDistance(const Vector& vec) const {\n        if (isPointInLine(vec)) { // 線分内に点を含むとき\n            return 0.f;\n        }\n        if (!isOutOfStart(vec)) { // 線分の始点より内側に点があるとき\n            Vector p = end - start;\n            Vector q = vec - start;\n            Vector proj = getProjection(q, p);\n            if (p.norm() > proj.norm()) { // 正射影したベクトルが線分より短いとき\n                return (q - proj).norm();\n            } else { // 正射影したベクトルが線分と等しいか、長いとき\n                return (vec - end).norm();\n            }\n        } else { // 線分の始点より外にあるとき\n            return (vec - start).norm();\n        }\n    }\n};\n\nint main() {\n    int n;\n    cin >> n;\n    \n    LineSegment l1, l2;\n    vector<float> result;\n    for (int i = 0; i < n; i++) {\n        float sx1, sy1, ex1, ey1, sx2, sy2, ex2, ey2;\n        cin >> sx1 >> sy1 >> ex1 >> ey1 >> sx2 >> sy2 >> ex2 >> ey2;\n        l1.setStartEnd(sx1, sy1, ex1, ey1);\n        l2.setStartEnd(sx2, sy2, ex2, ey2);\n        result.push_back(l1.getDistance(l2));\n    }\n    \n    for (int i = 0; i < result.size(); i++) {\n        printf(\"%.8f\\n\", result[i]);\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <complex>\n#include <cstdio>\n#include <iostream>\n#include <utility>\nusing namespace std;\n#define X real()\n#define Y imag()\n#define EPS 1e-10\ntypedef complex<double> P;\ntypedef pair<P, P> L;\n\ndouble dot(P a, P b){\n  return a.X*b.X + a.Y*b.Y;\n}\n\ndouble cross(P a, P b){\n  return a.X*b.Y - a.Y*b.X;\n}\n\nint ccw(P a, P b, P c){\n  if(cross(b-a,c-a) > EPS) return 1;\n  if(cross(b-a,c-a) < -EPS) return -1;\n  if(dot(b-a,c-a) < EPS) return 2;\n  if(abs(c-a) - EPS < abs(b-a)) return -2;\n  return 0;\n}\n\nbool is_cross(L a, L b){\n  if(ccw(a.first,a.second,b.first)*ccw(a.first,a.second,b.second) <= 0 &&\n     ccw(b.first,b.second,a.first)*ccw(b.first,b.second,a.second) <= 0) return true;\n  return false;\n}\n\ndouble p_to_s_dist(P a, L s){\n  if(dot(s.second-s.first,a-s.first) >= 0 && dot(s.first-s.second,a-s.second) >= 0){\n    return abs(cross(s.first-s.second,a-s.second))/abs(s.first-s.second);\n  }\n  return min(abs(a-s.first), abs(a-s.second));\n}\n\ndouble s_to_s_dist(L a, L b){\n  if(is_cross(a,b)) return 0;\n  return min(min(p_to_s_dist(a.first,b),p_to_s_dist(a.second,b)),\n\t     min(p_to_s_dist(b.first,a),p_to_s_dist(b.second,a)));\n}\n\nint main(){\n  int q;\n  cin >> q;\n  P points[4];\n  double x, y;\n  for(int i = 0; i < q; ++i){\n    for(int j = 0; j < 4; ++j){\n      cin >> x >> y;\n      points[j] = P(x, y);\n    }\n    L s1 = L(points[0],points[1]), s2 = L(points[2],points[3]);\n    printf(\"%.10lf\\n\", s_to_s_dist(s1,s2));\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n#define rep(i,n) for (int i=0; i < (n); i++)\ntypedef double D;      // ??§?¨?????????????double???long double?????????\ntypedef complex<D> P;  // Point\ntypedef pair<P, P> L;  // Line\ntypedef vector<P> VP;\nconst D EPS = 1e-9;    // ?¨±??????????????????????????£????????????\n#define X real()\n#define Y imag()\n#define LE(n,m) ((n) < (m) + EPS)\n#define GE(n,m) ((n) + EPS > (m))\n#define EQ(n,m) (abs((n)-(m)) < EPS)\n \n// ?????????dot(a,b) = |a||b|cos??\nD dot(P a, P b) {return (conj(a)*b).X; }\n \n// ?????????cross(a,b) = |a||b|sin??\nD cross(P a, P b) {  return (conj(a)*b).Y;}\n \n// ??????????????????\nint ccw(P a, P b, P c) {\n  b -= a;  c -= a;\n  if (cross(b,c) >  EPS) return +1;  // counter clockwise\n  if (cross(b,c) < -EPS) return -1;  // clockwise\n  if (dot(b,c)   < -EPS) return +2;  // c--a--b on line\n  if (norm(b) < norm(c)) return -2;  // a--b--c on line or a==b\n  return 0;                          // a--c--b on line or a==c or b==c\n}\n\nbool isparallel(L a,L b){\n  return cross(a.first-a.second,b.first-b.second) == 0.0 ;\n}\n \n/* ?????????????????´???????????????????????????????????????????????\\????????´????????????????????¨????????????isec???intersect?????\\ */\n \n// ??´?????¨???\nbool isecLP(P a1, P a2, P b) {\n  return abs(ccw(a1, a2, b)) != 1;  // return EQ(cross(a2-a1, b-a1), 0); ??¨??????\n}\n \n// ??´?????¨??´???\nbool isecLL(P a1, P a2, P b1, P b2) {\n  return !isecLP(a2-a1, b2-b1, 0) || isecLP(a1, b1, b2);\n}\n \n// ??´?????¨??????\nbool isecLS(P a1, P a2, P b1, P b2) {\n  return cross(a2-a1, b1-a1) * cross(a2-a1, b2-a1) < EPS;\n}\n \n// ????????¨??????\nbool isecSS(P a1, P a2, P b1, P b2) {\n  return ccw(a1, a2, b1)*ccw(a1, a2, b2) <= 0 &&\n         ccw(b1, b2, a1)*ccw(b1, b2, a2) <= 0;\n}\n \n// ????????¨???\nbool isecSP(P a1, P a2, P b) {\n  return !ccw(a1, a2, b);\n  // return abs(a1 - b) + abs(a2 - b) - abs(a2 - a1) < EPS;  //Perfective\n}\n \n \n/* ?????¢????????´?????????????????????????????????????????? */\n \n// ???p?????´???a???????°???±????????????\nP proj(P a1, P a2, P p) {\n  return a1 + dot(a2-a1, p-a1)/norm(a2-a1) * (a2-a1);\n}\n \n// ???p?????´???a??????????°?????????????\nP reflection(P a1, P a2, P p) {\n  return 2.0*proj(a1, a2, p) - p;\n}\n \nD distLP(P a1, P a2, P p) {\n  return abs(proj(a1, a2, p) - p);\n}\n \nD distLL(P a1, P a2, P b1, P b2) {\n  return isecLL(a1, a2, b1, b2) ? 0 : distLP(a1, a2, b1);\n}\n \nD distLS(P a1, P a2, P b1, P b2) {\n  return isecLS(a1, a2, b1, b2) ? 0 : min(distLP(a1, a2, b1), distLP(a1, a2, b2));\n}\n \nD distSP(P a1, P a2, P p) {\n  P r = proj(a1, a2, p);\n  if (isecSP(a1, a2, r)) return abs(r-p);\n  return min(abs(a1-p), abs(a2-p));\n}\n \nD distSS(P a1, P a2, P b1, P b2) {\n  if (isecSS(a1, a2, b1, b2)) return 0;\n  return min(min(distSP(a1, a2, b1), distSP(a1, a2, b2)),\n             min(distSP(b1, b2, a1), distSP(b1, b2, a2)));\n}\n \n// 2??´????????????\nP crosspointLL(P a1, P a2, P b1, P b2) {\n  D d1 = cross(b2-b1, b1-a1);\n  D d2 = cross(b2-b1, a2-a1);\n  if (EQ(d1, 0) && EQ(d2, 0)) return a1;  // same line\n  if (EQ(d2, 0)) throw \"kouten ga nai\";   // ???????????????\n  return a1 + d1/d2 * (a2-a1);\n}\n \n \n/* ??? */\n \nD distLC(P a1, P a2, P c, D r) {\n  return max(distLP(a1, a2, c) - r, 0.0);\n}\n \nD distSC(P a1, P a2, P c, D r) {\n  D dSqr1 = norm(c-a1), dSqr2 = norm(c-a2);\n  if (dSqr1 < r*r ^ dSqr2 < r*r) return 0;  // ?????????????????????????????¨????????¢0???????????????OR????????????\n  if (dSqr1 < r*r & dSqr2 < r*r) return r - sqrt(max(dSqr1, dSqr2));\n  return max(distSP(a1, a2, c) - r, 0.0);\n}\n \nVP crosspointLC(P a1, P a2, P c, D r) {\n  VP ps;\n  P ft = proj(a1, a2, c);\n  if (!GE(r*r, norm(ft-c))) return ps;\n \n  P dir = sqrt(max(r*r - norm(ft-c), 0.0)) / abs(a2-a1) * (a2-a1);\n  ps.push_back(ft + dir);\n  if (!EQ(r*r, norm(ft-c))) ps.push_back(ft - dir);\n  return ps;\n}\n \nD distCC(P a, D ar, P b, D br) {\n  D d = abs(a-b);\n  return GE(d, abs(ar-br)) ? max(d-ar-br, 0.0) : abs(ar-br) - d;\n}\n \n// 2????????????\nVP crosspointCC(P a, D ar, P b, D br) {\n  VP ps;\n  P ab = b-a;\n  D d = abs(ab);\n  D crL = (norm(ab) + ar*ar - br*br) / (2*d);\n  if (EQ(d, 0) || ar < abs(crL)) return ps;\n \n  P abN = ab * P(0, sqrt(ar*ar - crL*crL) / d);\n  P cp = a + crL/d * ab;\n  ps.push_back(cp + abN);\n  if (!EQ(norm(abN), 0)) ps.push_back(cp - abN);\n  return ps;\n}\n \n// ???p?????????a????????\\????????\\???\nVP tangentPoints(P a, D ar, P p) {\n  VP ps;\n  D sin = ar / abs(p-a);\n  if (!LE(sin, 1)) return ps;  // ????????§NaN???????????????\n  D t = M_PI_2 - asin(min(sin, 1.0));\n  ps.push_back(                 a + (p-a)*polar(sin, t));\n  if (!EQ(sin, 1)) ps.push_back(a + (p-a)*polar(sin, -t));\n  return ps;\n}\n \n// 2????????±?????\\???????????????????????´????????????????????????????????¨?????\\?????¨??????\nvector<L> tangentLines(P a, D ar, P b, D br) {\n  vector<L> ls;\n  D d = abs(b-a);\n  rep (i,2) {\n    D sin = (ar - (1-i*2)*br) / d;\n    if (!LE(sin*sin, 1)) break;\n    D cos = sqrt(max(1 - sin*sin, 0.0));\n    rep (j,2) {\n      P n = (b-a) * P(sin, (1-j*2)*cos) / d;\n      ls.push_back(L(a + ar*n, b + (1-i*2)*br*n));\n      if (cos < EPS) break;  // ??????????????\\?????????????????????????????????????????????????????????\n    }\n  }\n  return ls;\n}\n \n// ????§???¢???????????????a,b,c???????????????????????£??????????????????\nP circumcenter(P a, P b, P c) {\n  a = (a-c)*0.5;\n  b = (b-c)*0.5;\n  return c + crosspointLL(a, a*P(1,1), b, b*P(1,1));\n}\n \n// ???a??¨???b?????????????????????r????????????????????????\nVP circlesPointsRadius(P a, P b, D r) {\n  VP cs;\n  P abH = (b-a)*0.5;\n  D d = abs(abH);\n  if (d == 0 || d > r) return cs;  // ???????????? !LE(d,r) ??¨?????????1??????????????´????????????\n  D dN = sqrt(r*r - d*d);          // ???????????? max(r*r - d*d, 0) ??¨??????\n  P n = abH * P(0,1) * (dN / d);\n  cs.push_back(a + abH + n);\n  if (dN > 0) cs.push_back(a + abH - n);\n  return cs;\n}\n \n// ???a??¨???b??????????????´???l?????\\??????????????????\nVP circlesPointsTangent(P a, P b, P l1, P l2) {\n  P n = (l2-l1) * P(0,1);\n  P m = (b-a) * P(0,0.5);\n  D rC = dot((a+b)*0.5-l1, n);\n  D qa = norm(n)*norm(m) - dot(n,m)*dot(n,m);\n  D qb = -rC * dot(n,m);\n  D qc = norm(n)*norm(m) - rC*rC;\n  D qd = qb*qb - qa*qc;  // qa*k^2 + 2*qb*k + qc = 0\n \n  VP cs;\n  if (qd < -EPS) return cs;\n  if (EQ(qa, 0)) {\n    if (!EQ(qb, 0)) cs.push_back((a+b)*0.5 - m * (qc/qb/2));\n    return cs;\n  }\n  D t = -qb/qa;\n  cs.push_back(              (a+b)*0.5 + m * (t + sqrt(max(qd, 0.0))/qa));\n  if (qd > EPS) cs.push_back((a+b)*0.5 + m * (t - sqrt(max(qd, 0.0))/qa));\n  return cs;\n}\n \n// ??????????????????????°????????????????\nP minEnclosingCircle(const VP& ps) {\n  P c;\n  double move = 0.5;\n  rep(i,39) {  // 2^(-39-1) \\approx 0.9e-12\n    rep(t,50) {\n      D max = 0;\n      int k = 0;\n      rep (j, ps.size()) if (max < norm(ps[j]-c)) {\n        max = norm(ps[j]-c);\n        k = j;\n      }\n      c += (ps[k]-c) * move;\n    }\n    move /= 2;\n  }\n  return c;\n}\n \n// ?§?????¨????\n// p1???????????¨????????????p???counter clockwise??§?????¢???????????§?¨?\n// D radi=acos((a*a+b*b-c*c)/(2*a*b));\n// radi=radi/M_PI*180;   /---????????????????????§---/\n// (a*a+b*b-c*c)/(2*a*b) = cos X ????????????\n// acos(X) = ????????¢??????????§????\n\n/* ????§???¢ */\n \n// ??????????????????sort???max_element????????????\nnamespace std {\n  bool operator<(const P a, const P b) {\n    return a.X != b.X ? a.X < b.X : a.Y < b.Y;\n  }\n}\n \n// ??????\nVP convexHull(VP ps) {  // ????????????????????????????????????????????????VP&???\n  int n = ps.size(), k = 0;\n  sort(ps.begin(), ps.end());\n  VP ch(2*n);\n  for (int i = 0; i < n; ch[k++] = ps[i++]) // lower-hull\n    while (k >= 2 && ccw(ch[k-2], ch[k-1], ps[i]) <= 0) --k;  // ????¨?????????????????????? == -1 ??¨??????\n  for (int i = n-2, t = k+1; i >= 0; ch[k++] = ps[i--]) // upper-hull\n    while (k >= t && ccw(ch[k-2], ch[k-1], ps[i]) <= 0) --k;\n  ch.resize(k-1);\n  return ch;\n}\n \n// ???????????????????????????????????????ccw???????????¨?????? != 1 ??¨??????\nbool isCcwConvex(const VP& ps) {\n  int n = ps.size();\n  rep (i, n) if (ccw(ps[i], ps[(i+1) % n], ps[(i+2) % n]) == -1) return false;\n  return true;\n}\n \n// ???????§???¢????????¨?????????O(n)\n// ?????????????????¨??????1????¢?????????????2????????¨??????0?????????\nint inConvex(P p, const VP& ps) {\n  int n = ps.size();\n  int dir = ccw(ps[0], ps[1], p);\n  rep (i, n) {\n    int ccwc = ccw(ps[i], ps[(i + 1) % n], p);\n    if (!ccwc) return 2;  // ?????????????????¨\n    if (ccwc != dir) return 0;\n  }\n  return 1;\n}\n \n// ???????§???¢????????¨?????????O(logn)\n// ?????????????????¨??????1????¢?????????????2????????¨??????0?????????\nint inCcwConvex(const VP& ps, P p) {\n  int n = ps.size();\n  P g = (ps[0] + ps[n / 3] + ps[n*2 / 3]) / 3.0;\n  if (g == p) return 1;\n  P gp = p - g;\n \n  int l = 0, r = n;\n  while (l + 1 < r) {\n    int mid = (l + r) / 2;\n    P gl = ps[l] - g;\n    P gm = ps[mid] - g;\n    if (cross(gl, gm) > 0) {\n      if (cross(gl, gp) >= 0 && cross(gm, gp) <= 0) r = mid;\n      else l = mid;\n    }\n    else {\n      if (cross(gl, gp) <= 0 && cross(gm, gp) >= 0) l = mid;\n      else r = mid;\n    }\n  }\n  r %= n;\n  D cr = cross(ps[l] - p, ps[r] - p);\n  return EQ(cr, 0) ? 2 : cr < 0 ? 0 : 1;\n}\n \n// ????§???¢????????¨??????\n// ?????????????????¨??????1????¢?????????????2????????¨??????0?????????\nint inPolygon(const VP& ps, P p) {\n  int n = ps.size();\n  bool in = false;\n  rep (i, n) {\n    P a = ps[i] - p;\n    P b = ps[(i + 1) % n] - p;\n    if (EQ(cross(a,b), 0) && LE(dot(a,b), 0)) return 2;\n    if (a.Y > b.Y) swap(a,b);\n    if ((a.Y*b.Y < 0 || (a.Y*b.Y < EPS && b.Y > EPS)) && LE(cross(a, b), 0)) in = !in;\n  }\n  return in;\n}\n \n// ???????§???¢?????????????????°\nVP convexCut(const VP& ps, P a1, P a2) {\n  int n = ps.size();\n  VP ret;\n  rep(i,n) {\n    int ccwc = ccw(a1, a2, ps[i]);\n    if (ccwc != -1) ret.push_back(ps[i]);\n    int ccwn = ccw(a1, a2, ps[(i + 1) % n]);\n    if (ccwc * ccwn == -1) ret.push_back(crosspointLL(a1, a2, ps[i], ps[(i + 1) % n]));\n  }\n  return ret;\n}\n \n// ???????§???¢?????´?????????????????????\npair<int, int> convexDiameter(const VP& ps) {\n  int n = ps.size();\n  int i = min_element(ps.begin(), ps.end()) - ps.begin();\n  int j = max_element(ps.begin(), ps.end()) - ps.begin();\n  int maxI, maxJ;\n  D maxD = 0;\n  rep(_, 2*n) {\n    if (maxD < norm(ps[i]-ps[j])) {\n      maxD = norm(ps[i]-ps[j]);\n      maxI = i;\n      maxJ = j;\n    }\n    if (cross(ps[i]-ps[(i+1) % n], ps[(j+1) % n]-ps[j]) <= 0) j = (j+1) % n;\n    else                                                      i = (i+1) % n;\n  }\n  return make_pair(maxI, maxJ);\n}\n \n// ????§???¢????¬?????????¢???\nD area(const VP& ps) {\n  D a = 0;\n  rep (i, ps.size()) a += cross(ps[i], ps[(i+1) % ps.size()]);\n  return a / 2;\n}\n \n// ????§???¢?????????????????????\nP centroid(const VP& ps) {\n  int n = ps.size();\n  D aSum = 0;\n  P c;\n  rep (i, n) {\n    D a = cross(ps[i], ps[(i+1) % n]);\n    aSum += a;\n    c += (ps[i] + ps[(i+1) % n]) * a;\n  }\n  return 1 / aSum / 3 * c;\n}\n \n// ??????????????????\nVP voronoiCell(P p, const VP& ps, const VP& outer) {\n  VP cl = outer;\n  rep (i, ps.size()) {\n    if (EQ(norm(ps[i]-p), 0)) continue;\n    P h = (p+ps[i])*0.5;\n    cl = convexCut(cl, h, h + (ps[i]-h)*P(0,1) );\n  }\n  return cl;\n}\n \n/* ????????°?????? */\n \nstruct Edge {\n  int from, to;\n  D cost;\n  Edge(int from, int to, D cost) : from(from), to(to), cost(cost) {}\n};\nstruct Graph {\n  int n;\n  vector<vector<Edge> > edges;\n  Graph(int n) : n(n), edges(n) {}\n  void addEdge(Edge e) {\n    edges[e.from].push_back(e);\n    edges[e.to].push_back(Edge(e.to, e.from, e.cost));\n  }\n};\n \n// ????????¢??¬???????????????????????????????????¢???????????°??????????????????\nGraph segmentArrangement(const vector<L>& segs, VP& ps) {\n  int n = segs.size();\n  rep (i, n) {\n    ps.push_back(segs[i].first);\n    ps.push_back(segs[i].second);\n    rep (j, i) {\n      if (isecSS(                 segs[i].first, segs[i].second, segs[j].first, segs[j].second))\n        ps.push_back(crosspointLL(segs[i].first, segs[i].second, segs[j].first, segs[j].second));\n    }\n  }\n  sort(ps.begin(), ps.end());\n  ps.erase(unique(ps.begin(), ps.end()), ps.end());\n \n  int m = ps.size();\n  Graph gr(m);\n  vector<pair<D, int> > list;\n  rep (i, n) {\n    list.clear();\n    rep (j, m) {\n      if (isecSP(segs[i].first, segs[i].second, ps[j]))\n        list.push_back(make_pair(norm(segs[i].first-ps[j]), j));\n    }\n    sort(list.begin(), list.end());\n    rep (j, list.size() - 1) {\n      int a = list[j  ].second;\n      int b = list[j+1].second;\n      gr.addEdge(Edge(a, b, abs(ps[a]-ps[b])));\n    }\n  }\n  return gr;\n}\n \n// ????????°?????????????????????????????????????????????????????£?????°?????????\nGraph visibilityGraph(const VP& ps, const vector<VP>& objs) {\n  int n = ps.size();\n  Graph gr(n);\n  rep (i,n) rep (j,i) {\n    P a = ps[i], b = ps[j];\n    if (!EQ(norm(a-b), 0)) rep (k, objs.size()) {\n      const VP& obj = objs[k];\n      int inStA = inConvex(a, obj);\n      int inStB = inConvex(b, obj);\n      if ((inStA ^ inStB) % 2 || inStA * inStB != 1 && inConvex((a+b)*0.5, obj) == 1) goto skip;\n      rep (l, obj.size()) {\n        P cur = obj[l];\n        P next = obj[(l + 1) % obj.size()];\n        if (isecSS(a, b, cur, next) && !isecSP(cur, next, a) && !isecSP(cur, next, b)) goto skip;\n      }\n    }\n    gr.addEdge( Edge(i, j, abs(a-b)) );\n    skip: {}\n  }\n  return gr;\n}\n \n \n/* ????????? */\n \n// ?????????????????????????????????\nvector<L> mergeSegments(vector<L> segs) {\n  int n = segs.size();\n  rep (i,n) if (segs[i].second < segs[i].first) swap(segs[i].second, segs[i].first);\n \n  rep (i,n) rep (j,i) {\n    L &l1 = segs[i], &l2 = segs[j];\n    if (EQ(cross(l1.second-l1.first, l2.second-l2.first), 0)\n        && isecLP(l1.first, l1.second, l2.first)\n        && ccw   (l1.first, l1.second, l2.second) != 2\n        && ccw   (l2.first, l2.second, l1.second) != 2) {\n      segs[j] = L(min(l1.first, l2.first), max(l1.second, l2.second));\n      segs[i--] = segs[--n];\n      break;\n    }\n  }\n  segs.resize(n);\n  return segs;\n}\n\nD d[8];\nint main(){\n  int n;\n  cin>>n;\n  while(n--){\n    rep(i,8)cin>>d[i];\n    printf(\"%.12f\\n\",distSS(P(d[0],d[1]),P(d[2],d[3]),P(d[4],d[5]),P(d[6],d[7])));\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\ninline double add(double a, double b){\n    return abs(a+b)<(1e-10)*(abs(a)+abs(b)) ? 0.0 : a+b;\n}\n\nstruct vec{\n    double x,y;\n    vec operator-(vec b){\n        return (vec){add(x,-b.x),add(y,-b.y)};\n    }\n    vec operator+(vec b){\n        return (vec){add(x,b.x),add(y,b.y)};\n    }\n    vec operator*(double d){\n        return (vec){x*d,y*d};\n    }\n    double dot(vec v){\n        return add(x*v.x,y*v.y);\n    }\n    double cross(vec v){\n        return add(x*v.y,-y*v.x);\n    }\n};\n\nconst double eps = 0.0000001;\n\n\nint ccw(vec& a, vec& b, vec& c){\n    vec ab = b-a, ac = c-a;\n    double o = ab.cross(ac);\n    if(o>0) return 1; //CCW\n    if(o<0) return -1; //CW\n    if(ab.dot(ac)<0){\n        return 2; //C-A-B\n    }else{\n        if(ab.dot(ab)<ac.dot(ac)){\n            return -2; //A-B-C\n        }else{\n            return 0; //A-C-B\n        }\n    }\n}\n\nbool isInterSection(vec (&p)[4]){\n    switch(ccw(p[0],p[1],p[2])*ccw(p[0],p[1],p[3])){\n        case -1:\n        case -4:\n        case 0:\n            break;\n        default:\n            return false;\n    }\n    switch(ccw(p[2],p[3],p[0])*ccw(p[2],p[3],p[1])){\n        case -1:\n        case -4:\n        case 0:\n            break;\n        default:\n            return false;\n    }\n   return true;\n}\n\nvec interSection(vec (&p)[4]){\n    vec p23=p[3]-p[2],p02=p[2]-p[0],p01=p[1]-p[0];\n    double k = p23.cross(p02)/p23.cross(p01);\n    return p[0]+p01*k;\n}\n\ndouble dist(vec (&p)[4]){\n    if(isInterSection(p)) return 0;\n    double dist =1e5;\n    vec P;\n    P=p[0]+(p[1]-p[0])*((p[1]-p[0]).dot(p[2]-p[0])/(p[1]-p[0]).dot(p[1]-p[0]));\n    if(!ccw(p[0],p[1],P)){\n        dist = min(dist,sqrt((P-p[2]).dot(P-p[2])));\n    }\n    P=p[0]+(p[1]-p[0])*((p[1]-p[0]).dot(p[3]-p[0])/(p[1]-p[0]).dot(p[1]-p[0]));\n    if(!ccw(p[0],p[1],P)){\n        dist = min(dist,sqrt((P-p[3]).dot(P-p[3])));\n    }\n    P=p[2]+(p[3]-p[2])*((p[3]-p[2]).dot(p[0]-p[2])/(p[3]-p[2]).dot(p[3]-p[2]));\n    if(!ccw(p[2],p[3],P)){\n        dist = min(dist,sqrt((P-p[0]).dot(P-p[0])));\n    }\n    P=p[2]+(p[3]-p[2])*((p[3]-p[2]).dot(p[1]-p[2])/(p[3]-p[2]).dot(p[3]-p[2]));\n    if(!ccw(p[2],p[3],P)){\n        dist = min(dist,sqrt((P-p[1]).dot(P-p[1])));\n    }\n    return dist;\n}\n\nint main(void){\n    vec p[4];\n    int q;\n    cin >> q;\n    cout.precision(10);\n    cout << fixed;\n    while(q--){\n        for(auto& v : p) cin >> v.x >> v.y;\n        cout << dist(p) << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "using namespace std;\n#include<iostream>\n#include<algorithm>\n#include<cmath>\n#include<iomanip>\nconst double EPS=1e-10;\nbool eq(double a,double b){return abs(a-b)<EPS;}\nstruct Point{\n\tdouble x,y;\n\tPoint(double x_=0,double y_=0):x(x_),y(y_){}\n\tPoint operator-()const{return Point(-x,-y);}\n\tPoint operator+(const Point&p)const{return Point(x+p.x,y+p.y);}\n\tPoint operator-(const Point&p)const{return Point(x-p.x,y-p.y);}\n\tPoint operator*(const double k)const{return Point(x*k,y*k);}\n\tPoint operator/(const double k)const{return Point(x/k,y/k);}\n\tbool operator<(const Point&p)const{return eq(x,p.x)?y<p.y:x<p.x;}\n\tbool operator==(const Point&p)const{return eq(x,p.x)&&eq(y,p.y);}\n};\nistream&operator>>(istream&is,Point&p){return is>>p.x>>p.y;}\nostream&operator<<(ostream&os,const Point&p){return os<<fixed<<setprecision(9)<<p.x<<' '<<p.y;}\nstruct Line{\n\tPoint p1,p2;\n\tLine(Point p1_=Point(),Point p2_=Point()):p1(p1_),p2(p2_){}\n};\nstruct Segment:Line{\n\tSegment(Point p1_=Point(),Point p2_=Point()):Line(p1_,p2_){}\n};\nstruct Circle{\n\tPoint o;\n\tdouble r;\n\tCircle(Point o_=Point(),double r_=0):o(o_),r(r_){}\n};\n//function list begin\nPoint vec(const Line&);\ndouble norm(const Point&);\ndouble norm(const Line&);\ndouble abs(const Point&);\ndouble abs(const Line&);\ndouble arg(const Point&);\ndouble arg(const Line&);\ndouble arg(const Point&,const Point&,const Point&);\ndouble dot(const Point&,const Point&);\ndouble cross(const Point&,const Point&);\nPoint polar(const double,const double);\nPoint rotate(const Point&,const double);\nint ccw(const Point&,const Point&,const Point&);\nint ccw(const Line&,const Point&);\n//+2=>ONLINE_BACK\n//+1=>COUNTER_CLOCKWISE\n//+0=>ON_SEGMENT\n//-1=>CLOCKWISE\n//-2=>ONLINE_FRONT\nbool orthogonal(const Point&,const Point&);\nbool orthogonal(const Line&,const Line&);\nbool parallel(const Point&,const Point&);\nbool parallel(const Line&,const Line&);\nbool intersect(const Line&,const Point&);\nbool intersect(const Line&,const Line&);\nbool intersect(const Segment&,const Point&);\nbool intersect(const Segment&,const Segment&);\nbool intersect(const Line&,const Segment&);\nbool intersect(const Segment&,const Line&);\nbool intersect(const Circle&,const Point&);\nint intersect(const Circle&,const Line&);\nint intersect(const Circle&,const Segment&);\nint intersect(const Circle&,const Circle&);\ndouble distance(const Point&,const Point&);\ndouble distance(const Line&,const Point&);\ndouble distance(const Line&,const Line&);\ndouble distance(const Segment&,const Point&);\ndouble distance(const Segment&,const Segment&);\ndouble distance(const Line&,const Segment&);\ndouble distance(const Segment&,const Line&);\ndouble distance(const Circle&,const Point&);\ndouble distance(const Circle&,const Line&);\ndouble distance(const Circle&,const Segment&);\ndouble distance(const Circle&,const Circle&);\nPoint projection(const Line&,const Point&);\nPoint reflection(const Line&,const Point&);\nPoint crosspoint(const Line&,const Line&);\npair<Point,Point>crosspoint(const Circle&,const Line&);\npair<Point,Point>crosspoint(const Circle&,const Segment&);\npair<Point,Point>crosspoint(const Circle&,const Circle&);\n//function list end\nPoint vec(const Line&s){return s.p2-s.p1;}\ndouble norm(const Point&p){return p.x*p.x+p.y*p.y;}\ndouble norm(const Line&s){return norm(vec(s));}\ndouble abs(const Point&p){return hypot(p.x,p.y);}\ndouble abs(const Line&s){return abs(vec(s));}\ndouble arg(const Point&p){return atan2(p.y,p.x);}\ndouble arg(const Line&s){return arg(vec(s));}\ndouble arg(const Point&a,const Point&b,const Point&c){\n\tdouble A=arg(b-a),B=arg(c-b);\n\tdouble theta=abs(A-B);\n\treturn min(theta,2*M_PI-theta);\n}\ndouble dot(const Point&a,const Point&b){return a.x*b.x+a.y*b.y;}\ndouble cross(const Point&a,const Point&b){return a.x*b.y-a.y*b.x;}\nPoint polar(const double r,const double theta){return Point(cos(theta),sin(theta))*r;}\nPoint rotate(const Point&p,const double theta){\n\treturn Point(p.x*cos(theta)-p.y*sin(theta),p.x*sin(theta)+p.y*cos(theta));\n}\nint ccw(const Point&a,const Point&b,const Point&c){\n\tPoint p=b-a,q=c-a;\n\treturn cross(p,q)>EPS?1\n\t\t:cross(p,q)<-EPS?-1\n\t\t:dot(p,q)<0?2\n\t\t:norm(p)<norm(q)?-2\n\t\t:0;\n}\nint ccw(const Line&s,const Point&p){return ccw(s.p1,s.p2,p);}\nbool orthogonal(const Point&a,const Point&b){return eq(dot(a,b),0);}\nbool orthogonal(const Line&s,const Line&t){return orthogonal(vec(s),vec(t));}\nbool parallel(const Point&a,const Point&b){return eq(cross(a,b),0);}\nbool parallel(const Line&s,const Line&t){return parallel(vec(s),vec(t));}\nbool intersect(const Line&s,const Point&p){return eq(cross(vec(s),p-s.p1),0);}\nbool intersect(const Line&s,const Line&t){return !parallel(s,t)||intersect(s,t.p1);}\nbool intersect(const Segment&s,const Point&p){return ccw(s,p)==0;}\nbool intersect(const Segment&s,const Segment&t){\n\treturn ccw(s,t.p1)*ccw(s,t.p2)<=0&&ccw(t,s.p1)*ccw(t,s.p2)<=0;\n}\nbool intersect(const Line&s,const Segment&t){\n\treturn cross(vec(s),t.p1-s.p1)*cross(vec(s),t.p2-s.p1)<EPS;\n}\nbool intersect(const Segment&s,const Line&t){return intersect(t,s);}\nbool intersect(const Circle&c,const Point&p){return eq(distance(c.o,p),c.r);}\nint intersect(const Circle&c,const Line&s){\n\tdouble d=distance(s,c.o);\n\treturn eq(d,c.r)?1:d<c.r?2:0;\n}\nint intersect(const Circle&c,const Segment&s){\n\tPoint h=projection(s,c.o);\n\tdouble d1=distance(c.o,s.p1),d2=distance(c.o,s.p2);\n\treturn distance(c.o,h)>c.r+EPS?0\n\t\t:d1<c.r-EPS&&d2<c.r-EPS?0\n\t\t:d1<c.r-EPS&&d2>c.r+EPS||d1>c.r+EPS&&d2<c.r-EPS?1\n\t\t:intersect(s,h)?distance(c.o,h)<c.r-EPS?2:1\n\t\t:0;\n}\nint intersect(const Circle&a,const Circle&b){\n\tdouble d=distance(a.o,b.o);\n\treturn eq(d,a.r+b.r)?3:d>a.r+b.r?4:eq(d,abs(a.r-b.r))?1:d>abs(a.r-b.r)?2:0;\n}\ndouble distance(const Point&a,const Point&b){return abs(a-b);}\ndouble distance(const Line&s,const Point&p){return distance(p,projection(s,p));}\ndouble distance(const Line&s,const Line&t){return intersect(s,t)?0:distance(s,t.p1);}\ndouble distance(const Segment&s,const Point&p){\n\treturn distance(p,\n\t\tdot(vec(s),p-s.p1)<0?s.p1\n\t\t:dot(-vec(s),p-s.p2)<0?s.p2\n\t\t:projection(s,p)\n\t);\n}\ndouble distance(const Segment&s,const Segment&t){\n\treturn intersect(s,t)?0:min({\n\t\tdistance(s,t.p1),distance(s,t.p2),\n\t\tdistance(t,s.p1),distance(t,s.p2)\n\t});\n}\ndouble distance(const Line&s,const Segment&t){\n\treturn intersect(s,t)?0:min(distance(s,t.p1),distance(s,t.p2));\n}\ndouble distance(const Segment&s,const Line&t){return distance(t,s);}\ndouble distance(const Circle&c,const Point&p){return abs(distance(c.o,p)-c.r);}\ndouble distance(const Circle&c,const Line&s){return max(distance(s,c.o)-c.r,0.);}\ndouble distance(const Circle&c,const Segment&s){\n\tPoint h=projection(s,c.o);\n\tdouble d1=distance(c.o,s.p1),d2=distance(c.o,s.p2);\n\treturn intersect(c,s)?0\n\t\t:d1<c.r-EPS&&d2<c.r-EPS?c.r-max(d1,d2)\n\t\t:intersect(s,h)?distance(c.o,h)-c.r\n\t\t:min(distance(c.o,s.p1),distance(c.o,s.p2))-c.r;\n}\ndouble distance(const Circle&a,const Circle&b){return max(distance(a.o,b.o)-a.r-b.r,0.);}\nPoint projection(const Line&s,const Point&p){\n\treturn s.p1+vec(s)*dot(p-s.p1,vec(s))/norm(s);\n}\nPoint reflection(const Line&s,const Point&p){return projection(s,p)*2-p;}\nPoint crosspoint(const Line&s,const Line&t){\n\tdouble d1=abs(cross(vec(s),t.p1-s.p1));\n\tdouble d2=abs(cross(vec(s),t.p2-s.p1));\n\treturn t.p1+vec(t)*(d1/(d1+d2));\n}\npair<Point,Point>crosspoint(const Circle&c,const Line&s){\n\tPoint h=projection(s,c.o);\n\tPoint e=vec(s)/abs(s)*sqrt(c.r*c.r-norm(h-c.o));\n\treturn minmax(h-e,h+e);\n}\npair<Point,Point>crosspoint(const Circle&c,const Segment&s){\n\tpair<Point,Point>p=crosspoint(c,Line(s));\n\treturn intersect(c,s)==2?p\n\t\t:intersect(s,p.first)?make_pair(p.first,p.first)\n\t\t:make_pair(p.second,p.second);\n}\npair<Point,Point>crosspoint(const Circle&a,const Circle&b){\n\tdouble d=distance(a.o,b.o);\n\tdouble alpha=acos((a.r*a.r+d*d-b.r*b.r)/(2*a.r*d));\n\tdouble theta=arg(b.o-a.o);\n\treturn minmax(a.o+polar(a.r,theta+alpha),a.o+polar(a.r,theta-alpha));\n}\nmain(){\n\tSegment a,b;\n\tint n;\n\tfor(cin>>n;n--;)\n\t{\n\t\tcin>>a.p1>>a.p2>>b.p1>>b.p2;\n\t\tcout<<fixed<<setprecision(9)<<distance(a,b)<<endl;\n\t}\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<iomanip>\n#include<cmath>\nusing namespace std;\n\nstruct Point{\n    double x;\n    double y;\n    Point (double x, double y) : x(x), y(y){}\n    Point operator-(Point p){\n        return Point(x - p.x, y - p.y);\n    }\n};\ntypedef Point Vector;\ndouble dot(Vector v1, Vector v2){\n    return v1.x * v2.x + v1.y * v2.y;\n}\ndouble abs_(Vector v){\n    return sqrt(dot(v, v));\n}\ndouble cross(Vector v1, Vector v2){\n    return v1.x * v2.y - v1.y * v2.x;\n}\nstruct Segment{\n    Point p1;\n    Point p2;\n    Segment(Point p1, Point p2) : p1(p1), p2(p2){}\n};\nbool is_intersect(Segment s1, Segment s2){\n    double s1_x_min = s1.p1.x;\n    double s1_x_max = s1.p2.x;\n    if (s1_x_min > s1_x_max) swap(s1_x_min, s1_x_max);\n    double s2_x_min = s2.p1.x;\n    double s2_x_max = s2.p2.x;\n    if (s2_x_min > s2_x_max) swap(s2_x_min, s2_x_max);\n    if (s2_x_max < s1_x_min) return false;\n    if (s2_x_min > s1_x_max) return false;\n    double s1_y_min = s1.p1.y;\n    double s1_y_max = s1.p2.y;\n    if (s1_y_min > s1_y_max) swap(s1_y_min, s1_y_max);\n    double s2_y_min = s2.p1.y;\n    double s2_y_max = s2.p2.y;\n    if (s2_y_min > s2_y_max) swap(s2_y_min, s2_y_max);\n    if (s2_y_max < s1_y_min) return false;\n    if (s2_y_min > s1_y_max) return false;\n    return true;\n}\ndouble get_distanceSP(Segment s, Point p){\n// cout << \"(\" << s.p1.x << \",\" << s.p1.y << \")\";\n// cout << \"(\" << s.p2.x << \",\" << s.p2.y << \")   :    \";\n// cout << \"(\" << p.x << \",\" << p.y << \")\" << endl;\n    Vector a1 = s.p2 - s.p1;\n    Vector b1 = p    - s.p1;\n    if (dot(a1, b1) <= 0) return abs_(b1);\n    Vector a2 = s.p1 - s.p2;\n    Vector b2 = p    - s.p2;\n    if (dot(a2, b2) <= 0) return abs_(b2);\n    return fabs(cross(a1, b1)) / abs_(a1);\n}\ndouble get_distanceSS(Segment s1, Segment s2){\n    if (is_intersect(s1, s2)) return 0;\n    // cout << get_distanceSP(s1, s2.p1) << endl;\n    // cout << get_distanceSP(s1, s2.p2) << \" \";\n    // cout << get_distanceSP(s2, s1.p1) << \" \";\n    // cout << get_distanceSP(s2, s1.p2) << endl;\n    return min(min(get_distanceSP(s1, s2.p1), get_distanceSP(s1, s2.p2)),\n               min(get_distanceSP(s2, s1.p1), get_distanceSP(s2, s1.p2)));\n}\nint main(){\n    int q;\n    cin >> q;\n    for (int i = 0; i < q; i++) {\n        int x_p0, y_p0, x_p1, y_p1, x_p2, y_p2, x_p3, y_p3;\n        cin >> x_p0 >> y_p0 >> x_p1 >> y_p1;\n        cin >> x_p2 >> y_p2 >> x_p3 >> y_p3;\n        Segment s1(Point(x_p0, y_p0), Point(x_p1, y_p1));\n        Segment s2(Point(x_p2, y_p2), Point(x_p3, y_p3));\n        double distance = get_distanceSS(s1, s2);\n        cout << fixed << setprecision(10);\n        cout << distance << endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<cstring>\n#include<vector>\n#include<set>\n#include<queue>\n#include<cstdlib>\n#include<algorithm>\n\nusing namespace std;\n#define pb push_back\n#define mp make_pair\n#define SZ(x) (int)(x).size()\n\ntypedef long long LL;\ntypedef pair<int, int> pii;\ntypedef pair<double, double> pdd;\ntypedef pair<LL, LL> pll;\n\nconst double eps = 1e-10;\nconst double PI = acos(-1.0);\n//const double PI = 3.14159265358979323846264338327950288419716939937510\nint dcmp(const double &x) { if (fabs(x) < eps) return 0; return x < 0 ? -1 : 1; }\nconst int MOD = 1e9 + 7;\nconst int INF = 2e9;\nconst double INF_d = 1e64;\n\ntemplate<class T> \nT qmod(T a, T b){ T ret = 1; while (b){ if (b & 1) ret *= a; b >>= 1; a *= a; } return ret; }\ntemplate<class T>\nT gcd(T a, T b){ return !b ? a : gcd(b, a % b); }\ntemplate<class T>\nT ex_gcd(T a, T b, T &x, T &y){\n    if (!b){ x = 1, y = 0; return a; }\n    T t, ret;\n    ret = ex_gcd(b, a % b, x, y);\n    t = x, x = y, y = t - a / b * y;\n    return ret;\n}\ntemplate<class T>\nT inv(T t, T p){ return t == 1 ? 1 : (p - p / t) * inv(p % t, p) % p; }\n// head\n\ntypedef double db;\n\nstruct point{\n    db x, y;\n    point(){}\n    point(db a, db b): x(a), y(b){}\n    point operator + (const point &p){ return point(x + p.x, y + p.y); }\n    point operator - (const point &p){ return point(x - p.x, y - p.y); }\n    point operator * (const db &k){ return point(x * k, y * k); }\n    point operator / (const db &k){ return point(x / k, y / k); }\n    db operator ^ (const point &p){ return x * p.y - y * p.x; }\n    db operator * (const point &p){ return x * p.x + y * p.y; }\n    bool operator == (const point &p){ return !dcmp(x - p.x) && !dcmp(y - p.y); }\n    bool operator != (const point &p){ return dcmp(x - p.x) || dcmp(y - p.y); }\n    bool operator < (const point &p){ return x == p.x ? y < p.y : x < p.x; }\n    void read(){\n        scanf(\"%lf%lf\", &x, &y);\n    }\n    void print(){\n        printf(\"%.10f %.10f\\n\", x, y);\n    }\n    point rotate(db &ang){ return point(x * cos(ang) - y * sin(ang), y * cos(ang) + x * sin(ang)); }\n    point norm() { return point(-y, x); }\n    db len() { return sqrt(x * x + y * y); }\n    db len2(){ return x * x + y * y; }\n};\n\npoint err = point(INF_d, INF_d);\n\npoint proj_SP(point A, point B, point P){ // projection point of P in segment AB\n    point AB = B - A, AP = P - A;\n    return A + AB * (AP * AB / AB.len2());\n}\n\npoint refl_SP(point A, point B, point P){ // reflection point of P int segment AB\n    return proj_SP(A, B, P) * 2 - P;\n}\n\nstruct line{\n    point p[2], u;\n    line(){}\n    line(point s, point t){\n        p[0] = s, p[1] = t;\n        u = p[1] - p[0];\n    }\n    point get_point(double t){\n        return point(p[0] + u * t);\n    }\n};\n\nbool parallel(line L1, line L2){ // check whether two lines L1 and L2 are parallel\n    return !dcmp(L1.u ^ L2.u);\n}\n\nbool orthogonal(line L1, line L2){ // check whether two lines L1 and L2 are orthogonal\n    return !dcmp(L1.u * L2.u);\n}\n\npair<bool, point> inter_LL(line L1, line L2){ // calculate the intersection of two lines L1 and L2\n    if (parallel(L1, L2)) return mp(false, err);\n    double t = ((L2.p[0] - L1.p[0]) ^ L2.u) / (L1.u ^ L2.u);\n    return mp(true, L1.get_point(t));\n}\n\nbool one_dimention_check(db a, db b, db c, db d){ // check whether two one-dimention segments has intersection\n    if (dcmp(a - b) > 0) swap(a, b);\n    if (dcmp(c - d) > 0) swap(c, d);\n    return dcmp(b - c) >= 0 && dcmp(a - d) <= 0; \n}\n\nbool check_SS(point A, point B, point C, point D){ // check whether two segments AB and CD has intersection\n    bool flag = one_dimention_check(A.x, B.x, C.x, D.x) && one_dimention_check(A.y, B.y, C.y, D.y);\n    double a = dcmp((A - C) ^ (D - C)), b = dcmp((B - C) ^ (D - C)),\n            c = dcmp((C - A) ^ (B - A)), d = dcmp((D - A) ^ (B - A));\n    return flag && dcmp(a * b) <= 0 && dcmp(c * d) <= 0;\n}\n// calculate the intersection point of two segments, first check and then call inter_LL to get the cross point\n\nbool inmid(db a, db b, db c){  // check whether a <= c <= b\n    return dcmp(dcmp(b - c) * dcmp(a - c)) <= 0; \n}\n\nbool inmid(point A, point B, point P){ // check whether point P is in the rectangle of segment AB\n    return inmid(A.x, B.x, P.x) && inmid(A.y, B.y, P.y);\n}\n\ndb dis_SP(point A, point B, point P){\n    point p_proj = proj_SP(A, B, P);\n    if (inmid(A, B, p_proj)) return (P - p_proj).len();\n    else return min((P - A).len(), (P - B).len());\n}\n\ndb dis_SS(point A, point B, point C, point D){\n    db res = INF_d;\n    if (check_SS(A, B, C, D)) res = 0;\n    res = min(res, dis_SP(A, B, C));\n    res = min(res, dis_SP(A, B, D));\n    res = min(res, dis_SP(C, D, A));\n    res = min(res, dis_SP(C, D, B));\n    return res;\n}\n\nint n;\n\nint main(){\n    scanf(\"%d\", &n);\n    for (int i = 0; i < n; i++){\n        point p[4];\n        for (int j = 0; j < 4; j++){\n            p[j].read();\n        }\n        \n        printf(\"%.10f\\n\", dis_SS(p[0], p[1], p[2], p[3]));\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nclass Point {\npublic:\n\tdouble x, y;\n\tPoint(double x = 0.0, double y = 0.0) :\n\t\t\tx(x), y(y) {\n\t}\n\n\tPoint operator +(Point p) {\n\t\treturn Point(x + p.x, y + p.y);\n\t}\n\tPoint operator -(Point p) {\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n\tPoint operator *(double k) {\n\t\treturn Point(x * k, y * k);\n\t}\n\tPoint operator /(double k) {\n\t\treturn Point(x / k, y / k);\n\t}\n\n\tdouble norm() {\n\t\treturn x * x + y * y;\n\t}\n\tdouble abs() {\n\t\treturn sqrt(norm());\n\t}\n\n\tbool operator <(Point p) {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\tbool operator ==(Point p) {\n\t\treturn equals(x, p.x) && equals(y, p.y);\n\t}\n};\ntypedef Point Vector;\n\nclass Segment {\npublic:\n\tPoint p1, p2;\n\tSegment(Point p1 = Point(), Point p2 = Point()) :\n\t\t\tp1(p1), p2(p2) {\n\t}\n};\ntypedef Segment Line;\n\ndouble dot(Vector v1, Vector v2) {\n\treturn v1.x * v2.x + v1.y * v2.y;\n}\ndouble cross(Vector v1, Vector v2) {\n\treturn v1.x * v2.y - v1.y * v2.x;\n}\nbool isOrthogonal(Vector v1, Vector v2) {\n\treturn equals(dot(v1, v2), 0.0);\n}\nbool isOrthogonal(Segment s1, Segment s2) {\n\treturn equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\nbool isOrthogonal(Point l1, Point l2, Point m1, Point m2) {\n\treturn isOrthogonal(l2 - l1, m2 - m1);\n}\nbool isParallel(Vector v1, Vector v2) {\n\treturn equals(cross(v1, v2), 0.0);\n}\nbool isParallel(Segment s1, Segment s2) {\n\treturn equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\nbool isParallel(Point l1, Point l2, Point m1, Point m2) {\n\treturn isParallel(l1 - l2, m1 - m2);\n}\n\nenum PositionSP {\n\tCOUNTER_CLOCKWISE = -1,\n\tCLOCKWISE = 1,\n\tONLINE_BACK = 2,\n\tONLINE_FRONT = -2,\n\tON_SEGMENT = 0\n};\nPositionSP ccw(Point p1, Point p2, Point p) {\n\tVector a = p2 - p1, b = p - p1;\n\tif (cross(a, b) > EPS)\n\t\treturn COUNTER_CLOCKWISE;\n\telse if (cross(a, b) < -EPS)\n\t\treturn CLOCKWISE;\n\telse if (dot(a, b) < -EPS)\n\t\treturn ONLINE_BACK;\n\telse if (a.norm() < b.norm())\n\t\treturn ONLINE_FRONT;\n\telse\n\t\treturn ON_SEGMENT;\n}\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n\treturn (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0\n\t\t\t&& ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\nbool intersect(Segment s1, Segment s2) {\n\treturn intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\ndouble distancePP(Point p1, Point p2) {\n\treturn (p1 - p2).abs();\n}\ndouble distanceLP(Line l, Point p) {\n\treturn abs(cross(l.p2 - l.p1, p - l.p1) / distancePP(l.p2, l.p1));\n}\ndouble distanceSP(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0)\n\t\treturn distancePP(s.p1, p);\n\telse if (dot(s.p1 - s.p2, p - s.p2) < 0.0)\n\t\treturn distancePP(s.p2, p);\n\telse\n\t\treturn distanceLP(s, p);\n}\ndouble distanceSS(Segment s1, Segment s2) {\n\tif (intersect(s1, s2))\n\t\treturn 0.0;\n\telse {\n\t\treturn min(min(distanceSP(s1, s2.p1), distanceSP(s1, s2.p2)),\n\t\t\t\tmin(distanceSP(s2, s1.p1), distanceSP(s2, s1.p2)));\n\t}\n}\n\nint main() {\n\tint q;\n\tcin >> q;\n\tfor (int i = 0; i < q; i++) {\n\t\tSegment s1, s2;\n\t\tcin >> s1.p1.x >> s1.p1.y;\n\t\tcin >> s1.p2.x >> s1.p2.y;\n\t\tcin >> s2.p1.x >> s2.p1.y;\n\t\tcin >> s2.p2.x >> s2.p2.y;\n\t\tcout << fixed << setprecision(10) << distanceSS(s1, s2) << endl;\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define lb long double\n#define eps 1e-10\nusing namespace std;\nstruct Po{lb x,y;}p0,p1,q0,q1;\nint t;\nvoid get(Po &x){scanf(\"%Lf %Lf\",&x.x,&x.y);}\nPo operator -(Po x,Po y){return (Po){x.x-y.x,x.y-y.y};}\nPo operator +(Po x,Po y){return (Po){x.x+y.x,x.y+y.y};}\nlb operator *(Po x,Po y){return x.x*y.y-x.y*y.x;}\nlb operator ^(Po x,Po y){return x.x*y.x+x.y*y.y;}\nbool dotinline(Po x,Po y,Po z){\n\tif (x.x>y.x) swap(x,y);\n\tif (z.x<x.x-eps||z.x>y.x+eps) return 0;\n\tif (x.y>y.y) swap(x,y);\n\tif (z.y<x.y-eps||z.y>y.y+eps) return 0;\n\treturn 1;\n}\nbool getcross(Po p0,Po p1,Po q0,Po q1){\n\tPo np=p1-p0,nq=q1-q0;\n\tlb a1=np*(q0-p0),a2=np*(q1-p0),a3=nq*(p0-q0),a4=nq*(p1-q0);\n\tif (a1*a2<-eps&&a3*a4<-eps) return 1;\n\tif (fabs(a1)<eps&&dotinline(p0,p1,q0)) return 1;\n\tif (fabs(a2)<eps&&dotinline(p0,p1,q1)) return 1;\n\tif (fabs(a3)<eps&&dotinline(q0,q1,p0)) return 1;\n\tif (fabs(a4)<eps&&dotinline(q0,q1,p1)) return 1;\n\treturn 0;\n}\nlb dis(Po x){return sqrtl(x.x*x.x+x.y*x.y);}\nlb getd(Po x,Po y,Po z){\n\tif (((y-x)^(z-x))<eps)return dis(x-z);\n\tif (((x-y)^(z-y))<eps)return dis(y-z);\n\treturn fabs((y-x)*(z-x))/dis(x-y);\n}\nint main(){\n\tscanf(\"%d\",&t);\n\twhile (t--){\n\t\tget(p0);get(p1);get(q0);get(q1);\n\t\tif (getcross(p0,p1,q0,q1)) printf(\"0\\n\");\n\t\telse printf(\"%.10Lf\\n\",min(min(getd(p0,p1,q0),getd(p0,p1,q1)),min(getd(q0,q1,p0),getd(q0,q1,p1))));\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n\nusing namespace std;\n\n#define EPS (1e-6)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n\ninline int sign(const double &x){\n    if(x>EPS) return 1;\n    else if(x<-EPS) return -1;\n    return 0;\n}\n\n/*   点  */\nstruct Point{\n    double x,y;\n\n    Point(double x=0,double y=0):x(x),y(y){}\n\n    Point operator + (Point p) { return Point(x+p.x,y+p.y); }\n    Point operator - (Point p) { return Point(x-p.x,y-p.y); }\n    Point operator * (double k) { return Point(k*x,k*y); }\n    Point operator / (double k) { return Point(x/k,y/k); }\n\n    //向量的大小\n    double abs(){ return sqrt(norm()); }\n    double norm() { return x*x+y*y; }\n\n    bool operator < (const Point & p) const{\n        return x!=p.x?x<p.x:y<p.y;\n    }\n\n    bool operator == (const Point & p) const {\n        return fabs(x-p.x)<EPS&&fabs(y-p.y)<EPS;\n    }\n};\n\n//两点间的距离\ndouble getDistance(Point a,Point b){\n    return (a-b).abs();\n}\n\n/*   向量  */\ntypedef Point Vector;\n\n//向量a和b的内积\ndouble dot(Vector a,Vector b){\n    return a.x*b.x+a.y*b.y;\n}\n//向量a和b的外积\ndouble cross(Vector a,Vector b){\n    return a.x*b.y-a.y*b.x;\n}\n\n/*   线段  */\nstruct Segment{\n    Point p1,p2;\n};\n\n/*   直线  */\ntypedef Segment Line;\n\n//点到直线的距离\ndouble getDistanceLP(Line l,Point p){\n    return abs(cross(l.p2-l.p1,p-l.p1)/(l.p2-l.p1).abs());\n}\n\n//点到线段的距离\ndouble getDistanceSP(Segment s,Point p){\n    if(dot(s.p2-s.p1,p-s.p1)<0.0) return (p-s.p1).abs();\n    if(dot(s.p1-s.p2,p-s.p2)<0.0) return (p-s.p2).abs();\n    return getDistanceLP(s,p);\n}\n\n//判断p2与向量p1-p0的位置关系\n\nconst int COUNTER_CLOCKWISE = -1;   //逆时针\nconst int CLOCKWISE = 1;            //顺时针\nconst int ON_SEGMENT = 0;           //在线段上\n\nint ccw(Point p0,Point p1,Point p2){\n    Vector a=p1-p0;\n    Vector b=p2-p0;\n    if(cross(a,b)>EPS) return COUNTER_CLOCKWISE;\n    if(cross(a,b)<EPS) return CLOCKWISE;\n    return ON_SEGMENT;\n}\n\n//判断线段p1p2与线段p3p4是否相交\nbool intersect(Point p1,Point p2,Point p3,Point p4){\n    return ( ccw(p1,p2,p3)*ccw(p1,p2,p4)<=0 &&\n             ccw(p3,p4,p1)*ccw(p3,p4,p2)<=0 );\n}\n\nbool intersect(Segment s1,Segment s2){\n    return intersect(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n\n//线段与线段的距离\ndouble getDistance(Segment s1,Segment s2){\n    if(intersect(s1,s2)) return 0.0;\n    return min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),\n               min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n}\n\n/* 直线正交\n * 判断向量a，b是否正交 =》a，b的内积为0\n */\nbool isOrthogonal(Vector a,Vector b){\n    return equals(dot(a,b),0.0);\n}\n\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n    return isOrthogonal(a1-a2,b1-b2);\n}\n\n/* 直线平行\n * 判断向量a，b是否平行 =》a，b的内积为0\n */\nbool isParallel(Vector a,Vector b){\n    return equals(cross(a,b),0.0);\n}\n\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n    return isParallel(a1-a2,b1-b2);\n}\n\nstruct Circle{\n    Point c;\n    double r;\n    Circle(Point c = Point() ,double r = 0.0 ):c(c),r(r){}\n};\n\n/*   多边形  */\ntypedef vector<Point> Polygon;\n\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    while(n--){\n        Point p1,p2,p3,p4;\n        scanf(\"%lf%lf%lf%lf%lf%lf%lf%lf\",&p1.x,&p1.y,&p2.x,&p2.y,&p3.x,&p3.y,&p4.x,&p4.y);\n        printf(\"%.10f\\n\",getDistance(Segment{p1,p2},Segment{p3,p4}));\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#define _CRT_SECURE_NO_WARNINGS\n#include <bits/stdc++.h>\nusing namespace std;\n//using ll=long long;\nconst double EPS = 1e-10;\ninline bool equals(double a, double b) { return fabs(a - b) < EPS; }\nconst double PI = 3.141592653589793238;\nclass Point {\npublic:\n\tdouble x, y;\n\tPoint(double x, double y) :x(x), y(y) {}\n\tPoint() {}\n\tPoint operator +(const Point &p) const{ return Point(x + p.x, y + p.y); };\n\tPoint operator -(const Point &p) const{ return Point(x - p.x, y - p.y); }\n\tPoint operator *(double k) { return Point(x*k, y*k); }\n\tPoint operator /(double k) { return Point(x / k, y / k); }\n};\n\nusing Vector = Point;\ninline double norm(Vector a) {\n\treturn a.x*a.x + a.y*a.y;\n}\ndouble absv(Vector a) {\n\treturn sqrt(norm(a));\n}\ninline double dot(Vector a, Vector b) {\n\treturn a.x*b.x + a.y*b.y;\n}\ninline double cross(Vector a, Vector b) {\n\treturn a.x*b.y - a.y*b.x;\n}\nstruct Segment {\n\tPoint p1, p2;\n};\n\nusing Line = Segment;\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0) :c(c), r(r) {}\n};\nusing Polygon = vector<Point>; \nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / norm(base);\n\treturn s.p1 + base*r;\n}\nPoint reflect(Segment s, Point p) {\n\treturn p + (project(s, p) - p)*2.0;\n}\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS) return CLOCKWISE;\n\tif (dot(a, b) < -EPS) return ONLINE_BACK;\n\tif (norm(a) < norm(b)) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n\treturn (ccw(p1, p2, p3)*ccw(p1, p2, p4) <= 0 and ccw(p3, p4, p1)*ccw(p3, p4, p2) <= 0);\n}\n\nbool intersect(Segment s1, Segment s2) {\n\treturn intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\ndouble getDistance(Point a, Point b) {\n\treturn absv(a - b);\n}\n\ndouble getDistance(Line l, Point p) {\n\treturn abs(cross(l.p2 - l.p1, p - l.p1) / absv(l.p2 - l.p1));\n}\n\ndouble getDistanceSP(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0) return absv(p - s.p1);\n\tif (dot(s.p2 - s.p1, p - s.p2) < 0.0) return absv(p - s.p2);\n\treturn getDistance(s, p);\n}\n\ndouble getDistance(Segment s1,Segment s2){\n\tif (intersect(s1, s2)) return 0.0;\n\treturn min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)), min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\nint main() {\n\tint q, x[4], y[4];\n\tPoint p[4];\n\tcin >> q;\n\tfor (int i = 0; i < q; i++) {\n\t\tfor (int j = 0; j < 4; j++) {\n\t\t\tcin >> x[j] >> y[j];\n\t\t\tp[j] = Point(x[j], y[j]);\n\t\t}\n\t\tSegment s[2];\n\t\tfor (int j = 0; j < 2; j+=2) {\n\t\t\ts[j] = { p[j],p[j + 1] };\n\t\t}\n\t\tcout << getDistance(s[0],s[1]) << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define REP(i,a,b) for(int i=a;i<b;i++)\n#define rep(i,n) REP(i,0,n)\n\ntypedef complex<double> P;\nstruct Line : public vector<P>\n{\n  Line(P a=P(), P b=P()) {\n    push_back(a); push_back(b);\n  }\n};\ntypedef Line Segment;\n\n#define EPS (1e-7)\n\nbool operator < (P const& a, P const& b) {\n  return (a.real() != a.real()) ? a.real() < b.real() : a.imag() < b.imag();\n}\n\ndouble dot(P const& a, P const& b) {\n  return real(conj(a)*b);\n}\n\ndouble cross(P const& a, P const& b) {\n  return imag(conj(a)*b);\n}\n\nP projection_point(P const& a, P const& b, P const& c) {\n  double k = dot(b-a, c-a) / norm(b-a);\n  return a+k*(b-a);\n}\n\nP reflection_point(P const& a, P const& b, P const& c) {\n  return c + 2.*(projection_point(a, b, c) - c);\n}\n\nbool is_parallel(Segment const& s, Segment const& t) {\n  return abs(cross(s[1]-s[0], t[1]-t[0])) < EPS;\n}\n\nbool is_orthogonal(Segment const& s, Segment const& t) {\n  return abs(dot(s[1]-s[0], t[1]-t[0])) < EPS;\n}\n\nint ccw(P a, P b, P c) {\n  b -= a, c -= a;\n  if(cross(b, c) > 0) return +1; // counter clockwise\n  if(cross(b, c) < 0) return -1;  // clockwise\n  if(dot(b, c) < 0) return +2;    // c-a-b\n  if(norm(b) < norm(c)) return -2;  // a-b-c\n  return 0; // on segment\n}\n\nbool is_intersect_ss(Segment const& s, Segment const& t) {\n  return ccw(s[0], s[1], t[0]) * ccw(s[0], s[1], t[1]) <= 0\n         && ccw(t[0], t[1], s[0]) * ccw(t[0], t[1], s[1]) <= 0;\n}\n\nP crosspoint_ss(Segment const& s, Segment const& t) {\n  P bline = t[1]-t[0];\n  double d1 = abs(cross(bline, s[0]-t[0])), d2 = abs(cross(bline, s[1]-t[0]));\n  return s[0] + d1/(d1+d2) * (s[1]-s[0]);\n}\n\nbool is_point_onsegment(Segment const& s, P const& p) {\n  return abs(s[0]-p)+abs(s[1]-p)-abs(s[1]-s[0]) < EPS;\n}\n\ndouble distance_sp(Segment const& s, P const& p) {\n  P q = projection_point(s[1], s[0], p);\n  if(is_point_onsegment(s, p)) return abs(p-q);\n  return min(abs(s[0]-p), abs(s[1]-p));\n}\n\ndouble distance_ss(Segment const& s, Segment const& t) {\n  if(is_intersect_ss(s, t)) return 0.; // 交差は距離 0\n  return min(min(distance_sp(t, s[0]), distance_sp(t, s[1])),\n             min(distance_sp(s, t[0]), distance_sp(s, t[1])));\n}\n\nint main () {\n  \n  int q; cin >> q;\n  for(;q--;) {\n    Segment s, t;\n    cin >> s[0].real() >> s[0].imag();\n    cin >> s[1].real() >> s[1].imag();\n    cin >> t[0].real() >> t[0].imag();\n    cin >> t[1].real() >> t[1].imag();\n    \n    printf(\"%.15f\\n\", distance_ss(s, t));\n  }\n  \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define eps 1e-9\n#define nmax 200\n#define f(c,a,b) for(int c=a; c<=b; c++)\n#define pi acos(-1)\n\nusing namespace std;\ntypedef double db;\nstruct P{\n    db x, y;\n    P operator - (P a){ return (P){x-a.x, y-a.y}; }\n    db dot(P a){ return a.x*x + a.y*y; }\n    P operator * (db a) { return (P){a*x, a*y}; }\n    P operator + (P a){ return (P){x+a.x, y+a.y}; }\n    P operator / (db a) { return (P) {x/a, y/a}; }\n    db times(P a){ return x*a.y-y*a.x; }\n    db le() { return sqrt( x*x+y*y ); }\n    db le2() { return x*x+y*y; }\n    P rot90(){ return (P){-y,x}; }\n    db rad(P a) { return atan2(times(a),dot(a)); }\n    void pri(){ printf(\"%.10lf %.10lf\\n\", x, y); }\n    void swap(P& a){\n        db tx = x, ty = y;\n        x = a.x;  y = a.y;\n        a.x = tx; a.y = ty;\n    }\n    bool operator < (const P a) const { return (x==a.x)?(y<a.y):(x<a.x); } \n    bool operator == (const P a) const { return (x==a.x)&&(y==a.y); }\n}po[nmax];\n\nint sign(db x) { return (x<-eps) ? -1 : x>eps; }\ndb disLP(P p1, P p2, P p){ return abs( (p1-p).times(p2-p) ) / (p1-p2).le(); }\n\nbool intersection(P p1, P q1, P p2, P q2){\n    if(max(p1.x,q1.x)+eps < min(p2.x,q2.x)) return false;\n    if(max(p1.y,q1.y)+eps < min(p2.y,q2.y)) return false;\n    if(max(p2.x,q2.x)+eps < min(p1.x,q1.x)) return false;\n    if(max(p2.y,q2.y)+eps < min(p1.y,q1.y)) return false;\n    int t1=sign( (p2-p1).times(q1-p1) )*sign( (q1-p1).times(q2-p1) ), \n    t2=sign( (p1-p2).times(q2-p2) )*sign( (q2-p2).times(q1-p2) );\n    return (t1>=0) && (t2>=0);\n}\n\ndb disSP(P p1, P p2, P p){\n    if((p1-p2).dot(p-p2) < eps) return (p-p2).le();\n    if((p2-p1).dot(p-p1) < eps) return (p-p1).le();\n    return disLP(p1, p2, p);\n}\n\ndb disSS(P p1, P q1, P p2, P q2){\n    if( intersection(p1, q1, p2, q2) ) return 0;\n    db a = disSP(p1,q1,p2);\n    db b = disSP(p1,q1,q2);\n    db c = disSP(p2,q2,p1);\n    db d = disSP(p2,q2,q1);\n    return min(min(a,b),min(c,d) );\n}\n\nint main(){\n    //freopen(\"owo.in\",\"r\",stdin);\n    int q;\n    P p1, q1, p2, q2;\n    cin >> q;\n    while(q--){\n        scanf(\"%lf%lf%lf%lf%lf%lf%lf%lf\",&p1.x,&p1.y,&q1.x,&q1.y,&p2.x,&p2.y,&q2.x,&q2.y);\n        printf(\"%.10lf\\n\", disSS(p1, q1, p2, q2));\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <array>\n#include <vector>\n#include <cmath>\n\nconst double EPSILON = 1e-10;\n\ninline bool equals(double a, double b) {\n    return std::fabs(a - b) < EPSILON;\n}\n\nstruct Point {\n    double x;\n    double y;\n\n    bool operator < (const Point& p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point& p) const {\n        return equals(x, p.x) && equals(y, p.y);\n    }\n};\n\nPoint operator + (const Point& p1, const Point& p2) {\n    return Point{p1.x + p2.x, p1.y + p2.y};\n}\n\nPoint operator - (const Point& p1, const Point& p2) {\n    return Point{p1.x - p2.x, p1.y - p2.y};\n}\n\nPoint operator * (const Point& p1, double k) {\n    return Point{p1.x * k, p1.y * k};\n}\n\nstruct Segment {\n    Point p1, p2;\n};\n\nstruct Circle {\n    Point center;\n    double radius;\n};\n\nusing Vector = Point;\nusing Line = Segment;\nusing Polygon = std::vector<Point>;\n\n\ndouble norm(const Vector& p) {\n    return p.x * p.x + p.y * p.y;\n}\n\ndouble abs(const Vector& p) {\n    return std::sqrt(norm(p));\n}\n\ndouble dot(const Vector& a, const Vector& b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(const Vector& a, const Vector& b) {\n    return a.x * b.y - a.y * b.x;\n}\n\n\nVector projection(const Segment& s, const Point& p) {\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / norm(base);\n    return s.p1 + base * r;\n}\n\nVector reflection(const Segment& s, const Point& p) {\n    auto proj = projection(s, p);\n    return p + (projection(s, p) - p) * 2.0;\n}\n\nbool is_orthogonal(const Vector& a, const Vector& b) {\n    return equals(dot(a, b), 0.0);\n}\n\nbool is_orthogonal(const Segment& s1, const Segment& s2) {\n    return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nbool is_parallel(const Vector& a, const Vector& b) {\n    return equals(cross(a, b), 0.0);\n}\n\nbool is_parallel(const Segment& s1, const Segment& s2) {\n    return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nenum {\n    COUNTER_CLOCKWISE = 1,\n    CLOCKWISE = -1,\n    ONLINE_BACK = 2,\n    ONLINE_FRONT = -2,\n    ON_SEGMENT = 0,\n};\n\nint ccw(const Point& p0, const Point& p1, const Point& p2) {\n    auto a = p1 - p0;\n    auto b = p2 - p0;\n    if (cross(a, b) > EPSILON) return COUNTER_CLOCKWISE;\n    if (cross(a, b) < -EPSILON) return CLOCKWISE;\n    if (dot(a, b) < -EPSILON) return ONLINE_BACK;\n    if (norm(a) < norm(b)) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\nbool intersect(const Point& p1, const Point& p2, const Point& p3, const Point& p4) {\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n            ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\n\nbool intersect(const Segment& s1, const Segment& s2) {\n    return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\ndouble distance(const Point& a, const Point& b) {\n    return abs(a - b);\n}\n\ndouble distanceLP(const Line& l, const Point& p) {\n    return abs(cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1));\n}\n\ndouble distanceSP(const Segment& s, const Point& p) {\n    if (dot(s.p2 - s.p1, p - s.p1) < 0.0) return abs(p - s.p1);\n    if (dot(s.p1 - s.p2, p - s.p2) < 0.0) return abs(p - s.p2);\n    return distanceLP(s, p);\n}\n\ndouble distance(const Segment& s1, const Segment& s2) {\n    using std::min;\n    if (intersect(s1, s2)) return 0.0;\n    return min(min(distanceSP(s1, s2.p1), distanceSP(s1, s2.p2)),\n               min(distanceSP(s2, s1.p1), distanceSP(s2, s1.p2)));\n}\n\n\nint main() {\n    using namespace std;\n\n    int q;\n    cin >> q;\n    for (int i = 0; i < q; ++i) {\n        array<Point, 4> points;\n        for (auto& p : points) {\n            cin >> p.x >> p.y;\n        }\n        Segment s1{points[0], points[1]};\n        Segment s2{points[2], points[3]};\n        cout << setprecision(20) << distance(s1, s2) << endl;\n    }\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#define _CRT_SECURE_NO_WARNINGS\n#include <bits/stdc++.h>\nusing namespace std;\n//using ll=long long;\nconst double EPS = 1e-10;\ninline bool equals(double a, double b) { return fabs(a - b) < EPS; }\nconst double PI = 3.141592653589793238;\nclass Point {\npublic:\n\tdouble x, y;\n\tPoint(double x, double y) :x(x), y(y) {}\n\tPoint() {}\n\tPoint operator +(const Point &p) const{ return Point(x + p.x, y + p.y); };\n\tPoint operator -(const Point &p) const{ return Point(x - p.x, y - p.y); }\n\tPoint operator *(double k) { return Point(x*k, y*k); }\n\tPoint operator /(double k) { return Point(x / k, y / k); }\n};\n\nusing Vector = Point;\ninline double norm(Vector a) {\n\treturn a.x*a.x + a.y*a.y;\n}\ndouble absv(Vector a) {\n\treturn sqrt(norm(a));\n}\ninline double dot(Vector a, Vector b) {\n\treturn a.x*b.x + a.y*b.y;\n}\ninline double cross(Vector a, Vector b) {\n\treturn a.x*b.y - a.y*b.x;\n}\nstruct Segment {\n\tPoint p1, p2;\n};\n\nusing Line = Segment;\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0) :c(c), r(r) {}\n};\nusing Polygon = vector<Point>; \nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / norm(base);\n\treturn s.p1 + base*r;\n}\nPoint reflect(Segment s, Point p) {\n\treturn p + (project(s, p) - p)*2.0;\n}\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS) return CLOCKWISE;\n\tif (dot(a, b) < -EPS) return ONLINE_BACK;\n\tif (norm(a) < norm(b)) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n\treturn (ccw(p1, p2, p3)*ccw(p1, p2, p4) <= 0 and ccw(p3, p4, p1)*ccw(p3, p4, p2) <= 0);\n}\n\nbool intersect(Segment s1, Segment s2) {\n\treturn intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\ndouble getDistance(Point a, Point b) {\n\treturn absv(a - b);\n}\n\ndouble getDistanceLP(Line l, Point p) {\n\treturn abs(cross(l.p2 - l.p1, p - l.p1) / absv(l.p2 - l.p1));\n}\n\ndouble getDistanceSP(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0) return absv(p - s.p1);\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0) return absv(p - s.p2);\n\treturn getDistanceLP(s, p);\n}\n\ndouble getDistance(Segment s1,Segment s2){\n\tif (intersect(s1, s2)) return 0.0;\n\treturn min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)), min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\nint main() {\n\tint q, x[4], y[4];\n\tPoint p[4];\n\tcin >> q;\n\tfor (int i = 0; i < q; i++) {\n\t\tfor (int j = 0; j < 4; j++) {\n\t\t\tcin >> x[j] >> y[j];\n\t\t\tp[j] = Point(x[j], y[j]);\n\t\t}\n\t\tSegment s[2];\n\t\ts[0] = { p[0],p[1] }, s[1] = { p[2],p[3] };\n\t\tprintf(\"%.10lf\\n\", getDistance(s[0], s[1]));\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <cassert>\n#define FOR(i,a,b) for(int i=(a);i<(b);i++)\n#define REP(i,n) FOR(i,0,n)\n#define rep(i,n) FOR(i,0,n)\n#define DEBUG(x) cout<<#x<<\": \"<<x<<endl\n#define vint vector<int>\n#define vdouble vector<double>\n#define vstring vector<string>\nusing namespace std;\n\n#include<map>\n#include<set>\n#include<queue>\n\ntypedef long long ll;\ntypedef unsigned long long ull;\n\nconst int MAX_N = 1000000;\nconst int INFTY = (1 << 21); // 2097152\n// const ll INFTY = (1LL << 60);\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a)-(b)) < EPS)\n\nclass Point{\npublic:\n\tdouble x, y;\n\tPoint(double x=0, double y=0):x(x), y(y){}\n\n\tPoint operator + (Point p){ return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p){ return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a){ return Point(a * x, a * y); }\n\tPoint operator / (double a){ return Point(x / a, y / a); }\n\n\tdouble abs() { return sqrt(norm()); }\n\tdouble norm() { return x * x + y * y;}\n\tbool operator < (const Point &p) const {\n\t\t// first x, second y\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p) const{\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\n\ntypedef Point Vector;\n\nstruct Segment{\npublic:\n\tPoint p1, p2;\n\tSegment(Point p1, Point p2){\n\t\tthis->p1 = p1;\n\t\tthis->p2 = p2;\n\t}\n};\n\ndouble dot(Vector a, Vector b){\n\t//|a||b|cos(theta)\n\treturn a.x * b.x + a.y * b.y;\n}\ndouble cross(Vector a, Vector b){\n\t//|a||b|cos(theta)\n\treturn a.x * b.y - a.y * b.x;\n}\n\n// Orthogonal\nbool isOrthogonal(Vector a, Vector b){\n\treturn equals(dot(a, b), 0.0);\n}\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2){\n\treturn isOrthogonal(a1 - a2, b1- b2);\n}\n\n// Orthogonal\nbool isParallel(Vector a, Vector b){\n\treturn equals(cross(a, b), 0.0);\n}\nbool isParallel(Point a1, Point a2, Point b1, Point b2){\n\treturn isParallel(a1 - a2, b1- b2);\n}\n\n// ???p????????????s???????????????????????????\nPoint project(Segment s, Point p){\n\t// ??\\??????????????????\n\t// hypo -> p - p1, base -> p2 - p1\n\t// t = |hypo|cos??\n\t// cos?? = dot(hypo,base)/|hypo||base|\n\t// project = s.p1 + base/|base| * t\n\tVector hypo = p - s.p1;\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(hypo, base) / base.norm();\n\treturn s.p1 + base * r;\n}\n\n// ???p????????????s???????§°?????¨?????????\nPoint reflection(Segment s, Point p){\n\tPoint pr = project(s, p);\n\treturn p + (pr - p) * 2.0;\n}\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\n// p0??????p1????????????????????????????????????p2?????????\nint ccw(Point p0, Point p1, Point p2){\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif( cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif( cross(a, b) < -EPS) return CLOCKWISE;\n\tif (dot(a,b) <-EPS) return ONLINE_BACK;\n\tif (a.norm() < b.norm()) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\n// ????????????????????? ??????p1->p2, p3->p4\nbool intersect(Point p1, Point p2, Point p3, Point p4){\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n            ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\n\n// ?????????????????????\nbool intersect(Segment s1, Segment s2){\n    return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\n// ???????????????\nPoint crosspoint(Segment s1, Segment s2){\n\t// s1.p1??????s2???????????????????????????d1\n\t// s1.p2??????s2???????????????????????????d2??¨????????¨???\n\t// ?????????s1???d1/(d1+d2)?????????????????¨??????\n\tVector base = s2.p2 - s2.p1;\n\tVector hypo1 = s1.p1 - s2.p1;\n\tVector hypo2 = s1.p2 - s2.p1;\n\tdouble d1 = abs(cross(base, hypo1)) / base.abs();\n\tdouble d2 = abs(cross(base, hypo2)) / base.abs();\n\tdouble t = d1 / (d1 + d2);\n\treturn s1.p1 + (s1.p2 - s1.p1) * t;\n}\n\n\n// ???????????¢\ndouble distance(Point a, Point b){\n\treturn (a - b).abs();\n}\n\n// ?????¨??´???????????¢\ndouble distanceLinePoint(Segment s, Point p){\n\t// sin?? = |cross(hypo, base)|/|hypo||base|\n\t// distance = |hypo|sin?? = |cross(hypo, base)|/|base|\n\tVector hypo = p - s.p1;\n\tVector base = s.p2 - s.p1;\n\treturn abs(cross(hypo, base)) / base.abs();\n}\n\n// ?????¨??????????????¢\ndouble distanceSegmentPoint(Segment s, Point p){\n\t// (p2-p1)??¨???p-p1??????90???????????§????????´??????p??¨p1????????¢\n\t// (p1-p2)??¨???p-p2??????90???????????§????????´??????p??¨p2????????¢\n\t// ????????\\????????´???????????¨??´???????????¢\n\tif(dot(s.p2-s.p1, p-s.p1) < 0.0) return (p - s.p1).abs();\n\tif(dot(s.p1-s.p2, p-s.p2) < 0.0) return (p - s.p2).abs();\n\treturn distanceLinePoint(s, p);\n}\n\n// ????????¨??????????????¢\ndouble distanceSegmentSegment(Segment s1, Segment s2){\n\tif(intersect(s1, s2)) return 0.0;\n\tdouble ret = distanceSegmentPoint(s1, s2.p1);\n\tret = min(ret, distanceSegmentPoint(s1, s2.p2));\n\tret = min(ret, distanceSegmentPoint(s2, s1.p1));\n\tret = min(ret, distanceSegmentPoint(s2, s1.p2));\n\treturn ret;\n}\n\nint Q;\n\nint main() {\n\n\tcin >> Q;\n\trep(i, Q){\n        Point p0, p1;\n        cin >> p0.x >> p0.y >> p1.x >> p1.y;\n        Point p2, p3;\n        cin >> p2.x >> p2.y >> p3.x >> p3.y;\n\t\tdouble ret = distanceSegmentSegment(Segment(p0, p1), Segment(p2, p3));\n\t\tfprintf(stdout, \"%.10f\\n\", ret) ;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#ifndef ___Geometry_Library\n#define ___Geometry_Library\n\n// ------ Includes ------ //\n#include <cmath>\n#include <complex>\n#include <utility>\n#include <algorithm>\n\n// ------ Defines ------ //\ntypedef long double GType;\ntypedef std::complex<GType> Point;\ntypedef std::pair<Point, Point> Segment;\n\n// ------ Constants ------ //\nconst GType EPS = 1.0e-10L;\n\n// ------ Functions Level 1 ------ //\nGType dot(const Point& p1, const Point& p2) {\n\treturn (std::conj(p1) * p2).real();\n}\nGType cross(const Point& p1, const Point& p2) {\n\treturn (std::conj(p1) * p2).imag();\n}\nint ccw(const Point& p1, const Point& p2, const Point& p3) {\n\tPoint v1 = p2 - p1, v2 = p3 - p1;\n\tif (cross(v1, v2) > EPS) return +1;\n\tif (cross(v1, v2) < -EPS) return -1;\n\tif (dot(v1, v2) < -EPS) return +2;\n\tif (std::norm(v1) < std::norm(v2)) return -2;\n\treturn 0;\n}\n\n// ------ Functions Level 2 ------ //\nbool intersect(const Segment& s1, const Point& p1, bool segflag) {\n\tif (!segflag) return std::abs(cross(s1.second - p1, s1.first - p1)) < EPS;\n\treturn (std::abs(s1.first - p1) + std::abs(s1.second - p1) - std::abs(s1.second - s1.first)) < EPS;\n}\nbool intersect(const Segment& s1, const Segment& s2, bool segflag) {\n\tif (!segflag) return cross(s1.second - s1.first, s2.first - s1.first) * cross(s1.second - s1.first, s2.second - s1.first) < EPS;\n\treturn (ccw(s1.first, s1.second, s2.first) * ccw(s1.first, s1.second, s2.second)) <= 0 && (ccw(s2.first, s2.second, s1.first) * ccw(s2.first, s2.second, s1.second)) <= 0;\n}\nPoint crosspoint(const Segment& s1, const Segment& s2) {\n\tGType r1 = cross(s1.second - s1.first, s2.second - s2.first);\n\tGType r2 = cross(s1.second - s1.first, s1.second - s2.first);\n\tif (std::abs(r1) < EPS && std::abs(r2) < EPS) return s2.first;\n\treturn s2.first + r2 / r1 * (s2.second - s2.first);\n}\n\n#endif\n\n#include <iomanip>\n#include <iostream>\nusing namespace std;\nint q, xa, ya, xb, yb; Segment s1, s2;\nint main() {\n\tcin >> q;\n\twhile (q--) {\n\t\tcin >> xa >> ya >> xb >> yb; s1 = make_pair(Point(xa, ya), Point(xb, yb));\n\t\tcin >> xa >> ya >> xb >> yb; s2 = make_pair(Point(xa, ya), Point(xb, yb));\n\t\tcout << fixed << setprecision(15) << distance(s1, s2) << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<complex>\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\ntypedef complex<long double> P;\n\n// ??§????????°INF\n#define INF (1e16)\n// ?¨±?????????????????\n#define EPS (1e-16)\n// 2??????????????????????????????????????????\n#define EQ(a,b) (abs((a)-(b)) < EPS)\n// 2??????????????????????????????????????????\n#define EQV(a,b) ( EQ((a).real(), (b).real()) && EQ((a).imag(), (b).imag()) )\n\n// ?????? (dot product) : a???b = |a||b|cos??\nlong double dot(P a, P b) {\n\treturn (a.real() * b.real() + a.imag() * b.imag());\n}\n\n// ?????? (cross product) : a??b = |a||b|sin??\nlong double cross(P a, P b) {\n\treturn (a.real() * b.imag() - a.imag() * b.real());\n}\n\n// ?????????????????????\nint is_intersected_ls(P a1, P a2, P b1, P b2) {\n\treturn (cross(a2 - a1, b1 - a1) * cross(a2 - a1, b2 - a1) < EPS) &&\n\t\t(cross(b2 - b1, a1 - b1) * cross(b2 - b1, a2 - b1) < EPS);\n}\n\n// 2??´?????????????????? : a//b <=> cross(a, b) = 0\nint is_parallel(P a1, P a2, P b1, P b2) {\n\treturn EQ(cross(a1 - a2, b1 - b2), 0.0);\n}\n\n// ???c?????????a,b????????????????????????(1)\nint is_point_on_line(P a, P b, P c) {\n\treturn EQ(cross(b - a, c - a), 0.0) &&\n\t\t(dot(b - a, c - a) > -EPS) &&\n\t\t(dot(a - b, c - b) > -EPS);\n}\n\n// a1,a2???????????¨??????????????¨b1,b2???????????¨??????????????????????¨????\nP intersection_ls(P a1, P a2, P b1, P b2) {\n\tP b = b2 - b1;\n\tlong double d1 = abs(cross(b, a1 - b1));\n\tlong double d2 = abs(cross(b, a2 - b1));\n\tlong double t = d1 / (d1 + d2);\n\n\treturn a1 + (a2 - a1) * t;\n}\n\n\n// ???a,b???????????¨??????????????¨???c??¨????????¢\nlong double distance_ls_p(P a, P b, P c) {\n\tif (dot(b - a, c - a) < EPS) return abs(c - a);\n\tif (dot(a - b, c - b) < EPS) return abs(c - b);\n\treturn abs(cross(b - a, c - a)) / abs(b - a);\n}\n\nint main() {\n\tint q; cin >> q;\n\tfor (int i = 0; i < q; i++) {\n\t\tlong double x0, y0, x1, y1, x2, y2, x3, y3;\n\t\tcin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n\t\tP p0(x0, y0), p1(x1, y1), p2(x2, y2), p3(x3, y3);\n\t\tif (is_intersected_ls(p0, p1, p2, p3)) {\n\t\t\tcout.precision(20);\n\t\t\tcout << showpoint << 0.0 << endl;\n\t\t}\n\t\tlong double d0 = min(distance_ls_p(p0, p1, p2), distance_ls_p(p0, p1, p3));\n\t\tlong double d1 = min(distance_ls_p(p2, p3, p0), distance_ls_p(p2, p3, p1));\n\t\tlong double ans =min(d0,d1) ;\n\n\t\tcout.precision(20);\n\t\tcout << showpoint << ans << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<cmath>\n#include<cstdio>\n#include<iostream>\nusing namespace std;\ntypedef long long ll;\nll read()\n{\n\tll x=0,f=1;char ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n\treturn x*f;\n}\nstruct Point{double x,y;};\nPoint operator -(Point a,Point b){return (Point){a.x-b.x,a.y-b.y};}\ndouble cross(Point a,Point b){return a.x*b.y-a.y*b.x;}\ndouble dot(Point a,Point b){return a.x*b.x+a.y*b.y;}\ndouble norm(Point a){return a.x*a.x+a.y*a.y;}\ndouble abs(Point a){return sqrt(norm(a));}\nvoid read(Point &a){a.x=read(),a.y=read();}\nint Clockwise(Point p0,Point p1,Point p2)\n{\n\tPoint v1=p1-p0,v2=p2-p0;\n\tif(cross(v1,v2)>0)return -2;\n\tif(cross(v1,v2)<0)return 2;\n\tif(dot(v1,v2)<0)return -1;\n\tif(norm(v1)<norm(v2))return 1;\n\treturn 0;\n}\nbool intersectSS(Point p0,Point p1,Point p2,Point p3)\n{\n\tif(Clockwise(p0,p1,p2)*Clockwise(p0,p1,p3)>0)return 0;\n\tif(Clockwise(p2,p3,p0)*Clockwise(p2,p3,p1)>0)return 0;\n\treturn 1;\n}\ndouble getdistanceLP(Point p0,Point p1,Point p2)\n{\n\tdouble x=fabs(cross(p1-p0,p2-p0));\n\treturn x/abs(p1-p0);\n}\ndouble getdistanceSP(Point p0,Point p1,Point p2)\n{\n\tif(dot(p1-p0,p2-p0)<0)return abs(p2-p0);\n\tif(dot(p0-p1,p2-p1)<0)return abs(p2-p1);\n\treturn getdistanceLP(p0,p1,p2);\n}\ndouble getdistanceSS(Point p0,Point p1,Point p2,Point p3)\n{\n\tif(intersectSS(p0,p1,p2,p3))return 0;\n\treturn min(min(getdistanceSP(p2,p3,p0),getdistanceSP(p2,p3,p1)),\n\t\t\t   min(getdistanceSP(p0,p1,p2),getdistanceSP(p0,p1,p3)));\n}\nint main()\n{\n\tint q=read();while(q--)\n\t{\n\t\tPoint p0,p1,p2,p3;\n\t\tread(p0),read(p1),read(p2),read(p3);\n\t\tprintf(\"%.10lf\\n\",getdistanceSS(p0,p1,p2,p3));\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\n#include<string>\n#include<algorithm>\n#include<functional>\n#include<queue>\n#include<utility>\n#include<cstdlib>\n#include<ctime>\n#include<utility>\n#include<cmath>\n#include<cstdio>\nusing namespace std;\n\n\n#define INF 1e+10\n#define EPS 1e-10\n#define EQ(a,b) (abs(a-b)<EPS)\n\n//誤差を考慮して足し算\ndouble add(double a,double b){\n\tif(abs(a+b) < EPS*(abs(a)+abs(b)))return 0;\n\treturn a+b;\n}\nstruct P{//2次元ベクトル\n\tdouble x,y;\n\tP(){}\n\tP(double x,double y):x(x),y(y){}\n\tP operator + (P p){\n\t\treturn P(add(x,p.x),add(y,p.y));\n\t}\n\tP operator - (P p){\n\t\treturn P(add(x,-p.x),add(y,-p.y));\n\t}\n\tP operator * (double d){\n\t\treturn P(x*d,y*d);\n\t}\n\tP operator / (double d){\n\t\treturn P(x/d,y/d);\n\t}\n\tdouble dot(P p){//内積\n\t\treturn add(x*p.x,y*p.y);\n\t}\n\tdouble det(P p){//外積\n\t\treturn add(x*p.y,-y*p.x);\n\t}\n\tbool equal(P p){\n\t\treturn (x-p.x)*(x-p.x)+(y-p.y)*(y-p.y) < EPS*EPS;\n\t}\n\tdouble norm()const{\n\t\treturn sqrt(x*x+y*y);\n\t}\n};\n//typedef pair<P,P> Line;\n\n//線分p1-p2上に点qがあるか判定\nbool on_seg(P p1,P p2,P q){\n\treturn (p1-q).det(p2-q)==0 && (p1-q).dot(p2-q)<=0;\n}\n//直線p1-p2と直線q1-q2の交点\nP intersection(P p1,P p2,P q1,P q2){\n\treturn p1+(p2-p1)*( (q2-q1).det(q1-p1)/(q2-q1).det(p2-p1) );\n}\n//直線p1-p2でqに線対称な点\nP line_symmetry(P p1,P p2,P q){\n\tdouble dx,dy;\n\tdx=p2.x-p1.x;\n\tdy=p2.y-p1.y;\n\tP inter=intersection(p1,p2,q,q+P(dy,-dx));\n\treturn q+(inter-q)*2;\n}\n\n//線分p1-p2と線分q1-q2が交差するか\nbool is_intersect(P p1,P p2,P q1,P q2){\n\tif(on_seg(p1,p2,q1)||on_seg(p1,p2,q2)||on_seg(q1,q2,p1)||on_seg(q1,q2,p2))return true;\n\tif((p1-p2).det(q1-q2)==0 )return false;//平行\n\tP a=intersection(p1,p2,q1,q2);\n\treturn on_seg(p1,p2,a) && on_seg(q1,q2,a);\n}\n//原点中心回転\nP rotate(P p,double rad){\n\tdouble s=sin(rad),c=cos(rad);\n\treturn P(c*p.x-s*p.y, s*p.x+c*p.y);\n}\n//originを中心に回転\nP rotate(P p,double rad,P origin){\n\treturn origin + rotate(p - origin,rad);\n}\n//二点間の距離\ndouble dist(P p,P q){\n\tp = p-q;\n\treturn sqrt(p.x*p.x+p.y*p.y);\n}\n//単位ベクトルに変換\nP to_unit(P p){\n\tdouble d = sqrt(p.x*p.x+p.y*p.y);\n\treturn p/d;\n}\n//線分と点の距離\ndouble dist_LP(P p1,P p2,P q){\n\tdouble dx,dy;\n\tdx = p1.x-p2.x;\n\tdy = p1.y-p2.y;\n\tdouble d = min(dist(p1,q) ,dist(p2,q));\n\tpair<P,P> normal = make_pair(q+to_unit(P(-dy,dx))*d ,q+to_unit(P(dy,-dx))*d);//法線ベクトル\n\tif(is_intersect(p1,p2,normal.first,normal.second)){\n\t\treturn dist(q, intersection(p1,p2,normal.first,normal.second));\n\t}\n\treturn d;\n}\n//線分間の距離\ndouble dist_LL(P p1,P p2,P q1,P q2){\n\tif(is_intersect(p1,p2,q1,q2))return 0;\n\treturn min( min(dist_LP(p1,p2,q1),dist_LP(p1,p2,q2))\n\t\t,min(dist_LP(q1,q2,p1),dist_LP(q1,q2,p2)) );\n}\n\nint main(){\n\tint q;\n\tcin>>q;\n\tfor(int i=0;i<q;i++){\n\t\tP p1,p2,q1,q2;\n\t\tcin>>p1.x>>p1.y;\n\t\tcin>>p2.x>>p2.y;\n\t\tcin>>q1.x>>q1.y;\n\t\tcin>>q2.x>>q2.y;\n\t\tprintf(\"%.8f\\n\",dist_LL(p1,p2,q1,q2));\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<iomanip>\n#include<algorithm>\n#include<bitset>\n#include<cctype>\n#include<cmath>\n#include<cstdio>\n#include<cstring>\n#include<functional>\n#include<limits>\n#include<list>\n#include<map>\n#include<set>\n#include<stack>\n#include<string>\n#include<sstream>\n#include<queue>\n#include<vector>\nusing namespace std;\n\n#define MOD 1000000007\n#define INF 0x3f3f3f3f\n#define INFL 0x3f3f3f3f3f3f3f3fLL\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n\n//0?¬?\nclass Point {\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0) :x(x), y(y) {}\n\n\tPoint operator+(Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator-(Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator*(double a) { return Point(a * x, a * y); }\n\tPoint operator/(double a) { return Point(x / a, y / a); }\n\tbool operator<(const Point &p)const { return x != p.x ? x < p.x : y < p.y; }\n\tbool operator==(const Point &p)const { return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS; }\n\n\tdouble abs() { return sqrt(norm()); }\n\tdouble norm() { return x*x + y*y; }\n\n};\n\n//1?¬?\ntypedef Point Vector;\n\nclass Segment {\npublic:\n\tPoint p1, p2;\n\tSegment(Point p1 = Point(), Point p2 = Point(1, 1)) :p1(p1), p2(p2) {}\n};\ntypedef Segment Line;\n\n//2?¬?\nclass Circle {\npublic:\n\tPoint c; //center\n\tdouble r; //radius\n\tCircle(Point c = Point(), double r = 0.0) :c(c), r(r) {}\n};\ntypedef vector<Point> Polygon;\n\n//??????\ndouble dot(Vector a, Vector b) { return a.x*b.x + a.y*b.y; }\n//??????\ndouble cross(Vector a, Vector b) { return a.x*b.y - a.y*b.x; }\n\n//??´?????????\nbool isOrthogonal(Vector a, Vector b) { return equals(dot(a, b), 0.0); }\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) { return isOrthogonal(a1 - a2, b1 - b2); }\nbool isOrthogonal(Segment s1, Segment s2) { return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0); }\n\n//????????????\nbool isParallel(Vector a, Vector b) { return equals(cross(a, b), 0.0); }\nbool isParallel(Point a1, Point a2, Point b1, Point b2) { return isParallel(a1 - a2, b1 - b2); }\nbool isParallel(Segment s1, Segment s2) { return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0); }\n\n//?°???±\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / base.norm();\n\treturn s.p1 + base*r;\n}\n//????°?\nPoint reflect(Segment s, Point p) { return p + (project(s, p) - p)*2.0; }\n\n//??????(p0,p1)????????????p2???????????¢???\nenum { ONLINE_FRONT = -2, CLOCKWISE, ON_SEGMENT, COUNTER_CLOCKWISE, ONLINE_BACK };\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0, b = p2 - p0;\n\tif (cross(a, b) > EPS)return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS)return CLOCKWISE;\n\tif (dot(a, b) < -EPS)return ONLINE_BACK;\n\tif (a.norm() < b.norm())return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\n//?????????????????????\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n\treturn (ccw(p1, p2, p3)*ccw(p1, p2, p4) <= 0 &&\n\t\tccw(p3, p4, p1)*ccw(p3, p4, p2) <= 0);\n}\nbool intersect(Segment s1, Segment s2) { return intersect(s1.p1, s1.p2, s2.p1, s2.p2); }\n//???????????????\nPoint getCrossPoint(Segment s1, Segment s2) {\n\tVector base = s2.p2 - s2.p1;\n\tdouble a1 = abs(cross(base, s1.p1 - s2.p1)); //area1\n\tdouble a2 = abs(cross(base, s1.p2 - s2.p1)); //area2\n\tdouble t = a1 / (a1 + a2);\n\treturn s1.p1 + (s1.p2 - s1.p1)*t;\n}\n\n//2??????????????¢\ndouble getDistance(Point a, Point b) { return (a - b).abs(); }\n//??´?????¨???????????¢\ndouble getDistanceLP(Line l, Point p) { return abs(cross(l.p2 - l.p1, p - l.p1) / (l.p2 - l.p1).abs()); }\n//????????¨???????????¢\ndouble getDistanceSP(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0)return (p - s.p1).abs();\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0)return (p - s.p2).abs();\n\treturn getDistanceLP(s, p);\n}\n//????????¨??????????????¢\ndouble getDistance(Segment s1, Segment s2) {\n\tif (intersect(s1, s2))return 0.0;\n\treturn\tmin(\n\t\tmin(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n\t\tmin(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2))\n\t);\n}\n\nint main() {\n\tint q; cin >> q;\n\tfor (int i = 0; i < q; i++) {\n\t\tPoint p[4];\n\t\tfor (int j = 0; j < 4; j++) {\n\t\t\tscanf(\"%lf%lf\", &p[j].x, &p[j].y);\n\t\t}\n\t\tprintf(\"%.10f\\n\", getDistance(Segment(p[0], p[1]), Segment(p[2], p[3])));\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <vector>\n#include <utility>\n#define EPS 1e-10\nusing namespace std;\ntypedef long long ll;\nstruct Point{\n\tdouble x,y;\n\tPoint(double x = 0.0,double y = 0.0): x(x),y(y) {}\n\tPoint operator + (Point p){\n\t\treturn Point(x + p.x,y + p.y);\n\t}\n\tPoint operator - (Point p){\n\t\treturn Point(x - p.x,y - p.y);\n\t}\n\tPoint operator * (double lambda){\n\t\treturn Point(x * lambda,y * lambda);\n\t}\n\tPoint operator / (double lambda){\n\t\treturn Point(x / lambda,y / lambda);\n\t}\n\tPoint neg(){\n\t\treturn Point(-x,-y);\n\t}\n\tdouble norm(){\n\t\treturn x * x + y * y;\n\t}\n\tdouble abs_(){\n\t\treturn sqrt(norm());\n\t}\n\tbool operator == (const Point &p)const\n\t{\n\t\treturn abs(x - p.x) < EPS && abs(y - p.y) < EPS;\n\t}\n\tbool operator < (const Point &p)const\n\t{\n\t\tif(abs(x - p.x) < EPS) return y < p.y;\n\t\telse return x < p.x;\n\t}\n};\ntypedef Point Vector;\nstruct Segment{\n\tPoint p1,p2;\n\tSegment(Point p1 = Point(),Point p2 = Point()): p1(p1),p2(p2) {}\n};\ntypedef Segment Line;\nstruct Circle{\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(),double r = 0.0): c(c),r(r) {}\n};\ntypedef vector<Point> Polygon;\ndouble dot(Vector a,Vector b){\n\treturn a.x * b.x + a.y * b.y;\n}\ndouble det(Vector a,Vector b){\n\treturn a.x * b.y - b.x * a.y;\n}\nbool vertical(Line l1,Line l2){\n\treturn abs(dot(l1.p2 - l1.p1,l2.p2 - l2.p1)) < EPS;\n}\nbool parallel(Line l1,Line l2){\n\treturn abs(det(l1.p2 - l1.p1,l2.p2 - l2.p1)) < EPS;\n}\nPoint proj(Point p,Line l){\n\tVector a = l.p2 - l.p1;\n\tdouble r = dot(a,p - l.p1) / a.norm();\n\treturn l.p1 + a * r;\n}\nPoint ref(Point p,Line l){\n\tPoint A = proj(p,l);\n\treturn A + (A - p);\n}\nint ccw(Segment/*Directed Segment*/ s,Point p){//\n\tVector a = s.p2 - s.p1,b = p - s.p1;\n\tif(det(a,b) > EPS) return 1;//COUNTER_CLOCKWISE\n\telse if(det(a,b) < -EPS) return -1;//CLOCKWISE\n\telse if(dot(a,b) < -EPS) return 2;//ONLINE_BACK\n\telse if(a.norm() < b.norm() - EPS) return -2;//ONLINE_FRONT\n\telse return 0;//ON_SEGMENT\n}\nbool intersect(Segment s1,Segment s2){\n\treturn ccw(s1,s2.p1) * ccw(s1,s2.p2) <= 0 && ccw(s2,s1.p1) * ccw(s2,s1.p2) <= 0;\n}\ndouble disSP(Segment s,Point p){\n\tVector a = s.p2 - s.p1;\n\tif(dot(a,p - s.p1) < EPS) return (p - s.p1).abs_();\n\tif(dot(a.neg(),p - s.p2) < EPS) return (p - s.p2).abs_();\n\treturn abs(det(a,p - s.p1) / a.abs_());\n}\ndouble disSS(Segment s1,Segment s2){\n\tif(intersect(s1,s2)) return 0;\n\treturn min(min(disSP(s1,s2.p1),disSP(s1,s2.p2)),min(disSP(s2,s1.p1),disSP(s2,s1.p2)));\n}\nint main(){\n\tint t;\n\tscanf(\"%d\",&t);\n\twhile(t--){\n\t\tSegment s1,s2;\n\t\tscanf(\"%lf%lf%lf%lf\",&s1.p1.x,&s1.p1.y,&s1.p2.x,&s1.p2.y);\n\t\tscanf(\"%lf%lf%lf%lf\",&s2.p1.x,&s2.p1.y,&s2.p2.x,&s2.p2.y);\n\t\tprintf(\"%.10f\\n\",disSS(s1,s2));\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cmath>\n#include <algorithm>\n\nusing namespace std;\nstatic const double eps = 1e-10;\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nbool equals(double a, double b)\n{\n\treturn(fabs(a - b) < eps);\n}\n\nclass Point\n{\npublic:\n\tdouble x, y;\n\tPoint(double x = 0, double y = 0) : x(x), y(y){}\n\n\tPoint operator + (Point p){ return(Point(x + p.x, y + p.y)); }\n\tPoint operator - (Point p){ return(Point(x - p.x, y - p.y)); }\n\tPoint operator * (double a){ return(Point(a * x, a * y)); }\n\tPoint operator / (double a){ return(Point(x / a, y / a)); }\n\n\tdouble abs(){ return(sqrt(norm())); }\n\tdouble norm(){ return(x * x + y * y); }\n\n\tbool operator < (const Point& p) const\n\t{\n\t\treturn(x != p.x ? x < p.x : y < p.y);\n\t}\n\n\tbool operator == (const Point& p) const\n\t{\n\t\treturn(fabs(x - p.x) < eps && fabs(y - p.y) < eps);\n\t}\n};\ntypedef Point Vector;\n\n\nstruct Segment\n{\n\tPoint p1, p2;\n};\ntypedef Segment Line;\n\nclass Circle\n{\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0) : c(c), r(r){}\n};\n\ndouble dot(Vector a, Vector b)\n{\n\treturn(a.x * b.x + a.y * b.y);\n}\n\ndouble cross(Vector a, Vector b)\n{\n\treturn(a.x * b.y - a.y * b.x);\n}\n\nPoint project(Segment s, Point p)\n{\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / base.norm();\n\treturn(s.p1 + base * r);\n}\n\nPoint reflect(Segment s, Point p)\n{\n\treturn(p + (project(s, p) - p) * 2.0);\n}\n\nbool isOrthogonal(Vector a, Vector b)\n{\n\treturn(equals(dot(a, b), 0.0));\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2)\n{\n\treturn(isOrthogonal(a1 - a2, b1 - b2));\n}\n\nbool isOrthogonal(Segment s1, Segment s2)\n{\n\treturn(equals(dot(s1.p2 - s2.p1, s2.p2 - s2.p1), 0.0));\n}\n\nbool isParallel(Vector a, Vector b)\n{\n\treturn(equals(cross(a, b), 0.0));\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2)\n{\n\treturn(isParallel(a1 - a2, b1 - b2));\n}\n\nbool isParallel(Segment s1, Segment s2)\n{\n\treturn(equals(cross(s1.p1 - s1.p1, s2.p2 - s2.p1), 0.0));\n}\n\nint ccw(Point p0, Point p1, Point p2)\n{\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (cross(a, b) > eps)\n\t{\n\t\treturn(COUNTER_CLOCKWISE);\n\t}\n\tif (cross(a, b) < -eps)\n\t{\n\t\treturn(CLOCKWISE);\n\t}\n\tif (dot(a, b) < -eps)\n\t{\n\t\treturn(ONLINE_BACK);\n\t}\n\tif (a.norm() < b.norm())\n\t{\n\t\treturn(ONLINE_FRONT);\n\t}\n\treturn(ON_SEGMENT);\n}\n\nbool intersect(Point p1, Point p2, Point p3, Point p4)\n{\n\treturn(ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 && ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\n\nbool intersect(Segment s1, Segment s2)\n{\n\treturn(intersect(s1.p1, s1.p2, s2.p1, s2.p2));\n}\n\ndouble getDistance(Point a, Point b)\n{\n\treturn((a - b).abs());\n}\n\ndouble getDistanceLP(Line l, Point p)\n{\n\treturn(abs((cross(l.p2 - l.p1, p - l.p1) / (l.p2 - l.p1).abs())));\n}\n\ndouble getDistanceSP(Segment s, Point p)\n{\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0)\n\t{\n\t\treturn((p - s.p1).abs());\n\t}\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0)\n\t{\n\t\treturn((p - s.p2).abs());\n\t}\n\treturn(getDistanceLP(s, p));\n}\n\ndouble getDistance(Segment s1, Segment s2)\n{\n\tif (intersect(s1, s2))\n\t{\n\t\treturn(0.0);\n\t}\n\treturn(min(min(getDistanceSP(s1,  s2.p1), getDistanceSP(s1, s2.p2)), min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2))));\n}\n\nvoid solve()\n{\n\tcin.tie(0);\n\tios::sync_with_stdio(false);\n\n\tint q;\n\tcin >> q;\n\tfor (int i = 0; i < q; ++i)\n\t{\n\t\tSegment s[2];\n\t\tfor (int j = 0; j < 2; ++j)\n\t\t{\n\t\t\tcin >> s[j].p1.x >> s[j].p1.y >> s[j].p2.x >> s[j].p2.y;\n\t\t}\n\t\tprintf(\"%.10f\\n\", getDistance(s[0], s[1]));\n\t}\n}\n\nint main()\n{\n\tsolve();\n\treturn(0);\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n//#define int long long\n\nusing namespace std;\nusing LL = long long;\nusing P = pair<int, int>;\nusing Tapris = tuple<int, int, int>;\n\n#define FOR(i, a, n) for(int i = (int)(a); i < (int)(n); ++i)\n#define REP(i, n) FOR(i, 0, n)\n\n#define pb(a) push_back(a)\n#define all(x) (x).begin(),(x).end()\n\nconst int INF = (int)1e9;\nconst LL INFL = (LL)1e15;\nconst int MOD = 1e9 + 7;\n\nint dy[]={0, 0, 1, -1, 0};\nint dx[]={1, -1, 0, 0, 0};\n\ntypedef double LD;\ntypedef complex<LD> Point;\ntypedef pair<Point, Point> Line;\nconst LD EPS = 1e-10;\n#define X real() // x座標を取得\n#define Y imag() // y座標を取得\n#define LE(n,m) ((n) < (m) + EPS)\n#define GE(n,m) ((n) + EPS > (m))\n#define EQ(n,m) (abs((n)-(m)) < EPS)\n\n// 内積 dot(a, b) = |a||b|cosθ\nLD dot(Point a, Point b){\n    return (conj(a)*b).X;\n}\n\n// 外積 cross(a, b) = |a||b|sinθ\nLD cross(Point a, Point b){\n    return (conj(a)*b).Y;\n}\n\nint ccw(Point a, Point b, Point c){\n    b -= a; c -= a;\n    if (cross(b, c) > 0)   return +1;       // counter clockwise\n    if (cross(b, c) < 0)   return -1;       // clockwise\n    if (dot(b, c) < 0)     return +2;       // c--a--b on line\n    if (norm(b) < norm(c)) return -2;       // a--b--c on line\n    return 0;\n}\n\n\n// 交差判定 (isec) ****************************\n// 点　 := 平面座標にある点\n// 直線 := 点と点を通るどこまでも続く線\n// 線分 := 点と点を結んでその両端で止まっている線\n\n// 直線と点\nbool isecLP(Point a1, Point a2, Point b){\n    return abs(ccw(a1, a2, b)) != 1;\n}\n\n// 直線と直線\nbool isecLL(Point a1, Point a2, Point b1, Point b2) {\n    return !isecLP(a2-a1, b2-b1, 0) || isecLP(a1, b1, b2);\n}\n\n// 直線と線分\nbool isecLS(Point a1, Point a2, Point b1, Point b2) {\n    return cross(a2-a1, b1-a1) * cross(a2-a1, b2-a1) < EPS;\n}\n\n// 線分と線分\nbool isecSS(Point a1, Point a2, Point b1, Point b2) {\n    return ccw(a1, a2, b1)*ccw(a1, a2, b2) <= 0 && ccw(b1, b2, a1)*ccw(b1, b2, a2) <= 0;\n}\n\n// 線分と点\nbool isecSP(Point a1, Point a2, Point b) {\n    return !ccw(a1, a2, b);\n}\n\n// ********************************************\n\n\n// 距離 (dist) ********************************\n// 点pの直線aへの射影点を返す\nPoint proj(Point a1, Point a2, Point p){\n    return a1 + dot(a2-a1, p-a1) / norm(a2-a1) * (a2-a1);\n}\n\n// 点pの直線aへの反射点を返す\nPoint reflection(Point a1, Point a2, Point p){\n    return 2.0L*proj(a1, a2, p) - p;\n}\n\n// 直線と点\nLD distLP(Point a1, Point a2, Point p){\n    return abs(proj(a1, a2, p) - p);\n}\n\n// 直線と直線\nLD distLL(Point a1, Point a2, Point b1, Point b2) {\n    return isecLL(a1, a2, b1, b2) ? 0 : distLP(a1, a2, b1);\n}\n\n// 直線と線分\nLD distLS(Point a1, Point a2, Point b1, Point b2) {\n    return isecLS(a1, a2, b1, b2) ? 0 : min(distLP(a1, a2, b1), distLP(a1, a2, b2));\n}\n\n// 線分と点\nLD distSP(Point a1, Point a2, Point p) {\n    Point r = proj(a1, a2, p);\n    if(isecSP(a1, a2, r)) return abs(r-p);\n    return min(abs(a1-p), abs(a2-p));\n}\n\n// 線分と線分\nLD distSS(Point a1, Point a2, Point b1, Point b2) {\n    if(isecSS(a1, a2, b1, b2)) return 0;\n    return min(min(distSP(a1, a2, b1), distSP(a1, a2, b2)), min(distSP(b1, b2, a1), distSP(b1, b2, a2)));\n}\n\n// ********************************************\n\n\n// 2直線の交点 (crosspoint) *******************\nPoint crosspointLL(Point a1, Point a2, Point b1, Point b2){\n    LD d1 = cross(b2-b1, b1-a1);\n    LD d2 = cross(b2-b1, a2-a1);\n    if (EQ(d1, 0) && EQ(d2, 0)) return a1;\n    if (EQ(d2, 0)) throw \"not exist crosspoint\";\n    return a1 + d1/d2 * (a2-a1);\n}\n// ********************************************\n\n\n/*************** using variables ***************/\nPoint p[4];\nint q;\n/**********************************************/\n\nsigned main(){\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    \n    cin >> q;\n    REP(i, q){\n        LD xp, yp;\n        REP(i, 4){\n            cin >> xp >> yp;\n            p[i] = Point(xp, yp);\n        }\n        LD ans = distSS(p[0], p[1], p[2], p[3]);\n        printf(\"%.10Lf\\n\", ans);\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\n#include <cmath>\n#include <iomanip>\n\n\nusing namespace std;\n\n//-------------------------------------------------------------------------------------\n/*2点[(x1,y1),(x2,y2)]を入力し二点を通る直線ax+by+cの(a,b,c)を返す,  */\n/*x1==x2ならfalseを返す*/\n/*falseならばx=cの形の直線*/\nvoid straight_line_passing_through_the_two_points(double x1, double y1, double x2, double y2, double *a, double *b, double *c){\n    *a=(y2-y1);\n    *b=-(x2-x1);\n    *c=y2*(x2-x1)-x2*(y2-y1);\n}\n\n//-------------------------------------------------------------------------------------\n/*(x,y)を通るa1x+b1y+c1=0に垂直な直線a2x+b2y+c2=0を返す*/\nbool vertical_straight_line(double x, double y, double a1, double b1, double c1, double *a2, double *b2, double *c2){\n    if(a1*x+b1*y+c1==0)return false;\n    *a2 = -b1;\n    *b2 = a1;\n    *c2 = b1*x - a1*y;\n    return true;\n}\n\n\n//-------------------------------------------------------------------------------------\n/*2直線 a1x+b1y+c1=0 a2x+b2y+c2=0 の交点 (x,y)を返す*/\n/*2直線が平行であるならば0を返す*/\nint intersection_and_parallel(double a1, double b1, double c1, double a2, double b2, double c2, double *x, double *y){\n    if(a1*b2==a2*b1)return false;//平行の判定\n    \n    *x = (b1*c2-b2*c1)/(a1*b2-a2*b1);\n    *y = (a2*c1-a1*c2)/(a1*b2-a2*b1);\n    \n    return true;\n}\n\n//-------------------------------------------------------------------------------------\n/* \n a1x+b1y+c1=0 と　a2x+b2y+c2=0 が\n 平行なら2\n 直交なら1\n それ以外は0\n を返す\n */\nint judges_whether_parallel_or_perpendicular(double a1, double b1, double c1, double a2, double b2, double c2){\n    if(a1*b2 == a2*b1)return 2;\n    if(a1*a2 + b1*b2 == 0)return 1;\n    return 0;\n}\n\n\n//-------------------------------------------------------------------------------------\n/*直線ax+by+c=0に対し　(x1,y1)と線対称な位置(x2,y2)を出力*/\n/*vertical_straight_lineを使用*/\n/*intersection_and_parallelを使用*/\nvoid line_symmetry(double a, double b, double c, double x1, double y1, double *x2, double *y2){\n    //垂直な直線を求める\n    double a2,b2,c2;\n    vertical_straight_line(x1, y1, a, b, c, &a2, &b2, &c2);\n    \n    //垂直な直線との交点を求める\n    double c_x, c_y;\n    intersection_and_parallel(a, b, c, a2, b2, c2, &c_x, &c_y);\n    *x2 = x1 + 2*(c_x-x1);\n    *y2 = y1 + 2*(c_y-y1);\n}\n\n\n\n//-------------------------------------------------------------------------------------\n/*2点(x1,y1), (x2,y2) の距離*/\ndouble distance_between_the_two_pointss(double x1,double y1, double x2, double y2){\n    return  sqrt(fabs((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)));\n}\n\n\n//-------------------------------------------------------------------------------------\n/* (x1,y1)から(x2,y2)へ伸ばした直線の角度を求める  */\ndouble angle_of_the_line(double x1, double y1, double x2, double y2){\n    return atan2(y2-y1, x2-x1);\n}\n\n//-------------------------------------------------------------------------------------\n/*(x1,y1)と(x2,y2)を両端に持つ線分と*/\n/*(x3,y3)と(x4,y4)を両端に持つ線分が*/\n/*交差するなら1 交差しないなら0を出力する*/\n/* straight_line_passing_through_the_two_pointsを使用 */\n/* intersection_and_parallelを使用 */\nint line_segment_cross_decision(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4){\n    double a1,b1,c1, a2,b2,c2;\n    straight_line_passing_through_the_two_points(x1, y1, x2, y2, &a1, &b1, &c1);\n    straight_line_passing_through_the_two_points(x3, y3, x4, y4, &a2, &b2, &c2);\n    double c_x,c_y;\n    bool is_parallel = intersection_and_parallel(a1, b1, c1, a2, b2, c2, &c_x, &c_y);\n    if(is_parallel==false){\n        \n        if(a1==a2&&b1==b2&&c1==c2){//一直線上にある.\n            \n            if(min(x1,x2)<=x3&&x3<=max(x1,x2)&&min(y1,y2)<=y3&&y3<=max(y1,y2))return 1;\n            if(min(x1,x2)<=x4&&x4<=max(x1,x2)&&min(y1,y2)<=y4&&y4<=max(y1,y2))return 1;\n            if(min(x3,x4)<=x1&&x1<=max(x3,x4)&&min(y3,y4)<=y1&&y1<=max(y3,y4))return 1;\n            if(min(x3,x4)<=x2&&x2<=max(x3,x4)&&min(y3,y4)<=y2&&y2<=max(y3,y4))return 1;\n            \n\n\n        }\n        return 0;\n    }\n    if(x1>x2)swap(x1, x2);\n    if(x3>x4)swap(x3, x4);\n    if(y1>y2)swap(y1, y2);\n    if(y3>y4)swap(y3, y4);\n\n    if(x1<=c_x&&c_x<=x2&&x3<=c_x&&c_x<=x4){\n        if(y1<=c_y&&c_y<=y2&&y3<=c_y&&c_y<=y4)return 1;\n    }\n    return 0;\n    \n}\n\n\n\n//-------------------------------------------------------------------------------------\n/*点(p_x,p_y)と線分(x1,y1)(x2,y2)の距離*/\n/* straight_line_passing_through_the_two_points */\n/* vertical_straight_line */\n/* intersection_and_parallel */\ndouble distance_between_the_line_segment_and_point(double p_x, double p_y, double x1, double y1, double x2, double y2){\n    double a,b,c;//(x1,y1)(x2,y2)を通る直線\n    straight_line_passing_through_the_two_points(x1, y1, x2, y2, &a, &b, &c);\n    double a2,b2,c2;//直線ax+by+c=0に垂直な直線\n    double v_x, v_y;//二つの直線の交点\n    bool is_not_parallel = vertical_straight_line(p_x, p_y, a, b, c, &a2, &b2, &c2);\n    intersection_and_parallel(a, b, c, a2, b2, c2, &v_x, &v_y);\n    \n    if(is_not_parallel){\n        if(min(x1,x2)<=v_x&&v_x<=max(x1,x2)){//(v_x,v_y)は線分の中にある\n            return distance_between_the_two_pointss(p_x, p_y, v_x, v_y);\n        }else{//(v_x,v_y)は線分の外にある\n            double l1 = distance_between_the_two_pointss(p_x, p_y, x1, y1);\n            double l2 = distance_between_the_two_pointss(p_x, p_y, x2, y2);\n            return min(l1,l2);\n        }\n    }else{\n        if(min(x1,x2)<=p_x&&p_x<=max(x1,x2)&&min(y1,y2)<=p_y&&p_y<=max(y1,y2)){//(p_x,p_y)は線分の中にある\n            return 0.0;\n        }else{//(p_x,p_y)は線分の外にある\n            double l1 = distance_between_the_two_pointss(p_x, p_y, x1, y1);\n            double l2 = distance_between_the_two_pointss(p_x, p_y, x2, y2);\n            return min(l1,l2);\n        }\n    }\n    \n}\n\n\n//-------------------------------------------------------------------------------------\n/*線分(x1,y1)(x2,y2)と線分(x3,y3)(x4,y4)の距離*/\n\ndouble distance_between_two_line_segment(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4){\n    //同一直線上にある場合\n    \n    //ぶつかる場合\n    if(line_segment_cross_decision(x1, y1, x2, y2, x3, y3, x4, y4)){\n        return 0.0;\n    }\n    \n    //ぶつからない場合\n    double l1,l2,l3,l4;\n    l1=distance_between_the_line_segment_and_point(x1, y1, x3, y3, x4, y4);\n    l2=distance_between_the_line_segment_and_point(x2, y2, x3, y3, x4, y4);\n    l3=distance_between_the_line_segment_and_point(x3, y3, x1, y1, x2, y2);\n    l4=distance_between_the_line_segment_and_point(x4, y4, x1, y1, x2, y2);\n    //cout<<l1<<endl;\n    //cout<<l2<<endl;\n    //cout<<l3<<endl;\n    //cout<<l4<<endl;\n    \n    return min(l1,min(l2,min(l3,l4)));\n}\n\n\n\nint main(int argc, const char * argv[]){\n    int q;\n    cin>>q;\n    for(int i=0; i<q; i++){\n        double x1,x2,x3,x4,y1,y2,y3,y4;\n        cin>>x1>>y1>>x2>>y2>>x3>>y3>>x4>>y4;\n        \n\n        cout<< fixed << setprecision(10)<<distance_between_two_line_segment(x1, y1, x2, y2, x3, y3, x4, y4)<<endl;\n        //cout<<\"========\"<<endl;\n        \n        \n        \n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n  \nconst double EPS = 1e-8, PI = acos(-1);\ninline bool eq(double a,double b){ return abs(b - a) < EPS; }\n#define curr(P,i) P[i]\n#define next(P,i) P[(i+1)%P.size()]\n#define prev(P,i) P[(i+P.size()-1) % P.size()]\nenum { OUT, ON, IN };\n  \nstruct Geometory { // Geometory Library\n  struct Point {\n    double x, y;\n    Point(){};\n    Point(double x,double y):x(x),y(y){};\n    Point operator+(const Point& b) const { return Point(x + b.x,y + b.y); }\n    Point operator-(const Point& b) const { return Point(x - b.x,y - b.y); }\n    Point operator*(const double b) const { return Point(x * b,y * b); }\n    Point operator*(const Point& b) const { return Point(x * b.x - y * b.y,x * b.y + y * b.x); }\n    Point operator/(const double b) const { return Point(x / b,y / b); }\n    bool operator< (const Point& b) const { return x != b.x ? x < b.x : y < b.y; }\n    bool operator==(const Point& b) const { return eq(x,b.x) && eq(y,b.y); }\n    double norm(){ return x * x + y * y; }\n    double arg(){ return atan2(x,y); }\n    double abs(){ return sqrt(norm()); }\n    Point rotate(double theta){ return Point(cos(theta) * x - sin(theta) * y,sin(theta) * x + cos(theta) * y); }\n    Point rotate90(){ return Point(-y,x); }\n    friend ostream& operator<<(ostream& os, Point& p){ return os<<\"(\"<<p.x<<\",\"<<p.y<<\")\"; }\n    friend istream& operator>>(istream& is, Point& a){ return is>>a.x>>a.y; }\n  };\n  \n  struct Line {\n    Point a, b;\n    Line(){};\n    Line(Point a,Point b):a(a),b(b){};\n    friend ostream& operator<<(ostream& os, Line& p){ return os<<\"(\"<<p.a.x<<\",\"<<p.a.y<<\") to (\"<<p.b.x<<\",\"<<p.b.y<<\")\"; }\n    friend istream& operator>>(istream& is, Line& a){ return is>>a.a.x>>a.a.y>>a.b.x>>a.b.y; }\n  };\n  struct Segment {\n    Point a, b;\n    Segment(){};\n    Segment(Point a,Point b):a(a),b(b){};\n    friend ostream& operator<<(ostream& os, Segment& p){ return os<<\"(\"<<p.a.x<<\",\"<<p.a.y<<\") to (\"<<p.b.x<<\",\"<<p.b.y<<\")\"; }\n    friend istream& operator>>(istream& is, Segment& a){ return is>>a.a.x>>a.a.y>>a.b.x>>a.b.y; }\n  };\n  struct Circle {\n    Point p; double r;\n    Circle(){};\n    Circle(Point p, double r) : p(p),r(r){};\n  };\n  typedef vector< Point > Polygon;\n  typedef vector< Segment > Segments;\n  typedef vector< Line > Lines;\n  typedef vector< Circle > Circles;\n  typedef pair< Point, Point > PointPoint;\n  \n  double cross(const Point& a,const Point& b){\n    return a.x * b.y - a.y * b.x;\n  }\n  double dot(const Point& a,const Point& b){\n    return a.x * b.x + a.y * b.y;\n  }\n  \n  int ccw(const Point& a,Point b,Point c){\n    b = b - a, c = c - a;\n    if(cross(b,c) > 0)    return +1;  // a → b で 反時計方向におれて c\n    if(cross(b,c) < 0)    return -1; // a → b で 時計方向におれて c\n    if(dot(b,c) < 0)      return +2;  // c -- a -- bで一直線上\n    if(b.norm() < c.norm()) return -2; // a -- b -- cで一直線上\n    return 0;  // a -- c -- bで一直線上\n  }\n  Point Projection(const Line& l, const Point& p){\n    double t = dot( p - l.a, l.a - l.b) / (l.a - l.b).norm();\n    return l.a + (l.a - l.b) * t;\n  }\n  Point Projection(const Segment& l, const Point& p){\n    double t = dot( p - l.a, l.a - l.b) / (l.a - l.b).norm();\n    return l.a + (l.a - l.b) * t;\n  }\n  Point Reflection(const Line& l, const Point& p){\n    return p + (Projection( l, p) - p) * 2.0;\n  }\n  \n  double Distance( const Line& l,const Point& p) { //OK\n    return (p - Projection( l, p)).abs();\n  }\n  \n  bool Intersect(const Line& l, const Line& m){\n    return abs(cross(l.b - l.a, m.b - m.a)) > EPS || abs(cross(l.b-l.a, m.b-l.a)) < EPS;\n  }\n  bool Intersect(const Line& l, const Segment& s){\n    return cross( l.b - l.a, s.a - l.a) * cross( l.b - l.a, s.b - l.a) < EPS;\n  }\n  bool Intersect(const Line& l, const Point& p){\n    return abs(ccw(l.a, l.b, p)) != -1;\n  }\n  bool Intersect(const Segment& s, const Segment& t){\n    return ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 && ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0;\n  }\n  bool Intersect(const Segment& s, const Point& p){\n    return ccw(s.a, s.b, p) == 0;\n  }\n  bool Intersect(const Circle& c,const Line& l){\n    return Distance( l, c.p) <= c.r + EPS;\n  }\n  bool Intersect(const Circle& c,const Point& p){\n    return abs( ( p - c.p).abs() - c.r ) < EPS;\n  }\n  int Intersect(const Circle& c, const Segment& l){\n    if( (Projection( l, c.p) - c.p).norm() - c.r * c.r > EPS) return 0;\n    const double d1 = ( c.p - l.a).abs(), d2 = ( c.p - l.b).abs();\n    if( d1 < c.r + EPS && d2 < c.r + EPS) return 0;\n    if( d1 < c.r - EPS && d2 > c.r + EPS || d1 > c.r + EPS && d2 < c.r - EPS ) return 1;\n    const Point h = Projection( l, c.p);\n    if( dot( l.a - h, l.b - h) < 0) return 2;\n    return 0;\n  }\n  bool Intersect(const Circle& a,const Circle& b){\n    return ( ( a.p - b.p).norm() - ( a.r + b.r) * ( a.r + b.r) < EPS) &&\n      ( ( a.p - b.p).norm() - ( a.r - b.r) * ( a.r - b.r) > -EPS);\n  }\n  double Distance(const Segment& s,const Point& p){\n    Point r = Projection(s, p);\n    if ( Intersect( s, r)) return ( r - p).abs();\n    return min( ( s.a - p).abs(), ( s.a - p).abs());\n  }\n  double Distance(const Segment& a,const Segment& b){\n    if(Intersect( a, b)) return 0;\n    return min( min( Distance( a, b.a), Distance( a, b.b)), min( Distance( b, a.a), Distance( b, a.b)));\n  }\n  double Distance(const Line& l,const Line& m) {\n    return Intersect( l, m) ? 0 : Distance( l, m.a);\n  }\n  double Distance(const Line& l,const Segment& s) { //OK\n    if (Intersect(l, s)) return 0;\n    return min(Distance(l, s.a), Distance(l, s.b));\n  }\n  double Distance(const Point& a,const Point& b){ //OK\n    return ( a - b).abs();\n  }\n  Point Crosspoint(const Segment& l,const Segment& m) { //OK\n    double A = cross(l.b - l.a, m.b - m.a);\n    double B = cross(l.b - l.a, l.b - m.a);\n    if (abs(A) < EPS && abs(B) < EPS) return m.a; // same line\n    return m.a + (m.b - m.a) * B / A;\n  }\n  PointPoint Crosspoint(const Circle& c,const Line l){\n    Point hp = Projection( l, c.p), h =  hp - c.p;\n    const double d2 = h.norm();\n    Point v = ( l.b - l.a) * sqrt( c.r * c.r - d2) / ( l.b - l.a).abs();\n    return PointPoint(hp - v, hp + v);\n  }\n  PointPoint Crosspoint(const Circle& c,const Segment& l) {\n    Line aa = Line( l.a, l.b);\n    if(Intersect(c, l) == 2) return Crosspoint(c, aa);\n    PointPoint ret = Crosspoint(c, aa);\n    if(dot(l.a - ret.first, l.b - ret.first) < 0) ret.second = ret.first;\n    else ret.first = ret.second;\n    return ret;\n  }\n  PointPoint Crosspoint(const Circle& c1,const Circle& c2){ //OK\n    double d = (c1.p - c2.p).abs();\n    double s = (c1.r + c2.r + d) / 2;\n    double S = sqrt( s * ( s - c1.r) * ( s - c2.r) * ( s - d));\n    double h = 2 * S / d;\n    Point v = ( c2.p - c1.p) / ( c2.p - c1.p).abs();\n    double m = sqrt( c1.r * c1.r - h * h);\n    return PointPoint( c1.p + v * m + Point(0,1) * h * v, c1.p + v * m - Point(0,1) * h * v);\n  }\n  bool parallel(const Line& a,const Line& b){\n    return abs(cross( a.b - a.a, b.b - b.a)) < EPS;\n  }\n  bool orthogonal(const Line& a,const Line& b){\n    return abs(dot( a.a - a.b, b.a - b.b)) < EPS;\n  }\n  int Contains(const Polygon& Q,const Point& p){\n    bool in = false;\n    for(int i = 0 ; i < Q.size() ; i++ ){\n      Point a = curr(Q,i) - p, b = next(Q,i) - p;\n      if(a.y > b.y) swap(a,b);\n      if(a.y <= 0 && 0 < b.y && cross(a,b) < 0) in = !in;\n      if(cross(a,b) == 0 && dot(a,b) <= 0) return ON;\n    }\n    return in ? IN : OUT;\n  }\n  bool Contains(const Circle& c,const Point& p){\n    return ( c.p - p).abs() < c.r + EPS;\n  }\n  double Area2(const Polygon& p){ //OK\n    double A = 0;\n    for (int i = 0; i < p.size(); ++i){\n      A += cross(curr(p, i), next(p, i));\n    }\n    return A;\n  }\n};\n\nGeometory geo;\ntypedef Geometory::Point P;\ntypedef Geometory::Line L;\ntypedef Geometory::Segment S;\ntypedef Geometory::Circle C;\nint main(){\n  int q;\n  cin >> q;\n  while(q--){\n    S l1, l2;\n    cin >> l1 >> l2;\n    cout << fixed << setprecision(10) << geo.Distance( l1, l2) << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <complex>\n#include <vector>\n#include <algorithm>\n#include <functional>\n#include <iomanip>\n\nusing namespace std;\n\ntemplate<typename T> bool chmax(T& a, T b) { if (a < b) { a = b; return true; } return false; }\ntemplate<typename T> bool chmin(T& a, T b) { if (a > b) { a = b; return true; } return false; }\n\n// 実数\nusing Real = double;\n// 点\nusing Point = complex<Real>;\nconst Real EPS = 1e-10, PI = acos(-1);\n\n// 実数同士の比較\ninline bool eq(Real a, Real b) { return fabs(b - a) < EPS; }\n\nPoint operator*(const Point& p, const Real& d) {\n    return Point(real(p) * d, imag(p) * d);\n}\n\n// 点の入力\nistream& operator>>(istream& is, Point& p) {\n    Real a, b;\n    is >> a >> b;\n    p = Point(a, b);\n    return is;\n}\n\n//// 点の出力\n//ostream &operator<<(ostream &os, Point &p) {\n//  os << fixed << setprecision(10) << p.real() << \" \" << p.imag();\n//}\n\n// 点 p を反時計回りに theta 回転\nPoint rotate(Real theta, const Point& p) {\n    return Point(cos(theta) * p.real() - sin(theta) * p.imag(), sin(theta) * p.real() + cos(theta) * p.imag());\n}\n\n// ラジアンを度数に変換\nReal radian_to_degree(Real r) {\n    return (r * 180.0 / PI);\n}\n\n// 度数をラジアンに変換\nReal degree_to_radian(Real d) {\n    return (d * PI / 180.0);\n}\n\n// a-b-c の角度のうち小さい方を返す\nReal get_angle(const Point& a, const Point& b, const Point& c) {\n    const Point v(b - a), w(c - a);\n    Real alpha = atan2(v.imag(), v.real()), beta = atan2(w.imag(), w.real());\n    if (alpha > beta) swap(alpha, beta);\n    Real theta = (beta - alpha);\n    return min(theta, 2 * acos(-1) - theta);\n}\n\n// ソート x座標が小さい順に並べる x座標が同じならy座標が小さい順\nnamespace std {\n    bool operator<(const Point& a, const Point& b) {\n        return !eq(a.real(), b.real()) ? a.real() < b.real() : a.imag() < b.imag();\n    }\n}\n\n// 2点を通る直線\nstruct Line {\n    Point a, b;\n\n    Line() = default;\n\n    Line(Point a, Point b) : a(a), b(b) {}\n\n    Line(Real A, Real B, Real C) // Ax + By = C\n    {\n        if (eq(A, 0)) a = Point(0, C / B), b = Point(1, C / B);\n        else if (eq(B, 0)) b = Point(C / A, 0), b = Point(C / A, 1);\n        else a = Point(0, C / B), b = Point(C / A, 0);\n    }\n\n    friend ostream& operator<<(ostream& os, Line& p) {\n        return os << p.a << \" to \" << p.b;\n    }\n\n    friend istream& operator>>(istream& is, Line& a) {\n        return is >> a.a >> a.b;\n    }\n};\n\n// 2点を結ぶ線分\nstruct Segment : Line {\n    Segment() = default;\n    Segment(Point a, Point b) : Line(a, b) {}\n};\n\n\n// 円\nstruct Circle {\n    // 中心\n    Point p;\n    // 半径\n    Real r;\n\n    Circle() = default;\n\n    Circle(Point p, Real r) : p(p), r(r) {}\n};\n\n// 点集合\nusing Points = vector< Point >;\n// ポリゴン 反時計回り\nusing Polygon = vector< Point >;   // 注意!! 凸多角形は反時計回りに与える.(保証されない場合は面積が負なら reverse をかける)\n// 線分集合\nusing Segments = vector< Segment >;\n// 直線集合\nusing Lines = vector< Line >;\n// 円集合\nusing Circles = vector< Circle >;\n\n// 外積\nReal cross(const Point& a, const Point& b) {\n    return real(a) * imag(b) - imag(a) * real(b);\n}\n\n// 内積\nReal dot(const Point& a, const Point& b) {\n    return real(a) * real(b) + imag(a) * imag(b);\n}\n\n// 点の回転方向\n//          +1\n//          \n//  +2   a   0   b  -2\n//\n//          -1\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_C&lang=jp\nint ccw(const Point& a, Point b, Point c) {\n    b = b - a, c = c - a;\n    if (cross(b, c) > EPS) return +1;  // \"COUNTER_CLOCKWISE\"\n    if (cross(b, c) < -EPS) return -1; // \"CLOCKWISE\"\n    if (dot(b, c) < 0) return +2;      // \"ONLINE_BACK\"\n    if (norm(b) < norm(c)) return -2;  // \"ONLINE_FRONT\"\n    return 0;                         // \"ON_SEGMENT\"\n}\n\n// 線分同士の交差判定\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_B\nbool intersect(const Segment& s, const Segment& t) {\n    return ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 && ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0;\n}\n\nReal CalcDist(const Segment& s, const Point& p) {\n    double t = dot(s.b - s.a, p - s.a) / norm(s.b - s.a);\n    Point c = s.a + (s.b - s.a) * t;\n    Real res = 1000000.0;\n    if (t > -EPS && t < 1.0 + EPS) return sqrt(norm(p - c));\n    chmin(res, sqrt(norm(p - s.b)));\n    chmin(res, sqrt(norm(p - s.a)));\n    return res;\n}\n\nint main() {\n\n    int q;\n    cin >> q;\n    vector<Real> ans(q);\n\n    for (int i = 0; i < q; ++i) {\n        Point p0, p1, p2, p3;\n        cin >> p0 >> p1 >> p2 >> p3;\n        \n        // 交差する場合は0\n        if (intersect(Segment(p0, p1), Segment(p2, p3))) ans[i] = 0.0;\n        else {\n            // 端点だけを見る\n            // 点と線分の距離\n            Real dist = 1000000.0;\n            chmin(dist, CalcDist(Segment(p0, p1), p2));\n            chmin(dist, CalcDist(Segment(p0, p1), p3));\n            chmin(dist, CalcDist(Segment(p3, p2), p0));\n            chmin(dist, CalcDist(Segment(p3, p2), p1));\n            ans[i] = dist;\n        }\n    }\n\n    //for (int i = 0; i < q; ++i) cout << fixed << setprecision(11) << ans[i].real() << \" \" << ans[i].imag() << endl;\n    for (int i = 0; i < q; ++i) cout << fixed << setprecision(11) << ans[i] << endl;\n\n}\n"
  },
  {
    "language": "C++",
    "code": "#define loop(i, s, e) for(ll i = s;i < e;i++)\n\n#include <iostream>\n#include <iomanip>\n#include <set>\n#include <vector>\n#include <queue>\n#include <stack>\n#include <utility>\n#include <algorithm>\n#include <map>\n#include <cmath>\n\nusing namespace std;\n\ntypedef long long signed ll;\n\ntemplate<typename T>\nclass Vector2D {\npublic:\n    T x;\n    T y;\n\n    Vector2D() {\n        x = y = 0;\n    }\n\n    Vector2D(T x_, T y_) {\n        x = x_;\n        y = y_;\n    }\n\n    T operator*(const Vector2D<T> *e) {\n        return this->x * e->x + this->y * e->y;\n    }\n\n    Vector2D<T> operator-(const Vector2D<T> *e) {\n        return Vector2D<T>(this->x - e->x, this->y - e->y);\n    }\n\n    Vector2D<T> operator+(const Vector2D<T> *e) {\n        return Vector2D<T>(this->x + e->x, this->y + e->y);\n    }\n\n    T operator*(const Vector2D<T> e) {\n        return this->x * e.x + this->y * e.y;\n    }\n\n    Vector2D<T> operator-(const Vector2D<T> e) {\n        return Vector2D<T>(this->x - e.x, this->y - e.y);\n    }\n\n    Vector2D<T> operator+(const Vector2D<T> e) {\n        return Vector2D<T>(this->x + e.x, this->y + e.y);\n    }\n\n    Vector2D<T> operator*(const T r) {\n        return Vector2D<T>(this->x * r, this->y * r);\n    }\n\n    Vector2D<T> operator/(const T r) {\n        return Vector2D<T>(this->x / r, this->y / r);\n    }\n\n    double abs() {\n        return sqrt(x * x + y * y);\n    }\n\n    T abs2() {\n        return x * x + y * y;\n    }\n\n    T cross(Vector2D<T> e) {\n        if(x * e.y >= y * e.x) return (x * e.y) - (y * e.x);\n        else return (y * e.x) - (x * e.y);\n    }\n\n    double cos(Vector2D<T> e) {\n        return (e * (*this)) / (e.abs() * abs());\n    }\n\n    double sin(Vector2D<T> e) {\n        return (x * e.y - y * e.x) / (e.abs() * abs());\n    }\n};\n\ntypedef Vector2D<double> vdd;\n\ndouble dist__(double x0, double y0, double x1, double y1, double xx, double yy) {\n    int b = 0;\n    vdd p[3] = {vdd(x0, y0), vdd(x1, y1), vdd(xx, yy)};\n    if (((p[0] - p[1]) * (p[2] - p[1])) < 0) b = -1;\n    if (((p[1] - p[0]) * (p[2] - p[0])) < 0) b = 1;\n    if (b == 1) return (p[2] - p[0]).abs();\n    if (b == -1) return (p[2] - p[1]).abs();\n    return (p[1] - p[0]).cross(p[2] - p[0]) / (p[1] - p[0]).abs();\n}\n\ndouble dist(double x0, double y0, double x1, double y1, double xx, double yy){\n    double res = dist__(x0,y0,x1,y1,xx,yy);\n//    cout << res << endl;\n    return res;\n}\nint main() {\n    int q;\n    cin >> q;\n    loop(i, 0, q) {\n        int x[4], y[4];\n        vdd v[4];\n        loop(j, 0, 4) {\n            cin >> x[j] >> y[j];\n            v[j] = vdd(x[j], y[j]);\n        }\n        if ((v[0] - v[1]).sin(v[2]) * (v[0] - v[1]).sin(v[3]) < 0 && (v[2] - v[3]).sin(v[0]) * (v[2] - v[3]).sin(v[1]) < 0) cout << 0 << endl;\n        else\n            cout << setprecision(16)\n                 << min(min(dist(x[0], y[0], x[1], y[1], x[2], y[2]), dist(x[0], y[0], x[1], y[1], x[3], y[3])),\n                        min(dist(x[2], y[2], x[3], y[3], x[0], y[0]), dist(x[2], y[2], x[3], y[3], x[1], y[1])))\n                 << endl;\n    }\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n// 定義・定数\nusing P = complex<double>;\nconst double EPS = 1e-10;\n\nnamespace std {\n  // 点の比較演算子\n  bool operator < (const P &a, const P &b) {\n    return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n  }\n  \n  // 点の等価演算子\n  bool operator == (const P &a, const P &b) {\n    return fabs(a - b) < EPS;\n  }\n}\n\n// 直線\nstruct L : public vector<P> {\n  L(P &_a, P &_b) {\n    push_back(_a);\n    push_back(_b);\n  }\n};\n\n// 線分\nstruct S : L {\n  S(P &_a, P &_b) : L(_a, _b) {}\n};\n\n// 円\nstruct C {\n  P p;\n  double r;\n  \n  C(P _p, double _r) : p(_p), r(_r) {}\n};\n\n// 内積\ndouble dot(const P &a, const P &b) {\n  return real(conj(a) * b);\n}\n\n// 外積\ndouble cross(const P &a, const P &b) {\n  return imag(conj(a) * b);\n}\n\n// 直交判定\nbool isOrthogonal(const L &l, const L &m) {\n  return abs(dot(l[1] - l[0], m[1] - m[0])) < EPS;\n}\n\n// 平行判定\nbool isParallel(const L &l, const L &m) {\n  return abs(cross(l[1] - l[0], m[1] - m[0])) < EPS;\n}\n\n// 点の進行方向\nint ccw(P a, P b, P c) {\n  b -= a;\n  c -= a;\n  if (cross(b, c) > 0)   return +1;       // counter clockwise\n  if (cross(b, c) < 0)   return -1;       // clockwise\n  if (dot(b, c) < 0)     return +2;       // c--a--b on line\n  if (norm(b) < norm(c)) return -2;       // a--b--c on line\n  return 0;\n}\n\n// 交差判定\nbool intersectLL(const L &l, const L &m) {\n  return abs(cross(l[1] - l[0], m[1] - m[0])) > EPS || // non-parallel\n         abs(cross(l[1] - l[0], m[0] - l[0])) < EPS;   // same line\n}\nbool intersectLS(const L &l, const S &s) {\n  return cross(l[1] - l[0], s[0] - l[0]) *      // s[0] is left of l\n         cross(l[1] - l[0], s[1] - l[0]) < EPS; // s[1] is right of l\n}\nbool intersectLP(const L &l, const P &p) {\n  return abs(cross(l[1] - p, l[0] - p)) < EPS;\n}\nbool intersectSS(const S &s, const S &t) {\n  return ccw(s[0], s[1], t[0]) * ccw(s[0], s[1], t[1]) <= 0 &&\n         ccw(t[0], t[1], s[0]) * ccw(t[0], t[1], s[1]) <= 0;\n}\nbool intersectSP(const S &s, const P &p) {\n  return abs(s[0] - p) + abs(s[1] - p) - abs(s[1] - s[0]) < EPS; // triangle inequality\n}\n\n// 距離など\nP projection(const L &l, const P &p) {\n  double t = dot(p - l[0], l[0] - l[1]) / norm(l[0] - l[1]);\n  return l[0] + t * (l[0] - l[1]);\n}\nP reflection(const L &l, const P &p) {\n  return p + 2.0 * (projection(l, p) - p);\n}\ndouble distanceLP(const L &l, const P &p) {\n  return abs(p - projection(l, p));\n}\ndouble distanceLL(const L &l, const L &m) {\n  return intersectLL(l, m) ? 0 : distanceLP(l, m[0]);\n}\ndouble distanceLS(const L &l, const S &s) {\n  if (intersectLS(l, s)) return 0;\n  return min(distanceLP(l, s[0]), distanceLP(l, s[1]));\n}\ndouble distanceSP(const S &s, const P &p) {\n  const P r = projection(s, p);\n  if (intersectSP(s, r)) return abs(r - p);\n  return min(abs(s[0] - p), abs(s[1] - p));\n}\ndouble distanceSS(const S &s, const S &t) {\n  if (intersectSS(s, t)) return 0;\n  return min(min(distanceSP(s, t[0]), distanceSP(s, t[1])),\n             min(distanceSP(t, s[0]), distanceSP(t, s[1])));\n}\nP crosspoint(const L &l, const L &m) {\n  double A = cross(l[1] - l[0], m[1] - m[0]);\n  double B = cross(l[1] - l[0], l[1] - m[0]);\n  if (abs(A) < EPS && abs(B) < EPS) return m[0]; // same line\n  if (abs(A) < EPS) assert(false); // !!!PRECONDITION NOT SATISFIED!!!\n  return m[0] + B / A * (m[1] - m[0]);\n}\n\nint main() {\n  cin.tie(0);\n  ios::sync_with_stdio(false);\n  \n  int q;\n  cin >> q;\n  while (q--) {\n    double a, b, c, d, x, y, z, w;\n    cin >> a >> b >> c >> d >> x >> y >> z >> w;\n    P p0(a, b), p1(c, d), p2(x, y), p3(z, w);\n    S s(p0, p1), t(p2, p3);\n    \n    cout << fixed << setprecision(10) << distanceSS(s, t) << '\\n';\n  }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\n#include <cmath>\n#include <iomanip>\n\n\nusing namespace std;\n\n//-------------------------------------------------------------------------------------\n/*2点[(x1,y1),(x2,y2)]を入力し二点を通る直線ax+by+cの(a,b,c)を返す,  */\n/*x1==x2ならfalseを返す*/\n/*falseならばx=cの形の直線*/\nvoid straight_line_passing_through_the_two_points(double x1, double y1, double x2, double y2, double *a, double *b, double *c){\n    *a=(y2-y1);\n    *b=-(x2-x1);\n    *c=y2*(x2-x1)-x2*(y2-y1);\n}\n\n//-------------------------------------------------------------------------------------\n/*(x,y)を通るa1x+b1y+c1=0に垂直な直線a2x+b2y+c2=0を返す*/\nvoid vertical_straight_line(double x, double y, double a1, double b1, double c1, double *a2, double *b2, double *c2){\n    *a2 = -b1;\n    *b2 = a1;\n    *c2 = b1*x - a1*y;\n}\n\n\n//-------------------------------------------------------------------------------------\n/*2直線 a1x+b1y+c1=0 a2x+b2y+c2=0 の交点 (x,y)を返す*/\n/*2直線が平行であるならばfalseを返す*/\nbool intersection_and_parallel(double a1, double b1, double c1, double a2, double b2, double c2, double *x, double *y){\n    if(a1*b2==a2*b1)return false;//平行の判定\n    \n    *x = (b1*c2-b2*c1)/(a1*b2-a2*b1);\n    *y = (a2*c1-a1*c2)/(a1*b2-a2*b1);\n    \n    return true;\n}\n\n//-------------------------------------------------------------------------------------\n/* \n a1x+b1y+c1=0 と　a2x+b2y+c2=0 が\n 平行なら2\n 直交なら1\n それ以外は0\n を返す\n */\nint judges_whether_parallel_or_perpendicular(double a1, double b1, double c1, double a2, double b2, double c2){\n    if(a1*b2 == a2*b1)return 2;\n    if(a1*a2 + b1*b2 == 0)return 1;\n    return 0;\n}\n\n\n//-------------------------------------------------------------------------------------\n/*直線ax+by+c=0に対し　(x1,y1)と線対称な位置(x2,y2)を出力*/\n/*vertical_straight_lineを使用*/\n/*intersection_and_parallelを使用*/\nvoid line_symmetry(double a, double b, double c, double x1, double y1, double *x2, double *y2){\n    //垂直な直線を求める\n    double a2,b2,c2;\n    vertical_straight_line(x1, y1, a, b, c, &a2, &b2, &c2);\n    \n    //垂直な直線との交点を求める\n    double c_x, c_y;\n    intersection_and_parallel(a, b, c, a2, b2, c2, &c_x, &c_y);\n    *x2 = x1 + 2*(c_x-x1);\n    *y2 = y1 + 2*(c_y-y1);\n}\n\n\n\n//-------------------------------------------------------------------------------------\n/*2点(x1,y1), (x2,y2) の距離*/\ndouble distance_between_the_two_pointss(double x1,double y1, double x2, double y2){\n    return  sqrt(fabs((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)));\n}\n\n\n//-------------------------------------------------------------------------------------\n/* (x1,y1)から(x2,y2)へ伸ばした直線の角度を求める  */\ndouble angle_of_the_line(double x1, double y1, double x2, double y2){\n    return atan2(y2-y1, x2-x1);\n}\n\n//-------------------------------------------------------------------------------------\n/*(x1,y1)と(x2,y2)を両端に持つ線分と*/\n/*(x3,y3)と(x4,y4)を両端に持つ線分が*/\n/*交差するなら1 交差しないなら0を出力する*/\n/* straight_line_passing_through_the_two_pointsを使用 */\n/* intersection_and_parallelを使用 */\nint line_segment_cross_decision(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4){\n    double a1,b1,c1, a2,b2,c2;\n    straight_line_passing_through_the_two_points(x1, y1, x2, y2, &a1, &b1, &c1);\n    straight_line_passing_through_the_two_points(x3, y3, x4, y4, &a2, &b2, &c2);\n    double c_x,c_y;\n    bool is_parallel = intersection_and_parallel(a1, b1, c1, a2, b2, c2, &c_x, &c_y);\n    if(is_parallel==false){\n        if(a1*x3+b1*y3+c1==0){//一直線上にある.\n            if(min(x1,x2)<=x3&&x3<=max(x1,x2)&&min(y1,y2)<=y3&&y3<=max(y1,y2))return 1;\n            if(min(x1,x2)<=x4&&x4<=max(x1,x2)&&min(y1,y2)<=y4&&y4<=max(y1,y2))return 1;\n            if(min(x3,x4)<=x1&&x1<=max(x3,x4)&&min(y3,y4)<=y1&&y1<=max(y3,y4))return 1;\n            if(min(x3,x4)<=x2&&x2<=max(x3,x4)&&min(y3,y4)<=y2&&y2<=max(y3,y4))return 1;\n            \n\n\n        }\n        return 0;\n    }\n    if(x1>x2)swap(x1, x2);\n    if(x3>x4)swap(x3, x4);\n    if(y1>y2)swap(y1, y2);\n    if(y3>y4)swap(y3, y4);\n\n    if(x1<=c_x&&c_x<=x2&&x3<=c_x&&c_x<=x4){\n        if(y1<=c_y&&c_y<=y2&&y3<=c_y&&c_y<=y4)return 1;\n    }\n    return 0;\n    \n}\n\n\n\n//-------------------------------------------------------------------------------------\n/*点(p_x,p_y)と線分(x1,y1)(x2,y2)の距離*/\n/* straight_line_passing_through_the_two_points */\n/* vertical_straight_line */\n/* intersection_and_parallel */\ndouble distance_between_the_line_segment_and_point(double p_x, double p_y, double x1, double y1, double x2, double y2){\n    double a,b,c;//(x1,y1)(x2,y2)を通る直線\n    straight_line_passing_through_the_two_points(x1, y1, x2, y2, &a, &b, &c);\n    double a2,b2,c2;//直線ax+by+c=0に垂直な直線\n    double v_x, v_y;//二つの直線の交点\n    vertical_straight_line(p_x, p_y, a, b, c, &a2, &b2, &c2);\n    intersection_and_parallel(a, b, c, a2, b2, c2, &v_x, &v_y);\n    if(min(x1,x2)<v_x&&v_x<max(x1,x2)){//(v_x,v_y)は線分の中にある\n        return distance_between_the_two_pointss(p_x, p_y, v_x, v_y);\n    }else{//(v_x,v_y)は線分の外にある\n        double l1 = distance_between_the_two_pointss(p_x, p_y, x1, y1);\n        double l2 = distance_between_the_two_pointss(p_x, p_y, x2, y2);\n        return min(l1,l2);\n    }\n}\n\n\n//-------------------------------------------------------------------------------------\n/*線分(x1,y1)(x2,y2)と線分(x3,y3)(x4,y4)の距離*/\n\ndouble distance_between_two_line_segment(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4){\n    //ぶつかる場合\n    if(line_segment_cross_decision(x1, y1, x2, y2, x3, y3, x4, y4)){\n        return 0.0;\n    }\n    \n    //ぶつからない場合\n    double l1,l2,l3,l4;\n    l1=distance_between_the_line_segment_and_point(x1, y1, x3, y3, x4, y4);\n    l2=distance_between_the_line_segment_and_point(x2, y2, x3, y3, x4, y4);\n    l3=distance_between_the_line_segment_and_point(x3, y3, x1, y1, x2, y2);\n    l4=distance_between_the_line_segment_and_point(x4, y4, x1, y1, x2, y2);\n    return min(l1,min(l2,min(l3,l4)));\n}\n\n\n\nint main(int argc, const char * argv[]){\n    int q;\n    cin>>q;\n    for(int i=0; i<q; i++){\n        double x1,x2,x3,x4,y1,y2,y3,y4;\n        cin>>x1>>y1>>x2>>y2>>x3>>y3>>x4>>y4;\n        \n\n        cout<< fixed << setprecision(10)<<distance_between_two_line_segment(x1, y1, x2, y2, x3, y3, x4, y4)<<endl;\n        \n        \n    }\n}"
  },
  {
    "language": "C++",
    "code": "// #define _GLIBCXX_DEBUG\n#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i, n) for (int i = 0; i < (int)(n); i++)\n#define all(v) v.begin(), v.end()\n#define Graph vector< vector<int> >\ntypedef long long ll;\ntypedef pair<int, int> P;\nconst int INF = 1000000007;\n\nconst double EPS = 1e-10;\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nstruct Point{\n    double x, y;\n    Point(){}\n    Point(double x0, double y0){\n        x = x0; y = y0;\n    }\n\n    Point operator +(const Point &p){\n        return Point(x + p.x, y + p.y);\n    }\n    Point operator -(const Point &p){\n        return Point(x - p.x, y - p.y);\n    }\n    Point operator *(const double &a){\n        return Point(a * x, a * y);\n    }\n    Point operator /(const double &a){\n        return Point(x / a, y / a);\n    }\n\n    bool operator == (const Point &p){\n        return equals(x, p.x) && equals(y, p.y);\n    }\n\n    bool operator < (const Point &p){\n        return x != p.x ? x < p.x : y < p.y ;\n    }\n\n};\n\ndouble norm(Point p){\n    return p.x * p.x + p.y * p.y;\n}\n\ndouble v_abs(Point p){\n    return sqrt(norm(p));\n}\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b){\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b){\n    return a.x * b.y - a.y * b.x;\n}\n\n\nint ccw(Point p0, Point p1, Point p2){\n    int COUNTER_CLOCKWISE = 1;\n    int CLOCKWISE = -1;\n    int ON_SEGMENT = 0;\n    int ONLINE_FRONT = 2;\n    int ONLINE_BACK = -2;\n    Vector a = p1 - p0, b = p2 - p0;\n    if(cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n    else if(cross(a, b) < -EPS) return CLOCKWISE;\n    else if(dot(a, b) < -EPS) return ONLINE_BACK;\n    else if(norm(a) < norm(b)) return ONLINE_FRONT;\n    else return ON_SEGMENT;\n}\n\ndouble getDistance(Point p1, Point p2, Point p){\n    Vector a = p2 - p1, b = p - p1;\n    if(dot(a, b) < -EPS) return v_abs(b);\n\n    a = p1 - p2, b = p - p2;\n    if(dot(a, b) < -EPS) return v_abs(b);\n\n    return abs(cross(a, b)) / v_abs(a);\n}\n\nint main(){\n    int Q;\n    cin >> Q;\n    rep(i, Q){\n        Point p0, p1, p2, p3;\n        cin >> p0.x >> p0.y;\n        cin >> p1.x >> p1.y;\n        cin >> p2.x >> p2.y;\n        cin >> p3.x >> p3.y;\n        if(ccw(p0, p1, p2) * ccw(p0, p1, p3) <= 0 && ccw(p2, p3, p0) * ccw(p2, p3, p1) <= 0 ){\n            printf(\"%.10lf\\n\", 0.0);\n        } else {\n            double ans = min(min(getDistance(p0, p1, p2), getDistance(p0, p1, p3)),\n                         min(getDistance(p2, p3, p0), getDistance(p2, p3, p1)));\n            printf(\"%.10lf\\n\", ans);\n        }\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <vector>\n#include <algorithm>\n#include <iostream>\n#include <cstdio>\n#include <cmath>\n#include <climits>\n\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\n//???\nclass Point {\npublic:\n    double x, y;\n    \n    Point (double x = 0, double y = 0):x(x), y(y){}\n    Point operator + (Point p){return Point(x + p.x, y + p.y);}\n    Point operator - (Point p){return Point(x - p.x, y - p.y);}\n    Point operator * (double a){return Point(a * x, a * y);}\n    Point operator / (double a){return Point(x / a, y / a);}\n    \n    double norm(){return x*x + y*y;};\n    double absolute(){return sqrt(norm());};\n    \n    bool operator < (const Point &p) const{\n        return x != p.x ? x < p.x : y < p.y;\n    }\n    \n    bool operator == (const Point &p) const{\n        return equals(x, p.x) && equals(y, p.y);\n    }\n    \n};\ntypedef Point Vector;                               //????????????\ntypedef struct Segment{Point p1, p2;}Segment;       //??????\ntypedef Segment Line;                               //??´???\ntypedef struct Circle{Point c; double r;}Circle;    //???\ntypedef vector<Point> Polygon;                      //????§???¢\n//????????????a????????????\ndouble norm(Vector a){\n    return a.x * a.x + a.y * a.y;\n}\n//????????????a?????§??????\ndouble absolute(Vector a){\n    return sqrt(norm(a));\n}\n\n//????????????a,b?????????\ndouble dot(Vector a, Vector b){\n    return a.x * b.x + a.y * b.y;\n}\n//????????????a,b?????????\ndouble cross(Vector a, Vector b){\n    return a.x * b.y - a.y * b.x;\n}\n\n//????????????a??¨b?????´?????????\n//a??¨b?????´????????´??????????????????0?????????\nbool isOrthogonal(Vector a, Vector b){\n    return equals(dot(a,b), 0.0);\n}\n\n//????????????a??¨b???????????????\n//a??¨b?????´????????´??????????????????0?????????\nbool isParallel(Vector a , Vector b){\n    return equals(cross(a,b), 0.0);\n}\n\n//??????s(p1p2)???????????????p????°???±\nPoint project(Segment s, Point p){\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / norm(base);\n    return s.p1 + base * r;\n}\n\n//??????s(p1p2)???????§°?????¨?????????p???????±????\nPoint reflect(Segment s, Point p){\n    return p + (project(s, p) - p) * 2.0;\n}\n\n//???a,???b???????????¢\ndouble getDistance(Point a, Point b){\n    return absolute(a - b);\n}\n\n//??´???s??¨???p????????¢\ndouble getDistanceLP(Line l, Point p){\n    return abs(cross(l.p2 - l.p1, p - l.p1) / absolute(l.p2 - l.p1));\n}\n\n//??????s(?§????p1/??????p2)??¨???p????????¢d????±???????\n//??\\???????????????????????§??´?????????\n//??????????????????p2-p1??¨???????????????p-p1??????????§???????90???????????§????????´???????????????-90?????????????°?????????´?????????d??????p??¨???p1??¨????????¢\n//??????????????????p1-p2??¨???????????????p-p2??????????§???????90???????????§????????´???????????????-90?????????????°?????????´?????????d??????p??¨???p2??¨????????¢\n//??????????????\\???????????????????????´??????d??????p??¨??´???p1p2????????¢\ndouble getDistanceSP(Segment s, Point p){\n    if (dot(s.p2 - s.p1, p - s.p1) < 0.0) return absolute(p - s.p1);\n    if (dot(s.p1 - s.p2, p - s.p2) < 0.0) return absolute(p - s.p2);\n    return getDistanceLP(s, p);\n}\n\n\n//??????p0, p1, p2???????????????????????????p0p1???????????????p2??????????????????\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\nint ccw(Point p0, Point p1, Point p2){\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if(cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n    if(cross(a, b) < -EPS) return CLOCKWISE;\n    if(dot(a, b) < -EPS) return ONLINE_BACK;\n    if(norm(a) < norm(b)) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\n//??????S1(p1p2)??¨??????s2(p2p3)????????????????????????\nbool intersect(Point p1, Point p2, Point p3, Point p4){\n    return  ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0\n            &&\n            ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0;\n}\nbool intersect(Segment s1, Segment s2){\n    return intersect(s1.p1, s1.p2, s2.p1, s2.p1);\n}\n\n//??????s1??¨??????s2????????¢\n//??\\????????????????????¢????????§????????????????????????\n//????????????s1??¨??????s2????§????s2.p1????????¢\n//????????????s1??¨??????s2?????????s2.p2????????¢\n//????????????s2??¨??????s1????§????s1.p1????????¢\n//????????????s2??¨??????s1?????????s1.p2????????¢\ndouble getDistance(Segment s1, Segment s2){\n    if ( intersect(s1, s2) ) return 0.0;\n    return min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)), min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n    \n}\n\n//??????s1??¨??????s2?????????????±???????\nPoint getCrossPoint(Segment s1, Segment s2){\n    Vector base = s2.p2 - s2.p1;\n    double d1 = abs(cross(base, s1.p1 - s2.p1));\n    double d2 = abs(cross(base, s1.p2 - s2.p1));\n    double t = d1 / (d1 + d2);\n    return s1.p1 + (s1.p2 - s1.p1) * t;\n}\n\n//?????¨??????l?????????????±???????\npair<Point, Point> getCrossPoints(Circle c, Line l){\n    Vector pr = project(l, c.c);\n    Vector e = (l.p2 - l.p1) / absolute(l.p2 - l.p1);\n    double base = sqrt(c.r * c.r - norm(pr - c.c));\n    return make_pair(pr + e * base, pr - e * base);\n}\n\n//???c1??¨???c2?????????????±???????\nVector polar(double a, double r){\n    //??????a,?§????r???point????±???????\n    return Point(cos(r) * a, sin(r) * a);\n}\npair<Point, Point> getCrossPoints(Circle c1, Circle c2){\n    Vector v = c2.c - c1.c;\n    double d = absolute(v);\n    double a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d) );\n    double t = atan2(v.y, v.x);\n    return make_pair(c1.c + polar(c1.r, t+a), c1.c + polar(c1.r, t-a));\n}\n\n\n\nint main(){\n    \n    int x0, y0, x1, y1, x2, y2, x3, y3;\n    \n    int q;\n    \n    cin >> q;\n    \n    for (int i = 0; i < q; i++) {\n        cin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n        \n        Point p0 = Point(x0, y0);\n        Point p1 = Point(x1, y1);\n        Point p2 = Point(x2, y2);\n        Point p3 = Point(x3, y3);\n        \n        Segment s1 = {p0, p1};\n        Segment s2 = {p2, p3};\n        \n        double ans = getDistance(s1, s2);\n        \n        printf(\"%.8lf\\n\", ans);\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\nusing Real = double;\nconstexpr Real EPS = 1e-10;\nconstexpr Real INF = 1e18;\nconst Real PI = acos(-1);\n\nusing P = complex<Real>;\nint sgn(const Real a) {\n    return (a < -EPS ? -1 : (a > EPS ? +1 : 0));\n}\n\ninline bool EQ(Real a, Real b) {\n    return (abs(a - b) < EPS);\n}\n\ninline Real Get_Value(Real a) {\n    return (EQ(a, 0) ? 0 : a);\n}\n\nistream &operator>>(istream &is, P &p) {\n    Real a, b;\n    is >> a >> b;\n    p = P(a, b);\n    return is;\n}\nostream &operator<<(ostream &os, P &p) {\n    return os << fixed << setprecision(12) << Get_Value(p.real()) << \" \" << Get_Value(p.imag());\n}\n\nP operator*(const P &p, const Real &d) {\n    return P(real(p) * d, imag(p) * d);\n}\n\nbool operator==(const P &p, const P &q) {\n    return (EQ(p.real(), q.real()) && EQ(p.imag(), q.imag()));\n}\n\nReal dot(const P &a, const P &b) {\n    // ベクトル a,b の内積\n    return (a.real() * b.real() + a.imag() * b.imag());\n}\n\nReal cross(const P &a, const P &b) {\n    // 外積\n    return a.real() * b.imag() - a.imag() * b.real();\n}\n\nstruct Line {\n    // 直線\n    P a, b;\n\n    Line() = default;\n\n    Line(P a, P b) : a(a), b(b) {}\n\n    Line(Real A, Real B, Real C) // Ax + By = C\n    {\n        if(EQ(A, 0))\n            a = P(0, C / B), b = P(1, C / B);\n        else if(EQ(B, 0))\n            b = P(C / A, 0), b = P(C / A, 1);\n        else\n            a = P(0, C / B), b = P(C / A, 0);\n    }\n\n    friend ostream &operator<<(ostream &os, Line &p) {\n        return os << p.a << \" to \" << p.b;\n    }\n\n    friend istream &operator>>(istream &is, Line &a) {\n        return is >> a.a >> a.b;\n    }\n};\n\nstruct Segment : Line {\n    // 線分\n    Segment() = default;\n    Segment(P a, P b) : Line(a, b) {}\n};\n\nstruct Circle {\n    // 円 p が中心 r が半径\n    P p;\n    Real r;\n    Circle() = default;\n    Circle(P p, Real r) : p(p), r(r){};\n};\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_C\n// 点の回転方向\nint ccw(const P &a, P b, P c) {\n    b = b - a, c = c - a;\n    if(cross(b, c) > EPS) return +1;  // \"COUNTER_CLOCKWISE\" CがベクトルABの半時計方向にある\n    if(cross(b, c) < -EPS) return -1; // \"CLOCKWISE\" CがベクトルABの時計方向にある\n    if(dot(b, c) < 0) return +2;      // \"ONLINE_BACK\" Cが直線AB上かつAの方向にある\n    if(norm(b) < norm(c)) return -2;  // \"ONLINE_FRONT\" Cが直線AB上かつBの方向にある\n    return 0;                         // \"ON_SEGMENT\" Cが線分AB上に乗っている\n}\n\nbool is_orthogonal(const Line &a, const Line &b) {\n    // 2直線の直交判定\n    // 2つのベクトルの内積が0なら直交\n    return EQ(dot(a.a - a.b, b.a - b.b), 0.0);\n}\n\nbool is_parallel(const Line &a, const Line &b) {\n    // 2直線の平行判定\n    // 2つのベクトルの外積が0なら平行\n    return EQ(cross(a.b - a.a, b.a - b.b), 0.0);\n}\n\nbool is_point_on_line(const P &a, const P &b, const P &c) {\n    // 点cが直線a,b上にあるかどうか\n    // ab ベクトルと ac ベクトルが平行なら点cは直線a,b上にある\n    // 3点は同一直線状にあるともいえる\n    return EQ(cross(b - a, c - a), 0.0);\n}\n\nbool intersect(const Segment &s, const Segment &t) {\n    // 線分同士の交差判定\n    return ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 && ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0;\n}\n\nbool intersect(const Segment &s, const P &p) {\n    return ccw(s.a, s.b, p) == 0;\n}\n\nP projection(const Line &s, const P &p) {\n    Real t = dot(s.b - s.a, p - s.a) / norm(s.a - s.b);\n    return s.a + (s.b - s.a) * t;\n}\n\nP projection(const Segment &s, const P &p) {\n    return projection((Line)s, p);\n}\n\nP refrection(const Line &s, const P &p) {\n    return (projection(s, p) - p) * 2.0 + p;\n}\n\nP refrection(const Segment &s, const P &p) {\n    return refrection((Line)s, p);\n}\n\nReal distance(const P &p, const P &q) {\n    return Get_Value(abs(p - q));\n}\n\nReal distance(const Segment &s, const P &p) {\n    P r = projection(s, p);\n    if(intersect(s, r)) {\n        return distance(r, p);\n    } else {\n        return min(distance(s.a, p), distance(s.b, p));\n    }\n}\n\nReal distance(const Segment &s, const Segment &t) {\n    if(intersect(s, t)) {\n        return 0.0;\n    } else {\n        return min({distance(s, t.a), distance(s, t.b), distance(t, s.a), distance(t, s.b)});\n    }\n}\n\nint main() {\n    int n;\n    cin >> n;\n    while(n--) {\n        Segment a, b;\n        cin >> a >> b;\n        printf(\"%.12f\\n\",distance(a, b));\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n#define EPS 1e-10\n#define equals(a,b) (fabs( (a) - (b) )< EPS )\ntypedef struct point{\n\tdouble x,y;\n\tpoint(){};\n\tpoint(double x ,double y):x(x),y(y){};\n\tpoint operator + (point &p){ return point(x+p.x,y+p.y);\t}\n\tpoint operator - (point &p){ return point(x-p.x,y-p.y);\t}\n\tpoint operator * (point &p){ return point(x*p.x-y*p.y,x*p.y+y*p.x) ;}\n\tpoint operator * (double a){ return point(x*a,y*a);\t}\n\tpoint operator / (double a){ return point(x/a,y/a);\t}\n\t\n\tdouble abs() { return sqrt(norm()); }\n\tdouble norm() { return x*x+y*y; }\n\t\n\tbool operator < (const point &p) const { return x!=p.x ? x<p.x : y<p.y; }\n\tbool operator == (const point &p) const { return fabs(x-p.x)<EPS && fabs(y-p.y)<EPS; }\n}point;\ndouble abs(point a){return a.abs();}\ndouble norm(point a){return a.norm();}\n\ntypedef complex<double> C;\ntypedef struct { point s,e;} line;\n\nC convert(point a){ return C(a.x,a.y); }\npoint convert( C a){ return point(a.real(),a.imag() );}\ndouble dot(point a,point b){ return a.x*b.x+a.y*b.y ; } //内積　a・b\ndouble cross(point a,point b){ return a.x*b.y - a.y*b.x ; }//外積(z成分)　a×b\npoint vec(line l){return l.e-l.s;}\nline make(point s,point e){\n\tline res; res.s=s; res.e=e;\n\treturn res;\n}\npoint make(){ \n\tdouble x,y; cin>>x>>y;\n       \treturn point(x,y);\n}\n//直交\nbool isorthogonal(point a,point b){ return equals(dot(a,b), 0.0); }\nbool isorthogonal(line l1,line l2){ return isorthogonal(vec(l1),vec(l2)); }\n//平行\nbool isparallel(point a,point b){ return equals(cross(a,b),0.0); }\nbool isparallel(line l1,line l2){ return isparallel(vec(l1),vec(l2)); }\n//射影\npoint project(line s,point p){\n\tpoint base = vec(s);\n\tdouble r=dot(p-s.s,base)/base.norm();\n\tbase = base*r;\n\treturn s.s+base;\n}\n//反射\npoint reflect(line l,point p){\n\tpoint tmp=project(l,p)-p;\n\ttmp= tmp*2.0;\n\treturn p+tmp;\n\n}\n//交差判定\n\nint ccw(point p0,point p1,point p2){\n\tpoint a = p1-p0;\n\tpoint b = p2-p0;\nif(cross(a,b)>EPS) return 1;//counter_clockwise\nif(cross(a,b)<-EPS) return -1;//clockwise\nif(dot(a,b)<-EPS)return 2;//online_back\nif(a.norm()<b.norm() ) return -2;//online_front\nreturn 0;//on_segment\n}\n// line p1-p2 line p3-p4\nbool intersect(point p1,point p2,point p3,point p4){\n\treturn (ccw(p1,p2,p3)*ccw(p1,p2,p4)<=0 && ccw(p3,p4,p1)*ccw(p3,p4,p2)<=0 ); \n}\n// line l1,l2\nbool intersect(line l1,line l2){ return intersect(l1.s,l1.e,l2.s,l2.e); }\n\n\n//距離\n//point-point\ndouble distance(point a,point b){ return abs(a-b); }\n//point-line(直線）\ndouble distance2(line l,point p){\n\treturn abs(cross(vec(l),p-l.s)/abs(l.e-l.s));\n}\n//point-line(線分)\ndouble distance(line l,point p){\n\tif( dot(vec(l),p-l.s) <0.0 ) return abs(p-l.s);\n\tif( dot(l.s-l.e,p-l.e) <0.0 ) return abs(p-l.e);\n\treturn distance2(l,p);\n}\n//line-line\ndouble distance(line l1,line l2){\n\tif(intersect(l1,l2))\treturn 0.0;\n\treturn min(min(distance(l1,l2.s),distance(l1,l2.e) ), min(distance(l2,l1.s),distance(l2,l1.e) ) );\n}\n\n//交点\npoint crosspoint(line l1,line l2){\n\tpoint base = vec(l2);\n\tdouble d1 = abs(cross(base,l1.s-l2.s) );\n\tdouble d2 = abs(cross(base,l1.e-l2.s) );\n\tdouble t = d1/(d1+d2);\n\tpoint tmp = vec(l1)*t;\n\treturn l1.s+tmp;\n}\n\nint main(){\nint q;\ncin>>q;\nfor(int i=0;i<q;i++){\n\tpoint p0=make(),p1=make(),p2=make(),p3=make();\n\tline l0 = make(p0,p1) ,l1 = make(p2,p3);\n\tprintf(\"%0.10lf\\n\",distance(l0,l1) );\n}\n\nreturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<algorithm>\n#include<cmath>\n#include<vector>\n#include<queue>\n\nusing namespace std;\ntypedef long long LL;\n\nconst double Pi = acos(-1.0);\nconst int INf = 0x7fffffff;\nconst double eps = 1e-9;\n\nint sgn(double d) {\n    if(fabs(d) < eps)\n        return 0;\n    if(d > 0)\n        return 1;\n    return -1;\n}\n\nint dcmp(double x, double y) {\n    if(fabs(x - y) < eps)\n        return 0;\n    if(x > y)\n        return 1;\n    return -1;\n}\n\nstruct Point {\n    double x, y;\n    Point(double _x = 0, double _y = 0):x(_x), y(_y){}\n};\n\ntypedef Point Vector;\n\nVector operator + (Vector A, Vector B) {\n    return Vector(A.x + B.x, A.y + B.y);\n}\n\nVector operator - (Point A, Point B) {\n    return Vector(A.x - B.x, A.y - B.y);\n}\n\nVector operator * (Vector A, double p) {\n    return Vector(A.x * p, A.y * p);\n}\n\nVector operator / (Vector A, double p) {\n    return Vector(A.x / p, A.y / p);\n}\n\nbool operator == (const Point &a, const Point &b) {\n    if(sgn(a.x-b.x) == 0 && sgn(a.y-b.y) == 0)\n        return true;\n    return false;\n}\n\ndouble Dot(Vector A, Vector B) {\n    return A.x * B.x + A.y * B.y;\n}\n\ndouble Cross(Vector A, Vector B) {\n    return A.x * B.y - B.x * A.y;\n}\n\ndouble Length(Vector A) {\n    return sqrt(Dot(A, A));\n}\n\ndouble Angle(Vector A, Vector B) {\n    return acos(Dot(A, B) / Length(A) / Length(B));\n}\n\ndouble Area2(Point A, Point B, Point C) {\n    return Cross(B - A, C - A);\n}\n\nVector Rotate(Vector A, double rad) { // 逆时针旋转rad\n    return Vector(A.x * cos(rad) - A.y * sin(rad), A.x * sin(rad) - A.y * cos(rad));\n}\n\nVector Normal(Vector A) {      //A左转90°的单位法向量\n    double L = Length(A);\n    return Vector(-A.y / L, A.x / L);\n}\n\nbool ToLeftTest(Point a, Point b, Point c) {\n    return Cross(b - a, c - a) > 0;\n}\n\nstruct Line {\n    Point v, p;\n    Line(Point v, Point p) : v(v), p(p){}\n    Point point(double t) {\n        return v + (p - v) * t;\n    }\n};\n\nPoint GetLineIntersection(Point P, Vector v, Point Q, Vector w) {\n    Vector u = P - Q;\n    double t = Cross(w, u) / Cross(v, w);\n    return P + v * t;\n}\n\ndouble DistanceToLine(Point P, Point A, Point B) {\n    Vector v1 = B - A, v2 = P - A;\n    return fabs(Cross(v1, v2) / Length(v1));\n}\n\n\ndouble DistanceToSegment(Point P, Point A, Point B) {\n    if(A == B)\n        return Length(P - A);\n    Vector v1 = B - A, v2 = P - A, v3 = P - B;\n    if(sgn(Dot(v1, v2)) < 0)\n        return Length(v2);\n    if(sgn(Dot(v1, v3)) > 0)\n        return Length(v3);\n    return DistanceToLine(P, A, B);\n}\n\nPoint GetLineProjection(Point P, Point A, Point B) {\n    Vector v = B - A;\n    return A + v * (Dot(v, P - A) / Dot(v, v));\n}\n\nbool OnSegment(Point p, Point a1, Point a2){\n    return sgn(Cross(a1-p, a2-p)) == 0 && sgn(Dot(a1-p, a2-p)) < 0;\n}\n\nint PointAtSegment(Point p, Point a, Point b) {\n    Vector v1 = p - a, v2 = b - a;\n    if(sgn(Cross(v1, v2)) == -1)\n        return -1;\n    else if(sgn(Cross(v1, v2)) == 1)\n        return 1;\n    else if(sgn(Dot(v1, v2)) == -1)\n        return -1;\n    else if(sgn(Length(v1) - Length(v2)) == 1)\n        return 1;\n    return 0;\n}\n\nbool SegmentProperIntersection(Point a1, Point a2, Point b1, Point b2){\n    return PointAtSegment(b1, a1, a2) * PointAtSegment(b2, a1, a2) <= 0 && PointAtSegment(a1, b1, b2) * PointAtSegment(a2, b1, b2) <= 0;\n}\n\ndouble DistancePointToSegment(Point p, Point a, Point b) {\n    if(sgn(Dot(p - a, b - a)) == -1)\n        return Length(p - a);\n    else if(sgn(Dot(p - b, a - b)) == -1)\n        return Length(p - b);\n    return DistanceToLine(p, a, b);\n}\n\ndouble SegmentsDistance(Point a1, Point a2, Point b1, Point b2) {\n    if(SegmentProperIntersection(a1, a2, b1, b2))\n        return 0;\n    return min(min(DistancePointToSegment(a1, b1, b2), DistancePointToSegment(a2, b1, b2)), min(DistancePointToSegment(b1, a1, a2), DistancePointToSegment(b2, a1, a2)));\n}\n\nint main() {\n    Point p0, p1, p2, p3;\n    Vector v1, v2;\n    int q;\n    scanf(\"%d\", &q);\n    while(q--) {\n        scanf(\"%lf%lf%lf%lf%lf%lf%lf%lf\", &p0.x, &p0.y, &p1.x, &p1.y, &p2.x, &p2.y, &p3.x, &p3.y);\n        printf(\"%.10f\\n\", SegmentsDistance(p0, p1, p2, p3));\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <limits>\n#include <algorithm>\n#include <vector>\n#include <deque>\n#include <queue>\n#include <list>\n#include <stack>\n#include <string>\n#include <functional>\n#include <numeric>\n#include <map>\n#include <set>\n#include <cstdlib>\n#include <bitset>\n#include <unordered_map>\n#include <random>\n#define _USE_MATH_DEFINES\n#include <cmath>\n#include <complex>\n#include <cfloat>\n\nusing namespace std;\n\n#define INFD numeric_limits<double>::infinity()\n// #define INF (int)1e8\n// #define INFLL (long long)1e15\n#define Loop(i, n) for(int i = 0; i < (int)n; i++)\n#define Loop1(i, n) for(int i = 1; i <= (int)n; i++)\n#define Loopr(i, n) for(int i = (int)n - 1; i >= 0; i--)\n#define Loopr1(i, n) for(int i = (int)n; i >= 1; i--)\n#define bitmanip(m,val) static_cast<bitset<(int)m>>(val)\ntypedef long long int ll;\ntypedef vector<int> vi;\ntypedef vector<vector<int>> vvi;\ntypedef pair<int, int> P;\ntypedef vector<ll> vll;\ntypedef vector<vector<ll>> vvll;\n\n/*******************************************************/\n\nnamespace geometry {\n  struct coordinate {\n    double x, y;\n    bool operator<(const coordinate & another) const {\n      return x != another.x ? x < another.x : y < another.y;\n    }\n  };\n  struct line {\n    double a, b, c;\n    pair<double, double> domain; // if b == 0, domain means range \n  };\n  enum linetype {\n    LINE, HALFLINE, SEGMENT\n  };\n  coordinate projection(coordinate, line);\n  double Euclid_dist(coordinate p, coordinate q) {\n    return sqrt((p.x - q.x) * (p.x - q.x) + (p.y - q.y) * (p.y - q.y));\n  }\n  // ax + by + c = 0\n  line make_line(double a, double b, double c, pair<double, double> domain = { -INFD, INFD }) {\n    return{ a,b,c,domain };\n  }\n  // line from p through q when type is HALFLINE\n  line make_line_through(coordinate p, coordinate q, linetype type = LINE) {\n    line ret = { NAN, NAN, NAN,{ NAN,NAN } };\n    if (p.x == q.x && p.y == q.y) return ret;\n    else {\n      if (p.x == q.x) {\n        ret = { 1, 0, -p.x,{ -INFD, INFD } };\n        switch (type) {\n        case SEGMENT:\n          if (p.y > q.y) ret.domain = { q.y, p.y };\n          else ret.domain = { p.y, q.y };\n          return ret;\n        case HALFLINE:\n          if (p.y > q.y) ret.domain = { -INFD, p.y };\n          else ret.domain = { p.y, INFD };\n          return ret;\n        case LINE:\n          return ret;\n        }\n      }\n      else {\n        ret = { (q.y - p.y), (p.x - q.x), q.x * p.y - p.x * q.y,{ -INFD, INFD } };\n        switch (type) {\n        case SEGMENT:\n          if (p.x > q.x) ret.domain = { q.x, p.x };\n          else ret.domain = { p.x, q.x };\n          return ret;\n        case HALFLINE:\n          if (p.x > q.x) ret.domain = { -INFD, p.x };\n          else ret.domain = { p.x, INFD };\n          return ret;\n        case LINE:\n          return ret;\n        }\n      }\n    }\n  }\n  // line through p\n  line make_line_from_slope(double a, double b, coordinate p) {\n    double c = -(a * p.x + b * p.y);\n    return{ a, b, c,{ -INFD, INFD } };\n  }\n  // get y when substituting x for l\n  double subst_x(double x, line l) {\n    if (l.b == 0) {\n      return -l.c / l.a;\n    }\n    else {\n      return -(l.a * x + l.c) / l.b;\n    }\n  }\n  // get x when substituting y for l\n  double subst_y(double y, line l) {\n    if (l.a == 0) {\n      return -l.c / l.b;\n    }\n    else {\n      return -(l.b * y + l.c) / l.a;\n    }\n  }\n  class Two_Lines {\n  private:\n    line l;\n    line m;\n    coordinate crosspoint; // (NAN, NAN) when not existing\n    bool in_range(coordinate p, line l) {\n      if (l.b == 0) {\n        if (l.domain.first <= p.y && p.y <= l.domain.second) return true;\n        else return false;\n      }\n      else {\n        if (l.domain.first <= p.x && p.x <= l.domain.second) return true;\n        else return false;\n      }\n    }\n  public:\n    bool is_intersect; // include having common interval\n    bool is_parallel; // include having common interval\n    bool is_orthogonal;\n    Two_Lines(line l, line m) {\n      Two_Lines::l = l;\n      Two_Lines::m = m;\n      is_intersect = false;\n      is_parallel = false;\n      is_orthogonal = false;\n      crosspoint = { NAN, NAN };\n      double dn = l.a * m.b - m.a * l.b;\n      if (dn == 0) {\n        is_parallel = true;\n        if (l.a * m.c - m.a * l.c);\n        else if (l.b * m.c - m.b * l.c);\n        else {\n          if (l.domain.first <= m.domain.second && m.domain.first <= l.domain.second) is_intersect = true;\n          else is_intersect = false;\n        }\n      }\n      else {\n        if (!(l.a * m.a + l.b * m.b)) is_orthogonal = true;\n        crosspoint.x = (l.b * m.c - m.b * l.c) / dn;\n        crosspoint.y = (m.a * l.c - l.a * m.c) / dn;\n        if (in_range(crosspoint, l) && in_range(crosspoint, m)) {\n          is_intersect = true;\n        }\n        else {\n          crosspoint = { NAN, NAN };\n        }\n      }\n    }\n    double get_distance() {\n      if (is_intersect) return 0;\n      else {\n        double ret = INFD;\n        coordinate p[2], q[2];\n        if (l.b == 0) {\n          p[0] = { subst_x(l.domain.first, l), l.domain.first };\n          p[1] = { subst_x(l.domain.second, l), l.domain.second };\n        }\n        else {\n          p[0] = { l.domain.first, subst_y(l.domain.first, l) };\n          p[1] = { l.domain.second, subst_y(l.domain.second, l) };\n        }\n        if (m.b == 0) {\n          q[0] = { subst_x(m.domain.first, m), m.domain.first };\n          q[1] = { subst_x(m.domain.second, m), m.domain.second };\n        }\n        else {\n          q[0] = { m.domain.first, subst_y(m.domain.first, m) };\n          q[1] = { m.domain.second, subst_y(m.domain.second, m) };\n        }\n        Loop(i, 2) {\n          ret = min(ret, Euclid_dist(projection(p[i], m), p[i]));\n          ret = min(ret, Euclid_dist(projection(q[i], l), q[i]));\n          Loop(j, 2) {\n            ret = min(ret, Euclid_dist(p[i], q[j]));\n          }\n        }\n        return ret;\n      }\n    }\n    coordinate get_crosspoint() {\n      return crosspoint;\n    }\n  };\n  double poligon_area(vector<coordinate> vp) {\n    double ret = 0;\n    int n = vp.size();\n    if (n <= 2) return 0;\n    vp.push_back(vp[0]);\n    Loop(i, n) {\n      ret += vp[i].x * vp[i + 1].y - vp[i + 1].x * vp[i].y;\n    }\n    ret = abs(ret) / 2;\n    return ret;\n  }\n  // solve q on l such that pq is orthogonal to l\n  coordinate projection(coordinate p, line l) {\n    line m = make_line_from_slope(l.b, -l.a, p);\n    Two_Lines twl(l, m);\n    return twl.get_crosspoint();\n  }\n}\n\nint main() {\n  using namespace geometry;\n  int q; cin >> q;\n  Loop(i, q) {\n    coordinate p, q;\n    cin >> p.x >> p.y >> q.x >> q.y;\n    line l = make_line_through(p, q, SEGMENT);\n    cin >> p.x >> p.y >> q.x >> q.y;\n    line m = make_line_through(p, q, SEGMENT);\n    Two_Lines twl(l, m);\n    cout << setprecision(16) << twl.get_distance() << endl;\n  }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>           // printf(), scanf()\n#include <cmath>            // fabs(), sqrt()\n#include <algorithm>        // min()\n\nusing namespace std;\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nstatic const double EPS = 1e-10;\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nclass Point\n{\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0): x(x), y(y) {}\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n};\n\nstruct Segment\n{\n\tPoint p1, p2;\n};\n\ntypedef Point Vector;\ntypedef Segment Line;\n\ndouble\nnorm(Vector a)\n{\n\treturn a.x * a.x + a.y * a.y;\n}\n\ndouble\nabs(Vector a)\n{\n\treturn sqrt(norm(a));\n}\n\ndouble\ndot(Vector a, Vector b)\n{\n\treturn a.x * b.x + a.y * b.y;\n}\n\n\ndouble\ncross(Vector a, Vector b)\n{\n\treturn a.x * b.y - a.y * b.x;\n}\n\nint\nccw(Point p0, Point p1, Point p2)\n{\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\n\tif (cross(a, b) > EPS)\n\t\treturn COUNTER_CLOCKWISE;\n\n\tif (cross(a, b) < -EPS)\n\t\treturn CLOCKWISE;\n\n\tif (dot(a, b) < -EPS)\n\t\treturn ONLINE_BACK;\n\n\tif (norm(a) < norm(b))\n\t\treturn ONLINE_FRONT;\n\n\treturn ON_SEGMENT;\n}\n\nbool\nintersect(Point p1, Point p2, Point p3, Point p4)\n{\n\treturn (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n\t        ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\n\nbool\nintersect(Segment s1, Segment s2)\n{\n\treturn intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\ndouble\ngetDistanceLP(Line l, Point p)\n{\n\treturn abs(cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1));\n}\n\ndouble\ngetDistanceSP(Segment s, Point p)\n{\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0)\n\t\treturn abs(p - s.p1);\n\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0)\n\t\treturn abs(p - s.p2);\n\n\treturn getDistanceLP(s, p);\n}\n\ndouble\ngetDistance(Segment s1, Segment s2)\n{\n\tif (intersect(s1, s2))\n\t\treturn 0.0;\n\n\treturn min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)), min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\nint\nmain(int argc, char** argv)\n{\n\tint n;\n\n\tscanf(\"%d\", &n);\n\twhile (n--)\n\t{\n\t\tint s1x, s1y, s2x, s2y;\n\t\tint t1x, t1y, t2x, t2y;\n\t\tSegment s1, s2;\n\n\t\tscanf(\"%d %d %d %d %d %d %d %d\", &s1x, &s1y, &s2x, &s2y, &t1x, &t1y, &t2x, &t2y);\n\t\ts1.p1.x = s1x, s1.p1.y = s1y;\n\t\ts1.p2.x = s2x, s1.p2.y = s2y;\n\t\ts2.p1.x = t1x, s2.p1.y = t1y;\n\t\ts2.p2.x = t2x, s2.p2.y = t2y;\n\t\tprintf(\"%.10f\\n\", getDistance(s1, s2));\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> P;\ndouble eps=1e-8;\nbool eq(double a,double b){return (b-a<eps&&a-b<eps);}\ndouble cross(P a,P b){return real(b*conj(a));}\ndouble dot(P a,P b){return imag(b*conj(a));}\nP project(P a,P b,P c){b-=a;c-=a;return a+b*real(c/b);}\nP reflect(P a,P b,P c){b-=a;c-=a;return a+conj(c/b)*b;}\nint ccw(P a,P b,P c){\n  b-=a,c-=a,a=c*conj(b);\n  if(a.imag()>eps)return 1;//ccw\n  if(a.imag()<eps)return -1;//cw\n  if(a.real()<-eps)return 2;//ob\n  if(abs(b)<abs(c)+eps)return -2;//of\n  return 0;//os\n}\n\n//segment ab , point c\ndouble dist(P a,P b,P c){\n  if(dot(b-a,c-a)<0)return abs(c-a);\n  if(dot(a-b,c-b)<0)return abs(c-b);\n  return imag((c-a)*conj(b-a))/abs(b-a);\n}\n\nbool isintersect(P a,P b,P c,P d){\n  return ((ccw(a,b,c)*ccw(a,b,d)<=0)&&(ccw(c,d,a)*ccw(c,d,b)<=0));\n}\n\n//segment ab , segment cd\nP intersect(P a,P b,P c,P d){\n  a-=d;b-=d;c-=d;\n  return d+a+(b-a)*imag(a/c)/imag(a/c-b/c);\n}\n\ndouble dist(P a,P b,P c,P d){\n  if(isintersect(a,b,c,d))return 0;\n  return min(min(abs(a-c),abs(a-d)),min(abs(b-c),abs(b-d)));\n}\n\nint main(){\n  int T;\n  cin>>T;\n  while(T--){\n    double ax,ay,bx,by,cx,cy,dx,dy;\n    cin>>ax>>ay>>bx>>by>>cx>>cy>>dx>>dy;\n    printf(\"%.8f\\n\",dist( P(ax,ay) , P(bx,by) , P(cx,cy) , P(dx,dy) ) );\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<climits>\n#include<iomanip>\n#include<cstdio>\n#include<vector>\n#include<queue>\n#include<stack>\n#include<cmath>\n#include<list>\n#include<map>\n#include<set>\nusing namespace std;\n\ntypedef vector<int> VI;\ntypedef vector<VI> VVI;\ntypedef vector<string> VS;\ntypedef stack<int> SI;\ntypedef queue<int> QI;\ntypedef list<int> LI;\ntypedef pair<int,int> PII;\ntypedef long long LL;\n\n#define d(x)  cout<<#x<<\" = \"<<(x)<<endl;\n#define ALL(a)  (a).begin(),(a).end()\n#define RALL(a) (a).rbegin(), (a).rend()\n#define PB push_back\n#define MP make_pair\n#define EMP empty()\n#define SZ(a) int((a).size())\n#define EACH(i,c) for(typeof((c).begin()) i=(c).begin(); i!=(c).end(); ++i)\n#define REACH(i,c) for(typeof((c).rbegin()) i=(c).rbegin(); i!=(c).rend(); ++i)\n#define EXIST(s,e) ((s).find(e)!=(s).end())\n#define SORT(c,n) sort(c,c+n)\n#define VSORT(c) sort((c).begin(),(c).end())\n#define FOR(i,a,b) for(int i=(a);i<(b);++i)\n#define REP(i,n)  FOR(i,0,n)\n#define DFOR(i,b,a) for(int i=(b)-1;i>=(a);--i)\n#define DREP(i,n) DFOR(i,n,0)\n#define INF 1000000000\n#define PI  acos(-1.0)\n////////////////////////////////////////////////\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\nclass Vector\n{\npublic:\n\tdouble x,y;\n\tVector(double x=0,double y=0):x(x),y(y){}\n\t\n\tVector operator + (Vector p){return Vector(x+p.x,y+p.y);}\n\tVector operator - (Vector p){return Vector(x-p.x,y-p.y);}\n\tVector operator * (double a){return Vector(x*a,y*a);}\n\tVector operator / (double a){return Vector(x/a,y/a);}\n\t\n\tdouble abs(){return sqrt(norm());}\n\tdouble norm(){return x*x+y*y;}\n\t\n\tbool operator <  (const Vector &p)const{return x!=p.x?x<p.x:y<p.y;}\n\tbool operator == (const Vector &p)const{return fabs(x-p.x)<EPS && fabs(y-p.y<EPS);}\n};\n\ndouble dot(Vector a,Vector b){return a.x*b.x+a.y*b.y;}\ndouble cross(Vector a,Vector b){return a.x*b.y-b.x*a.y;}\n\nint ccw(Vector p0,Vector p1,Vector p2)\n{\n\tVector a=p1-p0;\n\tVector b=p2-p0;\n\tif(cross(a,b)>EPS)return 1;//???????¨???????\n\tif(cross(a,b)<-EPS)return -1;//????¨???????\n\tif(dot(a,b)<-EPS)return 2;//p0?????????\n\tif(a.norm()<b.norm())return -2;//p1????\\\\\n\treturn 0;//?????????\n}\n\nbool intersect(Vector p0,Vector p1,Vector p2,Vector p3)\n{\n\treturn (ccw(p0,p1,p2)*ccw(p0,p1,p3)<=0&&ccw(p2,p3,p0)*ccw(p2,p3,p1)<=0);\n}\n\nint main()\n{\n\tint n;cin>>n;\n\tVector p[4];\n\tcout<<fixed<<setprecision(10);\n\tREP(i,n)\n\t{\n\t\tREP(j,4)cin>>p[j].x>>p[j].y;\n\t\tif(intersect(p[0],p[1],p[2],p[3])){cout<<0<<endl;continue;}\n\t\tdouble a,b,c,d;\n\t\tif(dot(p[1]-p[0],p[2]-p[0])>0&&dot(p[0]-p[1],p[2]-p[1])>0)\n\t\t{\n\t\t\ta=cross(p[1]-p[0],p[2]-p[0])/(p[1]-p[0]).abs();\n\t\t}\n\t\telse\n\t\t{\n\t\t\ta=min((p[2]-p[0]).abs(),(p[2]-p[1]).abs());\n\t\t}\n\t\t\n\t\tif(dot(p[1]-p[0],p[3]-p[0])>0&&dot(p[0]-p[1],p[3]-p[1])>0)\n\t\t{\n\t\t\ta=cross(p[1]-p[0],p[3]-p[0])/(p[1]-p[0]).abs();\n\t\t}\n\t\telse\n\t\t{\n\t\t\ta=min((p[3]-p[0]).abs(),(p[3]-p[1]).abs());\n\t\t}\n\t\t\n\t\tif(dot(p[3]-p[2],p[0]-p[2])>0&&dot(p[2]-p[3],p[0]-p[3])>0)\n\t\t{\n\t\t\ta=cross(p[3]-p[2],p[0]-p[2])/(p[3]-p[2]).abs();\n\t\t}\n\t\telse\n\t\t{\n\t\t\ta=min((p[0]-p[2]).abs(),(p[0]-p[3]).abs());\n\t\t}\n\t\t\n\t\tif(dot(p[3]-p[2],p[1]-p[2])>0&&dot(p[2]-p[3],p[1]-p[3])>0)\n\t\t{\n\t\t\ta=cross(p[3]-p[2],p[1]-p[2])/(p[3]-p[2]).abs();\n\t\t}\n\t\telse\n\t\t{\n\t\t\ta=min((p[1]-p[2]).abs(),(p[1]-p[3]).abs());\n\t\t}\n\t\t\n\t\tcout<<min(min(a,b),min(c,d))<<endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <cstdio>\n#include <cmath>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals( A, B ) (fabs((A) - (B)) < EPS)\n\nclass Point {\npublic:\n    double x, y;\n    Point( double x = 0, double y = 0 ): x(x), y(y) {}\n    \n    Point operator + ( Point p ) { return Point( x + p.x, y + p.y ); }\n    Point operator - ( Point p ) { return Point( x - p.x, y - p.y ); }\n    Point operator * ( double a ) { return Point( a * x, a * y ); }\n    Point operator / ( double a ) { return Point( x / a, y / a ); }\n\n    double abs() { return sqrt( norm() ); }\n    double norm() { return x * x + y * y; }\n\n    bool operator < ( const Point &p ) const {\n\treturn ( x != p.x ) ? x < p.x : y < p.y;\n    }\n\n    bool operator == ( const Point &p ) const {\n\treturn equals( x, p.x ) && equals( y, p.y ); \n    }\n\n    double dot( Point a ) { return x * a.x + y * a.y; }\n    double cross( Point a ) { return x * a.y - y * a.x; }\n    double distance( Point a ) {\n\treturn (*this - a).abs();\n    }\n};\n\ntypedef Point Vector;\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nclass Line {\npublic:\n    Point p1, p2;\n    Line( Point p1 = Point(), Point p2 = Point() ): p1(p1), p2(p2){}\n    // ?????´????????????( cos = 0 )\n    bool isOrthogonal( Line a ) {\n\treturn equals( 0.0, (p1 - p2).dot( a.p1 - a.p2 ) );\n    }\n    // ??????????????????( sin = 0 )\n    bool isParallel( Line a ) {\n\treturn equals( 0.0, (p1 - p2).cross( a.p1 - a.p2 ) );\n    }\n\n    Point projection( Point p ) {\n\tVector v12 = p2 - p1;\n\tdouble r = v12.dot( p - p1 ) / v12.norm();\n\treturn p1 + v12 * r;\n    }\n\n    Point reflection( Point p ) {\n\treturn p + ( projection( p ) - p ) * 2.0;\n    }\n\n    double distance( Point p ) {\n\tVector v12 = this->p2 -this->p1;\n\tVector v10 = p - this->p1;\n\t\n\treturn abs( v12.cross( v10 ) / v12.abs() );\n    }\n\n    double distanceSP( Point p ) {\n\tif ( (p - this->p1).dot( this->p2 - this->p1 ) < 0.0 ) {\n\t    return this->p1.distance( p );\n\t} else if ( (p - this->p2).dot( this->p1 - this->p2 ) < 0.0 ) {\n\t    return this->p2.distance( p );\n\t}\n\telse {\n\t    return distance( p );\n\t}\n    }\n\n    int ccw( Point p ) {\n\tVector a = p2 - p1;\n\tVector b = p - p1;\n\tif ( a.cross( b ) > EPS ) return COUNTER_CLOCKWISE;\n\telse if ( a.cross( b ) < -EPS ) return CLOCKWISE;\n\telse if ( a.dot( b ) < -EPS ) return ONLINE_BACK;\n\telse if ( a.norm() < b.norm() ) return ONLINE_FRONT;\n\telse return ON_SEGMENT;\n    }\n\n    bool intersect( Line l ) {\n\treturn ( ( ccw( l.p1 ) * ccw( l.p2 ) <= 0 && l.ccw( p1 ) * l.ccw( p2 ) <= 0 ) );\n    }\n};\n\ntypedef Line Segment;\n\n\nint main()\n{\n    int q;\n    scanf(\"%d\", &q);\n\n    for ( int i = 0; i < q; i++ ) {\n\tPoint p0, p1, p2, p3;\n\tscanf(\"%lf %lf\", &p0.x, &p0.y);\n\tscanf(\"%lf %lf\", &p1.x, &p1.y);\n\tscanf(\"%lf %lf\", &p2.x, &p2.y);\n\tscanf(\"%lf %lf\", &p3.x, &p3.y);\n\n\tSegment s1 = Segment( p0, p1 );\n\tSegment s2 = Segment( p2, p3 );\n\tif ( s1.intersect( s2 ) ) {\n\t    printf(\"%.10lf\\n\", 0.0);\n\t}\n\telse {\n\t    double dist1 = s1.distanceSP( s2.p1 );\n\t    double dist2 = s1.distanceSP( s2.p2 );\t\n\t    double dist3 = s2.distanceSP( s1.p1 );\n\t    double dist4 = s2.distanceSP( s1.p2 );\t\n\t    double min_dist = min( min( dist1, dist2 ), min( dist3, dist4 ) );\n\t    printf(\"%.10lf\\n\", min_dist);\n\t}\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n#define EPS 1e-10\n#define equals(a,b) (fabs( (a) - (b) )< EPS )\ntypedef struct point{\n\tdouble x,y;\n\tpoint(){};\n\tpoint(double x ,double y):x(x),y(y){};\n\tpoint operator + (point &p){ return point(x+p.x,y+p.y);\t}\n\tpoint operator - (point &p){ return point(x-p.x,y-p.y);\t}\n\tpoint operator * (point &p){ return point(x*p.x-y*p.y,x*p.y+y*p.x) ;}\n\tpoint operator * (double a){ return point(x*a,y*a);\t}\n\tpoint operator / (double a){ return point(x/a,y/a);\t}\n\t\n\tdouble abs() { return sqrt(norm()); }\n\tdouble norm() { return x*x+y*y; }\n\t\n\tbool operator < (const point &p) const { return x!=p.x ? x<p.x : y<p.y; }\n\tbool operator == (const point &p) const { return fabs(x-p.x)<EPS && fabs(y-p.y)<EPS; }\n}point;\ndouble abs(point a){return a.abs();}\ndouble norm(point a){return a.norm();}\n\ntypedef complex<double> C;\ntypedef struct { point s,e;} line;\n\nC convert(point a){ return C(a.x,a.y); }\npoint convert( C a){ return point(a.real(),a.imag() );}\ndouble dot(point a,point b){ return a.x*b.x+a.y*b.y ; } //内積　a・b\ndouble cross(point a,point b){ return a.x*b.y - a.y*b.x ; }//外積(z成分)　a×b\npoint vec(line l){return l.e-l.s;}\nline make(point s,point e){\n\tline res; res.s=s; res.e=e;\n\treturn res;\n}\npoint make(){ \n\tdouble x,y; cin>>x>>y;\n       \treturn point(x,y);\n}\n//直交\nbool isorthogonal(point a,point b){ return equals(dot(a,b), 0.0); }\nbool isorthogonal(line l1,line l2){ return isorthogonal(vec(l1),vec(l2)); }\n//平行\nbool isparallel(point a,point b){ return equals(cross(a,b),0.0); }\nbool isparallel(line l1,line l2){ return isparallel(vec(l1),vec(l2)); }\n//射影\npoint project(line s,point p){\n\tpoint base = vec(s);\n\tdouble r=dot(p-s.s,base)/base.norm();\n\tbase = base*r;\n\treturn s.s+base;\n}\n//反射\npoint reflect(line l,point p){\n\tpoint tmp=project(l,p)-p;\n\ttmp= tmp*2.0;\n\treturn p+tmp;\n\n}\n//交差判定\n\nint ccw(point p0,point p1,point p2){\n\tpoint a = p1-p0;\n\tpoint b = p2-p0;\nif(cross(a,b)>EPS) return 1;//counter_clockwise\nif(cross(a,b)<-EPS) return -1;//clockwise\nif(dot(a,b)<-EPS)return 2;//online_back\nif(a.norm()<b.norm() ) return -2;//online_front\nreturn 0;//on_segment\n}\n// line p1-p2 line p3-p4\nbool intersect(point p1,point p2,point p3,point p4){\n\treturn (ccw(p1,p2,p3)*ccw(p1,p2,p4)<=0 && ccw(p3,p4,p1)*ccw(p3,p4,p2)<=0 ); \n}\n// line l1,l2\nbool intersect(line l1,line l2){ return intersect(l1.s,l1.e,l2.s,l2.e); }\n\n\n//距離\n//point-point\ndouble distance(point a,point b){ return abs(a-b); }\n//point-line(直線）\ndouble distance2(line l,point p){\n\treturn abs(cross(vec(l),p-l.s)/abs(l.e-l.s));\n}\n//point-line(線分)\ndouble distance(line l,point p){\n\tif( dot(vec(l),p-l.s) <0.0 ) return abs(p-l.s);\n\tif( dot(l.s-l.e,p-l.e) <0.0 ) return abs(p-l.e);\n\treturn distance2(l,p);\n}\n//line-line\ndouble distance(line l1,line l2){\n\tif(intersect(l1,l2))\treturn 0.0;\n\treturn min(min(distance(l1,l2.s),distance(l1,l2.e) ), min(distance(l2,l1.s),distance(l2,l1.e) ) );\n}\n\n//交点\npoint crosspoint(line l1,line l2){\n\tpoint base = vec(l2);\n\tdouble d1 = abs(cross(base,l1.s-l2.s) );\n\tdouble d2 = abs(cross(base,l1.e-l2.s) );\n\tdouble t = d1/(d1+d2);\n\tpoint tmp = vec(l1)*t;\n\treturn l1.s+tmp;\n}\n\nint main(){\nint q;\ncin>>q;\nfor(int i=0;i<q;i++){\n\tpoint p0=make(),p1=make(),p2=make(),p3=make();\n\tline l0 = make(p0,p1) ,l1 = make(p2,p3);\n\tprintf(\"%0.10lf\\n\",distance(l0,l1) );\n}\n\nreturn 0;\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <complex>\n#include <vector>\nusing namespace std;\nconst double eps = 1e-10;\n#define EQ(a, b) (abs((a) - (b)) < eps)\nusing P = complex<double>;      // position\nstruct L : vector<P> {\n    L(const P &a = P(), const P &b = P()) {\n        emplace_back(a); emplace_back(b);\n    }\n};\nostream &operator<<(ostream &os, P p) { return os << real(p) << \" \" << imag(p); }\ndouble dot(const P &a, const P &b) { return real(conj(a) * b); }\ndouble cross(const P &a, const P &b) { return imag(conj(a) * b); }\n\nenum CCW_RESULT { CCW = +1, CW = -1, BEHIND = +2, FRONT = -2, ON = 0 };\nint ccw(P a, P b, P c) {\n    b -= a; c -= a;\n    if (cross(b, c) > eps) return CCW;      // counter clockwise\n    if (cross(b, c) < -eps) return CW;      // clockwise\n    if (dot(b, c) < 0) return BEHIND;       // c--a--b on line\n    if (norm(b) < norm(c)) return FRONT;    // a--b--c on line | a=b\n    return ON;                              // on segment | a=c | b=c\n}\nbool isecSS(const L &s, const L &t) {\n    return ccw(s[0], s[1], t[0]) * ccw(s[0], s[1], t[1]) <= 0 &&\n           ccw(t[0], t[1], s[0]) * ccw(t[0], t[1], s[1]) <= 0;\n}\ndouble distLP(const L &l, const P &p) {\n    return abs(cross(l[1] - l[0], p - l[0])) / abs(l[1] - l[0]);\n}\ndouble distSP(const L &s, const P &p) {\n    if (dot(s[1] - s[0], p - s[0]) < 0) return abs(p - s[0]);\n    if (dot(s[0] - s[1], p - s[1]) < 0) return abs(p - s[1]);\n    return distLP(s, p);\n}\ndouble distSS(const L &s, const L &t) {\n    if (isecSS(s, t)) return 0;\n    return min({distSP(s, t[0]), distSP(s, t[1]), distSP(t, s[0]), distSP(t, s[1])});\n}\n\n#include <iostream>\n#include <iomanip>\nint main() {\n    cout << fixed << setprecision(10);\n    int q; cin >> q;\n    while (q--) {\n        vector<P> ps;\n        for (int i = 0; i < 4; i++) {\n            int x, y; cin >> x >> y;\n            ps.emplace_back(x, y);\n        }\n        double d = distSS(L(ps[0], ps[1]), L(ps[2], ps[3]));\n        cout << d << endl;\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n \nconst double EPS = 1e-8, PI = acos(-1);\ninline bool eq(double a,double b){ return abs(b - a) < EPS; }\n#define curr(P,i) P[i]\n#define next(P,i) P[(i+1)%P.size()]\n#define prev(P,i) P[(i+P.size()-1) % P.size()]\nenum { OUT, ON, IN };\n \nstruct Geometory { // Geometory Library\n  struct Point {\n    double x, y;\n    Point(){};\n    Point(double x,double y):x(x),y(y){};\n    Point operator+(const Point& b) const { return Point(x + b.x,y + b.y); }\n    Point operator-(const Point& b) const { return Point(x - b.x,y - b.y); }\n    Point operator*(const double b) const { return Point(x * b,y * b); }\n    Point operator*(const Point& b) const { return Point(x * b.x - y * b.y,x * b.y + y * b.x); }\n    Point operator/(const double b) const { return Point(x / b,y / b); }\n    bool operator< (const Point& b) const { return x != b.x ? x < b.x : y < b.y; }\n    bool operator==(const Point& b) const { return eq(x,b.x) && eq(y,b.y); }\n    double norm(){ return x * x + y * y; }\n    double arg(){ return atan2(x,y); }\n    double abs(){ return sqrt(norm()); }\n    Point rotate(double theta){ return Point(cos(theta) * x - sin(theta) * y,sin(theta) * x + cos(theta) * y); }\n    Point rotate90(){ return Point(-y,x); }\n    friend ostream& operator<<(ostream& os, Point p){ return os<<\"(\"<<p.x<<\",\"<<p.y<<\")\"; }\n    friend istream& operator>>(istream& is, Point& a){ return is>>a.x>>a.y; }\n  };\n \n  struct Line {\n    Point a, b;\n    Line(){};\n    Line(Point a,Point b):a(a),b(b){};\n    friend ostream& operator<<(ostream& os, Line p){ return os<<\"(\"<<p.a.x<<\",\"<<p.a.y<<\") to (\"<<p.b.x<<\",\"<<p.b.y<<\")\"; }\n    friend istream& operator>>(istream& is, Line& a){ return is>>a.a.x>>a.a.y>>a.b.x>>a.b.y; }\n  };\n  struct Segment {\n    Point a, b;\n    Segment(){};\n    Segment(Point a,Point b):a(a),b(b){};\n    friend ostream& operator<<(ostream& os, Segment p){ return os<<\"(\"<<p.a.x<<\",\"<<p.a.y<<\") to (\"<<p.b.x<<\",\"<<p.b.y<<\")\"; }\n    friend istream& operator>>(istream& is, Segment& a){ return is>>a.a.x>>a.a.y>>a.b.x>>a.b.y; }\n  };\n  struct Circle {\n    Point p; double r;\n    Circle(){};\n    Circle(Point p, double r) : p(p),r(r){};\n  };\n  typedef vector< Point > Polygon;\n  typedef vector< Segment > Segments;\n  typedef vector< Line > Lines;\n  typedef vector< Circle > Circles;\n  typedef pair< Point, Point > PointPoint;\n \n  double cross(const Point& a,const Point& b){\n    return a.x * b.y - a.y * b.x;\n  }\n  double dot(const Point& a,const Point& b){\n    return a.x * b.x + a.y * b.y;\n  }\n \n  int ccw(const Point& a,Point b,Point c){\n    b = b - a, c = c - a;\n    if(cross(b,c) > 0)    return +1;  // a → b で 反時計方向におれて c\n    if(cross(b,c) < 0)    return -1; // a → b で 時計方向におれて c\n    if(dot(b,c) < 0)      return +2;  // c -- a -- bで一直線上\n    if(b.norm() < c.norm()) return -2; // a -- b -- cで一直線上\n    return 0;  // a -- c -- bで一直線上\n  }\n  Point Projection(const Line& l, const Point& p){\n    double t = dot( p - l.a, l.a - l.b) / (l.a - l.b).norm();\n    return l.a + (l.a - l.b) * t;\n  }\n  Point Projection(const Segment& l, const Point& p){\n    double t = dot( p - l.a, l.a - l.b) / (l.a - l.b).norm();\n    return l.a + (l.a - l.b) * t;\n  }\n  Point Reflection(const Line& l, const Point& p){\n    return p + (Projection( l, p) - p) * 2.0;\n  }\n \n  double Distance( const Line& l,const Point& p) { //OK\n    return (p - Projection( l, p)).abs();\n  }\n \n  bool Intersect(const Line& l, const Line& m){\n    return abs(cross(l.b - l.a, m.b - m.a)) > EPS || abs(cross(l.b-l.a, m.b-l.a)) < EPS;\n  }\n  bool Intersect(const Line& l, const Segment& s){\n    return cross( l.b - l.a, s.a - l.a) * cross( l.b - l.a, s.b - l.a) < EPS;\n  }\n  bool Intersect(const Line& l, const Point& p){\n    return abs(ccw(l.a, l.b, p)) != -1;\n  }\n  bool Intersect(const Segment& s, const Segment& t){\n    return ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 && ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0;\n  }\n  bool Intersect(const Segment& s, const Point& p){\n    return ccw(s.a, s.b, p) == 0;\n  }\n  bool Intersect(const Circle& c,const Line& l){\n    return Distance( l, c.p) <= c.r + EPS;\n  }\n  bool Intersect(const Circle& c,const Point& p){\n    return abs( ( p - c.p).abs() - c.r ) < EPS;\n  }\n  int Intersect(const Circle& c, const Segment& l){\n    if( (Projection( l, c.p) - c.p).norm() - c.r * c.r > EPS) return 0;\n    const double d1 = ( c.p - l.a).abs(), d2 = ( c.p - l.b).abs();\n    if( d1 < c.r + EPS && d2 < c.r + EPS) return 0;\n    if( d1 < c.r - EPS && d2 > c.r + EPS || d1 > c.r + EPS && d2 < c.r - EPS ) return 1;\n    const Point h = Projection( l, c.p);\n    if( dot( l.a - h, l.b - h) < 0) return 2;\n    return 0;\n  }\n  bool Intersect(const Circle& a,const Circle& b){\n    return ( ( a.p - b.p).norm() - ( a.r + b.r) * ( a.r + b.r) < EPS) &&\n      ( ( a.p - b.p).norm() - ( a.r - b.r) * ( a.r - b.r) > -EPS);\n  }\n  double Distance(const Segment& s,const Point& p){\n    Point r = Projection(s, p);\n    if ( Intersect( s, r)) return ( r - p).abs();\n    return min( ( s.a - p).abs(), ( s.a - p).abs());\n  }\n  double Distance(const Segment& a,const Segment& b){\n    if(Intersect( a, b)) return 0;\n    return min( min( Distance( a, b.a), Distance( a, b.b)), min( Distance( b, a.a), Distance( b, a.b)));\n  }\n  double Distance(const Line& l,const Line& m) {\n    return Intersect( l, m) ? 0 : Distance( l, m.a);\n  }\n  double Distance(const Line& l,const Segment& s) { //OK\n    if (Intersect(l, s)) return 0;\n    return min(Distance(l, s.a), Distance(l, s.b));\n  }\n  double Distance(const Point& a,const Point& b){ //OK\n    return ( a - b).abs();\n  }\n  Point Crosspoint(const Segment& l,const Segment& m) { //OK\n    double A = cross(l.b - l.a, m.b - m.a);\n    double B = cross(l.b - l.a, l.b - m.a);\n    if (abs(A) < EPS && abs(B) < EPS) return m.a; // same line\n    return m.a + (m.b - m.a) * B / A;\n  }\n  PointPoint Crosspoint(const Circle& c,const Line l){\n    Point hp = Projection( l, c.p), h =  hp - c.p;\n    const double d2 = h.norm();\n    Point v = ( l.b - l.a) * sqrt( c.r * c.r - d2) / ( l.b - l.a).abs();\n    return PointPoint(hp - v, hp + v);\n  }\n  PointPoint Crosspoint(const Circle& c,const Segment& l) {\n    Line aa = Line( l.a, l.b);\n    if(Intersect(c, l) == 2) return Crosspoint(c, aa);\n    PointPoint ret = Crosspoint(c, aa);\n    if(dot(l.a - ret.first, l.b - ret.first) < 0) ret.second = ret.first;\n    else ret.first = ret.second;\n    return ret;\n  }\n  PointPoint Crosspoint(const Circle& c1,const Circle& c2){ //OK\n    double d = (c1.p - c2.p).abs();\n    double s = (c1.r + c2.r + d) / 2;\n    double S = sqrt( s * ( s - c1.r) * ( s - c2.r) * ( s - d));\n    double h = 2 * S / d;\n    Point v = ( c2.p - c1.p) / ( c2.p - c1.p).abs();\n    double m = sqrt( c1.r * c1.r - h * h);\n    return PointPoint( c1.p + v * m + Point(0,1) * h * v, c1.p + v * m - Point(0,1) * h * v);\n  }\n  bool parallel(const Line& a,const Line& b){\n    return abs(cross( a.b - a.a, b.b - b.a)) < EPS;\n  }\n  bool orthogonal(const Line& a,const Line& b){\n    return abs(dot( a.a - a.b, b.a - b.b)) < EPS;\n  }\n  int Contains(const Polygon& Q,const Point& p){\n    bool in = false;\n    for(int i = 0 ; i < Q.size() ; i++ ){\n      Point a = curr(Q,i) - p, b = next(Q,i) - p;\n      if(a.y > b.y) swap(a,b);\n      if(a.y <= 0 && 0 < b.y && cross(a,b) < 0) in = !in;\n      if(cross(a,b) == 0 && dot(a,b) <= 0) return ON;\n    }\n    return in ? IN : OUT;\n  }\n  bool Contains(const Circle& c,const Point& p){\n    return ( c.p - p).abs() < c.r + EPS;\n  }\n  double Area2(const Polygon& p){ //OK\n    double A = 0;\n    for (int i = 0; i < p.size(); ++i){\n      A += cross(curr(p, i), next(p, i));\n    }\n    return A;\n  }\n};\n \nGeometory geo;\ntypedef Geometory::Point P;\ntypedef Geometory::Line L;\ntypedef Geometory::Segment S;\ntypedef Geometory::Circle C;\n\nint main(){\n  int q;\n  S s1, s2;\n\n  cin >> q;\n  while(q--){\n    cin >> s1 >> s2;\n    cout << fixed << setprecision(10) << geo.Distance( s1, s2) << endl;\n  }\n  return(0);\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nconst int dx[]={0,1,0,-1,1,-1,-1,1};\nconst int dy[]={-1,0,1,0,1,1,-1,-1};\nconst int INF = 1<<30;\nconst double EPS = 1e-15;\n#define PB push_back\n#define mk make_pair\n#define fi first\n#define se second\n#define ll long long\n#define reps(i,j,k) for(int i = (j); i < (k); i++)\n#define rep(i,j) reps(i,0,j)\n#define MOD 1000000007\ntypedef pair<int,int> Pii;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\nstruct Point{\n    double x,y;\n    Point(){}\n    Point(double _x,double _y){\n        x = _x;\n        y = _y;\n    }\n    Point operator + (Point p){\n        return Point(x+p.x,y+p.y);\n    }\n  \n    Point operator - (Point p){\n        return Point(x-p.x,y-p.y);\n    }\n  \n    Point operator * (double k){\n        return Point(k*x,k*y);\n    }\n     \n    Point operator * (Point p){\n        return Point(p.x*x-p.y*y,p.x*y+p.y*x);\n    }\n\n    Point operator / (double k){\n        return Point(x/k,y/k);\n    }\n    \n    Point operator = (Point p){\n        x = p.x;\n        y = p.y;\n        return *this;\n    }\n\n    bool operator<(const Point &p)const{\n        //return y!=p.y?y<p.y:x<p.x; //y-x\n        return x!=p.x?x<p.x:y<p.y; //x-y\n    }\n\n};\ndouble dot(Point p, Point q){\n    return p.x*q.x+p.y*q.y;\n}\n  \ndouble cross(Point p,Point q){\n    return p.x*q.y-q.x*p.y;\n}\n  \ndouble norm(Point p){\n    //?????????????????§?????????2???\n    return p.x*p.x+p.y*p.y;\n}\n  \ndouble pabs(Point p){\n    //?????????????????§??????\n    return sqrt(norm(p));\n}\nPoint UnitVector(Point a){\n    //??????????????????\n    return a/pabs(a);\n}\ntypedef vector<Point> Polygon;\nstruct Line : Polygon{\n    Line(){}\n    Line(Point p,Point q){\n        PB(p);\n        PB(q);  \n    }\n};\nstruct Circle{\n    Point p; //?????????\n    double r; //??????\n    Circle(){}\n    Circle(Point _p,double _r){\n        p = _p;\n        r = _r;\n    }\n};\nint ccw(Point a,Point b,Point c){\n    b = b-a;\n    c = c-a;\n    if(cross(b,c) > 0)return +1; //a???b ??§???????¨?????????????c ccw\n    if(cross(b,c) < 0)return -1; //a???b ??§????¨?????????????c ccw\n    if(dot(b,c) < 0)return +2; // c--a--b;\n    if(pabs(b)<pabs(c))return -2; //a--b--c\n    return 0; //a--c--b\n}\n\n\nPoint projection(Line l, Point p){\n    double t = dot(p-l[0],l[0]-l[1]) / norm(l[0]-l[1]);\n    return l[0] + (l[0]-l[1])*t;\n}\n\nPoint reflection(Line l, Point p){\n    return p + (projection(l,p)-p)*2.0; \n}\n\nbool intersectLL(Line l,Line m){\n    return fabs(cross(l[1]-l[0],m[1]-m[0])) > EPS || //????????§??????\n            fabs(cross(l[1]-l[0],m[0]-l[0])) < EPS; //????????????\n}\n\nbool intersectLP(Line l, Point p){\n    return fabs(cross(l[1]-p,l[0]-p)) < EPS;\n}\n\nbool intersectLS(Line l,Line m){\n    return cross(l[1]-l[0],m[0]-m[0])* //m[0]?????´???l???????????????\n           cross(l[1]-l[0],m[1]-l[0]) < EPS; //m[1]?????´???l???????????????\n}\n\nbool intersectSS(Line l,Line m){\n    //??????l??¨??????m??????????????????????????????\n    return (ccw(l[0],l[1],m[0])*ccw(l[0],l[1],m[1])<EPS)&&\n            (ccw(m[0],m[1],l[0])*ccw(m[0],m[1],l[1])<EPS);\n}\n\nbool intersectSP(Line l, Point p){\n    //??????l??¨???p?????????????????????\n    return !ccw(l[0],l[1],p);\n}\n\n\nbool intersectCP(Circle c,Point p){\n    //???c??¨???p???????????????\n    //true->???c????????¨??????p????????¨????????????.\n    return fabs(pabs(p-c.p)-c.r)<EPS;\n}\n\nint intersectCL(Circle c,Line l,Point *p,Point *q){\n    if(norm(projection(l,c.p) - c.p) - c.r*c.r > EPS)return 0;\n    double d1 = pabs(c.p-l[0]);\n    double d2 = pabs(c.p-l[1]);\n    if(d1 < c.r + EPS && d2 < c.r + EPS)return 0;\n    if(d1 < c.r - EPS && d2 > c.r+EPS\n        || d1 > c.r + EPS && d2 < c.r -EPS)return 1;\n    Point h = projection(l,c.p);\n    if(dot(l[0] - h,l[1] - h) < 0)return 2;\n    return 0;\n}\n\nint intersectCC(Circle a,Circle b,Point *p,Point *q){\n    double dist = pabs(a.p-b.p);\n    if(dist < fabs(a.r-b.r) || dist > a.r+b.r){\n        //????????????????????´??????????????¨???\n        //????????????????????¨???????????¨???\n        *p = Point(1e15,1e15);\n        *q = Point(1e15,1e15);\n        return 0;\n    }\n    else if(fabs(dist-a.r-b.r) < EPS){\n        //??????1?????§????????£???????????¨???\n        Point way;\n        way = b.p-a.p;\n        *p = a.p+UnitVector(way)*a.r;\n        *q = *p;\n        return 1;\n    }\n    else{\n        //??????2?????§????????£???????????¨???\n        if(a.r < b.r){\n            swap(a.r,b.r);\n            swap(a.p,b.p);\n        }\n        double s = (a.r + b.r + dist) / 2.0 ;\n        double area = sqrt(s * (s - a.r) * (s - b.r) * (s - dist));\n        double h = 2.0 * area / dist;\n\n        Point  v = b.p-a.p;\n        v = UnitVector(v);\n        Point  m = a.p + (v*sqrt(a.r*a.r-h*h));\n        Point  n = v * Point(0.0,1.0);\n        \n        *p = m + (n * h);\n        *q = m - (n * h);\n        return 2;\n    }\n}\n\ndouble distanceLP(Line l,Point p){\n    //??´???l??¨???p????????¢\n    return pabs(p-projection(l,p));\n}\n\ndouble distanceLL(Line l,Line m){\n    //??´???l??¨??´???m????????¢\n    return intersectLL(l,m) ? 0.0 : distanceLP(l,m[0]);\n}\n\ndouble distanceLS(Line l,Line m){\n    //??´???l??¨??????m????????¢\n    if(intersectLS(l,m))return 0.0;\n    return min(distanceLP(l,m[0]),distanceLP(l,m[1]));\n}\n\ndouble distanceSP(Line l,Point p){\n    //??????l??¨???p????????¢\n    Point r = projection(l,p);\n    if(intersectSP(l,r))return pabs(r-p);\n    return min(pabs(l[0]-p),pabs(l[1]-p));\n}\n\ndouble distanceSS(Line l,Line m){\n    //??????l??¨??????m????????¢\n    if(intersectSS(l,m)) return 0.0;\n    return min(min(distanceSP(l,m[0]),distanceSP(l,m[1])),\n               min(distanceSP(m,l[0]),distanceSP(m,l[1])));\n}\n\ndouble TriangleArea(Point a,Point b,Point c){\n    b = b - a;\n    c = c - a;\n    return cross(b,c)*0.5; //?????????????????¨??????????????§??¨???\n}\n \ndouble VertexArea(Polygon v){\n    double subArea = 0.0;\n    rep(i,v.size()-1){\n        subArea += TriangleArea(v[0],v[i],v[i+1]);\n    }\n    return subArea; //?????????????????¨??????????????§??¨???\n}\n\nPoint crosspoint(Line l,Line m){\n    //??????l??¨??????m?????????\n    if(intersectSS(l,m) == false)return Point(INF,INF);\n    return m[0]+(m[1]-m[0])*cross(l[1]-l[0],l[1]-m[0])/cross(l[1]-l[0],m[1]-m[0]);\n}\n \nPolygon ConvexHull(Polygon v){\n    //??????????????????\n    int n = v.size();\n    int k = 0;\n    sort(v.begin(),v.end());\n    Polygon e(2*n);\n    for(int i = 0; i < n; i++){\n        while(k >= 2 && ccw(e[k-2],e[k-1],v[i])<=0)k--;\n        e[k++] = v[i];\n    }\n    for(int i = n-2, t = k+1; i >= 0; i--){\n        while(k >= t && ccw(e[k-2],e[k-1],v[i])<=0)k--;\n        e[k++] = v[i];\n    }\n    e.resize(k-1);\n    return e;\n}\n\nbool IsInnerPointVertex(Polygon v , Point p){\n    Line l;\n    l.PB(p);\n    l.PB(Point(0,INF));\n    if(v.size() == 2){\n        return ccw(v[0],v[1],p)==2;\n    }\n    int cnt = 0;\n    rep(i,v.size()){\n        Line m;\n        m.PB(v[i]);m.PB(v[(i+1)%v.size()]);\n        if(intersectSS(l,m))cnt++;\n    }\n    return cnt%2;\n}\n\nint main(){\n    int Q;\n    scanf(\"%d\",&Q);\n    while(Q--){\n        Line l,m;\n        double x1,y1,x2,y2;\n        scanf(\"%lf%lf%lf%lf\",&x1,&y1,&x2,&y2);\n        l.PB(Point(x1,y1));l.PB(Point(x2,y2));\n        scanf(\"%lf%lf%lf%lf\",&x1,&y1,&x2,&y2);\n        m.PB(Point(x1,y1));m.PB(Point(x2,y2));\n        printf(\"%.10lf\\n\",distanceSS(l,m));\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#ifndef ___Geometry_Library\n#define ___Geometry_Library\n\n// ------ Includes ------ //\n#include <cmath>\n#include <complex>\n#include <utility>\n#include <algorithm>\n\n// ------ Defines ------ //\ntypedef long double GType;\ntypedef std::complex<GType> Point;\ntypedef std::pair<Point, Point> Segment;\n\n// ------ Constants ------ //\nconst GType EPS = 1.0e-10L;\n\n// ------ Functions Level 1 ------ //\nGType dot(const Point& p1, const Point& p2) {\n\treturn (std::conj(p1) * p2).real();\n}\nGType cross(const Point& p1, const Point& p2) {\n\treturn (std::conj(p1) * p2).imag();\n}\nint ccw(const Point& p1, const Point& p2, const Point& p3) {\n\tPoint v1 = p2 - p1, v2 = p3 - p1;\n\tif (cross(v1, v2) > EPS) return +1;\n\tif (cross(v1, v2) < -EPS) return -1;\n\tif (dot(v1, v2) < -EPS) return +2;\n\tif (std::norm(v1) < std::norm(v2)) return -2;\n\treturn 0;\n}\n\n// ------ Functions Level 2 ------ //\nbool intersect(const Segment& s1, const Point& p1, bool segflag) {\n\tif (!segflag) return std::abs(cross(s1.second - p1, s1.first - p1)) < EPS;\n\treturn (std::abs(s1.first - p1) + std::abs(s1.second - p1) - std::abs(s1.second - s1.first)) < EPS;\n}\nbool intersect(const Segment& s1, const Segment& s2, bool segflag) {\n\tif (!segflag) return cross(s1.second - s1.first, s2.first - s1.first) * cross(s1.second - s1.first, s2.second - s1.first) < EPS;\n\treturn (ccw(s1.first, s1.second, s2.first) * ccw(s1.first, s1.second, s2.second)) <= 0 && (ccw(s2.first, s2.second, s1.first) * ccw(s2.first, s2.second, s1.second)) <= 0;\n}\nPoint projection(const Segment& s1, const Point& p1) {\n\tGType mul = dot(p1 - s1.first, s1.first - s1.second) / norm(s1.first - s1.second);\n\treturn s1.first + (s1.first - s1.second) * mul;\n}\nPoint reflection(const Segment& s1, const Point& p1) {\n\treturn p1 + (projection(s1, p1) - p1) * (GType)(2);\n}\nGType distance(const Point& p1, const Point& p2) {\n\treturn std::abs(p2 - p1);\n}\nGType distance(const Segment& s1, const Point& p1, bool segflag) {\n\tif (!segflag) return std::abs(p1 - projection(s1, p1));\n\tconst Point p2 = projection(s1, p1);\n\tif (intersect(s1, p2, true)) return std::abs(p2 - p1);\n\treturn std::min(std::abs(s1.first - p1), std::abs(s1.second - p1));\n}\nGType distance(const Segment& s1, const Segment& s2, bool segflag) {\n\tif (intersect(s1, s2, segflag)) return 0;\n\tif (!segflag) return std::min(distance(s1, s2.first, false), distance(s1, s2.second, false));\n\treturn std::min({ distance(s1, s2.first, true), distance(s1, s2.second, true), distance(s2, s1.first, true), distance(s2, s1.second, true) });\n}\n\n#endif\n\n#include <iomanip>\n#include <iostream>\nusing namespace std;\nint q, xa, ya, xb, yb; Segment s1, s2;\nint main() {\n\tcin >> q;\n\twhile (q--) {\n\t\tcin >> xa >> ya >> xb >> yb; s1 = make_pair(Point(xa, ya), Point(xb, yb));\n\t\tcin >> xa >> ya >> xb >> yb; s2 = make_pair(Point(xa, ya), Point(xb, yb));\n\t\tcout << fixed << setprecision(15) << distance(s1, s2, true) << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <iostream>\n#include <complex>\n#include <vector>\n#include <cmath>\n#include <cassert>\n#define rep(i,n) for(int i=0;i<n;i++)\n#define fs first\n#define sc second\n#define pb push_back\nusing namespace std;\ntypedef double D;\ntypedef complex<D> P;\ntypedef pair<P,P> L;\t\t//fs->sc\ntypedef vector<P> Pol;\nstruct C{P p;D r;};\nD inf=1e50,eps=1e-10;\n//template<class T> bool eq(T a, T b) { return abs(a-b)<eps;}\n//template<class T> int sig(T a) { return eq(a,0) ? 0 : (a>0 ? 1 : -1);}\nbool eq(D a, D b) { return abs(a-b)<eps;}\nbool eq(P a, P b) { return abs(a-b)<eps;}\nint sig(D a) { return eq(a,0) ? 0 : (a>0 ? 1 : -1);}\ninline D dot(P a, P b) { return real(conj(a)*b);};\ninline D cro(P a, P b) { return imag(conj(a)*b);};\nenum ENCCW{CCW=1, CW=-1, FRONT=2, BACK=-2, ON=0};\t//!!MAEHARAとFRONT,BACKが逆\n//ON優先(including endpoint)\ninline int ccw (P a, P b, P c){\n//\tcout << cro(b-a,c-a) << endl;\n\tif(sig(cro(b-a,c-a))==1) return CCW;\n\tif(sig(cro(b-a,c-a))==-1) return CW;\n\tif(eq(abs(a-c)+abs(c-b),abs(a-b))) return ON;\n\tif(eq(abs(a-b)+abs(b-c),abs(a-c))) return FRONT;\n\tif(eq(abs(c-a)+abs(a-b),abs(c-b))) return BACK;\n\tassert(false);\n}\ninline P proj(P a, P b){\t\t//ベクトルaのbへの射影\n\treturn (dot(a,b)/norm(b))*b;\n}\ninline P perp(L l, P p){\t\t//垂線の足\n\tD t=dot(p-l.fs,l.fs-l.sc)/norm(l.fs-l.sc);\n\treturn l.fs+t*(l.fs-l.sc);\n}\ninline P refl(L l, P p){\n\treturn p+2.0*(perp(l,p)-p);\n}\ninline bool ispal(L a, L b){\n\treturn sig(cro(a.fs-a.sc,b.fs-b.sc))==0;\n}\ninline bool ovLL(L a, L b){\n\treturn ispal(a,b) && sig(cro(a.fs-a.sc,b.fs-a.sc))==0;\n}\ninline bool iLL(L a, L b){\t\t//intersect or overload\n\treturn !ispal(a,b) || ovLL(a,b);\n}\ninline bool iLS(L l, L s){\t\t//intersect(including endpoint) or overload\n\treturn cro(l.sc-l.fs,s.fs-l.fs)*cro(l.sc-l.fs,s.sc-l.fs)<eps;\n}\ninline bool iLP(L l, P p){\t\t//on line\n\treturn sig(cro(l.sc-p,l.fs-p));\n}\ninline bool iSS(L a, L b){\t\t//intersect(including endpoint) or overload\n\treturn ccw(a.fs,a.sc,b.fs)*ccw(a.fs,a.sc,b.sc)<=0 && ccw(b.fs,b.sc,a.fs)*ccw(b.fs,b.sc,a.sc)<=0;\n}\ninline bool iSP(L s, P p){\t\t//intersect(including endpoint) or overload\n\treturn ccw(s.fs,s.sc,p)==ON;\n}\ninline D dLP(L l, P p) { return abs(perp(l,p)-p);}\ninline D dLL(L a, L b) { return iLL(a,b) ? 0 : dLP(a,b.fs);}\ninline D dLS(L l, L s) { return iLS(l,s) ? 0 : min(dLP(l,s.fs),dLP(l,s.sc));}\ninline D dSP(L s, P p) {\n\tP q=perp(s,p);\n\treturn iSP(s,q) ? abs(p-q) : min(abs(p-s.fs),abs(p-s.sc));\n}\ninline D dSS(L a, L b) {\n\tif(iSS(a,b)) return 0;\n\treturn min(min(dSP(a,b.fs),dSP(a,b.sc)),min(dSP(b,a.fs),dSP(b,a.sc)));\n}\ninline P intLL(L a, L b) {\t//intersection\n\tassert(!ispal(a,b));\n\tD t=cro(a.sc-a.fs,a.sc-b.fs)/cro(a.sc-a.fs,b.sc-b.fs);\n\treturn b.fs+t*(b.sc-b.fs);\n}\nenum ENICP{INC=1,ONC=0,OUTC=-1};\ninline int iCP(C c, P p){\n\tD d=abs(p-c.p);\n\treturn eq(d,c.r) ? ONC : (d<c.r ? INC : OUTC);\n}\ninline int iCL(C c, L l){\t\t//num of intersection(s)\n\tD d=dLP(l,c.p);\n\treturn eq(d,c.r) ? 1 : (d<c.r ? 2 : 0);\n}\n//inline int iCS\n//inline int iCC(C a, C b){\n\n/*inline P intCL1(C c, L l){\t\t//iCL=1\n\tassert(iCL(c,l)==1);\n}\ninline L intCL2(C c, L l){\t\t//iCL=2\n\tassert(iCL(c,l)==2);\n}*/\nD aTri(P a, P b, P c){ return cro(b-a,c-a)/2;}\nD aPol(Pol p){\t\t\t//点集合はCCWに与える\n\tint n=p.size();\n\tD ret=0;\n\trep(i,n) ret+=cro(p[i],p[(i+1)%n])/2;\n\treturn ret;\n}\nP gPol(Pol p){\t\t\t//多角形内部が一様な重さを持つときの重心\n\tint n=p.size();\n\tP g;\n\tD s=aPol(p);\n\tassert(s>eps);\n\trep(i,n){\n\t\tD ds=cro(p[i],p[(i+1)%n])/2;\n\t\tg+=ds/3*(p[i]+p[(i+1)%n]);\n\t}\n\treturn g/s;\n}\nenum ENCONT{INP=1,ONP=0,OUTP=-1};\nint contain(Pol pol, P p){\n\tbool in=false;\n\trep(i,pol.size()){\n\t\tP a=pol[i],b=pol[(i+1)%pol.size()];\n\t\tif(ccw(a,b,p)==ON) return ONP;\n\t\tif(!iLS(L(p,p+1.),L(a,b))) continue;\n\t\tif(ovLL(L(p,p+1.),L(a,b))){\n\t\t\tif(sig(max(real(a),real(b))-real(p))>=0) in=!in;\n\t\t\tcontinue;\n\t\t}\n\t\tif(sig(real(intLL(L(p,p+1.),L(a,b)))-real(p))>=0) in=!in;\n\t}\n\treturn in ? INP : OUTP;\n}\ninline D heron(D a, D b, D c){\n\tdouble s=(a+b+c)/2;\n\tif(s-a<eps || s-b<eps || s-c<eps) return 0;\t\t//S=0 || 三角形できない\n\treturn sqrt(s*(s-a)*(s-b)*(s-c));\n}\nint main(){\n\tint q;\n\tscanf(\"%d\",&q);\n\trep(i,q){\n\t\tD a,b,c,d,e,f,g,h;\n\t\tscanf(\"%lf%lf%lf%lf%lf%lf%lf%lf\",&a,&b,&c,&d,&e,&f,&g,&h);\n\t\tL l=L(P(a,b),P(c,d)),m=L(P(e,f),P(g,h));\n\t\tprintf(\"%.10lf\\n\",dSS(l,m));\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<iomanip>\n#include<cmath>\n#include<vector>\n#include<algorithm>\n\nusing namespace std;\n\nconst double EPS = 1e-10;\nbool equals(double a, double b){ return (fabs(a) - fabs(b)) < EPS;};\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nclass Point{\npublic:\n\tdouble x, y;\n\t\n\tPoint(double x = 0, double y = 0): x(x), y(y) {}\n\tPoint(const Point &p) { x = p.x; y = p.y;};\n\t\n\tPoint operator + (const Point &p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (const Point &p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (const double &a) { return Point(x * a, y * a); }\n\tPoint operator / (const double &a) { return Point(x / a, y / a); }\n\t\n\tPoint & operator = (const Point& p) {x = p.x; y = p.y; return *this;};\n\tPoint & operator += (const Point& p) {x += p.x; y += p.y; return *this;};\n\tPoint & operator -= (const Point& p) {x -= p.x; y -= p.y; return *this;};\n\tPoint & operator *= (const Point& p) {x *= p.x; y *= p.y; return *this;};\n\tPoint & operator /= (const Point& p) {x /= p.x; y /= p.y; return *this;};\n\t\n\tbool operator < (const Point &p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\t\n\tbool operator > (const Point &p) const {\n\t\treturn x != p.x ? x > p.x : y > p.y;\n\t}\n\t\n\tbool operator == (const Point &p) const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n\t\n\tdouble abs() { return sqrt(norm()); };\n\tdouble norm() { return x * x + y * y;};\n};\n\ntypedef Point Vector;\n\n\ndouble norm(Vector a){\n\treturn a.x * a.x + a.y * a.y;\n}\n\ndouble abs(Vector a){\n\treturn sqrt(norm(a));\n}\n\ndouble dot(Vector a, Vector b){\n\treturn a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b){\n\treturn a.x * b.y - a.y * b.x;\n}\n\nstruct Segment{\n\tPoint p1, p2;\n};\n\ntypedef Segment Line;\n\n\n\n\nbool isOrthogonal(Vector a, Vector b){\n\treturn equals(dot(a,b), 0.0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2){\n\treturn isOrthogonal(a1 - a2, b1 - b2);\n}\n\nbool isOrthogonal(Segment s1, Segment s2){\n\treturn equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n\nbool isParallel(Vector a, Vector b){\n\treturn equals(cross(a, b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2){\n\treturn isParallel(a1 - a2, b1 - b2);\n}\n\nbool isPrallel(Segment s1, Segment s2){\n\treturn equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n\nint ccw(Point p0, Point p1, Point p2){\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif(cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif(cross(a, b) < -EPS) return CLOCKWISE;\n\tif(dot(a, b) < - EPS) return ONLINE_BACK;\n\tif(a.norm() < b.norm()) return ONLINE_FRONT;\n\t\n\treturn ON_SEGMENT;\n}\n\nbool intersect(Point p1, Point p2, Point p3, Point p4){\n\treturn (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 && ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\n\nbool intersect(Segment s1, Segment s2){\n\treturn intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\ndouble getDistace(Point a, Point b){\n\treturn abs(a - b);\n}\n\ndouble getDistanceLP(Line l, Point p){\n\treturn abs(cross(l.p2 - l.p1, p - l.p1)) / abs(l.p2 - l.p1);\n}\n\ndouble getDistanceSP(Segment s, Point p){\n\tif(dot(s.p2 - s.p1, p - s.p1) < 0.0) return abs(p - s.p1);\n\tif(dot(s.p1 - s.p2, p - s.p2) < 0.0) return abs(p - s.p2);\n\treturn getDistanceLP(s, p);\n}\n\ndouble getDistance(Segment s1, Segment s2){\n\tif(intersect(s1, s2)) return 0.0;\n\treturn min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)), min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0): c(c), r(r) {}\n};\n\ntypedef vector<Point> Polygon;\n\nsigned main(){\n\tcin.tie(0);\n\tios::sync_with_stdio(false);\n\tcout<<fixed<<setprecision(10);\n\t\n\tint q;\n\t\n\tcin>>q;\n\t\n\tfor(int i = 0; i < q; i++){\n\t\tSegment s1, s2;\n\t\tcin>>s1.p1.x>>s1.p1.y>>s1.p2.x>>s1.p2.y;\n\t\tcin>>s2.p1.x>>s2.p1.y>>s2.p2.x>>s2.p2.y;\n\t\t\n\t\tcout<<getDistance(s1, s2)<<endl;\n\t}\n\t\n\t\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#ifndef _WIN32\n#include<iostream>\n#endif\n\n#include <complex>\n#include <vector>\n#include <utility>\n#include <tuple>\n#include <algorithm>\n#include <iomanip>\nusing namespace std;\n\n\n#define FOR(i,bg,ed) for(int i = (bg);<(ed);i++)\n#define REP(i,n) FOR(i,0,n)\n#define ALL(v) (v).begin(),(v).end()\n#define fi first\n#define se second\n#define pb push_back\n\n#define IL inline\nnamespace geo{\n\ttypedef double D;\n\ttypedef bool B;\n\ttypedef complex<D> P;\n#define X real()\n#define Y imag()\n\tB comp(const P& l, const P& r)\n\t{\n\t\treturn (l.X == r.X) ? l.Y < r.Y : l.X < r.X;\n\t}\n\ttypedef pair<P, P> L;\n\ttypedef pair<P, P> LS;\n\ttypedef pair<P, D> C;\n\ttypedef vector<P> Poly;\n\tconst D EPS = 1e-8;\n\n\t//Decomposition Macro\n#define DCI(a,b,l) P(a),(b);tie(a,b)=l;\n#define DCc(a,b,c) P(a);D(b);tie(a,b)=c;\n\n\t//A dot B\n\tIL D dot(P a, P b)\n\t{\n\t\treturn a.X*b.X + a.Y*b.Y;\n\t}\n\tIL D cross(P a, P b)\n\t{\n\t\treturn a.X*b.Y - a.Y*b.X;\n\t}\n\tIL D ccw(P a, P b, P c)\n\t{\n\t\treturn cross(b - a, c - a);\n\t}\n\n\tIL int sgn(P a, P b, P c){\n\t\tif (cross(b - a, c - a) > EPS)return 1;\n\t\tif (cross(b - a, c - a) < -EPS)return -1;\n\t\tif (dot(b - a, c - a) < -EPS)return 2;\n\t\tif (dot(a - b, c - b) < -EPS)return -2;\n\t\treturn 0;\n\t}\n\tIL D signed_distance_P_L(P p, L l){\n\t\tDCI(a, b, l);\n\t\treturn cross(b - a, p - a) / abs(b - a);\n\t}\n\tIL D dinstance_P_L(P p, L l){\n\t\treturn abs(signed_distance_P_L(p, l));\n\t}\n\tIL D distance_P_LS(P p, LS ls){\n\t\tDCI(a, b, ls);\n\t\tif (dot(b - a, p - a) < EPS)return abs(p - a);\n\t\tif (dot(a - b, p - b) < EPS)return abs(p - b);\n\t\treturn abs(cross(b - a, p - a)) / abs(b - a);\n\t}\n\n\tIL B is_L_L(L p, L q){\n\t\tDCI(a, b, p);\n\t\tDCI(c, d, q);\n\t\treturn abs(cross(a - b, c - d))>EPS ||\n\t\t\tabs(cross(a - b, d - b)) < EPS; \n\t}\n\tIL B is_LS_LS(LS p, LS q){\n\t\tDCI(a, b, p);\n\t\tDCI(c, d, q);\n\t\treturn sgn(a, b, c) * sgn(a, b, d) <= 0 &&\n\t\t\tsgn(c, d, a) * sgn(c, d, b) <= 0;\n\t}\n\tIL D distance_LS_LS(LS p, LS q){\n\t\tif (is_LS_LS(p, q))\n\t\t\treturn 0;\n\t\treturn\n\t\t\tmin({ distance_P_LS(p.fi, q) ,\n\t\t\t distance_P_LS(p.se, q) ,\n\t\t\t distance_P_LS(q.fi, p) ,\n\t\t\t distance_P_LS(q.se, p) });\n\t}\n\tIL P cross_point_L_L(L p, L q){\n\t\tDCI(a, b, p);\n\t\tD d1 = signed_distance_P_L(a, q);\n\t\tD d2 = signed_distance_P_L(b, q);\n\t\treturn (a*d2 - b*d1) / (d2 - d1);\n\t}\n}\n\nusing namespace geo;\n\n\nint main()\n{\n\tint n;\n\n\tcin >> n;\n\twhile (n--){\n\t\tD x1, x2, x3, y1, y2, y3, x4, y4;\n\n\t\tcin >> x1 >> y1 >> x2 >> y2 >> x3 >> y3 >> x4 >> y4;\n\n\t\tP p(x1,y1),q(x2,y2),r(x3,y3),s(x4,y4);\n\n\t\tLS pq(p, q), rs(r, s);\n\t\tcout<<fixed;\n\t\tcout << setprecision(11);\n\n\t\tauto ans = distance_LS_LS(pq, rs);\n\t\tcout << ans  << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <vector>\n#include <algorithm>\n#include <iomanip>\n#include <cstring>\n#include <cstdio>\n// 计算几何模板\n//二维平面\nusing namespace std;\nconst double eps = 1e-8;\nconst double inf = 1e20;\nconst double pi = acos(-1.0);\nconst int maxp = 1010;\n//Compares a double to zero\nint sgn(double x){\n    if(fabs(x) < eps)return 0;\n    if(x < 0)return-1;\n    else return 1;\n}\n//square of a double\ninline double sqr(double x){return x*x;}\n\nstruct Point{\n    double x,y;\n    Point(){}\n    Point(double _x,double _y){\n        x = _x;\n        y = _y;\n    }\n    void input(){\n        scanf(\"%lf%lf\",&x,&y);\n    }\n    void output(){\n        printf(\"%.2f-%.2f\\n\",x,y);\n    }\n    bool operator == (Point b)const{\n        return sgn(x-b.x) == 0 && sgn(y-b.y) == 0;\n    }\n    bool operator < (Point b)const{\n        return sgn(x-b.x)== 0-sgn(y-b.y)?0:x<b.x;\n    }\n    Point operator-(const Point &b)const{\n        return Point(x-b.x,y-b.y);\n    }\n    //叉积\n    double operator ^(const Point &b)const{\n        return x*b.y-y*b.x;\n    }\n    //点积\n    double operator *(const Point &b)const{\n        return x*b.x + y*b.y;\n    }\n    //返回长度\n    double len(){\n        return hypot(x,y);//库函数\n    }\n    //返回长度的平方\n    double len2(){\n        return x*x + y*y;\n    }\n    //返回两点的距离\n    double distance(Point p){\n        return hypot(x-p.x,y-p.y);\n    }\n    Point operator +(const Point &b)const{\n        return Point(x+b.x,y+b.y);\n    }\n    Point operator *(const double &k)const{\n        return Point(x*k,y*k);\n    }\n    Point operator /(const double &k)const{\n        return Point(x/k,y/k);\n    }\n    //计算 pa 和 pb 的夹角\n    //就是求这个点看 a,b 所成的夹角\n    //测试 LightOJ1203\n    double rad(Point a,Point b){\n        Point p = *this;\n        return fabs(atan2( fabs((a-p)^(b-p)),(a-p)*(b-p) ));\n    }\n    //化为长度为 r 的向量\n    Point trunc(double r){\n        double l = len();\n        if(!sgn(l))return *this;\n        r /= l;\n        return Point(x*r,y*r);\n    }\n    //逆时针旋转 90 度\n    Point rotleft(){\n        return Point(-y,x);\n    }\n    //顺时针旋转 90 度\n    Point rotright(){\n        return Point(y,-x);\n    }\n    //绕着 p 点逆时针旋转 angle\n    Point rotate(Point p,double angle){\n        Point v = (*this)-p;\n        double c = cos(angle), s = sin(angle);\n        return Point(p.x + v.x*c-v.y*s,p.y + v.x*s + v.y*c);\n    }\n};\nstruct Line{\n    Point s,e;\n    Line(){}\n    Line(Point _s,Point _e){\n        s = _s;\n        e = _e;\n    }\n    bool operator ==(Line v){\n        return (s == v.s)&&(e == v.e);\n    }\n    //根据一个点和倾斜角 angle 确定直线,0<=angle<pi\n    Line(Point p,double angle){\n        s = p;\n        if(sgn(angle-pi/2) == 0){\n            e = (s + Point(0,1));\n        }\n        else{\n            e = (s + Point(1,tan(angle)));\n        }\n    }\n    //ax+by+c=0\n    Line(double a,double b,double c){\n        if(sgn(a) == 0){\n            s = Point(0,-c/b);\n            e = Point(1,-c/b);\n        }\n        else if(sgn(b) == 0){\n            s = Point(-c/a,0);\n            e = Point(-c/a,1);\n        }\n        else{\n            s = Point(0,-c/b);\n            e = Point(1,(-c-a)/b);\n        }\n    }\n    void input(){\n        s.input();\n        e.input();\n    }\n    void adjust(){\n        if(e < s){\n            swap(s,e);\n        }\n    }\n    //求线段长度\n    double length(){\n        return s.distance(e);\n    }\n    //返回直线倾斜角 0<=angle<pi\n    double angle(){\n        double k = atan2(e.y-s.y,e.x-s.x);\n        if(sgn(k) < 0)k += pi;\n        if(sgn(k-pi) == 0)k-= pi;\n        return k;\n    }\n    //点和直线关系\n    //1 在左侧\n    //2 在右侧\n    //3 在直线上\n    int relation(Point p){\n        int c = sgn((p-s)^(e-s));\n        if(c < 0)return 1;\n        else if(c > 0)return 2;\n        else return 3;\n    }\n    // 点在线段上的判断\n    bool pointonseg(Point p){\n        return sgn((p-s)^(e-s)) == 0 && sgn((p-s)*(p-e)) <= 0;\n    }\n    //两向量平行 (对应直线平行或重合)\n    bool parallel(Line v){\n        return sgn((e-s)^(v.e-v.s)) == 0;\n    }\n    //两线段相交判断\n    //2 规范相交\n    //1 非规范相交\n    //0 不相交\n    int segcrossseg(Line v){\n        int d1 = sgn((e-s)^(v.s-s));\n        int d2 = sgn((e-s)^(v.e-s));\n        int d3 = sgn((v.e-v.s)^(s-v.s));\n        int d4 = sgn((v.e-v.s)^(e-v.s));\n        if( (d1^d2)==-2 && (d3^d4)==-2 )return 2;\n        return (d1==0 && sgn((v.s-s)*(v.s-e))<=0) ||\n               (d2==0 && sgn((v.e-s)*(v.e-e))<=0) ||\n               (d3==0 && sgn((s-v.s)*(s-v.e))<=0) ||\n               (d4==0 && sgn((e-v.s)*(e-v.e))<=0);\n    }\n    //直线和线段相交判断\n    //-*this line -v seg\n    //2 规范相交\n    //1 非规范相交\n    //0 不相交\n    int linecrossseg(Line v){\n        int d1 = sgn((e-s)^(v.s-s));\n        int d2 = sgn((e-s)^(v.e-s));\n        if((d1^d2)==-2) return 2;\n        return (d1==0||d2==0);\n    }\n    //两直线关系\n    //0 平行\n    //1 重合\n    //2 相交\n    int linecrossline(Line v){\n        if((*this).parallel(v))\n            return v.relation(s)==3;\n        return 2;\n    }\n    //求两直线的交点\n    //要保证两直线不平行或重合\n    Point crosspoint(Line v){\n        double a1 = (v.e-v.s)^(s-v.s);\n        double a2 = (v.e-v.s)^(e-v.s);\n        return Point((s.x*a2-e.x*a1)/(a2-a1),(s.y*a2-e.y*a1)/(a2-a1\n        ));\n    }\n    //点到直线的距离\n    double dispointtoline(Point p){\n        return fabs((p-s)^(e-s))/length();\n    }\n    //点到线段的距离\n    double dispointtoseg(Point p){\n        if(sgn((p-s)*(e-s))<0 || sgn((p-e)*(s-e))<0)\n            return min(p.distance(s),p.distance(e));\n        return dispointtoline(p);\n    }\n    //返回线段到线段的距离\n    //前提是两线段不相交，相交距离就是 0 了\n    double dissegtoseg(Line v){\n        return min(min(dispointtoseg(v.s),dispointtoseg(v.e)),min(v.dispointtoseg(s),v.dispointtoseg(e)));\n    }\n    //返回点 p 在直线上的投影\n    Point lineprog(Point p){\n        return s + ( ((e-s)*((e-s)*(p-s)))/((e-s).len2()) );\n    }\n    //返回点 p 关于直线的对称点\n    Point symmetrypoint(Point p){\n        Point q = lineprog(p);\n        return Point(2*q.x-p.x,2*q.y-p.y);\n    }\n};\n\n\nint main(){\n    int t;\n    cin>>t;\n    while(t--){\n        Line a,b;\n        cin>>a.s.x>>a.s.y>>a.e.x>>a.e.y>>b.s.x>>b.s.y>>b.e.x>>b.e.y;\n        double ans=0.0;\n        if(a.segcrossseg(b)==0) ans=a.dissegtoseg(b);\n        cout<<fixed<<setprecision(10)<<ans<<\"\\n\";\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <utility>\n#include <vector>\n#include <complex>\n#include <cmath>\n\nusing namespace std;\n\nstatic const double EPS=1e-12;\nstatic const double INF=1e24;\n\nusing Point=complex<double>;\nusing Plane=vector<Point>;\n\nbool operator<(const Point &a, const Point &b) {\n    return real(a)!=real(b)? real(a)<real(b) : imag(a)<imag(b);\n}\n\ndouble cross_prod(const Point &a, const Point &b) {\n    return imag(conj(a)*b);\n}\n\ndouble dot_prod(const Point &a, const Point &b) {\n    return real(conj(a)*b);\n}\n\nenum {\n    ONLINE_FRONT=-2,\n    CLOCKWISE,\n    ON_SEGMENT,\n    COUNTER_CLOCKWISE,\n    ONLINE_BACK,\n};\n\nint ccwise(const Point &a, Point b, Point c) {\n    b -= a; c -= a;\n\n    if (cross_prod(b, c) > 0) {\n        return COUNTER_CLOCKWISE;\n    } else if (cross_prod(b, c) < 0) {\n        return CLOCKWISE;\n    } else if (dot_prod(b, c) < 0) {\n        return ONLINE_BACK;\n    } else if (norm(b) < norm(c)) {\n        return ONLINE_FRONT;\n    } else {\n        return ON_SEGMENT;\n    }\n}\n\nstruct Line: public pair<Point, Point> {\n    Line() {}\n    Line(const Point &a, const Point &b) {\n        first = a;\n        second = b;\n    }\n    int _ccwise(const Point &rhs) const {\n        return ccwise(first, second, rhs);\n    }\n    bool intersects(const Line &rhs) const {\n        if (abs(cross_prod(second-first, rhs.second-rhs.first)) > EPS)\n            // non parallel\n            return true;\n\n        // same line\n        return abs(cross_prod(second-first, rhs.first-first)) < EPS;\n    }\n    bool intersects(const Point &rhs) const {\n        return abs(cross_prod(second-rhs, first-rhs)) < EPS;\n    }\n};\n\nstruct LineSeg: public pair<Point, Point> {\n    LineSeg() {}\n    LineSeg(const Point &a, const Point &b) {\n        first = a;\n        second = b;\n    }\n    int _ccwise(const Point &rhs) const {\n        return ccwise(first, second, rhs);\n    }\n    bool intersects(const Line &rhs) {\n        return (\n            cross_prod(rhs.second-rhs.first, first-rhs.first) *\n            cross_prod(rhs.second-rhs.first, second-rhs.first)\n        ) < EPS;\n    }\n    bool intersects(const LineSeg &rhs) const {\n        if (_ccwise(rhs.first) * _ccwise(rhs.second) > 0)\n            return false;\n\n        return rhs._ccwise(first) * rhs._ccwise(second) <= 0;\n    }\n    bool intersects(const Point &rhs) const {\n        return abs(first-rhs)+abs(second-rhs)-abs(second-first) < EPS;\n    }\n};\n\ndouble get_distance(const LineSeg &l, const Point &p) {\n    if (dot_prod(l.second-l.first, p-l.first) < -EPS) {\n        return abs(p-l.first);\n    } else if (dot_prod(l.first-l.second, p-l.second) < -EPS) {\n        return abs(p-l.second);\n    }\n\n    return abs(cross_prod(l.second-l.first, p-l.first))/abs(l.second-l.first);\n}\n\ndouble get_distance(const LineSeg &l, const LineSeg &m) {\n    if (l.intersects(m))\n        return 0.0;\n\n    return min(\n        min(get_distance(l, m.first), get_distance(l, m.second)),\n        min(get_distance(m, l.first), get_distance(m, l.second))\n    );\n}\n\nint main() {\n    size_t q;\n    scanf(\"%zu\", &q);\n    for (size_t i=0; i<q; ++i) {\n        double x, y;\n        scanf(\"%lf %lf\", &x, &y);\n        Point p0(x, y);\n\n        scanf(\"%lf %lf\", &x, &y);\n        Point p1(x, y);\n\n        scanf(\"%lf %lf\", &x, &y);\n        Point p2(x, y);\n\n        scanf(\"%lf %lf\", &x, &y);\n        Point p3(x, y);\n\n        LineSeg l(p0, p1), m(p2, p3);\n        printf(\"%.9f\\n\", get_distance(l, m));\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "// CGL_2_D.cpp\n//\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst double EPS = 1e-10;\nbool EQ(double a, double b){return fabs(a-b) < EPS;}\ntypedef complex<double> Point;\n#define X real()\n#define Y imag()\n\nstruct Segment {\n  Point p1, p2;\n  Segment(){};\n  Segment(Point p1, Point p2) : p1(p1), p2(p2) {};\n};\ntypedef Segment Line;\ndouble dot(Point a, Point b){return real(conj(a) * b);}\ndouble cross(Point a, Point b){return imag(conj(a) * b);}\n\nPoint project(Segment s, Point p) {\n  double r = dot(p - s.p1, s.p2 - s.p1) / norm(s.p2 - s.p1);\n  return s.p1 + (s.p2 - s.p1) * r;\n}\n\nbool isParallel(Line l1, Line l2) {\n  return EQ(cross(l1.p1 - l1.p2, l2.p1 - l2.p2), 0.0);\n}\n\nconst int COUNTER_CLOCKWISE = +1;\nconst int CLOCKWISE = -1;\nconst int ONLINE_BACK = +2;\nconst int ONLINE_FRONT = -2;\nconst int ON_SEGMENT = 0;\nint ccw(Point a, Point b, Point c) {\n  Point x = b - a;\n  Point y = c - a;\n  if(cross(x, y) > EPS) return COUNTER_CLOCKWISE;\n  if(cross(x, y) < -EPS) return CLOCKWISE;\n  if(dot(x, y) < -EPS) return ONLINE_BACK;\n  if(norm(x) < norm(y)) return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\n\nbool intersectSS(Segment s1, Segment s2) {\n  return ccw(s1.p1, s1.p2, s2.p1) * ccw(s1.p1, s1.p2, s2.p2) <= 0 &&\n    ccw(s2.p1, s2.p2, s1.p1) * ccw(s2.p1, s2.p2, s1.p2) <= 0;\n}\n\ndouble distancePP(Point a, Point b) {\n  return abs(a - b);\n}\n\ndouble distanceLP(Line l, Point p) {\n  return distancePP(p, project(l, p));\n}\n\ndouble distanceSP(Segment s, Point p) {\n  if(dot(s.p2 - s.p1, p - s.p1) < -EPS) return distancePP(p, s.p1);\n  if(dot(s.p1 - s.p2, p - s.p2) < -EPS) return distancePP(p, s.p2);\n  return distanceLP(s, p);\n}\n\ndouble distanceSS(Segment s1, Segment s2) {\n  if(intersectSS(s1, s2)) return 0.0;\n  return min(min(distanceSP(s1, s2.p1), distanceSP(s1, s2.p2)),\n             min(distanceSP(s2, s1.p1), distanceSP(s2, s1.p2)));\n}\n\nint main() {\n  int q;\n  cin>>q;\n  int a,b,c,d,e,f,g,h;\n  for(int i=0;i<q;++i){\n    cin>>a>>b>>c>>d>>e>>f>>g>>h;\n    Line s1(Point(a,b), Point(c,d));\n    Line s2(Point(e,f), Point(g,h));\n    printf(\"%.10f\\n\", distanceSS(s1,s2));\n  }\n\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n\nstatic const int COUNTER_CLOCKWISE=1;\nstatic const int CLOCKWISE=-1;\nstatic const int ONLINE_BACK=2;\nstatic const int ONLINE_FRONT=-2;\nstatic const int ON_SEGMENT=0;\n\nclass Point {\npublic:\n    double x,y;\n\n    Point(double x=0,double y=0):x(x),y(y) {}\n    Point operator + (Point p) {return Point(x+p.x,y+p.y);}\n    Point operator - (Point p) {return Point(x-p.x,y-p.y);}\n    Point operator * (double a) {return Point(a*x,a*y);}\n    Point operator / (double a) {return Point(x/a,y/a);}\n\n    double abs() {return sqrt(norm());}\n    double norm() {return x*x+y*y;}\n\n    bool operator<(const Point &p) const {\n        return x!=p.x ? x<p.x : y<p.y;\n    }\n    bool operator==(const Point &p) const {\n        return fabs(x-p.x)<EPS && fabs(y-p.y)<EPS;\n    }\n};\n\ntypedef Point Vector;\nstruct Segment {Point p1,p2;};\ntypedef Segment Line;\n\nclass Circle {\npublic:\n    Point c;\n    double r;\n    Circle(Point c=Point(),double r=0.0): c(c),r(r) {}\n};\n\ndouble dot(Vector a,Vector b) {\n    return  a.x*b.x+a.y*b.y;\n}\n\ndouble cross (Vector a,Vector b) {\n    return a.x*b.y-a.y*b.x;\n}\n\ndouble getDistance(Point a,Point b) {\n    return (a-b).abs();\n}\n\ndouble getDistanceLP(Line l,Point p) {\n    return abs(cross(l.p2-l.p1,p-l.p1)/(l.p2-l.p1).abs());\n}\n\ndouble getDistanceSP(Segment s,Point p) {\n    if(dot(s.p2-s.p1,p-s.p1)<0.0) return (p-s.p1).abs();\n    if(dot(s.p1-s.p2,p-s.p2)<0.0) return (p-s.p2).abs();\n    return getDistanceLP(s,p);\n}\n\nint ccw(Point p0,Point p1,Point p2) {\n    Vector a=p1-p0;\n    Vector b=p2-p0;\n    if(cross(a,b)>EPS) return COUNTER_CLOCKWISE;\n    if(cross(a,b)<EPS) return CLOCKWISE;\n    if(dot(a,b)<-EPS) return ONLINE_BACK;\n    if(a.norm()<b.norm()) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\nbool intersect(Point p1,Point p2,Point p3,Point p4) {\n    return (ccw(p1,p2,p3)*ccw(p1,p2,p4)<=0 && ccw(p3,p4,p1)*ccw(p3,p4,p2)<=0);\n}\n\nbool intersect(Segment s1,Segment s2) {\n    return intersect(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n\ndouble getDistance(Segment s1,Segment s2) {\n    if(intersect(s1,s2)) return 0.0;\n    return min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n}\n\nint main(void) {\n    int q;cin>>q;\n    while(q) {\n        Segment s1,s2;\n        cin>>s1.p1.x>>s1.p1.y>>s1.p2.x>>s1.p2.y>>s2.p1.x>>s2.p1.y>>s2.p2.x>>s2.p2.y;\n        printf(\"%.10f\\n\",getDistance(s1,s2));\n        q--;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> Point;\ntypedef pair<Point, Point> Line;\nconst double EPS = 1e-18;\n\n// 内積 |a||b|cosθ\ndouble dot(Point a, Point b){\n\t// return a.real() * b.real() + a.imag() * b.imag();\n\treturn (conj(a) * b).real();\n}\n// 外積、符号付面積の２倍　|a||b|sinθ\ndouble cross(Point a, Point b){\n\t// return a.real() * b.imag() - a.imag() * b.real();\n\treturn (conj(a) * b).imag();\n}\n// 点と直線の距離\ndouble line_to_point_dis(Line l, Point p){\n    Point a = l.first, b = l.second, c = p;\n    return fabs(cross(c - a, b - a)) / fabs(abs(b - a));\n}\n// 線分と直線の距離\ndouble seg_to_point_dis(Line l, Point p){\n    Point a = l.first, b = l.second, c = p;\n    if(dot(b - a, c - a) < EPS) return abs(c - a);\n    if(dot(a - b, c - b) < EPS) return abs(c - b);\n    return line_to_point_dis(l, p);\n}\n// 線分と線分の距離\ndouble seg_to_seg_dis(Line a, Line b){\n    double res = seg_to_point_dis(a, b.first);\n    res = min(res, seg_to_point_dis(a, b.second));\n    res = min(res, seg_to_point_dis(b, a.first));\n    res = min(res, seg_to_point_dis(b, a.second));\n    return res;\n}\n\nint main(){\n    int q;\n    cin >> q;\n    for(int i = 0; i < q; i++){\n        double x, y;\n        Point p[4];\n        for(int j = 0; j < 4; j++){\n            cin >> x >> y;\n            p[j] = {x, y};\n        }\n        Line s1 = {p[0], p[1]};\n        Line s2 = {p[2], p[3]};\n        double len = seg_to_seg_dis(s1, s2);\n        printf(\"%.10f\\n\", len);\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "//include\n//------------------------------------------\n#include <vector>\n#include <list>\n#include <map>\n#include <climits>\n#include <set>\n#include <deque>\n#include <stack>\n#include <bitset>\n#include <algorithm>\n#include <functional>\n#include <numeric>\n#include <utility>\n#include <sstream>\n#include <iostream>\n#include <iomanip>\n#include <cstdio>\n#include <cmath>\n#include <cstdlib>\n#include <cctype>\n#include <string>\n#include <cstring>\n#include <ctime>\n#include <queue>\n#include <random>\n#include <cctype>\n#include <complex>\n#include <regex>\n\nusing namespace std;\n\n#define C_MAX(a, b) ((a)>(b)?(a):(b))\n#define SHOW_VECTOR(v) {std::cerr << #v << \"\\t:\";for(const auto& xxx : v){std::cerr << xxx << \" \";}std::cerr << \"\\n\";}\n#define SHOW_MAP(v) {std::cerr << #v << endl; for(const auto& xxx: v){std::cerr << xxx.first << \" \" << xxx.second << \"\\n\";}}\n\n#define EPS 1e-8\n#define EQ(a, b) (abs((a)-(b)) < EPS)\n\ninline int signum(double x) { return (abs(x) < EPS) ? 0 : (x > 0) ? 1 : -1; }\n\ntypedef complex<double> P;\n\ndouble dot(P a, P b) {\n    return a.real() * b.real() + a.imag() * b.imag();\n}\n\ndouble cross(P a, P b) {\n    return a.real() * b.imag() - a.imag() * b.real();\n}\n\nint ccw(P a, P b, P c) {\n    b -= a;\n    c -= a;\n    int sign = signum(cross(b, c));\n    if (sign != 0) return sign;\n    if (signum(dot(b, c)) == -1) return -2;\n    if (abs(b) < abs(c)) return 2;\n    return 0;\n}\n\ndouble dis_p_li(P a, P b, P c) {\n    b -= a;\n    c -= a;\n    return abs(cross(b, c)) / abs(b);\n}\n\ndouble dis_p_li_ss(P a, P b, P c) {\n    P x1 = b - a;\n    P y1 = c - a;\n    P x2 = a - b;\n    P y2 = c - b;\n    if (signum(dot(x1, y1)) < 0) return abs(y1);\n    if (signum(dot(x2, y2)) < 0) return abs(y2);\n    return dis_p_li(a, b, c);\n}\n\nbool is_intersected_li_ss(P a1, P a2, P b1, P b2) {\n    return (ccw(a1, a2, b1) * ccw(a1, a2, b2) <= 0) &&\n           (ccw(b1, b2, a1) * ccw(b1, b2, a2) <= 0);\n}\n\ndouble dis_li_s_li_s(P a1, P a2, P b1, P b2) {\n    if (is_intersected_li_ss(a1, a2, b1, b2)) return 0.0;\n    return min({\n                       dis_p_li_ss(a1, a2, b1),\n                       dis_p_li_ss(a1, a2, b2),\n                       dis_p_li_ss(b1, b2, a1),\n                       dis_p_li_ss(b1, b2, a2)\n               });\n}\n\nint main() {\n\n    int Q;\n    cin >> Q;\n\n    while (Q--) {\n\n        vector<P> p(4);\n        for (int i = 0; i < 4; i++) {\n            double x, y;\n            cin >> x >> y;\n            p[i] = P(x, y);\n        }\n        double ans = dis_li_s_li_s(p[0], p[1], p[2], p[3]);\n        cout << fixed << setprecision(10) << ans << endl;\n    }\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define rep(i,s,n) for (int i = (int)s; i < (int)n; i++)\n#define ll long long\n#define pb push_back\n#define All(x) x.begin(), x.end()\n#define Range(x, i, j) x.begin() + i, x.begin() + j\n#define lbidx(x, y) lower_bound(x.begin(), x.end(), y) - x.begin()\n#define ubidx(x, y) upper_bound(x.begin(), x.end(), y) - x.begin()\n#define BiSearchRangeNum(x, y, z) lower_bound(x.begin(), x.end(), z) - lower_bound(x.begin(), x.end(), y);\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nclass Point {\n  public:\n  double x, y;\n\n  Point(double x = 0, double y = 0): x(x), y(y) {}\n\n  Point operator + (Point p) { return Point(x + p.x, y + p.y); }\n  Point operator - (Point p) { return Point(x - p.x, y - p.y); }\n  Point operator * (double a) { return Point(a * x, a * y); }\n  Point operator / (double a) { return Point(x / a, y / a); }\n\n  double abs() { return sqrt(norm()); }\n  double norm() { return x * x + y * y; }\n\n  bool operator < (const Point &p) const {\n    return x != p.x ? x < p.x : y < p.y;\n  }\n\n  bool operator == (const Point &p) const {\n    return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n  }\n};\n\nstruct Segment {\n  Point p1, p2;\n};\n\ntypedef Point Vector;\ntypedef Segment Line;\n\ndouble norm(Vector a) {\n  return a.x * a.x + a.y * a.y;\n};\n\ndouble abs(Vector a) {\n  return sqrt(norm(a));\n};\n\n// 内積\ndouble dot(Vector a, Vector b) {\n  return a.x * b.x + a.y * b.y;\n};\n\n// 外積\ndouble cross(Vector a, Vector b) {\n  return a.x * b.y - a.y * b.x;\n};\n\n// 直交判定\nbool isOrthogonal(Vector a, Vector b) {\n  return equals(dot(a, b), 0.0);\n};\n\n// 並行判定\nbool isParallel(Vector a, Vector b) {\n  return equals(cross(a, b), 0.0);\n};\n\n// 射影\nPoint project(Segment s, Point p) {\n  Vector base = s.p2 - s.p1;\n  double r = dot(p - s.p1, base) / base.norm();\n  return s.p1 + base * r;\n};\n\n// 反射\nPoint reflect(Segment s, Point p) {\n  return p + (project(s, p) - p) * 2.0;\n};\n\n// 点と点の距離\ndouble getDistance(Point a, Point b) {\n  return abs(a - b);\n};\n\n// 点と直線の距離\ndouble getDistanceLP(Line l, Point p) {\n  return abs(cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1));\n};\n\n// 点と線分の距離\ndouble getDistanceSP(Segment s, Point p) {\n  if (dot(s.p2 - s.p1, p - s.p1) < 0.0) return abs(p - s.p1);\n  if (dot(s.p1 - s.p2, p - s.p2) < 0.0) return abs(p - s.p2);\n  return getDistanceLP(s, p);\n};\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\n// 二つのベクトルの位置関係\nint ccw(Point p0, Point p1, Point p2) {\n  Vector a = p1 - p0;\n  Vector b = p2 - p0;\n  if (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n  if (cross(a, b) < -EPS) return CLOCKWISE;\n  if (dot(a, b) < -EPS) return ONLINE_BACK;\n  if (a.norm() < b.norm()) return ONLINE_FRONT;\n  return ON_SEGMENT;\n};\n\n// 線分の交差判定\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n  return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 && ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n};\n\nbool intersect(Segment s1, Segment s2) {\n  return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n};\n\n// 線分と線分の距離\ndouble getDistance(Segment s1, Segment s2) {\n  if (intersect(s1, s2)) return 0.0;\n  return min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)), min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n};\n\nint main() {\n  int q;\n  cin >> q;\n  Point p1, p2, p3, p4;\n  Segment s1, s2;\n  rep(i, 0, q) {\n    cin >> p1.x >> p1.y >> p2.x >> p2.y >> p3.x >> p3.y >> p4.x >> p4.y;\n    s1.p1 = p1;\n    s1.p2 = p2;\n    s2.p1 = p3;\n    s2.p2 = p4;\n    printf(\"%.10f\\n\", getDistance(s1, s2));\n  }\n  return 0;\n};\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <array>\n#include <vector>\n#include <cmath>\n\nconst double EPSILON = 1e-10;\n\ninline bool equals(double a, double b) {\n    return std::fabs(a - b) < EPSILON;\n}\n\nstruct Point {\n    double x;\n    double y;\n\n    bool operator < (const Point& p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point& p) const {\n        return equals(x, p.x) && equals(y, p.y);\n    }\n};\n\nPoint operator + (const Point& p1, const Point& p2) {\n    return Point{p1.x + p2.x, p1.y + p2.y};\n}\n\nPoint operator - (const Point& p1, const Point& p2) {\n    return Point{p1.x - p2.x, p1.y - p2.y};\n}\n\nPoint operator * (const Point& p1, double k) {\n    return Point{p1.x * k, p1.y * k};\n}\n\nstruct Segment {\n    Point p1, p2;\n};\n\nstruct Circle {\n    Point center;\n    double radius;\n};\n\nusing Vector = Point;\nusing Line = Segment;\nusing Polygon = std::vector<Point>;\n\n\ndouble norm(const Vector& p) {\n    return p.x * p.x + p.y + p.y;\n}\n\ndouble abs(const Vector& p) {\n    return std::sqrt(norm(p));\n}\n\ndouble dot(const Vector& a, const Vector& b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(const Vector& a, const Vector& b) {\n    return a.x * b.y - a.y * b.x;\n}\n\n\nVector projection(const Segment& s, const Point& p) {\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / norm(base);\n    return s.p1 + base * r;\n}\n\nVector reflection(const Segment& s, const Point& p) {\n    auto proj = projection(s, p);\n    return p + (projection(s, p) - p) * 2.0;\n}\n\nbool is_orthogonal(const Vector& a, const Vector& b) {\n    return equals(dot(a, b), 0.0);\n}\n\nbool is_orthogonal(const Segment& s1, const Segment& s2) {\n    return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nbool is_parallel(const Vector& a, const Vector& b) {\n    return equals(cross(a, b), 0.0);\n}\n\nbool is_parallel(const Segment& s1, const Segment& s2) {\n    return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nenum {\n    COUNTER_CLOCKWISE = 1,\n    CLOCKWISE = -1,\n    ONLINE_BACK = 2,\n    ONLINE_FRONT = -1,\n    ON_SEGMENT = 0,\n};\n\nint ccw(const Point& p0, const Point& p1, const Point& p2) {\n    auto a = p1 - p0;\n    auto b = p2 - p0;\n    if (cross(a, b) > EPSILON) return COUNTER_CLOCKWISE;\n    if (cross(a, b) < -EPSILON) return CLOCKWISE;\n    if (dot(a, b) < -EPSILON) return ONLINE_BACK;\n    if (norm(a) < norm(b)) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\ndouble intersect(const Point& p1, const Point& p2, const Point& p3, const Point& p4) {\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n            ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\n\ndouble intersect(const Segment& s1, const Segment& s2) {\n    return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\ndouble distance(const Point& a, const Point& b) {\n    return abs(a - b);\n}\n\ndouble distanceLP(const Line& l, const Point& p) {\n    return abs(cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1));\n}\n\ndouble distanceSP(const Segment& s, const Point& p) {\n    if (dot(s.p2 - s.p1, p - s.p1) < 0.0) return abs(p - s.p1);\n    if (dot(s.p1 - s.p2, p - s.p2) < 0.0) return abs(p - s.p2);\n    return distanceLP(s, p);\n}\n\ndouble distance(const Segment& s1, const Segment& s2) {\n    using std::min;\n    if (intersect(s1, s2)) return 0.0;\n    return min(min(distanceSP(s1, s2.p1), distanceSP(s1, s2.p2)),\n               min(distanceSP(s2, s1.p1), distanceSP(s2, s1.p2)));\n}\n\n\nint main() {\nusing namespace std;\n\n    int q;\n    cin >> q;\n    for (int i = 0; i < q; ++i) {\n        array<Point, 4> points;\n        for (auto& p : points) {\n            cin >> p.x >> p.y;\n        }\n        Segment s1{points[0], points[1]};\n        Segment s2{points[2], points[3]};\n        cout << distance(s1, s2) << endl;\n    }\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i, n) for (int i = 0; i < (int)(n); i++)\n#define repr(i, n) for (int i = (int)(n); i >= 0; i--)\n#define REP(i, m, n) for (int i = (int)(m); i <= (int)(n); i++)\n#define REPR(i, m, n) for (int i = (int)(m); i >= (int)(n); i--)\n#define all(v) v.begin(), v.end()\ntemplate<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return 1; } return 0; }\ntemplate<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return 1; } return 0; }\nconst long long INF = (1LL<<30);\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a)-(b)) < EPS)\n\nstruct Point{\n  double x, y;\n  Point(double x = 0, double y = 0): x(x), y(y) {}\n\n  Point operator + (Point p) { return Point(x+p.x, y+p.y); }\n  Point operator - (Point p) { return Point(x-p.x, y-p.y); }\n  Point operator * (double a) { return Point(x*a, y*a); }\n  Point operator / (double a) { return Point(x/a, y/a); }\n\n  double abs() { return sqrt(norm()); }\n  double norm() { return x*x + y*y; }\n\n  bool operator < (const Point &p) const{\n    return x != p.x ? x < p.x : y < p.y;\n  }\n\n  bool operator == (const Point &p) const{\n    return fabs(x-p.x) < EPS && fabs(y-p.y) < EPS;\n  }\n};\n\ntypedef Point Vector;\n\nstruct Segment{\n  Point p1, p2;\n};\n\ntypedef Segment Line;\n\ndouble dot(Vector a, Vector b){\n  return a.x*b.x + a.y*b.y;\n}\n\ndouble cross(Vector a, Vector b){\n  return a.x*b.y - a.y*b.x;\n}\n\nPoint project(Segment s, Point p){\n  Vector a = s.p2 - s.p1;\n  Vector b = p - s.p1;\n  return s.p1 + a * (dot(a, b)/a.norm());\n}\n\nPoint reflect(Segment s, Point p){\n  return p + (project(s, p) - p)*2;\n}\n\nstatic const int Counter_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nint ccw(Point p0, Point p1, Point p2){\n  Vector a = p1 - p0;\n  Vector b = p2 - p0;\n  if(cross(a, b) > EPS) return Counter_CLOCKWISE;\n  else if(cross(a, b) < -EPS) return CLOCKWISE;\n  else if(dot(a, b) < -EPS) return ONLINE_BACK;\n  else if(a.norm() < b.norm()) return ONLINE_FRONT;\n  else return ON_SEGMENT;\n}\n\nbool intersect(Point p1, Point p2, Point p3, Point p4){\n  return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n          ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0 );\n}\n\ndouble getDistance(Point a, Point b){\n  Point tmp = a-b;\n  return tmp.abs();\n}\n\ndouble getDistanceLP(Line l, Point p){\n  Vector a = l.p2 - l.p1;\n  Vector b = p - l.p1;\n  return abs(cross(a, b) / a.abs());\n}\n\ndouble getDistanceSP(Segment s, Point p){\n  Vector a = s.p2 - s.p1;\n  Vector b = p - s.p1;\n  double n = dot(a, b) / a.norm();\n  if(0.0 <= n && n <= 1.0) return getDistanceLP(s, p);\n  else return min(getDistance(s.p1, p), getDistance(s.p2, p));\n}\n\ndouble getDistanceSS(Segment s1, Segment s2){\n  if(intersect(s1.p1, s1.p2, s2.p1, s2.p2)) return 0.0;\n  double res = INF;\n  chmin(res, getDistanceSP(s1, s2.p1));\n  chmin(res, getDistanceSP(s1, s2.p2));\n  chmin(res, getDistanceSP(s2, s1.p1));\n  chmin(res, getDistanceSP(s2, s1.p2));\n  return res;\n}\n\nint main(){\n  int q;\n  cin >> q;\n\n  rep(i, q){\n    double x1, y1, x2, y2;\n    double x3, y3, x4, y4;\n    cin >> x1 >> y1 >> x2 >> y2;\n    cin >> x3 >> y3 >> x4 >> y4;\n    Point p1 = Point(x1, y1);\n    Point p2 = Point(x2, y2);\n    Point p3 = Point(x3, y3);\n    Point p4 = Point(x4, y4);\n    Segment s1 = {p1, p2};\n    Segment s2 = {p3, p4};\n    cout << fixed << setprecision(10);\n    cout << getDistanceSS(s1, s2) << endl;\n  }\n\n  return 0;\n\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<climits>\n#include<iomanip>\n#include<cstdio>\n#include<vector>\n#include<queue>\n#include<stack>\n#include<cmath>\n#include<list>\n#include<map>\n#include<set>\nusing namespace std;\n\ntypedef vector<int> VI;\ntypedef vector<VI> VVI;\ntypedef vector<string> VS;\ntypedef stack<int> SI;\ntypedef queue<int> QI;\ntypedef list<int> LI;\ntypedef pair<int,int> PII;\ntypedef long long LL;\n\n#define d(x)  cout<<#x<<\" = \"<<(x)<<endl;\n#define ALL(a)  (a).begin(),(a).end()\n#define RALL(a) (a).rbegin(), (a).rend()\n#define PB push_back\n#define MP make_pair\n#define EMP empty()\n#define SZ(a) int((a).size())\n#define EACH(i,c) for(typeof((c).begin()) i=(c).begin(); i!=(c).end(); ++i)\n#define REACH(i,c) for(typeof((c).rbegin()) i=(c).rbegin(); i!=(c).rend(); ++i)\n#define EXIST(s,e) ((s).find(e)!=(s).end())\n#define SORT(c,n) sort(c,c+n)\n#define VSORT(c) sort((c).begin(),(c).end())\n#define FOR(i,a,b) for(int i=(a);i<(b);++i)\n#define REP(i,n)  FOR(i,0,n)\n#define DFOR(i,b,a) for(int i=(b)-1;i>=(a);--i)\n#define DREP(i,n) DFOR(i,n,0)\n#define INF 1000000000\n#define PI  acos(-1.0)\n////////////////////////////////////////////////\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\nclass Vector\n{\npublic:\n\tdouble x,y;\n\tVector(double x=0,double y=0):x(x),y(y){}\n\t\n\tVector operator + (Vector p){return Vector(x+p.x,y+p.y);}\n\tVector operator - (Vector p){return Vector(x-p.x,y-p.y);}\n\tVector operator * (double a){return Vector(x*a,y*a);}\n\tVector operator / (double a){return Vector(x/a,y/a);}\n\t\n\tdouble abs(){return sqrt(norm());}\n\tdouble norm(){return x*x+y*y;}\n\t\n\tbool operator <  (const Vector &p)const{return x!=p.x?x<p.x:y<p.y;}\n\tbool operator == (const Vector &p)const{return fabs(x-p.x)<EPS && fabs(y-p.y<EPS);}\n};\n\ndouble dot(Vector a,Vector b){return a.x*b.x+a.y*b.y;}\ndouble cross(Vector a,Vector b){return a.x*b.y-b.x*a.y;}\n\nint ccw(Vector p0,Vector p1,Vector p2)\n{\n\tVector a=p1-p0;\n\tVector b=p2-p0;\n\tif(cross(a,b)>EPS)return 1;//???????¨???????\n\tif(cross(a,b)<-EPS)return -1;//????¨???????\n\tif(dot(a,b)<-EPS)return 2;//p0?????????\n\tif(a.norm()<b.norm())return -2;//p1????\\\\\n\treturn 0;//?????????\n}\n\nbool intersect(Vector p0,Vector p1,Vector p2,Vector p3)\n{\n\treturn (ccw(p0,p1,p2)*ccw(p0,p1,p3)<=0&&ccw(p2,p3,p0)*ccw(p2,p3,p1)<=0);\n}\n\nint main()\n{\n\tint n;cin>>n;\n\tVector p[4];\n\tcout<<fixed<<setprecision(10);\n\tREP(i,n)\n\t{\n\t\tREP(j,4)cin>>p[j].x>>p[j].y;\n\t\tif(intersect(p[0],p[1],p[2],p[3])){cout<<0<<endl;continue;}\n\t\tdouble a,b,c,d;\n\t\tif(dot(p[1]-p[0],p[2]-p[0])>0&&dot(p[0]-p[1],p[2]-p[1])>0)\n\t\t{\n\t\t\ta=abs(cross(p[1]-p[0],p[2]-p[0]))/(p[1]-p[0]).abs();\n\t\t}\n\t\telse\n\t\t{\n\t\t\ta=min((p[2]-p[0]).abs(),(p[2]-p[1]).abs());\n\t\t}\n\t\t\n\t\tif(dot(p[1]-p[0],p[3]-p[0])>0&&dot(p[0]-p[1],p[3]-p[1])>0)\n\t\t{\n\t\t\tb=abs(cross(p[1]-p[0],p[3]-p[0]))/(p[1]-p[0]).abs();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tb=min((p[3]-p[0]).abs(),(p[3]-p[1]).abs());\n\t\t}\n\t\t\n\t\tif(dot(p[3]-p[2],p[0]-p[2])>0&&dot(p[2]-p[3],p[0]-p[3])>0)\n\t\t{\n\t\t\tc=abs(cross(p[3]-p[2],p[0]-p[2]))/(p[3]-p[2]).abs();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc=min((p[0]-p[2]).abs(),(p[0]-p[3]).abs());\n\t\t}\n\t\t\n\t\tif(dot(p[3]-p[2],p[1]-p[2])>0&&dot(p[2]-p[3],p[1]-p[3])>0)\n\t\t{\n\t\t\td=abs(cross(p[3]-p[2],p[1]-p[2]))/(p[3]-p[2]).abs();\n\t\t}\n\t\telse\n\t\t{\n\t\t\td=min((p[1]-p[2]).abs(),(p[1]-p[3]).abs());\n\t\t}\n\t\t\n\t\tcout<<min(min(a,b),min(c,d))<<endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <vector>\n\n#include <cstdio>\n#include <cmath>\nusing namespace std;\n\ntypedef double D;\nconst D EPS = 1e-8;\nconst D INF = 1e10;\nconst D PI = M_PI;\n\nstruct P {\n    D x, y;\n    P(D xs, D ys) : x(xs), y(ys) { }\n    P() { }\n};\n\nP operator +(P a, P b) { return P(a.x + b.x, a.y + b.y); }\nP operator -(P a, P b) { return P(a.x - b.x, a.y - b.y); }\nP operator *(P p, D s) { return P(p.x * s, p.y * s); }\n\nD inp(P a, P b) { return a.x*b.x + a.y*b.y; }\nD outp(P a, P b) { return a.x*b.y - a.y*b.x; }\n\nD norm(P p) { return inp(p, p); }\nD abs(P p) { return sqrt(norm(p)); }\n\nbool eq(P a, P b) { return abs(a - b) < EPS; }\n\nD arg(P p) { return atan2(p.y, p.x); }\n\nP rot90(P p) {\n    return P(-p.y, p.x);\n}\n\nP rot(P p, D radian) {\n    P q;\n    q.x = cos(radian)*p.x - sin(radian)*p.y;\n    q.y = sin(radian)*p.x + cos(radian)*p.y;\n    return q;\n}\n\nstruct L : vector<P> {\n    L(P a, P b) { push_back(a); push_back(b); }\n    L() { this->resize(2); }\n};\n\nstruct C {\n    P p; D r;\n    C(P ps, D rs) : p(ps), r(rs) { }\n    C() { }\n};\n\n// ??卒???l???????????????p?????????\n// (l??????p??????????????????????????即????????????????賊???????)\n// norm??則?????贈?????????(abs??則??????????????????)\nP projection(L l, P p) {\n    P a = l[1] - l[0];\n    P b = p - l[0];\n    D t = inp(b, a) / norm(a);\n    return l[0] + a * t;\n}\n\n// ??卒???l???????????????p???????属?\n// (l????????????????則属???p??????)\nP reflection(L l, P p) {\n    return p + (projection(l, p) - p) * 2;\n}\n\nint ccw(P a, P b, P c) {\n    b = b - a; c = c - a;\n\n    // a - b - c ????????????????????即???\n    if(outp(b, c) > EPS)  return +1; // ???????即???????\n    if(outp(b, c) < -EPS) return -1; // ????即???????\n\n    // a - b - c ??卒??????????????其??即???\n    if(inp(b, c) < 0)     return +2; // c - a - b\n    if(norm(b) < norm(c)) return -2; // a - b - c\n    return 0;                        // a - c - b\n}\n\n/* intersect Segment Segment */\nbool iSS(L s, L t) {\n    return ccw(s[0], s[1], t[0]) * ccw(s[0], s[1], t[1]) <= 0 &&\n        ccw(t[0], t[1], s[0]) * ccw(t[0], t[1], s[1]) <= 0;\n}\n\n/* intersect Segment Point */\nbool iSP(L s, P p) {\n    return ccw(s[0], s[1], p) == 0;\n}\n\n/* distance Segment Point */\nD dSP(L s, P p) {\n    P r = projection(s, p);\n    if(iSP(s, r)) return abs(r - p);\n    return min(abs(s[0] - p), abs(s[1] - p));\n}\n\n/* distance Segment Segment */\nD dSS(L s, L t) {\n    if(iSS(s, t)) return 0;\n    return min(min(dSP(s, t[0]), dSP(s, t[1])),\n            min(dSP(t, s[0]), dSP(t, s[1])));\n}\n\n/* crosspoint Line Line */\n/* ?????????????????即??????iSS(s,t)????蔵???????????????即 */\nP cLL(L l, L m) {\n    D d = outp(m[1] - m[0], l[1] - l[0]);\n    if(abs(d) < EPS) throw \"s // t !\";\n    return l[0] + (l[1] - l[0]) * outp(m[1] - m[0], m[1] - l[0]) * (1.0 / d);\n}\n\n\nint main() {\n    int Q; cin >> Q;\n    while(Q--) {\n        D x[4], y[4];\n        for(int i = 0; i < 4; i++) {\n            cin >> x[i] >> y[i];\n        }\n\n        L s(P(x[0], y[0]), P(x[1], y[1])), t(P(x[2], y[2]), P(x[3], y[3]));\n\n        D d = dSS(s, t);\n        printf(\"%.9f\\n\", d);\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define dump(n) cout<<\"# \"<<#n<<'='<<(n)<<endl\n#define repi(i,a,b) for(int i=int(a);i<int(b);i++)\n#define peri(i,a,b) for(int i=int(b);i-->int(a);)\n#define rep(i,n) repi(i,0,n)\n#define per(i,n) peri(i,0,n)\n#define all(c) begin(c),end(c)\n#define mp make_pair\n#define mt make_tuple\n\ntypedef unsigned int uint;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int,int> pii;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef vector<ll> vl;\ntypedef vector<vl> vvl;\ntypedef vector<double> vd;\ntypedef vector<vd> vvd;\ntypedef vector<string> vs;\n\nconst int INF=1e9;\nconst int MOD=1e9+7;\nconst double EPS=1e-9;\n\ntemplate<typename T1,typename T2>\nostream& operator<<(ostream& os,const pair<T1,T2>& p){\n\treturn os<<'('<<p.first<<','<<p.second<<')';\n}\ntemplate<typename T>\nostream& operator<<(ostream& os,const vector<T>& a){\n\tos<<'[';\n\trep(i,a.size()) os<<(i?\" \":\"\")<<a[i];\n\treturn os<<']';\n}\n\nint Signum(double x){\n\treturn x<-EPS?-1:x>EPS?1:0;\n}\n\nstruct Point{\n\tdouble x,y;\n\tPoint(){}\n\tPoint(double x,double y):x(x),y(y){}\n\tPoint& operator+=(Point p){\n\t\tx+=p.x,y+=p.y;\n\t\treturn *this;\n\t}\n\tPoint& operator-=(Point p){\n\t\tx-=p.x,y-=p.y;\n\t\treturn *this;\n\t}\n\tPoint& operator*=(double c){\n\t\tx*=c,y*=c;\n\t\treturn *this;\n\t}\n\tPoint& operator/=(double c){\n\t\tx/=c,y/=c;\n\t\treturn *this;\n\t}\n};\nPoint operator+(Point a,Point b){\n\treturn a+=b;\n}\nPoint operator-(Point a,Point b){\n\treturn a-=b;\n}\nPoint operator*(Point a,double c){\n\treturn a*=c;\n}\nPoint operator*(double c,Point a){\n\treturn a*=c;\n}\nPoint operator/(Point a,double c){\n\treturn a/=c;\n}\nbool operator==(Point a,Point b){\n\treturn abs(a.x-b.x)<EPS && abs(a.y-b.y)<EPS;\n}\nbool operator!=(Point a,Point b){\n\treturn !(a==b);\n}\n\ndouble Abs(Point p){\n\treturn sqrt(p.x*p.x+p.y*p.y);\n}\ndouble Abs2(Point p){\n\treturn p.x*p.x+p.y*p.y;\n}\ndouble Arg(Point p){\n\treturn atan2(p.y,p.x);\n}\ndouble Dot(Point a,Point b){\n\treturn a.x*b.x+a.y*b.y;\n}\ndouble Cross(Point a,Point b){\n\treturn a.x*b.y-a.y*b.x;\n}\nPoint Rot(Point p,double t){\n\treturn Point(cos(t)*p.x-sin(t)*p.y,sin(t)*p.x+cos(t)*p.y);\n}\n\nstruct Line{\n\tPoint pos,dir;\n\tLine(){}\n\tLine(Point p,Point d):pos(p),dir(d){}\n\tLine(double px,double py,double dx,double dy):pos(px,py),dir(dx,dy){}\n};\n\nPoint Proj(Line l,Point p){\n\tPoint a=p-l.pos,b=l.dir;\n\treturn l.pos+Dot(a,b)/Abs2(b)*b;\n}\n\nstruct Segment{\n\tPoint pos,dir;\n\tSegment(){}\n\tSegment(Point p,Point d):pos(p),dir(d){}\n\tSegment(double px,double py,double dx,double dy):pos(px,py),dir(dx,dy){}\n\texplicit Segment(Line l):pos(l.pos),dir(l.dir){}\n\texplicit operator Line()const{return Line(pos,dir);}\n};\n\nint CCW(Point a,Point b,Point c){\n\tb-=a,c-=a;\n\tif(int sign=Signum(Cross(b,c)))\n\t\treturn sign; // 1:ccw,-1:cw\n\tif(Dot(b,c)<-EPS)\n\t\treturn -2;   // c-a-b\n\tif(Abs2(b)<Abs2(c)-EPS)\n\t\treturn 2;    // a-b-c\n\treturn 0;        // a-c-b (inclusive)\n}\n\nbool IntersectSS(Segment a,Segment b){\n\tint c1=CCW(a.pos,a.pos+a.dir,b.pos),c2=CCW(a.pos,a.pos+a.dir,b.pos+b.dir);\n\tint c3=CCW(b.pos,b.pos+b.dir,a.pos),c4=CCW(b.pos,b.pos+b.dir,a.pos+a.dir);\n\treturn c1*c2<=0 && c3*c4<=0;\n}\n\ndouble DistLP(Line l,Point p){\n\treturn Abs(Proj(l,p)-p);\n}\ndouble DistSP(Segment s,Point p){\n\tint ccw=CCW(s.pos,s.pos+s.dir,Proj(Line(s),p));\n\tif(ccw==-2) return Abs(s.pos-p);\n\tif(ccw== 2) return Abs(s.pos+s.dir-p);\n\treturn DistLP(Line(s),p);\n}\ndouble DistSS(Segment a,Segment b){\n\tif(IntersectSS(a,b)) return 0;\n\tdouble d1=min(DistSP(a,b.pos),DistSP(a,b.pos+b.dir));\n\tdouble d2=min(DistSP(b,a.pos),DistSP(b,a.pos+a.dir));\n\treturn min(d1,d2);\n}\n\nvoid solve()\n{\n\tPoint a,b,c,d;\n\tcin>>a.x>>a.y>>b.x>>b.y>>c.x>>c.y>>d.x>>d.y;\n\tprintf(\"%.10f\\n\",DistSS(Segment(a,b-a),Segment(c,d-c)));\n}\n\nint main()\n{\n\tint q; cin>>q;\n\trep(_,q) solve();\n}"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <array>\n#include <assert.h>\n#include <bitset>\n#include <chrono>\n#include <cmath>\n#include <complex>\n#include <cstring>\n#include <functional>\n#include <fstream>\n#include <iomanip>\n#include <iostream>\n#include <istream>\n\n#include <map>\n#include <math.h>\n#include <numeric>\n#include <ostream>\n#include <queue>\n#include <set>\n#include <stack>\n#include <string>\n#include <unordered_map>\n#include <unordered_set>\n#include <vector>\n\nnamespace asl\n{\n    \n    template <typename numeric_type>\n    class point\n    {\n    public:\n        numeric_type x, y;\n\n        point(numeric_type x = 0, numeric_type y = 0) : x(x), y(y) {}\n\n        point<numeric_type> &operator+=(const point<numeric_type> &ri)\n        {\n            x += ri.x;\n            y += ri.y;\n            return *this;\n        }\n\n        point<numeric_type> &operator-=(const point<numeric_type> &ri)\n        {\n            x -= ri.x;\n            y -= ri.y;\n            return *this;\n        }\n\n        point<numeric_type> &operator*=(const point<numeric_type> &ri)\n        {\n            auto _x = x * ri.x - y * ri.y;\n            auto _y = x * ri.y + y * ri.x;\n            x = _x;\n            y = _y;\n            return *this;\n        }\n\n        friend point<numeric_type> operator+(const point<numeric_type> &a, const point<numeric_type> &b)\n        {\n            return point<numeric_type>(a) += b;\n        }\n\n        friend point<numeric_type> operator-(const point<numeric_type> &a, const point<numeric_type> &b)\n        {\n            return point<numeric_type>(a) -= b;\n        }\n\n        friend point<numeric_type> operator*(const point<numeric_type> &a, const point<numeric_type> &b)\n        {\n            return point<numeric_type>(a) *= b;\n        }\n\n    };\n\n    template <typename numeric_type>\n    std::istream &operator>>(std::istream &is, point<numeric_type> &p)\n    {\n        return is >> p.x >> p.y;\n    }\n\n    template <typename numeric_type>\n    numeric_type norm(point<numeric_type> a)\n    {\n        return a.x * a.x + a.y * a.y;\n    }\n\n    template <typename numeric_type, typename float_type = double>\n    float_type abs(point<numeric_type> a)\n    {\n        return sqrtl(norm(a));\n    }\n\n    template <typename numeric_type>\n    class line\n    {\n    public:\n        point<numeric_type> p, q;\n\n    };\n\n    template <typename numeric_type>\n    std::istream &operator>>(std::istream &is, line<numeric_type> &l)\n    {\n        return is >> l.p >> l.q;\n    }\n\n    template <typename numeric_type>\n    using segment = line<numeric_type>;\n\n    template <typename numeric_type>\n    numeric_type cross(point<numeric_type> a, point<numeric_type> b)\n    {\n        return a.x * b.y - a.y * b.x;\n    }\n\n    template <typename numeric_type>\n    numeric_type dot(point<numeric_type> a, point<numeric_type> b)\n    {\n        return a.x * b.x + a.y * b.y;\n    }\n\n    enum PointOrder\n    {\n        CounterClockwise = +1,\n        Clockwise = -1,\n        AlignedFirst = +2,\n        AlignedLast = -2,\n        AlignedIn = 0,\n    };\n\n    template <typename numeric_type>\n    PointOrder ccw(point<numeric_type> a, point<numeric_type> b, point<numeric_type> c)\n    {\n        b -= a;\n        c -= a;\n        if (cross(b, c) > 0)\n            return PointOrder::CounterClockwise;\n        else if (cross(b, c) < 0)\n            return PointOrder::Clockwise;\n        else if (dot(b, c) < 0)\n            return PointOrder::AlignedFirst; \n        else if (dot(b, b) < dot(c, c))\n            return PointOrder::AlignedLast; \n        else\n            return PointOrder::AlignedIn; \n    }\n\n    template <const int eps_exp = 9>\n    int sign(double v)\n    {\n        const double eps = std::pow(10, -eps_exp);\n\n        if (v < -eps)\n            return -1;\n        else if (v > eps)\n            return +1;\n        else\n            return 0;\n    }\n\n} \n\n#include <stdint.h>\n\n#include <experimental/optional>\n\nnamespace asl\n{\n    \n    template <typename numeric_type>\n    bool intersect_segment_segment(const segment<numeric_type> &s, const segment<numeric_type> &t)\n    {\n        return ccw(s.p, s.q, t.p) * ccw(s.p, s.q, t.q) <= 0 && ccw(t.p, t.q, s.p) * ccw(t.p, t.q, s.q) <= 0;\n    }\n\n    template <typename numeric_type>\n    bool intersect_segment_point(const segment<numeric_type> &s, const point<numeric_type> &p)\n    {\n        return sign(abs(s.p - p) + abs(s.q - p) - abs(s.q - s.p)) <= 0;\n    }\n\n    template <typename numeric_type>\n    point<numeric_type> projection(const line<numeric_type> &l, const point<numeric_type> &p)\n    {\n        double t = dot(p - l.p, l.p - l.q) / norm(l.p - l.q);\n        return l.p + t * (l.p - l.q);\n    }\n\n    template <typename numeric_type, typename float_type = double>\n    float_type distance_segment_point(const segment<numeric_type> &s, const point<numeric_type> &p)\n    {\n        const point<numeric_type> r = projection(s, p);\n        if (intersect_segment_point(s, r))\n            return abs(r - p);\n        return std::min(abs(s.p - p), abs(s.q - p));\n    }\n\n    template <typename numeric_type, typename float_type = double>\n    float_type distance_segment_segment(const segment<numeric_type> &s, const segment<numeric_type> &t)\n    {\n        if (intersect_segment_segment(s, t))\n            return 0;\n\n        return std::min(std::min(distance_segment_point(s, t.p), distance_segment_point(s, t.q)),\n                        std::min(distance_segment_point(t, s.p), distance_segment_point(t, s.q)));\n    }\n\n} \n \n#include <random>\n\n#define endl '\\n'\n\nusing namespace asl;\nusing namespace std;\n\nvoid solve()\n{\n    segment<double> a, b;\n    cin >> a >> b;\n\n    auto r = distance_segment_segment(a, b);\n    cout << fixed << r << endl;\n}\n\nint main()\n{\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int t;\n    cin >> t;\n\n    for (int i = 0; i < t; ++i)\n    {\n        solve();\n    }\n\n    return 0;\n}\n\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cstring>\n#include <algorithm>\n#include <sstream>\n#include <map>\n#include <set>\n#include <cmath>\n\n#define REP(i,k,n) for(int i=k;i<n;i++)\n#define rep(i,n) for(int i=0;i<n;i++)\n#define INF 1<<30\n#define pb push_back\n#define mp make_pair\n#define EPS 1e-8\n#define equals(a,b) fabs((a) - (b)) < EPS\n\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> P;\n\nstruct Point {\n\tdouble x, y;\n\n\tPoint(double x=0, double y=0) : x(x), y(y) {}\n\n\tPoint operator+(const Point &o) const { return Point(x+o.x, y+o.y); }\n\n\tPoint operator-(const Point &o) const { return Point(x-o.x, y-o.y); }\n\n\tPoint operator*(const double m) const { return Point(x*m, y*m); }\n\n\tPoint operator/(const double d) const { return Point(x/d, y/d); }\n\n\tbool operator<(const Point &o) const { return x != o.x ? x < o.x : y < o.y; }\n\n\tbool operator==(const Point &o) const { return fabs(x-o.x) < EPS && fabs(y-o.y) < EPS; }\n\n\tdouble cross(const Point &o) const { return x * o.y - y * o.x; }\n\n\tdouble dot(const Point &o) const { return x * o.x + y * o.y; }\n\n\tdouble atan() const { return atan2(y, x); }\n\n\tdouble norm() const { return sqrt(dot(*this)); }\n\n\tdouble distance(const Point &o) const { return (o - (*this)).norm(); }\n\n\tdouble area(const Point &a,const Point &b) {\n\t\tPoint p = a - (*this), p2 = b - (*this); \n\t\treturn p.cross(p2);\n\t}\n\n\tdouble area_abs(const Point &a,const Point &b) const {\n\t\tPoint p = a - (*this), p2 = b - (*this);\n\t\treturn fabs(p.cross(p2)) / 2.0;\n\t}\t\n\n\t//??????ab?????????????????????????????????????????????????????????\n\tint between(const Point &a,const Point &b) {\n\t\tif(area(a,b) != 0) return 0;\n\n\t\tif(a.x != b.x)  return ((a.x <= x) && (x <= b.x)) || ((a.x >= x) && (x >= b.x));\n\t\telse return ((a.y <= y) && (y <= b.y)) || ((a.y >= y) && (y >= b.y));\n\t}      \n\n\tdouble distance_seg(const Point& a,const Point& b) {\n\t\tif((b-a).dot(*this-a) < EPS) {\n\t\t\treturn (*this-a).norm();\n\t\t}\n\t\tif((a-b).dot(*this-b) < EPS) {\n\t\t\treturn (*this-b).norm();\n\t\t}\n\t\treturn abs((b-a).cross(*this-a)) / (b-a).norm();\n\t}\n};\n\nostream& operator << (ostream& os, const Point& p) {\n\tos << \"(\" << p.x << \", \" << p.y << \")\";\n\treturn os;\n}\n\nint ccw(Point a, Point b, Point c) {\n\tb = b-a;\n\tc = c-a;\n\n\tif(b.cross(c) > 0.0) return +1;\t//conter clockwise\n\tif(b.cross(c) < 0.0) return -1;\t//clockwise\n\tif(b.dot(c) < 0.0) return +2;\t//a on Seg(b,c)\n\tif(b.norm() < c.norm()) return -2;\t//b on Seg(a,c)\n\treturn 0;\t//c on Seg(a,b)\n}\n\nstruct Seg {\n\tPoint a,b;\n\n\tSeg() : a(Point(0, 0)), b(Point(0, 0)) {}\n\n\tSeg (Point a, Point b) : a(a),b(b) {}\n\n\tbool isOrthogonal(Seg &s) { return equals((b - a).dot(s.b - s.a),0.0); }\n\n\tbool isParallel(Seg &s) { return equals((b-a).cross(s.b - s.a),0.0); }\n\n\tbool isIntersect(Seg &s) {\n\t\treturn ccw(a, b, s.a) * ccw(a, b, s.b) <= 0 && ccw(s.a, s.b, a) * ccw(s.a, s.b, b) <= 0;\n\t}\n\n\tdouble distance(Seg &s) {\n\t\tif((*this).isIntersect(s)) return 0.0;\n\n\t\treturn min(min(a.distance_seg(s.a,s.b),b.distance_seg(s.a,s.b)),min(s.a.distance_seg(a,b),s.b.distance_seg(a,b)));\n\t}\n\n\tPoint getCrossPoint(Seg &s) {\n\t\tPoint p = s.b - s.a;\n\t\tdouble d = abs(p.cross(a-s.a));\n\t\tdouble d2 = abs(p.cross(b-s.a));\n\n\t\tdouble t = d / (d+d2);\n\t\treturn a + (b-a)*t;\n\t}\n\n\tPoint project(Point &p) {\n\t\tPoint base = b - a;\n\t\tdouble t = base.dot(p-a) / base.dot(base);\n\t\treturn a + base * t;\n\t}\n\n\tPoint reflect(Point &p) {\n\t\treturn p + (project(p) - p) * 2.0;\n\t}\n};\n\nostream& operator << (ostream& os, const Seg& s) {\n\tos << \"(\" << s.a.x << \", \" << s.a.y << \")-(\" << s.b.x << \",\" << s.b.y << \")\";\n\treturn os;\n}\n\nint main() {\n\tint q;\n\tcin >> q;\n\n\tSeg s1, s2;\n\trep(i, q) {\n\t\tcin >> s1.a.x >> s1.a.y >> s1.b.x >> s1.b.y >> s2.a.x >> s2.a.y >> s2.b.x >> s2.b.y;\n\n\t\tcout << fixed;\n\t\tcout.precision(20);\n\t\tcout << s1.distance(s2) << endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstdlib>\n#include <cmath>\n#include <cstring>\n\n#include <iostream>\n#include <string>\n#include <algorithm>\n#include <vector>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n\n#include <complex>\n\n#include <functional>\n#include <cassert>\n\ntypedef long long ll;\nusing namespace std;\n\n#define debug(x) cerr << #x << \" = \" << (x) << endl;\n\n\n#define mod 1000000007 //1e9+7(prime number)\n#define INF 1000000000 //1e9\n#define LLINF 2000000000000000000LL //2e18\n#define SIZE 100010\n\ntypedef double P_type;\ntypedef complex<P_type> P;\nconst P_type P_eps = 1e-10; //??´??°???????????????\n\nbool operator<(const P &a, const P &b){\n  return a.real() == b.real() ? a.imag() < b.imag() : a.real() < b.real();\n}\n\nbool operator==(const P &a, const P &b){\n  const double eps = P_eps;\n  return abs(a.real() - b.real()) <= eps && abs(a.imag() - b.imag()) <= eps;\n}\n\nP rotate(P p, double theta){\n  return p * P(cos(theta), sin(theta));\n}\n\n//??????\ndouble dot(P a, P b) {\n  return (a * conj(b)).real();\n}\n\n//??????\ndouble cross(P a, P b) {\n  return (a * conj(b)).imag();\n}\n\nint ccw(P a, P b, P c){\n  if(cross(b-a,c-a) > P_eps) return 1; //COUNTER_CLOCKWISE\n  if(cross(b-a,c-a) < P_eps) return -1; //CLOCKWISE\n  if(dot(b-a,c-a) < P_eps) return -2; //c -> a -> b\n  if(dot(a-b,c-b) < P_eps) return 2; //a -> b -> c\n  return 0; //a -> c -> b\n}\n\n/* ??????ab??¨???c????????¢ */\ndouble distanceSP(P a, P b, P c) {\n  if ( dot(b-a, c-a) < P_eps ) return abs(c-a);\n  if ( dot(a-b, c-b) < P_eps ) return abs(c-b);\n  return abs(cross(b-a, c-a)) / abs(b-a);\n}\n\n/* ??´???ab??¨???c????????¢ */\ndouble distanceLP(P a, P b, P c) {\n  return abs(cross(b-a, c-a)) / abs(b-a);\n}\n\n/* ????????????????????? */\ndouble isContainedCP(P c, double r, P p){\n  return abs(c-p) < r - P_eps; //?????¨??????????????????\n  //return abs(c-p) < r + P_eps; //?????¨????????????\n}\n\n/* ??´??????????????? */\nbool isIntersectedLL(P a1, P a2, P b1, P b2){\n  return abs(cross(a1-a2, b1-b2)) > P_eps;\n}\n\n/* ?????????????????? */\nbool isIntersectedSS(P a1, P a2, P b1, P b2){\n  \n  //??????a ??¨ ??´???b\n  P_type a = ccw(b1,b2,a1);\n  P_type b = ccw(b1,b2,a2);\n  \n  //??????b ??¨ ??´???a\n  P_type c = ccw(a1,a2,b1);\n  P_type d = ccw(a1,a2,b2);\n  \n  return a*b < P_eps && c*d < P_eps; // T?????????????????? -P_eps\n}\n\n/* ??????????????? */\nbool isIntersectedCC(P c1, double r1, P c2, double r2){\n  double dist = abs(c1 - c2);\n  \n  return abs(r1 - r2) < dist + P_eps && dist - P_eps < r1 + r2; //?????\\?????\\?????????\n  //return abs(r1 - r2) < dist - P_eps && dist + P_eps < r1 + r2; //?????\\?????\\?????????\n}\n\n/* ?????´??????????????? */\nbool isIntersectedCL(P c, double r, P a1, P a2){\n  return distanceLP(a1, a2, c) < r + P_eps; //??\\????????´????????????????????´??? - P_eps\n}\n\n/* ????????????????????? */\nbool isIntersectedCS(P c, double r, P a1, P a2){\n  return isContainedCP(c,r,a1) &&\n    isContainedCP(c,r,a2) &&\n    distanceLP(a1, a2, c) < r + P_eps; //??\\????????´????????????????????´??? - P_eps\n}\n\n/* ??´???/???????????? */\nP getCrosspointLL(P a1, P a2, P b1, P b2) {\n  //assert(isIntersectedLL(a1, a2, b1, b2));\n  //assert(isIntersectedSS(a1, a2, b1, b2));\n  P a = a2 - a1;\n  P b = b2 - b1;\n  return a1 + a * cross(b, b1-a1) / cross(b, a);\n}\n\nP getCrosspointSS(P a1, P a2, P b1, P b2){\n  return getCrosspointLL(a1, a2, b1, b2);\n}\n\n/* ????????? */\npair<P,P> getCrosspointCC(P c1, double r1, P c2, double r2){\n  //assert(isIntersectedCC(c1, r1, c2, r2));\n  \n  double dist = abs(c1 - c2);\n  double a = acos((r1*r1 + dist * dist - r2 * r2) / (2 * r1 * dist));\n  return {c1 + polar(r1, arg(c2 - c1) + a), c1 + polar(r1, arg(c2 - c1) - a)};\n}\n\n/* ??????????????? */\npair<P,P> getCrosspointCS(P c, double r, P a1, P a2){\n  //assert(isIntersectedCS(c1, r1, c2, r2));\n  \n  P base1 = a2 - a1;\n  P proj = a1 + base1 * dot(c - a1, base1) / norm(base1); //?°???±\n  P e = (a2 - a1) / abs(a2 - a1);\n  P base2 = sqrt(r*r - norm(proj - c));\n  return {proj + e*base2, proj - e*base2};\n}\n\n\nint main(){\n  int q;\n\n  scanf(\"%d\",&q);\n\n  for(int i=0;i<q;i++){\n    int x, y;\n    P p[4];\n\n    for(int j=0;j<4;j++){\n      scanf(\"%d%d\",&x,&y);\n      p[j] = P(x,y);\n    }\n\n    double ans = min({distanceSP(p[0],p[1],p[2]),distanceSP(p[0],p[1],p[3]),\n                      distanceSP(p[2],p[3],p[0]),distanceSP(p[2],p[3],p[1])});\n\n    if(isIntersectedSS(p[0],p[1],p[2],p[3])){\n      ans = 0;\n    }\n    \n    printf(\"%.10lf\\n\",ans);\n  }\n  \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nstruct point{\n\tdouble x,y;\n\tpoint(){;}\n\tpoint(double x,double y):x(x),y(y){;}\n\tpoint operator -(point p){\n\t\treturn point(x-p.x,y-p.y);\n\t}\n};\n// ??????p3??¨p1p2????????§ \ndouble direction(point p1, point p2, point p3) {\n\treturn (p2.x - p1.x)*(p3.y - p2.y) - (p3.x - p2.x)*(p2.y - p1.y);\n}\nbool isjiao(point p1,point p2,point p3,point p4){\n\t// ?????????????????????????????¨????????????????????????\n\tdouble a,b,c,d;\n\ta=direction(p1,p2,p3);\n\tb=direction(p1,p2,p4);\n\tc=direction(p3,p4,p1);\n\td=direction(p3,p4,p2);\n\tif(abs(a+b)<max(abs(a),abs(b))&&abs(c+d)<max(abs(c),abs(d)))return true;\n\treturn false; \n}\ndouble waiji(point p1,point p2){\n\treturn p1.x*p2.y-p1.y*p2.x;\n}\ndouble neiji(point p1,point p2){\n\treturn p1.x*p2.x+p1.y*p2.y;\n}\n// ?????????????????????????§???????\t\t\ndouble dis(point p,point p1,point p2){\n\tpoint v1,v2,v;\n\tv1=p2-p1;\n\tv2=p1-p2;\n\tv=p-p1;\n\tif(neiji(v,v1)<0)\n\t\treturn sqrt((p.x-p1.x)*(p.x-p1.x)+(p.y-p1.y)*(p.y-p1.y));\n\tv=p-p2;\n\tif(neiji(v,v2)<0)\n\t\treturn sqrt((p.x-p2.x)*(p.x-p2.x)+(p.y-p2.y)*(p.y-p2.y));\n\t// ?????°??????????????´??????\n\treturn abs(waiji(v,v2))/sqrt(v2.x*v2.x+v2.y*v2.y); \n}\npoint p1,p2,p3,p4;\ndouble solve(){\n// ??????????????????1???????????°????????????????????????2???????????°??????1??????\t\t\n\tif(isjiao(p1,p2,p3,p4))return 0;\n\tdouble res=min(dis(p1,p3,p4),dis(p2,p3,p4));\n\tres=min(res,dis(p3,p1,p2));\n\tres=min(res,dis(p4,p1,p2));\n\treturn res;\n}\nint main(){\n//\tfreopen(\"a.txt\",\"r\",stdin);\n\tint T;\n\tcin>>T;\n\twhile(T--){\n\t\tcin>>p1.x>>p1.y;\n\t\tcin>>p2.x>>p2.y;\n\t\tcin>>p3.x>>p3.y;\n\t\tcin>>p4.x>>p4.y;\n\t\tprintf(\"%.10f\\n\",solve()); \n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <complex>\n#include <sstream>\n#include <string>\n#include <algorithm>\n#include <deque>\n#include <list>\n#include <map>\n#include <numeric>\n#include <queue>\n#include <vector>\n#include <set>\n#include <limits>\n#include <cstdio>\n#include <cctype>\n#include <cmath>\n#include <cstring>\n#include <cstdlib>\n#include <ctime>\nusing namespace std;\n#define REP(i, j) for(int i = 0; i < (int)(j); ++i)\n#define FOR(i, j, k) for(int i = (int)(j); i < (int)(k); ++i)\n#define SORT(v) sort((v).begin(), (v).end())\n#define REVERSE(v) reverse((v).begin(), (v).end())\n#define X real()\n#define Y imag()\nconst double EPS = 1e-8;\nconst double INF = 1e12;\ntypedef complex<double> P;\nnamespace std {\n  bool operator < (const P& a, const P& b) {\n    return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n  }\n}\n\n//外積\ndouble cross(const P& a, const P& b) {\n  return imag(conj(a)*b);\n}\n\n//内積\ndouble dot(const P& a, const P& b) {\n  return real(conj(a)*b);\n}\n\n//線 (線分)\nstruct L : public vector<P> {\n  L(const P &a, const P &b) {\n    push_back(a); push_back(b);\n  }\n};\n\nint ccw(P a, P b, P c) {\n  b -= a; c -= a;\n  if (cross(b, c) > 0)   return +1;       // counter clockwise\n  if (cross(b, c) < 0)   return -1;       // clockwise\n  if (dot(b, c) < 0)     return +2;       // c--a--b on line\n  if (norm(b) < norm(c)) return -2;       // a--b--c on line\n  return 0;\n}\n\nbool intersectSP(const L &s, const P &p) {\n  return abs(s[0]-p)+abs(s[1]-p)-abs(s[1]-s[0]) < EPS; // triangle inequality\n}\n\nbool intersectSS(const L &s, const L &t) {\n  return ccw(s[0],s[1],t[0])*ccw(s[0],s[1],t[1]) <= 0 &&\n         ccw(t[0],t[1],s[0])*ccw(t[0],t[1],s[1]) <= 0;\n}\n\n//線分lに対する、点pの射影\n//射影とは、pからlに垂線を引いた時の交点\nP projection(const L &l, const P &p) {\n  double t = dot(p-l[0], l[0]-l[1]) / norm(l[0]-l[1]);\n  return l[0] + t*(l[0]-l[1]);\n}\n\n\ndouble distanceSP(const L &s, const P &p) {\n  const P r = projection(s, p);\n  if (intersectSP(s, r)) return abs(r - p);\n  return min(abs(s[0] - p), abs(s[1] - p));\n}\n\ndouble distanceSS(const L &s, const L &t) {\n  if (intersectSS(s, t)) return 0;\n  return min(min(distanceSP(s, t[0]), distanceSP(s, t[1])),\n             min(distanceSP(t, s[0]), distanceSP(t, s[1])));\n}\n\n\nint main() {\n  int Q; cin >>Q;\n  REP(q, Q){\n    int x0, y0, x1, y1, x2, y2, x3, y3;\n    scanf(\"%d %d %d %d %d %d %d %d\", &x0, &y0, &x1, &y1, &x2, &y2, &x3, &y3);\n    L l1 = L(P(x0, y0), P(x1, y1)), l2 = L(P(x2, y2), P(x3, y3));\n    printf(\"%.10lf\\n\", distanceSS(l1, l2));\n  }\n  \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\nconst ll INF = 1e16;\nconst ll mod = 1000000007;\n#define rep(i, n) for (int i = 0; i < (int)(n); i++)\n\ntemplate<class T> inline bool chmax(T& a, T b) {\n  if (a < b) {\n    a = b;\n    return 1;\n  }\n  return 0;\n}\ntemplate<class T> inline bool chmin(T& a, T b) {\n  if (a > b) {\n    a = b;\n    return 1;\n  }\n  return 0;\n}\nint ctoi(char c) {\n  if (c >= '0' && c <= '9') {\n    return c - '0';\n  }\n  return 0;\n}\nll factorial(ll n) {\n  if (n == 1) {\n    return 1;\n  }\n  ll ans = factorial(n-1);\n  return ans*n;\n}\nll gcd(ll a, ll b) {\n  if (b == 0) return a;\n  return gcd(b, a%b);\n}\nll lcm(ll a, ll b) {\n  return (a/gcd(a, b))*b;\n}\nbool is_prime(ll n) {\n  for (ll i = 2; i*i <= n; i++) {\n    if (n%i == 0) return false;\n  }\n  return n != 1;\n}\nll mod_pow(ll x, ll n, ll mod) {\n  if (n == 0) return 1;\n  ll res = mod_pow(x*x%mod, n/2, mod);\n  if (n & 1) res = res * x % mod;\n  return res;\n}\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nclass Point {\n  public:\n  double x, y;\n  Point(double x = 0, double y = 0): x(x), y(y) {}\n  Point operator + (Point p) { return Point(x + p.x, y + p.y); }\n  Point operator - (Point p) { return Point(x - p.x, y - p.y); }\n  Point operator * (double a) { return Point(a * x, a * y); }\n  Point operator / (double a) { return Point(x / a, y / a); }\n  double norm() { return x*x + y*y; }\n  double abs() { return pow(norm(), 0.5); }\n  bool operator < (const Point &p) const {\n    return x != p.x ? x < p.x : y < p.y;\n  }\n};\ntypedef Point Vector;\nstruct Segment {\n  Point p1, p2;\n};\ntypedef Segment Line;\ndouble dot(Vector a, Vector b) {\n  return a.x * b.x + a.y * b.y;\n}\nPoint project(Segment s, Point p) {\n  Vector base = s.p2 - s.p1;\n  double r = dot(p-s.p1, base) / base.norm();\n  return s.p1 + base * r;\n}\nPoint reflect(Segment s, Point p) {\n  return p + (project(s, p) - p) * 2.0;\n}\ndouble cross(Point a, Point b) {\n  return a.x*b.y - a.y*b.x;\n}\nll ccw(Point p0, Point p1, Point p2) {\n  Vector a = p1 - p0, b = p2 - p0;\n  if (cross(a, b) > EPS) return 1;\n  if (cross(a, b) < -EPS) return -1;\n  if (dot(a, b) < -EPS) return 2;\n  if (a.norm() < b.norm()) return -2;\n  return 0;\n}\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n  return ccw(p1, p2, p3)*ccw(p1, p2, p4)<=0 && ccw(p3, p4, p1)*ccw(p3, p4, p2)<=0;\n}\nbool intersect(Segment s1, Segment s2) {\n  return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\ndouble getDistanceLP(Line l, Point p) {\n  return abs(cross(l.p2-l.p1, p-l.p1) / (l.p2-l.p1).abs());\n}\ndouble getDistanceSP(Segment s, Point p) {\n  if (dot(s.p2-s.p1, p-s.p1) < 0.0) return (p - s.p1).abs();\n  if (dot(s.p1-s.p2, p-s.p2) < 0.0) return (p - s.p2).abs();\n  return getDistanceLP(s, p);\n}\ndouble getDistance(Segment s1, Segment s2) {\n  if (intersect(s1, s2)) return 0.0;\n  return min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n             min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\nint main() {\n  ll n;\n  cin >> n;\n  cout << fixed << setprecision(10);\n  rep(i, n) {\n    Point p1, p2, p3, p4;\n    cin >> p1.x >> p1.y >> p2.x >> p2.y >> p3.x >> p3.y >> p4.x >> p4.y;\n    Segment s1, s2;\n    s1.p1 = p1; s1.p2 = p2; s2.p1 = p3; s2.p2 = p4;\n    cout << getDistance(s1, s2) << endl;\n  }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n#define eps 0\ntypedef complex<double> C;\ntypedef struct{\n\tdouble x,y;\n\t\n}point;\ntypedef struct{\npoint a,b;\n}line;\n\nC convert(point a){\n\treturn C(a.x,a.y);\n}\npoint convert(C a){\n\treturn {a.real(),a.imag()};\n}\n\nline make(point a,point b){\n\tline res; res.a=a; res.b=b;\n\treturn res;\n}\n\npoint make(double x,double y){\n\tpoint res;\n\tres.x=x;\n\tres.y=y;\n\treturn res;\n}\n//a-b\npoint vec(point a,point b){\n\tpoint res;\n\tres.x=a.x-b.x;\n\tres.y=a.y-b.y;\n\treturn res;\n}\n\n// a・b\ndouble dot(point a,point b){\n\treturn a.x*b.x+a.y*b.y;\n}\n//|a|\ndouble  norm(point a){\nreturn sqrt(dot(a,a));\n}\n//|a|^2\ndouble absolute(point a){\nreturn dot(a,a);\n}\n//a×ｂ　外積z成分\ndouble cross(point a,point b){\nreturn a.x*b.y-a.y*b.x;\n}\n//a=x1+iy1,b=x2+iy2 a*b\npoint imaseki(point a,point b){\npoint res;\nres.x=a.x*b.x-a.y*b.y;\nres.y=a.x*b.y+a.y*b.x;\nreturn res;\n}\n//vec * a\npoint product(point v,double a){\n\tpoint res; res.x=v.x*a; res.y=v.y*a;\n\treturn res;\n}\n\n//共役\npoint conjugate(point a){\npoint res;\nres.x=a.x;\nres.y=-a.y;\nreturn res;\n}\n\n\nint ccw(point p0,point p1,point p2){\npoint a=vec(p1,p0);\npoint b=vec(p2,p0);\n\tif(cross(a,b)>eps){\n\treturn 1;//counter_clockwise\n\t}else if(cross(a,b)<eps){\n\treturn -1;//clockwise\n\t}else if(dot(a,b)<-eps){\n\treturn 2;//online_back\n\t}else if(absolute(a)<absolute(b)){\n\treturn -2;//online_front\n\t}else{\n\treturn 0;//on_segment\n\t}\n\n}\n//交差判定　s1-s2 s3-s4\nbool intersect(point s1,point s2,point s3,point s4){\n if(ccw(s1,s2,s3)*ccw(s1,s2,s4)<=0 && ccw(s3,s4,s1)*ccw(s3,s4,s2)<=0)\n        return true;\n    return false;\n}\nbool intersect(line l1,line l2){\n\treturn intersect(l1.a,l1.b,l2.a,l2.b);\n}\n//交点\npoint crosspoint(line l1,line l2){\n\tpoint veca=vec(l1.b,l1.a);\n\tpoint vecb=vec(l2.b,l2.a);\n\tdouble d= cross(veca,vecb);\n\tdouble e= cross(vecb,vec(l2.b,l1.a));\n\treturn vec(l1.a,product(veca,e/d));\n\n}\n\n//距離　point-point \ndouble distance (point a,point b){\nreturn norm(vec(a,b));\n}\n//距離 point-line\ndouble distance(line l,point p){\nreturn abs(cross(vec(p,l.a),vec(l.b,l.a))/norm(vec(l.b,l.a)));\n}\n//距離　line-line\ndouble distance(line a,line b){\n\tif(intersect(a,b))return 0;\n\tdouble m= distance(a.a,b.a);\n\tm=min(m,distance(a.a,b.b));\n\tm=min(m,distance(a.b,b.a));\n\tm=min(m,distance(a.b,b.b));\n\treturn m;\n}\n\nint main(){\n\tint q;\n\tcin>>q;\n\tfor(int i=0;i<q;i++){\n\tdouble x,y;\n\tpoint p0,p1,p2,p3;\n\tline l0,l1;\n\tcin>>x>>y;\n\tp0=make(x,y);\n\tcin>>x>>y;\n\tp1=make(x,y);\n\tcin>>x>>y;\n\tp2=make(x,y);\n\tcin>>x>>y;\n\tp3=make(x,y);\n\tl0=make(p0,p1);\n\tl1=make(p2,p3);\n\tprintf(\"%0.10lf\\n\",distance(l0,l1));\n\n\t}\nreturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n\ninline int sign(const double &x){\n    if(x>EPS) return 1;\n    else if(x<-EPS) return -1;\n    return 0;\n}\n\n/*   点  */\nstruct Point{\n    double x,y;\n\n    Point(double x=0,double y=0):x(x),y(y){}\n\n    Point operator + (Point p) { return Point(x+p.x,y+p.y); }\n    Point operator - (Point p) { return Point(x-p.x,y-p.y); }\n    Point operator * (double k) { return Point(k*x,k*y); }\n    Point operator / (double k) { return Point(x/k,y/k); }\n\n    //向量的大小\n    double abs(){ return sqrt(norm()); }\n    double norm() { return x*x+y*y; }\n\n    bool operator < (const Point & p) const{\n        return x!=p.x?x<p.x:y<p.y;\n    }\n\n    bool operator == (const Point & p) const {\n        return fabs(x-p.x)<EPS&&fabs(y-p.y)<EPS;\n    }\n};\n\n//两点间的距离\ndouble getDistance(Point a,Point b){\n    return (a-b).abs();\n}\n\n/*   向量  */\ntypedef Point Vector;\n\n//向量a和b的内积\ndouble dot(Vector a,Vector b){\n    return a.x*b.x+a.y*b.y;\n}\n//向量a和b的外积\ndouble cross(Vector a,Vector b){\n    return a.x*b.y-a.y*b.x;\n}\n\n/*   线段  */\nstruct Segment{\n    Point p1,p2;\n};\n\n/*   直线  */\ntypedef Segment Line;\n\n//点到直线的距离\ndouble getDistanceLP(Line l,Point p){\n    return abs(cross(l.p2-l.p1,p-l.p1)/(l.p2-l.p1).abs());\n}\n\n//点到线段的距离\ndouble getDistanceSP(Segment s,Point p){\n    if(dot(s.p2-s.p1,p-s.p1)<0.0) return (p-s.p1).abs();\n    if(dot(s.p1-s.p2,p-s.p2)<0.0) return (p-s.p2).abs();\n    return getDistanceLP(s,p);\n}\n\n//判断p2与向量p1-p0的位置关系\n\nconst int COUNTER_CLOCKWISE = -1;   //逆时针\nconst int CLOCKWISE = 1;            //顺时针\nconst int ON_SEGMENT = 0;           //在线段上\nconst int ONLINE_BACK = 2;          //p2在向量p1-p0的反方向延长线上\nconst int ONLINE_FRONT = -2;        //p2在向量p1-p0的正方向延长线上\n\nint ccw(Point p0,Point p1,Point p2){\n    Vector a=p1-p0;\n    Vector b=p2-p0;\n    if(cross(a,b)>EPS) return COUNTER_CLOCKWISE;\n    if(cross(a,b)<-EPS) return CLOCKWISE;\n    if(dot(a,b)<-EPS) return ONLINE_BACK;\n    if(a.norm()<b.norm()) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\n//判断线段p1p2与线段p3p4是否相交\nbool intersect(Point p1,Point p2,Point p3,Point p4){\n    return ( ccw(p1,p2,p3)*ccw(p1,p2,p4)<=0 &&\n             ccw(p3,p4,p1)*ccw(p3,p4,p2)<=0 );\n}\n\nbool intersect(Segment s1,Segment s2){\n    return intersect(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n\n//线段与线段的距离\ndouble getDistance(Segment s1,Segment s2){\n    if(intersect(s1,s2)) return 0.0;\n    return min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),\n               min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n}\n\n/* 直线正交\n * 判断向量a，b是否正交 =》a，b的内积为0\n */\nbool isOrthogonal(Vector a,Vector b){\n    return equals(dot(a,b),0.0);\n}\n\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n    return isOrthogonal(a1-a2,b1-b2);\n}\n\n/* 直线平行\n * 判断向量a，b是否平行 =》a，b的内积为0\n */\nbool isParallel(Vector a,Vector b){\n    return equals(cross(a,b),0.0);\n}\n\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n    return isParallel(a1-a2,b1-b2);\n}\n\nstruct Circle{\n    Point c;\n    double r;\n    Circle(Point c = Point() ,double r = 0.0 ):c(c),r(r){}\n};\n\n/*   多边形  */\ntypedef vector<Point> Polygon;\n\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    while(n--){\n        Point p1,p2,p3,p4;\n        scanf(\"%lf%lf%lf%lf%lf%lf%lf%lf\",&p1.x,&p1.y,&p2.x,&p2.y,&p3.x,&p3.y,&p4.x,&p4.y);\n        printf(\"%.10f\\n\",getDistance(Segment{p1,p2},Segment{p3,p4}));\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<iomanip>\n#include<cmath>\nusing namespace std;\n\nstruct Point{\n    double x;\n    double y;\n    Point (double x, double y) : x(x), y(y){}\n    Point operator-(Point p){\n        return Point(x - p.x, y - p.y);\n    }\n};\ntypedef Point Vector;\ndouble dot(Vector v1, Vector v2){\n    return v1.x * v2.x + v1.y * v2.y;\n}\ndouble abs_(Vector v){\n    return sqrt(dot(v, v));\n}\ndouble cross(Vector v1, Vector v2){\n    return v1.x * v2.y - v1.y * v2.x;\n}\nstruct Segment{\n    Point p1;\n    Point p2;\n    Segment(Point p1, Point p2) : p1(p1), p2(p2){}\n};\nbool is_inSegment(Point p, Segment s){\n    double max_x = s.p1.x;\n    double min_x = s.p2.x;\n    if (min_x > max_x) swap(min_x, max_x);\n    if (p.x < min_x || p.x > max_x) return false;\n    double max_y = s.p1.y;\n    double min_y = s.p2.y;\n    if (min_y > max_y) swap(min_y, max_y);\n// cout << min_y << \" \" << max_y << \" \" << p.y << endl;\n    if (p.y < min_y || p.y > max_y) return false;\n    return true;\n}\nbool is_intersect(Segment s1, Segment s2){\n    double alpha = cross(s2.p1 - s2.p2, s1.p1 - s1.p2);\n    if (alpha < 1e-10) return false;\n    double beta  = cross(s2.p1, s2.p2);\n    double gamma = cross(s1.p1, s1.p2);\n    double x_is = ((s1.p1.x - s1.p2.x) * beta -\n                   (s2.p1.x - s2.p2.x) * gamma) / alpha;\n    double y_is = ((s1.p1.y - s1.p2.y) * beta -\n                   (s2.p1.y - s2.p2.y) * gamma) / alpha;\n    Point p_is(x_is, y_is);\n    if (!is_inSegment(p_is, s1)) return false;\n    if (!is_inSegment(p_is, s2)) return false;\n    return true;\n}\ndouble get_distanceSP(Segment s, Point p){\n// cout << \"(\" << s.p1.x << \",\" << s.p1.y << \")\";\n// cout << \"(\" << s.p2.x << \",\" << s.p2.y << \")   :    \";\n// cout << \"(\" << p.x << \",\" << p.y << \")\" << endl;\n    Vector a1 = s.p2 - s.p1;\n    Vector b1 = p    - s.p1;\n    if (dot(a1, b1) <= 0) return abs_(b1);\n    Vector a2 = s.p1 - s.p2;\n    Vector b2 = p    - s.p2;\n    if (dot(a2, b2) <= 0) return abs_(b2);\n    return fabs(cross(a1, b1)) / abs_(a1);\n}\ndouble get_distanceSS(Segment s1, Segment s2){\n    if (is_intersect(s1, s2)) return 0;\n    // cout << get_distanceSP(s1, s2.p1) << \" \";\n    // cout << get_distanceSP(s1, s2.p2) << \" \";\n    // cout << get_distanceSP(s2, s1.p1) << \" \";\n    // cout << get_distanceSP(s2, s1.p2) << endl;\n    return min(min(get_distanceSP(s1, s2.p1), get_distanceSP(s1, s2.p2)),\n               min(get_distanceSP(s2, s1.p1), get_distanceSP(s2, s1.p2)));\n}\nint main(){\n    int q;\n    cin >> q;\n    for (int i = 0; i < q; i++) {\n        int x_p0, y_p0, x_p1, y_p1, x_p2, y_p2, x_p3, y_p3;\n        cin >> x_p0 >> y_p0 >> x_p1 >> y_p1;\n        cin >> x_p2 >> y_p2 >> x_p3 >> y_p3;\n        Segment s1(Point(x_p0, y_p0), Point(x_p1, y_p1));\n        Segment s2(Point(x_p2, y_p2), Point(x_p3, y_p3));\n        double distance = get_distanceSS(s1, s2);\n        cout << fixed << setprecision(10);\n        cout << distance << endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cmath>\n#include <set>\n#include <algorithm>\n#include <array>\n#include <complex>\n#include <string>\n#include <utility>\n#include <map>\n#include <queue>\n#include <list>\n#include <functional>\n#include <numeric>\n#include <stack>\n#include <tuple>\n\nusing namespace std;\nint dx[4] = { -1,0,1,0 };\nint dy[4] = { 0,1,0,-1 };\nconst int INF = 100000000;\nconst long long LINF = 1000000000000000000;\nconst int MOD = (int)1e9 + 7;\nconst double EPS = 1e-6;\nusing pii = std::pair<int, int>;\nusing ll = long long;\nusing pLL = std::pair<ll, ll>;\n#define SORT(v) std::sort(v.begin(), v.end())\n#define RSORT(v) std::sort(v.rbegin(), v.rend())\nusing Point = complex<double>; //点\n#define X real() //実部\n#define Y imag() //虚部\ndouble dot(Point a, Point b) { //内積\n    return (a.X * b.X + a.Y * b.Y);\n}\nusing Line = pair<Point, Point>; //直線\nPoint Projection(Line s, Point p) { //点から直線への射影\n    Point vase = s.second - s.first;\n    p -= s.first;\n    return s.first + dot(p, vase) / norm(vase) * vase;\n}\nPoint Reflection(Line s, Point p) { //直線に対して線対称な点\n    return p + (Projection(s, p) - p) * 2.0;\n}\ndouble cross(Point a, Point b) { //外積\n    return a.X * b.Y - a.Y * b.X;\n}\nint ccw(Point a, Point b, Point c) { //直線に対する点の位置\n    if (cross(b - a, c - a) > EPS)return 1;\n    if (cross(b - a, c - a) < -EPS)return -1;\n    if (dot(b - a, c - a) < -EPS)return 2;\n    if (abs(b - a) + EPS < abs(c - a))return -2;\n    return 0;\n}\nbool isOrthogonal(Line a, Line b) { //直行判定\n    return dot(a.second - a.first, b.second - b.first) ? 0 : 1;\n}\nbool isParallel(Line a, Line b) { //平行判定\n    return cross(a.second - a.first, b.second - b.first) ? 0 : 1;\n}\nbool isCross(Line a, Line b) { //交差判定\n    if (ccw(a.first, a.second, b.first) * ccw(a.first, a.second, b.second) <= 0 and\n        ccw(b.first, b.second, a.first) * ccw(b.first, b.second, a.second) <= 0) {\n        return true;\n    }\n    return false;\n}\nPoint CrossPoint(Line a, Line b) { //直線の交点\n    double x, d;\n    Point p1, p2, p3, p4;\n    p1 = a.first;\n    p2 = a.second;\n    p3 = b.first;\n    p4 = b.second;\n    x = (p4.Y - p3.Y) * (p4.X - p1.X) - (p4.X - p3.X) * (p4.Y - p1.Y);\n    d = (p4.Y - p3.Y) * (p2.X - p1.X) - (p4.X - p3.X) * (p2.Y - p1.Y);\n    return p1 + x / d * (p2 - p1);\n}\ndouble PointLineDis(Line l, Point p) {\n    Point a = l.first, b = l.second, c = p;\n    return abs(cross(c - a, b - a)) / abs(b - a);\n}\ndouble PointSegDis(Line a, Point p) {\n    Point p1 = a.first, p2 = a.second;\n    if (dot(p2 - p1, p - p1) < EPS)return abs(p - p1);\n    if (dot(p1 - p2, p - p2) < EPS)return abs(p - p2);\n    return PointLineDis(a, p);\n}\ndouble SegSegDis(Line a, Line b) {\n    if (isCross(a, b)) return 0;\n    double res = PointSegDis(a, b.first);\n    res = min(res, PointSegDis(a, b.second));\n    res = min(res, PointSegDis(b, a.first));\n    res = min(res, PointSegDis(b, a.second));\n    return res;\n}\nint main() {\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    Point p1, p2, p3, p4;\n    int q;\n    cin >> q;\n    for (int i = 0; i < q; ++i) {\n        double x1, x2, y1, y2, x3, x4, y3, y4;\n        cin >> x1 >> y1 >> x2 >> y2 >> x3 >> y3 >> x4 >> y4;\n        p1 = Point(x1, y1);\n        p2 = Point(x2, y2);\n        p3 = Point(x3, y3);\n        p4 = Point(x4, y4);\n        Line l1 = Line(p1, p2), l2 = Line(p3, p4);\n        printf(\"%.9f\\n\", SegSegDis(l1, l2));\n    }\n    return 0;\n\n}\n"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\n#pragma GCC optimize(\"Ofast\")\n\n// Begin Header {{{\nusing namespace std;\n\n#ifndef DEBUG\n#define dump(...)\n#endif\n\n#define all(x) x.begin(), x.end()\n#define rep(i, b, e) for (intmax_t i = (b), i##_limit = (e); i < i##_limit; ++i)\n#define reps(i, b, e) for (intmax_t i = (b), i##_limit = (e); i <= i##_limit; ++i)\n#define repr(i, b, e) for (intmax_t i = (b), i##_limit = (e); i >= i##_limit; --i)\n#define var(Type, ...) Type __VA_ARGS__; input(__VA_ARGS__)\n\nconstexpr size_t    operator\"\"_zu(unsigned long long value) { return value; };\nconstexpr intmax_t  operator\"\"_jd(unsigned long long value) { return value; };\nconstexpr uintmax_t operator\"\"_ju(unsigned long long value) { return value; };\n\nconstexpr int INF = 0x3f3f3f3f;\nconstexpr intmax_t LINF = 0x3f3f3f3f3f3f3f3f_jd;\n\ntemplate <class T, class Compare = less<>>\nusing MaxHeap = priority_queue<T, vector<T>, Compare>;\ntemplate <class T, class Compare = greater<>>\nusing MinHeap = priority_queue<T, vector<T>, Compare>;\n\ninline void input() {}\ntemplate <class Head, class... Tail>\ninline void input(Head&& head, Tail&&... tail) {\n    cin >> head;\n    input(forward<Tail>(tail)...);\n}\n\ntemplate <class T>\ninline istream& operator>>(istream &is, vector<T> &vec) {\n    for (auto &e: vec) {\n        is >> e;\n    }\n    return is;\n}\n\ninline void output() { cout << \"\\n\"; }\ntemplate <class Head, class... Tail>\ninline void output(Head&& head, Tail&&... tail) {\n    cout << head;\n    if (sizeof...(tail)) {\n        cout << \" \";\n    }\n    output(forward<Tail>(tail)...);\n}\n\ntemplate <class T>\ninline ostream& operator<<(ostream &os, const vector<T> &vec) {\n    static constexpr const char *delim[] = {\" \", \"\"};\n    for (const auto &e: vec) {\n        os << e << delim[&e == &vec.back()];\n    }\n    return os;\n}\n\ntemplate <class T>\ninline vector<T> makeVector(const T &initValue, size_t sz) {\n    return vector<T>(sz, initValue);\n}\n\ntemplate <class T, class... Args>\ninline auto makeVector(const T &initValue, size_t sz, Args... args) {\n    return vector<decltype(makeVector<T>(initValue, args...))>(sz, makeVector<T>(initValue, args...));\n}\n\ntemplate <class Func>\nclass FixPoint : Func {\npublic:\n    explicit constexpr FixPoint(Func&& f) noexcept : Func(forward<Func>(f)) {}\n\n    template <class... Args>\n    constexpr decltype(auto) operator()(Args&&... args) const {\n        return Func::operator()(*this, std::forward<Args>(args)...);\n    }\n};\n\ntemplate <class Func>\nstatic inline constexpr decltype(auto) makeFixPoint(Func&& f) noexcept {\n    return FixPoint<Func>{forward<Func>(f)};\n}\n\ntemplate <class Container>\nstruct reverse_t {\n    Container &c;\n    reverse_t(Container &c) : c(c) {}\n    auto begin() { return c.rbegin(); }\n    auto end() { return c.rend(); }\n};\n\ntemplate <class Container>\nauto reversed(Container &c) {\n    return reverse_t<Container>(c);\n}\n\ntemplate <class T>\ninline bool chmax(T &a, const T &b) noexcept {\n    return b > a && (a = b, true);\n}\n\ntemplate <class T>\ninline bool chmin(T &a, const T &b) noexcept {\n    return b < a && (a = b, true);\n}\n\ntemplate <class T>\ninline T diff(const T &a, const T &b) noexcept {\n    return a < b ? b - a : a - b;\n}\n// End Header }}}\n\n// Geometry {{{\nconst long double EPS = 1e-10;\nconst long double PI = acos(-1);\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nstruct Real {\n    long double x;\n\n    Real(long double x = 0) : x(x) {}\n    Real(const Real& rhs) { x = rhs.x; }\n\n    Real operator+(const Real& rhs) const { return Real(x + rhs.x); }\n    Real& operator+=(const Real& rhs) { return x += rhs.x, *this; }\n    Real operator-(const Real& rhs) const { return Real(x - rhs.x); }\n    Real& operator-=(const Real& rhs) { return x -= rhs.x, *this; }\n    Real operator*(const Real& rhs) const { return Real(x * rhs.x); }\n    Real& operator*=(const Real& rhs) { return x *= rhs.x, *this; }\n    Real operator/(const Real& rhs) const { return Real(x / rhs.x); }\n    Real& operator/=(const Real& rhs) { return x /= rhs.x, *this; }\n    Real operator-() const { return Real(-x); }\n    Real& operator++() { return ++x, *this; }\n    Real& operator--() { return --x, *this; }\n    Real operator++(int) { Real tmp(x); return ++x, tmp; }\n    Real operator--(int) { Real tmp(x); return --x, tmp; }\n    bool operator==(const Real& rhs) const { return fabs(x - rhs.x) < EPS; }\n    bool operator!=(const Real& rhs) const { return !(*this == rhs); }\n    bool operator<(const Real& rhs) const { return (*this == rhs) ? false : x < rhs.x; }\n    bool operator>(const Real& rhs) const { return (*this == rhs) ? false : x > rhs.x; }\n    bool operator<=(const Real& rhs) const { return (*this == rhs) ? true : x < rhs.x; }\n    bool operator>=(const Real& rhs) const { return (*this == rhs) ? true : x > rhs.x; }\n\n    friend istream& operator>>(istream& is, Real& rhs) {\n        is >> rhs.x;\n        return is;\n    }\n    friend ostream& operator<<(ostream& os, const Real& rhs) {\n        os << rhs.x;\n        return os;\n    }\n\n    friend Real pow(const Real& n, const Real& p) { return pow(n.x, p.x); }\n    friend Real pow(Real n, intmax_t p) {\n        Real ret = 1;\n        for (; p > 0; p >>= 1) {\n            if (p & 1) ret *= n;\n            n *= n;\n        }\n        return ret;\n    }\n    friend Real abs(const Real& rhs) { return abs(rhs.x); }\n    friend Real sin(const Real& rhs) { return sin(rhs.x); }\n    friend Real cos(const Real& rhs) { return cos(rhs.x); }\n    friend Real tan(const Real& rhs) { return tan(rhs.x); }\n    friend Real asin(const Real& rhs) { return asin(rhs.x); }\n    friend Real acos(const Real& rhs) { return acos(rhs.x); }\n    friend Real atan(const Real& rhs) { return atan(rhs.x); }\n    friend Real atan2(const Real& lhs, const Real& rhs) { return atan2(lhs.x, rhs.x); }\n    friend Real sqrt(const Real& rhs) { return sqrt(rhs.x); }\n    friend Real ceil(const Real& rhs) { return ceil(rhs.x); }\n    friend Real floor(const Real& rhs) { return floor(rhs.x); }\n    friend Real round(const Real& rhs) { return round(rhs.x); }\n};\n\nusing real_t = Real;\n\nstruct Point {\n    real_t x, y;\n\n    Point(real_t x = 0, real_t y = 0) : x(x), y(y) {}\n\n    Point operator+(const Point& rhs) const { return Point(x + rhs.x, y + rhs.y); }\n    Point operator-(const Point& rhs) const { return Point(x - rhs.x, y - rhs.y); }\n    Point operator*(const real_t& rhs) const { return Point(x * rhs, y * rhs); }\n    Point operator/(const real_t& rhs) const { return Point(x / rhs, y / rhs); }\n    Point operator-() const { return Point(-x, -y); }\n    bool operator==(const Point& rhs) const { return x == rhs.x && y == rhs.y; }\n    bool operator!=(const Point& rhs) const { return !(*this == rhs); }\n    bool operator<(const Point& rhs) const { return (x == rhs.x) ? y < rhs.y : x < rhs.x; }\n    bool operator>(const Point& rhs) const { return (x == rhs.x) ? y > rhs.y : x > rhs.x; }\n    bool operator<=(const Point& rhs) const { return (*this == rhs) ? true : *this < rhs; }\n    bool operator>=(const Point& rhs) const { return (*this == rhs) ? true : *this > rhs; }\n\n    friend istream& operator>>(istream& is, Point& rhs) {\n        is >> rhs.x >> rhs.y;\n        return is;\n    }\n    friend ostream& operator<<(ostream& os, const Point& rhs) {\n        os << rhs.x << ' ' << rhs.y;\n        return os;\n    }\n};\n\nusing Vector = Point;\n\nreal_t norm(const Vector& a) { return a.x * a.x + a.y * a.y; }\nreal_t len(const Vector& a) { return sqrt(norm(a)); }\nreal_t dot(const Vector& a, const Vector& b) {\n    return a.x * b.x + a.y * b.y;\n}\nreal_t cross(const Vector& a, const Vector& b) {\n    return a.x * b.y - a.y * b.x;\n}\n\nstruct Segment {\n    Point p1, p2;\n\n    Segment(Point p1 = Point(), Point p2 = Point()) : p1(p1), p2(p2) {}\n\n    bool operator==(const Segment& rhs) const { return p1 == rhs.p1 && p2 == rhs.p2; }\n    bool operator!=(const Segment& rhs) const { return !(*this == rhs); }\n\n    friend istream& operator>>(istream& is, Segment& rhs) {\n        is >> rhs.p1 >> rhs.p2;\n        return is;\n    }\n    friend ostream& operator<<(ostream& os, const Segment& rhs) {\n        os << rhs.p1 << ' ' << rhs.p2;\n        return os;\n    }\n};\n\nusing Line = Segment;\n\nreal_t len(const Segment& s) { return len(s.p1 - s.p2); }\n\nbool isParallel(const Vector& a, const Vector& b) {\n    return cross(a, b) == 0.0;\n}\nbool isParallel(const Point& a1, const Point& a2, const Point& b1, const Point& b2) {\n    return isParallel(a1 - a2, b1 - b2);\n}\nbool isParallel(const Segment& s1, const Segment& s2) {\n    return isParallel(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\nbool isOrthogonal(const Vector& a, const Vector& b) {\n    return dot(a, b) == 0.0;\n}\nbool isOrthogonal(const Point& a1, const Point& a2, const Point& b1, const Point& b2) {\n    return isOrthogonal(a1 - a2, b1 - b2);\n}\nbool isOrthogonal(const Segment& s1, const Segment& s2) {\n    return isOrthogonal(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\nPoint project(const Segment& s, const Point& p) {\n    const Vector base = s.p2 - s.p1;\n    const Vector hypo = p - s.p1;\n    const real_t r = dot(hypo, base) / norm(base);\n    return s.p1 + base * r;\n}\n\nint ccw(const Point& p0, const Point& p1, const Point& p2) {\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if (cross(a, b) > 0.0) return COUNTER_CLOCKWISE;\n    if (cross(a, b) < 0.0) return CLOCKWISE;\n    if (dot(a, b) < 0) return ONLINE_BACK;\n    if (norm(a) < norm(b)) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\nbool intersect(const Point& p1, const Point& p2, const Point& p3, const Point& p4) {\n    return ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 && ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0;\n}\n\nbool intersect(const Segment& s1, const Segment& s2) {\n    return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\nPoint reflect(const Segment& s, const Point& p) {\n    return p + (project(s, p) - p) * 2.0;\n}\n\nreal_t getDistancePP(const Point& p1, const Point& p2) {\n    return len(p2 - p1);\n}\n\nreal_t getDistanceLP(const Line& l, const Point& p) {\n    return abs(cross(l.p2 - l.p1, p - l.p1) / len(l.p2 - l.p1));\n}\n\nreal_t getDistanceSP(const Segment& s, const Point& p) {\n    if (dot(s.p2 - s.p1, p - s.p1) < 0.0) return getDistancePP(p, s.p1);\n    if (dot(s.p1 - s.p2, p - s.p2) < 0.0) return getDistancePP(p, s.p2);\n    return getDistanceLP(s, p);\n}\n\nreal_t getDistanceSS(const Segment& s1, const Segment& s2) {\n    if (intersect(s1, s2)) return 0.0;\n    const real_t opt1 = getDistanceSP(s1, s2.p1);\n    const real_t opt2 = getDistanceSP(s1, s2.p2);\n    const real_t opt3 = getDistanceSP(s2, s1.p1);\n    const real_t opt4 = getDistanceSP(s2, s1.p2);\n    return min({opt1, opt2, opt3, opt4});\n}\n// }}}\n\nsigned main() {\n    ios_base::sync_with_stdio(false);\n    cin.tie(nullptr);\n    cout.setf(ios_base::fixed);\n    cout.precision(10);\n\n    var(size_t, Q);\n\n    while (Q--) {\n        var(Segment, s1, s2);\n        output(getDistanceSS(s1, s2));\n    }\n\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define rep(i, n) for(int i = 1, i##_end_ = (n); i <= i##_end_; ++i)\nusing namespace std;\ntypedef pair<int, int> pii;\ntypedef long long ll;\n\n\nconst double eps = 1e-10;\nint sgn(double x) {\n    if(fabs(x) < eps) return 0;\n    return x < 0 ? -1 : 1;\n}\nstruct Point {\n    double x, y;\n    Point(double xp=0, double yp=0): x(xp), y(yp) { }\n    Point operator + (const Point& rhs) const { return Point(x+rhs.x, y+rhs.y); }\n    Point operator - (const Point& rhs) const { return Point(x-rhs.x, y-rhs.y); }\n    Point operator * (const double& k) const { return Point(x*k, y*k); }\n    Point operator / (const double& k) const { return Point(x/k, y/k); }\n    bool operator < (const Point& rhs) const { return x < rhs.x || (x==rhs.x && y<rhs.y); }\n    bool operator == (const Point& rhs) const {return sgn(x - rhs.x) == 0 && sgn(y - rhs.y) == 0; }\n    Point turn(double rad) { return Point(x*cos(rad)-y*sin(rad), x*sin(rad)+y*cos(rad)); }\n    void scan() { scanf(\"%lf%lf\", &x, &y); }\n};\ntypedef Point Vector;\n\ndouble dot(Vector x, Vector y) { return x.x*y.x + x.y*y.y; }\ndouble length(Vector x) { return sqrt(dot(x, x)); }\ndouble cross(Vector A, Vector B) { return A.x*B.y - A.y*B.x; }\n\nPoint LineProjection(Point P, Point A, Point B) {\n    Vector v = B - A;\n    return A + v * (dot(P-A, v) / dot(v, v));\n}\nPoint LineReflection(Point P, Point A, Point B) {\n    Point proj = LineProjection(P, A, B);\n    return proj + proj - P;\n}\n\nint Clockwise(Point O, Point A, Point B) {\n    /* Clockwise: -1\n       Counterclockwise: 1\n       Otherwise: 0\n    */\n    return sgn(cross(A - O, B - O));\n}\n\nvoid SegCheck(Point a, Point b, Point p) {\n    Vector d = b - a, e = p - a;\n    if(sgn(dot(d, e)) == -1) puts(\"ONLINE_BACK\");\n    else if(sgn(length(e) - length(d)) == 1) puts(\"ONLINE_FRONT\");\n    else puts(\"ON_SEGMENT\");\n}\n\nint JudgeLLParOrth(Point a1, Point a2, Point b1, Point b2) {\n    /* 2: parallel\n       1: orthogonal\n       0: otherwise\n    */\n    Vector v = a2 - a1, w = b2 - b1;\n    if(sgn(cross(v, w)) == 0) return 2;\n    if(sgn(dot(v, w)) == 0) return 1;\n    return 0;\n}\n\nbool CheckSSProperIntersection(Point a1, Point a2, Point b1, Point b2) {\n    double c1 = cross(a1 - b1, b2 - b1), c2 = cross(a2 - b1, b2 - b1);\n    double c3 = cross(b1 - a1, a2 - a1), c4 = cross(b2 - a1, a2 - a1);\n    return sgn(c1) * sgn(c2) == -1 && sgn(c3) * sgn(c4) == -1;\n}\nbool OnSeg(Point P, Point A, Point B) {\n    Vector v = B - P, w = A - P;\n    if(sgn(cross(v, w)) != 0) return false;\n    return sgn(dot(v, w)) == -1;\n}\n\nbool CheckSSIntersection(Point a1, Point a2, Point b1, Point b2) {\n    if(a1 == b1 || a1 == b2 || a2 == b1 || a2 == b2) return true;\n    if(OnSeg(a1, b1, b2) || OnSeg(a2, b1, b2) || OnSeg(b1, a1, a2) || OnSeg(b2, a1, a2))\n        return true;\n    return CheckSSProperIntersection(a1, a2, b1, b2);\n}\n\n// Ensure lines intersect first!!! cross(v, w) != 0\nPoint LLIntersection(Point a1, Point a2, Point b1, Point b2) {\n    Vector v = a2 - a1, w = b2 - b1, u = a1 - b1;\n    assert(cross(v, w) != 0);\n    double t1 = cross(w, u) / cross(v, w);\n    return a1 + v * t1;\n} // Line: 2 Points\n\nPoint LLIntPV(Point P, Vector v, Point Q, Vector w) {\n    Vector u = P - Q;\n    assert(cross(v, w) != 0);\n    double t = cross(w, u) / cross(v, w);\n    return P + v * t;\n} // Line: Point + Vector\n\ndouble PLDist(Point P, Point A, Point B) {\n    return fabs(cross(B - P, A - P) / length(A - B));\n}\n\ndouble PSDist(Point P, Point A, Point B) {\n    if(A == B) return length(P - A);\n    if(sgn(dot(A-P, B-A)) == 1) return length(A - P);\n    if(sgn(dot(B-P, B-A)) == -1) return length(B - P);\n    return fabs(cross(B-P, A-P) / length(A-B));\n}\n\ndouble SSDist(Point a1, Point a2, Point b1, Point b2) {\n    if(CheckSSIntersection(a1, a2, b1, b2)) return 0.0;\n    return min(min(PSDist(a1,b1,b2), PSDist(a2,b1,b2)), min(PSDist(b1,a1,a2), PSDist(b2,a1,a2)));\n}\n\nint main() {\n    Point a1, a2, b1, b2, res;\n    int q; scanf(\"%d\", &q);\n    while(q--) {\n        a1.scan(), a2.scan();\n        b1.scan(), b2.scan();\n        printf(\"%.11f\\n\", SSDist(a1, a2, b1, b2));\n    }\n    \n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long double ld;\n\nconst ld EPS = 1e-9;\nconst ld INF = 1e10;\nconst ld PI = M_PI;\n\nstruct Point{\n  ld x, y;\n  Point(ld x, ld y):x(x), y(y){}\n  Point(){}\n};\n\nPoint operator+(const Point &a, const Point &b){\n  return Point(a.x + b.x, a.y + b.y);\n}\nPoint operator-(const Point &a, const Point &b){\n  return Point(a.x - b.x, a.y - b.y);\n}\nPoint operator*(const Point &a, const ld b){\n  return Point(a.x * b, a.y * b);\n}\nPoint operator*(const Point &a, const Point &b){\n  return Point(a.x*b.x-a.y*b.y, a.x*b.y+a.y*b.x);\n}\nPoint operator/(const Point &a, const ld b){\n  return Point(a.x / b, a.y / b);\n}\n\nld cross(const Point &a, const Point &b){\n  return a.x*b.y - a.y*b.x;\n}\n\nld dot(const Point &a, const Point &b){\n  return a.x*b.x + a.y*b.y;\n}\n\nld norm(const Point &a){\n  return dot(a, a);\n}\n\nstruct Line:vector<Point>{\n  Line(Point a = Point(0, 0), Point b = Point(0, 0)){\n    this->push_back(a);\n    this->push_back(b);\n  }\n};\n\nint ccw(Point a, Point b, Point c){\n  b = b - a;\n  c = c - a;\n  if(cross(b, c) > EPS) return +1; // 反時計周り\n  if(cross(b, c) < -EPS) return -1; // 時計周り\n  if(dot(b, c) < 0) return +2; // c -- a -- b がこの順番に一直線上\n  if(norm(b) < norm(c)) return -2; // a -- b -- c がこの順番に一直線上\n  return 0; // a -- c -- b が一直線上\n}\n\nld abs(const Point &a){\n  return sqrt(norm(a));\n}\n\nPoint projection(const Line &l, const Point &p){\n  ld t = dot(p-l[0], l[1]-l[0]) / norm(l[0] - l[1]);\n  return l[0] + (l[1] - l[0]) * t;\n}\n\nbool is_intersect_SS(const Line &s, const Line &t){\n  return ccw(s[0], s[1], t[0]) * ccw(s[0], s[1], t[1]) <= 0 &&\n    ccw(t[0], t[1], s[0]) * ccw(t[0], t[1], s[1]) <= 0;\n}\n\nbool is_intersect_SP(const Line &l, const Point &p){\n  return ccw(l[0], l[1], p) == 0;\n}\n\nld distance_SP(const Line &s, const Point &p){\n  const Point r = projection(s, p);\n  if(is_intersect_SP(s, r)) return abs(r - p);\n  return min(abs(s[0] - p), abs(s[1] - p));\n}\n\nld distance_SS(const Line &s, const Line &t){\n  if(is_intersect_SS(s, t)) return 0;\n  return min(min(distance_SP(s, t[0]), distance_SP(s, t[1])),\n\t     min(distance_SP(t, s[0]), distance_SP(t, s[1])));\n}\n\nint main(){  \n  int q;\n  cin >> q;\n  while(q--){\n    Point p0, p1;\n    Line l1, l2;\n    cin >> p0.x >> p0.y >> p1.x >> p1.y;\n    l1 = Line(p0, p1);\n    \n    cin >> p0.x >> p0.y >> p1.x >> p1.y;\n    l2 = Line(p0, p1);\n    \n    ld ans = distance_SS(l1, l2);\n    printf(\"%.10Lf\\n\", ans);\n    //printf(\"%.10Lf %.10Lf\\n\", ans.x, ans.y);\n  }\n  \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nnamespace Computational_Geometry\n{\n\tconst long double eps=1e-10;\n\tstruct Vector2\n\t{\n\t\tlong double x,y;\n\t\tVector2(long double X=0.0,long double Y=0.0):x(X),y(Y) {}\n\t\tVector2 *read() {scanf(\"%Lf%Lf\",&x,&y); return this;}\n\t\tvoid print() {printf(\"%.10Lf %.10Lf\",x,y); return;}\n\t\tinline Vector2 operator - () const{return Vector2(-x,-y);}\n\t\tinline Vector2 operator + (const Vector2 &A) const{return Vector2(x+A.x,y+A.y);}\n\t\tinline Vector2 operator - (const Vector2 &A) const{return Vector2(x-A.x,y-A.y);}\n\t\tinline Vector2 operator * (const long double &k) const{return Vector2(x*k,y*k);}\n\t\tinline Vector2 operator / (const long double &k) const{return Vector2(x/k,y/k);}\n\t\tinline long double operator * (const Vector2 &A) const{return x*A.x+y*A.y;}\n\t\tinline long double operator ^ (const Vector2 &A) const{return x*A.y-y*A.x;}\n\t\tinline long double norm2() const{return x*x+y*y;}\n\t\tinline long double norm() const{return sqrtl(x*x+y*y);}\n\t\tinline bool operator < (const Vector2 &A) const{return (x<A.x-eps)||(x<=A.x+eps)&&(y<A.y-eps);}\n\t\tinline bool operator == (const Vector2 &A) const{return fabsl(x-A.x)<=eps&&fabsl(y-A.y)<=eps;}\n\t\tinline bool operator << (const Vector2 &A) const{return (y<-eps)^(A.y<-eps)?A.y<-eps:((*this^A)>eps)||((*this^A)>=-eps)&&(x>=-eps)&&(A.x<-eps);}\n\t\tinline Vector2 trans(long double a_11,long double a_12,long double a_21,long double a_22) const{return Vector2(x*a_11+y*a_12,x*a_21+y*a_22);}\n\t};\n\t#define Point Vector2\n\t\n\tPoint Projection(Point P,Point L1,Point L2)\n\t{\n\t\tlong double k1=(L2-L1)*(P-L1),k2=(L2-L1).norm2();\n\t\treturn L1+((L2-L1)*(k1/k2));\n\t}\n\t\n\tPoint Reflection(Point P,Point L1,Point L2)\n\t{\n\t\tlong double k1=(L2-L1)*(P-L1),k2=(L2-L1).norm2();\n\t\tPoint mid=L1+(L2-L1)*(k1/k2);\n\t\treturn mid*2-P;\n\t}\n\t\n/*\n\tCOUNTER_CLOCKWISE 1\n\tCLOCKWISE 2\n\tONLINE_BACK 3\n\tONLINE_FRONT 4\n\tON_SEGMENT 5\n*/\n\tint Counter_Clockwise(Point S,Point T1,Point T2)\n\t{\n\t\tif(((T1-S)^(T2-S))>eps) return 1;\n\t\telse if(((T1-S)^(T2-S))<-eps) return 2;\n\t\telse if(((T1-S)*(T2-S))<-eps) return 3;\n\t\telse if(((T2-S).norm2()-(T1-S).norm2())>eps) return 4;\n\t\telse return 5;\n\t}\n\tint Counter_Clockwise_Bool(Point S,Point T1,Point T2)\n\t{\n\t\tif(((T1-S)^(T2-S))>eps) return 1;\n\t\telse if(((T1-S)^(T2-S))<-eps) return -1;\n\t\telse if(((T1-S)*(T2-S))<-eps) return -1;\n\t\telse if(((T2-S).norm2()-(T1-S).norm2())>eps) return 1;\n\t\telse return 0;\n\t}\n\t\n\tint Parallel(Point S1,Point T1,Point S2,Point T2)\n\t{\n\t\treturn fabsl((T1-S1)^(T2-S2))<=eps;\n\t}\n\tint Orthogonal(Point S1,Point T1,Point S2,Point T2)\n\t{\n\t\treturn fabsl((T1-S1)*(T2-S2))<=eps;\n\t}\n/*\n\tPARALLEL 1\n\tORTHOGONAL 2\n\tOTHER 3\n*/\n\tint Parallel_Orthogonal(Point S1,Point T1,Point S2,Point T2)\n\t{\n\t\tif(Parallel(S1,T1,S2,T2)) return 1;\n\t\telse if(Orthogonal(S1,T1,S2,T2)) return 2;\n\t\telse return 3;\n\t}\n\t\n\tint Intersection(Point S1,Point T1,Point S2,Point T2)\n\t{\n\t\treturn Counter_Clockwise_Bool(S1,T1,S2)*Counter_Clockwise_Bool(S1,T1,T2)<=0&&Counter_Clockwise_Bool(S2,T2,S1)*Counter_Clockwise_Bool(S2,T2,T1)<=0;\n\t}\n\t\n\tPoint Crosspoint(Point S1,Point T1,Point S2,Point T2)\n\t{\n\t\tlong double d1=fabsl((S1-S2)^(T2-S2)),d2=fabsl((T1-S2)^(T2-S2));\n\t\treturn S1+(T1-S1)*(d1/(d1+d2));\n\t}\n\t\n\tlong double DistanceLP(Point S,Point T,Point P)\n\t{\n\t\treturn fabsl((P-S)^(T-S)/(T-S).norm());\n\t}\n\tlong double DistanceSP(Point S,Point T,Point P)\n\t{\n\t\tif((P-S)*(T-S)<-eps) return (P-S).norm();\n\t\telse if((P-T)*(S-T)<-eps) return (P-T).norm();\n\t\telse return DistanceLP(S,T,P);\n\t}\n\tlong double Distance(Point S1,Point T1,Point S2,Point T2)\n\t{\n\t\tif(Intersection(S1,T1,S2,T2)) return 0;\n\t\telse return min(min(DistanceSP(S1,T1,S2),DistanceSP(S1,T1,T2)),min(DistanceSP(S2,T2,S1),DistanceSP(S2,T2,T1)));\n\t}\n};\nusing namespace Computational_Geometry;\nPoint P,P0,P1,S0,S1,T0,T1;\nint Q;\nint main()\n{\n\tscanf(\"%d\",&Q);\n\twhile(Q--)\n\t{\n\t\tS0.read(),T0.read(),S1.read(),T1.read();\n\t\tprintf(\"%.10Lf\\n\",Distance(S0,T0,S1,T1));\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <stack>\n#include <queue>\n#include <vector>\n#include <list>\n#include <set>\n#include <map>\n#include <algorithm>\n#include <cmath>\n\n#include <cstdio>\n\nusing namespace std;\n#define rep(i, n) for (int i = 0; i < (n); i++)\n#define repc(i, s, n) for (int i = (s); i <= (n); i++)\n#define rrep(i, n) for (int i = (n) - 1; i >= 0; i--)\n#define rrepc(i, s, n) for (int i = (s); i >= (n); i--)\ntypedef long long ll;\ntypedef unsigned long long ull;\n\n/*================================================\n\tGeometry\n================================================*/\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nconst int COUNTER_CLOCKWISE = 1;\nconst int CLOCKWISE = -1;\nconst int ONLINE_BACK = 2;\nconst int ONLINE_FRONT = -2;\nconst int ON_SEGMENT = 0;\n\nclass Point {\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0) : x(x), y(y) {}\n\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a) { return Point(a * x, a * y); }\n\tPoint operator / (double a) { return Point(x / a, y / a); }\n\n\tdouble abs() { return sqrt(norm()); }\n\tdouble norm() { return x * x + y * y; }\n\n\tbool operator < (const Point& p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point& p) const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\ntypedef Point Vector;\nstruct Segment { Point p1, p2; };\ntypedef Segment Line;\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0) : c(c), r(r) {}\n};\ntypedef vector<Point> Polygon;\n\ndouble dot(Vector a, Vector b) { return a.x * b.x + a.y * b.y; }\ndouble cross(Vector a, Vector b) { return a.x * b.y - a.y * b.x; }\n\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS) return CLOCKWISE;\n\tif (dot(a, b) < -EPS) return ONLINE_BACK;\n\tif (a.norm() < b.norm()) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\nbool intersect(Point p1, Point p2, Point p3, Point p4) { return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 && ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0); }\nbool intersect(Segment s1, Segment s2) { return intersect(s1.p1, s1.p2, s2.p1, s2.p2); }\n\ndouble Distance_PP(Point a, Point b) { return (a - b).abs(); }\ndouble Distance_PL(Point p, Line l) { return abs(cross(l.p2 - l.p1, p - l.p1)) / (l.p2 - l.p1).abs(); }\ndouble Distance_PS(Point p, Segment s) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0) return (p - s.p1).abs();\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0) return (p - s.p2).abs();\n\treturn Distance_PL(p, s);\n}\ndouble Distance_SS(Segment s1, Segment s2) {\n\tdouble op1, op2, op3, op4, distance;\n\n\tif (intersect(s1, s2)) return 0.0;\n\n\top1 = Distance_PS(s1.p1, s2);\n\top2 = Distance_PS(s1.p2, s2);\n\top3 = Distance_PS(s2.p1, s1);\n\top4 = Distance_PS(s2.p2, s1);\n\n\tdistance = min(op1, op2);\n\tdistance = min(distance, op3);\n\tdistance = min(distance, op4);\n\n\treturn distance;\n}\n\ndouble ans[1000];\n\nint main()\n{\n\tint q;\n\tSegment s1, s2;\n\n\tcin >> q;\n\trep(i, q) {\n\t\tcin >> s1.p1.x >> s1.p1.y >> s1.p2.x >> s1.p2.y;\n\t\tcin >> s2.p1.x >> s2.p1.y >> s2.p2.x >> s2.p2.y;\n\t\tans[i] = Distance_SS(s1, s2);\n\t}\n\n\trep(i, q) printf(\"%.10lf\\n\", ans[i]);\n\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n#define fi first\n#define se second\n#define mp make_pair\n#define pb push_back\n#define rep(i, a, b) for(int i = (a); i < (b); ++i)\n#define per(i, a, b) for(int i = (b) - 1; i >= (a); --i)\n#define sz(a) (int)a.size()\n#define de(c) cout << #c << \" = \" << c << endl\n#define dd(c) cout << #c << \" = \" << c << \" \"\n#define all(a) a.begin(), a.end()\n#define pw(x) (1ll<<(x))\n#define endl \"\\n\"\ntypedef long long ll;\ntypedef double db;\ntypedef pair<int, int> pii;\ntypedef vector<int> vi;\n\ntypedef db T;\nconst db eps = 1e-9 , pi = acosl(-1.);\nint sgn(T x){return (x>eps)-(x<-eps);}\nstruct P{\n  T x,y; P(){} P(T x,T y):x(x),y(y){}\n  P operator - (const P&b) const {return P(x-b.x,y-b.y);}\n  P operator + (const P&b) const {return P(x+b.x,y+b.y);}\n  T operator * (const P&b) const {return x*b.x+y*b.y;}\n  T operator / (const P&b) const {return x*b.y-y*b.x;}\n  P operator * (const T&k) const {return P(x*k,y*k);}\n  P operator / (const T&k) const {return P(x/k,y/k);}\n};\nT norm(P a){return a*a;}\nT abs(P a) {return sqrtl(norm(a));}\nP proj(P p,P a,P b){return (b-a)*((p-a)*(b-a)/norm(b-a))+a;}\nP reflect(P p,P a,P b){return proj(p,a,b)*2-p;}\nT cross(P o,P a,P b){return (a-o)/(b-o);}\nint crossOp(P o,P a,P b){return sgn(cross(o,a,b));}\nbool onPS(P p,P s,P t){return sgn((t-s)/(p-s))==0&&sgn((p-s)*(p-t))<=0;}\nstruct L{ P s,t;L(){} L(P s,P t):s(s),t(t){}};\nP insLL(L a,L b){ // line x line\n  P s = a.s - b.s , v = a.t - a.s , w = b.t - b.s;\n  db k1 = s / w , k2 = w / v;\n  if(sgn(k2) == 0) return abs(b.s - a.s) < abs(b.t - a.s) ? b.s : b.t;\n  return a.s + v * (k1 / k2);\n}\nbool isSS(L a,L b){ // seg x seg , replace x->y to accelerate\n  T c1=(a.t-a.s)/(b.s-a.s),c2=(a.t-a.s)/(b.t-a.s);\n  T c3=(b.t-b.s)/(a.s-b.s),c4=(b.t-b.s)/(a.t-b.s);\n  return sgn(c1) * sgn(c2) <= 0 && sgn(c3) * sgn(c4) <= 0 &&\n    sgn(max(a.s.x,a.t.x) - min(b.s.x,b.t.x)) >= 0 &&\n    sgn(max(b.s.x,b.t.x) - min(a.s.x,a.t.x)) >= 0 &&\n    sgn(max(a.s.y,a.t.y) - min(b.s.y,b.t.y)) >= 0 &&\n    sgn(max(b.s.y,b.t.y) - min(a.s.y,a.t.y)) >= 0;\n}\ndb disPL(P p,L a){return fabs((a.t-a.s)/(p-a.s)) / abs(a.t-a.s);}\ndb disPS(P p,L a){ // p x seg dis\n  if(sgn((a.t-a.s)*(p-a.s)) == -1) return abs(p-a.s);\n  if(sgn((a.s-a.t)*(p-a.t)) == -1) return abs(p-a.t);\n  return disPL(p,a);\n}\ndb disSS(L a,L b){ // seg x seg dis\n  if(isSS(a,b)) return 0;\n  return min(min(disPS(a.s,b),disPS(a.t,b)),min(disPS(b.s,a),disPS(b.t,a)));\n}\n\nP a, b, c, d;\n\nint main() {\n\tstd::ios::sync_with_stdio(0);\n\tstd::cin.tie(0);\n\tint q;\n\tcin >> q;\n\tcout << setiosflags(ios::fixed);\n\tcout << setprecision(10);\n\twhile(q--) {\n\t\tcin >> a.x >> a.y >> b.x >> b.y;\n\t\tcin >> c.x >> c.y >> d.x >> d.y;\n\t\tL x = L(a, b), y = L(c, d);\n\t\tcout << disSS(x, y) << endl;\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <complex>\n#include <utility>\n#include <algorithm>\nusing namespace std;\n\ntypedef complex<double> Point, Vector;\ntypedef pair<Point, Point> Segment, Line;\n\n#define X real()\n#define Y imag()\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\ndouble dot(Vector a, Vector b){\n    return a.X * b.X + a.Y * b.Y;\n}\n\ndouble cross(Vector a, Vector b){\n    return a.X * b.Y - a.Y * b.X;\n}\n\ndouble norm(Vector a){\n    return a.X * a.X + a.Y * a.Y;\n}\n\ndouble abs(Vector a){\n    return sqrt(norm(a));\n}\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nint ccw(Point p0, Point p1, Point p2){\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if(cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n    if(cross(a, b) < -EPS) return CLOCKWISE;\n    if(dot(a, b) < -EPS) return ONLINE_BACK;\n    if(norm(a) < norm(b)) return ONLINE_FRONT;\n\n    return ON_SEGMENT;\n}\n\n// 線分の交差判定\nbool intersect(Point p1, Point p2, Point p3, Point p4){\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 && ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\n\nbool intersect(Segment s1, Segment s2){\n    return intersect(s1.first, s1.second, s2.first, s2.second);\n}\n\ndouble getDistanceLP(Line l, Point p){\n    return abs(cross(l.second - l.first, p - l.first) / abs(l.first - l.second));\n}\n\ndouble getDistanceSP(Segment s, Point p){\n    if(dot(s.second - s.first, p - s.first) < 0.0) return abs(p - s.first);\n    if(dot(s.first - s.second, p - s.second) < 0.0) return abs(p - s.second);\n    return getDistanceLP(s, p);\n}\n\ndouble getDistanceSS(Segment s1, Segment s2){\n    if(intersect(s1, s2)) return 0.0;\n    return min({getDistanceSP(s1, s2.first), getDistanceSP(s1, s2.second), getDistanceSP(s2, s1.first), getDistanceSP(s2, s1.second)});\n}\n\nint main(){\n    int q; cin>>q;\n    while(q--){\n        double x0, y0, x1, y1, x2, y2, x3, y3;\n        cin>>x0>>y0>>x1>>y1>>x2>>y2>>x3>>y3;\n        Segment s1 = {Point(x0, y0), Point(x1, y1)};\n        Segment s2 = {Point(x2, y2), Point(x3, y3)};\n        \n        printf(\"%.10f\\n\", getDistanceSS(s1, s2));\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<iomanip>\n#include<algorithm>\n#define _USE_MATH_DEFINES\n#include<math.h>\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS )\nusing namespace std;\n\nclass Point {\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0) :x(x), y(y) {}\n\tPoint operator + (Point p) {\n\t\treturn Point(x + p.x, y + p.y); \n\t}\n\tPoint operator - (Point p) {\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n\tPoint operator * (double a) {\n\t\treturn Point(a * x, a * y);\n\t}\n\tPoint operator / (double a) {\n\t\treturn Point(x / a, y / a);\n\t}\n\n\tdouble abs() {\n\t\treturn sqrt(norm());\n\t}\n\tdouble norm() {\n\t\treturn x * x + y * y;\n\t}\n\n\tbool operator < (const Point &p)const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p)const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b) {\n\treturn a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n\treturn a.x * b.y - a.y * b.x;\n}\n\ndouble getDistanceSP(Point p, Point p1, Point p2) {\n\tif (dot(p - p1, p2 - p1) < 0.0)return (p - p1).abs();\n\telse if (dot(p - p2, p1 - p2) < 0.0)return (p - p2).abs();\n\telse return  fabs(cross(p2 - p1, p - p1)) / (p2 - p1).abs();\n}\n\n\ndouble angle(Vector a, Vector b) {\n\tif (cross(a, b) >= 0.0)return acos(dot(a, b) / a.abs() / b.abs());\n\telse return (-1) * acos(dot(a, b) / a.abs() / b.abs());\n}\n\nbool doIntersect(Point p1, Point p2, Point p3, Point p4) {\n\tif ((equals(fabs(angle(p2 - p1, p4 - p1)), 0) || equals(fabs(angle(p2 - p1, p4 - p1)), M_PI)) && (equals(fabs(angle(p2 - p1, p3 - p1)), 0) || equals(fabs(angle(p2 - p1, p3 - p1)), M_PI)))return false;\n\telse if (angle(p3 - p1, p4 - p1) >= angle(p3 - p1, p2 - p1) && angle(p3 - p1, p2 - p1) >= 0.0 && angle(p2 - p3, p1 - p3) >= angle(p2 - p3, p4 - p3) && angle(p2 - p3, p4 - p3) >= 0.0)return true;\n\telse if (angle(p3 - p2, p4 - p2) >= angle(p3 - p2, p1 - p2) && angle(p3 - p2, p1 - p2) >= 0.0 && angle(p1 - p3, p2 - p3) >= angle(p1 - p3, p4 - p3) && angle(p1 - p3, p4 - p3) >= 0.0)return true;\n\telse return false;\n}\n\ndouble getDistanceSS(Point p1, Point p2, Point p3, Point p4) {\n\tif (doIntersect(p1, p2, p3, p4))return 0;\n\telse return min({ getDistanceSP(p4, p1, p2), getDistanceSP(p3, p1, p2), getDistanceSP(p1, p3, p4), getDistanceSP(p2, p3, p4) });\n}\n\nint main() {\n    int i, q;\n\tdouble x1, x2, x3, x4, y1, y2, y3, y4;\n\tPoint ans;\n\tcin >> q;\n\tfor (i = 0; i < q; i++) {\n\t\tcin >> x1 >> y1 >> x2 >> y2 >> x3 >> y3 >> x4 >> y4;\n\t\tPoint p1(x1, y1), p2(x2, y2), p3(x3, y3), p4(x4, y4);\n\t\tcout << setprecision(15) << getDistanceSS(p1, p2, p3, p4) << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nconst int dx[]={0,1,0,-1,1,-1,-1,1};\nconst int dy[]={-1,0,1,0,1,1,-1,-1};\nconst int INF = 1<<30;\nconst double EPS = 1e-15;\n#define PB push_back\n#define mk make_pair\n#define fi first\n#define se second\n#define ll long long\n#define reps(i,j,k) for(int i = (j); i < (k); i++)\n#define rep(i,j) reps(i,0,j)\n#define MOD 1000000007\ntypedef pair<int,int> Pii;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\nstruct Point{\n    double x,y;\n    Point(){}\n    Point(double _x,double _y){\n        x = _x;\n        y = _y;\n    }\n    Point operator + (Point p){\n        return Point(x+p.x,y+p.y);\n    }\n  \n    Point operator - (Point p){\n        return Point(x-p.x,y-p.y);\n    }\n  \n    Point operator * (double k){\n        return Point(k*x,k*y);\n    }\n     \n    Point operator * (Point p){\n        return Point(p.x*x-p.y*y,p.x*y+p.y*x);\n    }\n\n    Point operator / (double k){\n        return Point(x/k,y/k);\n    }\n    \n    Point operator = (Point p){\n        x = p.x;\n        y = p.y;\n        return *this;\n    }\n\n    bool operator<(const Point &p)const{\n        //return y!=p.y?y<p.y:x<p.x; //y-x\n        return x!=p.x?x<p.x:y<p.y; //x-y\n    }\n\n};\ndouble dot(Point p, Point q){\n    return p.x*q.x+p.y*q.y;\n}\n  \ndouble cross(Point p,Point q){\n    return p.x*q.y-q.x*p.y;\n}\n  \ndouble norm(Point p){\n    //?????????????????§?????????2???\n    return p.x*p.x+p.y*p.y;\n}\n  \ndouble pabs(Point p){\n    //?????????????????§??????\n    return sqrt(norm(p));\n}\nPoint UnitVector(Point a){\n    //??????????????????\n    return a/pabs(a);\n}\ntypedef vector<Point> Polygon;\nstruct Line : Polygon{\n    Line(){}\n    Line(Point p,Point q){\n        PB(p);\n        PB(q);  \n    }\n};\nstruct Circle{\n    Point p; //?????????\n    double r; //??????\n    Circle(){}\n    Circle(Point _p,double _r){\n        p = _p;\n        r = _r;\n    }\n};\nint ccw(Point a,Point b,Point c){\n    b = b-a;\n    c = c-a;\n    if(cross(b,c) > 0)return +1; //a???b ??§???????¨?????????????c ccw\n    if(cross(b,c) < 0)return -1; //a???b ??§????¨?????????????c ccw\n    if(dot(b,c) < 0)return +2; // c--a--b;\n    if(pabs(b)<pabs(c))return -2; //a--b--c\n    return 0; //a--c--b\n}\n\n\nPoint projection(Line l, Point p){\n    double t = dot(p-l[0],l[0]-l[1]) / norm(l[0]-l[1]);\n    return l[0] + (l[0]-l[1])*t;\n}\n\nPoint reflection(Line l, Point p){\n    return p + (projection(l,p)-p)*2.0; \n}\n\nbool intersectLL(Line l,Line m){\n    return fabs(cross(l[1]-l[0],m[1]-m[0])) > EPS || //????????§??????\n            fabs(cross(l[1]-l[0],m[0]-l[0])) < EPS; //????????????\n}\n\nbool intersectLP(Line l, Point p){\n    return fabs(cross(l[1]-p,l[0]-p)) < EPS;\n}\n\nbool intersectLS(Line l,Line m){\n    return cross(l[1]-l[0],m[0]-l[0])* //m[0]?????´???l???????????????\n           cross(l[1]-l[0],m[1]-l[0]) < EPS; //m[1]?????´???l???????????????\n}\n\nbool intersectSS(Line l,Line m){\n    //??????l??¨??????m??????????????????????????????\n    return (ccw(l[0],l[1],m[0])*ccw(l[0],l[1],m[1])<=0)&&\n            (ccw(m[0],m[1],l[0])*ccw(m[0],m[1],l[1])<=0);\n}\n\nbool intersectSP(Line l, Point p){\n    //??????l??¨???p?????????????????????\n    return pabs(l[0]-p)+pabs(l[1]-p)-pabs(l[1]-l[0]) < EPS;\n}\n\n\nbool intersectCP(Circle c,Point p){\n    //???c??¨???p???????????????\n    //true->???c????????¨??????p????????¨????????????.\n    return fabs(pabs(p-c.p)-c.r)<EPS;\n}\n\nint intersectCL(Circle c,Line l,Point *p,Point *q){\n    if(norm(projection(l,c.p) - c.p) - c.r*c.r > EPS)return 0;\n    double d1 = pabs(c.p-l[0]);\n    double d2 = pabs(c.p-l[1]);\n    if(d1 < c.r + EPS && d2 < c.r + EPS)return 0;\n    if(d1 < c.r - EPS && d2 > c.r+EPS\n        || d1 > c.r + EPS && d2 < c.r -EPS)return 1;\n    Point h = projection(l,c.p);\n    if(dot(l[0] - h,l[1] - h) < 0)return 2;\n    return 0;\n}\n\nint intersectCC(Circle a,Circle b,Point *p,Point *q){\n    double dist = pabs(a.p-b.p);\n    if(dist < fabs(a.r-b.r) || dist > a.r+b.r){\n        //????????????????????´??????????????¨???\n        //????????????????????¨???????????¨???\n        *p = Point(1e15,1e15);\n        *q = Point(1e15,1e15);\n        return 0;\n    }\n    else if(fabs(dist-a.r-b.r) < EPS){\n        //??????1?????§????????£???????????¨???\n        Point way;\n        way = b.p-a.p;\n        *p = a.p+UnitVector(way)*a.r;\n        *q = *p;\n        return 1;\n    }\n    else{\n        //??????2?????§????????£???????????¨???\n        if(a.r < b.r){\n            swap(a.r,b.r);\n            swap(a.p,b.p);\n        }\n        double s = (a.r + b.r + dist) / 2.0 ;\n        double area = sqrt(s * (s - a.r) * (s - b.r) * (s - dist));\n        double h = 2.0 * area / dist;\n\n        Point  v = b.p-a.p;\n        v = UnitVector(v);\n        Point  m = a.p + (v*sqrt(a.r*a.r-h*h));\n        Point  n = v * Point(0.0,1.0);\n        \n        *p = m + (n * h);\n        *q = m - (n * h);\n        return 2;\n    }\n}\n\ndouble distanceLP(Line l,Point p){\n    //??´???l??¨???p????????¢\n    return pabs(p-projection(l,p));\n}\n\ndouble distanceLL(Line l,Line m){\n    //??´???l??¨??´???m????????¢\n    return intersectLL(l,m) ? 0.0 : distanceLP(l,m[0]);\n}\n\ndouble distanceLS(Line l,Line m){\n    //??´???l??¨??????m????????¢\n    if(intersectLS(l,m))return 0.0;\n    return min(distanceLP(l,m[0]),distanceLP(l,m[1]));\n}\n\ndouble distanceSP(Line l,Point p){\n    //??????l??¨???p????????¢\n    Point r = projection(l,p);\n    if(intersectSP(l,r))return pabs(r-p);\n    return min(pabs(l[0]-p),pabs(l[1]-p));\n}\n\ndouble distanceSS(Line l,Line m){\n    //??????l??¨??????m????????¢\n    if(intersectSS(l,m)) return 0.0;\n    return min(min(distanceSP(l,m[0]),distanceSP(l,m[1])),\n               min(distanceSP(m,l[0]),distanceSP(m,l[1])));\n}\n\ndouble TriangleArea(Point a,Point b,Point c){\n    b = b - a;\n    c = c - a;\n    return cross(b,c)*0.5; //?????????????????¨??????????????§??¨???\n}\n \ndouble VertexArea(Polygon v){\n    double subArea = 0.0;\n    rep(i,v.size()-1){\n        subArea += TriangleArea(v[0],v[i],v[i+1]);\n    }\n    return subArea; //?????????????????¨??????????????§??¨???\n}\n\nPoint crosspoint(Line l,Line m){\n    //??????l??¨??????m?????????\n    if(intersectSS(l,m) == false)return Point(INF,INF);\n    return m[0]+(m[1]-m[0])*cross(l[1]-l[0],l[1]-m[0])/cross(l[1]-l[0],m[1]-m[0]);\n}\n \nPolygon ConvexHull(Polygon v){\n    //??????????????????\n    int n = v.size();\n    int k = 0;\n    sort(v.begin(),v.end());\n    Polygon e(2*n);\n    for(int i = 0; i < n; i++){\n        while(k >= 2 && ccw(e[k-2],e[k-1],v[i])<=0)k--;\n        e[k++] = v[i];\n    }\n    for(int i = n-2, t = k+1; i >= 0; i--){\n        while(k >= t && ccw(e[k-2],e[k-1],v[i])<=0)k--;\n        e[k++] = v[i];\n    }\n    e.resize(k-1);\n    return e;\n}\n\nbool IsInnerPointVertex(Polygon v , Point p){\n    Line l;\n    l.PB(p);\n    l.PB(Point(0,INF));\n    if(v.size() == 2){\n        return ccw(v[0],v[1],p)==2;\n    }\n    int cnt = 0;\n    rep(i,v.size()){\n        Line m;\n        m.PB(v[i]);m.PB(v[(i+1)%v.size()]);\n        if(intersectSS(l,m))cnt++;\n    }\n    return cnt%2;\n}\n\nint main(){\n    int Q;\n    scanf(\"%d\",&Q);\n    while(Q--){\n        Line l,m;\n        double x1,y1,x2,y2;\n        scanf(\"%lf%lf%lf%lf\",&x1,&y1,&x2,&y2);\n        l.PB(Point(x1,y1));l.PB(Point(x2,y2));\n        scanf(\"%lf%lf%lf%lf\",&x1,&y1,&x2,&y2);\n        m.PB(Point(x1,y1));m.PB(Point(x2,y2));\n        printf(\"%.10lf\\n\",distanceSS(l,m));\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\nusing namespace std;\n\n//?????????\n#pragma region MACRO \n#define putans(x)  std::cerr << \"answer: \" ; cout << (x) << endl\n#define dputans(x) std::cerr << \"answer: \"; cout << setprecision(13) << (double)(x) << endl\n#define REP(i,a,n) for(int i=(a); i<(int)(n); i++)\n#define RREP(i,a,n) for(int i=(int)(n-1); i>= a; i--)\n#define rep(i,n) REP(i,0,n)\n#define rrep(i,n) RREP(i,0,n)\n#define all(a) begin((a)),end((a))\n#define mp make_pair\n#define exist(container, n) ((container).find((n)) != (container).end())\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n#ifdef _DEBUG //???????????????????????????????????????????????????\nstd::ifstream ifs(\"data.txt\");\n#define put ifs >>\n#else //?????£????????????????????§?????????????????????\n#define put cin >>\n#endif\n#pragma endregion\n\n//???????????°??????????????´\n#pragma region CODING_SUPPORT\n#ifdef _DEBUG\n#define dbg(var0) { std::cerr << ( #var0 ) << \"=\" << ( var0 ) << endl; }\n#define dbg2(var0, var1) { std::cerr << ( #var0 ) << \"=\" << ( var0 ) << \", \"; dbg(var1); }\n#define dbg3(var0, var1, var2) { std::cerr << ( #var0 ) << \"=\" << ( var0 ) << \", \"; dbg2(var1, var2); }\n#define dbgArray(a,n) {std::cerr << (#a) << \"=\";  rep(i,n){std::cerr <<(a[i])<<\",\";} cerr<<endl;} \n#else\n#define dbg(var0) {}\n#define dbg2(var0, var1) {}\n#define dbg3(var0, var1, var2) {}\n#define dbgArray(a,n) {}\n#endif \n#pragma endregion \n//typedef????????????????????????????¶????????????§?????????\n#pragma region TYPE_DEF\ntypedef long long ll;\ntypedef pair<int, int> pii; typedef pair<string, string> pss; typedef pair<int, string>pis;\ntypedef vector<string> vs; typedef vector<int> vi;\n#pragma endregion\n//??????????????°(???????????????????????§??????)\n#pragma region CONST_VAL\n#define PI (2*acos(0.0))\n#define EPS (1e-10)\n#define MOD (ll)(1e9 + 7)\n#define INF (ll)(1e9)\n#pragma endregion\n\n//?????????????????????\n#pragma region Geometry\nclass Point {//????????????????????????\npublic:\n\tdouble x, y;\n\tPoint(double x = 0, double y = 0) : x(x), y(y) {}\n\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a) { return Point(x * a, y * a); }\n\tdouble operator * (Point p) { return dot(p); }\n\tPoint operator / (double a) { return Point(x / a, y / a); }\n\n\tdouble abs() { return sqrt(norm()); }\n\tdouble norm() { return x*x + y*y; }\n\n\tbool operator < (const Point &p) const { return  x != p.x ? x < p.x : y < p.y; }\n\tbool operator == (const Point &p) const { return  fabs(x - p.x) < EPS && fabs(y - p.y) < EPS; }\n\t//???????????????\n\tdouble dot(Point p) { return x * p.x + y * p.y; }\n\tdouble cross(Point p) { return x * p.y - y * p.x; }\n\n\n};\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0) :c(c), r(r) {}\n};\nstruct Segment {//??????\n\tPoint p1, p2;\n};\ntypedef Point Vector;\ntypedef Segment Line;//??´???\ntypedef vector<Point> Polygon; //????§???¢?????????\n\n//?????????????¨????\ndouble v_norm(Point p) { return p.x * p.x + p.y * p.y; }\ndouble abs(Point p) { return sqrt(v_norm(p)); }\ndouble dot(Point a, Point b) { return a.x * b.x + a.y * b.y; } //??????\ndouble cross(Point a, Point b) { return a.x * b.y - a.y * b.x; }//??????\n\n//??´????????????\nbool isOrthogonal(Vector a, Vector b) { return equals(a*b, 0.0); }\nbool isParallel(Vector a, Vector b) { return equals(cross(a, b), 0.0); }\n\n//??????s???????????????p????°???±\nPoint projection(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(( p - s.p1 ), base) / v_norm(base);\n\treturn s.p1 + base*r;\n}\n//??????s???????????????p???????°?\nPoint reflection(Segment s, Point p) { return p + ( projection(s, p) - p ) * 2; }\n\n//3??????????????¢????????????\n//p1-p0???????????¨?????? p2-p0 ???2????????????????????????\nstatic const int COUNTER_CLOCKWISE = 1;//???????¨???????\nstatic const int CLOCKWISE = -1;//????¨???????\nstatic const int ONLINE_BACK = 2;//????????´?????¶p2,p0,p1??????\nstatic const int ONLINE_FRONT = -2;//????????´??????p0,p1,p2??????\nstatic const int ON_SEGMENT = 0;//p2???p0,p1??????????????´???\nint ccw(Point p0, Point p1, Point p2) {//????¨????????????¢??°\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS) return CLOCKWISE;\n\tif (dot(a, b) < -EPS) return ONLINE_BACK;\n\tif (a.norm() < b.norm()) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\n//??????p1p2??¨p3p4???????????????\nbool intersect(Point p1, Point p2, Point p3, Point p4) {return ( (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0) && (ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0));}\nbool intersect(Segment s1, Segment s2) {return intersect(s1.p1 , s1.p2, s2.p1, s2.p2);}\n\n//?????¢ Segment Line Point\ndouble getDistance(Point a, Point b) { return abs( a - b ); }\ndouble getDistanceLP(Line l, Point p) {return abs(cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1));}\ndouble getDistanceSP(Segment s, Point p) {\n\tdbg(abs(p - s.p1));\n\tdbg(abs(p - s.p2));\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0) return abs(p - s.p1);\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0) return abs(p - s.p2);\n\treturn getDistanceLP(s, p);\n}\ndouble getDistance(Segment s1, Segment s2) {\n\tif (intersect(s1, s2)) return 0.0;\n\tdbg2(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2));\t\n\tdbg2(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2));\n\treturn min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2))\n\t         , min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\n//2???????????????\nPoint getCrossPoint(Segment s1, Segment s2) {\n\tVector base = s2.p2 - s2.p1;\n\tdouble d1 = abs(cross(base , s1.p1 - s2.p1));\n\tdouble d2 = abs(cross(base , s1.p2 - s2.p1));\n\tdouble t = d1 / ( d1 + d2 );\n\treturn s1.p1 + (s1.p2 - s1.p1 ) * t;\n}\n\n//??´?????¨????????????????????????\npair<Point, Point> getCrossPoints(Circle c, Line l) {\n\t//assert(intersect(c, i)); ?????????????????´????????????????????????\n\tVector pr = projection(l , c.c);\n\tVector e = ( l.p2 - l.p1 ) / abs(l.p2 - l.p1);\n\tdouble base = sqrt(c.r * c.r - (pr - c.c).norm());\n\treturn mp(pr + e * base, pr - e * base);\n}\n\n//????????????????????????\nstatic const int IN_POLYGON = 2;//????§???¢????????¨\nstatic const int OUT_POLYGON = 1;//????§???¢????????¨\nstatic const int ON_POLYGON = 0;//????§???¢????????????\nint contains(Polygon g, Point p) {\n\tint n = g.size();\n\tbool x = false;\n\trep(i, n) {\n\t\tPoint a = g[i] - p, b = g[( i + 1 ) % n] - p;\n\t\tif (abs(cross(a, b)) < EPS && dot(a, b) < EPS) return OUT_POLYGON;\n\t\tif (a.y > b.y) swap(a, b);\n\t\tif (a.y < EPS && EPS < b.y && cross(a, b)) x = !x;\n\t}\n\treturn ( x ? IN_POLYGON : ON_POLYGON );\n}\n\n//?????? CGL_4_A : Convex Hull; \n//containsPointOnline ?????????????????????????????????????????????\n//???????§???¢???????????§????????????????????????????????§???????????????????????????????????§???\n//???????¨???¨?????§???????????§?¨?????????????\nPolygon ConvexHull(Polygon s, bool containsPointOnline = false) {\n\tPolygon u, l;\n\tif (s.size() < 3) return s;\n\tsort(s.begin(), s.end());\n\tu.push_back(s[0]); \n\tu.push_back(s[1]);\n\tl.push_back(s[s.size() - 1]);\n\tl.push_back(s[s.size() - 2]);\n\tauto conditionContaining = [](int ccw, bool containsPointOnline)->bool{\n\t\tif (containsPointOnline) return ccw == COUNTER_CLOCKWISE;\n\t\telse return ccw != CLOCKWISE;\n\t};\n\tfor (int i = 2; i < s.size(); i++) {//?????´?????°???\n\t\tfor (int n = u.size(); ( n >= 2 ) && conditionContaining( ccw(u[n - 2], u[n - 1], s[i]),containsPointOnline); n--) {\n\t\t\tu.pop_back();\n\t\t}\n\t\tu.push_back(s[i]);\n\t}\n\tfor (int i = s.size() - 3; i >= 0; i--) {//?????´?????°???\n\t\tfor (int n = l.size(); n >= 2 && conditionContaining( ccw(l[n - 2], l[n - 1], s[i]),containsPointOnline); n--)l.pop_back();\n\t\tl.push_back(s[i]);\n\t}\n\treverse(l.begin(), l.end());\n\tfor (int i = u.size() - 2; i >= 1; i--) l.push_back(u[i]);\n\tdouble tmpMax = l[0].y;\n\tint rotIndex = 0;\n\tREP(i,1,l.size()) {//?????¶??????????????????????????????????????´??????\n\t\tif (l[i].y < tmpMax) {\n\t\t\trotIndex = i;\n\t\t\ttmpMax = l[i].y;\n\t\t}\n\t}\n\trotate(l.begin(), l.begin() + rotIndex, l.end());\n\treturn l;\n}\n#pragma endregion \n\n\n//??????????£?????????°???\n//https://www23.atwiki.jp/akitaicpc/pages/65.html\n\nint main() {\n\tint q; put q;\n\trep(i, q) {\n\t\tPoint p[4];\n\t\trep(j, 4) {\n\t\t\tput p[j].x >> p[j].y;\n\t\t}\n\t\tSegment s0, s1;\n\t\ts0.p1 = p[0];\n\t\ts0.p2 = p[1];\n\t\ts1.p1 = p[2];\n\t\ts1.p2 = p[3];\n\t\tdouble dist = getDistance(s0,s1);\n\t\tcout  << setprecision(10) << dist << endl;\n\t}\n\nEND:\n\treturn 0;\n}\n\n\t//int n; put n;\n\t//Polygon p;\n\t//rep(i, n) {\n\t//\tdouble x, y; put x >> y;\n\t//\tp.push_back(Point(x, y));\n\t//}\n\t//Polygon k = ConvexHull(p,true);\n\t//cout << k.size() << endl;\n\t//rep(i, k.size()) {\n\t//\tcout << k[i].x << \" \" << k[i].y << endl;\n\t//}\t\n\n\t/*double xp1, yp1, xp2, yp2; put xp1 >> yp1 >> xp2 >> yp2;\n\tSegment s;\n\ts.p1 = Point(xp1, yp1);\n\ts.p2 = Point(xp2, yp2);\n\n\tint n; put n;\n\trep(i, n) {\n\t\tPoint p;\n\t\tput p.x >> p.y;\n\t\tPoint prj =reflection(s, p);\n\t\tcout << setprecision(13) << prj.x << \" \" << prj.y << endl;\n\t}*/\n\n\t//ll ans = 0;\n\t//int n; put n;\n\t//vi a;\n\t//set<Range> rl;\n\t//rep(i, n) {\n\t//\tint k; put k;\n\t//\ta.push_back(k);\n\t//}\n\t//reverse(a.begin(), a.end());\n\t//int miner = a[0];\n\t//ans += miner;\n\t//REP(i,1,n) {\n\t//\tif (a[i] < miner) {\n\t//\t\tminer = a[i];\n\t//\t\tans += miner * ( i + 1 );\n\t//\t}\n\t//\telse {\n\t//\t\tans += miner *(i)+a[i];\n\t//\t}\n\t//}\n\n\t////???????????¬??????????????\\???????????????\n\t//auto getI = [&]()->auto { int tmp; put tmp; return tmp; };\n\t//auto getLL = [&]()->auto { ll tmp; put tmp; return tmp; };\n\t//auto getS = [&]()->auto { string tmp; put tmp; return tmp; };\n//\n//int n, a, b; put n >> a >> b;\n//\tvi t;\n//\trep(i, n) {\n//\t\tt.push_back(get());\n//\t}\n//\tint count = 0;\n//\trep(i, n) {\n//\t\tif (t[i] < a || b <= t[i])count++;\n//\t}\n//\tputans(count);\n\n//\n//\tset<string> list;\n//\tint ans = 0;\n//\tint n; put n;\n//\tint k; put k;\n//\tint numAlphabet[26];\n//\tfill(all(numAlphabet), 0);\n//\trep(i, n) {\n//\t\tstring s; put s;\n//\t\tif (exist(list, s))continue;\n//\t\tlist.insert(s);\n//\t\tnumAlphabet[s[0] - 'A']++;\n//\t}\n//\tsort(all(numAlphabet),greater<int>());\n//\twhile (true) {\n//\t\trep(i, k) {\n//\t\t\tif (numAlphabet[i] == 0) goto END;\n//\t\t\telse numAlphabet[i]--;\n//\t\t}\n//\t\tsort(all(numAlphabet), greater<int>());\n//\t\tans++;\n//\t}\n//END:\n//\tputans(ans);\n\n\n\t//int t; put t;\n\t//rep(i, t) {\n\t//\tint n, d; put n >> d;\n\t//\tif (n == 1) {\n\t//\t\tputans(d);\n\t//\t\tcontinue;\n\t//\t}\n\t//\tputans(n % 2 != 0 ? ( n - 1 ) * 127 + d : ( n - 1 ) * 127 + ( 127 ^ d ));\n\t//}\n\n\n//\n//int n; put n;\n//string s1, s2;\n//string r;\n//string patan1[4] = { \".\",\"#\",\".\",\"#\" };\n//string patan2[4] = { \".\",\".\",\"#\",\"#\" };\n//bool front = true;\n//rep(j, 420 / 4) {\n//\tif (front) {\n//\t\trep(i, 4) {\n//\t\t\tcout << s1 + patan1[i] + \"\\n\" << s2 + patan2[i] << endl;\n//\t\t\tcin >> r;\n//\t\t\tif (r == \"T\") {\n//\t\t\t\ts1 += patan1[i];\n//\t\t\t\ts2 += patan2[i];\n//\t\t\t\tbreak;\n//\t\t\t}\n//\t\t\tif (r == \"F\" && i == 3) {\n//\t\t\t\tfront = !front;\n//\t\t\t}\n//\t\t\tif (r == \"end\")goto END;\n//\t\t}\n//\t}\n//\telse {\n//\t\trep(i, 4) {\n//\t\t\tcout << patan1[i] + s1 + \"\\n\" << patan2[i] + s2 << endl;\n//\t\t\tcin >> r;\n//\t\t\tif (r == \"T\") {\n//\t\t\t\ts1 = patan1[i] + s1;\n//\t\t\t\ts2 = patan2[i] + s2;\n//\t\t\t\tbreak;\n//\t\t\t}\n//\t\t\tif (r == \"F\" && i == 3) {\n//\t\t\t\tfront = !front;\n//\t\t\t}\n//\t\t\tif (r == \"end\")goto END;\n//\t\t}\n//\t}\n//\n//}\n//END:\n//cout << endl;\n\n\n\n\n\t//bool filled[1000][1000];\n\t//fill(*filled, *filled + 1000 * 1000, false);\n\t//int vx[4] = { 1,0,-1,0 };\n\t//int vy[4] = { 0,1,0,-1 };\n\t//Polygon sheep;\n\t//Polygon convex_sheep;\n\t//ll num = 0;\n\t//int h, w; put h >> w;\n\t//rep(i, h) {\n\t//\tstring s; put s;\n\t//\trep(j, s.size()) {\n\t//\t\tif (s[j] == 'X') {\n\t//\t\t\tif (i == 0 || j == 0 || i == h-1 || j == w-1) {\n\t//\t\t\t\tputans(-1);\n\t//\t\t\t\tgoto END;\n\t//\t\t\t}\n\t//\t\t\trep(k, 4) {\n\t//\t\t\t\tif (!filled[i + vx[k]][j + vy[k]]) {\n\t//\t\t\t\t\tsheep.push_back(Point(i + vx[k],j + vy[k]));\n\t//\t\t\t\t\tfilled[i + vx[k]][j + vy[k]] = true;\n\t//\t\t\t\t}\n\t//\t\t\t}\n\t//\t\t}\n\t//\t}\n\t//}\n\t//convex_sheep = ConvexHull(sheep);\n\n\t//rep(i, convex_sheep.size()) {\n\t//\tPoint s = convex_sheep[i % convex_sheep.size()];\n\t//\tPoint g = convex_sheep[(i + 1) % convex_sheep.size()];\n\t//\tll mandist = max(abs(s.x - g.x),abs(s.y - g.y));\n\t//\tdbg(mandist);\n\t//\tnum += mandist;\n\t//} \n\t//putans(num);"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n#define EPS 1e-10\n#define equals(a,b) (fabs( (a) - (b) )< EPS )\ntypedef struct point{\n\tdouble x,y;\n\tpoint(){};\n\tpoint(double x ,double y):x(x),y(y){};\n\tpoint operator + (point &p){ return point(x+p.x,y+p.y);\t}\n\tpoint operator - (point &p){ return point(x-p.x,y-p.y);\t}\n\tpoint operator * (point &p){ return point(x*p.x-y*p.y,x*p.y+y*p.x) ;}\n\tpoint operator * (double a){ return point(x*a,y*a);\t}\n\tpoint operator / (double a){ return point(x/a,y/a);\t}\n\t\n\tdouble abs() { return sqrt(norm()); }\n\tdouble norm() { return x*x+y*y; }\n\t\n\tbool operator < (const point &p) const { return x!=p.x ? x<p.x : y<p.y; }\n\tbool operator == (const point &p) const { return fabs(x-p.x)<EPS && fabs(y-p.y)<EPS; }\n}point;\ndouble abs(point a){return a.abs();}\ndouble norm(point a){return a.norm();}\n\ntypedef complex<double> C;\ntypedef struct { point s,e;} line;\n\nC convert(point a){ return C(a.x,a.y); }\npoint convert( C a){ return point(a.real(),a.imag() );}\ndouble dot(point a,point b){ return a.x*b.x+a.y*b.y ; } //内積　a・b\ndouble cross(point a,point b){ return a.x*b.y - a.y*b.x ; }//外積(z成分)　a×b\npoint vec(line l){return l.e-l.s;}\nline make(point s,point e){\n\tline res; res.s=s; res.e=e;\n\treturn res;\n}\npoint make(){ \n\tdouble x,y; cin>>x>>y;\n       \treturn point(x,y);\n}\n//直交\nbool isorthogonal(point a,point b){ return equals(dot(a,b), 0.0); }\nbool isorthogonal(line l1,line l2){ return isorthogonal(vec(l1),vec(l2)); }\n//平行\nbool isparallel(point a,point b){ return equals(cross(a,b),0.0); }\nbool isparallel(line l1,line l2){ return isparallel(vec(l1),vec(l2)); }\n//射影\npoint project(line s,point p){\n\tpoint base = vec(s);\n\tdouble r=dot(p-s.s,base)/base.norm();\n\tbase = base*r;\n\treturn s.s+base;\n}\n//反射\npoint reflect(line l,point p){\n\tpoint tmp=project(l,p)-p;\n\ttmp= tmp*2.0;\n\treturn p+tmp;\n\n}\n//交差判定\n\nint ccw(point p0,point p1,point p2){\n\tpoint a = p1-p0;\n\tpoint b = p2-p0;\nif(cross(a,b)>EPS) return 1;//counter_clockwise\nif(cross(a,b)<-EPS) return -1;//clockwise\nif(dot(a,b)<-EPS)return 2;//online_back\nif(a.norm()<b.norm() ) return -2;//online_front\nreturn 0;//on_segment\n}\n// line p1-p2 line p3-p4\nbool intersect(point p1,point p2,point p3,point p4){\n\treturn (ccw(p1,p2,p3)*ccw(p1,p2,p4)<=0 && ccw(p3,p4,p1)*ccw(p3,p4,p2) ); \n}\n// line l1,l2\nbool intersect(line l1,line l2){ return intersect(l1.s,l1.e,l2.s,l2.e); }\n\n\n//距離\n//point-point\ndouble distance(point a,point b){ return abs(a-b); }\n//point-line(直線）\ndouble distance2(line l,point p){\n\treturn abs(cross(vec(l),p-l.s)/abs(l.e-l.s));\n}\n//point-line(線分)\ndouble distance(line l,point p){\n\tif( dot(vec(l),p-l.s) <0.0 ) return abs(p-l.s);\n\tif( dot(l.s-l.e,p-l.e) <0.0 ) return abs(p-l.e);\n\treturn distance2(l,p);\n}\n//line-line\ndouble distance(line l1,line l2){\n\tif(intersect(l1,l2)) return 0.0;\n\treturn min(min(distance(l1,l2.s),distance(l1,l2.e) ), min(distance(l2,l1.s),distance(l2,l1.e) ) );\n}\n\n//交点\npoint crosspoint(line l1,line l2){\n\tpoint base = vec(l2);\n\tdouble d1 = abs(cross(base,l1.s-l2.s) );\n\tdouble d2 = abs(cross(base,l1.e-l2.s) );\n\tdouble t = d1/(d1+d2);\n\tpoint tmp = vec(l1)*t;\n\treturn l1.s+tmp;\n}\n\nint main(){\nint q;\ncin>>q;\nfor(int i=0;i<q;i++){\n\tpoint p0=make(),p1=make(),p2=make(),p3=make();\n\tline l0 = make(p0,p1) ,l1 = make(p2,p3);\n\tprintf(\"%0.10lf\\n\",distance(l0,l1) );\n}\n\nreturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <iomanip>\n#include <algorithm>\n\nusing namespace std;\n\n#define EPS 1e-6\n#define LEFT_TOP POS(10001, 10001)\n#define NO_INTERSECT POS(-12345, -12345)\n#define PARALLEL POS(-10001, -10001)\n#define COLINE POS(12345, 12345)\nconst double PI = acos(-1.0);\n\ntypedef long double T;\n\nclass POS {\npublic:\n    T x, y;\n    POS(const T& x = 0, const T& y = 0) : x(x), y(y) {}\n    POS(const POS& x) : x(x.x), y(x.y) {}\n\n    bool operator==(const POS& rhs) const {\n        return x == rhs.x && y == rhs.y;\n    }\n\n    POS& operator+=(const POS& rhs) {\n        x += rhs.x;\n        y += rhs.y;\n        return *this;\n    }\n\n    POS operator -() {\n        POS tmp(-x, -y);\n        return tmp;\n    }\n\n    double dist(const POS& rhs) const {\n        T tmp_x = x-rhs.x, tmp_y = y-rhs.y;\n        return sqrt(tmp_x*tmp_x+tmp_y*tmp_y);\n    }\n\n    friend ostream& operator<<(ostream& out, const POS& pos) {\n        out << pos.x << \" \" << pos.y;\n        return out;\n    }\n};\n\nPOS const operator+(const POS& lhs, const POS& rhs) {\n    return POS(lhs) += rhs;\n}\n\nPOS const operator-(const POS& lhs, const POS& rhs) {\n    POS tmp = rhs;\n    tmp = -tmp;\n    return POS(lhs) += (tmp);\n}\n\nbool cmp_convex(const POS& lhs, const POS& rhs) {\n    return (lhs.x < rhs.x) || ( (lhs.x == rhs.x)&&(lhs.y < rhs.y) );\n}\n\ninline T cross(const POS& o, const POS& a, const POS& b) {\n    double value = (a.x-o.x)*(b.y-o.y) - (a.y-o.y)*(b.x-o.x);\n    if (fabs(value) < EPS) return 0;\n    return value;\n}\n\nvoid convex_hull(POS* points, POS* need, int& n) {\n    sort(points, points+n, cmp_convex);\n    int index = 0;\n    for (int i = 0; i < n; ++i) {\n        while (index >= 2 && cross(need[index-2], need[index-1], points[i]) <= 0) index--;\n        need[index++] = points[i];\n    }\n    int half_point = index+1;\n    for (int i = n-2; i >= 0; --i) {\n        while (index >= half_point && cross(need[index-2], need[index-1], points[i]) <= 0) index--;\n        need[index++] = points[i];\n    } /* be careful that start point will appear in fisrt and last in need array */\n    n = index;\n}\n\nclass LINE {\npublic:\n    POS start, end, vec;\n    double angle;\n    LINE() {}\n    LINE(const T& st_x, const T& st_y, const T& ed_x, const T& ed_y) :\n        start(st_x, st_y), end(ed_x, ed_y), vec(end - start), angle(atan2(vec.x, vec.y)) {}\n\n    LINE(const POS& start, const POS& end) :\n        start(start), end(end), vec(end - start), angle(atan2(vec.x, vec.y)) {}\n\n    LINE(const POS& end) : /* start point is origin */\n        start(0, 0), end(end), vec(end), angle(atan2(vec.x, vec.y)) {}\n\n    LINE(const T a, const T b, const T c) : /* given line by ax+by+c = 0 */\n        start(0, 0), end(0, 0), vec(-b, a) {\n        if (a == 0) {\n            start.y = end.y = -c/b;\n            end.x = -b;\n        }\n        else if (b == 0) {\n            start.x = end.x = -c/a;\n            end.y = a;\n        }\n        else if (c == 0) {\n            end.x = -b; end.y = a;\n        }\n        else {\n            start.y = -c/b; end.x = -c/a;\n            vec.x = -c/a; vec.y = c/b;\n        }\n        angle = atan2(vec.x, vec.y);\n    }\n\n    LINE build_orthogonal(const POS& point) const {\n        T c = -(vec.x*point.x + vec.y*point.y);\n        return LINE(vec.x, vec.y, c);\n    }\n\n    T length2() const { /* square */\n        T x = start.x - end.x, y = start.y - end.y;\n        return x*x + y*y;\n    }\n\n    void modify(T x, T y) {\n        this->end.x += x;\n        this->end.y += y;\n        this->vec.x += x;\n        this->vec.y += y;\n    }\n\n    bool on_line(const POS& a) const {\n        if (vec.x == 0) {\n            if (start.x != a.x) return false;\n            return true;\n        }\n        if (vec.y == 0) {\n            if (start.y != a.y) return false;\n            return true;\n        }\n        return fabs(( (a.x-start.x)/vec.x*vec.y + start.y )- a.y) < EPS;\n    }\n\n    bool operator/(const LINE& rhs) const { /* to see if this line parallel to LINE rhs */\n        return (vec.x*rhs.vec.y == vec.y*rhs.vec.x);\n    }\n\n    bool operator==(const LINE& rhs) const { /* to see if they are same line */\n        return (*this/rhs) && (rhs.on_line(start));\n    }\n\n    POS intersect(const LINE& rhs) const {\n        if (*this==rhs) return COLINE; /* return co-line */\n        if (*this/rhs) return PARALLEL; /* return parallel */\n\n        double A1 = vec.y, B1 = -vec.x, C1 = end.x*start.y - start.x*end.y;\n        double A2 = rhs.vec.y, B2 = -rhs.vec.x, C2 = rhs.end.x*rhs.start.y - rhs.start.x*rhs.end.y;\n        return POS( (B2*C1-B1*C2)/(A2*B1-A1*B2), (A1*C2-A2*C1)/(A2*B1-A1*B2) ); /* sometimes has -0 */\n    }\n\n    double dist(const POS& a) const {\n        return fabs(vec.y*a.x - vec.x*a.y + vec.x*start.y - vec.y*start.x)/sqrt(vec.y*vec.y+vec.x*vec.x);\n    }\n\n    double dist(const LINE& rhs) const {\n        POS intersect_point = intersect(rhs);\n        if (intersect_point == PARALLEL) {\n            return dist(rhs.start);\n        }\n        return 0;\n    }\n\n    friend ostream& operator<<(ostream& out, const LINE& line) {\n        out << line.start << \"-->\" << line.end << \" vec: \" << line.vec;\n        return out;\n    }\n};\n\nclass LINESEG : public LINE {\npublic:\n    LINESEG() : LINE(POS(0, 0)) {}\n    LINESEG(const LINE& input) : LINE(input) {}\n    LINESEG(const POS& start, const POS& end) : LINE(start, end) {}\n\n    bool on_lineseg(const POS& a) const {\n        if (!on_line(a)) return false;\n        bool first, second;\n        if (vec.x >= 0) first = (a.x >= start.x)&&(a.x <= end.x);\n        else first = (a.x <= start.x)&&(a.x >= end.x);\n        if (vec.y >= 0) second = (a.y >= start.y)&&(a.y <= end.y);\n        else second = (a.y <= start.y)&&(a.y >= end.y);\n        return first&&second;\n    }\n\n    bool operator==(const LINESEG& rhs) const {\n        return ( (rhs.start == start && rhs.end == end) ||\n              (rhs.start == end && rhs.end == start) );\n    }\n\n    bool operator==(const LINE& rhs) const {\n        return this->LINE::operator==(rhs);\n    }\n\n    T dot(const LINESEG& rhs) const {\n        return vec.x*rhs.vec.x + vec.y*rhs.vec.y;\n    }\n\n    T cross(const LINESEG& rhs) const {\n        return vec.x*rhs.vec.y - vec.y*rhs.vec.x;\n    }\n\n    bool clockwise(const LINE& a) const { /* to see if LINE a is in b's clockwise way */\n        return cross(a) > 0;\n    }\n\n    double dist(const POS& a) const {\n        double ortho_dist = this->LINE::dist(a);\n        LINE ortho_line = build_orthogonal(a);\n        POS intersect_point = this->LINE::intersect(ortho_line);\n        if (on_lineseg(intersect_point)) return ortho_dist;\n        else return min(a.dist(this->start), a.dist(this->end));\n    }\n\n    double dist(const LINE& line) const {\n        POS intersect_point = this->LINE::intersect(line);\n        if (intersect_point == COLINE) return 0;\n        if (intersect_point == PARALLEL) return dist(line.start);\n        if (on_lineseg(intersect_point)) return 0;\n        return min(line.dist(start), line.dist(end));\n    }\n\n    double dist(const LINESEG& line) const {\n        return min( min(dist(line.start), dist(line.end)),\n                    min(line.dist(start), line.dist(end)) );\n    }\n\n    POS intersect(const LINESEG& rhs) const {\n        LINE a1b1(start, rhs.start);\n        LINE a1b2(start, rhs.end);\n        LINE b1a1(rhs.start, start);\n        LINE b1a2(rhs.start, end);\n\n        POS tmp(this->LINE::intersect(rhs));\n\n        if (tmp == COLINE) {\n            if ( (start==rhs.start) && (!rhs.on_lineseg(end)) && (!on_lineseg(rhs.end)) ) return start;\n            if ( (start==rhs.end) && (!rhs.on_lineseg(end)) && (!on_lineseg(rhs.start)) ) return start;\n            if ( (end==rhs.start) && (!rhs.on_lineseg(start)) && (!on_lineseg(rhs.end)) ) return end;\n            if ( (end==rhs.end) && (!rhs.on_lineseg(start)) && (!on_lineseg(rhs.start)) ) return end;\n            if (on_lineseg(rhs.start) || on_lineseg(rhs.end) || rhs.on_lineseg(start) || rhs.on_lineseg(end)) return COLINE;\n            return NO_INTERSECT;\n        }\n\n        bool intersected =  ( (cross(a1b1)*cross(a1b2)<0) && (rhs.cross(b1a1)*rhs.cross(b1a2)<0) );\n        if (!intersected) return NO_INTERSECT;\n        if (!on_lineseg(tmp) || !rhs.on_lineseg(tmp)) return NO_INTERSECT;\n        return tmp;\n    }\n};\n\nint main()\n{\n    int q;\n    cin >> q;\n    cout << fixed << setprecision(10);\n    while(q--){\n        int xp0, yp0, xp1, yp1, xp2, yp2, xp3, yp3;\n        cin >> xp0 >> yp0 >> xp1 >> yp1 >> xp2 >> yp2 >> xp3 >> yp3;\n        POS p0(xp0, yp0), p1(xp1, yp1), p2(xp2, yp2), p3(xp3, yp3);\n        LINESEG l0(p0, p1), l1(p2, p3);\n        cout << l0.dist(l1) << endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n#define E 1e-18\n#define ll long long\n#define int long long\n#define db double\n#define For(i,j,k) for(int i=(int)(j);i<=(int)(k);i++)\n#define Rep(i,j,k) for(int i=(int)(j);i>=(int)(k);i--)\ninline ll read(){\n\tll x=0;char ch=getchar();bool f=0;\n\tfor(;!isdigit(ch);ch=getchar()) if(ch=='-') f=1;\n\tfor(;isdigit(ch);ch=getchar()) x=x*10+ch-'0';\n\treturn f?-x:x;\n}\nvoid write(ll x){\n\tif(x<0) putchar('-'),x=-x;\n\tif(x>=10) write(x/10);putchar(x%10+'0');\n}\nvoid writeln(ll x){write(x);puts(\"\");}\nvoid writep(ll x){write(x);putchar(' ');}\n\nint const N=1e5+3;\nint top,n,m,cnt,sta[N];\nstruct point{\n\tdb x,y;\n    point operator - (point A) const{return (point){x-A.x,y-A.y};}\n    point operator + (point A) const{return (point){x+A.x,y+A.y};}\n    void print(){printf(\"%.10lf %.10lf\\n\",x,y);}\n}A,B,C,D,c[N],p1[N],p2[N];\n\npoint operator *(db x,point A){return (point){x*A.x,x*A.y};}\ndb CJ(point A,point B){return A.x*B.y-B.x*A.y;}//叉积 \ndb DJ(point A,point B){return A.x*B.x+A.y*B.y;}//点积 \ndb dis(point A){return sqrt(A.x*A.x+A.y*A.y);}//向量长度 \nbool cmp(point A,point B){return (CJ(A,B)>0 || CJ(A,B)==0 && dis(A)<dis(B));}//按极角排序 \npoint CGL_1_A(point A,point B,point C){//点在直线上的投影点\n\tdb d=dis(B-A);\n\treturn (A+(DJ(C-A,B-A)/d/d*(B-A)));\n}\npoint CGL_1_B(point A,point B,point C){//点关于直线的对称点\n\tpoint P=CGL_1_A(A,B,C);\n\treturn (C+2*(P-C));\n}\nint CGL_1_C(point A,point B,point C){//向量的位置关系(向量AC和向量AB) \n    if (CJ(B-A,C-A)>0) return 1;//逆时针 \n    if (CJ(B-A,C-A)<0) return 2;//顺时针 \n    if (DJ(C-A,B-A)<0) return 3;//方向相反\n\tif (dis(C-A)>dis(B-A)) return 4;//方向相同 AC>AB\n\tif (dis(C-A)<=dis(B-A)) return 5;//方向相同 AB>AC\n}\nint CGL_2_A(point A,point B,point C,point D){//判断直线平行、垂直\n\tif (CJ(B-A,D-C)==0) return 2;//平行 \n\tif (DJ(B-A,D-C)==0) return 1;//垂直 \n\treturn 0;//相交 \n}\nint CGL_2_B(point A,point B,point C,point D){//判断线段是否有交\n\tif (min(A.x,B.x)>max(C.x,D.x) || min(C.x,D.x)>max(A.x,B.x) || min(A.y,B.y)>max(C.y,D.y) || min(C.y,D.y)>max(A.y,B.y)) return 0;//快速排斥实验(两个矩形是否相交)\n\treturn CJ(B-A,C-A)*CJ(B-A,D-A)<=0 && CJ(D-C,A-C)*CJ(D-C,B-C)<=0;//跨立实验\n}\npoint CGL_2_C(point A,point B,point C,point D){//求直线交点\n\tpoint p1=CGL_1_A(A,B,C),p2=CGL_1_A(A,B,D);//求C、D在AB上的投影点 \n\tdb d1=dis(C-p1),d2=dis(D-p2);//三角形的相似比 \n\tif (CJ(B-A,C-A)*CJ(B-A,D-A)<0) return (C+(d1/(d1+d2)*(D-C)));\n\telse if (d1<d2) return (D+d2/(d2-d1+E)*(C-D));\n\telse return (C+d1/(d1-d2+E)*(D-C));\n}\ndb Distance(point A,point B,point C){//点到线段的距离 \n\tpoint P=CGL_1_A(A,B,C);//C在AB上的投影点 \n\tif (P.x>=min(A.x,B.x) && P.x<=max(A.x,B.x) && P.y>=min(A.y,B.y) && P.y<=max(A.y,B.y)) return dis(P-C);//投影点在线段上 \n\treturn min(dis(A-C),dis(B-C));//两个端点到C的最小值 \n}\ndb CGL_2_D(point A,point B,point C,point D){//线段到线段的距离\n\tpoint P=CGL_2_C(A,B,C,D);//求直线交点 \n\tif (P.x>=min(A.x,B.x) && P.x<=max(A.x,B.x) && P.y>=min(A.y,B.y) && P.y<=max(A.y,B.y) && P.x>=min(C.x,D.x) && P.x<=max(C.x,D.x) && P.y>=min(C.y,D.y) && P.y<=max(C.y,D.y)) return 0;//线段有交点 \n\treturn min(Distance(A,B,C),min(Distance(A,B,D),min(Distance(C,D,A),Distance(C,D,B))));\n}\n\nsigned main(){\n\tfor (int q=read();q;q--){\n\t\tscanf(\"%lf%lf%lf%lf%lf%lf%lf%lf\",&A.x,&A.y,&B.x,&B.y,&C.x,&C.y,&D.x,&D.y);\n\t\tprintf(\"%.10lf\\n\",(CGL_2_D(A,B,C,D)));\n\t}\n\treturn 0;\n} \n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n//#define int long long\n\nusing namespace std;\nusing LL = long long;\nusing P = pair<int, int>;\nusing Tapris = tuple<int, int, int>;\n\n#define FOR(i, a, n) for(int i = (int)(a); i < (int)(n); ++i)\n#define REP(i, n) FOR(i, 0, n)\n\n#define pb(a) push_back(a)\n#define all(x) (x).begin(),(x).end()\n\nconst int INF = (int)1e9;\nconst LL INFL = (LL)1e15;\nconst int MOD = 1e9 + 7;\n\nint dy[]={0, 0, 1, -1, 0};\nint dx[]={1, -1, 0, 0, 0};\n\ntypedef long double LD;\ntypedef complex<LD> Point;\ntypedef pair<Point, Point> Line;\nconst LD EPS = 1e-10;\n#define X real() // x座標を取得\n#define Y imag() // y座標を取得\n#define LE(n,m) ((n) < (m) + EPS)\n#define GE(n,m) ((n) + EPS > (m))\n#define EQ(n,m) (abs((n)-(m)) < EPS)\n\n// 内積 dot(a, b) = |a||b|cosθ\nLD dot(Point a, Point b){\n    return (conj(a)*b).X;\n}\n\n// 外積 cross(a, b) = |a||b|sinθ\nLD cross(Point a, Point b){\n    return (conj(a)*b).Y;\n}\n\nint ccw(Point a, Point b, Point c){\n    b -= a; c -= a;\n    if (cross(b, c) > 0)   return +1;       // counter clockwise\n    if (cross(b, c) < 0)   return -1;       // clockwise\n    if (dot(b, c) < 0)     return +2;       // c--a--b on line\n    if (norm(b) < norm(c)) return -2;       // a--b--c on line\n    return 0;\n}\n\n\n// 交差判定 (isec) ****************************\n// 点　 := 平面座標にある点\n// 直線 := 点と点を通るどこまでも続く線\n// 線分 := 点と点を結んでその両端で止まっている線\n\n// 直線と点\nbool isecLP(Point a1, Point a2, Point b){\n    return abs(ccw(a1, a2, b)) != 1;\n}\n\n// 直線と直線\nbool isecLL(Point a1, Point a2, Point b1, Point b2) {\n    return !isecLP(a2-a1, b2-b1, 0) || isecLP(a1, b1, b2);\n}\n\n// 直線と線分\nbool isecLS(Point a1, Point a2, Point b1, Point b2) {\n    return cross(a2-a1, b1-a1) * cross(a2-a1, b2-a1) < EPS;\n}\n\n// 線分と線分\nbool isecSS(Point a1, Point a2, Point b1, Point b2) {\n    return ccw(a1, a2, b1)*ccw(a1, a2, b2) <= 0 && ccw(b1, b2, a1)*ccw(b1, b2, a2) <= 0;\n}\n\n// 線分と点\nbool isecSP(Point a1, Point a2, Point b) {\n    return !ccw(a1, a2, b);\n}\n\n// ********************************************\n\n\n// 距離 (dist) ********************************\n// 点pの直線aへの射影点を返す\nPoint proj(Point a1, Point a2, Point p){\n    return a1 + dot(a2-a1, p-a1) / norm(a2-a1) * (a2-a1);\n}\n\n// 点pの直線aへの反射点を返す\nPoint reflection(Point a1, Point a2, Point p){\n    return 2.0L*proj(a1, a2, p) - p;\n}\n\n// 直線と点\nLD distLP(Point a1, Point a2, Point p){\n    return abs(proj(a1, a2, p) - p);\n}\n\n// 直線と直線\nLD distLL(Point a1, Point a2, Point b1, Point b2) {\n    return isecLL(a1, a2, b1, b2) ? 0 : distLP(a1, a2, b1);\n}\n\n// 直線と線分\nLD distLS(Point a1, Point a2, Point b1, Point b2) {\n    return isecLS(a1, a2, b1, b2) ? 0 : min(distLP(a1, a2, b1), distLP(a1, a2, b2));\n}\n\n// 線分と点\nLD distSP(Point a1, Point a2, Point p) {\n    if(dot(a2-a1,p-a1) < EPS) return abs(p-a1);\n    if(dot(a1-a2,p-a2) < EPS) return abs(p-a2);\n    return abs(cross(a2-a1,p-a1)) / abs(a2-a1);\n    /*\n    Point r = proj(a1, a2, p);\n    if(isecSP(a1, a2, r)) return abs(r-p);\n    return min(abs(a1-p), abs(a2-p));\n    */\n}\n\n// 線分と線分\nLD distSS(Point a1, Point a2, Point b1, Point b2) {\n    if(isecSS(a1, a2, b1, b2)) return 0;\n    return min(min(distSP(a1, a2, b1), distSP(a1, a2, b2)), min(distSP(b1, b2, a1), distSP(b1, b2, a2)));\n}\n\n// ********************************************\n\n\n// 2直線の交点 (crosspoint) *******************\nPoint crosspointLL(Point a1, Point a2, Point b1, Point b2){\n    LD d1 = cross(b2-b1, b1-a1);\n    LD d2 = cross(b2-b1, a2-a1);\n    if (EQ(d1, 0) && EQ(d2, 0)) return a1;\n    if (EQ(d2, 0)) throw \"not exist crosspoint\";\n    return a1 + d1/d2 * (a2-a1);\n}\n// ********************************************\n\n\n/*************** using variables ***************/\nPoint p[4];\nint q;\n/**********************************************/\n\nsigned main(){\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    \n    cin >> q;\n    REP(i, q){\n        LD xp, yp;\n        REP(i, 4){\n            cin >> xp >> yp;\n            p[i] = Point(xp, yp);\n        }\n        LD ans = distSS(p[0], p[1], p[2], p[3]);\n        printf(\"%.10Lf\\n\", ans);\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cmath>\n#include<iomanip>\n#include<algorithm>\nusing namespace std;\nstruct Point { long double px, py; };\nstruct Segment { Point p1, p2; };\nPoint Minus(Point a, Point b) { Point G; G.px = a.px - b.px; G.py = a.py - b.py; return G; }\nlong double Abs(Point a) { return sqrt(a.px*a.px + a.py*a.py); }\nlong double norm(Point a) { return a.px*a.px + a.py*a.py; }\nlong double dot(const Point& a, const Point& b) { return a.px * b.px + a.py * b.py; }\nlong double crs(const Point& a, const Point& b) { return a.px * b.py - a.py * b.px; }\nint ccw(Point p0, Point p1, Point p2) {\n\tPoint a = Minus(p1, p0), b = Minus(p2, p0);\n\tif (crs(a, b) > 1e-10) return 1;\n\tif (crs(a, b) < -1e-10) return -1;\n\tif (dot(a, b) < -1e-10) return 2;\n\tif (norm(a) < norm(b)) return -2;\n\treturn 0;\n}\nbool its(Point p1, Point p2, Point p3, Point p4) {\n\treturn (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 && ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\nbool its(Segment s1, Segment s2) {\n\treturn its(s1.p1, s1.p2, s2.p1, s2.p2);\n}\nlong double dst(const Segment& a, const Point& b) {\n\tif (dot(Minus(a.p2, a.p1), Minus(b, a.p1)) < 0.0) return Abs(Minus(b, a.p1));\n\tif (dot(Minus(a.p1, a.p2), Minus(b, a.p2)) < 0.0) return Abs(Minus(b, a.p2));\n\treturn abs(crs(Minus(a.p2, a.p1), Minus(b, a.p1)) / Abs(Minus(a.p2, a.p1)));\n}\nint main() {\n\tPoint P1, P2, P3, P4; Segment M1, M2;\n\tint T; cin >> T;\n\tfor (int i = 0; i < T; i++) {\n\t\tcin >> P1.px >> P1.py >> P2.px >> P2.py;\n\t\tcin >> P3.px >> P3.py >> P4.px >> P4.py;\n\t\tM1.p1 = P1; M1.p2 = P2; M2.p1 = P3; M2.p2 = P4;\n\t\tlong double res = min(dst(M1, P3), dst(M1, P4));\n\t\tres = min(res, min(dst(M2, P1), dst(M2, P2)));\n\t\tcout << fixed << setprecision(1919) << res << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstdlib>\n#include <cmath>\n#include <cstring>\n\n#include <iostream>\n#include <string>\n#include <algorithm>\n#include <vector>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n\n#include <complex>\n\n#include <functional>\n#include <cassert>\n\ntypedef long long ll;\nusing namespace std;\n\n#define debug(x) cerr << #x << \" = \" << (x) << endl;\n\n\n#define mod 1000000007 //1e9+7(prime number)\n#define INF 1000000000 //1e9\n#define LLINF 2000000000000000000LL //2e18\n#define SIZE 100010\n\ntypedef double P_type;\ntypedef complex<P_type> P;\nconst P_type P_eps = 1e-10; //??´??°???????????????\n\nbool operator<(const P &a, const P &b){\n  return a.real() == b.real() ? a.imag() < b.imag() : a.real() < b.real();\n}\n\nbool operator==(const P &a, const P &b){\n  const double eps = P_eps;\n  return abs(a.real() - b.real()) <= eps && abs(a.imag() - b.imag()) <= eps;\n}\n\nP rotate(P p, double theta){\n  return p * P(cos(theta), sin(theta));\n}\n\n//??????\ndouble dot(P a, P b) {\n  return (a * conj(b)).real();\n}\n\n//??????\ndouble cross(P a, P b) {\n  return (a * conj(b)).imag();\n}\n\nint ccw(P a, P b, P c){\n  if(cross(b-a,c-a) > P_eps) return 1; //COUNTER_CLOCKWISE\n  if(cross(b-a,c-a) < P_eps) return -1; //CLOCKWISE\n  if(dot(b-a,c-a) < P_eps) return -2; //c -> a -> b\n  if(dot(a-b,c-b) < P_eps) return 2; //a -> b -> c\n  return 0; //a -> c -> b\n}\n\n/* ??????ab??¨???c????????¢ */\ndouble distanceSP(P a, P b, P c) {\n  if ( dot(b-a, c-a) < P_eps ) return abs(c-a);\n  if ( dot(a-b, c-b) < P_eps ) return abs(c-b);\n  return abs(cross(b-a, c-a)) / abs(b-a);\n}\n\n/* ??´???ab??¨???c????????¢ */\ndouble distanceLP(P a, P b, P c) {\n  return abs(cross(b-a, c-a)) / abs(b-a);\n}\n\n/* ????????????????????? */\ndouble isContainedCP(P c, double r, P p){\n  return abs(c-p) < r - P_eps; //?????¨??????????????????\n  //return abs(c-p) < r + P_eps; //?????¨????????????\n}\n\n/* ??´??????????????? */\nbool isIntersectedLL(P a1, P a2, P b1, P b2){\n  return abs(cross(a1-a2, b1-b2)) > P_eps;\n}\n\n/* ?????????????????? */\nbool isIntersectedSS(P a1, P a2, P b1, P b2){\n  \n  //??????a ??¨ ??´???b\n  P_type a = ccw(b1,b2,a1);\n  P_type b = ccw(b1,b2,a2);\n  \n  //??????b ??¨ ??´???a\n  P_type c = ccw(a1,a2,b1);\n  P_type d = ccw(a1,a2,b2);\n  \n  return a*b < P_eps && c*d < P_eps; // T?????????????????? -P_eps\n}\n\n/* ??????????????? */\nbool isIntersectedCC(P c1, double r1, P c2, double r2){\n  double dist = abs(c1 - c2);\n  \n  return abs(r1 - r2) < dist + P_eps && dist - P_eps < r1 + r2; //?????\\?????\\?????????\n  //return abs(r1 - r2) < dist - P_eps && dist + P_eps < r1 + r2; //?????\\?????\\?????????\n}\n\n/* ?????´??????????????? */\nbool isIntersectedCL(P c, double r, P a1, P a2){\n  return distanceLP(a1, a2, c) < r + P_eps; //??\\????????´????????????????????´??? - P_eps\n}\n\n/* ????????????????????? */\nbool isIntersectedCS(P c, double r, P a1, P a2){\n  return isContainedCP(c,r,a1) &&\n    isContainedCP(c,r,a2) &&\n    distanceLP(a1, a2, c) < r + P_eps; //??\\????????´????????????????????´??? - P_eps\n}\n\n/* ??´???/???????????? */\nP getCrosspointLL(P a1, P a2, P b1, P b2) {\n  //assert(isIntersectedLL(a1, a2, b1, b2));\n  //assert(isIntersectedSS(a1, a2, b1, b2));\n  P a = a2 - a1;\n  P b = b2 - b1;\n  return a1 + a * cross(b, b1-a1) / cross(b, a);\n}\n\nP getCrosspointSS(P a1, P a2, P b1, P b2){\n  return getCrosspointLL(a1, a2, b1, b2);\n}\n\n/* ????????? */\npair<P,P> getCrosspointCC(P c1, double r1, P c2, double r2){\n  //assert(isIntersectedCC(c1, r1, c2, r2));\n  \n  double dist = abs(c1 - c2);\n  double a = acos((r1*r1 + dist * dist - r2 * r2) / (2 * r1 * dist));\n  return {c1 + polar(r1, arg(c2 - c1) + a), c1 + polar(r1, arg(c2 - c1) - a)};\n}\n\n/* ??????????????? */\npair<P,P> getCrosspointCS(P c, double r, P a1, P a2){\n  //assert(isIntersectedCS(c1, r1, c2, r2));\n  \n  P base1 = a2 - a1;\n  P proj = a1 + base1 * dot(c - a1, base1) / norm(base1); //?°???±\n  P e = (a2 - a1) / abs(a2 - a1);\n  P base2 = sqrt(r*r - norm(proj - c));\n  return {proj + e*base2, proj - e*base2};\n}\n\n\nint main(){\n  int q;\n\n  scanf(\"%d\",&q);\n\n  for(int i=0;i<q;i++){\n    int x, y;\n    P p[4];\n\n    for(int j=0;j<4;j++){\n      scanf(\"%d%d\",&x,&y);\n      p[j] = P(x,y);\n    }\n\n    double ans = min({distanceSP(p[0],p[1],p[2]),distanceSP(p[0],p[1],p[3]),\n                      distanceSP(p[2],p[3],p[0]),distanceSP(p[2],p[3],p[1])});\n\n    if(isIntersectedSS(p[0],p[1],p[2],p[3])){\n      puts(\"cross!\");\n      ans = 0;\n    }\n    \n    printf(\"%.10lf\\n\",ans);\n  }\n  \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <iostream>\n#include <complex>\n#include <vector>\n#include <cmath>\n#include <cassert>\n#define rep(i,n) for(int i=0;i<n;i++)\n#define fs first\n#define sc second\n#define pb push_back\nusing namespace std;\ntypedef double D;\ntypedef complex<D> P;\ntypedef pair<P,P> L;\t\t//fs->sc\ntypedef vector<P> Pol;\nstruct C{P p;D r;};\nD inf=1e50,eps=1e-10;\n//template<class T> bool eq(T a, T b) { return abs(a-b)<eps;}\n//template<class T> int sig(T a) { return eq(a,0) ? 0 : (a>0 ? 1 : -1);}\nbool eq(D a, D b) { return abs(a-b)<eps;}\nint sig(D a) { return eq(a,0) ? 0 : (a>0 ? 1 : -1);}\ninline D dot(P a, P b) { return real(conj(a)*b);};\ninline D cro(P a, P b) { return imag(conj(a)*b);};\nenum ENCCW{CCW=1, CW=-1, FRONT=2, BACK=-2, ON=0};\t//!!MAEHARAとFRONT,BACKが逆\n//ON優先(including endpoint)\ninline int ccw (P a, P b, P c){\n//\tcout << cro(b-a,c-a) << endl;\n\tif(sig(cro(b-a,c-a))==1) return CCW;\n\tif(sig(cro(b-a,c-a))==-1) return CW;\n\tif(eq(abs(a-c)+abs(c-b),abs(a-b))) return ON;\n\tif(eq(abs(a-b)+abs(b-c),abs(a-c))) return FRONT;\n\tif(eq(abs(c-a)+abs(a-b),abs(c-b))) return BACK;\n\tassert(false);\n}\ninline P proj(P a, P b){\t\t//ベクトルaのbへの射影\n\treturn (dot(a,b)/norm(b))*b;\n}\ninline P perp(L l, P p){\t\t//垂線の足\n\tD t=dot(p-l.fs,l.fs-l.sc)/norm(l.fs-l.sc);\n\treturn l.fs+t*(l.fs-l.sc);\n}\ninline P refl(L l, P p){\n\treturn p+2.0*(perp(l,p)-p);\n}\ninline bool ispal(L a, L b){\n\treturn sig(cro(a.fs-a.sc,b.fs-b.sc))==0;\n}\ninline bool ovLL(L a, L b){\n\treturn ispal(a,b) && sig(cro(a.fs-a.sc,b.fs-a.sc))==0;\n}\ninline bool iLL(L a, L b){\t\t//intersect or overload\n\treturn !ispal(a,b) || ovLL(a,b);\n}\ninline bool iLS(L l, L s){\t\t//intersect(including endpoint) or overload\n\treturn cro(l.sc-l.fs,s.fs-l.fs)*cro(l.sc-l.fs,s.sc-l.fs)<eps;\n}\ninline bool iLP(L l, P p){\t\t//on line\n\treturn sig(cro(l.sc-p,l.fs-p));\n}\ninline bool iSS(L a, L b){\t\t//intersect(including endpoint) or overload\n\treturn ccw(a.fs,a.sc,b.fs)*ccw(a.fs,a.sc,b.sc)<=0 && ccw(b.fs,b.sc,a.fs)*ccw(b.fs,b.sc,a.sc)<=0;\n}\ninline bool iSP(L s, P p){\t\t//intersect(including endpoint) or overload\n\treturn ccw(s.fs,p,s.sc)==ON;\n}\ninline D dLP(L l, P p) { return abs(perp(l,p)-p);}\ninline D dLL(L a, L b) { return iLL(a,b) ? 0 : dLP(a,b.fs);}\ninline D dLS(L l, L s) { return iLS(l,s) ? 0 : min(dLP(l,s.fs),dLP(l,s.sc));}\ninline D dSP(L s, P p) {\n\tP q=perp(s,p);\n\treturn iSP(s,q) ? abs(p-q) : min(abs(p-s.fs),abs(p-s.sc));\n}\ninline D dSS(L a, L b) {\n\tif(iSS(a,b)) return 0;\n\treturn min(min(dSP(a,b.fs),dSP(a,b.sc)),min(dSP(b,a.fs),dSP(b,a.sc)));\n}\ninline P intLL(L a, L b) {\t//intersection\n\tassert(!ispal(a,b));\n\tD t=cro(a.sc-a.fs,a.sc-b.fs)/cro(a.sc-a.fs,b.sc-b.fs);\n\treturn b.fs+t*(b.sc-b.fs);\n}\nenum ENICP{INC=1,ONC=0,OUTC=-1};\ninline int iCP(C c, P p){\n\tD d=abs(p-c.p);\n\treturn eq(d,c.r) ? ONC : (d<c.r ? INC : OUTC);\n}\ninline int iCL(C c, L l){\t\t//num of intersection(s)\n\tD d=dLP(l,c.p);\n\treturn eq(d,c.r) ? 1 : (d<c.r ? 2 : 0);\n}\n//inline int iCS\n//inline int iCC(C a, C b){\n\n/*inline P intCL1(C c, L l){\t\t//iCL=1\n\tassert(iCL(c,l)==1);\n}\ninline L intCL2(C c, L l){\t\t//iCL=2\n\tassert(iCL(c,l)==2);\n}*/\nD aTri(P a, P b, P c){ return cro(b-a,c-a)/2;}\nD aPol(Pol p){\t\t\t//点集合はCCWに与える\n\tint n=p.size();\n\tD ret=0;\n\trep(i,n) ret+=cro(p[i],p[(i+1)%n])/2;\n\treturn ret;\n}\nP gPol(Pol p){\t\t\t//多角形内部が一様な重さを持つときの重心\n\tint n=p.size();\n\tP g;\n\tD s=aPol(p);\n\tassert(s>eps);\n\trep(i,n){\n\t\tD ds=cro(p[i],p[(i+1)%n])/2;\n\t\tg+=ds/3*(p[i]+p[(i+1)%n]);\n\t}\n\treturn g/s;\n}\nenum ENCONT{INP=1,ONP=0,OUTP=-1};\nint contain(Pol pol, P p){\n\tbool in=false;\n\trep(i,pol.size()){\n\t\tP a=pol[i],b=pol[(i+1)%pol.size()];\n\t\tif(ccw(a,b,p)==ON) return ONP;\n\t\tif(!iLS(L(p,p+1.),L(a,b))) continue;\n\t\tif(ovLL(L(p,p+1.),L(a,b))){\n\t\t\tif(sig(max(real(a),real(b))-real(p))>=0) in=!in;\n\t\t\tcontinue;\n\t\t}\n\t\tif(sig(real(intLL(L(p,p+1.),L(a,b)))-real(p))>=0) in=!in;\n\t}\n\treturn in ? INP : OUTP;\n}\ninline D heron(D a, D b, D c){\n\tdouble s=(a+b+c)/2;\n\tif(s-a<eps || s-b<eps || s-c<eps) return 0;\t\t//S=0 || 三角形できない\n\treturn sqrt(s*(s-a)*(s-b)*(s-c));\n}\nint main(){\n\tint n;\n\tscanf(\"%d\",&n);\n\tPol pol;\n\trep(i,n){\n\t\tD x,y;\n\t\tscanf(\"%lf%lf\",&x,&y);\n\t\tpol.push_back(P(x,y));\n\t}\n\tprintf(\"%.1lf\\n\",aPol(pol));\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <iomanip>\n\nusing namespace std;\n\n#define NO_INTERSECT POS(-12345, -12345)\n#define PARALLEL POS(-10001, -10001)\n#define COLINE POS(12345, 12345)\ntypedef double T;\n\nconst T EPS = 1e-9;\n\nclass POS {\npublic:\n    T x, y;\n    POS(const T& x = 0, const T& y = 0) : x(x), y(y) {}\n    POS(const POS& x) : x(x.x), y(x.y) {}\n\n    bool operator==(const POS& rhs) const {\n        return x == rhs.x && y == rhs.y;\n    }\n\n    POS& operator+=(const POS& rhs) {\n        x += rhs.x;\n        y += rhs.y;\n        return *this;\n    }\n\n    POS operator -() {\n        POS tmp(-x, -y);\n        return tmp;\n    }\n\n    double dist(const POS& rhs) const {\n        T tmp_x = x-rhs.x, tmp_y = y-rhs.y;\n        return sqrt(tmp_x*tmp_x+tmp_y*tmp_y);\n    }\n};\n\nPOS const operator-(const POS& lhs, const POS& rhs) {\n    POS tmp = rhs;\n    tmp = -tmp;\n    return POS(lhs) += (tmp);\n}\n\nclass LINE {\npublic:\n    POS start, end, vec;\n    double angle;\n    LINE() {}\n    LINE(const POS& start, const POS& end) :\n        start(start), end(end), vec(end - start),\n        angle(atan2(vec.x, vec.y)) {}\n    LINE(const POS& end) :\n        start(0, 0), end(end), vec(end), angle(atan2(vec.x, vec.y)) {}\n\n    bool operator/(const LINE& rhs) const {\n        return (vec.x*rhs.vec.y == vec.y*rhs.vec.x);\n    }\n\n    POS intersect(const LINE& rhs) const {\n        if(*this==rhs) return COLINE;\n        if(*this/rhs) return PARALLEL;\n        double A1 = vec.y, B1 = -vec.x, C1 = end.x*start.y - start.x*end.y;\n        double A2 = rhs.vec.y, B2 = -rhs.vec.x, C2 = rhs.end.x*rhs.start.y - rhs.start.x*rhs.end.y;\n        return POS( (B2*C1-B1*C2)/(A2*B1-A1*B2), (A1*C2-A2*C1)/(A2*B1-A1*B2));\n    }\n\n    bool operator==(const LINE& rhs) const {\n        return (*this/rhs) && (rhs.on_line(start));\n    }\n\n    bool on_line(const POS& a) const {\n        if(vec.x == 0) {\n            if(start.x != a.x) return false;\n            return true;\n        }\n        if(vec.y == 0) {\n            if(start.y != a.y) return false;\n            return true;\n        }\n        return fabs(((a.x-start.x)/vec.x*vec.y + start.y)-a.y) < EPS;\n    }\n};\n\nclass LINESEG : public LINE {\npublic:\n    LINESEG() : LINE(POS(0, 0)) {}\n    LINESEG(const LINE& input) : LINE(input) {}\n    LINESEG(const POS& start, const POS& end) : LINE(start, end) {}\n\n    bool on_lineseg(const POS& a) const {\n        if(!on_line(a)) return false;\n        bool first, second;\n        if(vec.x >= 0) first = (a.x >= start.x)&&(a.x <= end.x);\n        else first = (a.x <= start.x)&&(a.x >= end.x);\n        if(vec.y >= 0) second = (a.y >= start.y)&&(a.y <= end.y);\n        else second = (a.y <= start.y)&&(a.y >= end.y);\n        return first&&second;\n    }\n\n    T cross(const LINESEG& rhs) const {\n        return vec.x*rhs.vec.y - vec.y*rhs.vec.x;\n    }\n\n    POS intersect(const LINESEG& rhs) const {\n        LINE a1b1(start, rhs.start);\n        LINE a1b2(start, rhs.end);\n        LINE b1a1(rhs.start, start);\n        LINE b1a2(rhs.start, end);\n\n        POS tmp(this->LINE::intersect(rhs));\n\n        if(tmp == COLINE) {\n            if((start==rhs.start) && (!rhs.on_lineseg(end)) && (!on_lineseg(rhs.end))) return start;\n            if((start==rhs.end) && (!rhs.on_lineseg(end)) && (!on_lineseg(rhs.start))) return start;\n            if((end==rhs.end) && (!rhs.on_lineseg(start)) && (!on_lineseg(rhs.end))) return end;\n            if((end==rhs.end) && (!rhs.on_lineseg(start)) && (!on_lineseg(rhs.start))) return end;\n            if(on_lineseg(rhs.start) || on_lineseg(rhs.end) || rhs.on_lineseg(start) || rhs.on_lineseg(end)) return COLINE;\n            return NO_INTERSECT;\n        }\n\n        bool intersected = ((cross(a1b1) * cross(a1b2) < 0) && (rhs.cross(b1a1)*(rhs.cross(b1a2)) < 0));\n        if(!intersected) return NO_INTERSECT;\n        if(!on_lineseg(tmp) || !rhs.on_lineseg(tmp)) return NO_INTERSECT;\n        return tmp;\n    }\n};\n\nint main()\n{\n    int q;\n    cin >> q;\n    cout << fixed << setprecision(10);\n    while(q--){\n        int xp0, yp0, xp1, yp1, xp2, yp2, xp3, yp3;\n        cin >> xp0 >> yp0 >> xp1 >> yp1 >> xp2 >> yp2 >> xp3 >> yp3;\n        POS p0(xp0, yp0), p1(xp1, yp1), p2(xp2, yp2), p3(xp3, yp3);\n        LINESEG l0(p0, p1), l1(p2, p3);\n        if(!(l0.intersect(l1) == NO_INTERSECT)){\n            cout << 0.0000000000 << endl;\n        } else {\n            T ans = 1e14;\n            ans = min(ans, p0.dist(p2));\n            ans = min(ans, p0.dist(p3));\n            ans = min(ans, p1.dist(p2));\n            ans = min(ans, p1.dist(p3));\n            cout << ans << endl;\n        }\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <map>\n#include <set>\n#include <list>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <cstdio>\n#include <string>\n#include <vector>\n#include <complex>\n#include <cstdlib>\n#include <cstring>\n#include <numeric>\n#include <sstream>\n#include <iostream>\n#include <algorithm>\n#include <functional>\n\n#define mp       make_pair\n#define pb       push_back\n#define all(x)   (x).begin(),(x).end()\n#define rep(i,n) for(int i=0;i<(n);i++)\n#define repi(i,a,b) for(int i = (a); i < (b); i++)\n\nusing namespace std;\n\nconst int INF=1<<29;\nconst double EPS=1e-9;\n\nconst int dx[]={1,0,-1,0},dy[]={0,-1,0,1};\n\ntypedef complex<double> point;\ntypedef vector<point> vertex;\n/*\nx 座標は p.real(), real(p), y 座標は p.imag(), imag(p) とする．\n足し算，引き算，スカラー倍は定義済み．\noperator < は入っていないので自分で namespace std に突っ込む．*/\nnamespace std{\n    bool operator < (const point &lhs,const point &rhs){\n        if(real(lhs) == real(rhs)){\n            return imag(lhs) < imag(rhs);\n        }else{\n            return real(lhs) < real(rhs);\n        }\n    }\n}\n// 線分と点との距離\ndouble dist_linesegment_and_point(point a1,point a2,point b);\n\n\n\n// ベクタの長さ\ndouble vector_length(point a){\n    return abs(a);\n}\n\n// 二点間距離\ndouble point_distance(point a,point b){\n    return abs(a-b);\n}\n\n// 単位ベクトル\npoint unit_vector(point a){\n    return a / abs(a);\n}\n\n// 法線ベクトル\npair<point,point> normal_vector(point a){\n    point n1 = a * point(0,1);\n    point n2 = a * point(0,-1);\n    return make_pair(n1,n2);\n}\n\n// 点が一緒かどうか\nbool point_eq(point a,point b){\n    return abs(a-b) < EPS;\n}\n// 内積 (dot product) : a・b = |a||b|cosΘ\ndouble dot(point a,point b){\n    return real(conj(a)*b);\n}\n\n// 外積 (cross product) : |a×b| = |a||b|sinΘ\ndouble cross(point a,point b){\n    return imag(conj(a)*b);\n}\n//ラジアンに変換\ndouble radian(double angle){\n    return angle/180.0*M_PI;\n}\n//度数に変換\ndouble degree(double radian){\n    return radian*180.0/M_PI;\n}\n\n// a1,a2を端点とする線分(la)とb1,b2を端点(lb)とする線分の交差判定\nbool is_intersected_linesegment(point a1,point a2,point b1,point b2){\n    if(max(a1.real(),a2.real()) + EPS < min(b1.real(),b2.real())) return false;\n    if(max(b1.real(),b2.real()) + EPS < min(a1.real(),a2.real())) return false;\n    if(max(a1.imag(),a2.imag()) + EPS < min(b1.imag(),b2.imag())) return false;\n    if(max(b1.imag(),b2.imag()) + EPS < min(a1.imag(),a2.imag())) return false;\n    return (cross(a2-a1,b1-a1)*cross(a2-a1,b2-a1) < EPS) and\n    (cross(b2-b1,a1-b1)*cross(b2-b1,a2-b1) < EPS);\n\n}\n\n\n// a1,a2を端点とする線分(la)とb1,b2を端点とする線分(lb)の交点計算\npoint intersection_point_linesegment(point a1,point a2,point b1,point b2) {\n    if(a1 == b1 or a1 == b2) return a1;\n    if(a2 == b1 or a2 == b2) return a2;\n    point b = b2-b1;\n    double d1 = abs(cross(b, a1-b1));\n    double d2 = abs(cross(b, a2-b1));\n    double t = d1 / (d1 + d2);\n    return a1 + (a2-a1) * t;\n}\n\n// 線分同士の最短距離\ndouble dist_linesegment_and_linesegment(point a1,point a2,point b1,point b2){\n    if(is_intersected_linesegment(a1,a2,b1,b2)){\n        return 0;\n    }\n    return min(min(dist_linesegment_and_point(a1,a2,b1),\n               dist_linesegment_and_point(a1,a2,b2)),\n    min(dist_linesegment_and_point(b1,b2,a1),\n        dist_linesegment_and_point(b1,b2,a2)));\n}\n\n\n// 2直線の直交判定 : a⊥b <=> dot(a, b) = 0\n// verify\nbool is_orthogonal(point a1,point a2,point b1,point b2) {\n    return abs(dot(a1-a2,b1-b2))< EPS;\n}\n\n// 2直線の平行判定 : a//b <=> cross(a, b) = 0\n//verify\nbool is_parallel(point a1,point a2,point b1,point b2) {\n    return abs(cross(a2-a1,b2-b1)) < EPS;\n}\n\n// a1,a2を通る直線とb1,b2を通る直線の交差判定\nbool is_intersected_line(point a1,point a2,point b1,point b2) {\n    return not is_parallel(a1,a2,b1,b2);\n}\n\n// a1,a2を通る直線とb1,b2を通る直線の交点計算\npoint intersection_line(point a1,point a2,point b1,point b2) {\n    point a = a2 - a1,b = b2 - b1;\n    return a1 + a * cross(b, b1-a1) / cross(b, a);\n}\n\n// 直線と点との距離\ndouble dist_line_and_point(point a1,point a2,point b){\n    return abs(cross(a2-a1,b-a1)) / abs(a2-a1);\n}\n\n// 線分と点との距離\ndouble dist_linesegment_and_point(point a1,point a2,point b){\n    if(dot(a2-a1,b-a1) < EPS) return abs(b-a1);\n    if(dot(a1-a2,b-a2) < EPS) return abs(b-a2);\n    return dist_line_and_point(a1,a2,b);\n}\n\n// 直線と点の最短距離を実現する直線の点(すいせんの足)(みけんしょう)\npoint nearest_point_line_and_point(point a1,point a2,point b){\n    return a1 + (a2-a1) * dot((a2-a1),(b-a1)) / norm(a2-a1);\n}\n\n// 線分と点の最短距離を実現する線分嬢の点(みけんしょう)\npoint nearest_point_linesegment_and_point(point a1,point a2,point b){\n    if(dot(a2-a1,b-a1) < EPS) return a1;\n    if(dot(a1-a2,b-a2) < EPS) return a2;\n    return nearest_point_line_and_point(a1,a2,b);\n}\n// 円と線分の交差判定\nbool is_cross_linesegment_and_circle(point c,double r,point a1,point a2){\n    return (dist_linesegment_and_point(a1,a2,c) < r+EPS and\n            (r < abs(c-a1) + EPS or r < abs(c-a2) + EPS));\n}\n\n//線の進行方向\nint ccw(point p0, point p1, point p2)\n{\n    point a = p1 - p0;\n    point b = p2 - p0;\n    if (cross(a, b) > EPS) return (+1); //p0, p1, p2 が反時計周り\n    if (cross(a, b) < -EPS) return (-1);//p0, p1, p2 が時計回り\n    if (dot(a, b) < -EPS) return (+2); //p2--p0--p1 の順で一直線上\n    if (norm(a) < norm(b)) return (-2); //p0--p1--p2 の順で一直線上\n    return (0); //p0--p2--p1 の順で一直線上\n}\n\n// 点が真に多角形(凸?)の中にはいっているか\nbool is_inner_point_vertex(const vector<point> &ps,point a){\n    int cc = ccw(ps[0],ps[1],a);\n    if(not(cc == 1 or cc == -1)) return false;\n    for(size_t i=0;i<ps.size();i++){\n        if(cc != ccw(ps[i],ps[(i+1)%ps.size()],a)) return false;\n    }\n    return true;\n}\n\n// 点が辺上、もしくは内部にある。(未検証)\nbool is_inner_point_vertex_or_line(const vector<point> &ps,point a){\n    for(size_t i=0;i<ps.size();i++){\n        if(dist_linesegment_and_point(ps[i],ps[(i+1)%ps.size()],a) < EPS){\n            return true;\n        }\n    }\n    return is_inner_point_vertex(ps,a);\n}\n\n\n// 凸包 (UVA 109)\nvector<point> convex_hull(vector<point> ps){\n    int n = ps.size();\n    int k = 0;\n    sort(ps.begin(),ps.end());\n    vector<point> ch(2*n);\n    for(int i=0;i<n;ch[k++] = ps[i++]){\n        while(k >= 2 and ccw(ch[k-2],ch[k-1],ps[i]) <= 0) --k;\n    }\n    for(int i=n-2,t=k+1;i>=0;ch[k++]=ps[i--]){\n        while(k >= t and ccw(ch[k-2],ch[k-1],ps[i]) <= 0) --k;\n    }\n    ch.resize(k-1);\n    return ch;\n}\n\n// remember,pts make convex.\n// (http://judge.u-aizu.ac.jp/onlinejudge/cdescription.jsp?cid=ACAC002&pid=C)\ndouble convex_diameter(const vector<point>& pts){\n    const int n = pts.size();\n    int is=0,js=0; // initial antipode.\n    for(int i=1;i<n;i++){\n        if(pts[i].imag() > pts[is].imag()) is = i;\n        if(pts[i].imag() < pts[js].imag()) js = i;\n    }\n    double maxd = abs(pts[is]-pts[js]);\n    int i,j,maxi,maxj;\n    i = maxi = is;\n    j = maxj = js;\n    do{\n        if(cross(pts[(i+1)%n]-pts[i],\n           pts[(j+1)%n]-pts[j]) >= 0){\n            j = (j+1)%n;\n    }else{\n        i = (i+1)%n;\n    }\n    if(abs(pts[i]-pts[j]) > maxd){\n        maxd = abs(pts[i]-pts[j]);\n        maxi = i;maxj = j;\n    }\n} while(not(i == is and j == js));\n    // pts[maxi],pts[maxj] is pair of max diff.\nreturn maxd;\n}\n\n// 円と円の交点(2点ある前提)\nvector<point> circles_point(point c1,double r1,point c2,double r2){\n    double d = abs(c1-c2);\n    double s = (r1+r2+d) / 2;\n    double S = sqrt(s*(s-r1)*(s-r2)*(s-d));\n    double h = 2 * S / d;\n    point v = (c2-c1) / (abs(c2-c1));\n\n    double m = sqrt(r1*r1 - h*h);\n\n    vector<point> ret;\n    ret.push_back(c1 + m*v+h*v*point(0,1));\n    ret.push_back(c1 + m*v-h*v*point(0,1));\n    return ret;\n}\n\n// clockwiseだと負\ndouble triangle_area(point a,point b,point c){\n    return cross(b-a,c-a)/2;\n}\n\n// clockwiseだと負\ndouble vertex_area(vector<point> v){\n    double ret = 0;\n    for(int i=1;i<v.size()-1;i++){\n        ret += triangle_area(v[0],v[i],v[i+1]);\n    }\n    return ret;\n}\n/*多角形の面積を求める*/\n//verify\ndouble area_vertex(const vertex& g){\n    double S =0;\n    for(int i =0;i <g.size();i++){\n        S +=(cross(g[i],g[(i+1)%g.size()]));\n    }\n    return abs(S/2.0);\n}\n//円同士が互いに含まれているかどうか\n//中心が(xa,ya)で半径r1の円Aと、中心が(xb,yb) で半径 r2 の円 B が与えられたとき、 B が A の中にあるとき 2、A が B の中にあるとき -2、A の円周と B の円周が交わっている場合 1、A と B が重なっていないとき 0 \n//verify\nint Circles_Intersection(point a,double r1,point b,double r2){\n    double dp =abs(a-b);//中心間の距離\n    double dr =r1+r2;//円の半径の合計\n    if(dp >dr){\n        return 0;\n    }else if(dp +r1 <r2){\n        return -2;\n    }else if(dp +r2 <r1){\n        return 2;\n    }else if(dp <=dr){\n        return 1;\n    }\n    return -100;\n}\npoint projection(point p1, point p2, point p3) //直線p1p2 上への写像の点\n{\n    double t = dot(p3 - p1, p2 - p1) / norm(p2 - p1);\n    return (p1 + (p2 - p1) * t);\n}\npoint reflection(point p1, point p2, point p3) //直線p1p2 上への反射した点(線分p1p2に対してp3を線対称)\n{\n\n    return (p3 + 2.0*(projection(p1, p2, p3) - p3));\n}\n/*// 線分同士の最短距離\ndouble dist_linesegment_and_linesegment(point a1,point a2,point b1,point b2){\n    if(is_intersected_linesegment(a1,a2,b1,b2)){\n        return 0;\n    }\n    return min(min(dist_linesegment_and_point(a1,a2,b1),\n               dist_linesegment_and_point(a1,a2,b2)),\n    min(dist_linesegment_and_point(b1,b2,a1),\n        dist_linesegment_and_point(b1,b2,a2)));\n}\n*/\n\nint main(){\n    double x1,y1,x2,y2,x3,y3,x4,y4;\n    int q;\n    cin>>q;// 点の進行方向\n    for(int i =0;i <q;i++){\n        cin>>x1>>y1>>x2>>y2>>x3>>y3>>x4>>y4;\n        point p1(x1,y1),p2(x2,y2),p3(x3,y3),p4(x4,y4);\n        double ans =dist_linesegment_and_linesegment(p1, p2, p3, p4);\n        printf(\"%.9f\\n\",ans);\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define  _CRT_SECURE_NO_WARNINGS\n#include <stdio.h>\n#include <algorithm>\n#include <utility>\n#include <functional>\n#include <cstring>\n#include <queue>\n#include <stack>\n#include <math.h>\n#include <iterator>\n#include <vector>\n#include <string>\n#include <set>\n#include <math.h>\n#include <iostream>\n#include <random>\n#include<map>\n#include <iomanip>\n#include <time.h>\n#include <stdlib.h>\n#include <list>\n#include <typeinfo>\n#include <list>\n#include <set>\n#include <cassert>\n#include<fstream>\n#include <unordered_map>\n#include <cstdlib>\nusing namespace std;\n#define Ma_PI 3.141592653589793\n#define eps 0.00000001\n#define LONG_INF 3000000000000000000\n#define GOLD 1.61803398874989484820458\n#define MAX_MOD 1000000007\n#define MOD 998244353\n#define REP(i,n) for(long long i = 0;i < n;++i)    \n#define seg_size 524288\n#include <complex>\ntypedef complex<double> P;\ndouble dot(P a, P b) {\n\treturn (a.real() * b.real() + a.imag() * b.imag());\n}\ndouble cross(P a, P b) {\n\treturn (a.real() * b.imag() - a.imag() * b.real());\n}\nint ccw(P a, P b,P c) {\n\tP e = b - a;\n\tP f = c - a;\n\tif (cross(e, f) > eps) {\n\t\treturn 1;\n\t}\n\tif (cross(e, f) < -eps) {\n\t\treturn -1;\n\t}\n\tif (dot(e, f) < -eps) return 2;\n\tif (abs(e) < abs(f)) return -2;\n\treturn 0;\n}\nbool intersect(P a, P b, P c, P d) {\n\tif (ccw(a, b, c) * ccw(a, b, d) <= 0) {\n\t\tif (ccw(c, d, a) * ccw(c, d, b) <= 0){\n\t\t\treturn 1;\n\t\t}\n\t}\n\treturn 0;\n}\ndouble getDistanceLP(P a, P b, P c) {\n\treturn abs(cross(b - a, c - a) / abs(b - a));\n}\ndouble getDistanceSP(P a, P b, P c) {\n\tif (dot(b - a, c - a) < 0.0) return abs(c - a);\n\tif (dot(a - b, c - b) < 0.0) return abs(c - b);\n\treturn getDistanceLP(a, b, c);\n}\ndouble getDistance(P a, P b, P c, P d) {\n\tif (intersect(a, b, c, d)) return 0.0;\n\treturn min({ getDistanceSP(a, b, c), getDistanceSP(a, b, d), getDistanceSP(c, d, a), getDistanceSP(c, d, b) });\n}\nint main() {\n\tint query;\n\tcin >> query;\n\tREP(i, query) {\n\t\tdouble a, b, c, d, e, f, g, h;\n\t\tcin >> a >> b >> c >> d >> e >> f >> g >> h;\n\t\tcout << fixed << setprecision(10) << getDistance(P(a, b), P(c, d), P(e, f), P(g, h)) << endl;\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nstruct cww{cww(){ios::sync_with_stdio(false);cin.tie(0);}}star;\n#define P(x) cout << (x) << \"\\n\"\n#define p(x) cout << (x)\n#define all(c) (c).begin(), (c).end()\n#define rall(c) (c).rbegin(), (c).rend()\n#define vv(type, c, m, n, i) vector<vector<type>> c(m, vector<type>(n, i));\n#define rep(i,a,n) for(int i=(a), i##_len=(n); i<i##_len; ++i)\n#define rrep(i,a,n) for(int i=(a), i##_len=(n); i>i##_len; --i)\n#define len(x) ((int)(x).size())\n#define mp make_pair\n#define eb emplace_back\n#define fi first\n#define se second\ntypedef long long ll;\ntypedef long double ld;\ntypedef vector<int> vi;\ntypedef vector<double> vd;\ntypedef vector<long long> vll;\ntypedef vector<string> vs;\ntypedef vector<bool> vb;\ntypedef complex<double> Point;\ntypedef Point Vector;\ntypedef pair<Point, Point> Segment;\ntypedef Segment Line;\nconstexpr double EPS = (1e-9L);\ndouble dot(const Point& p1, const Point& p2) { return (conj(p1) * p2).real(); }\ndouble cross(const Point& p1, const Point& p2) { return (conj(p1) * p2).imag(); }\nconstexpr bool eq(double a) { return abs(a) < EPS; }\nPoint project(Segment s, Point p) {\n\tVector base = s.fi - s.se;\n\tdouble r = dot(p - s.fi, base) / norm(base);\n\treturn s.fi + base * r;\n}\nPoint reflect(Segment s, Point p) { return p + (project(s, p) - p) * 2.0; }\nint ccw(const Point& p1, const Point& p2, const Point& p3) {\n\tPoint a = p2 - p1, b = p3 - p1;\n\tif (cross(a, b) > EPS) return 1;\n\tif (cross(a, b) < -EPS) return -1;\n\tif (dot(a, b) < -EPS) return 2;\n\tif (norm(a) < norm(b)) return -2;\n\treturn 0;\n}\nbool intersect(Point &p1, Point &p2, Point &p3, Point &p4) {\n\treturn (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n\t\t\tccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\nbool intersect(Segment &s1, Segment &s2) {\n\treturn intersect(s1.fi, s1.se, s2.fi, s2.se);\n}\ndouble getDistance(Point &a, Point &b) { return abs(a - b); }\ndouble getDistanceLP(Line &l, Point &p) {\n\treturn abs(cross(l.se - l.fi, p - l.fi) / abs(l.se - l.fi));\n}\ndouble getDistanceSP(Segment &s, Point &p) {\n\tif(dot(s.se - s.fi, p - s.fi) < 0.0) return abs(p - s.fi);\n\tif(dot(s.fi - s.se, p - s.se) < 0.0) return abs(p - s.se);\n\treturn getDistanceLP(s, p);\n}\ndouble getDistance(Segment &s1, Segment &s2) {\n\tif(intersect(s1, s2)) return 0.0;\n\treturn min(min(getDistanceSP(s1, s2.fi), getDistanceSP(s1, s2.se)),\n\t\t\t\tmin(getDistanceSP(s2, s1.fi), getDistanceSP(s2, s1.se)));\n}\nint main() {\n\tcout << setprecision(10) << fixed;\n\tint q; cin >> q;\n\tSegment s1, s2;\n\tdouble x1, y1, x2, y2, x3, y3, x4, y4;\n\trep(i, 0, q) {\n\t\tcin >> x1 >> y1 >> x2 >> y2 >> x3 >> y3 >> x4 >> y4;\n\t\ts1 = mp(Point(x1, y1), Point(x2, y2));\n\t\ts2 = mp(Point(x3, y3), Point(x4, y4));\n\t\tP(getDistance(s1, s2));\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <vector>\n#include <string>\n#include <cmath>\n#include <cstring>\n#include <utility>\n#include <numeric>\n#include <complex>\n#include <iomanip>\n\nusing namespace std;\n\n// common\n#define X real()\n#define Y imag()\n\nusing Vector2 = complex<double>;\nusing Line = pair<Vector2, Vector2>;\nusing Segment = pair<Vector2, Vector2>;\nconst double EPS = 1e-10;\nconst double PI = 3.14159265359;\n\nbool equals(double a, double b){\n    if(abs(a - b) < EPS){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n\n// struct\n\nstruct Circle{\n    Vector2 c;\n    double r;\n    Circle(Vector2 c, double r){\n        this->c = c;\n        this->r = r;\n    }\n};\n\n// Vector2\ndouble dot(Vector2 a, Vector2 b){\n    return (a.X * b.X + a.Y * b.Y);\n}\n\ndouble cross(Vector2 a, Vector2 b){\n    return (a.X * b.Y - a.Y * b.X);\n}\n\ndouble distLP(Line l, Vector2 p){\n    return abs(cross(l.second - l.first, p - l.first) / abs(l.second - l.first));\n}\n\n// ccw\nint ccw(Vector2 p1, Vector2 p2, Vector2 p3){\n    Vector2 a = p2 - p1;\n    Vector2 b = p3 - p1;\n    double dotValue = dot(a, b);\n    double crossValue = cross(a, b);\n    if(crossValue > EPS) return 1;  // anticlockwise\n    if(crossValue < -EPS) return -1;    // clockwise\n    if(dotValue < -EPS) return 2;   // p2-p1-p3\n    if(norm(a) < norm(b)) return -2;    // p1-p2-p3\n    return 0;   // p1-p3-p2\n}\n\n// line segment\n\nbool intersect(Segment s1, Segment s2){\n    if(ccw(s1.first, s2.first, s2.second) * ccw(s1.second, s2.first, s2.second) > 0){\n        return false;\n    }\n    if(ccw(s2.first, s1.first, s1.second) * ccw(s2.second, s1.first, s1.second) > 0){\n        return false;\n    }\n    return true;\n}\n\ndouble distSP(Segment s, Vector2 p){\n    if(dot(s.second - s.first, p - s.first) < 0.0) return abs(p - s.first);\n    if(dot(s.first - s.second, p - s.second) < 0.0) return abs(p - s.second);\n    return distLP(s, p);\n}\n\ndouble dist(Segment s1, Segment s2){\n    if(intersect(s1, s2)){\n        return 0.0;\n    }\n    double a = min(distSP(s1, s2.first), distSP(s1, s2.second));\n    double b = min(distSP(s2, s1.first), distSP(s2, s1.second));\n    return min(a, b);\n}\n\nint main(){\n\n    int q;\n    cin >> q;\n    for(int i = 0; i < q; i++){\n        int x0, y0, x1, y1, x2, y2, x3, y3;\n        cin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n        Segment s1(Vector2(x0, y0), Vector2(x1, y1));\n        Segment s2(Vector2(x2, y2), Vector2(x3, y3));\n        double ans = dist(s1, s2);\n        cout << fixed << setprecision(9) << ans << endl;\n    }\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <vector>\n#include <cmath>\n\nconst double EPSILON = 1e-10;\n\ninline bool equals(double a, double b) {\n    return std::fabs(a - b) < EPSILON;\n}\n\nstruct Point {\n    double x;\n    double y;\n\n    bool operator < (const Point& p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point& p) const {\n        return equals(x, p.x) && equals(y, p.y);\n    }\n};\n\nPoint operator + (const Point& p1, const Point& p2) {\n    return Point{p1.x + p2.x, p1.y + p2.y};\n}\n\nPoint operator - (const Point& p1, const Point& p2) {\n    return Point{p1.x - p2.x, p1.y - p2.y};\n}\n\nPoint operator * (const Point& p1, double k) {\n    return Point{p1.x * k, p1.y * k};\n}\n\nstruct Segment {\n    Point p1, p2;\n};\n\nstruct Circle {\n    Point center;\n    double radius;\n};\n\nusing Vector = Point;\nusing Line = Segment;\nusing Polygon = std::vector<Point>;\n\n\ndouble norm(const Vector& p) {\n    return p.x * p.x + p.y + p.y;\n}\n\ndouble abs(const Vector& p) {\n    return std::sqrt(norm(p));\n}\n\ndouble dot(const Vector& a, const Vector& b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(const Vector& a, const Vector& b) {\n    return a.x * b.y - a.y * b.x;\n}\n\n\nVector projection(const Segment& s, const Point& p) {\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / norm(base);\n    return s.p1 + base * r;\n}\n\nVector reflection(const Segment& s, const Point& p) {\n    auto proj = projection(s, p);\n    return p + (projection(s, p) - p) * 2.0;\n}\n\nbool is_orthogonal(const Vector& a, const Vector& b) {\n    return equals(dot(a, b), 0.0);\n}\n\nbool is_orthogonal(const Segment& s1, const Segment& s2) {\n    return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nbool is_parallel(const Vector& a, const Vector& b) {\n    return equals(cross(a, b), 0.0);\n}\n\nbool is_parallel(const Segment& s1, const Segment& s2) {\n    return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nenum {\n    COUNTER_CLOCKWISE = 1,\n    CLOCKWISE = -1,\n    ONLINE_BACK = 2,\n    ONLINE_FRONT = -1,\n    ON_SEGMENT = 0,\n};\n\nint ccw(const Point& p0, const Point& p1, const Point& p2) {\n    auto a = p1 - p0;\n    auto b = p2 - p0;\n    if (cross(a, b) > EPSILON) return COUNTER_CLOCKWISE;\n    if (cross(a, b) < -EPSILON) return CLOCKWISE;\n    if (dot(a, b) < -EPSILON) return ONLINE_BACK;\n    if (norm(a) < norm(b)) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\ndouble intersect(const Point& p1, const Point& p2, const Point& p3, const Point& p4) {\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n            ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\n\ndouble intersect(const Segment& s1, const Segment& s2) {\n    return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\ndouble distance(const Point& a, const Point& b) {\n    return abs(a - b);\n}\n\ndouble distanceLP(const Line& l, const Point& p) {\n    return abs(cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1));\n}\n\ndouble distanceSP(const Segment& s, const Point& p) {\n    if (dot(s.p2 - s.p1, p - s.p1) < 0.0) return abs(p - s.p1);\n    if (dot(s.p1 - s.p2, p - s.p2) < 0.0) return abs(p - s.p2);\n    return distanceLP(s, p);\n}\n\ndouble distance(const Segment& s1, const Segment& s2) {\n    using std::min;\n    if (intersect(s1, s2)) return 0.0;\n    return min(min(distanceSP(s1, s2.p1), distanceSP(s1, s2.p2)),\n               min(distanceSP(s2, s1.p1), distanceSP(s2, s1.p2)));\n}\n\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n\nusing namespace std;\n\nint main() {\n    int q;\n    cin >> q;\n    for (int i = 0; i < q; ++i) {\n        array<Point, 4> points;\n        for (auto& p : points) {\n            cin >> p.x >> p.y;\n        }\n        Segment s1{points[0], points[1]};\n        Segment s2{points[2], points[3]};\n        cout << distance(s1, s2) << endl;\n    }\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <complex>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\n\ntypedef long double Real;\ntypedef complex<Real> Point;\n#define PCR Point const &\n#define X real()\n#define Y imag()\n\nconst Real EPS = 1e-10;\nconst Real INF = 1e100;\nconst Real PI = acos(-1);\n\nstruct Segment {\n    Point p[2];\n    Segment (PCR a = Point(), PCR b = Point()){\n        p[0] = a, p[1] = b;\n    }\n    Point & operator [] (int k) { return p[k]; }\n    Point const & operator [] (int k) const { return p[k]; }\n};\ntypedef vector<Point> Polygon;\nstruct Circle { Real radius; Point center; };\n\nReal dot(PCR a, PCR b){\n    return a.X*b.X + a.Y*b.Y;\n}\nReal cross(PCR a, PCR b){\n    return a.X*b.Y - a.Y*b.X;\n}\n\nPoint pSP(Segment const & s, PCR p){\n    Point base = s[1] - s[0];\n    Real r = dot(p - s[0], base) / norm(base);\n    return s[0] + base * r;\n}\n\nPoint rSP(Segment const & s, PCR p){\n    Point v = pSP(s,p) - p;\n    return p + v * Real(2);\n}\n\nenum { LEFT = 1, RIGHT = -1, BACK = 2, FRONT = -2, ON = 0 };\n// Includes end-points. Comment in to exclude.\nint ccw(PCR x, PCR p, PCR q){\n    Point a = p - x, b = q - x;\n    if(cross(a,b) > EPS) return LEFT;\n    if(cross(a,b) < -EPS) return RIGHT;\n    if(/* abs(a) < EPS || */ dot(a,b) < -EPS) return BACK;\n    if(/* abs(b) < EPS || */ norm(a) < norm(b)) return FRONT;\n    return ON;\n}\n\nbool isParallel(Segment const & s, Segment const & t){\n    return abs(cross(s[1]-s[0],t[1]-t[0])) < EPS;\n}\n\nbool isOrthogonal(Segment const & s, Segment const & t){\n    return abs(dot(s[1]-s[0],t[1]-t[0])) < EPS;\n}\n\n// Includes end-points. Modify CCW to exclude\nbool iSS(Segment const & s, Segment const & t){\n    bool f1 = ccw(s[0],s[1],t[0]) * ccw(s[0],s[1],t[1]) <= 0;\n    bool f2 = ccw(t[0],t[1],s[0]) * ccw(t[0],t[1],s[1]) <= 0;\n    return f1 && f2;\n}\n\nbool iSP(Segment const & s, PCR p){\n    return ccw(s[0],s[1],p) == ON;\n}\n\nPoint cSS(Segment const & s, Segment const & t){\n    assert(iSS(s,t));\n    assert(!isParallel(s,t));\n    Real d = cross(t[1]-t[0], s[1]-s[0]);\n    return s[0] + (s[1] - s[0]) * cross(t[1]-t[0], t[1]-s[0]) * (1.0 / d);\n}\n\nReal dSP(const Segment & s, PCR p) {\n    const Point r = pSP(s, p);\n    if(iSP(s,r)) return abs(r-p);\n    return min(abs(s[0]-p), abs(s[1]-p));\n}\n\nReal dSS(Segment const & s, Segment const & t){\n    if(iSS(s,t)) return Real(0);\n    return min(min(dSP(s,t[0]), dSP(s,t[1])), min(dSP(t,s[0]), dSP(t,s[1])));\n}\n\n#include <iostream>\n#include <cstdio>\n\nint main(){\n    Segment s,t;\n    Real x,y;\n    int n; cin >> n;\n    for(int i=0;i<n;i++){\n        cin >> x >> y;\n        s[0] = Point(x,y);\n        cin >> x >> y;\n        s[1] = Point(x,y);\n        cin >> x >> y;\n        t[0] = Point(x,y);\n        cin >> x >> y;\n        t[1] = Point(x,y);\n        Real d = dSS(s,t);\n        printf(\"%.10Lf\\n\", d);\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\nconst double PI = asinl(1) * 2;\nstruct Point{\n  double x,y;\n  Point(){}\n  Point(double x,double y) :x(x),y(y){}\n  Point operator + (Point p) {return Point(x+p.x,y+p.y);}\n  Point operator - (Point p) {return Point(x-p.x,y-p.y);}\n  Point operator * (double k) {return Point(x*k,y*k);}\n  Point operator / (double k) {return Point(x/k,y/k);}\n  double norm(){return x*x+y*y;}\n  double abs(){return sqrt(norm());}\n\n  bool operator < (const Point &p) const{\n    return x!=p.x ? x < p.x : y < p.y;\n  }\n\n  bool operator == (const Point &p) const{\n    return fabs(x-p.x) < (1e-10) && fabs(y-p.y) < (1e-10);\n  }\n};\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\nstruct Segment{\n  Point p1,p2;\n  Segment(){}\n  Segment(Point p1, Point p2):p1(p1),p2(p2){}\n};\ntypedef Segment Line;\n\nstruct Circle{\n  Point c;\n  double r;\n  Circle(Point c,double r):c(c),r(r){}\n};\n\ndouble norm(Vector a){\n  return a.x*a.x+a.y*a.y;\n}\ndouble abs(Vector a){\n  return sqrt(norm(a));\n}\ndouble dot(Vector a,Vector b){\n  return a.x*b.x+a.y*b.y;\n}\ndouble cross(Vector a,Vector b){\n  return a.x*b.y-a.y*b.x;\n}\n\nbool isOrthogonal(Vector a,Vector b){\n  return (fabs((dot(a,b))-(0.0)) < (1e-10));\n}\n\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n  return isOrthogonal(a1-a2,b1-b2);\n}\n\nbool isOrthogonal(Segment s1,Segment s2){\n  return (fabs((dot(s1.p2-s1.p1,s2.p2-s2.p1))-(0.0)) < (1e-10));\n}\n\nbool isParallel(Vector a,Vector b){\n  return (fabs((cross(a,b))-(0.0)) < (1e-10));\n}\n\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n  return isParallel(a1-a2,b1-b2);\n}\n\nbool isParallel(Segment s1,Segment s2){\n  return (fabs((cross(s1.p2-s1.p1,s2.p2-s2.p1))-(0.0)) < (1e-10));\n}\n\nPoint project(Segment s,Point p){\n  Vector base = s.p2 - s.p1;\n  double r = dot(p-s.p1,base)/norm(base);\n  return s.p1 + base * r;\n}\n\nPoint reflect(Segment s,Point p){\n  return p+ (project(s,p)-p)*2.0;\n}\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nint ccw(Point p0,Point p1,Point p2){\n  Vector a = p1-p0;\n  Vector b = p2-p0;\n  if(cross(a,b)>(1e-10)) return COUNTER_CLOCKWISE;\n  if(cross(a,b)<-(1e-10)) return CLOCKWISE;\n  if(dot(a,b) < -(1e-10)) return ONLINE_BACK;\n  if(a.norm()<b.norm()) return ONLINE_FRONT;\n\n  return ON_SEGMENT;\n}\n\nbool intersect(Point p1,Point p2,Point p3,Point p4){\n  return (ccw(p1,p2,p3)*ccw(p1,p2,p4) <= 0 &&\n          ccw(p3,p4,p1)*ccw(p3,p4,p2) <= 0);\n}\nbool intersect(Segment s1,Segment s2){\n  return intersect(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n\ndouble getDistance(Point a,Point b){\n  return abs(a-b);\n}\n\ndouble getDistanceLP(Line l,Point p){\n  return abs(cross(l.p2-l.p1,p-l.p1)/abs(l.p2-l.p1));\n}\n\ndouble getDistanceSP(Segment s,Point p){\n  if(dot(s.p2-s.p1,p-s.p1)<0.0) return abs(p-s.p1);\n  if(dot(s.p1-s.p2,p-s.p2)<0.0) return abs(p-s.p2);\n  return getDistanceLP(s,p);\n}\n\ndouble getDistance(Segment s1,Segment s2){\n  if(intersect(s1,s2)) return 0.0;\n  return min(\n      min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),\n      min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2))\n  );\n}\n\nusing namespace std;\n\nint main(){\n    int q;cin >> q;\n    for(int i=0;i<q;i++){\n        Segment s1,s2;\n        cin >> s1.p1.x >> s1.p1.y >> s1.p2.x >> s1.p2.y;\n        cin >> s2.p1.x >> s2.p1.y >> s2.p2.x >> s2.p2.y;\n        cout << fixed << setprecision(10);\n        cout << getDistance(s1,s2) << endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define For(i,x,y) for (register int i=(x);i<=(y);i++)\n#define FOR(i,x,y) for (register int i=(x);i<(y);i++)\n#define Dow(i,x,y) for (register int i=(x);i>=(y);i--)\n#define mp make_pair\n#define fi first\n#define se second\n#define pb push_back\n#define siz(x) ((int)(x).size())\n#define all(x) (x).begin(),(x).end()\n#define fil(a,b) memset((a),(b),sizeof(a))\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int,int> pa;\ntypedef double db;\ninline ll read(){\n    ll x=0,f=1;char c=getchar();\n    while ((c<'0'||c>'9')&&(c!='-')) c=getchar();\n    if (c=='-') f=-1,c=getchar();\n    while (c>='0'&&c<='9') x=x*10+c-'0',c=getchar();\n    return x*f;\n}\n\nnamespace Geometry{\n\tconst db eps = 1e-9;\n\tstruct point{\n\t\tdb x,y;\n\t\tinline point operator + (const point &p){return (point){x+p.x,y+p.y};}\n\t\tinline point operator - (const point &p){return (point){x-p.x,y-p.y};}\n\t\tinline db operator * (const point &p){return x*p.x+y*p.y;}\n\t\tinline point operator / (const db &v){return (point){x/v,y/v};}\n\t\tinline point operator * (const db &v){return (point){x*v,y*v};}\n\t};\n\ttypedef point vec;\n\tinline db dot(vec a,vec b){return a.x*b.x+a.y*b.y;}\n\tinline db sqr(db x){return x*x;}\n\tinline db dis(point a,point b){return sqrt(sqr(a.x-b.x)+sqr(a.y-b.y));}\n\tinline db dis2(point a,point b){return sqr(a.x-b.x)+sqr(a.y-b.y);}\n\tinline db cross(vec a,vec b){return a.x*b.y-a.y*b.x;}\n\tstruct line{\n\t\tpoint a,b;\n\t};\n\tinline point projection(point A,line b){\n\t\tpoint B=b.a,C=b.b;\n\t\tvec BA=A-B,BC=C-B,BD=BC*(BA*BC/dis2(B,C));\n\t\treturn B+BD;\n\t}\n\tinline point reflection(point A,line b){\n\t\tpoint D=projection(A,b);\n\t\treturn (point){D.x*2-A.x,D.y*2-A.y};\n\t}\n\tinline int Counter_Clockwise(point A,line b){\n\t\tpoint B=b.a,C=b.b;\n\t\tdb f1=cross(C-B,A-B);\n\t\tif (fabs(f1)>eps) return (f1<0?2:1);\n\t\tdb f2=(C-B)*(A-B);\n\t\tif (f2<0) return 3;\n\t\treturn dis(B,C)<dis(A,B)?4:5;\n\t}\n\tinline int checkline(line a,line b){\n\t\tvec A=a.b-a.a,B=b.b-b.a;\n\t\tdb f1=A*B;\n\t\tif (fabs(f1)<=eps) return 1;\n\t\treturn dis(a.a,a.b)*dis(b.a,b.b)-fabs(f1)<=eps?2:0;\n\t}\n\tinline int checkseg(line a,line b){\n\t\tpoint A=a.a,B=a.b,C=b.a,D=b.b;\n\t\tif (max(A.x,B.x)<min(C.x,D.x)) return 0;\n\t\tif (min(A.x,B.x)>max(C.x,D.x)) return 0;\n\t\tif (max(A.y,B.y)<min(C.y,D.y)) return 0;\n\t\tif (min(A.y,B.y)>max(C.y,D.y)) return 0;\n\t\tdb s=cross(B-A,C-A),h=cross(B-A,D-A);\n\t\tif (s*h>=eps) return 0;\n\t\tdb i=cross(D-C,A-C),t=cross(D-C,B-C);\n\t\treturn i*t<=eps;\n\t}\n\tinline point crosspoint(line a,line b){\n\t\tpoint A=a.a,B=a.b,C=b.a,D=b.b;\n\t\tdb s1=fabs(cross(B-A,C-A)),s2=fabs(cross(B-A,D-A));\n\t\tvec CO=(D-C)*(s1/(s1+s2));\n\t\treturn C+CO;\n\t}\n\tinline db dis(point\tA,line b){\n\t\tpoint B=b.a,C=b.b,D=projection(A,b);\n\t\tint tmp=Counter_Clockwise(D,b);\n\t\tif (tmp==3) return dis(B,A);\n\t\tif (tmp==4) return dis(C,A);\n\t\tif (tmp==5) return dis(D,A);\n\t}\n\tinline db dis(line a,line b){\n\t\tif (checkseg(a,b)) return 0;\n\t\tdb s=dis(a.a,b),h=dis(a.b,b),i=dis(b.a,a),t=dis(b.b,a);\n\t\treturn min({s,h,i,t});\n\t}\n};\nusing namespace Geometry;\n\nint main(){\n//\tfreopen(\"data.in\",\"r\",stdin);\n\tint T;scanf(\"%d\",&T);\n\twhile (T--){\n\t\tline a;scanf(\"%lf%lf%lf%lf\",&a.a.x,&a.a.y,&a.b.x,&a.b.y);\n\t\tline b;scanf(\"%lf%lf%lf%lf\",&b.a.x,&b.a.y,&b.b.x,&b.b.y);\n\t\tprintf(\"%0.10lf\\n\",dis(a,b));\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<complex>\n#include<iomanip>\n#include<algorithm>\n#include<cmath>\nusing namespace std;\n\ntypedef complex<double> xy_t;\nxy_t p0,p1,p2,p3;\n\ndouble dot(xy_t a,xy_t b){\n    return a.real()*b.real()+a.imag()*b.imag();\n}\n\ndouble cross(xy_t a,xy_t b){\n    return a.real()*b.imag()-a.imag()*b.real();\n}\n\ndouble getDist(xy_t a,xy_t b,xy_t c){\n    //distance between point a and line bc\n    xy_t d=c-b,e=a-b,f=a-c;\n    \n    if(dot(d,e)<0) return abs(a-b);\n    if(dot(-d,f)<0) return abs(a-c);\n    else return abs(cross(d,e))/abs(d);\n    \n}\n\nint main(){\n    int q;\n    cin>>q;\n    for(int i=0;i<q;++i){\n        double x,y;\n        \n        for(int j=0;j<4;++j){\n            cin>>x>>y;\n            if(j==0) p0=xy_t(x,y);\n            else if(j==1) p1=xy_t(x,y);\n            else if(j==2) p2=xy_t(x,y);\n            else if(j==3) p3=xy_t(x,y);\n        }\n\n        \n        double ans=getDist(p0,p2,p3);\n        ans=min(ans,getDist(p1,p2,p3));\n        ans=min(ans,getDist(p2,p0,p1));\n        ans=min(ans,getDist(p3,p0,p1));\n\n        cout<<fixed<<setprecision(10)<<ans<<endl;\n            \n    }\n\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\nusing u64 = uint_fast64_t; \nusing pii =  pair<int, int>;\nusing pll =  pair<long long, long long>;\n#define rep(i, n) for(int i = 0; i < (n); ++i)\n#define all(x) (x).begin(),(x).end()\nconstexpr char ln =  '\\n';\n//////////////////////////////////////////////////////////////////////////////\n\nusing DD = double; // 精度が足りないときはlong double\nconstexpr DD EPS = 1e-11;\n\ninline int sgn(DD a) {return (a < -EPS) ? -1 : (a > EPS) ? 1 : 0;}\n\n//点\nstruct Point {\n    DD x, y;\n    Point (DD x = 0, DD y = 0): x(x), y(y) {}\n\n    Point operator+(const Point &p) const { return Point(*this) += p;}\n    Point operator-(const Point &p) const { return Point(*this) -= p;}\n    Point operator*(const Point &p) const { return Point(*this) *= p;}\n    Point operator*(DD a) const { return Point(*this) *= a;}\n    Point operator/(DD a) const { return Point(*this) /= a;}\n    Point& operator+=(const Point &p) { x += p.x; y += p.y; return *this;}\n    Point& operator-=(const Point &p) { x -= p.x; y -= p.y; return *this;}\n    Point& operator*=(const Point &p) { DD u = x*p.x - y*p.y; DD v = x*p.y + y*p.x; x = u; y = v; return *this;}\n    Point& operator*=(DD a) { x *= a; y *= a; return *this;}\n    Point& operator/=(DD a) { x /= a; y /= a; return *this;}\n    bool operator== (const Point &p) const { return !sgn(x - p.x) && !sgn(y - p.y);}\n    bool operator!= (const Point &p) const { return sgn(x - p.x) || sgn(y - p.y);}\n    bool operator< (const Point &p) const {\n        if (sgn(x - p.x)) return sgn(x - p.x) < 0;\n        return sgn(y - p.y) < 0;\n    }\n    friend istream& operator >>(istream& is, Point& p) { is >> p.x >> p.y; return is;}\n    friend ostream& operator <<(ostream& os, const Point& p) { os << p.x << \" \" << p.y; return os;}\n\n    DD norm() { return x*x + y*y;}\n    DD abs() { return sqrt(norm());}\n    DD arg() { return atan2(y,x);}\n};\n\n//ベクトル\nusing Vector = Point;\n\ninline DD norm(const Vector &a) { return a.x * a.x + a.y * a.y;}\ninline DD abs(const Vector &a) { return sqrt(norm(a));}\ninline DD dot(const Vector &a, const Vector &b) { return a.x * b.x + a.y * b.y;}\ninline DD cross(const Vector &a, const Vector &b) { return a.x * b.y - a.y * b.x;}\ninline Point rot(const Point &p, DD arg) { return Point(cos(arg) * p.x - sin(arg) * p.y, sin(arg) * p.x + cos(arg) * p.y);}\ninline Point rot90(const Point &p) { return Point(-p.y, p.x);}\ninline DD arg(const Vector &p) { return atan2(p.y, p.x);}\n//象限\nint ort(const Point &a) {\n    if (sgn(norm(a))) {\n        if (sgn(a.y) > 0) return sgn(a.x) > 0 ? 1 : 2;\n        return sgn(a.x) > 0 ? 4 : 3;\n    }\n    return 0;\n}\nbool xsort(const Point &a, const Point &b) {\n    if (sgn(a.x - b.x)) return sgn(a.x - b.x) < 0;\n    return sgn(a.y - b.y) < 0;\n}\nbool ysort(const Point &a, const Point &b) {\n    if (sgn(a.y - b.y)) return sgn(a.y - b.y) < 0;\n    return sgn(a.x - b.x) < 0;\n}\n\nbool argsortcross(const Point &a, const Point &b) {\n    int ao = ort(a), bo = ort(b);\n    if (ao != bo) return ao < bo;\n    return sgn(cross(a,b)) > 0;\n}\n\nbool argsortatan2(const Point &a, const Point &b) {\n    return sgn(atan2(b.y, b.x) - atan2(a.y, a.x)) > 0;\n}\n\n//線分\nstruct Segment {\n    Point p1,p2;\n    Segment() {};\n    Segment(Point p1, Point p2) : p1(p1),p2(p2) {}\n};\n\n//直線\nusing Line = Segment;\n\n// 円\nstruct Circle {\n    Point c;\n    DD r;\n    Circle(){}\n    Circle(Point c, DD r): c(c), r(r) {}\n    friend istream& operator >>(istream& is, Circle& C) { is >> C.c >> C.r; return is;}\n    friend ostream& operator <<(ostream& os, const Circle& C) { os << C.c << \" \" << C.r; return os;}\n};\n\n//多角形\nusing Polygon = vector<Point>;\n\n//点の進行方向\nint ccw(const Point &p0, const Point &p1, const Point &p2) {\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if (sgn(cross(a,b)) > 0) return 1; //p0,p1から見てp2は左側(反時計回り)\n    if (sgn(cross(a,b)) < 0) return -1; //p0,p1から見てp2は右側(時計回り)\n    if (sgn(dot(a,b)) < 0) return 2; //p2-p0-p1の順に一直線上\n    if (sgn(norm(b) - norm(a)) > 0) return -2; //p0-p1-p2の順に一直線上\n    return 0; //p0-p2-p1の順に一直線上\n}\n\n//直線の交差判定 交差する場合1, 平行な場合0, 同一直線のとき-1\nint intersectLP(const Vector &a, const Vector &b) {\n    if (sgn(cross(a,b))) return 1;\n    if (sgn(dot(a,b))) return 0;\n    return -1;\n} \nint intersectLP(const Point &p1, const Point &p2, const Point &p3, const Point &p4) {return intersectLP(p2-p1,p4-p3);}\nint intersectLP(const Line &l1, const Line &l2) {return intersectLP(l1.p1,l1.p2,l2.p1,l2.p2);}\n\n//直線の平行判定\nbool isParallel(const Vector &a, Vector &b) {return intersectLP(a,b) <= 0;}\nbool isParallel(const Point &p1, const Point &p2, const Point &p3, const Point &p4) {return intersectLP(p1,p2,p3,p4) <= 0;}\nbool isParallel(const Line &l1, const Line &l2) {return intersectLP(l1,l2) <= 0;}\n\n//直線の直交判定\nbool isOrthogonal(const Vector &a, const Vector &b) {return !sgn(dot(a,b));}\nbool isOrthogonal(const Point &p1, const Point &p2, const Point &p3, const Point &p4) {return isOrthogonal(p2-p1,p4-p3);}\nbool isOrthogonal(const Line &l1, const Line &l2) {return isOrthogonal(l1.p1,l1.p2,l2.p1,l2.p2);}\n\n//線分の交差判定\nbool intersectSP(const Point &p1, const Point &p2, const Point &p3, const Point &p4) { return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 && ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);}\nbool intersectSP(const Segment &s1, const Segment &s2) { return intersectSP(s1.p1, s1.p2, s2.p1, s2.p2);}\n\n//直線と直線の交点\nPoint getCrossPointLP(const Line &l1, const Line &l2) {\n    assert(intersectLP(l1,l2)==1);\n    return l1.p1 + (l1.p2-l1.p1)*cross(l2.p1-l1.p1,l2.p2-l2.p1)/cross(l1.p2-l1.p1,l2.p2-l2.p1);\n}\n\n//線分と線分の交点\nPoint getCrossPointSP(const Segment &s1, const Segment &s2) {\n    assert(intersectSP(s1,s2));\n    return getCrossPointLP(s1,s2);\n}\n\n//射影\nPoint project(const Segment &s, const Point &p) {\n    Vector base = s.p2 - s.p1;\n    DD r = dot(p - s.p1, base) / norm(base);\n    return s.p1 + base * r;\n}\n\n//線対称\nPoint reflect(const Segment &s, const Point &p) {return p + (project(s,p) - p) * 2;}\n\n//点と直線の距離\nDD getDistanceLP(const Line &l, const Point &p) { return abs(cross(l.p2 - l.p1,p - l.p1) / abs(l.p2 - l.p1));}\n//点と線分の距離\nDD getDistanceSP(const Segment &s, const Point &p) {\n    if (sgn(dot(s.p2 - s.p1,p - s.p1)) < 0) return abs(p - s.p1);\n    if (sgn(dot(s.p1 - s.p2,p - s.p2)) < 0) return abs(p - s.p2);\n    return getDistanceLP(s, p);\n}\n//線分と線分の距離\nDD getDistance(const Segment &s1, const Segment &s2) {\n    if (intersectSP(s1, s2)) return 0;\n    return min({getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2), getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)});\n}\n\n//円と直線の交差判定\ninline bool intersect(const Circle &c, const Line &l) { return getDistanceLP(l, c.c) - c.r < EPS;}\n//円と円の交差判定\ninline bool intersect(const Circle &c1, const Circle &c2) { return abs(c1.c - c2.c) - (c1.r + c2.r) < EPS && fabs(c1.r - c2.r) - abs(c1.c - c2.c) < EPS;}\n\n//円と線分の交点\npair<Point, Point> getCrossPoints(const Circle &c, const Line &l) {\n    assert(intersect(c,l));\n    Vector pr = project(l, c.c);\n    Vector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);\n    DD base = sqrt(c.r * c.r - norm(pr - c.c));\n    return make_pair(pr + e * base, pr - e * base);\n}\n\ninline Vector polar(DD a, DD r) { return Point(cos(r) * a, sin(r) * a);}\n\n//円と円の交点\npair<Point, Point> getCrossPoints(const Circle &c1, const Circle &c2) {\n    assert(intersect(c1, c2));\n    DD d = abs(c1.c - c2.c);\n    DD a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (DD(2) * c1.r * d));\n    DD t = arg(c2.c - c1.c);\n    return make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n}\n\n//多角形の面積\nDD area(const Polygon &g) {\n    const int N = g.size();\n    DD ret = 0;\n    for (int i = 0; i < N; ++i) {\n        ret += cross(g[i],g[(i+1)%N]);\n    }\n    return fabs(ret)/2;\n}\n\n// 多角形-点の包含判定\nint containment(const Polygon &g, const Point &p) {\n    const int N = g.size();\n    int cnt = 0;\n    for (int i = 0; i < N; ++i) {\n        if (norm(g[i] - p) < EPS || norm(g[(i+1)%N] - p) < EPS || ccw(g[i], g[(i+1)%N], p) == 0) {\n            return 1; // pがgの辺上に存在する\n        }\n        Point I = Point(2e9 + p.x, 2e9 + 574677631 + p.y);\n        if (ccw(I, p, g[i]) == 0 || ccw(I, p, g[(i+1)%N]) == 0) continue;\n        if (intersectSP(I, p, g[i], g[(i+1)%N])) ++cnt;\n    }\n    if (cnt&1) return 2; // pがgに含まれる\n    else return 0; // pがgに含まれない\n}\n\n//凸包\nPolygon andrewScan(Polygon s) {\n    Polygon u,l;\n    const int N = s.size();\n    if (N < 3) return s;\n    sort(s.begin(), s.end(), xsort);\n    u.emplace_back(s[0]);\n    u.emplace_back(s[1]);\n    l.emplace_back(s[N-1]);\n    l.emplace_back(s[N-2]);\n    \n    for (int i = 2; i < s.size(); ++i) {\n        // 凸包上の点も含めるなら ccw() == 1\n        for (int n = u.size(); n >= 2 && ccw(u[n-2],u[n-1],s[i]) != -1; --n) {\n            u.pop_back();\n        }\n        u.emplace_back(s[i]);\n    }\n\n    for (int i = N - 3; i >= 0; --i) {\n        // 凸包上の点も含めるなら ccw() == 1\n        for (int n = l.size(); n >= 2 && ccw(l[n-2], l[n-1], s[i]) != -1; --n) {\n            l.pop_back();\n        }\n        l.emplace_back(s[i]);\n    }\n\n    reverse(l.begin(), l.end());\n    for (int i = u.size() - 2; i >= 1; --i) l.emplace_back(u[i]);\n\n    return l;\n}\n\n//最遠点対\nDD farthestpointpair(const Polygon &g) {\n    const int N = g.size();\n    if (N == 2) return abs(g[1] - g[0]);\n    int i = 0, j = 0;\n    for (int k = 0; k < N; ++k) {\n        if (g[k].y > g[i].y) i = k;\n        if (g[k].y < g[j].y) j = k;\n    }\n\n    DD ret = 0;\n    int si = i, sj = j;\n    while (i != sj || j != si) {\n        ret = max(ret, abs(g[i]-g[j]));\n        if (cross(g[(i+1)%N] - g[i], g[(j+1)%N] - g[j]) < -EPS) {\n            i = (i+1)%N;\n        } else {\n            j = (j+1)%N;\n        }\n    }\n\n    return ret;\n}\n\n/////////////////////////////////////////////////////////////////////////////////////////////\n\nvoid CGL_1_A() {\n    Point p1,p2; cin >> p1 >> p2;\n    Line l(p1,p2);\n    int Q; cin >> Q;\n    while (Q--) {\n        Point p; cin >> p;\n        cout << project(l,p) << ln;\n    }\n}\n\nvoid CGL_1_B() {\n    Point p1,p2; cin >> p1 >> p2;\n    Line l(p1,p2);\n    int Q; cin >> Q;\n    while (Q--) {\n        Point p; cin >> p;\n        cout << reflect(l,p) << ln;\n    }\n}\n\nvoid CGL_1_C() {\n    Point p0,p1; cin >> p0 >> p1;\n    int Q; cin >> Q;\n    while (Q--) {\n        Point p2; cin >> p2;\n        int v = ccw(p0,p1,p2);\n        string ans;\n        if (v==1) ans = \"COUNTER_CLOCKWISE\";\n        if (v==-1) ans = \"CLOCKWISE\";\n        if (v==2) ans = \"ONLINE_BACK\";\n        if (v==-2) ans = \"ONLINE_FRONT\";\n        if (v==0) ans = \"ON_SEGMENT\";\n        cout << ans << ln;\n    }\n}\n\nvoid CGL_2_A() {\n    int Q; cin >> Q;\n    while (Q--) {\n        Point p0,p1,p2,p3; cin >> p0 >> p1 >> p2 >> p3;\n        if (isParallel(p0,p1,p2,p3)) cout << 2 << ln;\n        else if (isOrthogonal(p0,p1,p2,p3)) cout << 1 << ln;\n        else cout << 0 << ln;\n    }\n}\n\nvoid CGL_2_B() {\n    int Q; cin >> Q;\n    while (Q--) {\n        Point p0,p1,p2,p3; cin >> p0 >> p1 >> p2 >> p3;\n        cout << intersectSP(p0,p1,p2,p3) << ln;\n    }\n}\n\nvoid CGL_2_C() {\n    int Q; cin >> Q;\n    while (Q--) {\n        Point p0,p1,p2,p3; cin >> p0 >> p1 >> p2 >> p3;\n        Segment s0(p0,p1), s1(p2,p3);\n        cout << getCrossPointSP(s0,s1) << ln;\n    }\n}\n\nvoid CGL_2_D() {\n    int Q; cin >> Q;\n    while (Q--) {\n        Point p0,p1,p2,p3; cin >> p0 >> p1 >> p2 >> p3;\n        Segment s0(p0,p1), s1(p2,p3);\n        cout << getDistance(s0,s1) << ln;\n    }\n}\n\nint main() {\n    ios::sync_with_stdio(false); cin.tie(nullptr);\n    cout << fixed << setprecision(20);\n    //CGL_1_A();\n    //CGL_1_B();\n    //CGL_1_C();\n    //CGL_2_A();\n    //CGL_2_B();\n    //CGL_2_C();\n    CGL_2_D();\n}\n\n/*\n  verified on 2020/06/02\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_A&lang=ja\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_B&lang=ja\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_C&lang=ja\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_A&lang=ja\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_B&lang=ja\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_C&lang=ja\n*/\n"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>           // printf(), scanf()\n#include <cmath>            // fabs(), sqrt()\n#include <algorithm>        // min()\n\nusing namespace std;\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nstatic const double EPS = 1e-10;\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nclass Point\n{\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0): x(x), y(y) {}\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n};\n\nstruct Segment\n{\n\tPoint p1, p2;\n};\n\ntypedef Point Vector;\ntypedef Segment Line;\n\ndouble\nnorm(Vector a)\n{\n\treturn a.x * a.x + a.y * a.y;\n}\n\ndouble\nabs(Vector a)\n{\n\treturn sqrt(norm(a));\n}\n\ndouble\ndot(Vector a, Vector b)\n{\n\treturn a.x * b.x + a.y * b.y;\n}\n\n\ndouble\ncross(Vector a, Vector b)\n{\n\treturn a.x * b.y - a.y * b.x;\n}\n\nint\nccw(Point p0, Point p1, Point p2)\n{\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\n\tif (cross(a, b) > EPS)\n\t\treturn COUNTER_CLOCKWISE;\n\n\tif (cross(a, b) < -EPS)\n\t\treturn CLOCKWISE;\n\n\tif (dot(a, b) < -EPS)\n\t\treturn ONLINE_BACK;\n\n\tif (norm(a) < norm(b))\n\t\treturn ONLINE_FRONT;\n\n\treturn ON_SEGMENT;\n}\n\nbool\nintersect(Point p1, Point p2, Point p3, Point p4)\n{\n\treturn (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n\t        ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\n\nbool\nintersect(Segment s1, Segment s2)\n{\n\treturn intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\ndouble\ngetDistanceLP(Line l, Point p)\n{\n\treturn abs(cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1));\n}\n\ndouble\ngetDistanceSP(Segment s, Point p)\n{\n\tif (dot(s.p1 - s.p1, p - s.p1) < 0.0)\n\t\treturn abs(p - s.p1);\n\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0)\n\t\treturn abs(p - s.p2);\n\n\treturn getDistanceLP(s, p);\n}\n\ndouble\ngetDistance(Segment s1, Segment s2)\n{\n\tif (intersect(s1, s2))\n\t\treturn 0.0;\n\n\treturn min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)), min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\nint\nmain(int argc, char** argv)\n{\n\tint n;\n\n\tscanf(\"%d\", &n);\n\twhile (n--)\n\t{\n\t\tint s1x, s1y, s2x, s2y;\n\t\tint t1x, t1y, t2x, t2y;\n\t\tSegment s1, s2;\n\n\t\tscanf(\"%d %d %d %d %d %d %d %d\", &s1x, &s1y, &s2x, &s2y, &t1x, &t1y, &t2x, &t2y);\n\t\ts1.p1.x = s1x, s1.p1.y = s1y;\n\t\ts1.p2.x = s2x, s1.p2.y = s2y;\n\t\ts2.p1.x = t1x, s2.p1.y = t1y;\n\t\ts2.p2.x = t2x, s2.p2.y = t2y;\n\t\tprintf(\"%.10f\\n\", getDistance(s1, s2));\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> P;\ndouble eps=1e-7;\nbool eq(double a,double b){return (b-a<eps&&a-b<eps);}\ndouble cross(P a,P b){return real(b*conj(a));}\ndouble dot(P a,P b){return imag(b*conj(a));}\nP project(P a,P b,P c){b-=a;c-=a;return a+b*real(c/b);}\nP reflect(P a,P b,P c){b-=a;c-=a;return a+conj(c/b)*b;}\nint ccw(P a,P b,P c){\n  b-=a,c-=a,a=c*conj(b);\n  if(a.imag()>eps)return 1;//ccw\n  if(a.imag()<-eps)return -1;//cw\n  if(a.real()<-eps)return 2;//ob\n  if(abs(b)+eps<abs(c))return -2;//of\n  return 0;//os\n}\n\n//segment ab , point c\ndouble dist(P a,P b,P c){\n  if(dot(b-a,c-a)<0)return abs(c-a);\n  if(dot(a-b,c-b)<0)return abs(c-b);\n  return imag((c-a)*conj(b-a))/abs(b-a);\n}\n\nbool isintersect(P a,P b,P c,P d){\n  return ((ccw(a,b,c)*ccw(a,b,d)<=0)&&(ccw(c,d,a)*ccw(c,d,b)<=0));\n}\n\n//segment ab , segment cd\nP intersect(P a,P b,P c,P d){\n  a-=d;b-=d;c-=d;\n  return d+a+(b-a)*imag(a/c)/imag(a/c-b/c);\n}\n\ndouble dist(P a,P b,P c,P d){\n  if(isintersect(a,b,c,d))return 0;\n  return min(min(abs(a-c),abs(a-d)),min(abs(b-c),abs(b-d)));\n}\n\nint main(){\n  int T;\n  cin>>T;\n  while(T--){\n    double ax,ay,bx,by,cx,cy,dx,dy;\n    cin>>ax>>ay>>bx>>by>>cx>>cy>>dx>>dy;\n  \n    printf(\"%.12f\\n\",dist( P(ax,ay) , P(bx,by) , P(cx,cy) , P(dx,dy) ) );\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<map>\n#include<climits>\n#include<ctime>\n#include<cstring>\n#include<numeric>\n\n#include<algorithm>\n#include<array>\n#include<cmath>\n#include<vector>\n\n#define ALL(v) (v).begin(),(v).end()\n#define REP(i,p,n) for(int i=p;i<(int)(n);++i)\n#define rep(i,n) REP(i,0,n)\n#define dump(a) (cerr << #a << \"=\" << (a) << endl)\n#define DUMP(list) cout << \"{ \"; for(auto nth : list){ cout << nth << \" \"; } cout << \"}\" << endl;\n\nusing namespace std;\n\ntypedef double Real;\nconst Real EPS = 1e-8;\nint sign(Real d) { return d > EPS ? 1 : d < -EPS ? -1 : 0; }\n\n//define class ...\n\nstruct Point {\n\tReal x, y;\n\tPoint(Real x_ = 0, Real y_ = 0):x(x_), y(y_) {}\n\n\tPoint operator+(const Point &p) const {\n\t\treturn Point(x + p.x, y + p.y);\n\t}\n\n\tPoint operator-(const Point &p) const {\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n\n\tPoint operator*(Real s) const {\n\t\treturn Point(x * s, y * s);\n\t}\n\n\tPoint operator/(Real s) const {\n\t\treturn Point(x / s, y / s);\n\t}\n\n\tbool operator<(const Point &p) const {\n\t\treturn sign(x - p.x) == -1 || (sign(x - p.x) == 0 && sign(y - p.y) == -1);\n\t}\n\n\tbool operator==(const Point &p) const {\n\t\treturn sign(x - p.x) == 0 && sign(y - p.y) == 0;\n\t}\n};\n\nistream &operator>>(istream &is, Point &p) {\n\treturn is >> p.x >> p.y;\n}\n\nostream &operator<<(ostream &os, Point &p) {\n\treturn os << '(' << p.x << \", \" << p.y << ')';\n}\n\nstruct Line : public array<Point, 2> { //??????\n\tLine(const Point &a, const Point &b) { at(0) = a; at(1) = b; }\n};\n\nstruct Segment : public array<Point, 2> { //??´???\n\tSegment(const Point &a, const Point &b) { at(0) = a; at(1) = b; }\n};\n\nstruct Circle {\n\tPoint c;\n\tPoint r;\n\tCircle(const Point &c_, Real r_): c(c_), r(r_) {}\n};\n\ntypedef vector<Point> Polygon;\n\n// define function\nPoint rotate90(const Point &p) { // ???????¨???¨???\n\treturn Point(-p.y, p.x);\n}\n\nPoint rotate(const Point &p, Real theta) {\n\tconst Real s = sin(theta), c = cos(theta);\n\treturn Point(c * p.x - s * p.y, s * p.x + c * p.y);\n}\n\nReal angle(const Point &p) {\n\treturn atan2(p.y, p.x);\n}\n\nReal norm(const Point &p) {\n\treturn p.x * p.x + p.y * p.y;\n}\n\nReal abs(const Point &p) {\n\treturn sqrt(norm(p));\n}\n\nReal dot(const Point &a, const Point &b) { // ??????\n\treturn a.x * b.x + a.y * b.y;\n}\n\nReal cross(const Point &a, const Point &b) { // ??????\n\treturn a.x * b.y - a.y * b.x;\n}\n\nbool is_parallel(const Line &a, const Line &b) {\n\treturn sign( cross(a[1] - a[0], b[1] - b[0]) ) == 0;\n} \n\n// define app function\nenum { CCW = 1, CW = -1, BACK = 2, FRONT = -2, ON = 0};\n\nint ccw(const Point &a, const Point &b, const Point &c) {\n\tconst Point p = b - a;\n\tconst Point q = c - a;\n\tconst Real crs = cross(p, q); \n\t\n\tif(sign(crs) == 1) return CCW;\n\tif(sign(crs) == -1) return CW;\n\tif(sign(dot(p, q)) == -1) return BACK;\n\tif(sign(norm(p) - norm(q)) == -1) return FRONT;\n\treturn ON;\n}\n\nPoint project(const Line &l, const Point &p) {\n\tconst Point a = p - l[0];\n\tconst Point b = l[1] - l[0];\n\treturn l[0] + b * (dot(a, b) / norm(b));\n}\n\nPoint reflect(const Line &l, const Point &p) {\n\tconst Point t = project(l, p);\n\treturn t + (t - p);\n}\n\nbool intersect(const Segment &s, const Point &p) {\n\treturn ccw(s[0], s[1], p) == ON;\n}\n\nbool intersect(const Segment &a, const Segment &b) {\n\treturn ccw(a[0], a[1], b[0]) * ccw(a[0], a[1], b[1]) <= 0\n\t\t\t&& ccw(b[0], b[1], a[0]) * ccw(b[0], b[1], a[1]) <= 0;\n}\n\nbool intersect(const Line &l, const Point &p) {\n\treturn abs(ccw(l[0], l[1], p)) != 1;\n}\n\nbool intersect(const Line &l, const Segment &s) {\n\treturn sign(cross(l[1] - l[0], s[0] - l[0]) * cross(l[1] - l[0], s[1] - l[0])) <= 0; \n}\n\nbool intersect(const Line &a, const Line &b) {\n\treturn sign(cross(a[1] - a[0], b[1] - b[0])) != 0\n\t\t\t|| sign(cross(a[1] - a[0], b[1] - a[0])) == 0;\n}\n\nReal dist(const Point &a, const Point &b) {\n\treturn abs(a - b);\n}\n\nReal dist(const Line &l, const Point &p) {\n\tconst Point a = l[1] - l[0];\n\tconst Point b = p - l[0];\t\n\treturn abs(cross(a, b)) / abs(a);\n}\n\nReal dist(const Line &l, const Segment &s) {\n\tif(intersect(l, s)) return 0;\n\treturn min(dist(l, s[0]), dist(l, s[1]));\n}\n\nReal dist(const Line &a, const Line & b) {\n\tif(intersect(a, b)) return 0;\n\treturn dist(a, b[0]);\n}\n\nReal dist(const Segment &s, const Point &p) {\n\tif(sign(dot(s[1] - s[0], p - s[0])) == -1) return dist(s[0], p);\n\tif(sign(dot(s[0] - s[1], p - s[1])) == -1) return dist(s[1], p);\n\treturn dist(Line(s[0], s[1]), p);\n}\n\nReal dist(const Segment &a, const Segment &b) {\n\tif(intersect(a, b)) return 0;\n\treturn min({dist(a, b[0]), dist(a, b[1]), dist(b, a[0]), dist(b, a[1])});\t\n}\n\nint main() {\n\tcout.setf(ios::fixed);\n\tcout.precision(10);\n\tPoint p0, p1, p2, p3;\n\tint q;\t\n\tcin >> q;\t\n\trep(i, q) {\n\t\tcin >> p0 >> p1 >> p2 >> p3;\n\t\tSegment s1 = Segment(p0, p1);\n\t\tSegment s2 = Segment(p2, p3);\n\t\tReal ans = dist(s1, s2);\t\n\t\tcout << ans << endl; \n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "// This is free and unencumbered software released into the public domain.\n\n// Anyone is free to copy, modify, publish, use, compile, sell, or\n// distribute this software, either in source code form or as a compiled\n// binary, for any purpose, commercial or non-commercial, and by any\n// means.\n\n// In jurisdictions that recognize copyright laws, the author or authors\n// of this software dedicate any and all copyright interest in the\n// software to the public domain. We make this dedication for the benefit\n// of the public at large and to the detriment of our heirs and\n// successors. We intend this dedication to be an overt act of\n// relinquishment in perpetuity of all present and future rights to this\n// software under copyright law.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n// IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\n// OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\n// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n// OTHER DEALINGS IN THE SOFTWARE.\n\n// For more information, please refer to <http://unlicense.org>\n\n#include <algorithm>\n#include <complex>\n#include <vector>\n\nusing namespace std;\n\n#define X real()\n#define Y imag()\n\ntypedef long double Real;\ntypedef complex<Real> Point;\nstruct Line {\n  Point a, b;\n  bool operator<(const Line &line) const;\n};\ntypedef vector<Point> Polygon;\n\nconstexpr Real PI = acos(Real(-1));\n\n// 比較関数\nint sgn(const Real &a, const Real &b = 0) {\n  constexpr Real EPS = 1e-8;\n  return a < b - EPS ? -1 : a > b + EPS ? 1 : 0;\n}\n\nbool near(const Point &a, const Point &b) { return !sgn(norm(a - b)); }\nnamespace std {\nbool operator<(const Point &a, const Point &b) {\n  return sgn(a.X, b.X) ? a.X < b.X : a.Y < b.Y;\n}\n} // namespace std\n\nbool Line::operator<(const Line &line) const {\n  return !near(a, line.a) ? a < line.a : b < line.b;\n}\n\n// 平方根\nReal sr(const Real &a) { return sqrt(max<Real>(a, 0)); }\n\n// 内積\nReal dot(const Point &a, const Point &b) { return a.X * b.X + a.Y * b.Y; }\n// 外積\nReal det(const Point &a, const Point &b) { return a.X * b.Y - a.Y * b.X; }\n\n// 線分のベクトル\nPoint vec(const Line &a) { return a.b - a.a; }\n\n// 線分abに対する点cの位置\nenum CCW { FRONT = 1, RIGHT = 2, BACK = 4, LEFT = 8, ON = 16 };\nint ccw(const Point &a, const Point &b, const Point &c) {\n  if (near(a, c) || near(b, c)) {\n    return ON;\n  }\n  int s = sgn(det(b - a, c - a));\n  if (s) {\n    return s > 0 ? LEFT : RIGHT;\n  }\n  return (a < b) == (b < c) ? FRONT : (c < a) == (a < b) ? BACK : ON;\n}\nint ccw(const Line &l, const Point &p) { return ccw(l.a, l.b, p); }\n\n// 有向角度\nReal arg(const Point &base, const Point &a, const Point &b) {\n  return arg((b - base) / (a - base));\n}\n\nLine sortBase;\nbool lessArg(const Point &a, const Point &b) {\n  Real ang1 = arg(sortBase.a, sortBase.b, a);\n  Real ang2 = arg(sortBase.a, sortBase.b, b);\n  return sgn(ang1, ang2) ? ang1 < ang2 : norm(a) > norm(b);\n}\n\n// 射影\nPoint proj(const Line &l, const Point &p) {\n  auto v = vec(l);\n  return l.a + ((p - l.a) / v).X * v;\n}\nPoint refl(const Line &l, const Point &p) {\n  auto v = vec(l);\n  return l.a + conj((p - l.a) / v) * v;\n}\n\n// 交差判定\nbool eqL(const Line &a, const Line &b) {\n  return !sgn(det(vec(a), vec(b))) && !sgn(det(vec(a), b.a - a.a));\n}\nbool iLL(const Line &a, const Line &b) {\n  return sgn(det(vec(a), vec(b))) || !sgn(det(vec(a), b.a - a.a));\n}\nbool iLLs(const Line &a, const Line &b) { return sgn(det(vec(a), vec(b))); }\nbool iLS(const Line &a, const Line &b) {\n  return sgn(det(vec(a), b.a - a.a)) * sgn(det(vec(a), b.b - a.a)) <= 0;\n}\nbool iLSs(const Line &a, const Line &b) {\n  return sgn(det(vec(a), b.a - a.a)) * sgn(det(vec(a), b.b - a.a)) < 0;\n}\nbool iSS(const Line &a, const Line &b) {\n  int cwa = ccw(a.a, a.b, b.a) | ccw(a.a, a.b, b.b);\n  int cwb = ccw(b.a, b.b, a.a) | ccw(b.a, b.b, a.b);\n  return ((cwa | cwb) & ON) || ((cwa & cwb) == (LEFT | RIGHT));\n}\nbool iSSs(const Line &a, const Line &b) {\n  int cwa = ccw(a.a, a.b, b.a) | ccw(a.a, a.b, b.b);\n  int cwb = ccw(b.a, b.b, a.a) | ccw(b.a, b.b, a.b);\n  return (cwa & cwb) == (LEFT | RIGHT);\n}\n\n// 交点\nPoint pLL(const Line &a, const Line &b) {\n  return a.a + vec(a) * (det(vec(b), b.a - a.a) / det(vec(b), vec(a)));\n}\n\n// 距離\nReal dLP(const Line &l, const Point &p) {\n  return abs(det(vec(l), p - l.a) / vec(l));\n}\nReal dSP(const Line &s, const Point &p) {\n  if (dot(vec(s), p - s.a) < 0) {\n    return abs(p - s.a);\n  }\n  if (dot(vec(s), p - s.b) > 0) {\n    return abs(p - s.b);\n  }\n  return dLP(s, p);\n}\nReal dLL(const Line &a, const Line &b) {\n  if (iLL(a, b)) {\n    return 0;\n  }\n  return dLP(a, b.a);\n}\nReal dLS(const Line &a, const Line &b) {\n  if (iLS(a, b)) {\n    return 0;\n  }\n  return min(dLP(a, b.a), dLP(a, b.b));\n}\nReal dSS(const Line &a, const Line &b) {\n  if (iSS(a, b)) {\n    return 0;\n  }\n  return min({dSP(a, b.a), dSP(a, b.b), dSP(b, a.a), dSP(b, a.b)});\n}\n\n// 円\nstruct Circle {\n  Point c;\n  Real r;\n};\n\n// 交差判定\nbool iCP(const Circle &c, const Point &p) {\n  return sgn(abs(p - c.c), c.r) <= 0;\n}\nbool iCL(const Circle &c, const Line &l) { return sgn(c.r, dLP(l, c.c)) >= 0; }\nbool iCS(const Circle &c, const Line &s) { return sgn(c.r, dSP(s, c.c)) >= 0; }\nbool iCSc(const Circle &c, const Line &s) {\n  return iCS(c, s) && sgn(c.r, max(abs(s.a - c.c), abs(s.b - c.c))) >= 0;\n}\nbool iCC(const Circle &a, const Circle &b) {\n  return sgn(abs(a.c - b.c), a.r + b.r) <= 0;\n}\nbool iCCc(const Circle &a, const Circle &b) {\n  return iCC(a, b) && sgn(abs(a.c - b.c), abs(a.r - b.r)) >= 0;\n}\n\n// 交点\npair<Point, Point> pCC(const Circle &a, const Circle &b) {\n  Real x = (norm(a.c - b.c) + a.r * a.r - b.r * b.r) / (2 * abs(a.c - b.c));\n  Point e = (b.c - a.c) / abs(b.c - a.c);\n  Point y = e * Point(0, sr(a.r * a.r - x * x));\n  return make_pair(a.c + e * x - y, a.c + e * x + y);\n}\npair<Point, Point> pCL(const Circle &c, const Line &l) {\n  Point x = proj(l, c.c);\n  Point y = vec(l) / abs(vec(l)) * sr(c.r * c.r - norm(x - c.c));\n  return make_pair(x - y, x + y);\n}\n\n// 角の内外判定 角abの内部にあれば正、辺上は0、外部は負\nint sAP(const Point &a, const Point &b, const Point &c) {\n  return sgn(det(a, c)) - sgn(det(b, c)) - sgn(det(a, b));\n}\n\n// 多角形の面積\nReal aPol(const Polygon &vp) {\n  Real res = 0;\n  for (int i = 0; i < int(vp.size()); ++i) {\n    res += det(vp[i], vp[(i + 1) % vp.size()]);\n  }\n  return res / 2;\n}\n\n// 多角形の内外判定 内部:1、周上:0、外部:-1\nint sGP(const Polygon &pol, const Point &p) {\n  int side = -1;\n  for (int i = 0; i < int(pol.size()); ++i) {\n    Point p0 = pol[i] - p, p1 = pol[(i + 1) % pol.size()] - p;\n    if (ccw(p0, p1, 0) == ON) {\n      return 0;\n    }\n    if (p0.Y > p1.Y) {\n      swap(p0, p1);\n    }\n    if (sgn(p0.Y) <= 0 && 0 < sgn(p1.Y) && sgn(det(p0, p1)) > 0) {\n      side *= -1;\n    }\n  }\n  return side;\n}\n\n// 凸包\nPolygon convexHull(vector<Point> p) {\n  int m = -1, n = p.size();\n  if (n < 3) {\n    return p;\n  }\n  vector<Point> q(n * 2);\n  sort(p.begin(), p.end());\n  for (int i = 0; i < n; q[++m] = p[i++]) {\n    for (; m > 0 && ccw(q[m - 1], q[m], p[i]) != LEFT; --m) {\n      ;\n    }\n  }\n  for (int i = n - 2, r = m; i >= 0; q[++m] = p[i--]) {\n    for (; m > r && ccw(q[m - 1], q[m], p[i]) != LEFT; --m) {\n      ;\n    }\n  }\n  q.resize(m);\n  return q;\n}\n\n// 凸多角形切断\nPolygon convexCut(const Polygon &p, const Line &l) {\n  vector<Point> q;\n  for (int i = 0; i < int(p.size()); ++i) {\n    if (ccw(l.a, l.b, p[i]) != RIGHT) {\n      q.push_back(p[i]);\n    }\n    Line s = {p[i], p[(i + 1) % p.size()]};\n    if (iLSs(l, s)) {\n      q.push_back(pLL(l, s));\n    }\n  }\n  return q;\n}\n\n// 線分をマージする\nvector<Line> merge(vector<Line> s) {\n  for (int i = 0; i < int(s.size()); ++i) {\n    if (s[i].b < s[i].a) {\n      swap(s[i].a, s[i].b);\n    }\n  }\n  sort(s.begin(), s.end());\n  for (int i = 0; i < int(s.size()); ++i) {\n    for (int j = 0; j < i; ++j) {\n      if (iSS(s[i], s[j]) && !iLLs(s[i], s[j])) {\n        s[j].b = max(s[i].b, s[j].b);\n        s.erase(s.begin() + i--);\n        break;\n      }\n    }\n  }\n  return s;\n}\n\n// 線分アレンジメント 隣の点への辺のみを持つ\nvector<vector<int>> sArr(vector<Line> s, vector<Point> &vp) {\n  s = merge(s);\n  for (int i = 0; i < int(s.size()); ++i) {\n    vp.push_back(s[i].a);\n    vp.push_back(s[i].b);\n  }\n  for (int i = 0; i < int(s.size()); ++i) {\n    for (int j = 0; j < i; ++j) {\n      if (iSS(s[i], s[j])) {\n        vp.push_back(pLL(s[i], s[j]));\n      }\n    }\n  }\n  sort(vp.begin(), vp.end());\n  vp.erase(unique(vp.begin(), vp.end(), near), vp.end());\n  vector<vector<int>> graph(vp.size());\n  for (int i = 0; i < int(s.size()); ++i) {\n    vector<pair<Real, int>> v;\n    for (int j = 0; j < int(vp.size()); ++j) {\n      if (ccw(s[i].a, s[i].b, vp[j]) == ON) {\n        v.push_back(make_pair(norm(vp[j] - s[i].a), j));\n      }\n    }\n    sort(v.begin(), v.end());\n    for (int j = 0; j < int(v.size()) - 1; ++j) {\n      graph[v[j + 1].second].push_back(v[j].second);\n      graph[v[j].second].push_back(v[j + 1].second);\n    }\n  }\n  return graph;\n}\n\n#include <iomanip>\n#include <iostream>\n\nint main() {\n  int q;\n  cin >> q;\n  for (int i = 0; i < q; ++i) {\n    Real p1x, p1y, p2x, p2y;\n    cin >> p1x >> p1y >> p2x >> p2y;\n    Line line1{Point(p1x, p1y), Point(p2x, p2y)};\n    Real p3x, p3y, p4x, p4y;\n    cin >> p3x >> p3y >> p4x >> p4y;\n    Line line2{Point(p3x, p3y), Point(p4x, p4y)};\n    Real d = dSS(line1, line2);\n    cout << fixed << setprecision(10) << d << endl;\n  }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\n#define _overload(_1,_2,_3,name,...) name\n#define _rep(i,n) _range(i,0,n)\n#define _range(i,a,b) for(int i=int(a);i<int(b);++i)\n#define rep(...) _overload(__VA_ARGS__,_range,_rep,)(__VA_ARGS__)\n\n#define _rrep(i,n) _rrange(i,n,0)\n#define _rrange(i,a,b) for(int i=int(a)-1;i>=int(b);--i)\n#define rrep(...) _overload(__VA_ARGS__,_rrange,_rrep,)(__VA_ARGS__)\n\n#define _all(arg) begin(arg),end(arg)\n#define uniq(arg) sort(_all(arg)),(arg).erase(unique(_all(arg)),end(arg))\n#define getidx(ary,key) lower_bound(_all(ary),key)-begin(ary)\n#define clr(a,b) memset((a),(b),sizeof(a))\n#define bit(n) (1LL<<(n))\n#define popcount(n) (__builtin_popcountll(n))\n\nusing namespace std;\n\ntemplate<class T>bool chmax(T &a, const T &b) { return (a<b)?(a=b,1):0;}\ntemplate<class T>bool chmin(T &a, const T &b) { return (b<a)?(a=b,1):0;}\n\nusing ll=long long;\nusing R=long double;\nconst R EPS=1e-9L; // [-1000,1000]->EPS=1e-8 [-10000,10000]->EPS=1e-7\ninline int sgn(const R& r){return(r > EPS)-(r < -EPS);}\ninline R sq(R x){return sqrt(max(x,0.0L));}\n\nconst int dx[8]={1,0,-1,0,1,-1,-1,1};\nconst int dy[8]={0,1,0,-1,1,1,-1,-1};\n\n// Problem Specific Parameter:\n\n// Description: ????????????\n// Verifyed: various problem \nconst R INF = 1E40L;\nconst R PI = acos(-1.0L);\nusing P=complex<R>;\nconst P O=0.0L;\nusing L=struct{P s,t;};\nusing VP=vector<P>;\nusing C=struct{P p;R c;};\n\ninline R dot(P o,P a,P b){return real(conj(a-o)*(b-o));}\ninline R det(P o,P a,P b){return imag(conj(a-o)*(b-o));}\ninline int sdot(P o,P a,P b){return sgn(dot(o,a,b));}\ninline int sdet(P o,P a,P b){return sgn(det(o,a,b));}\n\n//projection verify AOJ CGL_1_A\nP proj(L l,P p){ R u=real((p-l.s)/(l.t-l.s)); return (1-u)*l.s+u*l.t;}\n\n// vertical parallel\n// verified: AOJ CGL_2_A\nbool vertical(L a,L b) {return sdot(O,a.t-a.s,b.t-b.s)==0;}\nbool parallel(L a,L b) {return sdet(O,a.t-a.s,b.t-b.s)==0;}\nbool eql(L a,L b){ return parallel(a,b) and sdet(a.s,a.t,b.s)==0;}\n\n// crossing determination\n// verified: AOJ CGL_2_B \nbool iss(L a,L b){\n\tint sa=sdet(a.s,a.t,b.s)*sdet(a.s,a.t,b.t);\n\tint sb=sdet(b.s,b.t,a.s)*sdet(b.s,b.t,a.t);\n\treturn max(sa,sb)<0;\n}\n\n// crossing point \n// verified: AOJ CGL_2_C\nP cross(L a,L b){\n\tR u=det(a.s,b.s,b.t)/det(O,a.t-a.s,b.t-b.s);\n\treturn (1-u)*a.s+u*a.t;\n}\n\t\n// distance \n// verified: AOJ CGL_2_D\nR dsp(L l,P p){\n\tP h=proj(l,p);\n\tif(sdot(l.s,l.t,p)<=0) h=l.s;\n\tif(sdot(l.t,l.s,p)<=0) h=l.t;\n\treturn abs(p-h);\n}\n\nR dss(L a,L b){return iss(a,b)?0:min({dsp(a,b.s),dsp(a,b.t),dsp(b,a.s),dsp(b,a.t)});}\n\nistream& operator >> (istream& is,P& p){ R x,y;is >> x >> y; p=P(x,y); return is;}\nostream& operator << (ostream& os,P& p){ os << real(p) << \" \" << imag(p); return os;}\n\nint main(void){\n\tint n;\n\tcin >> n;\n\tcout.precision(20);\n\trep(i,n){\n\t\tP a,b,c,d;\n\t\tcin >> a >> b >> c >> d;\n\t\tL s1={a,b},s2={c,d};\n\t\tR ans=dss(s1,s2);\n\t\tcout << fixed << ans << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\nusing namespace std;\n#include<cstdio>\n#include<cmath>\n\nstruct Point{ double x, y; };\n\nPoint set_p(double a, double b)\n{\n    Point p;\n    p.x = a; p.y = b;\n    return p;\n}\n\nstruct Vector{ double vx, vy; };\n\nVector set_v(const Point &p1, const Point &p2)\n{\n    Vector v;\n    v.vx = p2.x - p1.x;\n    v.vy = p2.y - p1.y;\n    return v;\n}\n\ndouble dot(const Vector &v1, const Vector &v2)\n{\n    return (v1.vx * v2.vx) + (v1.vy * v2.vy);\n}\n\ndouble cross(const Vector &v1, const Vector &v2)\n{\n    return (v1.vx * v2.vy) - (v1.vy * v2.vx);\n}\n\ndouble cross0(const Point &P0, const Point &P1)\n{\n\treturn (P0.x * P1.y) - (P1.x * P0.y);\n}\n\ndouble onenorm(const Vector &v)\n{\n    return abs(v.vx) + abs(v.vy);\n}\n\ndouble norm(const Vector &v)\n{\n\treturn sqrt(v.vx * v.vx + v.vy * v.vy);\n}\n\nint ccw(const Point &P0, const Point &P1, const Point &P2)\n{\n    Vector V1 = set_v(P0, P1);\n    Vector V2 = set_v(P0, P2);\n    double c = cross(V1, V2);\n    if(c > 0){ return 1; }else if(c < 0){ return -1; }\n    if(dot(V1, V2) < 0){ return -2; }\n    if(onenorm(V1) < onenorm(V2)){ return 2; }\n    return 0;\n}\n\nint intersect(const Point &P0, const Point &P1, const Point &P2, const Point &P3)\n{\n    if(ccw(P0, P1, P2) * ccw(P0, P1, P3) <= 0 && ccw(P2, P3, P0) * ccw(P2, P3, P1) <= 0){\n        return 1;\n    }else{\n        return 0;\n    }\n}\n\ndouble dist_seg(const Point &P0, const Point &P1, const Point &P2) // Segment P0P1 & Point P2.\n{\n    Vector V01 = set_v(P0, P1), V12 = set_v(P1, P2), V02 = set_v(P0, P2);\n    if(dot(V01, V12) > 0) return norm(V12);\n    if(dot(V01, V02) < 0) return norm(V02);\n    double c_sum;\n    c_sum = cross0(P0, P1) + cross0(P1, P2) + cross0(P2, P0);\n    if(c_sum < 0) c_sum *= -1.0;\n    return c_sum / norm(V01);\n}\n\nint main()\n{\n    int q;\n    double x0, y0, x1, y1, x2, y2, x3, y3, dist;\n    Point P0, P1, P2, P3;\n    scanf(\"%d\", &q);\n\n    for(int i = 0; i < q; i++){\n        scanf(\"%lf %lf %lf %lf %lf %lf %lf %lf\", &x0, &y0, &x1, &y1, &x2, &y2, &x3, &y3);\n        P0 = set_p(x0, y0), P1 = set_p(x1, y1), P2 = set_p(x2, y2), P3 = set_p(x3, y3);\n        if(intersect(P0, P1, P2, P3)){\n            printf(\"0\\n\");\n        }else{\n            cout << dist_seg(P0,P1,P2) << endl;\n            dist = min(min(dist_seg(P0, P1, P2), dist_seg(P0, P1, P3)), min(dist_seg(P2, P3, P0), dist_seg(P2, P3, P1)));\n            printf(\"%.13f\\n\", dist);\n        }\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define rep(i, n) for (int i = 0; i < (n); ++i)\n#define repr(i, n) for (int i = (n); i >= 0; --i)\n#define FOR(i, m, n) for (int i = (m); i < (n); ++i)\n#define FORR(i, m, n) for (int i = (m); i >= (n); --i)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\nusing namespace std;\ntypedef long long ll;\nconst ll mod = 1000000007;\nconst ll mod2 = 998244353;\nconst int INF = 1000000005;\nconst long double EPS = 1e-10;\n\nclass Point {\n  public:\n  long double x, y;\n\n  Point(long double x = 0, long double y = 0): x(x), y(y) {}\n\n  Point operator + (Point &p) {\n    return Point(x + p.x, y + p.y);\n  }\n\n  Point operator - (Point &p) {\n    return Point(x - p.x, y - p.y);\n  }\n\n  Point operator * (long double k) {\n    return Point(x * k, y * k);\n  }\n\n  Point operator / (long double k) {\n    return Point(x / k, y / k);\n  }\n\n  bool operator < (const Point &p) const {\n    return x != p.x ? x < p.x : y < p.y;\n  }\n\n  bool operator == (const Point &p) const {\n    return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n  }\n};\n\nlong double norm(Point p) {\n  return p.x * p.x + p.y * p.y;\n}\n\nlong double abs(Point p) {\n  return sqrt(norm(p));\n}\n\nlong double dot(Point p1, Point p2) {\n  return p1.x * p2.x + p1.y * p2.y;\n}\n\nlong double cross(Point p1, Point p2) {\n  return p1.x * p2.y - p1.y * p2.x;\n}\n\nint ccw(Point p0, Point p1, Point p2) {\n  Point v1 = p1 - p0, v2 = p2 - p0;\n  if (cross(v1, v2) > 0) return 1;\n  else if (cross(v1, v2) < 0) return -1;\n  else if (dot(v1, v2) < 0) return 2;\n  else if (norm(v1) < norm(v2)) return -2;\n  else return 0;\n}\n\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n  return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 && ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\n\nlong double getDistanceLP(Point p1, Point p2, Point p3) {\n  return fabs(cross(p2-p1, p3-p1) / abs(p2-p1));\n}\n\nlong double getDistanceSP(Point p1, Point p2, Point p3) {\n  if (dot(p2-p1, p3-p1) < 0) return abs(p3-p1);\n  else if (dot(p1-p2, p3-p2) < 0) return abs(p3-p2);\n  else return getDistanceLP(p1, p2, p3);\n}\n\nlong double getDistanceTS(Point p1, Point p2, Point p3, Point p4) {\n  if (intersect(p1, p2, p3, p4)) return 0;\n  long double ans = INF;\n  ans = min(ans, getDistanceSP(p1, p2, p3));\n  ans = min(ans, getDistanceSP(p1, p2, p4));\n  ans = min(ans, getDistanceSP(p3, p4, p1));\n  ans = min(ans, getDistanceSP(p3, p4, p2));\n  return ans;\n}\n\nint main() {\n  int q;\n  cin >> q;\n  Point p0, p1, p2, p3;\n  rep(i, q) {\n    cin >> p0.x >> p0.y >> p1.x >> p1.y >> p2.x >> p2.y >> p3.x >> p3.y;\n    cout << setprecision(15) << getDistanceTS(p0, p1, p2, p3) << endl;\n  }\n\n  \n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\n#define ld long double\n#define eps 1e-9\n\nbool cmp(ld A , ld B){return A + eps > B && A - eps < B;}\n\nstruct vec{\n\tld x , y;\n\tvec(ld _x = 0 , ld _y = 0) : x(_x) , y(_y){}\n\tfriend vec operator +(vec A , vec B){return vec(A.x + B.x , A.y + B.y);}\n\tfriend vec operator -(vec A , vec B){return vec(A.x - B.x , A.y - B.y);}\n\tfriend ld operator *(vec A , vec B){return A.x * B.x + A.y * B.y;}\n\tfriend ld operator %(vec A , vec B){return A.x * B.y - A.y * B.x;}\n\tfriend vec operator *(vec A , ld B){return vec(A.x * B , A.y * B);}\n\tld len(){return sqrt(x * x + y * y);}\n\tld len2(){return x * x + y * y;}\n\tld angle(){return atan2(y , x);}\n};\n\nstruct segment{\n\tvec st , ed , dir;\n\tsegment(vec _a = vec() , vec _b = vec()) : st(_a) , ed(_b) , dir(_b - _a){}\n\tfriend bool havesect(segment A , segment B){\n\t\tld P = A.st.x , Q = A.ed.x , X = B.st.x , Y = B.ed.x;\n\t\tif(Q < P) swap(P , Q);\n\t\tif(Y < X) swap(X , Y);\n\t\tif(X - eps > Q || P - eps > Y) return 0;\n\t\tP = A.st.y , Q = A.ed.y , X = B.st.y , Y = B.ed.y;\n\t\tif(Q < P) swap(P , Q);\n\t\tif(Y < X) swap(X , Y);\n\t\tif(X - eps > Q || P - eps > Y) return 0;\n\t\treturn\n\t\t\t((B.st - A.st) % A.dir) * (A.dir % (B.ed - A.st)) > -eps &&\n\t\t\t((B.st - A.ed) % A.dir) * (A.dir % (B.ed - A.ed)) > -eps &&\n\t\t\t((A.st - B.st) % B.dir) * (B.dir % (A.ed - B.st)) > -eps &&\n\t\t\t((A.st - B.ed) % B.dir) * (B.dir % (A.ed - B.ed)) > -eps;\n\t}\n\tfriend vec getsect(segment A , segment B){\n\t\tld t = ((A.st - B.st) % B.dir) / (B.dir % A.dir);\n\t\treturn A.st + (A.dir * t);\n\t}\n\tld len(){return dir.len();}\n\tld len2(){return dir.len2();}\n};\n\nld dist(vec P , segment seg){//minimum dist from a point to a segment\n\tld T = ((P - seg.st) * seg.dir) / seg.len2();\n\tif(T < 0) return (seg.st - P).len();\n\telse if(T > 1) return (seg.ed - P).len();\n\telse return (seg.st + (seg.dir * T) - P).len();\n}\n\nvec getvec(){ld x , y; cin >> x >> y; return vec(x , y);}\nsegment getseg(){vec A = getvec() , B = getvec(); return segment(A , B);}\n\nint main(){\n\tint Q;\n\tfor(cin >> Q ; Q ; --Q){\n\t\tsegment P = getseg() , Q = getseg();\n\t\tif(havesect(P , Q)) cout << 0 << endl;\n\t\telse\n\t\t\tcout << fixed << setprecision(10) << min(min(dist(P.st , Q) , dist(P.ed , Q)) , min(dist(Q.st , P) , dist(Q.ed , P))) << endl;\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nconst double eps = 1e-10;\nbool dless(double d1, double d2) { return d1 < d2 + eps; }\nbool dcmp(double d, double d2 = 0) { return abs(d - d2) < eps; }\ndouble sgn(double d) {\n  if (dcmp(d))\n    return 0;\n  if (d > 0)\n    return 1;\n  return -1;\n}\n\nstruct vec {\n  double x, y;\n  vec(double x, double y) : x(x), y(y) {}\n  vec() : x(0), y(0) {}\n  const bool operator==(const vec &v) const {\n    return dcmp(x, v.x) && dcmp(y, v.y);\n  }\n  const bool operator!=(const vec &v) const { return !(*this == v); }\n  const vec operator+(const vec &v) const { return vec(x + v.x, y + v.y); }\n  const vec operator-() const { return vec(-x, -y); }\n  const vec operator-(const vec &v) const { return *this + (-v); }\n  const vec operator*(const double d) const { return vec(x * d, y * d); }\n  const vec operator/(const double d) const { return *this * (1 / d); }\n  const vec unit() const { return *this / len(); };\n  const double len() const { return sqrt(x * x + y * y); }\n  const double dot(const vec &v) const { return x * v.x + y * v.y; }\n  const double cross(const vec &v) const { return x * v.y - y * v.x; }\n  const bool parallel(const vec &v) const { return dcmp(cross(v)); }\n  const bool perpendicular(const vec &v) const { return dcmp(dot(v)); }\n};\n\ntypedef vec point;\n\ntemplate <class T> struct optional {\n  bool has;\n  T val;\n  optional() : has(false) {}\n  optional(T t) : has(true), val(t) {}\n};\n\nstruct line {\n  double a, b, c;\n  line(point p1, point p2) {\n    a = p1.y - p2.y;\n    b = p2.x - p1.x;\n    c = (p1.x - p2.x) * p1.y + (p2.y - p1.y) * p1.x;\n    double m1 = a * p1.x + b * p1.y + c;\n    double m2 = a * p2.x + b * p2.y + c;\n  }\n  bool parallel(line l) { return dcmp(a * l.b, b * l.a); }\n  optional<point> intersect(line l) {\n    if (parallel(l))\n      return optional<point>();\n    return point(-(c * l.b - b * l.c) / (a * l.b - b * l.a),\n                 (c * l.a - a * l.c) / (a * l.b - b * l.a));\n  }\n  bool contains(point p) { return dcmp(a * p.x + b * p.y + c); }\n  point project(point p) {\n    double t = -(a * p.x + b * p.y + c) / (a * a + b * b);\n    return point(p.x + a * t, p.y + b * t);\n  }\n};\n\nstruct segment {\n  point p1, p2;\n  segment(point p1, point p2) : p1(p1), p2(p2) {}\n  line sline() { return line(p1, p2); }\n  bool contains(point p) {\n    double x1 = min(p1.x, p2.x), x2 = max(p1.x, p2.x);\n    double y1 = min(p1.y, p2.y), y2 = max(p1.y, p2.y);\n    bool ok = sline().contains(p) && (dless(x1, p.x) && dless(p.x, x2)) &&\n              (dless(y1, p.y) && dless(p.y, y2));\n    return ok;\n  }\n  bool intersect(segment s) {\n    vec v0 = p2 - p1;\n    vec v1 = s.p2 - s.p1;\n    if (v0.parallel(v1)) {\n      return (contains(s.p1) || contains(s.p2)) ||\n             (s.contains(p1) || s.contains(p2));\n    }\n    point a = p1, b = p2, c = s.p1, d = s.p2;\n    return sgn((a - b).cross(b - c)) != sgn((a - b).cross(b - d)) &&\n           sgn((c - d).cross(d - a)) != sgn((c - d).cross(d - b));\n  }\n  double distance(point p) {\n    point p0 = sline().project(p);\n    // printf(\"(%lf,%lf)-(%lf,%lf) contains (%lf,%lf): %d\\n\", p1, p2, p0,\n    //  contains(p0));\n    if (contains(p0)) {\n      return (p0 - p).len();\n    } else {\n      return min((p1 - p).len(), (p2 - p).len());\n    }\n  }\n};\n\nint main() {\n  int n;\n  cin >> n;\n  for (int i = 0; i < n; i++) {\n    point p0, p1, p2, p3;\n    cin >> p0.x >> p0.y >> p1.x >> p1.y >> p2.x >> p2.y >> p3.x >> p3.y;\n    segment l0(p0, p1);\n    segment l1(p2, p3);\n    double d = 1.0 / 0.0;\n    d = min(d, l0.distance(p2));\n    d = min(d, l0.distance(p3));\n    d = min(d, l1.distance(p0));\n    d = min(d, l1.distance(p1));\n    if (l0.intersect(l1))\n      d = 0;\n    printf(\"%.10lf\\n\", d);\n  }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iomanip>\n#include<limits>\n#include<thread>\n#include<utility>\n#include<iostream>\n#include<string>\n#include<algorithm>\n#include<set>\n#include<map>\n#include<vector>\n#include<stack>\n#include<queue>\n#include<cmath>\n#include<numeric>\n#include<cassert>\n#include<random>\n#include<chrono>\n#include<unordered_set>\n#include<unordered_map>\n#include<fstream>\n#include<list>\n#include<functional>\n#include<bitset>\n#include<complex>\n#include<tuple>\nusing namespace std;\ntypedef unsigned long long int ull;\ntypedef long long int ll;\ntypedef pair<ll,ll> pll;\ntypedef long double D;\ntypedef complex<D> P;\n#define F first\n#define S second\nconst ll E=1e18+7;\nconst ll MOD=1000000007;\n\n\ntemplate<typename T,typename U>istream & operator >> (istream &i,pair<T,U> &A){i>>A.F>>A.S; return i;}\ntemplate<typename T>istream & operator >> (istream &i,vector<T> &A){for(auto &I:A){i>>I;} return i;}\ntemplate<typename T,typename U>ostream & operator << (ostream &o,pair<T,U> &A){o<<A.F<<\" \"<<A.S; return o;}\ntemplate<typename T>ostream & operator << (ostream &o,vector<T> &A){ll i=A.size(); for(auto &I:A){o<<I<<(--i?\" \":\"\");} return o;}\ntemplate<typename T>vector<T> & cset(vector<T> &A,T e=T()){for(auto &I:A){I=e;} return A;}\n\n\nnamespace Geometry{\n    typedef long double D;\n    typedef complex<long double> P;\n    typedef pair<P,D> C;\n    \n    const D EPS=1e-9;\n    const D PI=asin(1)*2;\n    const D INF=1e18;\n    \n    const static bool comp(const P &p1,const P &p2){\n        if(p1.real()==p2.real()){return p1.imag()<p2.imag();}\n        return p1.real()<p2.real();\n    }\n    \n    const static bool comp_y(const P &p1,const P &p2){\n        if(p1.imag()==p2.imag()){return p1.real()<p2.real();}\n        return p1.imag()<p2.imag();\n    }\n    \n    D dot(P p1,P p2){return p1.real()*p2.real()+p1.imag()*p2.imag();}\n    \n    D cross(P p1,P p2){return p1.real()*p2.imag()-p1.imag()*p2.real();}\n    \n    P project(P vec,P x){return vec*(x/vec).real();}\n    \n    P project(P p1,P p2,P x){return p1+project(p2-p1,x-p1);}\n    \n    P reflect(P vec,P x){return vec*conj(x/vec);}\n    \n    P reflect(P p1,P p2,P x){return p1+reflect(p2-p1,x-p1);}\n    \n    bool intersectSL(P p1,P p2,P vec){\n        vec/=abs(vec); p1/=vec; p2/=vec;\n        return (p1.imag()<EPS && p2.imag()>-EPS) || (p1.imag()>-EPS && p2.imag()<EPS);\n    }\n    \n    bool intersectSL(P p1,P p2,P p3,P p4){return intersectSL(p1-p4,p2-p4,p3-p4);}\n    \n    bool intersectSS(P p1,P p2,P p3,P p4){\n        if(dot(p2-p1,p3-p1)<-EPS && dot(p2-p1,p4-p1)<-EPS){return false;}\n        if(dot(p1-p2,p3-p2)<-EPS && dot(p1-p2,p4-p2)<-EPS){return false;}\n        return intersectSL(p1,p2,p3,p4) && intersectSL(p3,p4,p1,p2);\n    }\n    \n    D distLP(P vec,P x){return abs((x/vec).imag())*abs(vec);}\n    \n    D distLP(P p1,P p2,P x){return distLP(p2-p1,x-p1);}\n    \n    D distSP(P p1,P p2,P x){\n        if(dot(p2-p1,x-p1)<-EPS){return abs(x-p1);}\n        if(dot(p1-p2,x-p2)<-EPS){return abs(x-p2);}\n        return distLP(p1,p2,x);\n    }\n    \n    D distSS(P p1,P p2,P p3,P p4){\n        if(intersectSS(p1,p2,p3,p4)){return 0.0;}\n        return min({distSP(p1,p2,p3),distSP(p1,p2,p4),\n            distSP(p3,p4,p1),distSP(p3,p4,p2)});\n    }\n    \n    P crosspointLL(P p1,P p2,P vec){\n        if(abs(cross(p2-p1,vec))<EPS){return vec;}\n        return vec*cross(p2-p1,p2)/cross(p2-p1,vec);\n    }\n    \n    P crosspointLL(P p1,P p2,P p3,P p4){\n        return p4+crosspointLL(p1-p4,p2-p4,p3-p4);\n    }\n    \n    P crosspointSS(P p1,P p2,P p3,P p4){\n        if(distSP(p1,p2,p3)<EPS){return p3;}\n        if(distSP(p1,p2,p4)<EPS){return p4;}\n        return crosspointLL(p1,p2,p3,p4);\n    }\n    \n    bool intersectShL(P p1,P p2,P vec){\n        vec/=abs(vec);\n        return intersectSL(p1,p2,vec) &&\n        crosspointLL(p1/vec,p2/vec,vec/vec).real()>-EPS;\n    }\n    \n    bool intersectShL(P p1,P p2,P p3,P p4){\n        return intersectShL(p1-p3,p2-p3,p4-p3);\n    }\n    \n    //1::in,0::on edge,-1::out\n    int contain(const vector<P> &poly,const P &p){\n        vector<P> A={{65537,96847},{-24061,6701},{56369,-86509},{-93763,-78049},{56957,10007}};\n        vector<bool> cnt(5,false);\n        for(int i=0;i<(int)poly.size();i++){\n            int j=(i+1)%poly.size();\n            if(distSP(poly[i],poly[j],p)<EPS){return 0;}\n            for(int j=0;j<5;j++){\n                if(intersectShL(poly[i],poly[j],p,p+A[j])){cnt[j]=!cnt[j];}\n            }\n        }\n        int in=0;\n        for(int j=0;j<5;j++){if(cnt[j]){in++;}}\n        return in>=3?1:-1;\n    }\n    \n    vector<P> convexcut(const vector<P> &poly,P p1,P p2){\n        vector<P> ret;\n        for(int i=0;i<(int)poly.size();i++){\n            int j=(i+1)%poly.size();\n            if(cross(p2-p1,poly[i]-p1)>-EPS){ret.push_back(poly[i]);}\n            if(intersectSL(poly[i],poly[j],p1,p2) &&\n               distLP(p1,p2,poly[i])>EPS && distLP(p1,p2,poly[j])>EPS){\n                ret.push_back(crosspointLL(poly[i],poly[j],p1,p2));\n            }\n        }\n        return ret;\n    }\n    \n    D area(const vector<P> &poly){\n        D ans=0;\n        for(int i=2;i<(int)poly.size();i++){\n            ans+=cross(poly[i-1]-poly[0],poly[i]-poly[0]);\n        }\n        return abs(ans)/2;\n    }\n    \n    vector<P> convexhull(vector<P> pts){\n        vector<P> ret;\n        sort(pts.begin(),pts.end(),comp);\n        auto fnc=[&](){\n            for(auto &I:pts){\n                if(!ret.empty() && I==ret.back()){continue;}\n                while(ret.size()>=2 && cross(ret.back()-ret[ret.size()-2],I-ret.back())<-EPS){\n                    ret.pop_back();\n                }\n                ret.push_back(I);\n            }\n        };\n        fnc();\n        reverse(pts.begin(),pts.end());\n        fnc();\n        if(ret[0]==ret.back()){ret.pop_back();}\n        return ret;\n    }\n    \n    //4::seperate,3::circumscribe,2::intersect,1::inscribe,0::contain,-1::same\n    int intersectCC(C c1,C c2){\n        D d=abs(c1.F-c2.F),r=c1.S+c2.S,dif=abs(c2.S-c1.S);\n        if(d<EPS && dif<EPS){return -1;}\n        if(d-r>EPS){return 4;}\n        if(d-r>-EPS){return 3;}\n        if(d-dif>EPS){return 2;}\n        if(d-dif>-EPS){return 1;}\n        return 0;\n    }\n    \n    vector<P> crosspointLC(P p1,P p2,C c){\n        vector<P> ret;\n        P pr=project(p1,p2,c.F);\n        D d=distLP(p1,p2,c.F);\n        if(d-c.S>EPS){return ret;}\n        if(d-c.S>-EPS){ret.push_back(pr); return ret;}\n        P vec=p2-p1; vec*=sqrt(c.S*c.S-d*d)/abs(vec);\n        ret.push_back(pr-vec);\n        ret.push_back(pr+vec);\n        return ret;\n    }\n    \n    vector<P> crosspointSC(P p1,P p2,C c){\n        vector<P> ret;\n        for(auto &I:crosspointLC(p1,p2,c)){\n            if(distSP(p1,p2,I)<EPS){ret.push_back(I);}\n        }\n        return ret;\n    }\n    \n    vector<P> crosspointCC(C c1,C c2){\n        vector<P> ret;\n        P vec=c2.F-c1.F;\n        D base=(c1.S*c1.S+norm(vec)-c2.S*c2.S)/(2*abs(vec));\n        D h=sqrt(c1.S*c1.S-base*base);\n        vec/=abs(vec);\n        ret.push_back(c1.F+vec*P(base,-h));\n        ret.push_back(c1.F+vec*P(base,h));\n        return ret;\n    }\n    \n    vector<P> tangentCP(C c,P p){\n        return crosspointCC(c,C(p,sqrt(norm(c.F-p)-c.S*c.S)));\n    }\n    \n    vector<pair<P,P>> tangentCC(C c1,C c2){\n        vector<pair<P,P>> ret;\n        P d=c2.F-c1.F;\n        for(D i:{-1,1}){\n            D r=c1.S+c2.S*i;\n            if(intersectCC(c1,c2)>i+1){\n                for(P s:{-1i,1i}){\n                    P p=r+s*sqrt(norm(d)-norm(r));\n                    ret.push_back({c1.F+d*c1.S/norm(d)*p,c2.F-d*i*c2.S/norm(d)*p});\n                }\n            }\n        }\n        return ret;\n    }\n    \n    D area(const vector<P> &poly,C c){\n        D ret=0;\n        for(int i=0;i<(int)poly.size();i++){\n            P a=poly[i]-c.F,b=poly[(i+1)%poly.size()]-c.F;\n            if(abs(a)<c.S+EPS && abs(b)<c.S+EPS){ret+=cross(a,b);}\n            else{\n                vector<P> A=crosspointSC(a,b,{0,c.S});\n                if(A.empty()){ret+=c.S*c.S*arg(b/a);}\n                else{\n                    ret+=(abs(a)<c.S?cross(a,A[0]):c.S*c.S*arg(A[0]/a));\n                    ret+=(abs(b)<c.S?cross(A.back(),b):c.S*c.S*arg(b/A.back()));\n                    ret+=cross(A[0],A.back());\n                }\n            }\n        }\n        return abs(ret)/2;\n    }\n    \n    //反時計回り\n    D diameter(const vector<P> &poly){\n        D ret=0;\n        ll l=0,r=0,n=poly.size();\n        if(n==2){return abs(poly[0]-poly[1]);}\n        for(int i=0;i<n;i++){\n            if(comp(poly[l],poly[i])){l=i;}\n            if(comp(poly[i],poly[r])){r=i;}\n        }\n        ll sl=r,sr=l;\n        while(sl!=l || sr!=r){\n            ret=max(ret,abs(poly[r]-poly[l]));\n            if(cross(poly[(l+1)%n]-poly[l],poly[(r+1)%n]-poly[r])<0){(++l)%=n;}\n            else{(++r)%=n;}\n        }\n        return ret;\n    }\n    \n    D closestpair(vector<P> pt){\n        sort(pt.begin(),pt.end(),comp);\n        D ret=INF;\n        int N=pt.size();\n        for(int i=1;i<N;i<<=1){\n            for(int j=0;i+j<N;j+=i*2){\n                int m=i+j;\n                vector<P> R;\n                D l=-INF,r=INF;\n                for(int k=j;k<m;k++){l=max(l,pt[k].real());}\n                for(int k=0;m+k<N && k<i;k++){r=min(r,pt[m+k].real());}\n                for(int k=0;m+k<N && k<i;k++){\n                    if(pt[m+k].real()-l<ret){R.push_back(pt[m+k]);}\n                }\n                int idx=0;\n                for(int k=j;k<m;k++){\n                    if(r-pt[k].real()>ret){continue;}\n                    int M=R.size();\n                    while(idx<M && pt[k].imag()-R[idx].imag()>ret){idx++;}\n                    for(int s=idx;s<M && R[s].imag()-pt[k].imag()<ret;s++){\n                        ret=min(ret,abs(R[s]-pt[k]));\n                    }\n                }\n                auto ed=(j+i*2<N?pt.begin()+j+2*i:pt.end());\n                inplace_merge(pt.begin()+j,pt.begin()+m,ed,comp_y);\n            }\n        }\n        return ret;\n    }\n    \n    P centerofgravity(const vector<P> &pt){\n        P ret(0,0);\n        D wt=0;\n        for(int i=2;i<(int)pt.size();i++){\n            D w2=cross(pt[i-1]-pt[0],pt[i]-pt[0]);\n            P p=(pt[0]+pt[i-1]+pt[i])/(D)3;\n            wt+=w2;\n            ret+=p*w2;\n        }\n        return ret/wt;\n    }\n    \n    istream & operator >> (istream &i,P &p){D x,y; i>>x>>y; p={x,y}; return i;}\n    istream & operator >> (istream &i,C &p){D x,y; i>>x>>y>>p.S; p.F={x,y}; return i;}\n};\n\nusing namespace Geometry;\n\n\nint main(){\n    cout<<fixed<<setprecision(12);\n    ll n;\n    cin>>n;\n    while(n--){\n        P p1,p2,p3,p4;\n        cin>>p1>>p2>>p3>>p4;\n        auto ans=distSS(p1,p2,p3,p4);\n        cout<<ans<<endl;\n    }\n    \n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <cstdlib>\n#include <iostream>\n#include <bitset>\n#include <deque>\n#include <list>\n#include <map>\n#include <set>\n#include <queue>\n#include <stack>\n#include <vector>\n#include <algorithm>\n#include <iterator>\n#include <string>\n#include <chrono>\n#include <random>\n#include <tuple>\n#include <utility>\n#include <fstream>\n#include <complex>\n\nconst long INF = (1l << 30);\nconst long LINF = (1l << 60);\n\n//geometric library\n//#include <complex>\ntypedef std::complex<double> Com;\n\n//内積\ndouble dot_product(const Com a, const Com b){\n\treturn (conj(a)*b).real();\n}\n\n//外積\ndouble cross_product(const Com a, const Com b){\n\treturn (conj(a)*b).imag();\n}\n\n//点と直線の距離\ndouble dist_dot_line(const Com st, const Com en, const Com dt){\n    return std::abs(cross_product(dt-st, en-st) / std::abs(en-st));\n}\n\n//点と線分の距離\ndouble dist_dot_seg(const Com st, const Com en, const Com dt){\n\tif(dot_product(en-st, dt-st) <= 0){\n\t\treturn std::abs(dt-st);\n\t}else if(dot_product(st-en, dt-en) <= 0){\n\t\treturn std::abs(dt-en);\n\t}else{\n\t\treturn dist_dot_line(st, en, dt);\n\t}\n}\n\n//線分の交差判定\n//平行・接触は含まない(接触を含みたいときはdist_seg==0を使う)\nbool seg_crossing(const Com st1, const Com en1, const Com st2, const Com en2){\n\tdouble cross1 = cross_product(en1-st1, st2-st1) * cross_product(en1-st1, en2-st1);\n\tdouble cross2 = cross_product(en2-st2, st1-st2) * cross_product(en2-st2, en1-st2);\n\treturn (cross1 < 0) && (cross2 < 0);\n}\n\n//線分と線分の距離\ndouble dist_seg(const Com st1, const Com en1, const Com st2, const Com en2){\n\tif(seg_crossing(st1, en1, st2, en2)){\n\t\treturn 0;\n\t}\n\treturn std::min(std::min(dist_dot_seg(st1, en1, st2), dist_dot_seg(st1, en1, en2)), std::min(dist_dot_seg(st2, en2, st1), dist_dot_seg(st2, en2, en1)));\n}\n\n//線分と線分の垂直判定\nbool is_vertical(const Com st1, const Com en1, const Com st2, const Com en2){\n    if(dot_product(en1-st1, en2-st2) == 0){\n        return true;\n    }else{\n        return false;\n    }\n}\n\n//平行判定\nbool is_parallel(const Com st1, const Com en1, const Com st2, const Com en2){\n    if(cross_product(en1-st1, en2-st2) == 0){\n        return true;\n    }else{\n        return false;\n    }\n}\n\n//直線・線分の交点\nCom cross_point(const Com st1, const Com en1, const Com st2, const Com en2){\n    /* 線分の時はコメントを外した方が良さそう\n    if(dist_seg(st1, en1, st2, en2) > 0 || is_parallel(st1, en1, st2, en2)){\n        printf(\"Error! cross_point invalid input\\n\");\n        std::exit(EXIT_FAILURE);\n    }\n    //*/\n    double den = (real(st1)-real(en1)) * (imag(en2)-imag(st2)) - (real(en2)-real(st2)) * (imag(st1)-imag(en1));\n    double mol = (real(en2)-real(en1)) * (imag(en2)-imag(st2)) - (real(en2)-real(st2)) * (imag(en2)-imag(en1));\n    double s = mol/den;\n    return st1 * s + en1 * (1-s);\n}\n\n\nvoid solve(){\n    double x[4], y[4];\n    Com p[4];\n    for(int i = 0; i < 4; i++){\n        scanf(\"%lf%lf\", &x[i], &y[i]);\n        p[i] = Com(x[i], y[i]);\n    }\n    /*\n    if(seg_crossing(p[0], p[1], p[2], p[3])){\n        printf(\"crossing!\\n\");\n    }\n    //*/\n    printf(\"%.10lf\\n\", dist_seg(p[0], p[1], p[2], p[3]));\n}\n\nlong q;\nint main(){\n    scanf(\"%ld\", &q);\n    for(int i = 0; i < q; i++){\n        solve();\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nconst double eps = 1e-10;\nbool dcmp(double d, double d2 = 0) { return abs(d - d2) < eps; }\ndouble sgn(double d) {\n  if (dcmp(d))\n    return 0;\n  if (d > 0)\n    return 1;\n  return -1;\n}\n\nstruct vec {\n  double x, y;\n  vec(double x, double y) : x(x), y(y) {}\n  vec() : x(0), y(0) {}\n  const bool operator==(const vec &v) const {\n    return dcmp(x, v.x) && dcmp(y, v.y);\n  }\n  const bool operator!=(const vec &v) const { return !(*this == v); }\n  const vec operator+(const vec &v) const { return vec(x + v.x, y + v.y); }\n  const vec operator-() const { return vec(-x, -y); }\n  const vec operator-(const vec &v) const { return *this + (-v); }\n  const vec operator*(const double d) const { return vec(x * d, y * d); }\n  const vec operator/(const double d) const { return *this * (1 / d); }\n  const vec unit() const { return *this / len(); };\n  const double len() const { return sqrt(x * x + y * y); }\n  const double dot(const vec &v) const { return x * v.x + y * v.y; }\n  const double cross(const vec &v) const { return x * v.y - y * v.x; }\n  const bool parallel(const vec &v) const { return dcmp(cross(v)); }\n  const bool perpendicular(const vec &v) const { return dcmp(dot(v)); }\n};\n\ntypedef vec point;\n\ntemplate <class T> struct optional {\n  bool has;\n  T val;\n  optional() : has(false) {}\n  optional(T t) : has(true), val(t) {}\n};\n\nstruct line {\n  double a, b, c;\n  line(point p1, point p2) {\n    a = p1.y - p2.y;\n    b = p2.x - p1.x;\n    c = (p1.x - p2.x) * p1.y + (p2.y - p1.y) * p1.x;\n    double m1 = a * p1.x + b * p1.y + c;\n    double m2 = a * p2.x + b * p2.y + c;\n  }\n  bool parallel(line l) { return dcmp(a * l.b, b * l.a); }\n  optional<point> intersect(line l) {\n    if (parallel(l))\n      return optional<point>();\n    return point(-(c * l.b - b * l.c) / (a * l.b - b * l.a),\n                 (c * l.a - a * l.c) / (a * l.b - b * l.a));\n  }\n  bool contains(point p) { return dcmp(a * p.x + b * p.y + c); }\n  point project(point p) {\n    double t = -(a * p.x + b * p.y + c) / (a * a + b * b);\n    return point(p.x + a * t, p.y + b * t);\n  }\n};\n\nstruct segment {\n  point p1, p2;\n  segment(point p1, point p2) : p1(p1), p2(p2) {}\n  line sline() { return line(p1, p2); }\n  bool contains(point p) {\n    double x1 = min(p1.x, p2.x), x2 = max(p1.x, p2.x);\n    double y1 = min(p1.y, p2.y), y2 = max(p1.y, p2.y);\n    bool ok = sline().contains(p) && (x1 <= p.x && p.x <= x2) &&\n              (y1 <= p.y && p.y <= y2);\n    return ok;\n  }\n  bool intersect(segment s) {\n    vec v0 = p2 - p1;\n    vec v1 = s.p2 - s.p1;\n    if (v0.parallel(v1)) {\n      return (contains(s.p1) || contains(s.p2)) ||\n             (s.contains(p1) || s.contains(p2));\n    }\n    point a = p1, b = p2, c = s.p1, d = s.p2;\n    return sgn((a - b).cross(b - c)) != sgn((a - b).cross(b - d)) &&\n           sgn((c - d).cross(d - a)) != sgn((c - d).cross(d - b));\n  }\n  double distance(point p) {\n    point p0 = sline().project(p);\n    if (contains(p0)) {\n      return (p0 - p).len();\n    } else {\n      return min((p1 - p).len(), (p2 - p).len());\n    }\n  }\n};\n\nint main() {\n  int n;\n  cin >> n;\n  for (int i = 0; i < n; i++) {\n    point p0, p1, p2, p3;\n    cin >> p0.x >> p0.y >> p1.x >> p1.y >> p2.x >> p2.y >> p3.x >> p3.y;\n    segment l0(p0, p1);\n    segment l1(p2, p3);\n    double d = 1.0 / 0.0;\n    d = min(d, l0.distance(p2));\n    d = min(d, l0.distance(p3));\n    d = min(d, l1.distance(p0));\n    d = min(d, l1.distance(p1));\n    if (l0.intersect(l1))\n      d = 0;\n    printf(\"%.9lf\\n\", d);\n  }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n#include<math.h>\n#include<algorithm>\n#include<queue>\n#include<iostream>\n#include<set>\n#include<map>\n#define re register\n#define ll long long\nusing namespace std;\ninline int gi(){\n\tint f=1,sum=0;char ch=getchar();\n\twhile(ch>'9'|| ch<'0'){if(ch=='-')f=-1;ch=getchar();}\n\twhile(ch>='0' && ch<='9'){sum=(sum<<3)+(sum<<1)+ch-'0';ch=getchar();}\n\treturn sum*f;\n}\nconst double eps=1e-10,Pi=acos(-1.0);\nstruct node{\n\tdouble x,y;\n\tnode operator+(node b){return (node){x+b.x,y+b.y};}\n\tnode operator-(node b){return (node){x-b.x,y-b.y};}\n\tnode operator*(double b){return (node){x*b,y*b};}\n\tdouble len(){return sqrt(x*x+y*y);}\n};\nint fh(double a){return fabs(a)<eps?0:a>eps?1:-1;}\ndouble cross(node a,node b){return a.x*b.y-a.y*b.x;}\ndouble dot(node a,node b){return a.x*b.x+a.y*b.y;}\nnode projection(node p1,node p2,node p){node v=p2-p1;return p1+v*(dot(v,p-p1)/dot(v,v));}\nnode reflection(node p1,node p2,node p){node P=projection(p1,p2,p);P=P*2-p;return P;}\nvoid Counter_Clockwise(node p1,node p2,node p){\n\tif(cross(p2-p1,p-p1)>eps){puts(\"COUNTER_CLOCKWISE\");return;}\n\tif(cross(p2-p1,p-p1)<-eps){puts(\"CLOCKWISE\");return;}\n\tif(dot(p2-p1,p-p1)<-eps){puts(\"ONLINE_BACK\");return;}\n\tif(dot(p2-p1,p2-p1)>=dot(p-p1,p2-p1)){puts(\"ON_SEGMENT\");return;}\n\tputs(\"ONLINE_FRONT\");\n}\nbool insegment(node A,node B,node p){\n\tif(fh(cross(B-A,p-A)))return false;\n\treturn ((fh(p.x-A.x)>=0 && fh(B.x-p.x)>=0) || (fh(p.x-A.x)<=0 && fh(B.x-p.x)<=0)) && ((fh(p.y-A.y)>=0 && fh(B.y-p.y)>=0) || (fh(p.y-A.y)<=0 && fh(B.y-p.y)<=0));\n}\nint parallel(node A1,node A2,node B1,node B2){\n\tif(!fh(cross(B2-B1,A2-A1)))return 2;\n\tif(!fh(dot(B2-B1,A2-A1)))return 1;\n\treturn 0;\n}\nbool intersection(node A1,node A2,node B1,node B2){\n\tif(!fh(cross(B2-B1,A2-A1))){\n\t\tif(insegment(A1,A2,B1) || insegment(A1,A2,B2) || insegment(B1,B2,A1) || insegment(B1,B2,A2))return true;\n\t\treturn false;\n\t}\n\treturn fh(cross(A1-B1,B2-B1)*cross(A2-B1,B2-B1))<=0 && (fh(cross(B1-A1,A2-A1)*cross(B2-A1,A2-A1))<=0);\n}\nnode getintersection(node A1,node A2,node B1,node B2){\n\tnode v=A2-A1;\n\treturn A1+v*(cross(B2-B1,B1-A1)/cross(B2-B1,A2-A1));\n}\ndouble distance(node A1,node A2,node B1,node B2){\n\tif(intersection(A1,A2,B1,B2))return 0.0;\n\tnode p;double ans=1e18;\n\tans=min(ans,(A1-B1).len());ans=min(ans,(A1-B2).len());ans=min(ans,(A2-B1).len());ans=min(ans,(A2-B2).len());\n\tp=projection(A1,A2,B1);\n\tif(insegment(A1,A2,p))ans=min(ans,(B1-p).len());\n\tp=projection(A1,A2,B2);\n\tif(insegment(A1,A2,p))ans=min(ans,(B2-p).len());\n\tp=projection(B1,B2,A1);\n\tif(insegment(B1,B2,p))ans=min(ans,(A1-p).len());\n\tp=projection(B1,B2,A2);\n\tif(insegment(B1,B2,p))ans=min(ans,(A2-p).len());\n\treturn ans;\n}\nint main(){\n\tnode p1,p2,p3,p4;\n\tint Q=gi();\n\twhile(Q--){\n\t\tp1.x=gi();p1.y=gi();p2.x=gi();p2.y=gi();\n\t\tp3.x=gi();p3.y=gi();p4.x=gi();p4.y=gi();\n\t\tprintf(\"%.8lf\\n\",distance(p1,p2,p3,p4));\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<iomanip>\n#include<algorithm>\n#include<cmath>\nusing namespace std;\n#define FOR(i,a,b) for(int i=(a);i<(b);i++)\n#define REP(i,n) for(int i=0;i<(n);i++)\n#define PII pair<int,int>\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n\nclass Point\n{\npublic:\n\tdouble x, y;\n\tPoint(double X = 0, double Y = 0)\n\t{\n\t\tx = X;\n\t\ty = Y;\n\t}\n\tPoint operator +(const Point &p)const { return Point(x + p.x, y + p.y); };\n\tPoint operator -(const Point &p)const { return Point(x - p.x, y - p.y); };\n\tPoint operator *(const double a)const { return Point(x*a, y*a); };\n\tPoint operator /(const double a)const { return Point(x / a, y / a); };\n\tdouble norm()const { return x*x + y*y; };\n\tdouble length()const { return sqrt(norm()); };\n\tdouble dot(const Point &p)const { return x*p.x + y*p.y; };\n\tdouble cross(const Point &p)const { return x*p.y - y*p.x; };\n\tbool operator ==(const Point &p)const\n\t{\n\t\treturn fabs(x - p.x)<EPS &&fabs(y - p.y)<EPS;\n\t}\n\tfriend ostream& operator <<(ostream& os, const Point &p);\n\tint CCW(Point p1, Point p2)\n\t{\n\t\tPoint p0(x, y);\n\t\tPoint V1 = p1 - p0;\n\t\tPoint V2 = p2 - p0;\n\t\tif (V1.cross(V2) > 0.0)return -1;\n\t\telse if (V1.cross(V2) < 0.0)return 1;\n\t\telse if (V1.dot(V2) < 0.0)return -2;\n\t\telse if (V1.norm() < V2.norm())return 2;\n\t\treturn 0;\n\t}\n};\ntypedef Point Vector;\n\nostream& operator <<(ostream& os, const Point &p)\n{\n\treturn os << \"(\" << p.x << \",\" << p.y << \")\";\n}\n\nclass Segment\n{\npublic:\n\tPoint p1, p2;\n\tSegment(double x1, double y1, double x2, double y2)\n\t{\n\t\tp1.x = x1;\n\t\tp1.y = y1;\n\t\tp2.x = x2;\n\t\tp2.y = y2;\n\t}\n\tdouble GetLength()\n\t{\n\t\tPoint temp = p2 - p1;\n\t\treturn temp.length();\n\t}\n\tdouble GetDistanceSeg(double X, double Y)\n\t{\n\t\tPoint p(X, Y);\n\t\tPoint a = p2 - p1;\n\t\tPoint b = p - p1;\n\t\tPoint c = p1 - p2;\n\t\tPoint d = p - p2;\n\t\tif (a.dot(b) < 0.0)return b.length();\n\t\tif (c.dot(d) < 0.0)return d.length();\n\t\treturn GetDistanceLine(X, Y);\n\t}\n\tdouble GetDistanceLine(double X, double Y)\n\t{\n\t\tPoint t(X, Y);\n\t\tPoint a = p2 - p1;\n\t\tPoint b = t - p1;\n\t\treturn abs(a.cross(b) / a.length());\n\t}\n\tbool IsIntersect(Segment &s)\n\t{\n\t\tint s1, s2;\n\t\ts1 = p1.CCW(p2, s.p1)*p1.CCW(p2, s.p2);\n\t\ts2 = s.p1.CCW(s.p2, p1)*s.p1.CCW(s.p2, p2);\n\t\treturn s1 <= 0 && s2 <= 0;\n\t}\n\tbool IsOrthogonal(const Segment &s)\n\t{\n\t\tVector t1 = p2 - p1;\n\t\tVector t2 = s.p2 - s.p1;\n\t\treturn equals(0.0, t1.dot(t2));\n\t}\n\tbool IsParallel(const Segment &s)\n\t{\n\t\tVector t1 = p2 - p1;\n\t\tVector t2 = s.p2 - s.p1;\n\t\treturn equals(0.0, t1.cross(t2));\n\t}\n\tPoint GetProjection(double X, double Y)const\n\t{\n\t\tVector V = p2 - p1;\n\t\tPoint P(X, Y);\n\t\tPoint ret = V*(V.dot(P - p1) / V.norm());\n\t\treturn ret + p1;\n\t}\n\tPoint GetReflect(double X, double Y)\n\t{\n\t\tPoint t(X, Y);\n\t\tPoint Pro = GetProjection(X, Y);\n\t\tVector dV = Pro - t;\n\t\treturn t + dV*2.0;\n\t}\n};\ntypedef Segment Line;\n\nclass Circle\n{\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point C = Point(), double R = 0)\n\t{\n\t\tc = C;\n\t\tr = R;\n\t}\n};\n\nint main()\n{\n\tint q;\n\tcin >> q;\n\tREP(i, q)\n\t{\n\t\tint x0, y0, x1, y1, x2, y2, x3, y3;\n\t\tcin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n\t\tSegment s1(x0, y0, x1, y1), s2(x2, y2, x3, y3);\n\t\tdouble ans;\n\t\tif (s1.IsIntersect(s2))ans = 0;\n\t\telse {ans = min({ s2.GetDistanceSeg(x0, y0), s2.GetDistanceSeg(x1, y1),s1.GetDistanceSeg(x2, y2), s1.GetDistanceSeg(x3, y3) });}\n\t\tcout << fixed << setprecision(10) << ans << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nstruct cww{cww(){ios::sync_with_stdio(false);cin.tie(0);}}star;\n#define P(x) cout << (x) << \"\\n\"\n#define p(x) cout << (x)\n#define all(c) (c).begin(), (c).end()\n#define rall(c) (c).rbegin(), (c).rend()\n#define vv(type, c, m, n, i) vector<vector<type>> c(m, vector<type>(n, i));\n#define rep(i,a,n) for(int i=(a), i##_len=(n); i<i##_len; ++i)\n#define rrep(i,a,n) for(int i=(a), i##_len=(n); i>i##_len; --i)\n#define len(x) ((int)(x).size())\n#define mp make_pair\n#define eb emplace_back\n#define fi first\n#define se second\ntypedef long long ll;\ntypedef long double ld;\ntypedef vector<int> vi;\ntypedef vector<double> vd;\ntypedef vector<long long> vll;\ntypedef vector<string> vs;\ntypedef vector<bool> vb;\ntypedef complex<double> Point;\ntypedef Point Vector;\ntypedef pair<Point, Point> Segment;\ntypedef Segment Line;\nconstexpr double EPS = (1e-9L);\ndouble dot(const Point& p1, const Point& p2) { return (conj(p1) * p2).real(); }\ndouble cross(const Point& p1, const Point& p2) { return (conj(p1) * p2).imag(); }\nconstexpr bool eq(double a) { return abs(a) < EPS; }\nPoint project(Segment s, Point p) {\n\tVector base = s.fi - s.se;\n\tdouble r = dot(p - s.fi, base) / norm(base);\n\treturn s.fi + base * r;\n}\nPoint reflect(Segment s, Point p) { return p + (project(s, p) - p) * 2.0; }\nint ccw(const Point& p1, const Point& p2, const Point& p3) {\n\tPoint a = p2 - p1, b = p3 - p1;\n\tif (cross(a, b) > EPS) return 1;\n\tif (cross(a, b) < -EPS) return -1;\n\tif (dot(a, b) < -EPS) return 2;\n\tif (norm(a) < norm(b)) return -2;\n\treturn 0;\n}\nbool intersect(Point &p1, Point &p2, Point &p3, Point &p4) {\n\treturn (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n\t\t\tccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\nbool intersect(Segment &s1, Segment &s2) {\n\treturn intersect(s1.fi, s1.se, s2.fi, s2.se);\n}\ndouble getDistance(Point &a, Point &b) { return abs(a - b); }\ndouble getDistanceLP(Line &l, Point &p) {\n\treturn abs(cross(l.se - l.fi, p - l.fi) / abs(l.se - l.fi));\n}\ndouble getDistanceSP(Segment &s, Point &p) {\n\tif(dot(s.se - s.fi, p - s.fi) < 0.0) return abs(p - s.fi);\n\tif(dot(s.fi - s.se, p - s.se) < 0.0) return abs(p - s.se);\n\treturn getDistanceLP(s, p);\n}\ndouble getDistance(Segment s1, Segment s2) {\n\tif(intersect(s1, s2)) return 0.0;\n\treturn min(min(getDistanceSP(s1, s2.fi), getDistanceSP(s1, s2.se)),\n\t\t\t\tmin(getDistanceSP(s2, s1.fi), getDistanceSP(s2, s1.se)));\n}\nint main() {\n\tcout << setprecision(10) << fixed;\n\tint q; cin >> q;\n\tSegment s1, s2;\n\tdouble x1, y1, x2, y2, x3, y3, x4, y4;\n\trep(i, 0, q) {\n\t\tcin >> x1 >> y1 >> x2 >> y2 >> x3 >> y3 >> x4 >> y4;\n\t\ts1 = mp(Point(x1, y1), Point(x2, y2));\n\t\ts2 = mp(Point(x3, y3), Point(x4, y4));\n\t\tP(getDistance(s1, s2));\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <algorithm>\n#include <cmath>\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nusing namespace std;\n\nclass Point {\npublic:\n\tdouble x, y;\n\tPoint(double x = 0, double y = 0) : x(x), y(y) {}\n\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a) { return Point(a*x, a*y); }\n\tPoint operator / (double a) { return Point(x / a, y / a); }\n\n\tdouble norm() { return x*x + y*y; }\n\tdouble abs() { return sqrt(norm()); }\n\n\tbool operator < (const Point &p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p) const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\n\ntypedef Point Vector;\n\nstruct Segment {\n\tPoint p1, p2;\n\tSegment() {}\n};\n\ntypedef Segment Line;\n\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0) : c(c), r(r) {}\n};\n\n\ndouble norm(Vector a) {\n\treturn a.norm();\n}\n\ndouble abs(Vector a) {\n\treturn a.abs();\n}\n\ndouble dot(Vector a, Vector b) {\n\treturn a.x*b.x + a.y*b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n\treturn a.x*b.y - a.y*b.x;\n}\n\nbool isOrthogonal(Vector a, Vector b) {\n\treturn equals(dot(a, b), 0.0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n\treturn isOrthogonal(a1 - a2, b1 - b2);\n}\n\nbool isOrthogonal(Segment s1, Segment s2) {\n\treturn isOrthogonal(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\nbool isParallel(Vector a, Vector b) {\n\treturn equals(cross(a, b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n\treturn isParallel(a1 - a2, b1 - b2);\n}\n\nbool isParallel(Segment s1, Segment s2) {\n\treturn isParallel(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\nPoint project(Segment s, Point p) {\n\tdouble alpha = dot(p - s.p2, s.p1 - s.p2) / (s.p1 - s.p2).norm();\n\treturn s.p2 + (s.p1 - s.p2)*alpha;\n}\n\nPoint reflect(Segment s, Point p) {\n\treturn project(s, p)*2.0 - p;\n}\n\ndouble distPP(Point p1, Point p2) {\n\treturn (p1 - p2).abs();\n}\n\ndouble distLineP(Line l, Point p) {\n\treturn (project(l, p) - p).abs();\n}\n\ndouble distSegP(Segment s, Point p) {\n\tif (dot(p - s.p1, s.p2 - s.p1) > 0 && dot(p - s.p2, s.p1 - s.p2) > 0) {\n\t\treturn distLineP(s, p);\n\t}\n\telse {\n\t\treturn min(distPP(p, s.p1), distPP(p, s.p2));\n\t}\n}\n\nbool crossPoint(Line l1, Line l2, Point &p) {\n\tif (isParallel(l1, l2)) {\n\t\treturn false;\n\t}\n\telse {\n\t\tdouble alpha = cross(l2.p1 - l1.p1, l2.p1 - l2.p2) / cross(l1.p2 - l1.p1, l2.p1 - l2.p2);\n\t\tp = l1.p1 + (l1.p2 - l1.p1)*alpha;\n\t\treturn true;\n\t}\n}\n\nbool intersect(Segment s1, Segment s2) {\n\tPoint p;\n\tif (!crossPoint(s1, s2, p)) {\n\t\treturn false;\n\t}\n\telse {\n\t\tif (distPP(s1.p1, s1.p2) < distPP(p, s1.p1) + distPP(p, s1.p2)) {\n\t\t\treturn false;\n\t\t}\n\t\telse {\n\t\t\treturn true;\n\t\t}\n\t}\n}\n\ndouble distSegSeg(Segment s1, Segment s2) {\n\tif (intersect(s1, s2)) {\n\t\treturn 0.0;\n\t}\n\treturn min(min(distSegP(s1, s2.p1), distSegP(s1, s2.p2)), min(distSegP(s2, s1.p1), distSegP(s2, s1.p2)));\n}\n\nint main() {\n\tSegment S1, S2;\n\tint q;\n\tcin >> q;\n\tfor (int i = 0; i < q; i++) {\n\t\tcin >> S1.p1.x >> S1.p1.y >> S1.p2.x >> S1.p2.y >> S2.p1.x >> S2.p1.y >> S2.p2.x >> S2.p2.y;\n\t\tcout << fixed << setprecision(15);\n\t\tcout << distSegSeg(S1, S2) << endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "/* Header {{{ */\n#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long readtype;\ntypedef long long var;\ntypedef long double let;\n\nreadtype read() {\n  readtype a = 0, c = getchar(), s = 0;\n  while (!isdigit(c)) s |= c == '-', c = getchar();\n  while (isdigit(c)) a = a * 10 + c - 48, c = getchar();\n  return s ? -a : a;\n}\n\n#ifdef LOCAL_LOGGER\n#define logger(...) fprintf(stderr, __VA_ARGS__)\n#define abortif(v, ...) if (v) {logger(\"Error in Line %d, Function '%s()'.\\nInfo: \", __LINE__, __FUNCTION__); logger(__VA_ARGS__); exit(0);}\n#else\n#define logger(...);\n#define abortif(v, ...);\n#endif\n/* }}} */\n\nconst let EPS = 1e-8;\n\nint sign(let x) { return (x < -EPS) ? -1 : (x > EPS ? 1 : 0);}\n\nstruct Point {\n  let x, y;\n\n  Point operator ~() {\n    return (Point) {x, -y};\n  }\n  friend Point operator + (Point a, Point b) {\n    return (Point) {a.x + b.x, a.y + b.y};\n  }\n  friend Point operator - (Point a, Point b) {\n    return (Point) {a.x - b.x, a.y - b.y};\n  }\n  Point operator * (let k) { return (Point) {x * k, y * k}; }\n\n  friend let Times(Point a, Point b) {\n    return a.x * b.y - a.y * b.x;\n  }\n\n  let dist() {\n    return sqrt(x * x + y * y);\n  }\n\n  friend let Dist(Point a, Point b) {\n    return (a - b).dist();\n  }\n\n  Point Rotate(Point k) {\n    let z = k.dist();\n    return Rotate(k.y / z, k.x / z);\n  }\n\n  Point Rotate(let sink, let cosk) {\n    return (Point) {\n      x * cosk - y * sink, x * sink + y * cosk\n    };\n  }\n};\n\ntypedef Point Vec;\n\nstruct Segment {\n  Point s, e;\n  Vec v;\n  Segment() {}\n  Segment(Point a, Point b) {\n    s = a, e = b;\n    v = b - a;\n  }\n  Segment(Point a, Point b, Vec c) {\n    s = a, e = b, v = c;\n  }\n\n  Segment operator - (Vec k) {\n    return (Segment) {\n      s - k, e - k, v\n    };\n  }\n\n  Segment Rotate(Vec k) {\n    let z = k.dist();\n    return Rotate(k.y / z, k.x / z);\n  }\n\n  Segment Rotate(let sink, let cosk) {\n    return (Segment) {\n      s.Rotate(sink, cosk), e.Rotate(sink, cosk), v.Rotate(sink, cosk)\n    };\n  }\n\n  friend let Dist(Segment a, Point b) {\n    let ar = a.v.dist();\n    Point c = (b - a.s).Rotate(~a.v);\n    if (sign(c.x) >= 0 && sign(c.x - ar) <= 0) return fabs(c.y);\n    return min(c.dist(), Dist(c, (Point) {ar, 0}));\n  }\n\n  friend bool Intersection(Segment a, Segment b) {\n    let ar = a.v.dist();\n    Segment c = (b - a.s).Rotate(~a.v);\n\n    int tcs = sign(Times(c.s, (Point) {ar, 0})),\n        tce = sign(Times(c.e, (Point) {ar, 0}));\n\n    if (tcs == 0 && tce == 0) {\n      if (sign(max(c.s.x, c.e.x)) < 0 ||\n          sign(min(c.s.x, c.e.x) - ar) > 0) return false;\n      return true;\n    }\n\n    if (tcs == tce) return false;\n\n    Point i = c.e - c.v * (c.e.y / c.v.y);\n    if (sign(i.x) < 0 || sign(i.x - ar) > 0) return false;\n    return true;\n  }\n\n  friend let Dist(Segment a, Segment b) {\n    if (Intersection(a, b)) return 0;\n\n    Point ar = (Point) {a.v.dist(), 0};\n    Segment c = (b - a.s).Rotate(~a.v);\n\n    let res = min(Dist(b, a.s), Dist(b, a.e));\n    if (sign(c.s.x) >= 0 && sign(c.s.x - ar.x) <= 0)\n      res = min(res, fabs(c.s.y));\n    if (sign(c.e.x) >= 0 && sign(c.e.x - ar.x) <= 0)\n      res = min(res, fabs(c.e.y));\n    return res;\n  }\n};\n\nPoint ReadPoint() {\n  Point t;\n  scanf(\"%Lf%Lf\", &t.x, &t.y);\n  return t;\n}\n\nint main() {\n// #ifndef ONLINE_JUDGE\n//   freopen(\"CGL_2_D.in\", \"r\", stdin);\n//   freopen(\"CGL_2_D.out\", \"w\", stdout);\n// #endif\n// #ifdef LOCAL_LOGGER\n//   freopen(\"CGL_2_D.log\", \"w\", stderr);\n// #endif\n  int q = read();\n  while (q--) {\n    Point p0 = ReadPoint(), p1 = ReadPoint(), p2 = ReadPoint(), p3 = ReadPoint();\n    Segment s1 = (Segment) {p0, p1}, s2 = (Segment) {p2, p3};\n    printf(\"%.8Lf\\n\", Dist(s1, s2));\n  }\n  return 0;\n}\n\n/* ==== Makefile ==== {{{\nCompileAndRun:\n\tmake Compile\n\tmake Run\n\nCompile:\n\tg++ -o CGL_2_D CGL_2_D.cpp -g -Wall -DLOCAL_LOGGER\n\nCompileUF:\n\tg++ -o CGL_2_D CGL_2_D.cpp -g -Wall -DLOCAL_LOGGER -fsanitize=undefined\n\nRun:\n\t./CGL_2_D < CGL_2_D.in > CGL_2_D.out\n==================\n}}} */\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<iomanip>\n#include<cmath>\nusing namespace std;\n\nstruct Point{\n    double x;\n    double y;\n    Point (double x, double y) : x(x), y(y){}\n    Point operator-(Point p){\n        return Point(x - p.x, y - p.y);\n    }\n};\ntypedef Point Vector;\ndouble dot(Vector v1, Vector v2){\n    return v1.x * v2.x + v1.y * v2.y;\n}\ndouble abs_(Vector v){\n    return sqrt(dot(v, v));\n}\ndouble cross(Vector v1, Vector v2){\n    return v1.x * v2.y - v1.y * v2.x;\n}\nstruct Segment{\n    Point p1;\n    Point p2;\n    Segment(Point p1, Point p2) : p1(p1), p2(p2){}\n};\nbool is_intersect(Segment s1, Segment s2){\n    double s1_x_min = s1.p1.x;\n    double s1_x_max = s1.p2.x;\n    if (s1_x_min > s1_x_max) swap(s1_x_min, s1_x_max);\n    double s2_x_min = s2.p1.x;\n    double s2_x_max = s2.p2.x;\n    if (s2_x_min > s2_x_max) swap(s2_x_min, s2_x_max);\n    if (s2_x_max < s1_x_min) return false;\n    if (s2_x_min > s1_x_max) return false;\n    double s1_y_min = s1.p1.y;\n    double s1_y_max = s1.p2.y;\n    if (s1_y_min > s1_y_max) swap(s1_y_min, s1_y_max);\n    double s2_y_min = s2.p1.y;\n    double s2_y_max = s2.p2.y;\n    if (s2_y_min > s2_y_max) swap(s2_y_min, s2_y_max);\n    if (s2_y_max < s1_y_min) return false;\n    if (s2_y_min > s1_y_max) return false;\n    return true;\n}\ndouble get_distanceSP(Segment s, Point p){\n// cout << \"(\" << s.p1.x << \",\" << s.p1.y << \")\";\n// cout << \"(\" << s.p2.x << \",\" << s.p2.y << \")   :    \";\n// cout << \"(\" << p.x << \",\" << p.y << \")\" << endl;\n    Vector a1 = s.p2 - s.p1;\n    Vector b1 = p    - s.p1;\n    if (dot(a1, b1) <= 0) return abs_(b1);\n    Vector a2 = s.p1 - s.p2;\n    Vector b2 = p    - s.p2;\n    if (dot(a2, b2) <= 0) return abs_(b2);\n    return cross(a1, b1) / abs_(a1);\n}\ndouble get_distanceSS(Segment s1, Segment s2){\n    if (is_intersect(s1, s2)) return 0;\n    // cout << get_distanceSP(s1, s2.p1) << endl;\n    // cout << get_distanceSP(s1, s2.p2) << \" \";\n    // cout << get_distanceSP(s2, s1.p1) << \" \";\n    // cout << get_distanceSP(s2, s1.p2) << endl;\n    return min(min(get_distanceSP(s1, s2.p1), get_distanceSP(s1, s2.p2)),\n               min(get_distanceSP(s2, s1.p1), get_distanceSP(s2, s1.p2)));\n}\nint main(){\n    int q;\n    cin >> q;\n    for (int i = 0; i < q; i++) {\n        int x_p0, y_p0, x_p1, y_p1, x_p2, y_p2, x_p3, y_p3;\n        cin >> x_p0 >> y_p0 >> x_p1 >> y_p1;\n        cin >> x_p2 >> y_p2 >> x_p3 >> y_p3;\n        Segment s1(Point(x_p0, y_p0), Point(x_p1, y_p1));\n        Segment s2(Point(x_p2, y_p2), Point(x_p3, y_p3));\n        double distance = get_distanceSS(s1, s2);\n        cout << fixed << setprecision(10);\n        cout << distance << endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <cmath>\n#include <algorithm>\nusing namespace std;\n\ndouble dis(double x1, double y1, double x2, double y2) {\n\treturn sqrt(pow(x1 - x2, 2) + pow(y1 - y2, 2));\n}\n\ndouble ldis(double x1, double y1, double x2, double y2, double x3, double y3) {\n\t\n\tif ((x1 - x2) * (x3 - x2) + (y1 - y2) * (y3 - y2) > 0 &&\n\t\t(x1 - x3) * (x2 - x3) + (y1 - y3) * (y2 - y3) > 0)\n\t\treturn ((y3 - y1) * (x2 - x1) - (x3 - x1) * (y2 - y1)) / dis(x2, y2, x3, y3);\n\telse\n\t\treturn min(dis(x1, y1, x2, y2), dis(x1, y1, x3, y3));\n}\n\nint main()\n{\n\tint q = 0;\n\n\tcin >> q;\n\n\tfor (int i = 0; i < q; i++) {\n\t\tdouble p0x = 0, p0y = 0, p1x = 0, p1y = 0, p2x = 0, p2y = 0, p3x = 0, p3y = 0,\n\t\t\t   u = 0, s = 0, t = 0, d = 0;\n\n\t\tcin >> p0x >> p0y >> p1x >> p1y >> p2x >> p2y >> p3x >> p3y;\n\n\t\tu = (p3y - p0y) * (p2x - p0x) - (p3x - p0x) * (p2y - p0y);\n\t\td = min({ ldis(p0x, p0y, p2x, p2y, p3x, p3y), ldis(p1x, p1y, p2x, p2y, p3x, p3y),\n\t\t\tldis(p2x, p2y, p0x, p0y, p1x, p1y), ldis(p3x, p3y, p0x, p0y, p1x, p1y)});\n\n\t\tif (u != 0) {\n\t\t\ts = ((p3y - p0y) * (p1x - p0x) - (p3x - p0x) * (p1y - p0y)) / u;\n\t\t\tt = -((p2y - p0y) * (p1x - p0x) - (p2x - p0x) * (p1y - p0y)) / u;\n\n\t\t\tif (s >= 0 && t >= 0) {\n\t\t\t\tif (s + t >= 1)\n\t\t\t\t\td = 0;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif (p1x - p0x != 0) {\n\t\t\t\tif ((p0x - p2x) * (p0x - p3x) <= 0)\n\t\t\t\t\td = 0;\n\t\t\t\telse if (((p2x - p0x) * (p2x - p1x) <= 0) | ((p3x - p0x) * (p3x - p1x) <= 0))\n\t\t\t\t\td = 0;\n\t\t\t}\n\t\t\telse\n\t\t\t\tif ((p0y - p2y) * (p0y - p3y) <= 0)\n\t\t\t\t\td = 0;\n\t\t\t\telse if (((p2y - p0y) * (p2y - p1y) <= 0) | ((p3y - p0y) * (p3y - p1y) <= 0))\n\t\t\t\t\td = 0;\n\t\t}\n\n\t\tcout << setiosflags(ios::showpoint|ios::fixed) << setprecision(10)\n\t\t\t << d << endl;\n\t}\n\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "// #include {{{\n#include <iostream>\n#include <cassert>\n#include <cstring>\n#include <cstdlib>\n#include <cstdio>\n#include <cctype>\n#include <cmath>\n#include <ctime>\n#include <queue>\n#include <set>\n#include <map>\n#include <stack>\n#include <string>\n#include <bitset>\n#include <vector>\n#include <complex>\n#include <algorithm>\nusing namespace std;\n// }}}\n// #define {{{\ntypedef long long ll;\ntypedef double db;\ntypedef pair<int,int> pii;\ntypedef vector<int> vi;\n#define de(x) cout << #x << \"=\" << x << endl\n#define rep(i,a,b) for(int i=a;i<(b);++i)\n#define per(i,a,b) for(int i=(b)-1;i>=(a);--i)\n#define all(x) (x).begin(),(x).end()\n#define sz(x) (int)(x).size()\n#define mp make_pair\n#define pb push_back\n#define fi first\n#define se second\n// }}}\n\ntypedef db T;\nconst db eps = 1e-8;\nint sgn(T x){return (x>eps)-(x<-eps);}\nstruct P{\n    T x,y;\n    P(){} P(T x,T y):x(x),y(y){}\n    void read(){scanf(\"%lf%lf\",&x,&y);}\n    P operator - (const P&b) const {return P(x-b.x,y-b.y);}\n    P operator + (const P&b) const {return P(x+b.x,y+b.y);}\n    T operator * (const P&b) const {return x*b.x+y*b.y;}\n    P operator * (const T&k) const {return P(x*k,y*k);}\n    P operator / (const T&k) const {return P(x/k,y/k);}\n    T operator ^ (const P&b) const {return x*b.y-y*b.x;}\n    bool operator < (const P&b) const {return sgn(x-b.x)?x<b.x:y<b.y;}\n    bool operator == (const P&b) const{return !sgn(x-b.x)&&!sgn(y-b.y);}\n    P rot90() {return P(-y,x);}\n};\ndb abs(P x){return sqrt(x*x);}\nstruct L{\n    P s,t;\n    void read(){s.read();t.read();}\n};\nbool onPS(P p,L a){\n    return sgn((p-a.s)^(p-a.t))==0&&sgn((p-a.s)*(p-a.t))<=0;\n}\ndb disPL(P p,L a){return fabs((a.t-a.s)^(p-a.s)) / abs(a.t-a.s);}\ndb disPS(P p,L a){\n    if(sgn((a.t-a.s)*(p-a.s)) == -1) return abs(p-a.s);\n    if(sgn((a.s-a.t)*(p-a.t)) == -1) return abs(p-a.t);\n    return disPL(p,a);\n}\nbool isSS(L a,L b){ // seg x seg , replace x->y to accelerate\n    T c1=(a.t-a.s)^(b.s-a.s),c2=(a.t-a.s)^(b.t-a.s);\n    T c3=(b.t-b.s)^(a.s-b.s),c4=(b.t-b.s)^(a.t-b.s);\n    return sgn(c1) * sgn(c2) <= 0 && sgn(c3) * sgn(c4) <= 0 &&\n        sgn(max(a.s.x,a.t.x) - min(b.s.x,b.t.x)) >= 0 &&\n        sgn(max(b.s.x,b.t.x) - min(a.s.x,a.t.x)) >= 0 &&\n        sgn(max(a.s.y,a.t.y) - min(b.s.y,b.t.y)) >= 0 &&\n        sgn(max(b.s.y,b.t.y) - min(a.s.y,a.t.y)) >= 0;\n}\ndb disSS(L a,L b){\n    if(isSS(a,b)) return 0;\n    return min(min(disPS(a.s,b),disPS(a.t,b)),min(disPS(b.s,a),disPS(b.t,a)));\n}\n\nint main(){\n    int n;scanf(\"%d\",&n);\n    rep(i,0,n){\n        L a,b;a.read();b.read();\n        printf(\"%.10f\\n\",disSS(a,b));\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\ntypedef long long lint;\ntypedef pair<int,int> P;\nconst int    INF=(int)1e9;\nconst int    MOD=(int)1e9+7;\nconst double EPS=(double)1e-10;\nconst int    dx[]={-1,0,0,1};\nconst int    dy[]={0,-1,1,0};\nstruct Accelerate_Cin{\n    Accelerate_Cin(){\n        cin.tie(0);ios::sync_with_stdio(0);cout<<fixed<<setprecision(20);\n    };\n};\n\n//幾何学テンプレート\n\n#define equals(a,b) (fabs((a)-(b))<EPS)\n\n//点\nclass Point{\npublic:\n  double x,y;\n\n  Point(double x = 0,double y = 0):x(x), y(y){};\n\n  Point operator + (Point p) {return Point (x+p.x, y+p.y);}\n  Point operator - (Point p) {return Point (x-p.x, y-p.y);}\n  Point operator * (double a) {return Point(a*x, a*y);}\n  Point operator / (double a) {return Point(x/a,y/a);}\n\n  double abs(){return sqrt(norm());}\n  double norm(){return x*x+y*y;}\n\n  bool operator < (const Point &p)const{\n    return x!=p.x ? x<p.x:y<p.y;\n  }\n  bool operator > (const Point &p)const{\n    return x!=p.x ? x>p.x:y>p.y;\n  }\n  bool operator == (const Point &p)const{\n    return fabs(x-p.x)<EPS && fabs(y-p.y)<EPS;\n  }\n};\n\n//ベクトル\ntypedef Point Vector;\n\n//内積\ndouble dot(Vector a,Vector b){\n  return a.x*b.x+a.y*b.y;\n}\n\n//外積\ndouble cross(Vector a,Vector b){\n  return a.x*b.y-a.y*b.x;\n}\n\n//線分\nstruct Segment{Point p1,p2;};\n\n//直線\ntypedef Segment Line;\n\n//円\nclass Circle{\npublic:\n  Point c;   //中心\n  double r;  //半径\n  Circle(Point c=Point(),double r=0.0):c(c),r(r){}\n};\n\n//多角形\ntypedef vector<Point> Polygon;\n\n//距離を求める。\n\n\n//3点の位置関係を調べる。\nstatic const int COUNTER_CLOCKWISE=1;\nstatic const int CLOCKWISE=-1;\nstatic const int ONLINE_BACK=2;\nstatic const int ONLINE_FRONT=-2;\nstatic const int ON_SEGMENT=0;\n\nint ccw(Point p0,Point p1,Point p2){\n  Vector a=p1-p0;\n  Vector b=p2-p0;\n  if(cross(a,b)>EPS)   return COUNTER_CLOCKWISE;\n  if(cross(a,b)<-EPS)  return CLOCKWISE;\n  if(dot(a,b)<-EPS)    return ONLINE_BACK;\n  if(a.norm()<b.norm())return ONLINE_FRONT;\n\n  return ON_SEGMENT;\n}\n\n//二つの線分の交差判定をする。\nbool intersect(Point p1,Point p2,Point p3,Point p4){\n  return (ccw(p1,p2,p3)*ccw(p1,p2,p4)<=0&&\n          ccw(p3,p4,p1)*ccw(p3,p4,p2)<=0);\n}\n\nbool intersect(Segment s1,Segment s2){\n  return intersect(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n\n//点と点の距離\ndouble getDistance(Point a, Point b){\n  return (a-b).abs();\n}\n\n//点と直線の距離\ndouble getDistanceLP(Line l, Point p){\n  return abs(cross(l.p2-l.p1,p-l.p1)/(l.p2-l.p1).abs());\n}\n\n//点と線分の距離\ndouble getDistanceSP(Segment s,Point p){\n  if(dot(s.p2-s.p1,p-s.p1)<0.0) return (p-s.p1).abs();\n  if(dot(s.p1-s.p2,p-s.p2)<0.0) return (p-s.p2).abs();\n  return getDistanceLP(s,p);\n}\n\n//線分と線分の距離\ndouble getDistance(Segment s1,Segment s2){\n  if(intersect(s1,s2)) return 0.0;\n  return min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),\n             min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n}\n\n\nsigned main(){\n  int q;cin>>q;\n  for(int i=0;i<q;i++){\n    double x0,y0,x1,y1,x2,y2,x3,y3;cin>>x0>>y0>>x1>>y1>>x2>>y2>>x3>>y3;\n    Segment s1={Point{x0,y0},Point{x1,y1}},s2={Point{x2,y2},Point{x3,y3}};\n    cout<<fixed<<setprecision(15)<<getDistance(s1,s2)<<endl;\n  }\n\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < (EPS))\n\n#define COUNTER_CLOCKWISE (1)\n#define CLOCKWISE (-1)\n#define ONLINE_BACK (2)\n#define ONLINE_FRONT (-2)\n#define ON_SEGMENT (0)\n\nstruct Point \n{\n  double x, y;\n  \n  Point() {}\n  \n  Point(double x, double y) : x(x), y(y) {}\n  \n  void input() { scanf(\"%lf %lf\", &x, &y); }\n  void output() { printf(\"%.10f %.10f\\n\", x, y); }\n  double abs() { return (sqrt(norm())); }\n  double norm() { return (x * x + y * y); }\n  \n  Point operator + (Point d) { return (Point(x + d.x, y + d.y)); }\n  Point operator - (Point d) { return (Point(x - d.x, y - d.y)); }\n  Point operator - () { return (Point(-x, -y)); }\n  Point operator * (double a) { return (Point(x * a, y * a)); }\n  Point operator / (double a) { return (Point(x / a, y / a)); }\n  \n};\n\nstruct Segment\n{\n  Point p1, p2;\n  \n  Segment() {}\n  Segment(Point p1, Point p2) : p1(p1), p2(p2) {}\n\n  void input() { p1.input(); p2.input(); }\n  \n};\n\ntypedef Point Vector;\ntypedef vector < Point > Polygon;\ntypedef Segment Line;\n\ndouble dot(Vector a, Vector b)\n{\n  return (a.x * b.x + a.y * b.y);\n}\n\ndouble cross(Vector a, Vector b)\n{\n  return (a.x * b.y - a.y * b.x);\n}\n\nPoint project(Line l, Point p)\n{\n  Vector base = l.p2 - l.p1;\n  return (l.p1 + base * (dot(p - l.p1, base) / base.norm()));\n}\n\nPoint reflect(Line l, Point p)\n{\n  return (-p + project(l, p) * 2.0);\n}\n\n\nint ccw(Point p0, Point p1, Point p2)\n{\n  Vector a = p1 - p0, b = p2 - p0;\n  \n  if(cross(a, b) > EPS) return (COUNTER_CLOCKWISE);\n  if(cross(a, b) < -EPS) return (CLOCKWISE);\n  if(dot(a, b) < -EPS) return (ONLINE_BACK);\n  if(a.norm() < b.norm()) return (ONLINE_FRONT);\n  \n  return (ON_SEGMENT);\n}\n\nbool intersect(Point p1, Point p2, Point p3, Point p4)\n{\n  return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 && ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\n\nbool intersect(Segment s1, Segment s2)\n{\n  return (intersect(s1.p1, s1.p2, s2.p1, s2.p2));\n}\n\ndouble getDistanceLP(Line l, Point p)\n{\n  return (abs(cross(l.p2 - l.p1, p - l.p1) / (l.p2 - l.p1).abs()));\n}\n\ndouble getDistanceSP(Segment s, Point p)\n{\n  if(dot(s.p2 - s.p1, p - s.p1) < 0.0) return ((p - s.p1).abs());\n  if(dot(s.p1 - s.p2, p - s.p2) < 0.0) return ((p - s.p2).abs());\n  return (getDistanceLP(s, p));\n}\n\ndouble getDistance(Segment s1, Segment s2)\n{\n  if(intersect(s1, s2)) return (0.0);\n  return (min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\n\nmain()\n{\n  int n;\n  \n  cin >> n;\n  for(int i = 0; i < n; i++) {\n    Segment s1, s2;\n    s1.input(); s2.input();\n    printf(\"%.10f\\n\", getDistance(s1, s2));\n  }\n\n  return (0);\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nstruct point{\n\tdouble x,y;\n\tpoint(){;}\n\tpoint(double x,double y):x(x),y(y){;}\n\tpoint operator -(point p){\n\t\treturn point(x-p.x,y-p.y);\n\t}\n};\n// 判断p3在p1p2的?? \ndouble direction(point p1, point p2, point p3) {\n\treturn (p2.x - p1.x)*(p3.y - p2.y) - (p3.x - p2.x)*(p2.y - p1.y);\n}\nbool isjiao(point p1,point p2,point p3,point p4){\n\t// ?条?段的?个端点在?一条?断的?端\n\tdouble a,b,c,d;\n\ta=direction(p1,p2,p3);\n\tb=direction(p1,p2,p4);\n\tc=direction(p3,p4,p1);\n\td=direction(p3,p4,p2);\n\tif(!(a+b<max(a,b)&&c+d<max(c,d)))return false;\n\treturn true; \n}\ndouble waiji(point p1,point p2){\n\treturn p1.x*p2.y-p1.y*p2.x;\n}\n// 点与?段距?：三?情况\t\t\ndouble dis(point p,point p1,point p2){\n\tpoint v1,v2,v;\n\tv1=p2-p1;\n\tv2=p1-p2;\n\tv=p-p1;\n\tif(waiji(v,v1)<0)\n\t\treturn sqrt((p.x-p1.x)*(p.x-p1.x)+(p.y-p1.y)*(p.y-p1.y));\n\tv=p-p2;\n\tif(waiji(v,v2)<0)\n\t\treturn sqrt((p.x-p2.x)*(p.x-p2.x)+(p.y-p2.y)*(p.y-p2.y));\n\t// 点到?段的垂直距?\n\treturn waiji(v,v2)/sqrt(v2.x*v2.x+v2.y*v2.y); \n}\npoint p1,p2,p3,p4;\ndouble solve(){\n// 相交、或?段1的端点到?段二距?或?段2的端点到?段1距?\t\t\n\tif(isjiao(p1,p2,p3,p4))return 0;\n\tdouble res=min(dis(p1,p3,p4),dis(p2,p3,p4));\n\tres=min(res,dis(p3,p1,p2));\n\tres=min(res,dis(p4,p1,p2));\n\treturn res;\n}\nint main(){\n//\tfreopen(\"a.txt\",\"r\",stdin);\n\tint T;\n\tcin>>T;\n\twhile(T--){\n\t\tcin>>p1.x>>p1.y;\n\t\tcin>>p2.x>>p2.y;\n\t\tcin>>p3.x>>p3.y;\n\t\tcin>>p4.x>>p4.y;\n\t\tprintf(\"%.10f\\n\",solve()); \n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <algorithm>\n#include <vector>\n#include <string>\n#include <map>\n#include <set>\n#include <cassert>\nusing namespace std;\n#define rep(i,a,n) for (int i=a;i<n;i++)\n#define per(i,a,n) for (int i=n-1;i>=a;i--)\n#define pb push_back\n#define mp make_pair\n#define all(x) (x).begin(),(x).end()\n#define fi first\n#define se second\n#define SZ(x) ((int)(x).size())\ntypedef vector<int> VI;\ntypedef long long ll;\ntypedef pair<int,int> PII;\nconst ll mod=1000000007;\nll powmod(ll a,ll b) {ll res=1;a%=mod; assert(b>=0); for(;b;b>>=1){if(b&1)res=res*a%mod;a=a*a%mod;}return res;}\n// head\n\ntypedef double db;\ndb eps=1e-9;\nstruct point {\n\tdb x,y;\n\tpoint() {}\n\tpoint(db x,db y):x(x),y(y) {}\n\tvoid read() { scanf(\"%lf%lf\",&x,&y); }\n\tvoid print() { printf(\"%.10f %.10f\\n\",x,y); }\n\tdb len() { return sqrt(x*x+y*y); }\n\tdb len2() { return x*x+y*y; }\n};\npoint operator + (const point &a,const point &b) { return point(a.x+b.x,a.y+b.y);}\npoint operator - (const point &a,const point &b) { return point(a.x-b.x,a.y-b.y);}\npoint operator * (const point &a,const db &b) { return point(a.x*b,a.y*b);}\npoint operator / (const point &a,const db &b) { return point(a.x/b,a.y/b);}\ndb dot(const point &a,const point &b) { return a.x*b.x+a.y*b.y; }\ndb det(const point &a,const point &b) { return a.x*b.y-a.y*b.x; }\nstruct line {\n\tpoint a,b;\n\tline() {}\n\tline(point a,point b):a(a),b(b) {}\n};\npoint proj(const line &a,const point &b) {\n\treturn a.a+(a.b-a.a)*dot(a.b-a.a,b-a.a)/(a.b-a.a).len2();\n}\npoint reflect(const line &a,const point &b) {\n\treturn proj(a,b)*2-b;\n}\nint sign(db x) {\n\treturn fabs(x)<eps?0:(x>0?1:-1);\n}\nint relation(const line &a,const point &b) {\n\tint x=sign(det(a.b-a.a,b-a.a));\n\tif (x==1) return 0; // COUNTER_CLOCKWISE ?????¶???\n\telse if (x==-1) return 1; // CLOCKWISE ?????¶???\n\telse {\n\t\tx=sign(dot(b-a.a,a.b-a.a));\n\t\tif (x==-1) return 2; // ONLINE_BACK\n\t\telse {\n\t\t\tx=sign(dot(b-a.b,a.b-a.a));\n\t\t\tif (x==1) return 3; // ONLINE_FRONT\n\t\t\telse return 4; // ON_SEGMENT\n\t\t}\n\t}\n}\nbool parallel(const line &a,const line &b) { return sign(det(a.a-a.b,b.a-b.b))==0;}\nbool ismiddle(const line &a,const point &b) {\n\treturn sign(dot(b-a.a,a.b-a.a))>=0&&sign(dot(b-a.b,a.b-a.a))<=0;\n}\nint crossSS(const line &a,const line &b) {\n\tif (sign(min(b.a.x,b.b.x)-max(a.a.x,a.b.x))==1) return 0;\n\tif (sign(max(b.a.x,b.b.x)-min(a.a.x,a.b.x))==-1) return 0;\n\tif (sign(min(b.a.y,b.b.y)-max(a.a.y,a.b.y))==1) return 0;\n\tif (sign(max(b.a.y,b.b.y)-min(a.a.y,a.b.y))==-1) return 0;\n\tint d1=sign(det(a.b-a.a,b.a-a.a))*sign(det(a.b-a.a,b.b-a.a));\n\tint d2=sign(det(b.b-b.a,a.a-b.a))*sign(det(b.b-b.a,a.b-b.a));\n\tif (d1==-1&&d2==-1) return 2; // ?§??????????\n\telse if (d1<=0&&d2<=0) return 1; // ????§??????????\n\telse return 0; // ?????????\n}\npoint crosspoint(const line &a,const line &b) {\n\tdouble a1=det(b.b-b.a,a.a-b.a),a2=det(b.b-b.a,a.b-b.a);\n\treturn a.a*(a2/(a2-a1))-a.b*(a1/(a2-a1));\n}\ndouble distSP(const line &a,const point &b) {\n\tpoint h=proj(a,b);\n\tif (ismiddle(a,h)) return (b-h).len();\n\telse return min((b-a.a).len(),(b-a.b).len());\n}\ndouble distSS(const line &a,const line &b) {\n\tif (crossSS(a,b)>=1) return 0;\n\telse return min(min(distSP(b,a.a),distSP(b,a.b)),min(distSP(a,b.a),distSP(a,b.b)));\n}\n\nint q;\nint main() {\n\tscanf(\"%d\",&q);\n\trep(i,0,q) {\n\t\tpoint p1,p2,q1,q2;\n\t\tp1.read(); p2.read(); q1.read(); q2.read();\n\t\tprintf(\"%.10f\\n\",distSS(line(p1,p2),line(q1,q2)));\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<sstream>\n#include<algorithm>\n#include<climits>\n#include<cmath>\n#include<cstdio>\n#include<cstdlib>\n#include<ctime>\n#include<cfloat>\n#include<functional>\n#include<map>\n#include<string>\n#include<cstring>\n#include<vector>\n#include<queue>\n#include<stack>\n#include<deque>\n#include<set>\n#include<bitset>\n#include<list>\n#include<numeric>\n#include<complex>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int, int> i_i;\ntypedef pair<long long, int> ll_i;\ntypedef pair<double, int> d_i;\ntypedef pair<long long, long long> ll_ll;\ntypedef pair<double, double> d_d;\n\n#define PI 3.141592653589793238462643383279\n#define mod 1000000007LL\n#define rep(i, n) for(i = 0;i < n;++i)\n#define rep1(i, n) for(i = 1;i < n;++i)\n#define rep2d(i, j, n) for(i = 0;i < n;++i)for(j = i + 1;j < n;++j)\n#define per(i, n) for(i = n - 1;i > -1;--i)\n#define int(x) int x; scanf(\"%d\",&x)\n#define int2(x, y) int x, y; scanf(\"%d%d\",&x, &y)\n#define int3(x, y, z) int x, y, z; scanf(\"%d%d%d\",&x, &y, &z)\n#define scn(n, a) rep(i, n)cin >> a[i]\n#define sc2n(n, a, b) rep(i, n)cin >> a[i] >> b[i]\n#define pri(x) cout << x << \"\\n\"\n#define pri2(x, y) cout << x << \" \" << y << \"\\n\"\n#define pri3(x, y, z) cout << x << \" \" << y << \" \" << z << \"\\n\"\n#define pb push_back\n#define mp make_pair\n#define all(a) (a).begin(),(a).end()\n#define endl \"\\n\"\n#define kabe puts(\"---------------------------\")\n#define kara puts(\"\")\n#define debug(x) cout << \" --- \" << x << \"\\n\"\n#define debug2(x, y) cout << \" --- \" << x << \" \" << y << \"\\n\"\n#define debug3(x, y, z) cout << \" --- \" << x << \" \" << y << \" \" << z << \"\\n\"\n#define X first\n#define Y second\n#define eps 0.00000000001\n#define prid(x) printf(\"%.15lf\\n\", x)\n\nstruct vec{\n  double x, y;\n  vec operator+(const vec& a) const { return (vec){x + a.x, y + a.y}; }\n  vec operator-(const vec& a) const { return (vec){x - a.x, y - a.y}; }\n  vec sca(double t){ return (vec){t * x, t * y}; }\n  double dot(vec a){ return x * a.x + y * a.y; }\n  double cross(vec a){ return x * a.y - y * a.x; }\n  double norm(){ return sqrt(x * x + y * y); }\n  double norm2(){ return x * x + y * y; }\n  double ppdist(vec p){ return sqrt( (p.x - x) * (p.x - x) + (p.y - y) * (p.y - y) ); }\n  double ppdist2(vec p){ return (p.x - x) * (p.x - x) + (p.y - y) * (p.y - y); }\n};\nstruct line{\n  vec a, b;\n  vec getvec(){ return b - a; }\n  vec proj(vec p){\n    vec pa = p - a, ba = b - a;\n    double t = pa.dot(ba) / ba.dot(ba);\n    return a + ba.sca(t);\n  }\n  vec vref(vec p){ return proj(p).sca(2.0) - p; }\n  int ccw(vec p){\n    vec q = p - a, ba = b - a;\n    if(ba.cross(q) > 0)return 1; //ccw\n    if(ba.cross(q) < 0)return -1; //cw\n    if(ba.dot(q) < 0)return -2; //back\n    if(ba.dot(ba) < q.dot(q))return 2; //front\n    return 0; //on\n  }\n  bool paral(line l){\n    double res = abs(l.getvec().cross(getvec()));\n    return res < eps;\n  }\n  bool orth(line l){\n    double res = abs(l.getvec().dot(getvec()));\n    return res < eps;\n  }\n  bool intersec(line l){\n    bool res0 = (ccw(l.a) * ccw(l.b) == 4); //syukutai\n    bool res1 = (getvec().cross(l.a - a) * getvec().cross(l.b - a)) <= eps;\n    bool res2 = (l.getvec().cross(a - l.a) * l.getvec().cross(b - l.a)) <= eps;\n    return !res0 && res1 && res2;\n  }\n  vec crosspoint(line l){\n    double t = (l.a - a).cross(l.getvec()) / getvec().cross(l.getvec());\n    return a + getvec().sca(t);\n  }\n  double pldist(vec p){\n    double res = min((a - p).norm2(), (b - p).norm2());\n    vec h = proj(p);\n    if((a - h).dot(b - h) < 0)res = min(res, (h - p).norm2());\n    return sqrt(res);\n  }\n  double lldist(line l){\n    if(intersec(l))return 0.0;\n    double res = min(min(pldist(l.a), pldist(l.b)), min(l.pldist(a), l.pldist(b)));\n    return res;\n  }\n};\n\nsigned main(void){\n  int i, j, k;\n  int(q);\n  for(;q--;){\n    line l, m;\n    cin >> l.a.x >> l.a.y >> l.b.x >> l.b.y >> m.a.x >> m.a.y >> m.b.x >> m.b.y;\n    printf(\"%.15lf\\n\", l.lldist(m));\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ndouble EPS = 0.00000001;\nint sign(double x){\n\tif (x > EPS){\n\t\treturn 1;\n\t} else if (x < -EPS){\n\t\treturn -1;\n\t} else {\n\t\treturn 0;\n\t}\n}\nbool equals(double x, double y){\n\treturn abs(x - y) < EPS;\n}\nstruct point{\n\tdouble x;\n\tdouble y;\n\tpoint(){\n\t\tx = 0;\n\t\ty = 0;\n\t}\n\tpoint(double X, double Y){\n\t\tx = X;\n\t\ty = Y;\n\t}\n\tpoint operator +(){\n\t\treturn point(x, y);\n\t}\n\tpoint operator -(){\n\t\treturn point(-x, -y);\n\t}\n\tpoint operator +(point P){\n\t\treturn point(x + P.x, y + P.y);\n\t}\n\tpoint operator -(point P){\n\t\treturn point(x - P.x, y - P.y);\n\t}\n\tpoint& operator +=(point P){\n\t\tx += P.x;\n\t\ty += P.y;\n\t\treturn *this;\n\t}\n\tpoint& operator -=(point P){\n\t\tx -= P.x;\n\t\ty -= P.y;\n\t\treturn *this;\n\t}\n\tpoint operator *(double k){\n\t\treturn point(x * k, y * k);\n\t}\n\tpoint operator /(double k){\n\t\treturn point(x / k, y / k);\n\t}\n\tpoint& operator *=(double k){\n\t\tx *= k;\n\t\ty *= k;\n\t\treturn *this;\n\t}\n\tpoint& operator /=(double k){\n\t\tx /= k;\n\t\ty /= k;\n\t\treturn *this;\n\t}\n\tbool operator ==(point P){\n\t\treturn equals(x, P.x) && equals(y, P.y);\n\t}\n\tbool operator !=(point P){\n\t\treturn !(*this == P);\n\t}\n\tbool operator <(point P){\n\t\treturn sign(P.x - x) == 1 || equals(x, P.x) && sign(P.y - y) == 1;\n\t}\n\tbool operator >(point P){\n\t\treturn (P < *this);\n\t}\n\tpoint& rotate(double t){\n\t    double X = x * cos(t) - y * sin(t);\n\t    double Y = x * sin(t) + y * cos(t);\n\t    x = X;\n\t    y = Y;\n\t    return *this;\n\t}\n\tpoint& rotate(point P, double t){\n\t    *this -= P;\n\t    (*this).rotate(t);\n\t    *this += P;\n\t    return *this;\n\t}\n\tpoint& rotate90(){\n\t    swap(x, y);\n\t    x = -x;\n\t    return *this;\n\t}\n};\nistream& operator >>(istream &is, point &p){\n\tdouble x, y;\n\tis >> x >> y;\n\tp = point(x, y);\n\treturn is;\n}\nostream& operator <<(ostream &os, point p){\n\tos << p.x << ' ' << p.y;\n\treturn os;\n}\ndouble norm(point P){\n\treturn P.x * P.x + P.y * P.y;\n}\ndouble abs(point P){\n\treturn sqrt(norm(P)); \n}\ndouble dot(point P, point Q){\n\treturn P.x * Q.x + P.y * Q.y;\n}\ndouble cross(point P, point Q){\n  return P.x * Q.y - P.y * Q.x;\n}\ndouble dist(point P, point Q){\n\treturn abs(P - Q);\n}\nint ccw(point P, point Q, point R){\n\tQ -= P;\n\tR -= P;\n\tif (sign(cross(Q, R)) == 1){\n\t\treturn 1;\n\t} else if (sign(cross(Q, R)) == -1){\n\t\treturn -1;\n\t} else if (sign(dot(Q, R)) == -1){\n\t\treturn -2;\n\t} else if (sign(abs(R) - abs(Q)) == 1){\n\t\treturn 2;\n\t} else {\n\t\treturn 0;\n\t}\n}\nstruct line{\n\tpoint A;\n\tpoint B;\n\tline(){\n\t}\n\tline(point P){\n\t  B = P;\n\t}\n\tline(point P, point Q){\n\t\tA = P;\n\t\tB = Q;\n\t}\n\tline(double a, double b){\n\t\tA = point(0, b);\n\t\tB = point(1, a + b);\n\t}\n\tline(double a, double b, double c){\n\t\tif (sign(b) == 0){\n\t\t\tA = point(-c / a, 0);\n\t\t\tB = point(-c / a, 1);\n\t\t} else {\n\t\t\tA = point(0, -c / a);\n\t\t\tB = point(1, -(b + c) / a);\n\t\t}\n\t}\n\tbool operator == (line L){\n\t\treturn abs(ccw(A, B, L.A)) != 1 && abs(ccw(A, B, L.B)) != 1;\n\t}\n\tbool operator !=(line L){\n\t\treturn !(*this == L);\n\t}\n\tbool operator <(line L){\n\t\treturn A < L.A || A == L.A && B < L.B;\n\t}\n\tbool operator >(line L){\n\t\treturn (L < *this);\n\t}\n};\nusing ray = line;\nusing segment = line;\nistream& operator >>(istream &is, line &L){\n\tpoint A, B;\n\tis >> A >> B;\n\tL = line(A, B);\n\treturn is;\n}\nostream& operator <<(ostream &os, line L){\n\tos << L.A << ' ' << L.B;\n\treturn os;\n}\npoint vec(line L){\n\treturn L.B - L.A;\n}\nbool is_orthogonal(line a, line b){\n\treturn sign(dot(vec(a), vec(b))) == 0;\n}\nbool is_parallel(line a, line b){\n  return sign(cross(vec(a), vec(b))) == 0;\n}\nbool is_on_line(point P, line L){\n\treturn abs(ccw(L.A, L.B, P)) != 1;\n}\nbool is_on_ray(point P, ray L){\n  int x = ccw(L.A, L.B, P);\n  return x == 0 || x == 2;\n}\nbool is_on_segment(point P, segment L){\n\treturn ccw(L.A, L.B, P) == 0;\n}\nbool is_intersecting_line(line a, line b){\n\treturn !is_parallel(a, b);\n}\npair<bool, point> line_intersection(line L1, line L2){\n\tif (L1 == L2){\n\t\treturn make_pair(true, L2.A);\n\t} else if (is_parallel(L1, L2)){\n\t\treturn make_pair(false, point());\n\t} else {\n\t  point P = L1.A + vec(L1) * cross(vec(L2), L2.A - L1.A) / cross(vec(L2), vec(L1));\n\t\treturn make_pair(true, P);\n\t}\n}\npair<bool, point> line_segment_intersection(line L, segment S){\n\tauto P = line_intersection(L, S);\n\tif (P.first && is_on_segment(P.second, S)){\n\t\treturn make_pair(true, P.second);\n\t} else {\n\t\treturn make_pair(false, point());\n\t}\n}\npair<bool, point> segment_intersection(segment S1, segment S2){\n\tif (S1 == S2){\n\t\tif (is_on_segment(S2.A, S1)){\n\t\t\treturn make_pair(true, S2.A);\n\t\t} else if (is_on_segment(S2.B, S1)){\n\t\t\treturn make_pair(true, S2.B);\n\t\t} else if (is_on_segment(S1.A, S2)){\n\t\t\treturn make_pair(true, S1.A);\n\t\t} else {\n\t\t\treturn make_pair(false, point());\n\t\t}\n\t}\n\tpair<bool, point> P = line_intersection(S1, S2);\n\tif (!P.first){\n\t\treturn P;\n\t} else if (is_on_segment(P.second, S1) && is_on_segment(P.second, S2)){\n\t\treturn P;\n\t} else {\n\t\treturn make_pair(false, point());\n\t}\n}\ndouble angle(point A, point B, point C){\n\tA -= B;\n\tC -= B;\n\treturn acos(dot(A, C) / (abs(A) * abs(C)));\n}\nint angle_type(point A, point B, point C){\n\treturn sign(dot(A - B, C - B));\n}\ndouble point_line_distance(point P, line L){\n\treturn abs(cross(P - L.A, vec(L))) / abs(vec(L));\n}\ndouble point_segment_distance(point P, segment S){\n\tif (angle_type(P, S.A, S.B) == -1){\n\t\treturn dist(P, S.A);\n\t} else if (angle_type(P, S.B, S.A) == -1){\n\t\treturn dist(P, S.B);\n\t} else {\n\t\treturn point_line_distance(P, S);\n\t}\n}\ndouble line_segment_distance(line L, segment S){\n\tif (line_segment_intersection(L, S).first){\n\t\treturn 0;\n\t} else {\n\t\treturn min(point_line_distance(S.A, L), point_line_distance(S.B, L));\n\t}\n}\ndouble segment_distance(segment S1, segment S2){\n\tif (segment_intersection(S1, S2).first){\n\t\treturn 0;\n\t} else {\n\t\tdouble ans1 = min(point_segment_distance(S1.A, S2), point_segment_distance(S1.B, S2));\n\t\tdouble ans2 = min(point_segment_distance(S2.A, S1), point_segment_distance(S2.B, S1));\n\t\treturn min(ans1, ans2);\n\t}\n}\nint main(){\n  cout << fixed << setprecision(20);\n  int q;\n  cin >> q;\n  for (int i = 0; i < q; i++){\n    segment s1, s2;\n    cin >> s1 >> s2;\n    cout << segment_distance(s1, s2) << endl;\n  }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define REP(i,n) for (long long i=0;i<(n);i++)\n#define FOR(i,a,b) for (long long i=(a);i<(b);i++)\n#define RREP(i,n) for(long long i=n;i>=0;i--)\n#define RFOR(i,a,b) for(long long i=(a);i>(b);i--)\n#define dump1d_arr(array) REP(i,array.size()) cerr << #array << \"[\" << (i) << \"] ==> \" << (array[i]) << endl;\n#define dump2d_arr(array) REP(i,array.size()) REP(j,array[i].size()) cerr << #array << \"[\" << (i) << \"]\" << \"[\" << (j) << \"] ==> \" << (array[i][j]) << endl;\n#define dump(x)  cerr << #x << \" => \" << (x) << endl;\n#define dumpP(p) cerr << \"( \" << p.first << \" , \" << p.second << \" )\" << ends;\n#define CLR(vec) { REP(i,vec.size()) vec[i] = 0; } \n#define SORT(c) sort((c).begin(),(c).end())\n#define MIN(vec) *min_element(vec.begin(), vec.end());\n#define MAX(vec) *max_element(vec.begin(), vec.end());\n#define UNIQ(vec) vec.erase(unique(vec.begin(), vec.end()),vec.end());\n#define IN(n,m)  (!(m.find(n) == m.end()))\n#define ENUM(m) for (auto itr = m.begin(); itr != m.end(); ++itr)\n#define dump_MAP(m) for(auto itr = m.begin(); itr != m.end(); ++itr) { cerr << itr->first << \" --> \"  << itr->second << endl; }\n#define FINDL(vec,x) (lower_bound(vec.begin(),vec.end(),x) - vec.begin())\n#define FINDU(vec,x) (upper_bound(vec.begin(),vec.end(),x) - vec.begin())\n#define ROUND(N) setprecision(N)\nusing namespace std;\nconstexpr double eps = 1e-10;\nconstexpr long mod = 1000000007;\nconstexpr short shINF = 32767;\nconstexpr long loINF = 2147483647;\nconstexpr long long llINF = 9223372036854775807;\ntypedef long long LL;\ntypedef vector<LL> VI;\ntypedef vector<VI> VVI;\ntypedef vector<string> VS;\ntypedef pair<LL,LL> pr;\ntypedef vector<pr> VP;\nstruct Order {\n  bool operator() (pr const& a,pr const& b) const {\n    return a.first > b.first || ((a.first == b.first) && (a.second > b.second));\n  }\n};\ntypedef struct _PT {\n  long double x, y;\n  _PT() {}\n  _PT(long double x,long double y) : x(x), y(y) {} \n  _PT operator + (_PT p){\n     return _PT(x + p.x, y + p.y);\n  }\n  _PT operator - (_PT p){\n     return _PT(x - p.x, y - p.y);\n  }\n  _PT operator * (long double d){\n     return _PT(d*x, d*y);\n  }\n  bool operator <(const struct _PT &e) const{\n     return x == e.x? (y < e.y) : x < e.x;\n  }\n  bool operator >(const struct _PT &e) const{\n     return x == e.x? (y > e.y) : x > e.x;\n  }\n\n  // --オプジェクトは位置ベクトル--\n\n  long double dist(_PT p){ //点pとの距離\n     return sqrt((x-p.x)*(x-p.x) + (y-p.y)*(y-p.y));\n  }\n\n  // --オブジェクトは幾何ベクトル--\n  \n  long double dot(_PT v){ //ベクトルvとの内積\n     return x * v.x + y * v.y;\n  }\n  \n  long double det(_PT v){ // ベクトルvとの外積\n     return x * v.y - v.x * y;\n  }\n\n  long double norm(void){ // ベクトルのノルム\n    return sqrt(x*x + y*y);\n  }\n\n  long double twiceNorm(void){ // ノルムの2乗\n    return x*x + y*y;\n  }\n\n  bool is_parallel(_PT v) { //ベクトルvと平行か(外積 = 0か)\n    return (abs(x * v.y - v.x * y) < eps);\n  }\n}P;\n\n\nclass Plane{\nprivate:\n  static bool cmp_x(const P &p1,const P &p2){\n      if (p1.x != p2.x) return p1.x < p2.x;\n      return p1.y < p2.y;\n  }\npublic:\n  P intersection(P p1,P p2,P q1,P q2) { // 直線p1-p2と直線q1-q2の交点\n    return p1 + (p2 - p1) * ((q2 - q1).det(q1 - p1) / (q2 - q1).det(p2 - p1));\n  }\n\n  bool on_seq(P p1,P p2,P q) { // 線分p1-p2上に点qがあるか\n    return (abs((p1 - q).det(p2 - q)) < eps) && ((p1 - q).dot(p2 - q) < (eps));\n  }\n\n  bool have_intersection(P p1,P p2,P q1,P q2) { // 線分p1-p2と線分q1-q2がが交点を持つか\n    if (abs((p1-p2).det(q1-q2)) > eps) {\n      P r = intersection(p1,p2,q1,q2);\n      return (on_seq(p1,p2,r) && on_seq(q1,q2,r));\n    }\n    else return (on_seq(p1,p2,q1) || on_seq(p1,p2,q2) || on_seq(q1,q2,p1) || on_seq(q1,q2,p2));\n  }\n\n  P projection(P v1,P v2) { // v1へのv2の正射影ベクトル\n    return (v1)*((v1).dot(v2) / v1.twiceNorm());\n  }\n\n  long double disPointToLineSeg(P p1,P p2,P q) { //線分p1-p2と点qの距離\n    if ((p1 - p2).dot(q - p2) < eps) return q.dist(p2);\n    if ((p2 - p1).dot(q - p1) < eps) return q.dist(p1);\n    else return (p1 + projection(p2-p1,q-p1)).dist(q);\n  }\n\n  long double disLineSeg(P p1,P p2,P q1,P q2) { //線分p1-p2と線分q1-q2の距離\n    if (have_intersection(p1,p2,q1,q2)) return 0.0;\n    else return min({disPointToLineSeg(p1,p2,q1),disPointToLineSeg(p1,p2,q2),disPointToLineSeg(q1,q2,p1),disPointToLineSeg(q1,q2,p2)});\n  }\n\n  vector<P> convexHull(vector<P> &point){\n      LL n = point.size();\n      vector<P> qs(n*2);\n      sort(point.begin(),point.end(),cmp_x);\n      long k = 0;\n\n      REP(i,n){ //下側凸包の作成\n        while(k > 1 && (qs[k-1] - qs[k-2]).det(point[i] - qs[k-1]) <= 0) k--;\n        qs[k++] = point[i];\n      }\n\n      for(long i = n - 2, t = k; i >= 0; i--){ //上側凸包の作成\n        while(k > t && (qs[k-1] - qs[k-2]).det(point[i] - qs[k-1]) <= 0) k--;\n        qs[k++] = point[i];\n      }\n      qs.resize(k-1);\n      return qs;\n  }\n\n  long double getArea(vector<P> &point){\n      long double s = 0;\n      LL n = point.size();\n      REP(i,n-1) s += point[i].det(point[i+1]);\n      s += point[n-1].det(point[0]);\n      return abs(s) * 0.5;\n  }\n\n  long double getAngle(P v1,P v2){ //2ベクトルのなす角を出す。\n    return acos(v1.dot(v2)/sqrt(v1.twiceNorm() * v2.twiceNorm()));\n  }\n\n};\n\nint main(void) {\n  Plane pl;\n  int N;\n  cin >> N;\n  P p1,p2,p3,p4;\n  REP(i,N) {\n      cin >> p1.x >> p1.y >> p2.x >> p2.y >> p3.x >> p3.y >> p4.x >> p4.y;\n      cout << ROUND(15) << pl.disLineSeg(p1,p2,p3,p4) << endl;\n  }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <vector>\n#include <algorithm>\n#include <iostream>\n#include <cstdio>\n#include <cmath>\n#include <climits>\n\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\n//???\nclass Point {\npublic:\n    double x, y;\n    \n    Point (double x = 0, double y = 0):x(x), y(y){}\n    Point operator + (Point p){return Point(x + p.x, y + p.y);}\n    Point operator - (Point p){return Point(x - p.x, y - p.y);}\n    Point operator * (double a){return Point(a * x, a * y);}\n    Point operator / (double a){return Point(x / a, y / a);}\n    \n    double norm(){return x*x + y*y;};\n    double absolute(){return sqrt(norm());};\n    \n    bool operator < (const Point &p) const{\n        return x != p.x ? x < p.x : y < p.y;\n    }\n    \n    bool operator == (const Point &p) const{\n        return equals(x, p.x) && equals(y, p.y);\n    }\n    \n};\ntypedef Point Vector;                               //????????????\ntypedef struct Segment{Point p1, p2;}Segment;       //??????\ntypedef Segment Line;                               //??´???\n\n//????????????a,b?????????\ndouble dot(Vector a, Vector b){\n    return a.x * b.x + a.y * b.y;\n}\n//????????????a,b?????????\ndouble cross(Vector a, Vector b){\n    return a.x * b.y - a.y * b.x;\n}\n//??´???s??¨???p????????¢\ndouble getDistanceLP(Line l, Point p){\n    return abs(cross(l.p2 - l.p1, p - l.p1) / absolute(l.p2 - l.p1));\n}\n\n//??????s(p1p2)??¨???p????????¢d????±???????\n//??\\???????????????????????§??´?????????\n//??????????????????p2-p1??¨???????????????p-p1??????????§???????90???????????§????????´???????????????-90?????????????°?????????´?????????d??????p??¨???p1??¨????????¢\n//??????????????????p1-p2??¨???????????????p-p2??????????§???????90???????????§????????´???????????????-90?????????????°?????????´?????????d??????p??¨???p2??¨????????¢\n//??????????????\\???????????????????????´??????d??????p??¨??´???p1p2????????¢\ndouble getDistanceSP(Segment s, Point p){\n    if (dot(s.p2 - s.p1, p - s.p1) < 0.0) return absolute(p - s.p1);\n    if (dot(s.p1 - s.p2, p - s.p2) < 0.0) return absolute(p - s.p2);\n    return getDistanceLP(s, p);\n}\n\n\n//??????p0, p1, p2???????????????????????????p0p1???????????????p2??????????????????\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\nint ccw(Point p0, Point p1, Point p2){\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if(cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n    if(cross(a, b) < -EPS) return CLOCKWISE;\n    if(dot(a, b) < -EPS) return ONLINE_BACK;\n    if(norm(a) < norm(b)) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\n//??????S1(p1p2)??¨??????s2(p2p3)????????????????????????\nbool intersect(Point p1, Point p2, Point p3, Point p4){\n    return  ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0\n            &&\n            ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0;\n}\nbool intersect(Segment s1, Segment s2){\n    return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\n//??????s1??¨??????s2????????¢\n//??\\????????????????????¢????????§????????????????????????\n//????????????s1??¨??????s2????§????s2.p1????????¢\n//????????????s1??¨??????s2?????????s2.p2????????¢\n//????????????s2??¨??????s1????§????s1.p1????????¢\n//????????????s2??¨??????s1?????????s1.p2????????¢\ndouble getDistance(Segment s1, Segment s2){\n    if ( intersect(s1, s2) ) return 0.0;\n    return min(\n               min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n               min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2))\n               );\n}\n\nint main(){\n    \n    int x0, y0, x1, y1, x2, y2, x3, y3;\n    \n    int q;\n    \n    cin >> q;\n    \n    for (int i = 0; i < q; i++) {\n        cin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n        \n        Point p0 = Point(x0, y0);\n        Point p1 = Point(x1, y1);\n        Point p2 = Point(x2, y2);\n        Point p3 = Point(x3, y3);\n        \n        Segment s1 = {p0, p1};\n        Segment s2 = {p2, p3};\n        \n        double ans = getDistance(s1, s2);\n        \n        printf(\"%.8lf\\n\", ans);\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\n\n#define rep(i, n) REP(i, 0, n)\n#define REP(i, s, e) for(int i = (int)s; i < (int)(e); ++i)\n\n#define X real()\n#define Y imag()\n#define x(p) real(p)\n#define y(p) imag(p)\n#define curr(P, i) P[i]\n#define next(P, i) P[(i+1)%P.size()]\n#define prev(P, i) P[(i-1+P.size())%P.size()]\n\nconst double EPS = 1e-8;\nconst double INF = 1e12;\nconst double PI = acos(-1);\n\ntypedef double D;\ntypedef complex<D> P;\nnamespace std{\n  bool operator < (const P& a, const P& b) {\n    return x(a) != x(b) ? x(a) < x(b) : y(a) < y(b);\n  }\n}\n\nD dot(const P& a, const P& b) {\n  return x(conj(a)*b);\n}\nD cross(const P& a, const P& b) {\n  return y(conj(a)*b);\n}\n\nstruct L : public vector<P> {\n  L(const P&a, const P& b) {\n    push_back(a);\n    push_back(b);\n  }\n};\n\ntypedef vector<P> G;\n\nstruct C {\n  P p; D r;\n};\n\nint ccw(P a, P b, P c) {\n  b -= a; c -= a;\n  if(cross(b, c) > 0) return +1; //ccw\n  if(cross(b, c) < 0) return -1; //cw\n  if(dot(b, c) < 0)   return +2; //c-a-b on line\n  if(norm(b) < norm(c)) return -2; //a-b-c on line\n  return 0;\n}\n\nP projection(const L& l, const P& p) {\n  D t = dot(p - l[0], l[0] - l[1]) / norm(l[0]- l[1]);\n  return l[0] + t * (l[0] - l[1]);\n}\nP refrection(const L& l, const P& p) {\n  return p + 2.0 * (projection(l, p) - p);\n}\n\nbool intersectSP(const L& l, const P& p) {\n  return abs(l[0]-p) + abs(l[1]-p) - abs(l[1] - l[0]) < EPS;\n}\n\nbool intersectSS(const L& a, const L& b) {\n  return ccw(a[0], a[1], b[0]) * ccw(a[0], a[1], b[1]) <= 0\n    && ccw(b[0], b[1], a[0]) * ccw(b[0], b[1], a[1]) <= 0;\n}\nP crossP(const L& a, const L& b) {\n  D x = cross(a[1]-a[0], b[1]-b[0]);\n  D y = cross(a[1]-a[0], a[1]-b[0]);\n  if(abs(x) < EPS && abs(y) < EPS) return a[0];\n  return b[0] + y / x * (b[1]-b[0]);\n}\nD distSP(const L& l, const P& p) {\n  const P r = projection(l, p);\n  if(intersectSP(l, r)) return abs(r - p);\n  return min(abs(l[0]-p), abs(l[1]-p));\n}\nD distSS(const L& a, const L& b) {\n  if(intersectSS(a, b)) return 0;\n  return min({distSP(a, b[0]), distSP(a, b[1]), distSP(b, a[0]), distSP(b, a[1])});\n}\n\nint main() {\n  int n;\n  cin >> n;\n  while(n--) {\n    vector<P> ps(4);\n    rep(i, 4) {\n      D x, y;\n      cin >> x >> y;\n      ps[i] = {x, y};\n    }\n    vector<L> ls;\n    rep(i, 2) ls.push_back({ps[2*i], ps[2*i+1]});\n    cout << fixed << setprecision(20);\n    cout << distSS(ls[0], ls[1]) << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <array>\n#include <vector>\n#include <cmath>\n\nconst double EPSILON = 1e-10;\n\ninline bool equals(double a, double b) {\n    return std::fabs(a - b) < EPSILON;\n}\n\nstruct Point {\n    double x;\n    double y;\n\n    bool operator < (const Point& p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point& p) const {\n        return equals(x, p.x) && equals(y, p.y);\n    }\n};\n\nPoint operator + (const Point& p1, const Point& p2) {\n    return Point{p1.x + p2.x, p1.y + p2.y};\n}\n\nPoint operator - (const Point& p1, const Point& p2) {\n    return Point{p1.x - p2.x, p1.y - p2.y};\n}\n\nPoint operator * (const Point& p1, double k) {\n    return Point{p1.x * k, p1.y * k};\n}\n\nstruct Segment {\n    Point p1, p2;\n};\n\nstruct Circle {\n    Point center;\n    double radius;\n};\n\nusing Vector = Point;\nusing Line = Segment;\nusing Polygon = std::vector<Point>;\n\n\ndouble norm(const Vector& p) {\n    return p.x * p.x + p.y * p.y;\n}\n\ndouble abs(const Vector& p) {\n    return std::sqrt(norm(p));\n}\n\ndouble dot(const Vector& a, const Vector& b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(const Vector& a, const Vector& b) {\n    return a.x * b.y - a.y * b.x;\n}\n\n\nVector projection(const Segment& s, const Point& p) {\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / norm(base);\n    return s.p1 + base * r;\n}\n\nVector reflection(const Segment& s, const Point& p) {\n    return p + (projection(s, p) - p) * 2.0;\n}\n\nbool is_orthogonal(const Vector& a, const Vector& b) {\n    return equals(dot(a, b), 0.0);\n}\n\nbool is_orthogonal(const Segment& s1, const Segment& s2) {\n    return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nbool is_parallel(const Vector& a, const Vector& b) {\n    return equals(cross(a, b), 0.0);\n}\n\nbool is_parallel(const Segment& s1, const Segment& s2) {\n    return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nenum {\n    COUNTER_CLOCKWISE = 1,\n    CLOCKWISE = -1,\n    ONLINE_BACK = 2,\n    ONLINE_FRONT = -2,\n    ON_SEGMENT = 0,\n};\n\nint ccw(const Point& p0, const Point& p1, const Point& p2) {\n    auto a = p1 - p0;\n    auto b = p2 - p0;\n    if (cross(a, b) > EPSILON) return COUNTER_CLOCKWISE;\n    if (cross(a, b) < -EPSILON) return CLOCKWISE;\n    if (dot(a, b) < -EPSILON) return ONLINE_BACK;\n    if (norm(a) < norm(b)) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\nbool intersect(const Point& p1, const Point& p2, const Point& p3, const Point& p4) {\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n            ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\n\nbool intersect(const Segment& s1, const Segment& s2) {\n    return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\ndouble distance(const Point& a, const Point& b) {\n    return abs(a - b);\n}\n\ndouble distanceLP(const Line& l, const Point& p) {\n    return fabs(cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1));\n}\n\ndouble distanceSP(const Segment& s, const Point& p) {\n    if (dot(s.p2 - s.p1, p - s.p1) < 0.0) return abs(p - s.p1);\n    if (dot(s.p1 - s.p2, p - s.p2) < 0.0) return abs(p - s.p2);\n    return distanceLP(s, p);\n}\n\ndouble distance(const Segment& s1, const Segment& s2) {\n    using std::min;\n    if (intersect(s1, s2)) return 0.0;\n    return fmin(fmin(distanceSP(s1, s2.p1), distanceSP(s1, s2.p2)),\n                fmin(distanceSP(s2, s1.p1), distanceSP(s2, s1.p2)));\n}\n\n\nint main() {\n    using namespace std;\n\n    int q;\n    cin >> q;\n    for (int i = 0; i < q; ++i) {\n        array<Point, 4> points;\n        for (auto& p : points) {\n            cin >> p.x >> p.y;\n        }\n        Segment s1{points[0], points[1]};\n        Segment s2{points[2], points[3]};\n        cout << fixed << setprecision(10) << distance(s1, s2) << endl;\n    }\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "// #include {{{\n#include <iostream>\n#include <cassert>\n#include <cstring>\n#include <cstdlib>\n#include <cstdio>\n#include <cctype>\n#include <cmath>\n#include <ctime>\n#include <queue>\n#include <set>\n#include <map>\n#include <stack>\n#include <string>\n#include <bitset>\n#include <vector>\n#include <complex>\n#include <algorithm>\nusing namespace std;\n// }}}\n// #define {{{\ntypedef long long ll;\ntypedef double db;\ntypedef pair<int,int> pii;\ntypedef vector<int> vi;\n#define de(x) cout << #x << \"=\" << x << endl\n#define rep(i,a,b) for(int i=a;i<(b);++i)\n#define per(i,a,b) for(int i=(b)-1;i>=(a);--i)\n#define all(x) (x).begin(),(x).end()\n#define sz(x) (int)(x).size()\n#define mp make_pair\n#define pb push_back\n#define fi first\n#define se second\n// }}}\n\ntypedef db T;\nconst db eps = 1e-8;\nint sgn(T x){return (x>eps)-(x<-eps);}\nstruct P{\n    T x,y;\n    P(){} P(T x,T y):x(x),y(y){}\n    void read(){scanf(\"%lf%lf\",&x,&y);}\n    P operator - (const P&b) const {return P(x-b.x,y-b.y);}\n    P operator + (const P&b) const {return P(x+b.x,y+b.y);}\n    T operator * (const P&b) const {return x*b.x+y*b.y;}\n    P operator * (const T&k) const {return P(x*k,y*k);}\n    T operator ^ (const P&b) const {return x*b.y-y*b.x;}\n};\nT norm(P a){return a*a;}\nP proj(P p,P a,P b){return (b-a)*((p-a)*(b-a)/norm(b-a))+a;}\nT abs(P a){return sqrt(norm(a));}\nstruct L{\n    P s,t;\n    L(){} L(P s,P t):s(s),t(t){}\n    void read(){s.read();t.read();}\n};\n\nbool isSS(L a,L b){ // seg x seg , replace x->y to accelerate\n    T c1=(a.t-a.s)^(b.s-a.s),c2=(a.t-a.s)^(b.t-a.s);\n    T c3=(b.t-b.s)^(a.s-b.s),c4=(b.t-b.s)^(a.t-b.s);\n    return sgn(c1) * sgn(c2) <= 0 && sgn(c3) * sgn(c4) <= 0 &&\n        sgn(max(a.s.x,a.t.x) - min(b.s.x,b.t.x)) >= 0 &&\n        sgn(max(b.s.x,b.t.x) - min(a.s.x,a.t.x)) >= 0 &&\n        sgn(max(a.s.y,a.t.y) - min(b.s.y,b.t.y)) >= 0 &&\n        sgn(max(b.s.y,b.t.y) - min(a.s.y,a.t.y)) >= 0;\n}\nbool inRegion(T a,T p,T b) {return sgn(a-p)==0||sgn(b-p)==0||(a<p!=b<p);}\nbool inRec(P p,L a){\n    return inRegion(a.s.x,p.x,a.t.x) && inRegion(a.s.y,p.y,a.t.y);\n}\ndb disPL(P p,L a){\n    P q=proj(p,a.s,a.t);\n    if(inRec(q,a)) return abs(p-q);\n    return min(abs(p-a.s),abs(p-a.t));\n}\ndb disSS(L a,L b){\n    if(isSS(a,b)) return 0;\n    return min(min(disPL(a.s,b),disPL(a.t,b)),min(disPL(b.s,a),disPL(b.t,a)));\n}\n\nint main(){\n    int Q;scanf(\"%d\",&Q);\n    rep(i,0,Q){\n        L a,b;a.read();b.read();\n        printf(\"%.10f\\n\",disSS(a,b));\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nusing lint = long long;\ntemplate<class T = int> using V = vector<T>;\ntemplate<class T = int> using VV = V< V<T> >;\n\nusing R = long double;\nconstexpr R pi = acos((R)-1), eps = 1e-10;\n\nint sgn(R a) { return (a > eps) - (a < -eps); }\nint sgn(R a, R b) { return sgn(a - b); }\nusing P = complex<R>;\nistream& operator>>(istream& i, P& p) { R x, y; i >> x >> y; p = P(x, y); return i; }\nostream& operator<<(ostream& o, P p) { return o << fixed << setprecision(15) << real(p) << ' ' << imag(p); }\nbool cmp(P p, P q) { return 2 * sgn(real(p), real(q)) + sgn(imag(p), imag(q)) < 0; }\nbool eql(P p, P q) { return !cmp(p, q) and !cmp(q, p); }\nR dot(P p, P q) { return real(conj(p) * q); }\nR crs(P p, P q) { return imag(conj(p) * q); }\nint ccw(P p, P q) {\n  int s = sgn(crs(p, q));\n  if (s) return s;\n  if (dot(p, q) < 0) return -2;\n  if (dot(p, q - p) > 0) return 2;\n  return 0;\n}\nint ccw(P o, P p, P q) { return ccw(p - o, q - o); }\nstruct L {\n  P s, t;\n  P vec() const { return t - s; }\n  R abs() const { return std::abs(vec()); }\n  R arg() const { return std::arg(vec()); }\n};\nint ccw(L s, P p) { return ccw(s.s, s.t, p); }\n\n// BEGIN CUT HERE\nP proj(P p, L l) {\n  P e = l.vec() / l.abs();\n  return l.s + dot(p - l.s, e) * e;\n}\nP refl(P p, L l) { return (R)2 * proj(p, l) - p; }\nR distPP(P p, P q) { return abs(q - p); }\nR distPL(P p, L l) { return distPP(p, proj(p, l)); }\nR distPS(P p, L s) {\n  P q = proj(p, s);\n  if (!ccw(s, q)) return distPP(p, q);\n  return min(distPP(p, s.s), distPP(p, s.t));\n}\nR distLL(L l, L m) {\n  if (sgn(crs(l.vec(), m.vec()))) return 0;\n  return distPL(l.s, m);\n}\nR distLS(L l, L s) {\n  if (ccw(l, s.s) * ccw(l, s.t) != 1) return 0;\n  return min(distPL(s.s, l), distPL(s.t, l));\n}\nR distSS(L s, L t) {\n  if (ccw(s, t.s) * ccw(s, t.t) <= 0 and ccw(t, s.s) * ccw(t, s.t) <= 0) return 0;\n  return min({distPS(s.s, t), distPS(s.t, t), distPS(t.s, s), distPS(t.t, s)});\n}\n// END CUT HERE\n\nint main() {\n  cin.tie(nullptr); ios::sync_with_stdio(false);\n  int q; cin >> q;\n  while (q--) {\n    L s, t; cin >> s.s >> s.t >> t.s >> t.t;\n    cout << fixed << setprecision(15) << distSS(s, t) << '\\n';\n  }\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/review.jsp?rid=3573104#1\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define db double\nusing namespace std;\nint n;\ndb xp1,xp2,xp3,xp4,yp1,yp2,yp3,yp4;\ndb sum1,sum2,xa,xb,xc,xd,ya,yb,yc,yd;\ndb len(db xp1,db yp1,db xp2,db yp2,db xp3,db yp3){\n\tdb l1=xp2-xp1,r1=yp2-yp1,l2=xp3-xp1,r2=yp3-yp1;\n\tif(l1*l2+r1*r2>=0&&abs((l1*l2+r1*r2)/sqrt(l1*l1+r1*r1))<=sqrt(l1*l1+r1*r1))return(abs((l1*r2-l2*r1)/sqrt(l1*l1+r1*r1)));\n\telse{\n\t\tdb sum1=sqrt(l2*l2+r2*r2);\n\t\tdb sum2=sqrt((xp3-xp2)*(xp3-xp2)+(yp3-yp2)*(yp3-yp2));\n\t\treturn(min(sum1,sum2));\n\t}\n} \nvoid solve(int t){\n\tdb mn=40000;\n\tmn=min(mn,len(xp1,yp1,xp2,yp2,xp3,yp3));\n\tmn=min(mn,len(xp1,yp1,xp2,yp2,xp4,yp4));\n\tmn=min(mn,len(xp3,yp3,xp4,yp4,xp1,yp1));\n\tmn=min(mn,len(xp3,yp3,xp4,yp4,xp2,yp2));\n\tprintf(\"%.10lf\\n\",mn);\n}\nint main(){\t\n\tscanf(\"%d\",&n);\n\tfor(int i=1; i<=n; i++){\n\t\tscanf(\"%lf%lf%lf%lf\",&xp1,&yp1,&xp2,&yp2);\n\t\tscanf(\"%lf%lf%lf%lf\",&xp3,&yp3,&xp4,&yp4);\n\t\txa=min(xp1,xp2);\n\t\txb=max(xp1,xp2);\n\t\tya=min(yp1,yp2);\n\t\tyb=max(yp1,yp2);\n\t\txc=min(xp3,xp4);\n\t\txd=max(xp3,xp4);\n\t\tyc=min(yp3,yp4);\n\t\tyd=max(yp3,yp4);\n\t\tif(xc>xb||xa>xd||yc>yb||ya>yd){\n\t\t\tsolve(i);\n\t\t\tcontinue;\n\t\t}\n\t\txb=xp4-xp3;\n\t\tyb=yp4-yp3;\n\t\txa=xp1-xp3;\n\t\tya=yp1-yp3;\n\t\tsum1=xa*yb-xb*ya;\n\t\txa=xp2-xp3;\n\t\tya=yp2-yp3;\n\t\tsum2=xa*yb-xb*ya;\n\t\tif(sum1*sum2>0){\n\t\t\tsolve(i);\n\t\t\tcontinue;\n\t\t}\n\t\txb=xp2-xp1;\n\t\tyb=yp2-yp1;\n\t\txa=xp3-xp1;\n\t\tya=yp3-yp1;\n\t\tsum1=xa*yb-xb*ya;\n\t\txa=xp4-xp1;\n\t\tya=yp4-yp1;\n\t\tsum2=xa*yb-xb*ya;\n\t\tif(sum1*sum2>0){\n\t\t\tsolve(i);\n\t\t\tcontinue;\n\t\t}\n\t\tprintf(\"0.0000000000\\n\");\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <string>\n#include <cstring>\n#include <deque>\n#include <list>\n#include <queue>\n#include <stack>\n#include <vector>\n#include <utility>\n#include <algorithm>\n#include <map>\n#include <set>\n#include <complex>\n#include <cmath>\n#include <limits>\n#include <climits>\n#include <ctime>\n#include <cassert>\nusing namespace std;\n\n#define rep(i,a,n) for(int i=a; i<n; i++)\n#define repr(i,a,n) for(int i=a; i>=n; i--)\n#define pb(a) push_back(a)\n#define fr first\n#define sc second\n#define INF 999999999\n\n#define X real()\n#define Y imag()\n#define EPS (1e-10)\n#define EQ(a,b) (abs((a) - (b)) < EPS)\n#define EQV(a,b) ( EQ((a).X, (b).X) && EQ((a).Y, (b).Y) )\n#define LE(n, m) ((n) < (m) + EPS)\n#define GE(n, m) ((n) + EPS > (m))\n\ntypedef vector<int> VI;\ntypedef vector<VI> MAT;\ntypedef pair<int, int> pii;\ntypedef long long int ll;\n\ntypedef complex<double> P;\ntypedef pair<P, P> L;\ntypedef pair<P, double> C;\n\nint dy[]={0, 0, 1, -1};\nint dx[]={1, -1, 0, 0};\nint const MOD = 1000000007;\n\nnamespace std {\n    bool operator<(const P a, const P b) {\n        return a.X != b.X ? a.X < b.X : a.Y < b.Y;\n    }\n}\n\n// 2???????????????????????????????±???????\ndouble dot(P a, P b) {\n    return (a.X * b.X + a.Y * b.Y);\n}\n\n// 2???????????????????????????????±???????\ndouble cross(P a, P b) {\n    return (a.X * b.Y - a.Y * b.X);\n}\n\n// ??? a1, a2 ???????????¨??????????????¨??? b ??¨????????¢\ndouble dist_sp(P a1, P a2, P b) {\n    if( dot(a2-a1, b-a1) < EPS ) return abs(b - a1);\n    if( dot(a1-a2, b-a2) < EPS ) return abs(b - a2);\n    return abs( cross(a2-a1, b-a1) ) / abs(a2 - a1);\n}\n\nint ccw(P a, P b, P c) {\n    b -= a; c -= a;\n    if( cross(b,c) > EPS ) return +1;\n    if( cross(b,c) < -EPS ) return -1;\n    if( dot(b,c) < 0 ) return +2;\n    if( norm(b) < norm(c) ) return -2;\n    return 0;\n}\n\n// ?????? a1, a2 ??¨ ?????? b1, b2 ??¨????????¢\nbool isec_ss(P a1, P a2, P b1, P b2) {\n    return ( ccw(a1,a2,b1) * ccw(a1,a2,b2) <= 0 ) &&\n           ( ccw(b1,b2,a1) * ccw(b1,b2,a2) <= 0 );\n}\n\ndouble dist_ss(P a1, P a2, P b1, P b2) {\n    if(isec_ss(a1, a2, b1, b2)) return 0;\n    return min( min(dist_sp(a1, a2, b1), dist_sp(a1, a2, b2)),\n                min(dist_sp(b1, b2, a1), dist_sp(b1, b2, a2)) );\n}\n\nint main() {\n    P a, b, c, d; \n    int q; cin >> q;\n    rep(i,0,q) {\n        cin >> a.X >> a.Y >> b.X >> b.Y >> c.X >> c.Y >> d.X >> d.Y;\n        double ans = dist_ss(a,b,c,d);\n        printf(\"%.10f\", ans);\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <cstdio>\n#include <complex>\n#include <algorithm>\nusing namespace std;\n// ------ Defines ------ //\n#define Point complex<long double>\n#define px real()\n#define py imag()\n// ------ Classes ------ //\nclass Segment {\npublic:\n\tPoint p1, p2;\n\tSegment(Point p1_, Point p2_) : p1(p1_), p2(p2_) {};\n\tSegment(long double p1x, long double p1y, long double p2x, long double p2y) : p1(Point(p1x, p1y)), p2(Point(p2x, p2y)) {};\n\tfriend bool operator==(const Segment& s1, const Segment& s2) { return (s1.p1 == s2.p1 && s1.p2 == s2.p2) || (s1.p1 == s2.p2 && s1.p2 == s2.p1); }\n\tfriend bool operator!=(const Segment& s1, const Segment& s2) { return !(s1 == s2); }\n};\nclass Line {\npublic:\n\tPoint p1, p2;\n\tLine(Point p1_, Point p2_) : p1(p1_), p2(p2_) {};\n\tLine(long double p1x, long double p1y, long double p2x, long double p2y) : p1(Point(p1x, p1y)), p2(Point(p2x, p2y)) {};\n\tfriend bool operator==(const Line& s1, const Line& s2) { return (s1.p1 == s2.p1 && s1.p2 == s2.p2) || (s1.p1 == s2.p2 && s1.p2 == s2.p1); }\n\tfriend bool operator!=(const Line& s1, const Line& s2) { return !(s1 == s2); }\n};\n// ------ Functions ------ //\nlong double dot(const Point& a, const Point& b) { return a.px * b.px + a.py * b.py; }\nlong double crs(const Point& a, const Point& b) { return a.px * b.py - a.py * b.px; }\nint ccw(Point p0, Point p1, Point p2) {\n\tPoint a = p1 - p0, b = p2 - p0;\n\tif (crs(a, b) > 1e-10) return 1;\n\tif (crs(a, b) < -1e-10) return -1;\n\tif (dot(a, b) < -1e-10) return 2;\n\tif (norm(a) < norm(b)) return -2;\n\treturn 0;\n}\nbool its(Point p1, Point p2, Point p3, Point p4) {\n\treturn (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 && ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\nbool its(Segment s1, Segment s2) {\n\treturn its(s1.p1, s1.p2, s2.p1, s2.p2);\n}\nlong double dst(const Line& a, const Point& b) {\n\treturn abs(crs(a.p2 - a.p1, b - a.p1) / abs(a.p2 - a.p1));\n}\nlong double dst(const Segment& a, const Point& b) {\n\tif (dot(a.p2 - a.p1, b - a.p1) < 0.0) return abs(b - a.p1);\n\tif (dot(a.p1 - a.p2, b - a.p2) < 0.0) return abs(b - a.p2);\n\treturn abs(crs(a.p2 - a.p1, b - a.p1) / abs(a.p2 - a.p1));\n}\nlong double dst(const Segment& a, const Segment& b) {\n\tif (its(a, b)) return 0;\n\treturn min({ dst(a, b.p1), dst(a, b.p2), dst(b, a.p1), dst(b, a.p2) });\n}\nint q, px1, py1, px2, py2, qx1, qy1, qx2, qy2;\nint main() {\n\tscanf(\"%d\", &q);\n\tfor (int i = 0; i < q; i++) {\n\t\tscanf(\"%d%d%d%d%d%d%d%d\", &px1, &py1, &px2, &py2, &qx1, &qy1, &qx2, &qy2);\n\t\tprintf(\"%.9Lf\\n\", dst(Segment(px1, py1, px2, py2), Segment(qx1, qy1, qx2, qy2)));\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\nusing namespace std;\n\n//?????????\n#pragma region MACRO \n#define putans(x)  std::cerr << \"answer: \" ; cout << (x) << endl\n#define dputans(x) std::cerr << \"answer: \"; cout << setprecision(13) << (double)(x) << endl\n#define REP(i,a,n) for(int i=(a); i<(int)(n); i++)\n#define RREP(i,a,n) for(int i=(int)(n-1); i>= a; i--)\n#define rep(i,n) REP(i,0,n)\n#define rrep(i,n) RREP(i,0,n)\n#define all(a) begin((a)),end((a))\n#define mp make_pair\n#define exist(container, n) ((container).find((n)) != (container).end())\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n#ifdef _DEBUG //???????????????????????????????????????????????????\nstd::ifstream ifs(\"data.txt\");\n#define put ifs >>\n#else //?????£????????????????????§?????????????????????\n#define put cin >>\n#endif\n#pragma endregion\n\n//???????????°??????????????´\n#pragma region CODING_SUPPORT\n#ifdef _DEBUG\n#define dbg(var0) { std::cerr << ( #var0 ) << \"=\" << ( var0 ) << endl; }\n#define dbg2(var0, var1) { std::cerr << ( #var0 ) << \"=\" << ( var0 ) << \", \"; dbg(var1); }\n#define dbg3(var0, var1, var2) { std::cerr << ( #var0 ) << \"=\" << ( var0 ) << \", \"; dbg2(var1, var2); }\n#define dbgArray(a,n) {std::cerr << (#a) << \"=\";  rep(i,n){std::cerr <<(a[i])<<\",\";} cerr<<endl;} \n#else\n#define dbg1(var0) {}\n#define dbg2(var0, var1) {}\n#define dbg3(var0, var1, var2) {}\n#define dbgArray(a,n) {}\n#endif \n#pragma endregion \n//typedef????????????????????????????¶????????????§?????????\n#pragma region TYPE_DEF\ntypedef long long ll;\ntypedef pair<int, int> pii; typedef pair<string, string> pss; typedef pair<int, string>pis;\ntypedef vector<string> vs; typedef vector<int> vi;\n#pragma endregion\n//??????????????°(???????????????????????§??????)\n#pragma region CONST_VAL\n#define PI (2*acos(0.0))\n#define EPS (1e-10)\n#define MOD (ll)(1e9 + 7)\n#define INF (ll)(1e9)\n#pragma endregion\n\n//?????????????????????\n#pragma region Geometry\nclass Point {//????????????????????????\npublic:\n\tdouble x, y;\n\tPoint(double x = 0, double y = 0) : x(x), y(y) {}\n\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a) { return Point(x * a, y * a); }\n\tdouble operator * (Point p) { return dot(p); }\n\tPoint operator / (double a) { return Point(x / a, y / a); }\n\n\tdouble abs() { return sqrt(norm()); }\n\tdouble norm() { return x*x + y*y; }\n\n\tbool operator < (const Point &p) const { return  x != p.x ? x < p.x : y < p.y; }\n\tbool operator == (const Point &p) const { return  fabs(x - p.x) < EPS && fabs(y - p.y) < EPS; }\n\t//???????????????\n\tdouble dot(Point p) { return x * p.x + y * p.y; }\n\tdouble cross(Point p) { return x * p.y - y * p.x; }\n\n\n};\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0) :c(c), r(r) {}\n};\nstruct Segment {//??????\n\tPoint p1, p2;\n};\ntypedef Point Vector;\ntypedef Segment Line;//??´???\ntypedef vector<Point> Polygon; //????§???¢?????????\n\n//?????????????¨????\ndouble v_norm(Point p) { return p.x * p.x + p.y * p.y; }\ndouble abs(Point p) { return sqrt(v_norm(p)); }\ndouble dot(Point a, Point b) { return a.x * b.x + a.y * b.y; } //??????\ndouble cross(Point a, Point b) { return a.x * b.y - a.y * b.x; }//??????\n\n//??´????????????\nbool isOrthogonal(Vector a, Vector b) { return equals(a*b, 0.0); }\nbool isParallel(Vector a, Vector b) { return equals(cross(a, b), 0.0); }\n\n//??????s???????????????p????°???±\nPoint projection(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(( p - s.p1 ), base) / v_norm(base);\n\treturn s.p1 + base*r;\n}\n//??????s???????????????p???????°?\nPoint reflection(Segment s, Point p) { return p + ( projection(s, p) - p ) * 2; }\n\n//3??????????????¢????????????\n//p1-p0???????????¨?????? p2-p0 ???2????????????????????????\nstatic const int COUNTER_CLOCKWISE = 1;//???????¨???????\nstatic const int CLOCKWISE = -1;//????¨???????\nstatic const int ONLINE_BACK = 2;//????????´?????¶p2,p0,p1??????\nstatic const int ONLINE_FRONT = -2;//????????´??????p0,p1,p2??????\nstatic const int ON_SEGMENT = 0;//p2???p0,p1??????????????´???\nint ccw(Point p0, Point p1, Point p2) {//????¨????????????¢??°\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS) return CLOCKWISE;\n\tif (dot(a, b) < -EPS) return ONLINE_BACK;\n\tif (a.norm() < b.norm()) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\n//??????p1p2??¨p3p4???????????????\nbool intersect(Point p1, Point p2, Point p3, Point p4) {return ( (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0) && (ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0));}\nbool intersect(Segment s1, Segment s2) {return intersect(s1.p1 , s1.p2, s2.p1, s2.p2);}\n\n//?????¢ Segment Line Point\ndouble getDistance(Point a, Point b) { return abs( a - b ); }\ndouble getDistanceLP(Line l, Point p) {return abs(cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1));}\ndouble getDistanceSP(Segment s, Point p) {\n\tdbg(abs(p-s.p1)); \n\tdbg(abs(p - s.p2));\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0) return abs(p - s.p1);\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0) return abs(p - s.p2);\n\treturn getDistanceLP(s, p);\n}\ndouble getDistance(Segment s1, Segment s2) {\n\tif (intersect(s1, s2)) return 0.0;\n\tdbg2(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2));\t\n\tdbg2(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2));\n\treturn min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2))\n\t         , min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\n//2???????????????\nPoint getCrossPoint(Segment s1, Segment s2) {\n\tVector base = s2.p2 - s2.p1;\n\tdouble d1 = abs(cross(base , s1.p1 - s2.p1));\n\tdouble d2 = abs(cross(base , s1.p2 - s2.p1));\n\tdouble t = d1 / ( d1 + d2 );\n\treturn s1.p1 + (s1.p2 - s1.p1 ) * t;\n}\n\n//??´?????¨????????????????????????\npair<Point, Point> getCrossPoints(Circle c, Line l) {\n\t//assert(intersect(c, i)); ?????????????????´????????????????????????\n\tVector pr = projection(l , c.c);\n\tVector e = ( l.p2 - l.p1 ) / abs(l.p2 - l.p1);\n\tdouble base = sqrt(c.r * c.r - (pr - c.c).norm());\n\treturn mp(pr + e * base, pr - e * base);\n}\n\n//????????????????????????\nstatic const int IN_POLYGON = 2;//????§???¢????????¨\nstatic const int OUT_POLYGON = 1;//????§???¢????????¨\nstatic const int ON_POLYGON = 0;//????§???¢????????????\nint contains(Polygon g, Point p) {\n\tint n = g.size();\n\tbool x = false;\n\trep(i, n) {\n\t\tPoint a = g[i] - p, b = g[( i + 1 ) % n] - p;\n\t\tif (abs(cross(a, b)) < EPS && dot(a, b) < EPS) return OUT_POLYGON;\n\t\tif (a.y > b.y) swap(a, b);\n\t\tif (a.y < EPS && EPS < b.y && cross(a, b)) x = !x;\n\t}\n\treturn ( x ? IN_POLYGON : ON_POLYGON );\n}\n\n//?????? CGL_4_A : Convex Hull; \n//containsPointOnline ?????????????????????????????????????????????\n//???????§???¢???????????§????????????????????????????????§???????????????????????????????????§???\n//???????¨???¨?????§???????????§?¨?????????????\nPolygon ConvexHull(Polygon s, bool containsPointOnline = false) {\n\tPolygon u, l;\n\tif (s.size() < 3) return s;\n\tsort(s.begin(), s.end());\n\tu.push_back(s[0]); \n\tu.push_back(s[1]);\n\tl.push_back(s[s.size() - 1]);\n\tl.push_back(s[s.size() - 2]);\n\tauto conditionContaining = [](int ccw, bool containsPointOnline)->bool{\n\t\tif (containsPointOnline) return ccw == COUNTER_CLOCKWISE;\n\t\telse return ccw != CLOCKWISE;\n\t};\n\tfor (int i = 2; i < s.size(); i++) {//?????´?????°???\n\t\tfor (int n = u.size(); ( n >= 2 ) && conditionContaining( ccw(u[n - 2], u[n - 1], s[i]),containsPointOnline); n--) {\n\t\t\tu.pop_back();\n\t\t}\n\t\tu.push_back(s[i]);\n\t}\n\tfor (int i = s.size() - 3; i >= 0; i--) {//?????´?????°???\n\t\tfor (int n = l.size(); n >= 2 && conditionContaining( ccw(l[n - 2], l[n - 1], s[i]),containsPointOnline); n--)l.pop_back();\n\t\tl.push_back(s[i]);\n\t}\n\treverse(l.begin(), l.end());\n\tfor (int i = u.size() - 2; i >= 1; i--) l.push_back(u[i]);\n\tdouble tmpMax = l[0].y;\n\tint rotIndex = 0;\n\tREP(i,1,l.size()) {//?????¶??????????????????????????????????????´??????\n\t\tif (l[i].y < tmpMax) {\n\t\t\trotIndex = i;\n\t\t\ttmpMax = l[i].y;\n\t\t}\n\t}\n\trotate(l.begin(), l.begin() + rotIndex, l.end());\n\treturn l;\n}\n#pragma endregion \n\n\n//??????????£?????????°???\n//https://www23.atwiki.jp/akitaicpc/pages/65.html\n\nint main() {\n\tint q; put q;\n\trep(i, q) {\n\t\tPoint p[4];\n\t\trep(j, 4) {\n\t\t\tput p[j].x >> p[j].y;\n\t\t}\n\t\tSegment s0, s1;\n\t\ts0.p1 = p[0];\n\t\ts0.p2 = p[1];\n\t\ts1.p1 = p[2];\n\t\ts1.p2 = p[3];\n\t\tdouble dist = getDistance(s0,s1);\n\t\tcout  << setprecision(10) << dist << endl;\n\t}\n\nEND:\n\treturn 0;\n}\n\n\t//int n; put n;\n\t//Polygon p;\n\t//rep(i, n) {\n\t//\tdouble x, y; put x >> y;\n\t//\tp.push_back(Point(x, y));\n\t//}\n\t//Polygon k = ConvexHull(p,true);\n\t//cout << k.size() << endl;\n\t//rep(i, k.size()) {\n\t//\tcout << k[i].x << \" \" << k[i].y << endl;\n\t//}\t\n\n\t/*double xp1, yp1, xp2, yp2; put xp1 >> yp1 >> xp2 >> yp2;\n\tSegment s;\n\ts.p1 = Point(xp1, yp1);\n\ts.p2 = Point(xp2, yp2);\n\n\tint n; put n;\n\trep(i, n) {\n\t\tPoint p;\n\t\tput p.x >> p.y;\n\t\tPoint prj =reflection(s, p);\n\t\tcout << setprecision(13) << prj.x << \" \" << prj.y << endl;\n\t}*/\n\n\t//ll ans = 0;\n\t//int n; put n;\n\t//vi a;\n\t//set<Range> rl;\n\t//rep(i, n) {\n\t//\tint k; put k;\n\t//\ta.push_back(k);\n\t//}\n\t//reverse(a.begin(), a.end());\n\t//int miner = a[0];\n\t//ans += miner;\n\t//REP(i,1,n) {\n\t//\tif (a[i] < miner) {\n\t//\t\tminer = a[i];\n\t//\t\tans += miner * ( i + 1 );\n\t//\t}\n\t//\telse {\n\t//\t\tans += miner *(i)+a[i];\n\t//\t}\n\t//}\n\n\t////???????????¬??????????????\\???????????????\n\t//auto getI = [&]()->auto { int tmp; put tmp; return tmp; };\n\t//auto getLL = [&]()->auto { ll tmp; put tmp; return tmp; };\n\t//auto getS = [&]()->auto { string tmp; put tmp; return tmp; };\n//\n//int n, a, b; put n >> a >> b;\n//\tvi t;\n//\trep(i, n) {\n//\t\tt.push_back(get());\n//\t}\n//\tint count = 0;\n//\trep(i, n) {\n//\t\tif (t[i] < a || b <= t[i])count++;\n//\t}\n//\tputans(count);\n\n//\n//\tset<string> list;\n//\tint ans = 0;\n//\tint n; put n;\n//\tint k; put k;\n//\tint numAlphabet[26];\n//\tfill(all(numAlphabet), 0);\n//\trep(i, n) {\n//\t\tstring s; put s;\n//\t\tif (exist(list, s))continue;\n//\t\tlist.insert(s);\n//\t\tnumAlphabet[s[0] - 'A']++;\n//\t}\n//\tsort(all(numAlphabet),greater<int>());\n//\twhile (true) {\n//\t\trep(i, k) {\n//\t\t\tif (numAlphabet[i] == 0) goto END;\n//\t\t\telse numAlphabet[i]--;\n//\t\t}\n//\t\tsort(all(numAlphabet), greater<int>());\n//\t\tans++;\n//\t}\n//END:\n//\tputans(ans);\n\n\n\t//int t; put t;\n\t//rep(i, t) {\n\t//\tint n, d; put n >> d;\n\t//\tif (n == 1) {\n\t//\t\tputans(d);\n\t//\t\tcontinue;\n\t//\t}\n\t//\tputans(n % 2 != 0 ? ( n - 1 ) * 127 + d : ( n - 1 ) * 127 + ( 127 ^ d ));\n\t//}\n\n\n//\n//int n; put n;\n//string s1, s2;\n//string r;\n//string patan1[4] = { \".\",\"#\",\".\",\"#\" };\n//string patan2[4] = { \".\",\".\",\"#\",\"#\" };\n//bool front = true;\n//rep(j, 420 / 4) {\n//\tif (front) {\n//\t\trep(i, 4) {\n//\t\t\tcout << s1 + patan1[i] + \"\\n\" << s2 + patan2[i] << endl;\n//\t\t\tcin >> r;\n//\t\t\tif (r == \"T\") {\n//\t\t\t\ts1 += patan1[i];\n//\t\t\t\ts2 += patan2[i];\n//\t\t\t\tbreak;\n//\t\t\t}\n//\t\t\tif (r == \"F\" && i == 3) {\n//\t\t\t\tfront = !front;\n//\t\t\t}\n//\t\t\tif (r == \"end\")goto END;\n//\t\t}\n//\t}\n//\telse {\n//\t\trep(i, 4) {\n//\t\t\tcout << patan1[i] + s1 + \"\\n\" << patan2[i] + s2 << endl;\n//\t\t\tcin >> r;\n//\t\t\tif (r == \"T\") {\n//\t\t\t\ts1 = patan1[i] + s1;\n//\t\t\t\ts2 = patan2[i] + s2;\n//\t\t\t\tbreak;\n//\t\t\t}\n//\t\t\tif (r == \"F\" && i == 3) {\n//\t\t\t\tfront = !front;\n//\t\t\t}\n//\t\t\tif (r == \"end\")goto END;\n//\t\t}\n//\t}\n//\n//}\n//END:\n//cout << endl;\n\n\n\n\n\t//bool filled[1000][1000];\n\t//fill(*filled, *filled + 1000 * 1000, false);\n\t//int vx[4] = { 1,0,-1,0 };\n\t//int vy[4] = { 0,1,0,-1 };\n\t//Polygon sheep;\n\t//Polygon convex_sheep;\n\t//ll num = 0;\n\t//int h, w; put h >> w;\n\t//rep(i, h) {\n\t//\tstring s; put s;\n\t//\trep(j, s.size()) {\n\t//\t\tif (s[j] == 'X') {\n\t//\t\t\tif (i == 0 || j == 0 || i == h-1 || j == w-1) {\n\t//\t\t\t\tputans(-1);\n\t//\t\t\t\tgoto END;\n\t//\t\t\t}\n\t//\t\t\trep(k, 4) {\n\t//\t\t\t\tif (!filled[i + vx[k]][j + vy[k]]) {\n\t//\t\t\t\t\tsheep.push_back(Point(i + vx[k],j + vy[k]));\n\t//\t\t\t\t\tfilled[i + vx[k]][j + vy[k]] = true;\n\t//\t\t\t\t}\n\t//\t\t\t}\n\t//\t\t}\n\t//\t}\n\t//}\n\t//convex_sheep = ConvexHull(sheep);\n\n\t//rep(i, convex_sheep.size()) {\n\t//\tPoint s = convex_sheep[i % convex_sheep.size()];\n\t//\tPoint g = convex_sheep[(i + 1) % convex_sheep.size()];\n\t//\tll mandist = max(abs(s.x - g.x),abs(s.y - g.y));\n\t//\tdbg(mandist);\n\t//\tnum += mandist;\n\t//} \n\t//putans(num);"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\n#define REP(i,n) for(int i=0,_n=(int)(n);i<_n;++i)\n#define ALL(v) (v).begin(),(v).end()\n#define CLR(t,v) memset(t,(v),sizeof(t))\ntemplate<class T1,class T2>ostream& operator<<(ostream& os,const pair<T1,T2>&a){return os<<\"(\"<<a.first<<\",\"<<a.second<< \")\";}\ntemplate<class T>void pv(T a,T b){for(T i=a;i!=b;++i)cout<<(*i)<<\" \";cout<<endl;}\ntemplate<class T>void chmin(T&a,const T&b){if(a>b)a=b;}\ntemplate<class T>void chmax(T&a,const T&b){if(a<b)a=b;}\n\n\ntypedef long double D;\nconst D PI = acos(-1.0);\nconst D EPS = 1e-10;\nclass P { public:\n  D x, y;\n  P(D x=0, D y=0) : x(x), y(y) {}\n\n  P& operator+=(const P& o) { x += o.x; y += o.y; return *this; }\n  P& operator-=(const P& o) { x -= o.x; y -= o.y; return *this; }\n  P& operator*=(const P& o) { return *this = {x*o.x - y*o.y, x*o.y + y*o.x}; }\n  P& operator*=(const D& r) { x *= r; y *= r; return *this; }\n  P& operator/=(const D& r) { x /= r; y /= r; return *this; }\n  P operator-() const { return {-x, -y}; }\n\n  D norm() const { return x*x + y*y; }\n  D abs() const { return sqrt(norm()); }\n  D arg() const { return atan2(y, x); }\n  bool isZero() const { return std::abs(x) < EPS && std::abs(y) < EPS; }\n  /** 象限 */\n  int orth() const { return y >= 0 ? (x >= 0 ? 1 : 2) : (x < 0 ? 3 : 4); }\n  static P polar(const D& rho, const D& theta = 0) { return {rho * cos(theta), rho * sin(theta)}; }\n};\nstd::ostream &operator<<(std::ostream &os, P const &p) { return os << \"(\" << p.x << \", \" << p.y << \")\"; }\nstd::istream &operator>>(std::istream &is, P &p) { D a, b; is >> a >> b; p = P(a, b); return is; }\nP operator+(const P& p, const P& q) { return P(p) += q; }\nP operator-(const P& p, const P& q) { return P(p) -= q; }\nP operator*(const P& p, const P& q) { return P(p) *= q; }\nP operator*(const P& p, const D& r) { return P(p) *= r; }\nP operator/(const P& p, const D& r) { return P(p) /= r; }\nP operator*(const D& r, const P& p) { return P(p) *= r; }\nP operator/(const D& r, const P& p) { return P(p) /= r; }\nD crs(const P& a, const P& b){ return a.x*b.y - a.y*b.x; }\nD dot(const P& a, const P& b){ return a.x*b.x + a.y*b.y; }\nint signum(D x) {return x > EPS ? +1 : x < -EPS ? -1 : 0;}\n// 辞書順ソート\nbool operator<(const P& a, const P& b) {\n  if (a.x != b.x) return a.x < b.x;\n  return a.y < b.y;\n}\n// // 偏角ソート\n// bool operator<(const P& a, const P& b) {\n//   // atan2を使う方法。誤差に注意\n//   // return a.arg() < b.arg();\n\n//   // cosを使う方法。(0,0)の扱いに注意\n//   if (a.isZero() != b.isZero()) return a.isZero() > b.isZero();\n//   if (a.orth() != b.orth()) return a.orth() < b.orth();\n//   return crs(a, b) > 0;\n// }\n/** ベクトルpをベクトルbに射影したベクトル */\nP proj(const P& p, const P& b) {\n  P t = b * dot(p, b);\n  return t / b.norm();\n}\n/** 点pから直線abに引いた垂線の足となる点 */\nP footOfLP(const P& a, const P& b, const P& p) {\n  return a + proj(p-a, b-a);\n}\n/** 直線abを挟んで点pと対称な点 */\nP reflection(const P&a, const P&b, const P& p) {\n  return 2 * footOfLP(a, b, p) - p;\n}\nint ccw(const P& a, P b, P c) {\n  // return signum(crs(b - a, c - a));\n  b -= a; c -= a;\n  if (crs(b, c) > 0)       return +1;       // counter clockwise\n  if (crs(b, c) < 0)       return -1;       // clockwise\n  if (dot(b, c) < 0)       return +2;       // c--a--b on line\n  if (b.norm() < c.norm()) return -2;       // a--b--c on line\n  return 0;\n}\n/** 2直線の直行判定 : a⊥b <=> dot(a, b) = 0 */\nbool isOrthogonal(const P& a1, const P& a2, const P& b1, const P& b2) {\n  return abs(dot(a1-a2, b1-b2)) < EPS;\n}\n/** 2直線の平行判定 : a//b <=> crs(a, b) = 0 */\nbool isParallel(const P& a1, const P& a2, const P& b1, const P& b2) {\n  return abs(crs(a1-a2, b1-b2)) < EPS;\n}\n/** 点cが線分ab上にあるか : |a-c| + |c-b| <= |a-b| なら線分上 */\nbool isIntersectSP(const P& a, const P& b, const P& c){\n  return ((a-c).abs() + (c-b).abs() < (a-b).abs() + EPS);\n}\n/** 直線aと直線bの交差判定 */\nbool isIntersectLL(const P& a, const P& b, const P& c, const P& d){\n  return abs(crs(b-a, d-c)) > EPS || // non-parallel\n         abs(crs(b-a, c-a)) < EPS;   // same line\n}\n/** 直線abと線分cdの交差判定 */\nbool isIntersectLS(const P& a, const P& b, const P& c, const P& d){\n  return crs(b-a, c-a) *      //c is left of ab\n         crs(b-a, d-a) < EPS; //d is right of ab\n}\n/** 線分と線分の交差判定。端点が重なってもtrue */\nbool isIntersectSS(const P& a1, const P& a2, const P& b1, const P& b2){\n  return ccw(a1,a2,b1) * ccw(a1,a2,b2) <= 0 &&\n         ccw(b1,b2,a1) * ccw(b1,b2,a2) <= 0;\n}\nP intersectionLL(const P& a1, const P& a2, const P& b1, const P& b2){\n  P a = a2 - a1; P b = b2 - b1;\n  return a1 + a * crs(b, b1-a1) / crs(b, a);\n}\nD distSP(const P& a, const P& b, const P& c) {\n  if (dot(b-a, c-a) < EPS) return (c-a).abs(); // c a--b\n  if (dot(a-b, c-b) < EPS) return (c-b).abs(); // a--b c\n  return abs(crs(b-a, c-a)) / (b-a).abs();\n}\nD distSS(const P& a1, const P& a2, const P& b1, const P& b2){\n  if (isIntersectSS(a1,a2,b1,b2)) return 0.0;\n  return min(min(distSP(a1, a2, b1), distSP(a1, a2, b2)),\n             min(distSP(b1, b2, a1), distSP(b1, b2, a2)));\n}\n\nint main2() {\n  int N; cin >> N;\n  P p[4];\n  REP(i, N) {\n    REP(j, 4) cin >> p[j];\n    D ans = distSS(p[0], p[1], p[2], p[3]);\n    printf(\"%.10f\\n\", (double)ans);\n  }\n  return 0;\n}\n\nint main() {\n\n#ifdef LOCAL\n  for (;!cin.eof();cin>>ws)\n#endif\n    main2();\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <array>\n#include <vector>\n#include <cmath>\n\nconst double EPSILON = 1e-10;\n\ninline bool equals(double a, double b) {\n    return std::fabs(a - b) < EPSILON;\n}\n\nstruct Point {\n    double x;\n    double y;\n\n    bool operator < (const Point& p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point& p) const {\n        return equals(x, p.x) && equals(y, p.y);\n    }\n};\n\nPoint operator + (const Point& p1, const Point& p2) {\n    return Point{p1.x + p2.x, p1.y + p2.y};\n}\n\nPoint operator - (const Point& p1, const Point& p2) {\n    return Point{p1.x - p2.x, p1.y - p2.y};\n}\n\nPoint operator * (const Point& p1, double k) {\n    return Point{p1.x * k, p1.y * k};\n}\n\nstruct Segment {\n    Point p1, p2;\n};\n\nstruct Circle {\n    Point center;\n    double radius;\n};\n\nusing Vector = Point;\nusing Line = Segment;\nusing Polygon = std::vector<Point>;\n\n\ndouble norm(const Vector& p) {\n    return p.x * p.x + p.y * p.y;\n}\n\ndouble abs(const Vector& p) {\n    return std::sqrt(norm(p));\n}\n\ndouble dot(const Vector& a, const Vector& b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(const Vector& a, const Vector& b) {\n    return a.x * b.y - a.y * b.x;\n}\n\n\nVector projection(const Segment& s, const Point& p) {\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / norm(base);\n    return s.p1 + base * r;\n}\n\nVector reflection(const Segment& s, const Point& p) {\n    return p + (projection(s, p) - p) * 2.0;\n}\n\nbool is_orthogonal(const Vector& a, const Vector& b) {\n    return equals(dot(a, b), 0.0);\n}\n\nbool is_orthogonal(const Segment& s1, const Segment& s2) {\n    return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nbool is_parallel(const Vector& a, const Vector& b) {\n    return equals(cross(a, b), 0.0);\n}\n\nbool is_parallel(const Segment& s1, const Segment& s2) {\n    return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nenum {\n    COUNTER_CLOCKWISE = 1,\n    CLOCKWISE = -1,\n    ONLINE_BACK = 2,\n    ONLINE_FRONT = -2,\n    ON_SEGMENT = 0,\n};\n\nint ccw(const Point& p0, const Point& p1, const Point& p2) {\n    auto a = p1 - p0;\n    auto b = p2 - p0;\n    if (cross(a, b) > EPSILON) return COUNTER_CLOCKWISE;\n    if (cross(a, b) < -EPSILON) return CLOCKWISE;\n    if (dot(a, b) < -EPSILON) return ONLINE_BACK;\n    if (norm(a) < norm(b)) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\nbool intersect(const Point& p1, const Point& p2, const Point& p3, const Point& p4) {\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n            ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\n\nbool intersect(const Segment& s1, const Segment& s2) {\n    return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\ndouble distance(const Point& a, const Point& b) {\n    return abs(a - b);\n}\n\ndouble distanceLP(const Line& l, const Point& p) {\n    return fabs(cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1));\n}\n\ndouble distanceSP(const Segment& s, const Point& p) {\n    if (dot(s.p2 - s.p1, p - s.p1) < 0.0) return abs(p - s.p1);\n    if (dot(s.p1 - s.p2, p - s.p2) < 0.0) return abs(p - s.p2);\n    return distanceLP(s, p);\n}\n\ndouble distance(const Segment& s1, const Segment& s2) {\n    using std::min;\n    if (intersect(s1, s2)) return 0.0;\n    return fmin(fmin(distanceSP(s1, s2.p1), distanceSP(s1, s2.p2)),\n                fmin(distanceSP(s2, s1.p1), distanceSP(s2, s1.p2)));\n}\n\n\nint main() {\n    using namespace std;\n\n    int q;\n    cin >> q;\n    for (int i = 0; i < q; ++i) {\n        array<Point, 4> points;\n        for (auto& p : points) {\n            cin >> p.x >> p.y;\n        }\n        Segment s1{points[0], points[1]};\n        Segment s2{points[2], points[3]};\n        cout << setprecision(10) << distance(s1, s2) << endl;\n    }\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> qua;\nconst double epx=1e-7;\nint ccw(qua a,qua b,qua c)\n{\n    b-=a,c-=a,a=c*conj(b);\n    if(a.imag()>epx) return 1;\n    if(a.imag()<-epx) return -1;\n    if(a.real()<-epx) return 2;\n    if(abs(b)+epx<abs(c)) return -2;\n    return 0;\n}\nint isintersect(qua a,qua b,qua c,qua d)\n{\n    return (ccw(a,b,c)*ccw(a,b,d)<=0)&&(ccw(c,d,a)*ccw(c,d,b)<=0);\n}\ndouble dot(qua a,qua b)\n{\n    return real(b*conj(a));\n}\ndouble cross(qua a,qua b)\n{\n    return imag(b*conj(a));\n}\ndouble dist(qua a,qua b,qua c)\n{\n    if(dot(b-a,c-a)<0) return abs(c-a);\n    if(dot(a-b,c-b)<0) return abs(c-b);\n    return abs(cross(b-a,c-a))/abs(b-a);\n}\ndouble dist(qua a,qua b,qua c,qua d)\n{\n    if(isintersect(a,b,c,d)) return 0;\n    double ab=min(dist(a,b,c),dist(a,b,d));\n    double cd=min(dist(c,d,a),dist(c,d,b));\n    return min(ab,cd);\n}\nint main()\n{\n    int t ;\n    double x1,x2,x3,x4,y1,y2,y3,y4;\n    for(scanf(\"%d\",&t);t;--t)\n    {\n        scanf(\"%lf%lf%lf%lf%lf%lf%lf%lf\",&x1,&y1,&x2,&y2,&x3,&y3,&x4,&y4);\n        printf(\"%.12f\\n\",dist(qua(x1,y1),qua(x2,y2),qua(x3,y3),qua(x4,y4)));\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <array>\n#include <vector>\n#include <cmath>\n\nconst double EPSILON = 1e-10;\n\ninline bool equals(double a, double b) {\n    return std::fabs(a - b) < EPSILON;\n}\n\nstruct Point {\n    double x;\n    double y;\n\n    bool operator < (const Point& p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point& p) const {\n        return equals(x, p.x) && equals(y, p.y);\n    }\n};\n\nPoint operator + (const Point& p1, const Point& p2) {\n    return Point{p1.x + p2.x, p1.y + p2.y};\n}\n\nPoint operator - (const Point& p1, const Point& p2) {\n    return Point{p1.x - p2.x, p1.y - p2.y};\n}\n\nPoint operator * (const Point& p1, double k) {\n    return Point{p1.x * k, p1.y * k};\n}\n\nstruct Segment {\n    Point p1, p2;\n};\n\nstruct Circle {\n    Point center;\n    double radius;\n};\n\nusing Vector = Point;\nusing Line = Segment;\nusing Polygon = std::vector<Point>;\n\n\ndouble norm(const Vector& p) {\n    return p.x * p.x + p.y * p.y;\n}\n\ndouble abs(const Vector& p) {\n    return std::sqrt(norm(p));\n}\n\ndouble dot(const Vector& a, const Vector& b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(const Vector& a, const Vector& b) {\n    return a.x * b.y - a.y * b.x;\n}\n\n\nVector projection(const Segment& s, const Point& p) {\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / norm(base);\n    return s.p1 + base * r;\n}\n\nVector reflection(const Segment& s, const Point& p) {\n    auto proj = projection(s, p);\n    return p + (projection(s, p) - p) * 2.0;\n}\n\nbool is_orthogonal(const Vector& a, const Vector& b) {\n    return equals(dot(a, b), 0.0);\n}\n\nbool is_orthogonal(const Segment& s1, const Segment& s2) {\n    return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nbool is_parallel(const Vector& a, const Vector& b) {\n    return equals(cross(a, b), 0.0);\n}\n\nbool is_parallel(const Segment& s1, const Segment& s2) {\n    return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nenum {\n    COUNTER_CLOCKWISE = 1,\n    CLOCKWISE = -1,\n    ONLINE_BACK = 2,\n    ONLINE_FRONT = -2,\n    ON_SEGMENT = 0,\n};\n\nint ccw(const Point& p0, const Point& p1, const Point& p2) {\n    auto a = p1 - p0;\n    auto b = p2 - p0;\n    if (cross(a, b) > EPSILON) return COUNTER_CLOCKWISE;\n    if (cross(a, b) < -EPSILON) return CLOCKWISE;\n    if (dot(a, b) < -EPSILON) return ONLINE_BACK;\n    if (norm(a) < norm(b)) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\nbool intersect(const Point& p1, const Point& p2, const Point& p3, const Point& p4) {\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n            ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\n\nbool intersect(const Segment& s1, const Segment& s2) {\n    return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\ndouble distance(const Point& a, const Point& b) {\n    return abs(a - b);\n}\n\ndouble distanceLP(const Line& l, const Point& p) {\n    return abs(cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1));\n}\n\ndouble distanceSP(const Segment& s, const Point& p) {\n    if (dot(s.p2 - s.p1, p - s.p1) < 0.0) return abs(p - s.p1);\n    if (dot(s.p1 - s.p2, p - s.p2) < 0.0) return abs(p - s.p2);\n    return distanceLP(s, p);\n}\n\ndouble distance(const Segment& s1, const Segment& s2) {\n    using std::min;\n    if (intersect(s1, s2)) return 0.0;\n    return min(min(distanceSP(s1, s2.p1), distanceSP(s1, s2.p2)),\n               min(distanceSP(s2, s1.p1), distanceSP(s2, s1.p2)));\n}\n\n\nint main() {\n    using namespace std;\n\n    int q;\n    cin >> q;\n    for (int i = 0; i < q; ++i) {\n        array<Point, 4> points;\n        for (auto& p : points) {\n            cin >> p.x >> p.y;\n        }\n        Segment s1{points[0], points[1]};\n        Segment s2{points[2], points[3]};\n        cout << setprecision(10) << distance(s1, s2) << endl;\n    }\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> P;\ndouble eps=1e-7;\nbool eq(double a,double b){return (b-a<eps&&a-b<eps);}\ndouble cross(P a,P b){return real(b*conj(a));}\ndouble dot(P a,P b){return imag(b*conj(a));}\nP project(P a,P b,P c){b-=a;c-=a;return a+b*real(c/b);}\nP reflect(P a,P b,P c){b-=a;c-=a;return a+conj(c/b)*b;}\nint ccw(P a,P b,P c){\n  b-=a,c-=a,a=c*conj(b);\n  if(a.imag()>eps)return 1;//ccw\n  if(a.imag()<-eps)return -1;//cw\n  if(a.real()<-eps)return 2;//ob\n  if(abs(b)+eps<abs(c))return -2;//of\n  return 0;//os\n}\n\n//segment ab , point c\ndouble dist(P a,P b,P c){\n  if(dot(b-a,c-a)<0)return abs(c-a);\n  if(dot(a-b,c-b)<0)return abs(c-b);\n  return abs(cross(b-a,c-a))/abs(b-a);\n}\n\nbool isintersect(P a,P b,P c,P d){\n  return ((ccw(a,b,c)*ccw(a,b,d)<=0)&&(ccw(c,d,a)*ccw(c,d,b)<=0));\n}\n\n//segment ab , segment cd\nP intersect(P a,P b,P c,P d){\n  a-=d;b-=d;c-=d;\n  return d+a+(b-a)*imag(a/c)/imag(a/c-b/c);\n}\n\ndouble dist(P a,P b,P c,P d){\n  if(isintersect(a,b,c,d))return 0;\n  double ab=min(dist(a,b,c),dist(a,b,d));\n  double cd=min(dist(c,d,a),dist(c,d,b));\n  return min(ab,cd);\n}\n\nint main(){\n  int T;\n  cin>>T;\n  while(T--){\n    double ax,ay,bx,by,cx,cy,dx,dy;\n    cin>>ax>>ay>>bx>>by>>cx>>cy>>dx>>dy;  \n    printf(\"%.12f\\n\",dist( P(ax,ay) , P(bx,by) , P(cx,cy) , P(dx,dy) ) );\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <cmath>\n#include <cstdio>\n#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nconst double EPS = 1e-9;\n\nint sign(double x) {\n    if (fabs(x) < EPS) {\n        return 0;\n    } else if (x > 0) {\n        return 1;\n    } else {\n        return -1;\n    }\n}\n\nint dcmp(double x, double y) {\n    return sign(x - y);\n}\n\ntypedef long long ll;\n\nstruct Vector;\ntypedef Vector Point;\nstruct Segment;\nstruct Line;\n\nstruct Vector {\n    double x;\n    double y;\n\n    explicit Vector(double x = 0, double y = 0);\n\n    Vector operator+(const Vector &rhs) const;\n    Vector operator-() const;\n    Vector operator-(const Vector &rhs) const;\n    Vector operator*(double d) const;\n    Vector operator/(double d) const;\n\n    bool operator==(const Vector &rhs) const;\n    bool operator!=(const Vector &rhs) const;\n    bool operator<(const Vector &rhs) const;\n    bool operator>(const Vector &rhs) const;\n    bool operator<=(const Vector &rhs) const;\n    bool operator>=(const Vector &rhs) const;\n\n    friend std::ostream &operator<<(std::ostream &os, const Vector &vector);\n\n    double dot(const Vector &rhs) const;\n    double cross(const Vector &rhs) const;\n    double length() const;\n    double angle() const;\n    double angle(const Vector &rhs) const;\n    Vector rotate(double rad) const;\n    Vector normal() const;\n    double getDistanceTo(const Point &rhs) const;\n    double getDistanceTo(const Line &rhs) const;\n    double getDistanceTo(const Segment &rhs) const;\n};\n\nstruct Line {\n    Point a;\n    Point b;\n\n    explicit Line(double x1 = 0, double y1 = 0, double x2 = 0, double y2 = 0);\n    explicit Line(const Point &a = Point(), const Point &b = Point());\n\n    double getDistanceTo(const Point &rhs) const;\n    Point getIntersection(const Line &rhs) const;\n    Point getProjection(const Point &rhs) const;\n    Point getReflection(const Point &rhs) const;\n    bool contains(const Point &rhs) const;\n    bool intersects(const Line &rhs) const;\n};\n\nstruct Segment {\n    Point a;\n    Point b;\n\n    explicit Segment(double x1 = 0, double y1 = 0, double x2 = 0, double y2 = 0);\n    explicit Segment(const Point &a = Point(), const Point &b = Point());\n\n    double length() const;\n    bool contains(const Point &rhs, bool containsEndPoints = true) const;\n    bool intersects(const Segment &rhs, bool containsEndPoints = true) const;\n    Point getIntersection(const Segment &rhs) const;\n    double getDistanceTo(const Point &rhs) const;\n    double getDistanceTo(const Segment &rhs) const;\n};\n\n\nVector::Vector(double x, double y) : x(x), y(y) {}\n\nVector Vector::operator+(const Vector &rhs) const {\n    return Vector(x + rhs.x, y + rhs.y);\n}\n\nVector Vector::operator-() const {\n    return Vector(-x, -y);\n}\n\nVector Vector::operator-(const Vector &rhs) const {\n    return *this + -rhs;\n}\n\nVector Vector::operator*(double d) const {\n    return Vector(x * d, y * d);\n}\n\nVector Vector::operator/(double d) const {\n    return Vector(x / d, y / d);\n}\n\n\nbool Vector::operator==(const Vector &rhs) const {\n    return dcmp(x, rhs.x) == 0 && dcmp(y, rhs.y) == 0;\n}\n\nbool Vector::operator!=(const Vector &rhs) const {\n    return !(rhs == *this);\n}\n\nbool Vector::operator<(const Vector &rhs) const {\n    if (dcmp(x, rhs.x) != 0) {\n        return dcmp(x, rhs.x) < 0;\n    } else {\n        return dcmp(y, rhs.y) < 0;\n    }\n}\n\nbool Vector::operator>(const Vector &rhs) const {\n    return rhs < *this;\n}\n\nbool Vector::operator<=(const Vector &rhs) const {\n    return !(rhs < *this);\n}\n\nbool Vector::operator>=(const Vector &rhs) const {\n    return !(*this < rhs);\n}\n\nstd::ostream &operator<<(std::ostream &os, const Vector &vector) {\n    os << \"(\" << vector.x << \", \" << vector.y << \")\";\n    return os;\n}\n\ndouble Vector::dot(const Vector &rhs) const {\n    return x * rhs.x + y * rhs.y;\n}\n\ndouble Vector::cross(const Vector &rhs) const {\n    return x * rhs.y - rhs.x * y;\n}\n\ndouble Vector::length() const {\n    return sqrt(dot(*this));\n}\n\ndouble Vector::angle() const {\n    return atan2(y, x);\n}\n\ndouble Vector::angle(const Vector &rhs) const {\n    return acos(dot(rhs) / length() / rhs.length());\n}\n\nVector Vector::rotate(double rad) const {\n    return Vector(x * cos(rad) - y * sin(rad), x * sin(rad) + y * cos(rad));\n}\n\nVector Vector::normal() const {\n    double l = length();\n    return Vector(-y / l, x / l);\n}\n\ndouble Vector::getDistanceTo(const Point &rhs) const {\n    return sqrt(pow(x - rhs.x, 2) + pow(y - rhs.y, 2));\n}\n\ndouble Vector::getDistanceTo(const Line &rhs) const {\n    return rhs.getDistanceTo(*this);\n}\n\ndouble Vector::getDistanceTo(const Segment &rhs) const {\n    return rhs.getDistanceTo(*this);\n}\n\nLine::Line(double x1, double y1, double x2, double y2) : a(x1, y1), b(x2, y2) {}\n\nLine::Line(const Point &a, const Point &b) : a(a), b(b) {}\n\ndouble Line::getDistanceTo(const Point &rhs) const {\n    const Vector &v1 = b - a;\n    const Vector &v2 = rhs - a;\n    return fabs(v1.cross(v2) / v1.length());\n}\n\nPoint Line::getIntersection(const Line &rhs) const {\n    if (!intersects(rhs)) {\n        return Point();\n    }\n    Vector u = a - rhs.a;\n    Vector v = b - a;\n    Vector w = rhs.b - rhs.a;\n    double t = w.cross(u) / v.cross(w);\n    return a + v * t;\n}\n\nPoint Line::getProjection(const Point &rhs) const {\n    const Vector &v = b - a;\n    return a + v * (v.dot(rhs - a) / v.dot(v));\n}\n\nPoint Line::getReflection(const Point &rhs) const {\n    return getProjection(rhs) * 2 - rhs;\n}\n\nbool Line::contains(const Point &rhs) const {\n    Point p1 = a;\n    Point p2 = b;\n    if (p1 == rhs) {\n        p1 = p1 + (p2 - p1) * 2;\n    } else if (p2 == rhs) {\n        p2 = p2 + (p1 - p2) * 2;\n    }\n    return sign((p2 - rhs).cross(p1 - rhs)) == 0;\n}\n\nbool Line::intersects(const Line &rhs) const {\n    return dcmp((b - a).angle(), (rhs.b - rhs.a).angle()) != 0;\n}\n\nSegment::Segment(double x1, double y1, double x2, double y2) : a(x1, y1), b(x2, y2) {}\n\nSegment::Segment(const Point &a, const Point &b) : a(a), b(b) {}\n\ndouble Segment::length() const {\n    return a.getDistanceTo(b);\n}\n\nbool Segment::contains(const Point &rhs, bool containsEndPoints) const {\n    const Vector &u = a - rhs;\n    const Vector &v = b - rhs;\n    return sign(u.cross(v)) == 0 && (containsEndPoints ? sign(u.dot(v)) <= 0 : sign(u.dot(v)) < 0);\n}\n\nbool Segment::intersects(const Segment &rhs, bool containsEndPoints) const {\n    const Vector &u = b - a;\n    const Vector &v = rhs.b - rhs.a;\n    double c1 = u.cross(rhs.a - a);\n    double c2 = u.cross(rhs.b - a);\n    double c3 = v.cross(a - rhs.a);\n    double c4 = v.cross(b - rhs.a);\n    if (containsEndPoints && (!sign(c1) || !sign(c2) || !sign(c3) || !sign(c4))) {\n        return contains(rhs.a) || contains(rhs.b) || rhs.contains(a) || rhs.contains(b);\n    }\n    return sign(c1) * sign(c2) < 0 && sign(c3) * sign(c4) < 0;\n}\n\nPoint Segment::getIntersection(const Segment &rhs) const {\n    // TODO get intersection with a segment\n    return Point();\n}\n\ndouble Segment::getDistanceTo(const Point &rhs) const {\n    if (a == b) {\n        return a.getDistanceTo(rhs);\n    }\n    const Vector &v1 = b - a;\n    const Vector &v2 = rhs - a;\n    const Vector &v3 = rhs - b;\n    if (sign(v1.dot(v2)) < 0) {\n        return v2.length();\n    } else if (sign(v1.dot(v3)) > 0) {\n        return v3.length();\n    } else {\n        return rhs.getDistanceTo(Line(a, b));\n    }\n}\n\ndouble Segment::getDistanceTo(const Segment &rhs) const {\n    if (intersects(rhs)) {\n        return 0;\n    } else {\n        return std::min(std::min(a.getDistanceTo(rhs), b.getDistanceTo(rhs)), std::min(rhs.a.getDistanceTo(*this), rhs.b.getDistanceTo(*this)));\n    }\n}\n\n\nint main() {\n//    freopen(\"data.in\", \"r\", stdin);\n\n    int q;\n    scanf(\"%d\", &q);\n    while (q--) {\n        int x1, y1;\n        int x2, y2;\n        scanf(\"%d%d%d%d\", &x1, &y1, &x2, &y2);\n        Segment segment1(x1, y1, x2, y2);\n        scanf(\"%d%d%d%d\", &x1, &y1, &x2, &y2);\n        Segment segment2(x1, y1, x2, y2);\n        printf(\"%.10f\\n\", segment1.getDistanceTo(segment2));\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <map>\n#include <set>\n#include <list>\n#include <cmath>\n#include <deque>\n#include <queue>\n#include <stack>\n#include <cstdio>\n#include <string>\n#include <vector>\n#include <complex>\n#include <cstdlib>\n#include <cstring>\n#include <iomanip>\n#include <numeric>\n#include <utility>\n#include <iostream>\n#include <algorithm>\n#include <functional>\n#include <unordered_map>\n#include <unordered_set>\n\nusing namespace std;\n\n#define ll long long\n#define ull unsigned long long\n#define INF (1 << 29)\n#define LLINF (1LL << 61)\n#define MOD7 1000000007\n#define MOD9 1000000009\n#define EPS 1e-9\n#define P pair<int, int>\n#define pii pair<int, int>\n#define pll pair<ll, ll>\n#define pul pair<ull, ull>\n#define all(a) (a).begin(), (a).end()\n#define FOR(i,a,b) for (int i=(a);i<(b);++i)\n#define RFOR(i,a,b) for (int i=(b)-1;i>=(a);--i)\n#define REP(i,n) for (int i=0;i<(n);++i)\n#define RREP(i,n) for (int i=(n)-1;i>=0;--i)\n#define TO_STRING(VariableName) # VariableName\n\nvoid YES() { cout << \"YES\" << endl; }\nvoid NO() { cout << \"NO\" << endl; }\nvoid Yes() { cout << \"Yes\" << endl; }\nvoid No() { cout << \"No\" << endl; }\nvoid yes() { cout << \"yes\" << endl; }\nvoid no() { cout << \"no\" << endl; }\n\nclass Point;\nclass Segment;\nclass Circle;\n\nusing Vector = Point;\nusing Line = Segment;\nusing Polygon = vector<Point>;\n\n#define DIGITS 10\n\nclass Point {\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0) : x(x), y(y) {}\n\n\tPoint operator+(Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator-(Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator*(double k) { return Point(x * k, y * k); }\n\tPoint operator/(double k) { return Point(x / k, y / k); }\n\n\tbool operator<(const Point& p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator==(const Point& p) const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n\n\tfriend istream& operator>>(istream& stream, Point& p) {\n\t\tdouble x, y;\n\t\tstream >> x >> y;\n\t\tp.x = x;\n\t\tp.y = y;\n\t\treturn stream;\n\t}\n\n\tfriend ostream& operator<<(ostream& stream, const Point& p) {\n\t\tstream << fixed << setprecision(DIGITS) << p.x << \" \" << p.y;\n\t\treturn stream;\n\t}\n\n\tdouble abs() { return sqrt(norm()); }\n\tdouble norm() { return x * x + y * y; }\n\n\tdouble dot(Vector v) {\n\t\treturn x * v.x + y * v.y;\n\t}\n\n\tdouble cross(Vector v) {\n\t\treturn x * v.y - y * v.x;\n\t}\n\n\tdouble distance(Point p) {\n\t\treturn (*this - p).abs();\n\t}\n};\n\n#define CLOCKWISE 1\n#define COUNTER_CLOCKWISE -1\n#define ONLINE_BACK 2\n#define ONLINE_FRONT -2\n#define ON_SEGMENT 0\n\nclass Segment {\npublic:\n\tPoint p1, p2;\n\n\tSegment(Point p1 = Point(), Point p2 = Point()) : p1(p1), p2(p2) {}\n\t\n\tfriend istream& operator>>(istream& stream, Segment& s) {\n\t\tPoint p1, p2;\n\t\tstream >> p1 >> p2;\n\t\ts.p1 = p1;\n\t\ts.p2 = p2;\n\t\treturn stream;\n\t}\n\n\tfriend ostream& operator<<(ostream& stream, const Segment& s) {\n\t\tstream << fixed << setprecision(DIGITS) << s.p1.x << \" \" << s.p1.y << \" \";\n\t\tstream << fixed << setprecision(DIGITS) << s.p2.x << \" \" << s.p2.y;\n\t\treturn stream;\n\t}\n\n\tPoint project(Point p) {\n\t\tPoint base = p2 - p1;\n\t\tdouble r = (p - p1).dot(base) / base.norm();\n\t\treturn p1 + base * r;\n\t}\n\n\tPoint refrect(Point p) {\n\t\treturn p + (project(p) - p) * 2;\n\t}\n\n\tint ccw(Point p) {\n\t\tVector a = p2 - p1;\n\t\tVector b = p - p1;\n\t\tif (a.cross(b) > EPS) return COUNTER_CLOCKWISE;\n\t\tif (a.cross(b) < -EPS) return CLOCKWISE;\n\t\tif (a.dot(b) < -EPS) return ONLINE_BACK;\n\t\tif (a.norm() < b.norm()) return ONLINE_FRONT;\n\t\treturn ON_SEGMENT;\n\t}\n\n\tbool orthogonal(Segment s) {\n\t\treturn fabs((p2 - p1).dot(s.p2 - s.p1)) < EPS;\n\t}\n\n\tbool parallel(Segment s) {\n\t\treturn fabs((p2 - p1).cross(s.p2 - s.p1)) < EPS;\n\t}\n\n\tbool intersect(Segment s) {\n\t\treturn ccw(s.p1) * ccw(s.p2) <= 0 && s.ccw(p1) * s.ccw(p2) <= 0;\n\t}\n\n\tPoint intersectionPoint(Segment s) {\n\t\tVector base = s.p2 - s.p1;\n\t\tdouble d1 = abs(base.cross(p1 - s.p1));\n\t\tdouble d2 = abs(base.cross(p2 - s.p1));\n\t\treturn p1 + (p2 - p1) * d1 / (d1 + d2);\n\t}\n\n\tdouble distance(Point p) {\n\t\tif ((p2 - p1).dot(p - p1) < 0) return (p - p1).abs();\n\t\tif ((p1 - p2).dot(p - p2) < 0) return (p - p2).abs();\n\t\treturn distanceL(p);\n\t}\n\n\tdouble distance(Segment s) {\n\t\tif (intersect(s)) return 0;\n\t\treturn min(min(distance(s.p1), distance(s.p2)),\n\t\t\tmin(s.distance(p1), s.distance(p2)));\n\t}\n\n\tdouble distanceL(Point p) {\n\t\tVector base = p2 - p1;\n\t\treturn fabs(base.cross(p - p1) / base.abs());\n\t}\n};\n\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0) : c(c), r(r) {}\n};\n\nint main() {\n\tSegment s1, s2;\n\tint q;\n\tcin >> q;\n\twhile (q--) {\n\t\tcin >> s1 >> s2;\n\t\tcout << fixed << setprecision(DIGITS) << s1.distance(s2) << endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nclass Point{\npublic:\n    double x, y;\n    Point(){};\n    Point(double x, double y):x(x), y(y){}\n    Point operator + (Point p){return Point(x + p.x, y + p.y);}\n    Point operator - (Point p){return Point(x - p.x, y - p.y);}\n    Point operator * (double a){return Point(x * a, y * a);}\n    Point operator / (double a){return Point(x / a, y / a);}\n    bool operator < (const Point &p) const{\n        return x != p.x ? x < p.x : y < p.y;\n    }\n    bool operator == (const Point &p) const {\n        return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n    }\n};\n\nclass Segment{\npublic:\n    Point p1, p2;\n    Segment(){};\n    Segment(Point p1, Point p2):p1(p1), p2(p2){};\n};\n\nclass Circle{\npublic:\n    Point c;\n    double r;\n    Circle(){};\n    Circle(Point c, double r):c(c), r(r){}\n};\ntypedef Point Vector;\ntypedef Segment Line;\ntypedef vector<Point> Polygon;\n\ndouble norm(Point p){return p.x * p.x + p.y * p.y;}\ndouble abs(Point p){return sqrt(norm(p));};\n\ndouble dot(Point a, Point b){\n    return a.x * b.x + a.y * b.y;\n}\ndouble cross(Point a, Point b){\n    return a.x * b.y - a.y * b.x;\n}\nbool isorthogonal(Vector a, Vector b){\n    return equals(dot(a, b), 0.0);\n}\nbool isorthognoal(Point a1, Point a2, Point b1, Point b2){\n    return equals(cross(a1 - a2, b1 - b2), 0.0);\n}\nbool isparallel(Vector a, Vector b){\n    return equals(cross(a, b), 0.0);\n}\nbool isparallel(Point a1, Point a2, Point b1, Point b2){\n    return equals(cross(a1 - a2, b1 - b2), 0.0);\n}\nPoint project(Segment s, Point p){\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / norm(base);\n    return s.p1 + base * r;\n}\nPoint reflect(Segment s, Point p){\n    return p + (project(s, p) - p) * 2.0;\n}\ndouble getdistance(Point a, Point b){\n    return abs(a - b);\n}\ndouble getdistancelp(Line l, Point p){\n    return abs(cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1));\n}\ndouble getdistancesp(Segment s, Point p){\n    if(dot(s.p2 - s.p1, p - s.p1) < 0.0)\n        return abs(p - s.p1);\n    if(dot(s.p1 - s.p2, p - s.p2) < 0.0)\n        return abs(p - s.p2);\n    return getdistancelp(s, p);\n}\n\nbool isorthogonal(Segment s1, Segment s2){\n    return equals(dot(s1.p2  - s1.p1, s2.p2 - s1.p1), 0.0);\n}\nbool isparallel(Segment s1, Segment s2){\n    return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nstatic const int counter_clockwise = 1;\nstatic const int clockwise = -1;\nstatic const int online_back = 2;\nstatic const int online_front = -2;\nstatic const int on_segment = 0;\n\nint ccw(Point p0, Point p1, Point p2){\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if(cross(a, b) > EPS) return counter_clockwise;\n    if(cross(a, b) < EPS) return clockwise;\n    if(dot(a,b) < -EPS) return online_back;\n    if(norm(a) < norm(b)) return online_front;\n    return on_segment;\n}\n\nbool intersect(Point p1, Point p2, Point p3, Point p4){\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n        ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\nbool intersect(Segment s1, Segment s2){\n    return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\ndouble getdistance(Segment s1, Segment s2){\n    if(intersect(s1, s2))\n        return 0.0;\n    return min(min(getdistancesp(s1, s2.p1), getdistancesp(s1, s2.p2)),\n        min(getdistancesp(s2, s1.p1), getdistancesp(s2, s1.p2)));\n}\n\nPoint getcrosspoint(Segment s1, Segment s2){\n    Vector base = s2.p2 - s2.p1;\n    double d1 = abs(cross(base, s1.p1 - s2.p1));\n    double d2 = abs(cross(base, s1.p2 - s2.p1));\n    double t = d1 / (d1 + d2);\n    return s1.p1 + (s1.p2 - s1.p1) * t;\n}\n\npair<Point, Point>getcrosspoints(Circle c, Line l){\n    Vector pr = project(l, c.c);\n    Vector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);\n    double base = sqrt(c.r * c.r - norm(pr -c.c));\n    return make_pair(pr + e * base, pr - e * base);\n}\n\ndouble arg(Vector p){return atan2(p.y, p.x);}\nVector polar(double a, double r){return Point(cos(r) * a, sin(r) * a);}\n\npair<Point, Point>getcrosspoints(Circle c1, Circle c2){\n    double d = abs(c1.c - c2.c);\n    double a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n    double t = arg(c2.c - c1.c);\n    return make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n}\n\nint contains(Polygon g, Point p){\n    int n = g.size();\n    bool x = false;\n    for(int i = 0; i < n; i ++){\n        Point a = g[i] - p, b = g[(i + 1) % n] - p;\n        if(abs(cross(a, b)) < EPS && dot(a, b) < EPS) return 1;\n        if(a.y > b.y)   swap(a, b);\n        if(a.y < EPS && EPS < b.y && cross(a, b) > EPS)\n            x !=x;\n    }\n    return (x ? 2 : 0);\n}\nint cmp(Point a, Point b){\n    return (a.y < b.y || (a.y == b.y  && a.x < b.x));\n}\nPolygon andrewscan(Polygon s){\n    Polygon u, l;\n    int len = s.size();\n    if(len < 3) return s;\n\n    sort(s.begin(), s.end());\n    u.push_back(s[0]);\n    u.push_back(s[1]);\n    l.push_back(s[len - 1]);\n    l.push_back(s[len - 2]);\n\n    for(int i = 2; i < len; i ++){\n        for(int j = u.size(); j >= 2 && ccw(u[j - 2], u[j - 1], s[i]) >= 0; i --)\n            u.pop_back();\n        l.push_back(s[i]);\n    }\n\n    reverse(l.begin(), l.end());\n    for(int i = u.size() - 2; i >= 1; i --)\n        l.push_back(u[i]);\n\n    return l;\n}\n\nint main(){\n    int q;\n    Segment a, b;\n    scanf(\"%d\", &q);\n    while(q --){\n        scanf(\"%lf %lf %lf %lf %lf %lf %lf %lf\", \n            &a.p1.x, &a.p1.y, &a.p2.x, &a.p2.y,\n            &b.p1.x, &b.p1.y, &b.p2.x, &b.p2.y);\n        printf(\"%lf\\n\", getdistance(a, b));\n    }\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <vector>\n#include <algorithm>\n#include <iostream>\n#include <cstdio>\n#include <cmath>\n#include <climits>\n\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\n//???\nclass Point {\npublic:\n    double x, y;\n    \n    Point (double x = 0, double y = 0):x(x), y(y){}\n    Point operator + (Point p){return Point(x + p.x, y + p.y);}\n    Point operator - (Point p){return Point(x - p.x, y - p.y);}\n    Point operator * (double a){return Point(a * x, a * y);}\n    Point operator / (double a){return Point(x / a, y / a);}\n    \n    double norm(){return x*x + y*y;};\n    double absolute(){return sqrt(norm());};\n    \n    bool operator < (const Point &p) const{\n        return x != p.x ? x < p.x : y < p.y;\n    }\n    \n    bool operator == (const Point &p) const{\n        return equals(x, p.x) && equals(y, p.y);\n    }\n    \n};\ntypedef Point Vector;                               //????????????\ntypedef struct Segment{Point p1, p2;}Segment;       //??????\ntypedef Segment Line;                               //??´???\ntypedef struct Circle{Point c; double r;}Circle;    //???\ntypedef vector<Point> Polygon;                      //????§???¢\n//????????????a????????????\ndouble norm(Vector a){\n    return a.x * a.x + a.y * a.y;\n}\n//????????????a?????§??????\ndouble absolute(Vector a){\n    return sqrt(norm(a));\n}\n\n//????????????a,b?????????\ndouble dot(Vector a, Vector b){\n    return a.x * b.x + a.y * b.y;\n}\n//????????????a,b?????????\ndouble cross(Vector a, Vector b){\n    return a.x * b.y - a.y * b.x;\n}\n//??´???s??¨???p????????¢\ndouble getDistanceLP(Line l, Point p){\n    return abs(cross(l.p2 - l.p1, p - l.p1) / absolute(l.p2 - l.p1));\n}\n\n//??????s(p1p2)??¨???p????????¢d????±???????\n//??\\???????????????????????§??´?????????\n//??????????????????p2-p1??¨???????????????p-p1??????????§???????90???????????§????????´???????????????-90?????????????°?????????´?????????d??????p??¨???p1??¨????????¢\n//??????????????????p1-p2??¨???????????????p-p2??????????§???????90???????????§????????´???????????????-90?????????????°?????????´?????????d??????p??¨???p2??¨????????¢\n//??????????????\\???????????????????????´??????d??????p??¨??´???p1p2????????¢\ndouble getDistanceSP(Segment s, Point p){\n    if (dot(s.p2 - s.p1, p - s.p1) < 0.0) return absolute(p - s.p1);\n    if (dot(s.p1 - s.p2, p - s.p2) < 0.0) return absolute(p - s.p2);\n    return getDistanceLP(s, p);\n}\n\n\n//??????p0, p1, p2???????????????????????????p0p1???????????????p2??????????????????\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\nint ccw(Point p0, Point p1, Point p2){\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if(cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n    if(cross(a, b) < -EPS) return CLOCKWISE;\n    if(dot(a, b) < -EPS) return ONLINE_BACK;\n    if(norm(a) < norm(b)) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\n//??????S1(p1p2)??¨??????s2(p2p3)????????????????????????\nbool intersect(Point p1, Point p2, Point p3, Point p4){\n    return  ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0\n            &&\n            ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0;\n}\nbool intersect(Segment s1, Segment s2){\n    return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\n//??????s1??¨??????s2????????¢\n//??\\????????????????????¢????????§????????????????????????\n//????????????s1??¨??????s2????§????s2.p1????????¢\n//????????????s1??¨??????s2?????????s2.p2????????¢\n//????????????s2??¨??????s1????§????s1.p1????????¢\n//????????????s2??¨??????s1?????????s1.p2????????¢\ndouble getDistance(Segment s1, Segment s2){\n    if ( intersect(s1, s2) ) return 0.0;\n    return min(\n               min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n               min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2))\n               );\n}\n\nint main(){\n    \n    int x0, y0, x1, y1, x2, y2, x3, y3;\n    \n    int q;\n    \n    cin >> q;\n    \n    for (int i = 0; i < q; i++) {\n        cin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n        \n        Point p0 = Point(x0, y0);\n        Point p1 = Point(x1, y1);\n        Point p2 = Point(x2, y2);\n        Point p3 = Point(x3, y3);\n        \n        Segment s1 = {p0, p1};\n        Segment s2 = {p2, p3};\n        \n        double ans = getDistance(s1, s2);\n        \n        printf(\"%.8lf\\n\", ans);\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <fstream>\n#include <typeinfo>\n#include <vector>\n#include <cmath>\n#include <set>\n#include <map>\n#include <string>\n#include <algorithm>\n#include <cstdio>\n#include <queue>\n#include <iomanip>\n#include <cctype>\n#define syosu(x) fixed<<setprecision(x)\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> P;\ntypedef pair<double,double> pdd;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef vector<char> vc;\ntypedef vector<vc> vvc;\ntypedef vector<bool> vb;\ntypedef vector<vb> vvb;\ntypedef vector<P> vp;\ntypedef vector<vp> vvp;\ntypedef pair<int,P> pip;\ntypedef vector<pip> vip;\nconst int inf=1<<25;\nconst double pi=acos(-1);\nconst double eps=1e-8;\nconst vi emp;\n\nstruct point{\n\tdouble x,y;\n\tpoint operator+(point p){\n\t\treturn point{x+p.x,y+p.y};\n\t}\n\tpoint operator-(point p){\n\t\treturn point{x-p.x,y-p.y};\n\t}\n\tpoint operator*(double p){\n\treturn point{x*p,y*p};\n\t}\n\tpoint operator/(double p){\n\t\tif(!p) return point{0,0}; \n\t\treturn point{x/p,y/p};\n\t}\n\tbool operator==(point p){\n\t\treturn fabs(x-p.x)<eps&&fabs(y-p.y)<eps;\n\t}\n};\n\ntypedef pair<point,point> pp;\nconst point O{0,0};\n\nclass Geom{\n\tpublic:\n\tdouble Length(point x,point y){\n\t\tpoint z=y-x;\n\t\treturn sqrt(z.x*z.x+z.y*z.y);\n\t}\n\tdouble IP(point p,point q){\n\t\treturn p.x*q.x+p.y*q.y;\n\t}\n\tdouble CP(point p,point q){\n\t\treturn p.x*q.y-q.x*p.y;\n\t}\n\tstring Counter_Clockwise(pp a,point x){\n\t\tpoint A=a.second-a.first;\n\t\tpoint X=x-a.first;\n\t\tdouble ip=IP(A,X),cp=CP(A,X),Al=Length(O,A),Xl=Length(O,X);\n\t\tif(cp>eps) return \"Counter_Clockwise\";\n\t\tif(cp<-eps) return \"Clockwise\";\n\t\tif(ip<-eps) return \"Online_Back\";\n\t\tif(Xl<Al||fabs(Xl-Al)<eps) return \"On_Segment\";\n\t\treturn \"Online_Front\";\n\t}\n\tstring Parallel_Orthogonal(pp a,pp b){\n\t\tpoint A=a.second-a.first,B=b.second-b.first;\n\t\tdouble ip=IP(A,B),cp=CP(A,B);\n\t\tstring f=Counter_Clockwise(pp(a.first,a.second),b.first),s=Counter_Clockwise(pp(a.first,a.second),b.second);\n\t\tif(f[0]!='C'&&s[0]!='C') return \"Agreement\";\n\t\tif(cp<eps&&cp>-eps) return \"Parallel\";\n\t\tif(ip<eps&&ip>-eps) return \"Orthogonal\";\n\t\telse return \"Commonly\";\n\t}\n\tstring Intersection(pp a,pp b){\n\t\tpoint p=Cross_Point(a,b);\n\t\tif(p==point{inf,0}) return \"not_Intersection\";\n\t\tif(p==point{inf,inf}){\n\t\t\tstring S=Counter_Clockwise(a,b.first),T=Counter_Clockwise(a,b.second);\n\t\t\tif(S==T&&S[2]=='l'&&T[2]=='l') return \"not_Intersection\";\n\t\t\treturn \"Intersection\";\n\t\t}\n\t\tstring s=Counter_Clockwise(a,p),t=Counter_Clockwise(b,p);\n\t\tif(s[3]=='S'&&t[3]=='S') return \"Intersection\";\n\t\telse return \"not_Intersection\";\n\t}\n\tpoint Inter(pp  a,double x,double y){\n\t\treturn (a.first*y+a.second*x)/(x+y);\n\t}\n\tpoint Exterior(pp a,double x,double y){\n\t\treturn (a.first*-y+a.second*x)/(x-y);\n\t}\n\tpoint Projection(pp a,point x){\n\t\tpoint A=x-a.first,B=a.second-a.first;\n\t\tdouble l=Length(O,B);\n\t\treturn B*IP(A,B)/(l*l)+a.first;\n\t}\n\tpoint Cross_Point(pp a,pp b){\n\t\tstring s=Parallel_Orthogonal(a,b);\n\t\tif(s[0]=='A') return point{inf,inf};\n\t\tif(s[0]=='P') return point{inf,0};\n\t\tpoint p=Projection(a,b.first),q=Projection(a,b.second);\n\t\tdouble pl=Length(b.first,p),ql=Length(b.second,q);\n\t\tstring S=Counter_Clockwise(a,b.first),T=Counter_Clockwise(a,b.second);\n\t\tif(S==T) return Exterior(b,pl,ql);\n\t\telse return Inter(b,pl,ql);\n\t}\n\tdouble Distance_line_point(pp a,point x){\n\t\tpoint f=a.first,s=a.second;\n\t\tif(fabs(f.x-s.x)<eps) return fabs(f.x-x.x);\n\t\tdouble xs=s.x-f.x,ys=s.y-f.y;\n\t\treturn fabs(ys*x.x-xs*x.y-CP(f,s))/sqrt(xs*xs+ys*ys);\n\t}\n\tdouble Distance_seg_point(pp a,point x){\n\t\tpoint p=Projection(a,x);\n\t\tstring s=Counter_Clockwise(a,p);\n\t\tif(s[3]=='S') return Distance_line_point(a,x);\n\t\treturn min(Length(a.first,x),Length(a.second,x));\n\t}\n\tdouble Distance_seg_seg(pp a,pp b){\n\t\tstring s=Intersection(a,b);\n\t\tif(s[0]=='I') return 0;\n\t\treturn min(Distance_seg_point(a,b.first),min(Distance_seg_point(a,b.second),min(Distance_seg_point(b,a.first),Distance_seg_point(b,a.second))));\n\t}\n\tvoid Point_in(point& p){\n\t\tcin>>p.x>>p.y;\n\t}\n};\n\nint Q;\nvector<point> p(4);\n\nint main(){\n\tcout<<syosu(10);\n\tGeom geo;\n\tcin>>Q;\n\tfor(int i=0;i<Q;i++){\n\t\tfor(int j=0;j<4;j++) geo.Point_in(p[j]);\n\t\tcout<<geo.Distance_seg_seg(pp(p[0],p[1]),pp(p[2],p[3]))<<endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cmath>\n#include <algorithm>\n#include <vector>\nnamespace Random_Number{\n\tunsigned int seed = 19260817;\n\tvoid srnd(unsigned int x){ seed = x; }\n\tunsigned int rnd(){\n\t\treturn seed ^= seed << 19, seed ^= seed >> 7, seed ^= seed << 1;\n\t}\n}\nusing namespace Random_Number;\nnamespace Geometry{\n\tconst int COUNTER_CLOCKWISE = 1, CLOCKWISE = 2, ONLINE_BACK = 3, ONLINE_FRONT = 4, ON_SEGMENT = 5;\n\tconst double eps = 1e-9, pi = 3.14159265358979323846;\n\tbool equal(double a, double b){ return fabs(a - b) < eps; }\n\tstruct point{\n\t\tdouble x, y;\n\t\tpoint(){}\n\t\tpoint(double _x, double _y){ x = _x, y = _y; }\n\t\tpoint operator * (const double &la) const { return point(x * la, y * la); }\n\t\tpoint operator / (const double &la) const { return point(x / la, y / la); }\n\t\tpoint operator + (const point &rhs) const { return point(x + rhs.x, y + rhs.y); }\n\t\tpoint operator - (const point &rhs) const { return point(x - rhs.x, y - rhs.y); }\n\t\tbool operator < (const point &rhs) const { return x < rhs.x || (x == rhs.x && y < rhs.y); }\n\t\tbool operator > (const point &rhs) const { return x > rhs.x || (x == rhs.x && y > rhs.y); }\n\t\tbool operator == (const point &rhs) const { return equal(x, rhs.x) && equal(y, rhs.y); }\n\t\tdouble len2() const { return x * x + y * y; }\n\t\tdouble len() const { return sqrt(len2()); }\n\t\tpoint unit() const { return *this / len(); }\n\t\tpoint unit2() const { return *this / len2(); }\n\t\tfriend double distance(const point &a, const point &b){ return (a - b).len(); }\n\t\tfriend double distance2(const point &a, const point &b){ return (a - b).len2(); }\n\t\tfriend double dot(const point &a, const point &b){ return a.x * b.x + a.y * b.y; }\n\t\tfriend double cross(const point &a, const point &b){ return a.x * b.y - a.y * b.x; }\n\t\tvoid read(){ scanf(\"%lf%lf\", &x, &y); }\n\t\tvoid print(char ch = '\\n') const { printf(\"%.10lf %.10lf\", x, y), putchar(ch); }\n\t\tpoint rotation(double th) const { return point(x * cos(th) - y * sin(th), y * cos(th) + x * sin(th)); }\n\t\tfriend double angle(const point &a, const point &b){ return atan2(cross(a, b), dot(a, b)); }\n\t};\n\tstruct line{\n\t\tpoint a, b;\n\t\tline(){}\n\t\tline(point _a, point _b){ a = _a, b = _b; }\n\t\tvoid read(){ a.read(), b.read(); }\n\t\tvoid print(char ch1 = ' ', char ch2 = '\\n') const { a.print(ch1), b.print(ch2); }\n\t\tpoint projection(const point &p) const { return a + (b - a).unit2() * dot(p - a, b - a); }\n\t\tpoint reflection(const point &p) const { return projection(p) * 2 - p; }\n\t\tint direction(const point &p) const {\n\t\t\tdouble t = cross(b - a, p - a);\n\t\t\tif (t >= eps) return 1;\n\t\t\tif (t <= -eps) return 2;\n\t\t\tdouble l1 = dot(p - a, b - a), l2 = dot(b - a, b - a);\n\t\t\tif (l1 <= -eps) return 3;\n\t\t\tif (l1 > l2) return 4;\n\t\t\treturn 5;\n\t\t}\n\t\tfriend bool parallel(const line &a, const line &b){ return equal(cross(a.b - a.a, b.b - b.a), 0); }\n\t\tfriend bool orthogonal(const line &a, const line &b){ return equal(dot(a.b - a.a, b.b - b.a), 0); }\n\t\tfriend std :: vector<point> line_cross_point(const line &a, const line &b){\n\t\t\tif (parallel(a, b)) return {};\n\t\t\tpoint u = a.a - b.a, v = a.b - a.a, w = b.b - b.a;\n\t\t\treturn {a.a + v * (cross(w, u) / cross(v, w))};\n\t\t}\n\t\tfriend bool segment_intersection(const line &a, const line &b){\n\t\t\tif (std :: min(a.a.x, a.b.x) >= std :: max(b.a.x, b.b.x) + eps) return 0;\n\t\t\tif (std :: min(b.a.x, b.b.x) >= std :: max(a.a.x, a.b.x) + eps) return 0;\n\t\t\tif (std :: min(a.a.y, a.b.y) >= std :: max(b.a.y, b.b.y) + eps) return 0;\n\t\t\tif (std :: min(b.a.y, b.b.y) >= std :: max(a.a.y, a.b.y) + eps) return 0;\n\t\t\tdouble t1, t2;\n\t\t\tt1 = cross(b.a - a.a, a.b - a.a), t2 = cross(b.b - a.a, a.b - a.a);\n\t\t\tif ((t1 >= eps && t2 >= eps) || (t1 <= -eps && t2 <= -eps)) return 0;\n\t\t\tt1 = cross(a.a - b.a, b.b - b.a), t2 = cross(a.b - b.a, b.b - b.a);\n\t\t\tif ((t1 >= eps && t2 >= eps) || (t1 <= -eps && t2 <= -eps)) return 0;\n\t\t\treturn 1;\n\t\t}\n\t\tfriend double distance_ps(const point &p, const line &l){\n\t\t\tdouble l1 = dot(p - l.a, l.b - l.a), l2 = dot(l.b - l.a, l.b - l.a);\n\t\t\tif (l1 > l2) return distance(p, l.b);\n\t\t\tif (l1 < 0) return distance(p, l.a);\n\t\t\treturn fabs(cross(l.b - l.a, p - l.a)) / distance(l.a, l.b);\n\t\t}\n\t\tfriend double distance_ss(const line &a, const line &b){\n\t\t\tif (segment_intersection(a, b)) return 0;\n\t\t\treturn std :: min(std :: min(distance_ps(a.a, b), distance_ps(a.b, b)), \n\t\t\tstd :: min(distance_ps(b.a, a), distance_ps(b.b, a)));\n\t\t}\n\t};\n\tstruct polygon{\n\t\tstd :: vector<point> g;\n\t\tpolygon(){}\n\t\tpolygon(int n){ g.resize(n); }\n\t\tpolygon(const std :: vector<point> &_g){ g = _g; }\n\t\tvoid clear(){ g.clear(); }\n\t\tvoid resize(int n){ g.resize(n); }\n\t\tint size() const { return g.size(); }\n\t\tvoid push_back(point x){ return g.push_back(x); }\n\t\tvoid pop_back(){ g.pop_back(); }\n\t\tpoint& operator [] (int x){ return g[x]; }\n\t\tconst point& operator [] (int x) const { return g[x]; }\n\t\tdouble directed_area() const {\n\t\t\tint n = g.size();\n\t\t\tdouble s = 0;\n\t\t\tfor (register int i = 0; i < n; ++i) s += cross(g[i], g[(i + 1) % n]);\n\t\t\treturn s / 2;\n\t\t}\n\t\tbool is_convex() const {\n\t\t\tint n = g.size();\n\t\t\tfor (register int i = 0; i < n; ++i)\n\t\t\t\tif (cross(g[(i + 1) % n] - g[i], g[(i - 1 + n) % n] - g[i]) <= -eps) return 0;\n\t\t\treturn 1;\n\t\t}\n\t\tint polygon_point_containment(const point &a) const {\n\t\t\tdouble k = sqrt(1.0 * rnd() / rnd());\n\t\t\tline l = line(a, point(a.x + 1e9, a.y + 1e9 * k));\n\t\t\tint n = g.size(), s = 0;\n\t\t\tfor (register int i = 0; i < n - 1; ++i)\n\t\t\t\tif (line(g[i], g[i + 1]).direction(a) == 5) return 1;\n\t\t\tif (line(g[n - 1], g[0]).direction(a) == 5) return 1;\n\t\t\tfor (register int i = 0; i < n - 1; ++i)\n\t\t\t\tif (segment_intersection(l, line(g[i], g[i + 1]))) ++s;\n\t\t\tif (segment_intersection(l, line(g[n - 1], g[0]))) ++s;\n\t\t\tif (s & 1) return 2; else return 0;\n\t\t}\n\t\tvoid convex_hull(std :: vector<point> f){\n\t\t\tg.clear();\n\t\t\tint n = f.size();\n\t\t\tstd :: sort(f.begin(), f.end());\n\t\t\tstd :: vector<point> p;\n\t\t\tp.push_back(f[0]);\n\t\t\tfor (register int i = 1; i < n; ++i){\n\t\t\t\twhile (p.size() > 1 && cross(f[i] - p.back(), *(++p.rbegin()) - p.back()) <= -eps)\n\t\t\t\t\tp.pop_back();\n\t\t\t\tp.push_back(f[i]);\n\t\t\t}\n\t\t\tfor (register int i = 0; i < p.size() - 1; ++i) g.push_back(p[i]);\n\t\t\tstd :: reverse(f.begin(), f.end());\n\t\t\tp.clear(), p.push_back(f[0]);\n\t\t\tfor (register int i = 1; i < n; ++i){\n\t\t\t\twhile (p.size() > 1 && cross(f[i] - p.back(), *(++p.rbegin()) - p.back()) <= -eps)\n\t\t\t\t\tp.pop_back();\n\t\t\t\tp.push_back(f[i]);\n\t\t\t}\n\t\t\tfor (register int i = 0; i < p.size() - 1; ++i) g.push_back(p[i]);\n\t\t\tf = g, n = f.size(), g.clear();\n\t\t\tint t = 0;\n\t\t\tfor (register int i = 1; i < n; ++i)\n\t\t\t\tif (f[i].y < f[t].y || (f[i].y == f[t].y && f[i].x < f[t].x)) t = i;\n\t\t\tfor (register int i = t; i < n; ++i) g.push_back(f[i]);\n\t\t\tfor (register int i = 0; i < t; ++i) g.push_back(f[i]);\n\t\t}\n\t\tdouble convex_diamater() const {\n\t\t\tint n = g.size();\n\t\t\tdouble ans = 0;\n\t\t\tfor (register int i = 0, j = 0; i < n; ++i){\n\t\t\t\twhile (cross(g[i] - g[j], g[(i + 1) % n] - g[j])\n\t\t\t\t  < cross(g[i] - g[(j + 1) % n], g[(i + 1) % n] - g[(j + 1) % n]) + eps)\n\t\t\t\t\tj = (j + 1) % n;\n\t\t\t\tans = std :: max(ans, distance(g[j], g[i]));\n\t\t\t\tans = std :: max(ans, distance(g[j], g[(i + 1) % n]));\n\t\t\t}\n\t\t\treturn ans;\n\t\t}\n\t};\n\tstruct circle{\n\t\tpoint o;\n\t\tdouble r;\n\t\tcircle(){}\n\t\tcircle(point _o, double _r){ o = _o, r = _r; }\n\t\tvoid read(){ o.read(), scanf(\"%lf\", &r); }\n\t\tvoid print(char ch = '\\n') const { printf(\"%.10lf %.10lf %.10lf\", o.x, o.y, r), putchar(ch); }\n\t\tint circle_intersection(const circle &c) const {\n\t\t\tdouble d = distance(o, c.o);\n\t\t\tif (d >= r + c.r + eps) return 4;\n\t\t\tif (equal(d, r + c.r)) return 3;\n\t\t\tif (d >= fabs(r - c.r) + eps) return 2;\n\t\t\tif (equal(d, fabs(r - c.r))) return 1;\n\t\t\treturn 0;\n\t\t}\n\t\tstd :: vector<point> directed_line_cross_point(const line &l) const {\n\t\t\tpoint p = line(l.a, l.b).projection(o), v = (l.b - l.a).unit();\n\t\t\tdouble d = distance(p, o);\n\t\t\tif (d >= r + eps) return {};\n\t\t\tdouble t = sqrt(r * r - (p - o).len2());\n\t\t\tif (equal(t, 0)) return {p};\n\t\t\telse return {p - v * t, p + v * t};\n\t\t}\n\t\tstd :: vector<point> circle_cross_point(const circle &c) const {\n\t\t\tdouble d = distance(o, c.o);\n\t\t\tif (d <= fabs(r - c.r) - eps || d >= r + c.r + eps) return {};\n\t\t\tdouble x = (r * r - c.r * c.r + d * d) / (d * 2), h = sqrt(r * r - x * x);\n\t\t\tpoint p = (c.o - o).unit() * x, v = (c.o - o).unit().rotation(pi / 2) * h;\n\t\t\tif (v == point(0, 0)) return {p}; else return {p - v, p + v};\n\t\t}\n\t\tstd :: vector<point> tangent(const point &p) const {\n\t\t\tdouble d = distance(o, p);\n\t\t\tif (d <= r - eps) return {};\n\t\t\tif (equal(d, r)) return {p};\n\t\t\treturn circle_cross_point(circle(p, sqrt(d * d - r * r)));\n\t\t}\n\t\tstd :: vector<point> common_tangent_out(const circle &c) const {\n\t\t\tif (equal(r, c.r)){\n\t\t\t\tpoint p = (c.o - o).unit().rotation(pi / 2) * r;\n\t\t\t\treturn {o - p, o + p};\n\t\t\t}\n\t\t\tpoint p = (o * c.r - c.o * r) / (c.r - r);\n\t\t\treturn tangent(p);\n\t\t}\n\t\tstd :: vector<point> common_intangent_in(const circle &c) const {\n\t\t\tpoint p = (o * c.r + c.o * r) / (r + c.r);\n\t\t\treturn tangent(p);\n\t\t}\n\t\tdouble directed_triangle_intersection(const point &a, const point &b) const {\n\t\t\tbool ta = a.x * a.x + a.y * a.y < r * r + eps, tb = b.x * b.x + b.y * b.y < r * r + eps;\n\t\t\tstd :: vector<point> t = circle(point(0, 0), r).directed_line_cross_point(line(b, a));\n\t\t\tif (ta == 1 && tb == 1) return cross(a, b) / 2;\n\t\t\tif (ta == 1 && tb == 0) return angle(t.front(), b) * r * r / 2 + cross(a, t.front()) / 2;\n\t\t\tif (ta == 0 && tb == 1) return angle(a, t.back()) * r * r / 2 + cross(t.back(), b) / 2;\n\t\t\tdouble s = angle(a, b) * r * r / 2;\n\t\t\tif (distance_ps(point(0, 0), line(a, b)) > r - eps) return s;\n\t\t\treturn s + angle(t.front(), t.back()) * r * r / 2 - cross(t.front(), t.back()) / 2;\n\t\t}\n\t\tdouble directed_polygon_intersection(const polygon &g) const {\n\t\t\tint n = g.size();\n\t\t\tdouble s = 0;\n\t\t\tfor (register int i = 0; i < n; ++i)\n\t\t\t\ts += directed_triangle_intersection(g[i] - o, g[(i + 1) % n] - o);\n\t\t\treturn s;\n\t\t}\n\t};\n}\nusing namespace Geometry;\npoint p, t;\nline l, m;\npolygon g;\ncircle c;\nint n, q;\ndouble r;\nvoid CGL_1_A(){\n\tl.read(), scanf(\"%d\", &q);\n\twhile (q--) p.read(), l.projection(p).print();\n}\nvoid CGL_1_B(){\n\tl.read(), scanf(\"%d\", &q);\n\twhile (q--) p.read(), l.reflection(p).print();\n}\nvoid CGL_1_C(){\n\tl.read(), scanf(\"%d\", &q);\n\twhile (q--){\n\t\tp.read();\n\t\tint t = l.direction(p);\n\t\tif (t == COUNTER_CLOCKWISE) puts(\"COUNTER_CLOCKWISE\");\n\t\tif (t == CLOCKWISE) puts(\"CLOCKWISE\");\n\t\tif (t == ONLINE_BACK) puts(\"ONLINE_BACK\");\n\t\tif (t == ONLINE_FRONT) puts(\"ONLINE_FRONT\");\n\t\tif (t == ON_SEGMENT) puts(\"ON_SEGMENT\");\n\t}\n}\nvoid CGL_2_A(){\n\tscanf(\"%d\", &q);\n\twhile (q--){\n\t\tl.read(), m.read();\n\t\tif (parallel(l, m)) puts(\"2\");\n\t\telse if (orthogonal(l, m)) puts(\"1\");\n\t\telse puts(\"0\");\n\t}\n}\nvoid CGL_2_B(){\n\tscanf(\"%d\", &q);\n\twhile (q--){\n\t\tl.read(), m.read();\n\t\tif (segment_intersection(l, m)) puts(\"1\");\n\t\telse puts(\"0\");\n\t}\n}\nvoid CGL_2_C(){\n\tscanf(\"%d\", &q);\n\twhile (q--){\n\t\tl.read(), m.read();\n\t\tline_cross_point(l, m)[0].print();\n\t}\n}\nvoid CGL_2_D(){\n\tscanf(\"%d\", &q);\n\twhile (q--){\n\t\tl.read(), m.read();\n\t\tprintf(\"%.10lf\\n\", distance_ss(l, m));\n\t}\n}\nvoid CGL_7_H(){\n\tint n;\n\tdouble r;\n\tscanf(\"%d%lf\", &n, &r);\n\tpolygon g(n);\n\tfor (register int i = 0; i < n; ++i) g[i].read();\n\tprintf(\"%.10lf\\n\", fabs(circle(point(0, 0), r).directed_polygon_intersection(g)));\n}\nint main(){\n\tCGL_2_D();\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include  <bits/stdc++.h>\n#define rep(i,n) for(int (i)=0;(i)<(n);(i)++)\nusing namespace std;\n\ntypedef bool B;\ntypedef long double D;\ntypedef complex<D> P;\ntypedef vector<P> VP;\ntypedef struct {P s,t;} L;\ntypedef vector<L> VL;\ntypedef struct {P c;D r;} C;\ntypedef vector <C> VC;\n\nconst D eps=1.0e-10;\nconst D pi=acos(-1.0);\ntemplate<class T> bool operator==(T a, T b){return abs(a-b)< eps;}\ntemplate<class T> bool operator< (T a, T b){return a < b-eps;}\ntemplate<class T> bool operator<=(T a, T b){return a < b+eps;}\ntemplate<class T> int sig(T r) {return (r==0||r==-0) ? 0 : r > 0 ? 1 : -1;}\n#define X real()\n#define Y imag()\n\nD ip(P a, P b) {return a.X * b.X + a.Y * b.Y;}\nD ep(P a, P b) {return a.X * b.Y - a.Y * b.X;}\nD sq(D a) {return sqrt(max(a, (D)0));}\nP vec(L l){return l.t-l.s;}\ninline void input(P &p){D x,y;cin >> x >> y;p={x,y};}\n// ???????????¬????????¨???\n\n// ccw\nenum CCW{\n\tLEFT = 1,\n\tRIGHT = 2,\n\tBACK = 4,\n\tFRONT = 8,\n\tMID = 16,\n\tON=FRONT|BACK|MID\n};\n\ninline int ccw(P base, P a, P b) {              //???a??¨???b???????????????????????????\n\ta -= base; b -= base;\n\tif (ep(a, b) > 0)\n\t\treturn LEFT;    // counter clockwise\n\tif (ep(a, b) < 0)\n\t\treturn RIGHT;   // clockwise\n\tif (ip(a, b) < 0)\n\t\treturn BACK;    // b--base--a on line\n\tif (norm(a) < norm(b))\n\t\treturn FRONT;   // base--a--b on line\n\t// otherwise\n\treturn MID;      // base--b--a on line  a??¨b????????????????????????\n}\n\nB iver(L a, L b) {return ip(vec(a),vec(b) )== 0.0;}\nB ipar(L a, L b) {return ep(vec(a),vec(b) )== 0.0;}\n\n\n// ??????\nP pLL(L a,L b){ return a.s+vec(a)*ep(vec(b),b.s-a.s)/ep(vec(b),vec(a));}\n\n\n// ?????¨??´?????¨????????¢??£???????????????\n\nB iLL(L a,L b){return !ipar(a,b);}\nB eqL(L a,L b){return !iLL(a, b) && ep(vec(a), b.s - a.s)==0;}\nB iLS(L a,L b){return sig(ep(vec(a),b.s-a.s))*sig(ep(vec(a),b.t-a.s)) <= 0;}\nB iLSs(L a,L b){return sig(ep(vec(a),b.s-a.s))*sig(ep(vec(a),b.t-a.s)) < 0;}\nB iSS(L a,L b){\n\tint cwa = ccw(a.s,a.t, b.s) | ccw(a.s,a.t, b.t);\n\tint cwb = ccw(b.s,b.t, a.s) | ccw(b.s,b.t, a.t);\n\treturn ((cwa | cwb) & MID) || ((cwa & cwb) == (LEFT | RIGHT));\n}\nB iSSs(L a,L b) {\n\tint cwa = ccw(a.s,a.t, b.s) | ccw(a.s,a.t, b.t);\n\tint cwb = ccw(b.s,b.t, a.s) | ccw(b.s,b.t, a.t);\n\treturn (cwa & cwb) == (LEFT | RIGHT);\n}\n\n// ?????¨??´?????¨????????¢??£????????¢\n\nD dLP(L l,P p){return abs( ep(vec(l),p-l.s) )/abs(vec(l));}\nD dSP(L s,P p){\n\tif (sig( ip( vec(s), p - s.s)) <= 0) return abs(p - s.s);\n\tif (sig( ip(-vec(s), p - s.t)) <= 0) return abs(p - s.t);\n\treturn dLP(s,p);\n}\nD dLL(L a,L b){ return iLL(a,b)?0:dLP(a,b.s);}\nD dLS(L a,L b){ return iLS(a,b)?0:min(dLP(a, b.s),dLP(a, b.t));}\nD dSS(L a,L b){ return iSS(a,b)?0:\n\tmin({ dSP(a,b.s),dSP(a,b.t),dSP(b,a.s),dSP(b,a.t)});}\n\n\nint main(void){\n\tint q;\n\tcin >> q;\n\tcout.precision(10);\n\trep(loop,q){\n\t\tL line[2];\n\t\trep(i,2){\n\t\t\tinput(line[i].s);\n\t\t\tinput(line[i].t);\n\t\t}\n\t\tD ans=dSS(line[0],line[1]);\n\t\tcout << fixed << ans << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n#define rep(i, N) for (int i = 0; i < (int)N; ++i)\n#define all(a) (a).begin(), (a).end()\nconst double EPS = 1e-10;\nbool equals(double a, double b) { return fabs(a - b) < EPS; }\n\nclass Point {\n public:\n  double x, y;\n\n  Point(double x = 0, double y = 0) : x(x), y(y) {}\n\n  Point operator+(const Point &p) const { return Point(x + p.x, y + p.y); }\n  Point operator-(const Point &p) const { return Point(x - p.x, y - p.y); }\n  Point operator*(const double a) { return Point(a * x, a * y); }\n  Point operator/(const double a) { return Point(x / a, y / a); }\n\n  double abs() const { return sqrt(norm()); }\n  double norm() const { return x * x + y * y; }\n\n  Point rotate(double theta) const {\n    return Point(cos(theta) * x - sin(theta) * y,\n                 sin(theta) * x + cos(theta) * y);\n  }\n\n  Point normalize() const { return Point(*this) / abs(); }\n\n  bool operator<(const Point &p) const { return x != p.x ? x < p.x : y < p.y; }\n\n  bool operator==(const Point &p) const {\n    return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n  }\n\n  friend istream &operator>>(istream &is, Point &p) { return is >> p.x >> p.y; }\n};\n\ndouble abs(const Point &p) { return p.abs(); }\ndouble norm(const Point &p) { return p.norm(); }\n\ntypedef Point Vector;\n\nclass Segment {\n public:\n  Point p1, p2;\n  Segment() {}\n  Segment(Point p1, Point p2) : p1(p1), p2(p2) {}\n  friend istream &operator>>(istream &is, Segment &s) {\n    return is >> s.p1 >> s.p2;\n  }\n};\n\ntypedef Segment Line;\n\nclass Circle {\n public:\n  Point c;\n  double r;\n  Circle(Point c = Point(), double r = 0.0) : c(c), r(r) {}\n\n  int contains(const Point &p) const {\n    double d = abs(c - p);\n    if (equals(d, r)) return 1;  // ON\n    if (d < r + EPS) return 2;   // IN\n    return 0;                    // OUT\n  }\n};\n\ntypedef vector<Point> Polygon;\n\ndouble cross(Vector a, Vector b) { return a.x * b.y - a.y * b.x; }\n\ndouble dot(Vector a, Vector b) { return a.x * b.x + a.y * b.y; }\n\nbool isOrthogonal(Vector a, Vector b) { return equals(dot(a, b), 0.0); }\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n  return isOrthogonal(a1 - a2, b1 - b2);\n}\n\nbool isOrthogonal(Segment s1, Segment s2) {\n  return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nbool isParallel(Vector a, Vector b) { return equals(cross(a, b), 0.0); }\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n  return isParallel(a1 - a2, b1 - b2);\n}\n\nbool isParallel(Segment s1, Segment s2) {\n  return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nPoint project(Segment s, Point p) {\n  Vector base = s.p2 - s.p1;\n  double r = dot(p - s.p1, base) / base.norm();\n  return s.p1 + base * r;\n}\n\nPoint reflect(Segment s, Point p) { return p + (project(s, p) - p) * 2.0; }\n\ndouble distance(Point a, Point b) { return (a - b).abs(); }\n\ndouble distanceLP(Line l, Point p) {\n  return abs(cross(l.p2 - l.p1, p - l.p1)) / (l.p2 - l.p1).abs();\n}\n\ndouble distanceSP(Segment s, Point p) {\n  if (dot(s.p2 - s.p1, p - s.p1) < 0.0) return (p - s.p1).abs();\n  if (dot(s.p1 - s.p2, p - s.p2) < 0.0) return (p - s.p2).abs();\n  return distanceLP(s, p);\n}\n\nbool intersect(Segment s1, Segment s2);\ndouble distance(Segment s1, Segment s2) {\n  if (intersect(s1, s2)) return 0.0;\n  return min({distanceSP(s1, s2.p1), distanceSP(s1, s2.p2),\n              distanceSP(s2, s1.p1), distanceSP(s2, s1.p2)});\n}\n\nenum CCW {\n  COUNTER_CLOCKWISE = 1,\n  CLOCKWISE = -1,\n  ONLINE_BACK = 2,\n  ONLINE_FRONT = -2,\n  ON_SEGMENT = 0,\n};\n\nCCW ccw(Point p0, Point p1, Point p2) {\n  Vector a = p1 - p0;\n  Vector b = p2 - p0;\n  if (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n  if (cross(a, b) < -EPS) return CLOCKWISE;\n  if (dot(a, b) < -EPS) return ONLINE_BACK;      // p2, p0, p1\n  if (a.norm() < b.norm()) return ONLINE_FRONT;  // p0, p1, p2\n  return ON_SEGMENT;                             // p0, p2, p1\n}\n\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n  return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n          ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\n\nbool intersect(Segment s1, Segment s2) {\n  return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\nPoint crossPoint(Segment s1, Segment s2) {\n  Vector base = s2.p2 - s2.p1;\n  double d1 = abs(cross(base, s1.p1 - s2.p1));\n  double d2 = abs(cross(base, s1.p2 - s2.p1));\n  double t = d1 / (d1 + d2);\n  return s1.p1 + (s1.p2 - s1.p1) * t;\n}\n\nbool intersect(Circle c, Line l) { return distanceLP(l, c.c) < c.r; }\n\npair<Point, Point> crossPoint(Circle c, Line l) {\n  assert(intersect(c, l));\n  Vector pr = project(l, c.c);\n  Vector e = (l.p2 - l.p1) / (l.p2 - l.p1).abs();\n  double base = sqrt(c.r * c.r - norm(pr - c.c));\n  return make_pair(pr + e * base, pr - e * base);\n}\n\ndouble arg(Vector p) { return atan2(p.y, p.x); }\nVector polar(double a, double r) { return Point(cos(r) * a, sin(r) * a); }\n\nbool intersect(Circle c1, Circle c2) {\n  return (c1.c - c2.c).abs() < c1.r + c2.r;\n}\n\npair<Point, Point> crossPoint(Circle c1, Circle c2) {\n  assert(intersect(c1, c2));\n  double d = abs(c1.c - c2.c);\n  double a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n  double t = arg(c2.c - c1.c);\n  return make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n}\n\n/*\n  IN 2\n  ON 1\n  OUT 0\n*/\nint contains(Polygon g, Point p) {\n  int n = g.size();\n  bool x = false;\n  for (int i = 0; i < n; ++i) {\n    Point a = g[i] - p, b = g[(i + 1) % n] - p;\n    if (abs(cross(a, b)) < EPS && dot(a, b) < EPS) return 1;\n    if (a.y > b.y) swap(a, b);\n    if (a.y < EPS & EPS < b.y && cross(a, b) > EPS) x = !x;\n  }\n  return (x ? 2 : 0);\n}\n\nPolygon convexHull(Polygon s) {\n  Polygon u, l;\n  if (s.size() < 3) return s;\n  sort(s.begin(), s.end());\n  u.push_back(s[0]);\n  u.push_back(s[1]);\n  l.push_back(s[s.size() - 1]);\n  l.push_back(s[s.size() - 2]);\n\n  for (int i = 2; i < s.size(); ++i) {\n    for (int n = u.size(); n >= 2 && ccw(u[n - 2], u[n - 1], s[i]) != CLOCKWISE;\n         --n) {\n      u.pop_back();\n    }\n    u.push_back(s[i]);\n  }\n\n  for (int i = s.size() - 3; i >= 0; i--) {\n    for (int n = l.size(); n >= 2 && ccw(l[n - 2], l[n - 1], s[i]) != CLOCKWISE;\n         --n) {\n      l.pop_back();\n    }\n    l.push_back(s[i]);\n  }\n\n  reverse(l.begin(), l.end());\n  for (int i = u.size() - 2; i >= 1; --i) l.push_back(u[i]);\n\n  return l;\n}\n\nCircle circumscribedCircle(const Point &a, const Point &b, const Point &c) {\n  double a1, a2, b1, b2, c1, c2;\n  a1 = 2 * (b.x - a.x);\n  b1 = 2 * (b.y - a.y);\n  c1 = a.x * a.x - b.x * b.x + a.y * a.y - b.y * b.y;\n  a2 = 2 * (c.x - a.x);\n  b2 = 2 * (c.y - a.y);\n  c2 = a.x * a.x - c.x * c.x + a.y * a.y - c.y * c.y;\n  Point p;\n  p.x = (b1 * c2 - b2 * c1) / (a1 * b2 - a2 * b1);\n  p.y = (c1 * a2 - c2 * a1) / (a1 * b2 - a2 * b1);\n\n  return Circle(p, abs(p - a));\n}\n\nint main() {\n  int q;\n  cin >> q;\n  rep(i, q) {\n    Segment s1, s2;\n    cin >> s1 >> s2;\n    printf(\"%.10lf\\n\", distance(s1, s2));\n  }\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n#define EPS (1e-10)    //誤差\ntypedef complex<double> P;\n\n//実数同士の比較\nbool EQ(double a, double b){\n    return (abs(a - b) < EPS);\n}\n\n//二つのベクトルが等しいかどうか\nbool EQV(P a, P b){\n    return (EQ(a.real(), b.real()) && EQ(a.imag(), b.imag()));\n}\n\n//内積\ndouble dot(P a, P b){\n    return (a.real() * b.real() + a.imag() * b.imag());\n}\n\n//外積\ndouble cross(P a, P b){\n    return (a.real() * b.imag() - a.imag() * b.real());\n}\n\n// 点a,bを通る直線と点cとの距離\ndouble distance_l_p(P a, P b, P c) {\n  return abs(cross(b-a, c-a)) / abs(b-a);\n}\n\n// 点cが線分a,b上にあるかないか(3)\nint is_point_on_line(P a, P b, P c) {\n  // |a-c| + |c-b| <= |a-b| なら線分上\n  return (abs(a-c) + abs(c-b) < abs(a-b) + EPS);\n}\n\n// 点a,bを端点とする線分と点cとの距離\ndouble distance_ls_p(P a, P b, P c) {\n  if ( dot(b-a, c-a) < EPS ) return abs(c-a);\n  if ( dot(a-b, c-b) < EPS ) return abs(c-b);\n  return abs(cross(b-a, c-a)) / abs(b-a);\n}\n\n//図を思い出す\nint ccw(P a, P b, P c) {\n    b -= a; c -= a;\n    if( cross(b,c) > EPS ) return +1;\n    if( cross(b,c) < -EPS ) return -1;\n    if( dot(b,c) < 0 ) return +2;\n    if( norm(b) < norm(c) ) return -2;\n    return 0;\n}\n\n// a1,a2を端点とする線分とb1,b2を端点とする線分の交差判定\nint is_intersected_ls(P a1, P a2, P b1, P b2) {\n  return ( ccw(a1,a2,b1) * ccw(a1,a2,b2) <= 0 ) &&\n           ( ccw(b1,b2,a1) * ccw(b1,b2,a2) <= 0 );\n}\n\n// a1,a2を通る直線とb1,b2を通る直線の交点計算\nP intersection_l(P a1, P a2, P b1, P b2) {\n  P a = a2 - a1; P b = b2 - b1;\n  return a1 + a * cross(b, b1-a1) / cross(b, a);\n}\n\nint main(){\n   \n   int q; cin >> q;\n    for(int i = 0; i < q; i++){\n        P p0, p1, p2, p3; cin >> p0.real() >> p0.imag() >> p1.real() >> p1.imag() >> p2.real() >> p2.imag() >> p3.real() >> p3.imag();\n        double ans = 1e10;\n        ans = min(ans, distance_ls_p(p0, p1, p2));\n        ans = min(ans, distance_ls_p(p0, p1, p3));\n        ans = min(ans, distance_ls_p(p2, p3, p0));\n        ans = min(ans, distance_ls_p(p2, p3, p1));\n        if(is_intersected_ls(p0, p1, p2, p3)) ans = 0.0;\n        printf(\"%.10f\\n\", ans);\n    }\n    \n    return 0;\n}\n\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\nusing namespace std;\n\n//?????????\n#pragma region MACRO \n#define putans(x)  std::cerr << \"answer: \" ; cout << (x) << endl\n#define dputans(x) std::cerr << \"answer: \"; cout << setprecision(27) << (double)(x) << endl\n#define REP(i,a,n) for(int i=(a); i<(int)(n); i++)\n#define RREP(i,a,n) for(int i=(int)(n-1); i>= a; i--)\n#define rep(i,n) REP(i,0,n)\n#define rrep(i,n) RREP(i,0,n)\n#define all(a) begin((a)),end((a))\n#define mp make_pair\n#define exist(container, n) ((container).find((n)) != (container).end())\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n#ifdef _DEBUG //???????????????????????????????????????????????????\nstd::ifstream ifs(\"data.txt\");\n#define put ifs >>\n#else //?????£????????????????????§?????????????????????\n#define put cin >>\n#endif\n#pragma endregion\n\n//???????????°??????????????´\n#pragma region CODING_SUPPORT\n#ifdef _DEBUG\n#define dbg(var0) { std::cerr << ( #var0 ) << \"=\" << ( var0 ) << endl; }\n#define dbg2(var0, var1) { std::cerr << ( #var0 ) << \"=\" << ( var0 ) << \", \"; dbg(var1); }\n#define dbg3(var0, var1, var2) { std::cerr << ( #var0 ) << \"=\" << ( var0 ) << \", \"; dbg2(var1, var2); }\n#define dbgArray(a,n) {std::cerr << (#a) << \"=\";  rep(i,n){std::cerr <<(a[i])<<\",\";} cerr<<endl;} \n#else\n#define dbg(var0) {}\n#define dbg2(var0, var1) {}\n#define dbg3(var0, var1, var2) {}\n#define dbgArray(a,n) {}\n#endif \n#pragma endregion \n//typedef????????????????????????????¶????????????§?????????\n#pragma region TYPE_DEF\ntypedef long long ll;\ntypedef pair<int, int> pii; typedef pair<string, string> pss; typedef pair<int, string>pis;\ntypedef vector<string> vs; typedef vector<int> vi;\n#pragma endregion\n//??????????????°(???????????????????????§??????)\n#pragma region CONST_VAL\n#define PI (2*acos(0.0))\n#define EPS (1e-10)\n#define MOD (ll)(1e9 + 7)\n#define INF (ll)(1e9)\n#pragma endregion\n\n//?????????????????????\n#pragma region Geometry\nclass Point {//????????????????????????\npublic:\n\tdouble x, y;\n\tPoint(double x = 0, double y = 0) : x(x), y(y) {}\n\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a) { return Point(x * a, y * a); }\n\tdouble operator * (Point p) { return dot(p); }\n\tPoint operator / (double a) { return Point(x / a, y / a); }\n\n\tdouble abs() { return sqrt(norm()); }\n\tdouble norm() { return x*x + y*y; }\n\n\tbool operator < (const Point &p) const { return  x != p.x ? x < p.x : y < p.y; }\n\tbool operator == (const Point &p) const { return  fabs(x - p.x) < EPS && fabs(y - p.y) < EPS; }\n\t//???????????????\n\tdouble dot(Point p) { return x * p.x + y * p.y; }\n\tdouble cross(Point p) { return x * p.y - y * p.x; }\n\n\n};\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0) :c(c), r(r) {}\n};\nstruct Segment {//??????\n\tPoint p1, p2;\n};\ntypedef Point Vector;\ntypedef Segment Line;//??´???\ntypedef vector<Point> Polygon; //????§???¢?????????\n\n//?????????????¨????\ndouble v_norm(Point p) { return p.x * p.x + p.y * p.y; }\ndouble abs(Point p) { return sqrt(v_norm(p)); }\ndouble dot(Point a, Point b) { return a.x * b.x + a.y * b.y; } //??????\ndouble cross(Point a, Point b) { return a.x * b.y - a.y * b.x; }//??????\n\n//??´????????????\nbool isOrthogonal(Vector a, Vector b) { return equals(a*b, 0.0); }\nbool isParallel(Vector a, Vector b) { return equals(cross(a, b), 0.0); }\n\n//??????s???????????????p????°???±\nPoint projection(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(( p - s.p1 ), base) / v_norm(base);\n\treturn s.p1 + base*r;\n}\n//??????s???????????????p???????°?\nPoint reflection(Segment s, Point p) { return p + ( projection(s, p) - p ) * 2; }\n\n//3??????????????¢????????????\n//p1-p0???????????¨?????? p2-p0 ???2????????????????????????\nstatic const int COUNTER_CLOCKWISE = 1;//???????¨???????\nstatic const int CLOCKWISE = -1;//????¨???????\nstatic const int ONLINE_BACK = 2;//????????´?????¶p2,p0,p1??????\nstatic const int ONLINE_FRONT = -2;//????????´??????p0,p1,p2??????\nstatic const int ON_SEGMENT = 0;//p2???p0,p1??????????????´???\nint ccw(Point p0, Point p1, Point p2) {//????¨????????????¢??°\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS) return CLOCKWISE;\n\tif (dot(a, b) < -EPS) return ONLINE_BACK;\n\tif (a.norm() < b.norm()) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\n//??????p1p2??¨p3p4???????????????\nbool intersect(Point p1, Point p2, Point p3, Point p4) {return ( (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0) && (ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0));}\nbool intersect(Segment s1, Segment s2) {return intersect(s1.p1 , s1.p2, s2.p1, s2.p2);}\n\n//?????¢ Segment Line Point\ndouble getDistance(Point a, Point b) { return abs( a - b ); }\ndouble getDistanceLP(Line l, Point p) {return abs(cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1));}\ndouble getDistanceSP(Segment s, Point p) {\n\tdbg(abs(p - s.p1));\n\tdbg(abs(p - s.p2));\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0) return abs(p - s.p1);\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0) return abs(p - s.p2);\n\treturn getDistanceLP(s, p);\n}\ndouble getDistance(Segment s1, Segment s2) {\n\tif (intersect(s1, s2)) return 0.0;\n\tdbg2(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2));\t\n\tdbg2(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2));\n\treturn min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2))\n\t         , min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\n//2???????????????\nPoint getCrossPoint(Segment s1, Segment s2) {\n\tVector base = s2.p2 - s2.p1;\n\tdouble d1 = abs(cross(base , s1.p1 - s2.p1));\n\tdouble d2 = abs(cross(base , s1.p2 - s2.p1));\n\tdouble t = d1 / ( d1 + d2 );\n\treturn s1.p1 + (s1.p2 - s1.p1 ) * t;\n}\n\n//??´?????¨????????????????????????\npair<Point, Point> getCrossPoints(Circle c, Line l) {\n\t//assert(intersect(c, i)); ?????????????????´????????????????????????\n\tVector pr = projection(l , c.c);\n\tVector e = ( l.p2 - l.p1 ) / abs(l.p2 - l.p1);\n\tdouble base = sqrt(c.r * c.r - (pr - c.c).norm());\n\treturn mp(pr + e * base, pr - e * base);\n}\n\n//????????????????????????\nstatic const int IN_POLYGON = 2;//????§???¢????????¨\nstatic const int OUT_POLYGON = 1;//????§???¢????????¨\nstatic const int ON_POLYGON = 0;//????§???¢????????????\nint contains(Polygon g, Point p) {\n\tint n = g.size();\n\tbool x = false;\n\trep(i, n) {\n\t\tPoint a = g[i] - p, b = g[( i + 1 ) % n] - p;\n\t\tif (abs(cross(a, b)) < EPS && dot(a, b) < EPS) return OUT_POLYGON;\n\t\tif (a.y > b.y) swap(a, b);\n\t\tif (a.y < EPS && EPS < b.y && cross(a, b)) x = !x;\n\t}\n\treturn ( x ? IN_POLYGON : ON_POLYGON );\n}\n\n//?????? CGL_4_A : Convex Hull; \n//containsPointOnline ?????????????????????????????????????????????\n//???????§???¢???????????§????????????????????????????????§???????????????????????????????????§???\n//???????¨???¨?????§???????????§?¨?????????????\nPolygon ConvexHull(Polygon s, bool containsPointOnline = false) {\n\tPolygon u, l;\n\tif (s.size() < 3) return s;\n\tsort(s.begin(), s.end());\n\tu.push_back(s[0]); \n\tu.push_back(s[1]);\n\tl.push_back(s[s.size() - 1]);\n\tl.push_back(s[s.size() - 2]);\n\tauto conditionContaining = [](int ccw, bool containsPointOnline)->bool{\n\t\tif (containsPointOnline) return ccw == COUNTER_CLOCKWISE;\n\t\telse return ccw != CLOCKWISE;\n\t};\n\tfor (int i = 2; i < s.size(); i++) {//?????´?????°???\n\t\tfor (int n = u.size(); ( n >= 2 ) && conditionContaining( ccw(u[n - 2], u[n - 1], s[i]),containsPointOnline); n--) {\n\t\t\tu.pop_back();\n\t\t}\n\t\tu.push_back(s[i]);\n\t}\n\tfor (int i = s.size() - 3; i >= 0; i--) {//?????´?????°???\n\t\tfor (int n = l.size(); n >= 2 && conditionContaining( ccw(l[n - 2], l[n - 1], s[i]),containsPointOnline); n--)l.pop_back();\n\t\tl.push_back(s[i]);\n\t}\n\treverse(l.begin(), l.end());\n\tfor (int i = u.size() - 2; i >= 1; i--) l.push_back(u[i]);\n\tdouble tmpMax = l[0].y;\n\tint rotIndex = 0;\n\tREP(i,1,l.size()) {//?????¶??????????????????????????????????????´??????\n\t\tif (l[i].y < tmpMax) {\n\t\t\trotIndex = i;\n\t\t\ttmpMax = l[i].y;\n\t\t}\n\t}\n\trotate(l.begin(), l.begin() + rotIndex, l.end());\n\treturn l;\n}\n#pragma endregion \n\n\n//??????????£?????????°???\n//https://www23.atwiki.jp/akitaicpc/pages/65.html\n\nint main() {\n\tint q; put q;\n\trep(i, q) {\n\t\tPoint p[4];\n\t\trep(j, 4) {\n\t\t\tput p[j].x >> p[j].y;\n\t\t}\n\t\tSegment s0, s1;\n\t\ts0.p1 = p[0];\n\t\ts0.p2 = p[1];\n\t\ts1.p1 = p[2];\n\t\ts1.p2 = p[3];\n\t\tdouble dist = getDistance(s0,s1);\n\t\tdputans(dist);\n\t}\n\nEND:\n\treturn 0;\n}\n\n\t//int n; put n;\n\t//Polygon p;\n\t//rep(i, n) {\n\t//\tdouble x, y; put x >> y;\n\t//\tp.push_back(Point(x, y));\n\t//}\n\t//Polygon k = ConvexHull(p,true);\n\t//cout << k.size() << endl;\n\t//rep(i, k.size()) {\n\t//\tcout << k[i].x << \" \" << k[i].y << endl;\n\t//}\t\n\n\t/*double xp1, yp1, xp2, yp2; put xp1 >> yp1 >> xp2 >> yp2;\n\tSegment s;\n\ts.p1 = Point(xp1, yp1);\n\ts.p2 = Point(xp2, yp2);\n\n\tint n; put n;\n\trep(i, n) {\n\t\tPoint p;\n\t\tput p.x >> p.y;\n\t\tPoint prj =reflection(s, p);\n\t\tcout << setprecision(13) << prj.x << \" \" << prj.y << endl;\n\t}*/\n\n\t//ll ans = 0;\n\t//int n; put n;\n\t//vi a;\n\t//set<Range> rl;\n\t//rep(i, n) {\n\t//\tint k; put k;\n\t//\ta.push_back(k);\n\t//}\n\t//reverse(a.begin(), a.end());\n\t//int miner = a[0];\n\t//ans += miner;\n\t//REP(i,1,n) {\n\t//\tif (a[i] < miner) {\n\t//\t\tminer = a[i];\n\t//\t\tans += miner * ( i + 1 );\n\t//\t}\n\t//\telse {\n\t//\t\tans += miner *(i)+a[i];\n\t//\t}\n\t//}\n\n\t////???????????¬??????????????\\???????????????\n\t//auto getI = [&]()->auto { int tmp; put tmp; return tmp; };\n\t//auto getLL = [&]()->auto { ll tmp; put tmp; return tmp; };\n\t//auto getS = [&]()->auto { string tmp; put tmp; return tmp; };\n//\n//int n, a, b; put n >> a >> b;\n//\tvi t;\n//\trep(i, n) {\n//\t\tt.push_back(get());\n//\t}\n//\tint count = 0;\n//\trep(i, n) {\n//\t\tif (t[i] < a || b <= t[i])count++;\n//\t}\n//\tputans(count);\n\n//\n//\tset<string> list;\n//\tint ans = 0;\n//\tint n; put n;\n//\tint k; put k;\n//\tint numAlphabet[26];\n//\tfill(all(numAlphabet), 0);\n//\trep(i, n) {\n//\t\tstring s; put s;\n//\t\tif (exist(list, s))continue;\n//\t\tlist.insert(s);\n//\t\tnumAlphabet[s[0] - 'A']++;\n//\t}\n//\tsort(all(numAlphabet),greater<int>());\n//\twhile (true) {\n//\t\trep(i, k) {\n//\t\t\tif (numAlphabet[i] == 0) goto END;\n//\t\t\telse numAlphabet[i]--;\n//\t\t}\n//\t\tsort(all(numAlphabet), greater<int>());\n//\t\tans++;\n//\t}\n//END:\n//\tputans(ans);\n\n\n\t//int t; put t;\n\t//rep(i, t) {\n\t//\tint n, d; put n >> d;\n\t//\tif (n == 1) {\n\t//\t\tputans(d);\n\t//\t\tcontinue;\n\t//\t}\n\t//\tputans(n % 2 != 0 ? ( n - 1 ) * 127 + d : ( n - 1 ) * 127 + ( 127 ^ d ));\n\t//}\n\n\n//\n//int n; put n;\n//string s1, s2;\n//string r;\n//string patan1[4] = { \".\",\"#\",\".\",\"#\" };\n//string patan2[4] = { \".\",\".\",\"#\",\"#\" };\n//bool front = true;\n//rep(j, 420 / 4) {\n//\tif (front) {\n//\t\trep(i, 4) {\n//\t\t\tcout << s1 + patan1[i] + \"\\n\" << s2 + patan2[i] << endl;\n//\t\t\tcin >> r;\n//\t\t\tif (r == \"T\") {\n//\t\t\t\ts1 += patan1[i];\n//\t\t\t\ts2 += patan2[i];\n//\t\t\t\tbreak;\n//\t\t\t}\n//\t\t\tif (r == \"F\" && i == 3) {\n//\t\t\t\tfront = !front;\n//\t\t\t}\n//\t\t\tif (r == \"end\")goto END;\n//\t\t}\n//\t}\n//\telse {\n//\t\trep(i, 4) {\n//\t\t\tcout << patan1[i] + s1 + \"\\n\" << patan2[i] + s2 << endl;\n//\t\t\tcin >> r;\n//\t\t\tif (r == \"T\") {\n//\t\t\t\ts1 = patan1[i] + s1;\n//\t\t\t\ts2 = patan2[i] + s2;\n//\t\t\t\tbreak;\n//\t\t\t}\n//\t\t\tif (r == \"F\" && i == 3) {\n//\t\t\t\tfront = !front;\n//\t\t\t}\n//\t\t\tif (r == \"end\")goto END;\n//\t\t}\n//\t}\n//\n//}\n//END:\n//cout << endl;\n\n\n\n\n\t//bool filled[1000][1000];\n\t//fill(*filled, *filled + 1000 * 1000, false);\n\t//int vx[4] = { 1,0,-1,0 };\n\t//int vy[4] = { 0,1,0,-1 };\n\t//Polygon sheep;\n\t//Polygon convex_sheep;\n\t//ll num = 0;\n\t//int h, w; put h >> w;\n\t//rep(i, h) {\n\t//\tstring s; put s;\n\t//\trep(j, s.size()) {\n\t//\t\tif (s[j] == 'X') {\n\t//\t\t\tif (i == 0 || j == 0 || i == h-1 || j == w-1) {\n\t//\t\t\t\tputans(-1);\n\t//\t\t\t\tgoto END;\n\t//\t\t\t}\n\t//\t\t\trep(k, 4) {\n\t//\t\t\t\tif (!filled[i + vx[k]][j + vy[k]]) {\n\t//\t\t\t\t\tsheep.push_back(Point(i + vx[k],j + vy[k]));\n\t//\t\t\t\t\tfilled[i + vx[k]][j + vy[k]] = true;\n\t//\t\t\t\t}\n\t//\t\t\t}\n\t//\t\t}\n\t//\t}\n\t//}\n\t//convex_sheep = ConvexHull(sheep);\n\n\t//rep(i, convex_sheep.size()) {\n\t//\tPoint s = convex_sheep[i % convex_sheep.size()];\n\t//\tPoint g = convex_sheep[(i + 1) % convex_sheep.size()];\n\t//\tll mandist = max(abs(s.x - g.x),abs(s.y - g.y));\n\t//\tdbg(mandist);\n\t//\tnum += mandist;\n\t//} \n\t//putans(num);"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <math.h>\n#include <iostream>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs(a - b) < EPS)\n\nclass Point{\npublic:\n    double x, y;\n\n    Point(double x_ = 0, double y_ = 0){\n        x = x_;\n        y = y_;\n    }\n\n    Point operator+ (Point p){\n        return Point(x + p.x, y + p.y);\n    };\n\n    Point operator- (Point p){\n        return Point(x - p.x, y - p.y);\n    };\n\n    Point operator* (double k){\n        return Point(x * k, y * k);\n    }\n\n    Point operator/ (double k){\n        return Point(x / k, y / k);\n    }\n\n    double norm(){\n        return x * x + y * y;\n    }\n\n    double abs(){\n        return sqrt(norm());\n    }\n\n    bool operator == (const Point &p) const{\n        return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n    }\n};\n\ntypedef Point Vector;\n\nclass Seg{\npublic:\n    Point p1;\n    Point p2;\n    Seg(Point p1_, Point p2_){\n        p1 = p1_;\n        p2 = p2_;\n    }\n};\n\ndouble dot(Vector a, Vector b){\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b){\n    return a.x * b.y - a.y * b.x;\n}\n\nbool isParallel(Vector a, Vector b){\n    return equals(cross(a, b), 0.0);\n}\n\nbool isOrthogonal(Vector a, Vector b){\n    return equals(dot(a, b), 0.0);\n}\n;\ndouble getCos(Vector a, Vector b){\n    return dot(a, b) / (a.abs() * b.abs());\n}\n\ndouble dist(Point p1, Point p2){\n    return sqrt(pow((p1.x - p2.x), 2) + pow((p1.y - p2.y), 2));\n}\n\nPoint project(Seg s, Point p0){\n    if(s.p1 == p0){\n        return p0;\n    }\n    if(s.p2 == p0){\n        return p0;\n    }\n    return s.p1 + (s.p2 - s.p1) / (s.p2 - s.p1).abs() * (p0 - s.p1).abs() * getCos(s.p2 - s.p1, p0 - s.p1);\n}\n\nPoint reflect(Seg s, Point p0){\n    Point p = project(s, p0);\n    return p0 + (p - p0) * 2;\n}\n\n\n#define COUNTER_CLOCKWISE 1\n#define CLOCKWISE -1\n#define ONLINE_BACK 2\n#define ONLINE_FRONT -2\n#define ON_SEGMENT 0\n\nint counterClockwise(Point p0, Point p1, Point p2){\n    Vector v1 = p1 - p0;\n    Vector v2 = p2 - p0;\n    if(cross(v1, v2) > EPS) return COUNTER_CLOCKWISE;\n    if(cross(v1, v2) < -EPS) return CLOCKWISE;\n    if(dot(v1, v2) < -EPS) return ONLINE_BACK;\n    if(v1.norm() < v2.norm()) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\nbool intersect(Seg s1, Seg s2){\n    int t1 = counterClockwise(s1.p1, s1.p2, s2.p1);\n    int t2 = counterClockwise(s1.p1, s1.p2, s2.p2);\n    int t3 = counterClockwise(s2.p1, s2.p2, s1.p1);\n    int t4 = counterClockwise(s2.p1, s2.p2, s1.p2);\n    if(t1 * t2 <= 0){\n        if(t3 * t4 <= 0){\n            return true;\n        }\n    }\n    return false;\n}\n\ndouble getDistanceSP(Seg s, Point p0){\n    if(dot(s.p2 - s.p1, p0 - s.p1) < 0.0) return (p0 - s.p1).abs();\n    if(dot(s.p1 - s.p2, p0 - s.p2) < 0.0) return (p0 - s.p2).abs();\n    return (project(s, p0) -  p0).abs();\n}\n\ndouble getDistance(Seg s1, Seg s2){\n    if(intersect(s1, s2)){\n        return 0.0;\n    }\n    return min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n                min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\nint main(){\n    int q;\n    scanf(\"%d\", &q);\n\n    for(int i = 0; i < q; i++){\n        int xp0, yp0, xp1, yp1, xp2, yp2, xp3, yp3;\n        scanf(\"%d\", &xp0);\n        scanf(\"%d\", &yp0);\n        scanf(\"%d\", &xp1);\n        scanf(\"%d\", &yp1);\n        scanf(\"%d\", &xp2);\n        scanf(\"%d\", &yp2);\n        scanf(\"%d\", &xp3);\n        scanf(\"%d\", &yp3);\n\n        printf(\"%.10f\\n\", getDistance(Seg(Point(xp0, yp0), Point(xp1, yp1)), Seg(Point(xp2, yp2), Point(xp3, yp3))));\n    }\n\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <string>\n#include <cstring>\n#include <deque>\n#include <list>\n#include <queue>\n#include <stack>\n#include <vector>\n#include <utility>\n#include <algorithm>\n#include <map>\n#include <set>\n#include <complex>\n#include <cmath>\n#include <limits>\n#include <climits>\n#include <ctime>\n#include <cassert>\nusing namespace std;\n\n#define rep(i,a,n) for(int i=a; i<n; i++)\n#define repr(i,a,n) for(int i=a; i>=n; i--)\n#define pb(a) push_back(a)\n#define fr first\n#define sc second\n#define INF 999999999\n\n#define X real()\n#define Y imag()\n#define EPS (1e-10)\n#define EQ(a,b) (abs((a) - (b)) < EPS)\n#define EQV(a,b) ( EQ((a).X, (b).X) && EQ((a).Y, (b).Y) )\n#define LE(n, m) ((n) < (m) + EPS)\n#define GE(n, m) ((n) + EPS > (m))\n\ntypedef vector<int> VI;\ntypedef vector<VI> MAT;\ntypedef pair<int, int> pii;\ntypedef long long int ll;\n\ntypedef complex<double> P;\ntypedef pair<P, P> L;\ntypedef pair<P, double> C;\n\nint dy[]={0, 0, 1, -1};\nint dx[]={1, -1, 0, 0};\nint const MOD = 1000000007;\n\nnamespace std {\n    bool operator<(const P a, const P b) {\n        return a.X != b.X ? a.X < b.X : a.Y < b.Y;\n    }\n}\n\n// 2???????????????????????????????±???????\ndouble dot(P a, P b) {\n    return (a.X * b.X + a.Y * b.Y);\n}\n\n// 2???????????????????????????????±???????\ndouble cross(P a, P b) {\n    return (a.X * b.Y - a.Y * b.X);\n}\n\n// ??? a1, a2 ???????????¨??????????????¨??? b ??¨????????¢\ndouble dist_sp(P a1, P a2, P b) {\n    if( dot(a2-a1, b-a1) < EPS ) return abs(b - a1);\n    if( dot(a1-a2, b-a2) < EPS ) return abs(b - a2);\n    return abs( cross(a2-a1, b-a1) ) / abs(a2 - a1);\n}\n\nint ccw(P a, P b, P c) {\n    b -= a; c -= a;\n    if( cross(b,c) > EPS ) return +1;\n    if( cross(b,c) < -EPS ) return -1;\n    if( dot(b,c) < 0 ) return +2;\n    if( norm(b) < norm(c) ) return -2;\n    return 0;\n}\n\n// ?????? a1, a2 ??¨ ?????? b1, b2 ??¨????????¢\nbool isec_ss(P a1, P a2, P b1, P b2) {\n    return ( ccw(a1,a2,b1) * ccw(a1,a2,b2) <= 0 ) &&\n           ( ccw(b1,b2,a1) * ccw(b1,b2,a2) <= 0 );\n}\n\ndouble dist_ss(P a1, P a2, P b1, P b2) {\n    if(isec_ss(a1, a2, b1, b2)) return 0;\n    return min( min(dist_sp(a1, a2, b1), dist_sp(a1, a2, b2)),\n                min(dist_sp(b1, b2, a1), dist_sp(b1, b2, a2)) );\n}\n\nint main() {\n    P a, b, c, d; \n    int q; cin >> q;\n    rep(i,0,q) {\n        cin >> a.X >> a.Y >> b.X >> b.Y >> c.X >> c.Y >> d.X >> d.Y;\n        double ans = dist_ss(a,b,c,d);\n        printf(\"%.10f\\n\", ans);\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n#define EPS 1e-10\n#define equals(a,b) (fabs( (a) - (b) )< EPS )\ntypedef struct point{\n\tdouble x,y;\n\tpoint(){};\n\tpoint(double x ,double y):x(x),y(y){};\n\tpoint operator + (point &p){ return point(x+p.x,y+p.y);\t}\n\tpoint operator - (point &p){ return point(x-p.x,y-p.y);\t}\n\tpoint operator * (point &p){ return point(x*p.x-y*p.y,x*p.y+y*p.x) ;}\n\tpoint operator * (double a){ return point(x*a,y*a);\t}\n\tpoint operator / (double a){ return point(x/a,y/a);\t}\n\t\n\tdouble abs() { return sqrt(norm()); }\n\tdouble norm() { return x*x+y*y; }\n\t\n\tbool operator < (const point &p) const { return x!=p.x ? x<p.x : y<p.y; }\n\tbool operator == (const point &p) const { return fabs(x-p.x)<EPS && fabs(y-p.y)<EPS; }\n}point;\ndouble abs(point a){return a.abs();}\ndouble norm(point a){return a.norm();}\n\ntypedef complex<double> C;\ntypedef struct { point s,e;} line;\n\nC convert(point a){ return C(a.x,a.y); }\npoint convert( C a){ return point(a.real(),a.imag() );}\ndouble dot(point a,point b){ return a.x*b.x+a.y*b.y ; } //内積　a・b\ndouble cross(point a,point b){ return a.x*b.y - a.y*b.x ; }//外積(z成分)　a×b\npoint vec(line l){return l.e-l.s;}\nline make(point s,point e){\n\tline res; res.s=s; res.e=e;\n\treturn res;\n}\npoint make(){ \n\tdouble x,y; cin>>x>>y;\n       \treturn point(x,y);\n}\n//直交\nbool isorthogonal(point a,point b){ return equals(dot(a,b), 0.0); }\nbool isorthogonal(line l1,line l2){ return isorthogonal(vec(l1),vec(l2)); }\n//平行\nbool isparallel(point a,point b){ return equals(cross(a,b),0.0); }\nbool isparallel(line l1,line l2){ return isparallel(vec(l1),vec(l2)); }\n//射影\npoint project(line s,point p){\n\tpoint base = vec(s);\n\tdouble r=dot(p-s.s,base)/base.norm();\n\tbase = base*r;\n\treturn s.s+base;\n}\n//反射\npoint reflect(line l,point p){\n\tpoint tmp=project(l,p)-p;\n\ttmp= tmp*2.0;\n\treturn p+tmp;\n\n}\n//交差判定\n\nint ccw(point p0,point p1,point p2){\n\tpoint a = p1-p0;\n\tpoint b = p2-p0;\nif(cross(a,b)>EPS) return 1;//counter_clockwise\nif(cross(a,b)<-EPS) return -1;//clockwise\nif(dot(a,b)<-EPS)return 2;//online_back\nif(a.norm()<b.norm() ) return -2;//online_front\nreturn 0;//on_segment\n}\n// line p1-p2 line p3-p4\nbool intersect(point p1,point p2,point p3,point p4){\n\treturn (ccw(p1,p2,p3)*ccw(p1,p2,p4)<=0 && ccw(p3,p4,p1)*ccw(p3,p4,p2)<=0 ); \n}\n// line l1,l2\nbool intersect(line l1,line l2){ return intersect(l1.s,l1.e,l2.s,l2.e); }\n\n\n//距離\n//point-point\ndouble distance(point a,point b){ return abs(a-b); }\n//point-line(直線）\ndouble distance2(line l,point p){\n\treturn abs(cross(vec(l),p-l.s)/abs(l.e-l.s));\n}\n//point-line(線分)\ndouble distance(line l,point p){\n\tif( dot(vec(l),p-l.s) <0.0 ) return abs(p-l.s);\n\tif( dot(l.s-l.e,p-l.e) <0.0 ) return abs(p-l.e);\n\treturn distance2(l,p);\n}\n//line-line\ndouble distance(line l1,line l2){\n\tif(intersect(l1,l2)){\n\t\tcerr<<\"ok\"<<endl; \n\t\treturn 0.0;\n\t}\n\treturn min(min(distance(l1,l2.s),distance(l1,l2.e) ), min(distance(l2,l1.s),distance(l2,l1.e) ) );\n}\n\n//交点\npoint crosspoint(line l1,line l2){\n\tpoint base = vec(l2);\n\tdouble d1 = abs(cross(base,l1.s-l2.s) );\n\tdouble d2 = abs(cross(base,l1.e-l2.s) );\n\tdouble t = d1/(d1+d2);\n\tpoint tmp = vec(l1)*t;\n\treturn l1.s+tmp;\n}\n\nint main(){\nint q;\ncin>>q;\nfor(int i=0;i<q;i++){\n\tpoint p0=make(),p1=make(),p2=make(),p3=make();\n\tline l0 = make(p0,p1) ,l1 = make(p2,p3);\n\tprintf(\"%0.10lf\\n\",distance(l0,l1) );\n}\n\nreturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<climits>\n#include<iomanip>\n#include<cstdio>\n#include<vector>\n#include<queue>\n#include<stack>\n#include<cmath>\n#include<list>\n#include<map>\n#include<set>\nusing namespace std;\n\ntypedef vector<int> VI;\ntypedef vector<VI> VVI;\ntypedef vector<string> VS;\ntypedef stack<int> SI;\ntypedef queue<int> QI;\ntypedef list<int> LI;\ntypedef pair<int,int> PII;\ntypedef long long LL;\n\n#define d(x)  cout<<#x<<\" = \"<<(x)<<endl;\n#define ALL(a)  (a).begin(),(a).end()\n#define RALL(a) (a).rbegin(), (a).rend()\n#define PB push_back\n#define MP make_pair\n#define EMP empty()\n#define SZ(a) int((a).size())\n#define EACH(i,c) for(typeof((c).begin()) i=(c).begin(); i!=(c).end(); ++i)\n#define REACH(i,c) for(typeof((c).rbegin()) i=(c).rbegin(); i!=(c).rend(); ++i)\n#define EXIST(s,e) ((s).find(e)!=(s).end())\n#define SORT(c,n) sort(c,c+n)\n#define VSORT(c) sort((c).begin(),(c).end())\n#define FOR(i,a,b) for(int i=(a);i<(b);++i)\n#define REP(i,n)  FOR(i,0,n)\n#define DFOR(i,b,a) for(int i=(b)-1;i>=(a);--i)\n#define DREP(i,n) DFOR(i,n,0)\n#define INF 1000000000\n\nconst double EPS = 1e-10;\nconst double PI  = acos(-1.0);\n////////////////////////////////////////////////\nstruct vtr{double x;double y;};\n\n\ndouble absvtr(vtr a)\n{\n\treturn sqrt(a.x*a.x+a.y*a.y);\n}\ndouble dotp(vtr a,vtr b)\n{\n\treturn a.x*b.x+a.y*b.y;\n}\ndouble abscrossp(vtr a,vtr b)\n{\n\treturn a.x*b.y-a.y*b.x;\n}\nvtr plusvtr(vtr a,vtr b)\n{\n\tvtr c;\n\tc.x=a.x+b.x;\n\tc.y=a.y+b.y;\n\treturn c;\n}\nvtr minusvtr(vtr a,vtr b)\n{\n\tvtr c;\n\tc.x=a.x-b.x;\n\tc.y=a.y-b.y;\n\treturn c;\n}\n\nint main()\n{\n\tint n;cin>>n;\n\tvtr p[4];\n\tREP(i,n)\n\t{\n\t\tREP(j,4)cin>>p[j].x>>p[j].y;\n\t\tdouble a,b,c,d;\n\t\ta=abscrossp( minusvtr(p[1],p[0]), minusvtr(p[2],p[0]) ) / absvtr( minusvtr(p[1],p[0]) );\n\t\tb=abscrossp( minusvtr(p[1],p[0]), minusvtr(p[3],p[0]) ) / absvtr( minusvtr(p[1],p[0]) );\n\t\tc=abscrossp( minusvtr(p[3],p[2]), minusvtr(p[1],p[2]) ) / absvtr( minusvtr(p[3],p[2]) );\n\t\td=abscrossp( minusvtr(p[3],p[2]), minusvtr(p[0],p[2]) ) / absvtr( minusvtr(p[3],p[2]) );\n\t\tcout<<min(min(a,b),min(c,d));\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <stdio.h>\n#include <vector>\n#include <math.h>\n#include <algorithm>\n\n\nusing namespace std;\n\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a) - (b)) < EPS) //?????????????????????????????????\n\n//??????p0,p1,p2????????????\n#define COUNTER_CLOCKWISE 1 //???????????§???????¨????????????´???\n#define CLOCKWISE  -1 //???????????§????¨????????????´???\n#define ONLINE_BACK 2 //p2,p0,p1??????????????§????????´?????????????????¨???\n#define ONLINE_FRONT -2//???????????§????????´?????????????????¨???\n#define ON_SEGMENT 0 //p2?????????p0 p1??????????????¨???\n\n\n//??????????????????????????????\nclass Point {\n\npublic:\n\n\tdouble x, y;//??§?¨????????????????x,y??????\n\n\tPoint(double x = 0, double y = 0) :x(x), y(y) {}\n\n\tPoint operator + (Point p) {\n\t\treturn Point(x + p.x, y + p.y);\n\t}\n\n\tPoint operator - (Point p) {\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n\n\tPoint operator * (double r) {\n\t\treturn Point(x * r, y * r);\n\t}\n\n\tPoint operator / (double r) {\n\t\treturn Point(x / r, y / r);\n\t}\n\n\tdouble norm() {\n\t\treturn x*x + y*y;\n\t}\n\n\t//?????????????????§???????????????\n\tdouble abs() {\n\t\treturn sqrt(norm());\n\t}\n\n\tbool operator < (const Point &p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p) const {\n\t\treturn fabs(x - p.x) < EPS &&  fabs(y - p.y) < EPS;\n\t}\n\n};\n\ntypedef Point Vector;\n\n//??????????????????????????????\ndouble dot(Vector a, Vector b) {\n\treturn a.x * b.x + a.y * b.y;\n}\n\n//??????????????????????????????\ndouble cross(Vector a, Vector b) {\n\treturn a.x * b.y - a.y * b.x;\n}\n\n\n\nclass Segment {\npublic:\n\tPoint p1, p2;\n\n\tSegment() {}\n\n\t//?????¨????°???±?????????\n\tPoint projection(Point p) {\n\t\tVector base = p2 - p1;\n\n\t\tdouble r = dot(p - p1, base) / base.norm();\n\t\treturn p1 + base * r;\n\t}\n\n\t//????°??????????\n\tPoint reflection(Point p) {\n\t\treturn p + (projection(p) - p)*2.0;\n\t}\n\n\n};\n\n\ntypedef Segment Line;\n\ntypedef vector<Point> Polygon;\n\n\n//?????????????????´?????????\nbool isOrthogonal(Vector a, Vector b);\n\n//??????????§??????¨?????????????????´?????????\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2);\n\n//???????????´?????????\nbool isOrthogonal(Segment s1, Segment s2);\n\n//???????????????????????????\nbool isParallel(Vector a, Vector b);\n\n//??????????§??????¨???????????????????????????\nbool isParallel(Point a1, Point a2, Point b1, Point b2);\n\n//?????????????????????\nbool isParallel(Segment s1, Segment s2);\n\n//?°???±?????????\nPoint projection(Segment s, Point p);\n\n//????°??????????\nPoint reflection(Segment s, Point p);\n\n//2??????????????¢?????????\ndouble getDistance(Point a, Point b);\n\n//??´?????¨???????????¢?????????\ndouble getDistanceLP(Line l, Point p);\n\n//????????¨???????????¢?????????\ndouble getDistanceSP(Segment s, Point p);\n\n//??????s1??¨??????s2????????¢?????????\ndouble getDistance(Segment s1, Segment s2);\n\n\n//???????????¢????????????\nint ccw(Point p0, Point p1, Point p2);\n\n//??????p1p2??¨??????p2p3???????????????\nbool intersect(Point p1, Point p2, Point p3, Point p4);\n\n//??????s1??¨??????s2???????????????\nbool intersect(Segment s1, Segment s2);\n\n\n\n//?????????????????´?????????\nbool isOrthogonal(Vector a, Vector b) {\n\treturn equals(dot(a, b), 0.0);\n}\n\n//??????????§??????¨?????????????????´?????????\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n\treturn isOrthogonal(a1 - a2, b1 - b2);\n}\n\n//???????????´?????????\nbool isOrthogonal(Segment s1, Segment s2) {\n\treturn equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n//???????????????????????????\nbool isParallel(Vector a, Vector b) {\n\treturn equals(cross(a, b), 0.0);\n}\n\n//??????????§??????¨???????????????????????????\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n\treturn isParallel(a1 - a2, b1 - b2);\n}\n\n//?????????????????????\nbool isParallel(Segment s1, Segment s2) {\n\treturn equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n//?°???±?????????\nPoint projection(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / base.norm();\n\treturn s.p1 + base * r;\n}\n\n//????°??????????\nPoint reflection(Segment s, Point p) {\n\treturn p + (projection(s, p) - p)*2.0;\n}\n\n//2??????????????¢?????????\ndouble getDistance(Point a, Point b) {\n\treturn (a - b).abs();\n}\n\n//??´?????¨???????????¢?????????\ndouble getDistanceLP(Line l, Point p) {\n\treturn fabs(cross(l.p2 - l.p1, p - l.p1) / (l.p2 - l.p1).abs());\n}\n\n//????????¨???????????¢?????????\ndouble getDistanceSP(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0) {\n\t\treturn (p - s.p1).abs();\n\t}\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0) {\n\t\treturn (p - s.p2).abs();\n\t}\n\n\treturn getDistanceLP(s, p);\n}\n\n//??????s1??¨??????s2????????¢?????????\ndouble getDistance(Segment s1, Segment s2) {\n\n\tif (intersect(s1, s2)) {\n\t\treturn 0.0;\n\t}\n\treturn min(min(getDistanceSP(s1,s2.p1), getDistanceSP(s1, s2.p2)),min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\n\n//???????????¢????????????\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\n\tif (cross(a, b) > EPS) {//???????¨?????????????\n\t\treturn COUNTER_CLOCKWISE;\n\t}\n\tif (cross(a, b) < -EPS) {//????¨?????????????\n\t\treturn CLOCKWISE;\n\t}\n\tif (dot(a, b) < -EPS) {//p2,p0,p1??????????????§????????´?????????????????????\n\t\treturn ONLINE_BACK;\n\t}\n\tif (a.norm() < b.norm()) {//p0,p1,p2??????????????§????????´?????????????????????\n\t\treturn ONLINE_FRONT;\n\t}\n\n\treturn ON_SEGMENT;//??????p0 p1??????p2???????????????\n\n}\n\n//??????p1p2??¨??????p2p3???????????????\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n\treturn ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 && ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0;\n}\n\n//??????s1??¨??????s2???????????????\nbool intersect(Segment s1, Segment s2) {\n\treturn intersect(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n\n\n\n\n\n\n\n//???\nclass Circle {\npublic:\n\tPoint c;//??????\n\tdouble r;//??????\n\tCircle(Point c = Point(), double r = 0.0) :c(c), r(r) {}\n};\n\n\nint main(void)\n{\n\tint n;\n\n\tSegment s1;\n\tSegment s2;\n\n\n\tcin >> n;\n\n\tfor (int i = 0; i < n; i++) {\n\t\tcin >> s1.p1.x >> s1.p1.y >> s1.p2.x >> s1.p2.y;\n\t\tcin >> s2.p1.x >> s2.p1.y >> s2.p2.x >> s2.p2.y;\n\n\t\tprintf(\"%.9lf\\n\",getDistance(s1,s2));\n\n\t}\n\n\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n#define EPS 1e-10\n#define equals(a,b) (fabs( (a) - (b) )< EPS )\ntypedef struct point{\n\tdouble x,y;\n\tpoint(){};\n\tpoint(double x ,double y):x(x),y(y){};\n\tpoint operator + (point &p){ return point(x+p.x,y+p.y);\t}\n\tpoint operator - (point &p){ return point(x-p.x,y-p.y);\t}\n\tpoint operator * (point &p){ return point(x*p.x-y*p.y,x*p.y+y*p.x) ;}\n\tpoint operator * (double a){ return point(x*a,y*a);\t}\n\tpoint operator / (double a){ return point(x/a,y/a);\t}\n\t\n\tdouble abs() { return sqrt(norm()); }\n\tdouble norm() { return x*x+y*y; }\n\t\n\tbool operator < (const point &p) const { return x!=p.x ? x<p.x : y<p.y; }\n\tbool operator == (const point &p) const { return fabs(x-p.x)<EPS && fabs(y-p.y)<EPS; }\n}point;\ndouble abs(point a){return a.abs();}\ndouble norm(point a){return a.norm();}\n\ntypedef complex<double> C;\ntypedef struct { point s,e;} line;\n\nC convert(point a){ return C(a.x,a.y); }\npoint convert( C a){ return point(a.real(),a.imag() );}\ndouble dot(point a,point b){ return a.x*b.x+a.y*b.y ; } //内積　a・b\ndouble cross(point a,point b){ return a.x*b.y - a.y*b.x ; }//外積(z成分)　a×b\npoint vec(line l){return l.e-l.s;}\nline make(point s,point e){\n\tline res; res.s=s; res.e=e;\n\treturn res;\n}\npoint make(){ \n\tdouble x,y; cin>>x>>y;\n       \treturn point(x,y);\n}\n//直交\nbool isorthogonal(point a,point b){ return equals(dot(a,b), 0.0); }\nbool isorthogonal(line l1,line l2){ return isorthogonal(vec(l1),vec(l2)); }\n//平行\nbool isparallel(point a,point b){ return equals(cross(a,b),0.0); }\nbool isparallel(line l1,line l2){ return isparallel(vec(l1),vec(l2)); }\n//射影\npoint project(line s,point p){\n\tpoint base = vec(s);\n\tdouble r=dot(p-s.s,base)/base.norm();\n\tbase = base*r;\n\treturn s.s+base;\n}\n//反射\npoint reflect(line l,point p){\n\tpoint tmp=project(l,p)-p;\n\ttmp= tmp*2.0;\n\treturn p+tmp;\n\n}\n//交差判定\n\nint ccw(point p0,point p1,point p2){\n\tpoint a = p1-p0;\n\tpoint b = p2-p0;\nif(cross(a,b)>EPS) return 1;//counter_clockwise\nif(cross(a,b)<-EPS) return -1;//clockwise\nif(dot(a,b)<-EPS)return 2;//online_back\nif(a.norm()<b.norm() ) return -2;//online_front\nreturn 0;//on_segment\n}\n// line p1-p2 line p3-p4\nbool intersect(point p1,point p2,point p3,point p4){\n\treturn (ccw(p1,p2,p3)*ccw(p1,p2,p4)<=0 && ccw(p3,p4,p1)*ccw(p3,p4,p2)<=0 ); \n}\n// line l1,l2\nbool intersect(line l1,line l2){ return intersect(l1.s,l1.e,l2.s,l2.e); }\n\n\n//距離\n//point-point\ndouble distance(point a,point b){ return abs(a-b); }\n//point-line(直線）\ndouble distance2(line l,point p){\n\treturn abs(cross(vec(l),p-l.s)/abs(l.e-l.s));\n}\n//point-line(線分)\ndouble distance(line l,point p){\n\tif( dot(vec(l),p-l.s) <0.0 ) return abs(p-l.s);\n\tif( dot(l.s-l.e,p-l.e) <0.0 ) return abs(p-l.e);\n\treturn distance2(l,p);\n}\n//line-line\ndouble distance(line l1,line l2){\n\tif(intersect(l1,l2))\treturn 0.0;\n\treturn min(min(distance(l1,l2.s),distance(l1,l2.e) ), min(distance(l2,l1.s),distance(l2,l1.e) ) );\n}\n\n//交点\npoint crosspoint(line l1,line l2){\n\tpoint base = vec(l2);\n\tdouble d1 = abs(cross(base,l1.s-l2.s) );\n\tdouble d2 = abs(cross(base,l1.e-l2.s) );\n\tdouble t = d1/(d1+d2);\n\tpoint tmp = vec(l1)*t;\n\treturn l1.s+tmp;\n}\n\nint main(){\nint q;\ncin>>q;\nfor(int i=0;i<q;i++){\n\tpoint p0=make(),p1=make(),p2=make(),p3=make();\n\tline l0 = make(p0,p1) ,l1 = make(p2,p3);\n\tprintf(\"%0.10lf\\n\",distance(l0,l1) );\n}\n\nreturn 0;\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <cmath>\n#include <iostream>\n#include <queue>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string>\n#ifndef NULL\n#define NULL 0\n#endif\nusing namespace std;\n\nconst int MAXN = 50000 + 10;\nconst double pi = acos(-1.0);\nconst double inf = 1e100;\nconst double eps = 1e-12;\n\ninline double read() //浮点型快读\n{\n    double num;\n    char in;\n    double Dec = 0.1;\n    bool IsN = false, IsD = false;\n    in = getchar();\n    while (in != '-' && in != '.' && (in < '0' || in > '9'))\n        in = getchar();\n    if (in == '-') {\n        IsN = true;\n        num = 0;\n    } else if (in == '.') {\n        IsD = true;\n        num = 0;\n    } else\n        num = in - '0';\n    if (!IsD) {\n        while (in = getchar(), in >= '0' && in <= '9') {\n            num *= 10;\n            num += in - '0';\n        }\n    }\n    if (in != '.') {\n        if (IsN)\n            num = -num;\n        return num;\n    } else {\n        while (in = getchar(), in >= '0' && in <= '9') {\n            num += Dec * (in - '0');\n            Dec *= 0.1;\n        }\n    }\n    if (IsN)\n        num = -num;\n    return num;\n}\n\nint zhengfu(double d)\n{\n    if (fabs(d) < eps)\n        return 0;\n    if (d > 0)\n        return 1;\n    return -1;\n}\nint bijiao(double x, double y)\n{\n    if (fabs(x - y) < eps)\n        return 0;\n    if (x > y)\n        return 1;\n    return -1;\n}\nint bijiao2(double x, double y)\n{\n    if (fabs(x - y) < eps || x > y)\n        return 1;\n    return 0;\n}\n\nstruct vec {\n    double x, y;\n    vec(double x, double y)\n    {\n        this->x = x;\n        this->y = y;\n    }\n    vec() {}\n    vec operator*(const vec& i_T) const\n    {\n        return vec(x * i_T.x, y * i_T.y);\n    }\n    vec operator*(double u) const\n    {\n        return vec(x * u, y * u);\n    }\n    bool operator==(const vec& i_T) const\n    {\n        return x == i_T.x && y == i_T.y;\n    }\n    vec operator/(double u) const\n    {\n        return vec(x / u, y / u);\n    }\n    vec operator+(const vec& i_T)\n    {\n        return vec(x + i_T.x, y + i_T.y);\n    }\n    vec operator-(const vec& i_T)\n    {\n        return vec(x - i_T.x, y - i_T.y);\n    }\n} p[MAXN];\n\ndouble chaji(vec A, vec B)\n{\n    return A.x * B.y - A.y * B.x; // 正为A->B左旋\n}\ndouble dianji(vec A, vec B)\n{\n    return A.x * B.x + A.y * B.y;\n}\n\ndouble changdu(vec a) //长度\n{\n    return sqrt(a.x * a.x + a.y * a.y);\n}\nvec touying(vec a, vec b, vec c) //c投影在ab上的位置\n{\n    vec A = b - a;\n    vec B = c - a;\n    double La = changdu(A);\n    double Lc = dianji(A, B) / (La * La);\n    return vec(Lc * A.x, Lc * A.y) + a;\n}\nvec fanshe(vec a, vec b, vec c) //求c关于ab的对称点c'\n{\n    vec A = touying(a, b, c);\n    return (A - c) * 2.0 + c;\n}\nbool bijiao3(vec a, vec b, vec c)\n{\n    if (a.x <= c.x && c.x <= b.x && ((a.y <= c.y && c.y <= b.y || b.y <= c.y && c.y <= a.y)))\n        return 1;\n    return 0;\n}\nbool xiangjiao(vec a, vec b, vec c, vec d) //两线段是否有交点\n{\n    if (a.x == b.x) {\n        if (a.y > b.y)\n            swap(a, b);\n    } else if (a.x > b.x)\n        swap(a, b);\n    if (c.x == d.x) {\n        if (c.y > d.y)\n            swap(c, d);\n    } else if (c.x > d.x)\n        swap(c, d);\n\n    double c1 = chaji(b - a, c - a), d1 = chaji(b - a, d - a);\n    double c2 = chaji(d - c, a - c), d2 = chaji(d - c, b - c);\n    //cout << c1 << ' ' << d1 << ' ' << c2 << ' ' << d2 << endl;\n    if (zhengfu(c1 * d1) < 0 && zhengfu(c2 * d2) < 0) //ab横穿cd\n        return 1;\n    else if (zhengfu(c1 * d1) != 0 && zhengfu(c2 * d2) == 0) { //ab不穿过cd\n        if (zhengfu(c2) == 0) {\n            if (bijiao3(c, d, a))\n                return 1;\n        }\n        if (zhengfu(d2) == 0)\n            if (bijiao3(c, d, b))\n                return 1;\n    } else if (zhengfu(c1 * d1) == 0 && zhengfu(c2 * d2) != 0) { //cd不穿过ab\n        if (c1 == 0)\n            if (bijiao3(a, b, c))\n                return 1;\n        if (d1 == 0)\n            if (bijiao3(a, b, d))\n                return 1;\n    } else if (zhengfu(c1 * d1) == 0 && zhengfu(c2 * d2) == 0) { //平行\n        if (a == c || a == d || b == c || b == d)\n            return 1;\n        if (bijiao3(a, b, c) == 1)\n            return 1;\n        if (bijiao3(c, d, a) == 1)\n            return 1;\n    }\n    return 0;\n}\nbool pingxing(vec a, vec b)\n{\n    return bijiao(a.x * b.y, a.y * b.x) == 0;\n}\nvec zhixian_jiaodian(vec a, vec b, vec c, vec d)\n{ //两直线交点\n    double tmpLeft, tmpRight, x = inf, y = inf;\n    if (xiangjiao(a, b, c, d)) {\n        tmpLeft = (d.x - c.x) * (a.y - b.y) - (b.x - a.x) * (c.y - d.y);\n        tmpRight = (a.y - c.y) * (b.x - a.x) * (d.x - c.x) + c.x * (d.y - c.y) * (b.x - a.x) - a.x * (b.y - a.y) * (d.x - c.x);\n\n        x = tmpRight / tmpLeft;\n\n        tmpLeft = (a.x - b.x) * (d.y - c.y) - (b.y - a.y) * (c.x - d.x);\n        tmpRight = b.y * (a.x - b.x) * (d.y - c.y) + (d.x - b.x) * (d.y - c.y) * (a.y - b.y) - d.y * (c.x - d.x) * (b.y - a.y);\n        y = tmpRight / tmpLeft;\n    }\n    return vec(x, y);\n}\ndouble mianji(vec a, vec b, vec c)\n{\n    return fabs(chaji(b - a, c - a));\n}\ndouble diandaoxianduan(vec a,vec b,vec c)\n{\n    double l=changdu(b-a);\n    double r=dianji(b-a,c-a)/(l*l);\n    //cout<<r<<endl;\n    if(zhengfu(r)==-1){\n        return changdu(c-a);\n    }\n    else if(bijiao2(r,1)){\n        return changdu(c-b);\n    }\n    else{\n        double l=r*changdu(b-a),l2=changdu(c-a);\n        return sqrt(l2*l2-l*l);\n    }\n}\ndouble xianduanjuli(vec a, vec b, vec c, vec d)\n{\n    if(xiangjiao(a,b,c,d))\n        return 0.0;\n    double minn=inf;\n    double l=diandaoxianduan(a,b,c);\n    minn=bijiao2(minn,l)?l:minn;\n    l=diandaoxianduan(a,b,d);\n    minn=bijiao2(minn,l)?l:minn;\n    l=diandaoxianduan(c,d,a);\n    minn=bijiao2(minn,l)?l:minn;\n    l=diandaoxianduan(c,d,b);\n    minn=bijiao2(minn,l)?l:minn;\n    return minn;\n}\nint main()\n{\n    int n;\n    cin >> n;\n    double minn = 0;\n    for (int i = 0; i < n; i++) {\n        vec a, b, c, d;\n        cin >> a.x >> a.y >> b.x >> b.y >> c.x >> c.y >> d.x >> d.y;\n        printf(\"%.10f\\n\", xianduanjuli(a,b,c,d));\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <math.h>\n#include <iostream>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs(a - b) < EPS)\n\nclass Point{\npublic:\n    double x, y;\n\n    Point(double x_ = 0, double y_ = 0){\n        x = x_;\n        y = y_;\n    }\n\n    Point operator+ (Point p){\n        return Point(x + p.x, y + p.y);\n    };\n\n    Point operator- (Point p){\n        return Point(x - p.x, y - p.y);\n    };\n\n    Point operator* (double k){\n        return Point(x * k, y * k);\n    }\n\n    Point operator/ (double k){\n        return Point(x / k, y / k);\n    }\n\n    double norm(){\n        return x * x + y * y;\n    }\n\n    double abs(){\n        return sqrt(norm());\n    }\n\n    bool operator == (const Point &p) const{\n        return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n    }\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b){\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b){\n    return a.x * b.y - a.y * b.x;\n}\n\nbool isParallel(Vector a, Vector b){\n    return equals(cross(a, b), 0.0);\n}\n\nbool isOrthogonal(Vector a, Vector b){\n    return equals(dot(a, b), 0.0);\n}\n;\ndouble getCos(Vector a, Vector b){\n    return dot(a, b) / (a.abs() * b.abs());\n}\n\ndouble dist(Point p1, Point p2){\n    return sqrt(pow((p1.x - p2.x), 2) + pow((p1.y - p2.y), 2));\n}\n\nPoint projection(Point p1, Point p2, Point p0){\n    if(p1 == p0){\n        return p0;\n    }\n    if(p2 == p0){\n        return p0;\n    }\n    return p1 + (p2 - p1) / (p2 - p1).abs() * (p0 - p1).abs() * getCos(p2 - p1, p0 - p1);\n}\n\nPoint reflection(Point p1, Point p2, Point p0){\n    Point p = projection(p1, p2, p0);\n    return p0 + (p - p0) * 2;\n}\n\ndouble getDistanceSP(Point p1, Point p2, Point p0){\n    if(dot(p2 - p1, p0 - p1) < 0.0) return (p0 - p1).abs();\n    if(dot(p1 - p2, p0 - p2) < 0.0) return (p0 - p2).abs();\n    return (projection(p1, p2, p0) -  p0).abs();\n}\n\ndouble getDistance(Point p0, Point p1, Point p2, Point p3){\n    return min(min(getDistanceSP(p0, p1, p2),\n                getDistanceSP(p0, p1, p3)),\n                min(getDistanceSP(p2, p3, p0),\n                getDistanceSP(p2, p3, p1)));\n}\n\n\nint main(){\n    int q;\n    scanf(\"%d\", &q);\n\n    for(int i = 0; i < q; i++){\n        int xp0, yp0, xp1, yp1, xp2, yp2, xp3, yp3;\n        scanf(\"%d\", &xp0);\n        scanf(\"%d\", &yp0);\n        scanf(\"%d\", &xp1);\n        scanf(\"%d\", &yp1);\n        scanf(\"%d\", &xp2);\n        scanf(\"%d\", &yp2);\n        scanf(\"%d\", &xp3);\n        scanf(\"%d\", &yp3);\n\n        printf(\"%f\\n\", getDistance(Point(xp0, yp0), Point(xp1, yp1), Point(xp2, yp2), Point(xp3, yp3)));\n    }\n\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define REP(i,a,b) for(int i=a;i<b;i++)\n#define rep(i,n) REP(i,0,n)\n\ntypedef complex<double> P;\nstruct Line : public vector<P>\n{\n  Line(P a=P(), P b=P()) {\n    push_back(a); push_back(b);\n  }\n};\ntypedef Line Segment;\n\n#define EPS (1e-5)\n\nbool operator < (P const& a, P const& b) {\n  return (a.real() != a.real()) ? a.real() < b.real() : a.imag() < b.imag();\n}\n\ndouble dot(P const& a, P const& b) {\n  return real(conj(a)*b);\n}\n\ndouble cross(P const& a, P const& b) {\n  return imag(conj(a)*b);\n}\n\nP projection_point(P const& a, P const& b, P const& c) {\n  double k = dot(b-a, c-a) / norm(b-a);\n  return a+k*(b-a);\n}\n\nP reflection_point(P const& a, P const& b, P const& c) {\n  return c + 2.*(projection_point(a, b, c) - c);\n}\n\nbool is_parallel(Segment const& s, Segment const& t) {\n  return abs(cross(s[1]-s[0], t[1]-t[0])) < EPS;\n}\n\nbool is_orthogonal(Segment const& s, Segment const& t) {\n  return abs(dot(s[1]-s[0], t[1]-t[0])) < EPS;\n}\n\nint ccw(P a, P b, P c) {\n  b -= a, c -= a;\n  if(cross(b, c) > 0) return +1; // counter clockwise\n  if(cross(b, c) < 0) return -1;  // clockwise\n  if(dot(b, c) < 0) return +2;    // c-a-b\n  if(norm(b) < norm(c)) return -2;  // a-b-c\n  return 0; // on segment\n}\n\nbool is_intersect_ss(Segment const& s, Segment const& t) {\n  return ccw(s[0], s[1], t[0]) * ccw(s[0], s[1], t[1]) <= 0\n         && ccw(t[0], t[1], s[0]) * ccw(t[0], t[1], s[1]) <= 0;\n}\n\nP crosspoint_ss(Segment const& s, Segment const& t) {\n  P bline = t[1]-t[0];\n  double d1 = abs(cross(bline, s[0]-t[0])), d2 = abs(cross(bline, s[1]-t[0]));\n  return s[0] + d1/(d1+d2) * (s[1]-s[0]);\n}\n\nbool is_point_onsegment(Segment const& s, P const& p) {\n  return abs(s[0]-p)+abs(s[1]-p)-abs(s[1]-s[0]) < EPS;\n}\n\ndouble distance_sp(Segment const& s, P const& p) {\n  P q = projection_point(s[0], s[1], p);\n  if(is_point_onsegment(s, p)) return abs(p-q);\n  return min(abs(s[0]-p), abs(s[1]-p));\n}\n\ndouble distance_ss(Segment const& s, Segment const& t) {\n  if(is_intersect_ss(s, t)) return 0.; // 交差は距離 0\n  return min(min(distance_sp(t, s[0]), distance_sp(t, s[1])),\n             min(distance_sp(s, t[0]), distance_sp(s, t[1])));\n}\n\nint main () {\n  \n  int q; cin >> q;\n  for(;q--;) {\n    Segment s, t;\n    cin >> s[0].real() >> s[0].imag();\n    cin >> s[1].real() >> s[1].imag();\n    cin >> t[0].real() >> t[0].imag();\n    cin >> t[1].real() >> t[1].imag();\n    \n    printf(\"%.10f\\n\", distance_ss(s, t));\n  }\n  \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <vector>\n#include <string>\n#include <utility>\n#include <cmath>\n#include <cstdio>\n#define rep(i,n) for(int i = 0; i < n; ++i)\n#define rep1(i,n) for(int i = 1; i <= n; ++i)\n#define F first\n#define S second\nusing namespace std;\ntemplate<class T>bool chmax(T &a, const T &b) { if(a < b){ a = b; return 1; } return 0; }\ntemplate<class T>bool chmin(T &a, const T &b) { if(a > b){ a = b; return 1; } return 0; }\nusing ll = long long;\nusing pi = pair<int,int>;\nconst double EPS = 1e-10;\nstruct Vec2 {\n  double x;\n  double y;\n\n  Vec2() : x(0.0),y(0.0){} \n  Vec2(double _x,double _y) :x(_x),y(_y){}  \n  \n  Vec2 operator+(const Vec2& other) const { return { x + other.x , y + other.y }; }\n  Vec2 operator-(const Vec2& other) const { return { x - other.x , y - other.y }; }\n  bool operator==(const Vec2& other) const { return (abs(x - other.x) < EPS && abs(y - other.y) < EPS ); }\n  \n  double dot(const Vec2& other) const { return x * other.x + y * other.y; }\n  double cross(const Vec2& other) const { return x * other.y - y * other.x; }\n  double length() const { return sqrt(x * x + y * y); }\n};\n\n// A とB のなす角θ cosθ, sinθ を返す\ndouble Cos(const Vec2 A, const Vec2 B) { return A.dot(B) / (A.length()*B.length()); }\ndouble Sin(const Vec2 A, const Vec2 B) { return A.cross(B) / (A.length()*B.length()); }\n\n// 点Cと線分ABの距離\ndouble Dist(const Vec2 A, const Vec2 B, const Vec2 C) { \n  Vec2 D;\n  double Z = (A - B).length();\n  Z = Z*Z;\n  D.y = ( (C.x - B.x)*(A.x - B.x)*(A.y - B.y) + B.y*(A.x - B.x)*(A.x - B.x) + C.y*(A.y - B.y)*(A.y - B.y) ) / Z;\n  if(abs(A.x - B.x) > EPS) {\n    D.x = C.x - (A.y - B.y)*(D.y - C.y) / (A.x - B.x);\n  }\n  else if(abs(A.y - B.y) > EPS) {\n    D.x = B.x + (A.x - B.x)*(D.y - B.y) / (A.y - B.y);\n  }\n  else {\n    cout << \"AB is not a Line !!!\" << \"\\n\";\n    return 0;\n  }\n  if(Cos(A - D, B - D) < 0) {\n    return (C - D).length();\n  }\n  else {\n    return 1e+15;\n  }\n}\n\n// 線分の交差判定\nbool CrossCheck(const Vec2 a, const Vec2 b, const Vec2 c, const Vec2 d) {\n  if(a == c || a == d || b == c || b == d) return true; // 端点が等しい場合はtrue\n  Vec2 AB = b - a, AC = c - a, AD = d - a;\n  Vec2 CA = a - c, CB = b - c, CD = d - c;\n  double s = AB.cross(AC) * AB.cross(AD);\n  double t = CD.cross(CA) * CD.cross(CB);\n\n  if(abs(Sin(AB, CD)) < EPS) { // 平行のとき\n    if(abs(Sin(AB, AC)) < EPS) { // 同一直線上にあるか？\n      return (CA.dot(CB) - EPS < 0 || (a - d).dot(b - d) - EPS < 0 || AC.dot(AD) - EPS < 0);\n    }\n    else return false;\n  }\n  else return s < EPS && t < EPS;\n}\n\n\nint main()\n{\n  int q; cin >> q;\n  while(q-- > 0) {\n    vector<double> x(4),y(4);\n    rep(i,4) cin >> x[i] >> y[i];\n    double res = 1e+15;\n    vector<Vec2> v(4);\n    rep(i,4) {\n      v[i].x = x[i];\n      v[i].y = y[i];\n    }\n    if(CrossCheck(v[0], v[1], v[2], v[3])) res = 0;\n    chmin(res, (v[0] - v[2]).length());\n    chmin(res, (v[0] - v[3]).length());    \n    chmin(res, Dist(v[2], v[3], v[0]));\n    chmin(res, (v[1] - v[2]).length());\n    chmin(res, (v[1] - v[3]).length());    \n    chmin(res, Dist(v[2], v[3], v[1]));\n    chmin(res, (v[2] - v[0]).length());\n    chmin(res, (v[2] - v[1]).length());    \n    chmin(res, Dist(v[0], v[1], v[2]));\n    chmin(res, (v[3] - v[0]).length());\n    chmin(res, (v[3] - v[1]).length());    \n    chmin(res, Dist(v[0], v[1], v[3]));\n    printf(\"%.9f\\n\", res);\n  }\n  \n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define FOR(i, a, n) for(ll i = (ll)a; i < (ll)n; i++)\n#define rep(i, n) FOR(i, 0, n)\n#define ALL(x) (x).begin(), (x).end()\nusing namespace std;\ntypedef long long ll;\n\nconstexpr ll mod = 1e9 + 7;\n\ntemplate <class T> inline bool chmax(T &a, const T b) {\n    if(a >= b) return false;\n    a = b;\n    return true;\n}\ntemplate <class T> inline bool chmin(T &a, const T b) {\n    if(a <= b) return false;\n    a = b;\n    return true;\n}\n\n/*-------------------------------------------*/\n\nstruct Point {\n    double x, y;\n    Point(double x = 0, double y = 0) : x(x), y(y) {}\n    Point operator+(const Point &p) { return Point{x + p.x, y + p.y}; }\n    Point operator-(const Point &p) { return Point{x - p.x, y - p.y}; }\n    Point operator*(const double k) { return Point{x * k, y * k}; }\n    Point operator/(const double k) { return Point{x / k, y / k}; }\n\n    double norm() { return x * x + y * y; }\n    double abs() { return sqrt(norm()); }\n};\ntypedef Point Vector;\nstruct Segment {\n    Point p1, p2;\n};\ntypedef Segment Line;\nstruct Circle {\n    Point c;\n    double r;\n    Circle(Point c = Point(), double r = 0) : c(c), r(r) {}\n};\ntypedef vector<Point> Polygon;\n\ndouble norm(Vector v) { return v.x * v.x + v.y * v.y; }\ndouble abs(Vector v) { return sqrt(norm(v)); }\n\ndouble dot(Vector a, Vector b) { return a.x * b.x + a.y * b.y; }\ndouble cross(Vector a, Vector b) { return a.x * b.y - a.y * b.x; }\n\nbool isOrthogonal(Vector a, Vector b) { return dot(a, b) == 0; }\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n    return isOrthogonal(a1 - a2, b1 - b2);\n}\nbool isOrthogonal(Line l1, Line l2) {\n    return isOrthogonal(l1.p2, l1.p1, l2.p2, l2.p1);\n}\n\nbool isParallel(Vector a, Vector b) { return cross(a, b) == 0; }\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n    return isParallel(a1 - a2, b1 - b2);\n}\nbool isParallel(Line l1, Line l2) {\n    return isParallel(l1.p1, l1.p2, l2.p1, l2.p2);\n}\n\nPoint project(Line l, Point p) {\n    Vector base = l.p2 - l.p1;\n    double r = dot(p - l.p1, base) / base.norm();\n    return l.p1 + base * r;\n}\nPoint reflect(Line l, Point p) { return p + (project(l, p) - p) * 2; }\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\nint ccw(Point p0, Point p1, Point p2) {\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if(cross(a, b) > 0) return COUNTER_CLOCKWISE;\n    if(cross(a, b) < 0) return CLOCKWISE;\n    if(dot(a, b) < 0) return ONLINE_BACK;\n    if(a.norm() < b.norm()) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n    return ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n           ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0;\n}\nbool intersect(Segment s1, Segment s2) {\n    return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\ndouble getDistanceLP(Line l, Point p) {\n    return abs(cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1));\n}\ndouble getDistanceSP(Segment s, Point p) {\n    if(dot(s.p2 - s.p1, p - s.p1) < 0) return abs(p - s.p1);\n    if(dot(s.p1 - s.p2, p - s.p2) < 0) return abs(p - s.p2);\n    return getDistanceLP(s, p);\n}\ndouble getDistance(Segment s1, Segment s2) {\n    if(intersect(s1, s2)) return 0;\n    return min({getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2),\n                getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)});\n}\n\nint main() {\n    int n;\n    cin >> n;\n    while(n--) {\n        Segment s1, s2;\n        cin >> s1.p1.x >> s1.p1.y >> s1.p2.x >> s1.p2.y;\n        cin >> s2.p1.x >> s2.p1.y >> s2.p2.x >> s2.p2.y;\n        printf(\"%.10f\\n\", getDistance(s1, s2));\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<complex>\n#include<utility>\n#include<vector>\n#include<cmath>\n#include<cassert>\n\nusing namespace std;\n\ndouble eps=1e-9;\n\ntypedef complex<double> Point;\ntypedef complex<double> Vector;\n\ntemplate<class T> bool eq(T a,T b){\n\treturn abs(a-b)<eps;\n}\n\ntemplate<class T> int sgn(T r){\n\treturn eq(r,0.0)?0:(r>0?1:-1);\n}\n\nstruct Circle{\n\tPoint center;\n\tdouble r;\n\tCircle(Point c,double r):center(c),r(r){}\n\tCircle(){}\n};\n\nstruct Line{\n\tdouble a,b,c;//ax+by=c\n\tLine(){}\n\tLine(double a,double b,double c):a(a),b(b),c(c){}\n\tLine(Point p1,Point p2){//not verified\n\t\tif(eq(abs(p1-p2),0.0)){\n\t\t\tfprintf(stderr,\"called Line for same points\\n\");\n\t\t\tassert(0);\n\t\t}\n\t\tdouble x1=p1.real(),y1=p1.imag();\n\t\tdouble x2=p2.real(),y2=p2.imag();\n\t\ta=y2-y1;\n\t\tb=-(x2-x1);\n\t\tc=x1*y2-x2*y1;\n\t}\n};\n\nvoid print(Point p){\n\tif(isnan(p.real())||isnan(p.imag())){\n\t\tprintf(\"NaN Point\\n\");\n\t\treturn;\n\t}\n\tprintf(\"(%f,%f)\\n\",p.real(),p.imag());\n}\n\ndouble pointsDistance(Point p1,Point p2){/*abs(p1-p2)と書いてよい*/\n\tdouble dx=p1.real()-p2.real();\n\tdouble dy=p1.imag()-p2.imag();\n\treturn sqrt(dx*dx+dy*dy);\n}\n\ndouble linePointDistance(Line l,Point p){\n\tdouble a=l.a,b=l.b,c=l.c;\n\tdouble x=p.real(),y=p.imag();\n\tdouble num=abs(a*x+b*y-c);\n\tdouble den=sqrt(a*a+b*b);\n\treturn num/den;\n}\n\nVector basisVector(Vector v){\n\tif(eq(v.real(),0.0)&&eq(v.imag(),0.0)) return v;\n\treturn v/sqrt(norm(v));\n}\n\nPoint linePointProjection(Line l,Point p){\n\tdouble dx=l.a,dy=l.b;\n\tdouble a=l.a,b=l.b,c=l.c;\n\tdouble x=p.real(),y=p.imag();\n\tVector ba=basisVector(Vector(dx,dy));\n\tdouble num=a*x+b*y-c;\n\tdouble den=sqrt(a*a+b*b);\n\tVector v=ba*(-num/den);\n\treturn p+v;\n}\n\nvector<Point> circleLineIntersection(Circle c,Line l){\n\tvector<Point> res;\n\tPoint p=linePointProjection(l,c.center);\n\tdouble d=linePointDistance(l,c.center);\n\tint s=sgn(d-c.r);\n\tif(s==1){\n\t\treturn res;//empty\n\t}else if(s==0){\n\t\tres.push_back(p);\n\t\treturn res;\n\t}else{\n\t\tdouble r=c.r;\n\t\tdouble t=sqrt(r*r-d*d);\n\t\tVector e=basisVector(Vector(l.b,-l.a));\n\t\tres.push_back(p+t*e);\n\t\tres.push_back(p-t*e);\n\t\treturn res;\n\t}\n}\n\nvector<Point> circlesIntersection(Circle c1,Circle c2){/*一致するとき処理できない*/\n\tif(eq(c1.center.real(),c2.center.real())&&eq(c1.center.imag(),c2.center.imag())&&\n\t\teq(c1.r,c2.r)){\n\t\t\t\tPoint p=Point(NAN,NAN);\n\t\t\t\tvector<Point> v;\n\t\t\t\tv.push_back(p);\n\t\t\t\treturn v;\n\t}\n\tdouble d=pointsDistance(c1.center,c2.center);\n\tdouble r1=c1.r,r2=c2.r;\n\tdouble dif=max(r1,r2)-min(r1,r2);\n\tdouble sum=r1+r2;\n\tif(sgn(d-sum)==1||sgn(dif-d)==1){//d>sum||dif>d\n\t\tvector<Point> v;\n\t\treturn v;\n\t}\n\tdouble x1=c1.center.real(),y1=c1.center.imag();\n\tdouble x2=c2.center.real(),y2=c2.center.imag();\n\tLine l=Line(-x1*2+x2*2,-y1*2+y2*2,r1*r1-r2*r2-(x1*x1-x2*x2)-(y1*y1-y2*y2));\n\treturn circleLineIntersection(c1,l);\n}\n\ndouble det(double a,double b,double c,double d){\n\treturn a*d-b*c;\n}\n\nPoint linesIntersection(Line l1,Line l2){/*平行の時は常にNAN*/\n\tdouble a=l1.a,b=l1.b,c=l1.c;\n\tdouble d=l2.a,e=l2.b,f=l2.c;\n\tdouble den=det(a,b,d,e);\n\tdouble numx=det(c,b,f,e);\n\tdouble numy=det(a,c,d,f);\n\tif(eq(den,0.0)){\n\t\treturn Point(NAN,NAN);\n\t}\n\treturn Point(numx/den,numy/den);\n}\n\n//circlesIntersection verify AOJ1190 ICPC Domestic 2013 Balloon\n\ndouble crossProduct(Vector a,Vector b){\n\treturn (conj(a)*b).imag();\n}\n\ndouble dotProduct(Vector a,Vector b){\n\treturn (conj(a)*b).real();\n}\n\nint ccw(Point p1,Point p2,Point p3){\n\t/*p1,p2,p3はすべて異なると仮定\n\tそうでない場合の戻り値は不定\n\tではなく\n\tp1!=p2と仮定*/\n\tVector b=p2-p1;\n\tVector c=p3-p2;\n\tint s=sgn(crossProduct(b,c));\n\tif(s==1) return 1;//counterclockwise\n\tif(s==-1) return -1;//clockwise\n\tint t=sgn(dotProduct(b,c));\n\tif(t==-1) return 2;//3--1--2\n\tint u=sgn(norm(b)-norm(c));\n\tif(eq(norm(c),0.0)) return 0;//1==3\n\tif(u==-1) return -2;//1--2--3\n\treturn 0;//1--3--2 or 2==3\n}\n\nstruct Segment{\n\tPoint p1,p2;\n\tLine l;\n\tSegment(){}\n\tSegment(Point p1,Point p2):p1(p1),p2(p2){\n\t\tl=Line(p1,p2);\n\t}\n};\n\nint oneLineCCW(Point p1,Point p2,Point p3){\n\t/*p1!=p2かつp1,p2,p3は一直線上と仮定*/\n\t/*それ以外の時の戻り値は不定*/\n\tVector b=p2-p1,c=p3-p1;\n\tif(sgn(dotProduct(b,c))==-1) return 2;//p3--p1--p2\n\tif(eq(abs(p1-p3),0.0)) return 1;//p1==p3--p2\n\tint s=sgn(norm(b)-norm(c));\n\tif(s==1) return 0;//p1--p3--p2\n\tif(s==0) return -1;//p1--p3==p2\n\telse return -2;//p1--p2--p3\n}\n\ndouble pointSegmentDistance(Point p,Segment s){\n\tLine l=s.l;\n\tdouble d=linePointDistance(l,p);\n\tPoint pr=linePointProjection(l,p);\n\tint x=oneLineCCW(s.p1,s.p2,pr);\n\tif(x>=-1&&x<=1) return d;\n\tdouble a=abs(s.p1-p);\n\tdouble b=abs(s.p2-p);\n\treturn min(a,b);\n}\n\nbool segmentsIntersect(Segment s1,Segment s2){\n\tPoint p[2],q[2];\n\tp[0]=s1.p1,p[1]=s1.p2;\n\tq[0]=s2.p1,q[1]=s2.p2;\n\treturn ccw(p[0],p[1],q[0])*ccw(p[0],p[1],q[1])<=0&&\n\t\tccw(q[0],q[1],p[0])*ccw(q[0],q[1],p[1])<=0;\n}\n\ndouble segmentsDistance(Segment s1,Segment s2){\n\tbool flg=segmentsIntersect(s1,s2);\n\tif(flg) return 0;\n\tPoint p[2],q[2];\n\tp[0]=s1.p1,p[1]=s1.p2;\n\tq[0]=s2.p1,q[1]=s2.p2;\n\tdouble res=-1;\n\tfor(int k=0;k<2;k++){\n\t\tPoint r=linePointProjection(s2.l,p[k]);\n\t\tif(abs(oneLineCCW(p[0],p[1],r))<=1){\n\t\t\tdouble tmp=abs(r-p[k]);\n\t\t\tif(res<0||tmp<res) res=tmp;\n\t\t}\n\t\tr=linePointProjection(s1.l,q[k]);\n\t\tif(abs(oneLineCCW(q[0],q[1],r))<=1){\n\t\t\tdouble tmp=abs(r-q[k]);\n\t\t\tif(res<0||tmp<res) res=tmp;\n\t\t}\n\t}\n\tfor(int i=0;i<2;i++) for(int j=0;j<2;j++){\n\t\tdouble tmp=abs(p[i]-q[j]);\n\t\tif(res<0||tmp<res) res=tmp;\n\t}\n\treturn res;\n}\n\nPoint inputPoint(){\n\tdouble x,y;\n\tscanf(\"%lf%lf\",&x,&y);\n\treturn Point(x,y);\n}\n\nint main(){\n\tint Q;\n\tscanf(\"%d\",&Q);\n\tfor(int datano=0;datano<Q;datano++){\n\t\tPoint p1,p2;\n\t\tPoint q1,q2;\n\t\tp1=inputPoint();\n\t\tp2=inputPoint();\n\t\tq1=inputPoint();\n\t\tq2=inputPoint();\n\t\tSegment s1=Segment(p1,p2);\n\t\tSegment s2=Segment(q1,q2);\n\t\tdouble ans=segmentsDistance(s1,s2);\n\t\tprintf(\"%.9f\\n\",ans);\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> P;\ntypedef complex<double> V;\ntypedef vector<P> vecP;\ntypedef pair<P,P> L;\ntypedef pair<P,P> S;\ntypedef pair<P,double> C;\nconst double eps=1e-8;\nconst double PI=acos(-1);\nconst double PI2=PI*2.0;\n\nnamespace std{\n  bool operator < (const P &a,const P &b){\n    return (a.imag()==b.imag()?\n            a.real()<b.real():\n            a.imag()<b.imag());\n  }\n};\n\nV normal(V a){\n  assert( abs(a)>0 );\n  return a/abs(a);\n}\n\ndouble Sqrt( double x ){\n  if(x<0)return 0;\n  else return sqrt(x);\n}\n\nP Vector(L a){\n  return a.second-a.first;\n}\n\nbool eq(double a,double b){\n  return (-eps<a-b&&a-b<eps);\n}\n\nbool eq(P a,P b){\n  return ( eq(a.real(),b.real()) && eq(a.imag(),b.imag()) );\n}\n\ndouble dot(P a,P b){\n  return real(b*conj(a));\n}\n\ndouble cross(P a,P b){\n  return imag(b*conj(a));\n}\n\ndouble getArg(P a,P b){\n  return arg(b*conj(a));\n}\n\ndouble getTime(V a,V b){\n  assert( eq(cross(a,b),0) );\n  return ( dot(a,b) < 0 ? -1.0 : 1.0 ) * abs(b) / abs(a);\n}\n\n\nP project(P a,P b,P c){\n  b-=a,c-=a;\n  return a+b*real(c/b);\n}\n\nP reflect(P a,P b,P c){\n  b-=a,c-=a;\n  return a+b*conj(c/b);\n}\n\nint ccw(P a,P b,P c){\n  P ab=b-a,ac=c-a;\n  P k=ac*conj(ab);\n  if(k.imag()>0)return 1;\n  if(k.imag()<0)return -1;\n  if(k.real()<0)return 2;\n  if(abs(ab)<abs(ac))return -2;\n  return 0;\n}\n\nbool isParallel(P a,P b){\n  return eq(0, cross(a,b));\n}\n\nbool isParallel(S a,S b){\n  return eq(0, cross( Vector(a) , Vector(b) ) );\n}\n\nbool onLP(L l,P p){\n  P a=l.first, b=l.second;\n  return eq(0, cross(b-a,p-a));\n}\n\nbool onSP(S s,P p){\n  P a=s.first, b=s.second;\n  return eq( abs(b-a) , abs(a-p)+abs(b-p) );\n}\n\nbool isCrossSS(S s0,S s1){\n  P a=s0.first, b=s0.second;\n  P c=s1.first, d=s1.second;\n  int f0 = ccw(a,b,c) * ccw(a,b,d);\n  int f1 = ccw(c,d,a) * ccw(c,d,b);\n  return (f0<=0 && f1<=0);\n}\n\nbool isCrossLS(L l,S s){\n  P a=l.first, b=l.second;\n  P c=s.first, d=s.second;\n  return ( ccw(a,b,c) * ccw(a,b,d) <= 0 );\n}\n\ndouble distLP(L l,P p){\n  P a=l.first, b=l.second;\n  double res = cross(b-a,p-a) / abs(b-a);\n  return abs(res);\n}\n\ndouble distSP(S s,P p){\n  P a=s.first, b=s.second;\n  if( dot(b-a,p-a) < eps )return abs(p-a);\n  if( dot(a-b,p-b) < eps )return abs(p-b);\n  return distLP(s,p);\n}\n\ndouble distSS(S s0,S s1){\n  if( isCrossSS(s0,s1) )return 0;\n  double res0 = min( distSP( s0, s1.first ) , distSP(s0, s1.second) );\n  double res1 = min( distSP( s1, s0.first ) , distSP(s1, s1.second) );\n  return min(res0,res1);\n}\n\nP getCrossLL(L l0,L l1){\n  P a=l0.first, b=l0.second;\n  P c=l1.first, d=l1.second;\n  a-=d;b-=d;c-=d;\n  return d+a+(b-a)*imag(a/c)/imag(a/c-b/c);\n}\n\n\n \nint inPolygon(vecP &t,P p){\n  int n=t.size();\n  double sum=0;\n  for(int i=0;i<n;i++){\n    P a=t[i],b=t[(i+1==n?0:i+1)];\n    if( onSP(S(a,b),p) )return 1;\n    sum+= getArg(a-p,b-p);\n  }\n  if( abs(sum) < eps )return 0;\n  else return 2;\n}\n\nvecP andrewScan(vecP &t){\n  int N=t.size(),C=0;\n  vecP R(N);\n  for(int i=0;i<N;i++){\n    while(2<=C&&ccw(R[C-2],R[C-1],t[i])==-1)C--;\n    R[C++]=t[i];\n  }\n  vecP res(C);\n  for(int i=0;i<C;i++)res[i]=R[i];\n  return res;\n}\n \nvecP convexHull(vecP &t){\n  sort(t.begin(),t.end());\n  vecP u=andrewScan(t);\n  reverse(t.begin(),t.end());\n  vecP l=andrewScan(t);\n  for(int i=1;i+1<(int)l.size();i++)u.push_back(l[i]);\n  return u;\n}\n\nvecP cutConvex(vecP &t,L l){\n  P a=l.first, b=l.second;\n  int N=t.size();\n  vecP res;\n  for(int i=0;i<N;i++){\n    P c=t[i],d=t[(i+1)%N];\n    int C=ccw(a,b,c),D=ccw(a,b,d);\n    if(C!=-1)res.push_back(c);\n    if(C==-D&&abs(C)==1)res.push_back(getCrossLL( l ,L(c,d) ));\n  }\n  return res;\n}\n\nP getVector(const vecP &t, int id){\n  int n=t.size();\n  return t[ (id+1)%n ] - t[id%n];\n}\n\ndouble convex_diameter(vecP &t) {\n  int n = t.size();\n  int is = 0, js = 0;\n  for (int i = 1; i < n; ++i) {\n    if (imag(t[i]) > imag(t[is])) is = i;\n    if (imag(t[i]) < imag(t[js])) js = i;\n  }\n  double maxd = norm(t[is]-t[js]);\n \n  int i, maxi, j, maxj;\n  i = maxi = is;\n  j = maxj = js;\n  do {\n    \n    if (cross( getVector(t,i), getVector(t,j)) >= 0) j = (j+1) % n;\n    \n    else i = (i+1) % n;\n    if (norm(t[i]-t[j]) > maxd) {\n      maxd = norm(t[i]-t[j]);\n      maxi = i; maxj = j;\n    }\n  } while (i != is || j != js);\n  return maxd; /* farthest pair is (maxi, maxj). */\n}\n\nbool compare_y(const P &a,const P &b){\n  return a.imag() < b.imag();\n}\n\ndouble closest_pair(P *a, int n){\n  if(n <= 1) return 1e30;\n  int m = n / 2;\n  double x = a[m].real();\n  double d = min(closest_pair(a, m), closest_pair(a + m, n - m));\n  inplace_merge(a, a + m, a + n, compare_y);\n  vector<P> b;\n  for(int i=0;i<n;i++){\n    if( abs(a[i].real() - x) >= d) continue;\n    for(int j=0;j<(int)b.size();j++){\n      double dx = real(a[i] - b[b.size() - j - 1]);\n      double dy = imag(a[i] - b[b.size() - j - 1]);\n      if(dy >= d) break;\n      d = min(d, sqrt(dx * dx + dy * dy));\n    }\n    b.push_back(a[i]);\n  }\n  return d;\n}\n\nP _pool[200005];\ndouble minDist(vecP &t){\n  int n=t.size();\n  for(int i=0;i<n;i++)_pool[i]=t[i];\n  sort( _pool, _pool+n);\n  return closest_pair(_pool, n);\n}\n\nint getStateCC(C a,C b){\n  double ar=a.second, br=b.second;\n  double dist=abs(a.first-b.first);\n  if(dist>ar+br+eps)return 4;\n  if(dist>ar+br-eps)return 3;\n  if(dist>abs(ar-br)+eps)return 2;\n  if(dist>abs(ar-br)-eps)return 1;\n  return 0;\n}\n\nP getCrossCC(C a,C b){\n  P p1=a.first, p2=a.second;\n  double r1=a.second, r2=b.second;\n  double cA = (r1*r1+norm(p1-p2)-r2*r2) / (2.0*r1*abs(p1-p2));\n  return p1+(p2-p1)/abs(p1-p2)*r1*P(cA,Sqrt(1.0-cA*cA));\n}\n\nS getTangentCP(C a,P p){\n  P base=a.first-p;\n  double ar=a.second;\n  double w=Sqrt(norm(base)-ar*ar);\n  P s=p+base*P(w,ar)/norm(base)*w;\n  P t=p+base*P(w,-ar)/norm(base)*w;\n  return S(s,t);\n}\n\nS getInTangent(C a,C b,double flg=1.0){\n  P ap=a.first,bp=b.first;\n  double ar=a.second,br=b.second;\n  \n  P base=bp-ap;\n  double w=ar+br;\n  double h=Sqrt(norm(base)-w*w);\n  P k=base*P(w,h*flg)/norm(base);\n  return S(ap+k*ar,bp-k*br);\n}\n  \nS getOutTangent(C a,C b,double flg=1.0){\n  P ap=a.first,bp=b.first;\n  double ar=a.second,br=b.second;\n  \n  P base=bp-ap;\n  double h=br-ar;\n  \n  double w=Sqrt(norm(base)-h*h);\n  P k=base*P(w,h*flg)/norm(base)*P(0,flg);\n  return S(ap+k*ar,bp+k*br);\n}\n  \nvector<S> getTangent(C a,C b){\n  P ap=a.first,bp=b.first;\n  double ar=a.second,br=b.second;\n  \n  vector<S> res;\n  double dist=abs(ap-bp);\n    \n  if(dist>ar+br+eps)\n    res.push_back(getInTangent(a,b,1));\n  \n  if(dist>ar+br-eps)\n    res.push_back(getInTangent(a,b,-1));\n  \n  if(dist>abs(ar-br)+eps)\n    res.push_back(getOutTangent(a,b,1));\n  \n  if(dist>abs(ar-br)-eps)\n    res.push_back(getOutTangent(a,b,-1));\n  \n  return res;\n}\n\n\nvecP getCrossCS(C cir,S s, bool debug=false){\n  P a=s.first, b=s.second;\n  double cr=cir.second;\n  P cp=cir.first;\n  \n  vecP res;\n  P base=b-a,  target=project(a,b,cp);\n  \n  double length=abs(base), h=abs(cp-target);\n  base/=length;\n  \n  if(cr+eps<h)return res;\n  double w=Sqrt(cr*cr-h*h);\n  double L=getTime( normal(b-a) ,target-a)-w,  R=L+w*2.0;\n  \n  if( -eps<L && L< length+eps )res.push_back(a+base*L);\n  if( eq(L,R) )return res;\n  if( -eps<R && R< length+eps )res.push_back(a+base*R);\n  return res;\n}\n \ndouble getArea(C c,P a,P b){\n  P cp=c.first;\n  double cr=c.second;\n  \n  P va=cp-a,  vb=cp-b;\n  double A=abs(va), B=abs(vb);\n  double f=cross(va,vb), d=distSP( S(a,b) ,cp), res=0;\n  \n  if( eq(0, f ) )return 0;\n  if(A<cr+eps&&B<cr+eps)return f*0.5;\n  if(d>cr-eps)return cr*cr*PI*getArg(va,vb)/PI2;\n   \n  vecP u=getCrossCS(c, S(a,b) );\n  \n  assert( !u.empty() );\n  u.insert(u.begin(), a),  u.push_back(b);\n \n  for(int i=0;i+1<(int)u.size();i++) res+=getArea(c,u[i],u[i+1]);\n  return res;\n}\n \ndouble getCrossArea(vecP t,C c){\n  int n=t.size();\n  if(n<3)return 0;\n  double res=0;\n  for(int i=0;i<n;i++){\n    P a=t[i], b=t[(i+1)%n];\n    res+=getArea(c,a,b);\n  }\n  return res;\n}\n\nP input(){\n  int x,y;\n  cin>>x>>y;\n  return P(x,y);\n}\n\nvoid pr(P p,string str){\n  printf(\"%.10f %.10f\",p.real(),p.imag());\n  cout<<str;\n}\n\n\nint main(){\n  int Tc;\n  cin>>Tc;\n  while(Tc--){\n    P s,t;\n    s=input(), t=input();\n    P a,b;\n    a=input(), b=input();\n    printf(\"%.10f\\n\", distSS( S(s,t) , S(a,b) ) );\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "\n#include<bits/stdc++.h>\n\ntypedef long double     lf;\n\nusing namespace std;\n\nconst lf EPS = 1e-9;\nconst lf oo = 1e15;\n\nstruct pt {\n  lf x, y;\n  pt( ) { }\n  pt( lf x, lf y ) : x( x ), y ( y ) { }\n};\n\ninline lf x( pt P ) { return P.x; }\ninline lf y( pt P ) { return P.y; }\n\nistream& operator >> ( istream& in, pt& p ) {\n  lf x,y; in >> x >> y;\n  p = pt(x,y); return in;\n}\n\nostream& operator << ( ostream& out, const pt& p ) {\n  out << double(p.x) << \" \" << double(p.y);\n  return out;\n}\n\npt operator + ( const pt& A, const pt& B ) {\n  return pt( x(A)+x(B), y(A)+y(B) );\n}\n\npt operator - ( const pt& A, const pt& B ) {\n  return pt( x(A)-x(B), y(A)-y(B) );\n}\n\n\npt operator * ( const lf& B, const pt& A ) {\n  return pt( x(A)*B, y(A)*B );\n}\n\npt operator * ( const pt& A, const lf& B ) {\n  return pt( x(A)*B, y(A)*B  );\n}\n\ninline lf dot( pt A, pt B ) {\n  return x(A)*x(B) + y(A)*y(B);\n}\n\ninline lf norm( pt A ) {\n  return x(A)*x(A) + y(A)*y(A);\n}\n\ninline lf abs( pt A ) {\n  return sqrt( norm(A) );\n}\n\ninline lf dist ( pt A, pt B ) { return abs( B - A ); }\n\nlf distToLine (pt p, pt A, pt B, pt &c) {\n  lf u = dot( p-A , B-A ) / norm( B-A );\n  c = A + u*( B-A );\n  return dist( p , c );\n}\n\npt refPoint(pt X, pt A, pt B) {\n  pt aux; distToLine(X, A, B, aux);\n  return X + lf(2.0)*(aux-X);\n}\n\ninline bool same ( lf a, lf b ) {\n  return a+EPS > b && b+EPS > a;\n}\n\ninline lf cross( pt A, pt B ) {\n  return x(A)*y(B) - y(A)*x(B);\n}\n\n///CHANGE\n// 0  for collineal points ( angle = 0 )\n// 1  for angle BAX counter clockwise\n// -1 for angle BAX clockwise\ninline int ccw (pt X, pt A, pt B) {\n  lf c = cross( B-A, X-A );\n  if( same( c, 0.0 ) ) { return 0; }\n  if( c > EPS ) { return 1; }\n  return -1;\n}\n\n///CHANGE\ninline bool segContains ( pt X, pt A, pt B) {\n  if ( !same ( 0, cross ( A-X, B-X ) ) ) return 0;\n  return ( dot ( A-X, B-X ) < EPS );\n}\n\ninline bool parallel( pt A, pt B, pt C, pt D ) {\n  return same ( 0, cross( B-A, D-C ) );\n}\n\n///NEW\ninline bool ortho( pt A, pt B, pt C, pt D ) {\n  return same ( 0, dot( B-A, D-C ) );\n}\n\ninline bool samePt ( pt A, pt B ) {\n  return same ( x(A), x(B) ) && same ( y(A), y(B) );\n}\n\npt linesIntersection ( pt A, pt B, pt C, pt D ) {\n  lf x = cross ( C, D-C ) - cross ( A, D-C );\n  x /= cross ( B-A, D-C );\n  return A + x*(B-A);\n}\n\ninline bool collinearSegsIntersects ( pt A, pt B, pt C, pt D ) {\n  return segContains(A,C,D) || segContains(B,C,D)\n      || segContains(C,A,B) || segContains(D,A,B);\n}\n\nbool segmentsIntersect(pt A, pt B, pt C, pt D) {\n  if( samePt(A,B) )\n    return segContains( A, C, D );\n  if( samePt(C,D) )\n    return segContains( C, A, B );\n  if( parallel(A,B,C,D) )\n    return collinearSegsIntersects( A,B,C,D );\n  pt aux = linesIntersection(A,B,C,D);\n  return segContains(aux,A,B) && segContains(aux,C,D);\n}\n\n/// --------------------------------------------\n\nlf distToSegment(pt p, pt A, pt B, pt &c) {\n  lf u = dot( p-A , B-A ) / norm( B-A );\n  if( u < EPS ) { c = A; return dist( p , A ); }\n  if( (u-1.0) > EPS ) { c = B; return dist( p, B ); }\n  return distToLine(p,A,B,c);\n}\n\nint n;\n\nint main() {\n  ios_base::sync_with_stdio(0);\n  cin.tie(0);\n  cout << fixed << setprecision(10);\n\n  cin >> n;\n  for( int i = 0; i < n; ++i ) {\n    pt A,B,C,D, aux;\n    cin >> A >> B >> C >> D;\n    lf ans = oo;\n    if( segmentsIntersect( A, B, C, D ) ) {\n      ans = 0.0;\n    }\n    ans = min( ans, distToSegment( C, A, B, aux ) );\n    ans = min( ans, distToSegment( D, A, B, aux ) );\n    ans = min( ans, distToSegment( A, C, D, aux ) );\n    ans = min( ans, distToSegment( B, C, D, aux ) );\n    cout << double(ans) << '\\n';\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n \nusing ll = long long; using ld = long double; using ull = unsigned long long; using uint = unsigned int;\nusing vi  = vector<int>; using vb  = vector<bool>; using vd  = vector<double>; using vl  = vector<ll>;\nusing vvi = vector<vi>;  using vvb = vector<vb>;   using vvd = vector<vd>;     using vvl = vector<vl>;\n \n#define REP(i,n) for(ll i=0; i<(n); ++i)\n#define FOR(i,b,n) for(ll i=(b); i<(n); ++i)\n#define ALL(v) (v).begin(), (v).end()\n#define TEN(x) ((ll)1e##x)\n \ntemplate<typename T> inline string join(const vector<T>& vec, string sep = \" \") { stringstream ss; REP(i, vec.size()) ss << vec[i] << ( i+1 == vec.size() ? \"\" : sep ); return ss.str(); }\n \n \n///////////////\n \n#define EPS (1e-10)\n#define NEXT(x, i) (x[(i + 1) % x.size()])\n \ntemplate<class T> using CR = const T &;\nusing P = complex<ld>;\nusing G = vector<P>;\n \nint sgn(ld a, ld b = 0) {\n    if (a > b + EPS) return 1;\n    if (a < b - EPS) return -1;\n    return 0;\n}\n \nld dot(P a, P b) { return real(conj(a)*b); }\nld cross(P a, P b) { return imag(conj(a)*b); }\n \nint ccw(P a, P b, P c) {\n    b -= a;\n    c -= a;\n    if (sgn(cross(b, c))) return sgn(cross(b, c)); // clockwise or counter clockwise\n    if (sgn(dot(b, c)) == -1) return 2;            // c--a--b\n    if (sgn(norm(b), norm(c)) == -1) return -2;    // a--b--c\n    return 0;                                      // a--c--b\n}\n \nstruct L : public vector<P> {\n    L(P a, P b) { push_back(a); push_back(b); }\n};\n\nbool iLL(CR<L> l, CR<L> m, bool strict = false) {\n\tif (sgn(cross(l[1] - l[0], m[1] - m[0]))) return true;   // not-parallel\n\treturn !strict && !sgn(cross(l[1] - l[0], m[0] - l[0])); // same line\n}\nbool iLS(CR<L> l, CR<L> s, bool strict = false) {\n\tint c = sgn(cross(l[1] - l[0], s[0] - l[0])) * sgn(cross(l[1] - l[0], s[1] - l[0]));\n\treturn c <= 0 && (!strict || c == -1);\n}\nbool iSS(CR<L> s, CR<L> t, bool strict = false) {\n\tint ccwa = ccw(s[0], s[1], t[0]) * ccw(s[0], s[1], t[1]);\n\tint ccwb = ccw(t[0], t[1], s[0]) * ccw(t[0], t[1], s[1]);\n\treturn ccwa <= 0 && (!strict || ccwa == -1)\n\t\t&& ccwb <= 0 && (!strict || ccwb == -1);\n}\nld dLP(CR<L> l, P p) { return abs(cross((l[1] - l[0]), p - l[0]) / (l[1] - l[0])); }\nld dSP(L s, P p) {\n\tif (dot(s[1] - s[0], p - s[0]) < 0) return abs(p - s[0]);\n\tif (dot(s[1] - s[0], p - s[1]) > 0) return abs(p - s[1]);\n\treturn dLP(s, p);\n}\nld dLL(CR<L> a, CR<L> b) { return iLL(a, b) ? 0 : dLP(a, b[0]); }\nld dLS(CR<L> a, CR<L> b) { return iLS(a, b) ? 0 : min(dLP(a, b[0]), dLP(a, b[1])); }\nld dSS(CR<L> a, CR<L> b) { return iSS(a, b) ? 0 : min(min(dSP(a, b[0]), dSP(a, b[1])), min(dSP(b, a[0]), dSP(b, a[1]))); }\n\n//////////////\n \nint main() {\n#ifdef INPUT_FROM_FILE\n    ifstream cin(\"sample.in\");\n    ofstream cout(\"sample.out\");\n#endif\n    cin.tie(0);\n    ios_base::sync_with_stdio(false);\n    cout << fixed << setprecision(30);\n\tll n; cin >> n;\n\tREP(i, n) {\n\t\tld x0, y0, x1, y1, x2, y2, x3, y3;\n\t\tcin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n\t\tcout << dSS({ { x0, y0 }, { x1, y1 } }, { { x2, y2 }, { x3, y3 } }) << endl;\n\t}\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n#define all(x) (x).begin(),(x).end()\nconst int mod=998244353,MAX=105,INF=1<<30;\n\nconst double eps=1e-10;\nconst long double pi=acos((long double)-1.0L);\n#define equals(a,b) (fabs((a)-(b))<eps)\n\nclass Point{\npublic:\n    double x,y;\n    \n    Point(double x=0,double y=0):x(x),y(y){}\n    \n    Point operator + (Point p){return Point(x+p.x,y+p.y);}\n    Point operator - (Point p){return Point(x-p.x,y-p.y);}\n    Point operator * (double a){return Point(a*x,a*y);}\n    Point operator / (double a){return Point(x/a,y/a);}\n    \n    double abs(){return sqrt(norm());}\n    double norm(){return x*x+y*y;}\n    \n    bool operator < (const Point &p)const{\n        return x!=p.x ? x<p.x : y<p.y;\n    }\n    \n    bool operator == (const Point &p)const{\n        return fabs(x-p.x)<eps&&fabs(y-p.y)<eps;\n    }\n};\n\ntypedef Point Vector;\n\ndouble norm(Vector a){\n    return a.x*a.x+a.y*a.y;\n}\n\ndouble abs(Vector a){\n    return sqrt(norm(a));\n}\n\ndouble dot(Vector a,Vector b){\n    return a.x*b.x+a.y*b.y;\n}\n\ndouble cross(Vector a,Vector b){\n    return a.x*b.y-a.y*b.x;\n}\n\nstruct Segment{\n    Point p1,p2;\n};\n\nbool isOrthogonal(Vector a,Vector b){\n    return equals(dot(a,b),0.0);\n}\n\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n    return isOrthogonal(a1-a2,b1-b2);\n}\n\nbool isOrthogonal(Segment s1,Segment s2){\n    return equals(dot(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n\nbool isParallel(Vector a,Vector b){\n    return equals(cross(a,b),0.0);\n}\n\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n    return isParallel(a1-a2,b1-b2);\n}\n\nbool isParallel(Segment s1,Segment s2){\n    return equals(cross(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n\nPoint project(Segment s,Point p){\n    Vector base=s.p2-s.p1;\n    double r=dot(p-s.p1,base)/norm(base);\n    return s.p1+base*r;\n}\n\nPoint reflect(Segment s,Point p){\n    return p+(project(s,p)-p)*2.0;\n}\n\nstatic const int counter_clockwise=1;\nstatic const int clockwise=-1;\nstatic const int online_back=2;\nstatic const int online_front=-2;\nstatic const int on_segment=0;\n\nint ccw(Point p0,Point p1,Point p2){\n    Vector a=p1-p0;\n    Vector b=p2-p0;\n    \n    if(cross(a,b)>eps) return counter_clockwise;\n    if(cross(a,b)<-eps) return clockwise;\n    if(dot(a,b)<-eps) return online_back;\n    if(a.norm()<b.norm()) return online_front;\n    \n    return on_segment;\n}\n\nbool intersect(Point p1,Point p2,Point p3,Point p4){\n    return(ccw(p1,p2,p3)*ccw(p1,p2,p4)<=0&&ccw(p3,p4,p1)*ccw(p3,p4,p2)<=0);\n}\n\nbool intersect(Segment s1,Segment s2){\n    return intersect(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n\ntypedef Segment Line;\n\ndouble getDistance(Point a,Point b){\n    return abs(a-b);\n}\n\ndouble getDistanceLP(Line l,Point p){\n    return abs(cross(l.p2-l.p1,p-l.p1)/abs(l.p2-l.p1));\n}\n\ndouble getDistanceSP(Segment s,Point p){\n    if(dot(s.p2-s.p1,p-s.p1)<0.0) return abs(p-s.p1);\n    if(dot(s.p1-s.p2,p-s.p2)<0.0) return abs(p-s.p2);\n    return getDistanceLP(s,p);\n}\n\ndouble getDistance(Segment s1,Segment s2){\n    if(intersect(s1,s2)) return 0.0;\n    return min({getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2),getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)});\n}\n\nPoint getCrossPoint(Segment s1,Segment s2){\n    Vector base=s2.p2-s2.p1;\n    double d1=abs(cross(base,s1.p1-s2.p1));\n    double d2=abs(cross(base,s1.p2-s2.p1));\n    double t=d1/(d1+d2);\n    return s1.p1+(s1.p2-s1.p1)*t;\n}\n\nclass Circle{\npublic:\n    Point c;\n    double r;\n    Circle(Point c=Point(),double r=0.0):c(c),r(r){}\n};\n\npair<Point,Point> segCrossPpoints(Circle c,Line l){\n    //assert(intersect(c,l));\n    Vector pr=project(l,c.c);\n    Vector e=(l.p2-l.p1)/abs(l.p2-l.p1);\n    double base=sqrt(c.r*c.r-norm(pr-c.c));\n    return make_pair(pr+e*base,pr-e*base);\n}\n\ndouble arg(Vector p){return atan2(p.y,p.x);}\nVector polar(double a,double r){return Point(cos(r)*a,sin(r)*a);}\n\npair<Point,Point> getCrossPoints(Circle c1,Circle c2){\n    //assert(intersect(c1,c2));\n    double d=abs(c1.c-c2.c);\n    double a=acos((c1.r*c1.r+d*d-c2.r-c2.r)/(2*c1.r*d));\n    double t=arg(c2.c-c1.c);\n    return make_pair(c1.c+polar(c1.r,t+a),c1.c+polar(c1.r,t-a));\n}\n\ntypedef vector<Point> Polygon;\n\n/*\n IN 2\n ON 1\n OUT 0\n */\n\nint contains(Polygon g,Point p){\n    int n=int(g.size());\n    bool x=false;\n    for(int i=0;i<n;i++){\n        Point a=g[i]-p,b=g[(i+1)%n]-p;\n        if(a.y>b.y) swap(a,b);\n        if(a.y<eps&&eps<b.y&&cross(a,b)>eps) x=!x;\n    }\n    return (x?2:0);\n}\n\nPolygon andrewScan(Polygon s){\n    Polygon u,l;\n    if(int(s.size())<3) return s;\n    sort(all(s));\n    int n=int(s.size());\n    \n    u.push_back(s[0]);\n    u.push_back(s[1]);\n    \n    l.push_back(s[n-1]);\n    l.push_back(s[n-2]);\n    \n    for(int i=2;i<n;i++){\n        for(int j=int(u.size());j>=2&&ccw(u[j-2],u[j-1],s[i])!=clockwise;j--){\n            u.pop_back();\n        }\n        u.push_back(s[i]);\n    }\n    \n    for(int i=int(s.size())-3;i>=0;i--){\n        for(int j=int(l.size());j>=2&&ccw(l[j-2],l[j-1],s[i])!=clockwise;j--){\n            l.pop_back();\n        }\n        l.push_back(s[i]);\n    }\n    \n    reverse(all(l));\n    \n    for(int i=int(u.size())-2;i>=1;i--) l.push_back(u[i]);\n    \n    return l;\n}\n\nint main(){\n    \n    std::ifstream in(\"text.txt\");\n    std::cin.rdbuf(in.rdbuf());\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    \n    int Q;cin>>Q;\n    while(Q--){\n        Segment s1,s2;\n        cin>>s1.p1.x>>s1.p1.y>>s1.p2.x>>s1.p2.y>>s2.p1.x>>s2.p1.y>>s2.p2.x>>s2.p2.y;\n        \n        cout<<setprecision(25)<<getDistance(s1,s2)<<endl;\n    }\n}\n\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cstring>\n#include <algorithm>\n#include <sstream>\n#include <map>\n#include <set>\n#include <cmath>\n\n#define REP(i,k,n) for(int i=k;i<n;i++)\n#define rep(i,n) for(int i=0;i<n;i++)\n#define INF 1<<30\n#define pb push_back\n#define mp make_pair\n#define EPS 1e-8\n#define equals(a,b) fabs((a) - (b)) < EPS\n\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> P;\n\nstruct Point {\n\tdouble x, y;\n\n\tPoint(double x=0, double y=0) : x(x), y(y) {}\n\n\tPoint operator+(const Point &o) const { return Point(x+o.x, y+o.y); }\n\n\tPoint operator-(const Point &o) const { return Point(x-o.x, y-o.y); }\n\n\tPoint operator*(const double m) const { return Point(x*m, y*m); }\n\n\tPoint operator/(const double d) const { return Point(x/d, y/d); }\n\n\tbool operator<(const Point &o) const { return x != o.x ? x < o.x : y < o.y; }\n\n\tbool operator==(const Point &o) const { return fabs(x-o.x) < EPS && fabs(y-o.y) < EPS; }\n};\n\nostream& operator << (ostream& os, const Point& p) {\n\tos << \"(\" << p.x << \", \" << p.y << \")\";\n\treturn os;\n}\n\ndouble dot(Point a, Point b) { return a.x * b.x + a.y * b.y; }\ndouble cross(Point a, Point b) { return a.x * b.y - a.y * b.x; }\ndouble atan(Point p) { return atan2(p.y, p.x); }\ndouble norm(Point p) { return p.x * p.x + p.y * p.y; }\ndouble abs(Point p) { return sqrt(norm(p)); }\ndouble distancePP(Point p, Point o) { return sqrt(norm(o - p)); }\n\nint ccw(Point a, Point b, Point c) {\n\tb = b-a;\n\tc = c-a;\n\n\tif(cross(b, c) > 0.0) return +1;\t//conter clockwise\n\tif(cross(b, c) < 0.0) return -1;\t//clockwise\n\tif(dot(b, c) < 0.0) return +2;\t//a on Seg(b,c)\n\tif(norm(b) < norm(c)) return -2;\t//b on Seg(a,c)\n\treturn 0;\t//c on Seg(a,b)\n}\n\nstruct Line {\n\tPoint a, b;\n\n\tLine() : a(Point(0, 0)), b(Point(0, 0)) {}\n\tLine(Point a, Point b) : a(a), b(b) {}\n};\n\nostream& operator << (ostream& os, const Line& l) {\n\tos << \"(\" << l.a.x << \", \" << l.a.y << \")-(\" << l.b.x << \",\" << l.b.y << \")\";\n\treturn os;\n}\n\nstruct Seg {\n\tPoint a,b;\n\n\tSeg() : a(Point(0, 0)), b(Point(0, 0)) {}\n\n\tSeg (Point a, Point b) : a(a),b(b) {}\n};\n\nostream& operator << (ostream& os, const Seg& s) {\n\tos << \"(\" << s.a.x << \", \" << s.a.y << \")-(\" << s.b.x << \",\" << s.b.y << \")\";\n\treturn os;\n}\n\nbool isOrthogonal(Line l1, Line l2) { return equals(dot((l1.b - l1.a), (l2.b - l2.a)), 0.0); }\n\nbool isParallel(Line l1, Line l2) { return equals(cross((l1.b - l1.a), (l2.b - l2.a)), 0.0); }\n\nbool sameLine(Line l1, Line l2) { return abs(cross(l1.b - l1.a, l2.b - l1.a)) < EPS; }\n\nbool isIntersectLL(Line l1, Line l2) { return !isParallel(l1, l2) || sameLine(l1, l2); }\n\nbool isIntersectLS(Line l, Seg s) {\n\treturn cross(l.b - l.a, s.a - l.a) * cross(l.b - l.a, s.b - l.a) < 0;\n}\n\nbool isIntersectSS(Seg s1, Seg s2) { \n\treturn ccw(s1.a, s1.b, s2.a) * ccw(s1.a, s1.b, s2.b) <= 0 \n\t\t&& ccw(s2.a, s2.b, s1.a) * ccw(s2.a, s2.b, s1.b) <= 0;\n}\n\ndouble distanceLP(Line l, Point p) {\n\treturn abs(cross(l.b - l.a, p - l.a)) / abs(l.b - l.a);\n}\n\ndouble distanceLS(Line l, Seg s) {\n\tif (isIntersectLS(l, s)) return 0.0;\n\treturn min(distanceLP(l, s.a), distanceLP(l, s.b));\n}\n\ndouble distanceSP(Seg s, Point p) {\n\tif (dot(s.b - s.a, p - s.a) < 0.0) return abs(p - s.a);\n\tif (dot(s.a - s.b, p - s.b) < 0.0) return abs(p - s.b);\n\treturn distanceLP(Line(s.a, s.b) , p);\n}\n\ndouble distanceSS(Seg s1, Seg s2) {\n    if (isIntersectSS(s1, s2)) return 0.0;\n\treturn min( min(distanceSP(s1, s2.a), distanceSP(s1, s2.b)), min(distanceSP(s2, s1.a), distanceSP(s2, s1.b)) );\n}\n\n// if isIntersectLL(l1, l2)\nPoint crossPointLL(Line l1, Line l2) {\n\tPoint base = l2.b - l2.a;\n\tdouble d = abs(cross(base, l1.a - l2.a));\n\tdouble d2 = abs(cross(base, l1.b - l2.a));\n\tdouble t = d / (d + d2);\n\treturn l1.a + (l1.b - l1.a) * t;\n}\n\n// if isIntersectLS(l, s)\nPoint crossPointLS(Line l, Seg s) { return crossPointLL(l, Line(s.a, s.b)); }\n\n// if isIntersectSS(s1, s2)\nPoint crossPointSS(Seg s1, Seg s2) { return crossPointLL(Line(s1.a, s1.b), Line(s2.a, s2.b)); }\n\nint main() {\n\tint q;\n\tcin >> q;\n\n\tSeg s1, s2;\n\trep(i, q) {\n\t\tcin >> s1.a.x >> s1.a.y >> s1.b.x >> s1.b.y >> s2.a.x >> s2.a.y >> s2.b.x >> s2.b.y;\n\n\t\tcout << fixed;\n\t\tcout.precision(20);\n\n\t\tcout << distanceSS(s1, s2) << endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\ninline double add(double a, double b){\n    return abs(a+b)<(1e-10)*(abs(a)+abs(b)) ? 0.0 : a+b;\n}\n\nstruct vec{\n    double x,y;\n    vec operator-(vec b){\n        return (vec){add(x,-b.x),add(y,-b.y)};\n    }\n    vec operator+(vec b){\n        return (vec){add(x,b.x),add(y,b.y)};\n    }\n    vec operator*(double d){\n        return (vec){x*d,y*d};\n    }\n    double dot(vec v){\n        return add(x*v.x,y*v.y);\n    }\n    double cross(vec v){\n        return add(x*v.y,-y*v.x);\n    }\n    double norm(){\n        return sqrt(x*x+y*y);\n    }\n};\n\nconst double eps = 0.0000001;\n\n\nint ccw(vec& a, vec& b, vec& c){\n    vec ab = b-a, ac = c-a;\n    double o = ab.cross(ac);\n    if(o>0) return 1; //CCW\n    if(o<0) return -1; //CW\n    if(ab.dot(ac)<0){\n        return 2; //C-A-B\n    }else{\n        if(ab.dot(ab)<ac.dot(ac)){\n            return -2; //A-B-C\n        }else{\n            return 0; //A-C-B\n        }\n    }\n}\n\nbool isInterSection(vec (&p)[4]){\n    switch(ccw(p[0],p[1],p[2])*ccw(p[0],p[1],p[3])){\n        case -1:\n        case -4:\n        case 0:\n            break;\n        default:\n            return false;\n    }\n    switch(ccw(p[2],p[3],p[0])*ccw(p[2],p[3],p[1])){\n        case -1:\n        case -4:\n        case 0:\n            break;\n        default:\n            return false;\n    }\n   return true;\n}\n\nvec interSection(vec (&p)[4]){\n    vec p23=p[3]-p[2],p02=p[2]-p[0],p01=p[1]-p[0];\n    double k = p23.cross(p02)/p23.cross(p01);\n    return p[0]+p01*k;\n}\n\ndouble dist(vec (&p)[4]){\n    if(isInterSection(p)) return 0;\n    double dist =1e5;\n    vec P;\n    P=p[0]+(p[1]-p[0])*((p[1]-p[0]).dot(p[2]-p[0])/(p[1]-p[0]).dot(p[1]-p[0]));\n    if(!ccw(p[0],p[1],P)){\n        dist = min(dist,sqrt((P-p[2]).dot(P-p[2])));\n    }\n    P=p[0]+(p[1]-p[0])*((p[1]-p[0]).dot(p[3]-p[0])/(p[1]-p[0]).dot(p[1]-p[0]));\n    if(!ccw(p[0],p[1],P)){\n        dist = min(dist,sqrt((P-p[3]).dot(P-p[3])));\n    }\n    P=p[2]+(p[3]-p[2])*((p[3]-p[2]).dot(p[0]-p[2])/(p[3]-p[2]).dot(p[3]-p[2]));\n    if(!ccw(p[2],p[3],P)){\n        dist = min(dist,sqrt((P-p[0]).dot(P-p[0])));\n    }\n    P=p[2]+(p[3]-p[2])*((p[3]-p[2]).dot(p[1]-p[2])/(p[3]-p[2]).dot(p[3]-p[2]));\n    if(!ccw(p[2],p[3],P)){\n        dist = min(dist,sqrt((P-p[1]).dot(P-p[1])));\n    }\n    if(dist!=1e5) return dist;\n    dist = min(dist,sqrt((p[2]-p[0]).norm()));\n    dist = min(dist,sqrt((p[2]-p[1]).norm()));\n    dist = min(dist,sqrt((p[3]-p[0]).norm()));\n    dist = min(dist,sqrt((p[3]-p[1]).norm()));\n    return dist;\n}\n\nint main(void){\n    vec p[4];\n    int q;\n    cin >> q;\n    cout.precision(10);\n    cout << fixed;\n    while(q--){\n        for(auto& v : p) cin >> v.x >> v.y;\n        cout << dist(p) << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> P;\ndouble eps=1e-7;\nbool eq(double a,double b){return (b-a<eps&&a-b<eps);}\ndouble cross(P a,P b){return real(b*conj(a));}\ndouble dot(P a,P b){return imag(b*conj(a));}\nP project(P a,P b,P c){b-=a;c-=a;return a+b*real(c/b);}\nP reflect(P a,P b,P c){b-=a;c-=a;return a+conj(c/b)*b;}\nint ccw(P a,P b,P c){\n  b-=a,c-=a,a=c*conj(b);\n  if(a.imag()>eps)return 1;//ccw\n  if(a.imag()<-eps)return -1;//cw\n  if(a.real()<-eps)return 2;//ob\n  if(abs(b)+eps<abs(c))return -2;//of\n  return 0;//os\n}\n\n//segment ab , point c\ndouble dist(P a,P b,P c){\n  if(dot(b-a,c-a)<0)return abs(c-a);\n  if(dot(a-b,c-b)<0)return abs(c-b);\n  return imag((c-a)*conj(b-a))/abs(b-a);\n}\n\nbool isintersect(P a,P b,P c,P d){\n  return ((ccw(a,b,c)*ccw(a,b,d)<=0)&&(ccw(c,d,a)*ccw(c,d,b)<=0));\n}\n\n//segment ab , segment cd\nP intersect(P a,P b,P c,P d){\n  a-=d;b-=d;c-=d;\n  return d+a+(b-a)*imag(a/c)/imag(a/c-b/c);\n}\n\ndouble dist(P a,P b,P c,P d){\n  if(isintersect(a,b,c,d))return 0;\n  double ab=min(dist(a,b,c),dist(a,b,d));\n  double cd=min(dist(c,d,a),dist(c,d,b));\n  return min(ab,cd);\n}\n\nint main(){\n  int T;\n  cin>>T;\n  while(T--){\n    double ax,ay,bx,by,cx,cy,dx,dy;\n    cin>>ax>>ay>>bx>>by>>cx>>cy>>dx>>dy;\n  \n    printf(\"%.12f\\n\",dist( P(ax,ay) , P(bx,by) , P(cx,cy) , P(dx,dy) ) );\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <cassert>\n#include <cmath>\n#include <algorithm>\n#include <iostream>\n#include <iomanip>\n#include <limits.h>\n#include <map>\n#include <queue>\n#include <set>\n#include <string.h>\n#include <vector>\n\nusing namespace std;\ntypedef long long ll;\n\nconst double EPS = 1e-9;\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nclass Point {\npublic:\n  double x;\n  double y;\n\n  Point(double x = 0.0, double y = 0.0) {\n    this->x = x;\n    this->y = y;\n  }\n\n  Point operator+(Point p) { return Point(x + p.x, y + p.y); }\n\n  Point operator-(Point p) { return Point(x - p.x, y - p.y); }\n\n  Point operator*(double a) { return Point(a * x, a * y); }\n\n  Point operator/(double a) { return Point(x / a, y / a); }\n\n  double norm() { return x * x + y * y; }\n\n  double abs() { return sqrt(norm()); }\n\n  bool operator<(const Point &p) const {\n    return x != p.x ? x < p.x : y < p.y;\n  }\n\n  bool operator==(const Point &p) const {\n    return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n  }\n};\n\ntypedef Point Vector;\nstruct Segment {\n  Point p1, p2;\n\n  Segment(Point p1 = Point(), Point p2 = Point()) {\n    this->p1 = p1;\n    this->p2 = p2;\n  }\n};\n\ntypedef Segment Line;\n\ndouble dot(const Vector &a, const Vector &b) {\n  return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(const Vector &a, const Vector &b) {\n  return a.x * b.y - a.y * b.x;\n}\n\nclass Circle {\npublic:\n  Point c;\n  double r;\n\n  Circle(Point c = Point(), double r = 0.0) {\n    this->c = c;\n    this->r = r;\n  }\n};\n\ntypedef vector <Point> Polygon;\n\nPoint project(Segment s, Point p) {\n  Vector base = s.p2 - s.p1;\n  double r = dot(p - s.p1, base) / base.norm();\n  return s.p1 + base * r;\n}\n\nPoint reflect(Segment s, Point p) {\n  return p + (project(s, p) - p) * 2.0;\n}\n\ndouble getDistance(Point a, Point b) {\n  return (a - b).abs();\n}\n\ndouble getDistanceLP(Line l, Point p) {\n  return fabs(cross(l.p2 - l.p1, p - l.p1) / (l.p2 - l.p1).abs());\n}\n\ndouble getDistanceSP(Segment s, Point p) {\n  if (dot(s.p2 - s.p1, p - s.p1) < 0.0) return (p - s.p1).abs();\n  if (dot(s.p1 - s.p2, p - s.p2) < 0.0) return (p - s.p2).abs();\n\n  return getDistanceLP(s, p);\n}\n\nint ccw(Point p0, Point p1, Point p2) {\n  Vector a = p1 - p0;\n  Vector b = p2 - p0;\n  if (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n  if (cross(a, b) < -EPS) return CLOCKWISE;\n  if (dot(a, b) < -EPS) return ONLINE_BACK;\n  if (a.norm() < b.norm()) return ONLINE_FRONT;\n\n  return ON_SEGMENT;\n}\n\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n  return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 && ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\n\nbool intersect(Segment s1, Segment s2) {\n  return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\ndouble getDistance(Segment s1, Segment s2) {\n  if (intersect(s1, s2)) return 0.0;\n\n  return min(\n    min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n    min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2))\n  );\n}\n\nint main() {\n  int Q;\n  cin >> Q;\n\n  int x0, x1, x2, x3;\n  int y0, y1, y2, y3;\n\n  for (int i = 0; i < Q; ++i) {\n    cin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n\n    Point p1(x0, y0);\n    Point p2(x1, y1);\n    Point p3(x2, y2);\n    Point p4(x3, y3);\n\n    Segment s1(p1, p2);\n    Segment s2(p3, p4);\n\n    cout << fixed << setprecision(10) << getDistance(s1, s2) << endl;\n  }\n\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<iomanip>\n#include<cstdio>\n#include<cmath>\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nusing namespace std;\n\nclass Point {\n    public:\n    double x, y;\n    \n    Point(double x = 0, double y = 0): x(x), y(y) {}\n    \n    Point operator + (Point p) {return Point(x + p.x, y + p.y); }\n    Point operator - (Point p) {return Point(x - p.x, y - p.y); }\n    Point operator * (double a) {return Point(a * x, a * y); }\n    Point operator / (double a) {return Point(x / a, y / a); }\n    \n    double abs() { return sqrt(norm()); }\n    double norm() { return x * x + y * y; }\n    \n    bool operator < (const Point &p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n    \n    bool operator == (const Point &p) const {\n        return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS; \n    }\n};\n\nstruct Segment {\n    Point p1, p2;\n};\n\ntypedef Segment Line;\n\nclass Circle {\n    public:\n    Point c;\n    double r;\n    Circle(Point c = Point(), double r = 0.0): c(c), r(r) {}\n};\n\ntypedef Point Vector;\n\ndouble norm(Vector a) {\n    return a.x * a.x + a.y * a.y;\n}\n\ndouble abs(Vector a) {\n    return sqrt(norm(a));\n}\n\ndouble dot(Vector a, Vector b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n    return a.x * b.y - a.y * b.x;\n}\n\nbool isOrthogonal(Vector a, Vector b) {\n    return equals(dot(a, b), 0.0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n    return isOrthogonal(a1 - a2, b1 - b2);\n}\n\nbool isOrthogonal(Segment s1, Segment s2) {\n    return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nbool isParallel(Vector a, Vector b) {\n    return equals(cross(a, b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n    return isParallel(a1 - a2, b1 - b2);\n}\n\nbool isParallel(Segment s1, Segment s2) {\n    return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nPoint project(Segment s, Point p) {\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / norm(base);\n    return s.p1 + base * r;\n}\n\nPoint reflect(Segment s, Point p) {\n    return p + (project(s, p) - p) * 2.0;\n}\n\ndouble getDistance(Point a, Point b) {\n    return abs(a - b);\n}\n\ndouble getDistanceLP(Line l, Point p) {\n    return abs(cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1));\n}\n\ndouble getDistanceSP(Segment s, Point p) {\n    if ( dot(s.p2 - s.p1, p - s.p1) < 0.0 ) return abs(p - s.p1);\n    if ( dot(s.p1 - s.p2, p - s.p2) < 0.0 ) return abs(p - s.p2);\n    return getDistanceLP(s, p);\n}\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nint ccw(Point p0, Point p1, Point p2) {\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if ( cross(a, b) > EPS ) return COUNTER_CLOCKWISE;\n    if ( cross(a, b) < -EPS ) return CLOCKWISE;\n    if ( dot(a, b) < -EPS ) return ONLINE_BACK;\n    if ( a.norm() < b.norm() ) return ONLINE_FRONT;\n    \n    return ON_SEGMENT;\n}\n\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n    return ( ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n             ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\n\nbool intersect(Segment s1, Segment s2) {\n    return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\ndouble getDistance(Segment s1, Segment s2) {\n    if ( intersect(s1, s2) ) return 0.0;\n    return min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n               min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\nint main() {\n    int n;\n    Segment s1, s2;\n    cin >> n;\n    for ( int i = 0; i < n; i++ ) {\n        cin >> s1.p1.x >> s1.p1.y >> s1.p2.x >> s1.p2.y\n            >> s2.p1.x >> s2.p1.y >> s2.p2.x >> s2.p2.y;\n       \n        cout << fixed << setprecision(10) << getDistance(s1, s2) << endl;\n    }\n    \n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n\n#define dbg(x...) do { cout << \"\\033[32;1m\" << #x <<\" -> \"; err(x); } while (0)\nvoid err() { cout << \"\\033[39;0m\" << endl; }\ntemplate<class T, class... Ts> void err(const T& arg,const Ts&... args) { cout << arg << \" \"; err(args...); }\n\ntypedef long double db;\nconst db eps = 1e-8;\nconst db pi = acosl(-1.0);\n\nint sgn(db x) {if(fabs(x) < eps) return 0; return x < 0 ? -1 : 1;}\n\nstruct Point{\n    db x, y;\n    Point(){}\n    Point(db x, db y) : x(x), y(y){}\n    void input(){cin >> x >> y;}\n    Point operator + (const Point &b) const{\n        return Point(x + b.x, y + b.y);\n    }\n    Point operator - (const Point &b) const {\n        return Point(x - b.x, y - b.y);\n    }\n    db operator ^ (const Point &b) const{\n        return x * b.y - y * b.x;\n    }\n    db operator * (const Point &b) const{\n        return x * b.x + y * b.y;\n    }\n    Point operator * (const db &k) const{\n        return Point(x * k, y * k);\n    }\n    Point operator / (const db &k) const{\n        return Point(x / k, y / k);\n    }\n    db len(){\n        return sqrtl(x * x + y * y);\n    }\n    db distance(Point p) {\n        return (*this-p).len();\n    }\n};\nstruct Line{\n    Point s, e;\n    Line(){}\n    Line(Point s, Point e) : s(s), e(e){}\n    void input() {s.input(); e.input();}\n\n    int getCrossTypeofSeg(Line v){\n        int d1 = sgn((e - s) ^ (v.s - s));  //v.s 在 线段的哪一侧\n        int d2 = sgn((e - s) ^ (v.e - s));  //v.e 在 线段的哪一侧\n        int d3 = sgn((v.e - v.s) ^ (s - v.s));  \n        int d4 = sgn((v.e - v.s) ^ (e - v.s));\n        if((d1^d2) == -2 && (d3^d4) == -2) return 2; // 跨立实验满足 一个是-1一个是1\n\n        // 1. v.s在线段上 || v.e 在线段上 || s 在另外一条线段上 || e在另外一条线段上\n        return (d1 == 0 &&  sgn((v.s - s) * (v.s - e)) <= 0) ||\n            (d2 == 0 && sgn((v.e - s) * (v.e - e)) <= 0) ||\n            (d3 == 0 && sgn((s - v.s) * (s - v.e)) <= 0) || \n            (d4 == 0 && sgn((e - v.s) * (e - v.e)) <= 0);\n    }\n\n    db getDisPointToLine(Point p) {\n        return fabs(((p-s)^(e-s))/(e-s).len());\n    }\n\n    db getDisPointToSeg(Point p) {\n        if(sgn((e-s) * (p-s)) < 0 || sgn((s - e) * (p - e)) < 0) return min(s.distance(p), e.distance(p));\n        return getDisPointToLine(p);\n    }\n    db getDisSegToSeg(Line v) {\n        return min(min(getDisPointToSeg(v.s), getDisPointToSeg(v.e)), min(v.getDisPointToSeg(s), v.getDisPointToSeg(e)));\n    }\n}l1, l2;\n\nint main(){\n#ifndef ONLINE_JUDGE\n// freopen(\"i.in\",\"r\",stdin);\n//  freopen(\"o.out\",\"w\",stdout);\n#endif\n    int T;scanf(\"%d\", &T);\n    while(T--){\n        l1.input(); l2.input();\n        db res = 0;\n        if(l1.getCrossTypeofSeg(l2) > 0) res = 0;\n        else res = l1.getDisSegToSeg(l2);\n        cout << fixed << setprecision(10) << res  <<endl;\n    }\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <string>\n#include <cstdio>\n#include <algorithm>\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\nusing namespace std;\n\n//点を表す構造体\nclass Point{\npublic:\n  double x, y;\n\n  Point(double x=0, double y=0){\n    this->x = x;\n    this->y = y;\n  }\n\n  Point operator+(const Point &seg2){\n    return Point(x+seg2.x, y+seg2.y);\n  }\n\n  Point operator-(const Point &seg2){\n    return Point(x-seg2.x, y-seg2.y);\n  }\n\n  Point operator*(const double k){\n    return Point(x*k, y*k);\n  }\n\n  Point &operator=(const Point &p){\n    x = p.x;\n    y = p.y;\n    return *this;\n  }\n\n  bool operator < (const Point &p) const{\n    return x != p.x? x<p.x : y<p.y;\n  }\n\n  bool operator == (const Point &p) const{\n    return equals(x, p.x) && equals(y, p.y);\n  }\n};\n\n//ベクトルを点の別表記でも表せるようにしておく\nclass Vector : public Point{\npublic:\n  Vector() : Point() {}\n\n  Vector(double x, double y) : Point(x, y) {}\n\n  Vector(Point p) : Point(){\n    x = p.x;\n    y = p.y;\n  }\n\n  double norm(){\n    return x*x + y*y;\n  }\n\n  double abs(){\n    return sqrt(norm());\n  }\n\n  static double dot(Vector a, Vector b){\n    return a.x*b.x + a.y*b.y;\n  }\n\n  static double cross(Vector a, Vector b){\n    return a.x*b.y - a.y*b.x;\n  }\n\n  static bool isOrthogonal(Vector a, Vector b){\n    return equals(dot(a, b), 0.0);\n  }\n\n  static bool isParallel(Vector a, Vector b){\n    return equals(cross(a, b), 0.0);\n  }\n};\n\n//線分(ベクトルを用いて)を表す構造体。両端の点が定義されている点に注意\nclass Segment{\npublic:\n  Point p1, p2;\n\n  Segment(Point p1, Point p2){\n    this->p1 = p1;\n    this->p2 = p2;\n    x = p2.x-p1.x;\n    y = p2.y-p1.y;\n  }\n\n  static bool isOrthogonal(Segment a, Segment b){\n    return equals(dot(a, b), 0.0);\n  }\n\n  static bool isParallel(Segment a, Segment b){\n    return equals(cross(a, b), 0.0);\n  }\n\nprivate:\n  int x, y;\n  static double dot(Segment a, Segment b){\n    return a.x*b.x + a.y*b.y;\n  }\n\n  static double cross(Segment a, Segment b){\n    return a.x*b.y - a.y*b.x;\n  }\n};\n\ntypedef Segment Line;\n\nclass Circle{\npublic:\n  Point c;\n  double r;\n  Circle(Point c = Point(), double r = 0.0): c(c), r(r){}\n};\n\nstring ccw_str(Point p0, Point p1, Point p2){\n  //enum res {COUNTER_CLOCKWISE=0, CLOCKWISE, ONLINE_BACK, ONLINE_FRONT, ON_SEGMENT};\n  Vector a = p1-p0;\n  Vector b = p2-p0;\n  if(Vector::cross(a, b) > EPS) return \"COUNTER_CLOCKWISE\";\n  if(Vector::cross(a, b) < -EPS) return \"CLOCKWISE\";\n  if(Vector::dot(a, b) < -EPS) return \"ONLINE_BACK\";\n  if(a.norm() < b.norm()) return \"ONLINE_FRONT\";\n  return \"ON_SEGMENT\";\n}\n\nint ccw_int(Point p0, Point p1, Point p2){\n  enum res {COUNTER_CLOCKWISE=-1, CLOCKWISE=1, ONLINE_BACK=2, ONLINE_FRONT=-2, ON_SEGMENT=0};\n  Vector a = p1-p0;\n  Vector b = p2-p0;\n  if(Vector::cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n  if(Vector::cross(a, b) < -EPS) return CLOCKWISE;\n  if(Vector::dot(a, b) < -EPS) return ONLINE_BACK;\n  if(a.norm() < b.norm()) return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\n\nPoint project(Segment s, Point p){\n  Vector base = s.p2-s.p1;\n  double r = Vector::dot(p - s.p1, base) / base.norm();\n  return s.p1 + base*r;\n}\n\nPoint reflect(Segment s, Point p){\n  Point pro = project(s, p);\n  return p + (pro-p)*2.0;\n}\n\nbool intersect(Point p1, Point p2, Point p3, Point p4){\n  return ccw_int(p1, p2, p3)*ccw_int(p1, p2, p4)<=0 && ccw_int(p3, p4, p1)*ccw_int(p3, p4, p2)<=0;\n}\n\nbool intersect(Segment s1, Segment s2){\n  return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\nPoint crossPoint(Point p1, Point p2, Point p3, Point p4){\n  Vector base = p2-p1;\n  double d1 = fabs(Vector::cross(base, p4-p1))/fabs(base.abs());\n  double d2 = fabs(Vector::cross(base, p3-p1))/fabs(base.abs());\n  double t = d1/(d1+d2);\n  Point x = p4 + (p3-p4)*t;\n  return x;\n}\n\ndouble getDistance(Point p1, Point p2){\n  Vector base=p2-p1;\n  return base.abs();\n}\n\ndouble getDistance(Point p, Segment s){\n  double dot1, dot2;\n  Vector base = s.p2-s.p1;\n  dot1 = Vector::dot(base, p-s.p1);\n  dot2 = Vector::dot(base*(-1.0), p-s.p2);\n\n  double ans;\n  if(dot1<-EPS) ans = getDistance(s.p1, p);\n  else if(dot2<-EPS) ans = getDistance(s.p2, p);\n  else ans = fabs(Vector::cross(p-s.p1, base))/base.abs();\n\n  return ans;\n}\n\ndouble getDistance(Segment s1, Segment s2){\n  double ans;\n  if(intersect(s1, s2)) ans = 0.0;\n  else {\n    ans = min(min(getDistance(s1.p1, s2), getDistance(s1.p2, s2)),\n                  min(getDistance(s2.p1, s1), getDistance(s2.p2, s1)));\n  }\n  return ans;\n}\n\nint main(){\n  int q; cin >> q;\n\n  double q1_x, q1_y, q2_x, q2_y, q3_x, q3_y, q4_x, q4_y;\n  for(int i=0; i<q; i++){\n    cin >> q1_x >> q1_y >> q2_x >> q2_y >> q3_x >> q3_y >> q4_x >> q4_y;\n    Point p1(q1_x, q1_y), p2(q2_x, q2_y), p3(q3_x, q3_y), p4(q4_x, q4_y);\n    Segment s1(p1, p2), s2(p3, p4);\n    double ans = getDistance(s1, s2);\n    printf(\"%.10lf\\n\", ans);\n  }\n\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#ifdef DEBUG_MODE\n#define DBG(n) n;\n#else\n#define DBG(n) ;\n#endif\n#define REP(i,n) for(ll (i) = (0);(i) < (n);++i)\n#define rep(i,s,g) for(ll (i) = (s);(i) < (g);++i)\n#define rrep(i,s,g) for(ll (i) = (s);i >= (g);--(i))\n#define PB push_back\n#define MP make_pair\n#define FI first\n#define SE second\n#define SHOW1d(v,n) {for(int WWW = 0;WWW < (n);WWW++)cerr << v[WWW] << ' ';cerr << endl << endl;}\n#define SHOW2d(v,i,j) {for(int aaa = 0;aaa < i;aaa++){for(int bbb = 0;bbb < j;bbb++)cerr << v[aaa][bbb] << ' ';cerr << endl;}cerr << endl;}\n#define ALL(v) v.begin(),v.end()\n#define Decimal fixed<<setprecision(20)\n#define INF 1000000000\n#define LLINF 1000000000000000000LL\n#define MOD 1000000007\n\ntypedef long long ll;\ntypedef pair<ll, ll> P;\n\nconst double EPS = 1e-12;\nconst double PI = acos(-1.0);\ntypedef complex<double> point;\nnamespace std {\n\tbool operator < (const point& a, const point& b) {\n\t\treturn real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n\t}\n\t\n\tbool operator == (const point& a,const point& b) {\n\t\treturn (abs(a.real() - b.real()) < EPS && abs(a.imag() - b.imag()) < EPS);\n\t}\n}\nstruct circle {\n\tpoint p; double r;\n\tcircle(){}\n\tcircle(const point &p, double r) : p(p), r(r) { }\n};\nstruct segment : public vector<point> {\n\tsegment(const point &a, const point &b) {\n\t\tpush_back(a); push_back(b);\n\t}\n};\n\ndouble cross(const point& a, const point& b) {\n\treturn imag(conj(a)*b);\n}\n\ndouble dot(const point& a, const point& b) {\n\treturn real(conj(a)*b);\n}\n\n/*\na → b で時計方向に折れて b → c\na → b で半時計方向に折れて b → c\na → b で逆を向いて a を通り越して b → c\na → b でそのまま b → c\na → b で逆を向いて b → c ( または b == c )\n*/\n\nint ccw(point a, point b, point c) {\n\tb -= a; c -= a;\n\tif (cross(b, c) > 0)   return +1;       // counter clockwise\n\tif (cross(b, c) < 0)   return -1;       // clockwise\n\tif (dot(b, c) < 0)     return +2;       // c--a--b on line\n\tif (norm(b) < norm(c)) return -2;       // a--b--c on line\n\treturn 0;\n}\n\nbool intersectLL(const segment &l, const segment &m) {\n\treturn abs(cross(l[1] - l[0], m[1] - m[0])) > EPS || // non-parallel\n\t\tabs(cross(l[1] - l[0], m[0] - l[0])) < EPS;   // same line\n}\nbool intersectLS(const segment &l, const segment &s) {\n\treturn cross(l[1] - l[0], s[0] - l[0])*       // s[0] is left of l\n\t\tcross(l[1] - l[0], s[1] - l[0]) < EPS; // s[1] is right of l\n}\nbool intersectLP(const segment &l, const point &p) {\n\treturn abs(cross(l[1] - p, l[0] - p)) < EPS;\n}\nbool intersectSP(const segment &s, const point &p) {\n\treturn abs(s[0] - p) + abs(s[1] - p) - abs(s[1] - s[0]) < EPS; // triangle inequality\n}\n//端点の交差も考える\nbool intersectSS(const segment &s, const segment &t) {\n\tif(intersectSP(s,t[0]) || intersectSP(s,t[1]) || intersectSP(t,s[0]) || intersectSP(t,s[1]))return true;\n\treturn ccw(s[0], s[1], t[0])*ccw(s[0], s[1], t[1]) <= 0 &&\n\t\tccw(t[0], t[1], s[0])*ccw(t[0], t[1], s[1]) <= 0;\n}\n\npoint projection(const segment &l, const point &p) {\n\tdouble t = dot(p - l[0], l[0] - l[1]) / norm(l[0] - l[1]);\n\treturn l[0] + t*(l[0] - l[1]);\n}\npoint reflection(const segment &l, const point &p) {\n\treturn p + 2. * (projection(l, p) - p);\n}\ndouble distanceLP(const segment &l, const point &p) {\n\treturn abs(p - projection(l, p));\n}\ndouble distanceLL(const segment &l, const segment &m) {\n\treturn intersectLL(l, m) ? 0 : distanceLP(l, m[0]);\n}\ndouble distanceLS(const segment &l, const segment &s) {\n\tif (intersectLS(l, s)) return 0;\n\treturn min(distanceLP(l, s[0]), distanceLP(l, s[1]));\n}\ndouble distanceSP(const segment &s, const point &p) {\n\tconst point r = projection(s, p);\n\tif (intersectSP(s, r)) return abs(r - p);\n\treturn min(abs(s[0] - p), abs(s[1] - p));\n}\ndouble distanceSS(const segment &s, const segment &t) {\n\tif (intersectSS(s, t)) return 0;\n\treturn min(min(distanceSP(s, t[0]), distanceSP(s, t[1])),\n\t\tmin(distanceSP(t, s[0]), distanceSP(t, s[1])));\n}\ndouble distancePP(const point &a,const point &b){\n\treturn abs(a-b);\n}\n\n//交点\npoint crosspoint(const segment &l, const segment &m) {\n\tif(!intersectSS(l,m))return point(INF,INF);\n\tdouble A = cross(l[1] - l[0], m[1] - m[0]);\n\tdouble B = cross(l[1] - l[0], l[1] - m[0]);\n\tif (abs(A) < EPS && abs(B) < EPS) return point(INF,INF); // same line\n\tif (abs(A) < EPS) return point(INF,INF); // !!!PRECONDITION NOT SATISFIED!!!\n\treturn m[0] + B / A * (m[1] - m[0]);\n}\n\n//凸包\nvector<point> convex_hull(vector<point> ps) {\n\tint n = ps.size(), k = 0;\n\tsort(ps.begin(), ps.end());\n\tvector<point> ch(2 * n);\n\tfor (int i = 0; i < n; ch[k++] = ps[i++]) // lower-hull\n\t\twhile (k >= 2 && ccw(ch[k - 2], ch[k - 1], ps[i]) <= 0) --k;\n\tfor (int i = n - 2, t = k + 1; i >= 0; ch[k++] = ps[i--]) // upper-hull\n\t\twhile (k >= t && ccw(ch[k - 2], ch[k - 1], ps[i]) <= 0) --k;\n\tch.resize(k - 1);\n\treturn ch;\n}\n\n/*多角形内包判定\nOUT:0\nON:1\nIN:2\n*/\n#define curr(PP, i) PP[i]\n#define next(PP, i) PP[(i+1)%PP.size()]\nint contains(const vector<point>& Poly, const point& p) {\n\tbool in = false;\n\tfor (int i = 0; i < Poly.size(); ++i) {\n\t\tpoint a = curr(Poly, i) - p, b = next(Poly, i) - p;\n\t\tif (imag(a) > imag(b)) swap(a, b);\n\t\tif (imag(a) <= 0 && 0 < imag(b))\n\t\t\tif (cross(a, b) < 0) in = !in;\n\t\tif (cross(a, b) == 0 && dot(a, b) <= 0) return 1;\n\t}\n\treturn in ? 2 : 0;\n}\n\n//見えるか(可視グラフ用) \nbool block_off(const point &a, const point &b, const vector<point> &obj) {\n  point m = (a+b)/2.0;\n  bool on = false, in = false;\n  for (int j = 0; j < obj.size(); ++j) {\n    point c = curr(obj,j), d = next(obj,j);\n    if (imag(d) < imag(c)) swap(c, d);\n    if (cross(a-c,b-c) * cross(a-d,b-d) < 0 &&    // strictly intersect.\n        cross(c-a,d-a) * cross(c-b,d-b) < 0) return true;\n    if (cross(a-c,b-c) == 0 && dot(a-c,b-c) < 0) return true;\n    if (imag(c) <= imag(m) && imag(m) < imag(d))  // strictly contain.\n      if (cross(c-m,d-m) < 0) in = !in;\n    if (cross(c-m,d-m) == 0 && dot(c-m,d-m) <= 0) on = true;\n  }\n  return !on && in;\n}\n\n//面積\ndouble area(const vector<point>& p) {\n\tdouble A = 0;\n\tfor (int i = 0; i < p.size(); ++i)\n\t\tA += cross(curr(p, i), next(p, i));\n\treturn A / 2.;\n}\n\n//角度足し算\ndouble add_rad(double a,double b){\n\tdouble ret = a + b;\n\tif(ret > PI)ret -= 2 * PI;\n\treturn ret;\n}\n\n//なす角(vector)\ndouble angle(const point &a,const point &b) {\n\tauto tmp = abs(arg(a) - arg(b));\n\treturn min(tmp, 2 * PI - tmp);\n}\n\ndouble angle(const segment &s1,const segment &s2) {\n\treturn angle(s1[1] - s1[0], s2[1] - s2[0]);\n}\n\n//点の回転\npoint rotate(const point &p, double rad) {\n\tdouble X = p.real() * cos(rad) - p.imag() * sin(rad);\n\tdouble Y = p.imag() * cos(rad) + p.real() * sin(rad);\n\treturn point(X, Y);\n}\n\n//並行\nbool isParallel(const point &a, const point &b){\n    return abs(cross(a,b)) < EPS;\n}\nbool isParallel(const segment &a, const segment &b){\n    return isParallel(a[1]-a[0], b[1]-b[0]);\n}\n//直行\nbool isOrthogonal(const point &a,const point &b){\n\treturn abs(angle(a,b) - PI / 2) < EPS;\n}\nbool isOrthogonal(const segment &a,const segment &b){\n\treturn isOrthogonal(a[1]-a[0],b[1]-b[0]);\n}\nint main() {\n\tint q;cin >> q;\n\tREP(i,q){\n\t\tint a,b,c,d;cin >> a >> b >> c >> d;\n\t\tsegment A = segment(point(a,b),point(c,d));\n\t\tcin >> a >> b >> c >> d;\n\t\tsegment B = segment(point(a,b),point(c,d));\n\t\tcout << Decimal << distanceSS(A,B) << endl;\n\t}\n\t\t\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\nusing namespace std;\n\n//?????????\n#pragma region MACRO \n#define putans(x)  std::cerr << \"answer: \" ; cout << (x) << endl\n#define dputans(x) std::cerr << \"answer: \"; cout << setprecision(13) << (double)(x) << endl\n#define REP(i,a,n) for(int i=(a); i<(int)(n); i++)\n#define RREP(i,a,n) for(int i=(int)(n-1); i>= a; i--)\n#define rep(i,n) REP(i,0,n)\n#define rrep(i,n) RREP(i,0,n)\n#define all(a) begin((a)),end((a))\n#define mp make_pair\n#define exist(container, n) ((container).find((n)) != (container).end())\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n#ifdef _DEBUG //???????????????????????????????????????????????????\nstd::ifstream ifs(\"data.txt\");\n#define put ifs >>\n#else //?????£????????????????????§?????????????????????\n#define put cin >>\n#endif\n#pragma endregion\n\n//???????????°??????????????´\n#pragma region CODING_SUPPORT\n#ifdef _DEBUG\n#define dbg(var0) { std::cerr << ( #var0 ) << \"=\" << ( var0 ) << endl; }\n#define dbg2(var0, var1) { std::cerr << ( #var0 ) << \"=\" << ( var0 ) << \", \"; dbg(var1); }\n#define dbg3(var0, var1, var2) { std::cerr << ( #var0 ) << \"=\" << ( var0 ) << \", \"; dbg2(var1, var2); }\n#define dbgArray(a,n) {std::cerr << (#a) << \"=\";  rep(i,n){std::cerr <<(a[i])<<\",\";} cerr<<endl;} \n#else\n#define dbg1 {}\n#define dbg2 {}\n#define dbg3 {}\n#define dbgArray {}\n#endif \n#pragma endregion \n//typedef????????????????????????????¶????????????§?????????\n#pragma region TYPE_DEF\ntypedef long long ll;\ntypedef pair<int, int> pii; typedef pair<string, string> pss; typedef pair<int, string>pis;\ntypedef vector<string> vs; typedef vector<int> vi;\n#pragma endregion\n//??????????????°(???????????????????????§??????)\n#pragma region CONST_VAL\n#define PI (2*acos(0.0))\n#define EPS (1e-10)\n#define MOD (ll)(1e9 + 7)\n#define INF (ll)(1e9)\n#pragma endregion\n\n//?????????????????????\n#pragma region Geometry\nclass Point {//????????????????????????\npublic:\n\tdouble x, y;\n\tPoint(double x = 0, double y = 0) : x(x), y(y) {}\n\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a) { return Point(x * a, y * a); }\n\tdouble operator * (Point p) { return dot(p); }\n\tPoint operator / (double a) { return Point(x / a, y / a); }\n\n\tdouble abs() { return sqrt(norm()); }\n\tdouble norm() { return x*x + y*y; }\n\n\tbool operator < (const Point &p) const { return  x != p.x ? x < p.x : y < p.y; }\n\tbool operator == (const Point &p) const { return  fabs(x - p.x) < EPS && fabs(y - p.y) < EPS; }\n\t//???????????????\n\tdouble dot(Point p) { return x * p.x + y * p.y; }\n\tdouble cross(Point p) { return x * p.y - y * p.x; }\n\n\n};\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0) :c(c), r(r) {}\n};\nstruct Segment {//??????\n\tPoint p1, p2;\n};\ntypedef Point Vector;\ntypedef Segment Line;//??´???\ntypedef vector<Point> Polygon; //????§???¢?????????\n\n//?????????????¨????\ndouble v_norm(Point p) { return p.x * p.x + p.y * p.y; }\ndouble abs(Point p) { return sqrt(v_norm(p)); }\ndouble dot(Point a, Point b) { return a.x * b.x + a.y * b.y; } //??????\ndouble cross(Point a, Point b) { return a.x * b.y - a.y * b.x; }//??????\n\n//??´????????????\nbool isOrthogonal(Vector a, Vector b) { return equals(a*b, 0.0); }\nbool isParallel(Vector a, Vector b) { return equals(cross(a, b), 0.0); }\n\n//??????s???????????????p????°???±\nPoint projection(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(( p - s.p1 ), base) / v_norm(base);\n\treturn s.p1 + base*r;\n}\n//??????s???????????????p???????°?\nPoint reflection(Segment s, Point p) { return p + ( projection(s, p) - p ) * 2; }\n\n//3??????????????¢????????????\n//p1-p0???????????¨?????? p2-p0 ???2????????????????????????\nstatic const int COUNTER_CLOCKWISE = 1;//???????¨???????\nstatic const int CLOCKWISE = -1;//????¨???????\nstatic const int ONLINE_BACK = 2;//????????´?????¶p2,p0,p1??????\nstatic const int ONLINE_FRONT = -2;//????????´??????p0,p1,p2??????\nstatic const int ON_SEGMENT = 0;//p2???p0,p1??????????????´???\nint ccw(Point p0, Point p1, Point p2) {//????¨????????????¢??°\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS) return CLOCKWISE;\n\tif (dot(a, b) < -EPS) return ONLINE_BACK;\n\tif (a.norm() < b.norm()) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\n//??????p1p2??¨p3p4???????????????\nbool intersect(Point p1, Point p2, Point p3, Point p4) {return ( (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0) && (ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0));}\nbool intersect(Segment s1, Segment s2) {return intersect(s1.p1 , s1.p2, s2.p1, s2.p2);}\n\n//?????¢ Segment Line Point\ndouble getDistance(Point a, Point b) { return abs( a - b ); }\ndouble getDistanceLP(Line l, Point p) {return abs(cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1));}\ndouble getDistanceSP(Segment s, Point p) {\n\tdbg(abs(p-s.p1)); \n\tdbg(abs(p - s.p2));\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0) return abs(p - s.p1);\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0) return abs(p - s.p2);\n\treturn getDistanceLP(s, p);\n}\ndouble getDistance(Segment s1, Segment s2) {\n\tif (intersect(s1, s2)) return 0.0;\n\tdbg2(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2));\t\n\tdbg2(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2));\n\treturn min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2))\n\t         , min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\n//2???????????????\nPoint getCrossPoint(Segment s1, Segment s2) {\n\tVector base = s2.p2 - s2.p1;\n\tdouble d1 = abs(cross(base , s1.p1 - s2.p1));\n\tdouble d2 = abs(cross(base , s1.p2 - s2.p1));\n\tdouble t = d1 / ( d1 + d2 );\n\treturn s1.p1 + (s1.p2 - s1.p1 ) * t;\n}\n\n//??´?????¨????????????????????????\npair<Point, Point> getCrossPoints(Circle c, Line l) {\n\t//assert(intersect(c, i)); ?????????????????´????????????????????????\n\tVector pr = projection(l , c.c);\n\tVector e = ( l.p2 - l.p1 ) / abs(l.p2 - l.p1);\n\tdouble base = sqrt(c.r * c.r - (pr - c.c).norm());\n\treturn mp(pr + e * base, pr - e * base);\n}\n\n//????????????????????????\nstatic const int IN_POLYGON = 2;//????§???¢????????¨\nstatic const int OUT_POLYGON = 1;//????§???¢????????¨\nstatic const int ON_POLYGON = 0;//????§???¢????????????\nint contains(Polygon g, Point p) {\n\tint n = g.size();\n\tbool x = false;\n\trep(i, n) {\n\t\tPoint a = g[i] - p, b = g[( i + 1 ) % n] - p;\n\t\tif (abs(cross(a, b)) < EPS && dot(a, b) < EPS) return OUT_POLYGON;\n\t\tif (a.y > b.y) swap(a, b);\n\t\tif (a.y < EPS && EPS < b.y && cross(a, b)) x = !x;\n\t}\n\treturn ( x ? IN_POLYGON : ON_POLYGON );\n}\n\n//?????? CGL_4_A : Convex Hull; \n//containsPointOnline ?????????????????????????????????????????????\n//???????§???¢???????????§????????????????????????????????§???????????????????????????????????§???\n//???????¨???¨?????§???????????§?¨?????????????\nPolygon ConvexHull(Polygon s, bool containsPointOnline = false) {\n\tPolygon u, l;\n\tif (s.size() < 3) return s;\n\tsort(s.begin(), s.end());\n\tu.push_back(s[0]); \n\tu.push_back(s[1]);\n\tl.push_back(s[s.size() - 1]);\n\tl.push_back(s[s.size() - 2]);\n\tauto conditionContaining = [](int ccw, bool containsPointOnline)->bool{\n\t\tif (containsPointOnline) return ccw == COUNTER_CLOCKWISE;\n\t\telse return ccw != CLOCKWISE;\n\t};\n\tfor (int i = 2; i < s.size(); i++) {//?????´?????°???\n\t\tfor (int n = u.size(); ( n >= 2 ) && conditionContaining( ccw(u[n - 2], u[n - 1], s[i]),containsPointOnline); n--) {\n\t\t\tu.pop_back();\n\t\t}\n\t\tu.push_back(s[i]);\n\t}\n\tfor (int i = s.size() - 3; i >= 0; i--) {//?????´?????°???\n\t\tfor (int n = l.size(); n >= 2 && conditionContaining( ccw(l[n - 2], l[n - 1], s[i]),containsPointOnline); n--)l.pop_back();\n\t\tl.push_back(s[i]);\n\t}\n\treverse(l.begin(), l.end());\n\tfor (int i = u.size() - 2; i >= 1; i--) l.push_back(u[i]);\n\tdouble tmpMax = l[0].y;\n\tint rotIndex = 0;\n\tREP(i,1,l.size()) {//?????¶??????????????????????????????????????´??????\n\t\tif (l[i].y < tmpMax) {\n\t\t\trotIndex = i;\n\t\t\ttmpMax = l[i].y;\n\t\t}\n\t}\n\trotate(l.begin(), l.begin() + rotIndex, l.end());\n\treturn l;\n}\n#pragma endregion \n\n\n//??????????£?????????°???\n//https://www23.atwiki.jp/akitaicpc/pages/65.html\n\nint main() {\n\tint q; put q;\n\trep(i, q) {\n\t\tPoint p[4];\n\t\trep(j, 4) {\n\t\t\tput p[j].x >> p[j].y;\n\t\t}\n\t\tSegment s0, s1;\n\t\ts0.p1 = p[0];\n\t\ts0.p2 = p[1];\n\t\ts1.p1 = p[2];\n\t\ts1.p2 = p[3];\n\t\tdouble dist = getDistance(s0,s1);\n\t\tcout  << setprecision(10) << dist << endl;\n\t}\n\nEND:\n\treturn 0;\n}\n\n\t//int n; put n;\n\t//Polygon p;\n\t//rep(i, n) {\n\t//\tdouble x, y; put x >> y;\n\t//\tp.push_back(Point(x, y));\n\t//}\n\t//Polygon k = ConvexHull(p,true);\n\t//cout << k.size() << endl;\n\t//rep(i, k.size()) {\n\t//\tcout << k[i].x << \" \" << k[i].y << endl;\n\t//}\t\n\n\t/*double xp1, yp1, xp2, yp2; put xp1 >> yp1 >> xp2 >> yp2;\n\tSegment s;\n\ts.p1 = Point(xp1, yp1);\n\ts.p2 = Point(xp2, yp2);\n\n\tint n; put n;\n\trep(i, n) {\n\t\tPoint p;\n\t\tput p.x >> p.y;\n\t\tPoint prj =reflection(s, p);\n\t\tcout << setprecision(13) << prj.x << \" \" << prj.y << endl;\n\t}*/\n\n\t//ll ans = 0;\n\t//int n; put n;\n\t//vi a;\n\t//set<Range> rl;\n\t//rep(i, n) {\n\t//\tint k; put k;\n\t//\ta.push_back(k);\n\t//}\n\t//reverse(a.begin(), a.end());\n\t//int miner = a[0];\n\t//ans += miner;\n\t//REP(i,1,n) {\n\t//\tif (a[i] < miner) {\n\t//\t\tminer = a[i];\n\t//\t\tans += miner * ( i + 1 );\n\t//\t}\n\t//\telse {\n\t//\t\tans += miner *(i)+a[i];\n\t//\t}\n\t//}\n\n\t////???????????¬??????????????\\???????????????\n\t//auto getI = [&]()->auto { int tmp; put tmp; return tmp; };\n\t//auto getLL = [&]()->auto { ll tmp; put tmp; return tmp; };\n\t//auto getS = [&]()->auto { string tmp; put tmp; return tmp; };\n//\n//int n, a, b; put n >> a >> b;\n//\tvi t;\n//\trep(i, n) {\n//\t\tt.push_back(get());\n//\t}\n//\tint count = 0;\n//\trep(i, n) {\n//\t\tif (t[i] < a || b <= t[i])count++;\n//\t}\n//\tputans(count);\n\n//\n//\tset<string> list;\n//\tint ans = 0;\n//\tint n; put n;\n//\tint k; put k;\n//\tint numAlphabet[26];\n//\tfill(all(numAlphabet), 0);\n//\trep(i, n) {\n//\t\tstring s; put s;\n//\t\tif (exist(list, s))continue;\n//\t\tlist.insert(s);\n//\t\tnumAlphabet[s[0] - 'A']++;\n//\t}\n//\tsort(all(numAlphabet),greater<int>());\n//\twhile (true) {\n//\t\trep(i, k) {\n//\t\t\tif (numAlphabet[i] == 0) goto END;\n//\t\t\telse numAlphabet[i]--;\n//\t\t}\n//\t\tsort(all(numAlphabet), greater<int>());\n//\t\tans++;\n//\t}\n//END:\n//\tputans(ans);\n\n\n\t//int t; put t;\n\t//rep(i, t) {\n\t//\tint n, d; put n >> d;\n\t//\tif (n == 1) {\n\t//\t\tputans(d);\n\t//\t\tcontinue;\n\t//\t}\n\t//\tputans(n % 2 != 0 ? ( n - 1 ) * 127 + d : ( n - 1 ) * 127 + ( 127 ^ d ));\n\t//}\n\n\n//\n//int n; put n;\n//string s1, s2;\n//string r;\n//string patan1[4] = { \".\",\"#\",\".\",\"#\" };\n//string patan2[4] = { \".\",\".\",\"#\",\"#\" };\n//bool front = true;\n//rep(j, 420 / 4) {\n//\tif (front) {\n//\t\trep(i, 4) {\n//\t\t\tcout << s1 + patan1[i] + \"\\n\" << s2 + patan2[i] << endl;\n//\t\t\tcin >> r;\n//\t\t\tif (r == \"T\") {\n//\t\t\t\ts1 += patan1[i];\n//\t\t\t\ts2 += patan2[i];\n//\t\t\t\tbreak;\n//\t\t\t}\n//\t\t\tif (r == \"F\" && i == 3) {\n//\t\t\t\tfront = !front;\n//\t\t\t}\n//\t\t\tif (r == \"end\")goto END;\n//\t\t}\n//\t}\n//\telse {\n//\t\trep(i, 4) {\n//\t\t\tcout << patan1[i] + s1 + \"\\n\" << patan2[i] + s2 << endl;\n//\t\t\tcin >> r;\n//\t\t\tif (r == \"T\") {\n//\t\t\t\ts1 = patan1[i] + s1;\n//\t\t\t\ts2 = patan2[i] + s2;\n//\t\t\t\tbreak;\n//\t\t\t}\n//\t\t\tif (r == \"F\" && i == 3) {\n//\t\t\t\tfront = !front;\n//\t\t\t}\n//\t\t\tif (r == \"end\")goto END;\n//\t\t}\n//\t}\n//\n//}\n//END:\n//cout << endl;\n\n\n\n\n\t//bool filled[1000][1000];\n\t//fill(*filled, *filled + 1000 * 1000, false);\n\t//int vx[4] = { 1,0,-1,0 };\n\t//int vy[4] = { 0,1,0,-1 };\n\t//Polygon sheep;\n\t//Polygon convex_sheep;\n\t//ll num = 0;\n\t//int h, w; put h >> w;\n\t//rep(i, h) {\n\t//\tstring s; put s;\n\t//\trep(j, s.size()) {\n\t//\t\tif (s[j] == 'X') {\n\t//\t\t\tif (i == 0 || j == 0 || i == h-1 || j == w-1) {\n\t//\t\t\t\tputans(-1);\n\t//\t\t\t\tgoto END;\n\t//\t\t\t}\n\t//\t\t\trep(k, 4) {\n\t//\t\t\t\tif (!filled[i + vx[k]][j + vy[k]]) {\n\t//\t\t\t\t\tsheep.push_back(Point(i + vx[k],j + vy[k]));\n\t//\t\t\t\t\tfilled[i + vx[k]][j + vy[k]] = true;\n\t//\t\t\t\t}\n\t//\t\t\t}\n\t//\t\t}\n\t//\t}\n\t//}\n\t//convex_sheep = ConvexHull(sheep);\n\n\t//rep(i, convex_sheep.size()) {\n\t//\tPoint s = convex_sheep[i % convex_sheep.size()];\n\t//\tPoint g = convex_sheep[(i + 1) % convex_sheep.size()];\n\t//\tll mandist = max(abs(s.x - g.x),abs(s.y - g.y));\n\t//\tdbg(mandist);\n\t//\tnum += mandist;\n\t//} \n\t//putans(num);"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<string>\n#include<algorithm>\n#include<cmath>\n#include<vector>\n#include<stack>\n#include<climits>\n#include<cstring>\n#include<queue>\nusing namespace std;\n\nconst int INF = INT_MAX / 3;\n\n#define REP(i,n) for(int i=0;i<(int)n;i++)\n#define FOR(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i)\n#define ALL(c) (c).begin(), (c).end()\n\n\ndouble EPS = 1e-10;\n\ndouble add(double a, double b) {\n\tif (abs(a + b) < EPS * (abs(a) + abs(b))) return 0;\n\treturn a + b;\n}\n\nstruct P {\n\tdouble x, y;\n\tP() {}\n\tP(double x, double y) : x(x), y(y) {\n\t}\n\tP operator +(P p) {\n\t\treturn P(add(x, p.x), add(y, p.y));\n\t}\n\tP operator -(P p) {\n\t\treturn P(add(x, -p.x), add(y, -p.y));\n\t}\n\tP operator *(double d) {\n\t\treturn P(d*x, d*y);\n\t}\n\tdouble dot(P p) {\n\t\treturn add(x*p.x, y*p.y);\n\t}\n\tdouble det(P p) {\n\t\treturn add(x*p.y, -y*p.x);\n\t}\n\tvoid print() {\n\t\tprintf(\"%.10lf %.10lf \\n\", x, y);\n\t\treturn;\n\t}\n};\n\ndouble dist(P &p, P &q, P &r){\n\tif((q-p).dot(r-p)*(p-q).dot(r-q) >= 0){\n\t\tdouble a = q.y-p.y;\n\t\tdouble b = q.x-p.x;\n\t\tdouble c = -p.x*q.y+p.y*q.x;\n\t\treturn fabs(a*r.x+b*r.y+c)/sqrt(a*a+b*b);\n\t}else{\n\t\treturn min (sqrt((r.x-p.x)*(r.x-p.x)+(r.y-p.y)*(r.y-p.y)), sqrt((r.x-q.x)*(r.x-q.x)+(r.y-q.y)*(r.y-q.y)));\n\t}\n\t\n}\n\nbool isCross(P &p0,P &p1,P &p2,P &p3){\n\tbool a,b,c,d;\n\ta = ( (p1-p0).dot(p2-p0)*(p0-p1).dot(p2-p1) >= 0 );\n\tb = ( (p1-p0).dot(p3-p0)*(p0-p1).dot(p3-p1) >= 0 );\n\tc = ( (p1-p0).det(p2-p0)*(p1-p0).det(p3-p0) <=0 );\n\treturn a && b && c ;\n}\n\ndouble Distance(P &p0,P &p1,P &p2,P &p3){\n\tif(isCross(p0, p1, p2, p3)){\n\t\treturn 0;\n\t}\n\tdouble d;\n\td = min(dist(p0, p1, p2), dist(p0, p1, p3));\n\td = min(d, dist(p2, p3, p0));\n\td = min(d, dist(p2, p3, p1));\n\treturn d;\n}\n\nint main(){\n\tint q;\n\tcin >> q ;\n\tREP(i,q){\n\t\tP p0, p1, p2, p3;\n\t\tcin >> p0.x >> p0.y >> p1.x >> p1.y >> p2.x >> p2.y >> p3.x >> p3.y ;\n\t\tprintf(\"%.10lf \\n\", Distance(p0, p1, p2, p3));\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nconst double eps = 1e-10;\nbool dcmp(double d, double d2 = 0) { return abs(d - d2) < eps; }\ndouble sgn(double d) {\n  if (dcmp(d))\n    return 0;\n  if (d > 0)\n    return 1;\n  return -1;\n}\n\nstruct vec {\n  double x, y;\n  vec(double x, double y) : x(x), y(y) {}\n  vec() : x(0), y(0) {}\n  const bool operator==(const vec &v) const {\n    return dcmp(x, v.x) && dcmp(y, v.y);\n  }\n  const bool operator!=(const vec &v) const { return !(*this == v); }\n  const vec operator+(const vec &v) const { return vec(x + v.x, y + v.y); }\n  const vec operator-() const { return vec(-x, -y); }\n  const vec operator-(const vec &v) const { return *this + (-v); }\n  const vec operator*(const double d) const { return vec(x * d, y * d); }\n  const vec operator/(const double d) const { return *this * (1 / d); }\n  const vec unit() const { return *this / len(); };\n  const double len() const { return sqrt(x * x + y * y); }\n  const double dot(const vec &v) const { return x * v.x + y * v.y; }\n  const double cross(const vec &v) const { return x * v.y - y * v.x; }\n  const bool parallel(const vec &v) const { return dcmp(cross(v)); }\n  const bool perpendicular(const vec &v) const { return dcmp(dot(v)); }\n};\n\ntypedef vec point;\n\ntemplate <class T> struct optional {\n  bool has;\n  T val;\n  optional() : has(false) {}\n  optional(T t) : has(true), val(t) {}\n};\n\nstruct line {\n  double a, b, c;\n  line(point p1, point p2) {\n    a = p1.y - p2.y;\n    b = p2.x - p1.x;\n    c = (p1.x - p2.x) * p1.y + (p2.y - p1.y) * p1.x;\n    double m1 = a * p1.x + b * p1.y + c;\n    double m2 = a * p2.x + b * p2.y + c;\n  }\n  bool parallel(line l) { return dcmp(a * l.b, b * l.a); }\n  optional<point> intersect(line l) {\n    if (parallel(l))\n      return optional<point>();\n    return point(-(c * l.b - b * l.c) / (a * l.b - b * l.a),\n                 (c * l.a - a * l.c) / (a * l.b - b * l.a));\n  }\n  bool contains(point p) { return dcmp(a * p.x + b * p.y + c); }\n  point project(point p) {\n    double t = -(a * p.x + b * p.y + c) / (a * a + b * b);\n    return point(p.x + a * t, p.y + b * t);\n  }\n};\n\nstruct segment {\n  point p1, p2;\n  segment(point p1, point p2) : p1(p1), p2(p2) {}\n  line sline() { return line(p1, p2); }\n  bool contains(point p) {\n    double x1 = min(p1.x, p2.x), x2 = max(p1.x, p2.x);\n    double y1 = min(p1.y, p2.y), y2 = max(p1.y, p2.y);\n    bool ok = sline().contains(p) && (x1 <= p.x && p.x <= x2) &&\n              (y1 <= p.y && p.y <= y2);\n    return ok;\n  }\n  bool intersect(segment s) {\n    vec v0 = p2 - p1;\n    vec v1 = s.p2 - s.p1;\n    if (v0.parallel(v1)) {\n      return (contains(s.p1) || contains(s.p2)) ||\n             (s.contains(p1) || s.contains(p2));\n    }\n    point a = p1, b = p2, c = s.p1, d = s.p2;\n    return sgn((a - b).cross(b - c)) != sgn((a - b).cross(b - d)) &&\n           sgn((c - d).cross(d - a)) != sgn((c - d).cross(d - b));\n  }\n  double distance(point p) {\n    point p0 = sline().project(p);\n    if (contains(p0)) {\n      return (p0 - p).len();\n    } else {\n      return min((p1 - p).len(), (p2 - p).len());\n    }\n  }\n};\n\nint main() {\n  int n;\n  cin >> n;\n  for (int i = 0; i < n; i++) {\n    point p0, p1, p2, p3;\n    cin >> p0.x >> p0.y >> p1.x >> p1.y >> p2.x >> p2.y >> p3.x >> p3.y;\n    segment l0(p0, p1);\n    segment l1(p2, p3);\n    double d = 1.0 / 0.0;\n    d = min(d, l0.distance(p2));\n    d = min(d, l0.distance(p3));\n    d = min(d, l1.distance(p0));\n    d = min(d, l1.distance(p1));\n    if (l0.intersect(l1))\n      d = 0;\n    printf(\"%.10lf\\n\", d);\n  }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n//点を表す構造体\nclass Point {\n  public:\n  double x,y;\n  Point(double x=0,double y=0): x(x),y(y){}\n\n  //各種演算\n  Point operator+ (Point p) { return Point(x+p.x,y+p.y); }\n  Point operator- (Point p) { return Point(x-p.x,y-p.y); }\n  Point operator* (double a) {return Point(a*x,a*y); }\n  Point operator/ (double a) {return Point(x/a,y/a); }\n\n  double abs() { return sqrt(norm()); }\n  double norm() { return x*x+y*y; }\n\n  bool operator< (const Point &p) const{\n    return x!=p.x ? x<p.x : y<p.y;\n  }\n\n  bool operator> (const Point &p) const{\n    return x!=p.x ? x>p.x : y>p.y;\n  }\n\n  bool operator== (const Point &p) const{\n    return fabs(x-p.x)<EPS && fabs(y-p.y)<EPS;\n  }\n};\n\n//ベクトルを表す構造体\ntypedef Point Vector;\n\n//線分を表す構造体\nstruct Segment{\n  Segment(Point p1 = Point(), Point p2 = Point()) : p1(p1), p2(p2) {}\n  Point p1,p2;\n};\n\n//直線を表す構造体\ntypedef Segment Line;\n\n//円を表すクラス\nclass Circle{\n  public:\n  //円の中心\n  Point c;\n  //半径\n  double r;\n  Circle(Point c=Point(),double r=0.0): c(c),r(r) {}\n};\n\n//多角形の表現\ntypedef vector<Point> Polygon;\n\n//ベクトルaとbの内積\ndouble dot(Vector a,Vector b){\n  return a.x*b.x+a.y*b.y;\n}\n\n//ベクトルaとbの外積\ndouble cross(Vector a,Vector b){\n  return a.x*b.y-a.y*b.x;\n}\n\n//ベクトルaとbの直交判定\nbool isOrthogonal(Vector a,Vector b){\n  return equals(dot(a,b),0.0);\n}\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n  return isOrthogonal(a1-a2,b1-b2);\n}\nbool isOrthogonal(Segment s1,Segment s2){\n  return equals(dot(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n\n//ベクトルaとbの平行判定\nbool isParallel(Vector a,Vector b){\n  return equals(cross(a,b),0.0);\n}\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n  return isParallel(a1-a2,b1-b2);\n}\nbool isParallel(Segment s1,Segment s2){\n  return equals(cross(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n\n//線分sに対する点pの射影\nPoint project(Segment s,Point p){\n  Vector base=s.p2-s.p1;\n  double r=dot(p-s.p1,base)/base.norm();\n  return s.p1+base*r;\n}\n\n//線分sを対称軸とした点pの線対称の点\nPoint reflect(Segment s,Point p){\n  return p+(project(s,p)-p)*2.0;\n}\n\n\n//反時計回りCCW\nstatic const int COUNTER_CLOCKWISE=1;\nstatic const int CLOCKWISE=-1;\nstatic const int ONLINE_BACK=2;\nstatic const int ONLINE_FRONT=-2;\nstatic const int ON_SEGMENT=0;\n//反時計回りCCW\nint ccw(Point p0,Point p1,Point p2){\n  Vector a=p1-p0;\n  Vector b=p2-p0;\n  if(cross(a,b)>EPS) return COUNTER_CLOCKWISE;\n  if(cross(a,b)<-EPS) return CLOCKWISE;\n  if(dot(a,b)<-EPS) return ONLINE_BACK;\n  if(a.norm()<b.norm()) return ONLINE_FRONT;\n\n  return ON_SEGMENT;\n}\n\n//線分p1p2と線分p3p4の交差判定\nbool intersect(Point p1,Point p2,Point p3,Point p4){\n  return( ccw(p1,p2,p3)*ccw(p1,p2,p4)<=0 &&\n          ccw(p3,p4,p1)*ccw(p3,p4,p2)<=0);\n}\nbool intersect(Segment s1,Segment s2){\n  return intersect(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n\n\n//点aと点bの距離\ndouble getDistace(Point a,Point b){\n  return (a-b).abs();\n}\n//直線lと点pの距離\ndouble getDistaceLP(Line l,Point p){\n  return abs(cross(l.p2-l.p1,p-l.p1)/(l.p2-l.p1).abs());\n} \n//線分sと点pの距離\ndouble getDistaceSP(Segment s,Point p){\n  if(dot(s.p2-s.p1,p-s.p1)<0.0) return (p-s.p1).abs();\n  if(dot(s.p1-s.p2,p-s.p2)<0.0) return (p-s.p2).abs();\n  return getDistaceLP(s,p);\n}\n//線分s1と線分s2の距離\ndouble getDistace(Segment s1,Segment s2){\n  if(intersect(s1,s2)) return 0.0;\n  return min(min(getDistaceSP(s1,s2.p1),getDistaceSP(s1,s2.p2))\n  ,min(getDistaceSP(s2,s1.p1),getDistaceSP(s2,s1.p2)));\n}\n\n//線分s1と線分s2の交点(ダメらしい)\nPoint getCrossPoint(Segment s1,Segment s2){\n  Vector base=s1.p2-s1.p1;\n  double d1=abs(cross(base,s2.p2-s2.p1));\n  double d2=abs(cross(base,s1.p2-s2.p1));\n  if(equals(fabs(d1),0.0) && equals(fabs(d2),0.0)) return s2.p1;\n  return s2.p1+(s2.p2-s2.p1)*d2/d1;\n}\n\n\nint main(){\n  cin.tie(nullptr);\n  ios_base::sync_with_stdio(false);\n  int q;\n  cin>>q;\n  for(int i=0;i<q;i++){\n    int x0,x1,x2,x3,y0,y1,y2,y3;\n    cin>>x0>>y0>>x1>>y1>>x2>>y2>>x3>>y3;\n    Point p0(x0,y0),p1(x1,y1),p2(x2,y2),p3(x3,y3);\n    Segment s1(p0,p1),s2(p2,p3);\n    cout<<fixed<<setprecision(15)<<getDistace(s1,s2)<<'\\n';\n  }\n  return(0);\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\t\n#include<cmath>\n#include<algorithm>\n#include<cstdio>\nusing namespace std;\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n\nclass Point\n{\npublic:\n\tdouble x, y;\n\tPoint(double x = 0, double y = 0) :x(x), y(y) {}\n\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a) { return Point(a * x, a * y); }\n\tPoint operator / (double b) { return Point(x / b, y / b); }\n\n\tdouble dot(Point a, Point b) { return a.x* b.x + a.y * b.y; }\n\tdouble abs() { return sqrt(norm()); }\n\tdouble norm() { return x * x + y * y; }\n\n\tbool operator <(const Point & p)const { return x != p.x ? x < p.x : y < p.y; }\n\tbool operator == (const Point & p) const { return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS; }\n};\ntypedef Point Vector;\n\nstruct Segment {\n\tPoint p1, p2;\n\tSegment() {}\n\tSegment(Point p1, Point p2) :p1(p1), p2(p2) {}\n};\ntypedef Segment Line;\n\ndouble norm(Vector a) { return a.x* a.x + a.y * a.y; }\ndouble abs(Vector a) { return sqrt(norm(a)); }\n\ndouble dot(Vector a, Vector b) { return a.x* b.x + a.y * b.y; }\ndouble cross(Vector a, Vector b) { return a.x* b.y - a.y * b.x; }\n\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS) return CLOCKWISE;\n\tif (dot(a, b) < -EPS) return ONLINE_BACK;\n\tif (a.norm() < b.norm()) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n\n}\nbool intersect(Point p1, Point p2, Point p3, Point p4)\n{    \n\treturn (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n\t\tccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);        \n}                                                                                     \nbool intersect(Segment s1, Segment s2) { return intersect(s1.p1, s1.p2, s2.p1, s2.p2); }\n\n\n\ndouble getDistanceLP(Line l, Point p) {\n\treturn abs(cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1));\n}\n\ndouble getDistanceSP(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0) return abs(p - s.p1);\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0) return abs(p - s.p2);\n\treturn getDistanceLP(s, p);\n}\n\ndouble getDistance(Segment s1, Segment s2) {\n\tif (intersect(s1, s2)) return 0.0;\n\treturn min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n\t\tmin(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\nint main()\n{\n\tint q;\n\tcin >> q;\n\tdouble x0, y0, x1, y1, x2, y2, x3, y3;\n\twhile (q--)\n\t{\n\t\tcin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n\t\tSegment s1 = Segment(Point(x0, y0), Point(x1, y1)), s2 = Segment(Point(x2, y2), Point(x3, y3));\n\t\tprintf(\"%.8lf\\n\",getDistance(s1,s2));\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <stack>\n#include <queue>\n#include <set>\n#include <cmath>\n#include <algorithm>\n#include <iomanip>\nusing namespace std;\n#define EPS (1e-10)\n#define equals(a, b) (fabs(a - b) < EPS)\n\nclass Point{\npublic:\n  double x, y;\n\n  Point(double x = 0, double y = 0) : x(x), y(y) {}\n\n  Point operator + (Point p){return Point(x + p.x, y + p.y);}\n  Point operator - (Point p){return Point(x - p.x, y - p.y);}\n  Point operator * (double a){return Point(x * a, y * a);}\n  Point operator / (double a){return Point(x / a, y / a);}\n\n  double abs(){return sqrt(norm());}\n  double norm(){return x * x + y * y;}\n\n  bool operator < (const Point &p) const{\n    return x != p.x ? x < p.x : y < p.y;\n  }\n  bool operator == (const Point &p) const{\n    return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n  }\n\n};\n\ntypedef Point Vector;\n\nclass Segment{\npublic:\n  Point p1, p2;\n  Segment(Point p1, Point p2): p1(p1), p2(p2){}\n};\n\ntypedef Segment Line;\n\nclass Circle{\npublic:\n  Point c;\n  double r;\n  Circle(Point c = Point(), double r = 0): c(c), r(r){}\n};\n\ntypedef vector<Point> Polygon;\n\ndouble dot(Vector a, Vector b){\n  return a.x * b.x + a.y * b.y;\n}\ndouble cross(Vector a, Vector b){\n  return a.x * b.y - a.y * b.x;\n}\n\nPoint reflect(Point p0, Point p1, Point p2){\n  Vector v01 = Vector(p0.x - p1.x, p0.y - p1.y);\n  Vector v21 = Vector(p2.x - p1.x, p2.y - p1.y);\n  double t = -1 * ((p2.x - p1.x) * (p1.x - p0.x) + (p2.y - p1.y) * (p1.y - p0.y)) / (pow(p2.x - p1.x, 2) + pow(p2.y - p1.y, 2));\n  return (v21 * t - v01) * 2 + p0;\n}\n\nPoint project(Point p0, Point p1, Point p2){\n  Vector v01 = Vector(p0.x - p1.x, p0.y - p1.y);\n  Vector v21 = Vector(p2.x - p1.x, p2.y - p1.y);\n  double t = -1 * ((p2.x - p1.x) * (p1.x - p0.x) + (p2.y - p1.y) * (p1.y - p0.y)) / (pow(p2.x - p1.x, 2) + pow(p2.y - p1.y, 2));\n  return v21 * t + p1;\n}\n\ndouble dis(Point p1, Point p2){\n  return (p1 - p2).abs();\n}\n\ndouble getdis(Segment s, Point p){\n  if(dot(s.p2 - s.p1, p - s.p1) < 0) return dis(s.p1, p);\n  if(dot(s.p1 - s.p2, p - s.p2) < 0) return dis(s.p2, p);\n  return dis(project(p, s.p1, s.p2), p);\n}\n\nstring ccw(Point p0, Point p1, Point p2){\n  Vector v01 = Vector(p1.x - p0.x, p1.y - p0.y);\n  Vector v02 = Vector(p2.x - p0.x, p2.y - p0.y);\n  if(equals(cross(v01, v02), 0)){\n    if(dot(v01, v02) < 0) return \"ONLINE_BACK\";\n    else if(equals(v01.abs(), v02.abs()) == true || v01.abs() > v02.abs()) return \"ON_SEGMENT\";\n    else return \"ONLINE_FRONT\";\n  }\n  else if(cross(v01, v02) > 0) return \"COUNTER_CLOCKWISE\";\n  else return \"CLOCKWISE\";\n}\n\nbool intersect(Segment s1, Segment s2){\n  if(ccw(s1.p1, s1.p2, s2.p2) == \"ON_SEGMENT\" || ccw(s1.p1, s1.p2, s2.p1) == \"ON_SEGMENT\") return true;\n  if(ccw(s2.p1, s2.p2, s1.p2) == \"ON_SEGMENT\" || ccw(s2.p1, s2.p2, s1.p1) == \"ON_SEGMENT\") return true;\n  if(ccw(s1.p1, s1.p2, s2.p1) != ccw(s1.p1, s1.p2, s2.p2)){\n    if(ccw(s1.p1, s2.p1, s2.p2) != ccw(s1.p2, s2.p1, s2.p2)) return true;\n  }\n  return false;\n}\n\nvoid solve(){\n  int q; cin >> q;\n  vector<double> ans(q);\n  for(int i = 0; i < q; i++){\n    double x[4], y[4];\n    Point p[4];\n    for(int j = 0; j < 4; j++){\n      cin >> x[j] >> y[j];\n      p[j] = Point(x[j], y[j]);\n    }\n    Segment s01 = Segment(p[0], p[1]);\n    Segment s23 = Segment(p[2], p[3]);\n    if(intersect(s01, s23)){\n      ans[i] = 0;\n      continue;\n    }\n    ans[i] = 10000000;\n    for(int j = 0; j < 4; j++){\n      if(j < 2) ans[i] = min(getdis(s23, p[j]), ans[i]);\n      else ans[i] = min(getdis(s01, p[j]), ans[i]);\n    }\n  }\n  for(int i = 0; i < q; i++){\n    cout << fixed << setprecision(10) << ans[i] << endl;\n  }\n  return;\n}\n\n\nvoid solve2(){\n  int q; cin >> q;\n  vector<bool> ans(q);\n  for(int i = 0; i < q; i++){\n    double x[4], y[4];\n    Point p[4];\n    for(int i = 0; i < 4; i++){\n      cin >> x[i] >> y[i];\n      p[i] = Point(x[i], y[i]);\n    }\n    Segment s01 = Segment(p[0], p[1]);\n    Segment s23 = Segment(p[2], p[3]);\n    ans[i] = intersect(s01, s23);\n  }\n  for(int i = 0; i < q; i++){\n    cout << (int)ans[i] << endl;\n  }\n  return;\n}\n\nint main(){\n  solve();\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "\n#include <iostream>\n#include <cmath>\n#include <vector>\n#include <set>\n#include <algorithm>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n\nclass Point{\npublic:\n  double x,y;\n\n  Point(double x = 0,double y = 0): x(x),y(y){}\n  Point operator + (Point p){ return Point(x + p.x , y + p.y); }\n  Point operator - (Point p){ return Point(x - p.x , y - p.y); }\n  Point operator * (double a){ return Point(a * x , a * y); }\n  Point operator / (double a){ return Point(x / a , y / a); }\n\n  double abs(){ return sqrt(norm()); }\n  double norm(){ return x * x + y * y; }\n\n  bool operator < (const Point &p) const{\n    return x != p.x ? x < p.x : y < p.y;\n  }\n\n  bool operator == (const Point &p) const{\n    return (fabs(x - p.x) < EPS) && (fabs(y - p.y) < EPS);\n  }\n\n  friend ostream& operator << (ostream &os,Point &p){\n    return os << p.x << \" \" << p.y << \"\\n\";\n  }\n\n  friend istream& operator >> (istream &is,Point &p){\n    return is >> p.x >> p.y;\n  }\n};\ntypedef Point Vector;\n\nstruct Segment{\n  Point p1,p2;\n  Segment(){};\n  Segment(Point p1,Point p2): p1(p1) , p2(p2){};\n  friend ostream& operator << (ostream &os,Segment &p){\n    return os << p.p1.x << \" \" << p.p1.y << \" \" << p.p2.x << \" \" << p.p2.y << \"\\n\";\n  }\n\n  friend istream& operator >> (istream &is,Segment &p){\n    return is >> p.p1.x >> p.p1.y >> p.p2.x >> p.p2.y;\n  }\n};\ntypedef Segment Line;\n\nclass Circle{\npublic:\n  Point c;\n  double r;\n  Circle(Point c = Point(),double r = 0.0): c(c),r(r){}\n};\n\ntypedef vector<Point> Polygon;\n\ndouble norm(Vector a){\n  return  a.x * a.x + a.y * a.y;\n}\n\ndouble abs(Vector a){\n  return sqrt(norm(a));\n}\n\ndouble dot(Vector a,Vector b){\n  return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a,Vector b){\n  return a.x * b.y - a.y * b.x;\n}\n\nbool isOrthogonal(Vector a,Vector b){\n  return equals(dot(a,b),0.0);\n}\n\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n  return isOrthogonal(a1 - a1,b1 - b2);\n}\n\nbool isOrthogonal(Segment s1,Segment s2){\n  return equals(dot(s1.p2 - s1.p1,s2.p2 - s2.p1) , 0.0);\n}\n\nbool isParallel(Vector a,Vector b){\n  return equals(cross(a,b),0.0);\n}\n\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n  return isParallel(a1 - a2 , b1 - b2);\n}\n\nbool isParallel(Segment s1,Segment s2){\n  return equals(cross(s1.p2 - s1.p1 , s2.p2 - s2.p1),0.0);\n}\n\nPoint project(Segment s,Point p){\n  Vector base = s.p2 - s.p1;\n  double r = dot(p - s.p1 , base / norm(base));\n  return s.p1 + base * r;\n}\n\nPoint reflect(Segment s,Point p){\n  return p + (project(s,p) - p) * 2.0;\n}\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nint ccw(Point p0,Point p1,Point p2){\n  Vector a = p1 - p0;\n  Vector b = p2 - p0;\n  if(cross(a,b) > EPS)return COUNTER_CLOCKWISE;\n  if(cross(a,b) < -EPS)return CLOCKWISE;\n  if(dot(a,b) < -EPS)return ONLINE_BACK;\n  if(a.norm() < b.norm())return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\n\nbool intersect(Point p1,Point p2,Point p3,Point p4){\n  return (ccw(p1,p2,p3) * ccw(p1,p2,p4) <= 0 && \n          ccw(p3,p4,p1) * ccw(p3,p4,p2) <= 0);\n}\n\nbool intersect(Segment s1,Segment s2){\n  return intersect(s1.p1 , s1.p2 , s2.p1 , s2.p2);\n}\n\ndouble getDistance(Vector a,Vector b){\n  return abs(a - b);\n}\n\ndouble getDistanceLP(Line l,Point p){\n  return abs(cross(l.p2 - l.p1 , p - l.p1) / abs(l.p2 - l.p1));\n}\n\ndouble getDistanceSP(Segment s,Point p){\n  if(dot(s.p2 - s.p1,p - s.p1) < 0.0) return abs(p - s.p1);\n  if(dot(s.p1 - s.p2,p - s.p2) < 0.0) return abs(p - s.p2);\n  return getDistanceLP(s,p);\n}\n\ndouble getDistance(Segment s1,Segment s2){\n  if(intersect(s1,s2))return 0.0;\n  return min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),\n             min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n}\n\nPoint getCrossPoint(Segment s1,Segment s2){\n  Vector base = s2.p2 - s2.p1;\n  double d1 = abs(cross(base,s1.p1 - s2.p1));\n  double d2 = abs(cross(base,s1.p2 - s2.p1));\n  double t = d1 / (d1 + d2);\n  return s1.p1 + (s1.p2 - s1.p1) * t;\n}\n\npair<Point,Point> getCrossPoints(Circle c,Line l){\n  // assert(intersect(c,l));\n  Vector pr = project(l,c.c);\n  Vector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);\n  double base = sqrt(c.r * c.r - norm(pr - c.c));\n  return make_pair(pr + e * base , pr - e * base);\n}\n\ndouble arg(Vector p){\n  return atan2(p.y,p.x);\n}\n\nVector polar(double a,double r){\n  return Point(cos(r) * a, sin(r) * a);\n}\n\npair<Point,Point> getCrossPoints(Circle c1,Circle c2){\n  // assert(intersect(c1,c2));\n  double d = abs(c1.c - c2.c);\n  double a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n  double t = arg(c2.c - c1.c);\n  return make_pair(c1.c + polar(c1.r,t + a),c1.c + polar(c1.r,t - a));\n}\n\nint contains(Polygon g,Point p){\n  int n = g.size();\n  bool x = false;\n  for(int i = 0;i < n;i++){\n    Point a = g[i] - p, b = g[(i + 1) % n] - p;\n    if(abs(cross(a,b)) < EPS && dot(a,b) < EPS)return 1;\n    if(a.y < b.y)swap(a,b);\n    if(a.y < EPS && EPS < b.y && cross(a,b) > EPS)x = !x;\n  }\n  return (x ? 2 : 0);\n}\n\nPolygon andrewScan(Polygon s){\n  Polygon u,l;\n  if(s.size() < 3)return s;\n  sort(s.begin(),s.end());\n  u.push_back(s[0]);\n  u.push_back(s[1]);\n\n  l.push_back(s[s.size() - 1]);\n  l.push_back(s[s.size() - 2]);\n\n  for(int i = 2;i < s.size();i++){\n    for(int n = u.size();n >= 2 && ccw(u[n-2],u[n-1],s[i]) != CLOCKWISE;n--){\n      u.pop_back();\n    }\n    u.push_back(s[i]);\n  }\n\n  for(int i = s.size() - 3; i >= 0;i--){\n    for(int n = l.size();n >= 2 && ccw(l[n-2],l[n-1],s[i]) != CLOCKWISE;n--){\n      l.pop_back();\n    }\n    l.push_back(s[i]);\n  }\n  reverse(l.begin(),l.end());\n  for(int i = u.size() - 2;i >= 1;i--)l.push_back(u[i]);\n  return l;\n}\n\n#define BOTTOM 0\n#define LEFT 1\n#define RIGHT 2\n#define TOP 3\n\nclass EndPoint{\npublic:\n  Point p;\n  int seg,st;\n  EndPoint(){}\n  EndPoint(Point p,int seg,int st): p(p),seg(seg),st(st){}\n\n  bool operator < (const EndPoint &ep) const{\n    if(p.y == ep.p.y){\n      return st < ep.st;\n    }else{\n      return p.y < ep.p.y;\n    }\n  }\n};\n\nEndPoint EP[2 * 100000];\n\nint manhattanIntersection(vector<Segment> S){\n  int n = S.size();\n  for(int i = 0,k = 0;i < n;i++){\n    if(S[i].p1.y == S[i].p2.y){\n      if(S[i].p1.x > S[i].p2.x)swap(S[i].p1,S[i].p2);\n    }else if(S[i].p1.y > S[i].p2.y){\n      swap(S[i].p1,S[i].p2);\n    }\n\n    if(S[i].p1.y == S[i].p2.y){\n      EP[k++] = EndPoint(S[i].p1,i,LEFT);\n      EP[k++] = EndPoint(S[i].p2,i,RIGHT);\n    }else{\n      EP[k++] = EndPoint(S[i].p1,i,BOTTOM);\n      EP[k++] = EndPoint(S[i].p2,i,TOP);\n    }\n  }\n\n  sort(EP,EP + (2 * n));\n\n  set<int> BT;\n  BT.insert(1000000001);\n  int cnt = 0;\n  for(int i = 0;i < 2 * n;i++){\n    if(EP[i].st == TOP){\n      BT.erase(EP[i].p.x);\n    }else if(EP[i].st == BOTTOM){\n      BT.insert(EP[i].p.x);\n    }else if(EP[i].st == LEFT){\n      set<int>::iterator b = lower_bound(BT.begin(),BT.end(),S[EP[i].seg].p1.x);\n      set<int>::iterator e = upper_bound(BT.begin(),BT.end(),S[EP[i].seg].p2.x);\n      cnt += distance(b,e);\n    }\n  }\n  return cnt;\n}\n\nint main(){\n  int n;\n  cin >> n;\n  while(n--){\n    Line a,b;\n    cin >> a >> b;\n    printf(\"%.10f\\n\",getDistance(a,b));\n  }\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cmath>\n#include<cstdio>\n#define eps (1e-11)\n#define equals(a,b) (fabs((a)-(b))<eps)\nusing namespace std;\n\nclass Point{\npublic:\n  double x,y;\n  Point(double x=0,double y=0):x(x),y(y){}\n\n  Point operator+(Point p){return Point(x+p.x,y+p.y);}\n  Point operator-(Point p){return Point(x-p.x,y-p.y);}\n  Point operator*(double k){return Point(x*k,y*k);}\n  Point operator/(double k){return Point(x/k,y/k);}\n\n  double abs(){return sqrt(norm());}\n  double norm(){return (x*x+y*y);}\n};\ntypedef Point Vector;\n\nclass Segment{\npublic:\n  Point p1,p2;\n  Segment(Point p1,Point p2):p1(p1),p2(p2){}\n};\ntypedef Segment Line;\n\ndouble norm(Vector a){ return (a.x*a.x+a.y*a.y);}\ndouble abs(Vector a){ return sqrt(norm(a));}\ndouble dot(Vector a,Vector b){ return (a.x*b.x+a.y*b.y);}\ndouble cross(Vector a,Vector b){ return (a.x*b.y-a.y*b.x);}\n\nPoint project(Segment s,Point p){\n  Vector base=(s.p2-s.p1);\n  double r=(dot(p-s.p1,base)/base.norm());\n  return (s.p1+base*r);\n}\n\nPoint reflect(Segment s,Point p){\n  return p+(project(s,p)-p)*2;\n}\n\nbool isOrthogonal(Vector a,Vector b){\n  return equals(dot(a,b),0.0);\n}\n\nbool isParallel(Vector a,Vector b){\n  return equals(cross(a,b),0.0);\n}\n\nstatic const int COUNTER_CLOCKWISE=1;\nstatic const int CLOCKWISE=-1;\nstatic const int ONLINE_BACK=2;\nstatic const int ONLINE_FRONT=-2;\nstatic const int ON_SEGMENT=0;\n\nint ccw(Point p0,Point p1,Point p2){\n  Vector a=p1-p0;\n  Vector b=p2-p0;\n  if(cross(a,b)>eps)return COUNTER_CLOCKWISE;\n  if(cross(a,b)<-eps)return CLOCKWISE;\n  if(dot(a,b)<-eps)return ONLINE_BACK;\n  if(a.norm()<b.norm())return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\n\nbool intersect(Point p1,Point p2,Point p3,Point p4){\n  return (ccw(p1,p2,p3)*ccw(p1,p2,p4)<=0 &&\n          ccw(p3,p4,p1)*ccw(p3,p4,p2)<=0);\n}\n\nbool intersect(Segment s1,Segment s2){\n  return intersect(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n\nPoint getCrossPoint(Segment s1,Segment s2){\n  Vector base=s2.p2-s2.p1;\n  double d1=abs(cross(base,s1.p1-s2.p1));\n  double d2=abs(cross(base,s1.p2-s2.p1));\n  double t=d1/(d1+d2);\n  return (s1.p1+(s1.p2-s1.p1)*t);\n}\n\ndouble getDistanceLP(Line l,Point p){\n  return abs(cross(l.p2-l.p1,p-l.p1)/abs(l.p2-l.p1));\n}\n\ndouble getDistanceSP(Segment s,Point p){\n  if(dot(s.p2-s.p1,p-s.p1)<0.0)return abs(p-s.p1);\n  if(dot(s.p1-s.p2,p-s.p2)<0.0)return abs(p-s.p2);\n  return getDistanceLP(s,p);\n}\n\ndouble getDistance(Segment s1,Segment s2){\n  if(intersect(s1,s2))return 0.0;\n  return min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),\n             min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n}\n\nint main()\n{\n  Point A,B,C,D;\n  int q;\n\n  cin>>q;\n  for(int i=0;i<q;i++){\n    cin>>A.x>>A.y>>B.x>>B.y>>C.x>>C.y>>D.x>>D.y;\n    printf(\"%.10f\\n\",getDistance(Segment(A,B),Segment(C,D)));\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <iomanip>\n#include <map>\n#include <set>\n#include <queue>\n#include <stack>\n#include <numeric>\n#include <bitset>\n#include <cmath>\n\nstatic const int MOD = 1000000007;\nusing ll = long long;\nusing u32 = uint32_t;\nusing namespace std;\n\ntemplate<class T> constexpr T INF = ::numeric_limits<T>::max()/32*15+208;\n\nusing real = double;\nreal EPS = 1e-10;\nstruct Point {\n    real x, y;\n    Point& operator+=(const Point a) { x += a.x; y += a.y;  return *this; }\n    Point& operator-=(const Point a) { x -= a.x; y -= a.y;  return *this; }\n    Point& operator*=(const real k) { x *= k; y *= k;  return *this; }\n    Point& operator/=(const real k) { x /= k; y /= k;  return *this; }\n    Point operator+(const Point a) const {return Point(*this) += a; }\n    Point operator-(const Point a) const {return Point(*this) -= a; }\n    Point operator*(const real k) const {return Point(*this) *= k; }\n    Point operator/(const real k) const {return Point(*this) /= k; }\n    bool operator<(const Point &a) const { return (x != a.x ? x < a.x : y < a.y); }\n    explicit Point(real a = 0, real b = 0) : x(a), y(b) {};\n};\n\nistream& operator>> (istream& s, Point& P){\n    s >> P.x >> P.y;\n    return s;\n}\n\ninline real dot(Point a, Point b){ return a.x*b.x + a.y*b.y; }\ninline real cross(Point a, Point b){ return a.x*b.y - a.y*b.x; }\ninline real abs(Point a){ return sqrt(dot(a, a)); }\n\nstatic constexpr int COUNTER_CLOCKWISE = 1;\nstatic constexpr int CLOCKWISE = -1;\nstatic constexpr int ONLINE_BACK = 2;\nstatic constexpr int ONLINE_FRONT = -2;\nstatic constexpr int ON_SEGMENT = 0;\n\nint ccw(Point a, Point b, Point c){\n    b -= a; c -= a;\n    if(cross(b, c) > EPS) return COUNTER_CLOCKWISE;\n    if(cross(b, c) < -EPS) return CLOCKWISE;\n    if(dot(b, c) < 0) return ONLINE_BACK;\n    if(abs(b) < abs(c)) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\nstruct Segment {\n    Point a, b;\n    Segment(Point x, Point y) : a(x), b(y) {};\n};\n\nbool intersect(Segment s, Segment t){\n    return (ccw(s.a, s.b, t.a)*ccw(s.a, s.b, t.b) <= 0 &&\n            ccw(t.a, t.b, s.a)*ccw(t.a, t.b, s.b) <= 0);\n}\n\ndouble distance(Segment s, Point c){\n    if(dot(s.b-s.a, c-s.a) < EPS) return abs(c-s.a);\n    if(dot(s.a-s.b, c-s.b) < EPS) return abs(c-s.b);\n    return abs(cross(s.b-s.a, c-s.a)) / abs(s.a-s.b);\n}\n\ndouble distance(Segment s, Segment t){\n    if(intersect(s, t)) return 0.0;\n    return min({distance(s, t.a), distance(s, t.b),\n                distance(t, s.a), distance(t, s.b)});\n}\n\n\n\nPoint crossPoint(Segment s, Segment t){\n    real d1 = abs(cross(s.b-s.a, t.b-t.a));\n    real d2 = abs(cross(s.b-s.a, s.b-t.a));\n    if(d1 < EPS && d2 < EPS) return t.a;\n    return t.a+(t.b-t.a)*d2/d1;\n}\n\nPoint project(Segment s, Point p){\n    Point Q = s.b-s.a;\n    return s.a + Q*(dot(p-s.a, Q) / dot(Q, Q));\n}\n\nPoint refrect(Segment s, Point p){\n    Point Q = project(s, p);\n    return Q*2-p;\n}\n\nbool isOrthogonal(Segment s, Segment t){\n    return fabs(dot(s.b-s.a, t.b-t.a)) < EPS;\n}\n\nbool isparallel(Segment s, Segment t){\n    return fabs(cross(s.b-s.a, t.b-t.a)) < EPS;\n}\n\n\nint main() {\n    int q;\n    cin >> q;\n    for (int i = 0; i < q; ++i) {\n        Point a, b, c, d;\n        cin >> a >> b >> c >> d;\n        Segment s(a, b), t(c, d);\n        auto ans = distance(s, t);\n        printf(\"%.10f\\n\", ans);\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n  \nconst double EPS = 1e-8, PI = acos(-1);\ninline bool eq(double a,double b){ return abs(b - a) < EPS; }\n#define curr(P,i) P[i]\n#define next(P,i) P[(i+1)%P.size()]\n#define prev(P,i) P[(i+P.size()-1) % P.size()]\nenum { OUT, ON, IN };\n  \nstruct Geometory { // Geometory Library\n  struct Point {\n    double x, y;\n    Point(){};\n    Point(double x,double y):x(x),y(y){};\n    Point operator+(const Point& b) const { return Point(x + b.x,y + b.y); }\n    Point operator-(const Point& b) const { return Point(x - b.x,y - b.y); }\n    Point operator*(const double b) const { return Point(x * b,y * b); }\n    Point operator*(const Point& b) const { return Point(x * b.x - y * b.y,x * b.y + y * b.x); }\n    Point operator/(const double b) const { return Point(x / b,y / b); }\n    bool operator< (const Point& b) const { return x != b.x ? x < b.x : y < b.y; }\n    bool operator==(const Point& b) const { return eq(x,b.x) && eq(y,b.y); }\n    double norm(){ return x * x + y * y; }\n    double arg(){ return atan2(x,y); }\n    double abs(){ return sqrt(norm()); }\n    Point rotate(double theta){ return Point(cos(theta) * x - sin(theta) * y,sin(theta) * x + cos(theta) * y); }\n    Point rotate90(){ return Point(-y,x); }\n    friend ostream& operator<<(ostream& os, Point& p){ return os<<\"(\"<<p.x<<\",\"<<p.y<<\")\"; }\n    friend istream& operator>>(istream& is, Point& a){ return is>>a.x>>a.y; }\n  };\n  \n  struct Line {\n    Point a, b;\n    Line(){};\n    Line(Point a,Point b):a(a),b(b){};\n    friend ostream& operator<<(ostream& os, Line& p){ return os<<\"(\"<<p.a.x<<\",\"<<p.a.y<<\") to (\"<<p.b.x<<\",\"<<p.b.y<<\")\"; }\n    friend istream& operator>>(istream& is, Line& a){ return is>>a.a.x>>a.a.y>>a.b.x>>a.b.y; }\n  };\n  struct Segment {\n    Point a, b;\n    Segment(){};\n    Segment(Point a,Point b):a(a),b(b){};\n    friend ostream& operator<<(ostream& os, Segment& p){ return os<<\"(\"<<p.a.x<<\",\"<<p.a.y<<\") to (\"<<p.b.x<<\",\"<<p.b.y<<\")\"; }\n    friend istream& operator>>(istream& is, Segment& a){ return is>>a.a.x>>a.a.y>>a.b.x>>a.b.y; }\n  };\n  struct Circle {\n    Point p; double r;\n    Circle(){};\n    Circle(Point p, double r) : p(p),r(r){};\n  };\n  typedef vector< Point > Polygon;\n  typedef vector< Segment > Segments;\n  typedef vector< Line > Lines;\n  typedef vector< Circle > Circles;\n  typedef pair< Point, Point > PointPoint;\n  \n  double cross(const Point& a,const Point& b){\n    return a.x * b.y - a.y * b.x;\n  }\n  double dot(const Point& a,const Point& b){\n    return a.x * b.x + a.y * b.y;\n  }\n  \n  int ccw(const Point& a,Point b,Point c){\n    b = b - a, c = c - a;\n    if(cross(b,c) > EPS)    return +1;  // a → b で 反時計方向におれて c\n    if(cross(b,c) < -EPS)    return -1; // a → b で 時計方向におれて c\n    if(dot(b,c) < 0)      return +2;  // c -- a -- bで一直線上\n    if(b.norm() < c.norm()) return -2; // a -- b -- cで一直線上\n    return 0;  // a -- c -- bで一直線上\n  }\n  Point Projection(const Line& l, const Point& p){\n    double t = dot( p - l.a, l.a - l.b) / (l.a - l.b).norm();\n    return l.a + (l.a - l.b) * t;\n  }\n  Point Projection(const Segment& l, const Point& p){\n    double t = dot( p - l.a, l.a - l.b) / (l.a - l.b).norm();\n    return l.a + (l.a - l.b) * t;\n  }\n  Point Reflection(const Line& l, const Point& p){\n    return p + (Projection( l, p) - p) * 2.0;\n  }\n  \n  double Distance( const Line& l,const Point& p) { //OK\n    return (p - Projection( l, p)).abs();\n  }\n  \n  bool Intersect(const Line& l, const Line& m){\n    return abs(cross(l.b - l.a, m.b - m.a)) > EPS || abs(cross(l.b-l.a, m.b-l.a)) < EPS;\n  }\n  bool Intersect(const Line& l, const Segment& s){\n    return cross( l.b - l.a, s.a - l.a) * cross( l.b - l.a, s.b - l.a) < EPS;\n  }\n  bool Intersect(const Line& l, const Point& p){\n    return abs(ccw(l.a, l.b, p)) != -1;\n  }\n  bool Intersect(const Segment& s, const Segment& t){\n    return ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 && ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0;\n  }\n  bool Intersect(const Segment& s, const Point& p){\n    return ccw(s.a, s.b, p) == 0;\n  }\n  bool Intersect(const Circle& c,const Line& l){\n    return Distance( l, c.p) <= c.r + EPS;\n  }\n  bool Intersect(const Circle& c,const Point& p){\n    return abs( ( p - c.p).abs() - c.r ) < EPS;\n  }\n  int Intersect(const Circle& c, const Segment& l){\n    if( (Projection( l, c.p) - c.p).norm() - c.r * c.r > EPS) return 0;\n    const double d1 = ( c.p - l.a).abs(), d2 = ( c.p - l.b).abs();\n    if( d1 < c.r + EPS && d2 < c.r + EPS) return 0;\n    if( d1 < c.r - EPS && d2 > c.r + EPS || d1 > c.r + EPS && d2 < c.r - EPS ) return 1;\n    const Point h = Projection( l, c.p);\n    if( dot( l.a - h, l.b - h) < 0) return 2;\n    return 0;\n  }\n  bool Intersect(const Circle& a,const Circle& b){\n    return ( ( a.p - b.p).norm() - ( a.r + b.r) * ( a.r + b.r) < EPS) &&\n      ( ( a.p - b.p).norm() - ( a.r - b.r) * ( a.r - b.r) > -EPS);\n  }\n  double Distance(const Segment& s,const Point& p){\n    Point r = Projection(s, p);\n    if ( Intersect( s, r)) return ( r - p).abs();\n    return min( ( s.a - p).abs(), ( s.b - p).abs());\n  }\n  double Distance(const Segment& a,const Segment& b){\n    if(Intersect( a, b)) return 0;\n    return min( min( Distance( a, b.a), Distance( a, b.b)), min( Distance( b, a.a), Distance( b, a.b)));\n  }\n  double Distance(const Line& l,const Line& m) {\n    return Intersect( l, m) ? 0 : Distance( l, m.a);\n  }\n  double Distance(const Line& l,const Segment& s) { //OK\n    if (Intersect(l, s)) return 0;\n    return min(Distance(l, s.a), Distance(l, s.b));\n  }\n  double Distance(const Point& a,const Point& b){ //OK\n    return ( a - b).abs();\n  }\n  Point Crosspoint(const Segment& l,const Segment& m) { //OK\n    double A = cross(l.b - l.a, m.b - m.a);\n    double B = cross(l.b - l.a, l.b - m.a);\n    if (abs(A) < EPS && abs(B) < EPS) return m.a; // same line\n    return m.a + (m.b - m.a) * B / A;\n  }\n  PointPoint Crosspoint(const Circle& c,const Line l){\n    Point hp = Projection( l, c.p), h =  hp - c.p;\n    const double d2 = h.norm();\n    Point v = ( l.b - l.a) * sqrt( c.r * c.r - d2) / ( l.b - l.a).abs();\n    return PointPoint(hp - v, hp + v);\n  }\n  PointPoint Crosspoint(const Circle& c,const Segment& l) {\n    Line aa = Line( l.a, l.b);\n    if(Intersect(c, l) == 2) return Crosspoint(c, aa);\n    PointPoint ret = Crosspoint(c, aa);\n    if(dot(l.a - ret.first, l.b - ret.first) < 0) ret.second = ret.first;\n    else ret.first = ret.second;\n    return ret;\n  }\n  PointPoint Crosspoint(const Circle& c1,const Circle& c2){ //OK\n    double d = (c1.p - c2.p).abs();\n    double s = (c1.r + c2.r + d) / 2;\n    double S = sqrt( s * ( s - c1.r) * ( s - c2.r) * ( s - d));\n    double h = 2 * S / d;\n    Point v = ( c2.p - c1.p) / ( c2.p - c1.p).abs();\n    double m = sqrt( c1.r * c1.r - h * h);\n    return PointPoint( c1.p + v * m + Point(0,1) * h * v, c1.p + v * m - Point(0,1) * h * v);\n  }\n  bool parallel(const Line& a,const Line& b){\n    return abs(cross( a.b - a.a, b.b - b.a)) < EPS;\n  }\n  bool orthogonal(const Line& a,const Line& b){\n    return abs(dot( a.a - a.b, b.a - b.b)) < EPS;\n  }\n  int Contains(const Polygon& Q,const Point& p){\n    bool in = false;\n    for(int i = 0 ; i < Q.size() ; i++ ){\n      Point a = curr(Q,i) - p, b = next(Q,i) - p;\n      if(a.y > b.y) swap(a,b);\n      if(a.y <= 0 && 0 < b.y && cross(a,b) < 0) in = !in;\n      if(cross(a,b) == 0 && dot(a,b) <= 0) return ON;\n    }\n    return in ? IN : OUT;\n  }\n  bool Contains(const Circle& c,const Point& p){\n    return ( c.p - p).abs() < c.r + EPS;\n  }\n  double Area2(const Polygon& p){ //OK\n    double A = 0;\n    for (int i = 0; i < p.size(); ++i){\n      A += cross(curr(p, i), next(p, i));\n    }\n    return A;\n  }\n};\n\nGeometory geo;\ntypedef Geometory::Point P;\ntypedef Geometory::Line L;\ntypedef Geometory::Segment S;\ntypedef Geometory::Circle C;\nint main(){\n  int q;\n  cin >> q;\n  while(q--){\n    S l1, l2;\n    cin >> l1 >> l2;\n    cout << fixed << setprecision(10) << geo.Distance( l1, l2) << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cmath>\n#include<iomanip>\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\n#define EPS 1e-10\nstatic const int COUNTER_CLOCKWISE = 1;\t\t\t\t\t//逆时针   \nstatic const int CLOCKWISE = -1;\t\t\t\t\t\t\t//顺时针\nstatic const int ONLINE_BACK = 2;\t\t\t\t\t\t//p2 在直线后面\nstatic const int ONLINE_FRONT = -2;\t\t\t\t\t\t//p2 在直线前面\nstatic const int ON_SEGMENT = 0;\t\t\t\t\t\t//p2 在直线上\nint equals(double a, double b) { return fabs(a - b) < EPS; };\nclass Point {\npublic:\n\tdouble x, y;\n\tPoint(double x=0, double y=0) :x(x), y(y) { };\n\tPoint operator + (Point& p) {\n\t\treturn Point(p.x + x, p.y + y);\n\t}\n\tPoint operator - (Point& p) {\n\t\t\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n\tPoint operator * (double k) {\n\t\treturn Point(k*x, k*y);\n\t}\n\tdouble abs() {\t\t\t\t\t//向量长度;\n\t\treturn sqrt(x * x + y * y);\n\t}\n};\ntypedef Point Vector;\ndouble dot(Vector a, Vector b) {\t\t\t//内积 x1*x2 + y1*y2\n\treturn a.x * b.x + a.y * b.y;\n}\ndouble cross(Vector a, Vector b) {\t\t  //外积  x1*y2 - x2*y1\n\treturn a.x * b.y - a.y * b.x;\n}\nstruct Segment           //线段\n{\n\tPoint a, b;\n};\ntypedef Segment Line;   //线段表示直线；\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double x = 0) :c(c), r(x) {};\n};\nvoid Parallel_Orthogonal() {\t\t\t\t//判断平行或正交\n\tPoint a, b,c,d;\n\tPoint e, f;\n\tint n;\n\tcin >> n;\n\tfor (int i = 0; i < n; i++) {\n\t\tcin >> a.x >> a.y >> b.x >> b.y>>c.x>>c.y>>d.x>>d.y;\n\t\te = a - b;\n\t\tf = c - d;\n\t\tif (equals(dot(e, f), 0)) cout << \"1\" << endl;\n\t\telse if (equals(cross(e, f), 0))cout << \"2\" << endl;\n\t\telse cout <<\"0\" <<endl;\n\t}\n}\nPoint Projection(Point& a, Point& b, Point& c) {\t\t//计算投影点\n\tPoint p;\n\tVector v1 = b - a;\n\tVector v2 = c - a;\n\tdouble len = dot(v1, v2);\n\tdouble len2 = len/ v1.abs();\n\tp.x = a.x + len2 / v1.abs() * v1.x;\n\tp.y = a.y + len2 / v1.abs() * v1.y;\n\treturn p;\n}\nPoint Reflection(Point& a, Point& b, Point& c) {\t//算映像\n\tPoint p = Projection(a, b, c);\t\t\t\t\t//算出映射点\n\treturn p*2 - c;\t\t\t\t\t\t\t\t\t//映射点 是 该点与映像点中点  x + c = 2*p；\n}\ndouble getDistancePP(Point a, Point b) {\t\t\t\t//两点距离;\n\treturn ((a - b).abs());\n}\ndouble getDistancePL(Point a, Line b) {\t\t\t//求点到直线距离 外积 = |a|.|b|.sin0  在直线上取两点，然后以其中一点为端点求出外\n\tVector m = b.a - b.b;\t\t\t\t\t\t//积的大小 再除以直线上的向量大小 则可以求解。\n\tVector m2 = a - b.b;\n\treturn abs(cross(m, m2) / m.abs());\n}\nint ccw(Point a, Point b, Point c) {\t\t\t//三个点的位置关系\n\tVector p = b - a;\n\tVector p2 = c - a;\n\tif (cross(p, p2) > EPS) return COUNTER_CLOCKWISE;\t\t//逆时针方向向外 结果为正\n\tif (cross(p, p2) < -EPS) return CLOCKWISE;\t\t\t\t//顺时针方向为内 结果为负\n\tif (dot(p, p2) < -EPS) return ONLINE_BACK;\n\tif (dot(p, p2) > EPS&& p2.abs() > p.abs()) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\ndouble getDistancePS(Point a, Segment b) {\t\t//点到线段的距离;\n\tPoint p1, p2;\n\tp1 = a - b.a;\n\tp2 = b.b - b.a;\n\tif (dot(p1, p2) < 0) {\n\t\treturn p1.abs();\n\t}\n\tp1 = a - b.b;\n\tp2 = b.a - b.b;\n\tif (dot(p1, p2) < 0) {\n\t\treturn p1.abs();\n\t}\n\telse {\n\t\treturn getDistancePL(a, b);\n\t}\n}\nbool Intersection(Point a, Point b, Point c, Point d) {    //判断两线段是否相交  如果相交 则两个边的两个个端点会在另一条边的两边或线上\n\treturn (ccw(a, b, c) * ccw(a, b, d) <= 0 && ccw(c, d, a) * ccw(c, d, b) <= 0);\n}\nPoint Cross_Ponit(Point a, Point b, Point c, Point d) {\t  //求两线段交点  通过面积求两边高  通过高求两边长度比例\n\tdouble s1 = cross(b - a, c - a);\n\tdouble s2 = cross(b - a, d - a);\n\tdouble d1 =  fabs(s1 * 2 / (b - a).abs());\n\tdouble d2 = fabs(s2 * 2 / (b - a).abs());\n\tPoint p;\n\tp.x = d1 / (d1 + d2) * (d - c).x + c.x;\n\tp.y = d1 / (d1 + d2) * (d - c).y + c.y;\n\treturn p;\n}\ndouble getDistanceSS(Point a, Point b, Point c, Point d) { //如果两者相交则直接返回0 否则是4个点到另一条直线最短的为距离\n\tif (Intersection(a, b, c, d)) return 0;\n\tdouble p1,p2;\n\tSegment s1,s2;\n\ts1.a = a;\n\ts1.b = b;\n\ts2.a = c;\n\ts2.b = d;\n\tp1 = min(getDistancePS(a,s2),getDistancePS(b,s2));\n\tp2 = min(getDistancePS(c, s1), getDistancePS(d, s1));\n\treturn min(p1, p2);\n}\nint main(void) {\t\t\t\t\n\tPoint a, b, c, d;\n\tPoint p;\n\tint n;\n\tcin >> n;\n\tfor (int i = 0; i < n; i++) {\n\t\tcin >> a.x >> a.y >> b.x >> b.y >> c.x >> c.y >> d.x >> d.y;\n\t\tp = getDistanceSS(a, b, c, d);\n\t\tprintf(\"%.10f\\n\",p);\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<vector>\n#include<queue>\n#include<map>\n#include<string>\n#include <math.h>\n#include<algorithm>\n#include<functional>\n#define ll long long\n#define inf  999999999\n#define pa pair<int,int>\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n\nusing namespace std;\n\nclass Point{\n\tpublic:\n\tdouble x,y;\n\tPoint(double x=0,double y=0):x(x),y(y) {}\n\tPoint operator + (Point p) {return Point(x+p.x,y+p.y);}\n\tPoint operator - (Point p) {return Point(x-p.x,y-p.y);}\n\tPoint operator * (double a) {return Point(x*a,y*a);}\n\tPoint operator / (double a) {return Point(x/a,y/a);}\n\tdouble absv() {return sqrt(norm());}\n\tdouble norm() {return x*x+y*y;}\n\tbool operator < (const Point &p) const{\n\t\treturn x != p.x ? x<p.x: y<p.y;\n\t}\n\tbool operator == (const Point &p) const{\n\t\treturn fabs(x-p.x)<EPS && fabs(y-p.y)<EPS;\n\t}\n};\ntypedef Point Vector;\n\nstruct Segment{\nPoint p1,p2;\n};\n\n\ndouble dot(Vector a,Vector b){\n\treturn a.x*b.x+a.y*b.y;\n}\ndouble cross(Vector a,Vector b){\n\treturn a.x*b.y-a.y*b.x;\n}\n\n//----------------kokomade temple------------\n\ndouble mind(double a,double b){\nif(a>b) return b;\nelse return a;\n\n} \n\nint main(){\nint n;\ncin>>n;\ndouble a1,a2,a3,a4,a5,a6,a7,a8;\nPoint p0,p1,p2,p3;\nVector v01,v31,v02,v03,v23,v21,v20;\nfor(int i=0;i<n;i++){\nint cr;\ncin>>a1>>a2>>a3>>a4>>a5>>a6>>a7>>a8;\np0.x=a1,p0.y=a2;\n//cout<<a2<<endl;\np1.x=a3,p1.y=a4;\np2.x=a5,p2.y=a6;\np3.x=a7,p3.y=a8;\nv01=p0-p1;\nv02=p0-p2;\nv03=p0-p3;\nv23=p2-p3;\nv21=p2-p1;\nv20=p2-p0;\nv31=p3-p1;\nif(fabs(cross(v01,v02))<EPS && fabs(cross(v01,v03))<EPS){\nif(dot(p0-p3,p0-p2)>EPS && dot(p1-p3,p1-p2)>EPS &&dot(p0-p3,p1-p3)>EPS) cr=0;\nelse cr=1;\n}\nelse if(cross(v01,v02)*cross(v01,v03)<=0 && cross(v23,v21)*cross(v23,v20)<=0) cr=1;\nelse cr=0;\n double ans;\nif(cr==1) ans=0.0;\n else ans=mind(mind((p0-p2).absv(),(p0-p3).absv()),mind((p1-p2).absv(),(p1-p3).absv()));\nprintf(\"%.10f\\n\",ans);\n\n}\n \n \n \nreturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nusing CP = complex<long double>;\n#define X real()\n#define Y imag()\nconst long double PI = acos(-1.0L);\nconst long double EPS = 1e-10;\n// conj(x) : complex conjugate,(0,1)->(0,-1)\n// abs(x) : dist between(0,0) and x\n// norm(x) : abs(x) * abs(x)\n// arg(x) : argment\n\n// dot(a,b) = |a||b|cos x\nlong double dot(CP a, CP b) { return (a * conj(b)).X; }\n// cross(a,b) : area of parallelogram\nlong double cross(CP a, CP b) { return (a * conj(b)).Y; }\nlong double corner(CP a, CP b) {\n  //[0,pi]\n  return acos(dot(a, b) / (abs(a) * abs(b)));\n}\nCP projection(CP p, CP s, CP t) {\n  CP base = t - s;\n  long double r = dot(p - s, base) / norm(base);\n  return s + base * r;\n}\nCP reflection(CP p, CP s, CP t) {\n  CP tmp = (projection(p, s, t) - p);\n  tmp *= 2;\n  return p + tmp;\n}\n\nCP intersection(CP a, CP b, CP c, CP d) {\n  return a + (b - a) * (cross(d - c, c - a) /\n                        cross(d - c, b - a));\n}\n\nbool on_seg(CP a, CP b, CP p) {\n  // if not use end point, dot(a - p, b - p) < 0\n  return abs(cross(a - p, b - p)) <= 1e-10 &&\n         dot(a - p, b - p) <= 0;\n}\n\n// crossing lines? (a,b) and (c,d)\nbool iscross(CP a, CP b, CP c, CP d) {\n  // parallel\n  if(abs(cross(a - b, c - d)) <= 1e-10) {\n    return on_seg(a, b, c) || on_seg(a, b, d) ||\n           on_seg(c, d, a) || on_seg(c, d, b);\n  }\n  CP isp = intersection(a, b, c, d);\n  return on_seg(a, b, isp) && on_seg(c, d, isp);\n}\n\nlong double distLP(CP a, CP b, CP p) {\n  return abs(cross(b - a, p - a) / abs(b - a));\n}\n\n// segmentver.\nlong double distSP(CP a, CP b, CP p) {\n  if(dot(b - a, p - a) < 0) return abs(p - a);\n  if(dot(a - b, p - b) < 0) return abs(p - b);\n  return distLP(a, b, p);\n}\n\n// segment and segment\nlong double distSS(CP a, CP b, CP c, CP d) {\n  long double res = 1e18;\n  if(iscross(a, b, c, d)) return 0.0L;\n  res = min(res, distSP(a, b, c));\n  res = min(res, distSP(a, b, d));\n  res = min(res, distSP(c, d, a));\n  res = min(res, distSP(c, d, b));\n  return res;\n}\n\nstruct convex_hull {\n  vector<CP> ch;\n  int psize;\n  convex_hull() {}\n  convex_hull(vector<CP> &ps) { calculation(ps); }\n  void calculation(vector<CP> &ps) {\n    auto lmd = [&](const CP &l, const CP &r) {\n      if(l.X != r.X) return l.X < r.X;\n      return l.Y < r.Y;\n    };\n    psize = ps.size();\n    sort(ps.begin(), ps.end(), lmd);\n    int k = 0;\n    ch.resize(psize * 2);\n    for(int i = 0; i < psize; ++i) {\n      while(k > 1 && cross(ch[k - 1] - ch[k - 2],\n                           ps[i] - ch[k - 1]) <= 0)\n        --k;\n      ch[k++] = ps[i];\n    }\n    for(int i = psize - 2, t = k; i >= 0; --i) {\n      while(k > t && cross(ch[k - 1] - ch[k - 2],\n                           ps[i] - ch[k - 1]) <= 0)\n        --k;\n      ch[k++] = ps[i];\n    }\n    ch.resize(k - 1);\n    psize = ch.size();\n  }\n};\n\nlong long q, a, b, c, d;\nCP xs, xt, ys, yt;\n\nint main() {\n  cout << fixed << setprecision(10);\n  cin >> q;\n  for(int t = 0; t < q; ++t) {\n    cin >> a >> b >> c >> d;\n    xs = CP(a, b);\n    xt = CP(c, d);\n    cin >> a >> b >> c >> d;\n    ys = CP(a, b);\n    yt = CP(c, d);\n    cout << distSS(xs, xt, ys, yt) << endl;\n  }\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\ntypedef double ll;\n\nstruct Point\n{\n    ll x,y;\n    Point(){ x = y = 0.0; }\n    Point(ll _x, ll _y) : x(_x), y(_y){}\n\n    Point operator+ (Point p)\n    {\n        return Point(p.x + x, p.y + y);\n    }\n\n    Point operator- (Point p)\n    {\n        return Point(x - p.x, y - p.y);\n    }\n\n    ll operator* (Point p)\n    {\n        return p.x * x + p.y * y;\n    }\n\n    Point operator* (ll t)\n    {\n        return Point(x*t, y*t);\n    }\n\n    ll operator~ ()\n    {\n        return sqrt(x * x + y * y);\n    }\n\n    ll operator% (Point p)\n    {\n        return x * p.y - y * p.x;\n    }\n\n};\n\nbool areIntersectSegment(Point a, Point b, Point p, Point q)\n{\n    Point v1=(b-a);\n    Point v2=(q-p);\n    double t,t1;\n    if( v1 % v2 != 0 )\n    {\n        t = (double)(( p - a ) % v2) / (double)(v1 % v2);\n        t1 = (double)(( a - p ) % v1) / (double)(v2 % v1);\n        if( t >= 0.0 && t <= 1.0 && t1 >= 0.0 && t1 <= 1.0) return true;\n        else return false;\n    }\n    else\n    {\n        // Segment collinear\n        if( v1 % v2 == 0 && (p - a) % v1 == 0 )\n        {\n            t = (double)((p - a)*v1) /  (double)(v1*v1);\n            t1 = (double)((p+v2-a)*v1) / (double)(v1*v1);\n            //If are in opposite direction\n            if( v1 * v2 < 0 )\n            {\n                if( t1 <= 1.0 && 0.0 <= t ) return true;\n            }\n            else\n            {\n                if( t <= 1.0 && 0.0 <= t1 ) return true;\n            }\n        }\n    }\n    return false;\n}\n\nPoint projection(Point p1, Point p2, Point o)\n{\n    Point a = (p2 - p1);\n    Point b = (o - p1);\n    double t =( (a * b) / (a * a) );\n    if( t < 0.0 ) return p1;\n    if( t > 1.0 ) return p2;\n    return p1 + a * t;\n}\n\ndouble distancePointToSegment(Point a, Point b, Point p)\n{\n    return ~(projection(a,b,p)-p);\n}\n\ndouble distanceSegmentToSegment(Point a, Point b, Point p, Point q)\n{\n    double minimo = numeric_limits<double>::max();\n    Point aux;\n    if( !areIntersectSegment(a,b,p,q) )\n    {\n        minimo = min( minimo, distancePointToSegment(a,b,p) );\n        minimo = min( minimo, distancePointToSegment(a,b,q) );\n        minimo = min( minimo, distancePointToSegment(p,q,a) );\n        minimo = min( minimo, distancePointToSegment(p,q,b) );\n        return  minimo;\n    }\n    return 0.0;\n}\n\nint main()\n{\n    cout << fixed;\n    cout.precision(10);\n    ios::sync_with_stdio(0); cin.tie(0);\n    Point p0,p1,p2,p3,ans;\n    Point vec, vec1;\n    int q;\n    cin >> q;\n    while(q--)\n    {\n        cin >> p0.x >> p0.y >> p1.x >> p1.y >> p2.x >> p2.y >> p3.x >> p3.y;\n        cout << distanceSegmentToSegment(p0, p1, p2, p3) << '\\n';\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<complex>\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\ntypedef complex<long double> P;\n\n// ??§????????°INF\n#define INF (1e16)\n// ?¨±?????????????????\n#define EPS (1e-16)\n// 2??????????????????????????????????????????\n#define EQ(a,b) (abs((a)-(b)) < EPS)\n// 2??????????????????????????????????????????\n#define EQV(a,b) ( EQ((a).real(), (b).real()) && EQ((a).imag(), (b).imag()) )\n\n// ?????? (dot product) : a???b = |a||b|cos??\nlong double dot(P a, P b) {\n\treturn (a.real() * b.real() + a.imag() * b.imag());\n}\n\n// ?????? (cross product) : a??b = |a||b|sin??\nlong double cross(P a, P b) {\n\treturn (a.real() * b.imag() - a.imag() * b.real());\n}\n\n// ?????????????????????\nint is_intersected_ls(P a1, P a2, P b1, P b2) {\n\treturn (cross(a2 - a1, b1 - a1) * cross(a2 - a1, b2 - a1) < EPS) &&\n\t\t(cross(b2 - b1, a1 - b1) * cross(b2 - b1, a2 - b1) < EPS);\n}\n\n// 2??´?????????????????? : a//b <=> cross(a, b) = 0\nint is_parallel(P a1, P a2, P b1, P b2) {\n\treturn EQ(cross(a1 - a2, b1 - b2), 0.0);\n}\n\n// ???c?????????a,b????????????????????????(1)\nint is_point_on_line(P a, P b, P c) {\n\treturn EQ(cross(b - a, c - a), 0.0) &&\n\t\t(dot(b - a, c - a) > -EPS) &&\n\t\t(dot(a - b, c - b) > -EPS);\n}\n\n// a1,a2???????????¨??????????????¨b1,b2???????????¨??????????????????????¨????\nP intersection_ls(P a1, P a2, P b1, P b2) {\n\tP b = b2 - b1;\n\tlong double d1 = abs(cross(b, a1 - b1));\n\tlong double d2 = abs(cross(b, a2 - b1));\n\tlong double t = d1 / (d1 + d2);\n\n\treturn a1 + (a2 - a1) * t;\n}\n\n\n// ???a,b???????????¨??????????????¨???c??¨????????¢\nlong double distance_ls_p(P a, P b, P c) {\n\tif (dot(b - a, c - a) < EPS) return abs(c - a);\n\tif (dot(a - b, c - b) < EPS) return abs(c - b);\n\treturn abs(cross(b - a, c - a)) / abs(b - a);\n}\n\nint main() {\n\tint q; cin >> q;\n\tfor (int i = 0; i < q; i++) {\n\t\tlong double x0, y0, x1, y1, x2, y2, x3, y3;\n\t\tcin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n\t\tP p0(x0, y0), p1(x1, y1), p2(x2, y2), p3(x3, y3);\n\t\tlong double d0 = min(distance_ls_p(p0, p1, p2), distance_ls_p(p0, p1, p3));\n\t\tlong double d1 = min(distance_ls_p(p2, p3, p0), distance_ls_p(p2, p3, p1));\n\t\tlong double ans =min(d0,d1) ;\n\n\t\tcout.precision(20);\n\t\tcout << showpoint << ans << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "\n#include <cmath>\n#include <string>\n#include <iostream>\n#include <algorithm>\n#include<vector>\n#include<cstring>\n#include<set>\n#include <cstdio>\n#include<queue>\n#include<map>\n#define WHITE 0\n#define GRAY  1\n#define BLACK 2\n#define endl '\\n'\n#define forup(i,a,n) for( int i =a; i < n; i++)\n#define llforup(i,a,n) for( ll i =a; i < n; i++)\n#define fordown(i,a,n) for( int i =a; i >= n; i--)\n#define fornot(i,a,n) for( int i=a;!n;i++)\n#define mod  (ll)(1e9+7)\n#define putnum(a) printf(\"%d\\n\",a)\nusing namespace std;\ntypedef long long ll;\ninline int readnum()\n{\n\tint p, data = 0; char ch = 0;\n\twhile ((ch != '-') &&( ch < '0' || ch>'9') )//注意运算优先级，逻辑与大于逻辑非\n\t\tch = getchar();//相当于正则表达式的搜索，跳过不需要的字符\n\tif (ch == '-')\n\t\tp = -1, ch = getchar();//不能与if平行放置，不懂为什么，可能是bug\n\telse p = 1;\n\twhile (ch >= '0' && ch <= '9') data = data * 10 + ch - '0', ch = getchar();//搜索需要的字符\n\treturn data * p;\n}\ninline int ReadPossitive()\n{\n\tchar ch; int data = 0;\n\tch = getchar();\n\twhile (ch == ' ' || ch == '\\n')ch = getchar();\n\twhile (ch != ' ' && ch != '\\n' && ch != EOF)\n\t{\n\t\tdata = data * 10 + ch - '0';\n\t\tch = getchar();\n\t}\n\treturn data;\n}\n//并查集模板\nclass DisjointSet {\nprivate:\n\tvector<int>rank, parent;\npublic:\n\tDisjointSet(){}\n\tDisjointSet(int size)\n\t{\n\t\trank.resize(size, 0);//默认初始化为0，养成习惯写完整\n\t\tparent.resize(size, 0);\n\t\tforup(i, 0, size)MakeSet(i);\n\t}\n\tvoid MakeSet(int x)\n\t{\n\t\tparent[x] = x;\n\t\trank[x] = 0;\n\t}\n\tbool same(int x, int y)\n\t{\n\t\treturn Findroot(x) == Findroot(y);\n\t}\n\tvoid unite(int x, int y)\n\t{\n\t\tlink(Findroot(x), Findroot(y));\n\t}\n\tinline int Findroot(int x)\n\t{\n\t\twhile (x != parent[x])\n\t\t{\n\t\t\tx = parent[x];\n\t\t}\n\t\treturn x;\n\t}\n\tvoid link(int rootx, int rooty)\n\t{\n\t\tif (rank[rootx] < rank[rooty])parent[rootx] = parent[rooty];\n\t\telse\n\t\t{\n\t\t\tparent[rooty] = parent[rootx];\n\t\t\tif (rank[rootx] == rank[rooty])\n\t\t\t\trank[rootx]++;\n\t\t}\n\t}\n};\n\n//计算几何模板\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)//保留整数0\nclass Point {\npublic:\n\tdouble x, y;\npublic:\n\tPoint() {};\n\tPoint(double x,double y):x(x),y(y){}\n\tPoint operator +(Point p) { return Point(x + p.x, y + p.y);}//p不能为引用的问题怎么解决？\n\tPoint operator -(Point p) { return Point(x - p.x, y - p.y);}\n\tPoint operator *(double a) { return Point(a * x, a * y); }\n\tPoint operator /(double a) { return Point(x / a, y / a); }\n\tinline double abs() { return sqrt(norm()); }\n\tinline double norm() { return x * x + y * y; }\n\tbool operator <(const Point& p)const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\tbool operator ==(const Point& p)const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\ntypedef Point Vector;\nclass Line {\npublic:\n\tPoint p1, p2;\npublic:\n\tLine() {};\n\tLine(int p1x, int p1y, int p2x, int p2y)\n\t{\n\t\tp1.x = p1x; p1.y = p1y;\n\t\tp2.x = p2x; p2.y = p2y;\n\t}\n};\nclass VectorOperation {//操作符不必继承\npublic:\n\tdouble dot(Point a, Point b)//点乘\n\t{\n\t\treturn a.x * b.x + a.y * b.y;\n\t}\n\tdouble cross(Point a, Point b)//叉乘\n\t{\n\t\treturn a.x * b.y - a.y * b.x;\n\t}\n\tdouble abs(Point s)\n\t{\n\t\treturn sqrt(s.norm());\n\t}\n\tdouble getDistance(Point a, Point b)\n\t{\n\t\treturn abs(a - b);\n\t}\n\tint rotation(Point p0, Point p1, Point p2)\n\t{\n#define COUNTER_CLOCKWISE -1\n#define CLOCKWISE 1\n#define ONLINE_BACK -2\n#define ONLINE_FRONT 2\n#define ON_SEGMENT 0\n\t\tVector a = p1 - p0;Vector b = p2 - p0;\n\t\tdouble Cross = cross(a, b);\n\t\tif (Cross > 0.0)return COUNTER_CLOCKWISE;\n\t\tif (Cross < 0.0)return CLOCKWISE;\n\t\tif (dot(a, b) < 0.0)return ONLINE_BACK;\n\t\tif (a.norm() < b.norm())return ONLINE_FRONT;\n\n\t\treturn ON_SEGMENT;\n#undef COUNTER_CLOCKWISE -1\n#undef CLOCKWISE 1\n#undef ONLINE_BACK -2\n#undef ONLINE_FRONT 2\n#undef ON_SEGMENT 0\n\t}\n};\n\nclass LineOperation :public VectorOperation{\npublic:\t\n\tLineOperation() {};\n\tbool isOrthogonal(Line s1, Line s2)\n\t{\n\t\treturn equals(dot(s1.p2-s1.p1, s2.p2 - s2.p1), 0.0);//操作符重载的返回值的内存分配机制尚不可知，似乎返回值没有分配内存，dot的参数不能用引用，否则报错。\n\t}\n\tbool isParallel(Line s1, Line s2)\n\t{\n\t\treturn equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);//外积判断平行，内积判断垂直。\n\t}\n\tbool intersectSS(Line s1, Line s2)\n\t{\n\t\treturn (rotation(s1.p1, s1.p2, s2.p1) * rotation(s1.p1, s1.p2, s2.p2) <= 0 &&\n\t\t\t    rotation(s2.p1, s2.p2, s1.p1) * rotation(s2.p1, s2.p2, s1.p2) <= 0);//即对两条线段都有另一条线段的两个端点必须在当前线段的两侧\n\t}//可以证明如果一条线段的计算结果是负二，另一个线段的计算结果必定大于0\n\tPoint projection(Line s, Point p)\n\t{\n\t\tVector base = s.p1 - s.p2;\n\t\tdouble r = dot(p - s.p1, base) /base.norm();\n\t\treturn s.p1 + base * r;\n\t}\n\tPoint reflection(Line s, Point p)\n\t{\n\t\treturn p + (projection(s, p)-p) * 2.0;\n\t}\n\tdouble getDistanceLP(Line s, Point p)//点与直线\n\t{\n\t\treturn fabs(cross(s.p2 - s.p1, p - s.p1)) / abs(s.p2 - s.p1);\n\t}\n\tdouble getDistanceSP(Line s, Point p)//点与线段\n\t{\n\t\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0)return abs(p - s.p1);//与点p1成钝角\n\t\telse if (dot(s.p2 - s.p1, p - s.p2) > 0.0)return abs(p - s.p2);\n\t\telse return getDistanceLP(s, p);\n\t}\n\tdouble getDistanceSS(Line s1, Line s2)//线段与线段\n\t{\n\t\t//考虑\n\t\t// --\n\t\t//----\n\t\tif (intersectSS(s1, s2))return 0.0;//如果枚举优化需要16次逻辑，采用分治法的效率和直接使用min函数一样\n\t\telse\n\t\t\treturn min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)), min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n\t\t\n\t}\n};\n//E-mail 374656045@qq.com\n\nclass solve {\nprivate:\n\tint n;\npublic://采用邻接表建图,带权无向图\n\tsolve()\n\t{\n\t\tint x1, y1, x2, y2, x3, y3, x4, y4;\n\t\tn = readnum();\n\t\tLineOperation op;\n\t\tforup(i, 0, n)\n\t\t{\n\t\t\tx1 = readnum(); y1 = readnum();\n\t\t\tx2 = readnum(); y2 = readnum();\n\t\t\tx3 = readnum(); y3 = readnum();\n\t\t\tx4 = readnum(); y4 = readnum();\n\t\t\tLine s1(x1, y1, x2, y2);\n\t\t\tLine s2(x3, y3, x4, y4);\n\t\t\tprintf(\"%.10f\\n\", op.getDistanceSS(s1, s2));\n\t\t}\n\t}\n\t\n};\nint main(void)\n{\n\tios_base::sync_with_stdio(0); cin.tie(0);//慎用，cin和scanf混用会导致非MSC++WA\n#ifdef DEBUG\n\tfreopen(\"input.txt\", \"r\", stdin);\n\tfreopen(\"output.txt\", \"w\", stdout);\n#endif\n\tsolve solution;\n#ifdef DEBUG\n\tfclose(stdin);//关闭文件 \n\tfclose(stdout);//关闭文件 \n#endif\n\treturn 0;\n\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define EPS 1e-10\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n#define rep(i,n) for(int i=0;i<n;++i)\ntypedef long long ll;\nusing namespace std;\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\n// 点\nstruct Point {\n    double x,y;\n    Point(){}\n    Point(double x, double y) : x(x),y(y){}\n    Point operator+(Point p) {return Point(x+p.x, y+p.y);}\n    Point operator-(Point p) {return Point(x-p.x, y-p.y);}\n    Point operator*(double k){return Point(x*k,y*k);}\n    Point operator/(double k){return Point(x/k,y/k);}\n    double norm(){return x*x+y*y;}\n    double abs(){sqrt(norm());}\n    bool operator == (const Point &p) const {return equals(x,p.x)&&equals(y,p.y);}\n};\ntypedef Point P;\n\ndouble norm(P a){return a.x*a.x+a.y*a.y;}\ndouble abs(P a){return sqrt(norm(a));}\n\n// 線分\nstruct Segment {\n    Point p1,p2;\n    Segment(){}\n    Segment(Point p1, Point p2):p1(p1),p2(p2){}\n};\n\ntypedef Segment Line;\n\n// 法線ベクトル\nPoint normal(Point p){return Point(-p.y,p.x);}\n\n// 内積\ndouble dot(Point a, Point b) {return a.x*b.x + a.y*b.y;}\n\n// 外積\ndouble cross(Point a, Point b) {return a.x*b.y-a.y*b.x;}\n// 2直線の直行判定\nbool is_orthogonal(Point a1, Point a2, Point b1, Point b2) {\n    return equals(dot(a1-a2, b1-b2), 0.0);\n}\n// 2直線の平行判定\nbool is_parallel(Point a1, Point a2, Point b1, Point b2) {\n    return equals(cross(a1-a2, b1-b2), 0.0);\n}\n// 点cが直線ab上にあるかないか\nbool is_point_on_INF_line(Point a, Point b, Point c) {\n    return equals(cross(b-a,c-a), 0.0);\n}\n// 点cが線分ab上にあるかないか\nbool is_point_on_LIMITED_line(Point a, Point b, Point c) {\n    return (Point(a-c).abs()+Point(c-b).abs() < Point(a-b).abs() + EPS);\n}\n// 直線と点の距離\ndouble distance_l_p(Point a, Point b, Point c) {return abs(cross(b-a, c-a)) / (b-a).abs();}\n\n// 点a,bを端点とする線分と点cとの距離\ndouble distance_ls_p(Point a, Point b, Point c) {\n    if (dot(b-a, c-a) < EPS) return (c-a).abs();\n    if (dot(a-b, c-b) < EPS) return (c-b).abs();\n    return abs(cross(b-a, c-a)) / (b-a).abs();\n}\n\n\n// a1,a2を端点とする線分とb1,b2を端点とする線分の交点計算\n// 前提として交差していることが必要\nP intersection_ls(P a1, P a2, P b1, P b2) {\n    P b = b2-b1;\n    double d1 = abs(cross(b, a1-b1));\n    double d2 = abs(cross(b, a2-b1));\n    double t = d1/(d1+d2);\n    return a1+(a2-a1)*t;\n}\n\n// a1,a2を通る直線とb1,b2を通る直線の交点計算\n// 前提として平行でないことが必要\nP intersection_l(P a1, P a2, P b1, P b2) {\n    P a = a2-a1; P b = b2-b1;\n    return a1+a*cross(b, b1-a1)/cross(b, a);\n}\n\n// 射影\nPoint project(Segment s, Point p) {\n    Point base = s.p2-s.p1;\n    double r = dot(p-s.p1,base)/norm(base);\n    return s.p1+base*r;\n}\n\nint ccw(Point p0,Point p1,Point p2) {\n    P a = p1-p0;\n    P b = p2-p0;\n    if(cross(a,b) > EPS) return COUNTER_CLOCKWISE;\n    if(cross(a,b) < -EPS) return CLOCKWISE;\n    if(dot(a,b) < -EPS) return ONLINE_BACK;\n    if(a.norm()<b.norm()) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\n// a1,a2を端点とする線分とb1,b2を端点とする線分の交差判定\nbool intersectSS(Point p1, Point p2, Point p3, Point p4) {\n    return (ccw(p1,p2,p3)*ccw(p1,p2,p4) <= 0&&ccw(p3,p4,p1)*ccw(p3,p4,p2) <= 0 );\n}\n\n// a1,a2を端点とする線分とb1,b2を端点とする線分の交差判定\nbool intersectSS(Segment s1, Segment s2) {\n    return intersectSS(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n\n// 直線と点の距離\ndouble getDistanceLP(Line l, Point p) {\n    return abs(cross(l.p2-l.p1,p-l.p1)/abs(l.p2-l.p1));\n}\n\n// 線分と点の距離\ndouble getDistanceSP(Segment s,Point p){\n    if(dot(s.p2-s.p1,p-s.p1) < 0.0 ) return abs(p-s.p1);\n    if(dot(s.p1-s.p2,p-s.p2) < 0.0 ) return abs(p-s.p2);\n    return getDistanceLP(s,p);\n}\n\n// 線分と線分の距離\ndouble getDistanceSS(Segment s1,Segment s2){\n    if(intersectSS(s1,s2)) return 0.0;\n    return min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),\n    min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n}\n\n\nint main(int argc, char const *argv[]) {\n    int q;\n    cin>>q;\n    rep(i,q) {\n        double x0,y0,x1,y1,x2,y2,x3,y3;\n        cin>>x0>>y0>>x1>>y1>>x2>>y2>>x3>>y3;\n        P p0(x0,y0),p1(x1,y1),p2(x2,y2),p3(x3,y3);\n        Segment s1(p0,p1),s2(p2,p3);\n        double ans = getDistanceSS(s1,s2);\n        cout << fixed << setprecision(12);\n        cout << ans << endl;\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<map>\n#include<vector>\n#include<algorithm>\n#include<cmath>\n#include<climits>\n#include<ctime>\n#include<cstring>\n#include<stack>\n#include<queue>\n#include<sstream>\n#include<string>\n#include<set>\n#include<array>\n\n#define ALL(v) (v).begin(),(v).end()\n#define REP(i,p,n) for(int i=p;i<(int)(n);++i)\n#define rep(i,n) REP(i,0,n)\n#define DUMP(list) cout << \"{ \"; for(auto nth : list){ cout << nth << \" \"; } cout << \"}\" << endl\n#define FOR(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i);\n\nusing namespace std;\n\ntypedef double Real;\n\nconst Real EPS = 1e-8;\n\nint sign(Real d){\n\treturn d > EPS ? 1 : d < -EPS ? -1 : 0;\n}\n\nstruct Point{\n\tReal x,y;\n\t\n\tPoint(Real x_ = 0,Real y_ = 0):x(x_),y(y_){}\n\n\tPoint operator+(const Point &p) const {return Point(x+p.x,y+p.y);}\n\tPoint operator-(const Point &p) const {return Point(x-p.x,y-p.y);}\n\tPoint operator*(Real s) const {return Point(x*s,y*s);}\n\tPoint operator/(Real s) const {return Point(x/s,y/s);}\n\tbool operator<(const Point &p) const{return sign(x-p.x) == -1 || (sign(x-p.x) == 0 && sign(y-p.y) == -1);}\n\tbool operator==(const Point &p) const{return sign(x-p.x) == 0 && sign(y-p.y) == 0;}\n\n};\n\nistream &operator>>(istream &is,Point &p){return is >> p.x >> p.y;}//??\\???????°???????\nostream &operator<<(ostream &os ,const Point &p){return os << '(' << p.x << \", \" << p.y << ')';}//??????????°???????\n\nstruct Segment : public array<Point,2>{\n\tSegment(const Point &a,const Point &b){\tat(0) = a; at(1) = b;}\n};\n\nstruct Line : public array<Point,2>{\n\tLine(const Point &a,const Point &b){at(0) = a; at(1) = b;}\n};\n\nstruct Circle{\n\tPoint c;\n\tReal r;\n\n\tCircle(const Point &c_, Real r_):c(c_),r(r_){}\n};\n\ntypedef vector<Point> Polygon;\n\nPoint rotate90(const Point &p){\n\treturn Point(-p.y,p.x);\n}\n\nPoint rotate(const Point &p,Real theta){\n\tconst Real s = sin(theta),c = cos(theta);\n\treturn Point(c*p.x-s*p.y,s*p.x+c*p.y);\n}\n\nReal angle(const Point &p){\n\treturn atan2(p.y,p.x);\n}\n\nReal dot(const Point &a,const Point &b){ //??????????????????\n\treturn a.x*b.x+a.y*b.y;\n}\n\nReal cross(const Point &a,const Point &b){ //??????????????????\n\treturn a.x*b.y-a.y*b.x;\n}\n\n\nReal norm(const Point &p){\n\treturn p.x*p.x+p.y*p.y;\n}\n\nReal abs(const Point &p){\n\treturn sqrt(norm(p));\n}\n\nenum { CCW=1,CW=-1,BACK=2,FRONT=-2,ON=0 };\nint ccw(const Point &a,const Point &b,const Point &c){\n\tconst Point p = b-a;\n\tconst Point q = c-a;\n\tconst int sgn = sign(cross(p,q));\n\t\n\tif(sgn == 1) return CCW;\n\tif(sgn == -1) return CW;\n\tif(sign(dot(p,q)) == -1) return BACK;\n\tif(sign(norm(p) - norm(q)) == -1) return FRONT;\n\treturn ON;\n}\n\nPoint project(const Line &l,const Point &p){ //?°???±\n\tReal t = dot(p-l[0], l[1]-l[0]) / norm(l[0] - l[1]);\n\treturn l[0] + (l[1] - l[0]) * t;\n}\n\nPoint refrect(const Line &l,const Point &p){ //????°?\n\tconst Point c = project(l,p);\n\treturn c+(c-p);\n}\n\nbool intersect(const Segment &a,const Segment &b){\n\treturn ccw(a[0],a[1],b[0])*ccw(a[0],a[1],b[1]) <= 0\n\t\t&& ccw(b[0],b[1],a[0])*ccw(b[0],b[1],a[1]) <= 0;\n}\n\nbool intersect(const Segment &s,const Point &p){\n\treturn ccw(s[0],s[1],p) == ON;\n}\n\nbool intersect(const Line &l,const Segment &s){\n\treturn sign(cross(l[1]-l[0],s[0]-l[0])) * cross(l[1]-l[0],s[1]-l[0]) <= 0;\n}\n\nbool intersect(const Line &l,const Point &p){\n\treturn abs(ccw(l[0],l[1],p)) != 1;\n}\n\nbool intersect(const Line &a,const Line &b){ //????????????\n\treturn sign(cross(a[1]-a[0],b[1]-b[0])) != 0\n\t\t||\tsign(cross(a[1]-a[0],b[1]-a[0]) == 0);\n}\n\nReal dist(const Point &a,const Point &b){\n\treturn abs(a-b);\t\n}\n\nReal dist(const Line &l,const Point &p){\n\tconst Point a = l[1]-l[0];\n\tconst Point b = p-l[0];\n\treturn abs(cross(a,b))/abs(a);\n}\n\nReal dist(const Line &l,const Segment &s){\n\tif(intersect(l,s)) return 0;\n\treturn min(dist(l,s[0]),dist(l,s[1]));\n}\n\nReal dist(const Line &a,const Line &b){\n\tif(intersect(a,b)) return 0;\n\treturn dist(a,b[0]);\n}\n\nReal dist(const Segment &s,const Point &p){\n\tif(sign(dot(s[1]-s[0],p-s[0]))==-1) return dist(s[0],p);\n\tif(sign(dot(s[0]-s[1],p-s[1]))==-1) return dist(s[1],p);\n\treturn dist(Line(s[0],s[1]),p);\n}\n\nReal dist(const Segment &a,const Segment &b){\n\tif(intersect(a,b)) return 0;\n\treturn min({dist(a,b[0]),dist(a,b[1]),dist(b,a[0]),dist(b,a[1])});\n}\n\nint main(){\n\n\tcout.setf(ios::fixed);\n\tcout.precision(10);\n\t\n\tint q;\n\tcin >> q;\n\n\trep(i,q){\n\t\tPoint p1,p2,p3,p4;\n\t\tcin >> p1 >> p2 >> p3 >> p4;\n\t\tcout << dist(Segment(p1,p2),Segment(p3,p4)) << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\nusing namespace std;\n\n//?????????\n#pragma region MACRO \n#define putans(x)  std::cerr << \"answer: \" ; cout << (x) << endl\n#define dputans(x) std::cerr << \"answer: \"; cout << setprecision(27) << (double)(x) << endl\n#define REP(i,a,n) for(int i=(a); i<(int)(n); i++)\n#define RREP(i,a,n) for(int i=(int)(n-1); i>= a; i--)\n#define rep(i,n) REP(i,0,n)\n#define rrep(i,n) RREP(i,0,n)\n#define all(a) begin((a)),end((a))\n#define mp make_pair\n#define exist(container, n) ((container).find((n)) != (container).end())\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n#ifdef _DEBUG //???????????????????????????????????????????????????\nstd::ifstream ifs(\"data.txt\");\n#define put ifs >>\n#else //?????£????????????????????§?????????????????????\n#define put cin >>\n#endif\n#pragma endregion\n\n//???????????°??????????????´\n#pragma region CODING_SUPPORT\n#ifdef _DEBUG\n#define dbg(var0) { std::cerr << ( #var0 ) << \"=\" << ( var0 ) << endl; }\n#define dbg2(var0, var1) { std::cerr << ( #var0 ) << \"=\" << ( var0 ) << \", \"; dbg(var1); }\n#define dbg3(var0, var1, var2) { std::cerr << ( #var0 ) << \"=\" << ( var0 ) << \", \"; dbg2(var1, var2); }\n#define dbgArray(a,n) {std::cerr << (#a) << \"=\";  rep(i,n){std::cerr <<(a[i])<<\",\";} cerr<<endl;} \n#else\n#define dbg(var0) {}\n#define dbg2(var0, var1) {}\n#define dbg3(var0, var1, var2) {}\n#define dbgArray(a,n) {}\n#endif \n#pragma endregion \n//typedef????????????????????????????¶????????????§?????????\n#pragma region TYPE_DEF\ntypedef long long ll;\ntypedef pair<int, int> pii; typedef pair<string, string> pss; typedef pair<int, string>pis;\ntypedef vector<string> vs; typedef vector<int> vi;\n#pragma endregion\n//??????????????°(???????????????????????§??????)\n#pragma region CONST_VAL\n#define PI (2*acos(0.0))\n#define EPS (1e-10)\n#define MOD (ll)(1e9 + 7)\n#define INF (ll)(1e9)\n#pragma endregion\n\n//?????????????????????\n#pragma region Geometry\nclass Point {//????????????????????????\npublic:\n\tdouble x, y;\n\tPoint(double x = 0, double y = 0) : x(x), y(y) {}\n\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a) { return Point(x * a, y * a); }\n\tdouble operator * (Point p) { return dot(p); }\n\tPoint operator / (double a) { return Point(x / a, y / a); }\n\n\tdouble abs() { return sqrt(norm()); }\n\tdouble norm() { return x*x + y*y; }\n\n\tbool operator < (const Point &p) const { return  x != p.x ? x < p.x : y < p.y; }\n\tbool operator == (const Point &p) const { return  fabs(x - p.x) < EPS && fabs(y - p.y) < EPS; }\n\t//???????????????\n\tdouble dot(Point p) { return x * p.x + y * p.y; }\n\tdouble cross(Point p) { return x * p.y - y * p.x; }\n\n\n};\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0) :c(c), r(r) {}\n};\nstruct Segment {//??????\n\tPoint p1, p2;\n};\ntypedef Point Vector;\ntypedef Segment Line;//??´???\ntypedef vector<Point> Polygon; //????§???¢?????????\n\n//?????????????¨????\ndouble v_norm(Point p) { return p.x * p.x + p.y * p.y; }\ndouble abs(Point p) { return sqrt(v_norm(p)); }\ndouble dot(Point a, Point b) { return a.x * b.x + a.y * b.y; } //??????\ndouble cross(Point a, Point b) { return a.x * b.y - a.y * b.x; }//??????\n\n//??´????????????\nbool isOrthogonal(Vector a, Vector b) { return equals(a*b, 0.0); }\nbool isParallel(Vector a, Vector b) { return equals(cross(a, b), 0.0); }\n\n//??????s???????????????p????°???±\nPoint projection(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(( p - s.p1 ), base) / v_norm(base);\n\treturn s.p1 + base*r;\n}\n//??????s???????????????p???????°?\nPoint reflection(Segment s, Point p) { return p + ( projection(s, p) - p ) * 2; }\n\n//3??????????????¢????????????\n//p1-p0???????????¨?????? p2-p0 ???2????????????????????????\nstatic const int COUNTER_CLOCKWISE = 1;//???????¨???????\nstatic const int CLOCKWISE = -1;//????¨???????\nstatic const int ONLINE_BACK = 2;//????????´?????¶p2,p0,p1??????\nstatic const int ONLINE_FRONT = -2;//????????´??????p0,p1,p2??????\nstatic const int ON_SEGMENT = 0;//p2???p0,p1??????????????´???\nint ccw(Point p0, Point p1, Point p2) {//????¨????????????¢??°\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS) return CLOCKWISE;\n\tif (dot(a, b) < -EPS) return ONLINE_BACK;\n\tif (a.norm() < b.norm()) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\n//??????p1p2??¨p3p4???????????????\nbool intersect(Point p1, Point p2, Point p3, Point p4) {return ( (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0) && (ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0));}\nbool intersect(Segment s1, Segment s2) {return intersect(s1.p1 , s1.p2, s2.p1, s2.p2);}\n\n//?????¢ Segment Line Point\ndouble getDistance(Point a, Point b) { return abs( a - b ); }\ndouble getDistanceLP(Line l, Point p) {return abs(cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1));}\ndouble getDistanceSP(Segment s, Point p) {\n\tdbg(abs(p - s.p1));\n\tdbg(abs(p - s.p2));\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0) return abs(p - s.p1);\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0) return abs(p - s.p2);\n\treturn getDistanceLP(s, p);\n}\ndouble getDistance(Segment s1, Segment s2) {\n\tif (intersect(s1, s2)) return 0.0;\n\tdbg2(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2));\t\n\tdbg2(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2));\n\treturn min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2))\n\t         , min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\n//2???????????????\nPoint getCrossPoint(Segment s1, Segment s2) {\n\tVector base = s2.p2 - s2.p1;\n\tdouble d1 = abs(cross(base , s1.p1 - s2.p1));\n\tdouble d2 = abs(cross(base , s1.p2 - s2.p1));\n\tdouble t = d1 / ( d1 + d2 );\n\treturn s1.p1 + (s1.p2 - s1.p1 ) * t;\n}\n\n//??´?????¨????????????????????????\npair<Point, Point> getCrossPoints(Circle c, Line l) {\n\t//assert(intersect(c, i)); ?????????????????´????????????????????????\n\tVector pr = projection(l , c.c);\n\tVector e = ( l.p2 - l.p1 ) / abs(l.p2 - l.p1);\n\tdouble base = sqrt(c.r * c.r - (pr - c.c).norm());\n\treturn mp(pr + e * base, pr - e * base);\n}\n\n//????????????????????????\nstatic const int IN_POLYGON = 2;//????§???¢????????¨\nstatic const int OUT_POLYGON = 1;//????§???¢????????¨\nstatic const int ON_POLYGON = 0;//????§???¢????????????\nint contains(Polygon g, Point p) {\n\tint n = g.size();\n\tbool x = false;\n\trep(i, n) {\n\t\tPoint a = g[i] - p, b = g[( i + 1 ) % n] - p;\n\t\tif (abs(cross(a, b)) < EPS && dot(a, b) < EPS) return OUT_POLYGON;\n\t\tif (a.y > b.y) swap(a, b);\n\t\tif (a.y < EPS && EPS < b.y && cross(a, b)) x = !x;\n\t}\n\treturn ( x ? IN_POLYGON : ON_POLYGON );\n}\n\n//?????? CGL_4_A : Convex Hull; \n//containsPointOnline ?????????????????????????????????????????????\n//???????§???¢???????????§????????????????????????????????§???????????????????????????????????§???\n//???????¨???¨?????§???????????§?¨?????????????\nPolygon ConvexHull(Polygon s, bool containsPointOnline = false) {\n\tPolygon u, l;\n\tif (s.size() < 3) return s;\n\tsort(s.begin(), s.end());\n\tu.push_back(s[0]); \n\tu.push_back(s[1]);\n\tl.push_back(s[s.size() - 1]);\n\tl.push_back(s[s.size() - 2]);\n\tauto conditionContaining = [](int ccw, bool containsPointOnline)->bool{\n\t\tif (containsPointOnline) return ccw == COUNTER_CLOCKWISE;\n\t\telse return ccw != CLOCKWISE;\n\t};\n\tfor (int i = 2; i < s.size(); i++) {//?????´?????°???\n\t\tfor (int n = u.size(); ( n >= 2 ) && conditionContaining( ccw(u[n - 2], u[n - 1], s[i]),containsPointOnline); n--) {\n\t\t\tu.pop_back();\n\t\t}\n\t\tu.push_back(s[i]);\n\t}\n\tfor (int i = s.size() - 3; i >= 0; i--) {//?????´?????°???\n\t\tfor (int n = l.size(); n >= 2 && conditionContaining( ccw(l[n - 2], l[n - 1], s[i]),containsPointOnline); n--)l.pop_back();\n\t\tl.push_back(s[i]);\n\t}\n\treverse(l.begin(), l.end());\n\tfor (int i = u.size() - 2; i >= 1; i--) l.push_back(u[i]);\n\tdouble tmpMax = l[0].y;\n\tint rotIndex = 0;\n\tREP(i,1,l.size()) {//?????¶??????????????????????????????????????´??????\n\t\tif (l[i].y < tmpMax) {\n\t\t\trotIndex = i;\n\t\t\ttmpMax = l[i].y;\n\t\t}\n\t}\n\trotate(l.begin(), l.begin() + rotIndex, l.end());\n\treturn l;\n}\n#pragma endregion \n\n\n//??????????£?????????°???\n//https://www23.atwiki.jp/akitaicpc/pages/65.html\n\nint main() {\n\tint q; put q;\n\trep(i, q) {\n\t\tPoint p[4];\n\t\trep(j, 4) {\n\t\t\tput p[j].x >> p[j].y;\n\t\t}\n\t\tSegment s0, s1;\n\t\ts0.p1 = p[0];\n\t\ts0.p2 = p[1];\n\t\ts1.p1 = p[2];\n\t\ts1.p2 = p[3];\n\t\tdouble dist = getDistance(s0,s1);\n\t\tcout  << setprecision(40) << dist << endl;\n\t}\n\nEND:\n\treturn 0;\n}\n\n\t//int n; put n;\n\t//Polygon p;\n\t//rep(i, n) {\n\t//\tdouble x, y; put x >> y;\n\t//\tp.push_back(Point(x, y));\n\t//}\n\t//Polygon k = ConvexHull(p,true);\n\t//cout << k.size() << endl;\n\t//rep(i, k.size()) {\n\t//\tcout << k[i].x << \" \" << k[i].y << endl;\n\t//}\t\n\n\t/*double xp1, yp1, xp2, yp2; put xp1 >> yp1 >> xp2 >> yp2;\n\tSegment s;\n\ts.p1 = Point(xp1, yp1);\n\ts.p2 = Point(xp2, yp2);\n\n\tint n; put n;\n\trep(i, n) {\n\t\tPoint p;\n\t\tput p.x >> p.y;\n\t\tPoint prj =reflection(s, p);\n\t\tcout << setprecision(13) << prj.x << \" \" << prj.y << endl;\n\t}*/\n\n\t//ll ans = 0;\n\t//int n; put n;\n\t//vi a;\n\t//set<Range> rl;\n\t//rep(i, n) {\n\t//\tint k; put k;\n\t//\ta.push_back(k);\n\t//}\n\t//reverse(a.begin(), a.end());\n\t//int miner = a[0];\n\t//ans += miner;\n\t//REP(i,1,n) {\n\t//\tif (a[i] < miner) {\n\t//\t\tminer = a[i];\n\t//\t\tans += miner * ( i + 1 );\n\t//\t}\n\t//\telse {\n\t//\t\tans += miner *(i)+a[i];\n\t//\t}\n\t//}\n\n\t////???????????¬??????????????\\???????????????\n\t//auto getI = [&]()->auto { int tmp; put tmp; return tmp; };\n\t//auto getLL = [&]()->auto { ll tmp; put tmp; return tmp; };\n\t//auto getS = [&]()->auto { string tmp; put tmp; return tmp; };\n//\n//int n, a, b; put n >> a >> b;\n//\tvi t;\n//\trep(i, n) {\n//\t\tt.push_back(get());\n//\t}\n//\tint count = 0;\n//\trep(i, n) {\n//\t\tif (t[i] < a || b <= t[i])count++;\n//\t}\n//\tputans(count);\n\n//\n//\tset<string> list;\n//\tint ans = 0;\n//\tint n; put n;\n//\tint k; put k;\n//\tint numAlphabet[26];\n//\tfill(all(numAlphabet), 0);\n//\trep(i, n) {\n//\t\tstring s; put s;\n//\t\tif (exist(list, s))continue;\n//\t\tlist.insert(s);\n//\t\tnumAlphabet[s[0] - 'A']++;\n//\t}\n//\tsort(all(numAlphabet),greater<int>());\n//\twhile (true) {\n//\t\trep(i, k) {\n//\t\t\tif (numAlphabet[i] == 0) goto END;\n//\t\t\telse numAlphabet[i]--;\n//\t\t}\n//\t\tsort(all(numAlphabet), greater<int>());\n//\t\tans++;\n//\t}\n//END:\n//\tputans(ans);\n\n\n\t//int t; put t;\n\t//rep(i, t) {\n\t//\tint n, d; put n >> d;\n\t//\tif (n == 1) {\n\t//\t\tputans(d);\n\t//\t\tcontinue;\n\t//\t}\n\t//\tputans(n % 2 != 0 ? ( n - 1 ) * 127 + d : ( n - 1 ) * 127 + ( 127 ^ d ));\n\t//}\n\n\n//\n//int n; put n;\n//string s1, s2;\n//string r;\n//string patan1[4] = { \".\",\"#\",\".\",\"#\" };\n//string patan2[4] = { \".\",\".\",\"#\",\"#\" };\n//bool front = true;\n//rep(j, 420 / 4) {\n//\tif (front) {\n//\t\trep(i, 4) {\n//\t\t\tcout << s1 + patan1[i] + \"\\n\" << s2 + patan2[i] << endl;\n//\t\t\tcin >> r;\n//\t\t\tif (r == \"T\") {\n//\t\t\t\ts1 += patan1[i];\n//\t\t\t\ts2 += patan2[i];\n//\t\t\t\tbreak;\n//\t\t\t}\n//\t\t\tif (r == \"F\" && i == 3) {\n//\t\t\t\tfront = !front;\n//\t\t\t}\n//\t\t\tif (r == \"end\")goto END;\n//\t\t}\n//\t}\n//\telse {\n//\t\trep(i, 4) {\n//\t\t\tcout << patan1[i] + s1 + \"\\n\" << patan2[i] + s2 << endl;\n//\t\t\tcin >> r;\n//\t\t\tif (r == \"T\") {\n//\t\t\t\ts1 = patan1[i] + s1;\n//\t\t\t\ts2 = patan2[i] + s2;\n//\t\t\t\tbreak;\n//\t\t\t}\n//\t\t\tif (r == \"F\" && i == 3) {\n//\t\t\t\tfront = !front;\n//\t\t\t}\n//\t\t\tif (r == \"end\")goto END;\n//\t\t}\n//\t}\n//\n//}\n//END:\n//cout << endl;\n\n\n\n\n\t//bool filled[1000][1000];\n\t//fill(*filled, *filled + 1000 * 1000, false);\n\t//int vx[4] = { 1,0,-1,0 };\n\t//int vy[4] = { 0,1,0,-1 };\n\t//Polygon sheep;\n\t//Polygon convex_sheep;\n\t//ll num = 0;\n\t//int h, w; put h >> w;\n\t//rep(i, h) {\n\t//\tstring s; put s;\n\t//\trep(j, s.size()) {\n\t//\t\tif (s[j] == 'X') {\n\t//\t\t\tif (i == 0 || j == 0 || i == h-1 || j == w-1) {\n\t//\t\t\t\tputans(-1);\n\t//\t\t\t\tgoto END;\n\t//\t\t\t}\n\t//\t\t\trep(k, 4) {\n\t//\t\t\t\tif (!filled[i + vx[k]][j + vy[k]]) {\n\t//\t\t\t\t\tsheep.push_back(Point(i + vx[k],j + vy[k]));\n\t//\t\t\t\t\tfilled[i + vx[k]][j + vy[k]] = true;\n\t//\t\t\t\t}\n\t//\t\t\t}\n\t//\t\t}\n\t//\t}\n\t//}\n\t//convex_sheep = ConvexHull(sheep);\n\n\t//rep(i, convex_sheep.size()) {\n\t//\tPoint s = convex_sheep[i % convex_sheep.size()];\n\t//\tPoint g = convex_sheep[(i + 1) % convex_sheep.size()];\n\t//\tll mandist = max(abs(s.x - g.x),abs(s.y - g.y));\n\t//\tdbg(mandist);\n\t//\tnum += mandist;\n\t//} \n\t//putans(num);"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <algorithm>\n#include <iomanip>\nusing namespace std;\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nclass Point {\n    public:\n    double x, y;\n\n    Point(double x = 0, double y = 0): x(x), y(y) {}\n\n    Point operator + (Point p) { return Point(x + p.x, y + p.y); }\n    Point operator - (Point p) { return Point(x - p.x, y - p.y); }\n    Point operator * (double a) { return Point(x * a, y * a); }\n    Point operator / (double a) { return Point(x / a, y / a); }\n\n    double norm() { return x * x + y * y; }\n    double abs() { return sqrt(norm()); }\n\n    bool operator < (const Point &p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point &p) const {\n        return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n    }\n};\n\nstruct Segment {\n    Point p1, p2;\n};\n\ntypedef Point Vector;\ntypedef Segment Line;\n\ndouble dot(Vector a, Vector b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n    return a.x * b.y - a.y * b.x; \n}\n\nbool isOrthogonal(Vector a, Vector b) {\n    return equals(dot(a, b), 0.0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n    return isOrthogonal(a1 - a2, b1 - b2);\n}\n\nbool isOrthogonal(Segment s1, Segment s2) {\n    return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nbool isParallel(Vector a, Vector b) {\n    return equals(cross(a, b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n    return isParallel(a1 - a2, b1 - b2);\n}\n\nbool isParallel(Segment s1, Segment s2) {\n    return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nPoint project(Segment s, Point p) {\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / base.norm();\n    return s.p1 + base * r;\n}\n\nPoint reflect(Segment s, Point p) {\n    return p + (project(s, p) - p) * 2.0;\n}\n\ndouble getDistance(Point a, Point b) {\n    return (a - b).abs();\n}\n\ndouble getDistanceLP(Line l, Point p) {\n    return fabs(cross(l.p2 - l.p1, p - l.p1)) / (l.p2 - l.p1).abs();\n}\ndouble getDistanceSP(Segment s, Point p) {\n    if ( dot(s.p2 - s.p1, p - s.p1) < 0.0) return (p - s.p1).abs();\n    if ( dot(s.p1 - s.p2, p - s.p2) < 0.0) return (p - s.p2).abs();\n    return getDistanceLP(s, p);\n}\n\nint ccw(Point p0, Point p1, Point p2) {\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if ( cross(a, b) > EPS ) return COUNTER_CLOCKWISE;\n    if ( cross(a, b) < -EPS ) return CLOCKWISE;\n    if ( dot(a, b) < -EPS ) return ONLINE_BACK;\n    if ( a.norm() < b.norm() ) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n    return ( ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n             ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0 );\n}\n\nbool intersect(Segment s1, Segment s2) {\n    return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\ndouble getDistance(Segment s1, Segment s2) {\n    if ( intersect(s1, s2) ) return 0.0;\n    return min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n               min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\nint main()\n{\n    int q;\n    double x1, x2, x3, x4, y1, y2, y3, y4;\n    Segment s1, s2;\n    cin >> q;\n    for (int i = 0; i != q; ++i)\n    {\n        cin >> x1 >> y1 >> x2 >> y2 >> x3 >> y3 >> x4 >> y4;\n        s1.p1 = Point(x1, y1);\n        s1.p2 = Point(x2, y2);\n        s2.p1 = Point(x3, y3);\n        s2.p2 = Point(x4, y4);\n        cout << fixed << setprecision(10) << getDistance(s1, s2) << endl;\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\nusing namespace std;\n\n//?????????\n#pragma region MACRO \n#define putans(x)  std::cerr << \"answer: \" ; cout << (x) << endl\n#define dputans(x) std::cerr << \"answer: \"; cout << setprecision(13) << (double)(x) << endl\n#define REP(i,a,n) for(int i=(a); i<(int)(n); i++)\n#define RREP(i,a,n) for(int i=(int)(n-1); i>= a; i--)\n#define rep(i,n) REP(i,0,n)\n#define rrep(i,n) RREP(i,0,n)\n#define all(a) begin((a)),end((a))\n#define mp make_pair\n#define exist(container, n) ((container).find((n)) != (container).end())\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n#ifdef _DEBUG //???????????????????????????????????????????????????\nstd::ifstream ifs(\"data.txt\");\n#define put ifs >>\n#else //?????£????????????????????§?????????????????????\n#define put cin >>\n#endif\n#pragma endregion\n\n//???????????°??????????????´\n#pragma region CODING_SUPPORT\n#ifdef _DEBUG\n#define dbg(var0) { std::cerr << ( #var0 ) << \"=\" << ( var0 ) << endl; }\n#define dbg2(var0, var1) { std::cerr << ( #var0 ) << \"=\" << ( var0 ) << \", \"; dbg(var1); }\n#define dbg3(var0, var1, var2) { std::cerr << ( #var0 ) << \"=\" << ( var0 ) << \", \"; dbg2(var1, var2); }\n#define dbgArray(a,n) {std::cerr << (#a) << \"=\";  rep(i,n){std::cerr <<(a[i])<<\",\";} cerr<<endl;} \n#else\n#define dbg1 {}\n#define dbg2 {}\n#define dbg3 {}\n#define dbgArray {}\n#endif \n#pragma endregion \n//typedef????????????????????????????¶????????????§?????????\n#pragma region TYPE_DEF\ntypedef long long ll;\ntypedef pair<int, int> pii; typedef pair<string, string> pss; typedef pair<int, string>pis;\ntypedef vector<string> vs; typedef vector<int> vi;\n#pragma endregion\n//??????????????°(???????????????????????§??????)\n#pragma region CONST_VAL\n#define PI (2*acos(0.0))\n#define EPS (1e-10)\n#define MOD (ll)(1e9 + 7)\n#define INF (ll)(1e9)\n#pragma endregion\n\n//?????????????????????\n#pragma region Geometry\nclass Point {//????????????????????????\npublic:\n\tdouble x, y;\n\tPoint(double x = 0, double y = 0) : x(x), y(y) {}\n\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a) { return Point(x * a, y * a); }\n\tdouble operator * (Point p) { return dot(p); }\n\tPoint operator / (double a) { return Point(x / a, y / a); }\n\n\tdouble abs() { return sqrt(norm()); }\n\tdouble norm() { return x*x + y*y; }\n\n\tbool operator < (const Point &p) const { return  x != p.x ? x < p.x : y < p.y; }\n\tbool operator == (const Point &p) const { return  fabs(x - p.x) < EPS && fabs(y - p.y) < EPS; }\n\t//???????????????\n\tdouble dot(Point p) { return x * p.x + y * p.y; }\n\tdouble cross(Point p) { return x * p.y - y * p.x; }\n\n\n};\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0) :c(c), r(r) {}\n};\nstruct Segment {//??????\n\tPoint p1, p2;\n};\ntypedef Point Vector;\ntypedef Segment Line;//??´???\ntypedef vector<Point> Polygon; //????§???¢?????????\n\n//?????????????¨????\ndouble v_norm(Point p) { return p.x * p.x + p.y * p.y; }\ndouble abs(Point p) { return sqrt(v_norm(p)); }\ndouble dot(Point a, Point b) { return a.x * b.x + a.y * b.y; } //??????\ndouble cross(Point a, Point b) { return a.x * b.y - a.y * b.x; }//??????\n\n//??´????????????\nbool isOrthogonal(Vector a, Vector b) { return equals(a*b, 0.0); }\nbool isParallel(Vector a, Vector b) { return equals(cross(a, b), 0.0); }\n\n//??????s???????????????p????°???±\nPoint projection(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(( p - s.p1 ), base) / v_norm(base);\n\treturn s.p1 + base*r;\n}\n//??????s???????????????p???????°?\nPoint reflection(Segment s, Point p) { return p + ( projection(s, p) - p ) * 2; }\n\n//3??????????????¢????????????\n//p1-p0???????????¨?????? p2-p0 ???2????????????????????????\nstatic const int COUNTER_CLOCKWISE = 1;//???????¨???????\nstatic const int CLOCKWISE = -1;//????¨???????\nstatic const int ONLINE_BACK = 2;//????????´?????¶p2,p0,p1??????\nstatic const int ONLINE_FRONT = -2;//????????´??????p0,p1,p2??????\nstatic const int ON_SEGMENT = 0;//p2???p0,p1??????????????´???\nint ccw(Point p0, Point p1, Point p2) {//????¨????????????¢??°\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS) return CLOCKWISE;\n\tif (dot(a, b) < -EPS) return ONLINE_BACK;\n\tif (a.norm() < b.norm()) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\n//??????p1p2??¨p3p4???????????????\nbool intersect(Point p1, Point p2, Point p3, Point p4) {return ( (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0) && (ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0));}\nbool intersect(Segment s1, Segment s2) {return intersect(s1.p1 , s1.p2, s2.p1, s2.p2);}\n\n//?????¢ Segment Line Point\ndouble getDistance(Point a, Point b) { return abs( a - b ); }\ndouble getDistanceLP(Line l, Point p) {return abs(cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1));}\ndouble getDistanceSP(Segment s, Point p) {\n\tdbg(abs(p-s.p1)); \n\tdbg(abs(p - s.p2));\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0) return abs(p - s.p1);\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0) return abs(p - s.p2);\n\treturn getDistanceLP(s, p);\n}\ndouble getDistance(Segment s1, Segment s2) {\n\tif (intersect(s1, s2)) return 0.0;\n\tdbg2(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2));\t\n\tdbg2(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2));\n\treturn min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2))\n\t         , min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\n//2???????????????\nPoint getCrossPoint(Segment s1, Segment s2) {\n\tVector base = s2.p2 - s2.p1;\n\tdouble d1 = abs(cross(base , s1.p1 - s2.p1));\n\tdouble d2 = abs(cross(base , s1.p2 - s2.p1));\n\tdouble t = d1 / ( d1 + d2 );\n\treturn s1.p1 + (s1.p2 - s1.p1 ) * t;\n}\n\n//??´?????¨????????????????????????\npair<Point, Point> getCrossPoints(Circle c, Line l) {\n\t//assert(intersect(c, i)); ?????????????????´????????????????????????\n\tVector pr = projection(l , c.c);\n\tVector e = ( l.p2 - l.p1 ) / abs(l.p2 - l.p1);\n\tdouble base = sqrt(c.r * c.r - (pr - c.c).norm());\n\treturn mp(pr + e * base, pr - e * base);\n}\n\n//????????????????????????\nstatic const int IN_POLYGON = 2;//????§???¢????????¨\nstatic const int OUT_POLYGON = 1;//????§???¢????????¨\nstatic const int ON_POLYGON = 0;//????§???¢????????????\nint contains(Polygon g, Point p) {\n\tint n = g.size();\n\tbool x = false;\n\trep(i, n) {\n\t\tPoint a = g[i] - p, b = g[( i + 1 ) % n] - p;\n\t\tif (abs(cross(a, b)) < EPS && dot(a, b) < EPS) return OUT_POLYGON;\n\t\tif (a.y > b.y) swap(a, b);\n\t\tif (a.y < EPS && EPS < b.y && cross(a, b)) x = !x;\n\t}\n\treturn ( x ? IN_POLYGON : ON_POLYGON );\n}\n\n//?????? CGL_4_A : Convex Hull; \n//containsPointOnline ?????????????????????????????????????????????\n//???????§???¢???????????§????????????????????????????????§???????????????????????????????????§???\n//???????¨???¨?????§???????????§?¨?????????????\nPolygon ConvexHull(Polygon s, bool containsPointOnline = false) {\n\tPolygon u, l;\n\tif (s.size() < 3) return s;\n\tsort(s.begin(), s.end());\n\tu.push_back(s[0]); \n\tu.push_back(s[1]);\n\tl.push_back(s[s.size() - 1]);\n\tl.push_back(s[s.size() - 2]);\n\tauto conditionContaining = [](int ccw, bool containsPointOnline)->bool{\n\t\tif (containsPointOnline) return ccw == COUNTER_CLOCKWISE;\n\t\telse return ccw != CLOCKWISE;\n\t};\n\tfor (int i = 2; i < s.size(); i++) {//?????´?????°???\n\t\tfor (int n = u.size(); ( n >= 2 ) && conditionContaining( ccw(u[n - 2], u[n - 1], s[i]),containsPointOnline); n--) {\n\t\t\tu.pop_back();\n\t\t}\n\t\tu.push_back(s[i]);\n\t}\n\tfor (int i = s.size() - 3; i >= 0; i--) {//?????´?????°???\n\t\tfor (int n = l.size(); n >= 2 && conditionContaining( ccw(l[n - 2], l[n - 1], s[i]),containsPointOnline); n--)l.pop_back();\n\t\tl.push_back(s[i]);\n\t}\n\treverse(l.begin(), l.end());\n\tfor (int i = u.size() - 2; i >= 1; i--) l.push_back(u[i]);\n\tdouble tmpMax = l[0].y;\n\tint rotIndex = 0;\n\tREP(i,1,l.size()) {//?????¶??????????????????????????????????????´??????\n\t\tif (l[i].y < tmpMax) {\n\t\t\trotIndex = i;\n\t\t\ttmpMax = l[i].y;\n\t\t}\n\t}\n\trotate(l.begin(), l.begin() + rotIndex, l.end());\n\treturn l;\n}\n#pragma endregion \n\n\n//??????????£?????????°???\n//https://www23.atwiki.jp/akitaicpc/pages/65.html\n\nint main() {\n\tint q; put q;\n\trep(i, q) {\n\t\tPoint p[4];\n\t\trep(j, 4) {\n\t\t\tput p[j].x >> p[j].y;\n\t\t}\n\t\tSegment s0, s1;\n\t\ts0.p1 = p[0];\n\t\ts0.p2 = p[1];\n\t\ts1.p1 = p[2];\n\t\ts1.p2 = p[3];\n\t\tdouble dist = getDistance(s0,s1);\n\t\tcout  << setprecision(10) << dist << endl;\n\t}\n\nEND:\n\treturn 0;\n}\n\n\t//int n; put n;\n\t//Polygon p;\n\t//rep(i, n) {\n\t//\tdouble x, y; put x >> y;\n\t//\tp.push_back(Point(x, y));\n\t//}\n\t//Polygon k = ConvexHull(p,true);\n\t//cout << k.size() << endl;\n\t//rep(i, k.size()) {\n\t//\tcout << k[i].x << \" \" << k[i].y << endl;\n\t//}\t\n\n\t/*double xp1, yp1, xp2, yp2; put xp1 >> yp1 >> xp2 >> yp2;\n\tSegment s;\n\ts.p1 = Point(xp1, yp1);\n\ts.p2 = Point(xp2, yp2);\n\n\tint n; put n;\n\trep(i, n) {\n\t\tPoint p;\n\t\tput p.x >> p.y;\n\t\tPoint prj =reflection(s, p);\n\t\tcout << setprecision(13) << prj.x << \" \" << prj.y << endl;\n\t}*/\n\n\t//ll ans = 0;\n\t//int n; put n;\n\t//vi a;\n\t//set<Range> rl;\n\t//rep(i, n) {\n\t//\tint k; put k;\n\t//\ta.push_back(k);\n\t//}\n\t//reverse(a.begin(), a.end());\n\t//int miner = a[0];\n\t//ans += miner;\n\t//REP(i,1,n) {\n\t//\tif (a[i] < miner) {\n\t//\t\tminer = a[i];\n\t//\t\tans += miner * ( i + 1 );\n\t//\t}\n\t//\telse {\n\t//\t\tans += miner *(i)+a[i];\n\t//\t}\n\t//}\n\n\t////???????????¬??????????????\\???????????????\n\t//auto getI = [&]()->auto { int tmp; put tmp; return tmp; };\n\t//auto getLL = [&]()->auto { ll tmp; put tmp; return tmp; };\n\t//auto getS = [&]()->auto { string tmp; put tmp; return tmp; };\n//\n//int n, a, b; put n >> a >> b;\n//\tvi t;\n//\trep(i, n) {\n//\t\tt.push_back(get());\n//\t}\n//\tint count = 0;\n//\trep(i, n) {\n//\t\tif (t[i] < a || b <= t[i])count++;\n//\t}\n//\tputans(count);\n\n//\n//\tset<string> list;\n//\tint ans = 0;\n//\tint n; put n;\n//\tint k; put k;\n//\tint numAlphabet[26];\n//\tfill(all(numAlphabet), 0);\n//\trep(i, n) {\n//\t\tstring s; put s;\n//\t\tif (exist(list, s))continue;\n//\t\tlist.insert(s);\n//\t\tnumAlphabet[s[0] - 'A']++;\n//\t}\n//\tsort(all(numAlphabet),greater<int>());\n//\twhile (true) {\n//\t\trep(i, k) {\n//\t\t\tif (numAlphabet[i] == 0) goto END;\n//\t\t\telse numAlphabet[i]--;\n//\t\t}\n//\t\tsort(all(numAlphabet), greater<int>());\n//\t\tans++;\n//\t}\n//END:\n//\tputans(ans);\n\n\n\t//int t; put t;\n\t//rep(i, t) {\n\t//\tint n, d; put n >> d;\n\t//\tif (n == 1) {\n\t//\t\tputans(d);\n\t//\t\tcontinue;\n\t//\t}\n\t//\tputans(n % 2 != 0 ? ( n - 1 ) * 127 + d : ( n - 1 ) * 127 + ( 127 ^ d ));\n\t//}\n\n\n//\n//int n; put n;\n//string s1, s2;\n//string r;\n//string patan1[4] = { \".\",\"#\",\".\",\"#\" };\n//string patan2[4] = { \".\",\".\",\"#\",\"#\" };\n//bool front = true;\n//rep(j, 420 / 4) {\n//\tif (front) {\n//\t\trep(i, 4) {\n//\t\t\tcout << s1 + patan1[i] + \"\\n\" << s2 + patan2[i] << endl;\n//\t\t\tcin >> r;\n//\t\t\tif (r == \"T\") {\n//\t\t\t\ts1 += patan1[i];\n//\t\t\t\ts2 += patan2[i];\n//\t\t\t\tbreak;\n//\t\t\t}\n//\t\t\tif (r == \"F\" && i == 3) {\n//\t\t\t\tfront = !front;\n//\t\t\t}\n//\t\t\tif (r == \"end\")goto END;\n//\t\t}\n//\t}\n//\telse {\n//\t\trep(i, 4) {\n//\t\t\tcout << patan1[i] + s1 + \"\\n\" << patan2[i] + s2 << endl;\n//\t\t\tcin >> r;\n//\t\t\tif (r == \"T\") {\n//\t\t\t\ts1 = patan1[i] + s1;\n//\t\t\t\ts2 = patan2[i] + s2;\n//\t\t\t\tbreak;\n//\t\t\t}\n//\t\t\tif (r == \"F\" && i == 3) {\n//\t\t\t\tfront = !front;\n//\t\t\t}\n//\t\t\tif (r == \"end\")goto END;\n//\t\t}\n//\t}\n//\n//}\n//END:\n//cout << endl;\n\n\n\n\n\t//bool filled[1000][1000];\n\t//fill(*filled, *filled + 1000 * 1000, false);\n\t//int vx[4] = { 1,0,-1,0 };\n\t//int vy[4] = { 0,1,0,-1 };\n\t//Polygon sheep;\n\t//Polygon convex_sheep;\n\t//ll num = 0;\n\t//int h, w; put h >> w;\n\t//rep(i, h) {\n\t//\tstring s; put s;\n\t//\trep(j, s.size()) {\n\t//\t\tif (s[j] == 'X') {\n\t//\t\t\tif (i == 0 || j == 0 || i == h-1 || j == w-1) {\n\t//\t\t\t\tputans(-1);\n\t//\t\t\t\tgoto END;\n\t//\t\t\t}\n\t//\t\t\trep(k, 4) {\n\t//\t\t\t\tif (!filled[i + vx[k]][j + vy[k]]) {\n\t//\t\t\t\t\tsheep.push_back(Point(i + vx[k],j + vy[k]));\n\t//\t\t\t\t\tfilled[i + vx[k]][j + vy[k]] = true;\n\t//\t\t\t\t}\n\t//\t\t\t}\n\t//\t\t}\n\t//\t}\n\t//}\n\t//convex_sheep = ConvexHull(sheep);\n\n\t//rep(i, convex_sheep.size()) {\n\t//\tPoint s = convex_sheep[i % convex_sheep.size()];\n\t//\tPoint g = convex_sheep[(i + 1) % convex_sheep.size()];\n\t//\tll mandist = max(abs(s.x - g.x),abs(s.y - g.y));\n\t//\tdbg(mandist);\n\t//\tnum += mandist;\n\t//} \n\t//putans(num);"
  },
  {
    "language": "C++",
    "code": "//Distance\n//#include<bits/stdc++.h>\n//#pragma GCC optimize(3,\"Ofast\",\"inline\")\n#include<iostream>\n#include<string>\n#include<algorithm>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<vector>\n//#include<random>\n#include<cstdlib>\n#include<ctime>\n#include<fstream>\n#include<map>\n#include<stack>\n#include<queue>\n#define FAST ios::sync_with_stdio(false)\n#define DEV_RND ((int)rand()*RAND_MAX+rand())\n#define RND(L,R) (DEV_RND%((R)-(L)+1)+(L))\n//#define abs(a) ((a)>=0?(a):-(a))\n#define sz(x) ((int)(x).size())\n#define all(x) (x).begin(),(x).end()\n#define mem(a,b) memset(a,b,sizeof(a))\n#define max(a,b) ((a)>(b)?(a):(b))\n#define min(a,b) ((a)<(b)?(a):(b))\n#define rep(i,a,n) for(int i=a;i<n;++i)\n#define repn(i,a,n,t) for(int i=a;i<n;i+=t)\n#define per(i,n,a) for(int i=n-1;i>=a;--i)\n#define pern(i,n,a,t) for(int i=n-1;i>=a;i-=t)\n#define pb push_back\n#define mp make_pair\n#define fi first\n#define se second\n#define li inline\n#define re register\nusing namespace std;\n//typedef uniform_int_distribution<int> RNDI;\ntypedef pair<int,int> PII;\ntypedef vector<int> VI;\ntypedef double db;\ntypedef long long ll;\ntypedef long double ld;\nconst int maxn = 1e5+5;\nconst int maxm = 100000+5;\nconst int inf=0x3f3f3f3f;\nconst double eps = 1e-9;\nconst double pi=acos(-1);\nconst int mod = 1e9+7;\n//int dir[4][2]={{-1,0},{1,0},{0,-1},{0,1}};\n//li int f(int x){return x==par[x]?par[x]:par[x]=f(par[x]);}\n//mt19937 eng(time(0));\nli ll lowbit(ll x){return x&(-x);}\nll gcd(ll a,ll b){return b?gcd(b,a%b):a;}\n//li int RND(int L,int R){RNDI rnd(L,R);return rnd(eng);}\nvoid ex_gcd(ll a,ll b,ll &d,ll &x,ll &y){if(!b){d=a,x=1,y=0;}else{ex_gcd(b,a%b,d,y,x);y-=x*(a/b);}}//x=(x%(b/d)+(b/d))%(b/d);\nli ll qpow(ll a,ll b,ll MOD=mod){ll res=1;a%=MOD;while(b>0){if(b&1)res=res*a%MOD;a=a*a%MOD;b>>=1;}return res;}\nli ll qmul(ll a,ll b,ll MOD=mod){return (a*b-(ll)((long double)a/MOD*b)*MOD+MOD)%MOD;}\nli ll Qpow(ll a,ll b,ll MOD){ll res=1;while(b>0){if(b&1) res=qmul(res,a,MOD);a=qmul(a,a,MOD);b>>=1;}return res;}\nli ll inv(ll x,ll p){return qpow(x,p-2,p);}\nli ll Jos(ll n,ll k,ll s=1){ll res=0;rep(i,1,n+1) res=(res+k)%i;return (res+s)%n;}\nli void debug(){ofstream fout(\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\in.txt\");fout.close();}\nnamespace IO\n{\n\tli int read()\n\t{\n\t\tint x=0,sign=1;char c=getchar();\n\t\twhile(c>'9'||c<'0') {if(c=='-') sign=-1;c=getchar();}\n\t\twhile('0'<=c&&c<='9') x=x*10+c-'0',c=getchar();\n\t\treturn x*sign;\n\t}\n\ttemplate<typename T>\n\tli void write(T x,char t='\\n')\n\t{\n\t\tif(x<0){x=-x;putchar('-');};\n\t\tstatic int sta[25];int top=0;\n\t\tdo{sta[top++]=x%10,x/=10;}while(x);\n\t\twhile(top) putchar(sta[--top]+'0');\n\t\tputchar(t);\n\t}\n}\nusing namespace IO;\n/*-------------head-------------*/\nli int sign(db k){return k<-eps?-1:k>eps;}\nli int cmp(db a,db b){return sign(a-b);}\nli bool inmid(db l,db m,db r){return sign(l-m)*sign(r-m)<=0;}\n//点类 \nstruct P\n{\n\tdb x,y;\n\tP(){}\n\tP(db _x,db _y):x(_x),y(_y){}\n\tP operator + (const P& a) const {return (P){x+a.x,y+a.y};}\n\tP operator - (const P& a) const {return (P){x-a.x,y-a.y};}\n\tP operator * (db a) const {return (P){x*a,y*a};}\n\tP operator / (db a) const {return (P){x/a,y/a};}\n\tbool operator < (const P& a)const\n\t{return cmp(x,a.x)?cmp(x,a.x)==-1:cmp(y,a.y)==-1;}\n\tbool operator == (const P& a)const\n\t{return cmp(x,a.x)==0&&cmp(y,a.y)==0;}\n\tdb alpha(){return atan2(y,x);}\n\tdb abs2(){return x*x+y*y;}\n\tdb abs(){return sqrt(abs2());}\n\tdb disTo(P a){return (*this-a).abs();}\n\tdb dot(P a){return x*a.x+y*a.y;}\n\tdb det(P a){return x*a.y-y*a.x;}\n\tP unit(){return *this/abs();}\n\tP rot(db an){return (P){x*cos(an)-y*sin(an),x*sin(an)+y*cos(an)};}\n\tP rot90(){return (P){-y,x};}\n\tint quad() const {return sign(y)==1||(sign(y)==0&&sign(x)>=0);}\n\tvoid read(){db _x,_y;scanf(\"%lf%lf\",&_x,&_y);x=_x;y=_y;}\n\tvoid write(){printf(\"%.10f %.10f\\n\",x,y);}\n};\nbool angcmp(P a,P b){return a.quad()!=b.quad()?a.quad()<b.quad():sign(a.det(b))==-1;}\nbool inmid(P a,P m,P b){return inmid(a.x,m.x,b.x)&&inmid(a.y,m.y,b.y);}\ndb rad(P a,P b){return atan2l(a.det(b),a.dot(b));}\ndb cro(P q,P p1,P p2){return (p1.x-q.x)*(p2.y-q.y)-(p1.y-q.y)*(p2.x-q.x);}\nint croOp(P q,P p1,P p2){return sign(cro(q,p1,p2));}\n//线段相交\nbool intersect(db l1,db r1,db l2,db r2)\n{\n\tif(l1>r1)swap(l1,r1);if(l2>r2)swap(l2,r2);\n\treturn !(cmp(r1,l2)==-1||cmp(r2,l1)==-1);\n}\nbool isSS(P p1,P p2,P q1,P q2)\n{\n\treturn intersect(p1.x,p2.x,q1.x,q2.x)&&intersect(p1.y,p2.y,q1.y,q2.y)\n\t&&croOp(p1,p2,q1)*croOp(p1,p2,q2)<=0\n\t&&croOp(q1,q2,p1)*croOp(q1,q2,p2)<=0;\n}\nbool isSS_strict(P p1,P p2,P q1,P q2)\n{\n\treturn croOp(p1,p2,q1)*croOp(p1,p2,q2)<0\n\t&&croOp(q1,q2,p1)*croOp(q1,q2,p2)<0;\n}\n//投影 \nP proj(P p1,P p2,P q)\n{\n\tP dir=p2-p1;\n\treturn p1+dir*(dir.dot(q-p1)/dir.abs2());\n}\n//最近点 \ndb nearest(P p1,P p2,P q)\n{\n\tP h=proj(p1,p2,q);\n\treturn inmid(p1,h,p2)?q.disTo(h):min(p1.disTo(q),p2.disTo(q));\n}\n//线段距离 \ndb disSS(P p1,P p2,P q1,P q2)\n{\n\tif(isSS(p1,p2,q1,q2)) return 0;\n\treturn min(min(nearest(p1,p2,q1),nearest(p1,p2,q2)),min(nearest(q1,q2,p1),nearest(q1,q2,p2)));\n}\nP p1,p2,q1,q2;\nli void solve()\n{\n\tp1.read(),p2.read();\n\tq1.read(),q2.read();\n\tdb dis=disSS(p1,p2,q1,q2);\n\tprintf(\"%.10f\\n\",dis);\n\t//puts(\"\");\n}\nint main()\n{\n\t//srand(time(0));debug();\n\t//clock_t start_time=clock();\n\t//freopen(\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\in.txt\",\"r\",stdin);\n\tfor(int QwQ=read();QwQ;QwQ--) solve();\n\t//while(~scanf(\"%d\",&n)) solve();\n\t//cerr<<\"Time:\"<<clock()-start_time<<\"ms\\n\";\n\treturn 0;\n} \n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> Point;\ntypedef pair<Point, Point> Line;\nconst double EPS = 1e-12;\n\n// 内積 |a||b|cosθ\ndouble dot(Point a, Point b){\n\t// return a.real() * b.real() + a.imag() * b.imag();\n\treturn (conj(a) * b).real();\n}\n// 外積、符号付面積の２倍　|a||b|sinθ\ndouble cross(Point a, Point b){\n\t// return a.real() * b.imag() - a.imag() * b.real();\n\treturn (conj(a) * b).imag();\n}\n// 点と直線の距離\ndouble line_to_point_dis(Line l, Point p){\n    Point a = l.first, b = l.second, c = p;\n    return fabs(cross(c - a, b - a)) / fabs(abs(b - a));\n}\n// 線分と直線の距離\ndouble seg_to_point_dis(Line l, Point p){\n    Point a = l.first, b = l.second, c = p;\n    if(dot(b - a, c - a) < EPS) return abs(c - a);\n    if(dot(a - b, c - b) < EPS) return abs(c - b);\n    return line_to_point_dis(l, p);\n}\n// 線分と線分の距離\ndouble seg_to_seg_dis(Line a, Line b){\n    double res = seg_to_point_dis(a, b.first);\n    res = min(res, seg_to_point_dis(a, b.second));\n    res = min(res, seg_to_point_dis(b, a.first));\n    res = min(res, seg_to_point_dis(b, a.second));\n    return res;\n}\n\nint main(){\n    int q;\n    cin >> q;\n    for(int i = 0; i < q; i++){\n        double x, y;\n        Point p[4];\n        for(int j = 0; j < 4; j++){\n            cin >> x >> y;\n            p[j] = {x, y};\n        }\n        Line s1 = {p[0], p[1]};\n        Line s2 = {p[2], p[3]};\n        double len = seg_to_seg_dis(s1, s2);\n        printf(\"%.10f\\n\", len);\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nconst int dx[]={0,1,0,-1,1,-1,-1,1};\nconst int dy[]={-1,0,1,0,1,1,-1,-1};\nconst int INF = 1<<30;\nconst double EPS = 1e-15;\n#define PB push_back\n#define mk make_pair\n#define fi first\n#define se second\n#define ll long long\n#define reps(i,j,k) for(int i = (j); i < (k); i++)\n#define rep(i,j) reps(i,0,j)\n#define MOD 1000000007\ntypedef pair<int,int> Pii;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\nstruct Point{\n    double x,y;\n    Point(){}\n    Point(double _x,double _y){\n        x = _x;\n        y = _y;\n    }\n    Point operator + (Point p){\n        return Point(x+p.x,y+p.y);\n    }\n  \n    Point operator - (Point p){\n        return Point(x-p.x,y-p.y);\n    }\n  \n    Point operator * (double k){\n        return Point(k*x,k*y);\n    }\n     \n    Point operator * (Point p){\n        return Point(p.x*x-p.y*y,p.x*y+p.y*x);\n    }\n\n    Point operator / (double k){\n        return Point(x/k,y/k);\n    }\n    \n    Point operator = (Point p){\n        x = p.x;\n        y = p.y;\n        return *this;\n    }\n\n    bool operator<(const Point &p)const{\n        //return y!=p.y?y<p.y:x<p.x; //y-x\n        return x!=p.x?x<p.x:y<p.y; //x-y\n    }\n\n};\ndouble dot(Point p, Point q){\n    return p.x*q.x+p.y*q.y;\n}\n  \ndouble cross(Point p,Point q){\n    return p.x*q.y-q.x*p.y;\n}\n  \ndouble norm(Point p){\n    //?????????????????§?????????2???\n    return p.x*p.x+p.y*p.y;\n}\n  \ndouble pabs(Point p){\n    //?????????????????§??????\n    return sqrt(norm(p));\n}\nPoint UnitVector(Point a){\n    //??????????????????\n    return a/pabs(a);\n}\ntypedef vector<Point> Polygon;\nstruct Line : Polygon{\n    Line(){}\n    Line(Point p,Point q){\n        PB(p);\n        PB(q);  \n    }\n};\nstruct Circle{\n    Point p; //?????????\n    double r; //??????\n    Circle(){}\n    Circle(Point _p,double _r){\n        p = _p;\n        r = _r;\n    }\n};\nint ccw(Point a,Point b,Point c){\n    b = b-a;\n    c = c-a;\n    if(cross(b,c) > 0)return +1; //a???b ??§???????¨?????????????c ccw\n    if(cross(b,c) < 0)return -1; //a???b ??§????¨?????????????c ccw\n    if(dot(b,c) < 0)return +2; // c--a--b;\n    if(pabs(b)<pabs(c))return -2; //a--b--c\n    return 0; //a--c--b\n}\n\nPoint projection(Line l, Point p){\n    double t = dot(p-l[0],l[0]-l[1]) / norm(l[0]-l[1]);\n    return l[0] + (l[0]-l[1])*t;\n}\n\nPoint reflection(Line l, Point p){\n    return p + (projection(l,p)-p)*2.0; \n}\n\nbool intersectSS(Line l,Line m){\n    //l??¨m??????????????????????????????\n    return (ccw(l[0],l[1],m[0])*ccw(l[0],l[1],m[1])<EPS)&&\n            (ccw(m[0],m[1],l[0])*ccw(m[0],m[1],l[1])<EPS);\n}\n\nbool intersectSP(Line l, Point p){\n    //??????l??¨???p?????????????????????\n    return !ccw(l[0],l[1],p);\n}\n\ndouble distanceLP(Line l,Point p){\n    //??????l??¨???p????????¢\n    p = p - l[0];\n    l[1] = l[1] - l[0];\n    if(intersectSP(l,p))return 0.0;\n    return fabs(cross(p,l[1])/pabs(l[1]));\n}\n\ndouble distanceLL(Line l,Line m){\n    //??????l??¨??????m????????¢\n    if(intersectSS(l,m))return 0.0;\n    double d1,d2,d3,d4;\n    d1 = pabs(l[0]-m[0]);\n    d2 = pabs(l[1]-m[0]);\n    d3 = pabs(l[0]-m[1]);\n    d4 = pabs(l[1]-m[1]);\n    return min(min(d1,d2),min(d3,d4));\n}\n\nbool intersectLL(Line l,Line m){\n    return fabs(cross(l[1]-l[0],m[1]-m[0])) > EPS || //????????§??????\n            fabs(cross(l[1]-l[0],m[0]-l[0])) < EPS; //????????????\n}\n\nbool intersectCP(Circle c,Point p){\n    //???c??¨???p???????????????\n    //true->???c????????¨??????p????????¨????????????.\n    return fabs(pabs(p-c.p)-c.r)<EPS;\n}\n\nint intersectCL(Circle c,Line l,Point *p,Point *q){\n    if(norm(projection(l,c.p) - c.p) - c.r*c.r > EPS)return 0;\n    double d1 = pabs(c.p-l[0]);\n    double d2 = pabs(c.p-l[1]);\n    if(d1 < c.r + EPS && d2 < c.r + EPS)return 0;\n    if(d1 < c.r - EPS && d2 > c.r+EPS\n        || d1 > c.r + EPS && d2 < c.r -EPS)return 1;\n    Point h = projection(l,c.p);\n    if(dot(l[0] - h,l[1] - h) < 0)return 2;\n    return 0;\n}\n\nint intersectCC(Circle a,Circle b,Point *p,Point *q){\n    double dist = pabs(a.p-b.p);\n    if(dist < fabs(a.r-b.r) || dist > a.r+b.r){\n        //????????????????????´??????????????¨???\n        //????????????????????¨???????????¨???\n        *p = Point(1e15,1e15);\n        *q = Point(1e15,1e15);\n        return 0;\n    }\n    else if(fabs(dist-a.r-b.r) < EPS){\n        //??????1?????§????????£???????????¨???\n        Point way;\n        way = b.p-a.p;\n        *p = a.p+UnitVector(way)*a.r;\n        *q = *p;\n        return 1;\n    }\n    else{\n        //??????2?????§????????£???????????¨???\n        if(a.r < b.r){\n            swap(a.r,b.r);\n            swap(a.p,b.p);\n        }\n        double s = (a.r + b.r + dist) / 2.0 ;\n        double area = sqrt(s * (s - a.r) * (s - b.r) * (s - dist));\n        double h = 2.0 * area / dist;\n\n        Point  v = b.p-a.p;\n        v = UnitVector(v);\n        Point  m = a.p + (v*sqrt(a.r*a.r-h*h));\n        Point  n = v * Point(0.0,1.0);\n        \n        *p = m + (n * h);\n        *q = m - (n * h);\n        return 2;\n    }\n}\n\ndouble TriangleArea(Point a,Point b,Point c){\n    b = b - a;\n    c = c - a;\n    return cross(b,c)*0.5; //?????????????????¨??????????????§??¨???\n}\n \ndouble VertexArea(Polygon v){\n    double subArea = 0.0;\n    rep(i,v.size()-1){\n        subArea += TriangleArea(v[0],v[i],v[i+1]);\n    }\n    return subArea; //?????????????????¨??????????????§??¨???\n}\n\nPoint crosspoint(Line l,Line m){\n    //??????l??¨??????m?????????\n    if(intersectSS(l,m) == false)return Point(INF,INF);\n    return m[0]+(m[1]-m[0])*cross(l[1]-l[0],l[1]-m[0])/cross(l[1]-l[0],m[1]-m[0]);\n}\n \nPolygon ConvexHull(Polygon v){\n    //??????????????????\n    int n = v.size();\n    int k = 0;\n    sort(v.begin(),v.end());\n    Polygon e(2*n);\n    for(int i = 0; i < n; i++){\n        while(k >= 2 && ccw(e[k-2],e[k-1],v[i])<=0)k--;\n        e[k++] = v[i];\n    }\n    for(int i = n-2, t = k+1; i >= 0; i--){\n        while(k >= t && ccw(e[k-2],e[k-1],v[i])<=0)k--;\n        e[k++] = v[i];\n    }\n    e.resize(k-1);\n    return e;\n}\n\nbool IsInnerPointVertex(Polygon v , Point p){\n    Line l;\n    l.PB(p);\n    l.PB(Point(0,INF));\n    if(v.size() == 2){\n        return ccw(v[0],v[1],p)==2;\n    }\n    int cnt = 0;\n    rep(i,v.size()){\n        Line m;\n        m.PB(v[i]);m.PB(v[(i+1)%v.size()]);\n        if(intersectSS(l,m))cnt++;\n    }\n    return cnt%2;\n}\n\nint main(){\n    int Q;\n    scanf(\"%d\",&Q);\n    while(Q--){\n        Line l,m;\n        double x1,y1,x2,y2;\n        scanf(\"%lf%lf%lf%lf\",&x1,&y1,&x2,&y2);\n        l.PB(Point(x1,y1));l.PB(Point(x2,y2));\n        scanf(\"%lf%lf%lf%lf\",&x1,&y1,&x2,&y2);\n        m.PB(Point(x1,y1));m.PB(Point(x2,y2));\n        printf(\"%.10lf\\n\",distanceLL(l,m));\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <math.h>\n#include <iostream>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs(a - b) < EPS)\n\nclass Point{\npublic:\n    double x, y;\n\n    Point(double x_ = 0, double y_ = 0){\n        x = x_;\n        y = y_;\n    }\n\n    Point operator+ (Point p){\n        return Point(x + p.x, y + p.y);\n    };\n\n    Point operator- (Point p){\n        return Point(x - p.x, y - p.y);\n    };\n\n    Point operator* (double k){\n        return Point(x * k, y * k);\n    }\n\n    Point operator/ (double k){\n        return Point(x / k, y / k);\n    }\n\n    double norm(){\n        return x * x + y * y;\n    }\n\n    double abs(){\n        return sqrt(norm());\n    }\n\n    bool operator == (const Point &p) const{\n        return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n    }\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b){\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b){\n    return a.x * b.y - a.y * b.x;\n}\n\nbool isParallel(Vector a, Vector b){\n    return equals(cross(a, b), 0.0);\n}\n\nbool isOrthogonal(Vector a, Vector b){\n    return equals(dot(a, b), 0.0);\n}\n;\ndouble getCos(Vector a, Vector b){\n    return dot(a, b) / (a.abs() * b.abs());\n}\n\ndouble dist(Point p1, Point p2){\n    return sqrt(pow((p1.x - p2.x), 2) + pow((p1.y - p2.y), 2));\n}\n\nPoint projection(Point p1, Point p2, Point p0){\n    if(p1 == p0){\n        return p0;\n    }\n    if(p2 == p0){\n        return p0;\n    }\n    return p1 + (p2 - p1) / (p2 - p1).abs() * (p0 - p1).abs() * getCos(p2 - p1, p0 - p1);\n}\n\nPoint reflection(Point p1, Point p2, Point p0){\n    Point p = projection(p1, p2, p0);\n    return p0 + (p - p0) * 2;\n}\n\ndouble getDistanceSP(Point p1, Point p2, Point p0){\n    if(dot(p2 - p1, p0 - p1) < 0.0) return (p0 - p1).abs();\n    if(dot(p1 - p2, p0 - p2) < 0.0) return (p0 - p2).abs();\n    return (projection(p1, p2, p0) -  p0).abs();\n}\n\ndouble getDistance(Point p0, Point p1, Point p2, Point p3){\n    return min(min(getDistanceSP(p0, p1, p2),\n                getDistanceSP(p0, p1, p3)),\n                min(getDistanceSP(p2, p3, p0),\n                getDistanceSP(p2, p3, p1)));\n}\n\n\nint main(){\n    int q;\n    scanf(\"%d\", &q);\n\n    for(int i = 0; i < q; i++){\n        int xp0, yp0, xp1, yp1, xp2, yp2, xp3, yp3;\n        scanf(\"%d\", &xp0);\n        scanf(\"%d\", &yp0);\n        scanf(\"%d\", &xp1);\n        scanf(\"%d\", &yp1);\n        scanf(\"%d\", &xp2);\n        scanf(\"%d\", &yp2);\n        scanf(\"%d\", &xp3);\n        scanf(\"%d\", &yp3);\n\n        printf(\"%.10f\\n\", getDistance(Point(xp0, yp0), Point(xp1, yp1), Point(xp2, yp2), Point(xp3, yp3)));\n    }\n\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<stdio.h>\n#include<math.h>\n#include<algorithm>\n#include<string>\n#include<map>\n\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n\nclass Point {\npublic:\n\tdouble x, y;\n\n\n\tPoint(double x = 0, double y = 0) :x(x), y(y) {}\n\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a) { return Point(a * x, a * y); }\n\tPoint operator / (double a) { return Point(x / a, y / a); }\n\n\tdouble abs() { return sqrt(norm()); }\n\tdouble norm() { return x * x + y * y; };\n\n\tbool operator < (const Point& p)const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator ==(const Point& p)const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b) {\n\treturn a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n\treturn a.x * b.y - a.y * b.x;\n}\n\nbool isOrthogonal(Vector a, Vector b) {\n\treturn equals(dot(a, b), 0.0);\n}\n\nbool isParallel(Vector a, Vector b) {\n\treturn equals(cross(a, b), 0.0);\n}\nstruct Segment {\n\tPoint p1, p2;\n\tSegment() {}\n\tSegment(Point p1, Point p2) :p1(p1), p2(p2) {}\n};\ntypedef Segment  Line;\n\ndouble norm(Vector a) {\n\treturn a.x * a.x + a.y * a.y;\n}\ndouble abs(Vector a) {\n\treturn sqrt(norm(a));\n}\n\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / norm(base);\n\treturn s.p1 + base * r;\n}\n\nPoint reflect(Segment s, Point p) {\n\treturn p + (project(s, p) - p) * 2.0;\n}\ndouble getDistance(Point a, Point b) {\n\treturn abs(a - b);\n}\n\ndouble getDistanceLP(Line l, Point p) {\n\treturn fabs(cross(l.p2 - l.p1, p - l.p1)/abs(l.p2 - l.p1));\n}\n\ndouble getDistanceSP(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0)return abs(p - s.p1);\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0)return abs(p - s.p2);\n\treturn getDistanceLP(s, p);\n\n}\n\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (cross(a, b) > EPS)return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS) return CLOCKWISE;\n\tif (dot(a, b) < -EPS)return ONLINE_BACK;\n\tif (a.norm()<b.norm()) return ONLINE_FRONT;\n\n\treturn ON_SEGMENT;\n\n\n}\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n\treturn (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 && ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\nbool intersect(Segment s1, Segment s2) {\n\treturn intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\ndouble getDistance(Segment s1, Segment s2) {\n\tif (intersect(s1, s2))return 0.0;\n\treturn min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n\t\tmin(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\n//2B\n//int main() {\n//\tint q,x1,y1,x2,y2,x3,y3,x0,y0;\n//\tcin >> q;\n//\tfor (int i = 0; i < q; i++) {\n//\t\tcin >> x0>>y0>>x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n//\n//\t\tif (intersect(Point(x0, y0), Point(x1, y1), Point(x2, y2), Point(x3, y3))) {\n//\t\t\tcout << \"1\" << endl;\n//\t\t}\n//\t\telse {\n//\t\t\tcout << \"0\" << endl;\n//\t\t}\n//\t}\n//\treturn 0;\n//}\n\n//2D\nint main() {\n\tint q;\n\tdouble x1,y1,x2,y2,x3,y3,x0,y0;\n\tcin >> q;\n\tfor (int i = 0; i < q; i++) {\n\t\t\tcin >> x0>>y0>>x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n\t\t\tdouble ans = getDistance(Segment(Point(x0, y0), Point(x1, y1)), Segment(Point(x2, y2), Point(x3, y3)));\n\t\t\tprintf(\"%.8lf\\n\", ans);\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <iomanip>\n#include <algorithm>\n\nusing namespace std;\n\n#define EPS 1e-10\n#define LEFT_TOP POS(1000, 1000)\n#define NO_INTERSECT POS(-1234, -1234)\n#define PARALLEL POS(-1001, -1001)\n#define COLINE POS(1234, 1234)\nconst double PI = acos(-1.0);\n\ntypedef double T;\n\nclass POS {\npublic:\n    T x, y;\n    POS(const T& x = 0, const T& y = 0) : x(x), y(y) {}\n    POS(const POS& x) : x(x.x), y(x.y) {}\n\n    bool operator==(const POS& rhs) const {\n        return x == rhs.x && y == rhs.y;\n    }\n\n    POS& operator+=(const POS& rhs) {\n        x += rhs.x;\n        y += rhs.y;\n        return *this;\n    }\n\n    POS operator -() {\n        POS tmp(-x, -y);\n        return tmp;\n    }\n\n    double dist(const POS& rhs) const {\n        T tmp_x = x-rhs.x, tmp_y = y-rhs.y;\n        return sqrt(tmp_x*tmp_x+tmp_y*tmp_y);\n    }\n\n    friend ostream& operator<<(ostream& out, const POS& pos) {\n        out << pos.x << \" \" << pos.y;\n        return out;\n    }\n};\n\nPOS const operator+(const POS& lhs, const POS& rhs) {\n    return POS(lhs) += rhs;\n}\n\nPOS const operator-(const POS& lhs, const POS& rhs) {\n    POS tmp = rhs;\n    tmp = -tmp;\n    return POS(lhs) += (tmp);\n}\n\nbool cmp_convex(const POS& lhs, const POS& rhs) {\n    return (lhs.x < rhs.x) || ( (lhs.x == rhs.x)&&(lhs.y < rhs.y) );\n}\n\ninline T cross(const POS& o, const POS& a, const POS& b) {\n    double value = (a.x-o.x)*(b.y-o.y) - (a.y-o.y)*(b.x-o.x);\n    if (fabs(value) < EPS) return 0;\n    return value;\n}\n\nvoid convex_hull(POS* points, POS* need, int& n) {\n    sort(points, points+n, cmp_convex);\n    int index = 0;\n    for (int i = 0; i < n; ++i) {\n        while (index >= 2 && cross(need[index-2], need[index-1], points[i]) <= 0) index--;\n        need[index++] = points[i];\n    }\n    int half_point = index+1;\n    for (int i = n-2; i >= 0; --i) {\n        while (index >= half_point && cross(need[index-2], need[index-1], points[i]) <= 0) index--;\n        need[index++] = points[i];\n    } /* be careful that start point will appear in fisrt and last in need array */\n    n = index;\n}\n\nclass LINE {\npublic:\n    POS start, end, vec;\n    double angle;\n    LINE() {}\n    LINE(const T& st_x, const T& st_y, const T& ed_x, const T& ed_y) :\n        start(st_x, st_y), end(ed_x, ed_y), vec(end - start), angle(atan2(vec.x, vec.y)) {}\n\n    LINE(const POS& start, const POS& end) :\n        start(start), end(end), vec(end - start), angle(atan2(vec.x, vec.y)) {}\n\n    LINE(const POS& end) : /* start point is origin */\n        start(0, 0), end(end), vec(end), angle(atan2(vec.x, vec.y)) {}\n\n    LINE(const T a, const T b, const T c) : /* given line by ax+by+c = 0 */\n        start(0, 0), end(0, 0), vec(-b, a) {\n        if (a == 0) {\n            start.y = end.y = -c/b;\n            end.x = -b;\n        }\n        else if (b == 0) {\n            start.x = end.x = -c/a;\n            end.y = a;\n        }\n        else if (c == 0) {\n            end.x = -b; end.y = a;\n        }\n        else {\n            start.y = -c/b; end.x = -c/a;\n            vec.x = -c/a; vec.y = c/b;\n        }\n        angle = atan2(vec.x, vec.y);\n    }\n\n    LINE build_orthogonal(const POS& point) const {\n        T c = -(vec.x*point.x + vec.y*point.y);\n        return LINE(vec.x, vec.y, c);\n    }\n\n    T length2() const { /* square */\n        T x = start.x - end.x, y = start.y - end.y;\n        return x*x + y*y;\n    }\n\n    void modify(T x, T y) {\n        this->end.x += x;\n        this->end.y += y;\n        this->vec.x += x;\n        this->vec.y += y;\n    }\n\n    bool on_line(const POS& a) const {\n        if (vec.x == 0) {\n            if (start.x != a.x) return false;\n            return true;\n        }\n        if (vec.y == 0) {\n            if (start.y != a.y) return false;\n            return true;\n        }\n        return fabs(( (a.x-start.x)/vec.x*vec.y + start.y )- a.y) < EPS;\n    }\n\n    bool operator/(const LINE& rhs) const { /* to see if this line parallel to LINE rhs */\n        return (vec.x*rhs.vec.y == vec.y*rhs.vec.x);\n    }\n\n    bool operator==(const LINE& rhs) const { /* to see if they are same line */\n        return (*this/rhs) && (rhs.on_line(start));\n    }\n\n    POS intersect(const LINE& rhs) const {\n        if (*this==rhs) return COLINE; /* return co-line */\n        if (*this/rhs) return PARALLEL; /* return parallel */\n\n        double A1 = vec.y, B1 = -vec.x, C1 = end.x*start.y - start.x*end.y;\n        double A2 = rhs.vec.y, B2 = -rhs.vec.x, C2 = rhs.end.x*rhs.start.y - rhs.start.x*rhs.end.y;\n        return POS( (B2*C1-B1*C2)/(A2*B1-A1*B2), (A1*C2-A2*C1)/(A2*B1-A1*B2) ); /* sometimes has -0 */\n    }\n\n    double dist(const POS& a) const {\n        return fabs(vec.y*a.x - vec.x*a.y + vec.x*start.y - vec.y*start.x)/sqrt(vec.y*vec.y+vec.x*vec.x);\n    }\n\n    double dist(const LINE& rhs) const {\n        POS intersect_point = intersect(rhs);\n        if (intersect_point == PARALLEL) {\n            return dist(rhs.start);\n        }\n        return 0;\n    }\n\n    friend ostream& operator<<(ostream& out, const LINE& line) {\n        out << line.start << \"-->\" << line.end << \" vec: \" << line.vec;\n        return out;\n    }\n};\n\nclass LINESEG : public LINE {\npublic:\n    LINESEG() : LINE(POS(0, 0)) {}\n    LINESEG(const LINE& input) : LINE(input) {}\n    LINESEG(const POS& start, const POS& end) : LINE(start, end) {}\n\n    bool on_lineseg(const POS& a) const {\n        if (!on_line(a)) return false;\n        bool first, second;\n        if (vec.x >= 0) first = (a.x >= start.x)&&(a.x <= end.x);\n        else first = (a.x <= start.x)&&(a.x >= end.x);\n        if (vec.y >= 0) second = (a.y >= start.y)&&(a.y <= end.y);\n        else second = (a.y <= start.y)&&(a.y >= end.y);\n        return first&&second;\n    }\n\n    bool operator==(const LINESEG& rhs) const {\n        return ( (rhs.start == start && rhs.end == end) ||\n              (rhs.start == end && rhs.end == start) );\n    }\n\n    bool operator==(const LINE& rhs) const {\n        return this->LINE::operator==(rhs);\n    }\n\n    T dot(const LINESEG& rhs) const {\n        return vec.x*rhs.vec.x + vec.y*rhs.vec.y;\n    }\n\n    T cross(const LINESEG& rhs) const {\n        return vec.x*rhs.vec.y - vec.y*rhs.vec.x;\n    }\n\n    bool clockwise(const LINE& a) const { /* to see if LINE a is in b's clockwise way */\n        return cross(a) > 0;\n    }\n\n    double dist(const POS& a) const {\n        double ortho_dist = this->LINE::dist(a);\n        LINE ortho_line = build_orthogonal(a);\n        POS intersect_point = this->LINE::intersect(ortho_line);\n        if (on_lineseg(intersect_point)) return ortho_dist;\n        else return min(a.dist(this->start), a.dist(this->end));\n    }\n\n    double dist(const LINE& line) const {\n        POS intersect_point = this->LINE::intersect(line);\n        if (intersect_point == COLINE) return 0;\n        if (intersect_point == PARALLEL) return dist(line.start);\n        if (on_lineseg(intersect_point)) return 0;\n        return min(line.dist(start), line.dist(end));\n    }\n\n    double dist(const LINESEG& line) const {\n        return min( min(dist(line.start), dist(line.end)),\n                    min(line.dist(start), line.dist(end)) );\n    }\n\n    POS intersect(const LINESEG& rhs) const {\n        LINE a1b1(start, rhs.start);\n        LINE a1b2(start, rhs.end);\n        LINE b1a1(rhs.start, start);\n        LINE b1a2(rhs.start, end);\n\n        POS tmp(this->LINE::intersect(rhs));\n\n        if (tmp == COLINE) {\n            if ( (start==rhs.start) && (!rhs.on_lineseg(end)) && (!on_lineseg(rhs.end)) ) return start;\n            if ( (start==rhs.end) && (!rhs.on_lineseg(end)) && (!on_lineseg(rhs.start)) ) return start;\n            if ( (end==rhs.start) && (!rhs.on_lineseg(start)) && (!on_lineseg(rhs.end)) ) return end;\n            if ( (end==rhs.end) && (!rhs.on_lineseg(start)) && (!on_lineseg(rhs.start)) ) return end;\n            if (on_lineseg(rhs.start) || on_lineseg(rhs.end) || rhs.on_lineseg(start) || rhs.on_lineseg(end)) return COLINE;\n            return NO_INTERSECT;\n        }\n\n        bool intersected =  ( (cross(a1b1)*cross(a1b2)<0) && (rhs.cross(b1a1)*rhs.cross(b1a2)<0) );\n        if (!intersected) return NO_INTERSECT;\n        if (!on_lineseg(tmp) || !rhs.on_lineseg(tmp)) return NO_INTERSECT;\n        return tmp;\n    }\n};\n\nint main()\n{\n    int q;\n    cin >> q;\n    cout << fixed << setprecision(10);\n    while(q--){\n        int xp0, yp0, xp1, yp1, xp2, yp2, xp3, yp3;\n        cin >> xp0 >> yp0 >> xp1 >> yp1 >> xp2 >> yp2 >> xp3 >> yp3;\n        POS p0(xp0, yp0), p1(xp1, yp1), p2(xp2, yp2), p3(xp3, yp3);\n        LINESEG l0(p0, p1), l1(p2, p3);\n        cout << l0.dist(l1) << endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define eps (1e-10)\nusing namespace std;\nclass Point\n{\n\tpublic:\n\tdouble x,y;\n\tPoint(double _x=0,double _y=0):x(_x),y(_y){}\n\tPoint operator + (Point p){ return Point(x+p.x,y+p.y);} \n\tPoint operator - (Point p){ return Point(x-p.x,y-p.y);}\n\tPoint operator * (double a){return Point(a*x,a*y);} \n\tPoint operator / (double a){return Point(x/a,y/a);}\n\tdouble norm(){return x*x+y*y;}\n\tdouble ABS(){return sqrt(norm());} //俩点间的距离 \n};\nstruct Segment\n{\n\tPoint p1,p2;\t\n\tSegment(){}\n\tSegment(Point _p1,Point _p2):p1(_p1),p2(_p2){}\n};\n\ndouble dot(Point a,Point b)//求内积 就是向量a*b \n{\n\treturn a.x*b.x+a.y*b.y;\n}\n//外积的值为a与b向量构成的平行四边形面积的值 \ndouble cross(Point a,Point b)//求外积 \n{\n\treturn a.x*b.y-a.y*b.x;\n} \n\n\n//判断是否正交 向量内积：a*b=|a||b|*cos(Y) 当cos为0时正交(90,-90垂直) \n//a*b=a.x*b.x+a.y*b.y;\nbool solve1(Point a,Point b)//是否正交 \n{\n\tdouble f=a.x*b.x+a.y*b.y; \n\tif(fabs(f-0.0)<eps) return true;\n\telse return false;\n}\n//判断是否平行  向量外积：|a*b|=|a||b|sin(Y) 当sin为0时平行(180,0平行)\n//|a*b|=|a|*|b|*sin(Y) \nbool solve2(Point a,Point b)//是否平行 \n{\n\tdouble f=a.x*b.y-a.y*b.x;\n\tif(fabs(f-0.0)<eps) return true;\n\telse return false;\n}\n\n/*\n求垂足x：对于给定的三点p1,p2,p从点p向通过p1,p2的直线引一条垂线\nbase=p2-p1;\nhypo=p-p1;\n x=s.p1+base*(hypo*base/|base|^2); hypo*base 可以用向量内积求 \n*/\nPoint solve3(Segment s,Point p)//求投影点 \n{\n\tPoint base=s.p2-s.p1;\n\tdouble r=dot(p-s.p1,base)/base.norm();\n\treturn s.p1+base*r; \n}\n/*\n求投影点x：对于给定的三点p1,p2,p从点p向通过p1,p2的直线为对称轴与点p\n成线对称点为x \n通过求solve3的垂足延长一倍就可以求x \n*/\nPoint solve4(Segment s,Point p)//求映象 \n{\n\treturn p+(solve3(s,p)-p)*2.0;\n}\n\n/*\nPoint a=p1-p0;\nPoint b=p2-p0;\n1.外积大小cross(a,b)为正时,可确定b在a的逆时针方向\n\tsin(Y)（Y在0-180）所以是正数\n2. 外积大小cross(a,b)为负时,可确定b在a的顺时针方向\n3.（1,2）不符合 表示p2在直线p0p1上(注意是直线),cos(Y)大于90或小于-90\n\t度时为负，因此a与b的内积dot(a,b)负时，可确定p2位于线段p0p1后方\n\t即p2->p0->p1\n4.不是3时，有俩种p0->p1-p2或者p0->p2->p1如果b的大小大于a的大小，即为\n\tp0->p1->p2;\n5.不符合4，可以确定p2位于线段p0p1上 \n*/ \nint ccw(Point p0,Point p1,Point p2)//判断三个点相对位置 \n{\n\tPoint a=p1-p0;\n\tPoint b=p2-p0;\n\tif(cross(a,b)>eps) return 1;//p0,p1,p2成逆时针方向 \n\tif(cross(a,b)<-eps) return -1;//p0,p1,p2成顺时针方向 \n\tif(dot(a,b)<-eps) return 2;//p2 p0 p1一次排列在同一直线上 \n\tif(a.norm()<b.norm()) return -2;// p0 p1 p2一次排列在同一直线上 \n\treturn 0;//p2在线段p0p1上 \n\t\n}\nbool intersect(Point p1,Point p2,Point p3,Point p4)//判断是否相交 通过ccw来判断 \n{\n\treturn (ccw(p1,p2,p3)*ccw(p1,p2,p4)<=0&&ccw(p3,p4,p1)*ccw(p3,p4,p2)<=0);\n}\n\n\n\n/*\n点a与点b之间的距离等于向量a-b或b-a的绝对值。 \n*/ \ndouble getdis(Point a,Point b)//求俩点间的距离                    \n{\n\treturn (a-b).ABS();\n} \n\n/*\n设直线p1 p2上的向量为a=p2-p1,p与p1构成的向量b=p-p1\n则点p与直线p1p2的距离d就等于a,b构成的平行四边形的高\n用a与b外积的大小(平行四边形的面积)除以a的大小|a|即可求出高d\nd=|a*b|/|a|=|(p2-p1)*(p-p1)|/|p2-p1|; \n*/\n//注意：这里Segmet s是不规范的应该是 Line s 才对 \ndouble getdis_Li(Segment s,Point p)//点与直线的距离 \n{\n\treturn abs(cross(s.p2-s.p1,p-s.p1)/(s.p2-s.p1).ABS());\n}\n\ndouble getdis_sp(Segment s,Point p)//点与线段的距离 \n{\n\tif(dot(s.p2-s.p1,p-s.p1)<0.0) return (p-s.p1).ABS();\n\tif(dot(s.p1-s.p2,p-s.p2)<0.0) return (p-s.p2).ABS();\n\treturn getdis_Li(s,p);\n}\n\ndouble getdis_ss(Segment s1,Segment s2)\n{\n\tif(intersect(s1.p1,s1.p2,s2.p1,s2.p2)) return 0.0;\n\treturn min(min(getdis_sp(s1,s2.p1),getdis_sp(s1,s2.p2)),min(getdis_sp(s2,s1.p1),getdis_sp(s2,s1.p2)));\n}\n\n\nint main()\n{\n\tint T;scanf(\"%d\",&T);\n\twhile(T--){\n\t\tdouble x0,y0,x1,y1,x2,y2,x3,y3;\n\t\tscanf(\"%lf %lf %lf %lf %lf %lf %lf %lf\",&x0,&y0,&x1,&y1,&x2,&y2,&x3,&y3);\n\t\tPoint p0(x0,y0),p1(x1,y1),p2(x2,y2),p3(x3,y3);\n\t\tSegment s1(p0,p1),s2(p2,p3);\n\t\tprintf(\"%.10f\\n\",getdis_ss(s1,s2));         \n\t}\n\t\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <string>\n#include <cstdio>\n#include <algorithm>\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\nusing namespace std;\n\n//点を表す構造体\nclass Point{\npublic:\n  double x, y;\n\n  Point(double x=0, double y=0){\n    this->x = x;\n    this->y = y;\n  }\n\n  Point operator+(const Point &seg2){\n    return Point(x+seg2.x, y+seg2.y);\n  }\n\n  Point operator-(const Point &seg2){\n    return Point(x-seg2.x, y-seg2.y);\n  }\n\n  Point operator*(const double k){\n    return Point(x*k, y*k);\n  }\n\n  Point &operator=(const Point &p){\n    x = p.x;\n    y = p.y;\n    return *this;\n  }\n\n  bool operator < (const Point &p) const{\n    return x != p.x? x<p.x : y<p.y;\n  }\n\n  bool operator == (const Point &p) const{\n    return equals(x, p.x) && equals(y, p.y);\n  }\n};\n\n//ベクトルを点の別表記でも表せるようにしておく\nclass Vector : public Point{\npublic:\n  Vector() : Point() {}\n\n  Vector(double x, double y) : Point(x, y) {}\n\n  Vector(Point p) : Point(){\n    x = p.x;\n    y = p.y;\n  }\n\n  double norm(){\n    return x*x + y*y;\n  }\n\n  double abs(){\n    return sqrt(norm());\n  }\n\n  static double dot(Vector a, Vector b){\n    return a.x*b.x + a.y*b.y;\n  }\n\n  static double cross(Vector a, Vector b){\n    return a.x*b.y - a.y*b.x;\n  }\n\n  static bool isOrthogonal(Vector a, Vector b){\n    return equals(dot(a, b), 0.0);\n  }\n\n  static bool isParallel(Vector a, Vector b){\n    return equals(cross(a, b), 0.0);\n  }\n};\n\n//線分(ベクトルを用いて)を表す構造体。両端の点が定義されている点に注意\nclass Segment{\npublic:\n  Point p1, p2;\n\n  Segment(Point p1, Point p2){\n    this->p1 = p1;\n    this->p2 = p2;\n    x = p2.x-p1.x;\n    y = p2.y-p1.y;\n  }\n\n  static bool isOrthogonal(Segment a, Segment b){\n    return equals(dot(a, b), 0.0);\n  }\n\n  static bool isParallel(Segment a, Segment b){\n    return equals(cross(a, b), 0.0);\n  }\n\nprivate:\n  int x, y;\n  static double dot(Segment a, Segment b){\n    return a.x*b.x + a.y*b.y;\n  }\n\n  static double cross(Segment a, Segment b){\n    return a.x*b.y - a.y*b.x;\n  }\n};\n\ntypedef Segment Line;\n\nclass Circle{\npublic:\n  Point c;\n  double r;\n  Circle(Point c = Point(), double r = 0.0): c(c), r(r){}\n};\n\nstring ccw_str(Point p0, Point p1, Point p2){\n  //enum res {COUNTER_CLOCKWISE=0, CLOCKWISE, ONLINE_BACK, ONLINE_FRONT, ON_SEGMENT};\n  Vector a = p1-p0;\n  Vector b = p2-p0;\n  if(Vector::cross(a, b) > EPS) return \"COUNTER_CLOCKWISE\";\n  if(Vector::cross(a, b) < -EPS) return \"CLOCKWISE\";\n  if(Vector::dot(a, b) < -EPS) return \"ONLINE_BACK\";\n  if(a.norm() < b.norm()) return \"ONLINE_FRONT\";\n  return \"ON_SEGMENT\";\n}\n\nint ccw_int(Point p0, Point p1, Point p2){\n  enum res {COUNTER_CLOCKWISE=-1, CLOCKWISE=1, ONLINE_BACK=2, ONLINE_FRONT=-2, ON_SEGMENT=0};\n  Vector a = p1-p0;\n  Vector b = p2-p0;\n  if(Vector::cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n  if(Vector::cross(a, b) < -EPS) return CLOCKWISE;\n  if(Vector::dot(a, b) < -EPS) return ONLINE_BACK;\n  if(a.norm() < b.norm()) return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\n\nPoint project(Segment s, Point p){\n  Vector base = s.p2-s.p1;\n  double r = Vector::dot(p - s.p1, base) / base.norm();\n  return s.p1 + base*r;\n}\n\nPoint reflect(Segment s, Point p){\n  Point pro = project(s, p);\n  return p + (pro-p)*2.0;\n}\n\nbool intersect(Point p1, Point p2, Point p3, Point p4){\n  return ccw_int(p1, p2, p3)*ccw_int(p1, p2, p4)<=0 && ccw_int(p3, p4, p1)*ccw_int(p3, p4, p2)<=0;\n}\n\nbool intersect(Segment s1, Segment s2){\n  return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\nPoint crossPoint(Point p1, Point p2, Point p3, Point p4){\n  Vector base = p2-p1;\n  double d1 = fabs(Vector::cross(base, p4-p1))/fabs(base.abs());\n  double d2 = fabs(Vector::cross(base, p3-p1))/fabs(base.abs());\n  double t = d1/(d1+d2);\n  Point x = p4 + (p3-p4)*t;\n  return x;\n}\n\ndouble getDistance(Point p1, Point p2){\n  Vector base=p2-p1;\n  return base.abs();\n}\n\ndouble getDistance(Point p, Segment s){\n  double dot1, dot2;\n  Vector base = s.p2-s.p1;\n  dot1 = Vector::dot(base, p-s.p1);\n  dot2 = Vector::dot(base*(-1.0), p-s.p2);\n\n  double ans;\n  if(dot1<-EPS) ans = getDistance(s.p1, p);\n  else if(dot2<-EPS) ans = getDistance(s.p2, p);\n  else ans = fabs(Vector::cross(p-s.p1, base))/base.abs();\n\n  return ans;\n}\n\ndouble getDistance(Segment s1, Segment s2){\n  double ans;\n  if(intersect(s1, s2)) ans = 0.0;\n  else {\n    ans = min(min(getDistance(s1.p1, s2), getDistance(s1.p2, s2)),\n                  min(getDistance(s2.p1, s1), getDistance(s2.p2, s1)));\n  }\n  return ans;\n}\n\nint main(){\n  int q; cin >> q;\n\n  double q1_x, q1_y, q2_x, q2_y, q3_x, q3_y, q4_x, q4_y;\n  for(int i=0; i<q; i++){\n    cin >> q1_x >> q1_y >> q2_x >> q2_y >> q3_x >> q3_y >> q4_x >> q4_y;\n    Point p1(q1_x, q2_y), p2(q2_x, q2_y), p3(q3_x, q3_y), p4(q4_x, q4_y);\n    Segment s1(p1, p2), s2(p3, p4);\n    double ans = getDistance(s1, s2);\n    printf(\"%.10lf\\n\", ans);\n  }\n\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <algorithm>\n#include <functional>\n#include <vector>\n#include <utility>\n#include <cstring>\n#include <iomanip>\n#include <numeric>\n#include <cmath>\n#include <cassert>\n#include <complex>\nusing namespace std;\nusing ll = long long;\nconst int INF = 1<<30;\nconst int MOD = 1e9 + 7;\nconst double EPS = 1e-8;\nconst double PI = acos(-1);\ninline bool equals(double a, double b) { return abs(b - a) < EPS; }\nusing Point = complex<double>;\nnamespace std { bool operator < (const Point &a, const Point &b) { return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b); } }\ninline double dot(const Point &a, const Point &b) { return real(a) * real(b) + imag(a) * imag(b); }\ninline double cross(const Point &a, const Point &b) { return real(a) * imag(b) - imag(a) * real(b); }\nstruct Line\n{\n    Point a, b;\n    Line(Point a, Point b) : a(a), b(b) {}\n};\nstruct Segment\n{\n    Point a, b;\n    Segment(Point a, Point b) : a(a), b(b) {}\n};\nstruct Circle\n{\n    Point p; double r;\n    Circle(Point p, double r) : p(p), r(r) {}\n};\ninline bool isParallel(const Line &a, const Line &b) { return equals(cross(a.b - a.a, b.b - b.a), 0.0); }\ninline bool isOrthogonal(const Line &a, const Line &b) { return equals(dot(a.a - a.b, b.a - b.b), 0.0); }\ntemplate<typename T>\ninline Point projection(const T &l, const Point &p)\n{\n    double t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n    return l.a + (l.a - l.b) * t;\n}\ninline Point reflection(const Line &l, const Point &p) { return p + (projection(l, p) - p) * 2.0; }\ninline int ccw(const Point &a, Point b, Point c)\n{\n    b = b - a, c = c - a;\n    if(cross(b, c) > EPS) return 1;\n    if(cross(b, c) < -EPS) return -1;\n    if(dot(b, c) < 0) return 2;\n    if(norm(b) < norm(c)) return -2;\n    return 0;\n}\n\ninline bool isIntersect(const Line &l, const Point &p) { return abs(ccw(l.a, l.b, p)) != 1; }\ninline bool isIntersect(const Line &l, const Line &m) { return abs(cross(l.b - l.a, m.b - m.a)) > EPS || abs(cross(l.b - l.a, m.b - l.a)) < EPS; }\ninline bool isIntersect(const Segment &s, const Point &p) { return ccw(s.a, s.b, p) == 0; }\ninline bool isIntersect(const Line &l, const Segment &s) { return cross(l.b - l.a, s.a - l.a) * cross(l.b - l.a, s.b - l.a) < EPS; }\ninline bool isIntersect(const Segment &s, const Segment &t) { return ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 && ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0; }\n\ninline double getDistance(const Point &a, const Point &b) { return abs(a - b); }\ninline double getDistance(const Line &l, const Point &p) { return abs(p - projection(l, p)); }\ninline double getDistance(const Segment &s, const Point &p)\n{\n    Point r = projection(s, p);\n    if(isIntersect(s, r)) return abs(r - p);\n    return min(abs(s.a - p), abs(s.b - p));\n}\ninline double getDistance(const Line &l, const Line &m) { return isIntersect(l, m) ? 0 : getDistance(l, m.a); }\ninline double getDistance(const Segment &s1, const Segment &s2)\n{\n    if(isIntersect(s1, s2)) return 0;\n    return min({getDistance(s1, s2.a), getDistance(s1, s2.b), getDistance(s2, s1.a), getDistance(s2, s1.b)});\n}\ninline double getDistance(const Line &l, const Segment &s)\n{\n    if(isIntersect(l, s)) return 0;\n    return min(getDistance(l, s.a), getDistance(l, s.b));\n}\nbool isIntersect(const Circle &c, const Line &l) { return getDistance(l, c.p) <= c.r + EPS; }\nbool isIntersect(const Circle &c, const Point &p) { return abs(abs(p - c.p) - c.r) < EPS; }\nsigned main()\n{\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    cout << fixed << setprecision(8);\n    int n; cin >> n;\n    while(n--)\n    {\n        double x0, y0, x1, y1, x2, y2, x3, y3; cin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n        Point a = Point(x0, y0), b = Point(x1, y1), c = Point(x2, y2), d = Point(x3, y3);\n        double res = getDistance(Segment(a, b), Segment(c, d));\n        cout << res << endl;\n    }\n    return 0;\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n#define EPS (1e-10)    //誤差\ntypedef complex<double> P;\n\n//実数同士の比較\nbool EQ(double a, double b){\n    return (abs(a - b) < EPS);\n}\n\n//二つのベクトルが等しいかどうか\nbool EQV(P a, P b){\n    return (EQ(a.real(), b.real()) && EQ(a.imag(), b.imag()));\n}\n\n//内積\ndouble dot(P a, P b){\n    return (a.real() * b.real() + a.imag() * b.imag());\n}\n\n//外積\ndouble cross(P a, P b){\n    return (a.real() * b.imag() - a.imag() * b.real());\n}\n\n// 点a,bを通る直線と点cとの距離\ndouble distance_l_p(P a, P b, P c) {\n  return abs(cross(b-a, c-a)) / abs(b-a);\n}\n\n// 点cが線分a,b上にあるかないか(3)\nint is_point_on_line(P a, P b, P c) {\n  // |a-c| + |c-b| <= |a-b| なら線分上\n  return (abs(a-c) + abs(c-b) < abs(a-b) + EPS);\n}\n\n// 点a,bを端点とする線分と点cとの距離\ndouble distance_ls_p(P a, P b, P c) {\n  if ( dot(b-a, c-a) < EPS ) return abs(c-a);\n  if ( dot(a-b, c-b) < EPS ) return abs(c-b);\n  return abs(cross(b-a, c-a)) / abs(b-a);\n}\n\n// a1,a2を端点とする線分とb1,b2を端点とする線分の交差判定\nint is_intersected_ls(P a1, P a2, P b1, P b2) {\n  return ( cross(a2-a1, b1-a1) * cross(a2-a1, b2-a1) < EPS ) &&\n         ( cross(b2-b1, a1-b1) * cross(b2-b1, a2-b1) < EPS );\n}\n\n// a1,a2を通る直線とb1,b2を通る直線の交点計算\nP intersection_l(P a1, P a2, P b1, P b2) {\n  P a = a2 - a1; P b = b2 - b1;\n  return a1 + a * cross(b, b1-a1) / cross(b, a);\n}\n\nint main(){\n   \n   int q; cin >> q;\n    for(int i = 0; i < q; i++){\n        P p0, p1, p2, p3; cin >> p0.real() >> p0.imag() >> p1.real() >> p1.imag() >> p2.real() >> p2.imag() >> p3.real() >> p3.imag();\n        double ans = 1e10;\n        ans = min(ans, distance_ls_p(p0, p1, p2));\n        ans = min(ans, distance_ls_p(p0, p1, p3));\n        ans = min(ans, distance_ls_p(p2, p3, p0));\n        ans = min(ans, distance_ls_p(p2, p3, p1));\n        if(is_intersected_ls(p0, p1, p2, p3)) ans = 0.0;\n        printf(\"%.10f\\n\", ans);\n\n    }\n    return 0;\n}\n\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define mkp make_pair\n#define rep(i,n) for(int i=0;i<(n);++i)\ntypedef long long ll;\n\nconst ll MOD=1e9+7;\nconst double EPS=1e-9;\nconst double PI=acos(-1.0);\n//const long double PI=acos(-1.0L);\n\nstruct Point{\n    double x,y;\n    Point(){}\n    Point(double x,double y):x(x),y(y){}\n\n    Point operator +(const Point &b) const {return Point(x+b.x,y+b.y);}\n    Point operator -(const Point &b) const {return Point(x-b.x,y-b.y);}\n    Point operator *(const double b) const {return Point(x*b,y*b);}\n    Point operator /(const double b) const {return Point(x/b,y/b);}\n};\n\nstruct Line{\n    Point a,b;\n    Line(){}\n    Line(Point a,Point b):a(a),b(b){}\n};\n\nint sgn(double a) {return (a>EPS)-(a<-EPS);}\nint sgn(double a,double b) {return sgn(a-b);}\n\ndouble dot(const Point &a,const Point &b) {return (a.x*b.x+a.y*b.y);}\ndouble cross(const Point &a,const Point &b) {return (a.x*b.y-a.y*b.x);}\ndouble norm(const Point &p) {return dot(p,p);}\ndouble abs(const Point &p) {return sqrt(norm(p));}\n\nPoint projection(const Point &p,const Line &l){\n    double r=dot(p-l.a,l.b-l.a)/norm(l.b-l.a);\n    return l.a+(l.b-l.a)*r;\n}\nPoint reflection(const Point &p,const Line &l){\n    return p+(projection(p,l)-p)*2;\n}\n\n//1:Counter_Clockwise -1:Clockwise\n//2:a-b-c -2:c-a-b 0:a-c-b\nint ccw(const Point &p,const Point &q){\n    int s=sgn(cross(p,q));\n    if(s!=0) return s;\n    if(dot(p,q)<0) return -2;\n    if(norm(p)<norm(q)) return 2;\n    return 0;\n}\nint ccw(const Point &a,const Point &b,const Point &c){return ccw(b-a,c-a);}\n\nbool isParallel(const Line &l,const Line &r){\n    if(sgn(cross(l.b-l.a,r.b-r.a))==0) return true;\n    return false;\n}\nbool isOrthogonal(const Line &l,const Line &r){\n    if(sgn(dot(l.b-l.a,r.b-r.a))==0) return true;\n    return false;\n}\n\nPoint crosspoint(const Line &s,const Line &t){\n    Point v=t.b-t.a;\n    double d1=abs(cross(v,s.a-t.a));\n    double d2=abs(cross(v,s.b-t.a));\n    double w=d1/(d1+d2);\n    return s.a+(s.b-s.a)*w;\n}\n\ndouble isIntersectedPL(const Point &p,const Line &l){\n    return (sgn(abs(p-projection(p,l)))==0);\n}\ndouble isIntersectedPS(const Point &p,const Line &s){\n    return (ccw(s.a,s.b,p)==0);\n}\nbool isIntersectedSS(const Line &s,const Line &t){\n    if(ccw(s.b-s.a,t.a-s.a)*ccw(s.b-s.a,t.b-s.a)>0) return false;\n    if(ccw(t.b-t.a,s.a-t.a)*ccw(t.b-t.a,s.b-t.a)>0) return false;\n    return true;\n}\ndouble distancePL(const Point &p,const Line &l){\n    return abs(p-projection(p,l));\n}\ndouble distancePS(const Point &p,const Line &s){\n    Point h=projection(p,s);\n    if(isIntersectedPS(h,s)) return abs(h-p);\n    return min(abs(p-s.a),abs(p-s.b));\n}\ndouble distanceSS(const Line &s,const Line &t){\n    if(isIntersectedSS(s,t)) return 0.0;\n    return min(min(distancePS(s.a,t),distancePS(s.b,t)),min(distancePS(t.a,s),distancePS(t.b,s)));\n}\n\nint main(){\n    int Q;\n    cin>>Q;\n\n    for(int q=0;q<Q;q++){\n        Point P1,P2;\n        cin>>P1.x>>P1.y>>P2.x>>P2.y;\n        Point P3,P4;\n        cin>>P3.x>>P3.y>>P4.x>>P4.y;\n\n        Line L1(P1,P2);\n        Line L2(P3,P4);\n        double ans=distanceSS(L1,L2);\n        cout<<fixed<<setprecision(10)<<ans<<endl;\n    }\n\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "# include \"bits/stdc++.h\"\nusing namespace std;\nusing LL = long long;\nusing ULL = unsigned long long;\nconst double PI = acos(-1);\ntemplate<class T>constexpr T INF() { return ::std::numeric_limits<T>::max(); }\ntemplate<class T>constexpr T HINF() { return INF<T>() / 2; }\ntemplate <typename T_char>T_char TL(T_char cX) { return tolower(cX); };\ntemplate <typename T_char>T_char TU(T_char cX) { return toupper(cX); };\ntypedef pair<LL, LL> pii;\nconst int vy[] = { -1, -1, -1, 0, 1, 1, 1, 0 }, vx[] = { -1, 0, 1, 1, 1, 0, -1, -1 };\nconst int dx[4] = { 0,1,0,-1 }, dy[4] = { 1,0,-1,0 };\nint popcnt(unsigned long long n) { int cnt = 0; for (int i = 0; i < 64; i++)if ((n >> i) & 1)cnt++; return cnt; }\nint d_sum(LL n) { int ret = 0; while (n > 0) { ret += n % 10; n /= 10; }return ret; }\nint d_cnt(LL n) { int ret = 0; while (n > 0) { ret++; n /= 10; }return ret; }\nLL gcd(LL a, LL b) { if (b == 0)return a; return gcd(b, a%b); };\nLL lcm(LL a, LL b) { LL g = gcd(a, b); return a / g*b; };\n# define ALL(qpqpq)           (qpqpq).begin(),(qpqpq).end()\n# define UNIQUE(wpwpw)        sort(ALL((wpwpw)));(wpwpw).erase(unique(ALL((wpwpw))),(wpwpw).end())\n# define LOWER(epepe)         transform(ALL((epepe)),(epepe).begin(),TL<char>)\n# define UPPER(rprpr)         transform(ALL((rprpr)),(rprpr).begin(),TU<char>)\n# define FOR(i,tptpt,ypypy)   for(LL i=(tptpt);i<(ypypy);i++)\n# define REP(i,upupu)         FOR(i,0,upupu)\n# define INIT                 std::ios::sync_with_stdio(false);std::cin.tie(0)\n# pragma warning(disable:4996)\n\n//定義系\n\ndouble EPS = 1e-10;\n\n//誤差を考慮して足し算を行う\ndouble add(double a, double b) {\n\tif (abs(a + b) < EPS*(abs(a) + abs(b)))return 0;\n\treturn a + b;\n}\n\n//Point\nstruct Point {\n\tdouble x, y;\n\tPoint() {}\n\tPoint(double x, double y) :x(x), y(y) {\n\t}\n\tPoint operator + (Point p) {\n\t\treturn Point(add(x, p.x), add(y, p.y));\n\t}\n\tPoint operator - (Point p) {\n\t\treturn Point(add(x, -p.x), add(y, -p.y));\n\t}\n\tPoint operator * (double d) {\n\t\treturn Point(x*d, y*d);\n\t}\n\tPoint operator / (double d) {\n\t\treturn Point(x / d, y / d);\n\t}\n\t//内積\n\tdouble dot(Point p) {\n\t\treturn add(x*p.x, y*p.y);\n\t}\n\t//外積\n\tdouble det(Point p) {\n\t\treturn add(x*p.y, -y*p.x);\n\t}\n\t//点の大小比較\n\tbool operator <(const Point &p)const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\tbool operator ==(const Point &p)const {\n\t\treturn fabs(x - p.x) < EPS&&fabs(y - p.y) < EPS;\n\t}\n};\n\n//ベクトル。使い分けるといいかも\ntypedef Point Vector;\n\n//ベクトルの大きさの2乗\ndouble norm(Vector p) {\n\treturn p.x*p.x + p.y*p.y;\n}\n//ベクトルの大きさ\ndouble abs(Vector p) {\n\treturn sqrt(norm(p));\n}\n\n//線分\nstruct Segment {\n\tPoint p1, p2;\n};\n\n//直線\ntypedef Segment Line;\n\n//中心c,半径rの円\nstruct Circle {\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0) :c(c), r(r) {}\n};\n\n//多角形\ntypedef vector<Point> Polygon;\n\n\n\n\n//計算・アルゴリズム系\n\n\n//反時計回りCCW\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (a.det(b) > EPS)return COUNTER_CLOCKWISE;\n\tif (a.det(b) < -EPS)return CLOCKWISE;\n\tif (a.dot(b) < -EPS)return ONLINE_BACK;\n\tif (norm(a)<norm(b))return ONLINE_FRONT;\n\n\treturn ON_SEGMENT;\n}\n\n//線分p1p2と線分p3p4の交差判定\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n\treturn (ccw(p1, p2, p3)*ccw(p1, p2, p4) <= 0 && ccw(p3, p4, p1)*ccw(p3, p4, p2) <= 0);\n}\nbool intersect(Segment s1, Segment s2) {\n\treturn intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\n//ベクトルa,bの直交判定\nbool isOrthogonal(Vector a, Vector b) {\n\treturn a.dot(b) == 0.0;\n}\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n\treturn isOrthogonal(a1 - a2, b1 - b2);\n}\nbool isOrthogonal(Segment s1, Segment s2) {\n\treturn (s1.p2 - s1.p1).dot(s2.p2 - s2.p1) == 0.0;\n}\n\n//ベクトルa,bの並行判定\nbool isParallel(Vector a, Vector b) {\n\treturn a.det(b) == 0.0;\n}\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n\treturn isParallel(a1 - a2, b1 - b2);\n}\nbool isParallel(Segment s1, Segment s2) {\n\treturn (s1.p2 - s1.p1).det(s2.p2 - s2.p1) == 0.0;\n}\n\n//射影(点p1と点p2を通る直線に点pから垂線を引いた交点xを求める)\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = (p - s.p1).dot(base) / norm(base);\n\treturn s.p1 + base*r;\n}\n\n//反射(点p1と点p2を通る直線を対象軸として点pと線対称の位置にある点xを求める)\nPoint reflect(Segment s, Point p) {\n\treturn p + (project(s, p) - p)*2.0;\n}\n\n//点aと点bの距離\ndouble getDistance(Point a, Point b) {\n\treturn abs(a - b);\n}\n\n//直線lと点pの距離\ndouble getDistanceLP(Line l, Point p) {\n\treturn abs((l.p2 - l.p1).det(p - l.p1) / abs(l.p2 - l.p1));\n}\n\n//線分sと点pの距離\ndouble getDistanceSP(Segment s, Point p) {\n\tif ((s.p2 - s.p1).dot(p - s.p1) < 0.0)return abs(p - s.p1);\n\tif ((s.p1 - s.p2).dot(p - s.p2) < 0.0)return abs(p - s.p2);\n\treturn getDistanceLP(s, p);\n}\n\n//線分s1と線分s2の距離\ndouble getDistance(Segment s1, Segment s2) {\n\tif (intersect(s1, s2))return 0.0;\n\treturn min({ getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2), getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2) });\n}\n//距離の二乗\ndouble dist(Point p, Point q) {\n\treturn (p - q).dot(p - q);\n}\n\n//辞書順で比較\nbool cmp_x(const Point& p, const Point& q) {\n\tif (p.x != q.x)return  p.x < q.x;\n\treturn p.y < q.y;\n}\n\n//凸包を求める\nvector<Point> convex_hull(Point* ps, int n) {\n\tsort(ps, ps + n, cmp_x);\n\tint k = 0;//凸法の頂点数\n\tvector<Point> qs(n * 2);//構築中の凸包\n\n\t\t\t\t\t\t//下限凸包の作成\n\tfor (int i = 0; i < n; i++) {\n\t\twhile (k > 1 && (qs[k - 1] - qs[k - 2]).det(ps[i] - qs[k - 1]) <= 0)k--;\n\t\tqs[k++] = ps[i];\n\t}\n\n\t//上限凸包の作成\n\tfor (int i = n - 2, t = k; i >= 0; i--) {\n\t\twhile (k > t && (qs[k - 1] - qs[k - 2]).det(ps[i] - qs[k - 1]) <= 0)k--;\n\t\tqs[k++] = ps[i];\n\t}\n\tqs.resize(k - 1);\n\treturn qs;\n}\n\nint main() {\n\tSegment s1, s2;\n\tint q;\n\tcin >> q;\n\tREP(qqq, q) {\n\t\tcin >> s1.p1.x >> s1.p1.y >> s1.p2.x >> s1.p2.y >> s2.p1.x >> s2.p1.y >> s2.p2.x >> s2.p2.y;\n\t\tcout << fixed << setprecision(13) << getDistance(s1, s2) << endl;\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> P;\ndouble eps=1e-7;\nbool eq(double a,double b){return (b-a<eps&&a-b<eps);}\ndouble cross(P a,P b){return imag(b*conj(a));}\ndouble dot(P a,P b){return real(b*conj(a));}\nP project(P a,P b,P c){b-=a;c-=a;return a+b*real(c/b);}\nP reflect(P a,P b,P c){b-=a;c-=a;return a+conj(c/b)*b;}\nint ccw(P a,P b,P c){\n  b-=a,c-=a,a=c*conj(b);\n  if(a.imag()>eps)return 1;//ccw\n  if(a.imag()<-eps)return -1;//cw\n  if(a.real()<-eps)return 2;//ob\n  if(abs(b)+eps<abs(c))return -2;//of\n  return 0;//os\n}\n\n//segment ab , point c\ndouble dist(P a,P b,P c){\n  if(dot(b-a,c-a)<0)return abs(c-a);\n  if(dot(a-b,c-b)<0)return abs(c-b);\n  return abs(cross(b-a,c-a))/abs(b-a);\n}\n\nbool isintersect(P a,P b,P c,P d){\n  return ((ccw(a,b,c)*ccw(a,b,d)<=0)&&(ccw(c,d,a)*ccw(c,d,b)<=0));\n}\n\n//segment ab , segment cd\nP intersect(P a,P b,P c,P d){\n  a-=d;b-=d;c-=d;\n  return d+a+(b-a)*imag(a/c)/imag(a/c-b/c);\n}\n\ndouble dist(P a,P b,P c,P d){\n  if(isintersect(a,b,c,d))return 0;\n  double ab=min(dist(a,b,c),dist(a,b,d));\n  double cd=min(dist(c,d,a),dist(c,d,b));\n  return min(ab,cd);\n}\n\nint main(){\n  int T;\n  cin>>T;\n  while(T--){\n    double ax,ay,bx,by,cx,cy,dx,dy;\n    cin>>ax>>ay>>bx>>by>>cx>>cy>>dx>>dy;  \n    printf(\"%.12f\\n\",dist( P(ax,ay) , P(bx,by) , P(cx,cy) , P(dx,dy) ) );\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<algorithm>\n#include<vector>\n#include<string>\n#include<sstream>\n#include<iomanip>\n#include<utility>\n#include<cmath>\n#include<set>\nusing namespace std;\ntypedef long long int ll;\nconst double EPS=1e-10;\n\nbool equals(double a,double b)\n{\n\treturn a>b?a-b<EPS:b-a<EPS;\n}\n\nclass Point\n{\npublic:\n\tdouble x;\n\tdouble y;\n\tPoint(double inx=0.0,double iny=0.0):x(inx),y(iny){}\n\tPoint operator+(const Point &p){return Point(x+p.x,y+p.y);}\n\tPoint operator-(const Point &p){return Point(x-p.x,y-p.y);}\n\tPoint operator*(const double k){return Point(x*k,y*k);}\n\tPoint operator/(const double k){return Point(x/k,y/k);}\n\tPoint operator=(const Point &p){x=p.x;y=p.y;return *this;}\n\tbool operator<(const Point &p)const{return x!=p.x?x<p.x:y<p.y;}\n\tbool operator==(const Point &p)const{return equals(x,p.x)&&equals(y,p.y);}\n\tdouble norm()\n\t{\n\t\treturn x*x+y*y;\n\t}\n\tdouble abs()\n\t{\n\t\treturn sqrt(norm());\n\t}\n};\n\ntypedef Point Vector;\n\nclass Segment\n{\npublic:\n\tPoint p1;\n\tPoint p2;\n\tVector getvector()\n\t{\n\t\treturn p2-p1;\n\t}\n};\n\ntypedef Segment Line;\n\nclass Circle\n{\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point inc=Point(),double inr=0.0):c(inc),r(inr){}\n};\n\ntypedef vector<Point> Polygon;\n\ndouble dot(Vector a,Vector b)\n{\n\treturn a.x*b.x+a.y*b.y;\n}\n\ndouble cross(Vector a,Vector b)\n{\n\treturn a.x*b.y-a.y*b.x;\n}\nconst int counter_clockwise=1;\nconst int clockwise=-1;\nconst int on_segment=0;\nconst int online_back=2;\nconst int online_front=-2;\n\ndouble norm(Vector a)\n{\n\treturn a.x*a.x+a.y*a.y;\n}\n\ndouble abs(Vector a)\n{\n\treturn sqrt(norm(a));\n}\n\nbool isorthogonal(Vector a,Vector b)\n{\n\treturn equals(dot(a,b),0.0);\n}\n\nbool isorthogonal(Point a1,Point a2,Point b1,Point b2)\n{\n\treturn isorthogonal(a1-a2,b1-b2);\n}\n\nbool isorthogonal(Segment s1,Segment s2)\n{\n\treturn equals(dot(s1.getvector(),s2.getvector()),0.0);\n}\n\nbool isparallel(Vector a,Vector b)\n{\n\treturn equals(cross(a,b),0.0);\n}\n\nbool isparallel(Point a1,Point a2,Point b1,Point b2)\n{\n\treturn isparallel(a1-a2,b1-b2);\n}\n\nbool isparallel(Segment s1,Segment s2)\n{\n\treturn equals(cross(s1.getvector(),s2.getvector()),0.0);\n}\n\nPoint project(Segment s,Point p)\n{\n\tVector base=s.getvector();\n\tdouble r=dot(p-s.p1,base)/norm(base);\n\treturn s.p1+base*r;\n}\n\nPoint reflect(Segment s,Point p)\n{\n\treturn project(s,p)*2.0-p;//p+(project(s,p)-p)*2.0\n}\n\ndouble getdistance(Point a,Point b)\n{\n\treturn abs(a-b);\n}\n\ndouble getdistancelp(Line l,Point p)//Line,Point\n{\n\tdouble s=abs(cross(l.p2-l.p1,p-l.p1));\n\treturn s/abs(l.getvector());\n}\n\ndouble getdistancesp(Segment s,Point p)\n{\n\tif(dot(s.getvector(),p-s.p1)<0.0)return abs(p-s.p1);\n\telse if(dot(s.p1-s.p2,p-s.p2)<0.0)return abs(p-s.p2);\n\telse return getdistancelp(s,p);\n}\n\nint ccw_online(Point p0,Point p1,Point p2)\n{\n\tVector a=p1-p0;\n\tVector b=p2-p0;\n\tif(cross(a,b)>EPS)return counter_clockwise;\n\telse if(cross(a,b)<-EPS)return clockwise;\n\telse if(dot(a,b)<-EPS)return online_back;\n\telse if(a.norm()<b.norm())return online_front;\n\telse return on_segment;\n}\n\nint ccw(Point p0,Point p1,Point p2)\n{\n\tint c=ccw_online(p0,p1,p2);\n\tif(c==counter_clockwise||c==clockwise)return c;\n\telse return on_segment;\n}\n\nbool intersect(Point p1,Point p2,Point p3,Point p4)\n{\n\treturn ccw(p1,p2,p3)*ccw(p1,p2,p4)<=0&&ccw(p3,p4,p1)*ccw(p3,p4,p2)<=0;\n}\n\nbool intersect(Segment s1,Segment s2)\n{\n\treturn intersect(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n\ndouble getdistance(Segment s1,Segment s2)\n{\n\tif(intersect(s1,s2))return 0.0;\n\telse return min(min(getdistancesp(s1,s2.p1),getdistancesp(s1,s2.p2)),\n\t\t\tmin(getdistancesp(s2,s1.p1),getdistancesp(s2,s1.p2)));\n}\n\nPoint getcrosspoint(Segment s1,Segment s2)\n{\n\tVector base=s2.getvector();\n\tdouble d1=abs(cross(base,s1.p1-s2.p1));\n\tdouble d2=abs(cross(base,s1.p2-s2.p1));\n\tdouble t=d1/(d1+d2);\n\treturn s1.p1+s1.getvector()*t;\n}\n\npair<Point,Point> getcrosspoint(Circle c,Line l)\n{\n\tVector pr=project(l,c.c);\n\tVector e=l.getvector()/abs(l.getvector());\n\tdouble base=sqrt(c.r*c.r-norm(pr-c.c));\n\treturn make_pair(pr+e*base,pr-e*base);\n}\n\ndouble arg(Vector p)\n{\n\treturn atan2(p.y,p.x);\n}\n\nPoint polar(double r,double theta)\n{\n\treturn Point(r*cos(theta),r*sin(theta));\n}\n\npair<Point,Point> getcrosspoint(Circle c1,Circle c2)\n{\n\tdouble d=abs(c2.c-c1.c);\n\tdouble a=acos((c1.r*c1.r+d*d-c2.r*c2.r)/(2.0*c1.r*d));\n\tdouble t=arg(c2.c-c1.c);\n\treturn make_pair(c1.c+polar(c1.r,t+a),c1.c+polar(c1.r,t-a));\n}\nconst int Bottom=0;\nconst int Left=1;\nconst int Right=2;\nconst int Top=3;\n\nclass endPoint\n{\npublic:\n\tPoint p;\n\tint seg;//id of Point\n\tint st;//kind of Point\n\tendPoint(){}\n\tendPoint(Point inp,int inseg,int inst):p(inp),seg(inseg),st(inst){}\n\tbool operator<(const endPoint &ep)const\n\t{\n\t\tif(p.y==ep.p.y)\n\t\t{\n\t\t\treturn st<ep.st;//Bottom->Left->Right->Top\n\t\t}\n\t\telse return p.y<ep.p.y;\n\t}\n};\n\nendPoint EP[200000];\n\nint manhattanintersection(vector<Segment> s)\n{\n\tint n=s.size();\n\tdouble sto;\n\t\n\tfor(int i=0,k=0;i<n;i++)\n\t{\n\t\tif(s[i].p1.y==s[i].p2.y)\n\t\t{\n\t\t\tif(s[i].p1.x>s[i].p2.x)\n\t\t\t{\n\t\t\t\tsto=s[i].p1.x;\n\t\t\t\ts[i].p1.x=s[i].p2.x;\n\t\t\t\ts[i].p2.x=sto;\n\t\t\t}\n\t\t}\n\t\telse if(s[i].p1.y>s[i].p2.y)\n\t\t{\n\t\t\tsto=s[i].p1.y;\n\t\t\ts[i].p1.y=s[i].p2.y;\n\t\t\ts[i].p2.y=sto;\n\t\t}\n\t\t\n\t\tif(s[i].p1.y==s[i].p2.y)\n\t\t{\n\t\t\tEP[k++]=endPoint(s[i].p1,i,Left);\n\t\t\tEP[k++]=endPoint(s[i].p2,i,Right);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tEP[k++]=endPoint(s[i].p1,i,Bottom);\n\t\t\tEP[k++]=endPoint(s[i].p2,i,Top);\n\t\t}\n\t}\n\t\n\tsort(EP,EP+2*n);\n\t\n\tset<int> BT;\n\tBT.insert(1000000001);\n\tint cnt=0;\n\t\n\tfor(int i=0;i<2*n;i++)\n\t{\n\t\tif(EP[i].st==Top)BT.erase(EP[i].p.x);\n\t\telse if(EP[i].st==Bottom)BT.insert(EP[i].p.x);\n\t\telse if(EP[i].st==Left)\n\t\t{\n\t\t\tset<int>::iterator b=lower_bound(BT.begin(),BT.end(),s[EP[i].seg].p1.x);\n\t\t\tset<int>::iterator e=upper_bound(BT.begin(),BT.end(),s[EP[i].seg].p2.x);\n\t\t\tcnt+=distance(b,e);\n\t\t}\n\t}\n\t\n\treturn cnt;\n}\nPolygon andrewscan(Polygon s)\n{\n\tPolygon u,l;\n\tif(s.size()<=2)return s;\n\tsort(s.begin(),s.end());\n\tu.push_back(s[0]);\n\tu.push_back(s[1]);\n\tl.push_back(s[s.size()-1]);\n\tl.push_back(s[s.size()-2]);\n\t\n\tfor(int i=2;i<s.size();i++)\n\t{\n\t\tfor(int n=u.size();n>=2&&ccw(u[n-2],u[n-1],s[i])!=clockwise;n--)\n\t\t{\n\t\t\tu.pop_back();\n\t\t}\n\t\tu.push_back(s[i]);\n\t}\n\t\n\tfor(int i=s.size()-3;i>=0;i--)\n\t{\n\t\tfor(int n=l.size();n>=2&&ccw(l[n-2],l[n-1],s[i])!=clockwise;n--)\n\t\t{\n\t\t\tl.pop_back();\n\t\t}\n\t\tl.push_back(s[i]);\n\t}\n\t\n\treverse(l.begin(),l.end());\n\tfor(int i=u.size()-2;i>=1;i--)l.push_back(u[i]);\n\t\n\treturn l;\n}\nconst int in=2;\nconst int on=1;\nconst int out=0;\n\nint contain(Polygon g,Point p)\n{\n\tint n=g.size();\n\tbool x=false;\n\tPoint a,b;\n\tfor(int i=0;i<n;i++)\n\t{\n\t\ta=g[i]-p;\n\t\tb=g[(i+1)%n]-p;\n\t\tif(abs(cross(a,b))<EPS&&dot(a,b)<EPS)return on;\n\t\tif(a.y>b.y)\n\t\t{\n\t\t\tPoint sto=a;\n\t\t\ta=b;\n\t\t\tb=sto;\n\t\t}\n\t\tif(a.y<EPS&&EPS<b.y&&cross(a,b)>EPS)x=!x;\n\t}\n\treturn x?in:out;\n}\nint main()\n{\n\t//Segment s;\n\t//cin>>s.p1.x>>s.p1.y>>s.p2.x>>s.p2.y;\n\tint q;cin>>q;\n\tPoint a;\n\tSegment s1,s2;\n\tfor(int i=0;i<q;i++)\n\t{\n\t\tcin>>s1.p1.x>>s1.p1.y>>s1.p2.x>>s1.p2.y>>s2.p1.x>>s2.p1.y>>s2.p2.x>>s2.p2.y;\n\t\tcout<<fixed<<setprecision(8)<<getdistance(s1,s2)<<endl;\n\t}\n\treturn 0;\t\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n#define eps 0\ntypedef complex<double> C;\ntypedef struct{\n\tdouble x,y;\n\t\n}point;\ntypedef struct{\npoint a,b;\n}line;\n\nC convert(point a){\n\treturn C(a.x,a.y);\n}\npoint convert(C a){\n\treturn {a.real(),a.imag()};\n}\n\nline make(point a,point b){\n\tline res; res.a=a; res.b=b;\n\treturn res;\n}\n\npoint make(double x,double y){\n\tpoint res;\n\tres.x=x;\n\tres.y=y;\n\treturn res;\n}\n//a-b\npoint vec(point a,point b){\n\tpoint res;\n\tres.x=a.x-b.x;\n\tres.y=a.y-b.y;\n\treturn res;\n}\n\n// a・b\ndouble dot(point a,point b){\n\treturn a.x*b.x+a.y*b.y;\n}\n//|a|\ndouble  norm(point a){\nreturn sqrt(dot(a,a));\n}\n//|a|^2\ndouble absolute(point a){\nreturn dot(a,a);\n}\n//a×ｂ　外積z成分\ndouble cross(point a,point b){\nreturn a.x*b.y-a.y*b.x;\n}\n//a=x1+iy1,b=x2+iy2 a*b\npoint imaseki(point a,point b){\npoint res;\nres.x=a.x*b.x-a.y*b.y;\nres.y=a.x*b.y+a.y*b.x;\nreturn res;\n}\n//vec * a\npoint product(point v,double a){\n\tpoint res; res.x=v.x*a; res.y=v.y*a;\n\treturn res;\n}\n\n//共役\npoint conjugate(point a){\npoint res;\nres.x=a.x;\nres.y=-a.y;\nreturn res;\n}\n\n\nint ccw(point p0,point p1,point p2){\npoint a=vec(p1,p0);\npoint b=vec(p2,p0);\n\tif(cross(a,b)>eps){\n\treturn 1;//counter_clockwise\n\t}else if(cross(a,b)<eps){\n\treturn -1;//clockwise\n\t}else if(dot(a,b)<-eps){\n\treturn 2;//online_back\n\t}else if(absolute(a)<absolute(b)){\n\treturn -2;//online_front\n\t}else{\n\treturn 0;//on_segment\n\t}\n\n}\n//交差判定　s1-s2 s3-s4\nbool intersect(point s1,point s2,point s3,point s4){\n if(ccw(s1,s2,s3)*ccw(s1,s2,s4)<=0 && ccw(s3,s4,s1)*ccw(s3,s4,s2)<=0)\n        return true;\n    return false;\n}\nbool intersect(line l1,line l2){\n\treturn intersect(l1.a,l1.b,l2.a,l2.b);\n}\n//交点\npoint crosspoint(line l1,line l2){\n\tpoint veca=vec(l1.b,l1.a);\n\tpoint vecb=vec(l2.b,l2.a);\n\tdouble d= cross(veca,vecb);\n\tdouble e= cross(vecb,vec(l2.b,l1.a));\n\treturn vec(l1.a,product(veca,e/d));\n\n}\n\n//距離　point-point \ndouble distance (point a,point b){\nreturn norm(vec(a,b));\n}\n//距離 point-line\ndouble distance(line l,point p){\nreturn abs(cross(vec(p,l.a),vec(l.b,l.a))/norm(vec(l.b,l.a)));\n}\n//距離　line-line\ndouble distance(line a,line b){\n\tif(intersect(a,b))return 0;\n\tdouble m= distance(a.a,b.a);\n\tm=min(m,distance(a.a,b.b));\n\tm=min(m,distance(a.b,b.a));\n\tm=min(m,distance(a.b,b.b));\n\treturn m;\n}\n\nint main(){\n\tint q;\n\tcin>>q;\n\tfor(int i=0;i<q;i++){\n\tdouble x,y;\n\tpoint p0,p1,p2,p3;\n\tline l0,l1;\n\tcin>>x>>y;\n\tp0=make(x,y);\n\tcin>>x>>y;\n\tp1=make(x,y);\n\tcin>>x>>y;\n\tp2=make(x,y);\n\tcin>>x>>y;\n\tp3=make(x,y);\n\tl0=make(p0,p1);\n\tl1=make(p2,p3);\n\tprintf(\"%0.10lf\\n\",distance(l0,l1));\n\n\t}\nreturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <cmath>\n#include <algorithm>\n#include <cfloat>\n#include <stack>\n#include <queue>\n#include <vector>\n#include <string>\n#include <iostream>\ntypedef long long int ll;\ntypedef unsigned long long int ull;\n#define BIG_NUM 2000000000\n#define MOD 1000000007\n#define EPS 0.000000001\nusing namespace std;\n\nstruct Point{\n\tdouble x,y;\n};\n\ntypedef Point Vector;\n\nstruct Segment{\n\tvoid set(double x1,double y1,double x2,double y2){\n\t\tp1.x = x1;\n\t\tp1.y = y1;\n\t\tp2.x = x2;\n\t\tp2.y = y2;\n\t}\n\tPoint p1,p2;\n};\n\ntypedef Segment Line;\n\nint func(double x1,double y1,double x2, double y2, double xp, double yp){\n\tdouble naiseki,norm1,norm2,gaiseki;\n\tnorm1 = sqrt((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1));\n\tnorm2 = sqrt((xp-x1)*(xp-x1)+(yp-y1)*(yp-y1));\n\tnaiseki = (xp-x1)*(x2-x1)+(yp-y1)*(y2-y1);\n\tgaiseki = (x2-x1)*(yp-y1)-(xp-x1)*(y2-y1);\n\tif(gaiseki > EPS){\n\t\treturn 1;\n\t}else if(gaiseki < -EPS){\n\t\treturn -1;\n\t}\n\tif(naiseki < -EPS){\n\t\treturn 2;\n\t}\n\n\tif(norm1 < norm2){\n\t\treturn -2;\n\t}\n\treturn 0;\n}\n\ndouble cross(Vector a,Vector b){\n\treturn a.x*b.y-a.y*b.x;\n}\n\ndouble dot(Vector a,Vector b){\n\treturn a.x*b.x + a.y*b.y;\n}\n\nPoint calc_minus(Point a,Point b){\n\tPoint ret;\n\n\tret.x = a.x-b.x;\n\tret.y = a.y-b.y;\n\n\treturn ret;\n}\n\ndouble calc_len(Vector a){\n\treturn sqrt(a.x*a.x+a.y*a.y);\n}\n\ndouble getDistanceLP(Line l,Point p){\n\treturn fabs(cross(calc_minus(l.p2,l.p1),calc_minus(p,l.p1))/calc_len(calc_minus(l.p2,l.p1)));\n}\n\ndouble getDistanceSP(Segment s,Point p){\n\tif(dot(calc_minus(s.p2,s.p1),calc_minus(p,s.p1)) < 0.0)return calc_len(calc_minus(p,s.p1));\n\tif(dot(calc_minus(s.p1,s.p2),calc_minus(p,s.p2)) < 0.0)return calc_len(calc_minus(p,s.p2));\n\treturn getDistanceLP(s,p);\n}\n\ndouble getDistance(Segment s1,Segment s2){\n\treturn min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),\n\t\t\tmin(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n}\n\nint main(){\n\tdouble x1,x2,x3,x4,y1,y2,y3,y4;\n\tint q;\n\tscanf(\"%d\",&q);\n\n\tfor(int i=0;i<q;i++){\n\t\tscanf(\"%lf %lf %lf %lf %lf %lf %lf %lf\",&x1,&y1,&x2,&y2,&x3,&y3,&x4,&y4);\n\n\t\tif(func(x1,y1,x2,y2,x3,y3)*func(x1,y1,x2,y2,x4,y4) <= 0 &&\n\t\t\t\tfunc(x3,y3,x4,y4,x1,y1) * func(x3,y3,x4,y4,x2,y2) <= 0){\n\t\t\tprintf(\"0.0000000000\\n\");\n\t\t\tcontinue;\n\t\t}\n\n\t\tSegment s1,s2;\n\t\ts1.set(x1,y1,x2,y2);\n\t\ts2.set(x3,y3,x4,y4);\n\n\t\tprintf(\"%.10lf\\n\",getDistance(s1,s2));\n\t}\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n#define EPS 1e-10\n#define equals(a,b) (fabs( (a) - (b) )< EPS )\ntypedef struct point{\n\tdouble x,y;\n\tpoint(){};\n\tpoint(double x ,double y):x(x),y(y){};\n\tpoint operator + (point &p){ return point(x+p.x,y+p.y);\t}\n\tpoint operator - (point &p){ return point(x-p.x,y-p.y);\t}\n\tpoint operator * (point &p){ return point(x*p.x-y*p.y,x*p.y+y*p.x) ;}\n\tpoint operator * (double a){ return point(x*a,y*a);\t}\n\tpoint operator / (double a){ return point(x/a,y/a);\t}\n\t\n\tdouble abs() { return sqrt(norm()); }\n\tdouble norm() { return x*x+y*y; }\n\t\n\tbool operator < (const point &p) const { return x!=p.x ? x<p.x : y<p.y; }\n\tbool operator == (const point &p) const { return fabs(x-p.x)<EPS && fabs(y-p.y)<EPS; }\n}point;\ndouble abs(point a){return a.abs();}\ndouble norm(point a){return a.norm();}\n\ntypedef complex<double> C;\ntypedef struct { point s,e;} line;\n\nC convert(point a){ return C(a.x,a.y); }\npoint convert( C a){ return point(a.real(),a.imag() );}\ndouble dot(point a,point b){ return a.x*b.x+a.y*b.y ; } //内積　a・b\ndouble cross(point a,point b){ return a.x*b.y - a.y*b.x ; }//外積(z成分)　a×b\npoint vec(line l){return l.e-l.s;}\nline make(point s,point e){\n\tline res; res.s=s; res.e=e;\n\treturn res;\n}\npoint make(){ \n\tdouble x,y; cin>>x>>y;\n       \treturn point(x,y);\n}\n//直交\nbool isorthogonal(point a,point b){ return equals(dot(a,b), 0.0); }\nbool isorthogonal(line l1,line l2){ return isorthogonal(vec(l1),vec(l2)); }\n//平行\nbool isparallel(point a,point b){ return equals(cross(a,b),0.0); }\nbool isparallel(line l1,line l2){ return isparallel(vec(l1),vec(l2)); }\n//射影\npoint project(line s,point p){\n\tpoint base = vec(s);\n\tdouble r=dot(p-s.s,base)/base.norm();\n\tbase = base*r;\n\treturn s.s+base;\n}\n//反射\npoint reflect(line l,point p){\n\tpoint tmp=project(l,p)-p;\n\ttmp= tmp*2.0;\n\treturn p+tmp;\n\n}\n//交差判定\n\nint ccw(point p0,point p1,point p2){\n\tpoint a = p1-p0;\n\tpoint b = p2-p0;\nif(cross(a,b)>EPS) return 1;//counter_clockwise\nif(cross(a,b)<-EPS) return -1;//clockwise\nif(dot(a,b)<-EPS)return 2;//online_back\nif(a.norm()<b.norm() ) return -2;//online_front\nreturn 0;//on_segment\n}\n// line p1-p2 line p3-p4\nbool intersect(point p1,point p2,point p3,point p4){\n\treturn (ccw(p1,p2,p3)*ccw(p1,p2,p4)<=0 && ccw(p3,p4,p1)*ccw(p3,p4,p2) ); \n}\n// line l1,l2\nbool intersect(line l1,line l2){ return intersect(l1.s,l1.e,l2.s,l2.e); }\n\n\n//距離\n//point-point\ndouble distance(point a,point b){ return abs(a-b); }\n//point-line(直線）\ndouble distance2(line l,point p){\n\treturn abs(cross(vec(l),p-l.s)/abs(l.e-l.s));\n}\n//point-line(線分)\ndouble distance(line l,point p){\n\tif( dot(vec(l),p-l.s) <0.0 ) return abs(p-l.s);\n\tif( dot(l.s-l.e,p-l.e) <0.0 ) return abs(p-l.e);\n\treturn distance2(l,p);\n}\n//line-line\ndouble distance(line l1,line l2){\n\tif(intersect(l1,l2)) return 0.0;\n\treturn min(min(distance(l1,l2.s),distance(l1,l2.e) ), min(distance(l2,l1.s),distance(l2,l1.e) ) );\n}\n\n//交点\npoint crosspoint(line l1,line l2){\n\tpoint base = vec(l2);\n\tdouble d1 = abs(cross(base,l1.s-l2.s) );\n\tdouble d2 = abs(cross(base,l1.e-l2.s) );\n\tdouble t = d1/(d1+d2);\n\tpoint tmp = vec(l1)*t;\n\treturn l1.s+tmp;\n}\n\nint main(){\nint q;\ncin>>q;\nfor(int i=0;i<q;i++){\n\tpoint p0=make(),p1=make(),p2=make(),p3=make();\n\tline l0 = make(p0,p1) ,l1 = make(p2,p3);\n\tprintf(\"%0.10lf\\n\",distance(l0,l1) );\n}\n\nreturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n/*******************??????********************/\nconst double EPS = 1e-8;\nconst double INF = 1e12;\ntypedef complex<double> P;\nnamespace std {\n\tbool operator < (const P& a, const P& b) {\n\t\treturn real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n\t}\n}\ndouble cross(const P& a, const P& b) {//??????\n\treturn imag(conj(a)*b);\n}\ndouble dot(const P& a, const P& b) {//??????\n\treturn real(conj(a)*b);\n}\n\nstruct L : public vector<P> {//??????\n\tL(const P &a, const P &b) {\n\t\tpush_back(a); push_back(b);\n\t}\n};\n\ntypedef vector<P> G;\nstruct C {//???\n\tP p; double r;\n\tC(const P &p, double r) : p(p), r(r) { }\n};\n\nint ccw(P a, P b, P c) {//??????????????????\n\tb -= a; c -= a;\n  if (cross(b, c) > 0)   return +1;       // counter clockwise\n  if (cross(b, c) < 0)   return -1;       // clockwise\n  if (dot(b, c) < 0)     return +2;       // c--a--b on line\n  if (norm(b) < norm(c)) return -2;       // a--b--c on line\n  return 0;\n}\n\nbool intersectLL(const L& l,const L& m){\n\t//non-parallel || sameline\n\treturn abs(cross(l[1]-l[0],m[1]-m[0])) > EPS || abs(cross(l[1]-l[0],m[0]-l[0])) < EPS;\n}\nbool intersectLS(const L& l,const L& s){\n\t// s[0] is left of l,s[1] is right of l\n\treturn cross(l[1]-l[0],s[0]-l[0]) * cross(l[1]-l[0],s[1]-l[0]) < EPS;\n}\nbool intersectSS(const L &s, const L &t) {\n\treturn ccw(s[0],s[1],t[0])*ccw(s[0],s[1],t[1]) <= 0 &&\n\t\tccw(t[0],t[1],s[0])*ccw(t[0],t[1],s[1]) <= 0;\n}\nbool intersectLP(const L& l,const P& p){\n\treturn abs(cross(l[1]-p,l[0]-p)) < EPS;\n}\nbool intersectSP(const L& s,const P& p){\n\treturn abs(s[0]-p)+abs(s[1]-p) - abs(s[1]-s[0]) < EPS;// triangle inequality\n}\n// ??´???????????????\nbool orthogonalLL(const L &l1, const L &l2){\n\treturn (dot(l1[0]-l1[1], l2[0]-l2[1]) <= EPS && dot(l1[0]-l1[1], l2[0]-l2[1]) >= -EPS);\n}\n// ??????????????????\nbool parallelLL(const L &l1, const L &l2){\n\treturn (cross(l1[0]-l1[1], l2[0]-l2[1]) <= EPS && cross(l1[0]-l1[1], l2[0]-l2[1]) >= -EPS);\n}\n\nP projection(const L& l,const P& p){\n\tdouble t = dot(p-l[0],l[0]-l[1]) / norm(l[0]-l[1]);\n\treturn l[0] + t*(l[0]-l[1]);\n}\nP reflection(const L& l,const P& p){\n\treturn p + 2. * (projection(l,p) - p);\n}\ndouble distancePP(const P &a, const P &b){\n\treturn abs(a - b);\n}\ndouble distanceSP(const L &s, const P &p) {\n\tconst P r = projection(s, p);\n\tif (intersectSP(s, r)) return abs(r - p);\n\treturn min(abs(s[0] - p), abs(s[1] - p));\n}\ndouble distanceLP(const L& l,const P& p){\n\treturn abs(p - projection(l,p));\n}\ndouble distanceLL(const L& l,const L& m){\n\treturn intersectLL(l,m) ? 0 : distanceLP(l,m[0]);\n}\ndouble distanceLS(const L& l,const L& s){\n\tif(intersectLS(l,s)) return 0;\n\treturn min(distanceLP(l, s[0]),distanceLP(l, s[1]));\n}\ndouble distanceSS(const L &s, const L &t) {\n\tif (intersectSS(s, t)) return 0;\n\treturn min(min(distanceSP(s, t[0]), distanceSP(s, t[1])),\n\t\tmin(distanceSP(t, s[0]), distanceSP(t, s[1])));\n}\n// ??????\nP crosspointLL(const L &l, const L &m) {\n\tdouble A = cross(l[1] - l[0], m[1] - m[0]);\n\tdouble B = cross(l[1] - l[0], l[1] - m[0]);\n\tif (abs(A) < EPS && abs(B) < EPS) return m[0]; // same line\n\tif (abs(A) < EPS) assert(false); // !!!PRECONDITION NOT SATISFIED!!!\n\treturn m[0] + B / A * (m[1] - m[0]);\n}\n\nint main(void){\n\tint q;\n\tcin >> q;\n\tfor(int i=0;i<q;i++){\n\t\tvector<P> p(4);\n\t\tint x,y;\n\t\tfor(int j=0;j<4;j++){\n\t\t\tcin >> x >> y;\n\t\t\tp[j] = P(x,y);\n\t\t}\n\t\tL l0(p[0],p[1]),l1(p[2],p[3]);\n\t\tcout <<fixed << setprecision(20) << distanceSS(l0,l1) << endl;\n\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cmath>\n#include <iostream>\n \nusing namespace std;\nconst double EPS = 1e-10;\nint q;\nint xp0, yp0, xp1, yp1, xp2, yp2, xp3, yp3;\n \nstruct Point {\n    double x, y;\n    Point(double x = 0, double y = 0) : x(x), y(y) { }\n    Point operator+(Point p) {\n        return Point(x + p.x, y + p.y);\n   }\n    Point operator-(Point p) {\n        return Point(x - p.x, y - p.y);\n    }\n    Point operator*(double k) {\n        return Point(x * k, y * k);\n    }\n    Point operator/(double k) {\n        return Point(x / k, y / k);\n    }\n    bool operator==(Point p) {\n        return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n    }\n};\ntypedef Point Vector;\nint dcmp(double x) {\n    if (fabs(x) < EPS) return 0;\n    return x < 0 ? -1 : 1;\n}\ndouble Dot(Vector a, Vector b) {\n    return a.x * b.x + a.y * b.y;\n}\ndouble Cross(Vector a, Vector b) {\n    return a.x * b.y - a.y * b.x;\n}\ndouble Length(Vector a) {\n    return sqrt(Dot(a, a));\n}\ndouble DistancePS(Point p, Point a, Point b) {\n    if (a == b) return Length(p - a);\n    Vector v1 = b - a, v2 = p - a, v3 = p - b;\n    if (Dot(v1, v2) < 0) return Length(v2);\n    if (Dot(v1, v3) > 0) return Length(v3);\n    return fabs(Cross(v1, v2)) / Length(v1);\n}\nbool IntersectSS(Point a1, Point a2, Point b1, Point b2) {\n    double c1 = Cross(a2 - a1, b1 - a1), c2 = Cross(a2 - a1, b2 - a1);\n    double c3 = Cross(b2 - b1, a1 - b1), c4 = Cross(b2 - b1, a2 - b1);\n    return dcmp(c1) * dcmp(c2) < 0 && dcmp(c3) * dcmp(c4) < 0;\n}\n double DistanceSS(Point a1, Point a2, Point b1, Point b2) {\n    if (IntersectSS(a1, a2, b1, b2)) return 0.0;\n    return min(min(DistancePS(a1, b1, b2), DistancePS(a2, b1, b2)),\n               min(DistancePS(b1, a1, a2), DistancePS(b2, a1, a2)));\n}\n \nint main() {\n    cin >> q;\n    while (q--) {\n        cin >> xp0 >> yp0 >> xp1 >> yp1 >> xp2 >> yp2 >> xp3 >> yp3;\n        Point a1(xp0, yp0);\n        Point a2(xp1, yp1);\n        Point b1(xp2, yp2);\n        Point b2(xp3, yp3);\n        printf(\"%.10lf\\n\", DistanceSS(a1, a2, b1, b2));\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nconstexpr double EPS = 1e-14;\n\nstruct vec2 {\n    double x, y;\n    vec2 operator+(const vec2 rhs) {\n        return {x + rhs.x, y + rhs.y};\n    }\n    vec2 operator-(const vec2 rhs) {\n        return {x - rhs.x, y - rhs.y};\n    }\n    vec2 operator*(const double k) {\n        return {x * k, y * k};\n    }\n    vec2 operator/(const double k) {\n        return {x / k, y / k};\n    }\n};\n\nvoid printvec2(vec2 p, int precision) {\n    cout << setprecision(precision) << fixed << p.x << \" \" << p.y << endl;\n}\n\ndouble dot(vec2 a, vec2 b) {\n    return a.x * b.x + a.y * b.y;\n};\n\ndouble norm2(vec2 a) {\n    return dot(a, a);\n}\n\nstruct line {\n    vec2 p, l;\n};\n\nline make_line(vec2 a, vec2 b) {\n    return {a, b - a};\n}\n\ndouble cross(vec2 a, vec2 b) {\n    return a.x * b.y - a.y * b.x;\n}\n\nbool is_parallel(vec2 a, vec2 b) {\n    return abs(cross(a, b)) < EPS;\n}\n\nbool is_parallel(line a, line b) {\n    return is_parallel(a.l, b.l);\n}\n\ndouble operator/(vec2 a, vec2 b) {\n    assert(is_parallel(a, b));\n    return abs(b.x) < EPS ? a.y / b.y : a.x / b.x;\n}\n\nvec2 intersection(line l1, line l2) {\n    assert(!is_parallel(l1, l2));\n    double a = l1.p.x, b = l1.p.y, c = l1.l.x, d = l1.l.y;\n    double e = l2.p.x, f = l2.p.y, g = l2.l.x, h = l2.l.y;\n    double k = (h * (a - e) - g * (b - f)) / (g * d - c * h);\n    return {\n        a + k * c,\n        b + k * d\n    };\n}\n\nvec2 get_normal(vec2 p) {\n    return {-p.y, p.x};\n}\n\nvec2 foot(vec2 p, line l) {\n    line normal = {p, get_normal(l.l)};\n    return intersection(normal, l);\n}\n\nvec2 reflect(vec2 p, line l) {\n    vec2 f = foot(p, l);\n    return {2 * f.x - p.x, 2 * f.y - p.y};\n}\n\ndouble dist2(vec2 p, line l) {\n    return norm2(foot(p, l) - p);\n}\n\ndouble dist2(vec2 p, vec2 q) {\n    return norm2(q - p);\n}\n\nint sgn(double a) {\n    if (a < -EPS) return -1;\n    if (a > EPS) return 1;\n    return 0;\n}\n\nstruct segment {\n    vec2 a, b;\n};\n\nsegment make_segment(vec2 a, vec2 b) {\n    return {a, b};\n}\n\ndouble dist2(vec2 p, segment s) {\n    vec2 l = s.a, r = s.b;\n    for (int i = 0; i < 100; i++) {\n        vec2 ml = (l + r) / 3;\n        vec2 mr = (l + r) * 2 / 3;\n        if (dist2(p, ml) > dist2(p, mr)) {\n            l = ml;\n        } else {\n            r = mr;\n        }\n    }\n    return dist2(p, l);\n}\n\ntemplate<class T>\nstruct ext {\n    double val;\n    T x, y;\n};\n\ntemplate<class T>\next<T> ternary_2d(function<double(T, T)> f, T xl, T xr, T yl, T yr, bool maximum = true) {\n    if (!maximum) {\n        function<double(T, T)> g = [&](T a, T b){return -f(a, b);};\n        ext<T> ret = ternary_2d(g, xl, xr, yl, yr, true);\n        return {-ret.val, ret.x, ret.y};\n    }\n    // fix y\n    function<ext<T>(T, T, T)> fx = [&](T y, T l, T r) {\n        for (int i = 0; i < 100; i++) {\n            T ml = (l * 2 + r) / 3.0;\n            T mr = (l + r * 2) / 3.0;\n            if (f(ml, y) < f(mr, y)) {\n                l = ml;\n            } else {\n                r = mr;\n            }\n        }\n        ext<T> ret;\n        ret.x = l;\n        ret.y = y;\n        ret.val = f(l, y);\n        return ret;\n    };\n\n    for (int i = 0; i < 100; i++) {\n        T ml = (yl * 2 + yr) / 3.0;\n        T mr = (yl + yr * 2) / 3.0;\n        if (f(fx(ml, xl, xr).x, ml) < f(fx(mr, xl, xr).x, mr)) {\n            yl = ml;\n        } else {\n            yr = mr;\n        }\n    }\n    ext<T> ret;\n    ret.x = fx(yl, xl, xr).x;\n    ret.y = yl;\n    ret.val = f(ret.x, ret.y);\n    return ret;\n}\n\ndouble dist2(segment s, segment t) {\n    ext<vec2> ans;\n    function<double(vec2, vec2)> d = [&](vec2 a, vec2 b) {\n        return norm2(b - a);\n    };\n    ans = ternary_2d(d, s.a, s.b, t.a, t.b, false);\n    return ans.val;\n}\n\nvec2 intersection(segment s, segment t) {\n    ext<vec2> ans;\n    function<double(vec2, vec2)> d = [&](vec2 a, vec2 b) {\n        return norm2(b - a);\n    };\n    ans = ternary_2d(d, s.a, s.b, t.a, t.b, false);\n    assert(ans.val < EPS);\n    return {ans.x.x, ans.x.y};\n}\n\nint main() {\n    int q;\n    cin >> q;\n    while (q--) {\n        double x0, y0, x1, y1, x2, y2, x3, y3;\n        cin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n        segment a = make_segment({x0, y0}, {x1, y1}), b = make_segment({x2, y2}, {x3, y3});\n        cout << setprecision(10) << fixed << sqrt(dist2(a, b)) << endl;\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nconst int dx[]={0,1,0,-1,1,-1,-1,1};\nconst int dy[]={-1,0,1,0,1,1,-1,-1};\nconst int INF = 1<<30;\nconst double EPS = 1e-8;\n#define PB push_back\n#define mk make_pair\n#define fi first\n#define se second\n#define ll long long\n#define reps(i,j,k) for(int i = (j); i < (k); i++)\n#define rep(i,j) reps(i,0,j)\n#define MOD 1000000007\ntypedef pair<int,int> Pii;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\nstruct Point{\n    double x,y;\n    Point(){}\n    Point(double _x,double _y){\n        x = _x;\n        y = _y;\n    }\n    Point operator + (Point p){\n        return Point(x+p.x,y+p.y);\n    }\n  \n    Point operator - (Point p){\n        return Point(x-p.x,y-p.y);\n    }\n  \n    Point operator * (double k){\n        return Point(k*x,k*y);\n    }\n     \n    Point operator * (Point p){\n        return Point(p.x*x-p.y*y,p.x*y+p.y*x);\n    }\n\n    Point operator / (double k){\n        return Point(x/k,y/k);\n    }\n    \n    Point operator = (Point p){\n        x = p.x;\n        y = p.y;\n        return *this;\n    }\n\n    bool operator<(const Point &p)const{\n        //return y!=p.y?y<p.y:x<p.x; //y-x\n        return x!=p.x?x<p.x:y<p.y; //x-y\n    }\n\n};\ndouble dot(Point p, Point q){\n    return p.x*q.x+p.y*q.y;\n}\n  \ndouble cross(Point p,Point q){\n    return p.x*q.y-q.x*p.y;\n}\n  \ndouble norm(Point p){\n    //?????????????????§?????????2???\n    return p.x*p.x+p.y*p.y;\n}\n  \ndouble pabs(Point p){\n    //?????????????????§??????\n    return sqrt(norm(p));\n}\n\nPoint UnitVector(Point a){\n    //??????????????????\n    return a/pabs(a);\n}\n\ntypedef vector<Point> Polygon;\n\nstruct Line : Polygon{\n    Line(){}\n    Line(Point p,Point q){\n        PB(p);\n        PB(q);  \n    }\n};\n\nstruct Circle{\n    Point p; //?????????\n    double r; //??????\n    Circle(){}\n    Circle(Point _p,double _r){\n        p = _p;\n        r = _r;\n    }\n};\n\nint ccw(Point a,Point b,Point c){\n    b = b-a;\n    c = c-a;\n    if(cross(b,c) > 0)return +1; //a???b ??§???????¨?????????????c ccw\n    if(cross(b,c) < 0)return -1; //a???b ??§????¨?????????????c ccw\n    if(dot(b,c) < 0)return +2; // c--a--b;\n    if(pabs(b)<pabs(c))return -2; //a--b--c\n    return 0; //a--c--b\n}\n\nPoint projection(Line l, Point p){\n    double t = dot(p-l[0],l[0]-l[1]) / norm(l[0]-l[1]);\n    return l[0] + (l[0]-l[1])*t;\n}\n\nPoint reflection(Line l, Point p){\n    return p + (projection(l,p)-p)*2.0; \n}\n\nbool intersectLL(Line l,Line m){\n    return fabs(cross(l[1]-l[0],m[1]-m[0])) > EPS || //????????§??????\n            fabs(cross(l[1]-l[0],m[0]-l[0])) < EPS; //????????????\n}\n\nbool intersectLP(Line l, Point p){\n    return fabs(cross(l[1]-p,l[0]-p)) < EPS;\n}\n\nbool intersectLS(Line l,Line m){\n    return cross(l[1]-l[0],m[0]-l[0])* //m[0]?????´???l???????????????\n           cross(l[1]-l[0],m[1]-l[0]) < EPS; //m[1]?????´???l???????????????\n}\n\nbool intersectSS(Line l,Line m){\n    //??????l??¨??????m??????????????????????????????\n    return (ccw(l[0],l[1],m[0])*ccw(l[0],l[1],m[1])<=0)&&\n            (ccw(m[0],m[1],l[0])*ccw(m[0],m[1],l[1])<=0);\n}\n\nbool intersectSP(Line l, Point p){\n    //??????l??¨???p?????????????????????\n    return pabs(l[0]-p)+pabs(l[1]-p)-pabs(l[1]-l[0]) < EPS;\n}\n\nbool intersectCP(Circle c,Point p){\n    //???c??¨???p???????????????\n    //true->???c????????¨??????p????????¨????????????.\n    return fabs(pabs(p-c.p)-c.r)<EPS;\n}\n\nint intersectCL(Circle c,Line l,Point *p,Point *q){\n    if(norm(projection(l,c.p) - c.p) - c.r*c.r > EPS)return 0;\n    double d1 = pabs(c.p-l[0]);\n    double d2 = pabs(c.p-l[1]);\n    if(d1 < c.r + EPS && d2 < c.r + EPS)return 0;\n    if(d1 < c.r - EPS && d2 > c.r+EPS\n        || d1 > c.r + EPS && d2 < c.r -EPS)return 1;\n    Point h = projection(l,c.p);\n    if(dot(l[0] - h,l[1] - h) < 0)return 2;\n    return 0;\n}\n\nint intersectCC(Circle a,Circle b,Point *p,Point *q){\n    double dist = pabs(a.p-b.p);\n    if(dist < fabs(a.r-b.r) || dist > a.r+b.r){\n        //????????????????????´??????????????¨???\n        //????????????????????¨???????????¨???\n        *p = Point(1e15,1e15);\n        *q = Point(1e15,1e15);\n        return 0;\n    }\n    else if(fabs(dist-a.r-b.r) < EPS){\n        //??????1?????§????????£???????????¨???\n        Point way;\n        way = b.p-a.p;\n        *p = a.p+UnitVector(way)*a.r;\n        *q = *p;\n        return 1;\n    }\n    else{\n        //??????2?????§????????£???????????¨???\n        if(a.r < b.r){\n            swap(a.r,b.r);\n            swap(a.p,b.p);\n        }\n        double s = (a.r + b.r + dist) / 2.0 ;\n        double area = sqrt(s * (s - a.r) * (s - b.r) * (s - dist));\n        double h = 2.0 * area / dist;\n\n        Point  v = b.p-a.p;\n        v = UnitVector(v);\n        Point  m = a.p + (v*sqrt(a.r*a.r-h*h));\n        Point  n = v * Point(0.0,1.0);\n        \n        *p = m + (n * h);\n        *q = m - (n * h);\n        return 2;\n    }\n}\n\ndouble distanceLP(Line l,Point p){\n    //??´???l??¨???p????????¢\n    return pabs(p-projection(l,p));\n}\n\ndouble distanceLL(Line l,Line m){\n    //??´???l??¨??´???m????????¢\n    return intersectLL(l,m) ? 0.0 : distanceLP(l,m[0]);\n}\n\ndouble distanceLS(Line l,Line m){\n    //??´???l??¨??????m????????¢\n    if(intersectLS(l,m))return 0.0;\n    return min(distanceLP(l,m[0]),distanceLP(l,m[1]));\n}\n\ndouble distanceSP(Line l,Point p){\n    //??????l??¨???p????????¢\n    Point r = projection(l,p);\n    if(intersectSP(l,r))return pabs(r-p);\n    return min(pabs(l[0]-p),pabs(l[1]-p));\n}\n\ndouble distanceSS(Line l,Line m){\n    //??????l??¨??????m????????¢\n    if(intersectSS(l,m)) return 0.0;\n    return min(min(distanceSP(l,m[0]),distanceSP(l,m[1])),\n               min(distanceSP(m,l[0]),distanceSP(m,l[1])));\n}\n\ndouble TriangleArea(Point a,Point b,Point c){\n    b = b - a;\n    c = c - a;\n    return cross(b,c)*0.5; //?????????????????¨??????????????§??¨???\n}\n \ndouble VertexArea(Polygon v){\n    double subArea = 0.0;\n    rep(i,v.size()-1){\n        subArea += TriangleArea(v[0],v[i],v[i+1]);\n    }\n    return subArea; //?????????????????¨??????????????§??¨???\n}\n\nPoint crosspoint(Line l,Line m){\n    //??????l??¨??????m?????????\n    if(intersectSS(l,m) == false)return Point(INF,INF);\n    return m[0]+(m[1]-m[0])*cross(l[1]-l[0],l[1]-m[0])/cross(l[1]-l[0],m[1]-m[0]);\n}\n \nPolygon ConvexHull(Polygon v){\n    //??????????????????\n    int n = v.size();\n    int k = 0;\n    sort(v.begin(),v.end());\n    Polygon e(2*n);\n    for(int i = 0; i < n; i++){\n        while(k >= 2 && ccw(e[k-2],e[k-1],v[i])<=0)k--;\n        e[k++] = v[i];\n    }\n    for(int i = n-2, t = k+1; i >= 0; i--){\n        while(k >= t && ccw(e[k-2],e[k-1],v[i])<=0)k--;\n        e[k++] = v[i];\n    }\n    e.resize(k-1);\n    return e;\n}\n\nbool IsInnerPointVertex(Polygon v , Point p){\n    Line l;\n    l.PB(p);\n    l.PB(Point(0,INF));\n    if(v.size() == 2){\n        return ccw(v[0],v[1],p)==2;\n    }\n    int cnt = 0;\n    rep(i,v.size()){\n        Line m;\n        m.PB(v[i]);m.PB(v[(i+1)%v.size()]);\n        if(intersectSS(l,m))cnt++;\n    }\n    return cnt%2;\n}\n\nint main(){\n    int Q;\n    scanf(\"%d\",&Q);\n    while(Q--){\n        Line l,m;\n        double x1,y1,x2,y2;\n        scanf(\"%lf%lf%lf%lf\",&x1,&y1,&x2,&y2);\n        l.PB(Point(x1,y1));l.PB(Point(x2,y2));\n        scanf(\"%lf%lf%lf%lf\",&x1,&y1,&x2,&y2);\n        m.PB(Point(x1,y1));m.PB(Point(x2,y2));\n        printf(\"%.10f\\n\",distanceSS(l,m));\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\n#define _overload(_1,_2,_3,name,...) name\n#define _rep(i,n) _range(i,0,n)\n#define _range(i,a,b) for(int i=int(a);i<int(b);++i)\n#define rep(...) _overload(__VA_ARGS__,_range,_rep,)(__VA_ARGS__)\n\n#define _rrep(i,n) _rrange(i,n,0)\n#define _rrange(i,a,b) for(ll i=int(a)-1;i>=int(b);--i)\n#define rrep(...) _overload(__VA_ARGS__,_rrange,_rrep,)(__VA_ARGS__)\n\n#define _all(arg) begin(arg),end(arg)\n#define uniq(arg) sort(_all(arg)),(arg).erase(unique(_all(arg)),end(arg))\n#define getidx(ary,key) lower_bound(_all(arg),key)-begin(arg)\n#define clr(a,b) memset((a),(b),sizeof(a))\n#define bit(n) (1LL<<(n))\n\nusing namespace std;\n\nusing R=long double;\nconst R EPS = 1E-11; //[-1000:1000]->EPS=1e-8\nconst R INF = 1E40;\nconstexpr R PI = acos(R(-1));\ninline int sgn(const R& r){ return (r > EPS) - (r < -EPS);}\n\nusing P=complex<R>;\nconstexpr P O = P(0,0);\nistream& operator >> (istream& is,P& p){ R x,y;is >> x >> y; p=P(x,y); return is;}\nostream& operator << (ostream& os,P& p){ os << real(p) << \" \" << imag(p); return os;}\n\n//?????? dot ?????? det\ninline R dot(P o,P a,P b){a-=o,b-=o; return real(conj(a)*b);}\ninline R det(P o,P a,P b){a-=o,b-=o; return imag(conj(a)*b);}\n\nusing L=struct{P s,t;};\ninline P vec(L l){return l.t-l.s;}\n\n// ?°???± verify AOJ CGL_1_A\nP proj(P o,P a,P b){ a-=o,b-=o; return a*real(b/a);}\nP proj(L l,P p){ return l.s+proj(l.s,l.t,p);}\n// ????°? verify AOJ CGL_1_B\nP refl(L l,P p){ return R(2.0)*proj(l,p)-p;}\n// CCW verify AOJ CGL_1_C\nenum CCW{ LEFT = 1,RIGHT = 2,BACK = 4,FRONT = 8,ON = 16};\ninline int ccw(P o,P a, P b) {//???a??¨???b???????????????????????????\n\tif (sgn(det(o,a,b)) > 0) return LEFT;    // counter clockwise\n\tif (sgn(det(o,a,b)) < 0) return RIGHT;   // clockwise\n\tif (sgn(dot(o,a,b)) < 0) return BACK;    // b--base--a on line\n\tif (sgn(norm(a-o)-norm(b-o)) < 0) return FRONT;   // base--a--b on line\n\treturn ON;// base--b--a on line  a??¨b????????????????????????\n}\n\n// ?????´ ?????? verify AOJ CGL_2_A\nbool vertical(L a, L b) {return sgn(dot(O,vec(a),vec(b)))==0;}\nbool parallel(L a, L b) {return sgn(det(O,vec(a),vec(b)))==0;}\n\n// ????????´????????? \nbool eql(L a,L b){ return (parallel(a,b) && sgn(det(a.s,a.t,b.s))==0);}\n\n// ???????????????verify AOJ CGL_2_B ???????????????????????´??????1,????????´??????0\nbool ill(L a,L b){ return parallel(a,b)==false;}\nbool ils(L l,L s,int end=0){ return sgn(det(l.s,l.t,s.s)*det(l.s,l.t,s.t))<=-end;}\nbool iss(L a,L b,int end=0){\n\tint s1=ccw(a.s,a.t,b.s)|ccw(a.s,a.t,b.t);\n\tint s2=ccw(b.s,b.t,a.s)|ccw(b.s,b.t,a.t);\n\tif(end) return (s1&s2)==(LEFT|RIGHT);\n\treturn (s1|s2)&ON || (s1&s2)==(LEFT|RIGHT);\n}\n\n// ?????? verify AOJ CGL_2_C\nP cross(L a,L b){\n\tR s1=det(a.s,b.s,b.t);\n\tR s2=s1+det(a.t,b.t,b.s);\n\treturn a.s+s1/s2*(a.t-a.s);\n}\n\t\n// ?????¢ verify AOJ CGL_2_D\nR dlp(L l,P p){return abs(det(l.s,l.t,p))/abs(vec(l));}\nR dsp(L s,P p){\n\tif(sgn(dot(s.s,s.t,p))<=0) return abs(p-s.s);\n\tif(sgn(dot(s.t,s.s,p))<=0) return abs(p-s.t);\n\treturn dlp(s,p);\n}\nR dll(L a,L b){return ill(a,b)?0:dlp(a,b.s);}\nR dls(L l,L s){return ils(l,s)?0:min(dlp(l,s.s),dlp(l,s.t));}\nR dss(L a,L b){return iss(a,b)?0:min({dsp(a,b.s),dsp(a,b.t),dsp(b,a.s),dsp(b,a.t)});}\n\n\nint main(void){\n\tint n;\n\tcin >> n;\n\tcout.precision(20);\n\trep(i,n){\n\t\tP a,b,c,d;\n\t\tcin >> a >> b >> c >> d;\n\t\tL s1={a,b},s2={c,d};\n\t\tR ans=dss(s1,s2);\n\t\tcout << fixed << ans << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define FOR(i,a,b) for(int i=(a);i<(b);++i)\n#define rep(i,n)   FOR(i,0,n)\n#define pb emplace_back\n#define mp make_pair\ntypedef long long ll;\ntypedef pair<int,int> pint;\n\n#define eps (1e-10)\nstruct Point{\n    double x,y;\n    Point(){}\n    Point(double x,double y):x(x),y(y){}\n    Point operator+(Point p) {return Point(x+p.x,y+p.y);}\n    Point operator-(Point p) {return Point(x-p.x,y-p.y);}\n    Point operator*(double k){return Point(x*k,y*k);}\n    double norm(){return x*x+y*y;}\n    double abs(){return sqrt(norm());}\n    bool operator == (const Point &p) const{\n    return fabs(x-p.x)<eps && fabs(y-p.y)<eps;\n  }\n  double dot(Point p){return x*p.x+y*p.y;}\n  double det(Point p){return x*p.y-y*p.x;}\n};\nstruct Line{\n  Point p1,p2;\n  Line(){}\n  Line(Point p1, Point p2):p1(p1),p2(p2){}\n};\nint ccw(Point a,Point b,Point c){\n  Point t1=b-a,t2=c-a;\n  if(t1.det(t2)> eps) return 1;//counter clockwise\n  if(t1.det(t2)< -eps) return -1;//clockwise\n  if(t1.dot(t2)< -eps) return 2;//c-a-b online\n  if(t1.norm()<t2.norm()) return -2;//a-b-c online\n  return 0;//a-c-b online\n}\nbool intersectSS(Point a,Point b,Point c,Point d){\n  return (ccw(a,b,c)*ccw(a,b,d)<=0&&ccw(c,d,a)*ccw(c,d,b)<=0);\n}\nbool intersectSS(Line l1,Line l2){\n  return intersectSS(l1.p1,l1.p2,l2.p1,l2.p2);\n}\nbool isOrthogonal(Point a,Point b){\n  return fabs(a.dot(b))<eps;\n}\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n  return isOrthogonal(a1-a2,b1-b2);\n}\nbool isParallel(Point a,Point b){\n  return fabs(a.det(b))<eps;\n}\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n  return isParallel(a1-a2,b1-b2);\n}\nPoint CrossPoint(Line l1,Line l2){\n    double a=(l1.p2-l1.p1).det(l2.p2-l2.p1);\n    double b=(l1.p2-l1.p1).det(l1.p2-l2.p1);\n    if(fabs(a)<eps&&fabs(b)<eps) return l2.p1;\n    return l2.p1+(l2.p2-l2.p1)*(b/a);\n}\nPoint project(Line l,Point p){\n  Point base=l.p2-l.p1;\n  double r=(p-l.p1).dot(base)/base.norm();\n  return l.p1+base*r;\n}\nPoint reflect(Line l,Point p){\n  return p+(project(l,p)-p)*2.0;\n}\nint main(){\n    int q;\n    double xp0,yp0,xp1,yp1,xp2,yp2,xp3,yp3;\n    cin>>q;\n    while(q--){\n        cin>>xp0>>yp0>>xp1>>yp1>>xp2>>yp2>>xp3>>yp3;\n        Point p0(xp0,yp0),p1(xp1,yp1),p2(xp2,yp2),p3(xp3,yp3);\n        if(intersectSS(p0,p1,p2,p3)) cout<<0<<endl;\n        else cout<<fixed<<setprecision(10)<<min(min((p0-p2).abs(),(p1-p3).abs()),min((p0-p3).abs(),(p1-p2).abs()))<<endl;\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n#define EPS (1e-10)    //誤差\ntypedef complex<double> P;\n\n//実数同士の比較\nbool EQ(double a, double b){\n    return (abs(a - b) < EPS);\n}\n\n//二つのベクトルが等しいかどうか\nbool EQV(P a, P b){\n    return (EQ(a.real(), b.real()) && EQ(a.imag(), b.imag()));\n}\n\n//内積\ndouble dot(P a, P b){\n    return (a.real() * b.real() + a.imag() * b.imag());\n}\n\n//外積\ndouble cross(P a, P b){\n    return (a.real() * b.imag() - a.imag() * b.real());\n}\n\n// 点a,bを通る直線と点cとの距離\ndouble distance_l_p(P a, P b, P c) {\n  return abs(cross(b-a, c-a)) / abs(b-a);\n}\n\n// 点cが線分a,b上にあるかないか(3)\nint is_point_on_line(P a, P b, P c) {\n  // |a-c| + |c-b| <= |a-b| なら線分上\n  return (abs(a-c) + abs(c-b) < abs(a-b) + EPS);\n}\n\n// 点a,bを端点とする線分と点cとの距離\ndouble distance_ls_p(P a, P b, P c) {\n  if ( dot(b-a, c-a) < EPS ) return abs(c-a);\n  if ( dot(a-b, c-b) < EPS ) return abs(c-b);\n  return abs(cross(b-a, c-a)) / abs(b-a);\n}\n\n// a1,a2を端点とする線分とb1,b2を端点とする線分の交差判定\nint is_intersected_ls(P a1, P a2, P b1, P b2) {\n  return ( cross(a2-a1, b1-a1) * cross(a2-a1, b2-a1) < EPS ) &&\n         ( cross(b2-b1, a1-b1) * cross(b2-b1, a2-b1) < EPS );\n}\n\n// a1,a2を通る直線とb1,b2を通る直線の交点計算\nP intersection_l(P a1, P a2, P b1, P b2) {\n  P a = a2 - a1; P b = b2 - b1;\n  return a1 + a * cross(b, b1-a1) / cross(b, a);\n}\n\nint main(){\n   \n   int q; cin >> q;\n    for(int i = 0; i < q; i++){\n        P p0, p1, p2, p3; cin >> p0.real() >> p0.imag() >> p1.real() >> p1.imag() >> p2.real() >> p2.imag() >> p3.real() >> p3.imag();\n        double ans = 1e10;\n        ans = min(ans, distance_ls_p(p0, p1, p2));\n        ans = min(ans, distance_ls_p(p0, p1, p3));\n        ans = min(ans, distance_ls_p(p2, p3, p0));\n        ans = min(ans, distance_ls_p(p2, p3, p1));\n        if(is_intersected_ls(p0, p1, p2, p3)) ans = 0.0;\n        printf(\"%.10f\\n\", ans);\n\n    }\n    return 0;\n}\n\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\nusing namespace std;\n\n#define pb push_back\n#define fst first\n#define snd second\n\n#define fr(i,n)     for (int i = 0; i < n; i++)\n#define frr(i,n)    for (int i = 1; i <= n; i++)\n\n#define endl '\\n'\n#define gnl cout << endl\n#define chapa cout << \"oi meu chapa\" << endl\n#define fastio ios_base::sync_with_stdio(false); cin.tie(NULL)\n//cout << setprecision(9)<<fixed;\n\n#define dbg(x)  cout << #x << \" = \" << x << endl\n#define all(x)  x.begin(),x.end()\n\ntypedef long long int ll;\ntypedef pair<int,int> pii;\ntypedef vector<int> vi;\ntypedef vector<pii> vii;\n\nconst int INF = 0x3f3f3f3f;\nconst ll llINF = (long long)(1e18) + 100;   \nconst int MAXN = 1e5 + 10;\n\n\nusing coord = long double;\nconst long double pi = acos(-1);\nconst long double EPS = 1e-8;\n\nint sign(coord x) { return (x > EPS) - (x < -EPS); }\ncoord sq(coord x) { return x * x; }\n\nstruct point {\n\tcoord x, y;\n\tpoint() : x(0), y(0) {} point(coord _x, coord _y): x(_x), y(_y) {}\n\tinline point operator+(point& p){ return {x + p.x, y + p.y}; }\n\tinline point operator-(point& p){ return {x - p.x, y - p.y}; }\n\tinline point operator*(coord o){ return {x * o, y * o}; }\n\tinline point operator/(coord o){ return {x / o, y / o}; }\n\tinline void operator=(point& p){ x = p.x, y = p.y; }\n\tinline bool operator==(point& p){return sign(x - p.x) == 0 and sign(y - p.y) == 0; }\n\n\tinline coord operator*(point p){ return x * p.x + y * p.y; } // |a||b|cos(thta)\n\tinline coord operator^(point p){ return x * p.y - y * p.x; } // |a||b|sin(thta)\n\n\tinline int ccw(point p){ return sign(*this ^ p); } // ccw  -1 left, 0 over, 1 right\n\n\tinline long double norm(){ return hypot(x, y); }\n\tinline coord norm2(){ return x * x + y * y; }\n\n\tinline point rot90(){return {-y, x}; }\n\tinline point rot(long double ang){ return {cos(ang) * x - sin(ang) * y, sin(ang) * x + cos(ang) * y}; }\n\n\tinline void print(){ cout<<x<<' '<<y<<'\\n'; }\n};\n\nstruct line {\n\tpoint p; coord c; //p *<x,y> = c\n\tline() {} line(point _p, coord _c): p(_p), c(_c) {}\n\tline(point a, point b) : p((b - a).rot90()), c(p * a) {}\n\tinline line parll(point v){ return line(p, p * v); }// parallel line at point v\n\tinline line perp(){ return line(p.rot90(), c); }// perpendicular line\n\n\tbool contains(point v){ return sign(p * v - c) == 0; }\n\tbool intsec(line l){ return sign(p ^ l.p) != 0; } // can be the same line\n\n\tpoint get_intsec(line l){ coord d = p ^ l.p; \n\t\treturn point((c * l.p.y - l.c * p.y) / d, (p.x * l.c - c * l.p.x) / d ); }\n\tcoord dist(point v){ return abs(p * v - c) / p.norm2(); }\n};\n\nstruct segment {\n\tpoint a, b;\n\tsegment() {} segment(point _a, point _b): a(_a), b(_b) {}\n\n\tbool contains(point p){return sign((p-a)^(b-a)) == 0 and sign((p-a)*(b-a)) >= 0 and sign((p-b)*(a-b)) >= 0;}\n\t\n\tint ccw(point p){ return((b - a).ccw(p)); } // ccw  -1 left, 0 over, 1 right  of seg a->b\n\n\tbool intsec(segment q){ segment p = *this;\n\t\tif (p.contains(q.a) or p.contains(q.b) or q.contains(p.a) or q.contains(p.b))\n\t\t\treturn true;\n\t\treturn p.ccw(q.a-p.a)*p.ccw(q.b-p.a) == -1 and q.ccw(p.a-q.a)*q.ccw(p.b-q.a) == -1;\t\n\t}\n\n\tcoord dist(segment q){segment p = *this; \n\t\treturn p.intsec(q)? 0 : min({p.dist(q.a), p.dist(q.b), q.dist(p.a), q.dist(p.b)});\t}\n\n\tcoord dist(point p){\n\t\tif (sign(((p - a) * (b - a))) >= 0 and sign((p - b) * (a - b)) >= 0)\n\t\t\treturn abs((p - a) ^ (b - a)) / (b - a).norm();\n\t\treturn min((p - a).norm(), (p - b).norm());\n\t}\n};\n\nint32_t main(){\n\tfastio;\n\tcout<<setprecision(12)<<fixed;\n\tint n;\n\tlong double a, b, c, d;\n\t\n\tcin>>n;\n\twhile (n--){\n\t\tcin>>a>>b>>c>>d;\n\t\tsegment s = segment(point(a, b), point(c, d));\n\t\tcin>>a>>b>>c>>d;\n\t\tsegment t = segment(point(a, b), point(c, d));\n\t\tcout<<s.dist(t)<<endl;\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define REP(i,n) for (long long i=0;i<(n);i++)\n#define FOR(i,a,b) for (long long i=(a);i<(b);i++)\n#define RREP(i,n) for(long long i=n;i>=0;i--)\n#define RFOR(i,a,b) for(long long i=(a);i>(b);i--)\n#define dump1d_arr(array) REP(i,array.size()) cerr << #array << \"[\" << (i) << \"] ==> \" << (array[i]) << endl;\n#define dump2d_arr(array) REP(i,array.size()) REP(j,array[i].size()) cerr << #array << \"[\" << (i) << \"]\" << \"[\" << (j) << \"] ==> \" << (array[i][j]) << endl;\n#define dump(x)  cerr << #x << \" => \" << (x) << endl;\n#define dumpP(p) cerr << \"( \" << p.first << \" , \" << p.second << \" )\" << ends;\n#define CLR(vec) { REP(i,vec.size()) vec[i] = 0; } \n#define SORT(c) sort((c).begin(),(c).end())\n#define MIN(vec) *min_element(vec.begin(), vec.end());\n#define MAX(vec) *max_element(vec.begin(), vec.end());\n#define UNIQ(vec) vec.erase(unique(vec.begin(), vec.end()),vec.end());\n#define IN(n,m)  (!(m.find(n) == m.end()))\n#define ENUM(m) for (auto itr = m.begin(); itr != m.end(); ++itr)\n#define dump_MAP(m) for(auto itr = m.begin(); itr != m.end(); ++itr) { cerr << itr->first << \" --> \"  << itr->second << endl; }\n#define FINDL(vec,x) (lower_bound(vec.begin(),vec.end(),x) - vec.begin())\n#define FINDU(vec,x) (upper_bound(vec.begin(),vec.end(),x) - vec.begin())\n#define ROUND(N) setprecision(N)\nusing namespace std;\nconstexpr double eps = 1e-10;\nconstexpr long mod = 1000000007;\nconstexpr short shINF = 32767;\nconstexpr long loINF = 2147483647;\nconstexpr long long llINF = 9223372036854775807;\ntypedef long long LL;\ntypedef vector<LL> VI;\ntypedef vector<VI> VVI;\ntypedef vector<string> VS;\ntypedef pair<LL,LL> pr;\ntypedef vector<pr> VP;\nstruct Order {\n  bool operator() (pr const& a,pr const& b) const {\n    return a.first > b.first || ((a.first == b.first) && (a.second > b.second));\n  }\n};\ntypedef struct _PT {\n  long double x, y;\n  _PT() {}\n  _PT(long double x,long double y) : x(x), y(y) {} \n  _PT operator + (_PT p){\n     return _PT(x + p.x, y + p.y);\n  }\n  _PT operator - (_PT p){\n     return _PT(x - p.x, y - p.y);\n  }\n  _PT operator * (long double d){\n     return _PT(d*x, d*y);\n  }\n  bool operator <(const struct _PT &e) const{\n     return x == e.x? (y < e.y) : x < e.x;\n  }\n  bool operator >(const struct _PT &e) const{\n     return x == e.x? (y > e.y) : x > e.x;\n  }\n\n  // --オプジェクトは位置ベクトル--\n\n  long double dist(_PT p){ //点pとの距離\n     return sqrt((x-p.x)*(x-p.x) + (y-p.y)*(y-p.y));\n  }\n\n  // --オブジェクトは幾何ベクトル--\n  \n  long double dot(_PT v){ //ベクトルvとの内積\n     return x * v.x + y * v.y;\n  }\n  \n  long double det(_PT v){ // ベクトルvとの外積\n     return x * v.y - v.x * y;\n  }\n\n  long double norm(void){ // ベクトルのノルム\n    return sqrt(x*x + y*y);\n  }\n\n  long double twiceNorm(void){ // ノルムの2乗\n    return x*x + y*y;\n  }\n\n  bool is_parallel(_PT v) { //ベクトルvと平行か(外積 = 0か)\n    return (abs(x * v.y - v.x * y) < eps);\n  }\n}P;\n\n\nclass Plane{\nprivate:\n  static bool cmp_x(const P &p1,const P &p2){\n      if (p1.x != p2.x) return p1.x < p2.x;\n      return p1.y < p2.y;\n  }\npublic:\n  P intersection(P p1,P p2,P q1,P q2) { // 直線p1-p2と直線q1-q2の交点\n    return p1 + (p2 - p1) * ((q2 - q1).det(q1 - p1) / (q2 - q1).det(p2 - p1));\n  }\n\n  bool on_seq(P p1,P p2,P q) { // 線分p1-p2上に点qがあるか\n    return (abs((p1 - q).det(p2 - q)) < eps) && ((p1 - q).dot(p2 - q) < (eps));\n  }\n\n  bool have_intersection(P p1,P p2,P q1,P q2) { // 線分p1-p2と線分q1-q2がが交点を持つか\n    if (abs((p1-p2).det(q1-q2)) > eps) {\n      P r = intersection(p1,p2,q1,q2);\n      return (on_seq(p1,p2,r) && on_seq(q1,q2,r));\n    }\n    else return (on_seq(p1,p2,q1) || on_seq(p1,p2,q2) || on_seq(q1,q2,p1) || on_seq(q1,q2,p2));\n  }\n\n  P projection(P v1,P v2) { // v1へのv2の正射影ベクトル\n    return (v1)*((v1).dot(v2) / v1.twiceNorm());\n  }\n\n  long double disPointToLineSeg(P p1,P p2,P q) { //線分p1-p2と点qの距離\n    if ((p1 - p2).dot(q - p2) < eps) return q.dist(p2);\n    if ((p2 - p1).dot(q - p1) < eps) return q.dist(p1);\n    else return (p1 + projection(p2-p1,q-p1)).dist(q);\n  }\n\n  long double disLineSeg(P p1,P p2,P q1,P q2) { //線分p1-p2と線分q1-q2の距離\n    //if (have_intersection(p1,p2,q1,q2)) return 0.0;\n    /*else*/ return min({disPointToLineSeg(p1,p2,q1),disPointToLineSeg(p1,p2,q2),disPointToLineSeg(q1,q2,p1),disPointToLineSeg(q1,q2,p2)});\n  }\n\n  vector<P> convexHull(vector<P> &point){\n      LL n = point.size();\n      vector<P> qs(n*2);\n      sort(point.begin(),point.end(),cmp_x);\n      long k = 0;\n\n      REP(i,n){ //下側凸包の作成\n        while(k > 1 && (qs[k-1] - qs[k-2]).det(point[i] - qs[k-1]) <= 0) k--;\n        qs[k++] = point[i];\n      }\n\n      for(long i = n - 2, t = k; i >= 0; i--){ //上側凸包の作成\n        while(k > t && (qs[k-1] - qs[k-2]).det(point[i] - qs[k-1]) <= 0) k--;\n        qs[k++] = point[i];\n      }\n      qs.resize(k-1);\n      return qs;\n  }\n\n  long double getArea(vector<P> &point){\n      long double s = 0;\n      LL n = point.size();\n      REP(i,n-1) s += point[i].det(point[i+1]);\n      s += point[n-1].det(point[0]);\n      return abs(s) * 0.5;\n  }\n\n  long double getAngle(P v1,P v2){ //2ベクトルのなす角を出す。\n    return acos(v1.dot(v2)/sqrt(v1.twiceNorm() * v2.twiceNorm()));\n  }\n\n};\n\nint main(void) {\n  Plane pl;\n  int N;\n  cin >> N;\n  P p1,p2,p3,p4;\n  REP(i,N) {\n      cin >> p1.x >> p1.y >> p2.x >> p2.y >> p3.x >> p3.y >> p4.x >> p4.y;\n      cout << ROUND(15) << pl.disLineSeg(p1,p2,p3,p4) << endl;\n  }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#include<vector>\n#include<stack>\n#include<queue>\n#include<list>\n#include<string>\n#include<cstring>\n#include<cstdlib>\n#include<cstdio>\n#include<cmath>\n#include<ctime>\nusing namespace std;\n\ntypedef long long ll;\n\nbool debug = false;\nconst int NIL = -1;\nconst int INF = 1000000000;\nconst int NUM = 100010;\nconst double eps = 1e-10;\nclock_t START, END;\n\nint X, Y, E;\n\n//basic defitition\nstruct Point {\n\tdouble x, y;\n\tPoint(double x = 0, double y = 0) :x(x), y(y) {}\n};\ntypedef Point Vector;\nVector operator + (Vector A, Vector B) { return Vector(A.x + B.x, A.y + B.y); }\nVector operator - (Point A, Point B) { return Vector(A.x - B.x, A.y - B.y); }\nVector operator * (Vector A, double p) { return Vector(A.x * p, A.y * p); }\nVector operator / (Vector A, double p) { return Vector(A.x / p, A.y / p); }\nbool operator < (const Point& a, const Point& b) { return a.x < b.x || (a.x == b.x && a.y < b.y); }\nint dcmp(double x) { if (fabs(x) < eps)return 0; else return x < 0 ? -1 : 1; }\nbool operator == (const Point& a, const Point& b) { return dcmp(a.x - b.x) == 0 && dcmp(a.y - b.y) == 0; }\n// basic operator\ndouble Dot(Vector A, Vector B) { return A.x * B.x + A.y * B.y; }\ndouble Length(Vector A) { return sqrt(Dot(A, A)); }\ndouble Angle(Vector A, Vector B) { return acos(Dot(A, B) / Length(A) / Length(B)); }\ndouble Cross(Vector A, Vector B) { return A.x * B.y - A.y * B.x; }\ndouble Area2(Point A, Point B, Point C) { return Cross(B - A, C - A); }\nVector Rotate(Vector A, double rad) { return Vector(A.x * cos(rad) - A.y * sin(rad), A.x * sin(rad) + A.y * cos(rad)); }\nVector Normal(Vector A) { double L = Length(A); return Vector(-A.y / L, A.x / L); } //A is not zero vector\n//point and line\nPoint GetLineIntersection(Point P, Vector v, Point Q, Vector w) {\n\tVector u = P - Q;\n\tdouble t = Cross(w, u) / Cross(v, w);\n\treturn P + v * t;\n}//two lines only have one intersection and Cross(v,w) is not zero\ndouble DistanceToLine(Point P, Point A, Point B) {\n\tVector v1 = B - A, v2 = P - A;\n\treturn fabs(Cross(v1, v2)) / Length(v1);\n}\ndouble DistanceToSegment(Point P, Point A, Point B) {\n\tif (A == B) return Length(P - A);\n\tVector v1 = B - A, v2 = P - A, v3 = P - B;\n\tif (dcmp(Dot(v1, v2)) < 0) return Length(v2);\n\telse if (dcmp(Dot(v1, v3)) > 0) return Length(v3);\n\telse return fabs(Cross(v1, v2)) / Length(v1);\n}\nPoint GetLineProjection(Point P, Point A, Point B) {\n\tVector v = B - A;\n\treturn A = v * (Dot(v, P - A) / Dot(v, v));\n}\nbool SegmentProperIntersection(Point a1, Point a2, Point b1, Point b2) {\n\tdouble c1 = Cross(a2 - a1, b1 - a1), c2 = Cross(a2 - a1, b2 - a1), c3 = Cross(b2 - b1, a1 - b1), c4 = Cross(b2 - b1, a2 - b1);\n\treturn dcmp(c1) * dcmp(c2) < 0 && dcmp(c3) * dcmp(c4) < 0;\n}\nbool OnSegment(Point p, Point a1, Point a2) {\n\treturn dcmp(Cross(a1 - p, a2 - p)) == 0 && dcmp(Dot(a1 - p, a2 - p)) < 0;\n}\n//polygon\ndouble ConvexPolygonArea(Point* p, int n) {\n\tdouble area = 0;\n\tfor (int i = 1; i < n - 1; i++)\n\t\tarea = Cross(p[i] - p[0], p[i + 1] - p[0]);\n\treturn area / 2;\n}\n\n\nint main(void)\n{\n\tif (debug) {\n\t\tSTART = clock();\n\t\tfreopen(\"in29.txt\", \"r\", stdin);\n\t\tfreopen(\"out.txt\", \"w\", stdout);\n\t}\n\tint q;\n\tdouble ans;\n\tPoint A, B, C, D;\n\tcin >> q;\n\tfor (int i = 0; i < q; i++) {\n\t\tscanf(\"%lf%lf%lf%lf%lf%lf%lf%lf\", &A.x, &A.y, &B.x, &B.y, &C.x, &C.y, &D.x, &D.y);\n\t\tif (SegmentProperIntersection(A, B, C, D))\n\t\t\tans = 0;\n\t\telse \n\t\t\tans = min(min(DistanceToSegment(A, C, D), DistanceToSegment(B, C, D)), min(DistanceToSegment(C, A, B), DistanceToSegment(D, A, B)));\n\t\tprintf(\"%.10lf\\n\", ans);\n\t}\n\tif (debug) {\n\t\tEND = clock();\n\t\tdouble endtime = (double)(END - START) / 1000;\n\t\tprintf(\"total time = %lf s\", endtime);\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <iomanip>\n\nusing namespace std;\n\nconst double EPS = 1e-8;\n\nint dcmp(double d) {\n    if (fabs(d) < EPS) {\n        return 0;\n    }\n    return d < 0? -1 : 1;\n}\n\nstruct Vector {\n    double x, y;\n    Vector(double x=0, double y=0): x(x), y(y){\n    }\n};\n\ntypedef Vector Point;\n\ndouble dot(const Vector& a, const Vector& b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(const Vector& a, const Vector& b) {\n    return a.x * b.y - a.y * b.x;\n}\n\nVector operator-(const Vector& a, const Vector& b) {\n    return Vector(a.x - b.x, a.y - b.y);\n}\n\nVector operator+(const Vector& a, const Vector& b) {\n    return Vector(a.x + b.x, a.y + b.y);\n}\n\nVector operator*(const Vector& a, const double p) {\n    return Vector(a.x * p, a.y * p);\n}\n\ndouble length(const Vector& v) {\n    return sqrt(dot(v, v));\n}\n\nbool intersectProp(const Point& a1, const Point& a2, const Point& b1, const Point& b2) {\n    double c1 = cross(a2 - a1, b1 - a1);\n    double c2 = cross(a2 - a1, b2 - a1);\n    double c3 = cross(b2 - b1, a1 - b1);\n    double c4 = cross(b2 - b1, a2 - b1);\n    \n    return dcmp(c1 * c2) == -1 && dcmp(c3 * c4) == -1;\n}\n\nbool onSegment(const Point& a, const Point& b, const Point& p) {\n    Vector pa = a - p;\n    Vector pb = b - p;\n    return dcmp(cross(pa, pb)) == 0 && dcmp(dot(pa, pb)) <= 0;\n}\n\nbool intersect(const Point& a1, const Point& a2, const Point& b1, const Point& b2) {\n    return intersectProp(a1, a2, b1, b2) || onSegment(a1, a2, b1) \n            || onSegment(a1, a2, b2) || onSegment(b1, b2, a1) || onSegment(b1, b2, a2);\n}\n\nPoint lineIntesection(const Point& p, const Vector& v, const Point& q, const Vector& w) {\n    Vector u = p - q;\n    return p + v * (cross(w, u) / cross(v, w)); \n}\n\ndouble distanceToSegment(const Point& a, const Point& b, Point& p) {\n    Vector u = b - a;\n    Vector v = p - a;\n    Vector w = p - b;\n    \n    if (dot(u, v) < 0) {\n        return length(v);\n    }\n    else if (dot(u, w) > 0) {\n        return length(w);\n    }\n    else {\n        return fabs(cross(u, v) / length(u));\n    }\n}\n\nint main() {\n    Point points[4];\n    int q;\n    cin >> q;\n    for (int kase = 0; kase < q; kase++) {\n        for (int i = 0; i < 4; i++) {\n            cin >> points[i].x >> points[i].y;\n        }\n        Vector v1 = points[1] - points[0];\n        Vector v2 = points[3] - points[2];\n\n        double ans = 0;\n        \n        if (intersect(points[0], points[1], points[2], points[3])) {\n            ans = 0;\n        }\n        else {\n            ans = min(min(distanceToSegment(points[2], points[3], points[0]),\n                    distanceToSegment(points[2], points[3], points[1])),\n                    min(distanceToSegment(points[0], points[1], points[2]),\n                    distanceToSegment(points[0], points[1], points[3])));\n        }\n        cout << fixed << setprecision(8) << ans << endl;\n    }\n   \n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define EPS 1e-10\n\nclass point {\npublic:\n\tdouble x, y;\n\tpoint() {}\n\tpoint( double x_, double y_ ) : x(x_), y(y_) {}\n\tpoint operator -( point p ) { return point( x - p.x, y - p.y ); }\n\tpoint operator +( point p ) { return point( x + p.x, y + p.y ); }\n\tpoint operator *( int a ) { return point( x * a, y * a ); }\n};\n\nclass segment {\npublic:\n\tpoint p1, p2;\n\tsegment() {}\n};\n\ndouble dot( point a, point b ) { return a.x * b.x + a.y * b.y; }\ndouble cross( point a, point b ) { return a.x * b.y - a.y * b.x; }\ndouble norm( point a ) { return a.x * a.x + a.y * a.y; }\n\ndouble distance( segment s, point p )\n{\n\tif( dot( s.p2 - s.p1, p - s.p1 ) < 0 ) return sqrt( norm( p - s.p1 ) );\n\tif( dot( s.p1 - s.p2, p - s.p2 ) < 0 ) return sqrt( norm( p - s.p2 ) );;\n\treturn fabs( cross( s.p2 - s.p1, p - s.p1 ) / sqrt( norm( s.p2 - s.p1 ) ) );\n}\n\nint ccw( point p0, point p1, point p2 )\n{\n\tpoint v1 = p1 - p0;\n\tpoint v2 = p2 - p1;\n\tif( cross( v1, v2 ) > EPS ) return 1;\n\tif( cross( v1, v2 ) < EPS ) return -1;\n\tif( dot( v1, v2 ) < -EPS ) return 2;\n\tif( norm( v1 ) < norm( v2 ) ) return -2;\n\treturn 0;\n}\n\nbool intersect( segment s1, segment s2 )\n{\n\treturn ccw( s1.p1, s1.p2, s2.p1 ) * ccw( s1.p1, s1.p2, s2.p2 ) <= 0 &&\n\t\t\tccw( s2.p1, s2.p2, s1.p1 ) * ccw( s2.p1, s2.p2, s1.p2 ) <= 0;\n}\n\ndouble distance( segment s1, segment s2 )\n{\n\tif( intersect( s1, s2 ) ) return 0;\n\treturn min( { distance( s1, s2.p1 ), distance( s1, s2.p2 ),\n\t\t\t\t\tdistance( s2, s1.p1 ), distance( s2, s1.p2 ) } );\n}\n\nint main()\n{\n\tint q;\n\tcin >> q;\n\tfor( int i = 0; i < q; i++ ) {\n\t\tsegment s1, s2;\n\t\tcin >> s1.p1.x >> s1.p1.y >> s1.p2.x >> s1.p2.y >> s2.p1.x >> s2.p1.y >> s2.p2.x >> s2.p2.y;\n\t\tcout << fixed << setprecision(10) << distance( s1, s2 ) << endl;\n\t}\n}\n\n"
  },
  {
    "language": "C++",
    "code": "\n//be naame khodaa\n#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef long double ld;\ntypedef pair <int, int> pii;\ntypedef complex<ld> PT;\ntypedef pair<PT, PT> LS;\n#define F first\n#define S second\n#define X real()\n#define Y imag()\n\ninline int in(){int x, y; y = scanf(\"%d\", &x); return x; }\n\nconst int N = -1;\nconst ld EPS = 1e-12;\n\nconst int LEFT = 0, RIGHT = 1, BACK = 2, FRONT = 3, ON = 4;\n\ninline bool Geq(ld a, ld b){ return a + EPS > b; }\ninline bool Grt(ld a, ld b){ return a > b + EPS; }\ninline bool Leq(ld a, ld b){ return a < b + EPS; }\ninline bool Lss(ld a, ld b){ return a + EPS < b; }\ninline bool Equ(ld a, ld b){ return Geq(a, b) && Geq(b, a); }\n\nistream& operator>> (istream& is, complex<ld>& p){\n\tld val;\n\tis >> val;\n\tp.real(val);\n\tis >> val;\n\tp.imag(val);\n\treturn is;\n}\n\nld dot(PT a, PT b){ return real(conj(a)*b); }\nld cross(PT a, PT b){ return imag(conj(a)*b); }\nld sqlen(PT a){ return dot(a, a); }\nld len(PT a){ return sqrt(sqlen(a)); }\n\nPT proj(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\treturn a + b*real(c/b);\n}\n\nPT reflect(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\treturn a + conj(c/b)*b;\n}\n\nPT rotate(PT a, PT b, ld theta){\n\treturn (b-a)*polar<ld>(1, theta) + a;\n}\n\nint relpos(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\tc /= b;\n\tif (Grt(c.imag(), 0)) return RIGHT;\n\tif (Lss(c.imag(), 0)) return LEFT;\n\tif (Lss(c.real(), 0)) return BACK;\n\tif (Grt(c.real(), 1)) return FRONT;\n\treturn ON;\n}\n\nint side(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\tld cr = (c/b).Y;\n\treturn Grt(cr, 0) ? 1 : (Lss(cr, 0) ? -1 : 0);\n}\n\n//If LineSegments Intersect\nbool intersect(PT a, PT b, PT c, PT d){\n\tint as = side(c, d, a), bs = side(c, d, b), cs = side(a, b, c), ds = side(a, b, d);\n\tif (as && as == bs || cs && cs == ds) return false;\n\telse if (as || bs || cs || ds) return true;\n\tfor (int j = 0; j < 2; j++, swap(a, c), swap(b, d)){\n\t\tld mx = min(a.X, b.X), Mx = max(a.X, b.X), my = min(a.Y, b.Y), My = max(a.Y, b.Y);\n\t\tfor (int k = 0; k < 2; k++, swap(c, d))\n\t\t\tif (Geq(c.X, mx) && Leq(c.X, Mx) && Geq(c.Y, my) && Leq(c.Y, My))\n\t\t\t\treturn true;\n\t}\n\treturn false;\n}\n\n//LineSegments Intersection (intersect is true)\nPT intersection(PT a, PT b, PT c, PT d){\n\tld c1 = cross(b-a, c-a), c2 = cross(b-a, d-a);\n\treturn (c1*d - c2*c)/(c1-c2);\n}\n\nld distLSP(PT a, PT b, PT c){\n\tint pos = relpos(a, b, proj(a, b, c));\n\tif (pos == BACK) return len(c-a);\n\tif (pos == FRONT) return len(c-b);\n\tb -= a, c -= a;\n\treturn abs(imag(c/b))*len(b);\n}\n\nld distLS(PT a, PT b, PT c, PT d){\n\tif (intersect(a, b, c, d)) return 0;\n\treturn min(min(distLSP(a, b, c), distLSP(a, b, d)), min(distLSP(c, d, a), distLSP(c, d, b)));\n}\n\nint main(){\t\n\tcout << setprecision(10) << fixed;\n\tfor (int i = in(); i; i--){\n\t\tPT a, b, c, d;\n\t\tcin >> a >> b >> c >> d;\n\t\tcout << distLS(a, b, c, d) << '\\n';;\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\nconst double eps=1e-9;\nstruct dot{\n\tdouble x,y;\n\tdouble len(){return sqrt(x*x+y*y);}\n\tdot(double a=0.0,double b=0.0){x=a,y=b;}\n\tdot operator +(const dot&b)const {return dot(x+b.x,y+b.y);}\n\tdot operator -(const dot&b)const {return dot(x-b.x,y-b.y);}\n\tdot operator *(const double&z)const {return dot(x*z,y*z);}\n\tbool operator <(const dot&b)const {return (x<b.x)||(x==b.x&&y<b.y);}\n\tvoid read(){scanf(\"%lf%lf\",&x,&y);} \n};\nstruct line{\n\tdot x1,x2;\n\tvoid read(){x1.read();x2.read();};\n\tdot getdot(){return x2-x1;}\n};\ndouble chaji(dot x,dot y){\n\treturn x.x*y.y-x.y*y.x;\n}\ndouble neiji(dot x,dot y){\n\treturn x.x*y.x+x.y*y.y;\n}\ndouble cos(dot x,dot y){\n\tif (!x.len()||!y.len())return 0;\n\treturn neiji(x,y)/x.len()/y.len();\n}\ndot Projection(dot x,line y){//求x关于直线y的投影点（垂足） \n\ty.x2=y.x2-y.x1;\n\tx=x-y.x1;\n\tdouble len=cos(x,y.x2)*x.len()/y.x2.len();\n\ty.x2=y.x2*len;\n\treturn y.x2+y.x1;\n}\ndot Reflection(dot x,line y){//求x关于直线y的对称点 \n\tdot z=Projection(x,y);\n\treturn z*2-x;\n}\nint Counter_Clockwise(dot x,line y){//求两个向量的五种关系 \n\tx=x-y.x1;y.x2=y.x2-y.x1;\n\tif (chaji(y.x2,x)!=0){\n\t\tif (chaji(y.x2,x)>0)return 1;\n\t\treturn 2;\n\t} \n\tif (fabs(cos(x,y.x2)+1)<eps)return 3;\n\tif (x.len()>y.x2.len())return 4;\n\treturn 5;\n} \nint Parallel_Orthogonal(line x,line y){//求两个直线是垂直还是平行还是其他 \n\tdot a=x.getdot(),b=y.getdot();\n\tif (chaji(a,b)==0)return 2;\n\tif (neiji(a,b)==0)return 1;\n\treturn 0;\n}\nint Intersection(line x,line y){//求两条直线是否相交 \n\tint Minx1=min(x.x1.x,x.x2.x),Maxx1=max(x.x1.x,x.x2.x);\n\tint Minx2=min(y.x1.x,y.x2.x),Maxx2=max(y.x1.x,y.x2.x);\n\tint Miny1=min(x.x1.y,x.x2.y),Maxy1=max(x.x1.y,x.x2.y);\n\tint Miny2=min(y.x1.y,y.x2.y),Maxy2=max(y.x1.y,y.x2.y);\n\tif (Minx1>Maxx2||Minx2>Maxx1)return 0;\n\tif (Miny1>Maxy2||Miny2>Maxy1)return 0;\n\tif (chaji(x.getdot(),y.x1-x.x1)*chaji(x.getdot(),y.x2-x.x1)>0)return 0;\n\tif (chaji(y.getdot(),x.x1-y.x1)*chaji(y.getdot(),x.x2-y.x1)>0)return 0;\n\treturn 1;\n}\ndot CrossPoint(line x,line y){//求两条线段的交点 \n\tif (fabs(cos(x.getdot(),y.getdot())-1)<eps){\n\t\tif (x.x2<y.x2)return y.x2;\n\t\telse return x.x2;\n\t}\n\telse {\n\t\tif (x.x2.x-x.x1.x==0){\n\t\t\tdouble k2=(y.x2.y-y.x1.y)/(y.x2.x-y.x1.x),b2=y.x2.y-y.x2.x*k2;\n\t\t\treturn dot(x.x2.x,x.x2.x*k2+b2);\n\t\t}\n\t\tif (y.x2.x-y.x1.x==0){\n\t\t\tdouble k1=(x.x2.y-x.x1.y)/(x.x2.x-x.x1.x),b1=x.x2.y-x.x2.x*k1;\n\t\t\treturn dot(y.x2.x,y.x2.x*k1+b1);\t\t\t\n\t\t}\n\t\tdouble k1=(x.x2.y-x.x1.y)/(x.x2.x-x.x1.x),b1=x.x2.y-x.x2.x*k1;\n\t\tdouble k2=(y.x2.y-y.x1.y)/(y.x2.x-y.x1.x),b2=y.x2.y-y.x2.x*k2;\n\t\tdot ans;\n\t\tans.x=(b2-b1)/(k1-k2);ans.y=ans.x*k1+b1;\n\t\treturn ans;\n\t}\n} \ndouble Dis(dot x,dot y){//点到点的距离 \n\treturn sqrt((x.x-y.x)*(x.x-y.x)+(x.y-y.y)*(x.y-y.y));\n}\ndouble dist(line x,dot y){//点到直线的距离 \n\tdot P=Projection(y,x);\n\tdouble k=neiji(x.getdot(),P-x.x1)/neiji(x.getdot(),x.getdot());\n\tif (k<=0)return Dis(x.x1,y);\n\tif (k>=1)return Dis(x.x2,y);\n\treturn Dis(y,P);\n}\ndouble Distance(line x,line y){\n\treturn min(min(dist(x,y.x1),dist(x,y.x2)),min(dist(y,x.x1),dist(y,x.x2)));\n}\nint main(){\n\tint T;\n\tscanf(\"%d\",&T);\n\twhile (T--){\n\t\tline x,y;\n\t\tx.read();y.read();\n\t\tif (Intersection(x,y))puts(\"0.0000000000\");\n\t\telse printf(\"%.10lf\\n\",Distance(x,y));\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cmath>\n#include <vector>\nusing namespace std;\nconst double EPS = 1e-10;\nconst int COUNTER_CLOCKWISE = 1, CLOCKWISE = -1, ONLINE_BACK = 2, ONLINE_FRONT = -2, ON_SEGMENT = 0;\nbool equals(double a, double b) {\n\treturn fabs(a - b) < EPS;\n}\nstruct Point {\n\tdouble x, y;\n\tPoint(double x = 0, double y = 0) :x(x), y(y) {}\n\tPoint operator + (Point rhs) {\n\t\treturn Point(x + rhs.x, y + rhs.y);\n\t}\n\tPoint operator - (Point rhs) {\n\t\treturn Point(x - rhs.x, y - rhs.y);\n\t}\n\tPoint operator * (double k) {\n\t\treturn Point(k * x, k * y);\n\t}\n\tbool operator < (const Point& rhs) const {\n\t\treturn x != rhs.x ? x < rhs.x : y < rhs.y;\n\t}\n\tbool operator == (const Point& rhs) const {\n\t\treturn equals(x, rhs.x) && equals(y, rhs.y);\n\t}\n\tdouble norm() {\n\t\treturn x * x + y * y;\n\t}\n\tdouble abs() {\n\t\treturn sqrt(norm());\n\t}\n};\ntypedef Point Vector;\nstruct Segment {\n\tPoint p1, p2;\n\tSegment(Point p1 = Point(), Point p2 = Point()) :p1(p1), p2(p2) {}\n};\ntypedef Segment Line;\nstruct Circle {\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0) :c(c), r(r) {}\n};\ntypedef vector<Point> Polygon;\ndouble dot(Vector a, Vector b) {\n\treturn a.x * b.x + a.y * b.y;\n}\ndouble cross(Vector a, Vector b) {\n\treturn a.x * b.y - a.y * b.x;\n}\nbool isOrthogonal(Vector a, Vector b) {\n\treturn equals(dot(a, b), 0);\n}\nbool isOrthogonal(Segment a, Segment b) {\n\treturn isOrthogonal(Vector(a.p2.x - a.p1.x, a.p2.y - a.p1.y), Vector(b.p2.x - b.p1.x, b.p2.y - b.p1.y));\n}\nbool isParallel(Vector a, Vector b) {\n\treturn equals(cross(a, b), 0);\n}\nbool isParallel(Segment a, Segment b) {\n\treturn isParallel(Vector(a.p2.x - a.p1.x, a.p2.y - a.p1.y), Vector(b.p2.x - b.p1.x, b.p2.y - b.p1.y));\n}\nPoint project(Point p, Segment s) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / base.norm();\n\treturn s.p1 + (base * r);\n}\nPoint reflect(Point p, Segment s) {\n\treturn p + (project(p, s) - p) * 2;\n}\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0, b = p2 - p0;\n\tif (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\telse if (cross(a, b) < -EPS) return CLOCKWISE;\n\telse if (dot(a, b) < -EPS) return ONLINE_BACK;\n\telse if (a.norm() < b.norm()) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\nbool intersect(Segment s1, Segment s2) {\n\treturn (ccw(s1.p1, s1.p2, s2.p1) * ccw(s1.p1, s1.p2, s2.p2) <= 0 && ccw(s2.p1, s2.p2, s1.p1) * ccw(s2.p1, s2.p2, s1.p2) <= 0); \n}\ndouble getDistance(Point a, Point b) {\n\treturn (b - a).abs();\n}\ndouble getDistancePL(Point p, Line l) {\n\treturn fabs(cross(l.p2 - l.p1, p - l.p1)) / (l.p2 - l.p1).abs();\n}\ndouble getDistancePS(Point p, Segment s) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0) return (p - s.p1).abs();\n\telse if (dot(s.p1 - s.p2, p - s.p2) < 0) return (p - s.p2).abs();\n\telse return getDistancePL(p, s);\n}\ndouble getDistance(Segment s1, Segment s2) {\n\tif (intersect(s1, s2)) return 0;\n\treturn min(min(getDistancePS(s2.p1, s1), getDistancePS(s2.p2, s1)), min(getDistancePS(s1.p1, s2), getDistancePS(s1.p2, s2)));\n}\nint main() {\n    int q;\n    scanf(\"%d\", &q);\n    while (q--) {\n    \tdouble x0, y0, x1, y1;\n    \tscanf(\"%lf%lf%lf%lf\", &x0, &y0, &x1, &y1);\n    \tSegment s1 = Segment(Point(x0, y0), Point(x1, y1));\n    \tscanf(\"%lf%lf%lf%lf\", &x0, &y0, &x1, &y1);\n    \tSegment s2 = Segment(Point(x0, y0), Point(x1, y1));\n    \tprintf(\"%.010lf\\n\", getDistance(s1, s2));\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long int64;\ntypedef pair<int,int> pii;\ntypedef vector<int> vi;\n\ntypedef complex<double> point;\nstruct line { point p, q; };\nstruct segment {point p, q; };\n\nconst double eps = 1e-9;\n\ndouble dot(point a, point b) { return real(conj(a) * b); }\n\ndouble cross(point a, point b) { return imag(conj(a) * b); }\n\npoint projection(const line &l, const point &p)\n{\n\tdouble t = dot(p - l.p, l.p - l.q) / norm(l.p - l.q);\n\treturn l.p + t * (l.p - l.q);\n}\n\nint ccw(point a, point b, point c)\n{\n\tb -= a; c -= a;\n\tif (cross(b, c) > 0) return +1; // counter clockwise\n\tif (cross(b, c) < 0) return -1; // clockwise\n\tif (dot(b, c) < 0) return +2; // c--a--b on line\n\tif (dot(b, b) < dot(c, c)) return -2; // a--b--c on line\n\treturn 0;\n}\n\nbool intersectSP(const segment &s, const point &p)\n{\n\treturn abs(s.p - p) + abs(s.q - p) - abs(s.q - s.p) < eps; // triangle inequality\n\t// return min(real(s.p), real(s.q)) <= real(p) &&\n\t// \t\treal(p) <= max(real(s.p), real(s.q)) &&\n\t// \t\tmin(imag(s.p), imag(s.q)) <= imag(p) &&\n\t// \t\timag(p) <= max(imag(s.p), imag(s.q)) &&\n\t// \t\tcross(s.p - p, s.q - p) == 0;\n}\n\nbool intersectSS(const segment &s, const segment &t)\n{\n\treturn ccw(s.p, s.q, t.p) * ccw(s.p, s.q, t.q) <= 0 &&\n\t\t\tccw(t.p, t.q, s.p) * ccw(t.p, t.q, s.q) <= 0;\n}\n\ndouble distanceSP(const segment &s, const point &p)\n{\n\tconst point r = projection({s.p, s.q}, p);\n\tif (intersectSP(s, r)) return abs(r - p);\n\treturn min(abs(s.p - p), abs(s.q - p));\n}\n\ndouble distanceSS(const segment &s, const segment &t)\n{\n\tif (intersectSS(s, t)) return 0;\n\treturn min(min(distanceSP(s, t.p), distanceSP(s, t.q)),\n\t\t\tmin(distanceSP(t, s.p), distanceSP(t, s.q)));\n}\n\n\npoint read(){\n\tdouble x, y; cin >> x >> y;\n\treturn point(x, y);\n}\n\nsegment readseg(){\n\tpoint p = read(), q = read();\n\treturn {p, q};\n}\n\nint main()\n{\n\tios_base::sync_with_stdio(0);\n\tcin.tie(0);\n\n\tint n; cin >> n;\n\tfor (int i = 0; i < n; ++i){\n\t\tsegment s1 = readseg(), s2 = readseg();\n\t\tcout.precision(20);\n\t\tcout << fixed << distanceSS(s1, s2) << endl;\t\t\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\ntypedef double ll;\n\nstruct Point\n{\n    ll x,y;\n    Point(){ x = y = 0.0; }\n    Point(ll _x, ll _y) : x(_x), y(_y){}\n\n    Point operator+ (Point p)\n    {\n        return Point(p.x + x, p.y + y);\n    }\n\n    Point operator- (Point p)\n    {\n        return Point(x - p.x, y - p.y);\n    }\n\n    ll operator* (Point p)\n    {\n        return p.x * x + p.y * y;\n    }\n\n    Point operator* (ll t)\n    {\n        return Point(x*t, y*t);\n    }\n\n    ll operator~ ()\n    {\n        return sqrt(x * x + y * y);\n    }\n\n    ll operator% (Point p)\n    {\n        return x * p.y - y * p.x;\n    }\n\n};\n\nbool areIntersectSegment(Point a, Point b, Point p, Point q)\n{\n    Point v1=(b-a);\n    Point v2=(q-p);\n    double t,t1;\n    if( v1 % v2 != 0 )\n    {\n        t = (double)(( p - a ) % v2) / (double)(v1 % v2);\n        t1 = (double)(( a - p ) % v1) / (double)(v2 % v1);\n        if( t >= 0.0 && t <= 1.0 && t1 >= 0.0 && t1 <= 1.0) return true;\n        else return false;\n    }\n    else\n    {\n        // Segment collinear\n        if( v1 % v2 == 0 && (p - a) % v1 == 0 )\n        {\n            t = (double)((p - a)*v1) /  (double)(v1*v1);\n            t1 = (double)((p+v2-a)*v1) / (double)(v1*v1);\n            //If are in opposite direction\n            if( v1 * v2 < 0 )\n            {\n                if( t1 <= 1.0 && 0.0 <= t ) return true;\n            }\n            else\n            {\n                if( t <= 1.0 && 0.0 <= t1 ) return true;\n            }\n        }\n    }\n    return false;\n}\n\nPoint projection(Point p1, Point p2, Point o)\n{\n    Point a = (p2 - p1);\n    Point b = (o - p1);\n    double t =( (a * b) / (a * a) );\n    if( t < 0.0 ) return p1;\n    if( t > 1.0 ) return p2;\n    return p1 + a * t;\n}\n\ndouble distanceSegment(Point a, Point b, Point p, Point q)\n{\n    double minimo = numeric_limits<double>::max();\n    Point aux;\n    if( !areIntersectSegment(a,b,p,q) )\n    {\n        minimo = min( minimo, ~(projection(a,b,p)-p) );\n        minimo = min( minimo, ~(projection(a,b,q)-q) );\n        minimo = min( minimo, ~(projection(p,q,a)-a) );\n        minimo = min( minimo, ~(projection(p,q,b)-b) );\n        return  minimo;\n    }\n    return 0.0;\n}\n\nint main()\n{\n    cout << fixed;\n    cout.precision(10);\n    ios::sync_with_stdio(0); cin.tie(0);\n    Point p0,p1,p2,p3,ans;\n    Point vec, vec1;\n    int q;\n    cin >> q;\n    while(q--)\n    {\n        cin >> p0.x >> p0.y >> p1.x >> p1.y >> p2.x >> p2.y >> p3.x >> p3.y;\n        cout << distanceSegment(p0, p1, p2, p3) << '\\n';\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "//距離を計算する用のメソッド置き場\n#include<bits/stdc++.h>\n//#include\"geometry.h\"\nusing namespace std;\nconst double EPS = 1e-9;   // 許容誤差。問題によって変える\ntypedef complex<double> P; // Point\n#define X real()\n#define Y imag()\ndouble norm(P &p1, P &p2)\n{\n    return (p1.X - p2.X) * (p1.X - p2.X) + (p1.Y - p2.Y) * (p1.Y - p2.Y);\n}\nnamespace std\n{\nbool operator<(const P p1, const P p2)\n{\n    return p1.X != p2.X ? p1.X < p2.X : p1.Y < p2.Y;\n}\nP operator+(const P p1, const P p2) { return P(p1.X + p2.X, p1.Y + p2.Y); }\nP operator-(const P p1, const P p2) { return P(p1.X - p2.X, p1.Y - p2.Y); }\nP operator*(const P p, double k) { return P(p.X * k, p.Y * k); }\nP operator/(const P p, double k) { return P(p.X / k, p.Y / k); }\n} // namespace std\n\n//Segment/L\nstruct Segment\n{\n    P p1, p2;\n    Segment() {}\n    Segment(P p1, P p2) : p1(p1), p2(p2) {}\n};\ntypedef Segment L;\n\n//外積cross(a,b) = |a||b|sinθ=a1b2+a2b1\ndouble cross(const P &a, const P &b)\n{\n    return (conj(a) * b).Y;\n}\n//内積dot(a,b) = |a||b|cosθ=a1b1+a2b2\ndouble dot(const P &a, const P &b)\n{\n    return (conj(a) * b).X;\n}\n\nP Projection(L l, P p)\n{\n    P base = l.p2 - l.p1;                        //始点\n    double r = dot(p - l.p1, base) / norm(base); //線分に対する倍率の計算\n    return l.p1 + base * r;\n}\n\nP Reflection(L l, P p)\n{\n    return p + (Projection(l, p) - p) * 2.0;\n}\n//位置関係判定(線分abを軸にcがどちら側にあるか)\nint ccw(P a, P b, P c)\n{\n    b -= a;\n    c -= a; //aからの向きを考える\n    if (cross(b, c) > EPS)\n        return +1; //clockwise\n    else if (cross(b, c) < -EPS)\n        return -1; //counter clockwise\n    else if (dot(b, c) < -EPS)\n        return +2; //c-a-b\n    else if (norm(b) < norm(c))\n        return -2; //a-b-c\n    else\n        return 0; //他\n}\n\n//Intersection Determination\nbool intersectLL(const L &l, const L &m)\n{\n    return abs(cross(l.p2 - l.p1, m.p2 - m.p1)) > EPS || // non-parallel\n           abs(cross(l.p2 - l.p1, m.p1 - l.p1)) < EPS;   // same L\n}\nbool intersectLS(const L &l, const L &s)\n{\n    return cross(l.p2 - l.p1, s.p1 - l.p1) * // s.p1 is left of l\n               cross(l.p2 - l.p1, s.p2 - l.p1) <\n           EPS; // s.p2 is right of l\n}\nbool intersectLP(const L &l, const P &p)\n{\n    return abs(cross(l.p2 - p, l.p1 - p)) < EPS;\n}\nbool intersectSS(const L &s, const L &t)\n{\n    return ccw(s.p1, s.p2, t.p1) * ccw(s.p1, s.p2, t.p2) <=0 &&\n        ccw(t.p1, t.p2, s.p1) * ccw(t.p1, t.p2, s.p2) <= 0;\n}\nbool intersectSP(const L &s, const P &p)\n{\n    return abs(s.p1 - p) + abs(s.p2 - p) - abs(s.p2 - s.p1) < EPS; // triangle inequality\n}\n\ndouble distanceLP(const L &l, const P &p){\n    return abs(p - Projection(l, p));\n}\ndouble distanceLL(const L &l, const L &m){\n    return intersectLL(l, m) ? 0 : distanceLP(l, m.p1);\n}\ndouble distanceLS(const L &l, const L &s){\n    if (intersectLS(l, s))\n        return 0;\n    return min(distanceLP(l, s.p1), distanceLP(l, s.p2));\n}\ndouble distanceSP(const L &s, const P &p){\n    const P r = Projection(s, p);\n    if (intersectSP(s, r))\n        return abs(r - p);\n    return min(abs(s.p1 - p), abs(s.p2 - p));\n}\ndouble distanceSS(const L &s, const L &t){\n    if (intersectSS(s, t))\n        return 0;\n    return min(min(distanceSP(s, t.p1), distanceSP(s, t.p2)),\n               min(distanceSP(t, s.p1), distanceSP(t, s.p2)));\n}\nP crosspoint(const L &l, const L &m){\n    double A = cross(l.p2 - l.p1, m.p2 - m.p1);\n    double B = cross(l.p2 - l.p1, l.p2 - m.p1);\n    if (abs(A) < EPS && abs(B) < EPS)\n        return m.p1; // same line\n    if (abs(A) < EPS)\n        assert(false); // !!!PRECONDITION NOT SATISFIED!!!\n    return m.p1 + B / A * (m.p2 - m.p1);\n}\n\n//Verify\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_A&lang=jp\nint main(){\n    int q;\n    cin>>q;\n    for (int i = 0; i < q;i++){\n        double x0,x1,x2,x3,y0,y1,y2,y3;\n        cin>>x0>>y0>>x1>>y1>>x2>>y2>>x3>>y3;\n        P p0 = P(x0, y0), p1 = P(x1, y1), p2 = P(x2, y2), p3 = P(x3, y3);\n        const L l1 = L(p0, p1), l2 = L(p2, p3);\n        printf(\"%.16f\\n\", distanceSS(l1, l2));\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n \n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n \nstatic const int COUNTER_CLOCKWISE=1;\nstatic const int CLOCKWISE=-1;\nstatic const int ONLINE_BACK=2;\nstatic const int ONLINE_FRONT=-2;\nstatic const int ON_SEGMENT=0;\n \nclass Point {\npublic:\n    double x,y;\n \n    Point(double x=0,double y=0):x(x),y(y) {}\n    Point operator + (Point p) {return Point(x+p.x,y+p.y);}\n    Point operator - (Point p) {return Point(x-p.x,y-p.y);}\n    Point operator * (double a) {return Point(a*x,a*y);}\n    Point operator / (double a) {return Point(x/a,y/a);}\n \n    double abs() {return sqrt(norm());}\n    double norm() {return x*x+y*y;}\n \n    bool operator<(const Point &p) const {\n        return x!=p.x ? x<p.x : y<p.y;\n    }\n    bool operator==(const Point &p) const {\n        return fabs(x-p.x)<EPS && fabs(y-p.y)<EPS;\n    }\n};\n \ntypedef Point Vector;\nstruct Segment {Point p1,p2;};\ntypedef Segment Line;\n \nclass Circle {\npublic:\n    Point c;\n    double r;\n    Circle(Point c=Point(),double r=0.0): c(c),r(r) {}\n};\n \ndouble dot(Vector a,Vector b) {\n    return  a.x*b.x+a.y*b.y;\n}\n \ndouble cross (Vector a,Vector b) {\n    return a.x*b.y-a.y*b.x;\n}\n \ndouble getDistance(Point a,Point b) {\n    return (a-b).abs();\n}\n \ndouble getDistanceLP(Line l,Point p) {\n    return abs(cross(l.p2-l.p1,p-l.p1)/(l.p2-l.p1).abs());\n}\n \ndouble getDistanceSP(Segment s,Point p) {\n    if(dot(s.p2-s.p1,p-s.p1)<0.0) return (p-s.p1).abs();\n    if(dot(s.p1-s.p2,p-s.p2)<0.0) return (p-s.p2).abs();\n    return getDistanceLP(s,p);\n}\n \nint ccw(Point p0,Point p1,Point p2) {\n    Vector a=p1-p0;\n    Vector b=p2-p0;\n    if(cross(a,b)>EPS) return COUNTER_CLOCKWISE;\n    if(cross(a,b)<-EPS) return CLOCKWISE;\n    return ON_SEGMENT;\n}\n \nbool intersect(Point p1,Point p2,Point p3,Point p4) {\n    return (ccw(p1,p2,p3)*ccw(p1,p2,p4)<=0 && ccw(p3,p4,p1)*ccw(p3,p4,p2)<=0);\n}\n \nbool intersect(Segment s1,Segment s2) {\n    return intersect(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n \ndouble getDistance(Segment s1,Segment s2) {\n    if(intersect(s1,s2)) return 0.0;\n    return min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n}\n \nint main(void) {\n    int q;cin>>q;\n    while(q) {\n        Segment s1,s2;\n        cin>>s1.p1.x>>s1.p1.y>>s1.p2.x>>s1.p2.y>>s2.p1.x>>s2.p1.y>>s2.p2.x>>s2.p2.y;\n        printf(\"%.10f\\n\",getDistance(s1,s2));\n        q--;\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nusing ld = long double;\nconst ld eps = 1e-8, pi = acos(-1.0);\n\nbool eq(ld a, ld b) {\n\treturn abs(a - b) < eps;\n}\n\nusing Point = complex<ld>;\nclass Line {\npublic:\n\tPoint a, b;\n};\nclass Circle {\npublic:\n\tPoint p;\n\tld r;\n};\n\nld dot(Point a, Point b) {\n\treturn real(conj(a) * b);\n}\n\nld cross(Point a, Point b) {\n\treturn imag(conj(a) * b);\n}\n\nint ccw(Point a, Point b, Point c) {\n\tb -= a, c -= a;\n\tif (cross(b, c) > eps) return 1;\n\tif (cross(b, c) < -eps) return -1;\n\tif (dot(b, c) < 0) return 2;\n\tif (norm(b) < norm(c)) return -2;\n\treturn 0;\n}\n\nbool isis_ll(Line l, Line m) {\n\treturn abs(cross(l.b - l.a, m.b - m.a)) > eps;\n}\n\nbool isis_ls(Line l, Line s) {\n\treturn (cross(l.b - l.a, s.a - l.a) * cross(l.b - l.a, s.b - l.a) < eps);\n}\n\nbool isis_lp(Line l, Point p) {\n\treturn abs(cross(l.b - p, l.a - p)) < eps;\n}\n\nbool isis_sp(Line s, Point p) {\n\treturn abs(s.a - p) + abs(s.b - p) - abs(s.b - s.a) < eps;\n}\n\nPoint proj(Line l, Point p) {\n\tld t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n\treturn l.a + t * (l.a - l.b);\n}\n\nPoint is_ll(Line s, Line t) {\n\tPoint sv = s.b - s.a, tv = t.b - t.a;\n\tassert(cross(sv, tv) != 0);\n\treturn s.a + sv * cross(tv, t.a - s.a) / cross(tv, sv);\n}\n\nbool isis_ss(Line s, Line t) {\n\tif (isis_ll(s, t)) return isis_ls(s, t) && isis_ls(t, s);\n\treturn isis_sp(s, t.a) || isis_sp(s, t.b) || isis_sp(t, s.a);\n}\n\nld dist_lp(Line l, Point p) {\n\treturn abs(p - proj(l, p));\n}\n\nld dist_ll(Line l, Line m) {\n\treturn isis_ll(l, m) ? 0 : dist_lp(l, m.a);\n}\n\nld dist_ls(Line l, Line s) {\n\treturn isis_ls(l, s) ? 0 : min(dist_lp(l, s.a), dist_lp(l, s.b));\n}\n\nld dist_sp(Line s, Point p) {\n\tPoint r = proj(s, p);\n\treturn isis_sp(s, r) ? abs(r - p) : min(abs(s.a - p), abs(s.b - p));\n}\n\nld dist_ss(Line s, Line t) {\n\tif (isis_ss(s, t)) return 0;\n\treturn min({ dist_sp(s, t.a), dist_sp(s, t.b), dist_sp(t, s.a), dist_sp(t, s.b) });\n}\n\nint main()\n{\n\tint q;\n\tld x1, x2, x3, x4, y1, y2, y3, y4;\n\tcout << fixed << setprecision(10);\n\tcin >> q;\n\twhile (q--) {\n\t\tcin >> x1 >> y1 >> x2 >> y2 >> x3 >> y3 >> x4 >> y4;\n\t\tLine l1 = { (Point) { x1, y1 }, (Point) { x2, y2 } };\n\t\tLine l2 = { (Point) { x3, y3 }, (Point) { x4, y4 } };\n\t\tcout << dist_ss(l1, l2) << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define double long double\nusing namespace std;\ntypedef complex<double> Point;\ntypedef pair<Point, Point> Line;\nconst double EPS = 1e-18;\n\n// 内積 |a||b|cosθ\ndouble dot(Point a, Point b){\n\t// return a.real() * b.real() + a.imag() * b.imag();\n\treturn (conj(a) * b).real();\n}\n// 外積、符号付面積の２倍　|a||b|sinθ\ndouble cross(Point a, Point b){\n\t// return a.real() * b.imag() - a.imag() * b.real();\n\treturn (conj(a) * b).imag();\n}\n// 点と直線の距離\ndouble line_to_point_dis(Line l, Point p){\n    Point a = l.first, b = l.second, c = p;\n    return fabs(cross(c - a, b - a)) / fabs(abs(b - a));\n}\n// 線分と直線の距離\ndouble seg_to_point_dis(Line l, Point p){\n    Point a = l.first, b = l.second, c = p;\n    if(dot(b - a, c - a) < EPS) return abs(c - a);\n    if(dot(a - b, c - b) < EPS) return abs(c - b);\n    return line_to_point_dis(l, p);\n}\n// 線分と線分の距離\ndouble seg_to_seg_dis(Line a, Line b){\n    double res = seg_to_point_dis(a, b.first);\n    res = min(res, seg_to_point_dis(a, b.second));\n    res = min(res, seg_to_point_dis(b, a.first));\n    res = min(res, seg_to_point_dis(b, a.second));\n    return res;\n}\n\nint main(){\n    int q;\n    cin >> q;\n    for(int i = 0; i < q; i++){\n        double x, y;\n        Point p[4];\n        for(int j = 0; j < 4; j++){\n            cin >> x >> y;\n            p[j] = {x, y};\n        }\n        Line s1 = {p[0], p[1]};\n        Line s2 = {p[2], p[3]};\n        double len = seg_to_seg_dis(s1, s2);\n        printf(\"%.10Lf\\n\", len);\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "///\n// File:  cgl_2_d.cpp\n// Author: ymiyamoto\n//\n// Created on Mon Oct 23 00:28:22 2017\n//\n#include <cmath>\n#include <cstdint>\n#include <iomanip>\n#include <iostream>\n\nusing namespace std;\n#define EPS 1e-10\n#define equals(x, y) (fabs(x - y) < EPS)\n\nstruct vector_t {\n  double x;\n  double y;\n\n  vector_t(double a, double b) : x(a), y(b)\n  {\n  }\n\n  double norm2()\n  {\n    return x * x + y * y;\n  }\n\n  double norm()\n  {\n    return sqrt(norm2());\n  }\n\n  double dot(vector_t a)\n  {\n    return x * a.x + y * a.y;\n  }\n\n  double cross(vector_t a)\n  {\n    return x * a.y - y * a.x;\n  }\n\n  vector_t operator*(double a)\n  {\n    return vector_t(a * x, a * y);\n  }\n};\n\nstruct point_t {\n  double x;\n  double y;\n\n  point_t operator+(const point_t a)\n  {\n    return point_t({x + a.x, y + a.y});\n  }\n\n  void print()\n  {\n    cout << fixed << setprecision(10) << x << \" \" << y << endl;\n  }\n\n  point_t operator+(const vector_t vec)\n  {\n    return point_t({x + vec.x, y + vec.y});\n  }\n\n  vector_t operator-(const point_t p)\n  {\n    return vector_t({x - p.x, y - p.y});\n  }\n\n  point_t project(point_t p1, point_t p2)\n  {\n    vector_t vec1(x - p1.x, y - p1.y);\n    vector_t vec2(p2.x - x, p2.y - y);\n    return point_t({x, y}) + vec1 * (vec1.dot(vec2) / vec1.norm2());\n  }\n\n  point_t reflect(point_t p1, point_t p2)\n  {\n    point_t proj = project(p1, p2);\n    return p2 + (proj - p2) * 2.0;\n  }\n};\n\nenum pos_t {\n  CCLOCKWISE = -1,\n  CLOCKWISE = 1,\n  ONLINE_BACK = 2,\n  ONLINE_FRONT = -2,\n  ON_SEGMENT = 0,\n};\n\npos_t ccw(point_t p0, point_t p1, point_t p2)\n{\n  if ((p1 - p0).cross(p2 - p0) > EPS) {\n    return CCLOCKWISE;\n  } else if ((p1 - p0).cross(p2 - p0) < -EPS) {\n    return CLOCKWISE;\n  } else if ((p1 - p0).dot(p2 - p0) < -EPS) {\n    return ONLINE_BACK;\n  } else {\n    if ((p1 - p0).norm2() < (p2 - p0).norm2()) {\n      return ONLINE_FRONT;\n    } else {\n      return ON_SEGMENT;\n    }\n  }\n}\n\nbool intersection(point_t p0, point_t p1, point_t p2, point_t p3)\n{\n  return (ccw(p0, p1, p2) * ccw(p0, p1, p3) <= 0) && (ccw(p2, p3, p0) * ccw(p2, p3, p1) <= 0);\n}\n\nstruct segment_t {\n  point_t a;\n  point_t b;\n\n  double distance(point_t p0)\n  {\n    vector_t vec1(a.x - b.x, a.y - b.y);\n    vector_t vec2(b.x - a.x, b.x - a.x);\n    if (vec1.dot(p0 - a) < 0.0) {\n      return (p0 - a).norm();\n    } else if (vec2.dot(p0 - b) < 0.0) {\n      return (p0 - b).norm();\n    } else {\n      return (b - a).cross(p0 - a) / (b - a).norm();\n    }\n  }\n};\n\nint32_t main()\n{\n  uint32_t q;\n  cin >> q;\n\n  for (uint32_t i = 0; i < q; i++) {\n    double x, y;\n    cin >> x >> y;\n    point_t p0({x, y});\n    cin >> x >> y;\n    point_t p1({x, y});\n    cin >> x >> y;\n    point_t p2({x, y});\n    cin >> x >> y;\n    point_t p3({x, y});\n    if (intersection(p0, p1, p2, p3)) {\n      cout << fixed << setprecision(10) << 0.0 << endl;\n    } else {\n      segment_t seg1({p0, p1});\n      segment_t seg2({p2, p3});\n      double dist = min(seg2.distance(p0), min(seg2.distance(p1), min(seg1.distance(p2), seg1.distance(p3))));\n      cout << fixed << setprecision(10) << dist << endl;\n    }\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n#define rep(i,n) for (int i=0; i < (n); i++)\ntypedef double D;      // ??§?¨?????????????double???long double?????????\ntypedef complex<D> P;  // Point\ntypedef pair<P, P> L;  // Line\ntypedef vector<P> VP;\nconst D EPS = 1e-9;    // ?¨±??????????????????????????£????????????\n#define X real()\n#define Y imag()\n#define LE(n,m) ((n) < (m) + EPS)\n#define GE(n,m) ((n) + EPS > (m))\n#define EQ(n,m) (abs((n)-(m)) < EPS)\n \n// ?????????dot(a,b) = |a||b|cos??\nD dot(P a, P b) {return (conj(a)*b).X; }\n \n// ?????????cross(a,b) = |a||b|sin??\nD cross(P a, P b) {  return (conj(a)*b).Y;}\n \n// ??????????????????\nint ccw(P a, P b, P c) {\n  b -= a;  c -= a;\n  if (cross(b,c) >  EPS) return +1;  // counter clockwise\n  if (cross(b,c) < -EPS) return -1;  // clockwise\n  if (dot(b,c)   < -EPS) return +2;  // c--a--b on line\n  if (norm(b) < norm(c)) return -2;  // a--b--c on line or a==b\n  return 0;                          // a--c--b on line or a==c or b==c\n}\n\nbool isparallel(L a,L b){\n  return cross(a.first-a.second,b.first-b.second) == 0.0 ;\n}\n \n/* ?????????????????´???????????????????????????????????????????????\\????????´????????????????????¨????????????isec???intersect?????\\ */\n \n// ??´?????¨???\nbool isecLP(P a1, P a2, P b) {\n  return abs(ccw(a1, a2, b)) != 1;  // return EQ(cross(a2-a1, b-a1), 0); ??¨??????\n}\n \n// ??´?????¨??´???\nbool isecLL(P a1, P a2, P b1, P b2) {\n  return !isecLP(a2-a1, b2-b1, 0) || isecLP(a1, b1, b2);\n}\n \n// ??´?????¨??????\nbool isecLS(P a1, P a2, P b1, P b2) {\n  return cross(a2-a1, b1-a1) * cross(a2-a1, b2-a1) < EPS;\n}\n \n// ????????¨??????\nbool isecSS(P a1, P a2, P b1, P b2) {\n  return ccw(a1, a2, b1)*ccw(a1, a2, b2) <= 0 &&\n         ccw(b1, b2, a1)*ccw(b1, b2, a2) <= 0;\n}\n \n// ????????¨???\nbool isecSP(P a1, P a2, P b) {\n  //return !ccw(a1, a2, b);\n   return abs(a1 - b) + abs(a2 - b) - abs(a2 - a1) < EPS;  //Perfective\n}\n \n \n/* ?????¢????????´?????????????????????????????????????????? */\n \n// ???p?????´???a???????°???±????????????\nP proj(P a1, P a2, P p) {\n  return a1 + dot(a2-a1, p-a1)/norm(a2-a1) * (a2-a1);\n}\n \n// ???p?????´???a??????????°?????????????\nP reflection(P a1, P a2, P p) {\n  return 2.0*proj(a1, a2, p) - p;\n}\n \nD distLP(P a1, P a2, P p) {\n  return abs(proj(a1, a2, p) - p);\n}\n \nD distLL(P a1, P a2, P b1, P b2) {\n  return isecLL(a1, a2, b1, b2) ? 0 : distLP(a1, a2, b1);\n}\n \nD distLS(P a1, P a2, P b1, P b2) {\n  return isecLS(a1, a2, b1, b2) ? 0 : min(distLP(a1, a2, b1), distLP(a1, a2, b2));\n}\n \nD distSP(P a1, P a2, P p) {\n  P r = proj(a1, a2, p);\n  if (isecSP(a1, a2, r)) return abs(r-p);\n  return min(abs(a1-p), abs(a2-p));\n}\n \nD distSS(P a1, P a2, P b1, P b2) {\n  if (isecSS(a1, a2, b1, b2)) return 0;\n  return min(min(distSP(a1, a2, b1), distSP(a1, a2, b2)),\n             min(distSP(b1, b2, a1), distSP(b1, b2, a2)));\n}\n \n// 2??´????????????\nP crosspointLL(P a1, P a2, P b1, P b2) {\n  D d1 = cross(b2-b1, b1-a1);\n  D d2 = cross(b2-b1, a2-a1);\n  if (EQ(d1, 0) && EQ(d2, 0)) return a1;  // same line\n  if (EQ(d2, 0)) throw \"kouten ga nai\";   // ???????????????\n  return a1 + d1/d2 * (a2-a1);\n}\n \n \n/* ??? */\n \nD distLC(P a1, P a2, P c, D r) {\n  return max(distLP(a1, a2, c) - r, 0.0);\n}\n \nD distSC(P a1, P a2, P c, D r) {\n  D dSqr1 = norm(c-a1), dSqr2 = norm(c-a2);\n  if (dSqr1 < r*r ^ dSqr2 < r*r) return 0;  // ?????????????????????????????¨????????¢0???????????????OR????????????\n  if (dSqr1 < r*r & dSqr2 < r*r) return r - sqrt(max(dSqr1, dSqr2));\n  return max(distSP(a1, a2, c) - r, 0.0);\n}\n \nVP crosspointLC(P a1, P a2, P c, D r) {\n  VP ps;\n  P ft = proj(a1, a2, c);\n  if (!GE(r*r, norm(ft-c))) return ps;\n \n  P dir = sqrt(max(r*r - norm(ft-c), 0.0)) / abs(a2-a1) * (a2-a1);\n  ps.push_back(ft + dir);\n  if (!EQ(r*r, norm(ft-c))) ps.push_back(ft - dir);\n  return ps;\n}\n \nD distCC(P a, D ar, P b, D br) {\n  D d = abs(a-b);\n  return GE(d, abs(ar-br)) ? max(d-ar-br, 0.0) : abs(ar-br) - d;\n}\n \n// 2????????????\nVP crosspointCC(P a, D ar, P b, D br) {\n  VP ps;\n  P ab = b-a;\n  D d = abs(ab);\n  D crL = (norm(ab) + ar*ar - br*br) / (2*d);\n  if (EQ(d, 0) || ar < abs(crL)) return ps;\n \n  P abN = ab * P(0, sqrt(ar*ar - crL*crL) / d);\n  P cp = a + crL/d * ab;\n  ps.push_back(cp + abN);\n  if (!EQ(norm(abN), 0)) ps.push_back(cp - abN);\n  return ps;\n}\n \n// ???p?????????a????????\\????????\\???\nVP tangentPoints(P a, D ar, P p) {\n  VP ps;\n  D sin = ar / abs(p-a);\n  if (!LE(sin, 1)) return ps;  // ????????§NaN???????????????\n  D t = M_PI_2 - asin(min(sin, 1.0));\n  ps.push_back(                 a + (p-a)*polar(sin, t));\n  if (!EQ(sin, 1)) ps.push_back(a + (p-a)*polar(sin, -t));\n  return ps;\n}\n \n// 2????????±?????\\???????????????????????´????????????????????????????????¨?????\\?????¨??????\nvector<L> tangentLines(P a, D ar, P b, D br) {\n  vector<L> ls;\n  D d = abs(b-a);\n  rep (i,2) {\n    D sin = (ar - (1-i*2)*br) / d;\n    if (!LE(sin*sin, 1)) break;\n    D cos = sqrt(max(1 - sin*sin, 0.0));\n    rep (j,2) {\n      P n = (b-a) * P(sin, (1-j*2)*cos) / d;\n      ls.push_back(L(a + ar*n, b + (1-i*2)*br*n));\n      if (cos < EPS) break;  // ??????????????\\?????????????????????????????????????????????????????????\n    }\n  }\n  return ls;\n}\n \n// ????§???¢???????????????a,b,c???????????????????????£??????????????????\nP circumcenter(P a, P b, P c) {\n  a = (a-c)*0.5;\n  b = (b-c)*0.5;\n  return c + crosspointLL(a, a*P(1,1), b, b*P(1,1));\n}\n \n// ???a??¨???b?????????????????????r????????????????????????\nVP circlesPointsRadius(P a, P b, D r) {\n  VP cs;\n  P abH = (b-a)*0.5;\n  D d = abs(abH);\n  if (d == 0 || d > r) return cs;  // ???????????? !LE(d,r) ??¨?????????1??????????????´????????????\n  D dN = sqrt(r*r - d*d);          // ???????????? max(r*r - d*d, 0) ??¨??????\n  P n = abH * P(0,1) * (dN / d);\n  cs.push_back(a + abH + n);\n  if (dN > 0) cs.push_back(a + abH - n);\n  return cs;\n}\n \n// ???a??¨???b??????????????´???l?????\\??????????????????\nVP circlesPointsTangent(P a, P b, P l1, P l2) {\n  P n = (l2-l1) * P(0,1);\n  P m = (b-a) * P(0,0.5);\n  D rC = dot((a+b)*0.5-l1, n);\n  D qa = norm(n)*norm(m) - dot(n,m)*dot(n,m);\n  D qb = -rC * dot(n,m);\n  D qc = norm(n)*norm(m) - rC*rC;\n  D qd = qb*qb - qa*qc;  // qa*k^2 + 2*qb*k + qc = 0\n \n  VP cs;\n  if (qd < -EPS) return cs;\n  if (EQ(qa, 0)) {\n    if (!EQ(qb, 0)) cs.push_back((a+b)*0.5 - m * (qc/qb/2));\n    return cs;\n  }\n  D t = -qb/qa;\n  cs.push_back(              (a+b)*0.5 + m * (t + sqrt(max(qd, 0.0))/qa));\n  if (qd > EPS) cs.push_back((a+b)*0.5 + m * (t - sqrt(max(qd, 0.0))/qa));\n  return cs;\n}\n \n// ??????????????????????°????????????????\nP minEnclosingCircle(const VP& ps) {\n  P c;\n  double move = 0.5;\n  rep(i,39) {  // 2^(-39-1) \\approx 0.9e-12\n    rep(t,50) {\n      D max = 0;\n      int k = 0;\n      rep (j, ps.size()) if (max < norm(ps[j]-c)) {\n        max = norm(ps[j]-c);\n        k = j;\n      }\n      c += (ps[k]-c) * move;\n    }\n    move /= 2;\n  }\n  return c;\n}\n \n// ?§?????¨????\n// p1???????????¨????????????p???counter clockwise??§?????¢???????????§?¨?\n// D radi=acos((a*a+b*b-c*c)/(2*a*b));\n// radi=radi/M_PI*180;   /---????????????????????§---/\nP rot(P p, double a,P p1){\n  a=a*M_PI/180.0;\n  p-=p1;\n  return P(p.X*cos(a)+p.Y*(-sin(a))+x,p.X*sin(a)+p.Y*cos(a)+y);\n}\n// (a*a+b*b-c*c)/(2*a*b) = cos X ????????????\n// acos(X) = ????????¢??????????§????\n\n/* ????§???¢ */\n \n// ??????????????????sort???max_element????????????\nnamespace std {\n  bool operator<(const P a, const P b) {\n    return a.X != b.X ? a.X < b.X : a.Y < b.Y;\n  }\n}\n \n// ??????\nVP convexHull(VP ps) {  // ????????????????????????????????????????????????VP&???\n  int n = ps.size(), k = 0;\n  sort(ps.begin(), ps.end());\n  VP ch(2*n);\n  for (int i = 0; i < n; ch[k++] = ps[i++]) // lower-hull\n    while (k >= 2 && ccw(ch[k-2], ch[k-1], ps[i]) <= 0) --k;  // ????¨?????????????????????? == -1 ??¨??????\n  for (int i = n-2, t = k+1; i >= 0; ch[k++] = ps[i--]) // upper-hull\n    while (k >= t && ccw(ch[k-2], ch[k-1], ps[i]) <= 0) --k;\n  ch.resize(k-1);\n  return ch;\n}\n \n// ???????????????????????????????????????ccw???????????¨?????? != 1 ??¨??????\nbool isCcwConvex(const VP& ps) {\n  int n = ps.size();\n  rep (i, n) if (ccw(ps[i], ps[(i+1) % n], ps[(i+2) % n]) == -1) return false;\n  return true;\n}\n \n// ???????§???¢????????¨?????????O(n)\n// ?????????????????¨??????1????¢?????????????2????????¨??????0?????????\nint inConvex(P p, const VP& ps) {\n  int n = ps.size();\n  int dir = ccw(ps[0], ps[1], p);\n  rep (i, n) {\n    int ccwc = ccw(ps[i], ps[(i + 1) % n], p);\n    if (!ccwc) return 2;  // ?????????????????¨\n    if (ccwc != dir) return 0;\n  }\n  return 1;\n}\n \n// ???????§???¢????????¨?????????O(logn)\n// ?????????????????¨??????1????¢?????????????2????????¨??????0?????????\nint inCcwConvex(const VP& ps, P p) {\n  int n = ps.size();\n  P g = (ps[0] + ps[n / 3] + ps[n*2 / 3]) / 3.0;\n  if (g == p) return 1;\n  P gp = p - g;\n \n  int l = 0, r = n;\n  while (l + 1 < r) {\n    int mid = (l + r) / 2;\n    P gl = ps[l] - g;\n    P gm = ps[mid] - g;\n    if (cross(gl, gm) > 0) {\n      if (cross(gl, gp) >= 0 && cross(gm, gp) <= 0) r = mid;\n      else l = mid;\n    }\n    else {\n      if (cross(gl, gp) <= 0 && cross(gm, gp) >= 0) l = mid;\n      else r = mid;\n    }\n  }\n  r %= n;\n  D cr = cross(ps[l] - p, ps[r] - p);\n  return EQ(cr, 0) ? 2 : cr < 0 ? 0 : 1;\n}\n \n// ????§???¢????????¨??????\n// ?????????????????¨??????1????¢?????????????2????????¨??????0?????????\nint inPolygon(const VP& ps, P p) {\n  int n = ps.size();\n  bool in = false;\n  rep (i, n) {\n    P a = ps[i] - p;\n    P b = ps[(i + 1) % n] - p;\n    if (EQ(cross(a,b), 0) && LE(dot(a,b), 0)) return 2;\n    if (a.Y > b.Y) swap(a,b);\n    if ((a.Y*b.Y < 0 || (a.Y*b.Y < EPS && b.Y > EPS)) && LE(cross(a, b), 0)) in = !in;\n  }\n  return in;\n}\n \n// ???????§???¢?????????????????°\nVP convexCut(const VP& ps, P a1, P a2) {\n  int n = ps.size();\n  VP ret;\n  rep(i,n) {\n    int ccwc = ccw(a1, a2, ps[i]);\n    if (ccwc != -1) ret.push_back(ps[i]);\n    int ccwn = ccw(a1, a2, ps[(i + 1) % n]);\n    if (ccwc * ccwn == -1) ret.push_back(crosspointLL(a1, a2, ps[i], ps[(i + 1) % n]));\n  }\n  return ret;\n}\n \n// ???????§???¢?????´?????????????????????\npair<int, int> convexDiameter(const VP& ps) {\n  int n = ps.size();\n  int i = min_element(ps.begin(), ps.end()) - ps.begin();\n  int j = max_element(ps.begin(), ps.end()) - ps.begin();\n  int maxI, maxJ;\n  D maxD = 0;\n  rep(_, 2*n) {\n    if (maxD < norm(ps[i]-ps[j])) {\n      maxD = norm(ps[i]-ps[j]);\n      maxI = i;\n      maxJ = j;\n    }\n    if (cross(ps[i]-ps[(i+1) % n], ps[(j+1) % n]-ps[j]) <= 0) j = (j+1) % n;\n    else                                                      i = (i+1) % n;\n  }\n  return make_pair(maxI, maxJ);\n}\n \n// ????§???¢????¬?????????¢???\nD area(const VP& ps) {\n  D a = 0;\n  rep (i, ps.size()) a += cross(ps[i], ps[(i+1) % ps.size()]);\n  return a / 2;\n}\n \n// ????§???¢?????????????????????\nP centroid(const VP& ps) {\n  int n = ps.size();\n  D aSum = 0;\n  P c;\n  rep (i, n) {\n    D a = cross(ps[i], ps[(i+1) % n]);\n    aSum += a;\n    c += (ps[i] + ps[(i+1) % n]) * a;\n  }\n  return 1 / aSum / 3 * c;\n}\n \n// ??????????????????\nVP voronoiCell(P p, const VP& ps, const VP& outer) {\n  VP cl = outer;\n  rep (i, ps.size()) {\n    if (EQ(norm(ps[i]-p), 0)) continue;\n    P h = (p+ps[i])*0.5;\n    cl = convexCut(cl, h, h + (ps[i]-h)*P(0,1) );\n  }\n  return cl;\n}\n \n/* ????????°?????? */\n \nstruct Edge {\n  int from, to;\n  D cost;\n  Edge(int from, int to, D cost) : from(from), to(to), cost(cost) {}\n};\nstruct Graph {\n  int n;\n  vector<vector<Edge> > edges;\n  Graph(int n) : n(n), edges(n) {}\n  void addEdge(Edge e) {\n    edges[e.from].push_back(e);\n    edges[e.to].push_back(Edge(e.to, e.from, e.cost));\n  }\n};\n \n// ????????¢??¬???????????????????????????????????¢???????????°??????????????????\nGraph segmentArrangement(const vector<L>& segs, VP& ps) {\n  int n = segs.size();\n  rep (i, n) {\n    ps.push_back(segs[i].first);\n    ps.push_back(segs[i].second);\n    rep (j, i) {\n      if (isecSS(                 segs[i].first, segs[i].second, segs[j].first, segs[j].second))\n        ps.push_back(crosspointLL(segs[i].first, segs[i].second, segs[j].first, segs[j].second));\n    }\n  }\n  sort(ps.begin(), ps.end());\n  ps.erase(unique(ps.begin(), ps.end()), ps.end());\n \n  int m = ps.size();\n  Graph gr(m);\n  vector<pair<D, int> > list;\n  rep (i, n) {\n    list.clear();\n    rep (j, m) {\n      if (isecSP(segs[i].first, segs[i].second, ps[j]))\n        list.push_back(make_pair(norm(segs[i].first-ps[j]), j));\n    }\n    sort(list.begin(), list.end());\n    rep (j, list.size() - 1) {\n      int a = list[j  ].second;\n      int b = list[j+1].second;\n      gr.addEdge(Edge(a, b, abs(ps[a]-ps[b])));\n    }\n  }\n  return gr;\n}\n \n// ????????°?????????????????????????????????????????????????????£?????°?????????\nGraph visibilityGraph(const VP& ps, const vector<VP>& objs) {\n  int n = ps.size();\n  Graph gr(n);\n  rep (i,n) rep (j,i) {\n    P a = ps[i], b = ps[j];\n    if (!EQ(norm(a-b), 0)) rep (k, objs.size()) {\n      const VP& obj = objs[k];\n      int inStA = inConvex(a, obj);\n      int inStB = inConvex(b, obj);\n      if ((inStA ^ inStB) % 2 || inStA * inStB != 1 && inConvex((a+b)*0.5, obj) == 1) goto skip;\n      rep (l, obj.size()) {\n        P cur = obj[l];\n        P next = obj[(l + 1) % obj.size()];\n        if (isecSS(a, b, cur, next) && !isecSP(cur, next, a) && !isecSP(cur, next, b)) goto skip;\n      }\n    }\n    gr.addEdge( Edge(i, j, abs(a-b)) );\n    skip: {}\n  }\n  return gr;\n}\n \n \n/* ????????? */\n \n// ?????????????????????????????????\nvector<L> mergeSegments(vector<L> segs) {\n  int n = segs.size();\n  rep (i,n) if (segs[i].second < segs[i].first) swap(segs[i].second, segs[i].first);\n \n  rep (i,n) rep (j,i) {\n    L &l1 = segs[i], &l2 = segs[j];\n    if (EQ(cross(l1.second-l1.first, l2.second-l2.first), 0)\n        && isecLP(l1.first, l1.second, l2.first)\n        && ccw   (l1.first, l1.second, l2.second) != 2\n        && ccw   (l2.first, l2.second, l1.second) != 2) {\n      segs[j] = L(min(l1.first, l2.first), max(l1.second, l2.second));\n      segs[i--] = segs[--n];\n      break;\n    }\n  }\n  segs.resize(n);\n  return segs;\n}\n\nD d[8];\nint main(){\n  int n;\n  cin>>n;\n  while(n--){\n    rep(i,8)cin>>d[i];\n    printf(\"%.12f\\n\",distSS(P(d[0],d[1]),P(d[2],d[3]),P(d[4],d[5]),P(d[6],d[7]),));\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\n#include <sys/timeb.h>\n#include <fstream>\n\nusing namespace std;\n\n#define repl(i,a,b) for(int i=(int)(a);i<(int)(b);i++)\n#define rep(i,n) repl(i,0,n)\n#define replrev(i,a,b) for(int i=(int)(b)-1;i>=(int)(a);i--)\n#define reprev(i,n) replrev(i,0,n)\n#define repi(itr,ds) for(auto itr=ds.begin();itr!=ds.end();itr++)\n#define all(a) a.begin(),a.end()\n#define mp make_pair\n#define mt make_tuple\n#define INF 2000000000\n#define INFL 1000000000000000000LL\n#define EPS (1e-10)\n#define MOD 1000000007\n#define PI 3.1415926536\n#define RMAX 4294967295\n\ntypedef long long ll;\ntypedef pair<int, int> P;\ntypedef vector<int> vi;\ntypedef vector<ll> vll;\ntypedef vector<bool> vb;\ntypedef vector<char> vc;\ntypedef vector<string> vs;\ntypedef vector<double> vd;\ntypedef vector<P> vP;\ntypedef vector<vector<int> > vvi;\ntypedef vector<vector<bool> > vvb;\ntypedef vector<vector<ll> > vvll;\ntypedef vector<vector<char> > vvc;\ntypedef vector<vector<string> > vvs;\ntypedef vector<vector<double> > vvd;\ntypedef vector<vector<P> > vvP;\ntypedef priority_queue<int, vector<int>, greater<int> > pqli;\ntypedef priority_queue<ll, vector<ll>, greater<ll> > pqlll;\ntypedef priority_queue<P, vector<P>, greater<P> > pqlP;\ntypedef pair<int, pair<int, int> > Edge;\ntypedef vector<Edge> vE;\ntypedef priority_queue<Edge, vector<Edge>, greater<Edge> > pqlE;\n\n#define equals(a,b)(fabs((a)-(b))<EPS)\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nclass Point {\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0) :x(x), y(y) {}\n\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a) { return Point(x * a, y * a); }\n\tPoint operator / (double a) { return Point(x / a, y / a); }\n\n\tdouble norm() { return x*x + y*y; }\n\tdouble abs() { return sqrt(norm()); }\n\n\tbool operator < (const Point &p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p) const {\n\t\treturn fabs(x - p.x) < EPS&&fabs(y - p.y) < EPS;\n\t}\n};\n\ntypedef Point Vector;\n\ntypedef vector<Point> Polygon;\n\nclass Segment {\npublic:\n\tPoint p1, p2;\n\tSegment(Point p1 = Point(), Point p2 = Point()) :p1(p1), p2(p2) {}\n};\n\ntypedef Segment Line;\n\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0) :c(c), r(r) {}\n};\n\ndouble dot(Vector a, Vector b) {\n\treturn a.x*b.x + a.y*b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n\treturn a.x*b.y - a.y*b.x;\n}\n\nbool isOrthogonal(Vector a, Vector b) {\n\treturn equals(dot(a, b), 0.0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n\treturn isOrthogonal(a1 - a2, b1 - b2);\n}\n\nbool isOrthogonal(Segment s1, Segment s2) {\n\treturn equals(dot(s1.p1 - s1.p2, s2.p2 - s2.p1), 0.0);\n}\n\nbool isParallel(Vector a, Vector b) {\n\treturn equals(cross(a, b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n\treturn isParallel(a1 - a2, b1 - b2);\n}\n\nbool isParallel(Segment s1, Segment s2) {\n\treturn equals(cross(s1.p1 - s1.p2, s2.p2 - s2.p1), 0.0);\n}\n\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / base.norm();\n\treturn s.p1 + base*r;\n}\n\n// ??????s???????§°?????¨?????????p???????§°???\nPoint reflect(Segment s, Point p) {\n\treturn p + (project(s, p) - p)*2.0;\n}\n\ndouble getDistance(Point a, Point b) {\n\treturn (a - b).abs();\n}\n\ndouble getDistanceLP(Line l, Point p) {\n\treturn abs(cross(l.p2 - l.p1, p - l.p1) / (l.p2 - l.p1).abs());\n}\n\ndouble getDistanceSP(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0)return (p - s.p1).abs();\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0)return (p - s.p2).abs();\n\treturn getDistanceLP(s, p);\n}\n\n// ????????????(p0,p1)???????????????p2?????????\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (cross(a, b) > EPS)return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS)return CLOCKWISE;\n\tif (dot(a, b) < -EPS)return ONLINE_BACK;\n\tif (a.norm() < b.norm())return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n\treturn (ccw(p1, p2, p3)*ccw(p1, p2, p4) <= 0\n\t\t&& ccw(p3, p4, p1)*ccw(p3, p4, p2) <= 0);\n}\n\nbool intersect(Segment s1, Segment s2) {\n\treturn intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\ndouble getDistance(Segment s1, Segment s2) {\n\tif (intersect(s1, s2))return 0.0;\n\treturn min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n\t\tmin(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\nPoint getCrossPoint(Segment s1, Segment s2) {\n\tVector base = s2.p2 - s2.p1;\n\tdouble d1 = abs(cross(base, s1.p1 - s2.p1));\n\tdouble d2 = abs(cross(base, s1.p2 - s2.p1));\n\tdouble t = d1 / (d1 + d2);\n\treturn s1.p1 + (s1.p2 - s1.p1)*t;\n}\n\npair<Point, Point> getCrossPoints(Circle c, Line l) {\n\tVector pr = project(l, c.c);\n\tVector e = (l.p2 - l.p1) / (l.p2 - l.p1).abs();\n\tdouble base = sqrt(c.r*c.r - (pr - c.c).norm());\n\treturn make_pair(pr + e*base, pr - e*base);\n}\n\ndouble arg(Vector p) {\n\treturn atan2(p.y, p.x);\n}\n\n// ?????¢a???????§?r\nVector polar(double a, double r) {\n\treturn Point(cos(r)*a, sin(r)*a);\n}\n\npair<Point, Point> getCrossPoints(Circle c1, Circle c2) {\n\tdouble d = (c1.c - c2.c).abs();\n\tdouble a = acos((c1.r*c1.r + d*d - c2.r*c2.r) / (2 * c1.r * d));\n\tdouble t = arg(c2.c - c1.c);\n\treturn make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n}\n\n// IN:2, ON:1, OUT:0\nint contain(Polygon g, Point p) {\n\tint n = g.size();\n\tbool x = false;\n\tfor (int i = 0; i < n; i++) {\n\t\tPoint a = g[i] - p;\n\t\tPoint b = g[(i + 1) % n] - p;\n\t\tif (abs(cross(a, b)) < EPS && dot(a, b) < EPS)return 1;\n\t\tif (a.y > b.y)swap(a, b);\n\t\tif (a.y < EPS && EPS < b.y && cross(a, b) > EPS)x = !x;\n\t}\n\treturn (x ? 2 : 0);\n}\n\n// ??????\nPolygon andrewScan(Polygon s) {\n\tPolygon u, l;\n\tif (s.size() < 3)return s;\n\tsort(s.begin(), s.end());\n\n\tu.push_back(s[0]);\n\tu.push_back(s[1]);\n\tl.push_back(s[s.size() - 1]);\n\tl.push_back(s[s.size() - 2]);\n\t\n\tfor (int i = 2; i < s.size(); i++) {\n\t\tfor (int n = u.size(); n >= 2 && ccw(u[n - 2], u[n - 1], s[i]) != CLOCKWISE; n--) {\n\t\t\tu.pop_back();\n\t\t}\n\t\tu.push_back(s[i]);\n\t}\n\tfor (int i = s.size() - 3; i >= 0; i--) {\n\t\tfor (int n = l.size(); n >= 2 && ccw(l[n - 2], l[n - 1], s[i]) != CLOCKWISE; n--) {\n\t\t\tu.pop_back();\n\t\t}\n\t\tu.push_back(s[i]);\n\t}\n\treverse(l.begin(), l.end());\n\tfor (int i = u.size() - 2; i >= 1; i--)l.push_back(u[i]);\n\t\n\treturn l;\n}\n\nint main() {\n\tcout << fixed << setprecision(14);\n\tint Q;\n\tcin >> Q;\n\trep(q, Q) {\n\t\tint x0, y0, x1, y1, x2, y2, x3, y3;\n\t\tcin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n\t\tdouble d = getDistance(Segment(Point(x0, y0), Point(x1, y1)), Segment(Point(x2, y2), Point(x3, y3)));\n\t\tcout << d << endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#pragma GCC optimize(3,\"Ofast\",\"inline\")\n#pragma GCC target(\"avx\")\n#include <bits/stdc++.h>\nusing namespace std;\ntemplate<class t> inline t read(t &x){\n    char c=getchar();bool f=0;x=0;\n    while(!isdigit(c)) f|=c=='-',c=getchar();\n    while(isdigit(c)) x=(x<<1)+(x<<3)+(c^48),c=getchar();\n    if(f) x=-x;return x;\n}\ntemplate<class t> inline void write(t x){\n    if(x<0) putchar('-'),write(-x);\n    else{if(x>9) write(x/10);putchar('0'+x%10);}\n}\n\n\nconst double eps=1e-9;\nconst double pi=acos(-1);\n\nstruct point{\n\tdouble x,y;\n\tinline void read(){\n\t\tscanf(\"%lf%lf\",&x,&y);\n\t}\n\tinline bool operator < (const point &nt) const {\n\t\tif(y==nt.y) return x<nt.x;\n\t\treturn y<nt.y;\n\t}\n\tinline point operator + (const point &nt) const {\n\t\treturn (point){x+nt.x,y+nt.y};\n\t}\n\tinline point operator - (const point &nt) const {\n\t\treturn (point){x-nt.x,y-nt.y};\n\t}\n\tinline point operator * (const double &nt) const {\n\t\treturn (point){x*nt,y*nt};\n\t}\n\tinline double length(){\n\t\treturn sqrt(x*x+y*y);\n\t}\n};\n\ndouble distance(point x,point y){ //距离 \n\treturn sqrt((y.x-x.x)*(y.x-x.x)+(y.y-x.y)*(y.y-x.y));\n}\n\nstruct segment{\n\tpoint x,y;\n\tinline void read(){\n\t\tx.read();y.read();\n\t}\n\tinline double length(){ //线段长度 \n\t\treturn distance(x,y);\n\t}\n};\n\nstruct line{\n\tpoint x,y;\n\tinline void read(){\n\t\tx.read();y.read();\n\t}\n};\n\nsegment linetoseg(line x){\n\treturn (segment){x.x,x.y};\n}\n\nline segtoline(segment x){\n\treturn (line){x.x,x.y};\n}\n\ndouble DJ(point x,point y){ //点积 \n\treturn x.x*y.x+x.y*y.y;\n}\n\ndouble CJ(point x,point y){ //叉积 \n\treturn x.x*y.y-x.y*y.x;\n}\n\npoint trpoint(segment x){ //将有向线段转成向量点 \n\treturn x.y-x.x;\n}\n\npoint trpoint(line x){ //将直线转成向量点 \n\treturn x.y-x.x;\n}\n\ndouble prolen(point x,segment a){ //点在有向线段上的投影长度 \n\treturn DJ(trpoint((segment){a.x,x}),trpoint(a))/a.length();\n}\n\npoint propoint(point x,segment a){ //点在直线(线段)上的投影点 \n\treturn a.x+trpoint(a)*(prolen(x,a)/a.length());\n}\n\npoint refpoint(point x,segment a){ //点对于直线(线段)的对称点 \n\treturn x+(propoint(x,a)-x)*2;\n}\n\nbool orthline(line x,line y){ //两条直线是否垂直 \n\treturn DJ(trpoint(x),trpoint(y))==0;\n}\n\nbool paraline(line x,line y){ //两条直线是否平行 \n\treturn CJ(trpoint(x),trpoint(y))==0;\n}\n\nbool interseg(segment x,segment y){ //两条线段是否相交 \n\treturn min(x.x.x,x.y.x)<=max(y.x.x,y.y.x)&&min(y.x.x,y.y.x)<=max(x.x.x,x.y.x)&&min(x.x.y,x.y.y)<=max(y.x.y,y.y.y)&&min(y.x.y,y.y.y)<=max(x.x.y,x.y.y)&&CJ(y.x-x.x,y.y-x.x)*CJ(y.x-x.y,y.y-x.y)<=0&&CJ(x.x-y.x,x.y-y.x)*CJ(x.x-y.y,x.y-y.y)<=0;\n}\n\ndouble dispointline(point x,line y){ //点到直线的距离 \n\treturn distance(x,propoint(x,linetoseg(y)));\n}\n\npoint crossline(line x,line y){ //两条直线的交点 \n\tdouble a=dispointline(x.x,y),b=dispointline(x.y,y);\n\treturn x.x+(x.y-x.x)*(a/(a+b));\n}\n\nbool onseg(point x,segment y){\n\treturn abs(distance(x,y.x)+distance(x,y.y)-y.length())<=eps;\n}\n\ndouble dispointseg(point x,segment y){\n\tif(onseg(propoint(x,y),y)) return dispointline(x,segtoline(y));\n\treturn min(distance(x,y.x),distance(x,y.y));\n}\n\nvoid doit(){\n\tsegment a,b;\n\ta.read();\n\tb.read();\n\tdouble res;\n\tif(interseg(a,b)) res=0;\n\telse res=min(min(dispointseg(a.x,b),dispointseg(a.y,b)),min(dispointseg(b.x,a),dispointseg(b.y,a)));\n\tprintf(\"%.10lf\\n\",res);\n}\n\nsigned main(){\n\tint t;\n\tread(t);\n\twhile(t--) doit();\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define range(i,a,b) for(int i = (a); i < (b); i++)\n#define rep(i,b) for(int i = 0; i < (b); i++)\n#define all(a) (a).begin(), (a).end()\n#define show(x)  cerr << #x << \" = \" << (x) << endl;\n#define debug(x) cerr << #x << \" = \" << (x) << \" (L\" << __LINE__ << \")\" << \" \" << __FILE__ << endl;\nconst int INF = 2000000000;\nusing namespace std;\n\ntypedef complex<double> Point;\ntypedef Point Vector;\n//???????????¨????§???????\nstruct Segment{ Point p1, p2; };\n//??´????????¨????§???????\ntypedef Segment Line;\n//????§???¢?????¨????§???????\ntypedef vector<Point> Polygon;\n\nnamespace std{\n    bool operator < (const Point &a, const Point &b){\n        return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n    }\n    bool operator == (const Point &a, const Point &b){\n        return a.real() == b.real() && a.imag() == b.imag();\n    }\n}\n\nclass Circle{\n    public:\n        Point c;\n        double r;\n        Circle(Point c = Point(), double r = 0.0): c(c), r(r) {}\n};\n\n// ?¨±???????????????\n#define EPS (1e-10)\n\n// ????????????a?????¶??????????±???????\n//double length = abs(a);\n\n// 2???a,b???????????¢????±???????\n//double distance = abs(a-b);\n\n/*\n// ????????????a?????????????????????????±???????\nPoint b = a / abs(a);\n\n// ????????????a?????????????????????n1,n2????±???????\nPoint n1 = a * Point(0, 1);\nPoint n2 = a * Point(0, -1);\n*/\n\nint ccw(Point, Point, Point);\n\n// 2??????????????????????????????????????????\nbool EQ(double a, double b){\n    return (abs(a - b) < EPS);\n}\n\n// 2??????????????????????????????????????????\nbool EQV(Vector a, Vector b){\n    return ( EQ(a.real(), b.real()) && EQ(a.imag(), b.imag()) );\n}\n\n// ?????? (dot product) : a???b = |a||b|cos??\ndouble dot(Point a, Point b) {\n    return (a.real() * b.real() + a.imag() * b.imag());\n}\n\n// ?????? (cross product) : a??b = |a||b|sin??\ndouble cross(Point a, Point b) {\n    return (a.real() * b.imag() - a.imag() * b.real());\n}\n\n// 2??´????????´????????? : a??\\b <=> dot(a, b) = 0\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n    return EQ( dot(a1-a2, b1-b2), 0.0 );\n}\nbool isOrthogonal(Line s1, Line s2) {\n    return isOrthogonal(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\n// 2??´?????????????????? : a//b <=> cross(a, b) = 0\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n    return EQ( cross(a1-a2, b1-b2), 0.0 );\n}\nbool isParallel(Line s1, Line s2) {\n    return isParallel(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\n// ???c?????´???a,b????????????????????????\nbool isPointOnLine(Point a, Point b, Point c) {\n    return EQ( cross(b-a, c-a), 0.0 );\n}\nbool isPointOnLine(Line s, Point c) {\n    return isPointOnLine(s.p1, s.p2, c);\n}\n\n// ???a,b???????????´?????¨???c??¨????????¢\ndouble distanceLPoint(Point a, Point b, Point c) {\n    return abs(cross(b-a, c-a)) / abs(b-a);\n}\ndouble distanceLPoint(Line s, Point c) {\n    return distanceLPoint(s.p1, s.p2, c);\n}\n\n// ???a,b???????????¨??????????????¨???c??¨????????¢\ndouble distanceLsPoint(Point a, Point b, Point c) {\n    if ( dot(b-a, c-a) < EPS ) return abs(c-a);\n    if ( dot(a-b, c-b) < EPS ) return abs(c-b);\n    return abs(cross(b-a, c-a)) / abs(b-a);\n}\ndouble distanceLsPoint(Segment s, Point c) {\n    return distanceLsPoint(s.p1, s.p2, c);\n}\n\n// a1,a2???????????¨??????????????¨b1,b2???????????¨???????????????????????????\nbool isIntersectedLs(Point a1, Point a2, Point b1, Point b2) {\n    return ( ccw(a1, a2, b1) * ccw(a1, a2, b2) <= 0 &&\n            ccw(b1, b2, a1) * ccw(b1, b2, a2) <= 0 );\n}\nbool isIntersectedLs(Segment s1, Segment s2) {\n    return isIntersectedLs(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\n// a1,a2???????????¨??????????????¨b1,b2???????????¨??????????????????????¨????\nPoint intersectionLs(Point a1, Point a2, Point b1, Point b2) {\n    Vector base = b2 - b1;\n    double d1 = abs(cross(base, a1 - b1));\n    double d2 = abs(cross(base, a2 - b1));\n    double t = d1 / (d1 + d2);\n\n    return Point(a1 + (a2 - a1) * t);\n}\nPoint intersectionLs(Segment s1, Segment s2) {\n    return intersectionLs(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\n// a1,a2???????????´?????¨b1,b2???????????´??????????????????\nbool isIntersectedL(Point a1, Point a2, Point b1, Point b2) {\n    return !EQ( cross(a1-a2, b1-b2), 0.0 );\n}\nbool isIntersectedL(Line l1, Line l2) {\n    return isIntersectedL(l1.p1, l1.p2, l2.p1, l2.p2);\n}\n\n// a1,a2???????????´?????¨b1,b2???????????´?????????????¨????\nPoint intersectionL(Point a1, Point a2, Point b1, Point b2) {\n    Point a = a2 - a1; Point b = b2 - b1;\n    return a1 + a * cross(b, b1-a1) / cross(b, a);\n}\nPoint intersectionL(Line l1, Line l2) {\n    return intersectionL(l1.p1, l1.p2, l2.p1, l2.p2);\n}\n\n// ??????s1??¨??????s2????????¢\ndouble distanceLL(Segment s1, Segment s2){\n    if(isIntersectedLs(s1.p1, s1.p2, s2.p1, s2.p2) ) return 0.0;\n    return min(\n            min(distanceLsPoint(s1.p1, s1.p2, s2.p1),\n                distanceLsPoint(s1.p1, s1.p2, s2.p2)),\n            min(distanceLsPoint(s2.p1, s2.p2, s1.p1),\n                distanceLsPoint(s2.p1, s2.p2, s1.p2)) );\n}\ndouble distanceLL(Point p0, Point p1, Point p2, Point p3){\n    if(isIntersectedLs(p0, p1, p2, p3) ) return 0.0;\n    return min(\n            min(distanceLsPoint(p0, p1, p2),\n                distanceLsPoint(p0, p1, p3)),\n            min(distanceLsPoint(p2, p3, p0),\n                distanceLsPoint(p2, p3, p1)) );\n}\n\n// ??????s???????????????p????°???±\nPoint project(Segment s, Point p){\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / norm(base);\n    return Point(s.p1 + base * r);\n}\n\n//??????s???????±??????¨?????????p??????????§°??????\nPoint reflect(Segment s, Point p){\n    return Point(p + (project(s, p) - p) * 2.0);\n}\n\n//???p???angle?????????????¨???????????????¢\nPoint rotation(Point p, double angle){\n    double x, y;\n    x = p.real() * cos(angle) - p.imag() * sin(angle);\n    y = p.real() * sin(angle) + p.imag() * cos(angle);\n    return Point(x, y);\n}\n\n//???c??¨??????l?????????\npair<Point, Point> getCrossPoints(Circle c, Line l){\n    Vector pr = project(l, c.c);\n    Vector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);\n    double base = sqrt(c.r * c.r - norm(pr - c.c));\n    return make_pair(pr + e * base, pr - e * base);\n}\n\n//???c1??¨???c2?????????\ndouble arg(Vector p) { return atan2(p.imag(), p.real()); }\nVector polar(double a, double r) { return Point(cos(r) * a, sin(r) *a); }\n\npair<Point, Point> getCrossPoints(Circle c1, Circle c2){\n    double d = abs(c1.c - c2.c);\n    double a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n    double t = arg(c2.c - c1.c);\n    return make_pair(Point(c1.c + polar(c1.r, t + a)), Point(c1.c + polar(c1.r, t - a)));\n}\n\n//????????????\nstatic const int IN = 2;\nstatic const int ON = 1;\nstatic const int OUT = 0;\n\nint contains(Polygon g, Point p){\n    int n = g.size();\n    bool x = false;\n    rep(i,n){\n        Point a = g[i] - p, b = g[(i + 1) % n] - p;\n        if( abs(cross(a, b)) < EPS && dot(a,  b) < EPS ) return ON;\n        if( a.imag() > b.imag() ) swap(a, b);\n        if( a.imag() < EPS && EPS < b.imag() && cross(a, b) > EPS ) x = not x;\n    }\n    return ( x ? IN : OUT );\n}\n\n//???????????????????????????\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nint ccw(Point p0, Point p1, Point p2){\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if( cross(a, b) > EPS ) return COUNTER_CLOCKWISE;\n    if( cross(a, b) < -EPS ) return CLOCKWISE;\n    if( dot(a, b) < -EPS ) return ONLINE_BACK;\n    if( abs(a) < abs(b) ) return ONLINE_FRONT;\n\n    return ON_SEGMENT;\n}\n\n//??????\nPolygon andrewScan( Polygon s ){\n    Polygon u, l;\n    if( s.size() < 3 ) return s;\n    sort(s.begin(), s.end());\n\n    u.emplace_back(s[0]);\n    u.emplace_back(s[1]);\n\n    l.emplace_back(s[s.size() - 1]);\n    l.emplace_back(s[s.size() - 2]);\n\n    range(i,2,s.size()){\n        //== COUNTER_CLOCKWISE?????¨????§????180??\\???????????´?????????????????§????????????????????¨????????°?????????\n        //!= CLOCKWISE?????¨????§????180??????????????´????????????????????°????????????\n        for(int n = u.size(); n >= 2 && ccw(u[n-2], u[n-1], s[i]) != CLOCKWISE; n--){\n            u.pop_back();\n        }\n        u.emplace_back(s[i]);\n    }\n\n    for(int i = s.size() - 3; i >= 0; i--){\n        for(int n = l.size(); n >= 2 && ccw(l[n-2], l[n-1], s[i]) != CLOCKWISE; n--){\n            l.pop_back();\n        }\n        l.emplace_back(s[i]);\n    }\n\n    reverse(l.begin(), l.end());\n    for(int i = u.size() - 2; i >= 1; i--) l.emplace_back(u[i]);\n\n    return l;\n}\n\nint main(){\n    double a, b, c, d, e, g, f, h;\n    int n;\n    cin >> n;\n    rep(i,n){\n        cin >> a >> b >> c >> d >> e >> f >> g >> h;\n\n        Point p0, p1, p2, p3;\n        p0 = Point(a, b);\n        p1 = Point(c, d);\n        p2 = Point(e, f);\n        p3 = Point(g, h);\n\n        cout << fixed << setprecision(9) << distanceLL(p0, p1, p2, p3) << endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "// Written By NewbieChd\n#include <iostream>\n#include <iomanip>\n#include <cmath>\n// #define double long double\nusing namespace std;\n\nconst int maxN = 100003;\nconst double eps = 1e-8, inf = 1e18;\ninline double absolute(double x) { return x >= 0 ? x : -x; }\ninline double square(double x) { return x * x; }\n\nstruct Vector {\n    double x, y;\n    Vector() {}\n    Vector(double x, double y) : x(x), y(y) {}\n    friend Vector operator+(const Vector& a, const Vector& b) { return Vector(a.x + b.x, a.y + b.y); }\n    friend Vector operator-(const Vector& a, const Vector& b) { return Vector(a.x - b.x, a.y - b.y); }\n    friend Vector operator*(const Vector& a, const double& b) { return Vector(a.x * b, a.y * b); }\n    friend Vector operator/(const Vector& a, const double& b) { return Vector(a.x / b, a.y / b); }\n    inline double length() { return sqrt(square(x) + square(y)); }\n    inline void read() { cin >> x >> y; }\n    inline void write() { cout << fixed << setprecision(10) << x << ' ' << y << '\\n'; }\n};\ninline double distance(Vector a, Vector b) { return sqrt(square(b.x - a.x) + square(b.y - a.y)); }\ninline double dot(Vector a, Vector b) { return a.x * b.x + a.y * b.y; }\ninline double cross(Vector a, Vector b) { return a.x * b.y - a.y * b.x; }\n\ninline Vector project(Vector a, Vector b, Vector c) {\n    b = a - b;\n    return b * (dot(b, c - a) / (square(b.x) + square(b.y))) + a;\n}\ninline Vector reflect(Vector a, Vector b, Vector c) {\n    a = project(a, b, c);\n    return a * 2 - c;\n}\n\ninline bool intersect(Vector a, Vector b, Vector c, Vector d) {\n    if (max(min(a.x, b.x), min(c.x, d.x)) > min(max(a.x, b.x), max(c.x, d.x)) + eps || \n        max(min(a.y, b.y), min(c.y, d.y)) > min(max(a.y, b.y), max(c.y, d.y)) + eps || \n        cross(a - c, d - c) * cross(d - c, b - c) + eps < 0 || \n        cross(c - a, b - a) * cross(b - a, d - a) + eps < 0)\n        return 0;\n    return 1;\n}\n\nstruct Line {\n    double A, B, C;\n    Line() {}\n    Line(double A, double B, double C) : A(A), B(B), C(C) {}\n};\ninline Line getLine(Vector a, Vector b) { return Line(b.y - a.y, a.x - b.x, a.y * (b.x - a.x) - a.x * (b.y - a.y)); }\ninline Vector crossPoint(Line a, Line b) {\n    double tmp = a.A * b.B - a.B * b.A;\n    return Vector((a.B * b.C - b.B * a.C) / tmp, (b.A * a.C - a.A * b.C) / tmp);\n}\n\ninline double PointSegDistance(Vector a, Vector b, Vector c) {\n    Vector l = b - a;\n    double tmp;\n    if ((tmp = dot(c - a, l) / (square(l.x) + square(l.y))) < eps)\n        return distance(c, a);\n    if (tmp + eps > 1)\n        return distance(c, b);\n    return distance(c, project(a, b, c));\n}\ninline double SegSegDistance(Vector a, Vector b, Vector c, Vector d) {\n    if (intersect(a, b, c, d))\n        return 0;\n    return min(min(PointSegDistance(a, b, c), PointSegDistance(a, b, d)),\n               min(PointSegDistance(c, d, a), PointSegDistance(c, d, b)));\n}\n\nint main() {\n    ios::sync_with_stdio(false);\n    int Q;\n    Vector a, b, c, d;\n    for (cin >> Q; Q; --Q)\n        a.read(), b.read(), c.read(), d.read(),\n        cout << fixed << setprecision(10) << SegSegDistance(a, b, c, d) << '\\n';\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nconst double eps = 1e-9;\n\nbool same(double a, double b) { return a == b; }\n\nstruct P {\n    double x, y;\n    P() : x(0), y(0) {}\n    P(double x, double y) : x(x), y(y) {}\n    P operator + (P b) { return P(x + b.x, y + b.y); }\n    P operator - (P b) { return P(x - b.x, y - b.y); }\n    P operator * (double b) { return P(x * b, y * b); }\n    P operator / (double b) { return P(x / b, y / b); }\n    double operator * (P b) { return x * b.x + y * b.y; }\n    double operator ^ (P b) { return x * b.y - y * b.x; }\n    double abs() { return hypot(x, y); }\n    P unit() { return *this / abs(); }\n};\n\nstruct L{\n    // ax + by + c = 0\n    double a, b ,c, o;\n    P pa, pb;\n    L() : a(0), b(0), c(0), o(0), pa(), pb() {}\n    L(P pa, P pb) : a(pa.y - pb.y), b(pb.x - pa.x), c(pa ^ pb), o(atan2(-a, b)), pa(pa), pb(pb) {}\n    P project(P p) { return pa + (pb - pa).unit() * ((pb - pa) * (p - pa) / (pb - pa).abs()); }\n    P reflect(P p) { return p + (project(p) - p) * 2; }\n    double get_ratio(P p) { return (p - pa) * (pb - pa) / ((pb - pa).abs() * (pb - pa).abs()); }\n    bool inside(P p) {\n        double z = get_ratio(p);\n        return z >= 0 && z <= 1;\n    }\n};\n\nbool parallel(L x, L y) { return same(x.a * y.b, x.b * y.a); }\n\nP intersect(L x, L y) { return P(-x.b * y.c + x.c * y.b, x.a * y.c - x.c * y.a) / (-x.a * y.b + x.b * y.a); }\n\nint main() {\n    int q; cin >> q; while (q--) {\n        P p[4]; \n        for (int i = 0; i < 4; ++i) cin >> p[i].x >> p[i].y;\n        L l1(p[0], p[1]), l2(p[2], p[3]);\n        double ans = 1e12;\n        auto update = [&] (P &p, L &l) {\n            P z = l.project(p);\n            if (l.inside(z)) ans = min(ans, (p - z).abs());\n            ans = min({ans, (p - l.pa).abs(), (p - l.pb).abs()});\n        };\n        if (parallel(l1, l2)) {\n            if ((p[2] - l1.project(p[2])).abs() < eps) {\n                if (l1.inside(p[2]) || l1.inside(p[3]) || l2.inside(p[0]) || l2.inside(p[1])) ans = 0;\n                else ans = min({ans, (p[0] - p[2]).abs(), (p[0] - p[3]).abs(), (p[1] - p[2]).abs(), (p[1] - p[3]).abs()});\n            } else {\n                update(p[2], l1);\n                update(p[3], l1);\n                update(p[0], l2);\n                update(p[1], l2);\n            }\n        } else {\n            P z = intersect(l1, l2);\n            if (l1.inside(z) && l2.inside(z)) ans = 0;\n            else {\n                update(p[2], l1);\n                update(p[3], l1);\n                update(p[0], l2);\n                update(p[1], l2);\n            }\n        }\n        cout << fixed << setprecision(12) << ans << endl;\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#ifndef ___GEOMETRY_LIBRARY\n#define ___GEOMETRY_LIBRARY\n\n#include <vector>\n#include <algorithm>\n\ntemplate<class type>\nclass point2d {\npublic:\n\ttype x, y;\n\tpoint2d() : x(type(0)), y(type(0)) {};\n\tpoint2d(type x_, type y_) : x(x_), y(y_) {};\n\tbool operator==(const point2d& p) { return x == p.x && y == p.y; }\n\tbool operator!=(const point2d& p) { return x != p.x || y != p.y; }\n\tpoint2d& operator+=(const point2d& p) { x += p.x; y += p.y; return *this; }\n\tpoint2d& operator-=(const point2d& p) { x -= p.x; y -= p.y; return *this; }\n\tpoint2d& operator*=(type val) { x *= val; y *= val; return *this; }\n\tpoint2d& operator/=(type val) { x /= val; y /= val; return *this; }\n\tpoint2d operator+(const point2d& p) const { return point2d(*this) += p; }\n\tpoint2d operator-(const point2d& p) const { return point2d(*this) -= p; }\n\tpoint2d operator*(type val) const { return point2d(*this) *= val; }\n\tpoint2d operator/(type val) const { return point2d(*this) /= val; }\n\ttype norm() const { return x * x + y * y; }\n\ttype abs() const { return type(std::sqrt(x * x + y * y)); }\n\tlong double fabs() const { return std::sqrt((long double)(x * x + y * y)); }\n\ttype dot(const point2d& p) const { return x * p.x + y * p.y; }\n\ttype cross(const point2d& p) const { return x * p.y - y * p.x; }\n\tint ccw(const point2d& p1, const point2d& p2) const {\n\t\t// Centering at point p, p1 -> p2 is COUNTER-CLOCKWISE : (1)\n\t\t// Centering at point p, p1 -> p2 is CLOCKWISE : (-1)\n\t\t// Collinear with order p1 -> p -> p2 : (2)\n\t\t// Collinear with order p -> p1 -> p2 : (-2)\n\t\t// Collinear with order p -> p2 -> p1 : (0)\n\t\tpoint2d pr1 = p1 - point2d(*this);\n\t\tpoint2d pr2 = p2 - point2d(*this);\n\t\tif (pr1.cross(pr2) != 0) return pr1.cross(pr2) > 0 ? 1 : -1;\n\t\tif (pr1.dot(pr2) < 0) return 2;\n\t\treturn pr1.norm() < pr2.norm() ? -2 : 0;\n\t}\n};\n\ntemplate<class type>\nclass segment2d {\npublic:\n\tpoint2d<type> p1, p2;\n\tsegment2d() : p1(point2d<type>()), p2(point2d<type>()) {};\n\tsegment2d(const point2d<type>& p1_, const point2d<type>& p2_) : p1(p1_), p2(p2_) {};\n\ttype norm() const { return (p1 - p2).norm(); }\n\ttype abs() const { return (p1 - p2).abs(); }\n\tlong double fabs() const { return (p1 - p2).fabs(); }\n};\n\n// DETERMINE IF \"SEGMENT\" S1 AND S2 INTERSECTS\ntemplate<class type>\nbool intersect(const segment2d<type>& s1, const segment2d<type>& s2) {\n\tint f1 = s1.p1.ccw(s1.p2, s2.p1) * s1.p1.ccw(s1.p2, s2.p2);\n\tint f2 = s2.p1.ccw(s2.p2, s1.p1) * s2.p1.ccw(s2.p2, s1.p2);\n\treturn (f1 <= 0 && f2 <= 0);\n}\n\n// FIND THE DISTANCE OF POINT P AND \"LINE/SEGMENT\" S\ntemplate<class type>\ntype distance(const point2d<type>& p, const segment2d<type>& s, bool isline) {\n\ttype nx = (s.p2 - s.p1).norm();\n\ttype d = std::abs((s.p2 - s.p1).cross(p - s.p1)) / std::sqrt(nx);\n\tif (isline) return d;\n\ttype ny = (p - s.p1).norm();\n\ttype nz = (p - s.p2).norm();\n\tif (nx + ny < nz) return std::sqrt(ny);\n\tif (nx + nz < ny) return std::sqrt(nz);\n\treturn d;\n}\n\n#endif // ___GEOMETRY_LIBRARY\n\n#include <iostream>\n#include <algorithm>\nusing namespace std;\nint main() {\n\tcin.tie(0);\n\tios_base::sync_with_stdio(false);\n\tint q;\n\tcin >> q;\n\tcout.precision(15);\n\tfor (int i = 0; i < q; ++i) {\n\t\tsegment2d<double> s1, s2;\n\t\tcin >> s1.p1.x >> s1.p1.y >> s1.p2.x >> s1.p2.y >> s2.p1.x >> s2.p1.y >> s2.p2.x >> s2.p2.y;\n\t\tif (intersect(s1, s2)) {\n\t\t\tcout << 0 << \"\\n\";\n\t\t}\n\t\telse {\n\t\t\tdouble d1 = distance(s1.p1, s2, false);\n\t\t\tdouble d2 = distance(s1.p2, s2, false);\n\t\t\tdouble d3 = distance(s2.p1, s1, false);\n\t\t\tdouble d4 = distance(s2.p2, s1, false);\n\t\t\tdouble ans = min({ d1, d2, d3, d4 });\n\t\t\tcout << ans << endl;\n\t\t}\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define rep(i,n) for(int i=0;(i)<(n);++(i))\nusing namespace std;\n\n// Description: ????????????\n// Verifyed: various problem \nusing namespace placeholders;\nusing R=long double;\nconst R EPS=1e-9L; // [-1000,1000]->EPS=1e-8 [-10000,10000]->EPS=1e-7\ninline int sgn(const R& r){return(r > EPS)-(r < -EPS);}\ninline R sq(R x){return sqrt(max(x,0.0L));}\n\nconst R INF = 1E40L;\nconst R PI = acos(-1.0L);\nusing P=complex<R>;\nusing L=struct{P s,t;};\nusing VP=vector<P>;\nusing C=struct{P c;R r;};\n\nauto& operator >> (istream& is,P& p){ R x,y; is >> x >> y,p=P(x,y); return is;}\nauto& operator << (ostream& os,P& p){ os << real(p) << \" \" << imag(p); return os;}\n\ninline R dot(P o,P a,P b){return real(conj(a-o)*(b-o));}\ninline R det(P o,P a,P b){return imag(conj(a-o)*(b-o));}\ninline P vec(L l){return l.t-l.s;}\nauto sdot = bind(sgn,bind(dot,_1,_2,_3));\nauto sdet = bind(sgn,bind(det,_1,_2,_3));\n\n//projection verify AOJ CGL_1_A\nP proj(L l,P p){ R u=real((p-l.s)/vec(l)); return (1-u)*l.s+u*l.t;}\n\n// vertical parallel\n// verified: AOJ CGL_2_A\nbool vertical(L a,L b) {return sdot(0,vec(a),vec(b))==0;}\nbool parallel(L a,L b) {return sdet(0,vec(a),vec(b))==0;}\nbool eql(L a,L b){ return parallel(a,b) and sdet(a.s,a.t,b.s)==0;}\n\n// crossing determination\n// verified: AOJ CGL_2_B \nbool iss(L a,L b){\n\tint sa=sdet(a.s,a.t,b.s)*sdet(a.s,a.t,b.t);\n\tint sb=sdet(b.s,b.t,a.s)*sdet(b.s,b.t,a.t);\n\treturn max(sa,sb)<0;\n}\n\n// crossing point \n// verified: AOJ CGL_2_C\nP cross(L a,L b){\n\tR u=det(a.s,b.s,b.t)/det(0,vec(a),vec(b));\n\treturn (1-u)*a.s+u*a.t;\n}\n\t\n// distance \n// verified: AOJ CGL_2_D\nR dsp(L l,P p){\n\tP h=proj(l,p);\n\tif(sdot(l.s,l.t,p)<=0) h=l.s;\n\tif(sdot(l.t,l.s,p)<=0) h=l.t;\n\treturn abs(p-h);\n}\n\nR dss(L a,L b){return iss(a,b)?0:min({dsp(a,b.s),dsp(a,b.t),dsp(b,a.s),dsp(b,a.t)});}\n\nint main(void){\n\tint n;\n\tcin >> n;\n\tcout.precision(20);\n\trep(i,n){\n\t\tP a,b,c,d;\n\t\tcin >> a >> b >> c >> d;\n\t\tL s1={a,b},s2={c,d};\n\t\tR ans=dss(s1,s2);\n\t\tcout << fixed << ans << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "//Distance\n#include <iostream>\n#include <math.h>\n#include <iomanip>\n\nusing namespace std;\n\nstatic const double ESP = 1e-10;\n\nbool equals(double a, double b) { return fabs(a - b) < ESP; }\n\nclass Point {\npublic:\n    double x, y;\n\n    explicit Point(double x = 0, double y = 0): x(x), y(y) {}\n\n    Point operator + (const Point &p) const { return Point(x + p.x, y + p.y); }\n    Point operator - (const Point &p) const { return Point(x - p.x, y - p.y); }\n    Point operator * (double a) { return Point(a * x, a * y); }\n    Point operator / (double a) { return Point(a / x, a / y); }\n\n    double norm() { return x * x + y * y; }\n    double abs() { return sqrt(norm()); }\n\n    bool operator < (const Point &p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point &p) const {\n        return fabs(x - p.x) < ESP && fabs(y - p.y) < ESP;\n    }\n};\n\ntypedef Point Vector;\n\nstruct Segment {\n    Point p1, p2;\n    Segment(Point p1, Point p2): p1(p1), p2(p2) {}\n};\n\ntypedef Segment Line;\n\ndouble dot(Vector a, Vector b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n    return a.x * b.y - a.y * b.x;\n}\n\nbool isParallel(Vector v1, Vector v2) {\n    return equals(cross(v1, v2), 0.0);\n}\n\nbool isOrthogonal(Vector v1, Vector v2) {\n    return equals(dot(v1, v2), 0.0);\n}\n\nPoint project(Segment s, Point p) {\n    Vector base = s.p2 - s.p1;\n    return s.p1 + (base * (dot(base, p - s.p1) / base.norm()));\n}\n\nPoint reflect(Segment s, Point p) {\n    return p + (project(s, p) - p) * 2;\n}\n\nenum {\n    COUNTER_CLOCKWISE = 1,\n    CLOCKWISE = -1,\n    ONLINE_BACK = 2,\n    ONLINE_FRONT = -2,\n    ON_SEGMENT = 0\n};\n\nint ccw(Point p0, Point p1, Point p2) {\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if (cross(a, b) > ESP) return COUNTER_CLOCKWISE;\n    else if (cross(a, b) < -ESP) return CLOCKWISE;\n    else if (dot(a, b) < -ESP) return ONLINE_BACK;\n    else if (a.norm() < b.norm()) return ONLINE_FRONT;\n    else return ON_SEGMENT;\n}\n\nbool intersect(Point p0, Point p1, Point p2, Point p3) {\n    return (ccw(p0, p1, p2) * ccw(p0, p1, p3) <= 0 && ccw(p2, p3, p0) * ccw(p2, p3, p1) <= 0);\n}\n\nbool intersect(Segment s1, Segment s2) {\n    return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\ndouble getDistancePP(Point p1, Point p2) {\n    return (p2 - p1).abs();\n}\n\ndouble getDistanceLP(Line l, Point p) {\n    return fabs(cross(l.p2 - l.p1, p - l.p1)) / (l.p2 - l.p1).abs();\n}\n\ndouble getDistanceSP(Segment s, Point p) {\n    if(dot(s.p2 - s.p1, p - s.p1) < 0) {\n        return getDistancePP(s.p1, p);\n    } else if(dot(s.p1 - s.p2, p - s.p2) < 0) {\n        return getDistancePP(s.p2, p);\n    } else {\n        return getDistanceLP(s, p);\n    }\n}\n\ndouble getDistance(Segment s1, Segment s2) {\n    if(intersect(s1, s2)) return 0;\n    return min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n               min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\nint main() {\n    int q, x0, y0, x1, y1, x2, y2, x3, y3;\n    cin >> q;\n    for(int i = 0; i < q; i++) {\n        cin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n        Segment s1 = Segment(Point(x0, y0), Point(x1, y1));\n        Segment s2 = Segment(Point(x2, y2), Point(x3, y3));\n        cout << setprecision(15) << getDistance(s1, s2) << endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n \n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n \nstatic const int COUNTER_CLOCKWISE=1;\nstatic const int CLOCKWISE=-1;\nstatic const int ONLINE_BACK=2;\nstatic const int ONLINE_FRONT=-2;\nstatic const int ON_SEGMENT=0;\n \nclass Point {\npublic:\n    double x,y;\n \n    Point(double x=0,double y=0):x(x),y(y) {}\n    Point operator + (Point p) {return Point(x+p.x,y+p.y);}\n    Point operator - (Point p) {return Point(x-p.x,y-p.y);}\n    Point operator * (double a) {return Point(a*x,a*y);}\n    Point operator / (double a) {return Point(x/a,y/a);}\n \n    double abs() {return sqrt(norm());}\n    double norm() {return x*x+y*y;}\n \n    bool operator<(const Point &p) const {\n        return x!=p.x ? x<p.x : y<p.y;\n    }\n    bool operator==(const Point &p) const {\n        return fabs(x-p.x)<EPS && fabs(y-p.y)<EPS;\n    }\n};\n \ntypedef Point Vector;\nstruct Segment {Point p1,p2;};\ntypedef Segment Line;\n \nclass Circle {\npublic:\n    Point c;\n    double r;\n    Circle(Point c=Point(),double r=0.0): c(c),r(r) {}\n};\n \ndouble dot(Vector a,Vector b) {\n    return  a.x*b.x+a.y*b.y;\n}\n \ndouble cross (Vector a,Vector b) {\n    return a.x*b.y-a.y*b.x;\n}\n \ndouble getDistance(Point a,Point b) {\n    return (a-b).abs();\n}\n \ndouble getDistanceLP(Line l,Point p) {\n    return abs(cross(l.p2-l.p1,p-l.p1)/(l.p2-l.p1).abs());\n}\n \ndouble getDistanceSP(Segment s,Point p) {\n    if(dot(s.p2-s.p1,p-s.p1)<0.0) return (p-s.p1).abs();\n    if(dot(s.p1-s.p2,p-s.p2)<0.0) return (p-s.p2).abs();\n    return getDistanceLP(s,p);\n}\n \nint ccw(Point p0,Point p1,Point p2) {\n    Vector a=p1-p0;\n    Vector b=p2-p0;\n    if(cross(a,b)>EPS) return COUNTER_CLOCKWISE;\n    if(cross(a,b)<EPS) return CLOCKWISE;\n    return ON_SEGMENT;\n}\n \nbool intersect(Point p1,Point p2,Point p3,Point p4) {\n    return (ccw(p1,p2,p3)*ccw(p1,p2,p4)<=0 && ccw(p3,p4,p1)*ccw(p3,p4,p2)<=0);\n}\n \nbool intersect(Segment s1,Segment s2) {\n    return intersect(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n \ndouble getDistance(Segment s1,Segment s2) {\n    if(intersect(s1,s2)) return 0.0;\n    return min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n}\n \nint main(void) {\n    int q;cin>>q;\n    while(q) {\n        Segment s1,s2;\n        cin>>s1.p1.x>>s1.p1.y>>s1.p2.x>>s1.p2.y>>s2.p1.x>>s2.p1.y>>s2.p2.x>>s2.p2.y;\n        printf(\"%.10f\\n\",getDistance(s1,s2));\n        q--;\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<algorithm>\n#include<vector>\n#include<string>\n#include<sstream>\n#include<iomanip>\n#include<utility>\n#include<cmath>\n#include<set>\nusing namespace std;\ntypedef long long int ll;\nconst double EPS=1e-10;\n\nbool equals(double a,double b)\n{\n\treturn a>b?a-b<EPS:b-a<EPS;\n}\n\nclass Point\n{\npublic:\n\tdouble x;\n\tdouble y;\n\tPoint(double inx=0.0,double iny=0.0):x(inx),y(iny){}\n\tPoint operator+(const Point &p){return Point(x+p.x,y+p.y);}\n\tPoint operator-(const Point &p){return Point(x-p.x,y-p.y);}\n\tPoint operator*(const double k){return Point(x*k,y*k);}\n\tPoint operator/(const double k){return Point(x/k,y/k);}\n\tPoint operator=(const Point &p){x=p.x;y=p.y;return *this;}\n\tbool operator<(const Point &p)const{return x!=p.x?x<p.x:y<p.y;}\n\tbool operator==(const Point &p)const{return equals(x,p.x)&&equals(y,p.y);}\n\tdouble norm()\n\t{\n\t\treturn x*x+y*y;\n\t}\n\tdouble abs()\n\t{\n\t\treturn sqrt(norm());\n\t}\n};\n\ntypedef Point Vector;\n\nclass Segment\n{\npublic:\n\tPoint p1;\n\tPoint p2;\n\tVector getvector()\n\t{\n\t\treturn p2-p1;\n\t}\n};\n\ntypedef Segment Line;\n\nclass Circle\n{\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point inc=Point(),double inr=0.0):c(inc),r(inr){}\n};\n\ntypedef vector<Point> Polygon;\n\ndouble dot(Vector a,Vector b)\n{\n\treturn a.x*b.x+a.y*b.y;\n}\n\ndouble cross(Vector a,Vector b)\n{\n\treturn a.x*b.y-a.y*b.x;\n}\nconst int counter_clockwise=1;\nconst int clockwise=-1;\nconst int on_segment=0;\nconst int online_back=2;\nconst int online_front=-2;\n\ndouble norm(Vector a)\n{\n\treturn a.x*a.x+a.y*a.y;\n}\n\ndouble abs(Vector a)\n{\n\treturn sqrt(norm(a));\n}\n\nbool isorthogonal(Vector a,Vector b)\n{\n\treturn equals(dot(a,b),0.0);\n}\n\nbool isorthogonal(Point a1,Point a2,Point b1,Point b2)\n{\n\treturn isorthogonal(a1-a2,b1-b2);\n}\n\nbool isorthogonal(Segment s1,Segment s2)\n{\n\treturn equals(dot(s1.getvector(),s2.getvector()),0.0);\n}\n\nbool isparallel(Vector a,Vector b)\n{\n\treturn equals(cross(a,b),0.0);\n}\n\nbool isparallel(Point a1,Point a2,Point b1,Point b2)\n{\n\treturn isparallel(a1-a2,b1-b2);\n}\n\nbool isparallel(Segment s1,Segment s2)\n{\n\treturn equals(cross(s1.getvector(),s2.getvector()),0.0);\n}\n\nPoint project(Segment s,Point p)\n{\n\tVector base=s.getvector();\n\tdouble r=dot(p-s.p1,base)/norm(base);\n\treturn s.p1+base*r;\n}\n\nPoint reflect(Segment s,Point p)\n{\n\treturn project(s,p)*2.0-p;//p+(project(s,p)-p)*2.0\n}\n\ndouble getdistance(Point a,Point b)\n{\n\treturn abs(a-b);\n}\n\ndouble getdistancelp(Line l,Point p)//Line,Point\n{\n\tdouble s=abs(cross(l.p2-l.p1,p-l.p1));\n\treturn s/abs(l.getvector());\n}\n\ndouble getdistancesp(Segment s,Point p)\n{\n\tif(dot(s.getvector(),p-s.p1)<0.0)return abs(p-s.p1);\n\telse if(dot(s.p1-s.p2,p-s.p2)<0.0)return abs(p-s.p2);\n\telse return getdistancelp(s,p);\n}\n\nint ccw(Point p0,Point p1,Point p2)\n{\n\tVector a=p1-p0;\n\tVector b=p2-p0;\n\tif(cross(a,b)>EPS)return counter_clockwise;\n\telse if(cross(a,b)<-EPS)return clockwise;\n\telse if(dot(a,b)<-EPS)return online_back;\n\telse if(a.norm()<b.norm())return online_front;\n\telse return on_segment;\n}\n\nbool intersect(Point p1,Point p2,Point p3,Point p4)\n{\n\treturn ccw(p1,p2,p3)*ccw(p1,p2,p4)<=0&&ccw(p3,p4,p1)*ccw(p3,p4,p2)<=0;\n}\n\nbool intersect(Segment s1,Segment s2)\n{\n\treturn intersect(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n\ndouble getdistance(Segment s1,Segment s2)\n{\n\tif(intersect(s1,s2))return 0.0;\n\telse return min(min(getdistancesp(s1,s2.p1),getdistancesp(s1,s2.p2)),\n\t\t\tmin(getdistancesp(s2,s1.p1),getdistancesp(s2,s1.p2)));\n}\n\nPoint getcrosspoint(Segment s1,Segment s2)\n{\n\tVector base=s2.getvector();\n\tdouble d1=abs(cross(base,s1.p1-s2.p1));\n\tdouble d2=abs(cross(base,s1.p2-s2.p1));\n\tdouble t=d1/(d1+d2);\n\treturn s1.p1+s1.getvector()*t;\n}\n\npair<Point,Point> getcrosspoint(Circle c,Line l)\n{\n\tVector pr=project(l,c.c);\n\tVector e=l.getvector()/abs(l.getvector());\n\tdouble base=sqrt(c.r*c.r-norm(pr-c.c));\n\treturn make_pair(pr+e*base,pr-e*base);\n}\n\ndouble arg(Vector p)\n{\n\treturn atan2(p.y,p.x);\n}\n\nPoint polar(double r,double theta)\n{\n\treturn Point(r*cos(theta),r*sin(theta));\n}\n\npair<Point,Point> getcrosspoint(Circle c1,Circle c2)\n{\n\tdouble d=abs(c2.c-c1.c);\n\tdouble a=acos((c1.r*c1.r+d*d-c2.r*c2.r)/(2.0*c1.r*d));\n\tdouble t=arg(c2.c-c1.c);\n\treturn make_pair(c1.c+polar(c1.r,t+a),c1.c+polar(c1.r,t-a));\n}\nconst int Bottom=0;\nconst int Left=1;\nconst int Right=2;\nconst int Top=3;\n\nclass endPoint\n{\npublic:\n\tPoint p;\n\tint seg;//id of Point\n\tint st;//kind of Point\n\tendPoint(){}\n\tendPoint(Point inp,int inseg,int inst):p(inp),seg(inseg),st(inst){}\n\tbool operator<(const endPoint &ep)const\n\t{\n\t\tif(p.y==ep.p.y)\n\t\t{\n\t\t\treturn st<ep.st;//Bottom->Left->Right->Top\n\t\t}\n\t\telse return p.y<ep.p.y;\n\t}\n};\n\nendPoint EP[200000];\n\nint manhattanintersection(vector<Segment> s)\n{\n\tint n=s.size();\n\tdouble sto;\n\t\n\tfor(int i=0,k=0;i<n;i++)\n\t{\n\t\tif(s[i].p1.y==s[i].p2.y)\n\t\t{\n\t\t\tif(s[i].p1.x>s[i].p2.x)\n\t\t\t{\n\t\t\t\tsto=s[i].p1.x;\n\t\t\t\ts[i].p1.x=s[i].p2.x;\n\t\t\t\ts[i].p2.x=sto;\n\t\t\t}\n\t\t}\n\t\telse if(s[i].p1.y>s[i].p2.y)\n\t\t{\n\t\t\tsto=s[i].p1.y;\n\t\t\ts[i].p1.y=s[i].p2.y;\n\t\t\ts[i].p2.y=sto;\n\t\t}\n\t\t\n\t\tif(s[i].p1.y==s[i].p2.y)\n\t\t{\n\t\t\tEP[k++]=endPoint(s[i].p1,i,Left);\n\t\t\tEP[k++]=endPoint(s[i].p2,i,Right);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tEP[k++]=endPoint(s[i].p1,i,Bottom);\n\t\t\tEP[k++]=endPoint(s[i].p2,i,Top);\n\t\t}\n\t}\n\t\n\tsort(EP,EP+2*n);\n\t\n\tset<int> BT;\n\tBT.insert(1000000001);\n\tint cnt=0;\n\t\n\tfor(int i=0;i<2*n;i++)\n\t{\n\t\tif(EP[i].st==Top)BT.erase(EP[i].p.x);\n\t\telse if(EP[i].st==Bottom)BT.insert(EP[i].p.x);\n\t\telse if(EP[i].st==Left)\n\t\t{\n\t\t\tset<int>::iterator b=lower_bound(BT.begin(),BT.end(),s[EP[i].seg].p1.x);\n\t\t\tset<int>::iterator e=upper_bound(BT.begin(),BT.end(),s[EP[i].seg].p2.x);\n\t\t\tcnt+=distance(b,e);\n\t\t}\n\t}\n\t\n\treturn cnt;\n}\nPolygon andrewscan(Polygon s)\n{\n\tPolygon u,l;\n\tif(s.size()<=2)return s;\n\tsort(s.begin(),s.end());\n\tu.push_back(s[0]);\n\tu.push_back(s[1]);\n\tl.push_back(s[s.size()-1]);\n\tl.push_back(s[s.size()-2]);\n\t\n\tfor(int i=2;i<s.size();i++)\n\t{\n\t\tfor(int n=u.size();n>=2&&ccw(u[n-2],u[n-1],s[i])!=clockwise;n--)\n\t\t{\n\t\t\tu.pop_back();\n\t\t}\n\t\tu.push_back(s[i]);\n\t}\n\t\n\tfor(int i=s.size()-3;i>=0;i--)\n\t{\n\t\tfor(int n=l.size();n>=2&&ccw(l[n-2],l[n-1],s[i])!=clockwise;n--)\n\t\t{\n\t\t\tl.pop_back();\n\t\t}\n\t\tl.push_back(s[i]);\n\t}\n\t\n\treverse(l.begin(),l.end());\n\tfor(int i=u.size()-2;i>=1;i--)l.push_back(u[i]);\n\t\n\treturn l;\n}\nconst int in=2;\nconst int on=1;\nconst int out=0;\n\nint contain(Polygon g,Point p)\n{\n\tint n=g.size();\n\tbool x=false;\n\tPoint a,b;\n\tfor(int i=0;i<n;i++)\n\t{\n\t\ta=g[i]-p;\n\t\tb=g[(i+1)%n]-p;\n\t\tif(abs(cross(a,b))<EPS&&dot(a,b)<EPS)return on;\n\t\tif(a.y>b.y)\n\t\t{\n\t\t\tPoint sto=a;\n\t\t\ta=b;\n\t\t\tb=sto;\n\t\t}\n\t\tif(a.y<EPS&&EPS<b.y&&cross(a,b)>EPS)x=!x;\n\t}\n\treturn x?in:out;\n}\nint main()\n{\n\t//Segment s;\n\t//cin>>s.p1.x>>s.p1.y>>s.p2.x>>s.p2.y;\n\tint q;cin>>q;\n\t//Point a;\n\tSegment s1,s2;\n\tfor(int i=0;i<q;i++)\n\t{\n\t\tcin>>s1.p1.x>>s1.p1.y>>s1.p2.x>>s1.p2.y>>s2.p1.x>>s2.p1.y>>s2.p2.x>>s2.p2.y;\n\t\tcout<<fixed<<setprecision(8)<<getdistance(s1,s2)<<endl;\n\t}\n\treturn 0;\t\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n#define EPS (1e-10)\n#define equal(x,y)  (fabs(x-y)<EPS)\nenum Status{\n\tCOUNTER_CLOCKWISE=1,CLOCKWISE=-1,ONLINE_BACK=2,ONLINE_FRONT=-2,ON_SEGMENT=0\n};\nstruct Point{\n\tdouble x,y;\n\tPoint(double _x=0,double _y=0): x(_x),y(_y){ }\n\tPoint operator+(const Point & p){\n\t\treturn Point(x+p.x,y+p.y);\n\t}\n\tPoint operator-(const Point & p){\n\t\treturn Point(x-p.x,y-p.y);\n\t}\n\tPoint operator*(double k){\n\t\treturn Point(k*x,k*y);\n\t}\n};\ntypedef Point Vector;\nstruct Segment{\n\tPoint p1,p2;\n\tSegment(){\t}\n\tSegment(Point _p1,Point _p2):p1(_p1),p2(_p2){}\n};\ntypedef Segment Line;\ndouble dot(const Vector &v1,const Vector & v2 ){\t//内积 \n\treturn v1.x*v2.x+v1.y*v2.y;\n}\ndouble cross(const Vector &v1,const Vector & v2){\t//外积 \n\treturn v1.x*v2.y-v1.y*v2.x;\n}\ndouble norm(const Vector & v){\t\t\t\t\t\t//范数 \n\treturn dot(v,v);\n}\ndouble abs(const Vector & v){\t\t\t\t\t\t//模长 \n\treturn sqrt(norm(v));\n}\nPoint project(Segment s,Point p){\t\t\t\t\t//点在直线上的投影坐标 \n\tVector base=s.p2-s.p1,v=p-s.p1;\n\tdouble len = dot(base,v)*(1.0/norm(base));\n\treturn s.p1+base*len;\n}\nPoint reflect(Segment s,Point p){\t\t\t\t\t//点关于直线的轴对称点 \n\tPoint proj=project(s,p);\n\treturn proj*2.0-p;\n}\nint ccw( Point p1, Point p2,  Point p3){\t\t\t//判断三点的相对位置 \n\tVector v1=p2-p1,v2=p3-p1;\n\tif(cross(v1,v2)<-EPS) return CLOCKWISE;\n\tif(cross(v1,v2)>EPS) return COUNTER_CLOCKWISE;\n\tif(dot(v1,v2)<-EPS) return ONLINE_BACK;\n\tif(norm(v1)<norm(v2)) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\nbool intersect(Point p1,Point p2,Point p3,Point p4){//线段相交 \n\treturn (ccw(p1,p2,p3)*ccw(p1,p2,p4)<=0&&\n\t\t\t\tccw(p3,p4,p1)*ccw(p3,p4,p2)<=0);\n}\nbool intersect(Segment s1,Segment s2){\n\treturn intersect(s1.p1,s1.p2,s2.p1,s2.p2);\n}\ndouble distanceLP(Line l,Point p){\t\t\t\t\t//点到直线的距离 \n\tVector v1=l.p2-l.p1,v2=p-l.p1;\n\treturn fabs(cross(v1,v2))/abs(v1);\n}\ndouble distanceSP(Segment s,Point p){\t\t\t\t//点到线段的距离\n\tif(dot(p-s.p2,s.p1-s.p2)>EPS&& dot(p-s.p1,s.p2-s.p1)>EPS) \n\t\treturn distanceLP(s,p);\t\n\tdouble len1=abs(s.p1-p),len2=abs(s.p2-p);\n\treturn min(len1,len2);\n}\ndouble distanceSS(Segment s1,Segment s2){\t\t\t//两线段间距离\n\tif(intersect(s1,s2)) return 0.0;\n\tdouble len[]={distanceSP(s1,s2.p1),distanceSP(s1,s2.p2),\n\t\t\t\t\tdistanceSP(s2,s1.p1),distanceSP(s2,s1.p2)};\n\tdouble minlen=len[0];\n\tfor(int i=1;i<4;i++)\n\t\tif(minlen>len[i]) minlen=len[i];\n\treturn minlen;\n}\nint main(){\n\tdouble x[4],y[4];\n\tint q;\n\tcin>>q;\n\tfor(int i=0;i<q;i++){\n\t\tcin>>x[0]>>y[0]>>x[1]>>y[1];\n\t\tcin>>x[2]>>y[2]>>x[3]>>y[3];\n\t\tprintf(\"%.10f\\n\", distanceSS(Segment(Point(x[0],y[0]),Point(x[1],y[1])),Segment(Point(x[2],y[2]),Point (x[3],y[3])) ) );\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<complex>\n#include<vector>\n#include<iomanip>\n\nusing namespace std;\n\ntypedef complex<double> P;\n\n#define EPS 1e-9\n#define shosu(x) fixed<<setprecision(x)\n\nstruct L : public vector<P> {\n  L(const P &a, const P &b) {\n    push_back(a); push_back(b);\n  }\n  L(){;}\n};\nstruct C{\n  P c;double r;\n  C(const P &c,double r):c(c),r(r){}\n};\n\nnamespace std{//演算子の定義\n  bool operator < (const P& a,const P& b){\n    return real(a)!= real(b) ? real(a) < real(b) : imag(a) < imag(b);\n    //return imag(a) != imag(b) ? imag(a) < imag(b) : real(a) < real(b)\n  }\n  bool operator == (const P& a,const P& b){\n    return a.real()==b.real() && a.imag()==b.imag();\n  }\n}\n\ndouble dot(P a,P b){\n  return real(conj(a)*b);\n}\n\ndouble cross(P a,P b){\n  return imag(conj(a)*b);\n}\n\nint ccw(P a, P b, P c) {//3点の関係性\n  b -= a; c -= a;\n  if (cross(b, c) > 0)   return +1;       // counter clockwise\n  if (cross(b, c) < 0)   return -1;       // clockwise\n  if (dot(b, c) < 0)     return +2;       // c--a--b on line\n  if (norm(b) < norm(c)) return -2;       // a--b--c on line\n  return 0;                               // a--c--b on line\n}\n\nP projection(const L &l, const P &p){//pの直線l上の射影の点\n  double t=dot(p-l[0],l[0]-l[1])/norm(l[0]-l[1]);\n  return l[0]+t*(l[0]-l[1]);\n}\n\nP reflection(const L &l, const P &p){//点pの直線lに関して対称な点\n  return p+2.0*(projection(l,p)-p);\n}\n\nbool isOrthogonal(const L &l, const L &m){//2直線の直交判定\n  return fabs(dot(l[1]-l[0], m[1]-m[0])) < EPS;\n}\n\nbool isParallel(const L &l, const L &m){//2直線の平行判定\n  return fabs(cross(l[1]-l[0],m[1]-m[0])) < EPS;\n}\n\nbool intersectLL(const L &l, const L &m){//2直線の交差判定\n  return !isParallel(l,m);\n}\n\nbool intersectSS(const L &s, const L &t) { //2線分の交差判定(完全に交差してないとだめ)\n  return ccw(s[0],s[1],t[0])*ccw(s[0],s[1],t[1]) <= 0 &&\n         ccw(t[0],t[1],s[0])*ccw(t[0],t[1],s[1]) <= 0;\n}\n\nbool intersectSP(const L &s, const P &p) { //直線と点の交差判定\n  return abs(s[0]-p)+abs(s[1]-p)-abs(s[1]-s[0]) < EPS; // triangle inequality\n}\n\nP crosspointSS(const L &a, const L &b){ //2線分の交点\ndouble t1=abs(cross(a[1]-a[0],b[0]-a[0]));\ndouble t2=abs(cross(a[1]-a[0],b[1]-a[0]));\nreturn b[0]+(b[1]-b[0])*t1/(t1+t2);\n}\n\ndouble distanceSP(const L &s, const P &p) {//直線と点との距離\n  const P r = projection(s, p);\n  if (intersectSP(s, r)) return abs(r - p);\n  return min(abs(s[0] - p), abs(s[1] - p));\n}\n\ndouble distanceSS(const L &s, const L &t) {//2線分の距離\n  if (intersectSS(s, t)) return 0;\n  return min(min(distanceSP(s, t[0]), distanceSP(s, t[1])),\n             min(distanceSP(t, s[0]), distanceSP(t, s[1])));\n}\n\n\nP inP(){\n  double x,y;\n  cin >> x >> y;\n  P p(x,y);\n  return p;\n}\n\nL inL(){\n  P p1=inP();\n  P p2=inP();\n  L l(p1,p2);\n  return l;\n}\n\nint main(){\n\n  int q;\n  cin>>q;\n  for(int i=0;i<q;i++){\n    L l1,l2;\n    l1=inL();\n    l2=inL();\n\n    cout << shosu(10) << distanceSS(l1,l2) << endl;\n  }\n\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <cassert>\n#include <climits>\n#include <cmath>\n#include <complex>\n#include <cstring>\n#include <ctime>\n#include <iomanip>\n#include <map>\n#include <queue>\n#include <set>\n#include <tuple>\nusing namespace std;\ntypedef long long ll;\n#define _ << \" \" <<\n#define all(X) (X).begin(), (X).end()\n#define len(X) (X).size()\n#define Pii pair<int, int>\n#define Pll pair<ll, ll>\n#define Tiii tuple<int, int, int>\n#define Tlll tuple<ll, ll, ll>\n\ndouble eps = 1e-8;\n\nstruct point /* vec */ {\n    double x, y;\n    point operator+(const point &p) {\n        return {x + p.x, y + p.y};\n    }\n    point operator-(const point &p) {\n        return {x - p.x, y - p.y};\n    }\n};\n\nstruct line {\n    // ax + by + c = 0\n    double a, b, c;\n};\n\nstruct circle {\n    point p;\n    double r;\n};\n\ndouble dot(point P, point Q) {\n    return P.x*Q.x + P.y*Q.y;\n}\n\ndouble cross_2d(point P, point Q) {\n    return P.x*Q.y - P.y*Q.x;\n}\n\ndouble points_distance(point A, point B, int deg) {\n    point C = B - A;\n    return pow(C.x*C.x + C.y*C.y, 0.5 * deg);\n}\n\nline line_2points(point P, point Q) {\n    return {P.y - Q.y, Q.x - P.x, P.x*Q.y - P.y*Q.x};\n}\n\npoint lines_intersection(line l, line m) {\n    if (abs(l.a*m.b - l.b*m.a) < eps) {\n        assert(-1);\n    }\n    return {- (l.b*m.c - l.c*m.b) / (l.b*m.a - l.a*m.b),\n            - (l.a*m.c - l.c*m.a) / (l.a*m.b - l.b*m.a)};\n}\n\nbool line_same(line l, line m) {\n    if (l.c * m.c == 0) {\n        if (l.c == m.c) {\n            if (l.b * m.b == 0) {\n                if (l.b == m.b) return 1;\n                else return 0;\n            }\n            else return l.a / l.b == m.a / m.b; \n        }\n        else return 0;\n    }\n    else return l.a / l.c == m.a / m.c && l.b / l.c == m.b / m.c;\n}\n\nbool on_line(point P, point Q, point R) {\n    if (P.x > Q.x) swap(P, Q);\n    if (P.y > Q.y) swap(P.y, Q.y);\n    return (P.x <= R.x && R.x <= Q.x && P.y <= R.y && R.y <= Q.y);\n}\n\ndouble point_line_distance(point P, line l) {\n    return abs(l.a * P.x + l.b * P.y + l.c) / sqrt(l.a*l.a + l.b*l.b);\n}\n\ndouble point_segment_distance(point p1, point p2, point q) {\n    if (dot(q - p1, p2 - p1) <= 0) return points_distance(p1, q, 1);\n    else if (dot(q - p2, p1 - p2) <= 0) return points_distance(p2, q, 1);\n    else return point_line_distance(q, line_2points(p1, p2));\n}\n\ndouble is_segments_intersect(point p1, point p2, point q1, point q2) {\n    line s0 = line_2points(p1, p2);\n    line s1 = line_2points(q1, q2);\n    if (abs(s0.a*s1.b - s0.b*s1.a) < eps) {\n        if (p1.x > p2.x) swap(p1, p2);\n        if (p1.y > p2.y) swap(p1.y, p2.y);\n        if (q1.x > q2.x) swap(q1, q2);\n        if (q1.y > q2.y) swap(q1.y, q2.y);\n        if (line_same(s0, s1)) {\n            return (q1.x <= p2.x && p1.x <= q2.x && q1.y <= p2.y && p1.y <= q2.y);\n        }\n        else return 0;\n    }\n    return cross_2d(p2 - p1, q1 - p1) * cross_2d(p2 - p1, q2 - p1) < eps\n        && cross_2d(q2 - q1, p1 - q1) * cross_2d(q2 - q1, p2 - q1) < eps;\n}\n\nvector<point> circles_intersection(circle A, circle B) {\n    vector<point> ret;\n    point X = A.p;\n    B.p = B.p - A.p;\n    A.p = {0, 0};\n\n    if (points_distance(A.p, B.p, 2) - pow(A.r + B.r, 2) > eps) return ret;\n\n    double K = (B.p.x*B.p.x + B.p.y*B.p.y + A.r*A.r - B.r*B.r) / 2;\n    double SQ = (B.p.x*B.p.x + B.p.y*B.p.y)*A.r*A.r - K * K;\n    double DS = points_distance(A.p, B.p, 2);\n    //cerr << K _ SQ _ DS << endl;\n    if (abs(SQ) < eps) {\n        ret.push_back({K*B.p.x / DS + X.x, K*B.p.y / DS + X.y});\n        return ret;\n    }\n    ret.push_back({(K*B.p.x + B.p.y*sqrt(SQ)) / DS + X.x,\n                   (K*B.p.y - B.p.x*sqrt(SQ)) / DS + X.y});\n    ret.push_back({(K*B.p.x - B.p.y*sqrt(SQ)) / DS + X.x,\n                   (K*B.p.y + B.p.x*sqrt(SQ)) / DS + X.y});\n    return ret;\n}\n \nint main() {\n    cout << fixed << setprecision(10);\n    int q;\n    cin >> q;\n    while (q--) {\n        point p[4];\n        for (int i = 0; i < 4; i++) {\n            cin >> p[i].x >> p[i].y;\n        }\n        if (is_segments_intersect(p[0], p[1], p[2], p[3])) {\n            cout << 0 << endl;\n        }\n        else {\n            cout << min({point_segment_distance(p[0], p[1], p[2]), \n                         point_segment_distance(p[0], p[1], p[3]),\n                         point_segment_distance(p[2], p[3], p[0]),\n                         point_segment_distance(p[2], p[3], p[1])}) << endl;\n        }\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define REP(i,a,b) for(int i=a;i<b;i++)\n#define rep(i,n) REP(i,0,n)\n\ntypedef complex<double> P;\nstruct Line : public vector<P>\n{\n  Line(P a=P(), P b=P()) {\n    push_back(a); push_back(b);\n  }\n};\ntypedef Line Segment;\n\n#define EPS (1e-8)\n\nbool operator < (P const& a, P const& b) {\n  return (a.real() != a.real()) ? a.real() < b.real() : a.imag() < b.imag();\n}\n\ndouble dot(P const& a, P const& b) {\n  return real(conj(a)*b);\n}\n\ndouble cross(P const& a, P const& b) {\n  return imag(conj(a)*b);\n}\n\nP projection_point(P const& a, P const& b, P const& c) {\n  double k = dot(b-a, c-a) / norm(b-a);\n  return a+k*(b-a);\n}\n\nP reflection_point(P const& a, P const& b, P const& c) {\n  return c + 2.*(projection_point(a, b, c) - c);\n}\n\nbool is_parallel(Segment const& s, Segment const& t) {\n  return abs(cross(s[1]-s[0], t[1]-t[0])) < EPS;\n}\n\nbool is_orthogonal(Segment const& s, Segment const& t) {\n  return abs(dot(s[1]-s[0], t[1]-t[0])) < EPS;\n}\n\nint ccw(P a, P b, P c) {\n  b -= a, c -= a;\n  if(cross(b, c) > 0) return +1; // counter clockwise\n  if(cross(b, c) < 0) return -1;  // clockwise\n  if(dot(b, c) < 0) return +2;    // c-a-b\n  if(norm(b) < norm(c)) return -2;  // a-b-c\n  return 0; // on segment\n}\n\nbool is_intersect_ss(Segment const& s, Segment const& t) {\n  return ccw(s[0], s[1], t[0]) * ccw(s[0], s[1], t[1]) <= 0\n         && ccw(t[0], t[1], s[0]) * ccw(t[0], t[1], s[1]) <= 0;\n}\n\nP crosspoint_ss(Segment const& s, Segment const& t) {\n  P bline = t[1]-t[0];\n  double d1 = abs(cross(bline, s[0]-t[0])), d2 = abs(cross(bline, s[1]-t[0]));\n  return s[0] + d1/(d1+d2) * (s[1]-s[0]);\n}\n\nbool is_point_onsegment(Segment const& s, P const& p) {\n  return abs(s[0]-p)+abs(s[1]-p)-abs(s[1]-s[0]) < EPS;\n}\n\ndouble distance_sp(Segment const& s, P const& p) {\n  P q = projection_point(s[1], s[0], p);\n  if(is_point_onsegment(s, p)) return abs(p-q);\n  return min(abs(s[0]-p), abs(s[1]-p));\n}\n\ndouble distance_ss(Segment const& s, Segment const& t) {\n  if(is_intersect_ss(s, t)) return 0.; // 交差は距離 0\n  return min(min(distance_sp(t, s[0]), distance_sp(t, s[1])),\n             min(distance_sp(s, t[0]), distance_sp(s, t[1])));\n}\n\nint main () {\n  \n  int q; cin >> q;\n  for(;q--;) {\n    Segment s, t;\n    cin >> s[0].real() >> s[0].imag();\n    cin >> s[1].real() >> s[1].imag();\n    cin >> t[0].real() >> t[0].imag();\n    cin >> t[1].real() >> t[1].imag();\n    \n    printf(\"%.10f\\n\", distance_ss(s, t));\n  }\n  \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define rep(i, n) for(int i = 0; i < (n); ++i)\nusing namespace std;\n\nconst double EPS = 1e-10;\nbool eq(double a, double b) {return fabs(a - b) < EPS;}\n\nstruct Point {\n    double x, y;\n    Point(double x = 0.0, double y = 0.0) : x(x), y(y) {}\n    Point operator + (Point &p);\n    Point operator - (Point &p);\n    Point operator * (double k);\n    Point operator / (double k);\n    bool operator == (const Point &p) const;\n    double norm();\n    double abs();\n    void print();\n} typedef Vec;\n\nstruct Segment {\n    Point p1, p2;\n    Segment(Point p1, Point p2) : p1(p1), p2(p2) {}\n    Segment(double x1, double y1, double x2, double y2) : p1(Point(x1, y1)), p2(Point(x2, y2)) {}\n} typedef Line;\n\nstruct Circle {\n    Point o; double r;\n    Circle(Point o, double r) : o(o), r(r) {}\n    Circle(double x, double y, double r) : o(Point(x, y)), r(r) {}\n};\n\ndouble norm(Vec a);\ndouble abs(Vec a);\n\ndouble dot(Vec a, Vec b);\ndouble cross(Vec a, Vec b);\n\ndouble getDistance(Point a, Point b);\ndouble getDistanceLP(Line l, Point p);\ndouble getDistanceSP(Segment s, Point p);\ndouble getDistanceSS(Segment s1, Segment s2);\n\nint ccw(Point a, Point b, Point c);\nbool intersect(Point a1, Point a2, Point b1, Point b2);\nbool intersect(Segment s1, Segment s2);\n\nbool isOrthogonal(Vec a, Vec b);\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2);\nbool isOrthogonal(Segment s1, Segment s2);\n\nbool isParallel(Vec a, Vec b);\nbool isParallel(Point a1, Point a2, Point b1, Point b2);\nbool isParallel(Segment s1, Segment s2);\n\nPoint project(Segment s, Point p);\nPoint reflect(Segment s, Point p);\nPoint getCrossPoint(Segment s1, Segment s2);\n\nint main() {\n    int q; cin >> q;\n    while(q--) {\n        double x, y, x2, y2;\n        cin >> x >> y >> x2 >> y2;\n        Line s(x, y, x2, y2);\n        cin >> x >> y >> x2 >> y2;\n        Line s2(x, y, x2, y2);\n        printf(\"%.10lf\\n\", getDistanceSS(s, s2));\n    }\n    return 0;\n}\n\nPoint Point::operator + (Point &p) {return Point(x + p.x, y + p.y);}\nPoint Point::operator - (Point &p) {return Point(x - p.x, y - p.y);}\nPoint Point::operator * (double k) {return Point(x * k, y * k);}\nPoint Point::operator / (double k) {return Point(x / k, y / k);}\nbool Point::operator == (const Point &p) const {return eq(x, p.x) && eq(y, p.y);}\ndouble Point::norm() {return x * x + y * y;}\ndouble Point::abs() {return sqrt(norm());}\nvoid Point::print() {printf(\"%.10lf %.10lf\\n\", x, y);}\n\ndouble norm(Vec a) {return a.x * a.x + a.y * a.y;}\ndouble abs(Vec a) {return sqrt(norm(a));}\n\ndouble dot(Vec a, Vec b) {return a.x * b.x + a.y * b.y;}\ndouble cross(Vec a, Vec b) {return a.x * b.y - a.y * b.x;}\n\ndouble getDistance(Point a, Point b) {return abs(a - b);}\ndouble getDistanceLP(Line l, Point p) {return abs(cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1));}\ndouble getDistanceSP(Segment s, Point p) {\n    if(dot(s.p2 - s.p1, p - s.p1) < 0.0) return abs(p - s.p1);\n    if(dot(s.p1 - s.p2, p - s.p2) < 0.0) return abs(p - s.p2);\n    return getDistanceLP(s, p);\n}\ndouble getDistanceSS(Segment s1, Segment s2) {\n    if(intersect(s1, s2)) return 0.0;\n    return (min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n                min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2))));\n}\n\nint ccw(Point a, Point b, Point c) {\n    b = b - a;\n    c = c - a;\n    if(cross(b, c) > EPS) return 1; // COUNTER_CLOCKWISE\n    if(cross(b, c) < -EPS) return -1; // CLOCKWISE\n    if(dot(b, c) < -EPS) return 2; // ONLINE_BACK\n    if(norm(b) < norm(c)) return -2; // ONLINE_FRONT\n    return 0; // ON_SEGMENT\n}\nbool intersect(Point a1, Point a2, Point b1, Point b2) {\n    return (ccw(a1, a2, b1) * ccw(a1, a2, b2) <= 0 &&\n            ccw(b1, b2, a1) * ccw(b1, b2, a2) <= 0);\n}\nbool intersect(Segment s1, Segment s2) {return intersect(s1.p1, s1.p2, s2.p1, s2.p2);}\n\nbool isOrthogonal(Vec a, Vec b) {return eq(dot(a, b), 0.0);}\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {return isOrthogonal(a1 - a2, b1 - b2);}\nbool isOrthogonal(Segment s1, Segment s2) {return eq(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);}\n\nbool isParallel(Vec a, Vec b) {return eq(cross(a, b), 0.0);}\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {return isParallel(a1 - a2, b1 - b2);}\nbool isParallel(Segment s1, Segment s2) {return eq(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);}\n\nPoint project(Segment s, Point p) {\n    Vec base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / norm(base);\n    return base * r + s.p1;\n};\nPoint reflect(Segment s, Point p) {return (project(s, p) - p) * 2.0 + p;}\nPoint getCrossPoint(Segment s1, Segment s2) {\n    Vec base = s2.p2 - s2.p1;\n    double d1 = abs(cross(base, s1.p1 - s2.p1));\n    double d2 = abs(cross(base, s1.p2 - s2.p1));\n    double t = d1 / (d1 + d2);\n    return (s1.p2 - s1.p1) * t + s1.p1;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define Fi first\n#define Se second\n#define pb push_back\n#define mp make_pair\n#define rep(x, a, b) for(int x = (a); x <= (b); ++ x)\n#define per(x, a, b) for(int x = (a); x >= (b); -- x)\n#define rop(x, a, b) for(int x = (a); x < (b); ++ x)\n#define por(x, a, b) for(int x = (a); x > (b); -- x) \n\ntypedef long long LL;\ntypedef unsigned long long ULL;\ntypedef unsigned int unt;\ntypedef double db;\ntypedef pair <int, int> pii;\ntypedef vector <int> vi;\n\nconst db eps  = 1e-8;\nconst db _PI  = 3.1415926535897932384;\nconst db _E   = 2.7182818284590452354;\nconst int inf = 0x3f3f3f3f;\nconst LL INF  = 0x3f3f3f3f3f3f3f3fll;\n\nint dcmp(db x) {\n\tif(x > eps) return 1;\n\tif(x < -eps) return -1;\n\treturn 0;\n}\n\nint dcmp(db x, db y) {\n\treturn dcmp(x - y);\n}\n\nstruct Point {\n\tdb x, y;\n\tPoint(db _x = 0, db _y = 0) : x(_x), y(_y) {}\n\tvoid print() { printf(\"%.10f %.10f\", x, y); }\n};\nstruct Line {\n\tPoint p1, p2;\n\tLine() {};\n\tLine(Point _p1, Point _p2) : p1(_p1), p2(_p2) {};\n};\n\ntypedef Point Vector;\ntypedef Line Segment;\n\n// CCW\nconst int CCW_COUNTER_CLOCKWISE = 1;\nconst int CCW_CLOCKWISE = -1;\nconst int CCW_ONLINE_FRONT = -2;\nconst int CCW_ONLINE_BACK = 2;\nconst int CCW_ON_SEGMENT = 0;\n\nVector operator + (Vector a, Vector b) {\n\treturn Vector(a.x + b.x, a.y + b.y);\n}\nVector operator - (Vector a, Vector b) {\n\treturn Vector(a.x - b.x, a.y - b.y);\n}\nVector operator * (Vector a, db b) {\n\treturn Vector(a.x * b, a.y * b);\n}\nVector operator / (Vector a, db b) {\n\treturn Vector(a.x / b, a.y / b);\n}\ndb operator * (Vector a, Vector b) {\n\treturn a.x * b.x + a.y * b.y;\n}\ndb operator ^ (Vector a, Vector b) {\n\treturn a.x * b.y - a.y * b.x;\n}\ndb dis(Point a, Point b) {\n\treturn sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));\n}\ndb dis2(Point a, Point b) {\n\treturn (a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y);\n}\ndb dis(Vector a) {\n\treturn sqrt(a.x * a.x + a.y * a.y);\n}\ndb dis2(Vector a) {\n\treturn a.x * a.x + a.y * a.y;\n}\nPoint Project(Line L, Point p) {\n\tVector Base = L.p2 - L.p1;\n\tdb len = Base * (p - L.p1);\n\treturn L.p1 + Base * (len / dis2(L.p1, L.p2));\n}\nPoint Reflect(Line L, Point p) {\n\treturn p + (Project(L, p) - p) * 2.0;\n}\n\nint ccw(Point p0, Point p1, Point p2) {\n\tVector p01 = p1 - p0, p02 = p2 - p0;\n\tif(dcmp(p01 ^ p02) == 1) return CCW_COUNTER_CLOCKWISE; // 顺时针 \n\tif(dcmp(p01 ^ p02) == -1) return CCW_CLOCKWISE;        // 逆时针 \n\tif(dcmp(p01 * p02) == -1) return CCW_ONLINE_BACK;\n\tif(dcmp(dis2(p01), dis2(p02)) == -1) return CCW_ONLINE_FRONT;\n\treturn CCW_ON_SEGMENT;\n}\n\nbool isOrthogonal(Vector a, Vector b) {\n\treturn dcmp(a * b) == 0;\n}\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n\treturn isOrthogonal(a2 - a1, b2 - b1);\n}\nbool isOrthogonal(Line a, Line b) {\n\treturn isOrthogonal(a.p2 - a.p1, b.p2 - b.p1);\n}\nbool isParallel(Vector a, Vector b) {\n\treturn dcmp(a ^ b) == 0;\n}\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n\treturn isParallel(a2 - a1, b2 - b1);\n}\nbool isParallel(Line a, Line b) {\n\treturn isParallel(a.p2 - a.p1, b.p2 - b.p1);\n}\nbool IntersectSS(Point a1, Point a2, Point b1, Point b2) {\n\treturn ccw(a1, a2, b1) * ccw(a1, a2, b2) <= 0 && ccw(b1, b2, a1) * ccw(b1, b2, a2) <= 0;\n}\nbool IntersectSS(Segment a, Segment b) {\n\treturn IntersectSS(a.p1, a.p2, b.p1, b.p2);\n}\nPoint getCrossPointSS(Segment a, Segment b) {\n\tVector Base = b.p2 - b.p1;\n\tdb S1 = fabs(Base ^ (a.p1 - b.p1));\n\tdb S2 = fabs(Base ^ (a.p2 - b.p1));\n\treturn a.p1 + (a.p2 - a.p1) * (S1 / (S1 + S2));\n}\n//Point getCrossPointLL(Line a, Line b) {\n//\tdb S1 = (b.p2 - b.p1) ^ (a.p2 - a.p1);\n//\tdb S2 = (b.p2 - b.p1) ^ (b.p2 - a.p1);\n//\tif(dcmp(S1) <= 0 && dcmp(S2) <= 0) return a.p1;\n//\treturn a.p1 + (a.p2 - a.p1) * (S2 / S1); //抄的别人代码，然而并不懂为啥/kel \n//}\ndb disLP(Line a, Point p) {\n\treturn fabs(((a.p2 - a.p1) ^ (p - a.p1)) / dis(a.p1, a.p2));\n}\ndb disSP(Segment a, Point p) {\n\tif(dcmp((a.p2 - a.p1) * (p - a.p1)) == -1) return dis(a.p1, p);\n\tif(dcmp((a.p1 - a.p2) * (p - a.p2)) == -1) return dis(a.p2, p);\n\treturn disLP(a, p);\n}\ndb disSS(Segment a, Segment b) {\n\tif(IntersectSS(a, b)) return 0;\n\treturn min({disSP(b, a.p1), disSP(b, a.p2), disSP(a, b.p1), disSP(a, b.p2)});\n}\n\nint main() {\n\tint q; scanf(\"%d\", &q);\n\trep(i, 1, q) {\n\t\tSegment a, b;\n\t\tscanf(\"%lf%lf%lf%lf%lf%lf%lf%lf\", &a.p1.x, &a.p1.y, &a.p2.x, &a.p2.y, &b.p1.x, &b.p1.y, &b.p2.x, &b.p2.y);\n\t\tprintf(\"%.10f\\n\", disSS(a, b));\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <vector>\n#include <complex>\n#include <cstdio>\n#include <cassert>\n#include <cmath>\nusing namespace std;\n\n#define REP(i,n) for(int i=0;i<(int)n;++i)\n#define FOR(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i)\n#define ALL(c) (c).begin(), (c).end()\n\nconst double EPS = 1e-8;\nconst double INF = 1e12;\ntypedef complex<double> P;\nnamespace std {\n  bool operator < (const P& a, const P& b) {\n    return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n  }\n}\ndouble cross(const P& a, const P& b) {\n  return imag(conj(a)*b);\n}\ndouble dot(const P& a, const P& b) {\n  return real(conj(a)*b);\n}\n\nstruct L : public vector<P> {\n  L(const P &a, const P &b) {\n    push_back(a); push_back(b);\n  }\n};\n\nint ccw(P a, P b, P c) {\n  b -= a; c -= a;\n  if (cross(b, c) > 0)   return +1;       // counter clockwise\n  if (cross(b, c) < 0)   return -1;       // clockwise\n  if (dot(b, c) < 0)     return +2;       // c--a--b on line\n  if (norm(b) < norm(c)) return -2;       // a--b--c on line\n  return 0;\n}\n\nbool intersectLL(const L &l, const L &m) {\n  return abs(cross(l[1]-l[0], m[1]-m[0])) > EPS || // non-parallel\n         abs(cross(l[1]-l[0], m[0]-l[0])) < EPS;   // same line\n}\nbool intersectLS(const L &l, const L &s) {\n  return cross(l[1]-l[0], s[0]-l[0])*       // s[0] is left of l\n         cross(l[1]-l[0], s[1]-l[0]) < EPS; // s[1] is right of l\n}\nbool intersectLP(const L &l, const P &p) {\n  return abs(cross(l[1]-p, l[0]-p)) < EPS;\n}\nbool intersectSS(const L &s, const L &t) {\n  return ccw(s[0],s[1],t[0])*ccw(s[0],s[1],t[1]) <= 0 &&\n         ccw(t[0],t[1],s[0])*ccw(t[0],t[1],s[1]) <= 0;\n}\nbool intersectSP(const L &s, const P &p) {\n  return abs(s[0]-p)+abs(s[1]-p)-abs(s[1]-s[0]) < EPS; // triangle inequality\n}\n\nP projection(const L &l, const P &p) {\n  double t = dot(p-l[0], l[0]-l[1]) / norm(l[0]-l[1]);\n  return l[0] + t*(l[0]-l[1]);\n}\nP reflection(const L &l, const P &p) {\n  return p + (projection(l, p) - p)*2.0;\n}\ndouble distanceLP(const L &l, const P &p) {\n  return abs(p - projection(l, p));\n}\ndouble distanceLL(const L &l, const L &m) {\n  return intersectLL(l, m) ? 0 : distanceLP(l, m[0]);\n}\ndouble distanceLS(const L &l, const L &s) {\n  if (intersectLS(l, s)) return 0;\n  return min(distanceLP(l, s[0]), distanceLP(l, s[1]));\n}\ndouble distanceSP(const L &s, const P &p) {\n  const P r = projection(s, p);\n  if (intersectSP(s, r)) return abs(r - p);\n  return min(abs(s[0] - p), abs(s[1] - p));\n}\ndouble distanceSS(const L &s, const L &t) {\n  if (intersectSS(s, t)) return 0;\n  return min(min(distanceSP(s, t[0]), distanceSP(s, t[1])),\n             min(distanceSP(t, s[0]), distanceSP(t, s[1])));\n}\n\nint main(){\n\tint T,x1,y1,x2,y2;\n\tfor(scanf(\"%d\",&T);T--;){\n\t\tscanf(\"%d%d%d%d\",&x1,&y1,&x2,&y2);\n\t\tL A(P(x1,y1),P(x2,y2));\n\t\tscanf(\"%d%d%d%d\",&x1,&y1,&x2,&y2);\n\t\tL B(P(x1,y1),P(x2,y2));\n\t\tprintf(\"%.9f\\n\",distanceSS(A,B));\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\n#define rep(i, a, b) for (int i = a; i < (int)(b); ++i)\n#define rrep(i, a, b) for (int i = b - 1; i >= (int)(a); --i)\n\nusing namespace std;\nusing ll = long long;\nusing vi = vector<int>;\nusing vll = vector<ll>;\nusing vd = vector<double>;\nusing vvi = vector<vi>;\n\nconstexpr int MOD = 1000000007;\n\n// Data structures.\nstruct Point {\n    double x, y;\n    Point(double x = 0, double y = 0) : x(x), y(y) {}\n    Point(const Point& p) : x(p.x), y(p.y) {}\n\n    Point operator+(const Point& p) const { return Point(x + p.x, y + p.y); }\n    Point operator-(const Point& p) const { return Point(x - p.x, y - p.y); }\n    Point operator*(double k) const { return Point(k * x, k * y); }\n    Point operator/(double k) const { return Point(x / k, y / k); }\n\n    bool operator<(const Point& p) const { return x != p.x ? x < p.x : y < p.y; }\n    bool operator==(const Point& p) const { return fabs(x - p.x) < 1e-10 && fabs(y - p.y) < 1e-10; }\n\n    static double norm(const Point& p) { return sqrt(p.x * p.x + p.y * p.y); }\n    static double dot(const Point& p1, const Point& p2) { return p1.x * p2.x + p1.y * p2.y; }\n    static double cross(const Point& p1, const Point& p2) { return p1.x * p2.y - p1.y * p2.x; }\n};\n\nstruct Segment {\n    Point s, t;\n};\n\nint ccw(const Point& p1, const Point& p2, const Point& p) {\n    double cr = Point::cross(p2 - p1, p - p1);\n    if (cr > 0) return 1;\n    if (cr < 0) return -1;\n    // p, p1, p2.\n    if (Point::dot(p2 - p1, p - p1) < 0) { return 2; }\n    // p1, p2, p.\n    if (Point::dot(p - p2, p1 - p2) < 0) { return -2; }\n    // p is in [p1, p2].\n    return 0;\n}\n\nbool intersect(const Segment& s1, const Segment& s2) {\n    bool ok1 = ccw(s1.s, s1.t, s2.s) * ccw(s1.s, s1.t, s2.t) <= 0;\n    bool ok2 = ccw(s2.s, s2.t, s1.s) * ccw(s2.s, s2.t, s1.t) <= 0;\n    return ok1 && ok2;\n}\n\ndouble distance(const Segment& s, const Point& p) {\n    if (Point::dot(s.t - s.s, p - s.s) < 0) { return Point::norm(p - s.s); }\n    if (Point::dot(s.s - s.t, p - s.t) < 0) { return Point::norm(p - s.t); }\n    return abs(Point::cross(s.t - s.s, p - s.s)) / Point::norm(s.t - s.s);\n}\n\ndouble distance(const Segment& s1, const Segment& s2) {\n    if (intersect(s1, s2)) { return 0; }\n    double ans = DBL_MAX;\n    ans = min(ans, distance(s1, s2.s));\n    ans = min(ans, distance(s1, s2.t));\n    ans = min(ans, distance(s2, s1.s));\n    ans = min(ans, distance(s2, s1.t));\n    return ans;\n}\n\nint main() {\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n\n    int q;\n    cin >> q;\n\n    rep(i, 0, q) {\n        Segment s1, s2;\n        cin >> s1.s.x >> s1.s.y >> s1.t.x >> s1.t.y;\n        cin >> s2.s.x >> s2.s.y >> s2.t.x >> s2.t.y;\n        printf(\"%.10f\\n\", distance(s1, s2));\n    }\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <vector>\n#include <map>\n#include <set>\n#include <deque>\n#include <stack>\n#include <queue>\n#include <algorithm>\n#include <numeric>\n#include <cstdio>\n#include <cmath>\n#include <cstdlib>\n#include <cctype>\n#include <string>\n#include <cstring>\n#include <ctime>\n#include <cassert>\n#include <climits>\n\nusing namespace std;\n\ntypedef long long lint;\n\n//定数\nconst double EPS = 1e-10;\nconst int dx[] = {-1, 0, 1, 0};\nconst int dy[] = {0, 1, 0, -1};\nconst int INF = 1001001001;\nconst lint INFLL = 1001001001001001001ll;\n\n//初期化関連\n#define zclear(a) memset((a), 0 ,sizeof(a))\n#define mclear(a) memset((a), -1, sizeof(a))\n\n//デバッグ出力\n#define show(x)  cerr << #x << \" = \" << (x) << endl;\n#define debug(x) cerr << #x << \" = \" << (x) << \" (L\" << __LINE__ << \")\" << \" \" << __FILE__ << endl;\n\nbool eq(double a, double b) //a == b\n{\n    return (fabs(a - b) <= EPS);\n}\n\nbool neq(double a, double b) //a != b\n{\n    return (!eq(a, b));\n}\n  \nbool lt(double a, double b) //a < b\n{\n    return (a - b < -EPS);\n}\n  \nbool leq(double a, double b) //a <= b\n{\n    return (lt(a, b) || eq(a, b));\n}\n  \nbool gt(double a, double b) //a > b\n{\n    return (a - b > +EPS);\n}\n  \nbool geq(double a, double b) //a >= b\n{\n    return (gt(a, b) || eq(a, b));\n}\n\nclass Point{\npublic:\n\tdouble x, y;\n\tPoint(double x = 0, double y = 0): x(x), y(y){}\n\tPoint operator + (Point p){return Point(x + p.x, y + p.y);}\n\tPoint operator - (Point p){return Point(x - p.x, y - p.y);}\n\tPoint operator * (double a){return Point(x * a, y * a);}\n\tPoint operator / (double a){return Point(x / a, y / a);}\n\tPoint operator * (const Point &a){\n\t\treturn Point(x * a.x - y * a.y, x * a.y + y * a.x);\n\t}\n\tbool operator < (const Point &p) const {\n\t\treturn (x != p.x ? x < p.x : y < p.y);\n\t}\n\tbool operator == (const Point &p) const {\n\t\treturn (fabs(x - p.x) < EPS && fabs(y - p.y) < EPS);\n\t}\n};\n\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\ndouble norm(Vector a){return (a.x * a.x + a.y * a.y);}\ndouble abs(Vector a){return (sqrt(norm(a)));}\ndouble abs(Vector a, Vector b){return (sqrt(norm(a - b)));}\ndouble dot(Vector a, Vector b){return (a.x * b.x + a.y * b.y);}\ndouble cross(Vector a, Vector b){return (a.x * b.y - a.y * b.x);}\ndouble atan(Vector a){return atan2(a.y, a.x);}\nbool sortX(Point a, Point b){return (a.x != b.x ? lt(a.x, b.x) : lt(a.y, b.y));}\nbool sortY(Point a, Point b){return (a.y != b.y ? lt(a.y, b.y) : lt(a.x, b.x));}\nPoint baseP;\nbool sortT(Point a, Point b){return (gt(cross(a - baseP, b - baseP), 0));}\n\nint ccw(Point p0, Point p1, Point p2)\n{\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (cross(a, b) > EPS) return (+1); //p0, p1, p2 が反時計周り\n\tif (cross(a, b) < -EPS) return (-1);//p0, p1, p2 が時計回り\n\tif (dot(a, b) < -EPS) return (+2); //p2--p0--p1 の順で一直線上\n\tif (norm(a) < norm(b)) return (-2); //p0--p1--p2 の順で一直線上\n\treturn (0); //p0--p2--p1 の順で一直線上\n}\n\nPolygon normalize(Polygon &v)\n{\n    int pt = 0;\n    for (int i = 1; i < v.size(); i++){\n        if (v[pt].y > v[i].y || (v[pt].y == v[i].y && v[pt].x > v[i].x)){\n            pt = i;\n        }\n    }\n    swap(v[pt], v[0]);\n    baseP = v[0];\n    sort(v.begin() + 1, v.end(), sortT);\n    return (v);\n}\n\nPolygon conhel(Polygon& ps)\n{\n    sort(ps.begin(), ps.end());\n    int k = 0, n = (int)ps.size();\n    Polygon qs(n * 2);\n      \n    for (int i = 0; i < n; i++){\n      while (k > 1 && cross(qs[k - 1] - qs[k - 2], ps[i] - qs[k - 1]) < EPS) k--;\n      qs[k++] = ps[i];\n    }\n  \n    for (int i = n - 2, t = k; i >= 0; i--){\n      while (k > t && cross(qs[k - 1] - qs[k - 2], ps[i] - qs[k - 1]) < EPS) k--;\n      qs[k++] = ps[i];\n    }\n  \n    qs.resize(k - 1);\n    return (qs);\n}\n\ndouble getArea(Polygon t){\n    double ans = 0.0;\n\tt = normalize(t);\n    for (unsigned int i = 0; i < t.size(); i++)\n        ans += cross(t[i] , t[(i + 1) % t.size()]);\n    return (fabs(ans) / 2);\n}\n\nbool isIntersectLL(Point p1, Point p2, Point p3, Point p4)\n{// 同一直線の場合は交差していると判定する.\n\treturn (abs(cross(p2 - p1, p4 - p3)) > EPS || // 傾きが異なる\n\t\tabs(cross(p2 - p1, p4 - p1)) < EPS); // 同じ直線である\n}\nbool isIntersectLS(Point p1, Point p2, Point p3, Point p4)\n{// 同一直線上にある場合も交差と判定\n\treturn (cross(p2 - p1, p3 - p1) * cross(p2 - p1, p4 - p1) < EPS);\n}\nbool isIntersectLP(Point p1, Point p2, Point p)\n{\n\treturn (neq(abs(ccw(p1, p2, p)), 1));\n}\nbool isIntersectSS(Point p1, Point p2, Point p3, Point p4)\n{\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n             ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\nbool isIntersectSP(Point p1, Point p2, Point p)\n{\n\treturn (eq(ccw(p1, p2, p), 0));\n}\nbool isInsideCP(Point c, double r, Point p)\n{\n\treturn (leq(abs(c - p), r));\n}\nbool isInsideCC(Point c1, double r1, Point c2, double r2)\n{\n\treturn (leq(abs(c1 - c2), r1 + r2) && geq(abs(c1 - c2), abs(r1 - r2)));\n}\nbool isInsidePolyP(Polygon gon, Point p)\n{\n    for (int i = 0; i < gon.size(); i++){\n        if (ccw(gon[i], gon[(i + 1) % gon.size()], p) == -1) return (false);\n    }\n    return (true);\n}\n\nPoint projection(Point p1, Point p2, Point p3) //直線p1p2 上への写像\n{\n\tdouble t = dot(p3 - p1, p2 - p1) / norm(p2 - p1);\n\treturn (p1 + (p2 - p1) * t);\n}\nPoint reflection(Point p1, Point p2, Point p3) //直線p1p2 上への反射\n{\n\treturn (p3 + (projection(p1, p2, p3) - p3) * 2);\n}\ndouble distanceLP(Point p1, Point p2, Point p)\n{\n\treturn (abs(p - projection(p1, p2, p)));\n}\ndouble distanceLL(Point l1, Point l2, Point m1, Point m2)\n{\n\treturn (isIntersectLL(l1, l2, m1, m2) ? 0 : distanceLP(l1, l2, m1));\n}\ndouble distanceLS(Point l1, Point l2, Point s1, Point s2)\n{\n    if (isIntersectLS(l1, l2, s1, s2)) return (0);\n\treturn (min(distanceLP(l1, l2, s1), distanceLP(l1, l2, s2)));\n}\ndouble distanceSP(Point s1, Point s2, Point p)\n{\n\tPoint r = projection(s1, s2, p);\n\tif (isIntersectSP(s1, s2, r)) return (abs(r - p));\n\treturn (min(abs(s1 - p), abs(s2 - p)));\n}\ndouble distanceSS(Point s1, Point s2, Point t1, Point t2){\n\tif (isIntersectSS(s1, s2, t1, t2)) return (0);\n\treturn (min(min(distanceSP(s1, s2, t1), distanceSP(s1, s2, t2)),\n\t\t\tmin(distanceSP(t1, t2, s1), distanceSP(t1, t2, s2))));\n}\nPoint interPointLL(Point a1, Point a2, Point b1, Point b2)\n{\n\tdouble d = cross(a2 - a1, b2 - b1);\n\tif (abs(d) < EPS) throw \"Segment is Paralell!\";\n\tPoint a = a2 - a1, b = b2 - b1;\n    double t = cross(b, b1 - a1) / cross(b, a);\n    return (a1 + a * t);\n}\nvector<Point> interPointCC(Point c1, double r1, Point c2, double r2)\n{\n\tvector<Point> res;\n\tif (abs(c1 - c2) < EPS) return (vector<Point>()); // 交点が絶対にない\n\tdouble d = abs(c1 - c2);\n\tdouble rc = (d * d + r1 * r1 - r2 * r2) / (2 * d);\n\tdouble rs = sqrt(r1 * r1 - rc * rc);\n\tPoint diff = (c2 - c1) / d;\n\tres.push_back(Point(c1 + diff * Point(rc, rs)));\n\tres.push_back(Point(c1 + diff * Point(rc, -rs)));\n\treturn (res);\n}\nvector<Point> crosspointCL(Point a, double ra, Point b1, Point b2)\n{\n\tvector<Point> res;\n\tdouble dist = distanceLP(b1, b2, a);\n\tif (leq(dist, ra)){\n\t\tPoint s = projection(b1, b2, a);\n\t\tdist = sqrt(ra * ra - dist * dist);\n\t\tPoint t = (b2 - b1) / abs(b2 - b1);\n\t\tres.push_back(s + t * dist);\n\t\tres.push_back(s - t * dist);\n\t}\n\treturn (res);\n}\n\nPoint unitVector(Vector t)\n{\n    double u = abs(t);\n    return (Point(t.x / u , t.y / u));\n}\n\nPoint normalVector(Point p, Point a, Point b)\n{\n    Point v = unitVector(b - a);\n    v = cross(v, p - a) > 0 ? Point(v.y, -v.x) : Point(-v.y, v.x);\n    return v * distanceLP(p, a, b);\n}\n  \ndouble getCos(Vector a, Vector b)\n{\n    return (dot(a, b) / (abs(a) * abs(b)));\n}\n  \ndouble getSin(Vector a, Vector b)\n{\n    double t = getCos(a, b);\n    return (sqrt(1.0 - t * t));\n}\n  \ndouble getArg(Vector v)\n{\n    return (atan2(v.y, v.x));\n}\n\nPoint rotate(Point t, Point p, double r)\n{\n    double ta = cos(r) * (t.x - p.x) - sin(r) * (t.y - p.y) + p.x;\n    double tb = sin(r) * (t.x - p.x) + cos(r) * (t.y - p.y) + p.y;\n    return (Point(ta, tb));\n}\n\nint main()\n{\n\tint n;\n\t\n\tscanf(\"%d\", &n);\n\t\n\tfor (int i = 0; i < n; i++){\n\t\tPoint p0, p1, p2, p3;\n\t\tscanf(\"%lf %lf %lf %lf %lf %lf %lf %lf\", &p0.x, &p0.y, &p1.x, &p1.y, &p2.x, &p2.y, &p3.x, &p3.y);\n\t\tdouble d = distanceSS(p0, p1, p2, p3);\n\t\tprintf(\"%.10lf\\n\", d);\n\t}\n\t\n\treturn (0);\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\n#include <vector>\n\nusing namespace std;\n\n// 2次元ベクトルクラス\nclass Vector {\npublic:\n    float x, y;\n    \n    // コンストラクタ\n    Vector() {\n        x = 0.f;\n        y = 0.f;\n    }\n    \n    // コンストラクタ(引数あり)\n    Vector(float nx, float ny) {\n        x = nx;\n        y = ny;\n    }\n    \n    // x,y成分を設定する\n    void set(float nx, float ny) {\n        x = nx;\n        y = ny;\n    }\n    \n    // 内積を求める\n    float dot(const Vector& vec) const {\n        return x * vec.x + y * vec.y;\n    }\n    \n    // 外積を求める\n    float cross(const Vector& vec) const {\n        return x * vec.y - y * vec.x;\n    }\n    \n    // 余弦を求める\n    float getCos(const Vector& vec) const {\n        float nor = norm() * vec.norm();\n        if (nor == 0.f) {\n            return 0.f;\n        } else {\n            return dot(vec) / nor;\n        }\n    }\n    \n    // ベクトルの大きさを求める\n    float norm() const {\n        return sqrt(x * x + y * y);\n    }\n    \n    // 単位ベクトルを返す\n    Vector getUnit() const {\n        Vector v;\n        float n = norm();\n        if (n == 0.f) {\n            v.set(0.f, 0.f);\n        } else {\n            v.set(x / n, y / n);\n        }\n        return v;\n    }\n    \n    void operator = (const Vector& vec) {\n        x = vec.x;\n        y = vec.y;\n    }\n    \n    Vector operator + (const Vector& vec) const {\n        Vector v(x + vec.x, y + vec.y);\n        return v;\n    }\n    \n    Vector operator - (const Vector& vec) const {\n        Vector v(x - vec.x, y - vec.y);\n        return v;\n    }\n    \n    Vector operator * (const Vector& vec) const {\n        Vector v(x * vec.x, y * vec.y);\n        return v;\n    }\n    \n    Vector operator * (float f) const {\n        Vector v(x * f, y * f);\n        return v;\n    }\n    \n    Vector operator / (const Vector& vec) const {\n        Vector v;\n        if (vec.x == 0.f) {\n            v.x = 0.f;\n        } else {\n            v.x = x / vec.x;\n        }\n        \n        if (vec.y == 0.f) {\n            v.y = 0.f;\n        } else {\n            v.y = y / vec.y;\n        }\n        return v;\n    }\n    \n    Vector operator / (float f) const {\n        Vector v;\n        if (f == 0.f) {\n            v.set(0.f, 0.f);\n        } else {\n            v.set(x / f, y / f);\n        }\n        return v;\n    }\n    \n    void operator += (const Vector& vec) {\n        x += vec.x;\n        y += vec.y;\n    }\n    \n    void operator -= (const Vector& vec) {\n        x -= vec.x;\n        y -= vec.y;\n    }\n    \n    void operator *= (const Vector& vec) {\n        x *= vec.x;\n        y *= vec.y;\n    }\n    \n    void operator /= (const Vector& vec) {\n        if (vec.x == 0.f) {\n            x = 0.f;\n        } else {\n            x /= vec.x;\n        }\n        \n        if (vec.y == 0.f) {\n            y = 0.f;\n        } else {\n            y /= vec.y;\n        }\n    }\n    \n    bool operator == (const Vector& vec) const {\n        if (x == vec.x && y == vec.y) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n};\n\n// ベクトル1をベクトル2に正射影したベクトルを求める\nstatic Vector getProjection(const Vector& vec1, const Vector& vec2) {\n    Vector vec(vec2.getUnit() * vec1.norm() * vec1.getCos(vec2));\n    return vec;\n}\n\n\nclass LineSegment {\nprivate:\n    Vector start; // 始点\n    Vector end; // 終点\n    \npublic:\n    //コンストラクタ\n    LineSegment () {}\n    \n    // 始点と終点を設定する\n    void setStartEnd(float sx, float sy, float ex, float ey) {\n        start.set(sx, sy);\n        end.set(ex, ey);\n    }\n    \n    // 始点を取得する\n    Vector getStart() const {\n        return start;\n    }\n    \n    //　終点を取得する\n    Vector getEnd() const {\n        return end;\n    }\n    \n    // 指定の線分を含むか\n    // このメソッドは線分同士が平行の時しか使用しない\n    bool isInLine(const LineSegment& l) const {\n        bool b1 = isPointInLine(l.getStart());\n        bool b2 = isPointInLine(l.getEnd());\n        if (b1 || b2) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    \n    // 指定の点を線分の中に含むか\n    bool isPointInLine(const Vector& p) const {\n        if (start == p) {\n            return true;\n        }\n        \n        Vector l1 = end - start;\n        Vector l2 = p - start;\n        Vector u1 = l1.getUnit();\n        Vector u2 = l2.getUnit();\n\n        if (u1 == u2 && l2.norm() <= l1.norm()) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    \n    // 指定の線分と交差しているか\n    // @return 0(交差していない), 1(交差している)\n    int isCross(const LineSegment& l) {\n        Vector l1 = end - start;\n        float c1 = l1.cross(l.getStart() - start);\n        float c2 = l1.cross(l.getEnd() - start);\n        \n        Vector l2 = l.getEnd() - l.getStart();\n        float c3 = l2.cross(start - l.getStart());\n        float c4 = l2.cross(end - l.getStart());\n        \n        if (c1 * c2 == 0.f && c3 * c4 == 0.f) { // 平行のとき\n            LineSegment ls;\n            ls.setStartEnd(start.x, start.y, end.x, end.y);\n            if (isInLine(l) || l.isInLine(ls)) {\n                return 1;\n            }\n            return 0;\n        } else if ((c1 * c2 < 0.f && c3 * c4 <= 0.f)\n                   || (c1 * c2 <= 0.f && c3 * c4 < 0.f)\n                   || (c1 * c2 < 0.f && c3 * c4 < 0.f)) { // 交差するとき\n            return 1;\n        } else { // 交差しないとき\n            return 0;\n        }\n    }\n    \n    // 任意の点が線分の始点より外にあるか\n    bool isOutOfStart(const Vector& vec) {\n        Vector p = end - start;\n        Vector q = vec - start;\n        float d = p.dot(q);\n        if (d < 0) { // 内積が負のとき\n            return true;\n        }\n        return false;\n    }\n    \n    // 任意の線分との距離を求める\n    float getDistance(const LineSegment& l) {\n        float ret = 0.f;\n        if (isCross(l)) { // 交差しているとき\n            return ret;\n        }\n        float disS = getDistance(l.getStart());\n        float disE = getDistance(l.getEnd());\n        ret = min(disE, disS);\n        return ret;\n    }\n    \n    // 任意の点との距離を求める\n    float getDistance(const Vector& vec) {\n        if (isPointInLine(vec)) { // 線分内に点を含むとき\n            return 0.f;\n        }\n        if (!isOutOfStart(vec)) { // 線分の始点より内側に点があるとき\n            Vector p = end - start;\n            Vector q = vec - start;\n            Vector proj = getProjection(q, p);\n            if (p.norm() > proj.norm()) { // 正射影したベクトルが線分より短いとき\n                return (q - proj).norm();\n            } else { // 正射影したベクトルが線分と等しいか、長いとき\n                // 線分の終点より外に点がある\n                return (vec - end).norm();\n            }\n        } else { // 線分の始点より外にあるとき\n            return (vec - start).norm();\n        }\n    }\n};\n\nint main() {\n    int n;\n    cin >> n;\n    \n    LineSegment l1, l2;\n    vector<float> result;\n    for (int i = 0; i < n; i++) {\n        float sx1, sy1, ex1, ey1, sx2, sy2, ex2, ey2;\n        cin >> sx1 >> sy1 >> ex1 >> ey1 >> sx2 >> sy2 >> ex2 >> ey2;\n        l1.setStartEnd(sx1, sy1, ex1, ey1);\n        l2.setStartEnd(sx2, sy2, ex2, ey2);\n        result.push_back(l1.getDistance(l2));\n    }\n    \n    for (int i = 0; i < result.size(); i++) {\n        cout << result[i] << endl;\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n \nconst double EPS = 1e-9, PI = acos(-1);\ninline bool eq(double a,double b){ return abs(b - a) < EPS; }\n#define curr(P,i) P[i]\n#define next(P,i) P[(i+1)%P.size()]\n#define prev(P,i) P[(i+P.size()-1) % P.size()]\nenum { OUT, ON, IN };\n \nstruct Geometory { // Geometory Library\n  struct Point {\n    double x, y;\n    Point(){};\n    Point(double x,double y):x(x),y(y){};\n    Point operator+(const Point& b) const { return Point(x + b.x,y + b.y); }\n    Point operator-(const Point& b) const { return Point(x - b.x,y - b.y); }\n    Point operator*(const double b) const { return Point(x * b,y * b); }\n    Point operator*(const Point& b) const { return Point(x * b.x - y * b.y,x * b.y + y * b.x); }\n    Point operator/(const double b) const { return Point(x / b,y / b); }\n    bool operator< (const Point& b) const { return x != b.x ? x < b.x : y < b.y; }\n    bool operator==(const Point& b) const { return eq(x,b.x) && eq(y,b.y); }\n    double norm(){ return x * x + y * y; }\n    double arg(){ return atan2(x,y); }\n    double abs(){ return sqrt(norm()); }\n    Point rotate(double theta){ return Point(cos(theta) * x - sin(theta) * y,sin(theta) * x + cos(theta) * y); }\n    Point rotate90(){ return Point(-y,x); }\n    friend ostream& operator<<(ostream& os, Point p){ return os<<\"(\"<<p.x<<\",\"<<p.y<<\")\"; }\n    friend istream& operator>>(istream& is, Point& a){ return is>>a.x>>a.y; }\n  };\n \n  struct Line {\n    Point a, b;\n    Line(){};\n    Line(Point a,Point b):a(a),b(b){};\n    friend ostream& operator<<(ostream& os, Line p){ return os<<\"(\"<<p.a.x<<\",\"<<p.a.y<<\") to (\"<<p.b.x<<\",\"<<p.b.y<<\")\"; }\n    friend istream& operator>>(istream& is, Line& a){ return is>>a.a.x>>a.a.y>>a.b.x>>a.b.y; }\n  };\n  struct Segment {\n    Point a, b;\n    Segment(){};\n    Segment(Point a,Point b):a(a),b(b){};\n    friend ostream& operator<<(ostream& os, Segment p){ return os<<\"(\"<<p.a.x<<\",\"<<p.a.y<<\") to (\"<<p.b.x<<\",\"<<p.b.y<<\")\"; }\n    friend istream& operator>>(istream& is, Segment& a){ return is>>a.a.x>>a.a.y>>a.b.x>>a.b.y; }\n  };\n  struct Circle {\n    Point p; double r;\n    Circle(){};\n    Circle(Point p, double r) : p(p),r(r){};\n  };\n  typedef vector< Point > Polygon;\n  typedef vector< Segment > Segments;\n  typedef vector< Line > Lines;\n  typedef vector< Circle > Circles;\n  typedef pair< Point, Point > PointPoint;\n \n  double cross(const Point& a,const Point& b){\n    return a.x * b.y - a.y * b.x;\n  }\n  double dot(const Point& a,const Point& b){\n    return a.x * b.x + a.y * b.y;\n  }\n \n  int ccw(const Point& a,Point b,Point c){\n    b = b - a, c = c - a;\n    if(cross(b,c) > 0)    return +1;  // a → b で 反時計方向におれて c\n    if(cross(b,c) < 0)    return -1; // a → b で 時計方向におれて c\n    if(dot(b,c) < 0)      return +2;  // c -- a -- bで一直線上\n    if(b.norm() < c.norm()) return -2; // a -- b -- cで一直線上\n    return 0;  // a -- c -- bで一直線上\n  }\n  Point Projection(const Line& l, const Point& p){\n    double t = dot( p - l.a, l.a - l.b) / (l.a - l.b).norm();\n    return l.a + (l.a - l.b) * t;\n  }\n  Point Projection(const Segment& l, const Point& p){\n    double t = dot( p - l.a, l.a - l.b) / (l.a - l.b).norm();\n    return l.a + (l.a - l.b) * t;\n  }\n  Point Reflection(const Line& l, const Point& p){\n    return p + (Projection( l, p) - p) * 2.0;\n  }\n \n  double Distance( const Line& l,const Point& p) { //OK\n    return (p - Projection( l, p)).abs();\n  }\n \n  bool Intersect(const Line& l, const Line& m){\n    return abs(cross(l.b - l.a, m.b - m.a)) > EPS || abs(cross(l.b-l.a, m.b-l.a)) < EPS;\n  }\n  bool Intersect(const Line& l, const Segment& s){\n    return cross( l.b - l.a, s.a - l.a) * cross( l.b - l.a, s.b - l.a) < EPS;\n  }\n  bool Intersect(const Line& l, const Point& p){\n    return abs(ccw(l.a, l.b, p)) != -1;\n  }\n  bool Intersect(const Segment& s, const Segment& t){\n    return ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 && ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0;\n  }\n  bool Intersect(const Segment& s, const Point& p){\n    return ccw(s.a, s.b, p) == 0;\n  }\n  bool Intersect(const Circle& c,const Line& l){\n    return Distance( l, c.p) <= c.r + EPS;\n  }\n  bool Intersect(const Circle& c,const Point& p){\n    return abs( ( p - c.p).abs() - c.r ) < EPS;\n  }\n  int Intersect(const Circle& c, const Segment& l){\n    if( (Projection( l, c.p) - c.p).norm() - c.r * c.r > EPS) return 0;\n    const double d1 = ( c.p - l.a).abs(), d2 = ( c.p - l.b).abs();\n    if( d1 < c.r + EPS && d2 < c.r + EPS) return 0;\n    if( d1 < c.r - EPS && d2 > c.r + EPS || d1 > c.r + EPS && d2 < c.r - EPS ) return 1;\n    const Point h = Projection( l, c.p);\n    if( dot( l.a - h, l.b - h) < 0) return 2;\n    return 0;\n  }\n  bool Intersect(const Circle& a,const Circle& b){\n    return ( ( a.p - b.p).norm() - ( a.r + b.r) * ( a.r + b.r) < EPS) &&\n      ( ( a.p - b.p).norm() - ( a.r - b.r) * ( a.r - b.r) > -EPS);\n  }\n  double Distance(const Segment& s,const Point& p){\n    Point r = Projection(s, p);\n    if ( Intersect( s, r)) return ( r - p).abs();\n    return min( ( s.a - p).abs(), ( s.b - p).abs());\n  }\n  double Distance(const Segment& a,const Segment& b){\n    if(Intersect( a, b)) return 0;\n    return min( min( Distance( a, b.a), Distance( a, b.b)), min( Distance( b, a.a), Distance( b, a.b)));\n  }\n  double Distance(const Line& l,const Line& m) {\n    return Intersect( l, m) ? 0 : Distance( l, m.a);\n  }\n  double Distance(const Line& l,const Segment& s) { //OK\n    if (Intersect(l, s)) return 0;\n    return min(Distance(l, s.a), Distance(l, s.b));\n  }\n  double Distance(const Point& a,const Point& b){ //OK\n    return ( a - b).abs();\n  }\n  Point Crosspoint(const Segment& l,const Segment& m) { //OK\n    double A = cross(l.b - l.a, m.b - m.a);\n    double B = cross(l.b - l.a, l.b - m.a);\n    if (abs(A) < EPS && abs(B) < EPS) return m.a; // same line\n    return m.a + (m.b - m.a) * B / A;\n  }\n  PointPoint Crosspoint(const Circle& c,const Line l){\n    Point hp = Projection( l, c.p), h =  hp - c.p;\n    const double d2 = h.norm();\n    Point v = ( l.b - l.a) * sqrt( c.r * c.r - d2) / ( l.b - l.a).abs();\n    return PointPoint(hp - v, hp + v);\n  }\n  PointPoint Crosspoint(const Circle& c,const Segment& l) {\n    Line aa = Line( l.a, l.b);\n    if(Intersect(c, l) == 2) return Crosspoint(c, aa);\n    PointPoint ret = Crosspoint(c, aa);\n    if(dot(l.a - ret.first, l.b - ret.first) < 0) ret.second = ret.first;\n    else ret.first = ret.second;\n    return ret;\n  }\n  PointPoint Crosspoint(const Circle& c1,const Circle& c2){ //OK\n    double d = (c1.p - c2.p).abs();\n    double s = (c1.r + c2.r + d) / 2;\n    double S = sqrt( s * ( s - c1.r) * ( s - c2.r) * ( s - d));\n    double h = 2 * S / d;\n    Point v = ( c2.p - c1.p) / ( c2.p - c1.p).abs();\n    double m = sqrt( c1.r * c1.r - h * h);\n    return PointPoint( c1.p + v * m + Point(0,1) * h * v, c1.p + v * m - Point(0,1) * h * v);\n  }\n  bool parallel(const Line& a,const Line& b){\n    return abs(cross( a.b - a.a, b.b - b.a)) < EPS;\n  }\n  bool orthogonal(const Line& a,const Line& b){\n    return abs(dot( a.a - a.b, b.a - b.b)) < EPS;\n  }\n  int Contains(const Polygon& Q,const Point& p){\n    bool in = false;\n    for(int i = 0 ; i < Q.size() ; i++ ){\n      Point a = curr(Q,i) - p, b = next(Q,i) - p;\n      if(a.y > b.y) swap(a,b);\n      if(a.y <= 0 && 0 < b.y && cross(a,b) < 0) in = !in;\n      if(cross(a,b) == 0 && dot(a,b) <= 0) return ON;\n    }\n    return in ? IN : OUT;\n  }\n  bool Contains(const Circle& c,const Point& p){\n    return ( c.p - p).abs() < c.r + EPS;\n  }\n  double Area2(const Polygon& p){ //OK\n    double A = 0;\n    for (int i = 0; i < p.size(); ++i){\n      A += cross(curr(p, i), next(p, i));\n    }\n    return A;\n  }\n};\n \nGeometory geo;\ntypedef Geometory::Point P;\ntypedef Geometory::Line L;\ntypedef Geometory::Segment S;\ntypedef Geometory::Circle C;\n\nint main(){\n  int q;\n  S s1, s2;\n\n  cin >> q;\n  while(q--){\n    cin >> s1 >> s2;\n    cout << fixed << setprecision(10) << geo.Distance( s1, s2) << endl;\n  }\n  return(0);\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\nconst int mod = 1e9 + 7;\nconst int inf = (1 << 30) - 1;\nconst ll infll = (1LL << 61) - 1;\n\nusing Real = double;\nusing Point = complex<Real>;\nconst Real Pi = acos(-1), EPS = 1e-9;\ninline bool eq(Real a, Real b) { return fabs(a - b) < EPS; }\n\n//scalar\nPoint operator*(const Point &p, const Real &c)\n{\n    return Point(c * real(p), c * imag(p));\n}\n\n//add\nPoint operator+(const Point &p, const Point &q)\n{\n    return Point(real(p) + real(q), imag(p) + imag(q));\n}\n\nPoint operator-(const Point &p, const Point &q)\n{\n    return Point(real(p) - real(q), imag(p) - imag(q));\n}\n\n//equal\nbool operator==(const Point &p, const Point &q)\n{\n    return (real(p) == real(q)) && (imag(p) == imag(q));\n}\n\nReal radian_to_degree(Real r)\n{\n    return (r * 180.0 / Pi);\n}\n\nReal degree_to_radian(Real d)\n{\n    return (d * Pi / 180.0);\n}\n\n//rotate\nPoint rot(Real theta, const Point &p)\n{\n    return Point(cos(theta) * p.real() - sin(theta) * p.imag(), sin(theta) * p.real() + cos(theta) * p.imag());\n}\n\n// norm\nReal norm(const Point &p)\n{\n    return (real(p) * real(p) + imag(p) * imag(p));\n}\n\nReal abs(const Point &p)\n{\n    return sqrt(norm(p));\n}\n//argumant [0, 2 * Pi)\nReal arg(const Point &p)\n{\n    Real a = atan2(imag(p), real(p));\n    if (a < 0)\n        a = fabs(a) + Pi;\n    return a;\n}\n\nReal dot(const Point &p, const Point &q)\n{\n    return (real(p) * real(q) + imag(p) * imag(q));\n}\n\n// regard z - component is zero\nReal cross(const Point &p, const Point &q)\n{\n    return real(p) * imag(q) - imag(p) * real(q);\n}\n\n//input\nistream &operator>>(istream &is, Point &p)\n{\n    Real a, b;\n    is >> a >> b;\n    p = Point(a, b);\n    return is;\n}\n\n//output\nostream &operator<<(ostream &os, Point &p)\n{\n    os << fixed << setprecision(10) << p.real() << \" \" << p.imag();\n}\n\n// a line given two points\nstruct Line\n{\n    Point a, b;\n    Line() = default;\n\n    Line(Point a, Point b) : a(a), b(b) {}\n\n    // Ax + By = C\n    Line(Real A, Real B, Real C)\n    {\n        if (eq(A, 0))\n            a = Point(0, C / B), b = Point(1, C / B);\n        else if (eq(B, 0))\n            b = Point(C / A, 0), b = Point(C / A, 1);\n        else\n            a = Point(0, C / B), b = Point(C / A, 0);\n    }\n\n    friend istream &operator>>(istream &is, Line &a)\n    {\n        return is >> a.a >> a.b;\n    }\n\n    friend ostream &operator<<(ostream &os, Line &p)\n    {\n        return os << p.a << \" to \" << p.b;\n    }\n};\n\nusing Points = vector<Point>;\nusing Polygon = vector<Point>;\nusing Lines = vector<Line>;\n\n//For given three points p1,p2,p, find the projection point x of p onto p1p2.\nPoint projection(const Line &l, const Point &p)\n{\n    double t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b); // direction vector\n    return l.a + (l.a - l.b) * t;\n}\n\n//For given three points p1,p2,p, find the reflection point x of p onto p1p2.\nPoint reflection(const Line &l, const Point &p)\n{\n    return p + (projection(l, p) - p) * 2.0;\n}\n\n// Counter_Clockwise, a is standard point\nint ccw(const Point &a, Point b, Point c)\n{\n    b = b - a, c = c - a;\n    if (cross(b, c) > EPS)\n        return +1; // counter clockwise\n    if (cross(b, c) < -EPS)\n        return -1; // clockwise\n    if (dot(b, c) < 0)\n        return +2; // c--a--b on line\n    if (norm(b) < norm(c))\n        return -2; // a--b--c on line\n    return 0;      // c on segment a-b\n}\n\n// two lines are parallel\nbool Parallel(const Line &L1, const Line &L2)\n{\n    return eq(cross(L1.b - L1.a, L2.b - L2.a), 0.0);\n}\n\n// two lines are orthogonal\nbool Orthogonal(const Line &L1, const Line &L2)\n{\n    return eq(dot(L1.b - L1.a, L2.b - L2.a), 0.0);\n}\n\n// check existence of intersection at the lines\nbool intersect(const Line &L1, const Line &L2)\n{\n    // non-parallel || same line\n    bool r = (abs(cross(L1.b - L1.a, L2.b - L2.a)) < EPS) || (abs(cross(L1.b - L1.a, L2.a - L1.a)) < EPS);\n    return r;\n}\n\n// cross point of two lines\nPoint CrossPoint(const Line &L1, const Line &L2)\n{\n    Real A = cross(L1.b - L1.a, L2.b - L2.a);\n    Real B = cross(L1.b - L1.a, L1.b - L2.a);\n    if (abs(A) < EPS && abs(B) < EPS)\n        return L1.a; // same line\n    if (abs(A) < EPS)\n        assert(false); // precondition !!!\n    return L2.a + B / A * (L2.b - L2.a);\n}\n\nstruct Segment : Line\n{\n    Segment() = default;\n\n    Segment(Point a, Point b) : Line(a, b) {}\n};\n\nusing segments = vector<Segment>;\n\n// check existence of intersection at the segments\nbool intersect(const Segment &s, const Segment &t)\n{\n    bool r = ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 && ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0;\n    return r;\n}\n\nbool intersect(const Line &l, const Point &p)\n{\n    return abs(ccw(l.a, l.b, p)) != 1;\n}\n\nbool intersect(const Segment &s, const Point &p)\n{\n    return ccw(s.a, s.b, p) == 0;\n}\n\nbool intersect(const Line &l, const Segment &s)\n{\n    return cross(l.b - l.a, s.a - l.a) * cross(l.b - l.a, s.b - l.a) < EPS;\n}\n\nPoint CrossPoint(const Segment &s, const Segment &t)\n{\n    return CrossPoint(Line(s), Line(t));\n}\n\nReal distance(const Point &a, const Point &b)\n{\n    return abs(a - b);\n}\n\nReal distance(const Line &L, const Point &p)\n{\n    return abs(p - projection(L, p));\n}\n\nReal distance(const Line &l, const Line &m)\n{\n    return intersect(l, m) ? 0 : distance(l, m.a);\n}\n\nReal distance(const Segment &s, const Point &p)\n{\n    Point r = projection(s, p);\n    if (intersect(s, r))\n        return abs(r - p);\n    return min(abs(s.a - p), abs(s.b - p));\n}\n\nReal distance(const Segment &a, const Segment &b)\n{\n    if (intersect(a, b))\n        return 0;\n    return min({distance(a, b.a), distance(a, b.b), distance(b, a.a), distance(b, a.b)});\n}\n\n\n\nint main()\n{\n    int Q;\n    cin >> Q;\n    for (int i = 0; i < Q; i++)\n    {\n        Segment S, T;\n        cin >> S >> T;\n        Real ans = distance(S, T);\n        cout << fixed << setprecision(10) << ans << endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <cmath>\n#include <array>\n#include <algorithm>\n\nusing Number = double;\n\nconst Number EPS = 1e-10;\nconst Number INF = 1e10;\nconst Number PI = acos(-1.0);\n\ninline int sign(Number x) { return (x < -EPS) ? -1 : (x > EPS) ? +1 : 0; }\ninline bool equal(Number a, Number b) { return sign(a - b) == 0; }\n\n// change between degree and radian\ninline Number to_radian(const Number degree) { return degree * PI / 180.0; }\ninline Number to_degree(const Number radian) { return radian * 180.0 / PI; }\n\n\n/**\n * Point in two dimensional\n */\nclass Point {\npublic:\n    Number x, y;\n\n    Point() {}\n    Point(Number x, Number y) : x(x), y(y) {}\n\n    // Arithmetic operator between points\n    Point operator+(const Point &rhs) const {\n        return Point(this->x + rhs.x, this->y + rhs.y);\n    }\n    Point operator-(const Point &rhs) const {\n        return Point(this->x - rhs.x, this->y - rhs.y);\n    }\n    Point operator*(const Point &rhs) const { // cross product between points\n        return Point(this->x * rhs.x - this->y * rhs.y,\n                     this->x * rhs.x + this->y * rhs.x);\n    }\n\n    // Unary operator and compound assignment operator\n    Point operator-() const {\n        return Point(-this->x, -this->y);\n    }\n    Point& operator+=(const Point &rhs) {\n        return *this = *this + rhs;\n    }\n    Point& operator-=(const Point &rhs) {\n        return *this = *this - rhs;\n    }\n\n    // Arithmetic operator between point and number\n    Point operator*(Number rhs) const {\n        return Point(this->x * rhs, this->y * rhs);\n    }\n    Point operator/(Number rhs) const {\n        return Point(this->x / rhs, this->y / rhs);\n    }\n\n    // Comparison operation\n    bool operator==(const Point &rhs) const {\n        return sign(this->x - rhs.x) == 0 && sign(this->y - rhs.y) == 0;\n    }\n    bool operator<(const Point &rhs) const {\n        return (this->x < rhs.x) || (this->x == rhs.x && this->y < rhs.y);\n    }\n\n    // Other operator\n    Number abs(void) const {\n        return sqrt(this->x * this->x + this->y * this->y);\n    }\n    Number abs2(void) const {\n        return this->x * this->x + this->y * this->y;\n    }\n    Number arg(void) const {\n        return atan2(this->y, this->x);\n    }\n    Number dot(const Point &rhs) {\n        return this->x * rhs.x + this->y * rhs.y;\n    }\n    Point rotate90(void) const {\n        return Point(-this->y, this->x);\n    }\n    Point rotate(double angle) const {\n        return Point(cos(angle) * this->x - sin(angle) * this->y,\n                     sin(angle) * this->x + cos(angle) * this->y);\n    }\n\n};\ninline Number dot(const Point &p1, const Point &p2) {\n    return p1.x * p2.x + p1.y * p2.y;\n}\ninline Number abs_cross(const Point &p1, const Point &p2) {\n    return p1.x * p2.y - p1.y * p2.x;\n}\n// Output of a point\nstd::ostream& operator<<(std::ostream &os, const Point &p) {\n    return os <<  p.x << ' ' << p.y;\n}\n// Input of a point\nstd::istream& operator>>(std::istream &is, Point &p) {\n    return is >> p.x >> p.y;\n}\n\n// Counter-Clockwise predicate (a, b, c)\nenum CCW {\n    COUNTER_CLOCKWISE = 1,      // counter clockwise\n    CLOCKWISE         = -1,     // clockwise\n    ONLINE_FRONT      = 2,      // a--c--b on line\n    ONLINE_BACK       = -2,      // c--a--b on line\n    ON_SEGMENT        = 0,     // a--b--c on line\n};\nCCW ccw(const Point &a, Point b, Point c) {\n    b -= a;  c -= a;\n    if (abs_cross(b, c) > 0) return COUNTER_CLOCKWISE;\n    if (abs_cross(b, c) < 0) return CLOCKWISE;\n    if (dot(b, c) < 0)       return ONLINE_BACK;\n    if (b.abs2() < c.abs2())   return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\n\n/**\n * Line in two dimensional\n */\nclass Line : public std::array<Point, 2> {\npublic:\n    Line() {}\n    Line(const Point &p1, const Point &p2) {\n        (*this)[0] = p1;\n        (*this)[1] = p2;\n    }\n};\n\n// Input of a line\nstd::istream& operator>>(std::istream &is, Line &l) {\n    return is >> l[0] >> l[1];\n}\ninline CCW ccw(const Line &l, const Point &p) {\n    return ccw(l[0], l[1], p);\n}\n\n\n/**\n * Segment in two dimensional\n */\nclass Segment : public Line {\npublic:\n    Segment() {}\n    Segment(const Point &p1, const Point &p2) : Line(p1, p2) {}\n};\n\n\n/**\n * Circle in two dimensional\n */\nclass Circle : public Point {\npublic:\n    Number r;\n    Circle(const Point &p, Number r = 0.0) : Point(p), r(r) {}\n};\n// Input of a circle\nstd::istream& operator>>(std::istream &is, Circle &c) {\n    return is >> c.x >> c.y >> c.r;\n}\n\n\n\n/**\n * Intersection testing\n */\ninline bool IsOrthogonal(const Line &l1, const Line &l2) {\n    return equal(dot(l1[0] - l1[1], l2[0] - l2[1]), 0.0);\n}\ninline bool IsParallel(const Line &l1, const Line &l2) {\n    return equal(abs_cross(l1[0] - l1[1], l2[0] - l2[1]), 0.0);\n}\n\ninline bool IsIntersect(const Line &l, const Point &p) {\n    return abs(ccw(l[0], l[1], p)) != 1;\n}\ninline bool IsIntersect(const Segment &s, const Point &p) {\n    return ccw(s[0], s[1], p) == 0;\n}\ninline bool IsIntersect(const Line &l1, const Line l2) {\n    return !IsParallel(l1, l2) || IsParallel(l1, Line(l1[0], l2[0]));\n}\ninline bool IsIntersect(const Line &l, const Segment &s) {\n    return abs_cross(l[1] - l[0], s[0] - l[0]) *\n        abs_cross(l[1] - l[0], s[1] - l[0]) < EPS;\n}\ninline bool IsIntersect(const Segment &s1, const Segment &s2) {\n    return ccw(s1[0], s1[1], s2[0]) * ccw(s1[0], s1[1], s2[1]) <= 0 &&\n        ccw(s2[0], s2[1], s1[0]) * ccw(s2[0], s2[1], s1[1]) <= 0;\n}\n\n\n/**\n * Intersection point and Distance\n */\nPoint Projection(const Line &l, const Point &p) {\n    Point dir = l[1] - l[0];\n    Number t = dot(p - l[0], dir) / dir.abs2();\n    return l[0] + dir * t;\n}\nPoint Reflection(const Line &l, const Point &p) {\n    return Projection(l, p) * 2.0 - p;\n}\n\nPoint CrossPoint(const Line &s1, const Line &s2) {\n    Point base = s2[1] - s2[0];\n    Number d1 = abs(abs_cross(base, s1[0] - s2[0]));\n    Number d2 = abs(abs_cross(base, s1[1] - s2[0]));\n    Number t = d1 / (d1 + d2);\n    return s1[0] + (s1[1] - s1[0]) * t;\n}\n\ninline Number Distance(const Point &p1, const Point &p2) {\n    return (p1 - p2).abs();\n}\ninline Number Distance(const Line &l, const Point &p) {\n    return (p - Projection(l, p)).abs();\n}\nNumber Distance(const Segment &s, const Point &p) {\n    const Point r = Projection(s, p);\n    if (IsIntersect(s, r)) return Distance(r, p);\n    return std::min(Distance(s[0], p), Distance(s[1], p));\n}\ninline Number Distance(const Line &l1, const Line &l2) {\n    return IsIntersect(l1, l2) ? 0 : Distance(l1, l2[0]);\n}\nNumber Distance(const Line &l, const Segment &s) {\n    if (IsIntersect(l, s)) return 0.0;\n    return std::min(Distance(l, s[0]), Distance(l, s[1]));\n}\nNumber Distance(const Segment &s1, const Segment &s2) {\n    if (IsIntersect(s1, s2)) return 0.0;\n    return std::min({Distance(s1, s2[0]), Distance(s1, s2[1]),\n                Distance(s2, s1[0]), Distance(s2, s1[1])});\n}\n\nint main()\n{\n    std::cout << std::fixed << std::setprecision(15);\n\n    Segment s1, s2;\n    int q;\n\n    std::cin >> q;\n\n    while (q--) {\n        std::cin >> s1 >> s2;\n        std::cout << Distance(s1, s2) << '\\n';\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<cstring>\n#include<vector>\n#include<set>\n#include<queue>\n#include<cstdlib>\n#include<algorithm>\n\nusing namespace std;\n#define pb push_back\n#define mp make_pair\n#define SZ(x) (int)(x).size()\n\ntypedef long long LL;\ntypedef pair<int, int> pii;\ntypedef pair<double, double> pdd;\ntypedef pair<LL, LL> pll;\n\nconst double eps = 1e-10;\nconst double PI = acos(-1.0);\n//const double PI = 3.14159265358979323846264338327950288419716939937510\nint dcmp(const double &x) { if (fabs(x) < eps) return 0; return x < 0 ? -1 : 1; }\nconst int MOD = 1e9 + 7;\nconst int INF = 2e9;\nconst double INF_d = 1e64;\n\ntemplate<class T> \nT qmod(T a, T b){ T ret = 1; while (b){ if (b & 1) ret *= a; b >>= 1; a *= a; } return ret; }\ntemplate<class T>\nT gcd(T a, T b){ return !b ? a : gcd(b, a % b); }\ntemplate<class T>\nT ex_gcd(T a, T b, T &x, T &y){\n    if (!b){ x = 1, y = 0; return a; }\n    T t, ret;\n    ret = ex_gcd(b, a % b, x, y);\n    t = x, x = y, y = t - a / b * y;\n    return ret;\n}\ntemplate<class T>\nT inv(T t, T p){ return t == 1 ? 1 : (p - p / t) * inv(p % t, p) % p; }\n// head\n\ntypedef double db;\n\nstruct point{\n    db x, y;\n    point(){}\n    point(db a, db b): x(a), y(b){}\n    point operator + (const point &p){ return point(x + p.x, y + p.y); }\n    point operator - (const point &p){ return point(x - p.x, y - p.y); }\n    point operator * (const db &k){ return point(x * k, y * k); }\n    point operator / (const db &k){ return point(x / k, y / k); }\n    db operator ^ (const point &p){ return x * p.y - y * p.x; }\n    db operator * (const point &p){ return x * p.x + y * p.y; }\n    bool operator == (const point &p){ return !dcmp(x - p.x) && !dcmp(y - p.y); }\n    bool operator != (const point &p){ return dcmp(x - p.x) || dcmp(y - p.y); }\n    bool operator < (const point &p){ return x == p.x ? y < p.y : x < p.x; }\n    void read(){\n        scanf(\"%lf%lf\", &x, &y);\n    }\n    void print(){\n        printf(\"%.10f %.10f\\n\", x, y);\n    }\n    point rotate(db &ang){ return point(x * cos(ang) - y * sin(ang), y * cos(ang) + x * sin(ang)); }\n    point norm() { return point(-y, x); }\n    db len() { return sqrt(x * x + y * y); }\n    db len2(){ return x * x + y * y; }\n};\n\npoint err = point(INF_d, INF_d);\n\npoint proj_SP(point A, point B, point P){ // projection point of P in segment AB\n    point AB = B - A, AP = P - A;\n    return A + AB * (AP * AB / AB.len2());\n}\n\npoint refl_SP(point A, point B, point P){ // reflection point of P int segment AB\n    return proj_SP(A, B, P) * 2 - P;\n}\n\nstruct line{\n    point p[2], u;\n    line(){}\n    line(point s, point t){\n        p[0] = s, p[1] = t;\n        u = p[1] - p[0];\n    }\n    point get_point(double t){\n        return point(p[0] + u * t);\n    }\n};\n\nbool parallel(line L1, line L2){ // check whether two lines L1 and L2 are parallel\n    return !dcmp(L1.u ^ L2.u);\n}\n\nbool orthogonal(line L1, line L2){ // check whether two lines L1 and L2 are orthogonal\n    return !dcmp(L1.u * L2.u);\n}\n\npair<bool, point> inter_LL(line L1, line L2){ // calculate the intersection of two lines L1 and L2\n    if (parallel(L1, L2)) return mp(false, err);\n    double t = ((L2.p[0] - L1.p[0]) ^ L2.u) / (L1.u ^ L2.u);\n    return mp(true, L1.get_point(t));\n}\n\nbool one_dimention_check(db a, db b, db c, db d){ // check whether two one-dimention segments has intersection\n    if (dcmp(a - b) > 0) swap(a, b);\n    if (dcmp(c - d) > 0) swap(c, d);\n    return dcmp(b - c) >= 0 && dcmp(a - d) <= 0; \n}\n\nbool check_SS(point A, point B, point C, point D){ // check whether two segments AB and CD has intersection\n    bool flag = one_dimention_check(A.x, B.x, C.x, D.x) && one_dimention_check(A.y, B.y, C.y, D.y);\n    double a = dcmp((A - C) ^ (D - C)), b = dcmp((B - C) ^ (D - C)),\n            c = dcmp((C - A) ^ (B - A)), d = dcmp((D - A) ^ (B - A));\n    return flag && dcmp(a * b) <= 0 && dcmp(c * d) <= 0;\n}\n// calculate the intersection point of two segments, first check and then call inter_LL to get the cross point\n\nbool inmid(db a, db b, db c){  // check whether a <= c <= b\n    return dcmp(b - c) >= 0 && dcmp(a - c) <= 0; \n}\n\nbool inmid(point A, point B, point P){ // check whether point P is in the rectangle of segment AB\n    return inmid(A.x, B.x, P.x) && inmid(A.y, B.y, P.y);\n}\n\ndb dis_SP(point A, point B, point P){\n    point p_proj = proj_SP(A, B, P);\n    if (inmid(A, B, p_proj)) return (P - p_proj).len();\n    else return min((P - A).len(), (P - B).len());\n}\n\nint n;\n\nint main(){\n    scanf(\"%d\", &n);\n    for (int i = 0; i < n; i++){\n        point p[4];\n        for (int j = 0; j < 4; j++){\n            p[j].read();\n        }\n        db res = INF_d;\n        if (check_SS(p[0], p[1], p[2], p[3])) res = 0;\n        for (int j = 2; j < 3; j++){\n            res = min(dis_SP(p[0], p[1], p[j]), res);\n        }\n        printf(\"%.10f\\n\", res);\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n  \nconst double EPS = 1e-8, PI = acos(-1);\ninline bool eq(double a,double b){ return abs(b - a) < EPS; }\n#define curr(P,i) P[i]\n#define next(P,i) P[(i+1)%P.size()]\n#define prev(P,i) P[(i+P.size()-1) % P.size()]\nenum { OUT, ON, IN };\n  \nstruct Geometory { // Geometory Library\n  struct Point {\n    double x, y;\n    Point(){};\n    Point(double x,double y):x(x),y(y){};\n    Point operator+(const Point& b) const { return Point(x + b.x,y + b.y); }\n    Point operator-(const Point& b) const { return Point(x - b.x,y - b.y); }\n    Point operator*(const double b) const { return Point(x * b,y * b); }\n    Point operator*(const Point& b) const { return Point(x * b.x - y * b.y,x * b.y + y * b.x); }\n    Point operator/(const double b) const { return Point(x / b,y / b); }\n    bool operator< (const Point& b) const { return x != b.x ? x < b.x : y < b.y; }\n    bool operator==(const Point& b) const { return eq(x,b.x) && eq(y,b.y); }\n    double norm(){ return x * x + y * y; }\n    double arg(){ return atan2(x,y); }\n    double abs(){ return sqrt(norm()); }\n    Point rotate(double theta){ return Point(cos(theta) * x - sin(theta) * y,sin(theta) * x + cos(theta) * y); }\n    Point rotate90(){ return Point(-y,x); }\n    friend ostream& operator<<(ostream& os, Point& p){ return os<<\"(\"<<p.x<<\",\"<<p.y<<\")\"; }\n    friend istream& operator>>(istream& is, Point& a){ return is>>a.x>>a.y; }\n  };\n  \n  struct Line {\n    Point a, b;\n    Line(){};\n    Line(Point a,Point b):a(a),b(b){};\n    friend ostream& operator<<(ostream& os, Line& p){ return os<<\"(\"<<p.a.x<<\",\"<<p.a.y<<\") to (\"<<p.b.x<<\",\"<<p.b.y<<\")\"; }\n    friend istream& operator>>(istream& is, Line& a){ return is>>a.a.x>>a.a.y>>a.b.x>>a.b.y; }\n  };\n  struct Segment {\n    Point a, b;\n    Segment(){};\n    Segment(Point a,Point b):a(a),b(b){};\n    friend ostream& operator<<(ostream& os, Segment& p){ return os<<\"(\"<<p.a.x<<\",\"<<p.a.y<<\") to (\"<<p.b.x<<\",\"<<p.b.y<<\")\"; }\n    friend istream& operator>>(istream& is, Segment& a){ return is>>a.a.x>>a.a.y>>a.b.x>>a.b.y; }\n  };\n  struct Circle {\n    Point p; double r;\n    Circle(){};\n    Circle(Point p, double r) : p(p),r(r){};\n  };\n  typedef vector< Point > Polygon;\n  typedef vector< Segment > Segments;\n  typedef vector< Line > Lines;\n  typedef vector< Circle > Circles;\n  typedef pair< Point, Point > PointPoint;\n  \n  double cross(const Point& a,const Point& b){\n    return a.x * b.y - a.y * b.x;\n  }\n  double dot(const Point& a,const Point& b){\n    return a.x * b.x + a.y * b.y;\n  }\n  \n  int ccw(const Point& a,Point b,Point c){\n    b = b - a, c = c - a;\n    if(cross(b,c) > 0)    return +1;  // a → b で 反時計方向におれて c\n    if(cross(b,c) < 0)    return -1; // a → b で 時計方向におれて c\n    if(dot(b,c) < 0)      return +2;  // c -- a -- bで一直線上\n    if(b.norm() < c.norm()) return -2; // a -- b -- cで一直線上\n    return 0;  // a -- c -- bで一直線上\n  }\n  Point Projection(const Line& l, const Point& p){\n    double t = dot( p - l.a, l.a - l.b) / (l.a - l.b).norm();\n    return l.a + (l.a - l.b) * t;\n  }\n  Point Projection(const Segment& l, const Point& p){\n    double t = dot( p - l.a, l.a - l.b) / (l.a - l.b).norm();\n    return l.a + (l.a - l.b) * t;\n  }\n  Point Reflection(const Line& l, const Point& p){\n    return p + (Projection( l, p) - p) * 2.0;\n  }\n  \n  double Distance( const Line& l,const Point& p) { //OK\n    return (p - Projection( l, p)).abs();\n  }\n  \n  bool Intersect(const Line& l, const Line& m){\n    return abs(cross(l.b - l.a, m.b - m.a)) > EPS || abs(cross(l.b-l.a, m.b-l.a)) < EPS;\n  }\n  bool Intersect(const Line& l, const Segment& s){\n    return cross( l.b - l.a, s.a - l.a) * cross( l.b - l.a, s.b - l.a) < EPS;\n  }\n  bool Intersect(const Line& l, const Point& p){\n    return abs(ccw(l.a, l.b, p)) != -1;\n  }\n  bool Intersect(const Segment& s, const Segment& t){\n    return ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 && ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0;\n  }\n  bool Intersect(const Segment& s, const Point& p){\n    return ccw(s.a, s.b, p) == 0;\n  }\n  bool Intersect(const Circle& c,const Line& l){\n    return Distance( l, c.p) <= c.r + EPS;\n  }\n  bool Intersect(const Circle& c,const Point& p){\n    return abs( ( p - c.p).abs() - c.r ) < EPS;\n  }\n  int Intersect(const Circle& c, const Segment& l){\n    if( (Projection( l, c.p) - c.p).norm() - c.r * c.r > EPS) return 0;\n    const double d1 = ( c.p - l.a).abs(), d2 = ( c.p - l.b).abs();\n    if( d1 < c.r + EPS && d2 < c.r + EPS) return 0;\n    if( d1 < c.r - EPS && d2 > c.r + EPS || d1 > c.r + EPS && d2 < c.r - EPS ) return 1;\n    const Point h = Projection( l, c.p);\n    if( dot( l.a - h, l.b - h) < 0) return 2;\n    return 0;\n  }\n  bool Intersect(const Circle& a,const Circle& b){\n    return ( ( a.p - b.p).norm() - ( a.r + b.r) * ( a.r + b.r) < EPS) &&\n      ( ( a.p - b.p).norm() - ( a.r - b.r) * ( a.r - b.r) > -EPS);\n  }\n  double Distance(const Segment& s,const Point& p){\n    Point r = Projection(s, p);\n    if ( Intersect( s, r)) return ( r - p).abs();\n    return min( ( s.a - p).abs(), ( s.b - p).abs());\n  }\n  double Distance(const Segment& a,const Segment& b){\n    if(Intersect( a, b)) return 0;\n    return min( min( Distance( a, b.a), Distance( a, b.b)), min( Distance( b, a.a), Distance( b, a.b)));\n  }\n  double Distance(const Line& l,const Line& m) {\n    return Intersect( l, m) ? 0 : Distance( l, m.a);\n  }\n  double Distance(const Line& l,const Segment& s) { //OK\n    if (Intersect(l, s)) return 0;\n    return min(Distance(l, s.a), Distance(l, s.b));\n  }\n  double Distance(const Point& a,const Point& b){ //OK\n    return ( a - b).abs();\n  }\n  Point Crosspoint(const Segment& l,const Segment& m) { //OK\n    double A = cross(l.b - l.a, m.b - m.a);\n    double B = cross(l.b - l.a, l.b - m.a);\n    if (abs(A) < EPS && abs(B) < EPS) return m.a; // same line\n    return m.a + (m.b - m.a) * B / A;\n  }\n  PointPoint Crosspoint(const Circle& c,const Line l){\n    Point hp = Projection( l, c.p), h =  hp - c.p;\n    const double d2 = h.norm();\n    Point v = ( l.b - l.a) * sqrt( c.r * c.r - d2) / ( l.b - l.a).abs();\n    return PointPoint(hp - v, hp + v);\n  }\n  PointPoint Crosspoint(const Circle& c,const Segment& l) {\n    Line aa = Line( l.a, l.b);\n    if(Intersect(c, l) == 2) return Crosspoint(c, aa);\n    PointPoint ret = Crosspoint(c, aa);\n    if(dot(l.a - ret.first, l.b - ret.first) < 0) ret.second = ret.first;\n    else ret.first = ret.second;\n    return ret;\n  }\n  PointPoint Crosspoint(const Circle& c1,const Circle& c2){ //OK\n    double d = (c1.p - c2.p).abs();\n    double s = (c1.r + c2.r + d) / 2;\n    double S = sqrt( s * ( s - c1.r) * ( s - c2.r) * ( s - d));\n    double h = 2 * S / d;\n    Point v = ( c2.p - c1.p) / ( c2.p - c1.p).abs();\n    double m = sqrt( c1.r * c1.r - h * h);\n    return PointPoint( c1.p + v * m + Point(0,1) * h * v, c1.p + v * m - Point(0,1) * h * v);\n  }\n  bool parallel(const Line& a,const Line& b){\n    return abs(cross( a.b - a.a, b.b - b.a)) < EPS;\n  }\n  bool orthogonal(const Line& a,const Line& b){\n    return abs(dot( a.a - a.b, b.a - b.b)) < EPS;\n  }\n  int Contains(const Polygon& Q,const Point& p){\n    bool in = false;\n    for(int i = 0 ; i < Q.size() ; i++ ){\n      Point a = curr(Q,i) - p, b = next(Q,i) - p;\n      if(a.y > b.y) swap(a,b);\n      if(a.y <= 0 && 0 < b.y && cross(a,b) < 0) in = !in;\n      if(cross(a,b) == 0 && dot(a,b) <= 0) return ON;\n    }\n    return in ? IN : OUT;\n  }\n  bool Contains(const Circle& c,const Point& p){\n    return ( c.p - p).abs() < c.r + EPS;\n  }\n  double Area2(const Polygon& p){ //OK\n    double A = 0;\n    for (int i = 0; i < p.size(); ++i){\n      A += cross(curr(p, i), next(p, i));\n    }\n    return A;\n  }\n};\n\nGeometory geo;\ntypedef Geometory::Point P;\ntypedef Geometory::Line L;\ntypedef Geometory::Segment S;\ntypedef Geometory::Circle C;\nint main(){\n  int q;\n  cin >> q;\n  while(q--){\n    S l1, l2;\n    cin >> l1 >> l2;\n    cout << fixed << setprecision(10) << geo.Distance( l1, l2) << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "//AOJ-CGL-2-D\n#include <bits/stdc++.h>\nusing namespace std;\n#define REP(i,a) for(int i = 0; i < (a); i++)\n#define ALL(a) (a).begin(),(a).end()\ntypedef long long ll;\ntypedef pair<int, int> P;\nconst int INF = 1e9;\nconst int MOD = 1e9 + 7;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS )\n\nstruct Point {\n    double x, y;\n\n    Point(double x = 0, double y = 0) : x(x), y(y) {}\n    \n    Point operator + (Point p) { return Point(x + p.x, y + p.y); }\n    Point operator - (Point p) { return Point(x - p.x, y - p.y); }\n    Point operator * (double a) { return Point(a * x, a * y); }\n    Point operator / (double a) { return Point(x / a, y / a); }\n\n    double abs() { return sqrt(norm()); }\n    double norm() { return x * x + y * y; }\n\n    bool operator < (const Point &p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point &p) const {\n        return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n    }\n};\n\ntypedef Point Vector;\n\ndouble norm(Vector a) { return a.x * a.x + a.y * a.y; }\ndouble abs(Vector a) { return sqrt(norm(a)); }\ndouble dot(Vector a, Vector b) { return a.x * b.x + a.y * b.y; }\ndouble cross(Vector a, Vector b) { return a.x * b.y - a.y * b.x; }\n\nstruct Segment {\n    Point p1, p2;\n    Segment(Point p1 = Point(), Point p2 = Point()) : p1(p1), p2(p2) {}\n};\n\ntypedef Segment Line;\n\nstruct Circle {\n    Point c;\n    double r;\n    Circle(Point c = Point(), double r = 0.0) : c(c), r(r) {}\n};\n\ntypedef vector<Point> Polygon;\n\nbool isOrthogonal(Vector a, Vector b) {\n    return equals(dot(a, b), 0.0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n    return isOrthogonal(a1 - a2, b1 - b2);\n}\n\nbool isOrthogonal(Segment s1, Segment s2) {\n    return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nbool isParallel(Vector a, Vector b) {\n    return equals(cross(a, b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n    return isParallel(a1 - a2, b1 - b2);\n}\n\nbool isParallel(Segment s1, Segment s2) {\n    return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nPoint project(Segment s, Point p) {\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / norm(base);\n    return s.p1 + base * r;\n}\n\nPoint reflect(Segment s, Point p) {\n    return p + (project(s, p) - p) * 2.0;\n}\n\ndouble getDistance(Point a, Point b) {\n    return abs(a - b);\n}\n\ndouble getDistanceLP(Line l, Point p) {\n    return abs(cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1));\n}\n\ndouble getDistanceSP(Segment s, Point p) {\n    if ( dot(s.p2 - s.p1, p - s.p1) < 0.0 ) return abs(p - s.p1);\n    if ( dot(s.p1 - s.p2, p - s.p2) < 0.0 ) return abs(p - s.p2);\n    return getDistanceLP(s, p);\n}\n\nbool intersect(Segment s1, Segment s2);\n\ndouble getDistance(Segment s1, Segment s2) {\n    if ( intersect(s1, s2) ) return 0.0;\n    return min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n               min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nint ccw(Point p0, Point p1, Point p2) {\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if( cross(a, b) > EPS ) return COUNTER_CLOCKWISE;\n    if( cross(a, b) < -EPS ) return CLOCKWISE;\n    if( dot(a, b) < -EPS ) return ONLINE_BACK;\n    if( a.norm() < b.norm() ) return ONLINE_FRONT;\n\n    return ON_SEGMENT;\n}\n\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n    return ( ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n             ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0 );\n}\n\nbool intersect(Segment s1, Segment s2) {\n    return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\nPoint getCrossPoint(Segment s1, Segment s2) {\n    Vector base = s2.p2 - s2.p1;\n    double d1 = abs(cross(base, s1.p1 - s2.p1));\n    double d2 = abs(cross(base, s1.p2 - s2.p1));\n    double t = d1 / (d1 + d2);\n    return s1.p1 + (s1.p2 - s1.p1) * t;\n}\n\npair<Point, Point> getCrossPoints(Circle c, Line l) {\n    // assert(intersect(c, l));\n    Vector pr = project(l, c.c);\n    Vector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);\n    double base = sqrt(c.r * c.r - norm(pr - c.c));\n    return make_pair(pr + e * base, pr - e * base);\n}\n\ndouble arg(Vector p) { return atan2(p.y, p.x); }\nVector polar(double a, double r) { return Point(cos(r) * a, sin(r) * a); }\n\npair<Point, Point> getCrossPoints(Circle c1, Circle c2) {\n    // assert(intersect(c1, c2));\n    double d = abs(c1.c - c2.c);\n    double a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n    double t = arg(c2.c - c1.c);\n    return make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n}\n\n// IN : 2, ON : 1, OUT : 0\nint contains(Polygon g, Point p) {\n    int n = g.size();\n    bool x = false;\n    for( int i = 0; i < n; i++ ) {\n        Point a = g[i] - p, b = g[(i + 1) % n] - p;\n        if ( abs(cross(a, b)) < EPS && dot(a, b) < EPS) return 1;\n        if ( a.y > b.y ) swap(a, b);\n        if ( a.y < EPS && EPS < b.y && cross(a, b) > EPS ) x = !x;\n    }\n    return ( x ? 2 : 0 );\n}\n\nsigned main(){\n    int q;\n    cin >> q;\n    double x0, y0, x1, y1, x2, y2, x3, y3;\n    REP(i,q){\n        cin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n        cout << setprecision(16) << getDistance(Segment(Point(x0, y0), Point(x1, y1)), Segment(Point(x2, y2), Point(x3, y3))) << endl;\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <cmath>\n#include <algorithm>\n#include <cfloat>\n#include <stack>\n#include <queue>\n#include <vector>\n#include <string>\n#include <iostream>\ntypedef long long int ll;\ntypedef unsigned long long int ull;\n#define BIG_NUM 2000000000\n#define MOD 1000000007\n#define EPS 0.000000001\nusing namespace std;\n\nstruct Point{\n\tdouble x,y;\n};\n\ntypedef Point Vector;\n\nstruct Segment{\n\tvoid set(double x1,double y1,double x2,double y2){\n\t\tp1.x = x1;\n\t\tp1.y = y1;\n\t\tp2.x = x2;\n\t\tp2.y = y2;\n\t}\n\tPoint p1,p2;\n};\n\ntypedef Segment Line;\n\nint func(double x1,double y1,double x2, double y2, double xp, double yp){\n\tdouble naiseki,norm1,norm2,gaiseki;\n\tnorm1 = sqrt((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1));\n\tnorm2 = sqrt((xp-x1)*(xp-x1)+(yp-y1)*(yp-y1));\n\tnaiseki = (xp-x1)*(x2-x1)+(yp-y1)*(y2-y1);\n\tgaiseki = (x2-x1)*(yp-y1)-(xp-x1)*(y2-y1);\n\tif(gaiseki > EPS){\n\t\treturn 1;\n\t}else if(gaiseki < -EPS){\n\t\treturn -1;\n\t}\n\tif(naiseki < -EPS){\n\t\treturn 2;\n\t}\n\n\tif(norm1 < norm2){\n\t\treturn -2;\n\t}\n\treturn 0;\n}\n\ndouble cross(Vector a,Vector b){\n\treturn a.x*b.y-a.y*b.x;\n}\n\ndouble dot(Vector a,Vector b){\n\treturn a.x*b.x + a.y*b.y;\n}\n\nPoint calc_minus(Point a,Point b){\n\tPoint ret;\n\n\tret.x = a.x-b.x;\n\tret.y = a.y-b.y;\n\n\treturn ret;\n}\n\ndouble calc_len(Vector a){\n\treturn sqrt(a.x*a.x+a.y*a.y);\n}\n\ndouble getDistanceLP(Line l,Point p){\n\treturn fabs(cross(calc_minus(l.p2,l.p1),calc_minus(p,l.p1))/calc_len(calc_minus(l.p2,l.p1)));\n}\n\ndouble getDistanceSP(Segment s,Point p){\n\tif(dot(calc_minus(s.p2,s.p1),calc_minus(p,s.p1)) < 0.0)return calc_len(calc_minus(p,s.p1));\n\tif(dot(calc_minus(s.p1,s.p2),calc_minus(p,s.p2)) < 0.0)return calc_len(calc_minus(p,s.p2));\n\treturn getDistanceLP(s,p);\n}\n\ndouble getDistance(Segment s1,Segment s2){\n\treturn min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),\n\t\t\tmin(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n}\n\nint main(){\n\tdouble x1,x2,x3,x4,y1,y2,y3,y4;\n\tint q;\n\tscanf(\"%d\",&q);\n\n\tfor(int i=0;i<q;i++){\n\t\tscanf(\"%lf %lf %lf %lf %lf %lf %lf %lf\",&x1,&y1,&x2,&y2,&x3,&y3,&x4,&y4);\n\n\t\tif(func(x1,y1,x2,y2,x3,y3)*func(x1,y1,x2,y2,x4,y4) <= 0 &&\n\t\t\t\tfunc(x3,y3,x4,y4,x1,y1) * func(x3,y3,x4,y4,x2,y2) <= 0){\n\t\t\tprintf(\"0.0000000000\\n\");\n\t\t\tcontinue;\n\t\t}\n\n\t\tSegment s1,s2;\n\t\ts1.set(x1,y1,x2,y2);\n\t\ts2.set(x3,y3,x4,y4);\n\n\t\tprintf(\"%.10lf\\n\",getDistance(s1,s2));\n\t}\n\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#include<iostream>\n#include<algorithm>\n#include<string>\n#include<iomanip>\n#include<cmath>\n#include<vector>\n#include<deque>\n#include<queue>\n#include<map>\n#include<set>\n#define ll long long\n#define str string\n#define ld long double\n#define vec vector\n#define vll vec<ll>\n#define rep(i,a,b) for(ll i=a;i<b;i++)\n#define rrep(i,b,a) for(ll i=b;i>=a;i--)\n#define ALL(a) a.begin(),a.end()\n#define rALL(a) a.rbegin(),a.rend()\n#define kai \"\\n\"\n#define yuque priority_queue\n#define pub push_back\n#define pob pop_back\n#define puf push_front\n#define pof pop_front\n#define mie min_element\n#define mae max_element\n#define tos to_string\n#define sep setprecision\n#define lob lower_bound\n#define upb upper_bound\n#define nep next_permutation\n#define MOD 1000000007ll\n#define MIN (1e-10)\n#define equal(a,b) (abs((a)-(b))<MIN)\n#define v2 ten\n#define chokusen senbun\n#define kakkei vec<ten>\nusing namespace std;\nvoid solve();\nint main(){\n\tcin.tie(0);\n\tios::sync_with_stdio(false);\n\tcout<<fixed;\n\tsolve();\n}\nstruct pea{\n\tll f,s;\n\tbool operator<(const pea &p)const{\n\t\treturn f!=p.f?f<p.f:s<p.s;\n\t};\n};\nstruct tri{\n\tll f,s,t;\n\tbool operator<(const tri &p)const{return f<p.f;};\n};\nclass ten{\npublic:\n\tld x,y;\n\tten operator+(ten p){return{x+p.x,y+p.y};}\n\tten operator-(ten p){return{x-p.x,y-p.y};}\n\tten operator*(ld k){return{k*x,k*y};}\n\tten operator/(ld k){return{x/k,y/k};}\n\tld abs(){return sqrt(abs2());}\n\tld abs2(){return x*x+y*y;};\n\tbool operator<(const ten &p)const{return x!=p.x?x<p.x:y<p.y;};\n\tbool operator==(const ten &p)const{return (-MIN<x-p.x)&&(x-p.x<MIN)&&(-MIN<y-p.y)&&(y-p.y<MIN);};\n\tld naiseki(v2 b){return x*b.x+y*b.y;}\n\tld gaiseki(v2 b){return x*b.y-y*b.x;}\n};\nstruct senbun{ten p1,p2;};\nstruct en{ten o;ld r;};\nten shaei(ten p,chokusen l){\n\tv2 a=l.p2-l.p1;\n\treturn l.p1+a*a.naiseki(p-l.p1)/a.abs2();\n}\nten hansha(ten p,chokusen l){return shaei(p,l)*2-p;}\nld tenchoku(ten p,chokusen l){\n\tv2 a=l.p2-l.p1;\n\treturn abs(a.gaiseki(p-l.p1))/a.abs();\n}\nld tensen(ten p,senbun s){\n\tif((p-s.p1).naiseki(s.p2-s.p1)<0)return (p-s.p1).abs();\n\tif((p-s.p2).naiseki(s.p1-s.p2)<0)return (p-s.p2).abs();\n\treturn tenchoku(p,s);\n}\nll ccw(ten p0,ten p1,ten p2){\n\tv2 a=p1-p0,b=p2-p0;\n\tif(a.gaiseki(b)>MIN)return -1;//012反時計回り\n\tif(a.gaiseki(b)<-MIN)return 1;//012時計回り\n\tif(a.naiseki(b)<-MIN)return -2;//102\n\tif(a.abs2()<b.abs2())return 2;//012\n\treturn 0;//021\n}\nbool majiwaru(senbun s,senbun t){return ccw(s.p1,s.p2,t.p1)*ccw(s.p1,s.p2,t.p2)<=0&&ccw(t.p1,t.p2,s.p1)*ccw(t.p1,t.p2,s.p2)<=0;}\nld sensen(senbun s,senbun t){\n\tif(majiwaru(s,t))return 0;\n\treturn min({tensen(s.p1,t),tensen(s.p2,t),tensen(t.p1,s),tensen(t.p2,s)});\n}\nvoid solve(){\n\tll n;cin>>n;\n\tcout<<sep(10);\n\trep(i,0,n){\n\t\tsenbun s1,s2;\n\t\tld a,b,c,d;\n\t\tcin>>a>>b>>c>>d;\n\t\ts1={{a,b},{c,d}};\n\t\tcin>>a>>b>>c>>d;\n\t\ts2={{a,b},{c,d}};\n\t\tcout<<sensen(s1,s2)<<kai;\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<complex>\n#include<utility>\n#include<vector>\n#include<cmath>\n#include<cassert>\n\nusing namespace std;\n\ndouble eps=1e-9;\n\ntypedef complex<double> Point;\ntypedef complex<double> Vector;\n\ntemplate<class T> bool eq(T a,T b){\n\treturn abs(a-b)<eps;\n}\n\ntemplate<class T> int sgn(T r){\n\treturn eq(r,0.0)?0:(r>0?1:-1);\n}\n\nstruct Circle{\n\tPoint center;\n\tdouble r;\n\tCircle(Point c,double r):center(c),r(r){}\n\tCircle(){}\n};\n\nstruct Line{\n\tdouble a,b,c;//ax+by=c\n\tLine(){}\n\tLine(double a,double b,double c):a(a),b(b),c(c){}\n\tLine(Point p1,Point p2){//not verified\n\t\tif(eq(abs(p1-p2),0.0)){\n\t\t\tfprintf(stderr,\"called Line for same points\\n\");\n\t\t\tassert(0);\n\t\t}\n\t\tdouble x1=p1.real(),y1=p1.imag();\n\t\tdouble x2=p2.real(),y2=p2.imag();\n\t\ta=y2-y1;\n\t\tb=-(x2-x1);\n\t\tc=x1*y2-x2*y1;\n\t}\n};\n\nvoid print(Point p){\n\tif(isnan(p.real())||isnan(p.imag())){\n\t\tprintf(\"NaN Point\\n\");\n\t\treturn;\n\t}\n\tprintf(\"(%f,%f)\\n\",p.real(),p.imag());\n}\n\ndouble pointsDistance(Point p1,Point p2){/*abs(p1-p2)と書いてよい*/\n\tdouble dx=p1.real()-p2.real();\n\tdouble dy=p1.imag()-p2.imag();\n\treturn sqrt(dx*dx+dy*dy);\n}\n\ndouble linePointDistance(Line l,Point p){\n\tdouble a=l.a,b=l.b,c=l.c;\n\tdouble x=p.real(),y=p.imag();\n\tdouble num=abs(a*x+b*y-c);\n\tdouble den=sqrt(a*a+b*b);\n\treturn num/den;\n}\n\nVector basisVector(Vector v){\n\tif(eq(v.real(),0.0)&&eq(v.imag(),0.0)) return v;\n\treturn v/sqrt(norm(v));\n}\n\nPoint linePointProjection(Line l,Point p){\n\tdouble dx=l.a,dy=l.b;\n\tdouble a=l.a,b=l.b,c=l.c;\n\tdouble x=p.real(),y=p.imag();\n\tVector ba=basisVector(Vector(dx,dy));\n\tdouble num=a*x+b*y-c;\n\tdouble den=sqrt(a*a+b*b);\n\tVector v=ba*(-num/den);\n\treturn p+v;\n}\n\nvector<Point> circleLineIntersection(Circle c,Line l){\n\tvector<Point> res;\n\tPoint p=linePointProjection(l,c.center);\n\tdouble d=linePointDistance(l,c.center);\n\tint s=sgn(d-c.r);\n\tif(s==1){\n\t\treturn res;//empty\n\t}else if(s==0){\n\t\tres.push_back(p);\n\t\treturn res;\n\t}else{\n\t\tdouble r=c.r;\n\t\tdouble t=sqrt(r*r-d*d);\n\t\tVector e=basisVector(Vector(l.b,-l.a));\n\t\tres.push_back(p+t*e);\n\t\tres.push_back(p-t*e);\n\t\treturn res;\n\t}\n}\n\nvector<Point> circlesIntersection(Circle c1,Circle c2){/*一致するとき処理できない*/\n\tif(eq(c1.center.real(),c2.center.real())&&eq(c1.center.imag(),c2.center.imag())&&\n\t\teq(c1.r,c2.r)){\n\t\t\t\tPoint p=Point(NAN,NAN);\n\t\t\t\tvector<Point> v;\n\t\t\t\tv.push_back(p);\n\t\t\t\treturn v;\n\t}\n\tdouble d=pointsDistance(c1.center,c2.center);\n\tdouble r1=c1.r,r2=c2.r;\n\tdouble dif=max(r1,r2)-min(r1,r2);\n\tdouble sum=r1+r2;\n\tif(sgn(d-sum)==1||sgn(dif-d)==1){//d>sum||dif>d\n\t\tvector<Point> v;\n\t\treturn v;\n\t}\n\tdouble x1=c1.center.real(),y1=c1.center.imag();\n\tdouble x2=c2.center.real(),y2=c2.center.imag();\n\tLine l=Line(-x1*2+x2*2,-y1*2+y2*2,r1*r1-r2*r2-(x1*x1-x2*x2)-(y1*y1-y2*y2));\n\treturn circleLineIntersection(c1,l);\n}\n\ndouble det(double a,double b,double c,double d){\n\treturn a*d-b*c;\n}\n\nPoint linesIntersection(Line l1,Line l2){/*平行の時は常にNAN*/\n\tdouble a=l1.a,b=l1.b,c=l1.c;\n\tdouble d=l2.a,e=l2.b,f=l2.c;\n\tdouble den=det(a,b,d,e);\n\tdouble numx=det(c,b,f,e);\n\tdouble numy=det(a,c,d,f);\n\tif(eq(den,0.0)){\n\t\treturn Point(NAN,NAN);\n\t}\n\treturn Point(numx/den,numy/den);\n}\n\n//circlesIntersection verify AOJ1190 ICPC Domestic 2013 Balloon\n\ndouble crossProduct(Vector a,Vector b){\n\treturn (conj(a)*b).imag();\n}\n\ndouble dotProduct(Vector a,Vector b){\n\treturn (conj(a)*b).real();\n}\n\nint ccw(Point p1,Point p2,Point p3){\n\t/*p1,p2,p3はすべて異なると仮定\n\tそうでない場合の戻り値は不定\n\tではなく\n\tp1!=p2と仮定*/\n\tVector b=p2-p1;\n\tVector c=p3-p2;\n\tint s=sgn(crossProduct(b,c));\n\tif(s==1) return 1;//counterclockwise\n\tif(s==-1) return -1;//clockwise\n\tint t=sgn(dotProduct(b,c));\n\tif(t==-1) return 2;//3--1--2\n\tint u=sgn(norm(b)-norm(c));\n\tif(eq(norm(c),0.0)) return 0;//1==3\n\tif(u==-1) return -2;//1--2--3\n\treturn 0;//1--3--2 or 2==3\n}\n\nstruct Segment{\n\tPoint p1,p2;\n\tLine l;\n\tSegment(){}\n\tSegment(Point p1,Point p2):p1(p1),p2(p2){\n\t\tl=Line(p1,p2);\n\t}\n};\n\nint oneLineCCW(Point p1,Point p2,Point p3){\n\t/*p1!=p2かつp1,p2,p3は一直線上と仮定*/\n\t/*それ以外の時の戻り値は不定*/\n\tVector b=p2-p1,c=p3-p1;\n\tif(sgn(dotProduct(b,c))==-1) return 2;//p3--p1--p2\n\tif(eq(abs(p1-p3),0.0)) return 1;//p1==p3--p2\n\tint s=sgn(norm(b)-norm(c));\n\tif(s==1) return 0;//p1--p3--p2\n\tif(s==0) return -1;//p1--p3==p2\n\telse return -2;//p1--p2--p3\n}\n\ndouble pointSegmentDistance(Point p,Segment s){\n\tLine l=s.l;\n\tdouble d=linePointDistance(l,p);\n\tPoint pr=linePointProjection(l,p);\n\tint x=oneLineCCW(s.p1,s.p2,pr);\n\tif(x>=-1&&x<=1) return d;\n\tdouble a=abs(s.p1-p);\n\tdouble b=abs(s.p2-p);\n\treturn min(a,b);\n}\n\nbool segmentsIntersect(Segment s1,Segment s2){\n\tPoint p[2],q[2];\n\tp[0]=s1.p1,p[1]=s1.p2;\n\tq[0]=s2.p1,q[1]=s2.p2;\n\treturn ccw(p[0],p[1],q[0])*ccw(p[0],p[1],q[1])<=0&&\n\t\tccw(q[0],q[1],p[0])*ccw(q[0],q[1],p[1])<=0;\n}\n\ndouble segmentsDistance(Segment s1,Segment s2){\n\tbool flg=segmentsIntersect(s1,s2);\n\tif(flg) return 0;\n\tPoint p[2],q[2];\n\tp[0]=s1.p1,p[1]=s1.p2;\n\tq[0]=s2.p1,q[1]=s2.p2;\n\tdouble res=-1;\n//\tprintf(\"getline..\\n\");\n//\tprint(s1.p1);\n//\tprint(s1.p2);\n//\tprintf(\"%f %f %f\\n\",s1.l.a,s1.l.b,s1.l.c);\n\tfor(int k=0;k<2;k++){\n\t\tPoint r=linePointProjection(s2.l,p[k]);\n\t\tif(abs(oneLineCCW(q[0],q[1],r))<=1){\n//\t\t\tprintf(\"abs<=1------\\n\");\n//\t\t\tprint(p[0]);print(p[1]);print(r);\n//\t\t\tprintf(\"------\\n\");\n\t\t\tdouble tmp=abs(r-p[k]);\n\t\t\tif(res<0||tmp<res) res=tmp;\n\t\t}\n\t\tr=linePointProjection(s1.l,q[k]);\n\t\tif(abs(oneLineCCW(p[0],p[1],r))<=1){\n//\t\t\tprintf(\"abs<=1------\\n\");\n//\t\t\tprint(q[0]);print(q[1]);print(r);\n//\t\t\tprintf(\"-------\\n\");\n\t\t\tdouble tmp=abs(r-q[k]);\n\t\t\tif(res<0||tmp<res) res=tmp;\n\t\t}\n\t}\n\tfor(int i=0;i<2;i++) for(int j=0;j<2;j++){\n\t\tdouble tmp=abs(p[i]-q[j]);\n\t\tif(res<0||tmp<res) res=tmp;\n\t}\n\treturn res;\n}\n\nPoint inputPoint(){\n\tdouble x,y;\n\tscanf(\"%lf%lf\",&x,&y);\n\treturn Point(x,y);\n}\n\nint main(){\n\tint Q;\n//\tPoint p1=Point(0,1),p2=Point(0,2),p3=Point(0,0);\n//\tprintf(\"%d\\n\",oneLineCCW(p1,p2,p3));\n\tscanf(\"%d\",&Q);\n\tfor(int datano=0;datano<Q;datano++){\n\t\tPoint p1,p2;\n\t\tPoint q1,q2;\n\t\tp1=inputPoint();\n\t\tp2=inputPoint();\n\t\tq1=inputPoint();\n\t\tq2=inputPoint();\n\t\tif(abs(p1-p2)<eps) break;\n\t\tSegment s1=Segment(p1,p2);\n\t\tSegment s2=Segment(q1,q2);\n\t\tdouble ans=segmentsDistance(s1,s2);\n\t\tprintf(\"%.9f\\n\",ans);\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define repr(i,a,b) for(int i=a;i<b;i++)\n#define rep(i,n) for(int i=0;i<n;i++)\n#define reprrev(i,a,b) for(int i=b-1;i>=a;i--) // [a, b)\n#define reprev(i,n) reprrev(i,0,n)\ntypedef long long ll;\ntypedef unsigned long long ull;\ntemplate<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return true; } return false; }\ntemplate<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return true; } return false; }\n\n/* attention\n    long longのシフト演算には気をつけよう\n    タイポした時のデバッグが死ぬほどきつくなるので変数名は最低3字くらい使った方がいいかも\n    sizeは(int)とキャストしよう\n    cin.tie(0);\n    ios::sync_with_stdio(false);<- これら、printfとかと併用しない方が良さそう\n\n*/\n\nconst ll mod = 1e9+7;\n\nvoid chmod(ll &M){\n    if(M >= mod) M %= mod;\n    else if(M < 0){\n        M += (abs(M)/mod + 1)*mod;\n        M %= mod;\n    }\n}\n\nll modpow(ll x, ll n){\n    if(n==0) return 1;\n    ll res=modpow(x, n/2);\n\n    if(n%2==0) return res*res%mod;\n    else return res*res%mod*x%mod;\n}\n\nint getl(int i, int N) { return i==0? N-1:i-1; };\nint getr(int i, int N) { return i==N-1? 0:i+1; };\n\n\n// 線分 ab の偏角 返り値は[-π, π]\ndouble argument(const pair<double, double> &a, const pair<double, double> &b){\n    double ax=a.first, ay=a.second, bx=b.first, by=b.second;\n    return atan2(by-ay, bx-ax);\n}\n\n/* <-----------------------------------------------------------------------------------> */\n/* <-----------------------------------------------------------------------------------> */\n/* <-----------------------------------------------------------------------------------> */\n/* <-----------------------------------------------------------------------------------> */\n\n\nlong double const EPS = (1e-10);\nbool equal(long double const a, long double const b) { return fabs(a-b) < EPS; }\n\nstruct Point {\n    long double x, y;\n    Point(long double _x=0, long double _y=0) : x(_x), y(_y) {}\n\n    Point operator + (Point const & p) const { return Point{x + p.x, y + p.y}; }\n    Point & operator += (Point const & p) { x += p.x; y += p.y; return *this; }\n    Point operator - (Point const & p) const { return Point{x - p.x, y - p.y}; }\n    Point & operator -= (Point const & p) { x -= p.x; y -= p.y; return *this; }\n    Point operator * (long double a) const { return Point{a*x, a*y}; }\n    Point & operator *= (long double a) { x *= a; y *= a; return *this; }\n    Point operator / (long double a) const { return Point{x/a, y/a}; }\n\n    long double norm() { return x*x + y*y; }\n    long double abs() { return sqrt(norm()); }\n    \n    bool operator < (Point const & p) const { return x != p.x ? x < p.x : y < p.y; }\n    bool operator == (Point const & p) const { return equal(x, p.x) && equal(y, p.y); }\n\n    void print() { cout << x << ' ' << y << \"\\n\"; }\n};\nusing Vector = Point;\n\nstruct Segment{\n    Point p1, p2;\n    Segment(Point _p1, Point _p2)\n        : p1(_p1), p2(_p2) {}\n};\nusing Line = Segment;\n\nstruct Circle{\n    Point c;\n    double r;\n    Circle(Point _c, double _r)\n        : c(_c), r(_r) {}\n};\nusing Polygon = vector<Point>;\n\n// 内積 外積 外積は大きさを返す\n// https://mathtrain.jp/gaiseki\nlong double dot(Vector a, Vector b) { return a.x*b.x + a.y*b.y; }\nlong double cross(Vector a, Vector b) { return a.x*b.y - a.y*b.x; }\n\n// ベクトルの直交判定　平行判定\nbool isOrthogonal(Vector const & a, Vector const & b) { return equal(dot(a, b), 0.0); }\nbool isOrthogonal(Point const & a1, Point const & a2, Point const & b1, Point const & b2) { return isOrthogonal(a1-a2, b1-b2); }\nbool isOrthogonal(Segment const & s1, Segment const & s2) { return isOrthogonal(s1.p1 - s1.p2, s2.p1 - s2.p2); }\nbool isParallel(Vector const & a, Vector const & b) { return equal(cross(a, b), 0); }\nbool isParallel(Point const & a1, Point const & a2, Point const & b1, Point const & b2) { return isParallel(a1-a2, b1-b2); }\nbool isParallel(Segment const & s1, Segment const & s2) { return isParallel(s1.p1-s1.p2, s2.p1-s2.p2); }\n\n// 線分 s に対する点 p の射影\nPoint project(Segment const & s, Point const & p){\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / base.norm();\n    return s.p1 + base * r;\n}\n// 線分 s を対称軸とした点 p の線対称点\nPoint reflect(Segment const & s, Point const & p) { return p + (project(s, p) - p) * 2.0; }\n\n// 線分p0-p1 に対して線分 p0-p2 が反時計回りなのか直線上なのか線分上なのか...\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;   // p2-p0-p1\nstatic const int ONLINE_FRONT = -2; // p0-p1-p2\nstatic const int ON_SEGMENT = 0;    // p0-p2-p1\nint ccw(Point const & p0, Point const & p1, Point const & p2){\n    Vector a = p1 - p0, b = p2 - p0;\n    if(cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n    if(cross(a, b) < -EPS) return CLOCKWISE;\n    if(dot(a, b) < -EPS) return ONLINE_BACK;\n    if(a.norm() < b.norm()) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\n// 線分 p1-p2 と線分 p3-p4 の交差判定（交点を持てば true）\nbool intersect(Point const & p1, Point const & p2, Point const & p3, Point const & p4){\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 && ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\nbool intersect(Segment const & s1, Segment const & s2) { return intersect(s1.p1, s1.p2, s2.p1, s2.p2); }\n\n// 点と直線の距離\nlong double getDistanceLP(Line const & l, Point const & p) {\n    return abs(cross(l.p2-l.p1, p-l.p1) / (l.p2-l.p1).abs());\n}\n\n// 点と線分の距離\nlong double getDistanceSP(Segment s, Point p) {\n    if (dot(s.p2-s.p1, p-s.p1) < 0.0) return (p-s.p1).abs();\n    if (dot(s.p1-s.p2, p-s.p2) < 0.0) return (p-s.p2).abs();\n    return getDistanceLP(s, p);\n}\n\n// 線分と線分の距離\nlong double getDistance(Segment s1, Segment s2) {\n    if (intersect(s1, s2)) return 0.0;\n    return min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)), min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\nint main(){\n    cin.tie(nullptr);\n    ios::sync_with_stdio(false);\n\n    int q; cin >> q;\n    while(q--) {\n        int a, b, c, d, e, f, g, h; cin >> a >> b >> c >> d >> e >> f >> g >> h;\n        Point p1(a, b), p2(c, d), p3(e, f), p4(g, h);\n        Segment s1(p1, p2), s2(p3, p4);\n        cout << fixed << setprecision(15) << getDistance(s1, s2) << endl;\n    }\n\n\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<algorithm>\n#include<map>\n#include<set>\n#include<utility>\n#include<vector>\n#include<cmath>\n#include<cstdio>\n#include<complex>\n#define loop(i,a,b) for(int i=a;i<b;i++) \n#define rep(i,a) loop(i,0,a)\n#define pb push_back\n#define mp make_pair\n#define it ::iterator\n#define all(in) in.begin(),in.end()\nconst double PI=acos(-1);\nconst double EPS=1e-10;\nusing namespace std;\ntypedef complex<double> P;\nstruct L : public vector<P> {\n  L(const P &a, const P &b) {\n    push_back(a); push_back(b);\n  }\n};\nP pin(){\n\tdouble x,y;\n\tcin>>x>>y;\n\tP p(x,y);\n\treturn p;\n}\nvoid PIN(P* a,int n){\n\trep(i,n)a[i]=pin();\n}\ndouble dot(P a,P b){\n\treturn real(conj(a)*b);\n}\ndouble cross(P a,P b){\n\treturn imag(conj(a)*b);\n}\nint ccw(P a, P b, P c) {\n  b -= a; c -= a;\n  if (cross(b, c) > 0)   return +1;       // counter clockwise\n  if (cross(b, c) < 0)   return -1;       // clockwise\n  if (dot(b, c) < 0)     return +2;       // c--a--b on line\n  if (norm(b) < norm(c)) return -2;       // a--b--c on line\n  return 0;\n}\nP projection(L a,P p){\n\tdouble t=dot(p-a[0],a[0]-a[1])/norm(a[0]-a[1]);\n\treturn a[0]+t*(a[0]-a[1]);\n}\nP reflection(L a,P p){\n\treturn p+2.0*(projection(a,p)-p);\n}\nbool intersectLL(const L &l, const L &m) {\n  return abs(cross(l[1]-l[0], m[1]-m[0])) > EPS || // non-parallel\n         abs(cross(l[1]-l[0], m[0]-l[0])) < EPS;   // same line\n}\nbool intersectLS(const L &l, const L &s) {\n  return cross(l[1]-l[0], s[0]-l[0])*       // s[0] is left of l\n         cross(l[1]-l[0], s[1]-l[0]) < EPS; // s[1] is right of l\n}\nbool intersectLP(const L &l, const P &p) {\n  return abs(cross(l[1]-p, l[0]-p)) < EPS;\n}\nbool intersectSS(const L &s, const L &t) {\n  return ccw(s[0],s[1],t[0])*ccw(s[0],s[1],t[1]) <= 0 &&\n         ccw(t[0],t[1],s[0])*ccw(t[0],t[1],s[1]) <= 0;\n}\nbool intersectSP(const L &s, const P &p) {\n  return abs(s[0]-p)+abs(s[1]-p)-abs(s[1]-s[0]) < EPS; // triangle inequality\n}\nP intersect_ls(L a,L b){\n\tdouble t1=abs(cross(a[1]-a[0],b[0]-a[0]));\n\tdouble t2=abs(cross(a[1]-a[0],b[1]-a[0]));\n\treturn b[0]+(b[1]-b[0])*t1/(t1+t2);\n}\ndouble distanceLP(const L &l, const P &p) {\n  return abs(p - projection(l, p));\n}\ndouble distanceLL(const L &l, const L &m) {\n  return intersectLL(l, m) ? 0 : distanceLP(l, m[0]);\n}\ndouble distanceLS(const L &l, const L &s) {\n  if (intersectLS(l, s)) return 0;\n  return min(distanceLP(l, s[0]), distanceLP(l, s[1]));\n}\ndouble distanceSP(const L &s, const P &p) {\n  const P r = projection(s, p);\n  if (intersectSP(s, r)) return abs(r - p);\n  return min(abs(s[0] - p), abs(s[1] - p));\n}\ndouble distanceSS(const L &s, const L &t) {\n  if (intersectSS(s, t)) return 0;\n  return min(min(distanceSP(s, t[0]), distanceSP(s, t[1])),\n             min(distanceSP(t, s[0]), distanceSP(t, s[1])));\n}\t\nint main(){\n\tint n;\n\tcin>>n;\n\twhile(n--){\n\t\tP p[4];\n\t\tPIN(p,4);\n\t\tL a=L(p[0],p[1]);\n\t\tL b=L(p[2],p[3]);\n\t\tprintf(\"%.9f\\n\",distanceSS(a,b));\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<iomanip>\n#include<algorithm>\n#define _USE_MATH_DEFINES\n#include<math.h>\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS )\nusing namespace std;\n\nclass Point {\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0) :x(x), y(y) {}\n\tPoint operator + (Point p) {\n\t\treturn Point(x + p.x, y + p.y); \n\t}\n\tPoint operator - (Point p) {\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n\tPoint operator * (double a) {\n\t\treturn Point(a * x, a * y);\n\t}\n\tPoint operator / (double a) {\n\t\treturn Point(x / a, y / a);\n\t}\n\n\tdouble abs() {\n\t\treturn sqrt(norm());\n\t}\n\tdouble norm() {\n\t\treturn x * x + y * y;\n\t}\n\n\tbool operator < (const Point &p)const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p)const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b) {\n\treturn a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n\treturn a.x * b.y - a.y * b.x;\n}\n\ndouble getDistanceSP(Point p, Point p1, Point p2) {\n\tif (dot(p - p1, p2 - p1) < 0.0)return (p - p1).abs();\n\telse if (dot(p - p2, p1 - p2) < 0.0)return (p - p2).abs();\n\telse return  fabs(cross(p2 - p1, p - p1)) / (p2 - p1).abs();\n}\n\n\ndouble angle(Vector a, Vector b) {\n\tif (cross(a, b) >= 0.0)return acos(dot(a, b) / a.abs() / b.abs());\n\telse return (-1) * acos(dot(a, b) / a.abs() / b.abs());\n}\n\nbool doIntersect(Point p1, Point p2, Point p3, Point p4) {\n\tif (angle(p3 - p1, p4 - p1) >= angle(p3 - p1, p2 - p1) && angle(p3 - p1, p2 - p1) >= 0.0 && angle(p2 - p3, p1 - p3) >= angle(p2 - p3, p4 - p3) && angle(p2 - p3, p4 - p3) >= 0.0)return true;\n\telse if (angle(p3 - p2, p4 - p2) >= angle(p3 - p2, p1 - p2) && angle(p3 - p2, p1 - p2) >= 0.0 && angle(p1 - p3, p2 - p3) >= angle(p1 - p3, p4 - p3) && angle(p1 - p3, p4 - p3) >= 0.0)return true;\n\telse return false;\n}\n\ndouble getDistanceSS(Point p1, Point p2, Point p3, Point p4) {\n\tif (doIntersect(p1, p2, p3, p4))return 0;\n\telse return min({ getDistanceSP(p4, p1, p2), getDistanceSP(p3, p1, p2), getDistanceSP(p1, p3, p4), getDistanceSP(p2, p3, p4) });\n}\n\nint main() {\n    int i, q;\n\tdouble x1, x2, x3, x4, y1, y2, y3, y4;\n\tPoint ans;\n\tcin >> q;\n\tfor (i = 0; i < q; i++) {\n\t\tcin >> x1 >> y1 >> x2 >> y2 >> x3 >> y3 >> x4 >> y4;\n\t\tPoint p1(x1, y1), p2(x2, y2), p3(x3, y3), p4(x4, y4);\n\t\tcout << setprecision(15) << getDistanceSS(p1, p2, p3, p4) << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef double db;\nconst db eps = 1e-15, pi = acos(-1);\nint sign(db x) {return x < -eps ? -1 : x > eps;}\nint cmp(db x, db y) {return sign(x - y);}\nint intersect(db l1, db r1, db l2, db r2) {\n    if (l1 > r1) swap(l1, r1); if (l2 > r2) swap(l2, r2); return cmp(r1, l2) != -1 && cmp(r2, l1) != -1;\n}\nint inmid(db k1, db k2, db k3) {return sign(k1 - k3) * sign(k2 - k3) <= 0;}//k3 in [k1,k2]?1:0\nstruct Point {\n    db x, y;\n    Point operator + (const Point & a)const {return Point{a.x + x, a.y + y};}\n    Point operator - (const Point & a)const {return Point{x - a.x, y - a.y};}\n    Point operator * (db a) const {return Point{x * a, y * a};}\n    Point operator / (db a) const {return Point{x / a, y / a};}\n    bool operator < (const Point p) const {int a = cmp(x, p.x); if (a) return a == -1; return cmp(y, p.y) == -1;}\n    bool operator == (const Point & a) const {return cmp(x, a.x) == 0 && cmp(y, a.y) == 0;}\n    db abs() {return sqrt(x * x + y * y);}\n    db dis(Point p) {return ((*this) - p).abs();}\n    int getP() const {return sign(y) == 1 || (sign(y) == 0 && sign(x) == -1);}\n    void input() {scanf(\"%lf%lf\", &x, &y);}\n};\ndb cross(Point p1, Point p2) {return p1.x * p2.y - p1.y * p2.x;}\ndb cross(Point p0, Point p1, Point p2) {return cross(p1 - p0, p2 - p0);}\ndb dot(Point p1, Point p2) {return p1.x * p2.x + p1.y * p2.y;}\nint inmid(Point k1, Point k2, Point k3) {return inmid(k1.x, k2.x, k3.x) && inmid(k1.y, k2.y, k3.y);}\nbool compareangle(Point p1, Point p2) {//Polar Angle Sort\n    return p1.getP() < p2.getP() || (p1.getP() == p2.getP() && sign(cross(p1, p2)) > 0);\n}\nint clockwise(Point p1, Point p2, Point p3) { // k1 k2 k3 anticlockwise:1 clockwise:-1 others:0\n    return sign(cross(p1, p2, p3));\n}\nstruct Line {\n    Point s, e;\n    void input() {scanf(\"%lf%lf%lf%lf\", &s.x, &s.y, &e.x, &e.y);}\n    Point vec() {return e - s;}\n    db length() {return sqrt(dot(s - e, s - e));}\n    db length2() {return dot(s - e, s - e);}\n};\nint onS(Line l, Point p) {// On Seg?\n    return inmid(l.s, l.e, p) && sign(cross(l.s - p, l.e - l.s)) == 0;\n}\nbool checkLL(Line l1, Line l2) {\n    return cmp(cross(l1.s, l2.s, l2.e), cross(l1.e, l2.s, l2.e)) != 0;\n}\nbool checkLS(Line l1, Line l2) {//Intersection of Line l1 and Seg l2?\n    return sign(cross(l2.s, l1.s, l1.e)) * sign(cross(l2.e, l1.s, l1.e)) <= 0;\n}\nint checkSS(Line l1, Line l2) {//Intersection of Two Seg?1:0\n    return intersect(l1.s.x, l1.e.x, l2.s.x, l2.e.x) && intersect(l1.s.y, l1.e.y, l2.s.y, l2.e.y) && checkLS(l1, l2) && checkLS(l2, l1);\n}\nPoint project(Line l, Point p) {\n    return l.s + l.vec() * dot(p - l.s, l.vec()) / l.length2();\n}\nPoint reflect(Line l, Point p) {//Mirror Point\n    return project(l, p) * 2 - p;\n}\nPoint getLL(Line l1, Line l2) {//Intersection Point of Line l1,l2\n    db w1 = cross(l2.s, l1.s, l2.e), w2 = cross(l2.s, l2.e, l1.e); return (l1.s * w2 + l1.e * w1) / (w1 + w2);\n}\ndb disSP(Line l, Point p) {\n    Point p2 = project(l, p);\n    if (inmid(l.s,l.e,p2)) return p.dis(p2); else return min(p.dis(l.s), p.dis(l.e));\n}\ndb disSS(Line l1, Line l2) {\n    if (checkSS(l1, l2)) return 0;\n    return min(min(disSP(l1, l2.s), disSP(l1, l2.e)), min(disSP(l2, l1.s), disSP(l2, l1.e)));\n}\ndb area(vector<Point> A) {//Anticlockwise\n    db ans = 0;\n    for (int i = 0; i < A.size(); i++) ans += cross(A[i], A[(i + 1) % A.size()]);\n    return ans / 2;\n}\nint contain(vector<Point>A, Point p) {//2:in 1:on 0:out\n    int ans = 0; A.push_back(A[0]);\n    for (int i = 1; i < A.size(); i++) {\n        Line l = {A[i - 1], A[i]};\n        if (onS(l, p)) return 1; if (cmp(l.s.y, l.e.y) > 0) swap(l.s, l.e);\n        if (cmp(l.s.y, p.y) >= 0 || cmp(l.e.y, p.y) < 0) continue;\n        if (sign(cross(l.e, l.s, p)) < 0)ans ^= 1;\n    }\n    return ans << 1;\n}\nint main() {\n    int T; cin >> T; while (T--) {\n        Line l1, l2; l1.input(); l2.input();\n        printf(\"%.10lf\\n\", disSS(l1, l2));\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "\n#include<bits/stdc++.h>\n\ntypedef long double     lf;\n\nusing namespace std;\n\nconst lf EPS = 1e-9;\nconst lf oo = 1e15;\n\nstruct pt {\n  lf x, y;\n  pt( ) { }\n  pt( lf x, lf y ) : x( x ), y ( y ) { }\n};\n\ninline lf x( pt P ) { return P.x; }\ninline lf y( pt P ) { return P.y; }\n\nistream& operator >> ( istream& in, pt& p ) {\n  lf x,y; in >> x >> y;\n  p = pt(x,y); return in;\n}\n\nostream& operator << ( ostream& out, const pt& p ) {\n  out << double(p.x) << \" \" << double(p.y);\n  return out;\n}\n\npt operator + ( const pt& A, const pt& B ) {\n  return pt( x(A)+x(B), y(A)+y(B) );\n}\n\npt operator - ( const pt& A, const pt& B ) {\n  return pt( x(A)-x(B), y(A)-y(B) );\n}\n\n\npt operator * ( const lf& B, const pt& A ) {\n  return pt( x(A)*B, y(A)*B );\n}\n\npt operator * ( const pt& A, const lf& B ) {\n  return pt( x(A)*B, y(A)*B  );\n}\n\ninline lf dot( pt A, pt B ) {\n  return x(A)*x(B) + y(A)*y(B);\n}\n\ninline lf norm( pt A ) {\n  return x(A)*x(A) + y(A)*y(A);\n}\n\ninline lf abs( pt A ) {\n  return sqrt( norm(A) );\n}\n\ninline lf dist ( pt A, pt B ) { return abs( B - A ); }\n\nlf distToLine (pt p, pt A, pt B, pt &c) {\n  lf u = dot( p-A , B-A ) / norm( B-A );\n  c = A + u*( B-A );\n  return dist( p , c );\n}\n\npt refPoint(pt X, pt A, pt B) {\n  pt aux; distToLine(X, A, B, aux);\n  return X + lf(2.0)*(aux-X);\n}\n\ninline bool same ( lf a, lf b ) {\n  return a+EPS > b && b+EPS > a;\n}\n\ninline lf cross( pt A, pt B ) {\n  return x(A)*y(B) - y(A)*x(B);\n}\n\n///CHANGE\n// 0  for collineal points ( angle = 0 )\n// 1  for angle BAX counter clockwise\n// -1 for angle BAX clockwise\ninline int ccw (pt X, pt A, pt B) {\n  lf c = cross( B-A, X-A );\n  if( same( c, 0.0 ) ) { return 0; }\n  if( c > EPS ) { return 1; }\n  return -1;\n}\n\n///CHANGE\ninline bool segContains ( pt X, pt A, pt B) {\n  if ( !same ( 0, cross ( A-X, B-X ) ) ) return 0;\n  return ( dot ( A-X, B-X ) < EPS );\n}\n\ninline bool parallel( pt A, pt B, pt C, pt D ) {\n  return same ( 0, cross( B-A, D-C ) );\n}\n\n///NEW\ninline bool ortho( pt A, pt B, pt C, pt D ) {\n  return same ( 0, dot( B-A, D-C ) );\n}\n\ninline bool samePt ( pt A, pt B ) {\n  return same ( x(A), x(B) ) && same ( y(A), y(B) );\n}\n\npt linesIntersection ( pt A, pt B, pt C, pt D ) {\n  lf x = cross ( C, D-C ) - cross ( A, D-C );\n  x /= cross ( B-A, D-C );\n  return A + x*(B-A);\n}\n\ninline bool collinearSegsIntersects ( pt A, pt B, pt C, pt D ) {\n  return segContains(A,C,D) || segContains(B,C,D)\n      || segContains(C,A,B) || segContains(D,A,B);\n}\n\nbool segmentsIntersect(pt A, pt B, pt C, pt D) {\n  if( samePt(A,B) )\n    return segContains( A, C, D );\n  if( samePt(C,D) )\n    return segContains( C, A, B );\n  if( parallel(A,B,C,D) )\n    return collinearSegsIntersects( A,B,C,D );\n  pt aux = linesIntersection(A,B,C,D);\n  return segContains(aux,A,B) && segContains(aux,C,D);\n}\n\n/// --------------------------------------------\n\nlf distToSegment(pt p, pt A, pt B, pt &c) {\n  lf u = dot( p-A , B-A ) / norm( B-A );\n  if( u < -EPS ) { c = A; return dist( p , A ); }\n  if( (u-1.0) > EPS ) { c = B; return dist( p, B ); }\n  return distToLine(p,A,B,c);\n}\n\nint n;\n\nint main() {\n  ios_base::sync_with_stdio(0);\n  cin.tie(0);\n  cout << fixed << setprecision(10);\n\n  cin >> n;\n  for( int i = 0; i < n; ++i ) {\n    pt A,B,C,D, aux;\n    cin >> A >> B >> C >> D;\n    lf ans = oo;\n    if( segmentsIntersect( A, B, C, D ) ) {\n      ans = 0.0;\n    }\n    ans = min( ans, distToSegment( C, A, B, aux ) );\n    ans = min( ans, distToSegment( D, A, B, aux ) );\n    ans = min( ans, distToSegment( A, C, D, aux ) );\n    ans = min( ans, distToSegment( B, C, D, aux ) );\n    cout << double(ans) << '\\n';\n  }\n}"
  },
  {
    "language": "C++",
    "code": "// 射影　正射影ベクトル\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<stack>\n#include<algorithm>\n#include<iostream>\n#include<cmath>\n#include<vector>\n\n#include<queue>\n\nusing namespace std;\n\n// 浮動小数点のゼロ判定\n#define EPS (1e-10)\n#define equals(a, b) ( fabs((a) - (b)) < EPS )\n\n// 点を表すクラス\nclass Point\n{\n    public:\n        double x, y;\n        // コンストラクタ\n        Point(double x = 0.0, double y = 0.0) : x(x), y(y){ }\n\n        // -----▼▼▼ 演算子のオーバーロード ▼▼▼-----\n\n        Point operator + (Point &p)\n        {\n            return Point(x + p.x, y + p.y);\n        }\n\n        Point operator - (Point &p)\n        {\n            return Point(x - p.x, y - p.y);\n        }\n\n        Point operator * (double a)\n        {\n            return Point(a * x, a * y);\n        }\n\n        Point operator / (double a)\n        {\n            return Point(x / a, y / a);\n        }\n\n        bool operator < ( const Point &p) const\n        {\n            return x != p.x ? x < p.x : y < p.y;\n        }\n\n        bool operator == ( const Point &p) const\n        {\n            return fabs(x - p.x) < EPS && fabs(y -p.y) < EPS;\n        }\n\n        // -----▲▲▲ 演算子のオーバーロード ▲▲▲-----\n\n        // 2点間の距離\n        double distance()\n        {\n            return sqrt( norm() );\n        }\n\n        double norm()\n        {\n            return ( x * x ) + ( y * y );\n        }\n};\n\n// 線分を表すクラス\nclass Segment\n{\n    public:\n        Point p1, p2;\n        // コンストラクタ\n        Segment(Point p1, Point p2) : p1(p1), p2(p2){ }\n};\n\n// 点とベクトルの表現は同じ\ntypedef Point Vector;\n// 線分と直線の表現は同じ\ntypedef Segment Line;\n\ndouble dot(Vector a, Vector b);\ndouble cross(Vector a, Vector b);\ndouble cross_point(double x1, double y1, double x2, double y2, double xp, double yp);\nVector projection(Vector a, Vector b, Vector p);\ndouble getDistanceLP(Line l, Point p);\n\nint main(void)\n{\n    int q;\n    Point p1, p2, p3, p4, p;\n    Vector v1, v2, v3, v4;\n    double min_d;\n\n    cin >> q;\n\n    for(int i = 0; i < q; i++)\n    {\n        // 線分を求める\n        cin >> p1.x >> p1.y >> p2.x >> p2.y;\n        Line line_1(p1, p2);\n\n        cin >> p3.x >> p3.y >> p4.x >> p4.y;\n        Line line_2(p3, p4);\n\n        v1 = p2 - p1;\n        v2 = p3 - p4;\n\n        if( ( cross_point(p1.x, p1.y, p2.x, p2.y, p3.x, p3.y) * cross_point(p1.x, p1.y, p2.x, p2.y, p4.x, p4.y) < -EPS )\n                    && ( cross_point(p3.x, p3.y, p4.x, p4.y, p1.x, p1.y) * cross_point(p3.x, p3.y, p4.x, p4.y, p2.x, p2.y) < -EPS ) )\n        {\n        \tmin_d = 0.0000000;\n        }\n        else\n        {\n            min_d = min(min(getDistanceLP(line_1,line_2.p1),getDistanceLP(line_1,line_2.p2)),\n                min(getDistanceLP(line_2,line_1.p1),getDistanceLP(line_2,line_1.p2)));\n        }\n\n        // 距離を求める\n         printf(\"%.10lf\\n\", min_d);\n    }\n\n    return 0;\n}\n\n// 内積の計算をする関数\ndouble dot(Vector a, Vector b)\n{\n    return ( ( a.x * b.x ) + ( a.y * b.y ) );\n}\n\n// 外積の計算をする関数\ndouble cross(Vector a, Vector b)\n{\n    return ( ( a.x * b.y ) - ( a.y * b.x ) );\n}\n\n// 外積の計算をする関数 2\ndouble cross_point(double x1, double y1, double x2, double y2, double xp, double yp)\n{\n    return ( x2 - x1 ) * ( yp - y1 ) - ( xp - x1 ) * ( y2 - y1 );\n}\n\n// 正射影ベクトルを求める関数\nVector projection(Vector a, Vector b, Vector p)\n{\n    // 正射影ベクトルの考え方より\n    // 正射影ベクトル = ( ( a, bベクトルの内積 ) / aベクトルの大きさの2乗 ) * aベクトル\n    return ( ( a * ( dot(a, b) / pow( a.distance(), 2.0 ) ) ) + p );\n}\n\n// 点と直線の距離を求める関数\ndouble getDistanceLP(Line l, Point p)\n{\n    if( dot( l.p2 - l.p1, p - l.p1 ) < 0.0 )\n    {\n        return ( p - l.p1).distance();\n    }\n\n    if( dot( l.p1 - l.p2, p - l.p2 ) < 0.0 )\n    {\n        return ( p - l.p2).distance();\n    }\n\n    return abs( cross(l.p2 - l.p1, p - l.p1) / (l.p2 - l.p1).distance() );\n}\n\n"
  },
  {
    "language": "C++",
    "code": "//#define _GLIBCXX_DEBUG\n#include <bits/stdc++.h>\n#define rep(i, n) for(int i=0; i<n; ++i)\nusing namespace std;\n\nconst double EPS = 1e-10;\ndouble add(double a, double b) {\n    if(abs(a+b) < EPS*(abs(a)+abs(b))) return 0;\n    return a+b;\n}\nstruct Vector {\n    double x, y;\n    Vector() {}\n    Vector(double x, double y):x(x), y(y) {}\n    Vector operator+(Vector v) {return Vector(add(x, v.x), add(y, v.y));}\n    Vector operator-(Vector v) {return Vector(add(x, -v.x), add(y, -v.y));}\n    Vector operator*(double d) {return Vector(x*d, y*d);}\n    Vector operator/(double d) {return Vector(x/d, y/d);}\n    double dot(Vector v) {return add(x*v.x, y*v.y);}\n    double cross(Vector v) {return add(x*v.y, -y*v.x);}\n};\nistream &operator>>(istream &is, Vector &v) {return is >> v.x >> v.y;}\nostream &operator<<(ostream &os, const Vector &v) {return os << v.x << ' ' << v.y;}\ndouble sqdist(Vector &v, const Vector &u) {return (v-u).dot(v-u);}\n//線分v2-v1上にあるか\nbool on_seg(Vector &v1,Vector &v2, const Vector &p) {\n    return (v1-p).cross(v2-p) == 0 && (v1-p).dot(v2-p) <= 0;\n}\n//v1-v2とu1-u2の交点\nVector intersection(Vector &v1,Vector &v2,Vector &u1,Vector &u2) {\n    assert((v1-v2).cross(u1-u2)); //2直線が平行だとだめ\n    return v1 + (v2-v1)*((u2-u1).cross(u1-v1)/(u2-u1).cross(v2-v1));\n}\n//p2-p1へのQの投影\nVector projection(Vector &p1,Vector &p2,Vector &Q) {\n    return p1+(p2-p1)*(Q-p1).dot(p2-p1)/sqdist(p1, p2);\n}\n//p1-p2を軸としたQの線対称移動\nVector reflection(Vector &p1,Vector &p2,Vector &Q) {\n    return projection(p1, p2, Q)*2-Q;\n}\nbool cmp_x(const Vector &v, const Vector &u) {\n    if(v.x != u.x) return v.x < u.x;\n    return v.y < u.y;\n}\n//頂点数nの頂点集合vv\nvector<Vector> convex_hull(vector<Vector> &vv, int n) {\n    sort(vv.begin(), vv.end(), cmp_x);\n    int k = 0;\n    vector<Vector> res(n*2);\n    for(int i = 0; i < n; i++) {\n        while(k > 1 && (res[k-1]-res[k-2]).cross(vv[i]-res[k-1]) <= 0) k--;\n        res[k++] = vv[i];\n    }\n    for(int i = n-2, t = k; i >= 0; i--) {\n        while(k > t && (res[k-1]-res[k-2]).cross(vv[i]-res[k-1]) <= 0) k--;\n        res[k++] = vv[i];\n    }\n    res.resize(k-1);\n    return res;\n}\n//点と線の距離\ndouble distpl(Vector &p0, Vector &p1, Vector &Q) {\n    Vector pp = projection(p0, p1, Q);\n    return sqrt(sqdist(pp, Q));\n}\n//線分と線分の距離\ndouble distss(Vector &p0, Vector &p1, Vector &p2, Vector &p3) {\n    if((p0-p1).cross(p2-p3) != 0) {\n        Vector p = intersection(p0, p1, p2, p3);\n        if(on_seg(p0, p1, p) and on_seg(p2, p3, p)) {\n            return 0.0;\n        }\n    }\n    double res = min({sqdist(p0, p2), sqdist(p0, p3), sqdist(p1, p2), sqdist(p1, p3)});\n    Vector pp0, pp1, pp2, pp3;\n    pp2 = projection(p0, p1, p2);\n    pp3 = projection(p0, p1, p3);\n    pp0 = projection(p2, p3, p0);\n    pp1 = projection(p2, p3, p1);\n    if(on_seg(p0, p1, pp2)) res = min(res, sqdist(pp2, p2));\n    if(on_seg(p0, p1, pp3)) res = min(res, sqdist(pp3, p3));\n    if(on_seg(p2, p3, pp0)) res = min(res, sqdist(pp0, p0));\n    if(on_seg(p2, p3, pp1)) res = min(res, sqdist(pp1, p1));\n    res = sqrt(res);\n    return res;\n}\n\nsigned main() {\n    cout << fixed << setprecision(13);\n    Vector p0, p1, p2, p3;\n    int q;\n    cin >> q;\n    while(q--) {\n        cin >> p0 >> p1 >> p2 >> p3;\n        cout << distss(p0, p1, p2, p3) << endl;\n    }\n\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef pair<ll, ll> lpair;\nconst ll MOD = 1e9 + 7;\nconst ll INF = 1e18;\n#define rep(i,m,n) for(ll i = (m); i < (n); i++)\n#define rrep(i,m,n) for(ll i = (m); i >= (n); i--)\n#define print(x) cout << (x) << endl;\n#define print2(x,y) cout << (x) << \" \" << (y) << endl;\n#define printa(x,n) for(ll i = 0; i < n; i++){ cout << (x[i]) << \" \";} cout<<endl;\n\n#define EPS (1e-10)\n#define EQ(a,b) (abs((a) - (b)) < EPS)\ntypedef complex<double> P;\ndouble dot(P a, P b){ //内積\n    return (a.real() * b.real() + a.imag() * b.imag());\n}\n\ndouble cross(P a, P b){ //外積\n    return (a.real() * b.imag() - a.imag() * b.real());\n}\n\nbool is_orth(P a1, P a2, P b1, P b2){ //垂直か\n    return EQ(dot(a1 - a2, b1 - b2), 0.0);\n}\n\nbool is_para(P a1, P a2, P b1, P b2){ //平行か\n    return EQ(cross(a1 - a2, b1 - b2), 0.0);\n}\n\nbool is_online(P a, P b, P c){ //cが線分上か\n    return (abs(a-c) + abs(c-b) < abs(a-b) + EPS);\n}\n\nbool distance_lp(P a, P b, P c){ //直線abと点cの距離\n    return abs(cross(b-a, c-a)) / abs(b-a);\n}\n\ndouble norm(P a){\n  return a.real() * a.real() +a.imag() *a.imag();\n}\n\nll ccw(P p0,P p1,P p2){\n  P a = p1-p0;\n  P b = p2-p0;\n  if(cross(a,b) > EPS) return 1;\n  if(cross(a,b) < -EPS) return -1;\n  if(dot(a,b) < -EPS) return 2;\n  if(abs(a) < abs(b)) return -2;\n  return 0;\n}\n\nbool is_intersect(P p1, P p2, P p3, P p4){\n  return (ccw(p1,p2,p3) * ccw(p1,p2,p4) <= 0 &&\n      ccw(p3,p4,p1) * ccw(p3,p4,p2) <= 0 );\n}\n\nP intersect_pos(P a1, P a2, P b1, P b2){ //直線同士の交点\n    P a = a2 - a1;\n    P b = b2 - b1;\n    return a1 + a * cross(b, b1 - a1) / cross(b, a);\n}\n\ndouble getDistanceLP(P a1, P a2, P b){\n    return abs(cross(a2-a1, b-a1) / abs(a2 - a1));\n}\n\ndouble getDistanceSP(P a1, P a2, P b){\n    if(dot(a2 - a1, b - a1) < EPS) return abs(b - a1);\n    if(dot(a1 - a2, b - a2) < EPS) return abs(b - a2);\n    return getDistanceLP(a1, a2, b);\n}\ndouble getDistance(P a1, P a2, P b1, P b2){\n    if(is_intersect(a1, a2, b1, b2)) return 0.0;\n    double v1 = min(getDistanceSP(a1, a2, b1), getDistanceSP(a1, a2, b2));\n    double v2 = min(getDistanceSP(b1, b2, a1), getDistanceSP(b1, b2, a2));\n    return min(v1,v2);\n}\n\n#define printP(P) cout << \"(\" << P.real() << \", \" << P.imag() << \")\" << endl;\n\n\n\n\nint main(){\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    ll q;\n    cin >> q;\n    while(q--){\n        double x0, y0, x1, y1, x2, y2, x3, y3;\n        cin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n        P p0(x0,y0), p1(x1, y1), p2(x2, y2), p3(x3, y3);\n        double ans = getDistance(p0, p1, p2, p3);\n        cout << setprecision(16) << ans << endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n\nusing namespace std;\n\n// 2次元ベクトルクラス\nclass Vector {\npublic:\n    double x, y;\n    \n    // コンストラクタ\n    Vector() {\n        x = 0.0;\n        y = 0.0;\n    }\n    \n    // コンストラクタ(引数あり)\n    Vector(double nx, double ny) {\n        x = nx;\n        y = ny;\n    }\n    \n    // x,y成分を設定する\n    void set(double nx, double ny) {\n        x = nx;\n        y = ny;\n    }\n    \n    // 内積を求める\n    double dot(const Vector& vec) const {\n        return x * vec.x + y * vec.y;\n    }\n    \n    // 外積を求める\n    double cross(const Vector& vec) const {\n        return x * vec.y - y * vec.x;\n    }\n    \n    // 余弦を求める\n    double getCos(const Vector& vec) const {\n        double nor = norm() * vec.norm();\n        if (nor == 0.0) {\n            return 0.0;\n        } else {\n            return dot(vec) / nor;\n        }\n    }\n    \n    // ベクトルの大きさを求める\n    double norm() const {\n        return sqrt(x * x + y * y);\n    }\n    \n    // 単位ベクトルを返す\n    Vector getUnit() const {\n        Vector v;\n        double n = norm();\n        if (n == 0.0) {\n            v.set(0.0, 0.0);\n        } else {\n            v.set(x / n, y / n);\n        }\n        return v;\n    }\n    \n    void operator = (const Vector& vec) {\n        x = vec.x;\n        y = vec.y;\n    }\n    \n    Vector operator + (const Vector& vec) const {\n        Vector v(x + vec.x, y + vec.y);\n        return v;\n    }\n    \n    Vector operator - (const Vector& vec) const {\n        Vector v(x - vec.x, y - vec.y);\n        return v;\n    }\n    \n    Vector operator * (const Vector& vec) const {\n        Vector v(x * vec.x, y * vec.y);\n        return v;\n    }\n    \n    Vector operator * (double f) const {\n        Vector v(x * f, y * f);\n        return v;\n    }\n    \n    Vector operator / (const Vector& vec) const {\n        Vector v;\n        if (vec.x == 0.0) {\n            v.x = 0.0;\n        } else {\n            v.x = x / vec.x;\n        }\n        \n        if (vec.y == 0.0) {\n            v.y = 0.0;\n        } else {\n            v.y = y / vec.y;\n        }\n        return v;\n    }\n    \n    Vector operator / (double f) const {\n        Vector v;\n        if (f == 0.0) {\n            v.set(0.0, 0.0);\n        } else {\n            v.set(x / f, y / f);\n        }\n        return v;\n    }\n    \n    void operator += (const Vector& vec) {\n        x += vec.x;\n        y += vec.y;\n    }\n    \n    void operator -= (const Vector& vec) {\n        x -= vec.x;\n        y -= vec.y;\n    }\n    \n    void operator *= (const Vector& vec) {\n        x *= vec.x;\n        y *= vec.y;\n    }\n    \n    void operator /= (const Vector& vec) {\n        if (vec.x == 0.0) {\n            x = 0.0;\n        } else {\n            x /= vec.x;\n        }\n        \n        if (vec.y == 0.0) {\n            y = 0.0;\n        } else {\n            y /= vec.y;\n        }\n    }\n    \n    bool operator == (const Vector& vec) const {\n        if (x == vec.x && y == vec.y) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n};\n\n// ベクトル1をベクトル2に正射影したベクトルを求める\nstatic Vector getProjection(const Vector& vec1, const Vector& vec2) {\n    Vector vec(vec2.getUnit() * vec1.norm() * vec1.getCos(vec2));\n    return vec;\n}\n\n\nclass LineSegment {\nprivate:\n    Vector start; // 始点\n    Vector end; // 終点\n    \npublic:\n    //コンストラクタ\n    LineSegment () {}\n    \n    // 始点と終点を設定する\n    void setStartEnd(double sx, double sy, double ex, double ey) {\n        start.set(sx, sy);\n        end.set(ex, ey);\n    }\n    \n    // 始点を取得する\n    Vector getStart() const {\n        return start;\n    }\n    \n    //　終点を取得する\n    Vector getEnd() const {\n        return end;\n    }\n    \n    // 指定の線分を含むか\n    // このメソッドは線分同士が平行の時しか使用しない\n    bool isInLine(const LineSegment& l) const {\n        bool b1 = isPointInLine(l.getStart());\n        bool b2 = isPointInLine(l.getEnd());\n        if (b1 || b2) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    \n    // 指定の点を線分の中に含むか\n    bool isPointInLine(const Vector& p) const {\n        if (start == p) {\n            return true;\n        }\n        \n        Vector l1 = end - start;\n        Vector l2 = p - start;\n        Vector u1 = l1.getUnit();\n        Vector u2 = l2.getUnit();\n\n        if (u1 == u2 && l2.norm() <= l1.norm()) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    \n    // 指定の線分と交差しているか\n    // @return 0(交差していない), 1(交差している)\n    int isCross(const LineSegment& l) const {\n        Vector l1 = end - start;\n        double c1 = l1.cross(l.getStart() - start);\n        double c2 = l1.cross(l.getEnd() - start);\n        \n        Vector l2 = l.getEnd() - l.getStart();\n        double c3 = l2.cross(start - l.getStart());\n        double c4 = l2.cross(end - l.getStart());\n        \n        if (c1 * c2 == 0.0 && c3 * c4 == 0.0) { // 平行のとき\n            LineSegment ls;\n            ls.setStartEnd(start.x, start.y, end.x, end.y);\n            if (isInLine(l) || l.isInLine(ls)) {\n                return 1;\n            }\n            return 0;\n        } else if ((c1 * c2 < 0.0 && c3 * c4 <= 0.0)\n                   || (c1 * c2 <= 0.0 && c3 * c4 < 0.0)\n                   || (c1 * c2 < 0.0 && c3 * c4 < 0.0)) { // 交差するとき\n            return 1;\n        } else { // 交差しないとき\n            return 0;\n        }\n    }\n    \n    // 任意の点が線分の始点より外にあるか\n    bool isOutOfStart(const Vector& vec) const {\n        Vector p = end - start;\n        Vector q = vec - start;\n        double d = p.dot(q);\n        if (d < 0) { // 内積が負のとき\n            return true;\n        }\n        return false;\n    }\n    \n    // 任意の線分との距離を求める\n    double getDistance(const LineSegment& l) const {\n        if (isCross(l)) { // 交差しているとき\n            return 0.0;\n        }\n        double dis1 = getDistance(l.getStart());\n        double dis2 = getDistance(l.getEnd());\n        LineSegment ls;\n        ls.setStartEnd(start.x, start.y, end.x, end.y);\n        double dis3 = l.getDistance(ls.getStart());\n        double dis4 = l.getDistance(ls.getEnd());\n        double min1 = min(dis1, dis2);\n        double min2 = min(dis3, dis4);\n        return min(min1, min2);\n    }\n    \n    // 任意の点との距離を求める\n    double getDistance(const Vector& vec) const {\n        if (isPointInLine(vec)) { // 線分内に点を含むとき\n            return 0.0;\n        }\n        if (!isOutOfStart(vec)) { // 線分の始点より内側に点があるとき\n            Vector p = end - start;\n            Vector q = vec - start;\n            Vector proj = getProjection(q, p);\n            if (p.norm() > proj.norm()) { // 正射影したベクトルが線分より短いとき\n                return (q - proj).norm();\n            } else { // 正射影したベクトルが線分と等しいか、長いとき\n                return (vec - end).norm();\n            }\n        } else { // 線分の始点より外にあるとき\n            return (vec - start).norm();\n        }\n    }\n};\n\nint main() {\n    int n;\n    cin >> n;\n    \n    LineSegment l1, l2;\n    vector<double> result;\n    for (int i = 0; i < n; i++) {\n        double sx1, sy1, ex1, ey1, sx2, sy2, ex2, ey2;\n        cin >> sx1 >> sy1 >> ex1 >> ey1 >> sx2 >> sy2 >> ex2 >> ey2;\n        l1.setStartEnd(sx1, sy1, ex1, ey1);\n        l2.setStartEnd(sx2, sy2, ex2, ey2);\n        result.push_back(l1.getDistance(l2));\n    }\n    \n    for (int i = 0; i < result.size(); i++) {\n        printf(\"%.10f\\n\", result[i]);\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define SIZE 300005\n#define MOD 1000000007LL\n#define INF 1 << 29\n#define LLINF 1LL << 60\n#define REP(i,n) for(int i=0;i<n;i++)\n#define FOR(i,a,b) for(int i=a;i<=b;i++)\n#define DOWN(i,b,a) for(int i=b;i>=a;i--)\n#define SET(a,c) memset(a,c,sizeof a)\n#define BIT(i,j) ((i)>>(j))&1\n#define ALL(o) (o).begin(), (o).end()\n#define ERASE(o) (o).erase(unique((o).begin(),(o).end()), (o).end())\n#define SQ(x) ((x)*(x))\nusing namespace std;\ntypedef long long ll;\ntypedef pair<ll,ll> Pll;\ntypedef pair<int, int> Pii;\ntypedef pair<double, double> Pdd;\ntypedef complex<double> dcomplex;\ntemplate<typename T> inline void priv(vector<T>a){REP(i,a.size()){cerr<<a[i]<<((i==a.size()-1)?\"\\n\":\" \");}}\nll gcd(ll a,ll b){int c=max(a,b);int d=min(a,b);return c==0||d==0?c:gcd(c%d,d);}\nll lcm(ll a,ll b){return a==0||b==0?0:a*b/gcd(a,b);}\nll fact(ll a){ll b=1;FOR(i,1,a)b*=i;return b;}\n\nclass P\n{\npublic:\n  double x,y;\n  P(){};P(double x,double y):x(x),y(y){};\n  P operator+(const P&q){P t;t.x=x+q.x;t.y=y+q.y;return t;}\n  P operator+=(const P&q){x+=q.x;y+=q.y;return *this;}\n  P operator-(const P&q){P t;t.x=x-q.x;t.y=y-q.y;return t;}\n  P operator-=(const P&q){x-=q.x;y-=q.y;return *this;}\n  template<typename T> P operator*(T d){return P(x*d,y*d);}\n  template<typename T> P operator*=(T d){x*=d;y*=d;return *this;}\n  template<typename T> P operator/(T d){return P(x/d,y/d);}\n  template<typename T> P operator/=(T d){x/=d;y/=d;return *this;}\n  bool operator<(const P&q){return (x!=q.x)?(x<q.x):(y<q.y);}\n  bool operator>(const P&q){return (x!=q.x)?(x>q.x):(y>q.y);}\n  double norm(void){return sqrt(x*x+y*y);}\n  double arg(void){return acos(x/this->norm())*P(1,0).sign(*this);}\n  P rotate(double t){double c=cos(t),s=sin(t);return P(c*x-s*y,s*x+c*y);}\n  P nvec(void){return P(y,-x);}\n  P reverseX(void){return P(-x,y);}\n  P reverseY(void){return P(x,-y);}\n  P unit(void){return (*this).norm()==0?P(0,0):(*this)/(*this).norm();}\n  P floor(void){return P((int)x,(int)y);}\n  double dot(const P&q){return x*q.x+y*q.y;}\n  double det(const P&q){return x*q.y-y*q.x;}\n  int sign(const P&q){double d = (*this).det(q); return (d>0)-(d<0);}\n  static bool on_seg(P p1,P p2,P q){return (p1-q).det(p2-q)==0&&(p1-q).dot(p2-q)<=0;}\n  static P intersection(P p1,P p2,P q1,P q2){return p1+(p2-p1)*((q2-q1).det(q1-p1)/(q2-q1).det(p2-p1));}\n  static bool crossing(P p1,P p2,P q1,P q2)\n  {\n    if((p2-p1).sign(q2-q1)==0) return on_seg(p1,p2,q1)||on_seg(p1,p2,q2)||on_seg(q1,q2,p1)||on_seg(q1,q2,p2);\n    double x=(q2-q1).det(q1-p1)/(q2-q1).det(p2-p1);\n    double y=(p2-p1).det(p1-q1)/(p2-p1).det(q2-q1);\n    return x<=1 && x>=0 && y<=1 && y>=0;\n  }\n};\n\nint main()\n{\n  int q; cin >> q;\n  REP(i,q)\n  {\n    double ans,x0,y0,x1,y1,x2,y2,x3,y3;\n    cin>>x0>>y0>>x1>>y1>>x2>>y2>>x3>>y3;\n    P p0 = P(x0,y0);\n    P p1 = P(x1,y1);\n    P p2 = P(x2,y2);\n    P p3 = P(x3,y3);\n    P nu = (p1-p0).nvec();\n    P nv = (p3-p2).nvec();\n    P q0 = P::intersection(p2,p3,p0,p0+nv);\n    P q1 = P::intersection(p2,p3,p1,p1+nv);\n    P q2 = P::intersection(p0,p1,p2,p2+nu);\n    P q3 = P::intersection(p0,p1,p3,p3+nu);\n    if(P::crossing(p0,p1,p2,p3)) ans = 0.0;\n    else\n    {\n      double d0,d1,d2,d3;\n      d0 = (p2-p0).norm();\n      d1 = (p2-p1).norm();\n      d2 = (p3-p0).norm();\n      d3 = (p3-p1).norm();\n      double e0,e1,e2,e3;\n      e0 = P::on_seg(p2,p3,q0) ? (q0-p0).norm() : 1e30;\n      e1 = P::on_seg(p2,p3,q1) ? (q1-p1).norm() : 1e30;\n      e2 = P::on_seg(p0,p1,q2) ? (q2-p2).norm() : 1e30;\n      e3 = P::on_seg(p0,p1,q3) ? (q3-p3).norm() : 1e30;\n      ans = min({d0,d1,d2,d3,e0,e1,e2,e3});\n    }\n    printf(\"%.10lf\\n\",ans);\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <string>\n#include <cstdio>\n#include <algorithm>\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\nusing namespace std;\n\n//点を表す構造体\nclass Point{\npublic:\n  double x, y;\n\n  Point(double x=0, double y=0){\n    this->x = x;\n    this->y = y;\n  }\n\n  Point operator+(const Point &seg2){\n    return Point(x+seg2.x, y+seg2.y);\n  }\n\n  Point operator-(const Point &seg2){\n    return Point(x-seg2.x, y-seg2.y);\n  }\n\n  Point operator*(const double k){\n    return Point(x*k, y*k);\n  }\n\n  Point &operator=(const Point &p){\n    x = p.x;\n    y = p.y;\n    return *this;\n  }\n\n  bool operator < (const Point &p) const{\n    return x != p.x? x<p.x : y<p.y;\n  }\n\n  bool operator == (const Point &p) const{\n    return equals(x, p.x) && equals(y, p.y);\n  }\n};\n\n//ベクトルを点の別表記でも表せるようにしておく\nclass Vector : public Point{\npublic:\n  Vector() : Point() {}\n\n  Vector(double x, double y) : Point(x, y) {}\n\n  Vector(Point p) : Point(){\n    x = p.x;\n    y = p.y;\n  }\n\n  double norm(){\n    return x*x + y*y;\n  }\n\n  double abs(){\n    return sqrt(norm());\n  }\n\n  static double dot(Vector a, Vector b){\n    return a.x*b.x + a.y*b.y;\n  }\n\n  static double cross(Vector a, Vector b){\n    return a.x*b.y - a.y*b.x;\n  }\n\n  static bool isOrthogonal(Vector a, Vector b){\n    return equals(dot(a, b), 0.0);\n  }\n\n  static bool isParallel(Vector a, Vector b){\n    return equals(cross(a, b), 0.0);\n  }\n};\n\n//線分(ベクトルを用いて)を表す構造体。両端の点が定義されている点に注意\nclass Segment{\npublic:\n  Point p1, p2;\n\n  Segment(Point p1, Point p2){\n    this->p1 = p1;\n    this->p2 = p2;\n    x = p2.x-p1.x;\n    y = p2.y-p1.y;\n  }\n\n  static bool isOrthogonal(Segment a, Segment b){\n    return equals(dot(a, b), 0.0);\n  }\n\n  static bool isParallel(Segment a, Segment b){\n    return equals(cross(a, b), 0.0);\n  }\n\nprivate:\n  int x, y;\n  static double dot(Segment a, Segment b){\n    return a.x*b.x + a.y*b.y;\n  }\n\n  static double cross(Segment a, Segment b){\n    return a.x*b.y - a.y*b.x;\n  }\n};\n\ntypedef Segment Line;\n\nclass Circle{\npublic:\n  Point c;\n  double r;\n  Circle(Point c = Point(), double r = 0.0): c(c), r(r){}\n};\n\nstring ccw_str(Point p0, Point p1, Point p2){\n  //enum res {COUNTER_CLOCKWISE=0, CLOCKWISE, ONLINE_BACK, ONLINE_FRONT, ON_SEGMENT};\n  Vector a = p1-p0;\n  Vector b = p2-p0;\n  if(Vector::cross(a, b) > EPS) return \"COUNTER_CLOCKWISE\";\n  if(Vector::cross(a, b) < -EPS) return \"CLOCKWISE\";\n  if(Vector::dot(a, b) < -EPS) return \"ONLINE_BACK\";\n  if(a.norm() < b.norm()) return \"ONLINE_FRONT\";\n  return \"ON_SEGMENT\";\n}\n\nint ccw_int(Point p0, Point p1, Point p2){\n  enum res {COUNTER_CLOCKWISE=-1, CLOCKWISE=1, ONLINE_BACK=2, ONLINE_FRONT=-2, ON_SEGMENT=0};\n  Vector a = p1-p0;\n  Vector b = p2-p0;\n  if(Vector::cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n  if(Vector::cross(a, b) < -EPS) return CLOCKWISE;\n  if(Vector::dot(a, b) < -EPS) return ONLINE_BACK;\n  if(a.norm() < b.norm()) return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\n\nPoint project(Segment s, Point p){\n  Vector base = s.p2-s.p1;\n  double r = Vector::dot(p - s.p1, base) / base.norm();\n  return s.p1 + base*r;\n}\n\nPoint reflect(Segment s, Point p){\n  Point pro = project(s, p);\n  return p + (pro-p)*2.0;\n}\n\nbool intersect(Point p1, Point p2, Point p3, Point p4){\n  return ccw_int(p1, p2, p3)*ccw_int(p1, p2, p4)<=0 && ccw_int(p3, p4, p1)*ccw_int(p3, p4, p2)<=0;\n}\n\nbool intersect(Segment s1, Segment s2){\n  return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\nPoint crossPoint(Point p1, Point p2, Point p3, Point p4){\n  Vector base = p2-p1;\n  double d1 = fabs(Vector::cross(base, p4-p1))/fabs(base.abs());\n  double d2 = fabs(Vector::cross(base, p3-p1))/fabs(base.abs());\n  double t = d1/(d1+d2);\n  Point x = p4 + (p3-p4)*t;\n  return x;\n}\n\ndouble distance(Point p1, Point p2){\n  Vector base=p2-p1;\n  return base.abs();\n}\n\ndouble distance(Point p, Segment s){\n  double dot1, dot2;\n  Vector base = s.p2-s.p1;\n  dot1 = Vector::dot(base, p-s.p1);\n  dot2 = Vector::dot(base*(-1.0), p-s.p2);\n\n  double ans;\n  if(dot1<-EPS) ans = distance(s.p1, p);\n  else if(dot2<-EPS) ans = distance(s.p2, p);\n  else ans = fabs(Vector::cross(p-s.p1, base))/base.abs();\n  \n  return ans;\n}\n\ndouble distance(Segment s1, Segment s2){\n  double ans;\n  if(intersect(s1, s2)) ans = 0.0;\n  else {\n    ans = min(min(distance(s1.p1, s2), distance(s1.p2, s2)),\n                  min(distance(s2.p1, s1), distance(s2.p2, s1)));\n  }\n  return ans;\n}\n\nint main(){\n  int q; cin >> q;\n\n  double q1_x, q1_y, q2_x, q2_y, q3_x, q3_y, q4_x, q4_y;\n  for(int i=0; i<q; i++){\n    cin >> q1_x >> q1_y >> q2_x >> q2_y >> q3_x >> q3_y >> q4_x >> q4_y;\n    Point p1(q1_x, q2_y), p2(q2_x, q2_y), p3(q3_x, q3_y), p4(q4_x, q4_y);\n    Segment s1(p1, p2), s2(p3, p4);\n    printf(\"%.10lf\\n\", distance(s1, s2));\n  }\n\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <iostream>\n#include <iomanip>\n#include <algorithm>\n\nusing namespace std;\n\nconst double kEps = 1e-10;\nconst double kInf = 1e15;\n\nint dcmp(double x) {\n  if (fabs(x) < kEps) return 0;\n  return x < 0 ? -1 : 1;\n}\n\nstruct Vector {\n  double x, y;\n  Vector() {}\n  Vector(double x, double y): x(x), y(y) {}\n  // Vector(const Point & p1, const Point & p2): x(p2.x - p1.x), y(p2.y - p1.y) {}\n  Vector(const Vector & v);\n\n  double Norm() const { return hypot(x, y); }\n  double NormSquared() const { return x * x + y * y; }\n  Vector Normalize() const {\n    return *this / this->Norm();\n  }\n  Vector operator-() const {\n    return Vector(-x, -y);\n  }\n  Vector operator+(const Vector & rhs) const {\n    return Vector(x + rhs.x, y + rhs.y);\n  }\n  Vector operator-(const Vector & rhs) const {\n    return *this + (-rhs);\n  }\n  Vector operator*(const double rhs) const {\n    return Vector(rhs * x, rhs * y);\n  }\n  Vector operator/(const double rhs) const {\n    return *this * (1.0 / rhs);\n  }\n  double Dot(const Vector & rhs) const {\n    return x * rhs.x + y * rhs.y;\n  }\n  double Cross(const Vector & rhs) const {\n    return x * rhs.y - y * rhs.x;\n  }\n  bool operator==(const Vector & rhs) const {\n    return dcmp(x - rhs.x) == 0 && dcmp(y - rhs.y) == 0;\n  }\n  bool operator<(const Vector & rhs) const {\n    return dcmp(x - rhs.x) < 0 || (dcmp(x - rhs.x) == 0 && dcmp(y - rhs.y) < 0);\n  }\n};\n\nstruct Point {\n  Point() {}\n  Point(double x, double y): x(x), y(y) {}\n  Point(const Point & p);\n\n  double x, y;\n\n  Point operator-() {\n    return Point(-x, -y);\n  }\n  Point operator+(const Vector & rhs) const {\n    return Point(x + rhs.x, y + rhs.y);\n  }\n  Point operator-(const Vector & rhs) const {\n    return *this + (-rhs);\n  }\n  bool operator==(const Point & rhs) const {\n    return dcmp(x - rhs.x) == 0 && dcmp(y - rhs.y) == 0;\n  }\n  bool operator<(const Point & rhs) const {\n    return dcmp(x - rhs.x) < 0 || (dcmp(x - rhs.x) == 0 && dcmp(y - rhs.y) < 0);\n  }\n};\n\nstruct Line {\n  Line() {}\n  Line(const Point & p1, const Point & p2): p1(p1), p2(p2) {\n    a = p2.y - p1.y;\n    b = p1.x - p2.x;\n    c = (p2.x - p1.x) * p1.y + (p1.y - p2.y) * p1.x;\n    if (dcmp(p2.x - p1.x) == 0) {\n      k = kInf;\n    } else {\n      k = (p2.y - p1.y) / (p2.x - p1.x);\n    }\n  }\n  Line(double x1, double y1, double x2, double y2): p1(x1, y1), p2(x2, y2) {\n    a = y2 - y1;\n    b = x1 - x2;\n    c = (p2.x - p1.x) * p1.y + (p1.y - p2.y) * p1.x;\n    if (dcmp(x2 - x1) == 0) {\n      k = kInf;\n    } else {\n      k = (y2 - y1) / (x2 - x1);\n    }\n  }\n  Line(const Line & l);\n\n  Point p1, p2;\n  double a, b, c;\n  double k;\n};\n\nostream & operator<<(ostream & os, const Point & p) {\n  os << p.x << \" \" << p.y;\n  return os;\n}\n\nostream & operator<<(ostream & os, const Vector & v) {\n  os << v.x << \" \" << v.y;\n  return os;\n}\n\nostream & operator<<(ostream & os, const Line & l) {\n  os << l.p1.x << \" \" << l.p1.y << \" \" << l.p2.x << \" \" << l.p2.y;\n  return os;\n}\n\n// minus: left, plus: right, 0: colinear\nint Direction(const Point & p0, const Point & p1, const Point & p2) {\n  Vector v1(p1.x - p0.x, p1.y - p0.y);\n  Vector v2(p2.x - p0.x, p2.y - p0.y);\n  return dcmp(v2.Cross(v1));\n}\n\n// minus: back, plus: front, 0: on\nint SegmentDirection(const Point & p0, const Point & p1, const Point & p2) {\n  if (p2.x >= min(p0.x, p1.x) && p2.x <= max(p0.x, p1.x)\n      && p2.y >= min(p0.y, p1.y) && p2.y <= max(p0.y, p1.y)) { return 0; }\n  if ((p2.x - p0.x) * (p1.x - p0.x) > 0\n      || (p2.y - p0.y) * (p1.y - p0.y) > 0) { return 1; }\n  return -1;\n}\n\nbool IsIntersecting(const Line & l1, const Line & l2) {\n  auto d1 = Direction(l2.p1, l2.p2, l1.p1);\n  auto d2 = Direction(l2.p1, l2.p2, l1.p2);\n  auto d3 = Direction(l1.p1, l1.p2, l2.p1);\n  auto d4 = Direction(l1.p1, l1.p2, l2.p2);\n\n  if (d1 * d2 < 0 && d3 * d4 < 0) { return true; }\n  if (d1 == 0 && SegmentDirection(l2.p1, l2.p2, l1.p1) == 0) { return true; }\n  if (d2 == 0 && SegmentDirection(l2.p1, l2.p2, l1.p2) == 0) { return true; }\n  if (d3 == 0 && SegmentDirection(l1.p1, l1.p2, l2.p1) == 0) { return true; }\n  if (d4 == 0 && SegmentDirection(l1.p1, l1.p2, l2.p2) == 0) { return true; }\n  return false;\n}\n\ndouble Distance(const Point & p1, const Point & p2) {\n  return hypot(p2.x - p1.x, p2.y - p1.y);\n}\n\nint main(int argc, char const *argv[]) {\n  double x0, y0, x1, y1;\n  Point p0(x0, y0);\n  Point p1(x1, y1);\n\n  int q;\n  cin >> q;\n  for (unsigned i = 0; i < q; ++i) {\n    double x0, y0, x1, y1, x2, y2, x3, y3;\n    cin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n    cout << fixed << setprecision(10);\n    if (IsIntersecting(Line(x0, y0, x1, y1), Line(x2, y2, x3, y3))) {\n      cout << 0 << \"\\n\";\n    } else {\n      Point p0(x0, y0);\n      Point p1(x1, y1);\n      Point p2(x2, y2);\n      Point p3(x3, y3);\n      auto d0 = Distance(p0, p2);\n      auto d1 = Distance(p1, p2);\n      auto d2 = Distance(p0, p3);\n      auto d3 = Distance(p0, p3);\n      cout << min(d0, min(d1, min(d2, d3))) <<  \"\\n\";\n    }\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\nnamespace geometry {\n\tusing Real = double;\n\tusing Point = complex<Real>;\n\tconstexpr Real EPS = 1e-9;\n\t// 誤差を考慮した符号\n\tinline int sgn(const Real x) {\n\t\treturn (x > EPS) - (x < -EPS);\n\t}\n\t// 誤差を考慮した l - r の符号\n\tinline int sgn(const Real l, const Real r) {\n\t\treturn sgn(l - r);\n\t}\n\tstruct Circle {\n\t\tPoint p;\n\t\tReal r;\n\t\tCircle(const Point p, const Real r) : p(p), r(r) {}\n\t};\n\tstruct Line {\n\t\tPoint a, b;\n\t\tLine(const Point a, const Point b) : a(a), b(b) {}\n\t};\n\tstruct Segment : Line {\n\t\tSegment(const Point a, const Point b) : Line(a, b) {}\n\t};\n\t// 内積\n\tinline Real dot(const Point& lhs, const Point& rhs) {\n\t\treturn (conj(lhs) * rhs).real();\n\t}\n\t// 外積\n\tinline Real cross(const Point& lhs, const Point& rhs) {\n\t\treturn (conj(lhs) * rhs).imag();\n\t}\n\t// a の b に対する正射影ベクトル\n\tinline Point projection(const Point& a, const Point& b) {\n\t\treturn b * dot(a, b) / norm(b);\n\t}\n\t// 点pから直線lに下ろした垂線の足\n\tinline Point projection(const Point& p, const Line& l) {\n\t\treturn projection(p - l.a, l.b - l.a) + l.a;\n\t}\n\t// 直線lを対称軸として点pと線対称な点\n\tinline Point reflection(const Point &p, const Line &l) {\n\t\treturn p + (projection(p, l) - p) * 2.0;\n\t}\n\t// 反時計回り(a -> b -> c)\n\tstatic constexpr int CCW_COUNTER_CLOCKWISE = 0b00001;\n\t// 時計回り(a -> b -> c)\n\tstatic constexpr int CCW_CLOCKWISE = 0b00010;\n\t// 同一直線上(c -> a -> b)\n\tstatic constexpr int CCW_ONLINE_BACK = 0b00100;\n\t// 同一直線上(a -> b -> c, b on ac)\n\tstatic constexpr int CCW_ONLINE_FRONT = 0b01000;\n\t// 同一直線上(a -> c -> b)\n\tstatic constexpr int CCW_ON_SEGMENT = 0b10000;\n\t// 3点の位置関係\n\tint ccw(const Point &a, Point b, Point c) {\n\t\tb = b - a, c = c - a;\n\t\tif(cross(b, c) > EPS) return CCW_COUNTER_CLOCKWISE;\n\t\tif(cross(b, c) < -EPS) return CCW_CLOCKWISE;\n\t\tif(dot(b, c) < 0) return CCW_ONLINE_BACK;\n\t\tif(norm(b) < norm(c)) return CCW_ONLINE_FRONT;\n\t\treturn CCW_ON_SEGMENT;\n\t}\n\t// 平行判定\n\tinline bool parallel(const Line& l1, const Line& l2) {\n\t\treturn sgn(cross(l1.a - l1.b, l2.a - l2.b)) == 0;\n\t}\n\t// 直交判定\n\tinline bool orthogonal(const Line& l1, const Line& l2) {\n\t\treturn sgn(dot(l1.a - l1.b, l2.a - l2.b)) == 0;\n\t}\n\t// 直線と直線の交差判定\n\tinline bool intersect(const Line& l1, const Line& l2) {\n\t\treturn not parallel(l1, l2);\n\t}\n\t// 線分と直線の交差判定\n\tinline bool intersect(const Segment &s, const Line &l) {\n\t\tconstexpr int plus = CCW_COUNTER_CLOCKWISE | CCW_ONLINE_BACK;\n\t\tconstexpr int minus = CCW_CLOCKWISE | CCW_ONLINE_FRONT;\n\t\tint f[2] = {ccw(l.a, l.b, s.a), ccw(l.a, l.b, s.b)};\n\t\tfor(int i = 0; i < 2; ++i) {\n\t\t\tf[i] = (f[i] & plus) ? +1 : ((f[i] & minus) ? -1 : 0);\n\t\t}\n\t\treturn (f[0] * f[1] <= 0);\n\t}\n\t// 線分と線分の交差判定\n\tinline bool intersect(const Segment& s1, const Segment& s2) {\n\t\tconstexpr int plus = CCW_COUNTER_CLOCKWISE | CCW_ONLINE_BACK;\n\t\tconstexpr int minus = CCW_CLOCKWISE | CCW_ONLINE_FRONT;\n\t\tint f[4] = {ccw(s1.a, s1.b, s2.a), ccw(s1.a, s1.b, s2.b), ccw(s2.a, s2.b, s1.a), ccw(s2.a, s2.b, s1.b)};\n\t\tfor(int i = 0; i < 4; ++i) {\n\t\t\tf[i] = (f[i] & plus) ? +1 : ((f[i] & minus) ? -1 : 0);\n\t\t}\n\t\treturn (f[0] * f[1] <= 0) and (f[2] * f[3] <= 0);\n\t}\n\t// 直線と直線の交点（要：交差判定）\n\tinline Point crossPoint(const Line& l1, const Line& l2) {\n\t\tassert(intersect(l1, l2));\n\t\tPoint a = l1.b - l1.a;\n\t\tPoint b = l2.b - l2.a;\n\t\treturn l1.a + a * cross(b, l2.a - l1.a) / cross(b, a);\n\t}\n\t// 線分と線分の交点（要：交差判定）\n\tinline Point crossPoint(const Segment& s1, const Segment& s2) {\n\t\tassert(intersect(s1, s2));\n\t\treturn crossPoint((Line)s1, (Line)s2);\n\t}\n\t// 円と円の交点\n\tvector<Point> crossPoint(const Circle& c1, const Circle& c2) {\n\t\tconst Real dist = abs(c1.p - c2.p);\n\t\tvector<Point> ret;\n\t\tif(dist > c1.r + c2.r) return ret;\n\t\tif(dist < abs(c1.r - c2.r)) return ret;\n\t\tconst Real rc = (dist * dist + c1.r * c1.r - c2.r * c2.r) / (2 * dist);\n\t\tconst Real rs = sqrt(c1.r * c1.r - rc * rc);\n\t\tconst Point vec = (c2.p - c1.p) / dist;\n\t\tret.emplace_back(c1.p + vec * Point(rc, rs));\n\t\tret.emplace_back(c1.p + vec * Point(rc, -rs));\n\t\treturn ret;\n\t}\n\t// 点と点の距離\n\tinline Real distance(const Point &a, const Point &b) {\n\t\treturn abs(a - b);\n\t}\n\t// 点と直線の距離\n\tinline Real distance(const Point &p, const Line &l) {\n\t\treturn abs(p - projection(p, l));\n\t}\n\t// 点と線分の距離\n\tinline Real distance(const Point &p, const Segment &s) {\n\t\tconst Point pro = projection(p, s);\n\t\tconst Line l(p, pro);\n\t\tif(intersect(s, l)) return distance(p, pro);\n\t\treturn min(distance(p, s.a), distance(p, s.b));\n\t}\n\t// 線分と直線の距離\n\tinline Real distance(const Segment &s, const Line &l) {\n\t\tif(intersect(s, l)) return 0.0;\n\t\tReal ret = distance(s.a, l);\n\t\tret = min(ret, distance(s.b, l));\n\t\treturn ret;\n\t}\n\t// 線分と線分の距離\n\tinline Real distance(const Segment &s1, const Segment &s2) {\n\t\tif(intersect(s1, s2)) return 0.0;\n\t\tReal ret = distance(s1.a, s2);\n\t\tret = min(ret, distance(s1.b, s2));\n\t\tret = min(ret, distance(s2.a, s1));\n\t\tret = min(ret, distance(s2.b, s1));\n\t\treturn ret;\n\t}\n\tinline istream& operator>>(istream& is, Point& p) {\n\t\tReal x, y;\n\t\tis >> x >> y;\n\t\tp = Point(x, y);\n\t\treturn is;\n\t}\n\tinline ostream& operator<<(ostream& os, const Point &p) {\n\t\treturn os << fixed << setprecision(15) << p.real() << \" \" << p.imag();\n\t}\n}\n\nusing namespace geometry;\nint main() {\n\tint q; cin >> q;\n\twhile(q--) {\n\t\tPoint p[4];\n\t\tfor(int i = 0; i < 4; ++i) cin >> p[i];\n\t\tSegment s1(p[0], p[1]);\n\t\tSegment s2(p[2], p[3]);\n\t\tcout << fixed << setprecision(15) << distance(s1, s2) << '\\n';\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <algorithm>\n#include <assert.h>\n#include <complex>\n#include <utility>\n#include <vector>\n#include <string>\n#include <stack>\n#include <queue>\n#include <tuple>\n#include <cmath>\n#include <bitset>\n#include <cctype>\n#include <set>\n#include <map>\n#include <unordered_map>\n#include <numeric>\n#include <functional>\n#define _overload3(_1,_2,_3,name,...) name\n#define _rep(i,n) repi(i,0,n)\n#define repi(i,a,b) for(ll i=ll(a);i<ll(b);++i)\n#define rep(...) _overload3(__VA_ARGS__,repi,_rep,)(__VA_ARGS__)\n#define all(x) (x).begin(),(x).end()\n#define PRINT(V) cout << V << \"\\n\"\n#define SORT(V) sort((V).begin(),(V).end())\n#define RSORT(V) sort((V).rbegin(), (V).rend())\nusing namespace std;\nusing ll = long long;\ntemplate<class T>bool chmax(T &a, const T &b) { if (a<b) { a=b; return 1; } return 0; }\ntemplate<class T>bool chmin(T &a, const T &b) { if (b<a) { a=b; return 1; } return 0; }\ninline void Yes(bool condition){ if(condition) PRINT(\"Yes\"); else PRINT(\"No\"); }\ntemplate<class itr> void cins(itr first,itr last){\n    for (auto i = first;i != last;i++){\n        cin >> (*i);\n    }\n}\ntemplate<class itr> void array_output(itr start,itr goal){\n    string ans = \"\",k = \" \";\n    for (auto i = start;i != goal;i++) ans += to_string(*i)+k;\n    if (!ans.empty()) ans.pop_back();\n    PRINT(ans);\n}\nll gcd(ll a, ll b) {\n    return a ? gcd(b%a,a) : b;\n}\nconst ll INF = 1e15;\nconst ll MOD = 1000000007;\nconst ll MOD2 = 998244353;\nconst ll EPS = 1e-10;\ntypedef pair<ll,ll> P;\ntypedef tuple<ll,ll,ll> tri;\ntypedef pair<double,double> point;\ntypedef complex<double> Point;\nconst ll MAX = 30000;\nconstexpr ll nx[8] = {1,0,-1,0,1,-1,1,-1};\nconstexpr ll ny[8] = {0,1,0,-1,1,1,-1,-1};\nint sgn(const double a){\n    return (a < -EPS ? -1 : (a > EPS ? +1 : 0));\n}\ndouble dot(Point z1,Point z2){\n    return (z1*conj(z2)).real();\n}\ndouble cross(Point z1,Point z2){\n    return (conj(z1)*z2).imag();\n}\nint pplace(const Point& a,const Point& b,const Point& c){\n    int f = sgn(cross(b-a,c-a));\n    if (f == 1){\n        return +1;//right\n    }\n    else if (f == -1){\n        return -1;//left\n    }\n    else{\n        if (sgn(dot(b-a,c-b)) > 0){\n            return +2; //abc\n        }\n        else if (sgn(dot(a-b,c-a))){\n            return -2; // cab\n        }\n        else{\n            return 0; // acb etc.\n        }\n    }\n}\nstruct Line{\n    Point begin,end;\n\n    Line(){\n        begin = Point(-1,-1),end = Point(1,1);\n    }\n    Line(const Point& b,const Point&e){\n        begin = b,end = e;\n    }\n    //ax+by+c = 0\n    Line(const double a,const double b,const double c){\n        if (sgn(a) == 0 && sgn(b) == 0){\n            assert(-1);\n        }\n        if (sgn(b) == 0){\n            begin = Point(-c/a,0.0);\n            end = Point(-c/a,1.0);\n        }\n        else{\n            begin = Point(0.0,-c/b);\n            end = Point(1.0,-(a+c)/b);\n        }\n    }\n    Point vec() const{\n        return end - begin;\n    }\n    Point cvec() const{\n        return begin - end;\n    }\n\n};\n\ntypedef Line Ray;\ntypedef Line Segment;\n\nint parallel(const Line& l1,const Line& l2){\n    if ((sgn(abs(l1.begin-l2.begin)) == 0 && sgn(abs(l1.end-l2.end)) == 0) || (sgn(abs(l1.begin-l2.end)) == 0 && sgn(abs(l1.end-l2.begin)) == 0)){\n        return -1;\n    }\n    else if (sgn(cross(l1.vec(),l2.vec())) == 0){\n        return 1;\n    }\n    else{\n        return 0;\n    }\n}\n\nPoint lineIntersection(const Line& l1,const Line& l2){\n    return l1.begin+l1.vec()*abs(cross(l2.end-l1.begin,l2.vec())/cross(l1.vec(),l2.vec()));\n}\n\npair<int,Point> segmentIntersection(const Segment& s1,const Segment& s2){\n    if (pplace(s1.begin,s1.end,s2.begin)*pplace(s1.begin,s1.end,s2.end) <= 0 &&\n    pplace(s2.begin,s2.end,s1.begin)*pplace(s2.begin,s2.end,s1.end) <= 0){\n        if (sgn(cross(s1.vec(),s2.vec())) == 0){\n            return make_pair(-1,Point(0,0)); //parallel\n        }\n        else{\n            return make_pair(1,lineIntersection(s1,s2));\n        }\n    }\n    return make_pair(0,Point(0,0));\n}\n\ndouble distPointLine(const Point& p,const Line& l){\n    return abs(cross(l.vec(),p-l.begin)/abs(l.vec()));\n}\n\ndouble distPointSegment(const Point& p,const Segment& s){\n    if (sgn(dot(s.vec(),p-s.begin)) < 0 || sgn(dot(s.cvec(),p-s.end)) < 0){\n        return min(abs(p-s.begin),abs(p-s.end));\n    }\n    return distPointLine(p,s);\n}\n\ndouble distSegmentSegment(const Segment& s1,const Segment& s2){\n    if (segmentIntersection(s1,s2).first){\n        return 0.0;\n    }\n    return min({distPointSegment(s1.begin,s2)\n            ,distPointSegment(s1.end,s2)\n            ,distPointSegment(s2.begin,s1)\n            ,distPointSegment(s2.end,s1)});\n}\n\nint main(){\n    //cin.tie(0);\n    //ios::sync_with_stdio(false);\n    ll q;\n    cin >> q;\n    rep(_,q){\n        double p00,p01,p10,p11,p20,p21,p30,p31;\n        cin >> p00 >> p01 >> p10 >> p11 >> p20 >> p21 >> p30 >> p31;\n        auto p1 = Point(p00,p01),p2 = Point(p10,p11),q1 = Point(p20,p21),q2 = Point(p30,p31);\n        Segment s1(p1,p2),s2(q1,q2);\n        printf(\"%.10lf\\n\",distSegmentSegment(s1,s2));\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define REP(i,first,last) for(int i=first;i<=last;++i)\n#define DOW(i,first,last) for(int i=first;i>=last;--i)\nusing namespace std;\ninline int Read()\n{\n\tint x(0),f(1);\n\tchar c(getchar());\n\twhile(c<'0'||'9'<c)\n\t{\n\t\tif(c=='-')\n\t\t{\n\t\t\tf=-1;\n\t\t}\n\t\tc=getchar();\n\t}\n\twhile('0'<=c&&c<='9')\n\t{\n\t\tx=(x<<1)+(x<<3)+c-'0';\n\t\tc=getchar();\n\t}\n\treturn f*x;\n}\nvoid Write(int x)\n{\n\tif(x<0)\n\t{\n\t\tprintf(\"-\");\n\t\tx=-x;\n\t}\n\tif(9<x)\n\t{\n\t\tWrite(x/10);\n\t}\n\tputchar(x%10+'0');\n}\ninline void Writeln(int x)\n{\n\tWrite(x);\n\tputs(\"\");\n}\nstruct Point\n{\n\tdouble x,y;\n\tPoint(double fx=0,double fy=0)\n\t{\n\t\tx=fx;\n\t\ty=fy;\n\t}\n\tvoid Read()\n\t{\n\t\tscanf(\"%lf%lf\",&x,&y);\n\t}\n\tvoid Write(int len=2)\n\t{\n\t\tprintf(\"%.9lf %.9lf\",x,y);\n\t}\n\tdouble operator ^(Point const b)const\n\t{\n\t\treturn x*b.x+y*b.y;\n\t}\n\tdouble operator |(Point const b)const\n\t{\n\t\treturn x*b.y-b.x*y;\n\t}\n\tdouble operator ==(Point const b)const\n\t{\n\t\treturn sqrt((x-b.x)*(x-b.x)+(y-b.y)*(y-b.y));\n\t}\n\tPoint operator *(double const b)const\n\t{\n\t\treturn Point(x*b,y*b);\n\t}\n\tPoint operator +(Point const b)const\n\t{\n\t\treturn Point(x+b.x,y+b.y);\n\t}\n\tPoint operator -(Point const b)const\n\t{\n\t\treturn Point(x-b.x,y-b.y);\n\t}\n};\nPoint Symmetrical(Point a,Point m=Point(0,0))\n{\n\treturn Point(m.x*2-a.x,m.y*2-a.y);\n}\n/**\n *      /\n *   a /\n *    m\n *   / b\n *  /\n * return b;\n */\nstruct Vector\n{\n\tPoint a,b;\n\tVector(Point f=Point(0,0),Point e=Point(0,0))\n\t{\n\t\ta=f;\n\t\tb=e;\n\t}\n\tdouble operator ^(Vector const c)const\n\t{\n\t\treturn (a.x-b.x)*(c.a.x-c.b.x)+(c.a.y-c.b.y)*(a.y-b.y);\n\t}\n\tdouble operator |(Vector const c)const\n\t{\n\t\treturn (a.x-b.x)*(c.a.y-c.b.y)-(c.a.x-c.b.x)*(a.y-b.y);\n\t}\n};\nPoint ProjectivePoint(Point a,Vector b)\n{\n\tdouble c=Vector(b.a,a)^Vector(b.a,b.b);\n\tc/=(b.a==b.b)*(b.a==b.b);\n\treturn (b.b-b.a)*c+b.a;\n}\n/**\n *     *\n *     |\n *     |\n * *---m-----*\n *\n *         *\n *         |\n *         |\n * *----*  m\n * return m;\n */\ndouble PointToVector(Point a,Vector b)\n{\n\tPoint c=ProjectivePoint(a,b);\n\tif(\n\t\t(\n\t\t\t(b.a.x<=c.x)==(c.x<=b.b.x)\n\t\t)\n\t\t&&\n\t\t(\n\t\t\t(b.a.y<=c.y)==(c.y<=b.b.y)\n\t\t)\n\t)\n\t{\n\t\treturn a==c;\n\t}\n\treturn min(a==b.a,a==b.b);\n}\nbool InRectangle(Point a,Point b,Point c)\n{\n\treturn\n\tmin(b.x,c.x)<=a.x&&a.x<=max(b.x,c.x)\n\t&&\n\tmin(b.y,c.y)<=a.y&&a.y<=max(b.y,c.y);\n}\n/**\n *   a\n *  b---*\n *  |   |\n *  *---c\n *  return 0;\n *\n *  b---*\n *  |a  |\n *  *---c\n *  return 1;\n */\nbool RectangleIntersection(Point a0,Point a1,Point b0,Point b1)\n{\n\tint zx=fabs(a0.x+a1.x-b0.x-b1.x);\n\tint zy=fabs(a0.y+a1.y-b0.y-b1.y);\n\tint x=fabs(a0.x-a1.x)+fabs(b0.x-b1.x);\n\tint y=fabs(a0.y-a1.y)+fabs(b0.y-b1.y);\n\tif(zx<=x&&zy<=y)\n\t{\n\t\treturn 1;\n\t}\n\treturn 0;\n}\n/**\n *  *---*\n *  |   |\n *  *---*\n *\n *    *--*\n *    |  |\n *    |  |\n *    *--*\n * return 0;\n *\n *  *---*\n *  | *-+*\n *  *-+-*|\n *    |  |\n *    *--*\n * return 1;\n */\nbool Intersect(Vector a,Vector b)\n{\n\tdouble a_aa=a|Vector(a.a,b.a);\n\tdouble a_ab=a|Vector(a.a,b.b);\n\tdouble b_aa=b|Vector(b.a,a.a);\n\tdouble b_ab=b|Vector(b.a,a.b);\n\tif((a_aa==0||a_ab==0||((a_aa<0)^(a_ab<0)))&&(b_aa==0||b_ab==0||((b_aa<0)^(b_ab<0))))\n\t{\n\t\treturn RectangleIntersection(a.a,a.b,b.a,b.b);\n\t}\n\treturn 0;\n}\n/**\n *      *\n *     /\n *    /*\n *   /  \\\n *  /    \\\n * *      *\n * return 0;\n *\n *      *\n *  *  /\n *   \\/\n *   /\\\n *  /  \\\n * *    *\n * return 1;\n */\nPoint QueryIntersect(Vector a,Vector b)\n{\n\tVector u(a.a,b.a);\n\tVector v(b.a,b.b);\n\tVector w(a.a,a.b);\n\tdouble c=(w|u)/(v|w);\n\treturn Point(b.a.x+(b.b.x-b.a.x)*c,b.a.y+(b.b.y-b.a.y)*c);\n}\n/**\n *        *\n * *     /\n *  \\   /\n *   \\ /\n *    m\n *   / \\\n *  *   \\\n *       *\n * return m;\n */\nPoint p0,p1,p2,p3;\nvoid Work()\n{\n\tp0.Read();\n\tp1.Read();\n\tp2.Read();\n\tp3.Read();\n\tif(Intersect(Vector(p0,p1),Vector(p2,p3)))\n\t{\n\t\tprintf(\"%.9lf\\n\",0.0);\n\t\treturn;\n\t}\n\tdouble answer=\n\tmin\n\t(\n\t\tmin(PointToVector(p0,Vector(p2,p3)),PointToVector(p1,Vector(p2,p3))),\n\t\tmin(PointToVector(p2,Vector(p0,p1)),PointToVector(p3,Vector(p0,p1)))\n\t);\n\tprintf(\"%.9lf\\n\",answer);\n}\nint main()\n{\n\tint q;\n\tscanf(\"%d\",&q);\n\tREP(i,1,q)\n\t{\n\t\tWork();\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "/* template.cpp {{{ */\n#include <bits/stdc++.h>\nusing namespace std;\n \n// #define int long long\n#define GET_MACRO(a, b, c, d, NAME, ...) NAME\n#define REP1(n) REP2(i_, n)\n#define REP2(i, n) REP3(i, 0, n)\n#define REP3(i, a, b) REP4(i, a, b, 1)\n#define REP4(i, a, b, s) for (long long i = (a); i < (long long)(b); i += (long long)(s))\n#define RREP1(n) RREP2(i_, n)\n#define RREP2(i, n) RREP3(i, 0, n)\n#define RREP3(i, a, b) RREP4(i, a, b, 1)\n#define RREP4(i, a, b, s) for (long long i = (b) - 1; i >= (long long)(a);  i -= (long long)(s))\n#define rep(...) GET_MACRO(__VA_ARGS__, REP4, REP3, REP2, REP1)(__VA_ARGS__)\n#define rrep(...) GET_MACRO(__VA_ARGS__, RREP4, RREP3, RREP2, RREP1)(__VA_ARGS__)\n#define fs first\n#define sc second\n#define all(c) std::begin(c), std::end(c)\n#define rall(c) (c).begin(), (c).end()\n#define pcnt(x) __builtin_popcountll(x)\n#define each(x, c) for (auto &&x : c)\n#define endl \"\\n\"\n#define y0 y0_\n#define y1 y1_\n#define yn yn_\n#define left left_\n#define right right_\n \n#define TMP_T template<typename T>\n#define TMP_TU template<typename T, typename U>\n#define TMP_Ts template<typename ...T>\n#define TMP_NTs template<size_t N, typename ...T>\n#define TMP_CT template<bool C, typename T = void>\n \n#ifndef DEBUG\n#define cerr no_output\nstruct NoOutput : ostream {\n  TMP_T ostream &operator<<(const T &){ return *this; }\n} no_output;\n#endif\n \nusing uint = unsigned;\nusing ll = long long;\nusing ull = unsigned long long;\nusing ld = long double;\nTMP_T using PQL = priority_queue<T, vector<T>, greater<T>>;\nTMP_T using PQG = priority_queue<T>;\nTMP_CT using enable_if_t = typename enable_if<C, T>::type;\n \nconst ll LLINF = 1e18 + 10;\n#ifndef int\nconst int INF = 1e9 + 10;\n#else\nconst int INF = LLINF;\n#endif\n \nconst int dx[] = {-1, 0, 1, 0, -1, 1, 1, -1};\nconst int dy[] = {0, -1, 0, 1, -1, -1, 1, 1};\n \nTMP_T inline constexpr T sq(T x){ return x * x; }\nTMP_TU inline T& chmin(T &x, U y){ if (x > y) x = y; return x; }\nTMP_TU inline T& chmax(T &x, U y){ if (x < y) x = y; return x; }\n \nTMP_NTs enable_if_t<(N >= sizeof...(T))> input_tuple(istream &, tuple<T...> &){}\nTMP_NTs enable_if_t<(N < sizeof...(T))> input_tuple(istream &is, tuple<T...> &x){ is >> get<N>(x); input_tuple<N + 1, T...>(is, x); }\nTMP_Ts ostream &operator>>(istream &is, tuple<T...> &x){ input_tuple<0, T...>(is, x); return is; }\nTMP_TU ostream &operator>>(istream &is, pair<T, U> &x){ return is >> x.first >> x.second; }\nTMP_NTs enable_if_t<(N >= sizeof...(T))> print_tuple(ostream &, const tuple<T...> &){}\nTMP_NTs enable_if_t<(N < sizeof...(T))> print_tuple(ostream &os, const tuple<T...> &x){ os << (N > 0 ? \" \" : \"\") << get<N>(x); print_tuple<N + 1, T...>(os, x); }\nTMP_Ts ostream &operator<<(ostream &os, const tuple<T...> &x){ print_tuple<0, T...>(os, x); return os; }\nTMP_TU ostream &operator<<(ostream &os, const pair<T, U> &x){ return os << x.first << \" \" << x.second; }\nTMP_T vector<T> reversed(const vector<T> &c){ auto d = c; reverse(all(d)); return d; }\nstring reversed(const string &s){ auto t = s; reverse(all(t)); return t; }\nTMP_T void unique(vector<T> &c){ sort(all(c)); c.erase(unique(all(c)), end(c)); }\nTMP_T vector<T> uniqued(const vector<T> &c){ auto d = c; unique(d); return d; }\n\n#undef TMP_T\n#undef TMP_TU\n#undef TMP_Ts\n#undef TMP_NTs\n#undef TMP_CT\n\nll gcd(ll a, ll b){ return b ? gcd(b, a % b) : a; }\nll lcm(ll a, ll b){ return a / gcd(a, b) * b; }\ntuple<ll, ll, ll> extgcd(ll a, ll b){\n  if (b){\n    ll g, x, y;\n    tie(g, x, y) = extgcd(b, a % b);\n    return make_tuple(g, y, x - a / b * y);\n  }\n  return make_tuple(a, 1, 0);\n}\nll invmod(ll a, ll m = 1000000007){\n  ll g, x;\n  tie(g, x, ignore) = extgcd(a, m);\n  return g == 1 ? (x + m) % m : 0;\n}\n\ninline ll in(){ ll x; cin >> x; return x; }\n \nstruct prepare {\n  prepare(){\n    ios::sync_with_stdio(false);\n    cout << fixed << setprecision(12);\n    cerr << fixed << setprecision(12);\n#ifndef DEBUG\n    cin.tie(nullptr);\n#endif\n  }\n} prepare_;\n/* }}} */\n/* geometry.cpp {{{ */\n/* object {{{ */\nusing Real = long double;\nusing Point = complex<Real>;\n\nstruct Line {\n  Point p, q;\n  Line(){}\n  Line(const Point &p, const Point &q): p(p), q(q){}\n};\n\nstruct Circle {\n  Point p;\n  Real r;\n  Circle(){}\n  Circle(const Point &p, Real r): p(p), r(r){}\n};\n\nusing Segment = Line;\nusing Polygon = vector<Point>;\n\nnamespace std {\n  bool operator<(const Point &a, const Point &b){\n    return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n  }\n}\n/* }}} */\n/* const {{{ */\nconst Real EPS = 1e-8l;\nconst Real PI = acos(-1.0l);\n/* }}} */\n/* compare {{{ */\nint sgn(Real x){\n  return (x > EPS) - (x < -EPS);\n}\n\nint sgn(Real x, Real y){\n  return sgn(x - y);\n}\n/* }}} */\n/* input {{{ */\nistream &operator>>(istream &is, Point &p){\n  Real x, y;\n  is >> x >> y;\n  p.real(x), p.imag(y);\n  return is;\n}\n\nistream &operator>>(istream &is, Line &l){\n  return is >> l.p >> l.q;\n}\n\nistream &operator>>(istream &is, Circle &c){\n  return is >> c.p >> c.r;\n}\n\nistream &operator>>(istream &is, Polygon &g){\n  each(p, g) is >> p;\n  return is;\n}\n/* }}} */\n/* output {{{ */\nostream &operator<<(ostream &os, const Point &p){\n  return os << p.real() << \" \" << p.imag();\n}\n\nostream &operator<<(ostream &os, const Line &l){\n  return os << l.p << \" \" << l.q;\n}\n\nostream &operator<<(ostream &os, const Circle &c){\n  return os << c.p << \" \" << c.r;\n}\n\nostream &operator<<(ostream &os, const Polygon &g){\n  for (int i = 0; i < (int)g.size(); i++){\n    os << g[i];\n    if (i + 1 < (int)g.size()) os << endl;\n  }\n  return os;\n}\n/* }}} */\n/* dot, cross {{{ */\nReal dot(const Point &a, const Point &b){\n  return real(conj(a) * b);\n}\n\nReal cross(const Point &a, const Point &b){\n  return imag(conj(a) * b);\n}\n/* }}} */\n/* ccw {{{ */\nint ccw(const Point &a, const Point &b, const Point &c){\n  Point u = b - a, v = c - a;\n  if (sgn(cross(u, v)) > 0) return 1;\n  if (sgn(cross(u, v)) < 0) return -1;\n  if (sgn(dot(u, v)) < 0) return 2;\n  if (sgn(norm(u), norm(v)) < 0) return -2;\n  return 0;\n}\n/* }}} */\n/* orthogonal, parallel {{{ */\nbool orthogonal(const Line &l, const Line &m){\n  return sgn(dot(l.q - l.p, m.q - m.p)) == 0;\n}\n\nbool parallel(const Line &l, const Line &m){\n  return sgn(cross(l.q - l.p, m.q - m.p)) == 0;\n}\n/* }}} */\n/* intersect {{{ */\nbool intersectLL(const Line &l, const Line &m){\n  return !parallel(l, m) ? true : parallel(l, Line(l.p, m.p));\n}\n\nbool intersectLS(const Line &l, const Segment &s){\n  return sgn(cross(l.q - l.p, s.p - l.p)) * sgn(cross(l.p - l.p, s.q - l.p)) <= 0;\n}\n\nbool intersectLP(const Line &l, const Point &p){\n  return ~ccw(l.p, l.q, p) & 1;\n}\n\nbool intersectSS(const Segment &s, const Segment &t){\n  return ccw(s.p, s.q, t.p) * ccw(s.p, s.q, t.q) <= 0\n      && ccw(t.p, t.q, s.p) * ccw(t.p, t.q, s.q) <= 0;\n}\n\nbool intersectSP(const Segment &s, const Point &p){\n  return !ccw(s.p, s.q, p);\n}\n/* }}} */\n/* project, refrect {{{ */\nPoint project(const Line &l, const Point &p){\n  Real t = dot(p - l.p, l.p - l.q) / norm(l.p - l.q);\n  return l.p + t * (l.p - l.q);\n}\n\nPoint reflect(const Line &l, const Point &p){\n  return p + 2.0l * (project(l, p) - p);\n}\n/* }}} */\n/* distance {{{ */\nReal distanceLP(const Line &l, const Point &p){\n  return abs(p - project(l, p));\n}\n\nReal distanceLL(const Line &l, const Line &m){\n  return intersectLL(l, m) ? 0.0l : distanceLP(l, m.p);\n}\n\nReal distanceLS(const Line &l, const Segment &s){\n  if (intersectLS(l, s)) return 0.0l;\n  return min(distanceLP(l, s.p), distanceLP(l, s.q));\n}\n\nReal distanceSP(const Segment &s, const Point &p){\n  if (sgn(dot(s.q - s.p, p - s.p)) <= 0) return abs(s.p - p);\n  if (sgn(dot(s.p - s.q, p - s.q)) <= 0) return abs(s.q - p);\n  return distanceLP(s, p);\n}\n\nReal distanceSS(const Segment &s, const Segment &t){\n  if (intersectSS(s, t)) return 0.0l;\n  return min({\n    distanceSP(s, t.p), distanceSP(s, t.q),\n    distanceSP(t, s.p), distanceSP(t, s.q)\n  });\n}\n/* }}} */\n/* cross point {{{ */\nPoint crossPoint(const Line &l, const Line &m){\n  Real a = cross(l.q - l.p, m.q - m.p);\n  Real b = cross(l.q - l.p, l.q - m.p);\n  if (sgn(a) == 0 && sgn(b) == 0) return m.p;\n  if (sgn(a) == 0) assert(false);\n  return m.p + b / a * (m.q - m.p);\n}\n/* }}} */\n/* }}} */\n\nsigned main()\n{\n  int q;\n  Segment s, t;\n  cin >> q;\n  rep(q){\n    cin >> s >> t;\n    cout << distanceSS(s, t) << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long unsigned int ll;\n\n// 参考サイト\n// 前原 貴憲\n// http://www.prefield.com/algorithm/index.html\n\nconst double EPS = 1e-8;\nconst double INF = 1e12;\ntypedef complex<double> Point; //複素数で平面定義\ntypedef Point P;\n\n// system {{{\n// オペレーター< を定義、後々楽\nnamespace std{\n    bool operator < ( const P& a, const P& b) {\n        return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n    }\n}\n\n// 外積\ndouble cross( const P& a, const P& b ){\n    return imag(conj(a)*b);\n}\n// 内積\ndouble dot( const P& a, const P& b ){\n    return real(conj(a)*b);\n}\n// }}}\n// Line L vector<P> PolyGon G vector<P> Circle C(P,int rad) {{{\n// 直線 Line\n// 線分 Segment\nstruct L : public vector<P> {\n    L(const P &a, const P &b ){\n        push_back(a); push_back(b);\n    }\n};\n\n// 単純多角形 PolyGon\ntypedef vector<P> G;\n\n// 円 cirlce\nstruct C {\n    P p; double r;\n    C(const P &p, double r ) : p(p), r(r) {}\n};\n// }}}\n// counter clockwise {{{\n//\nint ccw( P a, P b, P c ){\n    b -= a; c -= a;\n    if( cross(b,c) > 0 )   return +1; //counter clockwise\n    if( cross(b,c) < 0 )   return -1; //clockwise\n    if( dot(b,c) < 0 )     return +2; //online_back\n    if( norm(b) < norm(c)) return -2; //online_front\n    return 0; // on_segment\n} //}}}\n// 交点判定 交点座標 LSPtoLSP {{{\nbool intersectLL( const L &l, const L &m ){\n    return abs( cross(l[1]-l[0], m[1]-m[0]) ) > EPS || // cross(l,m) != 0 <-> not paralell\n           abs( cross(l[1]-l[0], m[0]-l[0]) ) < EPS;   // cross(l,(m-l)) == 0 <-> same line\n}\nbool intersectLS( const L &l, const L &s ){\n    return cross( l[1]-l[0], s[0]-l[0] ) *\n           cross( l[1]-l[0], s[1]-l[0] ) < EPS;\n}\nbool intersectLP( const L &l, const P &p ){\n    return abs( cross(l[0]-p, l[1]-p) );\n}\nbool intersectSS( const L &s, const L &t ){\n    return ccw(s[0],s[1],t[0])*ccw(s[0],s[1],t[1]) <= 0 &&\n           ccw(t[0],t[1],s[0])*ccw(t[0],t[1],s[1]) <= 0;\n}\nbool intersectSP( const L &s, const P &p ){\n    return abs( s[0]-p )+abs( s[1]-p )-abs(s[1]-s[0]) < EPS;\n}\nP crossPoint( const L &l, const L &m ){\n    double A = cross( l[1] - l[0], m[1] - m[0] );\n    double B = cross( l[1] - l[0], l[1] - m[0] );\n    // A は に直線の成す平行四辺形\n    // B は そのA のうちの片側\n    // 書いたら分かる\n    // 参考サイト\n    // http://www.fumiononaka.com/Business/html5/FN1312003.html\n    if( abs(A) < EPS && abs(B) < EPS ) return m[0];\n    return m[0] + B / A * ( m[1] - m[0] );\n}\n// }}}\n// 射影 反射 距離 LSPtoLSP  {{{\nP projection( const L &l, const P &p ){\n    double t = dot( p-l[0], l[0]-l[1] ) / norm( l[0]-l[1] );\n    return l[0] + t*(l[0]-l[1]);\n}\nP reflection( const L &l, const P &p ){\n    return p + 2.0*( projection(l,p) - p );\n}\ndouble distanceSP( const L &s, const P &p ){\n    const P r = projection(s,p);\n    if( intersectSP(s,r) ) return abs(r-p);\n    else return min( abs(s[0] - p), abs(s[1] - p) );\n}\ndouble distanceSS( const L &s, const L &t ){\n    if( intersectSS(s,t) ) return 0.0;\n    return min( min( distanceSP(s,t[0]), distanceSP(s,t[1]) ),\n                min( distanceSP(t,s[0]), distanceSP(t,s[1]) ) );\n}\n// }}}\n// imagePointDescription(点表示) {{{ \nvoid imagePointDescription( const vector<P> &p ){\n    int here[51][51] = {};\n    int i = 0;\n    for( P t : p ){\n        i++;\n        int y = round(imag(t)-EPS);\n        int x = round(real(t)-EPS);\n        if( abs(y) > 25 ) continue;\n        if( abs(x) > 25 ) continue;\n        here[y+25][x+25] = i;\n    }\n\n    for( i = 50; i >= 0; i-- ){\n        for( int j = 0; j <= 50; j++ ){\n            if( here[i][j] ) printf (\"%2d\", here[i][j] );\n            else if( i == 25 && j == 25 ) printf (\"-+\");\n            else if( i == 25 ) printf (\"--\");\n            else if( j == 25 ) printf (\" |\");\n            else if( j % 5 == 0 && i % 5 == 0)printf (\" .\");\n            else printf (\"  \");\n        }\n        printf (\"\\n\");\n    }\n\n}\n// }}}\n\nint main() {\n\n    double a,b,c,d;\n    G points(4);\n\n\n    int q;\n    cin >> q;\n\n    while(q--){\n        cin >> a >> b >> c >> d;\n        P p1(a,b);\n        P p2(c,d);\n        cin >> a >> b >> c >> d;\n        P p3(a,b);\n        P p4(c,d);\n        L l1(p1,p2);\n        L l2(p3,p4);\n        points[0] = p1;\n        points[1] = p2;\n        points[2] = p3;\n        points[3] = p4;\n        // imagePointDescription(points);\n        printf (\"%1.10lf\\n\", distanceSS(l1,l2) );\n        // printf (\"%1.10lf %1.10lf\\n\", real(x), imag(x) );\n    }\n\n\n    return 0;\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nconstexpr double EPS = 1e-10;\ntypedef complex<double> Point;\ntypedef Point Vector;\ntypedef pair<Point, Point> Segment;\ntypedef Segment Line;\ntypedef pair<Point, double> Circle;\ntypedef vector<Point> Polygon;\ndouble dot(Vector a, Vector b){\n\treturn real(a) * real(b) + imag(a) * imag(b);\n}\ndouble cross(Vector a, Vector b){\n\treturn real(a) * imag(b) - imag(a) * real(b);\n}\nPoint project(Line l, Point p){\n\tVector base = l.second - l.first;\n\tbase /= abs(base);\n\tdouble r = dot(p - l.first, base);\n\treturn l.first + r * base;\n}\nPoint reflect(Line l, Point p){\n\treturn p + (project(l, p) - p) * 2.0;\n}\nint ccw(Point p0, Point p1, Point p2){\n\tVector v = p1 - p0, w = p2 - p0;\n\tif(cross(v, w) > EPS) return 1; // COUNTER_CLOCKWISE\n\tif(cross(v, w) < -EPS) return -1; // CLOCKWISE\n\tif(dot(v, w) < -EPS) return 2; // ONLINE p2 - p0 - p1\n\tif(norm(v) + EPS < norm(w)) return -2; // ONLINE p0 - p1 - p2\n\treturn 0; // ONLINE p0 - p1 - p2\n}\nbool isOrthogonal(Vector v1, Vector v2){\n\tdouble t = abs(dot(v1, v2));\n\treturn t <= EPS;\n}\nbool isParallel(Vector v1, Vector v2){\n\tdouble t = abs(cross(v1, v2));\n\treturn t <= EPS;\n}\nbool intersect(Segment s1, Segment s2){\n\tint t = ccw(s1.first, s1.second, s2.first) * ccw(s1.first, s1.second, s2.second);\n\tint u = ccw(s2.first, s2.second, s1.first) * ccw(s2.first, s2.second, s1.second);\n\treturn (t == 0 || t == -1 || t == -4) && (u == 0 || u == -1 || u == -4);\n}\nPoint getCrossPoint(Segment s1, Segment s2){\n\tassert(intersect(s1, s2));\n\tassert(!isParallel(s1.second - s1.first, s2.second - s2.first));\n\tVector base = s2.second - s2.first;\n\tdouble d1 = abs(cross(base, s2.first - s1.first));\n\tdouble d2 = abs(cross(base, s2.first - s1.second));\n\treturn s1.first + (s1.second - s1.first) * d1 / (d1 + d2);\n}\ndouble getDistancePL(Point p, Line l){\n\treturn abs(cross(p - l.first, l.second - l.first)) / abs(l.second - l.first);\n}\ndouble getDistancePS(Point p, Segment s){\n\tif(dot(s.second - s.first, p - s.first) < 0.0) return abs(p - s.first);\n\tif(dot(s.first - s.second, p - s.second) < 0.0) return abs(p - s.second);\n\treturn getDistancePL(p, Line(s));\n}\ndouble getDistanceSS(Segment s1, Segment s2){\n\tif(intersect(s1, s2)) return 0.0;\n\treturn min({getDistancePS(s2.first, s1), getDistancePS(s2.second, s1), getDistancePS(s1.first, s2), getDistancePS(s1.second, s2)});\n}\n\nint main(){\n\tcin.tie(0);\n\tios::sync_with_stdio(false);\n\tint q;\n\tcin >> q;\n\twhile(q--){\n\t\tdouble x[4], y[4];\n\t\tfor(int i=0; i<4; ++i) cin >> x[i] >> y[i];\n\t\tPoint p0(x[0], y[0]), p1(x[1], y[1]), p2(x[2], y[2]), p3(x[3], y[3]);\n\t\tcout << setprecision(14) << getDistanceSS(Segment(p0, p1), Segment(p2, p3)) << \"\\n\";\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <algorithm>\n#include <cfloat>\n#include <climits>\n#include <cmath>\n#include <complex>\n#include <cstdio>\n#include <cstdlib>\n#include <functional>\n#include <sstream>\n#include <string>\n#include <utility>\n#include <map>\n#include <memory>\n#include <set>\n#include <vector>\n#include <deque>\n#include <list>\n#include <stack>\n#include <queue>\n\nusing namespace std;\n\nconst double eps = 1e-10;\n\nclass Vector\n{\npublic:\n  double x;\n  double y;\n\n  Vector(){}\n  Vector( double x, double y ) : x(x), y(y) {}\n\n  Vector operator + ( const Vector v ) { return Vector( x + v.x, y + v.y ); }\n  Vector operator - ( const Vector v ) { return Vector( x - v.x, y - v.y ); }\n  Vector operator * ( const double k ) { return Vector( x * k, y * k ); }\n  Vector operator / ( const double k ) { return Vector( x / k, y / k ); }\n  bool operator < ( const Vector &v ) const { return x * x + y * y < v.x * v.x + v.y * v.y; }\n\n  double abs() { return sqrt( norm() ); }\n  double norm() { return x * x + y * y; }\n\n  static double dot( Vector v1, Vector v2 ) { return v1.x * v2.x + v1.y * v2.y; }\n  static double cross( Vector v1, Vector v2 ) { return v1.x * v2.y - v1.y * v2.x; }\n};\n\nclass Distance\n{\npublic:\n  Vector p0, p1, p2, p3;\n  Distance(){}\n  Distance( Vector p0, Vector p1, Vector p2, Vector p3 ) : p0(p0), p1(p1), p2(p2), p3(p3) {}\n  int solve();\n  double dist( Vector a, Vector b );\n  bool intersect();\n};\n\nbool Distance::intersect()\n{\n  Vector p10 = p1 - p0;\n  Vector p21 = p2 - p1;\n  Vector p31 = p3 - p1;\n\n  Vector p32 = p3 - p2;\n  Vector p03 = p0 - p3;\n  Vector p13 = p1 - p3;\n\n  return ( Vector::cross( p10, p21 ) * Vector::cross( p10, p31 ) < 0 &&\n           Vector::cross( p32, p03 ) * Vector::cross( p32, p13 ) < 0 );\n}\n\ndouble Distance::dist( Vector a, Vector b )\n{\n  double ret;\n  double dt = Vector::dot( a, b );\n\n  if ( dt < 0 )\n    ret = b.abs();\n  else if ( dt < a.norm() )\n    ret = fabs( Vector::cross( a, b ) ) / a.abs();\n  else\n    {\n      Vector ba = b - a;\n      ret = ba.abs();\n    }\n      \n  return ret;\n}\n\nint Distance::solve()\n{\n\n  double ret;\n\n  if ( intersect() )\n    ret = 0;\n  else\n    ret = min( min( dist( p1 - p0, p2 - p0 ), dist( p1 - p0, p3 - p0 ) ),\n               min( dist( p3 - p2, p0 - p2 ), dist( p3 - p2, p1 - p2 ) ) );\n  \n  cout << fixed << setprecision(10) << ret << endl;\n  \n  return 0;\n}\n\nint main()\n{\n  int q;\n  cin >> q;\n\n  for ( auto i = 0; i < q; ++i )\n    {\n      double x0, y0, x1, y1, x2, y2, x3, y3;\n      cin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n      \n      Distance d( Vector(x0, y0), Vector(x1, y1), Vector(x2, y2), Vector(x3, y3));\n\n      d.solve();\n    }      \n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "/*<<head>> {{{*/\n#include <bits/stdc++.h>\n#include <algorithm>\n#include <iostream>\n#include <cstring>\n#include <vector>\n#include <cstdio>\n#include <string>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <set>\n#include <map>\nusing namespace std;\ntypedef double db;\ntypedef long long ll;\ntypedef vector<int> vi;\ntypedef pair<int,int> pii;\n#define dd(x) cout << #x << \" = \" << x << \", \"\n#define de(x) cout << #x << \" = \" << x << endl\n#define rep(i,a,b) for(int i=(a);i<(b);++i)\n#define per(i,a,b) for(int i=(b)-1;i>=(a);--i)\n#define all(x) (x).begin(),(x).end()\n#define sz(x) (int)(x).size()\n#define mp make_pair\n#define pb push_back\n#define fi first\n#define se second\n//INF = 1 061 109 567 ; INF + INF = 2 122 219 134 ;\n//LINF = 4 557 430 888 798 830 399 ; LINF + LINF = 9 114 861 777 597 660 798 ;\nconst int INF = 0x3f3f3f3f;     // -INF: 0xc0   abs(-INF) = INF + 1\nconst ll LINF = 0x3f3f3f3f3f3f3f3f;\n/*}}}*/                         // zr, zm\nconst int MOD = (int)1e9+7;     // when MOD = 1e9+7, inv2 = 500000004\nconst int N = (int)-1;\n\n// ------- 变量 ------- //\n\n/* 注意\n  1. 点、向量\n    1. 如果角度出现 -pi ，可以加上 2pi 修正为 pi\n    2. atan2(y, x) 的参数是浮点数时，可能出现 -pi ，如 atan2(-0.0, -1.0)\n  2. 线段、直线\n    1. 线段严格相交定义为：每条线段的两个端点落在另一条线段两边，形象来说，就是可以在图形里看到四个端点和一个交点\n*/\n\ntypedef db T;\nconst db eps = 1e-7, pi = acosl(-1.);\nint sgn(T x) { return (x > eps) - (x < -eps); }\nbool inMid(T a, T x, T b) { return sgn(a - x) * sgn(b - x) <= 0; }  // 数 x 在区间 [a, b] 内（包括边界）\n\n// 点、向量\nstruct P {\n    T x, y; P () {} P(T x, T y) : x(x), y(y) {}\n    P operator + (const P &b) const { return P(x + b.x, y + b.y); }  // 向量加\n    P operator - (const P &b) const { return P(x - b.x, y - b.y); }  // 向量减\n    T operator * (const P &b) const { return x * b.x + y * b.y; }    // 向量点积\n    T operator / (const P &b) const { return x * b.y - y * b.x; }    // 向量叉积\n    P operator * (const T &k) const { return P(x * k, y * k); }      // 向量数乘\n    P operator / (const T &k) const { return P(x / k, y / k); }      // 向量数除\n    bool operator < (const P &b) const { return sgn(x - b.x) ? x < b.x : y < b.y; }  // 左小右大，下小上大\n    bool operator == (const P &b) const { return !sgn(x - b.x) && !sgn(y - b.y); }   // 向量相等\n    P rot(T t) { return P(x * cos(t) - y * sin(t), x * sin(t) + y * cos(t)); }  // 向量逆时针旋转 t 弧度\n    P rot90() { return P(-y, x); }           // 向量逆时针旋转 90 度\n    db arg() const { return atan2(y, x); }   // 方位角 (-pi, pi]\n    T abs() { return sqrt(x * x + y * y); }  // 向量模长\n    T abs2() { return x * x + y * y; }       // 向量模长的平方\n    P unit() { return (*this) / abs(); }     // 单位向量\n    void scan() { db tx, ty; scanf(\"%lf%lf\", &tx, &ty); x = tx; y = ty; }  // 输入\n    void print() { printf(\"%.11lf %.11lf\\n\", x, y); }                      // 输出\n    P toR() { return (sgn(x) == -1 || !sgn(x) && sgn(y) == -1) ? (*this)*(-1) : (*this); }  // 若向量在 2 3 象限，则取其相反向量\n    bool isUp() const { return sgn(y) == 1 || !sgn(y) && sgn(x) == -1; }                    // 向量是否在 1 2 象限\n};\nT dis(P a, P b) { return (b - a).abs(); }   // 点 a 到点 b 的距离\nP symmetry(P p, P a) { return a + a - p; }  // 点 p 关于点 a 的中心对称点\nT cross(P o, P a, P b) { return (a - o) / (b - o); }         // 向量 oa 与 ob 的叉积\nint crossSgn(P o, P a, P b) { return sgn(cross(o, a, b)); }  // 向量 oa 与 ob 的叉积符号\ndb rad(P a, P b) { return atan2(a / b, a * b); }             // 向量 a 与 b 的夹角（弧度制）\nbool order(const P &a, const P &b) { return a.isUp() < b.isUp() || a.isUp() == b.isUp() && sgn(a/b) > 0; }  // 极角排序\n\n// 线段、直线\nstruct L { P s, t; L () {} L(P s, P t) : s(s), t(t) {} };\nbool onPS(P p, L a) { return sgn((a.t-a.s)/(p-a.s))==0 && sgn((p-a.s)*(p-a.t))<=0; }   // 点 p 是否在线段 st 上\nbool inRec(P p, L a) { return inMid(a.s.x, p.x, a.t.x) && inMid(a.s.y, p.y, a.t.y); }  // 点 p 在以直线 a 为对角线的矩形内\nP proj(P p, L a) { return (a.t-a.s) * ( (p-a.s) * (a.t-a.s) / (a.t-a.s).abs2() ) + a.s; }   // 点 p 关于直线 a 的投影点\nP reflect(P p, L a) { return proj(p, a) * 2 - p; }                                          // 点 p 关于直线 a 的对称点\nbool xSSr(const L &a, const L &b) {  // 线段 a 和线段 b 严格相交\n    T c1 = (a.t-a.s) / (b.s-a.s), c2 = (a.t-a.s) / (b.t-a.s);\n    T c3 = (b.t-b.s) / (a.s-b.s), c4 = (b.t-b.s) / (a.t-b.s);\n    return sgn(c1) * sgn(c2) < 0 && sgn(c3) * sgn(c4) < 0;\n}\nbool xSS(L a, L b) {                 // 线段 a 和线段 b 不严格相交\n    T c1 = (a.t-a.s) / (b.s-a.s), c2 = (a.t-a.s) / (b.t-a.s);\n    T c3 = (b.t-b.s) / (a.s-b.s), c4 = (b.t-b.s) / (a.t-b.s);\n    return sgn(c1) * sgn(c2) <= 0 && sgn(c3) * sgn(c4) <= 0 &&\n           sgn(max(a.s.x,a.t.x) - min(b.s.x,b.t.x)) >= 0 &&\n           sgn(max(b.s.x,b.t.x) - min(a.s.x,a.t.x)) >= 0 &&\n           sgn(max(a.s.y,a.t.y) - min(b.s.y,b.t.y)) >= 0 &&\n           sgn(max(b.s.y,b.t.y) - min(a.s.y,a.t.y)) >= 0;\n}\nbool xSL(L a, L b) {  // 线段 a 与直线 b 相交 ( 不严格 : <= ; 严格 : < )\n    return sgn( (b.t - b.s) / (a.s - b.s) ) * sgn( (b.t - b.s) / (a.t - b.s) ) <= 0;\n}\nP xLL(L a, L b) {  // 直线 a 和直线 b 的交点\n    T s1 = (b.t - b.s) / (a.s - b.s), s2 = -( (b.t - b.s) / (a.t - b.s) );\n    return (a.s * s2 + a.t * s1) / (s1 + s2);\n}\ndb disPL(P p, L a) { return fabs( (a.t-a.s) / (p-a.s) ) / (a.t-a.s).abs(); }  // 点 p 到直线 a 的距离\ndb disPS(P p, L a) {                                                          // 点 p 到线段 a 的距离\n    return sgn( (a.t-a.s) * (p-a.s) ) * sgn( (a.s-a.t) * (p-a.t) ) == 1\n           ? disPL(p, a) : min( (p-a.s).abs(), (p-a.t).abs() );\n}\ndb disSS(L a, L b){                                                           // 线段 a 到线段 b 的距离\n    if (xSS(a,b)) return 0;\n    return min( min( disPS(a.s,b), disPS(a.t,b) ), min( disPS(b.s,a), disPS(b.t,a) ) );\n}\ndb disLL(L a, L b) { return (a.t-a.s) / (b.t-b.s) ? 0 : disPL(a.s, b); }      // 直线 a 到直线 b 的距离\n\n// 多边形、凸包\ntypedef vector<P> polygon;\npolygon Convex(polygon A) {  // 求凸包，逆时针排序（ 内角 <180 : (<=) ; 内角 <=180 : (<) ）\n    int n = sz(A); if (n <= 1) return A;\n    sort(all(A));\n    polygon B;\n    for (int i = 0; i < n; B.pb(A[i++]))\n        while (sz(B) > 1 && crossSgn(B[sz(B)-2], B.back(), A[i]) < 0) B.pop_back();  // 更改这里的 <\n    for (int i = n - 2, t = sz(B); i >= 0; B.pb(A[i--]))\n        while (sz(B) > t && crossSgn(B[sz(B)-2], B.back(), A[i]) < 0) B.pop_back();  // 同上\n    B.pop_back(); return B;\n}\nT area(polygon A) {  // 多边形 A 的面积，整型可以返回面积的两倍，保持精度\n    T res = 0;\n    rep(i, 0, sz(A)) res += A[i] / A[ (i+1) % sz(A) ];\n    return fabs(res) / 2;\n}\nbool isConvex(polygon A) {  // 多边形 A 是否是凸包，要求 A 的点集按逆时针排序\n    rep(i, 0, 2) A.pb(A[i]);\n    rep(i, 0, sz(A)-2) if ( sgn( (A[i+1]-A[i]) / (A[i+2]-A[i]) ) < 0 ) return 0;\n    return 1;\n}\nint inPpolygon(P p, polygon A) {  // 点和多边形关系 ( -1 : on , 0 : out , 1 : in )\n    int res = 0;\n    rep(i, 0, sz(A)) {\n        P u = A[i], v = A[ (i+1) % sz(A) ];\n        if (onPS(p, L(u, v))) return -1;\n        T cross = sgn((v-u)/(p-u)), d1 = sgn(u.y-p.y), d2 = sgn(v.y-p.y);\n        if (cross > 0 && d1 <= 0 && d2 > 0) ++res;\n        if (cross < 0 && d2 <= 0 && d1 > 0) --res;\n    }\n    return res != 0;\n}\n\nstruct C {\n    P o; db r; C () {} C (P o, db r) : o(o), r(r) {}\n};\n\nC getC(P a,P b,P c){  // 三点确定一个圆 （ 三角形外接圆 ）\n    db a1 = b.x - a.x, b1 = b.y - a.y, c1 = (a1 * a1 + b1 * b1) / 2;\n    db a2 = c.x - a.x, b2 = c.y - a.y, c2 = (a2 * a2 + b2 * b2) / 2;\n    db d = a1 * b2 - a2 * b1;\n    P o = P(a.x + (c1 * b2 - c2 * b1) / d, a.y + (a1 * c2 - a2 * c1) / d);\n    return C(o, dis(a, o));\n}\n\nP p[3];\n\n// ------- 函数 ------- //\n\nvoid Init() {\n}\n\nint Solve() {\n    int q; scanf(\"%d\", &q);\n    while (q--) {\n        rep(i, 0, 4) p[i].scan();\n        L s1 = L(p[0], p[1]), s2 = L(p[2], p[3]);\n        printf(\"%.12f\\n\", disSS(s1, s2));\n    }\n    return 0;\n}\n\n// ------- main ------- //\n\nint main ()\n{\n    //ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);\n    //freopen(\"in.txt\", \"r\", stdin);\n    //freopen(\"out.txt\", \"w\", stdout);\n\n    //Pre();\n    //int t; scanf(\"%d\", &t); while (t--) {\n    //while (~scanf(\"%d\", &n)) {\n    //while(fgets(s, N, stdin)) {   // 注意 fgets 会读入换行符\n        //if (n == 0) break;\n        //static int kase = 0; printf(\"Case %d: \", ++kase);\n        Init();\n        Solve();\n        //if (t) puts(\"\");\n    //}\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <algorithm>\n#include <cmath>\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nusing namespace std;\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nclass Point {\npublic:\n\tdouble x, y;\n\tPoint(double x = 0, double y = 0) : x(x), y(y) {}\n\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a) { return Point(a*x, a*y); }\n\tPoint operator / (double a) { return Point(x / a, y / a); }\n\n\tdouble norm() { return x*x + y*y; }\n\tdouble abs() { return sqrt(norm()); }\n\n\tbool operator < (const Point &p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p) const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\n\ntypedef Point Vector;\n\nstruct Segment {\n\tPoint p1, p2;\n\tSegment() {}\n};\n\ntypedef Segment Line;\n\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0) : c(c), r(r) {}\n};\n\n\ndouble norm(Vector a) {\n\treturn a.norm();\n}\n\ndouble abs(Vector a) {\n\treturn a.abs();\n}\n\ndouble dot(Vector a, Vector b) {\n\treturn a.x*b.x + a.y*b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n\treturn a.x*b.y - a.y*b.x;\n}\n\nbool isOrthogonal(Vector a, Vector b) {\n\treturn equals(dot(a, b), 0.0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n\treturn isOrthogonal(a1 - a2, b1 - b2);\n}\n\nbool isOrthogonal(Segment s1, Segment s2) {\n\treturn isOrthogonal(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\nbool isParallel(Vector a, Vector b) {\n\treturn equals(cross(a, b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n\treturn isParallel(a1 - a2, b1 - b2);\n}\n\nbool isParallel(Segment s1, Segment s2) {\n\treturn isParallel(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\nPoint project(Segment s, Point p) {\n\tdouble alpha = dot(p - s.p2, s.p1 - s.p2) / (s.p1 - s.p2).norm();\n\treturn s.p2 + (s.p1 - s.p2)*alpha;\n}\n\nPoint reflect(Segment s, Point p) {\n\treturn project(s, p)*2.0 - p;\n}\n\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS) return CLOCKWISE;\n\tif (dot(a, b) < -EPS) return ONLINE_BACK;\n\tif (a.norm() < b.norm()) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n\tint p1p2p3, p1p2p4, p3p4p1, p3p4p2;\n\tp1p2p3 = ccw(p1, p2, p3);\n\tp1p2p4 = ccw(p1, p2, p4);\n\tp3p4p1 = ccw(p3, p4, p1);\n\tp3p4p2 = ccw(p3, p4, p2);\n\n\tif (p1p2p3 == ON_SEGMENT) return true;\n\tif (p1p2p4 == ON_SEGMENT) return true;\n\tif (p3p4p1 == ON_SEGMENT) return true;\n\tif (p3p4p2 == ON_SEGMENT) return true;\n\tif (p1p2p3 == ONLINE_FRONT && p1p2p4 == ONLINE_BACK) return true;\n\tif (p1p2p3 == ONLINE_BACK && p1p2p4 == ONLINE_FRONT) return true;\n\tif (p1p2p3 == COUNTER_CLOCKWISE && p1p2p4 == CLOCKWISE && p3p4p1 == CLOCKWISE && p3p4p2 == COUNTER_CLOCKWISE) return true;\n\tif (p1p2p3 == CLOCKWISE && p1p2p4 == COUNTER_CLOCKWISE && p3p4p1 == COUNTER_CLOCKWISE && p3p4p2 == CLOCKWISE) return true;\n\treturn false;\n}\n\nbool intersect(Segment s1, Segment s2) {\n\treturn intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\ndouble getDistance(Point a, Point b) {\n\treturn (a - b).abs();\n}\n\ndouble getDistanceLP(Line l, Point p) {\n\treturn abs(cross(l.p2 - l.p1, p - l.p1) / (l.p2 - l.p1).abs());\n}\n\ndouble getDistanceSP(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0) return (p - s.p1).abs();\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0) return (p - s.p2).abs();\n\treturn getDistanceLP(s, p);\n}\n\ndouble getDistance(Segment s1, Segment s2) {\n\tif (intersect(s1, s2)) return 0.0;\n\treturn min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)), min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\nint main() {\n\tSegment S1, S2;\n\tint q;\n\tcin >> q;\n\tfor (int i = 0; i < q; i++) {\n\t\tcin >> S1.p1.x >> S1.p1.y >> S1.p2.x >> S1.p2.y >> S2.p1.x >> S2.p1.y >> S2.p2.x >> S2.p2.y;\n\t\tcout << fixed << setprecision(15);\n\t\tcout << getDistance(S1, S2) << endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define rep(i,n) for(int i=0;i<n;i++)\nusing namespace std;\n#define f first\n#define s second\ntypedef double D;\ntypedef complex<D> P;\ntypedef pair<P, P> L;\ntypedef vector<P> VP;\nconst D EPS = 1e-9;\n#define X real()\n#define Y imag()\n#define LE(n,m) ((n) < (m) + EPS)\n#define GE(n,m) ((n) + EPS > (m))\n#define EQ(n,m) (abs((n)-(m)) < EPS)\nD dot(P a, P b) {return (conj(a)*b).X; }\nD cross(P a, P b) {  return (conj(a)*b).Y;}\nint ccw(P a, P b, P c) {\n  b -= a;  c -= a;\n  if (cross(b,c) >  EPS) return +1;\n  if (cross(b,c) < -EPS) return -1;\n  if (dot(b,c)   < -EPS) return +2;\n  if (norm(b) < norm(c)) return -2;\n  return 0;\n}\nbool isecSP(P a1, P a2, P b) {\n  return !ccw(a1, a2, b);\n}\nbool isecSS(P a1, P a2, P b1, P b2) {\n  return ccw(a1, a2, b1)*ccw(a1, a2, b2) <= 0 &&\n         ccw(b1, b2, a1)*ccw(b1, b2, a2) <= 0;\n}\nP proj(P a1, P a2, P p) {\n  return a1 + dot(a2-a1, p-a1)/norm(a2-a1) * (a2-a1);\n}\nD distSP(P a1, P a2, P p) {\n  P r = proj(a1, a2, p);\n  if (isecSP(a1, a2, r)) return abs(r-p);\n  return min(abs(a1-p), abs(a2-p));\n}\nD distSS(P a1, P a2, P b1, P b2) {\n  if (isecSS(a1, a2, b1, b2)) return 0;\n  return min(min(distSP(a1, a2, b1), distSP(a1, a2, b2)),\n             min(distSP(b1, b2, a1), distSP(b1, b2, a2)));\n}\nmain(){\n    int n;\n    cin>>n;\n    double a[8];\n    while(n--){\n        rep(i,8)cin>>a[i];\n        printf(\"%.9f\\n\",distSS(P(a[0],a[1]),P(a[2],a[3]),P(a[4],a[5]),P(a[6],a[7])));\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i,n) for(int i = 0; i < (int)n; i++)\n\nconst double eps = 1e-10;\n\nstruct Point {\n  double x, y;\n  Point(double x = 0.0, double y = 0.0) : x(x), y(y) {}  \n  double norm() {return sqrt(x*x + y*y);}\n};\n\nPoint operator + (const Point &p, const Point &q) {return Point(p.x + q.x, p.y + q.y);}\nPoint operator - (const Point &p, const Point &q) {return Point(p.x - q.x, p.y - q.y);}\ndouble operator * (const Point &p, const Point q) {return p.x * q.x + p.y * q.y;}\nbool operator == (const Point &p, const Point &q) {return (abs(p.x - q.x) < eps && abs(p.y - q.y) < eps);}\nbool operator != (const Point &p, const Point &q) {return !(p == q);}\ndouble cross(const Point &p, const Point &q) {return p.x*q.y - p.y*q.x;}\ndouble dist(const Point &p, const Point &q) {return (p-q).norm();}\n\nstruct Segment {\n  Point p , q;\n  Segment(Point p = Point(0.0,0.0), Point q = Point(0.0,0.0)) : p(p), q(q) {}\n};\n\nstruct Line {\n  double a, b, c;\n  Line(double a, double b, double c) : a(a), b(b), c(c) {}\n  Line(Point p, Point q) {\n    a = q.y - p.y;\n    b = p.x - q.x;\n    c = q.x * p.y - p.x * q.y;\n  }\n};\n\nstruct Circle {\n  double r;\n  Point p;\n  Circle(Point p = Point(0.0, 0.0), double r = 0.0) : p(p), r(r) {}\n};\n\n// 点の直線への射影\nPoint projection (Point p, Line l) {\n  double x = p.x - l.a * (l.a*p.x + l.b*p.y + l.c) / (l.a*l.a + l.b*l.b);\n  double y = p.y - l.b * (l.a*p.x + l.b*p.y + l.c) / (l.a*l.a + l.b*l.b);\n  return Point(x,y);\n}\n\n// 線対称な点\nPoint reflection(Point p, Line l) {\n  double x = p.x - 2.0 * l.a * (l.a*p.x + l.b*p.y + l.c) / (l.a*l.a + l.b*l.b);\n  double y = p.y - 2.0 * l.b * (l.a*p.x + l.b*p.y + l.c) / (l.a*l.a + l.b*l.b);\n  return Point(x,y);\n}\n\n// 点の線分からの回転方向\nint ccw(Point p, Point p1, Point p2) {\n  p1 = p1 - p; p2 = p2 - p;\n  if(cross(p1,p2) > eps) return 1; \n  if(cross(p1,p2) < -eps) return -1; \n  if(p1 * p2 < 0) return 2; \n  if(p1.norm() < p2.norm()) return -2; \n  return 0; \n}\n\n// 点が線分上にあるか判定\nbool on_segment(Point p, Segment s) {\n  return (ccw(s.p,s.q,p) == 0 ? true : false);\n}\n\n// 線分の交差判定\nbool segment_segment_cross(const Segment l, const Segment s) {\n  return ccw(l.p,l.q,s.p) * ccw(l.p,l.q,s.q) <= 0 && ccw(s.p,s.q,l.p) * ccw(s.p,s.q,l.q) <= 0;\n}\n\n// 直線の平行・直交判定 (平行:2 直交:1 その他:0)\nint line_parallel_orthogonal(Line l, Line s) {\n  if(abs(l.a*s.a + l.b*s.b) < eps) return 1;\n  else if(abs(l.a*s.b - l.b*s.a) < eps) return 2;\n  else return 0;\n}\n\n// 直線と直線の交点 \nvector<Point> line_line_cross(Line l, Line s) {\n  vector<Point> vp;\n  if(line_parallel_orthogonal(l,s) != 2) {\n    Point p;\n    p.x = (l.b*s.c - s.b*l.c) / (l.a*s.b - s.a*l.b);\n    p.y = (-l.a*s.c + s.a*l.c) / (l.a*s.b - s.a*l.b);\n    vp.push_back(p);\n  }\n  return vp;\n}\n\n// 点と直線の距離\ndouble point_line_dist(Point p, Line l) {\n  return abs(l.a*p.x + l.b*p.y + l.c) / sqrt(l.a*l.a + l.b*l.b);\n}\n\n// 点と線分の距離\ndouble point_segment_dist(Point p, Segment s) {\n  Point h = projection(p,Line(s.p,s.q));\n  if(on_segment(h,s)) return dist(p,h);\n  else return min(dist(p,s.p),dist(p,s.q));\n}\n\n// 線分と線分の距離\ndouble segment_segment_dist(Segment l, Segment s) {\n  if(segment_segment_cross(l,s)) return 0.0;\n  else return min({point_segment_dist(l.p,s),point_segment_dist(l.q,s),point_segment_dist(s.p,l),point_segment_dist(s.q,l)});\n}\n\n// 円と直線の交点\nvector<Point> circle_line_cross(Line l, Circle c) {\n  vector<Point> vp;\n  Point h = projection(c.p,l);\n\n  double d = l.a*c.p.x + l.b*c.p.y + l.c;\n  double q = c.r*c.r - d*d / (l.a*l.a + l.b*l.b);\n  if(q >= eps) {\n    Point p1, p2;\n    p1.x = h.x + sqrt(q) * l.b / sqrt(l.a*l.a + l.b*l.b);\n    p1.y = h.y - sqrt(q) * l.a / sqrt(l.a*l.a + l.b*l.b);\n    p2.x = h.x - sqrt(q) * l.b / sqrt(l.a*l.a + l.b*l.b);\n    p2.y = h.y + sqrt(q) * l.a / sqrt(l.a*l.a + l.b*l.b);\n    vp.push_back(p1);\n    vp.push_back(p2);\n  } else if(abs(q) < eps) {\n    vp.push_back(h);\n  }\n  return vp;\n} \n\nint main() {\n int q;\n  cin >> q;\n  rep(i,q) {\n    Point p0, p1, p2, p3;\n    cin >> p0.x >> p0.y >> p1.x >> p1.y >> p2.x >> p2.y >> p3.x >> p3.y;\n    Segment l(p0,p1), s(p2,p3);\n    printf(\"%.9lf\\n\",segment_segment_dist(l,s));\n  }\n}\n\n\n\n\n"
  },
  {
    "language": "C++",
    "code": "// {{{ header\n#include <bits/stdc++.h>\nusing namespace std;\n\nusing i8   = int8_t;\nusing u8   = uint8_t;\nusing i16  = int16_t;\nusing u16  = uint16_t;\nusing i32  = int32_t;\nusing u32  = uint32_t;\nusing i64  = int64_t;\nusing u64  = uint64_t;\nusing i128 = __int128_t;\nusing u128 = __uint128_t;\n\nusing f32  = float;\nusing f64  = double;\nusing f80  = __float80;\nusing f128 = __float128;\n// }}}\n\nconstexpr i64 INF = 1'010'000'000'000'000'000LL;\n\nconstexpr i64 MOD = 1'000'000'007LL;\n\nconstexpr f64 EPS = 1e-12;\n\nconstexpr f64 PI = 3.14159265358979323846;\n\n// {{{ util\n#define FOR(i, start, end) for(i64 i = (start), i##_end=(end); i < i##_end; ++i)\n#define REP(i, n) FOR(i, 0, n)\n\n#define ALL(f,c,...) (([&](decltype((c)) cccc) { return (f)(begin(cccc), end(cccc), ## __VA_ARGS__); })(c))\n#define SLICE(f,c,l,r,...) (([&](decltype((c)) cccc, decltype((l)) llll, decltype((r)) rrrr) {\\\n    auto iiii = llll <= rrrr ? begin(cccc)+llll : end(cccc);\\\n    auto jjjj = llll <= rrrr ? begin(cccc)+rrrr : end(cccc);\\\n    return (f)(iiii, jjjj, ## __VA_ARGS__);\\\n})(c,l,r))\n\n#define GENERIC(f) ([](auto&&... args) -> decltype(auto) { return (f)(forward<decltype(args)>(args)...); })\n\ntemplate<typename C>\ni64 SIZE(const C& c) { return static_cast<i64>(c.size()); }\n\ntemplate<typename T, size_t N>\ni64 SIZE(const T (&)[N]) { return static_cast<i64>(N); }\n\nbool is_odd (i64 x) { return x % 2 != 0; }\nbool is_even(i64 x) { return x % 2 == 0; }\n\ntemplate<typename T> i64 cmp(T x, T y) { return (y<x) - (x<y); }\ntemplate<typename T> i64 sgn(T x) { return cmp(x, T(0)); }\n\n// Haskell の divMod と同じ\npair<i64,i64> divmod(i64 a, i64 b) {\n    i64 q = a / b;\n    i64 r = a % b;\n    if((b>0 && r<0) || (b<0 && r>0)) {\n        --q;\n        r += b;\n    }\n    return make_pair(q,r);\n}\n\ni64 div_ceil(i64 a, i64 b) {\n    i64 q = a / b;\n    i64 r = a % b;\n    if((b>0 && r>0) || (b<0 && r<0))\n        ++q;\n    return q;\n}\n\ni64 div_floor(i64 a, i64 b) {\n    return divmod(a,b).first;\n}\n\ni64 modulo(i64 a, i64 b) {\n    return divmod(a,b).second;\n}\n\nbool feq(f64 x, f64 y, f64 eps=EPS) {\n    return fabs(x-y) < eps;\n}\n\ntemplate<typename T, typename U>\nbool chmax(T& xmax, const U& x) {\n    if(xmax < x) {\n        xmax = x;\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ntemplate<typename T, typename U>\nbool chmin(T& xmin, const U& x) {\n    if(x < xmin) {\n        xmin = x;\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ntemplate<typename InputIt>\nauto SUM(InputIt first, InputIt last) {\n    using T = typename iterator_traits<InputIt>::value_type;\n    return accumulate(first, last, T());\n}\n\ntemplate<typename ForwardIt, typename UnaryOperation>\nForwardIt transform_self(ForwardIt first, ForwardIt last, UnaryOperation op) {\n    return transform(first, last, first, op);\n}\n\ntemplate<typename C>\nvoid UNIQ(C& c) {\n    c.erase(ALL(unique,c), end(c));\n}\n\ntemplate<typename BinaryFunc, typename UnaryFunc>\nauto ON(BinaryFunc bf, UnaryFunc uf) {\n    return [bf,uf](const auto& x, const auto& y) {\n        return bf(uf(x), uf(y));\n    };\n}\n\ntemplate<typename T>\nvoid RD(T& x) {\n    cin >> x;\n#ifdef PROCON_LOCAL\n    assert(cin);\n#endif\n}\n\ntemplate<typename T>\nvoid RD(vector<T>& v, i64 n) {\n    v.reserve(n);\n    REP(_, n) {\n        T e; RD(e);\n        v.emplace_back(e);\n    }\n}\n\ntemplate<typename T>\nostream& operator<<(ostream& out, const vector<T>& v) {\n    for(auto first = begin(v), it = first; it != end(v); ++it) {\n        if(it != first)\n            out << ' ';\n        out << *it;\n    }\n    return out;\n}\n\ntemplate<typename T1, typename T2>\nostream& operator<<(ostream& out, const pair<T1,T2>& p) {\n    return out << '(' << p.first << ',' << p.second << ')';\n}\n\nvoid PRINT() {}\n\ntemplate<typename T, typename... TS>\nvoid PRINT(const T& x, const TS& ...args) {\n    cout << x;\n    if(sizeof...(args)) {\n        cout << ' ';\n        PRINT(args...);\n    }\n}\n\ntemplate<typename... TS>\nvoid PRINTLN(const TS& ...args) {\n    PRINT(args...);\n    cout << '\\n';\n}\n\ntemplate<typename T>\nvoid DBG_IMPL(i64 line, const char* expr, const T& value) {\n#ifdef PROCON_LOCAL\n    cerr << \"[L \" << line << \"]: \";\n    cerr << expr << \" = \" << value << \"\\n\";\n#endif\n}\n\n#define DBG(expr) DBG_IMPL(__LINE__, #expr, (expr))\n// }}}\n\n// {{{ init\nstruct ProconInit {\n    static constexpr int IOS_PREC = 15;\n    static constexpr bool AUTOFLUSH = false;\n\n    ProconInit() {\n        cin.tie(nullptr);\n        ios::sync_with_stdio(false);\n        cout << fixed << setprecision(IOS_PREC);\n#ifdef PROCON_LOCAL\n        cerr << fixed << setprecision(IOS_PREC);\n#endif\n        if(AUTOFLUSH)\n            cout << unitbuf;\n    }\n} PROCON_INIT;\n// }}}\n\n//--------------------------------------------------------------------\n\nstruct Vector {\n    f64 x, y;\n\n    Vector() : Vector(0.0,0.0) {}\n    Vector(f64 xx, f64 yy) : x(xx), y(yy) {}\n\n    const Vector operator-() const {\n        return Vector(-x,-y);\n    }\n    Vector& operator+=(const Vector& rhs) {\n        x += rhs.x;\n        y += rhs.y;\n        return *this;\n    }\n    Vector& operator-=(const Vector& rhs) {\n        x -= rhs.x;\n        y -= rhs.y;\n        return *this;\n    }\n    Vector& operator*=(f64 rhs) {\n        x *= rhs;\n        y *= rhs;\n        return *this;\n    }\n    Vector& operator/=(f64 rhs) {\n        x /= rhs;\n        y /= rhs;\n        return *this;\n    }\n\n    f64 norm() const { return x*x + y*y; }\n    f64 abs() const { return sqrt(norm()); }\n};\n\nconst Vector operator+(const Vector& lhs, const Vector& rhs) { return Vector(lhs) += rhs; }\nconst Vector operator-(const Vector& lhs, const Vector& rhs) { return Vector(lhs) -= rhs; }\nconst Vector operator*(const Vector& lhs, f64 rhs) { return Vector(lhs) *= rhs; }\nconst Vector operator*(f64 lhs, const Vector& rhs) { return Vector(rhs) *= lhs; }\nconst Vector operator/(const Vector& lhs, f64 rhs) { return Vector(lhs) /= rhs; }\n\nbool operator==(const Vector& lhs, const Vector& rhs) {\n    return feq(lhs.x,rhs.x) && feq(lhs.y,rhs.y);\n}\n\nostream& operator<<(ostream& out, const Vector& v) {\n    return out << \"Vector(\" << v.x << \",\" << v.y << \")\";\n}\n\nstruct Segment {\n    Vector p1, p2;\n\n    Segment(const Vector& pp1, const Vector& pp2) : p1(pp1), p2(pp2) {}\n    Segment(f64 x1, f64 y1, f64 x2, f64 y2) : p1(Vector(x1,y1)), p2(Vector(x2,y2)) {}\n\n    Vector vec() const { return p2 - p1; }\n\n    f64 norm() const { return vec().norm(); }\n    f64 abs() const { return vec().abs(); }\n};\n\nostream& operator<<(ostream& out, const Segment& seg) {\n    out << \"Segment(\";\n    out << \"(\" << seg.p1.x << \",\" << seg.p1.y << \")\";\n    out << \",\";\n    out << \"(\" << seg.p2.x << \",\" << seg.p2.y << \")\";\n    out << \")\";\n    return out;\n}\n\nstruct Line {\n    Vector p1, p2;\n\n    Line(const Vector& pp1, const Vector& pp2) : p1(pp1), p2(pp2) {}\n    Line(f64 x1, f64 y1, f64 x2, f64 y2) : p1(Vector(x1,y1)), p2(Vector(x2,y2)) {}\n    Line(const Segment& seg) : p1(seg.p1), p2(seg.p2) {}\n\n    Vector vec() const { return p2 - p1; }\n};\n\nostream& operator<<(ostream& out, const Line& line) {\n    out << \"Line(\";\n    out << \"(\" << line.p1.x << \",\" << line.p1.y << \")\";\n    out << \",\";\n    out << \"(\" << line.p2.x << \",\" << line.p2.y << \")\";\n    out << \")\";\n    return out;\n}\n\nf64 geo_dot(const Vector& lhs, const Vector& rhs) {\n    return lhs.x*rhs.x + lhs.y*rhs.y;\n}\n\nf64 geo_cross(const Vector& lhs, const Vector& rhs) {\n    return lhs.x*rhs.y - lhs.y*rhs.x;\n}\n\nVector geo_project(const Line& line, const Vector& p) {\n    Vector v = line.vec();\n    f64 r = geo_dot(p-line.p1, v) / v.norm();\n    return line.p1 + r*v;\n}\n\nenum ABC {\n    ABC_CCW        =  1,\n    ABC_CW         = -1,\n    ABC_ON_BACK    =  2,\n    ABC_ON_FRONT   = -2,\n    ABC_ON_SEGMENT =  0,\n};\n\nABC geo_abc(const Vector& a, const Vector& b, const Vector& c) {\n    Vector x = b - a;\n    Vector y = c - a;\n    f64 cross = geo_cross(x,y);\n    if(cross > 0) return ABC_CCW;\n    if(cross < 0) return ABC_CW;\n    f64 dot = geo_dot(x,y);\n    if(dot < 0) return ABC_ON_BACK;\n    if(x.norm() < y.norm()) return ABC_ON_FRONT;\n    return ABC_ON_SEGMENT;\n}\n\nbool geo_intersect(const Segment& x, const Segment& y) {\n    return geo_abc(x.p1,x.p2,y.p1) * geo_abc(x.p1,x.p2,y.p2) <= 0 &&\n           geo_abc(y.p1,y.p2,x.p1) * geo_abc(y.p1,y.p2,x.p2) <= 0;\n}\n\nf64 geo_distance(const Line& line, const Vector& p) {\n    Vector v = line.vec();\n    return fabs(geo_cross(v,p-line.p1)) / v.abs();\n}\n\nf64 geo_distance(const Segment& seg, const Vector& p) {\n    if(geo_dot( seg.vec(), p-seg.p1) < 0) return (p-seg.p1).abs();\n    if(geo_dot(-seg.vec(), p-seg.p2) < 0) return (p-seg.p2).abs();\n    return geo_distance(Line(seg), p);\n}\n\nf64 geo_distance(const Segment& seg1, const Segment& seg2) {\n    if(geo_intersect(seg1,seg2)) return 0;\n    return min({\n        geo_distance(seg1, seg2.p1),\n        geo_distance(seg1, seg2.p2),\n        geo_distance(seg2, seg1.p1),\n        geo_distance(seg2, seg1.p2),\n    });\n}\n\nVector geo_crosspoint(const Segment& x, const Segment& y) {\n    Line ly = Line(y);\n    f64 d1 = geo_distance(ly, x.p1);\n    f64 d2 = geo_distance(ly, x.p2);\n    return x.p1 + (d1/(d1+d2))*x.vec();\n}\n\nvoid RD(Vector& v) {\n    RD(v.x);\n    RD(v.y);\n}\n\nvoid solve() {\n    i64 Q; RD(Q);\n    REP(_, Q) {\n        Vector p0; RD(p0);\n        Vector p1; RD(p1);\n        Segment seg1(p0,p1);\n        Vector p2; RD(p2);\n        Vector p3; RD(p3);\n        Segment seg2(p2,p3);\n\n        f64 ans = geo_distance(seg1, seg2);\n        PRINTLN(ans);\n    }\n}\n\nsigned main() {\n    \n\n    solve();\n\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "\n#include<bits/stdc++.h>\n\ntypedef long double     lf;\n\nusing namespace std;\n\nconst lf EPS = 1e-9;\nconst lf oo = 1e15;\n\nstruct pt {\n  lf x, y;\n  pt( ) { }\n  pt( lf x, lf y ) : x( x ), y ( y ) { }\n};\n\ninline lf x( pt P ) { return P.x; }\ninline lf y( pt P ) { return P.y; }\n\nistream& operator >> ( istream& in, pt& p ) {\n  lf x,y; in >> x >> y;\n  p = pt(x,y); return in;\n}\n\nostream& operator << ( ostream& out, const pt& p ) {\n  out << double(p.x) << \" \" << double(p.y);\n  return out;\n}\n\npt operator + ( const pt& A, const pt& B ) {\n  return pt( x(A)+x(B), y(A)+y(B) );\n}\n\npt operator - ( const pt& A, const pt& B ) {\n  return pt( x(A)-x(B), y(A)-y(B) );\n}\n\n\npt operator * ( const lf& B, const pt& A ) {\n  return pt( x(A)*B, y(A)*B );\n}\n\npt operator * ( const pt& A, const lf& B ) {\n  return pt( x(A)*B, y(A)*B  );\n}\n\ninline lf dot( pt A, pt B ) {\n  return x(A)*x(B) + y(A)*y(B);\n}\n\ninline lf norm( pt A ) {\n  return x(A)*x(A) + y(A)*y(A);\n}\n\ninline lf abs( pt A ) {\n  return sqrt( norm(A) );\n}\n\ninline lf dist ( pt A, pt B ) { return abs( B - A ); }\n\nlf distToLine (pt p, pt A, pt B, pt &c) {\n  lf u = dot( p-A , B-A ) / norm( B-A );\n  c = A + u*( B-A );\n  return dist( p , c );\n}\n\npt refPoint(pt X, pt A, pt B) {\n  pt aux; distToLine(X, A, B, aux);\n  return X + lf(2.0)*(aux-X);\n}\n\ninline bool same ( lf a, lf b ) {\n  return a+EPS > b && b+EPS > a;\n}\n\ninline lf cross( pt A, pt B ) {\n  return x(A)*y(B) - y(A)*x(B);\n}\n\n///CHANGE\n// 0  for collineal points ( angle = 0 )\n// 1  for angle BAX counter clockwise\n// -1 for angle BAX clockwise\ninline int ccw (pt X, pt A, pt B) {\n  lf c = cross( B-A, X-A );\n  if( same( c, 0.0 ) ) { return 0; }\n  if( c > EPS ) { return 1; }\n  return -1;\n}\n\n///CHANGE\ninline bool segContains ( pt X, pt A, pt B) {\n  if ( !same ( 0, cross ( A-X, B-X ) ) ) return 0;\n  return ( dot ( A-X, B-X ) < EPS );\n}\n\ninline bool parallel( pt A, pt B, pt C, pt D ) {\n  return same ( 0, cross( B-A, D-C ) );\n}\n\n///NEW\ninline bool ortho( pt A, pt B, pt C, pt D ) {\n  return same ( 0, dot( B-A, D-C ) );\n}\n\ninline bool samePt ( pt A, pt B ) {\n  return same ( x(A), x(B) ) && same ( y(A), y(B) );\n}\n\npt linesIntersection ( pt A, pt B, pt C, pt D ) {\n  lf x = cross ( C, D-C ) - cross ( A, D-C );\n  x /= cross ( B-A, D-C );\n  return A + x*(B-A);\n}\n\ninline bool collinearSegsIntersects ( pt A, pt B, pt C, pt D ) {\n  return segContains(A,C,D) || segContains(B,C,D)\n      || segContains(C,A,B) || segContains(D,A,B);\n}\n\nbool segmentsIntersect(pt A, pt B, pt C, pt D) {\n  if( samePt(A,B) )\n    return segContains( A, C, D );\n  if( samePt(C,D) )\n    return segContains( C, A, B );\n  if( parallel(A,B,C,D) )\n    return collinearSegsIntersects( A,B,C,D );\n  pt aux = linesIntersection(A,B,C,D);\n  return segContains(aux,A,B) && segContains(aux,C,D);\n}\n\n/// --------------------------------------------\n\nlf distToSegment(pt p, pt A, pt B, pt &c) {\n  lf u = dot( p-A , B-A ) / norm( B-A );\n  if( u < EPS ) { c = A; return dist( p , A ); }\n  if( (u-1.0) > EPS ) { c = B; return dist( p, B ); }\n  return distToLine(p,A,B,c);\n}\n\nint n;\n\nint main() {\n  ios_base::sync_with_stdio(0);\n  cin.tie(0);\n  cout << fixed << setprecision(10);\n\n  cin >> n;\n  for( int i = 0; i < n; ++i ) {\n    pt A,B,C,D, aux;\n    cin >> A >> B >> C >> D;\n    lf ans = oo;\n    if( segmentsIntersect( A, B, C, D ) ) {\n      ans = 0.0;\n    }\n    ans = min( ans, distToSegment( C, A, B, aux ) );\n    ans = min( ans, distToSegment( D, A, B, aux ) );\n    cout << double(ans) << '\\n';\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < (EPS))\n\n#define COUNTER_CLOCKWISE (1)\n#define CLOCKWISE (-1)\n#define ONLINE_BACK (2)\n#define ONLINE_FRONT (-2)\n#define ON_SEGMENT (0)\n\nstruct Point \n{\n  double x, y;\n  \n  Point() {}\n  \n  Point(double x, double y) : x(x), y(y) {}\n  \n  void input() { scanf(\"%lf %lf\", &x, &y); }\n  void output() { printf(\"%.10f %.10f\\n\", x, y); }\n  double abs() { return (sqrt(norm())); }\n  double norm() { return (x * x + y * y); }\n  \n  Point operator + (Point d) { return (Point(x + d.x, y + d.y)); }\n  Point operator - (Point d) { return (Point(x - d.x, y - d.y)); }\n  Point operator - () { return (Point(-x, -y)); }\n  Point operator * (double a) { return (Point(x * a, y * a)); }\n  Point operator / (double a) { return (Point(x / a, y / a)); }\n  \n};\n\nstruct Segment\n{\n  Point p1, p2;\n  \n  Segment() {}\n  Segment(Point p1, Point p2) : p1(p1), p2(p2) {}\n\n  void input() { p1.input(); p2.input(); }\n  \n};\n\ntypedef Point Vector;\ntypedef vector < Point > Polygon;\ntypedef Segment Line;\n\ndouble dot(Vector a, Vector b)\n{\n  return (a.x * b.x + a.y * b.y);\n}\n\ndouble cross(Vector a, Vector b)\n{\n  return (a.x * b.y - a.y * b.x);\n}\n\nPoint project(Line l, Point p)\n{\n  Vector base = l.p2 - l.p1;\n  return (l.p1 + base * (dot(p - l.p1, base) / base.norm()));\n}\n\nPoint reflect(Line l, Point p)\n{\n  return (-p + project(l, p) * 2.0);\n}\n\n\nint ccw(Point p0, Point p1, Point p2)\n{\n  Vector a = p1 - p0, b = p2 - p0;\n  \n  if(cross(a, b) > EPS) return (COUNTER_CLOCKWISE);\n  if(cross(a, b) < -EPS) return (CLOCKWISE);\n  if(dot(a, b) < -EPS) return (ONLINE_BACK);\n  if(a.norm() < b.norm()) return (ONLINE_FRONT);\n  \n  return (ON_SEGMENT);\n}\n\nbool intersect(Point p1, Point p2, Point p3, Point p4)\n{\n  return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 && ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\n\nbool intersect(Segment s1, Segment s2)\n{\n  return (intersect(s1.p1, s1.p2, s2.p1, s2.p2));\n}\n\ndouble getDistanceLP(Line l, Point p)\n{\n  return (abs(cross(l.p2 - l.p1, p - l.p1) / (l.p2 - l.p1).abs()));\n}\n\ndouble getDistanceSP(Segment s, Point p)\n{\n  if(dot(s.p2 - s.p1, p - s.p1) < 0.0) return ((p - s.p1).abs());\n  if(dot(s.p1 - s.p2, p - s.p2) < 0.0) return ((p - s.p2).abs());\n  return (getDistanceLP(s, p));\n}\n\ndouble getDistance(Segment s1, Segment s2)\n{\n  double ans;\n\n  if(intersect(s1, s2)) {\n    ans = 0.0;\n  } else {\n    ans = min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2));\n    ans = min(ans, min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)));\n  }\n\n  return (ans);\n}\n\n\nmain()\n{\n  int n;\n  \n  cin >> n;\n  for(int i = 0; i < n; i++) {\n    Segment s1, s2;\n    s1.input(); s2.input();\n    printf(\"%.10f\\n\", getDistance(s1, s2));\n  }\n\n  return (0);\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\n#include <cmath>\n#include <iomanip>\n\n\nusing namespace std;\n\n//-------------------------------------------------------------------------------------\n/*2点[(x1,y1),(x2,y2)]を入力し二点を通る直線ax+by+cの(a,b,c)を返す,  */\n/*x1==x2ならfalseを返す*/\n/*falseならばx=cの形の直線*/\nvoid straight_line_passing_through_the_two_points(double x1, double y1, double x2, double y2, double *a, double *b, double *c){\n    *a=(y2-y1);\n    *b=-(x2-x1);\n    *c=y2*(x2-x1)-x2*(y2-y1);\n}\n\n//-------------------------------------------------------------------------------------\n/*(x,y)を通るa1x+b1y+c1=0に垂直な直線a2x+b2y+c2=0を返す*/\nbool vertical_straight_line(double x, double y, double a1, double b1, double c1, double *a2, double *b2, double *c2){\n    if(a1*x+b1*y+c1==0)return false;\n    *a2 = -b1;\n    *b2 = a1;\n    *c2 = b1*x - a1*y;\n    return true;\n}\n\n\n//-------------------------------------------------------------------------------------\n/*2直線 a1x+b1y+c1=0 a2x+b2y+c2=0 の交点 (x,y)を返す*/\n/*2直線が平行であるならば0を返す*/\nint intersection_and_parallel(double a1, double b1, double c1, double a2, double b2, double c2, double *x, double *y){\n    if(a1*b2==a2*b1)return false;//平行の判定\n    \n    *x = (b1*c2-b2*c1)/(a1*b2-a2*b1);\n    *y = (a2*c1-a1*c2)/(a1*b2-a2*b1);\n    \n    return true;\n}\n\n//-------------------------------------------------------------------------------------\n/* \n a1x+b1y+c1=0 と　a2x+b2y+c2=0 が\n 平行なら2\n 直交なら1\n それ以外は0\n を返す\n */\nint judges_whether_parallel_or_perpendicular(double a1, double b1, double c1, double a2, double b2, double c2){\n    if(a1*b2 == a2*b1)return 2;\n    if(a1*a2 + b1*b2 == 0)return 1;\n    return 0;\n}\n\n\n//-------------------------------------------------------------------------------------\n/*直線ax+by+c=0に対し　(x1,y1)と線対称な位置(x2,y2)を出力*/\n/*vertical_straight_lineを使用*/\n/*intersection_and_parallelを使用*/\nvoid line_symmetry(double a, double b, double c, double x1, double y1, double *x2, double *y2){\n    //垂直な直線を求める\n    double a2,b2,c2;\n    vertical_straight_line(x1, y1, a, b, c, &a2, &b2, &c2);\n    \n    //垂直な直線との交点を求める\n    double c_x, c_y;\n    intersection_and_parallel(a, b, c, a2, b2, c2, &c_x, &c_y);\n    *x2 = x1 + 2*(c_x-x1);\n    *y2 = y1 + 2*(c_y-y1);\n}\n\n\n\n//-------------------------------------------------------------------------------------\n/*2点(x1,y1), (x2,y2) の距離*/\ndouble distance_between_the_two_pointss(double x1,double y1, double x2, double y2){\n    return  sqrt(fabs((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)));\n}\n\n\n//-------------------------------------------------------------------------------------\n/* (x1,y1)から(x2,y2)へ伸ばした直線の角度を求める  */\ndouble angle_of_the_line(double x1, double y1, double x2, double y2){\n    return atan2(y2-y1, x2-x1);\n}\n\n//-------------------------------------------------------------------------------------\n/*(x1,y1)と(x2,y2)を両端に持つ線分と*/\n/*(x3,y3)と(x4,y4)を両端に持つ線分が*/\n/*交差するなら1 交差しないなら0を出力する*/\n/* straight_line_passing_through_the_two_pointsを使用 */\n/* intersection_and_parallelを使用 */\nint line_segment_cross_decision(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4){\n    double a1,b1,c1, a2,b2,c2;\n    straight_line_passing_through_the_two_points(x1, y1, x2, y2, &a1, &b1, &c1);\n    straight_line_passing_through_the_two_points(x3, y3, x4, y4, &a2, &b2, &c2);\n    double c_x,c_y;\n    bool is_parallel = intersection_and_parallel(a1, b1, c1, a2, b2, c2, &c_x, &c_y);\n    if(is_parallel==false){\n        \n        if(a1==a2&&b1==b2&&c1==c2){//一直線上にある.\n            \n            if(min(x1,x2)<=x3&&x3<=max(x1,x2)&&min(y1,y2)<=y3&&y3<=max(y1,y2))return 1;\n            if(min(x1,x2)<=x4&&x4<=max(x1,x2)&&min(y1,y2)<=y4&&y4<=max(y1,y2))return 1;\n            if(min(x3,x4)<=x1&&x1<=max(x3,x4)&&min(y3,y4)<=y1&&y1<=max(y3,y4))return 1;\n            if(min(x3,x4)<=x2&&x2<=max(x3,x4)&&min(y3,y4)<=y2&&y2<=max(y3,y4))return 1;\n            \n\n\n        }\n        return 0;\n    }\n    if(x1>x2)swap(x1, x2);\n    if(x3>x4)swap(x3, x4);\n    if(y1>y2)swap(y1, y2);\n    if(y3>y4)swap(y3, y4);\n\n    if(x1<=c_x&&c_x<=x2&&x3<=c_x&&c_x<=x4){\n        if(y1<=c_y&&c_y<=y2&&y3<=c_y&&c_y<=y4)return 1;\n    }\n    return 0;\n    \n}\n\n\n\n//-------------------------------------------------------------------------------------\n/*点(p_x,p_y)と線分(x1,y1)(x2,y2)の距離*/\n/* straight_line_passing_through_the_two_points */\n/* vertical_straight_line */\n/* intersection_and_parallel */\ndouble distance_between_the_line_segment_and_point(double p_x, double p_y, double x1, double y1, double x2, double y2){\n    double a,b,c;//(x1,y1)(x2,y2)を通る直線\n    straight_line_passing_through_the_two_points(x1, y1, x2, y2, &a, &b, &c);\n    double a2,b2,c2;//直線ax+by+c=0に垂直な直線\n    double v_x, v_y;//二つの直線の交点\n    bool is_not_parallel = vertical_straight_line(p_x, p_y, a, b, c, &a2, &b2, &c2);\n    intersection_and_parallel(a, b, c, a2, b2, c2, &v_x, &v_y);\n    \n    if(is_not_parallel){\n        if(min(x1,x2)<=v_x&&v_x<=max(x1,x2)&&min(y1,y2)<=v_y&&v_y<=max(y1,y2)){//(v_x,v_y)は線分の中にある\n            //cout<<\"a \";\n            return distance_between_the_two_pointss(p_x, p_y, v_x, v_y);\n        }else{//(v_x,v_y)は線分の外にある\n            double l1 = distance_between_the_two_pointss(p_x, p_y, x1, y1);\n            double l2 = distance_between_the_two_pointss(p_x, p_y, x2, y2);\n            //cout<<\"b \";\n            return min(l1,l2);\n        }\n    }else{\n        if(min(x1,x2)<=p_x&&p_x<=max(x1,x2)&&min(y1,y2)<=p_y&&p_y<=max(y1,y2)){//(p_x,p_y)は線分の中にある\n            //cout<<\"c \";\n            return 0.0;\n        }else{//(p_x,p_y)は線分の外にある\n            double l1 = distance_between_the_two_pointss(p_x, p_y, x1, y1);\n            double l2 = distance_between_the_two_pointss(p_x, p_y, x2, y2);\n            //cout<<\"d \";\n            return min(l1,l2);\n        }\n    }\n    \n}\n\n\n//-------------------------------------------------------------------------------------\n/*線分(x1,y1)(x2,y2)と線分(x3,y3)(x4,y4)の距離*/\n\ndouble distance_between_two_line_segment(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4){\n    //同一直線上にある場合\n    \n    //ぶつかる場合\n    if(line_segment_cross_decision(x1, y1, x2, y2, x3, y3, x4, y4)){\n        return 0.0;\n    }\n    \n    //ぶつからない場合\n    double l1,l2,l3,l4;\n    l1=distance_between_the_line_segment_and_point(x1, y1, x3, y3, x4, y4);\n    //cout<<l1<<endl;\n    l2=distance_between_the_line_segment_and_point(x2, y2, x3, y3, x4, y4);\n    //cout<<l2<<endl;\n\n    l3=distance_between_the_line_segment_and_point(x3, y3, x1, y1, x2, y2);\n    //cout<<l3<<endl;\n    l4=distance_between_the_line_segment_and_point(x4, y4, x1, y1, x2, y2);\n    \n        \n    //cout<<l4<<endl;\n    \n    return min(l1,min(l2,min(l3,l4)));\n}\n\n\n\nint main(int argc, const char * argv[]){\n    int q;\n    cin>>q;\n    for(int i=0; i<q; i++){\n        double x1,x2,x3,x4,y1,y2,y3,y4;\n        cin>>x1>>y1>>x2>>y2>>x3>>y3>>x4>>y4;\n        \n\n        cout<< fixed << setprecision(10)<<distance_between_two_line_segment(x1, y1, x2, y2, x3, y3, x4, y4)<<endl;\n        //cout<<\"========\"<<endl;\n        \n        \n        \n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> P;\ntypedef complex<double> V;\ntypedef vector<P> vecP;\ntypedef pair<P,P> L;\ntypedef pair<P,P> S;\ntypedef pair<P,double> C;\nconst double eps=1e-8;\nconst double PI=acos(-1);\nconst double PI2=PI*2.0;\n\nnamespace std{\n  bool operator < (const P &a,const P &b){\n    return (a.imag()==b.imag()?\n            a.real()<b.real():\n            a.imag()<b.imag());\n  }\n};\n\nV normal(V a){\n  assert( abs(a)>0 );\n  return a/abs(a);\n}\n\ndouble Sqrt( double x ){\n  if(x<0)return 0;\n  else return sqrt(x);\n}\n\nP Vector(L a){\n  return a.second-a.first;\n}\n\nbool eq(double a,double b){\n  return (-eps<a-b&&a-b<eps);\n}\n\nbool eq(P a,P b){\n  return ( eq(a.real(),b.real()) && eq(a.imag(),b.imag()) );\n}\n\ndouble dot(P a,P b){\n  return real(b*conj(a));\n}\n\ndouble cross(P a,P b){\n  return imag(b*conj(a));\n}\n\ndouble getArg(P a,P b){\n  return arg(b*conj(a));\n}\n\ndouble getTime(V a,V b){\n  assert( eq(cross(a,b),0) );\n  return ( dot(a,b) < 0 ? -1.0 : 1.0 ) * abs(b) / abs(a);\n}\n\n\nP project(P a,P b,P c){\n  b-=a,c-=a;\n  return a+b*real(c/b);\n}\n\nP reflect(P a,P b,P c){\n  b-=a,c-=a;\n  return a+b*conj(c/b);\n}\n\nint ccw(P a,P b,P c){\n  P ab=b-a,ac=c-a;\n  P k=ac*conj(ab);\n  if(k.imag()>0)return 1;\n  if(k.imag()<0)return -1;\n  if(k.real()<0)return 2;\n  if(abs(ab)<abs(ac))return -2;\n  return 0;\n}\n\nbool isParallel(P a,P b){\n  return eq(0, cross(a,b));\n}\n\nbool isParallel(S a,S b){\n  return eq(0, cross( Vector(a) , Vector(b) ) );\n}\n\nbool onLP(L l,P p){\n  P a=l.first, b=l.second;\n  return eq(0, cross(b-a,p-a));\n}\n\nbool onSP(S s,P p){\n  P a=s.first, b=s.second;\n  return eq( abs(b-a) , abs(a-p)+abs(b-p) );\n}\n\nbool isCrossSS(S s0,S s1){\n  P a=s0.first, b=s0.second;\n  P c=s1.first, d=s1.second;\n  int f0 = ccw(a,b,c) * ccw(a,b,d);\n  int f1 = ccw(c,d,a) * ccw(c,d,b);\n  return (f0<=0 && f1<=0);\n}\n\nbool isCrossLS(L l,S s){\n  P a=l.first, b=l.second;\n  P c=s.first, d=s.second;\n  return ( ccw(a,b,c) * ccw(a,b,d) <= 0 );\n}\n\ndouble distLP(L l,P p){\n  P a=l.first, b=l.second;\n  double res = cross(b-a,p-a) / abs(b-a);\n  return abs(res);\n}\n\ndouble distSP(S s,P p){\n  P a=s.first, b=s.second;\n  if( dot(b-a,p-a) < eps )return abs(p-a);\n  if( dot(a-b,p-b) < eps )return abs(p-b);\n  return distLP(s,p);\n}\n\ndouble distSS(S s0,S s1){\n  if( isCrossSS(s0,s1) )return 0;\n  double res0 = min( distSP( s0, s1.first ) , distSP(s0, s1.second) );\n  double res1 = min( distSP( s1, s0.first ) , distSP(s1, s0.second) );\n  return min(res0,res1);\n}\n\nP getCrossLL(L l0,L l1){\n  P a=l0.first, b=l0.second;\n  P c=l1.first, d=l1.second;\n  a-=d;b-=d;c-=d;\n  return d+a+(b-a)*imag(a/c)/imag(a/c-b/c);\n}\n\n\n \nint inPolygon(vecP &t,P p){\n  int n=t.size();\n  double sum=0;\n  for(int i=0;i<n;i++){\n    P a=t[i],b=t[(i+1==n?0:i+1)];\n    if( onSP(S(a,b),p) )return 1;\n    sum+= getArg(a-p,b-p);\n  }\n  if( abs(sum) < eps )return 0;\n  else return 2;\n}\n\nvecP andrewScan(vecP &t){\n  int N=t.size(),C=0;\n  vecP R(N);\n  for(int i=0;i<N;i++){\n    while(2<=C&&ccw(R[C-2],R[C-1],t[i])==-1)C--;\n    R[C++]=t[i];\n  }\n  vecP res(C);\n  for(int i=0;i<C;i++)res[i]=R[i];\n  return res;\n}\n \nvecP convexHull(vecP &t){\n  sort(t.begin(),t.end());\n  vecP u=andrewScan(t);\n  reverse(t.begin(),t.end());\n  vecP l=andrewScan(t);\n  for(int i=1;i+1<(int)l.size();i++)u.push_back(l[i]);\n  return u;\n}\n\nvecP cutConvex(vecP &t,L l){\n  P a=l.first, b=l.second;\n  int N=t.size();\n  vecP res;\n  for(int i=0;i<N;i++){\n    P c=t[i],d=t[(i+1)%N];\n    int C=ccw(a,b,c),D=ccw(a,b,d);\n    if(C!=-1)res.push_back(c);\n    if(C==-D&&abs(C)==1)res.push_back(getCrossLL( l ,L(c,d) ));\n  }\n  return res;\n}\n\nP getVector(const vecP &t, int id){\n  int n=t.size();\n  return t[ (id+1)%n ] - t[id%n];\n}\n\ndouble convex_diameter(vecP &t) {\n  int n = t.size();\n  int is = 0, js = 0;\n  for (int i = 1; i < n; ++i) {\n    if (imag(t[i]) > imag(t[is])) is = i;\n    if (imag(t[i]) < imag(t[js])) js = i;\n  }\n  double maxd = norm(t[is]-t[js]);\n \n  int i, maxi, j, maxj;\n  i = maxi = is;\n  j = maxj = js;\n  do {\n    \n    if (cross( getVector(t,i), getVector(t,j)) >= 0) j = (j+1) % n;\n    \n    else i = (i+1) % n;\n    if (norm(t[i]-t[j]) > maxd) {\n      maxd = norm(t[i]-t[j]);\n      maxi = i; maxj = j;\n    }\n  } while (i != is || j != js);\n  return maxd; /* farthest pair is (maxi, maxj). */\n}\n\nbool compare_y(const P &a,const P &b){\n  return a.imag() < b.imag();\n}\n\ndouble closest_pair(P *a, int n){\n  if(n <= 1) return 1e30;\n  int m = n / 2;\n  double x = a[m].real();\n  double d = min(closest_pair(a, m), closest_pair(a + m, n - m));\n  inplace_merge(a, a + m, a + n, compare_y);\n  vector<P> b;\n  for(int i=0;i<n;i++){\n    if( abs(a[i].real() - x) >= d) continue;\n    for(int j=0;j<(int)b.size();j++){\n      double dx = real(a[i] - b[b.size() - j - 1]);\n      double dy = imag(a[i] - b[b.size() - j - 1]);\n      if(dy >= d) break;\n      d = min(d, sqrt(dx * dx + dy * dy));\n    }\n    b.push_back(a[i]);\n  }\n  return d;\n}\n\nP _pool[200005];\ndouble minDist(vecP &t){\n  int n=t.size();\n  for(int i=0;i<n;i++)_pool[i]=t[i];\n  sort( _pool, _pool+n);\n  return closest_pair(_pool, n);\n}\n\nint getStateCC(C a,C b){\n  double ar=a.second, br=b.second;\n  double dist=abs(a.first-b.first);\n  if(dist>ar+br+eps)return 4;\n  if(dist>ar+br-eps)return 3;\n  if(dist>abs(ar-br)+eps)return 2;\n  if(dist>abs(ar-br)-eps)return 1;\n  return 0;\n}\n\nP getCrossCC(C a,C b){\n  P p1=a.first, p2=a.second;\n  double r1=a.second, r2=b.second;\n  double cA = (r1*r1+norm(p1-p2)-r2*r2) / (2.0*r1*abs(p1-p2));\n  return p1+(p2-p1)/abs(p1-p2)*r1*P(cA,Sqrt(1.0-cA*cA));\n}\n\nS getTangentCP(C a,P p){\n  P base=a.first-p;\n  double ar=a.second;\n  double w=Sqrt(norm(base)-ar*ar);\n  P s=p+base*P(w,ar)/norm(base)*w;\n  P t=p+base*P(w,-ar)/norm(base)*w;\n  return S(s,t);\n}\n\nS getInTangent(C a,C b,double flg=1.0){\n  P ap=a.first,bp=b.first;\n  double ar=a.second,br=b.second;\n  \n  P base=bp-ap;\n  double w=ar+br;\n  double h=Sqrt(norm(base)-w*w);\n  P k=base*P(w,h*flg)/norm(base);\n  return S(ap+k*ar,bp-k*br);\n}\n  \nS getOutTangent(C a,C b,double flg=1.0){\n  P ap=a.first,bp=b.first;\n  double ar=a.second,br=b.second;\n  \n  P base=bp-ap;\n  double h=br-ar;\n  \n  double w=Sqrt(norm(base)-h*h);\n  P k=base*P(w,h*flg)/norm(base)*P(0,flg);\n  return S(ap+k*ar,bp+k*br);\n}\n  \nvector<S> getTangent(C a,C b){\n  P ap=a.first,bp=b.first;\n  double ar=a.second,br=b.second;\n  \n  vector<S> res;\n  double dist=abs(ap-bp);\n    \n  if(dist>ar+br+eps)\n    res.push_back(getInTangent(a,b,1));\n  \n  if(dist>ar+br-eps)\n    res.push_back(getInTangent(a,b,-1));\n  \n  if(dist>abs(ar-br)+eps)\n    res.push_back(getOutTangent(a,b,1));\n  \n  if(dist>abs(ar-br)-eps)\n    res.push_back(getOutTangent(a,b,-1));\n  \n  return res;\n}\n\n\nvecP getCrossCS(C cir,S s, bool debug=false){\n  P a=s.first, b=s.second;\n  double cr=cir.second;\n  P cp=cir.first;\n  \n  vecP res;\n  P base=b-a,  target=project(a,b,cp);\n  \n  double length=abs(base), h=abs(cp-target);\n  base/=length;\n  \n  if(cr+eps<h)return res;\n  double w=Sqrt(cr*cr-h*h);\n  double L=getTime( normal(b-a) ,target-a)-w,  R=L+w*2.0;\n  \n  if( -eps<L && L< length+eps )res.push_back(a+base*L);\n  if( eq(L,R) )return res;\n  if( -eps<R && R< length+eps )res.push_back(a+base*R);\n  return res;\n}\n \ndouble getArea(C c,P a,P b){\n  P cp=c.first;\n  double cr=c.second;\n  \n  P va=cp-a,  vb=cp-b;\n  double A=abs(va), B=abs(vb);\n  double f=cross(va,vb), d=distSP( S(a,b) ,cp), res=0;\n  \n  if( eq(0, f ) )return 0;\n  if(A<cr+eps&&B<cr+eps)return f*0.5;\n  if(d>cr-eps)return cr*cr*PI*getArg(va,vb)/PI2;\n   \n  vecP u=getCrossCS(c, S(a,b) );\n  \n  assert( !u.empty() );\n  u.insert(u.begin(), a),  u.push_back(b);\n \n  for(int i=0;i+1<(int)u.size();i++) res+=getArea(c,u[i],u[i+1]);\n  return res;\n}\n \ndouble getCrossArea(vecP t,C c){\n  int n=t.size();\n  if(n<3)return 0;\n  double res=0;\n  for(int i=0;i<n;i++){\n    P a=t[i], b=t[(i+1)%n];\n    res+=getArea(c,a,b);\n  }\n  return res;\n}\n\nP input(){\n  int x,y;\n  cin>>x>>y;\n  return P(x,y);\n}\n\nvoid pr(P p,string str){\n  printf(\"%.10f %.10f\",p.real(),p.imag());\n  cout<<str;\n}\n\n\nint main(){\n  int Tc;\n  cin>>Tc;\n  while(Tc--){\n    P s,t;\n    s=input(), t=input();\n    P a,b;\n    a=input(), b=input();\n    printf(\"%.10f\\n\", distSS( S(s,t) , S(a,b) ) );\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <iterator>\n#include <iomanip>\n#include <cmath>\n#include <vector>\n#include <numeric>\n#include <cstdio>\n#include <bitset>\n#include <map>\n#include <string>\n#include <valarray>\n#include <queue>\n#include <utility>\n#include <functional>\n#include <list>\n\n\nusing namespace std;\n\nconst double ESP = 1E-8;\n\nstruct Point\n{\n    //friends\n    friend Point operator*(double c, const Point & p);\n    friend ostream & operator<<(ostream & os, const Point & p);\n    friend istream & operator>>(istream & is, Point & p);\n    friend double cross(const Point & p1, const Point & p2);\n\n  \n    //members\n    double x, y;\n\n    Point() {};\n    Point(double x, double y): x(x), y(y) {};\n\n    Point operator-(const Point & p) const\n    {\n        return Point(x - p.x, y - p.y);\n    }\n\n    double operator*(const Point & p) const\n    {\n        return x*p.x + y*p.y;\n    }\n\n    Point operator*(double c) const\n    {\n        return Point(c*x, c*y);\n    }\n\n    Point operator+(const Point & p) const\n    {\n        return Point(x+p.x, y+p.y);\n    }\n\n    Point projection(const Point & p1, const Point & p2) const\n    {\n        Point a(*this-p1), b(p2-p1);\n        return (a*b)/(b*b)*b+p1;\n    }\n\n    Point reflection(const Point & p1, const Point & p2) const\n    {\n        return this->projection(p1, p2)*2 - *this;\n    }\n\n};\n\n\nstruct Line\n{\n    Line() = default;\n    Line(const Point & p1, const Point & p2): \n        direction(p1-p2), point_online(p1) {}; \n    Point direction, point_online;\n    Point get_normal() const\n    {\n        return Point(direction.y, -direction.x);\n    }\n};\n\nstruct Segment\n{\n    Segment() = default;\n    Segment(const Point & p1, const Point & p2): \n        first_end(p1), second_end(p2), direction(p2-p1), \n        length(sqrt(direction*direction)), a(direction.y), \n        b(-direction.x), c(direction.x*p1.y-direction.y*p1.x)\n        {/*norm(p2-p1);*/};\n    Point get_normal() const\n    {\n        return Point(direction.y, -direction.x);\n    }\n\n    Point first_end, second_end, direction;\n    double length, a, b, c;\n};\n\n\n//function related with point\ndouble norm(const Point & p);\nbool check_clockwise(const Point & p0, const Point & p1, const Point & p2);\nbool check_counter_clockwise(const Point & p0, const Point & p1, const Point & p2);\nbool check_online_back(const Point & p0, const Point & p1, const Point & p2);\nbool check_online_front(const Point & p0, const Point & p1, const Point & p2);\nbool check_on_segment(const Point & p0, const Point & p1, const Point & p2);\n// bool check_parallel(const Point & p0, const Point & p1, const Point & p2, const Point & p3);\n\n\n//functions related with lines\nbool check_parallel(const Line & l1, const Line & l2);\nbool check_orthogonal(const Line & l1, const Line & l2);\nbool check_intersection(const Segment & s1, const Segment & s2);\nPoint get_cross_point(const Segment & s1, const Segment & s2);\ndouble distance_segment_to_segment(const Segment & s1, const Segment & s2);\n\n\nint main()\n{\n    Point p0, p1, p2, p3;\n\n    int q;\n    cin >> q;\n\n    int result;\n\n    for (int i = 0; i < q; i++)\n    {\n        cin >> p0 >> p1 >> p2 >> p3;\n\n        cout << setprecision(8) << fixed << distance_segment_to_segment(Segment(p0, p1), Segment(p2, p3)) << endl;\n    }\n\n}\n\n\n//friends\nPoint operator*(double c, const Point & p)\n{\n    return p*c;\n}\n\nostream & operator<<(ostream & os, const Point & p) \n{\n    os << setprecision(8) << fixed << p.x << ' ' << p.y << endl;\n    return os;\n}\n\nistream & operator>>(istream & is, Point & p)\n{\n    is >> p.x >> p.y;\n    return is;\n}\n\ndouble cross(const Point & p1, const Point & p2)\n{\n    return p1.x*p2.y-p1.y*p2.x;\n}\n\nbool check_counter_clockwise(const Point & p0, const Point & p1, const Point & p2)\n{\n    return cross(p1-p0,p2-p0) > 0;\n}\n\nbool check_clockwise(const Point & p0, const Point & p1, const Point & p2)\n{\n    return cross(p1-p0,p2-p0) < 0;\n}\n\ndouble norm(const Point & p)\n{\n    return sqrt(p*p);\n}\n\nbool check_online_back(const Point & p0, const Point & p1, const Point & p2)\n{\n    Point a(p2-p0), b(p1-p0);\n    double norm_a = norm(a), norm_b = norm(b);\n    return fabs(a*b+norm_a*norm_b)<ESP && fabs(norm_a)>ESP;\n}\n\nbool check_online_front(const Point & p0, const Point & p1, const Point & p2)\n{\n    Point a(p2-p0), b(p1-p0);\n    double norm_a = norm(a), norm_b = norm(b);\n    return fabs(a*b-norm_a*norm_b)<ESP && norm_a>norm_b && fabs(norm_a-norm_b)>ESP;\n}\n\nbool check_on_segment(const Point & p0, const Point & p1, const Point & p2)\n{\n    Point a(p2-p0), b(p1-p0);\n    double norm_a = norm(a), norm_b = norm(b);\n    return fabs(a*b-norm_a*norm_b)<ESP && ((norm_a<norm_b && fabs(norm_a-norm_b)>ESP) || fabs(norm_a-norm_b)<ESP);\n}\n\nbool check_parallel(const Line & l1, const Line & l2)\n{\n    return cross(l1.direction, l2.direction)==0;\n}\n\nbool check_orthogonal(const Line & l1, const Line & l2)\n{\n    return l1.direction*l2.direction==0;\n}\n\nbool check_on_segment(const  Segment & s, const Point & p)\n{\n    return cross(p-s.first_end, p-s.second_end)==0 && max(norm(p-s.first_end), norm(p-s.second_end))-s.length <= ESP;\n}\n\nbool check_intersection(const Segment & s1, const Segment & s2)\n{\n    bool mutually_different_side = \n        check_clockwise(s1.first_end, s1.second_end, s2.first_end) ==\n        check_counter_clockwise(s1.first_end, s1.second_end, s2.second_end) &&\n        check_clockwise(s2.first_end, s2.second_end, s1.first_end) ==\n        check_counter_clockwise(s2.first_end, s2.second_end, s1.second_end) &&\n        cross(s1.direction, s2.direction)!=0; //not parallel\n        \n\n    bool on_segment = \n        check_on_segment(s1, s2                                                                                                                                                     .first_end) ||\n        check_on_segment(s1, s2.second_end) ||\n        check_on_segment(s2, s1.first_end) ||\n        check_on_segment(s2, s1.second_end);\n\n    return mutually_different_side || on_segment;\n\n}\n\n\nPoint get_cross_point(const Segment & s1, const Segment & s2)\n{\n    // if (!check_intersection(s1,s2))\n    //     return;\n\n    double D = s1.a*s2.b - s2.a*s1.b, D1 = -(s1.c*s2.b-s1.b*s2.c), D2 = -(s1.a*s2.c-s2.a*s1.c);\n\n    return Point(D1/D, D2/D);\n}\n\nbool check_online(const Point & p, const Line & l)\n{\n    return fabs((p-l.point_online)*l.get_normal()) < ESP;\n    //alternative: calculate the distance from point to line\n    //alternative 2: cross product equals to 0\n}\n\nbool check_different_sides(const Point & p1, const Point & p2, const Line & l)\n{\n    return cross(l.direction, p1-l.point_online)*cross(l.direction, p2-l.point_online) < 0;\n}\n\nbool check_intersection(const Segment & s, const Line & l)\n{\n    return \n        check_online(s.first_end, l) ||\n        check_online(s.second_end, l) ||\n        check_different_sides(s.first_end, s.second_end, l);\n\n    // return cross(l.direction, s.first_end-l.point_online)*cross(l.direction, s.second_end-l.point_online) <= 0;\n}\n\n\n// bool check_intersection_segments(const Segment & s1, const Segment & s2)\n// {\n//     return \n// }\n\ndouble distance_point_to_point(const Point & p1, const Point & p2)\n{\n    return norm(p1-p2);\n}\n\ndouble distance_PL(const Point & p, const Line & l)\n{\n    return fabs((p-l.point_online)*l.get_normal())/norm(l.get_normal());\n}\n\ndouble distance_point_to_segment(const Point & p, const Segment & s)\n{\n    if (check_intersection(s, Line(p, p+s.get_normal())))\n        return distance_PL(p, Line(s.first_end, s.second_end));\n    return min(distance_point_to_point(p, s.first_end), distance_point_to_point(p, s.second_end));\n}\n\ndouble distance_PS(const Point & p, const Segment & s)\n{\n    // if (check_intersection(s, Line(p, p+s.get_normal())))\n    //     return fabs((p-s.first_end)*s.get_normal())/norm(s.get_normal());\n    // return min(distance_point_to_point(p, s.first_end), distance_point_to_point(p, s.second_end));\n\n    if ((s.first_end-s.second_end)*(p-s.second_end) < 0)\n        return distance_point_to_point(p, s.second_end);\n    if ((s.second_end-s.first_end)*(p-s.first_end) < 0)\n        return distance_point_to_point(p, s.first_end);\n    return distance_PL(p, Line(s.first_end, s.second_end));\n}\n\n\ndouble distance_segment_to_segment(const Segment & s1, const Segment & s2)\n{\n    if (check_intersection(s1, s2))\n        return 0;\n    double d1 = min(distance_point_to_segment(s1.first_end, s2), distance_point_to_segment(s1.second_end, s2));\n    double d2 = min(distance_point_to_segment(s2.first_end, s1), distance_point_to_segment(s2.second_end, s1));\n    return min(d1, d2);\n}\n"
  },
  {
    "language": "C++",
    "code": "// Code by ajcxsu\n// Geometry template\n\n#include<bits/stdc++.h>\n#define EPS (1e-9)\nusing namespace std;\n\nstruct Point {\n    double x,y;\n    Point(double x=0,double y=0):x(x), y(y) {}\n\n    Point operator +(Point p) { return Point(x+p.x,y+p.y); }\n    Point operator -(Point p) { return Point(x-p.x,y-p.y); } // 加减\n    Point operator *(double a) { return Point(x*a,y*a); }\n    Point operator /(double a) { return Point(x/a,y/a); } // 数乘\n\n    double norm() { return x*x+y*y; } // 范数\n    double abs() { return sqrt(norm()); } // 大小\n\n    bool operator < (const Point &p) { return x!=p.x?x<p.x:y<p.y; }\n    bool operator == (const Point &p) { return fabs(p.x-x) < EPS && fabs(p.y-y) < EPS; }\n} ;\ntypedef Point Vector;\n\ndouble dot(const Point &a, const Point &b) {\n    return a.x*b.x+a.y*b.y;\n} // 内积\ndouble cross(const Point &a, const Point &b) {\n    return a.x*b.y-a.y*b.x;\n} // 外积\nbool equals(double a, double b) { return fabs(a-b)<EPS; } // 误差相等\n\nstruct Line {\n    Point p1,p2;\n} ;\ntypedef Line Seg;\n\n/* 1 正交 2 平行 0 其他 */\nint PO(Vector a, Vector b) {\n    if(equals(dot(a,b), 0)) return 1;\n    else if(equals(cross(a,b), 0)) return 2;\n    else return 0;\n}\nint PO(Line a, Line b) { // 正交、平行判定\n    return PO(a.p2-a.p1, b.p2-b.p1);\n}\n\nistream& operator >>(istream &in, Vector &a) {\n    in>>a.x>>a.y;\n    return in;\n}\nistream& operator >>(istream &in, Line &a) {\n    in>>a.p1>>a.p2;\n    return in;\n} // 输入重载\n\nPoint project(Point a, Seg b) {\n    Vector base=b.p2-b.p1;\n    Vector hypo=a-b.p1;\n    return b.p1+base*(dot(base, hypo)/ base.norm());\n} // 投影\n\nPoint ref(Point a, Seg b) {\n    Vector base=project(a,b)-a;\n    return a+base*2;\n} // 映像\n\nint ccw(Vector a, Vector b) {\n    if(cross(a,b)>EPS) return 1; // Counter clockwise\n    else if(cross(a,b)<-EPS) return -1; // Clockwise\n    else if(dot(a,b)<-EPS) return 2; // Online back\n    else if(a.norm()<b.norm()) return -2; // Online front\n    else return 0; // On segement\n} // 判断顺时针逆时针\nint ccw(Point p0, Point p1, Point p2) {\n    return ccw(p1-p0, p2-p0);\n}\n\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n    if( ccw(p1,p2,p3)*ccw(p1,p2,p4) <= 0 &&\n        ccw(p3,p4,p1)*ccw(p3,p4,p2) <= 0) return 1;\n    return 0;\n}\nbool intersect(Seg a, Seg b) {\n    return intersect(a.p1, a.p2, b.p1, b.p2);\n} // 判断线段是否相交\n\nPoint crossp(Seg a, Seg b) {\n    Vector base=b.p2-b.p1, hypo=a.p1-b.p1, hypo2=a.p2-b.p1;\n    double h1=fabs(cross(base,hypo))/base.abs();\n    double h2=fabs(cross(base,hypo2))/base.abs();\n    double t=h1/(h1+h2);\n    return a.p1+(a.p2-a.p1)*t;\n} // 线段交点\n\ndouble disp(Point a, Seg b) {\n    if(dot(b.p2-b.p1,a-b.p1) < 0.0) return (a-b.p1).abs();\n    else if(dot(b.p1-b.p2, a-b.p2) < 0.0) return (a-b.p2).abs();\n    return (project(a,b)-a).abs();\n}\ndouble diss(Seg a, Seg b) {\n    if(intersect(a,b)) return 0.0;\n    return min(min(disp(a.p1,b), disp(a.p2,b)), min(disp(b.p1,a), disp(b.p2,a)));\n}\n\nostream& operator <<(ostream &out, Vector a) {\n    out<<a.x<<' '<<a.y;\n    return out;\n} // 输出重载\n\nint main() {\n    cout.setf(ios::fixed);\n    cout<<setprecision(10); // 设置输出精度\n\n    int q;\n    cin>>q;\n    while(q--) {\n        Seg a,b;\n        cin>>a>>b;\n        cout<<diss(a,b)<<endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define mm(a,b) memset(a,b,sizeof(a))\n#define ACCELERATE (ios::sync_with_stdio(false),cin.tie(0))\n#define pii pair<int,int>\n#define pdd pair<double,double>\n#define pll pair<long long,long long>\n#define mp make_pair\n#define pb push_back\n#define fi first\n#define se second\n#define rep(i,a,b) for(int i=(a);i<=(b);i++)\n#define per(i,a,b) for(int i=(a);i>=(b);i--)\n#define rush() int T;scanf(\"%d\",&T);while(T--)\n#define debug(x) cout<<#x<<\": \"<<x<<endl\n#define sc(a) scanf(\"%d\",&a)\n#define sc2(a,b) scanf(\"%d%d\",&a,&b)\n#define sc3(a,b,c) scanf(\"%d%d%d\",&a,&b,&c)\n#define pf(x) printf(\"%d\\n\",x)\n#define pf2(x,y) printf(\"%d %d\\n\",x,y)\n#define pf3(x,y,z) printf(\"%d %d %d\\n\",x,y,z)\n#define all(x) (x).begin(),(x).end()\n#define PI acos(-1.0)\n#define E exp(1.0)\n#define db double\n#define ll long long\n#define ld long double\n#define ull unsigned long long\n//#define io\nusing namespace std;\nconst int inf=0x3f3f3f3f;\nconst ll INF=0x3f3f3f3f3f3f3f3f;\n//#define gc getchar\n//char buf[1<<21],*p1=buf,*p2=buf;\n//inline int gc(){return p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++;}\n//inline int read()\n//{\n//    int ret=0,f=0;char c=gc();\n//    while(!isdigit(c)){if(c=='-')f=1;c=gc();}\n//    while(isdigit(c)){ret=ret*10+c-48;c=gc();}\n//    if(f)return -ret;return ret;\n//}\nconst db EPS=1e-10;\ninline int sign(db a){return a<-EPS?-1:a>EPS;}\ninline int cmp(db a,db b){return sign(a-b);}\ninline db sqr(db x){return x*x;}\nstruct Point{\n    db x,y;\n    Point(){}\n    Point(db _x,db _y):x(_x),y(_y){}\n    void input(){scanf(\"%lf%lf\",&x,&y);}\n    void output(){printf(\"%.10f %.10f\\n\",x,y);}\n    bool operator == (Point b)const{\n        return sign(x-b.x)==0&&sign(y-b.y)==0;\n    }\n    bool operator < (Point b)const{\n        return sign(x-b.x)==0?sign(y-b.y)<0:x<b.x;\n    }\n    Point operator + (const Point &b)const{\n        return Point(x+b.x,y+b.y);\n    }\n    Point operator - (const Point &b)const{\n        return Point(x-b.x,y-b.y);\n    }\n    db operator ^ (const Point &b)const{\n        return x*b.y-y*b.x;\n    }\n    db operator * (const Point &b)const{\n        return x*b.x+y*b.y;\n    }\n    db len(){return hypot(x,y);}\n    db len2(){return x*x+y*y;}\n    db distance(Point p){return hypot(x-p.x,y-p.y);}\n    Point operator * (const db &k)const{\n        return Point(x*k,y*k);\n    }\n    Point operator / (const db &k)const{\n        return Point(x/k,y/k);\n    }\n    db rad(Point a,Point b){\n        Point p=*this;\n        return fabs(atan2(fabs((a-p)^(b-p)),(a-p)*(b-p)));\n    }\n    Point unit(){return *this/len();}\n    Point trunc(db r){\n        db l=len();\n        if(!sign(l))return *this;\n        r/=l;\n        return Point(x*r,y*r);\n    }\n    Point rotleft(){return Point(-y,x);}\n    Point rotright(){return Point(y,-x);}\n    Point rotate(Point p,db angle){\n        Point v=(*this)-p;\n        db c=cos(angle),s=sin(angle);\n        return Point(p.x+v.x*c-v.y*s,p.y+v.x*s+v.y*c);\n    }\n};\n#define cross(p1,p2,p3) ((p2.x-p1.x)*(p3.y-p1.y)-(p3.x-p1.x)*(p2.y-p1.y))\n#define crossOp(p1,p2,p3) sign(cross(p1,p2,p3))\nstruct Line{\n    Point s,e;\n    Line(){}\n    Line(Point _s,Point _e):s(_s),e(_e){}\n    bool operator == (Line v){\n        return (s==v.s)&&(e==v.e);\n    }\n    Line(Point p,db angle){\n        s=p;\n        if(sign(angle-PI/2)==0)e=(s+Point(0,1));\n        else e=(s+Point(1,tan(angle)));\n    }\n    Line(db a,db b,db c){\n        if(sign(a)==0){\n            s=Point(0,-c/b);e=Point(1,-c/b);\n        }else if(sign(b)==0){\n            s=Point(-c/a,0);e=Point(-c/a,1);\n        }else{\n            s=Point(0,-c/b);e=Point(1,(-c-a)/b);\n        }\n    }\n    void input(){s.input();e.input();}\n    void adjust(){if(e<s)swap(s,e);}\n    db length(){return s.distance(e);}\n    //[0,PI)\n    db angle(){\n        db k=atan2(e.y-s.y,e.x-s.x);\n        if(sign(k)<0)k+=PI;\n        if(sign(k-PI)==0)k-=PI;\n        return k;\n    }\n    //line|1 on the left|2 on the right|3 on line|\n    int relation(Point p){\n        int c=sign((p-s)^(e-s));\n        if(c<0)return 1;\n        else if(c>0)return 2;\n        else return 3;\n    }\n    bool pointonseg(Point p){\n        return sign((p-s)^(e-s))==0&&sign((p-s)*(p-e))<=0;\n    }\n    bool parallel(Line v){\n        return sign((e-s)^(v.e-v.s))==0;\n    }\n    //|0 not intersect|1 non-standard|2 intersect|\n    int segcrossseg(Line v){\n        int d1=sign((e-s)^(v.s-s));\n        int d2=sign((e-s)^(v.e-s));\n        int d3=sign((v.e-v.s)^(s-v.s));\n        int d4=sign((v.e-v.s)^(e-v.s));\n        if((d1^d2)==-2&&(d3^d4)==-2)return 2;\n        return (d1==0&&sign((v.s-s)*(v.s-e))<=0)||\n            (d2==0&&sign((v.e-s)*(v.e-e))<=0)||\n            (d3==0&&sign((s-v.s)*(s-v.e))<=0)||\n            (d4==0&&sign((e-v.s)*(e-v.e))<=0);\n    }\n    //|0 not intersect|1 non-standard|2 intersect|\n    int linecrossseg(Line v){\n        int d1=sign((e-s)^(v.s-s));\n        int d2=sign((e-s)^(v.e-s));\n        if((d1^d2)==-2)return 2;\n        return (d1==0||d2==0);\n    }\n    //|0 parallel|1 coincides|2 intersect|\n    int linecrossline(Line v){\n        if((*this).parallel(v))return v.relation(s)==3;\n        return 2;\n    }\n    //要保证两直线不平行或重合\n    Point crossPoint(Line v){\n        db a1=(v.e-v.s)^(s-v.s);\n        db a2=(v.e-v.s)^(e-v.s);\n        return Point((s.x*a2-e.x*a1)/(a2-a1),(s.y*a2-e.y*a1)/(a2-a1));\n    }\n    db dispointtoline(Point p){\n        return fabs((p-s)^(e-s))/length();\n    }\n    db dispointtoseg(Point p){\n        if(sign((p-s)*(e-s))<0||sign((p-e)*(s-e))<0)return min(p.distance(s),p.distance(e));\n        return dispointtoline(p);\n    }\n    //前提是两线段不相交，相交距离就是0了\n    db dissegtoseg(Line v){\n        return min(min(dispointtoseg(v.s),dispointtoseg(v.e)),min(v.dispointtoseg(s),v.dispointtoseg(e)));\n    }\n    Point lineprog(Point p){\n\t\treturn s + ( ((e-s)*((e-s)*(p-s)))/((e-s).len2()) );\n\t}\n\tPoint symmetrypoint(Point p){\n\t\tPoint q = lineprog(p);\n\t\treturn Point(2*q.x-p.x,2*q.y-p.y);\n\t}\n};\nLine l1,l2;\nint main()\n{\n    #ifdef io\n    freopen(\"in.txt\",\"r\",stdin);\n    #endif\n    int q;\n    sc(q);\n    while(q--){\n        l1.input();l2.input();\n        double t;\n        if(l1.segcrossseg(l2)!=0)t=0;\n        else{\n            t=l1.dissegtoseg(l2);\n        }\n        printf(\"%.10f\\n\",t);\n    }\n    return 0;\n}\n/*\n3\n0 0 1 0 0 0 2 0\n*/\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\n#include<string>\n#include<algorithm>\n#include<functional>\n#include<queue>\n#include<utility>\n#include<cstdlib>\n#include<ctime>\n#include<utility>\n#include<cmath>\nusing namespace std;\n\n\n#define INF 1e+10\n#define EPS 1e-10\n#define EQ(a,b) (abs(a-b)<EPS)\n\n//誤差を考慮して足し算\ndouble add(double a,double b){\n\tif(abs(a+b) < EPS*(abs(a)+abs(b)))return 0;\n\treturn a+b;\n}\nstruct P{//2次元ベクトル\n\tdouble x,y;\n\tP(){}\n\tP(double x,double y):x(x),y(y){}\n\tP operator + (P p){\n\t\treturn P(add(x,p.x),add(y,p.y));\n\t}\n\tP operator - (P p){\n\t\treturn P(add(x,-p.x),add(y,-p.y));\n\t}\n\tP operator * (double d){\n\t\treturn P(x*d,y*d);\n\t}\n\tP operator / (double d){\n\t\treturn P(x/d,y/d);\n\t}\n\tdouble dot(P p){//内積\n\t\treturn add(x*p.x,y*p.y);\n\t}\n\tdouble det(P p){//外積\n\t\treturn add(x*p.y,-y*p.x);\n\t}\n\tbool equal(P p){\n\t\treturn (x-p.x)*(x-p.x)+(y-p.y)*(y-p.y) < EPS*EPS;\n\t}\n\tdouble norm()const{\n\t\treturn sqrt(x*x+y*y);\n\t}\n};\n//typedef pair<P,P> Line;\n\n//線分p1-p2上に点qがあるか判定\nbool on_seg(P p1,P p2,P q){\n\treturn (p1-q).det(p2-q)==0 && (p1-q).dot(p2-q)<=0;\n}\n//直線p1-p2と直線q1-q2の交点\nP intersection(P p1,P p2,P q1,P q2){\n\treturn p1+(p2-p1)*( (q2-q1).det(q1-p1)/(q2-q1).det(p2-p1) );\n}\n//直線p1-p2でqに線対称な点\nP line_symmetry(P p1,P p2,P q){\n\tdouble dx,dy;\n\tdx=p2.x-p1.x;\n\tdy=p2.y-p1.y;\n\tP inter=intersection(p1,p2,q,q+P(dy,-dx));\n\treturn q+(inter-q)*2;\n}\n\n//線分p1-p2と線分q1-q2が交差するか\nbool is_intersect(P p1,P p2,P q1,P q2){\n\tif(on_seg(p1,p2,q1)||on_seg(p1,p2,q2)||on_seg(q1,q2,p1)||on_seg(q1,q2,p2))return true;\n\tif((p1-p2).det(q1-q2)==0 )return false;//平行\n\tP a=intersection(p1,p2,q1,q2);\n\treturn on_seg(p1,p2,a) && on_seg(q1,q2,a);\n}\n//原点中心回転\nP rotate(P p,double rad){\n\tdouble s=sin(rad),c=cos(rad);\n\treturn P(c*p.x-s*p.y, s*p.x+c*p.y);\n}\n//originを中心に回転\nP rotate(P p,double rad,P origin){\n\treturn origin + rotate(p - origin,rad);\n}\n//二点間の距離\ndouble dist(P p,P q){\n\tp = p-q;\n\treturn sqrt(p.x*p.x+p.y*p.y);\n}\n//単位ベクトルに変換\nP to_unit(P p){\n\tdouble d = sqrt(p.x*p.x+p.y*p.y);\n\treturn p/d;\n}\n//線分と点の距離\ndouble dist_LP(P p1,P p2,P q){\n\tdouble dx,dy;\n\tdx = p1.x-p2.x;\n\tdy = p1.y-p2.y;\n\tdouble d = min(dist(p1,q) ,dist(p2,q));\n\tpair<P,P> normal = make_pair(q+to_unit(P(-dy,dx))*d ,q+to_unit(P(dy,-dx))*d);//法線ベクトル\n\tif(is_intersect(p1,p2,normal.first,normal.second)){\n\t\treturn dist(q, intersection(p1,p2,normal.first,normal.second));\n\t}\n\treturn d;\n}\n//線分間の距離\ndouble dist_LL(P p1,P p2,P q1,P q2){\n\tif(is_intersect(p1,p2,q1,q2))return 0;\n\treturn min( min(dist_LP(p1,p2,q1),dist_LP(p1,p2,q2))\n\t\t,min(dist_LP(q1,q2,p1),dist_LP(q1,q2,p2)) );\n}\n\nint main(){\n\tint q;\n\tcin>>q;\n\tfor(int i=0;i<q;i++){\n\t\tP p1,p2,q1,q2;\n\t\tcin>>p1.x>>p1.y;\n\t\tcin>>p2.x>>p2.y;\n\t\tcin>>q1.x>>q1.y;\n\t\tcin>>q2.x>>q2.y;\n\t\tprintf(\"%.8f\\n\",dist_LL(p1,p2,q1,q2));\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> Point;\ntypedef pair<Point, Point> Line;\nconst double EPS = 1e-10;\n\n// 内積 |a||b|cosθ\ndouble dot(Point a, Point b){\n\t// return a.real() * b.real() + a.imag() * b.imag();\n\treturn (conj(a) * b).real();\n}\n// 外積、符号付面積の２倍　|a||b|sinθ\ndouble cross(Point a, Point b){\n\t// return a.real() * b.imag() - a.imag() * b.real();\n\treturn (conj(a) * b).imag();\n}\n// 点の位置関係　2点a,bから見た点cの位置関係\nint ccw(Point a, Point b, Point c){\n    // COUNTER_CLOCKWISE\n    if(cross(b - a, c - a) > EPS) return 1;\n    // CLOCKWISE\n    if(cross(b - a, c - a) < -EPS) return -1;\n    // ONLINE_BACK\n    if(dot(b - a, c - a) < -EPS) return 2;\n    // ONLINE_FRONT\n    if(abs(b - a) + EPS < abs(c - a)) return -2;\n    // ON_SEGMENT\n    return 0;\n}\n// 点と直線の距離\ndouble line_to_point_dis(Line l, Point p){\n    Point a = l.first, b = l.second, c = p;\n    return fabs(cross(c - a, b - a)) / fabs(abs(b - a));\n}\n// 点と線分の距離\ndouble seg_to_point_dis(Line l, Point p){\n    Point a = l.first, b = l.second, c = p;\n    if(dot(b - a, c - a) < EPS) return abs(c - a);\n    if(dot(a - b, c - b) < EPS) return abs(c - b);\n    return line_to_point_dis(l, p);\n}\n// 線分の交差判定\nbool is_cross(Line a, Line b){\n    if(ccw(a.first, a.second, b.first) * ccw(a.first, a.second, b.second) <= 0 && ccw(b.first, b.second, a.first) * ccw(b.first, b.second, a.second) <= 0){\n        return true;\n    }\n    return false;\n}\n// 線分と線分の距離\ndouble seg_to_seg_dis(Line a, Line b){\n    double res = seg_to_point_dis(a, b.first);\n    res = min(res, seg_to_point_dis(a, b.second));\n    res = min(res, seg_to_point_dis(b, a.first));\n    res = min(res, seg_to_point_dis(b, a.second));\n    // 線分aと線分bが交差している場合\n    if(is_cross(a, b)) res = 0.0;\n    return res;\n}\n\nint main(){\n    int q;\n    cin >> q;\n    for(int i = 0; i < q; i++){\n        double x, y;\n        Point p[4];\n        for(int j = 0; j < 4; j++){\n            cin >> x >> y;\n            p[j] = {x, y};\n        }\n        Line s1 = {p[0], p[1]};\n        Line s2 = {p[2], p[3]};\n        double len = seg_to_seg_dis(s1, s2);\n        printf(\"%.10f\\n\", len);\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <iomanip>\n#include <algorithm>\n\nusing namespace std;\n\n#define EPS 1e-10\n#define LEFT_TOP POS(10001, 10001)\n#define NO_INTERSECT POS(-12345, -12345)\n#define PARALLEL POS(-10001, -10001)\n#define COLINE POS(12345, 12345)\nconst double PI = acos(-1.0);\n\ntypedef double T;\n\nclass POS {\npublic:\n    T x, y;\n    POS(const T& x = 0, const T& y = 0) : x(x), y(y) {}\n    POS(const POS& x) : x(x.x), y(x.y) {}\n\n    bool operator==(const POS& rhs) const {\n        return x == rhs.x && y == rhs.y;\n    }\n\n    POS& operator+=(const POS& rhs) {\n        x += rhs.x;\n        y += rhs.y;\n        return *this;\n    }\n\n    POS operator -() {\n        POS tmp(-x, -y);\n        return tmp;\n    }\n\n    double dist(const POS& rhs) const {\n        T tmp_x = x-rhs.x, tmp_y = y-rhs.y;\n        return sqrt(tmp_x*tmp_x+tmp_y*tmp_y);\n    }\n\n    friend ostream& operator<<(ostream& out, const POS& pos) {\n        out << pos.x << \" \" << pos.y;\n        return out;\n    }\n};\n\nPOS const operator+(const POS& lhs, const POS& rhs) {\n    return POS(lhs) += rhs;\n}\n\nPOS const operator-(const POS& lhs, const POS& rhs) {\n    POS tmp = rhs;\n    tmp = -tmp;\n    return POS(lhs) += (tmp);\n}\n\nbool cmp_convex(const POS& lhs, const POS& rhs) {\n    return (lhs.x < rhs.x) || ( (lhs.x == rhs.x)&&(lhs.y < rhs.y) );\n}\n\ninline T cross(const POS& o, const POS& a, const POS& b) {\n    double value = (a.x-o.x)*(b.y-o.y) - (a.y-o.y)*(b.x-o.x);\n    if (fabs(value) < EPS) return 0;\n    return value;\n}\n\nvoid convex_hull(POS* points, POS* need, int& n) {\n    sort(points, points+n, cmp_convex);\n    int index = 0;\n    for (int i = 0; i < n; ++i) {\n        while (index >= 2 && cross(need[index-2], need[index-1], points[i]) <= 0) index--;\n        need[index++] = points[i];\n    }\n    int half_point = index+1;\n    for (int i = n-2; i >= 0; --i) {\n        while (index >= half_point && cross(need[index-2], need[index-1], points[i]) <= 0) index--;\n        need[index++] = points[i];\n    } /* be careful that start point will appear in fisrt and last in need array */\n    n = index;\n}\n\nclass LINE {\npublic:\n    POS start, end, vec;\n    double angle;\n    LINE() {}\n    LINE(const T& st_x, const T& st_y, const T& ed_x, const T& ed_y) :\n        start(st_x, st_y), end(ed_x, ed_y), vec(end - start), angle(atan2(vec.x, vec.y)) {}\n\n    LINE(const POS& start, const POS& end) :\n        start(start), end(end), vec(end - start), angle(atan2(vec.x, vec.y)) {}\n\n    LINE(const POS& end) : /* start point is origin */\n        start(0, 0), end(end), vec(end), angle(atan2(vec.x, vec.y)) {}\n\n    LINE(const T a, const T b, const T c) : /* given line by ax+by+c = 0 */\n        start(0, 0), end(0, 0), vec(-b, a) {\n        if (a == 0) {\n            start.y = end.y = -c/b;\n            end.x = -b;\n        }\n        else if (b == 0) {\n            start.x = end.x = -c/a;\n            end.y = a;\n        }\n        else if (c == 0) {\n            end.x = -b; end.y = a;\n        }\n        else {\n            start.y = -c/b; end.x = -c/a;\n            vec.x = -c/a; vec.y = c/b;\n        }\n        angle = atan2(vec.x, vec.y);\n    }\n\n    LINE build_orthogonal(const POS& point) const {\n        T c = -(vec.x*point.x + vec.y*point.y);\n        return LINE(vec.x, vec.y, c);\n    }\n\n    T length2() const { /* square */\n        T x = start.x - end.x, y = start.y - end.y;\n        return x*x + y*y;\n    }\n\n    void modify(T x, T y) {\n        this->end.x += x;\n        this->end.y += y;\n        this->vec.x += x;\n        this->vec.y += y;\n    }\n\n    bool on_line(const POS& a) const {\n        if (vec.x == 0) {\n            if (start.x != a.x) return false;\n            return true;\n        }\n        if (vec.y == 0) {\n            if (start.y != a.y) return false;\n            return true;\n        }\n        return fabs(( (a.x-start.x)/vec.x*vec.y + start.y )- a.y) < EPS;\n    }\n\n    bool operator/(const LINE& rhs) const { /* to see if this line parallel to LINE rhs */\n        return (vec.x*rhs.vec.y == vec.y*rhs.vec.x);\n    }\n\n    bool operator==(const LINE& rhs) const { /* to see if they are same line */\n        return (*this/rhs) && (rhs.on_line(start));\n    }\n\n    POS intersect(const LINE& rhs) const {\n        if (*this==rhs) return COLINE; /* return co-line */\n        if (*this/rhs) return PARALLEL; /* return parallel */\n\n        double A1 = vec.y, B1 = -vec.x, C1 = end.x*start.y - start.x*end.y;\n        double A2 = rhs.vec.y, B2 = -rhs.vec.x, C2 = rhs.end.x*rhs.start.y - rhs.start.x*rhs.end.y;\n        return POS( (B2*C1-B1*C2)/(A2*B1-A1*B2), (A1*C2-A2*C1)/(A2*B1-A1*B2) ); /* sometimes has -0 */\n    }\n\n    double dist(const POS& a) const {\n        return fabs(vec.y*a.x - vec.x*a.y + vec.x*start.y - vec.y*start.x)/sqrt(vec.y*vec.y+vec.x*vec.x);\n    }\n\n    double dist(const LINE& rhs) const {\n        POS intersect_point = intersect(rhs);\n        if (intersect_point == PARALLEL) {\n            return dist(rhs.start);\n        }\n        return 0;\n    }\n\n    friend ostream& operator<<(ostream& out, const LINE& line) {\n        out << line.start << \"-->\" << line.end << \" vec: \" << line.vec;\n        return out;\n    }\n};\n\nclass LINESEG : public LINE {\npublic:\n    LINESEG() : LINE(POS(0, 0)) {}\n    LINESEG(const LINE& input) : LINE(input) {}\n    LINESEG(const POS& start, const POS& end) : LINE(start, end) {}\n\n    bool on_lineseg(const POS& a) const {\n        if (!on_line(a)) return false;\n        bool first, second;\n        if (vec.x >= 0) first = (a.x >= start.x)&&(a.x <= end.x);\n        else first = (a.x <= start.x)&&(a.x >= end.x);\n        if (vec.y >= 0) second = (a.y >= start.y)&&(a.y <= end.y);\n        else second = (a.y <= start.y)&&(a.y >= end.y);\n        return first&&second;\n    }\n\n    bool operator==(const LINESEG& rhs) const {\n        return ( (rhs.start == start && rhs.end == end) ||\n              (rhs.start == end && rhs.end == start) );\n    }\n\n    bool operator==(const LINE& rhs) const {\n        return this->LINE::operator==(rhs);\n    }\n\n    T dot(const LINESEG& rhs) const {\n        return vec.x*rhs.vec.x + vec.y*rhs.vec.y;\n    }\n\n    T cross(const LINESEG& rhs) const {\n        return vec.x*rhs.vec.y - vec.y*rhs.vec.x;\n    }\n\n    bool clockwise(const LINE& a) const { /* to see if LINE a is in b's clockwise way */\n        return cross(a) > 0;\n    }\n\n    double dist(const POS& a) const {\n        double ortho_dist = this->LINE::dist(a);\n        LINE ortho_line = build_orthogonal(a);\n        POS intersect_point = this->LINE::intersect(ortho_line);\n        if (on_lineseg(intersect_point)) return ortho_dist;\n        else return min(a.dist(this->start), a.dist(this->end));\n    }\n\n    double dist(const LINE& line) const {\n        POS intersect_point = this->LINE::intersect(line);\n        if (intersect_point == COLINE) return 0;\n        if (intersect_point == PARALLEL) return dist(line.start);\n        if (on_lineseg(intersect_point)) return 0;\n        return min(line.dist(start), line.dist(end));\n    }\n\n    double dist(const LINESEG& line) const {\n        return min( min(dist(line.start), dist(line.end)),\n                    min(line.dist(start), line.dist(end)) );\n    }\n\n    POS intersect(const LINESEG& rhs) const {\n        LINE a1b1(start, rhs.start);\n        LINE a1b2(start, rhs.end);\n        LINE b1a1(rhs.start, start);\n        LINE b1a2(rhs.start, end);\n\n        POS tmp(this->LINE::intersect(rhs));\n\n        if (tmp == COLINE) {\n            if ( (start==rhs.start) && (!rhs.on_lineseg(end)) && (!on_lineseg(rhs.end)) ) return start;\n            if ( (start==rhs.end) && (!rhs.on_lineseg(end)) && (!on_lineseg(rhs.start)) ) return start;\n            if ( (end==rhs.start) && (!rhs.on_lineseg(start)) && (!on_lineseg(rhs.end)) ) return end;\n            if ( (end==rhs.end) && (!rhs.on_lineseg(start)) && (!on_lineseg(rhs.start)) ) return end;\n            if (on_lineseg(rhs.start) || on_lineseg(rhs.end) || rhs.on_lineseg(start) || rhs.on_lineseg(end)) return COLINE;\n            return NO_INTERSECT;\n        }\n\n        bool intersected =  ( (cross(a1b1)*cross(a1b2)<0) && (rhs.cross(b1a1)*rhs.cross(b1a2)<0) );\n        if (!intersected) return NO_INTERSECT;\n        if (!on_lineseg(tmp) || !rhs.on_lineseg(tmp)) return NO_INTERSECT;\n        return tmp;\n    }\n};\n\nint main()\n{\n    int q;\n    cin >> q;\n    cout << fixed << setprecision(10);\n    while(q--){\n        int xp0, yp0, xp1, yp1, xp2, yp2, xp3, yp3;\n        cin >> xp0 >> yp0 >> xp1 >> yp1 >> xp2 >> yp2 >> xp3 >> yp3;\n        POS p0(xp0, yp0), p1(xp1, yp1), p2(xp2, yp2), p3(xp3, yp3);\n        LINESEG l0(p0, p1), l1(p2, p3);\n        cout << l0.dist(l1) << endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <algorithm>\n\nusing flt = double;\nconst flt eps = 1e-12, inf = 1e18, PI = acos(-1.0);\ntemplate<typename T>\ninline T sqr(T x) {return x * x;}\ninline flt cmp(flt a, flt b, flt e = eps) {\n  return fabs(a - b) >= e + fabs(a) * e ? a - b : 0;\n}\ninline int sgn(flt x, flt e = eps) {return x < -e ? -1 : (x > e);}\ninline flt fix(flt x, flt e = eps) {return cmp(x, 0, e);}\n\nstruct point {\n  flt x, y;\n  point(flt x = 0, flt y = 0): x(x), y(y) {}\n  bool operator < (const point &rhs) const {\n    return cmp(x, rhs.x) < 0 || (cmp(x, rhs.x) == 0 && cmp(y, rhs.y) < 0);\n  }\n  bool operator == (const point &rhs) const {\n    return cmp(x, rhs.x) == 0 && cmp(y, rhs.y) == 0;\n  }\n  point operator + (const point &rhs) const {\n    return point(x + rhs.x, y + rhs.y);\n  }\n  point operator - (const point &rhs) const {\n    return point(x - rhs.x, y - rhs.y);\n  }\n  point operator * (const flt k) const {\n    return point(x * k, y * k);\n  }\n  point operator / (const flt k) const {\n    return point(x / k, y / k);\n  }\n  point operator ~ () const {// counter clockwise rotate 90 degree\n    return point(-y, x);\n  }\n  flt dot(const point &rhs) const {\n    return x * rhs.x + y * rhs.y;\n  }\n  flt det(const point &rhs) const {\n    return x * rhs.y - y * rhs.x;\n  }\n  flt norm2() const {\n    return x * x + y * y;\n  }\n  flt norm() const {\n    return hypot(x, y);\n  }\n  point rot(flt a) const {// counter clockwise rotate A rad\n    return point(x * cos(a) - y * sin(a), x * sin(a) + y * cos(a));\n  }\n  point rot(flt cosa, flt sina) const {// counter clockwise rotate using cos/sin\n    return point(x * cosa - y * sina, x * sina + y * cosa);\n  }\n  point trunc(flt a = 1.0) const {\n    return (*this) * (a / this->norm());\n  }\n};\n\n// check if point O is on segment AB\nbool on_segment(const point &A, const point &B, const point &O) {\n  return sgn((A - O).det(B - O)) == 0 && sgn((A - O).dot(B - O)) <= 0;\n}\n\n// check if AB is parallel to CD\nbool is_parallel(const point &A, const point &B, const point &C, const point &D) {\n  return sgn((B - A).det(D - C)) == 0;\n}\n\n// check intersection of segments AB and CD\nbool segment_intersect(const point &A, const point &B, const point &C, const point &D, point &res) {\n  if (on_segment(A, B, C)) {res = C; return true;}\n  if (on_segment(A, B, D)) {res = D; return true;}\n  if (on_segment(C, D, A)) {res = A; return true;}\n  if (on_segment(C, D, B)) {res = B; return true;}\n  point AB(B - A), CD(D - C);\n  if (sgn(AB.det(CD)) == 0) return false; // parallel\n  int d1 = sgn(AB.det(C - A)) * sgn(AB.det(D - A));\n  int d2 = sgn(CD.det(A - C)) * sgn(CD.det(B - C));\n  res = A + AB * (CD.det(C - A) / CD.det(AB));\n  return d1 < 0 && d2 < 0;\n}\n\n// find the minimum distance from O to segment AB\nflt dis_to_segment(const point &A, const point &B, const point &O) {\n  if (sgn((O - A).dot(B - A)) < 0) return (O - A).norm();\n  if (sgn((O - B).dot(A - B)) < 0) return (O - B).norm();\n  return fabs((O - A).det(B - A) / (A - B).norm());\n}\n\nint main() {\n  int q;\n  scanf(\"%d\", &q);\n  for (int i = 0; i < q; ++i) {\n    point A, B, C, D, O;\n    scanf(\"%lf%lf%lf%lf\", &A.x, &A.y, &B.x, &B.y);\n    scanf(\"%lf%lf%lf%lf\", &C.x, &C.y, &D.x, &D.y);\n    if (segment_intersect(A, B, C, D, O)) printf(\"%.10f\\n\", 0.0);\n    else {\n      printf(\"%.10f\\n\", std::min(std::min(dis_to_segment(A, B, C), dis_to_segment(A, B, D)), std::min(dis_to_segment(C, D, A), dis_to_segment(C, D, B))));\n    }\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<vector>\n\nusing namespace std;\n\nstatic const long double EPS = 1e-10;\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2; // p2→p0→p1\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nclass Point{\n    public: \n    long double x,y;\n    Point(long double x = 0.0, long double y = 0.0): x(x), y(y) {}\n    Point operator + (Point p) const { return Point(x+p.x, y+p.y); }\n    Point operator - (Point p) const { return Point(x-p.x, y-p.y); }\n    Point operator * (long double a) const { return Point(x*a, y*a); }\n    Point operator / (long double a) const { return Point(x/a, y/a); }\n    bool operator < (const Point &p) const { return (x != p.x ? x < p.x : y < p.y); }\n    bool operator == (const Point &p) const { return fabsl(x - p.x) < EPS && fabsl(y - p.y) < EPS; }\n    long double abs() const { return sqrt(norm()); }\n    long double norm() const { return x*x + y*y; }\n    long double dot(Point p) const { return x*p.x + y*p.y; }\n    long double cross(Point p) const { return x*p.y - y*p.x; }   \n};\n\nclass Segment{\n    public: \n    Point p,q;\n    Segment(Point p, Point q): p(p), q(q) {}\n};\n\ntypedef Point Vector;\ntypedef Segment Line;\n\nint ccw(Point p0, Point p1, Point p2){\n    Point a = p1 - p0;\n    Point b = p2 - p0;\n    if(a.cross(b) > EPS) return COUNTER_CLOCKWISE;\n    if(a.cross(b) < -EPS) return CLOCKWISE;\n    if(a.dot(b) < -EPS) return ONLINE_BACK;\n    if(a.norm() < b.norm()) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\n// 線分交差判定\nbool intersect(Point p0, Point p1, Point p2, Point p3){\n    return ccw(p0, p1, p2) * ccw(p0, p1, p3) <= 0 && ccw(p2, p3, p0) * ccw(p2, p3, p1) <= 0;\n}\n\nbool intersect(Segment s1, Segment s2){\n    return intersect(s1.p, s1.q, s2.p, s2.q);\n}\n\nlong double getDistanceLP(Line l, Point p){\n    return abs((l.q-l.p).cross(p-l.p)) / (l.q-l.p).abs();\n}\n\nlong double getDistanceSP(Segment s, Point p){\n    if((s.q - s.p).dot(p - s.p) < -EPS) return (p-s.p).abs();\n    if((s.p - s.q).dot(p - s.q) < -EPS) return (p-s.q).abs();\n    return getDistanceLP(s, p);\n}\n\nlong double getDistance(Segment s1, Segment s2){\n    if(intersect(s1, s2)) return 0.0;\n    return min(min(getDistanceSP(s1, s2.p), getDistanceSP(s1, s2.q)), min(getDistanceSP(s2, s1.p), getDistanceSP(s2, s1.q)));\n}\n\nint main(){\n    int n;\n    cin >> n;\n    vector<Point> ps(4, Point());\n    for(int i=0;i<n;i++){\n        for(int j=0;j<4;j++){\n            cin >> ps[j].x >> ps[j].y;\n        }\n        Segment s1 = Segment(ps[0], ps[1]);\n        Segment s2 = Segment(ps[2], ps[3]);\n        printf(\"%.10Lf\\n\", getDistance(s1, s2));\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<complex>\n#include<utility>\n#include<vector>\n#include<cmath>\n#include<cassert>\n \nusing namespace std;\n \ndouble eps=1e-9;\n \ntypedef complex<double> Point;\ntypedef complex<double> Vector;\n \ntemplate<class T> bool eq(T a,T b){\n    return abs(a-b)<eps;\n}\n \ntemplate<class T> int sgn(T r){\n    return eq(r,0.0)?0:(r>0?1:-1);\n}\n \nstruct Circle{\n    Point center;\n    double r;\n    Circle(Point c,double r):center(c),r(r){}\n    Circle(){}\n};\n \nstruct Line{\n    double a,b,c;//ax+by=c\n    Line(){}\n    Line(double a,double b,double c):a(a),b(b),c(c){}\n    Line(Point p1,Point p2){//not verified\n        if(eq(abs(p1-p2),0.0)){\n            fprintf(stderr,\"called Line for same points\\n\");\n            assert(0);\n        }\n        double x1=p1.real(),y1=p1.imag();\n        double x2=p2.real(),y2=p2.imag();\n        a=y2-y1;\n        b=-(x2-x1);\n        c=x1*y2-x2*y1;\n    }\n};\n \nvoid print(Point p){\n    if(isnan(p.real())||isnan(p.imag())){\n        printf(\"NaN Point\\n\");\n        return;\n    }\n    printf(\"(%f,%f)\\n\",p.real(),p.imag());\n}\n \ndouble pointsDistance(Point p1,Point p2){/*abs(p1-p2)と書いてよい*/\n    double dx=p1.real()-p2.real();\n    double dy=p1.imag()-p2.imag();\n    return sqrt(dx*dx+dy*dy);\n}\n \ndouble linePointDistance(Line l,Point p){\n    double a=l.a,b=l.b,c=l.c;\n    double x=p.real(),y=p.imag();\n    double num=abs(a*x+b*y-c);\n    double den=sqrt(a*a+b*b);\n    return num/den;\n}\n \nVector basisVector(Vector v){\n    if(eq(v.real(),0.0)&&eq(v.imag(),0.0)) return v;\n    return v/sqrt(norm(v));\n}\n \nPoint linePointProjection(Line l,Point p){\n    double dx=l.a,dy=l.b;\n    double a=l.a,b=l.b,c=l.c;\n    double x=p.real(),y=p.imag();\n    Vector ba=basisVector(Vector(dx,dy));\n    double num=a*x+b*y-c;\n    double den=sqrt(a*a+b*b);\n    Vector v=ba*(-num/den);\n    return p+v;\n}\n \nvector<Point> circleLineIntersection(Circle c,Line l){\n    vector<Point> res;\n    Point p=linePointProjection(l,c.center);\n    double d=linePointDistance(l,c.center);\n    int s=sgn(d-c.r);\n    if(s==1){\n        return res;//empty\n    }else if(s==0){\n        res.push_back(p);\n        return res;\n    }else{\n        double r=c.r;\n        double t=sqrt(r*r-d*d);\n        Vector e=basisVector(Vector(l.b,-l.a));\n        res.push_back(p+t*e);\n        res.push_back(p-t*e);\n        return res;\n    }\n}\n \nvector<Point> circlesIntersection(Circle c1,Circle c2){/*一致するとき処理できない*/\n    if(eq(c1.center.real(),c2.center.real())&&eq(c1.center.imag(),c2.center.imag())&&\n        eq(c1.r,c2.r)){\n                Point p=Point(NAN,NAN);\n                vector<Point> v;\n                v.push_back(p);\n                return v;\n    }\n    double d=pointsDistance(c1.center,c2.center);\n    double r1=c1.r,r2=c2.r;\n    double dif=max(r1,r2)-min(r1,r2);\n    double sum=r1+r2;\n    if(sgn(d-sum)==1||sgn(dif-d)==1){//d>sum||dif>d\n        vector<Point> v;\n        return v;\n    }\n    double x1=c1.center.real(),y1=c1.center.imag();\n    double x2=c2.center.real(),y2=c2.center.imag();\n    Line l=Line(-x1*2+x2*2,-y1*2+y2*2,r1*r1-r2*r2-(x1*x1-x2*x2)-(y1*y1-y2*y2));\n    return circleLineIntersection(c1,l);\n}\n \ndouble det(double a,double b,double c,double d){\n    return a*d-b*c;\n}\n \nPoint linesIntersection(Line l1,Line l2){/*平行の時は常にNAN*/\n    double a=l1.a,b=l1.b,c=l1.c;\n    double d=l2.a,e=l2.b,f=l2.c;\n    double den=det(a,b,d,e);\n    double numx=det(c,b,f,e);\n    double numy=det(a,c,d,f);\n    if(eq(den,0.0)){\n        return Point(NAN,NAN);\n    }\n    return Point(numx/den,numy/den);\n}\n \n//circlesIntersection verify AOJ1190 ICPC Domestic 2013 Balloon\n \ndouble crossProduct(Vector a,Vector b){\n    return (conj(a)*b).imag();\n}\n \ndouble dotProduct(Vector a,Vector b){\n    return (conj(a)*b).real();\n}\n \nint ccw(Point p1,Point p2,Point p3){\n    /*p1,p2,p3はすべて異なると仮定\n    そうでない場合の戻り値は不定\n    ではなく\n    p1!=p2と仮定*/\n    Vector b=p2-p1;\n    Vector c=p3-p1;\n    int s=sgn(crossProduct(b,c));\n    if(s==1) return 1;//counterclockwise\n    if(s==-1) return -1;//clockwise\n    int t=sgn(dotProduct(b,c));\n    if(t==-1) return 2;//3--1--2\n    int u=sgn(norm(b)-norm(c));\n    if(eq(norm(c),0.0)) return 0;//1==3\n    if(u==-1) return -2;//1--2--3\n    return 0;//1--3--2 or 2==3\n}\n \nstruct Segment{\n    Point p1,p2;\n    Line l;\n    Segment(){}\n    Segment(Point p1,Point p2):p1(p1),p2(p2){\n        l=Line(p1,p2);\n    }\n};\n \nint oneLineCCW(Point p1,Point p2,Point p3){\n    /*p1!=p2かつp1,p2,p3は一直線上と仮定*/\n    /*それ以外の時の戻り値は不定*/\n    Vector b=p2-p1,c=p3-p1;\n    if(!eq(crossProduct(b,c),0.0)) for(;;);\n    if(sgn(dotProduct(b,c))==-1) return 2;//p3--p1--p2\n    if(eq(abs(p1-p3),0.0)) return 1;//p1==p3--p2\n    int s=sgn(norm(b)-norm(c));\n    if(s==1) return 0;//p1--p3--p2\n    if(s==0) return -1;//p1--p3==p2\n    else return -2;//p1--p2--p3\n}\n \ndouble pointSegmentDistance(Point p,Segment s){\n    Line l=s.l;\n    double d=linePointDistance(l,p);\n    Point pr=linePointProjection(l,p);\n//  int x=oneLineCCW(s.p1,s.p2,pr);\n    int x=ccw(s.p1,s.p2,pr);\n//  if(x>=-1&&x<=1) return d;\n    if(x==0) return d;\n    double a=abs(s.p1-p);\n    double b=abs(s.p2-p);\n    return min(a,b);\n}\n \nbool segmentsIntersect(Segment s1,Segment s2){\n    Point p[2],q[2];\n    p[0]=s1.p1,p[1]=s1.p2;\n    q[0]=s2.p1,q[1]=s2.p2;\n    return ccw(p[0],p[1],q[0])*ccw(p[0],p[1],q[1])<=0&&\n        ccw(q[0],q[1],p[0])*ccw(q[0],q[1],p[1])<=0;\n}\n \ndouble segmentsDistance(Segment s1,Segment s2){\n    bool flg=segmentsIntersect(s1,s2);\n    if(flg) return 0;\n    Point p[2],q[2];\n    p[0]=s1.p1,p[1]=s1.p2;\n    q[0]=s2.p1,q[1]=s2.p2;\n    double res=-1;\n    for(int k=0;k<2;k++){\n        Point r=linePointProjection(s2.l,p[k]);\n        bool flg1=(abs(oneLineCCW(q[0],q[1],r))<=1);\n        bool flg2=ccw(q[0],q[1],r)==0;\n        if(flg1!=flg2){\n        \tprint(q[0]);\n        \tprint(q[1]);\n        \tprint(r);\n        \tprintf(\"%d %d\\n\",oneLineCCW(q[0],q[1],r),ccw(q[0],q[1],r));\n        \tassert(0);\n        }\n    //  if(abs(oneLineCCW(q[0],q[1],r))<=1){\n        if(ccw(q[0],q[1],r)==0){\n            double tmp=abs(r-p[k]);\n            if(res<0||tmp<res) res=tmp;\n        }\n        r=linePointProjection(s1.l,q[k]);\n        flg1=abs(oneLineCCW(p[0],p[1],r))<=1;\n        flg2=ccw(p[0],p[1],r)==0;\n        if(flg1!=flg2){\n        \tprint(p[0]);\n        \tprint(p[1]);\n        \tprint(r);\n        \tprintf(\"%d %d\\n\",oneLineCCW(p[0],p[1],r),ccw(p[0],p[1],r));\n        \tassert(0);\n        }\n    //  if(abs(oneLineCCW(p[0],p[1],r))<=1){\n        if(ccw(p[0],p[1],r)==0){\n            double tmp=abs(r-q[k]);\n            if(res<0||tmp<res) res=tmp;\n        }\n    }\n    for(int i=0;i<2;i++) for(int j=0;j<2;j++){\n        double tmp=abs(p[i]-q[j]);\n        if(res<0||tmp<res) res=tmp;\n    }\n    return res;\n}\n \n \n//segmentsDistance verified aoj cgl_2 d Distance\nPoint inputPoint(){\n    double x,y;\n    scanf(\"%lf%lf\",&x,&y);\n    return Point(x,y);\n}\n \nint main(){\n    int Q;\n    scanf(\"%d\",&Q);\n    for(int datano=0;datano<Q;datano++){\n        Point p1,p2;\n        Point q1,q2;\n        p1=inputPoint();\n        p2=inputPoint();\n        q1=inputPoint();\n        q2=inputPoint();\n        if(abs(p1-p2)<eps) break;\n        Segment s1=Segment(p1,p2);\n        Segment s2=Segment(q1,q2);\n        double ans=segmentsDistance(s1,s2);\n        printf(\"%.9f\\n\",ans);\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define EPS 1e-10\n\nstruct Point{\n    double x,y;\n\n    Point(){}\n    Point(double x,double y) : x(x),y(y) {}\n\n    Point operator + (const Point &p)const{ return Point(x+p.x,y+p.y); }\n    Point operator - (const Point &p)const{ return Point(x-p.x,y-p.y); }\n    Point operator * (const double &k)const{ return Point(x*k,y*k); }\n};\n\ndouble dot(const Point &a,const Point &b){ return a.x*b.x+a.y*b.y; }\ndouble cross(const Point &a,const Point &b){ return a.x*b.y - b.x*a.y; }\ndouble norm(const Point &p){ return dot(p,p); }\ndouble abs(const Point &p){ return sqrt(norm(p)); }\n\n#define COUNTER_CLOCKWISE 1\n#define CLOCKWISE -1\n#define ONLINE_BACK 2\n#define ONLINE_FRONT -2\n#define ON_SEGMENT 0\ntypedef Point Vector;\n\nint ccw(Point p0,Point p1,Point p2){\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if(cross(a,b) > EPS){ return COUNTER_CLOCKWISE; }\n    if(cross(a,b) < -EPS){ return CLOCKWISE; }\n    if(dot(a,b) < -EPS){ return ONLINE_BACK; }\n    if(norm(a) < norm(b)){ return ONLINE_FRONT; }\n    return ON_SEGMENT;\n}\n\nstruct Segment{\n    Point s,t;\n    Segment(){}\n    Segment(Point s,Point t) : s(s),t(t) {}\n};\n\nPoint projection(const Segment &s,const Point &p){\n    Vector b = s.t-s.s;\n    double t = dot(p-s.s,b)/norm(b);\n    return s.s+b*t;\n}\n\nbool isIntersectSP(const Segment &s,const Point &p){\n    return (ccw(s.s,s.t,p) == 0);\n}\n\nbool isIntersectSS(const Segment &a,const Segment &b){\n    Point s[2] = {a.s,a.t}, t[2] = {b.s,b.t};\n    return (ccw(s[0],s[1],t[0])*ccw(s[0],s[1],t[1]) <= 0 &&\n            ccw(t[0],t[1],s[0])*ccw(t[0],t[1],s[1]) <= 0);\n}\n\ndouble distanceSP(const Segment &s,const Point &p){\n    Point r = projection(s,p);\n    if(isIntersectSP(s,r)) return abs(r-p);\n    return min(abs(s.s-p),abs(s.t-p));\n}\n\ndouble distanceSS(const Segment a,const Segment b){\n    if(isIntersectSS(a,b)){ return 0; }\n    return min(min(distanceSP(a,b.s),distanceSP(a,b.t)),\n               min(distanceSP(b,a.s),distanceSP(b,a.t)));\n}\n\nint main(){\n    int Q;\n    Segment s1,s2;\n    cin >> Q;\n    while(Q--){\n        cin >> s1.s.x >> s1.s.y >> s1.t.x >> s1.t.y;\n        cin >> s2.s.x >> s2.s.y >> s2.t.x >> s2.t.y;\n        printf(\"%.12f\\n\",distanceSS(s1,s2));\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<map>\n#include<vector>\n#include<algorithm>\n#include<cmath>\n#include<climits>\n#include<ctime>\n#include<cstring>\n#include<stack>\n#include<queue>\n#include<sstream>\n#include<string>\n#include<set>\n#include<array>\n\n#define ALL(v) (v).begin(),(v).end()\n#define REP(i,p,n) for(int i=p;i<(int)(n);++i)\n#define rep(i,n) REP(i,0,n)\n#define DUMP(list) cout << \"{ \"; for(auto nth : list){ cout << nth << \" \"; } cout << \"}\" << endl\n#define FOR(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i);\n\nusing namespace std;\n\ntypedef double Real;\n\nconst Real EPS = 1e-8;\n\nint sign(Real d){\n\treturn d > EPS ? 1 : d < -EPS ? -1 : 0;\n}\n\nstruct Point{\n\tReal x,y;\n\t\n\tPoint(Real x_ = 0,Real y_ = 0):x(x_),y(y_){}\n\n\tPoint operator+(const Point &p) const {return Point(x+p.x,y+p.y);}\n\tPoint operator-(const Point &p) const {return Point(x-p.x,y-p.y);}\n\tPoint operator*(Real s) const {return Point(x*s,y*s);}\n\tPoint operator/(Real s) const {return Point(x/s,y/s);}\n\tbool operator<(const Point &p) const{return sign(x-p.x) == -1 || (sign(x-p.x) == 0 && sign(y-p.y) == -1);}\n\tbool operator==(const Point &p) const{return sign(x-p.x) == 0 && sign(y-p.y) == 0;}\n\n};\n\nistream &operator>>(istream &is,Point &p){return is >> p.x >> p.y;}//??\\???????°???????\nostream &operator<<(ostream &os ,const Point &p){return os << '(' << p.x << \", \" << p.y << ')';}//??????????°???????\n\nstruct Segment : public array<Point,2>{\n\tSegment(const Point &a,const Point &b){\tat(0) = a; at(1) = b;}\n};\n\nstruct Line : public array<Point,2>{\n\tLine(const Point &a,const Point &b){at(0) = a; at(1) = b;}\n};\n\nstruct Circle{\n\tPoint c;\n\tReal r;\n\n\tCircle(const Point &c_, Real r_):c(c_),r(r_){}\n};\n\ntypedef vector<Point> Polygon;\n\nPoint rotate90(const Point &p){\n\treturn Point(-p.y,p.x);\n}\n\nPoint rotate(const Point &p,Real theta){\n\tconst Real s = sin(theta),c = cos(theta);\n\treturn Point(c*p.x-s*p.y,s*p.x+c*p.y);\n}\n\nReal angle(const Point &p){\n\treturn atan2(p.y,p.x);\n}\n\nReal dot(const Point &a,const Point &b){ //??????????????????\n\treturn a.x*b.x+a.y*b.y;\n}\n\nReal cross(const Point &a,const Point &b){ //??????????????????\n\treturn a.x*b.y-a.y*b.x;\n}\n\n\nReal norm(const Point &p){\n\treturn p.x*p.x+p.y*p.y;\n}\n\nReal abs(const Point &p){\n\treturn sqrt(norm(p));\n}\n\nenum { CCW=1,CW=-1,BACK=2,FRONT=-2,ON=0 };\nint ccw(const Point &a,const Point &b,const Point &c){\n\tconst Point p = b-a;\n\tconst Point q = c-a;\n\tconst int sgn = sign(cross(p,q));\n\t\n\tif(sgn == 1) return CCW;\n\tif(sgn == -1) return CW;\n\tif(sign(dot(p,q)) == -1) return BACK;\n\tif(sign(norm(p) - norm(q)) == -1) return FRONT;\n\treturn ON;\n}\n\nPoint project(const Line &l,const Point &p){ //?°???±\n\tReal t = dot(p-l[0], l[1]-l[0]) / norm(l[0] - l[1]);\n\treturn l[0] + (l[1] - l[0]) * t;\n}\n\nPoint refrect(const Line &l,const Point &p){ //????°?\n\tconst Point c = project(l,p);\n\treturn c+(c-p);\n}\n\nbool intersect(const Segment &a,const Segment &b){\n\treturn ccw(a[0],a[1],b[0])*ccw(a[0],a[1],b[1]) <= 0\n\t\t&& ccw(b[0],b[1],a[0])*ccw(b[0],b[1],a[1]) <= 0;\n}\n\nbool intersect(const Segment &s,const Point &p){\n\treturn ccw(s[0],s[1],p) == ON;\n}\n\nbool intersect(const Line &l,const Segment &s){\n\treturn sign(cross(l[1]-l[0],s[0]-l[0])) * cross(l[1]-l[0],s[1]-l[0]) <= 0;\n}\n\nbool intersect(const Line &l,const Point &p){\n\treturn abs(ccw(l[0],l[1],p)) != 1;\n}\n\nbool intersect(const Line &a,const Line &b){ //????????????\n\treturn sign(cross(a[1]-a[0],b[1]-b[0])) != 0\n\t\t||\tsign(cross(a[1]-a[0],b[1]-a[0]) == 0);\n}\n\nReal dist(const Point &a,const Point &b){\n\treturn abs(a-b);\t\n}\n\nReal dist(const Line &l,const Point &p){\n\tconst Point a = l[1]-l[0];\n\tconst Point b = p-l[0];\n\treturn abs(cross(a,b))/abs(a);\n}\n\nReal dist(const Line &l,const Segment &s){\n\tif(intersect(l,s)) return 0;\n\treturn min(dist(l,s[0]),dist(l,s[1]));\n}\n\nReal dist(const Line &a,const Line &b){\n\tif(intersect(a,b)) return 0;\n\treturn dist(a,b[0]);\n}\n\nReal dist(const Segment &s,const Point &p){\n\tif(sign(dot(s[1]-s[0],p-s[0]) == -1)) return dist(s[0],p);\n\tif(sign(dot(s[0]-s[1],p-s[1]) == -1)) return dist(s[1],p);\n\treturn dist(Line(s[0],s[1]),p);\n}\n\nReal dist(const Segment &a,const Segment &b){\n\tif(intersect(a,b)) return 0;\n\treturn min({dist(a,b[0]),dist(a,b[1]),dist(b,a[0]),dist(b,a[1])});\n}\n\nint main(){\n\n\tcout.setf(ios::fixed);\n\tcout.precision(10);\n\t\n\tint q;\n\tcin >> q;\n\n\trep(i,q){\n\t\tPoint p1,p2,p3,p4;\n\t\tcin >> p1 >> p2 >> p3 >> p4;\n\t\tcout << dist(Segment(p1,p2),Segment(p3,p4)) << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <vector>\n#include <utility>\n#include <set>\n#include <cmath>\n#include <cstdio>\n#include <numeric>\n#include <functional>\n\nusing namespace std;\n\n//BEGIN\n#define EPS 1e-10\n#define equals(a, b) (fabs(a - b) < EPS)\n#define Pi 3.141592653589793238\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nstruct Point {\n\tdouble x, y;\n\n\tPoint() {}\n\tPoint(double x, double y) :x(x), y(y) {}\n\n\tPoint operator+(const Point& p) const { return Point(x + p.x, y + p.y); }\n\tPoint operator-(const Point& p) const { return Point(x - p.x, y - p.y); }\n\tPoint operator*(const double& k) const { return Point(x * k, y * k); }\n\tPoint operator/(const double& k) const { return Point(x / k, y / k); }\n\n\tfriend istream& operator>>(istream& is, Point& p) {\n\t\tis >> p.x >> p.y;\n\t\treturn is;\n\t}\n\n\tbool operator==(const Point& p) const { return (fabs(x - p.x) < EPS && fabs(y - p.y) < EPS); }\n\tbool operator<(const Point& p) const { return (x != p.x ? x < p.x : y < p.y); }\n\n\tdouble norm() { return x * x + y * y; }\n\tdouble abs() { return sqrt(norm()); }\n};\n\ntypedef Point Vector;\n\ndouble norm(Vector a) { return a.x * a.x + a.y * a.y; }\ndouble abs(Vector a) { return sqrt(norm(a)); }\ndouble dot(Vector a, Vector b) { return a.x * b.x + a.y * b.y; }\ndouble cross(Vector a, Vector b) { return a.x * b.y - a.y * b.x; }\n\nbool isParallel(Vector a, Vector b) { return equals(cross(a, b), 0.0); }\nbool isOrthogonal(Vector a, Vector b) { return equals(dot(a, b), 0.0); }\n\nstruct EndPoint {\n\tPoint p;\n\tint seg, st;\n\n\tEndPoint() {}\n\tEndPoint(Point p, int seg, int st) :p(p), seg(seg), st(st) {}\n\n\tbool operator<(const EndPoint& ep) const {\n\t\tif (p.y == ep.p.y) return st < ep.st;\n\t\treturn p.y < ep.p.y;\n\t}\n};\n\nstruct Segment {\n\tPoint p1, p2;\n\n\tSegment() {}\n\tSegment(Point p1, Point p2) :p1(p1), p2(p2) {}\n\n\tfriend istream& operator>>(istream& is, Segment& s) {\n\t\tis >> s.p1 >> s.p2;\n\t\treturn is;\n\t}\n};\n\ntypedef Segment Line;\n\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / base.norm();\n\treturn s.p1 + base * r;\n}\n\nPoint reflect(Segment s, Point p) {\n\treturn p + (project(s, p) - p) * 2.0;\n}\n\nstruct Circle {\n\tPoint c;\n\tdouble r;\n\n\tCircle() {}\n\tCircle(Point c, double r) :c(c), r(r) {}\n};\n\ntypedef vector<Point> Polygon;\n\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0, b = p2 - p0;\n\tif (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS) return CLOCKWISE;\n\tif (dot(a, b) < -EPS) return ONLINE_BACK;\n\tif (a.norm() < b.norm()) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\nbool intersectSS(Point p1, Point p2, Point p3, Point p4) {\n\treturn (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n\t\t\tccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\nbool intersectSS(Segment s1, Segment s2) {\n\treturn intersectSS(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\nint intersectCS(Circle c, Segment s) {\n\tif (norm(project(s, c.c) - c.c) - c.r * c.r > EPS) return 0;\n\tdouble d1 = abs(c.c - s.p1), d2 = abs(c.c - s.p2);\n\tif (d1 < c.r + EPS && d2 < c.r + EPS) return 0;\n\tif ((d1 < c.r - EPS && d2 > c.r + EPS) || (d1 > c.r + EPS && d2 < c.r - EPS)) return 1;\n\tPoint h = project(s, c.c);\n\tif (dot(s.p1 - h, s.p2 - h) < 0) return 2;\n\treturn 0;\n}\n\nint intersectCC(Circle c1, Circle c2) {\n\tif (c1.r < c2.r) swap(c1, c2);\n\tdouble d = abs(c1.c - c2.c);\n\tdouble r = c1.r + c2.r;\n\tif (equals(d, r)) return 3;\n\tif (d > r) return 4;\n\tif (equals(d + c2.r, c1.r)) return 1;\n\tif (d + c2.r < c1.r) return 0;\n\treturn 2;\n}\n\ndouble getDistanceLP(Line l, Point p) {\n\treturn abs(cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1));\n}\n\ndouble getDistanceSP(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0) return abs(p - s.p1);\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0) return abs(p - s.p2);\n\treturn getDistanceLP(s, p);\n}\n\ndouble getDistanceSS(Segment s1, Segment s2) {\n\tif (intersectSS(s1, s2)) return 0.0;\n\treturn min({ getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2),\n\t\t\t   getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2) });\n}\n\nPoint getCrossPointLL(Line l1, Line l2) {\n\tdouble a = cross(l1.p2 - l1.p1, l2.p2 - l2.p1);\n\tdouble b = cross(l1.p2 - l1.p1, l1.p2 - l2.p1);\n\tif (abs(a) < EPS && abs(b) < EPS) return l2.p1;\n\treturn l2.p1 + (l2.p2 - l2.p1) * (b / a);\n}\n\nPoint getCrossPointSS(Segment s1, Segment s2) {\n\tVector base = s2.p2 - s2.p1;\n\tdouble d1 = abs(cross(base, s1.p1 - s2.p1));\n\tdouble d2 = abs(cross(base, s1.p2 - s2.p1));\n\treturn s1.p1 + (s1.p2 - s1.p1) * (d1 / (d1 + d2));\n}\n\nvector<Point> getCrossPointCL(Circle c, Line l) {\n\tvector<Point> ps;\n\tVector pr = project(l, c.c);\n\tVector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);\n\tif (equals(getDistanceLP(l, c.c), c.r)) {\n\t\tps.push_back(pr);\n\t\treturn ps;\n\t}\n\tdouble base = sqrt(c.r * c.r - norm(pr - c.c));\n\tps.push_back(pr + e * base); ps.push_back(pr - e * base);\n\treturn ps;\n}\n\nvector<Point> getCrossPointCS(Circle c, Segment s) {\n\tLine l(s);\n\tvector<Point> ps = getCrossPointCL(c, l);\n\tif (intersectCS(c, s) == 2) return ps;\n\tif (dot(l.p1 - ps[0], l.p2 - ps[0]) < 0) ps[1] = ps[0];\n\telse ps[0] = ps[1];\n\treturn ps;\n}\n\ndouble arg(Vector p) { return atan2(p.y, p.x); }\nPoint polar(double a, double r) { return Point(cos(r) * a, sin(r) * a); }\n\nvector<Point> getCrossPointCC(Circle c1, Circle c2) {\n\tdouble d = abs(c1.c - c2.c);\n\tdouble a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n\tdouble t = arg(c2.c - c1.c);\n\tvector<Point> ps;\n\tps.push_back(c1.c + polar(c1.r, t + a)); ps.push_back(c1.c + polar(c1.r, t - a));\n\treturn ps;\n}\n\nvector<Point> tangentCP(Circle c, Point p) {\n\treturn getCrossPointCC(c, Circle(p, sqrt(norm(c.c - p) - c.r * c.r)));\n}\n\nvector<Line> tangentCC(Circle c1, Circle c2) {\n\tvector<Line> ls;\n\tif (c1.r < c2.r) swap(c1, c2);\n\tdouble g = norm(c1.c - c2.c);\n\tif (equals(g, 0)) return ls;\n\tPoint u = (c2.c - c1.c) / sqrt(g);\n\tPoint v = Point(-u.y, u.x);\n\tfor (int s = 1; s >= -1; s -= 2) {\n\t\tdouble h = (c1.r + s * c2.r) / sqrt(g);\n\t\tif (equals(1, h * h)) ls.push_back(Line(c1.c + u * c1.r, c1.c + (u + v) * c1.r));\n\t\telse if (1 - h * h > 0) {\n\t\t\tPoint uu = u * h, vv = v * sqrt(1 - h * h);\n\t\t\tls.push_back(Line(c1.c + (uu + vv) * c1.r, c2.c - (uu + vv) * c2.r * s));\n\t\t\tls.push_back(Line(c1.c + (uu - vv) * c1.r, c2.c - (uu - vv) * c2.r * s));\n\t\t}\n\t}\n\treturn ls;\n}\n\n// IN:2,ON:1,OUT:0\nint contains(Polygon g, Point p) {\n\tint n = g.size();\n\tbool x = false;\n\tfor (int i = 0; i < n; ++i) {\n\t\tPoint a = g[i] - p, b = g[(i + 1) % n] - p;\n\t\tif (abs(cross(a, b)) < EPS && dot(a, b) < EPS) return 1;\n\t\tif (a.y > b.y) swap(a, b);\n\t\tif (a.y < EPS && EPS < b.y && cross(a, b) > EPS) x = !x;\n\t}\n\treturn (x ? 2 : 0);\n}\n\nbool isConvex(Polygon p) {\n\tint n = p.size();\n\tfor (int i = 0; i < n; ++i)\n\t\tif (ccw(p[(i - 1 + n) % n], p[i], p[(i + 1) % n]) == CLOCKWISE) return false;\n\treturn true;\n}\n\nPolygon convexHull(Polygon p) {\n\tPolygon u, l;\n\tif (p.size() < 3) return p;\n\tsort(p.begin(), p.end());\n\tu.push_back(p[0]); u.push_back(p[1]);\n\tl.push_back(p[p.size() - 1]); l.push_back(p[p.size() - 2]);\n\tfor (int i = 2; i < (int)p.size(); ++i) {\n\t\tfor (int n = u.size(); n >= 2 && ccw(u[n - 2], u[n - 1], p[i]) == COUNTER_CLOCKWISE; --n)\n\t\t\tu.pop_back();\n\t\tu.push_back(p[i]);\n\t}\n\tfor (int i = p.size() - 3; i >= 0; --i) {\n\t\tfor (int n = l.size(); n >= 2 && ccw(l[n - 2], l[n - 1], p[i]) == COUNTER_CLOCKWISE; --n)\n\t\t\tl.pop_back();\n\t\tl.push_back(p[i]);\n\t}\n\treverse(l.begin(), l.end());\n\tfor (int i = u.size() - 2; i >= 1; --i) l.push_back(u[i]);\n\treturn l;\n}\n\ndouble area(Polygon p) {\n\tdouble res = 0;\n\tfor (int i = 0; i < (int)p.size(); ++i)\n\t\tres += cross(p[i], p[(i + 1) % p.size()]) / 2.0;\n\treturn res;\n}\n\ndouble area(Polygon p, Circle c) {\n\tif (p.size() < 3) return 0.0;\n\tfunction<double(Circle, Point, Point)> dfs = [&](Circle c, Point a, Point b) {\n\t\tVector va = c.c - a, vb = c.c - b;\n\t\tdouble f = cross(va, vb), res = 0;\n\t\tif (equals(f, 0.0)) return res;\n\t\tif (max(abs(va), abs(vb)) < c.r + EPS) return f;\n\t\tVector d(dot(va, vb), cross(va, vb));\n\t\tif (getDistanceSP(Segment(a, b), c.c) > c.r - EPS)\n\t\t\treturn c.r * c.r * atan2(d.y, d.x);\n\t\tauto u = getCrossPointCS(c, Segment(a, b));\n\t\tvector<Point> ps{ a,u[0],u[1],b };\n\t\tfor (int i = 1; i < ps.size(); ++i) res += dfs(c, ps[i - 1], ps[i]);\n\t\treturn res;\n\t};\n\tdouble res = 0;\n\tfor (int i = 0; i < p.size(); ++i) res += dfs(c, p[i], p[(i + 1) % p.size()]);\n\treturn res / 2;\n}\n\ndouble convexDiameter(Polygon p) {\n\tint n = p.size();\n\tif (n == 2) return abs(p[0] - p[1]);\n\tint i = 0, j = 0;\n\tfor (int k = 0; k < n; ++k) {\n\t\tif (p[i] < p[k]) i = k;\n\t\tif (!(p[j] < p[k])) j = k;\n\t}\n\tdouble res = 0;\n\tint ti = i, tj = j;\n\twhile (i != tj || j != ti) {\n\t\tres = max(res, abs(p[i] - p[j]));\n\t\tif (cross(p[(i + 1) % n] - p[i], p[(j + 1) % n] - p[j]) < 0.0)\n\t\t\ti = (i + 1) % n;\n\t\telse j = (j + 1) % n;\n\t}\n\treturn res;\n}\n\nPolygon convexCut(Polygon p, Line l) {\n\tPolygon q;\n\tfor (int i = 0; i < (int)p.size(); ++i) {\n\t\tPoint a = p[i], b = p[(i + 1) % p.size()];\n\t\tif (ccw(l.p1, l.p2, a) != CLOCKWISE) q.push_back(a);\n\t\tif (ccw(l.p1, l.p2, a) * ccw(l.p1, l.p2, b) < 0)\n\t\t\tq.push_back(getCrossPointLL(Line(a, b), l));\n\t}\n\treturn q;\n}\n\ndouble closestPair(vector<Point> ps) {\n\tsort(ps.begin(), ps.end());\n\tvector<Point> a(ps.size());\n\tfunction<double(int, int)> solve = [&](int l, int r) {\n\t\tif (r - l < 2) return 1e18;\n\t\tint mid = (l + r) >> 1;\n\t\tdouble x = ps[mid].x;\n\t\tdouble d = min(solve(l, mid), solve(mid, r));\n\t\tinplace_merge(ps.begin() + l, ps.begin() + mid, ps.begin() + r,\n\t\t\t\t\t  [](const Point& a, const Point& b) {return a.y < b.y; });\n\t\tint ptr = 0;\n\t\tfor (int i = l; i < r; ++i) {\n\t\t\tif (abs(ps[i].x - x) >= d) continue;\n\t\t\tfor (int j = 0; j < ptr; ++j) {\n\t\t\t\tPoint luz = ps[i] - a[ptr - j - 1];\n\t\t\t\tif (luz.y >= d) break;\n\t\t\t\td = min(d, abs(luz));\n\t\t\t}\n\t\t\ta[ptr++] = ps[i];\n\t\t}\n\t\treturn d;\n\t};\n\treturn solve(0, ps.size());\n}\n\nint manhattanIntersection(vector<Segment> ss) {\n\tconst int INF = numeric_limits<int>::max();\n\tconst int BOTTOM = 0, LEFT = 1, RIGHT = 2, TOP = 3;\n\tint n = ss.size();\n\tvector<EndPoint> ep;\n\tfor (int i = 0; i < n; ++i) {\n\t\tif (ss[i].p1.y == ss[i].p2.y) {\n\t\t\tif (ss[i].p1.x > ss[i].p2.x) swap(ss[i].p1, ss[i].p2);\n\t\t\tep.push_back(EndPoint(ss[i].p1, i, LEFT));\n\t\t\tep.push_back(EndPoint(ss[i].p2, i, RIGHT));\n\t\t} else {\n\t\t\tif (ss[i].p1.y > ss[i].p2.y) swap(ss[i].p1, ss[i].p2);\n\t\t\tep.push_back(EndPoint(ss[i].p1, i, BOTTOM));\n\t\t\tep.push_back(EndPoint(ss[i].p2, i, TOP));\n\t\t}\n\t}\n\tsort(ep.begin(), ep.end());\n\tset<int> st;\n\tst.insert(INF);\n\tint cnt = 0;\n\tfor (int i = 0; i < 2 * n; ++i) {\n\t\tif (ep[i].st == TOP) st.erase(ep[i].p.x);\n\t\telse if (ep[i].st == BOTTOM) st.insert(ep[i].p.x);\n\t\telse if (ep[i].st == LEFT) {\n\t\t\tauto b = st.lower_bound(ss[ep[i].seg].p1.x);\n\t\t\tauto e = st.lower_bound(ss[ep[i].seg].p2.x);\n\t\t\tcnt += distance(b, e);\n\t\t}\n\t}\n\treturn cnt;\n}\n//END\n\n\n\n\n\n\n\n\n\n\n\n\n\nvoid CGL1A() {\n\tSegment s; cin >> s;\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tPoint p; cin >> p;\n\t\tPoint a = project(s, p);\n\t\tprintf(\"%.10f %.10f\\n\", a.x, a.y);\n\t}\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/1/CGL_1_A\n*/\nvoid CGL1B() {\n\tSegment s; cin >> s;\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tPoint p; cin >> p;\n\t\tPoint a = reflect(s, p);\n\t\tprintf(\"%.10f %.10f\\n\", a.x, a.y);\n\t}\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/1/CGL_1_B\n*/\nvoid CGL1C() {\n\tPoint p0, p1, p2; cin >> p0 >> p1;\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tcin >> p2;\n\t\tint a = ccw(p0, p1, p2);\n\t\tif (a == COUNTER_CLOCKWISE) cout << \"COUNTER_CLOCKWISE\";\n\t\telse if (a == CLOCKWISE) cout << \"CLOCKWISE\";\n\t\telse if (a == ONLINE_BACK) cout << \"ONLINE_BACK\";\n\t\telse if (a == ONLINE_FRONT) cout << \"ONLINE_FRONT\";\n\t\telse cout << \"ON_SEGMENT\";\n\t\tcout << endl;\n\t}\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/1/CGL_1_C\n*/\nvoid CGL2A() {\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tVector p0, p1, p2, p3;\n\t\tcin >> p0 >> p1 >> p2 >> p3;\n\t\tif (isParallel(p1 - p0, p3 - p2)) cout << 2;\n\t\telse if (isOrthogonal(p1 - p0, p3 - p2)) cout << 1;\n\t\telse cout << 0;\n\t\tcout << endl;\n\t}\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/2/CGL_2_A\n*/\nvoid CGL2B() {\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tSegment s1, s2;\n\t\tcin >> s1 >> s2;\n\t\tcout << (intersectSS(s1, s2) ? 1 : 0) << endl;\n\t}\n}/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/2/CGL_2_B\n*/\nvoid CGL2C() {\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tSegment s1, s2;\n\t\tcin >> s1 >> s2;\n\t\tPoint a = getCrossPointLL(s1, s2);\n\t\tprintf(\"%.10f %.10f\\n\", a.x, a.y);\n\t}\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/2/CGL_2_C\n*/\nvoid CGL2D() {\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tSegment s1, s2;\n\t\tcin >> s1 >> s2;\n\t\tprintf(\"%.10f\\n\", getDistanceSS(s1, s2));\n\t}\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/2/CGL_2_D\n*/\nvoid CGL3A() {\n\tint n; cin >> n;\n\tPolygon p(n);\n\tfor (auto& a : p) cin >> a;\n\tprintf(\"%.1f\\n\", area(p));\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/3/CGL_3_A\n*/\nvoid CGL3B() {\n\tint n; cin >> n;\n\tPolygon p(n);\n\tfor (auto& a : p) cin >> a;\n\tcout << (isConvex(p) ? 1 : 0) << endl;\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/3/CGL_3_B\n*/\nvoid CGL3C() {\n\tint n; cin >> n;\n\tPolygon g(n);\n\tfor (auto& a : g) cin >> a;\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tPoint p; cin >> p;\n\t\tcout << contains(g, p) << endl;\n\t}\n}/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/3/CGL_3_C\n*/\nvoid CGL4A() {\n\tint n; cin >> n;\n\tPolygon p(n);\n\tfor (auto& a : p) cin >> a;\n\tPolygon t = convexHull(p);\n\tcout << t.size() << endl;\n\tfor (auto a : t) cout << a.x << \" \" << a.y << endl;\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/4/CGL_4_A\n*/\nvoid CGL4B() {\n\tint n; cin >> n;\n\tPolygon p(n);\n\tfor (auto& a : p) cin >> a;\n\tprintf(\"%.10f\\n\", convexDiameter(p));\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/4/CGL_4_B\n*/\nvoid CGL4C() {\n\tint n; cin >> n;\n\tPolygon p(n);\n\tfor (auto& a : p) cin >> a;\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tLine l; cin >> l;\n\t\tprintf(\"%.10f\\n\", area(convexCut(p, l)));\n\t}\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/4/CGL_4_C\n*/\nvoid CGL5A() {\n\tint n; cin >> n;\n\tvector<Point> ps(n);\n\tfor (auto& a : ps) cin >> a;\n\tprintf(\"%.10f\\n\", closestPair(ps));\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/5/CGL_5_A\n*/\nvoid CGL6A() {\n\tint n; cin >> n;\n\tvector<Segment> ss(n);\n\tfor (auto& a : ss) cin >> a;\n\tcout << manhattanIntersection(ss) << endl;\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/6/CGL_6_A\n*/\nvoid CGL7A() {\n\tCircle c1, c2; cin >> c1.c >> c1.r >> c2.c >> c2.r;\n\tcout << intersectCC(c1, c2) << endl;\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/7/CGL_7_A\n*/\n\nvoid CGL7D() {\n\tCircle c; cin >> c.c.x >> c.c.y >> c.r;\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tLine l; cin >> l.p1.x >> l.p1.y >> l.p2.x >> l.p2.y;\n\t\tauto a = getCrossPointCL(c, l);\n\t\tsort(a.begin(), a.end());\n\t\tprintf(\"%.10f %.10f %.10f %.10f\\n\", a[0].x, a[0].y, a[1].x, a[1].y);\n\t}\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/7/CGL_7_D\n*/\nvoid CGL7E() {\n\tCircle c1; cin >> c1.c.x >> c1.c.y >> c1.r;\n\tCircle c2; cin >> c2.c.x >> c2.c.y >> c2.r;\n\tauto a = getCrossPointCC(c1, c2);\n\tsort(a.begin(), a.end());\n\tprintf(\"%.10f %.10f %.10f %.10f\\n\", a[0].x, a[0].y, a[1].x, a[1].y);\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/7/CGL_7_E\n*/\nvoid CGL7F() {\n\tPoint p; cin >> p;\n\tCircle c; cin >> c.c >> c.r;\n\tauto a = tangentCP(c, p);\n\tsort(a.begin(), a.end());\n\tprintf(\"%.10f %.10f\\n%.10f %.10f\\n\", a[0].x, a[0].y, a[1].x, a[1].y);\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/7/CGL_7_F\n*/\nvoid CGL7G() {\n\tCircle c1, c2; cin >> c1.c >> c1.r >> c2.c >> c2.r;\n\tauto a = tangentCC(c1, c2);\n\tvector<Point> ps;\n\tfor (auto e : a) ps.push_back(getCrossPointCL(c1, e)[0]);\n\tsort(ps.begin(), ps.end());\n\tfor (auto e : ps) printf(\"%.10f %.10f\\n\", e.x, e.y);\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/7/CGL_7_G\n*/\nvoid CGL7H() {\n\tint n; cin >> n;\n\tCircle c; c.c = Point(0, 0); cin >> c.r;\n\tPolygon p(n);\n\tfor (auto& a : p) cin >> a;\n\tprintf(\"%.10f\\n\", area(p, c));\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/7/CGL_7_H\n*/\n\nint main() {\n\t//CGL1A();\n\t//CGL1B();\n    //CGL1C();\n\t//CGL2A();\n\t//CGL2B();\n\t//CGL2C();\n\tCGL2D();\n\t//CGL3A();\n\t//CGL3B();\n\t//CGL3C();\n\t//CGL4A();\n\t//CGL4B();\n\t//CGL4C();\n\t//CGL5A();\n\t//CGL6A();\n\t//CGL7A();\n\t//CGL7D();\n\t//CGL7E();\n\t//CGL7F();\n\t//CGL7G();\n\t//CGL7H();\n\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a)-(b)) < EPS)\n\n// ???/????????????\nstruct Point {\n  double x, y;\n  Point(double x = 0.0, double y = 0.0):x(x), y(y){}\n  \n  Point operator + (Point p) { return Point(x + p.x, y + p.y); }\n  Point operator - (Point p) { return Point(x - p.x, y - p.y); }\n  Point operator * (double a) { return Point(x * a, y * a); }\n  Point operator / (double a) { return Point(x / a, y / a); }\n\n  double abs() { return sqrt(norm()); }\n  double norm() { return x*x + y*y; }\n\n  bool operator < (const Point& p) const {\n    return x != p.x ? x < p.x : y < p.y;\n  }\n  bool operator == (const Point& p) const {\n    return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n  }\n};\ntypedef Point Vector;\n\n// ??????/??´???\nstruct Segment {\n  Point p1, p2;\n};\ntypedef Segment Line;\n\n// ????????????????????????\ndouble norm(Vector v)\n{\n  return v.x*v.x + v.y*v.y;\n}\n// ?????????????????§??????\ndouble abs(Vector v)\n{\n  return sqrt(norm(v));\n}\n// ?????????????????????\ndouble dot(Vector a, Vector b)\n{\n  return a.x*b.x + a.y*b.y;\n}\n// ??????????????????????????§??????\ndouble cross(Vector a, Vector b)\n{\n  return a.x*b.y - a.y*b.x;\n}\n// ??´?????????\nbool isOrthogonal(Vector a, Vector b)\n{\n  return equals(dot(a, b), 0.0);\n}\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2)\n{\n  return isOrthogonal(a1 - a2, b1 - b2);\n}\nbool isOrthogonal(Segment s1, Segment s2)\n{\n  return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n// ????????????\nbool isParallel(Vector a, Vector b)\n{\n  return equals(cross(a, b), 0.0);\n}\nbool isParallel(Point a1, Point a2, Point b1, Point b2)\n{\n  return isParallel(a1 - a2, b1 - b2);\n}\nbool isParallel(Segment s1, Segment s2)\n{\n  return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n// ?°???±\nPoint project(Segment s, Point p)\n{\n  Vector base = s.p2 - s.p1;\n  double r = dot(p - s.p1, base) / norm(base);\n  return s.p1 + base * r;\n}\n// ????°?\nPoint reflect(Segment s, Point p)\n{\n  return p + (project(s, p) - p) * 2.0;\n}\n// ?????????????????¢\ndouble getDistance(Point a, Point b)\n{\n  return abs(a - b);\n}\n// ??´?????¨?????¨????????¢\ndouble getDistanceLP(Line l, Point p)\n{\n  return abs(cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1));\n}\n// ????????¨?????¨????????¢\ndouble getDistanceSP(Segment s, Point p)\n{\n  if(dot(s.p2 - s.p1, p - s.p1) < 0.0) return abs(p - s.p1);\n  if(dot(s.p1 - s.p2, p - s.p2) < 0.0) return abs(p - s.p2);\n  return getDistanceLP(s, p);\n}\n// ????????????????????¢\ndouble getDistance(Segment s1, Segment s2)\n{\n  //if(intersect(s1, s2)) return 0.0;\n  return min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n\t     min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\nint main()\n{\n  int q; cin >> q;\n  while(q--) {\n    Segment s[2];\n    cin >> s[0].p1.x >> s[0].p1.y >> s[0].p2.x >> s[0].p2.y;\n    cin >> s[1].p1.x >> s[1].p1.y >> s[1].p2.x >> s[1].p2.y;\n    printf(\"%.10f\\n\", getDistance(s[0], s[1]));\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n\nusing namespace std;\n#define eps = (1e-10);\n//点\nstruct Point{\n    double x,y;\n    Point(double _x=0,double _y=0):x(_x),y(_y){}\n    Point operator + (Point p){return Point(x+p.x,y+p.y);}\n    Point operator - (Point p){return Point(x-p.x,y-p.y);}\n    Point operator * (double a){return Point(a*x,a*y);}\n    Point operator / (double a){return Point(x/a,y/a);}\n    double norm(){return x*x+y*y;}//模的平方\n    double ABS() {return sqrt(norm());}//模\n};\n//线段\nstruct Segment{\n    Point p1,p2;\n};\n//点积\ndouble dot(Point a,Point b){\n    return a.x*b.x+a.y*b.y;\n}\n//叉积\ndouble cross(Point a,Point b){\n    return a.x*b.y-a.y*b.x;\n}\nbool Intersect(Segment A ,Segment B){\n    if(max(B.p1.x,B.p2.x)<min(A.p1.x,A.p2.x)) return 0;\n    if(max(B.p1.y,B.p2.y)<min(A.p1.y,A.p2.y)) return 0;\n    if(max(A.p1.y,A.p2.y)<min(B.p1.y,B.p2.y)) return 0;\n    if(max(A.p1.x,A.p2.x)<min(B.p1.x,B.p2.x)) return 0;\n    if(cross(A.p1-B.p1,A.p2-B.p1)*cross(A.p1-B.p2,A.p2-B.p2)>0) return 0;\n    if(cross(B.p1-A.p1,B.p2-A.p1)*cross(B.p1-A.p2,B.p2-A.p2)>0) return 0;\n    return 1;\n}\ndouble Pointdis(Point a,Point b){\n    return sqrt((a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y));\n}\ndouble Segdis(Point A ,Segment B){\n    Point alp1=A-B.p1;\n    Point beta1=B.p2-B.p1;\n    Point alp2=A-B.p2;\n    Point beta2=B.p1-B.p2;\n    if(dot(alp1,beta1)<0||dot(alp2,beta2)<0){\n        return min(Pointdis(A,B.p1),Pointdis(A,B.p2));\n    }\n    double a=B.p1.y-B.p2.y;\n    double b=B.p2.x-B.p1.x;\n    double c=B.p1.y*(B.p1.x-B.p2.x)-B.p1.x*(B.p1.y-B.p2.y);\n    return fabs(a*A.x+b*A.y+c)/sqrt(a*a+b*b);\n}\nint main(){\n    int q;\n    scanf(\"%d\",&q);\n    while(q--){\n        Segment A,B;\n        scanf(\"%lf %lf %lf %lf\",&A.p1.x,&A.p1.y,&A.p2.x,&A.p2.y);\n        scanf(\"%lf %lf %lf %lf\",&B.p1.x,&B.p1.y,&B.p2.x,&B.p2.y);\n        if(Intersect(A,B)){\n            cout<<0<<endl;continue;\n        }\n        double ans=min(Segdis(A.p1,B),min(min(Segdis(A.p2,B),Segdis(B.p1,A)),Segdis(B.p2,A)));\n        printf(\"%.10lf\\n\",ans);\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> Point;\ntypedef pair<Point, Point> Line;\nconst double EPS = 1e-11;\n\n// 内積 |a||b|cosθ\ndouble dot(Point a, Point b){\n\t// return a.real() * b.real() + a.imag() * b.imag();\n\treturn (conj(a) * b).real();\n}\n// 外積、符号付面積の２倍　|a||b|sinθ\ndouble cross(Point a, Point b){\n\t// return a.real() * b.imag() - a.imag() * b.real();\n\treturn (conj(a) * b).imag();\n}\n// 点と直線の距離\ndouble line_to_point_dis(Line l, Point p){\n    Point a = l.first, b = l.second, c = p;\n    return fabs(cross(c - a, b - a)) / fabs(abs(b - a));\n}\n// 線分と直線の距離\ndouble seg_to_point_dis(Line l, Point p){\n    Point a = l.first, b = l.second, c = p;\n    if(dot(b - a, c - a) < EPS) return abs(c - a);\n    if(dot(a - b, c - b) < EPS) return abs(c - b);\n    return line_to_point_dis(l, p);\n}\n// 線分と線分の距離\ndouble seg_to_seg_dis(Line a, Line b){\n    double res = seg_to_point_dis(a, b.first);\n    res = min(res, seg_to_point_dis(a, b.second));\n    res = min(res, seg_to_point_dis(b, a.first));\n    res = min(res, seg_to_point_dis(b, a.second));\n    return res;\n}\n\nint main(){\n    int q;\n    cin >> q;\n    for(int i = 0; i < q; i++){\n        double x, y;\n        Point p[4];\n        for(int j = 0; j < 4; j++){\n            cin >> x >> y;\n            p[j] = {x, y};\n        }\n        Line s1 = {p[0], p[1]};\n        Line s2 = {p[2], p[3]};\n        double len = seg_to_seg_dis(s1, s2);\n        printf(\"%.10f\\n\", len);\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <cassert>// c\n#include <iostream>// io\n#include <iomanip>\n#include <fstream>\n#include <sstream>\n#include <vector>// container\n#include <map>\n#include <set>\n#include <queue>\n#include <bitset>\n#include <stack>\n#include <algorithm>// other\n#include <complex>\n#include <numeric>\n#include <functional>\nusing namespace std;\n\ntypedef int32_t i32;typedef int64_t i64;typedef i64 ll;typedef uint32_t uint;typedef uint64_t ull;\n\n#define ALL(c) (begin(c)),(end(c))\n#define REP(i,n) FOR(i,0,n)\n#define REPr(i,n) FORr(i,0,n)\n#define FOR(i,l,r) for(int i=(int)(l);i<(int)(r);++i)\n#define FORr(i,l,r) for(int i=(int)(r)-1;i>=(int)(l);--i)\n#define EACH(it,o) for(__typeof((o).begin()) it = (o).begin(); it != (o).end(); ++it)\n#define IN(l,v,r) ((l)<=(v) && (v)<(r))\n\n//debug\n#define DUMP(x)  cerr << #x << \" = \" << (x)\n#define DUMPLN(x)  DUMP(x) <<endl\n#define DEBUG(x) DUMP(x) << LINE() << \" \" << __FILE__\n#define DEBUGLN(x) DEBUG(x)<<endl\n#define LINE()    cerr<< \" (L\" << __LINE__ << \")\"\n#define LINELN()    LINE()<<endl\n#define CHECK(exp,act)  if(exp!=act){DUMPLN(exp);DEBUGLN(act);}\n#define STOP(e)  CHECK(e,true);if(!(e)) exit(1);\n\nclass range {\nprivate:\n    struct Iter{\n        int v;\n        int operator*(){return v;}\n        bool operator!=(Iter& itr) {return v < itr.v;}\n        void operator++() {++v;}\n    };\n    Iter i, n;\npublic:\n    range(int n) : i({0}), n({n}) {}\n    range(int i, int n) : i({i}), n({n}) {}\n    Iter& begin() {return i;}\n    Iter& end() {return n;}\n};\n\n//output\ntemplate<typename T> ostream& operator << (ostream& os, const vector<T>& as){REP(i,as.size()){if(i!=0)os<<\" \"; os<<as[i];}return os;}\ntemplate<typename T> ostream& operator << (ostream& os, const vector<vector<T> >& as){REP(i,as.size()){if(i!=0)os<<endl; os<<as[i];}return os;}\ntemplate<typename T> ostream& operator << (ostream& os, const set<T>& ss){EACH(a,ss){if(a!=ss.begin())os<<\" \"; os<<a;}return os;}\ntemplate<typename T1,typename T2> ostream& operator << (ostream& os, const pair<T1,T2>& p){os<<p.first<<\" \"<<p.second;return os;}\ntemplate<typename K,typename V> ostream& operator << (ostream& os, const map<K,V>& m){bool isF=true;EACH(p,m){if(!isF)os<<endl;os<<p;isF=false;}return os;}\n\n//input\nchar tmp[1000];\n#define nextInt(n) scanf(\"%d\",&n)\n#define nextLong(n) scanf(\"%lld\",&n) //I64d\n#define nextDouble(n) scanf(\"%lf\",&n) \n#define nextChar(n) scanf(\"%c\",&n)\n#define nextString(n) scanf(\"%s\",tmp);n=tmp\n\n// values\ntemplate<class T> T INF(){assert(false);};\ntemplate<> int INF<int>(){return 1<<28;};\ntemplate<> ll INF<ll>(){return 1LL<<58;};\ntemplate<> double INF<double>(){return 1e16;};\n\nnamespace _double_tmpl{\n    typedef long double D;const D EPS = 1e-8;\n    \n    static constexpr D Ae=0;\n    D A(D a,D b){return a+b;}D Ainv(D a){return -a;}\n    D S(D a,D b){return A(a,Ainv(b));}\n    \n    static constexpr D Me=1;\n    D M(D a,D b){return a*b;}D Minv(D a){return 1.0/a;};\n\n    int sig(D a,D b=0){return a<b-EPS?-1:a>b+EPS?1:0;}\n    bool eq(D a,D b){ return sig(abs(a-b))==0;}\n\n}\nusing namespace _double_tmpl;\nnamespace Ps{\n    // using namespace _double_tmpl;\n    typedef complex<D> P,Vec;\n\n#define X real()\n#define Y imag()\n    istream& operator >> (istream& is,complex<D>& p){\n        D x,y;is >> x >> y;p=P(x,y);return is;\n    }\n\n    bool eq(P a,P b){return eq(a.X,b.X) and eq(a.Y,b.Y);}\n    // a×b\n    D cross(const Vec& a,const Vec& b){return imag(conj(a)*b);}\n    // a・b\n    D dot(const Vec&a,const Vec& b) {return real(conj(a)*b);}\n\n    int ccw(const P& a,P b,P c){\n        b -= a; c -= a;\n        if (cross(b,c) > EPS)   return +1;       // counter clockwise\n        if (cross(b,c) < -EPS)   return -1;       // clockwise\n        if (dot(b,c) < 0)     return +2;       // c--a--b on line\n        if (norm(b) < norm(c)) return -2;       // a--b--c on line\n        return 0;\n    }\n}\nusing namespace Ps;\n\nnamespace Ls{\n    struct L : public vector<P> {\n        Vec vec;\n        L(const P &a, const P &b):vec(b - a){\n            push_back(a); push_back(b);\n        }\n    };\n    P projection(const L &l, const P &p) {\n      D t = dot(p-l[0],l.vec) / norm(l.vec);\n      return l[0] + t * l.vec;\n    }\n    // verified by AOJLIB\n    // http://judge.u-aizu.ac.jp/onlinejudge/review.jsp?rid=1092230\n    bool isIntersectSS(const L &s, const L &t) {\n      return ccw(s[0],s[1],t[0])*ccw(s[0],s[1],t[1]) <= 0 &&\n             ccw(t[0],t[1],s[0])*ccw(t[0],t[1],s[1]) <= 0;\n    }\n    bool isIntersectSP(const L &s, const P &p) {\n      return sig(abs(s[0]-p)+abs(s[1]-p),abs(s[1]-s[0])) <=0; // triangle inequality\n    }\n    D distanceSP(const L &s, const P &p) {\n      const P r = projection(s, p);\n      if (isIntersectSP(s, r)) return abs(r - p);\n      return min(abs(s[0] - p), abs(s[1] - p));\n    }\n    D distanceSS(const L &s, const L &t) {\n        if (isIntersectSS(s, t)) return 0;\n        return min(min(distanceSP(s, t[0]), distanceSP(s, t[1])),\n                 min(distanceSP(t, s[0]), distanceSP(t, s[1])));\n    }\n}\nusing namespace Ls;\n\n\nstringstream ss;\nclass Main{\n    public:\n    void run(){\n        \n        int q;cin >> q;\n        REP(i,q){\n            P a,b;cin >> a >> b;L l1(a,b);\n            P c,d;cin >> c >> d;L l2(c,d);\n            cout << distanceSS(l1, l2) <<endl;\n        }\n    }\n};\n\nint main(){\n cout <<fixed<<setprecision(20);\n cin.tie(0);\n ios::sync_with_stdio(false);\n Main().run();\n return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> Point;\ntypedef pair<Point, Point> Line;\nconst double EPS = 1e-11;\n\n// 内積 |a||b|cosθ\ndouble dot(Point a, Point b){\n\t// return a.real() * b.real() + a.imag() * b.imag();\n\treturn (conj(a) * b).real();\n}\n// 外積、符号付面積の２倍　|a||b|sinθ\ndouble cross(Point a, Point b){\n\t// return a.real() * b.imag() - a.imag() * b.real();\n\treturn (conj(a) * b).imag();\n}\n// 点と直線の距離\ndouble line_to_point_dis(Line l, Point p){\n    Point a = l.first, b = l.second, c = p;\n    return fabs(cross(c - a, b - a)) / fabs(abs(b - a));\n}\n// 線分と直線の距離\ndouble seg_to_point_dis(Line l, Point p){\n    Point a = l.first, b = l.second, c = p;\n    if(dot(b - a, c - a) < EPS) return abs(c - a);\n    if(dot(a - b, c - b) < EPS) return abs(c - b);\n    return line_to_point_dis(l, p);\n}\n// 線分と線分の距離\ndouble seg_to_seg_dis(Line a, Line b){\n    double res = seg_to_point_dis(a, b.first);\n    res = min(res, seg_to_point_dis(a, b.second));\n    res = min(res, seg_to_point_dis(b, a.first));\n    res = min(res, seg_to_point_dis(b, a.second));\n    return res;\n}\n\nint main(){\n    int q;\n    cin >> q;\n    for(int i = 0; i < q; i++){\n        double x, y;\n        Point p[4];\n        for(int j = 0; j < 4; j++){\n            cin >> x >> y;\n            p[j] = {x, y};\n        }\n        Line s1 = {p[0], p[1]};\n        Line s2 = {p[2], p[3]};\n        double len = seg_to_seg_dis(s1, s2);\n        printf(\"%.12f\\n\", len);\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define For(i, a, b) for(int (i)=(a); (i)<(b); ++(i))\n#define rFor(i, a, b) for(int (i)=(a)-1; (i)>=(b); --(i))\n#define rep(i, n) For((i), 0, (n))\n#define rrep(i, n) rFor((i), (n), 0)\n#define fi first\n#define se second\nusing namespace std;\ntypedef long long lint;\ntypedef unsigned long long ulint;\ntypedef pair<int, int> pii;\ntypedef complex<double> xy_t;\ntypedef pair<xy_t, int> pci;\ntypedef vector<lint> poly;\ntemplate<class T>bool chmax(T &a, const T &b){if(a<b){a=b; return true;} return false;}\ntemplate<class T>bool chmin(T &a, const T &b){if(a>b){a=b; return true;} return false;}\n\nconstexpr lint mod = 1e9+7;\nconstexpr lint INF = mod*mod;\nconstexpr int MAX = 100010;\n\nconstexpr double eps=1e-9;\n\ninline int sgn(double x){\n    if(x<-eps) return -1;\n    if(x>eps) return 1;\n    return 0;\n}\n\ninline bool EQ(double x, double y){\n    return sgn(x-y)==0;\n}\n\ninline bool GE(double x, double y){\n    return sgn(x-y)==1;\n}\n\ninline bool LE(double x, double y){\n    return sgn(x-y)==-1;\n}\n\ninline bool GEQ(double x, double y){\n    return sgn(x-y)>=0;\n}\n\ninline bool LEQ(double x, double y){\n    return sgn(x-y)<=0;\n}\n\nstruct Point{\n    double x, y;\n    Point(double x, double y): x(x), y(y){}\n\n    Point operator+(const Point &p){\n        return {x+p.x, y+p.y};\n    }\n\n    Point operator-(const Point &p){\n        return {x-p.x, y-p.y};\n    }\n\n    Point operator*(const double k){\n        return {k*x, k*y};\n    }\n\n    Point operator/(const double k){\n        return {x/k, y/k};\n    }\n\n    double operator*(const Point &p){\n        return x*p.x+y*p.y;\n    }\n\n    double operator^(const Point &p){\n        return x*p.y-y*p.x;\n    }\n\n    bool operator==(const Point &p){\n        return EQ(x, p.x) && EQ(y, p.y);\n    }\n};\n\nusing Vec=Point;\nusing pdi=pair<double, int>;\n\ndouble abs(Point p){\n    return hypot(p.x, p.y);\n}\n\ndouble arg(Point p){\n    return atan2(p.y, p.x);\n}\n\nconstexpr int CCW_COUNTER_CLOCKWISE=1;\nconstexpr int CCW_CLOCKWISE=-1;\nconstexpr int CCW_ONLINE_BACK=-2;\nconstexpr int CCW_ONLINE_FRONT=2;\nconstexpr int CCW_ON_SEGMENT=0;\n\ninline int ccw(Point a, Point b, Point c){\n    Vec v=b-a, w=c-a;\n    if(GE(v^w, 0)) return CCW_COUNTER_CLOCKWISE;\n    if(LE(v^w, 0)) return CCW_CLOCKWISE;\n    if(LE(v*w, 0)) return CCW_ONLINE_BACK;\n    if(LE((a-b)*(c-b), 0)) return CCW_ONLINE_FRONT;\n    return CCW_ON_SEGMENT;\n}\n\nbool isParallel(Vec v, Vec w){\n    return EQ(v^w, 0);\n}\n\nbool isOrthogonal(Vec v, Vec w){\n    return EQ(v*w, 0);\n}\n\nbool intersectSS(Point a, Point b, Point c, Point d){\n    return ccw(a, b, c)*ccw(a, b, d)<=0 && ccw(c, d, a)*ccw(c, d, b)<=0;\n}\n\nPoint getCrossPointLL(Point a, Vec v, Point b, Vec w){\n    double t=((b-a)^w)/(v^w);\n    return a+v*t;\n}\n\ndouble getDistanceLP(Point a, Vec v, Point p){\n    return abs(v^(p-a)/abs(v));\n}\n\ndouble getDistanceSP(Point a, Point b, Point p){\n    if(LE((b-a)*(p-a), 0)) return abs(p-a);\n    if(LE((a-b)*(p-b), 0)) return abs(p-b);\n    return getDistanceLP(a, b-a, p);\n}\n\ndouble getDistanceLL(Point a, Vec v, Point b, Vec w){\n    if(isParallel(v, w)) return getDistanceLP(a, v, b);\n    return 0;\n}\n\ndouble getDistanceLS(Point a, Vec v, Point c, Point d){\n    Point b=a+v;\n    if(ccw(a, b, c)*ccw(a, b, d)<=0) return 0;\n    return min(getDistanceLP(a, v, c), getDistanceLP(a, v, d));\n}\n\ndouble getDistanceSS(Point a, Point b, Point c, Point d){\n    if(intersectSS(a, b, c, d)) return 0;\n    return min({getDistanceSP(a, b, c), getDistanceSP(a, b, d),\n                getDistanceSP(c, d, a), getDistanceSP(c, d, b)});\n}\n\nint main(){\n    int q;\n    scanf(\"%d\", &q);\n    while(q--){\n        vector<Point> p;\n        rep(i, 4){\n            double x, y;\n            scanf(\"%lf%lf\", &x, &y);\n            p.emplace_back(x, y);\n        }\n        printf(\"%.20lf\\n\", getDistanceSS(p[0], p[1], p[2], p[3]));\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long lint;\ntypedef long double louble;\n\ntemplate<typename T1,typename T2> inline T1 max(T1 a,T2 b){return a<b?b:a;}\ntemplate<typename T1,typename T2> inline T1 min(T1 a,T2 b){return a<b?a:b;}\n\nnamespace ae86\n{\n\tconst int bufl = 1<<15;\n\n\tchar buf[bufl],*s=buf,*t=buf;\n\n\tinline int fetch()\n\t{\n\t\tif(s==t){t=(s=buf)+fread(buf,1,bufl,stdin);if(s==t)return EOF;}\n\t\treturn *s++;\n\t}\n\n\tinline int ty()\n\t{\n\t\tint a=0,b=1,c=fetch();\n\t\twhile(!isdigit(c))b^=c=='-',c=fetch();\n\t\twhile(isdigit(c))a=a*10+c-48,c=fetch();\n\t\treturn b?a:-a;\n\t}\n}\nusing ae86::ty;\n\nconst double eps = 1e-6;\n\ninline int dcmp(double x){if(-eps<x && x<eps)return 0;return x>0?1:-1;}\n\nstruct points\n{\n\tdouble x,y;\n\tpoints(double _x=0,double _y=0){x=_x,y=_y;}\n\n\tinline friend points operator + (points a,points b){return points(a.x+b.x,a.y+b.y);}\n\tinline friend points operator - (points a,points b){return points(a.x-b.x,a.y-b.y);}\n\tinline friend points operator * (points a,double b){return points(a.x*b,a.y*b);}\n\tinline friend points operator / (points a,double b){return points(a.x/b,a.y/b);}\n\n\tinline friend int operator == (points a,points b){return dcmp(a.x-b.x)==0 && dcmp(a.y-b.y)==0;}\n\n\tvoid takein(){x=ty(),y=ty();}\n\tvoid print(char ends='\\n'){printf(\"%.12lf %.12lf\",x,y),putchar(ends);}\n};\n\ninline double dox(points a,points b){return a.x*b.x+a.y*b.y;}\ninline double cox(points a,points b){return a.x*b.y-a.y*b.x;}\ninline double length(points a){return sqrt(dox(a,a));}\ninline double distan(points a,points b){return length(a-b);}\n\ninline points pervec(points a){if(dcmp(length(a))<=0)return points(0,0);return a/length(a);}\n\ninline int isponl(points p,points a,points b)\n{\n\treturn dcmp(cox(p-a,p-b))==0 && distan(a,p)<=distan(a,b) && distan(b,p)<=distan(a,b);\n}\n\ninline int iscrashed(points al,points ar,points bl,points br)\n{\n\tdouble amix=min(al.x,ar.x),amxx=max(al.x,ar.x),amiy=min(al.y,ar.y),amxy=max(al.y,ar.y);\n\tdouble bmix=min(bl.x,br.x),bmxx=max(bl.x,br.x),bmiy=min(bl.y,br.y),bmxy=max(bl.y,br.y);\n\t\n\tif(amxx<bmix || bmxx<amix || amxy<bmiy || bmxy<amiy)return 0;\n\tif(isponl(al,bl,br) || isponl(ar,bl,br) || isponl(bl,al,ar) || isponl(br,al,ar))return 1;\n\n\tif(dcmp(cox(al-bl,br-bl))!=dcmp(cox(ar-bl,br-bl))\n\t\t&& dcmp(cox(bl-al,ar-al))!=dcmp(cox(br-al,ar-al)))return 1;\n\treturn 0;\n}\n\ninline points crash(points al,points ar,points bl,points br)\n{\n\tpoints a=ar-al,b=br-bl;\n\tdouble bas=cox(al-bl,b)/cox(b,a);\n\treturn al+a*bas;\n}\n\ninline points ortho(points p,points a,points b)\n{\n\tpoints c=a+pervec(b-a);\n\tdouble dis=dox(p-a,c-a);\n\tpoints tar=a+(c-a)*dis;\n\treturn tar;\n}\n\ninline double distanpl(points p,points a,points b)\n{\n\tif(isponl(p,a,b))return 0;\n\tpoints ort=ortho(p,a,b);\n\tif(isponl(ort,a,b))return distan(p,ort);\n\treturn min(distan(p,a),distan(p,b));\n}\n\nvoid finder()\n{\n\tpoints al,ar,bl,br;\n\tal.takein(),ar.takein(),bl.takein(),br.takein();\n\t\n\tif(iscrashed(al,ar,bl,br)){printf(\"%.10lf\\n\",0.0);return;}\n\tprintf(\"%.10lf\\n\",min(min(distanpl(al,bl,br),distanpl(ar,bl,br)),\n\t\t\t\t\t\t\t\t min(distanpl(bl,al,ar),distanpl(br,al,ar))));\n}\n\nint main()\n{\n\tint q=ty();\n\twhile(q--)finder();\n\t\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<climits>\n#include<iomanip>\n#include<cstdio>\n#include<vector>\n#include<queue>\n#include<stack>\n#include<cmath>\n#include<list>\n#include<map>\n#include<set>\nusing namespace std;\n\ntypedef vector<int> VI;\ntypedef vector<VI> VVI;\ntypedef vector<string> VS;\ntypedef stack<int> SI;\ntypedef queue<int> QI;\ntypedef list<int> LI;\ntypedef pair<int,int> PII;\ntypedef long long LL;\n\n#define d(x)  cout<<#x<<\" = \"<<(x)<<endl;\n#define ALL(a)  (a).begin(),(a).end()\n#define RALL(a) (a).rbegin(), (a).rend()\n#define PB push_back\n#define MP make_pair\n#define EMP empty()\n#define SZ(a) int((a).size())\n#define EACH(i,c) for(typeof((c).begin()) i=(c).begin(); i!=(c).end(); ++i)\n#define REACH(i,c) for(typeof((c).rbegin()) i=(c).rbegin(); i!=(c).rend(); ++i)\n#define EXIST(s,e) ((s).find(e)!=(s).end())\n#define SORT(c,n) sort(c,c+n)\n#define VSORT(c) sort((c).begin(),(c).end())\n#define FOR(i,a,b) for(int i=(a);i<(b);++i)\n#define REP(i,n)  FOR(i,0,n)\n#define DFOR(i,b,a) for(int i=(b)-1;i>=(a);--i)\n#define DREP(i,n) DFOR(i,n,0)\n#define INF 1000000000\n#define PI  acos(-1.0)\n////////////////////////////////////////////////\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\nclass Vector\n{\npublic:\n\tdouble x,y;\n\tVector(double x=0,double y=0):x(x),y(y){}\n\t\n\tVector operator + (Vector p){return Vector(x+p.x,y+p.y);}\n\tVector operator - (Vector p){return Vector(x-p.x,y-p.y);}\n\tVector operator * (double a){return Vector(x*a,y*a);}\n\tVector operator / (double a){return Vector(x/a,y/a);}\n\t\n\tdouble abs(){return sqrt(norm());}\n\tdouble norm(){return x*x+y*y;}\n\t\n\tbool operator <  (const Vector &p)const{return x!=p.x?x<p.x:y<p.y;}\n\tbool operator == (const Vector &p)const{return fabs(x-p.x)<EPS && fabs(y-p.y<EPS);}\n};\n\ndouble dot(Vector a,Vector b){return a.x*b.x+a.y*b.y;}\ndouble cross(Vector a,Vector b){return a.x*b.y-b.x*a.y;}\n\nint ccw(Vector p0,Vector p1,Vector p2)\n{\n\tVector a=p1-p0;\n\tVector b=p2-p0;\n\tif(cross(a,b)>EPS)return 1;//???????¨???????\n\tif(cross(a,b)<-EPS)return -1;//????¨???????\n\tif(dot(a,b)<-EPS)return 2;//p0?????????\n\tif(a.norm()<b.norm())return -2;//p1????\\\\\n\treturn 0;//?????????\n}\n\nbool intersect(Vector p0,Vector p1,Vector p2,Vector p3)\n{\n\treturn (ccw(p0,p1,p2)*ccw(p0,p1,p3)<=0&&ccw(p2,p3,p0)*ccw(p2,p3,p1)<=0);\n}\n\nint main()\n{\n\tint n;cin>>n;\n\tVector p[4];\n\tcout<<fixed<<setprecision(10);\n\tREP(i,n)\n\t{\n\t\tREP(j,4)cin>>p[j].x>>p[j].y;\n\t\tif(intersect(p[0],p[1],p[2],p[3])){cout<<0<<endl;continue;}\n\t\tdouble a,b,c,d;\n\t\tif(dot(p[1]-p[0],p[2]-p[0])>0&&dot(p[0]-p[1],p[2]-p[1])>0)\n\t\t{\n\t\t\ta=cross(p[1]-p[0],p[2]-p[0])/(p[1]-p[0]).abs();\n\t\t}\n\t\telse\n\t\t{\n\t\t\ta=min((p[2]-p[0]).abs(),(p[2]-p[1]).abs());\n\t\t}\n\t\t\n\t\tif(dot(p[1]-p[0],p[3]-p[0])>0&&dot(p[0]-p[1],p[3]-p[1])>0)\n\t\t{\n\t\t\tb=cross(p[1]-p[0],p[3]-p[0])/(p[1]-p[0]).abs();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tb=min((p[3]-p[0]).abs(),(p[3]-p[1]).abs());\n\t\t}\n\t\t\n\t\tif(dot(p[3]-p[2],p[0]-p[2])>0&&dot(p[2]-p[3],p[0]-p[3])>0)\n\t\t{\n\t\t\tc=cross(p[3]-p[2],p[0]-p[2])/(p[3]-p[2]).abs();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc=min((p[0]-p[2]).abs(),(p[0]-p[3]).abs());\n\t\t}\n\t\t\n\t\tif(dot(p[3]-p[2],p[1]-p[2])>0&&dot(p[2]-p[3],p[1]-p[3])>0)\n\t\t{\n\t\t\td=cross(p[3]-p[2],p[1]-p[2])/(p[3]-p[2]).abs();\n\t\t}\n\t\telse\n\t\t{\n\t\t\td=min((p[1]-p[2]).abs(),(p[1]-p[3]).abs());\n\t\t}\n\t\t\n\t\tcout<<min(min(a,b),min(c,d))<<endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <vector>\n#include <queue>\n#include <map>\n#include <cmath>\n#include <iomanip>\n#include <complex>\nusing namespace std;\n#define REP(i,n) for (int i=0;i<(n);++i)\n#define rep(i,a,b) for(int i=a;i<(b);++i)\ntemplate<class T> inline bool chmin(T &a, T b){ if(a > b) { a = b; return true;} return false;}\ntemplate<class T> inline bool chmax(T &a, T b){ if(a < b) { a = b; return true;} return false;}\nusing ll = long long;\nconstexpr long long INF = 1LL << 62;\nconstexpr int MOD = 1e9 + 7;\n\n\nconstexpr double EPS = 1e-10;\nusing Point = complex<double>;\nusing Line  = pair<Point, Point>;\nusing Polygon = vector<Point>;\nbool compare(const Point &a, const Point &b) { // x ascending order\n    if(a.real() != b.real()) return a.real() < b.real();\n    return a.imag() < b.imag();\n};\n\ndouble dot(Point p, Point q) { return (conj(p) * q).real(); }\ndouble cross(Point p, Point q) { return (conj(p) * q).imag(); }\ndouble slope(Line l) { return tan(arg(l.second - l.first)); }\n\nPoint project(Line l, Point p) { // project p onto line (s,t)\n    return l.first + (l.second - l.first) * dot(p - l.first, l.second - l.first) / norm(l.second - l.first);\n}\n\nPoint reflect(Line l, Point p) {\n    return l.first + conj((p - l.first) / (l.second - l.first)) * (l.second - l.first);\n}\n\nint ccw(Point a, Point b, Point c) {\n    b -= a; c -= a;\n    if(cross(b, c) >  EPS) return +1; // counter-clockwise\n    if(cross(b, c) < -EPS) return -1; // clockwise\n    if(  dot(b, c) < -EPS) return +2; // c--a--b\n    if(abs(b)+EPS < abs(c))return -2; // a--b--c\n    return 0; // a--c--b\n}\n\nbool intersect(Line a, Line b) {\n    return ccw(a.first, a.second, b.first) * ccw(a.first, a.second, b.second) <= 0 && \n        ccw(b.first, b.second, a.first) * ccw(b.first, b.second, a.second) <= 0;\n}\n\nPoint cross_point(Line a, Line b) {\n    Point base = b.second - b.first;\n    double area1 = abs(cross(base, a.first - b.first));\n    double area2 = abs(cross(base, a.second - b.first));\n    double t = area1 / (area1 + area2);\n    return a.first + (a.second - a.first) * t;\n}\n\n// dist line and p\ndouble distance(Point p, Line l) { return abs(cross(l.second - l.first, p - l.first) / abs(l.second - l.first)); }\ndouble distance(Line s, Point p) { \n    Point a = s.first, b = s.second;\n\n    if(dot(b - a, p - a) < EPS) return abs(p - a);\n    if(dot(a - b, p - b) < EPS) return abs(p - b);\n    return distance(p, s);\n}\ndouble distance(Line s1, Line s2) {\n    if(intersect(s1, s2)) return 0.0;\n    return min(min(distance(s1, s2.first), distance(s1, s2.second)), min(distance(s2, s1.first), distance(s2, s1.second)));\n}\n    \n\nPolygon convex_hull(Polygon &ps) {\n    sort(ps.begin(), ps.end(), compare);\n    int n = (int)ps.size(), k = 0;\n    Polygon res(n * 2);\n\n    // use \"< -EPS\" if include corner or boundary, otherwise, use \"< EPS\"\n    for(int i = 0; i < n; res[k++] = ps[i++]) \n        while(k >= 2 && cross(res[k-1] - res[k-2], ps[i] - res[k-1]) < EPS) --k; \n\n    for(int i = n - 2, t = k+1; i >= 0; res[k++] = ps[i--])\n        while(k >= t && cross(res[k-1] - res[k-2], ps[i] - res[k-1]) < EPS) --k;\n\n    res.resize(k - 1);\n    return res;\n}\n\ndouble caliper(Polygon &ps) {\n    ps = convex_hull(ps);\n    int n = (int)ps.size();\n    if(n == 2) {return abs(ps[0] - ps[1]);}\n\n    int i = 0, j = 0;\n    // j --> (x asc order) --> i\n    for(int k=0; k < n; ++k) {\n        if(compare(ps[i],ps[k])) i = k;\n        if(compare(ps[k],ps[j])) j = k;\n    }\n\n    int si = i, sj = j;\n    double res = 0.0;\n    // rotate 180 degrees\n    while(i != sj || j != si) {\n        res = max(res, abs(ps[i] - ps[j]));\n        if(cross(ps[(i + 1) % n] - ps[i], ps[(j + 1) % n] - ps[j]) < 0) {\n            i = (i + 1) % n;\n        } else {\n            j = (j + 1) % n;\n        }\n    }\n\n    return res;\n}\n\n\nint main() {\n    cin.tie(0); ios_base::sync_with_stdio(false);\n    cout << fixed << setprecision(10);\n    int q; cin >> q;\n    for(int i=0; i < q; ++i) {\n        double a,b,c,d,e,f,g,h;\n        cin>>a>>b>>c>>d>>e>>f>>g>>h;\n        cout << distance(Line(Point(a,b),Point(c,d)), Line(Point(e,f),Point(g,h))) << '\\n';\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nconst double eps = 1e-10;\nbool dcmp(double d, double d2 = 0) { return abs(d - d2) < eps; }\ndouble sgn(double d) {\n  if (dcmp(d))\n    return 0;\n  if (d > 0)\n    return 1;\n  return -1;\n}\n\nstruct vec {\n  double x, y;\n  vec(double x, double y) : x(x), y(y) {}\n  vec() : x(0), y(0) {}\n  const bool operator==(const vec &v) const {\n    return dcmp(x, v.x) && dcmp(y, v.y);\n  }\n  const bool operator!=(const vec &v) const { return !(*this == v); }\n  const vec operator+(const vec &v) const { return vec(x + v.x, y + v.y); }\n  const vec operator-() const { return vec(-x, -y); }\n  const vec operator-(const vec &v) const { return *this + (-v); }\n  const vec operator*(const double d) const { return vec(x * d, y * d); }\n  const vec operator/(const double d) const { return *this * (1 / d); }\n  const vec unit() const { return *this / len(); };\n  const double len() const { return sqrt(x * x + y * y); }\n  const double dot(const vec &v) const { return x * v.x + y * v.y; }\n  const double cross(const vec &v) const { return x * v.y - y * v.x; }\n  const bool parallel(const vec &v) const { return dcmp(cross(v)); }\n  const bool perpendicular(const vec &v) const { return dcmp(dot(v)); }\n};\n\ntypedef vec point;\n\ntemplate <class T> struct optional {\n  bool has;\n  T val;\n  optional() : has(false) {}\n  optional(T t) : has(true), val(t) {}\n};\n\nstruct line {\n  double a, b, c;\n  line(point p1, point p2) {\n    a = p1.y - p2.y;\n    b = p2.x - p1.x;\n    c = (p1.x - p2.x) * p1.y + (p2.y - p1.y) * p1.x;\n    double m1 = a * p1.x + b * p1.y + c;\n    double m2 = a * p2.x + b * p2.y + c;\n  }\n  bool parallel(line l) { return dcmp(a * l.b, b * l.a); }\n  optional<point> intersect(line l) {\n    if (parallel(l))\n      return optional<point>();\n    return point(-(c * l.b - b * l.c) / (a * l.b - b * l.a),\n                 (c * l.a - a * l.c) / (a * l.b - b * l.a));\n  }\n  bool contains(point p) { return dcmp(a * p.x + b * p.y + c); }\n  double distance(line l) {\n    if (parallel(l))\n      return (l.c - c) / (a * a + b * b);\n    return 0;\n  }\n};\n\nstruct segment {\n  point p1, p2;\n  segment(point p1, point p2) : p1(p1), p2(p2) {}\n  line sline() { return line(p1, p2); }\n  bool contains(point p) {\n    double x1 = min(p1.x, p2.x), x2 = max(p1.x, p2.x);\n    double y1 = min(p1.y, p2.y), y2 = max(p1.y, p2.y);\n    bool ok = sline().contains(p) && (x1 <= p.x && p.x <= x2) &&\n              (y1 <= p.y && p.y <= y2);\n    return ok;\n  }\n  bool intersect(segment s) {\n    vec v0 = p2 - p1;\n    vec v1 = s.p2 - s.p1;\n    if (v0.parallel(v1)) {\n      return (contains(s.p1) || contains(s.p2)) ||\n             (s.contains(p1) || s.contains(p2));\n    }\n    point a = p1, b = p2, c = s.p1, d = s.p2;\n    return sgn((a - b).cross(b - c)) != sgn((a - b).cross(b - d)) &&\n           sgn((c - d).cross(d - a)) != sgn((c - d).cross(d - b));\n  }\n};\n\nint main() {\n  int n;\n  cin >> n;\n  for (int i = 0; i < n; i++) {\n    point p0, p1, p2, p3;\n    cin >> p0.x >> p0.y >> p1.x >> p1.y >> p2.x >> p2.y >> p3.x >> p3.y;\n    segment l0(p0, p1);\n    segment l1(p2, p3);\n    if (l0.intersect(l1)) {\n      printf(\"%.9lf\\n\", 0.0);\n    } else {\n      double d1 = (p0 - p2).len(), d2 = (p0 - p3).len(), d3 = (p1 - p2).len(),\n             d4 = (p1 - p3).len();\n      printf(\"%.9lf\\n\", min(min(d1, d2), min(d3, d4)));\n    }\n  }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define r(i,n) for(int i=0;i<n;i++)\nusing namespace std;\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n//CCW??¨///////////////////////////////////\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n/////////////////////////////////////////\nclass Point{\n  public:\n  double x,y;\n  Point(double x=0,double y=0):x(x),y(y){}\n  Point operator + (Point p){return Point(x+p.x,y+p.y);}\n  Point operator - (Point p){return Point(x-p.x,y-p.y);}\n  Point operator * (double a){return Point(a*x,a*y);}\n  Point operator / (double a){return Point(x/a,y/a);}\n\n  bool operator < (const Point &p) const{\n    return x!=p.x?x<p.x:y<p.y;\n  }\n  bool operator == (const Point &p) const{\n    return fabs(x-p.x)<EPS&&fabs(y-p.y)<EPS;\n  }\n};\n/*class Circle{\npublic:\n  Point c;\n  double r;\n  Circle(Point c=Point(),double r=0.0):c(c),r(r){}\n};*/\ntypedef Point vect;\nstruct seg{Point p1,p2;};\n//????????´???\ndouble norm(Point p){return p.x*p.x+p.y*p.y;}\n//??¶??????\ndouble abs(Point p){return sqrt(norm(p));}\n//??????\ndouble dot(Point a,Point b){\n  return a.x*b.x+a.y*b.y;\n}\n//??????\ndouble cross(Point a,Point b){\n  return a.x*b.y-a.y*b.x;\n}\n//??´?????????\nbool C90(seg s1,seg s2){\n  return equals(dot(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\nbool C0(seg s1,seg s2){\n  return equals(cross(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n//?°???±\nPoint project(seg s,Point p){\n  Point base = s.p2-s.p1;\n  double r=dot(p-s.p1,base) / norm(base);\n  return s.p1+base*r;\n}\n//????°?\nPoint reflection(seg s,Point p){\n  return  p+(project(s,p)-p)*2.0;\n}\n//2???????????¢\ndouble getDistancePP(Point a,Point b){\n  return abs(a-b);\n}\n//??´??????????????¢(????°?)\ndouble getDistanceLP(seg l,Point p){\n  return abs(cross(l.p2-l.p1,p-l.p1)/abs(l.p2-l.p1));\n}\n//?????????????????¢\ndouble getDistanceSP(seg s,Point p){\n  if(dot(s.p2-s.p1,p-s.p1)<0.0)return abs(p-s.p1);\n  if(dot(s.p1-s.p2,p-s.p2)<0.0)return abs(p-s.p2);\n  return getDistanceLP(s,p);\n}\n//????¨?????????????????¨??????????\nint CCW(Point p0,Point p1,Point p2){\n  Point a=p1-p0;\n  Point b=p2-p0;\n  if(cross(a,b)>EPS)return COUNTER_CLOCKWISE;\n  if(cross(a,b)<-EPS)return CLOCKWISE;\n  if(dot(a,b)<-EPS)return ONLINE_BACK;\n  if(norm(a)<norm(b))return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\n//??????????????????\nbool intersect(Point p1,Point p2,Point p3,Point p4){\n  return(CCW(p1,p2,p3)*CCW(p1,p2,p4)<=0&&CCW(p3,p4,p1)*CCW(p3,p4,p2)<=0);\n}\nbool intersect(seg s1,seg s2){\n  return intersect(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n//????????????????????¢\ndouble getDistance(seg s1,seg s2){\n  if(intersect(s1,s2))return 0.0;\n  return min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),\n    min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n}\nmain(){\n  int n;\n  seg a,b;\n  cin>>n;\n  while(n--){\n    cin>>a.p1.x>>a.p1.y>>a.p2.x>>a.p2.y;\n    cin>>b.p1.x>>b.p1.y>>b.p2.x>>b.p2.y;\n    printf(\"%.11f\\n\",getDistance(a,b));\n  }\n}"
  },
  {
    "language": "C++",
    "code": "//\n// Created by 李青坪 on 2018/11/29.\n//\n\n#include <cmath>\n#include <cstdio>\n#include <algorithm>\n\n#define COUNTER_CLOCKWISE 1\n#define CLOCKWISE -1\n#define ONLINE_BACK -2\n#define ONLINE_FRONT 2\n#define ON_SEGMENT 0\n#define EPSLON 1e-10\n#define equals(a, b) (fabs((a) - (b)) < EPSLON)\n\n#define MAXN 10000\n#define NIL -1\nusing namespace std;\n\n// 点\nclass Point {\npublic:\n    double x;\n    double y;\n\n    Point() {}\n\n    Point(double x, double y) : x(x), y(y) {}\n\n    Point operator+(Point a) {\n        return Point(x + a.x, y + a.y);\n    }\n\n    Point operator-(Point a) {\n        return Point(x - a.x, y - a.y);\n    }\n\n    Point operator*(double a) {\n        return Point(x * a, y * a);\n    }\n\n    Point operator/(double a) {\n        return Point(x / a, y / a);\n    }\n\n    double norm() {\n        return x * x + y * y;\n    }\n\n    double absVector() {\n        return sqrt(norm());\n    }\n\n    bool operator==(Point a) const {\n        return equals(x, a.x) && equals(y, a.y);\n    }\n};\n\ntypedef Point Vector;\n\n// 线段\nclass Segment {\npublic:\n    Point a, b;\n};\n\ntypedef Segment Line;\n\ndouble dot(Vector a, Vector b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n    return a.x * b.y - a.y * b.x;\n}\n\nPoint projection(Segment s, Point point) {\n    Vector base = s.b - s.a;\n    double t = dot(point - s.a, base) / base.absVector();\n    double r = t / base.absVector();\n    Point y = base * r;\n    Point x = s.a + y;\n    return x;\n}\n\nPoint reflection(Segment s, Point point) {\n    return point + (projection(s, point) - point) * 2.0;\n}\n\ndouble getDistance(Point a, Point b) {\n    return (a - b).absVector();\n}\n\ndouble getDistanceLine(Line l, Point point) {\n    return abs(cross(l.b - l.a, point - l.a) / (l.b - l.a).absVector());\n}\n\ndouble getDistanceSeg(Segment s, Point point) {\n    if (dot(s.b - s.a, point - s.a) < 0.0) return (point - s.a).absVector();\n    if (dot(s.a - s.b, point - s.b) < 0.0) return (point - s.b).absVector();\n    return getDistanceLine(s, point);\n}\n\nint ccw(Segment s, Point p) {\n    Vector v1 = s.b - s.a;\n    Vector v2 = p - s.a;\n    if (cross(v1, v2) > 0) return COUNTER_CLOCKWISE;\n    if (cross(v1, v2) < 0) return CLOCKWISE;\n    if (dot(v1, v2) < 0) return ONLINE_BACK;\n    if (v1.norm() < v2.norm()) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\nbool intersection(Segment s1, Segment s2) {\n    return (ccw(s1, s2.a) * ccw(s1, s2.b) <= 0 && ccw(s2, s1.a) * ccw(s2, s1.b) <= 0);\n}\n\ndouble getDistance(Segment s1, Segment s2) {\n    if (intersection(s1, s2)) return 0.0;\n    return min(min(getDistanceSeg(s1, s2.a), getDistanceSeg(s1, s2.b)),\n               min(getDistanceSeg(s2, s1.a), getDistanceSeg(s2, s1.b)));\n}\n\nint n;\n\n\nint main() {\n    Segment s[2];\n    Point p[4];\n    scanf(\"%d\", &n);\n    Point point;\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < 4; ++j) {\n            double x, y;\n            scanf(\"%lf %lf\", &x, &y);\n            point = Point(x, y);\n            p[j] = point;\n        }\n        s[0].a = p[0];\n        s[0].b = p[1];\n        s[1].a = p[2];\n        s[1].b = p[3];\n        printf(\"%.10lf\\n\", getDistance(s[0], s[1]));\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<string>\n#include<algorithm>\n#include<cmath>\n#include<vector>\n#include<stack>\n#include<climits>\n#include<cstring>\n#include<queue>\nusing namespace std;\n\nconst int INF = INT_MAX / 3;\n\n#define REP(i,n) for(int i=0;i<(int)n;i++)\n#define FOR(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i)\n#define ALL(c) (c).begin(), (c).end()\n\n\ndouble EPS = 1e-10;\n\ndouble add(double a, double b) {\n\tif (abs(a + b) < EPS * (abs(a) + abs(b))) return 0;\n\treturn a + b;\n}\n\nstruct P {\n\tdouble x, y;\n\tP() {}\n\tP(double x, double y) : x(x), y(y) {\n\t}\n\tP operator +(P p) {\n\t\treturn P(add(x, p.x), add(y, p.y));\n\t}\n\tP operator -(P p) {\n\t\treturn P(add(x, -p.x), add(y, -p.y));\n\t}\n\tP operator *(double d) {\n\t\treturn P(d*x, d*y);\n\t}\n\tdouble dot(P p) {\n\t\treturn add(x*p.x, y*p.y);\n\t}\n\tdouble det(P p) {\n\t\treturn add(x*p.y, -y*p.x);\n\t}\n\tvoid print() {\n\t\tprintf(\"%.10lf %.10lf \\n\", x, y);\n\t\treturn;\n\t}\n};\n\ndouble dist(P &p, P &q, P &r){\n\tif((q-p).dot(r-p)*(p-q).dot(r-q) >= 0){\n\t\tdouble a = q.y-p.y;\n\t\tdouble b = -q.x+p.x;\n\t\tdouble c = -p.x*q.y+p.y*q.x;\n\t\treturn fabs(a*r.x+b*r.y+c)/sqrt(a*a+b*b);\n\t}else{\n\t\treturn min (sqrt((r.x-p.x)*(r.x-p.x)+(r.y-p.y)*(r.y-p.y)), sqrt((r.x-q.x)*(r.x-q.x)+(r.y-q.y)*(r.y-q.y)));\n\t}\n\t\n}\n\nbool isCross(P &p0,P &p1,P &p2,P &p3){\n\tbool a,b,c,d;\n\ta = ( (p1-p0).dot(p2-p0)*(p0-p1).dot(p2-p1) >= 0 );\n\tb = ( (p1-p0).dot(p3-p0)*(p0-p1).dot(p3-p1) >= 0 );\n\tc = ( (p1-p0).det(p2-p0)*(p1-p0).det(p3-p0) <=0 );\n\treturn a && b && c ;\n}\n\ndouble Distance(P &p0,P &p1,P &p2,P &p3){\n\tif(isCross(p0, p1, p2, p3)){\n\t\treturn 0;\n\t}\n\tdouble d = dist(p0, p1, p2);\n\td = min(d, dist(p0, p1, p3));\n\td = min(d, dist(p2, p3, p0));\n\td = min(d, dist(p2, p3, p1));\n\treturn d;\n}\n\nint main(){\n\tint q;\n\tcin >> q ;\n\tREP(i,q){\n\t\tP p0, p1, p2, p3;\n\t\tcin >> p0.x >> p0.y >> p1.x >> p1.y >> p2.x >> p2.y >> p3.x >> p3.y ;\n\t\tprintf(\"%.10lf \\n\", Distance(p0, p1, p2, p3));\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <cmath>\n#include <cstdio>\n#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\n#define EPS (1e-10)\n\ntypedef long double ld;\n\nclass Point {\npublic:\n\tld x, y;\n\tPoint(ld x, ld y) :\n\t\t\tx(x), y(y) {\n\t}\n\tPoint operator +(Point p) {\n\t\treturn Point(x + p.x, y + p.y);\n\t}\n\tPoint operator -(Point p) {\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n};\n\nclass Segment {\npublic:\n\tPoint p1, p2;\n\tSegment(Point p1, Point p2) :\n\t\t\tp1(p1), p2(p2) {\n\t}\n};\n\nld dot(Point p1, Point p2) {\n\treturn p1.x * p2.x + p1.y * p2.y;\n}\nld cross(Point p1, Point p2) {\n\treturn p1.x * p2.y - p1.y * p2.x;\n}\nld norm(Point p) {\n\treturn p.x * p.x + p.y * p.y;\n}\nld abs(Point p) {\n\treturn sqrt(norm(p));\n}\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ON_SEGMENT = 0;\nstatic const int ONLINE_FRONT = -2;\n\nint ccw(Point p0, Point p1, Point p2) {\n\tPoint a = p1 - p0;\n\tPoint b = p2 - p0;\n\tif (cross(a, b) > EPS)\n\t\treturn COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS)\n\t\treturn CLOCKWISE;\n\tif (dot(a, b) < -EPS)\n\t\treturn ONLINE_BACK;\n\tif (norm(a) < norm(b))\n\t\treturn ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n\treturn ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 && ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0;\n}\n\nbool intersect(Segment s1, Segment s2) {\n\treturn intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\nld getDistanceLp(Segment l, Point p) {\n\treturn abs(cross(l.p2 - l.p1, p - l.p1)) / abs(l.p2 - l.p1);\n}\n\nld getDistanceSp(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0)\n\t\treturn abs(p - s.p1);\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0)\n\t\treturn abs(p - s.p2);\n\treturn getDistanceLp(s, p);\n}\n\nld getDistance(Segment s1, Segment s2) {\n\tif (intersect(s1, s2))\n\t\treturn 0.0;\n\treturn min(min(getDistanceSp(s1, s2.p1), getDistanceSp(s1, s2.p2)), min(getDistanceSp(s2, s1.p1), getDistanceSp(s2, s1.p2)));\n}\n\nint main() {\n\n\tint q;\n\tscanf(\"%d\", &q);\n\n\tfor (int i = 0; i < q; ++i) {\n\t\tint p0x, p0y, p1x, p1y, p2x, p2y, p3x, p3y;\n\t\tscanf(\"%d %d %d %d %d %d %d %d\", &p0x, &p0y, &p1x, &p1y, &p2x, &p2y, &p3x, &p3y);\n\t\tPoint p1(p0x, p0y);\n\t\tPoint p2(p1x, p1y);\n\t\tPoint p3(p2x, p2y);\n\t\tPoint p4(p3x, p3y);\n\t\tSegment s1(p1, p2);\n\t\tSegment s2(p3, p4);\n\n\t\tcout << fixed << setprecision(10) << getDistance(s1, s2) << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <cstdio>\n#include <cmath>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals( A, B ) (fabs((A) - (B)) < EPS)\n\nclass Point {\npublic:\n    double x, y;\n    Point( double x = 0, double y = 0 ): x(x), y(y) {}\n    \n    Point operator + ( Point p ) { return Point( x + p.x, y + p.y ); }\n    Point operator - ( Point p ) { return Point( x - p.x, y - p.y ); }\n    Point operator * ( double a ) { return Point( a * x, a * y ); }\n    Point operator / ( double a ) { return Point( x / a, y / a ); }\n\n    double abs() { return sqrt( norm() ); }\n    double norm() { return x * x + y * y; }\n\n    bool operator < ( const Point &p ) const {\n\treturn ( x != p.x ) ? x < p.x : y < p.y;\n    }\n\n    bool operator == ( const Point &p ) const {\n\treturn equals( x, p.x ) && equals( y, p.y ); \n    }\n\n    double dot( Point a ) { return x * a.x + y * a.y; }\n    double cross( Point a ) { return x * a.y - y * a.x; }\n    double distance( Point a ) {\n\treturn (*this - a).abs();\n    }\n};\n\ntypedef Point Vector;\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nclass Line {\npublic:\n    Point p1, p2;\n    Line( Point p1 = Point(), Point p2 = Point() ): p1(p1), p2(p2){}\n    // ?????´????????????( cos = 0 )\n    bool isOrthogonal( Line a ) {\n\treturn equals( 0.0, (p1 - p2).dot( a.p1 - a.p2 ) );\n    }\n    // ??????????????????( sin = 0 )\n    bool isParallel( Line a ) {\n\treturn equals( 0.0, (p1 - p2).cross( a.p1 - a.p2 ) );\n    }\n\n    Point projection( Point p ) {\n\tVector v12 = p2 - p1;\n\tdouble r = v12.dot( p - p1 ) / v12.norm();\n\treturn p1 + v12 * r;\n    }\n\n    Point reflection( Point p ) {\n\treturn p + ( projection( p ) - p ) * 2.0;\n    }\n\n    double distance( Point p ) {\n\tVector v12 = this->p2 -this->p1;\n\tVector v10 = p - this->p1;\n\t\n\treturn v12.cross( v10 ) / v12.abs();\n    }\n\n    double distanceSP( Point p ) {\n\tif ( (p - this->p1).dot( this->p2 - this->p1 ) < 0.0 ) {\n\t    return this->p1.distance( p );\n\t} else if ( (p - this->p2).dot( this->p1 - this->p2 ) < 0.0 ) {\n\t    return this->p2.distance( p );\n\t}\n\telse {\n\t    return distance( p );\n\t}\n    }\n\n    int ccw( Point p ) {\n\tVector a = p2 - p1;\n\tVector b = p - p1;\n\tif ( a.cross( b ) > EPS ) return COUNTER_CLOCKWISE;\n\telse if ( a.cross( b ) < -EPS ) return CLOCKWISE;\n\telse if ( a.dot( b ) < -EPS ) return ONLINE_BACK;\n\telse if ( a.norm() < b.norm() ) return ONLINE_FRONT;\n\telse return ON_SEGMENT;\n    }\n\n    bool intersect( Line l ) {\n\treturn ( ( ccw( l.p1 ) * ccw( l.p2 ) <= 0 && l.ccw( p1 ) * l.ccw( p2 ) <= 0 ) );\n    }\n};\n\ntypedef Line Segment;\n\n\nint main()\n{\n    int q;\n    scanf(\"%d\", &q);\n\n    for ( int i = 0; i < q; i++ ) {\n\tPoint p0, p1, p2, p3;\n\tscanf(\"%lf %lf\", &p0.x, &p0.y);\n\tscanf(\"%lf %lf\", &p1.x, &p1.y);\n\tscanf(\"%lf %lf\", &p2.x, &p2.y);\n\tscanf(\"%lf %lf\", &p3.x, &p3.y);\n\n\tSegment s1 = Segment( p0, p1 );\n\tSegment s2 = Segment( p2, p3 );\n\tif ( s1.intersect( s2 ) ) {\n\t    printf(\"%.10lf\\n\", 0.0);\n\t}\n\telse {\n\t    double dist1 = s1.distanceSP( s2.p1 );\n\t    double dist2 = s1.distanceSP( s2.p2 );\t\n\t    double dist3 = s2.distanceSP( s1.p1 );\n\t    double dist4 = s2.distanceSP( s1.p2 );\t\n\t    double min_dist = min( min( dist1, dist2 ), min( dist3, dist4 ) );\n\t    printf(\"%.10lf\\n\", min_dist);\n\t}\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nconst double eps = 1e-8;\nconst double inf = 1e20;\ninline double sqr (double k) {return k * k;}\ninline int sgn (double p) {\n    if (fabs (p) < eps) return 0;\n    if (p < 0) return -1;\n    return 1;\n}\nstruct point {\n    double x, y;\n    point (){}\n    point (double _x, double _y) {\n        x = _x, y = _y;\n    }\n    void input () {\n        scanf (\"%lf %lf\", &x, &y);\n    }\n    bool operator == (point b) const {\n        return sgn (x - b.x) == 0 && sgn (y - b.y) == 0;\n    }\n    point operator - (const point &b) const {\n        return point (x - b.x, y - b.y);\n    }\n    double operator * (const point &b) const {\n        return x * b.x + y * b.y;\n    }\n    double operator ^ (const point &b) const {\n        return x * b.y - y * b.x;\n    }\n    double len () {\n        return hypot (x, y);\n    }\n    double len2 () {\n        return x * x + y * y;\n    }\n    double distance (point p) {\n        return hypot (x - p.x, y - p.y);\n    }\n    point operator + (const point &b) const{\n        return point (x + b.x, y + b.y);\n    }\n    point operator * (const double &b) const {\n        return point (x * b, y * b);\n    }\n    point operator / (const double &b) const {\n        return point (x / b, y / b);\n    }\n    double cross (point a, point b) {\n        return (a - *this) ^ (b - *this);\n    }\n    double dot (point a, point b) {\n        return (a - *this) * (b - *this);\n    }\n    bool on_seg (point a, point b) {\n        return sgn (cross (a, b)) == 0 && dot (a, b) <= 0;\n    }\n};\nbool seg (point a, point b, point c, point d) {\n    if (a.on_seg (c, d) || b.on_seg (c, d) || c.on_seg (a, b) || d.on_seg (a, b)) return true;\n    if (a.cross (b, d) * a.cross (b, c) < 0 && c.cross (d, b) * c.cross (d, a) < 0) return true;\n    return false;\n}\nbool check (point p, point a, point b) {\n    point x = b - a;\n    double k = x.len ();\n    double u = a.dot (p, b) / k;\n    x = (x / k) * u;\n    x = x + a;\n//    cout << x.x << ' ' << x.y << endl;\n    if (x.on_seg (a, b)) return true;\n    return false;\n//        return true;\n}\nint main () {\n//    freopen (\"in.txt\", \"r\", stdin);\n    int Q;\n    cin >> Q;\n    while (Q --) {\n        double ans = inf, x, y;\n        point s1, e1, s2, e2, a, b, c;\n        s1.input (), e1.input ();\n        s2.input (), e2.input ();\n        if (seg (s1, e1, s2, e2)) ans = 0;\n        else {\n            a = e1 - s1;\n            b = e2 - s2;\n            x = a.len ();\n            y = b.len ();\n            ans = min (ans, hypot (s1.x - s2.x, s1.y - s2.y));\n            ans = min (ans, hypot (s1.x - e2.x, s1.y - e2.y));\n            ans = min (ans, hypot (e1.x - s2.x, e1.y - s2.y));\n            ans = min (ans, hypot (e1.x - e2.x, e1.y - e2.y));\n            if (check (s1, s2, e2)) ans = min (ans, fabs (s2.cross (e2, s1)) / y);\n            if (check (e1, s2, e2)) ans = min (ans, fabs (s2.cross (e2, e1)) / y);\n            if (check (s2, s1, e1)) ans = min (ans, fabs (s1.cross (e1, s2)) / x);\n            if (check (e2, s1, e1)) ans = min (ans, fabs (s1.cross (e1, e2)) / x);\n        }\n        printf (\"%.10f\\n\", ans);\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<cmath>\n#include<algorithm>\n#include<iostream>\n#include<vector>\n#include<climits>\n#include<cfloat>\n#include<cstdio>\n#define curr(P, i) P[(i) % P.size()]\n#define next(P, i) P[(i+1) % P.size()]\n#define prev(P, i) P[(i+P.size()-1) % P.size()]\n\nusing namespace std;\n\ndouble EPS = 1e-10;\nconst double PI = acos(-1);\n\ndouble add(double a, double b){\n  if(abs(a+b) < EPS * (abs(a)+abs(b)))return 0;\n  return a+b;\n}\n\nstruct point{\n  double x, y;\n  point(){}\n  point(double x,double y) : x(x) , y(y){}\n\n  point operator + (point p){\n    return point(add(x,p.x), add(y,p.y));\n  }\n\n  point operator - (point p){\n    return point(add(x,-p.x), add(y,-p.y));\n  }\n\n  point operator * (double d){\n    return point(x*d,y*d);\n  }\n\n};\n\ndouble dot(point a, point b) {\n  return (a.x * b.x + a.y * b.y);\n}\n\ndouble cross(point a, point b) {\n  return (a.x * b.y - a.y * b.x);\n}\n\ndouble norm(point a){\n  return sqrt(dot(a,a));\n}\n\nint isOnSegment(point a, point b, point c) {\n  return cross(b-a, c-a)==0.0 &&\n    (dot(b-a, c-a) > -EPS) &&\n    (dot(a-b, c-b) > -EPS);\n}\n\nint is_intersected_ls(point a1, point a2, point b1, point b2) {\n\n  if(cross(a1-a2,b1-b2)==0){\n    return isOnSegment(a1,a2,b1) || isOnSegment(a1,a2,b2)\n      || isOnSegment(b1,b2,a1) || isOnSegment(b1,b2,a2);\n  }\n  else {\n    return ( cross(a2-a1, b1-a1) * cross(a2-a1, b2-a1) < EPS ) &&\n      ( cross(b2-b1, a1-b1) * cross(b2-b1, a2-b1) < EPS );\n  }\n}\ndouble distance_ls_p(point a, point b, point c) {\n  if ( dot(b-a, c-a) < EPS ) return norm(c-a);\n  if ( dot(a-b, c-b) < EPS ) return norm(c-b);\n  return abs(cross(b-a, c-a)) / norm(b-a);\n}\n\ndouble dist(point a,point b,point c,point d){\n  if(is_intersected_ls(a,b,c,d))return 0.0;\n  double A=distance_ls_p(a,b,c);\n  double B=distance_ls_p(a,b,d);\n  double C=distance_ls_p(c,d,a);\n  double D=distance_ls_p(c,d,b);\n  return min(min(A,B),min(C,D));\n}\n\nint main(void){\n\n  int q;\n  cin >> q;\n  while(q--){\n    point a,b,c,d;\n    cin >> a.x >> a.y >> b.x >> b.y;\n    cin >> c.x >> c.y >> d.x >> d.y;\n\n    printf(\"%.10f\\n\",dist(a,b,c,d));\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <vector>\n#include <cmath>\n#include <algorithm>\nusing namespace std;\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nclass Point {\npublic:\n    double x, y;\n\n    Point(double x = 0.0, double y = 0.0): x(x), y(y) {};\n\n    Point operator + (Point &p) {return Point(x + p.x, y + p.y);}\n    Point operator - (Point &p) {return Point(x - p.x, y - p.y);}\n    Point operator * (double k) {return Point(x * k, y * k);}\n    Point operator / (double k) {return Point(x / k, y / k);}\n\n    double norm(void) {return x * x + y * y;}\n    double abs(void) {return sqrt(norm());}\n\n    bool operator == (const Point &p) const {\n        return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n    }\n\n    bool operator < (const Point &p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    double dot(Point a) {\n        return x * a.x + y * a.y;\n    }\n\n    double cross(Point a) {\n        return x * a.y - y * a.x;\n    }\n};\n\ntypedef Point Vector;\n\nstruct Segment {\n    Point p1, p2;\n};\n\ntypedef Segment Line;\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nint ccw(Point p0, Point p1, Point p2) {\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if (a.cross(b) > EPS) return COUNTER_CLOCKWISE;\n    if (a.cross(b) < -EPS) return CLOCKWISE;\n    if (a.dot(b) < -EPS) return ONLINE_BACK;\n    if (a.norm() < b.norm()) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n            ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\n\ndouble getDistanceLP(Line l, Point p) {\n    return abs((l.p2 - l.p1).cross(p - l.p1) / (l.p2 - l.p1).abs());\n}\n\ndouble getDistanceSP(Segment s, Point p) {\n    if ((s.p2 - s.p1).dot(p - s.p1) < 0.0) return (p - s.p1).abs();\n    if ((s.p1 - s.p2).dot(p - s.p2) < 0.0) return (p - s.p2).abs();\n    return getDistanceLP(s, p);\n}\n\ndouble getDistance(Segment s1, Segment s2) {\n    if (intersect(s1.p1, s1.p2, s2.p1, s2.p2)) return 0.0;\n    return min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n               min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\n\nint main(void) {\n    int x1, x2, x3, x4, y1, y2, y3, y4, q;\n    scanf(\"%d\", &q);\n\n    for (int i = 0; i < q; i++) {\n        scanf(\"%d %d %d %d %d %d %d %d\",\n                &x1, &y1, &x2, &y2, &x3, &y3, &x4, &y4);\n        Segment s1, s2;\n        s1.p1 = Point(x1, y1);\n        s1.p2 = Point(x2, y2);\n        s2.p1 = Point(x3, y3);\n        s2.p2 = Point(x4, y4);\n        double ret = getDistance(s1, s2);\n        printf(\"%.10f\\n\", ret);\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\nusing namespace std;\nclass Point\n{\n    public:\n    double x, y;\n\n    Point(double x = 0, double y = 0): x(x), y(y) {}\n\n    Point operator + (Point p) {return Point(x + p.x, y + p.y); }\n    Point operator - (Point p) {return Point(x - p.x, y - p.y); }\n    Point operator * (double a) {return Point(x * a, y * a);}\n    Point operator / (double a) {return Point(x / a, y / a);}\n\n    double abs() {return sqrt(norm());}\n    double norm() {return x * x + y * y;}\n    \n    bool operator < (const Point &p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point &p) const{\n        return equals(x, p.x) && equals(y, p.y);\n    }\n};typedef Point Vector;\n\nstruct Segment {\n    Point p1, p2;\n    Segment(Point p1, Point p2):p1(p1), p2(p2){}\n};typedef Segment Line;\n\ndouble dot(Vector a, Vector b){\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b){\n    return a.x * b.y - a.y * b.x;\n}\n\nbool isOrthogonal(Vector a, Vector b){\n    return equals(dot(a, b), 0.0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2){\n    return isOrthogonal(a1 - a2, b1 - b2);\n}\n\nbool isParallel(Vector a, Vector b){\n    return equals(cross(a, b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2){\n    return isParallel(a1 - a2, b1 - b2);\n}\ndouble get_distance(Point a, Point b){\n    return (a-b).abs();\n}\ndouble get_distance(Line l, Point p){\n    return abs(cross(l.p2 - l.p1, p - l.p1) / (l.p2 - l.p1).abs());\n}\ndouble get_distanceSP(Segment s, Point p){\n    if(dot(s.p2 - s.p1, p - s.p1) < 0.0) return (p - s.p1).abs();\n    if(dot(s.p1 - s.p2, p - s.p2) < 0.0) return (p - s.p2).abs();\n    return get_distance(s, p);\n}\nint ccw(Point p0, Point p1, Point p2){\n    Vector a = p1 - p0, b = p2 - p0;\n    if (cross(a, b) > EPS) return 1;\n    if (cross(a, b) < -EPS) return -1;\n    if (dot(a, b) < -EPS) return 2;\n    if (a.norm() < b.norm()) return -2;\n    return 0;\n}\nbool intersect(Point p0, Point p1, Point p2, Point p3){\n    if (ccw(p0, p1, p2) == 0 || ccw(p0, p1, p3) == 0 || \n        ccw(p2, p3, p0) == 0 || ccw(p2, p3, p1) == 0)\n        return true;\n    if (ccw(p0, p1, p2) * ccw(p0, p1, p3) == -1 && ccw(p2, p3, p0) * ccw(p2, p3, p1) == -1)\n        return true;\n    return false;\n}\ndouble get_distanceSS(Segment s1, Segment s2){\n    if (intersect(s1.p1, s1.p2, s2.p1, s2.p2)) return 0.0;\n    return min(min(get_distanceSP(s1, s2.p1), get_distanceSP(s1, s2.p2)),\n    min(get_distanceSP(s2, s1.p1), get_distanceSP(s2, s1.p2)));\n}\n\n#include<iostream>\n#include<iomanip>\nint main(){\n    int q, dots[8];\n    std::cin >> q;\n    for (int i = 0; i < q; i++)\n    {\n        for (int i = 0; i < 8; i++)\n            std::cin >> dots[i];\n        Point a1 = Point(dots[0], dots[1]);\n        Point a2 = Point(dots[2], dots[3]);\n        Point b1 = Point(dots[4], dots[5]);\n        Point b2 = Point(dots[6], dots[7]);\n        Segment s = Segment(a1, a2), t = Segment(b1, b2);\n        cout << fixed << setprecision(10) << get_distanceSS(s, t) << endl;\n    }   \n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nstruct point{\n\tdouble x,y;\n\tpoint(){;}\n\tpoint(double x,double y):x(x),y(y){;}\n\tpoint operator -(point p){\n\t\treturn point(x-p.x,y-p.y);\n\t}\n};\n// ??????p3??¨p1p2????????§ \ndouble direction(point p1, point p2, point p3) {\n\treturn (p2.x - p1.x)*(p3.y - p2.y) - (p3.x - p2.x)*(p2.y - p1.y);\n}\nbool isjiao(point p1,point p2,point p3,point p4){\n\t// ?????????????????????????????¨????????????????????????\n\tdouble a,b,c,d;\n\ta=direction(p1,p2,p3);\n\tb=direction(p1,p2,p4);\n\tc=direction(p3,p4,p1);\n\td=direction(p3,p4,p2);\n\tif(!(a+b<max(a,b)&&c+d<max(c,d)))return false;\n\treturn true; \n}\ndouble waiji(point p1,point p2){\n\treturn p1.x*p2.y-p1.y*p2.x;\n}\n// ?????????????????????????§???????\t\t\ndouble dis(point p,point p1,point p2){\n\tpoint v1,v2,v;\n\tv1=p2-p1;\n\tv2=p1-p2;\n\tv=p-p1;\n\tif(waiji(v,v1)<0)\n\t\treturn sqrt((p.x-p1.x)*(p.x-p1.x)+(p.y-p1.y)*(p.y-p1.y));\n\tv=p-p2;\n\tif(waiji(v,v2)<0)\n\t\treturn sqrt((p.x-p2.x)*(p.x-p2.x)+(p.y-p2.y)*(p.y-p2.y));\n\t// ?????°??????????????´??????\n\treturn waiji(v,v2)/sqrt(v2.x*v2.x+v2.y*v2.y); \n}\npoint p1,p2,p3,p4;\ndouble solve(){\n// ??????????????????1???????????°????????????????????????2???????????°??????1??????\t\t\n\tif(isjiao(p1,p2,p3,p4))return 0;\n\tdouble res=min(dis(p1,p3,p4),dis(p2,p3,p4));\n\tres=min(res,dis(p3,p1,p2));\n\tres=min(res,dis(p4,p1,p2));\n\treturn res;\n}\nint main(){\n//\tfreopen(\"a.txt\",\"r\",stdin);\n\tint T;\n\tcin>>T;\n\twhile(T--){\n\t\tcin>>p1.x>>p1.y;\n\t\tcin>>p2.x>>p2.y;\n\t\tcin>>p3.x>>p3.y;\n\t\tcin>>p4.x>>p4.y;\n\t\tprintf(\"%.10f\\n\",solve()); \n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <iostream>\n#include <cstdlib>\n#include <cmath>\n#include <cctype>\n#include <string>\n#include <cstring>\n#include <algorithm>\n#include <stack>\n#include <queue>\n#include <set>\n#include <map>\n#include <ctime>\n#include <vector>\n#include <fstream>\n#include <list>\n#include <iomanip>\n#include <numeric>\nusing namespace std;\n#define ll long long\n#define ull unsigned long long\n#define db double\n#define REP(i, lim) for(int i=0;i<lim;++i)\n#define REPP(i, lim) for(int i=1;i<=lim;++i)\n#define DEC(i, lim) for(int i=lim;i>=1;--i)\n#define FOR(i,l,r)  for(int i=l;i<r;++i)\n#define deBug cout<<\"===================================\"<<endl;\n#define clr(s) memset(s, 0, sizeof(s))\n#define lowclr(s) memset(s, -1, sizeof(s))\nconst int MAXN = 1000055;\nconst int inf = 0x3f3f3f3f;\nconst double pi = acos(-1.0);\nconst db eps = 1e-9;\n\ninline int sgn(db x) { return x<-eps ? -1 : x>eps; }\ninline db sqr(db x) { return x*x; }\n\n#define cross(p1, p2, p3) ((p2.x-p1.x)*(p3.y-p1.y)-(p3.x-p1.x)*(p2.y-p1.y))\n#define crossOp(p1, p2, p3) sgn(cross(p1, p2, p3))\n\nstruct P {\n    // information\n    P() {}\n    P(db _x, db _y) : x(_x), y(_y) {}\n    db x, y;\n    // operation\n    P operator + (P p)   const{ return P(x+p.x, y+p.y); }\n    P operator - (P p)   const{ return P(x-p.x, y-p.y); }\n    P operator * (db d)  const{ return P(x*d, y*d); }\n    P operator / (db d)  const{ return P(x/d, y/d); }\n    db dot(P p) { return x * p.x + y * p.y; } // 点积\n    db det(P p) { return x * p.y - y + p.x; } // 叉积\n    // other\n    void input() { scanf(\"%lf%lf\", &x, &y); }\n    void print() { printf(\"(%lf, %lf)\\n\", x, y); }\n    db disTo(P p) { return sqrt(sqr(x-p.x) + sqr(y-p.y)); }\n    db abs() { return sqrt(x*x + y*y); }\n    db abs2(){ return x*x + y*y; }\n};\n\nbool chkLL(P p1, P p2, P q1, P q2) {\n    db a1 = cross(q1, q2, p1), a2 = -cross(q1, q2, p2);\n    return sgn(a1+a2) != 0;\n}\nP getLL(P p1, P p2, P q1, P q2) {\n    db a1 = cross(q1, q2, p1), a2 = -cross(q1, q2, p2);\n    return (p1 * a2 + p2 * a1) / (a1 + a2);\n}\nbool intersect(db l1, db r1, db l2, db r2) {\n    if(l1>r1) swap(l1, r1); if(l2>r2) swap(l2, r2);\n    return !( sgn(r1-l2) == -1 || sgn(r2-l1) == -1 );\n}\nbool chkSS(P p1, P p2, P q1, P q2) {\n    return intersect(p1.x, p2.x, q1.x, q2.x) && intersect(p1.y, p2.y, q1.y, q2.y) &&\n    crossOp(p1, p2, q1) * crossOp(p1, p2, q2) <= 0 &&\n    crossOp(q1, q2, p1) * crossOp(q1, q2, p2) <=0;\n}\nbool chkSS_strict(P p1, P p2, P q1, P q2) {\n    return crossOp(p1, p2, q1) * crossOp(p1, p2, q2) < 0 &&\n           crossOp(q1, q2, p1) * crossOp(q1, q2, p2) < 0;\n}\nbool isMiddle(db a, db m, db b) { return sgn(a-m)==0 || sgn(b-m)==0 || (a<m != b<m); }\nbool isMiddle(P a, P m, P b) { return isMiddle(a.x, m.x, b.x) && isMiddle(a.y, m.y, b.y); }\nbool onSeg(P p1, P p2, P q) { return crossOp(p1, p2, q) == 0 && isMiddle(p1, q, p2); }\nbool onSeg_strict(P p1, P p2, P q) {\n    return crossOp(p1, p2, q) == 0 && sgn((q-p1).dot(p1-p2)) * sgn((q-p2).dot(p1-p2)) < 0;\n}\nP getProj(P a, P b, P p) { return a + (b-a) * ( (b-a).dot(p-a) / sqr(a.disTo(b)));}\nP getReflect(P a, P b, P p) { return getProj(a, b, p) * 2 - p; }\ndb nearest(P p1, P p2, P q) {\n    P h = getProj(p1, p2, q);\n    if(isMiddle(p1, h, p2)) return q.disTo(h);\n    return min(p1.disTo(q), p2.disTo(q));\n}\ndb disSS(P p1, P p2, P q1, P q2) {\n    if(chkSS(p1, p2, q1, q2)) return 0;\n    return min(min(nearest(p1,p2,q1), nearest(p1,p2,q2)), min(nearest(q1,q2,p1),nearest(q1,q2,p2)));\n}\nint main()\n{\n//    freopen(\"in.txt\", \"r\", stdin);\n//    freopen(\"out.txt\", \"w\", stdout);\n//    std::ios::sync_with_stdio(false); cin.tie(0);\n\n    int T;\n    scanf(\"%d\", &T);\n    while(T--)\n    {\n        P p1, p2, q1, q2;\n        p1.input(); p2.input(), q1.input(); q2.input();\n        printf(\"%.10lf\\n\", disSS(p1, p2, q1, q2));\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#include <algorithm>\n#include <bitset>\n#include <cassert>\n#include <cctype>\n#include <clocale>\n#include <cmath>\n#include <cstdlib>\n#include <ctime>\n#include <deque>\n#include <fstream>\n#include <functional>\n#include <iomanip>\n#include <iostream>\n#include <iterator>\n#include <list>\n#include <map>\n#include <queue>\n#include <set>\n#include <sstream>\n#include <stack>\n#include <string>\n#include <tuple>\n#include <unordered_map>\n#include <unordered_set>\n#include <utility>\n#include <vector>\n\nusing namespace std;\n\n#define IOS ios::sync_with_stdio(false); cin.tie(0);\n#define FOR(i, s, n) for(int i = (s), i##_len=(n); i < i##_len; ++i)\n#define FORS(i, s, n) for(int i = (s), i##_len=(n); i <= i##_len; ++i)\n#define VFOR(i, s, n) for(int i = (s); i < (n); ++i)\n#define VFORS(i, s, n) for(int i = (s); i <= (n); ++i)\n#define REP(i, n) FOR(i, 0, n)\n#define REPS(i, n) FORS(i, 0, n)\n#define VREP(i, n) VFOR(i, 0, n)\n#define VREPS(i, n) VFORS(i, 0, n)\n#define RFOR(i, s, n) for(int i = (s), i##_len=(n); i >= i##_len; --i)\n#define RFORS(i, s, n) for(int i = (s), i##_len=(n); i > i##_len; --i)\n#define RREP(i, n) RFOR(i, n, 0)\n#define RREPS(i, n) RFORS(i, n, 0)\n#define ALL(v) (v).begin(), (v).end()\n#define SORT(v) sort(ALL(v))\n#define RSORT(v) sort(ALL(v), greater<decltype(v[0])>())\n#define SZ(x) ((int)(x).size())\n#define PB push_back\n#define EB emplace_back\n#define MP make_pair\n#define MT make_tuple\n#define BIT(n) (1LL<<(n))\n#define UNIQUE(v) v.erase(unique(ALL(v)), v.end())\n\nusing ll = long long;\nusing ui = unsigned int;\nusing ull = unsigned long long;\nusing Pi_i = pair<int, int>;\nusing VB = vector<bool>;\nusing VC = vector<char>;\nusing VD = vector<double>;\nusing VI = vector<int>;\nusing VLL = vector<ll>;\nusing VS = vector<string>;\nusing VSH = vector<short>;\nusing VULL = vector<ull>;\n\nconst int MOD = 1000000007;\nconst int INF = 1000000000;\nconst int NIL = -1;\nconst double EPS = 1E-10;\n\ntemplate<class T, class S>\nbool chmax(T &a, const S &b){\n    if(a < b){\n        a = b; return true;\n    }\n    return false;\n}\ntemplate<class T, class S>\nbool chmin(T &a, const S &b){\n    if(b < a){\n        a = b; return true;\n    }\n    return false;\n}\n\n\nclass Point2D{\n    double x, y;\npublic:\n    Point2D(double X=0, double Y=0): x(X), y(Y){}\n    Point2D(const Point2D& v): x(v.x), y(v.y){}\n    template<class T>\n    Point2D(const vector<T> &v){\n        assert(v.size() == 2);\n        x = v[0]; y = v[1];\n    }\n    template<class T, class T2>\n    Point2D(const pair<T, T2> &p){\n        x = p.first; y = p.second;\n    }\n\n    void setX(double X){x = X;}\n    double getX(){return x;}\n    void setY(double Y){y = Y;}\n    double getY(){return y;}\n\n    Point2D operator+() const{return *this;}\n    Point2D operator-() const{return Point2D(-x, -y);}\n\n    Point2D& operator=(const Point2D& v){\n        x = v.x; y = v.y;\n        return *this;\n    }\n\n    Point2D& operator+=(const Point2D& v){\n        x += v.x; y += v.y;\n        return *this;\n    }\n\n    Point2D& operator-=(const Point2D& v){\n        x -= v.x; y -= v.y;\n        return *this;\n    }\n\n    Point2D& operator*=(const double a){\n        x *= a; y *= a;\n        return *this;\n    }\n\n    Point2D& operator/=(const double a){\n        x /= a; y /= a;\n        return *this;\n    }\n\n    Point2D operator+(const Point2D& v) const{\n        Point2D tmp(*this);\n        return tmp += v;\n    }\n\n    Point2D operator-(const Point2D& v) const{\n        Point2D tmp(*this);\n        return tmp -= v;\n    }\n\n    Point2D operator*(const double a) const{\n        Point2D tmp(*this);\n        return tmp *= a;\n    }\n\n    friend Point2D operator*(double a, const Point2D v){\n        return v * a;\n    }\n\n    Point2D operator/(const double a) const{\n        Point2D tmp(*this);\n        return tmp /= a;\n    }\n\n    double norm(){return x*x + y*y;}\n    friend double norm(Point2D v){return v.norm();}\n    double abs(){return sqrt(norm());}\n    friend double abs(Point2D v){return v.abs();}\n\n    bool operator<(const Point2D &v) const{\n        return x != v.x ? x < v.x : y < v.y;\n    }\n\n    bool operator>(const Point2D &v) const{\n        return x != v.x ? x > v.x : y > v.y;\n    }\n\n    bool operator==(const Point2D &v) const{\n        return std::abs(x - v.x) < EPS\n            && std::abs(y - v.y) < EPS;\n    }\n\n    bool operator<=(const Point2D &v) const{\n        return (*this < v) || (*this == v);\n    }\n\n    bool operator>=(const Point2D &v) const{\n        return (*this > v) || (*this == v);\n    }\n\n    friend double dot(Point2D a, Point2D b){\n        return a.x*b.x + a.y*b.y;\n    }\n\n    friend double cross(Point2D a, Point2D b){\n        return a.x*b.y - a.y*b.x;\n    }\n\n    friend double distance(Point2D a, Point2D b){\n        return (a - b).abs();\n    }\n\n    friend bool isParallel(Point2D a, Point2D b){\n        return std::abs(cross(a, b)) < EPS;\n    }\n\n    friend bool isOrthogonal(Point2D a, Point2D b){\n        return std::abs(dot(a, b)) < EPS;\n    }\n\n    friend int ccw(Point2D a, Point2D b){\n        if(cross(a, b) > EPS) return 1;//反時計\n        if(cross(a, b) < -EPS) return -1;//時計\n        if(dot(a, b) < -EPS) return 2;//逆向き\n        if(a.norm() < b.norm()) return -2;//同じ向きbが大きい\n        return 0;//同じ向きaが大きい\n    }\n\n    friend int ccw(Point2D p0, Point2D p1, Point2D p2){\n        return ccw(p1-p0, p2-p0);\n    }\n\n    friend bool intersect(Point2D p1, Point2D p2, Point2D p3, Point2D p4){\n        return(ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n               ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n    }\n};\nusing Vector2D = Point2D;\n\nclass Line2D{\n    Point2D p1, p2;\npublic:\n    Line2D(){}\n    Line2D(Point2D a, Point2D b): p1(a), p2(b){}\n\n    void setP1(const Point2D p){p1 = p;}\n    Point2D getP1(){return p1;}\n    void setP2(const Point2D p){p2 = p;}\n    Point2D getP2(){return p2;}\n\n    friend Point2D project(Line2D l, Point2D p){\n        Point2D base = l.p2 - l.p1;\n        double r = dot(p - l.p1, base) / norm(base);\n        return l.p1 + base * r;\n    }\n\n    friend Point2D reflect(Line2D l, Point2D p){\n        return p + 2.0 * (project(l, p) - p);\n    }\n\n    friend bool isParallel(Line2D s1, Line2D s2){\n        return isParallel(s1.p2 - s1.p1, s2.p2- s2.p1);\n    }\n\n    friend bool isOrthogonal(Line2D s1, Line2D s2){\n        return isOrthogonal(s1.p2 - s1.p1, s2.p2- s2.p1);\n    }\n\n    friend bool intersect(Line2D s1, Line2D s2){\n        return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n    }\n\n    friend Point2D getCrossPoint(Line2D s1, Line2D s2){\n        Vector2D base = s2.p2 - s2.p1;\n        double d1 = abs(cross(base, (s1.p1 - s2.p1)));\n        double d2 = abs(cross(base, (s1.p2 - s2.p1)));\n        return s1.p1 + (s1.p2 - s1.p1) * d1 / (d1 + d2);\n    }\n\n    friend double distanceLP(Line2D l, Point2D p){\n        return abs(cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1));\n    }\n\n    friend double distanceSP(Line2D s, Point2D p){\n        if(dot(s.p2 - s.p1, p - s.p1) < 0.0) return abs(p - s.p1);\n        if(dot(s.p1 - s.p2, p - s.p2) < 0.0) return abs(p - s.p2);\n        return distanceLP(s, p);\n    }\n\n    friend double distanceSS(Line2D s1, Line2D s2){\n        if(intersect(s1, s2)) return 0.0;\n        return min({distanceSP(s1, s2.p1), distanceSP(s1, s2.p2),\n                   distanceSP(s2, s1.p1), distanceSP(s2, s1.p2)});\n    }\n};\nusing Segment2D = Line2D;\n\n\n\nint main(){\n    int q; cin >> q;\n    REP(i, q){\n        vector<Point2D> p(4);\n        REP(j, 4){\n            double x, y;\n            cin >> x >> y;\n            p[j].setX(x); p[j].setY(y);\n        }\n        cout << fixed << setprecision(10) \n            << distanceSS(Line2D(p[0], p[1]), Line2D(p[2], p[3])) << endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a)-(b)) < EPS)\n\n// ???/????????????\nstruct Point {\n  double x, y;\n  Point(double x = 0.0, double y = 0.0):x(x), y(y){}\n  \n  Point operator + (Point p) { return Point(x + p.x, y + p.y); }\n  Point operator - (Point p) { return Point(x - p.x, y - p.y); }\n  Point operator * (double a) { return Point(x * a, y * a); }\n  Point operator / (double a) { return Point(x / a, y / a); }\n\n  double abs() { return sqrt(norm()); }\n  double norm() { return x*x + y*y; }\n\n  bool operator < (const Point& p) const {\n    return x != p.x ? x < p.x : y < p.y;\n  }\n  bool operator == (const Point& p) const {\n    return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n  }\n};\ntypedef Point Vector;\n\n// ??????/??´???\nstruct Segment {\n  Point p1, p2;\n};\ntypedef Segment Line;\n\n// ????????????????????????\ndouble norm(Vector v)\n{\n  return v.x*v.x + v.y*v.y;\n}\n// ?????????????????§??????\ndouble abs(Vector v)\n{\n  return sqrt(norm(v));\n}\n// ?????????????????????\ndouble dot(Vector a, Vector b)\n{\n  return a.x*b.x + a.y*b.y;\n}\n// ??????????????????????????§??????\ndouble cross(Vector a, Vector b)\n{\n  return a.x*b.y - a.y*b.x;\n}\n// ??´?????????\nbool isOrthogonal(Vector a, Vector b)\n{\n  return equals(dot(a, b), 0.0);\n}\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2)\n{\n  return isOrthogonal(a1 - a2, b1 - b2);\n}\nbool isOrthogonal(Segment s1, Segment s2)\n{\n  return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n// ????????????\nbool isParallel(Vector a, Vector b)\n{\n  return equals(cross(a, b), 0.0);\n}\nbool isParallel(Point a1, Point a2, Point b1, Point b2)\n{\n  return isParallel(a1 - a2, b1 - b2);\n}\nbool isParallel(Segment s1, Segment s2)\n{\n  return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n// ?°???±\nPoint project(Segment s, Point p)\n{\n  Vector base = s.p2 - s.p1;\n  double r = dot(p - s.p1, base) / norm(base);\n  return s.p1 + base * r;\n}\n// ????°?\nPoint reflect(Segment s, Point p)\n{\n  return p + (project(s, p) - p) * 2.0;\n}\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE         = -1;\nstatic const int ONLINE_BACK       = 2;\nstatic const int ONLINE_FRONT      = -2;\nstatic const int ON_SEGMENT        = 0;\n// ???????¨???????\nint ccw(Point p0, Point p1, Point p2)\n{\n  Vector a = p1 - p0;\n  Vector b = p2 - p0;\n  if(cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n  if(cross(a, b) < -EPS) return CLOCKWISE;\n  if(dot(a, b) < -EPS) return ONLINE_BACK;\n  if(a.norm() < b.norm()) return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\n// ????????????\nbool intersect(Point p1, Point p2, Point p3, Point p4)\n{\n  return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n\t  ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\nbool intersect(Segment s1, Segment s2)\n{\n  return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n// ?????????????????¢\ndouble getDistance(Point a, Point b)\n{\n  return abs(a - b);\n}\n// ??´?????¨?????¨????????¢\ndouble getDistanceLP(Line l, Point p)\n{\n  return abs(cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1));\n}\n// ????????¨?????¨????????¢\ndouble getDistanceSP(Segment s, Point p)\n{\n  if(dot(s.p2 - s.p1, p - s.p1) < 0.0) return abs(p - s.p1);\n  if(dot(s.p1 - s.p2, p - s.p2) < 0.0) return abs(p - s.p2);\n  return getDistanceLP(s, p);\n}\n// ????????????????????¢\ndouble getDistance(Segment s1, Segment s2)\n{\n  if(intersect(s1, s2)) return 0.0;\n  return min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n\t     min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\nint main()\n{\n  int q; cin >> q;\n  while(q--) {\n    Segment s[2];\n    cin >> s[0].p1.x >> s[0].p1.y >> s[0].p2.x >> s[0].p2.y;\n    cin >> s[1].p1.x >> s[1].p1.y >> s[1].p2.x >> s[1].p2.y;\n    printf(\"%.10f\\n\", getDistance(s[0], s[1]));\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<climits>\n#include<iomanip>\n#include<cstdio>\n#include<vector>\n#include<queue>\n#include<stack>\n#include<cmath>\n#include<list>\n#include<map>\n#include<set>\nusing namespace std;\n\ntypedef vector<int> VI;\ntypedef vector<VI> VVI;\ntypedef vector<string> VS;\ntypedef stack<int> SI;\ntypedef queue<int> QI;\ntypedef list<int> LI;\ntypedef pair<int,int> PII;\ntypedef long long LL;\n\n#define d(x)  cout<<#x<<\" = \"<<(x)<<endl;\n#define ALL(a)  (a).begin(),(a).end()\n#define RALL(a) (a).rbegin(), (a).rend()\n#define PB push_back\n#define MP make_pair\n#define EMP empty()\n#define SZ(a) int((a).size())\n#define EACH(i,c) for(typeof((c).begin()) i=(c).begin(); i!=(c).end(); ++i)\n#define REACH(i,c) for(typeof((c).rbegin()) i=(c).rbegin(); i!=(c).rend(); ++i)\n#define EXIST(s,e) ((s).find(e)!=(s).end())\n#define SORT(c,n) sort(c,c+n)\n#define VSORT(c) sort((c).begin(),(c).end())\n#define FOR(i,a,b) for(int i=(a);i<(b);++i)\n#define REP(i,n)  FOR(i,0,n)\n#define DFOR(i,b,a) for(int i=(b)-1;i>=(a);--i)\n#define DREP(i,n) DFOR(i,n,0)\n#define INF 1000000000\n\nconst double EPS = 1e-10;\nconst double PI  = acos(-1.0);\n////////////////////////////////////////////////\nstruct vtr{double x;double y;};\n\n\ndouble absvtr(vtr a)\n{\n\treturn sqrt(a.x*a.x+a.y*a.y);\n}\ndouble dotp(vtr a,vtr b)\n{\n\treturn a.x*b.x+a.y*b.y;\n}\ndouble abscrossp(vtr a,vtr b)\n{\n\treturn a.x*b.y-a.y*b.x;\n}\nvtr plusvtr(vtr a,vtr b)\n{\n\tvtr c;\n\tc.x=a.x+b.x;\n\tc.y=a.y+b.y;\n\treturn c;\n}\nvtr minusvtr(vtr a,vtr b)\n{\n\tvtr c;\n\tc.x=a.x-b.x;\n\tc.y=a.y-b.y;\n\treturn c;\n}\n\nint main()\n{\n\tint n;cin>>n;\n\tvtr p[4];\n\tREP(i,n)\n\t{\n\t\tREP(j,4)cin>>p[j].x>>p[j].y;\n\t\tdouble a,b,c,d;\n\t\ta=absvtr( abscrossp( minusvtr(p[1],p[0]), minusvtr(p[2],p[0]) ) ) / absvtr( minusvtr(p[1],p[0]) );\n\t\tb=absvtr( abscrossp( minusvtr(p[1],p[0]), minusvtr(p[3],p[0]) ) ) / absvtr( minusvtr(p[1],p[0]) );\n\t\tc=absvtr( abscrossp( minusvtr(p[3],p[2]), minusvtr(p[1],p[2]) ) ) / absvtr( minusvtr(p[3],p[2]) );\n\t\td=absvtr( abscrossp( minusvtr(p[3],p[2]), minusvtr(p[0],p[2]) ) ) / absvtr( minusvtr(p[3],p[2]) );\n\t\tcout<<min(min(a,b),min(c,d));\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<climits>\n#include<iomanip>\n#include<cstdio>\n#include<vector>\n#include<queue>\n#include<stack>\n#include<cmath>\n#include<list>\n#include<map>\n#include<set>\nusing namespace std;\n\ntypedef vector<int> VI;\ntypedef vector<VI> VVI;\ntypedef vector<string> VS;\ntypedef stack<int> SI;\ntypedef queue<int> QI;\ntypedef list<int> LI;\ntypedef pair<int,int> PII;\ntypedef long long LL;\n\n#define d(x)  cout<<#x<<\" = \"<<(x)<<endl;\n#define ALL(a)  (a).begin(),(a).end()\n#define RALL(a) (a).rbegin(), (a).rend()\n#define PB push_back\n#define MP make_pair\n#define EMP empty()\n#define SZ(a) int((a).size())\n#define EACH(i,c) for(typeof((c).begin()) i=(c).begin(); i!=(c).end(); ++i)\n#define REACH(i,c) for(typeof((c).rbegin()) i=(c).rbegin(); i!=(c).rend(); ++i)\n#define EXIST(s,e) ((s).find(e)!=(s).end())\n#define SORT(c,n) sort(c,c+n)\n#define VSORT(c) sort((c).begin(),(c).end())\n#define FOR(i,a,b) for(int i=(a);i<(b);++i)\n#define REP(i,n)  FOR(i,0,n)\n#define DFOR(i,b,a) for(int i=(b)-1;i>=(a);--i)\n#define DREP(i,n) DFOR(i,n,0)\n#define INF 1000000000\n\nconst double EPS = 1e-10;\nconst double PI  = acos(-1.0);\n////////////////////////////////////////////////\nstruct vtr{double x;double y;};\n\n\ndouble absvtr(vtr a)\n{\n\treturn sqrt(a.x*a.x+a.y*a.y);\n}\ndouble dotp(vtr a,vtr b)\n{\n\treturn a.x*b.x+a.y*b.y;\n}\ndouble abscrossp(vtr a,vtr b)\n{\n\treturn a.x*b.y-a.y*b.x;\n}\ndouble plusvtr(vtr a,vtr b)\n{\n\tvtr c;\n\tc.x=a.x+b.x;\n\tc.y=a.y+b.y;\n\treturn c;\n}\ndouble minusvtr(vtr a,vtr b)\n{\n\tvtr c;\n\tc.x=a.x-b.x;\n\tc.y=a.y-b.y;\n\treturn c;\n}\n\nint main()\n{\n\tint n;cin>>n;\n\tvtr p[4];\n\tREP(i,n)\n\t{\n\t\tREP(j,4)cin>>p[j].x>>p[j].y;\n\t\tdouble a,b,c,d;\n\t\ta=absvtr( crossp( minusvtr(p[1],p[0]), minusvtr(p[2],p[0]) ) ) / absvtr( minusvtr(p[1],p[0]) );\n\t\tb=absvtr( crossp( minusvtr(p[1],p[0]), minusvtr(p[3],p[0]) ) ) / absvtr( minusvtr(p[1],p[0]) );\n\t\tc=absvtr( crossp( minusvtr(p[3],p[2]), minusvtr(p[1],p[2]) ) ) / absvtr( minusvtr(p[3],p[2]) );\n\t\td=absvtr( crossp( minusvtr(p[3],p[2]), minusvtr(p[0],p[2]) ) ) / absvtr( minusvtr(p[3],p[2]) );\n\t\tcout<<min(min(a,b),min(c,d));\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cmath>\n#include<iomanip>\n#include<algorithm>\nusing namespace std;\nstruct Point { long double px, py; };\nstruct Segment { Point p1, p2; };\nPoint Minus(Point a, Point b) { Point G; G.px = a.px - b.px; G.py = a.py - b.py; return G; }\nlong double Abs(Point a) { return sqrt(a.px*a.px + a.py*a.py); }\nlong double norm(Point a) { return a.px*a.px + a.py*a.py; }\nlong double dot(const Point& a, const Point& b) { return a.px * b.px + a.py * b.py; }\nlong double crs(const Point& a, const Point& b) { return a.px * b.py - a.py * b.px; }\nint ccw(Point p0, Point p1, Point p2) {\n    Point a = Minus(p1, p0), b = Minus(p2, p0);\n    if (crs(a, b) > 1e-10) return 1;\n    if (crs(a, b) < -1e-10) return -1;\n    if (dot(a, b) < -1e-10) return 2;\n    if (norm(a) < norm(b)) return -2;\n    return 0;\n}\nbool its(Point p1, Point p2, Point p3, Point p4) {\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 && ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\nbool its(Segment s1, Segment s2) {\n    return its(s1.p1, s1.p2, s2.p1, s2.p2);\n}\nlong double dst(const Segment& a, const Point& b) {\n    if (dot(Minus(a.p2, a.p1), Minus(b, a.p1)) < 0.0) return Abs(Minus(b, a.p1));\n    if (dot(Minus(a.p1, a.p2), Minus(b, a.p2)) < 0.0) return Abs(Minus(b, a.p2));\n    return abs(crs(Minus(a.p2, a.p1), Minus(b, a.p1)) / Abs(Minus(a.p2, a.p1)));\n}\nint main() {\n    Point P1, P2, P3, P4; Segment M1, M2;\n    int T; cin >> T;\n    for (int i = 0; i < T; i++) {\n        cin >> P1.px >> P1.py >> P2.px >> P2.py;\n        cin >> P3.px >> P3.py >> P4.px >> P4.py;\n        M1.p1 = P1; M1.p2 = P2; M2.p1 = P3; M2.p2 = P4;\n        long double res = min(dst(M1, P3), dst(M1, P4));\n        res = min(res, min(dst(M2, P1), dst(M2, P2)));\n        if (its(M1, M2) == true) { res = 0.0; }\n        cout << fixed << setprecision(1919) << res << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "//{{{\n#include <bits/stdc++.h>\nusing namespace std;\n//types\ntypedef long long ll;\ntypedef pair<int,int> pii;\n//input\nbool SR(int &_x){return scanf(\"%d\",&_x)==1;}bool SR(ll &_x){return scanf(\"%lld\",&_x)==1;}\nbool SR(double &_x){return scanf(\"%lf\",&_x)==1;}bool SR(char *_s){return scanf(\"%s\",_s)==1;}\nbool RI(){return true;}\ntemplate<typename I,typename... T>bool RI(I &_x,T&... _tail){return SR(_x) && RI(_tail...);}\n//output\nvoid SP(const int _x){printf(\"%d\",_x);}void SP(const ll _x){printf(\"%lld\",_x);}\nvoid SP(const double _x){printf(\"%.16lf\",_x);}void SP(const char *s){printf(\"%s\",s);}\nvoid PL(){puts(\"\");}\ntemplate<typename I,typename... T>void PL(const I _x,const T... _tail)\n{SP(_x);if(sizeof...(_tail)) putchar(' ');PL(_tail...);}\n//macro\n#define SZ(x) ((int)(x).size())\n#define ALL(x) (x).begin(),(x).end()\n#define REP(i,n) for(int i=0;i<int(n);i++)\n#define REP1(i,a,b) for(int i=(a);i<=int(b);i++)\n#define PER1(i,a,b) for(int i=(a);i>=int(b);i--)\n#define pb push_back\n#define mkp make_pair\n#define F first\n#define S second\n//debug\n#ifdef darry140\ntemplate<typename A,typename B>\nostream& operator <<(ostream&_s, const pair<A,B> &_p){return _s<<\"(\"<<_p.F<<\",\"<<_p.S<<\")\";}\ntemplate<typename It>\nostream& _OUTC(ostream &_s,It _b,It _e)//container\n{\n    _s<<\"{\";\n    for(auto _it=_b;_it!=_e;_it++) _s<<(_it==_b?\"\":\" \")<<*_it;\n    _s<<\"}\";\n    return _s;\n}\ntemplate<typename A,typename B>\nostream& operator <<(ostream&_s, const map<A,B> &_c){return _OUTC(_s,ALL(_c));}\ntemplate<typename T>\nostream& operator <<(ostream&_s, const set<T> &_c){return _OUTC(_s,ALL(_c));}\ntemplate<typename T>\nostream& operator <<(ostream&_s, const vector<T> &_c){return _OUTC(_s,ALL(_c));}\ntemplate<typename I>\nvoid _DOING(const char *_s,I&& _x){cerr<<_s<<\"=\"<<_x<<endl;}//without ','\ntemplate<typename I,typename... T>\nvoid _DOING(const char *_s,I&& _x,T&&... _tail)//with ','\n{\n    int _c=0;\n    static const char _bra[]=\"({[\";\n    static const char _ket[]=\")}]\";\n    while(*_s!=',' || _c!=0)//eg. mkp(a,b)\n    {\n        if(strchr(_bra,*_s)) _c++;\n        if(strchr(_ket,*_s)) _c--;\n        cerr<<*_s++;\n    }\n    cerr<<\"=\"<<_x<<\", \";\n    _DOING(_s+1,_tail...);\n}\n#define debug(...) do{\\\n    fprintf(stderr,\"%s:%d - \",__PRETTY_FUNCTION__,__LINE__);\\\n    _DOING(#__VA_ARGS__,__VA_ARGS__);\\\n}while(0)\n#else\n#define debug(...)\n#endif\n//}}}\ntypedef long double ld;\nconst ld global_eps=1e-8;\n#if 0\nenum cases{insi,bord,outs};//inside, border, outside\nenum cases{para,coin,inte};//parallel, coincide, intersect\n#else\nenum Case\n{\n    insi,bord,outs,//inside, border, outside\n    para,coin,inte, //parallel, coincide, intersect\n    tang,tang_in,tang_out //tangent\n};\n#endif\nint sign(ld x,ld eps=global_eps){return (x>=eps)-(x<=-eps);}\nint cmp(ld a,ld b,ld eps=global_eps){return sign(a-b,eps);}\nstruct Point\n{\n    ld x,y;\n    Point():x(0),y(0){}\n    Point(ld _x,ld _y):x(_x),y(_y){}\n    Point operator +(const Point &p) const\n    {return Point(x+p.x,y+p.y);}\n    Point operator -(const Point &p) const\n    {return Point(x-p.x,y-p.y);}\n    ld operator *(const Point &p) const\n    {return x*p.x+y*p.y;}\n    ld operator %(const Point &p) const\n    {return x*p.y-y*p.x;}   \n    bool operator <(const Point &p) const\n    {return tie(y,x) < tie(p.y,p.x);}\n    bool operator ==(const Point &p) const\n    {return tie(y,x) == tie(p.y,p.x);}\n    Point operator /(const ld &l) const\n    {return Point(x/l,y/l);}\n    Point operator *(const ld &l) const\n    {return Point(x*l,y*l);}\n    ld len() const{return hypot(x,y);}\n    ld len2() const{return x*x+y*y;}\n    ld dis(const Point &a)const{return (*this-a).len();}\n    ld dis2(const Point &a)const{return (*this-a).len2();}\n    Point unit()const{return *this/len();}\n    Point resize(const ld &l)const{return unit()*l;}\n};\nstruct Line\n{\n    Point p1,p2;\n    Line(){}\n    Line(Point a,Point b):p1(a),p2(b){}\n    Point way() const{return p2-p1;}\n    Point norm() const{return {p1.y-p2.y,p2.x-p1.x};}\n    bool online(const Point &p) const{return sign((p-p1)%way())==0;}\n    bool onsegment(const Point &p)const\n    {\n        return online(p) && sign((p-p1)*(p2-p))>=0;\n    }\n    pair<int,Point> intersect(const Line &I) const\n    {\n        if(sign(I.way()%way())==0) return {online(I.p1)?coin:para,{0,0}};\n        const Point &p3=I.p1,&p4=I.p2;\n        auto _143=(p1-p4)%(p4-p3),_342=(p3-p4)%(p4-p2);\n        return {inte,(p1*_342+p2*_143)/(_143+_342)};\n    }\n    ld linedistance(const Point &p) const\n    {\n        return abs((p-p1)%way())/way().len();\n    }\n    Point project(const Point &p) const\n    {\n        return intersect(Line(p,p+norm())).second;\n    }\n    ld segmentdistance(const Point &p) const\n    {\n        const auto &pro=project(p);\n        if(onsegment(pro)) return p.dis(pro);\n        return min(p.dis(p1),p.dis(p2));\n    }\n};\nint main()\n{\n    int t;RI(t);\n    while(t--)\n    {\n        Point p[4];\n        REP(i,4) cin>>p[i].x>>p[i].y;\n        Line I(p[0],p[1]),J(p[2],p[3]);\n        Point o=I.intersect(J).S;\n\n        if(I.onsegment(o)&&J.onsegment(o)) PL(0);\n        else\n        {\n            ld ans=1e18;\n            REP(i,4) ans=min(ans,(i<2?J:I).segmentdistance(p[i]));\n            PL((double)ans);\n        }\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <cstring>\n#include <cstdio>\n#include <queue>\n#include <vector>\n#include <cmath>\n#include <map>\n#include <stack>\n#include <algorithm>\ntypedef long long int ll;\nusing namespace std;\nconst int MAX=5000+10;\nconst double eps=1e-9;\nconst double PI=acos(-1.0);\n\nint sgn(double x)\n{\n    if (fabs(x)<eps) {\n        return 0;\n    }\n    if (x<0) {\n        return -1;\n    }\n    else return 1;\n}\nstruct point\n{\n    double x,y;\n    point(){}\n    point(double _x,double _y)\n    {\n        x=_x;y=_y;\n    }\n    point operator +(const point &b)const\n    {\n        return point(x+b.x,y+b.y);\n    }\n    point operator -(const point &b)const\n    {\n        return point(x-b.x,y-b.y);\n    }\n    double operator ^(const point &b)const\n    {\n        return x*b.y-y*b.x;\n    }\n    double operator *(const point &b)const\n    {\n        return x*b.x+y*b.y;\n    }\n    point operator *(const double k)const\n    {\n        point kk;kk.x=k*x;kk.y=k*y;return kk;\n    }\n    double len(void)\n    {\n        return sqrt(x*x+y*y);\n    }\n};\n\nstruct line\n{\n    point s,e;\n    line(){}\n    line(point _s,point _e)\n    {\n        s=_s;e=_e;\n    }\n    pair<int, point> operator &(const line &b)const\n    {\n        point res=s;\n        if(sgn((s-e)^(b.s-b.e))==0){\n            if(sgn((s-b.e)^(b.s-b.e))==0){\n                return make_pair(0, res);\n            }\n            else{\n                return make_pair(1,res);\n            }\n        }\n        double t=((s-b.s)^(b.s-b.e))/((s-e)^(b.s-b.e));\n        res.x+=(e.x-s.x)*t;\n        res.y+=(e.y-s.y)*t;\n        return make_pair(2, res);\n    }\n};\ndouble dist(point a,point b) {\n    return sqrt((a-b)*(a-b));\n}\nbool inter(line l1,line l2)\n{\n    return max(l1.s.x,l1.e.x) >= min(l2.s.x,l2.e.x) &&\n    max(l2.s.x,l2.e.x) >= min(l1.s.x,l1.e.x) &&\n    max(l1.s.y,l1.e.y) >= min(l2.s.y,l2.e.y) &&\n    max(l2.s.y,l2.e.y) >= min(l1.s.y,l1.e.y) &&\n    sgn((l2.s-l1.e)^(l1.s-l1.e))*sgn((l2.e-l1.e)^(l1.s-l1.e)) <= 0 &&\n    sgn((l1.s-l2.e)^(l2.s-l2.e))*sgn((l1.e-l2.e)^(l2.s-l2.e)) <= 0;\n}\npoint PointToLine(point P,line L) {\n    point result;\n    double t = ((P-L.s)*(L.e-L.s))/((L.e-L.s)*(L.e-L.s)); result.x = L.s.x + (L.e.x-L.s.x)*t;\n    result.y = L.s.y + (L.e.y-L.s.y)*t;\n    return result;\n}\npoint NearestPointToLineSeg(point P,line L) {\n    point result;\n    double t = ((P-L.s)*(L.e-L.s))/((L.e-L.s)*(L.e-L.s)); if(t >= 0 && t <= 1)\n    {\n        result.x = L.s.x + (L.e.x - L.s.x)*t;\n        result.y = L.s.y + (L.e.y - L.s.y)*t;\n    }\n    else\n    {\n        if(dist(P,L.s) < dist(P,L.e))\n            result = L.s; else result = L.e;\n    }\n    return result;\n}\ndouble distpointtoseg(point p,line l)\n{\n    point result=NearestPointToLineSeg(p, l);\n    return dist(p, result);\n}\ndouble distsegtoseg(line l1,line l2)\n{\n    if (inter(l1, l2)) {\n        return 0;\n    }\n    return min(min(distpointtoseg(l1.s, l2), distpointtoseg(l1.e, l2)),min(distpointtoseg(l2.s, l1), distpointtoseg(l2.e, l1)));\n}\nint main(){\n    //freopen(\"/Users/mac/Desktop/C++?¨????/test/test.txt\", \"r\", stdin);\n    int q;\n    scanf(\"%d\",&q);\n    while(q--){\n        line l1,l2;\n        scanf(\"%lf%lf%lf%lf%lf%lf%lf%lf\",&l1.s.x,&l1.s.y,&l1.e.x,&l1.e.y,&l2.s.x,&l2.s.y,&l2.e.x,&l2.e.y);\n        printf(\"%.8lf\\n\",distsegtoseg(l1, l2));\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef long double lf;\ntypedef pair<int, int> pii;\n\nconst int MAXN = 5;\nconst int MOD = 1e9+7;\n\nconst lf eps = 1e-9;\ntypedef double T;\nstruct pt {\n  T x, y;\n  pt operator + (pt p) { return {x+p.x, y+p.y}; }\n  pt operator - (pt p) { return {x-p.x, y-p.y}; }\n  pt operator * (pt p) { return {x*p.x-y*p.y, x*p.y+y*p.x}; }\n  pt operator * (T d) { return {x*d, y*d}; }\n  pt operator / (T d) { return {x/d, y/d}; } /// only for floating point\n  bool operator == (pt b) { return x == b.x && y == b.y; }\n  bool operator != (pt b) { return !(*this == b); }\n  bool operator < (const pt &o) const { return y < o.y || (y == o.y && x < o.x); }\n  bool operator > (const pt &o) const { return y > o.y || (y == o.y && x > o.x); }\n};\nint cmp (lf a, lf b) { return (a + eps < b ? -1 :(b + eps < a ? 1 : 0)); }\n/** Already in complex **/\nT norm(pt a) { return a.x*a.x + a.y*a.y; }\nT abs(pt a) { return sqrt(norm(a)); }\nT arg(pt a) { return atan2(a.y, a.x); }\nostream& operator << (ostream& os, pt &p) {\n  return os << \"(\"<< p.x << \",\" << p.y << \")\";\n}\n/***/\nistream &operator >> (istream &in, pt &p) {\n    T x, y; in >> x >> y;\n    p = {x, y};\n    return in;\n}\nT dot(pt a, pt b) { return a.x*b.x + a.y*b.y; }\nT cross(pt a, pt b) { return a.x*b.y - a.y*b.x; }\nT orient(pt a, pt b, pt c) { return cross(b-a,c-a); }\n//pt rot(pt p, lf a) { return {p.x*cos(a) - p.y*sin(a), p.x*sin(a) + p.y*cos(a)}; }\n//pt rot(pt p, double a) { return p * polar(1.0, a); } /// for complex\n//pt rotate_to_b(pt a, pt b, lf ang) { return rot(a-b, ang)+b; }\npt rot90ccw(pt p) { return {-p.y, p.x}; }\npt rot90cw(pt p) { return {p.y, -p.x}; }\npt translate(pt p, pt v) { return p+v; }\npt scale(pt p, double f, pt c) { return c + (p-c)*f; }\nbool are_perp(pt v, pt w) { return dot(v,w) == 0; }\nint sign(T x) { return (T(0) < x) - (x < T(0)); }\npt unit(pt a) { return a/abs(a); }\n\nbool in_angle(pt a, pt b, pt c, pt x) {\n  assert(orient(a,b,c) != 0);\n  if (orient(a,b,c) < 0) swap(b,c);\n  return orient(a,b,x) >= 0 && orient(a,c,x) <= 0;\n}\n\n//lf angle(pt a, pt b) { return acos(max(-1.0, min(1.0, dot(a,b)/abs(a)/abs(b)))); }\n//lf angle(pt a, pt b) { return atan2(cross(a, b), dot(a, b)); }\n/// returns vector to transform points\npt get_linear_transformation(pt p, pt q, pt r, pt fp, pt fq) {\n  pt pq = q-p, num{cross(pq, fq-fp), dot(pq, fq-fp)};\n  return fp + pt{cross(r-p, num), dot(r-p, num)} / norm(pq);\n}\n\nbool half(pt p) { /// true if is in (0, 180]\n  assert(p.x != 0 || p.y != 0); /// the argument of (0,0) is undefined\n  return p.y > 0 || (p.y == 0 && p.x < 0);\n}\nbool half_from(pt p, pt v = {1, 0}) {\n  return cross(v,p) < 0 || (cross(v,p) == 0 && dot(v,p) < 0);\n}\nbool polar_cmp(const pt &a, const pt &b) {\n  return make_tuple(half(a), 0) < make_tuple(half(b), cross(a,b));\n}\n\nstruct line {\n  pt v; T c;\n  line(pt v, T c) : v(v), c(c) {}\n  line(T a, T b, T c) : v({b,-a}), c(c) {}\n  line(pt p, pt q) : v(q-p), c(cross(v,p)) {}\n  T side(pt p) { return cross(v,p)-c; }\n  lf dist(pt p) { return abs(side(p)) / abs(v); }\n  lf sq_dist(pt p) { return side(p)*side(p) / (lf)norm(v); }\n  line perp_through(pt p) { return {p, p + rot90ccw(v)}; }\n  bool cmp_proj(pt p, pt q) { return dot(v,p) < dot(v,q); }\n  line translate(pt t) { return {v, c + cross(v,t)}; }\n  line shift_left(double d) { return {v, c + d*abs(v)}; }\n  pt proj(pt p) { return p - rot90ccw(v)*side(p)/norm(v); }\n  pt refl(pt p) { return p - rot90ccw(v)*2*side(p)/norm(v); }\n};\n\nbool inter_ll(line l1, line l2, pt &out) {\n  T d = cross(l1.v, l2.v);\n  if (d == 0) return false;\n  out = (l2.v*l1.c - l1.v*l2.c) / d;\n  return true;\n}\n/*line bisector(line l1, line l2, bool interior) {\n  assert(cross(l1.v, l2.v) != 0); /// l1 and l2 cannot be parallel!\n  lf sign = interior ? 1 : -1;\n  return {l2.v/abs(l2.v) + l1.v/abs(l1.v) * sign,\n          l2.c/abs(l2.v) + l1.c/abs(l1.v) * sign};\n}*/\n\nbool in_disk(pt a, pt b, pt p) {\n  return dot(a-p, b-p) <= 0;\n}\nbool on_segment(pt a, pt b, pt p) {\n  return orient(a,b,p) == 0 && in_disk(a,b,p);\n}\nbool proper_inter(pt a, pt b, pt c, pt d, pt &out) {\n  T oa = orient(c,d,a),\n  ob = orient(c,d,b),\n  oc = orient(a,b,c),\n  od = orient(a,b,d);\n  /// Proper intersection exists iff opposite signs\n  if (oa*ob < 0 && oc*od < 0) {\n    out = (a*ob - b*oa) / (ob-oa);\n    return true;\n  }\n  return false;\n}\nset<pt> inter_ss(pt a, pt b, pt c, pt d) {\n  pt out;\n  if (proper_inter(a,b,c,d,out)) return {out};\n  set<pt> s;\n  if (on_segment(c,d,a)) s.insert(a);\n  if (on_segment(c,d,b)) s.insert(b);\n  if (on_segment(a,b,c)) s.insert(c);\n  if (on_segment(a,b,d)) s.insert(d);\n  return s;\n}\nlf pt_to_seg(pt a, pt b, pt p) {\n  if(a != b) {\n    line l(a,b);\n    if (l.cmp_proj(a,p) && l.cmp_proj(p,b)) /// if closest to  projection\n      return l.dist(p); /// output distance to line\n  }\n  return min(abs(p-a), abs(p-b)); /// otherwise distance to A or B\n}\nlf seg_to_seg(pt a, pt b, pt c, pt d) {\n  pt dummy;\n  if (proper_inter(a,b,c,d,dummy)) return 0;\n  return min({pt_to_seg(a,b,c), pt_to_seg(a,b,d),\n              pt_to_seg(c,d,a), pt_to_seg(c,d,b)});\n}\n\nenum {IN, OUT, ON};\nstruct polygon {\n  vector<pt> p;\n  polygon(int n) : p(n) {}\n  int top = -1, bottom = -1;\n  void delete_repetead() {\n    vector<pt> aux;\n    sort(p.begin(), p.end());\n    for(pt &i : p)\n      if(aux.empty() || aux.back() != i)\n        aux.push_back(i);\n    p.swap(aux);\n  }\n  bool is_convex() {\n    bool pos = 0, neg = 0;\n    for (int i = 0, n = p.size(); i < n; i++) {\n      int o = orient(p[i], p[(i+1)%n], p[(i+2)%n]);\n      if (o > 0) pos = 1;\n      if (o < 0) neg = 1;\n    }\n    return !(pos && neg);\n  }\n  lf area() {\n    lf ans = 0;\n    for (int i = 0, n = p.size(); i < n; i++)\n      ans += cross(p[i], p[(i+1)%n]);\n    return abs(ans) / 2.0;\n  }\n  lf perimeter() {\n    lf per = 0;\n    for(int i = 0, n = p.size(); i < n; i++)\n      per += abs(p[i] - p[(i+1)%n]);\n    return per;\n  }\n  bool above(pt a, pt p) { return p.y >= a.y; }\n  bool crosses_ray(pt a, pt p, pt q) {\n    return (above(a,q)-above(a,p))*orient(a,p,q) > 0;\n  }\n  int in_polygon(pt a) {\n    int crosses = 0;\n    for(int i = 0, n = p.size(); i < n; i++) {\n      if(on_segment(p[i], p[(i+1)%n], a)) return ON;\n      crosses += crosses_ray(a, p[i], p[(i+1)%n]);\n    }\n    return (crosses&1 ? IN : OUT);\n  }\n  void normalize() { /// polygon is CCW\n    bottom = min_element(p.begin(), p.end()) - p.begin();\n    vector<pt> tmp(p.begin()+bottom, p.end());\n    tmp.insert(tmp.end(), p.begin(), p.begin()+bottom);\n    p.swap(tmp);\n    bottom = 0;\n    top = max_element(p.begin(), p.end()) - p.begin();\n  }\n  int in_convex(pt a) {\n    assert(bottom == 0 && top != -1);\n    if(a < p[0] || a > p[top]) return OUT;\n    T orientation = orient(p[0], p[top], a);\n    if(orientation == 0) {\n      if(a == p[0] || a == p[top]) return ON;\n      return top == 1 || top + 1 == p.size() ? ON : IN;\n    } else if (orientation < 0) {\n      auto it = lower_bound(p.begin()+1, p.begin()+top, a);\n      T d = orient(*prev(it), a, *it);\n      return d < 0 ? IN : (d > 0 ? OUT: ON);\n    }\n    else {\n      auto it = upper_bound(p.rbegin(), p.rend()-top-1, a);\n      T d = orient(*it, a, it == p.rbegin() ? p[0] : *prev(it));\n      return d < 0 ? IN : (d > 0 ? OUT: ON);\n    }\n  }\n  polygon cut(pt a, pt b) {\n    line l(a, b);\n    polygon new_polygon(0);\n    for(int i = 0, n = p.size(); i < n; ++i) {\n      pt c = p[i], d = p[(i+1)%n];\n      lf abc = cross(b-a, c-a), abd = cross(b-a, d-a);\n      if(abc >= 0) new_polygon.p.push_back(c);\n      if(abc*abd < 0) {\n        pt out; inter_ll(l, line(c, d), out);\n        new_polygon.p.push_back(out);\n      }\n    }\n    return new_polygon;\n  }\n  void convex_hull() {\n    sort(p.begin(), p.end());\n    vector<pt> ch;\n    ch.reserve(p.size()+1);\n    for(int it = 0; it < 2; it++) {\n      int start = ch.size();\n      for(auto &a : p) {\n        /// if colineal are needed, use < and remove repeated points\n        while(ch.size() >= start+2 && orient(ch[ch.size()-2], ch.back(), a) <= 0)\n          ch.pop_back();\n        ch.push_back(a);\n      }\n      ch.pop_back();\n      reverse(p.begin(), p.end());\n    }\n    if(ch.size() == 2 && ch[0] == ch[1]) ch.pop_back();\n    /// be careful with CH of size < 3\n    p.swap(ch);\n  }\n  ll pick() {\n    ll boundary = 0;\n    for(int i = 0, n = p.size(); i < n; i++) {\n      int j = (i+1 == n ? 0 : i+1);\n      boundary += __gcd((ll)abs(p[i].x - p[j].x), (ll)abs(p[i].y - p[j].y));\n    }\n    return area() + 1 - boundary/2;\n  }\n  pt& operator[] (int i){ return p[i]; }\n};\n\nint main() {\n  ios::sync_with_stdio(0);\n  cin.tie(0);\n\n  #ifdef LOCAL\n      freopen(\"input.txt\", \"r\", stdin);\n      freopen(\"output.txt\", \"w\", stdout);\n  #else\n      #define endl '\\n'\n  #endif // LOCAL\n\n  int q; cin >> q;\n  cout << fixed << setprecision(10);\n  while(q--) {\n    pt a, b, c, d; cin >> a >> b >> c >> d;\n    cout << seg_to_seg(a, b, c, d) << endl;\n  }\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "// ConsoleApplication.cpp : コンソール アプリケーションのエントリ ポイントを定義します。\n//\n\n#include \"stdio.h\"\n#include <cstdlib>\n#include <iostream>\n#include <iomanip>\n#include <cmath>\n#include <algorithm>\n#include <functional>\n\nusing namespace std;\nusing NUM = long double;\n\ntemplate<typename T>\nstruct Point {\n\tT x, y;\n\tPoint<T> operator+(const Point<T>& rhs)const {\n\t\tPoint<T> p;\n\t\tp.x = this->x + rhs.x;\n\t\tp.y = this->y + rhs.y;\n\t\treturn p;\n\t}\n\tPoint<T> operator-(const Point<T>& rhs)const {\n\t\tPoint<T> p;\n\t\tp.x = this->x - rhs.x;\n\t\tp.y = this->y - rhs.y;\n\t\treturn p;\n\t}\n\tPoint<T> operator*(const T rhs) const {\n\t\tPoint<T> p;\n\t\tp.x = this->x * rhs;\n\t\tp.y = this->y * rhs;\n\t\treturn p;\n\t}\n\tPoint<T> operator-() const {\n\t\tPoint<T> p;\n\t\tp.x = this->x * -1.0;\n\t\tp.y = this->y * -1.0;\n\t\treturn p;\n\t}\n};\n\n//template<typename T>\n//Point<T> operator*(const T val, const Point<T>& p)\n//{\n//\treturn p*val;\n//}\n\ntemplate<typename T>\nPoint<T> operator*(const T val, const Point<T>& p)\n{\n\treturn p*val;\n}\n\ntemplate<typename T>\nstruct Segment {\n\tPoint<T> p1, p2;\n};\n\ntemplate<typename T>\nbool isZero(const T val)\n{\n\treturn fabs(val) < 1e-10;\n}\n\ntemplate<typename T>\nT innerProduct(const Point<T>& p0, const Point<T>& p1)\n{\n\tdouble x0 = p0.x;\n\tdouble y0 = p0.y;\n\tdouble x1 = p1.x;\n\tdouble y1 = p1.y;\n\treturn x0 * x1 + y0 * y1;\n}\n\ntemplate<typename T>\nT outerProduct(const Point<T>& p0, const Point<T>& p1)\n{\n\tdouble x0 = p0.x;\n\tdouble y0 = p0.y;\n\tdouble x1 = p1.x;\n\tdouble y1 = p1.y;\n\treturn x0 * y1 - y0 * x1;\n}\n\ntemplate<typename T>\nT norm(const Point<T>& p)\n{\n\tdouble x = p.x;\n\tdouble y = p.y;\n\treturn x*x + y*y;\n}\n\ntemplate<typename T>\nT absolute(const Point<T>& p)\n{\n\treturn sqrt(norm(p));\n}\n\ntemplate<typename T>\nvoid readPoint(Point<T>& p)\n{\n\tcin >> p.x;\n\tcin >> p.y;\n}\n\ntemplate<typename T>\nvoid readSegment(Segment<T>& s)\n{\n\tcin >> s.p1.x;\n\tcin >> s.p1.y;\n\tcin >> s.p2.x;\n\tcin >> s.p2.y;\n}\n\ntemplate<typename T>\nvoid outputComponentesOfPoint(const Point<T>& p)\n{\n\tcout << fixed;\n\tcout << setprecision(8) << p.x;\n\tcout << \" \";\n\tcout << setprecision(8) << p.y;\n\tcout << endl;\n}\n\n//template<typename T>\n//T getDistanceFromPointToLine(const Segment<T>& s, const Point<T>& p) {\n//\tconst Point<T> a = p - s.p1;\n//\tconst Point<T> b = s.p2 - s.p1;\n//\tconst Point<T> outer = outerProduct(a, b);\n//\treturn outer / absolute(b);\n//}\n\ntemplate<typename T>\nT distance(const Point<T>& p1, const Point<T>& p2)\n{\n\treturn absolute(p2 - p1);\n}\n\ntemplate<typename T>\nT getDistanceFromPointToSegment(const Point<T>& p, const Segment<T>& s) {\n\tconst T zero = static_cast<T>(0);\n\tconst Point<T> a = p - s.p1;//本当は使いまわせる\n\tconst Point<T> b = s.p2 - s.p1;\n\tconst Point<T> c = p - s.p2;\n\tconst T innerAB = innerProduct(a, b);\n\tconst T innerc_b = innerProduct(c, -b);\n\n\tT aaa = distance(p, s.p1);\n\tT bbb = distance(p, s.p2);\n\tT ccc = fabs(outerProduct(a, b) / absolute(b));\n\tif (innerAB < zero) {\n\t\treturn distance(p, s.p1);\n\t}\n\telse if (innerc_b < zero) {\n\t\treturn distance(p, s.p2);\n\t}\n\telse {\n\t\treturn fabs(outerProduct(a, b) / absolute(b) );\n\t}\n}\n\ntemplate<typename T>\nbool intersects(const Segment<T>& s1, const Segment<T>& s2) {\n\tfunction<bool(Segment<T>, Segment<T>)> intersectsFromOneSegment//one segment : s1\n\t\t= [&](const Segment<T>& s1, const Segment<T>& s2){\n\t\t\tconst Point<T> a = s2.p1 - s1.p1;\n\t\t\tconst Point<T> c = s2.p2 - s1.p1;\n\t\t\tconst Point<T> b = s1.p2 - s1.p1;\n\t\t\t\n\t\t\treturn outerProduct(b, a) > 0 != outerProduct(b, c) > 0;\n\t};\n\treturn intersectsFromOneSegment(s1, s2) && intersectsFromOneSegment(s2, s1);\n}\n\ntemplate<typename T>\nT getDistanceFromSegmentToSegment(const Segment<T>& s1, const Segment<T>& s2) {\n\tif (intersects(s1, s2)) {\n\t\treturn static_cast<T>(0.0);\n\t}else{\n\t\treturn min(\n\t\t\tmin(getDistanceFromPointToSegment(s1.p1, s2), getDistanceFromPointToSegment(s1.p2, s2))\n\t\t\t, min(getDistanceFromPointToSegment(s2.p1, s1), getDistanceFromPointToSegment(s2.p2, s1))\n\t\t);\n\t}\n}\n\nint main()\n{\n\tint q; cin >> q;\n\tSegment<NUM> s1, s2;\n\tfor (int i = 0; i != q; ++i) {\n\t\treadSegment(s1);\n\t\treadSegment(s2);\n\t\tcout << fixed << setprecision(8) << getDistanceFromSegmentToSegment(s1, s2) << endl;\n\t}\n\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<vector>\n#include<algorithm>\n#include<utility>\n#include<numeric>\n#include<iostream>\n#include<array>\n#include<string>\n#include<sstream>\n#include<stack>\n#include<queue>\n#include<list>\n#include<functional>\n#define _USE_MATH_DEFINES\n\n#include<math.h>\n#include<map>\n\n#define INF 200000000\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef pair<ll, ll> pll;\ntypedef pair<ll, int> pli;\n\nstruct OwnVector2\n{\n\tdouble x, y;\n\tOwnVector2(double x,double y):x(x),y(y){}\n\tOwnVector2() :OwnVector2(0, 0) {}\n\tOwnVector2 operator+(const OwnVector2& v)const\n\t{\n\t\treturn OwnVector2(x + v.x, y + v.y);\n\t}\n\tOwnVector2 operator-(const OwnVector2& v)const\n\t{\n\t\treturn OwnVector2(x - v.x, y - v.y);\n\t}\n\tOwnVector2 operator*(const double v)const\n\t{\n\t\treturn OwnVector2(x*v, y*v);\n\t}\n\tbool operator==(const OwnVector2& v)const\n\t{\n\t\treturn abs(x - v.x) <= 0.0000000000001&&abs(y - v.y) <= 0.00000000000001;\n\t}\n\tbool operator!=(const OwnVector2& v)const\n\t{\n\t\treturn abs(x - v.x) > 0.0000000000001||abs(y - v.y) > 0.00000000000001;\n\t}\n\n\tdouble dot(const OwnVector2& v)const\n\t{\n\t\treturn x*v.x + y*v.y;\n\t}\n\tdouble cross(const OwnVector2& v)const\n\t{\n\t\treturn x*v.y - y*v.x;\n\t}\n\tdouble length()const\n\t{\n\t\treturn sqrt(x*x + y*y);\n\t}\n\tdouble length2()const\n\t{\n\t\treturn x*x + y*y;\n\t}\n};\n\ndouble CalcMinDistancePointVSSegment(OwnVector2 p1, OwnVector2 p2, OwnVector2 p3)\n{\n\tOwnVector2 p12, p13, p21, p23;\n\tp12 = p2 - p1; p13 = p3 - p1; p21 = p1 - p2; p23 = p3 - p2;\n\n\tif(p12.dot(p13)<0.0)\n\t{\n\t\treturn p13.length();\n\t}\n\n\tif (p21.dot(p23) < 0.0)\n\t{\n\t\treturn p23.length();\n\t}\n\n\treturn abs(p12.cross(p13)) / p12.length();\n}\n\nOwnVector2 CalcCrossPoint(OwnVector2 p1, OwnVector2 p2, OwnVector2 p3, OwnVector2 p4)\n{\n\tOwnVector2 p12, p13, p14, p34, p31, p32;\n\tp12 = p2 - p1; p13 = p3 - p1; p14 = p4 - p1; p34 = p4 - p3; p31 = p1 - p3; p32 = p2 - p3;\n\n\tdouble d, u, v;\n\n\td = p12.cross(p34);\n\n\tif (abs(d) <= 0.0000000000001)\n\t{\n\t\treturn OwnVector2(INF, INF);\n\t}\n\n\tu = p13.cross(p34) / d;\n\tv = p13.cross(p12) / d;\n\n\tif (u<0.0 || u>1.0)\n\t{\n\t\treturn OwnVector2(INF, INF);\n\t}\n\tif (v<0.0 || v>1.0)\n\t{\n\t\treturn OwnVector2(INF, INF);\n\t}\n\n\treturn p1 + p12*u;\n}\n\nint main()\n{\n\tcin.tie(0);\n\tios::sync_with_stdio(false);\n\n\tint q;\n\tcin >> q;\n\n\tfor (int i = 0; i < q; i++)\n\t{\n\t\tdouble x0, x1, x2, x3, y0, y1, y2, y3;\n\t\tcin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n\n\t\tOwnVector2 p0(x0, y0), p1(x1, y1), p2(x2, y2), p3(x3, y3);\n\n\t\tOwnVector2 crossPoint = CalcCrossPoint(p0, p1, p2, p3);\n\t\tif (crossPoint != OwnVector2(INF, INF))\n\t\t{\n\t\t\tprintf(\"%.10lf\\n\", 0.0);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tprintf(\"%.10lf\\n\", min(CalcMinDistancePointVSSegment(p0, p1, p2), CalcMinDistancePointVSSegment(p0, p1, p3)));\n\t\t}\n\t}\n\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <vector>\n#include <cmath>\n\nconst double EPSILON = 1e-10;\n\ninline bool equals(double a, double b) {\n    return std::fabs(a - b) < EPSILON;\n}\n\nstruct Point {\n    double x;\n    double y;\n\n    bool operator < (const Point& p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point& p) const {\n        return equals(x, p.x) && equals(y, p.y);\n    }\n};\n\nPoint operator + (const Point& p1, const Point& p2) {\n    return Point{p1.x + p2.x, p1.y + p2.y};\n}\n\nPoint operator - (const Point& p1, const Point& p2) {\n    return Point{p1.x - p2.x, p1.y - p2.y};\n}\n\nPoint operator * (const Point& p1, double k) {\n    return Point{p1.x * k, p1.y * k};\n}\n\nstruct Segment {\n    Point p1, p2;\n};\n\nstruct Circle {\n    Point center;\n    double radius;\n};\n\nusing Vector = Point;\nusing Line = Segment;\nusing Polygon = std::vector<Point>;\n\n\ndouble norm(const Vector& p) {\n    return p.x * p.x + p.y + p.y;\n}\n\ndouble abs(const Vector& p) {\n    return std::sqrt(norm(p));\n}\n\ndouble dot(const Vector& a, const Vector& b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(const Vector& a, const Vector& b) {\n    return a.x * b.y - a.y * b.x;\n}\n\n\nVector projection(const Segment& s, const Point& p) {\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / norm(base);\n    return s.p1 + base * r;\n}\n\nVector reflection(const Segment& s, const Point& p) {\n    auto proj = projection(s, p);\n    return p + (projection(s, p) - p) * 2.0;\n}\n\nbool is_orthogonal(const Vector& a, const Vector& b) {\n    return equals(dot(a, b), 0.0);\n}\n\nbool is_orthogonal(const Segment& s1, const Segment& s2) {\n    return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nbool is_parallel(const Vector& a, const Vector& b) {\n    return equals(cross(a, b), 0.0);\n}\n\nbool is_parallel(const Segment& s1, const Segment& s2) {\n    return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nenum {\n    COUNTER_CLOCKWISE = 1;\n    CLOCKWISE = -1;\n    ONLINE_BACK = 2;\n    ONLINE_FRONT = -1;\n    ON_SEGMENT = 0;\n}\n\nint ccw(const Point& p0, const Point& p1, const Point& p2) {\n    auto a = p1 - p0;\n    auto b = p2 - p0;\n    if (cross(a, b) > EPSILON) return COUNTER_CLOCKWISE;\n    if (cross(a, b) < -EPSILON) return CLOCKWISE;\n    if (dot(a, b) < -EPSILON) return ONLINE_BACK;\n    if (norm(a) < norm(b)) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\ndouble intersect(const Point& p1, const Point& p2, const Point& p3, const Point& p4) {\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n            ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\n\ndouble intersect(const Segment& s1, const Segment& s2) {\n    return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\ndouble distance(const Point& a, const Point& b) {\n    return abs(a - b);\n}\n\ndouble distanceLP(const Line& l, const Point& p) {\n    return abs(cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1));\n}\n\ndouble distanceSP(const Segment& s1, const Point& s2) {\n    if (dot(s.p2 - s.p1, p - s.p1) < 0.0) return abs(p - s.p1);\n    if (dot(s.p1 - s.p2, p - s.p2) < 0.0) return abs(p - s.p2);\n    return distanceLP(s, p);\n}\n\ndouble distance(const Segment& s1, const Segment& s2) {\n    if (intersect(s1, s2)) return 0.0;\n    return min(min(distanceSP(s1, s2.p1), distanceSP(s1, s2.p2)),\n               min(distanceSP(s2, s1.p1), distanceSP(s2, s1.p2)));\n}\n\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n\nusing namespace std;\n\nint main() {\n    int q;\n    cin >> q;\n    for (int i = 0; i < q; ++i) {\n        array<Point, 4> points;\n        for (auto& p : points) {\n            cin >> p.x >> p.y;\n        }\n        Segment s1{points[0], points[1]};\n        Segment s2{points[2], points[3]};\n        cout << distance(s1, s2) << endl;\n    }\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i,a,n) for(int i=(a);i<(n);i++)\n#define per(i,a,n) for(int i=(n)-1;i>=(a);i--)\n#define MP make_pair\n\ntypedef double db;\n\nconst db EPS = 1e-8;\n\ninline int sign(db a) {\n\treturn a < -EPS ? -1 : a > EPS;\n}\n\ninline int cmp(db a, db b){\n\treturn sign(a-b);\n}\n\nstruct P {\n\tdb x, y;\n\tP() {\n\t}\n\tP(db _x, db _y) :\n\t\t\tx(_x), y(_y) {\n\t}\n\tP operator+(P p) {\n\t\treturn P(x + p.x, y + p.y);\n\t}\n\tP operator-(P p)  {\n\t\treturn P(x - p.x, y - p.y);\n\t}\n\tP operator*(db d) {\n\t\treturn P(x * d, y * d);\n\t}\n\tP operator/(db d) {\n\t\treturn P(x / d, y / d);\n\t}\n\tbool operator<(P p) const {\n\t\tint c = sign(x - p.x);\n\t\tif (c)\n\t\t\treturn c == -1;\n\t\treturn sign(y - p.y) == -1;\n\t}\n\tdb dot(P p) {\n\t\treturn x * p.x + y * p.y;\n\t}\n\tdb det(P p) {\n\t\treturn x * p.y - y * p.x;\n\t}\n\tdb distTo(P p) { return (*this-p).abs(); }\n\n\tdb alpha() {\n\t\treturn atan2(y, x);\n\t}\n\tvoid read() {\n\t\tcin>>x>>y;\n\t}\n\tdb abs() {\n\t\treturn sqrt(abs2());\n\t}\n\tdb abs2() {\n\t\treturn x * x + y * y;\n\t}\n\tP rot90(){\n\t\treturn P(-y,x);\n\t}\n};\n\n#define cross(p1,p2,p3) ((p2.x-p1.x)*(p3.y-p1.y)-(p3.x-p1.x)*(p2.y-p1.y))\n#define crossOp(p1,p2,p3) sign(cross(p1,p2,p3))\n\nP isLL(P p1, P p2, P q1, P q2) {\n\tdb a1 = cross(q1, q2, p1), a2 = -cross(q1, q2, p2);\n\treturn (p1 * a2 + p2 * a1) / (a1 + a2);\n}\n\nbool intersect(db l1,db r1,db l2,db r2){\n\tif(l1>r1) swap(l1,r1); if(l2>r2) swap(l2,r2); \n\treturn !( cmp(r1,l2) == -1 || cmp(r2,l1) == -1 );\n}\n\nbool isSS(P p1, P p2, P q1, P q2){\n    return intersect(p1.x,p2.x,q1.x,q2.x) && intersect(p1.y,p2.y,q1.y,q2.y) && \n    crossOp(p1,p2,q1) * crossOp(p1,p2,q2) <= 0 && crossOp(q1,q2,p1)\n            * crossOp(q1,q2,p2) <= 0;\n}\n\nbool isMiddle(db a, db m, db b) {\n    return sign(a - m) == 0 || sign(b - m) == 0 || (a < m != b < m);\n}\n \nbool isMiddle(P a, P m, P b) {\n    return isMiddle(a.x, m.x, b.x) && isMiddle(a.y, m.y, b.y);\n}\n\nbool onSegment(P p1, P p2, P q){\n\treturn crossOp(p1,p2,q) == 0 && isMiddle(p1, q, p2);\n}\n\nP proj(P p1, P p2, P q) {\n    P dir = p2 - p1;\n    return p1 + dir * (dir.dot(q - p1) / dir.abs2());\n}\n\nP reflect(P p1, P p2, P q){\n\treturn proj(p1,p2,q) * 2 - q;\n}\n\ndb nearest(P p1,P p2,P q){\n\tP h = proj(p1,p2,q);\n\tif(isMiddle(p1,h,p2))\n\t\treturn q.distTo(h);\n\treturn min(p1.distTo(q),p2.distTo(q));\n}\n\ndb disSS(P p1, P p2, P q1, P q2){\n\tif(isSS(p1,p2,q1,q2)) return 0;\n\treturn min(min(nearest(p1,p2,q1),nearest(p1,p2,q2)), min(nearest(q1,q2,p1),nearest(q1,q2,p2)) );\n}\n\ndb getrad(P p1,P p2){\n\treturn atan2l(p1.det(p2),p1.dot(p2));\n}\n\ndb incircle(P p1, P p2, P p3){\n\tdb A = p1.distTo(p2);\n\tdb B = p2.distTo(p3);\n\tdb C = p3.distTo(p1);\n\treturn sqrtl(A*B*C/(A+B+C));\n}\n\nint main(){\n\tint n;cin>>n;\n\trep(i,0,n){\n\t\tP p1,p2,q1,q2;\n\t\tp1.read(),p2.read(),q1.read(),q2.read();\n\t\tprintf(\"%0.10f\\n\", disSS(p1,p2,q1,q2));\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i,n) for(int i=0;i<n;++i)\ntypedef complex<double> Point;\n#define X real()\n#define Y imag()\nconst double EPS = 1e-9;\n#define EQ(n,m) (abs((n)-(m)) < EPS)\n\n// ?????????dot(a,b) = |a||b|cos??\ndouble dot(Point a, Point b) {\n  return a.X*b.X + a.Y*b.Y;\n}\n\n// ?????????cross(a,b) = |a||b|sin??\ndouble cross(Point a, Point b) {\n  return a.X*b.Y - a.Y*b.X;\n}\n\n// ??????????????????\nint ccw(Point a, Point b, Point c) {\n  b -= a;  c -= a;\n  if (cross(b,c) >  EPS) return +1;  // counter clockwise\n  if (cross(b,c) < -EPS) return -1;  // clockwise\n  if (dot(b,c)   < -EPS) return +2;  // c--a--b on line\n  if (norm(b) < norm(c)) return -2;  // a--b--c on line or a==b\n  return 0;                          // a--c--b on line or a==c or b==c\n}\n\nPoint proj(Point a1, Point a2, Point p) {\n  return a1 + dot(a2-a1, p-a1)/norm(a2-a1) * (a2-a1);\n}\n\nbool isecSS(Point a1, Point a2, Point b1, Point b2) {\n  return ccw(a1, a2, b1)*ccw(a1, a2, b2) <= 0 &&\n         ccw(b1, b2, a1)*ccw(b1, b2, a2) <= 0;\n}\n\n// ????????¨???\nbool isecSP(Point a1, Point a2, Point b) {\n  return !ccw(a1, a2, b);\n}\n\ndouble distSP(Point a1, Point a2, Point p) {\n  Point r = proj(a1, a2, p);\n  if (isecSP(a1, a2, r)) return abs(r-p);\n  return min(abs(a1-p), abs(a2-p));\n}\n\ndouble distSS(Point a1, Point a2, Point b1, Point b2) {\n  if (isecSS(a1, a2, b1, b2)) return 0;\n  return min(min(distSP(a1, a2, b1), distSP(a1, a2, b2)),\n             min(distSP(b1, b2, a1), distSP(b1, b2, a2)));\n}\n\nint main(void){\n\tint q;\n\tcin>>q;\n\trep(i,q){\n\t\tdouble x0,y0,x1,y1,x2,y2,x3,y3;\n\t\tcin>>x0>>y0>>x1>>y1>>x2>>y2>>x3>>y3;\n\t\tprintf(\"%.9f\\n\",distSS({x0,y0},{x1,y1},{x2,y2},{x3,y3}));\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "// C++ 14\n#include <math.h>\n#include <iostream>\n#include <vector>\n#include <list>\n#include <algorithm>\n#include <queue>\n#include <stack>\n#include <set>\n#include <map>\n#include <unordered_map>\n\n#define ll long long\n#define Int ll\n#define loop(x, start, end) for(Int x = start; x < end; x++)\n#define loopdown(x, start, end) for(int x = start; x > end; x--)\n#define span(a,x,y) a.begin()+x,a.begin()+y\n#define span_all(a) a.begin(),a.end()\n#define len(x) (x.size())\n#define last(x) (*(x.end()-1))\n\nusing namespace std;\n\n#define EPS 0.000000001\n#define fequals(a,b) (fabs((a) - (b)) < EPS)\n\nclass Vector2 {\npublic:\n  double x, y;\n  \n  Vector2(double x = 0, double y = 0): x(x), y(y) {}\n  \n  Vector2 operator + (const Vector2 v) const { return Vector2(x + v.x, y + v.y); }\n  Vector2 operator - (const Vector2 v) const { return Vector2(x - v.x, y - v.y); }\n  Vector2 operator * (const double k) const { return Vector2(x * k, y * k); }\n  Vector2 operator / (const double k) const { return Vector2(x / k, y / k); }\n  \n  double length() { return sqrt(norm()); }\n  double norm() { return x * x + y * y; }\n  double dot (Vector2 const v) { return x * v.x + y * v.y; }\n  double cross (Vector2 const v) { return x * v.y - y * v.x; }\n  \n  bool parallel(Vector2 &other) {\n    return fequals(fabs(dot(other)), length() * other.length());\n  }\n  \n  bool orthogonal(Vector2 &other) {\n    return fequals(0, dot(other));\n  }\n  \n  bool operator < (const Vector2 &v) {\n    return x != v.x ? x < v.x : y < v.y;\n  }\n  \n  bool operator == (const Vector2 &v) {\n    return fabs(x - v.x) < EPS && fabs(y - v.y) < EPS;\n  }\n};\n\nostream & operator << (ostream & out, Vector2 const & v) { \n  out<< \"Vector2(\" << v.x << \", \" << v.y << ')';\n  return out;\n}\n\nistream & operator >> (istream & in, Vector2 & v) { \n  double x, y;\n  in >> x;\n  in >> y;\n  v.x = x;\n  v.y = y;\n  return in;\n}\n\ndouble p2Seg(Vector2 start_, Vector2 end_, Vector2 p) {\n  if ((p - start_).dot(end_ - start_) < 0.0) return (p - start_).length();\n  if ((p - end_).dot(start_ - end_) < 0.0) return (p - end_).length();\n  return abs((end_ - start_).cross(p - start_)) / (end_ - start_).length();\n}\n\n\ndouble distance(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4) {\n  double t3 = (p1.x - p2.x) * (p3.y - p1.y) + (p1.y - p2.y) * (p1.x - p3.x);\n  double t4 = (p1.x - p2.x) * (p4.y - p1.y) + (p1.y - p2.y) * (p1.x - p4.x);\n  double t1 = (p3.x - p4.x) * (p1.y - p3.y) + (p3.y - p4.y) * (p3.x - p1.x);\n  double t2 = (p3.x - p4.x) * (p2.y - p3.y) + (p3.y - p4.y) * (p3.x - p2.x);\n  if (t3 * t4 < 0 && t1 * t2 < 0) return 0.0;\n  double min_ = -1;\n  min_ = min<double>(p2Seg(p1, p2, p3), p2Seg(p1, p2, p4));\n  min_ = min<double>(min_, p2Seg(p3, p4, p1));\n  min_ = min<double>(min_, p2Seg(p3, p4, p2));\n  return min_;\n}\n\n#define MAX_N 1001\nInt N;\nVector2 p1, p2, p3, p4;\n\nvoid input() {\n  cin >> N;\n  while (cin >> p1 >> p2 >> p3 >> p4) {\n    cout << distance(p1, p2, p3, p4) << endl;\n  }\n}\n\nint main() {\n  cout.precision(15);\n  input();\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n#define eps 0\ntypedef complex<double> C;\ntypedef struct{\n\tdouble x,y;\n\t\n}point;\ntypedef struct{\npoint a,b;\n}line;\n\nC convert(point a){\n\treturn C(a.x,a.y);\n}\npoint convert(C a){\n\treturn {a.real(),a.imag()};\n}\n\nline make(point a,point b){\n\tline res; res.a=a; res.b=b;\n\treturn res;\n}\n\npoint make(double x,double y){\n\tpoint res;\n\tres.x=x;\n\tres.y=y;\n\treturn res;\n}\n//a-b\npoint vec(point a,point b){\n\tpoint res;\n\tres.x=a.x-b.x;\n\tres.y=a.y-b.y;\n\treturn res;\n}\n\n// a・b\ndouble dot(point a,point b){\n\treturn a.x*b.x+a.y*b.y;\n}\n//|a|\ndouble  norm(point a){\nreturn sqrt(dot(a,a));\n}\n//|a|^2\ndouble absolute(point a){\nreturn dot(a,a);\n}\n//a×ｂ　外積z成分\ndouble cross(point a,point b){\nreturn a.x*b.y-a.y*b.x;\n}\n//a=x1+iy1,b=x2+iy2 a*b\npoint imaseki(point a,point b){\npoint res;\nres.x=a.x*b.x-a.y*b.y;\nres.y=a.x*b.y+a.y*b.x;\nreturn res;\n}\n//vec * a\npoint product(point v,double a){\n\tpoint res; res.x=v.x*a; res.y=v.y*a;\n\treturn res;\n}\n\n//共役\npoint conjugate(point a){\npoint res;\nres.x=a.x;\nres.y=-a.y;\nreturn res;\n}\n\n\nint ccw(point p0,point p1,point p2){\npoint a=vec(p1,p0);\npoint b=vec(p2,p0);\n\tif(cross(a,b)>eps){\n\treturn 1;//counter_clockwise\n\t}else if(cross(a,b)<eps){\n\treturn -1;//clockwise\n\t}else if(dot(a,b)<-eps){\n\treturn 2;//online_back\n\t}else if(absolute(a)<absolute(b)){\n\treturn -2;//online_front\n\t}else{\n\treturn 0;//on_segment\n\t}\n\n}\n//交差判定　s1-s2 s3-s4\nbool intersect(point s1,point s2,point s3,point s4){\n if(ccw(s1,s2,s3)*ccw(s1,s2,s4)<=0 && ccw(s3,s4,s1)*ccw(s3,s4,s2)<=0)\n        return true;\n    return false;\n}\nbool intersect(line l1,line l2){\n\treturn intersect(l1.a,l1.b,l2.a,l2.b);\n}\n//交点\npoint crosspoint(line l1,line l2){\n\tpoint veca=vec(l1.b,l1.a);\n\tpoint vecb=vec(l2.b,l2.a);\n\tdouble d= cross(veca,vecb);\n\tdouble e= cross(vecb,vec(l2.b,l1.a));\n\treturn vec(l1.a,product(veca,e/d));\n\n}\n\n//距離　point-point \ndouble distance (point a,point b){\nreturn norm(vec(a,b));\n}\n//距離 point-line\ndouble distance(line l,point p){\nreturn abs(cross(vec(p,l.a),vec(l.b,l.a))/norm(vec(l.b,l.a)));\n}\n//距離　line-line\ndouble distance(line a,line b){\n\tif(intersect(a,b))return 0;\n\tdouble m= distance(a.a,b.a);\n\tm=min(m,distance(a.a,b.b));\n\tm=min(m,distance(a.b,b.a));\n\tm=min(m,distance(a.b,b.b));\n\treturn m;\n}\n\nint main(){\n\tint q;\n\tcin>>q;\n\tfor(int i=0;i<q;i++){\n\tdouble x,y;\n\tpoint p0,p1,p2,p3;\n\tline l0,l1;\n\tcin>>x>>y;\n\tp0=make(x,y);\n\tcin>>x>>y;\n\tp1=make(x,y);\n\tcin>>x>>y;\n\tp2=make(x,y);\n\tcin>>x>>y;\n\tp3=make(x,y);\n\tl0=make(p0,p1);\n\tl1=make(p2,p3);\n\tprintf(\"%0.10lf\\n\",distance(l0,l1));\n\n\t}\nreturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\n#include <cmath>\n#include <iomanip>\n#include <stack>\n#include <queue>\n#include <vector>\n#include <algorithm>\n\n\nusing namespace std;\n\n//-------------------------------------------------------------------------------------\n/*2点[(x1,y1),(x2,y2)]を入力し二点を通る直線ax+by+cの(a,b,c)を返す,  */\n/*x1==x2ならfalseを返す*/\n/*falseならばx=cの形の直線*/\nvoid straight_line_passing_through_the_two_points(double x1, double y1, double x2, double y2, double *a, double *b, double *c){\n    *a=(y2-y1);\n    *b=-(x2-x1);\n    *c=y2*(x2-x1)-x2*(y2-y1);\n}\n\n//-------------------------------------------------------------------------------------\n/*(x,y)を通るa1x+b1y+c1=0に垂直な直線a2x+b2y+c2=0を返す*/\nbool vertical_straight_line(double x, double y, double a1, double b1, double c1, double *a2, double *b2, double *c2){\n    if(a1*x+b1*y+c1==0)return false;\n    *a2 = -b1;\n    *b2 = a1;\n    *c2 = b1*x - a1*y;\n    return true;\n}\n\n\n//-------------------------------------------------------------------------------------\n/*2直線 a1x+b1y+c1=0 a2x+b2y+c2=0 の交点 (x,y)を返す*/\n/*2直線が平行であるならば0を返す*/\nint intersection_and_parallel(double a1, double b1, double c1, double a2, double b2, double c2, double *x, double *y){\n\n    \n    if(a1*b2==a2*b1)return false;//平行の判定\n    *x = (b1*c2-b2*c1)/(a1*b2-a2*b1);\n    *y = (a2*c1-a1*c2)/(a1*b2-a2*b1);\n    \n    return true;\n}\n\n//-------------------------------------------------------------------------------------\n/* \n a1x+b1y+c1=0 と　a2x+b2y+c2=0 が\n 平行なら2\n 直交なら1\n それ以外は0\n を返す\n */\nint judges_whether_parallel_or_perpendicular(double a1, double b1, double c1, double a2, double b2, double c2){\n    if(a1*b2 == a2*b1)return 2;\n    if(a1*a2 + b1*b2 == 0)return 1;\n    return 0;\n}\n\n\n//-------------------------------------------------------------------------------------\n/*直線ax+by+c=0に対し　(x1,y1)と線対称な位置(x2,y2)を出力*/\n/*vertical_straight_lineを使用*/\n/*intersection_and_parallelを使用*/\nvoid line_symmetry(double a, double b, double c, double x1, double y1, double *x2, double *y2){\n    if(a*x1+b*y1+c==0){//(x1,y1)が直線上にある.\n        *x2=x1;\n        *y2=y1;\n        return;\n    }\n    \n    //垂直な直線を求める\n    double a2,b2,c2;\n    vertical_straight_line(x1, y1, a, b, c, &a2, &b2, &c2);\n    \n    //垂直な直線との交点を求める\n    double c_x, c_y;\n    intersection_and_parallel(a, b, c, a2, b2, c2, &c_x, &c_y);\n    *x2 = x1 + 2*(c_x-x1);\n    *y2 = y1 + 2*(c_y-y1);\n}\n\n\n\n//-------------------------------------------------------------------------------------\n/*2点(x1,y1), (x2,y2) の距離*/\ndouble distance_between_the_two_pointss(double x1,double y1, double x2, double y2){\n    return  sqrt(fabs((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)));\n}\n\n\n//-------------------------------------------------------------------------------------\n/* (x1,y1)から(x2,y2)へ伸ばした直線の角度を求める  */\n/*-π　〜　+π　まで*/\ndouble angle_of_the_line(double x1, double y1, double x2, double y2){\n    if(x1==x2&&y1==y2)return 0.0;\n    return atan2(y2-y1, x2-x1);\n}\n\n//-------------------------------------------------------------------------------------\n/*(x1,y1)と(x2,y2)を両端に持つ線分と*/\n/*(x3,y3)と(x4,y4)を両端に持つ線分が*/\n/*交差するなら1 交差しないなら0を出力する*/\n/* straight_line_passing_through_the_two_pointsを使用 */\n/* intersection_and_parallelを使用 */\nint line_segment_cross_decision(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4){\n    double a1,b1,c1, a2,b2,c2;\n    straight_line_passing_through_the_two_points(x1, y1, x2, y2, &a1, &b1, &c1);\n    straight_line_passing_through_the_two_points(x3, y3, x4, y4, &a2, &b2, &c2);\n    double c_x,c_y;\n    bool is_parallel = intersection_and_parallel(a1, b1, c1, a2, b2, c2, &c_x, &c_y);\n    //cout<<a1<<\" \"<<b1<<\" \"<<c1<<endl;\n    //cout<<a2<<\" \"<<b2<<\" \"<<c2<<endl;\n    if(is_parallel==false){\n        if( (a1*b2==b1*a2&&c1==c2) || (a1==0 && (b1*c2)==(c1*b2)) || (b1==0 && (a1*c2)==(c1*a2)) ){//一直線上にある.\n            //cout<<1111;\n            if(min(x1,x2)<=x3&&x3<=max(x1,x2)&&min(y1,y2)<=y3&&y3<=max(y1,y2))return 1;\n            if(min(x1,x2)<=x4&&x4<=max(x1,x2)&&min(y1,y2)<=y4&&y4<=max(y1,y2))return 1;\n            if(min(x3,x4)<=x1&&x1<=max(x3,x4)&&min(y3,y4)<=y1&&y1<=max(y3,y4))return 1;\n            if(min(x3,x4)<=x2&&x2<=max(x3,x4)&&min(y3,y4)<=y2&&y2<=max(y3,y4))return 1;\n            \n\n\n        }\n        return 0;\n    }\n    if(x1>x2)swap(x1, x2);\n    if(x3>x4)swap(x3, x4);\n    if(y1>y2)swap(y1, y2);\n    if(y3>y4)swap(y3, y4);\n\n    if(x1<=c_x&&c_x<=x2&&x3<=c_x&&c_x<=x4){\n        if(y1<=c_y&&c_y<=y2&&y3<=c_y&&c_y<=y4)return 1;\n    }\n    return 0;\n    \n}\n\n\n\n//-------------------------------------------------------------------------------------\n/*点(p_x,p_y)と線分(x1,y1)(x2,y2)の距離*/\n/* straight_line_passing_through_the_two_points */\n/* vertical_straight_line */\n/* intersection_and_parallel */\ndouble distance_between_the_line_segment_and_point(double p_x, double p_y, double x1, double y1, double x2, double y2){\n    double a,b,c;//(x1,y1)(x2,y2)を通る直線\n    straight_line_passing_through_the_two_points(x1, y1, x2, y2, &a, &b, &c);\n    double a2,b2,c2;//直線ax+by+c=0に垂直な直線\n    double v_x, v_y;//二つの直線の交点\n    bool is_not_parallel = vertical_straight_line(p_x, p_y, a, b, c, &a2, &b2, &c2);\n    intersection_and_parallel(a, b, c, a2, b2, c2, &v_x, &v_y);\n    \n    if(is_not_parallel){\n        if(min(x1,x2)<=v_x&&v_x<=max(x1,x2)&&min(y1,y2)<=v_y&&v_y<=max(y1,y2)){//(v_x,v_y)は線分の中にある\n            //cout<<\"a \";\n            return distance_between_the_two_pointss(p_x, p_y, v_x, v_y);\n        }else{//(v_x,v_y)は線分の外にある\n            double l1 = distance_between_the_two_pointss(p_x, p_y, x1, y1);\n            double l2 = distance_between_the_two_pointss(p_x, p_y, x2, y2);\n            //cout<<\"b \";\n            return min(l1,l2);\n        }\n    }else{\n        if(min(x1,x2)<=p_x&&p_x<=max(x1,x2)&&min(y1,y2)<=p_y&&p_y<=max(y1,y2)){//(p_x,p_y)は線分の中にある\n            //cout<<\"c \";\n            return 0.0;\n        }else{//(p_x,p_y)は線分の外にある\n            double l1 = distance_between_the_two_pointss(p_x, p_y, x1, y1);\n            double l2 = distance_between_the_two_pointss(p_x, p_y, x2, y2);\n            //cout<<\"d \";\n            return min(l1,l2);\n        }\n    }\n    \n}\n\n\n//-------------------------------------------------------------------------------------\n/*線分(x1,y1)(x2,y2)と線分(x3,y3)(x4,y4)の距離*/\n\ndouble distance_between_two_line_segment(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4){\n    //同一直線上にある場合\n    \n    //ぶつかる場合\n    if(line_segment_cross_decision(x1, y1, x2, y2, x3, y3, x4, y4)){\n        return 0.0;\n    }\n    \n    //ぶつからない場合\n    double l1,l2,l3,l4;\n    l1=distance_between_the_line_segment_and_point(x1, y1, x3, y3, x4, y4);\n    //cout<<l1<<endl;\n    l2=distance_between_the_line_segment_and_point(x2, y2, x3, y3, x4, y4);\n    //cout<<l2<<endl;\n\n    l3=distance_between_the_line_segment_and_point(x3, y3, x1, y1, x2, y2);\n    //cout<<l3<<endl;\n    l4=distance_between_the_line_segment_and_point(x4, y4, x1, y1, x2, y2);\n    \n        \n    //cout<<l4<<endl;\n    \n    return min(l1,min(l2,min(l3,l4)));\n}\n\n//-------------------------------------------------------------------------------------\n/*多角形の面積*/\n/*頂点数n　頂点の集合 */\ndouble area_of_the_polygon(int n, double p_xy[10000][2]){\n    double s=0.0;\n    for(int i=0; i<n; i++){\n        s+=(p_xy[i][0]-p_xy[(i+1)%n][0])*(p_xy[i][1]+p_xy[(i+1)%n][1])/2;\n    }\n    return s;\n}\n\n\n//-------------------------------------------------------------------------------------\n/*角abcの角度　a(xa,ya), b(xb,yb), c(xc,yc),*/\n/*2辺の角度*/\n/*aとb　またはbとcが重なっていればPIを返す*/\ndouble angle_of_the_two_edges(double ax, double ay, double bx, double by, double cx, double cy){\n    if(ax==bx&&ay==by)return M_PI;\n    if(cx==bx&&cy==by)return M_PI;\n    \n    double angle1 = angle_of_the_line(ax, ay, bx, by);\n    double angle2 = angle_of_the_line(bx, by, cx, cy);\n    \n    double ret = angle1+(M_PI-angle2);\n    if(ret>M_PI * 2)ret -= M_PI * 2;\n    if(ret<0)ret += M_PI * 2;\n    return /*2*M_PI- */ret;\n    \n}\n\n//-------------------------------------------------------------------------------------\n/*多角形に対する点の内外判定*/\n/* n頂点の多角形p_xy[n]に対して点(x,y)の内外判定を行う*/\n/* 内なら2 線上なら1 外なら0*/\nint inside_and_outside_the_determination_of_the_polygon_and_point(int n, double p_xy[10000][2], double x, double y){\n    //点が線分上にあるか\n    for(int i=0; i<n; i++){\n        double l = distance_between_the_line_segment_and_point(x, y, p_xy[i][0], p_xy[i][1], p_xy[(i+1)%n][0], p_xy[(i+1)%n][1]);\n        if(l==0.0)return 1;\n    }\n    \n    //点が中にあるか外にあるか\n    int ans = 0;\n    for(int i=0; i<n; i++){\n        if(p_xy[i][0]!=p_xy[(i+1)%n][0]){\n            ans += line_segment_cross_decision(p_xy[i][0], p_xy[i][1], p_xy[(i+1)%n][0], p_xy[(i+1)%n][1], x, y, x, y+1000000.0);\n            \n            if(distance_between_the_line_segment_and_point(p_xy[i][0], p_xy[i][1],x, y, x, y+1000000.0)==0.0){\n                if(p_xy[i][0]>p_xy[(i+1)%n][0])ans--;\n            }\n            if(distance_between_the_line_segment_and_point(p_xy[(i+1)%n][0], p_xy[(i+1)%n][1],x, y, x, y+1000000.0)==0.0){\n                if(p_xy[i][0]<p_xy[(i+1)%n][0])ans--;\n            }\n        }\n        \n    }\n    //cout<<\" \"<<ans<<\" \";\n    if(ans%2==0)return 0;\n    else return 2;\n}\n//-------------------------------------------------------------------------------------\n/*二点の角度*/\n/*0~2π*/\ndouble angle_line_0_359(double x1, double y1, double x2, double y2){\n    if(x1==x2&&y1==y2)return 0.0;\n    \n    \n    double angle = atan2(y2-y1, x2-x1);\n    if(angle<0)angle = 2*M_PI+angle;\n    return angle;\n}\n\n//-------------------------------------------------------------------------------------\n/*二辺の角度*/\n/*反時計回りの内側*/\n/*0~2π*/\ndouble angle_two_line_0_359(double x1, double y1, double x2, double y2, double x3, double y3){\n    if(x1==x2&&y1==y2)return 0.0;\n    if(x3==x2&&y3==y2)return 0.0;\n    \n    double angle = atan2(y2-y1, x2-x1);\n    if(angle<0)angle = 2*M_PI+angle;\n    if(angle==2*M_PI)angle=0.0;\n    \n    double angle2 = atan2(y3-y2, x3-x2);\n    if(angle2<0)angle2 = 2*M_PI+angle2;\n    if(angle2==2*M_PI)angle2=0.0;\n    \n    double ret = 2*M_PI-( angle+(M_PI-angle2) );\n    if(ret<0)ret+=2*M_PI;\n    if(ret>=2*M_PI)ret-=2*M_PI;\n    \n    \n    \n    return ret;\n}\n\n//-------------------------------------------------------------------------------------\n/*二次元配列のクイックソート*/\n/*xoryが0ならx座標　1なら座標でソート*/\nvoid two_dimensional_qsort(double xy[100000][2], int left, int right, int xory)\n{\n    int i, j;\n    double pivot,pivot2;\n    \n    i = left;                      /* ソートする配列の一番小さい要素の添字 */\n    j = right;                     /* ソートする配列の一番大きい要素の添字 */\n    \n    pivot = xy[(left + right) / 2][xory]; /* 基準値を配列の中央付近にとる */\n    pivot2 = xy[(left + right) / 2][(xory+1)%2];\n    \n    \n    while (1) {                    /* 無限ループ */\n        \n        while (xy[i][xory] < pivot || (xy[i][xory] == pivot && xy[i][(xory+1)%2] < pivot2))       /* pivot より大きい値が */\n            i++;                   /* 出るまで i を増加させる */\n        \n        while (pivot < xy[j][xory] || (xy[j][xory] == pivot &&  pivot2 < xy[j][(xory+1)%2]))       /* pivot より小さい値が */\n            j--;                   /*  出るまで j を減少させる */\n        if (i >= j)                /* i >= j なら */\n            break;                 /* 無限ループから抜ける */\n        \n        swap(xy[i][xory], xy[j][xory]);            /* x[i] と x[j]を交換 */\n        swap(xy[i][(xory+1)%2], xy[j][(xory+1)%2]);            /* x[i] と x[j]を交換 */\n        i++;                       /* 次のデータ */\n        j--;\n    }\n    \n    if (left < i - 1)              /* 基準値の左に 2 以上要素があれば */\n        two_dimensional_qsort(xy, left, i - 1, xory);     /* 左の配列を Q ソートする */\n    if (j + 1 <  right)            /* 基準値の右に 2 以上要素があれば */\n        two_dimensional_qsort(xy, j + 1, right, xory);    /* 右の配列を Q ソートする */\n}\n\n\n//-------------------------------------------------------------------------------------\n/*凸包*/\n/*２次元平面における点の集合Pに対する凸包（convex hull）を求めて下さい。凸包とは点集合Pの全ての点を含む最小の凸多角形です。*/\n/*集合の要素数 n*/\n/*集合 p_xy[1000000][2]*/\n/*解答の要素数 q*/\n/*解答 ans[1000000][2]　最も下の最も左から反時計回り*/\n\nvoid convex_hull(int n, double p_xy[100000][2], int *q, double ans[100000][2]){\n\n    two_dimensional_qsort(p_xy, 0, n-1, 1);\n    /*\n    for(int i=0; i<n; i++){\n        cout<<p_xy[i][0]<<\" \"<<p_xy[i][1]<<endl;\n    }\n     */\n    \n    \n    int k=0;\n    for(int i=0; i<n; i++){\n        while(k > 1 && (angle_two_line_0_359(ans[k-2][0], ans[k-2][1], ans[k-1][0], ans[k-1][1], p_xy[i][0], p_xy[i][1])>M_PI))k--;\n        ans[k][0]=p_xy[i][0];\n        ans[k][1]=p_xy[i][1];\n        k++;\n    }\n    \n    \n    int t=k;\n    for(int i=n-2; i>=0; i--){\n        while(k > t && (angle_two_line_0_359(ans[k-2][0], ans[k-2][1], ans[k-1][0], ans[k-1][1], p_xy[i][0], p_xy[i][1])>M_PI))k--;\n        ans[k][0]=p_xy[i][0];\n        ans[k][1]=p_xy[i][1];\n        k++;\n    }\n    *q=k-1;\n}\n//-------------------------------------------------------------------------------------\n/*点の集合(凸多角形)の最遠点距離*/\ndouble diameter_of_the_polygon(int n, double p_xy[100000][2]){\n    double ch[100000][2];\n    int q;\n    convex_hull(n, p_xy, &q, ch);\n    \n    \n    int i=0;\n    int j=0;\n    for(int k=0; k<q; k++){\n        if(ch[j][1]<ch[k][1]){\n            j=k;\n        }\n    }\n    \n    int si=i;\n    int sj=j;\n    double res =  distance_between_the_two_pointss(ch[si][0], ch[si][1], ch[sj][0], ch[sj][1]);\n    while(1){\n        if(i==sj||j==si)break;\n        \n        double cross = (ch[(si+1)%n][0]-ch[si][0])*(ch[(sj+1)%n][1]-ch[sj][1]) - (ch[(si+1)%n][1]-ch[si][1])*(ch[(sj+1)%n][0]-ch[sj][0]);\n        //cout<<cross<<endl;\n        \n        if(cross<0){\n            si=(si+1)%n;\n            //res = max(res,a);\n        }else{\n            sj=(sj+1)%n;\n            //res = max(res,b);\n        }\n        \n        res =  max(res,distance_between_the_two_pointss(ch[si][0], ch[si][1], ch[sj][0], ch[sj][1]));\n                                                    \n        \n    }\n    \n    return res;\n}\n//-------------------------------------------------------------------------------------\n/*点の集合の最近点距離*/\n/*使用前に sort(a, a+n); をおこなう*/\n/*使用注意 他と仕様が違う*/\n/*点にpairを使っている*/\n\n\nbool compare_y(pair<double, double> a,pair<double, double> b){\n    return a.second<b.second;\n}\n\ndouble length_of_the_nearest_point_to(pair<double, double> a[100000], int n){\n    if(n<=1)return 999999999.9;\n    int m=n/2;\n    double x=a[m].first;\n    double d=min(length_of_the_nearest_point_to(a, m), length_of_the_nearest_point_to(a+m, n-m));\n    //inplace_merge(a, a+m, a+n, compare_y);\n    sort(a, a+n, compare_y);\n    vector<pair<double, double> >b;\n    for(int i=0; i<n; i++){\n        if(fabs(a[i].first-x)>=d)continue;\n        for(int j=0; j<b.size(); j++){\n            double dx=a[i].first-b[b.size()-j-1].first;\n            double dy=a[i].second-b[b.size()-j-1].second;\n            if(dy>=d)break;\n            d=min(d,sqrt(dx*dx+dy*dy));\n            \n        }\n        b.push_back(a[i]);\n    }\n    return d;\n}\n                                      \n//-------------------------------------------------------------------------------------\n/* 2点(x1,y1) (x2,y2)を通る直線に点(px,py)から引いた垂線の直線との交点(x, y)を返す */\nvoid intersection_of_the_normal_to_the_straight_line_passing_through_the_two_points(double px,double py,double x1, double y1,double x2, double y2,double *x, double *y){\n    double a,b,c;\n    straight_line_passing_through_the_two_points(x1, y1, x2, y2, &a, &b, &c);\n    *x = px-(a*px+b*py+c)/(a*a+b*b)*a;\n    *y = py-(a*px+b*py+c)/(a*a+b*b)*b;\n}\n\n//-------------------------------------------------------------------------------------\n/*(x1,y1)と(x2,y2)を両端に持つ線分と*/\n/*(x3,y3)と(x4,y4)を両端に持つ線分が*/\n/*一点で交差するなら1を返し(x,y)を返す 交差しないなら0を出力する*/\n/* straight_line_passing_through_the_two_pointsを使用 */\n/* intersection_and_parallelを使用 */\nint line_segment_cross_decision2(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4, double *x, double *y){\n    double a1,b1,c1, a2,b2,c2;\n    straight_line_passing_through_the_two_points(x1, y1, x2, y2, &a1, &b1, &c1);\n    straight_line_passing_through_the_two_points(x3, y3, x4, y4, &a2, &b2, &c2);\n    double c_x,c_y;\n    bool is_parallel = intersection_and_parallel(a1, b1, c1, a2, b2, c2, &c_x, &c_y);\n    //cout<<a1<<\" \"<<b1<<\" \"<<c1<<endl;\n    //cout<<a2<<\" \"<<b2<<\" \"<<c2<<endl;\n    if(is_parallel==false){\n        \n        return 0;\n    }\n    if(x1>x2)swap(x1, x2);\n    if(x3>x4)swap(x3, x4);\n    if(y1>y2)swap(y1, y2);\n    if(y3>y4)swap(y3, y4);\n    \n    if(x1<=c_x&&c_x<=x2&&x3<=c_x&&c_x<=x4){\n        if(y1<=c_y&&c_y<=y2&&y3<=c_y&&c_y<=y4){\n            *x=c_x;\n            *y=c_y;\n            return 1;\n        }\n    }\n    return 0;\n    \n}\n\n\n                                      \nint main(){\n    double x0,y0,x1,y1,x2,y2,x3,y3,x,y;\n    double a,b,c,d,e,f;\n    int q;\n    cin>>q;\n    for(int i=0; i<q; i++){\n        cin>>x0>>y0>>x1>>y1>>x2>>y2>>x3>>y3;\n        //straight_line_passing_through_the_two_points(x0, y0, x1, y1, &a, &b, &c);\n        //straight_line_passing_through_the_two_points(x2, y2, x3, y3, &d, &e, &f);\n        //cout<<line_segment_cross_decision(x0, y0, x1, y1, x2, y2, x3, y3)<<endl;\n        cout<< fixed << setprecision(10)<<distance_between_two_line_segment(x0, y0, x1, y1, x2, y2, x3, y3)<<endl;\n        \n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<iomanip>\n#include<cmath>\nusing namespace std;\n\nstruct Point{\n    double x;\n    double y;\n    Point (double x, double y) : x(x), y(y){}\n    Point operator-(Point p){\n        return Point(x - p.x, y - p.y);\n    }\n};\ntypedef Point Vector;\ndouble dot(Vector v1, Vector v2){\n    return v1.x * v2.x + v1.y * v2.y;\n}\ndouble abs_(Vector v){\n    return sqrt(dot(v, v));\n}\ndouble cross(Vector v1, Vector v2){\n    return v1.x * v2.y - v1.y * v2.x;\n}\nstruct Segment{\n    Point p1;\n    Point p2;\n    Segment(Point p1, Point p2) : p1(p1), p2(p2){}\n};\ndouble get_katamuki(Segment s){\n    return (s.p1.y - s.p2.y) / (s.p1.x - s.p2.x);\n}\ndouble get_seppen(Segment s){\n    return (s.p1.x * s.p2.y - s.p2.x * s.p1.y) / (s.p1.x - s.p2.x);\n}\nbool is_inSegment(Point p, Segment s){\n    double max_x = s.p1.x;\n    double min_x = s.p2.x;\n    if (min_x > max_x) swap(min_x, max_x);\n    if (p.x < min_x || p.x > max_x) return false;\n    double max_y = s.p1.y;\n    double min_y = s.p2.y;\n    if (min_y > max_y) swap(min_y, max_y);\n    if (p.y < min_y || p.y > max_y) return false;\n    return true;\n}\nbool is_intersect(Segment s1, Segment s2){\n    double a1 = get_katamuki(s1);\n    double b1 = get_seppen(s1);\n    double a2 = get_katamuki(s2);\n    double b2 = get_seppen(s2);\n    double x_is = (b2 - b1) / (a1 - a2);\n    double y_is = (a1 * b2 - a2 * b1) / (a1 - a2);\n    Point p_is(x_is, y_is);\n    if (!is_inSegment(p_is, s1)) return false;\n    if (!is_inSegment(p_is, s2)) return false;\n    return true;\n}\ndouble get_distanceSP(Segment s, Point p){\n// cout << \"(\" << s.p1.x << \",\" << s.p1.y << \")\";\n// cout << \"(\" << s.p2.x << \",\" << s.p2.y << \")   :    \";\n// cout << \"(\" << p.x << \",\" << p.y << \")\" << endl;\n    Vector a1 = s.p2 - s.p1;\n    Vector b1 = p    - s.p1;\n    if (dot(a1, b1) <= 0) return abs_(b1);\n    Vector a2 = s.p1 - s.p2;\n    Vector b2 = p    - s.p2;\n    if (dot(a2, b2) <= 0) return abs_(b2);\n    return fabs(cross(a1, b1)) / abs_(a1);\n}\ndouble get_distanceSS(Segment s1, Segment s2){\n    if (is_intersect(s1, s2)) return 0;\n    // cout << get_distanceSP(s1, s2.p1) << \" \";\n    // cout << get_distanceSP(s1, s2.p2) << \" \";\n    // cout << get_distanceSP(s2, s1.p1) << \" \";\n    // cout << get_distanceSP(s2, s1.p2) << endl;\n    return min(min(get_distanceSP(s1, s2.p1), get_distanceSP(s1, s2.p2)),\n               min(get_distanceSP(s2, s1.p1), get_distanceSP(s2, s1.p2)));\n}\nint main(){\n    int q;\n    cin >> q;\n    for (int i = 0; i < q; i++) {\n        int x_p0, y_p0, x_p1, y_p1, x_p2, y_p2, x_p3, y_p3;\n        cin >> x_p0 >> y_p0 >> x_p1 >> y_p1;\n        cin >> x_p2 >> y_p2 >> x_p3 >> y_p3;\n        Segment s1(Point(x_p0, y_p0), Point(x_p1, y_p1));\n        Segment s2(Point(x_p2, y_p2), Point(x_p3, y_p3));\n        double distance = get_distanceSS(s1, s2);\n        cout << fixed << setprecision(10);\n        cout << distance << endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <cmath>\n#include <array>\n#include <algorithm>\n\nusing Number = double;\n\nconst Number EPS = 1e-10;\nconst Number INF = 1e10;\nconst Number PI = acos(-1.0);\n\ninline int sign(Number x) { return (x < -EPS) ? -1 : (x > EPS) ? +1 : 0; }\ninline bool equal(Number a, Number b) { return sign(a - b) == 0; }\n\n// change between degree and radian\ninline Number to_radian(const Number degree) { return degree * PI / 180.0; }\ninline Number to_degree(const Number radian) { return radian * 180.0 / PI; }\n\n\n/**\n * Point in two dimensional\n */\nclass Point {\npublic:\n    Number x, y;\n\n    Point() {}\n    Point(Number x, Number y) : x(x), y(y) {}\n\n    // Arithmetic operator between points\n    Point operator+(const Point &rhs) const {\n        return Point(this->x + rhs.x, this->y + rhs.y);\n    }\n    Point operator-(const Point &rhs) const {\n        return Point(this->x - rhs.x, this->y - rhs.y);\n    }\n    Point operator*(const Point &rhs) const { // cross product between points\n        return Point(this->x * rhs.x - this->y * rhs.y,\n                     this->x * rhs.x + this->y * rhs.x);\n    }\n\n    // Unary operator and compound assignment operator\n    Point operator-() const {\n        return Point(-this->x, -this->y);\n    }\n    Point& operator+=(const Point &rhs) {\n        return *this = *this + rhs;\n    }\n    Point& operator-=(const Point &rhs) {\n        return *this = *this - rhs;\n    }\n\n    // Arithmetic operator between point and number\n    Point operator*(Number rhs) const {\n        return Point(this->x * rhs, this->y * rhs);\n    }\n    Point operator/(Number rhs) const {\n        return Point(this->x / rhs, this->y / rhs);\n    }\n\n    // Comparison operation\n    bool operator==(const Point &rhs) const {\n        return sign(this->x - rhs.x) == 0 && sign(this->y - rhs.y) == 0;\n    }\n    bool operator<(const Point &rhs) const {\n        return (this->x < rhs.x) || (this->x == rhs.x && this->y < rhs.y);\n    }\n\n    // Other operator\n    Number abs(void) const {\n        return sqrt(this->x * this->x + this->y * this->y);\n    }\n    Number abs2(void) const {\n        return this->x * this->x + this->y * this->y;\n    }\n    Number arg(void) const {\n        return atan2(this->y, this->x);\n    }\n    Number dot(const Point &rhs) {\n        return this->x * rhs.x + this->y * rhs.y;\n    }\n    Point rotate90(void) const {\n        return Point(-this->y, this->x);\n    }\n    Point rotate(double angle) const {\n        return Point(cos(angle) * this->x - sin(angle) * this->y,\n                     sin(angle) * this->x + cos(angle) * this->y);\n    }\n\n};\ninline Number dot(const Point &p1, const Point &p2) {\n    return p1.x * p2.x + p1.y * p2.y;\n}\ninline Number abs_cross(const Point &p1, const Point &p2) {\n    return p1.x * p2.y - p1.y * p2.x;\n}\n// Output of a point\nstd::ostream& operator<<(std::ostream &os, const Point &p) {\n    return os <<  p.x << ' ' << p.y;\n}\n// Input of a point\nstd::istream& operator>>(std::istream &is, Point &p) {\n    return is >> p.x >> p.y;\n}\n\n// Counter-Clockwise predicate (a, b, c)\nenum CCW {\n    COUNTER_CLOCKWISE = 1,      // counter clockwise\n    CLOCKWISE         = -1,     // clockwise\n    ONLINE_FRONT      = 2,      // a--c--b on line\n    ONLINE_BACK       = -2,      // c--a--b on line\n    ON_SEGMENT        = 0,     // a--b--c on line\n};\nCCW ccw(const Point &a, Point b, Point c) {\n    b -= a;  c -= a;\n    if (abs_cross(b, c) > 0) return COUNTER_CLOCKWISE;\n    if (abs_cross(b, c) < 0) return CLOCKWISE;\n    if (dot(b, c) < 0)       return ONLINE_BACK;\n    if (b.abs2() < c.abs2())   return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\n\n/**\n * Line in two dimensional\n */\nclass Line : public std::array<Point, 2> {\npublic:\n    Line() {}\n    Line(const Point &p1, const Point &p2) {\n        (*this)[0] = p1;\n        (*this)[1] = p2;\n    }\n};\n\n// Input of a line\nstd::istream& operator>>(std::istream &is, Line &l) {\n    return is >> l[0] >> l[1];\n}\ninline CCW ccw(const Line &l, const Point &p) {\n    return ccw(l[0], l[1], p);\n}\n\n\n/**\n * Segment in two dimensional\n */\nclass Segment : public Line {\npublic:\n    Segment() {}\n    Segment(const Point &p1, const Point &p2) : Line(p1, p2) {}\n};\n\n\n/**\n * Circle in two dimensional\n */\nclass Circle : public Point {\npublic:\n    Number r;\n    Circle(const Point &p, Number r = 0.0) : Point(p), r(r) {}\n};\n// Input of a circle\nstd::istream& operator>>(std::istream &is, Circle &c) {\n    return is >> c.x >> c.y >> c.r;\n}\n\n\n\n/**\n * Intersection testing\n */\ninline bool IsOrthogonal(const Line &l1, const Line &l2) {\n    return equal(dot(l1[0] - l1[1], l2[0] - l2[1]), 0.0);\n}\ninline bool IsParallel(const Line &l1, const Line &l2) {\n    return equal(abs_cross(l1[0] - l1[1], l2[0] - l2[1]), 0.0);\n}\n\ninline bool IsIntersect(const Line &l, const Point &p) {\n    return abs(ccw(l[0], l[1], p)) != 1;\n}\ninline bool IsIntersect(const Segment &s, const Point &p) {\n    return ccw(s[0], s[1], p) == 0;\n}\ninline bool IsIntersect(const Line &l1, const Line l2) {\n    return !IsParallel(l1, l2) || IsParallel(l1, Line(l1[0], l2[0]));\n}\ninline bool IsIntersect(const Line &l, const Segment &s) {\n    return abs_cross(l[1] - l[0], s[0] - l[0]) *\n        abs_cross(l[1] - l[0], s[1] - l[0]) < EPS;\n}\ninline bool IsIntersect(const Segment &s1, const Segment &s2) {\n    return ccw(s1[0], s1[1], s2[0]) * ccw(s1[0], s1[1], s2[1]) <= 0 &&\n        ccw(s2[0], s2[1], s1[0]) * ccw(s2[0], s2[1], s1[1]) <= 0;\n}\n\n\n/**\n * Intersection point and Distance\n */\nPoint Projection(const Line &l, const Point &p) {\n    Point dir = l[1] - l[0];\n    Number t = dot(p - l[0], dir) / dir.abs2();\n    return l[0] + dir * t;\n}\nPoint Reflection(const Line &l, const Point &p) {\n    return Projection(l, p) * 2.0 - p;\n}\n\nPoint CrossPoint(const Line &s1, const Line &s2) {\n    Point base = s2[1] - s2[0];\n    Number d1 = abs(abs_cross(base, s1[0] - s2[0]));\n    Number d2 = abs(abs_cross(base, s1[1] - s2[0]));\n    Number t = d1 / (d1 + d2);\n    return s1[0] + (s1[1] - s1[0]) * t;\n}\n\ninline Number Distance(const Point &p1, const Point &p2) {\n    return (p1 - p2).abs();\n}\ninline Number Distance(const Line &l, const Point &p) {\n    return (p - Projection(l, p)).abs();\n}\nNumber Distance(const Segment &s, const Point &p) {\n    const Point r = Projection(s, p);\n    if (IsIntersect(s, r)) return (r - p).abs();\n    return std::min((s[0] - p).abs(), (s[1] - p).abs());\n}\ninline Number Distance(const Line &l1, const Line &l2) {\n    return IsIntersect(l1, l2) ? 0 : Distance(l1, l2[0]);\n}\nNumber Distance(const Line &l, const Segment &s) {\n    if (IsIntersect(l, s)) return 0.0;\n    return std::min(Distance(l, s[0]), Distance(l, s[1]));\n}\nNumber Distance(const Segment &s1, const Segment &s2) {\n    if (IsIntersect(s1, s2)) return 0.0;\n    return std::min({Distance(s1, s2[0]), Distance(s1, s2[1]),\n                Distance(s2, s1[0]), Distance(s2, s1[1])});\n}\n\nint main()\n{\n    std::cout << std::fixed << std::setprecision(15);\n\n    Segment s1, s2;\n    int q;\n\n    std::cin >> q;\n\n    while (q--) {\n        std::cin >> s1 >> s2;\n        std::cout << Distance(s1, s2) << '\\n';\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n//#define int long long\n\nusing namespace std;\nusing LL = long long;\nusing P = pair<int, int>;\nusing Tapris = tuple<int, int, int>;\n\n#define FOR(i, a, n) for(int i = (int)(a); i < (int)(n); ++i)\n#define REP(i, n) FOR(i, 0, n)\n\n#define pb(a) push_back(a)\n#define all(x) (x).begin(),(x).end()\n\nconst int INF = (int)1e9;\nconst LL INFL = (LL)1e15;\nconst int MOD = 1e9 + 7;\n\nint dy[]={0, 0, 1, -1, 0};\nint dx[]={1, -1, 0, 0, 0};\n\ntypedef long double LD;\ntypedef complex<LD> Point;\ntypedef pair<Point, Point> Line;\nconst LD EPS = 1e-10;\n#define X real() // x座標を取得\n#define Y imag() // y座標を取得\n#define LE(n,m) ((n) < (m) + EPS)\n#define GE(n,m) ((n) + EPS > (m))\n#define EQ(n,m) (abs((n)-(m)) < EPS)\n\n// 内積 dot(a, b) = |a||b|cosθ\nLD dot(Point a, Point b){\n    return (conj(a)*b).X;\n}\n\n// 外積 cross(a, b) = |a||b|sinθ\nLD cross(Point a, Point b){\n    return (conj(a)*b).Y;\n}\n\nint ccw(Point a, Point b, Point c){\n    b -= a; c -= a;\n    if (cross(b, c) > 0)   return +1;       // counter clockwise\n    if (cross(b, c) < 0)   return -1;       // clockwise\n    if (dot(b, c) < 0)     return +2;       // c--a--b on line\n    if (norm(b) < norm(c)) return -2;       // a--b--c on line\n    return 0;\n}\n\n\n// 交差判定 (isec) ****************************\n// 点　 := 平面座標にある点\n// 直線 := 点と点を通るどこまでも続く線\n// 線分 := 点と点を結んでその両端で止まっている線\n\n// 直線と点\nbool isecLP(Point a1, Point a2, Point b){\n    return abs(ccw(a1, a2, b)) != 1;\n}\n\n// 直線と直線\nbool isecLL(Point a1, Point a2, Point b1, Point b2) {\n    return !isecLP(a2-a1, b2-b1, 0) || isecLP(a1, b1, b2);\n}\n\n// 直線と線分\nbool isecLS(Point a1, Point a2, Point b1, Point b2) {\n    return cross(a2-a1, b1-a1) * cross(a2-a1, b2-a1) < EPS;\n}\n\n// 線分と線分\nbool isecSS(Point a1, Point a2, Point b1, Point b2) {\n    return ccw(a1, a2, b1)*ccw(a1, a2, b2) <= 0 && ccw(b1, b2, a1)*ccw(b1, b2, a2) <= 0;\n}\n\n// 線分と点\nbool isecSP(Point a1, Point a2, Point b) {\n    return !ccw(a1, a2, b);\n}\n\n// ********************************************\n\n\n// 距離 (dist) ********************************\n// 点pの直線aへの射影点を返す\nPoint proj(Point a1, Point a2, Point p){\n    return a1 + dot(a2-a1, p-a1) / norm(a2-a1) * (a2-a1);\n}\n\n// 点pの直線aへの反射点を返す\nPoint reflection(Point a1, Point a2, Point p){\n    return 2.0L*proj(a1, a2, p) - p;\n}\n\n// 直線と点\nLD distLP(Point a1, Point a2, Point p){\n    return abs(proj(a1, a2, p) - p);\n}\n\n// 直線と直線\nLD distLL(Point a1, Point a2, Point b1, Point b2) {\n    return isecLL(a1, a2, b1, b2) ? 0 : distLP(a1, a2, b1);\n}\n\n// 直線と線分\nLD distLS(Point a1, Point a2, Point b1, Point b2) {\n    return isecLS(a1, a2, b1, b2) ? 0 : min(distLP(a1, a2, b1), distLP(a1, a2, b2));\n}\n\n// 線分と点\nLD distSP(Point a1, Point a2, Point p) {\n    Point r = proj(a1, a2, p);\n    if(isecSP(a1, a2, r)) return abs(r-p);\n    return min(abs(a1-p), abs(a2-p));\n}\n\n// 線分と線分\nLD distSS(Point a1, Point a2, Point b1, Point b2) {\n    if(isecSS(a1, a2, b1, b2)) return 0;\n    return min(min(distSP(a1, a2, b1), distSP(a1, a2, b2)), min(distSP(b1, b2, a1), distSP(b1, b2, a2)));\n}\n\n// ********************************************\n\n\n// 2直線の交点 (crosspoint) *******************\nPoint crosspointLL(Point a1, Point a2, Point b1, Point b2){\n    LD d1 = cross(b2-b1, b1-a1);\n    LD d2 = cross(b2-b1, a2-a1);\n    if (EQ(d1, 0) && EQ(d2, 0)) return a1;\n    if (EQ(d2, 0)) throw \"not exist crosspoint\";\n    return a1 + d1/d2 * (a2-a1);\n}\n// ********************************************\n\n\n/*************** using variables ***************/\nPoint p[4];\nint q;\n/**********************************************/\n\nsigned main(){\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    \n    cin >> q;\n    REP(i, q){\n        LD xp, yp;\n        REP(i, 4){\n            cin >> xp >> yp;\n            p[i] = Point(xp, yp);\n        }\n        LD ans = distSS(p[0], p[1], p[2], p[3]);\n        printf(\"%.10Lf\\n\", ans);\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <vector>\n#define EPS (1e-10)\n#define equals(a,b) (fabs(a)-fabs(b)<EPS)\n\n\nusing namespace std;\n\nclass Point{\npublic:\n    double x,y;\n\n    Point(double x=0,double y=0):x(x),y(y){}\n\n    Point operator + (Point &p) { return Point(x+p.x,y+p.y); }\n    Point operator - (Point &p) { return Point(x-p.x,y-p.y); }\n    Point operator * (double a) { return Point(x*a,y*a); }\n    Point operator / (double a) { return Point(x/a,y/a); }\n\n    double abs() { return sqrt(norm()); }\n    double norm() { return x*x+y*y; }\n\n    bool operator < (const Point &p) const {\n        return x!=p.x?x<p.x:y<p.y;\n    }\n\n    bool operator == (const Point &p) const {\n        return fabs(x-p.x)<EPS && fabs(y-p.y)<EPS;\n    }\n};\n\ntypedef Point Vector;\n///Program 16.3 表示线段的结构体\nstruct Segment{\n    Point p1,p2;\n};\n\n///Program 16.4 表示直线的结构体\ntypedef Segment Line;\n\nclass Circle{\npublic:\n    Point c;\n    double r;\n    Circle(Point c=Point(),double r=0.0):c(c),r(r){}\n};\n\n///Program 16.6 多边形\ntypedef vector<Point> Polygon;\n\n///内积\ndouble dot(Vector a,Vector b){\n    return a.x*b.x+a.y*b.y;\n}\n///外积\ndouble cross(Vector a,Vector b){\n    return a.x*b.y-a.y*b.x;\n}\n\ndouble norm(Point p) { return p.x*p.x+p.y*p.y; }\ndouble abs(Point p) { return sqrt(norm(p)); }\n//double norm() { return x*x+y*y; }\nint ccw(Point p0,Point p1,Point p2){\n    Vector a=p1-p0;\n    Vector b=p2-p0;\n    if(cross(a,b)>EPS)  {//printf(\"COUNTER_CLOCKWISE\\n\");\n            return 1;}///p2位于p0-->p1的逆时针方向\n    if(cross(a,b)<-EPS) {//printf(\"CLOCKWISE\\n\");\n        return -1;}///p2位于p0-->p1的顺时针方向\n    if(dot(a,b)<-EPS)   {//printf(\"ONLINE_BACK\\n\");\n        return 2;}///p2位于线段p0p1后方\n    if(a.norm()<b.norm())  { //printf(\"ONLINE_FRONT\\n\");\n        return -2;}///p2位于线段p0p1前方\n\n  //  printf(\"ON_SEGMENT\\n\");///p2位于线段p0p1的中间\n    return 0;\n}\n\nbool intersect(Point p1,Point p2,Point p3,Point p4){\n    return (ccw(p1,p2,p3) * ccw(p1,p2,p4) <= 0&&\n            ccw(p3,p4,p1) * ccw(p3,p4,p2) <= 0);\n}\n\nbool intersect(Segment s1,Segment s2){\n    return intersect(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n\n\n///两点之间的距离\ndouble getDistance(Point a,Point b){\n    return abs(a-b);\n}\n\n///点与直线的距离\ndouble getDistanceLP(Line l,Point p){\n    return abs(cross(l.p2-l.p1,p-l.p1)/abs(l.p2-l.p1));\n}\n\n///点到线段的距离\ndouble getDistanceSP(Segment s,Point p){\n    if(dot(s.p2-s.p1,p-s.p1)<0.0)   return abs(p-s.p1);\n    if(dot(s.p1-s.p2,p-s.p2)<0.0)   return abs(p-s.p2);\n    return getDistanceLP(s,p);\n}\n\n///线段到线段的距离\ndouble getDistance(Segment s1,Segment s2){\n    if(intersect(s1,s2))    return 0.0;\n    return min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),\n               min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n}\n\n\nint main(){\n    Segment s1,s2;\n    int q;\n    scanf(\"%d\",&q);\n    for(int i=0;i<q;i++){\n        scanf(\"%lf%lf%lf%lf%lf%lf%lf%lf\",&s1.p1.x,&s1.p1.y,&s1.p2.x,&s1.p2.y,&s2.p1.x,&s2.p1.y,&s2.p2.x,&s2.p2.y);\n        printf(\"%.10f\\n\",getDistance(s1,s2));\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<complex>\n#include<utility>\n#include<vector>\n#include<cmath>\n#include<cassert>\n\nusing namespace std;\n\ndouble eps=1e-9;\n\ntypedef complex<double> Point;\ntypedef complex<double> Vector;\n\ntemplate<class T> bool eq(T a,T b){\n\treturn abs(a-b)<eps;\n}\n\ntemplate<class T> int sgn(T r){\n\treturn eq(r,0.0)?0:(r>0?1:-1);\n}\n\nstruct Circle{\n\tPoint center;\n\tdouble r;\n\tCircle(Point c,double r):center(c),r(r){}\n\tCircle(){}\n};\n\nstruct Line{\n\tdouble a,b,c;//ax+by=c\n\tLine(){}\n\tLine(double a,double b,double c):a(a),b(b),c(c){}\n\tLine(Point p1,Point p2){//not verified\n\t\tif(eq(abs(p1-p2),0.0)){\n\t\t\tfprintf(stderr,\"called Line for same points\\n\");\n\t\t\tassert(0);\n\t\t}\n\t\tdouble x1=p1.real(),y1=p1.imag();\n\t\tdouble x2=p2.real(),y2=p2.imag();\n\t\ta=y2-y1;\n\t\tb=-(x2-x1);\n\t\tc=x1*y2-x2*y1;\n\t}\n};\n\nvoid print(Point p){\n\tif(isnan(p.real())||isnan(p.imag())){\n\t\tprintf(\"NaN Point\\n\");\n\t\treturn;\n\t}\n\tprintf(\"(%f,%f)\\n\",p.real(),p.imag());\n}\n\ndouble pointsDistance(Point p1,Point p2){/*abs(p1-p2)と書いてよい*/\n\tdouble dx=p1.real()-p2.real();\n\tdouble dy=p1.imag()-p2.imag();\n\treturn sqrt(dx*dx+dy*dy);\n}\n\ndouble linePointDistance(Line l,Point p){\n\tdouble a=l.a,b=l.b,c=l.c;\n\tdouble x=p.real(),y=p.imag();\n\tdouble num=abs(a*x+b*y-c);\n\tdouble den=sqrt(a*a+b*b);\n\treturn num/den;\n}\n\nVector basisVector(Vector v){\n\tif(eq(v.real(),0.0)&&eq(v.imag(),0.0)) return v;\n\treturn v/sqrt(norm(v));\n}\n\nPoint linePointProjection(Line l,Point p){\n\tdouble dx=l.a,dy=l.b;\n\tdouble a=l.a,b=l.b,c=l.c;\n\tdouble x=p.real(),y=p.imag();\n\tVector ba=basisVector(Vector(dx,dy));\n\tdouble num=a*x+b*y-c;\n\tdouble den=sqrt(a*a+b*b);\n\tVector v=ba*(-num/den);\n\treturn p+v;\n}\n\nvector<Point> circleLineIntersection(Circle c,Line l){\n\tvector<Point> res;\n\tPoint p=linePointProjection(l,c.center);\n\tdouble d=linePointDistance(l,c.center);\n\tint s=sgn(d-c.r);\n\tif(s==1){\n\t\treturn res;//empty\n\t}else if(s==0){\n\t\tres.push_back(p);\n\t\treturn res;\n\t}else{\n\t\tdouble r=c.r;\n\t\tdouble t=sqrt(r*r-d*d);\n\t\tVector e=basisVector(Vector(l.b,-l.a));\n\t\tres.push_back(p+t*e);\n\t\tres.push_back(p-t*e);\n\t\treturn res;\n\t}\n}\n\nvector<Point> circlesIntersection(Circle c1,Circle c2){/*一致するとき処理できない*/\n\tif(eq(c1.center.real(),c2.center.real())&&eq(c1.center.imag(),c2.center.imag())&&\n\t\teq(c1.r,c2.r)){\n\t\t\t\tPoint p=Point(NAN,NAN);\n\t\t\t\tvector<Point> v;\n\t\t\t\tv.push_back(p);\n\t\t\t\treturn v;\n\t}\n\tdouble d=pointsDistance(c1.center,c2.center);\n\tdouble r1=c1.r,r2=c2.r;\n\tdouble dif=max(r1,r2)-min(r1,r2);\n\tdouble sum=r1+r2;\n\tif(sgn(d-sum)==1||sgn(dif-d)==1){//d>sum||dif>d\n\t\tvector<Point> v;\n\t\treturn v;\n\t}\n\tdouble x1=c1.center.real(),y1=c1.center.imag();\n\tdouble x2=c2.center.real(),y2=c2.center.imag();\n\tLine l=Line(-x1*2+x2*2,-y1*2+y2*2,r1*r1-r2*r2-(x1*x1-x2*x2)-(y1*y1-y2*y2));\n\treturn circleLineIntersection(c1,l);\n}\n\ndouble det(double a,double b,double c,double d){\n\treturn a*d-b*c;\n}\n\nPoint linesIntersection(Line l1,Line l2){/*平行の時は常にNAN*/\n\tdouble a=l1.a,b=l1.b,c=l1.c;\n\tdouble d=l2.a,e=l2.b,f=l2.c;\n\tdouble den=det(a,b,d,e);\n\tdouble numx=det(c,b,f,e);\n\tdouble numy=det(a,c,d,f);\n\tif(eq(den,0.0)){\n\t\treturn Point(NAN,NAN);\n\t}\n\treturn Point(numx/den,numy/den);\n}\n\n//circlesIntersection verify AOJ1190 ICPC Domestic 2013 Balloon\n\ndouble crossProduct(Vector a,Vector b){\n\treturn (conj(a)*b).imag();\n}\n\ndouble dotProduct(Vector a,Vector b){\n\treturn (conj(a)*b).real();\n}\n\nint ccw(Point p1,Point p2,Point p3){\n\t/*p1,p2,p3はすべて異なると仮定\n\tそうでない場合の戻り値は不定\n\tではなく\n\tp1!=p2と仮定*/\n\tVector b=p2-p1;\n\tVector c=p3-p1;\n\tint s=sgn(crossProduct(b,c));\n\tif(s==1) return 1;//counterclockwise\n\tif(s==-1) return -1;//clockwise\n\tint t=sgn(dotProduct(b,c));\n\tif(t==-1) return 2;//3--1--2\n\tint u=sgn(norm(b)-norm(c));\n\tif(eq(norm(c),0.0)) return 0;//1==3\n\tif(u==-1) return -2;//1--2--3\n\treturn 0;//1--3--2 or 2==3\n}\n\nstruct Segment{\n\tPoint p1,p2;\n\tLine l;\n\tSegment(){}\n\tSegment(Point p1,Point p2):p1(p1),p2(p2){\n\t\tl=Line(p1,p2);\n\t}\n};\n\nint oneLineCCW(Point p1,Point p2,Point p3){\n\t/*p1!=p2かつp1,p2,p3は一直線上と仮定*/\n\t/*それ以外の時の戻り値は不定*/\n\tVector b=p2-p1,c=p3-p1;\n\tif(sgn(dotProduct(b,c))==-1) return 2;//p3--p1--p2\n\tif(eq(abs(p1-p3),0.0)) return 1;//p1==p3--p2\n\tint s=sgn(norm(b)-norm(c));\n\tif(s==1) return 0;//p1--p3--p2\n\tif(s==0) return -1;//p1--p3==p2\n\telse return -2;//p1--p2--p3\n}\n\ndouble pointSegmentDistance(Point p,Segment s){\n\tLine l=s.l;\n\tdouble d=linePointDistance(l,p);\n\tPoint pr=linePointProjection(l,p);\n//\tint x=oneLineCCW(s.p1,s.p2,pr);\n\tint x=ccw(s.p1,s.p2,pr);\n//\tif(x>=-1&&x<=1) return d;\n\tif(x==0)\n\tdouble a=abs(s.p1-p);\n\tdouble b=abs(s.p2-p);\n\treturn min(a,b);\n}\n\nbool segmentsIntersect(Segment s1,Segment s2){\n\tPoint p[2],q[2];\n\tp[0]=s1.p1,p[1]=s1.p2;\n\tq[0]=s2.p1,q[1]=s2.p2;\n\treturn ccw(p[0],p[1],q[0])*ccw(p[0],p[1],q[1])<=0&&\n\t\tccw(q[0],q[1],p[0])*ccw(q[0],q[1],p[1])<=0;\n}\n\ndouble segmentsDistance(Segment s1,Segment s2){\n\tbool flg=segmentsIntersect(s1,s2);\n\tif(flg) return 0;\n\tPoint p[2],q[2];\n\tp[0]=s1.p1,p[1]=s1.p2;\n\tq[0]=s2.p1,q[1]=s2.p2;\n\tdouble res=-1;\n\tfor(int k=0;k<2;k++){\n\t\tPoint r=linePointProjection(s2.l,p[k]);\n\t//\tif(abs(oneLineCCW(q[0],q[1],r))<=1){\n\t\tif(ccw(q[0],q[1],r)==0)\n\t\t\tdouble tmp=abs(r-p[k]);\n\t\t\tif(res<0||tmp<res) res=tmp;\n\t\t}\n\t\tr=linePointProjection(s1.l,q[k]);\n\t//\tif(abs(oneLineCCW(p[0],p[1],r))<=1){\n\t\tif(ccw(p[0],p[1],r)==0){\n\t\t\tdouble tmp=abs(r-q[k]);\n\t\t\tif(res<0||tmp<res) res=tmp;\n\t\t}\n\t}\n\tfor(int i=0;i<2;i++) for(int j=0;j<2;j++){\n\t\tdouble tmp=abs(p[i]-q[j]);\n\t\tif(res<0||tmp<res) res=tmp;\n\t}\n\treturn res;\n}\n\nPoint inputPoint(){\n\tdouble x,y;\n\tscanf(\"%lf%lf\",&x,&y);\n\treturn Point(x,y);\n}\n\nint main(){\n\tint Q;\n\tscanf(\"%d\",&Q);\n\tfor(int datano=0;datano<Q;datano++){\n\t\tPoint p1,p2;\n\t\tPoint q1,q2;\n\t\tp1=inputPoint();\n\t\tp2=inputPoint();\n\t\tq1=inputPoint();\n\t\tq2=inputPoint();\n\t\tif(abs(p1-p2)<eps) break;\n\t\tSegment s1=Segment(p1,p2);\n\t\tSegment s2=Segment(q1,q2);\n\t\tdouble ans=segmentsDistance(s1,s2);\n\t\tprintf(\"%.9f\\n\",ans);\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <vector>\n#include <algorithm>\n#include <iostream>\n#include <cstdio>\n#include <cmath>\n#include <climits>\n\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\n//???\nclass Point {\npublic:\n    double x, y;\n    \n    Point (double x = 0, double y = 0):x(x), y(y){}\n    Point operator + (Point p){return Point(x + p.x, y + p.y);}\n    Point operator - (Point p){return Point(x - p.x, y - p.y);}\n    Point operator * (double a){return Point(a * x, a * y);}\n    Point operator / (double a){return Point(x / a, y / a);}\n    \n    double norm(){return x*x + y*y;};\n    double absolute(){return sqrt(norm());};\n    \n    bool operator < (const Point &p) const{\n        return x != p.x ? x < p.x : y < p.y;\n    }\n    \n    bool operator == (const Point &p) const{\n        return equals(x, p.x) && equals(y, p.y);\n    }\n    \n};\ntypedef Point Vector;                               //????????????\ntypedef struct Segment{Point p1, p2;}Segment;       //??????\ntypedef Segment Line;                               //??´???\ntypedef struct Circle{Point c; double r;}Circle;    //???\ntypedef vector<Point> Polygon;                      //????§???¢\n//????????????a????????????\ndouble norm(Vector a){\n    return a.x * a.x + a.y * a.y;\n}\n//????????????a?????§??????\ndouble absolute(Vector a){\n    return sqrt(norm(a));\n}\n\n//????????????a,b?????????\ndouble dot(Vector a, Vector b){\n    return a.x * b.x + a.y * b.y;\n}\n//????????????a,b?????????\ndouble cross(Vector a, Vector b){\n    return a.x * b.y - a.y * b.x;\n}\n\n//????????????a??¨b?????´?????????\n//a??¨b?????´????????´??????????????????0?????????\nbool isOrthogonal(Vector a, Vector b){\n    return equals(dot(a,b), 0.0);\n}\n\n//????????????a??¨b???????????????\n//a??¨b?????´????????´??????????????????0?????????\nbool isParallel(Vector a , Vector b){\n    return equals(cross(a,b), 0.0);\n}\n\n//??????s(p1p2)???????????????p????°???±\nPoint project(Segment s, Point p){\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / norm(base);\n    return s.p1 + base * r;\n}\n\n//??????s(p1p2)???????§°?????¨?????????p???????±????\nPoint reflect(Segment s, Point p){\n    return p + (project(s, p) - p) * 2.0;\n}\n\n//???a,???b???????????¢\ndouble getDistance(Point a, Point b){\n    return absolute(a - b);\n}\n\n//??´???s??¨???p????????¢\ndouble getDistanceLP(Line l, Point p){\n    return abs(cross(l.p2 - l.p1, p - l.p1) / absolute(l.p2 - l.p1));\n}\n\n//??????s(p1p2)??¨???p????????¢d????±???????\n//??\\???????????????????????§??´?????????\n//??????????????????p2-p1??¨???????????????p-p1??????????§???????90???????????§????????´???????????????-90?????????????°?????????´?????????d??????p??¨???p1??¨????????¢\n//??????????????????p1-p2??¨???????????????p-p2??????????§???????90???????????§????????´???????????????-90?????????????°?????????´?????????d??????p??¨???p2??¨????????¢\n//??????????????\\???????????????????????´??????d??????p??¨??´???p1p2????????¢\ndouble getDistanceSP(Segment s, Point p){\n    if (dot(s.p2 - s.p1, p - s.p1) < 0.0) return absolute(p - s.p1);\n    if (dot(s.p1 - s.p2, p - s.p2) < 0.0) return absolute(p - s.p2);\n    return getDistanceLP(s, p);\n}\n\n\n//??????p0, p1, p2???????????????????????????p0p1???????????????p2??????????????????\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\nint ccw(Point p0, Point p1, Point p2){\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if(cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n    if(cross(a, b) < -EPS) return CLOCKWISE;\n    if(dot(a, b) < -EPS) return ONLINE_BACK;\n    if(norm(a) < norm(b)) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\n//??????S1(p1p2)??¨??????s2(p2p3)????????????????????????\nbool intersect(Point p1, Point p2, Point p3, Point p4){\n    return  ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0\n            &&\n            ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0;\n}\nbool intersect(Segment s1, Segment s2){\n    return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\n//??????s1??¨??????s2????????¢\n//??\\????????????????????¢????????§????????????????????????\n//????????????s1??¨??????s2????§????s2.p1????????¢\n//????????????s1??¨??????s2?????????s2.p2????????¢\n//????????????s2??¨??????s1????§????s1.p1????????¢\n//????????????s2??¨??????s1?????????s1.p2????????¢\ndouble getDistance(Segment s1, Segment s2){\n    if ( intersect(s1, s2) ) return 0.0;\n    return min(\n               min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n               min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2))\n               );\n}\n\n//??????s1??¨??????s2?????????????±???????\nPoint getCrossPoint(Segment s1, Segment s2){\n    Vector base = s2.p2 - s2.p1;\n    double d1 = abs(cross(base, s1.p1 - s2.p1));\n    double d2 = abs(cross(base, s1.p2 - s2.p1));\n    double t = d1 / (d1 + d2);\n    return s1.p1 + (s1.p2 - s1.p1) * t;\n}\n\n//?????¨??????l?????????????±???????\npair<Point, Point> getCrossPoints(Circle c, Line l){\n    Vector pr = project(l, c.c);\n    Vector e = (l.p2 - l.p1) / absolute(l.p2 - l.p1);\n    double base = sqrt(c.r * c.r - norm(pr - c.c));\n    return make_pair(pr + e * base, pr - e * base);\n}\n\n//???c1??¨???c2?????????????±???????\nVector polar(double a, double r){\n    //??????a,?§????r???point????±???????\n    return Point(cos(r) * a, sin(r) * a);\n}\npair<Point, Point> getCrossPoints(Circle c1, Circle c2){\n    Vector v = c2.c - c1.c;\n    double d = absolute(v);\n    double a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d) );\n    double t = atan2(v.y, v.x);\n    return make_pair(c1.c + polar(c1.r, t+a), c1.c + polar(c1.r, t-a));\n}\n\n\n\nint main(){\n    \n    int x0, y0, x1, y1, x2, y2, x3, y3;\n    \n    int q;\n    \n    cin >> q;\n    \n    for (int i = 0; i < q; i++) {\n        cin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n        \n        Point p0 = Point(x0, y0);\n        Point p1 = Point(x1, y1);\n        Point p2 = Point(x2, y2);\n        Point p3 = Point(x3, y3);\n        \n        Segment s1 = {p0, p1};\n        Segment s2 = {p2, p3};\n        \n        double ans = getDistance(s1, s2);\n        \n        printf(\"%.8lf\\n\", ans);\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n//#define int long long\n\nusing namespace std;\nusing LL = long long;\nusing P = pair<int, int>;\nusing Tapris = tuple<int, int, int>;\n\n#define FOR(i, a, n) for(int i = (int)(a); i < (int)(n); ++i)\n#define REP(i, n) FOR(i, 0, n)\n\n#define pb(a) push_back(a)\n#define all(x) (x).begin(),(x).end()\n\nconst int INF = (int)1e9;\nconst LL INFL = (LL)1e15;\nconst int MOD = 1e9 + 7;\n\nint dy[]={0, 0, 1, -1, 0};\nint dx[]={1, -1, 0, 0, 0};\n\ntypedef double LD;\ntypedef complex<LD> Point;\ntypedef pair<Point, Point> Line;\nconst LD EPS = 1e-10;\n#define X real() // x座標を取得\n#define Y imag() // y座標を取得\n#define LE(n,m) ((n) < (m) + EPS)\n#define GE(n,m) ((n) + EPS > (m))\n#define EQ(n,m) (abs((n)-(m)) < EPS)\n\n// 内積 dot(a, b) = |a||b|cosθ\nLD dot(Point a, Point b){\n    return (conj(a)*b).X;\n}\n\n// 外積 cross(a, b) = |a||b|sinθ\nLD cross(Point a, Point b){\n    return (conj(a)*b).Y;\n}\n\nint ccw(Point a, Point b, Point c){\n    b -= a; c -= a;\n    if (cross(b, c) > 0)   return +1;       // counter clockwise\n    if (cross(b, c) < 0)   return -1;       // clockwise\n    if (dot(b, c) < 0)     return +2;       // c--a--b on line\n    if (norm(b) < norm(c)) return -2;       // a--b--c on line\n    return 0;\n}\n\n\n// 交差判定 (isec) ****************************\n// 点　 := 平面座標にある点\n// 直線 := 点と点を通るどこまでも続く線\n// 線分 := 点と点を結んでその両端で止まっている線\n\n// 直線と点\nbool isecLP(Point a1, Point a2, Point b){\n    return abs(ccw(a1, a2, b)) != 1;\n}\n\n// 直線と直線\nbool isecLL(Point a1, Point a2, Point b1, Point b2) {\n    return !isecLP(a2-a1, b2-b1, 0) || isecLP(a1, b1, b2);\n}\n\n// 直線と線分\nbool isecLS(Point a1, Point a2, Point b1, Point b2) {\n    return cross(a2-a1, b1-a1) * cross(a2-a1, b2-a1) < EPS;\n}\n\n// 線分と線分\nbool isecSS(Point a1, Point a2, Point b1, Point b2) {\n    return ccw(a1, a2, b1)*ccw(a1, a2, b2) <= 0 && ccw(b1, b2, a1)*ccw(b1, b2, a2) <= 0;\n}\n\n// 線分と点\nbool isecSP(Point a1, Point a2, Point b) {\n    return !ccw(a1, a2, b);\n}\n\n// ********************************************\n\n\n// 距離 (dist) ********************************\n// 点pの直線aへの射影点を返す\nPoint proj(Point a1, Point a2, Point p){\n    return a1 + dot(a2-a1, p-a1) / norm(a2-a1) * (a2-a1);\n}\n\n// 点pの直線aへの反射点を返す\nPoint reflection(Point a1, Point a2, Point p){\n    return 2.0*proj(a1, a2, p) - p;\n}\n\n// 直線と点\nLD distLP(Point a1, Point a2, Point p){\n    return abs(proj(a1, a2, p) - p);\n}\n\n// 直線と直線\nLD distLL(Point a1, Point a2, Point b1, Point b2) {\n    return isecLL(a1, a2, b1, b2) ? 0 : distLP(a1, a2, b1);\n}\n\n// 直線と線分\nLD distLS(Point a1, Point a2, Point b1, Point b2) {\n    return isecLS(a1, a2, b1, b2) ? 0 : min(distLP(a1, a2, b1), distLP(a1, a2, b2));\n}\n\n// 線分と点\nLD distSP(Point a1, Point a2, Point p) {\n    Point r = proj(a1, a2, p);\n    if(isecSP(a1, a2, r)) return abs(r-p);\n    return min(abs(a1-p), abs(a2-p));\n}\n\n// 線分と線分\nLD distSS(Point a1, Point a2, Point b1, Point b2) {\n    if(isecSS(a1, a2, b1, b2)) return 0;\n    return min(min(distSP(a1, a2, b1), distSP(a1, a2, b2)), min(distSP(b1, b2, a1), distSP(b1, b2, a2)));\n}\n\n// ********************************************\n\n\n// 2直線の交点 (crosspoint) *******************\nPoint crosspointLL(Point a1, Point a2, Point b1, Point b2){\n    LD d1 = cross(b2-b1, b1-a1);\n    LD d2 = cross(b2-b1, a2-a1);\n    if (EQ(d1, 0) && EQ(d2, 0)) return a1;\n    if (EQ(d2, 0)) throw \"not exist crosspoint\";\n    return a1 + d1/d2 * (a2-a1);\n}\n// ********************************************\n\n\n/*************** using variables ***************/\nPoint p[4];\nint q;\n/**********************************************/\n\nsigned main(){\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    \n    cin >> q;\n    REP(i, q){\n        LD xp, yp;\n        REP(i, 4){\n            cin >> xp >> yp;\n            p[i] = Point(xp, yp);\n        }\n        LD ans = distSS(p[0], p[1], p[2], p[3]);\n        printf(\"%.10Lf\\n\", ans);\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\n#include<unordered_map>\n#include<unordered_set>\n#pragma warning(disable:4996)\nusing namespace std;\nusing ld = long double;\ntemplate<class T>\nusing Table = vector<vector<T>>;\nconst ld eps=1e-9;\n\n//// < \"D:\\D_Download\\Visual Studio 2015\\Projects\\programing_contest_c++\\Debug\\a.txt\" > \"D:\\D_Download\\Visual Studio 2015\\Projects\\programing_contest_c++\\Debug\\b.txt\"\n \n\n/* ??????????????¬ */\n\n#include <complex>\n\ntypedef complex<ld> Point;\n#define rep(i,n) for(int i=0;i<(int)(n);i++)\n#define all(x) (x).begin(),(x).end()\n\n\nconst ld pi = acos(-1.0);\nconst ld dtop = pi / 180.;\nconst ld ptod = 1. / dtop;\n\nnamespace std {\n\tbool operator<(const Point &lhs, const Point &rhs) {\n\t\tif (lhs.real() < rhs.real() - eps) return true;\n\t\tif (lhs.real() > rhs.real() + eps) return false;\n\t\treturn lhs.imag() < rhs.imag();\n\t}\n}\n\n// ????????\\???\nPoint input_Point() {\n\tld x, y;\n\tcin >> x >> y;\n\treturn Point(x, y);\n}\n\n// ????????????????????????\nbool eq(const ld a, const ld b) {\n\treturn (abs(a - b) < eps);\n}\n\n// ??????\nld dot(const Point& a, const Point& b) {\n\treturn real(conj(a) * b);\n}\n\n// ??????\nld cross(const Point& a, const Point& b) {\n\treturn imag(conj(a) * b);\n}\n\n// ??´????????????\nclass Line {\npublic:\n\tPoint a, b;\n\tLine() : a(Point(0, 0)), b(Point(0, 0)) {}\n\tLine(Point a, Point b) : a(a), b(b) {}\n\tPoint operator[](const int _num)const {\n\t\tif (_num == 0)return a;\n\t\telse if (_num == 1)return b;\n\t\telse {\n\t\t\tassert(false);\n\t\t\treturn Point();\n\t\t}\n\t}\n};\n\n// ????????????\nclass Circle {\npublic:\n\tPoint p;\n\tld r;\n\tCircle() : p(Point(0, 0)), r(0) {}\n\tCircle(Point p, ld r) : p(p), r(r) {}\n};\n\n// ccw\n// 1: a,b,c??????????¨???¨?????????????????¶\n//-1: a,b,c???????¨???¨?????????????????¶\n// 2: c,a,b???????????´???????????¶\n//-2: a,b,c???????????´???????????¶\n// 0: a,c,b???????????´???????????¶\nint ccw(const Point& a, const Point &b, const Point &c) {\n\tconst Point nb(b - a);\n\tconst Point nc(c - a);\n\tif (cross(nb, nc) > eps) return 1;   // a,b,c??????????¨???¨?????????????????¶\n\tif (cross(nb, nc) < -eps) return -1; // a,b,c???????¨???¨?????????????????¶\n\tif (dot(nb, nc) < 0) return 2;       // c,a,b???????????´???????????¶\n\tif (norm(nb) < norm(nc)) return -2;  // a,b,c???????????´???????????¶\n\treturn 0;                          // a,c,b???????????´???????????¶\n}\n\n\n/* ???????????? */\n\n// ??´?????¨??´??????????????????\nbool isis_ll(const Line& l, const Line& m) {\n\treturn !eq(cross(l.b - l.a, m.b - m.a), 0);\n}\n\n// ??´?????¨?????????????????????\nbool isis_ls(const Line& l, const Line& s) {\n\treturn isis_ll(l, s) &&\n\t\t(cross(l.b - l.a, s.a - l.a) * cross(l.b - l.a, s.b - l.a) < eps);\n}\n\n// ????????¨?????????????????????\nbool isis_ss(const Line& s, const Line& t) {\n\treturn ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 &&\n\t\tccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0;\n}\n\n// ????????´????????????\nbool isis_lp(const Line& l, const Point& p) {\n\treturn (abs(cross(l.b - p, l.a - p)) < eps);\n}\n\n// ?????????????????????\nbool isis_sp(const Line& s, const Point& p) {\n\treturn (abs(s.a - p) + abs(s.b - p) - abs(s.b - s.a) < eps);\n}\n\n// ??????????¶?\nPoint proj(const Line &l, const Point& p) {\n\tld t = dot(p - l.a, l.b - l.a) / norm(l.a - l.b);\n\treturn l.a + t * (l.b - l.a);\n}\n\n//???????±??????????????????????\nPoint reflect(const Line &l, const Point &p) {\n\tPoint pr = proj(l, p);\n\treturn pr * 2.l - p;\n}\n\n// ??´?????¨??´????????????\nPoint is_ll(const Line &s, const Line& t) {\n\tPoint sv = s.b - s.a, tv = t.b - t.a;\n\tassert(cross(sv, tv) != 0);\n\treturn s.a + sv * cross(tv, t.a - s.a) / cross(tv, sv);\n}\n// ??´?????¨??´????????????\nvector<Point> is_ll2(const Line &s, const Line& t) {\n\tPoint sv = s.b - s.a, tv = t.b - t.a;\n\tif (cross(sv, tv) != 0)return vector<Point>(1, is_ll(s, t));\n\telse {\n\t\tvector<Point>ans;\n\t\tfor (int k = 0; k < 2; ++k) {\n\t\t\tif (isis_sp(s, t[k]) && find(ans.begin(), ans.end(), t[k]) == ans.end())ans.push_back(t[k]);\n\t\t\tif (isis_sp(t, s[k]) && find(ans.begin(), ans.end(), s[k]) == ans.end())ans.push_back(s[k]);\n\t\t}\n\t\treturn ans;\n\t}\n}\n// ????????¨???????????????\n//???????????£????????¨???????????¨assert(false)\nPoint is_ss(const Line &s, const Line& t) {\n\tif (isis_ss(s, t)) {\n\t\tfor (int k = 0; k < 2; ++k) {\n\t\t\tfor (int l = 0; l < 2; ++l) {\n\t\t\t\tif (s[k] == t[l])return s[k];\n\t\t\t}\n\t\t}\n\t\treturn is_ll(s, t);\n\t}\n\telse {\n\t\t//??????isis_ss?????????\n\t\tassert(false);\n\t\treturn Point(0, 0);\n\t}\n}\n// ????????¨???????????????\nvector<Point> is_ss2(const Line &s, const Line& t) {\n\tvector<Point> kouho(is_ll2(s, t));\n\tvector<Point>ans;\n\tfor (auto p : kouho) {\n\t\tif (isis_sp(s, p) && isis_sp(t, p))ans.emplace_back(p);\n\t}\n\treturn ans;\n}\n// ??´?????¨???????????¢\nld dist_lp(const Line& l, const Point& p) {\n\treturn abs(p - proj(l, p));\n}\n\n//??´?????¨??´???????????¢\nld dist_ll(const Line& l, const Line& m) {\n\treturn isis_ll(l, m) ? 0 : dist_lp(l, m.a);\n}\n\n// ??´?????¨??????????????¢\nld dist_ls(const Line& l, const Line& s) {\n\treturn isis_ls(l, s) ? 0 : min(dist_lp(l, s.a), dist_lp(l, s.b));\n}\n\n// ????????¨???????????¢\nld dist_sp(const Line& s, const Point& p) {\n\tPoint r = proj(s, p);\n\treturn isis_sp(s, r) ? abs(r - p) : min(abs(s.a - p), abs(s.b - p));\n}\n\n// ????????¨??????????????¢\nld dist_ss(const Line& s, const Line& t) {\n\tif (isis_ss(s, t)) return 0;\n\treturn min({ dist_sp(s, t.a), dist_sp(s, t.b), dist_sp(t, s.a), dist_sp(t, s.b) });\n}\n\n\n//??´?????¨??´?????????????????????????????????\nLine bisection(const Line &s, const Line &t) {\n\tconst Point laglanju(is_ll(s, t));\n\tconst Point avec = !(abs(laglanju - s[0])<eps) ? s[0] - laglanju : s[1] - laglanju;\n\tconst Point bvec = !(abs(laglanju - t[0])<eps) ? t[0] - laglanju : t[1] - laglanju;\n\n\treturn Line(laglanju, laglanju + (abs(bvec)*avec + abs(avec)*bvec) / (abs(avec) + abs(bvec)));\n}\n\n\n//???????????´?????????????????????\n//???????????´??????????????§???????????¨????¢?????????¨?????????\nPoint  inner_center(const vector<Line>&ls) {\n\tvector<Point>vertics;\n\tfor (int i = 0; i <static_cast<int>(ls.size()); ++i) {\n\t\tvertics.push_back(is_ll(ls[i], ls[(i + 1) % 3]));\n\t}\n\tif (vertics[0] == vertics[1] || vertics[1] == vertics[2] || vertics[2] == vertics[0])return vertics[0];\n\tLine bi1(bisection(Line(vertics[0], vertics[1]), Line(vertics[0], vertics[2])));\n\tLine bi2(bisection(Line(vertics[1], vertics[2]), Line(vertics[1], vertics[0])));\n\tif (bi1[0] == bi2[0])return bi1[0];\n\telse {\n\t\treturn is_ll(bi1, bi2);\n\t}\n}\n\n//???????????´?????????????????????\n//???????????´??????????????§???????????¨????¢?????????¨?????????\nvector<Point>  ex_center(const vector<Line>&ls) {\n\tvector<Point>vertics;\n\tfor (int i = 0; i < static_cast<int>(ls.size()); ++i) {\n\t\tvertics.push_back(is_ll(ls[i], ls[(i + 1) % 3]));\n\t}\n\tif (abs(vertics[0] - vertics[1])<eps || abs(vertics[1] - vertics[2])<eps || (abs(vertics[2] - vertics[0])<eps))return vector<Point>();\n\tvector<Point>ecs;\n\tfor (int i = 0; i < 3; ++i) {\n\t\tLine bi1(bisection(Line(vertics[i], vertics[i] * 2.0l - vertics[(i + 2) % 3]), Line(vertics[i], vertics[(i + 1) % 3])));\n\t\tLine bi2(bisection(Line(vertics[(i + 1) % 3], vertics[(i + 1) % 3] * 2.0l - vertics[(i + 2) % 3]), Line(vertics[(i + 1) % 3], vertics[i])));\n\t\tecs.push_back(is_ll(bi1, bi2));\n\t}\n\treturn ecs;\n}\n\n\n//a,b:??????\n//c:????????§??????\n//???????????´?????????????????¢?????????????±??????????\nvector<Point>  same_dis(const vector<Line>&ls) {\n\tvector<Point>vertics;\n\tvertics.push_back(is_ll(ls[0], ls[2]));\n\tvertics.push_back(is_ll(ls[1], ls[2]));\n\n\tif (abs(vertics[0] - vertics[1]) < eps)return vector<Point>{vertics[0]};\n\tLine bis(bisection(ls[0], ls[1]));\n\tvector<Point>ecs;\n\n\tLine abi(bisection(Line(vertics[0], vertics[1]), ls[0]));\n\tecs.push_back(is_ll(bis, abi));\n\n\n\tLine bbi(bisection(Line(vertics[0], 2.l*vertics[0] - vertics[1]), ls[0]));\n\tecs.push_back(is_ll(bis, bbi));\n\n\treturn ecs;\n}\n/* ??? */\n\n// ?????¨????????????\nvector<Point> is_cc(const Circle& c1, const Circle& c2) {\n\tvector<Point> res;\n\tld d = abs(c1.p - c2.p);\n\tld rc = (d * d + c1.r * c1.r - c2.r * c2.r) / (2 * d);\n\tld dfr = c1.r * c1.r - rc * rc;\n\tif (abs(dfr) < eps) dfr = 0.0;\n\telse if (dfr < 0.0) return res; // no intersection\n\tld rs = sqrt(dfr);\n\tPoint diff = (c2.p - c1.p) / d;\n\tres.push_back(c1.p + diff * Point(rc, rs));\n\tif (dfr != 0.0) res.push_back(c1.p + diff * Point(rc, -rs));\n\treturn res;\n}\n\n//???????????????????????????\n/*  0 => out\n1 => on\n2 => in*/\nint is_in_Circle(const Circle &cir, const  Point& p) {\n\tld dis = abs(cir.p - p);\n\tif (dis > cir.r + eps)return 0;\n\telse if (dis < cir.r - eps)return 2;\n\telse return 1;\n}\n//???lc??????rc??????????????????\n/*0 => out\n1 => on\n2 => in*/\nint Circle_in_Circle(const Circle &lc, const  Circle&rc) {\n\tld dis = abs(lc.p - rc.p);\n\tif (dis < rc.r - lc.r - eps)return 2;\n\telse if (dis>rc.r - lc.r + eps)return 0;\n\telse return 1;\n}\n\n// ?????¨??´????????????\nvector<Point> is_lc(const Circle& c, const Line& l) {\n\tvector<Point> res;\n\tld d = dist_lp(l, c.p);\n\tif (d < c.r + eps) {\n\t\tld len = (d > c.r) ? 0.0 : sqrt(c.r * c.r - d * d); //safety;\n\t\tPoint nor = (l.a - l.b) / abs(l.a - l.b);\n\t\tres.push_back(proj(l, c.p) + len * nor);\n\t\tres.push_back(proj(l, c.p) - len * nor);\n\t}\n\treturn res;\n}\n\n// ?????¨??????????????¢\nvector<Point> is_sc(const Circle& c, const Line& l) {\n\tvector<Point> v = is_lc(c, l), res;\n\tfor (Point p : v)\n\t\tif (isis_sp(l, p)) res.push_back(p);\n\treturn res;\n}\n\n// ?????¨????????\\???\nvector<Line> tangent_cp(const Circle& c, const Point& p) {\n\tvector<Line> ret;\n\tPoint v = c.p - p;\n\tld d = abs(v);\n\tld l = sqrt(norm(v) - c.r * c.r);\n\tif (isnan(l)) { return ret; }\n\tPoint v1 = v * Point(l / d, c.r / d);\n\tPoint v2 = v * Point(l / d, -c.r / d);\n\tret.push_back(Line(p, p + v1));\n\tif (l < eps) return ret;\n\tret.push_back(Line(p, p + v2));\n\treturn ret;\n}\n\n// ?????¨????????\\???\nvector<Line> tangent_cc(const Circle& c1, const Circle& c2) {\n\tvector<Line> ret;\n\tif (abs(c1.p - c2.p) - (c1.r + c2.r) > -eps) {\n\t\tPoint center = (c1.p * c2.r + c2.p * c1.r) / (c1.r + c2.r);\n\t\tret = tangent_cp(c1, center);\n\t}\n\tif (abs(c1.r - c2.r) > eps) {\n\t\tPoint out = (-c1.p * c2.r + c2.p * c1.r) / (c1.r - c2.r);\n\t\tvector<Line> nret = tangent_cp(c1, out);\n\t\tret.insert(ret.end(), all(nret));\n\t}\n\telse {\n\t\tPoint v = c2.p - c1.p;\n\t\tv /= abs(v);\n\t\tPoint q1 = c1.p + v * Point(0, 1) * c1.r;\n\t\tPoint q2 = c1.p + v * Point(0, -1) * c1.r;\n\t\tret.push_back(Line(q1, q1 + v));\n\t\tret.push_back(Line(q2, q2 + v));\n\t}\n\treturn ret;\n}\n//??????????????????????????¢???\nld two_Circle_area(const Circle&l, const Circle&r) {\n\tld dis = abs(l.p - r.p);\n\tif (dis > l.r + r.r)return 0;\n\telse if (dis + r.r < l.r) {\n\t\treturn r.r*r.r*pi;\n\t}\n\telse if (dis + l.r < r.r) {\n\t\treturn l.r*l.r*pi;\n\t}\n\telse {\n\t\tld ans = (l.r)*(l.r)*acos((dis*dis + l.r*l.r - r.r*r.r) / (2 * dis*l.r)) +\n\t\t\t(r.r)*(r.r)*acos((dis*dis + r.r*r.r - l.r*l.r) / (2 * dis*r.r)) -\n\t\t\tsqrt(4 * dis*dis*l.r*l.r - (dis*dis + l.r*l.r - r.r*r.r)*(dis*dis + l.r*l.r - r.r*r.r)) / 2;\n\t\treturn ans;\n\t}\n\n}\n\n/* ????§???¢ */\n\ntypedef vector<Point> Polygon;\n\n// ??¢???\nld area(const Polygon &p) {\n\tld res = 0;\n\tint n = p.size();\n\trep(j, n) res += cross(p[j], p[(j + 1) % n]);\n\treturn res / 2;\n}\n\n//????§???¢????????¢??????\nbool is_counter_clockwise(const Polygon &poly) {\n\tld angle = 0;\n\tint n = poly.size();\n\trep(i, n) {\n\t\tPoint a = poly[i], b = poly[(i + 1) % n], c = poly[(i + 2) % n];\n\t\tangle += arg((c - b) / (b - a));\n\t}\n\treturn angle > eps;\n}\n\n// ??????????????????\n/*0 => out\n1 => on\n2 => in*/\nint is_in_Polygon(const Polygon &poly, const  Point& p) {\n\tld angle = 0;\n\tint n = poly.size();\n\trep(i, n) {\n\t\tPoint a = poly[i], b = poly[(i + 1) % n];\n\t\tif (isis_sp(Line(a, b), p)) return 1;\n\t\tangle += arg((b - p) / (a - p));\n\t}\n\treturn eq(angle, 0) ? 0 : 2;\n}\n//??????????????????2?????????\nenum { out, on, in };\nint convex_contains(const Polygon &P, const Point &p) {\n\tconst int n = P.size();\n\tPoint g = (P[0] + P[n / 3] + P[2 * n / 3]) / 3.0l; // inner-point\n\tint a = 0, b = n;\n\twhile (a + 1 < b) { // invariant: c is in fan g-P[a]-P[b]\n\t\tint c = (a + b) / 2;\n\t\tif (cross(P[a] - g, P[c] - g) > 0) { // angle < 180 deg\n\t\t\tif (cross(P[a] - g, p - g) > 0 && cross(P[c] - g, p - g) < 0) b = c;\n\t\t\telse                                                  a = c;\n\t\t}\n\t\telse {\n\t\t\tif (cross(P[a] - g, p - g) < 0 && cross(P[c] - g, p - g) > 0) a = c;\n\t\t\telse                                                  b = c;\n\t\t}\n\t}\n\tb %= n;\n\tif (cross(P[a] - p, P[b] - p) < 0) return 0;\n\tif (cross(P[a] - p, P[b] - p) > 0) return 2;\n\treturn 1;\n}\n\n// ??????\n//???????????????????????¨????????????????????§??¨???\nPolygon convex_hull(vector<Point> ps) {\n\tint n = ps.size();\n\tint k = 0;\n\tsort(ps.begin(), ps.end());\n\tPolygon ch(2 * n);\n\tfor (int i = 0; i < n; ch[k++] = ps[i++])\n\t\twhile (k >= 2 && ccw(ch[k - 2], ch[k - 1], ps[i]) <= 0) --k;\n\tfor (int i = n - 2, t = k + 1; i >= 0; ch[k++] = ps[i--])\n\t\twhile (k >= t && ccw(ch[k - 2], ch[k - 1], ps[i]) <= 0) --k;\n\tch.resize(k - 1);\n\treturn ch;\n}\n\n\n\n//????????????\nvector<Polygon> convex_cut(const Polygon &ps, const Line& l) {\n\tint n = ps.size();\n\tPolygon q;\n\tPolygon r;\n\trep(i, n) {\n\t\tPoint a = ps[i], b = ps[(i + 1) % n];\n\t\tLine m = Line(a, b);\n\t\tif (ccw(l.a, l.b, a) != -1) q.push_back(a);\n\t\tif (ccw(l.a, l.b, a) != 1) r.push_back(a);\n\t\tif (ccw(l.a, l.b, a) * ccw(l.a, l.b, b) < 0 && isis_ll(l, m)) {\n\t\t\tq.push_back(is_ll(l, m));\n\t\t\tr.push_back(is_ll(l, m));\n\t\t}\n\t}\n\tconst vector<Polygon>polys{ q,r };\n\treturn polys;\n}\n\n\n/* ??¢??¬??????????????? */\nvoid add_Point(vector<Point> &ps, const Point p) {\n\tfor (Point q : ps) if (abs(q - p) < eps) return;\n\tps.push_back(p);\n}\n\ntypedef int Weight;\nstruct edge {\n\tint src, dst;\n\tWeight weight;\n\tedge(int src, int dst, Weight weight) :\n\t\tsrc(src), dst(dst), weight(weight) { }\n};\n\ntypedef vector<edge> edges;\ntypedef vector<edges> graph;\n\nvoid add_edge(graph &g, const int from, const int to, const Weight& weight) {\n\tg[from].push_back(edge{ from, to, weight });\n}\n\ngraph segment_arrangement(const vector<Line> &s, const vector<Point> &p) {\n\tint n = p.size(), m = s.size();\n\tgraph g(n);\n\trep(i, m) {\n\t\tvector<pair<ld, int>> vec;\n\t\trep(j, n) if (isis_sp(s[i], p[j]))\n\t\t\tvec.emplace_back(abs(s[i].a - p[j]), j);\n\t\tsort(all(vec));\n\t\trep(j, vec.size() - 1) {\n\t\t\tint from = vec[j].second, to = vec[j + 1].second;\n\t\t\tadd_edge(g, from, to, static_cast<Weight>(abs(p[from] - p[to])));\n\t\t}\n\t}\n\treturn g;\n}\ngraph sennbunn_arrangement(const vector<Line>&s) {\n\tvector<Point>crss;\n\tfor (int i = 0; i < static_cast<int>(s.size()); ++i) {\n\t\tfor (int j = i + 1; j < static_cast<int>(s.size()); ++j) {\n\t\t\tif (isis_ss(s[i], s[j])) {\n\t\t\t\tcrss.push_back(is_ll2(s[i], s[j])[0]);\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0; i <static_cast<int>(s.size()); ++i) {\n\t\tcrss.push_back(s[i][0]);\n\t\tcrss.push_back(s[i][1]);\n\t}\n\treturn segment_arrangement(s, crss);\n}\n\ngraph Circle_arrangement(const vector<Circle> &c, const vector<Point> &p) {\n\tint n = p.size(), m = c.size();\n\tgraph g(n);\n\trep(i, m) {\n\t\tvector<pair<ld, int>> vec;\n\t\trep(j, n) if (abs(abs(c[i].p - p[j]) - c[i].r) < eps)\n\t\t\tvec.emplace_back(arg(c[i].p - p[j]), j);\n\t\tsort(all(vec));\n\t\trep(j, vec.size() - 1) {\n\t\t\tint from = vec[j].second, to = vec[j + 1].second;\n\t\t\tld angle = vec[j + 1].first - vec[j].first;\n\t\t\tadd_edge(g, from, to, static_cast<Weight>(angle * c[i].r));\n\t\t}\n\t\tif (vec.size() >= 2) {\n\t\t\tint from = vec.back().second, to = vec.front().first;\n\t\t\tld angle = vec.front().first - vec.back().first;\n\t\t\tadd_edge(g, from, to, static_cast<Weight>(angle * c[i].r));\n\t\t}\n\t}\n\treturn g;\n}\n\nint main() {\n\tint Q; cin >> Q;\n\tcout << setprecision(10) << fixed;\n\twhile (Q--) {\n\t\tLine l0(input_Point(), input_Point());\n\t\tLine l1(input_Point(), input_Point());\n\t\tcout << dist_ss(l0, l1) << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n \nusing ll = long long; using ld = long double; using ull = unsigned long long; using uint = unsigned int;\nusing vi  = vector<int>; using vb  = vector<bool>; using vd  = vector<double>; using vl  = vector<ll>;\nusing vvi = vector<vi>;  using vvb = vector<vb>;   using vvd = vector<vd>;     using vvl = vector<vl>;\n \n#define REP(i,n) for(ll i=0; i<(n); ++i)\n#define FOR(i,b,n) for(ll i=(b); i<(n); ++i)\n#define ALL(v) (v).begin(), (v).end()\n#define TEN(x) ((ll)1e##x)\n \ntemplate<typename T> inline string join(const vector<T>& vec, string sep = \" \") { stringstream ss; REP(i, vec.size()) ss << vec[i] << ( i+1 == vec.size() ? \"\" : sep ); return ss.str(); }\n \n \n///////////////\n \n#define EPS (1e-10)\n#define NEXT(x, i) (x[(i + 1) % x.size()])\n \ntemplate<class T> using CR = const T &;\nusing P = complex<ld>;\nusing G = vector<P>;\n \nint sgn(ld a, ld b = 0) {\n    if (a > b + EPS) return 1;\n    if (a < b - EPS) return -1;\n    return 0;\n}\n \nld dot(P a, P b) { return real(conj(a)*b); }\nld cross(P a, P b) { return imag(conj(a)*b); }\n \nint ccw(P a, P b, P c) {\n    b -= a;\n    c -= a;\n    if (sgn(cross(b, c))) return sgn(cross(b, c)); // clockwise or counter clockwise\n    if (sgn(dot(b, c)) == -1) return 2;            // c--a--b\n    if (sgn(norm(b), norm(c)) == -1) return -2;    // a--b--c\n    return 0;                                      // a--c--b\n}\n \nstruct L : public vector<P> {\n    L(P a, P b) { push_back(a); push_back(b); }\n};\n\nbool iLL(CR<L> l, CR<L> m, bool strict = false) {\n\tif (sgn(cross(l[1] - l[0], m[1] - m[0]))) return true;   // not-parallel\n\treturn !strict && !sgn(cross(l[1] - l[0], m[0] - l[0])); // same line\n}\nbool iLS(CR<L> l, CR<L> s, bool strict = false) {\n\tint c = sgn(cross(l[1] - l[0], s[0] - l[0])) * sgn(cross(l[1] - l[0], s[1] - l[0]));\n\treturn c <= 0 && (!strict || c == -1);\n}\nbool iSS(CR<L> s, CR<L> t, bool strict = false) {\n\tint ccwa = ccw(s[0], s[1], t[0]) * ccw(s[0], s[1], t[1]);\n\tint ccwb = ccw(t[0], t[1], s[0]) * ccw(t[0], t[1], s[1]);\n\treturn ccwa <= 0 && (!strict || ccwa == -1)\n\t\t&& ccwb <= 0 && (!strict || ccwb == -1);\n}\nld dLP(CR<L> l, P p) { return abs(cross((l[1] - l[0]), p - l[0]) / (l[1] - l[0])); }\nld dSP(CR<L> s, P p) { return max(dLP(s, p), min(abs(p - s[0]), abs(p - s[1]))); }\nld dLL(CR<L> a, CR<L> b) { return iLL(a, b) ? 0 : dLP(a, b[0]); }\nld dLS(CR<L> a, CR<L> b) { return iLS(a, b) ? 0 : min(dLP(a, b[0]), dLP(a, b[1])); }\nld dSS(CR<L> a, CR<L> b) { return iSS(a, b) ? 0 : min(min(dSP(a, b[0]), dSP(a, b[1])), min(dSP(b, a[0]), dSP(b, a[1]))); }\n\n//////////////\n \nint main() {\n#ifdef INPUT_FROM_FILE\n    ifstream cin(\"sample.in\");\n    ofstream cout(\"sample.out\");\n#endif\n    cin.tie(0);\n    ios_base::sync_with_stdio(false);\n    cout << fixed << setprecision(30);\n\tll n; cin >> n;\n\tREP(i, n) {\n\t\tld x0, y0, x1, y1, x2, y2, x3, y3;\n\t\tcin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n\t\tcout << dSS({ { x0, y0 }, { x1, y1 } }, { { x2, y2 }, { x3, y3 } }) << endl;\n\t}\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define SIZE 300005\n#define MOD 1000000007LL\n#define INF 1 << 29\n#define LLINF 1LL << 60\n#define REP(i,n) for(int i=0;i<n;i++)\n#define FOR(i,a,b) for(int i=a;i<=b;i++)\n#define DOWN(i,b,a) for(int i=b;i>=a;i--)\n#define SET(a,c) memset(a,c,sizeof a)\n#define BIT(i,j) ((i)>>(j))&1\n#define ALL(o) (o).begin(), (o).end()\n#define ERASE(o) (o).erase(unique((o).begin(),(o).end()), (o).end())\n#define SQ(x) ((x)*(x))\nusing namespace std;\ntypedef long long ll;\ntypedef pair<ll,ll> Pll;\ntypedef pair<int, int> Pii;\ntypedef pair<double, double> Pdd;\ntypedef complex<double> dcomplex;\ntemplate<typename T> inline void priv(vector<T>a){REP(i,a.size()){cerr<<a[i]<<((i==a.size()-1)?\"\\n\":\" \");}}\nll gcd(ll a,ll b){int c=max(a,b);int d=min(a,b);return c==0||d==0?c:gcd(c%d,d);}\nll lcm(ll a,ll b){return a==0||b==0?0:a*b/gcd(a,b);}\nll fact(ll a){ll b=1;FOR(i,1,a)b*=i;return b;}\n\nclass P\n{\npublic:\n  double x,y;\n  P(){};P(double x,double y):x(x),y(y){};\n  P operator+(const P&q){P t;t.x=x+q.x;t.y=y+q.y;return t;}\n  P operator+=(const P&q){x+=q.x;y+=q.y;return *this;}\n  P operator-(const P&q){P t;t.x=x-q.x;t.y=y-q.y;return t;}\n  P operator-=(const P&q){x-=q.x;y-=q.y;return *this;}\n  template<typename T> P operator*(T d){return P(x*d,y*d);}\n  template<typename T> P operator*=(T d){x*=d;y*=d;return *this;}\n  template<typename T> P operator/(T d){return P(x/d,y/d);}\n  template<typename T> P operator/=(T d){x/=d;y/=d;return *this;}\n  bool operator<(const P&q){return (x!=q.x)?(x<q.x):(y<q.y);}\n  bool operator>(const P&q){return (x!=q.x)?(x>q.x):(y>q.y);}\n  double norm(void){return sqrt(x*x+y*y);}\n  double arg(void){return acos(x/this->norm())*P(1,0).sign(*this);}\n  P rotate(double t){double c=cos(t),s=sin(t);return P(c*x-s*y,s*x+c*y);}\n  P nvec(void){return P(y,-x);}\n  P reverseX(void){return P(-x,y);}\n  P reverseY(void){return P(x,-y);}\n  P unit(void){return (*this).norm()==0?P(0,0):(*this)/(*this).norm();}\n  P floor(void){return P((int)x,(int)y);}\n  double dot(const P&q){return x*q.x+y*q.y;}\n  double det(const P&q){return x*q.y-y*q.x;}\n  int sign(const P&q){double d = (*this).det(q); return (d>0)-(d<0);}\n  static bool on_seg(P p1,P p2,P q){return (p1-q).det(p2-q)==0&&(p1-q).dot(p2-q)<=0;}\n  static P intersection(P p1,P p2,P q1,P q2){return p1+(p2-p1)*((q2-q1).det(q1-p1)/(q2-q1).det(p2-p1));}\n  static bool crossing(P p1,P p2,P q1,P q2)\n  {\n    if((p2-p1).sign(q2-q1)==0) return on_seg(p1,p2,q1)||on_seg(p1,p2,q2)||on_seg(q1,q2,p1)||on_seg(q1,q2,p2);\n    double x=(q2-q1).det(q1-p1)/(q2-q1).det(p2-p1);\n    double y=(p2-p1).det(p1-q1)/(p2-p1).det(q2-q1);\n    return x<=1 && x>=0 && y<=1 && y>=0;\n  }\n};\n\nint main()\n{\n  int q; cin >> q;\n  REP(i,q)\n  {\n    double ans,x0,y0,x1,y1,x2,y2,x3,y3;\n    cin>>x0>>y0>>x1>>y1>>x2>>y2>>x3>>y3;\n    P p0 = P(x0,y0);\n    P p1 = P(x1,y1);\n    P p2 = P(x2,y2);\n    P p3 = P(x3,y3);\n    P nu = (p1-p0).nvec();\n    P nv = (p3-p2).nvec();\n    P q0 = P::intersection(p2,p3,p0,p0+nv);\n    P q1 = P::intersection(p2,p3,p1,p1+nv);\n    P q2 = P::intersection(p0,p1,p2,p2+nu);\n    P q3 = P::intersection(p0,p1,p3,p3+nu);\n    P r0 = P::intersection(p2,p3,p0,p0+nu);\n    P r1 = P::intersection(p2,p3,p1,p1+nu);\n    P r2 = P::intersection(p0,p1,p2,p2+nv);\n    P r3 = P::intersection(p0,p1,p3,p3+nv);\n    if(P::crossing(p0,p1,p2,p3)) ans = 0.0;\n    else\n    {\n      double d0,d1,d2,d3;\n      d0 = (p2-p0).norm();\n      d1 = (p2-p1).norm();\n      d2 = (p3-p0).norm();\n      d3 = (p3-p1).norm();\n      double e0,e1,e2,e3;\n      e0 = P::on_seg(p2,p3,q0) ? (q0-p0).norm() : 1e30;\n      e1 = P::on_seg(p2,p3,q1) ? (q1-p1).norm() : 1e30;\n      e2 = P::on_seg(p0,p1,q2) ? (q2-p2).norm() : 1e30;\n      e3 = P::on_seg(p0,p1,q3) ? (q3-p3).norm() : 1e30;\n      double f0,f1,f2,f3;\n      f0 = P::on_seg(p2,p3,r0) ? (r0-p0).norm() : 1e30;\n      f1 = P::on_seg(p2,p3,r1) ? (r1-p1).norm() : 1e30;\n      f2 = P::on_seg(p0,p1,r2) ? (r2-p2).norm() : 1e30;\n      f3 = P::on_seg(p0,p1,r3) ? (r3-p3).norm() : 1e30;\n      ans = min({d0,d1,d2,d3,e0,e1,e2,e3,f0,f1,f2,f3});\n    }\n    printf(\"%.10lf\\n\",ans);\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define _CRT_SECURE_NO_WARNINGS\n#define _USE_MATH_DEFINES\n#include<bits/stdc++.h>\n#define INF         1e9\n#define EPS         1e-9\n#define REP(i,n)    for(lint i=0,i##_len=(n);i<i##_len;++i)\n#define REP1(i,n)   for(lint i=1,i##_len=(n);i<=i##_len;++i)\n#define REPR(i,n)   for(lint i=(n)-1;i>=0;--i)\n#define REPR1(i,n)  for(lint i=(n);i>0;--i)\n#define REPC(i,obj) for(auto i:obj)\n#define R_UP(a,b)   (((a)+(b)-1)/(b))\n#define ALL(obj)    (obj).begin(),(obj).end()\n#define SETP        cout << fixed << setprecision(10)\nusing namespace std;\nusing lint = long long;\ntemplate<typename T = lint>inline T in() { T x; cin >> x; return x; }\n\nclass line2d;\nclass vec2d {\npublic:\n\tdouble x, y;\n\tvec2d(double, double);\n\tvec2d operator+(const vec2d&)const;\n\tvec2d operator-(const vec2d&)const;\n\tvec2d operator*(double)const;\n\tvec2d operator/(double)const;\n\tbool operator==(const vec2d&)const;\n\tbool operator!=(const vec2d&)const;\n\tdouble norm() const;\n\tstatic double inner_product(const vec2d&, const vec2d&);\n\tstatic double cros_product(const vec2d&, const vec2d&);\n\tstatic double argument(const vec2d&, const vec2d&, bool = true);\n\tstatic double distance(const vec2d&, const vec2d&);\n\tstatic vec2d projection(const vec2d&, const vec2d&);\n\tstatic vec2d reflection(const vec2d&, const line2d&);\n};\nclass line2d {\npublic:\n\tvec2d v0, v1;\n\tline2d(const vec2d&, const vec2d&);\n\tdouble length()const;\n\tstatic vec2d cross_point(const line2d&, const line2d&);\n\tstatic bool is_cross(const line2d&, const line2d&);\n\tstatic double distance(const vec2d&, const line2d&);\n\tstatic double distance(const line2d&, const line2d&);\n};\nvec2d::vec2d(double x, double y) :x(x), y(y) {}\nvec2d vec2d::operator+(const vec2d&v)const {\n\treturn vec2d(x + v.x, y + v.y);\n}\nvec2d vec2d::operator-(const vec2d&v)const {\n\treturn vec2d(x - v.x, y - v.y);\n}\nvec2d vec2d::operator*(double k)const {\n\treturn vec2d(x * k, y * k);\n}\nvec2d vec2d::operator/(double k)const {\n\treturn vec2d(x / k, y / k);\n}\nbool vec2d::operator==(const vec2d&v)const {\n\treturn x == v.x && y == v.y;\n}\nbool vec2d::operator!=(const vec2d&v)const {\n\treturn !operator== (v);\n}\ndouble vec2d::norm() const {\n\treturn sqrt(x * x + y * y);\n}\ndouble vec2d::inner_product(const vec2d&v0, const vec2d&v1) {\n\treturn v0.x * v1.x + v0.y * v1.y;\n}\ndouble vec2d::cros_product(const vec2d&v0, const vec2d&v1) {\n\treturn v0.x * v1.y - v0.y * v1.x;\n}\ndouble vec2d::argument(const vec2d&v0, const vec2d&v1, bool is_signed) {\n\tdouble ret = atan2(cros_product(v0, v1), inner_product(v0, v1));\n\treturn is_signed ? ret : abs(ret);\n}\ndouble vec2d::distance(const vec2d&v0, const vec2d&v1) {\n\treturn hypot(v1.x - v0.x, v1.y - v0.y);\n}\nvec2d vec2d::projection(const vec2d&scr, const vec2d&v) {\n\tdouble n = scr.norm();\n\treturn scr * vec2d::inner_product(scr, v) / n / n;\n}\nvec2d vec2d::reflection(const vec2d&v, const line2d&l) {\n\treturn (projection(vec2d(l.v1 - l.v0), vec2d(v - l.v0)) + l.v0) * 2 - v;\n}\nline2d::line2d(const vec2d&v0, const vec2d&v1) :v0(v0), v1(v1) {}\ndouble line2d::length()const {\n\treturn vec2d::distance(v0, v1);\n}\nvec2d line2d::cross_point(const line2d&l0, const line2d&l1) {\n\treturn vec2d(((l0.v1.x * l0.v0.y - l0.v0.x * l0.v1.y) * (l1.v1.x - l1.v0.x) - (l1.v1.x * l1.v0.y - l1.v0.x * l1.v1.y) * (l0.v1.x - l0.v0.x)) / ((l0.v1.x - l0.v0.x) * (l1.v1.y - l1.v0.y) - (l1.v1.x - l1.v0.x) * (l0.v1.y - l0.v0.y)), ((l0.v1.x * l0.v0.y - l0.v0.x * l0.v1.y) * (l1.v1.y - l1.v0.y) - (l1.v1.x * l1.v0.y - l1.v0.x * l1.v1.y) * (l0.v1.y - l0.v0.y)) / ((l0.v1.x - l0.v0.x) * (l1.v1.y - l1.v0.y) - (l1.v1.x - l1.v0.x) * (l0.v1.y - l0.v0.y)));\n}\nbool line2d::is_cross(const line2d&l0, const line2d&l1) {\n\tvec2d cross = cross_point(l0, l1);\n\tif (std::isnan(cross.x) && std::isnan(cross.y)) {\n\t\tdouble dis_sum = vec2d::distance(l0.v0, l0.v1) + vec2d::distance(l1.v0, l1.v1);\n\t\tdouble dis_max = max({ vec2d::distance(l0.v0, l0.v1),vec2d::distance(l0.v0, l1.v0),vec2d::distance(l0.v0, l1.v1),vec2d::distance(l0.v1, l1.v0),vec2d::distance(l0.v1, l1.v1),vec2d::distance(l1.v0, l1.v1) });\n\t\treturn dis_max < dis_sum || abs(dis_max - dis_sum) < EPS;\n\t} else if (std::isinf(cross.x) || std::isinf(cross.y)) {\n\t\treturn false;\n\t} else {\n\t\tvec2d v_l0 = l0.v1 - l0.v0;\n\t\tvec2d cross_l0 = cross - l0.v0;\n\t\tdouble ks0 = v_l0.x != 0 ? cross_l0.x / v_l0.x : cross_l0.y / v_l0.y;\n\t\tvec2d v_l1 = l1.v1 - l1.v0;\n\t\tvec2d cross_l1 = cross - l1.v0;\n\t\tdouble ks1 = v_l1.x != 0 ? cross_l1.x / v_l1.x : cross_l1.y / v_l1.y;\n\t\treturn 0 <= ks0 && ks0 <= 1 && 0 <= ks1 && ks1 <= 1;\n\t}\n}\ndouble line2d::distance(const vec2d&v, const line2d&l) {\n\tline2d l_ref(v, vec2d::reflection(v, l));\n\treturn is_cross(l, l_ref) ? l_ref.length() / 2 : min({ vec2d::distance(v,l.v0),vec2d::distance(v,l.v1) });\n}\ndouble line2d::distance(const line2d&l0, const line2d&l1) {\n\treturn is_cross(l0, l1) ? 0 : min({ distance(l0.v0,l1),distance(l0.v1,l1),distance(l1.v0,l0),distance(l1.v1,l0) });\n}\n\nsigned main() {\n\tSETP;\n\tint q = in();\n\tREP(i, q) {\n\t\tdouble xp0 = in(), yp0 = in(), xp1 = in(), yp1 = in(), xp2 = in(), yp2 = in(), xp3 = in(), yp3 = in();\n\t\tvec2d p0(xp0, yp0), p1(xp1, yp1), p2(xp2, yp2), p3(xp3, yp3);\n\t\tline2d s1(p0, p1), s2(p2, p3);\n\t\tcout << line2d::distance(s1, s2) << endl;\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <complex>\n#include <tuple>\nusing namespace std;\n\nusing vec = complex<double>;\nusing line = pair<vec,vec>;\nconst double eps = 0.0000001;\n\ndouble inner_product(vec u,vec v){\n    return real(u*conj(v));\n}\ndouble cross_product(vec u,vec v){\n    return imag(conj(u)*v);\n}\n\nvec projection(line l,vec p){//p???l???????°???±\n    vec s=l.first, t=l.second;\n    double k = inner_product(t-s,p-s)/inner_product(t-s,t-s);\n    return (1.0-k)*s+k*t;\n}\n\nvec reflection(line l,vec p){\n    return 2.0*projection(l,p)-p;\n}\n\nint ccw(vec& a, vec& b, vec& c){\n    vec ab = b-a, ac = c-a;\n    double o = cross_product(ab,ac);\n    if(o>0) return 1; //CCW\n    if(o<0) return -1; //CW\n    if(inner_product(ab,ac)<0){\n        return 2; //C-A-B\n    }else{\n        if(inner_product(ab,ab)<inner_product(ac,ac)){\n            return -2; //A-B-C\n        }else{\n            return 0; //A-C-B\n        }\n    }\n}\n\nbool isIntersect(line l0, line l1){\n    int s = ccw(l0.first,l0.second,l1.first)*ccw(l0.first,l0.second,l1.second);\n    if(s!=0&&s!=-1&&s!=-4) return false;\n    s=ccw(l1.first,l1.second,l0.first)*ccw(l1.first,l1.second,l0.second);\n    if(s!=0&&s!=-1&&s!=-4) return false;\n    else return true;\n}\n\nvec interSection(line l0, line l1){\n    vec s0, t0, s1, t1;\n    tie(s0,t0)=l0; tie(s1,t1)=l1;\n    double k = cross_product(t1-s1,s1-s0)/cross_product(t1-s1,t0-s0);\n    return s0+(t0-s0)*k;\n}\n\ndouble segLength(line l){\n    return abs(l.first-l.second);\n}\n\ndouble distLine2point(line l, vec p){\n    return abs(cross_product(l.second-l.first,p-l.first))/abs(l.second-l.first);\n}\n\ndouble distSeg2Point(line l, vec p){\n    vec x = projection(l,p);\n    double L = segLength(l);\n    if(abs(x-l.first)<L&&abs(x-l.second)<L){\n        return abs(x-p);\n    }else{\n        return min(abs(l.first-p),abs(l.second-p));\n    }\n}\n\ndouble distSeg2Seg(line l1, line l2){\n    if(isIntersect(l1,l2)) return 0;\n    double ret = 1e20;\n    ret = min(ret,distSeg2Point(l1,l2.first));\n    ret = min(ret,distSeg2Point(l1,l2.second));\n    swap(l1,l2);\n    ret = min(ret,distSeg2Point(l1,l2.first));\n    ret = min(ret,distSeg2Point(l1,l2.second));\n    return ret;\n}\n\n//???????????§???????????????\nint main(void){\n    int q;\n    cin >> q;\n    cout.precision(10);\n    cout << fixed;\n    for(int i=0;i<q;i++){\n        int x,y;\n        cin>>x>>y; vec p0(x,y);\n        cin>>x>>y; vec p1(x,y);\n        cin>>x>>y; vec p2(x,y);\n        cin>>x>>y; vec p3(x,y);\n        cout<<distSeg2Seg(line(p0,p1),line(p2,p3))<<endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define rep(i, n) for (int i = 0; i < (int)(n); i++)\n#define each(i, c) for (__typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i)\n#define chmin(a, b) a = min(a, b)\n#define chmax(a, b) a = max(a, b)\n#define pb push_back\n#define mp make_pair\n\n#define X real()\n#define Y imag()\n\nconst double EPS = 1e-12;\nconst double INF = 1e12;\nconst double PI = acos(-1.0);\n\ndouble SQ(double a){ return a * a; }\nbool EQ(double a, double b){ return abs(a - b) < EPS; }\nbool LT(double a, double b){ return a - b < -EPS; }\nbool LEQ(double a, double b){ return a - b < EPS; }\n\ndouble toRad(double t){ return t / 180 * PI; }\ndouble toDeg(double t){ return t * 180 / PI; }\n\ntypedef complex<double> Point;\nnamespace std {\n\tbool operator < (const Point &a, const Point &b){\n\t\tif (a.X != b.X) return a.X < b.X;\n\t\treturn a.Y < b.Y;\n\t}\n\t\n\tistream& operator >> (istream &is, Point &a){\n\t\tdouble x, y;\n\t\tis >> x >> y;\n\t\ta = Point(x, y);\n\t\treturn is;\n\t}\n\t\n\tostream& operator << (ostream &os, Point a){\n\t\treturn os << a.X << \" \" << a.Y;\n\t}\n}\n\nstruct Line {\n\tPoint p1, p2;\n};\n\ntypedef Line Segment;\n\nstruct Circle {\n\tPoint p;\n\tdouble r;\n};\n\ntypedef vector<Point> Polygon;\n\n\ndouble norm(Point p){ return SQ(p.X) + SQ(p.Y); }\n\ndouble dot(Point a, Point b){ return (conj(a) * b).X; }\ndouble cross(Point a, Point b){ return (conj(a) * b).Y; }\n\nenum CCW {\n\tCOUNTER_CLOCKWISE = 1,\n\tCLOCKWISE = -1,\n\tONLINE_BACK = 2,\n\tONLINE_FRONT = -2,\n\tON_SEGMENT = 0,\n};\n\nint ccw(Point p0, Point p1, Point p2){\n\tPoint a = p1 - p0;\n\tPoint b = p2 - p0;\n\tif (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS) return CLOCKWISE;\n\tif (dot(a, b) < -EPS) return ONLINE_BACK;\n\tif (LT(norm(a), norm(b))) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\nbool orthogonal(Line l1, Line l2){\n\treturn EQ(dot(l1.p2 - l1.p1, l2.p2 - l2.p1), 0.0);\n}\n\nbool parallel(Line l1, Line l2){\n\treturn EQ(cross(l1.p2 - l1.p1, l2.p2 - l2.p1), 0.0);\n}\n\nPoint project(Line l, Point p){\n\tPoint base = l.p2 - l.p1;\n\tdouble r = dot(p - l.p1, base) / norm(base);\n\treturn l.p1 + base * r;\n}\n\nPoint reflect(Line &l, Point &p){\n\treturn p + (project(l, p) - p) * 2.0;\n}\n\nbool sameLine(Line l1, Line l2){\n\treturn abs(cross(l1.p2 - l1.p1, l2.p1 - l1.p1)) < EPS;\n}\n\nbool intersectLP(Line l, Point p){\n\treturn LEQ(abs(cross(l.p1 - p, l.p2 - p)), 0.0);\n}\n\nbool intersectLL(Line l1, Line l2){\n\treturn !parallel(l1, l2) || sameLine(l1, l2);\n}\n\nbool intersectLS(Line l, Segment s){\n\treturn cross(l.p2 - l.p1, s.p1 - l.p1) * cross(l.p2 - l.p1, s.p2 - l.p1) < -EPS;\n}\n\nbool intersectSP(Segment s, Point p){\n\treturn norm(s.p1 - p) + norm(s.p2 - p) - norm(s.p2 - s.p1) < EPS;\n}\n\nbool intersectSS(Segment s1, Segment s2){\n\treturn ccw(s1.p1, s1.p2, s2.p1) * ccw(s1.p1, s1.p2, s2.p2) <= 0\n\t\t&& ccw(s2.p1, s2.p2, s1.p1) * ccw(s2.p1, s2.p2, s1.p2) <= 0;\n}\n\ndouble distanceLP(Line l, Point p){\n\treturn abs(cross(l.p2 - l.p1, p - l.p1)) / abs(l.p2 - l.p1);\n}\n\ndouble distanceLL(Line l1, Line l2){\n\tif (intersectLL(l1, l2)) return 0.0;\n\treturn distanceLP(l1, l2.p1);\n}\n\ndouble distanceLS(Line l, Segment s){\n\tif (intersectLS(l, s)) return 0.0;\n\treturn min(distanceLP(l, s.p1), distanceLP(l, s.p2));\n}\n\ndouble distanceSP(Segment s, Point p){\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0) return abs(p - s.p1);\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0) return abs(p - s.p2);\n\treturn distanceLP(s, p);\n}\n\ndouble distanceSS(Segment s1, Segment s2){\n\tif (intersectSS(s1, s2)) return 0.0;\n\treturn min(\n\t\tmin(distanceSP(s1, s2.p1), distanceSP(s1, s2.p2)),\n\t\tmin(distanceSP(s2, s1.p1), distanceSP(s2, s1.p2))\n\t);\n}\n\nPoint crossPointLL(Line l1, Line l2){\n\tassert(intersectLL(l1, l2));\n\tPoint base = l2.p2 - l2.p1;\n\tdouble d1 = abs(cross(base, l1.p1 - l2.p1));\n\tdouble d2 = abs(cross(base, l1.p2 - l2.p1));\n\tdouble t = d1 / (d1 + d2);\n\treturn l1.p1 + (l1.p2 - l1.p1) * t;\n}\n\nPoint crossPointLS(Line l, Segment s){\n\tassert(intersectLS(l, s));\n\treturn crossPointLL(l, s);\n}\n\nPoint crossPointSS(Segment s1, Segment s2){\n\tassert(intersectSS(s1, s2));\n\treturn crossPointLL(s1, s2);\n}\n\nenum {\n\tIN = 2,\n\tON = 1,\n\tOUT = 0,\n};\n\nint contains(const Polygon &g, Point p){\n\tint n = g.size();\n\tbool x = false;\n\trep(i, n){\n\t\tPoint a = g[i] - p, b = g[(i + 1) % n] - p;\n\t\tif (abs(cross(a, b)) < EPS && dot(a, b) < EPS) return ON;\n\t\tif (a.Y > b.Y) swap(a, b);\n\t\tif (a.Y < EPS && EPS < b.Y && cross(a, b) > EPS) x = !x;\n\t}\n\treturn x ? IN : OUT;\n}\n\nPolygon convexHull(Polygon &s){\n\tPolygon u, l;\n\tif (s.size() < 3) return s;\n\tsort(s.begin(), s.end());\n\t\n\tu.pb(s[0]); u.pb(s[1]);\n\tl.pb(s[s.size() - 1]); l.pb(s[s.size() - 2]);\n\t\n\tfor (int i = 2; i < s.size(); i++){\n\t\tint n = u.size();\n\t\twhile (n >= 2 && ccw(u[n - 2], u[n - 1], s[i]) != CLOCKWISE){\n\t\t\tu.pop_back();\n\t\t\tn--;\n\t\t}\n\t\tu.pb(s[i]);\n\t}\n\t\n\tfor (int i = s.size() - 3; i >= 0; i--){\n\t\tint n = l.size();\n\t\twhile (n >= 2 && ccw(l[n - 2], l[n - 1], s[i]) != CLOCKWISE){\n\t\t\tl.pop_back();\n\t\t\tn--;\n\t\t}\n\t\tl.pb(s[i]);\n\t}\n\t\n\treverse(l.begin(), l.end());\n\tfor (int i = u.size() - 2; i >= 1; i--) l.pb(u[i]);\n\t\n\treturn l;\n}\n\nint main()\n{\n\tcout << fixed << setprecision(20);\n\t\n\tint n;\n\tcin >> n;\n\trep(i, n){\n\t\tSegment s[2];\n\t\trep(j, 2) cin >> s[j].p1 >> s[j].p2;\n\t\tcout << distanceSS(s[0], s[1]) << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<cmath>\n#include<cstdio>\n#include<iostream>\nusing namespace std;\ntypedef long long ll;\nll read()\n{\n\tll x=0,f=1;char ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n\treturn x*f;\n}\nstruct Point{double x,y;};\nPoint operator -(Point a,Point b){return (Point){a.x-b.x,a.y-b.y};}\ndouble cross(Point a,Point b){return a.x*b.y-a.y*b.x;}\ndouble dot(Point a,Point b){return a.x*b.x+a.y*b.y;}\ndouble norm(Point a){return a.x*a.x+a.y*a.y;}\ndouble abs(Point a){return sqrt(norm(a));}\nvoid read(Point &a){a.x=read(),a.y=read();}\ndouble getdistanceLP(Point p0,Point p1,Point p2)\n{\n\tdouble x=fabs(cross(p1-p0,p2-p0));\n\treturn x/abs(p1-p0);\n}\ndouble getdistanceSP(Point p0,Point p1,Point p2)\n{\n\tif(dot(p1-p0,p2-p0)<0)return abs(p2-p0);\n\tif(dot(p0-p1,p2-p1)<0)return abs(p2-p1);\n\treturn getdistanceLP(p0,p1,p2);\n}\ndouble getdistanceSS(Point p0,Point p1,Point p2,Point p3)\n{\n\treturn min(min(getdistanceSP(p2,p3,p0),getdistanceSP(p2,p3,p1)),\n\t\t\t   min(getdistanceSP(p0,p1,p2),getdistanceSP(p0,p1,p3)));\n}\nint main()\n{\n\tint q=read();while(q--)\n\t{\n\t\tPoint p0,p1,p2,p3;\n\t\tread(p0),read(p1),read(p2),read(p3);\n\t\tprintf(\"%.10lf\\n\",getdistanceSS(p0,p1,p2,p3));\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <limits>\n#include <algorithm>\n#include <vector>\n#include <deque>\n#include <queue>\n#include <list>\n#include <stack>\n#include <string>\n#include <functional>\n#include <numeric>\n#include <map>\n#include <set>\n#include <cstdlib>\n#include <bitset>\n#include <unordered_map>\n#include <random>\n#define _USE_MATH_DEFINES\n#include <cmath>\n#include <complex>\n#include <cfloat>\n\nusing namespace std;\n\n#define INFD numeric_limits<double>::infinity()\n// #define INF (int)1e8\n// #define INFLL (long long)1e15\n#define Loop(i, n) for(int i = 0; i < (int)n; i++)\n#define Loop1(i, n) for(int i = 1; i <= (int)n; i++)\n#define Loopr(i, n) for(int i = (int)n - 1; i >= 0; i--)\n#define Loopr1(i, n) for(int i = (int)n; i >= 1; i--)\n#define bitmanip(m,val) static_cast<bitset<(int)m>>(val)\ntypedef long long int ll;\ntypedef vector<int> vi;\ntypedef vector<vector<int>> vvi;\ntypedef pair<int, int> P;\ntypedef vector<ll> vll;\ntypedef vector<vector<ll>> vvll;\n\n/*******************************************************/\n\nnamespace geometry {\n  struct coordinate {\n    double x, y;\n    bool operator<(const coordinate & another) const {\n      return x != another.x ? x < another.x : y < another.y;\n    }\n  };\n  struct line {\n    double a, b, c;\n    pair<double, double> domain; // if b == 0, domain means range \n  };\n  enum linetype {\n    LINE, HALFLINE, SEGMENT\n  };\n  coordinate projection(coordinate, line);\n  double Euclid_dist(coordinate p, coordinate q) {\n    return sqrt((p.x - q.x) * (p.x - q.x) + (p.y - q.y) * (p.y - q.y));\n  }\n  // ax + by + c = 0\n  line make_line(double a, double b, double c, pair<double, double> domain = { -INFD, INFD }) {\n    return{ a,b,c,domain };\n  }\n  // line from p through q when type is HALFLINE\n  line make_line_through(coordinate p, coordinate q, linetype type = LINE) {\n    line ret = { NAN, NAN, NAN,{ NAN,NAN } };\n    if (p.x == q.x && p.y == q.y) return ret;\n    else {\n      if (p.x == q.x) {\n        ret = { 1, 0, -p.x,{ -INFD, INFD } };\n        switch (type) {\n        case SEGMENT:\n          if (p.y > q.y) ret.domain = { q.y, p.y };\n          else ret.domain = { p.y, q.y };\n          return ret;\n        case HALFLINE:\n          if (p.y > q.y) ret.domain = { -INFD, p.y };\n          else ret.domain = { p.y, INFD };\n          return ret;\n        case LINE:\n          return ret;\n        }\n      }\n      else {\n        ret = { (q.y - p.y), (p.x - q.x), q.x * p.y - p.x * q.y,{ -INFD, INFD } };\n        switch (type) {\n        case SEGMENT:\n          if (p.x > q.x) ret.domain = { q.x, p.x };\n          else ret.domain = { p.x, q.x };\n          return ret;\n        case HALFLINE:\n          if (p.x > q.x) ret.domain = { -INFD, p.x };\n          else ret.domain = { p.x, INFD };\n          return ret;\n        case LINE:\n          return ret;\n        }\n      }\n    }\n  }\n  // line through p\n  line make_line_from_slope(double a, double b, coordinate p) {\n    double c = -(a * p.x + b * p.y);\n    return{ a, b, c,{ -INFD, INFD } };\n  }\n  // get y when substituting x for l\n  double subst_x(double x, line l) {\n    if (l.b == 0) {\n      return -l.c / l.a;\n    }\n    else {\n      return -(l.a * x + l.c) / l.b;\n    }\n  }\n  // get x when substituting y for l\n  double subst_y(double y, line l) {\n    if (l.a == 0) {\n      return -l.c / l.b;\n    }\n    else {\n      return -(l.b * y + l.c) / l.a;\n    }\n  }\n  class Two_Lines {\n  private:\n    line l;\n    line m;\n    coordinate crosspoint; // (NAN, NAN) when not existing\n    bool in_range(coordinate p, line l) {\n      if (l.b == 0) {\n        if (l.domain.first <= p.y && p.y <= l.domain.second) return true;\n        else return false;\n      }\n      else {\n        if (l.domain.first <= p.x && p.x <= l.domain.second) return true;\n        else return false;\n      }\n    }\n  public:\n    bool is_intersect; // include having common interval\n    bool is_parallel; // include having common interval\n    bool is_orthogonal;\n    Two_Lines(line l, line m) {\n      Two_Lines::l = l;\n      Two_Lines::m = m;\n      is_intersect = false;\n      is_parallel = false;\n      is_orthogonal = false;\n      crosspoint = { NAN, NAN };\n      double dn = l.a * m.b - m.a * l.b;\n      if (dn == 0) {\n        is_parallel = true;\n        if (l.a * m.c - m.a * l.c);\n        else if (l.b * m.c - m.b * l.c);\n        else {\n          if (l.domain.first <= m.domain.second && m.domain.first <= l.domain.second) is_intersect = true;\n          else is_intersect = false;\n        }\n      }\n      else {\n        if (!(l.a * m.a + l.b * m.b)) is_orthogonal = true;\n        crosspoint.x = (l.b * m.c - m.b * l.c) / dn;\n        crosspoint.y = (m.a * l.c - l.a * m.c) / dn;\n        if (in_range(crosspoint, l) && in_range(crosspoint, m)) {\n          is_intersect = true;\n        }\n        else {\n          crosspoint = { NAN, NAN };\n        }\n      }\n    }\n    double get_distance() {\n      if (is_intersect) return 0;\n      else {\n        double ret = INFD;\n        coordinate p[2], q[2];\n        if (l.b == 0) {\n          p[0] = { subst_y(l.domain.first, l), l.domain.first };\n          p[1] = { subst_y(l.domain.second, l), l.domain.second };\n        }\n        else {\n          p[0] = { l.domain.first, subst_x(l.domain.first, l) };\n          p[1] = { l.domain.second, subst_x(l.domain.second, l) };\n        }\n        if (m.b == 0) {\n          q[0] = { subst_y(m.domain.first, m), m.domain.first };\n          q[1] = { subst_y(m.domain.second, m), m.domain.second };\n        }\n        else {\n          q[0] = { m.domain.first, subst_x(m.domain.first, m) };\n          q[1] = { m.domain.second, subst_x(m.domain.second, m) };\n        }\n        Loop(i, 2) {\n          ret = min(ret, Euclid_dist(projection(p[i], m), p[i]));\n          ret = min(ret, Euclid_dist(projection(q[i], l), q[i]));\n          Loop(j, 2) {\n            ret = min(ret, Euclid_dist(p[i], q[j]));\n          }\n        }\n        return ret;\n      }\n    }\n    coordinate get_crosspoint() {\n      return crosspoint;\n    }\n  };\n  double poligon_area(vector<coordinate> vp) {\n    double ret = 0;\n    int n = vp.size();\n    if (n <= 2) return 0;\n    vp.push_back(vp[0]);\n    Loop(i, n) {\n      ret += vp[i].x * vp[i + 1].y - vp[i + 1].x * vp[i].y;\n    }\n    ret = abs(ret) / 2;\n    return ret;\n  }\n  // solve q on l such that pq is orthogonal to l\n  coordinate projection(coordinate p, line l) {\n    line m = make_line_from_slope(l.b, -l.a, p);\n    Two_Lines twl(l, m);\n    return twl.get_crosspoint();\n  }\n}\n\nint main() {\n  using namespace geometry;\n  int q; cin >> q;\n  Loop(i, q) {\n    coordinate p, q;\n    cin >> p.x >> p.y >> q.x >> q.y;\n    line l = make_line_through(p, q, SEGMENT);\n    cin >> p.x >> p.y >> q.x >> q.y;\n    line m = make_line_through(p, q, SEGMENT);\n    Two_Lines twl(l, m);\n    cout << setprecision(16) << twl.get_distance() << endl;\n  }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<iomanip>\n#include<cmath>\nusing namespace std;\n\nstruct Point{\n    double x;\n    double y;\n    Point (double x, double y) : x(x), y(y){}\n    Point operator-(Point p){\n        return Point(x - p.x, y - p.y);\n    }\n};\ntypedef Point Vector;\ndouble dot(Vector v1, Vector v2){\n    return v1.x * v2.x + v1.y * v2.y;\n}\ndouble abs_(Vector v){\n    return sqrt(dot(v, v));\n}\ndouble cross(Vector v1, Vector v2){\n    return v1.x * v2.y - v1.y * v2.x;\n}\nstruct Segment{\n    Point p1;\n    Point p2;\n    Segment(Point p1, Point p2) : p1(p1), p2(p2){}\n};\ndouble get_katamuki(Segment s){\n    return (s.p1.y - s.p2.y) / (s.p1.x - s.p2.x);\n}\ndouble get_seppen(Segment s){\n    return (s.p1.x * s.p2.y - s.p2.x * s.p1.y) / (s.p1.x - s.p2.x);\n}\nbool is_inSegment(Point p, Segment s){\n    double max_x = s.p1.x;\n    double min_x = s.p2.x;\n    if (min_x > max_x) swap(min_x, max_x);\n    if (p.x < min_x || p.x > max_x) return false;\n    double max_y = s.p1.y;\n    double min_y = s.p2.y;\n    if (min_y > max_y) swap(min_y, max_y);\n    if (p.y < min_y || p.y > max_y) return false;\n    return true;\n}\nbool is_intersect(Segment s1, Segment s2){\n    double a1 = get_katamuki(s1);\n    double b1 = get_seppen(s1);\n    double a2 = get_katamuki(s2);\n    double b2 = get_seppen(s2);\n    if (a1 - a2 < 1e-10) return false;\n    double x_is = (b2 - b1) / (a1 - a2);\n    double y_is = (a1 * b2 - a2 * b1) / (a1 - a2);\n    Point p_is(x_is, y_is);\n    if (!is_inSegment(p_is, s1)) return false;\n    if (!is_inSegment(p_is, s2)) return false;\n    return true;\n}\ndouble get_distanceSP(Segment s, Point p){\n// cout << \"(\" << s.p1.x << \",\" << s.p1.y << \")\";\n// cout << \"(\" << s.p2.x << \",\" << s.p2.y << \")   :    \";\n// cout << \"(\" << p.x << \",\" << p.y << \")\" << endl;\n    Vector a1 = s.p2 - s.p1;\n    Vector b1 = p    - s.p1;\n    if (dot(a1, b1) <= 0) return abs_(b1);\n    Vector a2 = s.p1 - s.p2;\n    Vector b2 = p    - s.p2;\n    if (dot(a2, b2) <= 0) return abs_(b2);\n    return fabs(cross(a1, b1)) / abs_(a1);\n}\ndouble get_distanceSS(Segment s1, Segment s2){\n    if (is_intersect(s1, s2)) return 0;\n    // cout << get_distanceSP(s1, s2.p1) << \" \";\n    // cout << get_distanceSP(s1, s2.p2) << \" \";\n    // cout << get_distanceSP(s2, s1.p1) << \" \";\n    // cout << get_distanceSP(s2, s1.p2) << endl;\n    return min(min(get_distanceSP(s1, s2.p1), get_distanceSP(s1, s2.p2)),\n               min(get_distanceSP(s2, s1.p1), get_distanceSP(s2, s1.p2)));\n}\nint main(){\n    int q;\n    cin >> q;\n    for (int i = 0; i < q; i++) {\n        int x_p0, y_p0, x_p1, y_p1, x_p2, y_p2, x_p3, y_p3;\n        cin >> x_p0 >> y_p0 >> x_p1 >> y_p1;\n        cin >> x_p2 >> y_p2 >> x_p3 >> y_p3;\n        Segment s1(Point(x_p0, y_p0), Point(x_p1, y_p1));\n        Segment s2(Point(x_p2, y_p2), Point(x_p3, y_p3));\n        double distance = get_distanceSS(s1, s2);\n        cout << fixed << setprecision(10);\n        cout << distance << endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cmath>\n#include<iomanip>\n#include<algorithm>\nusing namespace std;\nstruct Point { long double px, py; };\nstruct Segment { Point p1, p2; };\nPoint Minus(Point a, Point b) { Point G; G.px = a.px - b.px; G.py = a.py - b.py; return G; }\nlong double Abs(Point a) { return sqrt(a.px*a.px + a.py*a.py); }\nlong double dot(const Point& a, const Point& b) { return a.px * b.px + a.py * b.py; }\nlong double crs(const Point& a, const Point& b) { return a.px * b.py - a.py * b.px; }\nlong double dst(const Segment& a, const Point& b) {\n\tif (dot(Minus(a.p2, a.p1), Minus(b, a.p1)) < 0.0) return Abs(Minus(b, a.p1));\n\tif (dot(Minus(a.p1, a.p2), Minus(b, a.p2)) < 0.0) return Abs(Minus(b, a.p2));\n\treturn abs(crs(Minus(a.p2, a.p1), Minus(b, a.p1)) / Abs(Minus(a.p2, a.p1)));\n}\nint main() {\n\tPoint P1, P2, P3, P4; Segment M1, M2;\n\tint T; cin >> T;\n\tfor (int i = 0; i < T; i++) {\n\t\tcin >> P1.px >> P1.py >> P2.px >> P2.py;\n\t\tcin >> P3.px >> P3.py >> P4.px >> P4.py;\n\t\tM1.p1 = P1; M1.p2 = P2; M2.p1 = P3; M2.p2 = P4;\n\t\tlong double res = min(dst(M1, P3), dst(M1, P4));\n\t\tres = min(res, min(dst(M2, P1), dst(M2, P2)));\n\t\tcout << fixed << setprecision(1919) << res << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cmath>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\ntemplate<class T>\nstruct Vec2\n{\n\tVec2(){}\n\tVec2(T _x, T _y) : x(_x), y(_y) {}\n\n\tVec2 operator+(const Vec2& rhs) const { return Vec2(x + rhs.x, y + rhs.y); }\n\tVec2 operator-(const Vec2& rhs) const { return Vec2(x - rhs.x, y - rhs.y); }\n\tVec2 operator*(T s) const { return Vec2(x*s, y*s); }\n\tVec2 operator/(T s) const { return Vec2(x/s, y/s); }\n\tT dot(const Vec2& rhs) const { return x*rhs.x + y*rhs.y; }\n\tT cross(const Vec2& rhs) const { return x*rhs.y - y*rhs.x; }\n\tT sqlength() const { return x*x + y*y; }\n\tdouble length() const { return sqrt(sqlength()); }\n\tbool operator<(const Vec2& rhs) const\n\t{\n\t\tif (x != rhs.x) return x < rhs.x;\n\t\treturn y < rhs.y;\n\t}\n\n\tT x;\n\tT y;\n};\n\ntemplate<class T>\nT cross(const Vec2<T> &O, const Vec2<T> &A, const Vec2<T> &B)\n{\n\treturn (A - O).cross(B - O);\n}\n\ntemplate<class T>\nbool IsIntSegments(const Vec2<T>& A1, const Vec2<T>& A2, const Vec2<T>& B1, const Vec2<T>& B2)\n{\n\treturn (cross(A1, A2, B1)*cross(A1, A2, B2) < 0 && cross(B1, B2, A1)*cross(B1, B2, A2) < 0);\n}\n\ntemplate<class T>\ndouble DistPoint2Seg(const Vec2<T>& P, const Vec2<T>& A, const Vec2<T>& B)\n{\n\tif ((B - A).dot(P - A) < 0) return (P - A).length();\n\tif ((A - B).dot(P - B) < 0) return (P - B).length();\n\treturn fabs(double((B - A).cross(P - A))) / (B - A).length();\n}\n\nint main()\n{\n\ttypedef Vec2<long long> Vec;\n\n\tint q;\n\tcin >> q;\n\tfor (int i = 0; i < q; i++) {\n\t\tVec P[4];\n\t\tfor (int j = 0; j < 4; j++) {\n\t\t\tcin >> P[j].x >> P[j].y;\n\t\t}\n\n\t\tif (IsIntSegments(P[0], P[1], P[2], P[3])) {\n\t\t\tputs(\"0\");\n\t\t\tcontinue;\n\t\t}\n\n\t\tdouble d1 = DistPoint2Seg(P[0], P[2], P[3]);\n\t\tdouble d2 = DistPoint2Seg(P[1], P[2], P[3]);\n\t\tdouble d3 = DistPoint2Seg(P[2], P[0], P[1]);\n\t\tdouble d4 = DistPoint2Seg(P[3], P[0], P[1]);\n\t\tprintf(\"%.10f\\n\", min(d1, min(d2, min(d3, d4))));\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<iomanip>\n#include<cmath>\nusing namespace std;\n\nstruct point\n{\n    double x;\n    double y;\n    double d;\n};\n\ndouble getMax( double a, double b )\n{\n    if( a > b )\n        return a;\n    else\n        return b;\n}\n\ndouble getMin( double a, double b )\n{\n    if( a < b )\n        return a;\n    else\n        return b;\n}\n\ndouble twopointsDistance( double x1, double y1, double x2, double y2 )\n{\n    return sqrt( ( x2 - x1 ) * ( x2 - x1 ) + ( y2 - y1 ) * ( y2 - y1 ) );\n}\n\nbool Intersection( double x0, double y0, double x1, double y1, double x2, double y2, double x3, double y3 )\n{\n    double a, b, c, d, x, y;\n    a = x1 - x0;\n    b = y1 - y0;\n    c = x3 - x2;\n    d = y3 - y2;\n\n    if( a == 0 )\n    {\n        if( c == 0 )\n        {\n            if( x0 != x2 || x0 == x2 && getMax( y2, y3 ) < getMin( y0, y1 ) || x0 == x2 && getMax( y0, y1 ) < getMin( y2, y3 ) )\n                return false;\n            else\n                return true;\n        }\n        else if( d == 0 && getMin( y0, y1 ) <= y2 && y2 <= getMax( y0, y1 ) && getMin( x2, x3 ) <= x0 && x0 <= getMax( x2, x3 ) )\n            return true;\n        else if( d == 0 )\n            return false;\n        else\n        {\n            x = x0;\n            y = d * x0 / c + y2 - d * x2 / c;\n            if( getMin( x2, x3 ) <= x && x <= getMax( x2, x3 ) && getMin( y0, y1 ) <= y && y <= getMax( y0, y1 ) )\n                return true;\n            else\n                return false;\n        }\n    }\n    else if( b == 0 )\n    {\n        if( c == 0 && getMin( x0, x1 ) <= x2 && x2 <= getMax( x0, x1 ) && getMin( y2, y3 ) <= y0 && y0 <= getMax( y2, y3 ) )\n            return true;\n        else if( c == 0 )\n            return false;\n        else if( d == 0 )\n        {\n            if( y0 != y2 )\n                return false;\n            else\n                if( getMin( x0, x1 ) <= getMin( x2, x3 ) && getMin( x2, x3 ) <= getMax( x0, x1 ) || getMin( x2, x3 ) <= getMin( x0, x1 ) && getMin( x0, x1 ) <= getMax( x2, x3 ) )\n                    return true;\n                else\n                    return false;\n        }\n        else\n        {\n            x = ( y0 - y2 + d * x2 / c ) / ( d / c );\n            y = y0;\n            if( getMin( x0, x1 ) <= x && x <= getMax( x0, x1 ) && getMin( y2, y3 ) <= y && y <= getMax( y2, y3 ) )\n                return true;\n            else\n                return false;\n        }\n    }\n    else if( c == 0 )\n    {\n        x = x2;\n        y = b * x / a + y0 - b * x0 / a;\n        if( getMin( x0, x1 ) <= x && x <= getMax( x0, x1 ) && getMin( y2, y3 ) <= y && y <= getMax( y2, y3 ) )\n            return true;\n        else\n            return false;\n    }\n    else if( d == 0 )\n    {\n        x = ( y2 - y0 + b * x0 / a ) / ( b / a );\n        y = y2;\n        if( getMin( x2, x3 ) <= x && x <= getMax( x2, x3 ) && getMin( y0, y1 ) <= y && y <= getMax( y0, y1 ) )\n            return true;\n        else\n            return false;\n    }\n    else\n    {\n        if( b / a == d / c )\n        {\n            if( y0 - b * x0 / a != y2 - d * x2 / c )\n                return false;\n            else\n            {\n                if( getMin( x0, x1 ) <= getMin( x2, x3 ) && getMin( x2, x3 ) <= getMax( x0, x1 ) || getMin( x0, x1 ) <= getMax( x2, x3 ) && getMax( x2, x3 ) <= getMax( x0, x1 ) )\n                    return true;\n                else if( getMin( x2, x3 ) <= getMin( x0, x1 ) && getMin( x0, x1 ) <= getMax( x2, x3 ) )\n                    return true;\n                else\n                    return false;\n            }\n        }\n        else\n        {\n            x = - ( y0 - y2 + d * x2 / c - b * x0 / a ) / ( b / a - d / c );\n            y = b * x / a + y0 - b * x0 / a;\n            if( getMin( x0, x1 ) <= x && x <= getMax( x0, x1 ) && getMin( y2, y3 ) <= y && y <= getMax( y2, y3 ) )\n                return true;\n            else\n                return false;\n        }\n    }\n}\n\n\npoint calcDistance( double x1, double y1, double x2, double y2, double xp, double yp )\n{\n    point p;\n    double a, b, x, y;\n    a = x2 - x1;\n    b = y2 - y1;\n\n    //直線s1に対して、点pから垂線をおろした時の距離を求める。\n    if( a == 0 )\n    {\n        if( getMin( x1, x2 ) <= xp && xp <= getMax( x1, x2 ) && getMin( y1, y2 ) <= yp && yp <= getMax( y1, y2 ) )\n        {\n            p.x = xp;\n            p.y = yp;\n            p.d = 0;\n        }\n        else if( getMin( x1, x2 ) <= xp && xp <= getMax( x1, x2 ) )\n        {\n            p.x = -20000;\n            p.y = -20000;\n            p.d = getMin( twopointsDistance( x1, y1, x1, yp ), twopointsDistance( x2, y2, x1, yp ) );\n        }\n        else if( getMin( y1, y2 ) <= yp && yp <= getMax( y1, y2 ) )\n        {\n            p.x = x1;\n            p.y = yp;\n            p.d = twopointsDistance( x1, yp, xp, yp );\n        }\n        else\n        {\n            p.x = -20000;\n            p.y = -20000;\n            p.d = -1;\n        }\n    }\n    else if( b == 0 )\n    {\n        //cout << \"a\" << endl;\n        if( getMin( x1, x2 ) <= xp && xp <= getMax( x1, x2 ) && getMin( y1, y2 ) <= yp && yp <= getMax( y1, y2 ) )\n        {\n            p.x = xp;\n            p.y = yp;\n            p.d = 0;\n        }\n        else if( getMin( y1, y2 ) <= yp && yp <= getMax( y1, y2 ) )\n        {\n            p.x = -20000;\n            p.y = -20000;\n            p.d = getMin( twopointsDistance( x1, y1, xp, yp ), twopointsDistance( x2, y2, xp, yp ) );\n        }\n        else if( getMin( x1, x2 ) <= xp && xp <= getMax( x1, x2 ) )\n        {\n            p.x = xp;\n            p.y = y1;\n            p.d = twopointsDistance( xp, y1, xp, yp );\n        }\n        else\n        {\n            p.x = -20000;\n            p.y = -20000;\n            p.d = -1;\n        }\n    }\n    else\n    {\n        x = ( yp - y1 + a * xp / b + b * x1 / a ) / ( b / a + a / b );\n        y = -1 * a * x / b + yp + a * xp / b;\n        if( getMin( x1, x2 ) <= x && x <= getMax( x1, x2 ) && getMin( y1, y2 ) <= y && y <= getMax( y1, y2 ) )\n        {\n            p.x = x;\n            p.y = y;\n            p.d = twopointsDistance( x, y, xp, yp );\n        }\n        else\n        {\n            p.x = -20000;\n            p.y = -20000;\n            p.d = -1;\n        }\n    }\n    return p;\n}\n\nint main()\n{\n    double x0, y0, x1, y1, x2, y2, x3, y3;\n    int q;\n \n    cin >> q;\n\n    for( int i = 0; i < q; i++ )\n    {\n        cin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n\n        if( Intersection( x0, y0, x1, y1, x2, y2, x3, y3 ) == true )\n        {\n            cout << fixed << setprecision(10) << 0.0000000000 << endl;\n            continue;\n        }\n\n        point p[8];\n        p[0] = calcDistance( x0, y0, x1, y1, x2, y2 );\n        p[1] = calcDistance( x0, y0, x1, y1, x3, y3 );\n        p[2] = calcDistance( x2, y2, x3, y3, x0, y0 );\n        p[3] = calcDistance( x2, y2, x3, y3, x1, y1 );\n        p[4].d = twopointsDistance( x0, y0, x2, y2 );\n        p[5].d = twopointsDistance( x0, y0, x3, y3 );\n        p[6].d = twopointsDistance( x1, y1, x2, y2 );\n        p[7].d = twopointsDistance( x1, y1, x3, y3 );\n\n        double min = 100000;\n        int j;\n        for( int i = 0; i < 8; i++ )\n        {\n            if( min > p[i].d && p[i].d != -1 )\n            {\n                min = p[i].d;\n                j = i;\n            }\n            //cout << p[i].x << \" \" << p[i].y << endl;\n            //cout << p[i].d << endl;\n        }\n        for( int i = 0; i < 8; i++ )\n        {\n            if( min == p[i].d )\n            {\n                if( getMin( x0, x1 ) <= p[i].x && p[i].x <= getMax( x0, x1 ) && getMin( y0, y1 ) <= p[i].y && p[i].y <= getMax( y0, y1 ) )\n                    if( getMin( x2, x3 ) <= p[i].x && p[i].x <= getMax( x2, x3 ) && getMin( y2, y3 ) <= p[i].y && p[i].y <= getMax( y2, y3 ) )\n                        min = 0;\n            }\n        }\n        cout << fixed << setprecision(10) << min << endl;\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#define loop(i, s, e) for(ll i = s;i < e;i++)\n\n#include <iostream>\n#include <iomanip>\n#include <set>\n#include <vector>\n#include <queue>\n#include <stack>\n#include <utility>\n#include <algorithm>\n#include <map>\n#include <cmath>\n\nusing namespace std;\n\ntypedef long long signed ll;\n\ntemplate<typename T>\nclass Vector2D {\npublic:\n    T x;\n    T y;\n\n    Vector2D() {\n        x = y = 0;\n    }\n\n    Vector2D(T x_, T y_) {\n        x = x_;\n        y = y_;\n    }\n\n    T operator*(const Vector2D<T> *e) {\n        return this->x * e->x + this->y * e->y;\n    }\n\n    Vector2D<T> operator-(const Vector2D<T> *e) {\n        return Vector2D<T>(this->x - e->x, this->y - e->y);\n    }\n\n    Vector2D<T> operator+(const Vector2D<T> *e) {\n        return Vector2D<T>(this->x + e->x, this->y + e->y);\n    }\n\n    T operator*(const Vector2D<T> e) {\n        return this->x * e.x + this->y * e.y;\n    }\n\n    Vector2D<T> operator-(const Vector2D<T> e) {\n        return Vector2D<T>(this->x - e.x, this->y - e.y);\n    }\n\n    Vector2D<T> operator+(const Vector2D<T> e) {\n        return Vector2D<T>(this->x + e.x, this->y + e.y);\n    }\n\n    Vector2D<T> operator*(const T r) {\n        return Vector2D<T>(this->x * r, this->y * r);\n    }\n\n    Vector2D<T> operator/(const T r) {\n        return Vector2D<T>(this->x / r, this->y / r);\n    }\n\n    double abs() {\n        return sqrt(x * x + y * y);\n    }\n\n    T abs2() {\n        return x * x + y * y;\n    }\n\n    T cross(Vector2D<T> e) {\n        if(x * e.y >= y * e.x) return (x * e.y) - (y * e.x);\n        else return (y * e.x) - (x * e.y);\n    }\n\n    double cos(Vector2D<T> e) {\n        return (e * (*this)) / (e.abs() * abs());\n    }\n\n    double sin(Vector2D<T> e) {\n//        if(e.abs() * this->abs() == 0.0) throw ;\n        return ((x * e.y) - (y * e.x)) / (e.abs() * abs());\n    }\n};\n\ntypedef Vector2D<double> vdd;\n\ndouble dist__(double x0, double y0, double x1, double y1, double xx, double yy) {\n    int b = 0;\n    vdd p[3] = {vdd(x0, y0), vdd(x1, y1), vdd(xx, yy)};\n    if (((p[0] - p[1]) * (p[2] - p[1])) < 0) b = -1;\n    if (((p[1] - p[0]) * (p[2] - p[0])) < 0) b = 1;\n    if (b == 1) return (p[2] - p[0]).abs();\n    if (b == -1) return (p[2] - p[1]).abs();\n    return (p[1] - p[0]).cross(p[2] - p[0]) / (p[1] - p[0]).abs();\n}\n\ndouble dist(double x0, double y0, double x1, double y1, double xx, double yy){\n    double res = dist__(x0,y0,x1,y1,xx,yy);\n//    cout << res << endl;\n    return res;\n}\nint main() {\n    int q;\n    cin >> q;\n    loop(i, 0, q) {\n        int x[4], y[4];\n        vdd v[4];\n        loop(j, 0, 4) {\n            cin >> x[j] >> y[j];\n            v[j] = vdd(x[j], y[j]);\n        }\n        if ((v[0] - v[1]).sin(v[2] - v[1]) * (v[0] - v[1]).sin(v[3] - v[1]) < 0 && (v[2] - v[3]).sin(v[0] - v[3]) * (v[2] - v[3]).sin(v[1] - v[3]) < 0) cout << 0 << endl;\n        else\n            cout << setprecision(16)\n                 << min(min(dist(x[0], y[0], x[1], y[1], x[2], y[2]), dist(x[0], y[0], x[1], y[1], x[3], y[3])),\n                        min(dist(x[2], y[2], x[3], y[3], x[0], y[0]), dist(x[2], y[2], x[3], y[3], x[1], y[1])))\n                 << endl;\n    }\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <sstream>\n#include <regex>\n#include <cstdio>\n#include <cmath>\n#include <cctype>\n#include <string>\n#include <vector>\n#include <list>\n#include <set>\n#include <map>\n#include <queue>\n#include <stack>\n#include <algorithm>\n#include <functional>\n#include <iomanip>\n\nusing namespace std;\nusing ll = long long int;\n#define rep(i,n) for(int i = 0; i < n; i++)\n#define FOR(i, a, b)  for(int i = (a); i < (b) ; i++)\n#define pb push_back\n#define SORT(v,n) sort(v, v+n)\n#define ALL(x) (x).begin(),(x).end()\n#define debug(x) cerr << #x << \": \" << x << '\\n'\n#define elif else if\n#define int ll\n//const int INF = 100100100;\nconst int INF = (1LL << 32);\nconst int MOD = (int)1e9 + 7;\nconst double EPS = 1e-9;\nint dx[8] = { 1, 0, -1, 0, 1, -1, -1, 1 };\nint dy[8] = { 0, 1, 0, -1, 1, 1, -1, -1 };\ntypedef vector<vector<int>> vvi;\ntypedef vector<vector<vector<int>>> vvvi;\n\n#define equals(a,b) (fabs((a) - (b)) < EPS)\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nclass Point {\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0) : x(x), y(y) {}\n\n\tPoint operator+(Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator-(Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator*(double a) { return Point(a * x, a * y); }\n\tPoint operator / (double a) { return Point(x / a, y / a); }\n\n\tdouble norm() { return x * x + y * y; }\n\tdouble abs() { return sqrt(norm()); }\n\n\tbool operator<(const Point & p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator==(const Point & p) const {\n\t\treturn fabs(x - p.x) < EPS and fabs(y - p.y) < EPS;\n\t}\n};\n\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\ndouble dot(Vector a, Vector b) {\n\treturn a.x* b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n\treturn a.x* b.y - a.y * b.x;\n}\n\nclass Segment {\npublic:\n\tPoint p1, p2;\n\tSegment(Point p1, Point p2) : p1(p1), p2(p2) {}\n};\n\ntypedef Segment Line;\n\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0) : c(c), r(r) {}\n};\n\n//直交判定\nbool isOrthogonal(Vector a, Vector b) {\n\treturn equals(dot(a, b), 0.0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n\treturn isOrthogonal(a1 - a2, b1 - b2);\n}\n\nbool isOrthogonal(Segment s1, Segment s2) {\n\treturn equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n//平行判定\nbool isParallel(Vector a, Vector b) {\n\treturn equals(cross(a, b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n\treturn isParallel(a1 - a2, b1 - b2);\n}\n\nbool isParallel(Segment s1, Segment s2) {\n\treturn equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n//線分sに対する点pの射影\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / base.norm();\n\treturn s.p1 + base * r;\n}\n\n//線分ｓに対する点ｐの反射\nPoint refrect(Segment s, Point p) {\n\treturn p + (project(s, p) - p) * 2.0;\n}\n\n//2点間の距離\ndouble getDistance(Point a, Point b) {\n\tPoint res = a - b;\n\treturn res.abs();\n}\n//点と直線の距離\ndouble getDistanceLP(Line l, Point p) {\n\treturn abs(cross(l.p2 - l.p1, p - l.p1) / Vector(l.p2 - l.p1).abs());\n}\n\n//線分ｓと点ｐの距離\ndouble getDistanceSP(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0) {\n\t\tPoint r = p - s.p1;\n\t\treturn r.abs();\n\t}\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0) {\n\t\tPoint r = p - s.p2;\n\t\treturn r.abs();\n\t}\n\treturn getDistanceLP(s, p);\n}\n\n//counter clock wise\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS) return CLOCKWISE;\n\tif (dot(a, b) < -EPS) return ONLINE_BACK;\n\tif (a.norm() < b.norm()) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\n//線分と線分の交差判定\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n\treturn (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 and\n\t\tccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\nbool intersect(Segment s1, Segment s2) {\n\treturn intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\n//線分と線分の距離\ndouble getDistance(Segment s1, Segment s2) {\n\tif (intersect(s1, s2)) return 0.0;\n\treturn min(\n\t\tmin(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n\t\tmin(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2))\n\t);\n}\n\nsigned main() {\n\tios::sync_with_stdio(false);\n\tint q;\n\tcin >> q;\n\trep(i, q) {\n\t\tint x0, y0, x1, y1, x2, y2, x3, y3;\n\t\tcin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n\t\tcout << fixed << setprecision(10) << getDistance(Segment(Point(x0, y0), Point(x1, y1)), Segment(Point(x2, y2), Point(x3, y3))) << '\\n';\n\t}\n\treturn 0;\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n\nusing namespace std;\n\ntypedef complex<double> Point;\nconst double epx=1e-10;\n\nPoint read()\n{\n    int x,y;\n    cin>>x>>y;\n    return Point(x,y);\n}\n\nint ccw(Point a,Point b,Point c)\n{\n    b-=a;c-=a;a=c*conj(b);\n    if(a.imag()>epx) return 1;\n    if(a.imag()<-epx) return -1;\n    if(a.real()<-epx) return 2;\n    if(abs(b)+epx<abs(c)) return -2;\n    return 0;\n}\n\nbool isIntersect(Point a,Point b,Point c,Point d)\n{\n    return (ccw(a,b,c)*ccw(a,b,d)<=0)&&(ccw(c,d,a)*ccw(c,d,b)<=0);\n}\n\ndouble dot(Point a,Point b)\n{\n    return real(b*conj(a));\n}\n\ndouble cross(Point a,Point b)\n{\n    return imag(b*conj(a));\n}\n\ndouble dist(Point a,Point b,Point c)\n{\n    if(dot(b-a,c-a)<0) return abs(c-a);\n    if(dot(a-b,c-b)<0) return abs(c-b);\n    return abs(cross(b-a,c-a))/abs(b-a);\n}\n\ndouble dist(Point a,Point b,Point c,Point d)\n{\n    if(isIntersect(a,b,c,d)) return 0;\n    double ab = min(dist(a,b,c),dist(a,b,d));\n    double cd = min(dist(c,d,a),dist(c,d,b));\n    return min(ab,cd);\n}\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n    cout<<setprecision(10)<<fixed;\n    int t;\n    cin>>t;\n    while(t--)\n    {\n        Point a,b,c,d;\n        a = read(); b = read(); c = read(); d = read();\n        cout<<dist(a,b,c,d)<<endl;\n    }\n\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\nusing Point = complex< double >;\nconst double EPS = 1e-10, PI = acos(-1);\n\nbool eq(double a, double b){ return fabs(a-b) < EPS; }\n\nistream &operator>> (istream &is, Point &p) {\n  double a, b;\n  is >> a >> b;\n  p = Point(a, b);\n  return is;\n}\n\nostream &operator<< (ostream &os, Point &p) {\n  return os << fixed << setprecision(10) << p.real() << \" \" << p.imag();\n}\n\nbool operator<(const Point &a, const Point &b) {\n  return a.real() != b.real() ? a.real() < b.real() : a.imag() < b.imag();\n}\n\n// rotate Φ(rad)\n// x = r * cos(θ + Φ)\n//   = r * cos(θ) * cos(Φ) - r * sin(θ) * sin(Φ)\n//   = x * cos(Φ) - y * sin(Φ) (∵ cos(θ) = x/r, sin(θ) = y/r)  \nPoint rotate(double phi, const Point &p) {\n  double x = p.real(), y = p.imag();\n  return Point(x * cos(phi) - y * sin(phi), x * sin(phi) + y * cos(phi));\n}\n\ndouble radian_to_degree(double r) {\n  return (r * 180.0 / PI);\n}\n\ndouble degree_to_radian(double d) {\n  return (d * PI / 180.0);\n}\n\nstruct Line{\n  Point a, b;\n\n  Line() = default;\n\n  Line(Point a, Point b) : a(a), b(b){}\n\n  Line(double A, double B, double C){\n    //ax + by = c\n    if(eq(A, 0)){\n      a = Point(0, C/B), b = Point(1, C/B);\n    }else if(eq(B, 0)){\n      a = Point(C/A, 0), b = Point(C/A, 1);\n    }else{\n      a = Point(0, C/B), b = Point(C/A, 0);\n    }\n  }\n\n  friend istream &operator>>(istream &is, Line &a) {\n    return is >> a.a >> a.b;\n  }\n  friend ostream &operator<<(ostream &os, Line &a) {\n    return os << a.a << \" to \" << a.b;\n  }\n};\n\nstruct Segment: Line {\n  Segment() = default;\n\n  Segment(Point a, Point b) : Line(a, b) {}\n};\n\nstruct Circle {\n  Point p;\n  double r;\n\n  Circle() = default;\n\n  Circle(Point p, double r): p(p), r(r){}\n};\n\nusing Points = vector<Point>;\nusing Polygon = vector<Point>;\nusing Segments = vector<Segment>;\nusing Lines = vector<Line>;\nusing Circles = vector<Circle>;\n\ndouble cross(const Point &a, const Point &b) {\n  return a.real() * b.imag() - a.imag() * b.real();\n}\n\ndouble dot(const Point& a, const Point &b) {\n  return a.real() * b.real() + a.imag() * b.imag();\n}\n\n//https://mathtrain.jp/projection\nPoint projection(const Line &l, const Point &p){\n  double t = dot(p - l.a, l.a-l.b) / norm(l.a - l.b);\n  return l.a + (l.a - l.b) * t;\n}\n\nPoint projection(const Segment &l, const Point &p){\n  double t = dot(p - l.a, l.b-l.a) / norm(l.a - l.b);\n  return l.a + (l.b - l.a) * t;\n}\n\nPoint reflection(const Line &l, const Point &p){\n  return p + (projection(l, p) - p) * 2.0;\n}\n\nint ccw(const Point &a, const Point &b, const Point &c) {\n  if(cross(b-a, c-a) > EPS) return 1;   // \"COUNTER_CLOCKWISE\"\n  if(cross(b-a, c-a) < -EPS) return -1; // \"CLOCKWISE\"\n  if(dot(b-a, c-a) < -EPS) return 2;    // \"ONLINE_BACK\" c-a-b\n  if(norm(b-a) < norm(c-a) - EPS) return -2;  // \"ONLINE_FRONT\" a-b-c\n  return 0;                         // \"ON_SEGMENT\" a-c-b\n}\n\nbool parallel(const Line &a, const Line &b){\n  return eq(cross(a.a-a.b, b.a-b.b), 0.0);\n}\nbool orthogonal(const Line &a, const Line &b){\n  return eq(dot(a.a-a.b, b.a-b.b), 0.0);\n}\n\nbool intersect(const Segment &s, const Point &p){\n  return ccw(s.a, s.b, p) == 0;\n}\n\n//直線の交差判定\nbool intersect(const Line &a, const Line &b) {\n  if(parallel(a, b)) return 0;\n  return 1;\n}\n\n//線分が重なる/端点で交わるときtrue\nbool intersect(const Segment &a, const Segment &b) {\n  return ccw(a.a, a.b, b.a) * ccw(a.a, a.b, b.b) <= 0 && ccw(b.a, b.b, a.a) * ccw(b.a, b.b, a.b) <= 0;\n}\n\nPoint crosspoint(const Line &a, const Line &b){\n  double d = cross(b.b-b.a, a.b-a.a);\n  if(eq(d, 0.0)) return Point(1e9, 1e9); \n  \n  return a.a + (a.b - a.a) * cross(b.b-b.a, b.b-a.a) / d;\n}\n\nPoint crosspoint(const Segment &a, const Segment &b){\n  return crosspoint(Line(a.a, a.b), Line(b.a, b.b));\n}\ndouble distance(const Point &a, const Point &b){\n  return abs(a - b);\n}\ndouble distance(const Line &l, const Point &p){\n  return abs( cross(p - l.a, l.b-l.a) / abs(l.b-l.a) );\n}\ndouble distance(const Segment &s, const Point &p){\n  Point r = projection(s, p);\n  if(intersect(s, r)) return abs(r-p);\n  return min(abs(s.a - p), abs(s.b - p));\n}\n// double distance(const Line &a, const Line &b){\n\n// }\n// double distance(const Line &a, const Segment &b){\n\n// }\ndouble distance(const Segment &a, const Segment &b) {\n  return intersect(a, b) ? 0 : min({distance(a, b.a), distance(a, b.b), distance(b, a.a), distance(b, a.b)});\n}\nint main(){\n  int q;\n  cin >> q;\n  while(q--){\n    Segment a, b;\n    cin >> a >> b;\n    \n    cout << fixed << setprecision(10) << distance(a, b) << endl;\n  }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> P;\ndouble eps=1e-8;\nbool eq(double a,double b){return (b-a<eps&&a-b<eps);}\ndouble cross(P a,P b){return real(b*conj(a));}\ndouble dot(P a,P b){return imag(b*conj(a));}\nP project(P a,P b,P c){b-=a;c-=a;return a+b*real(c/b);}\nP reflect(P a,P b,P c){b-=a;c-=a;return a+conj(c/b)*b;}\nint ccw(P a,P b,P c){\n  b-=a,c-=a,a=c*conj(b);\n  if(a.imag()>eps)return 1;//ccw\n  if(a.imag()<eps)return -1;//cw\n  if(a.real()<-eps)return 2;//ob\n  if(abs(b)<abs(c)+eps)return -2;//of\n  return 0;//os\n}\n\n//segment ab , point c\ndouble dist(P a,P b,P c){\n  if(dot(b-a,c-a)<0)return abs(c-a);\n  if(dot(a-b,c-b)<0)return abs(c-b);\n  return imag((c-a)*conj(b-a))/abs(b-a);\n}\n\nbool isintersect(P a,P b,P c,P d){\n  return ((ccw(a,b,c)*ccw(a,b,d)<=0)&&(ccw(c,d,a)*ccw(c,d,b)<=0));\n}\n\n//segment ab , segment cd\nP intersect(P a,P b,P c,P d){\n  a-=d;b-=d;c-=d;\n  return d+a+(b-a)*imag(a/c)/imag(a/c-b/c);\n}\n\ndouble dist(P a,P b,P c,P d){\n  if(isintersect(a,b,c,d))return 0;\n  return min(min(abs(a-c),abs(a-d)),min(abs(b-c),abs(b-d)));\n}\n\nint main(){\n  int T;\n  cin>>T;\n  while(T--){\n    double ax,ay,bx,by,cx,cy,dx,dy;\n    cin>>ax>>ay>>bx>>by>>cx>>cy>>dx>>dy;\n    printf(\"%.12f\\n\",dist( P(ax,ay) , P(bx,by) , P(cx,cy) , P(dx,dy) ) );\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nnamespace arithmetic {\n  template<typename T> class Addition {\n  public:\n    template<typename V> T operator+(const V& v) const {\n      return T(static_cast<const T&>(*this)) += v;\n    }\n  };\n\n  template<typename T> class Subtraction {\n  public:\n    template<typename V> T operator-(const V& v) const {\n      return T(static_cast<const T&>(*this)) -= v;\n    }\n  };\n\n  template<typename T> class Multiplication {\n  public:\n    template<typename V> T operator*(const V& v) const {\n      return T(static_cast<const T&>(*this)) *= v;\n    }\n  };\n\n  template<typename T> class Division {\n  public:\n    template<typename V> T operator/(const V& v) const {\n      return T(static_cast<const T&>(*this)) /= v;\n    }\n  };\n\n  template<typename T> class Modulus {\n  public:\n    template<typename V> T operator%(const V& v) const {\n      return T(static_cast<const T&>(*this)) %= v;\n    }\n  };\n}\n\ntemplate<typename T> class IndivisibleArithmetic : public arithmetic::Addition<T>, public arithmetic::Subtraction<T>, public arithmetic::Multiplication<T> {};\n\ntemplate<typename T> class Arithmetic : public IndivisibleArithmetic<T>, public arithmetic::Division<T> {};\n\ntemplate<typename T> class Ordered {\npublic:\n  template<typename V> bool operator==(const V& v) const {\n    return !(static_cast<T>(v) < static_cast<const T&>(*this) || static_cast<const T&>(*this) < static_cast<T>(v));\n  }\n  \n  template<typename V> bool operator!=(const V& v) const {\n    return static_cast<T>(v) < static_cast<const T&>(*this) || static_cast<const T&>(*this) < static_cast<T>(v);\n  }\n\n  template<typename V> bool operator>(const V& v) const {\n    return static_cast<T>(v) < static_cast<const T&>(*this);\n  }\n\n  template<typename V> bool operator<=(const V& v) const {\n    return !(static_cast<T>(v) < static_cast<const T&>(*this));\n  }\n\n  template<typename V> bool operator>=(const V& v) const {\n    return !(static_cast<const T&>(*this) < static_cast<T>(v));\n  }\n};\n\ntemplate<typename T> inline T gcd(T a, T b) {\n  return __gcd(a, b);\n}\n\ntemplate<typename T> inline T lcm(T a, T b) {\n  return a / gcd(a, b) * b;\n}\n\ntemplate<typename T> inline T floor(T a, T b) {\n  return floor(a / b) * b <= a ? floor(a / b) : floor(a / b) - 1;\n}\n\ntemplate<typename T> inline T ceil(T a, T b) {\n  return floor(a + b - 1, b);\n}\n\ntemplate<typename T> inline T round(T a, T b) {\n  return floor(a + b / 2);\n}\n\ntemplate<typename T> inline T mod(T a, T b) {\n  return a - floor(a, b) * b;\n}\n\ntemplate<typename T> inline T factorial(T n) {\n  return n <= 1 ? 1 : factorial(n - 1) * n;\n}\n\nclass Real : public Arithmetic<Real>, public arithmetic::Modulus<Real>, public Ordered<Real> {\nprivate:\n  static long double EPS;\n  long double val;\n\n  operator long double() const {\n    return val;\n  }\n\npublic:\n  Real() {}\n\n  Real(long double val) : val(val) {}\n\n  Real operator-() const {\n    return -val;\n  }\n\n  template<typename T> Real operator+=(const T& r) {\n    val += static_cast<long double>(r);\n    return *this;\n  }\n\n  template<typename T> Real operator-=(const T& r) {\n    val -= static_cast<long double>(r);\n    return *this;\n  }\n\n  template<typename T> Real operator*=(const T& r) {\n    val *= static_cast<long double>(r);\n    return *this;\n  }\n\n  template<typename T> Real operator/=(const T& r) {\n    val /= static_cast<long double>(r);\n    return *this;\n  }\n\n  template<typename T> Real operator%=(const T& r) {\n    return *this = mod(*this, static_cast<Real>(r));\n  }\n\n  template<typename T> Real operator-(const T& v) const {\n    return Real(*this) -= v;\n  }\n\n  template<typename T> bool operator<(const T r) const {\n    return val < static_cast<long double>(r) - EPS;\n  }\n\n  Real abs() const {\n    return std::abs(val);\n  }\n\n  Real sqrt() const {\n    return std::sqrt(val);\n  }\n\n  long double toLongDouble() const {\n    return val;\n  }\n};\n\nlong double Real::EPS = 1e-8;\n\ninline ostream& operator<<(ostream& os, const Real& a) {\n  os << fixed << setprecision(15) << a.toLongDouble();\n  return os;\n}\n\ninline istream& operator>>(istream& is, Real& a) {\n\tlong double n;\n\tis >> n;\n\ta = n;\n\treturn is;\n}\n\nReal floor(const Real& r) {\n  return floor(r.toLongDouble());\n}\n\nclass Point : public Arithmetic<Point> {\npublic:\n  Real x, y;\n\n  Point() {}\n\n  Point(const Real& x) : x(x), y(0) {}\n\n  Point(const Real& x, const Real& y) : x(x), y(y) {}\n\n  Point operator+=(const Point& p) {\n    x += p.x;\n    y += p.y;\n    return *this;\n  }\n\n  Point operator-=(const Point& p) {\n    x -= p.x;\n    y -= p.y;\n    return *this;\n  }\n\n  Point operator*=(const Point& p) {\n    Real xx = x * p.x - y * p.y;\n    y = x * p.y + y * p.x;\n    x = xx;\n    return *this;\n  }\n\n  Point operator*=(const Real& r) {\n    x *= r;\n    y *= r;\n    return *this;\n  }\n\n  Point operator/=(const Point& p) {\n    Real nrm = p.norm();\n    Real xx = (x * p.x + y * p.y) / nrm;\n    y = (y * p.x - x * p.y) / nrm;\n    x = xx;\n    return *this;\n  }\n\n  Point operator/=(const Real& r) {\n    x /= r;\n    y /= r;\n    return *this;\n  }\n\n  Real norm() const {\n    return x * x + y * y;\n  }\n\n  Real abs() const {\n    return norm().sqrt();\n  }\n\n  Point conj() const {\n    return Point(x, -y);\n  }\n};\n\ninline Point operator*(const Real& real, const Point& point) {\n  return point * real;\n}\n\ninline Point operator/(const Real& real, const Point& point) {\n  return point / real;\n}\n\ninline ostream& operator<<(ostream& os, const Point& point) {\n\tos << point.x << \" \" << point.y;\n\treturn os;\n}\n\ninline istream& operator>>(istream& is, Point& point) {\n  Real x, y;\n\tis >> x >> y;\n\tpoint = Point(x, y);\n\treturn is;\n}\n\nclass Line {\npublic:\n  Point a, b;\n\n  Line() {}\n\n  Line (const Point& a, const Point& b) : a(a), b(b) {}\n\n  bool operator==(const Line& line) const {\n    return ((line.vec() / vec()).y == 0) && (((line.a - a) / vec()).y == 0);\n  }\n\n  Point vec() const {\n    return b - a;\n  }\n};\n\ninline ostream& operator<<(ostream& os, const Line& line) {\n\tos << line.a << \" \" << line.b;\n\treturn os;\n}\n\ninline istream& operator>>(istream& is, Line& line) {\n  Point a, b;\n  is >> a >> b;\n  line = Line(a, b);\n  return is;\n}\n\nclass Segment : public Line {\npublic:\n  Segment() {}\n\n  Segment (const Point& a, const Point& b) : Line(a, b) {}\n};\n\nenum CCW{LEFT = 1, RIGHT = 2, BACK = 4, FRONT = 8, ON = 16};\n\nint ccw(const Segment& segment, const Point& point) {\n  Point p = (point - segment.a) / segment.vec();\n  if (p.y > 0) return LEFT;\n  if (p.y < 0) return RIGHT;\n  if (p.x < 0) return BACK;\n  if (p.x > 1) return FRONT;\n  return ON;\n}\n\ntemplate<bool strict = false> inline bool intersect(const Line& line1, const Line& line2) {\n  if (strict) return (line1.vec() / line2.vec()).y != 0;\n  return ((line1.vec() / line2.vec()).y != 0) || (line1 == line2);\n}\n\ntemplate<bool strict = false> inline bool intersect(const Line& line, const Segment& segment) {\n  Point p1 = segment.a / line.vec(), p2 = segment.b / line.vec();\n  if (strict) return p1.y * p2.y < 0;\n  return p1.y * p2.y <= 0;\n}\n\ntemplate<bool strict = false> inline bool intersect(const Segment& segment, const Line& line) {\n  return intersect(line, segment);\n}\n\ntemplate<bool strict = false> inline bool intersect(const Segment& segment1, const Segment& segment2) {\n  int ccw1 = ccw(segment1, segment2.a) | ccw(segment1, segment2.b);\n  int ccw2 = ccw(segment2, segment1.a) | ccw(segment2, segment1.b);\n  if (strict) return (ccw1 & ccw2) == (LEFT | RIGHT);\n  return ((ccw1 & ccw2) == (LEFT | RIGHT)) || ((ccw1 | ccw2) & ON);\n}\n\ninline Real distance(const Segment& segment, const Point& point) {\n  Point p = (point - segment.a) / segment.vec();\n  if (p.x < 0) return (p * segment.vec()).abs();\n  if (p.x > 1) return ((p - Point(1, 0)) * segment.vec()).abs();\n  return (p.y * segment.vec()).abs();\n}\n\ninline Real distance(const Segment& segment1, const Segment& segment2) {\n  if (intersect(segment1, segment2)) return 0;\n  return min(min(distance(segment1, segment2.a), distance(segment1, segment2.b)), min(distance(segment2, segment1.a), distance(segment2, segment1.b)));\n}\n\nint main() {\n  int q;\n  cin >> q;\n  for (int i = 0; i < q; ++i) {\n    Segment segment1, segment2;\n    cin >> segment1 >> segment2;\n    cout << distance(segment1, segment2) << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\nusing namespace std;\n#include<cstdio>\n#include<cmath>\n\nstruct Point{ double x, y; };\n\nPoint set_p(double a, double b)\n{\n    Point p;\n    p.x = a; p.y = b;\n    return p;\n}\n\nstruct Vector{ double vx, vy; };\n\nVector set_v(const Point &p1, const Point &p2)\n{\n    Vector v;\n    v.vx = p2.x - p1.x;\n    v.vy = p2.y - p1.y;\n    return v;\n}\n\ndouble dot(const Vector &v1, const Vector &v2)\n{\n    return (v1.vx * v2.vx) + (v1.vy * v2.vy);\n}\n\ndouble cross(const Vector &v1, const Vector &v2)\n{\n    return (v1.vx * v2.vy) - (v1.vy * v2.vx);\n}\n\ndouble cross0(const Point &P0, const Point &P1)\n{\n\treturn (P0.x * P1.y) - (P1.x * P0.y);\n}\n\ndouble onenorm(const Vector &v)\n{\n    return abs(v.vx) + abs(v.vy);\n}\n\ndouble norm(const Vector &v)\n{\n\treturn sqrt(v.vx * v.vx + v.vy * v.vy);\n}\n\nint ccw(const Point &P0, const Point &P1, const Point &P2)\n{\n    Vector V1 = set_v(P0, P1);\n    Vector V2 = set_v(P0, P2);\n    double c = cross(V1, V2);\n    if(c > 0){ return 1; }else if(c < 0){ return -1; }\n    if(dot(V1, V2) < 0){ return -2; }\n    if(onenorm(V1) < onenorm(V2)){ return 2; }\n    return 0;\n}\n\nint intersect(const Point &P0, const Point &P1, const Point &P2, const Point &P3)\n{\n    if(ccw(P0, P1, P2) * ccw(P0, P1, P3) <= 0 && ccw(P2, P3, P0) * ccw(P2, P3, P1) <= 0){\n        return 1;\n    }else{\n        return 0;\n    }\n}\n\ndouble dist_seg(const Point &P0, const Point &P1, const Point &P2) // Segment P0P1 & Point P2.\n{\n    Vector V01 = set_v(P0, P1), V12 = set_v(P1, P2), V02 = set_v(P0, P2);\n    if(dot(V01, V12) > 0) return norm(V12);\n    if(dot(V01, V02) < 0) return norm(V02);\n    double c_sum;\n    c_sum = cross0(P0, P1) + cross0(P1, P2) + cross0(P2, P0);\n    if(c_sum < 0) c_sum *= -1.0;\n    return c_sum / norm(V01);\n}\n\nint main()\n{\n    int q;\n    double x0, y0, x1, y1, x2, y2, x3, y3, dist;\n    Point P0, P1, P2, P3;\n    scanf(\"%d\", &q);\n\n    for(int i = 0; i < q; i++){\n        scanf(\"%lf %lf %lf %lf %lf %lf %lf %lf\", &x0, &y0, &x1, &y1, &x2, &y2, &x3, &y3);\n        P0 = set_p(x0, y0), P1 = set_p(x1, y1), P2 = set_p(x2, y2), P3 = set_p(x3, y3);\n        if(intersect(P0, P1, P2, P3)){\n            printf(\"0\\n\");\n        }else{\n            dist = min(min(dist_seg(P0, P1, P2), dist_seg(P0, P1, P3)), min(dist_seg(P2, P3, P0), dist_seg(P2, P3, P1)));\n            printf(\"%.13f\\n\", dist);\n        }\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define db double\nconst db eps = 1e-6;\nint sgn(db a, db b = 0) {\n\ta -= b;\n\treturn (a > eps) - (a < -eps);\n}\n\nstruct poi {\n\tdb x, y;\n\tvoid r() { cin >> x; cin >> y; }\n\tvoid w() { cout << x << ' ' << y << '\\n'; }\n\tpoi operator -(poi p) {\n\t\treturn {x - p.x, y - p.y};\n\t}\n\tpoi operator +(poi p) {\n\t\treturn {x + p.x, y + p.y};\n\t}\n\tpoi operator *(db d) {\n\t\treturn {x * d, y * d};\n\t}\n\tpoi operator /(db d) {\n\t\treturn {x / d, y / d};\n\t}\n\tbool operator ==(poi p) {\n\t\treturn !sgn(x, p.x) && !sgn(y, p.y);\n\t}\n\tdb dot(poi p) {\n\t\treturn x * p.x + y * p.y;\n\t}\n\tdb cross(poi p) {\n\t\treturn x * p.y - y * p.x;\n\t}\n\tdb len() { return sqrt(x * x + y * y); }\n\tdb len2() { return x * x + y * y; }\n\tpoi proj(poi p, poi q) {\n\t\tdb s = (*this - p).dot(q - p) / (q - p).len2();\n\t\treturn p + (q - p) * s;\n\t}\n\tdb dis(poi p, poi q) {\n\t\tif((*this - p).dot(q - p) < 0) return (*this - p).len();\n\t\tif((*this - q).dot(p - q) < 0) return (*this - q).len();\n\t\treturn abs((*this - p).cross(q - p) / (q - p).len());\n\t}\n};\ndb xmul(poi a, poi b, poi c) {\n\treturn (b - a).cross(c - a);\n}\n\nint ccw(poi a, poi b, poi c) {\n\tpoi u = b - a, v = c - a;\n\tif(u.cross(v) > eps) return 1;\n\tif(u.cross(v) < -eps) return -1;\n\tif(u.dot(v) < -eps) return -2;\n\tif(u.len2() + eps < v.len2()) return 2;\n\treturn 0;\n}\nbool si(poi a, poi b, poi c, poi d) {\n\treturn ccw(a, b, c) * ccw(a, b, d) <= 0 &&\n\t\tccw(c, d, a) * ccw(c, d, b) <= 0;\n}\npoi li(poi a, poi b, poi c, poi d) {\n\tdb u = xmul(c, d, a), v = xmul(c, d, b);\n\treturn (a * v - b * u) / (v - u);\n}\n\nint main() {\n\tios :: sync_with_stdio(false);\n\tcout << fixed << setprecision(12);\n\n\tint T; cin >> T;\n\twhile(T --) {\n\t\tpoi p0, p1, p2, p3; p0.r(); p1.r(); p2.r(); p3.r();\n\t\tif(si(p0, p1, p2, p3))\n\t\t\tcout << \"0\\n\";\n\t\telse\n\t\t\tcout << min({p0.dis(p2, p3), p1.dis(p2, p3),\n\t\t\t\tp2.dis(p0, p1), p3.dis(p0, p1)}) << '\\n';\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n/*\n#ifndef ONLINE_JUDGE\n\t#include <boost/multiprecision/cpp_int.hpp>\n\t#include <boost/multiprecision/cpp_dec_float.hpp>\n\tusing bll = boost::multiprecision::cpp_int;\n\tusing bdouble = boost::multiprecision::cpp_dec_float_100;\n#endif\n*/\n#ifdef LOCAL_DEV\n\tvoid debug_impl() { std::cerr << std::endl; }\n\ttemplate<typename Head, typename... Tail> void debug_impl(Head head, Tail... tail) { std::cerr << \" \" << head << (sizeof...(tail) ? \",\" : \"\"); debug_impl(tail...); }\n\t#define debug(...) { std::cerr << std::boolalpha << \"(\" << #__VA_ARGS__ << \") =\"; debug_impl(__VA_ARGS__); std::cerr << std::noboolalpha; }\n#else\n\t#define debug(...) {}\n#endif\n#ifdef LOCAL_TEST\n\t#define BOOST_STACKTRACE_USE_ADDR2LINE\n\t#define BOOST_STACKTRACE_ADDR2LINE_LOCATION /usr/local/opt/binutils/bin/addr2line\n\t#define _GNU_SOURCE\n\t#include <boost/stacktrace.hpp>\n\ttemplate<typename T> class dvector : public std::vector<T> {\n\tpublic:\n\t\tdvector() : std::vector<T>() {}\n\t\texplicit dvector(size_t n, const T& value = T()) : std::vector<T>(n, value) {}\n\t\tdvector(const std::vector<T>& v) : std::vector<T>(v) {}\n\t\tdvector(const std::initializer_list<T> il) : std::vector<T>(il) {}\n\t\tdvector(const typename std::vector<T>::iterator first, const typename std::vector<T>::iterator last) : std::vector<T>(first, last) {}\n\t\tdvector(const std::string::iterator first, const std::string::iterator last) : std::vector<T>(first, last) {}\n\t\tT& operator[](size_t n) {\n\t\t\ttry { return this->at(n); } catch (const std::exception& e) {\n\t\t\t\tstd::cerr << boost::stacktrace::stacktrace() << std::endl; return this->at(n);\n\t\t\t}\n\t\t}\n\t\tconst T& operator[](size_t n) const {\n\t\t\ttry { return this->at(n); } catch (const std::exception& e) {\n\t\t\t\tstd::cerr << boost::stacktrace::stacktrace() << std::endl; return this->at(n);\n\t\t\t}\n\t\t}\n\t};\n\tclass dbool {\n\tprivate:\n\t\tbool boolvalue;\n\tpublic:\n\t\tdbool() : boolvalue(false) {}\n\t\tdbool(bool b) : boolvalue(b) {}\n\t\tdbool(const dbool &b) : boolvalue(b.boolvalue) {}\n\t\toperator bool&() { return boolvalue; }\n\t\toperator const bool&() const { return boolvalue; }\n\t};\n\ttemplate<typename T> std::ostream& operator<<(std::ostream& s, const dvector<T>& v) {\n\t\tfor (int i = 0, len = v.size(); i < len; ++i){ s << v[i]; if (i < len - 1) s << \"\\t\"; } return s; }\n\ttemplate<typename T> std::ostream& operator<<(std::ostream& s, const dvector< dvector<T> >& vv) {\n\t\tfor (int i = 0, len = vv.size(); i < len; ++i){ s << vv[i] << std::endl; } return s; }\n\ttemplate<typename T> std::ostream& operator<<(std::ostream& s, const std::set<T>& se) {\n\t\ts << \"{ \"; for (auto itr = se.begin(); itr != se.end(); ++itr){ s << (*itr) << \"\\t\"; } s << \"}\"; return s; }\n\ttemplate<typename T> std::ostream& operator<<(std::ostream& s, const std::multiset<T>& se) {\n\t\ts << \"{ \"; for (auto itr = se.begin(); itr != se.end(); ++itr){ s << (*itr) << \"\\t\"; } s << \"}\"; return s; }\n\ttemplate<typename T1, typename T2> std::ostream& operator<<(std::ostream& s, const std::map<T1, T2>& m) {\n\t\ts << \"{\" << std::endl; for (auto itr = m.begin(); itr != m.end(); ++itr){ s << \"\\t\" << (*itr).first << \" : \" << (*itr).second << std::endl; } s << \"}\"; return s; }\n\ttemplate<typename T1, typename T2> std::ostream& operator<<(std::ostream& s, const std::pair<T1, T2>& p) { \n\t\treturn s << \"(\" << p.first << \", \" << p.second << \")\"; }\n\t#define vector dvector\n\t#define bool dbool\n\tclass SIGFPE_exception : std::exception {};\n\tclass SIGSEGV_exception : std::exception {};\n\tvoid catch_SIGFPE(int e) { std::cerr << boost::stacktrace::stacktrace() << std::endl; throw SIGFPE_exception();\t}\n\tvoid catch_SIGSEGV(int e) { std::cerr << boost::stacktrace::stacktrace() << std::endl; throw SIGSEGV_exception(); }\n\tsigned convertedmain();\n\tsigned main() { signal(SIGFPE, catch_SIGFPE); signal(SIGSEGV, catch_SIGSEGV); return convertedmain(); }\n\t#define main() convertedmain()\n#endif\n//#define int long long\nusing ll = long long;\n//constexpr int INF = 1e9;//INT_MAX=(1<<31)-1=2147483647\nconstexpr ll INF = (ll)1e18;//(1LL<<63)-1=9223372036854775807\nconstexpr ll MOD = (ll)1e9 + 7;\nconstexpr double EPS = 1e-9;\nconstexpr int dx[4] = {1, 0, -1, 0};\nconstexpr int dy[4] = {0, 1, 0, -1};\n#define p(var) std::cout<<var<<std::endl\n#define rep(i, n)   for(ll i=0, i##_length=(n); i< i##_length; ++i)\n#define repeq(i, n) for(ll i=1, i##_length=(n); i<=i##_length; ++i)\n#define rrep(i, n)   for(ll i=(n)-1; i>=0; --i)\n#define rrepeq(i, n) for(ll i=(n)  ; i>=1; --i)\n#define all(v) (v).begin(), (v).end()\n#define rall(v) (v).rbegin(), (v).rend()\n#define uniq(v) (v).erase(unique((v).begin(), (v).end()), (v).end());\ntemplate<typename T> inline void pv(vector<T> &v) { for(ll i=0, N=v.size(); i<N; i++) std::cout << v[i] << \" \\n\"[i==N-1]; }\ntemplate<typename T> inline T gcd(T a, T b) { return b ? gcd(b,a%b) : a; }\ntemplate<typename T> inline T lcm(T a, T b) { return a / gcd(a,  b) * b; }\ntemplate<typename T> inline bool chmax(T &a, T b) { return a < b && (a = b, true); }\ntemplate<typename T> inline bool chmin(T &a, T b) { return a > b && (a = b, true); }\n\n/*-----8<-----template-----8<-----*/\n\n//点、ベクトル\nclass Point {\npublic:\n\tdouble x,y;\n\tPoint(double x=0., double y=0.) : x(x), y(y) {}\n\tPoint operator + (Point p) {return Point(x+p.x, y+p.y);}\n\tPoint operator - (Point p) {return Point(x-p.x, y-p.y);}\n\tPoint operator * (Point p) {return Point(x*p.x, y*p.y);}\n\tPoint operator / (Point p) {return Point(x/p.x, y/p.y);}\n\n\tdouble abs(){ return sqrt(norm()); }\n\tdouble norm(){ return x*x + y*y; }\n\n\tbool operator < (const Point &p) const {\n\t\treturn x!=p.x ? x<p.x : y<p.y;\n\t}\n\tbool operator == (const Point &p) const {\n\t\treturn fabs(x-p.x)<EPS && fabs(y-p.y)<EPS;\n\t}\n\t\n};\n//using Vector = Point;\ntypedef Point Vector;\n\n//線分、直線\nclass Segment {\npublic:\n\tPoint p1,p2;\n\tSegment() {}\n\tSegment(Point p1, Point p2) : p1(p1), p2(p2) {}\n};\n//using Line = Segment;\ntypedef Segment Line;\n\n//ベクトルの内積\ndouble dot(Vector a, Vector b){\n\treturn a.x*b.x + a.y*b.y;\n}\n//ベクトルの外積\ndouble cross(Vector a, Vector b){\n\treturn a.x*b.y - a.y*b.x;\n}\ndouble equals(double a,double b){ return fabs(a-b)<EPS; }\n//直交判定\nbool isOrthogonal(Vector a,Vector b){\n\treturn equals(dot(a,b), 0.0);\n}\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n\treturn isOrthogonal(a1-a2, b1-b2);\n}\nbool isOrthogonal(Segment s1,Segment s2){\n\treturn equals(dot(s1.p2-s1.p1, s2.p2-s2.p1), 0.0);\n}\n//平行判定\nbool isParallel(Vector a,Vector b){\n\treturn equals(cross(a,b), 0.0);\n}\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n\treturn isParallel(a1-a2, b1-b2);\n}\nbool isParallel(Segment s1,Segment s2){\n\treturn equals(cross(s1.p2-s1.p1, s2.p2-s2.p1), 0.0);\n}\n//射影\nPoint project(Segment s,Point p){\n\tVector base = s.p2-s.p1;\n\tdouble r = dot(p-s.p1, base)/base.norm();\n\tPoint rp(r,r);\n\treturn base*rp + s.p1;\n}\n//反射\nPoint reflect(Segment s,Point p){\n\tPoint x2(2.,2.);\n\treturn p + (project(s,p)-p)*x2;\n}\n\n//p0,p1,p2が反時計回りになる\nstatic const int COUNTER_CLOCKWISE = 1;\n//p0,p1,p2が時計回りになる\nstatic const int CLOCKWIZE = -1;\n//p2,p0,p1がこの順で同一直線状にある\nstatic const int ONLINE_BACK = 2;\n//p0,p1,p2がこの順で同一直線状にある\nstatic const int ONLINE_FRONT = -2;\n//p2が線分p0p1上にある\nstatic const int ON_SEGMENT = 0;\nint ccw(Point p0, Point p1, Point p2){\n\tVector a=p1-p0;\n\tVector b=p2-p0;\n\tif(cross(a,b)>EPS)return COUNTER_CLOCKWISE;\n\tif(cross(a,b)<-EPS)return CLOCKWIZE;\n\tif(dot(a,b)<-EPS)return ONLINE_BACK;\n\tif(a.norm()<b.norm())return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\n//線分p1p2と線分p3p4の交差判定\n//端点が他方の線分上にある場合、線分二つが平行に重なる場合も交差しているとみなす\nbool intersect(Point p1, Point p2, Point p3, Point p4){\n\treturn (ccw(p1,p2,p3)*ccw(p1,p2,p4)<=0 && ccw(p3,p4,p1)*ccw(p3,p4,p2)<=0);\n}\nbool intersect(Segment s1, Segment s2){\n\treturn intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\n//二点間の距離\ndouble getDistance(Point a,Point b){\n\treturn (a-b).abs();\n}\n//点と直線の距離\ndouble getDistanceLP(Line l,Point p){\n\treturn fabs(cross(l.p2-l.p1, p-l.p1)) / (l.p2-l.p1).abs();\n}\n//点と線分の距離\ndouble getDistanceSP(Segment s,Point p){\n\tif(dot(s.p2-s.p1, p-s.p1)<0.)return (p-s.p1).abs();\n\tif(dot(s.p1-s.p2, p-s.p2)<0.)return (p-s.p2).abs();\n\treturn getDistanceLP(s,p);\n}\n//線分と線分の距離\ndouble getDistance(Segment s1,Segment s2){\n\tif(intersect(s1,s2))return 0.;\n\treturn min({getDistanceSP(s1,s2.p1), getDistanceSP(s1,s2.p2), getDistanceSP(s2,s1.p1), getDistanceSP(s2,s1.p2)});\n}\n\n//線分s1と線分s2の交点\nPoint getCrossPoint(Segment s1, Segment s2){\n\tVector base = s2.p2-s2.p1;\n\tdouble d1=fabs(cross(base, s1.p1-s2.p1));\n\tdouble d2=fabs(cross(base, s1.p2-s2.p1));\n\tdouble t=d1/(d1+d2);\n\treturn s1.p1+(s1.p2-s1.p1)*t;\n}\n\n//円\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c=Point(), double r=0.) : c(c), r(r) {}\n};\n//円cと線分lの交点二つ\npair<Point,Point> getCrossPoints(Circle c, Line l){\n\t//交点が存在するか\n\tassert(getDistanceLP(l,c.c)<c.r);\n\tVector pr=project(l, c.c);\n\tVector e=(l.p2-l.p1)/(l.p2-l.p1).abs();\n\tdouble base=sqrt(c.r*c.r-(pr-c.c).norm());\n\treturn {pr+e*base, pr-e*base};\n}\n\ntypedef vector<Point> Polygon;\n//多角形gと点pの内包関係を返す\nstatic const int INSIDE = 2;\nstatic const int ONLINE = 1;\nstatic const int OUTSIDE = 0;\nll contains(Polygon &g, Point p){\n\tll n=g.size();\n\tbool x=false;\n\tfor(ll i=0; i<n; i++){\n\t\tPoint a=g[i]-p, b=g[(i+1)%n]-p;\n\t\tif(fabs(cross(a,b)) < EPS && dot(a,b) < EPS) return ONLINE;\n\t\tif(a.y > b.y) swap(a,b);\n\t\tif(a.y < EPS && EPS < b.y && cross(a,b) > EPS) x=!x;\n\t}\n\treturn (x ? INSIDE : OUTSIDE);\n}\n\n//点の集合sに対する凸包を返す\nPolygon andrewScan(Polygon s){\n\tPolygon u,l;\n\tif(s.size()<3) return s;\n\tsort(s.begin(), s.end());\n\tu.push_back(s[0]);\n\tu.push_back(s[1]);\n\tl.push_back(s[s.size()-1]);\n\tl.push_back(s[s.size()-2]);\n\n\tfor(ll i=2; i<(ll)s.size(); i++){\n\t\tfor(ll n=u.size(); n>=2 && ccw(u[n-2],u[n-1],s[i])!=CLOCKWIZE; n--){\n\t\t\tu.pop_back();\n\t\t}\n\t\tu.push_back(s[i]);\n\t}\n\tfor(ll i=s.size()-3; i>=0; i--){\n\t\tfor(ll n=l.size(); n>=2 && ccw(l[n-2],l[n-1],s[i])!=CLOCKWIZE; n--){\n\t\t\tl.pop_back();\n\t\t}\n\t\tl.push_back(s[i]);\n\t}\n\n\treverse(l.begin(), l.end());\n\tfor(ll i=u.size()-2; i>=1; i--)l.push_back(u[i]);\n\n\treturn l;\n}\n\n\n//線分の集合sの交点の数を返す\nclass EndPoint {\npublic:\n\tPoint pnt;\n\tll seg,st; //入力線分のID, 端点の種類\n\tEndPoint() {}\n\tEndPoint(Point pnt, ll seg, ll st) : pnt(pnt), seg(seg), st(st) {}\n\n\tbool operator < (const EndPoint &ep) const {\n\t\tif(pnt.y == ep.pnt.y) return st < ep.st;\n\t\treturn pnt.y < ep.pnt.y;\n\t}\n};\nll manhattanIntersection(vector<Segment> &S){\n\tstatic const int BOTTOM = 0;\n\tstatic const int LEFT = 1;\n\tstatic const int RIGHT = 2;\n\tstatic const int TOP = 3;\n\tll n=S.size();\n\tvector<EndPoint> EP(2*n);\n\tfor(ll i=0,k=0; i<n; i++){\n\t\tif(S[i].p1.y==S[i].p2.y){\n\t\t\tif(S[i].p1.x>S[i].p2.x) swap(S[i].p1, S[i].p2);\n\t\t}else if(S[i].p1.y > S[i].p2.y){\n\t\t\tswap(S[i].p1, S[i].p2);\n\t\t}\n\n\t\tif(S[i].p1.y==S[i].p2.y){\n\t\t\tEP[k++]=EndPoint(S[i].p1, i, LEFT);\n\t\t\tEP[k++]=EndPoint(S[i].p2, i, RIGHT);\n\t\t}else{\n\t\t\tEP[k++]=EndPoint(S[i].p1, i, BOTTOM);\n\t\t\tEP[k++]=EndPoint(S[i].p2, i, TOP);\n\t\t}\n\t}\n\n\tsort(EP.begin(), EP.end());\n\n\tset<ll> BT;\n\tBT.insert(INF);\n\tll cnt=0;\n\tfor(ll i=0; i<2*n; i++){\n\t\tif(EP[i].st==TOP){\n\t\t\tBT.erase(EP[i].pnt.x);\n\t\t}else if(EP[i].st==BOTTOM){\n\t\t\tBT.erase(EP[i].pnt.x);\n\t\t}else if(EP[i].st==LEFT){\n\t\t\tauto b=BT.lower_bound(S[EP[i].seg].p1.x);\n\t\t\tauto e=BT.upper_bound(S[EP[i].seg].p2.x);\n\t\t\tcnt+=distance(b,e);\n\t\t}\n\t}\n\treturn cnt;\n}\n\n\n/*-----8<-----library-----8<-----*/\n\n//http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_A&lang=ja\nvoid CGL_2_A(){\n\tll N;\n\tcin>>N;\n\tvector<ll> ans(N,0);\n\trep(i,N){\n\t\tdouble x0,y0,x1,y1,x2,y2,x3,y3;\n\t\tcin>>x0>>y0>>x1>>y1>>x2>>y2>>x3>>y3;\n\t\tPoint p0(x0,y0),p1(x1,y1),p2(x2,y2),p3(x3,y3);\n\t\tll t=0;\n\t\tif(isOrthogonal(p0,p1,p2,p3)){\n\t\t\tt=1;\n\t\t}else if(isParallel(p0,p1,p2,p3)){\n\t\t\tt=2;\n\t\t}\n\t\tans[i]=t;\n\t}\n\trep(i,N)p(ans[i]);\n}\n\n//http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_A&lang=ja\nvoid CGL_1_A(){\n\tdouble x0,y0,x1,y1;\n\tcin>>x0>>y0>>x1>>y1;\n\tLine l(Point(x0,y0),Point(x1,y1));\n\tll Q;\n\tcin>>Q;\n\tvector<Point> ans(Q,0);\n\trep(i,Q){\n\t\tdouble xq,yq;\n\t\tcin>>xq>>yq;\n\t\tPoint po(xq,yq);\n\t\tPoint t=project(l,po);\n\t\tans[i]=t;\n\t}\n\tcout.setf(ios::fixed), cout.precision(20);\n\trep(i,Q){\n\t\tcout<<ans[i].x<<' '<<ans[i].y<<'\\n';\n\t}\n}\n\n//http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_B&lang=ja\nvoid CGL_1_B(){\n\tdouble x0,y0,x1,y1;\n\tcin>>x0>>y0>>x1>>y1;\n\tLine l(Point(x0,y0),Point(x1,y1));\n\tll Q;\n\tcin>>Q;\n\tvector<Point> ans(Q,0);\n\trep(i,Q){\n\t\tdouble xq,yq;\n\t\tcin>>xq>>yq;\n\t\tPoint po(xq,yq);\n\t\tPoint t=reflect(l,po);\n\t\tans[i]=t;\n\t}\n\tcout.setf(ios::fixed), cout.precision(20);\n\trep(i,Q){\n\t\tcout<<ans[i].x<<' '<<ans[i].y<<'\\n';\n\t}\n}\n\n//http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_D&lang=ja\nvoid CGL_2_D(){\n\tll Q;\n\tcin>>Q;\n\tvector<double> ans(Q,0);\n\trep(i,Q){\n\t\tdouble x0,y0,x1,y1,x2,y2,x3,y3;\n\t\tcin>>x0>>y0>>x1>>y1>>x2>>y2>>x3>>y3;\n\t\tSegment s0(Point(x0,y0),Point(x1,y1)), s1(Point(x2,y2),Point(x3,y3));\n\t\tdouble t=getDistance(s0,s1);\n\t\tans[i]=t;\n\t}\n\tcout.setf(ios::fixed), cout.precision(20);\n\trep(i,Q)p(ans[i]);\n}\n\nsigned main() {\n\t//CGL_2_A();\n\t//CGL_1_A();\n\t//CGL_1_B();\n\tCGL_2_D();\n\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <bitset>\n#include <cmath>\n#include <functional>\n#include <iomanip>\n#include <iostream>\n#include <limits>\n#include <map>\n#include <queue>\n#include <set>\n#include <tuple>\n#include <vector>\n\nusing namespace std;\n\n#define rep(i, n) for (int64_t i = 0; i < (n); i++)\n#define irep(i, n) for (int64_t i = 0; i <= (n); i++)\n#define rrep(i, n) for (int64_t i = (n)-1; i >= 0; i--)\n#define rirep(i, n) for (int64_t i = n; i >= 0; i--)\n\nclass Vec;\nVec operator/(const Vec& v, const double& divisor);\nVec operator*(const double& scale, const Vec& v);\n\nclass Vec {\n  using F = double;\n  vector<F> container;\n\n public:\n  Vec(size_t size) : container(size) {}\n  Vec(initializer_list<F> elements)\n      : container(elements.begin(), elements.end()) {}\n  size_t dim() const { return container.size(); }\n  F& operator[](const size_t size) { return container.at(size); }\n  const F& operator[](const size_t size) const { return container.at(size); }\n  Vec operator+(const Vec& other) const {\n    Vec ret(*this);\n    for (size_t i = 0; i < dim(); i++) ret[i] += other[i];\n    return ret;\n  }\n  Vec operator-(const Vec& other) const { return (*this) + (-other); }\n  Vec operator-() const { return -1.0 * (*this); }\n  F inner(const Vec& other) const {\n    F acc = 0;\n    for (size_t i = 0; i < dim(); i++) {\n      acc += (*this)[i] * other[i];\n    }\n    return acc;\n  }\n  F norm() const { return sqrt(inner(*this)); }\n  Vec unit() const { return (*this) / this->norm(); }\n  F ccw(const Vec& other) const {\n    return (*this)[0] * other[1] - other[0] * (*this)[1];\n  }\n  Vec normal() const { return Vec({-(*this)[1], (*this)[0]}); }\n};\nVec operator/(const Vec& v, const double& divisor) { return 1.0 / divisor * v; }\nVec operator*(const double& scale, const Vec& v) {\n  Vec ret(v);\n  for (size_t i = 0; i < ret.dim(); i++) ret[i] *= scale;\n  return ret;\n}\n\nclass Line {\n  Vec m_grad;\n  double m_bias;\n\n public:\n  Line(const Vec& grad, double bias) : m_grad(grad), m_bias(bias) {}\n  static Line fromPoints(const Vec& p0, const Vec& p1) {\n    Vec d = p0 - p1;\n    Vec g({-d[1], d[0]});\n    return Line(g, g.inner(p0));\n  }\n  const Vec& grad() const { return m_grad; }\n  double bias() const { return m_bias; }\n  double dist(const Vec& p) const {\n    return abs(m_grad.inner(p) - m_bias) / m_grad.norm();\n  }\n  Vec projection(const Vec& p) const {\n    const Vec g = m_grad.unit();\n    const Vec h({-g[1], g[0]});\n    return m_bias / m_grad.norm() * g + h.inner(p) * h;\n  }\n};\n\nclass Segment {\n  const Vec m_start;\n  const Vec m_end;\n\n public:\n  Segment(const Vec& start, const Vec& end) : m_start(start), m_end(end) {}\n  bool intersect(const Segment& other, const double eps) const {\n    const Vec u = other.m_start - m_start, w = other.m_end - m_start;\n    const Vec v0 = m_end - m_start, v1 = other.m_end - other.m_start;\n\n    const double vn = v0.norm();\n    double u_v = v0.inner(u) / vn;\n    double w_v = v0.inner(w) / vn;\n    if (abs(abs(u_v / u.norm()) - 1) < eps &&\n        abs(abs(w_v / w.norm()) - 1) < eps) {\n      if (u_v > w_v) {\n        swap(u_v, w_v);\n      }\n      return !(u_v > vn + eps || w_v < -eps);\n    }\n    bool cond1 =\n        v0.ccw(other.m_start - m_start) * v0.ccw(other.m_end - m_start) < eps;\n    bool cond2 =\n        v1.ccw(m_start - other.m_start) * v1.ccw(m_end - other.m_start) < eps;\n    return cond1 && cond2;\n  }\n  Vec direction() const { return m_end - m_start; }\n  double dist(const Vec& p) const {\n    const Vec dir = direction();\n    const Vec d = dir.unit();\n    const Vec q = p - m_start;\n    const double a = d.inner(q);\n    if (a < 0) {\n      return (m_start - p).norm();\n    } else if (dir.norm() < a) {\n      return (m_end - p).norm();\n    } else {\n      return abs(d.normal().inner(q));\n    }\n  }\n  double dist(const Segment& other) const {\n    if (intersect(other, 0.0)) {\n      return 0.0;\n    }\n    return min(min(dist(other.m_start), dist(other.m_end)),\n               min(other.dist(m_start), other.dist(m_end)));\n  }\n};\n\nint main() {\n  int q;\n  cin >> q;\n\n  rep(i, q) {\n    double x0, y0, x1, y1, x2, y2, x3, y3;\n    cin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n\n    const Vec p0(Vec({x0, y0})), p1(Vec({x1, y1})), p2(Vec({x2, y2})),\n        p3(Vec({x3, y3}));\n    cout << fixed << setprecision(10) << Segment(p0, p1).dist(Segment(p2, p3))\n         << endl;\n    }\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n\nclass Point{\n    public:\n    double x,y;\n    Point(double x=0,double y=0):x(x),y(y){}\n    Point operator+(const Point &p){\n        return Point(x+p.x,y+p.y);\n    }\n    Point operator-(const Point &p){\n        return Point(x-p.x,y-p.y);\n    }\n    Point operator*(const double &a){\n        return Point(a*x,a*y);\n    }\n    Point operator/(const double &a){\n        return Point(x/a,y/a);\n    }\n    double abs(){\n        return sqrt(norm());\n    }\n    double norm(){\n        return x*x+y*y;\n    }\n    bool operator<(const Point &p){\n        return x!=p.x?x<p.x:y<p.y;\n    }\n    bool operator==(const Point &p){\n        return fabs(x-p.x)<EPS&&fabs(y-p.y)<EPS;\n    }\n};\ntypedef Point Vector;\nstruct Segment{\n    Point p1,p2;\n    Segment(){}\n    Segment(Point p1,Point p2):p1(p1),p2(p2){}\n};\ntypedef Segment Line;\n\ndouble dot(Vector a,Vector b){\n    return a.x*b.x+a.y*b.y;\n}\n\ndouble cross(Vector a,Vector b){\n    return a.x*b.y-a.y*b.x;\n}\n\nbool isOrthogonal(Segment s1,Segment s2){\n    return equals(dot(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n\nbool isParallel(Segment s1,Segment s2){\n    return equals(cross(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n\nPoint project(Segment s,Point p){\n    Vector base=s.p2-s.p1;\n    double r=dot(p-s.p1,base)/base.norm();\n    return s.p1+base*r;   \n}\n\nPoint reflect(Segment s,Point p){\n    return p+(project(s,p)-p)*2;\n}\n\ndouble getDistanceLP(Line l,Point p){\n    return abs(cross(l.p2-l.p1,p-l.p1))/(l.p2-l.p1).abs();\n}\n\ndouble getDistanceSP(Segment s,Point p){\n    if(dot(s.p2-s.p1,p-s.p1)<0){\n        return (p-s.p1).abs();\n    }\n    if(dot(s.p1-s.p2,p-s.p2)<0){\n        return (p-s.p2).abs();\n    }\n    return getDistanceLP(s,p);\n}\n\nint ccw(Point p0,Point p1,Point p2){\n    Vector a=p1-p0;\n    Vector b=p2-p0;\n    if(cross(a,b)>EPS) return 1;\n    if(cross(a,b)<-EPS) return -1;\n    if(dot(a,b)<-EPS) return 2;\n    if(a.norm()<b.norm()) return -2;\n    return 0;\n}\n\nbool intersect(Point p1,Point p2,Point p3,Point p4){\n    return (ccw(p1,p2,p3)*ccw(p1,p2,p4)<=0&&\n        ccw(p3,p4,p1)*ccw(p3,p4,p2)<=0);\n}\n\nbool intersect(Segment s1,Segment s2){\n    return intersect(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n\ndouble getDistance(Segment s1,Segment s2){\n    if(intersect(s1,s2)) return 0;\n    return min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),\n        min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n}\n\nPoint getCrossPoint(Segment s1,Segment s2){\n    Vector base=s2.p2-s2.p1;\n    double d1=abs(cross(base,s1.p1-s2.p1));\n    double d2=abs(cross(base,s1.p2-s2.p1));\n    double t=d1/(d1+d2);\n    return s1.p1+(s1.p2-s1.p1)*t;\n}\n\nint main(){\n    int q;\n    cin>>q;\n    int a,b,c,d,e,f,g,h;\n    Point p1,p2,p3,p4;\n    for(int i=0;i<q;i++){\n        cin>>a>>b>>c>>d>>e>>f>>g>>h;\n        p1=Point(a,b);\n        p2=Point(c,d);\n        p3=Point(e,f);\n        p4=Point(g,h);\n        Segment s1(p1,p2),s2(p3,p4);\n        printf(\"%.10lf\\n\",getDistance(s1,s2));\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n#define EPS 1e-10\n#define equals(a,b) (fabs( (a) - (b) )< EPS )\ntypedef struct point{\n\tdouble x,y;\n\tpoint(){};\n\tpoint(double x ,double y):x(x),y(y){};\n\tpoint operator + (point &p){ return point(x+p.x,y+p.y);\t}\n\tpoint operator - (point &p){ return point(x-p.x,y-p.y);\t}\n\tpoint operator * (point &p){ return point(x*p.x-y*p.y,x*p.y+y*p.x) ;}\n\tpoint operator * (double a){ return point(x*a,y*a);\t}\n\tpoint operator / (double a){ return point(x/a,y/a);\t}\n\t\n\tdouble abs() { return sqrt(norm()); }\n\tdouble norm() { return x*x+y*y; }\n\t\n\tbool operator < (const point &p) const { return x!=p.x ? x<p.x : y<p.y; }\n\tbool operator == (const point &p) const { return fabs(x-p.x)<EPS && fabs(y-p.y)<EPS; }\n}point;\ndouble abs(point a){return a.abs();}\ndouble norm(point a){return a.norm();}\n\ntypedef complex<double> C;\ntypedef struct { point s,e;} line;\n\nC convert(point a){ return C(a.x,a.y); }\npoint convert( C a){ return point(a.real(),a.imag() );}\ndouble dot(point a,point b){ return a.x*b.x+a.y*b.y ; } //内積　a・b\ndouble cross(point a,point b){ return a.x*b.y - a.y*b.x ; }//外積(z成分)　a×b\npoint vec(line l){return l.e-l.s;}\nline make(point s,point e){\n\tline res; res.s=s; res.e=e;\n\treturn res;\n}\npoint make(){ \n\tdouble x,y; cin>>x>>y;\n       \treturn point(x,y);\n}\n//直交\nbool isorthogonal(point a,point b){ return equals(dot(a,b), 0.0); }\nbool isorthogonal(line l1,line l2){ return isorthogonal(vec(l1),vec(l2)); }\n//平行\nbool isparallel(point a,point b){ return equals(cross(a,b),0.0); }\nbool isparallel(line l1,line l2){ return isparallel(vec(l1),vec(l2)); }\n//射影\npoint project(line s,point p){\n\tpoint base = vec(s);\n\tdouble r=dot(p-s.s,base)/base.norm();\n\tbase = base*r;\n\treturn s.s+base;\n}\n//反射\npoint reflect(line l,point p){\n\tpoint tmp=project(l,p)-p;\n\ttmp= tmp*2.0;\n\treturn p+tmp;\n\n}\n//交差判定\n\nint ccw(point p0,point p1,point p2){\n\tpoint a = p1-p0;\n\tpoint b = p2-p0;\nif(cross(a,b)>EPS) return 1;//counter_clockwise\nif(cross(a,b)<-EPS) return -1;//clockwise\nif(dot(a,b)<-EPS)return 2;//online_back\nif(a.norm()<b.norm() ) return -2;//online_front\nreturn 0;//on_segment\n}\n// line p1-p2 line p3-p4\nbool intersect(point p1,point p2,point p3,point p4){\n\treturn (ccw(p1,p2,p3)*ccw(p1,p2,p4)<=0 && ccw(p3,p4,p1)*ccw(p3,p4,p2) ); \n}\n// line l1,l2\nbool intersect(line l1,line l2){ return intersect(l1.s,l1.e,l2.s,l2.e); }\n\n\n//距離\n//point-point\ndouble distance(point a,point b){ return abs(a-b); }\n//point-line(直線）\ndouble distance2(line l,point p){\n\treturn abs(cross(vec(l),p-l.s)/abs(l.e-l.s));\n}\n//point-line(線分)\ndouble distance(line l,point p){\n\tif( dot(vec(l),p-l.s) <0.0 ) return abs(p-l.s);\n\tif( dot(l.s-l.e,p-l.e) <0.0 ) return abs(p-l.e);\n\treturn distance2(l,p);\n}\n//line-line\ndouble distance(line l1,line l2){\n\tif(intersect(l1,l2)) return 0.0;\n\treturn min(min(distance(l1,l2.s),distance(l1,l2.e) ), min(distance(l2,l1.s),distance(l2,l1.e) ) );\n}\n\n//交点\npoint crosspoint(line l1,line l2){\n\tpoint base = vec(l2);\n\tdouble d1 = abs(cross(base,l1.s-l2.s) );\n\tdouble d2 = abs(cross(base,l1.e-l2.s) );\n\tdouble t = d1/(d1+d2);\n\tpoint tmp = vec(l1)*t;\n\treturn l1.s+tmp;\n}\n\nint main(){\nint q;\ncin>>q;\nfor(int i=0;i<q;i++){\n\tpoint p0=make(),p1=make(),p2=make(),p3=make();\n\tline l0 = make(p0,p1) ,l1 = make(p2,p3);\n\tprintf(\"%0.10lf\\n\",distance(l0,l1) );\n}\n\nreturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\nconst double eps = 1e-10;\nstruct Node\n{\n    double x, y;\n    Node(double xx = 0, double yy = 0){\n        x = xx; y = yy;\n    }\n\n    Node operator + (Node b){\n        return Node(x+b.x, y+b.y);\n    }\n    Node operator - (Node b){\n        return Node(x-b.x, y-b.y);\n    }\n    Node operator * (double a){\n        return Node(a*x, a*y);\n    }\n    Node operator / (double a){\n        return Node(x/a, y/a);\n    }\n\n    double norm(){return x*x+y*y;}\n    double len(){\n        return sqrt(norm());\n    }\n\n    bool operator < (const Node &p) const{\n        return x!=p.x ? x<p.x : y<p.y;\n    }\n\n    bool operator == (const Node &p) const {\n        return fabs(x-p.x)<eps && fabs(y-p.y)<eps;\n    }\n};\n\nbool equals(double a, double b) {\n    return fabs(a)-fabs(b) < eps;\n}\n\ntypedef Node vtr;\n\nstruct line{\n    Node a, b;\n    line(Node x, Node y){\n        a = x, b = y;\n    }\n};\n\n//向量点积\ndouble dot(vtr a, vtr b){\n    return a.x*b.x+a.y*b.y;\n}\n\n//向量叉积\ndouble cross(vtr a, vtr b){\n    return a.x*b.y-a.y*b.x;\n}\n\n//两点之间距离\ndouble getDistance_Node(Node a, Node b){\n    return (a-b).len();\n}\n\n//直线与点的距离\ndouble getDistance_LP(line l, Node p){\n    return abs(cross(l.b-l.a, p-l.a)/(l.b-l.a).len());\n}\n\n//线段与点的距离\ndouble getDistance_SP(line s, Node p)\n{\n    if(dot(s.b-s.a, p-s.a)<0.0) return (p-s.a).len();\n    if(dot(s.a-s.b, p-s.b)<0.0) return (p-s.b).len();\n    return getDistance_LP(s, p);\n}\n\n//判断向量a,b是否正交(垂直)\nbool isOrthogonal(vtr a, vtr b){\n    return equals(dot(a, b), 0.0);\n}\n\nbool isOrthogonal(Node a1, Node a2, Node b1, Node b2){\n    return isOrthogonal(a1-a2, b1-b2);\n}\n\nbool isOrthogonal(line s1, line s2){\n    return equals(dot(s1.b-s1.a, s2.b-s2.a), 0.0);\n}\n\n//判断向量a,b是否平行\nbool isParallel(vtr a, vtr b){\n    return equals(cross(a, b), 0.0);\n}\n\nbool isParallel(Node a1, Node a2, Node b1, Node b2){\n    return isParallel(a1-a2, b1-b2);\n}\n\nbool isParallel(line s1, line s2){\n    return equals(cross(s1.b-s1.a, s2.b-s2.a), 0.0);\n}\n\n//投影 求垂足坐标\n//点p在直线p1p2上的投影\nNode project(line s, Node p)\n{\n    vtr base = s.b-s.a;\n    //算出比例\n    double r = dot(p-s.a, base)/base.norm();\n    return s.a+base*r;\n}\n\n//映象 求p以直线s为对称轴的对称点\nNode reflect(line s, Node p){\n    return p+(project(s, p)-p)*2.0;\n}\n\nint ccw(Node p0, Node p1, Node p2)\n{\n    vtr a = p1-p0, b = p2-p0;\n    //b在a的逆时针方向\n    if(cross(a, b) > eps) return 1;\n    //顺时针方向\n    if(cross(a, b) < -eps) return -1;\n    //共线但反向\n    if(dot(a, b) < -eps) return 2;\n    //共线同向\n    //b更长一点\n    if(a.norm() < b.norm()) return -2;\n    //a更长一点\n    return 0;\n}\n\n//判断两线段是否相交\nbool intersect(Node p1, Node p2, Node p3, Node p4){\n    bool t1 = ccw(p1, p2, p3)*ccw(p1, p2, p4)<=0;\n    bool t2 = ccw(p3, p4, p1)*ccw(p3, p4, p2)<=0;\n    return t1&&t2;\n}\nbool intersect(line s1, line s2){\n    return intersect(s1.a, s1.b, s2.a, s2.b);\n}\n\n//求线段交点\nNode getCrossPoint(line s1, line s2)\n{\n    vtr base = s2.b-s2.a;\n    double d1 = abs(cross(base, s1.a-s2.a));\n    double d2 = abs(cross(base, s1.b-s2.a));\n    double t = d1/(d1+d2);\n    return s1.a+(s1.b-s1.a)*t;\n}\n\n//求线段距离\ndouble getDistance_SS(line s1, line s2)\n{\n    //相交距离为0\n    if(intersect(s1, s2)) return 0.0;\n    double t1 = getDistance_SP(s1, s2.a);\n    double t2 = getDistance_SP(s1, s2.b);\n    double t3 = getDistance_SP(s2, s1.a);\n    double t4 = getDistance_SP(s2, s1.b);\n    return min(min(min(t1, t2), t3), t4);\n}\n\n\nint main()\n{\n    Node p0, p1, p2, p3;\n    int q; cin >> q;\n    while(q--)\n    {\n        cin >> p0.x >> p0.y >> p1.x >> p1.y >> p2.x >> p2.y >> p3.x >> p3.y;\n        line s1 = line(p0, p1);\n        line s2 = line(p2, p3);\n        double ans = getDistance_SS(s1, s2);\n        printf(\"%.10f\\n\", ans);\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define INTMAX 2147483647LL\n#define PII pair<int,int>\n#define MK make_pair\n#define re register\n#define Eps (1e-10)\n#define Equal(a,b) (fabs((a)-(b))<Eps)\nusing namespace std;\ntypedef long long ll;\ntypedef double db;\nconst double Pi=acos(-1.0);\nconst int Inf=0x3f3f3f3f;\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\ninline int read(){\n\tre int x=0,f=1,ch=getchar();\n\twhile(!isdigit(ch))f=ch=='-'?-1:1,ch=getchar();\n\twhile(isdigit(ch))x=x*10+ch-48,ch=getchar();\n\treturn x*f;\n}\ninline ll readll(){\n\tre ll x=0,f=1,ch=getchar();\n\twhile(!isdigit(ch))f=ch=='-'?-1:1,ch=getchar();\n\twhile(isdigit(ch))x=x*10+ch-48,ch=getchar();\n\treturn x*f;\n}\n\nstruct Point{\n\tdb x,y;\n\tPoint(){}\n\tPoint(db xx,db yy):x(xx),y(yy){}\n\tinline Point operator +(const Point &p){return Point(x+p.x,y+p.y);}\n\tinline Point operator -(const Point &p){return Point(x-p.x,y-p.y);}\n\tinline Point operator *(const db &k){return Point(x*k,y*k);}\n\tinline Point operator /(const db &k){return Point(x/k,y/k);}\n\tinline db Norm(){return x*x+y*y;}\n\tinline db abs(){return sqrt(Norm());}\n\tinline bool operator <(const Point &p)const{return x!=p.x?x<p.x:y<p.y;}\n\tinline bool operator ==(const Point &p)const{return fabs(x-p.x)<Eps&&fabs(y-p.y)<Eps;}\n}; \n\ntypedef Point Vector;\ntypedef vector<Point> Poly;\n\nstruct Segment{\n\tPoint p1,p2;\n\tSegment(){}\n\tSegment(Point p1_,Point p2_):p1(p1_),p2(p2_){}\n};\ntypedef Segment Line;\nstruct Circle{\n\tPoint c;db r;\n\tCircle(Point cc,db rr):c(cc),r(rr){}\n};\n\ndouble norm(Vector a){return a.x*a.x+a.y*a.y;}\ndouble abs(Vector a){return sqrt(norm(a));}\ndouble dot(Vector a,Vector b){return a.x*b.x+a.y*b.y;}\ndouble cross(Vector a,Vector b){return a.x*b.y-a.y*b.x;}\n\ninline bool Is_Vertical(Vector a,Vector b){return Equal(dot(a,b),0.0);}\ninline bool Is_Vertical(Point a1,Point a2,Point b1,Point b2){return Is_Vertical(a1-a2,b1-b2);}\ninline bool Is_Vertical(Segment s1,Segment s2){return Equal(dot(s1.p2-s1.p1,s2.p2-s2.p1),0.0);}\n\ninline bool Is_Parallel(Vector a,Vector b){return Equal(cross(a,b),0.0);}\ninline bool Is_Parallel(Point a1,Point a2,Point b1,Point b2){return Is_Parallel(a1-a2,b1-b2);}\ninline bool Is_Parallel(Segment s1,Segment s2){return Equal(cross(s1.p2-s1.p1,s2.p2-s2.p1),0.0);}\n\nPoint Project(Segment s,Point p){\n\tVector bse=s.p2-s.p1;\n\tdouble res=dot(p-s.p1,bse)/norm(bse);\n\treturn s.p1+bse*res;\n}\nPoint Reflect(Segment s,Point p){return p+(Project(s,p)-p)*2.0;}\n\ninline int CCW(Point p0,Point p1,Point p2){\n\tVector a=p1-p0,b=p2-p0;\n\tif(cross(a,b)>Eps) return COUNTER_CLOCKWISE;\n\tif(cross(a,b)<-Eps)return CLOCKWISE;\n\tif(dot(a,b)<-Eps)  return ONLINE_BACK;\n\tif(a.Norm()<b.Norm()) return ONLINE_FRONT;\n\treturn ON_SEGMENT; \n}\n\ninline bool Is_Intersect(Point p1,Point p2,Point p3,Point p4){return (CCW(p1,p2,p3)*CCW(p1,p2,p4)<=0)&&(CCW(p3,p4,p1)*CCW(p3,p4,p2)<=0);} \ninline bool Is_Intersect(Segment s1,Segment s2){return Is_Intersect(s1.p1,s1.p2,s2.p1,s2.p2);}\n\ninline double Get_DistanceLP(Segment s,Point p){\n\treturn abs(cross(s.p2-s.p1,p-s.p1)/abs(s.p2-s.p1));\n}\ninline double Get_DistanceSP(Segment s,Point p){\n\tif(dot(s.p2-s.p1,p-s.p1)<0.0) return abs(p-s.p1);\n\tif(dot(s.p1-s.p2,p-s.p2)<0.0) return abs(p-s.p2);\n\treturn Get_DistanceLP(s,p);\n}\ninline double Get_Distance(Segment s1,Segment s2){\n\tif(Is_Intersect(s1,s2)) return 0.0;\n\treturn min(min(Get_DistanceSP(s1,s2.p1),Get_DistanceSP(s1,s2.p2)),min(Get_DistanceSP(s2,s1.p1),Get_DistanceSP(s2,s1.p2)));\n}\ninline double Get_Distance(Point p1,Point p2,Point p3,Point p4){return Get_Distance(Segment(p1,p2),Segment(p3,p4));}\ninline Point Get_Crosspoint(Segment s1,Segment s2){\n\tVector bse=s2.p2-s2.p1;\n\tdouble d1=abs(cross(bse,s1.p1-s2.p1));\n\tdouble d2=abs(cross(bse,s1.p2-s2.p1));\n\tdouble t=d1/(d1+d2);\n\treturn s1.p1+(s1.p2-s1.p1)*t; \n}\n\ninline Point Get_Crosspoint(Point p1,Point p2,Point p3,Point p4){return Get_Crosspoint(Segment(p1,p2),Segment(p3,p4)); }\nPoint p1,p2,p3,p4;\nint n;\n\nint main(){\n\tn=read();\n\twhile(n--){\n\t\tcin>>p1.x>>p1.y>>p2.x>>p2.y>>p3.x>>p3.y>>p4.x>>p4.y;\n\t\tprintf(\"%.8lf\\n\",Get_Distance(p1,p2,p3,p4));\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n#define pu push\n#define pb push_back\n#define mp make_pair\n#define eps 1e-9\n#define Vector Point\n#define INF 2000000000\n#define DOUBLE_INF 1e50\n#define sq(x) ((x)*(x))\n#define fi first\n#define sec second\n#define all(x) (x).begin(),(x).end()\n#define EQ(a,b) (abs((a)-(b))<eps)\n\n// Geometry Library\n// written by okuraofvegetable\n\ninline double add(double a,double b){\n\tif(abs(a+b)<eps*(abs(a)+abs(b)))return 0;\n\treturn a+b;\n}\n\nstruct Point{\n\tdouble x,y;\n\tPoint() {}\n\tPoint(double x,double y) : x(x),y(y){}\n\tPoint operator + (Point p){return Point(add(x,p.x),add(y,p.y));}\n\tPoint operator - (Point p){return Point(add(x,-p.x),add(y,-p.y));}\n\tPoint operator * (double d){return Point(x*d,y*d);}\n\tdouble dot(Point p){return add(x*p.x,y*p.y);}\n\tdouble det(Point p){return add(x*p.y,-y*p.x);}\n\tdouble norm(){return sqrt(x*x+y*y);}\n\tdouble norm2(){return x*x+y*y;}\n\tdouble dist(Point p){return ((*this)-p).norm();}\n\tdouble dist2(Point p){return sq(x-p.x)+sq(y-p.y);}\n\tPoint vert(){return Point(y,-x);}\n\tvoid dump(const char* msg=\"\"){printf(\"%s%.12f %.12f\\n\",msg,x,y);return;}\n\t\n\t// following functions for vector operation\n\n\t// signed area of triange (0,0) (x,y) (p.x,p.y)\n\tdouble area(Point p){\n\t\treturn (x*p.y-p.x*y)/2.0;\n\t}\n};\n// direction a -> b -> c\n// verified AOJ CGL_1_C\nint ccw(Point a,Point b,Point c){\n\tVector p = b-a;\n\tVector q = c-a;\n\tif(p.det(q)>0.0)return 1; // counter clockwise\n\tif(p.det(q)<0.0)return -1; // clockwise\n\tif(p.dot(q)<0.0)return 2; // c--a--b online_back\n\tif(p.norm()<q.norm())return 3; // a--b--c online_front \n\treturn 4;// a--c--b on_segment\n}\nstruct Line{\n\tPoint a,b;\n\tLine(){}\n\tLine(Point a,Point b):a(a),b(b){}\n\tbool on(Point q){\n\t\treturn (a-q).det(b-q)==0; \n\t}\n\t// folloing 2 functions verified AOJ CGL_2_A\n\tbool is_parallel(Line l){return (a-b).det(l.a-l.b)==0;}\n\tbool is_orthogonal(Line l){return (a-b).dot(l.a-l.b)==0;}\n\tPoint intersection(Line l){\n\t\t//assert(!is_parallel(l));\n\t\treturn a+(b-a)*((l.b-l.a).det(l.a-a)/(l.b-l.a).det(b-a));\n\t}\n\t// projection of p to this line\n\t// verified AOJ CGL_1_A\n\tPoint projection(Point p){\n\t\treturn (b-a)*((b-a).dot(p-a)/(b-a).norm2())+a;\n\t}\n\t// reflection point of p onto this line\n\t// verified AOJ CGL_1_B\n\tPoint refl(Point p){\n\t\tPoint proj = projection(p);\n\t\treturn p+((proj-p)*2.0);\n\t}\n};\nstruct Segment{\n\tPoint a,b;\n\tSegment(){}\n\tSegment(Point a,Point b):a(a),b(b){}\n\tLine line(){\n\t\treturn Line(a,b);\n\t}\n\tbool on(Point q){\n\t\treturn ((a-q).det(b-q)==0&&(a-q).dot(b-q)<=0); \n\t}\n\t// verified AOJ CGL_2_B\n\tbool is_intersect(Segment s){\n\t\tif(line().is_parallel(s.line())){\n\t\t\tif(on(s.a)||on(s.b))return true;\n\t\t\tif(s.on(a)||s.on(b))return true;\n\t\t\treturn false;\n\t\t}\n\t\tPoint p = line().intersection(s.line());\n\t\tif(on(p)&&s.on(p))return true;\n\t\telse return false;\n\t}\n\tbool is_intersect(Line l){\n\t\tif(line().is_parallel(l)){\n\t\t\tif(l.on(a)||l.on(b))return true;\n\t\t\telse return false;\n\t\t}\n\t\tPoint p = line().intersection(l);\n\t\tif(on(p))return true;\n\t\telse return false;\n\t}\n\tdouble distance(Point p){\n\t\tdouble res = DOUBLE_INF;\n\t\tPoint q = line().projection(p);\n\t\tif(on(q))res = min(res,p.dist(q));\n\t\tres = min(res,min(p.dist(a),p.dist(b)));\n\t\treturn res;\n\t}\n\tdouble distance(Segment s){\n\t\tif(is_intersect(s))return 0.0;\n\t\tdouble res = DOUBLE_INF;\n\t\tres = min(res,s.distance(a));\n\t\tres = min(res,s.distance(b));\n\t\tres = min(res,this->distance(s.a));\n\t\tres = min(res,this->distance(s.b));\n\t\treturn res;\n\t}\n};\n\ntypedef vector<Point> Polygon;\n\n// for input\nPoint input_point(){\n\tPoint p;\n\tcin >> p.x >> p.y;\n\treturn p;\n}\nSegment input_segment(){\n\tPoint a,b;\n\ta = input_point();\n\tb = input_point();\n\treturn Segment(a,b);\n}\nLine input_line(){\n\tPoint a,b;\n\ta = input_point();\n\tb = input_point();\n\treturn Line(a,b);\n}\n\nint main(){\n\tint q;\n\tcin >> q;\n\tfor(int i=0;i<q;i++){\n\t\tSegment a = input_segment();\n\t\tSegment b = input_segment();\n\t\tcout << setprecision(30) << a.distance(b) << endl;\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <utility>\n#include <vector>\n#include <complex>\n#include <cmath>\n\nusing namespace std;\n\nstatic const double EPS=1e-12;\nstatic const double INF=1e24;\n\nusing Point=complex<double>;\nusing Plane=vector<Point>;\n\nbool operator<(const Point &a, const Point &b) {\n    return real(a)!=real(b)? real(a)<real(b) : imag(a)<imag(b);\n}\n\ndouble cross_prod(const Point &a, const Point &b) {\n    return imag(conj(a)*b);\n}\n\ndouble dot_prod(const Point &a, const Point &b) {\n    return real(conj(a)*b);\n}\n\nenum {\n    ONLINE_FRONT=-2,\n    CLOCKWISE,\n    ON_SEGMENT,\n    COUNTER_CLOCKWISE,\n    ONLINE_BACK,\n};\n\nint ccwise(const Point &a, Point b, Point c) {\n    b -= a; c -= a;\n\n    if (cross_prod(b, c) > 0) {\n        return COUNTER_CLOCKWISE;\n    } else if (cross_prod(b, c) < 0) {\n        return CLOCKWISE;\n    } else if (dot_prod(b, c) < 0) {\n        return ONLINE_BACK;\n    } else if (norm(b) < norm(c)) {\n        return ONLINE_FRONT;\n    } else {\n        return ON_SEGMENT;\n    }\n}\n\ntemplate <class LineType>\nint ccwise(LineType l, const Point &c) {\n    return ccwise(l.first, l.second, c);\n}\n\nstruct Line: public pair<Point, Point> {\n    Line() {}\n    Line(const Point &a, const Point &b) {\n        first = a;\n        second = b;\n    }\n};\n\nstruct LineSeg: public pair<Point, Point> {\n    LineSeg() {}\n    LineSeg(const Point &a, const Point &b) {\n        first = a;\n        second = b;\n    }\n};\n\nbool intersects(const Line &lhs, const Line &rhs) {\n    if (abs(cross_prod(lhs.second-lhs.first, rhs.second-rhs.first)) > EPS)\n        return true;\n\n    return abs(cross_prod(lhs.second-lhs.first, rhs.first-lhs.first)) < EPS;\n}\n\nbool intersects(const Line &lhs, const Point &rhs) {\n    return abs(cross_prod(lhs.second-rhs, lhs.first-rhs)) < EPS;\n}\n\nbool intersects(const LineSeg &lhs, const Line &rhs) {\n    return (\n        cross_prod(rhs.second-rhs.first, lhs.first-rhs.first) *\n        cross_prod(rhs.second-rhs.first, lhs.second-rhs.first)\n    ) < EPS;\n}\n\nbool intersects(const LineSeg &lhs, const LineSeg &rhs) {\n    if (ccwise(lhs, rhs.first) * ccwise(lhs, rhs.second) > 0)\n        return false;\n\n    return ccwise(rhs, lhs.first) * ccwise(rhs, lhs.second) <= 0;\n}\n\nbool intersects(const LineSeg &lhs, const Point &rhs) {\n    return (\n        abs(lhs.first-rhs)+abs(lhs.second-rhs)-abs(lhs.second-lhs.first) < EPS\n    );\n}\n\ndouble get_distance(const LineSeg &l, const Point &p) {\n    if (dot_prod(l.second-l.first, p-l.first) < -EPS) {\n        return abs(p-l.first);\n    } else if (dot_prod(l.first-l.second, p-l.second) < -EPS) {\n        return abs(p-l.second);\n    }\n\n    return abs(cross_prod(l.second-l.first, p-l.first))/abs(l.second-l.first);\n}\n\ndouble get_distance(const LineSeg &l, const LineSeg &m) {\n    if (intersects(l, m))\n        return 0.0;\n\n    return min(\n        min(get_distance(l, m.first), get_distance(l, m.second)),\n        min(get_distance(m, l.first), get_distance(m, l.second))\n    );\n}\n\nint main() {\n    size_t q;\n    scanf(\"%zu\", &q);\n    for (size_t i=0; i<q; ++i) {\n        double x, y;\n        scanf(\"%lf %lf\", &x, &y);\n        Point p0(x, y);\n\n        scanf(\"%lf %lf\", &x, &y);\n        Point p1(x, y);\n\n        scanf(\"%lf %lf\", &x, &y);\n        Point p2(x, y);\n\n        scanf(\"%lf %lf\", &x, &y);\n        Point p3(x, y);\n\n        LineSeg l(p0, p1), m(p2, p3);\n        printf(\"%.9f\\n\", get_distance(l, m));\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<complex>\n#include<utility>\n#include<vector>\n#include<cmath>\n#include<cassert>\n\nusing namespace std;\n\ndouble eps=1e-9;\n\ntypedef complex<double> Point;\ntypedef complex<double> Vector;\n\ntemplate<class T> bool eq(T a,T b){\n\treturn abs(a-b)<eps;\n}\n\ntemplate<class T> int sgn(T r){\n\treturn eq(r,0.0)?0:(r>0?1:-1);\n}\n\nstruct Circle{\n\tPoint center;\n\tdouble r;\n\tCircle(Point c,double r):center(c),r(r){}\n\tCircle(){}\n};\n\nstruct Line{\n\tdouble a,b,c;//ax+by=c\n\tLine(){}\n\tLine(double a,double b,double c):a(a),b(b),c(c){}\n\tLine(Point p1,Point p2){//not verified\n\t\tif(eq(abs(p1-p2),0.0)){\n\t\t\tfprintf(stderr,\"called Line for same points\\n\");\n\t\t\tassert(0);\n\t\t}\n\t\tdouble x1=p1.real(),y1=p1.imag();\n\t\tdouble x2=p2.real(),y2=p2.imag();\n\t\ta=y2-y1;\n\t\tb=-(x2-x1);\n\t\tc=x1*y2-x2*y1;\n\t}\n};\n\nvoid print(Point p){\n\tif(isnan(p.real())||isnan(p.imag())){\n\t\tprintf(\"NaN Point\\n\");\n\t\treturn;\n\t}\n\tprintf(\"(%f,%f)\\n\",p.real(),p.imag());\n}\n\ndouble pointsDistance(Point p1,Point p2){/*abs(p1-p2)と書いてよい*/\n\tdouble dx=p1.real()-p2.real();\n\tdouble dy=p1.imag()-p2.imag();\n\treturn sqrt(dx*dx+dy*dy);\n}\n\ndouble linePointDistance(Line l,Point p){\n\tdouble a=l.a,b=l.b,c=l.c;\n\tdouble x=p.real(),y=p.imag();\n\tdouble num=abs(a*x+b*y-c);\n\tdouble den=sqrt(a*a+b*b);\n\treturn num/den;\n}\n\nVector basisVector(Vector v){\n\tif(eq(v.real(),0.0)&&eq(v.imag(),0.0)) return v;\n\treturn v/sqrt(norm(v));\n}\n\nPoint linePointProjection(Line l,Point p){\n\tdouble dx=l.a,dy=l.b;\n\tdouble a=l.a,b=l.b,c=l.c;\n\tdouble x=p.real(),y=p.imag();\n\tVector ba=basisVector(Vector(dx,dy));\n\tdouble num=a*x+b*y-c;\n\tdouble den=sqrt(a*a+b*b);\n\tVector v=ba*(-num/den);\n\treturn p+v;\n}\n\nvector<Point> circleLineIntersection(Circle c,Line l){\n\tvector<Point> res;\n\tPoint p=linePointProjection(l,c.center);\n\tdouble d=linePointDistance(l,c.center);\n\tint s=sgn(d-c.r);\n\tif(s==1){\n\t\treturn res;//empty\n\t}else if(s==0){\n\t\tres.push_back(p);\n\t\treturn res;\n\t}else{\n\t\tdouble r=c.r;\n\t\tdouble t=sqrt(r*r-d*d);\n\t\tVector e=basisVector(Vector(l.b,-l.a));\n\t\tres.push_back(p+t*e);\n\t\tres.push_back(p-t*e);\n\t\treturn res;\n\t}\n}\n\nvector<Point> circlesIntersection(Circle c1,Circle c2){/*一致するとき処理できない*/\n\tif(eq(c1.center.real(),c2.center.real())&&eq(c1.center.imag(),c2.center.imag())&&\n\t\teq(c1.r,c2.r)){\n\t\t\t\tPoint p=Point(NAN,NAN);\n\t\t\t\tvector<Point> v;\n\t\t\t\tv.push_back(p);\n\t\t\t\treturn v;\n\t}\n\tdouble d=pointsDistance(c1.center,c2.center);\n\tdouble r1=c1.r,r2=c2.r;\n\tdouble dif=max(r1,r2)-min(r1,r2);\n\tdouble sum=r1+r2;\n\tif(sgn(d-sum)==1||sgn(dif-d)==1){//d>sum||dif>d\n\t\tvector<Point> v;\n\t\treturn v;\n\t}\n\tdouble x1=c1.center.real(),y1=c1.center.imag();\n\tdouble x2=c2.center.real(),y2=c2.center.imag();\n\tLine l=Line(-x1*2+x2*2,-y1*2+y2*2,r1*r1-r2*r2-(x1*x1-x2*x2)-(y1*y1-y2*y2));\n\treturn circleLineIntersection(c1,l);\n}\n\ndouble det(double a,double b,double c,double d){\n\treturn a*d-b*c;\n}\n\nPoint linesIntersection(Line l1,Line l2){/*平行の時は常にNAN*/\n\tdouble a=l1.a,b=l1.b,c=l1.c;\n\tdouble d=l2.a,e=l2.b,f=l2.c;\n\tdouble den=det(a,b,d,e);\n\tdouble numx=det(c,b,f,e);\n\tdouble numy=det(a,c,d,f);\n\tif(eq(den,0.0)){\n\t\treturn Point(NAN,NAN);\n\t}\n\treturn Point(numx/den,numy/den);\n}\n\n//circlesIntersection verify AOJ1190 ICPC Domestic 2013 Balloon\n\ndouble crossProduct(Vector a,Vector b){\n\treturn (conj(a)*b).imag();\n}\n\ndouble dotProduct(Vector a,Vector b){\n\treturn (conj(a)*b).real();\n}\n\nint ccw(Point p1,Point p2,Point p3){\n\t/*p1,p2,p3はすべて異なると仮定\n\tそうでない場合の戻り値は不定\n\tではなく\n\tp1!=p2と仮定*/\n\tVector b=p2-p1;\n\t//Vector c=p3-p2;\n\tVector c=p3-p1;\n\tint s=sgn(crossProduct(b,c));\n\tif(s==1) return 1;//counterclockwise\n\tif(s==-1) return -1;//clockwise\n\tint t=sgn(dotProduct(b,c));\n\tif(t==-1) return 2;//3--1--2\n\tint u=sgn(norm(b)-norm(c));\n\tif(eq(norm(c),0.0)) return 0;//1==3\n\tif(u==-1) return -2;//1--2--3\n\treturn 0;//1--3--2 or 2==3\n}\n\nstruct Segment{\n\tPoint p1,p2;\n\tLine l;\n\tSegment(){}\n\tSegment(Point p1,Point p2):p1(p1),p2(p2){\n\t\tl=Line(p1,p2);\n\t}\n};\n\nint oneLineCCW(Point p1,Point p2,Point p3){\n\t/*p1!=p2かつp1,p2,p3は一直線上と仮定*/\n\t/*それ以外の時の戻り値は不定*/\n\tVector b=p2-p1,c=p3-p1;\n\tif(sgn(dotProduct(b,c))==-1) return 2;//p3--p1--p2\n\tif(eq(abs(p1-p3),0.0)) return 1;//p1==p3--p2\n\tint s=sgn(norm(b)-norm(c));\n\tif(s==1) return 0;//p1--p3--p2\n\tif(s==0) return -1;//p1--p3==p2\n\telse return -2;//p1--p2--p3\n}\n\ndouble pointSegmentDistance(Point p,Segment s){\n\tLine l=s.l;\n\tdouble d=linePointDistance(l,p);\n\tPoint pr=linePointProjection(l,p);\n\tint x=oneLineCCW(s.p1,s.p2,pr);\n\tif(x>=-1&&x<=1) return d;\n\tdouble a=abs(s.p1-p);\n\tdouble b=abs(s.p2-p);\n\treturn min(a,b);\n}\n\nbool segmentsIntersect(Segment s1,Segment s2){\n\tPoint p[2],q[2];\n\tp[0]=s1.p1,p[1]=s1.p2;\n\tq[0]=s2.p1,q[1]=s2.p2;\n\treturn ccw(p[0],p[1],q[0])*ccw(p[0],p[1],q[1])<=0&&\n\t\tccw(q[0],q[1],p[0])*ccw(q[0],q[1],p[1])<=0;\n}\n\ndouble segmentsDistance(Segment s1,Segment s2){\n\tbool flg=segmentsIntersect(s1,s2);\n\tif(flg) return 0;\n\tPoint p[2],q[2];\n\tp[0]=s1.p1,p[1]=s1.p2;\n\tq[0]=s2.p1,q[1]=s2.p2;\n\tdouble res=-1;\n\tfor(int k=0;k<2;k++){\n\t\tPoint r=linePointProjection(s2.l,p[k]);\n\t\tif(abs(oneLineCCW(q[0],q[1],r))<=1){\n\t\t\tdouble tmp=abs(r-p[k]);\n\t\t\tif(res<0||tmp<res) res=tmp;\n\t\t}\n\t\tr=linePointProjection(s1.l,q[k]);\n\t\tif(abs(oneLineCCW(p[0],p[1],r))<=1){\n\t\t\tdouble tmp=abs(r-q[k]);\n\t\t\tif(res<0||tmp<res) res=tmp;\n\t\t}\n\t}\n\tfor(int i=0;i<2;i++) for(int j=0;j<2;j++){\n\t\tdouble tmp=abs(p[i]-q[j]);\n\t\tif(res<0||tmp<res) res=tmp;\n\t}\n\treturn res;\n}\n\n//segmentsDistance verified aoj cgl_2 d Distance\n\nPoint inputPoint(){\n\tdouble x,y;\n\tscanf(\"%lf%lf\",&x,&y);\n\treturn Point(x,y);\n}\n\nint main(){\n\tint Q;\n\tscanf(\"%d\",&Q);\n\tfor(int datano=0;datano<Q;datano++){\n\t\tPoint p1,p2;\n\t\tPoint q1,q2;\n\t\tp1=inputPoint();\n\t\tp2=inputPoint();\n\t\tq1=inputPoint();\n\t\tq2=inputPoint();\n\t\tif(abs(p1-p2)<eps) break;\n\t\tSegment s1=Segment(p1,p2);\n\t\tSegment s2=Segment(q1,q2);\n\t\tdouble ans=segmentsDistance(s1,s2);\n\t\tprintf(\"%.9f\\n\",ans);\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <bitset>\n#include <complex>\n#include <deque>\n#include <exception>\n#include <fstream>\n#include <functional>\n#include <iomanip>\n#include <ios>\n#include <iosfwd>\n#include <iostream>\n#include <istream>\n#include <iterator>\n#include <limits>\n#include <list>\n#include <locale>\n#include <map>\n#include <memory>\n#include <new>\n#include <numeric>\n#include <ostream>\n#include <queue>\n#include <set>\n#include <sstream>\n#include <stack>\n#include <stdexcept>\n#include <streambuf>\n#include <string>\n#include <typeinfo>\n#include <utility>\n#include <valarray>\n#include <vector>\n#include <climits>\n#include <cstring>\n\n#define rep(i, m, n) for(int i=int(m);i<int(n);i++)\n#define all(c) begin(c),end(c)\n\ntemplate<typename T1, typename T2>\ninline void chmin(T1 &a, T2 b) { if (a > b) a = b; }\n\ntemplate<typename T1, typename T2>\ninline void chmax(T1 &a, T2 b) { if (a < b) a = b; }\n\ntypedef long long int ll;\nusing ll = long long int;\nusing ull = long long unsigned int;\nusing Int = long long int;\nusing namespace std;\n#define INF (1 << 30) - 1\n#define INFl (ll)5e15\n#define DEBUG 0\n#define dump(x)  cerr << #x << \" = \" << (x) << endl\n#define MOD 1000000007\n\n\n//edit\n\n\nnamespace Geometory {\n    const double EPS = 1e-10;\n\n    inline bool equals(double a, double b) {\n        return fabs(a - b) < EPS;\n    }\n\n    struct Point {\n        double x, y;\n\n        Point(double x = 0.0, double y = 0.0) : x(x), y(y) {}\n\n        Point operator+(const Point &p) {\n            return Point(x + p.x, y + p.y);\n        }\n\n        Point operator-(const Point &p) {\n            return Point(x - p.x, y - p.y);\n        }\n\n        Point operator*(const double k) {\n            return Point(x * k, y * k);\n        }\n\n        double norm() const {\n            return x * x + y * y;\n        }\n\n        double abs() const {\n            return sqrt(norm());\n        }\n\n        double dot(Point p) {\n            return x * p.x + y * p.y;\n        }\n\n        double cross(Point p) {\n            return x * p.y - y * p.x;\n        }\n\n        bool operator<(const Point &p) const {\n            return x != p.x ? x < p.x : y < p.y;\n        }\n\n        bool operator==(const Point &p) const {\n            return equals(x, p.x) && equals(y, p.y);\n//            return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n        }\n\n\n    };\n\n    using Vector = Point;\n\n    struct Segment {\n        Point p1, p2;\n\n        Segment(Point p1, Point p2) : p1(p1), p2(p2) {}\n\n        Segment(double x1, double y1, double x2, double y2) : p1(x1, y1), p2(x2, y2) {}\n    };\n\n    using Line = Segment;\n\n\n    double norm(Vector p) {\n        return p.x * p.x + p.y * p.y;\n    }\n\n    double abs(Vector a) {\n        return sqrt(norm(a));\n    }\n\n    double dot(Vector a, Vector b) {\n        return a.dot(b);\n    }\n\n    double cross(Vector a, Vector b) {\n        return a.cross(b);\n    }\n\n    //直行判定\n    bool is_orthogonal(Vector a, Vector b) {\n        return equals(dot(a, b), 0.0);\n    }\n\n    bool is_orthogonal(Point a1, Point a2, Point b1, Point b2) {\n        return is_orthogonal(a1 - a2, b1 - b2);\n    }\n\n    bool is_orthogonal(Segment s1, Segment s2) {\n        return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n    }\n\n    //平行判定\n    bool is_parallel(Vector a, Vector b) {\n        return equals(cross(a, b), 0.0);\n    }\n\n    bool is_parallel(Point a1, Point a2, Point b1, Point b2) {\n        return is_parallel(a1 - a2, b1 - b2);\n    }\n\n    bool is_parallel(Segment s1, Segment s2) {\n        return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n    }\n\n    //反時計回り\n    static const int CCW = 1; // Counter Clockwise\n    static const int CW = -1; // Clockwise\n    static const int OB = 2; // Online Back\n    static const int OF = -2; // Online Front\n    static const int OS = 0; // On Segment\n\n    // p0を中心としたとき、p2は{反時計回り、時計回り、p2->p0->p1で同一直線上、p0->p1->p2で直線上、p2がp0p1線分上} (後ろの3つの説明は雑)\n    int ccw(Point p0, Point p1, Point p2) {\n        Vector a = p1 - p0;\n        Vector b = p2 - p0;\n        if (cross(a, b) > EPS) return CCW;\n        if (cross(a, b) < -EPS) return CW;\n        if (dot(a, b) < -EPS) return OB;\n        if (a.norm() < b.norm()) return OF;\n\n        return OS;\n    }\n\n    //交差判定\n    bool is_intersect(Point p1, Point p2, Point p3, Point p4) {\n        return ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n               ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0;\n    }\n\n    //交差判定\n    bool is_intersect(Segment s1, Segment s2) {\n        return is_intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n    }\n\n    //射影を求める\n    //pからsに垂直に線を引いたときの座標を返す\n    Point project(Segment s, Point p) {\n        Vector base = s.p2 - s.p1;\n        double r = dot(p - s.p1, base) / norm(base);\n        return s.p1 + base * r;\n    }\n\n    // 反射\n    // pを線分sを対称軸として線対称の位置にある点を求める。\n    Point reflect(Segment s, Point p) {\n//        return p + (project(s, p) - p) * 2;\n        return project(s, p) * 2 - p;\n    }\n\n\n    //距離シリーズ\n    //2点間の距離\n    double get_distance(Point a, Point b) {\n        return abs(a - b);\n    }\n\n    // 直線lと点pの距離\n    double get_distanceLP(Line l, Point p) {\n        return abs(cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1));\n    }\n\n    // 線分sと点pの距離\n    double get_distanceSP(Segment s, Point p) {\n        if (dot(s.p2 - s.p1, p - s.p1) < 0.0) return abs(p - s.p1);\n        if (dot(s.p1 - s.p2, p - s.p2) < 0.0) return abs(p - s.p2);\n        return get_distanceLP(s, p);\n    }\n\n    //線分と線分の距離\n    double get_distance(Segment s1, Segment s2) {\n        if (is_intersect(s1, s2)) return 0.0;\n        return min({get_distanceSP(s1, s2.p1),\n                    get_distanceSP(s1, s2.p2),\n                    get_distanceSP(s2, s1.p1),\n                    get_distanceSP(s2, s1.p2),\n                   });\n    }\n\n\n    struct Circle {\n        Point c;\n        double r;\n\n        Circle(Point c = Point(), double r = 0.0) : c(c), r(r) {}\n    };\n\n    using Polygon = vector<Point>;\n\n    std::ostream &operator<<(std::ostream &os, const Point &p) {\n//        os << \"(\" << p.x << \", \" << p.y << \")\";\n        os << \"\" << p.x << \" \" << p.y << \"\";\n        return os;\n    }\n\n};\n\nusing namespace Geometory;\n\n\nclass Solve {\npublic:\n    void solve() {\n        Int q;\n        cin >> q;\n        while (q--) {\n            vector<Point> p(4);\n            for (int i = 0; i < 4; ++i) {\n                cin >> p[i].x >> p[i].y;\n            }\n            Segment s1(p[0], p[1]), s2(p[2], p[3]);\n            double dist = get_distance(s1, s2);\n            cout << dist << endl;\n        }\n\n\n    }\n\n};\n\n\nint main() {\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    cout << fixed << setprecision(10);\n\n    Solve().solve();\n\n\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<complex>\n#include<utility>\n#include<vector>\n#include<cmath>\n#include<cassert>\n\nusing namespace std;\n\ndouble eps=1e-9;\n\ntypedef complex<double> Point;\ntypedef complex<double> Vector;\n\ntemplate<class T> bool eq(T a,T b){\n\treturn abs(a-b)<eps;\n}\n\ntemplate<class T> int sgn(T r){\n\treturn eq(r,0.0)?0:(r>0?1:-1);\n}\n\nstruct Circle{\n\tPoint center;\n\tdouble r;\n\tCircle(Point c,double r):center(c),r(r){}\n\tCircle(){}\n};\n\nstruct Line{\n\tdouble a,b,c;//ax+by=c\n\tLine(){}\n\tLine(double a,double b,double c):a(a),b(b),c(c){}\n\tLine(Point p1,Point p2){//not verified\n\t\tif(eq(abs(p1-p2),0.0)){\n\t\t\tfprintf(stderr,\"called Line for same points\\n\");\n\t\t\tassert(0);\n\t\t}\n\t\tdouble x1=p1.real(),y1=p1.imag();\n\t\tdouble x2=p2.real(),y2=p2.imag();\n\t\ta=y2-y1;\n\t\tb=-(x2-x1);\n\t\tc=x1*y2-x2*y1;\n\t}\n};\n\nvoid print(Point p){\n\tif(isnan(p.real())||isnan(p.imag())){\n\t\tprintf(\"NaN Point\\n\");\n\t\treturn;\n\t}\n\tprintf(\"(%f,%f)\\n\",p.real(),p.imag());\n}\n\ndouble pointsDistance(Point p1,Point p2){/*abs(p1-p2)と書いてよい*/\n\tdouble dx=p1.real()-p2.real();\n\tdouble dy=p1.imag()-p2.imag();\n\treturn sqrt(dx*dx+dy*dy);\n}\n\ndouble linePointDistance(Line l,Point p){\n\tdouble a=l.a,b=l.b,c=l.c;\n\tdouble x=p.real(),y=p.imag();\n\tdouble num=abs(a*x+b*y-c);\n\tdouble den=sqrt(a*a+b*b);\n\treturn num/den;\n}\n\nVector basisVector(Vector v){\n\tif(eq(v.real(),0.0)&&eq(v.imag(),0.0)) return v;\n\treturn v/sqrt(norm(v));\n}\n\nPoint linePointProjection(Line l,Point p){\n\tdouble dx=l.a,dy=l.b;\n\tdouble a=l.a,b=l.b,c=l.c;\n\tdouble x=p.real(),y=p.imag();\n\tVector ba=basisVector(Vector(dx,dy));\n\tdouble num=a*x+b*y-c;\n\tdouble den=sqrt(a*a+b*b);\n\tVector v=ba*(-num/den);\n\treturn p+v;\n}\n\nvector<Point> circleLineIntersection(Circle c,Line l){\n\tvector<Point> res;\n\tPoint p=linePointProjection(l,c.center);\n\tdouble d=linePointDistance(l,c.center);\n\tint s=sgn(d-c.r);\n\tif(s==1){\n\t\treturn res;//empty\n\t}else if(s==0){\n\t\tres.push_back(p);\n\t\treturn res;\n\t}else{\n\t\tdouble r=c.r;\n\t\tdouble t=sqrt(r*r-d*d);\n\t\tVector e=basisVector(Vector(l.b,-l.a));\n\t\tres.push_back(p+t*e);\n\t\tres.push_back(p-t*e);\n\t\treturn res;\n\t}\n}\n\nvector<Point> circlesIntersection(Circle c1,Circle c2){/*一致するとき処理できない*/\n\tif(eq(c1.center.real(),c2.center.real())&&eq(c1.center.imag(),c2.center.imag())&&\n\t\teq(c1.r,c2.r)){\n\t\t\t\tPoint p=Point(NAN,NAN);\n\t\t\t\tvector<Point> v;\n\t\t\t\tv.push_back(p);\n\t\t\t\treturn v;\n\t}\n\tdouble d=pointsDistance(c1.center,c2.center);\n\tdouble r1=c1.r,r2=c2.r;\n\tdouble dif=max(r1,r2)-min(r1,r2);\n\tdouble sum=r1+r2;\n\tif(sgn(d-sum)==1||sgn(dif-d)==1){//d>sum||dif>d\n\t\tvector<Point> v;\n\t\treturn v;\n\t}\n\tdouble x1=c1.center.real(),y1=c1.center.imag();\n\tdouble x2=c2.center.real(),y2=c2.center.imag();\n\tLine l=Line(-x1*2+x2*2,-y1*2+y2*2,r1*r1-r2*r2-(x1*x1-x2*x2)-(y1*y1-y2*y2));\n\treturn circleLineIntersection(c1,l);\n}\n\ndouble det(double a,double b,double c,double d){\n\treturn a*d-b*c;\n}\n\nPoint linesIntersection(Line l1,Line l2){/*平行の時は常にNAN*/\n\tdouble a=l1.a,b=l1.b,c=l1.c;\n\tdouble d=l2.a,e=l2.b,f=l2.c;\n\tdouble den=det(a,b,d,e);\n\tdouble numx=det(c,b,f,e);\n\tdouble numy=det(a,c,d,f);\n\tif(eq(den,0.0)){\n\t\treturn Point(NAN,NAN);\n\t}\n\treturn Point(numx/den,numy/den);\n}\n\n//circlesIntersection verify AOJ1190 ICPC Domestic 2013 Balloon\n\ndouble crossProduct(Vector a,Vector b){\n\treturn (conj(a)*b).imag();\n}\n\ndouble dotProduct(Vector a,Vector b){\n\treturn (conj(a)*b).real();\n}\n\nint ccw(Point p1,Point p2,Point p3){\n\t/*p1,p2,p3はすべて異なると仮定\n\tそうでない場合の戻り値は不定\n\tではなく\n\tp1!=p2と仮定*/\n\tVector b=p2-p1;\n\tVector c=p3-p1;\n\tint s=sgn(crossProduct(b,c));\n\tif(s==1) return 1;//counterclockwise\n\tif(s==-1) return -1;//clockwise\n\tint t=sgn(dotProduct(b,c));\n\tif(t==-1) return 2;//3--1--2\n\tint u=sgn(norm(b)-norm(c));\n\tif(eq(norm(c),0.0)) return 0;//1==3\n\tif(u==-1) return -2;//1--2--3\n\treturn 0;//1--3--2 or 2==3\n}\n\nstruct Segment{\n\tPoint p1,p2;\n\tLine l;\n\tSegment(){}\n\tSegment(Point p1,Point p2):p1(p1),p2(p2){\n\t\tl=Line(p1,p2);\n\t}\n};\n\nint oneLineCCW(Point p1,Point p2,Point p3){\n\t/*p1!=p2かつp1,p2,p3は一直線上と仮定*/\n\t/*それ以外の時の戻り値は不定*/\n\tVector b=p2-p1,c=p3-p1;\n\tif(sgn(dotProduct(b,c))==-1) return 2;//p3--p1--p2\n\tif(eq(abs(p1-p3),0.0)) return 1;//p1==p3--p2\n\tint s=sgn(norm(b)-norm(c));\n\tif(s==1) return 0;//p1--p3--p2\n\tif(s==0) return -1;//p1--p3==p2\n\telse return -2;//p1--p2--p3\n}\n\ndouble pointSegmentDistance(Point p,Segment s){\n\tLine l=s.l;\n\tdouble d=linePointDistance(l,p);\n\tPoint pr=linePointProjection(l,p);\n//\tint x=oneLineCCW(s.p1,s.p2,pr);\n\tint x=ccw(s.p1,s.p2,pr);\n//\tif(x>=-1&&x<=1) return d;\n\tif(x==0) return d;\n\tdouble a=abs(s.p1-p);\n\tdouble b=abs(s.p2-p);\n\treturn min(a,b);\n}\n\nbool segmentsIntersect(Segment s1,Segment s2){\n\tPoint p[2],q[2];\n\tp[0]=s1.p1,p[1]=s1.p2;\n\tq[0]=s2.p1,q[1]=s2.p2;\n\treturn ccw(p[0],p[1],q[0])*ccw(p[0],p[1],q[1])<=0&&\n\t\tccw(q[0],q[1],p[0])*ccw(q[0],q[1],p[1])<=0;\n}\n\ndouble segmentsDistance(Segment s1,Segment s2){\n\tbool flg=segmentsIntersect(s1,s2);\n\tif(flg) return 0;\n\tPoint p[2],q[2];\n\tp[0]=s1.p1,p[1]=s1.p2;\n\tq[0]=s2.p1,q[1]=s2.p2;\n\tdouble res=-1;\n\tfor(int k=0;k<2;k++){\n\t\tPoint r=linePointProjection(s2.l,p[k]);\n\t//\tif(abs(oneLineCCW(q[0],q[1],r))<=1){\n\t\tif(ccw(q[0],q[1],r)==0){\n\t\t\tdouble tmp=abs(r-p[k]);\n\t\t\tif(res<0||tmp<res) res=tmp;\n\t\t}\n\t\tr=linePointProjection(s1.l,q[k]);\n\t//\tif(abs(oneLineCCW(p[0],p[1],r))<=1){\n\t\tif(ccw(p[0],p[1],r)==0){\n\t\t\tdouble tmp=abs(r-q[k]);\n\t\t\tif(res<0||tmp<res) res=tmp;\n\t\t}\n\t}\n\tfor(int i=0;i<2;i++) for(int j=0;j<2;j++){\n\t\tdouble tmp=abs(p[i]-q[j]);\n\t\tif(res<0||tmp<res) res=tmp;\n\t}\n\treturn res;\n}\n\nPoint inputPoint(){\n\tdouble x,y;\n\tscanf(\"%lf%lf\",&x,&y);\n\treturn Point(x,y);\n}\n\nint main(){\n\tint Q;\n\tscanf(\"%d\",&Q);\n\tfor(int datano=0;datano<Q;datano++){\n\t\tPoint p1,p2;\n\t\tPoint q1,q2;\n\t\tp1=inputPoint();\n\t\tp2=inputPoint();\n\t\tq1=inputPoint();\n\t\tq2=inputPoint();\n\t\tif(abs(p1-p2)<eps) break;\n\t\tSegment s1=Segment(p1,p2);\n\t\tSegment s2=Segment(q1,q2);\n\t\tdouble ans=segmentsDistance(s1,s2);\n\t\tprintf(\"%.9f\\n\",ans);\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstring>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <tuple>\n#include <queue>\n#include <set>\n#include <cstdio>\n#include <climits>\n#include <cmath>\n#include <array>\n#include <functional>\n#include <sstream>\n#include <list>\n#include <iomanip>\n#include <set>\nconst int MOD=1000000007;\nconst int INF=1000000000;\nusing namespace std;\ntypedef long long ll;\ntypedef vector<int> vi;\nconst double eps=1e-10;\nconst int inf=1e9;\ntypedef pair<int,int> P;\nstatic const int COUNTER_CLOCKWISE=1;\nstatic const int CLOCKWISE=-1;\nstatic const int ONLINE_BACK=2;\nstatic const int ONLINE_FRONT=-2;\nstatic const int ON_SEGMENT=0;\n\nclass Point\n{\npublic:\n  double x,y;\n  Point(double x,double y): x(x),y(y){}\n  Point operator + (const Point &p)\n  {\n    return Point(x+p.x,y+p.y);\n  }\n  Point operator - (const Point &p)\n  {\n    return Point(x-p.x,y-p.y);\n  }\n  Point operator * (double k)\n  {\n    return Point(x*k,y*k);\n  }\n  Point operator / (double k)\n  {\n    return Point(x/k,y/k);\n  }\n  bool operator < (const Point &p) const\n  {\n    return x!=p.x ? x<p.x : y<p.y;\n  }\n  bool operator == (const Point &p) const\n  {\n    return fabs(x-p.x)<eps && fabs(y-p.y) < eps;\n  }\n  double abs(){return sqrt(norm());}\n  double norm(){return x*x+y*y;}\n};\ntypedef Point Vector;\ndouble dot(Vector a,Vector b)\n{\n  return a.x*b.x+a.y*b.y;\n}\ndouble cross(Vector a,Vector b)\n{\n  return a.x*b.y - a.y*b.x;\n}\ndouble norm(Point a)\n{\n  return a.x*a.x + a.y*a.y;\n}\ndouble abs(Vector a)\n{\n  return sqrt(norm(a));\n}\nstruct Segment\n{\n  Point p1,p2;\n  Segment(Point p1,Point p2): p1(p1),p2(p2){}\n};\ntypedef Segment Line;\n\nclass Circle\n{\npublic:\n  Point c;\n  double r;\n  Circle(Point c,double r):  c(c),r(r){}\n};\n\ntypedef vector<Point> Polygon;\n\n\nbool isorthogonal(Vector a,Vector b)\n{\n  return fabs(dot(a,b)-0.0)<eps;\n}\n\nbool isparallel(Vector a,Vector b)\n{\n  return fabs(cross(a,b)-0.0)<eps;\n}\nPoint project(Segment s,Point p)\n{\n  Vector base=s.p2-s.p1;\n  double r=dot(p-s.p1,base) / norm(base);\n  return  s.p1 + base*r;\n}\nPoint reflect(Segment s,Point p)\n{\n  return p+ (project(s,p)-p)*2.0;\n}\ndouble getdistance(Point a,Point b)\n{\n  return abs(a-b);\n}\ndouble getdistanceLP(Line l,Point p)\n{\n  return abs(cross(l.p2-l.p1,p-l.p1) / abs(l.p2-l.p1));\n}\ndouble getdistanceSP(Segment s,Point p)\n{\n  if(dot(s.p2-s.p1,p-s.p1) <0.0) return abs(p-s.p1);\n  if(dot(s.p1-s.p2,p-s.p2) <0.0) return abs(p-s.p2);\n  return getdistanceLP(s,p);\n}\n\nint ccw(Point p0,Point p1,Point p2)\n{\n  Vector a=p1-p0;\n  Vector b=p2-p0;\n  if(cross(a,b)>eps) return COUNTER_CLOCKWISE;\n  if(cross(a,b)<-eps) return CLOCKWISE;\n  if(dot(a,b)<-eps) return ONLINE_BACK;\n  if(a.norm()<b.norm()) return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\nbool intersect(Point p1,Point p2,Point p3,Point p4)\n{\n  return (ccw(p1,p2,p3)*ccw(p1,p2,p4)<=0 && ccw(p3,p4,p1) * ccw(p3,p4,p2)<=0);\n}\nbool intersect(Segment s1,Segment s2)\n{\n  return intersect(s1.p1,s1.p2,s2.p1,s2.p2);\n}\nPoint getcrosspoint(Segment s1,Segment s2)\n{\n  Vector base =s2.p2-s2.p1;\n  double d1=abs(cross(base,s1.p1-s2.p1));\n  double d2=abs(cross(base,s1.p2-s2.p1));\n  double t=d1/(d1+d2);\n  return s1.p1+(s1.p2-s1.p1)*t;\n}\n\ndouble getdistanceSS(Segment s1,Segment s2)\n{\n  if(intersect(s1,s2)) return 0.0;\n  return min(min(getdistanceSP(s1,s2.p1),getdistanceSP(s1,s2.p2)),min(getdistanceSP(s2,s1.p1),getdistanceSP(s2,s1.p2)));\n}\nint main(int argc,char const* argv[])\n{\n  int q;\n  cin >> q;\n  for(int i=0;i<q;i++)\n    {\n      double p0x,p0y,p1x,p1y,p2x,p2y,p3x,p3y;\n      cin >> p0x >> p0y >> p1x >> p1y >> p2x >> p2y >> p3x >> p3y;\n      Point p0=Point(p0x,p0y);\n      Point p1=Point(p1x,p1y);\n      Point p2=Point(p2x,p2y);\n      Point p3=Point(p3x,p3y);\n      Segment s0=Segment(p0,p1);\n      Segment s1=Segment(p2,p3);\n      cout << fixed << setprecision(12) << getdistanceSS(s0,s1) << endl;\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nconst double eps = 1e-10;\nbool dcmp(double d, double d2 = 0) { return abs(d - d2) < eps; }\ndouble sgn(double d) {\n  if (dcmp(d))\n    return 0;\n  if (d > 0)\n    return 1;\n  return -1;\n}\n\nstruct vec {\n  double x, y;\n  vec(double x, double y) : x(x), y(y) {}\n  vec() : x(0), y(0) {}\n  const bool operator==(const vec &v) const {\n    return dcmp(x, v.x) && dcmp(y, v.y);\n  }\n  const bool operator!=(const vec &v) const { return !(*this == v); }\n  const vec operator+(const vec &v) const { return vec(x + v.x, y + v.y); }\n  const vec operator-() const { return vec(-x, -y); }\n  const vec operator-(const vec &v) const { return *this + (-v); }\n  const vec operator*(const double d) const { return vec(x * d, y * d); }\n  const vec operator/(const double d) const { return *this * (1 / d); }\n  const vec unit() const { return *this / len(); };\n  const double len() const { return sqrt(x * x + y * y); }\n  const double dot(const vec &v) const { return x * v.x + y * v.y; }\n  const double cross(const vec &v) const { return x * v.y - y * v.x; }\n  const bool parallel(const vec &v) const { return dcmp(cross(v)); }\n  const bool perpendicular(const vec &v) const { return dcmp(dot(v)); }\n};\n\ntypedef vec point;\n\ntemplate <class T> struct optional {\n  bool has;\n  T val;\n  optional() : has(false) {}\n  optional(T t) : has(true), val(t) {}\n};\n\nstruct line {\n  double a, b, c;\n  line(point p1, point p2) {\n    a = p1.y - p2.y;\n    b = p2.x - p1.x;\n    c = (p1.x - p2.x) * p1.y + (p2.y - p1.y) * p1.x;\n    double m1 = a * p1.x + b * p1.y + c;\n    double m2 = a * p2.x + b * p2.y + c;\n  }\n  bool parallel(line l) { return dcmp(a * l.b, b * l.a); }\n  optional<point> intersect(line l) {\n    if (parallel(l))\n      return optional<point>();\n    return point(-(c * l.b - b * l.c) / (a * l.b - b * l.a),\n                 (c * l.a - a * l.c) / (a * l.b - b * l.a));\n  }\n  bool contains(point p) { return dcmp(a * p.x + b * p.y + c); }\n  point project(point p) {\n    double t = -(a * p.x + b * p.y + c) / (a * a + b * b);\n    return point(p.x + a * t, p.y + b * t);\n  }\n};\n\nstruct segment {\n  point p1, p2;\n  segment(point p1, point p2) : p1(p1), p2(p2) {}\n  line sline() { return line(p1, p2); }\n  bool contains(point p) {\n    double x1 = min(p1.x, p2.x), x2 = max(p1.x, p2.x);\n    double y1 = min(p1.y, p2.y), y2 = max(p1.y, p2.y);\n    bool ok = sline().contains(p) && (x1 <= p.x && p.x <= x2) &&\n              (y1 <= p.y && p.y <= y2);\n    return ok;\n  }\n  bool intersect(segment s) {\n    vec v0 = p2 - p1;\n    vec v1 = s.p2 - s.p1;\n    if (v0.parallel(v1)) {\n      return (contains(s.p1) || contains(s.p2)) ||\n             (s.contains(p1) || s.contains(p2));\n    }\n    point a = p1, b = p2, c = s.p1, d = s.p2;\n    return sgn((a - b).cross(b - c)) != sgn((a - b).cross(b - d)) &&\n           sgn((c - d).cross(d - a)) != sgn((c - d).cross(d - b));\n  }\n  double distance(point p) {\n    point p0 = sline().project(p);\n    if (contains(p0)) {\n      return (p0 - p).len();\n    } else {\n      return min((p1 - p).len(), (p2 - p).len());\n    }\n  }\n};\n\nint main() {\n  int n;\n  cin >> n;\n  for (int i = 0; i < n; i++) {\n    point p0, p1, p2, p3;\n    cin >> p0.x >> p0.y >> p1.x >> p1.y >> p2.x >> p2.y >> p3.x >> p3.y;\n    segment l0(p0, p1);\n    segment l1(p2, p3);\n    double d = 1.0 / 0.0;\n    d = min(d, l0.distance(p2));\n    d = min(d, l0.distance(p3));\n    d = min(d, l1.distance(p0));\n    d = min(d, l1.distance(p1));\n    printf(\"%.9lf\\n\", d);\n  }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<complex>\n#include<utility>\n#include<vector>\n#include<cmath>\n#include<cassert>\n\nusing namespace std;\n\ndouble eps=1e-8;\n\ntypedef complex<double> Point;\ntypedef complex<double> Vector;\n\ntemplate<class T> bool eq(T a,T b){\n\treturn abs(a-b)<eps;\n}\n\ntemplate<class T> int sgn(T r){\n\treturn eq(r,0.0)?0:(r>0?1:-1);\n}\n\nstruct Circle{\n\tPoint center;\n\tdouble r;\n\tCircle(Point c,double r):center(c),r(r){}\n\tCircle(){}\n};\n\nstruct Line{\n\tdouble a,b,c;//ax+by=c\n\tLine(){}\n\tLine(double a,double b,double c):a(a),b(b),c(c){}\n\tLine(Point p1,Point p2){//not verified\n\t\tif(eq(abs(p1-p2),0.0)){\n\t\t\tfprintf(stderr,\"called Line for same points\\n\");\n\t\t\tassert(0);\n\t\t}\n\t\tdouble x1=p1.real(),y1=p1.imag();\n\t\tdouble x2=p2.real(),y2=p2.imag();\n\t\ta=y2-y1;\n\t\tb=-(x2-x1);\n\t\tc=x1*y2-x2*y1;\n\t}\n};\n\nvoid print(Point p){\n\tif(isnan(p.real())||isnan(p.imag())){\n\t\tprintf(\"NaN Point\\n\");\n\t\treturn;\n\t}\n\tprintf(\"(%f,%f)\\n\",p.real(),p.imag());\n}\n\ndouble pointsDistance(Point p1,Point p2){/*abs(p1-p2)と書いてよい*/\n\tdouble dx=p1.real()-p2.real();\n\tdouble dy=p1.imag()-p2.imag();\n\treturn sqrt(dx*dx+dy*dy);\n}\n\ndouble linePointDistance(Line l,Point p){\n\tdouble a=l.a,b=l.b,c=l.c;\n\tdouble x=p.real(),y=p.imag();\n\tdouble num=abs(a*x+b*y-c);\n\tdouble den=sqrt(a*a+b*b);\n\treturn num/den;\n}\n\nVector basisVector(Vector v){\n\tif(eq(v.real(),0.0)&&eq(v.imag(),0.0)) return v;\n\treturn v/sqrt(norm(v));\n}\n\nPoint linePointProjection(Line l,Point p){\n\tdouble dx=l.a,dy=l.b;\n\tdouble a=l.a,b=l.b,c=l.c;\n\tdouble x=p.real(),y=p.imag();\n\tVector ba=basisVector(Vector(dx,dy));\n\tdouble num=a*x+b*y-c;\n\tdouble den=sqrt(a*a+b*b);\n\tVector v=ba*(-num/den);\n\treturn p+v;\n}\n\nvector<Point> circleLineIntersection(Circle c,Line l){\n\tvector<Point> res;\n\tPoint p=linePointProjection(l,c.center);\n\tdouble d=linePointDistance(l,c.center);\n\tint s=sgn(d-c.r);\n\tif(s==1){\n\t\treturn res;//empty\n\t}else if(s==0){\n\t\tres.push_back(p);\n\t\treturn res;\n\t}else{\n\t\tdouble r=c.r;\n\t\tdouble t=sqrt(r*r-d*d);\n\t\tVector e=basisVector(Vector(l.b,-l.a));\n\t\tres.push_back(p+t*e);\n\t\tres.push_back(p-t*e);\n\t\treturn res;\n\t}\n}\n\nvector<Point> circlesIntersection(Circle c1,Circle c2){/*一致するとき処理できない*/\n\tif(eq(c1.center.real(),c2.center.real())&&eq(c1.center.imag(),c2.center.imag())&&\n\t\teq(c1.r,c2.r)){\n\t\t\t\tPoint p=Point(NAN,NAN);\n\t\t\t\tvector<Point> v;\n\t\t\t\tv.push_back(p);\n\t\t\t\treturn v;\n\t}\n\tdouble d=pointsDistance(c1.center,c2.center);\n\tdouble r1=c1.r,r2=c2.r;\n\tdouble dif=max(r1,r2)-min(r1,r2);\n\tdouble sum=r1+r2;\n\tif(sgn(d-sum)==1||sgn(dif-d)==1){//d>sum||dif>d\n\t\tvector<Point> v;\n\t\treturn v;\n\t}\n\tdouble x1=c1.center.real(),y1=c1.center.imag();\n\tdouble x2=c2.center.real(),y2=c2.center.imag();\n\tLine l=Line(-x1*2+x2*2,-y1*2+y2*2,r1*r1-r2*r2-(x1*x1-x2*x2)-(y1*y1-y2*y2));\n\treturn circleLineIntersection(c1,l);\n}\n\ndouble det(double a,double b,double c,double d){\n\treturn a*d-b*c;\n}\n\nPoint linesIntersection(Line l1,Line l2){/*平行の時は常にNAN*/\n\tdouble a=l1.a,b=l1.b,c=l1.c;\n\tdouble d=l2.a,e=l2.b,f=l2.c;\n\tdouble den=det(a,b,d,e);\n\tdouble numx=det(c,b,f,e);\n\tdouble numy=det(a,c,d,f);\n\tif(eq(den,0.0)){\n\t\treturn Point(NAN,NAN);\n\t}\n\treturn Point(numx/den,numy/den);\n}\n\n//circlesIntersection verify AOJ1190 ICPC Domestic 2013 Balloon\n\ndouble crossProduct(Vector a,Vector b){\n\treturn (conj(a)*b).imag();\n}\n\ndouble dotProduct(Vector a,Vector b){\n\treturn (conj(a)*b).real();\n}\n\nint ccw(Point p1,Point p2,Point p3){\n\t/*p1,p2,p3はすべて異なると仮定\n\tそうでない場合の戻り値は不定\n\tではなく\n\tp1!=p2と仮定*/\n\tVector b=p2-p1;\n\tVector c=p3-p1;\n\tint s=sgn(crossProduct(b,c));\n\tif(s==1) return 1;//counterclockwise\n\tif(s==-1) return -1;//clockwise\n\tint t=sgn(dotProduct(b,c));\n\tif(t==-1) return 2;//3--1--2\n\tint u=sgn(norm(b)-norm(c));\n\tif(eq(norm(c),0.0)) return 0;//1==3\n\tif(u==-1) return -2;//1--2--3\n\treturn 0;//1--3--2 or 2==3\n}\n\nstruct Segment{\n\tPoint p1,p2;\n\tLine l;\n\tSegment(){}\n\tSegment(Point p1,Point p2):p1(p1),p2(p2){\n\t\tl=Line(p1,p2);\n\t}\n};\n\nint oneLineCCW(Point p1,Point p2,Point p3){\n\t/*p1!=p2かつp1,p2,p3は一直線上と仮定*/\n\t/*それ以外の時の戻り値は不定*/\n\tVector b=p2-p1,c=p3-p1;\n\tif(!eq(crossProduct(b,c),0.0)) for(;;);\n\tif(sgn(dotProduct(b,c))==-1) return 2;//p3--p1--p2\n\tif(eq(abs(p1-p3),0.0)) return 1;//p1==p3--p2\n\tint s=sgn(norm(b)-norm(c));\n\tif(s==1) return 0;//p1--p3--p2\n\tif(s==0) return -1;//p1--p3==p2\n\telse return -2;//p1--p2--p3\n}\n\ndouble pointSegmentDistance(Point p,Segment s){\n\tLine l=s.l;\n\tdouble d=linePointDistance(l,p);\n\tPoint pr=linePointProjection(l,p);\n//\tint x=oneLineCCW(s.p1,s.p2,pr);\n\tint x=ccw(s.p1,s.p2,pr);\n//\tif(x>=-1&&x<=1) return d;\n\tif(x==0) return d;\n\tdouble a=abs(s.p1-p);\n\tdouble b=abs(s.p2-p);\n\treturn min(a,b);\n}\n\nbool segmentsIntersect(Segment s1,Segment s2){\n\tPoint p[2],q[2];\n\tp[0]=s1.p1,p[1]=s1.p2;\n\tq[0]=s2.p1,q[1]=s2.p2;\n\treturn ccw(p[0],p[1],q[0])*ccw(p[0],p[1],q[1])<=0&&\n\t\tccw(q[0],q[1],p[0])*ccw(q[0],q[1],p[1])<=0;\n}\n\ndouble segmentsDistance(Segment s1,Segment s2){\n\tbool flg=segmentsIntersect(s1,s2);\n\tif(flg) return 0;\n\tPoint p[2],q[2];\n\tp[0]=s1.p1,p[1]=s1.p2;\n\tq[0]=s2.p1,q[1]=s2.p2;\n\tdouble res=-1;\n\tfor(int k=0;k<2;k++){\n\t\tPoint r=linePointProjection(s2.l,p[k]);\n\t\tbool flg1=(abs(oneLineCCW(q[0],q[1],r))<=1);\n\t\tbool flg2=ccw(q[0],q[1],r)==0;\n\t\tif(flg1!=flg2) assert(0);\n\t//\tif(abs(oneLineCCW(q[0],q[1],r))<=1){\n\t\tif(ccw(q[0],q[1],r)==0){\n\t\t\tdouble tmp=abs(r-p[k]);\n\t\t\tif(res<0||tmp<res) res=tmp;\n\t\t}\n\t\tr=linePointProjection(s1.l,q[k]);\n\t\tflg1=abs(oneLineCCW(p[0],p[1],r)<=1);\n\t\tflg2=ccw(p[0],p[1],r);\n\t\tif(flg1!=flg2) assert(0);\n\t//\tif(abs(oneLineCCW(p[0],p[1],r))<=1){\n\t\tif(ccw(p[0],p[1],r)==0){\n\t\t\tdouble tmp=abs(r-q[k]);\n\t\t\tif(res<0||tmp<res) res=tmp;\n\t\t}\n\t}\n\tfor(int i=0;i<2;i++) for(int j=0;j<2;j++){\n\t\tdouble tmp=abs(p[i]-q[j]);\n\t\tif(res<0||tmp<res) res=tmp;\n\t}\n\treturn res;\n}\n\n\n//segmentsDistance verified aoj cgl_2 d Distance\nPoint inputPoint(){\n\tdouble x,y;\n\tscanf(\"%lf%lf\",&x,&y);\n\treturn Point(x,y);\n}\n\nint main(){\n\tint Q;\n\tscanf(\"%d\",&Q);\n\tfor(int datano=0;datano<Q;datano++){\n\t\tPoint p1,p2;\n\t\tPoint q1,q2;\n\t\tp1=inputPoint();\n\t\tp2=inputPoint();\n\t\tq1=inputPoint();\n\t\tq2=inputPoint();\n\t\tif(abs(p1-p2)<eps) break;\n\t\tSegment s1=Segment(p1,p2);\n\t\tSegment s2=Segment(q1,q2);\n\t\tdouble ans=segmentsDistance(s1,s2);\n\t\tprintf(\"%.9f\\n\",ans);\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include  <bits/stdc++.h>\n#define rep(i,n) for(int (i)=0;(i)<(n);(i)++)\nusing namespace std;\n\ntypedef bool B;\ntypedef long double D;\ntypedef complex<D> P;\ntypedef vector<P> VP;\ntypedef struct {P s,t;} L;\ntypedef vector<L> VL;\ntypedef struct {P c;D r;} C;\ntypedef vector <C> VC;\n\nconst D eps=1.0e-10;\nconst D pi=acos(-1.0);\ntemplate<class T> bool operator==(T a, T b){return abs(a-b)< eps;}\ntemplate<class T> bool operator< (T a, T b){return a < b-eps;}\ntemplate<class T> bool operator<=(T a, T b){return a < b+eps;}\ntemplate<class T> int sig(T r) {return (r==0||r==-0) ? 0 : r > 0 ? 1 : -1;}\n#define X real()\n#define Y imag()\n\nD ip(P a, P b) {return a.X * b.X + a.Y * b.Y;}\nD ep(P a, P b) {return a.X * b.Y - a.Y * b.X;}\nD sq(D a) {return sqrt(max(a, (D)0));}\nP vec(L l){return l.t-l.s;}\ninline void input(P &p){D x,y;cin >> x >> y;p={x,y};}\n// ???????????¬????????¨???\n\n// ccw\nenum CCW{\n\tLEFT = 1,\n\tRIGHT = 2,\n\tBACK = 4,\n\tFRONT = 8,\n\tMID = 16,\n\tON=FRONT|BACK|MID\n};\n\ninline int ccw(P base, P a, P b) {              //???a??¨???b???????????????????????????\n\ta -= base; b -= base;\n\tif (ep(a, b) > 0)\n\t\treturn LEFT;    // counter clockwise\n\tif (ep(a, b) < 0)\n\t\treturn RIGHT;   // clockwise\n\tif (ip(a, b) < 0)\n\t\treturn BACK;    // b--base--a on line\n\tif (norm(a) < norm(b))\n\t\treturn FRONT;   // base--a--b on line\n\t// otherwise\n\treturn MID;      // base--b--a on line  a??¨b????????????????????????\n}\n\nB iver(L a, L b) {return ip(vec(a),vec(b) )== 0.0;}\nB ipar(L a, L b) {return ep(vec(a),vec(b) )== 0.0;}\n\n\n// ??????\nP pLL(L a,L b){ return a.s+vec(a)*ep(vec(b),b.s-a.s)/ep(vec(b),vec(a));}\n\n\n// ?????¨??´?????¨????????¢??£???????????????\n\nB iLL(L a,L b){return !ipar(a,b);}\nB eqL(L a,L b){return !iLL(a, b) && ep(vec(a), b.s - a.s)==0;}\nB iLS(L a,L b){return sig(ep(vec(a),b.s-a.s))*sig(ep(vec(a),b.t-a.s)) <= 0;}\nB iLSs(L a,L b){return sig(ep(vec(a),b.s-a.s))*sig(ep(vec(a),b.t-a.s)) < 0;}\nB iSS(L a,L b){\n\tint cwa = ccw(a.s,a.t, b.s) | ccw(a.s,a.t, b.t);\n\tint cwb = ccw(b.s,b.t, a.s) | ccw(b.s,b.t, a.t);\n\treturn ((cwa | cwb) & MID) || ((cwa & cwb) == (LEFT | RIGHT));\n}\nB iSSs(L a,L b) {\n\tint cwa = ccw(a.s,a.t, b.s) | ccw(a.s,a.t, b.t);\n\tint cwb = ccw(b.s,b.t, a.s) | ccw(b.s,b.t, a.t);\n\treturn (cwa & cwb) == (LEFT | RIGHT);\n}\n\n// ?????¨??´?????¨????????¢??£????????¢\n\nD dLP(L l,P p){return abs( ep(vec(l),p-l.s) )/abs(vec(l));}\nD dSP(L s,P p){\n\tif (sig( ip( vec(s), p - s.s)) <= 0) return abs(p - s.s);\n\tif (sig( ip(-vec(s), p - s.t)) <= 0) return abs(p - s.t);\n\treturn dLP(s,p);\n}\nD dLL(L a,L b){ return iLL(a,b)?0:dLP(a,b.s);}\nD dLS(L a,L b){ return iLS(a,b)?0:min(dLP(a, b.s),dLP(a, b.t));}\nD dSS(L a,L b){ return iSS(a,b)?0:\n\tmin({ dSP(a,b.s),dSP(a,b.t),dSP(b,a.s),dSP(b,a.t)});}\n\n\nint main(void){\n\tint q;\n\tcin >> q;\n\tcout.precision(10);\n\trep(loop,q){\n\t\tL line[2];\n\t\trep(i,2){\n\t\t\tinput(line[i].s);\n\t\t\tinput(line[i].t);\n\t\t}\n\t\tD ans=dSS(line[0],line[1]);\n\t\tcout << ans << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define fi first\n#define se second\n#define repl(i,a,b) for(int i=(int)(a);i<(int)(b);i++)\n#define rep(i,n) repl(i,0,n)\n#define each(itr,v) for(auto itr:v)\n#define pb(s) push_back(s)\n#define mp(a,b) make_pair(a,b)\n#define all(x) (x).begin(),(x).end()\n#define dbg(x) cout<<#x\"=\"<<x<<endl\n#define maxch(x,y) x=max(x,y)\n#define minch(x,y) x=min(x,y)\n#define uni(x) x.erase(unique(all(x)),x.end())\n#define exist(x,y) (find(all(x),y)!=x.end())\n#define bcnt(x) bitset<32>(x).count()\n\n#define x(p) real(p)\n#define y(p) imag(p)\n\nconst double eps=1e-8;\nconst double inf=1e12;\ntypedef complex<double> P;\n\nnamespace std{\n  bool operator<(const P& a,const P& b){\n    return x(a)==x(b)?y(a)<y(b):x(a)<x(b);\n  }\n}\ndouble cross(const P& a,const P& b){\n  return y(conj(a)*b);\n}\ndouble dot(const P& a,const P& b){\n  return x(conj(a)*b);\n}\nstruct L : public vector<P> { // line and segment\n  L(const P& a,const P &b){\n    push_back(a);\n    push_back(b);\n  }\n};\n\nP projection(const L& l,const P& p){\n  P b=l[1]-l[0],c=p-l[0];\n  return l[0]+b*x(c/b);\n}\nP reflection(const L& l,const P& p){\n  return p+2.0*(projection(l,p)-p);\n}\n//// counter-clockwise\nint ccw(P a,P b,P c) {\n  b=b-a;c=c-a;\n  if(cross(b,c)>0) return +1;       // counter clockwise\n  if(cross(b,c)<0) return -1;       // clockwise\n  if(dot(b,c)<0)   return +2;       // c--a--b on line\n  if(norm(b)<norm(c)) return -2;       // a--b--c on line\n  return 0;\n}\n\nbool intersectLL(const L& l,const L& m){\n  return abs(cross(l[1]-l[0],m[1]-m[0]))>eps;\n}\nbool intersectSS(const L& s,const L& t){\n  return ccw(s[0],s[1],t[0])*ccw(s[0],s[1],t[1])<=0&&ccw(t[0],t[1],s[0])*ccw(t[0],t[1],s[1])<=0;\n}\nP crosspoint(const L& l,const L& m) {\n  double A=cross(l[1]-l[0],m[1]-m[0]);\n  double B=cross(l[1]-l[0],l[1]-m[0]);\n  if (abs(A)<eps&&abs(B)<eps) return m[0]; // same line\n  if (abs(A)<eps) assert(false); // !!!PRECONDITION NOT SATISFIED!!!\n  return m[0]+B/A*(m[1]-m[0]);\n}\nbool intersectSP(const L& s,const P& p){\n  return abs(s[0]-p)+abs(s[1]-p)-abs(s[1]-s[0])<eps;\n}\ndouble distanceSP(const L& s,const P& p) {\n  const P r=projection(s,p);\n  return intersectSP(s,r)?abs(r-p):min(abs(s[0]-p),abs(s[1]-p));\n}\ndouble distanceSS(const L& s,const L& t) {\n  return intersectSS(s,t)?0:min(min(distanceSP(s,t[0]),distanceSP(s,t[1])),\n                                min(distanceSP(t,s[0]),distanceSP(t,s[1])));\n}\n\nint main(){\n\tcin.sync_with_stdio(false);\n  int q;\n  cin>>q;\n  while(q--){\n    P p[4];\n    rep(i,4){\n      double x,y;\n      cin>>x>>y;\n      p[i]=P(x,y);\n    }\n    printf(\"%.10f\\n\", distanceSS(L(p[0],p[1]),L(p[2],p[3])));\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cmath>\n#include<iomanip>\n#include<algorithm>\nusing namespace std;\nstruct Point { long double px, py; };\nstruct Segment { Point p1, p2; };\nPoint Minus(Point a, Point b) { Point G; G.px = a.px - b.px; G.py = a.py - b.py; return G; }\nlong double Abs(Point a) { return sqrt(a.px*a.px + a.py*a.py); }\nlong double norm(Point a) { return a.px*a.px + a.py*a.py; }\nlong double dot(const Point& a, const Point& b) { return a.px * b.px + a.py * b.py; }\nlong double crs(const Point& a, const Point& b) { return a.px * b.py - a.py * b.px; }\nint ccw(Point p0, Point p1, Point p2) {\n\tPoint a = Minus(p1, p0), b = Minus(p2, p0);\n\tif (crs(a, b) > 1e-10) return 1;\n\tif (crs(a, b) < -1e-10) return -1;\n\tif (dot(a, b) < -1e-10) return 2;\n\tif (norm(a) < norm(b)) return -2;\n\treturn 0;\n}\nbool its(Point p1, Point p2, Point p3, Point p4) {\n\treturn (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 && ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\nbool its(Segment s1, Segment s2) {\n\treturn its(s1.p1, s1.p2, s2.p1, s2.p2);\n}\nlong double dst(const Segment& a, const Point& b) {\n\tif (dot(Minus(a.p2, a.p1), Minus(b, a.p1)) < 0.0) return Abs(Minus(b, a.p1));\n\tif (dot(Minus(a.p1, a.p2), Minus(b, a.p2)) < 0.0) return Abs(Minus(b, a.p2));\n\treturn abs(crs(Minus(a.p2, a.p1), Minus(b, a.p1)) / Abs(Minus(a.p2, a.p1)));\n}\nint main() {\n\tPoint P1, P2, P3, P4; Segment M1, M2;\n\tint T; cin >> T;\n\tfor (int i = 0; i < T; i++) {\n\t\tcin >> P1.px >> P1.py >> P2.px >> P2.py;\n\t\tcin >> P3.px >> P3.py >> P4.px >> P4.py;\n\t\tM1.p1 = P1; M1.p2 = P2; M2.p1 = P3; M2.p2 = P4;\n\t\tlong double res = min(dst(M1, P3), dst(M1, P4));\n\t\tres = min(res, min(dst(M2, P1), dst(M2, P2)));\n\t\tif (its(M1, M2) == true) { res = 0.0; }\n\t\tcout << fixed << setprecision(1919) << res << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n//#include <iomanip>\n#include <cstdio>\n#include <algorithm>\n#include <cstdlib>\n#define EPS (1e-10)\nusing namespace std;\nstatic const int COUNTER_CLOCKWISE=1;\nstatic const int CLOCKWISE=-1;\nstatic const int ONLINE_BACK=2;\nstatic const int ONLINE_FRONT=-2;\nstatic const int ON_SEGMENT=0;\nclass Point{\npublic:\n    double x,y;\n    Point(double x=0, double y=0):x(x),y(y){}\n    Point operator +(const Point &p){\n        return Point(x+p.x,y+p.y);\n    }\n    Point operator -(const Point &p){\n        return Point(x-p.x,y-p.y);\n    }\n    Point operator *(double k){\n        return Point(k*x,k*y);\n    }\n    Point operator /(double k){\n        return Point(x/k,y/k);\n    }\n\n    double norm(){\n        return x*x+y*y;\n    }\n    double abs(){\n        return sqrt(norm());\n    }\n};\n\n\n\nclass segment{\npublic:\n    Point p1,p2;\n};\ntypedef Point Vector;\ndouble dot(const Vector &v1,const Vector &v2){\n    return v1.x*v2.x+v1.y*v2.y;\n}\ndouble cross(const Vector &v1,const Vector &v2){\n    return v1.x*v2.y-v1.y*v2.x;\n}\nbool isParallel(const Vector &v1,const Vector &v2){\n    if(fabs(cross(v1,v2)-0.0)<EPS)return true;\n    return false;\n}\nbool isOrthogonal(const Vector &v1,const Vector &v2){\n    if(fabs(dot(v1,v2)-0.0)<EPS)return true;\n    return false;\n}\nPoint projection( Point &p, Point &p1, Point &p2){\n    Vector a=p-p1;\n    Vector b=p2-p1;\n    double r=dot(a,b);\n    double pro_abs=r/b.norm();\n    Vector res=b*pro_abs;\n    return Point(res.x+p1.x,res.y+p1.y);\n}\nPoint reflection(Point &p, Point &p1, Point &p2){\n    Point pro=projection(p,p1,p2);\n    Vector v=pro-p;\n    v=v*2;\n    return Point(v.x+p.x,v.y+p.y);\n}\nint ccw(Point &p, Point &p1, Point &p2){\n    Vector a=p-p1;\n    Vector b=p2-p1;\n    if(cross(a,b)>0)return COUNTER_CLOCKWISE;\n    if(cross(a,b)<0)return CLOCKWISE;\n    if(dot(a,b)<0)return ONLINE_BACK;\n    if(a.norm()>b.norm())return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\nbool intersect(segment &s1,segment &s2){\n    if(ccw(s1.p1,s2.p1,s2.p2)*ccw(s1.p2,s2.p1,s2.p2)<=0 && ccw(s2.p1,s1.p1,s1.p2)*ccw(s2.p2,s1.p1,s1.p2)<=0)\n        return true;\n    return false;\n}\ndouble getDistanceSP(Point &p,segment &s){\n    if(dot(p-s.p1,s.p2-s.p1)<0)return (p-s.p1).abs();\n    if(dot(p-s.p2,s.p1-s.p2)<0)return (p-s.p2).abs();\n    return fabs(cross(p-s.p1,s.p2-s.p1)/(s.p2-s.p1).abs());\n}\ndouble Distance(segment &s1,segment &s2){\n    if(intersect(s1,s2))return 0;\n    double min1=min(getDistanceSP(s1.p1,s2),getDistanceSP(s1.p2,s2));\n    double min2=min(getDistanceSP(s2.p1,s1),getDistanceSP(s2.p2,s1));\n    return min(min1,min2);\n}\nint main()\n{\n    int q,p0x,p0y,p1x,p1y,p2x,p2y,p3x,p3y;\n    segment s1;\n    segment s2;\n    cin>>q;\n    while(q>0){\n        cin>>p0x>>p0y>>p1x>>p1y>>p2x>>p2y>>p3x>>p3y;\n        s1.p1=Point(p0x,p0y);\n        s1.p2=Point(p1x,p1y);\n        s2.p1=Point(p2x,p2y);\n        s2.p2=Point(p3x,p3y);\n        printf(\"%.8f\\n\",Distance(s1,s2));\n        q--;\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#define loop(i, s, e) for(ll i = s;i < e;i++)\n\n#include <iostream>\n#include <iomanip>\n#include <set>\n#include <vector>\n#include <queue>\n#include <stack>\n#include <utility>\n#include <algorithm>\n#include <map>\n#include <cmath>\n\nusing namespace std;\n\ntypedef long long signed ll;\n\ntemplate<typename T>\nclass Vector2D {\npublic:\n    T x;\n    T y;\n\n    Vector2D() {\n        x = y = 0;\n    }\n\n    Vector2D(T x_, T y_) {\n        x = x_;\n        y = y_;\n    }\n\n    T operator*(const Vector2D<T> *e) {\n        return this->x * e->x + this->y * e->y;\n    }\n\n    Vector2D<T> operator-(const Vector2D<T> *e) {\n        return Vector2D<T>(this->x - e->x, this->y - e->y);\n    }\n\n    Vector2D<T> operator+(const Vector2D<T> *e) {\n        return Vector2D<T>(this->x + e->x, this->y + e->y);\n    }\n\n    T operator*(const Vector2D<T> e) {\n        return this->x * e.x + this->y * e.y;\n    }\n\n    Vector2D<T> operator-(const Vector2D<T> e) {\n        return Vector2D<T>(this->x - e.x, this->y - e.y);\n    }\n\n    Vector2D<T> operator+(const Vector2D<T> e) {\n        return Vector2D<T>(this->x + e.x, this->y + e.y);\n    }\n\n    Vector2D<T> operator*(const T r) {\n        return Vector2D<T>(this->x * r, this->y * r);\n    }\n\n    Vector2D<T> operator/(const T r) {\n        return Vector2D<T>(this->x / r, this->y / r);\n    }\n\n    double abs() {\n        return sqrt(x * x + y * y);\n    }\n\n    T abs2() {\n        return x * x + y * y;\n    }\n\n    T cross(Vector2D<T> e) {\n        if(x * e.y >= y * e.x) return x * e.y - y * e.x;\n        else y * e.x - x * e.y;\n    }\n\n    double cos(Vector2D<T> e) {\n        return (e * (*this)) / (e.abs() * abs());\n    }\n\n    double sin(Vector2D<T> e) {\n        return cross(e) / (e.abs() * abs());\n    }\n};\n\ntypedef Vector2D<double> vdd;\n\ndouble dist(double x0, double y0, double x1, double y1, double xx, double yy) {\n    int b = 0;\n    vdd p[3] = {vdd(x0, y0), vdd(x1, y1), vdd(xx, yy)};\n    if (((p[0] - p[1]) * (p[2] - p[1])) / ((p[0] - p[1]).abs() * (p[2] - p[1]).abs()) < 0) b = -1;\n    if (((p[1] - p[0]) * (p[2] - p[0])) / ((p[1] - p[0]).abs() * (p[2] - p[0]).abs()) < 0) b = 1;\n    if (b == -1) return (p[2] - p[0]).abs();\n    if (b == 1) return (p[2] - p[1]).abs();\n    return abs((p[1] - p[0]).cross(p[2] - p[0])) / (p[1] - p[0]).abs();\n}\n\n\nint main() {\n    int q;\n    cin >> q;\n    loop(i, 0, q) {\n        int x[4], y[4];\n        vdd v[4];\n        loop(j, 0, 4) {\n            cin >> x[j] >> y[j];\n            v[j] = vdd(x[j], y[j]);\n        }\n        if ((v[0] - v[1]).sin(v[2]) * (v[0] - v[1]).sin(v[3]) < 0) cout << 0 << endl;\n        else\n            cout << setprecision(16)\n                 << min(min(dist(x[0], y[0], x[1], y[1], x[2], y[2]), dist(x[0], y[0], x[1], y[1], x[3], y[3])),\n                        min(dist(x[2], y[2], x[3], y[3], x[0], y[0]), dist(x[2], y[2], x[3], y[3], x[1], y[1])))\n                 << endl;\n    }\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\nstruct CWW{\n    CWW(){\n        cin.tie(0);\n        ios_base::sync_with_stdio(0);\n        cout<<fixed<<setprecision(15);\n    }\n}STAR;\n\nusing D=double;\n\nconst D EPS=1e-8;\nconst D INF=1e9;\n\nconst int COUNTER_CLOCKWISE=1;\nconst int CLOCKWISE=-1;\nconst int ONLINE_FRONT=2;\nconst int ONLINE_BACK=-2;\nconst int ON_SEGMENT=0;\n\nusing Point=complex<D>;\n\nstruct Segment{\n    Point p1,p2;\n    Segment(const Point &p1=Point(),const Point &p2=Point()):p1(p1),p2(p2){}\n};\n\nstruct Line{\n    Point p1,p2;\n    Line(const Point &p1=Point(),const Point &p2=Point()):p1(p1),p2(p2){}\n};\n\nstruct Circle{\n    Point c;\n    D r;\n    Circle(const Point &c=Point(),const D &r=0.0):c(c),r(r){}\n};\n\nusing Polygon=vector<Point>;\n\n#define EQ(a,b) (abs((a)-(b))<EPS)\n\nistream& operator>>(istream &is,Point &a){\n    D x,y;\n    is>>x>>y;\n    a=Point(x,y);\n    return is;\n}\n\nostream& operator<<(ostream& os,const Point &a){\n    os<<real(a)<<\" \"<<imag(a);\n    return os;\n}\n\nistream& operator>>(istream &is,Line &l){\n    Point p1,p2;\n    is>>p1>>p2;\n    l=Line(p1,p2);\n    return is;\n}\n\nistream& operator>>(istream &is,Segment &s){\n    Point p1,p2;\n    is>>p1>>p2;\n    s=Segment(p1,p2);\n    return is;\n}\n\nD dot(const Point &a,const Point &b){\n    return real(a)*real(b)+imag(a)*imag(b);\n}\n\nD cross(const Point &a,const Point &b){\n    return real(a)*imag(b)-imag(a)*real(b);\n}\n\nPoint projection(const Point &a,const Point &b){\n    return a*real(b/a);\n}\n\nPoint projection(const Line &l,const Point &a){\n    return l.p1+projection(l.p2-l.p1,a-l.p1);\n}\n\nPoint reflection(const Line &l,const Point &a){\n    Point p=projection(l,a);\n    return 2.0*p-a;\n}\n\nint ccw(Point a,Point b,Point c){\n    b-=a;c-=a;\n    if(cross(b,c)>EPS)return COUNTER_CLOCKWISE;\n    if(cross(b,c)<-EPS)return CLOCKWISE;\n    if(dot(b,c)<-EPS)return ONLINE_BACK;\n    if(norm(b)+EPS<norm(c))return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\nbool isOrthogonal(const Point &a,const Point &b){\n    return EQ(dot(a,b),0.0);\n}\n\nbool isOrthogonal(const Point &a1,const Point &a2,const Point &b1,const Point &b2){\n    return isOrthogonal(a2-a1,b2-b1);\n}\n\nbool isOrthogonal(const Line &l,const Line &m){\n    return isOrthogonal(l.p1,l.p2,m.p1,m.p2);\n}\n\nbool isParallel(const Point &a,const Point &b){\n    return EQ(cross(a,b),0.0);\n}\n\nbool isParallel(const Point &a1,const Point &a2,const Point &b1,const Point &b2){\n    return isParallel(a1-a2,b1-b2);\n}\n\nbool isParallel(const Line &l,const Line &m){\n    return isParallel(l.p1,l.p2,m.p1,m.p2);\n}\n\nbool intersect(const Point &a1,const Point &a2,const Point &b1,const Point &b2){\n    return ccw(a1,a2,b1)*ccw(a1,a2,b2)<=0&&\n            ccw(b1,b2,a1)*ccw(b1,b2,a2)<=0;\n}\n\nbool intersect(Segment &s,Segment &t){\n    return intersect(s.p1,s.p2,t.p1,t.p2);\n}\n\nPoint crossPoint(const Segment &s1,const Segment &s2){\n    Point  base=s2.p2-s2.p1;\n    D d1=abs(cross(base,s1.p1-s2.p1));\n    D d2=abs(cross(base,s1.p2-s2.p1));\n\n    D t=d1/(d1+d2);\n    return s1.p1+(s1.p2-s1.p1)*t;\n}\n\nD distance(const Point &p1,const Point &p2){\n    return abs(p1-p2);\n}\n\nD distance(const Line &l,const Point &p){\n    return distance(projection(l,p),p);\n}\n\nD distance(const Line &l,const Line &m){\n    if(isParallel(l,m))return distance(l,m.p1);\n    return 0.0;\n}\n\nD distance(const Segment &s,const Point &p){\n    if(dot(s.p2-s.p1,p-s.p1)<0.0)return abs(p-s.p1);\n    if(dot(s.p1-s.p2,p-s.p2)<0.0)return abs(p-s.p2);\n    return distance(Line(s.p1,s.p2),p);\n\n}\n\nD distance(Segment &s1,Segment &s2){\n    if(intersect(s1,s2))return 0.0;\n    return min(min(distance(s1,s2.p1),distance(s1,s2.p2)),\n               min(distance(s2,s1.p1),distance(s2,s1.p2)));\n}\n\n\n\nint main(){\n    int Q;cin>>Q;\n    while(Q--){\n        Segment s,t;\n        cin>>s>>t;\n        cout<<distance(s,t)<<endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#include<cstring>\n#include<algorithm>\n#include<vector>\n#include<map>\n#include<assert.h>\n#include<set>\n#include<cmath>\n#include<queue>\n#include<cstdlib>\n#include<iostream>\n#include<bitset>\n#define pii pair<int,int>\n#define fi first\n#define se second\n#define pb push_back\n#define rep(i,j,k) for(int i=(int)(j);i<=(int)(k);i++)\n#define per(i,j,k) for(int i=(int)(j);i>=(int)(k);i--)\nusing namespace std;\ntypedef long long LL;\n//template\ntypedef double db;\nconst db eps=1e-10;\nconst db pi=acosl(-1.0);\nint sign(db x){if(x<-eps)return -1;if(x>eps)return 1;return 0;}\nint cmp(db x,db y){return sign(x-y);}\nbool inmid(db x,db l,db r){return cmp(x,l)*cmp(x,r)<=0;}\nstruct po{\n\tdb x,y;\n\tpo(db _x=0,db _y=0):x(_x),y(_y){}\n\tvoid read(){scanf(\"%lf%lf\",&x,&y);}\n};\npo operator +(const po &a,const po &b){return po(a.x+b.x,a.y+b.y);}\npo operator -(const po &a,const po &b){return po(a.x-b.x,a.y-b.y);}\npo operator *(const po &a,const db &b){return po(a.x*b,a.y*b);}\npo operator /(const po &a,const db &b){return po(a.x/b,a.y/b);}\ndb operator *(const po &a,const po &b){return a.x*b.x+a.y*b.y;}\ndb operator ^(const po &a,const po &b){return a.x*b.y-a.y*b.x;}\ndb mo2(po a){return a*a;}\ndb mo(po a){return sqrt(a*a);}\npo proj(po x,po y){//proj x to y\n\treturn y*((x*y)/mo2(y));\n}\npo refl(po x,po y){//refl x from y\n\treturn proj(x,y)*2-x;\n}\nbool onseg(po x,po l,po r){\n\treturn (sign((x-l)^(r-l))==0)&&inmid(x.x,l.x,r.x)&&inmid(x.y,l.y,r.y);\n}\nbool inter(db l1,db r1,db l2,db r2){\n\tif(cmp(l1,r1)==1)swap(l1,r1);\n\tif(cmp(l2,r2)==1)swap(l2,r2);\n\treturn cmp(min(r1,r2),max(l1,l2))>=0;\n}\nbool checkss(po a,po b,po c,po d){\n\treturn sign((b-a)^(c-a))*sign((b-a)^(d-a))<=0&&sign((d-c)^(a-c))*sign((d-c)^(b-c))<=0&&inter(a.x,b.x,c.x,d.x)&&inter(a.y,b.y,c.y,d.y);\n}\npo getll(po a,po b,po c,po d){\n\tdb u=((b-a)^(c-a));\n\tdb v=((d-a)^(b-a));\n\treturn (c*v+d*u)/(u+v);\n}\ndb dispp(po x,po y){return sqrt((x-y)*(x-y));}\ndb disps(po x,po l,po r){\n\tpo y=proj(x-l,r-l)+l;\n\tif(onseg(y,l,r))return dispp(x,y);\n\telse return min(dispp(x,l),dispp(x,r));\n}\ndb disss(po x,po y,po l,po r){\n\tif(checkss(x,y,l,r))return 0;\n\treturn min(min(disps(x,l,r),disps(y,l,r)),min(disps(l,x,y),disps(r,x,y)));\n}\n//template\nint main(){\n\tint t;scanf(\"%d\",&t);\n\twhile(t--){\n\t\tpo a,b,c,d;\n\t\ta.read();b.read();c.read();d.read();\n\t\tprintf(\"%.10lf\\n\",disss(a,b,c,d));\n\t}\n\treturn 0;\n}\n\n\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ntemplate<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return true; } return false; }\ntemplate<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return true; } return false; }\nusing ll = long long;\nusing P = pair<ll, ll>;\nconst long double PI = acos(-1.0L);\nll GCD(ll a, ll b) { return b?GCD(b, a%b):a; }\nll LCM(ll a, ll b) { return a/GCD(a, b)*b; }\n\nusing CP = complex<long double>;\n\nconst long double EPS = 1e-10;     // 許容する誤差ε\n#define EQ(a, b) (abs((a)-(b)) < EPS)   // 2つのスカラーが等しいかどうか\n#define EQV(a, b) (EQ((a).real(), (b).real()) && EQ((a).imag(), (b).imag()))    // 2つのベクトルが等しいかどうか\n\n// double length = abs(a);     // ベクトルaの絶対値\n// double distance = abs(a-b);     // 2点a,b間の距離\n// CP b = a/abs(a);    // ベクトルaの単位ベクトル\n// CP n1 = a*CP(0,+1); CP n2 = a*CP(0,-1);  // ベクトルaの法線ベクトル\n// CP un1 = (a*CP(0,+1)/abs(a)); CP un2 = (a*CP(0,-1)/abs(a));  // ベクトルaの単位法線ベクトル\n\n// 内積(dot product) : a・b = |a||b|cosΘ\nlong double dot(CP a, CP b) {\n    return (a.real()*b.real() + a.imag()*b.imag());\n}\n\n// 外積(cross product) : a×b = |a||b|sinΘ\nlong double cross(CP a, CP b) {\n    return (a.real()*b.imag() - a.imag()*b.real());\n}\n\n// 2直線の直交判定 : a⊥b ⇔ dot(a,b) = 0\nint is_orthogonal(CP a1, CP a2, CP b1, CP b2) {\n    return EQ(dot(a1-a2, b1-b2), 0.0);\n}\n\n// 2直線の平行判定 : a//b ⇔ cross(a,b) = 0\nint is_parallel(CP a1, CP a2, CP b1, CP b2) {\n    return EQ(cross(a1-a2, b1-b2), 0.0);\n}\n\n// 点cが直線a,b上にあるかないか\nint is_point_on_line(CP a, CP b, CP c) {\n    return EQ(cross(b-a, c-a), 0.0);\n}\n\n// 点cが線分a,b上にあるかないか\nint is_point_on_lines(CP a, CP b, CP c) {\n    // |a-c|+|c-b| <= |a-b|なら線分上\n    return (abs(a-c)+abs(c-b) < abs(a-b)+EPS);\n}\n\n// a1,a2を端点とする線分とb1,b2を端点とする線分の交差判定\nint is_intersected_lines(CP a1, CP a2, CP b1, CP b2) {\n    if(is_parallel(a1, a2, b1, b2)) {\n        // 平行なので線分の重なり判定\n        return is_point_on_lines(a1, a2, b1) || is_point_on_lines(a1, a2, b2) ||\n               is_point_on_lines(b1, b2, a1) || is_point_on_lines(b1, b2, a2);\n    }\n    return (cross(a2-a1, b1-a1)*cross(a2-a1, b2-a1) < EPS) &&\n           (cross(b2-b1, a1-b1)*cross(b2-b1, a2-b1) < EPS);\n}\n\n// a1,a2を端点とする線分とb1,b2を端点とする線分の交点計算\nCP intersection_lines(CP a1, CP a2, CP b1, CP b2) {\n    CP b = b2-b1;\n    long double d1 = abs(cross(b, a1-b1));\n    long double d2 = abs(cross(b, a2-b1));\n    long double t = d1/(d1+d2);\n    return a1+(a2-a1)*t;\n}\n\n// a1,a2を通る直線とb1,b2を通る直線の交差判定\nint is_intersected_line(CP a1, CP a2, CP b1, CP b2) {\n    return !EQ(cross(a1-a2, b1-b2), 0.0);\n}\n\n// a1,a2を通る直線とb1,b2を通る直線の交点計算(平行ではない前提)\nCP intersection_line(CP a1, CP a2, CP b1, CP b2) {\n    CP a = a2-a1; CP b = b2-b1;\n    return a1 + a*cross(b, b1-a1)/cross(b, a);\n}\n\n// 点a,bを通る直線と点cとの距離\nlong double distance_line_p(CP a, CP b, CP c) {\n    return abs(cross(b-a, c-a))/abs(b-a);\n}\n\n// 点a,bを端点とする線分と点cとの距離\nlong double distance_lines_p(CP a, CP b, CP c) {\n    if(dot(b-a, c-a) < EPS) return abs(c-a);\n    if(dot(a-b, c-b) < EPS) return abs(c-b);\n    return abs(cross(b-a, c-a))/abs(b-a);\n}\n\n// 点a1,a2を端点とする線分と点b1,b2を端点とする線分の最短距離\nlong double distance_lines_lines(CP a1, CP a2, CP b1, CP b2) {\n    long double res = 1e18;\n    if(is_intersected_lines(a1, a2, b1, b2)) return 0.0L;\n    res = min(res, distance_lines_p(a1, a2, b1));\n    res = min(res, distance_lines_p(a1, a2, b2));\n    res = min(res, distance_lines_p(b1, b2, a1));\n    res = min(res, distance_lines_p(b1, b2, a2));\n    return res;\n}\n\n// s,tを通る直線に対する点pの射影\nCP projection(CP s, CP t, CP p) {\n    if(EQV(s, t)) return s;\n    CP base = t-s;\n    return s + base*(dot(p-s, base)/norm(base));\n}\n\n// s,tを通る直線に対する点pの反射\nCP reflection(CP s, CP t, CP p) {\n    CP tmp = projection(s, t, p) - p;\n    return p + tmp*2.0L;\n}\n\n// 3点の位置関係を判定\nint calc_clockwise(CP p0, CP p1, CP p2) {\n    CP x = p1-p0, y = p2-p0;\n    if(cross(x, y) > EPS) return 1;     // \"COUNTER_CLOCKWISE\"\n    if(cross(x, y) < -EPS) return -1;   // \"CLOCKWISE\"\n    if(dot(x, y) < 0) return 2;         // \"ONLINE_BACK\"\n    if(norm(x) < norm(y)) return -2;    // \"ONLINE_FRONT\"\n    return 0;                           // \"ON_SEGMENT\" \n}\n\nint main() {\n    int q; cin >> q;\n    while(q--) {\n        cout << fixed << setprecision(10);\n        long double a, b, c, d, e, f, g, h;\n        cin >> a >> b >> c >> d;\n        cin >> e >> f >> g >> h;\n        CP p0(a, b), p1(c, d), p2(e, f), p3(g, h);\n        long double ans = distance_lines_lines(p0, p1, p2, p3);\n        cout << ans << endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nstruct F {\n\tlong long a, b;\n\tF() {}\n\tF(long long _a, long long _b) : a(_a), b(_b) {}\n\tF operator + (const F &f) {\n\t\tlong long x = a * f.a, y = b * f.a + a * f.b;\n\t\tlong long g = __gcd(x, y);\n\t\treturn F(x / g, y / g);\n\t}\n\tF operator - (const F &f) {\n\t\tlong long x = a * f.a, y = b * f.a - a * f.b;\n\t\tlong long g = __gcd(x, y);\n\t\treturn F(x / g, y / g);\n\t}\n\tF operator * (const F &f) {\n\t\tlong long x = a * f.a, y = b * f.b;\n\t\tlong long g = __gcd(x, y);\n\t\treturn F(x / g, y / g);\n\t}\n\tF operator / (const F &f) {\n\t\tlong long x = a * f.b, y = b * f.a;\n\t\tlong long g = __gcd(x, y);\n\t\treturn F(x / g, y / g);\n\t}\n};\nconst double pi = acos(-1);\nconst double eps = 1e-8;\ninline int sign(double a) {\n\treturn a < -eps ? -1 : a > eps;\n}\ninline int cmp(double a, double b) {\n\treturn sign(a - b);\n}\ndouble add(double a, double b) {\n\tif (abs(a + b) < eps * (abs(a) + abs(b))) return 0;\n\treturn a + b;\n}\ntypedef double data;\nstruct P {\n\tdata x, y;\n\tP() {}\n\tP(data x, data y) : x(x), y(y) {}\n\tP operator + (const P &p) { return P(x + p.x, y + p.y); }\n\tP operator - (const P &p) { return P(x - p.x, y - p.y); }\n\tP operator * (data d) { return P(x * d, y * d); }\n\tP operator / (data d) { return P(x / d, y / d); }\n\tdata dot(const P &p) { return x * p.x + y * p.y; }\n\tdata det(const P &p) { return x * p.y - y * p.x; }\n\tdata disto(const P &p) { return (*this - p).abs(); }\n\tdata alpha() { return atan2(y, x); }\n\tdata abs() { return sqrt(abs2()); }\n\tdata abs2() { return x * x + y * y; }\n\tP rot90() { P(-y, x); }\n\tP unit() { return *this / abs(); }\n\tbool operator < (P p) const {\n\t\tint c = cmp(x, p.x);\n\t\tif (c) return c == -1;\n\t\treturn cmp(y, p.y) == -1;\n\t}\n\tfriend istream& operator>>(istream &in, P &p) {\n\t\tin >> p.x >> p.y;\n\t\treturn in;\n\t}\n\tfriend ostream& operator<<(ostream& out, P &p) {\n\t\tout << p.x << ' ' << p.y;\n\t\treturn out;\n\t}\n};\nP projection(P p1, P p2, P q) {\n\tP dir = p2 - p1;\n\treturn p1 + dir * (dir.dot(q - p1) / dir.abs2());\n}\nP reflection(P p1, P p2, P q) {\n\treturn projection(p1, p2, q) * 2 - q;\n}\nbool is_midddle(data a, data m, data b) {\n\treturn sign(a - m) == 0 || sign(b - m) == 0 || (a < m != b < m);\n}\nbool is_midddle(P a, P m, P b) {\n\treturn is_midddle(a.x, m.x, b.x) && is_midddle(a.y, m.y, b.y);\n}\nbool on_seg(P p1, P p2, P q) {\n\treturn (p1 - q).det(p2 - q) == 0 && (p1 - q).dot(p2 - q) <= 0;\n\t// return (p1 - q).det(p2 - q) == 0 && is_middle(p1, q, p2);\n}\nbool intersect(data l1, data r1, data l2, data r2) {\n\tif(l1 > r1) swap(l1, r1);\n\tif(l2 > r2) swap(l2, r2);\n\treturn cmp(r1, l2) != -1 && cmp(r2, l1) != -1;\n}\nbool intersect(P p1, P p2, P q1, P q2) {\n\treturn intersect(p1.x, p2.x, q1.x, q2.x) && intersect(p1.y, p2.y, q1.y, q2.y)\n\t&& (p1 - q1).det(p2 - q1) * (p1 - q2).det(p2 - q2) <= 0\n\t&& (q1 - p1).det(q2 - p1) * (q1 - p2).det(q2 - p2) <= 0;\n}\nP intersection(P p1, P p2, P q1, P q2) {\n\tdata a1 = (q1 - p1).det(q2 - p1), a2 = -(q1 - p2).det(q2 - p2);\n\treturn (p1 * a2 + p2 * a1) / (a1 + a2);\n\t// return p1 + (p2 - p1) * ((q2 - q1).det(q1 - p1) / (q2 - q1).det(p2 - p1));\n}\ndata nearest(P p1, P p2, P q) {\n\tP h = projection(p1, p2, q);\n\tif(is_midddle(p1, h, p2)) return q.disto(h);\n\treturn min(p1.disto(q), p2.disto(q));\n}\ndata dist_seg(P p1, P p2, P q1, P q2) {\n\tif(intersect(p1, p2, q1, q2)) return 0;\n\treturn min(min(nearest(p1, p2, q1), nearest(p1, p2, q2)), min(nearest(q1, q2, p1), nearest(q1, q2, p2)));\n}\n\nint main() {\n#ifdef LOCAL_DEFINE\n\t//freopen(\"data.in\", \"rt\", stdin);\n\t//freopen(\"data.out\", \"w\", stdout);\n\tauto _start = chrono::high_resolution_clock::now();\n#endif\n\n\tios::sync_with_stdio(false);\n\tcin.tie(0);\n\tcout << fixed << setprecision(15);\n\tint q;\n\tcin >> q;\n\twhile (q--) {\n\t\tP p0, p1, p2, p3;\n\t\tcin >> p0 >> p1 >> p2 >> p3;\n\t\tdouble ans = dist_seg(p0, p1, p2, p3);\n\t\tcout << ans << '\\n';\n\t}\n\n#ifdef LOCAL_DEFINE\n\tauto _end = chrono::high_resolution_clock::now();\n\tcerr << \"elapsed time: \" << chrono::duration<double, milli>(_end - _start).count() << \" ms\\n\";\n#endif\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <cmath>\n#include <array>\n#include <algorithm>\n\nusing Number = double;\n\nconst Number EPS = 1e-10;\nconst Number INF = 1e10;\nconst Number PI = acos(-1.0);\n\ninline int sign(Number x) { return (x < -EPS) ? -1 : (x > EPS) ? +1 : 0; }\ninline bool equal(Number a, Number b) { return sign(a - b) == 0; }\n\n// change between degree and radian\ninline Number to_radian(const Number degree) { return degree * PI / 180.0; }\ninline Number to_degree(const Number radian) { return radian * 180.0 / PI; }\n\n\n/**\n * Point in two dimensional\n */\nclass Point {\npublic:\n    Number x, y;\n\n    Point() {}\n    Point(Number x, Number y) : x(x), y(y) {}\n\n    // Arithmetic operator between points\n    Point operator+(const Point &rhs) const {\n        return Point(this->x + rhs.x, this->y + rhs.y);\n    }\n    Point operator-(const Point &rhs) const {\n        return Point(this->x - rhs.x, this->y - rhs.y);\n    }\n    Point operator*(const Point &rhs) const { // cross product between points\n        return Point(this->x * rhs.x - this->y * rhs.y,\n                     this->x * rhs.x + this->y * rhs.x);\n    }\n\n    // Unary operator and compound assignment operator\n    Point operator-() const {\n        return Point(-this->x, -this->y);\n    }\n    Point& operator+=(const Point &rhs) {\n        return *this = *this + rhs;\n    }\n    Point& operator-=(const Point &rhs) {\n        return *this = *this - rhs;\n    }\n\n    // Arithmetic operator between point and number\n    Point operator*(Number rhs) const {\n        return Point(this->x * rhs, this->y * rhs);\n    }\n    Point operator/(Number rhs) const {\n        return Point(this->x / rhs, this->y / rhs);\n    }\n\n    // Comparison operation\n    bool operator==(const Point &rhs) const {\n        return sign(this->x - rhs.x) == 0 && sign(this->y - rhs.y) == 0;\n    }\n    bool operator<(const Point &rhs) const {\n        return (this->x < rhs.x) || (this->x == rhs.x && this->y < rhs.y);\n    }\n\n    // Other operator\n    Number abs(void) const {\n        return sqrt(this->x * this->x + this->y * this->y);\n    }\n    Number abs2(void) const {\n        return this->x * this->x + this->y * this->y;\n    }\n    Number arg(void) const {\n        return atan2(this->y, this->x);\n    }\n    Number dot(const Point &rhs) {\n        return this->x * rhs.x + this->y * rhs.y;\n    }\n    Point rotate90(void) const {\n        return Point(-this->y, this->x);\n    }\n    Point rotate(double angle) const {\n        return Point(cos(angle) * this->x - sin(angle) * this->y,\n                     sin(angle) * this->x + cos(angle) * this->y);\n    }\n\n};\ninline Number dot(const Point &p1, const Point &p2) {\n    return p1.x * p2.x + p1.y * p2.y;\n}\ninline Number abs_cross(const Point &p1, const Point &p2) {\n    return p1.x * p2.y - p1.y * p2.x;\n}\n// Output of a point\nstd::ostream& operator<<(std::ostream &os, const Point &p) {\n    return os <<  p.x << ' ' << p.y;\n}\n// Input of a point\nstd::istream& operator>>(std::istream &is, Point &p) {\n    return is >> p.x >> p.y;\n}\n\n// Counter-Clockwise predicate (a, b, c)\nenum CCW {\n    COUNTER_CLOCKWISE = 1,      // counter clockwise\n    CLOCKWISE         = -1,     // clockwise\n    ONLINE_FRONT      = 2,      // a--c--b on line\n    ONLINE_BACK       = -2,      // c--a--b on line\n    ON_SEGMENT        = 0,     // a--b--c on line\n};\nCCW ccw(const Point &a, Point b, Point c) {\n    b -= a;  c -= a;\n    if (abs_cross(b, c) > EPS) return COUNTER_CLOCKWISE;\n    if (abs_cross(b, c) < -EPS) return CLOCKWISE;\n    if (dot(b, c) < 0)       return ONLINE_BACK;\n    if (b.abs2() < c.abs2())   return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\n\n/**\n * Line in two dimensional\n */\nclass Line : public std::array<Point, 2> {\npublic:\n    Line() {}\n    Line(const Point &p1, const Point &p2) {\n        (*this)[0] = p1;\n        (*this)[1] = p2;\n    }\n};\n// Input of a line\nstd::istream& operator>>(std::istream &is, Line &l) {\n    return is >> l[0] >> l[1];\n}\ninline CCW ccw(const Line &l, const Point &p) {\n    return ccw(l[0], l[1], p);\n}\n\n\n/**\n * Segment in two dimensional\n */\nclass Segment : public Line {\npublic:\n    Segment() {}\n    Segment(const Point &p1, const Point &p2) : Line(p1, p2) {}\n};\n\n\n/**\n * Circle in two dimensional\n */\nclass Circle : public Point {\npublic:\n    Number r;\n    Circle(const Point &p, Number r = 0.0) : Point(p), r(r) {}\n};\n// Input of a circle\nstd::istream& operator>>(std::istream &is, Circle &c) {\n    return is >> c.x >> c.y >> c.r;\n}\n\n\n\n/**\n * Intersection testing\n */\ninline bool IsOrthogonal(const Line &l1, const Line &l2) {\n    return equal(dot(l1[0] - l1[1], l2[0] - l2[1]), 0.0);\n}\ninline bool IsParallel(const Line &l1, const Line &l2) {\n    return equal(abs_cross(l1[0] - l1[1], l2[0] - l2[1]), 0.0);\n}\n\ninline bool IsIntersect(const Line &l, const Point &p) {\n    return abs(ccw(l[0], l[1], p)) != 1;\n}\ninline bool IsIntersect(const Segment &s, const Point &p) {\n    return ccw(s[0], s[1], p) == 0;\n}\ninline bool IsIntersect(const Line &l1, const Line l2) {\n    return !IsParallel(l1, l2) || IsParallel(l1, Line(l1[0], l2[0]));\n}\ninline bool IsIntersect(const Line &l, const Segment &s) {\n    return abs_cross(l[1] - l[0], s[0] - l[0]) *\n        abs_cross(l[1] - l[0], s[1] - l[0]) < EPS;\n}\ninline bool IsIntersect(const Segment &s1, const Segment &s2) {\n    return ccw(s1[0], s1[1], s2[0]) * ccw(s1[0], s1[1], s2[1]) <= 0 &&\n        ccw(s2[0], s2[1], s1[0]) * ccw(s2[0], s2[1], s1[1]) <= 0;\n}\n\n\n/**\n * Intersection point and Distance\n */\nPoint Projection(const Line &l, const Point &p) {\n    Point dir = l[1] - l[0];\n    Number t = dot(p - l[0], dir) / dir.abs2();\n    return l[0] + dir * t;\n}\nPoint Reflection(const Line &l, const Point &p) {\n    return Projection(l, p) * 2.0 - p;\n}\n\nPoint CrossPoint(const Line &s1, const Line &s2) {\n    Point base = s2[1] - s2[0];\n    Number d1 = abs(abs_cross(base, s1[0] - s2[0]));\n    Number d2 = abs(abs_cross(base, s1[1] - s2[0]));\n    Number t = d1 / (d1 + d2);\n    return s1[0] + (s1[1] - s1[0]) * t;\n}\n\ninline Number Distance(const Point &p1, const Point &p2) {\n    return (p1 - p2).abs();\n}\ninline Number Distance(const Line &l, const Point &p) {\n    return (p - Projection(l, p)).abs();\n}\nNumber Distance(const Segment &s, const Point &p) {\n    const Point r = Projection(s, p);\n    if (IsIntersect(s, r)) return Distance(r, p);\n    return std::min(Distance(s[0], p), Distance(s[1], p));\n}\ninline Number Distance(const Line &l1, const Line &l2) {\n    return IsIntersect(l1, l2) ? 0 : Distance(l1, l2[0]);\n}\nNumber Distance(const Line &l, const Segment &s) {\n    if (IsIntersect(l, s)) return 0.0;\n    return std::min(Distance(l, s[0]), Distance(l, s[1]));\n}\nNumber Distance(const Segment &s1, const Segment &s2) {\n    if (IsIntersect(s1, s2)) return 0.0;\n    return std::min({Distance(s1, s2[0]), Distance(s1, s2[1]),\n                Distance(s2, s1[0]), Distance(s2, s1[1])});\n}\n\nint main()\n{\n    std::cout << std::fixed << std::setprecision(15);\n\n    Segment s1, s2;\n    int q;\n\n    std::cin >> q;\n\n    while (q--) {\n        std::cin >> s1 >> s2;\n        std::cout << Distance(s1, s2) << '\\n';\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "\n\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> P;\ndouble eps=1e-7;\nbool eq(double a,double b){return (b-a<eps&&a-b<eps);}\ndouble cross(P a,P b){return imag(b*conj(a));}\ndouble dot(P a,P b){return real(b*conj(a));}\nP project(P a,P b,P c){b-=a;c-=a;return a+b*real(c/b);}\nP reflect(P a,P b,P c){b-=a;c-=a;return a+conj(c/b)*b;}\nint ccw(P a,P b,P c){\n  b-=a,c-=a,a=c*conj(b);\n  if(a.imag()>eps)return 1;//ccw\n  if(a.imag()<-eps)return -1;//cw\n  if(a.real()<-eps)return 2;//ob\n  if(abs(b)+eps<abs(c))return -2;//of\n  return 0;//os\n}\n \n//segment ab , point c\ndouble dist(P a,P b,P c){\n  if(dot(b-a,c-a)<0)return abs(c-a);\n  if(dot(a-b,c-b)<0)return abs(c-b);\n  return abs(cross(b-a,c-a))/abs(b-a);\n}\n \nbool isintersect(P a,P b,P c,P d){\n  return ((ccw(a,b,c)*ccw(a,b,d)<=0)&&(ccw(c,d,a)*ccw(c,d,b)<=0));\n}\n \n//segment ab , segment cd\nP intersect(P a,P b,P c,P d){\n  a-=d;b-=d;c-=d;\n  return d+a+(b-a)*imag(a/c)/imag(a/c-b/c);\n}\n \ndouble dist(P a,P b,P c,P d){\n  if(isintersect(a,b,c,d))return 0;\n  double ab=min(dist(a,b,c),dist(a,b,d));\n  double cd=min(dist(c,d,a),dist(c,d,b));\n  return min(ab,cd);\n}\n \nint main(){\n  int T;\n  cin>>T;\n  while(T--){\n    double ax,ay,bx,by,cx,cy,dx,dy;\n    cin>>ax>>ay>>bx>>by>>cx>>cy>>dx>>dy;  \n    printf(\"%.12f\\n\",dist( P(ax,ay) , P(bx,by) , P(cx,cy) , P(dx,dy) ) );\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <cmath>\nusing namespace std;\n#define EPS (1e-10)\n\nstatic const int COUNTER_CLOCKWISE=1;\nstatic const int CLOCKWISE=-1;\nstatic const int ONLINE_BACK=2;\nstatic const int ONLINE_FRONT=-2;\nstatic const int ON_SEGMENT=0;\n\nstruct Point { double x, y; };//点\nstruct Segment { Point p1, p2; };//線\ndouble dot(Point a, Point b) {//内積\n    return a.x * b.x + a.y * b.y;\n}\ndouble cross(Point a, Point b) {//外積\n    return a.x * b.y - a.y * b.x;\n}\ndouble norm(Point a) {\n    return a.x * a.x + a.y * a.y;\n}\ndouble absv(Point a) {\n    return sqrt(norm(a));\n}\nPoint project(Segment s, Point p) {\n    Point base, q;\n    Point ans;\n    base.x = s.p2.x - s.p1.x;\n    base.y = s.p2.y - s.p1.y;\n    q.x = p.x - s.p1.x;\n    q.y = p.y - s.p1.y;\n    double r = dot(q, base) / norm(base);\n    ans.x = s.p1.x + base.x * r;\n    ans.y = s.p1.y + base.y * r;\n    return ans;\n}\nPoint reflect(Segment s, Point p) {\n    Point ans;\n    ans.x = p.x + (project(s, p).x - p.x) * 2.0;\n    ans.y = p.y + (project(s, p).y - p.y) * 2.0;\n    return ans;\n}\ndouble getPointDistance(Point a, Point b) {\n    Point ans;\n    ans.x = a.x - b.x;\n    ans.y = a.y - b.y;\n    return absv(ans);\n}\ndouble getDistanceLP(Segment l, Point p) {\n    Point tmp, tmp2;\n    tmp.x = l.p2.x - l.p1.x;\n    tmp.y = l.p2.y - l.p1.y;\n    tmp2.x = p.x - l.p1.x;\n    tmp2.y = p.y - l.p1.y;\n    return abs(cross(tmp, tmp2) / absv(tmp));\n}\ndouble getDistanceSP(Segment s, Point p) {\n    Point t1, t2, t3, t4;\n    t1.x = s.p2.x - s.p1.x;\n    t1.y = s.p2.y - s.p1.y;\n    t2.x = p.x - s.p1.x;\n    t2.y = p.y - s.p1.y;\n    t3.x = s.p1.x - s.p2.x;\n    t3.y = s.p1.y - s.p2.y;\n    t4.x = p.x - s.p2.x;\n    t4.y = p.y - s.p2.y;\n    if (dot(t1, t2) < 0.0)return absv(t2);\n    if (dot(t3, t4) < 0.0)return absv(t4);\n    return getDistanceLP(s, p);\n}\nint ccw(Point p0,Point p1,Point p2){\n    Point a,b;\n    a.x=p1.x-p0.x;\n    a.y=p1.y-p0.y;\n    b.x=p2.x-p0.x;\n    b.y=p2.y-p0.y;\n    if(cross(a,b)>EPS)return COUNTER_CLOCKWISE;\n    if(cross(a,b)<(-EPS))return CLOCKWISE;\n    if(dot(a,b)<(-EPS))return ONLINE_BACK;\n    if(norm(a)<norm(b))return ONLINE_FRONT;\n    \n    return ON_SEGMENT;\n}\nbool intersect(Point p1,Point p2,Point p3,Point p4){\n    return(ccw(p1,p2,p3)*ccw(p1,p2,p4)<=0 && ccw(p3,p4,p1)*ccw(p3,p4,p2)<=0);\n}\nbool intersectS(Segment s1,Segment s2){\n    return intersect(s1.p1,s1.p2,s2.p1,s2.p2);\n}\nPoint getCrossPoint(Segment s1,Segment s2){\n    Point base,a,b,c;\n    base.x=s2.p2.x-s2.p1.x;\n    base.y=s2.p2.y-s2.p1.y;\n    a.x=s1.p1.x-s2.p1.x;\n    a.y=s1.p1.y-s2.p1.y;\n    b.x=s1.p2.x-s2.p1.x;\n    b.y=s1.p2.y-s2.p1.y;\n    double d1=abs(cross(base,a));\n    double d2=abs(cross(base,b));\n    double t=d1/(d1+d2);\n    c.x=s1.p1.x+(s1.p2.x-s1.p1.x)*t;\n    c.y=s1.p1.y+(s1.p2.y-s1.p1.y)*t;\n    return c;\n}\ndouble getDistance(Segment s1,Segment s2){\n    if(intersectS(s1,s2))return 0.0;\n    double a,b;\n    a=min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2));\n    b=min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2));\n    return min(a,b);\n}\n\nint main(void) {\n    Segment a,b;\n    int n;cin >> n;\n    for (int i = 0; i < n; i++) {\n        cin >> a.p1.x >> a.p1.y >> a.p2.x >> a.p2.y;\n        cin >> b.p1.x >> b.p1.y >> b.p2.x >> b.p2.y;\n        cout << fixed << setprecision(10) << getDistance(a,b) << endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <string>\n#include <cstdio>\n#include <algorithm>\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\nusing namespace std;\n\n//点を表す構造体\nclass Point{\npublic:\n  double x, y;\n\n  Point(double x=0, double y=0){\n    this->x = x;\n    this->y = y;\n  }\n\n  Point operator+(const Point &seg2){\n    return Point(x+seg2.x, y+seg2.y);\n  }\n\n  Point operator-(const Point &seg2){\n    return Point(x-seg2.x, y-seg2.y);\n  }\n\n  Point operator*(const double k){\n    return Point(x*k, y*k);\n  }\n\n  Point &operator=(const Point &p){\n    x = p.x;\n    y = p.y;\n    return *this;\n  }\n\n  bool operator < (const Point &p) const{\n    return x != p.x? x<p.x : y<p.y;\n  }\n\n  bool operator == (const Point &p) const{\n    return equals(x, p.x) && equals(y, p.y);\n  }\n};\n\n//ベクトルを点の別表記でも表せるようにしておく\nclass Vector : public Point{\npublic:\n  Vector() : Point() {}\n\n  Vector(double x, double y) : Point(x, y) {}\n\n  Vector(Point p) : Point(){\n    x = p.x;\n    y = p.y;\n  }\n\n  double norm(){\n    return x*x + y*y;\n  }\n\n  double abs(){\n    return sqrt(norm());\n  }\n\n  static double dot(Vector a, Vector b){\n    return a.x*b.x + a.y*b.y;\n  }\n\n  static double cross(Vector a, Vector b){\n    return a.x*b.y - a.y*b.x;\n  }\n\n  static bool isOrthogonal(Vector a, Vector b){\n    return equals(dot(a, b), 0.0);\n  }\n\n  static bool isParallel(Vector a, Vector b){\n    return equals(cross(a, b), 0.0);\n  }\n};\n\n//線分(ベクトルを用いて)を表す構造体。両端の点が定義されている点に注意\nclass Segment{\npublic:\n  Point p1, p2;\n\n  Segment(Point p1, Point p2){\n    this->p1 = p1;\n    this->p2 = p2;\n    x = p2.x-p1.x;\n    y = p2.y-p1.y;\n  }\n\n  static bool isOrthogonal(Segment a, Segment b){\n    return equals(dot(a, b), 0.0);\n  }\n\n  static bool isParallel(Segment a, Segment b){\n    return equals(cross(a, b), 0.0);\n  }\n\nprivate:\n  int x, y;\n  static double dot(Segment a, Segment b){\n    return a.x*b.x + a.y*b.y;\n  }\n\n  static double cross(Segment a, Segment b){\n    return a.x*b.y - a.y*b.x;\n  }\n};\n\ntypedef Segment Line;\n\nclass Circle{\npublic:\n  Point c;\n  double r;\n  Circle(Point c = Point(), double r = 0.0): c(c), r(r){}\n};\n\nstring ccw_str(Point p0, Point p1, Point p2){\n  //enum res {COUNTER_CLOCKWISE=0, CLOCKWISE, ONLINE_BACK, ONLINE_FRONT, ON_SEGMENT};\n  Vector a = p1-p0;\n  Vector b = p2-p0;\n  if(Vector::cross(a, b) > EPS) return \"COUNTER_CLOCKWISE\";\n  if(Vector::cross(a, b) < -EPS) return \"CLOCKWISE\";\n  if(Vector::dot(a, b) < -EPS) return \"ONLINE_BACK\";\n  if(a.norm() < b.norm()) return \"ONLINE_FRONT\";\n  return \"ON_SEGMENT\";\n}\n\nint ccw_int(Point p0, Point p1, Point p2){\n  enum res {COUNTER_CLOCKWISE=-1, CLOCKWISE=1, ONLINE_BACK=2, ONLINE_FRONT=-2, ON_SEGMENT=0};\n  Vector a = p1-p0;\n  Vector b = p2-p0;\n  if(Vector::cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n  if(Vector::cross(a, b) < -EPS) return CLOCKWISE;\n  if(Vector::dot(a, b) < -EPS) return ONLINE_BACK;\n  if(a.norm() < b.norm()) return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\n\nPoint project(Segment s, Point p){\n  Vector base = s.p2-s.p1;\n  double r = Vector::dot(p - s.p1, base) / base.norm();\n  return s.p1 + base*r;\n}\n\nPoint reflect(Segment s, Point p){\n  Point pro = project(s, p);\n  return p + (pro-p)*2.0;\n}\n\nbool intersect(Point p1, Point p2, Point p3, Point p4){\n  return ccw_int(p1, p2, p3)*ccw_int(p1, p2, p4)<=0 && ccw_int(p3, p4, p1)*ccw_int(p3, p4, p2)<=0;\n}\n\nbool intersect(Segment s1, Segment s2){\n  return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\nPoint crossPoint(Point p1, Point p2, Point p3, Point p4){\n  Vector base = p2-p1;\n  double d1 = fabs(Vector::cross(base, p4-p1))/fabs(base.abs());\n  double d2 = fabs(Vector::cross(base, p3-p1))/fabs(base.abs());\n  double t = d1/(d1+d2);\n  Point x = p4 + (p3-p4)*t;\n  return x;\n}\n\ndouble distance(Point p1, Point p2){\n  Vector base=p2-p1;\n  return base.abs();\n}\n\ndouble distance(Point p, Segment s){\n  double dot1, dot2;\n  Vector base = s.p2-s.p1;\n  dot1 = Vector::dot(base, p-s.p1);\n  dot2 = Vector::dot(base*(-1.0), p-s.p2);\n\n  double ans;\n  if(dot1<-EPS) ans = distance(s.p1, p);\n  else if(dot2<-EPS) ans = distance(s.p2, p);\n  else ans = fabs(Vector::cross(p-s.p1, base))/base.abs();\n\n  return ans;\n}\n\ndouble distance(Segment s1, Segment s2){\n  double ans;\n  if(intersect(s1, s2)) ans = 0.0;\n  else {\n    ans = min(min(distance(s1.p1, s2), distance(s1.p2, s2)),\n                  min(distance(s2.p1, s1), distance(s2.p2, s1)));\n  }\n  return ans;\n}\n\nint main(){\n  int q; cin >> q;\n\n  double q1_x, q1_y, q2_x, q2_y, q3_x, q3_y, q4_x, q4_y;\n  for(int i=0; i<q; i++){\n    cin >> q1_x >> q1_y >> q2_x >> q2_y >> q3_x >> q3_y >> q4_x >> q4_y;\n    Point p1(q1_x, q2_y), p2(q2_x, q2_y), p3(q3_x, q3_y), p4(q4_x, q4_y);\n    Segment s1(p1, p2), s2(p3, p4);\n    double ans = distance(s1, s2);\n    printf(\"%.10lf\\n\", ans);\n  }\n\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <complex>\n#include <cmath>\n#include <iomanip>\n#include <algorithm>\n#include <windows.h> \nusing namespace std;\ntypedef complex<double> xy;\ndouble eps = 1e-9;\ndouble dot_product(xy a,xy b) {return (conj(a)*b).real();}\ndouble cross_product(xy a,xy b) {return (conj(a)*b).imag();}\ndouble dist_lp(xy a1,xy a2,xy p){\n    if(dot_product(a2-a1,p-a1)<eps) return abs(p-a1);\n    if(dot_product(a1-a2,p-a2)<eps) return abs(p-a2);\n    return abs(cross_product(a2-a1,p-a1))/abs(a2-a1);\n}\nxy projection(xy p,xy b) {return b*dot_product(p,b)/norm(b);}\nxy projection2(xy p1,xy p2,xy p){\n    p -= p1; p2 -= p1;\n    xy proj = projection(p,p2);\n    return p1+proj;\n}\n\nbool is_online(xy a1,xy a2,xy p){\n    return abs(a1-p)+abs(a2-p)<=abs(a1-a2)+eps;    \n}\n\nbool is_intersected(xy a1, xy a2, xy b1, xy b2){\n    if(is_online(a1,a2,b1) || is_online(a1,a2,b2)) return true;\n    if(is_online(b1,b2,a1) || is_online(b1,b2,a2)) return true;\n    return (cross_product(a2-a1,b1-a1)*cross_product(a2-a1,b2-a1)<-eps) && \n    (cross_product(b2-b1,a1-b1)*cross_product(b2-b1,a2-b1))<-eps;\n}\n\ndouble dist_ll(xy a1,xy a2,xy b1,xy b2){\n    if(is_intersected(a1,a2,b1,b2)) return 0;\n    return min({dist_lp(a1,a2,b1),dist_lp(a1,a2,b2),dist_lp(b1,b2,a1),dist_lp(b1,b2,a1)\n    ,abs(a1-b1),abs(a1-b2),abs(a2-b1),abs(a2-b2)});   \n}\n\nint Q;\ndouble X[5],Y[5];\nint main(){\n    cin >> Q;\n    for(int i=0;i<Q;i++){\n        for(int j=1;j<=4;j++){\n            cin >> X[j] >> Y[j];\n        }\n        cout << fixed;\n        cout << setprecision(10) << dist_ll(xy(X[1],Y[1]),xy(X[2],Y[2]),xy(X[3],Y[3]),xy(X[4],Y[4])) << endl;       \n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nconst double eps = 1e-10;\nbool dcmp(double d, double d2 = 0) { return abs(d - d2) < eps; }\ndouble sgn(double d) {\n  if (dcmp(d))\n    return 0;\n  if (d > 0)\n    return 1;\n  return -1;\n}\n\nstruct vec {\n  double x, y;\n  vec(double x, double y) : x(x), y(y) {}\n  vec() : x(0), y(0) {}\n  const bool operator==(const vec &v) const {\n    return dcmp(x, v.x) && dcmp(y, v.y);\n  }\n  const bool operator!=(const vec &v) const { return !(*this == v); }\n  const vec operator+(const vec &v) const { return vec(x + v.x, y + v.y); }\n  const vec operator-() const { return vec(-x, -y); }\n  const vec operator-(const vec &v) const { return *this + (-v); }\n  const vec operator*(const double d) const { return vec(x * d, y * d); }\n  const vec operator/(const double d) const { return *this * (1 / d); }\n  const vec unit() const { return *this / len(); };\n  const double len() const { return sqrt(x * x + y * y); }\n  const double dot(const vec &v) const { return x * v.x + y * v.y; }\n  const double cross(const vec &v) const { return x * v.y - y * v.x; }\n  const bool parallel(const vec &v) const { return dcmp(cross(v)); }\n  const bool perpendicular(const vec &v) const { return dcmp(dot(v)); }\n};\n\ntypedef vec point;\n\ntemplate <class T> struct optional {\n  bool has;\n  T val;\n  optional() : has(false) {}\n  optional(T t) : has(true), val(t) {}\n};\n\nstruct line {\n  double a, b, c;\n  line(point p1, point p2) {\n    a = p1.y - p2.y;\n    b = p2.x - p1.x;\n    c = (p1.x - p2.x) * p1.y + (p2.y - p1.y) * p1.x;\n    double m1 = a * p1.x + b * p1.y + c;\n    double m2 = a * p2.x + b * p2.y + c;\n  }\n  bool parallel(line l) { return dcmp(a * l.b, b * l.a); }\n  optional<point> intersect(line l) {\n    if (parallel(l))\n      return optional<point>();\n    return point(-(c * l.b - b * l.c) / (a * l.b - b * l.a),\n                 (c * l.a - a * l.c) / (a * l.b - b * l.a));\n  }\n  bool contains(point p) { return dcmp(a * p.x + b * p.y + c); }\n  point project(point p) {\n    double t = -(a * p.x + b * p.y + c) / (a * a + b * b);\n    return point(p.x + a * t, p.y + b * t);\n  }\n};\n\nstruct segment {\n  point p1, p2;\n  segment(point p1, point p2) : p1(p1), p2(p2) {}\n  line sline() { return line(p1, p2); }\n  bool contains(point p) {\n    double x1 = min(p1.x, p2.x), x2 = max(p1.x, p2.x);\n    double y1 = min(p1.y, p2.y), y2 = max(p1.y, p2.y);\n    bool ok = sline().contains(p) && (x1 <= p.x && p.x <= x2) &&\n              (y1 <= p.y && p.y <= y2);\n    return ok;\n  }\n  bool intersect(segment s) {\n    vec v0 = p2 - p1;\n    vec v1 = s.p2 - s.p1;\n    if (v0.parallel(v1)) {\n      return (contains(s.p1) || contains(s.p2)) ||\n             (s.contains(p1) || s.contains(p2));\n    }\n    point a = p1, b = p2, c = s.p1, d = s.p2;\n    return sgn((a - b).cross(b - c)) != sgn((a - b).cross(b - d)) &&\n           sgn((c - d).cross(d - a)) != sgn((c - d).cross(d - b));\n  }\n  double distance(point p) {\n    point p0 = sline().project(p);\n    if (contains(p0)) {\n      return (p0 - p).len();\n    } else {\n      return min((p1 - p).len(), (p2 - p).len());\n    }\n  }\n};\n\nint main() {\n  int n;\n  cin >> n;\n  for (int i = 0; i < n; i++) {\n    point p0, p1, p2, p3;\n    cin >> p0.x >> p0.y >> p1.x >> p1.y >> p2.x >> p2.y >> p3.x >> p3.y;\n    segment l0(p0, p1);\n    segment l1(p2, p3);\n    double d = 1.0 / 0.0;\n    d = min(d, l0.distance(p2));\n    d = min(d, l0.distance(p3));\n    d = min(d, l1.distance(p0));\n    d = min(d, l1.distance(p1));\n    if (l0.intersect(l1))\n      d = 0;\n    printf(\"%.11lf\\n\", d);\n  }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n \nusing namespace std;\nusing uint = unsigned int;\nusing ll = long long;\nusing ull = unsigned long long;\nconstexpr ll TEN(int n) { return (n==0) ? 1 : 10*TEN(n-1); }\ntemplate<class T> using V = vector<T>;\ntemplate<class T> using VV = V<V<T>>;\n\nusing D = double;\nconst D PI = acos(D(-1)), EPS = 1e-10;\n\nint sgn(D a) { return (abs(a) <= EPS) ? 0 : (a < 0 ? -1 : 1); }\nint sgn(D a, D b) { return sgn(a-b); }\n//relative sign\n// int rsgn(D a, D f) {\n//     if (abs(a) <= f*EPS) return 0;\n//     return (a < 0) ? -1 : 1;\n// }\nstruct Pt2 {\n    D x, y;\n    Pt2() {}\n    Pt2(D _x, D _y) : x(_x), y(_y) {}\n    Pt2 operator+(const Pt2 &r) const { return Pt2(x+r.x, y+r.y); }\n    Pt2 operator-(const Pt2 &r) const { return Pt2(x-r.x, y-r.y); }\n    Pt2 operator*(const Pt2 &r) const { return Pt2(x*r.x-y*r.y, x*r.y+y*r.x); }\n\n    Pt2 operator*(const D &r) const { return Pt2(x*r, y*r); }\n    Pt2 operator/(const D &r) const { return Pt2(x/r, y/r); }\n\n    Pt2& operator+=(const Pt2 &r) { return *this=*this+r; }\n    Pt2& operator-=(const Pt2 &r) { return *this=*this-r; }\n    Pt2& operator*=(const Pt2 &r) { return *this=*this*r; }\n    Pt2& operator*=(const D &r) { return *this=*this*r; }\n    Pt2& operator/=(const D &r) { return *this=*this/r; }\n    \n    Pt2 operator-() const { return Pt2(-x, -y); }\n\n    bool operator<(const Pt2 &r) const { return 2*sgn(x, r.x)+sgn(y, r.y)<0; }\n    bool operator==(const Pt2 &r) const { return sgn((*this-r).rabs()) == 0; }\n\n    D norm() const { return x*x + y*y; }\n    D abs() const { return sqrt(norm()); }\n    D rabs() const { return max(std::abs(x), std::abs(y)); } // robust abs\n    D arg() const { return atan2(y, x); }\n\n    pair<D, D> to_pair() const { return make_pair(x, y); }\n    static Pt2 polar(D le, D th) { return Pt2(le*cos(th), le*sin(th)); }\n};\nostream& operator<<(ostream& os, const Pt2 &p) {\n    return os << \"P(\" << p.x << \", \" << p.y << \")\";\n}\nusing P = Pt2;\n\nstruct L {\n    P s, t;\n    L() {}\n    L(P _s, P _t) : s(_s), t(_t) {}\n    P vec() const { return t-s; }\n    D abs() const { return vec().abs(); }\n    D arg() const { return vec().arg(); }\n};\nostream& operator<<(ostream& os, const L &l) {\n    return os << \"L(\" << l.s << \", \" << l.t << \")\";\n}\n\nD cross(P a, P b) { return a.x*b.y - a.y*b.x; }\nD dot(P a, P b) { return a.x*b.x + a.y*b.y; }\n// cross(a, b) is too small?\nint sgncrs(P a, P b) {\n    D cr = cross(a, b);\n    if (abs(cr) <= (a.rabs() + b.rabs()) * EPS) return 0;\n    return (cr < 0) ? -1 : 1;\n}\n\n// -2, -1, 0, 1, 2 : front, clock, on, cclock, back\nint ccw(P b, P c) {\n    int s = sgncrs(b, c);\n    if (s) return s;\n    if (!sgn(c.rabs()) || !sgn((c-b).rabs())) return 0;\n    if (dot(b, c) < 0) return 2;\n    if (dot(-b, c-b) < 0) return -2;\n    return 0;\n}\nint ccw(P a, P b, P c) { return ccw(b-a, c-a); }\nint ccw(L l, P p) { return ccw(l.s, l.t, p); }\n\nP project(const L &l, const P &p) {\n    P v = l.vec();\n    return l.s + v * (dot(v, p-l.s) / (v.x*v.x + v.y*v.y));\n}\n\nint crossLL(const L &l, const L &m, P &r) {\n    D cr1 = cross(l.vec(), m.vec()), cr2 = cross(l.vec(), l.t - m.s);\n    if (sgncrs(l.vec(), m.vec()) == 0) {\n        r = l.s;\n        if (sgncrs(l.vec(), l.t - m.s)) return 0;\n        return -1;\n    }\n    r = m.s + m.vec() * (cr2 / cr1);\n    return 1;\n}\n\nD distLP(const L &l, const P &p) {\n    return abs(cross(l.vec(), p-l.s)) / l.abs();\n}\n\nD distSP(const L &s, const P &p) {\n    P s2 = s.vec() * P(0, 1);\n    if (ccw(s.s, s.s+s2, p) == 1) return (s.s-p).abs();\n    if (ccw(s.t, s.t+s2, p) == -1) return (s.t-p).abs();\n    return distLP(s, p);\n}\n\nbool insSS(const L &s, const L &t) {\n    int a = ccw(s, t.s), b = ccw(s, t.t);\n    int c = ccw(t, s.s), d = ccw(t, s.t);\n    if (a*b <= 0 && c*d <= 0) return true;\n    return false;\n}\n\nD distSS(const L &s, const L &t) {\n    if (insSS(s, t)) return 0;\n    return min({distSP(s, t.s), distSP(s, t.t),\n        distSP(t, s.s), distSP(t, s.t)});\n}\n\nint main() {\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    cout << setprecision(20) << fixed;\n    \n    int q;\n    cin >> q;\n    for (int ph = 0; ph < q; ph++) {\n        L l, m;\n        D x, y;\n        cin >> x >> y; l.s = P(x, y);\n        cin >> x >> y; l.t = P(x, y);\n        cin >> x >> y; m.s = P(x, y);\n        cin >> x >> y; m.t = P(x, y);\n        cout << distSS(l, m) << endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define REP(i,a,b) for(int i=a;i<b;i++)\n#define rep(i,n) REP(i,0,n)\n\ntypedef complex<double> P;\nstruct Line : public vector<P>\n{\n  Line(P a=P(), P b=P()) {\n    push_back(a); push_back(b);\n  }\n};\ntypedef Line Segment;\n\n#define EPS (1e-9)\n\nbool operator < (P const& a, P const& b) {\n  return (a.real() != a.real()) ? a.real() < b.real() : a.imag() < b.imag();\n}\n\ndouble dot(P const& a, P const& b) {\n  return real(conj(a)*b);\n}\n\ndouble cross(P const& a, P const& b) {\n  return imag(conj(a)*b);\n}\n\nP projection_point(P const& a, P const& b, P const& c) {\n  double k = dot(b-a, c-a) / norm(b-a);\n  return a+k*(b-a);\n}\n\nP reflection_point(P const& a, P const& b, P const& c) {\n  return c + 2.*(projection_point(a, b, c) - c);\n}\n\nbool is_parallel(Segment const& s, Segment const& t) {\n  return abs(cross(s[1]-s[0], t[1]-t[0])) < EPS;\n}\n\nbool is_orthogonal(Segment const& s, Segment const& t) {\n  return abs(dot(s[1]-s[0], t[1]-t[0])) < EPS;\n}\n\nint ccw(P a, P b, P c) {\n  b -= a, c -= a;\n  if(cross(b, c) > 0) return +1; // counter clockwise\n  if(cross(b, c) < 0) return -1;  // clockwise\n  if(dot(b, c) < 0) return +2;    // c-a-b\n  if(norm(b) < norm(c)) return -2;  // a-b-c\n  return 0; // on segment\n}\n\nbool is_intersect_ss(Segment const& s, Segment const& t) {\n  return ccw(s[0], s[1], t[0]) * ccw(s[0], s[1], t[1]) <= 0\n         && ccw(t[0], t[1], s[0]) * ccw(t[0], t[1], s[1]) <= 0;\n}\n\nP crosspoint_ss(Segment const& s, Segment const& t) {\n  P bline = t[1]-t[0];\n  double d1 = abs(cross(bline, s[0]-t[0])), d2 = abs(cross(bline, s[1]-t[0]));\n  return s[0] + d1/(d1+d2) * (s[1]-s[0]);\n}\n\nbool is_point_onsegment(Segment const& s, P const& p) {\n  return abs(s[0]-p)+abs(s[1]-p)-abs(s[1]-s[0]) < EPS;\n}\n\ndouble distance_sp(Segment const& s, P const& p) {\n  P q = projection_point(s[0], s[1], p);\n  if(is_point_onsegment(s, p)) return abs(p-q);\n  return min(abs(s[0]-p), abs(s[1]-p));\n}\n\ndouble distance_ss(Segment const& s, Segment const& t) {\n  if(is_intersect_ss(s, t)) return 0.; // 交差は距離 0\n  return min(min(distance_sp(t, s[0]), distance_sp(t, s[1])),\n             min(distance_sp(s, t[0]), distance_sp(s, t[1])));\n}\n\nint main () {\n  \n  int q; cin >> q;\n  for(;q--;) {\n    Segment s, t;\n    cin >> s[0].real() >> s[0].imag();\n    cin >> s[1].real() >> s[1].imag();\n    cin >> t[0].real() >> t[0].imag();\n    cin >> t[1].real() >> t[1].imag();\n    \n    printf(\"%.15f\\n\", distance_ss(s, t));\n  }\n  \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "/**\n * @copyright (c) 2020 Daisuke Hashimoto\n */\n\n#include <cstdint>\n#include <iostream>\n#include <cmath>\n#include <iomanip>\n\nvoid CallLineSegmentDistance(std::istream &input_stream) noexcept;\n\nclass Point2D {\n public:\n  Point2D() noexcept;\n  Point2D(const double x, const double y) noexcept;\n  ~Point2D() noexcept;\n  Point2D(const Point2D &obj) noexcept;\n  Point2D &operator=(const Point2D &obj) noexcept;\n  Point2D(Point2D &&obj) noexcept;\n  Point2D &operator=(Point2D &&obj) noexcept;\n\n  Point2D operator+(const Point2D &rhs) const noexcept;\n  Point2D operator-(const Point2D &rhs) const noexcept;\n  Point2D operator*(const double rhs) const noexcept;\n  double InnerProduct(const Point2D &rhs) const noexcept;\n  double OuterProduct(const Point2D &rhs) const noexcept;\n  double SquareSum() const noexcept;\n  double Norm() const noexcept;\n\n  double X() const noexcept;\n  double Y() const noexcept;\n\n private:\n  double x_;\n  double y_;\n};\n\nclass Line {\n public:\n  Line(const Point2D &p1, const Point2D &p2) noexcept;\n  ~Line() noexcept;\n  bool IsParallel(const Line &rhs) const noexcept;\n  bool IsOrthogonal(const Line &rhs) const noexcept;\n  bool IsOnLine(const Point2D &point) const noexcept;\n  bool operator==(const Line &rhs) const noexcept;\n  bool operator!=(const Line &rhs) const noexcept;\n  Point2D ProjectPoint(const Point2D &point) const;\n  Point2D ReflectPoint(const Point2D &point) const;\n\n  bool SegmentsAreCrossing(const Line &line) const;\n  double GetLineSegmentDistanceFromPoint(const Point2D &point) const;\n  double GetLineSegmentDistance(const Line &line) const;\n\n private:\n  Line() = delete;\n  Line(const Line &obj) = delete;\n  Line &operator=(const Line &obj) = delete;\n  Line(Line &&obj) = delete;\n  Line &operator=(Line &&obj) = delete;\n\n private:\n  Point2D p1_;\n  Point2D p2_;\n};\n\nvoid CallLineSegmentDistance(std::istream &input_stream) noexcept {\n  input_stream.tie(0);\n  std::ios::sync_with_stdio(false);\n  int32_t number_of_queries;\n  input_stream >> number_of_queries;\n  for (int32_t i = 0; i < number_of_queries; ++i) {\n    int32_t p0_x, p0_y, p1_x, p1_y, p2_x, p2_y, p3_x, p3_y;\n    input_stream >> p0_x >> p0_y >> p1_x >> p1_y >> p2_x >> p2_y >> p3_x >> p3_y;\n    Line line1(Point2D(p0_x, p0_y), Point2D(p1_x, p1_y));\n    Line line2(Point2D(p2_x, p2_y), Point2D(p3_x, p3_y));\n    std::cout << std::setprecision(20) << line1.GetLineSegmentDistance(line2) << std::endl;\n  }\n}\n\n// *************************************\nPoint2D::Point2D() noexcept : x_(0.0), y_(0.0) {}\n\nPoint2D::Point2D(const double x, const double y) noexcept : x_(x), y_(y) {}\n\nPoint2D::~Point2D() noexcept {}\n\nPoint2D::Point2D(const Point2D &obj) noexcept : x_(obj.x_), y_(obj.y_) {}\n\nPoint2D &Point2D::operator=(const Point2D &rhs) noexcept {\n  if (this != &rhs) {\n    this->x_ = rhs.x_;\n    this->y_ = rhs.y_;\n  }\n  return *this;\n}\n\nPoint2D::Point2D(Point2D &&obj) noexcept : x_(obj.x_), y_(obj.y_) {}\n\nPoint2D &Point2D::operator=(Point2D &&rhs) noexcept {\n  if (this != &rhs) {\n    this->x_ = rhs.x_;\n    this->y_ = rhs.y_;\n  }\n  return *this;\n}\n\nPoint2D Point2D::operator+(const Point2D &rhs) const noexcept {\n  Point2D point(this->x_ + rhs.x_, this->y_ + rhs.y_);\n  return point;\n}\n\nPoint2D Point2D::operator-(const Point2D &rhs) const noexcept {\n  Point2D point(this->x_ - rhs.x_, this->y_ - rhs.y_);\n  return point;\n}\n\nPoint2D Point2D::operator*(const double rhs) const noexcept {\n  Point2D point(this->x_ * rhs, this->y_ * rhs);\n  return point;\n}\n\ndouble Point2D::X() const noexcept {\n  return x_;\n}\n\ndouble Point2D::Y() const noexcept {\n  return y_;\n}\n\ndouble Point2D::InnerProduct(const Point2D &rhs) const noexcept {\n  return ((this->x_ * rhs.x_) + (this->y_ * rhs.y_));\n}\ndouble Point2D::OuterProduct(const Point2D &rhs) const noexcept {\n  return ((this->x_ * rhs.y_) - (this->y_ * rhs.x_));\n}\n\ndouble Point2D::SquareSum() const noexcept {\n  return (x_ * x_ + y_ * y_);\n}\n\ndouble Point2D::Norm() const noexcept {\n  return sqrt(SquareSum());\n}\n\n// ************************************************\n\nLine::Line(const Point2D &p1, const Point2D &p2) noexcept : p1_(p1), p2_(p2) {}\n\nLine::~Line() noexcept {}\n\nbool Line::IsParallel(const Line &rhs) const noexcept {\n  const Point2D this_direction = this->p2_ - this->p1_;\n  const Point2D rhs_direction = rhs.p2_ - rhs.p1_;\n  const double outer_product = this_direction.OuterProduct(rhs_direction);\n  constexpr double kEps = 0.0000001;\n  const bool is_parallel = (abs(outer_product) < kEps);\n  return is_parallel;\n}\n\nbool Line::IsOrthogonal(const Line &rhs) const noexcept {\n  const Point2D this_direction = this->p2_ - this->p1_;\n  const Point2D rhs_direction = rhs.p2_ - rhs.p1_;\n  constexpr double kEps = 0.0000001;\n  const double inner_product = this_direction.InnerProduct(rhs_direction);\n  const bool is_parallel = (abs(inner_product) < kEps);\n  return is_parallel;\n}\n\nbool Line::IsOnLine(const Point2D &point) const noexcept {\n  const Line line1(point, p1_);\n  const Line line2(point, p2_);\n  const bool is_on_line = line1.IsParallel(line2);\n  return is_on_line;\n}\n\nbool Line::operator==(const Line &rhs) const noexcept {\n  return (IsOnLine(rhs.p1_) && IsOnLine(rhs.p2_));\n}\n\nbool Line::operator!=(const Line &rhs) const noexcept {\n  return !(*this == rhs);\n}\n\nPoint2D Line::ProjectPoint(const Point2D &point) const {\n  const Point2D p2_from_p1 = p2_ - p1_;\n  const Point2D point_from_p1 = point - p1_;\n  const double square_sum = p2_from_p1.SquareSum();\n  constexpr double kEps = 0.0000001;\n  if (abs(square_sum) < kEps) {\n    std::cerr << \"ERROR: Line::ProjectPoint()\" << std::endl;\n    throw 1;\n  }\n  const double coefficient = p2_from_p1.InnerProduct(point_from_p1) / square_sum;\n  const Point2D projected_point = p1_ + (p2_from_p1 * coefficient);\n  return projected_point;\n}\n\nPoint2D Line::ReflectPoint(const Point2D &point) const {\n  Point2D reflected_point;\n  try {\n    const Point2D projected_point = ProjectPoint(point);\n    reflected_point = point + ((projected_point - point) * 2.0);\n  } catch (...) {\n    std::cerr << \"ERROR: ReflectPoint()\" << std::endl;\n  }\n  return reflected_point;\n}\n\ndouble Line::GetLineSegmentDistanceFromPoint(const Point2D &point) const {\n  double distance;\n  try {\n    const Point2D projected_point_from_point1 = ProjectPoint(point) - p1_;\n    const Point2D point2_from_point1 = p2_ - p1_;\n    bool projected_point_is_inside = ((projected_point_from_point1.SquareSum() <= point2_from_point1.SquareSum()) &&\n                                      (projected_point_from_point1.InnerProduct(point2_from_point1) >= 0.0));\n    if (projected_point_is_inside) {\n      const Point2D r = ProjectPoint(point) - point;\n      distance = r.Norm();\n    } else {\n      const Point2D diff1 = point - p1_;\n      const Point2D diff2 = point - p2_;\n      distance = fmin(diff1.Norm(), diff2.Norm());\n    }\n  } catch (...) {\n    std::cerr << \"ERROR: GetLineSegmentDistanceFromPoint()\" << std::endl;\n    throw 1;\n  }\n  return distance;\n}\n\ndouble Line::GetLineSegmentDistance(const Line &line) const {\n  double line_segment_distance;\n  try {\n    if (SegmentsAreCrossing(line)) {\n      line_segment_distance = 0.0;\n    } else {\n      line_segment_distance =\n          fmin(fmin(GetLineSegmentDistanceFromPoint(line.p1_), GetLineSegmentDistanceFromPoint(line.p2_)),\n               fmin(line.GetLineSegmentDistanceFromPoint(p1_), line.GetLineSegmentDistanceFromPoint(p2_)));\n    }\n  } catch (...) {\n    std::cerr << \"ERROR: GetLineSegmentDistance()\" << std::endl;\n  }\n  return line_segment_distance;\n}\n\nbool Line::SegmentsAreCrossing(const Line &line) const {\n  const Point2D r1 = p2_ - p1_;\n  const Point2D diff1_1 = line.p1_ - p1_;\n  const Point2D diff1_2 = line.p2_ - p1_;\n  const bool temp_1 = ((r1.OuterProduct(diff1_1) * r1.OuterProduct(diff1_2)) < 0.0);\n\n  const Point2D r2 = line.p2_ - line.p1_;\n  const Point2D diff2_1 = p1_ - line.p1_;\n  const Point2D diff2_2 = p2_ - line.p1_;\n  const bool temp_2 = ((r2.OuterProduct(diff2_1) * r2.OuterProduct(diff2_2)) < 0.0);\n  return (temp_1 && temp_2);\n}\n\nint main(int argc, char *argv[]) {\n  try {\n    CallLineSegmentDistance(std::cin);\n  } catch (...) {\n    std::cerr << \"ERROR: main()\" << std::endl;\n  }\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n#include <iostream>\n#include <cmath>\n#include <iomanip>\nusing namespace std;\n\nclass Point {\n public:\n  double x, y;\n\n  Point(double x = 0, double y = 0): x(x), y(y) {}\n\n  Point operator + (Point p) { return Point(x + p.x, y + p.y); }\n  Point operator - (Point p) { return Point(x - p.x, y - p.y); }\n  Point operator * (double a) { return Point(a * x, a * y); }\n  Point operator / (double a) { return Point(x / a, y / a); }\n\n  double abs() { return sqrt(norm()); }\n  double norm() {return x * x + y * y; }\n\n  bool operator < (const Point &p) const {\n    return x != p.x ? x < p.x : y < p.y;\n  }\n\n  bool operator == (const Point &p) const {\n    return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n  }\n\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b) {\n  return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n  return a.x * b.y - a.y * b.x;\n}\n\nstruct Segment {\n  Point p1, p2;\n};\n\ntypedef Segment Line;\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nint ccw(Point p0, Point p1, Point p2) {\n  Vector a = p1 - p0;\n  Vector b = p2 - p0;\n  if (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n  if (cross(a, b) < -EPS) return CLOCKWISE;\n  if (dot(a, b) < -EPS) return ONLINE_BACK;\n  if (a.norm() < b.norm()) return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\n\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n  return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n          ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\n\nbool intersect(Segment s1, Segment s2) {\n  return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\ndouble getDistance(Point p1, Point p2) {\n  return (p2 - p1).abs();\n}\n\ndouble getDistanceLP(Line l, Point p) {\n  return abs(cross(l.p2 - l.p1, p - l.p1) / (l.p2 - l.p1).abs());\n}\n\ndouble getDistanceSP(Segment s, Point p) {\n  if (dot(s.p2 - s.p1, p - s.p1) < 0.0) return (p - s.p1).abs();\n  if (dot(s.p1 - s.p2, p - s.p2) < 0.0) return (p - s.p2).abs();\n  return getDistanceLP(s, p);\n}\n\ndouble getDistance(Segment s1, Segment s2) {\n  if (intersect(s1, s2)) return 0.0;\n  return min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n             min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\nint main() {\n  int n;\n  cin >> n;\n  Segment s1, s2;\n  cout << fixed;\n  for (int i = 0; i < n; i++) {\n    cin >> s1.p1.x >> s1.p1.y >> s1.p2.x >> s1.p2.y;\n    cin >> s2.p1.x >> s2.p1.y >> s2.p2.x >> s2.p2.y;\n    cout << setprecision(10) << getDistance(s1, s2) << endl;\n  }\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <algorithm>\n#include <cfloat>\n#include <cmath>\n#include <iostream>\n#include <queue>\n#include <stack>\n#include <string>\n#include <vector>\ntypedef long long int          ll;\ntypedef unsigned long long int ull;\n#define BIG_NUM 2000000000\n#define MOD 1000000007\n#define EPS 0.000000001\nusing namespace std;\n\nstruct Point {\n    double x, y;\n};\n\ntypedef Point Vector;\n\nstruct Segment {\n    void set(double x1, double y1, double x2, double y2) {\n        p1.x = x1;\n        p1.y = y1;\n        p2.x = x2;\n        p2.y = y2;\n    }\n    Point p1, p2;\n};\n\ntypedef Segment Line;\n\nint func(double x1, double y1, double x2, double y2, double xp, double yp) {\n    double naiseki, norm1, norm2, gaiseki;\n    norm1   = sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n    norm2   = sqrt((xp - x1) * (xp - x1) + (yp - y1) * (yp - y1));\n    naiseki = (xp - x1) * (x2 - x1) + (yp - y1) * (y2 - y1);\n    gaiseki = (x2 - x1) * (yp - y1) - (xp - x1) * (y2 - y1);\n    if (gaiseki > EPS) {\n        return 1;\n    } else if (gaiseki < -EPS) {\n        return -1;\n    }\n    if (naiseki < -EPS) {\n        return 2;\n    }\n\n    if (norm1 < norm2) {\n        return -2;\n    }\n    return 0;\n}\n\ndouble cross(Vector a, Vector b) { return a.x * b.y - a.y * b.x; }\n\ndouble dot(Vector a, Vector b) { return a.x * b.x + a.y * b.y; }\n\nPoint calc_minus(Point a, Point b) {\n    Point ret;\n\n    ret.x = a.x - b.x;\n    ret.y = a.y - b.y;\n\n    return ret;\n}\n\ndouble calc_len(Vector a) { return sqrt(a.x * a.x + a.y * a.y); }\n\ndouble getDistanceLP(Line l, Point p) {\n    return fabs(cross(calc_minus(l.p2, l.p1), calc_minus(p, l.p1)) /\n                calc_len(calc_minus(l.p2, l.p1)));\n}\n\ndouble getDistanceSP(Segment s, Point p) {\n    if (dot(calc_minus(s.p2, s.p1), calc_minus(p, s.p1)) < 0.0)\n        return calc_len(calc_minus(p, s.p1));\n    if (dot(calc_minus(s.p1, s.p2), calc_minus(p, s.p2)) < 0.0)\n        return calc_len(calc_minus(p, s.p2));\n    return getDistanceLP(s, p);\n}\n\ndouble getDistance(Segment s1, Segment s2) {\n    return min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n               min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\nint main() {\n    double x1, x2, x3, x4, y1, y2, y3, y4;\n    int    q;\n    scanf(\"%d\", &q);\n\n    for (int i = 0; i < q; i++) {\n        scanf(\"%lf %lf %lf %lf %lf %lf %lf %lf\", &x1, &y1, &x2, &y2, &x3, &y3,\n              &x4, &y4);\n\n        if (func(x1, y1, x2, y2, x3, y3) * func(x1, y1, x2, y2, x4, y4) <= 0 &&\n            func(x3, y3, x4, y4, x1, y1) * func(x3, y3, x4, y4, x2, y2) <= 0) {\n            printf(\"0.0000000000\\n\");\n            continue;\n        }\n\n        Segment s1, s2;\n        s1.set(x1, y1, x2, y2);\n        s2.set(x3, y3, x4, y4);\n\n        printf(\"%.10lf\\n\", getDistance(s1, s2));\n    }\n\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n \nusing namespace std;\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nstruct Point{\n  double x,y;\n  Point(){}\n  Point(double x,double y) :x(x),y(y){}\n  Point operator + (Point p) {return Point(x+p.x,y+p.y);}\n  Point operator - (Point p) {return Point(x-p.x,y-p.y);}\n  Point operator * (double k) {return Point(x*k,y*k);}\n  Point operator / (double k) {return Point(x/k,y/k);}\n  double norm(){return x*x+y*y;}\n  double abs(){return sqrt(norm());}\n\n  bool operator < (const Point &p) const{\n    return x!=p.x ? x < p.x : y < p.y;\n  }\n\n  bool operator == (const Point &p) const{\n    return fabs(x-p.x) < EPS && fabs(y-p.y) < EPS;\n  }\n};\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\nstruct Segment{\n  Point p1,p2;\n  Segment(){}\n  Segment(Point p1, Point p2):p1(p1),p2(p2){}\n};\ntypedef Segment Line;\n\nstruct Circle{\n  Point c;\n  double r;\n  Circle(Point c,double r):c(c),r(r){}\n};\n\ndouble norm(Vector a){\n  return a.x*a.x+a.y*a.y;\n}\ndouble abs(Vector a){\n  return sqrt(norm(a));\n}\ndouble dot(Vector a,Vector b){\n  return a.x*b.x+a.y*b.y;\n}\ndouble cross(Vector a,Vector b){\n  return a.x*b.y-a.y*b.x;\n}\n\nbool isOrthogonal(Vector a,Vector b){\n  return equals(dot(a,b),0.0);\n}\n\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n  return isOrthogonal(a1-a2,b1-b2);\n}\n\nbool isOrthogonal(Segment s1,Segment s2){\n  return equals(dot(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n\nbool isParallel(Vector a,Vector b){\n  return equals(cross(a,b),0.0);\n}\n\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n  return isParallel(a1-a2,b1-b2);\n}\n\nbool isParallel(Segment s1,Segment s2){\n  return equals(cross(s1.p2-s1.p1,s2.p2-s2.p1),0.0); \n}\n\nPoint project(Segment s,Point p){\n  Vector base=s.p2-s.p1;\n  double r=dot(p-s.p1,base)/norm(base);\n  return s.p1+base*r;\n}\n\nPoint reflect(Segment s,Point p){\n  return p+(project(s,p)-p)*2.0;\n}\n\nint ccw(Point p0,Point p1,Point p2){\n  Vector a = p1-p0;\n  Vector b = p2-p0;\n  if(cross(a,b) > EPS) return COUNTER_CLOCKWISE;\n  if(cross(a,b) < -EPS) return CLOCKWISE;\n  if(dot(a,b) < -EPS) return ONLINE_BACK;\n  if(a.norm()<b.norm()) return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\n\nbool intersect(Point p1,Point p2,Point p3,Point p4){\n  return (ccw(p1,p2,p3)*ccw(p1,p2,p4) <= 0 &&\n\t  ccw(p3,p4,p1)*ccw(p3,p4,p2) <= 0 );\n}\n\nbool intersect(Segment s1,Segment s2){\n  return intersect(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n\ndouble getDistanceLP(Line l,Point p){\n  return abs(cross(l.p2-l.p1,p-l.p1)/abs(l.p2-l.p1));\n}\n\ndouble getDistanceSP(Segment s,Point p){\n  if(dot(s.p2-s.p1,p-s.p1) < 0.0 ) return abs(p-s.p1);\n  if(dot(s.p1-s.p2,p-s.p2) < 0.0 ) return abs(p-s.p2);\n  return getDistanceLP(s,p);\n}\n\ndouble getDistance(Segment s1,Segment s2){\n  if(intersect(s1,s2)) return 0.0;\n  return min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),\n\t     min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n}\n\ndouble getDistance(Point p0,Point p1,Point p2,Point p3){\n  return getDistance(Segment(p0,p1),Segment(p2,p3));\n}\n\nPoint getCrossPoint(Segment s1,Segment s2){\n  Vector base=s2.p2-s2.p1;\n  double d1=abs(cross(base,s1.p1-s2.p1));\n  double d2=abs(cross(base,s1.p2-s2.p1));\n  double t=d1/(d1+d2);\n  return s1.p1+(s1.p2-s1.p1)*t;\n}\n\nPoint getCrossPoint(Point p0,Point p1,Point p2,Point p3){\n  return getCrossPoint(Segment(p0,p1),Segment(p2,p3));\n}\n\npair<Point,Point> getCrossPoints(Circle c,Line l){\n  Vector pr=project(l,c.c);\n  Vector e=(l.p2-l.p1)/abs(l.p2-l.p1);\n  double base=sqrt(c.r*c.r-norm(pr-c.c));\n  return make_pair(pr+e*base,pr-e*base);\n}\n\n\ndouble arg(Vector p){\n  return atan2(p.y,p.x);\n}\n\nVector polar(double a,double r){\n  return Point(cos(r)*a,sin(r)*a);\n}\n\npair<Point,Point> getCrossPoints(Circle c1,Circle c2){\n  double d=abs(c1.c-c2.c);\n  double a=acos((c1.r*c1.r+d*d-c2.r*c2.r)/(2*c1.r*d));\n  double t=arg(c2.c-c1.c);\n  return make_pair(c1.c+polar(c1.r,t+a),c1.c+polar(c1.r,t-a));\n}\n\nint contains(Polygon g,Point p){\n  int n=g.size();\n  bool x=false;\n  for(int i=0;i<n;i++){\n    Point a=g[i]-p,b=g[(i+1)%n]-p;\n    if(fabs(cross(a,b)) < EPS && dot(a,b) < EPS) return 1;\n    if(a.y>b.y) swap(a,b);\n    if(a.y < EPS && EPS < b.y && cross(a,b) > EPS ) x = !x;\n  }\n  return (x?2:0);\n}\n\nPolygon andrewScan(Polygon s){\n  Polygon u,l;\n  if(s.size()<3) return s;\n  sort(s.begin(),s.end());\n  u.push_back(s[0]);\n  u.push_back(s[1]);\n  l.push_back(s[s.size()-1]);\n  l.push_back(s[s.size()-2]);\n  for(int i=2;i<s.size();i++){\n    for(int n=u.size();n>=2&&ccw(u[n-2],u[n-1],s[i]) != CLOCKWISE;n--){\n      u.pop_back();\n    }\n    u.push_back(s[i]);\n  } \n  for(int i=s.size()-3;i>=0;i--){\n    for(int n=l.size();n>=2&&ccw(l[n-2],l[n-1],s[i]) != CLOCKWISE;n--){\n      l.pop_back();\n    }\n    l.push_back(s[i]);\n  }\n  reverse(l.begin(),l.end());\n  for(int i=u.size()-2;i>=1;i--) l.push_back(u[i]);\n  return l;\n}\n\nint main(){\n  int n;cin>>n;\n  double x0,y0,x1,y1,x2,y2,x3,y3;\n  while(n--){\n    cin>>x0>>y0>>x1>>y1>>x2>>y2>>x3>>y3;\n    Point p0=Point(x0,y0),p1=Point(x1,y1),p2=Point(x2,y2),p3=Point(x3,y3);\n    printf(\"%.8lf\\n\",getDistance(p0,p1,p2,p3)); \n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<complex>\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\ntypedef complex<long double> P;\n\n// ??§????????°INF\n#define INF (1e16)\n// ?¨±?????????????????\n#define EPS (1e-16)\n// 2??????????????????????????????????????????\n#define EQ(a,b) (abs((a)-(b)) < EPS)\n// 2??????????????????????????????????????????\n#define EQV(a,b) ( EQ((a).real(), (b).real()) && EQ((a).imag(), (b).imag()) )\n\n// ?????? (dot product) : a???b = |a||b|cos??\nlong double dot(P a, P b) {\n\treturn (a.real() * b.real() + a.imag() * b.imag());\n}\n\n// ?????? (cross product) : a??b = |a||b|sin??\nlong double cross(P a, P b) {\n\treturn (a.real() * b.imag() - a.imag() * b.real());\n}\n\n// ?????????????????????\nint is_intersected_ls(P a1, P a2, P b1, P b2) {\n\treturn (cross(a2 - a1, b1 - a1) * cross(a2 - a1, b2 - a1) < EPS) &&\n\t\t(cross(b2 - b1, a1 - b1) * cross(b2 - b1, a2 - b1) < EPS);\n}\n\n// 2??´?????????????????? : a//b <=> cross(a, b) = 0\nint is_parallel(P a1, P a2, P b1, P b2) {\n\treturn EQ(cross(a1 - a2, b1 - b2), 0.0);\n}\n\n// ???c?????????a,b????????????????????????(1)\nint is_point_on_line(P a, P b, P c) {\n\treturn EQ(cross(b - a, c - a), 0.0) &&\n\t\t(dot(b - a, c - a) > -EPS) &&\n\t\t(dot(a - b, c - b) > -EPS);\n}\n\n// a1,a2???????????¨??????????????¨b1,b2???????????¨??????????????????????¨????\nP intersection_ls(P a1, P a2, P b1, P b2) {\n\tP b = b2 - b1;\n\tlong double d1 = abs(cross(b, a1 - b1));\n\tlong double d2 = abs(cross(b, a2 - b1));\n\tlong double t = d1 / (d1 + d2);\n\n\treturn a1 + (a2 - a1) * t;\n}\n\n\n// ???a,b???????????¨??????????????¨???c??¨????????¢\nlong double distance_ls_p(P a, P b, P c) {\n\tif (dot(b - a, c - a) < EPS) return abs(c - a);\n\tif (dot(a - b, c - b) < EPS) return abs(c - b);\n\treturn abs(cross(b - a, c - a)) / abs(b - a);\n}\n\nint main() {\n\tint q; cin >> q;\n\tfor (int i = 0; i < q; i++) {\n\t\tlong double x0, y0, x1, y1, x2, y2, x3, y3;\n\t\tcin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n\t\tP p0(x0, y0), p1(x1, y1), p2(x2, y2), p3(x3, y3);\n\t\tif (is_intersected_ls(p0, p1, p2, p3)) {\n\t\t\tcout.precision(20);\n\t\t\tcout << showpoint << 0.00000000000 << endl;\n\t\t\tcontinue;\n\t\t}\n\t\tlong double d0 = min(distance_ls_p(p0, p1, p2), distance_ls_p(p0, p1, p3));\n\t\tlong double d1 = min(distance_ls_p(p2, p3, p0), distance_ls_p(p2, p3, p1));\n\t\tlong double ans =min(d0,d1) ;\n\n\t\tcout.precision(20);\n\t\tcout << showpoint << ans << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<iomanip>\n#include<algorithm>\n#define _USE_MATH_DEFINES\n#include<math.h>\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS )\nusing namespace std;\n\nclass Point {\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0) :x(x), y(y) {}\n\tPoint operator + (Point p) {\n\t\treturn Point(x + p.x, y + p.y); \n\t}\n\tPoint operator - (Point p) {\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n\tPoint operator * (double a) {\n\t\treturn Point(a * x, a * y);\n\t}\n\tPoint operator / (double a) {\n\t\treturn Point(x / a, y / a);\n\t}\n\n\tdouble abs() {\n\t\treturn sqrt(norm());\n\t}\n\tdouble norm() {\n\t\treturn x * x + y * y;\n\t}\n\n\tbool operator < (const Point &p)const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p)const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b) {\n\treturn a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n\treturn a.x * b.y - a.y * b.x;\n}\n\ndouble getDistanceSP(Point p, Point p1, Point p2) {\n\tif (dot(p - p1, p2 - p1) < 0.0)return (p - p1).abs();\n\telse if (dot(p - p2, p1 - p2) < 0.0)return (p - p2).abs();\n\telse return  fabs(cross(p2 - p1, p - p1)) / (p2 - p1).abs();\n}\n\n\ndouble angle(Vector a, Vector b) {\n\treturn acos(dot(a, b) / a.abs() / b.abs());\n}\n\nbool doIntersect(Point p1, Point p2, Point p3, Point p4) {\n\tif (angle(p3 - p1, p4 - p1) >= angle(p3 - p1, p2 - p1) && angle(p2 - p3, p1 - p3) >= angle(p2 - p3, p4 - p3))return true;\n\telse if (angle(p3 - p2, p4 - p2) >= angle(p3 - p2, p1 - p2) && angle(p1 - p3, p2 - p3) >= angle(p1 - p3, p4 - p3))return true;\n\telse return false;\n}\n\ndouble getDistanceSS(Point p1, Point p2, Point p3, Point p4) {\n\tif (doIntersect(p1, p2, p3, p4))return 0;\n\telse return min({ getDistanceSP(p4, p1, p2), getDistanceSP(p3, p1, p2), getDistanceSP(p1, p3, p4), getDistanceSP(p2, p3, p4) });\n}\n\nint main() {\n    int i, q;\n\tdouble x1, x2, x3, x4, y1, y2, y3, y4;\n\tPoint ans;\n\tcin >> q;\n\tfor (i = 0; i < q; i++) {\n\t\tcin >> x1 >> y1 >> x2 >> y2 >> x3 >> y3 >> x4 >> y4;\n\t\tPoint p1(x1, y1), p2(x2, y2), p3(x3, y3), p4(x4, y4);\n\t\tcout << setprecision(15) << getDistanceSS(p1, p2, p3, p4) << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ntemplate <class T> inline bool chmax(T &a, T b) {\n    if(a < b) {\n        a = b;\n        return 1;\n    }\n    return 0;\n}\ntemplate <class T> inline bool chmin(T &a, T b) {\n    if(a > b) {\n        a = b;\n        return 1;\n    }\n    return 0;\n}\ntypedef long long int ll;\n\n#define ALL(v) (v).begin(), (v).end()\n#define RALL(v) (v).rbegin(), (v).rend()\n#define endl \"\\n\"\nconst double EPS = 1e-10;\nconst int INF = 1 << 30;\nconst ll LLINF = 1LL << 60;\nconst double PI = acos(-1);\nconst int MOD = 1000000007;\nconst int dx[4] = {1, 0, -1, 0};\nconst int dy[4] = {0, 1, 0, -1};\n\n//-------------------------------------\n\nnamespace geometry {\n// Point : 複素数型を位置ベクトルとして扱う\n// 実軸(real)をx軸、挙軸(imag)をy軸として見る\nusing Point = complex<double>;\n\ninline bool equal(const double &a, const double &b) {\n    return fabs(a - b) < EPS;\n}\n\n// 単位ベクトル(unit vector)を求める\nPoint unitVector(const Point &a) { return a / abs(a); }\n\n// 法線ベクトル(normal vector)を求める\n// 90度回転した単位ベクトルをかける\n// -90度がよければPoint(0, -1)をかける\nPoint normalVector(const Point &a) { return a * Point(0, 1); }\n\n// 内積(dot product) : a・b = |a||b|cosΘ\ndouble dot(const Point &a, const Point &b) {\n    return (a.real() * b.real() + a.imag() * b.imag());\n}\n\n// 外積(cross product) : a×b = |a||b|sinΘ\ndouble cross(const Point &a, const Point &b) {\n    return (a.real() * b.imag() - a.imag() * b.real());\n}\n\n// 点pを反時計回りにtheta度回転\nPoint rotate(const Point &p, const double &theta) {\n    return Point(cos(theta) * p.real() - sin(theta) * p.imag(),\n                 sin(theta) * p.real() + cos(theta) * p.imag());\n}\n\n// ラジアン->度\ndouble radianToDegree(const double &radian) { return radian * 180.0 / PI; }\n\n// 度->ラジアン\ndouble degreeToRadian(const double &degree) { return degree * PI / 180.0; }\n\n// 点の回転方向\n// 点a, b, cの位置関係について\nint ccw(const Point &a, Point b, Point c) {\n    b -= a, c -= a;\n    // 点a, b, c が\n    // 反時計回りの時、\n    if(cross(b, c) > EPS) {\n        return 1;\n    }\n    // 時計回りの時、\n    if(cross(b, c) < -EPS) {\n        return -1;\n    }\n    // c, a, bがこの順番で同一直線上にある時、\n    if(dot(b, c) < 0) {\n        return 2;\n    }\n    // a, b, cがこの順番で同一直線上にある場合、\n    if(norm(b) < norm(c)) {\n        return -2;\n    }\n    // cが線分ab上にある場合、\n    return 0;\n}\n\n// Line : 直線を表す構造体\n// b - a で直線・線分を表せる\nstruct Line {\n    Point a, b;\n    Line() = default;\n    Line(Point a, Point b) : a(a), b(b) {}\n    // Ax+By=C\n    Line(double A, double B, double C) {\n        if(equal(A, 0)) {\n            a = Point(0, C / B), b = Point(1, C / B);\n        } else if(equal(B, 0)) {\n            b = Point(C / A, 0), b = Point(C / A, 1);\n        } else {\n            a = Point(0, C / B), b = Point(C / A, 0);\n        }\n    }\n    friend ostream &operator<<(ostream &os, Line &p) {\n        return os << p.a << \" to \" << p.b;\n    }\n\n    friend istream &operator>>(istream &is, Line &a) {\n        return is >> a.a >> a.b;\n    }\n};\n\n// Segment : 線分を表す構造体\n// Lineと同じ\nstruct Segment : Line {\n    Segment() = default;\n\n    Segment(Point a, Point b) : Line(a, b) {}\n};\n\n// Circle : 円を表す構造体\n// pが中心の位置ベクトル、rは半径\nstruct Circle {\n    Point p;\n    double r;\n\n    Circle() = default;\n\n    Circle(Point p, double r) : p(p), r(r) {}\n};\n\n// 2直線の直交判定 : a⊥b <=> dot(a, b) = 0\nbool isOrthogonal(const Line &a, const Line &b) {\n    return equal(dot(a.b - a.a, b.b - b.a), 0);\n}\n// 2直線の平行判定 : a//b <=> cross(a, b) = 0\nbool isParallel(const Line &a, const Line &b) {\n    return equal(cross(a.b - a.a, b.b - b.a), 0);\n}\n\n// 点cが直線ab上にあるか\nbool isPointOnLine(const Point &a, const Point &b, const Point &c) {\n    return isParallel(Line(a, b), Line(a, c));\n}\n\n// 点cが\"線分\"ab上にあるか\nbool isPointOnSegment(const Point &a, const Point &b, const Point &c) {\n    // |a-c| + |c-b| <= |a-b| なら線分上\n    return (abs(a - c) + abs(c - b) < abs(a - b) + EPS);\n}\n\n// 直線lと点pの距離を求める\ndouble distanceBetweenLineAndPoint(const Line &l, const Point &p) {\n    return abs(cross(l.b - l.a, p - l.a)) / abs(l.b - l.a);\n}\n\n// 線分lと点pの距離を求める\n// 定義：点pから「線分lのどこか」への最短距離\ndouble distanceBetweenSegmentAndPoint(const Segment &l, const Point &p) {\n    if(dot(l.b - l.a, p - l.a) < EPS) {\n        return abs(p - l.a);\n    }\n    if(dot(l.a - l.b, p - l.b) < EPS) {\n        return abs(p - l.b);\n    }\n    return abs(cross(l.b - l.a, p - l.a)) / abs(l.b - l.a);\n}\n\n// 直線s, tの交点の計算\nPoint crossPoint(const Line &s, const Line &t) {\n    double d1 = cross(s.b - s.a, t.b - t.a);\n    double d2 = cross(s.b - s.a, s.b - t.a);\n    if(equal(abs(d1), 0) && equal(abs(d2), 0)) {\n        return t.a;\n    }\n    return t.a + (t.b - t.a) * (d2 / d1);\n}\n\n// 線分s, tの交点の計算\nPoint crossPoint(const Segment &s, const Segment &t) {\n    return crossPoint(Line(s), Line(t));\n}\n\n// 線分sと線分tが交差しているかどうか\nbool isIntersect(const Segment &s, const Segment &t) {\n    return ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 &&\n           ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0;\n}\n\n// 線分sとtの距離\ndouble distanceBetweenSegments(const Segment &s, const Segment &t) {\n    if(isIntersect(s, t)) {\n        return (double)(0);\n    }\n    double ans = distanceBetweenSegmentAndPoint(s, t.a);\n    chmin(ans, distanceBetweenSegmentAndPoint(s, t.b));\n    chmin(ans, distanceBetweenSegmentAndPoint(t, s.a));\n    chmin(ans, distanceBetweenSegmentAndPoint(t, s.b));\n    return ans;\n}\n\n// 射影(projection)\n// 直線(線分)lに点pから引いた垂線の足を求める\nPoint projection(const Line &l, const Point &p) {\n    double t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n    return l.a + (l.a - l.b) * t;\n}\n\nPoint projection(const Segment &l, const Point &p) {\n    double t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n    return l.a + (l.a - l.b) * t;\n}\n\n// 反射(reflection)\n// 直線lを対称軸として点pと線対称の位置にある点を求める\nPoint reflection(const Line &l, const Point &p) {\n    return p + (projection(l, p) - p) * 2.0;\n}\n} // namespace geometry\n\nusing namespace geometry;\n\nint main() {\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    cout << fixed << setprecision(15);\n    int q;\n    cin >> q;\n    while(q--) {\n        vector<double> x(4), y(4);\n        vector<Point> p(4);\n        for(int i = 0; i < 4; i++) {\n            cin >> x[i] >> y[i];\n            p[i] = Point(x[i], y[i]);\n        }\n        Segment s(p[0], p[1]), t(p[2], p[3]);\n        cout << distanceBetweenSegments(s, t) << endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define rep(i, n) for (int i = 0; i < n; ++i)\nusing ll = long long;\nusing namespace std;\nconst int INF = 1e9;\n\n//https://dai1741.github.io/maximum-algo-2012/cpp/geometry/geometries2d.h\n\ntypedef double D;\ntypedef complex<D> P;\ntypedef pair<P, P> L;\ntypedef vector<P> VP;\nconst D EPS = 1e-9;\n#define X real()\n#define Y imag()\n#define LE(n, m) ((n) < (m) + EPS)\n#define GE(n, m) ((n) + EPS > (m))\n#define EQ(n, m) (abs((n) - (m)) < EPS)\n\nD dot(P a, P b) {\n    return (conj(a) * b).X;\n}\nD cross(P a, P b) {\n    return (conj(a) * b).Y;\n}\n\nint ccw(P a, P b, P c) {\n    b -= a;\n    c -= a;\n    if (cross(b, c) > EPS)\n        return +1;\n    if (cross(b, c) < -EPS)\n        return -1;\n    if (dot(b, c) < -EPS)\n        return +2;\n    if (norm(b) < norm(c))\n        return -2;\n    return 0;\n}\n\nbool is_parallel(P a1, P a2, P b1, P b2) {\n    P x = a2 - a1;\n    P y = b2 - b1;\n    return EQ(cross(x, y), 0.0);\n}\n\nbool is_orthogonal(P a1, P a2, P b1, P b2) {\n    P x = a2 - a1;\n    P y = b2 - b1;\n    return EQ(dot(x, y), 0.0);\n}\n\nbool isecLP(P a1, P a2, P b) {\n    return abs(ccw(a1, a2, b)) != 1;\n}\n\nbool isecLL(P a1, P a2, P b1, P b2) {\n    return !isecLP(a2 - a1, b2 - b1, 0) || isecLP(a1, b1, b2);\n}\n\nbool isecLS(P a1, P a2, P b1, P b2) {\n    return cross(a2 - a1, b1 - a1) * cross(a2 - a1, b2 - a1) < EPS;\n}\n\nbool isecSS(P a1, P a2, P b1, P b2) {\n    return ccw(a1, a2, b1) * ccw(a1, a2, b2) <= 0 &&\n           ccw(b1, b2, a1) * ccw(b1, b2, a2) <= 0;\n}\n\nbool isecSP(P a1, P a2, P b) {\n    return !ccw(a1, a2, b);\n}\n\nP proj(P a1, P a2, P p) {\n    return a1 + dot(a2 - a1, p - a1) / norm(a2 - a1) * (a2 - a1);\n}\n\nP reflection(P a1, P a2, P p) {\n    return 2.0 * proj(a1, a2, p) - p;\n}\n\nD distLP(P a1, P a2, P p) {\n    return abs(proj(a1, a2, p) - p);\n}\n\nD distLL(P a1, P a2, P b1, P b2) {\n    return isecLL(a1, a2, b1, b2) ? 0 : distLP(a1, a2, b1);\n}\n\nD distLS(P a1, P a2, P b1, P b2) {\n    return isecLS(a1, a2, b1, b2) ? 0 : min(distLP(a1, a2, b1), distLP(a1, a2, b2));\n}\n\nD distSP(P a1, P a2, P p) {\n    P r = proj(a1, a2, p);\n    if (isecSP(a1, a2, r))\n        return abs(r - p);\n    return min(abs(a1 - p), abs(a2 - p));\n}\n\nD distSS(P a1, P a2, P b1, P b2) {\n    if (isecSS(a1, a2, b1, b2))\n        return 0;\n    return min(min(distSP(a1, a2, b1), distSP(a1, a2, b2)),\n               min(distSP(b1, b2, a1), distSP(b1, b2, a2)));\n}\n\nP crosspointLL(P a1, P a2, P b1, P b2) {\n    D d1 = cross(b2 - b1, b1 - a1);\n    D d2 = cross(b2 - b1, a2 - a1);\n    if (EQ(d1, 0) && EQ(d2, 0))\n        return a1;\n    if (EQ(d2, 0))\n        throw \"kouten ga nai\";\n    return a1 + d1 / d2 * (a2 - a1);\n}\n\nD distLC(P a1, P a2, P c, D r) {\n    return max(distLP(a1, a2, c) - r, 0.0);\n}\n\nD distSC(P a1, P a2, P c, D r) {\n    D dSqr1 = norm(c - a1), dSqr2 = norm(c - a2);\n    if (dSqr1 < r * r ^ dSqr2 < r * r)\n        return 0;\n    if (dSqr1 < r * r & dSqr2 < r * r)\n        return r - sqrt(max(dSqr1, dSqr2));\n    return max(distSP(a1, a2, c) - r, 0.0);\n}\n\nVP crosspointLC(P a1, P a2, P c, D r) {\n    VP ps;\n    P ft = proj(a1, a2, c);\n    if (!GE(r * r, norm(ft - c)))\n        return ps;\n\n    P dir = sqrt(max(r * r - norm(ft - c), 0.0)) / abs(a2 - a1) * (a2 - a1);\n    ps.push_back(ft + dir);\n    if (!EQ(r * r, norm(ft - c)))\n        ps.push_back(ft - dir);\n    return ps;\n}\n\nD distCC(P a, D ar, P b, D br) {\n    D d = abs(a - b);\n    return GE(d, abs(ar - br)) ? max(d - ar - br, 0.0) : abs(ar - br) - d;\n}\n\nVP crosspointCC(P a, D ar, P b, D br) {\n    VP ps;\n    P ab = b - a;\n    D d = abs(ab);\n    D crL = (norm(ab) + ar * ar - br * br) / (2 * d);\n    if (EQ(d, 0) || ar < abs(crL))\n        return ps;\n\n    P abN = ab * P(0, sqrt(ar * ar - crL * crL) / d);\n    P cp = a + crL / d * ab;\n    ps.push_back(cp + abN);\n    if (!EQ(norm(abN), 0))\n        ps.push_back(cp - abN);\n    return ps;\n}\n\nVP tangentPoints(P a, D ar, P p) {\n    VP ps;\n    D sin = ar / abs(p - a);\n    if (!LE(sin, 1))\n        return ps;\n    D t = M_PI_2 - asin(min(sin, 1.0));\n    ps.push_back(a + (p - a) * polar(sin, t));\n    if (!EQ(sin, 1))\n        ps.push_back(a + (p - a) * polar(sin, -t));\n    return ps;\n}\n\nvector<L> tangentLines(P a, D ar, P b, D br) {\n    vector<L> ls;\n    D d = abs(b - a);\n    rep(i, 2) {\n        D sin = (ar - (1 - i * 2) * br) / d;\n        if (!LE(sin * sin, 1))\n            break;\n        D cos = sqrt(max(1 - sin * sin, 0.0));\n        rep(j, 2) {\n            P n = (b - a) * P(sin, (1 - j * 2) * cos) / d;\n            ls.push_back(L(a + ar * n, b + (1 - i * 2) * br * n));\n            if (cos < EPS)\n                break;\n        }\n    }\n    return ls;\n}\n\nP circumcenter(P a, P b, P c) {\n    a = (a - c) * 0.5;\n    b = (b - c) * 0.5;\n    return c + crosspointLL(a, a * P(1, 1), b, b * P(1, 1));\n}\n\nVP circlesPointsRadius(P a, P b, D r) {\n    VP cs;\n    P abH = (b - a) * 0.5;\n    D d = abs(abH);\n    if (d == 0 || d > r)\n        return cs;\n    D dN = sqrt(r * r - d * d);\n    P n = abH * P(0, 1) * (dN / d);\n    cs.push_back(a + abH + n);\n    if (dN > 0)\n        cs.push_back(a + abH - n);\n    return cs;\n}\n\nVP circlesPointsTangent(P a, P b, P l1, P l2) {\n    P n = (l2 - l1) * P(0, 1);\n    P m = (b - a) * P(0, 0.5);\n    D rC = dot((a + b) * 0.5 - l1, n);\n    D qa = norm(n) * norm(m) - dot(n, m) * dot(n, m);\n    D qb = -rC * dot(n, m);\n    D qc = norm(n) * norm(m) - rC * rC;\n    D qd = qb * qb - qa * qc;\n\n    VP cs;\n    if (qd < -EPS)\n        return cs;\n    if (EQ(qa, 0)) {\n        if (!EQ(qb, 0))\n            cs.push_back((a + b) * 0.5 - m * (qc / qb / 2));\n        return cs;\n    }\n    D t = -qb / qa;\n    cs.push_back((a + b) * 0.5 + m * (t + sqrt(max(qd, 0.0)) / qa));\n    if (qd > EPS)\n        cs.push_back((a + b) * 0.5 + m * (t - sqrt(max(qd, 0.0)) / qa));\n    return cs;\n}\n\nP minEnclosingCircle(const VP &ps) {\n    P c;\n    double move = 0.5;\n    rep(i, 39) {\n        rep(t, 50) {\n            D max = 0;\n            int k = 0;\n            rep(j, ps.size()) if (max < norm(ps[j] - c)) {\n                max = norm(ps[j] - c);\n                k = j;\n            }\n            c += (ps[k] - c) * move;\n        }\n        move /= 2;\n    }\n    return c;\n}\n\nnamespace std {\nbool operator<(const P a, const P b) {\n    return a.X != b.X ? a.X < b.X : a.Y < b.Y;\n}\n} // namespace std\n\nVP convexHull(VP ps) {\n    int n = ps.size(), k = 0;\n    sort(ps.begin(), ps.end());\n    VP ch(2 * n);\n    for (int i = 0; i < n; ch[k++] = ps[i++])\n        while (k >= 2 && ccw(ch[k - 2], ch[k - 1], ps[i]) <= 0)\n            --k;\n    for (int i = n - 2, t = k + 1; i >= 0; ch[k++] = ps[i--])\n        while (k >= t && ccw(ch[k - 2], ch[k - 1], ps[i]) <= 0)\n            --k;\n    ch.resize(k - 1);\n    return ch;\n}\n\nbool isCcwConvex(const VP &ps) {\n    int n = ps.size();\n    rep(i, n) if (ccw(ps[i], ps[(i + 1) % n], ps[(i + 2) % n]) == -1) return false;\n    return true;\n}\n\nint inConvex(P p, const VP &ps) {\n    int n = ps.size();\n    int dir = ccw(ps[0], ps[1], p);\n    rep(i, n) {\n        int ccwc = ccw(ps[i], ps[(i + 1) % n], p);\n        if (!ccwc)\n            return 2;\n        if (ccwc != dir)\n            return 0;\n    }\n    return 1;\n}\n\nint inCcwConvex(const VP &ps, P p) {\n    int n = ps.size();\n    P g = (ps[0] + ps[n / 3] + ps[n * 2 / 3]) / 3.0;\n    if (g == p)\n        return 1;\n    P gp = p - g;\n\n    int l = 0, r = n;\n    while (l + 1 < r) {\n        int mid = (l + r) / 2;\n        P gl = ps[l] - g;\n        P gm = ps[mid] - g;\n        if (cross(gl, gm) > 0) {\n            if (cross(gl, gp) >= 0 && cross(gm, gp) <= 0)\n                r = mid;\n            else\n                l = mid;\n        } else {\n            if (cross(gl, gp) <= 0 && cross(gm, gp) >= 0)\n                l = mid;\n            else\n                r = mid;\n        }\n    }\n    r %= n;\n    D cr = cross(ps[l] - p, ps[r] - p);\n    return EQ(cr, 0) ? 2 : cr < 0 ? 0 : 1;\n}\n\nint inPolygon(const VP &ps, P p) {\n    int n = ps.size();\n    bool in = false;\n    rep(i, n) {\n        P a = ps[i] - p;\n        P b = ps[(i + 1) % n] - p;\n        if (EQ(cross(a, b), 0) && LE(dot(a, b), 0))\n            return 2;\n        if (a.Y > b.Y)\n            swap(a, b);\n        if ((a.Y * b.Y < 0 || (a.Y * b.Y < EPS && b.Y > EPS)) && LE(cross(a, b), 0))\n            in = !in;\n    }\n    return in;\n}\n\nVP convexCut(const VP &ps, P a1, P a2) {\n    int n = ps.size();\n    VP ret;\n    rep(i, n) {\n        int ccwc = ccw(a1, a2, ps[i]);\n        if (ccwc != -1)\n            ret.push_back(ps[i]);\n        int ccwn = ccw(a1, a2, ps[(i + 1) % n]);\n        if (ccwc * ccwn == -1)\n            ret.push_back(crosspointLL(a1, a2, ps[i], ps[(i + 1) % n]));\n    }\n    return ret;\n}\n\npair<int, int> convexDiameter(const VP &ps) {\n    int n = ps.size();\n    int i = min_element(ps.begin(), ps.end()) - ps.begin();\n    int j = max_element(ps.begin(), ps.end()) - ps.begin();\n    int maxI, maxJ;\n    D maxD = 0;\n    rep(_, 2 * n) {\n        if (maxD < norm(ps[i] - ps[j])) {\n            maxD = norm(ps[i] - ps[j]);\n            maxI = i;\n            maxJ = j;\n        }\n        if (cross(ps[i] - ps[(i + 1) % n], ps[(j + 1) % n] - ps[j]) <= 0)\n            j = (j + 1) % n;\n        else\n            i = (i + 1) % n;\n    }\n    return make_pair(maxI, maxJ);\n}\n\nD area(const VP &ps) {\n    D a = 0;\n    rep(i, ps.size()) a += cross(ps[i], ps[(i + 1) % ps.size()]);\n    return a / 2;\n}\n\nP centroid(const VP &ps) {\n    int n = ps.size();\n    D aSum = 0;\n    P c;\n    rep(i, n) {\n        D a = cross(ps[i], ps[(i + 1) % n]);\n        aSum += a;\n        c += (ps[i] + ps[(i + 1) % n]) * a;\n    }\n    return 1 / aSum / 3 * c;\n}\n\nVP voronoiCell(P p, const VP &ps, const VP &outer) {\n    VP cl = outer;\n    rep(i, ps.size()) {\n        if (EQ(norm(ps[i] - p), 0))\n            continue;\n        P h = (p + ps[i]) * 0.5;\n        cl = convexCut(cl, h, h + (ps[i] - h) * P(0, 1));\n    }\n    return cl;\n}\n\nstruct Edge {\n    int from, to;\n    D cost;\n    Edge(int from, int to, D cost) : from(from), to(to), cost(cost) {}\n};\nstruct Graph {\n    int n;\n    vector<vector<Edge>> edges;\n    Graph(int n) : n(n), edges(n) {}\n    void addEdge(Edge e) {\n        edges[e.from].push_back(e);\n        edges[e.to].push_back(Edge(e.to, e.from, e.cost));\n    }\n};\n\nGraph segmentArrangement(const vector<L> &segs, VP &ps) {\n    int n = segs.size();\n    rep(i, n) {\n        ps.push_back(segs[i].first);\n        ps.push_back(segs[i].second);\n        rep(j, i) {\n            if (isecSS(segs[i].first, segs[i].second, segs[j].first, segs[j].second))\n                ps.push_back(crosspointLL(segs[i].first, segs[i].second, segs[j].first, segs[j].second));\n        }\n    }\n    sort(ps.begin(), ps.end());\n    ps.erase(unique(ps.begin(), ps.end()), ps.end());\n\n    int m = ps.size();\n    Graph gr(m);\n    vector<pair<D, int>> list;\n    rep(i, n) {\n        list.clear();\n        rep(j, m) {\n            if (isecSP(segs[i].first, segs[i].second, ps[j]))\n                list.push_back(make_pair(norm(segs[i].first - ps[j]), j));\n        }\n        sort(list.begin(), list.end());\n        rep(j, list.size() - 1) {\n            int a = list[j].second;\n            int b = list[j + 1].second;\n            gr.addEdge(Edge(a, b, abs(ps[a] - ps[b])));\n        }\n    }\n    return gr;\n}\n\nGraph visibilityGraph(const VP &ps, const vector<VP> &objs) {\n    int n = ps.size();\n    Graph gr(n);\n    rep(i, n) rep(j, i) {\n        P a = ps[i], b = ps[j];\n        if (!EQ(norm(a - b), 0))\n            rep(k, objs.size()) {\n                const VP &obj = objs[k];\n                int inStA = inConvex(a, obj);\n                int inStB = inConvex(b, obj);\n                if ((inStA ^ inStB) % 2 || inStA * inStB != 1 && inConvex((a + b) * 0.5, obj) == 1)\n                    goto skip;\n                rep(l, obj.size()) {\n                    P cur = obj[l];\n                    P next = obj[(l + 1) % obj.size()];\n                    if (isecSS(a, b, cur, next) && !isecSP(cur, next, a) && !isecSP(cur, next, b))\n                        goto skip;\n                }\n            }\n        gr.addEdge(Edge(i, j, abs(a - b)));\n    skip : {}\n    }\n    return gr;\n}\nint main() {\n    int Q;\n    cin >> Q;\n    rep(i, Q) {\n        P p[4];\n        rep(j, 4) {\n            D x, y;\n            cin >> x >> y;\n            p[j] = P(x, y);\n        }\n\n        printf(\"%.10f\\n\", distSS(p[0], p[1], p[2], p[3]));\n    }\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <cmath>\n\n\nusing namespace std;\n\n#define FOR(i,a,b) for (int i=(a);i<(b);i++)\n#define FORR(i,a,b) for (int i=(a);i>=(b);i--)\n\ntypedef long long ll;\nconst int INF = 1e9;\nconst int MOD = 1e9+7;\nconst double EPS = 1e-9;\n\n\nstruct Vector {\n    double x, y;\n    Vector() {}\n    Vector(double x, double y): x(x), y(y) {}\n};\n\nbool equal(double x, double y) {\n    return abs(y - x) < EPS;\n}\n\ndouble cross(double x1, double y1, double x2, double y2) {\n    return x1 * y2 - x2 * y1;\n}\ndouble cross(Vector& a, Vector& b) {\n    return a.x * b.y - b.x * a.y;\n}\n\ndouble dot(double x1, double y1, double x2, double y2) {\n    return x1 * x2 + y1 * y2;\n}\ndouble dot(Vector& a, Vector& b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble dist(double x1, double y1, double x2, double y2) {\n    return sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n}\ndouble dist(Vector& a, Vector& b) {\n    return sqrt((b.x - a.x) * (b.x - a.x) + (b.y - a.y) * (b.y - a.y));\n}\ndouble dist2(Vector& a, Vector& b) {\n    return (b.x - a.x) * (b.x - a.x) + (b.y - a.y) * (b.y - a.y);\n}\n\n\ndouble distance_between_segment_and_point(Vector& p1, Vector& p2, Vector& q) {\n    Vector pp, pq;\n    pp.x = p2.x - p1.x; pp.y = p2.y - p1.y;\n    pq.x = q.x - p1.x; pq.y = q.y - p1.y;\n    double dotpq = dot(pp, pq);\n    double lenp = dist(p1, p2);\n    double lenpq = dist(p1, q);\n    if (dotpq <= 0.0) {\n        return lenpq;\n    }\n    else if (dotpq < dot(pp, pp)) {\n        double dpr = dotpq / lenp;\n        return sqrt(lenpq * lenpq - dpr * dpr);\n    }\n    return dist(p2, q);\n}\n\ndouble distance_between_2_line_segments(Vector& p1, Vector& p2, Vector& q1, Vector& q2) {\n    double lenp, lenq;\n    lenp = dist(p1, p2);\n    lenq = dist(q1, q2);\n\n    // some segments have 0 length\n    if (equal(lenp, 0) && equal(lenq, 0)) {\n        return dist(p1, q1);\n    }\n    else if (equal(lenp, 0)) {\n        return distance_between_segment_and_point(q1, q2, p1);\n    }\n    else if (equal(lenq, 0)) {\n        return distance_between_segment_and_point(p1, p2, q1);\n    }\n\n    // if two segments is crossing..\n    Vector pp(p2.x - p1.x, p2.y - p1.y), qq(q2.x - q1.x, q2.y - q1.y);\n    double crossq, crossp;\n    crossq = cross(pp.x, pp.y, q1.x - p1.x, q1.y - p1.y) * cross(pp.x, pp.y, q2.x - p1.x, q2.y - p1.y);\n    crossp = cross(qq.x, qq.y, p1.x - q1.x, p1.y - q1.y) * cross(qq.x, qq.y, p2.x - q1.x, p2.y - q1.y);\n    if (crossq < 0 && crossp < 0) {\n        return 0.0;\n    }\n\n    double d1, d2, d3, d4;\n    d1 = distance_between_segment_and_point(p1, p2, q1);\n    d2 = distance_between_segment_and_point(p1, p2, q2);\n    d3 = distance_between_segment_and_point(q1, q2, p1);\n    d4 = distance_between_segment_and_point(q1, q2, p1);\n\n    return min(min(d1, d2), min(d3, d4));\n}\n\n\nint main() {\n    int N;\n    Vector p1, p2, q1, q2;\n    cin >> N;\n    cout << fixed << setprecision(10);\n\n    for (int i = 0; i < N; i++) {\n        cin >> p1.x >> p1.y >> p2.x >> p2.y >> q1.x >> q1.y >> q2.x >> q2.y;\n        cout << distance_between_2_line_segments(p1, p2, q1, q2) << endl;\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<math.h>\n#include<float.h>\n#include<cstdio>\nusing namespace std;\n#define EPS (1e-10)\n#define equals(a,b) fabs((a)-(b))<DBL_EPSILON*fmax(1,fmax(fabs(a),fabs(b)))\n//点のクラス\nclass Point{\n    public:\n        double x,y;\n        Point(double x=0,double y=0):x(x),y(y){}\n\n        Point operator + (Point p){return Point(x+p.x,y+p.y);}\n        Point operator - (Point p){return Point(x-p.x,y-p.y);}\n        Point operator * (double a){return Point(a*x,a*y);}\n        Point operator / (double a){return Point(x/a,y/a);}\n\n        double norm(Point p){return p.x*p.x+p.y*p.y;}\n        double abs(Point p){return sqrt(norm(p));}    \n        bool operator < (const Point &p)const{\n            return x!=p.x?x<p.x:y<p.y;\n        }\n        bool operator == (const Point &p)const{\n            return equals(x,p.x)&&equals(y,p.y);\n        }\n};\ntypedef Point Vector;\nstruct Segment{ Point p1,p2; };\ntypedef Segment Line;\ndouble norm(Vector v){return v.x*v.x+v.y*v.y;} \ndouble abs(Vector v){return sqrt(norm(v));}    \n//内積\ndouble dot(Vector a,Vector b){ return a.x*b.x+a.y*b.y; }\n//外戚\ndouble cross(Vector a,Vector b){ return a.x*b.y-a.y*b.x; }\n//直交\nbool isOrthogonal(Vector a,Vector b){ return equals(dot(a,b),0.0); }\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){ return isOrthogonal(a1-a2,b1-b2); }\nbool isOthogonal(Segment s1,Segment s2){ return equals(dot(s1.p1-s1.p2,s2.p1-s2.p2),0.0); }\n//平行\nbool isParallel(Vector a,Vector b){ return equals(cross(a,b),0.0); }\nbool isParallel(Point a1,Point a2,Point b1,Point b2){ return isParallel(a1-a2,b1-b2); }\nbool isParallel(Segment s1,Segment s2){ return equals(cross(s1.p2-s1.p1,s2.p2-s2.p1),0.0); }\n//射影\nPoint project(Segment s,Point p){ //射影　p377\n    Vector base=s.p2-s.p1;\n    double r=dot(p-s.p1,base)/norm(base);\n    return s.p1+base*r;\n}\n//反射　p379\nPoint reflect(Segment s,Point p){return p+(project(s,p)-p)*2.0;}\n//ベクトルa,bの位置関係\nint ccw(Point p0,Point p1,Point p2){\n    Vector a=p1-p0;\n    Vector b=p2-p0;\n    if(cross(a,b)>EPS) return 1;//p0,p1,p2が反時計回り\n    if(cross(a,b)<-EPS) return -1;//p0,p1,p2が時計回り\n    if(dot(a,b)<-EPS) return 2;//p1,p0,p2の順で一直線\n    if(norm(a)<norm(b)) return -2;//p0,p1,p2の順で一直線\n    return 0; //p0,p2,p1の順で一直線\n}\n//交差判定　p389\nbool intersect(Point p1,Point p2,Point p3,Point p4){\n    return ( ccw(p1,p2,p3)*ccw(p1,p2,p4)<=0&&\n            ccw(p3,p4,p1)*ccw(p3,p4,p2)<=0);//p1,p2,p3,p4の順で一直線になるのを除く\n}\nbool intersect(Segment s1,Segment s2){\n    return intersect(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n//交点の座標　p392\nPoint getCrossPoint(Segment s1,Segment s2){ \n    Vector base=s2.p2-s2.p1;\n    double d1=abs(cross(base,s1.p1-s2.p1));\n    double d2=abs(cross(base,s1.p2-s2.p1));\n    double t=d1/(d1+d2);\n    return s1.p1+(s1.p2-s1.p1)*t;\n}\n//距離p380\ndouble getDistance(Point a,Point b){ return abs(a-b);} //点aと点b\ndouble getDistanceLP(Line l,Point p){//直線lと点p\n\treturn abs(cross(l.p2-l.p1,p-l.p1)/abs(l.p2-l.p1));\n}\ndouble getDistanceSP(Segment s,Point p){//線分sと点p\n\tif(dot(s.p2-s.p1,p-s.p1)<=0.0)return abs(p-s.p1);\n\tif(dot(s.p1-s.p2,p-s.p2)<=0.0)return abs(p-s.p2);\n\treturn getDistanceLP(s,p);\n}\ndouble getDistance(Segment s1,Segment s2){ //線分s1と線分s2\n\tif(intersect(s1,s2))return 0.0;\n\treturn min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),\n\t\t\t  min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n}\nint main(){\n    int q;\n    double pp;\n    Point p1,p2;\n    cin>>q;\n    Point p[4];\n    Segment s1,s2;\n    for(int i=0;i<q;i++){\n        cin>>p[0].x>>p[0].y>>p[1].x>>p[1].y;\n        cin>>p[2].x>>p[2].y>>p[3].x>>p[3].y;\n        s1.p1=p[0]; s1.p2=p[1];\n        s2.p1=p[2]; s2.p2=p[3];\n        pp=getDistance(s1,s2);\n        printf(\"%.10f\\n\",pp);\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\ninline double add(double a, double b){\n    return abs(a+b)<(1e-10)*(abs(a)+abs(b)) ? 0.0 : a+b;\n}\n\nstruct vec{\n    double x,y;\n    vec operator-(vec b){\n        return (vec){add(x,-b.x),add(y,-b.y)};\n    }\n    vec operator+(vec b){\n        return (vec){add(x,b.x),add(y,b.y)};\n    }\n    vec operator*(double d){\n        return (vec){x*d,y*d};\n    }\n    double dot(vec v){\n        return add(x*v.x,y*v.y);\n    }\n    double cross(vec v){\n        return add(x*v.y,-y*v.x);\n    }\n    double norm(){\n        return sqrt(x*x+y*y);\n    }\n};\n\nconst double eps = 0.0000001;\n\n\nint ccw(vec& a, vec& b, vec& c){\n    vec ab = b-a, ac = c-a;\n    double o = ab.cross(ac);\n    if(o>0) return 1; //CCW\n    if(o<0) return -1; //CW\n    if(ab.dot(ac)<0){\n        return 2; //C-A-B\n    }else{\n        if(ab.dot(ab)<ac.dot(ac)){\n            return -2; //A-B-C\n        }else{\n            return 0; //A-C-B\n        }\n    }\n}\n\nbool isInterSection(vec (&p)[4]){\n    switch(ccw(p[0],p[1],p[2])*ccw(p[0],p[1],p[3])){\n        case -1:\n        case -4:\n        case 0:\n            break;\n        default:\n            return false;\n    }\n    switch(ccw(p[2],p[3],p[0])*ccw(p[2],p[3],p[1])){\n        case -1:\n        case -4:\n        case 0:\n            break;\n        default:\n            return false;\n    }\n   return true;\n}\n\nvec interSection(vec (&p)[4]){\n    vec p23=p[3]-p[2],p02=p[2]-p[0],p01=p[1]-p[0];\n    double k = p23.cross(p02)/p23.cross(p01);\n    return p[0]+p01*k;\n}\n\ndouble dist(vec (&p)[4]){\n    if(isInterSection(p)) return 0;\n    double dist =1e5;\n    vec P;\n    P=p[0]+(p[1]-p[0])*((p[1]-p[0]).dot(p[2]-p[0])/(p[1]-p[0]).dot(p[1]-p[0]));\n    if(!ccw(p[0],p[1],P)){\n        dist = min(dist,(P-p[2]).norm());\n    }\n    P=p[0]+(p[1]-p[0])*((p[1]-p[0]).dot(p[3]-p[0])/(p[1]-p[0]).dot(p[1]-p[0]));\n    if(!ccw(p[0],p[1],P)){\n        dist = min(dist,(P-p[3]).norm());\n    }\n    P=p[2]+(p[3]-p[2])*((p[3]-p[2]).dot(p[0]-p[2])/(p[3]-p[2]).dot(p[3]-p[2]));\n    if(!ccw(p[2],p[3],P)){\n        dist = min(dist,(P-p[0]).norm());\n    }\n    P=p[2]+(p[3]-p[2])*((p[3]-p[2]).dot(p[1]-p[2])/(p[3]-p[2]).dot(p[3]-p[2]));\n    if(!ccw(p[2],p[3],P)){\n        dist = min(dist,(P-p[1]).norm());\n    }\n    dist = min(dist,(p[2]-p[0]).norm());\n    dist = min(dist,(p[2]-p[1]).norm());\n    dist = min(dist,(p[3]-p[0]).norm());\n    dist = min(dist,(p[3]-p[1]).norm());\n    return dist;\n}\n\nint main(void){\n    vec p[4];\n    int q;\n    cin >> q;\n    cout.precision(10);\n    cout << fixed;\n    while(q--){\n        for(auto& v : p) cin >> v.x >> v.y;\n        cout << dist(p) << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef long double ld;\ndouble x,y,xx,yy,xxx,yyy,xxxx,yyyy;\nint q;\nint main(){\n\tcin>>q;\n\twhile(q--){\n\t\tcin>>x>>y>>xx>>yy>>xxx>>yyy>>xxxx>>yyyy;\n\t\tint pd1=0,pd2=0,pd3=0,pd4=0,pd5=0;\n\t\txx-=x,yy-=y,xxx-=x,yyy-=y,xxxx-=x,yyyy-=y;\n\t\tif((xx*yyy-xxx*yy)*(xx*yyyy-xxxx*yy)<=0) pd1=1;\n\t\txx+=x,yy+=y,xxx+=x,yyy+=y,xxxx+=x,yyyy+=y;\n\t\t\n\t\tx-=xx,y-=yy,xxx-=xx,yyy-=yy,xxxx-=xx,yyyy-=yy;\n\t\tif((x*yyy-xxx*y)*(x*yyyy-xxxx*y)<=0) pd2=1;\n\t\tx+=xx,y+=yy,xxx+=xx,yyy+=yy,xxxx+=xx,yyyy+=yy;\n\t\t\n\t\tx-=xxx,y-=yyy,xx-=xxx,yy-=yyy,xxxx-=xxx,yyyy-=yyy;\n\t\tif((xxxx*y-x*yyyy)*(xxxx*yy-xx*yyyy)<=0) pd3=1;\n\t\tx+=xxx,y+=yyy,xx+=xxx,yy+=yyy,xxxx+=xxx,yyyy+=yyy;\n\t\t\n\t\tx-=xxxx,y-=yyyy,xx-=xxxx,yy-=yyyy,xxx-=xxxx,yyy-=yyyy;\n\t\tif((xxx*y-x*yyy)*(xxx*yy-xx*yyy)<=0) pd4=1;\n\t\tx+=xxxx,y+=yyyy,xx+=xxxx,yy+=yyyy,xxx+=xxxx,yyy+=yyyy;\n\t\t\n\t\tif(max(x,xx)>=min(xxx,xxxx)\n\t\t&& max(xxx,xxxx)>=min(x,xx)\n\t\t&& max(y,yy)>=min(yyy,yyyy)\n\t\t&& max(yyy,yyyy)>=min(y,yy)){\n\t\t\tpd5=1;\n\t\t}\n\t\tdouble ANS=100000000;\n\t\tif(pd1==1 && pd2==1 && pd3==1 && pd4==1 && pd5==1){\n\t\t\tANS=0;\n\t\t}\n\t\tdouble ans,ansx,ansy;\n\t\t\n\t\tANS=min(ANS,sqrt((xxx-x)*(xxx-x)+(yyy-y)*(yyy-y)));\n\t\tANS=min(ANS,sqrt((xxxx-x)*(xxxx-x)+(yyyy-y)*(yyyy-y)));\n\t\tANS=min(ANS,sqrt((xxx-xx)*(xxx-xx)+(yyy-yy)*(yyy-yy)));\n\t\tANS=min(ANS,sqrt((xxxx-xx)*(xxxx-xx)+(yyyy-yy)*(yyyy-yy)));\n\t\t\n\t\txx-=x,yy-=y,xxx-=x,yyy-=y,xxxx-=x,yyyy-=y;\n\t\tans=xx*xxx+yy*yyy;\n\t\tans/=(xx*xx+yy*yy);\n\t\tansx=ans*xx,ansy=ans*yy;\n\t\tif((ansx>=0 && ansx<=xx || ansx<=0 && ansx>=xx) && (ansy>=0 && ansy<=yy || ansy<=0 && ansy>=yy)){\n\t\t\tANS=min(ANS,sqrt((xxx-ansx)*(xxx-ansx)+(yyy-ansy)*(yyy-ansy)));\n\t\t}\n//\t\tprintf(\"%.10lf\\n\",ANS);\n\t\tans=xx*xxxx+yy*yyyy;\n\t\tans/=(xx*xx+yy*yy);\n\t\tansx=ans*xx,ansy=ans*yy;\n\t\tif((ansx>=0 && ansx<=xx || ansx<=0 && ansx>=xx) && (ansy>=0 && ansy<=yy || ansy<=0 && ansy>=yy)){\n\t\t\tANS=min(ANS,sqrt((xxxx-ansx)*(xxxx-ansx)+(yyyy-ansy)*(yyyy-ansy)));\n\t\t}\n//\t\tprintf(\"%.10lf\\n\",ANS);\n\t\txx+=x,yy+=y,xxx+=x,yyy+=y,xxxx+=x,yyyy+=y;\n\t\t\n\t\tx-=xxx,y-=yyy,xx-=xxx,yy-=yyy,xxxx-=xxx,yyyy-=yyy;\n\t\tans=xxxx*x+yyyy*y;\n\t\tans/=(xxxx*xxxx+yyyy*yyyy);\n\t\tansx=ans*xxxx,ansy=ans*yyyy;\n\t\tif((ansx>=0 && ansx<=xxxx || ansx<=0 && ansx>=xxxx) && (ansy>=0 && ansy<=yyyy || ansy<=0 && ansy>=yyyy)){\n//\t\t\tcout<<\"1 \"<<xxxx<<\" \"<<ansx<<endl;\n\t\t\tANS=min(ANS,sqrt((x-ansx)*(x-ansx)+(y-ansy)*(y-ansy)));\n\t\t}\n//\t\tprintf(\"%.10lf\\n\",ANS);\n\t\tans=xxxx*xx+yyyy*yy;\n\t\tans/=(xxxx*xxxx+yyyy*yyyy);\n\t\tansx=ans*xxxx,ansy=ans*yyyy;\n\t\tif((ansx>=0 && ansx<=xxxx || ansx<=0 && ansx>=xxxx) && (ansy>=0 && ansy<=yyyy || ansy<=0 && ansy>=yyyy)){\n//\t\t\tcout<<\"2 \"<<xxxx<<\" \"<<ansx<<endl;\n\t\t\tANS=min(ANS,sqrt((xx-ansx)*(xx-ansx)+(yy-ansy)*(yy-ansy)));\n\t\t}\n\t\tprintf(\"%.10lf\\n\",ANS);\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n//#define int long long\n\nusing namespace std;\nusing LL = long long;\nusing P = pair<int, int>;\nusing Tapris = tuple<int, int, int>;\n\n#define FOR(i, a, n) for(int i = (int)(a); i < (int)(n); ++i)\n#define REP(i, n) FOR(i, 0, n)\n\n#define pb(a) push_back(a)\n#define all(x) (x).begin(),(x).end()\n\nconst int INF = (int)1e9;\nconst LL INFL = (LL)1e15;\nconst int MOD = 1e9 + 7;\n\nint dy[]={0, 0, 1, -1, 0};\nint dx[]={1, -1, 0, 0, 0};\n\ntypedef long double LD;\ntypedef complex<LD> Point;\ntypedef pair<Point, Point> Line;\nconst LD EPS = 1e-10;\n#define X real() // x座標を取得\n#define Y imag() // y座標を取得\n#define LE(n,m) ((n) < (m) + EPS)\n#define GE(n,m) ((n) + EPS > (m))\n#define EQ(n,m) (abs((n)-(m)) < EPS)\n\n// 内積 dot(a, b) = |a||b|cosθ\nLD dot(Point a, Point b){\n    return (conj(a)*b).X;\n}\n\n// 外積 cross(a, b) = |a||b|sinθ\nLD cross(Point a, Point b){\n    return (conj(a)*b).Y;\n}\n\nint ccw(Point a, Point b, Point c){\n    b -= a; c -= a;\n    if (cross(b, c) > 0)   return +1;       // counter clockwise\n    if (cross(b, c) < 0)   return -1;       // clockwise\n    if (dot(b, c) < 0)     return +2;       // c--a--b on line\n    if (norm(b) < norm(c)) return -2;       // a--b--c on line\n    return 0;\n}\n\n\n// 交差判定 (isec) ****************************\n// 点　 := 平面座標にある点\n// 直線 := 点と点を通るどこまでも続く線\n// 線分 := 点と点を結んでその両端で止まっている線\n\n// 直線と点\nbool isecLP(Point a1, Point a2, Point b){\n    return abs(ccw(a1, a2, b)) != 1;\n}\n\n// 直線と直線\nbool isecLL(Point a1, Point a2, Point b1, Point b2) {\n    return !isecLP(a2-a1, b2-b1, 0) || isecLP(a1, b1, b2);\n}\n\n// 直線と線分\nbool isecLS(Point a1, Point a2, Point b1, Point b2) {\n    return cross(a2-a1, b1-a1) * cross(a2-a1, b2-a1) < EPS;\n}\n\n// 線分と線分\nbool isecSS(Point a1, Point a2, Point b1, Point b2) {\n    return ccw(a1, a2, b1)*ccw(a1, a2, b2) <= 0 && ccw(b1, b2, a1)*ccw(b1, b2, a2) <= 0;\n}\n\n// 線分と点\nbool isecSP(Point a1, Point a2, Point b) {\n    return !ccw(a1, a2, b);\n}\n\n// ********************************************\n\n\n// 距離 (dist) ********************************\n// 点pの直線aへの射影点を返す\nPoint proj(Point a1, Point a2, Point p){\n    return a1 + dot(a2-a1, p-a1) / norm(a2-a1) * (a2-a1);\n}\n\n// 点pの直線aへの反射点を返す\nPoint reflection(Point a1, Point a2, Point p){\n    return 2.0L*proj(a1, a2, p) - p;\n}\n\n// 直線と点\nLD distLP(Point a1, Point a2, Point p){\n    return abs(proj(a1, a2, p) - p);\n}\n\n// 直線と直線\nLD distLL(Point a1, Point a2, Point b1, Point b2) {\n    return isecLL(a1, a2, b1, b2) ? 0 : distLP(a1, a2, b1);\n}\n\n// 直線と線分\nLD distLS(Point a1, Point a2, Point b1, Point b2) {\n    return isecLS(a1, a2, b1, b2) ? 0 : min(distLP(a1, a2, b1), distLP(a1, a2, b2));\n}\n\n// 線分と点\nLD distSP(Point a1, Point a2, Point p) {\n    Point r = proj(a1, a2, p);\n    if(isecSP(a1, a2, r)) return abs(r-p);\n    return min(abs(a1-p), abs(a2-p));\n}\n\n// 線分と線分\nLD distSS(Point a1, Point a2, Point b1, Point b2) {\n    if(isecSS(a1, a2, b1, b2)) return 0;\n    return min(min(distSP(a1, a2, b1), distSP(a1, a2, b2)), min(distSP(b1, b2, a1), distSP(b1, b2, a2)));\n}\n\n// ********************************************\n\n\n// 2直線の交点 (crosspoint) *******************\nPoint crosspointLL(Point a1, Point a2, Point b1, Point b2){\n    LD d1 = cross(b2-b1, b1-a1);\n    LD d2 = cross(b2-b1, a2-a1);\n    if (EQ(d1, 0) && EQ(d2, 0)) return a1;\n    if (EQ(d2, 0)) throw \"not exist crosspoint\";\n    return a1 + d1/d2 * (a2-a1);\n}\n// ********************************************\n\n\n/*************** using variables ***************/\nPoint p[4];\nint q;\n/**********************************************/\n\nsigned main(){\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    \n    cin >> q;\n    REP(i, q){\n        LD xp, yp;\n        REP(i, 4){\n            cin >> xp >> yp;\n            p[i] = Point(xp, yp);\n        }\n        LD ans = distSS(p[0], p[1], p[2], p[3]);\n        printf(\"%.9Lf\\n\", ans);\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<iomanip>\n#include<cmath>\nusing namespace std;\n\nstruct Point{\n    double x;\n    double y;\n    Point (double x, double y) : x(x), y(y){}\n    Point operator-(Point p){\n        return Point(x - p.x, y - p.y);\n    }\n};\ntypedef Point Vector;\ndouble dot(Vector v1, Vector v2){\n    return v1.x * v2.x + v1.y * v2.y;\n}\ndouble abs_(Vector v){\n    return sqrt(dot(v, v));\n}\ndouble cross(Vector v1, Vector v2){\n    return v1.x * v2.y - v1.y * v2.x;\n}\nstruct Segment{\n    Point p1;\n    Point p2;\n    Segment(Point p1, Point p2) : p1(p1), p2(p2){}\n};\nbool is_inSegment(Point p, Segment s){\n    double max_x = s.p1.x;\n    double min_x = s.p2.x;\n    if (min_x > max_x) swap(min_x, max_x);\n    if (p.x < min_x || p.x > max_x) return false;\n    double max_y = s.p1.y;\n    double min_y = s.p2.y;\n    if (min_y > max_y) swap(min_y, max_y);\n// cout << min_y << \" \" << max_y << \" \" << p.y << endl;\n    if (p.y < min_y || p.y > max_y) return false;\n    return true;\n}\nbool is_intersect(Segment s1, Segment s2){\n    double alpha = cross(s2.p1 - s2.p2, s1.p1 - s1.p2);\n    if (fabs(alpha) < 1e-10) return false;\n    double beta  = cross(s2.p1, s2.p2);\n    double gamma = cross(s1.p1, s1.p2);\n    double x_is = ((s1.p1.x - s1.p2.x) * beta -\n                   (s2.p1.x - s2.p2.x) * gamma) / alpha;\n    double y_is = ((s1.p1.y - s1.p2.y) * beta -\n                   (s2.p1.y - s2.p2.y) * gamma) / alpha;\n    Point p_is(x_is, y_is);\n    if (!is_inSegment(p_is, s1)) return false;\n    if (!is_inSegment(p_is, s2)) return false;\n    return true;\n}\ndouble get_distanceSP(Segment s, Point p){\n// cout << \"(\" << s.p1.x << \",\" << s.p1.y << \")\";\n// cout << \"(\" << s.p2.x << \",\" << s.p2.y << \")   :    \";\n// cout << \"(\" << p.x << \",\" << p.y << \")\" << endl;\n    Vector a1 = s.p2 - s.p1;\n    Vector b1 = p    - s.p1;\n    if (dot(a1, b1) <= 0) return abs_(b1);\n    Vector a2 = s.p1 - s.p2;\n    Vector b2 = p    - s.p2;\n    if (dot(a2, b2) <= 0) return abs_(b2);\n    return fabs(cross(a1, b1)) / abs_(a1);\n}\ndouble get_distanceSS(Segment s1, Segment s2){\n    if (is_intersect(s1, s2)) return 0;\n    // cout << get_distanceSP(s1, s2.p1) << \" \";\n    // cout << get_distanceSP(s1, s2.p2) << \" \";\n    // cout << get_distanceSP(s2, s1.p1) << \" \";\n    // cout << get_distanceSP(s2, s1.p2) << endl;\n    return min(min(get_distanceSP(s1, s2.p1), get_distanceSP(s1, s2.p2)),\n               min(get_distanceSP(s2, s1.p1), get_distanceSP(s2, s1.p2)));\n}\nint main(){\n    int q;\n    cin >> q;\n    for (int i = 0; i < q; i++) {\n        int x_p0, y_p0, x_p1, y_p1, x_p2, y_p2, x_p3, y_p3;\n        cin >> x_p0 >> y_p0 >> x_p1 >> y_p1;\n        cin >> x_p2 >> y_p2 >> x_p3 >> y_p3;\n        Segment s1(Point(x_p0, y_p0), Point(x_p1, y_p1));\n        Segment s2(Point(x_p2, y_p2), Point(x_p3, y_p3));\n        double distance = get_distanceSS(s1, s2);\n        cout << fixed << setprecision(10);\n        cout << distance << endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\n\nusing namespace std;\n\ntemplate <typename T>\nvoid printv(const vector<T> &v)\n{\n    int sz = v.size();\n    for (int i = 0; i < sz; i++)\n    {\n        cout << v[i] << \" \\n\"[i == sz - 1];\n    }\n}\n\nusing ld = long double;\nusing Point = std::complex<ld>;\n\nconst ld eps = 1e-9, pi = acos(-1.0);\n\nnamespace std\n{\nbool operator<(const Point &lhs, const Point &rhs)\n{\n    if (lhs.real() < rhs.real() - eps)\n        return true;\n    if (lhs.real() > rhs.real() + eps)\n        return false;\n    return lhs.imag() < rhs.imag();\n}\n} // namespace std\n\nPoint input_point()\n{\n    ld x, y;\n    std::cin >> x >> y;\n    return Point(x, y);\n}\n\nbool eq(ld a, ld b)\n{\n    return (abs(a - b) < eps);\n}\n\nld dot(Point a, Point b)\n{\n    return real(conj(a) * b);\n}\n\nld cross(Point a, Point b)\n{\n    return imag(conj(a) * b);\n}\n\n// CCW::counter clockwise\nint ccw(Point a, Point b, Point c)\n{\n    b -= a;\n    c -= a;\n    if (cross(b, c) > eps)\n        return 1; // a,b,c : counter-clockwise\n    if (cross(b, c) < -eps)\n        return -1; // a,b,c : clockwise\n    if (dot(b, c) < 0)\n        return 2; // c,a,b : on a line\n    if (norm(b) < norm(c))\n        return -2; // a,b,c : on a line\n    return 0;      // a,c,b : on a line\n}\n\nclass Line\n{\npublic:\n    Point a, b;\n    Line() : a(Point(0, 0)), b(Point(0, 0)) {}\n    Line(Point a, Point b) : a(a), b(b) {}\n};\n\nld dot(Line l, Line m)\n{\n    return dot((l.a - l.b), (m.a - m.b));\n}\n\nclass Circle\n{\npublic:\n    Point p;\n    ld r;\n    Circle() : p(Point(0, 0)), r(0) {}\n    Circle(Point p, ld r) : p(p), r(r) {}\n};\n\n// l:line, m:line が交点を持つか\nbool isis_ll(Line l, Line m)\n{\n    return !eq(cross(l.b - l.a, m.b - m.a), 0);\n}\n\n// l:line, s:segment\nbool isis_ls(Line l, Line s)\n{\n    return isis_ll(l, s) &&\n           (cross(l.b - l.a, s.a - l.a) * cross(l.b - l.a, s.b - l.a) < eps);\n}\n\n// s:segment, t:segment\nbool isis_ss(Line s, Line t)\n{\n    return ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 &&\n           ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0;\n}\n\n// p が l:line 上に存在するか\nbool isis_lp(Line l, Point p)\n{\n    return (abs(cross(l.b - p, l.a - p)) < eps);\n}\n\nbool isis_sp(Line s, Point p)\n{\n    return (abs(s.a - p) + abs(s.b - p) - abs(s.b - s.a) < eps);\n}\n\n// p から l に下ろした足との交点\nPoint proj(Line l, Point p)\n{\n    ld t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n    return l.a + t * (l.a - l.b);\n}\n\n// l:line, t:line の交点\nPoint is_ll(Line l, Line m)\n{\n    Point lv = l.b - l.a, mv = m.b - m.a;\n    assert(cross(lv, mv) != 0);\n    return l.a + lv * cross(mv, m.a - l.a) / cross(mv, lv);\n}\n\n// p, l:line の距離\nld dist_lp(Line l, Point p)\n{\n    return abs(p - proj(l, p));\n}\n\nld dist_ll(Line l, Line m)\n{\n    return isis_ll(l, m) ? 0 : dist_lp(l, m.a);\n}\n\nld dist_ls(Line l, Line s)\n{\n    return isis_ls(l, s) ? 0 : std::min(dist_lp(l, s.a), dist_lp(l, s.b));\n}\n\nld dist_sp(Line s, Point p)\n{\n    Point r = proj(s, p);\n    return isis_sp(s, r) ? abs(r - p) : std::min(abs(s.a - p), abs(s.b - p));\n}\n\nld dist_ss(Line s, Line t)\n{\n    if (isis_ss(s, t))\n        return 0;\n    return std::min({dist_sp(s, t.a), dist_sp(s, t.b), dist_sp(t, s.a), dist_sp(t, s.b)});\n}\n\n// a, b の垂直二等分線. a -> b を90度反時計回り回転\nLine bisector(Point a, Point b)\n{\n    Point mid = (a + b) * Point(0.5, 0);\n    return Line(mid, mid + (b - a) * Point(0, pi / 2));\n}\n\n// 直線 l, m のなす角を求める\nld degree_ll(Line l, Line m)\n{\n    ld cos_shita = dot(l, m) / (abs(l.b - l.a) * abs(m.b - m.a));\n    if (cos_shita < -1.0)\n        cos_shita = -1.0;\n    if (cos_shita > 1.0)\n        cos_shita = 1.0;\n    ld shita = acos(cos_shita);\n    // shita = sita * 180.0 / PI;\n    return shita;\n}\n\n// c1, c2 の交点\nstd::vector<Point> is_cc(Circle c1, Circle c2)\n{\n    std::vector<Point> res;\n    ld d = abs(c1.p - c2.p);\n    ld rc = (d * d + c1.r * c1.r - c2.r * c2.r) / (2 * d);\n    ld dfr = c1.r * c1.r - rc * rc;\n    if (abs(dfr) < eps)\n        dfr = 0.0;\n    else if (dfr < 0.0)\n        return res; // no intersection\n    ld rs = sqrt(dfr);\n    Point diff = (c2.p - c1.p) / d;\n    res.emplace_back(c1.p + diff * Point(rc, rs));\n    if (dfr != 0.0)\n        res.emplace_back(c1.p + diff * Point(rc, -rs));\n    return res;\n}\n\nstd::vector<Point> is_lc(Circle c, Line l)\n{\n    std::vector<Point> res;\n    ld d = dist_lp(l, c.p);\n    if (d < c.r + eps)\n    {\n        ld len = (d > c.r) ? 0.0 : sqrt(c.r * c.r - d * d); //safety;\n        Point nor = (l.a - l.b) / abs(l.a - l.b);\n        res.emplace_back(proj(l, c.p) + len * nor);\n        res.emplace_back(proj(l, c.p) - len * nor);\n    }\n    return res;\n}\n\nstd::vector<Point> is_sc(Circle c, Line l)\n{\n    std::vector<Point> v = is_lc(c, l), res;\n    for (Point p : v)\n        if (isis_sp(l, p))\n            res.emplace_back(p);\n    return res;\n}\n\n// p から c への接線\nstd::vector<Line> tangent_cp(Circle c, Point p)\n{\n    std::vector<Line> ret;\n    Point v = c.p - p;\n    ld d = abs(v);\n    ld l = sqrt(norm(v) - c.r * c.r);\n    if (std::isnan(l))\n    {\n        return ret;\n    }\n    Point v1 = v * Point(l / d, c.r / d);\n    Point v2 = v * Point(l / d, -c.r / d);\n    ret.emplace_back(Line(p, p + v1));\n    if (l < eps)\n        return ret;\n    ret.emplace_back(Line(p, p + v2));\n    return ret;\n}\n\n// c1, c2 の共通接線\nstd::vector<Line> tangent_cc(Circle c1, Circle c2)\n{\n    std::vector<Line> ret;\n    if (abs(c1.p - c2.p) - (c1.r + c2.r) > -eps)\n    {\n        Point center = (c1.p * c2.r + c2.p * c1.r) / (c1.r + c2.r);\n        ret = tangent_cp(c1, center);\n    }\n    if (abs(c1.r - c2.r) > eps)\n    {\n        Point out = (-c1.p * c2.r + c2.p * c1.r) / (c1.r - c2.r);\n        std::vector<Line> nret = tangent_cp(c1, out);\n        ret.insert(ret.end(), nret.begin(), nret.end());\n    }\n    else\n    {\n        Point v = c2.p - c1.p;\n        v /= abs(v);\n        Point q1 = c1.p + v * Point(0, 1) * c1.r;\n        Point q2 = c1.p + v * Point(0, -1) * c1.r;\n        ret.emplace_back(Line(q1, q1 + v));\n        ret.emplace_back(Line(q2, q2 + v));\n    }\n    return ret;\n}\n\nusing Polygon = std::vector<Point>;\n\nld area(const Polygon &p)\n{\n    ld res = 0;\n    int n = p.size();\n    for (int i = 0; i < n; i++)\n    {\n        res += cross(p[i], p[(i + 1) % n]);\n    }\n    return res / 2;\n}\n\nbool is_counter_clockwise(const Polygon &poly)\n{\n    ld angle = 0;\n    int n = poly.size();\n    for (int i = 0; i < n; i++)\n    {\n        Point a = poly[i], b = poly[(i + 1) % n], c = poly[(i + 2) % n];\n        angle += arg((c - b) / (b - a));\n    }\n    return angle > eps;\n}\n\n// -1 => out\n//  0 => on\n//  1 => in\nint is_in_polygon(const Polygon &poly, Point p)\n{\n    ld angle = 0;\n    int n = poly.size();\n    for (int i = 0; i < n; i++)\n    {\n        Point a = poly[i], b = poly[(i + 1) % n];\n        if (isis_sp(Line(a, b), p))\n            return 1;\n        angle += arg((b - p) / (a - p));\n    }\n    return eq(angle, 0) ? 0 : 2;\n}\n\n// 凸包\nPolygon convex_hull(std::vector<Point> ps)\n{\n    int n = ps.size();\n    int k = 0;\n    sort(ps.begin(), ps.end());\n    Polygon ch(2 * n);\n    for (int i = 0; i < n; ch[k++] = ps[i++])\n        while (k >= 2 && ccw(ch[k - 2], ch[k - 1], ps[i]) <= 0)\n            --k;\n    for (int i = n - 2, t = k + 1; i >= 0; ch[k++] = ps[i--])\n        while (k >= t && ccw(ch[k - 2], ch[k - 1], ps[i]) <= 0)\n            --k;\n    ch.resize(k - 1);\n    return ch;\n}\n\n// 凸包カット\nPolygon convex_cut(const Polygon &ps, Line l)\n{\n    int n = ps.size();\n    Polygon Q;\n    for (int i = 0; i < n; i++)\n    {\n        Point A = ps[i], B = ps[(i + 1) % n];\n        Line m = Line(A, B);\n        if (ccw(l.a, l.b, A) != -1)\n            Q.emplace_back(A);\n        if (ccw(l.a, l.b, A) * ccw(l.a, l.b, B) < 0 && isis_ll(l, m))\n            Q.emplace_back(is_ll(l, m));\n    }\n    return Q;\n}\n\nvoid add_point(std::vector<Point> &ps, Point p)\n{\n    for (Point q : ps)\n        if (abs(q - p) < eps)\n            return;\n    ps.emplace_back(p);\n}\n\n// Voronoi 図: http://judge.u-aizu.ac.jp/onlinejudge/review.jsp?rid=3668810\n// polygon を ps でボロノイ分割する時の ps[index] に割り当てられる多角形\nPolygon voronoi(const Polygon &polygon, const std::vector<Point> &ps, int index)\n{\n    Polygon p = polygon;\n    int n = ps.size();\n    for (int j = 0; j < n; j++)\n    {\n        if (index == j)\n            continue;\n        Line l = bisector(ps[index], ps[j]);\n        p = convex_cut(p, l);\n    }\n    return p;\n}\n\nvoid solve_cgl_1_a()\n{\n    auto p1 = input_point(), p2 = input_point();\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        auto p = input_point();\n        auto ret = proj(Line(p1, p2), p);\n        cout << fixed << setprecision(10) << ret.real() << \" \" << ret.imag() << endl;\n    }\n}\n\nvoid solve_cgl_1_b()\n{\n    auto p1 = input_point(), p2 = input_point();\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        auto p = input_point();\n        auto ret = proj(Line(p1, p2), p);\n        cout << fixed << setprecision(10) << 2 * ret.real() - p.real() << \" \" << 2 * ret.imag() - p.imag() << endl;\n    }\n}\n\nvoid solve_cgl_1_c()\n{\n    auto p0 = input_point(), p1 = input_point();\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        auto p2 = input_point();\n        int ret = ccw(p0, p1, p2);\n        if (ret == 1)\n            cout << \"COUNTER_CLOCKWISE\" << endl;\n        else if (ret == -1)\n            cout << \"CLOCKWISE\" << endl;\n        else if (ret == 2)\n            cout << \"ONLINE_BACK\" << endl;\n        else if (ret == -2)\n            cout << \"ONLINE_FRONT\" << endl;\n        else\n            cout << \"ON_SEGMENT\" << endl;\n    }\n}\n\nvoid solve_cgl_2_a()\n{\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        auto p0 = input_point(), p1 = input_point(), p2 = input_point(), p3 = input_point();\n        Line l(p0, p1), m(p2, p3);\n        if (!isis_ll(l, m))\n        {\n            cout << 2 << endl;\n        }\n        else if (eq(dot(l.b - l.a, m.b - m.a), 0))\n        {\n            cout << 1 << endl;\n        }\n        else\n        {\n            cout << 0 << endl;\n        }\n    }\n}\n\nvoid solve_cgl_2_b()\n{\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        auto p0 = input_point(), p1 = input_point(), p2 = input_point(), p3 = input_point();\n        Line s1(p0, p1), s2(p2, p3);\n        cout << (isis_ss(s1, s2) ? 1 : 0) << endl;\n    }\n}\n\nvoid solve_cgl_2_c()\n{\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        auto p0 = input_point(), p1 = input_point(), p2 = input_point(), p3 = input_point();\n        Line s1(p0, p1), s2(p2, p3);\n        auto ret = is_ll(s1, s2);\n        cout << fixed << setprecision(10) << ret.real() << \" \" << ret.imag() << endl;\n    }\n}\n\nvoid solve_cgl_2_d()\n{\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        auto p0 = input_point(), p1 = input_point(), p2 = input_point(), p3 = input_point();\n        Line s1(p0, p1), s2(p2, p3);\n        cout << fixed << setprecision(10) << dist_ss(s1, s2) << endl;\n    }\n}\n\nvoid solve_cgl_3_a()\n{\n    Polygon p;\n    int n;\n    cin >> n;\n    for (int i = 0; i < n; i++)\n    {\n        p.push_back(input_point());\n    }\n    cout << fixed << setprecision(10) << area(p) << endl;\n}\n\nvoid solve_cgl_3_b()\n{\n    Polygon p;\n    int n;\n    cin >> n;\n    for (int i = 0; i < n; i++)\n    {\n        p.push_back(input_point());\n    }\n    auto cv = convex_hull(p);\n    cout << (p == cv ? 1 : 0) << endl;\n}\n\nvoid solve_cgl_3_c()\n{\n    Polygon ps;\n    int n;\n    cin >> n;\n    for (int i = 0; i < n; i++)\n    {\n        ps.push_back(input_point());\n    }\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        auto p = input_point();\n        int ret = is_in_polygon(ps, p);\n        cout << ret + 1 << endl;\n    }\n}\n\nvoid solve_cgl_4_a()\n{\n    int n;\n    cin >> n;\n    Polygon ps;\n    for (int i = 0; i < n; i++)\n    {\n        ps.push_back(input_point());\n    }\n    auto ret = convex_hull(ps);\n    for (auto p : ret)\n    {\n        cout << fixed << setprecision(10) << p.real() << \" \" << p.imag() << endl;\n    }\n}\n\n// cgl_4_b: 凸多角形の直径\n\nvoid solve_cgl_4_c()\n{\n    int n;\n    cin >> n;\n    Polygon ps;\n    for (int i = 0; i < n; i++)\n    {\n        ps.push_back(input_point());\n    }\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        auto p0 = input_point(), p1 = input_point();\n        auto l = Line(p0, p1);\n        auto ret = convex_cut(ps, l);\n        cout << fixed << setprecision(10) << area(ret) << endl;\n    }\n}\n\n// cgl_5_a: 最近点対\n\n// cgl_6_a: 線分交差\n\nvoid solve_cgl_7_a()\n{\n    auto p0 = input_point();\n    ld r0, r1;\n    cin >> r0;\n    auto p1 = input_point();\n    cin >> r1;\n    Circle c0(p0, r0), c1(p1, r1);\n    auto ls = tangent_cc(c0, c1);\n    cout << ls.size() << endl;\n}\n\nvoid solve_cgl_7_d()\n{\n    auto p = input_point();\n    ld r;\n    cin >> r;\n    Circle c(p, r);\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        auto p0 = input_point(), p1 = input_point();\n        Line l(p0, p1);\n        auto ret = is_lc(c, l);\n        assert(ret.size() <= 2);\n        sort(ret.begin(), ret.end());\n        cout << ret[0].real() << \" \" << ret[0].imag();\n        if (ret.size() == 2)\n        {\n            cout << \" \" << ret[1].real() << \" \" << ret[1].imag();\n        }\n        cout << endl;\n    }\n}\n\nvoid solve_cgl_7_e()\n{\n    auto p0 = input_point();\n    ld r0, r1;\n    cin >> r0;\n    auto p1 = input_point();\n    cin >> r1;\n    Circle c0(p0, r0), c1(p1, r1);\n    auto ret = is_cc(c0, c1);\n    if ((int)ret.size() == 1)\n        ret.push_back(ret[0]);\n    sort(ret.begin(), ret.end());\n    cout << ret[0].real() << \" \" << ret[0].imag() << \" \" << ret[1].real() << \" \" << ret[1].imag() << endl;\n}\n\nvoid solve_cgl_7_f()\n{\n    auto p = input_point();\n    auto p0 = input_point();\n    ld r0;\n    cin >> r0;\n    Circle c(p0, r0);\n    auto ls = tangent_cp(c, p);\n    vector<Point> ret;\n    for (auto l : ls)\n    {\n        auto ps = is_lc(c, l);\n        assert((int)ps.size() == 1);\n        ret.push_back(ps[0]);\n    }\n    sort(ret.begin(), ret.end());\n    cout << ret[0].real() << \" \" << ret[0].imag() << \" \" << ret[1].real() << \" \" << ret[1].imag() << endl;\n}\n\nvoid solve_cgl_7_g()\n{\n    ld r0, r1;\n    auto p0 = input_point();\n    cin >> r0;\n    auto p1 = input_point();\n    cin >> r1;\n    Circle c0(p0, r0), c1(p1, r1);\n    auto ls = tangent_cc(c0, c1);\n    vector<Point> ret;\n    for (auto l : ls)\n    {\n        auto ps = is_sc(c0, l);\n        assert((int)ps.size() == 1);\n        ret.push_back(ps[0]);\n    }\n    sort(ret.begin(), ret.end());\n    for (auto p : ret)\n    {\n        cout << fixed << setprecision(10) << p.real() << \" \" << p.imag() << endl;\n    }\n}\n\n// cgl_7_h: 円と多角形の共通部分(は?)\n// 参考実装: http://judge.u-aizu.ac.jp/onlinejudge/review.jsp?rid=2114290\n\nint main()\n{\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n\n    solve_cgl_2_d();\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nstruct cww{cww(){ios::sync_with_stdio(false);cin.tie(0);}}star;\n#define P(x) cout << (x) << \"\\n\"\n#define p(x) cout << (x)\n#define all(c) (c).begin(), (c).end()\n#define rall(c) (c).rbegin(), (c).rend()\n#define vv(type, c, m, n, i) vector<vector<type>> c(m, vector<type>(n, i));\n#define rep(i,a,n) for(int i=(a), i##_len=(n); i<i##_len; ++i)\n#define rrep(i,a,n) for(int i=(a), i##_len=(n); i>i##_len; --i)\n#define len(x) ((int)(x).size())\n#define mp make_pair\n#define eb emplace_back\n#define fi first\n#define se second\ntypedef long long ll;\ntypedef long double ld;\ntypedef vector<int> vi;\ntypedef vector<double> vd;\ntypedef vector<long long> vll;\ntypedef vector<string> vs;\ntypedef vector<bool> vb;\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\nenum CCW { ONLINE_FRONT = -2, CLOCKWISE, ON_SEGMENT, COUNTER_CLOCKWISE, ONLINE_BACK };\nstruct Point {\n\tdouble x, y;\n\tPoint(double x = 0, double y = 0) : x(x), y(y) {}\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (Point p) { return Point(x * p.x, y * p.y); }\n\tPoint operator * (double p) { return Point(x * p, y * p); }\n\tPoint operator / (Point p) { return Point(x / p.x, y / p.y); }\n\tPoint operator / (double p) { return Point(x / p, y / p); }\n\tvoid insert(double a, double b) { x = a; y = b; }\n\tdouble norm() { return x * x + y * y; }\n\tdouble abs() { return sqrt(norm()); }\n\tbool operator < (const Point &p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\tbool operator == (const Point &p) const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\ntypedef Point Vector;\nstruct Segment {\n\tVector p1, p2;\n\tSegment(double x1 = 0.0, double y1 = 0.0, double x2 = 0.0, double y2 = 0.0):\n\t\tp1(x1, y1), p2(x2, y2) {}\n\tSegment(Point a1, Point a2) : p1(a1), p2(a2) {}\n\tvoid insert(Vector a1, Vector a2) { p1 = a1; p2 = a2; }\n};\ntypedef Segment Line;\ninline double dot(Vector a, Vector b) { return a.x * b.x + a.y * b.y; }\ninline double cross(Vector a, Vector b) { return a.x * b.y - a.y * b.x; }\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif(cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif(cross(a, b) < -EPS) return CLOCKWISE;\n\tif(dot(a, b) < -EPS) return ONLINE_BACK;\n\tif(a.norm() < b.norm()) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n\treturn (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n\t\t\tccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\nbool intersect(Segment s1, Segment s2) {\n\treturn intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\ninline bool isOrthogonal(Vector a, Vector b) { return equals(dot(a, b), 0.0); }\ninline bool isOrthogonal(Vector a1, Vector a2, Vector b1, Vector b2) {\n\treturn isOrthogonal(a1 - a2, b1 - b2);\n}\ninline bool isOrthogonal(Segment s1, Segment s2) {\n\treturn equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\ninline bool isParallel(Vector a, Vector b) { return equals(cross(a, b), 0.0); }\ninline bool isParallel(Vector a1, Vector a2, Vector b1, Vector b2) {\n\treturn isParallel(a1 - a2, b1 - b2);\n}\ninline bool isParallel(Segment s1, Segment s2) {\n\treturn equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / base.norm();\n\treturn s.p1 + base * r;\n}\nPoint reflect(Segment s, Point p) {\n\treturn p + (project(s, p) - p) * 2.0;\n}\ndouble getDistance(Point a, Point b) { return (a - b).abs(); }\ndouble getDistanceLP(Line l, Point p) {\n\treturn abs(cross(l.p2 - l.p1, p - l.p1) / (l.p2 - l.p1).abs());\n}\ndouble getDistanceSP(Segment s, Point p) {\n\tif(dot(s.p2 - s.p1, p - s.p1) < 0.0) return (p - s.p1).abs();\n\tif(dot(s.p1 - s.p2, p - s.p2) < 0.0) return (p - s.p2).abs();\n\treturn getDistanceLP(s, p);\n}\ndouble getDistance(Segment s1, Segment s2) {\n\tif(intersect(s1, s2)) return 0.0;\n\treturn min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n\t\t\t\tmin(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\nint main() {\n\tcout << setprecision(10) << fixed;\n\tint q; cin >> q;\n\tSegment s1, s2;\n\trep(i, 0, q) {\n\t\tcin >> s1.p1.x >> s1.p1.y >> s1.p2.x >> s1.p2.y >> s2.p1.x >> s2.p1.y >> s2.p2.x >> s2.p2.y;\n\t\tP(getDistance(s1, s2));\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n#define eps 0\ntypedef complex<double> C;\ntypedef struct{\n\tdouble x,y;\n\t\n}point;\ntypedef struct{\npoint a,b;\n}line;\n\nC convert(point a){\n\treturn C(a.x,a.y);\n}\npoint convert(C a){\n\treturn {a.real(),a.imag()};\n}\n\nline make(point a,point b){\n\tline res; res.a=a; res.b=b;\n\treturn res;\n}\n\npoint make(double x,double y){\n\tpoint res;\n\tres.x=x;\n\tres.y=y;\n\treturn res;\n}\n//a-b\npoint vec(point a,point b){\n\tpoint res;\n\tres.x=a.x-b.x;\n\tres.y=a.y-b.y;\n\treturn res;\n}\n\n// a・b\ndouble dot(point a,point b){\n\treturn a.x*b.x+a.y*b.y;\n}\n//|a|\ndouble  norm(point a){\nreturn sqrt(dot(a,a));\n}\n//|a|^2\ndouble absolute(point a){\nreturn dot(a,a);\n}\n//a×ｂ　外積z成分\ndouble cross(point a,point b){\nreturn a.x*b.y-a.y*b.x;\n}\n//a=x1+iy1,b=x2+iy2 a*b\npoint imaseki(point a,point b){\npoint res;\nres.x=a.x*b.x-a.y*b.y;\nres.y=a.x*b.y+a.y*b.x;\nreturn res;\n}\n//vec * a\npoint product(point v,double a){\n\tpoint res; res.x=v.x*a; res.y=v.y*a;\n\treturn res;\n}\n\n//共役\npoint conjugate(point a){\npoint res;\nres.x=a.x;\nres.y=-a.y;\nreturn res;\n}\n\n\nint ccw(point p0,point p1,point p2){\npoint a=vec(p1,p0);\npoint b=vec(p2,p0);\n\tif(cross(a,b)>eps){\n\treturn 1;//counter_clockwise\n\t}else if(cross(a,b)<eps){\n\treturn -1;//clockwise\n\t}else if(dot(a,b)<-eps){\n\treturn 2;//online_back\n\t}else if(absolute(a)<absolute(b)){\n\treturn -2;//online_front\n\t}else{\n\treturn 0;//on_segment\n\t}\n\n}\n//交差判定　s1-s2 s3-s4\nbool intersect(point s1,point s2,point s3,point s4){\n if(ccw(s1,s2,s3)*ccw(s1,s2,s4)<=0 && ccw(s3,s4,s1)*ccw(s3,s4,s2)<=0)\n        return true;\n    return false;\n}\nbool intersect(line l1,line l2){\n\treturn intersect(l1.a,l1.b,l2.a,l2.b);\n}\n//交点\npoint crosspoint(line l1,line l2){\n\tpoint veca=vec(l1.b,l1.a);\n\tpoint vecb=vec(l2.b,l2.a);\n\tdouble d= cross(veca,vecb);\n\tdouble e= cross(vecb,vec(l2.b,l1.a));\n\treturn vec(l1.a,product(veca,e/d));\n\n}\n\n//距離　point-point \ndouble distance (point a,point b){\nreturn norm(vec(a,b));\n}\n//距離 point-line\ndouble distance(line l,point p){\nreturn abs(cross(vec(p,l.a),vec(l.b,l.a))/norm(vec(l.b,l.a)));\n}\n//距離　line-line\ndouble distance(line a,line b){\n\tif(intersect(a,b))return 0;\n\tdouble m= distance(a.a,b.a);\n\tm=min(m,distance(a.a,b.b));\n\tm=min(m,distance(a.b,b.a));\n\tm=min(m,distance(a.b,b.b));\n\treturn m;\n}\n\nint main(){\n\tint q;\n\tcin>>q;\n\tfor(int i=0;i<q;i++){\n\tdouble x,y;\n\tpoint p0,p1,p2,p3;\n\tline l0,l1;\n\tcin>>x>>y;\n\tp0=make(x,y);\n\tcin>>x>>y;\n\tp1=make(x,y);\n\tcin>>x>>y;\n\tp2=make(x,y);\n\tcin>>x>>y;\n\tp3=make(x,y);\n\tl0=make(p0,p1);\n\tl1=make(p2,p3);\n\tprintf(\"%0.10lf\\n\",distance(l0,l1));\n\n\t}\nreturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nconst double EPS =  1e-10;\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nclass Point{\n    public:\n    double x, y;\n\n    Point(double x = 0, double y = 0): x(x), y(y){}\n\n    Point operator + (Point p){\n        return Point(x + p.x, y + p.y);\n    }\n    Point operator - (Point p){\n        return Point(x - p.x, y - p.y);\n    }\n    Point operator * (Point p){\n        return Point(x * p.x, y * p.y);\n    }\n    Point operator * (double r){\n        return Point(x * r, y * r);\n    }\n    Point operator / (Point p){\n        return Point(x / p.x, y / p.y);\n    }\n\n    double abs(){\n        return sqrt(norm());\n    }\n    double norm(){\n        return x * x + y * y;\n    }\n\n    bool operator < (const Point &p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n    bool operator == (const Point &p) const {\n        return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n    }\n    \n    \n};\n\ntypedef Point Vector;\n\nclass Segment : public Point{\n    public:\n    Point p1, p2;\n    Segment(Point p1_, Point p2_){\n        p1 = p1_;\n        p2 = p2_;\n    }\n    Segment(double a, double b, double c, double d){\n        Point(a, b);\n        Point(c, d);\n    }\n    \n};\n\ntypedef Segment Line;\n\ndouble dot(Point a, Point b){\n    return a.x * b.x + a.y * b.y;\n}\ndouble cross(Point a, Point b){\n    return a.x * b.y - a.y * b.x;\n}\nbool isOrthogonal(Point a, Point b){\n    return equals(dot(a, b), 0.0);\n}\nbool isParallel(Point a, Point b){\n    return equals(cross(a, b), 0.0);\n}\nbool isOrthogonal(Segment s1, Segment s2){\n    return equals(dot(s1.p2 - s1.p1, s2.p2 - s1.p1), 0.0);\n}\nbool isParallel(Segment s1, Segment s2){\n    return equals(cross(s1.p2 - s1.p1, s2.p2 - s1.p1), 0.0);\n}\n\nPoint project(Segment s, Point p){\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / base.norm();\n    //Vector tmp = s.p1 + base * r;\n    Vector tmp = base * r;\n    return s.p1 + base * r;\n}\n\nPoint reflect(Segment s, Point p){\n    return p + (project(s, p) - p) * 2;\n}\n\nint ccw(Point p1, Point p2, Point p3){\n    Vector a = p2 - p1;\n    Vector b = p3 - p1;\n    if( cross(a, b) > EPS ) return 1;\n    else if( cross(a, b) < -EPS ) return -1;\n    else if( dot(a, b) < -EPS ) return 2;\n    else if( a.norm() < b.norm() ) return -2;\n    //std::cout << std::fixed << std::setprecision(10) << ans.x << \" \" << ans.y << std::endl;\n    else return 0;\n}\n\nbool intersect(Point p1, Point p2, Point p3, Point p4){\n    return(ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 && ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\n\nbool intersect(Segment s1, Segment s2){\n    return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\ndouble getDistance(Point a, Point b){\n    return (a - b).abs();\n}\n\ndouble getDistanceLP(Line l, Point p){\n    return abs(cross(l.p2 - l.p1, p - l.p1)) / (l.p2 - l.p1).abs();\n}\n\ndouble getDistanceSP(Segment s, Point p){\n    if(dot(s.p2 - s.p1, p - s.p1) < 0.0) return (p - s.p1).abs();\n    if(dot(s.p1 - s.p2, p - s.p2) < 0.0) return (p - s.p2).abs();\n    return getDistanceLP(s, p);\n}\n\ndouble getDistance(Segment s1, Segment s2){\n    if( intersect(s1, s2) ) return 0.0;\n    return std::min(std::min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)), std::min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\nint main(void){\n    Point p0, p1, p2, p3;\n    \n    \n    int q;\n    std::cin >> q;\n\n    for(int i = 0; i < q; i++){\n        std::cin >> p0.x >> p0.y >> p1.x >> p1.y >> p2.x >> p2.y >> p3.x >> p3.y;\n        Segment s1(p0, p1);\n        Segment s2(p2, p3);\n\n        std::cout << std::fixed << std::setprecision(10) << getDistance(s1, s2) << std::endl;\n    }\n\n    return 0;\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <cmath>\n#include <array>\n#include <algorithm>\n\nusing Number = double;\n\nconst Number EPS = 1e-10;\nconst Number INF = 1e10;\nconst Number PI = acos(-1.0);\n\ninline int sign(Number x) { return (x < -EPS) ? -1 : (x > EPS) ? +1 : 0; }\ninline bool equal(Number a, Number b) { return sign(a - b) == 0; }\n\n// change between degree and radian\ninline Number to_radian(const Number degree) { return degree * PI / 180.0; }\ninline Number to_degree(const Number radian) { return radian * 180.0 / PI; }\n\n\n/**\n * Point in two dimensional\n */\nclass Point {\npublic:\n    Number x, y;\n\n    Point() {}\n    Point(Number x, Number y) : x(x), y(y) {}\n\n    // Arithmetic operator between points\n    Point operator+(const Point &rhs) const {\n        return Point(this->x + rhs.x, this->y + rhs.y);\n    }\n    Point operator-(const Point &rhs) const {\n        return Point(this->x - rhs.x, this->y - rhs.y);\n    }\n    Point operator*(const Point &rhs) const { // cross product between points\n        return Point(this->x * rhs.x - this->y * rhs.y,\n                     this->x * rhs.x + this->y * rhs.x);\n    }\n\n    // Unary operator and compound assignment operator\n    Point operator-() const {\n        return Point(-this->x, -this->y);\n    }\n    Point& operator+=(const Point &rhs) {\n        return *this = *this + rhs;\n    }\n    Point& operator-=(const Point &rhs) {\n        return *this = *this - rhs;\n    }\n\n    // Arithmetic operator between point and number\n    Point operator*(Number rhs) const {\n        return Point(this->x * rhs, this->y * rhs);\n    }\n    Point operator/(Number rhs) const {\n        return Point(this->x / rhs, this->y / rhs);\n    }\n\n    // Comparison operation\n    bool operator==(const Point &rhs) const {\n        return sign(this->x - rhs.x) == 0 && sign(this->y - rhs.y) == 0;\n    }\n    bool operator<(const Point &rhs) const {\n        return (this->x < rhs.x) || (this->x == rhs.x && this->y < rhs.y);\n    }\n\n    // Other operator\n    Number abs(void) const {\n        return sqrt(this->x * this->x + this->y * this->y);\n    }\n    Number abs2(void) const {\n        return this->x * this->x + this->y * this->y;\n    }\n    Number arg(void) const {\n        return atan2(this->y, this->x);\n    }\n    Number dot(const Point &rhs) {\n        return this->x * rhs.x + this->y * rhs.y;\n    }\n    Point rotate90(void) const {\n        return Point(-this->y, this->x);\n    }\n    Point rotate(double angle) const {\n        return Point(cos(angle) * this->x - sin(angle) * this->y,\n                     sin(angle) * this->x + cos(angle) * this->y);\n    }\n\n};\ninline Number dot(const Point &p1, const Point &p2) {\n    return p1.x * p2.x + p1.y * p2.y;\n}\ninline Number abs_cross(const Point &p1, const Point &p2) {\n    return p1.x * p2.y - p1.y * p2.x;\n}\n// Output of a point\nstd::ostream& operator<<(std::ostream &os, const Point &p) {\n    return os <<  p.x << ' ' << p.y;\n}\n// Input of a point\nstd::istream& operator>>(std::istream &is, Point &p) {\n    return is >> p.x >> p.y;\n}\n\n// Counter-Clockwise predicate (a, b, c)\nenum CCW {\n    COUNTER_CLOCKWISE = 1,      // counter clockwise\n    CLOCKWISE         = -1,     // clockwise\n    ONLINE_FRONT      = 2,      // a--c--b on line\n    ONLINE_BACK       = -2,      // c--a--b on line\n    ON_SEGMENT        = 0,     // a--b--c on line\n};\nCCW ccw(const Point &a, Point b, Point c) {\n    b -= a;  c -= a;\n    if (abs_cross(b, c) > EPS) return COUNTER_CLOCKWISE;\n    if (abs_cross(b, c) < -EPS) return CLOCKWISE;\n    if (dot(b, c) < 0)       return ONLINE_BACK;\n    if (b.abs2() < c.abs2())   return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\n\n/**\n * Line in two dimensional\n */\nclass Line : public std::array<Point, 2> {\npublic:\n    Line() {}\n    Line(const Point &p1, const Point &p2) {\n        (*this)[0] = p1;\n        (*this)[1] = p2;\n    }\n};\n// Input of a line\nstd::istream& operator>>(std::istream &is, Line &l) {\n    return is >> l[0] >> l[1];\n}\ninline CCW ccw(const Line &l, const Point &p) {\n    return ccw(l[0], l[1], p);\n}\n\n\n/**\n * Segment in two dimensional\n */\nclass Segment : public Line {\npublic:\n    Segment() {}\n    Segment(const Point &p1, const Point &p2) : Line(p1, p2) {}\n};\n\n\n/**\n * Circle in two dimensional\n */\nclass Circle : public Point {\npublic:\n    Number r;\n    Circle(const Point &p, Number r = 0.0) : Point(p), r(r) {}\n};\n// Input of a circle\nstd::istream& operator>>(std::istream &is, Circle &c) {\n    return is >> c.x >> c.y >> c.r;\n}\n\n\n\n/**\n * Intersection testing\n */\ninline bool IsOrthogonal(const Line &l1, const Line &l2) {\n    return equal(dot(l1[0] - l1[1], l2[0] - l2[1]), 0.0);\n}\ninline bool IsParallel(const Line &l1, const Line &l2) {\n    return equal(abs_cross(l1[0] - l1[1], l2[0] - l2[1]), 0.0);\n}\n\ninline bool IsIntersect(const Line &l, const Point &p) {\n    return abs(ccw(l[0], l[1], p)) != 1;\n}\ninline bool IsIntersect(const Segment &s, const Point &p) {\n    return ccw(s[0], s[1], p) == 0;\n}\ninline bool IsIntersect(const Line &l1, const Line l2) {\n    return !IsParallel(l1, l2) || IsParallel(l1, Line(l1[0], l2[0]));\n}\ninline bool IsIntersect(const Line &l, const Segment &s) {\n    return abs_cross(l[1] - l[0], s[0] - l[0]) *\n        abs_cross(l[1] - l[0], s[1] - l[0]) < EPS;\n}\ninline bool IsIntersect(const Segment &s1, const Segment &s2) {\n    return ccw(s1[0], s1[1], s2[0]) * ccw(s1[0], s1[1], s2[1]) <= 0 &&\n        ccw(s2[0], s2[1], s1[0]) * ccw(s2[0], s2[1], s1[1]) <= 0;\n}\n\n\n/**\n * Intersection point and Distance\n */\nPoint Projection(const Line &l, const Point &p) {\n    Point dir = l[1] - l[0];\n    Number t = dot(p - l[0], dir) / dir.abs2();\n    return l[0] + dir * t;\n}\ninline Point Reflection(const Line &l, const Point &p) {\n    return Projection(l, p) * 2.0 - p;\n}\n\nPoint CrossPoint(const Line &s1, const Line &s2) {\n    Point base = s2[1] - s2[0];\n    Number d1 = abs(abs_cross(base, s1[0] - s2[0]));\n    Number d2 = abs(abs_cross(base, s1[1] - s2[0]));\n    Number t = d1 / (d1 + d2);\n    return s1[0] + (s1[1] - s1[0]) * t;\n}\n\ninline Number Distance(const Point &p1, const Point &p2) {\n    return (p1 - p2).abs();\n}\ninline Number Distance(const Line &l, const Point &p) {\n    return (p - Projection(l, p)).abs();\n}\ninline Number Distance(const Segment &s, const Point &p) {\n    if (sign(dot(s[1] - s[0], p - s[0])) == -1) return (p - s[0]).abs();\n    if (sign(dot(s[0] - s[1], p - s[1])) == -1) return (p - s[1]).abs();\n    return (p - Projection(s, p)).abs();\n}\ninline Number Distance(const Line &l1, const Line &l2) {\n    return IsIntersect(l1, l2) ? 0 : Distance(l1, l2[0]);\n}\ninline Number Distance(const Line &l, const Segment &s) {\n    if (IsIntersect(l, s)) return 0.0;\n    return std::min(Distance(l, s[0]), Distance(l, s[1]));\n}\ninline Number Distance(const Segment &s1, const Segment &s2) {\n    if (IsIntersect(s1, s2)) return 0.0;\n    return std::min({Distance(s1, s2[0]), Distance(s1, s2[1]),\n                Distance(s2, s1[0]), Distance(s2, s1[1])});\n}\n\nint main()\n{\n    std::cout << std::fixed << std::setprecision(15);\n\n    Segment s1, s2;\n    int q;\n\n    std::cin >> q;\n\n    while (q--) {\n        std::cin >> s1 >> s2;\n        std::cout << Distance(s1, s2) << '\\n';\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "//#define NDEBUG\n#include \"bits/stdc++.h\"\n#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <unordered_set>\n#include <array>\n#include <random>\n#ifdef _MSC_VER\n#include <ppl.h>\n//#include <boost/multiprecision/cpp_dec_float.hpp>\n//#include <boost/multiprecision/cpp_int.hpp>\n//#include <boost/rational.hpp>\n//#include <opencv2/core.hpp>\n//#include <opencv2/imgproc.hpp>\n//#include <opencv2/highgui.hpp>\n//#else\n//#include <omp.h>\n#endif\n\n\nusing namespace std;\n\n#define DUMPOUT cerr\n#define dump(...) DUMPOUT<<\"  \";DUMPOUT<<#__VA_ARGS__<<\" :[\"<<__LINE__<<\":\"<<__FUNCTION__<<\"]\"<<endl;DUMPOUT<<\"    \";dump_func(__VA_ARGS__)\n\nusing uint = unsigned; using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using pdd = pair<double, double>; using pss = pair<string, string>;\ntemplate <typename _KTy, typename _Ty> ostream& operator << (ostream& o, const pair<_KTy, _Ty>& m) { o << \"{\" << m.first << \", \" << m.second << \"}\"; return o; }\ntemplate <typename _KTy, typename _Ty> ostream& operator << (ostream& o, const map<_KTy, _Ty>& m) { if (m.empty()) { o << \"{ }\"; return o; } o << \"{\" << *m.begin(); for (auto itr = ++m.begin(); itr != m.end(); itr++) { o << \", \" << *itr; } o << \"}\"; return o; }\ntemplate <typename _KTy, typename _Ty> ostream& operator << (ostream& o, const unordered_map<_KTy, _Ty>& m) { if (m.empty()) { o << \"{ }\"; return o; } o << \"{\" << *m.begin(); for (auto itr = ++m.begin(); itr != m.end(); itr++) { o << \", \" << *itr; } o << \"}\"; return o; }\ntemplate <typename _Ty> ostream& operator << (ostream& o, const vector<_Ty>& v) { if (v.empty()) { o << \"{ }\"; return o; } o << \"{\" << v.front(); for (auto itr = ++v.begin(); itr != v.end(); itr++) { o << \", \" << *itr; } o << \"}\"; return o; }\ntemplate <typename _Ty> ostream& operator << (ostream& o, const deque<_Ty>& v) { if (v.empty()) { o << \"{ }\"; return o; } o << \"{\" << v.front(); for (auto itr = ++v.begin(); itr != v.end(); itr++) { o << \", \" << *itr; } o << \"}\"; return o; }\ntemplate <typename _Ty> ostream& operator << (ostream& o, const set<_Ty>& s) { if (s.empty()) { o << \"{ }\"; return o; } o << \"{\" << *(s.begin()); for (auto itr = ++s.begin(); itr != s.end(); itr++) { o << \", \" << *itr; } o << \"}\"; return o; }\ntemplate <typename _Ty> ostream& operator << (ostream& o, const unordered_set<_Ty>& s) { if (s.empty()) { o << \"{ }\"; return o; } o << \"{\" << *(s.begin()); for (auto itr = ++s.begin(); itr != s.end(); itr++) { o << \", \" << *itr; }\to << \"}\"; return o; }\ntemplate <typename _Ty> ostream& operator << (ostream& o, const stack<_Ty>& s) { if (s.empty()) { o << \"{ }\"; return o; } stack<_Ty> t(s); o << \"{\" << t.top(); t.pop(); while (!t.empty()) { o << \", \" << t.top(); t.pop(); } o << \"}\";\treturn o; }\ntemplate <typename _Ty> ostream& operator << (ostream& o, const list<_Ty>& l) { if (l.empty()) { o << \"{ }\"; return o; } o << \"{\" << l.front(); for (auto itr = ++l.begin(); itr != l.end(); ++itr) { o << \", \" << *itr; } o << \"}\"; return o; }\ntemplate <typename _KTy, typename _Ty> istream& operator >> (istream& is, pair<_KTy, _Ty>& m) { is >> m.first >> m.second; return is; }\ntemplate <typename _Ty> istream& operator >> (istream& is, vector<_Ty>& v) { for (size_t t = 0; t < v.size(); t++) is >> v[t]; return is; }\ntemplate <typename _Ty> istream& operator >> (istream& is, deque<_Ty>& v) { for (size_t t = 0; t < v.size(); t++) is >> v[t]; return is; }\nnamespace aux { // print tuple\n  template<typename Ty, unsigned N, unsigned L> struct tp { static void print(ostream& os, const Ty& v) { os << get<N>(v) << \", \"; tp<Ty, N + 1, L>::print(os, v); } };\n  template<typename Ty, unsigned N> struct tp<Ty, N, N> { static void print(ostream& os, const Ty& v) { os << get<N>(v); } };\n}\n\ntemplate<typename... Tys> ostream& operator<<(ostream& os, const tuple<Tys...>& t) { os << \"{\"; aux::tp<tuple<Tys...>, 0, sizeof...(Tys) - 1>::print(os, t); os << \"}\"; return os; }\n\ntemplate<typename A, size_t N, typename T> inline void Fill(A(&array)[N], const T& val) { fill((T*)array, (T*)(array + N), val); }\n\ntemplate <typename ... Args>\nstd::string format(const std::string& fmt, Args ... args) {\n  size_t len = std::snprintf(nullptr, 0, fmt.c_str(), args ...);\n  std::vector<char> buf(len + 1);\n  std::snprintf(&buf[0], len + 1, fmt.c_str(), args ...);\n  return std::string(&buf[0], &buf[0] + len);\n}\n\nvoid dump_func() { DUMPOUT << endl; }\ntemplate <class Head, class... Tail> void dump_func(Head&& head, Tail&&... tail) { DUMPOUT << head; if (sizeof...(Tail) == 0) { DUMPOUT << \" \"; } else { DUMPOUT << \", \"; } dump_func(move(tail)...); }\n\n#define PI 3.14159265358979323846\n#define EPS 1e-8\n#define rep(t,n) for(int t=0;t<(n);++t)\n#define ALL(j) (j).begin(), (j).end()\n#define SZ(j) ((int)(j).size())\n#define fake false\n\nclass Timer {\npublic:\n  double t = 0;\n  Timer() {}\n  static double time() {\n#ifdef _MSC_VER\n    return __rdtsc() / 2.8e9;\n#else\n    unsigned long long a, d;\n    __asm__ volatile(\"rdtsc\"\n      : \"=a\"(a), \"=d\"(d));\n    return (d << 32 | a) / 2.8e9;\n#endif\n  }\n  void measure() { t = time() - t; }\n  double elapsedMs() { return (time() - t) * 1000.0; }\n} timer;\n\nstruct Xorshift {\n  uint64_t x = 88172645463325252LL;\n  unsigned next_int() {\n    x = x ^ (x << 7);\n    return x = x ^ (x >> 9);\n  }\n  unsigned next_int(unsigned mod) {\n    x = x ^ (x << 7);\n    x = x ^ (x >> 9);\n    return x % mod;\n  }\n  unsigned next_int(unsigned l, unsigned r) {\n    x = x ^ (x << 7);\n    x = x ^ (x >> 9);\n    return x % (r - l + 1) + l;\n  }\n  double next_double() {\n    return double(next_int()) / UINT_MAX;\n  }\n} rnd;\n\ntemplate<typename T>\nvoid shuffle_vector(vector<T>& v, Xorshift& rnd) {\n  int n = v.size();\n  for (int i = n - 1; i >= 1; i--) {\n    int r = rnd.next_int(i);\n    swap(v[i], v[r]);\n  }\n}\n\n\n\nnamespace geom {\n  constexpr double eps = 1e-8;\n\n  struct Point {\n    double x, y;\n    Point() : x(0.0), y(0.0) {}\n    Point(double x, double y) : x(x), y(y) {}\n    Point operator+(const Point& p) const { return Point(this->x + p.x, this->y + p.y); }\n    Point operator-(const Point& p) const { return Point(this->x - p.x, this->y - p.y); }\n    Point operator-() const { return Point(-this->x, -this->y); }\n    Point& operator+=(const Point& p) { return *this = *this + p; }\n    Point& operator-=(const Point& p) { return *this = *this - p; }\n    double length() const { return std::sqrt(x * x + y * y); }\n    double length2() const { return x * x + y * y; }\n    double distance(const Point& p) const { return sqrt(pow(x - p.x, 2.0) + pow(y - p.y, 2.0)); }\n    friend std::ostream& operator<<(std::ostream& o, const Point& p) {\n      o << '(' << p.x << ',' << p.y << ')';\n      return o;\n    }\n    friend std::istream& operator>>(std::istream& i, Point& p) {\n      i >> p.x >> p.y;\n      return i;\n    }\n  };\n  using Vector = Point;\n  double cross_product(const Vector& v1, const Vector& v2) {\n    return v1.x * v2.y - v2.x * v1.y;\n  }\n  double inner_product(const Vector& v1, const Vector& v2) {\n    return v1.x * v2.x + v1.y * v2.y;\n  }\n  enum struct ccw_t {\n    COUNTER_CLOCKWISE,\n    CLOCKWISE,\n    ONLINE_BACK,\n    ONLINE_FRONT,\n    ON_SEGMENT\n  };\n  ccw_t ccw(const Point& p0, const Point& p1, const Point& p2) {\n    Vector v1 = p1 - p0, v2 = p2 - p0;\n    if (cross_product(v1, v2) > eps) return ccw_t::COUNTER_CLOCKWISE;\n    if (cross_product(v1, v2) < -eps) return ccw_t::CLOCKWISE;\n    if (inner_product(v1, v2) < -eps) return ccw_t::ONLINE_BACK;\n    if (v1.length2() < v2.length2()) return ccw_t::ONLINE_FRONT;\n    return ccw_t::ON_SEGMENT;\n  }\n\n  struct Line {\n    Point p1, p2;\n    Line() {}\n    Line(const Point& p1, const Point& p2) : p1(p1), p2(p2) {}\n    Line(double x1, double y1, double x2, double y2) : p1(Point(x1, y1)), p2(Point(x2, y2)) {}\n    Vector to_vector() const { return p2 - p1; }\n    Point projection(const Point& p) const {\n      Vector v12(p2 - p1);\n      double det = v12.length2();\n      double a = v12.y * p1.x - v12.x * p1.y, b = v12.y * p.y + v12.x * p.x;\n      double x = v12.y * a + v12.x * b, y = v12.y * b - v12.x * a;\n      return Point(x / det, y / det);\n    }\n    Point reflection(const Point& p) const {\n      Point proj = projection(p);\n      return proj + proj - p;\n    }\n    double distance(const Point& p) const {\n      return projection(p).distance(p);\n    }\n    bool is_parallel(const Line& l) const {\n      return abs(cross_product(this->to_vector(), l.to_vector())) < eps;\n    }\n    bool is_orthogonal(const Line& l) const {\n      return abs(inner_product(this->to_vector(), l.to_vector())) < eps;\n    }\n    Point intersection(const Line& l) const {\n      Point p0(this->p1), p1(this->p2), p2(l.p1), p3(l.p2);\n      Vector v01(p1 - p0), v23(p3 - p2);\n      double det = cross_product(v01, v23);\n      double a = v01.y * p0.x - v01.x * p0.y, b = v23.y * p2.x - v23.x * p2.y;\n      double x = v01.x * b - v23.x * a;\n      double y = v01.y * b - v23.y * a;\n      return Point(x / det, y / det);\n    }\n    friend std::ostream& operator<<(std::ostream& o, const Line& l) {\n      o << '(' << l.p1 << ',' << l.p2 << ')';\n      return o;\n    }\n    friend std::istream& operator>>(std::istream& i, Line& l) {\n      i >> l.p1 >> l.p2;\n      return i;\n    }\n  };\n  using Segment = Line;\n\n  bool is_intersect_segment(const Segment& s1, const Segment& s2) {\n    Vector v2 = s2.to_vector(), p1(s1.p1 - s2.p1), p2(s1.p2 - s2.p1);\n    if (cross_product(v2, p1) * cross_product(v2, p2) > eps) return false;\n    Vector v1 = s1.to_vector(), p3(s2.p1 - s1.p1), p4(s2.p2 - s1.p1);\n    if (cross_product(v1, p3) * cross_product(v1, p4) > eps) return false;\n    if (inner_product(s2.p1 - s1.p1, s2.p2 - s1.p1) < eps) return true;\n    if (inner_product(s2.p1 - s1.p2, s2.p2 - s1.p2) < eps) return true;\n    if (inner_product(s1.p1 - s2.p1, s1.p2 - s2.p1) < eps) return true;\n    if (inner_product(s1.p1 - s2.p2, s1.p2 - s2.p2) < eps) return true;\n    return false;\n  }\n  double segment_distance(const Segment& s, const Point& p) {\n    Point proj = s.projection(p);\n    if (ccw(s.p1, proj, s.p2) == ccw_t::ONLINE_FRONT) return p.distance(proj);\n    return min(p.distance(s.p1), p.distance(s.p2));\n  }\n  double segment_distance(const Segment& s1, const Segment& s2) {\n    if (is_intersect_segment(s1, s2)) return 0.0;\n    return min({\n      segment_distance(s1, s2.p1), segment_distance(s1, s2.p2),\n      segment_distance(s2, s1.p1), segment_distance(s2, s1.p2)\n      });\n  }\n}\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n\n  using namespace geom;\n\n  int q;\n  cin >> q;\n  cout << fixed << setprecision(15);\n  rep(_, q) {\n    Segment s1, s2;\n    cin >> s1 >> s2;\n    cout << segment_distance(s1, s2) << '\\n';\n  }\n\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define rep(i, n) for(int i=0;i<(n);++i)\n#define per(i, n) for(int i=(n)-1;i>=0;--i)\n#define repa(i, n) for(int i=1;i<(n);++i)\n#define foreach(i, n) for(auto &i:(n))\n#define pii pair<int, int>\n#define pll pair<long long, long long>\n#define all(x) (x).begin(), (x).end()\n#define bit(x) (1ll << (x))\nusing namespace std;\nusing ll = long long;\nconst ll MOD = (ll)1e9+7;\n//const ll MOD = 998244353;\n//const ll MOD = 924844033;\nconst int INF = (ll)1e9+7;\nconst ll INFLL = (ll)1e18;\nconst double EPS = 1e-5;\nusing namespace std;\ntemplate<class t>\nusing vvector = vector<vector<t>>;\ntemplate<class t>\nusing vvvector = vector<vector<vector<t>>>;\ntemplate<class t>\nusing priority_queuer = priority_queue<t, vector<t>, greater<t>>;\ntemplate<class t, class u> bool chmax(t &a, u b){if(a<b){a=b;return true;}return false;}\ntemplate<class t, class u> bool chmin(t &a, u b){if(a>b){a=b;return true;}return false;}\n\n#ifdef DEBUG\n#define OUTPUT(x) (output(x), outendl())\n#else\n#define OUTPUT(x) (void)0\n#endif\n\nll modpow(ll x, ll b){\n\tll res = 1;\n\twhile(b){\n\t\tif(b&1)res = res * x % MOD;\n\t\tx = x * x % MOD;\n\t\tb>>=1;\n\t}\n\treturn res;\n}\n\nll modinv(ll x){\n\treturn modpow(x, MOD-2);\n}\n\nbool was_output = false;\ntemplate<class t>\nvoid output(t a){\n\tif(was_output)cout << \" \";\n\tcout << a;\n\twas_output = true;\n}\nvoid outendl(){\n\twas_output = false;\n\tcout << endl;\n}\n\n//below here\n\n\nclass Vector2{\npublic:\n  double x;\n  double y;\n  Vector2():x(0), y(0){}\n  Vector2(double a, double b):x(a), y(b){}\n  Vector2(const Vector2 &o):x(o.x), y(o.y){}\n\n  Vector2& operator+=(Vector2 o){x+=o.x;y+=o.y;return *this;}\n  Vector2& operator-=(Vector2 o){x-=o.x;y-=o.y;return *this; }\n  Vector2& operator*=(double o){x*=o;y*=o;return *this;}\n  Vector2& operator/=(double o){x/=o;y/=o;return *this;}\n\n  Vector2 operator+(Vector2 o){return Vector2(*this)+=o;}\n  Vector2 operator-(Vector2 o){return Vector2(*this)-=o;}\n  Vector2 operator-(){return Vector2(-x,-y);}\n  Vector2 operator*(double o){return Vector2(*this)*=o;}\n  Vector2 operator/(double o){return Vector2(*this)/=o;}\n\n  double abs(){\n    return sqrt(mag());\n  }\n\n  double mag(){\n    return x*x+y*y;\n  }\n\n  Vector2 normal(){\n    return (*this) / abs();\n  }\n\n  Vector2 rotate_90(){\n    return Vector2(-y,x);\n  }\n\n  static double dot(Vector2 a,Vector2 b){\n    return a.x * b.x + a.y * b.y;\n  }\n\n  static double cross(Vector2 a,Vector2 b){\n    return a.x * b.y - a.y * b.x;\n  }\n};\n\n\ndouble dot(Vector2 x, Vector2 y){\n  return Vector2::dot(x,y);\n}\n\n\ndouble cross(Vector2 x, Vector2 y){\n  return Vector2::cross(x,y);\n}\n\nvoid output(Vector2 x){\n  cout << x.x << \" \" << x.y << endl;\n}\n\n\nclass straight_line{\npublic:\n  Vector2 f;\n  Vector2 s;\n  straight_line(){\n    f = Vector2(0,0);\n    s = Vector2(1,0);\n  }\n  straight_line(Vector2 a,Vector2 b):f(a),s(b){}\n\n  Vector2 projection(Vector2 pos){\n    pos -= f;\n    Vector2 n = (s-f).normal();\n    Vector2 res;\n    res = n * dot(pos,n) + f;\n    return res;\n  }\n\n  Vector2 reflection(Vector2 pos){\n    Vector2 n;\n    Vector2 res;\n    pos -= f;\n    double x = f.y-s.y;\n    double y = s.x-f.x;\n    n = Vector2(x,y).normal();\n    res = pos + f - n * dot(pos,n) * 2;\n    return res;\n  }\n\n  static bool is_cross(straight_line a,straight_line b){\n    Vector2 ap = a.s - a.f;\n    Vector2 bp = b.s - b.f;\n    if(abs(Vector2::dot(ap,bp))<EPS){\n      return true;\n    }\n    return false;\n  }\n\n  static bool is_cross_segment(straight_line a,straight_line b){\n    if(straight_line::is_parallel(a,b)){\n      return a.is_online(b.f) || a.is_online(b.s) || b.is_online(a.f) || b.is_online(a.s);\n    }\n\t  if(Vector2::cross(a.s-a.f,b.f-a.f)*Vector2::cross(a.s-a.f,b.s-a.f)>EPS)return false;\n\t  if(Vector2::cross(b.s-b.f,a.f-b.f)*Vector2::cross(b.s-b.f,a.s-b.f)>EPS)return false;\nreturn true;\n  }\n\n  static bool is_parallel(straight_line a,straight_line b){\n    Vector2 ap = a.s - a.f;\n    Vector2 bp = b.s - b.f;\n    if(abs(Vector2::cross(ap,bp))<EPS){\n      return true;\n    }\n    return false;\n  }\n\n  static Vector2 cul_cross(straight_line a,straight_line b){\n    if(a.is_online(b.f)){\n      return b.f;\n    }\n    if(a.is_online(b.s)){\n      return b.s;\n    }\n    if(b.is_online(a.f)){\n      return a.f;\n    }\n    if(b.is_online(a.s)){\n      return a.s;\n    }\n    Vector2 an = (a.s-a.f).rotate_90();\n    if(Vector2::dot(b.f-a.f,an)<0){\n      an = -an;\n    }\n    double dis_1 = Vector2::dot(b.f-a.f,an);\n    double dis_2 = Vector2::dot(b.s-a.f,an);\n    return b.f + (b.s - b.f) * dis_1 / (dis_1 - dis_2);\n  }\n\n  double cul_distance(Vector2 pos){\n    Vector2 v = s-f;\n    Vector2 n = v.normal();\n    double k = v.abs();\n    pos -= f;\n    double dis = Vector2::dot(pos,n);\n    if(dis>0){\n      if(dis>k)dis=k;\n      pos -= n * dis;\n    }\n    return pos.abs();\n  }\n\n  static double cul_distance(straight_line a,straight_line b){\n    if(straight_line::is_cross_segment(a,b))return 0;\n    return min({a.cul_distance(b.f),a.cul_distance(b.s),\n          b.cul_distance(a.f),b.cul_distance(a.s)});\n  }\n\n  bool is_online(Vector2 pos){\n    return cul_distance(pos) < EPS;\n  }\n};\n\nVector2 input_vector2(){\n\tdouble x,y;\n\tcin >> x >> y;\n\treturn Vector2(x,y);\n}\n\ndouble func(){\n\tstraight_line a,b;\n\ta.f = input_vector2();\n\ta.s = input_vector2();\n\tb.f = input_vector2();\n\tb.s = input_vector2();\n  return straight_line::cul_distance(a,b);\n}\n\nint main(){\n\tint q;\n\tcin >> q;\n\trep(i,q){\n    printf(\"%.10lf\\n\",func());\n\t}\n}\n\n"
  },
  {
    "language": "C++",
    "code": "\n#include <iostream>\n#include <cmath>\n#include <algorithm>\n#include <iomanip>\n#define ESP (1e-10)\nusing namespace std;\n\ntypedef struct Point {\n\tdouble x; \n\tdouble y;\n\n\tPoint() { }\n\n\tPoint(double x, double y) :x(x), y(y) { }\n\n\tPoint operator+(Point& p) {\n\t\treturn Point(x + p.x, y + p.y);\n\t}\n\n\tPoint operator-(Point& p) {\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n};\n\ntypedef Point Vector;\n\n struct Line {\n\tPoint p1, p2;\n\tLine() {}\n\tLine(const Point& a,const Point& b) : p1(a),p2(b) { }\n};\n\n typedef Line Segment;\n\ndouble abs(Point p1, Point p2) {\n\tdouble norm = (p1.x - p2.x)*(p1.x - p2.x) + (p1.y - p2.y)*(p1.y - p2.y);\n\treturn sqrt(norm);\n}\n\ndouble product(Vector v1, Vector v2) {\n\treturn v1.x*v2.x + v1.y*v2.y;\n}\n\ndouble cross(Vector p1, Vector p2) {\n\treturn p1.x*p2.y - p1.y*p2.x;\n}\n\nint ccw(Point p0, Point p1, Point p2) {\n\tVector v0 = p1 - p0;\n\tVector v1 = p2 - p0;\n\tif (cross(v0, v1) > ESP) return 1;   //p0,p1,p2??????????¨???????\n\tif (cross(v0, v1) < -ESP) return -1;   //p0,p1,p2???????¨???????\n\tif (product(v0, v1) < -ESP) return 2;  //p2,p0,p1????????§????????´??????\n\tif (abs(p0, p1) < abs(p0, p2)) return -2;  //p0,p1,p2????????§????????´??????\n\treturn 0;   //p2?????????(p0,p1)???\n}\n\nbool intersect(Point p0, Point p1, Point p2, Point p3) {\n\treturn (ccw(p0, p1, p2)*ccw(p0, p1, p3) <= 0&&ccw(p2,p3,p0)*ccw(p2,p3,p1)<=0);\n\t//?????????????????????????????¶\n}\n\nbool intersect(Segment s1, Segment s2) {\n\treturn intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\ndouble DistanceLP(Line l, Point p) {\n\treturn abs(cross(l.p2 - l.p1, p - l.p1)/abs(l.p1,l.p2));\n}\n\ndouble DistanceSP(Segment s, Point p) {\n\tif (product(s.p2 - s.p1, p - s.p1) < 0.0) return abs(p, s.p1);\n\tif (product(s.p1 - s.p2, p - s.p2) < 0.0) return abs(p, s.p2);\n\treturn DistanceLP(s, p);\n}\n\ndouble DistanceSS(Segment s1, Segment s2) {\n\tif (intersect(s1, s2)) return 0.0;\n\treturn min(min(DistanceSP(s1, s2.p1), DistanceSP(s1,s2.p2)), min(DistanceSP(s2, s1.p1), DistanceSP(s2, s1.p2)));\n}\n\nint main() {\n\tSegment s0,s1;\n\tint q; \n\tcin >> q;\n\tfor (int i = 0;i < q;i++) {\n\t\tcin >> s0.p1.x; cin >> s0.p1.y;\n\t\tcin >> s0.p2.x; cin >> s0.p2.y;\n\t\tcin >> s1.p1.x; cin >> s1.p1.y;\n\t\tcin >> s1.p2.x; cin >> s1.p2.y;\n\t\tcout <<setprecision(20)<< DistanceSS(s0, s1) << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\n#include <vector>\n\nusing namespace std;\n\n// 2次元ベクトルクラス\nclass Vector {\npublic:\n    float x, y;\n    \n    // コンストラクタ\n    Vector() {\n        x = 0.f;\n        y = 0.f;\n    }\n    \n    // コンストラクタ(引数あり)\n    Vector(float nx, float ny) {\n        x = nx;\n        y = ny;\n    }\n    \n    // x,y成分を設定する\n    void set(float nx, float ny) {\n        x = nx;\n        y = ny;\n    }\n    \n    // 内積を求める\n    float dot(const Vector& vec) const {\n        return x * vec.x + y * vec.y;\n    }\n    \n    // 外積を求める\n    float cross(const Vector& vec) const {\n        return x * vec.y - y * vec.x;\n    }\n    \n    // 余弦を求める\n    float getCos(const Vector& vec) const {\n        float nor = norm() * vec.norm();\n        if (nor == 0.f) {\n            return 0.f;\n        } else {\n            return dot(vec) / nor;\n        }\n    }\n    \n    // ベクトルの大きさを求める\n    float norm() const {\n        return sqrt(x * x + y * y);\n    }\n    \n    // 単位ベクトルを返す\n    Vector getUnit() const {\n        Vector v;\n        float n = norm();\n        if (n == 0.f) {\n            v.set(0.f, 0.f);\n        } else {\n            v.set(x / n, y / n);\n        }\n        return v;\n    }\n    \n    void operator = (const Vector& vec) {\n        x = vec.x;\n        y = vec.y;\n    }\n    \n    Vector operator + (const Vector& vec) const {\n        Vector v(x + vec.x, y + vec.y);\n        return v;\n    }\n    \n    Vector operator - (const Vector& vec) const {\n        Vector v(x - vec.x, y - vec.y);\n        return v;\n    }\n    \n    Vector operator * (const Vector& vec) const {\n        Vector v(x * vec.x, y * vec.y);\n        return v;\n    }\n    \n    Vector operator * (float f) const {\n        Vector v(x * f, y * f);\n        return v;\n    }\n    \n    Vector operator / (const Vector& vec) const {\n        Vector v;\n        if (vec.x == 0.f) {\n            v.x = 0.f;\n        } else {\n            v.x = x / vec.x;\n        }\n        \n        if (vec.y == 0.f) {\n            v.y = 0.f;\n        } else {\n            v.y = y / vec.y;\n        }\n        return v;\n    }\n    \n    Vector operator / (float f) const {\n        Vector v;\n        if (f == 0.f) {\n            v.set(0.f, 0.f);\n        } else {\n            v.set(x / f, y / f);\n        }\n        return v;\n    }\n    \n    void operator += (const Vector& vec) {\n        x += vec.x;\n        y += vec.y;\n    }\n    \n    void operator -= (const Vector& vec) {\n        x -= vec.x;\n        y -= vec.y;\n    }\n    \n    void operator *= (const Vector& vec) {\n        x *= vec.x;\n        y *= vec.y;\n    }\n    \n    void operator /= (const Vector& vec) {\n        if (vec.x == 0.f) {\n            x = 0.f;\n        } else {\n            x /= vec.x;\n        }\n        \n        if (vec.y == 0.f) {\n            y = 0.f;\n        } else {\n            y /= vec.y;\n        }\n    }\n    \n    bool operator == (const Vector& vec) const {\n        if (x == vec.x && y == vec.y) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n};\n\n// ベクトル1をベクトル2に正射影したベクトルを求める\nstatic Vector getProjection(const Vector& vec1, const Vector& vec2) {\n    Vector vec(vec2.getUnit() * vec1.norm() * vec1.getCos(vec2));\n    return vec;\n}\n\n\nclass LineSegment {\nprivate:\n    Vector start; // 始点\n    Vector end; // 終点\n    \npublic:\n    //コンストラクタ\n    LineSegment () {}\n    \n    // 始点と終点を設定する\n    void setStartEnd(float sx, float sy, float ex, float ey) {\n        start.set(sx, sy);\n        end.set(ex, ey);\n    }\n    \n    // 始点を取得する\n    Vector getStart() const {\n        return start;\n    }\n    \n    //　終点を取得する\n    Vector getEnd() const {\n        return end;\n    }\n    \n    // 指定の線分を含むか\n    // このメソッドは線分同士が平行の時しか使用しない\n    bool isInLine(const LineSegment& l) const {\n        bool b1 = isPointInLine(l.getStart());\n        bool b2 = isPointInLine(l.getEnd());\n        if (b1 || b2) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    \n    // 指定の点を線分の中に含むか\n    bool isPointInLine(const Vector& p) const {\n        if (start == p) {\n            return true;\n        }\n        \n        Vector l1 = end - start;\n        Vector l2 = p - start;\n        Vector u1 = l1.getUnit();\n        Vector u2 = l2.getUnit();\n\n        if (u1 == u2 && l2.norm() <= l1.norm()) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    \n    // 指定の線分と交差しているか\n    // @return 0(交差していない), 1(交差している)\n    int isCross(const LineSegment& l) const {\n        Vector l1 = end - start;\n        float c1 = l1.cross(l.getStart() - start);\n        float c2 = l1.cross(l.getEnd() - start);\n        \n        Vector l2 = l.getEnd() - l.getStart();\n        float c3 = l2.cross(start - l.getStart());\n        float c4 = l2.cross(end - l.getStart());\n        \n        if (c1 * c2 == 0.f && c3 * c4 == 0.f) { // 平行のとき\n            LineSegment ls;\n            ls.setStartEnd(start.x, start.y, end.x, end.y);\n            if (isInLine(l) || l.isInLine(ls)) {\n                return 1;\n            }\n            return 0;\n        } else if ((c1 * c2 < 0.f && c3 * c4 <= 0.f)\n                   || (c1 * c2 <= 0.f && c3 * c4 < 0.f)\n                   || (c1 * c2 < 0.f && c3 * c4 < 0.f)) { // 交差するとき\n            return 1;\n        } else { // 交差しないとき\n            return 0;\n        }\n    }\n    \n    // 任意の点が線分の始点より外にあるか\n    bool isOutOfStart(const Vector& vec) const {\n        Vector p = end - start;\n        Vector q = vec - start;\n        float d = p.dot(q);\n        if (d < 0) { // 内積が負のとき\n            return true;\n        }\n        return false;\n    }\n    \n    // 任意の線分との距離を求める\n    float getDistance(const LineSegment& l) const {\n        if (isCross(l)) { // 交差しているとき\n            return 0.f;\n        }\n        float dis1 = getDistance(l.getStart());\n        float dis2 = getDistance(l.getEnd());\n        LineSegment ls;\n        ls.setStartEnd(start.x, start.y, end.x, end.y);\n        float dis3 = l.getDistance(ls.getStart());\n        float dis4 = l.getDistance(ls.getEnd());\n        float min1 = min(dis1, dis2);\n        float min2 = min(dis3, dis4);\n        return min(min1, min2);\n    }\n    \n    // 任意の点との距離を求める\n    float getDistance(const Vector& vec) const {\n        if (isPointInLine(vec)) { // 線分内に点を含むとき\n            return 0.f;\n        }\n        if (!isOutOfStart(vec)) { // 線分の始点より内側に点があるとき\n            Vector p = end - start;\n            Vector q = vec - start;\n            Vector proj = getProjection(q, p);\n            if (p.norm() > proj.norm()) { // 正射影したベクトルが線分より短いとき\n                return (q - proj).norm();\n            } else { // 正射影したベクトルが線分と等しいか、長いとき\n                return (vec - end).norm();\n            }\n        } else { // 線分の始点より外にあるとき\n            return (vec - start).norm();\n        }\n    }\n};\n\nint main() {\n    int n;\n    cin >> n;\n    \n    LineSegment l1, l2;\n    vector<float> result;\n    for (int i = 0; i < n; i++) {\n        float sx1, sy1, ex1, ey1, sx2, sy2, ex2, ey2;\n        cin >> sx1 >> sy1 >> ex1 >> ey1 >> sx2 >> sy2 >> ex2 >> ey2;\n        l1.setStartEnd(sx1, sy1, ex1, ey1);\n        l2.setStartEnd(sx2, sy2, ex2, ey2);\n        result.push_back(l1.getDistance(l2));\n    }\n    \n    for (int i = 0; i < result.size(); i++) {\n        printf(\"%.8f\\n\", result[i]);\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n#define EPS 1e-10\n#define equals(a,b) (fabs( (a) - (b) )< EPS )\ntypedef struct point{\n\tdouble x,y;\n\tpoint(){};\n\tpoint(double x ,double y):x(x),y(y){};\n\tpoint operator + (point &p){ return point(x+p.x,y+p.y);\t}\n\tpoint operator - (point &p){ return point(x-p.x,y-p.y);\t}\n\tpoint operator * (point &p){ return point(x*p.x-y*p.y,x*p.y+y*p.x) ;}\n\tpoint operator * (double a){ return point(x*a,y*a);\t}\n\tpoint operator / (double a){ return point(x/a,y/a);\t}\n\t\n\tdouble abs() { return sqrt(norm()); }\n\tdouble norm() { return x*x+y*y; }\n\t\n\tbool operator < (const point &p) const { return x!=p.x ? x<p.x : y<p.y; }\n\tbool operator == (const point &p) const { return fabs(x-p.x)<EPS && fabs(y-p.y)<EPS; }\n}point;\ndouble abs(point a){return a.abs();}\ndouble norm(point a){return a.norm();}\n\ntypedef complex<double> C;\ntypedef struct { point s,e;} line;\n\nC convert(point a){ return C(a.x,a.y); }\npoint convert( C a){ return point(a.real(),a.imag() );}\ndouble dot(point a,point b){ return a.x*b.x+a.y*b.y ; } //内積　a・b\ndouble cross(point a,point b){ return a.x*b.y - a.y*b.x ; }//外積(z成分)　a×b\npoint vec(line l){return l.e-l.s;}\nline make(point s,point e){\n\tline res; res.s=s; res.e=e;\n\treturn res;\n}\npoint make(){ \n\tdouble x,y; cin>>x>>y;\n       \treturn point(x,y);\n}\n//直交\nbool isorthogonal(point a,point b){ return equals(dot(a,b), 0.0); }\nbool isorthogonal(line l1,line l2){ return isorthogonal(vec(l1),vec(l2)); }\n//平行\nbool isparallel(point a,point b){ return equals(cross(a,b),0.0); }\nbool isparallel(line l1,line l2){ return isparallel(vec(l1),vec(l2)); }\n//射影\npoint project(line s,point p){\n\tpoint base = vec(s);\n\tdouble r=dot(p-s.s,base)/base.norm();\n\tbase = base*r;\n\treturn s.s+base;\n}\n//反射\npoint reflect(line l,point p){\n\tpoint tmp=project(l,p)-p;\n\ttmp= tmp*2.0;\n\treturn p+tmp;\n\n}\n//交差判定\n\nint ccw(point p0,point p1,point p2){\n\tpoint a = p1-p0;\n\tpoint b = p2-p0;\nif(cross(a,b)>EPS) return 1;//counter_clockwise\nif(cross(a,b)<-EPS) return -1;//clockwise\nif(dot(a,b)<-EPS)return 2;//online_back\nif(a.norm()<b.norm() ) return -2;//online_front\nreturn 0;//on_segment\n}\n// line p1-p2 line p3-p4\nbool intersect(point p1,point p2,point p3,point p4){\n\treturn (ccw(p1,p2,p3)*ccw(p1,p2,p4)<=0 && ccw(p3,p4,p1)*ccw(p3,p4,p2) ); \n}\n// line l1,l2\nbool intersect(line l1,line l2){ return intersect(l1.s,l1.e,l2.s,l2.e); }\n\n\n//距離\n//point-point\ndouble distance(point a,point b){ return abs(a-b); }\n//point-line(直線）\ndouble distance2(line l,point p){\n\treturn abs(cross(vec(l),p-l.s)/abs(l.e-l.s));\n}\n//point-line(線分)\ndouble distance(line l,point p){\n\tif( dot(vec(l),p-l.s) <0.0 ) return abs(p-l.s);\n\tif( dot(l.s-l.e,p-l.e) <0.0 ) return abs(p-l.e);\n\treturn distance2(l,p);\n}\n//line-line\ndouble distance(line l1,line l2){\n\tif(intersect(l1,l2)) return 0.0;\n\treturn min(min(distance(l1,l2.s),distance(l1,l2.e) ), min(distance(l2,l1.s),distance(l2,l1.e) ) );\n}\n\n//交点\npoint crosspoint(line l1,line l2){\n\tpoint base = vec(l2);\n\tdouble d1 = abs(cross(base,l1.s-l2.s) );\n\tdouble d2 = abs(cross(base,l1.e-l2.s) );\n\tdouble t = d1/(d1+d2);\n\tpoint tmp = vec(l1)*t;\n\treturn l1.s+tmp;\n}\n\nint main(){\nint q;\ncin>>q;\nfor(int i=0;i<q;i++){\n\tpoint p0=make(),p1=make(),p2=make(),p3=make();\n\tline l0 = make(p0,p1) ,l1 = make(p2,p3);\n\tprintf(\"%0.10lf\\n\",distance(l0,l1) );\n}\n\nreturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n\nusing namespace std;\n\nconst double EPS = 1e-8, PI = acos(-1);\n\ninline bool eq(double a, double b) { return fabs(b - a) < EPS; }\n\nusing Point = complex< double >;\n\nistream &operator>>(istream &is, Point &p) {\n  double a, b;\n  is >> a >> b;\n  p = Point(a, b);\n  return is;\n}\n\nostream &operator<<(ostream &os, Point &p) {\n  os << fixed << setprecision(10) << p.real() << \" \" << p.imag();\n}\n\nPoint rotate(double theta, const Point &p) {\n  return Point(cos(theta) * p.real() - sin(theta) * p.imag(), sin(theta) * p.real() + cos(theta) * p.imag());\n}\n\ndouble radian_to_degree(double r) {\n  return (r * 180.0 / PI);\n}\n\ndouble degree_to_radian(double d) {\n  return (d * PI / 180.0);\n}\n\ndouble get_angle(const Point &a, const Point &b, const Point &c) {\n  const Point v(b - a), w(c - b);\n  double alpha = atan2(v.imag(), v.real()), beta = atan2(w.imag(), w.real());\n  if(alpha > beta) swap(alpha, beta);\n  double theta = (beta - alpha);\n  return min(theta, 2 * acos(-1) - theta);\n}\n\nnamespace std {\n  bool operator<(const Point &a, const Point &b) {\n    return a.real() != b.real() ? a.real() < b.real() : a.imag() < b.imag();\n  }\n}\n\n\nstruct Line {\n  Point a, b;\n\n  Line() {}\n\n  Line(Point a, Point b) : a(a), b(b) {}\n\n  Line(double A, double B, double C) // Ax + By = C\n  {\n    if(eq(A, 0)) a = Point(0, C / B), b = Point(1, C / B);\n    else if(eq(B, 0)) b = Point(C / A, 0), b = Point(C / A, 1);\n    else a = Point(0, C / B), b = Point(C / A, 0);\n  }\n\n  friend ostream &operator<<(ostream &os, Line &p) {\n    return os << p.a << \" to \" << p.b;\n  }\n\n  friend istream &operator>>(istream &is, Line &a) {\n    return is >> a.a >> a.b;\n  }\n};\n\nstruct Segment : Line {\n  Segment() {}\n\n  Segment(Point a, Point b) : Line(a, b) {}\n};\n\nstruct Circle {\n  Point p;\n  double r;\n\n  Circle() {}\n\n  Circle(Point p, double r) : p(p), r(r) {}\n};\n\nusing Points = vector< Point >;\nusing Polygon = vector< Point >;\nusing Segments = vector< Segment >;\nusing Lines = vector< Line >;\nusing Circles = vector< Circle >;\n\ndouble cross(const Point &a, const Point &b) {\n  return real(a) * imag(b) - imag(a) * real(b);\n}\n\ndouble dot(const Point &a, const Point &b) {\n  return real(a) * real(b) + imag(a) * imag(b);\n}\n\nint ccw(const Point &a, Point b, Point c) {\n  b = b - a, c = c - a;\n  if(cross(b, c) > EPS) return +1;  // \"COUNTER_CLOCKWISE\"\n  if(cross(b, c) < -EPS) return -1; // \"CLOCKWISE\"\n  if(dot(b, c) < 0) return +2;      // \"ONLINE_BACK\"\n  if(norm(b) < norm(c)) return -2;  // \"ONLINE_FRONT\"\n  return 0;                         // \"ON_SEGMENT\"\n}\n\nbool parallel(const Line &a, const Line &b) {\n  return abs(cross(a.b - a.a, b.b - b.a)) < EPS;\n}\n\nbool orthogonal(const Line &a, const Line &b) {\n  return abs(dot(a.a - a.b, b.a - b.b)) < EPS;\n}\n\nPoint projection(const Line &l, const Point &p) {\n  double t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n  return l.a + (l.a - l.b) * t;\n}\n\nPoint projection(const Segment &l, const Point &p) {\n  double t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n  return l.a + (l.a - l.b) * t;\n}\n\nPoint reflection(const Line &l, const Point &p) {\n  return p + (projection(l, p) - p) * 2.0;\n}\n\nbool Intersect(const Line &l, const Point &p) {\n  return abs(ccw(l.a, l.b, p)) != 1;\n}\n\n\nbool intersect(const Line &l, const Line &m) {\n  return abs(cross(l.b - l.a, m.b - m.a)) > EPS || abs(cross(l.b - l.a, m.b - l.a)) < EPS;\n}\n\nbool intersect(const Segment &s, const Point &p) {\n  return ccw(s.a, s.b, p) == 0;\n}\n\nbool intersect(const Line &l, const Segment &s) {\n  return cross(l.b - l.a, s.a - l.a) * cross(l.b - l.a, s.b - l.a) < EPS;\n}\n\ndouble distance(const Line &l, const Point &p);\n\nbool intersect(const Circle &c, const Line &l) {\n  return distance(l, c.p) <= c.r + EPS;\n}\n\nbool intersect(const Circle &c, const Point &p) {\n  return abs(abs(p - c.p) - c.r) < EPS;\n}\n\nbool intersect(const Segment &s, const Segment &t) {\n  return ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 && ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0;\n}\n\nint intersect(const Circle &c, const Segment &l) {\n  if(norm(projection(l, c.p) - c.p) - c.r * c.r > EPS) return 0;\n  const double d1 = abs(c.p - l.a), d2 = abs(c.p - l.b);\n  if(d1 < c.r + EPS && d2 < c.r + EPS) return 0;\n  if(d1 < c.r - EPS && d2 > c.r + EPS || d1 > c.r + EPS && d2 < c.r - EPS) return 1;\n  const Point h = projection(l, c.p);\n  if(dot(l.a - h, l.b - h) < 0) return 2;\n  return 0;\n}\n\ndouble distance(const Point &a, const Point &b) {\n  return abs(a - b);\n}\n\ndouble distance(const Line &l, const Point &p) {\n  return abs(p - projection(l, p));\n}\n\ndouble distance(const Line &l, const Line &m) {\n  return intersect(l, m) ? 0 : distance(l, m.a);\n}\n\ndouble distance(const Segment &s, const Point &p) {\n  Point r = projection(s, p);\n  if(intersect(s, r)) return abs(r - p);\n  return min(abs(s.a - p), abs(s.b - p));\n}\n\ndouble distance(const Segment &a, const Segment &b) {\n  if(intersect(a, b)) return 0;\n  return min({distance(a, b.a), distance(a, b.b), distance(b, a.a), distance(b, a.b)});\n}\n\ndouble distance(const Line &l, const Segment &s) {\n  if(intersect(l, s)) return 0;\n  return min(distance(l, s.a), distance(l, s.b));\n}\n\nPoint crosspoint(const Line &l, const Line &m) {\n  double A = cross(l.b - l.a, m.b - m.a);\n  double B = cross(l.b - l.a, l.b - m.a);\n  if(abs(A) < EPS && abs(B) < EPS) return m.a;\n  return m.a + (m.b - m.a) * B / A;\n}\n\nPoint crosspoint(const Segment &l, const Segment &m) {\n  double A = cross(l.b - l.a, m.b - m.a);\n  double B = cross(l.b - l.a, l.b - m.a);\n  if(abs(A) < EPS && abs(B) < EPS) return m.a;\n  return m.a + (m.b - m.a) * B / A;\n}\n\npair< Point, Point > crosspoint(const Circle &c, const Line l) {\n  Point hp = projection(l, c.p), h = hp - c.p;\n  const double d2 = norm(h);\n  Point v = (l.b - l.a) * sqrt(c.r * c.r - d2) / abs(l.b - l.a);\n  return {hp - v, hp + v};\n}\n\npair< Point, Point > crosspoint(const Circle &c, const Segment &l) {\n  Line aa = Line(l.a, l.b);\n  if(intersect(c, l) == 2) return crosspoint(c, aa);\n  auto ret = crosspoint(c, aa);\n  if(dot(l.a - ret.first, l.b - ret.first) < 0) ret.second = ret.first;\n  else ret.first = ret.second;\n  return ret;\n}\n\npair< Point, Point > crosspoint(const Circle &c1, const Circle &c2) {\n  double d = abs(c1.p - c2.p);\n  double a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n  double t = atan2(c2.p.imag() - c1.p.imag(), c2.p.real() - c1.p.real());\n  Point p1 = c1.p + Point(cos(t + a) * c1.r, sin(t + a) * c1.r);\n  Point p2 = c1.p + Point(cos(t - a) * c1.r, sin(t - a) * c1.r);\n  return {p1, p2};\n}\n\nbool is_convex(const Polygon &p) {\n  int n = (int) p.size();\n  for(int i = 0; i < n; i++) {\n    if(ccw(p[(i + n - 1) % n], p[i], p[(i + 1) % n]) == -1) return false;\n  }\n  return true;\n}\n\nPolygon convex_hull(Polygon &p) {\n  int n = (int) p.size(), k = 0;\n  if(n <= 2) return p;\n  sort(p.begin(), p.end());\n  vector< Point > ch(2 * n);\n  for(int i = 0; i < n; ch[k++] = p[i++]) {\n    while(k >= 2 && cross(ch[k - 1] - ch[k - 2], p[i] - ch[k - 1]) < 0) --k;\n  }\n  for(int i = n - 2, t = k + 1; i >= 0; ch[k++] = p[i--]) {\n    while(k >= t && cross(ch[k - 1] - ch[k - 2], p[i] - ch[k - 1]) < 0) --k;\n  }\n  ch.resize(k - 1);\n  return ch;\n}\n\nenum {\n  OUT, ON, IN\n};\n\nint contains(const Polygon &Q, const Point &p) {\n  bool in = false;\n  for(int i = 0; i < Q.size(); i++) {\n    Point a = Q[i] - p, b = Q[(i + 1) % Q.size()] - p;\n    if(a.imag() > b.imag()) swap(a, b);\n    if(a.imag() <= 0 && 0 < b.imag() && cross(a, b) < 0) in = !in;\n    if(cross(a, b) == 0 && dot(a, b) <= 0) return ON;\n  }\n  return in ? IN : OUT;\n}\n\n\nbool merge_if_able(Segment &s1, Segment s2) {\n  if(abs(cross(s1.b - s1.a, s2.b - s2.a)) > EPS) return false;\n  if(ccw(s1.a, s2.a, s1.b) == 1 || ccw(s1.a, s2.a, s1.b) == -1) return false;\n  if(ccw(s1.a, s1.b, s2.a) == -2 || ccw(s2.a, s2.b, s1.a) == -2) return false;\n  s1 = Segment(min(s1.a, s2.a), max(s1.b, s2.b));\n  return true;\n}\n\nvoid merge_segments(vector< Segment > &segs) {\n  for(int i = 0; i < segs.size(); i++) {\n    if(segs[i].b < segs[i].a) swap(segs[i].a, segs[i].b);\n  }\n  for(int i = 0; i < segs.size(); i++) {\n    for(int j = i + 1; j < segs.size(); j++) {\n      if(merge_if_able(segs[i], segs[j])) {\n        segs[j--] = segs.back(), segs.pop_back();\n      }\n    }\n  }\n}\n\nvector< vector< int > > segment_arrangement(vector< Segment > &segs, vector< Point > &ps) {\n  vector< vector< int > > g;\n  int N = (int) segs.size();\n  for(int i = 0; i < N; i++) {\n    ps.emplace_back(segs[i].a);\n    ps.emplace_back(segs[i].b);\n    for(int j = i + 1; j < N; j++) {\n      const Point p1 = segs[i].b - segs[i].a;\n      const Point p2 = segs[j].b - segs[j].a;\n      if(cross(p1, p2) == 0) continue;\n      if(intersect(segs[i], segs[j])) {\n        ps.emplace_back(crosspoint(segs[i], segs[j]));\n      }\n    }\n  }\n  sort(begin(ps), end(ps));\n  ps.erase(unique(begin(ps), end(ps)), end(ps));\n\n  int M = (int) ps.size();\n  g.resize(M);\n  for(int i = 0; i < N; i++) {\n    vector< int > vec;\n    for(int j = 0; j < M; j++) {\n      if(intersect(segs[i], ps[j])) {\n        vec.emplace_back(j);\n      }\n    }\n    for(int j = 1; j < vec.size(); j++) {\n      g[vec[j - 1]].push_back(vec[j]);\n      g[vec[j]].push_back(vec[j - 1]);\n    }\n  }\n  return (g);\n}\n\nPolygon convex_cut(Polygon &U, Line l) {\n  Polygon ret;\n  for(int i = 0; i < U.size(); i++) {\n    Point now = U[i], nxt = U[(i + 1) % U.size()];\n    if(ccw(l.a, l.b, now) != -1) ret.push_back(now);\n    if(ccw(l.a, l.b, now) * ccw(l.a, l.b, nxt) < 0) {\n      ret.push_back(crosspoint(Line(now, nxt), l));\n    }\n  }\n  return (ret);\n}\n\ndouble area2(const Polygon &p) {\n  double A = 0;\n  for(int i = 0; i < p.size(); ++i) {\n    A += cross(p[i], p[(i + 1) % p.size()]);\n  }\n  return A;\n}\n\ndouble convex_diameter(Polygon &p) {\n  int N = (int) p.size();\n  int is = 0, js = 0;\n  for(int i = 1; i < N; i++) {\n    if(p[i].imag() > p[is].imag()) is = i;\n    if(p[i].imag() < p[js].imag()) js = i;\n  }\n  double maxdis = norm(p[is] - p[js]);\n\n  int maxi, maxj, i, j;\n  i = maxi = is;\n  j = maxj = js;\n  do {\n    if(cross(p[(i + 1) % N] - p[i], p[(j + 1) % N] - p[j]) >= 0) {\n      j = (j + 1) % N;\n    } else {\n      i = (i + 1) % N;\n    }\n    if(norm(p[i] - p[j]) > maxdis) {\n      maxdis = norm(p[i] - p[j]);\n      maxi = i;\n      maxj = j;\n    }\n  } while(i != is || j != js);\n  return sqrt(maxdis);\n}\n\npair< Point, Point > closer(const pair< Point, Point > &a, const pair< Point, Point > &b) {\n  return distance(a.first, a.second) < distance(b.first, b.second) ? a : b;\n}\n\npair< Point, Point > closest_pair_util(Points &ps, int l, int r) {\n  if(r - l == 2) {\n    return {ps[l], ps[l + 1]};\n  }\n  if(r - l == 3) {\n    pair< Point, Point > a(ps[l], ps[l + 1]), b(ps[l + 1], ps[l + 2]), c(ps[l], ps[l + 2]);\n    return closer(a, closer(b, c));\n  }\n\n  int mid = (l + r) / 2;\n  Point midPoint = ps[mid];\n  auto res = closer(closest_pair_util(ps, l, mid), closest_pair_util(ps, mid, r));\n  double d = distance(res.first, res.second);\n\n  Points pos[2];\n  for(int i = l; i < r; ++i) {\n    if(abs(ps[i].real() - midPoint.real()) < d) pos[i < mid].push_back(ps[i]);\n  }\n  for(const auto &i : pos[0]) {\n    for(const auto &j : pos[1]) {\n      if(distance(i, j) < d) {\n        d = distance(i, j);\n        res = {i, j};\n      }\n    }\n  }\n  return res;\n}\n\npair< Point, Point > closest_pair(Points ps) {\n  if(ps.size() <= 1) exit(-1);\n  for(int i = 0; i < ps.size(); ++i) {\n    ps[i] = rotate(0.1, ps[i]);\n  }\n  sort(ps.begin(), ps.end());\n  if(ps.size() == 2) return {ps[0], ps[1]};\n  auto res = closest_pair_util(ps, 0, ps.size());\n  res.first = rotate(-0.1, res.first);\n  res.second = rotate(-0.1, res.second);\n  return res;\n}\n\nint main() {\n  int Q;\n  cin >> Q;\n  while(Q--) {\n    Segment s1, s2;\n    cin >> s1 >> s2;\n    auto len = distance(s1, s2);\n    cout << fixed << setprecision(10) << len << endl;\n  }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nstruct Point {\n    int x, y;\n\n    Point() = default;\n    Point(int x, int y) : x(x), y(y) {}\n\n    Point operator+(const Point &rhs) const {\n        return Point(x + rhs.x, y + rhs.y);\n    }\n\n    Point operator-(const Point &rhs) const {\n        return Point(x - rhs.x, y - rhs.y);\n    }\n\n    long long operator*(const Point &rhs) const {\n        return 1ll * x * rhs.x + 1ll * y * rhs.y;\n    }\n\n    long long operator%(const Point &rhs) const {\n        return 1ll * x * rhs.y - 1ll * y * rhs.x;\n    }\n};\n\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n    if (max(p1.x, p2.x) < min(p3.x, p4.x) || max(p3.x, p4.x) < min(p1.x, p2.x)) return false;\n    if (max(p1.y, p2.y) < min(p3.y, p4.y) || max(p3.y, p4.y) < min(p1.y, p2.y)) return false;\n    return ((p3 - p1) % (p4 - p1)) * ((p3 - p2) % (p4 - p2)) <= 0 &&\n           ((p1 - p3) % (p2 - p3)) * ((p1 - p4) % (p2 - p4)) <= 0;\n}\n\ndouble dist(Point p1, Point p2, Point p3, Point p4) {\n    if (intersect(p1, p2, p3, p4)) return 0;\n    double res = sqrt(min({(p1 - p3) * (p1 - p3), (p2 - p3) * (p2 - p3), (p1 - p4) * (p1 - p4), (p2 - p4) * (p2 - p4)}));\n    if ((p1 - p3) * (p4 - p3) >= 0 && (p1 - p4) * (p3 - p4) >= 0) \n        res = min(res, abs((p1 - p3) % (p4 - p3)) / sqrt((p4 - p3) * (p4 - p3)));\n    if ((p2 - p3) * (p4 - p3) >= 0 && (p2 - p4) * (p3 - p4) >= 0) \n        res = min(res, abs((p2 - p3) % (p4 - p3)) / sqrt((p4 - p3) * (p4 - p3)));\n    if ((p3 - p1) * (p2 - p1) >= 0 && (p3 - p2) * (p1 - p2) >= 0) \n        res = min(res, abs((p3 - p1) % (p2 - p1)) / sqrt((p2 - p1) * (p2 - p1)));\n    if ((p4 - p1) * (p2 - p1) >= 0 && (p4 - p2) * (p1 - p2) >= 0) \n        res = min(res, abs((p4 - p1) % (p2 - p1)) / sqrt((p2 - p1) * (p2 - p1)));\n    return res;\n}\n\nint main() {\n    int q; cin >> q;\n    while (q--) {\n        Point p1, p2, p3, p4;\n        cin >> p1.x >> p1.y;\n        cin >> p2.x >> p2.y;\n        cin >> p3.x >> p3.y;\n        cin >> p4.x >> p4.y;\n        cout << fixed << setprecision(20) << dist(p1, p2, p3, p4) << endl;\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n#define rep(i,n) for(int i = 0; i < (n) ; i++)\nconstexpr auto INF = 2147483647;\nstatic const double EPS = pow(10,-10);\ntypedef long long ll;\nstatic int COUNTER_CLOCKWISE = 1;\nstatic int CLOCKWISE = -1;\nstatic int ONLINE_BACK = 2;\nstatic int ONLINE_FRONT = -2;\nstatic int ON_SEGMENT = 0;\n\n\n\n\nclass Vector2{\n  public:\n  double x, y;\n  Vector2(){}\n  Vector2(double x, double y): x(x), y(y) {}\n\n  Vector2 operator + (Vector2 v) {\n    return Vector2(x + v.x , y + v.y);\n  }\n  Vector2 operator - (Vector2 v) {\n    return Vector2(x - v.x , y - v.y);\n  }\n\n  Vector2 operator * (double d){\n    return Vector2(d*x, d*y);\n  }\n\n  double norm(){\n    return pow(x,2) + pow(y,2);\n  }\n\n  double abs(){\n    return sqrt(norm());\n  }\n\n};\n\ndouble dot(Vector2 a, Vector2 b){\n  return a.x * b.x + a.y * b.y; \n}\n\ndouble cross(Vector2 a, Vector2 b){\n  return a.x * b.y - a.y*b.x;\n}\n\nVector2 projection(Vector2 a, Vector2 b, Vector2 p){\n  Vector2 base = b - a;\n  Vector2 hypo = p - a;\n  double norm_base = pow(base.x,2) + pow(base.y,2);\n\n  Vector2 x;\n  x = a + base*(dot(hypo,base) / norm_base);\n  return x;\n}\n\nVector2 refrection(Vector2 a, Vector2 b, Vector2 p){\n  Vector2 v, p_projection;\n  p_projection = projection(a,b,p); \n  v = p_projection + (p_projection - p);\n  return v;\n}\n\nint ccw(Vector2 a, Vector2 b, Vector2 p){\n  Vector2 hypo = p - a;\n  Vector2 base = b - a;\n  if(cross(base,hypo) > EPS) return COUNTER_CLOCKWISE;\n  if(cross(base,hypo) < -EPS) return CLOCKWISE;\n  if(dot(base,hypo) < -EPS) return ONLINE_BACK;\n  if(hypo.norm() > base.norm()) return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\n\nbool intersect(Vector2 a,Vector2 b,Vector2 p,Vector2 q){\n  int t1, t2;\n  t1 =ccw(a,b,p)*ccw(a,b,q);\n  t2 =ccw(p,q,a)*ccw(p,q,b);\n  if(t1 <= 0 && t2 <= 0) return true;\n  else return false;\n}\n\nVector2 crossPoint(Vector2 a,Vector2 b,Vector2 p,Vector2 q){\n  Vector2 base, hypo_1, hypo_2, v;\n  base = b-a;\n  hypo_1 = p-a;\n  hypo_2 = q-a;\n  double d1 = abs(cross(base, hypo_1)); \n  double d2 = abs(cross(base, hypo_2));\n  double ratio = d1/(d1+d2);\n  v = p + (hypo_2 - hypo_1)*ratio;\n  return v;\n}\n\ndouble distance(Vector2 a,Vector2 b,Vector2 p){\n  if(dot(b-a, p-b) > 0) return (p-b).abs();\n  if(dot(b-a, p-a) < 0) return (p-a).abs();\n  return (p - projection(a,b,p)).abs();\n}\n\ndouble distance(Vector2 a,Vector2 b,Vector2 p,Vector2 q){\n  if(intersect(a,b,p,q)) return 0;\n  vector<double> d_arr(4) ;\n  d_arr[0] = distance(a,b,p);\n  d_arr[1] = distance(a,b,q);\n  d_arr[2] = distance(p,q,a);\n  d_arr[3] = distance(p,q,b);\n  return min(min(d_arr[0],d_arr[1]),\n             min(d_arr[2],d_arr[3]));\n}\n\n\n\n\nint main(){\n  Vector2 a,b,p,q,v;\n  int queri;\n  cin >> queri;\n  rep(i,queri){\n    cin >> a.x >> a.y >> b.x >> b.y;\n    cin >> p.x >> p.y >> q.x >> q.y;\n    cout << fixed << setprecision(10);\n    cout << distance(a,b,p,q) << endl;\n  }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <math.h>\nusing namespace std;\n\nconst double eps = 1e-15;\n\nbool IsEq(double d1, double d2)\n{\n    if (d1 - d2 > -eps && d1 - d2 < eps){\n        return true;\n    } else {\n        return false;\n    }\n}\n\nclass Point2D {\npublic:\n    double x, y;\n    Point2D() : x(0), y(0) {}\n    Point2D(double _x, double _y) : x(_x), y(_y) {}\n    virtual ~Point2D() {}\n};\n\nistream& operator >> (istream& input, Point2D& P)\n{\n    input >> P.x >> P.y;\n    return input;\n}\n\nclass Segment {\npublic:\n    Point2D P, Q;\n    Segment() {}\n    Segment(const Point2D& _P, const Point2D& _Q) : P(_P), Q(_Q) {}\n};\n\nistream& operator >> (istream& input, Segment& Seg)\n{\n    input >> Seg.P >> Seg.Q;\n    return input;\n}\n\nclass Vector2D : public Point2D {\npublic:\n    Vector2D(double _x, double _y) : Point2D(_x, _y) {}\n    Vector2D(const Point2D& P) : Point2D(P) {}\n    Vector2D(const Segment& Seg) : Point2D(Seg.Q.x - Seg.P.x, Seg.Q.y - Seg.P.y) {}\n    Vector2D(const Point2D& Start, const Point2D& End) : Point2D(End.x - Start.x, End.y - Start.y) {}\n    double InnerProd(const Vector2D Vec) const\n    {\n        return x * Vec.x + y * Vec.y;\n    }\n    double OuterProd(const Vector2D Vec) const\n    {\n        return x * Vec.y - y * Vec.x;\n    }\n    double Length() const\n    {\n        return sqrt((*this).InnerProd(*this));\n    }\n};\n\nVector2D operator * (double d, const Vector2D& V)\n{\n    return Vector2D(d * V.x, d * V.y);\n}\n\nVector2D operator + (const Vector2D& V1, const Vector2D& V2)\n{\n    return Vector2D(V1.x + V2.x, V1.y + V2.y);\n}\n\nostream& operator << (ostream& out, const Vector2D& V)\n{\n    out << V.x << \" \" << V.y;\n    return out;\n}\n\ndouble Dist(const Point2D& P, const Point2D& Q)\n{\n    Vector2D V(P, Q);\n    return V.Length();\n}\n\nbool IsPara(const Segment& Seg1, const Segment& Seg2)\n{\n    Vector2D V1(Seg1), V2(Seg2);\n    return IsEq(V1.OuterProd(V2), 0.);\n}\n\nbool IsOnSeg(const Point2D& P, const Segment& Seg)\n{\n    Vector2D V(Seg);\n    return IsEq(V.Length(), Dist(P, Seg.P) + Dist(P, Seg.Q));\n}\n\nbool IsIntersect(const Segment& Seg1, const Segment& Seg2) {\n    Vector2D P1(Seg1.P), P2(Seg2.P);\n    Vector2D V1(Seg1), V2(Seg2);\n    if (!IsPara(Seg1, Seg2)) {\n        double t = (P2.OuterProd(V2) - P1.OuterProd(V2)) / V1.OuterProd(V2);\n        double s = (P2.OuterProd(V1) - P1.OuterProd(V1)) / V1.OuterProd(V2);\n        return t > -eps && t < 1 + eps && s > -eps && s < 1 + eps;\n    } else {\n        if (IsOnSeg(Seg1.P, Seg2) || IsOnSeg(Seg1.Q, Seg2) || IsOnSeg(Seg2.P, Seg1) || IsOnSeg(Seg2.Q, Seg1)) return true;\n        return false;\n    }\n}\n\nVector2D CrossPoint(const Segment& Seg1, const Segment& Seg2) {\n    Vector2D P1(Seg1.P), P2(Seg2.P);\n    Vector2D V1(Seg1), V2(Seg2);\n    if (!IsPara(Seg1, Seg2)) {\n        double t = (P2.OuterProd(V2) - P1.OuterProd(V2)) / V1.OuterProd(V2);\n        return P1 + t * V1;\n    } else {\n        return Point2D();\n    }\n}\n\ndouble Dist(const Point2D& P, const Segment& Seg) {\n    Vector2D V1(Seg);\n    Vector2D V2(Seg.P, P);\n    double IP = V1.InnerProd(V2);\n    if (IP < 0.) {\n        return Dist(P, Seg.P);\n    } else if (IP > V1.InnerProd(V1)) {\n        return Dist(P, Seg.Q);\n    } else {\n        return abs(V1.OuterProd(V2)) / V1.Length();\n    }\n}\n\ndouble Dist(const Segment& Seg1, const Segment& Seg2) {\n    if (IsIntersect(Seg1, Seg2)) return 0.;\n    double Ret = Dist(Seg1.P, Seg2);\n    Ret = min(Ret, Dist(Seg1.Q, Seg2));\n    Ret = min(Ret, Dist(Seg2.P, Seg1));\n    Ret = min(Ret, Dist(Seg2.Q, Seg1));\n    return Ret;\n}\n\nint main(int argc, const char * argv[]) {\n    int q;\n    Segment Seg1, Seg2;\n    cin >> q;\n    for (int i = 0; i < q; ++i) {\n        cin >> Seg1 >> Seg2;\n        cout << fixed << setprecision(15) << Dist(Seg1, Seg2) << endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <cmath>\nusing namespace std;\n\nstruct Point\n{\n    double x,y;\n    Point(){}\n    Point(double _x,double _y):x(_x),y(_y){}\n    Point operator -(Point p){return Point(x-p.x,y-p.y);}\n\n    double norm(){return x*x+y*y;}\n    double abs(){return sqrt(norm());}\n\n\n};\ndouble dot(Point a,Point b)\n{\n    return a.x*b.x+a.y*b.y;\n}\ndouble cross(Point a,Point b)\n{\n    return a.x*b.y-a.y*b.x;\n}\ndouble dist(Point a,Point b)\n{\n    return sqrt((a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y));\n}\nint n;\nPoint p1,p2,p3,p4;\nbool is_intersect(Point p1,Point p2,Point p3,Point p4)\n{\n    Point a=p2-p1;\n    Point b=p4-p3;\n    return cross(p1,b)*cross(p2,b)<0&&cross(p3,a)*cross(p4,a)<0;\n}\ndouble dist_pl(Point p,Point lp1,Point lp2)\n{\n    Point a=p-lp1;\n    Point b=lp2-lp1;\n    if(dot(p-lp1,lp2-lp1)<0) return dist(p,lp1);\n    if(dot(p-lp2,lp1-lp2)<0) return dist(p,lp2);\n    return fabs(cross(a,b)/b.abs());\n}\ndouble dist_ll(Point p1,Point p2,Point p3,Point p4)\n{\n    if(is_intersect(p1,p2,p3,p4))\n    {\n        return 0;\n\n    }\n    return min(min(dist_pl(p1,p3,p4),dist_pl(p2,p3,p4)),min(dist_pl(p3,p1,p2),dist_pl(p4,p1,p2)));\n\n}\nint main()\n{\n//    freopen(\"in.txt\",\"r\",stdin);\n    scanf(\"%d\",&n);\n    while(n--)\n    {\n        scanf(\"%lf%lf%lf%lf%lf%lf%lf%lf\",&p1.x,&p1.y,&p2.x,&p2.y,&p3.x,&p3.y,&p4.x,&p4.y);\n        printf(\"%.10lf\\n\",dist_ll(p1,p2,p3,p4));\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <iomanip>\n#include <algorithm>\n\nusing namespace std;\n\n#define EPS 1e-10\n#define LEFT_TOP POS(10001, 10001)\n#define NO_INTERSECT POS(-12345, -12345)\n#define PARALLEL POS(-10001, -10001)\n#define COLINE POS(12345, 12345)\nconst double PI = acos(-1.0);\n\ntypedef long double T;\n\nclass POS {\npublic:\n    T x, y;\n    POS(const T& x = 0, const T& y = 0) : x(x), y(y) {}\n    POS(const POS& x) : x(x.x), y(x.y) {}\n\n    bool operator==(const POS& rhs) const {\n        return x == rhs.x && y == rhs.y;\n    }\n\n    POS& operator+=(const POS& rhs) {\n        x += rhs.x;\n        y += rhs.y;\n        return *this;\n    }\n\n    POS operator -() {\n        POS tmp(-x, -y);\n        return tmp;\n    }\n\n    T dist(const POS& rhs) const {\n        T tmp_x = x-rhs.x, tmp_y = y-rhs.y;\n        return sqrt(tmp_x*tmp_x+tmp_y*tmp_y);\n    }\n\n    friend ostream& operator<<(ostream& out, const POS& pos) {\n        out << pos.x << \" \" << pos.y;\n        return out;\n    }\n};\n\nPOS const operator+(const POS& lhs, const POS& rhs) {\n    return POS(lhs) += rhs;\n}\n\nPOS const operator-(const POS& lhs, const POS& rhs) {\n    POS tmp = rhs;\n    tmp = -tmp;\n    return POS(lhs) += (tmp);\n}\n\nbool cmp_convex(const POS& lhs, const POS& rhs) {\n    return (lhs.x < rhs.x) || ( (lhs.x == rhs.x)&&(lhs.y < rhs.y) );\n}\n\ninline T cross(const POS& o, const POS& a, const POS& b) {\n    T value = (a.x-o.x)*(b.y-o.y) - (a.y-o.y)*(b.x-o.x);\n    if (fabs(value) < EPS) return 0;\n    return value;\n}\n\nvoid convex_hull(POS* points, POS* need, int& n) {\n    sort(points, points+n, cmp_convex);\n    int index = 0;\n    for (int i = 0; i < n; ++i) {\n        while (index >= 2 && cross(need[index-2], need[index-1], points[i]) <= 0) index--;\n        need[index++] = points[i];\n    }\n    int half_point = index+1;\n    for (int i = n-2; i >= 0; --i) {\n        while (index >= half_point && cross(need[index-2], need[index-1], points[i]) <= 0) index--;\n        need[index++] = points[i];\n    } /* be careful that start point will appear in fisrt and last in need array */\n    n = index;\n}\n\nclass LINE {\npublic:\n    POS start, end, vec;\n    T angle;\n    LINE() {}\n    LINE(const T& st_x, const T& st_y, const T& ed_x, const T& ed_y) :\n        start(st_x, st_y), end(ed_x, ed_y), vec(end - start), angle(atan2(vec.x, vec.y)) {}\n\n    LINE(const POS& start, const POS& end) :\n        start(start), end(end), vec(end - start), angle(atan2(vec.x, vec.y)) {}\n\n    LINE(const POS& end) : /* start point is origin */\n        start(0, 0), end(end), vec(end), angle(atan2(vec.x, vec.y)) {}\n\n    LINE(const T a, const T b, const T c) : /* given line by ax+by+c = 0 */\n        start(0, 0), end(0, 0), vec(-b, a) {\n        if (a == 0) {\n            start.y = end.y = -c/b;\n            end.x = -b;\n        }\n        else if (b == 0) {\n            start.x = end.x = -c/a;\n            end.y = a;\n        }\n        else if (c == 0) {\n            end.x = -b; end.y = a;\n        }\n        else {\n            start.y = -c/b; end.x = -c/a;\n            vec.x = -c/a; vec.y = c/b;\n        }\n        angle = atan2(vec.x, vec.y);\n    }\n\n    LINE build_orthogonal(const POS& point) const {\n        T c = -(vec.x*point.x + vec.y*point.y);\n        return LINE(vec.x, vec.y, c);\n    }\n\n    T length2() const { /* square */\n        T x = start.x - end.x, y = start.y - end.y;\n        return x*x + y*y;\n    }\n\n    void modify(T x, T y) {\n        this->end.x += x;\n        this->end.y += y;\n        this->vec.x += x;\n        this->vec.y += y;\n    }\n\n    bool on_line(const POS& a) const {\n        if (vec.x == 0) {\n            if (start.x != a.x) return false;\n            return true;\n        }\n        if (vec.y == 0) {\n            if (start.y != a.y) return false;\n            return true;\n        }\n        return fabs(( (a.x-start.x)/vec.x*vec.y + start.y )- a.y) < EPS;\n    }\n\n    bool operator/(const LINE& rhs) const { /* to see if this line parallel to LINE rhs */\n        return (vec.x*rhs.vec.y == vec.y*rhs.vec.x);\n    }\n\n    bool operator==(const LINE& rhs) const { /* to see if they are same line */\n        return (*this/rhs) && (rhs.on_line(start));\n    }\n\n    POS intersect(const LINE& rhs) const {\n        if (*this==rhs) return COLINE; /* return co-line */\n        if (*this/rhs) return PARALLEL; /* return parallel */\n\n        T A1 = vec.y, B1 = -vec.x, C1 = end.x*start.y - start.x*end.y;\n        T A2 = rhs.vec.y, B2 = -rhs.vec.x, C2 = rhs.end.x*rhs.start.y - rhs.start.x*rhs.end.y;\n        return POS( (B2*C1-B1*C2)/(A2*B1-A1*B2), (A1*C2-A2*C1)/(A2*B1-A1*B2) ); /* sometimes has -0 */\n    }\n\n    T dist(const POS& a) const {\n        return fabs(vec.y*a.x - vec.x*a.y + vec.x*start.y - vec.y*start.x)/sqrt(vec.y*vec.y+vec.x*vec.x);\n    }\n\n    T dist(const LINE& rhs) const {\n        POS intersect_point = intersect(rhs);\n        if (intersect_point == PARALLEL) {\n            return dist(rhs.start);\n        }\n        return 0;\n    }\n\n    friend ostream& operator<<(ostream& out, const LINE& line) {\n        out << line.start << \"-->\" << line.end << \" vec: \" << line.vec;\n        return out;\n    }\n};\n\nclass LINESEG : public LINE {\npublic:\n    LINESEG() : LINE(POS(0, 0)) {}\n    LINESEG(const LINE& input) : LINE(input) {}\n    LINESEG(const POS& start, const POS& end) : LINE(start, end) {}\n\n    bool on_lineseg(const POS& a) const {\n        if (!on_line(a)) return false;\n        bool first, second;\n        if (vec.x >= 0) first = (a.x >= start.x)&&(a.x <= end.x);\n        else first = (a.x <= start.x)&&(a.x >= end.x);\n        if (vec.y >= 0) second = (a.y >= start.y)&&(a.y <= end.y);\n        else second = (a.y <= start.y)&&(a.y >= end.y);\n        return first&&second;\n    }\n\n    bool operator==(const LINESEG& rhs) const {\n        return ( (rhs.start == start && rhs.end == end) ||\n              (rhs.start == end && rhs.end == start) );\n    }\n\n    bool operator==(const LINE& rhs) const {\n        return this->LINE::operator==(rhs);\n    }\n\n    T dot(const LINESEG& rhs) const {\n        return vec.x*rhs.vec.x + vec.y*rhs.vec.y;\n    }\n\n    T cross(const LINESEG& rhs) const {\n        return vec.x*rhs.vec.y - vec.y*rhs.vec.x;\n    }\n\n    bool clockwise(const LINE& a) const { /* to see if LINE a is in b's clockwise way */\n        return cross(a) > 0;\n    }\n\n    T dist(const POS& a) const {\n        T ortho_dist = this->LINE::dist(a);\n        LINE ortho_line = build_orthogonal(a);\n        POS intersect_point = this->LINE::intersect(ortho_line);\n        if (on_lineseg(intersect_point)) return ortho_dist;\n        else return min(a.dist(this->start), a.dist(this->end));\n    }\n\n    T dist(const LINE& line) const {\n        POS intersect_point = this->LINE::intersect(line);\n        if (intersect_point == COLINE) return 0;\n        if (intersect_point == PARALLEL) return dist(line.start);\n        if (on_lineseg(intersect_point)) return 0;\n        return min(line.dist(start), line.dist(end));\n    }\n\n    T dist(const LINESEG& line) const {\n        return min( min(dist(line.start), dist(line.end)),\n                    min(line.dist(start), line.dist(end)) );\n    }\n\n    POS intersect(const LINESEG& rhs) const {\n        LINE a1b1(start, rhs.start);\n        LINE a1b2(start, rhs.end);\n        LINE b1a1(rhs.start, start);\n        LINE b1a2(rhs.start, end);\n\n        POS tmp(this->LINE::intersect(rhs));\n\n        if (tmp == COLINE) {\n            if ( (start==rhs.start) && (!rhs.on_lineseg(end)) && (!on_lineseg(rhs.end)) ) return start;\n            if ( (start==rhs.end) && (!rhs.on_lineseg(end)) && (!on_lineseg(rhs.start)) ) return start;\n            if ( (end==rhs.start) && (!rhs.on_lineseg(start)) && (!on_lineseg(rhs.end)) ) return end;\n            if ( (end==rhs.end) && (!rhs.on_lineseg(start)) && (!on_lineseg(rhs.start)) ) return end;\n            if (on_lineseg(rhs.start) || on_lineseg(rhs.end) || rhs.on_lineseg(start) || rhs.on_lineseg(end)) return COLINE;\n            return NO_INTERSECT;\n        }\n\n        bool intersected =  ( (cross(a1b1)*cross(a1b2)<0) && (rhs.cross(b1a1)*rhs.cross(b1a2)<0) );\n        if (!intersected) return NO_INTERSECT;\n        if (!on_lineseg(tmp) || !rhs.on_lineseg(tmp)) return NO_INTERSECT;\n        return tmp;\n    }\n};\n\nint main()\n{\n    int q;\n    cin >> q;\n    cout << fixed << setprecision(10);\n    while(q--){\n        int xp0, yp0, xp1, yp1, xp2, yp2, xp3, yp3;\n        cin >> xp0 >> yp0 >> xp1 >> yp1 >> xp2 >> yp2 >> xp3 >> yp3;\n        POS p0(xp0, yp0), p1(xp1, yp1), p2(xp2, yp2), p3(xp3, yp3);\n        LINESEG l0(p0, p1), l1(p2, p3);\n        cout << l0.dist(LINE(l1)) << endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "// #include {{{\n#include <iostream>\n#include <cassert>\n#include <cstring>\n#include <cstdlib>\n#include <cstdio>\n#include <cctype>\n#include <cmath>\n#include <ctime>\n#include <queue>\n#include <set>\n#include <map>\n#include <stack>\n#include <string>\n#include <bitset>\n#include <vector>\n#include <complex>\n#include <algorithm>\nusing namespace std;\n// }}}\n// #define {{{\ntypedef long long ll;\ntypedef double db;\ntypedef pair<int,int> pii;\ntypedef vector<int> vi;\n#define de(x) cout << #x << \"=\" << x << endl\n#define rep(i,a,b) for(int i=a;i<(b);++i)\n#define per(i,a,b) for(int i=(b)-1;i>=(a);--i)\n#define all(x) (x).begin(),(x).end()\n#define sz(x) (int)(x).size()\n#define mp make_pair\n#define pb push_back\n#define fi first\n#define se second\n// }}}\n\ntypedef db T;\nconst db eps = 1e-11;\nint sgn(T x){return (x>eps)-(x<-eps);}\nstruct P{\n    T x,y;\n    P(){} P(T x,T y):x(x),y(y){}\n    void read(){scanf(\"%lf%lf\",&x,&y);}\n    P operator - (const P&b) const {return P(x-b.x,y-b.y);}\n    P operator + (const P&b) const {return P(x+b.x,y+b.y);}\n    T operator * (const P&b) const {return x*b.x+y*b.y;}\n    P operator * (const T&k) const {return P(x*k,y*k);}\n    T operator ^ (const P&b) const {return x*b.y-y*b.x;}\n};\nT norm(P a){return a*a;}\nP proj(P p,P a,P b){return (b-a)*((p-a)*(b-a)/norm(b-a))+a;}\nT abs(P a){return sqrt(norm(a));}\nstruct L{\n    P s,t;\n    L(){} L(P s,P t):s(s),t(t){}\n    void read(){s.read();t.read();}\n};\n\nbool isSS(L a,L b){ // seg x seg , replace x->y to accelerate\n    T c1=(a.t-a.s)^(b.s-a.s),c2=(a.t-a.s)^(b.t-a.s);\n    T c3=(b.t-b.s)^(a.s-b.s),c4=(b.t-b.s)^(a.t-b.s);\n    return sgn(c1) * sgn(c2) <= 0 && sgn(c3) * sgn(c4) <= 0 &&\n        sgn(max(a.s.x,a.t.x) - min(b.s.x,b.t.x)) >= 0 &&\n        sgn(max(b.s.x,b.t.x) - min(a.s.x,a.t.x)) >= 0 &&\n        sgn(max(a.s.y,a.t.y) - min(b.s.y,b.t.y)) >= 0 &&\n        sgn(max(b.s.y,b.t.y) - min(a.s.y,a.t.y)) >= 0;\n}\nbool inRegion(T a,T p,T b) {return sgn(a-p)==0||sgn(b-p)==0||(a<p!=b<p);}\nbool inRec(P p,L a){\n    return inRegion(a.s.x,p.x,a.t.x) && inRegion(a.s.y,p.y,a.t.y);\n}\ndb disPL(P p,L a){\n    P q=proj(p,a.s,a.t);\n    if(inRec(p,a)) abs(p-q);\n    return min(abs(p-a.s),abs(p-a.t));\n}\ndb disSS(L a,L b){\n    if(isSS(a,b)) return 0;\n    return min(min(disPL(a.s,b),disPL(a.t,b)),min(disPL(b.s,a),disPL(b.t,a)));\n}\n\nint main(){\n    int Q;scanf(\"%d\",&Q);\n    rep(i,0,Q){\n        L a,b;a.read();b.read();\n        printf(\"%.10f\\n\",disSS(a,b));\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nnamespace arithmetic {\n  template<typename T> class Addition {\n  public:\n    template<typename V> T operator+(const V& v) const {\n      return T(static_cast<const T&>(*this)) += v;\n    }\n  };\n\n  template<typename T> class Subtraction {\n  public:\n    template<typename V> T operator-(const V& v) const {\n      return T(static_cast<const T&>(*this)) -= v;\n    }\n  };\n\n  template<typename T> class Multiplication {\n  public:\n    template<typename V> T operator*(const V& v) const {\n      return T(static_cast<const T&>(*this)) *= v;\n    }\n  };\n\n  template<typename T> class Division {\n  public:\n    template<typename V> T operator/(const V& v) const {\n      return T(static_cast<const T&>(*this)) /= v;\n    }\n  };\n\n  template<typename T> class Modulus {\n  public:\n    template<typename V> T operator%(const V& v) const {\n      return T(static_cast<const T&>(*this)) %= v;\n    }\n  };\n}\n\ntemplate<typename T> class IndivisibleArithmetic : public arithmetic::Addition<T>, public arithmetic::Subtraction<T>, public arithmetic::Multiplication<T> {};\n\ntemplate<typename T> class Arithmetic : public IndivisibleArithmetic<T>, public arithmetic::Division<T> {};\n\ntemplate<typename T> class Ordered {\npublic:\n  template<typename V> bool operator==(const V& v) const {\n    return !(static_cast<T>(v) < static_cast<const T&>(*this) || static_cast<const T&>(*this) < static_cast<T>(v));\n  }\n  \n  template<typename V> bool operator!=(const V& v) const {\n    return static_cast<T>(v) < static_cast<const T&>(*this) || static_cast<const T&>(*this) < static_cast<T>(v);\n  }\n\n  template<typename V> bool operator>(const V& v) const {\n    return static_cast<T>(v) < static_cast<const T&>(*this);\n  }\n\n  template<typename V> bool operator<=(const V& v) const {\n    return !(static_cast<T>(v) < static_cast<const T&>(*this));\n  }\n\n  template<typename V> bool operator>=(const V& v) const {\n    return !(static_cast<const T&>(*this) < static_cast<T>(v));\n  }\n};\n\ntemplate<typename T> inline T gcd(T a, T b) {\n  return __gcd(a, b);\n}\n\ntemplate<typename T> inline T lcm(T a, T b) {\n  return a / gcd(a, b) * b;\n}\n\ntemplate<typename T> inline T floor(T a, T b) {\n  return floor(a / b) * b <= a ? floor(a / b) : floor(a / b) - 1;\n}\n\ntemplate<typename T> inline T ceil(T a, T b) {\n  return floor(a + b - 1, b);\n}\n\ntemplate<typename T> inline T round(T a, T b) {\n  return floor(a + b / 2);\n}\n\ntemplate<typename T> inline T mod(T a, T b) {\n  return a - floor(a, b) * b;\n}\n\ntemplate<typename T> inline T factorial(T n) {\n  return n <= 1 ? 1 : factorial(n - 1) * n;\n}\n\nclass Real : public Arithmetic<Real>, public arithmetic::Modulus<Real>, public Ordered<Real> {\nprivate:\n  static long double EPS;\n  long double val;\n\n  operator long double() const {\n    return val;\n  }\n\npublic:\n  Real() {}\n\n  Real(long double val) : val(val) {}\n\n  Real operator-() const {\n    return -val;\n  }\n\n  template<typename T> Real operator+=(const T& r) {\n    val += static_cast<long double>(r);\n    return *this;\n  }\n\n  template<typename T> Real operator-=(const T& r) {\n    val -= static_cast<long double>(r);\n    return *this;\n  }\n\n  template<typename T> Real operator*=(const T& r) {\n    val *= static_cast<long double>(r);\n    return *this;\n  }\n\n  template<typename T> Real operator/=(const T& r) {\n    val /= static_cast<long double>(r);\n    return *this;\n  }\n\n  template<typename T> Real operator%=(const T& r) {\n    return *this = mod(*this, static_cast<Real>(r));\n  }\n\n  template<typename T> Real operator-(const T& v) const {\n    return Real(*this) -= v;\n  }\n\n  template<typename T> bool operator<(const T r) const {\n    return val < static_cast<long double>(r) - EPS;\n  }\n\n  Real abs() const {\n    return std::abs(val);\n  }\n\n  Real sqrt() const {\n    return std::sqrt(val);\n  }\n\n  long double toLongDouble() const {\n    return val;\n  }\n};\n\nlong double Real::EPS = 1e-8;\n\ninline ostream& operator<<(ostream& os, const Real& a) {\n  os << fixed << setprecision(15) << a.toLongDouble();\n  return os;\n}\n\ninline istream& operator>>(istream& is, Real& a) {\n\tlong double n;\n\tis >> n;\n\ta = n;\n\treturn is;\n}\n\nReal floor(const Real& r) {\n  return floor(r.toLongDouble());\n}\n\nclass Point : public Arithmetic<Point> {\npublic:\n  Real x, y;\n\n  Point() {}\n\n  Point(const Real& x) : x(x), y(0) {}\n\n  Point(const Real& x, const Real& y) : x(x), y(y) {}\n\n  Point operator+=(const Point& p) {\n    x += p.x;\n    y += p.y;\n    return *this;\n  }\n\n  Point operator-=(const Point& p) {\n    x -= p.x;\n    y -= p.y;\n    return *this;\n  }\n\n  Point operator*=(const Point& p) {\n    Real xx = x * p.x - y * p.y;\n    y = x * p.y + y * p.x;\n    x = xx;\n    return *this;\n  }\n\n  Point operator*=(const Real& r) {\n    x *= r;\n    y *= r;\n    return *this;\n  }\n\n  Point operator/=(const Point& p) {\n    Real nrm = p.norm();\n    Real xx = (x * p.x + y * p.y) / nrm;\n    y = (y * p.x - x * p.y) / nrm;\n    x = xx;\n    return *this;\n  }\n\n  Point operator/=(const Real& r) {\n    x /= r;\n    y /= r;\n    return *this;\n  }\n\n  Real norm() const {\n    return x * x + y * y;\n  }\n\n  Real abs() const {\n    return norm().sqrt();\n  }\n\n  Point conj() const {\n    return Point(x, -y);\n  }\n};\n\ninline Point operator*(const Real& real, const Point& point) {\n  return point * real;\n}\n\ninline Point operator/(const Real& real, const Point& point) {\n  return point / real;\n}\n\ninline ostream& operator<<(ostream& os, const Point& point) {\n\tos << point.x << \" \" << point.y;\n\treturn os;\n}\n\ninline istream& operator>>(istream& is, Point& point) {\n  Real x, y;\n\tis >> x >> y;\n\tpoint = Point(x, y);\n\treturn is;\n}\n\nclass Line {\npublic:\n  Point a, b;\n\n  Line() {}\n\n  Line (const Point& a, const Point& b) : a(a), b(b) {}\n\n  bool operator==(const Line& line) const {\n    return ((line.vec() / vec()).y == 0) && (((line.a - a) / vec()).y == 0);\n  }\n\n  Point vec() const {\n    return b - a;\n  }\n};\n\ninline ostream& operator<<(ostream& os, const Line& line) {\n\tos << line.a << \" \" << line.b;\n\treturn os;\n}\n\ninline istream& operator>>(istream& is, Line& line) {\n  Point a, b;\n  is >> a >> b;\n  line = Line(a, b);\n  return is;\n}\n\nclass Segment : public Line {\npublic:\n  Segment() {}\n\n  Segment (const Point& a, const Point& b) : Line(a, b) {}\n};\n\nenum CCW{LEFT = 1, RIGHT = 2, BACK = 4, FRONT = 8, ON = 16};\n\nint ccw(const Segment& segment, const Point& point) {\n  Point p = (point - segment.a) / segment.vec();\n  if (p.y > 0) return LEFT;\n  if (p.y < 0) return RIGHT;\n  if (p.x < 0) return BACK;\n  if (p.x > 1) return FRONT;\n  return ON;\n}\n\ntemplate<bool strict = false> inline bool intersect(const Line& line1, const Line& line2) {\n  if (strict) return (line1.vec() / line2.vec()).y != 0;\n  return ((line1.vec() / line2.vec()).y != 0) || (line1 == line2);\n}\n\ntemplate<bool strict = false> inline bool intersect(const Line& line, const Segment& segment) {\n  Point p1 = segment.a / line.vec(), p2 = segment.b / line.vec();\n  if (strict) return p1.y * p2.y < 0;\n  return p1.y * p2.y <= 0;\n}\n\ntemplate<bool strict = false> inline bool intersect(const Segment& segment, const Line& line) {\n  return intersect(line, segment);\n}\n\ntemplate<bool strict = false> inline bool intersect(const Segment& segment1, const Segment& segment2) {\n  int ccw1 = ccw(segment1, segment2.a) | ccw(segment1, segment2.b);\n  int ccw2 = ccw(segment2, segment1.a) | ccw(segment2, segment1.b);\n  if (strict) return (ccw1 & ccw2) == (LEFT | RIGHT);\n  return ((ccw1 & ccw2) == (LEFT | RIGHT)) || ((ccw1 | ccw2) & ON);\n}\n\ninline Real distance(const Segment& segment, const Point& point) {\n  Point p = (point - segment.a) / segment.vec();\n  if (p.x < 0) return p.abs();\n  if (p.x > 1) return (p - Point(1, 0)).abs();\n  return (p.y * segment.vec()).abs();\n}\n\ninline Real distance(const Segment& segment1, const Segment& segment2) {\n  if (intersect(segment1, segment2)) return 0;\n  return min(min(distance(segment1, segment2.a), distance(segment1, segment2.a)), min(distance(segment2, segment1.a), distance(segment2, segment1.a)));\n}\n\nint main() {\n  int q;\n  cin >> q;\n  for (int i = 0; i < q; ++i) {\n    Segment segment1, segment2;\n    cin >> segment1 >> segment2;\n    cout << distance(segment1, segment2) << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cmath>\n#include<iomanip>\nusing namespace std;\nconst double EPS=1e-10;\nstruct point{\n\tdouble x,y;\n\tpoint(const point&a):x(a.x),y(a.y){}\n\tpoint(const double&x=0,const double&y=0):x(x),y(y){}\n\tpoint operator+(const point&p)const{return point(x+p.x,y+p.y);}\n\tpoint operator-(const point&p)const{return point(x-p.x,y-p.y);}\n\tpoint operator*(const double&k)const{return point(x*k,y*k);}\n\tpoint operator/(const double&k)const{return point(x/k,y/k);}\n\tdouble norm(){return x*x+y*y;}\n\tdouble abs(){return sqrt(norm());}\n\tvoid operator=(const point&a){\n\t\tx=a.x,y=a.y;\n\t}\n\tbool operator<(const point&p)const{\n\t\treturn x!=p.x?x<p.x:y<p.y;\n\t}\n\tbool operator==(const point&p)const{\n\t\treturn fabs(x-p.x)<EPS&&fabs(y-p.y)<EPS;\n\t}\n\tfriend double dot(const point&a,const point&b){\n\t\treturn a.x*b.x+a.y*b.y;\n\t}\n\tfriend double cross(const point&a,const point&b){\n\t\treturn a.x*b.y-a.y*b.x;\n\t}\n};\ntypedef point vector;\nstruct segment{\n\tpoint p1,p2;\n\tsegment(const double&a,const double&b,const double&c,const double&d){\n\t\tp1.x=a,p1.y=b,p2.x=c,p2.y=d;\n\t}\n\tsegment(const point&a, const point&b):p1(a),p2(b){}\n\tpoint get_vec()const{return point(p2.x-p1.x,p2.y-p1.y);}\n\tdouble abs()const{return get_vec().abs();}\n};\nbool orthogonal(const vector&a,const vector&b){\n\treturn fabs(dot(a,b))<EPS;\n}\nbool orthogonal(const point&a,const point&b,const point&c,const point&d){\n\treturn fabs(dot(a-b,c-d))<EPS;\n}\nbool orthogonal(const segment&a,const segment&b){\n\treturn fabs(dot(a.get_vec(),b.get_vec()))<EPS;\n}\nbool parallel(const vector&a,const vector&b){\n\treturn fabs(cross(a,b))<EPS;\n}\nbool parallel(const point&a,const point&b,const point&c,const point&d){\n\treturn fabs(cross(a-b,c-d))<EPS;\n}\nbool parallel(const segment&a,const segment&b){\n\treturn fabs(cross(a.get_vec(),b.get_vec()))<EPS;\n}\npoint project(const segment&s,const point&p){\n\tvector base=s.get_vec();\n\tdouble r=dot(p-s.p1,base)/base.norm();\n\treturn s.p1+base*r;\n}\npoint reflect(const segment&s,const point&p){\n\treturn p+(project(s,p)-p)*2.0;\n}\nint ccw(const point&a,const point&b,const point&c){\n\tvector t1=b-a;\n\tvector t2=c-a;\n\tif(cross(t1,t2)>EPS) return 1;\n\tif(cross(t1,t2)<-EPS) return -1;\n\tif(dot(t1,t2)<-EPS) return -2;\n\tif(t1.norm()<t2.norm()) return 2;\n\treturn 0;\n}\nbool intersect(const point&a,const point&b,const point&c,const point&d){\n\treturn ((ccw(a,b,c)*ccw(a,b,d))<=0&&(ccw(c,d,a)*ccw(c,d,b))<=0);\n}\nbool intersect(const segment&a,const segment&b){\n\treturn intersect(a.p1,a.p2,b.p1,b.p2);\n}\npoint intersect_point(const segment&s1,const segment&s2){\n\tdouble d1=fabs(cross(s2.p1-s1.p1,s1.get_vec()));\n\tdouble d2=fabs(cross(s2.p2-s1.p1,s1.get_vec()));\n\tdouble t=d1/(d1+d2);\n\treturn s2.p1+s2.get_vec()*t;\n}\ndouble dis_pos(const segment&s,const point&p){\n\treturn fabs(cross(p-s.p1,s.p2-s.p1))/s.abs();\n}\ndouble dis_ps(const segment&s,const point&p){\n\tif(dot(p-s.p1,s.p2-s.p1)<0) return (p-s.p1).abs();\n\tif(dot(p-s.p2,s.p1-s.p2)<0) return (p-s.p2).abs();\n\treturn dis_pos(s,p);\n}\ndouble dis_seg(const segment&s1,const segment&s2){\n\tif(intersect(s1,s2)) return 0.0;\n\telse{\n\t\treturn min(min(dis_ps(s1,s2.p1),dis_ps(s1,s2.p2)),min(dis_ps(s2,s1.p1),dis_ps(s2,s1.p2)));\n\t}\n}\nint main(){\n\tdouble a,b,c,d;\n\tint n;\n\tcin>>n;\n\tfor(int i=0;i<n;i++){\n\t\tcin>>a>>b>>c>>d;\n\t\tsegment s1(a,b,c,d);\n\t\tcin>>a>>b>>c>>d;\n\t\tsegment s2(a,b,c,d);\n\t\tcout<<setprecision(10)<<fixed<<dis_seg(s1,s2)<<endl;\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cassert>\n#include <cstring>\n#include <cmath>\n#include <functional>\n#include <algorithm>\n#include <utility>\n#include <vector>\n#include <string>\n#include <map>\n#include <set>\n#ifdef XLor\n  #define dbg(args...) cout << \"\\033[32;1m\" << #args << \" -> \", err(args)\n  void err() { std::cout << \"\\033[39;0m\" << std::endl; }\n  template<typename T, typename...Args>\n  void err(T a, Args...args) { std::cout << a << ' '; err(args...); }\n#else\n  #define dbg(...)\n#endif\n#define ms(a,b) memset(a,b,sizeof(a))\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> PII;\nconst int mod = 998244353;\nconst int inf = 1 << 30;\nconst int maxn = 100000 + 5;\n\nnamespace Geometry {\n  const double eps = 1e-5;\n  const double pi = acos(-1.0);\n\n  inline int sign(double x) {\n    if (fabs(x) < eps) return 0;\n    else return x < 0 ? -1 : 1;\n  }\n  inline int dcmp(double x, double y) {\n    return sign(x - y);\n  }\n  inline int zero(double x) {\n    return fabs(x) < eps;\n  }\n\n  // x 在 [l, r] 内或 [r, l] 内\n  inline int inMid(double l, double r, double x) {\n    return dcmp(l, x) * dcmp(r, x) <= 0;\n  }\n\n  struct Point {\n    double x, y;\n    Point(double x = 0, double y = 0): x(x), y(y) {}\n\n    void read() { scanf(\"%lf%lf\", &x, &y); }\n\n    Point operator + (const Point& b) const { return Point(x + b.x, y + b.y); }\n    Point operator - (const Point& b) const { return Point(x - b.x, y - b.y); }\n    Point operator * (double p) { return Point(x * p, y * p); }\n    Point operator / (double p) { return Point(x / p, y / p); }\n\n    double abs() { return sqrt(x * x + y * y); }\n    double abs2() { return x * x + y * y; }\n    double distance(const Point& b) { return (*this - b).abs(); }\n\n    // 逆时针旋转\n    Point rot90(){ return Point(-y, x); }\n    Point rot(double r) {\n      return Point(x * cos(r) - y * sin(r), x * sin(r) + y * cos(r));\n    }\n    Point unit() { return *this / abs(); }\n  };\n\n  ostream& operator<<(ostream& out, const Point& u) {\n    return out << \"(\" << u.x << \", \" << u.y << \")\";\n  }\n  istream& operator>>(istream& in, Point& u) {\n    return in >> u.x >> u.y;\n  }\n\n  bool operator < (const Point& a, const Point& b) {\n    return a.x < b.x || (a.x == b.x && a.y < b.y);\n  }\n\n  bool operator == (const Point& a, const Point& b) {\n    return dcmp(a.x, b.x) == 0 && dcmp(a.y, b.y) == 0;\n  }\n\n  double dot(Point a, Point b) { return a.x * b.x + a.y * b.y; }\n  double angle(Point a, Point b) { return acos(dot(a, b) / a.abs() / b.abs()); }\n  double cross(Point a, Point b) { return a.x * b.y - a.y * b.x; }\n  double cross(Point a, Point b, Point c) { return cross(b - a, c - a); }\n\n  // C 在 B 的逆时针方向 1, 顺时针方向 -1, 共线 0\n  int clockwise(Point a, Point b, Point c) { return sign(cross(b - a, c - a)); }\n\n  // p[0] -> p[1]\n  struct Line {\n    Point p[2];\n    Line() {}\n    Line(Point a, Point b) { p[0] = a; p[1] = b; }\n\n    void read() { p[0].read(); p[1].read(); }\n    Point& operator [](int i) { return p[i]; }\n    Point dir() { return p[1] - p[0]; }\n\n    // q 在直线上的投影点\n    Point projection(const Point& q) {\n      Point k = p[1] - p[0];\n      return p[0] + k * (dot(q - p[0], k) / k.abs2());\n    }\n    // q 在直线上的对称点\n    Point reflection(const Point& q) {\n      return projection(q) * 2 - q;\n    }\n  };\n\n  // q 是否在线段 L 上\n  bool onSegment(Line l, const Point& q) {\n    return sign(cross(q - l[0], l[1] - l[0])) == 0 && \n      inMid(l[0].x, l[1].x, q.x) && inMid(l[0].y, l[1].y, q.y);\n  }\n  // q 是否在线段 AB 上\n  bool onSegment(Point a, Point b, Point q) {\n    return onSegment(Line(a, b), q);\n  }\n  // 直线 L1 和 L2 是否平行\n  bool isParallel(Line l1, Line l2) {\n    return sign(cross(l1.dir(), l2.dir())) == 0;\n  }\n  // 射线 L1 和 L2 的方向是否相同\n  bool isSameDir(Line l1, Line l2) {\n    return isParallel(l1, l2) && sign(dot(l1.dir(), l2.dir())) == 1;\n  }\n  // 直线 L1 和 L2 是否正交\n  bool isOrthogonal(Line l1, Line l2) {\n    return sign(dot(l1.dir(), l2.dir())) == 0;\n  }\n\n  // 区间 [l1, r1] 和 [l2, r2] 是否相交\n  bool intersect(double l1, double r1, double l2, double r2) {\n    if (l1 > r1) swap(l1, r1);\n    if (l2 > r2) swap(l2, r2); \n    return !(dcmp(r1, l2) == -1 || dcmp(r2 ,l1) == -1);\n  }\n  // 线段 P1P2 和 Q1Q2 是否相交\n  bool isSegmentIntersect(Point p1, Point p2, Point q1, Point q2) {\n    return intersect(p1.x, p2.x, q1.x, q2.x) && \n      intersect(p1.y, p2.y, q1.y, q2.y) && \n      sign(cross(p1, p2, q1)) * sign(cross(p1, p2, q2)) <= 0 && \n      sign(cross(q1, q2, p1)) * sign(cross(q1, q2, p2)) <= 0;\n  }\n  // 线段 L1 和 L2 是否相交\n  bool isSegmentIntersect(Line l1, Line l2) {\n    return isSegmentIntersect(l1[0], l1[1], l2[0], l2[1]);\n  }\n  // 获取直线 P1P2 和 Q1Q2 的交点\n  Point getLineIntersection(Point p1, Point p2, Point q1, Point q2) {\n    double a1 = cross(q1, q2, p1), a2 = -cross(q1, q2, p2);\n\t  return (p1 * a2 + p2 * a1) / (a1 + a2);\n  }\n  // 获取直线 L1 和 L2 的交点\n  Point getLineIntersection(Line l1, Line l2) {\n    return getLineIntersection(l1[0], l1[1], l2[0], l2[1]);\n  }\n  // 获取点 Q 到线段 L 的距离\n  double disPointSegment(Point q, Line l) {\n    Point k = l.projection(q);\n    if (onSegment(l, k)) {\n      return q.distance(k);\n    } else {\n      return min(q.distance(l[0]), q.distance(l[1]));\n    }\n  }\n  // 获取线段 L1 和 L2 的距离\n  double disSegment(Line l1, Line l2) {\n    if (isSegmentIntersect(l1, l2)) return 0.0;\n    return min(min(disPointSegment(l2[0], l1), disPointSegment(l2[1], l1)),\n      min(disPointSegment(l1[0], l2), disPointSegment(l1[1], l2)));\n  }\n}\nusing namespace Geometry;\n\nint main() {\n  int q; scanf(\"%d\", &q);\n  while (q--) {\n    Line l1, l2;\n    l1.read(); l2.read();\n    printf(\"%.10lf\\n\", disSegment(l1, l2));\n  }\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing ld = long double;\nusing point = std::complex<ld>;\nusing polygon = std::vector<point>;\n\nconstexpr ld eps = 1e-10;\nconstexpr ld pi = std::acos(-1.0);\n\nbool comp(point a, point b) {\n    return std::real(a) < std::real(b) || (std::real(a) <= std::real(b) && std::imag(a) < std::imag(b));\n}\n\nstd::vector<point> unique(std::vector<point> ps) {\n    std::sort(std::begin(ps), std::end(ps), comp);\n    std::vector<point> res;\n    for(auto& p : ps) {\n        if(res.empty() || abs(res.back() - p) > eps) {\n            res.push_back(p);\n        }\n    }\n    return res;\n}\n\nld dot(point const& a, point const& b) {\n    return std::real(std::conj(a) * b);\n}\nld cross(point const& a, point const& b) {\n    return std::imag(std::conj(a) * b);\n}\n\nint ccw(point a, point b, point c) {\n    b -= a; c -= a;\n    if(cross(b, c) > eps) return 1;            // a -> b -> c : counterclockwise\n    if(cross(b, c) < -eps) return -1;          // a -> b -> c : clockwise\n    if(dot(b, c) < 0) return 2;                // c -> a -> b : line\n    if(std::norm(b) < std::norm(c)) return -2; // a -> b -> c : line\n    return 0;                                  // a -> c -> b : line\n}\n\nstruct segment {\n    segment() : a(0, 0), b(0, 0) {}\n    segment(point a, point b) : a(a), b(b) {}\n    point a, b;\n};\n\nstruct line {\n    line() : a(0, 0), b(0, 0) {}\n    line(point a, point b) : a(a), b(b) {}\n    line(segment s) : a(s.a), b(s.b) {}\n    point a, b;\n};\n\n\nbool isis_ll(line l, line m) {\n    return cross(l.b - l.a, m.b - m.a) < eps;\n}\n\nbool isis_ls(line l, segment s) {\n    return (cross(l.b - l.a, s.a - l.a) * cross(l.b - l.a, s.b - l.a) < eps);\n}\n\nbool isis_lp(line l, point p) {\n    return (std::abs(cross(l.b - p, l.a - p)) < eps);\n}\n\nbool isis_sp(segment s, point p) {\n    return (std::abs(s.a - p) + std::abs(s.b - p) - std::abs(s.b - s.a) < eps);\n}\n\nbool isis_ss(segment s, segment t) {\n    return ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0\n        && ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0;\n}\n\npoint proj(line l, point p) {\n    long double t = dot(p - l.a, l.a - l.b) / std::norm(l.a - l.b);\n    return l.a + t * (l.a - l.b);\n}\n\npoint is_ll(line s, line t) {\n    point sv = s.b - s.a, tv = t.b - t.a;\n    assert(cross(sv, tv) != 0);\n    return s.a + sv * cross(tv, t.a - s.a) / cross(tv, sv);\n}\n\npoint is_ss(segment s1, segment s2) {\n    assert(isis_ss(s1, s2));\n    point sv = s1.b - s1.a, tv = s2.b - s2.a;\n    if(cross(sv, tv) == 0) {\n        if(std::abs(s1.a - s2.a) < eps || std::abs(s1.a - s2.b) < eps) {\n            return s1.a;\n        } else {\n            return s1.b;\n        }\n    } else {\n        return is_ll(line(s1), line(s2));\n    }\n}\n\nlong double dist_lp(line l, point p) {\n    return std::abs(p - proj(l, p));\n}\n\nlong double dist_ll(line l, line m) {\n    return isis_ll(l, m) ? 0 : dist_lp(l, m.a);\n}\n\nlong double dist_ls(line l, segment s) {\n    return isis_ls(l, s) ? 0 : std::min(dist_lp(l, s.a), dist_lp(l, s.b));\n}\n\nlong double dist_sp(segment s, point p) {\n    point r = proj(line(s), p);\n    return isis_sp(s, r) ? std::abs(r - p) : std::min(std::abs(s.a - p), std::abs(s.b - p));\n}\n\nlong double dist_ss(segment s, segment t) {\n    if(isis_ss(s, t)) return 0;\n    long double d1 = std::min(dist_sp(s, t.a), dist_sp(s, t.b));\n    long double d2 = std::min(dist_sp(t, s.a), dist_sp(t, s.b));\n    return std::min(d1, d2);\n}\n\nusing namespace std;\n\nint main() {\n    int q;\n    cin >> q;\n    while(q--) {\n        vector<segment> segs(2);\n        for(int i = 0; i < 2; ++i) {\n            ld x1, y1, x2, y2;\n            cin >> x1 >> y1 >> x2 >> y2;\n            segs[i] = segment(point(x1, y1), point(x2, y2));\n        }\n        cout << fixed << setprecision(10) << dist_ss(segs[0], segs[1]) << endl;\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\ntypedef long long ll;\ntypedef long double ld;\n#define rep(i,a,b) for(register ll(i)=(ll)(a);(i)<=(ll)(b);++i)\nconst ll inf=1e9+7;\n#define y1 _y_1_\n#ifndef gc\n\t#define gc getchar\n#endif\n#ifndef pc\n\t#define pc putchar\n#endif\ninline ll read(){ll f=0,x=0;register char c=gc();while(!isdigit(c))f^=c=='-',c=gc();while(isdigit(c))x=(x<<3)+(x<<1)+(c^'0'),c=gc();return x=f?-x:x;}\ninline ll read(ll&x){ll f=0;x=0;register char c=gc();while(!isdigit(c))f^=c=='-',c=gc();while(isdigit(c))x=(x<<3)+(x<<1)+(c^'0'),c=gc();return x=f?-x:x;}\ninline void writeln(){pc('\\n');}\ninline void write(ll x){if(x<0)pc('-'),x=-x;if(x>9)write(x/10);pc(x%10+'0');}\ninline void writeln(const ll&x){write(x),pc('\\n');}\nusing namespace std;\nnamespace Computation_Geometry{\n\tconst ld eps=1e-9;\n\tstruct vec{\n\t\tld x,y;\n\t\tinline bool is_zero(){return (abs(x)<=eps)&(abs(y)<=eps);}\n\t\tinline void scan(){x=read(),y=read();}\n\t\tinline vec(){x=y=0;}\n\t\tinline vec(const ld&X,const ld&Y){x=X,y=Y;}\n\t\tinline friend vec operator +(const vec&A,const vec&B){return vec(A.x+B.x,A.y+B.y);}\n\t\tinline friend vec operator -(const vec&A,const vec&B){return vec(A.x-B.x,A.y-B.y);}\n\t\tinline friend vec operator *(const vec&A,const ld&k){return vec(A.x*k,A.y*k);}\n\t\tinline friend vec operator /(const vec&A,const ld&k){return A*(1.0/k);}\n\t\tinline ld len(){return sqrt(x*x+y*y);}\n\t\tinline ld Len(){return x*x+y*y;}\n\t\tinline friend ld len(vec A){return A.len();}\n\t\tinline friend ld Len(vec A){return A.Len();}\n\t\tinline ld len(const ll&X,const ll&Y){return sqrt((x-X)*(x-X)+(y-Y)*(y-Y));}\n\t\tinline ld k(){return (x==0)?inf:y/x;}\n\t\tinline ld k(const ll&X,const ll&Y){return (x==X)?inf:(y-Y)/(x-X);}\n\t\tinline friend ld Dot(const vec&A,const vec&B){return A.x*B.x+A.y*B.y;}\n\t\tinline friend ld Cross(const vec&A,const vec&B){return A.x*B.y-B.x*A.y;}\n\t\tinline friend ld Theta(vec A,vec B){return acos(Cross(A,B)/A.len()/B.len());}\n\t\tinline friend ll ccw(vec p0,vec p1,vec p2){\n\t\t\tp1=p1-p0,p2=p2-p0;\n\t\t\tif (Cross(p1,p2)>=eps) return 1;//COUNTER_CLOCKWISE\n\t\t\telse if (Cross(p1,p2)<-eps) return -1;//CLOCKWISE\n\t\t\telse if (Dot(p1,p2)<-eps) return 2;//ONLINE_BACK\n\t\t\telse if (p1.len()<p2.len())return -2;//ONLINE_FRONT\n\t\t\treturn 0;//ON_SEGMENT\n\t\t}\n\t};\n\ttypedef vec point;\n\tstruct line{\n\t\tld A,B,C;\n\t\tinline line(){A=B=C=0;}\n\t\tinline line(const ld&_A,const ld&_B,const ld&_C){A=_A,B=_B,C=_C;}\n\t\tinline line(const ld&x1,const ld&y1,const ld&x2,const ld&y2){A=y2-y1,B=x1-x2,C=x2*y1-x1*y2;}\n\t\tinline line(const vec&_A,const vec&_B){A=_A.y-_B.y,B=_B.x-_A.x,C=Cross(_A,_B);}\n\t\tinline vec Vec(){return vec(A,B);}\n\t\tinline friend bool is_on_line(line A,point B){return abs(A.A*B.x+A.B*B.y+A.C)<=eps;}\n\t\tinline friend bool parallel(line A,line B){return abs(Cross(A.Vec(),B.Vec()))<=eps;}\n\t\tinline friend bool perpendicular(line A,line B){return abs(Dot(A.Vec(),B.Vec()))<=eps;}\n\t\tinline friend point intersection(const line A, const line B){return point(A.B*B.C-A.C*B.B,A.C*B.A-A.A*B.C)/(A.A*B.B-A.B*B.A);}\n\t};\n\tstruct segment{\n\t\tld x1,x2,y1,y2;\n\t\tinline point p1(){return vec(x1,y1);}\n\t\tinline point p2(){return vec(x2,y2);}\n\t\tinline segment(){x1=y1=x2=y2=0;}\n\t\tinline segment(const ld&X1,const ld&Y1,const ld&X2,const ld&Y2){x1=X1,y1=Y1,x2=X2,y2=Y2;}\n\t\tinline line Line(){return line(x1,y1,x2,y2);}\n\t\tinline friend bool is_on_segment(segment A,point B){\n\t\t\tif (!is_on_line(A.Line(),B)) return false;\n\t\t\treturn ((A.x1<=B.x&&B.x<=A.x2)||(A.x2<=B.x&&B.x<=A.x1))&&((A.y1<=B.y&&B.y<=A.y2)||(A.y2<=B.y&&B.y<=A.y1));\n\t\t}\n\t\tinline friend bool is_intersected(segment A,segment B){\n\t\t\tvec a=vec(A.x1,A.y1),b=vec(A.x2,A.y2),c=vec(B.x1,B.y1),d=vec(B.x2,B.y2);\n\t\t\treturn ((ccw(a,b,c)*ccw(a,b,d)<=0)&&(ccw(c,d,a)*ccw(c,d,b)<=0));\n\t\t}\n\t\tinline friend ld Distance_SP(segment s,point p){return fabs(Cross(s.p2()-s.p1(),p-s.p1())/len(s.p2()-s.p1()));}\n\t\tinline friend ld distance_SP(segment s,point p){\n\t\t\tpoint p1=s.p1(),p2=s.p2();\n\t\t\tif(Dot(p2-p1,p-p1)<0.0) return len(p-p1);\n\t\t\tif(Dot(p1-p2,p-p2)<0.0) return len(p-p2);\n\t\t\treturn Distance_SP(s,p);\n\t\t}\n\t\tinline friend ld distance_SS(segment s1,segment s2){return min(min(distance_SP(s1,s2.p1()),distance_SP(s1,s2.p2())),min(distance_SP(s2,s1.p1()),distance_SP(s2,s1.p2())));}\n\t};\n}\nusing namespace Computation_Geometry;\nll Q;\nld x1,y1,x2,y2;\nsegment s1,s2;\nsigned main(){\n\tread(Q);while (Q--){\n\t\tx1=read(),y1=read(),x2=read(),y2=read();\n\t\ts1=segment(x1,y1,x2,y2);\n\t\tx1=read(),y1=read(),x2=read(),y2=read();\n\t\ts2=segment(x1,y1,x2,y2);\n\t\tif (!is_intersected(s1,s2)) printf(\"%.10Lf\\n\",distance_SS(s1,s2));\n\t\telse puts(\"0.0000000000\");\n\t}\n\tfclose(stdin);fclose(stdout);return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define eps (1e-10)\nusing namespace std;\nclass Point\n{\n\tpublic:\n\tdouble x,y;\n\tPoint(double _x=0,double _y=0):x(_x),y(_y){}\n\tPoint operator + (Point p){ return Point(x+p.x,y+p.y);}\n\tPoint operator - (Point p){ return Point(x-p.x,y-p.y);}\n\tPoint operator * (double a){return Point(a*x,a*y);}\n\tPoint operator / (double a){return Point(x/a,y/a);}\n\tdouble norm(){return x*x+y*y;}\n\tdouble ABS(){return sqrt(norm());} //俩点间的距离\n};\nstruct Segment\n{\n\tPoint p1,p2;\n\tSegment(){}\n\tSegment(Point _p1,Point _p2):p1(_p1),p2(_p2){}\n};\n\ndouble dot(Point a,Point b)//求内积 就是向量a*b\n{\n\treturn a.x*b.x+a.y*b.y;\n}\n//外积的值为a与b向量构成的平行四边形面积的值\ndouble cross(Point a,Point b)//求外积\n{\n\treturn a.x*b.y-a.y*b.x;\n}\n\n\n//判断是否正交 向量内积：a*b=|a||b|*cos(Y) 当cos为0时正交(90,-90垂直)\n//a*b=a.x*b.x+a.y*b.y;\nbool solve1(Point a,Point b)//是否正交\n{\n\tdouble f=a.x*b.x+a.y*b.y;\n\tif(fabs(f-0.0)<eps) return true;\n\telse return false;\n}\n//判断是否平行  向量外积：|a*b|=|a||b|sin(Y) 当sin为0时平行(180,0平行)\n//|a*b|=|a|*|b|*sin(Y)\nbool solve2(Point a,Point b)//是否平行\n{\n\tdouble f=a.x*b.y-a.y*b.x;\n\tif(fabs(f-0.0)<eps) return true;\n\telse return false;\n}\n\n/*\n求垂足x：对于给定的三点p1,p2,p从点p向通过p1,p2的直线引一条垂线\nbase=p2-p1;\nhypo=p-p1;\n x=s.p1+base*(hypo*base/|base|^2); hypo*base 可以用向量内积求\n*/\nPoint solve3(Segment s,Point p)//求投影点\n{\n\tPoint base=s.p2-s.p1;\n\tdouble r=dot(p-s.p1,base)/base.norm();\n\treturn s.p1+base*r;\n}\n/*\n求投影点x：对于给定的三点p1,p2,p从点p向通过p1,p2的直线为对称轴与点p\n成线对称点为x\n通过求solve3的垂足延长一倍就可以求x\n*/\nPoint solve4(Segment s,Point p)//求映象\n{\n\treturn p+(solve3(s,p)-p)*2.0;\n}\n\n/*\nPoint a=p1-p0;\nPoint b=p2-p0;\n1.外积大小cross(a,b)为正时,可确定b在a的逆时针方向\n\tsin(Y)（Y在0-180）所以是正数\n2. 外积大小cross(a,b)为负时,可确定b在a的顺时针方向\n3.（1,2）不符合 表示p2在直线p0p1上(注意是直线),cos(Y)大于90或小于-90\n\t度时为负，因此a与b的内积dot(a,b)负时，可确定p2位于线段p0p1后方\n\t即p2->p0->p1\n4.不是3时，有俩种p0->p1-p2或者p0->p2->p1如果b的大小大于a的大小，即为\n\tp0->p1->p2;\n5.不符合4，可以确定p2位于线段p0p1上\n*/\nint ccw(Point p0,Point p1,Point p2)//判断三个点相对位置\n{\n\tPoint a=p1-p0;\n\tPoint b=p2-p0;\n\tif(cross(a,b)>eps) return 1;//p0,p1,p2成逆时针方向\n\tif(cross(a,b)<-eps) return -1;//p0,p1,p2成顺时针方向\n\tif(dot(a,b)<-eps) return 2;//p2 p0 p1一次排列在同一直线上\n\tif(a.norm()<b.norm()) return -2;// p0 p1 p2一次排列在同一直线上\n\treturn 0;//p2在线段p0p1上\n\n}\nbool intersect(Point p1,Point p2,Point p3,Point p4)//判断是否相交 通过ccw来判断\n{\n\treturn (ccw(p1,p2,p3)*ccw(p1,p2,p4)<=0&&ccw(p3,p4,p1)*ccw(p3,p4,p2)<=0);\n}\n\n\n\n/*\n点a与点b之间的距离等于向量a-b或b-a的绝对值。\n*/\ndouble getdis(Point a,Point b)//求俩点间的距离\n{\n\treturn (a-b).ABS();\n}\n\n/*\n设直线p1 p2上的向量为a=p2-p1,p与p1构成的向量b=p-p1\n则点p与直线p1p2的距离d就等于a,b构成的平行四边形的高\n用a与b外积的大小(平行四边形的面积)除以a的大小|a|即可求出高d\nd=|a*b|/|a|=|(p2-p1)*(p-p1)|/|p2-p1|;\n*/\n//注意：这里Segmet s是不规范的应该是 Line s 才对\ndouble getdis_Li(Segment s,Point p)//点与直线的距离\n{\n\treturn abs(cross(s.p2-s.p1,p-s.p1)/(s.p2-s.p1).ABS());\n}\n\ndouble getdis_sp(Segment s,Point p)//点与线段的距离\n{\n\tif(dot(s.p2-s.p1,p-s.p1)<0.0) return (p-s.p1).ABS();\n\tif(dot(s.p1-s.p2,p-s.p2)<0.0) return (p-s.p2).ABS();\n\treturn getdis_Li(s,p);\n}\n\ndouble getdis_ss(Segment s1,Segment s2)//线段与线段之间的距离\n{\n\tif(intersect(s1.p1,s1.p2,s2.p1,s2.p2)) return 0.0;\n\treturn min(min(getdis_sp(s1,s2.p1),getdis_sp(s1,s2.p2)),min(getdis_sp(s2,s1.p1),getdis_sp(s2,s1.p2)));\n}\n\n\nint main()\n{\n\tint T;scanf(\"%d\",&T);\n\twhile(T--){\n\t\tdouble x0,y0,x1,y1,x2,y2,x3,y3;\n\t\tscanf(\"%lf %lf %lf %lf %lf %lf %lf %lf\",&x0,&y0,&x1,&y1,&x2,&y2,&x3,&y3);\n\t\tPoint p0(x0,y0),p1(x1,y1),p2(x2,y2),p3(x3,y3);\n\t\tSegment s1(p0,p1),s2(p2,p3);\n\t\tprintf(\"%.10f\\n\",getdis_ss(s1,s2));\n\t}\n\n\treturn 0;\n\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long int ll;\ntypedef pair<int, int> pii;\ntypedef vector<int> vi;\ntypedef vector<pair<int, int> > vii;\n#define rrep(i, m, n) for(int (i)=(m); (i)<(n);  (i)++)\n#define erep(i, m, n) for(int (i)=(m); (i)<=(n); (i)++)\n#define  rep(i, n)    for(int (i)=0; (i)<(n);  (i)++)\n#define rrev(i, m, n) for(int (i)=(n)-1; (i)>=(m); (i)--)\n#define erev(i, m, n) for(int (i)=(n); (i)>=(m); (i)--)\n#define  rev(i, n)    for(int (i)=(n)-1; (i)>=0; (i)--)\n#define vrep(i, c)    for(__typeof((c).begin())i=(c).begin(); i!=(c).end(); i++)\n#define  ALL(v)       (v).begin(), (v).end()\n#define mp            make_pair\n#define pb            push_back\ntemplate<class T, class S> inline bool minup(T& m, S x){ return m>(T)x ? (m=(T)x, true) : false; }\ntemplate<class T, class S> inline bool maxup(T& m, S x){ return m<(T)x ? (m=(T)x, true) : false; }\n\nconst int    INF = 1000000000;\nconst ll     MOD = 1000000007LL;\nconst double EPS = 1E-12;\n\nstruct Point : public complex<double>\n{\npublic:\n  Point() { this->real(0);  this->imag(0); }\n  Point(const double& x, const double& y) { this->real(x);  this->imag(y); }\n  Point(const complex<double> w)  { this->real(w.real());  this->imag(w.imag()); }\n  inline double dot(Point p){ return (conj(*this) * p).real(); }  // ??????\n  inline double det(Point p){ return (conj(*this) * p).imag(); }  // ??????\n};\n\nnamespace std\n{\n  inline bool operator < (const Point& a, const Point& b)\n  {\n    return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n  }\n}\ntypedef vector<Point> Polygon;\ninline Point currPoint(vector<Point> P, int i){ return P[i]; }\ninline Point nextPoint(vector<Point> P, int i){ return P[(i+1)%P.size()]; }\ninline Point diffPoint(vector<Point> P, int i){ return nextPoint(P, i) - currPoint(P, i); }\n\n\nint ccw(Point a, Point b, Point c)\n{\n  b -= a;\n  c -= a;\n  if(b.det(c) > 0.0)    return  1;         // counter clockwise\n  if(b.det(c) < 0.0)    return -1;         // clockwise\n  if(b.dot(c) < 0.0)    return  2;         // c--a--b on line\n  if(norm(b) < norm(c)) return -2;         // a--b--c on line\n  return 0;\n}\n\n\nstruct Line : public vector<Point>\n{\npublic:\n  Line(const Point P, const Point Q){ this->pb(P);  this->pb(Q); }\n};\n\n\ninline Point projectionOfLP(Line L, Point P){return L[0]+(Point(P-L[0])).dot(L[0]-L[1])/norm(L[0]-L[1])*(L[0]-L[1]);}\ninline Point reflectionOfLP(Line L, Point P){return P+2.0*(projectionOfLP(L, P)-P);}\ninline bool intersectionDeterminationOfLL(Line L, Line M){return abs(Point(L[1]-L[0]).det(M[1]-M[0]))>EPS||abs(Point(L[1]-L[0]).det(M[0]-L[0]))<EPS;}\ninline bool intersectionDeterminationOfLS(Line L, Line S){return(Point(L[1]-L[0]).det(S[0]-L[0]))\n*(Point(L[1]-L[0]).det(S[1]-L[0]))<EPS;}\ninline bool intersectionDeterminationOfLP(Line L, Point P){return abs(Point(L[1]-P).det(L[0]-P))<EPS;}\ninline bool intersectionDeterminationOfSS(Line S, Line T){return ccw(S[0],S[1],T[0])*ccw(S[0],S[1],T[1])<=0&&ccw(T[0],T[1],S[0])*ccw(T[0],T[1],S[1])<=0;}\ninline bool intersectionDeterminationOfSP(Line S, Point P){return abs(S[0]-P)+abs(S[1]-P)-abs(S[1]-S[0])<EPS;}\ninline double distanceOfLP(Line L, Point P){return abs(P-projectionOfLP(L,P));}\ninline double distanceOfLL(Line L, Line M){return intersectionDeterminationOfLL(L,M)?0.0:distanceOfLP(L,M[0]);}\ninline double distanceOfLS(Line L, Line S){return intersectionDeterminationOfLS(L,S)?0.0:min(distanceOfLP(L,S[0]),distanceOfLP(L,S[1]));}\ninline double distanceOfSP(Line S, Point P){Point r=projectionOfLP(S,P);return intersectionDeterminationOfSP(S,r)?abs(r-P):min(abs(S[0]-P),abs(S[1]-P));}\ninline double distanceOfSS(Line S, Line T){return intersectionDeterminationOfSS(S,T)?0.0:min(min(distanceOfSP(S,T[0]),distanceOfSP(S,T[1])),min(distanceOfSP(T,S[0]),distanceOfSP(T,S[1])));}\nPoint intersectionOfLL(Line L, Line M){\n  double A = Point(L[1]-L[0]).det(M[1]-M[0]);\n  double B = Point(L[1]-L[0]).det(L[1]-M[0]);\n  if(abs(A)<EPS && abs(B)<EPS) return M[0];\n  if(abs(A)<EPS) assert(false);\n  return M[0] + B / A * (M[1] - M[0]);\n}\n\ndouble x[2], y[2];\nint q;\nint main()\n{\n  cin >> q;\n  while(q--){\n    cin >> x[0] >> y[0] >> x[1] >> y[1];  Line L = Line(Point(x[0], y[0]), Point(x[1], y[1]));\n    cin >> x[0] >> y[0] >> x[1] >> y[1];  Line M = Line(Point(x[0], y[0]), Point(x[1], y[1]));\n    printf(\"%.15f\\n\", distanceOfSS(L, M));\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "\n#include <bits/stdc++.h>\n#define REP(i,n) for (int i = 0; i <(n); ++i)\n#define REP2(i,x,n) for (int i = x; i <(n); ++i)\n#define ALL(v) v.begin(), v.end()\n#define RALL(v) v.rbegin(), v.rend()\nusing namespace std;\nusing ll = long long;\nusing P = pair<int,int>;\nstatic const double PI = acos(-1);\nstatic const int INF = 1e9+7;\n\n/*\n\n計算幾何学　ライブラリ\n\n*/\n\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\n\nstruct Point{\n  double x,y;\n  Point(){}\n  Point(double x,double y) :x(x),y(y){}\n  Point operator + (Point p) {return Point(x+p.x,y+p.y);}\n  Point operator - (Point p) {return Point(x-p.x,y-p.y);}\n  Point operator * (double k) {return Point(x*k,y*k);}\n  Point operator / (double k) {return Point(x/k,y/k);}\n  double norm(){return x*x+y*y;}\n  double abs(){return sqrt(norm());}\n\n  bool operator < (const Point &p) const{\n    return x!=p.x ? x < p.x : y < p.y;\n  }\n\n  bool operator == (const Point &p) const{\n    return fabs(x-p.x) < EPS && fabs(y-p.y) < EPS;\n  }\n};\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\nstruct Segment{\n  Point p1,p2;\n  Segment(){}\n  Segment(Point p1, Point p2):p1(p1),p2(p2){}\n};\n\ntypedef Segment Line;\n\nstruct Circle{\n  Point c;\n  double r;\n  Circle(Point c,double r):c(c),r(r){}\n};\n\ndouble norm(Vector a){\n  return a.x*a.x+a.y*a.y;\n}\ndouble abs(Vector a){\n  return sqrt(norm(a));\n}\ndouble dot(Vector a,Vector b){\n  return a.x*b.x+a.y*b.y;\n}\ndouble cross(Vector a,Vector b){\n  return a.x*b.y-a.y*b.x;\n}\n\nbool isOrthogonal(Vector a,Vector b){\n  return equals(dot(a,b),0.0);\n}\n\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n  return isOrthogonal(a1-a2,b1-b2);\n}\n\nbool isOrthogonal(Segment s1,Segment s2){\n  return equals(dot(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n\nbool isParallel(Vector a,Vector b){\n  return equals(cross(a,b),0.0);\n}\n\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n  return isParallel(a1-a2,b1-b2);\n}\n\nbool isParallel(Segment s1,Segment s2){\n  return equals(cross(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n\nPoint project(Segment s,Point p){\n  Vector base=s.p2-s.p1;\n  double r=dot(p-s.p1,base)/norm(base);\n  return s.p1+base*r;\n}\n\nPoint reflect(Segment s,Point p){\n  return p+(project(s,p)-p)*2.0;\n}\n\nint ccw(Point p0,Point p1,Point p2){\n  Vector a = p1-p0;\n  Vector b = p2-p0;\n  if(cross(a,b) > EPS) return COUNTER_CLOCKWISE;\n  if(cross(a,b) < -EPS) return CLOCKWISE;\n  if(dot(a,b) < -EPS) return ONLINE_BACK;\n  if(a.norm()<b.norm()) return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\n\nbool intersect(Point p1,Point p2,Point p3,Point p4){\n  return (ccw(p1,p2,p3)*ccw(p1,p2,p4) <= 0 &&\n\t  ccw(p3,p4,p1)*ccw(p3,p4,p2) <= 0 );\n}\n\nbool intersect(Segment s1,Segment s2){\n  return intersect(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n\ndouble getDistanceLP(Line l,Point p){\n  return abs(cross(l.p2-l.p1,p-l.p1)/abs(l.p2-l.p1));\n}\n\ndouble getDistanceSP(Segment s,Point p){\n  if(dot(s.p2-s.p1,p-s.p1) < 0.0 ) return abs(p-s.p1);\n  if(dot(s.p1-s.p2,p-s.p2) < 0.0 ) return abs(p-s.p2);\n  return getDistanceLP(s,p);\n}\n\ndouble getDistance(Segment s1,Segment s2){\n  if(intersect(s1,s2)) return 0.0;\n  return min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),\n\t     min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n}\n\nPoint getCrossPoint(Segment s1,Segment s2){\n  Vector base=s2.p2-s2.p1;\n  double d1=abs(cross(base,s1.p1-s2.p1));\n  double d2=abs(cross(base,s1.p2-s2.p1));\n  double t=d1/(d1+d2);\n  return s1.p1+(s1.p2-s1.p1)*t;\n}\n\n\npair<Point,Point> getCrossPoints(Circle c,Line l){\n  Vector pr=project(l,c.c);\n  Vector e=(l.p2-l.p1)/abs(l.p2-l.p1);\n  double base=sqrt(c.r*c.r-norm(pr-c.c));\n  return make_pair(pr+e*base,pr-e*base);\n}\n\n\ndouble arg(Vector p){\n  return atan2(p.y,p.x);\n}\n\nVector polar(double a,double r){\n  return Point(cos(r)*a,sin(r)*a);\n}\n\npair<Point,Point> getCrossPoints(Circle c1,Circle c2){\n  double d=abs(c1.c-c2.c);\n  double a=acos((c1.r*c1.r+d*d-c2.r*c2.r)/(2*c1.r*d));\n  double t=arg(c2.c-c1.c);\n  return make_pair(c1.c+polar(c1.r,t+a),c1.c+polar(c1.r,t-a));\n}\n\nint contains(Polygon g,Point p){\n  int n=g.size();\n  bool x=false;\n  for(int i=0;i<n;i++){\n    Point a=g[i]-p,b=g[(i+1)%n]-p;\n    if(fabs(cross(a,b)) < EPS && dot(a,b) < EPS) return 1;\n    if(a.y>b.y) swap(a,b);\n    if(a.y < EPS && EPS < b.y && cross(a,b) > EPS ) x = !x;\n  }\n  return (x?2:0);\n}\n\nPolygon andrewScan(Polygon s){\n  Polygon u,l;\n  if(s.size()<3) return s;\n  sort(s.begin(),s.end());\n  u.push_back(s[0]);\n  u.push_back(s[1]);\n  l.push_back(s[s.size()-1]);\n  l.push_back(s[s.size()-2]);\n  for(int i=2;i<s.size();i++){\n    for(int n=u.size();n>=2&&ccw(u[n-2],u[n-1],s[i]) != CLOCKWISE;n--){\n      u.pop_back();\n    }\n    u.push_back(s[i]);\n  }\n  for(int i=s.size()-3;i>=0;i--){\n    for(int n=l.size();n>=2&&ccw(l[n-2],l[n-1],s[i]) != CLOCKWISE;n--){\n      l.pop_back();\n    }\n    l.push_back(s[i]);\n  }\n  reverse(l.begin(),l.end());\n  for(int i=u.size()-2;i>=1;i--) l.push_back(u[i]);\n  return l;\n}\n\n\n\nint main(){\n  int q;\n  cin >> q;\n\n\n\n  REP(i,q){\n    double x0, y0, x1, y1, x2, y2, x3, y3;\n    cin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n    Point px0 = Point(x0, y0);\n    Point px1 = Point(x1, y1);\n    Point px2 = Point(x2, y2);\n    Point px3 = Point(x3, y3);\n\n    Segment s1 = Segment(px0,px1);\n    Segment s2 = Segment(px2,px3);\n\n    double ans = getDistance(s1, s2);\n    cout << fixed << setprecision(15) <<  ans << endl;\n  }\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> Point;\ntypedef pair<Point, Point> Line;\nconst double EPS = 1e-10;\n\n// 内積 |a||b|cosθ\ndouble dot(Point a, Point b){\n\t// return a.real() * b.real() + a.imag() * b.imag();\n\treturn (conj(a) * b).real();\n}\n// 外積、符号付面積の２倍　|a||b|sinθ\ndouble cross(Point a, Point b){\n\t// return a.real() * b.imag() - a.imag() * b.real();\n\treturn (conj(a) * b).imag();\n}\n// 点の位置関係　2点a,bから見た点cの位置関係\nint ccw(Point a, Point b, Point c){\n    // COUNTER_CLOCKWISE\n    if(cross(b - a, c - a) > EPS) return 1;\n    // CLOCKWISE\n    if(cross(b - a, c - a) < -EPS) return -1;\n    // ONLINE_BACK\n    if(dot(b - a, c - a) < -EPS) return 2;\n    // ONLINE_FRONT\n    if(abs(b - a) + EPS < abs(c - a)) return -2;\n    // ON_SEGMENT\n    return 0;\n}\n// 点と直線の距離\ndouble line_to_point_dis(Line l, Point p){\n    Point a = l.first, b = l.second, c = p;\n    return fabs(cross(c - a, b - a)) / fabs(abs(b - a));\n}\n// 点と線分の距離\ndouble seg_to_point_dis(Line l, Point p){\n    Point a = l.first, b = l.second, c = p;\n    if(dot(b - a, c - a) < EPS) return abs(c - a);\n    if(dot(a - b, c - b) < EPS) return abs(c - b);\n    return line_to_point_dis(l, p);\n}\n// 線分と線分の距離\ndouble seg_to_seg_dis(Line a, Line b){\n    double res = seg_to_point_dis(a, b.first);\n    res = min(res, seg_to_point_dis(a, b.second));\n    res = min(res, seg_to_point_dis(b, a.first));\n    res = min(res, seg_to_point_dis(b, a.second));\n    return res;\n}\n// 線分の交差判定\nbool is_cross(Line a, Line b){\n    if(ccw(a.first, a.second, b.first) * ccw(a.first, a.second, b.second) <= 0 && ccw(b.first, b.second, a.first) * ccw(b.first, b.second, a.second) <= 0){\n        return true;\n    }\n    return false;\n}\n\nint main(){\n    int q;\n    cin >> q;\n    for(int i = 0; i < q; i++){\n        double x, y;\n        Point p[4];\n        for(int j = 0; j < 4; j++){\n            cin >> x >> y;\n            p[j] = {x, y};\n        }\n        Line s1 = {p[0], p[1]};\n        Line s2 = {p[2], p[3]};\n        double len = seg_to_seg_dis(s1, s2);\n        if(is_cross(s1, s2)) len = 0.0;\n        printf(\"%.10f\\n\", len);\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "//include\n//------------------------------------------\n#include <vector>\n#include <list>\n#include <map>\n#include <climits>\n#include <set>\n#include <deque>\n#include <stack>\n#include <bitset>\n#include <algorithm>\n#include <functional>\n#include <numeric>\n#include <utility>\n#include <sstream>\n#include <iostream>\n#include <iomanip>\n#include <cstdio>\n#include <cmath>\n#include <cstdlib>\n#include <cctype>\n#include <string>\n#include <cstring>\n#include <ctime>\n#include <queue>\n#include <random>\n#include <cctype>\n#include <complex>\n#include <regex>\n\nusing namespace std;\n\n#define C_MAX(a, b) ((a)>(b)?(a):(b))\n#define SHOW_VECTOR(v) {std::cerr << #v << \"\\t:\";for(const auto& xxx : v){std::cerr << xxx << \" \";}std::cerr << \"\\n\";}\n#define SHOW_MAP(v) {std::cerr << #v << endl; for(const auto& xxx: v){std::cerr << xxx.first << \" \" << xxx.second << \"\\n\";}}\n\n#define EPS 1e-8\n#define EQ(a, b) (abs((a)-(b)) < EPS)\n\ninline int signum(double x) { return (abs(x) < EPS) ? 0 : (x > 0) ? 1 : -1; }\n\ntypedef complex<double> P;\n\ndouble dot(P a, P b) {\n    return a.real() * b.real() + a.imag() * b.imag();\n}\n\ndouble cross(P a, P b) {\n    return a.real() * b.imag() - a.imag() * b.real();\n}\n\nint ccw(P a, P b, P c) {\n    b -= a;\n    c -= a;\n    int sign = signum(cross(b, c));\n    if (sign != 0) return sign;\n    if (signum(dot(b, c)) == -1) return 2;\n    if (abs(b) < abs(c)) return -2;\n    return 0;\n}\n\ndouble dis_p_li(P a, P b, P c) {\n    b -= a;\n    c -= a;\n    return abs(cross(b, c)) / abs(b);\n}\n\ndouble dis_p_li_ss(P a, P b, P c) {\n    P x1 = b - a;\n    P y1 = c - a;\n    P x2 = a - b;\n    P y2 = c - b;\n    if (signum(dot(x1, y1)) < 0) return abs(y1);\n    if (signum(dot(x2, y2)) < 0) return abs(y2);\n    return dis_p_li(a, b, c);\n}\n\nbool is_intersected_li_ss(P a1, P a2, P b1, P b2) {\n    return (ccw(a1, a2, b1) * ccw(a1, a2, b2) <= 0) &&\n           (ccw(b1, b2, a1) * ccw(b1, b2, a2) <= 0);\n}\n\ndouble dis_li_s_li_s(P a1, P a2, P b1, P b2) {\n    if (is_intersected_li_ss(a1, a2, b1, b2)) return 0.0;\n    return min({\n                       dis_p_li_ss(a1, a2, b1),\n                       dis_p_li_ss(a1, a2, b2),\n                       dis_p_li_ss(b1, b2, a1),\n                       dis_p_li_ss(b1, b2, a2)\n               });\n}\n\nint main() {\n\n    int Q;\n    cin >> Q;\n\n    while (Q--) {\n\n        vector<P> p(4);\n        for (int i = 0; i < 4; i++) {\n            double x, y;\n            cin >> x >> y;\n            p[i] = P(x, y);\n        }\n        double ans = dis_li_s_li_s(p[0], p[1], p[2], p[3]);\n        cout << fixed << setprecision(10) << ans << endl;\n    }\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<complex>\n#include<utility>\n#include<vector>\n#include<cmath>\n#include<cassert>\n\nusing namespace std;\n\ndouble eps=1e-9;\n\ntypedef complex<double> Point;\ntypedef complex<double> Vector;\n\ntemplate<class T> bool eq(T a,T b){\n\treturn abs(a-b)<eps;\n}\n\ntemplate<class T> int sgn(T r){\n\treturn eq(r,0.0)?0:(r>0?1:-1);\n}\n\nstruct Circle{\n\tPoint center;\n\tdouble r;\n\tCircle(Point c,double r):center(c),r(r){}\n\tCircle(){}\n};\n\nstruct Line{\n\tdouble a,b,c;//ax+by=c\n\tLine(){}\n\tLine(double a,double b,double c):a(a),b(b),c(c){}\n\tLine(Point p1,Point p2){//not verified\n\t\tif(eq(abs(p1-p2),0.0)){\n\t\t\tfprintf(stderr,\"called Line for same points\\n\");\n\t\t\tassert(0);\n\t\t}\n\t\tdouble x1=p1.real(),y1=p1.imag();\n\t\tdouble x2=p2.real(),y2=p2.imag();\n\t\ta=y2-y1;\n\t\tb=-(x2-x1);\n\t\tc=x1*y2-x2*y1;\n\t}\n};\n\nvoid print(Point p){\n\tif(isnan(p.real())||isnan(p.imag())){\n\t\tprintf(\"NaN Point\\n\");\n\t\treturn;\n\t}\n\tprintf(\"(%f,%f)\\n\",p.real(),p.imag());\n}\n\ndouble pointsDistance(Point p1,Point p2){/*abs(p1-p2)と書いてよい*/\n\tdouble dx=p1.real()-p2.real();\n\tdouble dy=p1.imag()-p2.imag();\n\treturn sqrt(dx*dx+dy*dy);\n}\n\ndouble linePointDistance(Line l,Point p){\n\tdouble a=l.a,b=l.b,c=l.c;\n\tdouble x=p.real(),y=p.imag();\n\tdouble num=abs(a*x+b*y-c);\n\tdouble den=sqrt(a*a+b*b);\n\treturn num/den;\n}\n\nVector basisVector(Vector v){\n\tif(eq(v.real(),0.0)&&eq(v.imag(),0.0)) return v;\n\treturn v/sqrt(norm(v));\n}\n\nPoint linePointProjection(Line l,Point p){\n\tdouble dx=l.a,dy=l.b;\n\tdouble a=l.a,b=l.b,c=l.c;\n\tdouble x=p.real(),y=p.imag();\n\tVector ba=basisVector(Vector(dx,dy));\n\tdouble num=a*x+b*y-c;\n\tdouble den=sqrt(a*a+b*b);\n\tVector v=ba*(-num/den);\n\treturn p+v;\n}\n\nvector<Point> circleLineIntersection(Circle c,Line l){\n\tvector<Point> res;\n\tPoint p=linePointProjection(l,c.center);\n\tdouble d=linePointDistance(l,c.center);\n\tint s=sgn(d-c.r);\n\tif(s==1){\n\t\treturn res;//empty\n\t}else if(s==0){\n\t\tres.push_back(p);\n\t\treturn res;\n\t}else{\n\t\tdouble r=c.r;\n\t\tdouble t=sqrt(r*r-d*d);\n\t\tVector e=basisVector(Vector(l.b,-l.a));\n\t\tres.push_back(p+t*e);\n\t\tres.push_back(p-t*e);\n\t\treturn res;\n\t}\n}\n\nvector<Point> circlesIntersection(Circle c1,Circle c2){/*一致するとき処理できない*/\n\tif(eq(c1.center.real(),c2.center.real())&&eq(c1.center.imag(),c2.center.imag())&&\n\t\teq(c1.r,c2.r)){\n\t\t\t\tPoint p=Point(NAN,NAN);\n\t\t\t\tvector<Point> v;\n\t\t\t\tv.push_back(p);\n\t\t\t\treturn v;\n\t}\n\tdouble d=pointsDistance(c1.center,c2.center);\n\tdouble r1=c1.r,r2=c2.r;\n\tdouble dif=max(r1,r2)-min(r1,r2);\n\tdouble sum=r1+r2;\n\tif(sgn(d-sum)==1||sgn(dif-d)==1){//d>sum||dif>d\n\t\tvector<Point> v;\n\t\treturn v;\n\t}\n\tdouble x1=c1.center.real(),y1=c1.center.imag();\n\tdouble x2=c2.center.real(),y2=c2.center.imag();\n\tLine l=Line(-x1*2+x2*2,-y1*2+y2*2,r1*r1-r2*r2-(x1*x1-x2*x2)-(y1*y1-y2*y2));\n\treturn circleLineIntersection(c1,l);\n}\n\ndouble det(double a,double b,double c,double d){\n\treturn a*d-b*c;\n}\n\nPoint linesIntersection(Line l1,Line l2){/*平行の時は常にNAN*/\n\tdouble a=l1.a,b=l1.b,c=l1.c;\n\tdouble d=l2.a,e=l2.b,f=l2.c;\n\tdouble den=det(a,b,d,e);\n\tdouble numx=det(c,b,f,e);\n\tdouble numy=det(a,c,d,f);\n\tif(eq(den,0.0)){\n\t\treturn Point(NAN,NAN);\n\t}\n\treturn Point(numx/den,numy/den);\n}\n\n//circlesIntersection verify AOJ1190 ICPC Domestic 2013 Balloon\n\ndouble crossProduct(Vector a,Vector b){\n\treturn (conj(a)*b).imag();\n}\n\ndouble dotProduct(Vector a,Vector b){\n\treturn (conj(a)*b).real();\n}\n\nint ccw(Point p1,Point p2,Point p3){\n\t/*p1,p2,p3はすべて異なると仮定\n\tそうでない場合の戻り値は不定\n\tではなく\n\tp1!=p2と仮定*/\n\tVector b=p2-p1;\n\tVector c=p3-p1;\n\tint s=sgn(crossProduct(b,c));\n\tif(s==1) return 1;//counterclockwise\n\tif(s==-1) return -1;//clockwise\n\tint t=sgn(dotProduct(b,c));\n\tif(t==-1) return 2;//3--1--2\n\tint u=sgn(norm(b)-norm(c));\n\tif(eq(norm(c),0.0)) return 0;//1==3\n\tif(u==-1) return -2;//1--2--3\n\treturn 0;//1--3--2 or 2==3\n}\n\nstruct Segment{\n\tPoint p1,p2;\n\tLine l;\n\tSegment(){}\n\tSegment(Point p1,Point p2):p1(p1),p2(p2){\n\t\tl=Line(p1,p2);\n\t}\n};\n\nint oneLineCCW(Point p1,Point p2,Point p3){\n\t/*p1!=p2かつp1,p2,p3は一直線上と仮定*/\n\t/*それ以外の時の戻り値は不定*/\n\tVector b=p2-p1,c=p3-p1;\n\tif(!eq(crossProduct(b,c),0.0)) for(;;);\n\tif(sgn(dotProduct(b,c))==-1) return 2;//p3--p1--p2\n\tif(eq(abs(p1-p3),0.0)) return 1;//p1==p3--p2\n\tint s=sgn(norm(b)-norm(c));\n\tif(s==1) return 0;//p1--p3--p2\n\tif(s==0) return -1;//p1--p3==p2\n\telse return -2;//p1--p2--p3\n}\n\ndouble pointSegmentDistance(Point p,Segment s){\n\tLine l=s.l;\n\tdouble d=linePointDistance(l,p);\n\tPoint pr=linePointProjection(l,p);\n//\tint x=oneLineCCW(s.p1,s.p2,pr);\n\tint x=ccw(s.p1,s.p2,pr);\n//\tif(x>=-1&&x<=1) return d;\n\tif(x==0) return d;\n\tdouble a=abs(s.p1-p);\n\tdouble b=abs(s.p2-p);\n\treturn min(a,b);\n}\n\nbool segmentsIntersect(Segment s1,Segment s2){\n\tPoint p[2],q[2];\n\tp[0]=s1.p1,p[1]=s1.p2;\n\tq[0]=s2.p1,q[1]=s2.p2;\n\treturn ccw(p[0],p[1],q[0])*ccw(p[0],p[1],q[1])<=0&&\n\t\tccw(q[0],q[1],p[0])*ccw(q[0],q[1],p[1])<=0;\n}\n\ndouble segmentsDistance(Segment s1,Segment s2){\n\tbool flg=segmentsIntersect(s1,s2);\n\tif(flg) return 0;\n\tPoint p[2],q[2];\n\tp[0]=s1.p1,p[1]=s1.p2;\n\tq[0]=s2.p1,q[1]=s2.p2;\n\tdouble res=-1;\n\tfor(int k=0;k<2;k++){\n\t\tPoint r=linePointProjection(s2.l,p[k]);\n\t\tbool flg1=(abs(oneLineCCW(q[0],q[1],r))<=1);\n\t\tbool flg2=ccw(q[0],q[1],r)==0;\n\t\tif(flg1!=flg2) assert(0);\n\t//\tif(abs(oneLineCCW(q[0],q[1],r))<=1){\n\t\tif(ccw(q[0],q[1],r)==0){\n\t\t\tdouble tmp=abs(r-p[k]);\n\t\t\tif(res<0||tmp<res) res=tmp;\n\t\t}\n\t\tr=linePointProjection(s1.l,q[k]);\n\t\tflg1=abs(oneLineCCW(p[0],p[1],r)<=1);\n\t\tflg2=ccw(p[0],p[1],r);\n\t\tif(flg1!=flg2) assert(0);\n\t//\tif(abs(oneLineCCW(p[0],p[1],r))<=1){\n\t\tif(ccw(p[0],p[1],r)==0){\n\t\t\tdouble tmp=abs(r-q[k]);\n\t\t\tif(res<0||tmp<res) res=tmp;\n\t\t}\n\t}\n\tfor(int i=0;i<2;i++) for(int j=0;j<2;j++){\n\t\tdouble tmp=abs(p[i]-q[j]);\n\t\tif(res<0||tmp<res) res=tmp;\n\t}\n\treturn res;\n}\n\n\n//segmentsDistance verified aoj cgl_2 d Distance\nPoint inputPoint(){\n\tdouble x,y;\n\tscanf(\"%lf%lf\",&x,&y);\n\treturn Point(x,y);\n}\n\nint main(){\n\tint Q;\n\tscanf(\"%d\",&Q);\n\tfor(int datano=0;datano<Q;datano++){\n\t\tPoint p1,p2;\n\t\tPoint q1,q2;\n\t\tp1=inputPoint();\n\t\tp2=inputPoint();\n\t\tq1=inputPoint();\n\t\tq2=inputPoint();\n\t\tif(abs(p1-p2)<eps) break;\n\t\tSegment s1=Segment(p1,p2);\n\t\tSegment s2=Segment(q1,q2);\n\t\tdouble ans=segmentsDistance(s1,s2);\n\t\tprintf(\"%.9f\\n\",ans);\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std ;\n\n#define pb(n) push_back(n)\n#define fi first\n#define se second\n#define all(r) begin(r),end(r)\n#define vmax(ary) *max_element(all(ary))\n#define vmin(ary) *min_element(all(ary))\n#define debug(x) cout<<#x<<\": \"<<x<<endl\n#define fcout(n) cout<<fixed<<setprecision((n))\n#define scout(n) cout<<setw(n)\n#define vary(type,name,size,init) vector< type> name(size,init)\n#define vvl(v,w,h,init) vector<vector<ll>> v(w,vector<ll>(h,init))\n#define mp(a,b) make_pair(a,b)\n\n#define rep(i,n) for(int i = 0; i < (int)(n);++i)\n#define REP(i,a,b) for(int i = (a);i < (int)(b);++i)\n#define repi(it,array) for(auto it = array.begin(),end = array.end(); it != end;++it)\n#define repa(n,array) for(auto &n :(array))\n\nusing ll = long long;\nusing pii = pair<int,int> ;\nusing pll = pair<ll,ll> ;\n\ntemplate<typename T>\nvoid O(T t){\n  cout << t << endl;\n}\n\n  const double EPS = 1e-8;\n  const double INF = 1e12;\n  typedef complex<double> P;//????´???°????????¢?????????????????¨?§£???\n  namespace std {\n    bool operator < (const P& a, const P& b) {//x????????????\n      return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n    }\n    bool sorty(const P& a, const P& b) {//y????????????\n      return imag(a) != imag(b) ? imag(a) < imag(b) : real(a) < real(b);\n    }\n  }\n  double cross(const P& a, const P& b) {//??????\n    return imag(conj(a)*b);\n  }\n  double dot(const P& a, const P& b) {//??????\n    return real(conj(a)*b);\n  }\n\n  struct L : public vector<P> {//??´???\n    L(){};\n    L(const P &a, const P &b) {\n      push_back(a); push_back(b);\n    }\n  };\n\n  typedef vector<P> G;\n\n  struct C {//???\n    P p; double r;\n    C(){};\n    C(const P &p, double r) : p(p), r(r) { }\n  };\n  int ccw(P a, P b, P c) {//3????????????????????§????????§??????????????????\n    b -= a; c -= a;\n    if (cross(b, c) > 0)   return +1;       // counter clockwise\n    if (cross(b, c) < 0)   return -1;       // clockwise\n    if (dot(b, c) < 0)     return +2;       // c--a--b on line\n    if (norm(b) < norm(c)) return -2;       // a--b--c on line\n    return 0;\n  }\n  int linejudge(const L &ab,const L &cd){ //2??´???????????¢???\n    P a = ab[1] - ab[0],b = cd[1] - cd[0];\n    if(abs(cross(a,b)) < EPS){ // Parallel\n      return 2;\n    }\n    else if(abs(dot(a,b)) < EPS){ //Orthogonal\n      return 1;\n    }\n    return 0;\n  }\n  // L:line,S:segment,P:point\n  bool intersectLL(const L &l, const L &m) {\n    return abs(cross(l[1]-l[0], m[1]-m[0])) > EPS || // non-parallel\n      abs(cross(l[1]-l[0], m[0]-l[0])) < EPS;   // same line\n  }\n  bool intersectLS(const L &l, const L &s) {\n    return cross(l[1]-l[0], s[0]-l[0])*       // s[0] is left of l\n      cross(l[1]-l[0], s[1]-l[0]) < EPS; // s[1] is right of l\n  }\n  bool intersectLP(const L &l, const P &p) {\n    return abs(cross(l[1]-p, l[0]-p)) < EPS;\n  }\n  bool intersectSS(const L &s, const L &t) {\n    return ccw(s[0],s[1],t[0])*ccw(s[0],s[1],t[1]) <= 0 &&\n      ccw(t[0],t[1],s[0])*ccw(t[0],t[1],s[1]) <= 0;\n  }\n  bool intersectSP(const L &s, const P &p) {\n    return abs(s[0]-p)+abs(s[1]-p)-abs(s[1]-s[0]) < EPS; // triangle inequality\n  }\n  // L & P intersection\n  P projection(const L &l, const P &p) {\n    double t = dot(p-l[0], l[0]-l[1]) / norm(l[0]-l[1]);\n    return l[0] + t*(l[0]-l[1]);\n  }\n  // L????????????P???????°????\n  P reflection(const L &l, const P &p) {\n    return p + 2.0 * (projection(l, p) - p);\n  }\n  double distanceLP(const L &l, const P &p) {\n    return abs(p - projection(l, p));\n  }\n  double distanceLL(const L &l, const L &m) {\n    return intersectLL(l, m) ? 0 : distanceLP(l, m[0]);\n  }\n  double distanceLS(const L &l, const L &s) {\n    if (intersectLS(l, s)) return 0;\n    return min(distanceLP(l, s[0]), distanceLP(l, s[1]));\n  }\n  double distanceSP(const L &s, const P &p) {\n    const P r = projection(s, p);\n    if (intersectSP(s, r)) return abs(r - p);\n    return min(abs(s[0] - p), abs(s[1] - p));\n  }\n  double distanceSS(const L &s, const L &t) {\n    if (intersectSS(s, t)) return 0;\n    return min(min(distanceSP(s, t[0]), distanceSP(s, t[1])), min(distanceSP(t, s[0]), distanceSP(t, s[1])));\n  }\n  double distancePP(const P &p,const P &q){\n    return abs(p - q) ;\n  }\n  P crosspoint(const L &l, const L &m) {\n    double A = cross(l[1] - l[0], m[1] - m[0]);\n    double B = cross(l[1] - l[0], l[1] - m[0]);\n    if (abs(A) < EPS && abs(B) < EPS) return m[0]; // same line\n    if (abs(A) < EPS) assert(false); // !!!PRECONDITION NOT SATISFIED!!!\n    return m[0] + B / A * (m[1] - m[0]);\n  }\n  P verticalvector(const P &a,const P &b){//2???????????????????????????????????????\n    if(a.real() == b.real()){\n      return {1.0,0};\n    }\n    if(a.imag() == b.imag()){\n      return {0,1.0};\n    }\n    P p = a - b;\n    P res = {-p.imag(),p.real()};\n    return res / abs(p);\n  }\n  pair<P,P> crosspointCircle(const C &a,const C &b){\n    P m = (a.p+b.p)/2.0;\n    P vv = verticalvector(a.p,b.p);\n    double u = sqrt( a.r * a.r - norm(a.p - b.p) / 4.0);\n    P A = m + u * vv,B = m - u * vv;\n    return mp(A,B);\n  }\n\nint main(){\n  cin.tie(0);\n  ios::sync_with_stdio(false);\n  ll q;\n  cin >> q;\n  double x,y;\n  rep(i,q){\n    cin >> x >> y;\n    P a(x,y);\n    cin >> x >> y;\n    P b(x,y);\n    cin >> x >> y;\n    P c(x,y);\n    cin >> x >> y;\n    P d(x,y);\n    L ab(a,b),cd(c,d);\n    std::fcout(10) << distanceSS(ab,cd) << std::endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define SIZE 300005\n#define MOD 1000000007LL\n#define INF 1 << 29\n#define LLINF 1LL << 60\n#define REP(i,n) for(int i=0;i<n;i++)\n#define FOR(i,a,b) for(int i=a;i<=b;i++)\n#define DOWN(i,b,a) for(int i=b;i>=a;i--)\n#define SET(a,c) memset(a,c,sizeof a)\n#define BIT(i,j) ((i)>>(j))&1\n#define ALL(o) (o).begin(), (o).end()\n#define ERASE(o) (o).erase(unique((o).begin(),(o).end()), (o).end())\n#define SQ(x) ((x)*(x))\nusing namespace std;\ntypedef long long ll;\ntypedef pair<ll,ll> Pll;\ntypedef pair<int, int> Pii;\ntypedef pair<double, double> Pdd;\ntypedef complex<double> dcomplex;\ntemplate<typename T> inline void priv(vector<T>a){REP(i,a.size()){cerr<<a[i]<<((i==a.size()-1)?\"\\n\":\" \");}}\nll gcd(ll a,ll b){int c=max(a,b);int d=min(a,b);return c==0||d==0?c:gcd(c%d,d);}\nll lcm(ll a,ll b){return a==0||b==0?0:a*b/gcd(a,b);}\nll fact(ll a){ll b=1;FOR(i,1,a)b*=i;return b;}\n\nclass P\n{\npublic:\n  double x,y;\n  P(){};P(double x,double y):x(x),y(y){};\n  P operator+(const P&q){P t;t.x=x+q.x;t.y=y+q.y;return t;}\n  P operator+=(const P&q){x+=q.x;y+=q.y;return *this;}\n  P operator-(const P&q){P t;t.x=x-q.x;t.y=y-q.y;return t;}\n  P operator-=(const P&q){x-=q.x;y-=q.y;return *this;}\n  template<typename T> P operator*(T d){return P(x*d,y*d);}\n  template<typename T> P operator*=(T d){x*=d;y*=d;return *this;}\n  template<typename T> P operator/(T d){return P(x/d,y/d);}\n  template<typename T> P operator/=(T d){x/=d;y/=d;return *this;}\n  bool operator<(const P&q){return (x!=q.x)?(x<q.x):(y<q.y);}\n  bool operator>(const P&q){return (x!=q.x)?(x>q.x):(y>q.y);}\n  double norm(void){return sqrt(x*x+y*y);}\n  double arg(void){return acos(x/this->norm())*P(1,0).sign(*this);}\n  P rotate(double t){double c=cos(t),s=sin(t);return P(c*x-s*y,s*x+c*y);}\n  P nvec(void){return P(y,-x);}\n  P reverseX(void){return P(-x,y);}\n  P reverseY(void){return P(x,-y);}\n  P unit(void){return (*this).norm()==0?P(0,0):(*this)/(*this).norm();}\n  P floor(void){return P((int)x,(int)y);}\n  double dot(const P&q){return x*q.x+y*q.y;}\n  double det(const P&q){return x*q.y-y*q.x;}\n  int sign(const P&q){double d = (*this).det(q); return (d>0)-(d<0);}\n  static bool on_seg(P p1,P p2,P q){return (p1-q).det(p2-q)==0&&(p1-q).dot(p2-q)<=0;}\n  static P intersection(P p1,P p2,P q1,P q2){return p1+(p2-p1)*((q2-q1).det(q1-p1)/(q2-q1).det(p2-p1));}\n  static bool crossing(P p1,P p2,P q1,P q2)\n  {\n    if((p2-p1).sign(q2-q1)==0) return on_seg(p1,p2,q1)||on_seg(p1,p2,q2)||on_seg(q1,q2,p1)||on_seg(q1,q2,p2);\n    double x=(q2-q1).det(q1-p1)/(q2-q1).det(p2-p1);\n    double y=(p2-p1).det(p1-q1)/(p2-p1).det(q2-q1);\n    return x<=1 && x>=0 && y<=1 && y>=0;\n  }\n};\n\nint main()\n{\n  int q; cin >> q;\n  REP(i,q)\n  {\n    double ans,x0,y0,x1,y1,x2,y2,x3,y3;\n    cin>>x0>>y0>>x1>>y1>>x2>>y2>>x3>>y3;\n    P p0 = P(x0,y0);\n    P p1 = P(x1,y1);\n    P p2 = P(x2,y2);\n    P p3 = P(x3,y3);\n    if(P::crossing(p0,p1,p2,p3)) ans = 0.0;\n    else\n    {\n      double d0,d1,d2,d3;\n      d0 = (p2-p0).norm();\n      d1 = (p2-p1).norm();\n      d2 = (p3-p0).norm();\n      d3 = (p3-p1).norm();\n      ans = min({d0,d1,d2,d3});\n    }\n    printf(\"%.10lf\\n\",ans);\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "// 平面幾何\n\n// int -> double -> Pointの暗黙の型変換を許した\n// メンバ変数をprivateにした\n// 代入演算子の戻り値とかにconstいっぱい付けた\n\n//   Segment::intersect(const Segment&)\n//   Circle::crosspoint(const Circle&)\n// のどっちかがバグってそう？ (AOJ1183)\n// crosspointは大丈夫？ (AOJ1132)\n\n// 通らない幾何問題\n// AOJ0153  円による点の包含　点と線分との距離　ccw\n// AOJ0187  線分の交差判定　線分同士の交点\n\n#include<iostream>\n#include<cmath>     // fabs(), hypot()\n#include<vector>    // Circle::crosspoint()の戻り値\n#include<algorithm> // min()\n\nconst double EPS = 1e-10;\nenum POSITION {FORWARD = -2, UNDER, ON, ABOVE, BACKWARD};   // ccw(a, b, p)で3点a, b, pの位置関係を返す\n                                                            //   0: a-p-b, 2: p-a-b, -2: a-b-p, 1: -a-b-の上にp, -1: -a-b-の下にp\n// class\nclass Point;\nclass Segment;\nclass Line;\nclass Circle;\n// member\nclass Point {\n    double x_value, y_value;\npublic:\n    Point() :x_value(0.0), y_value(0.0) {}\n    Point(double d) :x_value(d), y_value(d) {}\n    Point(double a, double b) :x_value(a), y_value(b) {}\n    double x() const {return x_value;}\n    double y() const {return y_value;}\n    double x(double d) {return x_value = d;}\n    double y(double d) {return y_value = d;}\n    bool operator== (const Point&) const;\n    bool operator!= (const Point&) const;\n    bool operator< (const Point&) const;\n    bool operator> (const Point&) const;\n    bool operator<= (const Point&) const;\n    bool operator>= (const Point&) const;\n    const Point operator-() const;\n    const Point& operator=(const Point&);\n    const Point& operator+=(const Point&);\n    const Point& operator-=(const Point&);\n    const Point& operator*=(const Point&);\n    const Point& operator/=(const Point&);\n    double dot(const Point&) const;\n    double cross(const Point&) const;\n    double abs() const;\n    double norm() const;\n    double distance(const Point&) const;\n    double distance(const Segment&) const;\n    double distance(const Line&) const;\n    bool intersect(const Point&) const;\n    bool intersect(const Segment&) const;\n    bool intersect(const Line&) const;\n    const Point projection(const Line&) const;\n    const Point reflection(const Line&) const;\n    POSITION ccw(const Point&, const Point&) const;\n};\nconst Point operator+(const Point& lhs, const Point& rhs);\nconst Point operator-(const Point& lhs, const Point& rhs);\nconst Point operator*(const Point& lhs, const Point& rhs);\nconst Point operator/(const Point& lhs, const Point& rhs);\nclass Segment {\n    Point source_point, target_point;\npublic:\n    Segment(double x1 = 0.0, double y1 = 0.0, double x2 = 0.0, double y2 = 0.0) :source_point(Point(x1, y1)), target_point(Point(x2, y2)) {}\n    Segment(const Point& a, const Point& b) :source_point(a), target_point(b) {}\n    const Point& source() const {return source_point;}\n    const Point& target() const {return target_point;}\n    const Point& source(const Point& p) {return source_point = p;}\n    const Point& target(const Point& p) {return target_point = p;}\n    const Line line() const;\n    double distance(const Point&) const;\n    double distance(const Segment&) const;\n    double distance(const Line&) const;\n    bool intersect(const Point&) const;\n    bool intersect(const Segment&) const;\n    bool intersect(const Line&) const;\n    POSITION ccw(const Point&) const;\n};\nclass Line {\n    Point source_point, target_point;\npublic:\n    Line(double x1 = 0.0, double y1 = 0.0, double x2 = 0.0, double y2 = 0.0) :source_point(Point(x1, y1)), target_point(Point(x2, y2)) {}\n    Line(const Point& a, const Point& b) :source_point(a), target_point(b) {}\n    const Point& source() const {return source_point;}\n    const Point& target() const {return target_point;}\n    const Point& source(const Point& p) {return source_point = p;}\n    const Point& target(const Point& p) {return target_point = p;}\n    const Segment segment() const;\n    double distance(const Point&) const;\n    double distance(const Segment&) const;\n    double distance(const Line&) const;\n    bool intersect(const Point&) const;\n    bool intersect(const Segment&) const;\n    bool intersect(const Line&) const;\n    const Point projection(const Point&) const;\n    const Point reflection(const Point&) const;\n    const Point crosspoint(const Line&) const;\n    POSITION ccw(const Point&) const;\n};\nclass Circle {\n    Point center_point;\n    double radius;\npublic:\n    Circle(double a = 0.0, double b = 0.0, double c = 0.0) :center_point(Point(a, b)), radius(c) {}\n    const Point& center() const {return center_point;}\n    double x() const {return center_point.x();}\n    double y() const {return center_point.y();}\n    double r() const {return radius;}\n    const Point& center(const Point& p) {return center_point = p;}\n    double x(double d) {return center_point.x(d);}\n    double y(double d) {return center_point.y(d);}\n    double r(double d) {return radius = d;}\n    bool include(const Point&) const;\n    bool include(const Segment&) const;\n    bool include(const Circle&) const;\n    bool intersect(const Circle&) const;\n    std::vector<Point> crosspoint(const Circle&) const;\n};\n// Point\nbool Point::operator== (const Point &p) const {return x() == p.x() && y() == p.y();}\nbool Point::operator!= (const Point &p) const {return x() != p.x() || y() != p.y();}\nbool Point::operator<(const Point &p) const {return x() != p.x() ? x() < p.x() : y() < p.y();}\nbool Point::operator>(const Point &p) const {return x() != p.x() ? x() > p.x() : y() > p.y();}\nbool Point::operator<=(const Point &p) const {return x() != p.x() ? x() < p.x() : y() <= p.y();}\nbool Point::operator>=(const Point &p) const {return x() != p.x() ? x() > p.x() : y() >= p.y();}\nconst Point operator+(const Point& lhs, const Point& rhs) {return Point(lhs.x() + rhs.x(), lhs.y() + rhs.y());}\nconst Point operator-(const Point& lhs, const Point& rhs) {return Point(lhs.x() - rhs.x(), lhs.y() - rhs.y());}\nconst Point operator*(const Point& lhs, const Point& rhs) {return Point(lhs.x() * rhs.x(), lhs.y() * rhs.y());}\nconst Point operator/(const Point& lhs, const Point& rhs) {return Point(lhs.x() / rhs.x(), lhs.y() / rhs.y());}\nconst Point Point::operator-() const {return Point(-x(), -y());}\nconst Point& Point::operator=(const Point& p) {x(p.x()); y(p.y()); return *this;}\nconst Point& Point::operator+=(const Point& p) {return *this = *this + p;}\nconst Point& Point::operator-=(const Point& p) {return *this = *this - p;}\nconst Point& Point::operator*=(const Point& p) {return *this = *this * p;}\nconst Point& Point::operator/=(const Point& p) {return *this = *this / p;}\ndouble Point::dot(const Point& p) const {return x() * p.x() + y() * p.y();}\ndouble Point::cross(const Point& p) const {return x() * p.y() - y() * p.x();}\ndouble Point::abs() const {return hypot(x(), y());}\ndouble Point::norm() const {return x() * x() + y() * y();}\ndouble Point::distance(const Point& p) const {return (p - (*this)).abs();}\ndouble Point::distance(const Segment& s) const {return s.distance(*this);}\ndouble Point::distance(const Line& l) const {return l.distance(*this);}\nbool Point::intersect(const Point& p) const {return *this == p;}\nbool Point::intersect(const Segment& s) const {return s.intersect(*this);}\nbool Point::intersect(const Line& l) const {return l.intersect(*this);}\nconst Point Point::projection(const Line& l) const {return l.projection(*this);}\nconst Point Point::reflection(const Line& l) const {return l.reflection(*this);}\nPOSITION Point::ccw(const Point& b, const Point& p) const {\n    const Point& a = *this;\n    Point v1 = b - a;\n    Point v2 = p - a;\n    if(v1.cross(v2) > EPS) return ABOVE;\n    if(v1.cross(v2) < -EPS) return UNDER;\n    if(v1.dot(v2) < -EPS) return BACKWARD;\n    if(v2.norm() - v1.norm() > EPS) return FORWARD;\n    return ON;\n}\n// Segment\nconst Line Segment::line() const {return Line(source(), target());}\ndouble Segment::distance(const Point& p) const {\n    Point q = line().projection(p);\n    if(intersect(q)) return q.distance(p);\n    return std::min(source().distance(p), target().distance(p));\n}\ndouble Segment::distance(const Segment& s) const {\n    if(intersect(s)) return 0.0;\n    double a = distance(s.source());\n    double b = distance(s.target());\n    double c = s.distance(source());\n    double d = s.distance(target());\n    return std::min({a, b, c, d});\n}\ndouble Segment::distance(const Line& l) const {return l.distance(*this);}\nbool Segment::intersect(const Point& p) const {return source().distance(p) + target().distance(p) - target().distance(source()) <= EPS;}\nbool Segment::intersect(const Segment& s) const {\n    bool a = ccw(s.source()) * ccw(s.target()) <= 0;\n    bool b = s.ccw(source()) * s.ccw(target()) <= 0;\n    return a && b;\n}\nbool Segment::intersect(const Line& l) const {return l.intersect(*this);}\nPOSITION Segment::ccw(const Point& p) const {return source().ccw(target(), p);}\n// Line\nconst Segment Line::segment() const {return Segment(source(), target());}\ndouble Line::distance(const Point& p) const {return p.distance(projection(p));}\ndouble Line::distance(const Segment& s) const {\n    if(intersect(s)) return 0.0;\n    double a = distance(s.source());\n    double b = distance(s.target());\n    return a < b ? a : b;\n}\ndouble Line::distance(const Line& l) const {return intersect(l) ? 0.0 : distance(l.source());}\nbool Line::intersect(const Point& p) const {\n    Point v1 = source() - p;\n    Point v2 = target() - p;\n    return fabs(v2.cross(v1)) < EPS;\n}\nbool Line::intersect(const Segment& s) const {\n    Point v1 = target() - source();\n    Point v2 = s.source() - source();\n    Point v3 = s.target() - source();\n    return v1.cross(v2) * v1.cross(v3) <= EPS;\n}\nbool Line::intersect(const Line& l) const {\n    Point v1 = target() - source();\n    Point v2 = l.target() - l.source();\n    Point v3 = l.source() - source();\n    return fabs(v1.cross(v2)) > EPS || fabs(v1.cross(v3)) < EPS;\n}\nconst Point Line::projection(const Point& p) const {\n    Point v1 = p - source();\n    Point v2 = source() - target();\n    return Point(source() + v2 * (v1.dot(v2) / v2.norm()));\n}\nconst Point Line::reflection(const Point& p) const {\n    return p + (projection(p) - p) * 2.0;\n}\nconst Point Line::crosspoint(const Line& l) const {\n    Point v1 = target() - source();\n    Point v2 = l.target() - l.source();\n    Point v3 = target() - l.source();\n    double a = v1.cross(v2);\n    double b = v1.cross(v3);\n    if(fabs(a) <= EPS && fabs(b) <= EPS) l.source();\n    return l.source() + v2 * (b / a);\n}\nPOSITION Line::ccw(const Point& p) const {return source().ccw(target(), p);}\n// Circle\nbool Circle::include(const Point& p) const {return center().distance(p) - r() <= EPS;}\nbool Circle::include(const Segment& s) const {return center().distance(s) - r() <= EPS;}\nbool Circle::include(const Circle& c) const {return center().distance(c.center()) - (r() - c.r()) <= EPS;}\nbool Circle::intersect(const Circle& c) const {return center().distance(c.center()) - r() - c.r() <= EPS;}\nstd::vector<Point> Circle::crosspoint(const Circle& c) const {\n    double angle = atan2(c.y() - y(), c.x() - x());\n    double d = center().distance(c.center());\n    double add = acos((d * d + r() * r() - c.r() * c.r()) / (2.0 * d * r()));\n    std::vector<Point> result;\n    result.push_back(Point(x() + r() * cos(angle + add), y() + r() * sin(angle + add)));\n    result.push_back(Point(x() + r() * cos(angle - add), y() + r() * sin(angle - add)));\n    return result;\n}\n\n#include<iomanip>\nusing namespace std;\nint main() {\n    int n;\n    cin >> n;\n    while(n--) {\n        vector<Point> point(4);\n        for(auto& p: point) {\n            double x, y;\n            cin >> x >> y;\n            p = Point(x, y);\n        }\n        Segment s1 = Segment(point[0], point[1]);\n        Segment s2 = Segment(point[2], point[3]);\n        cout << setprecision(10) << fixed << s1.distance(s2) << endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include<complex>\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\ntypedef complex<long double> P;\n\n// ??§????????°INF\n#define INF (1e16)\n// ?¨±?????????????????\n#define EPS (1e-16)\n// 2??????????????????????????????????????????\n#define EQ(a,b) (abs((a)-(b)) < EPS)\n// 2??????????????????????????????????????????\n#define EQV(a,b) ( EQ((a).real(), (b).real()) && EQ((a).imag(), (b).imag()) )\n\n// ?????? (dot product) : a???b = |a||b|cos??\nlong double dot(P a, P b) {\n\treturn (a.real() * b.real() + a.imag() * b.imag());\n}\n\n// ?????? (cross product) : a??b = |a||b|sin??\nlong double cross(P a, P b) {\n\treturn (a.real() * b.imag() - a.imag() * b.real());\n}\n\n// ?????????????????????\nint is_intersected_ls(P a1, P a2, P b1, P b2) {\n\treturn (cross(a2 - a1, b1 - a1) * cross(a2 - a1, b2 - a1) < EPS) &&\n\t\t(cross(b2 - b1, a1 - b1) * cross(b2 - b1, a2 - b1) < EPS);\n}\n\n// 2??´?????????????????? : a//b <=> cross(a, b) = 0\nint is_parallel(P a1, P a2, P b1, P b2) {\n\treturn EQ(cross(a1 - a2, b1 - b2), 0.0);\n}\n\n// ???c?????????a,b????????????????????????(1)\nint is_point_on_line(P a, P b, P c) {\n\treturn EQ(cross(b - a, c - a), 0.0) &&\n\t\t(dot(b - a, c - a) > -EPS) &&\n\t\t(dot(a - b, c - b) > -EPS);\n}\n\n// a1,a2???????????¨??????????????¨b1,b2???????????¨??????????????????????¨????\nP intersection_ls(P a1, P a2, P b1, P b2) {\n\tP b = b2 - b1;\n\tlong double d1 = abs(cross(b, a1 - b1));\n\tlong double d2 = abs(cross(b, a2 - b1));\n\tlong double t = d1 / (d1 + d2);\n\n\treturn a1 + (a2 - a1) * t;\n}\n\n\n// ???a,b???????????¨??????????????¨???c??¨????????¢\nlong double distance_ls_p(P a, P b, P c) {\n\tif (dot(b - a, c - a) < EPS) return abs(c - a);\n\tif (dot(a - b, c - b) < EPS) return abs(c - b);\n\treturn abs(cross(b - a, c - a)) / abs(b - a);\n}\n\nint main() {\n\tint q; cin >> q;\n\tfor (int i = 0; i < q; i++) {\n\t\tlong double x0, y0, x1, y1, x2, y2, x3, y3;\n\t\tcin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n\t\tP p0(x0, y0), p1(x1, y1), p2(x2, y2), p3(x3, y3);\n\t\tif (is_parallel(p0, p1, p2, p3)) {\n\t\t\tlong double d0 = min(distance_ls_p(p0, p1, p2), distance_ls_p(p0, p1, p3));\n\t\t\tlong double d1 = min(distance_ls_p(p2, p3, p0), distance_ls_p(p2, p3, p1));\n\t\t\tlong double ans = min(d0, d1);\n\n\t\t\tcout.precision(20);\n\t\t\tcout << showpoint << ans << endl;\n\t\t\tcontinue;\n\t\t}\n\t\tif (is_intersected_ls(p0, p1, p2, p3)) {\n\t\t\tcout.precision(20);\n\t\t\tcout << showpoint << 0.00000000000 << endl;\n\t\t\tcontinue;\n\t\t}\n\t\tlong double d0 = min(distance_ls_p(p0, p1, p2), distance_ls_p(p0, p1, p3));\n\t\tlong double d1 = min(distance_ls_p(p2, p3, p0), distance_ls_p(p2, p3, p1));\n\t\tlong double ans =min(d0,d1);\n\n\t\tcout.precision(20);\n\t\tcout << showpoint << ans << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#include <cmath>\n\nusing namespace std;\ntypedef long long ll;\n//typedef unsigned long long ll;\n\n#define rep(i, n) for (int i = 0; i < (n); ++i)\n//#define rep(i, n) for (ll i = 0; i < (n); ++i)\n//#define sz(x) ll(x.size())\n//typedef pair<ll, int> P;\ntypedef pair<ll, ll> P;\n//const double INF = 1e10;\nconst ll INF = LONG_LONG_MAX / 100;\n//const ll INF = (1ll << 31) - 1;\n//const ll INF = 1e15;\nconst ll MINF = LONG_LONG_MIN;\n//const int INF = INT_MAX / 10;\n#define cmin(x, y) x = min(x, y)\n#define cmax(x, y) x = max(x, y)\n//typedef pair<int, int> P;\n//typedef pair<double, double> P;\n\nbool contain(set<P> &s, P a) { return s.find(a) != s.end(); }\n\n//ifstream myfile(\"C:\\\\Users\\\\riku\\\\Downloads\\\\0_00.txt\");\n//ofstream outfile(\"log.txt\");\n//outfile << setw(6) << setfill('0') << prefecture << setw(6) << setfill('0') << rank << endl;\n// std::cout << std::bitset<8>(9);\nconst int mod = 1000000007;\ntypedef priority_queue<long long, vector<long long>, greater<long long>> PQ_ASK;\n\n\nvoid print_line(vector<string> &line) {\n    if (line.size() == 0ll) {\n        cout << endl;\n        return;\n    }\n    for (ll i = 0; i < line.size(); i++) {\n        cout << line[i];\n        if (i == line.size() - 1) cout << endl;\n        else cout << ' ';\n    }\n}\n\n#define EPS 1e-7\nconst double PI = 3.14159265358979323846;\n\nbool equal(double f1, double f2) {\n    return abs(f1 - f2) < EPS;\n}\n\nstruct Vec {\n\n    double x, y;\n\n    double size() {\n        return sqrt(x * x + y * y);\n    }\n\n    double inner_product(Vec v2) {\n        return x * v2.x + y * v2.y;\n    }\n\n    Vec product(double rate) {\n        Vec v2;\n        v2.x = x * rate;\n        v2.y = y * rate;\n        return v2;\n    }\n};\n\n\nstruct Point {\n    double x, y;\n\n    Point plus(Vec vec) {\n        Point p;\n        p.x = x + vec.x;\n        p.y = y + vec.y;\n        return p;\n    }\n\n    Point minus(Point sub) {\n        Point p;\n        p.x = x - sub.x;\n        p.y = y - sub.y;\n        return p;\n    }\n\n    double distance() {\n        return sqrt(x * x + y * y);\n    }\n\n    friend istream &operator>>(istream &is, Point &f) {\n        cin >> f.x >> f.y;\n        return is;\n    }\n\n    friend ostream &operator<<(std::ostream &os, Point const &f) {\n        printf(\"%.20f %.20f\\n\", f.x, f.y);\n        return os;\n    }\n};\n\nstruct Line {\n    Point start, end;\n\n    Vec to_vec() {\n        Vec vec;\n        vec.x = end.x - start.x;\n        vec.y = end.y - start.y;\n        return vec;\n    }\n\n    friend istream &operator>>(istream &is, Line &f) {\n        cin >> f.start >> f.end;\n        return is;\n    }\n\n    Line normalize() {\n        Line l;\n        l.start = {0, 0};\n        l.end = end.minus(start);\n        return l;\n    }\n\n    double atan2() {\n        Line l = normalize();\n        return std::atan2(l.end.y, l.end.x);\n    }\n\n    double rad(Line line) {\n        double f1 = atan2(),\n                f2 = line.atan2();\n\n        double diff = f1 - f2;\n        if (equal(diff, -PI)) {\n            return PI;\n        }\n        if (equal(diff, PI)) {\n            return PI;\n        }\n        if (diff < -PI) {\n            diff += (PI * 2);\n        }\n        if (diff > PI) {\n            diff -= (PI * 2);\n        }\n\n        return diff;\n    }\n\n    void clock_wise(Line line) {\n\n        double diff = rad(line);\n\n        if (equal(line.to_vec().size(), 0)) {\n            cout << \"ON_SEGMENT\" << endl;\n            return;\n        }\n\n        if (equal(diff, 0)) {\n            double s1 = to_vec().size();\n            double s2 = line.to_vec().size();\n\n            if (s1 > s2 || equal(s1, s2)) {\n                cout << \"ON_SEGMENT\" << endl;\n            } else {\n                cout << \"ONLINE_FRONT\" << endl;\n            }\n        } else if (equal(abs(diff), PI)) {\n            cout << \"ONLINE_BACK\" << endl;\n        } else if (diff < 0) {\n            cout << \"COUNTER_CLOCKWISE\" << endl;\n        } else {\n            cout << \"CLOCKWISE\" << endl;\n        }\n    }\n\n    static const int COUNTER_CLOCKWISE = 1;\n    static const int CLOCKWISE = -1;\n    static const int ONLINE_BACK = 2;   // p2->p0->p1\n    static const int ONLINE_FRONT = -2; // p0->p1->p2\n    static const int ON_SEGMENT = 0;    // p0->p2->p1\n\n    double dot(Point a, Point b) {\n        return a.x * b.x + a.y * b.y;\n    }\n\n    double cross(Point a, Point b) {\n        return a.x * b.y - a.y * b.x;\n    }\n\n    double norm(Point a) {\n        return a.x * a.x + a.y * a.y;\n    }\n\n    int ccw(Point p0, Point p1, Point p2) {\n        Point a = p1.minus(p0);\n        Point b = p2.minus(p0);\n        if (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n        if (cross(a, b) < -EPS) return CLOCKWISE;\n        if (dot(a, b) < -EPS) return ONLINE_BACK;\n        if (norm(a) < norm(b)) return ONLINE_FRONT;\n        return ON_SEGMENT;\n    }\n\n    bool intersect(Point p1, Point p2, Point p3, Point p4) {\n        return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n                ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n    }\n\n    bool intersect(Line s1) {\n        return intersect(start, end, s1.start, s1.end);\n    }\n\n    Point cross_point(Line s1) {\n        Point base = s1.end.minus(s1.start);\n        double d1 = abs(cross(base, start.minus(s1.start)));\n        double d2 = abs(cross(base, end.minus(s1.start)));\n        double t = d1 / (d1 + d2);\n        Point e = end.minus(start);\n        Line l;\n        l.start = {0, 0};\n        l.end = e;\n        return start.plus(l.to_vec().product(t));\n    }\n\n    double distance_lp(Line l, Point p) {\n        return abs(cross(l.end.minus(l.start), p.minus(l.start)) / l.end.minus(l.start).distance());\n    }\n\n    double distance_sp(Line s, Point p) {\n        if (dot(s.end.minus(s.start), p.minus(s.start)) < 0.0) return p.minus(s.start).distance();\n        if (dot(s.start.minus(s.end), p.minus(s.end)) < 0.0) return p.minus(s.end).distance();\n        return distance_lp(s, p);\n    }\n\n    double distance(Line s2) {\n        if (intersect(s2)) return 0.0;\n        return min({distance_sp(*this, s2.start), distance_sp(*this, s2.end),\n                    distance_sp(s2, start), distance_sp(s2, end)});\n    }\n};\n\n\nint main() {\n//    ofstream outfile(\"log.txt\");\n\n\n    int n;\n    cin >> n;\n    rep(i, n) {\n        Line l1, l2;\n        cin >> l1 >> l2;\n        double d = l1.distance(l2);\n        printf(\"%.20f\\n\", d);\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "/*\n幾何\nhttps://gist.github.com/zeptometer/3719669\n複素数平面による幾何ライブラリ←もっと短くなる可能生アリ\nhttp://osrehun.hatenadiary.jp/entry/2016/12/31/145827\n\n*/\n#include <bits/stdc++.h>\nusing namespace std;\n\nusing DD=double;\n\n\n#define EPS 1e-10\n#define eq(a,b) (abs( (a) - (b) )<EPS)\nconst DD PI=acosl(-1.0);\nconstexpr DD INF=1LL<<62;\n\n//点\nusing P=complex<DD>;\n//ベクトル\nusing V=P;\n//線分\nstruct Segment{\n    P a,b;\n    Segment()=default;\n    Segment(P a,P b) :a(a),b(b){}\n    Segment(DD ax,DD ay,DD bx,DD by):a(ax,ay),b(bx,by){}\n\n};\n//直線\nusing Line=Segment;\n//円\nstruct Circle{\n    P p;\n    DD r;\n    Circle()=default;\n    Circle(P p,DD r):p(p),r(r){}\n};\nusing Polygon=vector<P>;\n\n//++++++++++++++++基本計算++++++++++++++//\ninline DD torad(const DD &deg){return deg*PI/180;}\ninline DD todeg(const DD &rad){return rad*180/PI;}\n//内積\ninline DD dot(const V &a,const V &b){\n    return real(a*conj(b));\n}\n//外積\ninline DD cross(const V &a,const V &b){\n    return imag(conj(a)*b);\n}\n//ベクトルvを反時計回りにr度回転\ninline V rotate(const V &v,const DD r){\n    return v*V(cos(r),sin(r));\n}\ninline bool xy(const P &a,const P &b){\n    if(real(a)+EPS<=real(b)) return true;\n    if(eq(real(a),real(b)) && imag(a)+EPS<imag(b)) return true;\n    return false;\n}\ninline bool yx(const P &a,const P &b){\n    if(imag(a)+EPS<imag(b)) return true;\n    if(eq(imag(a),imag(b)) && real(a)+EPS<real(b)) return true;\n    return false;\n}\n\n//++++++++++++++++平行や直交+++++++++++++++//\ninline bool isOrthogonal(const V &a,const V &b){\n    return eq(dot(a,b),0.0);\n}\ninline bool isOrthogonal(const Segment &a,const Segment &b){\n    return eq(dot(a.a-a.b,b.a-b.b),0);\n}\ninline bool isParallel(const V &a,const V &b){\n    return eq(cross(a,b),0.0);\n}\ninline bool isParallel(const Segment &a,const Segment &b){\n    return eq(cross(a.a-a.b,b.a-b.b),0);\n}\n//線分a-bに対してcがどの位置にあるか\n//ccwの簡略版 反時計回り:1 時計回り:-1 直線上:0\ninline int ccw(const P &a,const P &b,const P &c){\n    DD cr=cross(b-a,c-a);\n    if(cr>EPS) return 1;\n    if(cr<-EPS) return -1;\n    return 0;\n}\n\n//線分a-bに対してcがどの位置にあるか\n//反時計回り:1　時計回り:-1 直線上(a,b,c:-2 a,c,b:0 c,a,b:2) \ninline int ccwH(P a,P b,P c){\n    b-=a;c-=a;\n    if(cross(b,c)>EPS) return 1;\n    if(cross(b,c)<-EPS) return -1;\n    if(dot(b,c)<-EPS) return 2;\n    if(norm(b)<norm(c)) return -2;\n    return 0;\n}\n\n\n//+++++++++++++++射影+++++++++++++++++++++//\ninline P project(const P &p,const Segment &s){\n    V base=s.b-s.a;\n    DD r=dot(p-s.a,base)/norm(base);\n    return s.a+base*r;\n}\ninline P reflect(const P &p,const Segment &s){\n    return p+(project(p,s)-p)*2.0;\n}\n/*++++++++++点との距離++++++++++++++++++*/\n//点と直線の距離\ninline DD dis(const P &p,const Line &l){return abs(cross(l.b-l.a,p-l.a))/abs(l.b-l.a);}\n//点と線分の距離\ninline DD disPS(const P &p,const Segment &s){\n    if( dot(s.b-s.a,p-s.a)<0.0 ) return abs(p-s.a);\n    if( dot(s.a-s.b,p-s.b)<0.0 ) return abs(p-s.b);\n    return dis(p,s); //点と直線の距離\n}\n\n\n//+++++++++++++++線分と直線+++++++++++++++++//\n\n//線分a-b,c-dは交差するか?\ninline bool intersect(const P &a,const P &b,const P &c,const P &d){\n    return(ccwH(a,b,c)*ccwH(a,b,d)<=0 && ccwH(c,d,a)*ccwH(c,d,b)<=0);\n}\n//線分s,tは交差するか？\ninline bool intersect(const Segment &s,const Segment &t){\n    return intersect(s.a,s.b,t.a,t.b);\n}\n//線分と線分の交点\n//これをやる前にintersectで判定\ninline P crossPoint(const Segment &s,const Segment &t){\n    V base=t.b-t.a;\n    DD d1=abs(cross(base,s.a-t.a));\n    DD d2=abs(cross(base,s.b-t.a));\n    DD r=d1/(d1+d2);\n    return s.a+(s.b-s.a)*r;\n}\n//線分と線分の距離\ninline DD dis(const Segment &s,const Segment t){\n    if(intersect(s,t)) return 0.0;\n    return min(min(disPS(t.a,s),disPS(t.b,s)),min(disPS(s.a,t),disPS(s.b,t)) );\n}\n\n//+++++++++++円++++++++++++++++//\n\n//円cと直線lの交点\n//abs(l,c.p)<c.r+EPSが必要\npair<P,P> crossPoint(const Line &l,const Circle &c){\n    P pr=project(c.p,l);\n    V e=(l.b-l.a)/(abs(l.b-l.a));\n    DD base=sqrt(c.r*c.r-norm(pr-c.p));\n    return make_pair(pr+e*base,pr-e*base);\n}\n//線分sと円cの交点\nvector<P> crossPointSC(const Segment &s,const Circle &c){\n    vector<P> ret;\n    if(dis(c.p,s)>=c.r+EPS) return ret;\n    auto p=crossPoint(s,c);\n    if(dot(p.first-s.a,s.b-s.a)>0 && dot(p.first-s.b,s.a-s.b)>0) ret.push_back(p.first);\n    if(dot(p.second-s.a,s.b-s.a)>0 && dot(p.second-s.b,s.a-s.b)>0) ret.push_back(p.second);\n    if(xy(s.a,s.b)) sort(ret.begin(),ret.end(),xy);\n    else sort(ret.rbegin(),ret.rend(),xy);\n    return ret;\n}\n\n//共通接線の数\n//離れている:4 外接:3 交わる:2 内接:1 内包:0\ninline int intersect(const Circle &a,const Circle &b){\n    DD d=abs(a.p-b.p);\n    if(d>a.r+b.r+EPS) return 4;\n    if(eq(d,a.r+b.r)) return 3;\n    if(eq(d,abs(a.r-b.r))) return 1;\n    if(d<abs(a.r-b.r)-EPS) return 0;\n    return 2;\n}\n\n//円c1と円c2の交点\n//これを使う前に交点があるかどうかを判定する\nvector<P> crossPoint(const Circle &a,const Circle &b){\n    vector<P> ret;\n    if(abs(a.p-b.p)<a.r+b.r+EPS) return ret;\n    DD d=abs(a.p-b.p);\n    DD s=acos((a.r*a.r+d*d-b.r*b.r)/(2*a.r*d));\n    DD t=arg(b.p-a.p);\n    if(eq(s,0)) ret.emplace_back(a.p+polar(a.r,t+s));\n    else ret.emplace_back(a.p+polar(a.r,t+s)),ret.emplace_back(a.p+polar(a.r,t-s));\n    return ret;\n}\n\n//pがcの外にあるかの判定が必要\nvector<P> TanLine(const P &p,const Circle &c){\n    vector<P> ret;\n    DD d=abs(p-c.p);\n    if(d<=c.r-EPS) return ret;\n    if(eq(d,c.r)){\n        ret.push_back(p);\n        return ret;\n    } \n    return crossPoint(c,Circle(p,sqrt(d*d-c.r*c.r)));\n}\n//https://ei1333.github.io/luzhiled/snippets/geometry/template.html\n//↑すごい。丸写し\n//円c1,c2の共通接線\n//接点をつないで線にしている(１個だけ追加するときに注意)\nvector<Line> TanLine(Circle a,Circle b){\n    vector<Line> ret;\n    if(a.r<b.r) swap(a,b);\n    DD g=abs(a.p-b.p);\n    if(eq(g,0)) return ret;\n    V u=(b.p-a.p)/g;\n    V v=rotate(u,PI*0.5);\n    for(DD s:{-1,1}){\n        DD h=(a.r+s*b.r)/g;\n        if(eq(1-h*h,0)){\n            ret.emplace_back(a.p+u*a.r,a.p+(u+v)*a.r);\n        }else if(1-h*h>0){\n            V uu=u*h,vv=v*sqrt(1-h*h);\n            ret.emplace_back(a.p+(uu+vv)*a.r,b.p-(uu+vv)*b.r*s);\n            ret.emplace_back(a.p+(uu-vv)*a.r,b.p-(uu-vv)*b.r*s);\n        }\n    }\n    return ret;\n}\n\n/*+++++++++++++++++++三角形+++++++++++++++++*/\n//外心\n//isParallel()を使って判定を忘れずに\nP circumcenter(const P &a,const P &b,const P &c){\n    P ab=(a+b)/2.0,bc=(b+c)/2.0;\n    Segment s(ab,ab+polar(1.0,arg(b-a)+PI*0.5));\n    Segment t(bc,bc+polar(1.0,arg(c-b)+PI*0.5));\n    return crossPoint(s,t);\n}\n\n/*+++++++++++++++++++多角形+++++++++++++++++++*/\n//IN:2 ON:1 OUT:0\n//点がどの位置にあるか\nint contains(const P &p,const Polygon &g){\n    int n=(int)g.size();\n    bool x=false;\n    for(int i=0;i<n;i++){\n        V a=g[i]-p,b=g[(i+1)%n]-p;\n        if(eq(cross(a,b),0) && dot(a,b)<EPS) return 1;\n        if(imag(a)>imag(b)) swap(a,b);\n        if(imag(a)<EPS && EPS<imag(b) && cross(a,b)>EPS) x=!x;\n    }\n    return (x?2:0);\n}\n//凸性判定\nbool isConvex(const Polygon &g){\n    int n=(int)g.size();\n    int flag=0;\n    int t;\n    for(int i=0;i<n;i++){\n        V a(g[(i+1)%n]-g[i]),b(g[(i+2)%n]-g[i]);\n        if(cross(a,b)>EPS) t=1;\n        else if(cross(a,b)<-EPS) t=-1;\n        else continue;\n        if(flag==-t) return false;\n        flag=t;\n    }\n    return true;\n}\n\n//凸包　アンドリューのアルゴリズム\n//https://github.com/drken1215/algorithm/blob/master/Geometry/All.cpp←螺旋本より早そう\n//j=1:返上の点を含まない　j=-1:含む\n//反時計回りの多角形を返す\n//sはソートされる\nPolygon ConvexHull(Polygon &s,const int j){\n    int sz=(int)s.size();\n    if(sz<3) return s;\n    sort(s.begin(),s.end(),yx);\n\n    int n=0;\n    Polygon res(2*sz);\n    for(int i=0;i<sz;i++){\n        while(n>=2 && cross(res[n-1]-res[n-2],s[i]-res[n-2])<EPS*j){\n            n--;\n        }\n        res[n]=s[i];\n        n++;\n    }\n    int t=n+1;\n    for(int i=sz-2;i>=0;i--){\n        while(n>=t && cross(res[n-1]-res[n-2],s[i]-res[n-2])<EPS*j){\n            n--;\n        }\n        res[n]=s[i];\n        n++;\n    }\n    res.resize(n-1);\n    return res;\n}\n\n//符号付き面積\n//反時計回りの図形なら正\n//https://imagingsolution.net/math/calc_n_point_area/\nDD Area(const Polygon &g){\n    DD ret=0.0;\n    int n=(int)g.size();\n    for(int i=0;i<n;i++){\n        ret+=cross(g[i],g[(i+1)%n]);\n    }\n    return ret/2.0L;\n}\n\n//反時計回り\n//理解が浅い←大体分かった（本当か？）\nDD Diameter(Polygon g){\n    g=ConvexHull(g,1);\n    int gz=g.size();\n    int m=0,M=0;\n    for(int i=1;i<gz;i++){\n        if(imag(g[i])<imag(g[m])) m=i;\n        if(imag(g[i])>imag(g[M])) M=i;\n    }\n    DD ret=0;\n    int sm=m,sM=M;\n    while(m!=sM || M!=sm){\n        ret=max(ret,norm(g[m]-g[M]));\n        if(cross(g[(m+1)%gz]-g[m],g[(M+1)%gz]-g[M])<0) m=(m+1)%gz;\n        else M=(M+1)%gz;\n    }\n    return sqrt(ret);\n}\n\n//凸多角形gをlで切断\n//l.p1-l.p2の左側\n//gは反時計回り→反時計回りで返す\n//時計回り→時計回り\nPolygon ConvexCut(const Polygon &g,const Line &l){\n    Polygon ret;\n    int gz=(int)g.size();\n    for(int i=0;i<gz;i++){\n        P now=g[i],next=g[(i+1)%gz];\n        if(ccw(l.a,l.b,now)>=0) ret.push_back(now);\n        if(ccw(l.a,l.b,now)*ccw(l.a,l.b,next)<0){\n            ret.push_back(crossPoint(Line(now,next),l));\n        }\n    }\n    return ret;\n}\n\ninline DD calc(const P &a,const P &b,const DD &r,const bool triangle){\n    if(triangle) return cross(a,b);\n    else return r*r*arg(b-a);\n}\n\nDD calcArea(const DD &r,const P &a,const P &b){\n    if(eq(abs(a-b),0)) return 0;\n    bool ina=abs(a)<r+EPS;\n    bool inb=abs(b)<r+EPS;\n    if(ina && inb) return cross(a,b);\n    auto cr=crossPointSC(Segment(a,b),Circle((0,0),r));\n    if(cr.empty()) return calc(a,b,r,false);\n    auto s=cr[0],t=cr.back();\n    return calc(s,t,r,true)+calc(a,s,r,ina)+calc(t,b,r,inb);\n}\n\n//円と多角形の共通部分の面積\n//http://drken1215.hatenablog.com/entry/2020/02/02/091000\nDD Area(const Circle &c,const Polygon &g){\n    DD ret=0.0;\n    int gz=g.size();\n    if(gz<3) return ret;\n    for(int i=0;i<gz;i++){\n        P a=g[i]-c.p,b=g[(i+1)%gz]-c.p;\n        ret+=calcArea(c.r,g[i]-c.p,g[(i+1)%gz]-c.p);\n    }\n    return ret/2.0;\n}\n\n//++++なんか凄いの+++++++++++++++\n\n//最近点対\nDD RecClosetPair(Polygon::iterator it,const int n){\n    if(n<=1) return INF;\n    int m=n/2;\n    DD x=real(it[m]);\n    DD d=min(RecClosetPair(it,m),RecClosetPair(it+m,n-m));\n    inplace_merge(it,it+m,it+n,yx);\n    Polygon v;\n    for(int i=0;i<n;i++){\n        if(abs(real(it[i])-x)>=d) continue;\n        for(int j=0;j<v.size();j++){\n            DD dy=imag(it[i])-imag(v[v.size()-1-j]);\n            if(dy>=d) break;\n            DD dx=real(it[i])-real(v[v.size()-1-j]);\n            d=min(d,sqrt(dx*dx+dy*dy));\n        }\n        v.push_back(it[i]);\n    }\n    return d;\n}\n\nDD ClosetPair(Polygon g){\n    sort(g.begin(),g.end(),xy);\n    return RecClosetPair(g.begin(),g.size());\n}\n\n\n\n\nsigned main(){\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr); \n    cout<<fixed<<setprecision(10);\n\n    int Q;\n    cin>>Q;\n    while(Q--){\n        int x[4],y[4];\n        vector<P> p;\n        for(int i=0;i<4;i++) cin>>x[i]>>y[i],p.emplace_back(x[i],y[i]);\n        printf(\"%.10lf\\n\",dis(Segment(p[0],p[1]),Segment(p[2],p[3])));\n    }\n}\n\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n#define PI 3.141592653589793238\n#define int long long\n \nusing namespace std;\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nstruct Point{\n  double x,y;\n  Point(){}\n  Point(double x,double y) :x(x),y(y){}\n  Point operator + (Point p) {return Point(x+p.x,y+p.y);}\n  Point operator - (Point p) {return Point(x-p.x,y-p.y);}\n  Point operator * (double k) {return Point(x*k,y*k);}\n  Point operator / (double k) {return Point(x/k,y/k);}\n  double norm(){return x*x+y*y;}\n  double abs(){return sqrt(norm());}\n\n  bool operator < (const Point &p) const{\n    return x!=p.x ? x < p.x : y < p.y;\n  }\n\n  bool operator == (const Point &p) const{\n    return fabs(x-p.x) < EPS && fabs(y-p.y) < EPS;\n  }\n};\n\nistream &operator >> (istream &is,Point &p){\n  is>>p.x>>p.y;\n  return is;\n}\n\nostream &operator << (ostream &os,Point p){\n  os<<fixed<<setprecision(12)<<p.x<<\" \"<<p.y;\n  return os;\n}\n\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\nstruct Segment{\n  Point p1,p2;\n  Segment(){}\n  Segment(Point p1, Point p2):p1(p1),p2(p2){}\n};\ntypedef Segment Line;\n\nstruct Circle{\n  Point c;\n  double r;\n  Circle(){}\n  Circle(Point c,double r):c(c),r(r){}\n};\n\ndouble norm(Vector a){\n  return a.x*a.x+a.y*a.y;\n}\ndouble abs(Vector a){\n  return sqrt(norm(a));\n}\ndouble dot(Vector a,Vector b){\n  return a.x*b.x+a.y*b.y;\n}\ndouble cross(Vector a,Vector b){\n  return a.x*b.y-a.y*b.x;\n}\n\nbool isOrthogonal(Vector a,Vector b){\n  return equals(dot(a,b),0.0);\n}\n\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n  return isOrthogonal(a1-a2,b1-b2);\n}\n\nbool isOrthogonal(Segment s1,Segment s2){\n  return equals(dot(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n\nbool isParallel(Vector a,Vector b){\n  return equals(cross(a,b),0.0);\n}\n\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n  return isParallel(a1-a2,b1-b2);\n}\n\nbool isParallel(Segment s1,Segment s2){\n  return equals(cross(s1.p2-s1.p1,s2.p2-s2.p1),0.0); \n}\n\nPoint project(Segment s,Point p){\n  Vector base=s.p2-s.p1;\n  double r=dot(p-s.p1,base)/norm(base);\n  return s.p1+base*r;\n}\n\nPoint reflect(Segment s,Point p){\n  return p+(project(s,p)-p)*2.0;\n}\n\nint ccw(Point p0,Point p1,Point p2){\n  Vector a = p1-p0;\n  Vector b = p2-p0;\n  if(cross(a,b) > EPS) return COUNTER_CLOCKWISE;\n  if(cross(a,b) < -EPS) return CLOCKWISE;\n  if(dot(a,b) < -EPS) return ONLINE_BACK;\n  if(a.norm()<b.norm()) return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\n\nbool intersect(Point p1,Point p2,Point p3,Point p4){\n  return (ccw(p1,p2,p3)*ccw(p1,p2,p4) <= 0 &&\n\t  ccw(p3,p4,p1)*ccw(p3,p4,p2) <= 0 );\n}\n\nbool intersect(Segment s1,Segment s2){\n  return intersect(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n\ndouble getDistanceLP(Line l,Point p){\n  return abs(cross(l.p2-l.p1,p-l.p1)/abs(l.p2-l.p1));\n}\n\ndouble getDistanceSP(Segment s,Point p){\n  if(dot(s.p2-s.p1,p-s.p1) < 0.0 ) return abs(p-s.p1);\n  if(dot(s.p1-s.p2,p-s.p2) < 0.0 ) return abs(p-s.p2);\n  return getDistanceLP(s,p);\n}\n\ndouble getDistance(Segment s1,Segment s2){\n  if(intersect(s1,s2)) return 0.0;\n  return min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),\n\t     min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n}\n\nPoint getCrossPoint(Segment s1,Segment s2){\n  Vector base=s2.p2-s2.p1;\n  double d1=abs(cross(base,s1.p1-s2.p1));\n  double d2=abs(cross(base,s1.p2-s2.p1));\n  double t=d1/(d1+d2);\n  return s1.p1+(s1.p2-s1.p1)*t;\n}\n\n\npair<Point,Point> getCrossPoints(Circle c,Line l){\n  Vector pr=project(l,c.c);\n  Vector e=(l.p2-l.p1)/abs(l.p2-l.p1);\n  double base=sqrt(c.r*c.r-norm(pr-c.c));\n  return make_pair(pr+e*base,pr-e*base);\n}\n\n\ndouble arg(Vector p){\n  return atan2(p.y,p.x);\n}\n\nVector polar(double a,double r){\n  return Point(cos(r)*a,sin(r)*a);\n}\n\npair<Point,Point> getCrossPoints(Circle c1,Circle c2){\n  double d=abs(c1.c-c2.c);\n  double a=acos((c1.r*c1.r+d*d-c2.r*c2.r)/(2*c1.r*d));\n  double t=arg(c2.c-c1.c);\n  return make_pair(c1.c+polar(c1.r,t+a),c1.c+polar(c1.r,t-a));\n}\n\nint contains(Polygon g,Point p){\n  int n=g.size();\n  bool x=false;\n  for(int i=0;i<n;i++){\n    Point a=g[i]-p,b=g[(i+1)%n]-p;\n    if(fabs(cross(a,b)) < EPS && dot(a,b) < EPS) return 1;\n    if(a.y>b.y) swap(a,b);\n    if(a.y < EPS && EPS < b.y && cross(a,b) > EPS ) x = !x;\n  }\n  return (x?2:0);\n}\n\nPolygon andrewScan(Polygon s){\n  Polygon u,l;\n  if(s.size()<3) return s;\n  sort(s.begin(),s.end());\n  u.push_back(s[0]);\n  u.push_back(s[1]);\n  l.push_back(s[s.size()-1]);\n  l.push_back(s[s.size()-2]);\n  for(int i=2;i<(int)s.size();i++){\n    for(int n=u.size();n>=2&&ccw(u[n-2],u[n-1],s[i]) != CLOCKWISE;n--){\n      u.pop_back();\n    }\n    u.push_back(s[i]);\n  } \n  for(int i=s.size()-3;i>=0;i--){\n    for(int n=l.size();n>=2&&ccw(l[n-2],l[n-1],s[i]) != CLOCKWISE;n--){\n      l.pop_back();\n    }\n    l.push_back(s[i]);\n  }\n  reverse(l.begin(),l.end());\n  for(int i=u.size()-2;i>=1;i--) l.push_back(u[i]);\n  return l;\n} \n\ndouble area(Polygon s){\n  double res=0;\n  for(int i=0;i<(int)s.size();i++){\n    res+=cross(s[i],s[(i+1)%s.size()])/2.0;\n  }\n  return abs(res);\n}\n\n\nPoint getCrossPointLL(Line l1,Line l2){\n  double a=cross(l1.p2-l1.p1,l2.p2-l2.p1);\n  double b=cross(l1.p2-l1.p1,l1.p2-l2.p1);\n  if(abs(a)<EPS&&abs(b)<EPS) return l2.p1;\n  return l2.p1+(l2.p2-l2.p1)*(b/a);\n}\n\nPolygon convexCut(Polygon p,Line l){\n  Polygon q;\n  for(int i=0;i<(int)p.size();i++){\n    Point a=p[i],b=p[(i+1)%p.size()];\n    if(ccw(l.p1,l.p2,a)!=-1) q.push_back(a);\n    if(ccw(l.p1,l.p2,a)*ccw(l.p1,l.p2,b)<0)\n      q.push_back(getCrossPointLL(Line(a,b),l));\n  }\n  return q;\n}\n\nLine bisector(Point p1,Point p2){\n  Circle c1=Circle(p1,abs(p1-p2)),c2=Circle(p2,abs(p1-p2));\n  pair<Point,Point> p=getCrossPoints(c1,c2);\n  if(cross(p2-p1,p.first-p1)>0) swap(p.first,p.second);\n  return Line(p.first,p.second);\n}\n\n\nVector spin(Vector v,double theta){\n  Vector res;\n  res.x=cos(theta)*v.x-sin(theta)*v.y;\n  res.y=sin(theta)*v.x+cos(theta)*v.y;\n  return res;\n}\n\nvector<Line> corner(Line l1,Line l2){\n  vector<Line> res;\n  if(isParallel(l1,l2)){\n    double d=getDistanceLP(l1,l2.p1)/2.0;\n    Vector v1=l1.p2-l1.p1;\n    v1=v1/v1.abs()*d;\n    Point p=l2.p1+spin(v1,90.0*(PI/180.0));\n    double d1=getDistanceLP(l1,p);\n    double d2=getDistanceLP(l2,p);\n    if(abs(d1-d2)>d){\n      p=l2.p1+spin(v1,-90.0*(PI/180.0));\n    }\n    res.push_back(Line(p,p+v1));\n  }else{\n    Point p=getCrossPointLL(l1,l2);\n    Vector v1=l1.p2-l1.p1,v2=l2.p2-l2.p1;\n    v1=v1/v1.abs();\n    v2=v2/v2.abs();\n    res.push_back(Line(p,p+(v1+v2)));\n    res.push_back(Line(p,p+spin(v1+v2,90.0*(PI/180.0))));\n  }\n  return res;\n}\n\nsigned main(){\n  int q;\n  cin>>q;\n  while(q--){\n    Point p0,p1,p2,p3;\n    cin>>p0>>p1>>p2>>p3;\n    printf(\"%.12f\\n\",getDistance(Segment(p0,p1),Segment(p2,p3)));\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n\nusing namespace std;\n\n// 2次元ベクトルクラス\nclass Vector {\npublic:\n    float x, y;\n    \n    // コンストラクタ\n    Vector() {\n        x = 0.f;\n        y = 0.f;\n    }\n    \n    // コンストラクタ(引数あり)\n    Vector(float nx, float ny) {\n        x = nx;\n        y = ny;\n    }\n    \n    // x,y成分を設定する\n    void set(float nx, float ny) {\n        x = nx;\n        y = ny;\n    }\n    \n    // 内積を求める\n    float dot(const Vector& vec) const {\n        return x * vec.x + y * vec.y;\n    }\n    \n    // 外積を求める\n    float cross(const Vector& vec) const {\n        return x * vec.y - y * vec.x;\n    }\n    \n    // 余弦を求める\n    float getCos(const Vector& vec) const {\n        float nor = norm() * vec.norm();\n        if (nor == 0.f) {\n            return 0.f;\n        } else {\n            return dot(vec) / nor;\n        }\n    }\n    \n    // ベクトルの大きさを求める\n    float norm() const {\n        return sqrt(x * x + y * y);\n    }\n    \n    // 単位ベクトルを返す\n    Vector getUnit() const {\n        Vector v;\n        float n = norm();\n        if (n == 0.f) {\n            v.set(0.f, 0.f);\n        } else {\n            v.set(x / n, y / n);\n        }\n        return v;\n    }\n    \n    void operator = (const Vector& vec) {\n        x = vec.x;\n        y = vec.y;\n    }\n    \n    Vector operator + (const Vector& vec) const {\n        Vector v(x + vec.x, y + vec.y);\n        return v;\n    }\n    \n    Vector operator - (const Vector& vec) const {\n        Vector v(x - vec.x, y - vec.y);\n        return v;\n    }\n    \n    Vector operator * (const Vector& vec) const {\n        Vector v(x * vec.x, y * vec.y);\n        return v;\n    }\n    \n    Vector operator * (float f) const {\n        Vector v(x * f, y * f);\n        return v;\n    }\n    \n    Vector operator / (const Vector& vec) const {\n        Vector v;\n        if (vec.x == 0.f) {\n            v.x = 0.f;\n        } else {\n            v.x = x / vec.x;\n        }\n        \n        if (vec.y == 0.f) {\n            v.y = 0.f;\n        } else {\n            v.y = y / vec.y;\n        }\n        return v;\n    }\n    \n    Vector operator / (float f) const {\n        Vector v;\n        if (f == 0.f) {\n            v.set(0.f, 0.f);\n        } else {\n            v.set(x / f, y / f);\n        }\n        return v;\n    }\n    \n    void operator += (const Vector& vec) {\n        x += vec.x;\n        y += vec.y;\n    }\n    \n    void operator -= (const Vector& vec) {\n        x -= vec.x;\n        y -= vec.y;\n    }\n    \n    void operator *= (const Vector& vec) {\n        x *= vec.x;\n        y *= vec.y;\n    }\n    \n    void operator /= (const Vector& vec) {\n        if (vec.x == 0.f) {\n            x = 0.f;\n        } else {\n            x /= vec.x;\n        }\n        \n        if (vec.y == 0.f) {\n            y = 0.f;\n        } else {\n            y /= vec.y;\n        }\n    }\n    \n    bool operator == (const Vector& vec) const {\n        if (x == vec.x && y == vec.y) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n};\n\n// ベクトル1をベクトル2に正射影したベクトルを求める\nstatic Vector getProjection(const Vector& vec1, const Vector& vec2) {\n    Vector vec(vec2.getUnit() * vec1.norm() * vec1.getCos(vec2));\n    return vec;\n}\n\n\nclass LineSegment {\nprivate:\n    Vector start; // 始点\n    Vector end; // 終点\n    \npublic:\n    //コンストラクタ\n    LineSegment () {}\n    \n    // 始点と終点を設定する\n    void setStartEnd(float sx, float sy, float ex, float ey) {\n        start.set(sx, sy);\n        end.set(ex, ey);\n    }\n    \n    // 始点を取得する\n    Vector getStart() const {\n        return start;\n    }\n    \n    //　終点を取得する\n    Vector getEnd() const {\n        return end;\n    }\n    \n    // 指定の線分を含むか\n    // このメソッドは線分同士が平行の時しか使用しない\n    bool isInLine(const LineSegment& l) const {\n        bool b1 = isPointInLine(l.getStart());\n        bool b2 = isPointInLine(l.getEnd());\n        if (b1 || b2) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    \n    // 指定の点を線分の中に含むか\n    bool isPointInLine(const Vector& p) const {\n        if (start == p) {\n            return true;\n        }\n        \n        Vector l1 = end - start;\n        Vector l2 = p - start;\n        Vector u1 = l1.getUnit();\n        Vector u2 = l2.getUnit();\n\n        if (u1 == u2 && l2.norm() <= l1.norm()) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    \n    // 指定の線分と交差しているか\n    // @return 0(交差していない), 1(交差している)\n    int isCross(const LineSegment& l) const {\n        Vector l1 = end - start;\n        float c1 = l1.cross(l.getStart() - start);\n        float c2 = l1.cross(l.getEnd() - start);\n        \n        Vector l2 = l.getEnd() - l.getStart();\n        float c3 = l2.cross(start - l.getStart());\n        float c4 = l2.cross(end - l.getStart());\n        \n        if (c1 * c2 == 0.f && c3 * c4 == 0.f) { // 平行のとき\n            LineSegment ls;\n            ls.setStartEnd(start.x, start.y, end.x, end.y);\n            if (isInLine(l) || l.isInLine(ls)) {\n                return 1;\n            }\n            return 0;\n        } else if ((c1 * c2 < 0.f && c3 * c4 <= 0.f)\n                   || (c1 * c2 <= 0.f && c3 * c4 < 0.f)\n                   || (c1 * c2 < 0.f && c3 * c4 < 0.f)) { // 交差するとき\n            return 1;\n        } else { // 交差しないとき\n            return 0;\n        }\n    }\n    \n    // 任意の点が線分の始点より外にあるか\n    bool isOutOfStart(const Vector& vec) const {\n        Vector p = end - start;\n        Vector q = vec - start;\n        float d = p.dot(q);\n        if (d < 0) { // 内積が負のとき\n            return true;\n        }\n        return false;\n    }\n    \n    // 任意の線分との距離を求める\n    float getDistance(const LineSegment& l) const {\n        if (isCross(l)) { // 交差しているとき\n            return 0.f;\n        }\n        float dis1 = getDistance(l.getStart());\n        float dis2 = getDistance(l.getEnd());\n        LineSegment ls;\n        ls.setStartEnd(start.x, start.y, end.x, end.y);\n        float dis3 = l.getDistance(ls.getStart());\n        float dis4 = l.getDistance(ls.getEnd());\n        float min1 = min(dis1, dis2);\n        float min2 = min(dis3, dis4);\n        return min(min1, min2);\n    }\n    \n    // 任意の点との距離を求める\n    float getDistance(const Vector& vec) const {\n        if (isPointInLine(vec)) { // 線分内に点を含むとき\n            return 0.f;\n        }\n        if (!isOutOfStart(vec)) { // 線分の始点より内側に点があるとき\n            Vector p = end - start;\n            Vector q = vec - start;\n            Vector proj = getProjection(q, p);\n            if (p.norm() > proj.norm()) { // 正射影したベクトルが線分より短いとき\n                return (q - proj).norm();\n            } else { // 正射影したベクトルが線分と等しいか、長いとき\n                return (vec - end).norm();\n            }\n        } else { // 線分の始点より外にあるとき\n            return (vec - start).norm();\n        }\n    }\n};\n\nint main() {\n    int n;\n    cin >> n;\n    \n    LineSegment l1, l2;\n    vector<float> result;\n    for (int i = 0; i < n; i++) {\n        float sx1, sy1, ex1, ey1, sx2, sy2, ex2, ey2;\n        cin >> sx1 >> sy1 >> ex1 >> ey1 >> sx2 >> sy2 >> ex2 >> ey2;\n        l1.setStartEnd(sx1, sy1, ex1, ey1);\n        l2.setStartEnd(sx2, sy2, ex2, ey2);\n        result.push_back(l1.getDistance(l2));\n    }\n    \n    for (int i = 0; i < result.size(); i++) {\n        printf(\"%.10f\\n\", result[i]);\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i,n) for (int (i)=(0);(i)<(int)(n);++(i))\nusing ll = long long;\n//using P = pair<int, int>;\nusing namespace std;\n\nconst double eps = 1e-10;\n#define equals(a, b) (fabs((a)-(b)) < eps)\n\n// 点\nstruct Point\n{\n    double x, y;\n    Point(double x=0, double y=0): x(x), y(y) {}\n    double norm()\n    {\n        return x*x+y*y;\n    }\n    double abs()\n    {\n        return sqrt(norm());\n    }\n\n    Point operator+(const Point& p)const\n    {\n        return Point(x + p.x, y + p.y);\n    }\n    Point operator-(const Point& p)const\n    {\n        return Point(x - p.x, y - p.y);\n    }\n    Point operator*(const double k)const\n    {\n        return Point(x * k, y * k);\n    }\n    Point operator/(const double k)const\n    {\n        return Point(x / k, y / k);\n    }\n    bool operator<(const Point& p)const\n    {\n        if (x != p.x)\n        {\n            return x < p.x;\n        }\n        return y < p.y;\n    }\n    bool operator==(const Point& p)const\n    {\n        return fabs(x - p.x) < eps and fabs(y - p.y) < eps;\n    }\n};\n\nusing Vector = Point;\n\n// 内積\ndouble dot(Vector a, Vector b)\n{\n    return a.x * b.x + a.y * b.y;\n}\n\n// 外積\ndouble cross(Vector a, Vector b)\n{\n    return a.x * b.y - a.y * b.x;\n}\n// 線分\nstruct Segment\n{\n    Segment(Point a=Point(), Point b=Point()):p1(a), p2(b) {}\n    Point p1, p2;\n};\nusing Line = Segment;\n\n// 円\nclass Circle\n{\npublic:\n    Point c;\n    double r;\n    Circle(Point c = Point(), double r = 0.0): c(c), r(r) {}\n};\n\n// 多角形\nusing Polygon = vector<Point>;\n\n\n// ベクトルaとbの直行判定\n// Verify\nbool isOrthogonal(Vector a, Vector b) {\n    return equals(dot(a, b), 0.0);\n}\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n    return isOrthogonal(a1-a2, b1-b2);\n}\nbool isOrthogonal(Segment s1, Segment s2) {\n    return equals(dot(s1.p2-s1.p1, s2.p2-s2.p1), 0.0);\n}\n\n// ベクトルaとbの平行判定\n// Verify\nbool isParallel(Vector a, Vector b) {\n    return equals(cross(a, b), 0.0);\n}\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n    return isParallel(a1-a2, b1-b2);\n}\nbool isParallel(Segment s1, Segment s2) {\n    return equals(cross(s1.p2-s1.p1, s2.p2-s2.p1), 0.0);\n}\n\n// 射影\n// verify\nPoint project(Segment s, Point p) {\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / base.norm();\n    return s.p1 + base * r;\n}\n\n// 反射\n// verify\nPoint reflect(Segment s, Point p) {\n    return p + (project(s, p) - p) * 2.0;\n}\n\n// ２点間の距離\ndouble getDistance(Point a, Point b) {\n    return (a-b).abs();\n}\n\n// 直線Lと、点Pの距離\n// verify\ndouble getDistanceLP(Line l, Point p)\n{\n    return abs(cross(l.p2 - l.p1, p - l.p1) / Point(l.p2 - l.p1).abs());\n}\n\n// 線分sと点pの距離\ndouble getDistanceSP(Segment s, Point p) {\n    if (dot(s.p2 - s.p1, p-s.p1) < 0.0) return (p - s.p1).abs();\n    if (dot(s.p1 - s.p2, p-s.p2) < 0.0) return (p - s.p2).abs();\n    return getDistanceLP((Line)s, p);\n}\n\n\n// 反時計回り\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nint ccw(Point p0, Point p1, Point p2) {\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if (cross(a, b) > eps) return COUNTER_CLOCKWISE;\n    if (cross(a, b) < -eps) return CLOCKWISE;\n    if (dot(a, b) < -eps) return ONLINE_BACK;\n    if (a.norm() < b.norm()) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\n// 線分の交差判定\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 and ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\nbool intersect(Segment s1, Segment s2) {\n    return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\n// 線分s1と線分s2の距離\ndouble getDistance(Segment s1, Segment s2) {\n    if (intersect(s1, s2)) return 0.0;\n    return min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)), min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\n// 線分の交点\nPoint getCrossPoint(Segment s1, Segment s2) {\n    Vector base = s2.p2 - s2.p1;\n    double d1 = abs(cross(base, s1.p1 - s2.p1));\n    double d2 = abs(cross(base, s1.p2 - s2.p1));\n    double t = d1 / (d1 + d2);\n    return s1.p1 + (s1.p2 - s1.p1) * t;\n}\n\n\n// 円cと線分lの交点\npair<Point, Point> getCrossPoints(Circle c, Line l) {\n    //assert(intersect(c, l)); ?\n    Vector pr = project(l, c.c);\n    Vector e = (l.p2 - l.p1) / (l.p2 - l.p1).abs();\n    double base = sqrt(c.r * c.r - (pr - c.c).norm());\n    return make_pair(pr + e * base, pr - e * base);\n}\n\n// 円と円の交点\ndouble arg(Vector p) { return atan2(p.y, p.x); }\nVector polar(double a, double r) { return Point(cos(r) * a, sin(r) * a); }\n\npair<Point, Point> getCrossPoints(Circle c1, Circle c2) {\n    // assert(intersect(c1, c2));\n    double d = (c1.c - c2.c).abs();\n    double a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2  * c1.r * d));\n    double t = arg(c2.c - c1.c);\n    return make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t-a));\n}\n\n// 点の内包\n// IN 2, ON 1, OUT 0\n\nint contains(Polygon g, Point p) {\n    int n = g.size();\n    bool x = false;\n    for (int i = 0; i < n; ++i) {\n        Point a = g[i] - p, b = g[(i + 1) % n] - p;\n        if (abs(cross(a, b)) < eps and dot(a, b) < eps) return 1;\n        if (a.y > b.y) swap(a, b);\n        if (a.y < eps and eps < b.y and cross(a, b) > eps) x = !x;\n    }\n    return (x ? 2 : 0);\n}\n\n// 凸包\nPolygon andrewScan(Polygon s) {\n    Polygon u, l;\n    if (s.size() < 3) return s;\n    sort(s.begin(), s.end());\n    u.push_back(s[0]);\n    u.push_back(s[1]);\n    l.push_back(s[s.size()-1]);\n    l.push_back(s[s.size()-2]);\n\n    for (int i = 2; i < s.size(); ++i) {\n        for (int n = u.size(); n >= 2 and ccw(u[n-2], u[n-1], s[i]) != CLOCKWISE; --n) {\n            u.pop_back();\n        }\n        u.push_back(s[i]);\n    }\n\n    for (int i = s.size()-3; i>=0; --i) {\n        for (int n = l.size(); n>=2 and ccw(l[n-2], l[n-1], s[i]) != CLOCKWISE; --n) {\n            l.pop_back();\n        }\n        l.push_back(s[i]);\n    }\n\n    reverse(l.begin(), l.end());\n    for (int i = u.size() - 2; i >= 1; --i) l.push_back(u[i]);\n    return l;\n}\n\n// 平面走査\n#define BOTTOM 0\n#define LEFT 1\n#define RIGHT 2\n#define TOP 3\n\nclass EndPoint {\npublic:\n    Point p;\n    int seg, st;\n    EndPoint() {}\n    EndPoint(Point p, int seg, int st) : p(p), seg(seg), st(st) {}\n\n    bool operator<(const EndPoint &ep) const {\n        if (p.y == ep.p.y) {\n            return st < ep.st;\n        }else return p.y < ep.p.y;\n    }\n};\n\nEndPoint EP[2 * 100000];\n\nint manhattanIntersection(vector<Segment> S) {\n    int n = S.size();\n\n    for (int i = 0, k = 0; i < n; ++i) {\n        if (S[i].p1.y == S[i].p2.y) {\n            if (S[i].p1.x > S[i].p2.x) swap(S[i].p1, S[i].p2);\n        } else if (S[i].p1.y > S[i].p2.y) swap(S[i].p1, S[i].p2);\n\n        if (S[i].p1.y == S[i].p2.y) {\n            EP[k++] = EndPoint(S[i].p1, i, LEFT);\n            EP[k++] = EndPoint(S[i].p2, i, RIGHT);\n        }\n        else {\n            EP[k++] = EndPoint(S[i].p1, i, BOTTOM);\n            EP[k++] = EndPoint(S[i].p2, i, TOP);\n        }\n    }\n\n    sort(EP, EP + (2 * n));\n\n    set<int> BT;\n    BT.insert(100000001); // 番兵\n    int cnt = 0;\n\n    for (int i = 0; i < 2 * n; ++i) {\n        if (EP[i].st == TOP) {\n            BT.erase(EP[i].p.x);\n        }\n        else if (EP[i].st == BOTTOM) {\n            BT.insert(EP[i].p.x);\n        }\n        else if (EP[i].st == LEFT) {\n            auto b = lower_bound(BT.begin(), BT.end(), S[EP[i].seg].p1.x);\n            auto e = upper_bound(BT.begin(), BT.end(), S[EP[i].seg].p2.x);\n            cnt += distance(b, e);\n        }\n    }\n\n    return cnt;\n\n}\n\nint main() {\n\n    int q;\n    cin >> q;\n    rep(i, q) {\n        int x1, y1, x2, y2, x3, y3, x4, y4;\n        cin >> x1 >> y1 >> x2 >> y2 >> x3 >> y3 >> x4 >> y4;\n\n        Segment s1(Point(x1, y1), Point(x2, y2));\n        Segment s2(Point(x3, y3), Point(x4, y4));\n\n        printf(\"%.10f\\n\", getDistance(s1, s2));\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#define rep(i, n) for (int i = 0; i < (int)(n); i++)\n#define ALL(v) v.begin(), v.end()\ntypedef long long ll;\n\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n\n// cout<<fixed<<setprecision(15)\nstatic const int COUNTER_CLOCKWISE=1;\nstatic const int CLOCKWISE=-1;\nstatic const int ONLINE_BACK=2;\nstatic const int ONLINE_FRONT=-2;\nstatic const int ON_SEGMENT=0;\n\n//点またはベクトル\nclass Point{\n  public:\n  double x,y;\n  \n  Point(double x=0, double y=0): x(x),y(y) {}\n  \n  Point operator+(Point p){return Point(x+p.x,y+p.y);}\n  Point operator-(Point &p){return Point(x-p.x,y-p.y);}\n  Point operator*(double a){return Point(a*x,a*y);}\n  Point operator/(double a){return Point(x/a,y/a);}\n  \n  bool operator<(const Point &p) const{\n    return x != p.x ? x<p.x : y<p.y;\n  }\n  \n  bool operator==(const Point &p) const{\n    return fabs(x-p.x)<EPS && fabs(y-p.y)<EPS;\n  }\n};\ntypedef Point Vector;\n//ベクトルの二乗和と絶対値\ndouble norm(Point p){return p.x*p.x+p.y*p.y;}\ndouble abs(Point p){return sqrt(norm(p));}\n//線分または直線\nstruct Segment{Point p1,p2;};\ntypedef Segment Line;\n//円\nclass Circle{\npublic:\n  Point c;\n  double r;\n  Circle(Point c=Point(), double r=0.0): c(c), r(r) {}\n};\n//多角形\ntypedef vector<Point> Polygon;\n//内積\ndouble dot(Vector a,Vector b){return a.x*b.x+a.y*b.y;}\n//外積\ndouble cross(Vector a,Vector b){return a.x*b.y-a.y*b.x;}\n//直交判定\nbool isOrthgonal(Vector a,Vector b){return equals(dot(a,b), 0.0);}\n//平行判定\nbool isParallel(Vector a,Vector b){return equals(cross(a,b), 0.0);}\n//射影\nPoint project(Segment s,Point p){\n  Vector base=s.p2-s.p1;\n  double r=dot(p-s.p1,base)/norm(base);\n  return s.p1+base*r;\n}\n//反射\nPoint reflect(Segment s,Point p){return p+(project(s,p)-p)*2.0;}\n//反時計周りCounter-Clockwise\nint ccw(Point p0,Point p1,Point p2){\n  Vector a=p1-p0;\n  Vector b=p2-p0;\n  if(cross(a,b)>EPS) return COUNTER_CLOCKWISE;\n  if(cross(a,b)<-EPS) return CLOCKWISE;\n  if(dot(a,b)<-EPS) return ONLINE_BACK;\n  if(norm(a)<norm(b)) return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\n//線分の交差判定\nbool intersect(Point p1,Point p2,Point p3,Point p4){\n  return (ccw(p1,p2,p3)*ccw(p1,p2,p4)<=0 &&ccw(p3,p4,p1)*ccw(p3,p4,p2)<=0);\n}\nbool intersect(Segment s1,Segment s2){return intersect(s1.p1,s1.p2,s2.p1,s2.p2);}\n//点と点の距離\ndouble getDisPP(Point a,Point b){return abs(a-b);}\n//直線と点の距離\ndouble getDisLP(Line l,Point p){return abs(cross(l.p2-l.p1,p-l.p1))/abs(l.p2-l.p1);}\n//線分と点の距離\ndouble getDisSP(Segment s,Point p){\n  if(dot(s.p2-s.p1,p-s.p1)<0.0) return abs(p-s.p1);\n  if(dot(s.p1-s.p2,p-s.p2)<0.0) return abs(p-s.p2);\n  return getDisLP(s,p);\n}\n//線分と線分の距離\ndouble getDisSS(Segment s1,Segment s2){\n  if(intersect(s1,s2)) return 0.0;\n  return min(min(getDisSP(s1,s2.p1),getDisSP(s1,s2.p2)),\n             min(getDisSP(s2,s1.p1),getDisSP(s2,s1.p2)));\n}\n\nint main(){\n  Point p0,p1,p2,p3;\n  int q;\n  cin>>q;\n  \n  Segment s1,s2;\n  rep(i,q){\n    cin>>p0.x>>p0.y>>p1.x>>p1.y>>p2.x>>p2.y>>p3.x>>p3.y;\n    s1.p1=p0,s1.p2=p1,s2.p1=p2,s2.p2=p3;\n    cout<<fixed<<setprecision(15)<<getDisSS(s1,s2)<<endl;\n  }\n    \n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n \nusing ll = long long; using ld = long double; using ull = unsigned long long; using uint = unsigned int;\nusing vi  = vector<int>; using vb  = vector<bool>; using vd  = vector<double>; using vl  = vector<ll>;\nusing vvi = vector<vi>;  using vvb = vector<vb>;   using vvd = vector<vd>;     using vvl = vector<vl>;\n \n#define REP(i,n) for(ll i=0; i<(n); ++i)\n#define FOR(i,b,n) for(ll i=(b); i<(n); ++i)\n#define ALL(v) (v).begin(), (v).end()\n#define TEN(x) ((ll)1e##x)\n \ntemplate<typename T> inline string join(const vector<T>& vec, string sep = \" \") { stringstream ss; REP(i, vec.size()) ss << vec[i] << ( i+1 == vec.size() ? \"\" : sep ); return ss.str(); }\n \n \n///////////////\n \n#define EPS (1e-10)\n#define NEXT(x, i) (x[(i + 1) % x.size()])\n \ntemplate<class T> using CR = const T &;\nusing P = complex<ld>;\nusing G = vector<P>;\n \nint sgn(ld a, ld b = 0) {\n    if (a > b + EPS) return 1;\n    if (a < b - EPS) return -1;\n    return 0;\n}\n \nld dot(P a, P b) { return real(conj(a)*b); }\nld cross(P a, P b) { return imag(conj(a)*b); }\n \nint ccw(P a, P b, P c) {\n    b -= a;\n    c -= a;\n    if (sgn(cross(b, c))) return sgn(cross(b, c)); // clockwise or counter clockwise\n    if (sgn(dot(b, c)) == -1) return 2;            // c--a--b\n    if (sgn(norm(b), norm(c)) == -1) return -2;    // a--b--c\n    return 0;                                      // a--c--b\n}\n \nstruct L : public vector<P> {\n    L(P a, P b) { push_back(a); push_back(b); }\n};\n\nbool iLL(CR<L> l, CR<L> m, bool strict = false) {\n\tif (sgn(cross(l[1] - l[0], m[1] - m[0]))) return true;   // not-parallel\n\treturn !strict && !sgn(cross(l[1] - l[0], m[0] - l[0])); // same line\n}\nbool iLS(CR<L> l, CR<L> s, bool strict = false) {\n\tint c = sgn(cross(l[1] - l[0], s[0] - l[0])) * sgn(cross(l[1] - l[0], s[1] - l[0]));\n\treturn c <= 0 && (!strict || c == -1);\n}\nbool iSS(CR<L> s, CR<L> t, bool strict = false) {\n\tint ccwa = ccw(s[0], s[1], t[0]) * ccw(s[0], s[1], t[1]);\n\tint ccwb = ccw(t[0], t[1], s[0]) * ccw(t[0], t[1], s[1]);\n\treturn ccwa <= 0 && (!strict || ccwa == -1)\n\t\t&& ccwb <= 0 && (!strict || ccwb == -1);\n}\nld dLP(CR<L> l, P p) { return abs(cross((l[1] - l[0]), p - l[0]) / (l[1] - l[0])); }\nld dSP(CR<L> s, P p) { return max(dLP(s, p), min(abs(p - s[0]), abs(p - s[1]))); }\nld dLL(CR<L> a, CR<L> b) { return iLL(a, b) ? 0 : dLP(a, b[0]); }\nld dLS(CR<L> a, CR<L> b) { return iLS(a, b) ? 0 : min(dLP(a, b[0]), dLP(a, b[1])); }\nld dSS(CR<L> a, CR<L> b) { return iSS(a, b) ? 0 : min(min(dSP(a, b[0]), dSP(a, b[1])), min(dSP(b, a[0]), dSP(b, a[1]))); }\n\n//////////////\n \nint main() {\n#ifdef INPUT_FROM_FILE\n    ifstream cin(\"sample.in\");\n    ofstream cout(\"sample.out\");\n#endif\n    cin.tie(0);\n    ios_base::sync_with_stdio(false);\n    cout << fixed << setprecision(30);\n\tll n; cin >> n;\n\tREP(i, n) {\n\t\tld x0, y0, x1, y1, x2, y2, x3, y3;\n\t\tcin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n\t\tcout << dSS({ { x0, y0 }, { x1, y1 } }, { { x2, y2 }, { x3, y3 } }) << endl;\n\t}\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define NDEBUG 1\n#include <cmath>\n#include <complex>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\n\ntypedef long double Real;\ntypedef complex<Real> Point;\n#define PCR Point const &\n#define X real()\n#define Y imag()\n\nconst Real EPS = 1e-10;\nconst Real INF = 1e100;\nconst Real PI = acos(-1);\n\nstruct Segment {\n    Point p[2];\n    Segment (PCR a = Point(), PCR b = Point()){\n        p[0] = a, p[1] = b;\n    }\n    Point & operator [] (int k) { return p[k]; }\n    Point const & operator [] (int k) const { return p[k]; }\n};\ntypedef vector<Point> Polygon;\nstruct Circle { Real radius; Point center; };\n\nReal dot(PCR a, PCR b){\n    return a.X*b.X + a.Y*b.Y;\n}\nReal cross(PCR a, PCR b){\n    return a.X*b.Y - a.Y*b.X;\n}\n\nPoint pSP(Segment const & s, PCR p){\n    Point base = s[1] - s[0];\n    Real r = dot(p - s[0], base) / norm(base);\n    return s[0] + base * r;\n}\n\nPoint rSP(Segment const & s, PCR p){\n    Point v = pSP(s,p) - p;\n    return p + v * Real(2);\n}\n\nenum { LEFT = 1, RIGHT = -1, BACK = 2, FRONT = -2, ON = 0 };\n// Includes end-points. Comment in to exclude.\nint ccw(PCR x, PCR p, PCR q){\n    Point a = p - x, b = q - x;\n    if(cross(a,b) > EPS) return LEFT;\n    if(cross(a,b) < -EPS) return RIGHT;\n    if(/* abs(a) < EPS || */ dot(a,b) < -EPS) return BACK;\n    if(/* abs(b) < EPS || */ norm(a) < norm(b)) return FRONT;\n    return ON;\n}\n\nbool isParallel(Segment const & s, Segment const & t){\n    return abs(cross(s[1]-s[0],t[1]-t[0])) < EPS;\n}\n\nbool isOrthogonal(Segment const & s, Segment const & t){\n    return abs(dot(s[1]-s[0],t[1]-t[0])) < EPS;\n}\n\n// Includes end-points. Modify CCW to exclude\nbool iSS(Segment const & s, Segment const & t){\n    bool f1 = ccw(s[0],s[1],t[0]) * ccw(s[0],s[1],t[1]) <= 0;\n    bool f2 = ccw(t[0],t[1],s[0]) * ccw(t[0],t[1],s[1]) <= 0;\n    return f1 && f2;\n}\n\nbool iSP(Segment const & s, PCR p){\n    return ccw(s[0],s[1],p) == ON;\n}\n\nPoint cSS(Segment const & s, Segment const & t){\n    assert(iSS(s,t));\n    assert(!isParallel(s,t));\n    Real d = cross(t[1]-t[0], s[1]-s[0]);\n    return s[0] + (s[1] - s[0]) * cross(t[1]-t[0], t[1]-s[0]) * (1.0 / d);\n}\n\nReal dSP(const Segment & s, PCR p) {\n    const Point r = pSP(s, p);\n    if(iSP(s,r)) return abs(r-p);\n    return min(abs(s[0]-p), abs(s[1]-p));\n}\n\nReal dSS(Segment const & s, Segment const & t){\n    if(iSS(s,t)) return Real(0);\n    return min(min(dSP(s,t[0]), dSP(s,t[1])), min(dSP(t,s[0]), dSP(t,s[1])));\n}\n\n#include <iostream>\n#include <cstdio>\n\nint main(){\n    Segment s,t;\n    Real x,y;\n    int n; cin >> n;\n    for(int i=0;i<n;i++){\n        cin >> x >> y;\n        s[0] = Point(x,y);\n        cin >> x >> y;\n        s[1] = Point(x,y);\n        cin >> x >> y;\n        t[0] = Point(x,y);\n        cin >> x >> y;\n        t[1] = Point(x,y);\n        Real d = dSS(s,t);\n        printf(\"%.10Lf\\n\", d);\n    }\n}"
  },
  {
    "language": "C++",
    "code": "//\n// 線分と線分の距離\n//\n// verified:\n//   AOJ Course CGL_2_D Segments/Lines - Distance\n//     http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_D&lang=jp\n//\n\n\n#include <iostream>\n#include <vector>\n#include <cmath>\n#include <iomanip>\nusing namespace std;\n\n\n/* Point */\nusing DD = double;\nconst DD INF = 1LL<<60;      // to be set appropriately\nconst DD EPS = 1e-10;        // to be set appropriately\nconst DD PI = acos(-1.0);\nDD torad(int deg) {return (DD)(deg) * PI / 180;}\nDD todeg(DD ang) {return ang * 180 / PI;}\n\nstruct Point {\n    DD x, y;\n    Point(DD x = 0.0, DD y = 0.0) : x(x), y(y) {}\n    friend ostream& operator << (ostream &s, const Point &p) {return s << '(' << p.x << \", \" << p.y << ')';}\n};\n\ninline Point operator + (const Point &p, const Point &q) {return Point(p.x + q.x, p.y + q.y);}\ninline Point operator - (const Point &p, const Point &q) {return Point(p.x - q.x, p.y - q.y);}\ninline Point operator * (const Point &p, DD a) {return Point(p.x * a, p.y * a);}\ninline Point operator * (DD a, const Point &p) {return Point(a * p.x, a * p.y);}\ninline Point operator * (const Point &p, const Point &q) {return Point(p.x * q.x - p.y * q.y, p.x * q.y + p.y * q.x);}\ninline Point operator / (const Point &p, DD a) {return Point(p.x / a, p.y / a);}\ninline Point conj(const Point &p) {return Point(p.x, -p.y);}\ninline Point rot(const Point &p, DD ang) {return Point(cos(ang) * p.x - sin(ang) * p.y, sin(ang) * p.x + cos(ang) * p.y);}\ninline Point rot90(const Point &p) {return Point(-p.y, p.x);}\ninline DD cross(const Point &p, const Point &q) {return p.x * q.y - p.y * q.x;}\ninline DD dot(const Point &p, const Point &q) {return p.x * q.x + p.y * q.y;}\ninline DD norm(const Point &p) {return dot(p, p);}\ninline DD abs(const Point &p) {return sqrt(dot(p, p));}\ninline DD amp(const Point &p) {DD res = atan2(p.y, p.x); if (res < 0) res += PI*2; return res;}\ninline bool eq(const Point &p, const Point &q) {return abs(p - q) < EPS;}\ninline bool operator < (const Point &p, const Point &q) {return (abs(p.x - q.x) > EPS ? p.x < q.x : p.y < q.y);}\ninline bool operator > (const Point &p, const Point &q) {return (abs(p.x - q.x) > EPS ? p.x > q.x : p.y > q.y);}\ninline Point operator / (const Point &p, const Point &q) {return p * conj(q) / norm(q);}\n\n/* Line */\nstruct Line : vector<Point> {\n    Line(Point a = Point(0.0, 0.0), Point b = Point(0.0, 0.0)) {\n        this->push_back(a);\n        this->push_back(b);\n    }\n    friend ostream& operator << (ostream &s, const Line &l) {return s << '{' << l[0] << \", \" << l[1] << '}';}\n};\n\n\n/* projection, is_intersect, distnce */\nint ccw(const Point &a, const Point &b, const Point &c) {\n    if (cross(b-a, c-a) > EPS) return 1;\n    if (cross(b-a, c-a) < -EPS) return -1;\n    if (dot(b-a, c-a) < 0) return 2;\n    if (norm(b-a) < norm(c-a)) return -2;\n    return 0;\n}\n\nPoint proj(const Point &p, const Line &l) {\n    DD t = dot(p - l[0], l[1] - l[0]) / norm(l[1] - l[0]);\n    return l[0] + (l[1] - l[0]) * t;\n}\nPoint refl(const Point &p, const Line &l) {\n    return p + (proj(p, l) - p) * 2;\n}\nbool isinterPL(const Point &p, const Line &l) {\n    return (abs(p - proj(p, l)) < EPS);\n}\nbool isinterPS(const Point &p, const Line &s) {\n    return (ccw(s[0], s[1], p) == 0);\n}\nbool isinterLL(const Line &l, const Line &m) {\n    return (abs(cross(l[1] - l[0], m[1] - m[0])) > EPS ||\n            abs(cross(l[1] - l[0], m[0] - l[0])) < EPS);\n}\nbool isinterSS(const Line &s, const Line &t) {\n    if (eq(s[0], s[1])) return isinterPS(s[0], t);\n    if (eq(t[0], t[1])) return isinterPS(t[0], s);\n    return (ccw(s[0], s[1], t[0]) * ccw(s[0], s[1], t[1]) <= 0 &&\n            ccw(t[0], t[1], s[0]) * ccw(t[0], t[1], s[1]) <= 0);\n}\nDD distancePL(const Point &p, const Line &l) {\n    return abs(p - proj(p, l));\n}\nDD distancePS(const Point &p, const Line &s) {\n    Point h = proj(p, s);\n    if (isinterPS(h, s)) return abs(p - h);\n    return min(abs(p - s[0]), abs(p - s[1]));\n}\nDD distanceLL(const Line &l, const Line &m) {\n    if (isinterLL(l, m)) return 0;\n    else return distancePL(m[0], l);\n}\nDD distanceSS(const Line &s, const Line &t) {\n    if (isinterSS(s, t)) return 0;\n    else return min(min(distancePS(s[0], t), distancePS(s[1], t)), min(distancePS(t[0], s), distancePS(t[1], s)));\n}\n\n\n\nint main() {\n    int Q; cin >> Q;\n    for (int _ = 0; _ < Q; ++_) {\n        Point x1, y1, x2, y2;\n        cin >> x1.x >> x1.y >> y1.x >> y1.y >> x2.x >> x2.y >> y2.x >> y2.y;\n        Line s(x1, y1), t(x2, y2);\n        cout << fixed << setprecision(10) << distanceSS(s, t) << endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cmath>\nusing namespace std;\n#define db double\n#define zero(x) (fabs(x)<eps)\n#define sgn(x) (zero(x)?0:((x)>0?1:-1))\nconst db eps=1e-10;\nstruct point{\n    db x,y;\n    point(){}\n    point(db x,db y):x(x),y(y){}\n    point operator + (point B){ return point(x+B.x,y+B.y); }\n    point operator - (point B){ return point(x-B.x,y-B.y); }\n    point operator * (db k){ return point(k*x,k*y); }\n    db operator * (point B){ return x*B.y-y*B.x; }\n    db operator ^ (point B){ return x*B.x+y*B.y; }\n    bool operator < (point B){ return (y>0)!=(B.y>0)?y>0:((*this)*B)>0; }\n};\ndb dis2(point A,point B){ return (A.x-B.x)*(A.x-B.x)+(A.y-B.y)*(A.y-B.y); }\nstruct line{\n    point A,B;\n    line(){}\n    line(point A,point B):A(A),B(B){}\n};\npoint projection(line l,point P){\n    point dir=l.B-l.A; P=P-l.A;\n    return dir*((P^dir)/dis2(l.A,l.B))+l.A;\n}\npoint reflection(line l,point P){\n    return projection(l,P)*2-P;\n}\nint direction(point P0,point P1,point P2){\n    db det=(P2-P0)*(P1-P0); return sgn(det);\n}\nbool parallel(line l1,line l2){\n    return zero((l1.B-l1.A)*(l2.B-l2.A));\n}\nbool orthogonal(line l1,line l2){\n    return zero((l1.B-l1.A)^(l2.B-l2.A));\n}\nbool intersect(line l1,line l2){\n    int d1=direction(l1.A,l1.B,l2.A),d2=direction(l1.A,l1.B,l2.B);\n    int d3=direction(l2.A,l2.B,l1.A),d4=direction(l2.A,l2.B,l1.B);\n    if (d1*d2>0||d3*d4>0) return false;\n    if (l1.A.x>l1.B.x) swap(l1.A.x,l1.B.x);\n    if (l1.A.y>l1.B.y) swap(l1.A.y,l1.B.y);\n    if (l2.A.x>l2.B.x) swap(l2.A.x,l2.B.x);\n    if (l2.A.y>l2.B.y) swap(l2.A.y,l2.B.y);\n    return !(l1.B.x<l2.A.x||l2.B.x<l1.A.x||l1.B.y<l2.A.y||l2.B.y<l1.A.y);\n}\npoint cross_point(line l1,line l2){\n    db s1=fabs((l2.B-l2.A)*(l1.A-l2.A)),s2=fabs((l2.B-l2.A)*(l1.B-l2.A));\n    return l1.A+(l1.B-l1.A)*(s1/(s1+s2));\n}\ndouble dis(line l,point P){\n    point proj=projection(l,P);\n    if (min(l.A.x,l.B.x)-eps<proj.x&&proj.x<max(l.A.x,l.B.x)+eps)\n        if (min(l.A.y,l.B.y)-eps<proj.y&&proj.y<max(l.A.y,l.B.y)+eps)\n            return sqrt(dis2(P,proj));\n    return sqrt(min(dis2(P,l.A),dis2(P,l.B)));\n}\ndouble distance(line l1,line l2){\n    if (intersect(l1,l2)) return 0;\n    return min(min(dis(l1,l2.A),dis(l1,l2.B)),min(dis(l2,l1.A),dis(l2,l1.B)));\n}\nint main(){\n    int q; scanf(\"%d\",&q);\n    while (q--){\n        db x1,y1,x2,y2; line l1,l2;\n        scanf(\"%lf%lf%lf%lf\",&x1,&y1,&x2,&y2); l1=line(point(x1,y1),point(x2,y2));\n        scanf(\"%lf%lf%lf%lf\",&x1,&y1,&x2,&y2); l2=line(point(x1,y1),point(x2,y2));\n        printf(\"%.9f\\n\",distance(l1,l2));\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define int long long   // <-----!!!!!!!!!!!!!!!!!!!\n\n#define rep(i,n) for (int i=0;i<(n);i++)\n#define rep2(i,a,b) for (int i=(a);i<(b);i++)\n#define rrep(i,n) for (int i=(n)-1;i>=0;i--)\n#define rrep2(i,a,b) for (int i=(b)-1;i>=(a);i--)\n#define all(a) (a).begin(),(a).end()\n\ntypedef long long ll;\ntypedef pair<int, int> Pii;\ntypedef tuple<int, int, int> TUPLE;\ntypedef vector<int> V;\ntypedef vector<V> VV;\ntypedef vector<VV> VVV;\n\ntypedef complex<double> P;\nconst double EPS = 1e-10;\nconst double INF = 1e12;\n\ndouble cross(P a, P b) {\n    return imag(conj(a) * b);\n}\n\ndouble dot(P a, P b) {\n    return real(conj(a) * b);\n}\n\nstruct L {\n    P a, b, v;\n    L(){}\n    L(P _a, P _b) {a = _a, b = _b, v = b - a;}\n    L(double _ax, double _ay, double _bx, double _by) {\n        a = P(_ax, _ay), b = P(_bx, _by), v = b - a;\n    }\n};\n\n// +1: counter-clockwise\n// -1: clockwise\n// +2: online_back\n// -2: online_front\n// 0: on_segment\nint ccw(P p0, P p1, P p2) {\n    if (cross(p1 - p0, p2 - p0) > 0) return +1;\n    if (cross(p1 - p0, p2 - p0) < 0) return -1;\n    if (dot(p1 - p0, p2 - p0) < 0) return +2;\n    if (dot(p0 - p1, p2 - p1) < 0) return -2;\n    return 0;\n}\n\nbool intersectSS(L l1, L l2) {\n    return (ccw(l1.a, l1.b, l2.a) * ccw(l1.a, l1.b, l2.b) <= 0 &&\n            ccw(l2.a, l2.b, l1.a) * ccw(l2.a, l2.b, l1.b) <= 0);\n}\n\ndouble distanceLP(L l, P p) {\n    return abs(cross(l.v, p - l.a)) / abs(l.v);\n}\n\ndouble distanceSP(L l, P p) {\n    if (dot(l.v, p - l.a) < 0) return abs(p - l.a);\n    if (dot(-l.v, p - l.b) < 0) return abs(p - l.b);\n    return distanceLP(l, p);\n}\n\ndouble distanceSS(L l1, L l2) {\n    if (intersectSS(l1, l2)) return 0;\n    double d = INF;\n    d = min(d, distanceSP(l1, l2.a));\n    d = min(d, distanceSP(l1, l2.b));\n    d = min(d, distanceSP(l2, l1.a));\n    d = min(d, distanceSP(l2, l1.b));\n    return d;\n}\n\nsigned main() {\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(0);\n\n    int q;\n    cin >> q;\n    while (q--) {\n        double v[4][2];\n        rep(i, 4) rep(j, 2) cin >> v[i][j];\n        L l1(v[0][0], v[0][1], v[1][0], v[1][1]);\n        L l2(v[2][0], v[2][1], v[3][0], v[3][1]);\n        printf(\"%.10f\\n\", distanceSS(l1, l2));\n    }\n\n}"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <cmath>\n#include <complex>\n#include <iomanip>\n#include <iostream>\n#include <vector>\nusing namespace std;\n\nconst double EPS = 1e-8, PI = acos(-1);\n\ninline bool eq(double a, double b) {\n  return fabs(b - a) < EPS;\n}\n\nusing Point = complex<double>;\nistream &operator>>(istream &is, Point &p) {\n  double a, b;\n  is >> a >> b;\n  p = Point(a, b);\n  return is;\n}\nostream &operator<<(ostream &os, Point &p) {\n  os << fixed << setprecision(10) << p.real() << \" \" << p.imag();\n}\n\nnamespace std {\nbool operator<(const Point &a, const Point &b) {\n  return a.real() != b.real() ? a.real() < b.real() : a.imag() < b.imag();\n}\n} // namespace std\n\ndouble cross(const Point &a, const Point &b) {\n  return a.real() * b.imag() - a.imag() * b.real();\n}\n\ndouble dot(const Point &a, const Point &b) {\n  return a.real() * b.real() + a.imag() * b.imag();\n}\n\ndouble RadianToDegree(double r) {\n  return (r * 180.0 / acos(-1));\n}\n\ndouble DegreeToRadian(double d) {\n  return (d * acos(-1) / 180.0);\n}\n\ndouble GetAngle(const Point &a, const Point &b, const Point &c) {\n  const Point v(b - a), w(c - b);\n  double alpha = atan2(v.imag(), v.real()), beta = atan2(w.imag(), w.real());\n  if (alpha > beta) swap(alpha, beta);\n  double theta = (beta - alpha);\n  return min(theta, 2 * acos(-1) - theta);\n}\n\nstruct Line {\n  Point a, b;\n\n  Line(){};\n  Line(Point a, Point b) : a(a), b(b){};\n\n  // Ax + By = C\n  Line(double A, double B, double C) {\n    if (eq(A, 0)) {\n      a = Point(0, C / B);\n      b = Point(1, C / B);\n    } else if (eq(B, 0)) {\n      a = Point(C / A, 0);\n      b = Point(C / A, 1);\n    } else {\n      a = Point(0, C / B);\n      b = Point(C / A, 0);\n    }\n  }\n\n  friend ostream &operator<<(ostream &os, Line &p) {\n    return os << p.a << \" to \" << p.b;\n  }\n\n  friend istream &operator>>(istream &is, Line &a) {\n    return is >> a.a >> a.b;\n  }\n};\n\nstruct Segment {\n  Point a, b;\n\n  Segment(){};\n  Segment(Point a, Point b) : a(a), b(b){};\n\n  friend ostream &operator<<(ostream &os, Segment &p) {\n    return os << p.a << \" to \" << p.b;\n  }\n\n  friend istream &operator>>(istream &is, Segment &a) {\n    return is >> a.a >> a.b;\n  }\n};\n\nstruct Circle {\n  Point p;\n  double r;\n\n  Circle(){};\n\n  Circle(Point p, double r) : p(p), r(r){};\n};\n\nusing Polygon = vector<Point>;\nusing Segments = vector<Segment>;\nusing Lines = vector<Line>;\nusing Circles = vector<Circle>;\nusing PointPoint = pair<Point, Point>;\n\nint ccw(const Point &a, Point b, Point c) {\n  b = b - a, c = c - a;\n  if (cross(b, c) > EPS) return +1;  // \"COUNTER_CLOCKWISE\"\n  if (cross(b, c) < -EPS) return -1; // \"CLOCKWISE\"\n  if (dot(b, c) < 0) return +2;      // \"ONLINE_BACK\"\n  if (norm(b) < norm(c)) return -2;  // \"ONLINE_FRONT\"\n  return 0;                          // \"ON_SEGMENT\"\n}\n\nbool Parallel(const Line &a, const Line &b) {\n  return abs(cross(a.b - a.a, b.b - b.a)) < EPS;\n}\n\nbool Orthogonal(const Line &a, const Line &b) {\n  return abs(dot(a.a - a.b, b.a - b.b)) < EPS;\n}\n\nPoint Projection(const Line &l, const Point &p) {\n  double t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n  return l.a + (l.a - l.b) * t;\n}\nPoint Projection(const Segment &l, const Point &p) {\n  double t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n  return l.a + (l.a - l.b) * t;\n}\n\nPoint Reflection(const Line &l, const Point &p) {\n  return p + (Projection(l, p) - p) * 2.0;\n}\n\ndouble Distance(const Point &a, const Point &b) {\n  return abs(a - b);\n}\n\ndouble Distance(const Line &l, const Point &p) {\n  return abs(p - Projection(l, p));\n}\n\nbool Intersect(const Line &l, const Line &m);\ndouble Distance(const Line &l, const Line &m) {\n  return Intersect(l, m) ? 0 : Distance(l, m.a);\n}\n\nbool Intersect(const Segment &s, const Point &p);\ndouble Distance(const Segment &s, const Point &p) {\n  Point r = Projection(s, p);\n  if (Intersect(s, r)) return abs(r - p);\n  return min(abs(s.a - p), abs(s.b - p));\n}\n\nbool Intersect(const Segment &s, const Segment &t);\ndouble Distance(const Segment &a, const Segment &b) {\n  if (Intersect(a, b)) return 0;\n  return min(min(Distance(a, b.a), Distance(a, b.b)), min(Distance(b, a.a), Distance(b, a.b)));\n}\n\nbool Intersect(const Line &l, const Segment &s);\ndouble Distance(const Line &l, const Segment &s) {\n  if (Intersect(l, s)) return 0;\n  return min(Distance(l, s.a), Distance(l, s.b));\n}\n\nbool Intersect(const Line &l, const Point &p) {\n  return abs(ccw(l.a, l.b, p)) != 1;\n}\n\nbool Intersect(const Line &l, const Line &m) {\n  return abs(cross(l.b - l.a, m.b - m.a)) > EPS || abs(cross(l.b - l.a, m.b - l.a)) < EPS;\n}\n\nbool Intersect(const Segment &s, const Point &p) {\n  return ccw(s.a, s.b, p) == 0;\n}\n\nbool Intersect(const Line &l, const Segment &s) {\n  return cross(l.b - l.a, s.a - l.a) * cross(l.b - l.a, s.b - l.a) < EPS;\n}\n\nbool Intersect(const Segment &s, const Segment &t) {\n  return ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 && ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0;\n}\n\ndouble Distance(const Line &l, const Point &p);\nbool Intersect(const Circle &c, const Line &l) {\n  return Distance(l, c.p) <= c.r + EPS;\n}\n\nbool Intersect(const Circle &c, const Point &p) {\n  return abs(abs(p - c.p) - c.r) < EPS;\n}\n\nint Intersect(const Circle &c, const Segment &l) {\n  if (norm(Projection(l, c.p) - c.p) - c.r * c.r > EPS) return 0;\n  const double d1 = abs(c.p - l.a), d2 = abs(c.p - l.b);\n  if (d1 < c.r + EPS && d2 < c.r + EPS) return 0;\n  if (d1 < c.r - EPS && d2 > c.r + EPS || d1 > c.r + EPS && d2 < c.r - EPS) return 1;\n  const Point h = Projection(l, c.p);\n  if (dot(l.a - h, l.b - h) < 0) return 2;\n  return 0;\n}\n\nPoint Crosspoint(const Line &l, const Line &m) {\n  double A = cross(l.b - l.a, m.b - m.a);\n  double B = cross(l.b - l.a, l.b - m.a);\n  if (abs(A) < EPS && abs(B) < EPS) return m.a;\n  return m.a + (m.b - m.a) * B / A;\n}\n\nPoint Crosspoint(const Segment &l, const Segment &m) {\n  double A = cross(l.b - l.a, m.b - m.a);\n  double B = cross(l.b - l.a, l.b - m.a);\n  if (abs(A) < EPS && abs(B) < EPS) return m.a;\n  return m.a + (m.b - m.a) * B / A;\n}\n\nPointPoint Crosspoint(const Circle &c, const Line l) {\n  Point hp = Projection(l, c.p), h = hp - c.p;\n  const double d2 = norm(h);\n  Point v = (l.b - l.a) * sqrt(c.r * c.r - d2) / abs(l.b - l.a);\n  return PointPoint(hp - v, hp + v);\n}\n\nPointPoint Crosspoint(const Circle &c, const Segment &l) {\n  Line aa = Line(l.a, l.b);\n  if (Intersect(c, l) == 2) return Crosspoint(c, aa);\n  PointPoint ret = Crosspoint(c, aa);\n  if (dot(l.a - ret.first, l.b - ret.first) < 0)\n    ret.second = ret.first;\n  else\n    ret.first = ret.second;\n  return ret;\n}\n\nPointPoint Crosspoint(const Circle &c1, const Circle &c2) {\n  double d = abs(c1.p - c2.p);\n  double a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n  double t = atan2(c2.p.imag() - c1.p.imag(), c2.p.real() - c1.p.real());\n  Point p1 = c1.p + Point(cos(t + a) * c1.r, sin(t + a) * c1.r);\n  Point p2 = c1.p + Point(cos(t - a) * c1.r, sin(t - a) * c1.r);\n  return (PointPoint(p1, p2));\n}\n\nbool IsConvex(const Polygon &p) {\n  int n = p.size();\n  for (int i = 0; i < n; i++) {\n    if (ccw(p[(i + n - 1) % n], p[i], p[(i + 1) % n]) == -1) return false;\n  }\n  return true;\n}\n\nPolygon Convex_Hull(Polygon &p) {\n  int n = p.size(), k = 0;\n  if (n >= 3) {\n    sort(p.begin(), p.end());\n    vector<Point> ch(2 * n);\n    for (int i = 0; i < n; ch[k++] = p[i++]) {\n      while (k >= 2 && cross(ch[k - 1] - ch[k - 2], p[i] - ch[k - 1]) < 0) --k;\n    }\n    for (int i = n - 2, t = k + 1; i >= 0; ch[k++] = p[i--]) {\n      while (k >= t && cross(ch[k - 1] - ch[k - 2], p[i] - ch[k - 1]) < 0) --k;\n    }\n    ch.resize(k - 1);\n    return ch;\n  } else {\n    return p;\n  }\n}\n\nenum { OUT, ON, IN };\nint Contains(const Polygon &Q, const Point &p) {\n  bool in = false;\n  for (int i = 0; i < Q.size(); i++) {\n    Point a = Q[i] - p, b = Q[(i + 1) % Q.size()] - p;\n    if (a.imag() > b.imag()) swap(a, b);\n    if (a.imag() <= 0 && 0 < b.imag() && cross(a, b) < 0) in = !in;\n    if (cross(a, b) == 0 && dot(a, b) <= 0) return ON;\n  }\n  return in ? IN : OUT;\n}\n\nbool MergeIfAble(Segment &s1, Segment s2) {\n  if (abs(cross(s1.b - s1.a, s2.b - s2.a)) > EPS) return false;\n  if (ccw(s1.a, s2.a, s1.b) == 1 || ccw(s1.a, s2.a, s1.b) == -1) return false;\n  if (ccw(s1.a, s1.b, s2.a) == -2 || ccw(s2.a, s2.b, s1.a) == -2) return false;\n  s1 = Segment(min(s1.a, s2.a), max(s1.b, s2.b));\n  return true;\n}\n\nvoid MergeSegments(vector<Segment> &segs) {\n  for (int i = 0; i < segs.size(); i++) {\n    if (segs[i].b < segs[i].a) swap(segs[i].a, segs[i].b);\n  }\n  for (int i = 0; i < segs.size(); i++) {\n    for (int j = i + 1; j < segs.size(); j++) {\n      if (MergeIfAble(segs[i], segs[j])) {\n        segs[j--] = segs.back(), segs.pop_back();\n      }\n    }\n  }\n}\n\nvector<vector<int>> SegmentArrangement(vector<Segment> &segs, vector<Point> &ps) {\n  vector<vector<int>> g;\n  const int N = (int)segs.size();\n  for (int i = 0; i < N; i++) {\n    ps.emplace_back(segs[i].a);\n    ps.emplace_back(segs[i].b);\n    for (int j = i + 1; j < N; j++) {\n      const Point p1 = segs[i].b - segs[i].a;\n      const Point p2 = segs[j].b - segs[j].a;\n      if (cross(p1, p2) == 0) continue;\n      if (Intersect(segs[i], segs[j])) {\n        ps.emplace_back(Crosspoint(segs[i], segs[j]));\n      }\n    }\n  }\n  sort(begin(ps), end(ps));\n  ps.erase(unique(begin(ps), end(ps)), end(ps));\n\n  const int M = (int)ps.size();\n  g.resize(M);\n  for (int i = 0; i < N; i++) {\n    vector<int> vec;\n    for (int j = 0; j < M; j++) {\n      if (Intersect(segs[i], ps[j])) {\n        vec.emplace_back(j);\n      }\n    }\n    for (int j = 1; j < vec.size(); j++) {\n      g[vec[j - 1]].push_back(vec[j]);\n      g[vec[j]].push_back(vec[j - 1]);\n    }\n  }\n  return (g);\n}\n\nPolygon ConvexCut(Polygon &U, Line l) {\n  Polygon ret;\n  for (int i = 0; i < U.size(); i++) {\n    Point now = U[i], nxt = U[(i + 1) % U.size()];\n    if (ccw(l.a, l.b, now) != -1) ret.push_back(now);\n    if (ccw(l.a, l.b, now) * ccw(l.a, l.b, nxt) < 0) {\n      ret.push_back(Crosspoint(Line(now, nxt), l));\n    }\n  }\n  return (ret);\n}\n\ndouble Area2(const Polygon &p) {\n  double A = 0;\n  for (int i = 0; i < p.size(); ++i) {\n    A += cross(p[i], p[(i + 1) % p.size()]);\n  }\n  return A;\n}\n\ndouble Convex_Diameter(Polygon &p) {\n  int n = p.size();\n  int is = 0, js = 0;\n  for (int i = 1; i < n; i++) {\n    if (p[i].imag() > p[is].imag()) is = i;\n    if (p[i].imag() < p[js].imag()) js = i;\n  }\n  double maxdis = norm(p[is] - p[js]);\n\n  int maxi, maxj, i, j;\n  i = maxi = is;\n  j = maxj = js;\n  do {\n    if (cross(p[(i + 1) % n] - p[i], p[(j + 1) % n] - p[j]) >= 0) {\n      j = (j + 1) % n;\n    } else {\n      i = (i + 1) % n;\n    }\n    if (norm(p[i] - p[j]) > maxdis) {\n      maxdis = norm(p[i] - p[j]);\n      maxi = i;\n      maxj = j;\n    }\n  } while (i != is || j != js);\n  return maxdis;\n}\n\n// int main() {}\n\n// Projection\n// verified https://onlinejudge.u-aizu.ac.jp/#/courses/library/4/CGL/1/CGL_1_A\n// int main() {\n//   Line l;\n//   cin >> l;\n//\n//   int q;\n//   cin >> q;\n//   while (q--) {\n//     Point p;\n//     cin >> p;\n//     Point ans = Projection(l, p);\n//     cout << ans << endl;\n//   }\n// }\n\n// Reflection\n// verified https://onlinejudge.u-aizu.ac.jp/#/courses/library/4/CGL/1/CGL_1_B\n// int main() {\n//   Line l;\n//   cin >> l;\n//\n//   int q;\n//   cin >> q;\n//   while (q--) {\n//     Point p;\n//     cin >> p;\n//     Point ans = Reflection(l, p);\n//     cout << ans << endl;\n//   }\n// }\n\n// ccw\n// verified https://onlinejudge.u-aizu.ac.jp/#/courses/library/4/CGL/1/CGL_1_C\n// int main() {\n//   const vector<string> ans{\"ONLINE_FRONT\", \"CLOCKWISE\", \"ON_SEGMENT\", \"COUNTER_CLOCKWISE\", \"ONLINE_BACK\"};\n//   Point p0, p1;\n//   cin >> p0 >> p1;\n//\n//   int q;\n//   cin >> q;\n//   while (q--) {\n//     Point p2;\n//     cin >> p2;\n//     cout << ans[ccw(p0, p1, p2) + 2] << endl;\n//   }\n// }\n\n// Parallel and Orthogonal\n// verified https://onlinejudge.u-aizu.ac.jp/#/courses/library/4/CGL/2/CGL_2_A\n// int main() {\n//   int n;\n//   cin >> n;\n//   while (n--) {\n//     Line a, b;\n//     cin >> a >> b;\n//     if (Parallel(a, b))\n//       puts(\"2\");\n//     else if (Orthogonal(a, b))\n//       puts(\"1\");\n//     else\n//       puts(\"0\");\n//   }\n// }\n\n// Intersect(S, S)\n// verified https://onlinejudge.u-aizu.ac.jp/#/courses/library/4/CGL/2/CGL_2_B\n// int main() {\n//   int q;\n//   cin >> q;\n//   while (q--) {\n//     Segment a, b;\n//     cin >> a >> b;\n//     cout << Intersect(a, b) << endl;\n//   }\n// }\n\n// Crosspoint(S, S)\n// verified https://onlinejudge.u-aizu.ac.jp/#/courses/library/4/CGL/2/CGL_2_C\n// int main() {\n//   int q;\n//   cin >> q;\n//   while (q--) {\n//     Segment a, b;\n//     cin >> a >> b;\n//     Point ans = Crosspoint(a, b);\n//     cout << ans << endl;\n//   }\n// }\n\n// Distance(S, S);\n// verified https://onlinejudge.u-aizu.ac.jp/#/courses/library/4/CGL/2/CGL_2_D\nint main() {\n  int q;\n  cin >> q;\n  while (q--) {\n    Segment a, b;\n    cin >> a >> b;\n    cout << fixed << setprecision(10) << Distance(a, b) << endl;\n  }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef pair<ll, ll> pll;\n#define INF 1<<30\n#define LINF 1LL<<60\n\ntypedef long double ld;\ntypedef complex<ld> Point;\nconst ld eps = 1e-9, pi = acos(-1.0);\nnamespace std {\n    bool operator<(const Point &lhs, const Point &rhs) {\n        if (lhs.real() < rhs.real() - eps) return true;\n        if (lhs.real() > rhs.real() + eps) return false;\n        return lhs.imag() < rhs.imag();\n    }\n}\nPoint input_point() {ld x, y; cin >> x >> y; return Point(x, y);} // ????????\\???\nbool eq(ld a, ld b) {return (abs(a - b) < eps);} // ????????????????????????\nld dot(Point a, Point b) {return real(conj(a) * b);} // ??????\nld cross(Point a, Point b) {return imag(conj(a) * b);} // ??????\n\n// ??´????????????\nclass Line {\npublic:\n    Point a, b;\n    Line() : a(Point(0, 0)), b(Point(0, 0)) {}\n    Line(Point a, Point b) : a(a), b(b) {}\n    Point operator[](const int _num) {\n        if (_num == 0)return a;\n        else if (_num == 1)return b;\n        else assert(false);\n    }\n};\n\n// ????????????\nclass Circle {\npublic:\n    Point p;\n    ld r;\n    Circle() : p(Point(0, 0)), r(0) {}\n    Circle(Point p, ld r) : p(p), r(r) {}\n};\n\n// ??????????¶?\nPoint proj(Line l, Point p) {\n    ld t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n    return l.a + t * (l.a - l.b);\n}\n\n// CCW\nint ccw(Point a, Point b, Point c) {\n    b -= a; c -= a;\n    if (cross(b, c) > eps) return 1;   // a,b,c??????????¨???¨?????????????????¶\n    if (cross(b, c) < -eps) return -1; // a,b,c???????¨???¨?????????????????¶\n    if (dot(b, c) < 0) return 2;       // c,a,b???????????´???????????¶\n    if (norm(b) < norm(c)) return -2;  // a,b,c???????????´???????????¶\n    return 0;                          // a,c,b???????????´???????????¶\n}\n\n/* ???????????? */\n// ??´?????¨??´??????????????????\nbool isis_ll(Line l, Line m) {return !eq(cross(l.b - l.a, m.b - m.a), 0);}\n// ??´?????¨?????????????????????\nbool isis_ls(Line l, Line s) {\n    return isis_ll(l, s) &&\n    (cross(l.b - l.a, s.a - l.a) * cross(l.b - l.a, s.b - l.a) < eps);\n}\n// ????????¨?????????????????????\nbool isis_ss(Line s, Line t) {\n    return ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 &&\n    ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0;\n}\n// ????????´????????????\nbool isis_lp(Line l, Point p) {return (abs(cross(l.b - p, l.a - p)) < eps);}\n// ?????????????????????\nbool isis_sp(Line s, Point p) {return (abs(s.a - p) + abs(s.b - p) - abs(s.b - s.a) < eps);}\n\n/* ?????¢ */\n// ??´?????¨??´????????????\nPoint is_ll(Line s, Line t) {\n    Point sv = s.b - s.a, tv = t.b - t.a;\n    assert(cross(sv, tv) != 0);\n    return s.a + sv * cross(tv, t.a - s.a) / cross(tv, sv);\n}\n\n// ??´?????¨???????????¢\nld dist_lp(Line l, Point p) {\n    return abs(p - proj(l, p));\n}\n\n// ??´?????¨??´???????????¢\nld dist_ll(Line l, Line m) {\n    return isis_ll(l, m) ? 0 : dist_lp(l, m.a);\n}\n\n// ??´?????¨??????????????¢\nld dist_ls(Line l, Line s) {\n    return isis_ls(l, s) ? 0 : min(dist_lp(l, s.a), dist_lp(l, s.b));\n}\n\n// ????????¨???????????¢\nld dist_sp(Line s, Point p) {\n    Point r = proj(s, p);\n    return isis_sp(s, r) ? abs(r - p) : min(abs(s.a - p), abs(s.b - p));\n}\n\n// ????????¨??????????????¢\nld dist_ss(Line s, Line t) {\n    if (isis_ss(s, t)) return 0;\n    return min({ dist_sp(s, t.a), dist_sp(s, t.b), dist_sp(t, s.a), dist_sp(t, s.b) });\n}\n\nint main(void) {\n    cin.tie(0); ios::sync_with_stdio(false);\n    int q; cin >> q;\n    for(int i = 0;i<q;i++){\n        Line s1(input_point(),input_point()), s2(input_point(),input_point());\n        cout << fixed << setprecision(10) << dist_ss(s1,s2) << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "3\n0 0 1 0 0 1 1 1\n0 0 1 0 2 1 1 2\n-1 0 1 0 0 1 0 -1"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define int long long\n#define uint unsigned int\n#define pii pair<int, int>\n#define FOR(i,a,b) for(int i=(a);i<(b);++i)\n#define FORR(i,a,b) for(int i=(a);i>=(b);--i)\n#define REP(i,n) FOR(i,0,n)\n#define REPR(i,n) FORR(i,n,0)\n#define ALL(c) ((c).begin(),(c).end())\n#define PB(a) push_back(a)\n#define EMPB(...) emplace_back(__VA_ARGS__)\n#define EMP(...) emplace(__VA_ARGS__)\n#define MP(a,b) make_pair(a,b)\n#define MT(...) make_tuple(__VA_ARGS__)\n#define ZERO(a) memset(a,0,sizeof(a))\n#define MINUS(a) memset(a,0xff,sizeof(a))\n#define MINF(a) memset(a,0x3f,sizeof(a))\n#define PW(n) (1LL<<(n))\nusing namespace std;\ntemplate <class T> inline bool CHMIN(T& a, T b) { if(a>b) { a=b; return 1; } return 0; }\ntemplate <class T> inline bool CHMAX(T& a, T b) { if(a<b) { a=b; return 1; } return 0; }\ntemplate <class T> inline void SORT(T& a) { sort(ALL(a)); }\ntemplate <class T> inline void REV(T& a) { reverse(ALL(a)); }\ntemplate <class T> inline void UNI(T& a) { SORT(a); a.erase(unique(ALL(a)),a.end()); }\ntemplate <class S, class T> ostream& operator<<(ostream& os, const pair<S,T> a) {\n  return os << a.first << ' ' << a.second;\n}\nconst int MOD = 1000000007;\n// const int INF = 0x3f3f3f3f3f3f3f3f;\n// const double EPS = 1e-10;\n/* ---------------------------------------------------------------------------------------------------- */\n\n/* 基本要素 */\nusing D = double; // 座標値の型 doubleかlong double\nusing P = complex<D>; // Point\nusing L = pair<P,P>;  // Line\nusing VP = vector<P>;\nconst double EPS = 1e-8;  // 許容誤差\nconst double INF = 1e12;\n#define X real()\n#define Y imag()\n#define LT(n,m) ((n)+EPS<(m)) // n < m ?\n#define LE(n,m) ((n)-EPS<(m)) // n <= m ?\n#define GT(n,m) LT(m,n) // n > m ?\n#define GE(n,m) LE(m,n) // n >= m ?\n#define EQ(n,m) (abs((n)-(m))<EPS)\n#define NE(n,m) !EQ(n,m)\n#define rep(i,n) for (int i=0;i<(n);++i)\n\nnamespace std {\n  istream& operator >> (istream& is, P& p) {\n    int F, S;\n    is >> F >> S;\n    p = P(F,S);\n    return is;\n  }\n}\n\n// 内積\nD dot(P a, P b) {\n  return (conj(a)*b).X;\n}\n// 外積\nD cross(P a, P b) {\n  return (conj(a)*b).Y;\n}\n// 点aから見た、点bから点cへの方向\nint ccw(P a, P b, P c) {\n  b -= a; c -= a;\n  if (GT(cross(b,c),0)) return +1;  // counter clockwise\n  if (LT(cross(b,c),0)) return -1;  // clockwise\n  if (LT(dot(b,c),0)) return +2;  // c--a--b on line\n  if (LT(norm(b),norm(c))) return -2; // a--b--c on line or a==b\n  return 0;                     // a--c--b on line or a==c or b==c\n}\n\n/* 交差判定 直線・線分は縮退してはならない．接する場合は交差するとみなす */\n// 直線と点\nbool isecLP(P a1, P a2, P b) {\n  return NE(abs(ccw(a1,a2,b)),1);\n}\n// 直線と直線\nbool isecLL(P a1, P a2, P b1, P b2) {\n  return !isecLP(a2-a1,b2-b1,0) || isecLP(a1,b1,b2);\n}\n// 直線と線分\nbool isecLS(P a1, P a2, P b1, P b2) {\n  return LE(cross(a2-a1,b1-a1)*cross(a2-a1,b2-a1),0);\n}\n// 線分と線分\nbool isecSS(P a1, P a2, P b1, P b2) {\n  return ccw(a1,a2,b1) * ccw(a1,a2,b2) <= 0 && ccw(b1,b2,a1)*ccw(b1,b2,a2) <= 0;\n}\n// 線分と点\nbool isecSP(P a1, P a2, P b) {\n  return !ccw(a1, a2, b);\n}\n\n/* 距離 各直線・線分は縮退してはならない */\n// 点pの直線aへの射影点を返す\nP proj(P a1, P a2, P p) {\n  return a1 + dot(a2-a1,p-a1)/norm(a2-a1) * (a2-a1);\n}\n// 点pの直線aへの反射点を返す\nP reflection(P a1, P a2, P p) {\n  return 2.0*proj(a1,a2,p)-p;\n}\n// 直線と点\nD distLP(P a1, P a2, P p) {\n  return abs(proj(a1,a2,p)-p);\n}\n// 直線と直線\nD distLL(P a1, P a2, P b1, P b2) {\n  return isecLL(a1,a2,b1,b2) ? 0 : distLP(a1,a2,b1);\n}\n// 直線と線分\nD distLS(P a1, P a2, P b1, P b2) {\n  return isecLS(a1,a2,b1,b2) ? 0 : min(distLP(a1,a2,b1),distLP(a1,a2,b2));\n}\n// 線分と点\nD distSP(P a1, P a2, P p) {\n  P r = proj(a1,a2,p);\n  if (isecSP(a1,a2,r)) return abs(r-p);\n  return min(abs(a1-p),abs(a2-p));\n}\n// 線分と線分\nD distSS(P a1, P a2, P b1, P b2) {\n  if (isecSS(a1,a2,b1,b2)) return 0;\n  return min(min(distSP(a1,a2,b1),distSP(a1,a2,b2)),min(distSP(b1,b2,a1),distSP(b1,b2,a2)));\n}\n\nsigned main() {\n  cin.tie(0);\n  ios_base::sync_with_stdio(false);\n  cout << fixed << setprecision(10);\n\n  int q;\n  cin >> q;\n  REP(i,q) {\n    P p0, p1, p2, p3;\n    cin >> p0 >> p1 >> p2 >> p3;\n    cout << distSS(p0,p1,p2,p3) << endl;\n  }\n\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\nusing ull = unsigned long long;\n//#define ll long long\ntemplate<class T> bool chmax(T &a, const T &b) { if (a<b) { a=b; return 1; } return 0; }\ntemplate<class T> bool chmin(T &a, const T &b) { if (a>b) { a=b; return 1; } return 0; }\n#define rep(i, n) REP(i, 0, n)\n#define rep_rev(i, n) for (int (i) = (int)(n) - 1 ; (i) >= 0 ; --(i))\n#define ALL(v) v.begin(), v.end()\n#define MSG(a) cout << #a << \" \" << a << endl;\n#define REP(i, x, n) for(int i = x; i < n; i++)\n#define all(x) (x).begin(),(x).end()\nll t1,t2;\nconst ll mod = 1000000007;\nconst int INF = 1e9;\nconst ll INFLONG = 1e18;\nvoid swap(ll *x,ll *y){\n  ll tmp;\n  tmp = *x;\n  *x = *y;\n  *y = tmp;\n}\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a) - (b)) < EPS)\n\nclass Point {\npublic:\n    double x,y;\n    Point(double x,double y):x(x),y(y){}\n    Point():x(0),y(0){}\n\n    Point operator + (Point p) {return Point(x + p.x,y + p.y);}\n    Point operator - (Point p ){return Point(x - p.x,y - p.y);}\n    Point operator * (double a){return Point(x*a,y*a);}\n    Point operator / (double a){return Point(x/a,y/a);}\n\n    double abs(){return sqrt(norm());}\n    double norm(){return x * x + y * y;}\n\n    bool operator < (const Point & p) const {\n      return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point &p) const {\n      return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n    }\n\n    void set(double x,double y) {\n      this->x = x;\n      this->y = y;\n    }\n\n\n};\n\nstruct Segment{\n    Point p1,p2;\n};\n\ntypedef Point Vector;\ntypedef Segment Line;\n\ndouble norm(Point a){\n  return a.x * a.x + a.y * a.y;\n}\n\ndouble abs(Point a){\n  return sqrt(norm(a));\n}\n\ndouble dot(Vector a, Vector b){\n  return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a,Vector b){\n  return a.x * b.y - a.y * b.x;\n}\n\nbool isOrthogonal(Vector a,Vector b){\n  return equals(dot(a,b),0.0);\n}\n\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n  return isOrthogonal(a1-a2,b1-b2);\n}\n\nbool isOrthogonal(Segment s1,Segment s2){\n  return equals(dot(s1.p2 - s1.p1,s2.p2-s2.p1),0.0);\n}\n\nbool isParallel(Vector a, Vector b){\n  return equals(cross(a,b),0.0);\n}\n\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n  return isParallel(a1-a2,b1-b2);\n}\n\nbool isParallel(Segment s1,Segment s2){\n  return equals(cross(s1.p2 - s1.p1,s2.p2-s2.p1),0.0);\n}\n\nPoint project(Segment s,Point p){\n  Point vec1,vec2;\n  vec1 = s.p2 - s.p1;\n  vec2 = p - s.p1;\n  return s.p1 + vec1 * dot(vec1,vec2) / vec1.norm();\n}\n\nPoint reflect(Segment s,Point p){\n  return p + (project(s,p) - p)* 2;\n}\n\nbool intersect(Segment s1,Segment s2){\n  return ((cross(s1.p1 - s2.p1,s1.p1 - s2.p2) < 0 ^ cross(s1.p2 - s2.p1,s1.p2 - s2.p2) < 0)\n  && (cross(s2.p1 - s1.p1,s2.p1 - s1.p2) < 0 ^ cross(s2.p2 - s1.p1,s2.p2 - s1.p2) < 0));\n}\n\ndouble getDistance(Point a,Point b){\n  return abs(a-b);\n}\n\n// Line : Point\ndouble getDistanceLP(Line l,Point p){\n  return abs((cross(l.p2 - l.p1,p - l.p1) / abs(l.p2 - l.p1)));\n}\n\n// Segment : Point\ndouble getDistanceSP(Segment s,Point p){\n  if(dot(s.p2 - s.p1,p - s.p1) < 0.0){\n    return abs(p - s.p1);\n  }\n  if(dot(s.p1 - s.p2,p - s.p2) < 0.0){\n    return abs(p - s.p2);\n  }\n  return getDistanceLP(s,p);\n}\n\n\n\ndouble getDistance(Segment s1,Segment s2){\n  if(intersect(s1,s2)){\n    return 0.0;\n  }\n  double ans = INF;\n  chmin(ans,getDistanceSP(s1,s2.p1));\n  chmin(ans,getDistanceSP(s1,s2.p2));\n  chmin(ans,getDistanceSP(s2,s1.p1));\n  chmin(ans,getDistanceSP(s2,s1.p2));\n  return ans;\n}\n\n\n\nint main() {\n  ll n;\n  cin >> n;\n  double x, y;\n  vector<Vector> p(4);\n  Segment s1, s2;\n  rep(i, n) {\n    rep(j, 4) {\n      cin >> x >> y;\n      p[j] = Point(x, y);\n    }\n    s1.p1 = p[0];\n    s1.p2 = p[1];\n    s2.p1 = p[2];\n    s2.p2 = p[3];\n    printf(\"%.15f\\n\",getDistance(s1,s2));\n  }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <algorithm>\n#include <iomanip>\n#define ESP (1e-10)\nusing namespace std;\n\ntypedef struct Point {\n\tdouble x; \n\tdouble y;\n\n\tPoint() { }\n\n\tPoint(double x, double y) :x(x), y(y) { }\n\n\tPoint operator+(Point& p) {\n\t\treturn Point(x + p.x, y + p.y);\n\t}\n\n\tPoint operator-(Point& p) {\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n};\n\ntypedef Point Vector;\n\n struct Line {\n\tPoint p1, p2;\n\tLine() {}\n\tLine(const Point& a,const Point& b) : p1(a),p2(b) { }\n};\n\n typedef Line Segment;\n\ndouble abs(Point p1, Point p2) {\n\tdouble norm = (p1.x - p2.x)*(p1.x - p2.x) + (p1.y - p2.y)*(p1.y - p2.y);\n\treturn sqrt(norm);\n}\n\ndouble product(Vector v1, Vector v2) {\n\treturn v1.x*v2.x + v1.y*v2.y;\n}\n\ndouble cross(Vector p1, Vector p2) {\n\treturn p1.x*p2.y - p1.y*p2.x;\n}\n\nint ccw(Point p0, Point p1, Point p2) {\n\tVector v0 = p1 - p0;\n\tVector v1 = p2 - p0;\n\tif (cross(v0, v1) > ESP) return 1;   //p0,p1,p2??????????¨???????\n\tif (cross(v0, v1) < -ESP) return -1;   //p0,p1,p2???????¨???????\n\tif (product(v0, v1) < -ESP) return 2;  //p2,p0,p1????????§????????´??????\n\tif (abs(p0, p1) < abs(p0, p2)) return -2;  //p0,p1,p2????????§????????´??????\n\treturn 0;   //p2?????????(p0,p1)???\n}\n\nbool intersect(Point p0, Point p1, Point p2, Point p3) {\n\treturn (ccw(p0, p1, p2)*ccw(p0, p1, p3) <= 0&&ccw(p2,p3,p0)*ccw(p2,p3,p1)<=0);\n\t//?????????????????????????????¶\n}\n\nbool intersect(Segment s1, Segment s2) {\n\treturn intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\ndouble DistanceLP(Line l, Point p) {\n\treturn abs(cross(l.p2 - l.p1, p - l.p1)/abs(l.p1,l.p2));\n}\n\ndouble DistanceSP(Segment s, Point p) {\n\tif (product(s.p2 - s.p1, p - s.p1) < 0.0) return abs(p, s.p1);\n\tif (product(s.p1 - s.p2, p - s.p2) < 0.0) return abs(p, s.p2);\n\treturn DistanceLP(s, p);\n}\n\ndouble DistanceSS(Segment s1, Segment s2) {\n\tif (intersect(s1, s2)) return 0.0;\n\treturn min(min(DistanceSP(s1, s2.p1), DistanceSP(s1,s2.p2)), min(DistanceSP(s2, s1.p1), DistanceSP(s2, s1.p2)));\n}\n\nint main() {\n\tSegment s0,s1;\n\tint q; \n\tcin >> q;\n\tfor (int i = 0;i < q;i++) {\n\t\tcin >> s0.p1.x; cin >> s0.p1.y;\n\t\tcin >> s0.p2.x; cin >> s0.p2.y;\n\t\tcin >> s1.p1.x; cin >> s1.p1.y;\n\t\tcin >> s1.p2.x; cin >> s1.p2.y;\n\t\tcout <<setprecision(10)<< DistanceSS(s0, s1) << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<iomanip>\n#include<algorithm>\n#include<cmath>\nusing namespace std;\n#define FOR(i,a,b) for(int i=(a);i<(b);i++)\n#define REP(i,n) for(int i=0;i<(n);i++)\n#define PII pair<int,int>\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n\nclass Point\n{\npublic:\n\tdouble x, y;\n\tPoint(double X = 0, double Y = 0)\n\t{\n\t\tx = X;\n\t\ty = Y;\n\t}\n\tPoint operator +(const Point &p)const { return Point(x + p.x, y + p.y); };\n\tPoint operator -(const Point &p)const { return Point(x - p.x, y - p.y); };\n\tPoint operator *(const double a)const { return Point(x*a, y*a); };\n\tPoint operator /(const double a)const { return Point(x / a, y / a); };\n\tdouble norm()const { return x*x + y*y; };\n\tdouble length()const { return sqrt(norm()); };\n\tdouble dot(const Point &p)const { return x*p.x + y*p.y; };\n\tdouble cross(const Point &p)const { return x*p.y - y*p.x; };\n\tbool operator ==(const Point &p)const\n\t{\n\t\treturn fabs(x - p.x)<EPS &&fabs(y - p.y)<EPS;\n\t}\n\tfriend ostream& operator <<(ostream& os, const Point &p);\n\tint CCW(Point p1, Point p2)\n\t{\n\t\tPoint p0(x, y);\n\t\tPoint V1 = p1 - p0;\n\t\tPoint V2 = p2 - p0;\n\t\tif (V1.cross(V2) > 0.0)return -1;\n\t\telse if (V1.cross(V2) < 0.0)return 1;\n\t\telse if (V1.dot(V2) < 0.0)return -2;\n\t\telse if (V1.norm() < V2.norm())return 2;\n\t\treturn 0;\n\t}\n};\ntypedef Point Vector;\n\nostream& operator <<(ostream& os, const Point &p)\n{\n\treturn os << \"(\" << p.x << \",\" << p.y << \")\";\n}\n\nclass Segment\n{\npublic:\n\tPoint p1, p2;\n\tSegment(double x1, double y1, double x2, double y2)\n\t{\n\t\tp1.x = x1;\n\t\tp1.y = y1;\n\t\tp2.x = x2;\n\t\tp2.y = y2;\n\t}\n\tdouble GetLength()\n\t{\n\t\tPoint temp = p2 - p1;\n\t\treturn temp.length();\n\t}\n\tdouble GetDistanceSeg(double X, double Y)\n\t{\n\t\tPoint p(X, Y);\n\t\tPoint a = p2 - p1;\n\t\tPoint b = p - p1;\n\t\tPoint c = p1 - p2;\n\t\tPoint d = p - p2;\n\t\tif (a.dot(b) < 0.0)return b.length();\n\t\tif (c.dot(d) < 0.0)return d.length();\n\t\treturn GetDistanceLine(X, Y);\n\t}\n\tdouble GetDistanceLine(double X, double Y)\n\t{\n\t\tPoint t(X, Y);\n\t\tPoint a = p2 - p1;\n\t\tPoint b = t - p1;\n\t\treturn abs(a.cross(b) / a.length());\n\t}\n\tbool IsIntersect(Segment &s)\n\t{\n\t\tint s1, s2;\n\t\ts1 = p1.CCW(p2, s.p1)*p1.CCW(p2, s.p2);\n\t\ts2 = s.p1.CCW(s.p2, p1)*s.p1.CCW(s.p2, p2);\n\t\treturn s1 <= 0 && s2 <= 0;\n\t}\n\tbool IsOrthogonal(const Segment &s)\n\t{\n\t\tVector t1 = p2 - p1;\n\t\tVector t2 = s.p2 - s.p1;\n\t\treturn equals(0.0, t1.dot(t2));\n\t}\n\tbool IsParallel(const Segment &s)\n\t{\n\t\tVector t1 = p2 - p1;\n\t\tVector t2 = s.p2 - s.p1;\n\t\treturn equals(0.0, t1.cross(t2));\n\t}\n\tPoint GetProjection(double X, double Y)const\n\t{\n\t\tVector V = p2 - p1;\n\t\tPoint P(X, Y);\n\t\tPoint ret = V*(V.dot(P - p1) / V.norm());\n\t\treturn ret + p1;\n\t}\n\tPoint GetReflect(double X, double Y)\n\t{\n\t\tPoint t(X, Y);\n\t\tPoint Pro = GetProjection(X, Y);\n\t\tVector dV = Pro - t;\n\t\treturn t + dV*2.0;\n\t}\n};\ntypedef Segment Line;\n\nclass Circle\n{\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point C = Point(), double R = 0)\n\t{\n\t\tc = C;\n\t\tr = R;\n\t}\n};\n\nint main()\n{\n\tint q;\n\tcin >> q;\n\tREP(i, q)\n\t{\n\t\tint x0, y0, x1, y1, x2, y2, x3, y3;\n\t\tcin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n\t\tSegment s1(x0, y0, x1, y1), s2(x2, y2, x3, y3);\n\t\tdouble ans;\n\t\tif (s1.IsIntersect(s2))ans = 0;\n\t\telse ans = min({ s2.GetDistanceSeg(x0, y0), s2.GetDistanceSeg(x1, y1),s1.GetDistanceSeg(x2, y2), s1.GetDistanceSeg(x3, y3) });\n\t\tcout << fixed << setprecision(10) << ans << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nstruct cww{cww(){ios::sync_with_stdio(false);cin.tie(0);}}star;\n#define P(x) cout << (x) << \"\\n\"\n#define p(x) cout << (x)\n#define all(c) (c).begin(), (c).end()\n#define rall(c) (c).rbegin(), (c).rend()\n#define vv(type, c, m, n, i) vector<vector<type>> c(m, vector<type>(n, i));\n#define rep(i,a,n) for(int i=(a), i##_len=(n); i<i##_len; ++i)\n#define rrep(i,a,n) for(int i=(a), i##_len=(n); i>i##_len; --i)\n#define len(x) ((int)(x).size())\n#define mp make_pair\n#define eb emplace_back\n#define fi first\n#define se second\ntypedef long long ll;\ntypedef long double ld;\ntypedef vector<int> vi;\ntypedef vector<double> vd;\ntypedef vector<long long> vll;\ntypedef vector<string> vs;\ntypedef vector<bool> vb;\ntypedef complex<double> Point;\ntypedef Point Vector;\ntypedef pair<Point, Point> Segment;\ntypedef Segment Line;\nconstexpr double EPS = (1e-9L);\ndouble dot(const Point& p1, const Point& p2) { return (conj(p1) * p2).real(); }\ndouble cross(const Point& p1, const Point& p2) { return (conj(p1) * p2).imag(); }\nconstexpr bool eq(double a) { return abs(a) < EPS; }\nPoint project(Segment s, Point p) {\n\tVector base = s.fi - s.se;\n\tdouble r = dot(p - s.fi, base) / norm(base);\n\treturn s.fi + base * r;\n}\nPoint reflect(Segment s, Point p) { return p + (project(s, p) - p) * 2.0; }\nint ccw(const Point& p1, const Point& p2, const Point& p3) {\n\tPoint a = p2 - p1, b = p3 - p1;\n\tif (cross(a, b) > EPS) return 1;\n\tif (cross(a, b) < -EPS) return -1;\n\tif (dot(a, b) < -EPS) return 2;\n\tif (norm(a) < norm(b)) return -2;\n\treturn 0;\n}\nbool intersect(Point &p1, Point &p2, Point &p3, Point &p4) {\n\treturn (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n\t\t\tccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\nbool intersect(Segment &s1, Segment &s2) {\n\treturn intersect(s1.fi, s1.se, s2.fi, s2.se);\n}\ndouble getDistance(Point &a, Point &b) { return abs(a - b); }\ndouble getDistanceLP(Line &l, Point &p) {\n\treturn abs(cross(l.se - l.fi, p - l.fi) / abs(l.se - l.fi));\n}\ndouble getDistanceSP(Segment &s, Point &p) {\n\tif(dot(s.se - s.fi, p - s.fi) < 0.0) return abs(p - s.fi);\n\tif(dot(s.fi - s.se, p - s.fi) < 0.0) return abs(p - s.se);\n\treturn getDistanceLP(s, p);\n}\ndouble getDistance(Segment &s1, Segment &s2) {\n\tif(intersect(s1, s2)) return 0.0;\n\treturn min(min(getDistanceSP(s1, s2.fi), getDistanceSP(s1, s2.se)),\n\t\t\t\tmin(getDistanceSP(s2, s1.fi), getDistanceSP(s2, s1.se)));\n}\nint main() {\n\tcout << setprecision(10) << fixed;\n\tint q; cin >> q;\n\tSegment s1, s2;\n\tdouble x1, y1, x2, y2, x3, y3, x4, y4;\n\trep(i, 0, q) {\n\t\tcin >> x1 >> y1 >> x2 >> y2 >> x3 >> y3 >> x4 >> y4;\n\t\ts1 = mp(Point(x1, y1), Point(x2, y2));\n\t\ts2 = mp(Point(x3, y3), Point(x4, y4));\n\t\tP(getDistance(s1, s2));\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define REP(i,a,b) for(int i=a;i<b;i++)\n#define rep(i,n) REP(i,0,n)\n\ntypedef complex<double> P;\nstruct Line : public vector<P>\n{\n  Line(P a=P(), P b=P()) {\n    push_back(a); push_back(b);\n  }\n};\ntypedef Line Segment;\n\n#define EPS (1e-9)\n\nbool operator < (P const& a, P const& b) {\n  return (a.real() != a.real()) ? a.real() < b.real() : a.imag() < b.imag();\n}\n\ndouble dot(P const& a, P const& b) {\n  return real(conj(a)*b);\n}\n\ndouble cross(P const& a, P const& b) {\n  return imag(conj(a)*b);\n}\n\nP projection_point(P const& a, P const& b, P const& c) {\n  double k = dot(b-a, c-a) / norm(b-a);\n  return a+k*(b-a);\n}\n\nP reflection_point(P const& a, P const& b, P const& c) {\n  return c + 2.*(projection_point(a, b, c) - c);\n}\n\nbool is_parallel(Segment const& s, Segment const& t) {\n  return abs(cross(s[1]-s[0], t[1]-t[0])) < EPS;\n}\n\nbool is_orthogonal(Segment const& s, Segment const& t) {\n  return abs(dot(s[1]-s[0], t[1]-t[0])) < EPS;\n}\n\nint ccw(P a, P b, P c) {\n  b -= a, c -= a;\n  if(cross(b, c) > 0) return +1; // counter clockwise\n  if(cross(b, c) < 0) return -1;  // clockwise\n  if(dot(b, c) < 0) return +2;    // c-a-b\n  if(norm(b) < norm(c)) return -2;  // a-b-c\n  return 0; // on segment\n}\n\nbool is_intersect_ss(Segment const& s, Segment const& t) {\n  return ccw(s[0], s[1], t[0]) * ccw(s[0], s[1], t[1]) <= 0\n         && ccw(t[0], t[1], s[0]) * ccw(t[0], t[1], s[1]) <= 0;\n}\n\nP crosspoint_ss(Segment const& s, Segment const& t) {\n  P bline = t[1]-t[0];\n  double d1 = abs(cross(bline, s[0]-t[0])), d2 = abs(cross(bline, s[1]-t[0]));\n  return s[0] + d1/(d1+d2) * (s[1]-s[0]);\n}\n\nbool is_point_onsegment(Segment const& s, P const& p) {\n  return abs(s[0]-p)+abs(s[1]-p)-abs(s[1]-s[0]) < EPS;\n}\n\ndouble distance_sp(Segment const& s, P const& p) {\n  P q = projection_point(s[0], s[1], p);\n  if(is_point_onsegment(s, p)) return abs(p-q);\n  return min(abs(s[0]-p), abs(s[1]-p));\n}\n\ndouble distance_ss(Segment const& s, Segment const& t) {\n  if(is_intersect_ss(s, t)) return 0.; // 交差は距離 0\n  return min(min(distance_sp(t, s[0]), distance_sp(t, s[1])),\n             min(distance_sp(s, t[0]), distance_sp(s, t[1])));\n}\n\nint main () {\n  \n  int q; cin >> q;\n  for(;q--;) {\n    Segment s, t;\n    cin >> s[0].real() >> s[0].imag();\n    cin >> s[1].real() >> s[1].imag();\n    cin >> t[0].real() >> t[0].imag();\n    cin >> t[1].real() >> t[1].imag();\n    \n    printf(\"%.10f\\n\", distance_ss(s, t));\n  }\n  \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#include <cmath>\n#include <vector>\n#include <deque>\n#include <queue>\nusing namespace std;\n#define rep(i,a,n) for(int i=(a);i<(n);i++)\n#define per(i,a,n) for(int i=(n)-1;i>=(a);i--)\n#define mp make_pair\n#define pb push_back\n\ntypedef double db;\n\nconst db EPS = 1e-8;\n\ninline int sign(db a) {\n    return a < -EPS ? -1 : a > EPS;\n}\n\ninline int cmp(db a, db b){//?????????????????°\n    return sign(a-b);\n}\n\nstruct P {//???\n    db x, y;\n    P() {}\n    P(db _x, db _y) : x(_x), y(_y) {}\n    P operator+(P p) { return P(x + p.x, y + p.y); }\n    P operator-(P p) { return P(x - p.x, y - p.y); }\n    P operator*(db d) { return P(x * d, y * d); }\n    P operator/(db d) { return P(x / d, y / d); }\n    bool operator<(P p) const {\n        int c = cmp(x, p.x);\n        if (c) return c == -1;\n        return cmp(y, p.y) == -1;\n    }\n    db dot(P p) { return x * p.x + y * p.y; }//????§?\n    db det(P p) { return x * p.y - y * p.x; }//????§?\n    db distTo(P p) { return (*this-p).abs(); }//??????\n    db alpha() { return atan2(y, x); }//?±?????§?\n    void read() { cin>>x>>y; }//?????\\\n    db abs() { return sqrt(abs2());}//??????\n    db abs2() { return x * x + y * y; }//???????????????\n    P rot90() { return P(-y,x);}//?????¶????????¬90???\n    P unit() { return *this/abs(); }//?????????\n    int quad() const { return sign(y) == 1 || (sign(y) == 0 && sign(x) >= 0); }//????§?????????¨[0,180)?????´\n};\n\nstruct L{ //ps[0] -> ps[1]\n    P ps[2];\n    P& operator[](int i) { return ps[i]; }\n    P dir() { return ps[1] - ps[0]; }//??´??????????????????\n    bool include(P p) { return sign((ps[1] - ps[0]).det(p - ps[0])) > 0; }//????????¨?????????????????¢????????¶????????¨???\n    L push(){ // push eps outward\n        const double eps = 1e-6;\n        P delta = (ps[1] - ps[0]).rot90().unit() * eps;\n        return {ps[0] - delta, ps[1] - delta};\n    }\n};\n\n#define cross(p1,p2,p3) ((p2.x-p1.x)*(p3.y-p1.y)-(p3.x-p1.x)*(p2.y-p1.y))\n#define crossOp(p1,p2,p3) sign(cross(p1,p2,p3))\n\nP isLL(P p1, P p2, P q1, P q2) {//?±??????´?????????\n    db a1 = cross(q1, q2, p1), a2 = -cross(q1, q2, p2);\n    return (p1 * a2 + p2 * a1) / (a1 + a2);\n}\n\nP isLL(L l1,L l2){ return isLL(l1[0],l1[1],l2[0],l2[1]); }//?±??????´?????????\n\nbool intersect(db l1,db r1,db l2,db r2){\n    if(l1>r1) swap(l1,r1); if(l2>r2) swap(l2,r2);\n    return !( cmp(r1,l2) == -1 || cmp(r2,l1) == -1 );\n}\n\nbool isSS(P p1, P p2, P q1, P q2){//?±?????????????\n    return intersect(p1.x,p2.x,q1.x,q2.x) && intersect(p1.y,p2.y,q1.y,q2.y) &&\n           crossOp(p1,p2,q1) * crossOp(p1,p2,q2) <= 0 && crossOp(q1,q2,p1)\n                                                         * crossOp(q1,q2,p2) <= 0;\n}\n\nbool isMiddle(db a, db m, db b) {//??????m????????¨a,b?????´\n    return sign(a - m) == 0 || sign(b - m) == 0 || (a < m != b < m);\n}\n\nbool isMiddle(P a, P m, P b) {//?????????m?????????????????¨a,b?????´\n    return isMiddle(a.x, m.x, b.x) && isMiddle(a.y, m.y, b.y);\n}\n\nbool onSeg(P p1, P p2, P q){//?????????????????¨??´??????\n    return crossOp(p1,p2,q) == 0 && isMiddle(p1, q, p2);\n}\n\nP proj(P p1, P p2, P q) {//????????´???????????±\n    P dir = p2 - p1;\n    return p1 + dir * (dir.dot(q - p1) / dir.abs2());\n}\n\nP reflect(P p1, P p2, P q){//????????´??????????§°\n    return proj(p1,p2,q) * 2 - q;\n}\n\ndb nearest(P p1,P p2,P q){\n    P h = proj(p1,p2,q);\n    if(isMiddle(p1,h,p2))\n        return q.distTo(h);\n    return min(p1.distTo(q),p2.distTo(q));\n}\n\ndb disSS(P p1, P p2, P q1, P q2){\n    if(isSS(p1,p2,q1,q2)) return 0;\n    return min(min(nearest(p1,p2,q1),nearest(p1,p2,q2)), min(nearest(q1,q2,p1),nearest(q1,q2,p2)) );\n}\n\ndb disSS(L l1,L l2){\n    return disSS(l1[0],l1[1],l2[0],l2[1]);\n}\n\ndb rad(P p1,P p2){\n    return atan2l(p1.det(p2),p1.dot(p2));\n}\n\ndb incircle(P p1, P p2, P p3){\n    db A = p1.distTo(p2);\n    db B = p2.distTo(p3);\n    db C = p3.distTo(p1);\n    return sqrtl(A*B*C/(A+B+C));\n}\n\n\n\nint main(){\n    L l[2];\n    int q;\n    scanf(\"%d\",&q);\n    for(int i = 1;i <= q;i++){\n        for(int j = 0;j < 2;j++){\n            l[j][0].read(),l[j][1].read();\n        }\n        printf(\"%.15lf\\n\",disSS(l[0],l[1]));\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nconst double EPS = 1e-8;\nconst double INF = 1e12;\n\n//point\ntypedef complex<double> P;\nnamespace std {\n\tbool operator < (const P& a, const P& b) {\n\t\treturn real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n\t}\n}\ndouble cross(const P& a, const P& b) {\n\treturn imag(conj(a)*b);\n}\ndouble dot(const P& a, const P& b) {\n\treturn real(conj(a)*b);\n}\n// line\nstruct L : public vector<P> {\n\tL(const P& a, const P& b) {\n\t\tpush_back(a); push_back(b);\n\t}\n};\n\nint ccw(P a, P b, P c) {\n  b -= a; c -= a;\n  if (cross(b, c) > 0)   return +1;       // counter clockwise\n  if (cross(b, c) < 0)   return -1;       // clockwise\n  if (dot(b, c) < 0)     return +2;       // c--a--b on line\n  if (norm(b) < norm(c)) return -2;       // a--b--c on line\n  return 0;\t\t\t\t\t\t\t\t  // a--c--b on line\n}\n\nbool intersectLL(const L &l, const L &m) {\n  return abs(cross(l[1]-l[0], m[1]-m[0])) > EPS || // non-parallel\n         abs(cross(l[1]-l[0], m[0]-l[0])) < EPS;   // same line\n}\nbool intersectLS(const L &l, const L &s) {\n  return cross(l[1]-l[0], s[0]-l[0])*       // s[0] is left of l\n         cross(l[1]-l[0], s[1]-l[0]) < EPS; // s[1] is right of l\n}\nbool intersectLP(const L &l, const P &p) {\n  return abs(cross(l[1]-p, l[0]-p)) < EPS;\n}\nbool intersectSS(const L &s, const L &t) {\n  return ccw(s[0],s[1],t[0])*ccw(s[0],s[1],t[1]) <= 0 &&\n         ccw(t[0],t[1],s[0])*ccw(t[0],t[1],s[1]) <= 0;\n}\nbool intersectSP(const L &s, const P &p) {\n  return abs(s[0]-p)+abs(s[1]-p)-abs(s[1]-s[0]) < EPS; // triangle inequality\n}\n\nP projection(const L &l, const P &p) {\n\tdouble t = dot(p-l[0], l[0]-l[1]) / norm(l[0]-l[1]);\n\treturn l[0] + t*(l[0]-l[1]);\n}\nP reflection(const L &l, const P &p) {\n\treturn p + (double)2 * (projection(l, p) - p);\n}\ndouble distanceLP(const L &l, const P &p) {\n\treturn abs(p - projection(l, p));\n}\ndouble distanceLL(const L &l, const L &m) {\n\treturn intersectLL(l, m) ? 0 : distanceLP(l, m[0]);\n}\ndouble distanceLS(const L &l, const L &s) {\n\tif (intersectLS(l, s)) return 0;\n\treturn min(distanceLP(l, s[0]), distanceLP(l, s[1]));\n}\ndouble distanceSP(const L &s, const P &p) {\n\tconst P r = projection(s, p);\n\tif (intersectSP(s, r)) return abs(r - p);\n\treturn min(abs(s[0] - p), abs(s[1] - p));\n}\ndouble distanceSS(const L &s, const L &t) {\n\tif (intersectSS(s, t)) return 0;\n\t\treturn min({distanceSP(s, t[0]), distanceSP(s, t[1]), distanceSP(t, s[0]), distanceSP(t, s[1])});\n}\nP crosspoint(const L &l, const L &m) {\n  double A = cross(l[1] - l[0], m[1] - m[0]);\n  double B = cross(l[1] - l[0], l[1] - m[0]);\n  if (abs(A) < EPS && abs(B) < EPS) return m[0]; // same line\n  if (abs(A) < EPS) assert(false); // !!!PRECONDITION NOT SATISFIED!!!\n  return m[0] + B / A * (m[1] - m[0]);\n}\n\nint main() {\n\tint q;\n\tcin >> q;\n\tfor(int i=0; i<q; ++i) {\n\t\tdouble x[4], y[4];\n\t\tfor(int j=0; j<4; ++j) cin >> x[j] >> y[j];\n\t\tL l1(P{x[0], y[0]}, P{x[1], y[1]}), l2(P{x[2], y[2]}, P{x[3], y[3]}); \n\t\tcout << fixed << setprecision(15) << distanceSS(l1, l2) << endl;\n\t}\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <array>\n#include <vector>\n#include <cmath>\n\nconst double EPSILON = 1e-10;\n\ninline bool equals(double a, double b) {\n    return std::fabs(a - b) < EPSILON;\n}\n\nstruct Point {\n    double x;\n    double y;\n\n    bool operator < (const Point& p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point& p) const {\n        return equals(x, p.x) && equals(y, p.y);\n    }\n};\n\nPoint operator + (const Point& p1, const Point& p2) {\n    return Point{p1.x + p2.x, p1.y + p2.y};\n}\n\nPoint operator - (const Point& p1, const Point& p2) {\n    return Point{p1.x - p2.x, p1.y - p2.y};\n}\n\nPoint operator * (const Point& p1, double k) {\n    return Point{p1.x * k, p1.y * k};\n}\n\nstruct Segment {\n    Point p1, p2;\n};\n\nstruct Circle {\n    Point center;\n    double radius;\n};\n\nusing Vector = Point;\nusing Line = Segment;\nusing Polygon = std::vector<Point>;\n\n\ndouble norm(const Vector& p) {\n    return p.x * p.x + p.y * p.y;\n}\n\ndouble abs(const Vector& p) {\n    return std::sqrt(norm(p));\n}\n\ndouble dot(const Vector& a, const Vector& b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(const Vector& a, const Vector& b) {\n    return a.x * b.y - a.y * b.x;\n}\n\n\nVector projection(const Segment& s, const Point& p) {\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / norm(base);\n    return s.p1 + base * r;\n}\n\nVector reflection(const Segment& s, const Point& p) {\n    auto proj = projection(s, p);\n    return p + (projection(s, p) - p) * 2.0;\n}\n\nbool is_orthogonal(const Vector& a, const Vector& b) {\n    return equals(dot(a, b), 0.0);\n}\n\nbool is_orthogonal(const Segment& s1, const Segment& s2) {\n    return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nbool is_parallel(const Vector& a, const Vector& b) {\n    return equals(cross(a, b), 0.0);\n}\n\nbool is_parallel(const Segment& s1, const Segment& s2) {\n    return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nenum {\n    COUNTER_CLOCKWISE = 1,\n    CLOCKWISE = -1,\n    ONLINE_BACK = 2,\n    ONLINE_FRONT = -2,\n    ON_SEGMENT = 0,\n};\n\nint ccw(const Point& p0, const Point& p1, const Point& p2) {\n    auto a = p1 - p0;\n    auto b = p2 - p0;\n    if (cross(a, b) > EPSILON) return COUNTER_CLOCKWISE;\n    if (cross(a, b) < -EPSILON) return CLOCKWISE;\n    if (dot(a, b) < -EPSILON) return ONLINE_BACK;\n    if (norm(a) < norm(b)) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\nbool intersect(const Point& p1, const Point& p2, const Point& p3, const Point& p4) {\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n            ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\n\nbool intersect(const Segment& s1, const Segment& s2) {\n    return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\ndouble distance(const Point& a, const Point& b) {\n    return abs(a - b);\n}\n\ndouble distanceLP(const Line& l, const Point& p) {\n    return abs(cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1));\n}\n\ndouble distanceSP(const Segment& s, const Point& p) {\n    if (dot(s.p2 - s.p1, p - s.p1) < 0.0) return abs(p - s.p1);\n    if (dot(s.p1 - s.p2, p - s.p2) < 0.0) return abs(p - s.p2);\n    return distanceLP(s, p);\n}\n\ndouble distance(const Segment& s1, const Segment& s2) {\n    using std::min;\n    if (intersect(s1, s2)) return 0.0;\n    return min(min(distanceSP(s1, s2.p1), distanceSP(s1, s2.p2)),\n               min(distanceSP(s2, s1.p1), distanceSP(s2, s1.p2)));\n}\n\n\nint main() {\n    using namespace std;\n\n    int q;\n    cin >> q;\n    for (int i = 0; i < q; ++i) {\n        array<Point, 4> points;\n        for (auto& p : points) {\n            cin >> p.x >> p.y;\n        }\n        Segment s1{points[0], points[1]};\n        Segment s2{points[2], points[3]};\n        cout << setprecision(10) << distance(s1, s2) << endl;\n    }\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <vector>\n#include <queue>\n#include <cmath>\nusing namespace std;\n#define EPS  (1e-10)\n#define equals(a,b) (fabs((a) - (b)) < EPS)\n\n// 点类\nclass Point {\npublic :\n\tdouble x, y;\n\tPoint() {};\n\tPoint(double x, double y) :x(x), y(y) {}\n\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a) { return Point(x * a, y * a); }\n\tPoint operator / (double a) { return Point(x / a, y / a); }\n\t\n\tbool operator < (const Point &p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p) const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\n// 线段类\nclass Segment {\npublic:\n\tPoint p1, p2;\n\tSegment() {};\n\tSegment(Point p1, Point p2) :p1(p1), p2(p2) {};\n};\n// 圆类\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle() {};\n\tCircle(Point c, double r) :c(c), r(r) {}\n};\n// 定义向量\ntypedef Point Vector;\n// 定义直线\ntypedef Segment Line;\n// 定义多边形\ntypedef vector<Point> Polygon;\n\n/***************************点、向量****************************/\n\ndouble norm(Point p) { return p.x * p.x + p.y * p.y; }\ndouble abs(Point p) { return sqrt(norm(p)); }\n\n// 向量的内积\ndouble dot(Point a, Point b) {\n\treturn a.x * b.x + a.y * b.y;\n}\n// 向量的外积\ndouble cross(Point a, Point b) {\n\treturn a.x * b.y - a.y * b.x;\n}\n\n// 向量a，b是否正交 <==> 内积为0\nbool isOrthogonal(Vector a, Vector b) {\n\treturn equals(dot(a, b), 0.0);\n}\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n\treturn equals(dot(a1 - a2, b1 - b2), 0.0);\n}\n\n// 向量a，b是否平行 <==> 外积为0\nbool isParallel(Vector a, Vector b) {\n\treturn equals(cross(a, b), 0.0);\n}\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n\treturn equals(cross(a1 - a2, b1 - b2), 0.0);\n}\n\n// 点p在线段s上的投影\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / norm(base);\n\treturn s.p1 + base * r ;\n}\n\n//以线段s为对称轴与点p成线对称的点\nPoint reflect(Segment s, Point p) {\n\treturn p + (project(s, p) - p) * 2.0;\n}\n\n// 点a到点b的距离\ndouble getDistance(Point a, Point b) {\n\treturn abs(a - b);\n}\n\n// 线段l和点p的距离\ndouble getDistanceLP(Line l, Point p) {\n\treturn abs( cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1) );\n}\n\n// 线段s与点p的距离\ndouble getDistanceSP(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0)\n\t\treturn abs(p - s.p1);\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0)\n\t\treturn abs(p - s.p2);\n\treturn getDistanceLP(s, p);\n}\n\n\n\n/*************************线段********************************/\n// 线段s1，s2是否正交 <==> 内积为0\nbool isOrthogonal(Segment s1, Segment s2) {\n\treturn equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n// 线段s1，s2是否平行 <==> 外积为0\nbool isParallel(Segment s1, Segment s2) {\n\treturn equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n// 逆时针方向ccw（Counter-Clockwise）\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS) return CLOCKWISE;\n\tif (dot(a, b) < -EPS) return ONLINE_BACK;\n\tif (norm(a) < norm(b)) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\n// 判断线段p1p2和线段p3p4是否相交\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n\treturn (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n\t\tccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\n\n//判断线段s1和s2是否相交\nbool intersect(Segment s1, Segment s2) {\n\treturn intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\n// 线段s1和线段s2的距离\ndouble getDistance(Segment s1, Segment s2) {\n\t// 相交\n\tif (intersect(s1, s2))\n\t\treturn 0.0;\n\treturn min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n\t\tmin(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\n// 线段s1与线段s2的交点\nPoint getCrossPoint(Segment s1, Segment s2) {\n\tVector base = s2.p2 - s2.p1;\n\tdouble d1 = abs(cross(base, s1.p1 - s2.p1));\n\tdouble d2 = abs(cross(base, s1.p2 - s2.p1));\n\tdouble t = d1 / (d1 + d2);\n\treturn s1.p1 + (s1.p2 - s1.p1) * t;\n}\n\n/***************************圆****************************/\n\n// 圆c和直线l的交点\npair<Point, Point> getCrossPoints(Circle c, Line l) {\n\tVector pr = project(l, c.c);\n\tVector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);\n\tdouble base = sqrt(c.r * c.r - norm(pr - c.c));\n\treturn make_pair(pr + e * base, pr - e * base);\n}\n\n// 圆c1和圆c2的交点\ndouble arg(Vector p) { return atan2(p.y, p.x); }\nVector polar(double a, double r) { return Point(cos(r) * a, sin(r) * a); }\n\npair<Point, Point> getCrossPoints(Circle c1, Circle c2) {\n\tdouble d = abs(c1.c - c2.c);\n\tdouble a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n\tdouble t = arg(c2.c - c1.c);\n\treturn make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n}\n\n/***************************多边形****************************/\n// 点的内包\n/*\n\tIN 2\n\tON 1\n\tOUT 0\n*/\nint contains(Polygon g, Point p) {\n\tint n = g.size();\n\tbool x = false;\n\tfor (int i = 0; i < n; i++) {\n\t\tPoint a = g[i] - p, b = g[(i + 1) % n] - p;\n\t\tif (abs(cross(a, b)) < EPS && dot(a, b) < EPS) return 1;\n\t\tif (a.y > b.y) swap(a, b);\n\t\tif (a.y < EPS && EPS < b.y && cross(a, b) > EPS)\n\t\t\tx = !x;\n\t}\n\treturn (x ? 2 : 0);\n}\n\n// 凸包\nPolygon andrewScan(Polygon s) {\n\tPolygon u, l;\n\tint len = s.size();\n\tif (len < 3) return s;\n\t// 以x，y为基准升序排序\n\tsort(s.begin(), s.end());\n\t// 将x值最小的两个点添加到u\n\tu.push_back(s[0]);\n\tu.push_back(s[1]);\n\n\t// 将x值最大的两个点添加到l\n\tl.push_back(s[len - 1]);\n\tl.push_back(s[len - 2]);\n\n\t// 构建凸包上部\n\tfor (int i = 2; i < len; i++) {\n\t\tfor (int j = u.size(); j >= 2 && ccw(u[j - 2], u[j - 1], s[i]) != CLOCKWISE; j--)\n\t\t\tu.pop_back();\n\t\tu.push_back(s[i]);\n\t}\n\n\t// 构建凸包下部\n\tfor (int i = len - 3; i >= 0; i--) {\n\t\tfor (int j = l.size(); j >= 2 && ccw(l[j - 2], l[j - 1], s[i]) != CLOCKWISE; j--)\n\t\t\tl.pop_back();\n\t\tl.push_back(s[i]);\n\t}\n\n\t// 按顺时针方向生成凸包的点的序列\n\treverse(l.begin(), l.end());\n\tfor (int i = u.size() - 2; i >= 1; i--)\n\t\tl.push_back(u[i]);\n\n\treturn l;\n}\n\n\nint main() {\n\tSegment s1, s2;\n\tint n;\n\tscanf(\"%d\", &n);\n\twhile (n--) {\n\t\tscanf(\"%lf %lf %lf %lf %lf %lf %lf %lf\", &s1.p1.x, &s1.p1.y,\n\t\t\t&s1.p2.x, &s1.p2.y, &s2.p1.x, &s2.p1.y,\n\t\t\t&s2.p2.x, &s2.p2.y);\n\t\tprintf(\"%.10lf\\n\", getDistance(s1, s2));\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nnamespace arithmetic {\n  template<typename T> class Addition {\n  public:\n    template<typename V> T operator+(const V& v) const {\n      return T(static_cast<const T&>(*this)) += v;\n    }\n  };\n\n  template<typename T> class Subtraction {\n  public:\n    template<typename V> T operator-(const V& v) const {\n      return T(static_cast<const T&>(*this)) -= v;\n    }\n  };\n\n  template<typename T> class Multiplication {\n  public:\n    template<typename V> T operator*(const V& v) const {\n      return T(static_cast<const T&>(*this)) *= v;\n    }\n  };\n\n  template<typename T> class Division {\n  public:\n    template<typename V> T operator/(const V& v) const {\n      return T(static_cast<const T&>(*this)) /= v;\n    }\n  };\n\n  template<typename T> class Modulus {\n  public:\n    template<typename V> T operator%(const V& v) const {\n      return T(static_cast<const T&>(*this)) %= v;\n    }\n  };\n}\n\ntemplate<typename T> class IndivisibleArithmetic : public arithmetic::Addition<T>, public arithmetic::Subtraction<T>, public arithmetic::Multiplication<T> {};\n\ntemplate<typename T> class Arithmetic : public IndivisibleArithmetic<T>, public arithmetic::Division<T> {};\n\ntemplate<typename T> class Ordered {\npublic:\n  template<typename V> bool operator==(const V& v) const {\n    return !(static_cast<T>(v) < static_cast<const T&>(*this) || static_cast<const T&>(*this) < static_cast<T>(v));\n  }\n  \n  template<typename V> bool operator!=(const V& v) const {\n    return static_cast<T>(v) < static_cast<const T&>(*this) || static_cast<const T&>(*this) < static_cast<T>(v);\n  }\n\n  template<typename V> bool operator>(const V& v) const {\n    return static_cast<T>(v) < static_cast<const T&>(*this);\n  }\n\n  template<typename V> bool operator<=(const V& v) const {\n    return !(static_cast<T>(v) < static_cast<const T&>(*this));\n  }\n\n  template<typename V> bool operator>=(const V& v) const {\n    return !(static_cast<const T&>(*this) < static_cast<T>(v));\n  }\n};\n\ntemplate<typename T> inline T gcd(T a, T b) {\n  return __gcd(a, b);\n}\n\ntemplate<typename T> inline T lcm(T a, T b) {\n  return a / gcd(a, b) * b;\n}\n\ntemplate<typename T> inline T floor(T a, T b) {\n  return floor(a / b) * b <= a ? floor(a / b) : floor(a / b) - 1;\n}\n\ntemplate<typename T> inline T ceil(T a, T b) {\n  return floor(a + b - 1, b);\n}\n\ntemplate<typename T> inline T round(T a, T b) {\n  return floor(a + b / 2);\n}\n\ntemplate<typename T> inline T mod(T a, T b) {\n  return a - floor(a, b) * b;\n}\n\ntemplate<typename T> inline T factorial(T n) {\n  return n <= 1 ? 1 : factorial(n - 1) * n;\n}\n\nclass Real : public Arithmetic<Real>, public arithmetic::Modulus<Real>, public Ordered<Real> {\nprivate:\n  static long double EPS;\n  long double val;\n\n  operator long double() const {\n    return val;\n  }\n\npublic:\n  Real() {}\n\n  Real(long double val) : val(val) {}\n\n  Real operator-() const {\n    return -val;\n  }\n\n  template<typename T> Real operator+=(const T& r) {\n    val += static_cast<long double>(r);\n    return *this;\n  }\n\n  template<typename T> Real operator-=(const T& r) {\n    val -= static_cast<long double>(r);\n    return *this;\n  }\n\n  template<typename T> Real operator*=(const T& r) {\n    val *= static_cast<long double>(r);\n    return *this;\n  }\n\n  template<typename T> Real operator/=(const T& r) {\n    val /= static_cast<long double>(r);\n    return *this;\n  }\n\n  template<typename T> Real operator%=(const T& r) {\n    return *this = mod(*this, static_cast<Real>(r));\n  }\n\n  template<typename T> Real operator-(const T& v) const {\n    return Real(*this) -= v;\n  }\n\n  template<typename T> bool operator<(const T r) const {\n    return val < static_cast<long double>(r) - EPS;\n  }\n\n  Real abs() const {\n    return std::abs(val);\n  }\n\n  Real sqrt() const {\n    return std::sqrt(val);\n  }\n\n  long double toLongDouble() const {\n    return val;\n  }\n};\n\nlong double Real::EPS = 1e-8;\n\ninline ostream& operator<<(ostream& os, const Real& a) {\n  os << fixed << setprecision(15) << a.toLongDouble();\n  return os;\n}\n\ninline istream& operator>>(istream& is, Real& a) {\n\tlong double n;\n\tis >> n;\n\ta = n;\n\treturn is;\n}\n\nReal floor(const Real& r) {\n  return floor(r.toLongDouble());\n}\n\nclass Point : public Arithmetic<Point> {\npublic:\n  Real x, y;\n\n  Point() {}\n\n  Point(const Real& x) : x(x), y(0) {}\n\n  Point(const Real& x, const Real& y) : x(x), y(y) {}\n\n  Point operator+=(const Point& p) {\n    x += p.x;\n    y += p.y;\n    return *this;\n  }\n\n  Point operator-=(const Point& p) {\n    x -= p.x;\n    y -= p.y;\n    return *this;\n  }\n\n  Point operator*=(const Point& p) {\n    Real xx = x * p.x - y * p.y;\n    y = x * p.y + y * p.x;\n    x = xx;\n    return *this;\n  }\n\n  Point operator*=(const Real& r) {\n    x *= r;\n    y *= r;\n    return *this;\n  }\n\n  Point operator/=(const Point& p) {\n    Real nrm = p.norm();\n    Real xx = (x * p.x + y * p.y) / nrm;\n    y = (y * p.x - x * p.y) / nrm;\n    x = xx;\n    return *this;\n  }\n\n  Point operator/=(const Real& r) {\n    x /= r;\n    y /= r;\n    return *this;\n  }\n\n  Real norm() const {\n    return x * x + y * y;\n  }\n\n  Real abs() const {\n    return norm().sqrt();\n  }\n\n  Point conj() const {\n    return Point(x, -y);\n  }\n};\n\ninline Point operator*(const Real& real, const Point& point) {\n  return point * real;\n}\n\ninline Point operator/(const Real& real, const Point& point) {\n  return point / real;\n}\n\ninline ostream& operator<<(ostream& os, const Point& point) {\n\tos << point.x << \" \" << point.y;\n\treturn os;\n}\n\ninline istream& operator>>(istream& is, Point& point) {\n  Real x, y;\n\tis >> x >> y;\n\tpoint = Point(x, y);\n\treturn is;\n}\n\nclass Line {\npublic:\n  Point a, b;\n\n  Line() {}\n\n  Line (const Point& a, const Point& b) : a(a), b(b) {}\n\n  bool operator==(const Line& line) const {\n    return ((line.vec() / vec()).y == 0) && (((line.a - a) / vec()).y == 0);\n  }\n\n  Point vec() const {\n    return b - a;\n  }\n};\n\ninline ostream& operator<<(ostream& os, const Line& line) {\n\tos << line.a << \" \" << line.b;\n\treturn os;\n}\n\ninline istream& operator>>(istream& is, Line& line) {\n  Point a, b;\n  is >> a >> b;\n  line = Line(a, b);\n  return is;\n}\n\nclass Segment : public Line {\npublic:\n  Segment() {}\n\n  Segment (const Point& a, const Point& b) : Line(a, b) {}\n};\n\nenum CCW{LEFT = 1, RIGHT = 2, BACK = 4, FRONT = 8, ON = 16};\n\nint ccw(const Segment& segment, const Point& point) {\n  Point p = (point - segment.a) / segment.vec();\n  if (p.y > 0) return LEFT;\n  if (p.y < 0) return RIGHT;\n  if (p.x < 0) return BACK;\n  if (p.x > 1) return FRONT;\n  return ON;\n}\n\ntemplate<bool strict = false> inline bool intersect(const Line& line1, const Line& line2) {\n  if (strict) return (line1.vec() / line2.vec()).y != 0;\n  return ((line1.vec() / line2.vec()).y != 0) || (line1 == line2);\n}\n\ntemplate<bool strict = false> inline bool intersect(const Line& line, const Segment& segment) {\n  Point p1 = segment.a / line.vec(), p2 = segment.b / line.vec();\n  if (strict) return p1.y * p2.y < 0;\n  return p1.y * p2.y <= 0;\n}\n\ntemplate<bool strict = false> inline bool intersect(const Segment& segment, const Line& line) {\n  return intersect(line, segment);\n}\n\ntemplate<bool strict = false> inline bool intersect(const Segment& segment1, const Segment& segment2) {\n  int ccw1 = ccw(segment1, segment2.a) | ccw(segment1, segment2.b);\n  int ccw2 = ccw(segment2, segment1.a) | ccw(segment2, segment1.b);\n  if (strict) return (ccw1 & ccw2) == (LEFT | RIGHT);\n  return ((ccw1 & ccw2) == (LEFT | RIGHT)) || ((ccw1 | ccw2) & ON);\n}\n\ninline Real distance(const Segment& segment, const Point& point) {\n  Point p = (point - segment.a) / segment.vec();\n  if (p.x < 0) return (p * segment.vec()).abs();\n  if (p.x > 1) return ((p - Point(1, 0)) * segment.vec()).abs();\n  return (p.y * segment.vec()).abs();\n}\n\ninline Real distance(const Segment& segment1, const Segment& segment2) {\n  if (intersect(segment1, segment2)) return 0;\n  return min(min(distance(segment1, segment2.a), distance(segment1, segment2.a)), min(distance(segment2, segment1.a), distance(segment2, segment1.a)));\n}\n\nint main() {\n  int q;\n  cin >> q;\n  for (int i = 0; i < q; ++i) {\n    Segment segment1, segment2;\n    cin >> segment1 >> segment2;\n    cout << distance(segment1, segment2) << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <iomanip>\n#include <iostream>\n#include <iterator>\n#include <ostream>\n#include <vector>\n\nconst double kEpsilon = 1e-10;\ninline bool equals(double a, double b)\n{\n    return fabs(a - b) < kEpsilon;\n}\n\nclass Point\n{\n  public:\n    double x, y;\n\n    Point() = default;\n    Point(double x, double y) : x(x), y(y)\n    {\n    }\n\n    Point operator+(const Point &p)\n    {\n        return Point(x + p.x, y + p.y);\n    }\n    Point operator-(const Point &p)\n    {\n        return Point(x - p.x, y - p.y);\n    }\n    Point operator*(const double k)\n    {\n        return Point(x * k, y * k);\n    }\n\n    double SquaredNorm()\n    {\n        return x * x + y * y;\n    }\n    double abs()\n    {\n        return sqrt(this->SquaredNorm());\n    }\n\n    bool operator<(const Point &p) const\n    {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n    bool operator==(const Point &p) const\n    {\n        return fabs(x - p.x) < kEpsilon && fabs(y - p.y) < kEpsilon;\n    }\n\n    double dot(const Point &p) const\n    {\n        return x * p.x + y * p.y;\n    }\n    double cross(const Point &p) const\n    {\n        return x * p.y - y * p.x;\n    }\n};\n\ndouble dot(const Point &p1, const Point &p2)\n{\n    return p1.x * p2.x + p1.y * p2.y;\n}\ndouble cross(const Point &p1, const Point &p2)\n{\n    return p1.x * p2.y - p1.y * p2.x;\n}\n\nusing Vector = Point;\n\nstruct Segment\n{\n    Point p1, p2;\n\n    Segment() = default;\n    Segment(Point p1, Point p2) : p1(p1), p2(p2)\n    {\n    }\n};\n\nstruct Line\n{\n    Point p1, p2;\n\n    Line() = default;\n    Line(Point &p1, Point &p2) : p1(p1), p2(p2)\n    {\n    }\n    Line(Segment &s) : p1(s.p1), p2(s.p2)\n    {\n    }\n};\n\nint ccw(Point &p0, Point &p1, Point &p2)\n{\n    auto a = p1 - p0;\n    auto b = p2 - p0;\n\n    auto cross_z = a.cross(b);\n\n    if (cross_z > 0.0)\n        return 1;\n    else if (cross_z < 0.0)\n        return -1;\n    else\n    {\n        auto dot_prod = a.dot(b);\n        if (dot_prod < 0.0)\n            return 100;\n        else if (b.abs() > a.abs())\n            return -100;\n        else\n        {\n            return 0;\n        }\n    }\n}\n\nbool intersection(Segment &s1, Segment &s2)\n{\n    return ccw(s1.p1, s1.p2, s2.p1) * ccw(s1.p1, s1.p2, s2.p2) <= 0.0 &&\n           ccw(s2.p1, s2.p2, s1.p1) * ccw(s2.p1, s2.p2, s1.p2) <= 0.0;\n}\n\ndouble distance(Point &a, Point &b)\n{\n    return (a - b).abs();\n}\n\ndouble distance(Point &p, Line &l)\n{\n    auto q = l.p1 - l.p2;\n    auto r = p - l.p2;\n    return fabs(r.cross(q)) / q.abs();\n}\n\ndouble distance(Point &p, Segment &s)\n{\n    auto q1 = s.p2 - s.p1;\n    auto q2 = p - s.p1;\n    auto r1 = s.p1 - s.p2;\n    auto r2 = p - s.p2;\n    if (q1.dot(q2) >= 0.0 && r1.dot(r2) >= 0.0)\n    {\n        Line l(s);\n        return distance(p, l);\n    }\n    else\n    {\n        return std::min(distance(p, s.p1), distance(p, s.p2));\n    }\n}\n\ndouble distance(Segment &s1, Segment &s2)\n{\n    if (intersection(s1, s2))\n        return 0.0;\n    return std::min(std::min(distance(s1.p1, s2), distance(s1.p2, s2)),\n                    std::min(distance(s2.p1, s1), distance(s2.p2, s1)));\n}\n\nint main()\n{\n    Segment s1, s2;\n    int q;\n    std::cin >> q;\n\n    for (size_t i = 0; i < q; ++i)\n    {\n        std::cin >> s1.p1.x >> s1.p1.y;\n        std::cin >> s1.p2.x >> s1.p2.y;\n        std::cin >> s2.p1.x >> s2.p1.y;\n        std::cin >> s2.p2.x >> s2.p2.y;\n\n        std::cout << std::setprecision(20);\n        std::cout << distance(s1, s2) << std::endl;\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cmath>\n#include <algorithm>\nusing namespace std;\n\n#define equals(a, b) (fabs((a)-(b)) < EPS)\nconst double EPS = (1e-10);\n\nclass Point {\npublic:\n    double x, y;\n\n    Point(double x = 0, double y = 0): x(x), y(y) {}\n\n    Point operator + (Point p) {\n        return Point(x+p.x, y+p.y);\n    }\n    Point operator - (Point p) {\n        return Point(x-p.x, y-p.y);\n    }\n    Point operator * (double a) {\n        return Point(x*a, y*a);\n    }\n    Point operator / (double a) {\n        return Point(x/a, y/a);\n    }\n\n    double abs() {\n        return sqrt(norm());\n    }\n    double norm() {\n        return x*x + y*y;\n    }\n\n    bool operator < (const Point &p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point &p) const {\n        return fabs(x-p.x) < EPS && fabs(y-p.y) < EPS;\n    }\n};\n\ntypedef Point Vector;\n// 内積\ndouble dot(Vector a, Vector b) {\n    return a.x*b.x + a.y*b.y;\n}\n// 外積\ndouble cross(Vector a, Vector b) {\n    return a.x*b.y - a.y*b.x;\n}\n\nclass Segment {\npublic:\n    Point p1, p2;\n\n    Segment(Point p1, Point p2): p1(p1), p2(p2) {}\n};\ntypedef Segment Line;\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\nint ccw(Point p0, Point p1, Point p2) {\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n\n    if (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n    if (cross(a, b) < -EPS) return CLOCKWISE;\n    if (dot(a, b) < -EPS) return ONLINE_BACK;\n    if (a.norm() < b.norm()) return ONLINE_FRONT;\n\n    return ON_SEGMENT;\n}\n\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n    return (ccw(p1, p2, p3)*ccw(p1, p2, p4) <= 0 &&\n            ccw(p3, p4, p1)*ccw(p3, p4, p2) <= 0);\n}\nbool intersect(Segment s1, Segment s2) {\n    return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\ndouble getDistanceLP(Line l, Point p) {\n    return abs(cross(l.p2-l.p1, p-l.p1) / (l.p2-l.p1).abs());\n}\ndouble getDistanceSP(Segment s, Point p) {\n    if (dot(s.p2-s.p1, p-s.p1) < 0.0) return (p-s.p1).abs();\n    if (dot(s.p1-s.p2, p-s.p2) < 0.0) return (p-s.p2).abs();\n    return getDistanceLP(s, p);\n}\ndouble getDistance(Segment s1, Segment s2) {\n    if (intersect(s1, s2)) return 0.0;\n    return min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n               min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p1)));\n}\n\n\n\nint main(void) {\n    int q; cin >> q;\n    double x0, y0, x1, y1, x2, y2, x3, y3;\n    for (int i = 0; i < q; i++) {\n        cin >> x0 >> y0 >> x1 >> y1\n            >> x2 >> y2 >> x3 >> y3;\n        Segment s1(Point(x0, y0), Point(x1, y1));\n        Segment s2(Point(x2, y2), Point(x3, y3));\n\n        printf(\"%.9f\\n\", getDistance(s1, s2));\n    }\n    return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<math.h>\n#include<stdlib.h>\n#define max(a,b) a<b?b:a\n#define min(a,b) a<b?b:a\n#define POW2(a)  a*a\n#define ROOP(i,n) for(i = 0;i < n;i++)\n#define _USE_MATH_DEFINES\n\ntypedef struct POINT{\n\tdouble x;\n\tdouble y;\n}POINT;\ntypedef struct LINE{\n\tPOINT s;//start point\n\tPOINT e;//end point\n}LINE;\ntypedef struct COMPLEX{\n\tdouble r;//?????¢\n\tdouble q;//????§???????theta\n}COMPLEX;\n\n//POINT????????????\nvoid print_p(POINT a){\n\tprintf(\"(%lf,%lf)\\n\",a.x,a.y);\n}\n\n//LINE????????????\nvoid print_l(LINE a){\n\tprintf(\"(%lf,%lf) -> (%lf,%lf)\\n\",(a.s).x,(a.s).y,(a.e).x,(a.e).y);\n}\n\n//COMPLEX????????????\nvoid print_c(COMPLEX a){\n\tprintf(\"(%lf,%lf)\\n\",a.r,a.q);\n}\n\n//????????????????????¢?????????\ndouble norm2(POINT a){\n\treturn POW2(a.x)+POW2(a.y);\n}\n\n//????????????????????¢\ndouble norm(POINT a){\n\treturn sqrt(norm2(a));\n}\n\n//a->b?????´??§???????????????\nPOINT make_vec(POINT a,POINT b){\n\tb.x -= a.x;\n\tb.y -= a.y;\n\treturn b;\n}\n\n//2???a,b???????????¢\ndouble distance(POINT a,POINT b){\n\treturn norm(make_vec(a,b));\n}\n\n//??´??§????????????\nPOINT sum_vec(POINT a,POINT b){\n\ta.x += b.x;\n\ta.y += b.y;\n\treturn a;\n}\n\n//??´??§????????????\n//mkae_vec??¨?????£??????????????¨???????????????\n//??????????????????\nPOINT dif_vec(POINT a,POINT b){\n\ta.x -= b.x;\n\ta.y -= b.y;\n\treturn a;\n}\n\n//??´??§????????????????????????\nPOINT scalar_vec(POINT a,double k){\n\ta.x *= k;\n\ta.y *= k;\n\treturn a;\n}\n\n//???????????????\nPOINT minus_vec(POINT a){\n\treturn scalar_vec(a,-1.0);\n}\n\n//??????\ndouble dot(POINT a,POINT b){\n\treturn a.x*b.x + a.y*b.y;\n}\n\n//??????\ndouble cross(POINT a,POINT b){\n\treturn a.x*b.y - a.y*b.x;\n}\n\n//AP:PB=t:s??¨?????????????±???????\n//k, 0:??????, 1:??????\n//* t:(1-t)??§???????????£??????????????£????????????????????????????????????????????????????????¨?????£???\nPOINT division(POINT a,POINT b,double t,double s,int k){\n\tdouble tmp = t + s * (1 - k*2);\n\ta.x += (make_vec(a,b)).x / tmp * t;\n\ta.y += (make_vec(a,b)).y / tmp * t;\n\treturn a;\n}\n\n//???p????????´???a?????????????????????????¶??????????\nPOINT perpendicular(LINE a,POINT p){\n\tPOINT ps = make_vec(p,a.s);\n\tPOINT pe = make_vec(p,a.e);\n\tdouble t = norm2(ps) - dot(ps,pe);\n\tdouble s = norm2(pe) - dot(ps,pe);\n\treturn division(a.s,a.e,t,s,0);\n}\n\n//??´???a???????????????p??¨????§°???????????????\nPOINT reflection(LINE a,POINT p){\n\tPOINT h = perpendicular(a,p);\n\treturn sum_vec(h,make_vec(p,h));\n}\n\n//* ????§???¢?????????\nint inclusion(POINT a[],int n,POINT p){\n\tint ans = 0;\n\tint i;\n\tPOINT g[n+1];\n\tdouble w,rad = 0.0;\n\n\tfor(i = 0;i < n;i++){\n\t\tg[i] = a[i];\n\t}\n\tg[n] = g[0];\n\n\tfor(i = 0;i < n;i++){\n\t\tif(g[i].x == p.x && g[i].y == p.y){\n\t\t\treturn ans = 1;\n\t\t}\n\t}\n\tfor(i = 0;i < n;i++){\n\t\tw = atan2(cross(make_vec(p,g[i]),make_vec(p,g[i+1])),\n\t\t\t\tdot(make_vec(p,g[i]),make_vec(p,g[i+1])));\n\t\trad += w;\n\t\tif(fabs(w - M_PI) <= 0.000001 ||\n\t\t\t fabs(w + M_PI) <= 0.000001)\n\t\t\treturn ans = 1;\n\t}\n\tif(fabs(rad - M_PI*2)<=0.000001){//2??\n\t\treturn ans = 2;//in!\n\t}\n\treturn ans;\n}\n\n// a.s, a.e, p?????????????????????\n// ???????¨???????????????????????????????  1\n// ????¨?????????????????????????????????? -1\n// p, a.s, a.e????????????????????? 2\n// a.s, a.e, p?????????????????????-2\n// ???p?????´???a???????????????????????? 0\nint ccw(LINE a,POINT p){\n\tint cls = cross(make_vec(a.s,a.e),make_vec(a.s,p));\n\tif(cls > 0){\n\t\treturn  1;\n\t}else if(cls < 0){\n\t\treturn -1;\n\t}else if(dot(make_vec(a.s,a.e),make_vec(a.s,p)) < 0){\n\t\treturn  2;\n\t}else if(dot(make_vec(a.e,a.s),make_vec(a.e,p)) < 0){\n\t\treturn -2;\n\t}else{\n\t\treturn  0;\n\t}\n}\n\n// ??????????????????\nint parallel(LINE a,LINE b){\n\tif(!cross(make_vec(a.s,a.e),make_vec(b.s,b.e)))\n\t\treturn 1;\n\telse\n\t\treturn 0;\n}\n\n// ?????´????????????\nint orthogonal(LINE a,LINE b){\n\tif(!dot(make_vec(a.s,a.e),make_vec(b.s,b.e)))\n\t\treturn 1;\n\telse\n\t\treturn 0;\n}\n\n// ??????a,b???????????????????????????\nint intersection(LINE a,LINE b){\n\tif(ccw(a,b.s)*ccw(a,b.e) <= 0 &&\n\t   ccw(b,a.s)*ccw(b,a.e) <= 0)\n\t\treturn 1;\n\treturn 0;\n}\n\n//??????a,b?????????\nPOINT cross_point(LINE a,LINE b){\n\tdouble c1 = cross(make_vec(a.s,b.s),make_vec(a.s,b.e));\n\tdouble c2 = cross(make_vec(a.e,b.s),make_vec(a.e,b.e));\n\treturn division(a.s,a.e,fabs(c1),fabs(c2),0);\n}\n\n//??´???a??¨???p????????¢\ndouble distanceLP(LINE a,POINT p){\n\tif(ccw(a,p) ==  2)\n\t\treturn norm(make_vec(a.s,p));\n\tif(ccw(a,p) == -2)\n\t\treturn norm(make_vec(a.e,p));\n\treturn norm(make_vec(perpendicular(a,p),p));\n}\n\n//??´???a??¨??´???b????????¢\ndouble distanceLL(LINE a,LINE b){\n\tdouble a1,a2,a3,a4;\n\tif(intersection(a,b) == 1)\n\t\treturn 0.0000000000;\n\ta1 = distanceLP(a,b.s);\n\ta2 = distanceLP(a,b.e);\n\ta3 = distanceLP(b,a.s);\n\ta4 = distanceLP(b,a.e);\n\treturn min(a1,min(a2,min(a3,a4)));\n}\n\nint main(){\n\tLINE a,b;\n\tint k;\n\tPOINT p;\n\tscanf(\"%d\",&k);\n\twhile(k--){\n\t\tscanf(\"%lf%lf%lf%lf\",&a.s.x,&a.s.y,&a.e.x,&a.e.y);\n\t\tscanf(\"%lf%lf%lf%lf\",&b.s.x,&b.s.y,&b.e.x,&b.e.y);\n\t\tprintf(\"%.10lf\\n\",distanceLL(a,b));\n\t}\n/*\n\tPOINT a,b,q;\n\tdouble t,s;\n\n\tscanf(\"%lf%lf%lf%lf%lf%lf\",&a.x,&a.y,&b.x,&b.y,&t,&s);\n\n\tq = division(a,b,t,s,0);\n\tprintf(\"%lf %lf\\n\",q.x,q.y);\n*/\n/*\n\tLINE a;\n\tPOINT b;\n\tint k;\n\tchar s[5][100]={{\"ONLINE_FRONT\"},{\"CLOCKWISE\"},{\"ON_SEGMENT\"},{\"COUNTER_CLOCKWISE\"},{\"ONLINE_BACK\"}};\n\t\n\tscanf(\"%lf%lf%lf%lf%d\",&a.s.x,&a.s.y,&a.e.x,&a.e.y,&k);\n\twhile(k--){\n\t\tscanf(\"%lf%lf\",&b.x,&b.y);\n\t\tprintf(\"%s\\n\",s[ccw(a,b)+2]);\n\t}\n*/\n/*\n\tPOINT a,b;\n\tint k;\n\twhile(1){\n\t\tscanf(\"%lf%lf%lf%lf%d\",&a.x,&a.y,&b.x,&b.y,&k);\n\t\tprint_p(sum_vec(a,b));\n\t\tprint_p(dif_vec(a,b));\n\t\tprint_p(scalar_vec(a,k));\n\t\tprint_p(minus_vec(a));\n\t}\n*/\n/*\n\tPOINT a,b;\n\twhile(1){\n\t\tscanf(\"%lf%lf%lf%lf\",&a.x,&a.y,&b.x,&b.y);\n\t\tprintf(\"%lf\\n\",distance(a,b));\n\t}\n*/\n/*\n\tint i,m,n;\n\tPOINT g[100];//n\n\tPOINT q;//m\n\tint ans = 0;\n\n\tscanf(\"%d\",&n);\n\tfor(i = 0;i < n;i++){\n\t\tscanf(\"%lf%lf\",&g[i].x,&g[i].y);\n\t}\n\tscanf(\"%d\",&m);\n\tfor(i = 0;i < m;i++){\n\t\tscanf(\"%lf%lf\",&q.x,&q.y);\n\t\tans = inclusion(g,n,q);\n\t\tprintf(\"%d\\n\",ans);\n\t}\n*/\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<math.h>\nint ifcl(int p0[2],int p1[2],int p2[2],int p3[2]){\n  long long x=p0[0],x0=p1[0]-x,x1=p2[0]-x,x2=p3[0]-x,x3=x2-x1,x4=x0-x1,x5=-x1;\n  long long y=p0[1],y0=p1[1]-y,y1=p2[1]-y,y2=p3[1]-y,y3=y2-y1,y4=y0-y1,y5=-y1;\n  long long x7=x2-x0,y7=y2-y0;  \n  long long c1=(x0*y1-y0*x1)*(x0*y2-y0*x2),c2=(x3*y4-y3*x4)*(x3*y5-y3*x5);\n  long long d1=x1*x4+y1*y4,d2=x2*x7+y2*y7,d3=x1*x2+y1*y2,d4=x4*x7+y4*y7;\n  if(c1==0&&c2==0)return (d1<0&&d2>0&&d3>0&&d4<0)?0:1;\n  return (c1<=0&&c2<=0)?1:0;\n}\ndouble dMIN(double a,double b){return a<b?a:b;}\ndouble dspl(int p0[2],int p1[2],int p2[2]){\n  int a=p0[1]-p1[1],b=p0[0]-p1[0],c=p0[0]*p1[1]-p1[0]*p0[1];\n  int d=p2[1]-p1[1],e=p2[0]-p1[0],f=p2[1]-p0[1],g=p2[0]-p0[0];\n  if(a*d+b*e<0||a*f+b*g>0)return dMIN(hypot(d,e),hypot(f,g));\n  return abs(p2[0]*a-p2[1]*b+c)/hypot(a,b);\n}\ndouble dsll(int *p0,int *p1,int *p2,int *p3){\n  double l=dMIN(dMIN(dspl(p2,p3,p0),dspl(p2,p3,p1)),\n\t\tdMIN(dspl(p0,p1,p2),dspl(p0,p1,p3)));\n  if(ifcl(p0,p1,p2,p3))l=0;\n  return l;\n}\nint main(){\n  int p[4][2],n,i;\n  scanf(\"%d\",&n);\n  while(n--){\n    for(i=0;i<8;i++)scanf(\" %d\",&p[i/2][i%2]);\n    printf(\"%.9f\\n\",dsll(p[0],p[1],p[2],p[3]));\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<math.h>\n#include<stdlib.h>\n#define max(a,b) a<b?b:a\n#define min(a,b) a<b?b:a\n#define POW2(a)  a*a\n#define ROOP(i,n) for(i = 0;i < n;i++)\n#define _USE_MATH_DEFINES\n\ntypedef struct POINT{\n\tdouble x;\n\tdouble y;\n}POINT;\ntypedef struct LINE{\n\tPOINT s;//start point\n\tPOINT e;//end point\n}LINE;\ntypedef struct COMPLEX{\n\tdouble r;//?????¢\n\tdouble q;//????§???????theta\n}COMPLEX;\n\n//POINT????????????\nvoid print_p(POINT a){\n\tprintf(\"(%lf,%lf)\\n\",a.x,a.y);\n}\n\n//LINE????????????\nvoid print_l(LINE a){\n\tprintf(\"(%lf,%lf) -> (%lf,%lf)\\n\",(a.s).x,(a.s).y,(a.e).x,(a.e).y);\n}\n\n//COMPLEX????????????\nvoid print_c(COMPLEX a){\n\tprintf(\"(%lf,%lf)\\n\",a.r,a.q);\n}\n\n//????????????????????¢?????????\ndouble norm2(POINT a){\n\treturn POW2(a.x)+POW2(a.y);\n}\n\n//????????????????????¢\ndouble norm(POINT a){\n\treturn sqrt(norm2(a));\n}\n\n//a->b?????´??§???????????????\nPOINT make_vec(POINT a,POINT b){\n\tb.x -= a.x;\n\tb.y -= a.y;\n\treturn b;\n}\n\n//2???a,b???????????¢\ndouble distance(POINT a,POINT b){\n\treturn norm(make_vec(a,b));\n}\n\n//??´??§????????????\nPOINT sum_vec(POINT a,POINT b){\n\ta.x += b.x;\n\ta.y += b.y;\n\treturn a;\n}\n\n//??´??§????????????\n//mkae_vec??¨?????£??????????????¨???????????????\n//??????????????????\nPOINT dif_vec(POINT a,POINT b){\n\ta.x -= b.x;\n\ta.y -= b.y;\n\treturn a;\n}\n\n//??´??§????????????????????????\nPOINT scalar_vec(POINT a,double k){\n\ta.x *= k;\n\ta.y *= k;\n\treturn a;\n}\n\n//???????????????\nPOINT minus_vec(POINT a){\n\treturn scalar_vec(a,-1.0);\n}\n\n//??????\ndouble dot(POINT a,POINT b){\n\treturn a.x*b.x + a.y*b.y;\n}\n\n//??????\ndouble cross(POINT a,POINT b){\n\treturn a.x*b.y - a.y*b.x;\n}\n\n//AP:PB=t:s??¨?????????????±???????\n//k, 0:??????, 1:??????\n//* t:(1-t)??§???????????£??????????????£????????????????????????????????????????????????????????¨?????£???\nPOINT division(POINT a,POINT b,double t,double s,int k){\n\tdouble tmp = t + s * (1 - k*2);\n\ta.x += (make_vec(a,b)).x / tmp * t;\n\ta.y += (make_vec(a,b)).y / tmp * t;\n\treturn a;\n}\n\n//???p????????´???a?????????????????????????¶??????????\nPOINT perpendicular(LINE a,POINT p){\n\tPOINT ps = make_vec(p,a.s);\n\tPOINT pe = make_vec(p,a.e);\n\tdouble t = norm2(ps) - dot(ps,pe);\n\tdouble s = norm2(pe) - dot(ps,pe);\n\treturn division(a.s,a.e,t,s,0);\n}\n\n//??´???a???????????????p??¨????§°???????????????\nPOINT reflection(LINE a,POINT p){\n\tPOINT h = perpendicular(a,p);\n\treturn sum_vec(h,make_vec(p,h));\n}\n\n//* ????§???¢?????????\nint inclusion(POINT a[],int n,POINT p){\n\tint ans = 0;\n\tint i;\n\tPOINT g[n+1];\n\tdouble w,rad = 0.0;\n\n\tfor(i = 0;i < n;i++){\n\t\tg[i] = a[i];\n\t}\n\tg[n] = g[0];\n\n\tfor(i = 0;i < n;i++){\n\t\tif(g[i].x == p.x && g[i].y == p.y){\n\t\t\treturn ans = 1;\n\t\t}\n\t}\n\tfor(i = 0;i < n;i++){\n\t\tw = atan2(cross(make_vec(p,g[i]),make_vec(p,g[i+1])),\n\t\t\t\tdot(make_vec(p,g[i]),make_vec(p,g[i+1])));\n\t\trad += w;\n\t\tif(fabs(w - M_PI) <= 0.000001 ||\n\t\t\t fabs(w + M_PI) <= 0.000001)\n\t\t\treturn ans = 1;\n\t}\n\tif(fabs(rad - M_PI*2)<=0.000001){//2??\n\t\treturn ans = 2;//in!\n\t}\n\treturn ans;\n}\n\n// a.s, a.e, p?????????????????????\n// ???????¨???????????????????????????????  1\n// ????¨?????????????????????????????????? -1\n// p, a.s, a.e????????????????????? 2\n// a.s, a.e, p?????????????????????-2\n// ???p?????´???a???????????????????????? 0\nint ccw(LINE a,POINT p){\n\tint cls = cross(make_vec(a.s,a.e),make_vec(a.s,p));\n\tif(cls > 0){\n\t\treturn  1;\n\t}else if(cls < 0){\n\t\treturn -1;\n\t}else if(dot(make_vec(a.s,a.e),make_vec(a.s,p)) < 0){\n\t\treturn  2;\n\t}else if(dot(make_vec(a.e,a.s),make_vec(a.e,p)) < 0){\n\t\treturn -2;\n\t}else{\n\t\treturn  0;\n\t}\n}\n\n// ??????????????????\nint parallel(LINE a,LINE b){\n\tif(!cross(make_vec(a.s,a.e),make_vec(b.s,b.e)))\n\t\treturn 1;\n\telse\n\t\treturn 0;\n}\n\n// ?????´????????????\nint orthogonal(LINE a,LINE b){\n\tif(!dot(make_vec(a.s,a.e),make_vec(b.s,b.e)))\n\t\treturn 1;\n\telse\n\t\treturn 0;\n}\n\n// ??????a,b???????????????????????????\nint intersection(LINE a,LINE b){\n\tif(ccw(a,b.s)*ccw(a,b.e) <= 0 &&\n\t   ccw(b,a.s)*ccw(b,a.e) <= 0)\n\t\treturn 1;\n\treturn 0;\n}\n\n//??????a,b?????????\nPOINT cross_point(LINE a,LINE b){\n\tdouble c1 = cross(make_vec(a.s,b.s),make_vec(a.s,b.e));\n\tdouble c2 = cross(make_vec(a.e,b.s),make_vec(a.e,b.e));\n\treturn division(a.s,a.e,fabs(c1),fabs(c2),0);\n}\n\n//??´???a??¨???p????????¢\ndouble distanceLP(LINE a,POINT p){\n\tif(ccw(a,p) ==  2)\n\t\treturn norm(make_vec(a.s,p));\n\tif(ccw(a,p) == -2)\n\t\treturn norm(make_vec(a.e,p));\n\treturn norm(make_vec(perpendicular(a,p),p));\n}\n\n//??´???a??¨??´???b????????¢\ndouble distanceLP(LINE a,LINE b){\n\tdouble a1,a2,a3,a4;\n\tif(intersection(a,b) == 1)\n\t\treturn 0.0000000000;\n\ta1 = distanceLP(a,b.s);\n\ta2 = distanceLP(a,b.e);\n\ta3 = distanceLP(b,a.s);\n\ta4 = distanceLP(b,a.e);\n\treturn min(a1,min(a2,min(a3,a4)));\n}\n\nint main(){\n\tLINE a,b;\n\tint k;\n\tPOINT p;\n\tscanf(\"%d\",&k);\n\twhile(k--){\n\t\tscanf(\"%lf%lf%lf%lf\",&a.s.x,&a.s.y,&a.e.x,&a.e.y);\n\t\tscanf(\"%lf%lf%lf%lf\",&b.s.x,&b.s.y,&b.e.x,&b.e.y);\n\t\tprintf(\"%.10lf\\n\",distanceLL(a,b));\n\t}\n/*\n\tPOINT a,b,q;\n\tdouble t,s;\n\n\tscanf(\"%lf%lf%lf%lf%lf%lf\",&a.x,&a.y,&b.x,&b.y,&t,&s);\n\n\tq = division(a,b,t,s,0);\n\tprintf(\"%lf %lf\\n\",q.x,q.y);\n*/\n/*\n\tLINE a;\n\tPOINT b;\n\tint k;\n\tchar s[5][100]={{\"ONLINE_FRONT\"},{\"CLOCKWISE\"},{\"ON_SEGMENT\"},{\"COUNTER_CLOCKWISE\"},{\"ONLINE_BACK\"}};\n\t\n\tscanf(\"%lf%lf%lf%lf%d\",&a.s.x,&a.s.y,&a.e.x,&a.e.y,&k);\n\twhile(k--){\n\t\tscanf(\"%lf%lf\",&b.x,&b.y);\n\t\tprintf(\"%s\\n\",s[ccw(a,b)+2]);\n\t}\n*/\n/*\n\tPOINT a,b;\n\tint k;\n\twhile(1){\n\t\tscanf(\"%lf%lf%lf%lf%d\",&a.x,&a.y,&b.x,&b.y,&k);\n\t\tprint_p(sum_vec(a,b));\n\t\tprint_p(dif_vec(a,b));\n\t\tprint_p(scalar_vec(a,k));\n\t\tprint_p(minus_vec(a));\n\t}\n*/\n/*\n\tPOINT a,b;\n\twhile(1){\n\t\tscanf(\"%lf%lf%lf%lf\",&a.x,&a.y,&b.x,&b.y);\n\t\tprintf(\"%lf\\n\",distance(a,b));\n\t}\n*/\n/*\n\tint i,m,n;\n\tPOINT g[100];//n\n\tPOINT q;//m\n\tint ans = 0;\n\n\tscanf(\"%d\",&n);\n\tfor(i = 0;i < n;i++){\n\t\tscanf(\"%lf%lf\",&g[i].x,&g[i].y);\n\t}\n\tscanf(\"%d\",&m);\n\tfor(i = 0;i < m;i++){\n\t\tscanf(\"%lf%lf\",&q.x,&q.y);\n\t\tans = inclusion(g,n,q);\n\t\tprintf(\"%d\\n\",ans);\n\t}\n*/\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "// AOJ CGL_2_D Distance\n// 2018.5.2 bal4u\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\ntypedef struct { double x, y; } PP;\ntypedef struct { PP s, e; } SEG, LINE;\n\n#define INF\t\t\t1e8\n#define EPS\t\t\t1e-8\n#define EQ(a,b)\t\t(fabs((a)-(b))<EPS)\n#define PPeQ(a,b)\t(EQ(a.x,b.x)&&EQ(a.y,b.y))\n\nint dcmp(double x) { if (fabs(x) < EPS) return 0; return x <= 0 ? -1 : 1; }\nPP vset(double x, double y) { PP r; r.x = x, r.y = y; return r; }\nPP vadd(PP p1, PP p2) { PP r; r.x = p1.x + p2.x, r.y = p1.y + p2.y; return r; }\nPP vsub(PP p1, PP p2) { PP r; r.x = p1.x - p2.x, r.y = p1.y - p2.y; return r; }\nPP vsmul(PP p, double k) { PP r; r.x = p.x * k, r.y = p.y * k; return r; }\nPP vmul(PP p1, PP p2) { PP r;\n\tr.x = p1.x * p2.x - p1.y * p2.y, r.y = p1.x * p2.y + p1.y * p2.x; return r; }\ndouble vabs(PP a) { return hypot(a.x, a.y); }\ndouble dist(PP p1, PP p2) {\treturn hypot(p1.x-p2.x, p1.y-p2.y); };\ndouble cross(PP a, PP b) { return a.x * b.y - a.y * b.x; }\ndouble dot(PP a, PP b) { return a.x * b.x + a.y * b.y; }\ndouble norm(PP a) { return a.x * a.x + a.y * a.y; }\nPP dir(SEG s) { return vsub(s.e, s.s); }\n\n#if 1\n#define gc() getchar_unlocked()\n#else\n#define gc() getchar()\n#endif\nint in()\n{\n\tint n = 0, c = gc();\n\tif (c == '-') {\tc = gc();\n\t\tdo n = 10*n + (c & 0xf), c = gc(); while (c >= '0');\n\t\treturn -n;\n\t}\n\tdo n = 10*n + (c & 0xf), c = gc(); while (c >= '0');\n\treturn n;\n}\n\nint ccw(PP p0, PP p1, PP p2)\n{\n\tPP a, b;\n\tdouble t;\n\n\ta = vsub(p1, p0), b = vsub(p2, p0), t = cross(a, b);\n\tif (t >  EPS) return 1;\tif (t < -EPS) return -1;\n\tif (dot(a, b) < -EPS) return 2;\tif (norm(a) < norm(b)) return -2;\n\treturn 0;\n}\n\nint is_intersectSS(SEG s1, SEG s2)\n{\n\treturn ccw(s1.s, s1.e, s2.s) * ccw(s1.s, s1.e, s2.e) <= 0 &&\n\t\t   ccw(s2.s, s2.e, s1.s) * ccw(s2.s, s2.e, s1.e) <= 0;\n}\n\ndouble distanceLP(SEG s, PP p)\n{\n\treturn fabs(cross(vsub(s.e, s.s), vsub(p, s.s)) / vabs(vsub(s.e, s.s)));\n}\n\ndouble distanceSP(SEG s, PP p)\n{\n\tif (dot(vsub(s.e, s.s), vsub(p, s.s)) < 0) return vabs(vsub(p, s.s));\n\tif (dot(vsub(s.s, s.e), vsub(p, s.e)) < 0) return vabs(vsub(p, s.e));\n\treturn distanceLP(s, p);\n}\n\ndouble distanceSS(SEG s1, SEG s2)\n{\n\tdouble r, x;\n\tif (is_intersectSS(s1, s2)) return 0;\n\tr = distanceSP(s1, s2.s);\n\tx = distanceSP(s1, s2.e); if (x < r) r = x;\n\tx = distanceSP(s2, s1.s); if (x < r) r = x;\n\tx = distanceSP(s2, s1.e); if (x < r) r = x;\n\treturn r;\n}\n\nint main()\n{\n\tint q, x, y;\n\tPP p0, p1, p2, p3;\n\tSEG s1, s2;\n\n\tq = in();\n\twhile (q--) {\n\t\tx = in(), y = in(), p0 = vset(x, y);\n\t\tx = in(), y = in(), p1 = vset(x, y);\n\t\tx = in(), y = in(), p2 = vset(x, y);\n\t\tx = in(), y = in(), p3 = vset(x, y);\n\t\ts1.s = p0, s1.e = p1;\n\t\ts2.s = p2, s2.e = p3;\n\t\tprintf(\"%.10lf\\n\", distanceSS(s1, s2));\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<math.h>\n#include<stdlib.h>\n#define max(a,b) a<b?b:a\n#define min(a,b) a<b?a:b\n#define POW2(a)  a*a\n#define ROOP(i,n) for(i = 0;i < n;i++)\n#define _USE_MATH_DEFINES\n\ntypedef struct POINT{\n\tdouble x;\n\tdouble y;\n}POINT;\ntypedef struct LINE{\n\tPOINT s;//start point\n\tPOINT e;//end point\n}LINE;\ntypedef struct COMPLEX{\n\tdouble r;//?????¢\n\tdouble q;//????§???????theta\n}COMPLEX;\n\n//POINT????????????\nvoid print_p(POINT a){\n\tprintf(\"(%lf,%lf)\\n\",a.x,a.y);\n}\n\n//LINE????????????\nvoid print_l(LINE a){\n\tprintf(\"(%lf,%lf) -> (%lf,%lf)\\n\",(a.s).x,(a.s).y,(a.e).x,(a.e).y);\n}\n\n//COMPLEX????????????\nvoid print_c(COMPLEX a){\n\tprintf(\"(%lf,%lf)\\n\",a.r,a.q);\n}\n\n//????????????????????¢?????????\ndouble norm2(POINT a){\n\treturn POW2(a.x)+POW2(a.y);\n}\n\n//????????????????????¢\ndouble norm(POINT a){\n\treturn sqrt(norm2(a));\n}\n\n//a->b?????´??§???????????????\nPOINT make_vec(POINT a,POINT b){\n\tb.x -= a.x;\n\tb.y -= a.y;\n\treturn b;\n}\n\n//2???a,b???????????¢\ndouble distance(POINT a,POINT b){\n\treturn norm(make_vec(a,b));\n}\n\n//??´??§????????????\nPOINT sum_vec(POINT a,POINT b){\n\ta.x += b.x;\n\ta.y += b.y;\n\treturn a;\n}\n\n//??´??§????????????\n//mkae_vec??¨?????£??????????????¨???????????????\n//??????????????????\nPOINT dif_vec(POINT a,POINT b){\n\ta.x -= b.x;\n\ta.y -= b.y;\n\treturn a;\n}\n\n//??´??§????????????????????????\nPOINT scalar_vec(POINT a,double k){\n\ta.x *= k;\n\ta.y *= k;\n\treturn a;\n}\n\n//???????????????\nPOINT minus_vec(POINT a){\n\treturn scalar_vec(a,-1.0);\n}\n\n//??????\ndouble dot(POINT a,POINT b){\n\treturn a.x*b.x + a.y*b.y;\n}\n\n//??????\ndouble cross(POINT a,POINT b){\n\treturn a.x*b.y - a.y*b.x;\n}\n\n//AP:PB=t:s??¨?????????????±???????\n//k, 0:??????, 1:??????\n//* t:(1-t)??§???????????£??????????????£????????????????????????????????????????????????????????¨?????£???\nPOINT division(POINT a,POINT b,double t,double s,int k){\n\tdouble tmp = t + s * (1 - k*2);\n\ta.x += (make_vec(a,b)).x / tmp * t;\n\ta.y += (make_vec(a,b)).y / tmp * t;\n\treturn a;\n}\n\n//???p????????´???a?????????????????????????¶??????????\nPOINT perpendicular(LINE a,POINT p){\n\tPOINT ps = make_vec(p,a.s);\n\tPOINT pe = make_vec(p,a.e);\n\tdouble t = norm2(ps) - dot(ps,pe);\n\tdouble s = norm2(pe) - dot(ps,pe);\n\treturn division(a.s,a.e,t,s,0);\n}\n\n//??´???a???????????????p??¨????§°???????????????\nPOINT reflection(LINE a,POINT p){\n\tPOINT h = perpendicular(a,p);\n\treturn sum_vec(h,make_vec(p,h));\n}\n\n//* ????§???¢?????????\nint inclusion(POINT a[],int n,POINT p){\n\tint ans = 0;\n\tint i;\n\tPOINT g[n+1];\n\tdouble w,rad = 0.0;\n\n\tfor(i = 0;i < n;i++){\n\t\tg[i] = a[i];\n\t}\n\tg[n] = g[0];\n\n\tfor(i = 0;i < n;i++){\n\t\tif(g[i].x == p.x && g[i].y == p.y){\n\t\t\treturn ans = 1;\n\t\t}\n\t}\n\tfor(i = 0;i < n;i++){\n\t\tw = atan2(cross(make_vec(p,g[i]),make_vec(p,g[i+1])),\n\t\t\t\tdot(make_vec(p,g[i]),make_vec(p,g[i+1])));\n\t\trad += w;\n\t\tif(fabs(w - M_PI) <= 0.000001 ||\n\t\t\t fabs(w + M_PI) <= 0.000001)\n\t\t\treturn ans = 1;\n\t}\n\tif(fabs(rad - M_PI*2)<=0.000001){//2??\n\t\treturn ans = 2;//in!\n\t}\n\treturn ans;\n}\n\n// a.s, a.e, p?????????????????????\n// ???????¨???????????????????????????????  1\n// ????¨?????????????????????????????????? -1\n// p, a.s, a.e????????????????????? 2\n// a.s, a.e, p?????????????????????-2\n// ???p?????´???a???????????????????????? 0\nint ccw(LINE a,POINT p){\n\tint cls = cross(make_vec(a.s,a.e),make_vec(a.s,p));\n\tif(cls > 0){\n\t\treturn  1;\n\t}else if(cls < 0){\n\t\treturn -1;\n\t}else if(dot(make_vec(a.s,a.e),make_vec(a.s,p)) < 0){\n\t\treturn  2;\n\t}else if(dot(make_vec(a.e,a.s),make_vec(a.e,p)) < 0){\n\t\treturn -2;\n\t}else{\n\t\treturn  0;\n\t}\n}\n\n// ??????????????????\nint parallel(LINE a,LINE b){\n\tif(!cross(make_vec(a.s,a.e),make_vec(b.s,b.e)))\n\t\treturn 1;\n\telse\n\t\treturn 0;\n}\n\n// ?????´????????????\nint orthogonal(LINE a,LINE b){\n\tif(!dot(make_vec(a.s,a.e),make_vec(b.s,b.e)))\n\t\treturn 1;\n\telse\n\t\treturn 0;\n}\n\n// ??????a,b???????????????????????????\nint intersection(LINE a,LINE b){\n\tif(ccw(a,b.s)*ccw(a,b.e) <= 0 &&\n\t   ccw(b,a.s)*ccw(b,a.e) <= 0)\n\t\treturn 1;\n\treturn 0;\n}\n\n//??????a,b?????????\nPOINT cross_point(LINE a,LINE b){\n\tdouble c1 = cross(make_vec(a.s,b.s),make_vec(a.s,b.e));\n\tdouble c2 = cross(make_vec(a.e,b.s),make_vec(a.e,b.e));\n\treturn division(a.s,a.e,fabs(c1),fabs(c2),0);\n}\n\n//??´???a??¨???p????????¢\ndouble distanceLP(LINE a,POINT p){\n\tif(ccw(a,p) ==  2)\n\t\treturn norm(make_vec(a.s,p));\n\tif(ccw(a,p) == -2)\n\t\treturn norm(make_vec(a.e,p));\n\treturn norm(make_vec(perpendicular(a,p),p));\n}\n\n//??´???a??¨??´???b????????¢\ndouble distanceLL(LINE a,LINE b){\n\tdouble a1,a2,a3,a4;\n\tif(intersection(a,b) == 1)\n\t\treturn 0.0000000000;\n\ta1 = distanceLP(a,b.s);\n\ta2 = distanceLP(a,b.e);\n\ta3 = distanceLP(b,a.s);\n\ta4 = distanceLP(b,a.e);\n\ta1 = min(a1,a2);\n\ta3 = min(a3,a4);\n\ta1 = min(a1,a3);\n\treturn a1;\n}\n\nint main(){\n\tLINE a,b;\n\tint k;\n\tPOINT p;\n\tscanf(\"%d\",&k);\n\twhile(k--){\n\t\tscanf(\"%lf%lf%lf%lf\",&a.s.x,&a.s.y,&a.e.x,&a.e.y);\n\t\tscanf(\"%lf%lf%lf%lf\",&b.s.x,&b.s.y,&b.e.x,&b.e.y);\n\t\tprintf(\"%.10lf\\n\",distanceLL(a,b));\n\t}\n/*\n\tPOINT a,b,q;\n\tdouble t,s;\n\n\tscanf(\"%lf%lf%lf%lf%lf%lf\",&a.x,&a.y,&b.x,&b.y,&t,&s);\n\n\tq = division(a,b,t,s,0);\n\tprintf(\"%lf %lf\\n\",q.x,q.y);\n*/\n/*\n\tLINE a;\n\tPOINT b;\n\tint k;\n\tchar s[5][100]={{\"ONLINE_FRONT\"},{\"CLOCKWISE\"},{\"ON_SEGMENT\"},{\"COUNTER_CLOCKWISE\"},{\"ONLINE_BACK\"}};\n\t\n\tscanf(\"%lf%lf%lf%lf%d\",&a.s.x,&a.s.y,&a.e.x,&a.e.y,&k);\n\twhile(k--){\n\t\tscanf(\"%lf%lf\",&b.x,&b.y);\n\t\tprintf(\"%s\\n\",s[ccw(a,b)+2]);\n\t}\n*/\n/*\n\tPOINT a,b;\n\tint k;\n\twhile(1){\n\t\tscanf(\"%lf%lf%lf%lf%d\",&a.x,&a.y,&b.x,&b.y,&k);\n\t\tprint_p(sum_vec(a,b));\n\t\tprint_p(dif_vec(a,b));\n\t\tprint_p(scalar_vec(a,k));\n\t\tprint_p(minus_vec(a));\n\t}\n*/\n/*\n\tPOINT a,b;\n\twhile(1){\n\t\tscanf(\"%lf%lf%lf%lf\",&a.x,&a.y,&b.x,&b.y);\n\t\tprintf(\"%lf\\n\",distance(a,b));\n\t}\n*/\n/*\n\tint i,m,n;\n\tPOINT g[100];//n\n\tPOINT q;//m\n\tint ans = 0;\n\n\tscanf(\"%d\",&n);\n\tfor(i = 0;i < n;i++){\n\t\tscanf(\"%lf%lf\",&g[i].x,&g[i].y);\n\t}\n\tscanf(\"%d\",&m);\n\tfor(i = 0;i < m;i++){\n\t\tscanf(\"%lf%lf\",&q.x,&q.y);\n\t\tans = inclusion(g,n,q);\n\t\tprintf(\"%d\\n\",ans);\n\t}\n*/\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<math.h>\n#include<stdlib.h>\n#define max(a,b) a<b?b:a\n#define min(a,b) a<b?b:a\n#define POW2(a)  a*a\n#define ROOP(i,n) for(i = 0;i < n;i++)\n#define _USE_MATH_DEFINES\n\ntypedef struct POINT{\n\tdouble x;\n\tdouble y;\n}POINT;\ntypedef struct LINE{\n\tPOINT s;//start point\n\tPOINT e;//end point\n}LINE;\ntypedef struct COMPLEX{\n\tdouble r;//?????¢\n\tdouble q;//????§???????theta\n}COMPLEX;\n\n//POINT????????????\nvoid print_p(POINT a){\n\tprintf(\"(%lf,%lf)\\n\",a.x,a.y);\n}\n\n//LINE????????????\nvoid print_l(LINE a){\n\tprintf(\"(%lf,%lf) -> (%lf,%lf)\\n\",(a.s).x,(a.s).y,(a.e).x,(a.e).y);\n}\n\n//COMPLEX????????????\nvoid print_c(COMPLEX a){\n\tprintf(\"(%lf,%lf)\\n\",a.r,a.q);\n}\n\n//????????????????????¢?????????\ndouble norm2(POINT a){\n\treturn POW2(a.x)+POW2(a.y);\n}\n\n//????????????????????¢\ndouble norm(POINT a){\n\treturn sqrt(norm2(a));\n}\n\n//a->b?????´??§???????????????\nPOINT make_vec(POINT a,POINT b){\n\tb.x -= a.x;\n\tb.y -= a.y;\n\treturn b;\n}\n\n//2???a,b???????????¢\ndouble distance(POINT a,POINT b){\n\treturn norm(make_vec(a,b));\n}\n\n//??´??§????????????\nPOINT sum_vec(POINT a,POINT b){\n\ta.x += b.x;\n\ta.y += b.y;\n\treturn a;\n}\n\n//??´??§????????????\n//mkae_vec??¨?????£??????????????¨???????????????\n//??????????????????\nPOINT dif_vec(POINT a,POINT b){\n\ta.x -= b.x;\n\ta.y -= b.y;\n\treturn a;\n}\n\n//??´??§????????????????????????\nPOINT scalar_vec(POINT a,double k){\n\ta.x *= k;\n\ta.y *= k;\n\treturn a;\n}\n\n//???????????????\nPOINT minus_vec(POINT a){\n\treturn scalar_vec(a,-1.0);\n}\n\n//??????\ndouble dot(POINT a,POINT b){\n\treturn a.x*b.x + a.y*b.y;\n}\n\n//??????\ndouble cross(POINT a,POINT b){\n\treturn a.x*b.y - a.y*b.x;\n}\n\n//AP:PB=t:s??¨?????????????±???????\n//k, 0:??????, 1:??????\n//* t:(1-t)??§???????????£??????????????£????????????????????????????????????????????????????????¨?????£???\nPOINT division(POINT a,POINT b,double t,double s,int k){\n\tdouble tmp = t + s * (1 - k*2);\n\ta.x += (make_vec(a,b)).x / tmp * t;\n\ta.y += (make_vec(a,b)).y / tmp * t;\n\treturn a;\n}\n\n//???p????????´???a?????????????????????????¶??????????\nPOINT perpendicular(LINE a,POINT p){\n\tPOINT ps = make_vec(p,a.s);\n\tPOINT pe = make_vec(p,a.e);\n\tdouble t = norm2(ps) - dot(ps,pe);\n\tdouble s = norm2(pe) - dot(ps,pe);\n\treturn division(a.s,a.e,t,s,0);\n}\n\n//??´???a???????????????p??¨????§°???????????????\nPOINT reflection(LINE a,POINT p){\n\tPOINT h = perpendicular(a,p);\n\treturn sum_vec(h,make_vec(p,h));\n}\n\n//* ????§???¢?????????\nint inclusion(POINT a[],int n,POINT p){\n\tint ans = 0;\n\tint i;\n\tPOINT g[n+1];\n\tdouble w,rad = 0.0;\n\n\tfor(i = 0;i < n;i++){\n\t\tg[i] = a[i];\n\t}\n\tg[n] = g[0];\n\n\tfor(i = 0;i < n;i++){\n\t\tif(g[i].x == p.x && g[i].y == p.y){\n\t\t\treturn ans = 1;\n\t\t}\n\t}\n\tfor(i = 0;i < n;i++){\n\t\tw = atan2(cross(make_vec(p,g[i]),make_vec(p,g[i+1])),\n\t\t\t\tdot(make_vec(p,g[i]),make_vec(p,g[i+1])));\n\t\trad += w;\n\t\tif(fabs(w - M_PI) <= 0.000001 ||\n\t\t\t fabs(w + M_PI) <= 0.000001)\n\t\t\treturn ans = 1;\n\t}\n\tif(fabs(rad - M_PI*2)<=0.000001){//2??\n\t\treturn ans = 2;//in!\n\t}\n\treturn ans;\n}\n\n// a.s, a.e, p?????????????????????\n// ???????¨???????????????????????????????  1\n// ????¨?????????????????????????????????? -1\n// p, a.s, a.e????????????????????? 2\n// a.s, a.e, p?????????????????????-2\n// ???p?????´???a???????????????????????? 0\nint ccw(LINE a,POINT p){\n\tint cls = cross(make_vec(a.s,a.e),make_vec(a.s,p));\n\tif(cls > 0){\n\t\treturn  1;\n\t}else if(cls < 0){\n\t\treturn -1;\n\t}else if(dot(make_vec(a.s,a.e),make_vec(a.s,p)) < 0){\n\t\treturn  2;\n\t}else if(dot(make_vec(a.e,a.s),make_vec(a.e,p)) < 0){\n\t\treturn -2;\n\t}else{\n\t\treturn  0;\n\t}\n}\n\n// ??????????????????\nint parallel(LINE a,LINE b){\n\tif(!cross(make_vec(a.s,a.e),make_vec(b.s,b.e)))\n\t\treturn 1;\n\telse\n\t\treturn 0;\n}\n\n// ?????´????????????\nint orthogonal(LINE a,LINE b){\n\tif(!dot(make_vec(a.s,a.e),make_vec(b.s,b.e)))\n\t\treturn 1;\n\telse\n\t\treturn 0;\n}\n\n// ??????a,b???????????????????????????\nint intersection(LINE a,LINE b){\n\tif(ccw(a,b.s)*ccw(a,b.e) <= 0 &&\n\t   ccw(b,a.s)*ccw(b,a.e) <= 0)\n\t\treturn 1;\n\treturn 0;\n}\n\n//??????a,b?????????\nPOINT cross_point(LINE a,LINE b){\n\tdouble c1 = cross(make_vec(a.s,b.s),make_vec(a.s,b.e));\n\tdouble c2 = cross(make_vec(a.e,b.s),make_vec(a.e,b.e));\n\treturn division(a.s,a.e,fabs(c1),fabs(c2),0);\n}\n\n//??´???a??¨???p????????¢\ndouble distanceLP(LINE a,POINT p){\n\tif(ccw(a,p) ==  2)\n\t\treturn norm(make_vec(a.s,p));\n\tif(ccw(a,p) == -2)\n\t\treturn norm(make_vec(a.e,p));\n\treturn norm(make_vec(perpendicular(a,p),p));\n}\n\n//??´???a??¨??´???b????????¢\ndouble distanceLL(LINE a,LINE b){\n\tdouble a1,a2,a3,a4;\n\tif(intersection(a,b) == 1)\n\t\treturn 0.0000000000;\n\ta1 = distanceLP(a,b.s);\n\ta2 = distanceLP(a,b.e);\n\ta3 = distanceLP(b,a.s);\n\ta4 = distanceLP(b,a.e);\n\treturn min(a1,min(a2,min(a3,a4)));\n}\n\nint main(){\n\tLINE a,b;\n\tint k;\n\tPOINT p;\n\tscanf(\"%d\",&k);\n\twhile(k--){\n\t\tscanf(\"%lf%lf%lf%lf\",&a.s.x,&a.s.y,&a.e.x,&a.e.y);\n\t\tscanf(\"%lf%lf%lf%lf\",&b.s.x,&b.s.y,&b.e.x,&b.e.y);\n\t\tprintf(\"%.10lf\\n\",distanceLL(a,b));\n\t}\n/*\n\tPOINT a,b,q;\n\tdouble t,s;\n\n\tscanf(\"%lf%lf%lf%lf%lf%lf\",&a.x,&a.y,&b.x,&b.y,&t,&s);\n\n\tq = division(a,b,t,s,0);\n\tprintf(\"%lf %lf\\n\",q.x,q.y);\n*/\n/*\n\tLINE a;\n\tPOINT b;\n\tint k;\n\tchar s[5][100]={{\"ONLINE_FRONT\"},{\"CLOCKWISE\"},{\"ON_SEGMENT\"},{\"COUNTER_CLOCKWISE\"},{\"ONLINE_BACK\"}};\n\t\n\tscanf(\"%lf%lf%lf%lf%d\",&a.s.x,&a.s.y,&a.e.x,&a.e.y,&k);\n\twhile(k--){\n\t\tscanf(\"%lf%lf\",&b.x,&b.y);\n\t\tprintf(\"%s\\n\",s[ccw(a,b)+2]);\n\t}\n*/\n/*\n\tPOINT a,b;\n\tint k;\n\twhile(1){\n\t\tscanf(\"%lf%lf%lf%lf%d\",&a.x,&a.y,&b.x,&b.y,&k);\n\t\tprint_p(sum_vec(a,b));\n\t\tprint_p(dif_vec(a,b));\n\t\tprint_p(scalar_vec(a,k));\n\t\tprint_p(minus_vec(a));\n\t}\n*/\n/*\n\tPOINT a,b;\n\twhile(1){\n\t\tscanf(\"%lf%lf%lf%lf\",&a.x,&a.y,&b.x,&b.y);\n\t\tprintf(\"%lf\\n\",distance(a,b));\n\t}\n*/\n/*\n\tint i,m,n;\n\tPOINT g[100];//n\n\tPOINT q;//m\n\tint ans = 0;\n\n\tscanf(\"%d\",&n);\n\tfor(i = 0;i < n;i++){\n\t\tscanf(\"%lf%lf\",&g[i].x,&g[i].y);\n\t}\n\tscanf(\"%d\",&m);\n\tfor(i = 0;i < m;i++){\n\t\tscanf(\"%lf%lf\",&q.x,&q.y);\n\t\tans = inclusion(g,n,q);\n\t\tprintf(\"%d\\n\",ans);\n\t}\n*/\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n#define min(p,q)((p)<(q)?(p):(q))\n#define zahyoutype double\n\ntypedef struct Point{zahyoutype x,y;}P;\ntypedef struct line{P p1,p2;}L;\nint sgn(zahyoutype x){return x<0?-1:x>0;}\ndouble seglen(L s){return hypot(s.p2.x-s.p1.x,s.p2.y-s.p1.y);}\n\n//opとoqの内積と外積\nzahyoutype innerproduct(P p,P q,P o){return (p.x-o.x)*(q.x-o.x)+(p.y-o.y)*(q.y-o.y);}\nzahyoutype crossproduct(P p,P q,P o){return (p.x-o.x)*(q.y-o.y)-(p.y-o.y)*(q.x-o.x);}\nint iscross(L s,L t){\n\t//点(p,q)が直線f(x,y)=ax+by+c=0のどっち側にあるかは外積を見ればよい\n\tzahyoutype t1=crossproduct(t.p1,s.p2,s.p1);\n\tzahyoutype t2=crossproduct(t.p2,s.p2,s.p1);\n\tzahyoutype t3=crossproduct(s.p1,t.p2,t.p1);\n\tzahyoutype t4=crossproduct(s.p2,t.p2,t.p1);\n\t//同一直線上にない\n\tif(t1 || t2)return sgn(t1)!=sgn(t2) && sgn(t3)!=sgn(t4);\n\t//同一直線上にある\n\t//内積をみる\n\tzahyoutype c1=innerproduct(s.p2,s.p2,s.p1);\n\tzahyoutype c2=innerproduct(t.p1,s.p2,s.p1);\n\tzahyoutype c3=innerproduct(t.p2,s.p2,s.p1);\n\tif(0<=c2&&c2<=c1 || 0<=c3&&c3<=c1 || c2<=0&&c1<=c3 || c3<=0&&c1<=c2)return 1;\n\treturn 0;\n}\ndouble distPP(P p,P q){L s={p,q};return seglen(s);}\ndouble distPL(P p,L s){return fabs(crossproduct(p,s.p2,s.p1)/seglen(s));}\ndouble distPS(P p,L s){\n\tzahyoutype c =innerproduct(   p,s.p2,s.p1);\n\tzahyoutype ss=innerproduct(s.p2,s.p2,s.p1);\n\tif(c<=0)return distPP(p,s.p1);\n\tif(c<=ss)return distPL(p,s);\n\treturn distPP(p,s.p2);\n}\ndouble distSS(L s,L t){return iscross(s,t)?0:min(min(distPS(s.p1,t),distPS(s.p2,t)),min(distPS(t.p1,s),distPS(t.p2,s)));}\n\nvoid readpoint(P*p){zahyoutype x=1;scanf(x/2?\"%lf%lf\":\"%ld%ld\",&p->x,&p->y);}\nvoid printpoint(P p){zahyoutype x=1;printf(x/2?\"%.9lf %.9lf\\n\":\"%ld %ld\\n\",p.x,p.y);}\n\nint main(){\n\tint q;\n\tscanf(\"%d\",&q);\n\twhile(q--){\n\t\tL s,t;\n\t\tfor(int i=0;i<2;i++){\n\t\t\treadpoint(&s.p1);\n\t\t\treadpoint(&s.p2);\n\t\t\tif(!i)t=s;\n\t\t}\n\t\tprintf(\"%.9f\\n\",distSS(s,t));\n\t}\n}\n"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<stdlib.h>\n#include<math.h>\n\ntypedef long long int int64;\n\n#define MAX(a,b) ((a)>(b)?(a):(b))\n#define MIN(a,b) ((a)<(b)?(a):(b))\n#define ABS(a) ((a)>(0)?(a):-(a))\n\ntypedef struct point2d{\n  int64 x,y;\n} point;\n\ntypedef struct line2d{\n  point s,t;\n} line;\n\nvoid swap(int64 *a,int64 *b){\n  int64 tmp=*a;\n  *a=*b;\n  *b=tmp;\n}\n\nint func(const line *a,const point *b){\n  int64 p=a->s.x;\n  int64 q=a->s.y;\n  int64 r=a->t.x;\n  int64 s=a->t.y;\n  int64 t=(s-q)*(b->x-p)-(r-p)*(b->y-q);\n  return t==0?0:(t>0?1:-1);\n}\n\nint isIntersect(const line *a,const line *b){\n  int p=func(a,&(b->s));\n  int q=func(a,&(b->t));\n  int r=func(b,&(a->s));\n  int s=func(b,&(a->t));\n  if(p==0 && q==0 && r==0 && s==0){//同一直線上に2つの線分有り\n    if(a->s.x!=a->t.x){\n      int64 p=a->s.x;\n      int64 q=a->t.x;\n      int64 r=b->s.x;\n      int64 s=b->t.x;\n      if(p>q) swap(&p,&q);\n      if(r>s) swap(&r,&s);\n      return !(p>s || r>q);\n    } else {\n      int64 p=a->s.y;\n      int64 q=a->t.y;\n      int64 r=b->s.y;\n      int64 s=b->t.y;\n      if(p>q) swap(&p,&q);\n      if(r>s) swap(&r,&s);\n      return !(p>s || r>q);\n    }\n  }\n  return p*q<=0 && r*s<=0;\n}\n\nvoid scanfLine(line *a){\n  scanf(\"%lld%lld%lld%lld\",&(a->s.x),&(a->s.y),&(a->t.x),&(a->t.y));\n  return;\n}\n\ndouble calcPointDistance(const point *a,const point *b){\n  int64 p=a->x;\n  int64 q=a->y;\n  int64 r=b->x;\n  int64 s=b->y;\n  return sqrt((p-r)*(p-r)+(q-s)*(q-s));\n}\n\ndouble calcArea(double a,double b,double c){\n  double s=(a+b+c)/2;\n  return sqrt(s*(s-a))*sqrt((s-b)*(s-c));\n}\n\ndouble calcLinePointDistanceInnerFunction(const line *x,const point *y){\n  int64 a=x->s.x;\n  int64 b=x->s.y;\n  int64 c=x->t.x;\n  int64 d=x->t.y;\n  int64 s=y->x;\n  int64 t=y->y;\n  int64 res=a*a+c*c-2*s*(a+c)+b*b+d*d-2*t*(b+d);\n  return res;\n}\n\ndouble calcLinePointDistance(const line *a,const point *b){\n  double p=calcPointDistance(&(a->s),b);\n  double min=p;\n  double q=calcPointDistance(&(a->t),b);\n  min=MIN(min,q);\n  double l=calcPointDistance(&(a->s),&(a->t));\n  if(calcLinePointDistanceInnerFunction(a,b)<=l*l){\n    min=MIN(min,2/l*calcArea(p,q,l));\n  }\n  return min;\n}\n\ndouble calcLineDistance(const line *a,const line *b){\n  if(isIntersect(a,b)) return 0;\n\n  //2点間の距離の計算\n  double min=calcLinePointDistance(a,&(b->s));\n  min=MIN(min,calcLinePointDistance(a,&(b->t)));\n  min=MIN(min,calcLinePointDistance(b,&(a->s)));\n  min=MIN(min,calcLinePointDistance(b,&(a->t)));\n  return min; \n}\n\nvoid run(void){\n  int q;\n  scanf(\"%d\",&q);\n  while(q--){\n    line a,b;\n    scanfLine(&a);\n    scanfLine(&b);\n    double ans=calcLineDistance(&a,&b);\n    printf(\"%.9lf\\n\",ans);\n  }\n  return;\n}\n\nint main(void){\n  run();\n  return 0;\n}\n"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<math.h>\nint ifcl(int p0[2],int p1[2],int p2[2],int p3[2]){\n  long long x=p0[0],x0=p1[0]-x,x1=p2[0]-x,x2=p3[0]-x,x3=x2-x1,x4=x0-x1,x5=-x1;\n  long long y=p0[1],y0=p1[1]-y,y1=p2[1]-y,y2=p3[1]-y,y3=y2-y1,y4=y0-y1,y5=-y1;\n  long long x7=x2-x0,y7=y2-y0;  \n  long long c1=(x0*y1-y0*x1)*(x0*y2-y0*x2),c2=(x3*y4-y3*x4)*(x3*y5-y3*x5);\n  long long d1=x1*x4+y1*y4,d2=x2*x7+y2*y7,d3=x1*x2+y1*y2,d4=x4*x7+y4*y7;\n  if(c1==0&&c2==0)return (d1<0&&d2>0&&d3>0&&d4<0)?0:1;\n  return (c1<=0&&c2<=0)?1:0;\n}\ndouble dMIN(double a,double b){return a<b?a:b;}\ndouble drpl(int p0[2],int p1[2],int p2[2]){\n  int a=p0[1]-p1[1],b=p0[0]-p1[0],c=p0[0]*p1[1]-p1[0]*p0[1];\n  int d=p2[1]-p1[1],e=p2[0]-p1[0];\n  int f=p2[1]-p0[1],g=p2[0]-p0[0];\n  if(a*d+b*e<0||a*f+b*g>0)return dMIN(hypot(d,e),hypot(f,g));\n  return abs(p2[0]*a-p2[1]*b+c)/hypot(a,b);\n}\ndouble drll(int *p0,int *p1,int *p2,int *p3){\n  double l=drpl(p2,p3,p0);\n  l=dMIN(l,drpl(p2,p3,p1));\n  l=dMIN(l,drpl(p0,p1,p2));\n  l=dMIN(l,drpl(p0,p1,p3));\n  if(ifcl(p0,p1,p2,p3))l=0;\n  return l;\n}\nint main(){\n  int p[4][2],n,i;\n  scanf(\"%d\",&n);\n  while(n--){\n    for(i=0;i<8;i++)scanf(\" %d\",&p[i/2][i%2]);\n    printf(\"%.9f\\n\",drll(p[0],p[1],p[2],p[3]));\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\n#define DOT(v1, v2) (v1.x * v2.x + v1.y * v2.y)\n#define CROSS(v1, v2) (v1.x * v2.y - v1.y * v2.x)\n#define NORM(v) (v.x * v.x + v.y * v.y)\n#define ABS(v) (sqrt(NORM(v)))\n\ntypedef struct { double x, y; } point_t;\ntypedef point_t vector_t;\ntypedef struct { point_t p0, p1; } segment_t;\ntypedef segment_t line_t;\n\nstatic vector_t minus(vector_t v1, vector_t v2) {\n  vector_t ret = { v1.x - v2.x, v1.y - v2.y };\n  return ret;\n}\n\n// @see http://www5d.biglobe.ne.jp/~tomoya03/shtml/algorithm/Intersection.htm\n// (y - q) = slope * (x - p)\nstatic int intersect(segment_t s1, segment_t s2) {\n  double t1, t2, t3, t4;\n\n  //    *******                                               *******\n  t1 = (s1.p0.y - s2.p0.y) * (s2.p0.x - s2.p1.x) + (s2.p0.x - s1.p0.x) * (s2.p0.y - s2.p1.y);\n  t2 = (s1.p1.y - s2.p0.y) * (s2.p0.x - s2.p1.x) + (s2.p0.x - s1.p1.x) * (s2.p0.y - s2.p1.y);\n  t3 = (s2.p0.y - s1.p0.y) * (s1.p0.x - s1.p1.x) + (s1.p0.x - s2.p0.x) * (s1.p0.y - s1.p1.y);\n  t4 = (s2.p1.y - s1.p0.y) * (s1.p0.x - s1.p1.x) + (s1.p0.x - s2.p1.x) * (s1.p0.y - s1.p1.y);\n  return (t1 * t2 < 0.0) && (t3 * t4 < 0.0);\n}\n\nstatic double distance(segment_t s1, segment_t s2) {\n  int i;\n  double min, d;\n  segment_t s;\n  point_t p;\n\n  if (intersect(s1, s2)) return 0.0;\n  struct { segment_t s; point_t p; } list[4] = {{s1, s2.p0}, {s1, s2.p1}, {s2, s1.p0}, {s2, s1.p1}};\n  for (i = 0, min = -1.0; i < 4; ++i) {\n    s = list[i].s;\n    p = list[i].p;\n    if (DOT(minus(s.p0, s.p1), minus(p, s.p1)) < 0.0) {\n      d = ABS(minus(p, s.p1));\n    } else if (DOT(minus(s.p1, s.p0), minus(p, s.p0)) < 0.0) {\n      d = ABS(minus(p, s.p0));\n    } else {\n      d = CROSS(minus(s.p0, s.p1), minus(p, s.p1)) / ABS(minus(s.p0, s.p1));\n      if (d < 0.0) d = -d;\n    }\n    if (min < 0.0 || d < min) min = d;\n  }\n  return min;\n}\n\nint main(int argc, char **argv) {\n  int q, i;\n  segment_t s1, s2;\n\n  scanf(\"%d\", &q);\n  for (i = 0; i < q; ++i) {\n    scanf(\"%lf %lf %lf %lf %lf %lf %lf %lf\",\n        &s1.p0.x, &s1.p0.y, &s1.p1.x, &s1.p1.y,\n        &s2.p0.x, &s2.p0.y, &s2.p1.x, &s2.p1.y);\n    printf(\"%.10lf\\n\", distance(s1, s2));\n  }\n}\n"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<stdlib.h>\n#include<math.h>\n\ntypedef long long int int64;\n\n#define MAX(a,b) ((a)>(b)?(a):(b))\n#define MIN(a,b) ((a)<(b)?(a):(b))\n#define ABS(a) ((a)>(0)?(a):-(a))\n\ntypedef struct point2d{\n  int64 x,y;\n} point;\n\ntypedef struct line2d{\n  point s,t;\n} line;\n\nvoid swap(int64 *a,int64 *b){\n  int64 tmp=*a;\n  *a=*b;\n  *b=tmp;\n}\n\nint func(const line *a,const point *b){\n  int64 p=a->s.x;\n  int64 q=a->s.y;\n  int64 r=a->t.x;\n  int64 s=a->t.y;\n  int64 t=(s-q)*(b->x-p)-(r-p)*(b->y-q);\n  return t==0?0:(t>0?1:-1);\n}\n\nint isIntersect(const line *a,const line *b){\n  int p=func(a,&(b->s));\n  int q=func(a,&(b->t));\n  int r=func(b,&(a->s));\n  int s=func(b,&(a->t));\n  if(p==0 && q==0 && r==0 && s==0){//同一直線上に2つの線分有り\n    if(a->s.x!=a->t.x){\n      int64 p=a->s.x;\n      int64 q=a->t.x;\n      int64 r=b->s.x;\n      int64 s=b->t.x;\n      if(p>q) swap(&p,&q);\n      if(r>s) swap(&r,&s);\n      return !(p>s || r>q);\n    } else {\n      int64 p=a->s.y;\n      int64 q=a->t.y;\n      int64 r=b->s.y;\n      int64 s=b->t.y;\n      if(p>q) swap(&p,&q);\n      if(r>s) swap(&r,&s);\n      return !(p>s || r>q);\n    }\n  }\n  return p*q<=0 && r*s<=0;\n}\n\nvoid scanfLine(line *a){\n  scanf(\"%lld%lld%lld%lld\",&(a->s.x),&(a->s.y),&(a->t.x),&(a->t.y));\n  return;\n}\n\ndouble calcPointDistance(const point *a,const point *b){\n  int64 p=a->x;\n  int64 q=a->y;\n  int64 r=b->x;\n  int64 s=b->y;\n  return sqrt((p-r)*(p-r)+(q-s)*(q-s));\n}\n\ndouble calcArea(double a,double b,double c){\n  double s=(a+b+c)/2;\n  return sqrt(s*(s-a))*sqrt((s-b)*(s-c));\n}\n\ndouble calcLinePointDistanceInnerFunction(const line *x,const point *y){\n  int64 a=x->s.x;\n  int64 b=x->s.y;\n  int64 c=x->t.x;\n  int64 d=x->t.y;\n  int64 s=y->x;\n  int64 t=y->y;\n  int64 res=ABS(a*a+c*c-2*s*(a+c)+b*b+d*d-2*t*(b+d));\n  return res;\n}\n\ndouble calcLinePointDistance(const line *a,const point *b){\n  double p=calcPointDistance(&(a->s),b);\n  double min=p;\n  double q=calcPointDistance(&(a->t),b);\n  min=MIN(min,q);\n  double l=calcPointDistance(&(a->s),&(a->t));\n  if(calcLinePointDistanceInnerFunction(a,b)<=l*l){\n    min=MIN(min,2/l*calcArea(p,q,l));\n  }\n  return min;\n}\n\ndouble calcLineDistance(const line *a,const line *b){\n  if(isIntersect(a,b)) return 0;\n\n  //2点間の距離の計算\n  double min=calcLinePointDistance(a,&(b->s));\n  min=MIN(min,calcLinePointDistance(a,&(b->t)));\n  min=MIN(min,calcLinePointDistance(b,&(a->s)));\n  min=MIN(min,calcLinePointDistance(b,&(a->t)));\n  return min; \n}\n\nvoid run(void){\n  int q;\n  scanf(\"%d\",&q);\n  while(q--){\n    line a,b;\n    scanfLine(&a);\n    scanfLine(&b);\n    double ans=calcLineDistance(&a,&b);\n    printf(\"%.9lf\\n\",ans);\n  }\n  return;\n}\n\nint main(void){\n  run();\n  return 0;\n}\n\n"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<stdlib.h>\n#include<math.h>\n\ntypedef long long int int64;\n\n#define MAX(a,b) ((a)>(b)?(a):(b))\n#define MIN(a,b) ((a)<(b)?(a):(b))\n#define ABS(a) ((a)>(0)?(a):-(a))\n\ntypedef struct point2d{\n  int64 x,y;\n} point;\n\ntypedef struct line2d{\n  point s,t;\n} line;\n\nvoid swap(int64 *a,int64 *b){\n  int64 tmp=*a;\n  *a=*b;\n  *b=tmp;\n}\n\nint func(const line *a,const point *b){\n  int64 p=a->s.x;\n  int64 q=a->s.y;\n  int64 r=a->t.x;\n  int64 s=a->t.y;\n  int64 t=(s-q)*(b->x-p)-(r-p)*(b->y-q);\n  return t==0?0:(t>0?1:-1);\n}\n\nint isIntersect(const line *a,const line *b){\n  int p=func(a,&(b->s));\n  int q=func(a,&(b->t));\n  int r=func(b,&(a->s));\n  int s=func(b,&(a->t));\n  if(p==0 && q==0 && r==0 && s==0){//同一直線上に2つの線分有り\n    if(a->s.x!=a->t.x){\n      int64 p=a->s.x;\n      int64 q=a->t.x;\n      int64 r=b->s.x;\n      int64 s=b->t.x;\n      if(p>q) swap(&p,&q);\n      if(r>s) swap(&r,&s);\n      return !(p>s || r>q);\n    } else {\n      int64 p=a->s.y;\n      int64 q=a->t.y;\n      int64 r=b->s.y;\n      int64 s=b->t.y;\n      if(p>q) swap(&p,&q);\n      if(r>s) swap(&r,&s);\n      return !(p>s || r>q);\n    }\n  }\n  return p*q<=0 && r*s<=0;\n}\n\nvoid scanfLine(line *a){\n  scanf(\"%lld%lld%lld%lld\",&(a->s.x),&(a->s.y),&(a->t.x),&(a->t.y));\n  return;\n}\n\ndouble calcPointDistance(const point *a,const point *b){\n  int64 p=a->x;\n  int64 q=a->y;\n  int64 r=b->x;\n  int64 s=b->y;\n  double l= sqrt((p-r)*(p-r)+(q-s)*(q-s));\n  return l;\n}\n\nint64 calcLinePointDistanceInnerFunction(const line *x,const point *y){\n  int64 a=x->s.x;\n  int64 b=x->s.y;\n  int64 c=x->t.x;\n  int64 d=x->t.y;\n  int64 s=y->x;\n  int64 t=y->y;\n  int64 pq=ABS((s-a)*(s-a)+(t-b)*(t-b)-((s-c)*(s-c)+(t-d)*(t-d)));\n  int64 ll=(a-c)*(a-c)+(b-d)*(b-d);\n  return pq<=ll;;\n}\n\ndouble calcLinePointDistance(const line *a,const point *b){\n  double p=calcPointDistance(&(a->s),b);\n  double min=p;\n  double q=calcPointDistance(&(a->t),b);\n  min=MIN(min,q);\n  double l=calcPointDistance(&(a->s),&(a->t));\n  if(calcLinePointDistanceInnerFunction(a,b)){\n    int64 p=a->s.x-b->x;\n    int64 q=a->s.y-b->y;\n    int64 r=a->t.x-b->x;\n    int64 s=a->t.y-b->y;\n    double area=ABS(p*s-q*r);\n    min=MIN(min,area/l);\n  }\n  return min;\n}\n\ndouble calcLineDistance(const line *a,const line *b){\n  if(isIntersect(a,b)) return 0;\n\n  //2点間の距離の計算\n  double min=calcLinePointDistance(a,&(b->s));\n  min=MIN(min,calcLinePointDistance(a,&(b->t)));\n  min=MIN(min,calcLinePointDistance(b,&(a->s)));\n  min=MIN(min,calcLinePointDistance(b,&(a->t)));\n  return min; \n}\n\nvoid run(void){\n  int q;\n  scanf(\"%d\",&q);\n  while(q--){\n    line a,b;\n    scanfLine(&a);\n    scanfLine(&b);\n    double ans=calcLineDistance(&a,&b);\n    printf(\"%.9lf\\n\",ans);\n  }\n  return;\n}\n\nint main(void){\n  run();\n  return 0;\n}\n\n"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<math.h>\n#include<stdlib.h>\n#define max(a,b) a<b?b:a\n#define min(a,b) a<b?a:b\n#define POW2(a)  a*a\n#define ROOP(i,n) for(i = 0;i < n;i++)\n#define _USE_MATH_DEFINES\n\ntypedef struct POINT{\n\tdouble x;\n\tdouble y;\n}POINT;\ntypedef struct LINE{\n\tPOINT s;//start point\n\tPOINT e;//end point\n}LINE;\ntypedef struct COMPLEX{\n\tdouble r;//?????¢\n\tdouble q;//????§???????theta\n}COMPLEX;\n\n//POINT????????????\nvoid print_p(POINT a){\n\tprintf(\"(%lf,%lf)\\n\",a.x,a.y);\n}\n\n//LINE????????????\nvoid print_l(LINE a){\n\tprintf(\"(%lf,%lf) -> (%lf,%lf)\\n\",(a.s).x,(a.s).y,(a.e).x,(a.e).y);\n}\n\n//COMPLEX????????????\nvoid print_c(COMPLEX a){\n\tprintf(\"(%lf,%lf)\\n\",a.r,a.q);\n}\n\n//????????????????????¢?????????\ndouble norm2(POINT a){\n\treturn POW2(a.x)+POW2(a.y);\n}\n\n//????????????????????¢\ndouble norm(POINT a){\n\treturn sqrt(norm2(a));\n}\n\n//a->b?????´??§???????????????\nPOINT make_vec(POINT a,POINT b){\n\tb.x -= a.x;\n\tb.y -= a.y;\n\treturn b;\n}\n\n//2???a,b???????????¢\ndouble distance(POINT a,POINT b){\n\treturn norm(make_vec(a,b));\n}\n\n//??´??§????????????\nPOINT sum_vec(POINT a,POINT b){\n\ta.x += b.x;\n\ta.y += b.y;\n\treturn a;\n}\n\n//??´??§????????????\n//mkae_vec??¨?????£??????????????¨???????????????\n//??????????????????\nPOINT dif_vec(POINT a,POINT b){\n\ta.x -= b.x;\n\ta.y -= b.y;\n\treturn a;\n}\n\n//??´??§????????????????????????\nPOINT scalar_vec(POINT a,double k){\n\ta.x *= k;\n\ta.y *= k;\n\treturn a;\n}\n\n//???????????????\nPOINT minus_vec(POINT a){\n\treturn scalar_vec(a,-1.0);\n}\n\n//??????\ndouble dot(POINT a,POINT b){\n\treturn a.x*b.x + a.y*b.y;\n}\n\n//??????\ndouble cross(POINT a,POINT b){\n\treturn a.x*b.y - a.y*b.x;\n}\n\n//AP:PB=t:s??¨?????????????±???????\n//k, 0:??????, 1:??????\n//* t:(1-t)??§???????????£??????????????£????????????????????????????????????????????????????????¨?????£???\nPOINT division(POINT a,POINT b,double t,double s,int k){\n\tdouble tmp = t + s * (1 - k*2);\n\ta.x += (make_vec(a,b)).x / tmp * t;\n\ta.y += (make_vec(a,b)).y / tmp * t;\n\treturn a;\n}\n\n//???p????????´???a?????????????????????????¶??????????\nPOINT perpendicular(LINE a,POINT p){\n\tPOINT ps = make_vec(p,a.s);\n\tPOINT pe = make_vec(p,a.e);\n\tdouble t = norm2(ps) - dot(ps,pe);\n\tdouble s = norm2(pe) - dot(ps,pe);\n\treturn division(a.s,a.e,t,s,0);\n}\n\n//??´???a???????????????p??¨????§°???????????????\nPOINT reflection(LINE a,POINT p){\n\tPOINT h = perpendicular(a,p);\n\treturn sum_vec(h,make_vec(p,h));\n}\n\n//* ????§???¢?????????\nint inclusion(POINT a[],int n,POINT p){\n\tint ans = 0;\n\tint i;\n\tPOINT g[n+1];\n\tdouble w,rad = 0.0;\n\n\tfor(i = 0;i < n;i++){\n\t\tg[i] = a[i];\n\t}\n\tg[n] = g[0];\n\n\tfor(i = 0;i < n;i++){\n\t\tif(g[i].x == p.x && g[i].y == p.y){\n\t\t\treturn ans = 1;\n\t\t}\n\t}\n\tfor(i = 0;i < n;i++){\n\t\tw = atan2(cross(make_vec(p,g[i]),make_vec(p,g[i+1])),\n\t\t\t\tdot(make_vec(p,g[i]),make_vec(p,g[i+1])));\n\t\trad += w;\n\t\tif(fabs(w - M_PI) <= 0.000001 ||\n\t\t\t fabs(w + M_PI) <= 0.000001)\n\t\t\treturn ans = 1;\n\t}\n\tif(fabs(rad - M_PI*2)<=0.000001){//2??\n\t\treturn ans = 2;//in!\n\t}\n\treturn ans;\n}\n\n// a.s, a.e, p?????????????????????\n// ???????¨???????????????????????????????  1\n// ????¨?????????????????????????????????? -1\n// p, a.s, a.e????????????????????? 2\n// a.s, a.e, p?????????????????????-2\n// ???p?????´???a???????????????????????? 0\nint ccw(LINE a,POINT p){\n\tint cls = cross(make_vec(a.s,a.e),make_vec(a.s,p));\n\tif(cls > 0){\n\t\treturn  1;\n\t}else if(cls < 0){\n\t\treturn -1;\n\t}else if(dot(make_vec(a.s,a.e),make_vec(a.s,p)) < 0.0){\n\t\treturn  2;\n\t}else if(dot(make_vec(a.e,a.s),make_vec(a.e,p)) < 0.0){\n\t\treturn -2;\n\t}else{\n\t\treturn  0;\n\t}\n}\n\n// ??????????????????\nint parallel(LINE a,LINE b){\n\tif(!cross(make_vec(a.s,a.e),make_vec(b.s,b.e)))\n\t\treturn 1;\n\telse\n\t\treturn 0;\n}\n\n// ?????´????????????\nint orthogonal(LINE a,LINE b){\n\tif(!dot(make_vec(a.s,a.e),make_vec(b.s,b.e)))\n\t\treturn 1;\n\telse\n\t\treturn 0;\n}\n\n// ??????a,b???????????????????????????\nint intersection(LINE a,LINE b){\n\tif(ccw(a,b.s)*ccw(a,b.e) <= 0 &&\n\t   ccw(b,a.s)*ccw(b,a.e) <= 0)\n\t\treturn 1;\n\treturn 0;\n}\n\n//??????a,b?????????\nPOINT cross_point(LINE a,LINE b){\n\tdouble c1 = cross(make_vec(a.s,b.s),make_vec(a.s,b.e));\n\tdouble c2 = cross(make_vec(a.e,b.s),make_vec(a.e,b.e));\n\treturn division(a.s,a.e,fabs(c1),fabs(c2),0);\n}\n\n//??´???a??¨???p????????¢\ndouble distanceLP(LINE a,POINT p){\n\tif(dot(make_vec(a.s,a.e),make_vec(a.s,p)) < 0.0)\n\t\treturn norm(make_vec(a.s,p));\n\tif(dot(make_vec(a.e,a.s),make_vec(a.e,p)) < 0.0)\n\t\treturn norm(make_vec(a.e,p));\n\treturn norm(make_vec(p,perpendicular(a,p)));\n}\n\n//??´???a??¨??´???b????????¢\ndouble distanceLL(LINE a,LINE b){\n\tdouble a1,a2,a3,a4;\n\tif(intersection(a,b) == 1)\n\t\treturn 0.0000000000;\n\ta1 = distanceLP(a,b.s);\n\ta2 = distanceLP(a,b.e);\n\ta3 = distanceLP(b,a.s);\n\ta4 = distanceLP(b,a.e);\n\t//a1 = min(a1,min(a2,min(a3,a4)));\n\ta1 = min(a1,a2);\n\ta3 = min(a3,a4);\n\ta1 = min(a1,a3);\n\treturn a1;\n}\n\nint main(){\n\tLINE a,b;\n\tint k;\n\tPOINT p;\n\tscanf(\"%d\",&k);\n\twhile(k--){\n\t\tscanf(\"%lf%lf%lf%lf\",&a.s.x,&a.s.y,&a.e.x,&a.e.y);\n\t\tscanf(\"%lf%lf%lf%lf\",&b.s.x,&b.s.y,&b.e.x,&b.e.y);\n\t\tprintf(\"%.10lf\\n\",distanceLL(a,b));\n\t}\n/*\n\tPOINT a,b,q;\n\tdouble t,s;\n\n\tscanf(\"%lf%lf%lf%lf%lf%lf\",&a.x,&a.y,&b.x,&b.y,&t,&s);\n\n\tq = division(a,b,t,s,0);\n\tprintf(\"%lf %lf\\n\",q.x,q.y);\n*/\n/*\n\tLINE a;\n\tPOINT b;\n\tint k;\n\tchar s[5][100]={{\"ONLINE_FRONT\"},{\"CLOCKWISE\"},{\"ON_SEGMENT\"},{\"COUNTER_CLOCKWISE\"},{\"ONLINE_BACK\"}};\n\t\n\tscanf(\"%lf%lf%lf%lf%d\",&a.s.x,&a.s.y,&a.e.x,&a.e.y,&k);\n\twhile(k--){\n\t\tscanf(\"%lf%lf\",&b.x,&b.y);\n\t\tprintf(\"%s\\n\",s[ccw(a,b)+2]);\n\t}\n*/\n/*\n\tPOINT a,b;\n\tint k;\n\twhile(1){\n\t\tscanf(\"%lf%lf%lf%lf%d\",&a.x,&a.y,&b.x,&b.y,&k);\n\t\tprint_p(sum_vec(a,b));\n\t\tprint_p(dif_vec(a,b));\n\t\tprint_p(scalar_vec(a,k));\n\t\tprint_p(minus_vec(a));\n\t}\n*/\n/*\n\tPOINT a,b;\n\twhile(1){\n\t\tscanf(\"%lf%lf%lf%lf\",&a.x,&a.y,&b.x,&b.y);\n\t\tprintf(\"%lf\\n\",distance(a,b));\n\t}\n*/\n/*\n\tint i,m,n;\n\tPOINT g[100];//n\n\tPOINT q;//m\n\tint ans = 0;\n\n\tscanf(\"%d\",&n);\n\tfor(i = 0;i < n;i++){\n\t\tscanf(\"%lf%lf\",&g[i].x,&g[i].y);\n\t}\n\tscanf(\"%d\",&m);\n\tfor(i = 0;i < m;i++){\n\t\tscanf(\"%lf%lf\",&q.x,&q.y);\n\t\tans = inclusion(g,n,q);\n\t\tprintf(\"%d\\n\",ans);\n\t}\n*/\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<math.h>\nint ifcl(int p0[2],int p1[2],int p2[2],int p3[2]){\n  long long x=p0[0],x0=p1[0]-x,x1=p2[0]-x,x2=p3[0]-x,x3=x2-x1,x4=x1-x0,x5=x2-x0;\n  long long y=p0[1],y0=p1[1]-y,y1=p2[1]-y,y2=p3[1]-y,y3=y2-y1,y4=y1-y0,y5=y2-y0;\n  long long c1=(x0*y1-y0*x1)*(x0*y2-y0*x2),c2=(x3*y4-y3*x4)*(x3*y1-y3*x1);\n  long long d1=x1*x4+y1*y4,d2=x4*x5+y4*y5,d3=x2*x5+y2*y5,d4=x1*x2+y1*y2;\n  return c1||c2?(c1<=0&&c2<=0?1:0):(d1>0&&d2>0&&d3>0&&d4>0?0:1);\n}\ndouble dMIN(double a,double b){return a<b?a:b;}\ndouble dspl(int p0[2],int p1[2],int p2[2]){\n  int a=p0[1]-p1[1],b=p0[0]-p1[0],c=p0[0]*p1[1]-p1[0]*p0[1];\n  int d=p2[1]-p1[1],e=p2[0]-p1[0],f=p2[1]-p0[1],g=p2[0]-p0[0];\n  if(a*d+b*e<0||a*f+b*g>0)return dMIN(hypot(d,e),hypot(f,g));\n  return abs(p2[0]*a-p2[1]*b+c)/hypot(a,b);\n}\ndouble dsll(int *p0,int *p1,int *p2,int *p3){\n  return ifcl(p0,p1,p2,p3)?0:dMIN(dMIN(dspl(p2,p3,p0),dspl(p2,p3,p1)),\n\t\t\t\t  dMIN(dspl(p0,p1,p2),dspl(p0,p1,p3)));\n}\nint main(){\n  int p[4][2],n,i;\n  scanf(\"%d\",&n);\n  while(n--){\n    for(i=0;i<8;i++)scanf(\" %d\",&p[i/2][i%2]);\n    printf(\"%.9f\\n\",dsll(p[0],p[1],p[2],p[3]));\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\n#define EPS 0.0000000002\n#define MAX 1010001000\n\ntypedef struct point{\n    double x, y;\n}point;\n\ntypedef struct line{\n    point st, en;\n}line;\n\ndouble norm(point a);\ndouble norm2(point a);\ndouble distans(point a, point b);\npoint sum_vector(point a, point b);\npoint diff_vector(point a, point b);\npoint minus_vector(point a);\npoint prod_vector(point a, double t);\ndouble dot(point a, point b);\ndouble cross(point a, point b);\n\npoint reflection(line a, point p);\npoint projection(line a, point p);\nint ccw(line a, point p);\nint parallel(line a, line b);\nint orthogonal(line a, line b);\nint intersection(line a, line b);\npoint cross_point(line a, line b);\ndouble distanceLP(line a, point b);\ndouble distanceLL(line a, line b);\n\ndouble fmin(double a, double b);\n////////////////////////////////////////////\ndouble fmin(double a, double b)\n{\n    return a < b ? a : b;\n}\n\ndouble norm(point a)\n{\n    //原点からの距離\n    return sqrt((a.x * a.x) + (a.y * a.y));\n}\n\ndouble norm2(point a)\n{\n    //原点からの距離の二乗\n    return (a.x * a.x) + (a.y * a.y);\n}\n\ndouble distans(point a, point b)\n{\n    //二点間の距離\n    point tmp = sum_vector(b, minus_vector(a));\n    return norm(tmp);\n}\n\npoint sum_vector(point a, point b)\n{\n    //ベクトルの和\n    a.x += b.x;\n    a.y += b.y;\n    return a;\n}\n\npoint diff_vector(point a, point b)\n{\n    //ベクトルの差\n    a.x -= b.x;\n    a.y -= b.y;\n    return a;\n}\n\npoint prod_vector(point a, double t)\n{\n    //ベクトルのスカラー倍\n    a.x *= t;\n    a.y *= t;\n    return a;\n}\n\npoint minus_vector(point a)\n{\n    //逆ベクトル\n    a.x *= -1;\n    a.y *= -1;\n    return a;\n}\n\ndouble dot(point a, point b)\n{\n    //内積\n    return (a.x * b.x) + (a.y * b.y);\n}\n\ndouble cross(point a, point b)\n{\n    //外積\n    return (a.x * b.y) - (b.x * a.y);\n}\n\n///////////////////////////////////////////\npoint reflection(line a, point p)\n{\n    //直線aについて点pと線対称な点を返す\n    return sum_vector(projection(a, p), diff_vector(projection(a, p), p));\n}\n\npoint projection(line a, point p)\n{\n    //直線ab上に点pから垂線を下ろしたときの点h//\n    point h;\n    double k = dot(diff_vector(a.st, p), diff_vector(a.st, a.en))\n        / dot(diff_vector(a.en, a.st), diff_vector(a.en, a.st));\n    h.x = k * (a.en.x - a.st.x) + a.st.x;\n    h.y = k * (a.en.y - a.st.y) + a.st.y;\n    return h;\n}\n\nint ccw(line a, point p)\n{\n    //counter clockwise == 1\n    //clockwise == -1\n    //online back == 2\n    //online front == -2\n    //on segment == 0\n    int cls = cross(diff_vector(a.en, a.st), diff_vector(p, a.st));\n    if (cls > 0) {\n        return 1;\n    } else if (cls < 0) {\n        return -1;\n    } else if (dot(diff_vector(a.en, a.st), diff_vector(p, a.st)) < 0) {\n        return 2;\n    } else if (norm(diff_vector(a.st, a.en)) < norm(diff_vector(a.st, p))) {\n        return -2;\n    } else {\n        return 0;\n    }\n}\n\nint parallel(line a, line b)\n{\n    //並行で1,そうでなくて0\n    if (!cross(diff_vector(a.en, a.st), diff_vector(b.en, b.st))) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n\nint orthogonal(line a, line b)\n{\n    //直行で1,そうでなくて0\n    if (!dot(diff_vector(a.en, a.st), diff_vector(b.en, b.st))) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n\nint intersection(line a, line b)\n{\n    //線分a, bが交差するとき1,そうでなくて0\n    if (ccw(a,b.st) * ccw(a,b.en) <= 0 &&\n            ccw(b,a.st) * ccw(b,a.en) <= 0) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n\npoint cross_point(line a, line b)\n{\n    //交差する線分の交点の座標\n    double c1 = cross(diff_vector(b.st, a.st), diff_vector(b.en, a.st));\n    double c2 = cross(diff_vector(b.st, a.en), diff_vector(b.en, a.en));\n    double t = fabs(c1) / (fabs(c1) + fabs(c2));\n    return sum_vector(prod_vector(diff_vector(a.en, a.st), t), a.st);\n}\n\ndouble distanceLP(line a, point b)\n{\n    if (dot(diff_vector(a.en, a.st), diff_vector(b, a.st)) < 0.0) {\n        return fabs(norm(diff_vector(b, a.st)));\n    }\n    if (dot(diff_vector(a.st, a.en), diff_vector(b, a.en)) < 0.0) {\n        return fabs(norm(diff_vector(b, a.en)));\n    }\n    point h = projection(a, b);\n    return norm(diff_vector(h, b));\n}\n\n\ndouble distanceLL(line a, line b)\n{\n    double ans1, ans2, ans3, ans4;\n    if (intersection(a, b)) {\n        return 0.00000000000;\n    } else {\n        ans1 = distanceLP(a, b.st);\n        ans2 = distanceLP(a, b.en);\n        ans3 = distanceLP(b, a.st);\n        ans4 = distanceLP(b, a.en);\n    }\n    return fmin(ans1, fmin(ans2, fmin(ans3, ans4)));\n}\n\n\n///////////////////////////////////////\n\nint main(void)\n{\n    line a, b;\n    double ans;\n    int n, i;\n\n    scanf(\"%d\", &n);\n    for (i = 0; i < n; i++) {\n        scanf(\"%lf%lf%lf%lf%lf%lf%lf%lf\"\n                , &a.st.x, &a.st.y, &a.en.x, &a.en.y\n                , &b.st.x, &b.st.y, &b.en.x, &b.en.y);\n        ans = distanceLL(a, b);\n        printf(\"%.10lf\\n\", ans);\n    }\n    return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<stdlib.h>\n#include<math.h>\n\ntypedef long long int int64;\n\n#define MAX(a,b) ((a)>(b)?(a):(b))\n#define MIN(a,b) ((a)<(b)?(a):(b))\n#define ABS(a) ((a)>(0)?(a):-(a))\n\ntypedef struct point2d{\n  int64 x,y;\n} point;\n\ntypedef struct line2d{\n  point s,t;\n} line;\n\nvoid swap(int64 *a,int64 *b){\n  int64 tmp=*a;\n  *a=*b;\n  *b=tmp;\n}\n\nint func(const line *a,const point *b){\n  int64 p=a->s.x;\n  int64 q=a->s.y;\n  int64 r=a->t.x;\n  int64 s=a->t.y;\n  int64 t=(s-q)*(b->x-p)-(r-p)*(b->y-q);\n  return t==0?0:(t>0?1:-1);\n}\n\nint isIntersect(const line *a,const line *b){\n  int p=func(a,&(b->s));\n  int q=func(a,&(b->t));\n  int r=func(b,&(a->s));\n  int s=func(b,&(a->t));\n  if(p==0 && q==0 && r==0 && s==0){//同一直線上に2つの線分有り\n    if(a->s.x!=a->t.x){\n      int64 p=a->s.x;\n      int64 q=a->t.x;\n      int64 r=b->s.x;\n      int64 s=b->t.x;\n      if(p>q) swap(&p,&q);\n      if(r>s) swap(&r,&s);\n      return !(p>s || r>q);\n    } else {\n      int64 p=a->s.y;\n      int64 q=a->t.y;\n      int64 r=b->s.y;\n      int64 s=b->t.y;\n      if(p>q) swap(&p,&q);\n      if(r>s) swap(&r,&s);\n      return !(p>s || r>q);\n    }\n  }\n  return p*q<=0 && r*s<=0;\n}\n\nvoid scanfLine(line *a){\n  scanf(\"%lld%lld%lld%lld\",&(a->s.x),&(a->s.y),&(a->t.x),&(a->t.y));\n  return;\n}\n\ndouble calcPointDistance(const point *a,const point *b){\n  int64 p=a->x;\n  int64 q=a->y;\n  int64 r=b->x;\n  int64 s=b->y;\n  return sqrt((p-r)*(p-r)+(q-s)*(q-s));\n}\n\ndouble calcArea(double a,double b,double c){\n  double s=(a+b+c)/2;\n  return sqrt(s*(s-a)*(s-b)*(s-c));\n}\n\ndouble calcLinePointDistance(const line *a,const point *b){\n  double p=calcPointDistance(&(a->s),b);\n  double min=p;\n  double q=calcPointDistance(&(a->t),b);\n  min=MIN(min,q);\n  double l=calcPointDistance(&(a->s),&(a->t));\n  if((p*p+l*l-q*q)>=0 && (q*q+l*l-p*p)>=0){\n    min=MIN(min,2/l*calcArea(p,q,l));\n  }\n  return min;\n}\n\ndouble calcLineDistance(const line *a,const line *b){\n  if(isIntersect(a,b)) return 0;\n\n  //2点間の距離の計算\n  double min=calcLinePointDistance(a,&(b->s));\n  min=MIN(min,calcLinePointDistance(a,&(b->t)));\n  min=MIN(min,calcLinePointDistance(b,&(a->s)));\n  min=MIN(min,calcLinePointDistance(b,&(a->t)));\n  return min; \n}\n\nvoid run(void){\n  int q;\n  scanf(\"%d\",&q);\n  while(q--){\n    line a,b;\n    scanfLine(&a);\n    scanfLine(&b);\n    double ans=calcLineDistance(&a,&b);\n    printf(\"%.9lf\\n\",ans);\n  }\n  return;\n}\n\nint main(void){\n  run();\n  return 0;\n}\n\n"
  },
  {
    "language": "Java",
    "code": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.PrintWriter;\nimport java.util.*;\nimport java.math.BigInteger;\n \npublic class Main implements Runnable {\n\t\n\tstatic int mod = 1000000007;\n\t\n    public static void main(String[] args) {\n    \tnew Thread(null, new Main(), \"\", 1024 * 1024 * 1024).start();\n    }\n    \n    public void run() {\n       \tPrintWriter out = new PrintWriter(System.out);\n        FastScanner sc = new FastScanner();\n        int q = sc.nextInt();\n        \n        for(int i=0;i<q;i++){\n        \tPoint p0 = new Point(sc.nextDouble(),sc.nextDouble());\n        \tPoint p1 = new Point(sc.nextDouble(),sc.nextDouble());\n        \tPoint p2 = new Point(sc.nextDouble(),sc.nextDouble());\n        \tPoint p3 = new Point(sc.nextDouble(),sc.nextDouble());\n        \tLineSegment ls = new LineSegment(p0,p1);\n        \tLineSegment ls2 = new LineSegment(p2,p3);\n        \t\n        \tout.printf(\"%.10f\",ls.distance(ls2));\n        \tout.println();\n        }\n        \n        out.flush();\n    }\n\n    \n}\n\nclass Point implements Comparable<Point>{\n\tdouble x,y;\n\tstatic final double eps = 0.00000001;\n\t\n\tpublic Point(double a, double b){\n\t\tthis.x = a;\n\t\tthis.y = b;\n\t}\n\t\n\t//距離の2乗\n\tpublic double d2(Point b){\n\t\treturn (x-b.x)*(x-b.x) + (y-b.y)*(y-b.y);\n\t}\n\t\n\t//通常のユークリッド距離\n\tpublic double dist(Point b){\n\t\treturn Math.sqrt((x-b.x)*(x-b.x) + (y-b.y)*(y-b.y));\n\t}\n\t\n\t//p1へのベクトルからみてp2へのベクトルが反時計回りなら1、時計回りなら2\n\t//↑が同一直線状にあるとき、→p2が→p1と反対側なら3、→p2が→p1の延長線上なら4、→p2が→p1上にあれば5を返す\n\tint direction(Point p1, Point p2){\n\t\t\n\t\tif(p2.x == x && p2.y == y){\n\t\t\treturn 5;\n\t\t}\n\t\t\n\t\t//外積の第三成分 = |→p1||→p2|sinθ\n\t\tdouble det = (p1.x -x)*(p2.y-y) - (p2.x -x)*(p1.y - y);\n\t\t\n\t\tif(det>eps){\n\t\t\treturn 1;\n\t\t}\n\t\telse if(det<-eps){\n\t\t\treturn 2;\n\t\t}\n\t\telse{\t//同一直線状\n\t\t\tif((p1.x-x >0 == p2.x-x <0) && p1.x-x != 0){\t//反対側\n\t\t\t\treturn 3;\n\t\t\t}\n\t\t\telse if((p1.y-y >0 == p2.y-y <0) && p1.y-y != 0){\t//反対側\n\t\t\t\treturn 3;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tdouble d10 = d2(p1);\t//p1とp0の距離^2\n\t\t\t\tdouble d20 = d2(p2);\t//p2とp0の距離^2\n\t\t\t\tif(d10 < d20){\t//p2のほうが遠い\n\t\t\t\t\treturn 4;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\treturn 5;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t}\n\n\t@Override\n\tpublic int hashCode() {\n\t\tfinal int prime = 31;\n\t\tint result = 1;\n\t\tlong temp;\n\t\ttemp = Double.doubleToLongBits(x);\n\t\tresult = prime * result + (int) (temp ^ (temp >>> 32));\n\t\ttemp = Double.doubleToLongBits(y);\n\t\tresult = prime * result + (int) (temp ^ (temp >>> 32));\n\t\treturn result;\n\t}\n\n\t@Override\n\tpublic boolean equals(Object obj) {\n\t\tif (this == obj)\n\t\t\treturn true;\n\t\tif (obj == null)\n\t\t\treturn false;\n\t\tif (getClass() != obj.getClass())\n\t\t\treturn false;\n\t\tPoint other = (Point) obj;\n\t\tif (Double.doubleToLongBits(x) != Double.doubleToLongBits(other.x))\n\t\t\treturn false;\n\t\tif (Double.doubleToLongBits(y) != Double.doubleToLongBits(other.y))\n\t\t\treturn false;\n\t\treturn true;\n\t}\n\t\n\t@Override\n\tpublic int compareTo(Point o){\n\t\tif(x!=o.x){\n\t\t\treturn Double.compare(x,o.x);\n\t\t}\n\t\treturn Double.compare(y, o.y);\n\t}\n\t\t\n}\n\nclass Line {\n\tdouble a;\n\tdouble b;\n\tdouble c;\n\tstatic final double eps = 0.00000001;\n\t\n\t//2点p,qを通る直線\n\tpublic Line(Point p, Point q){\n\t\tif(p.y == q.y){\n\t\t\tthis.a = 0;\n\t\t\tthis.b = 1;\n\t\t\tthis.c = -(p.y);\n\t\t}\n\t\telse if(p.x == q.x){\n\t\t\tthis.a = 1;\n\t\t\tthis.b = 0;\n\t\t\tthis.c = -(p.x);\n\t\t}\n\t\telse{\n\t\t\tthis.a = p.y - q.y;\n\t\t\tthis.b = q.x - p.x;\n\t\t\tthis.c = - a*p.x - b*p.y;\n\t\t}\n\t}\n\tpublic Line(LineSegment ls){\n\t\tPoint p = ls.p1;\n\t\tPoint q = ls.p2;\n\t\tif(p.y == q.y){\n\t\t\tthis.a = 0;\n\t\t\tthis.b = 1;\n\t\t\tthis.c = -(p.y);\n\t\t}\n\t\telse if(p.x == q.x){\n\t\t\tthis.a = 1;\n\t\t\tthis.b = 0;\n\t\t\tthis.c = -(p.x);\n\t\t}\n\t\telse{\n\t\t\tthis.a = p.y - q.y;\n\t\t\tthis.b = q.x - p.x;\n\t\t\tthis.c = - a*p.x - b*p.y;\n\t\t}\n\t}\n\t\n\t//ax+by+c=0\n\tpublic Line(double a, double b, double c){\n\t\tthis.a = a;\n\t\tthis.b = b;\n\t\tthis.c = c;\n\t}\n\t//y=ax+c\n\tpublic Line(double a, double c){\n\t\tthis.a = a;\n\t\tthis.b = -1;\n\t\tthis.c = c;\n\t}\n\t\n\t//点pからの垂線の足\n\tpublic Point projection(Point p){\n\t\t//-bx+ay+d=0がこの直線と垂直でpを通る直線とし、dを求める\n\t\tdouble d = b*p.x - a*p.y;\n\t\treturn crossPoint(new Line(-b,a,d));\n\t}\n\t\n\t//点pと線対称な点\n\tpublic Point reflection(Point p){\n\t\tPoint proj = projection(p);\n\t\tdouble x = proj.x + (proj.x - p.x);\n\t\tdouble y = proj.y + (proj.y - p.y);\n\t\treturn new Point(x,y);\n\t}\n\t\n\t//直線lとの交点\n\tpublic Point crossPoint(Line l){\n\t\tif(a==0){ //b=1前提\n\t\t\tdouble x = (l.b*c - l.c)/l.a;\n\t\t\treturn new Point(x,-c);\n\t\t}\n\t\tif(l.a==0){ //l.b=1前提\n\t\t\tdouble x = (b*l.c - c)/a;\n\t\t\treturn new Point(x, -l.c);\n\t\t}\n\t\t\n\t\t//xの係数をlと等しくする\n\t\t//気持ちは double A = l.a;\n\t\tdouble mlt = l.a/a;\n\t\tdouble B = b * mlt;\n\t\tdouble C = c * mlt;\n\t\tdouble y = (l.c-C)/(B-l.b);\n\t\tdouble x = (-b*y-c)/a;\n\t\treturn new Point(x,y);\n\t}\n\t\n\t//直線lと同一かどうか\n\tpublic boolean isSame(Line l){\n\t\tif(a == 0){\n\t\t\tif(l.a != 0){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif(Math.abs(c - l.c)<eps){\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(b == 0){\n\t\t\tif(l.b != 0){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif(Math.abs(c - l.c)<eps){\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(Math.abs(a*l.b - b*l.a)<eps && Math.abs(b*l.c - c*l.b)<eps){\t//a1:b1:c1 = a2:b2:c2\n\t\t\treturn true;\n\t\t}\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\t//直線lと平行かどうか\n\tboolean isParallel(Line l){\n\t\tif(Math.abs(a*l.b - l.a*b) < eps){\n\t\t\treturn true;\n\t\t}\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\t//直線lと垂直かどうか\n\tboolean isOrthogonal(Line l){\n\t\tif(Math.abs(a*l.a + b*l.b) < eps){\n\t\t\treturn true;\n\t\t}\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t//点pとの距離\n\tdouble distance(Point p){\n\t\treturn Math.abs(a*p.x + b*p.y + c)/Math.sqrt(a*a + b*b);\n\t}\n\t\n\tpublic void print(){\n\t\tSystem.out.println(a + \"x + \" + b + \"y + \" + c + \"= 0\" );\n\t}\n\t\n\tpublic void display(){\n\t\tSystem.out.println(a + \"x + \" + b + \"y + \" + c + \" = 0\");\n\t}\n\t\n}\n\nclass LineSegment {\n\tPoint p1;\n\tPoint p2;\n\tstatic final double eps = 0.00000001;\n\t\n\tpublic LineSegment(Point p1, Point p2){\n\t\tthis.p1 = p1;\n\t\tthis.p2 = p2;\n\t}\n\t\n\t//線分lsと交わるか\n\tboolean isIntersect(LineSegment ls){\n\t\tLine a = new Line(this);\n\t\tLine b = new Line(ls);\n\t\t\n\t\tif(a.isSame(b)){\t//重なる\n\t\t\tif(p1.x == p2.x){\t//x軸に垂直\n\t\t\t\tdouble big = Math.max(p1.y, p2.y);\n\t\t\t\tdouble small = Math.min(p1.y, p2.y);\n\t\t\t\tdouble lbig = Math.max(ls.p1.y, ls.p2.y);\n\t\t\t\tdouble lsmall = Math.min(ls.p1.y, ls.p2.y);\n\t\t\t\t\n\t\t\t\tif(lsmall <= big && small <= lbig){\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse{\n\t\t\t\tdouble big = Math.max(p1.x, p2.x);\n\t\t\t\tdouble small = Math.min(p1.x, p2.x);\n\t\t\t\tdouble lbig = Math.max(ls.p1.x, ls.p2.x);\n\t\t\t\tdouble lsmall = Math.min(ls.p1.x, ls.p2.x);\n\t\t\t\t\n\t\t\t\tif(lsmall <= big && small <= lbig){\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t}\n\t\telse if(a.isParallel(b)){\t//平行\n\t\t\treturn false;\n\t\t}\n\t\telse{\n\t\t\tPoint cross = a.crossPoint(b);\n\n\t\t\tif(isOn(cross) && ls.isOn(cross)){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\t\n\t//pが線分上にあるか\n\tboolean isOn(Point p){\n\t\tif(p1.x == p2.x){\t//x軸に垂直\n\t\t\tdouble big = Math.max(p1.y, p2.y);\n\t\t\tdouble small = Math.min(p1.y, p2.y);\n\t\t\t\n\t\t\tif(small <= p.y && p.y <= big){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tdouble big = Math.max(p1.x, p2.x);\n\t\t\tdouble small = Math.min(p1.x, p2.x);\n\t\t\t\n\t\t\tif(small <= p.x && p.x <= big){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t//点pとの距離\n\tdouble distance(Point p){\n\t\tdouble[] vec12 = {p2.x - p1.x, p2.y - p1.y};\n\t\tdouble[] vec1p = {p.x - p1.x, p.y - p1.y};\n\t\tif(dot(vec12,vec1p)<-eps){\t//この内積が負→p1とpが最短\n\t\t\treturn p.dist(p1);\n\t\t}\n\t\t\n\t\tdouble[] vec21 = {p1.x - p2.x, p1.y - p2.y};\n\t\tdouble[] vec2p = {p.x - p2.x, p.y - p2.y};\n\t\tif(dot(vec21,vec2p)<-eps){\t//この内積が負→p2とpが最短\n\t\t\treturn p.dist(p2);\n\t\t}\n\t\t\n\t\t//上2つでないので、pと最も近い点は線分の内点\n\t\tLine l = new Line(p1,p2);\n\t\treturn l.distance(p);\n\t}\n\t//ベクトルの内積\n\tstatic double dot(double[] vec1, double[] vec2){\n\t\treturn vec1[0]*vec2[0] + vec1[1]*vec2[1];\n\t}\n\t\n\t//線分との距離\n\tdouble distance(LineSegment ls){\n\t\tif(isIntersect(ls)){\n\t\t\treturn 0;\n\t\t}\n\t\t\n\t\tdouble c1 = distance(ls.p1);\n\t\tdouble c2 = distance(ls.p2);\n\t\tdouble c3 = ls.distance(p1);\n\t\tdouble c4 = ls.distance(p2);\n\t\t\n\t\treturn Math.min(Math.min(c1, c2), Math.min(c3, c4));\n\t}\n\t\n}\n\nclass FastScanner {\n\tprivate final InputStream in = System.in;\n\tprivate final byte[] buffer = new byte[1024];\n\tprivate int ptr = 0;\n\tprivate int buflen = 0;\n\tprivate boolean hasNextByte() {\n\t\tif (ptr < buflen) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\tptr = 0;\n\t\t\ttry {\n\t\t\t\tbuflen = in.read(buffer);\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\tif (buflen <= 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\tprivate int readByte() {\n\t\tif (hasNextByte())\n\t\t\treturn buffer[ptr++];\n\t\telse\n\t\t\treturn -1;\n\t}\n\tprivate static boolean isPrintableChar(int c) {\n\t\treturn 33 <= c && c <= 126;\n\t}\n\tpublic boolean hasNext() {\n\t\twhile (hasNextByte() && !isPrintableChar(buffer[ptr]))\n\t\t\tptr++;\n\t\treturn hasNextByte();\n\t}\n\tpublic String next() {\n\t\tif (!hasNext())\n\t\t\tthrow new NoSuchElementException();\n\t\tStringBuilder sb = new StringBuilder();\n\t\tint b = readByte();\n\t\twhile (isPrintableChar(b)) {\n\t\t\tsb.appendCodePoint(b);\n\t\t\tb = readByte();\n\t\t}\n\t\treturn sb.toString();\n\t}\n\tpublic long nextLong() {\n\t\tif (!hasNext())\n\t\t\tthrow new NoSuchElementException();\n\t\tlong n = 0;\n\t\tboolean minus = false;\n\t\tint b = readByte();\n\t\tif (b == '-') {\n\t\t\tminus = true;\n\t\t\tb = readByte();\n\t\t}\n\t\tif (b < '0' || '9' < b) {\n\t\t\tthrow new NumberFormatException();\n\t\t}\n\t\twhile (true) {\n\t\t\tif ('0' <= b && b <= '9') {\n\t\t\t\tn *= 10;\n\t\t\t\tn += b - '0';\n\t\t\t} else if (b == -1 || !isPrintableChar(b)) {\n\t\t\t\treturn minus ? -n : n;\n\t\t\t} else {\n\t\t\t\tthrow new NumberFormatException();\n\t\t\t}\n\t\t\tb = readByte();\n\t\t}\n\t}\n\tpublic int nextInt() {\n\t\tlong nl = nextLong();\n\t\tif (nl < Integer.MIN_VALUE || nl > Integer.MAX_VALUE)\n\t\t\tthrow new NumberFormatException();\n\t\treturn (int) nl;\n\t}\n\tpublic int[] nextintArray(int n){\n\t\tint[] a = new int[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\ta[i] = nextInt();\n\t\t}\n\t\treturn a;\n\t}\n\tpublic long[] nextlongArray(int n){\n\t\tlong[] a = new long[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\ta[i] = nextLong();\n\t\t}\n\t\treturn a;\n\t}\n\tpublic Integer[] nextIntegerArray(int n){\n\t\tInteger[] a = new Integer[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\ta[i] = nextInt();\n\t\t}\n\t\treturn a;\n\t}\n\tpublic int[][] nextintMatrix(int h, int w){\n\t\tint[][] mat = new int[h][w];\n\t\tfor(int i=0;i<h;i++){\n\t\t\tfor(int j=0;j<w;j++){\n\t\t\t\tmat[i][j] = nextInt();\n\t\t\t}\n\t\t}\n\t\treturn mat;\n\t}\n\tpublic double nextDouble() {\n\t\treturn Double.parseDouble(next());\n\t}\n}\n"
  },
  {
    "language": "Java",
    "code": "import java.awt.geom.Line2D;\nimport java.util.Arrays;\nimport java.util.Scanner;\n\npublic class Main {\n\n\tclass P {\n\t\tdouble x, y;\n\n\t\tP(double x_, double y_) {\n\t\t\tx = x_;\n\t\t\ty = y_;\n\t\t}\n\n\t\tP add(P p) {\n\t\t\treturn new P(x + p.x, y + p.y);\n\t\t}\n\n\t\tP sub(P p) {\n\t\t\treturn new P(x - p.x, y - p.y);\n\t\t}\n\n\t\tP mul(double v) {\n\t\t\treturn new P(x * v, y * v);\n\t\t}\n\n\t\tP div(double v) {\n\t\t\treturn new P(x / v, y / v);\n\t\t}\n\n\t\tdouble dot(P p) {\n\t\t\treturn x * p.x + y * p.y;\n\t\t}\n\n\t\tdouble det(P p) {\n\t\t\treturn x * p.y - y * p.x;\n\t\t}\n\n\t\tdouble abs2() {\n\t\t\treturn x * x + y * y;\n\t\t}\n\n\t\tdouble abs() {\n\t\t\treturn Math.sqrt(abs2());\n\t\t}\n\n\t\tP norm() {\n\t\t\treturn div(abs());\n\t\t}\n\n\t\tP rot90() {\n\t\t\treturn new P(-y, x);\n\t\t}\n\n\t\tP proj(P src, P dst) {\n\t\t\tP p_sd = dst.sub(src).norm();\n\t\t\treturn src.add(p_sd.mul(sub(src).dot(p_sd)));\n\t\t}\n\n\t\tP reflect(P src, P dst) {\n\t\t\tP middle = proj(src, dst);\n\t\t\treturn add(middle.sub(this).mul(2));\n\t\t}\n\n\t\tpublic String toString() {\n\t\t\treturn String.format(\"%f %f\", x, y);\n\t\t}\n\t}\n\n\tP isLL(P p1, P p2, P q1, P q2) {\n\t\tdouble d = p2.sub(p1).det(q1.sub(q2));\n\t\tif (Math.abs(d) < 1e-10)\n\t\t\treturn null;\n\t\treturn p1.add(p2.sub(p1).mul(q1.sub(q2).det(p1.sub(q2)) / d));\n\t}\n\n\tboolean intersect(P p1, P p2, P q1, P q2) {\n\t\treturn Line2D.linesIntersect(p1.x, p1.y, p2.x, p2.y, q1.x, q1.y, q2.x, q2.y);\n\t}\n\n\tdouble distSS(P p1, P p2, P q1, P q2) {\n\t\tif (intersect(p1, p2, q1, q2))\n\t\t\treturn 0;\n\t\tdouble dist = Double.MAX_VALUE;\n\t\tfor (double d : new double[] { distSP(p1, p2, q1), distSP(p1, p2, q2), distSP(q1, q2, p1),\n\t\t\t\tdistSP(q1, q2, p2) }) {\n\t\t\tdist = Math.min(d, dist);\n\t\t}\n\t\treturn dist;\n\t}\n\n\tdouble distSP(P p1, P p2, P p) {\n\t\treturn Line2D.ptSegDist(p1.x, p1.y, p2.x, p2.y, p.x, p.y);\n\t}\n\n\tvoid run() {\n\n\t\tScanner sc = new Scanner(System.in);\n\t\tint q = sc.nextInt();\n\t\twhile (q-- > 0) {\n\t\t\tP p1 = new P(sc.nextDouble(), sc.nextDouble());\n\t\t\tP p2 = new P(sc.nextDouble(), sc.nextDouble());\n\t\t\tP q1 = new P(sc.nextDouble(), sc.nextDouble());\n\t\t\tP q2 = new P(sc.nextDouble(), sc.nextDouble());\n\t\t\tSystem.out.println(distSS(p1, p2, q1, q2));\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tnew Main().run();\n\t}\n\n\tstatic void tr(Object... objects) {\n\t\tSystem.out.println(Arrays.deepToString(objects));\n\t}\n\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\n\npublic class Main {\n\n    private static int q;\n    private static ArrayList<Integer> xp0 = new ArrayList<>();\n    private static ArrayList<Integer> yp0 = new ArrayList<>();\n    private static ArrayList<Integer> xp1 = new ArrayList<>();\n    private static ArrayList<Integer> yp1 = new ArrayList<>();\n    private static ArrayList<Integer> xp2 = new ArrayList<>();\n    private static ArrayList<Integer> yp2 = new ArrayList<>();\n    private static ArrayList<Integer> xp3 = new ArrayList<>();\n    private static ArrayList<Integer> yp3 = new ArrayList<>();\n\n    public static void main(String... aug) {\n        input();\n        result();\n    }\n\n    private static void result() {\n        double tc, td, ta, tb;\n\n        for (int i = 0; i < q; ++i) {\n            tc = (xp0.get(i) - xp1.get(i)) * (yp2.get(i) - yp0.get(i)) + (yp0.get(i) - yp1.get(i)) * (xp0.get(i) - xp2.get(i));\n            td = (xp0.get(i) - xp1.get(i)) * (yp3.get(i) - yp0.get(i)) + (yp0.get(i) - yp1.get(i)) * (xp0.get(i) - xp3.get(i));\n            ta = (xp2.get(i) - xp3.get(i)) * (yp0.get(i) - yp2.get(i)) + (yp2.get(i) - yp3.get(i)) * (xp2.get(i) - xp0.get(i));\n            tb = (xp2.get(i) - xp3.get(i)) * (yp1.get(i) - yp2.get(i)) + (yp2.get(i) - yp3.get(i)) * (xp2.get(i) - xp1.get(i));\n\n            if (tc * td < 0 && ta * tb < 0) { //????????????\n                System.out.println((double)0);\n            } else { //???????????????\n                List<Double> list = new ArrayList<>();\n                double dis = 0;\n\n                dis = distanceDotLine(xp0.get(i), yp0.get(i), xp2.get(i), yp2.get(i), xp3.get(i), yp3.get(i));\n                if (dis != -1) {list.add(dis);} else {list.add(\n                        Math.min(Math.sqrt((xp0.get(i) - xp2.get(i)) * (xp0.get(i) - xp2.get(i)) +(yp0.get(i) - yp2.get(i)) * (yp0.get(i) - yp2.get(i))),\n                                Math.sqrt((xp0.get(i) - xp3.get(i)) * (xp0.get(i) - xp3.get(i)) +(yp0.get(i) - yp3.get(i)) * (yp0.get(i) - yp3.get(i)))\n                                )\n                );}\n\n                dis = distanceDotLine(xp1.get(i), yp1.get(i), xp2.get(i), yp2.get(i), xp3.get(i), yp3.get(i));\n                if (dis != -1) {list.add(dis);} else {list.add(\n                        Math.min(Math.sqrt((xp1.get(i) - xp2.get(i)) * (xp1.get(i) - xp2.get(i)) +(yp1.get(i) - yp2.get(i)) * (yp1.get(i) - yp2.get(i))),\n                                Math.sqrt((xp1.get(i) - xp3.get(i)) * (xp1.get(i) - xp3.get(i)) +(yp1.get(i) - yp3.get(i)) * (yp1.get(i) - yp3.get(i)))\n                        )\n                );}\n\n                dis = distanceDotLine(xp2.get(i), yp2.get(i), xp0.get(i), yp0.get(i), xp1.get(i), yp1.get(i));\n                if (dis != -1) {list.add(dis);} else {list.add(\n                        Math.min(Math.sqrt((xp2.get(i) - xp0.get(i)) * (xp2.get(i) - xp0.get(i)) +(yp2.get(i) - yp0.get(i)) * (yp2.get(i) - yp0.get(i))),\n                                Math.sqrt((xp2.get(i) - xp1.get(i)) * (xp2.get(i) - xp1.get(i)) +(yp2.get(i) - yp1.get(i)) * (yp2.get(i) - yp1.get(i)))\n                        )\n                );}\n\n                dis = distanceDotLine(xp3.get(i), yp3.get(i), xp0.get(i), yp0.get(i), xp1.get(i), yp1.get(i));\n                if (dis != -1) {list.add(dis);} else {list.add(\n                        Math.min(Math.sqrt((xp3.get(i) - xp0.get(i)) * (xp3.get(i) - xp0.get(i)) +(yp3.get(i) - yp0.get(i)) * (yp3.get(i) - yp0.get(i))),\n                                Math.sqrt((xp3.get(i) - xp1.get(i)) * (xp3.get(i) - xp1.get(i)) +(yp3.get(i) - yp1.get(i)) * (yp3.get(i) - yp1.get(i)))\n                        )\n                );}\n\n                double result = list.get(0);\n\n                for (double get : list) {\n                    if (result > get) result = get;\n                }\n\n                System.out.println(result);\n            }\n        }\n    }\n\n    private static double distanceDotLine(int px, int py, int ax, int ay, int bx, int by) {\n        double disA = (ax - bx) * (ax - bx) + (ay - by) * (ay - by);\n        double disB = (px - ax) * (px - ax) + (py - ay) * (py - ay);\n        double vecAx = bx - ax, vecAy = by - ay;\n        double vecBx = px - ax, vecBy = py - ay;\n        double inner =vecAx * vecBx + vecAy * vecBy;\n\n        if (inner >= 0 && inner <= disA) {\n            return Math.sqrt(disB) * Math.sqrt(1 - (inner * inner / (disA * disB)));\n        } else {\n            return -1;\n        }\n    }\n\n    private static void input() {\n        Scanner in = new Scanner(System.in);\n\n        q = Integer.parseInt(in.next());\n\n        for (int i = 0; i < q; ++i) {\n            xp0.add(Integer.parseInt(in.next()));\n            yp0.add(Integer.parseInt(in.next()));\n            xp1.add(Integer.parseInt(in.next()));\n            yp1.add(Integer.parseInt(in.next()));\n            xp2.add(Integer.parseInt(in.next()));\n            yp2.add(Integer.parseInt(in.next()));\n            xp3.add(Integer.parseInt(in.next()));\n            yp3.add(Integer.parseInt(in.next()));\n        }\n\n        return;\n    }\n\n}"
  },
  {
    "language": "Java",
    "code": "import java.awt.geom.Line2D;\nimport java.util.Arrays;\nimport java.util.Scanner;\n\npublic class Main {\n    class P {\n        double x, y;\n        \n        P(double x_, double y_) {\n            x = x_;\n            y = y_;\n        }\n        \n        P add(P p) {\n            return new P(x + p.x, y + p.y);\n        }\n        \n        P sub(P p) {\n            return new P(x - p.x, y - p.y);\n        }\n        \n        P mul(double v) {\n            return new P(x * v, y * v);\n        }\n        \n        P div(double v) {\n            return new P(x / v, y / v);\n        }\n        \n        double dot(P p) {\n            return x * p.x + y * p.y;\n        }\n        \n        double det(P p) {\n            return x * p.y - y * p.x;\n        }\n        \n        double abs2() {\n            return x * x + y * y;\n        }\n        \n        double abs() {\n            return Math.sqrt(abs2());\n        }\n        \n        P norm() {\n            return div(abs());\n        }\n        \n        P rot90() {\n            return new P(-y, x);\n        }\n        \n        P proj(P src, P dst) {\n            P p_sd = dst.sub(src).norm();\n            return src.add(p_sd.mul(sub(src).dot(p_sd)));\n        }\n        \n        P reflect(P src, P dst) {\n            P middle = proj(src, dst);\n            return add(middle.sub(this).mul(2));\n        }\n        \n        public String toString() {\n            return String.format(\"%f %f\", x, y);\n        }\n    }\n    \n    P isLL(P p1, P p2, P q1, P q2) {\n        double d = p2.sub(p1).det(q1.sub(q2));\n        if(Math.abs(d) < 1e-10) return null;\n        return p1.add(p2.sub(p1).mul(q1.sub(q2).det(p1.sub(q2)) / d));\n    }\n    \n    boolean intersect(P p1, P p2, P q1, P q2) {\n        return Line2D.linesIntersect(p1.x, p1.y, p2.x, p2.y, q1.x, q1.y, q2.x, q2.y);\n    }\n    \n    double distSS(P p1, P p2, P q1, P q2) {\n        if(intersect(p1, p2, q1, q2)) return 0;\n        \n        double dist = Double.MAX_VALUE;\n        for(double d : new double[] {distSP(p1, p2, q1), distSP(p1, p2, q2), \n                                     distSP(q1, q2, p1), distSP(q1, q2, p2)}) {\n            dist = Math.min(d, dist);\n        }\n        return dist;\n    }\n    \n    double distSP(P p1, P p2, P p) {\n        return Line2D.ptSegDist(p1.x, p1.y, p2.x, p2.y, p.x, p.y);\n    }\n    \n    void run() {\n        Scanner sc = new Scanner(System.in);\n        int q = sc.nextInt();\n        \n        while(q-- > 0) {\n            P p1 = new P(sc.nextDouble(), sc.nextDouble());\n            P p2 = new P(sc.nextDouble(), sc.nextDouble());\n            P q1 = new P(sc.nextDouble(), sc.nextDouble());\n            P q2 = new P(sc.nextDouble(), sc.nextDouble());\n            \n            System.out.println(distSS(p1, p2, q1, q2));\n        }\n    }\n    \n    public static void main(String[] args) {\n        new Main().run();\n    }\n    \n    static void tr(Object... objects) {\n        System.out.println(Arrays.deepToString(objects));\n    }\n}\n"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\npublic class Main {\n\tstatic final double EPS = 0.00000000001;\n\tstatic final int COUNTER_CLOCKWISE = 1;\n\tstatic final int CLOCKWISE = -1;\n\tstatic final int ONLINE_BACK = 2;\n\tstatic final int ONLINE_FRONT = -2;\n\tstatic final int ON_SEGMENT = 0;\n\tpublic static void main(String[] args) {\n\t\tScanner scan = new Scanner(System.in);\n\t\tint q = scan.nextInt();\n\t\tfor(int i = 0; i < q; i++) {\n\t\t\tdouble[]p0 = new double[2];\n\t\t\tdouble[]p1 = new double[2];\n\t\t\tdouble[]p2 = new double[2];\n\t\t\tdouble[]p3 = new double[2];\n\t\t\tp0[0] = scan.nextInt();\n\t\t\tp0[1] = scan.nextInt();\n\t\t\tp1[0] = scan.nextInt();\n\t\t\tp1[1] = scan.nextInt();\n\t\t\tp2[0] = scan.nextInt();\n\t\t\tp2[1] = scan.nextInt();\n\t\t\tp3[0] = scan.nextInt();\n\t\t\tp3[1] = scan.nextInt();\n\t\t\tdouble ans = getDistance(p0, p1, p2, p3);\n\t\t\tSystem.out.println(ans);\n\t\t}\n\t\tscan.close();\n\t}\n\tstatic int ccw(double[]p0, double[]p1, double[]p2) {\n\t\tdouble[]a = vec(p0, p1);\n\t\tdouble[]b = vec(p0, p2);\n\t\tif(cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\t\tif(cross(a, b) < -EPS) return CLOCKWISE;\n\t\tif(dot(a, b) < -EPS) return ONLINE_BACK;\n\t\tif(norm(a) < norm(b)) return ONLINE_FRONT;\n\t\treturn ON_SEGMENT;\n\t}\n\tstatic boolean intersect(double[]p1, double[]p2, double[]p3, double[]p4) {\n\t\tif(ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 && ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0) {\n\t\t\treturn true;\n\t\t}else {\n\t\t\treturn false;\n\t\t}\n\t}\n\tstatic double getDistance(double[]a, double[]b, double[]c, double[]d) {\n\t\tif(intersect(a, b, c, d)) return 0.0;\n\t\tdouble t1 = getDistanceSP(a, b, c);\n\t\tdouble t2 = getDistanceSP(a, b, d);\n\t\tdouble t3 = getDistanceSP(c, d, a);\n\t\tdouble t4 = getDistanceSP(c, d, b);\n\t\treturn Math.min(Math.min(t1, t2), Math.min(t3, t4));\n\t}\n\tstatic double getDistanceSP(double[]p1, double[]p2, double[]p) {\n\t\tdouble[]u1 = vec(p1, p2);\n\t\tdouble[]u2 = vec(p2, p1);\n\t\tdouble[]v = vec(p1, p);\n\t\tdouble[]w = vec(p2, p);\n\t\tif(dot(u1, v) < 0.0) return abs(v);\n\t\tif(dot(u2, w) < 0.0) return abs(w);\n\t\treturn getDistanceLP(p1, p2, p);\n\t}\n\tstatic double getDistanceLP(double[]a, double[]b, double[]p) {\n\t\tdouble[]u = vec(a, b);\n\t\tdouble[]v = vec(a, p);\n\t\tdouble t1 = Math.abs(cross(u, v));\n\t\tdouble t2 = abs(u);\n\t\treturn t1 / t2;\n\n\t}\n\tstatic double getDistance(double[]a, double[]b) {\n\t\treturn abs(vec(a, b));\n\t}\n\tstatic double abs(double[]p) {\n\t\treturn Math.sqrt(norm(p));\n\t}\n\tstatic double[] project(double[]p1, double[]p2, double[]p3) {\n\t\tdouble[]base = vec(p1, p2);\n\t\tdouble[]u = vec(p1, p3);\n\t\tdouble r = dot(u, base) / norm(base);\n\t\tdouble x = p1[0] + base[0]  * r;\n\t\tdouble y = p1[1] + base[1]  * r;\n\t\tdouble[]h = {x, y};\n\t\treturn h;\n\t}\n\tstatic double norm(double[]p) {\n\t\treturn p[0] * p[0] + p[1] * p[1];\n\t}\n\tstatic double[] vec(double[]p1, double[]p2) {\n\t\tdouble[]u = {p2[0] - p1[0], p2[1] - p1[1]};\n\t\treturn u;\n\t}\n\tstatic double dot(double[]u, double[]v) {\n\t\treturn u[0] * v[0] + u[1] * v[1];\n\t}\n\tstatic double cross(double[]u, double[]v) {\n\t\treturn u[0] * v[1] - u[1] * v[0];\n\t}\n}\n"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\n\npublic class Main {\n\tstatic double EPS = 0.0000000001;\n\tstatic double getDistance(Point p1, Point p2) {return p1.diff(p2).abs();}\n\tstatic double getDistance(Line l, Point p) {return l.p2.diff(l.p1).crossProduct(p.diff(l.p1)) / l.p2.diff(l.p1).abs();}\n\tstatic double getDistance(Segment s, Point p) {\n\t\tif (s.p2.diff(s.p1).dotProduct(p.diff(s.p1))<0.0) {return p.diff(s.p1).abs();}\n\t\tif (s.p1.diff(s.p2).dotProduct(p.diff(s.p2))<0.0) {return p.diff(s.p2).abs();}\n\t\treturn getDistance(s.toLine(),p);\n\t}\n\tstatic double getDistance(Segment s1, Segment s2) {\n\t\tif (intersect(s1,s2)) {return 0.0;}\n\t\treturn Math.min(Math.min(getDistance(s1,s2.p1), getDistance(s1,s2.p2)), Math.min(getDistance(s2,s1.p1),getDistance(s2,s1.p2)));\n\t}\n\tstatic int ccw(Point lp0, Point lp1, Point p) {\n\t\tVector lv = lp1.diff(lp0);\n\t\tVector pv = p.diff(lp0);\n\t\tdouble cp=0.0;\n\t\tif ((cp=lv.crossProduct(pv))>EPS) {return -1;} // counter-clockwise\n\t\tif (cp<-EPS) {return 1;} // clockwise\n\t\tif (lv.dotProduct(pv)<-EPS) return 2; // online-back\n\t\tif (lv.norm() < pv.norm()) return 3; // online-front\n\t\treturn 0; // on-segment\n\t}\n\tstatic boolean intersect(Point p0, Point p1, Point p2, Point p3) {\n\t\tint ccw0=ccw(p0,p1,p2)*ccw(p0,p1,p3);int ccw1=ccw(p2,p3,p0)*ccw(p2,p3,p1);\n\t\treturn ccw0<=0&&ccw1<=0||ccw0==0&&ccw1==6||ccw0==6&&ccw1==0;\n\t}\n\tstatic boolean intersect(Segment s1, Segment s2){return intersect(s1.p1,s1.p2,s2.p1,s2.p2);}\n\n\n\tpublic static void main(String[] args) {\n\t\tScanner s = new Scanner(System.in);\n\t\tint q = s.nextInt();\n\t\tfor (int i=0;i<q;i++) {\n\t\t\tSegment s1 = new Segment(new Point(s.nextInt(),s.nextInt()), new Point(s.nextInt(),s.nextInt()));\n\t\t\tSegment s2 = new Segment(new Point(s.nextInt(),s.nextInt()), new Point(s.nextInt(),s.nextInt()));\n\t\t\tSystem.out.println(getDistance(s1,s2));\n\t\t}\n\t}\n\n}\nclass Point {\n\tstatic double EPS = 0.0000000001;\n\tdouble x; double y;\n\tpublic Point(double ax, double ay){x=ax;y=ay;}\n\tpublic Vector sum(Point p) { return new Vector(x+p.x,y+p.y); }\n\tpublic Vector diff(Point p) { return new Vector(x-p.x,y-p.y); }\n\tpublic Vector mult(double k) { return new Vector(x*k,y*k); }\n\tpublic Vector div(double k) { return new Vector(x*(1.0/k),y*(1.0/k)); }\n\tpublic boolean equals(Point p){return Math.abs(x-p.x)<EPS && Math.abs(y-p.y)<EPS;}\n\tpublic String toString(){return \"(\"+x+\",\"+y+\")\";}\n}\nclass Vector extends Point {\n\tpublic Vector(double ax, double ay) {super(ax,ay);}\n\tpublic Vector(Point p1, Point p2) {super(p1.x-p2.x,p2.x-p2.y);}\n\tpublic double norm() {return x*x+y*y;}\n\tpublic double abs() {return Math.sqrt(norm());}\n\t// TODO:\n\tpublic boolean isSmallerThan(Vector v) {return x!=v.x?x<v.x:y<v.y;}\n\tpublic double dotProduct(Vector v) {return x*v.x+y*v.y;}\n\tpublic double crossProduct(Vector v) {return x*v.y - y*v.x;}\n}\n\nclass Segment {\n\tPoint p1; Point p2;\n\tpublic Segment(Point ap1, Point ap2){p1=ap1;p2=ap2;}\n\tpublic double dotProduct(Segment s) {return (p1.x-p2.x)*(s.p1.x-s.p2.x)+(p1.y-p2.y)*(s.p1.y-s.p2.y);}\n\tpublic double crossProduct(Segment s) {return (p1.x-p2.x)*(s.p1.y-s.p2.y) - (p1.y-p2.y)*(s.p1.x-s.p2.x);}\n\tpublic String toString(){return p1.toString()+\"->\"+p2.toString();}\n\tpublic Line toLine() {return new Line(p1,p2);}\n}\nclass Line extends Segment{public Line(Point ap1, Point ap2){super(ap1,ap2);}}"
  },
  {
    "language": "Java",
    "code": "public class Main{\n  public void run(java.io.InputStream in, java.io.PrintStream out){\n    java.util.Scanner sc = new java.util.Scanner(in);\n/*answer*/\n    double xp0, xp1, yp0, yp1, xp2, yp2, xp3, yp3;\n    int q;\n    int i;\n    double min, d;\n\n    q = sc.nextInt();\n    for(i = 0;i < q;i++){\n      xp0 = sc.nextDouble();\n      yp0 = sc.nextDouble();\n      xp1 = sc.nextDouble();\n      yp1 = sc.nextDouble();\n      xp2 = sc.nextDouble();\n      yp2 = sc.nextDouble();\n      xp3 = sc.nextDouble();\n      yp3 = sc.nextDouble();\n\n      min = cross(xp0, xp1, xp2, xp3, yp0, yp1, yp2, yp3);\n\n      d = dist(xp0, yp0, xp1, yp1, xp2, yp2);\n      if(min > d)min = d;\n      d = dist(xp0, yp0, xp1, yp1, xp3, yp3);\n      if(min > d)min = d;\n      d = dist(xp2, yp2, xp3, yp3, xp0, yp0);\n      if(min > d)min = d;\n      d = dist(xp2, yp2, xp3, yp3, xp1, yp1);\n      if(min > d)min = d;\n\n      System.out.println(Math.sqrt(min));\n    }\n    sc.close();\n  }\n\n  public static void main(String[] args){\n    (new Main()).run(System.in, System.out);\n  }\n\n  private static double dist(\n  double p0x, double p0y, double p1x, double p1y, double px, double py){\n    double t, d0, d1, x, y;\n\n    t = (p1x - p0x) * (px - p0x) + (p1y - p0y) * (py - p0y);\n    t = t / ((p1x - p0x) * (p1x - p0x) + (p1y - p0y) * (p1y - p0y));\n    x = p0x + t * (p1x - p0x);\n    y = p0y + t * (p1y - p0y);\n\n    if((x - p0x) * (x - p1x) > 0 || (y - p0y) * (y - p1y) > 0){\n      d0 = (p0x - x) * (p0x - x) + (p0y - y) * (p0y - y);\n      d1 = (p1x - x) * (p1x - x) + (p1y - y) * (p1y - y);\n      if(d0 < d1){\n        return (px - p0x) * (px - p0x) + (py - p0y) * (py - p0y);\n      }else{\n        return (px - p1x) * (px - p1x) + (py - p1y) * (py - p1y);\n      }\n    }else{\n      return (px - x) * (px - x) + (py - y) * (py - y);\n    }\n\n  }\n\n  private static double cross(\n    double xp0, double xp1, double xp2, double xp3,\n    double yp0, double yp1, double yp2, double yp3\n    ){\n    double s1x0, s1y0, s2x0, s2y0, s3x0, s3y0, s10, s20;\n    double s1x1, s1y1, s2x1, s2y1, s3x1, s3y1, s11, s21;\n\n    s1x0 = xp1 - xp0;\n    s1y0 = yp1 - yp0;\n    s2x0 = xp2 - xp0;\n    s2y0 = yp2 - yp0;\n    s3x0 = xp3 - xp0;\n    s3y0 = yp3 - yp0;\n\n    s10 = s1x0 * s2y0 - s1y0 * s2x0;\n    s20 = s1x0 * s3y0 - s1y0 * s3x0;\n\n    s1x1 = xp3 - xp2;\n    s1y1 = yp3 - yp2;\n    s2x1 = xp0 - xp2;\n    s2y1 = yp0 - yp2;\n    s3x1 = xp1 - xp2;\n    s3y1 = yp1 - yp2;\n\n    s11 = s1x1 * s2y1 - s1y1 * s2x1;\n    s21 = s1x1 * s3y1 - s1y1 * s3x1;\n\n    if(s10 * s20 > 0 || s11 * s21 > 0){\n      return 800000000.0;   //no cross\n    }else if(s10 == 0 && s20 == 0 &&\n             (s1x0 * s2x0 < 0 || s1y0 * s2y0 < 0) &&\n             (s1x0 * s3x0 < 0 || s1y0 * s3y0 < 0)\n            ){\n              return 800000000.0;   //no cross\n    }else if(s10 == 0 && s20 == 0 &&\n      ((s1x0 * s1x0) + (s1y0 * s1y0) < (s2x0 * s2x0) + (s2y0 * s2y0)) &&\n      ((s1x0 * s1x0) + (s1y0 * s1y0) < (s3x0 * s3x0) + (s3y0 * s3y0))\n            ){\n              return 800000000.0;   //no cross\n    }else{\n      return 0.0;   //cross\n    }\n\n  }\n}"
  },
  {
    "language": "Java",
    "code": "import java.awt.geom.Line2D;\nimport java.util.*;\npublic class Main {\n\tScanner in = new Scanner(System.in);\n\tpublic static void main(String[] args) {\n\t\tnew Main();\n\t}\n\n\tpublic Main() {\n\t\tint q = in.nextInt();\n\t\tfor(int i=0;i<q;i++)new CGL_2B().doIt();\n\t}\n\n\tclass CGL_2B{\n\t\tdouble segSegDist(Line2D l1,Line2D l2){\n\t\t\treturn l1.intersectsLine(l2)? 0 :Math.min(Math.min(l1.ptSegDist(l2.getP1()), l1.ptSegDist\n\t\t\t\t\t(l2.getP2())) , Math.min(l2.ptSegDist(l1.getP1()), l2.ptSegDist(l1.getP2())));\n\t\t}\n\t\tvoid doIt(){\n\t\t\tLine2D l1 = new Line2D.Double(in.nextDouble(),in.nextDouble(),in.nextDouble(),in.nextDouble());;\n\t\t\tLine2D l2 = new Line2D.Double(in.nextDouble(),in.nextDouble(),in.nextDouble(),in.nextDouble());;\n\t\t\tSystem.out.printf(\"%.10f\\n\",segSegDist(l1, l2));\n\t\t}\n\t}\n\n\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\n\npublic class Main {\n\n    private static int q;\n    private static ArrayList<Integer> xp0 = new ArrayList<>();\n    private static ArrayList<Integer> yp0 = new ArrayList<>();\n    private static ArrayList<Integer> xp1 = new ArrayList<>();\n    private static ArrayList<Integer> yp1 = new ArrayList<>();\n    private static ArrayList<Integer> xp2 = new ArrayList<>();\n    private static ArrayList<Integer> yp2 = new ArrayList<>();\n    private static ArrayList<Integer> xp3 = new ArrayList<>();\n    private static ArrayList<Integer> yp3 = new ArrayList<>();\n\n    public static void main(String... aug) {\n        input();\n        result();\n    }\n\n    private static void result() {\n        int tc, td;\n\n        for (int i = 0; i < q; ++i) {\n            tc = (xp0.get(i) - xp1.get(i)) * (yp2.get(i) - yp0.get(i)) + (yp0.get(i) - yp1.get(i)) * (xp0.get(i) - xp2.get(i));\n            td = (xp0.get(i) - xp1.get(i)) * (yp3.get(i) - yp0.get(i)) + (yp0.get(i) - yp1.get(i)) * (xp0.get(i) - xp3.get(i));\n\n            if (tc * td < 0) { //????????????\n                System.out.println((double)0);\n            } else { //???????????????\n                List<Double> list = new ArrayList<>();\n                double dis = 0;\n\n                dis = distanceDotLine(xp0.get(i), yp0.get(i), xp2.get(i), yp2.get(i), xp3.get(i), yp3.get(i));\n                if (dis != -1) {list.add(dis);} else {list.add(\n                        Math.min(Math.sqrt((xp0.get(i) - xp2.get(i)) * (xp0.get(i) - xp2.get(i)) +(yp0.get(i) - yp2.get(i)) * (yp0.get(i) - yp2.get(i))),\n                                Math.sqrt((xp0.get(i) - xp3.get(i)) * (xp0.get(i) - xp3.get(i)) +(yp0.get(i) - yp3.get(i)) * (yp0.get(i) - yp3.get(i)))\n                                )\n                );}\n\n                dis = distanceDotLine(xp1.get(i), yp1.get(i), xp2.get(i), yp2.get(i), xp3.get(i), yp3.get(i));\n                if (dis != -1) {list.add(dis);} else {list.add(\n                        Math.min(Math.sqrt((xp1.get(i) - xp2.get(i)) * (xp1.get(i) - xp2.get(i)) +(yp1.get(i) - yp2.get(i)) * (yp1.get(i) - yp2.get(i))),\n                                Math.sqrt((xp1.get(i) - xp3.get(i)) * (xp1.get(i) - xp3.get(i)) +(yp1.get(i) - yp3.get(i)) * (yp1.get(i) - yp3.get(i)))\n                        )\n                );}\n\n                dis = distanceDotLine(xp2.get(i), yp2.get(i), xp0.get(i), yp0.get(i), xp1.get(i), yp1.get(i));\n                if (dis != -1) {list.add(dis);} else {list.add(\n                        Math.min(Math.sqrt((xp2.get(i) - xp0.get(i)) * (xp2.get(i) - xp0.get(i)) +(yp2.get(i) - yp0.get(i)) * (yp2.get(i) - yp0.get(i))),\n                                Math.sqrt((xp2.get(i) - xp1.get(i)) * (xp2.get(i) - xp1.get(i)) +(yp2.get(i) - yp1.get(i)) * (yp2.get(i) - yp1.get(i)))\n                        )\n                );}\n\n                dis = distanceDotLine(xp3.get(i), yp3.get(i), xp0.get(i), yp0.get(i), xp1.get(i), yp1.get(i));\n                if (dis != -1) {list.add(dis);} else {list.add(\n                        Math.min(Math.sqrt((xp3.get(i) - xp0.get(i)) * (xp3.get(i) - xp0.get(i)) +(yp3.get(i) - yp0.get(i)) * (yp3.get(i) - yp0.get(i))),\n                                Math.sqrt((xp3.get(i) - xp1.get(i)) * (xp3.get(i) - xp1.get(i)) +(yp3.get(i) - yp1.get(i)) * (yp3.get(i) - yp1.get(i)))\n                        )\n                );}\n\n                double result = list.get(0);\n\n                for (double get : list) {\n                    if (result > get) result = get;\n                }\n\n                System.out.println(result);\n            }\n        }\n    }\n\n    private static double distanceDotLine(int px, int py, int ax, int ay, int bx, int by) {\n        double disA = (ax - bx) * (ax - bx) + (ay - by) * (ay - by);\n        double disB = (px - ax) * (px - ax) + (py - ay) * (py - ay);\n        double vecAx = bx - ax, vecAy = by - ay;\n        double vecBx = px - ax, vecBy = py - ay;\n        double inner =vecAx * vecBx + vecAy * vecBy;\n\n        if (inner >= 0 && inner <= disA) {\n            return Math.sqrt(disB) * Math.sqrt(1 - (inner * inner / (disA * disB)));\n        } else {\n            return -1;\n        }\n    }\n\n    private static void input() {\n        Scanner in = new Scanner(System.in);\n\n        q = Integer.parseInt(in.next());\n\n        for (int i = 0; i < q; ++i) {\n            xp0.add(Integer.parseInt(in.next()));\n            yp0.add(Integer.parseInt(in.next()));\n            xp1.add(Integer.parseInt(in.next()));\n            yp1.add(Integer.parseInt(in.next()));\n            xp2.add(Integer.parseInt(in.next()));\n            yp2.add(Integer.parseInt(in.next()));\n            xp3.add(Integer.parseInt(in.next()));\n            yp3.add(Integer.parseInt(in.next()));\n        }\n\n        return;\n    }\n\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\npublic class Main {\n\t\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\n\t\tint q = sc.nextInt();\n\t\tfor (int i = 0; i < q; i++) {\n\t\t\tint xp0 = sc.nextInt();\n\t\t\tint yp0 = sc.nextInt();\n\t\t\tint xp1 = sc.nextInt();\n\t\t\tint yp1 = sc.nextInt();\n\t\t\tint xp2 = sc.nextInt();\n\t\t\tint yp2 = sc.nextInt();\n\t\t\tint xp3 = sc.nextInt();\n\t\t\tint yp3 = sc.nextInt();\n\n\t\t\tif (Geom.lineSegsIntersect(xp0, yp0, xp1, yp1, xp2, yp2, xp3, yp3)) {\n\t\t\t\tSystem.out.println(\"0\");\n\t\t\t} else {\n\t\t\t\tdouble min = Double.MAX_VALUE;\n\t\t\t\tmin = Math.min(min, Math.sqrt(Geom.ptLineSegDistSq(xp0, yp0, xp1, yp1, xp2, yp2)));\n\t\t\t\tmin = Math.min(min, Math.sqrt(Geom.ptLineSegDistSq(xp0, yp0, xp1, yp1, xp3, yp3)));\n\t\t\t\tmin = Math.min(min, Math.sqrt(Geom.ptLineSegDistSq(xp2, yp2, xp3, yp3, xp0, yp0)));\n\t\t\t\tmin = Math.min(min, Math.sqrt(Geom.ptLineSegDistSq(xp2, yp2, xp3, yp3, xp1, yp1)));\n\n\t\t\t\tSystem.out.printf(\"%.9f\\n\", min);\n\t\t\t}\n\t\t}\n\n\t\tsc.close();\n\t}\n\t\n\t@SuppressWarnings(\"unused\")\n\tprivate static class Geom {\n\t\tstatic int dot(int xa, int ya, int xb, int yb) {\n\t\t\treturn xa * xb + ya * yb;\n\t\t}\n\n\t\tstatic int cross(int xa, int ya, int xb, int yb) {\n\t\t\treturn xa * yb - xb * ya;\n\t\t}\n\t\t\n\t\tstatic int sumofsquare(int xa, int ya) {\n\t\t\treturn xa * xa + ya * ya;\n\t\t}\n\n\t\tstatic boolean lineIntersect(int xa, int ya, int xb, int yb, int xc, int yc, int xd, int yd) {\n\t\t\t/*\n\t\t\t * ??´???AB??¨??????CD??¨??????????????????????????????\n\t\t\t * \n\t\t\t * |AB|==0 && |CD|==0\n\t\t\t *     ???A==???C\n\t\t\t * |AB|==0 && |CD|!=0\n\t\t\t *     ACxAD==0 && AC.AD<0\n\t\t\t * |AB|!=0\n\t\t\t *     ABxAC*ABxAD<=0\n\t\t\t */\n\t\t\tint xab = xb - xa;\n\t\t\tint yab = yb - ya;\n\t\t\tif (xab != 0 || yab != 0) {\n\t\t\t\tint xac = xc - xa;\n\t\t\t\tint yac = yc - ya;\n\t\t\t\tint xad = xd - xa;\n\t\t\t\tint yad = yd - ya;\n\t\t\t\treturn (long)cross(xab, yab, xac, yac) * cross(xab, yab, xad, yad) <= 0;\n\t\t\t} else {\n\t\t\t\tint xcd = xd - xc;\n\t\t\t\tint ycd = yd - yc;\n\t\t\t\tif (xcd != 0 || ycd != 0) {\n\t\t\t\t\tint xac = xc - xa;\n\t\t\t\t\tint yac = yc - ya;\n\t\t\t\t\tint xad = xd - xa;\n\t\t\t\t\tint yad = yd - ya;\n\t\t\t\t\treturn cross(xac, yac, xad, yad) == 0 && dot(xac, yac, xad, yad) < 0;\n\t\t\t\t} else {\n\t\t\t\t\treturn xa == xc && ya == yc;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tstatic boolean lineSegsIntersect(int xa, int ya, int xb, int yb, int xc, int yc, int xd, int yd) {\n\t\t\t/*\n\t\t\t * ??????AB??¨??????CD??¨??????????????????????????????\n\t\t\t * \n\t\t\t * |AB|==0 && |CD|==0\n\t\t\t *     ???A==???C\n\t\t\t * |AB|==0 && |CD|!=0\n\t\t\t *     ACxAD==0 && AC.AD<0\n\t\t\t * |AB|!=0 && |CD|==0\n\t\t\t *     CAxCB==0 && CA.CB<0\n\t\t\t * |AB|!=0 && |CD|!=0\n\t\t\t *     ABxCD==0\n\t\t\t *         ACxAD==0 && (AB.AC>=0 || AB.AD>=0) && (BA.BC>=0 || BA.BD>=0)\n\t\t\t *     ABxCD!=0\n\t\t\t *         ABxAC*ABxAD<=0 && CDxCA*CDxCB<=0\n\t\t\t */\n\t\t\tint xab = xb - xa;\n\t\t\tint yab = yb - ya;\n\t\t\tint xcd = xd - xc;\n\t\t\tint ycd = yd - yc;\n\t\t\tif ((xab != 0 || yab != 0) && (xcd != 0 || ycd != 0)) {\n\t\t\t\tint xac = xc - xa;\n\t\t\t\tint yac = yc - ya;\n\t\t\t\tint xad = xd - xa;\n\t\t\t\tint yad = yd - ya;\n\t\t\t\tif (cross(xab, yab, xcd, ycd) != 0) {\n\t\t\t\t\tint xca = -xac;\n\t\t\t\t\tint yca = -yac;\n\t\t\t\t\tint xcb = xb - xc;\n\t\t\t\t\tint ycb = yb - yc;\n\t\t\t\t\treturn ((long)cross(xab, yab, xac, yac) * cross(xab, yab, xad, yad) <= 0)\n\t\t\t\t\t\t\t&& ((long)cross(xcd, ycd, xca, yca) * cross(xcd, ycd, xcb, ycb) <= 0);\n\t\t\t\t} else {\n\t\t\t\t\tint xba = -xab;\n\t\t\t\t\tint yba = -yab;\n\t\t\t\t\tint xbc = xc - xb;\n\t\t\t\t\tint ybc = yc - yb;\n\t\t\t\t\tint xbd = xd - xb;\n\t\t\t\t\tint ybd = yd - yb;\n\t\t\t\t\treturn cross(xac, yac, xad, yad) == 0\n\t\t\t\t\t\t\t&& (dot(xab, yab, xac, yac) >= 0 || dot(xab, yab, xad, yad) >= 0)\n\t\t\t\t\t\t\t&& (dot(xba, yba, xbc, ybc) >= 0 || dot(xba, yba, xbd, ybd) >= 0);\n\t\t\t\t}\n\t\t\t} else if (xab != 0 || yab != 0) {\n\t\t\t\tint xca = xa - xc;\n\t\t\t\tint yca = ya - yc;\n\t\t\t\tint xcb = xb - xc;\n\t\t\t\tint ycb = yb - yc;\n\t\t\t\treturn cross(xca, yca, xcb, ycb) == 0 && dot(xca, yca, xcb, ycb) < 0;\n\t\t\t} else {\n\t\t\t\tif (xcd != 0 || ycd != 0) {\n\t\t\t\t\tint xac = xc - xa;\n\t\t\t\t\tint yac = yc - ya;\n\t\t\t\t\tint xad = xd - xa;\n\t\t\t\t\tint yad = yd - ya;\n\t\t\t\t\treturn cross(xac, yac, xad, yad) == 0 && dot(xac, yac, xad, yad) < 0;\n\t\t\t\t} else {\n\t\t\t\t\treturn xa == xc && ya == yc;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tstatic double ptLineSegDistSq(int xa, int ya, int xb, int yb, int xc, int yc) {\n\t\t\t/*\n\t\t\t * ??????AB??¨???C??¨????????¢\n\t\t\t * \n\t\t\t * |AB|==0\n\t\t\t *     |AC|^2\n\t\t\t * |AB|!=0 && AB.AC<=0\n\t\t\t *     |AC|^2\n\t\t\t * |AB|!=0 && BA.BC<=0\n\t\t\t *     |BC|^2\n\t\t\t * |AB|!=0 && AB.AC>0 && BA.BC>0\n\t\t\t *     |ABxAC|/|AB|\n\t\t\t */\n\t\t\tint xab = xb - xa;\n\t\t\tint yab = yb - ya;\n\t\t\tint xac = xc - xa;\n\t\t\tint yac = yc - ya;\n\t\t\tint xbc = xc - xb;\n\t\t\tint ybc = yc - yb;\n\t\t\tif (dot(xab, yab, xac, yac) <= 0) {\n\t\t\t\treturn sumofsquare(xac, yac);\n\t\t\t} else if (dot(-xab, -yab, xbc, ybc) <= 0) {\n\t\t\t\treturn sumofsquare(xbc, ybc);\n\t\t\t} else {\n\t\t\t\tlong tmp = cross(xab, yab, xac, yac);\n\t\t\t\treturn (double)(tmp * tmp) / sumofsquare(xab, yab);\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "\nimport java.util.*;\nimport java.math.BigDecimal;\n\nclass Main{\n\tpublic static void main(String[] args){\n\t\tScanner stdIn = new Scanner(System.in);\n\t\tint q = stdIn.nextInt();\n\t\tfor(int i=0;i<q;i++){\n\t\t\tdouble x0 = stdIn.nextDouble();\n\t\t\tdouble y0 = stdIn.nextDouble();\n\t\t\tdouble x1 = stdIn.nextDouble();\n\t\t\tdouble y1 = stdIn.nextDouble();\n\t\t\tdouble x2 = stdIn.nextDouble();\n\t\t\tdouble y2 = stdIn.nextDouble();\n\t\t\tdouble x3 = stdIn.nextDouble();\n\t\t\tdouble y3 = stdIn.nextDouble();\n\t\t\tPoint p0 = new Point(x0,y0);\n\t\t\tPoint p1 = new Point(x1,y1);\n\t\t\tPoint p2 = new Point(x2,y2);\n\t\t\tPoint p3 = new Point(x3,y3);\n\t\t\tdouble d = p0.getDistance(p1,p2,p3);\n\t\t\tSystem.out.println(d);\n\t\t}\n\n\t}\t\n}\n\nclass Vector{\n\tpublic final double EPS = Math.pow(10,-8);\n\tpublic double x,y;\n\tfinal int cutoff = 9;\n\n\tVector( double x1 , double y1 , double x2 , double y2 ){\n\t\tthis.x = x2 - x1;\n\t\tthis.y = y2 - y1;\n\t}\n\n\tdouble dot( Vector a ){\t\n\t\treturn rounding(this.x * a.x + this.y * a.y);\n\t}\n\tdouble cross( Vector a ){\t\n\t\treturn rounding(this.x * a.y - this.y * a.x);\n\t}\n\n\tvoid add( Vector a ){\n\t\tthis.x = rounding(this.x + a.x);\n\t\tthis.y = rounding(this.y + a.y);\n\t}\n\tvoid sub( Vector a ){\n\t\tthis.x = rounding(this.x - a.x);\n\t\tthis.y = rounding(this.y - a.y);\n\t}\n\tvoid mul( double z ){\n\t\tthis.x = rounding(this.x * z);\n\t\tthis.y = rounding(this.y * z);\n\t}\n\tvoid div( double z ){\n\t\tthis.x = rounding(this.x / z);\n\t\tthis.y = rounding(this.y / z);\n\t}\n\n\tdouble abs(){\n\t\treturn Math.sqrt(norm());\n\t}\n\tdouble norm(){\n\t\treturn rounding(this.x * this.x + this.y * this.y);\n\t}\n\n\tvoid projection( Vector a ){\n\t\tif(judge(a.norm())){\n\t\t\tthis.x = 0;\n\t\t\tthis.y = 0;\n\t\t}\n\t\telse{\n\t\t\tdouble cos = dot(a)/(abs() * a.abs());\n\t\t\tdouble frac = a.abs() * cos/abs();\n\t\t\tmul(frac);\n\t\t}\n\t}\n\tVector reflection( Vector a ){\n\t\tprojection(a);\n\t\treturn new Vector(a.x,a.y,this.x,this.y);\n\t}\n\n\tboolean judgeisOrthogonal( Vector a ){\t\n\t\treturn judge(dot(a)) ? true : false;\n\t}  \n\tboolean judgeisParallel( Vector a ){\t\n\t\treturn judge(cross(a)) ? true : false;\n\t}\n\n\tboolean judge( double a ){\t\t\n\t\treturn Math.abs(a)<EPS ? true : false;\n\t}\n\tdouble rounding(double a){\n\t\tBigDecimal bi = new BigDecimal(String.valueOf(a));\n\t\treturn bi.setScale(cutoff,BigDecimal.ROUND_HALF_UP).doubleValue();\n\t}\n} \n\n\nclass Point{\n\n\tpublic double x,y;\n\tfinal double EPS = Math.pow(10,-8);\n\tfinal int cutoff = 9;\n\n\tPoint(double x,double y){\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t}\n\n\tdouble abs(){\n\t\tPoint a = new Point(0,0);\t\n\t\treturn Math.sqrt(norm(a));\t\n\t}\n\tdouble abs( Point a ){\n\t\treturn Math.sqrt(norm(a));\n\t}\n\tdouble norm( Point a ){\t\n\t\treturn rounding((this.x - a.x) * (this.x - a.x) + (this.y - a.y) * (this.y - a.y));\n\t}\n\n\tvoid add( Point a ){\n\t\tthis.x = rounding(this.x + a.x);\n\t\tthis.y = rounding(this.y + a.y);\n\t}\n\tvoid sub( Point a ){\n\t\tthis.x = rounding(this.x - a.x);\n\t\tthis.y = rounding(this.y - a.y);\n\t}\n\tvoid mul( double z){\n\t\tthis.x = rounding(this.x * z);\n\t\tthis.y = rounding(this.x * z);\n\t}\n\tvoid div( double z){\n\t\tthis.x = rounding(this.x / z);\n\t\tthis.y = rounding(this.x / z);\n\t}\n\n\tPoint getCrossPoint( Point a , Point b , Point c ){\n\t\tPoint d = new Point(this.x,this.y);\n\t\tVector s1 = new Vector(d.x,d.y,a.x,a.y);\n\t\tVector s2 = new Vector(b.x,b.y,c.x,c.y);\n\t\ts2.mul(-10000);\n\t\tPoint b2 = new Point(s2.x+b.x,s2.y+b.y);\n\t\ts2.mul(-1);\n\t\tPoint c2 = new Point(s2.x+c.x,s2.y+c.y);\n\t\tdouble t1 = getDistanceSP(b2,c2);\n\t\tdouble t2 = a.getDistanceSP(b2,c2);\n\t\ts1.mul(t1/(t1+t2));\n\t\tVector s3 = new Vector(b.x,b.y,d.x,d.y);\n\t\ts3.add(s1);\n\t\treturn new Point(b.x+s3.x,b.y+s3.y);\n\t}\n\n\tdouble getDistance( Point a , Point b , Point c ){\n\t\tif(intersect(a,b,c)){\n\t\t\treturn 0.0;\n\t\t}\n\t\tPoint d = new Point(this.x,this.y);\n\t\tdouble x = Math.min(getDistanceSP(b,c),a.getDistanceSP(b,c));\n\t\tdouble y = Math.min(b.getDistanceSP(a,d),c.getDistanceSP(a,d));\n\t\treturn Math.min(x,y);\n\t}\n\tdouble getDistanceSP( Point a , Point b ){\n\t\tVector s = new Vector( a.x , a.y , b.x , b.y);\n\t\tVector sa = new Vector( a.x , a.y , this.x , this.y );\n\t\tVector sb = new Vector( b.x , b.y , this.x , this.y );\n\t\tif(s.dot(sa)<0.00){\n\t\t\treturn abs(a);\n\t\t}\n\t\ts.mul(-1);\n\t\tif(s.dot(sb)<0.00){\n\t\t\treturn abs(b);\n\t\t}\n\t\treturn Math.abs(s.cross(sb)/s.abs());\n\t}\n\n\tint CCW( Point a , Point b ){\n\t\tVector sa = new Vector( this.x , this.y , a.x , a.y );\n\t\tVector sb = new Vector( this.x , this.y , b.x , b.y );\n\t\tif(sa.cross(sb) > EPS){\n\t\t\treturn -1;\n\t\t}\n\t\telse if(sa.cross(sb) < -EPS){\n\t\t\treturn 1;\n\t\t}\n\t\telse if(sa.dot(sb) < -EPS){\n\t\t\treturn -2;\n\t\t}\n\t\telse if(sa.norm() < sb.norm()){\n\t\t\treturn 2;\n\t\t}\n\t\telse{\n\t\t\treturn 0;\n\t\t}\n\t}\n\tboolean intersect( Point a , Point b , Point c ){\n\t\tPoint d = new Point(this.x,this.y);\n\t\tif(CCW(a,b)*CCW(a,c) <= 0 && b.CCW(c,a)*b.CCW(c,d) <= 0){\n\t\t\treturn true;\n\t\t}\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tint contains( Point[] query ){\n\t\tboolean flag1 = false;\n\t\tboolean flag2 = false;\n\t\tPoint p1 = new Point(this.x+1,this.y);\n\t\tfor(int i=0;i<query.length;i++){\n\t\t\tif(CCW(query[i],p1) == 2 || CCW(query[i],p1) == 0){\n\t\t\t\tflag1 = true;\n\t\t\t}\n\t\t}\n\t\tPoint p2 = new Point(Integer.MAX_VALUE/2,this.y);\n\t\tfinal int l = query.length;\n\t\tfor(int i=0;i<l;i++){\n\t\t\tif(intersect(p2,query[i%l],query[(i+1)%l])){\n\t\t\t\tflag2 = true;\n\t\t\t}\n\t\t}\n\n\t\tif(flag1){\n\t\t\treturn 2;\n\t\t}\n\t\telse if(flag2){\n\t\t\treturn 1;\n\t\t}\n\t\treturn 0;\n\t}\n\n\tvoid temp( Point a ){\n\t\tPoint temp = new Point(0,0);\n\t\ttemp.x = this.x;\n\t\ttemp.y = this.y;\n\t\tthis.x = a.x;\n\t\tthis.y = a.y;\n\t\ta.x = temp.x;\n\t\ta.y = temp.y;\n\t}\n\tvoid sort( Point[] query ){\n\t\tfor(int i=0;i<query.length;i++){\n\t\t\tfor(int j=0;j<query.length-1-i;j++){\n\t\t\t\tif(query[j].x > query[j+1].x){\n\t\t\t\t\tquery[j].temp(query[j+1]);\n\t\t\t\t}\n\t\t\t\telse if(query[j].x == query[j+1].x && query[j].y > query[j+1].y){\n\t\t\t\t\tquery[j].temp(query[j+1]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tArrayList<Point> andrewScan( Point[] query ){\n\t\tArrayList<Point> list = new ArrayList<Point>();\n\t\tif(query.length<4){\n\t\t\tfor(int i=0;i<query.length;i++){\n\t\t\t\tlist.add(query[i]);\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tsort(query);\n\t\t\tArrayList<Point> list1 = new ArrayList<Point>();\n\t\t\tArrayList<Point> list2 = new ArrayList<Point>();\n\t\t\tlist1.add(query[0]);\n\t\t\tlist1.add(query[1]);\n\t\t\tint next = 2;\n\t\t\twhile(next<query.length-1){\n\t\t\t\tif(list1.size()<2){\n\t\t\t\t\tlist1.add(query[next]);\n\t\t\t\t\tnext++;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tPoint p1 = list1.get(list1.size()-2);\n\t\t\t\t\tPoint p2 = list1.get(list1.size()-1);\n\t\t\t\t\tif(p1.CCW(p2,query[next])!=-1){\n\t\t\t\t\t\tlist1.add(query[next]);\n\t\t\t\t\t\tnext++;\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tlist1.remove(list1.size()-1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tPoint p1 = list1.get(list1.size()-2);\n\t\t\tPoint p2 = list1.get(list1.size()-1);\n\t\t\tif(p1.CCW(p2,query[query.length-1])!=-1){\n\t\t\t\tlist1.add(query[query.length-1]);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tlist1.remove(list1.size()-1);\n\t\t\t\tlist1.add(query[query.length-1]);\n\t\t\t}\n\t\t\tlist2.add(query[query.length-1]);\n\t\t\tlist2.add(query[query.length-2]);\n\t\t\tnext = query.length-3;\n\t\t\twhile(next>0){\n\t\t\t\tif(list2.size()<2){\n\t\t\t\t\tlist2.add(query[next]);\n\t\t\t\t\tnext--;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tPoint a = list2.get(list2.size()-2);\n\t\t\t\t\tPoint b = list2.get(list2.size()-1);\n\t\t\t\t\tif(a.CCW(b,query[next])!=-1){\n\t\t\t\t\t\tlist2.add(query[next]);\n\t\t\t\t\t\tnext--;\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tlist2.remove(list2.size()-1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tp1 = list2.get(list2.size()-2);\n\t\t\tp2 = list2.get(list2.size()-1);\n\t\t\tif(p1.CCW(p2,query[0])>=0){\n\t\t\t\tlist2.add(query[0]);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tlist2.remove(list2.size()-1);\n\t\t\t\tlist2.add(query[0]);\n\t\t\t}\n\t\t\tfor(int i=0;i<list1.size();i++){\n\t\t\t\tlist.add(list1.get(i));\n\t\t\t}\n\t\t\tfor(int i=1;i<list2.size()-1;i++){\n\t\t\t\tlist.add(list2.get(i));\n\t\t\t}\n\t\t}\n\t\treturn list;\n\t}\n\n\tPoint polarCos(double cos_a){\n\t\tdouble sin_a = Math.sqrt(1-Math.pow(cos_a,2));\n\t\tdouble x = cos_a*this.x - sin_a*this.y;\n\t\tdouble y = sin_a*this.x + cos_a*this.y;\n\t\treturn new Point(x,y); \n\t}\n\tPoint polarSin(double sin_a){\n\t\tdouble cos_a = Math.sqrt(1-Math.pow(sin_a,2));\n\t\tdouble x = cos_a*this.x - sin_a*this.y;\n\t\tdouble y = sin_a*this.x + cos_a*this.y;\n\t\treturn new Point(x,y); \n\t}\n\n\tboolean judge( Point a ){\t\n\t\tif( Math.abs( this.x - a.x ) < EPS && Math.abs( this.y - a.y ) < EPS){\n\t\t\treturn true;\n\t\t}\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\t}\n\tdouble rounding(double a){\n\t\tBigDecimal bi = new BigDecimal(String.valueOf(a));\n\t\treturn bi.setScale(cutoff,BigDecimal.ROUND_HALF_UP).doubleValue();\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\npublic class Main {\n\t\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\n\t\tint q = sc.nextInt();\n\t\tfor (int i = 0; i < q; i++) {\n\t\t\tint xp0 = sc.nextInt();\n\t\t\tint yp0 = sc.nextInt();\n\t\t\tint xp1 = sc.nextInt();\n\t\t\tint yp1 = sc.nextInt();\n\t\t\tint xp2 = sc.nextInt();\n\t\t\tint yp2 = sc.nextInt();\n\t\t\tint xp3 = sc.nextInt();\n\t\t\tint yp3 = sc.nextInt();\n\n\t\t\tif (Geom.lineSegsIntersect(xp0, yp0, xp1, yp1, xp2, yp2, xp3, yp3)) {\n\t\t\t\tSystem.out.println(\"0\");\n\t\t\t} else {\n\t\t\t\tdouble min = Double.MAX_VALUE;\n\t\t\t\tmin = Math.min(min, Math.sqrt(Geom.ptLineSegDistSq(xp0, yp0, xp1, yp1, xp2, yp2)));\n\t\t\t\tmin = Math.min(min, Math.sqrt(Geom.ptLineSegDistSq(xp0, yp0, xp1, yp1, xp3, yp3)));\n\t\t\t\tmin = Math.min(min, Math.sqrt(Geom.ptLineSegDistSq(xp2, yp2, xp3, yp3, xp0, yp0)));\n\t\t\t\tmin = Math.min(min, Math.sqrt(Geom.ptLineSegDistSq(xp2, yp2, xp3, yp3, xp1, yp1)));\n\n\t\t\t\tSystem.out.printf(\"%.9f\\n\", min);\n\t\t\t}\n\t\t}\n\n\t\tsc.close();\n\t}\n\t\n\t@SuppressWarnings(\"unused\")\n\tprivate static class Geom {\n\t\tstatic int dot(int xa, int ya, int xb, int yb) {\n\t\t\treturn xa * xb + ya * yb;\n\t\t}\n\n\t\tstatic int cross(int xa, int ya, int xb, int yb) {\n\t\t\treturn xa * yb - xb * ya;\n\t\t}\n\t\t\n\t\tstatic int sumofsquare(int xa, int ya) {\n\t\t\treturn xa * xa + ya * ya;\n\t\t}\n\n\t\tstatic boolean lineIntersect(int xa, int ya, int xb, int yb, int xc, int yc, int xd, int yd) {\n\t\t\t/*\n\t\t\t * ??´???AB??¨??????CD??¨??????????????????????????????\n\t\t\t * \n\t\t\t * |AB|==0 && |CD|==0\n\t\t\t *     ???A==???C\n\t\t\t * |AB|==0 && |CD|!=0\n\t\t\t *     ACxAD==0 && AC.AD<0\n\t\t\t * |AB|!=0\n\t\t\t *     ABxAC*ABxAD<=0\n\t\t\t */\n\t\t\tint xab = xb - xa;\n\t\t\tint yab = yb - ya;\n\t\t\tif (xab != 0 || yab != 0) {\n\t\t\t\tint xac = xc - xa;\n\t\t\t\tint yac = yc - ya;\n\t\t\t\tint xad = xd - xa;\n\t\t\t\tint yad = yd - ya;\n\t\t\t\treturn (long)cross(xab, yab, xac, yac) * cross(xab, yab, xad, yad) <= 0;\n\t\t\t} else {\n\t\t\t\tint xcd = xd - xc;\n\t\t\t\tint ycd = yd - yc;\n\t\t\t\tif (xcd != 0 || ycd != 0) {\n\t\t\t\t\tint xac = xc - xa;\n\t\t\t\t\tint yac = yc - ya;\n\t\t\t\t\tint xad = xd - xa;\n\t\t\t\t\tint yad = yd - ya;\n\t\t\t\t\treturn cross(xac, yac, xad, yad) == 0 && dot(xac, yac, xad, yad) < 0;\n\t\t\t\t} else {\n\t\t\t\t\treturn xa == xc && ya == yc;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tstatic boolean lineSegsIntersect(int xa, int ya, int xb, int yb, int xc, int yc, int xd, int yd) {\n\t\t\t/*\n\t\t\t * ??????AB??¨??????CD??¨??????????????????????????????\n\t\t\t * \n\t\t\t * |AB|==0 && |CD|==0\n\t\t\t *     ???A==???C\n\t\t\t * |AB|==0 && |CD|!=0\n\t\t\t *     ACxAD==0 && AC.AD<0\n\t\t\t * |AB|!=0 && |CD|==0\n\t\t\t *     CAxCB==0 && CA.CB<0\n\t\t\t * |AB|!=0 && |CD|!=0\n\t\t\t *     ABxCD==0\n\t\t\t *         ACxAD==0 && (AB.AC>=0 || AB.AD>=0) && (BA.BC>=0 || BA.BD>=0)\n\t\t\t *     ABxCD!=0\n\t\t\t *         ABxAC*ABxAD<=0 && CDxCA*CDxCB<=0\n\t\t\t */\n\t\t\tint xab = xb - xa;\n\t\t\tint yab = yb - ya;\n\t\t\tint xcd = xd - xc;\n\t\t\tint ycd = yd - yc;\n\t\t\tif ((xab != 0 || yab != 0) && (xcd != 0 || ycd != 0)) {\n\t\t\t\tint xac = xc - xa;\n\t\t\t\tint yac = yc - ya;\n\t\t\t\tint xad = xd - xa;\n\t\t\t\tint yad = yd - ya;\n\t\t\t\tif (cross(xab, yab, xcd, ycd) != 0) {\n\t\t\t\t\tint xca = -xac;\n\t\t\t\t\tint yca = -yac;\n\t\t\t\t\tint xcb = xb - xc;\n\t\t\t\t\tint ycb = yb - yc;\n\t\t\t\t\treturn ((long)cross(xab, yab, xac, yac) * cross(xab, yab, xad, yad) <= 0)\n\t\t\t\t\t\t\t&& ((long)cross(xcd, ycd, xca, yca) * cross(xcd, ycd, xcb, ycb) <= 0);\n\t\t\t\t} else {\n\t\t\t\t\tint xba = -xab;\n\t\t\t\t\tint yba = -yab;\n\t\t\t\t\tint xbc = xc - xb;\n\t\t\t\t\tint ybc = yc - yb;\n\t\t\t\t\tint xbd = xd - xb;\n\t\t\t\t\tint ybd = yd - yb;\n\t\t\t\t\treturn cross(xac, yac, xad, yad) == 0\n\t\t\t\t\t\t\t&& (dot(xab, yab, xac, yac) >= 0 || dot(xab, yab, xad, yad) >= 0)\n\t\t\t\t\t\t\t&& (dot(xba, yba, xbc, ybc) >= 0 || dot(xba, yba, xbd, ybd) >= 0);\n\t\t\t\t}\n\t\t\t} else if (xab != 0 || yab != 0) {\n\t\t\t\tint xca = xa - xc;\n\t\t\t\tint yca = ya - yc;\n\t\t\t\tint xcb = xb - xc;\n\t\t\t\tint ycb = yb - yc;\n\t\t\t\treturn cross(xca, yca, xcb, ycb) == 0 && dot(xca, yca, xcb, ycb) < 0;\n\t\t\t} else {\n\t\t\t\tif (xcd != 0 || ycd != 0) {\n\t\t\t\t\tint xac = xc - xa;\n\t\t\t\t\tint yac = yc - ya;\n\t\t\t\t\tint xad = xd - xa;\n\t\t\t\t\tint yad = yd - ya;\n\t\t\t\t\treturn cross(xac, yac, xad, yad) == 0 && dot(xac, yac, xad, yad) < 0;\n\t\t\t\t} else {\n\t\t\t\t\treturn xa == xc && ya == yc;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tstatic double ptLineSegDistSq(int xa, int ya, int xb, int yb, int xc, int yc) {\n\t\t\t/*\n\t\t\t * ??????AB??¨???C??¨????????¢\n\t\t\t * \n\t\t\t * |AB|==0\n\t\t\t *     |AC|^2\n\t\t\t * |AB|!=0 && AB.AC<=0\n\t\t\t *     |AC|^2\n\t\t\t * |AB|!=0 && BA.BC<=0\n\t\t\t *     |BC|^2\n\t\t\t * |AB|!=0 && AB.AC>0 && BA.BC>0\n\t\t\t *     |ABxAC|/|AB|\n\t\t\t */\n\t\t\tint xab = xb - xa;\n\t\t\tint yab = yb - ya;\n\t\t\tint xac = xc - xa;\n\t\t\tint yac = yc - ya;\n\t\t\tint xbc = xc - xb;\n\t\t\tint ybc = yc - yb;\n\t\t\tif (dot(xab, yab, xac, yac) <= 0) {\n\t\t\t\treturn sumofsquare(xac, yac);\n\t\t\t} else if (dot(-xab, -yab, xbc, ybc) <= 0) {\n\t\t\t\treturn sumofsquare(xbc, ybc);\n\t\t\t} else {\n\t\t\t\tint tmp = cross(xab, yab, xac, yac);\n\t\t\t\treturn (double)(tmp * tmp) / sumofsquare(xab, yab);\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\n/*\n1\n0 0 4 0 0 -1 0 -2\n */\npublic class Main{\n\tstatic double EPS = 0.0000000001;\n\tstatic double getDistance(Point p1, Point p2) {return p1.diff(p2).abs();}\n\tstatic double getDistance(Line l, Point p) {return Math.abs(l.p2.diff(l.p1).crossProduct(p.diff(l.p1))) / l.p2.diff(l.p1).abs();}\n\tstatic double getDistance(Segment s, Point p) {\n\t\tif (s.p2.diff(s.p1).dotProduct(p.diff(s.p1))<0.0) {return p.diff(s.p1).abs();}\n\t\tif (s.p1.diff(s.p2).dotProduct(p.diff(s.p2))<0.0) {return p.diff(s.p2).abs();}\n\t\treturn getDistance(s.toLine(),p);\n\t}\n\tstatic double getDistance(Segment s1, Segment s2) {\n\t\tif (intersect(s1,s2)) {return 0.0;}\n\t\treturn Math.min(Math.min(getDistance(s1,s2.p1), getDistance(s1,s2.p2)), Math.min(getDistance(s2,s1.p1),getDistance(s2,s1.p2)));\n\t}\n\tstatic int ccw(Point lp0, Point lp1, Point p) {\n\t\tVector lv = lp1.diff(lp0);\n\t\tVector pv = p.diff(lp0);\n\t\tdouble cp=0.0;\n\t\tif ((cp=lv.crossProduct(pv))>EPS) {return -1;} // counter-clockwise\n\t\tif (cp<-EPS) {return 1;} // clockwise\n\t\tif (lv.dotProduct(pv)<-EPS) return 2; // online-back\n\t\tif (lv.norm() < pv.norm()) return 3; // online-front\n\t\treturn 0; // on-segment\n\t}\n\tstatic boolean intersect(Point p0, Point p1, Point p2, Point p3) {\n\t\tint ccw0=ccw(p0,p1,p2)*ccw(p0,p1,p3);int ccw1=ccw(p2,p3,p0)*ccw(p2,p3,p1);\n\t\treturn ccw0<=0&&ccw1<=0||ccw0==0&&ccw1==6||ccw0==6&&ccw1==0;\n\t}\n\tstatic boolean intersect(Segment s1, Segment s2){return intersect(s1.p1,s1.p2,s2.p1,s2.p2);}\n\n\n\tpublic static void main(String[] args) {\n\t\tScanner s = new Scanner(System.in);\n\t\tint q = s.nextInt();\n\t\tfor (int i=0;i<q;i++) {\n\t\t\tSegment s1 = new Segment(new Point(s.nextInt(),s.nextInt()), new Point(s.nextInt(),s.nextInt()));\n\t\t\tSegment s2 = new Segment(new Point(s.nextInt(),s.nextInt()), new Point(s.nextInt(),s.nextInt()));\n\t\t\tSystem.out.println(getDistance(s1,s2));\n\t\t}\n\t}\n\n}\nclass Point {\n\tstatic double EPS = 0.0000000001;\n\tdouble x; double y;\n\tpublic Point(double ax, double ay){x=ax;y=ay;}\n\tpublic Vector sum(Point p) { return new Vector(x+p.x,y+p.y); }\n\tpublic Vector diff(Point p) { return new Vector(x-p.x,y-p.y); }\n\tpublic Vector mult(double k) { return new Vector(x*k,y*k); }\n\tpublic Vector div(double k) { return new Vector(x*(1.0/k),y*(1.0/k)); }\n\tpublic boolean equals(Point p){return Math.abs(x-p.x)<EPS && Math.abs(y-p.y)<EPS;}\n\tpublic String toString(){return \"(\"+x+\",\"+y+\")\";}\n}\nclass Vector extends Point {\n\tpublic Vector(double ax, double ay) {super(ax,ay);}\n\tpublic Vector(Point p1, Point p2) {super(p1.x-p2.x,p2.x-p2.y);}\n\tpublic double norm() {return x*x+y*y;}\n\tpublic double abs() {return Math.sqrt(norm());}\n\t// TODO:\n\tpublic boolean isSmallerThan(Vector v) {return x!=v.x?x<v.x:y<v.y;}\n\tpublic double dotProduct(Vector v) {return x*v.x+y*v.y;}\n\tpublic double crossProduct(Vector v) {return x*v.y - y*v.x;}\n}\n\nclass Segment {\n\tPoint p1; Point p2;\n\tpublic Segment(Point ap1, Point ap2){p1=ap1;p2=ap2;}\n\tpublic double dotProduct(Segment s) {return (p1.x-p2.x)*(s.p1.x-s.p2.x)+(p1.y-p2.y)*(s.p1.y-s.p2.y);}\n\tpublic double crossProduct(Segment s) {return (p1.x-p2.x)*(s.p1.y-s.p2.y) - (p1.y-p2.y)*(s.p1.x-s.p2.x);}\n\tpublic String toString(){return p1.toString()+\"->\"+p2.toString();}\n\tpublic Line toLine() {return new Line(p1,p2);}\n}\nclass Line extends Segment{public Line(Point ap1, Point ap2){super(ap1,ap2);}}"
  },
  {
    "language": "Java",
    "code": "\nimport java.util.*;\nimport java.math.BigDecimal;\n\nclass Main{\n\tpublic static void main(String[] args){\n\t\tScanner stdIn = new Scanner(System.in);\n\t\tint q = stdIn.nextInt();\n\t\tfor(int i=0;i<q;i++){\n\t\t\tdouble x0 = stdIn.nextDouble();\n\t\t\tdouble y0 = stdIn.nextDouble();\n\t\t\tdouble x1 = stdIn.nextDouble();\n\t\t\tdouble y1 = stdIn.nextDouble();\n\t\t\tdouble x2 = stdIn.nextDouble();\n\t\t\tdouble y2 = stdIn.nextDouble();\n\t\t\tdouble x3 = stdIn.nextDouble();\n\t\t\tdouble y3 = stdIn.nextDouble();\n\t\t\tPoint p0 = new Point(x0,y0);\n\t\t\tPoint p1 = new Point(x1,y1);\n\t\t\tPoint p2 = new Point(x2,y2);\n\t\t\tPoint p3 = new Point(x3,y3);\n\t\t\tdouble d = p0.getDistance(p1,p2,p3);\n\t\t\tSystem.out.println(d);\n\t\t}\n\n\t}\t\n}\n\nclass Vector{\n\tpublic final double EPS = Math.pow(10,-8);\n\tpublic double x,y;\n\tfinal int cutoff = 9;\n\n\tVector( double x1 , double y1 , double x2 , double y2 ){\n\t\tthis.x = x2 - x1;\n\t\tthis.y = y2 - y1;\n\t}\n\n\tdouble dot( Vector a ){\t\n\t\treturn rounding(this.x * a.x + this.y * a.y);\n\t}\n\tdouble cross( Vector a ){\t\n\t\treturn rounding(this.x * a.y - this.y * a.x);\n\t}\n\n\tvoid add( Vector a ){\n\t\tthis.x = rounding(this.x + a.x);\n\t\tthis.y = rounding(this.y + a.y);\n\t}\n\tvoid sub( Vector a ){\n\t\tthis.x = rounding(this.x - a.x);\n\t\tthis.y = rounding(this.y - a.y);\n\t}\n\tvoid mul( double z ){\n\t\tthis.x = rounding(this.x * z);\n\t\tthis.y = rounding(this.y * z);\n\t}\n\tvoid div( double z ){\n\t\tthis.x = rounding(this.x / z);\n\t\tthis.y = rounding(this.y / z);\n\t}\n\n\tdouble abs(){\n\t\treturn Math.sqrt(norm());\n\t}\n\tdouble norm(){\n\t\treturn rounding(this.x * this.x + this.y * this.y);\n\t}\n\n\tvoid projection( Vector a ){\n\t\tif(judge(a.norm())){\n\t\t\tthis.x = 0;\n\t\t\tthis.y = 0;\n\t\t}\n\t\telse{\n\t\t\tdouble cos = dot(a)/(abs() * a.abs());\n\t\t\tdouble frac = a.abs() * cos/abs();\n\t\t\tmul(frac);\n\t\t}\n\t}\n\tVector reflection( Vector a ){\n\t\tprojection(a);\n\t\treturn new Vector(a.x,a.y,this.x,this.y);\n\t}\n\n\tboolean judgeisOrthogonal( Vector a ){\t\n\t\treturn judge(dot(a)) ? true : false;\n\t}  \n\tboolean judgeisParallel( Vector a ){\t\n\t\treturn judge(cross(a)) ? true : false;\n\t}\n\n\tboolean judge( double a ){\t\t\n\t\treturn Math.abs(a)<EPS ? true : false;\n\t}\n\tdouble rounding(double a){\n\t\tBigDecimal bi = new BigDecimal(String.valueOf(a));\n\t\treturn bi.setScale(cutoff,BigDecimal.ROUND_HALF_UP).doubleValue();\n\t}\n} \n\n\nclass Point{\n\n\tpublic double x,y;\n\tfinal double EPS = Math.pow(10,-8);\n\tfinal int cutoff = 9;\n\n\tPoint(double x,double y){\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t}\n\n\tdouble abs(){\n\t\tPoint a = new Point(0,0);\t\n\t\treturn Math.sqrt(norm(a));\t\n\t}\n\tdouble abs( Point a ){\n\t\treturn Math.sqrt(norm(a));\n\t}\n\tdouble norm( Point a ){\t\n\t\treturn rounding((this.x - a.x) * (this.x - a.x) + (this.y - a.y) * (this.y - a.y));\n\t}\n\n\tvoid add( Point a ){\n\t\tthis.x = rounding(this.x + a.x);\n\t\tthis.y = rounding(this.y + a.y);\n\t}\n\tvoid sub( Point a ){\n\t\tthis.x = rounding(this.x - a.x);\n\t\tthis.y = rounding(this.y - a.y);\n\t}\n\tvoid mul( double z){\n\t\tthis.x = rounding(this.x * z);\n\t\tthis.y = rounding(this.x * z);\n\t}\n\tvoid div( double z){\n\t\tthis.x = rounding(this.x / z);\n\t\tthis.y = rounding(this.x / z);\n\t}\n\n\tPoint getCrossPoint( Point a , Point b , Point c ){\n\t\tPoint d = new Point(this.x,this.y);\n\t\tVector s1 = new Vector(d.x,d.y,a.x,a.y);\n\t\tVector s2 = new Vector(b.x,b.y,c.x,c.y);\n\t\ts2.mul(-10000);\n\t\tPoint b2 = new Point(s2.x+b.x,s2.y+b.y);\n\t\ts2.mul(-1);\n\t\tPoint c2 = new Point(s2.x+c.x,s2.y+c.y);\n\t\tdouble t1 = getDistanceSP(b2,c2);\n\t\tdouble t2 = a.getDistanceSP(b2,c2);\n\t\ts1.mul(t1/(t1+t2));\n\t\tVector s3 = new Vector(b.x,b.y,d.x,d.y);\n\t\ts3.add(s1);\n\t\treturn new Point(b.x+s3.x,b.y+s3.y);\n\t}\n\n\tdouble getDistance( Point a , Point b , Point c ){\n\t\tif(intersect(a,b,c)){\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn Math.min(getDistanceSP(b,c),a.getDistanceSP(b,c));\n\t}\n\tdouble getDistanceSP( Point a , Point b ){\n\t\tVector s = new Vector( a.x , a.y , b.x , b.y);\n\t\tVector sa = new Vector( a.x , a.y , this.x , this.y );\n\t\tVector sb = new Vector( b.x , b.y , this.x , this.y );\n\t\tif(s.dot(sa)<0.00){\n\t\t\treturn abs(a);\n\t\t}\n\t\ts.mul(-1);\n\t\tif(s.dot(sb)<0.00){\n\t\t\treturn abs(b);\n\t\t}\n\t\treturn Math.abs(s.cross(sb)/s.abs());\n\t}\n\n\tint CCW( Point a , Point b ){\n\t\tVector sa = new Vector( this.x , this.y , a.x , a.y );\n\t\tVector sb = new Vector( this.x , this.y , b.x , b.y );\n\t\tif(sa.cross(sb) > EPS){\n\t\t\treturn -1;\n\t\t}\n\t\telse if(sa.cross(sb) < -EPS){\n\t\t\treturn 1;\n\t\t}\n\t\telse if(sa.dot(sb) < -EPS){\n\t\t\treturn -2;\n\t\t}\n\t\telse if(sa.norm() < sb.norm()){\n\t\t\treturn 2;\n\t\t}\n\t\telse{\n\t\t\treturn 0;\n\t\t}\n\t}\n\tboolean intersect( Point a , Point b , Point c ){\n\t\tPoint d = new Point(this.x,this.y);\n\t\tif(CCW(a,b)*CCW(a,c) <= 0 && b.CCW(c,a)*b.CCW(c,d) <= 0){\n\t\t\treturn true;\n\t\t}\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tint contains( Point[] query ){\n\t\tboolean flag1 = false;\n\t\tboolean flag2 = false;\n\t\tPoint p1 = new Point(this.x+1,this.y);\n\t\tfor(int i=0;i<query.length;i++){\n\t\t\tif(CCW(query[i],p1) == 2 || CCW(query[i],p1) == 0){\n\t\t\t\tflag1 = true;\n\t\t\t}\n\t\t}\n\t\tPoint p2 = new Point(Integer.MAX_VALUE/2,this.y);\n\t\tfinal int l = query.length;\n\t\tfor(int i=0;i<l;i++){\n\t\t\tif(intersect(p2,query[i%l],query[(i+1)%l])){\n\t\t\t\tflag2 = true;\n\t\t\t}\n\t\t}\n\n\t\tif(flag1){\n\t\t\treturn 2;\n\t\t}\n\t\telse if(flag2){\n\t\t\treturn 1;\n\t\t}\n\t\treturn 0;\n\t}\n\n\tvoid temp( Point a ){\n\t\tPoint temp = new Point(0,0);\n\t\ttemp.x = this.x;\n\t\ttemp.y = this.y;\n\t\tthis.x = a.x;\n\t\tthis.y = a.y;\n\t\ta.x = temp.x;\n\t\ta.y = temp.y;\n\t}\n\tvoid sort( Point[] query ){\n\t\tfor(int i=0;i<query.length;i++){\n\t\t\tfor(int j=0;j<query.length-1-i;j++){\n\t\t\t\tif(query[j].x > query[j+1].x){\n\t\t\t\t\tquery[j].temp(query[j+1]);\n\t\t\t\t}\n\t\t\t\telse if(query[j].x == query[j+1].x && query[j].y > query[j+1].y){\n\t\t\t\t\tquery[j].temp(query[j+1]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tArrayList<Point> andrewScan( Point[] query ){\n\t\tArrayList<Point> list = new ArrayList<Point>();\n\t\tif(query.length<4){\n\t\t\tfor(int i=0;i<query.length;i++){\n\t\t\t\tlist.add(query[i]);\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tsort(query);\n\t\t\tArrayList<Point> list1 = new ArrayList<Point>();\n\t\t\tArrayList<Point> list2 = new ArrayList<Point>();\n\t\t\tlist1.add(query[0]);\n\t\t\tlist1.add(query[1]);\n\t\t\tint next = 2;\n\t\t\twhile(next<query.length-1){\n\t\t\t\tif(list1.size()<2){\n\t\t\t\t\tlist1.add(query[next]);\n\t\t\t\t\tnext++;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tPoint p1 = list1.get(list1.size()-2);\n\t\t\t\t\tPoint p2 = list1.get(list1.size()-1);\n\t\t\t\t\tif(p1.CCW(p2,query[next])!=-1){\n\t\t\t\t\t\tlist1.add(query[next]);\n\t\t\t\t\t\tnext++;\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tlist1.remove(list1.size()-1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tPoint p1 = list1.get(list1.size()-2);\n\t\t\tPoint p2 = list1.get(list1.size()-1);\n\t\t\tif(p1.CCW(p2,query[query.length-1])!=-1){\n\t\t\t\tlist1.add(query[query.length-1]);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tlist1.remove(list1.size()-1);\n\t\t\t\tlist1.add(query[query.length-1]);\n\t\t\t}\n\t\t\tlist2.add(query[query.length-1]);\n\t\t\tlist2.add(query[query.length-2]);\n\t\t\tnext = query.length-3;\n\t\t\twhile(next>0){\n\t\t\t\tif(list2.size()<2){\n\t\t\t\t\tlist2.add(query[next]);\n\t\t\t\t\tnext--;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tPoint a = list2.get(list2.size()-2);\n\t\t\t\t\tPoint b = list2.get(list2.size()-1);\n\t\t\t\t\tif(a.CCW(b,query[next])!=-1){\n\t\t\t\t\t\tlist2.add(query[next]);\n\t\t\t\t\t\tnext--;\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tlist2.remove(list2.size()-1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tp1 = list2.get(list2.size()-2);\n\t\t\tp2 = list2.get(list2.size()-1);\n\t\t\tif(p1.CCW(p2,query[0])>=0){\n\t\t\t\tlist2.add(query[0]);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tlist2.remove(list2.size()-1);\n\t\t\t\tlist2.add(query[0]);\n\t\t\t}\n\t\t\tfor(int i=0;i<list1.size();i++){\n\t\t\t\tlist.add(list1.get(i));\n\t\t\t}\n\t\t\tfor(int i=1;i<list2.size()-1;i++){\n\t\t\t\tlist.add(list2.get(i));\n\t\t\t}\n\t\t}\n\t\treturn list;\n\t}\n\n\tPoint polarCos(double cos_a){\n\t\tdouble sin_a = Math.sqrt(1-Math.pow(cos_a,2));\n\t\tdouble x = cos_a*this.x - sin_a*this.y;\n\t\tdouble y = sin_a*this.x + cos_a*this.y;\n\t\treturn new Point(x,y); \n\t}\n\tPoint polarSin(double sin_a){\n\t\tdouble cos_a = Math.sqrt(1-Math.pow(sin_a,2));\n\t\tdouble x = cos_a*this.x - sin_a*this.y;\n\t\tdouble y = sin_a*this.x + cos_a*this.y;\n\t\treturn new Point(x,y); \n\t}\n\n\tboolean judge( Point a ){\t\n\t\tif( Math.abs( this.x - a.x ) < EPS && Math.abs( this.y - a.y ) < EPS){\n\t\t\treturn true;\n\t\t}\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\t}\n\tdouble rounding(double a){\n\t\tBigDecimal bi = new BigDecimal(String.valueOf(a));\n\t\treturn bi.setScale(cutoff,BigDecimal.ROUND_HALF_UP).doubleValue();\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.util.NoSuchElementException;\n\npublic class Main {\n\tprivate static FastScanner sc = new FastScanner();\n\n\tpublic static void main(String[] args) {\n\t\tint q = sc.nextInt();\n\t\tStringBuilder ans = new StringBuilder();\n\t\tfor(int i=0; i<q; i++) {\n\t\t\tdouble mind = Double.MAX_VALUE;\n\t\t\tPoint p1 = new Point(sc.nextDouble(), sc.nextDouble());\n\t\t\tPoint p2 = new Point(sc.nextDouble(), sc.nextDouble());\n\t\t\tPoint p3 = new Point(sc.nextDouble(), sc.nextDouble());\n\t\t\tPoint p4 = new Point(sc.nextDouble(), sc.nextDouble());\n\t\t\t\n\t\t\tif(checkCross(p1, p2, p3, p4)) {\n\t\t\t\tans.append(0);\n\t\t\t\tans.append(\"\\n\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\tPoint per1 = perpLine(p1, p2, p3);\n\t\t\tif(per1.x >= Math.min(p1.x, p2.x) && per1.x <= Math.max(p1.x, p2.x)\n\t\t\t\t\t&& per1.y >= Math.min(p1.y, p2.y) && per1.y <= Math.max(p1.y, p2.y)) {\n\t\t\t\tif(distance(per1, p3) < mind) {\n\t\t\t\t\tmind = distance(per1, p3);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif(distance(p1, p3) < mind) {\n\t\t\t\t\tmind = distance(p1, p3);\n\t\t\t\t}\n\t\t\t\tif(distance(p2, p3) < mind) {\n\t\t\t\t\tmind = distance(p2, p3);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tPoint per2 = perpLine(p1, p2, p4);\n\t\t\tif(per2.x >= Math.min(p1.x, p2.x) && per2.x <= Math.max(p1.x, p2.x)\n\t\t\t\t\t&& per2.y >= Math.min(p1.y, p2.y) && per2.y <= Math.max(p1.y, p2.y)) {\n\t\t\t\tif(distance(per2, p4) < mind) {\n\t\t\t\t\tmind = distance(per2, p4);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif(distance(p1, p4) < mind) {\n\t\t\t\t\tmind = distance(p1, p4);\n\t\t\t\t}\n\t\t\t\tif(distance(p2, p4) < mind) {\n\t\t\t\t\tmind = distance(p2, p4);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tPoint per3 = perpLine(p3, p4, p1);\n\t\t\tif(per3.x >= Math.min(p3.x, p4.x) && per3.x <= Math.max(p3.x, p4.x)\n\t\t\t\t\t&& per3.y >= Math.min(p3.y, p4.y) && per3.y <= Math.max(p3.y, p4.y)) {\n\t\t\t\tif(distance(per3, p1) < mind) {\n\t\t\t\t\tmind = distance(per3, p1);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif(distance(p1, p3) < mind) {\n\t\t\t\t\tmind = distance(p1, p3);\n\t\t\t\t}\n\t\t\t\tif(distance(p1, p4) < mind) {\n\t\t\t\t\tmind = distance(p1, p4);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tPoint per4 = perpLine(p3, p4, p2);\n\t\t\tif(per4.x >= Math.min(p3.x, p4.x) && per4.x <= Math.max(p3.x, p4.x)\n\t\t\t\t\t&& per4.y >= Math.min(p3.y, p4.y) && per4.y <= Math.max(p3.y, p4.y)) {\n\t\t\t\tif(distance(per4, p2) < mind) {\n\t\t\t\t\tmind = distance(per4, p2);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif(distance(p2, p3) < mind) {\n\t\t\t\t\tmind = distance(p2, p3);\n\t\t\t\t}\n\t\t\t\tif(distance(p2, p4) < mind) {\n\t\t\t\t\tmind = distance(p2, p4);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tans.append(mind);\n\t\t\tans.append(\"\\n\");\n\t\t}\n\t\tSystem.out.print(ans);\n\t}\n\t\n\tstatic Point perpLine(Point p1, Point p2, Point p) {\n\t\tdouble a = (p2.y - p1.y) / (p2.x - p1.x);\n\t\tdouble b = p1.y - a * p1.x;\n\t\tdouble x = 0;\n\t\tdouble y = 0;\n\t\tif(p1.y == p2.y) {\n\t\t\tx = p.x;\n\t\t\ty = p1.y;\n\t\t} else if(p1.x == p2.x) {\n\t\t\tx = p1.x;\n\t\t\ty = p.y;\n\t\t} else {\n\t\t\tx = (p.y + p.x / a - b) / (a + 1 / a);\n\t\t\ty = p.y + p.x / a - x / a;\n\t\t}\n\t\t\n\t\treturn new Point(x, y);\n\t}\n\t\n\tstatic double distance(Point p1, Point p2) {\n\t\treturn Math.sqrt((p2.x-p1.x)*(p2.x-p1.x) + (p2.y-p1.y)*(p2.y-p1.y));\n\t}\n\t\n\tstatic boolean checkCross(Point p1, Point p2, Point p3, Point p4) {\n\t\tif(p1.x >= p2.x) {\n\t\t\tif((p1.x<p3.x && p1.x<p4.x) || (p2.x>p3.x && p2.x>p4.x)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\tif((p2.x<p3.x && p2.x<p4.x) || (p1.x>p3.x && p1.x>p4.x)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(p1.y >= p2.y) {\n\t\t\tif((p1.y<p3.y && p1.y<p4.y) || (p2.y>p3.y && p2.y>p4.y)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\tif((p2.y<p3.y && p2.y<p4.y) || (p1.y>p3.y && p1.y>p4.y)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(((p1.x-p2.x)*(p3.y-p1.y)+(p1.y-p2.y)*(p1.x-p3.x))*((p1.x-p2.x)*(p4.y-p1.y)+(p1.y-p2.y)*(p1.x-p4.x))>0) {\n\t\t\treturn false;\n\t\t}\n\t\tif(((p3.x-p4.x)*(p1.y-p3.y)+(p3.y-p4.y)*(p3.x-p1.x))*((p3.x-p4.x)*(p2.y-p3.y)+(p3.y-p4.y)*(p3.x-p2.x))>0) {\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\treturn true;\n\t}\n\n\tstatic class Point {\n\t\tdouble x;\n\t\tdouble y;\n\t\tPoint(double x, double y) {\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t}\n\t}\n\t\n\tstatic class FastScanner {\n        private final InputStream in = System.in;\n        private final byte[] buffer = new byte[1024];\n        private int ptr = 0;\n        private int buflen = 0;\n        private boolean hasNextByte() {\n            if(ptr < buflen) {\n                return true;\n            } else {\n                ptr = 0;\n                try {\n                    buflen = in.read(buffer);\n                } catch(IOException e) {\n                    e.printStackTrace();\n                }\n                if(buflen <= 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        private int readByte() { if (hasNextByte()) return buffer[ptr++]; else return -1;}\n        private static boolean isPrintableChar(int c) { return 33 <= c && c <= 126;}\n        private void skipUnprintable() { while(hasNextByte() && !isPrintableChar(buffer[ptr])) ptr++;}\n        public boolean hasNext() { skipUnprintable(); return hasNextByte();}\n        public String next() {\n            if (!hasNext()) throw new NoSuchElementException();\n            StringBuilder sb = new StringBuilder();\n            int b = readByte();\n            while(isPrintableChar(b)) {\n                sb.appendCodePoint(b);\n                b = readByte();\n            }\n            return sb.toString();\n        }\n        public long nextLong() {\n            return Long.parseLong(next());\n        }\n        public int nextInt(){\n            return Integer.parseInt(next());\n        }\n        public double nextDouble(){\n            return Double.parseDouble(next());\n        }\n    }\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\npublic class Main {\n\t\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\n\t\tint q = sc.nextInt();\n\t\tfor (int i = 0; i < q; i++) {\n\t\t\tint xp0 = sc.nextInt();\n\t\t\tint yp0 = sc.nextInt();\n\t\t\tint xp1 = sc.nextInt();\n\t\t\tint yp1 = sc.nextInt();\n\t\t\tint xp2 = sc.nextInt();\n\t\t\tint yp2 = sc.nextInt();\n\t\t\tint xp3 = sc.nextInt();\n\t\t\tint yp3 = sc.nextInt();\n\n\t\t\tif (Geom.lineSegsIntersect(xp0, yp0, xp1, yp1, xp2, yp2, xp3, yp3)) {\n\t\t\t\tSystem.out.println(\"0\");\n\t\t\t} else {\n\t\t\t\tdouble min = Double.MAX_VALUE;\n\t\t\t\tmin = Math.min(min, Math.sqrt(Geom.ptLineSegDistSq(xp0, yp0, xp1, yp1, xp2, yp2)));\n\t\t\t\tmin = Math.min(min, Math.sqrt(Geom.ptLineSegDistSq(xp0, yp0, xp1, yp1, xp3, yp3)));\n\t\t\t\tmin = Math.min(min, Math.sqrt(Geom.ptLineSegDistSq(xp2, yp2, xp3, yp3, xp0, yp0)));\n\t\t\t\tmin = Math.min(min, Math.sqrt(Geom.ptLineSegDistSq(xp2, yp2, xp3, yp3, xp1, yp1)));\n\n\t\t\t\tSystem.out.printf(\"%.9f\\n\", min);\n\t\t\t}\n\t\t}\n\n\t\tsc.close();\n\t}\n\t\n\t@SuppressWarnings(\"unused\")\n\tprivate static class Geom {\n\t\tstatic int dot(int xa, int ya, int xb, int yb) {\n\t\t\treturn xa * xb + ya * yb;\n\t\t}\n\n\t\tstatic int cross(int xa, int ya, int xb, int yb) {\n\t\t\treturn xa * yb - xb * ya;\n\t\t}\n\t\t\n\t\tstatic int sumofsquare(int xa, int ya) {\n\t\t\treturn xa * xa + ya * ya;\n\t\t}\n\n\t\tstatic boolean lineIntersect(int xa, int ya, int xb, int yb, int xc, int yc, int xd, int yd) {\n\t\t\t/*\n\t\t\t * ??´???AB??¨??????CD??¨??????????????????????????????\n\t\t\t * \n\t\t\t * |AB|==0 && |CD|==0\n\t\t\t *     ???A==???C\n\t\t\t * |AB|==0 && |CD|!=0\n\t\t\t *     ACxAD==0 && AC.AD<0\n\t\t\t * |AB|!=0\n\t\t\t *     ABxAC*ABxAD<=0\n\t\t\t */\n\t\t\tint xab = xb - xa;\n\t\t\tint yab = yb - ya;\n\t\t\tif (xab != 0 || yab != 0) {\n\t\t\t\tint xac = xc - xa;\n\t\t\t\tint yac = yc - ya;\n\t\t\t\tint xad = xd - xa;\n\t\t\t\tint yad = yd - ya;\n\t\t\t\treturn (long)cross(xab, yab, xac, yac) * cross(xab, yab, xad, yad) <= 0;\n\t\t\t} else {\n\t\t\t\tint xcd = xd - xc;\n\t\t\t\tint ycd = yd - yc;\n\t\t\t\tif (xcd != 0 || ycd != 0) {\n\t\t\t\t\tint xac = xc - xa;\n\t\t\t\t\tint yac = yc - ya;\n\t\t\t\t\tint xad = xd - xa;\n\t\t\t\t\tint yad = yd - ya;\n\t\t\t\t\treturn cross(xac, yac, xad, yad) == 0 && dot(xac, yac, xad, yad) < 0;\n\t\t\t\t} else {\n\t\t\t\t\treturn xa == xc && ya == yc;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tstatic boolean lineSegsIntersect(int xa, int ya, int xb, int yb, int xc, int yc, int xd, int yd) {\n\t\t\t/*\n\t\t\t * ??????AB??¨??????CD??¨??????????????????????????????\n\t\t\t * \n\t\t\t * |AB|==0 && |CD|==0\n\t\t\t *     ???A==???C\n\t\t\t * |AB|==0 && |CD|!=0\n\t\t\t *     ACxAD==0 && AC.AD<0\n\t\t\t * |AB|!=0 && |CD|==0\n\t\t\t *     CAxCB==0 && CA.CB<0\n\t\t\t * |AB|!=0 && |CD|!=0\n\t\t\t *     ABxCD==0\n\t\t\t *         ACxAD==0 && (AB.AC>=0 || AB.AD>=0) && (BA.BC>=0 || BA.BD>=0)\n\t\t\t *     ABxCD!=0\n\t\t\t *         ABxAC*ABxAD<=0 && CDxCA*CDxCB<=0\n\t\t\t */\n\t\t\tint xab = xb - xa;\n\t\t\tint yab = yb - ya;\n\t\t\tint xcd = xd - xc;\n\t\t\tint ycd = yd - yc;\n\t\t\tif ((xab != 0 || yab != 0) && (xcd != 0 || ycd != 0)) {\n\t\t\t\tint xac = xc - xa;\n\t\t\t\tint yac = yc - ya;\n\t\t\t\tint xad = xd - xa;\n\t\t\t\tint yad = yd - ya;\n\t\t\t\tif (cross(xab, yab, xcd, ycd) != 0) {\n\t\t\t\t\tint xca = -xac;\n\t\t\t\t\tint yca = -yac;\n\t\t\t\t\tint xcb = xb - xc;\n\t\t\t\t\tint ycb = yb - yc;\n\t\t\t\t\treturn ((long)cross(xab, yab, xac, yac) * cross(xab, yab, xad, yad) <= 0)\n\t\t\t\t\t\t\t&& ((long)cross(xcd, ycd, xca, yca) * cross(xcd, ycd, xcb, ycb) <= 0);\n\t\t\t\t} else {\n\t\t\t\t\tint xba = -xab;\n\t\t\t\t\tint yba = -yab;\n\t\t\t\t\tint xbc = xc - xb;\n\t\t\t\t\tint ybc = yc - yb;\n\t\t\t\t\tint xbd = xd - xb;\n\t\t\t\t\tint ybd = yd - yb;\n\t\t\t\t\treturn cross(xac, yac, xad, yad) == 0\n\t\t\t\t\t\t\t&& (dot(xab, yab, xac, yac) >= 0 || dot(xab, yab, xad, yad) >= 0)\n\t\t\t\t\t\t\t&& (dot(xba, yba, xbc, ybc) >= 0 || dot(xba, yba, xbd, ybd) >= 0);\n\t\t\t\t}\n\t\t\t} else if (xab != 0 || yab != 0) {\n\t\t\t\tint xca = xa - xc;\n\t\t\t\tint yca = ya - yc;\n\t\t\t\tint xcb = xb - xc;\n\t\t\t\tint ycb = yb - yc;\n\t\t\t\treturn cross(xca, yca, xcb, ycb) == 0 && dot(xca, yca, xcb, ycb) < 0;\n\t\t\t} else {\n\t\t\t\tif (xcd != 0 || ycd != 0) {\n\t\t\t\t\tint xac = xc - xa;\n\t\t\t\t\tint yac = yc - ya;\n\t\t\t\t\tint xad = xd - xa;\n\t\t\t\t\tint yad = yd - ya;\n\t\t\t\t\treturn cross(xac, yac, xad, yad) == 0 && dot(xac, yac, xad, yad) < 0;\n\t\t\t\t} else {\n\t\t\t\t\treturn xa == xc && ya == yc;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tstatic int ptLineSegDistSq(int xa, int ya, int xb, int yb, int xc, int yc) {\n\t\t\t/*\n\t\t\t * ??????AB??¨???C??¨????????¢\n\t\t\t * \n\t\t\t * |AB|==0\n\t\t\t *     |AC|^2\n\t\t\t * |AB|!=0 && AB.AC<=0\n\t\t\t *     |AC|^2\n\t\t\t * |AB|!=0 && BA.BC<=0\n\t\t\t *     |BC|^2\n\t\t\t * |AB|!=0 && AB.AC>0 && BA.BC>0\n\t\t\t *     |ABxAC|^2\n\t\t\t */\n\t\t\tint xab = xb - xa;\n\t\t\tint yab = yb - ya;\n\t\t\tint xac = xc - xa;\n\t\t\tint yac = yc - ya;\n\t\t\tint xbc = xc - xb;\n\t\t\tint ybc = yc - yb;\n\t\t\tif (dot(xab, yab, xac, yac) <= 0) {\n\t\t\t\treturn sumofsquare(xac, yac);\n\t\t\t} else if (dot(-xab, -yab, xbc, ybc) <= 0) {\n\t\t\t\treturn sumofsquare(xbc, ybc);\n\t\t\t} else {\n\t\t\t\tint tmp = cross(xab, yab, xac, yac);\n\t\t\t\treturn tmp * tmp;\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "\n\nimport java.awt.geom.Line2D;\nimport java.awt.geom.Point2D;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\npublic class Main {\n\n\tpublic static void main(String[] args) throws NumberFormatException, IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\n\t\tint n = Integer.parseInt(br.readLine());\n\n\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tString[] tmpArray = br.readLine().split(\" \");\n\n\t\t\tPoint2D[] points = new Point2D[4];\n\n\t\t\tfor(int j = 0; j < 4; j++){\n\t\t\t\tint x = Integer.parseInt(tmpArray[j*2]);\n\t\t\t\tint y = Integer.parseInt(tmpArray[j*2 + 1]);\n\n\t\t\t\tpoints[j] = new Point2D.Double(x, y);\n\t\t\t}\n\n\t\t\tLine2D[] lines = new Line2D[2];\n\t\t\tfor(int j = 0; j < 2; j++){\n\t\t\t\tlines[j] = new Line2D.Double(points[j*2], points[j*2 + 1]);\n\t\t\t}\n\n\t\t\tdouble result = distance(lines[0], lines[1]);\n\n\t\t\tSystem.out.printf(\"%.8f\\n\", result);\n\t\t}\n\t}\n\n\tstatic double distance(Line2D l1, Line2D l2){\n\t\tif(l1.intersectsLine(l2)){\n\t\t\treturn 0;\n\t\t}\n\n\t\telse {\n\t\t\treturn Math.min(Math.min(l2.ptSegDist(l1.getP1()), l2.ptSegDist(l1.getP2())), Math.min(l1.ptSegDist(l2.getP1()), l1.ptSegDist(l2.getP2())));\n\t\t}\n\t}\n\n}\n\n"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace CSharpSample01\n{\n\n    class Vector2\n    {\n        public double x;\n        public double y;\n\n        public Vector2() { }\n        public Vector2(double x, double y)\n        {\n            this.x = x;\n            this.y = y;\n        }\n\n        //「射影」\n        //点pからベクトルp1p2への射影ベクトルを求める\n        public Vector2 Projection(Vector2 p1, Vector2 p2, Vector2 p)\n        {\n\n            Vector2 hypo = new Vector2(p.x - p1.x, p.y - p1.y);\n\n            Vector2 ground = new Vector2(p2.x - p1.x, p2.y - p1.y);\n\n            Vector2 shadow = new Vector2\n            {\n                x = p1.x + ground.x * (hypo.x * ground.x + hypo.y * ground.y) / (ground.x * ground.x + ground.y * ground.y),\n                y = p1.y + ground.y * (hypo.x * ground.x + hypo.y * ground.y) / (ground.x * ground.x + ground.y * ground.y)\n            };\n\n            return shadow;\n        }\n\n        //内積\n        public double Dot(Vector2 a, Vector2 b)\n        {\n            return a.x * b.x + a.y * b.y;\n        }\n\n        //外積\n        public double Cross(Vector2 a, Vector2 b)\n        {\n            return a.x * b.y - a.y * b.x;\n        }\n\n        //ベクトルの大きさ\n        public double Norm(Vector2 a)\n        {\n            return Math.Sqrt(a.x * a.x + a.y * a.y);\n        }\n\n        //「交差判定」\n        //2つの線分p1p2 s1s2が交差しているかどうかの判定\n        public bool IsCross(Vector2 p1, Vector2 p2, Vector2 s1, Vector2 s2)\n        {\n\n            Vector2 p1p2 = new Vector2(p2.x - p1.x, p2.y - p1.y);\n            Vector2 s1s2 = new Vector2(s2.x - s1.x, s2.y - s1.y);\n            Vector2 p1s1 = new Vector2(s1.x - p1.x, s1.y - p1.y);\n            Vector2 p1s2 = new Vector2(s2.x - p1.x, s2.y - p1.y);\n\n            //p1p2s1s2のうち同一点がある\n            if (p1s1.x == 0 && p1s1.y == 0)\n            {\n                return true;\n            }\n            else if (p1s2.x == 0 && p1s2.y == 0)\n            {\n                return true;\n            }\n\n            double t1;\n            double t2;\n\n            //平行\n            if (Cross(p1p2, s1s2) == 0)\n            {\n                \n                t1 = p1s1.x / p1p2.x;\n                t2 = p1s1.y / p1p2.y;\n\n                if (t1 != t2)\n                {\n                    return false;\n                }\n                if (t1 < 0 || 1 < t1 || t2 < 0 || 1 < t2)\n                {\n                    return false;\n                }\n\n                t1 = p1s2.x / p1p2.x;\n                t2 = p1s2.y / p1p2.y;\n\n                if (t1 != t2)\n                {\n                    return false;\n                }\n                if (t1 < 0 || 1 < t1 || t2 < 0 || 1 < t2)\n                {\n                    return false;\n                }\n\n                return true;\n            }\n\n            //平行でない\n            t2 = Cross(p1s1, p1p2) / Cross(p1p2, s1s2);\n            t1 = Cross(p1s1, s1s2) / Cross(p1p2, s1s2);\n            \n            if (0 <= t1 && t1 <= 1 && 0 <= t2 && t2 <= 1)\n            {\n                return true;\n            }\n            else\n            {\n                return false;\n            }\n\n        }\n\n        //線分p1p2と点sとの距離\n        public double Distance(Vector2 p1, Vector2 p2, Vector2 s)\n        {\n\n            double dis;\n            Vector2 p1s = new Vector2(s.x - p1.x, s.y - p1.y);\n            Vector2 p1p2 = new Vector2(p2.x - p1.x, p2.y - p1.y);\n            Vector2 p2s = new Vector2(s.x - p2.x, s.y - p2.y);\n            Vector2 p2p1 = new Vector2(p1.x - p2.x, p1.y - p2.y);\n\n\n            //内積の正負で確認\n            if (Dot(p1s, p1p2) <= 0)\n            {\n                dis = Norm(p1s);\n            }\n            else if (Dot(p2s, p2p1) <= 0)\n            {\n                dis = Norm(p2s);\n            }\n            else\n            {\n                Vector2 shadow = Projection(p1, p2, s);\n                dis = Norm(new Vector2(s.x - shadow.x, s.y - shadow.y));\n            }\n\n            return dis;\n        }\n\n    }\n\n\n    class Program\n    {\n\n\n        static void Main(string[] args)\n        {\n            int q = int.Parse(Console.ReadLine());\n\n            for (int i = 0; i < q; i++)\n            {\n                double[] data = Console.ReadLine().Split(' ').Select(x => double.Parse(x)).ToArray();\n\n                Vector2 v = new Vector2();\n                Vector2 p1 = new Vector2(data[0], data[1]);\n                Vector2 p2 = new Vector2(data[2], data[3]);\n                Vector2 s1 = new Vector2(data[4], data[5]);\n                Vector2 s2 = new Vector2(data[6], data[7]);\n\n                var list = new List<double>();\n                double ans;\n\n                if (v.IsCross(p1, p2, s1, s2))\n                {\n                    \n                    ans = 0;\n                }\n                else\n                {\n                    list.Add(v.Distance(p1, p2, s1));\n                    list.Add(v.Distance(p1, p2, s2));\n                    list.Add(v.Distance(s1, s2, p1));\n                    list.Add(v.Distance(s1, s2, p2));\n\n                    list.Sort();\n\n                    ans = list.First();\n                }\n\n                Console.WriteLine($\"{ans:f10}\");\n\n            }\n\n        }\n    }\n}\n\n"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Text;\n\nnamespace CGL_2_D_Distance\n{\n\tclass Program\n\t{\n\t\tstatic void Main ( string[] args )\n\t\t{\n\t\t\tint inputCount = int.Parse (Console.ReadLine ());\n\t\t\tStringBuilder output = new StringBuilder (inputCount * 15);\n\n\t\t\tfor (int lp = 0; lp < inputCount; lp++)\n\t\t\t{\n\t\t\t\tint[] inputNum = Array.ConvertAll (Console.ReadLine ().Split (' '), int.Parse);\n\n\t\t\t\tVector2 point1 = new Vector2 (inputNum[0], inputNum[1]);\n\t\t\t\tVector2 point2 = new Vector2 (inputNum[2], inputNum[3]);\n\t\t\t\tVector2 point3 = new Vector2 (inputNum[4], inputNum[5]);\n\t\t\t\tVector2 point4 = new Vector2 (inputNum[6], inputNum[7]);\n\n\t\t\t\tdecimal result = Vector2.Distance (point1, point2, point3, point4);\n\n\t\t\t\toutput.Append (result);\n\t\t\t\toutput.AppendLine ();\n\t\t\t}\n\n\t\t\tConsole.Write (output);\n\t\t}\n\t}\n\n\tclass Vector2\n\t{\n\t\tpublic Vector2 ( decimal x, decimal y )\n\t\t{\n\t\t\tthis.X = x;\n\t\t\tthis.Y = y;\n\t\t}\n\n\t\tpublic decimal X { private set; get; }\n\t\tpublic decimal Y { private set; get; }\n\n\t\tpublic static Vector2 operator + ( Vector2 ob1, Vector2 ob2 )\n\t\t{\n\t\t\treturn new Vector2 (ob1.X + ob2.X, ob1.Y + ob2.Y);\n\t\t}\n\t\tpublic static Vector2 operator - ( Vector2 ob1, Vector2 ob2 )\n\t\t{\n\t\t\treturn new Vector2 (ob1.X - ob2.X, ob1.Y - ob2.Y);\n\t\t}\n\t\tpublic static Vector2 operator * ( Vector2 ob, decimal scalar )\n\t\t{\n\t\t\treturn new Vector2 (ob.X * scalar, ob.Y * scalar);\n\t\t}\n\n\t\tpublic decimal Length ()\n\t\t{\n\t\t\treturn X * X + Y * Y;\n\t\t}\n\n\t\tpublic static decimal DotProduct ( Vector2 line1, Vector2 line2 )\n\t\t{\n\t\t\treturn line1.X * line2.X + line1.Y * line2.Y;\n\t\t}\n\t\tpublic static decimal CrossProduct ( Vector2 line1, Vector2 line2 )\n\t\t{\n\t\t\treturn line1.X * line2.Y - line1.Y * line2.X;\n\t\t}\n\t\tpublic static decimal Sqrt ( decimal number )\n\t\t{\n\t\t\treturn new decimal (Math.Sqrt (decimal.ToDouble (number)));\n\t\t}\n\n\t\tpublic static decimal Distance ( Vector2 point1, Vector2 point2 )\n\t\t{\n\t\t\treturn Sqrt ((point1 - point2).Length ());\n\t\t}\n\n\t\tpublic static decimal DistanceLP ( Vector2 linePoint1, Vector2 linePoint2, Vector2 point )\n\t\t{\n\t\t\treturn Math.Abs (\n\t\t\t\tCrossProduct (linePoint2 - linePoint1, point - linePoint1) / Sqrt ((linePoint2 - linePoint1).Length ())\n\t\t\t\t);\n\t\t}\n\n\t\tpublic static decimal DistanceSP ( Vector2 linePoint1, Vector2 linePoint2, Vector2 point )\n\t\t{\n\t\t\tif (DotProduct (linePoint2 - linePoint1, point - linePoint1) < 0m)\n\t\t\t\treturn Sqrt ((point - linePoint1).Length ());\n\t\t\tif (DotProduct (linePoint1 - linePoint2, point - linePoint2) < 0m)\n\t\t\t\treturn Sqrt ((point - linePoint2).Length ());\n\n\t\t\treturn DistanceLP (linePoint1, linePoint2, point);\n\t\t}\n\n\t\tpublic static decimal Distance ( Vector2 line1Point1, Vector2 line1Point2, Vector2 line2Point1, Vector2 line2Point2 )\n\t\t{\n\t\t\tif (Intersection (line1Point1, line1Point2, line2Point1, line2Point2))\n\t\t\t{\n\t\t\t\treturn 0m;\n\t\t\t}\n\n\t\t\treturn Math.Min (\n\t\t\t\tMath.Min (DistanceSP (line1Point1, line1Point2, line2Point1),\n\t\t\t\tDistanceSP (line1Point1, line1Point2, line2Point2)),\n\n\t\t\t\tMath.Min (DistanceSP (line2Point1, line2Point2, line1Point1),\n\t\t\t\tDistanceSP (line2Point1, line2Point2, line1Point2))\n\t\t\t);\n\t\t}\n\n\t\tpublic const int Counter_Clockwise = 1;\n\t\tpublic const int Clockwise = -1;\n\t\tpublic const int OnlineBack = 2;\n\t\tpublic const int OnlineFront = -2;\n\t\tpublic const int OnSegment = 0;\n\n\t\tpublic static int PointState ( Vector2 point1, Vector2 point2, Vector2 point3 )\n\t\t{\n\t\t\tVector2 line1 = point2 - point1;\n\t\t\tVector2 line2 = point3 - point1;\n\n\t\t\tdecimal crossProduct = CrossProduct (line1, line2);\n\n\t\t\tif (crossProduct > 0m)\n\t\t\t{\n\t\t\t\treturn Counter_Clockwise;\n\t\t\t}\n\t\t\telse if (crossProduct < 0m)\n\t\t\t{\n\t\t\t\treturn Clockwise;\n\t\t\t}\n\t\t\telse if (DotProduct (line1, line2) < 0m)\n\t\t\t{\n\t\t\t\treturn OnlineBack;\n\t\t\t}\n\t\t\telse if (line1.Length () < line2.Length ())\n\t\t\t{\n\t\t\t\treturn OnlineFront;\n\t\t\t}\n\n\t\t\treturn OnSegment;\n\t\t}\n\n\t\tpublic static bool Intersection ( Vector2 line1Point1, Vector2 line1Point2, Vector2 line2Point1, Vector2 line2Point2 )\n\t\t{\n\t\t\tVector2 p1 = line1Point1;\n\t\t\tVector2 p2 = line1Point2;\n\t\t\tVector2 p3 = line2Point1;\n\t\t\tVector2 p4 = line2Point2;\n\n\t\t\treturn (PointState (p1, p2, p3) * PointState (p1, p2, p4) <= 0 &&\n\t\t\t\tPointState (p3, p4, p1) * PointState (p3, p4, p2) <= 0);\n\t\t}\n\t}\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Diagnostics;\nusing Aoj.CGL.Lib;\n\nnamespace Aoj.CGL.Chapter2D\n{\n    class Program\n    {\n        public static void Solve()\n        {\n            int q = int.Parse(Console.ReadLine());\n \n            for (int i = 0; i < q; i++)\n            {\n                int[] input = Array.ConvertAll(Console.ReadLine().Split(' '), int.Parse);\n\n                var seg1 = new Segment(input[0],input[1],input[2],input[3]);\n                var seg2 = new Segment(input[4],input[5],input[6],input[7]);\n\n                var distance = MathUtil.GetDistanceSS(seg1, seg2);\n\n                Console.WriteLine(\"{0:0.0000000000}\",distance);\n            }\n        }\n\n        public static void Main()\n        {\n            // Console.SetIn(new System.IO.StreamReader(\"ComputationalGeometry/Input/02_Segment_Line_D_01.txt\"));\n            // var sw = new Stopwatch();\n            // sw.Start();\n\n            Solve();\n\n            // Console.WriteLine(\"{0}ms\", sw.ElapsedMilliseconds);\n        }\n    }\n}\n\nnamespace Aoj.CGL.Lib\n{\n    using Line = Segment;\n\n    using Point = Vector;\n\n    using Polygon = List<Vector>;\n\n    public struct Segment\n    {\n        private Point _p1;\n        private Point _p2;\n\n        public Point P1 { get { return _p1; } }\n        public Point P2 { get { return _p2; } }\n\n        public Segment(Point p1, Point p2)\n        {\n            _p1 = p1;\n            _p2 = p2;\n        }\n\n        public Segment(double x1, double y1, double x2, double y2)\n        {\n            _p1 = new Point(x1, y1);\n            _p2 = new Point(x2, y2);\n        }\n\n        public override string ToString()\n        {\n            return string.Format(\"P1x:{0},P1y:{1}, P2x:{2},P2y:{3}\", P1.X, P1.Y, P2.X, P2.Y);\n        }\n    }\n\n    public struct Circle\n    {\n        private Point _p;\n        private double _r;\n\n        public Point P { get { return _p; } }\n        public double R { get { return _r; } }\n\n        public Circle(Point p, double r)\n        {\n            _p = p;\n            _r = r;\n        }\n\n        public override string ToString()\n        {\n            return string.Format(\"px:{0},py:{1},r:{2}\", P.X, P.Y, R);\n        }\n    }\n\n    public struct Vector\n    {\n        private double _x;\n        private double _y;\n\n        public double X { get { return _x; } }\n        public double Y { get { return _y; } }\n\n        public Vector(double x, double y)\n        {\n            _x = x;\n            _y = y;\n        }\n\n        public double Norm()\n        {\n            return X * X + Y * Y;\n        }\n\n        public double Abs()\n        {\n            return Math.Sqrt(Norm());\n        }\n\n        public Vector Normalize()\n        {\n            double mag = Abs();\n            return new Vector(X * mag, Y * mag);\n        }\n\n        public static Vector operator +(Vector v1, Vector v2)\n        {\n            return new Vector(v1.X + v2.X, v1.Y + v2.Y);\n        }\n\n        public static Vector operator -(Vector v1, Vector v2)\n        {\n            return new Vector(v1.X - v2.X, v1.Y - v2.Y);\n        }\n\n        public static Vector operator *(Vector v, double k)\n        {\n            return new Vector(v.X * k, v.Y * k);\n        }\n\n        public static Vector operator *(double k, Vector v)\n        {\n            return v * k;\n        }\n\n        public override string ToString()\n        {\n            return string.Format(\"x:{0},y:{1}\", X, Y);\n        }\n    }\n\n    public static class MathUtil\n    {\n        public static double Dot(Vector v1, Vector v2)\n        {\n            return v1.X * v2.X + v1.Y * v2.Y;\n        }\n\n        public static double Cross(Vector v1, Vector v2)\n        {\n            return v1.X * v2.Y - v1.Y * v2.X;\n        }\n\n        public static bool IsOrthogonal(Vector v1, Vector v2)\n        {\n            return Dot(v1, v2) == 0.0;\n        }\n\n        public static bool IsOrthogonal(Point a1, Point a2, Point b1, Point b2)\n        {\n            return IsOrthogonal(a1 - a2, b1 - b2);\n        }\n\n        public static bool IsOrthogonal(Segment s1, Segment s2)\n        {\n            return IsOrthogonal((Vector)(s1.P1 - s1.P2), (Vector)(s2.P1 - s2.P2));\n        }\n\n        public static bool IsParallel(Vector v1, Vector v2)\n        {\n            return Cross(v1, v2) == 0.0;\n        }\n\n        public static bool IsParallel(Point a1, Point a2, Point b1, Point b2)\n        {\n            return IsParallel(a1 - a2, b1 - b2);\n        }\n        public static bool IsParallel(Segment s1, Segment s2)\n        {\n            return IsParallel((Vector)(s1.P1 - s1.P2), (Vector)(s2.P1 - s2.P2));\n        }\n\n        public static Vector Project(Vector v, Vector onNormal)\n        {\n            // mag = |b|cos?? / |a|\n            //     = |a||b|cos?? / |a|^2\n            double mag = Dot(v, onNormal) / onNormal.Norm();\n            return new Vector(onNormal.X * mag, onNormal.Y * mag);\n        }\n\n        public static Point Project(Point p, Segment s)\n        {\n            Vector v = p - s.P1;\n            Vector baseV = s.P2 - s.P1;\n            Vector project = Project(v, baseV);\n            return s.P1 + project;\n        }\n\n        public static Point Reflect(Point p, Segment s)\n        {\n            Point project = Project(p, s);\n            return p + (project - p) * 2.0;\n        }\n\n        // ??????????????????????¨??????? ~ ????¨????????????¢???????????°???\n        public const int OnLineBack = 2;\n        public const int CounterClockwise = 1;\n        public const int OnSegment = 0;\n        public const int Clockwise = -1;\n        public const int OnLineFront = -2;\n\n        /// <summary>\n        /// ??????p0p1??????????????????p0p2??????????¨??????? ~ ????¨?????????????????????????????????????int??§?????????\n        /// </summary>\n        /// <param name=\"p0\"></param>\n        /// <param name=\"p1\"></param>\n        /// <param name=\"p2\"></param>\n        /// <returns></returns>\n        public static int Ccw(Point p0, Point p1, Point p2)\n        {\n            var baseV = p1 - p0;\n            var v = p2 - p0;\n            if (Cross(baseV, v) > 0)\n                return CounterClockwise;\n            else if (Cross(baseV, v) < 0)\n                return Clockwise;\n            else if (Dot(baseV, v) < 0)\n                return OnLineBack;\n            else if (baseV.Norm() < v.Norm())\n                return OnLineFront;\n            return OnSegment;\n        }\n\n        /// <summary>\n        /// ????????????????????´??????????????????????¢?????????????\n        /// http://www5d.biglobe.ne.jp/~tomoya03/shtml/algorithm/Intersection.htm\n        /// </summary>\n        /// <param name=\"p1\"></param>\n        /// <param name=\"p2\"></param>\n        /// <param name=\"p3\"></param>\n        /// <param name=\"p4\"></param>\n        /// <returns></returns>\n        public static bool Intersect(Segment s1, Segment s2)\n        {\n            return Intersect(s1.P1, s1.P2, s2.P1, s2.P2);\n        }\n\n        public static bool Intersect(Point p1, Point p2, Point p3, Point p4)\n        {\n            return (\n                Ccw(p1, p2, p3) * Ccw(p1, p2, p4) <= 0 &&\n                Ccw(p3, p4, p1) * Ccw(p3, p4, p2) <= 0\n            );\n        }\n\n        public static double GetDistancePP(Point p1, Point p2)\n        {\n            return (p1 - p2).Abs();\n        }\n\n        public static double GetDistancePL(Point p, Line l)\n        {\n            var v1 = p - l.P1;\n            var v2 = l.P2 - l.P1;\n\n            var area = Math.Abs(Cross(v1, v2));\n            var bottom = v2.Abs();\n            return area / bottom;\n        }\n\n        public static double GetDistancePS(Point p, Segment s)\n        {\n            // p??¨???????????????????????????????????????????§????90???????????§????????´??????????????¨???????????¢???\n            if (Dot(p - s.P1, s.P2 - s.P1) < 0.0)\n                return GetDistancePP(p, s.P1);\n            if (Dot(p - s.P2, s.P1 - s.P2) < 0.0)\n                return GetDistancePP(p, s.P2);\n\n            // ????????\\??????????????¨??´???????????¢???\n            return GetDistancePL(p, s);\n        }\n        public static double GetDistanceSS(Segment s1, Segment s2)\n        {\n            // ?????????????????????????????¢???0???\n            if (Intersect(s1, s2))\n                return 0.0;\n\n            // ????????\\????????´??????????????????????????¨????????????????????¢?????????????????????????°????????????????\n            return Math.Min(\n                Math.Min(GetDistancePS(s1.P1, s2), GetDistancePS(s1.P2, s2)),\n                Math.Min(GetDistancePS(s2.P1, s1), GetDistancePS(s2.P2, s1))\n            );\n        }\n        public static double GetDistanceLL(Line l1, Line l2)\n        {\n            // ?????????????????????????????¢???0???\n            if (! IsParallel(l1, l2))\n                return 0.0;\n            return GetDistancePL(l1.P1, l2);\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace ConsoleApplication1\n{\n    class Program\n    {\n        static readonly double EPS = 1E-10;\n\n        static void Main(string[] args)\n        {\n            int q = int.Parse(Console.ReadLine());\n\n            StringBuilder sb = new StringBuilder();\n            for (int i = 0; i < q; i++)\n            {\n                double[] input = Array.ConvertAll(Console.ReadLine().Split(' '), double.Parse);\n                Pt a = new Pt(input[0], input[1]);\n                Pt b = new Pt(input[2], input[3]);\n                Pt c = new Pt(input[4], input[5]);\n                Pt d = new Pt(input[6], input[7]);\n\n                Seg s1 = new Seg(a, b);\n                Seg s2 = new Seg(c, d);\n\n                sb.AppendLine(GetDistanceSS(s1, s2).ToString());\n            }\n            Console.Write(sb);\n        }\n\n        static double GetDistanceSS(Seg s1,Seg s2)\n        {\n            if (IsIntersect(s1.p1, s1.p2, s2.p1, s2.p2)) return 0.0;\n            double tempDistS1 = Math.Min(GetDistanceSP(s1, s2.p1), GetDistanceSP(s1, s2.p2));\n            double tempDistS2 = Math.Min(GetDistanceSP(s2, s1.p1), GetDistanceSP(s2, s1.p2));\n            return Math.Min(tempDistS1, tempDistS2);\n        }\n\n        static double GetDistanceSP(Seg s,Pt p)\n        {\n            if ((s.p2 - s.p1).Dot(p - s.p1) < 0.0) return (p - s.p1).Abs;\n            if ((s.p1 - s.p2).Dot(p - s.p2) < 0.0) return (p - s.p2).Abs;\n            return GetDistanceLP(s, p);\n        }\n        \n        static double GetDistanceLP(Seg l,Pt p)\n        {\n            return Math.Abs((l.p2 - l.p1).Cross(p - l.p1) / (l.p2 - l.p1).Abs);\n        }\n\n        static bool IsIntersect(Pt p1, Pt p2, Pt p3, Pt p4)\n        {\n            return CCW(p1, p2, p3) * CCW(p1, p2, p4) <= 0 &&\n                   CCW(p3, p4, p1) * CCW(p3, p4, p2) <= 0;\n        }\n\n        static int CCW(Pt p0, Pt p1, Pt p2)\n        {\n            Pt a = p1 - p0, b = p2 - p0;\n\n            if (a.Cross(b) > EPS) return 1;\n            if (a.Cross(b) < -EPS) return -1;\n            if (a.Dot(b) < -EPS) return 2;\n            if (a.Norm < b.Norm) return -2;\n            return 0;\n        }\n    }\n\n    class Pt : IComparable<Pt>\n    {\n        static readonly double EPS = 1E-10;\n\n        internal double x, y;\n\n        public Pt(double x, double y)\n        {\n            this.x = x;\n            this.y = y;\n        }\n\n        public double Abs { get { return Math.Sqrt(Norm); } }\n        public double Norm { get { return x * x + y * y; } }\n\n        public double Dot(Pt p) { return x * p.x + y * p.y; }\n        public double Cross(Pt p) { return x * p.y - y * p.x; }\n\n        public static Pt operator +(Pt a, Pt b) { return new Pt(a.x + b.x, a.y + b.y); }\n        public static Pt operator -(Pt a, Pt b) { return new Pt(a.x - b.x, a.y - b.y); }\n        public static Pt operator *(Pt p, double d) { return new Pt(p.x * d, p.y * d); }\n        public static Pt operator /(Pt p, double d) { return new Pt(p.x / d, p.y / d); }\n        public static bool operator <(Pt a, Pt b) { return Math.Abs(a.x - b.x) > EPS ? a.x < b.x : a.y < b.y; }\n        public static bool operator >(Pt a, Pt b) { return Math.Abs(a.x - b.x) > EPS ? a.x > b.x : a.y > b.y; }\n        public static bool operator ==(Pt a, Pt b) { return Math.Abs(a.x - b.x) < EPS && Math.Abs(a.y - b.y) < EPS; }\n        public static bool operator !=(Pt a, Pt b) { return Math.Abs(a.x - b.x) >= EPS || Math.Abs(a.y - b.y) >= EPS; }\n\n        public int CompareTo(Pt other)\n        {\n            return x != other.x ? (int)(x - other.x) : (int)(y - other.y);\n        }\n\n        public override bool Equals(object obj)\n        {\n            Pt other = (Pt)obj;\n            return Math.Abs(x - other.x) < EPS && Math.Abs(y - other.y) < EPS;\n        }\n\n        public override int GetHashCode()\n        {\n            return x.GetHashCode() ^ y.GetHashCode();\n        }\n\n        public override string ToString()\n        {\n            return string.Format(\"{0:f10} {1:f10}\", x, y);\n        }\n    }\n\n    class Seg\n    {\n        internal Pt p1, p2;\n\n        public Seg(Pt a, Pt b)\n        {\n            p1 = a;\n            p2 = b;\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\n//using System.Collections.Generic;\n//using System.Linq;\n//using Vector = CGL.Point;\n//using Line = CGL.Segment;\n//using Polygon = System.Collections.Generic.List<CGL.Point>;\n\nnamespace CGL\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var q = scan[0];\n            for (int i = 0; i < q; i++)\n            {\n                var t = scan;\n                var P = new Point[4];\n                for (int j = 0; j < 4; j++)\n                {\n                    P[j] = new Point(t[j * 2], t[j * 2 + 1]);\n                }\n                var s1 = new Segment(P[0], P[1]);\n                var s2 = new Segment(P[2], P[3]);\n                Console.WriteLine(s1.GetDistance(s2));\n            }\n        }\n        static int[] scan { get { return Array.ConvertAll(Console.ReadLine().Split(), int.Parse); } }\n    }\n    \n    struct Point\n    {\n        static readonly double EPS = 1E-10;\n        public double x, y;\n        public Point(double x, double y)\n        {\n            this.x = x;\n            this.y = y;\n        }\n\n        public static Point operator +(Point a, Point b) { return new Point(a.x + b.x, a.y + b.y); }\n        public static Point operator -(Point a, Point b) { return new Point(a.x - b.x, a.y - b.y); }\n        public static Point operator *(double k, Point a) { return new Point(k * a.x, k * a.y); }\n        public static Point operator /(double k, Point a) { return new Point(a.x / k, a.y / k); }\n        \n        public double Abs { get { return Math.Sqrt(Norm); } }  \n        public double Norm { get { return x * x + y * y; } }\n\n        public static bool operator <(Point a, Point b) { return Math.Abs(a.x - b.x) > EPS ? a.x < b.x : a.y < b.y; }\n        public static bool operator >(Point a, Point b) { return Math.Abs(a.x - b.x) > EPS ? a.x > b.x : a.y > b.y; }\n        public static bool operator ==(Point a, Point b) { return Math.Abs(a.x - b.x) < EPS && Math.Abs(a.y - b.y) < EPS; }\n        public static bool operator !=(Point a, Point b) { return Math.Abs(a.x - b.x) >= EPS || Math.Abs(a.y - b.y) >= EPS; }\n\n        public override bool Equals(object p){  return Math.Abs(x - ((Point)p).x) < EPS && Math.Abs(y - ((Point)p).y) < EPS; }\n        public override int GetHashCode(){ return x.GetHashCode() ^ y.GetHashCode(); }\n\n        public double Dot(Point p) { return x * p.x + y * p.y; }\n        public double Cross(Point p) { return x * p.y - y * p.x; }\n        public double GetDistance(Point p) { return (this - p).Abs; }\n\n        public int CCW(Point b)\n        {\n            if (Cross(b) > EPS) return 1;\n            if (Cross(b) < -EPS) return -1;\n            if (Dot(b) < -EPS) return 2;\n            if (Norm < b.Norm) return -2;\n            return 0;\n        }\n    }\n    struct Segment\n    {\n        public Point p1, p2;\n        public Segment(Point p1, Point p2)\n        {\n            this.p1 = p1;\n            this.p2 = p2;\n        }\n        public Point Projection(Point p)\n        {\n            Point b = p2 - p1;\n            double r = b.Dot(p - p1) / b.Norm;\n            return p1 + r * b;\n        }\n        public Point Reflection(Point p)\n        {\n            return p + 2 * (Projection(p) - p);\n        }\n        public double GetD_LP(Point p)\n        {\n            return Math.Abs((p - p1).Cross(p2 - p1) / (p2 - p1).Abs);\n        }\n        public double GetD_SP(Point p)\n        {\n            if ((p - p1).Dot(p2 - p1) < 0) return (p - p1).Abs;\n            if ((p - p2).Dot(p1 - p2) < 0) return (p - p2).Abs;\n            return GetD_LP(p);\n        }\n        public bool Intersect(Segment s)\n        {\n            return (p2 - p1).CCW(s.p1 - p1) * (p2 - p1).CCW(s.p2 - p1) <= 0 &&\n                (s.p2 - s.p1).CCW(p1 - s.p1) * (s.p2 - s.p1).CCW(p2 - s.p1) <= 0;\n        }\n        public double GetDistance(Segment s)\n        {\n            if (this.Intersect(s)) return 0;\n            return Math.Min(Math.Min(GetD_SP(s.p1), GetD_SP(s.p2)), Math.Min(s.GetD_SP(p1), s.GetD_SP(p2)));\n        }\n    }\n    /*struct Circle\n    {\n        public Point c; double r;\n        public Circle(Point c, double r)\n        {\n            this.c = c;\n            this.r = r;\n        }\n\n    }*/\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Text;\n\nnamespace CGL_2_D_Distance\n{\n\tclass Program\n\t{\n\t\tstatic void Main ( string[] args )\n\t\t{\n\t\t\tint inputCount = int.Parse (Console.ReadLine ());\n\t\t\tStringBuilder output = new StringBuilder (inputCount * 10);\n\n\t\t\tfor (int lp = 0; lp < inputCount; lp++)\n\t\t\t{\n\t\t\t\tint[] inputNum = Array.ConvertAll (Console.ReadLine ().Split (' '), int.Parse);\n\n\t\t\t\tVector2 point1 = new Vector2 (inputNum[0], inputNum[1]);\n\t\t\t\tVector2 point2 = new Vector2 (inputNum[2], inputNum[3]);\n\t\t\t\tVector2 point3 = new Vector2 (inputNum[4], inputNum[5]);\n\t\t\t\tVector2 point4 = new Vector2 (inputNum[6], inputNum[7]);\n\n\t\t\t\tdecimal result = Vector2.Distance (point1, point2, point3, point4);\n\n\t\t\t\toutput.Append (result);\n\t\t\t\toutput.AppendLine ();\n\t\t\t}\n\n\t\t\tConsole.Write (output);\n\t\t}\n\t}\n\n\tclass Vector2\n\t{\n\t\tpublic Vector2 ( decimal x, decimal y )\n\t\t{\n\t\t\tthis.X = x;\n\t\t\tthis.Y = y;\n\t\t}\n\n\t\tpublic decimal X { private set; get; }\n\t\tpublic decimal Y { private set; get; }\n\n\t\tpublic static Vector2 operator + ( Vector2 ob1, Vector2 ob2 )\n\t\t{\n\t\t\treturn new Vector2 (ob1.X + ob2.X, ob1.Y + ob2.Y);\n\t\t}\n\t\tpublic static Vector2 operator - ( Vector2 ob1, Vector2 ob2 )\n\t\t{\n\t\t\treturn new Vector2 (ob1.X - ob2.X, ob1.Y - ob2.Y);\n\t\t}\n\t\tpublic static Vector2 operator * ( Vector2 ob, decimal scalar )\n\t\t{\n\t\t\treturn new Vector2 (ob.X * scalar, ob.Y * scalar);\n\t\t}\n\n\t\tpublic decimal Length ()\n\t\t{\n\t\t\treturn X * X + Y * Y;\n\t\t}\n\n\t\tpublic static decimal DotProduct ( Vector2 line1, Vector2 line2 )\n\t\t{\n\t\t\treturn line1.X * line2.X + line1.Y * line2.Y;\n\t\t}\n\t\tpublic static decimal CrossProduct ( Vector2 line1, Vector2 line2 )\n\t\t{\n\t\t\treturn line1.X * line2.Y - line1.Y * line2.X;\n\t\t}\n\t\tpublic static decimal Sqrt ( decimal number )\n\t\t{\n\t\t\tdecimal currentNum = number / 2m;\n\t\t\tdecimal lastNum = 0m;\n\n\t\t\twhile (currentNum != lastNum)\n\t\t\t{\n\t\t\t\tlastNum = currentNum;\n\t\t\t\tcurrentNum = (currentNum + number / currentNum) / 2.0m;\n\t\t\t}\n\n\t\t\treturn currentNum;\n\t\t}\n\n\t\tpublic static decimal Distance ( Vector2 point1, Vector2 point2 )\n\t\t{\n\t\t\treturn Sqrt ((point1 - point2).Length ());\n\t\t}\n\n\t\tpublic static decimal DistanceLP ( Vector2 linePoint1, Vector2 linePoint2, Vector2 point )\n\t\t{\n\t\t\treturn Math.Abs (\n\t\t\t\tCrossProduct (linePoint2 - linePoint1, point - linePoint1) / Sqrt ((linePoint2 - linePoint1).Length ())\n\t\t\t\t);\n\t\t}\n\n\t\tpublic static decimal DistanceSP ( Vector2 linePoint1, Vector2 linePoint2, Vector2 point )\n\t\t{\n\t\t\tif (DotProduct (linePoint2 - linePoint1, point - linePoint1) < 0m)\n\t\t\t\treturn Sqrt ((point - linePoint1).Length ());\n\t\t\tif (DotProduct (linePoint1 - linePoint2, point - linePoint2) < 0m)\n\t\t\t\treturn Sqrt ((point - linePoint2).Length ());\n\n\t\t\treturn DistanceLP (linePoint1, linePoint2, point);\n\t\t}\n\n\t\tpublic static decimal Distance ( Vector2 line1Point1, Vector2 line1Point2, Vector2 line2Point1, Vector2 line2Point2 )\n\t\t{\n\t\t\tif (Intersection (line1Point1, line1Point2, line2Point1, line2Point2))\n\t\t\t{\n\t\t\t\treturn 0m;\n\t\t\t}\n\n\t\t\treturn Math.Min (\n\t\t\t\tMath.Min (DistanceSP (line1Point1, line1Point2, line2Point1),\n\t\t\t\tDistanceSP (line1Point1, line1Point2, line2Point2)),\n\n\t\t\t\tMath.Min (DistanceSP (line2Point1, line2Point2, line1Point1),\n\t\t\t\tDistanceSP (line2Point1, line2Point2, line1Point2))\n\t\t\t);\n\t\t}\n\n\t\tpublic const int Counter_Clockwise = 1;\n\t\tpublic const int Clockwise = -1;\n\t\tpublic const int OnlineBack = 2;\n\t\tpublic const int OnlineFront = -2;\n\t\tpublic const int OnSegment = 0;\n\n\t\tpublic static int PointState ( Vector2 point1, Vector2 point2, Vector2 point3 )\n\t\t{\n\t\t\tVector2 line1 = point2 - point1;\n\t\t\tVector2 line2 = point3 - point1;\n\n\t\t\tdecimal crossProduct = CrossProduct (line1, line2);\n\n\t\t\tif (crossProduct > 0m)\n\t\t\t{\n\t\t\t\treturn Counter_Clockwise;\n\t\t\t}\n\t\t\telse if (crossProduct < 0m)\n\t\t\t{\n\t\t\t\treturn Clockwise;\n\t\t\t}\n\t\t\telse if (DotProduct (line1, line2) < 0m)\n\t\t\t{\n\t\t\t\treturn OnlineBack;\n\t\t\t}\n\t\t\telse if (line1.Length () < line2.Length ())\n\t\t\t{\n\t\t\t\treturn OnlineFront;\n\t\t\t}\n\n\t\t\treturn OnSegment;\n\t\t}\n\n\t\tpublic static bool Intersection ( Vector2 line1Point1, Vector2 line1Point2, Vector2 line2Point1, Vector2 line2Point2 )\n\t\t{\n\t\t\tVector2 p1 = line1Point1;\n\t\t\tVector2 p2 = line1Point2;\n\t\t\tVector2 p3 = line2Point1;\n\t\t\tVector2 p4 = line2Point2;\n\n\t\t\treturn (PointState (p1, p2, p3) * PointState (p1, p2, p4) <= 0 &&\n\t\t\t\tPointState (p3, p4, p1) * PointState (p3, p4, p2) <= 0);\n\t\t}\n\t}\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\nusing System.Collections.Generic;\nusing System.Diagnostics;\n//using System.Numerics;\nusing Enu = System.Linq.Enumerable;\n\npublic class Program\n{\n    public void Solve()\n    {\n        int NQ = Reader.Int();\n\n        for (int q = 0; q < NQ; q++)\n        {\n            var a = new Point(Reader.Int(), Reader.Int());\n            var b = new Point(Reader.Int(), Reader.Int());\n            var c = new Point(Reader.Int(), Reader.Int());\n            var d = new Point(Reader.Int(), Reader.Int());\n            var seg1 = new Segment(a, b);\n            var seg2 = new Segment(c, d);\n            Console.WriteLine(Distance(seg1, seg2));\n        }\n        Console.ReadLine();\n    }\n\n    public double Distance(Point p, Segment seg)\n    {\n        return Math.Min(p.Distance(seg.A), p.Distance(seg.B));\n    }\n\n    public double Distance(Segment seg1, Segment seg2)\n    {\n        if (SegmentIntersect(seg1, seg2)) return 0;\n        return Math.Min(Math.Min(Distance(seg1.A, seg2), Distance(seg1.B, seg2)),\n                        Math.Min(Distance(seg2.A, seg1), Distance(seg2.B, seg1)));\n    }\n\n    bool SegmentIntersect(Segment seg1, Segment seg2)\n    {\n        var c1 = (seg1.B - seg1.A).Det(seg2.A - seg1.A);\n        if (c1 == 0 && (seg1.A - seg2.A).Dot(seg1.B - seg2.A) <= 0) return true;\n        var c2 = (seg1.B - seg1.A).Det(seg2.B - seg1.A);\n        if (c2 == 0 && (seg1.A - seg2.B).Dot(seg1.B - seg2.B) <= 0) return true;\n        var c3 = (seg2.B - seg2.A).Det(seg1.A - seg2.A);\n        if (c3 == 0 && (seg2.A - seg1.A).Dot(seg2.B - seg1.A) <= 0) return true;\n        var c4 = (seg2.B - seg2.A).Det(seg1.B - seg2.A);\n        if (c4 == 0 && (seg2.A - seg1.B).Dot(seg2.B - seg1.B) <= 0) return true;\n        return c1 * c2 < 0 && c3 * c4 < 0;\n    }\n\n    public class Segment\n    {\n        public Point A, B;\n        public Segment(Point a, Point b) { A = a; B = b; }\n    }\n\n    public struct Point : IEquatable<Point>, IComparable<Point>\n    {\n        public static readonly double Eps = 1e-10;\n        public double X, Y;\n\n        public Point(double x, double y) { X = x; Y = y; }\n\n        public static Point operator +(Point a, Point b)\n        {\n            return new Point(Add(a.X, b.X), Add(a.Y, b.Y));\n        }\n        public static Point operator -(Point a, Point b)\n        {\n            return new Point(Add(a.X, -b.X), Add(a.Y, -b.Y));\n        }\n        public static Point operator *(Point p, double d)\n        {\n            return new Point(p.X * d, p.Y * d);\n        }\n        public double Distance(Point b) { return Math.Sqrt((b - this).Dot(b - this)); }\n        public double Dot(Point b) { return Add(X * b.X, Y * b.Y); }\n        public double Det(Point b) { return Add(X * b.Y, -Y * b.X); }\n        public bool Equals(Point b) { return X == b.X && Y == b.Y; }\n        public int CompareTo(Point b) { return X != b.X ? Math.Sign(X - b.X) : Math.Sign(Y - b.Y); }\n        public override int GetHashCode() { return (int)(X * 100000 + Y); }\n        public override string ToString() { return X + \", \" + Y; }\n\n        private static double Add(double a, double b)\n        {\n            if (Math.Abs(a + b) < Eps * (Math.Abs(a) + Math.Abs(b))) return 0;\n            return a + b;\n        }\n    }\n}\n\n\nclass Entry { static void Main() { new Program().Solve(); } }\nclass Reader\n{\n    private static TextReader reader = Console.In;\n    private static readonly char[] separator = { ' ' };\n    private static readonly StringSplitOptions op = StringSplitOptions.RemoveEmptyEntries;\n    private static string[] A = new string[0];\n    private static int i;\n    private static void Init() { A = new string[0]; }\n    public static void Set(TextReader r) { reader = r; Init(); }\n    public static void Set(string file) { reader = new StreamReader(file); Init(); }\n    public static bool HasNext() { return CheckNext(); }\n    public static string String() { return Next(); }\n    public static int Int() { return int.Parse(Next()); }\n    public static long Long() { return long.Parse(Next()); }\n    public static double Double() { return double.Parse(Next()); }\n    public static int[] IntLine() { return Array.ConvertAll(Split(Line()), int.Parse); }\n    public static int[] IntArray(int N) { return Enu.Range(0, N).Select(i => Int()).ToArray(); }\n    public static int[][] IntTable(int H) { return Enu.Range(0, H).Select(i => IntLine()).ToArray(); }\n    public static string[] StringArray(int N) { return Enu.Range(0, N).Select(i => Next()).ToArray(); }\n    public static string Line() { return reader.ReadLine().Trim(); }\n    private static string[] Split(string s) { return s.Split(separator, op); }\n    private static string Next() { CheckNext(); return A[i++]; }\n    private static bool CheckNext()\n    {\n        if (i < A.Length) return true;\n        string line = reader.ReadLine();\n        if (line == null) return false;\n        if (line == \"\") return CheckNext();\n        A = Split(line);\n        i = 0;\n        return true;\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Linq;\n\nnamespace geometry\n{\n\tpublic class Point{\n\t\tpublic double x, y;\n\t\tpublic Point(){\n\t\t\tthis.x = this.y = 0;\n\t\t}\n\n\t\tpublic Point(double x, double y){\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t}\n\n\t\tpublic static Point operator+(Point p1, Point p2){\n\t\t\treturn new Point (p1.x + p2.x, p1.y + p2.y);\n\t\t}\n\n\t\tpublic static Point operator-(Point p1, Point p2){\n\t\t\treturn new Point (p1.x - p2.x, p1.y - p2.y);\n\t\t}\n\n\t\tpublic static Point operator*(Point p1, double a){\n\t\t\treturn new Point (p1.x * a, p1.y * a);\n\t\t}\n\n\t\tpublic static Point operator/(Point p1, double a){\n\t\t\treturn new Point (p1.x / a, p1.y / a);\n\t\t}\n\n\t\tpublic double norm(){\n\t\t\treturn this.x * this.x + this.y * this.y;\n\t\t}\n\n\t\tpublic double abs(){\n\t\t\treturn Math.Sqrt(norm()); \n\t\t}\n\n\t\tpublic Point Clone(){\n\t\t\tPoint clone = new Point (this.x, this.y);\n\t\t\treturn clone;\n\t\t}\n\t}\n\n\tpublic class Line{\n\t\tpublic Point p1, p2;\n\t\tpublic Line(){\n\t\t\tthis.p1 = new Point ();\n\t\t\tthis.p2 = new Point ();\n\t\t}\n\n\t\tpublic Line(double p1x, double p1y, double p2x, double p2y){\n\t\t\tthis.p1 = new Point(p1x, p1y);\n\t\t\tthis.p2 = new Point(p2x, p2y);\n\t\t}\n\n\t\tpublic Line(Point p1, Point p2){\n\t\t\tthis.p1 = p1.Clone();\n\t\t\tthis.p2 = p2.Clone();\n\t\t}\n\n\t\tpublic Line Clone(){\n\t\t\tLine clone = new Line (this.p1, this.p2);\n\t\t\treturn clone;\n\t\t}\n\t}\n\n\tpublic class Circle{\n\t\tpublic Point c;\n\t\tpublic double r;\n\t\tpublic Circle(){\n\t\t\tthis.c = new Point ();\n\t\t\tthis.r = 0.0;\n\t\t}\n\n\t\tpublic Circle(double cx, double cy, double r){\n\t\t\tthis.c.x = cx;\n\t\t\tthis.c.y = cy;\n\t\t\tthis.r = r;\n\t\t}\n\n\t\tpublic Circle(Point c, double r){\n\t\t\tthis.c = c.Clone();\n\t\t\tthis.r = r;\n\t\t}\n\n\t\tpublic Circle Clone(){\n\t\t\tCircle clone = new Circle (this.c, this.r);\n\t\t\treturn clone;\n\t\t}\n\t}\n\n\tclass MainClass{\n\t\tstatic bool is_equal(double a, double b){\n\t\t\tif (Math.Abs (a - b) < 0.000001) {\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tstatic double dot(Point v1, Point v2){\n\t\t\treturn v1.x * v2.x + v1.y * v2.y;\n\t\t}\n\n\t\tstatic double cross(Point v1, Point v2){\n\t\t\treturn v1.x * v2.y - v1.y * v2.x;\n\t\t}\n\n\t\t// ??´?????????\n\t\tstatic bool is_orthogonal(Line s1, Line s2){\n\t\t\treturn is_equal(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n\t\t}\n\n\t\t// ????????????\n\t\tstatic bool is_parallel(Line s1, Line s2){\n\t\t\treturn is_equal(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n\t\t}\n\n\t\t// ????????????\n\t\tstatic bool is_intersect(Line s1, Line s2){\n\t\t\treturn ccw(s1.p1, s1.p2, s2.p1) * ccw(s1.p1, s1.p2, s2.p2) <= 0 && ccw(s2.p1, s2.p2, s1.p1) * ccw(s2.p1, s2.p2, s1.p2) <= 0;\n\t\t}\n\n\t\t// ?°???±??¢??°\n\t\tstatic Point project(Line s, Point p){\n\t\t\tPoint base_v = s.p2 - s.p1;\n\t\t\tdouble r = dot (p - s.p1, base_v) / base_v.norm ();\n\t\t\treturn s.p1 + base_v * r;\n\t\t}\n\n\t\t// ????°???¢??°\n\t\tstatic Point reflect(Line s, Point p){\n\t\t\treturn p + (project(s, p) - p) * 2;\n\t\t}\n\n\t\t// ???????¨???????\n\t\tstatic int ccw(Point p0, Point p1, Point p2){\n\t\t\tPoint v1 = p1 - p0;\n\t\t\tPoint v2 = p2 - p0;\n\t\t\tif (cross (v1, v2) > 0.000001) {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\tif (cross (v1, v2) < -0.000001) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tif (dot (v1, v2) < -0.000001) {\n\t\t\t\treturn 2;\n\t\t\t}\n\t\t\tif (v1.norm() < v2.norm()) {\n\t\t\t\treturn -2;\n\t\t\t}\n\t\t\treturn 0;\n\t\t}\n\n\t\t// 2??????????????¢????±???????\n\t\tstatic double get_distance_p2p(Point p1, Point p2){\n\t\t\treturn (p2 - p1).abs();\n\t\t}\n\t\t// ??´?????¨???????????¢????±???????\n\t\tstatic double get_distance_l2p(Line l, Point p){\n\t\t\treturn Math.Abs (cross (l.p2 - l.p1, p - l.p1)) / (l.p2 - l.p1).abs ();\n\t\t}\n\n\t\t// ????????¨???????????¢????±???????\n\t\tstatic double get_distance_s2p(Line s, Point p){\n\t\t\tif (dot (s.p2 - s.p1, p - s.p1) < 0.0) {\n\t\t\t\treturn (p - s.p1).abs ();\n\t\t\t} else if (dot (s.p1 - s.p2, p - s.p2) < 0.0) {\n\t\t\t\treturn (p - s.p2).abs ();\n\t\t\t}\n\t\t\treturn get_distance_l2p (s, p);\n\t\t}\n\n\t\t// ????????¨??????????????¢????±???????\n\t\tstatic double get_distance_s2s(Line s1, Line s2){\n\t\t\tif (is_intersect(s1, s2)) {\n\t\t\t\treturn 0.0;\n\t\t\t}\n\t\t\treturn Math.Min (Math.Min (get_distance_s2p (s1, s2.p1), get_distance_s2p (s1, s2.p2)), Math.Min (get_distance_s2p (s2, s1.p1), get_distance_s2p (s2, s1.p2)));\n\t\t}\n\n\t\tstatic double[] input_line(){\n\t\t\tstring[] s = Console.ReadLine().Split(' ');\n\t\t\tdouble[] d = s.Select(i => double.Parse(i)).ToArray();\n\t\t\treturn d;\n\t\t}\n\n\t\t// ?°???±\n\t\tstatic void CGL_1_A(){\n\t\t\tdouble[] d = input_line ();\n\t\t\tLine l = new Line(d[0], d[1], d[2], d[3]);\n\n\t\t\tint q = int.Parse(Console.ReadLine());\n\t\t\tfor (int i = 0; i < q; i++) {\n\t\t\t\tdouble[] p_pos = input_line ();\n\t\t\t\tPoint p1 = new Point (p_pos[0], p_pos[1]);\n\t\t\t\tPoint p2 = project (l, p1);\n\t\t\t\tConsole.WriteLine (\"{0} {1}\", p2.x, p2.y);\n\t\t\t}\n\t\t}\n\n\t\t// ????°?\n\t\tstatic void CGL_1_B(){\n\t\t\tdouble[] d = input_line ();\n\t\t\tLine l = new Line(d[0], d[1], d[2], d[3]);\n\n\t\t\tint q = int.Parse(Console.ReadLine());\n\t\t\tfor (int i = 0; i < q; i++) {\n\t\t\t\tdouble[] p_pos = input_line ();\n\t\t\t\tPoint p1 = new Point (p_pos [0], p_pos [1]);\n\t\t\t\tPoint p2 = reflect (l, p1);\n\t\t\t\tConsole.WriteLine (\"{0} {1}\", p2.x, p2.y);\n\t\t\t}\n\t\t}\n\n\t\t// ???????¨???????\n\t\tstatic void CGL_1_C(){\n\t\t\tdouble[] d = input_line ();\n\t\t\tPoint p0 = new Point (d [0], d [1]);\n\t\t\tPoint p1 = new Point (d [2], d [3]);\n\n\t\t\tint q = int.Parse(Console.ReadLine());\n\t\t\tfor (int i = 0; i < q; i++) {\n\t\t\t\tdouble[] p_pos = input_line ();\n\t\t\t\tPoint p2 = new Point (p_pos [0], p_pos [1]);\n\t\t\t\tstring s;\n\t\t\t\tint c = ccw (p0, p1, p2);\n\t\t\t\tif (c == 1) {\n\t\t\t\t\ts = \"COUNTER_CLOCKWISE\";\n\t\t\t\t} else if (c == -1) {\n\t\t\t\t\ts = \"CLOCKWISE\";\n\t\t\t\t} else if (c == 2) {\n\t\t\t\t\ts = \"ONLINE_BACK\";\n\t\t\t\t} else if (c == -2) {\n\t\t\t\t\ts = \"ONLINE_FRONT\";\n\t\t\t\t} else {\n\t\t\t\t\ts = \"ON_SEGMENT\";\n\t\t\t\t}\n\t\t\t\tConsole.WriteLine (\"{0}\", s);\n\t\t\t}\n\t\t}\n\n\t\t// ??´????????´???/????????????\n\t\tstatic void CGL_2_A(){\n\t\t\tint q = int.Parse(Console.ReadLine());\n\t\t\tfor (int i = 0; i < q; i++) {\n\t\t\t\tdouble[] s_pos = input_line ();\n\t\t\t\tLine s1 = new Line(s_pos[0], s_pos[1], s_pos[2], s_pos[3]);\n\t\t\t\tLine s2 = new Line(s_pos[4], s_pos[5], s_pos[6], s_pos[7]);\n\t\t\t\tif (is_parallel (s1, s2)) {\n\t\t\t\t\tConsole.Write (\"2\\n\");\n\t\t\t\t} else if (is_orthogonal (s1, s2)) {\n\t\t\t\t\tConsole.Write (\"1\\n\");\n\t\t\t\t} else {\n\t\t\t\t\tConsole.Write (\"0\\n\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// ?????????????????????\n\t\tstatic void CGL_2_B(){\n\t\t\tint q = int.Parse(Console.ReadLine());\n\t\t\tfor (int i = 0; i < q; i++) {\n\t\t\t\tdouble[] s_pos = input_line ();\n\t\t\t\tLine s1 = new Line(s_pos[0], s_pos[1], s_pos[2], s_pos[3]);\n\t\t\t\tLine s2 = new Line(s_pos[4], s_pos[5], s_pos[6], s_pos[7]);\n\n\t\t\t\tif (is_intersect (s1, s2)) {\n\t\t\t\t\tConsole.Write (\"1\\n\");\n\t\t\t\t} else {\n\t\t\t\t\tConsole.Write (\"0\\n\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// ?????¢\n\t\tstatic void CGL_2_D(){\n\t\t\tint q = int.Parse(Console.ReadLine());\n\t\t\tfor (int i = 0; i < q; i++) {\n\t\t\t\tdouble[] s_pos = input_line ();\n\t\t\t\tLine s1 = new Line(s_pos[0], s_pos[1], s_pos[2], s_pos[3]);\n\t\t\t\tLine s2 = new Line(s_pos[4], s_pos[5], s_pos[6], s_pos[7]);\n\n\t\t\t\tConsole.Write (\"{0}\\n\", get_distance_s2s(s1, s2));\n\t\t\t}\n\t\t}\n\n\t\tpublic static void Main (string[] args){\n\t\t\t// ?°???±\n\t\t\t//CGL_1_A ();\n\t\t\t// ????°?\n\t\t\t//CGL_1_B ();\n\t\t\t// ???????¨???????\n\t\t\t//CGL_1_C ();\n\t\t\t// ??´????????´???/????????????\n\t\t\t//CGL_2_A ();\n\t\t\t// ?????????????????????\n\t\t\t//CGL_2_B ();\n\t\t\t// ?????¢\n\t\t\tCGL_2_D ();\n\t\t}\n\t}\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\nusing System.Collections.Generic;\nusing System.Diagnostics;\n//using System.Numerics;\nusing Enu = System.Linq.Enumerable;\n\npublic class Program\n{\n    public void Solve()\n    {\n        int NQ = Reader.Int();\n\n        for (int q = 0; q < NQ; q++)\n        {\n            var a = new Point(Reader.Int(), Reader.Int());\n            var b = new Point(Reader.Int(), Reader.Int());\n            var c = new Point(Reader.Int(), Reader.Int());\n            var d = new Point(Reader.Int(), Reader.Int());\n            var seg1 = new Segment(a, b);\n            var seg2 = new Segment(c, d);\n            Console.WriteLine(Distance(seg1, seg2));\n        }\n        Console.ReadLine();\n    }\n\n    public Point Projection(Point p, Segment seg)\n    {\n        Point v = seg.B - seg.A;\n        return seg.A + v * (v.Dot(p - seg.A) / v.Dot(v));\n    }\n\n    public bool OnSegment(Point p, Segment s)\n    {\n        return (s.A - p).Det(s.B - p) == 0 && (s.A - p).Dot(s.B - p) <= 0;\n    }\n    public bool OnSegment(Point p, Point seg1, Point seg2)\n    {\n        return (seg1 - p).Det(seg2 - p) == 0 && (seg1 - p).Dot(seg2 - p) <= 0;\n    }\n\n    public double Distance(Point p, Segment seg)\n    {\n        var q = Projection(p, seg);\n        if (OnSegment(q, seg)) return p.Distance(q);\n        return Math.Min(p.Distance(seg.A), p.Distance(seg.B));\n    }\n\n    public double Distance(Segment seg1, Segment seg2)\n    {\n        if (SegmentIntersect(seg1, seg2)) return 0;\n        return Math.Min(Math.Min(Distance(seg1.A, seg2), Distance(seg1.B, seg2)),\n                        Math.Min(Distance(seg2.A, seg1), Distance(seg2.B, seg1)));\n    }\n\n    bool SegmentIntersect(Segment seg1, Segment seg2)\n    {\n        var c1 = (seg1.B - seg1.A).Det(seg2.A - seg1.A);\n        if (c1 == 0 && (seg1.A - seg2.A).Dot(seg1.B - seg2.A) <= 0) return true;\n        var c2 = (seg1.B - seg1.A).Det(seg2.B - seg1.A);\n        if (c2 == 0 && (seg1.A - seg2.B).Dot(seg1.B - seg2.B) <= 0) return true;\n        var c3 = (seg2.B - seg2.A).Det(seg1.A - seg2.A);\n        if (c3 == 0 && (seg2.A - seg1.A).Dot(seg2.B - seg1.A) <= 0) return true;\n        var c4 = (seg2.B - seg2.A).Det(seg1.B - seg2.A);\n        if (c4 == 0 && (seg2.A - seg1.B).Dot(seg2.B - seg1.B) <= 0) return true;\n        return c1 * c2 < 0 && c3 * c4 < 0;\n    }\n\n    \n    public class Segment\n    {\n        public Point A, B;\n        public Segment(Point a, Point b) { A = a; B = b; }\n    }\n\n    public struct Point : IEquatable<Point>, IComparable<Point>\n    {\n        public static readonly double Eps = 1e-10;\n        public double X, Y;\n\n        public Point(double x, double y) { X = x; Y = y; }\n\n        public static Point operator +(Point a, Point b)\n        {\n            return new Point(Add(a.X, b.X), Add(a.Y, b.Y));\n        }\n        public static Point operator -(Point a, Point b)\n        {\n            return new Point(Add(a.X, -b.X), Add(a.Y, -b.Y));\n        }\n        public static Point operator *(Point p, double d)\n        {\n            return new Point(p.X * d, p.Y * d);\n        }\n        public double Distance(Point b) { return Math.Sqrt((b - this).Dot(b - this)); }\n        public double Dot(Point b) { return Add(X * b.X, Y * b.Y); }\n        public double Det(Point b) { return Add(X * b.Y, -Y * b.X); }\n        public bool Equals(Point b) { return X == b.X && Y == b.Y; }\n        public int CompareTo(Point b) { return X != b.X ? Math.Sign(X - b.X) : Math.Sign(Y - b.Y); }\n        public override int GetHashCode() { return (int)(X * 100000 + Y); }\n        public override string ToString() { return X + \", \" + Y; }\n\n        private static double Add(double a, double b)\n        {\n            if (Math.Abs(a + b) < Eps * (Math.Abs(a) + Math.Abs(b))) return 0;\n            return a + b;\n        }\n    }\n}\n\n\nclass Entry { static void Main() { new Program().Solve(); } }\nclass Reader\n{\n    private static TextReader reader = Console.In;\n    private static readonly char[] separator = { ' ' };\n    private static readonly StringSplitOptions op = StringSplitOptions.RemoveEmptyEntries;\n    private static string[] A = new string[0];\n    private static int i;\n    private static void Init() { A = new string[0]; }\n    public static void Set(TextReader r) { reader = r; Init(); }\n    public static void Set(string file) { reader = new StreamReader(file); Init(); }\n    public static bool HasNext() { return CheckNext(); }\n    public static string String() { return Next(); }\n    public static int Int() { return int.Parse(Next()); }\n    public static long Long() { return long.Parse(Next()); }\n    public static double Double() { return double.Parse(Next()); }\n    public static int[] IntLine() { return Array.ConvertAll(Split(Line()), int.Parse); }\n    public static int[] IntArray(int N) { return Enu.Range(0, N).Select(i => Int()).ToArray(); }\n    public static int[][] IntTable(int H) { return Enu.Range(0, H).Select(i => IntLine()).ToArray(); }\n    public static string[] StringArray(int N) { return Enu.Range(0, N).Select(i => Next()).ToArray(); }\n    public static string Line() { return reader.ReadLine().Trim(); }\n    private static string[] Split(string s) { return s.Split(separator, op); }\n    private static string Next() { CheckNext(); return A[i++]; }\n    private static bool CheckNext()\n    {\n        if (i < A.Length) return true;\n        string line = reader.ReadLine();\n        if (line == null) return false;\n        if (line == \"\") return CheckNext();\n        A = Split(line);\n        i = 0;\n        return true;\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Text;\n\nnamespace CGL_2_D_Distance\n{\n\tclass Program\n\t{\n\t\tstatic void Main ( string[] args )\n\t\t{\n\t\t\tint inputCount = int.Parse (Console.ReadLine ());\n\n\t\t\tfor (int lp = 0; lp < inputCount; lp++)\n\t\t\t{\n\t\t\t\tint[] inputNum = Array.ConvertAll (Console.ReadLine ().Split (' '), int.Parse);\n\n\t\t\t\tVector2 point1 = new Vector2 (inputNum[0], inputNum[1]);\n\t\t\t\tVector2 point2 = new Vector2 (inputNum[2], inputNum[3]);\n\t\t\t\tVector2 point3 = new Vector2 (inputNum[4], inputNum[5]);\n\t\t\t\tVector2 point4 = new Vector2 (inputNum[6], inputNum[7]);\n\n\t\t\t\tdecimal result = Vector2.Distance (point1, point2, point3, point4);\n\n\t\t\t\tConsole.WriteLine (result);\n\t\t\t}\n\n\t\t}\n\t}\n\n\tclass Vector2\n\t{\n\t\tpublic Vector2 ( decimal x, decimal y )\n\t\t{\n\t\t\tthis.X = x;\n\t\t\tthis.Y = y;\n\t\t}\n\n\t\tpublic decimal X { private set; get; }\n\t\tpublic decimal Y { private set; get; }\n\n\t\tpublic static Vector2 operator + ( Vector2 ob1, Vector2 ob2 )\n\t\t{\n\t\t\treturn new Vector2 (ob1.X + ob2.X, ob1.Y + ob2.Y);\n\t\t}\n\t\tpublic static Vector2 operator - ( Vector2 ob1, Vector2 ob2 )\n\t\t{\n\t\t\treturn new Vector2 (ob1.X - ob2.X, ob1.Y - ob2.Y);\n\t\t}\n\t\tpublic static Vector2 operator * ( Vector2 ob, decimal scalar )\n\t\t{\n\t\t\treturn new Vector2 (ob.X * scalar, ob.Y * scalar);\n\t\t}\n\n\t\tpublic decimal Length ()\n\t\t{\n\t\t\treturn X * X + Y * Y;\n\t\t}\n\n\t\tpublic static decimal DotProduct ( Vector2 line1, Vector2 line2 )\n\t\t{\n\t\t\treturn line1.X * line2.X + line1.Y * line2.Y;\n\t\t}\n\t\tpublic static decimal CrossProduct ( Vector2 line1, Vector2 line2 )\n\t\t{\n\t\t\treturn line1.X * line2.Y - line1.Y * line2.X;\n\t\t}\n\t\tpublic static decimal Sqrt ( decimal number )\n\t\t{\n\t\t\tdecimal currentNum = number / 2m;\n\t\t\tdecimal lastNum = 0m;\n\n\t\t\twhile (currentNum != lastNum)\n\t\t\t{\n\t\t\t\tlastNum = currentNum;\n\t\t\t\tcurrentNum = (currentNum + number / currentNum) / 2.0m;\n\t\t\t}\n\n\t\t\treturn currentNum;\n\t\t}\n\n\t\tpublic static decimal Distance ( Vector2 point1, Vector2 point2 )\n\t\t{\n\t\t\treturn Sqrt ((point1 - point2).Length ());\n\t\t}\n\n\t\tpublic static decimal DistanceLP ( Vector2 linePoint1, Vector2 linePoint2, Vector2 point )\n\t\t{\n\t\t\treturn Math.Abs (\n\t\t\t\tCrossProduct (linePoint2 - linePoint1, point - linePoint1) / Sqrt ((linePoint2 - linePoint1).Length ())\n\t\t\t\t);\n\t\t}\n\n\t\tpublic static decimal DistanceSP ( Vector2 linePoint1, Vector2 linePoint2, Vector2 point )\n\t\t{\n\t\t\tif (DotProduct (linePoint2 - linePoint1, point - linePoint1) < 0m)\n\t\t\t\treturn Sqrt ((point - linePoint1).Length ());\n\t\t\tif (DotProduct (linePoint1 - linePoint2, point - linePoint2) < 0m)\n\t\t\t\treturn Sqrt ((point - linePoint2).Length ());\n\n\t\t\treturn DistanceLP (linePoint1, linePoint2, point);\n\t\t}\n\n\t\tpublic static decimal Distance ( Vector2 line1Point1, Vector2 line1Point2, Vector2 line2Point1, Vector2 line2Point2 )\n\t\t{\n\t\t\tif (Intersection (line1Point1, line1Point2, line2Point1, line2Point2))\n\t\t\t{\n\t\t\t\treturn 0m;\n\t\t\t}\n\n\t\t\treturn Math.Min (\n\t\t\t\tMath.Min (DistanceSP (line1Point1, line1Point2, line2Point1),\n\t\t\t\tDistanceSP (line1Point1, line1Point2, line2Point2)),\n\n\t\t\t\tMath.Min (DistanceSP (line2Point1, line2Point2, line1Point1),\n\t\t\t\tDistanceSP (line2Point1, line2Point2, line1Point2))\n\t\t\t);\n\t\t}\n\n\t\tpublic const int Counter_Clockwise = 1;\n\t\tpublic const int Clockwise = -1;\n\t\tpublic const int OnlineBack = 2;\n\t\tpublic const int OnlineFront = -2;\n\t\tpublic const int OnSegment = 0;\n\n\t\tpublic static int PointState ( Vector2 point1, Vector2 point2, Vector2 point3 )\n\t\t{\n\t\t\tVector2 line1 = point2 - point1;\n\t\t\tVector2 line2 = point3 - point1;\n\n\t\t\tdecimal crossProduct = CrossProduct (line1, line2);\n\n\t\t\tif (crossProduct > 0m)\n\t\t\t{\n\t\t\t\treturn Counter_Clockwise;\n\t\t\t}\n\t\t\telse if (crossProduct < 0m)\n\t\t\t{\n\t\t\t\treturn Clockwise;\n\t\t\t}\n\t\t\telse if (DotProduct (line1, line2) < 0m)\n\t\t\t{\n\t\t\t\treturn OnlineBack;\n\t\t\t}\n\t\t\telse if (line1.Length () < line2.Length ())\n\t\t\t{\n\t\t\t\treturn OnlineFront;\n\t\t\t}\n\n\t\t\treturn OnSegment;\n\t\t}\n\n\t\tpublic static bool Intersection ( Vector2 line1Point1, Vector2 line1Point2, Vector2 line2Point1, Vector2 line2Point2 )\n\t\t{\n\t\t\tVector2 p1 = line1Point1;\n\t\t\tVector2 p2 = line1Point2;\n\t\t\tVector2 p3 = line2Point1;\n\t\t\tVector2 p4 = line2Point2;\n\n\t\t\treturn (PointState (p1, p2, p3) * PointState (p1, p2, p4) <= 0 &&\n\t\t\t\tPointState (p3, p4, p1) * PointState (p3, p4, p2) <= 0);\n\t\t}\n\t}\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Text.RegularExpressions;\nusing static System.Console;\nusing static System.Math;\nusing static MyIO;\nusing static MyUtil;\n\nusing static Geometory;\nusing Vector = Geometory.Point;\nusing Line = Geometory.Segment;\n\npublic class D\n{\n\tpublic static void Main() => (new Solver()).Solve();\n}\n\npublic class Solver\n{\n\tpublic void Solve()\n\t{\n\t\tint Q = GetInt();\n\t\tvar ans = new string[Q];\n\t\tfor(int i = 0; i < Q; i++)\n\t\t\tans[i] = solve();\n\n\t\tWriteLine(string.Join(\"\\n\", ans));\n\t}\n\n\tprivate string solve()\n\t{\n\t\tvar p1 = new Point(GetDouble(), GetDouble());\n\t\tvar p2 = new Point(GetDouble(), GetDouble());\n\t\tvar p3 = new Point(GetDouble(), GetDouble());\n\t\tvar p4 = new Point(GetDouble(), GetDouble());\n\t\tvar s1 = new Segment(p1, p2);\n\t\tvar s2 = new Segment(p3, p4);\n\t\treturn $\"{GetDistance(s1, s2):F12}\";\n\t}\n}\n\npublic static class Geometory\n{\n\tprivate const double EPS = 1e-10;\n\tpublic static bool Equals(double a, double b) => Math.Abs(a - b) < EPS;\n\n\tpublic class Point\n\t{\n\t\tpublic double X;\n\t\tpublic double Y;\t\t\n\t\tpublic Point(double x, double y)\n\t\t{\n\t\t\tX = x;\n\t\t\tY = y;\n\t\t}\n\t\n\t\tpublic static Point operator+(Point p, Point q) => new Point(p.X + q.X, p.Y + q.Y);\n\t\tpublic static Point operator-(Point p, Point q) => new Point(p.X - q.X, p.Y - q.Y);\n\t\tpublic static Point operator*(Point p, double a) => new Point(a * p.X, a * p.Y);\n\t\tpublic static Point operator*(double a, Point p) => new Point(a * p.X, a * p.Y);\n\t\tpublic static Point operator/(Point p, double a) => new Point(p.X / a, p.Y / a);\n\t}\n\n\tpublic class Segment\n\t{\n\t\tpublic Point P1;\n\t\tpublic Point P2;\n\t\tpublic Segment(Point p1, Point p2)\n\t\t{\n\t\t\tP1 = p1;\n\t\t\tP2 = p2;\n\t\t}\n\t}\n\n\tpublic static double Abs(Vector a) => Math.Sqrt(Norm(a));\n\tpublic static double Norm(Vector a) => a.X * a.X + a.Y * a.Y;\n\tpublic static double Dot(Vector a, Vector b) => a.X * b.X + a.Y * b.Y;\n\tpublic static double Cross(Vector a, Vector b) => a.X * b.Y - a.Y * b.X;\n\n\tpublic static bool IsOrthogonal(Vector a, Vector b) => Equals(Dot(a, b), 0.0);\n\tpublic static bool IsOrthogonal(Point a1, Point a2, Point b1, Point b2) => IsOrthogonal(a1 - a2, b1 - b2);\n\tpublic static bool IsOrthogonal(Segment s1, Segment s2) => Equals(Dot(s1.P2 - s1.P1, s2.P2 - s2.P1), 0.0);\n\tpublic static bool IsParallel(Vector a, Vector b) => Equals(Cross(a, b), 0.0);\n\tpublic static bool IsParallel(Point a1, Point a2, Point b1, Point b2) => IsParallel(a1 - a2, b1 - b2);\n\tpublic static bool IsParallel(Segment s1, Segment s2) => Equals(Cross(s1.P2 - s1.P1, s2.P2 - s2.P1), 0.0);\n\n\tpublic static Point Project(Segment s, Point p)\n\t{\n\t\tVector b = s.P2 - s.P1;\n\t\tdouble r = Dot(p - s.P1, b) / Norm(b);\n\t\treturn s.P1 + b * r;\n\t}\n\tpublic static Point Reflect(Segment s, Point p) => p + (Project(s, p) - p) * 2.0;\n\n\tpublic static double GetDistance(Point a, Point b) => Abs(a - b);\n\tpublic static double GetDistanceLP(Line l, Point p) => Math.Abs(Cross(l.P2 - l.P1, p - l.P1) / Abs(l.P2 - l.P1));\n\tpublic static double GetDistanceSP(Segment s, Point p)\n\t{\n\t\tif(Dot(s.P2 - s.P1, p - s.P1) < 0.0) return Abs(p - s.P1);\n\t\tif(Dot(s.P1 - s.P2, p - s.P2) < 0.0) return Abs(p - s.P2);\n\t\treturn GetDistanceLP(s, p);\n\t}\n\tpublic static double GetDistance(Segment s1, Segment s2)\n\t{\n\t\tif(Intersect(s1, s2)) return 0.0;\n\t\treturn Math.Min(Math.Min(GetDistanceSP(s1, s2.P1), GetDistanceSP(s1, s2.P2)),\n\t\t                Math.Min(GetDistanceSP(s2, s1.P1), GetDistanceSP(s2, s1.P2)));\n\t}\n\n\tpublic const int COUNTER_CLOCKWISE = 1;\n\tpublic const int CLOCKWISE = -1;\n\tpublic const int ONLINE_BACK = 2;\n\tpublic const int ONLINE_FRONT = -2;\n\tpublic const int ON_SEGMENT = 0;\n\tpublic static int Ccw(Point p0, Point p1, Point p2)\n\t{\n\t\tVector a = p1 - p0;\n\t\tVector b = p2 - p0;\n\t\tif(Cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\t\tif(Cross(a, b) < -EPS) return CLOCKWISE;\n\t\tif(Dot(a, b) < -EPS) return ONLINE_BACK;\n\t\tif(Norm(a) < Norm(b)) return ONLINE_FRONT;\n\t\treturn ON_SEGMENT;\n\t}\n\tpublic static bool Intersect(Point p1, Point p2, Point p3, Point p4)\n\t{\n\t\treturn (Ccw(p1, p2, p3) * Ccw(p1, p2, p4) <= 0 && \n\t\t        Ccw(p3, p4, p1) * Ccw(p3, p4, p2) <= 0);\n\t}\n\tpublic static bool Intersect(Segment s1, Segment s2) => Intersect(s1.P1, s1.P2, s2.P1, s2.P2);\n}\n\npublic static class MyIO\n{\n\tprivate static string[] args = null;\n\tprivate static int num = -1;\n\tprivate static int used = -1;\n\n\tprivate static string getArg()\n\t{\n\t\tif(used == num)\n\t\t{\n\t\t\targs = Console.ReadLine().Split(' ');\n\t\t\tnum = args.Length;\n\t\t\tused = 0;\n\t\t}\n\t\treturn args[used++];\n\t}\n\n\tpublic static int GetInt() => int.Parse(getArg());\n\tpublic static long GetLong() => long.Parse(getArg());\n\tpublic static double GetDouble() => double.Parse(getArg());\n\tpublic static decimal GetDecimal() => decimal.Parse(getArg());\n\tpublic static string GetString() => getArg();\n\tpublic static char GetChar() => getArg()[0];\n\tpublic static int[] GetInts(long N) => Enumerable.Range(0, (int)N).Select(_ => GetInt()).ToArray();\n\tpublic static long[] GetLongs(long N) => Enumerable.Range(0, (int)N).Select(_ => GetLong()).ToArray();\n\tpublic static double[] GetDoubles(long N) => Enumerable.Range(0, (int)N).Select(_ => GetDouble()).ToArray();\n\tpublic static decimal[] GetDecimals(long N) => Enumerable.Range(0, (int)N).Select(_ => GetDecimal()).ToArray();\n\tpublic static string[] GetStrings(long N) => Enumerable.Range(0, (int)N).Select(_ => GetString()).ToArray();\n}\n\npublic static class MyUtil\n{\n\tpublic static void chmax<T>(ref T x, T y) where T : IComparable<T>\n\t{\n\t\tif(x.CompareTo(y) < 0)\n\t\t\tx = y;\n\t}\n\n\tpublic static void chmin<T>(ref T x, T y) where T : IComparable<T>\n\t{\n\t\tif(x.CompareTo(y) > 0)\n\t\t\tx = y;\n\t}\n\n\tpublic static void swap<T>(ref T x, ref T y)\n\t{\n\t\tT tmp = x;\n\t\tx = y;\n\t\ty = tmp;\n\t}\n}\n"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Text;\n\nnamespace CGL_2_D_Distance\n{\n\tclass Program\n\t{\n\t\tstatic void Main ( string[] args )\n\t\t{\n\t\t\tint inputCount = int.Parse (Console.ReadLine ());\n\t\t\tStringBuilder output = new StringBuilder (inputCount * 20);\n\n\t\t\tfor (int lp = 0; lp < inputCount; lp++)\n\t\t\t{\n\t\t\t\tint[] inputNum = Array.ConvertAll (Console.ReadLine ().Split (' '), int.Parse);\n\n\t\t\t\tVector2 point1 = new Vector2 (inputNum[0], inputNum[1]);\n\t\t\t\tVector2 point2 = new Vector2 (inputNum[2], inputNum[3]);\n\t\t\t\tVector2 point3 = new Vector2 (inputNum[4], inputNum[5]);\n\t\t\t\tVector2 point4 = new Vector2 (inputNum[6], inputNum[7]);\n\n\t\t\t\tdecimal result = Vector2.Distance (point1, point2, point3, point4);\n\n\t\t\t\toutput.Append (result);\n\t\t\t\toutput.AppendLine ();\n\t\t\t}\n\n\t\t\tConsole.Write (output);\n\t\t}\n\t}\n\n\tclass Vector2\n\t{\n\t\tpublic Vector2 ( decimal x, decimal y )\n\t\t{\n\t\t\tthis.X = x;\n\t\t\tthis.Y = y;\n\t\t}\n\n\t\tpublic decimal X { private set; get; }\n\t\tpublic decimal Y { private set; get; }\n\n\t\tpublic static Vector2 operator + ( Vector2 ob1, Vector2 ob2 )\n\t\t{\n\t\t\treturn new Vector2 (ob1.X + ob2.X, ob1.Y + ob2.Y);\n\t\t}\n\t\tpublic static Vector2 operator - ( Vector2 ob1, Vector2 ob2 )\n\t\t{\n\t\t\treturn new Vector2 (ob1.X - ob2.X, ob1.Y - ob2.Y);\n\t\t}\n\t\tpublic static Vector2 operator * ( Vector2 ob, decimal scalar )\n\t\t{\n\t\t\treturn new Vector2 (ob.X * scalar, ob.Y * scalar);\n\t\t}\n\n\t\tpublic decimal Length ()\n\t\t{\n\t\t\treturn X * X + Y * Y;\n\t\t}\n\n\t\tpublic static decimal DotProduct ( Vector2 line1, Vector2 line2 )\n\t\t{\n\t\t\treturn line1.X * line2.X + line1.Y * line2.Y;\n\t\t}\n\t\tpublic static decimal CrossProduct ( Vector2 line1, Vector2 line2 )\n\t\t{\n\t\t\treturn line1.X * line2.Y - line1.Y * line2.X;\n\t\t}\n\t\tpublic static decimal Sqrt ( decimal number )\n\t\t{\n\t\t\tdecimal currentNum = number / 2m;\n\t\t\tdecimal lastNum = 0m;\n\n\t\t\twhile (currentNum != lastNum)\n\t\t\t{\n\t\t\t\tlastNum = currentNum;\n\t\t\t\tcurrentNum = (currentNum + number / currentNum) / 2.0m;\n\t\t\t}\n\n\t\t\treturn currentNum;\n\t\t}\n\n\t\tpublic static decimal Distance ( Vector2 point1, Vector2 point2 )\n\t\t{\n\t\t\treturn Sqrt ((point1 - point2).Length ());\n\t\t}\n\n\t\tpublic static decimal DistanceLP ( Vector2 linePoint1, Vector2 linePoint2, Vector2 point )\n\t\t{\n\t\t\treturn Math.Abs (\n\t\t\t\tCrossProduct (linePoint2 - linePoint1, point - linePoint1) / Sqrt ((linePoint2 - linePoint1).Length ())\n\t\t\t\t);\n\t\t}\n\n\t\tpublic static decimal DistanceSP ( Vector2 linePoint1, Vector2 linePoint2, Vector2 point )\n\t\t{\n\t\t\tif (DotProduct (linePoint2 - linePoint1, point - linePoint1) < 0m)\n\t\t\t\treturn Sqrt ((point - linePoint1).Length ());\n\t\t\tif (DotProduct (linePoint1 - linePoint2, point - linePoint2) < 0m)\n\t\t\t\treturn Sqrt ((point - linePoint2).Length ());\n\n\t\t\treturn DistanceLP (linePoint1, linePoint2, point);\n\t\t}\n\n\t\tpublic static decimal Distance ( Vector2 line1Point1, Vector2 line1Point2, Vector2 line2Point1, Vector2 line2Point2 )\n\t\t{\n\t\t\tif (Intersection (line1Point1, line1Point2, line2Point1, line2Point2))\n\t\t\t{\n\t\t\t\treturn 0m;\n\t\t\t}\n\n\t\t\treturn Math.Min (\n\t\t\t\tMath.Min (DistanceSP (line1Point1, line1Point2, line2Point1),\n\t\t\t\tDistanceSP (line1Point1, line1Point2, line2Point2)),\n\n\t\t\t\tMath.Min (DistanceSP (line2Point1, line2Point2, line1Point1),\n\t\t\t\tDistanceSP (line2Point1, line2Point2, line1Point2))\n\t\t\t);\n\t\t}\n\n\t\tpublic const int Counter_Clockwise = 1;\n\t\tpublic const int Clockwise = -1;\n\t\tpublic const int OnlineBack = 2;\n\t\tpublic const int OnlineFront = -2;\n\t\tpublic const int OnSegment = 0;\n\n\t\tpublic static int PointState ( Vector2 point1, Vector2 point2, Vector2 point3 )\n\t\t{\n\t\t\tVector2 line1 = point2 - point1;\n\t\t\tVector2 line2 = point3 - point1;\n\n\t\t\tdecimal crossProduct = CrossProduct (line1, line2);\n\n\t\t\tif (crossProduct > 0m)\n\t\t\t{\n\t\t\t\treturn Counter_Clockwise;\n\t\t\t}\n\t\t\telse if (crossProduct < 0m)\n\t\t\t{\n\t\t\t\treturn Clockwise;\n\t\t\t}\n\t\t\telse if (DotProduct (line1, line2) < 0m)\n\t\t\t{\n\t\t\t\treturn OnlineBack;\n\t\t\t}\n\t\t\telse if (line1.Length () < line2.Length ())\n\t\t\t{\n\t\t\t\treturn OnlineFront;\n\t\t\t}\n\n\t\t\treturn OnSegment;\n\t\t}\n\n\t\tpublic static bool Intersection ( Vector2 line1Point1, Vector2 line1Point2, Vector2 line2Point1, Vector2 line2Point2 )\n\t\t{\n\t\t\tVector2 p1 = line1Point1;\n\t\t\tVector2 p2 = line1Point2;\n\t\t\tVector2 p3 = line2Point1;\n\t\t\tVector2 p4 = line2Point2;\n\n\t\t\treturn (PointState (p1, p2, p3) * PointState (p1, p2, p4) <= 0 &&\n\t\t\t\tPointState (p3, p4, p1) * PointState (p3, p4, p2) <= 0);\n\t\t}\n\t}\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Linq;\nusing System.Collections.Generic;\nusing static System.Console;\nusing System.Text;\nusing System.IO;\n\n\nnamespace AOJ\n{\n    using Vector = Point;\n    using Line = Segment;\n    using Polygon = List<Point>;\n\n    class Consts\n    {\n        public static readonly double EPS = 1e-10;\n    }\n    class Point\n    {\n        double x, y;\n        public double X { get { return this.x; } set { this.x = value; } }\n        public double Y { get { return this.y; } set { this.y = value; } }\n        public Point(double x = 0, double y = 0)\n        {\n            this.x = x;\n            this.y = y;\n        }\n\n        static public Point operator +(Point p1, Point p2) => new Point(p1.x + p2.x, p1.y + p2.y);\n        static public Point operator -(Point p1, Point p2) => new Point(p1.x - p2.x, p1.y - p2.y);\n        static public Point operator *(Point p, double a) => new Point(a * p.x, a * p.y);\n        static public Point operator *(double a, Point p) => p * a;\n        static public Point operator /(Point p, double a) => new Point(p.x / a, p.y / a);\n        static public bool operator <(Point p1, Point p2) => p1.x != p2.x ? p1.x < p2.x : p1.y < p2.y;\n        static public bool operator >(Point p1, Point p2) => p2 < p1;\n\n        static public bool operator ==(Point p1, Point p2) => (p1.x - p2.x) < Consts.EPS && (p1.y - p2.y) < Consts.EPS;\n        static public bool operator !=(Point p1, Point p2) => !(p1 == p2);\n\n        public double abs() => Math.Sqrt(norm());\n        public double norm() => this.x * this.x + this.y * this.y;\n\n        public override bool Equals(object obj)\n        {\n            if ((object)obj == null || this.GetType() != obj.GetType())\n            {\n                return false;\n            }\n            var c = (Point)obj;\n            return this == c;\n        }\n        public override int GetHashCode()\n        {\n            return this.x.GetHashCode() ^ this.y.GetHashCode();\n        }\n    }\n    struct Segment\n    {\n        public Point p1, p2;\n    }\n    class Circle\n    {\n        public Point c;\n        public double r;\n        public Circle(Point c, double r)\n        {\n            this.c = c;\n            this.r = r;\n        }\n    }\n\n    class VecCalc\n    {\n        static bool equals(double a, double b) => Math.Abs(a - b) < Consts.EPS;\n        //内積\n        static public double dot(Vector a, Vector b)\n        {\n            return a.X * b.X + a.Y * b.Y;\n        }\n        //外積\n        static public double cross(Vector a, Vector b)\n        {\n            return a.X * b.Y - a.Y * b.X;\n        }\n        //16.2 直行判定\n        static public bool isOrthogonal(Vector a, Vector b)\n        {\n            return equals(dot(a, b), 0.0);\n        }\n        static public bool isOrthogonal(Point a1, Point a2, Point b1, Point b2)\n        {\n            return isOrthogonal(a1 - a2, b1 - b2);\n        }\n        static public bool isOrthogonal(Segment s1, Segment s2)\n        {\n            return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n        }\n        //16.2 平行判定\n        static public bool isParallel(Vector a, Vector b)\n        {\n            return equals(cross(a, b), 0.0);\n        }\n        static public bool isParallel(Point a1, Point a2, Point b1, Point b2)\n        {\n            return isParallel(a1 - a2, b1 - b2);\n        }\n        static public bool isParallel(Segment s1, Segment s2)\n        {\n            return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n        }\n        //16.3 射影\n        static public Point project(Segment s, Point p)\n        {\n            Vector b = s.p2 - s.p1;\n            double r = dot(p - s.p1, b) / b.norm();\n            return s.p1 + b * r;\n        }\n        //16.4 反射\n        static public Point reflection(Segment s, Point p)\n        {\n            return 2 * project(s, p) - p;\n            //mid = project(s, p) - p;\n            //return mid + mid - p;\n        }\n        //16.5 距離\n        //2点間の距離\n        static public double getDistance(Point a, Point b)\n        {\n            return (a - b).abs();\n        }\n        //直線lと点pの距離\n        static public double getDistanceLP(Line l,Point p)\n        {\n            return Math.Abs(cross(l.p2 - l.p1, p - l.p1) / (l.p2 - l.p1).abs());\n        }\n        //線分sと点pの距離\n        static public double getDistanceSP(Segment s, Point p)\n        {\n            if (dot(s.p2 - s.p1, p - s.p1) < 0.0) return (p - s.p1).abs();\n            if (dot(s.p1 - s.p2, p - s.p2) < 0.0) return (p - s.p2).abs();\n            return getDistanceLP(s, p);\n        }\n        static public double getDistance(Segment s1, Segment s2)\n        {\n            if (intersect(s1, s2)) return 0.0;\n            return Math.Min(\n                    Math.Min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n                    Math.Min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2))\n                );\n        }\n        //16.6 反時計回り\n        static public readonly int COUNTER_CLOCKWISE=1;\n        static public readonly int CLOCKWISE = -1;\n        static public readonly int ONLINE_BACK = 2;\n        static public readonly int ONLINE_FRONT = -2;\n        static public readonly int ON_SEGMENT = 0;\n        static public int ccw(Point p0, Point p1, Point p2)\n        {\n            Vector a = p1 - p0;\n            Vector b = p2 - p0;\n            var dot_ = dot(a, b);\n            var cross_ = cross(a, b);\n            if (Consts.EPS < cross_) return COUNTER_CLOCKWISE;\n            if (cross_ < -Consts.EPS) return CLOCKWISE;\n            if (dot_ < -Consts.EPS) return ONLINE_BACK;\n            if (a.norm() < b.norm()) return ONLINE_FRONT;\n            return ON_SEGMENT;\n        }\n        static public int ccw(Segment s, Point p)\n        {\n            return ccw(s.p1, s.p2, p);\n\n        }\n        //16.7 線分の交差判定\n        static public bool intersect(Point p1, Point p2,Point p3,Point p4)\n        {\n            return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n                ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0\n                );\n        }\n        static public bool intersect(Segment s1, Segment s2)\n        {\n            return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n        }\n    }\n    class Program\n    {\n        static public long[] Sarray() { return ReadLine().Trim().Split().Select(long.Parse).ToArray(); }\n        static public List<long> Slist() { return ReadLine().Split().Select(long.Parse).ToList(); }\n\n\n        static void Main(string[] args)\n        {\n            var Q = Sarray()[0];\n            for (var i = 0; i < Q; ++i)\n            {\n                var p0123 = Sarray();\n                var p0 = new Point(p0123[0], p0123[1]);\n                var p1 = new Point(p0123[2], p0123[3]);\n                var p2 = new Point(p0123[4], p0123[5]);\n                var p3 = new Point(p0123[6], p0123[7]);\n\n                var ans = VecCalc.getDistance(new Segment() { p1 = p0, p2 = p1 }, new Segment() { p1 = p2, p2 = p3 });\n                WriteLine(ans);\n            }\n        }\n    }\n}\n"
  },
  {
    "language": "JavaScript",
    "code": "// Vector2d\nvar Vector2D = class Vector2D {\n\tconstructor(x,y){\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t}\n}\n\nVector2D.prototype.Init = function(x,y){\n\tthis.x = x;\n\tthis.y = y;\n}\n\n/*\n * v: Vector2D\n */\nfunction rotateVector90(v){\n\tvar r = new Vector2D();\n\tr.x = -v.y;\n\tr.y = v.x;\n\treturn r;\n}\n\n/*\n * get degree to radian return radian\n */\nfunction getDegreeToRadian(degree){\n\tvar pi = 3.14159265358979323846;\n\treturn degree * pi / 180;\n}\n\n/*\n * vec:Vector2D return Vector2D\n */\nfunction getRotateVector(vec,degree){\n\tvar radian = getDegreeToRadian(degree);\n\n\tvar sin = Math.sin(radian);\n\tvar cos = Math.cos(radian);\n\n\tvar r = new Vector2D();\n\tr.x = vec.x * cos - vec.y * sin;\n\tr.y = vec.x * sin + vec.y * cos;\n\n\treturn r;\n}\n\nfunction isEqualVectors(a,b){\n\treturn equalFloats(a.x - b.x,0) && equalFloats(a.y - b.y,0);\n}\n\n/**\n * vec:Vector2D\n * \n * return unitVector\n */\nfunction getUnitVector(vec){\n\tvar length = getVectorLength2D(vec);\n\tif(length > 0){\n\t\treturn getDivideVector(vec,length);\n\t}\n\treturn vec;\n}\n\n/**\n * return vector length\n * \n * vec:Vector2D\n */\nfunction getVectorLength2D(vec){\n\treturn Math.sqrt((vec.x * vec.x) + (vec.y * vec.y));\n}\n\nfunction getDivideVector(vec2D,length){\n\tvec2D.x = vec2D.x / length;\n\tvec2D.y = vec2D.y / length;\n\treturn vec2D;\n}\n\nfunction equalFloats(a,b){\n\tvar threshold = 1 / 8192;\n\treturn Math.abs(a - b) < threshold;\n}\n\nfunction isParallelVector(vectorA,vectorB){\n\tvar na = rotateVector90(vectorA);\n\treturn equalFloats(0,dotProduct2D(na,vectorB));\n}\n\nfunction isVerticalVector(vectorA,vectorB){\n\treturn equalFloats(0,dotProduct2D(vectorA,vectorB));\n}\n\nfunction subtractVector(vecA,vecB){\n\tvar vec = new Vector2D();\n\tvec.x = vecA.x - vecB.x;\n\tvec.y = vecA.y - vecB.y;\n\treturn vec;\n}\n\nfunction dotProduct2D(vecA,vecB){\n    var dot = vecA.x * vecB.x + vecA.y * vecB.y;\n    //console.log(dot);\n\treturn vecA.x * vecB.x + vecA.y * vecB.y;\n}\n\n/**\n * 外積\n * \n * @param vecA\n * @param vecB\n * @returns\n */\nfunction getCross(vecA,vecB){\n\treturn vecA.x * vecB.y - vecA.y * vecB.x;\n}\n\n/**\n * line segment\n * \n * point1:Vector2D point2:Vector2D\n */\nvar LineSegment2D = class LineSegment2D {\n\tconstructor(point1,point2){\n\t\tthis.point1 = point1;\n\t\tthis.point2 = point2;\n\t}\n}\n\nLineSegment2D.prototype.Init = function(point1,point2){\n\tthis.point1 = point1;\n\tthis.point2 = point2;\n}\n\nfunction onOneSide(axis,segment){\n\tvar d1 = new Vector2D();\n\td1 = subtractVector(segment.point1,axis.base);\n\n\tvar d2 = new Vector2D();\n\td2 = subtractVector(segment.point2,axis.base);\n\n\tvar n = new Vector2D();\n\tn = rotateVector90(axis.direction);\n\n\t// 同じ方向だということを返す\n\treturn dotProduct2D(n,d1) * dotProduct2D(n,d2) > 0;\n}\n\nfunction overLapping(minA,maxA,minB,maxB){\n\treturn minB <= maxA && minA <= maxB;\n}\n\nfunction isSegmentsCollide(segment1,segment2){\n\t// 線分の方向をチェックするためのベクトル\n\tvar axisA = new Line();\n\tvar axisB = new Line();\n\n\t// 線分1のベクトルに対して、線分2が片側にあるかチェック\n\taxisA.base = segment1.point1;\n\taxisA.direction = subtractVector(segment1.point2,segment1.point1);\n\n\tif(onOneSide(axisA,segment2)){\n\t\treturn false;\n\t}\n\n\t// 同じく\n\taxisB.base = segment2.point1;\n\taxisB.direction = subtractVector(segment2.point2,segment2.point1);\n\n\tif(onOneSide(axisB,segment1)){\n\t\treturn false;\n\t}\n\n\t// 同じベクトルをもつケース\n\tif(isParallelVector(axisA.direction,axisB.direction)){\n\t\tvar rangeA = getProjectSegment(segment1,axisA.direction);\n\t\tvar rangeB = getProjectSegment(segment2,axisA.direction);\n\n\t\t// 重なっているか\n\t\treturn isOverLappingRanges(rangeA,rangeB);\n\t}\n\telse{\n\t\treturn true;\n\t}\n}\n\n/*\n * Line Object\n */\nfunction Line(){\n\t// vector2D\n\tthis.base;\n\t// vector2D\n\tthis.direction\n}\n\nLine.prototype.Init = function(base,direction,color){\n\tthis.base = base;\n\tthis.direction = direction;\n}\n\n/**\n * Range\n */\nvar Range = class Range {\n\tconstructor(min,max){\n\t\tthis.min = min;\n\t\tthis.max = max;\n\t}\n}\n\nfunction getMaxMinRange(range1,range2){\n\tvar range = new Range();\n\trange.min = range1.min < range2.min ? range1.min : range2.min;\n\trange.max = range1.max < range2.max ? range2.max : range1.max;\n\treturn range;\n}\n\nfunction getSortRange(range){\n\tvar sorted = new Range(range.min,range.max);\n\tif(range.min > range.max){\n\t\tsorted.min = range.max;\n\t\tsorted.max = range.min;\n\t}\n\treturn sorted;\n}\n\nfunction getNegateVector(vector){\n\tvector.x = -vector.x;\n\tvector.y = -vector.y;\n\treturn vector;\n}\n\nfunction getAddVector(vecA,vecB){\n\treturn new Vector2D(vecA.x + vecB.x,vecA.y + vecB.y);\n}\n\n/**\n * segment:segment onto:Vector2D\n * \n * return Range\n */\nfunction getProjectSegment(segment,onto){\n\tvar ontoUnitVec = getUnitVector(onto);\n\n\tvar range = new Range();\n\trange.min = dotProduct2D(ontoUnitVec,segment.point1);\n\trange.max = dotProduct2D(ontoUnitVec,segment.point2);\n\n\trange = getSortRange(range);\n\treturn range;\n}\n\nfunction isOverLappingRanges(range1,range2){\n\treturn overLapping(range1.min,range1.max,range2.min,range2.max);\n}\n\nfunction projectVector(project,onto){\n\tvar d = dotProduct2D(onto,onto);\n\tif(0 < d){\n\t    var dp = dotProduct2D(project,onto);\n\t    return multiplyVector(onto,dp / d);\n\t}\n\treturn onto;\n}\n\nfunction getNorm(vec){\n\treturn vec.x * vec.x + vec.y * vec.y;\n}\n\nfunction getVec2DLength(vec){\n\treturn Math.sqrt(getNorm(vec));\n}\n\n\n/**\n * point class\n */\nvar Point2D = class Point2D {\n\tconstructor(x,y){\n\t\tthis.x = x;\n\t\tthis.y = y;\n\n\t}\n}\n\nfunction addPoint(point1,point2){\n\treturn new Point2D(point1.x + point2.x,point1.y + point2.y);\n}\n\nfunction subtractPoint(point1,point2){\n\treturn new Point2D(point1.x - point2.x,point1.y - point2.y);\n}\n\nfunction multiplyPoint(point,scalar){\n\treturn new Point2D(point.x * scalar,point.y * scalar);\n}\n\n/**\n * segment : LineSegment2D\n * point : Point\n */\nfunction getProjectPoint(segment,point){\n\tvar vec1 = new Vector2D(segment.point2.x - segment.point1.x,segment.point2.y - segment.point1.y);\n\tvar vec2 = new Vector2D(point.x - segment.point1.x,point.y - segment.point1.y);\n\tvar rate = dotProduct2D(vec2,vec1) / getNorm(vec1);\n\tvar vec3 = multiplyVector(vec1,rate);\n\tvar project = new Point2D(segment.point1.x + vec3.x,segment.point1.y + vec3.y);\n\treturn project; \n}\n\nfunction getReflectionPoint(segment,point){\n\tvar projection = getProjectPoint(segment,point);\n\t// pから射影点までのベクトル\n\tvar vec = subtractPoint(projection,point);\n\t// 2倍したものが射影点になる\n\tvar refrectionPoint = multiplyPoint(vec,2);\n\t// 始点を足す\n\treturn addPoint(refrectionPoint,point);\n}\n\n/**\n * \n * @param segment1\n * @param segment2\n * @returns point\n */\nfunction getCrossPoint(segment1,segment2){\n\t// 基準となる線を決める\n\tvar baseVector = new Vector2D(segment2.point2.x - segment2.point1.x,segment2.point2.y - segment2.point1.y);\n\tvar d1Vec = new Vector2D(segment1.point1.x - segment2.point1.x,segment1.point1.y - segment2.point1.y);\n\tvar d2Vec = new Vector2D(segment1.point2.x - segment2.point1.x,segment1.point2.y - segment2.point1.y);\n\tvar d1 = Math.abs(getCross(baseVector,d1Vec));\n\tvar d2 = Math.abs(getCross(baseVector,d2Vec));\n\tvar t = d1 / (d1 + d2);\n\tvar x = segment1.point1.x + (segment1.point2.x - segment1.point1.x) * t;\n\tvar y = segment1.point1.y + (segment1.point2.y - segment1.point1.y) * t;\n\treturn new Point2D(x,y);\n}\n\nfunction multiplyVector(vec,scalar){\n\tvar temp = new Vector2D();\n\ttemp.x = vec.x * scalar;\n\ttemp.y = vec.y * scalar;\n\treturn temp;\n}\n\nfunction clampOnRange(x,min,max){\n\tif(x < min){\n\t\treturn min;\n\t}else if(x > max){\n\t\treturn max;\n\t}else{\n\t\treturn x;\n\t}\n}\n\n/**\n * 直線と点との距離\n */\nfunction getDistanceLinePoint(line,point){\n\tvar vec1 = new Vector2D(line.point2.x - line.point1.x,line.point2.y - line.point1.y);\n\tvar vec2 = new Vector2D(point.x - line.point1.x,point.y - line.point1.y);\n\treturn Math.abs(getCross(vec1,vec2) / getVec2DLength(vec1)); \n}\n\n/**\n * 線分と点との距離を求める\n */\nfunction getDistanceSegmentPoint(segment,point){    \n\t// ベクトルp2 - p1とベクトルp - p1がなす角θが90どより大きい場合(-90より小さい場合)\n\t// dは点pと点p1の距離になる\n\tif(dotProduct2D(subtractPoint(segment.point2,segment.point1),subtractPoint(point,segment.point1)) < 0){\n\t\treturn getVec2DLength(subtractPoint(point,segment.point1));\n\t}\n\t// ベクトルp1 - p2とベクトルp - p2がなす角θが90どより大きい場合(-90より小さい場合)\n\t// dは点pと点p2の距離になる\n\tif(dotProduct2D(subtractPoint(segment.point1,segment.point2),subtractPoint(point,segment.point2)) < 0){\n\t\treturn getVec2DLength(subtractPoint(point,segment.point2));\n\t}\n\t// それ以外はdは点pと直線p1p2の距離になる\n\treturn getDistanceLinePoint(segment,point);\n}\n\n/**\n * 線分と線分との距離を求める\n */\nfunction getSegmentDistance(segment1,segment2){\n\t// 交差していた場合距離は0になる\n\tif(isSegmentsCollide(segment1,segment2)){\n\t\treturn 0;\n\t}\n\treturn Math.min(Math.min(getDistanceSegmentPoint(segment1,segment2.point1),getDistanceSegmentPoint(segment1,segment2.point2)),\n\t\t\tMath.min(getDistanceSegmentPoint(segment2,segment1.point1),getDistanceSegmentPoint(segment2,segment1.point2)));\n}\n\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\n//var input = require('fs').readFileSync('input.txt', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\t\n// 消す\nArr.shift();\n\nArr.forEach(function(v){\n   var nums = v.split(\" \").map(Number);\n   var segment1 = new LineSegment2D(new Vector2D(nums[0],nums[1]),new Vector2D(nums[2],nums[3]));\n   var segment2 = new LineSegment2D(new Vector2D(nums[4],nums[5]),new Vector2D(nums[6],nums[7])); \n   var distance = getSegmentDistance(segment1,segment2);\n   console.log(distance.toFixed(10));\n});\n"
  },
  {
    "language": "Ruby",
    "code": "def is_intersection(x0, y0, x1, y1, x2, y2, x3, y3)\n  if x0 < x1 && ((x2 < x0 && x3 < x0) || (x1 < x2 && x1 < x3))\n    return false\n  elsif x1 <= x0 && ((x2 < x1 && x3 < x1) || (x0 < x2 && x0 < x3))\n    return false\n  elsif y0 < y1 && ((y2 < y0 && y3 < y0) || (y1 < y2 && y1 < y3))\n    return false\n  elsif y1 <= y0 && ((y2 < y1 && y3 < y1) || (y0 < y2 && y0 < y3))\n    return false\n  else\n    t0 = (x0-x1) * (y2-y0) + (y0-y1) * (x0-x2)\n    t1 = (x0-x1) * (y3-y0) + (y0-y1) * (x0-x3)\n    t2 = (x2-x3) * (y0-y2) + (y2-y3) * (x2-x0)\n    t3 = (x2-x3) * (y1-y2) + (y2-y3) * (x2-x1)\n    if t0 * t1 <= 0 && t2 * t3 <= 0\n      return true\n    else\n      return true\n    end\n  end\nend\n\ndef distance(x0, y0, x1, y1, qx, qy)\n  v0 = [x1 - x0, y1 - y0]\n  v1 = [qx - x0, qy - y0]\n  inner_product = v0[0]*v1[0]+v0[1]*v1[1]\n  if inner_product <= 0\n    return Math.sqrt(v1[0]*v1[0]+v1[1]*v1[1])\n  elsif inner_product < v0[0]*v0[0]+v0[1]*v0[1]\n    d22 = inner_product * inner_product / (v0[0]*v0[0]+v0[1]*v0[1])\n    return Math.sqrt(v1[0]*v1[0]+v1[1]*v1[1] - d22)\n  else\n    v1 = [qx - x1, qy - y1]\n    return Math.sqrt(v1[0]*v1[0]+v1[1]*v1[1])\n  end\nend\n\nq = gets.to_i\nq.times{\n  x0, y0, x1, y1, x2, y2, x3, y3 = gets.split.map(&:to_i)\n  if is_intersection(x0, y0, x1, y1, x2, y2, x3, y3)\n    puts 0.0\n  else\n    puts [distance(x0, y0, x1, y1, x2, y2), distance(x0, y0, x1, y1, x3, y3), distance(x2, y2, x3, y3, x0, y0), distance(x2, y2, x3, y3, x1, y1)].min\n  end\n}"
  },
  {
    "language": "Ruby",
    "code": "require 'matrix'\nq = gets.to_i\n\nclass Segment\n  attr_accessor :p1, :p2\n  def initialize(p1, p2)\n    @p1 = p1\n    @p2 = p2\n  end\nend\n\ndef get_distance_sp(s, p)\n  return (s.p1 - p).norm if (s.p2 - s.p1).inner_product(p - s.p1)\n  return (s.p2 - p).norm if (s.p1 - s.p2).inner_product(p - s.p2)\n  return (s.p2 - s.p1).cross_product(p - s.p1) / (s.p2 - s.p1).norm\nend\n\ndef cross(p1, p2)\n  return p1[0] * p2[1] - p1[1] * p2[0]\nend\n\nq.times do\n  x0, y0, x1, y1, x2, y2, x3, y3 = gets.split.map &:to_i\n  p0 = Vector[ x0, y0, 0 ]\n  p1 = Vector[ x1, y1, 0 ]\n  p2 = Vector[ x2, y2, 0 ]\n  p3 = Vector[ x3, y3, 0 ]\n  s1 = Segment.new(p0, p1)\n  s2 = Segment.new(p2, p3)\n  d = [ get_distance_sp(s1, s2.p1), get_distance_sp(s1, s2.p2), get_distance_sp(s2, s1.p1), get_distance_sp(s2, s1.p2) ].min\n  d = 0 if cross(p1 - p0, p2 - p0) * cross(p1 - p0, p3 - p0) < 0 && cross(p3 - p2, p0 - p2) * cross(p3 - p2, p1 - p2) < 0\n  puts \"%.8f\" % d\nend"
  },
  {
    "language": "Ruby",
    "code": "require 'matrix'\nq = gets.to_i\n\nclass Segment\n  attr_accessor :p1, :p2\n  def initialize(p1, p2)\n    @p1 = p1\n    @p2 = p2\n  end\nend\n\ndef get_distance_sp(s, p)\n  return (s.p1 - p).norm if (s.p2 - s.p1).inner_product(p - s.p1)\n  return (s.p2 - p).norm if (s.p1 - s.p2).inner_product(p - s.p2)\n  return (s.p2 - s.p1).cross_product(p - s.p1) / (s.p2 - s.p1).norm\nend\n\nq.times do\n  x0, y0, x1, y1, x2, y2, x3, y3 = gets.split.map &:to_i\n  p0 = Vector[ x0, y0, 0 ]\n  p1 = Vector[ x1, y1, 0 ]\n  p2 = Vector[ x2, y2, 0 ]\n  p3 = Vector[ x3, y3, 0 ]\n  s1 = Segment.new(p0, p1)\n  s2 = Segment.new(p2, p3)\n  return [ get_distance_sp(s1, s2.p1), get_distance_sp(s1, s2.p2), get_distance_sp(s2, s1.p1), get_distance_sp(s2, s1.p2) ].min\nend"
  },
  {
    "language": "Ruby",
    "code": "def is_intersection(x0, y0, x1, y1, x2, y2, x3, y3)\n  if x0 < x1 && ((x2 < x0 && x3 < x0) || (x1 < x2 && x1 < x3))\n    return false\n  elsif x1 <= x0 && ((x2 < x1 && x3 < x1) || (x0 < x2 && x0 < x3))\n    return false\n  elsif y0 < y1 && ((y2 < y0 && y3 < y0) || (y1 < y2 && y1 < y3))\n    return false\n  elsif y1 <= y0 && ((y2 < y1 && y3 < y1) || (y0 < y2 && y0 < y3))\n    return false\n  else\n    t0 = (x0-x1) * (y2-y0) + (y0-y1) * (x0-x2)\n    t1 = (x0-x1) * (y3-y0) + (y0-y1) * (x0-x3)\n    t2 = (x2-x3) * (y0-y2) + (y2-y3) * (x2-x0)\n    t3 = (x2-x3) * (y1-y2) + (y2-y3) * (x2-x1)\n    if t0 * t1 <= 0 && t2 * t3 <= 0\n      return true\n    else\n      return false\n    end\n  end\nend\n\ndef distance(x0, y0, x1, y1, qx, qy)\n  v0 = [x1 - x0, y1 - y0]\n  v1 = [qx - x0, qy - y0]\n  inner_product = v0[0]*v1[0]+v0[1]*v1[1]\n  if inner_product <= 0\n    return Math.sqrt(v1[0]*v1[0]+v1[1]*v1[1])\n  elsif inner_product < v0[0]*v0[0]+v0[1]*v0[1]\n    d22 = inner_product * inner_product / (v0[0]*v0[0]+v0[1]*v0[1])\n    return Math.sqrt(v1[0]*v1[0]+v1[1]*v1[1] - d22)\n  else\n    v1 = [qx - x1, qy - y1]\n    return Math.sqrt(v1[0]*v1[0]+v1[1]*v1[1])\n  end\nend\n\nq = gets.to_i\nq.times{\n  x0, y0, x1, y1, x2, y2, x3, y3 = gets.split.map(&:to_f)\n  if is_intersection(x0, y0, x1, y1, x2, y2, x3, y3)\n    puts 0.0\n  else\n    p [distance(x0, y0, x1, y1, x2, y2), distance(x0, y0, x1, y1, x3, y3), distance(x2, y2, x3, y3, x0, y0), distance(x2, y2, x3, y3, x1, y1)].min\n  end\n}"
  },
  {
    "language": "Ruby",
    "code": "gets.to_i.times do\n  p0, p1, p2, p3 = gets.split.map(&:to_i).each_slice(2).map {|a, b| a + b * 1i }\n  u, v, w, z = p1 - p0, p3 - p2, p2 - p0, p3 - p0\n  d, c = (u.conj * v).rect\n  if c.zero?\n    if (u.conj * w).imag.zero?\n      ud, wd, zd = [u, w, z].map {|x| (u.conj * x).real }\n      a, b = 0, ud\n      a, b = b, a if b < a\n      if wd < a && zd < a || wd > b && zd > b\n        p [p0, p1].flat_map {|x| [p2, p3].map {|y| (x - y).abs } }.min\n      else\n        p 0\n      end\n    else\n      cs = [p0, p1].flat_map {|x| [p2, p3].map {|y| (x - y).abs } }\n      [[u, p2 - p0], [u, p3 - p0], [v, p0 - p2], [v, p1 - p2]].each do |x, y|\n        k = (x.conj * y).real.to_f / (x.conj * x).real\n        cs << (y - k * x).abs if 0 <= k && k <= 1\n      end\n      p cs.min\n    end\n  else\n    # t, s are such that p0 + t * u = p2 + s * v\n    t = (Complex(*v.rect.reverse!) * w).real.to_f / c\n    s = (Complex(*u.rect.reverse!) * w).real.to_f / c\n    if 0 <= t && t <= 1 && 0 <= s && s <= 1\n      p 0\n    else\n      cs = [p0, p1].flat_map {|x| [p2, p3].map {|y| (x - y).abs } }\n      [[u, p2 - p0], [u, p3 - p0], [v, p0 - p2], [v, p1 - p2]].each do |x, y|\n        k = (x.conj * y).real.to_f / (x.conj * x).real\n        cs << (y - k * x).abs if 0 <= k && k <= 1\n      end\n      p cs.min\n    end\n  end\nend"
  },
  {
    "language": "Go",
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"math\"\n\t\"math/cmplx\"\n\t\"os\"\n\t\"strconv\"\n)\n\nfunc getScanner(fp *os.File) *bufio.Scanner {\n\tscanner := bufio.NewScanner(fp)\n\tscanner.Split(bufio.ScanWords)\n\tscanner.Buffer(make([]byte, 1000005), 1000005)\n\treturn scanner\n}\nfunc getNextString(scanner *bufio.Scanner) string {\n\tscanner.Scan()\n\treturn scanner.Text()\n}\nfunc getNextInt(scanner *bufio.Scanner) int {\n\ti, _ := strconv.Atoi(getNextString(scanner))\n\treturn i\n}\nfunc getNextInt64(scanner *bufio.Scanner) int64 {\n\ti, _ := strconv.ParseInt(getNextString(scanner), 10, 64)\n\treturn i\n}\nfunc getNextUint64(scanner *bufio.Scanner) uint64 {\n\ti, _ := strconv.ParseUint(getNextString(scanner), 10, 64)\n\treturn i\n}\nfunc getNextFloat64(scanner *bufio.Scanner) float64 {\n\ti, _ := strconv.ParseFloat(getNextString(scanner), 64)\n\treturn i\n}\nfunc main() {\n\tfp := os.Stdin\n\twfp := os.Stdout\n\tcnt := 0\n\tif os.Getenv(\"MASPY\") == \"ますピ\" {\n\t\tfp, _ = os.Open(os.Getenv(\"BEET_THE_HARMONY_OF_PERFECT\"))\n\t\tcnt = 2\n\t}\n\tif os.Getenv(\"MASPYPY\") == \"ますピッピ\" {\n\t\twfp, _ = os.Create(os.Getenv(\"NGTKANA_IS_GENIUS10\"))\n\t}\n\tscanner := getScanner(fp)\n\twriter := bufio.NewWriter(wfp)\n\tsolve(scanner, writer)\n\tfor i := 0; i < cnt; i++ {\n\t\tfmt.Fprintln(writer, \"-----------------------------------\")\n\t\tsolve(scanner, writer)\n\t}\n\twriter.Flush()\n}\nfunc solve(scanner *bufio.Scanner, writer *bufio.Writer) {\n\tq := getNextInt(scanner)\n\tfor i := 0; i < q; i++ {\n\t\txx := make([]float64, 4)\n\t\tyy := make([]float64, 4)\n\t\tfor j := 0; j < 4; j++ {\n\t\t\txx[j] = getNextFloat64(scanner)\n\t\t\tyy[j] = getNextFloat64(scanner)\n\t\t}\n\t\tss := makeGrid(4, 4)\n\t\tfor j := 0; j < 4; j++ {\n\t\t\tfor k := 0; k < 4; k++ {\n\t\t\t\tss[j][k] = complex(xx[k]-xx[j], yy[k]-yy[j])\n\t\t\t}\n\t\t}\n\n\t\tif compare(imag(ss[0][2]/ss[0][1])*imag(ss[0][3]/ss[0][1]), 0) == -1 && compare(imag(ss[2][0]/ss[2][3])*imag(ss[2][1]/ss[2][3]), 0) == -1 {\n\t\t\tfmt.Fprintln(writer, fmt.Sprintf(\"%.10f\", 0.0))\n\t\t\tcontinue\n\t\t}\n\n\t\tans := math.MaxFloat64\n\t\t_, th := cmplx.Polar(ss[0][1])\n\t\ts1 := rotate(ss[0][1], -th)\n\t\ts2 := rotate(ss[0][2], -th)\n\t\ts3 := rotate(ss[0][3], -th)\n\t\tif compare(real(s2), 0) == -1 {\n\t\t\tans = math.Min(ans, cmplx.Abs(s2))\n\t\t} else if compare(real(s2), real(s1)) == 1 {\n\t\t\tans = math.Min(ans, cmplx.Abs(s2-s1))\n\t\t} else {\n\t\t\tans = math.Min(ans, math.Abs(imag(s2)))\n\t\t}\n\t\tif compare(real(s3), 0) == -1 {\n\t\t\tans = math.Min(ans, cmplx.Abs(s3))\n\t\t} else if compare(real(s3), real(s1)) == 1 {\n\t\t\tans = math.Min(ans, cmplx.Abs(s3-s1))\n\t\t} else {\n\t\t\tans = math.Min(ans, math.Abs(imag(s3)))\n\t\t}\n\t\t_, th = cmplx.Polar(ss[2][3])\n\t\ts1 = rotate(ss[2][3], -th)\n\t\ts2 = rotate(ss[2][0], -th)\n\t\ts3 = rotate(ss[2][1], -th)\n\t\tif compare(real(s2), 0) == -1 {\n\t\t\tans = math.Min(ans, cmplx.Abs(s2))\n\t\t} else if compare(real(s2), real(s1)) == 1 {\n\t\t\tans = math.Min(ans, cmplx.Abs(s2-s1))\n\t\t} else {\n\t\t\tans = math.Min(ans, math.Abs(imag(s2)))\n\t\t}\n\t\tif compare(real(s3), 0) == -1 {\n\t\t\tans = math.Min(ans, cmplx.Abs(s3))\n\t\t} else if compare(real(s3), real(s1)) == 1 {\n\t\t\tans = math.Min(ans, cmplx.Abs(s3-s1))\n\t\t} else {\n\t\t\tans = math.Min(ans, math.Abs(imag(s3)))\n\t\t}\n\t\tfmt.Fprintln(writer, fmt.Sprintf(\"%.10f\", ans))\n\t}\n}\nfunc makeGrid(h, w int) [][]complex128 {\n\tindex := make([][]complex128, h, h)\n\tdata := make([]complex128, h*w, h*w)\n\tfor i := 0; i < h; i++ {\n\t\tindex[i] = data[i*w : (i+1)*w]\n\t}\n\treturn index\n}\nfunc compare(a, b float64) int {\n\teps := 1e-10\n\tif a-b > eps {\n\t\treturn 1\n\t}\n\tif b-a > eps {\n\t\treturn -1\n\t}\n\treturn 0\n}\nfunc rotate(v complex128, theta float64) complex128 {\n\tr, th := cmplx.Polar(v)\n\tth += theta\n\treturn cmplx.Rect(r, th)\n}\nfunc degToRad(deg float64) float64 {\n\treturn deg * math.Pi / 180.0\n}\nfunc radTodeg(rad float64) float64 {\n\treturn rad * 180.0 / math.Pi\n}\n\n"
  },
  {
    "language": "Go",
    "code": "package main\n\nimport (\n\t\"strings\"\n\t\"fmt\"\n\t\"bufio\"\n\t\"strconv\"\n\t\"os\"\n\t\"math\"\n)\n\n//\nfunc subVector(p1, p2 []float64) []float64 {\n\treturn []float64{\n\t\tp1[0] - p2[0],\n\t\tp1[1] - p2[1],\n\t}\n}\n\n//\nfunc dotVector(p1, p2 []float64) float64 {\n\treturn p1[0]*p2[0] + p1[1]*p2[1]\n}\n\n//\nfunc crossVector(p1, p2 []float64) float64 {\n\treturn p1[0]*p2[1] - p1[1]*p2[0]\n}\n\n//\nfunc absVector(p []float64) float64 {\n\treturn math.Sqrt(p[0]*p[0] + p[1]*p[1])\n}\n\n//\nfunc norrmalize(p []float64) float64 {\n\treturn p[0]*p[0] + p[1]*p[1]\n}\n\n//\n// 1: p1-p2より反時計周り側にp3\n// 2: p1-p2より時計周り側にp3\n// 3: p1-p2直線上、p2の先にp3\n// 4: p1-p2直線上、p1の前にp3\n// 5: p1-p2線分上にp3\nfunc checkClockWise(p1, p2, p3 []float64) int {\n\tp1p2 := subVector(p2, p1)\n\tp1p3 := subVector(p3, p1)\n\tif crossVector(p1p2, p1p3) > 0 {\n\t\treturn 1\n\t} else if crossVector(p1p2, p1p3) < 0 {\n\t\treturn 2\n\t} else if dotVector(p1p2, p1p3) < 0 {\n\t\treturn 4\n\t} else if norrmalize(p1p2) < norrmalize(p1p3) {\n\t\treturn 3\n\t}\n\treturn 5\n}\n\nfunc strSliceToFloat64(strSlice []string) []float64 {\n\tn := len(strSlice)\n\tsliceFloat := make([]float64, n)\n\tfor i := 0; i < n; i++ {\n\t\tv, _ := strconv.Atoi(strSlice[i])\n\t\tsliceFloat[i] = float64(v)\n\t}\n\treturn sliceFloat\n}\n\nfunc projection(p1, p2, p []float64) []float64 {\n\t// p - p1\n\tv1 := []float64{\n\t\tp[0] - p1[0],\n\t\tp[1] - p1[1],\n\t}\n\t// p2 - p1\n\tv2 := []float64{\n\t\tp2[0] - p1[0],\n\t\tp2[1] - p1[1],\n\t}\n\n\tdot := v1[0]*v2[0] + v1[1]*v2[1]\n\t// cross := v1[0]*v2[1] - v1[1]*v2[0]\n\tnormal := v2[0]*v2[0] + v2[1]*v2[1]\n\n\ta := dot / normal\n\n\tresult := []float64{\n\t\tp1[0] + v2[0]*a,\n\t\tp1[1] + v2[1]*a,\n\t}\n\treturn result\n}\n\nfunc reflection(p1, p2, p []float64) []float64 {\n\tprj := projection(p1, p2, p)\n\n\t// p to reflection\n\ttoCrossPoint := []float64{\n\t\t2 * (prj[0] - p[0]),\n\t\t2 * (prj[1] - p[1]),\n\t}\n\n\tresult := []float64{\n\t\tp[0] + toCrossPoint[0],\n\t\tp[1] + toCrossPoint[1],\n\t}\n\n\treturn result\n}\n\n//\nfunc distancePoint(p1, p2 []float64) float64 {\n\treturn absVector(subVector(p2, p1))\n}\n\n//\nfunc distanceToStraightLine(p1, p2, p []float64) float64 {\n\tv1 := subVector(p, p1)\n\tv2 := subVector(p2, p1)\n\treturn math.Abs(crossVector(v1, v2)) / absVector(v2)\n}\n\n//\nfunc distanceToLineSegment(p1, p2, p []float64) float64 {\n\tv1 := subVector(p1, p2)\n\tv2 := subVector(p2, p1)\n\n\tif dotVector(subVector(p, p1), v2) <= 0 {\n\t\treturn distancePoint(p1, p)\n\t} else if dotVector(subVector(p, p2), v1) <= 0 {\n\t\treturn distancePoint(p2, p)\n\t}\n\treturn distanceToStraightLine(p1, p2, p)\n}\n\n//\nfunc distanceLineSegment(a1, a2, b1, b2 []float64) float64 {\n\tif isInterSect(a1, a2, b1, b2) {\n\t\treturn 0.0\n\t}\n\tresult := distanceToLineSegment(a1, a2, b1)\n\tresult = math.Min(result, distanceToLineSegment(a1, a2, b2))\n\tresult = math.Min(result, distanceToLineSegment(b1, b2, a1))\n\tresult = math.Min(result, distanceToLineSegment(b1, b2, a2))\n\treturn result\n}\n\n//\nfunc isInterSect(a1, a2, b1, b2 []float64) bool {\n\tc1 := checkClockWise(a1, a2, b1)\n\tc2 := checkClockWise(a1, a2, b2)\n\n\tc3 := checkClockWise(b1, b2, a1)\n\tc4 := checkClockWise(b1, b2, a2)\n\n\tconv := func(v int) int {\n\t\tif v == 2 {\n\t\t\treturn -1\n\t\t} else if v == 5 {\n\t\t\treturn 0\n\t\t} else if v == 4 {\n\t\t\treturn -1\n\t\t}\n\t\treturn v\n\t}\n\n\tc1 = conv(c1)\n\tc2 = conv(c2)\n\tc3 = conv(c3)\n\tc4 = conv(c4)\n\n\tisInterSect := (c1*c2) <= 0 && (c3*c4) <= 0\n\treturn isInterSect\n}\n\n// solve\nfunc solve(sc *bufio.Scanner) {\n\tsc.Scan()\n\tn, _ := strconv.Atoi(sc.Text())\n\n\tfor i := 0; i < n; i++ {\n\t\tsc.Scan()\n\t\tslice := strSliceToFloat64(strings.Split(sc.Text(), \" \"))\n\n\t\tp1 := []float64{slice[0], slice[1]}\n\t\tp2 := []float64{slice[2], slice[3]}\n\t\tp3 := []float64{slice[4], slice[5]}\n\t\tp4 := []float64{slice[6], slice[7]}\n\n\t\tresult := distanceLineSegment(p1, p2, p3, p4)\n\n\t\tfmt.Printf(\"%.10f\\n\", result)\n\t}\n}\n\n// main\nfunc main() {\n\tsolve(bufio.NewScanner(os.Stdin))\n}\n\n"
  },
  {
    "language": "OCaml",
    "code": "module Point = struct\n\n  type t = { x : float; y : float }\n\n  let make x y = { x; y }\n\n  let equal_p a b = abs_float (a.x -. b.x) < 1e-10 && abs_float (a.y -. b.y) < 1e-10\n\n  let sum a b = { x = a.x +. b.x; y = a.y +. b.y }\n\n  let diff a b = { x = a.x -. b.x; y = a.y -. b.y }\n\n  let multi p k = { x = p.x *. k; y = p.y *. k }\n\n  let div p k = { x = p.x /. k; y = p.y /. k }\n\n  let norm p = p.x *. p.x +. p.y *. p.y\n\n  let abs p = norm p |> sqrt\n\n  let dot a b = a.x *. b.x +. a.y *. b.y\n\n  let cross a b = a.x *. b.y -. a.y *. b.x\n\n  let project p1 p2 p =\n    let base = diff p2 p1 in\n    dot (diff p p1) base /. norm base |> multi base |> sum p1\n\n  let reflect p1 p2 p = multi (diff (project p1 p2 p) p) 2. |> sum p\n\n  let orthogonal_p (p0, p1) (p2, p3) = dot (diff p0 p1) (diff p2 p3) = 0.\n\n  let parallel_p (p0, p1) (p2, p3) = cross (diff p0 p1) (diff p2 p3) = 0.\n\n  let ccw p0 p1 p2 =\n    let eps = 1e-10 in\n    let a = diff p1 p0 in\n    let b = diff p2 p0 in\n    let c = cross a b in\n    if c > eps then 1 (* COUNTER_CLOCKWISE *)\n    else if c < (-. eps) then (-1) (* CLOCKWISE *)\n    else if dot a b < (-. eps) then 2 (* ONLINE_BACK *)\n    else if norm a < norm b then (-2) (* ONLINE_FRONT *)\n    else 0 (* ON_SEGMENT *)\n\n  let intersect_p (p0, p1) (p2, p3) =\n    ccw p0 p1 p2 * ccw p0 p1 p3 <= 0 && ccw p2 p3 p0 * ccw p2 p3 p1 <= 0\n\n  let cross_point (p0, p1) (p2, p3) =\n    let base = diff p3 p2 in\n    let d1 = diff p0 p2 |> cross base |> abs_float in\n    let d2 = diff p1 p2 |> cross base |> abs_float in\n    d1 /. (d1 +. d2) |> multi (diff p1 p0) |> sum p0\n\n  let distance s t =\n    if intersect_p s t then 0.\n    else\n      let p2p a b = diff a b |> abs in\n      let l2p (p0, p1) p =\n        cross (diff p1 p0) (diff p p0) /. p2p p1 p0 |> abs_float in\n      let s2p s p =\n        let (p0, p1) = s in\n        if dot (diff p1 p0) (diff p p0) < 0. then p2p p p0\n        else if dot (diff p0 p1) (diff p p1) < 0. then p2p p p1\n        else l2p s p in\n      let (p0, p1) = s in\n      let (p2, p3) = t in\n      min (min (s2p s p2) (s2p s p3)) (min (s2p t p0) (s2p t p1))\n\nend\n\nmodule IO = struct\n\n  (* @since 4.04.0 *)\n  let split_on_char sep s =\n    let open String in\n    let r = ref [] in\n    let j = ref (length s) in\n    for i = length s - 1 downto 0 do\n      if get s i = sep then begin\n        r := sub s (i + 1) (!j - i - 1) :: !r;\n        j := i\n      end\n    done;\n    sub s 0 !j :: !r\n\n  let read_fs () = read_line () |> split_on_char ' ' |> List.map float_of_string\n\nend\n\nopen Point\n\nlet () =\n  let q = read_int () in\n  for _ = 0 to q - 1 do\n    match IO.read_fs () with\n    | x0 :: y0 :: x1 :: y1 :: x2 :: y2 :: x3 :: y3 :: _ ->\n      let s = (make x0 y0, make x1 y1) in\n      let t = (make x2 y2, make x3 y3) in\n      distance s t |> Printf.printf \"%.10f\\n\"\n    | _ -> assert false\n  done"
  },
  {
    "language": "D",
    "code": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.math;\nimport std.range;\nimport std.stdio;\nimport std.string;\nimport std.typecons;\n\nint readint() {\n    return readln.chomp.to!int;\n}\n\nint[] readints() {\n    return readln.split.map!(to!int).array;\n}\n\n/// ?????? ab ?????? p ????????????\nbool isOnSegment(Vec2 p, Vec2 a, Vec2 b) {\n    auto ab = b - a;\n    auto ap = p - a;\n\n    if (ab.cross(ap) != 0)\n        return false;\n\n    // ab ??¨ ap ????????????\n    if (ab.dot(ap) < 0)\n        return false;\n\n    // p ??? ab ?????????????????????\n    if (ab.magSq() >= ap.magSq())\n        return true;\n\n    return false;\n}\n\n/// ab, cd ????????????????????????\nbool isIntersectLineSegments(Vec2 a, Vec2 b, Vec2 c, Vec2 d) {\n    auto s = (b - a).cross(c - a) * (b - a).cross(d - a);\n    auto t = (d - c).cross(a - c) * (d - c).cross(b - c);\n\n    // ??????????????????(????????????????????????)\n    if (s < 0 && t < 0)\n        return true;\n\n    // ????????????????????????\n    if (isOnSegment(c, a, b) || isOnSegment(d, a, b) || isOnSegment(a, c, d) || isOnSegment(b, c, d)) {\n        return true;\n    }\n    return false;\n}\n\ndouble distance(Vec2 a, Vec2 b, Vec2 c, Vec2 d) {\n\n    double dist(Vec2 p, Vec2 a, Vec2 b) {\n        auto ab = b - a;\n        auto ap = p - a;\n        if (ab.dot(ap) < 0)\n            return ap.mag();\n\n        auto ba = a - b;\n        auto bp = p - b;\n        if (ba.dot(bp) < 0)\n            return bp.mag();\n\n        return abs(ab.cross(ap)) / ab.mag();\n    }\n\n    if (isIntersectLineSegments(a, b, c, d))\n        return 0;\n\n    return min(dist(c, a, b), dist(d, a, b), dist(a, c, d), dist(b, c, d));\n}\n\nvoid main() {\n    int q = readint();\n    for (int i = 0; i < q; i++) {\n        auto xs = readints();\n        auto a = Vec2(xs[0], xs[1]);\n        auto b = Vec2(xs[2], xs[3]);\n        auto c = Vec2(xs[4], xs[5]);\n        auto d = Vec2(xs[6], xs[7]);\n\n        auto ans = distance(a, b, c, d);\n        writefln(\"%.8f\", ans);\n    }\n}\n\nstruct Vec2 {\n    immutable double x;\n    immutable double y;\n\n    this(double x, double y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    Vec2 opAdd(Vec2 other) {\n        return Vec2(this.x + other.x, this.y + other.y);\n    }\n\n    Vec2 opSub(Vec2 other) {\n        return Vec2(this.x - other.x, this.y - other.y);\n    }\n\n    Vec2 opMul(double d) {\n        return Vec2(this.x * d, this.y * d);\n    }\n\n    double dot(Vec2 other) {\n        return this.x * other.x + this.y * other.y;\n    }\n\n    double cross(Vec2 other) {\n        return this.x * other.y - other.x * this.y;\n    }\n\n    double mag() {\n        return sqrt(magSq());\n    }\n\n    double magSq() {\n        return this.x * this.x + this.y * this.y;\n    }\n\n    Vec2 normalize() {\n        auto m = mag();\n        if (m != 0 && m != 1)\n            return Vec2(this.x / m, this.y / m);\n        return this;\n    }\n\n    static double distance(Vec2 a, Vec2 b) {\n        return (a - b).mag();\n    }\n}"
  },
  {
    "language": "D",
    "code": "#include <iostream>\n#include <iomanip>\n#include <vector>\n#include <map>\n#include <set>\n#include <deque>\n#include <stack>\n#include <queue>\n#include <algorithm>\n#include <numeric>\n#include <cstdio>\n#include <cmath>\n#include <cstdlib>\n#include <cctype>\n#include <string>\n#include <cstring>\n#include <ctime>\n#include <cassert>\n#include <climits>\n\nusing namespace std;\n\ntypedef long long lint;\n\n//定数\nconst double EPS = 1e-10;\nconst int dx[] = {-1, 0, 1, 0};\nconst int dy[] = {0, 1, 0, -1};\nconst int INF = 1001001001;\nconst lint INFLL = 1001001001001001001ll;\n\n//初期化関連\n#define zclear(a) memset((a), 0 ,sizeof(a))\n#define mclear(a) memset((a), -1, sizeof(a))\n\n//デバッグ出力\n#define show(x)  cerr << #x << \" = \" << (x) << endl;\n#define debug(x) cerr << #x << \" = \" << (x) << \" (L\" << __LINE__ << \")\" << \" \" << __FILE__ << endl;\n\nbool eq(double a, double b) //a == b\n{\n    return (fabs(a - b) <= EPS);\n}\n\nbool neq(double a, double b) //a != b\n{\n    return (!eq(a, b));\n}\n  \nbool lt(double a, double b) //a < b\n{\n    return (a - b < -EPS);\n}\n  \nbool leq(double a, double b) //a <= b\n{\n    return (lt(a, b) || eq(a, b));\n}\n  \nbool gt(double a, double b) //a > b\n{\n    return (a - b > +EPS);\n}\n  \nbool geq(double a, double b) //a >= b\n{\n    return (gt(a, b) || eq(a, b));\n}\n\nclass Point{\npublic:\n\tdouble x, y;\n\tPoint(double x = 0, double y = 0): x(x), y(y){}\n\tPoint operator + (Point p){return Point(x + p.x, y + p.y);}\n\tPoint operator - (Point p){return Point(x - p.x, y - p.y);}\n\tPoint operator * (double a){return Point(x * a, y * a);}\n\tPoint operator / (double a){return Point(x / a, y / a);}\n\tPoint operator * (const Point &a){\n\t\treturn Point(x * a.x - y * a.y, x * a.y + y * a.x);\n\t}\n\tbool operator < (const Point &p) const {\n\t\treturn (x != p.x ? x < p.x : y < p.y);\n\t}\n\tbool operator == (const Point &p) const {\n\t\treturn (fabs(x - p.x) < EPS && fabs(y - p.y) < EPS);\n\t}\n};\n\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\ndouble norm(Vector a){return (a.x * a.x + a.y * a.y);}\ndouble abs(Vector a){return (sqrt(norm(a)));}\ndouble abs(Vector a, Vector b){return (sqrt(norm(a - b)));}\ndouble dot(Vector a, Vector b){return (a.x * b.x + a.y * b.y);}\ndouble cross(Vector a, Vector b){return (a.x * b.y - a.y * b.x);}\ndouble atan(Vector a){return atan2(a.y, a.x);}\nbool sortX(Point a, Point b){return (a.x != b.x ? lt(a.x, b.x) : lt(a.y, b.y));}\nbool sortY(Point a, Point b){return (a.y != b.y ? lt(a.y, b.y) : lt(a.x, b.x));}\nPoint baseP;\nbool sortT(Point a, Point b){return (gt(cross(a - baseP, b - baseP), 0));}\n\nint ccw(Point p0, Point p1, Point p2)\n{\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (cross(a, b) > EPS) return (+1); //p0, p1, p2 が反時計周り\n\tif (cross(a, b) < -EPS) return (-1);//p0, p1, p2 が時計回り\n\tif (dot(a, b) < -EPS) return (+2); //p2--p0--p1 の順で一直線上\n\tif (norm(a) < norm(b)) return (-2); //p0--p1--p2 の順で一直線上\n\treturn (0); //p0--p2--p1 の順で一直線上\n}\n\nPolygon normalize(Polygon &v)\n{\n    int pt = 0;\n    for (int i = 1; i < v.size(); i++){\n        if (v[pt].y > v[i].y || (v[pt].y == v[i].y && v[pt].x > v[i].x)){\n            pt = i;\n        }\n    }\n    swap(v[pt], v[0]);\n    baseP = v[0];\n    sort(v.begin() + 1, v.end(), sortT);\n    return (v);\n}\n\nPolygon conhel(Polygon& ps)\n{\n    sort(ps.begin(), ps.end());\n    int k = 0, n = (int)ps.size();\n    Polygon qs(n * 2);\n      \n    for (int i = 0; i < n; i++){\n      while (k > 1 && cross(qs[k - 1] - qs[k - 2], ps[i] - qs[k - 1]) < EPS) k--;\n      qs[k++] = ps[i];\n    }\n  \n    for (int i = n - 2, t = k; i >= 0; i--){\n      while (k > t && cross(qs[k - 1] - qs[k - 2], ps[i] - qs[k - 1]) < EPS) k--;\n      qs[k++] = ps[i];\n    }\n  \n    qs.resize(k - 1);\n    return (qs);\n}\n\ndouble getArea(Polygon t){\n    double ans = 0.0;\n\tt = normalize(t);\n    for (unsigned int i = 0; i < t.size(); i++)\n        ans += cross(t[i] , t[(i + 1) % t.size()]);\n    return (fabs(ans) / 2);\n}\n\nbool isIntersectLL(Point p1, Point p2, Point p3, Point p4)\n{// 同一直線の場合は交差していると判定する.\n\treturn (abs(cross(p2 - p1, p4 - p3)) > EPS || // 傾きが異なる\n\t\tabs(cross(p2 - p1, p4 - p1)) < EPS); // 同じ直線である\n}\nbool isIntersectLS(Point p1, Point p2, Point p3, Point p4)\n{// 同一直線上にある場合も交差と判定\n\treturn (cross(p2 - p1, p3 - p1) * cross(p2 - p1, p4 - p1) < EPS);\n}\nbool isIntersectLP(Point p1, Point p2, Point p)\n{\n\treturn (neq(abs(ccw(p1, p2, p)), 1));\n}\nbool isIntersectSS(Point p1, Point p2, Point p3, Point p4)\n{\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n             ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\nbool isIntersectSP(Point p1, Point p2, Point p)\n{\n\treturn (eq(ccw(p1, p2, p), 0));\n}\nbool isInsideCP(Point c, double r, Point p)\n{\n\treturn (leq(abs(c - p), r));\n}\nbool isInsideCC(Point c1, double r1, Point c2, double r2)\n{\n\treturn (leq(abs(c1 - c2), r1 + r2) && geq(abs(c1 - c2), abs(r1 - r2)));\n}\nbool isInsidePolyP(Polygon gon, Point p)\n{\n    for (int i = 0; i < gon.size(); i++){\n        if (ccw(gon[i], gon[(i + 1) % gon.size()], p) == -1) return (false);\n    }\n    return (true);\n}\n\nPoint projection(Point p1, Point p2, Point p3) //直線p1p2 上への写像\n{\n\tdouble t = dot(p3 - p1, p2 - p1) / norm(p2 - p1);\n\treturn (p1 + (p2 - p1) * t);\n}\nPoint reflection(Point p1, Point p2, Point p3) //直線p1p2 上への反射\n{\n\treturn (p3 + (projection(p1, p2, p3) - p3) * 2);\n}\ndouble distanceLP(Point p1, Point p2, Point p)\n{\n\treturn (abs(p - projection(p1, p2, p)));\n}\ndouble distanceLL(Point l1, Point l2, Point m1, Point m2)\n{\n\treturn (isIntersectLL(l1, l2, m1, m2) ? 0 : distanceLP(l1, l2, m1));\n}\ndouble distanceLS(Point l1, Point l2, Point s1, Point s2)\n{\n    if (isIntersectLS(l1, l2, s1, s2)) return (0);\n\treturn (min(distanceLP(l1, l2, s1), distanceLP(l1, l2, s2)));\n}\ndouble distanceSP(Point s1, Point s2, Point p)\n{\n\tPoint r = projection(s1, s2, p);\n\tif (isIntersectSP(s1, s2, r)) return (abs(r - p));\n\treturn (min(abs(s1 - p), abs(s2 - p)));\n}\ndouble distanceSS(Point s1, Point s2, Point t1, Point t2){\n\tif (isIntersectSS(s1, s2, t1, t2)) return (0);\n\treturn (min(min(distanceSP(s1, s2, t1), distanceSP(s1, s2, t2)),\n\t\t\tmin(distanceSP(t1, t2, s1), distanceSP(t1, t2, s2))));\n}\nPoint interPointLL(Point a1, Point a2, Point b1, Point b2)\n{\n\tdouble d = cross(a2 - a1, b2 - b1);\n\tif (abs(d) < EPS) throw \"Segment is Paralell!\";\n\tPoint a = a2 - a1, b = b2 - b1;\n    double t = cross(b, b1 - a1) / cross(b, a);\n    return (a1 + a * t);\n}\nvector<Point> interPointCC(Point c1, double r1, Point c2, double r2)\n{\n\tvector<Point> res;\n\tif (abs(c1 - c2) < EPS) return (vector<Point>()); // 交点が絶対にない\n\tdouble d = abs(c1 - c2);\n\tdouble rc = (d * d + r1 * r1 - r2 * r2) / (2 * d);\n\tdouble rs = sqrt(r1 * r1 - rc * rc);\n\tPoint diff = (c2 - c1) / d;\n\tres.push_back(Point(c1 + diff * Point(rc, rs)));\n\tres.push_back(Point(c1 + diff * Point(rc, -rs)));\n\treturn (res);\n}\nvector<Point> crosspointCL(Point a, double ra, Point b1, Point b2)\n{\n\tvector<Point> res;\n\tdouble dist = distanceLP(b1, b2, a);\n\tif (leq(dist, ra)){\n\t\tPoint s = projection(b1, b2, a);\n\t\tdist = sqrt(ra * ra - dist * dist);\n\t\tPoint t = (b2 - b1) / abs(b2 - b1);\n\t\tres.push_back(s + t * dist);\n\t\tres.push_back(s - t * dist);\n\t}\n\treturn (res);\n}\n\nPoint unitVector(Vector t)\n{\n    double u = abs(t);\n    return (Point(t.x / u , t.y / u));\n}\n\nPoint normalVector(Point p, Point a, Point b)\n{\n    Point v = unitVector(b - a);\n    v = cross(v, p - a) > 0 ? Point(v.y, -v.x) : Point(-v.y, v.x);\n    return v * distanceLP(p, a, b);\n}\n  \ndouble getCos(Vector a, Vector b)\n{\n    return (dot(a, b) / (abs(a) * abs(b)));\n}\n  \ndouble getSin(Vector a, Vector b)\n{\n    double t = getCos(a, b);\n    return (sqrt(1.0 - t * t));\n}\n  \ndouble getArg(Vector v)\n{\n    return (atan2(v.y, v.x));\n}\n\nPoint rotate(Point t, Point p, double r)\n{\n    double ta = cos(r) * (t.x - p.x) - sin(r) * (t.y - p.y) + p.x;\n    double tb = sin(r) * (t.x - p.x) + cos(r) * (t.y - p.y) + p.y;\n    return (Point(ta, tb));\n}\n\nint main()\n{\n\tint n;\n\t\n\tscanf(\"%d\", &n);\n\t\n\tfor (int i = 0; i < n; i++){\n\t\tPoint p0, p1, p2, p3;\n\t\tscanf(\"%lf %lf %lf %lf %lf %lf %lf %lf\", &p0.x, &p0.y, &p1.x, &p1.y, &p2.x, &p2.y, &p3.x, &p3.y);\n\t\tdouble d = distanceSS(p0, p1, p2, p3);\n\t\tprintf(\"%.10lf\\n\", d);\n\t}\n\t\n\treturn (0);\n}"
  },
  {
    "language": "Python",
    "code": "# -*- coding: utf-8 -*-\n\"\"\"\nhttp://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_D&lang=jp\n\n\"\"\"\nimport sys\nfrom sys import stdin\ninput = stdin.readline\n\n\nclass Point(object):\n    epsilon = 1e-10\n\n    def __init__(self, x=0.0, y=0.0):\n        if isinstance(x, tuple):\n            self.x = x[0]\n            self.y = x[1]\n        else:\n            self.x = x\n            self.y = y\n\n    # ????????????\n    def __add__(self, other):\n        return Point(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other):\n        return Point(self.x - other.x, self.y - other.y)\n\n    def __mul__(self, other):\n        return Point(other * self.x, other * self.y)\n\n    def __truediv__(self, other):\n        return Point(other / self.x, other / self.y)\n\n    def __lt__(self, other):\n        if self.x == other.x:\n            return self.y < other.y\n        else:\n            return self.x < other.x\n\n    def __eq__(self, other):\n        from math import fabs\n        if fabs(self.x - other.x) < Point.epsilon and fabs(self.y - other.y) < Point.epsilon:\n            return True\n        else:\n            return False\n\n    def norm(self):\n        return self.x * self.x + self.y * self.y\n\n    def abs(self):\n        from math import sqrt\n        return sqrt(self.norm())\n\n    def ccw(self, p0, p1):\n        # ??????2???(p0, p1)?????????????????????????????????????????¢????????????\n        a = Vector(p1 - p0)\n        b = Vector(self - p0)\n        if Vector.cross(a, b) > Point.epsilon:\n            return 1 # 'COUNTER_CLOCKWISE'\n        elif Vector.cross(a, b) < -Point.epsilon:\n            return -1 # 'CLOCKWISE'\n        elif Vector.dot(a, b) < -Point.epsilon:\n            return 2 # 'ONLINE_BACK'\n        elif a.norm() < b.norm():\n            return -2 # 'ONLINE_FRONT'\n        else:\n            return 0 # 'ON_SEGMENT'\n\n    def project(self, s):\n        # ??????(Point)????????????s??????????????????????????????????????§?¨?(?°???±)????±???????\n        base = Vector(s.p2 - s.p1)\n        a = Vector(self - s.p1)\n        r = Vector.dot(a, base)\n        r /= base.norm()\n        return s.p1 + base * r\n\n    def reflect(self, s):\n        # ??????s???????§°?????¨?????????????????¨???????§°??????????????§?¨?(????°?)????±???????\n        proj = self.project(s)\n        return self + (proj - self)*2\n\n    def distance(self, s):\n        if Vector.dot(s.p2-s.p1, self-s.p1) < 0.0:\n            return (self - s.p1).abs()\n        if Vector.dot(s.p1-s.p2, self-s.p2) < 0.0:\n            return (self - s.p2).abs()\n        return abs(Vector.cross(s.p2-s.p1, self-s.p1) / (s.p2-s.p1).abs())\n\n\nclass Vector(Point):\n    def __init__(self, x=0.0, y=0.0):\n        if isinstance(x, tuple):\n            self.x = x[0]\n            self.y = x[1]\n        elif isinstance(x, Point):\n            self.x = x.x\n            self.y = x.y\n        else:\n            self.x = x\n            self.y = y\n\n    # ????????????\n    def __add__(self, other):\n        return Vector(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other):\n        return Vector(self.x - other.x, self.y - other.y)\n\n    def __mul__(self, other):\n        return Vector(other * self.x, other * self.y)\n\n    def __truediv__(self, other):\n        return Vector(other / self.x, other / self.y)\n\n    @classmethod\n    def dot(cls, a, b):\n        return a.x * b.x + a.y * b.y\n\n    @classmethod\n    def cross(cls, a, b):\n        return a.x * b.y - a.y * b.x\n\n    @classmethod\n    def is_orthogonal(cls, a, b):\n        return Vector.dot(a, b) == 0.0\n\n    @classmethod\n    def is_parallel(cls, a, b):\n        return Vector.cross(a, b) == 0.0\n\n\nclass Segment(object):\n    def __init__(self, p1=Point(), p2=Point()):\n        if isinstance(p1, Point):\n            self.p1 = p1\n            self.p2 = p2\n        elif isinstance(p1, tuple):\n            self.p1 = Point(p1[0], p1[1])\n            self.p2 = Point(p2[0], p2[1])\n\n    def intersect(self, s):\n        # ????????¨??????????????????????????????????????????????????????\n        ans1 = s.p1.ccw(self.p1, self.p2) * s.p2.ccw(self.p1, self.p2)\n        ans2 = self.p1.ccw(s.p1, s.p2) * self.p2.ccw(s.p1, s.p2)\n        return ans1 <= 0 and ans2 <= 0\n\n    def cross_point(self, s):\n        # ????????¨??????????????????????????????????????§?¨?????±???????\n        base = s.p2 - s.p1\n        d1 = abs(Vector.cross(base, self.p1-s.p1))\n        d2 = abs(Vector.cross(base, self.p2-s.p1))\n        t = d1 / (d1 + d2)\n        return self.p1 + (self.p2 - self.p1) * t\n\n    def distance(self, s):\n        # ????????¨?????????????????????????????¢????±???????\n        if self.intersect(s):\n            return 0.0\n        d1 = s.p1.distance(self)\n        d2 = s.p2.distance(self)\n        d3 = self.p1.distance(s)\n        d4 = self.p2.distance(s)\n        return min(d1, d2, d3, d4)\n\n\n    @classmethod\n    def is_orthogonal(cls, s1, s2):\n        a = Vector(s1.p2 - s1.p1)\n        b = Vector(s2.p2 - s2.p1)\n        return Vector.is_orthogonal(a, b)\n\n    @classmethod\n    def is_parallel(cls, s1, s2):\n        a = Vector(s1.p2 - s1.p1)\n        b = Vector(s2.p2 - s2.p1)\n        return Vector.is_parallel(a, b)\n\n\nclass Line(Segment):\n    pass\n\n\nclass Cirle(object):\n    def __init__(self, c=Point(), r=0.0):\n        self.c = c\n        self.r = r\n\n\ndef main(args):\n    q = int(input())\n    for _ in range(q):\n        x_p0, y_p0, x_p1, y_p1, x_p2, y_p2, x_p3, y_p3 = map(int, input().split())\n        p0 = Point(x_p0, y_p0)\n        p1 = Point(x_p1, y_p1)\n        p2 = Point(x_p2, y_p2)\n        p3 = Point(x_p3, y_p3)\n        s1 = Segment(p0, p1)\n        s2 = Segment(p2, p3)\n        result = s1.distance(s2)\n        print('{:.10f}'.format(result))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"
  },
  {
    "language": "Python",
    "code": "import sys\nclass Line:\n    def __init__(self,p1,p2):\n        if p1[1] < p2[1]:self.s=p2;self.e=p1\n        elif p1[1] > p2[1]:self.s=p1;self.e=p2\n        else:\n            if p1[0] < p2[0]:self.s=p1;self.e=p2\n            else:self.s=p2;self.e=p1\n\ndef cross(a,b):return a[0]*b[1] - a[1]*b[0]\ndef dot(a,b):return a[0]*b[0]+a[1]*b[1]\ndef dif(a,b):return [x-y for x,y in zip(a,b)]\ndef dist(a,b):return ((a[0]-b[0])**2+(a[1]-b[1])**2)**0.5\ndef isec(l,m):\n    a = dif(l.e,l.s);b = dif(m.e,l.s);c = dif(m.s,l.s)\n    d = dif(m.e,m.s);e = dif(l.e,m.s);f = dif(l.s,m.s)\n    g = lambda a, b : cross(a,b)==0 and dot(a,b)>0 and dot(b,b)<dot(a,a)\n    if g(a,b) or g(a,c) or g(d,e) or g(d,f):return True\n    elif l.s == m.e or l.s == m.s or l.e == m.e or l.e == m.s:return True\n    elif cross(a,b) * cross(a,c) >= 0 or cross(d,e) * cross(d,f) >= 0:return False\n    else:return True\ndef plus(a,b):return [x+y for x,y in zip(a,b)]\ndef projection(a,b):return [x*dot(a,b)/dot(a,a) for x in a]\ndef proj(A,B,C,D):\n    AB = dif(B,A) ; AC = dif(C,A) ; AD = dif(D,A)\n    CD = dif(D,C) ; CA = dif(A,C) ; CB = dif(B,C)\n    _A = plus(projection(CD,CA),C) \n    _B = plus(projection(CD,CB),C)\n    _C = plus(projection(AB,AC),A)\n    _D = plus(projection(AB,AD),A)\n    return [_A,_B,_C,_D]\ndef Order(a,b):\n    crs = cross(a,b)\n    if abs(crs) < 1.0e-10 : crs = 0.0\n    if crs > 0 : return \"COUNTER_CLOCKWISE\"\n    elif crs < 0 : return \"CLOCKWISE\"\n    else:\n        if dot(a,b) < 0 : return \"ONLINE_BACK\"\n        elif dot(a,a) < dot(b,b) : return \"ONLINE_FRONT\"\n        else : return \"ON_SEGMENT\"\n\nq = int(input())\nfor i in range(q):\n    a,b,c,d,e,f,g,h = [int(i) for i in input().split()]\n    A = [a,b] ; B = [c,d] ; C = [e,f] ; D = [g,h]\n    l = Line(A,B) ; m = Line(C,D)\n    if isec(l,m):\n        print(0.0)\n        continue\n    _A,_B,_C,_D = proj(A,B,C,D)\n    AB = dif(B,A) ; CD = dif(D,C)\n    A_C = dif(_C,A) ; A_D = dif(_D,A) ; C_A = dif(_A,C) ; C_B = dif(_B,C)\n    DIST = [dist(A,C),dist(A,D),dist(B,C),dist(B,D),dist(_A,A),dist(_B,B),dist(_C,C),dist(_D,D)]\n    fun = lambda x : x != \"ON_SEGMENT\"\n    if fun(Order(CD,C_A)) : DIST[4] = sys.maxsize\n    if fun(Order(CD,C_B)) : DIST[5] = sys.maxsize\n    if fun(Order(AB,A_C)) : DIST[6] = sys.maxsize\n    if fun(Order(AB,A_D)) : DIST[7] = sys.maxsize\n    print(min(DIST))"
  },
  {
    "language": "Python",
    "code": "from math import sqrt\nfor t in xrange(input()):\n    x0, y0, x1, y1, x2, y2, x3, y3 = map(int, raw_input().split())\n    dx0 = x1 - x0\n    dy0 = y1 - y0\n    dx1 = x3 - x2\n    dy1 = y3 - y2\n\n    s = (y0-y2)*dx1 - (x0-x2)*dy1\n    sm = dx0*dy1 - dy0*dx1\n    if s < 0:\n        s = -s\n        sm = -sm\n    t = (y2-y0)*dx0 - (x2-x0)*dy0\n    tm = dx1*dy0 - dy1*dx0\n    intersection = 0\n    if t < 0:\n        t = -t\n        tm = -tm\n    if 0 <= s <= max(sm, 0) and 0 <= t <= max(tm, 0):\n        ov = dx0*dy1 - dy0*dx1\n        if ov == 0:\n            r0 = dx0**2 + dy0**2\n            r1 = (x2-x0)*dx0 + (y2-y0)*dy0\n            r2 = (x3-x0)*dx0 + (y3-y0)*dy0\n            if r1 > r2: r1, r2 = r2, r1\n            if r2 < 0 or r0 < r1:\n                intersection = 0\n            else:\n                intersection = 1\n        else:\n            intersection = 1\n    else:\n        intersection = 0\n    if intersection:\n        print \"%.09f\" % 0\n    else:\n        print sqrt(min((x2-x0)**2 + (y2-y0)**2, (x3-x0)**2 + (y3-x0)**2, (x2-x1)**2 + (y2-y1)**2, (x3-x1)**2 + (y3-y1)**2))"
  },
  {
    "language": "Python",
    "code": "from sys import stdin\nimport math\n\nEPS = 1e-10\n\nclass Vector:\n    def __init__(self, x=None, y=None):\n        self.x = x\n        self.y = y\n\n    def __add__(self, other):\n        return Vector(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other):\n        return Vector(self.x - other.x, self.y - other.y)\n\n    def __mul__(self, k):\n        return Vector(self.x * k, self.y * k)\n\n    def __gt__(self, other):\n        return self.x > other.x and self.y > other.yb\n\n    def __lt__(self, other):\n        return self.x < other.x and self.y < other.yb\n\n    def __eq__(self, other):\n        return self.x == other.x and self.y == other.y\n\n    def dot(self, other):\n        return self.x * other.x + self.y * other.y\n\n    # usually cross operation return Vector but it returns scalor\n    def cross(self, other):\n        return self.x * other.y - self.y * other.x\n\n    def norm(self):\n        return self.x * self.x + self.y * self.y\n\n    def abs(self):\n        return math.sqrt(self.norm())\n\nclass Point(Vector):\n    def __init__(self, *args, **kargs):\n        return super().__init__(*args, **kargs)\n\nclass Segment:\n    def __init__(self, p1=Point(0, 0), p2=Point(1, 1)):\n        self.p1 = p1\n        self.p2 = p2\n\ndef ccw(p0, p1, p2):\n    a = p1 - p0\n    b = p2 - p0\n    if a.cross(b) > EPS:\n        return 1\n    elif a.cross(b) < -EPS:\n        return -1\n    elif a.dot(b) < -EPS:\n        return 2\n    elif a.norm() < b.norm():\n        return -2\n    else:\n        return 0\n\ndef intersect(*args, **kwargs):\n    # input two segments\n    if len(args) == 2:\n        s1, s2 = args\n        return (ccw(s1.p1, s1.p2, s2.p1) * ccw(s1.p1, s1.p2, s2.p2) <= 0 and\n                    ccw(s2.p1, s2.p2, s1.p1) * ccw(s2.p1, s2.p2, s1.p2) <= 0)\n    # input four points\n    elif len(args) == 4:\n        p0, p1, p2, p3 = args\n        return (ccw(p0, p1, p2) * ccw(p0, p1, p3) <= 0 and\n                    ccw(p2, p3, p0) * ccw(p2, p3, p1) <= 0)\n    else:\n        raise ArgsError\n\ndef get_distance_lp(l, p):\n    v1 = l.p1 - l.p2\n    v2 = p - l.p1\n    return abs(v1.cross(v2))/v1.abs()\n\ndef get_distance_sp(s, p):\n    v1 = s.p2 - s.p1\n    v2 = p - s.p1\n    v3 = s.p1 - s.p2\n    v4 = p - s.p2\n    if v1.dot(v2) < 0:\n        return v2.abs()\n    elif v3.dot(v4) < 0:\n        return v4.abs()\n    else:\n        return get_distance_lp(s, p)\n\ndef get_distance(*args, **kwargs):\n    # input two points with the startpoint (0, 0)\n    if len(args) == 2:\n        p1, p2 = args\n        v = p1 - p2\n        return v.abs()\n    # input two segments\n    elif len(kwargs) == 2:\n        s1 = kwargs['s1']\n        s2 = kwargs['s2']\n        if intersect(s1, s2):\n            return 0.0\n        else:\n            return min(min(get_distance_sp(s1, s2.p1), get_distance_sp(s1, s2.p2)),\n                        min(get_distance_sp(s2, s1.p1), get_distance_sp(s2, s1.p2)))\n    else:\n        raise ArgsError\n\ndef read_and_print_results(n):\n    for _ in range(n):\n        line = stdin.readline().strip().split()\n        p0 = Vector(int(line[0]), int(line[1]))\n        p1 = Vector(int(line[2]), int(line[3]))\n        p2 = Vector(int(line[4]), int(line[5]))\n        p3 = Vector(int(line[6]), int(line[7]))\n        s1 = Segment(p0, p1)\n        s2 = Segment(p2, p3)\n        d = get_distance(s1=s1, s2=s2)\n        print(\"{0:0.10f}\".format(d))\n\nn = int(input())\nread_and_print_results(n)\n"
  },
  {
    "language": "Python",
    "code": "from math import sqrt\nfor t in xrange(input()):\n    x0, y0, x1, y1, x2, y2, x3, y3 = map(int, raw_input().split())\n    dx0 = x1 - x0\n    dy0 = y1 - y0\n    dx1 = x3 - x2\n    dy1 = y3 - y2\n\n    s = (y0-y2)*dx1 - (x0-x2)*dy1\n    sm = dx0*dy1 - dy0*dx1\n    if s < 0:\n        s = -s\n        sm = -sm\n    t = (y2-y0)*dx0 - (x2-x0)*dy0\n    tm = dx1*dy0 - dy1*dx0\n    intersection = 0\n    if t < 0:\n        t = -t\n        tm = -tm\n    dis = sqrt(\n            min(\n                (x2-x0)**2 + (y2-y0)**2,\n                (x3-x0)**2 + (y3-y0)**2,\n                (x2-x1)**2 + (y2-y1)**2,\n                (x3-x1)**2 + (y3-y1)**2\n                )\n            )\n    ov = dx0*dy1 - dy0*dx1\n    if 0 <= s <= max(sm, 0) and 0 <= t <= max(tm, 0):\n        if ov == 0:\n            r0 = dx0**2 + dy0**2\n            r1 = (x2-x0)*dx0 + (y2-y0)*dy0\n            r2 = (x3-x0)*dx0 + (y3-y0)*dy0\n            if r1 > r2: r1, r2 = r2, r1\n            if r2 < 0 or r0 < r1:\n                intersection = 0\n            else:\n                intersection = 1\n        else:\n            intersection = 1\n    else:\n        if ov == 0:\n            r0 = dx0**2 + dy0**2\n            r1 = dx0*(x2-x0) + dy0*(y2-y0)\n            r2 = dx0*(x3-x0) + dy0*(y3-y0)\n            if 0 <= r2 and r1 <= r0:\n                dis = min(dis, (dx0*(y2-y0) - dy0*(x2-x0)) / sqrt(r0))\n        else:\n            r0 = dx0**2 + dy0**2\n            r1 = dx0*(x2-x0) + dy0*(y2-y0)\n            r2 = dx0*(x3-x0) + dy0*(y3-y0)\n            if 0 <= r1 <= r0:\n                o1 = abs(dx0*(y2-y0) - dy0*(x2-x0))\n                dis = min(dis, o1 / sqrt(r0))\n            if 0 <= r2 <= r0:\n                o2 = abs(dx0*(y3-y0) - dy0*(x3-x0))\n                dis = min(dis, o2 / sqrt(r0))\n            s0 = dx1**2 + dy1**2\n            s1 = dx1*(x0-x2) + dy1*(y0-y2)\n            s2 = dx1*(x1-x2) + dy1*(y1-y2)\n            if 0 <= s1 <= s0:\n                o1 = abs(dx1*(y0-y2) - dy1*(x0-x2))\n                dis = min(dis, o1 / sqrt(s0))\n            if 0 <= s2 <= s0:\n                o2 = abs(dx1*(y1-y2) - dy1*(x1-x2))\n                dis = min(dis, o2 / sqrt(s0))\n\n        intersection = 0\n    if intersection:\n        print \"%.09f\" % 0\n    else:\n        print \"%.09f\" % dis"
  },
  {
    "language": "Python",
    "code": "from math import sqrt\nq = int(input())\n\nclass Segment(): pass\n\ndef dot(a, b):\n    return sum([i * j for i,j in zip(a, b)])\n\ndef sub(a, b):\n    return [a[0] - b[0],a[1] - b[1]]\n\ndef cross(a, b):\n    return  a[0] * b[1] - a[1] * b[0]\n\ndef norm(a):\n    return sqrt(a[0] ** 2 + a[1] ** 2)\n\ndef ccw(a, b, c):\n    x = sub(b, a)\n    y = sub(c, a)\n    if cross(x, y) > 0: return 1\n    if cross(x, y) < 0: return -1\n    if dot(x, y) < 0: return 2\n    if norm(x) < norm(y): return -2\n    return 0\n\ndef intersect(p1, p2, p3, p4):\n    return ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 and \\\n           ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0\n\ndef getDistLP(s, p):\n    return abs(cross(sub(s.r, s.l), sub(p, s.l))) / norm(sub(s.r, s.l))\n\ndef getDistSP(s, p):\n    if dot(sub(s.r, s.l),sub(p, s.l)) < 0: return norm(sub(p, s.l))\n    if dot(sub(s.l, s.r),sub(p, s.r)) < 0: return norm(sub(p, s.r))\n    return getDistLP(s, p)\n\ndef getDist(s1, s2):\n    if intersect(s1.l, s1.r, s2.l, s2.r): return 0\n    return min(getDistSP(s1, s2.l), \n               getDistSP(s1, s2.r),\n               getDistSP(s2, s1.l),\n               getDistSP(s2, s1.r))\n\nfor i in range(q):\n    xp0, yp0, xp1, yp1, xp2, yp2, xp3, yp3  = map(int, input().split())\n    s1 = Segment()\n    s2 = Segment()\n    s1.l = [xp0, yp0]\n    s1.r = [xp1, yp1]\n    s2.l = [xp2, yp2]\n    s2.r = [xp3, yp3]\n    print(getDist(s1, s2))"
  },
  {
    "language": "Python",
    "code": "EPS = 1e-4\n\n#点と線分の距離\ndef PointSegmentDistance(point, begin, end):\n\tpoint, begin, end = point-begin, 0, end-begin\n\tpoint = (point / end) * abs(end)\n\tend = abs(end)\n\tif -EPS <= point.real <= abs(end):\n\t\treturn abs(point.imag)\n\telse:\n\t\treturn min(abs(point), abs(point - end))\n\n#外積\ndef OuterProduct(one, two):\n\ttmp = one.conjugate() * two\n\treturn tmp.imag\n\n#内積\ndef InnerProduct(one, two):\n\ttmp = one.conjugate() * two\n\treturn tmp.real\n\n#点が線分上にあるか\ndef IsOnSegment(point, begin, end):\n\tif abs(OuterProduct(begin-point, end-point)) <= EPS and InnerProduct(begin-point, end-point) <= EPS:\n\t\treturn True\n\telse:\n\t\treturn False\n\n#3点が反時計回りか\n#一直線上のときの例外処理できていない→とりあえずF\ndef CCW(p, q, r):\n\tone, two = q-p, r-q\n\tif OuterProduct(one, two) > -EPS:\n\t\treturn True\n\telse:\n\t\treturn False\n\n#線分どうし交叉\ndef Intersect_SS(b1, e1, b2, e2):\n\tif IsOnSegment(b1, b2, e2) or IsOnSegment(e1, b2, e2) or IsOnSegment(b2, b1, e1) or IsOnSegment(e2, b1, e1):\n\t\treturn True\n\telif (CCW(b1, e1, b2) != CCW(b1, e1, e2)) and (CCW(b2, e2, b1) != CCW(b2, e2, e1)):\n\t\treturn True\n\telse:\n\t\treturn False\n\n#点と線分の距離\ndef SegmentSegmentDistance(a, b, c, d):\n\tif Intersect_SS(a, b, c, d):\n\t\treturn 0\n\telse:\n\t\treturn min(PointSegmentDistance(a, c, d), PointSegmentDistance(b, c, d), PointSegmentDistance(c, a, b), PointSegmentDistance(d, a, b))\n\nn = int(input())\nfor _ in range(n):\n\tpp = list(map(int, input().split()))\n\tp = [complex(pp[i], pp[i+1]) for i in range(0, 8, 2)]\n\tprint(SegmentSegmentDistance(p[0], p[1], p[2], p[3]))\n"
  },
  {
    "language": "Python",
    "code": "import sys\nfrom itertools import starmap\nreadline = sys.stdin.readline\nEPS = 1e-9\nclass Segment(object):\n    __slots__ = ('fi', 'se')\n    def __init__(self, fi, se):\n        self.fi = fi\n        self.se = se\ndef cross(a, b):\n    return a.real * b.imag - a.imag * b.real\ndef dot(a, b):\n    return a.real * b.real + a.imag * b.imag\ndef norm(base):\n    return abs(base) ** 2\ndef project(s, p2):\n    base = s.fi - s.se\n    r = dot(p2 - s.fi, base) / norm(base)\n    return s.fi + base * r\ndef reflect(s, p):\n    return p + (project(s, p) - p) * 2.0\ndef ccw(p1, p2, p3):\n    a = p2 - p1\n    b = p3 - p1\n    if cross(a, b) > EPS: return 1\n    if cross(a, b) < -EPS: return -1\n    if dot(a, b) < -EPS: return 2\n    if norm(a) < norm(b): return -2\n    return 0\ndef intersect4(p1, p2, p3, p4):\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 and\n\t\t\tccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0)\ndef intersect2(s1, s2):\n    return intersect4(s1.fi, s1.se, s2.fi, s2.se)\ndef getDistance(a, b):  return abs(a - b)\ndef getDistanceLP(l, p):\n    return abs(cross(l.se - l.fi, p - l.fi) / abs(l.se - l.fi))\ndef getDistanceSP(s, p):\n    if dot(s.se - s.fi, p - s.fi) < 0.0: return abs(p - s.fi)\n    if dot(s.fi - s.se, p - s.se) < 0.0: return abs(p - s.se)\n    return getDistanceLP(s, p)\ndef getDistances(s1, s2):\n    if intersect2(s1, s2): return 0.0\n    return min(min(getDistanceSP(s1, s2.fi), getDistanceSP(s1, s2.se)),\n               min(getDistanceSP(s2, s1.fi), getDistanceSP(s2, s1.se)))\nn = int(readline())\nfor _ in [0] * n:\n    li = tuple(map(int, readline().split()))\n    p0, p1, p2, p3 = (x + y * 1j for x, y in zip(li[::2], li[1::2]))\n    s1 = Segment(p0, p1)\n    s2 = Segment(p2, p3)\n    print(\"{0:.10f}\".format(getDistances(s1, s2)))"
  },
  {
    "language": "Python",
    "code": "import sys\nfrom collections import namedtuple\nfrom itertools import starmap\nreadline = sys.stdin.readline\nSegment = namedtuple('Segment', ('fi', 'se'))\nEPS = 1e-9\ndef cross(a, b):\n    return a.real * b.imag - a.imag * b.real\ndef dot(a, b):\n    return a.real * b.real + a.imag * b.imag\ndef norm(base):\n    return abs(base) ** 2\ndef project(s, p2):\n    base = s.fi - s.se\n    r = dot(p2 - s.fi, base) / norm(base)\n    return s.fi + base * r\ndef reflect(s, p):\n    return p + (project(s, p) - p) * 2.0\ndef ccw(p1, p2, p3):\n    a = p2 - p1\n    b = p3 - p1\n    if cross(a, b) > EPS: return 1\n    if cross(a, b) < -EPS: return -1\n    if dot(a, b) < -EPS: return 2\n    if norm(a) < norm(b): return -2\n    return 0\ndef intersect4(p1, p2, p3, p4):\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 and\n\t\t\tccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0)\ndef intersect2(s1, s2):\n    return intersect4(s1.fi, s1.se, s2.fi, s2.se)\ndef getDistance(a, b):  return abs(a - b)\ndef getDistanceLP(l, p):\n    return abs(cross(l.se - l.fi, p - l.fi) / abs(l.se - l.fi))\ndef getDistanceSP(s, p):\n    if dot(s.se - s.fi, p - s.fi) < 0.0: return abs(p - s.fi)\n    if dot(s.fi - s.se, p - s.se) < 0.0: return abs(p - s.se)\n    return getDistanceLP(s, p)\ndef getDistances(s1, s2):\n    if intersect2(s1, s2): return 0.0\n    return min(getDistanceSP(s1, s2.fi), getDistanceSP(s1, s2.se),\n               getDistanceSP(s2, s1.fi), getDistanceSP(s2, s1.se))\nn = int(readline())\nfor _ in [0] * n:\n    p0, p1, p2, p3 = starmap(complex, zip(*[map(int, input().split())] * 2))\n    s1 = Segment(p0, p1)\n    s2 = Segment(p2, p3)\n    print(\"{0:.10f}\".format(getDistances(s1, s2)))"
  },
  {
    "language": "Python",
    "code": "from collections import defaultdict,deque\nimport sys,heapq,bisect,math,itertools,string,queue\nsys.setrecursionlimit(10**8)\nINF = float('inf')\nmod = 10**9+7\neps = 10**-7\ndef inp(): return int(input())\ndef inpl(): return list(map(int, input().split()))\ndef inpl_str(): return list(input().split())\n\n###########################\n#          幾何\n###########################\ndef sgn(a):\n    if a < -eps: return -1\n    if a >  eps: return  1\n    return 0\n\nclass Point:\n    def __init__(self,x,y):\n        self.x = x\n        self.y = y\n        pass\n\n    def tolist(self):\n        return [self.x,self.y]\n\n    def __add__(self,p):\n        return Point(self.x+p.x, self.y+p.y)\n    def __iadd__(self,p):\n        return self + p\n\n    def __sub__(self,p):\n        return Point(self.x - p.x, self.y - p.y)\n    def __isub__(self,p):\n        return self - p\n\n    def __truediv__(self,n):\n        return Point(self.x/n, self.y/n)\n    def __itruediv__(self,n):\n        return self / n\n\n    def __mul__(self,n):\n        return Point(self.x*n, self.y*n)\n    def __imul__(self,n):\n        return self * n\n\n    def __lt__(self,other):\n        tmp = sgn(self.x - other.x)\n        if tmp != 0:\n            return tmp < 0\n        else:\n            return sgn(self.y - other.y) < 0\n\n    def __eq__(self,other):\n        return sgn(self.x - other.x) == 0 and sgn(self.y - other.y) == 0\n\n    def abs(self):\n        return math.sqrt(self.x**2+self.y**2)\n\n    def dot(self,p):\n        return self.x * p.x + self.y*p.y\n\n    def det(self,p):\n        return self.x * p.y - self.y*p.x\n\n    def arg(self,p):\n        return math.atan2(y,x)\n\n# 点の進行方向 a -> b -> c\ndef iSP(a,b,c):\n    tmp = sgn((b-a).det(c-a))\n    if tmp > 0:   return 1   # 左に曲がる場合\n    elif tmp < 0: return -1  # 右に曲がる場合\n    else: # まっすぐ\n        if sgn((b-a).dot(c-a)) < 0: return -2 # c-a-b の順\n        if sgn((a-b).dot(c-b)) < 0: return  2 # a-b-c の順\n        return 0 # a-c-bの順\n\n# ab,cd の直線交差\ndef isToleranceLine(a,b,c,d):\n    if sgn((b-a).det(c-d)) != 0: return 1 # 交差する\n    else:\n        if sgn((b-a).det(c-a)) != 0: return 0 # 平行\n        else: return -1 # 同一直線\n\n# ab,cd の線分交差 重複，端点での交差もTrue\ndef isToleranceSegline(a,b,c,d):\n    return sgn(iSP(a,b,c)*iSP(a,b,d))<=0 and sgn(iSP(c,d,a)*iSP(c,d,b)) <= 0\n\n# 直線ab と 直線cd の交点 (存在する前提)\ndef Intersection(a,b,c,d):\n    tmp1 = (b-a)*((c-a).det(d-c))\n    tmp2 = (b-a).det(d-c)\n    return a+(tmp1/tmp2)\n\n# 直線ab と 点c の距離\ndef DistanceLineToPoint(a,b,c):\n    return abs(((c-a).det(b-a))/((b-a).abs()))\n\n# 線分ab と 点c の距離\ndef DistanceSeglineToPoint(a,b,c):\n    if sgn((b-a).dot(c-a)) < 0: # <cab が鈍角\n        return (c-a).abs()\n    if sgn((a-b).dot(c-b)) < 0: # <cba が鈍角\n        return (c-b).abs()\n    return DistanceLineToPoint(a,b,c)\n\n# 直線ab への 点c からの垂線の足\ndef Vfoot(a,b,c):\n    d = c + Point((b-a).y,-(b-a).x)\n    return Intersection(a,b,c,d)\n\n# 多角形の面積\ndef PolygonArea(Plist):\n    Plist = ConvexHull(Plist)\n    L = len(Plist)\n    S = 0\n    for i in range(L):\n        tmpS = (Plist[i-1].det(Plist[i]))/2\n        S += tmpS\n    return S\n\n# 多角形の重心\ndef PolygonG(Plist):\n    Plist = ConvexHull(Plist)\n    L = len(Plist)\n    S = 0\n    G = Point(0,0)\n    for i in range(L):\n        tmpS = (Plist[i-1].det(Plist[i]))/2\n        S += tmpS\n        G += (Plist[i-1]+Plist[i])/3*tmpS\n    return G/S\n\n# 凸法\ndef ConvexHull(Plist):\n    Plist.sort()\n    L = len(Plist)\n    qu = deque([])\n    quL = 0\n    for p in Plist:\n        while quL >= 2 and iSP(qu[quL-2],qu[quL-1],p) == 1:\n            qu.pop()\n            quL -= 1\n        qu.append(p)\n        quL += 1\n\n    qd = deque([])\n    qdL = 0\n    for p in Plist:\n        while qdL >= 2 and iSP(qd[qdL-2],qd[qdL-1],p) == -1:\n            qd.pop()\n            qdL -= 1\n        qd.append(p)\n        qdL += 1\n\n    qd.pop()\n    qu.popleft()\n    hidari = list(qd) + list(reversed(qu)) # 左端開始，左回りPlist\n    return hidari\n\nN = int(input())\nfor _ in range(N):\n    x0,y0,x1,y1,x2,y2,x3,y3 = inpl()\n    p0 = Point(x0,y0)\n    p1 = Point(x1,y1)\n    p2 = Point(x2,y2)\n    p3 = Point(x3,y3)\n    if isToleranceSegline(p0,p1,p2,p3):\n        print(0)\n    else:\n        print(min(DistanceSeglineToPoint(p0,p1,p2),\\\n                  DistanceSeglineToPoint(p0,p1,p3),\\\n                  DistanceSeglineToPoint(p2,p3,p0),\\\n                  DistanceSeglineToPoint(p2,p3,p1)))\n\n"
  },
  {
    "language": "Python",
    "code": "from sys import stdin\nimport math\n\nEPS = 1e-10\n\nclass Vector:\n    def __init__(self, x=None, y=None):\n        self.x = x\n        self.y = y\n\n    def __add__(self, other):\n        return Vector(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other):\n        return Vector(self.x - other.x, self.y - other.y)\n\n    def __mul__(self, k):\n        return Vector(self.x * k, self.y * k)\n\n    def __gt__(self, other):\n        return self.x > other.x and self.y > other.yb\n\n    def __lt__(self, other):\n        return self.x < other.x and self.y < other.yb\n\n    def __eq__(self, other):\n        return self.x == other.x and self.y == other.y\n\n    def dot(self, other):\n        return self.x * other.x + self.y * other.y\n\n    # usually cross operation return Vector but it returns scalor\n    def cross(self, other):\n        return self.x * other.y - self.y * other.x\n\n    def norm(self):\n        return self.x * self.x + self.y * self.y\n\n    def abs(self):\n        return math.sqrt(self.norm())\n\nclass Point(Vector):\n    def __init__(self, *args, **kargs):\n        return super().__init__(*args, **kargs)\n\nclass Segment:\n    def __init__(self, p1=Point(0, 0), p2=Point(1, 1)):\n        self.p1 = p1\n        self.p2 = p2\n\ndef ccw(p0, p1, p2):\n    a = p1 - p0\n    b = p2 - p0\n    if a.cross(b) > EPS:\n        return 1\n    elif a.cross(b) < -EPS:\n        return -1\n    elif a.dot(b) < -EPS:\n        return 2\n    elif a.norm() < b.norm():\n        return -2\n    else:\n        return 0\n\ndef intersect(*args, **kwargs):\n    # input two segments\n    if len(args) == 2:\n        s1, s2 = args\n        return (ccw(s1.p1, s1.p2, s2.p1) * ccw(s1.p1, s1.p2, s2.p2) <= 0 and\n                    ccw(s2.p1, s2.p2, s1.p1) * ccw(s2.p1, s2.p2, s1.p2) <= 0)\n    # input four points\n    elif len(args) == 4:\n        p0, p1, p2, p3 = args\n        return (ccw(p0, p1, p2) * ccw(p0, p1, p3) <= 0 and\n                    ccw(p2, p3, p0) * ccw(p2, p3, p1) <= 0)\n    else:\n        raise ArgsError\n\ndef get_distance_lp(l, p):\n    v1 = l.p1 - l.p2\n    v2 = p - l.p1\n    return abs(v1.cross(v2))/v1.abs()\n\ndef get_distance_sp(s, p):\n    v1 = s.p2 - s.p1\n    v2 = p - s.p1\n    v3 = s.p1 - s.p2\n    v4 = p - s.p2\n    if v1.dot(v2) < 0:\n        return v2.abs()\n    elif v3.dot(v4):\n        return v4.abs()\n    else:\n        return get_distance_lp(s, p)\n\ndef get_distance(*args, **kwargs):\n    # input two points with the startpoint (0, 0)\n    if len(args) == 2:\n        p1, p2 = args\n        v = p1 - p2\n        return v.abs()\n    # input two segments\n    elif len(kwargs) == 2:\n        s1 = kwargs['s1']\n        s2 = kwargs['s2']\n        if intersect(s1, s2):\n            return 0.0\n        else:\n            return min(min(get_distance_sp(s1, s2.p1), get_distance_sp(s1, s2.p2)),\n                        min(get_distance_sp(s2, s1.p1), get_distance_sp(s2, s1.p2)))\n    else:\n        raise ArgsError\n\ndef read_and_print_results(n):\n    for _ in range(n):\n        line = stdin.readline().strip().split()\n        p0 = Vector(int(line[0]), int(line[1]))\n        p1 = Vector(int(line[2]), int(line[3]))\n        p2 = Vector(int(line[4]), int(line[5]))\n        p3 = Vector(int(line[6]), int(line[7]))\n        s1 = Segment(p0, p1)\n        s2 = Segment(p2, p3)\n        d = get_distance(s1=s1, s2=s2)\n        print(\"{0:0.10f}\".format(d))\n\nn = int(input())\nread_and_print_results(n)\n"
  },
  {
    "language": "Python",
    "code": "#!/usr/bin/env python\n\nimport sys\nimport math\nimport itertools as it\nfrom collections import deque\n\nsys.setrecursionlimit(10000000)\n\ndef in_sec(a, b, c):\n    return min(a, b) <= c <= max(a, b)\ndef dist(xp, yp, xq, yq):\n    return math.sqrt((xq - xp) ** 2 + (yp - yq) ** 2)\ndef min_d(x, y, xp, yp, xq, yq):\n    vx, vy = [xp - xq, yp - yq]\n    vx1, vy1 = [x - xp, y - yp]\n    vx2, vy2 = [x - xq, y - yq]\n    if (vx1 * vx + vy1 * vy) * (vx2 * vx + vy2 * vy) < 0:\n        a, b, c = [yq - yp, xp - xq, xp * (yp - yq) + yp * (xq - xp)]\n        return abs(a * x + b * y + c) / math.sqrt(a ** 2 + b ** 2)\n    return min(dist(x, y, xp, yp), dist(x, y, xq, yq))\n\nq = input()\n\nfor loop in range(q):\n    x0, y0, x1, y1, x2, y2, x3, y3 = map(float, raw_input().split())\n    #(y1 - y0)(x - x0) = (x1 - x0)(y - y0)\n    a1, b1, c1 = [y1 - y0, x0 - x1, x0 * (y1 - y0) - y0 * (x1 - x0)]\n    a2, b2, c2 = [y3 - y2, x2 - x3, x2 * (y3 - y2) - y2 * (x3 - x2)]\n    det = a1 * b2 - b1 * a2\n    if det == 0:\n        dx, dy = [x2 - x0, y2 - y0]\n        if dx * a1 + dy * b1 == 0 and \\\n            not(max(x0, x1) < min(x2, x3) or max(x2, x3) < min(x0, x1) \\\n            or max(y0, y1) < min(y2, y3) or max(y2, y3) < min(y0, y1)):\n            print 0\n            continue\n    else:\n        xdet = c1 * b2 - c2 * b1\n        ydet = c2 * a1 - c1 * a2\n        if in_sec(det * x0, det * x1, xdet) and in_sec(det * y0, det * y1, ydet) \\\n            and in_sec(det * x2, det * x3, xdet) and in_sec(det * y2, det * y3, ydet):\n            print 0\n            continue\n\n    ans = min(min_d(x0, y0, x2, y2, x3, y3), min_d(x1, y1, x2, y2, x3, y3), \n        min_d(x2, y2, x0, y0, x1, y1), min_d(x3, y3, x0, y0, x1, y1))\n    print \"%.10f\" % ans\n"
  },
  {
    "language": "Python",
    "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\ninput:\n3\n0 0 1 0 0 1 1 1\n0 0 1 0 2 1 1 2\n-1 0 1 0 0 1 0 -1\n\noutput:\n1.0000000000\n1.4142135624\n0.0000000000\n\"\"\"\n\nimport sys\n\n\nclass Segment(object):\n    __slots__ = ('source', 'target')\n\n    def __init__(self, source, target):\n        self.source = complex(source)\n        self.target = complex(target)\n\n\ndef cross(a, b):\n    return a.real * b.imag - a.imag * b.real\n\n\ndef dot(a, b):\n    return a.real * b.real + a.imag * b.imag\n\n\ndef get_distance_lp(l, p):\n    return abs(cross(l.target - l.source, p - l.source) / abs(l.target - l.source))\n\n\ndef get_distance_sp(s, p):\n    if dot(s.target - s.source, p - s.source) < 0:\n        return abs(p - s.source)\n    elif dot(s.source - s.target, p - s.target) < 0:\n        return abs(p - s.target)\n    else:\n        return get_distance_lp(s, p)\n\n\ndef calc_distance(line_info):\n    for line_pair in line_info:\n        line_axis = tuple(map(int, line_pair))\n        p0, p1, p2, p3 = (x + y * 1j for x, y in zip(line_axis[::2], line_axis[1::2]))\n        s1, s2 = Segment(p0, p1), Segment(p2, p3)\n        # TODO: check intersection of segments: s1, s2\n        distance = min(min(get_distance_sp(s1, s2.source), get_distance_sp(s1, s2.target)),\n                       min(get_distance_sp(s2, s1.source), get_distance_sp(s2, s1.target))\n                       )\n        print('{ans:.10f}'.format(ans=distance))\n\n    return None\n\n\nif __name__ == '__main__':\n    _input = sys.stdin.readlines()\n    questions = int(_input[0])\n    lines = map(lambda x: x.split(), _input[1:])\n    calc_distance(lines)"
  },
  {
    "language": "Python",
    "code": "import sys\nfrom collections import namedtuple\nfrom itertools import starmap\nreadline = sys.stdin.readline\nEPS = 1e-9\nclass Segment(namedtuple('Point', ('fi', 'se'))):\n    __slots__ = ()\ndef cross(a, b):\n    return a.real * b.imag - a.imag * b.real\ndef dot(a, b):\n    return a.real * b.real + a.imag * b.imag\ndef norm(base):\n    return abs(base) ** 2\ndef project(s, p2):\n    base = s.fi - s.se\n    r = dot(p2 - s.fi, base) / norm(base)\n    return s.fi + base * r\ndef reflect(s, p):\n    return p + (project(s, p) - p) * 2.0\ndef ccw(p1, p2, p3):\n    a = p2 - p1\n    b = p3 - p1\n    if cross(a, b) > EPS: return 1\n    if cross(a, b) < -EPS: return -1\n    if dot(a, b) < -EPS: return 2\n    if norm(a) < norm(b): return -2\n    return 0\ndef intersect4(p1, p2, p3, p4):\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 and\n\t\t\tccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0)\ndef intersect2(s1, s2):\n    return intersect4(s1.fi, s1.se, s2.fi, s2.se)\ndef getDistance(a, b):  return abs(a - b)\ndef getDistanceLP(l, p):\n    return abs(cross(l.se - l.fi, p - l.fi) / abs(l.se - l.fi))\ndef getDistanceSP(s, p):\n    if dot(s.se - s.fi, p - s.fi) < 0.0: return abs(p - s.fi)\n    if dot(s.fi - s.se, p - s.se) < 0.0: return abs(p - s.se)\n    return getDistanceLP(s, p)\ndef getDistances(s1, s2):\n    if intersect2(s1, s2): return 0.0\n    return min(getDistanceSP(s1, s2.fi), getDistanceSP(s1, s2.se),\n               getDistanceSP(s2, s1.fi), getDistanceSP(s2, s1.se))\nn = int(readline())\nfor _ in [0] * n:\n    p0, p1, p2, p3 = starmap(complex, zip(*[map(int, input().split())] * 2))\n    s1 = Segment(p0, p1)\n    s2 = Segment(p2, p3)\n    print(\"{0:.10f}\".format(getDistances(s1, s2)))"
  },
  {
    "language": "Python",
    "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\ninput:\n3\n0 0 1 0 0 1 1 1\n0 0 1 0 2 1 1 2\n-1 0 1 0 0 1 0 -1\n\noutput:\n1.0000000000\n1.4142135624\n0.0000000000\n\"\"\"\n\nimport sys\n\nEPS = 1e-9\n\n\nclass Segment(object):\n    __slots__ = ('source', 'target')\n\n    def __init__(self, source, target):\n        self.source = complex(source)\n        self.target = complex(target)\n\n\ndef cross(a, b):\n    return a.real * b.imag - a.imag * b.real\n\n\ndef dot(a, b):\n    return a.real * b.real + a.imag * b.imag\n\n\ndef get_distance_lp(l, p):\n    return abs(cross(l.target - l.source, p - l.source) / abs(l.target - l.source))\n\n\ndef get_distance_sp(s, p):\n    if dot(s.target - s.source, p - s.source) < 0:\n        return abs(p - s.source)\n    elif dot(s.source - s.target, p - s.target) < 0:\n        return abs(p - s.target)\n    else:\n        return get_distance_lp(s, p)\n\n\ndef check_ccw(p0, p1, p2):\n    a, b = p1 - p0, p2 - p0\n    if cross(a, b) > EPS:\n        flag = 1\n    elif cross(a, b) < -1 * EPS:\n        flag = -1\n    elif dot(a, b) < -1 * EPS:\n        flag = 2\n    elif abs(a) < abs(b):\n        flag = -2\n    else:\n        flag = 0\n    return flag\n\n\ndef check_intersection(p0, p1, p2, p3):\n    intersected = (check_ccw(p0, p1, p2) * check_ccw(p0, p1, p3) <= 0) and \\\n                  (check_ccw(p2, p3, p0) * check_ccw(p2, p3, p1) <= 0)\n\n    return intersected\n\n\ndef calc_distance(_lines):\n    for line in _lines:\n        line_axis = tuple(map(int, line))\n        p0, p1, p2, p3 = (x + y * 1j for x, y in zip(line_axis[::2], line_axis[1::2]))\n        s1, s2 = Segment(p0, p1), Segment(p2, p3)\n        \n        intersected = check_intersection(s1.source, s1.target, s2.source, s2.target)\n        if intersected:\n            distance = 0\n        else:\n            distance = min(min(get_distance_sp(s1, s2.source), get_distance_sp(s1, s2.target)),\n                           min(get_distance_sp(s2, s1.source), get_distance_sp(s2, s1.target)))\n            \n        print('{ans:.10f}'.format(ans=distance))\n        \n    return None\n\n\nif __name__ == '__main__':\n    _input = sys.stdin.readlines()\n    questions = int(_input[0])\n    lines = map(lambda x: x.split(), _input[1:])\n    calc_distance(lines)"
  },
  {
    "language": "Python",
    "code": "#! /usr/bin/env python3\n\nfrom typing import List, Tuple\nfrom math import sqrt\n\nEPS = 1e-10\n\n\ndef float_equal(x: float, y: float) -> bool:\n    return abs(x - y) < EPS\n\n\nclass Point:\n\n    def __init__(self, x: float=0.0, y: float=0.0) -> None:\n        self.x = x\n        self.y = y\n\n    def __repr__(self) -> str:\n        return \"Point({}, {})\".format(self.x, self.y)\n\n    def __eq__(self, other: object) -> bool:\n        if not isinstance(other, Point):\n            # print(\"NotImplemented in Point\")\n            return NotImplemented\n        return float_equal(self.x, other.x) and \\\n            float_equal(self.y, other.y)\n\n    def __add__(self, other: 'Point') -> 'Point':\n        return Point(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other: 'Point') -> 'Point':\n        return Point(self.x - other.x, self.y - other.y)\n\n    def __mul__(self, k: float) -> 'Point':\n        return Point(self.x * k, self.y * k)\n\n    def __rmul__(self, k: float) -> 'Point':\n        return self * k\n\n    def __truediv__(self, k: float) -> 'Point':\n        return Point(self.x / k, self.y / k)\n\n    def __lt__(self, other: 'Point') -> bool:\n        return self.y < other.y \\\n            if abs(self.x - other.x) < EPS \\\n            else self.x < other.x\n\n    def norm(self):\n        return self.x * self.x + self.y * self.y\n\n    def abs(self):\n        return sqrt(self.norm())\n\n    def dot(self, other: 'Point') -> float:\n        return self.x * other.x + self.y * other.y\n\n    def cross(self, other: 'Point') -> float:\n        return self.x * other.y - self.y * other.x\n\n    def is_orthogonal(self, other: 'Point') -> bool:\n        return float_equal(self.dot(other), 0.0)\n\n    def is_parallel(self, other: 'Point') -> bool:\n        return float_equal(self.cross(other), 0.0)\n\n    def distance(self, other: 'Point') -> float:\n        return (self - other).abs()\n\n    def in_side_of(self, seg: 'Segment') -> bool:\n        return seg.vector().dot(\n            Segment(seg.p1, self).vector()) >= 0\n\n    def in_width_of(self, seg: 'Segment') -> bool:\n        return \\\n            self.in_side_of(seg) and \\\n            self.in_side_of(seg.reverse())\n\n    def distance_to_line(self, seg: 'Segment') -> float:\n        return \\\n            abs((self - seg.p1).cross(seg.vector())) / \\\n            seg.length()\n\n    def distance_to_segment(self, seg: 'Segment') -> float:\n        if not self.in_side_of(seg):\n            return self.distance(seg.p1)\n        if not self.in_side_of(seg.reverse()):\n            return self.distance(seg.p2)\n        else:\n            return self.distance_to_line(seg)\n\n\nVector = Point\n\n\nclass Segment:\n\n    def __init__(self, p1: Point = None, p2: Point = None) -> None:\n        self.p1: Point = Point() if p1 is None else p1\n        self.p2: Point = Point() if p2 is None else p2\n\n    def __repr__(self) -> str:\n        return \"Segment({}, {})\".format(self.p1, self.p2)\n\n    def __eq__(self, other: object) -> bool:\n        if not isinstance(other, Segment):\n            # print(\"NotImplemented in Segment\")\n            return NotImplemented\n        return self.p1 == other.p1 and self.p2 == other.p2\n\n    def vector(self) -> Vector:\n        return self.p2 - self.p1\n\n    def reverse(self) -> 'Segment':\n        return Segment(self.p2, self.p1)\n\n    def length(self) -> float:\n        return self.p1.distance(self.p2)\n\n    def is_orthogonal(self, other: 'Segment') -> bool:\n        return self.vector().is_orthogonal(other.vector())\n\n    def is_parallel(self, other: 'Segment') -> bool:\n        return self.vector().is_parallel(other.vector())\n\n    def projection(self, p: Point) -> Point:\n        v = self.vector()\n        vp = p - self.p1\n        return v.dot(vp) / v.norm() * v + self.p1\n\n    def reflection(self, p: Point) -> Point:\n        x = self.projection(p)\n        return p + 2 * (x - p)\n\n    def intersect_ratio(self, other: 'Segment') -> Tuple[float, float]:\n        a = self.vector()\n        b = other.vector()\n        c = self.p1 - other.p1\n        s = b.cross(c) / a.cross(b)\n        t = a.cross(c) / a.cross(b)\n        return s, t\n\n    def intersects(self, other: 'Segment') -> bool:\n        s, t = self.intersect_ratio(other)\n        return (0 <= s <= 1) and (0 <= t <= 1)\n\n    def intersection(self, other: 'Segment') -> Point:\n        s, _ = self.intersect_ratio(other)\n        return self.p1 + s * self.vector()\n\n    def distance_with_segment(self, other: 'Segment') -> float:\n        if not self.is_parallel(other) and \\\n                self.intersects(other):\n            return 0\n        else:\n            return min(\n                self.p1.distance_to_segment(other),\n                self.p2.distance_to_segment(other),\n                other.p1.distance_to_segment(self),\n                other.p2.distance_to_segment(self))\n\n\nLine = Segment\n\n\nclass Circle:\n\n    def __init__(self, c: Point=None, r: float=0.0) -> None:\n        self.c: Point = Point() if c is None else c\n        self.r: float = r\n\n    def __eq__(self, other: object) -> bool:\n        if not isinstance(other, Circle):\n            return NotImplemented\n        return self.c == other.c and self.r == other.r\n\n    def __repr__(self) -> str:\n        return \"Circle({}, {})\".format(self.c, self.r)\n       \ndef main() -> None:\n    n = int(input())\n\n    for _ in range(n):\n        x1, y1, x2, y2, x3, y3, x4, y4 = [int(x) for x in input().split()]\n        s1 = Segment(Point(x1, y1), Point(x2, y2))\n        s2 = Segment(Point(x3, y3), Point(x4, y4))\n        print(s1.distance_with_segment(s2))\n\n\nif __name__ == \"__main__\":\n    main()\n\n\n"
  },
  {
    "language": "Python",
    "code": "#! /usr/bin/env python3\n\nfrom typing import List, Tuple\nfrom math import sqrt\n\nEPS = 1e-10\n\n\ndef float_equal(x: float, y: float) -> bool:\n    return abs(x - y) < EPS\n\n\nclass Point:\n\n    def __init__(self, x: float=0.0, y: float=0.0) -> None:\n        self.x = x\n        self.y = y\n\n    def __repr__(self) -> str:\n        return \"Point({}, {})\".format(self.x, self.y)\n\n    def __eq__(self, other: object) -> bool:\n        if not isinstance(other, Point):\n            # print(\"NotImplemented in Point\")\n            return NotImplemented\n        return float_equal(self.x, other.x) and \\\n            float_equal(self.y, other.y)\n\n    def __add__(self, other: 'Point') -> 'Point':\n        return Point(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other: 'Point') -> 'Point':\n        return Point(self.x - other.x, self.y - other.y)\n\n    def __mul__(self, k: float) -> 'Point':\n        return Point(self.x * k, self.y * k)\n\n    def __rmul__(self, k: float) -> 'Point':\n        return self * k\n\n    def __truediv__(self, k: float) -> 'Point':\n        return Point(self.x / k, self.y / k)\n\n    def __lt__(self, other: 'Point') -> bool:\n        return self.y < other.y \\\n            if abs(self.x - other.x) < EPS \\\n            else self.x < other.x\n\n    def norm(self):\n        return self.x * self.x + self.y * self.y\n\n    def abs(self):\n        return sqrt(self.norm())\n\n    def dot(self, other: 'Point') -> float:\n        return self.x * other.x + self.y * other.y\n\n    def cross(self, other: 'Point') -> float:\n        return self.x * other.y - self.y * other.x\n\n    def is_orthogonal(self, other: 'Point') -> bool:\n        return float_equal(self.dot(other), 0.0)\n\n    def is_parallel(self, other: 'Point') -> bool:\n        return float_equal(self.cross(other), 0.0)\n\n    def distance(self, other: 'Point') -> float:\n        return Segment(self, other).vector().abs()\n\n    def in_side_of(self, seg: 'Segment') -> bool:\n        return seg.vector().dot(\n            Segment(seg.p1, self).vector()) >= 0\n\n    def in_width_of(self, seg: 'Segment') -> bool:\n        return \\\n            self.in_side_of(seg) and \\\n            self.in_side_of(seg.reverse())\n\n    def distance_to_segment(self, seg: 'Segment') -> float:\n        if self.in_width_of(seg):\n            return self.distance(seg.projection(self))\n        else:\n            return min(self.distance(seg.p1),\n                       self.distance(seg.p2))\n\n\nVector = Point\n\n\nclass Segment:\n\n    def __init__(self, p1: Point = None, p2: Point = None) -> None:\n        self.p1: Point = Point() if p1 is None else p1\n        self.p2: Point = Point() if p2 is None else p2\n\n    def __repr__(self) -> str:\n        return \"Segment({}, {})\".format(self.p1, self.p2)\n\n    def __eq__(self, other: object) -> bool:\n        if not isinstance(other, Segment):\n            # print(\"NotImplemented in Segment\")\n            return NotImplemented\n        return self.p1 == other.p1 and self.p2 == other.p2\n\n    def vector(self) -> Vector:\n        return self.p2 - self.p1\n\n    def reverse(self) -> 'Segment':\n        return Segment(self.p2, self.p1)\n\n    def is_orthogonal(self, other: 'Segment') -> bool:\n        return self.vector().is_orthogonal(other.vector())\n\n    def is_parallel(self, other: 'Segment') -> bool:\n        return self.vector().is_parallel(other.vector())\n\n    def projection(self, p: Point) -> Point:\n        v = self.vector()\n        vp = p - self.p1\n        return v.dot(vp) / v.norm() * v + self.p1\n\n    def reflection(self, p: Point) -> Point:\n        x = self.projection(p)\n        return p + 2 * (x - p)\n\n    def intersect_ratio(self, other: 'Segment') -> Tuple[float, float]:\n        a = self.vector()\n        b = other.vector()\n        c = self.p1 - other.p1\n        s = b.cross(c) / a.cross(b)\n        t = a.cross(c) / a.cross(b)\n        return s, t\n\n    def intersects(self, other: 'Segment') -> bool:\n        s, t = self.intersect_ratio(other)\n        return (0 <= s <= 1) and (0 <= t <= 1)\n\n    def intersection(self, other: 'Segment') -> Point:\n        s, _ = self.intersect_ratio(other)\n        return self.p1 + s * self.vector()\n\n    def distance_with_segment(self, other: 'Segment') -> float:\n        if not self.is_parallel(other) and \\\n                self.intersects(other):\n            return 0\n        else:\n            return min(\n                self.p1.distance_to_segment(other),\n                self.p2.distance_to_segment(other),\n                other.p1.distance_to_segment(self),\n                other.p2.distance_to_segment(self))\n\n\nLine = Segment\n\n\nclass Circle:\n\n    def __init__(self, c: Point=None, r: float=0.0) -> None:\n        self.c: Point = Point() if c is None else c\n        self.r: float = r\n\n    def __eq__(self, other: object) -> bool:\n        if not isinstance(other, Circle):\n            return NotImplemented\n        return self.c == other.c and self.r == other.r\n\n    def __repr__(self) -> str:\n        return \"Circle({}, {})\".format(self.c, self.r)\n        \ndef main() -> None:\n    n = int(input())\n\n    for _ in range(n):\n        x1, y1, x2, y2, x3, y3, x4, y4 = [int(x) for x in input().split()]\n        s1 = Segment(Point(x1, y1), Point(x2, y2))\n        s2 = Segment(Point(x3, y3), Point(x4, y4))\n        print(s1.distance_with_segment(s2))\n\n\nif __name__ == \"__main__\":\n    main()\n\n\n"
  },
  {
    "language": "Python",
    "code": "from math import pi, cos, sin, atan2\nEPS = 10**(-9)\n\ndef eq(value1, value2):\n    return abs(value1-value2) <= EPS\n\nclass Point():\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n        self.arg = atan2(y, x) # -PI ~ PI\n    \n    def __str__(self):\n        return \"{0:.8f} {1:.8f}\".format(self.x, self.y)\n    \n    def __add__(self, other):\n        return Point(self.x + other.x, self.y + other.y)\n    \n    def __sub__(self, other):\n        return Point(self.x - other.x, self.y - other.y)\n    \n    def __mul__(self, scal):\n        return Point(self.x*scal, self.y*scal)\n    \n    def __truediv__(self, scal):\n        return Point(self.x/scal, self.y/scal)\n    \n    def __eq__(self, other):\n        return eq(self.x, other.x) and eq(self.y, other.y)\n\n    # 原点からの距離\n    def __abs__(self):\n        return (self.x**2+self.y**2)**0.5\n    \n# 原点を中心にrad角だけ回転した点\ndef Rotation(vec: Point, rad):\n    return Point(vec.x*cos(rad)-vec.y*sin(rad), vec.x*sin(rad)+vec.y*cos(rad))\n\n\nclass Circle():\n    def __init__(self, p, r):\n        self.p = p\n        self.r = r\n\n\nclass Line():\n    # 点a, bを通る\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n        self.arg = (a-b).arg % pi\n    \n    def __str__(self):\n        return \"[({0}, {1}) - ({2}, {3})]\".format(self.a.x, self.a.y, self.b.x, self.b.y)\n\n    # pointを通って平行\n    def par(self, point):\n        return Line(point, point+(self.a-self.b))\n\n    # pointを通って垂直\n    def tan(self, point):\n        return Line(point, point + Rotation(self.a-self.b, pi/2))\n\n\nclass Segment(Line):\n    def __init__(self, a, b):\n        super().__init__(a, b)\n\n\n# 符号付き面積\ndef cross(vec1: Point, vec2: Point):\n    return vec1.x*vec2.y - vec1.y*vec2.x\n\n# 内積\ndef dot(vec1: Point, vec2: Point):\n    return vec1.x*vec2.x + vec1.y*vec2.y\n\n# 点a->b->cの回転方向\ndef ccw(a, b, c):\n    if cross(b-a, c-a) > EPS: return +1 # COUNTER_CLOCKWISE\n    if cross(b-a, c-a) < -EPS: return -1 # CLOCKWISE\n    if dot(c-a, b-a) < -EPS: return +2 # c -> a -> b\n    if abs(b-a) < abs(c-a): return -2 # a -> b -> c\n    return 0 # a -> c -> b\n\n\n# pのlへの射影\ndef projection(l, p):\n    t = dot(l.b-l.a, p-l.a) / abs(l.a-l.b)**2\n    return l.a + (l.b-l.a)*t\n\n# pのlによる反射\ndef reflection(l, p):\n    return p + (projection(l, p) - p)*2\n\ndef isPararell(l1, l2):\n    return eq(cross(l1.a-l1.b, l2.a-l2.b), 0)\n\ndef isVertical(l1, l2):\n    return eq(dot(l1.a-l1.b, l2.a-l2.b), 0)\n\n\ndef isIntersect_lp(l, p):\n    return abs(ccw(l.a, l.b, p)) != 1\n\ndef isIntersect_ll(l1, l2):\n    return not isPararell(l1, l2) or isIntersect_lp(l1, l2.a)\n\ndef isIntersect_sp(s, p):\n    return ccw(s.a, s.b, p) == 0\n\ndef isIntersect_ss(s1, s2):\n    return ccw(s1.a, s1.b, s2.a)*ccw(s1.a, s1.b, s2.b) <= 0 and ccw(s2.a, s2.b, s1.a)*ccw(s2.a, s2.b, s1.b) <= 0\n\ndef isIntersect_ls(l, s):\n    return cross(l.b - l.a, s.a - l.a) * cross(l.b - l.a, s.b - l.a) < EPS\n\ndef isIntersect_cp(c, p):\n    return abs(abs(c.p - p) - c.r) < EPS\n\ndef isIntersect_cl(c, l):\n    return distance_lp(l, c.p) <= c.r + EPS\n\ndef isIntersect_cs(c, s):\n    pass\n\ndef isIntersect_cc(c1, c2):\n    pass\n\n\ndef distance_pp(p1, p2):\n    return abs(p1-p2)\n\ndef distance_lp(l, p):\n    return abs(projection(l,p)-p)\n\ndef distance_ll(l1, l2):\n    return 0 if isIntersect_ll(l1, l2) else distance_lp(l1, l2.a)\n\ndef distance_sp(s, p):\n    r = projection(s, p)\n    if isIntersect_sp(s, r): return abs(r-p)\n    return min(abs(s.a-p), abs(s.b-p))\n\ndef distance_ss(s1, s2):\n    if isIntersect_ss(s1, s2): return 0\n    return min([distance_sp(s1, s2.a), distance_sp(s1, s2.b), distance_sp(s2, s1.a), distance_sp(s2, s1.b)])\n\ndef distance_ls(l, s):\n    if isIntersect_ls(l, s): return 0\n    return min(distance_lp(l, s.a), distance_lp(l, s.b))\n\n\ndef crosspoint_ll(l1, l2):\n    A = cross(l1.b - l1.a, l2.b - l2.a)\n    B = cross(l1.b - l1.a, l1.b - l2.a)\n    if eq(abs(A), 0) and eq(abs(B), 0): return l2.a\n    return l2.a + (l2.b - l2.a) * B / A\n\ndef crosspoint_ss(s1, s2):\n    return crosspoint_ll(s1, s2)\n\ndef crosspoint_lc(l, c):\n    if eq(distance_lp(l, c.p), c.r): return [c.p]\n    p = projection(l, c.p)\n    e = (l.b - l.a) / abs(l.b-l.a)\n    dis = (c.r**2-abs(p-c.p)**2)**0.5\n    return [p + e*dis, p - e*dis]\n\ndef crosspoint_sc(s, c):\n    pass\n\ndef crosspoint_cc(c1, c2):\n    d = abs(c1.p-c2.p)\n    if not abs(c1.r-c2.r) <= d <= c1.r+c2.r:\n        return []\n    mid_p = (c2.p * (c1.r**2-c2.r**2+d**2) + c1.p * (c2.r**2-c1.r**2+d**2)) / (2*d**2)\n    tanvec = Rotation(c1.p-c2.p, pi/2)\n    return crosspoint_lc(Line(mid_p, mid_p+tanvec), c1)\n\n\n# pからのcの接点\ndef tangent_cp(c, p):\n    return crosspoint_cc(c, Circle(p, (abs(p-c.p)**2 - c.r**2)**0.5))\n\n\n\n\n\nimport sys\ninput = sys.stdin.readline\n\ndef verify_1A():\n    p1x, p1y, p2x, p2y = map(int, input().split())\n    l = Line(Point(p1x, p1y), Point(p2x, p2y))\n    Q = int(input())\n    Query = [list(map(int, input().split())) for _ in range(Q)]\n    for px, py in Query:\n        p = Point(px, py)\n        print(projection(l, p))\n\ndef verify_1B():\n    p1x, p1y, p2x, p2y = map(int, input().split())\n    l = Line(Point(p1x, p1y), Point(p2x, p2y))\n    Q = int(input())\n    Query = [list(map(int, input().split())) for _ in range(Q)]\n    for px, py in Query:\n        p = Point(px, py)\n        print(reflection(l, p))\n\ndef verify_1C():\n    p1x, p1y, p2x, p2y = map(int, input().split())\n    p1 = Point(p1x, p1y); p2 = Point(p2x, p2y)\n    Q = int(input())\n    Query = [list(map(int, input().split())) for _ in range(Q)]\n    for px, py in Query:\n        p = Point(px, py)\n        result = ccw(p1, p2, p)\n        if result == 1:\n            print(\"COUNTER_CLOCKWISE\")\n        elif result == -1:\n            print(\"CLOCKWISE\")\n        elif result == 2:\n            print(\"ONLINE_BACK\")\n        elif result == -2:\n            print(\"ONLINE_FRONT\")\n        else:\n            print(\"ON_SEGMENT\")\n\ndef verify_2A():\n    Q = int(input())\n    Query = [list(map(int, input().split())) for _ in range(Q)]\n    for p0x, p0y, p1x, p1y, p2x, p2y, p3x, p3y in Query:\n        l1 = Line(Point(p0x, p0y), Point(p1x, p1y))\n        l2 = Line(Point(p2x, p2y), Point(p3x, p3y))\n        if isPararell(l1, l2):\n            print(2)\n        elif isVertical(l1, l2):\n            print(1)\n        else:\n            print(0)\n\ndef verify_2B():\n    Q = int(input())\n    Query = [list(map(int, input().split())) for _ in range(Q)]\n    for p0x, p0y, p1x, p1y, p2x, p2y, p3x, p3y in Query:\n        s1 = Segment(Point(p0x, p0y), Point(p1x, p1y))\n        s2 = Segment(Point(p2x, p2y), Point(p3x, p3y))\n        if isIntersect_ss(s1, s2):\n            print(1)\n        else:\n            print(0)\n\n\ndef verify_2C():\n    Q = int(input())\n    Query = [list(map(int, input().split())) for _ in range(Q)]\n    for p0x, p0y, p1x, p1y, p2x, p2y, p3x, p3y in Query:\n        s1 = Segment(Point(p0x, p0y), Point(p1x, p1y))\n        s2 = Segment(Point(p2x, p2y), Point(p3x, p3y))\n        print(crosspoint_ss(s1, s2))  \n\ndef verify_2D():\n    Q = int(input())\n    Query = [list(map(int, input().split())) for _ in range(Q)]\n    for p0x, p0y, p1x, p1y, p2x, p2y, p3x, p3y in Query:\n        s1 = Segment(Point(p0x, p0y), Point(p1x, p1y))\n        s2 = Segment(Point(p2x, p2y), Point(p3x, p3y))\n        print(\"{:.8f}\".format(distance_ss(s1, s2)))\n\nverify_2D()\n"
  },
  {
    "language": "Python",
    "code": "import sys\nclass Line:\n    def __init__(self,p1,p2):\n        if p1[1] < p2[1]:self.s=p2;self.e=p1\n        elif p1[1] > p2[1]:self.s=p1;self.e=p2\n        else:\n            if p1[0] < p2[0]:self.s=p1;self.e=p2\n            else:self.s=p2;self.e=p1\n\ndef cross(a,b):return a[0]*b[1] - a[1]*b[0]\ndef dot(a,b):return a[0]*b[0]+a[1]*b[1]\ndef dif(a,b):return [x-y for x,y in zip(a,b)]\ndef dist(a,b):return ((a[0]-b[0])**2+(a[1]-b[1])**2)**0.5\ndef isec(l,m):\n    a = dif(l.e,l.s);b = dif(m.e,l.s);c = dif(m.s,l.s)\n    d = dif(m.e,m.s);e = dif(l.e,m.s);f = dif(l.s,m.s)\n    g = lambda a, b : cross(a,b)==0 and dot(a,b)>0 and dot(b,b)<dot(a,a)\n    if g(a,b) or g(a,c) or g(d,e) or g(d,f):return True\n    elif l.s == m.e or l.s == m.s or l.e == m.e or l.e == m.s:return True\n    elif cross(a,b) * cross(a,c) >= 0 or cross(d,e) * cross(d,f) >= 0:return False\n    else:return True\ndef plus(a,b):return [x+y for x,y in zip(a,b)]\ndef projection(a,b):return [x*dot(a,b)/dot(a,a) for x in a]\ndef proj(A,B,C,D):\n    AB = dif(B,A) ; AC = dif(C,A) ; AD = dif(D,A)\n    CD = dif(D,C) ; CA = dif(A,C) ; CB = dif(B,C)\n    _A = plus(projection(CD,CA),C) \n    _B = plus(projection(CD,CB),C)\n    _C = plus(projection(AB,AC),A)\n    _D = plus(projection(AB,AD),A)\n    return [_A,_B,_C,_D]\ndef Order(a,b):\n    crs = cross(a,b)\n    if crs > 0 : return \"COUNTER_CLOCKWISE\"\n    elif crs < 0 : return \"CLOCKWISE\"\n    else:\n        if dot(a,b) < 0 : return \"ONLINE_BACK\"\n        elif dot(a,a) < dot(b,b) : return \"ONLINE_FRONT\"\n        else : return \"ON_SEGMENT\"\n\n\nq = int(input())\nfor i in range(q):\n    a,b,c,d,e,f,g,h = [int(i) for i in input().split()]\n    A = [a,b] ; B = [c,d] ; C = [e,f] ; D = [g,h]\n    l = Line(A,B) ; m = Line(C,D)\n    if isec(l,m):\n        print(0.0)\n        continue\n    _A,_B,_C,_D = proj(A,B,C,D)\n    AB = dif(B,A) ; CD = dif(D,C)\n    A_C = dif(_C,A) ; A_D = dif(_D,A) ; C_A = dif(_A,C) ; C_B = dif(_B,C)\n    DIST = [dist(A,C),dist(A,D),dist(B,C),dist(B,D),dist(_A,A),dist(_B,B),dist(_C,C),dist(_D,D)]\n    fun = lambda x : x != \"ON_SEGMENT\"\n    if fun(Order(CD,C_A)) : DIST[4] = sys.maxsize\n    if fun(Order(CD,C_B)) : DIST[5] = sys.maxsize\n    if fun(Order(AB,A_C)) : DIST[6] = sys.maxsize\n    if fun(Order(AB,A_D)) : DIST[7] = sys.maxsize\n    print(min(DIST))"
  },
  {
    "language": "Python",
    "code": "def cross(c1, c2):\n    return c1.real * c2.imag - c1.imag * c2.real\n\ndef dot(c1, c2):\n    return c1.real * c2.real + c1.imag * c2.imag\n\ndef ccw(p0, p1, p2):\n    a = p1 - p0\n    b = p2 - p0\n    cross_ab = cross(a, b)\n    if cross_ab > 0:\n        return 1\n    elif cross_ab < 0:\n        return -1\n    elif dot(a, b) < 0:\n        return 1\n    elif abs(a) < abs(b):\n        return -1\n    else:\n        return 0\n\ndef intersect(p1, p2, p3, p4):\n    # p1 and p2 are end points of a segment.\n    # p3 and p4 are end points of the other segment.\n    if (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0) and \\\n       (ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0):\n        return True\n    else:\n        return False\n\ndef get_distance_sp(sp1, sp2, p):\n    a = sp2 - sp1\n    b = p - sp1\n    if dot(a, b) < 0:\n        return abs(b)\n    c = sp1 - sp2\n    d = p - sp2\n    if dot(c, d) < 0:\n        return abs(d)\n    return abs(cross(a, b)) / abs(a)\n\ndef print_distance(p1, p2, p3, p4):\n    # parameters are the same as intersect.\n    if intersect(p1, p2, p3, p4):\n        print(\"0.0000000000\")\n    else:\n        d = min(get_distance_sp(p1, p2, p3), get_distance_sp(p1, p2, p4),\n                get_distance_sp(p3, p4, p1), get_distance_sp(p3, p4, p2))\n        print(\"{0:.10f}\".format(d))\n        \nn = int(input())\nfor line in range(n):\n    x_p0, y_p0, x_p1, y_p1, x_p2, y_p2, x_p3, y_p3 = map(int, input().split())\n    p0 = x_p0 + y_p0 * 1j\n    p1 = x_p1 + y_p1 * 1j\n    p2 = x_p2 + y_p2 * 1j\n    p3 = x_p3 + y_p3 * 1j\n    print_distance(p0, p1, p2, p3)\n\n"
  },
  {
    "language": "Python",
    "code": "class Point:\n    def __init__(self, x , y):\n        self.x = x\n        self.y = y\n    def __sub__(self, p):\n        x_sub = self.x - p.x\n        y_sub = self.y - p.y\n        return Point(x_sub, y_sub)\n\nclass Vector:\n    def __init__(self, p):\n        self.x = p.x\n        self.y = p.y\n        self.norm = (p.x ** 2 + p.y ** 2) ** 0.5\n\ndef cross(v1, v2):\n    return v1.x * v2.y - v1.y * v2.x\n\ndef dot(v1, v2):\n    return v1.x * v2.x + v1.y * v2.y\n\ndef ccw(p0, p1, p2):\n    a = Vector(p1 - p0)\n    b = Vector(p2 - p0)\n    cross_ab = cross(a, b)\n    if cross_ab > 0:\n        return 1\n    elif cross_ab < 0:\n        return -1\n    elif dot(a, b) < 0:\n        return 1\n    elif a.norm < b.norm:\n        return -1\n    else:\n        return 0\n\ndef intersect(p1, p2, p3, p4):\n    if (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0) and \\\n       (ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0):\n        return True\n    else:\n        return False\n\ndef getDistanceSP(sp1, sp2, p):\n    a = Vector(sp2 - sp1)\n    b = Vector(p - sp1)\n    if dot(a, b) < 0:\n        return b.norm\n    c = Vector(sp1 - sp2)\n    d = Vector(p - sp2)\n    if dot(c, d) < 0:\n        return d.norm\n    return abs(cross(a, b) / a.norm)\n\ndef getDistance(p1, p2, p3, p4):\n    if intersect(p1, p2, p3, p4):\n        print(\"0.00000000\")\n    else:\n        d = min(getDistanceSP(p1, p2, p3), getDistanceSP(p1, p2, p4),\n                getDistanceSP(p3, p4, p1), getDistanceSP(p3, p4, p2))\n        print(\"{0:.10f}\".format(d))\n\n\nimport sys\n\nfile_input = sys.stdin\n\nsq = file_input.readline()\n\nfor line in file_input:\n    x_p0, y_p0, x_p1, y_p1, x_p2, y_p2, x_p3, y_p3 = map(int, line.split())\n    p0 = Point(x_p0, y_p0)\n    p1 = Point(x_p1, y_p1)\n    p2 = Point(x_p2, y_p2)\n    p3 = Point(x_p3, y_p3)\n    getDistance(p0, p1, p2, p3)"
  },
  {
    "language": "Python",
    "code": "import math\n\nclass Vector:\n    def __init__(self,x,y):\n        self.x = x\n        self.y = y\n        \n    def __add__(self,other):\n        return Vector(self.x+other.x,self.y+other.y)\n    \n    def __sub__(self,other):\n        return Vector(self.x-other.x,self.y-other.y)\n    \n    def __mul__(self,scalar):\n        return Vector(self.x*scalar,self.y*scalar)\n    def __rmul__(self, scalar):\n        return Vector(self.x*scalar,self.y*scalar)\n   \n    def __repr__(self):\n        return str([self.x,self.y])\n        \n    def norm_2(self):\n        return dot(self,self)\n    \n    def norm(self):\n        return math.sqrt(self.norm_2())\n    \ndef v_sum(v1,v2):\n    return Vector(v1.x+v2.x,v1.y+v2.y) \ndef scalar_multi(k,v):\n    return Vector(k*v.x,k*v.y)\ndef v_diff(v1,v2):\n    return v_sum(v1,scalar_multi(-1,v2))\n    \ndef dot(vector1,vector2):\n    return vector1.x*vector2.x+vector1.y*vector2.y\n\ndef cross(vector1,vector2):\n    return vector1.x*vector2.y-vector1.y*vector2.x\n    \n    \ndef in_seg(p,s,t):\n    '''\n    whether point p is in the area of segment(s,t)\n    '''\n    x = p-s\n    d = t-s\n    if 0<=dot(x,d)/d.norm_2()<=1:\n        return True\n    else:\n        return False\n    \ndef is_crossed(p,q,s,t):\n    a = q-p\n    b = t-s\n    v = s-p\n    w = t-p\n    x = p-s\n    y = q-s\n    if cross(a,v)*cross(a,w)<=0 and cross(b,x)*cross(b,y)<=0:\n        if cross(a,v) == cross(a,w) == cross(b,x) == cross(b,y) == 0: \n            #if segments are on the same line, you must check whether an end point is in the other segment at least\n            if 0<=dot(a,v)<=a.norm_2() or 0<=dot(a,w)<=a.norm_2() or 0<=dot(b,x)<=b.norm_2() or 0<=dot(b,y)<=b.norm_2():\n                return True\n            else:\n                return False\n        else:    \n            return True\n    else:\n        return False\n    \ndef point_line_dist(p,s,t):\n    x = p-s\n    d = t-s\n    return abs(cross(x,d))/d.norm()\n\ndef calc(p1,p2,p3,p4):\n    min_dists = []\n    if in_seg(p1,p3,p4):\n        min_dists.append(point_line_dist(p1,p3,p4))\n    if in_seg(p2,p3,p4):\n        min_dists.append(point_line_dist(p2,p3,p4))\n    if in_seg(p3,p1,p2):\n        min_dists.append(point_line_dist(p3,p1,p2))\n    if in_seg(p4,p1,p2):\n        min_dists.append(point_line_dist(p4,p1,p2))\n    \n    min_dists.append((p1-p3).norm())\n    min_dists.append((p1-p4).norm())\n    min_dists.append((p2-p3).norm())\n    min_dists.append((p2-p4).norm())\n    \n    if is_crossed(p1,p2,p3,p4):\n        min_dists.append(0)\n    \n    return min(min_dists)\n\nq = int(input())\n\nfor i in range(q):\n    x1,y1,x2,y2,x3,y3,x4,y4 = map(float,input().split())\n    p1 = Vector(x1,y1)\n    p2 = Vector(x2,y2)\n    p3 = Vector(x3,y3)\n    p4 = Vector(x4,y4)\n    print(calc(p1,p2,p3,p4))\n"
  },
  {
    "language": "Python",
    "code": "import math\n\nEPS = 1e-10\n\ndef equals(a, b):\n    return abs(a - b) < EPS\n\n\nclass Point:\n    def __init__(self, x=0, y=0):\n        self.x = x\n        self.y = y\n\n    def __add__(self, p):\n        return Point(self.x + p.x, self.y + p.y)\n\n    def __sub__(self, p):\n        return Point(self.x - p.x, self.y - p.y)\n\n    def __mul__(self, a):\n        return Point(self.x * a, self.y * a)\n\n    def __rmul__(self, a):\n        return self * a\n\n    def __truediv__(self, a):\n        return Point(self.x / a, self.y / a)\n\n    def norm(self):\n        return self.x * self.x + self.y * self.y\n\n    def abs(self):\n        return math.sqrt(self.norm())\n\n    def __lt__(self, p):\n        if self.x != p.x:\n            return self. x < p.x\n        else:\n            return self.y < p.y\n\n    def __eq__(self, p):\n        return equals(self.x, p.x) and equals(self.y, p.y)\n\n\nclass Segment:\n    def __init__(self, p1, p2):\n        self.p1 = p1\n        self.p2 = p2\n\n\ndef dot(a, b):\n    return a.x * b.x + a.y * b.y\n\n\ndef cross(a, b):\n    return a.x * b.y - a.y * b.x\n\n\ndef ccw(p0, p1, p2):\n    COUNTER_CLOCKWISE = 1\n    CLOCKWISE = -1\n    ONLINE_BACK = 2\n    ONLINE_FRONT = -2\n    ON_SEGMENT = 0\n    a = p1 - p0\n    b = p2 - p0\n    if cross(a, b) > EPS:\n        return COUNTER_CLOCKWISE\n    if cross(a, b) < -EPS:\n        return CLOCKWISE\n    if dot(a, b) < -EPS:\n        return ONLINE_BACK\n    if a.norm() < b.norm():\n        return ONLINE_FRONT\n    return ON_SEGMENT\n\n\ndef intersect(s1, s2):\n    p1 = s1.p1\n    p2 = s1.p2\n    p3 = s2.p1\n    p4 = s2.p2\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 and\n            ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0)\n\n\ndef getDistanceLP(l, p):\n    v = l.p2 - l.p1\n    return abs(cross(v, p - l.p1) / v.abs())\n\n\ndef getDistanceSP(s, p):\n    if dot(s.p2 - s.p1, p - s.p1) < 0:\n        v = p - s.p1\n        return v.abs()\n    if dot(s.p1 - s.p2, p - s.p2) < 0:\n        v = p - s.p2\n        return v.abs()\n    return getDistanceLP(s, p)\n\n\ndef getDistance(s1, s2):\n    if intersect(s1, s2):\n        return 0\n    return min(\n        getDistanceSP(s1, s2.p1),\n        getDistanceSP(s1, s2.p2),\n        getDistanceSP(s2, s1.p1),\n        getDistanceSP(s2, s1.p2)\n    )\n\n\nif __name__ == '__main__':\n    q = int(input())\n    ans = []\n    for i in range(q):\n        x0, y0, x1, y1, x2, y2, x3, y3 = [int(v) for v in input().split()]\n        s1 = Segment(Point(x0, y0), Point(x1, y1))\n        s2 = Segment(Point(x2, y2), Point(x3, y3))\n        ans.append(getDistance(s1, s2))\n\n    for v in ans:\n        print('{0:.10f}'.format(v))\n"
  },
  {
    "language": "Python",
    "code": "EPS = 10**(-9)\ndef is_equal(a,b):\n    return abs(a-b) < EPS\n\ndef norm(v,i=2):\n    import math\n    ret = 0\n    n = len(v)\n    for j in range(n):\n        ret += abs(v[j])**i\n    return math.pow(ret,1/i)\n\nclass Vector(list):\n    \"\"\"\n    ベクトルクラス\n    対応演算子\n    +  : ベクトル和 \n    -  : ベクトル差\n    *  : スカラー倍、または内積\n    /  : スカラー除法\n    ** : 外積\n    += : ベクトル和\n    -= : ベクトル差\n    *= : スカラー倍\n    /= : スカラー除法\n\n    メソッド\n    self.norm(i) : L{i}ノルムを計算\n    \"\"\"\n    def __add__(self,other):\n        n = len(self)\n        ret = [0]*n\n        for i in range(n):\n            ret[i] = super().__getitem__(i) + other.__getitem__(i)\n        return self.__class__(ret)\n    \n    def __radd__(self,other):\n        n = len(self)\n        ret = [0]*n\n        for i in range(n):\n            ret[i] = other.__getitem__(i) + super().__getitem__(i)\n        return self.__class__(ret)\n    \n    def __iadd__(self, other):\n        n = len(self)\n        for i in range(n):\n            self[i] += other.__getitem__(i)\n        return self\n\n    def __sub__(self,others):\n        n = len(self) \n        ret = [0]*n\n        for i in range(n):\n            ret[i] = super().__getitem__(i) - others.__getitem__(i)\n        return self.__class__(ret)\n\n    def __iadd__(self, other):\n        n = len(self)\n        for i in range(n):\n            self[i] -= other.__getitem__(i)\n        return self\n\n    def __rsub__(self,others):\n        n = len(self) \n        ret = [0]*n\n        for i in range(n):\n            ret[i] = others.__getitem__(i) - super().__getitem__(i)\n        return self.__class__(ret)\n    \n    def __mul__(self,other):\n        n = len(self)\n        if isinstance(other,list):\n            ret = 0\n            for i in range(n):\n                ret += super().__getitem__(i)*other.__getitem__(i)\n            return ret\n        else:\n            ret = [0]*n\n            for i in range(n):\n                ret[i] = super().__getitem__(i)*other\n            return self.__class__(ret)\n\n    def __rmul__(self,other):\n        n = len(self)\n        if isinstance(other,list):\n            ret = 0\n            for i in range(n):\n                ret += super().__getitem__(i)*other.__getitem__(i)\n            return ret\n        else:\n            ret = [0]*n\n            for i in range(n):\n                ret[i] = super().__getitem__(i)*other\n            return self.__class__(ret)\n    \n    \n    def __truediv__(self,other):\n        \"\"\"\n        ベクトルのスカラー除法\n        Vector/scalar\n        \"\"\"\n        n = len(self)\n        ret = [0]*n\n        for i in range(n):\n            ret[i] = super().__getitem__(i)/other\n        return self.__class__(ret)\n    \n    def norm(self,i):\n        \"\"\"\n        L{i}ノルム\n        self.norm(i)\n        \"\"\"\n        return norm(self,i)\n    \n    def __pow__(self,other):\n        \"\"\"\n        外積\n        self**other\n        \"\"\"\n        n = len(self)\n        ret = [0]*3\n        x = self[:]\n        y = other[:]\n        if n == 2:\n            x.append(0)\n            y.append(0)\n        if n == 2 or n == 3:\n            for i in range(3):\n                ret[0],ret[1],ret[2] = x[1]*y[2]-x[2]*y[1],x[2]*y[0]-x[0]*y[2],x[0]*y[1]-x[1]*y[0]\n            ret = Vector(ret)\n            if n == 2:\n                return ret\n            else:\n                return ret\n\nclass Segment:\n    \"\"\"\n    線分クラス\n    \"\"\"\n    def __init__(self,v1,v2):\n        self.v1 = v1\n        self.v2 = v2\n    \n    def length(self):\n        return norm(self.v1-self.v2)\n\n    def get_unit_vec(self):\n        #方向単位ベクトル\n        dist = norm(self.v2-self.v1)\n        if dist != 0:\n            return (self.v2-self.v1)/dist\n        else:\n            return False\n    \n    def projection(self,vector):\n        #射影点(線分を直線と見たときの)\n        unit_vec = self.get_unit_vec()\n        t = unit_vec*(vector-self.v1)\n        return self.v1 + t*unit_vec\n    \n    def is_vertical(self,other):\n        #線分の直交判定\n        return is_equal(0,self.get_unit_vec()*other.get_unit_vec())\n    \n    def is_horizontal(self,other):\n        #線分の平行判定\n        return is_equal(0,self.get_unit_vec()**other.get_unit_vec())\n    \n    def reflection(self,vector):\n        #反射点(線分を直線と見たときの)\n        projection = self.projection(vector)\n        v = projection - vector\n        return projection + vector\n    \n    def include(self,vector):\n        #線分が点を含むか否か\n        proj = self.projection(vector)\n        if not is_equal(norm(proj-vector),0):\n            return False\n        else:\n            n = len(self.v1)\n            f = True\n            for i in range(n):\n                f &= ((self.v1[i] <= vector[i] <= self.v2[i]) or (self.v2[i] <= vector[i] <=self.v1[i]))\n            return f\n    \n    def distance(self,other):\n        #点と線分の距離\n        if isinstance(other,Vector):\n            proj = self.projection(other)\n            if self.include(proj):\n                return norm(proj-other)\n            else:\n                ret = []\n                ret.append(norm(self.v1-other))\n                ret.append(norm(self.v2-other))\n                return min(ret)\n\n    def ccw(self,vector):\n        \"\"\"\n        線分に対して点が反時計回りの位置にある(1)か時計回りの位置にある(-1)か線分上にある(0)か\n        \"\"\"\n        direction = self.v2 - self.v1\n        v = vector - self.v1\n        if self.include(vector):\n            return 0\n        else:\n            cross = direction**v\n            if cross[2] <= 0:\n                return 1\n            else:\n                return -1\n    \n    def intersect(self,segment):\n        \"\"\"\n        線分の交差判定\n        \"\"\"\n        ccw12 = self.ccw(segment.v1)\n        ccw13 = self.ccw(segment.v2)\n        ccw20 = segment.ccw(self.v1)\n        ccw21 = segment.ccw(self.v2)\n        \n        if ccw12*ccw13*ccw20*ccw21 == 0:\n            return True\n        else:\n            if ccw12*ccw13 < 0 and ccw20*ccw21 < 0:\n                return True\n            else:\n                return False\n\nclass Line(Segment):\n    \"\"\"\n    直線クラス\n    \"\"\"\n    #直線上に点が存在するか否か\n    def include(self,vector):\n        proj = self.projection(vector)\n        return is_equal(norm(proj-vector),0)\n\nq = int(input())\nps =[[[0] for _ in range(4)] for _ in range(q)]\nfor i in range(q):\n    tmp = list(map(int,input().split()))\n    for j in range(4):\n        ps[i][j] = Vector(tmp[2*j:2*(j+1)])\n\nfor i in range(q):\n    ans = []\n    p0,p1,p2,p3 = ps[i]\n    S1 = Segment(p0,p1)\n    S2 = Segment(p2,p3)\n    if S1.intersect(S2):\n        ans.append(0)\n    else:\n        ans.append(S1.distance(p2))\n        ans.append(S1.distance(p3))\n        ans.append(S2.distance(p0))\n        ans.append(S2.distance(p1))\n    \n    print(min(ans))\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "language": "Python",
    "code": "import math\n\nclass Point():\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def distance(self, pnt):\n        return math.sqrt((self.x - pnt.x)**2 + (self.y - pnt.y)**2)\n\nclass Segment():\n    def __init__(self, x1, y1, x2, y2):\n        self.p1 = Point(x1, y1)\n        self.p2 = Point(x2, y2)\n        if self.p1.x == self.p2.x:\n            self.a = float('inf')\n            self.b = None\n        else:\n            self.a = (self.p1.y - self.p2.y)/(self.p1.x - self.p2.x)\n            self.b = self.p1.y - self.a*self.p1.x\n\n    def is_intersect(self, seg):\n        a = (seg.p1.x - seg.p2.x) * (self.p1.y - seg.p1.y) + (seg.p1.y - seg.p2.y) * (seg.p1.x - self.p1.x)\n        b = (seg.p1.x - seg.p2.x) * (self.p2.y - seg.p1.y) + (seg.p1.y - seg.p2.y) * (seg.p1.x - self.p2.x)\n        c = (self.p1.x - self.p2.x) * (seg.p1.y - self.p1.y) + (self.p1.y - self.p2.y) * (self.p1.x - seg.p1.x)\n        d = (self.p1.x - self.p2.x) * (seg.p2.y - self.p1.y) + (self.p1.y - self.p2.y) * (self.p1.x - seg.p2.x)\n        e = (self.p1.x - seg.p1.x)*(self.p2.x - seg.p2.x)\n        f = (self.p1.x - seg.p2.x)*(self.p2.x - seg.p1.x)\n        g = (self.p1.y - seg.p1.y)*(self.p2.y - seg.p2.y)\n        h = (self.p1.y - seg.p2.y)*(self.p2.y - seg.p1.y)\n        return a*b <= 0 and c*d <= 0 and (e <= 0 or f <= 0) and (g <= 0 or h <= 0)\n\n    def cross_point(self, seg):\n        if self.is_intersect(seg) == False: return None\n        if self.a == float('inf'):\n            return self.p1.x, seg.a * self.p1.x + seg.b\n        elif seg.a == float('inf'):\n            return seg.p1.x, self.a * seg.p1.x + self.b\n        else:\n            x = -(self.b - seg.b)/(self.a - seg.a)\n            y = seg.a * x + seg.b\n            return x, y\n\n    def distance_with_point(self, pnt):\n        vec_a = Point(self.p2.x - self.p1.x, self.p2.y - self.p1.y)\n        vec_b = Point(pnt.x - self.p1.x, pnt.y - self.p1.y)\n        ip = vec_a.x*vec_b.x + vec_a.y*vec_b.y\n        dist2 = (self.p1.x - self.p2.x)**2 + (self.p1.y - self.p2.y)**2\n        if ip/dist2 <= 0:\n            return pnt.distance(self.p1)\n        elif ip/dist2 >= 1:\n            return pnt.distance(self.p2)\n        else:\n            tmppnt = Point(self.p1.x + vec_a.x*(ip/dist2), self.p1.y + vec_a.y*(ip/dist2))\n            return pnt.distance(tmppnt)\n\n    def distance_with_segment(self, seg):\n        if self.is_intersect(seg): return 0\n        a = self.distance_with_point(seg.p1)\n        b = self.distance_with_point(seg.p2)\n        c = seg.distance_with_point(self.p1)\n        d = seg.distance_with_point(self.p2)\n        return min(a, b, c, d)\n\nq = int(input())\nfor i in range(q):\n    x0, y0, x1, y1, x2, y2, x3, y3 = list(map(int, input().split(' ')))\n    line1, line2 = Segment(x0, y0, x1, y1), Segment(x2, y2, x3, y3)\n    dist = line1.distance_with_segment(line2)\n    print('%.9f'%dist)\n\n"
  },
  {
    "language": "Python",
    "code": "#! /usr/bin/env python3\n\nfrom typing import List, Tuple\nfrom math import sqrt\n\nEPS = 1e-10\n\n\ndef float_equal(x: float, y: float) -> bool:\n    return abs(x - y) < EPS\n\n\nclass Point:\n\n    def __init__(self, x: float=0.0, y: float=0.0) -> None:\n        self.x = x\n        self.y = y\n\n    def __repr__(self) -> str:\n        return \"Point({}, {})\".format(self.x, self.y)\n\n    def __eq__(self, other: object) -> bool:\n        if not isinstance(other, Point):\n            # print(\"NotImplemented in Point\")\n            return NotImplemented\n        return float_equal(self.x, other.x) and \\\n            float_equal(self.y, other.y)\n\n    def __add__(self, other: 'Point') -> 'Point':\n        return Point(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other: 'Point') -> 'Point':\n        return Point(self.x - other.x, self.y - other.y)\n\n    def __mul__(self, k: float) -> 'Point':\n        return Point(self.x * k, self.y * k)\n\n    def __rmul__(self, k: float) -> 'Point':\n        return self * k\n\n    def __truediv__(self, k: float) -> 'Point':\n        return Point(self.x / k, self.y / k)\n\n    def __lt__(self, other: 'Point') -> bool:\n        return self.y < other.y \\\n            if abs(self.x - other.x) < EPS \\\n            else self.x < other.x\n\n    def norm(self):\n        return self.x * self.x + self.y * self.y\n\n    def abs(self):\n        return sqrt(self.norm())\n\n    def dot(self, other: 'Point') -> float:\n        return self.x * other.x + self.y * other.y\n\n    def cross(self, other: 'Point') -> float:\n        return self.x * other.y - self.y * other.x\n\n    def is_orthogonal(self, other: 'Point') -> bool:\n        return float_equal(self.dot(other), 0.0)\n\n    def is_parallel(self, other: 'Point') -> bool:\n        return float_equal(self.cross(other), 0.0)\n\n    def distance(self, other: 'Point') -> float:\n        return (self - other).abs()\n\n    def in_side_of(self, seg: 'Segment') -> bool:\n        return seg.vector().dot(\n            Segment(seg.p1, self).vector()) >= 0\n\n    def in_width_of(self, seg: 'Segment') -> bool:\n        return \\\n            self.in_side_of(seg) and \\\n            self.in_side_of(seg.reverse())\n\n    def distance_to_segment(self, seg: 'Segment') -> float:\n        if self.in_width_of(seg):\n            return self.distance(seg.projection(self))\n        else:\n            return min(self.distance(seg.p1),\n                       self.distance(seg.p2))\n\n\nVector = Point\n\n\nclass Segment:\n\n    def __init__(self, p1: Point = None, p2: Point = None) -> None:\n        self.p1: Point = Point() if p1 is None else p1\n        self.p2: Point = Point() if p2 is None else p2\n\n    def __repr__(self) -> str:\n        return \"Segment({}, {})\".format(self.p1, self.p2)\n\n    def __eq__(self, other: object) -> bool:\n        if not isinstance(other, Segment):\n            # print(\"NotImplemented in Segment\")\n            return NotImplemented\n        return self.p1 == other.p1 and self.p2 == other.p2\n\n    def vector(self) -> Vector:\n        return self.p2 - self.p1\n\n    def reverse(self) -> 'Segment':\n        return Segment(self.p2, self.p1)\n\n    def is_orthogonal(self, other: 'Segment') -> bool:\n        return self.vector().is_orthogonal(other.vector())\n\n    def is_parallel(self, other: 'Segment') -> bool:\n        return self.vector().is_parallel(other.vector())\n\n    def projection(self, p: Point) -> Point:\n        v = self.vector()\n        vp = p - self.p1\n        return v.dot(vp) / v.norm() * v + self.p1\n\n    def reflection(self, p: Point) -> Point:\n        x = self.projection(p)\n        return p + 2 * (x - p)\n\n    def intersect_ratio(self, other: 'Segment') -> Tuple[float, float]:\n        a = self.vector()\n        b = other.vector()\n        c = self.p1 - other.p1\n        s = b.cross(c) / a.cross(b)\n        t = a.cross(c) / a.cross(b)\n        return s, t\n\n    def intersects(self, other: 'Segment') -> bool:\n        s, t = self.intersect_ratio(other)\n        return (0 <= s <= 1) and (0 <= t <= 1)\n\n    def intersection(self, other: 'Segment') -> Point:\n        s, _ = self.intersect_ratio(other)\n        return self.p1 + s * self.vector()\n\n    def distance_with_segment(self, other: 'Segment') -> float:\n        if not self.is_parallel(other) and \\\n                self.intersects(other):\n            return 0\n        else:\n            return min(\n                self.p1.distance_to_segment(other),\n                self.p2.distance_to_segment(other),\n                other.p1.distance_to_segment(self),\n                other.p2.distance_to_segment(self))\n\n\nLine = Segment\n\n\nclass Circle:\n\n    def __init__(self, c: Point=None, r: float=0.0) -> None:\n        self.c: Point = Point() if c is None else c\n        self.r: float = r\n\n    def __eq__(self, other: object) -> bool:\n        if not isinstance(other, Circle):\n            return NotImplemented\n        return self.c == other.c and self.r == other.r\n\n    def __repr__(self) -> str:\n        return \"Circle({}, {})\".format(self.c, self.r)\n        \ndef main() -> None:\n    n = int(input())\n\n    for _ in range(n):\n        x1, y1, x2, y2, x3, y3, x4, y4 = [int(x) for x in input().split()]\n        s1 = Segment(Point(x1, y1), Point(x2, y2))\n        s2 = Segment(Point(x3, y3), Point(x4, y4))\n        print(s1.distance_with_segment(s2))\n\n\nif __name__ == \"__main__\":\n    main()\n\n\n"
  },
  {
    "language": "Python",
    "code": "#!/usr/bin/python3\n\nimport array\nfrom fractions import Fraction\nimport math\nimport os\nimport sys\n\n\ndef main():\n    Q = read_int()\n    for _ in range(Q):\n        x0, y0, x1, y1, x2, y2, x3, y3 = read_ints()\n        print(solve(Vec(x0, y0), Vec(x1, y1), Vec(x2, y2), Vec(x3, y3)))\n\n\ndef pairwise_min2(a, b, c):\n    return min(b.abs2(), c.abs2(),\n               (b - a).abs2(), (c - a).abs2())\n\n\ndef calc3(a, b, c):\n    c_ab = a.cross(b)\n    c_ac = a.cross(c)\n    if c_ab == 0 and c_ac == 0:  # on line\n        s = Fraction(a.dot(b), a.abs2())\n        t = Fraction(a.dot(c), a.abs2())\n        if s < 0 and t < 0:\n            return (max(s, t) * a).abs2()\n        if s > 1 and t > 1:\n            return ((min(s, t) - 1) * a).abs2()\n        return 0\n\n    cb = c - b\n    c_acb = a.cross(cb)\n    if c_acb != 0:  # not parallel\n        u = Fraction(b.cross(cb), c_acb)\n        v = Fraction(b.cross(a), c_acb)\n        if 0 <= u <= 1 and 0 <= v <= 1:\n            return 0  # crossed\n\n    d_cba = cb.dot(a)\n    if d_cba == 0:  # orthogonal\n        s = Fraction(b.dot(a), a.abs2())\n        if 0 <= s <= 1:\n            sa = s * a\n            return min((b - sa).abs2(), (c - sa).abs2())\n        return pairwise_min2(a, b, c)\n\n    d_ba = b.dot(a)\n    d_ca = c.dot(a)\n    a2 = a.abs2()\n    s = Fraction(d_ba, a2)\n    t = Fraction(d_ca, a2)\n    p = Fraction(-d_ba, d_cba)\n    q = Fraction(a2 - d_ba, d_cba)\n\n    dists = [pairwise_min2(a, b, c)]\n    if 0 <= s <= 1:\n        dists.append((b - s * a).abs2())\n    if 0 <= t <= 1:\n        dists.append((c - t * a).abs2())\n    if 0 <= p <= 1:\n        dists.append((b + p * cb).abs2())\n    if 0 <= q <= 1:\n        dists.append((b + q * cb - a).abs2())\n\n    return min(dists)\n\n\ndef solve(u, v, w, x):\n    return math.sqrt(min(calc3(v - u, w - u, x - u),\n                         calc3(x - w, u - w, v - w)))\n\n\n###############################################################################\n# AUXILIARY FUNCTIONS\n\nclass Vec(object):\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n        super().__init__()\n\n    def __add__(self, other):\n        return Vec(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other):\n        return Vec(self.x - other.x, self.y - other.y)\n\n    def __mul__(self, scalar):\n        return Vec(self.x * scalar, self.y * scalar)\n\n    def __rmul__(self, scalar):\n        return Vec(self.x * scalar, self.y * scalar)\n\n    def __truediv__(self, scalar):\n        return Vec(self.x / scalar, self.y / scalar)\n\n    def __iadd__(self, other):\n        self.x += other.x\n        self.y += other.y\n        return self\n\n    def __isub__(self, other):\n        self.x -= other.x\n        self.y -= other.y\n        return self\n\n    def __imul__(self, scalar):\n        self.x *= scalar\n        self.y *= scalar\n        return self\n\n    def __idiv__(self, scalar):\n        self.x /= scalar\n        self.y /= scalar\n        return self\n\n    def __neg__(self):\n        return Vec(-self.x, -self.y)\n\n    def dot(self, other):\n        return self.x * other.x + self.y * other.y\n\n    def cross(self, other):\n        return self.x * other.y - self.y * other.x\n\n    def abs2(self):\n        return self.x * self.x + self.y * self.y\n\n    def __abs__(self):\n        return math.sqrt(float(self.abs2()))\n\n    def __str__(self):\n        return '({}, {})'.format(self.x, self.y)\n\n\nDEBUG = 'DEBUG' in os.environ\n\n\ndef inp():\n    return sys.stdin.readline().rstrip()\n\n\ndef read_int():\n    return int(inp())\n\n\ndef read_ints():\n    return [int(e) for e in inp().split()]\n\n\ndef dprint(*value, sep=' ', end='\\n'):\n    if DEBUG:\n        print(*value, sep=sep, end=end)\n\n\nif __name__ == '__main__':\n    main()\n\n"
  },
  {
    "language": "Python",
    "code": "import math\n\n\nclass Vector2():\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __add__(self, v):\n        return Vector2(self.x+v.x, self.y+v.y)\n\n    def __sub__(self, v):\n        return Vector2(self.x-v.x, self.y-v.y)\n\n    def __mul__(self, v):\n        return Vector2(self.x*v, self.y*v)\n\n    def __truediv__(self, v):\n        return Vector2(self.x/v, self.y/v)\n\n    def __abs__(self):\n        return math.sqrt(float(self.x*self.x+self.y*self.y))\n\n    def dot(self, v):\n        return self.x*v.x+self.y*v.y\n\n    def cross(self, v):\n        return self.x*v.y-self.y*v.x\n\n    def norm(self):\n        d = abs(self)\n        return Vector2(self.x/d, self.y/d)\n\n\ndef distanceLP(v1, v2, p):\n    '''\n    v1 -> v2の直線とpとの距離\n    '''\n    return abs((v2-v1).cross(p-v1))/abs(v2-v1)\n\n\ndef distanceSP(v1, v2, p):\n    '''\n    v1 -> v2の線分とpとの距離\n    '''\n    if (v2-v1).dot(p-v1) < 0.0:\n        return abs(p-v1)\n    if (v1-v2).dot(p-v2) < 0.0:\n        return abs(p-v2)\n    return distanceLP(v1, v2, p)\n\n\ndef intersect(p1, p2, p3, p4):\n    '''\n    p1p2とp3p4の交差判定\n    '''\n    t1 = (p1.x-p2.x)*(p3.y-p1.y)+(p1.y-p2.y)*(p1.x-p3.x)\n    t2 = (p1.x-p2.x)*(p4.y-p1.y)+(p1.y-p2.y)*(p1.x-p4.x)\n    t3 = (p3.x-p4.x)*(p1.y-p3.y)+(p3.y-p4.y)*(p3.x-p1.x)\n    t4 = (p3.x-p4.x)*(p2.y-p3.y)+(p3.y-p4.y)*(p3.x-p2.x)\n    return (t1*t2) < 0.0 and (t3*t4) < 0.0\n\n\ndef distance(a1, a2, b1, b2):\n    '''\n    線分a1a2とb1b2の距離\n    '''\n    if intersect(a1, a2, b1, b2):\n        return 0.0\n    return min([\n        min([distanceSP(a1, a2, b1), distanceSP(a1, a2, b2)]),\n        min([distanceSP(b1, b2, a1), distanceSP(b1, b2, a2)])\n    ])\n\n\nq = int(input())\nfor i in range(q):\n    x0, y0, x1, y1, x2, y2, x3, y3 = map(int, input().split())\n    p0 = Vector2(x0, y0)\n    p1 = Vector2(x1, y1)\n    p2 = Vector2(x2, y2)\n    p3 = Vector2(x3, y3)\n    s1 = p1-p0\n    s2 = p3-p2\n    print(f\"{distance(p0, p1, p2, p3):.10f}\")\n\n"
  },
  {
    "language": "Python",
    "code": "def cross(c1, c2):\n    return c1.real * c2.imag - c1.imag * c2.real\n\ndef dot(c1, c2):\n    return c1.real * c2.real + c1.imag * c2.imag\n\ndef ccw(p0, p1, p2):\n    a = p1 - p0\n    b = p2 - p0\n    cross_ab = cross(a, b)\n    if cross_ab > 0:\n        return 1\n    elif cross_ab < 0:\n        return -1\n    elif dot(a, b) < 0:\n        return 1\n    elif abs(a) < abs(b):\n        return -1\n    else:\n        return 0\n\ndef intersect(p1, p2, p3, p4):\n    # p1 and p2 are end points of a segment.\n    # p3 and p4 are end points of the other segment.\n    if (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0) and \\\n       (ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0):\n        return True\n    else:\n        return False\n\ndef get_distance_sp(sp1, sp2, p):\n    a = sp2 - sp1\n    b = p - sp1\n    if dot(a, b) < 0:\n        return abs(b)\n    c = sp1 - sp2\n    d = p - sp2\n    if dot(c, d) < 0:\n        return abs(d)\n    return abs(cross(a, b)) / abs(a)\n\ndef print_distance(p1, p2, p3, p4):\n    # parameters are the same as intersect.\n    if intersect(p1, p2, p3, p4):\n        print(\"0.0000000000\")\n    else:\n        d = min(get_distance_sp(p1, p2, p3), get_distance_sp(p1, p2, p4),\n                get_distance_sp(p3, p4, p1), get_distance_sp(p3, p4, p2))\n        print(\"{0:.10f}\".format(d))\n\n\nimport sys\n\nfile_input = sys.stdin\n\nsq = file_input.readline()\n\nfor line in file_input:\n    x_p0, y_p0, x_p1, y_p1, x_p2, y_p2, x_p3, y_p3 = map(int, line.split())\n    p0 = x_p0 + y_p0 * 1j\n    p1 = x_p1 + y_p1 * 1j\n    p2 = x_p2 + y_p2 * 1j\n    p3 = x_p3 + y_p3 * 1j\n    print_distance(p0, p1, p2, p3)"
  },
  {
    "language": "Python",
    "code": "import cmath\nimport os\nimport sys\n\nif os.getenv(\"LOCAL\"):\n    sys.stdin = open(\"_in.txt\", \"r\")\n\nsys.setrecursionlimit(10 ** 9)\nINF = float(\"inf\")\nIINF = 10 ** 18\nMOD = 10 ** 9 + 7\n# MOD = 998244353\n\nPI = cmath.pi\nTAU = cmath.pi * 2\nEPS = 1e-8\n\n\nclass Point:\n    \"\"\"\n    2次元空間上の点\n    \"\"\"\n\n    def __init__(self, c: complex):\n        self.c = c\n\n    @property\n    def x(self):\n        return self.c.real\n\n    @property\n    def y(self):\n        return self.c.imag\n\n    @staticmethod\n    def from_rect(x: float, y: float):\n        return Point(complex(x, y))\n\n    @staticmethod\n    def from_polar(r: float, phi: float):\n        return Point(cmath.rect(r, phi))\n\n    def __add__(self, p):\n        \"\"\"\n        :param Point p:\n        \"\"\"\n        return Point(self.c + p.c)\n\n    def __iadd__(self, p):\n        \"\"\"\n        :param Point p:\n        \"\"\"\n        self.c += p.c\n        return self\n\n    def __sub__(self, p):\n        \"\"\"\n        :param Point p:\n        \"\"\"\n        return Point(self.c - p.c)\n\n    def __isub__(self, p):\n        \"\"\"\n        :param Point p:\n        \"\"\"\n        self.c -= p.c\n        return self\n\n    def __mul__(self, f: float):\n        return Point(self.c * f)\n\n    def __imul__(self, f: float):\n        self.c *= f\n        return self\n\n    def __truediv__(self, f: float):\n        return Point(self.c / f)\n\n    def __itruediv__(self, f: float):\n        self.c /= f\n        return self\n\n    def __repr__(self):\n        return \"({}, {})\".format(round(self.x, 10), round(self.y, 10))\n\n    def __neg__(self):\n        return Point(-self.c)\n\n    def __eq__(self, p):\n        return abs(self.c - p.c) < EPS\n\n    def __abs__(self):\n        return abs(self.c)\n\n    def dot(self, p):\n        \"\"\"\n        内積\n        :param Point p:\n        :rtype: float\n        \"\"\"\n        return self.x * p.x + self.y * p.y\n\n    def det(self, p):\n        \"\"\"\n        外積\n        :param Point p:\n        :rtype: float\n        \"\"\"\n        return self.x * p.y - self.y * p.x\n\n    def dist(self, p):\n        \"\"\"\n        距離\n        :param Point p:\n        :rtype: float\n        \"\"\"\n        return abs(self.c - p.c)\n\n    def r(self):\n        \"\"\"\n        原点からの距離\n        :rtype: float\n        \"\"\"\n        return abs(self.c)\n\n    def phase(self):\n        \"\"\"\n        原点からの角度\n        :rtype: float\n        \"\"\"\n        return cmath.phase(self.c)\n\n    def angle(self, p, q):\n        \"\"\"\n        p に向かってる状態から q まで反時計回りに回転するときの角度\n        :param Point p:\n        :param Point q:\n        :rtype: float\n        \"\"\"\n        return (cmath.phase(q.c - self.c) - cmath.phase(p.c - self.c)) % TAU\n\n    def area(self, p, q):\n        \"\"\"\n        p, q となす三角形の面積\n        :param Point p:\n        :param Point q:\n        :rtype: float\n        \"\"\"\n        return abs((p - self).det(q - self) / 2)\n\n    def projection_point(self, p, q, allow_outer=False):\n        \"\"\"\n        線分 pq を通る直線上に垂線をおろしたときの足の座標\n        Verify: http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_A&lang=ja\n        :param Point p:\n        :param Point q:\n        :param allow_outer: 答えが線分の間になくても OK\n        :rtype: Point|None\n        \"\"\"\n        diff_q = q - p\n        # 答えの p からの距離\n        r = (self - p).dot(diff_q) / abs(diff_q)\n        # 線分の角度\n        phase = diff_q.phase()\n\n        ret = Point.from_polar(r, phase) + p\n        if allow_outer or (p - ret).dot(q - ret) < EPS:\n            return ret\n        return None\n\n    def reflection_point(self, p, q):\n        \"\"\"\n        直線 pq を挟んで反対にある点\n        Verify: http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_B&lang=ja\n        :param Point p:\n        :param Point q:\n        :rtype: Point\n        \"\"\"\n        # 距離\n        r = abs(self - p)\n        # pq と p-self の角度\n        angle = p.angle(q, self)\n        # 直線を挟んで角度を反対にする\n        angle = (q - p).phase() - angle\n        return Point.from_polar(r, angle) + p\n\n    def on_segment(self, p, q, allow_side=True):\n        \"\"\"\n        点が線分 pq の上に乗っているか\n        Verify: http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_C&lang=ja\n        :param Point p:\n        :param Point q:\n        :param allow_side: 端っこでギリギリ触れているのを許容するか\n        :rtype: bool\n        \"\"\"\n        if not allow_side and (self == p or self == q):\n            return False\n        # 外積がゼロ: 面積がゼロ == 一直線\n        # 内積がマイナス: p - self - q の順に並んでる\n        return abs((p - self).det(q - self)) < EPS and (p - self).dot(q - self) < EPS\n\n\nclass Line:\n    \"\"\"\n    2次元空間上の直線\n    \"\"\"\n\n    def __init__(self, a: float, b: float, c: float):\n        \"\"\"\n        直線 ax + by + c = 0\n        \"\"\"\n        self.a = a\n        self.b = b\n        self.c = c\n\n    @staticmethod\n    def from_gradient(grad: float, intercept: float):\n        \"\"\"\n        直線 y = ax + b\n        :param grad: 傾き\n        :param intercept: 切片\n        :return:\n        \"\"\"\n        return Line(grad, -1, intercept)\n\n    @staticmethod\n    def from_segment(p1, p2):\n        \"\"\"\n        :param Point p1:\n        :param Point p2:\n        \"\"\"\n        a = p2.y - p1.y\n        b = p1.x - p2.x\n        c = p2.y * (p2.x - p1.x) - p2.x * (p2.y - p1.y)\n        return Line(a, b, c)\n\n    @property\n    def gradient(self):\n        \"\"\"\n        傾き\n        \"\"\"\n        return INF if self.b == 0 else -self.a / self.b\n\n    @property\n    def intercept(self):\n        \"\"\"\n        切片\n        \"\"\"\n        return INF if self.b == 0 else -self.c / self.b\n\n    def is_parallel_to(self, l):\n        \"\"\"\n        平行かどうか\n        Verify: http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_A&lang=ja\n        :param Line l:\n        \"\"\"\n        # 法線ベクトル同士の外積がゼロ\n        return abs(Point.from_rect(self.a, self.b).det(Point.from_rect(l.a, l.b))) < EPS\n\n    def is_orthogonal_to(self, l):\n        \"\"\"\n        直行しているかどうか\n        Verify: http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_A&lang=ja\n        :param Line l:\n        \"\"\"\n        # 法線ベクトル同士の内積がゼロ\n        return abs(Point.from_rect(self.a, self.b).dot(Point.from_rect(l.a, l.b))) < EPS\n\n    def intersection_point(self, l):\n        \"\"\"\n        交差する点\n        Verify: http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_B&lang=ja\n        Verify: http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_C&lang=ja\n        FIXME: 誤差が気になる。EPS <= 1e-9 だと CGL_2_B ダメだった。\n        :param l:\n        :rtype: Point|None\n        \"\"\"\n        a1, b1, c1 = self.a, self.b, self.c\n        a2, b2, c2 = l.a, l.b, l.c\n        det = a1 * b2 - a2 * b1\n        if abs(det) < EPS:\n            # 並行\n            return None\n        x = (b1 * c2 - b2 * c1) / det\n        y = (a2 * c1 - a1 * c2) / det\n        return Point.from_rect(x, y)\n\n\nclass Segment:\n    \"\"\"\n    2次元空間上の線分\n    \"\"\"\n\n    def __init__(self, p1, p2):\n        \"\"\"\n        :param Point p1:\n        :param Point p2:\n        \"\"\"\n        self.p1 = p1\n        self.p2 = p2\n\n    def norm(self):\n        \"\"\"\n        線分の長さ\n        \"\"\"\n        return abs(self.p1 - self.p2)\n\n    def intersects_with(self, s, allow_side=True):\n        \"\"\"\n        交差するかどうか\n        Verify: http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_B&lang=ja\n        :param Segment s:\n        :param allow_side: 端っこでギリギリ触れているのを許容するか\n        \"\"\"\n        l1 = Line.from_segment(self.p1, self.p2)\n        l2 = Line.from_segment(s.p1, s.p2)\n        if l1.is_parallel_to(l2):\n            # 並行なら線分の端点がもう片方の線分の上にあるかどうか\n            return (s.p1.on_segment(self.p1, self.p2, allow_side) or\n                    s.p2.on_segment(self.p1, self.p2, allow_side) or\n                    self.p1.on_segment(s.p1, s.p2, allow_side) or\n                    self.p2.on_segment(s.p1, s.p2, allow_side))\n        else:\n            # 直線同士の交点が線分の上にあるかどうか\n            p = l1.intersection_point(l2)\n            return p.on_segment(self.p1, self.p2, allow_side) and p.on_segment(s.p1, s.p2, allow_side)\n\n    def closest_point(self, p):\n        \"\"\"\n        線分上の、p に最も近い点\n        :param Point p:\n        \"\"\"\n        # p からおろした垂線までの距離\n        d = (p - self.p1).dot(self.p2 - self.p1) / self.norm()\n        # p1 より前\n        if d < EPS:\n            return self.p1\n        # p2 より後\n        if -EPS < d - self.norm():\n            return self.p2\n        # 線分上\n        return Point.from_polar(d, (self.p2 - self.p1).phase()) + self.p1\n\n    def dist(self, p):\n        \"\"\"\n        他の点との最短距離\n        :param Point p:\n        \"\"\"\n        return abs(p - self.closest_point(p))\n\n    def dist_segment(self, s):\n        \"\"\"\n        他の線分との最短距離\n        :param Segment s:\n        \"\"\"\n        if self.intersects_with(s):\n            return 0.0\n        return min(\n            self.dist(s.p1),\n            self.dist(s.p2),\n            s.dist(self.p1),\n            s.dist(self.p2),\n        )\n\n\nQ = int(sys.stdin.buffer.readline())\nROWS = [list(map(int, sys.stdin.buffer.readline().split())) for _ in range(Q)]\n\nfor x0, y0, x1, y1, x2, y2, x3, y3 in ROWS:\n    s1 = Segment(Point.from_rect(x0, y0), Point.from_rect(x1, y1))\n    s2 = Segment(Point.from_rect(x2, y2), Point.from_rect(x3, y3))\n    print(s1.dist_segment(s2))\n\n"
  },
  {
    "language": "Python",
    "code": "from itertools import starmap\n\n\ndef cross(a: complex, b: complex) -> float:\n    return float(a.real * b.imag - a.imag * b.real)\n\n\ndef is_intersected(p0: complex, p1: complex, p2: complex, p3: complex) -> bool:\n    max_x1, min_x1 = (p0.real, p1.real) if p0.real > p1.real else (p1.real, p0.real)\n    max_x2, min_x2 = (p2.real, p3.real) if p2.real > p3.real else (p3.real, p2.real)\n    if max_x1 < min_x2 or max_x2 < min_x1:\n        return False\n    max_y1, min_y1 = (p0.imag, p1.imag) if p0.imag > p1.imag else (p1.imag, p0.imag)\n    max_y2, min_y2 = (p2.imag, p3.imag) if p2.imag > p3.imag else (p3.imag, p2.imag)\n    if max_y1 < min_y2 or max_y2 < min_y1:\n        return False\n\n    return (cross(p1 - p0, p2 - p0) * cross(p1 - p0, p3 - p0) < 1e-6\n            and cross(p3 - p2, p0 - p2) * cross(p3 - p2, p1 - p2) < 1e-6)\n\n\ndef point_to_segment(p0: complex, p1: complex, p2: complex) -> float:\n    prod = (p1 - p0).conjugate() * (p2 - p0)\n    if prod.real <= 1e-6:\n        return abs(p2 - p0)\n    l = abs(p1 - p0)  # noqa: E741\n    d = prod.real / l\n    if d >= l:\n        return abs(p2 - p1)\n    return abs(prod.imag) / l\n\n\nif __name__ == \"__main__\":\n    q = int(input())\n    for _ in range(q):\n        x_p0, y_p0, x_p1, y_p1, x_p2, y_p2, x_p3, y_p3 = map(lambda x: int(x),\n                                                             input().split())\n        p0 = complex(x_p0, y_p0)\n        p1 = complex(x_p1, y_p1)\n        p2 = complex(x_p2, y_p2)\n        p3 = complex(x_p3, y_p3)\n\n        if is_intersected(p0, p1, p2, p3):\n            print(0)\n            continue\n\n        ans = min(starmap(point_to_segment,\n                  ((p0, p1, p2), (p0, p1, p3), (p2, p3, p0), (p2, p3, p1))))\n        print(ans)\n\n"
  },
  {
    "language": "Python",
    "code": "#!/usr/bin/env python3\n# CGL_2_D: Segments/Lines - Distance\n\nfrom math import sqrt\n\n\nclass Segment:\n    def __init__(self, p0, p1):\n        self.end_points = (p0, p1)\n\n    def another(self, p):\n        if p == self.end_points[0]:\n            return self.end_points[1]\n        else:\n            return self.end_points[0]\n\n    def distance(self, other):\n        def _distance(p, seg):\n            p0 = seg._closest_point(p)\n            p1 = seg.another(p0)\n            x, y = p\n            x0, y0 = p0\n            x1, y1 = p1\n            vp = (x-x0, y-y0)\n            vseg = (x1-x0, y1-y0)\n            if dot(vp, vseg) <= 0:\n                return length(vp)\n            else:\n                x, y = vp\n                return length(projection(vp, orthogonal(vseg)))\n\n        if self.intersect(other):\n            return 0.0\n\n        dists = []\n        for p0 in self.end_points:\n            dists.append(_distance(p0, other))\n        for p1 in other.end_points:\n            dists.append(_distance(p1, self))\n\n        return min(dists)\n\n    def intersect(self, other):\n        p0, p1 = self.end_points\n        p2, p3 = other.end_points\n\n        if convex(p0, p2, p1, p3):\n            return True\n        else:\n            if (p0 in other or p1 in other\n                    or p2 in self or p3 in self):\n                return True\n\n        return False\n\n    def _closest_point(self, p):\n        p0, p1 = self.end_points\n        x, y = p\n        x0, y0 = p0\n        x1, y1 = p1\n        if length((x0-x, y0-y)) < length((x1-x, y1-y)):\n            return p0\n        else:\n            return p1\n\n    def __contains__(self, p):\n        p0, p1 = self.end_points\n        x0, y0 = p0\n        x1, y1 = p1\n        x, y = p\n        v = (x1-x0, y1-y0)\n        v0 = (x-x0, y-y0)\n        v1 = (x-x1, y-y1)\n        if dot(orthogonal(v0), v1) == 0:\n            if abs(length(v0) + length(v1) - length(v)) < 1e-10:\n                return True\n        return False\n\n\ndef dot(v1, v2):\n    x1, y1 = v1\n    x2, y2 = v2\n    return x1 * x2 + y1 * y2\n\n\ndef orthogonal(v):\n    x, y = v\n    return -y, x\n\n\ndef length(v):\n    x, y = v\n    return sqrt(x**2 + y**2)\n\n\ndef projection(p, v):\n    x, y = v\n    r = dot(p, v) / dot(v, v)\n    return (x*r, y*r)\n\n\ndef convex(p0, p1, p2, p3):\n    ret = []\n    for pa, pb, pc in zip([p0, p1, p2, p3],\n                          [p1, p2, p3, p0],\n                          [p2, p3, p0, p1]):\n        xa, ya = pa\n        xb, yb = pb\n        xc, yc = pc\n        v1 = (xb - xa, yb - ya)\n        v2 = (xc - xb, yc - yb)\n        ret.append(dot(orthogonal(v1), v2))\n\n    return all([d > 0 for d in ret]) or all([d < 0 for d in ret])\n\n\ndef run():\n    q = int(input())\n\n    for _ in range(q):\n        x0, y0, x1, y1, x2, y2, x3, y3 = [int(i) for i in input().split()]\n\n        s0 = Segment((x0, y0), (x1, y1))\n        s1 = Segment((x2, y2), (x3, y3))\n\n        print(\"{:.10f}\".format(s0.distance(s1)))\n\n\nif __name__ == '__main__':\n    run()\n\n"
  },
  {
    "language": "Python",
    "code": "from math import sqrt\n\n\ndef cross(P0, P1, P2):\n    x0, y0 = P0; x1, y1 = P1; x2, y2 = P2\n    x1 -= x0; x2 -= x0\n    y1 -= y0; y2 -= y0\n    return x1*y2 - x2*y1\n\n\ndef dot(P0, P1, P2):\n    x0, y0 = P0; x1, y1 = P1; x2, y2 = P2\n    x1 -= x0; x2 -= x0\n    y1 -= y0; y2 -= y0\n    return x1*x2 + y1*y2\n\n\ndef dist2(P0, P1):\n    x0, y0 = P0; x1, y1 = P1\n    return (x1 - x0)**2 + (y1 - y0)**2\n\n\ndef collision_ll(S0, S1, T0, T1):\n    return cross(S0, S1, T0)*cross(S0, S1, T1) < 0 and cross(T0, T1, S0) * cross(T0, T1, S1) < 0\n\n\ndef dist_lp(S, E, P):\n    dd = dist2(S, E)\n    if 0 <= dot(S, E, P) <= dd:\n        return abs(cross(S, E, P))/sqrt(dd)\n    return sqrt(min(dist2(S, P), dist2(E, P)))\n\n\ndef dist_ll(S0, S1, T0, T1):\n    if collision_ll(S0, S1, T0, T1):\n        return 0\n    return min(\n            dist_lp(S0, S1, T0),\n            dist_lp(S0, S1, T1),\n            dist_lp(T0, T1, S0),\n            dist_lp(T0, T1, S1)\n            )\n\n\nn = int(input())\nfor i in range(n):\n    x0, y0, x1, y1, X0, Y0, X1, Y1 = map(int, input().split())\n    print(\"%.010f\" % dist_ll((x0, y0), (x1, y1), (X0, Y0), (X1, Y1)))\n"
  },
  {
    "language": "Python",
    "code": "from math import sqrt\nq = int(input())\n\nclass Segment(): pass\n\ndef dot(a, b):\n    return sum([i * j for i,j in zip(a, b)])\n\ndef sub(a, b):\n    return [a[0] - b[0],a[1] - b[1]]\n\ndef cross(a, b):\n    return  a[0] * b[1] - a[1] * b[0]\n\ndef norm(a):\n    return sqrt(a[0] ** 2 + a[1] ** 2)\n\ndef ccw(a, b, c):\n    x = sub(b, a)\n    y = sub(c, a)\n    if cross(x, y) > 0: return 1\n    if cross(x, y) < 0: return -1\n    return 0\n\ndef intersect(p1, p2, p3, p4):\n    return ccw(p1, p2, p3) ** ccw(p1, p2, p4) <= 0 and \\\n           ccw(p3, p4, p1) ** ccw(p3, p4, p2) <= 0\n\ndef getDistLP(s, p):\n    return abs(cross(sub(s.r, s.l), sub(p, s.l))) / norm(sub(s.r, s.l))\n\ndef getDistSP(s, p):\n    if dot(sub(s.r, s.l),sub(p, s.l)) < 0: return norm(sub(p, s.l))\n    if dot(sub(s.l, s.r),sub(p, s.r)) < 0: return norm(sub(p, s.r))\n    return getDistLP(s, p)\n\ndef getDist(s1, s2):\n    if intersect(s1.l, s1.r, s2.l, s2.r): return 0\n    return min(getDistSP(s1, s2.l), \n               getDistSP(s1, s2.r),\n               getDistSP(s2, s1.l),\n               getDistSP(s2, s1.r))\n\nfor i in range(q):\n    xp0, yp0, xp1, yp1, xp2, yp2, xp3, yp3  = map(int, input().split())\n    s1 = Segment()\n    s2 = Segment()\n    s1.l = [xp0, yp0]\n    s1.r = [xp1, yp1]\n    s2.l = [xp2, yp2]\n    s2.r = [xp3, yp3]\n    print(getDist(s1, s2))"
  },
  {
    "language": "Python",
    "code": "from sys import stdin\nreadline = stdin.readline\n\n\ndef main():\n    q = int(readline())\n    for i in range(q):\n        xy = map(int, readline().split())\n        p0, p1, p2, p3 = [x + y * 1j for x, y in zip(*[xy] * 2)]\n        print('{:.10f}'.format(distance(p0, p1, p2, p3)))\n\ndef lt(a, b):\n    if a.real != b.real:\n        return a.real < b.real\n    return a.imag < b.imag\nimport itertools\ndef distance(p0, p1, p2, p3):\n    if is_intersected_ls(p0, p1, p2, p3):\n        return 0\n    p = []\n    for i, j in itertools.product([p0, p1], [p2, p3]):\n        p.append(abs(i - j))\n    for i,j,k in [(p0,p1,p2),(p0,p1,p3),(p2,p3,p0),(p2,p3,p1)]:\n        tmp = intersection_of_perpendicular(i,j,k)\n        if (lt(i, k) and lt(k, j)) or (lt(j, k) and lt(k, i)):\n            p.append(abs(tmp - k))\n\n    return min(p)\n\n# line(p1, p2) point(p3)\ndef intersection_of_perpendicular(p1, p2, p3):\n    return p1 + (p2 - p1) * projecter(p2 - p1, p3 - p1)\n \n \ndef projecter(a, b):\n    return dot(a, b) / dot(a, a)\n \n \ndef dot(a, b):\n    return a.real * b.real + a.imag * b.imag\n\n\ndef is_intersected_ls(a1, a2, b1, b2):\n    eps = 0\n    if max(a1.real, a2.real) < min(b1.real, b2.real)\\\n      or max(b1.real, b2.real) < min(a1.real, a2.real)\\\n      or max(a1.imag, a2.imag) < min(b1.imag, b2.imag)\\\n      or max(b1.imag, b2.imag) < min(a1.imag, a2.imag):\n        return False\n    return (cross(a2-a1, b1-a1) * cross(a2-a1, b2-a1) <= eps)\\\n        and (cross(b2-b1, a1-b1) * cross(b2-b1, a2-b1) <= eps)\n\n# http://imagingsolution.blog107.fc2.com/blog-entry-137.html\ndef intersection(p1, p2, p3, p4):\n    a1 = p4 - p2\n    b1 = p2 - p3\n    b2 = p1 - p2\n    s1 = cross(a1, b2) / 2\n    s2 = cross(a1, b1) / 2\n    c1 = p1 + (p3 - p1) * s1 / (s1 + s2)\n    return c1\n\n\ndef cross(a, b):\n    return a.real * b.imag - a.imag * b.real\nmain()"
  },
  {
    "language": "Python",
    "code": "from sys import stdin\nreadline = stdin.readline\n\n\n\ndef main():\n    q = int(readline())\n    for i in range(q):\n        xy = map(int, readline().split())\n        p0, p1, p2, p3 = [x + y * 1j for x, y in zip(*[xy] * 2)]\n        print('{:.10f}'.format(distance(p0, p1, p2, p3)))\n\ndef lt(a, b):\n    if a.real != b.real:\n        return a.real <= b.real\n    return a.imag < b.imag\nimport itertools\ndef distance(p0, p1, p2, p3):\n    if is_intersected_ls(p0, p1, p2, p3):\n        return 0\n    p = []\n    for i, j in itertools.product([p0, p1], [p2, p3]):\n        p.append(abs(i - j))\n    for i,j,k in [(p0,p1,p2),(p0,p1,p3),(p2,p3,p0),(p2,p3,p1)]:\n        tmp = intersection_of_perpendicular(i,j,k)\n        if (lt(i, tmp) and lt(tmp, j)) or (lt(j, tmp) and lt(tmp, i)):\n            p.append(abs(tmp - k))\n\n    return min(p)\n\n# line(p1, p2) point(p3)\ndef intersection_of_perpendicular(p1, p2, p3):\n    return p1 + (p2 - p1) * projecter(p2 - p1, p3 - p1)\n \n \ndef projecter(a, b):\n    return dot(a, b) / dot(a, a)\n \n \ndef dot(a, b):\n    return a.real * b.real + a.imag * b.imag\n\n\ndef is_intersected_ls(a1, a2, b1, b2):\n    eps = 0\n    if max(a1.real, a2.real) < min(b1.real, b2.real)\\\n      or max(b1.real, b2.real) < min(a1.real, a2.real)\\\n      or max(a1.imag, a2.imag) < min(b1.imag, b2.imag)\\\n      or max(b1.imag, b2.imag) < min(a1.imag, a2.imag):\n        return False\n    return (cross(a2-a1, b1-a1) * cross(a2-a1, b2-a1) <= eps)\\\n        and (cross(b2-b1, a1-b1) * cross(b2-b1, a2-b1) <= eps)\n\n# http://imagingsolution.blog107.fc2.com/blog-entry-137.html\ndef intersection(p1, p2, p3, p4):\n    a1 = p4 - p2\n    b1 = p2 - p3\n    b2 = p1 - p2\n    s1 = cross(a1, b2) / 2\n    s2 = cross(a1, b1) / 2\n    c1 = p1 + (p3 - p1) * s1 / (s1 + s2)\n    return c1\n\n\ndef cross(a, b):\n    return a.real * b.imag - a.imag * b.real\nmain()"
  },
  {
    "language": "Python",
    "code": "class Point:\n    def __init__(self, x , y):\n        self.x = x\n        self.y = y\n    def __sub__(self, p):\n        x_sub = self.x - p.x\n        y_sub = self.y - p.y\n        return Point(x_sub, y_sub)\n\nclass Vector:\n    def __init__(self, p):\n        self.x = p.x\n        self.y = p.y\n        self.norm = (p.x ** 2 + p.y ** 2) ** 0.5\n\ndef cross(v1, v2):\n    return v1.x * v2.y - v1.y * v2.x\n\ndef dot(v1, v2):\n    return v1.x * v2.x + v1.y * v2.y\n\ndef ccw(p0, p1, p2):\n    a = Vector(p1 - p0)\n    b = Vector(p2 - p0)\n    cross_ab = cross(a, b)\n    if cross_ab > 0:\n        return 1\n    elif cross_ab < 0:\n        return -1\n    elif dot(a, b) < 0:\n        return 1\n    elif a.norm < b.norm:\n        return -1\n    else:\n        return 0\n\ndef intersect(p1, p2, p3, p4):\n    if (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0) and \\\n       (ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0):\n        return True\n    else:\n        return False\n\ndef getDistanceSP(sp1, sp2, p):\n    a = Vector(sp2 - sp1)\n    b = Vector(p - sp1)\n    if dot(a, b) < 0:\n        return b.norm\n    c = Vector(sp1 - sp2)\n    d = Vector(p - sp2)\n    if dot(c, d) < 0:\n        return d.norm\n    return abs(cross(a, b) / a.norm)\n\ndef getDistance(p1, p2, p3, p4):\n    if intersect(p1, p2, p3, p4):\n        print(\"0.00000000\")\n    else:\n        d = min(getDistanceSP(p1, p2, p3), getDistanceSP(p1, p2, p4),\n                getDistanceSP(p3, p4, p1), getDistanceSP(p3, p4, p2))\n        print(\"{0:.10f}\".format(d))\n\n\nimport sys\n\nfile_input = sys.stdin\n\nsq = file_input.readline()\n\nfor line in file_input:\n    x_p0, y_p0, x_p1, y_p1, x_p2, y_p2, x_p3, y_p3 = map(int, line.split())\n    p0 = Point(x_p0, y_p0)\n    p1 = Point(x_p1, y_p1)\n    p2 = Point(x_p2, y_p2)\n    p3 = Point(x_p3, y_p3)\n    getDistance(p0, p1, p2, p3)"
  },
  {
    "language": "Python",
    "code": "import sys\nclass Line:\n    def __init__(self,p1,p2):\n        if p1[1] < p2[1]:self.s=p2;self.e=p1\n        elif p1[1] > p2[1]:self.s=p1;self.e=p2\n        else:\n            if p1[0] < p2[0]:self.s=p1;self.e=p2\n            else:self.s=p2;self.e=p1\n\ndef cross(a,b):return a[0]*b[1] - a[1]*b[0]\ndef dot(a,b):return a[0]*b[0]+a[1]*b[1]\ndef dif(a,b):return [x-y for x,y in zip(a,b)]\ndef dist(a,b):return ((a[0]-b[0])**2+(a[1]-b[1])**2)**0.5\ndef isec(l,m):\n    a = dif(l.e,l.s);b = dif(m.e,l.s);c = dif(m.s,l.s)\n    d = dif(m.e,m.s);e = dif(l.e,m.s);f = dif(l.s,m.s)\n    g = lambda a, b : cross(a,b)==0 and dot(a,b)>0 and dot(b,b)<dot(a,a)\n    if g(a,b) or g(a,c) or g(d,e) or g(d,f):return True\n    elif l.s == m.e or l.s == m.s or l.e == m.e or l.e == m.s:return True\n    elif cross(a,b) * cross(a,c) >= 0 or cross(d,e) * cross(d,f) >= 0:return False\n    else:return True\ndef plus(a,b):return [x+y for x,y in zip(a,b)]\ndef projection(a,b):return [x*dot(a,b)/dot(a,a) for x in a]\ndef proj(A,B,C,D):\n    AB = dif(B,A) ; AC = dif(C,A) ; AD = dif(D,A)\n    CD = dif(D,C) ; CA = dif(A,C) ; CB = dif(B,C)\n    _A = plus(projection(CD,CA),C) \n    _B = plus(projection(CD,CB),C)\n    _C = plus(projection(AB,AC),A)\n    _D = plus(projection(AB,AD),A)\n    return [_A,_B,_C,_D]\ndef Order(a,b):\n    crs = cross(a,b)\n    if abs(crs) < 1.0e-11 : crs = 0.0\n    if crs > 0 : return \"COUNTER_CLOCKWISE\"\n    elif crs < 0 : return \"CLOCKWISE\"\n    else:\n        if dot(a,b) < 0 : return \"ONLINE_BACK\"\n        elif dot(a,a) < dot(b,b) : return \"ONLINE_FRONT\"\n        else : return \"ON_SEGMENT\"\n\nq = int(input())\nfor i in range(q):\n    a,b,c,d,e,f,g,h = [int(i) for i in input().split()]\n    A = [a,b] ; B = [c,d] ; C = [e,f] ; D = [g,h]\n    l = Line(A,B) ; m = Line(C,D)\n    if isec(l,m):\n        print(0.0)\n        continue\n    _A,_B,_C,_D = proj(A,B,C,D)\n    AB = dif(B,A) ; CD = dif(D,C)\n    A_C = dif(_C,A) ; A_D = dif(_D,A) ; C_A = dif(_A,C) ; C_B = dif(_B,C)\n    DIST = [dist(A,C),dist(A,D),dist(B,C),dist(B,D),dist(_A,A),dist(_B,B),dist(_C,C),dist(_D,D)]\n    fun = lambda x : x != \"ON_SEGMENT\"\n    if fun(Order(CD,C_A)) : DIST[4] = sys.maxsize\n    if fun(Order(CD,C_B)) : DIST[5] = sys.maxsize\n    if fun(Order(AB,A_C)) : DIST[6] = sys.maxsize\n    if fun(Order(AB,A_D)) : DIST[7] = sys.maxsize\n    print(min(DIST))"
  },
  {
    "language": "Python",
    "code": "import math\n\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    def __add__(self, other):\n        return Point(self.x + other.x, self.y + other.y)\n    def __sub__(self, other):\n        return Point(self.x - other.x, self.y - other.y)\n    def __mul__(self, other):\n        return Point(self.x * other, self.y * other)\n    def __floordiv__(self, other):\n        return Point(self.x / other, self.y / other)\n    def __repr__(self):\n        return str(self.x) + ' ' + str(self.y)\n\nclass Vector(Point):\n    pass\n\nclass Line:\n    def __init__(self, p1, p2):\n        self.p1 = p1\n        self.p2 = p2\n\nclass Segment(Line):\n    pass\n\ndef points_to_vector(p1, p2):\n    x = p1.x - p2.x\n    y = p1.y - p2.y\n    return Vector(x, y)\n\ndef vector(p):\n    return Vector(p.x, p.y)\n\ndef dot(v1, v2):\n    return v1.x * v2.x + v1.y * v2.y\n\ndef cross(v1, v2):\n    return v1.x * v2.y - v1.y * v2.x\n\ndef norm(v):\n    return v.x**2 + v.y**2\n\ndef distance(v):\n    return math.sqrt(norm(v))\n\ndef project(s, p):\n    base = points_to_vector(s.p1, s.p2)\n    hypo = points_to_vector(p, s.p1)\n    r = dot(hypo, base) / norm(base)\n    return s.p1 + base * r\n\ndef reflect(s, p):\n    return p + (project(s, p) -p) * 2\n\ndef get_distance(s1, s2):\n    if intersect_s(s1, s2):\n        return 0\n    d1 = get_distance_sp(s1, s2.p1)\n    d2 = get_distance_sp(s1, s2.p2)\n    d3 = get_distance_sp(s2, s1.p1)\n    d4 = get_distance_sp(s2, s1.p2)\n    return min(d1, min(d2, min(d3, d4)))\n\ndef get_distance_pp(p1, p2):\n    return distance(p1 - p2)\n\ndef get_distance_lp(l, p):\n    return abs(cross(l.p2 - l.p1, p - l.p1) / distance(l.p2 - l.p1))\n\ndef get_distance_sp(s, p):\n    if dot(s.p2 - s.p1, p - s.p1) < 0:\n        return distance(p - s.p1)\n    elif dot(s.p1 - s.p2, p - s.p2) < 0:\n        return distance(p - s.p2)\n    else:\n        return get_distance_lp(s, p)\n\ndef ccw(p0, p1, p2):\n    EPS = 1e-10\n    COUNTER_CLOCKWISE = 1\n    CLOCKWISE = -1\n    ONLINE_BACK = 2\n    ONLINE_FRONT = -2\n    ON_SEGMENT = 0\n    v1 = p1 - p0\n    v2 = p2 - p0\n    if cross(v1, v2) > EPS:\n        return COUNTER_CLOCKWISE\n    elif cross(v1, v2) < -EPS:\n        return CLOCKWISE\n    elif dot(v1, v2) < -EPS:\n        return ONLINE_BACK\n    elif norm(v1) < norm(v2):\n        return ONLINE_FRONT\n    else:\n        return ON_SEGMENT\n\ndef intersect_p(p1, p2, p3, p4):\n    return ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 and ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0\n\ndef intersect_s(s1, s2):\n    return intersect_p(s1.p1, s1.p2, s2.p1, s2.p2)\n\n\nimport sys\n# sys.stdin = open('input.txt')\n\nq = int(input())\nfor i in range(q):\n    temp = list(map(int, input().split()))\n    points = []\n    for j in range(0, 8, 2):\n        points.append(Point(temp[j], temp[j+1]))\n    s1 = Segment(points[0], points[1])\n    s2 = Segment(points[2], points[3])\n    print(get_distance(s1, s2))\n"
  },
  {
    "language": "Python",
    "code": "# -*- coding: utf-8 -*-\n\"\"\"\nhttp://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_D&lang=jp\n\n\"\"\"\nimport sys\nfrom sys import stdin\ninput = stdin.readline\n\n\nclass Point(object):\n    epsilon = 1e-10\n\n    def __init__(self, x=0.0, y=0.0):\n        if isinstance(x, tuple):\n            self.x = x[0]\n            self.y = x[1]\n        else:\n            self.x = x\n            self.y = y\n\n    # ????????????\n    def __add__(self, other):\n        return Point(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other):\n        return Point(self.x - other.x, self.y - other.y)\n\n    def __mul__(self, other):\n        return Point(other * self.x, other * self.y)\n\n    def __truediv__(self, other):\n        return Point(other / self.x, other / self.y)\n\n    def __lt__(self, other):\n        if self.x == other.x:\n            return self.y < other.y\n        else:\n            return self.x < other.x\n\n    def __eq__(self, other):\n        from math import fabs\n        if fabs(self.x - other.x) < Point.epsilon and fabs(self.y - other.y) < Point.epsilon:\n            return True\n        else:\n            return False\n\n    def norm(self):\n        return self.x * self.x + self.y * self.y\n\n    def __abs__(self):\n        from math import sqrt\n        return sqrt(self.norm())\n\n    def ccw(self, p0, p1):\n        # ??????2???(p0, p1)?????????????????????????????????????????¢????????????\n        a = Vector(p1 - p0)\n        b = Vector(self - p0)\n        if Vector.cross(a, b) > Point.epsilon:\n            return 1 # 'COUNTER_CLOCKWISE'\n        elif Vector.cross(a, b) < -Point.epsilon:\n            return -1 # 'CLOCKWISE'\n        elif Vector.dot(a, b) < -Point.epsilon:\n            return 2 # 'ONLINE_BACK'\n        elif a.norm() < b.norm():\n            return -2 # 'ONLINE_FRONT'\n        else:\n            return 0 # 'ON_SEGMENT'\n\n    def project(self, s):\n        # ??????(Point)????????????s??????????????????????????????????????§?¨?(?°???±)????±???????\n        base = Vector(s.p2 - s.p1)\n        a = Vector(self - s.p1)\n        r = Vector.dot(a, base)\n        r /= base.norm()\n        return s.p1 + base * r\n\n    def reflect(self, s):\n        # ??????s???????§°?????¨?????????????????¨???????§°??????????????§?¨?(????°?)????±???????\n        proj = self.project(s)\n        return self + (proj - self)*2\n\n    def distance(self, s):\n        # ????????¨??????s????????¢????¨??????????\n        if Vector.dot(s.p2-s.p1, self-s.p1) < 0.0:\n            return abs(self - s.p1)\n        if Vector.dot(s.p1-s.p2, self-s.p2) < 0.0:\n            return abs(self - s.p2)\n        return abs(Vector.cross(s.p2-s.p1, self-s.p1) / abs(s.p2-s.p1))\n\n\nclass Vector(Point):\n    def __init__(self, x=0.0, y=0.0):\n        if isinstance(x, tuple):\n            self.x = x[0]\n            self.y = x[1]\n        elif isinstance(x, Point):\n            self.x = x.x\n            self.y = x.y\n        else:\n            self.x = x\n            self.y = y\n\n    # ????????????\n    def __add__(self, other):\n        return Vector(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other):\n        return Vector(self.x - other.x, self.y - other.y)\n\n    def __mul__(self, other):\n        return Vector(other * self.x, other * self.y)\n\n    def __truediv__(self, other):\n        return Vector(other / self.x, other / self.y)\n\n    @classmethod\n    def dot(cls, a, b):\n        return a.x * b.x + a.y * b.y\n\n    @classmethod\n    def cross(cls, a, b):\n        return a.x * b.y - a.y * b.x\n\n    @classmethod\n    def is_orthogonal(cls, a, b):\n        return Vector.dot(a, b) == 0.0\n\n    @classmethod\n    def is_parallel(cls, a, b):\n        return Vector.cross(a, b) == 0.0\n\n\nclass Segment(object):\n    def __init__(self, p1=Point(), p2=Point()):\n        if isinstance(p1, Point):\n            self.p1 = p1\n            self.p2 = p2\n        elif isinstance(p1, tuple):\n            self.p1 = Point(p1[0], p1[1])\n            self.p2 = Point(p2[0], p2[1])\n\n    def intersect(self, s):\n        # ????????¨??????????????????????????????????????????????????????\n        ans1 = s.p1.ccw(self.p1, self.p2) * s.p2.ccw(self.p1, self.p2)\n        ans2 = self.p1.ccw(s.p1, s.p2) * self.p2.ccw(s.p1, s.p2)\n        return ans1 <= 0 and ans2 <= 0\n\n    def cross_point(self, s):\n        # ????????¨??????????????????????????????????????§?¨?????±???????\n        base = s.p2 - s.p1\n        d1 = abs(Vector.cross(base, self.p1-s.p1))\n        d2 = abs(Vector.cross(base, self.p2-s.p1))\n        t = d1 / (d1 + d2)\n        return self.p1 + (self.p2 - self.p1) * t\n\n    def distance(self, s):\n        # ????????¨?????????????????????????????¢????±???????\n        if self.intersect(s):\n            return 0.0\n        d1 = s.p1.distance(self)\n        d2 = s.p2.distance(self)\n        d3 = self.p1.distance(s)\n        d4 = self.p2.distance(s)\n        return min(d1, d2, d3, d4)\n\n\n    @classmethod\n    def is_orthogonal(cls, s1, s2):\n        a = Vector(s1.p2 - s1.p1)\n        b = Vector(s2.p2 - s2.p1)\n        return Vector.is_orthogonal(a, b)\n\n    @classmethod\n    def is_parallel(cls, s1, s2):\n        a = Vector(s1.p2 - s1.p1)\n        b = Vector(s2.p2 - s2.p1)\n        return Vector.is_parallel(a, b)\n\n\nclass Line(Segment):\n    pass\n\n\nclass Cirle(object):\n    def __init__(self, c=Point(), r=0.0):\n        self.c = c\n        self.r = r\n\n\ndef main(args):\n    q = int(input())\n    for _ in range(q):\n        x_p0, y_p0, x_p1, y_p1, x_p2, y_p2, x_p3, y_p3 = map(int, input().split())\n        p0 = Point(x_p0, y_p0)\n        p1 = Point(x_p1, y_p1)\n        p2 = Point(x_p2, y_p2)\n        p3 = Point(x_p3, y_p3)\n        s1 = Segment(p0, p1)\n        s2 = Segment(p2, p3)\n        result = s1.distance(s2)\n        print('{:.10f}'.format(result))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"
  },
  {
    "language": "Python",
    "code": "from math import sqrt\nq = int(input())\n\nclass Segment(): pass\n\ndef dot(a, b):\n    return sum([i * j for i,j in zip(a, b)])\n\ndef sub(a, b):\n    return [a[0] - b[0],a[1] - b[1]]\n\ndef cross(a, b):\n    return  a[0] * b[1] - a[1] * b[0]\n\ndef norm(a):\n    return sqrt(a[0] ** 2 + a[1] ** 2)\n\ndef ccw(a, b, c):\n    x = sub(b, a)\n    y = sub(c, a)\n    if cross(x, y) > 0: return 1\n    if cross(x, y) < 0: return -1\n    if dot(x, y) < 0: return 2\n    if norm(x) < norm(y): return -2\n    return 0\n\ndef intersect(p1, p2, p3, p4):\n    return ccw(p1, p2, p3) ** ccw(p1, p2, p4) <= 0 and \\\n           ccw(p3, p4, p1) ** ccw(p3, p4, p2) <= 0\n\ndef getDistLP(s, p):\n    return abs(cross(sub(s.r, s.l), sub(p, s.l))) / norm(sub(s.r, s.l))\n\ndef getDistSP(s, p):\n    if dot(sub(s.r, s.l),sub(p, s.l)) < 0: return norm(sub(p, s.l))\n    if dot(sub(s.l, s.r),sub(p, s.r)) < 0: return norm(sub(p, s.r))\n    return getDistLP(s, p)\n\ndef getDist(s1, s2):\n    if intersect(s1.l, s1.r, s2.l, s2.r): return 0\n    return min(getDistSP(s1, s2.l), \n               getDistSP(s1, s2.r),\n               getDistSP(s2, s1.l),\n               getDistSP(s2, s1.r))\n\nfor i in range(q):\n    xp0, yp0, xp1, yp1, xp2, yp2, xp3, yp3  = map(int, input().split())\n    s1 = Segment()\n    s2 = Segment()\n    s1.l = [xp0, yp0]\n    s1.r = [xp1, yp1]\n    s2.l = [xp2, yp2]\n    s2.r = [xp3, yp3]\n    print(getDist(s1, s2))"
  },
  {
    "language": "Python",
    "code": "from math import sqrt\n\ndef cross(p0, p1, p2):\n  x0, y0 = p0\n  x1, y1 = p1\n  x2, y2 = p2\n  x1 -=x0\n  x2 -=x0\n  y1 -=y0\n  y2 -=y0\n  return x1*y2 - x2*y1\n\ndef dot(p0, p1, p2):\n  x0, y0 = p0\n  x1, y1 = p1\n  x2, y2 = p2\n  x1 -=x0\n  x2 -=x0\n  y1 -=y0\n  y2 -=y0\n  return x1*x2 + y1*y2\n\ndef dist2(p0, p1):\n  x0, y0 = p0\n  x1, y1 = p1\n  return (x1-x0)**2 + (y1 - y0)**2\n\ndef collision_ll(s0, s1,t0,t1):\n  return cross(s0, s1,t0)*cross(s0,s1,t1)<0 and cross(t0, t1,s0) * cross(t0,t1,s1) < 0\n\ndef dist_lp(S,E,P):\n  dd = dist2(S,E)\n  if 0 <= dot(S,E,P) <= dd:\n    return abs(cross(S,E,P))/sqrt(dd)\n  return sqrt(min(dist2(S,P), dist2(E,P)))\n\ndef dist_ll(s0, s1, t0, t1):\n  if collision_ll(s0,s1,t0,t1):\n    return 0\n  return min(\n    dist_lp(s0, s1, t0),\n    dist_lp(s0, s1, t1),\n    dist_lp(t0, t1, s0),\n    dist_lp(t0, t1, s1)\n    )\n\nn = int(input())\nfor i in range(n):\n  x0,y0,x1,y1,X0,Y0,X1,Y1 = map(int,input().split())\n  print(\"%.010f\"%dist_ll((x0,y0), (x1,y1), (X0,Y0),(X1,Y1)))\n\n"
  },
  {
    "language": "Python",
    "code": "class Line:\n    def __init__(self,p1,p2):\n        if p1[1] < p2[1]:self.s=p2;self.e=p1\n        elif p1[1] > p2[1]:self.s=p1;self.e=p2\n        else:\n            if p1[0] < p2[0]:self.s=p1;self.e=p2\n            else:self.s=p2;self.e=p1\n\ndef cross(a,b):return a[0]*b[1] - a[1]*b[0]\ndef dot(a,b):return a[0]*b[0]+a[1]*b[1]\ndef dif(a,b):return [x-y for x,y in zip(a,b)]\ndef dist(a,b):return ((a[0]-b[0])**2+(a[1]-b[1])**2)**0.5\ndef isec(l,m):\n    a = dif(l.e,l.s);b = dif(m.e,l.s);c = dif(m.s,l.s)\n    d = dif(m.e,m.s);e = dif(l.e,m.s);f = dif(l.s,m.s)\n    g = lambda a, b : cross(a,b)==0 and dot(a,b)>0 and dot(b,b)<dot(a,a)\n    if g(a,b) or g(a,c) or g(d,e) or g(d,f):return True\n    elif l.s == m.e or l.s == m.s or l.e == m.e or l.e == m.s:return True\n    elif cross(a,b) * cross(a,c) >= 0 or cross(d,e) * cross(d,f) >= 0:return False\n    else:return True\ndef projection(a,b):return [x*dot(a,b)/dot(a,a) for x in a]\ndef proj(A,B,C,D):\n    AB = dif(B,A) ; AC = dif(C,A) ; AD = dif(D,A)\n    CD = dif(D,C) ; CA = dif(A,C) ; CB = dif(B,C)\n    _A = projection(CA,CD)\n    _B = projection(CB,CD)\n    _C = projection(AC,AB)\n    _D = projection(AD,AB)\n    return [_A,_B,_C,_D]\ndef Order(a,b):\n    crs = cross(a,b)\n    if crs > 0 : return \"COUNTER_CLOCKWISE\"\n    elif crs < 0 : return \"CLOCKWISE\"\n    else:\n        if dot(a,b) < 0 : return \"ONLINE_BACK\"\n        elif dot(a,a) < dot(b,b) : return \"ONLINE_FRONT\"\n        else : return \"ON_SEGMENT\"\n\n\nq = int(input())\nfor i in range(q):\n    a,b,c,d,e,f,g,h = [int(i) for i in input().split()]\n    A = [a,b] ; B = [c,d] ; C = [e,f] ; D = [g,h]\n    l = Line(A,B) ; m = Line(C,D)\n    if isec(l,m):\n        print(0.0)\n        continue\n    _A,_B,_C,_D = proj(A,B,C,D)\n    AB = dif(B,A) ; CD = dif(D,C)\n    A_C = dif(_C,A) ; A_D = dif(_D,A) ; C_A = dif(_A,C) ; C_B = dif(_B,C)\n    DIST = [dist(A,C),dist(A,D),dist(B,C),dist(B,D),dist(_A,A),dist(_B,B),dist(_C,C),dist(_D,D)]\n    fun = lambda x : x != \"ON_SEGMENT\"\n    if fun(Order(CD,C_A)) : DIST[4] = sys.maxsize\n    if fun(Order(CD,C_B)) : DIST[5] = sys.maxsize\n    if fun(Order(AB,A_C)) : DIST[6] = sys.maxsize\n    if fun(Order(AB,A_D)) : DIST[7] = sys.maxsize\n    print(min(DIST))"
  },
  {
    "language": "Python",
    "code": "from math import sqrt\ndef cross(P0, P1, P2):\n    x0, y0 = P0; x1, y1 = P1; x2, y2 = P2\n    x1 -= x0; x2 -= x0\n    y1 -= y0; y2 -= y0\n    return x1*y2 - x2*y1\n\ndef dot(P0, P1, P2):\n    x0, y0 = P0; x1, y1 = P1; x2, y2 = P2\n    x1 -= x0; x2 -= x0\n    y1 -= y0; y2 -= y0\n    return x1*x2 + y1*y2\n\ndef dist2(P0, P1):\n    x0, y0 = P0; x1, y1 = P1\n    return (x1 - x0)**2 + (y1 - y0)**2\n\ndef collision_ll(S0, S1, T0, T1):\n    return cross(S0, S1, T0)*cross(S0, S1, T1) < 0 and cross(T0, T1, S0) * cross(T0, T1, S1) < 0\n\ndef dist_lp(S, E, P):\n    dd = dist2(S, E)\n    if 0 <= dot(S, E, P) <= dd:\n        return abs(cross(S, E, P))/sqrt(dd)\n    return sqrt(min(dist2(S, P), dist2(E, P)))\n\ndef dist_ll(S0, S1, T0, T1):\n    if collision_ll(S0, S1, T0, T1):\n        return 0\n    return min(\n            dist_lp(S0, S1, T0),\n            dist_lp(S0, S1, T1),\n            dist_lp(T0, T1, S0),\n            dist_lp(T0, T1, S1)\n            )\n\nn = int(input())\nfor i in range(n):\n    x0, y0, x1, y1, X0, Y0, X1, Y1 = map(int, input().split())\n    print(\"%.010f\" % dist_ll((x0, y0), (x1, y1), (X0, Y0), (X1, Y1)))"
  },
  {
    "language": "Python",
    "code": "from itertools import starmap\n\n\ndef cross(a, b):\n    return a.real * b.imag - a.imag * b.real\n\n\ndef has_intersection(p0, p1, p2, p3):\n    max_x1, min_x1 = (p0.real, p1.real) if p0.real > p1.real else (p1.real, p0.real)\n    max_x2, min_x2 = (p2.real, p3.real) if p2.real > p3.real else (p3.real, p2.real)\n    if max_x1 < min_x2 or max_x2 < min_x1:\n        return False\n    max_y1, min_y1 = (p0.imag, p1.imag) if p0.imag > p1.imag else (p1.imag, p0.imag)\n    max_y2, min_y2 = (p2.imag, p3.imag) if p2.imag > p3.imag else (p3.imag, p2.imag)\n    if max_y1 < min_y2 or max_y2 < min_y1:\n        return False\n\n    return cross(p1 - p0, p2 - p0) * cross(p1 - p0, p3 - p0) < 1e-6 and \\\n           cross(p3 - p2, p0 - p2) * cross(p3 - p2, p1 - p2) < 1e-6\n\n\ndef point_to_segment(p0, p1, p2):\n    prod = (p1 - p0).conjugate() * (p2 - p0)\n    if prod.real <= 1e-6:\n        return abs(p2 - p0)\n    l = abs(p1 - p0)\n    d = prod.real / l\n    if d >= l:\n        return abs(p2 - p1)\n    return abs(prod.imag) / l\n\n\nq = int(input())\nwhile q:\n    q -= 1\n    p0, p1, p2, p3 = starmap(complex, zip(*[map(int, input().split())] * 2))\n    if has_intersection(p0, p1, p2, p3):\n        print(0)\n        continue\n\n    print(min(starmap(point_to_segment, ((p0, p1, p2), (p0, p1, p3), (p2, p3, p0), (p2, p3, p1)))))"
  },
  {
    "language": "Python",
    "code": "import math\n\n\ndef dot(ux, uy, vx, vy):\n    return ux*vx + uy*vy\n\n\ndef cross(ux, uy, vx, vy):\n    return ux*vy - uy*vx\n\n\ndef dist_to_segment(x, y, ax, ay, bx, by):\n    if dot(x - ax, y - ay, bx - ax, by - ay) < 0:\n        return math.hypot(x - ax, y - ay)\n    if dot(x - bx, y - by, ax - bx, ay - by) < 0:\n        return math.hypot(x - bx, y - by)\n    c = abs(cross(bx - ax, by - ay, x - ax, y - ay))\n    return c / math.hypot(bx - ax, by - ay)\n\n\nq = int(input())\n\nfor _ in range(q):\n    x0, y0, x1, y1, x2, y2, x3, y3 = map(int, input().split())\n\n    c1 = cross(x1 - x0, y1 - y0, x2 - x0, y2 - y0)\n    c2 = cross(x1 - x0, y1 - y0, x3 - x0, y3 - y0)\n    c3 = cross(x3 - x2, y3 - y2, x0 - x2, y0 - y2)\n    c4 = cross(x3 - x2, y3 - y2, x1 - x2, y1 - y2)\n\n    if c1*c2 < 0 and c3*c4 < 0:\n        d = 0.0\n    else:\n        d = dist_to_segment(x2, y2, x0, y0, x1, y1)\n        d = min(d, dist_to_segment(x3, y3, x0, y0, x1, y1))\n        d = min(d, dist_to_segment(x0, y0, x2, y2, x3, y3))\n        d = min(d, dist_to_segment(x1, y1, x2, y2, x3, y3))\n\n    print('{:.10f}'.format(d))\n\n"
  },
  {
    "language": "Python",
    "code": "# -*- coding: utf-8 -*-\n\nimport collections\nimport math\n\n\nclass Vector2(collections.namedtuple(\"Vector2\", [\"x\",  \"y\"])):\n\n    def __add__(self, other):\n        return Vector2(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other):\n        return Vector2(self.x - other.x, self.y - other.y)\n\n    def __mul__(self, scalar):\n        return Vector2(self.x * scalar, self.y * scalar)\n\n    def __neg__(self):\n        return Vector2(-self.x, -self.y)\n\n    def __pos__(self):\n        return Vector2(+self.x, +self.y)\n\n    def __abs__(self):  # norm\n        return math.sqrt(float(self.x * self.x + self.y * self.y))\n\n    def dot(self, other):  # dot product\n        return self.x * other.x + self.y * other.y\n\n    def cross(self, other):  # cross product\n        return self.x * other.y - self.y * other.x\n\n\ndef getDistanceSP(segment, point):\n    p = point\n    p1, p2 = segment\n    if (p2 - p1).dot(p - p1) < 0:\n        return abs(p - p1)\n    if (p1 - p2).dot(p - p2) < 0:\n        return abs(p - p2)\n    return abs((p2 - p1).cross(p - p1)) / abs(p2 - p1)\n\n\ndef getDistance(s1, s2):\n    a, b = s1\n    c, d = s2\n    if intersect(s1, s2):  # intersect\n        return 0\n    return min(getDistanceSP(s1, c), getDistanceSP(s1, d), getDistanceSP(s2, a), getDistanceSP(s2, b))\n\n\ndef ccw(p0, p1, p2):\n    a = p1 - p0\n    b = p2 - p0\n    if a.cross(b) > 0:\n        return 1  # COUNTER_CLOCKWISE\n    elif a.cross(b) < 0:\n        return -1  # CLOCKWISE\n    elif a.dot(b) < 0:\n        return 2  # ONLINE_BACK\n    elif abs(a) < abs(b):\n        return -2  # ONLINE_FRONT\n    else:\n        return 0  # ON_SEGMENT\n\n\ndef intersect(s1, s2):\n    a, b = s1\n    c, d = s2\n    return ccw(a, b, c) * ccw(a, b, d) <= 0 and ccw(c, d, a) * ccw(c, d, b) <= 0\n\n\nif __name__ == '__main__':\n\n    n = int(input())\n\n    for _ in range(n):\n        l = list(map(int, input().split()))\n        s1 = [Vector2(l[0], l[1]), Vector2(l[2], l[3])]\n        s2 = [Vector2(l[4], l[5]), Vector2(l[6], l[7])]\n\n        print(getDistance(s1, s2))\n\n"
  },
  {
    "language": "Python",
    "code": "# -*- coding: utf-8 -*-\n\nimport sys\n\nsys.setrecursionlimit(10 ** 9)\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\nINF=float('inf')\n\nclass Geometry:\n\n    EPS = 10 ** -9\n\n    def add(self, a, b):\n        x1, y1 = a\n        x2, y2 = b\n        return (x1+x2, y1+y2)\n\n    def sub(self, a, b):\n        x1, y1 = a\n        x2, y2 = b\n        return (x1-x2, y1-y2)\n\n    def mul(self, a, b):\n        x1, y1 = a\n        if not isinstance(b, tuple):\n            return (x1*b, y1*b)\n        x2, y2 = b \n        return (x1*x2, y1*y2)\n\n    def abs(self, a):\n        from math import hypot\n        x1, y1 = a\n        return hypot(x1, y1)\n\n    def norm(self, a):\n        x, y = a\n        return x**2 + y**2\n\n    def dot(self, a, b):\n        x1, y1 = a\n        x2, y2 = b\n        return x1*x2 + y1*y2\n\n    def cross(self, a, b):\n        x1, y1 = a\n        x2, y2 = b\n        return x1*y2 - y1*x2\n\n    def project(self, seg, p):\n        \"\"\" 線分segに対する点pの射影 \"\"\"\n        p1, p2 = seg\n        base = self.sub(p2, p1)\n        r = self.dot(self.sub(p, p1), base) / self.norm(base)\n        return self.add(p1, self.mul(base, r))\n\n    def reflect(self, seg, p):\n        \"\"\" 線分segを対称軸とした点pの線対称の点 \"\"\"\n        return self.add(p, self.mul(self.sub(self.project(seg, p), p), 2))\n\n    def ccw(self, p0, p1, p2):\n        \"\"\" 線分p0,p1から線分p0,p2への回転方向 \"\"\"\n        a = self.sub(p1, p0)\n        b = self.sub(p2, p0)\n        # 反時計回り\n        if self.cross(a, b) > self.EPS: return 1\n        # 時計回り\n        if self.cross(a, b) < -self.EPS: return -1\n        # 直線上(p2 => p0 => p1)\n        if self.dot(a, b) < -self.EPS: return 2\n        # 直線上(p0 => p1 => p2)\n        if self.norm(a) < self.norm(b): return -2\n        # 直線上(p0 => p2 => p1)\n        return 0\n\n    def intersect(self, seg1, seg2):\n        \"\"\" 線分seg1と線分seg2の交差判定 \"\"\"\n        p1, p2 = seg1\n        p3, p4 = seg2\n        return (\n            self.ccw(p1, p2, p3) * self.ccw(p1, p2, p4) <= 0\n            and self.ccw(p3, p4, p1) * self.ccw(p3, p4, p2) <= 0\n        )\n\n    def get_distance_LP(self, line, p):\n        \"\"\" 直線lineと点pの距離 \"\"\"\n        p1, p2 = line\n        return abs(self.cross(self.sub(p2, p1), self.sub(p, p1)) / self.abs(self.sub(p2, p1)))\n\n    def get_distance_SP(self, seg, p):\n        \"\"\" 線分segと点pの距離 \"\"\"\n        p1, p2 = seg\n        if self.dot(self.sub(p2, p1), self.sub(p, p1)) < 0: return self.abs(self.sub(p, p1))\n        if self.dot(self.sub(p1, p2), self.sub(p, p2)) < 0: return self.abs(self.sub(p, p2))\n        return self.get_distance_LP(seg, p)\n\n    def get_distance_SS(self, seg1, seg2):\n        \"\"\" 線分seg1と線分seg2の距離 \"\"\"\n        p1, p2 = seg1\n        p3, p4 = seg2\n        if self.intersect(seg1, seg2): return 0\n        return min(\n            self.get_distance_SP(seg1, p3), self.get_distance_SP(seg1, p4),\n            self.get_distance_SP(seg2, p1), self.get_distance_SP(seg2, p2),\n        )\n\ngm = Geometry()\nfor _ in range(INT()):\n    x1, y1, x2, y2, x3, y3, x4, y4 = MAP()\n    seg1 = ((x1, y1), (x2, y2))\n    seg2 = ((x3, y3), (x4, y4))\n    print(gm.get_distance_SS(seg1, seg2))\n\n"
  },
  {
    "language": "Python",
    "code": "# coding: utf-8\n# Your code here!\n\nEPS = 0.0000000001\n\nCOUNTER_CLOCKWISE = 1\nCLOCKWISE = -1\nONLINE_BACK = 2\nONLINE_FRONT = -2\nON_SEGMENT = 0\n\nclass Point:\n    \n    global EPS\n    \n    def __init__(self, x = 0, y = 0):\n        self.x = x\n        self.y = y\n        \n        \n    def __add__(a, b):\n        s = a.x + b.x\n        t = a.y + b.y\n        return Point(s, t)\n        \n    def __sub__(a, b):\n        s = a.x - b.x\n        t = a.y - b.y\n        return Point(s, t)\n            \n    def __mul__(self, a):\n        s = a * self.x\n        t = a * self.y\n        return Point(s, t)\n        \n    def __truediv__(self, a):\n        s = self.x / a\n        t = self.y / a\n        return Point(s, t)\n            \n            \n            \n            \n    def norm(self):\n        return self.x * self.x + self.y * self.y\n        \n    def abs(self):\n        return self.norm() ** 0.5\n            \n    \n            \n            \n    def __eq__(self, other):\n        return abs(self.x - other.y) < self.EPS and abs(self.y - other.y) < self.EPS\n            \n            \n            \n    def dot(self, b):\n        return self.x * b.x + self.y * b.y\n        \n    def cross(self, b):\n        return self.x * b.y - self.y * b.x\n    \n    \nclass Segment:\n    def __init__(self, p1, p2):\n        self.p1 = p1\n        self.p2 = p2\n\ndef project(s, p):\n    base = s.p2 - s.p1\n    hypo = p - s.p1\n    r = hypo.dot(base) / base.norm()\n    return s.p1 + base * r\n\ndef reflecton(s, p):\n    return p + (project(s,p) - p) * 2\n\n\ndef getDistance(a, b):\n    return (a-b).abs()\n\ndef getDistanceLP(l, p):\n    return abs((l.p2-l.p1).cross(p-l.p1)) / ((l.p2-l.p1).abs())\n\ndef getDistanceSP(s, p):\n    if (s.p2 - s.p1).dot(p-s.p1) < 0:\n        return (p-s.p1).abs()\n    elif (s.p1 - s.p2).dot(p-s.p2) < 0:\n        return (p-s.p2).abs()\n    return getDistanceLP(s,p)\n\n\ndef getDistanceSS(s1, s2):\n    if intersectS(s1, s2):\n        return 0\n    return min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2), getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2))\n\n\n\ndef ccw(p0, p1, p2):\n    a = p1-p0\n    b = p2-p0\n    \n    if a.cross(b) > 0:\n        return COUNTER_CLOCKWISE\n    elif a.cross(b) <0:\n        return CLOCKWISE\n    elif a.dot(b) < 0:\n        return ONLINE_BACK\n    elif a.abs() < b.abs():\n        return ONLINE_FRONT\n    else:\n        return ON_SEGMENT\n\ndef intersect(p1, p2, p3, p4):\n    return ccw(p1, p2, p3) *ccw(p1, p2, p4) <=0 and ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0\n\ndef intersectS(s1, s2):\n    return intersect(s1.p1, s1.p2, s2.p1, s2.p2)\n\n\n\n\nn = int(input())\nfor i in range(n):\n    \n    nums=list(map(int,input().split()))\n    s1 = Segment(Point(nums[0], nums[1]), Point(nums[2], nums[3]))\n    s2 = Segment(Point(nums[4], nums[5]), Point(nums[6], nums[7]))\n    print(getDistanceSS(s1, s2))\n\n\n\n\n\n"
  },
  {
    "language": "Python",
    "code": "import sys\nfrom itertools import starmap\nreadline = sys.stdin.readline\nEPS = 1e-9\nclass Segment(object):\n    __slots__ = ('fi', 'se')\n    def __init__(self, fi, se):\n        self.fi = fi\n        self.se = se\ndef cross(a, b):\n    return a.real * b.imag - a.imag * b.real\ndef dot(a, b):\n    return a.real * b.real + a.imag * b.imag\ndef norm(base):\n    return abs(base) ** 2\ndef project(s, p2):\n    base = s.fi - s.se\n    r = dot(p2 - s.fi, base) / norm(base)\n    return s.fi + base * r\ndef reflect(s, p):\n    return p + (project(s, p) - p) * 2.0\ndef ccw(p1, p2, p3):\n    a = p2 - p1\n    b = p3 - p1\n    if cross(a, b) > EPS: return 1\n    if cross(a, b) < -EPS: return -1\n    if dot(a, b) < -EPS: return 2\n    if norm(a) < norm(b): return -2\n    return 0\ndef intersect4(p1, p2, p3, p4):\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 and\n\t\t\tccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0)\ndef intersect2(s1, s2):\n    return intersect4(s1.fi, s1.se, s2.fi, s2.se)\ndef getDistance(a, b):  return abs(a - b)\ndef getDistanceLP(l, p):\n    return abs(cross(l.se - l.fi, p - l.fi) / abs(l.se - l.fi))\ndef getDistanceSP(s, p):\n    if dot(s.se - s.fi, p - s.fi) < 0.0: return abs(p - s.fi)\n    if dot(s.fi - s.se, p - s.se) < 0.0: return abs(p - s.se)\n    return getDistanceLP(s, p)\ndef getDistances(s1, s2):\n    if intersect2(s1, s2): return 0.0\n    return min(getDistanceSP(s1, s2.fi), getDistanceSP(s1, s2.se),\n               getDistanceSP(s2, s1.fi), getDistanceSP(s2, s1.se))\nn = int(readline())\nfor _ in [0] * n:\n    li = tuple(map(int, readline().split()))\n    p0, p1, p2, p3 = (x + y * 1j for x, y in zip(li[::2], li[1::2]))\n    s1 = Segment(p0, p1)\n    s2 = Segment(p2, p3)\n    print(\"{0:.10f}\".format(getDistances(s1, s2)))"
  },
  {
    "language": "Python",
    "code": "import math\n\ndef cross(a,b): #外積\n  return a.real*b.imag-a.imag*b.real\n\ndef dot(a,b): #内積\n  return a.real*b.real+a.imag*b.imag\n\ndef norm2(a,b): #大きさの2乗\n  return (b.real-a.real)**2+(b.imag-a.imag)**2\n\ndef is_intersect(p0,p1,p2,p3): #交差しているのかを判定\n  ta=cross(p1-p0,p2-p0)\n  tb=cross(p1-p0,p3-p0)\n  tc=cross(p3-p2,p0-p2)\n  td=cross(p3-p2,p1-p2)\n\n  if ta*tb<0 and tc*td<0:\n    return True\n  else:\n    return False\n\ndef distance_option(p0,p1,p2):\n  nn=norm2(p0,p1)\n  #print(dot(p1-p0,p2-p0),nn)\n  if 0<=dot(p1-p0,p2-p0)<=nn:\n    return abs(cross(p1-p0,p2-p0))/math.sqrt(nn)\n  else:\n    return math.sqrt(min(norm2(p0,p2),norm2(p1,p2)))\n\ndef distance(p0,p1,p2,p3):\n  if is_intersect(p0,p1,p2,p3):\n    return 0\n  else:\n    #print(distance_option(p0,p1,p2),distance_option(p0,p1,p3),distance_option(p2,p3,p0),distance_option(p2,p3,p1))\n    return min(distance_option(p0,p1,p2),distance_option(p0,p1,p3),distance_option(p2,p3,p0),distance_option(p2,p3,p1))\n\nq=int(input())\n\nfor _ in [0]*q:\n  x_y=map(int,input().split())\n  p0,p1,p2,p3=[x+y*1j for x,y in zip(*[x_y]*2)]\n  print(\"{:.10f}\".format(distance(p0,p1,p2,p3)))\n"
  },
  {
    "language": "Python",
    "code": "def dot(a, b):\n  return a.real * b.real + a.imag * b.imag\n\ndef cross(a, b):\n  return a.real * b.imag - a.imag * b.real\n\ndef ccw(p0, p1, p2):\n  a = p1-p0\n  b = p2-p0\n  if cross(a,b) > 0:\n    return 1 #couner_clockwise\n  elif cross(a,b) <0:\n    return -1 #clockwise\n  elif dot(a,b) < 0:\n    return 2 #online_back\n  elif abs(a) < abs(b):\n    return -2 #online_front\n  else:\n    return 0 #on_segment\n\ndef get_distanceLP(p0,p1,p2):\n  return abs(cross(p1 - p0,p2-p0)/abs(p1-p0))\n\ndef get_distanceSP(p0,p1,p2):\n  if dot(p1-p0,p2-p0)<0:\n    return abs(p2-p0)\n  if dot(p0-p1,p2-p1)<0:\n    return abs(p2-p1)\n  return get_distanceLP(p0,p1,p2)\n\ndef get_distance(a,b,c,d):\n  if intersect(a,b,c,d):\n    return 0\n  return min(min(get_distanceSP(a,b,c),get_distanceSP(a,b,d)),min(get_distanceSP(c,d,a),get_distanceSP(c,d,b)))\n\ndef intersect(a,b,c,d):\n  return ccw(a,b,c) * ccw(a,b,d) <=0 and ccw(c,d,a) * ccw(c,d,b) <=0\n\nn=int(input())\nfor i in range(n):\n  x0,y0,x1,y1,x2,y2,x3,y3 = map(int,input().split())\n  p0=complex(x0,y0)\n  p1=complex(x1,y1)\n  p2=complex(x2,y2)\n  p3=complex(x3,y3)\n  print(get_distance(p0,p1,p2,p3))\n\n\n\n"
  },
  {
    "language": "Python",
    "code": "import math\nfrom typing import Union\n\n\nclass Point(object):\n    __slots__ = ['x', 'y']\n\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __add__(self, other):\n        return Point(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other):\n        return Point(self.x - other.x, self.y - other.y)\n\n    def __mul__(self, other: Union[int, float]):\n        return Point(self.x * other, self.y * other)\n\n    def norm(self):\n        return pow(self.x, 2) + pow(self.y, 2)\n\n    def abs(self):\n        return math.sqrt(self.norm())\n\n    def __repr__(self):\n        return f\"({self.x},{self.y})\"\n\n\nclass Vector(Point):\n    __slots__ = ['x', 'y', 'pt1', 'pt2']\n\n    def __init__(self, pt1: Point, pt2: Point):\n        super().__init__(pt2.x - pt1.x, pt2.y - pt1.y)\n        self.pt1 = pt1\n        self.pt2 = pt2\n\n    def dot(self, other):\n        return self.x * other.x + self.y * other.y\n\n    def cross(self, other):\n        return self.x * other.y - self.y * other.x\n\n    def __repr__(self):\n        return f\"{self.pt1},{self.pt2}\"\n\n\nclass Segment(Vector):\n    __slots__ = ['x', 'y', 'pt1', 'pt2']\n\n    def __init__(self, pt1: Point, pt2: Point):\n        super().__init__(pt1, pt2)\n\n    def projection(self, pt: Point)-> Point:\n        t = self.dot(Vector(self.pt1, pt)) / self.norm()\n        return self.pt1 + self * t\n\n    def reflection(self, pt: Point) -> Point:\n        return self.projection(pt) * 2 - pt\n\n    def is_intersected_with(self, other) -> bool:\n        if (self.point_geometry(other.pt1) * self.point_geometry(other.pt2)) <= 0\\\n                and other.point_geometry(self.pt1) * other.point_geometry(self.pt2) <= 0:\n            return True\n        else:\n            return False\n\n    def point_geometry(self, pt: Point) -> int:\n        \"\"\"\n        [-2:\"Online Back\", -1:\"Counter Clockwise\", 0:\"On Segment\", 1:\"Clockwise\",  2:\"Online Front\"]\n        \"\"\"\n        vec_pt1_to_pt = Vector(self.pt1, pt)\n        cross = self.cross(vec_pt1_to_pt)\n        if cross > 0:\n            return -1   # counter clockwise\n        elif cross < 0:\n            return 1    # clockwise\n        else:           # cross == 0\n            dot = self.dot(vec_pt1_to_pt)\n            if dot < 0:\n                return -2    # online back\n            else:       # dot > 0\n                if self.abs() < vec_pt1_to_pt.abs():\n                    return 2    # online front\n                else:\n                    return 0    # on segment\n\n    def cross_point(self, other) -> Point:\n        d1 = abs(self.cross(Vector(self.pt1, other.pt1)))       # / self.abs()\n        d2 = abs(self.cross(Vector(self.pt1, other.pt2)))       # / self.abs()\n        t = d1 / (d1 + d2)\n        return other.pt1 + other * t\n\n    def distance_to_point(self, pt: Point) -> Union[int, float]:\n        vec_pt1_to_pt = Vector(self.pt1, pt)\n        if self.dot(vec_pt1_to_pt) <= 0:\n            return vec_pt1_to_pt.abs()\n        vec_pt2_to_pt = Vector(self.pt2, pt)\n        if Vector.dot(self * -1, vec_pt2_to_pt) <= 0:\n            return vec_pt2_to_pt.abs()\n        return (self.projection(pt) - pt).abs()\n\n    def segment_distance(self, other) -> Union[int, float]:\n        if self.is_intersected_with(other):\n            return 0.0\n        else:\n            return min(\n                self.distance_to_point(other.pt1),\n                self.distance_to_point(other.pt2),\n                other.distance_to_point(self.pt1),\n                other.distance_to_point(self.pt2)\n            )\n\n    def __repr__(self):\n        return f\"{self.pt1},{self.pt2}\"\n\n\ndef main():\n    num_query = int(input())\n    for i in range(num_query):\n        p0_x, p0_y, p1_x, p1_y, p2_x, p2_y, p3_x, p3_y = map(int, input().split())\n        seg_1 = Segment(Point(p0_x, p0_y), Point(p1_x, p1_y))\n        seg_2 = Segment(Point(p2_x, p2_y), Point(p3_x, p3_y))\n\n        print(f'{seg_1.segment_distance(seg_2):.10f}')\n    return\n\n\nmain()\n"
  },
  {
    "language": "Python",
    "code": "#! /usr/bin/env python3\n\nfrom typing import List, Tuple\nfrom math import sqrt\n\nEPS = 1e-10\n\n\ndef float_equal(x: float, y: float) -> bool:\n    return abs(x - y) < EPS\n\n\nclass Point:\n\n    def __init__(self, x: float=0.0, y: float=0.0) -> None:\n        self.x = x\n        self.y = y\n\n    def __repr__(self) -> str:\n        return \"Point({}, {})\".format(self.x, self.y)\n\n    def __eq__(self, other: object) -> bool:\n        if not isinstance(other, Point):\n            # print(\"NotImplemented in Point\")\n            return NotImplemented\n        return float_equal(self.x, other.x) and \\\n            float_equal(self.y, other.y)\n\n    def __add__(self, other: 'Point') -> 'Point':\n        return Point(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other: 'Point') -> 'Point':\n        return Point(self.x - other.x, self.y - other.y)\n\n    def __mul__(self, k: float) -> 'Point':\n        return Point(self.x * k, self.y * k)\n\n    def __rmul__(self, k: float) -> 'Point':\n        return self * k\n\n    def __truediv__(self, k: float) -> 'Point':\n        return Point(self.x / k, self.y / k)\n\n    def __lt__(self, other: 'Point') -> bool:\n        return self.y < other.y \\\n            if abs(self.x - other.x) < EPS \\\n            else self.x < other.x\n\n    def norm(self):\n        return self.x * self.x + self.y * self.y\n\n    def abs(self):\n        return sqrt(self.norm())\n\n    def dot(self, other: 'Point') -> float:\n        return self.x * other.x + self.y * other.y\n\n    def cross(self, other: 'Point') -> float:\n        return self.x * other.y - self.y * other.x\n\n    def is_orthogonal(self, other: 'Point') -> bool:\n        return float_equal(self.dot(other), 0.0)\n\n    def is_parallel(self, other: 'Point') -> bool:\n        return float_equal(self.cross(other), 0.0)\n\n    def distance(self, other: 'Point') -> float:\n        return (self - other).abs()\n\n    def in_side_of(self, seg: 'Segment') -> bool:\n        return seg.vector().dot(\n            Segment(seg.p1, self).vector()) >= 0\n\n    def in_width_of(self, seg: 'Segment') -> bool:\n        return \\\n            self.in_side_of(seg) and \\\n            self.in_side_of(seg.reverse())\n\n    def distance_to_segment(self, seg: 'Segment') -> float:\n        if self.in_width_of(seg):\n            return self.distance(seg.projection(self))\n        else:\n            return min(self.distance(seg.p1),\n                       self.distance(seg.p2))\n\n\nVector = Point\n\n\nclass Segment:\n\n    def __init__(self, p1: Point = None, p2: Point = None) -> None:\n        self.p1: Point = Point() if p1 is None else p1\n        self.p2: Point = Point() if p2 is None else p2\n\n    def __repr__(self) -> str:\n        return \"Segment({}, {})\".format(self.p1, self.p2)\n\n    def __eq__(self, other: object) -> bool:\n        if not isinstance(other, Segment):\n            # print(\"NotImplemented in Segment\")\n            return NotImplemented\n        return self.p1 == other.p1 and self.p2 == other.p2\n\n    def vector(self) -> Vector:\n        return self.p2 - self.p1\n\n    def reverse(self) -> 'Segment':\n        return Segment(self.p2, self.p1)\n\n    def is_orthogonal(self, other: 'Segment') -> bool:\n        return self.vector().is_orthogonal(other.vector())\n\n    def is_parallel(self, other: 'Segment') -> bool:\n        return self.vector().is_parallel(other.vector())\n\n    def projection(self, p: Point) -> Point:\n        v = self.vector()\n        vp = p - self.p1\n        return v.dot(vp) / v.norm() * v + self.p1\n\n    def reflection(self, p: Point) -> Point:\n        x = self.projection(p)\n        return p + 2 * (x - p)\n\n    def intersect_ratio(self, other: 'Segment') -> Tuple[float, float]:\n        a = self.vector()\n        b = other.vector()\n        c = self.p1 - other.p1\n        s = b.cross(c) / a.cross(b)\n        t = a.cross(c) / a.cross(b)\n        return s, t\n\n    def intersects(self, other: 'Segment') -> bool:\n        s, t = self.intersect_ratio(other)\n        return (0 <= s <= 1) and (0 <= t <= 1)\n\n    def intersection(self, other: 'Segment') -> Point:\n        s, _ = self.intersect_ratio(other)\n        return self.p1 + s * self.vector()\n\n    def distance_with_segment(self, other: 'Segment') -> float:\n        if not self.is_parallel(other) and \\\n                self.intersects(other):\n            return 0\n        else:\n            return min(\n                self.p1.distance_to_segment(other),\n                self.p2.distance_to_segment(other),\n                other.p1.distance_to_segment(self),\n                other.p2.distance_to_segment(self))\n\n\nLine = Segment\n\n\nclass Circle:\n\n    def __init__(self, c: Point=None, r: float=0.0) -> None:\n        self.c: Point = Point() if c is None else c\n        self.r: float = r\n\n    def __eq__(self, other: object) -> bool:\n        if not isinstance(other, Circle):\n            return NotImplemented\n        return self.c == other.c and self.r == other.r\n\n    def __repr__(self) -> str:\n        return \"Circle({}, {})\".format(self.c, self.r)\n        \ndef main() -> None:\n    n = int(input())\n\n    for _ in range(n):\n        x1, y1, x2, y2, x3, y3, x4, y4 = [int(x) for x in input().split()]\n        s1 = Segment(Point(x1, y1), Point(x2, y2))\n        s2 = Segment(Point(x3, y3), Point(x4, y4))\n        print(s1.distance_with_segment(s2))\n\n\nif __name__ == \"__main__\":\n    main()\n\n\n"
  },
  {
    "language": "Python",
    "code": "import sys\nclass Line:\n    def __init__(self,p1,p2):\n        if p1[1] < p2[1]:self.s=p2;self.e=p1\n        elif p1[1] > p2[1]:self.s=p1;self.e=p2\n        else:\n            if p1[0] < p2[0]:self.s=p1;self.e=p2\n            else:self.s=p2;self.e=p1\n\ndef cross(a,b):return a[0]*b[1] - a[1]*b[0]\ndef dot(a,b):return a[0]*b[0]+a[1]*b[1]\ndef dif(a,b):return [x-y for x,y in zip(a,b)]\ndef dist(a,b):return ((a[0]-b[0])**2+(a[1]-b[1])**2)**0.5\ndef isec(l,m):\n    a = dif(l.e,l.s);b = dif(m.e,l.s);c = dif(m.s,l.s)\n    d = dif(m.e,m.s);e = dif(l.e,m.s);f = dif(l.s,m.s)\n    g = lambda a, b : cross(a,b)==0 and dot(a,b)>0 and dot(b,b)<dot(a,a)\n    if g(a,b) or g(a,c) or g(d,e) or g(d,f):return True\n    elif l.s == m.e or l.s == m.s or l.e == m.e or l.e == m.s:return True\n    elif cross(a,b) * cross(a,c) >= 0 or cross(d,e) * cross(d,f) >= 0:return False\n    else:return True\ndef plus(a,b):return [x+y for x,y in zip(a,b)]\ndef projection(a,b):return [x*dot(a,b)/dot(a,a) for x in a]\ndef proj(A,B,C,D):\n    AB = dif(B,A) ; AC = dif(C,A) ; AD = dif(D,A)\n    CD = dif(D,C) ; CA = dif(A,C) ; CB = dif(B,C)\n    _A = plus(projection(CD,CA),C) \n    _B = plus(projection(CD,CB),C)\n    _C = plus(projection(AB,AC),A)\n    _D = plus(projection(AB,AD),A)\n    return [_A,_B,_C,_D]\ndef Order(a,b):\n    crs = cross(a,b)\n    if abs(crs) < 1.0e-12 : crs = 0.0\n    if crs > 0 : return \"COUNTER_CLOCKWISE\"\n    elif crs < 0 : return \"CLOCKWISE\"\n    else:\n        if dot(a,b) < 0 : return \"ONLINE_BACK\"\n        elif dot(a,a) < dot(b,b) : return \"ONLINE_FRONT\"\n        else : return \"ON_SEGMENT\"\n\nq = int(input())\nfor i in range(q):\n    a,b,c,d,e,f,g,h = [int(i) for i in input().split()]\n    A = [a,b] ; B = [c,d] ; C = [e,f] ; D = [g,h]\n    l = Line(A,B) ; m = Line(C,D)\n    if isec(l,m):\n        print(0.0)\n        continue\n    _A,_B,_C,_D = proj(A,B,C,D)\n    AB = dif(B,A) ; CD = dif(D,C)\n    A_C = dif(_C,A) ; A_D = dif(_D,A) ; C_A = dif(_A,C) ; C_B = dif(_B,C)\n    DIST = [dist(A,C),dist(A,D),dist(B,C),dist(B,D),dist(_A,A),dist(_B,B),dist(_C,C),dist(_D,D)]\n    fun = lambda x : x != \"ON_SEGMENT\"\n    if fun(Order(CD,C_A)) : DIST[4] = sys.maxsize\n    if fun(Order(CD,C_B)) : DIST[5] = sys.maxsize\n    if fun(Order(AB,A_C)) : DIST[6] = sys.maxsize\n    if fun(Order(AB,A_D)) : DIST[7] = sys.maxsize\n    print(min(DIST))"
  },
  {
    "language": "Python",
    "code": "# !/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\ninput:\n4 5 1\n0 1 2\n0 2 3\n1 2 -5\n1 3 1\n2 3 2\n\noutput:\nINF\n0\n-5\n-3\n\nOR\ninput:\n4 6 0\n0 1 2\n0 2 3\n1 2 -5\n1 3 1\n2 3 2\n3 1 0\n\noutput:\nNEGATIVE CYCLE\n\"\"\"\n\nimport sys\nfrom math import isinf\n\n\ndef generate_adj_table(_v_info):\n    for each in _v_info:\n        source, target, cost = map(int, each)\n        init_adj_table[source][target] = cost\n    return init_adj_table\n\n\ndef bellman_ford():\n    distance[root] = 0\n\n    for j in range(vertices - 1):\n        for current, current_info in enumerate(adj_table):\n            for adj, cost in current_info.items():\n                if distance[current] + cost < distance[adj]:\n                    distance[adj] = distance[current] + cost\n\n    for current, current_info in enumerate(adj_table):\n        for adj, cost in current_info.items():\n            if distance[current] + cost < distance[adj]:\n                print('NEGATIVE CYCLE')\n                return list()\n\n    return distance\n\n\nif __name__ == '__main__':\n    _input = sys.stdin.readlines()\n    vertices, edges, root = map(int, _input[0].split())\n    v_info = map(lambda x: x.split(), _input[1:])\n\n    distance = [float('inf')] * vertices\n    init_adj_table = tuple(dict() for _ in range(vertices))\n\n    adj_table = generate_adj_table(v_info)\n\n    res = bellman_ford()\n    for ele in res:\n        if isinf(ele):\n            print('INF')\n        else:\n            print(ele)"
  },
  {
    "language": "Python",
    "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\ninput:\n3\n0 0 1 0 0 1 1 1\n0 0 1 0 2 1 1 2\n-1 0 1 0 0 1 0 -1\n\noutput:\n1.0000000000\n1.4142135624\n0.0000000000\n\"\"\"\n\nimport sys\nfrom collections import namedtuple\n\nEPS = 1e-9\n\n\ndef cross(a, b):\n    return a.real * b.imag - a.imag * b.real\n\n\ndef dot(a, b):\n    return a.real * b.real + a.imag * b.imag\n\n\ndef get_distance_lp(l, p):\n    return abs(cross(l.target - l.source, p - l.source) / abs(l.target - l.source))\n\n\ndef get_distance_sp(s, p):\n    if dot(s.target - s.source, p - s.source) < 0:\n        return abs(p - s.source)\n    elif dot(s.source - s.target, p - s.target) < 0:\n        return abs(p - s.target)\n    else:\n        return get_distance_lp(s, p)\n\n\ndef check_ccw(p0, p1, p2):\n    a, b = p1 - p0, p2 - p0\n    if cross(a, b) > EPS:\n        flag = 1\n    elif cross(a, b) < -1 * EPS:\n        flag = -1\n    elif dot(a, b) < -1 * EPS:\n        flag = 2\n    elif abs(a) < abs(b):\n        flag = -2\n    else:\n        flag = 0\n    return flag\n\n\ndef check_intersection(p0, p1, p2, p3):\n    intersected = (check_ccw(p0, p1, p2) * check_ccw(p0, p1, p3) <= 0) and \\\n                  (check_ccw(p2, p3, p0) * check_ccw(p2, p3, p1) <= 0)\n\n    return intersected\n\n\ndef solve(_segments):\n    for segment in _segments:\n        axis = tuple(map(int, segment))\n        p0, p1, p2, p3 = (x + y * 1j for x, y in zip(axis[::2], axis[1::2]))\n        s1, s2 = Segment(p0, p1), Segment(p2, p3)\n\n        intersected = check_intersection(s1.source, s1.target, s2.source, s2.target)\n        if intersected:\n            distance = 0\n        else:\n            distance = min(min(get_distance_sp(s1, s2.source), get_distance_sp(s1, s2.target)),\n                           min(get_distance_sp(s2, s1.source), get_distance_sp(s2, s1.target)))\n\n        print('{ans:.10f}'.format(ans=distance))\n\n    return None\n\n\nif __name__ == '__main__':\n    _input = sys.stdin.readlines()\n    questions = int(_input[0])\n    segments = map(lambda x: x.split(), _input[1:])\n    Segment = namedtuple('Segment', ('source', 'target'))\n    solve(segments)"
  },
  {
    "language": "Python",
    "code": "from math import sqrt\nfor t in xrange(input()):\n    x0, y0, x1, y1, x2, y2, x3, y3 = map(int, raw_input().split())\n    dx0 = x1 - x0\n    dy0 = y1 - y0\n    dx1 = x3 - x2\n    dy1 = y3 - y2\n\n    s = (y0-y2)*dx1 - (x0-x2)*dy1\n    sm = dx0*dy1 - dy0*dx1\n    if s < 0:\n        s = -s\n        sm = -sm\n    t = (y2-y0)*dx0 - (x2-x0)*dy0\n    tm = dx1*dy0 - dy1*dx0\n    intersection = 0\n    if t < 0:\n        t = -t\n        tm = -tm\n    dis = sqrt(\n            min(\n                (x2-x0)**2 + (y2-y0)**2,\n                (x3-x0)**2 + (y3-y0)**2,\n                (x2-x1)**2 + (y2-y1)**2,\n                (x3-x1)**2 + (y3-y1)**2\n                )\n            )\n    ov = dx0*dy1 - dy0*dx1\n    if 0 <= s <= max(sm, 0) and 0 <= t <= max(tm, 0):\n        if ov == 0:\n            r0 = dx0**2 + dy0**2\n            r1 = (x2-x0)*dx0 + (y2-y0)*dy0\n            r2 = (x3-x0)*dx0 + (y3-y0)*dy0\n            if r1 > r2: r1, r2 = r2, r1\n            if r2 < 0 or r0 < r1:\n                intersection = 0\n            else:\n                intersection = 1\n        else:\n            intersection = 1\n    else:\n        if ov == 0:\n            r0 = dx0**2 + dy0**2\n            r1 = dx0*(x2-x0) + dy0*(y2-y0)\n            r2 = dx0*(x3-x0) + dy0*(y3-y0)\n            if 0 <= r2 and r1 <= r0:\n                dis = min(dis, abs(dx0*(y2-y0) - dy0*(x2-x0)) / sqrt(r0))\n        else:\n            r0 = dx0**2 + dy0**2\n            r1 = dx0*(x2-x0) + dy0*(y2-y0)\n            r2 = dx0*(x3-x0) + dy0*(y3-y0)\n            if 0 <= r1 <= r0:\n                o1 = abs(dx0*(y2-y0) - dy0*(x2-x0))\n                dis = min(dis, o1 / sqrt(r0))\n            if 0 <= r2 <= r0:\n                o2 = abs(dx0*(y3-y0) - dy0*(x3-x0))\n                dis = min(dis, o2 / sqrt(r0))\n            s0 = dx1**2 + dy1**2\n            s1 = dx1*(x0-x2) + dy1*(y0-y2)\n            s2 = dx1*(x1-x2) + dy1*(y1-y2)\n            if 0 <= s1 <= s0:\n                o1 = abs(dx1*(y0-y2) - dy1*(x0-x2))\n                dis = min(dis, o1 / sqrt(s0))\n            if 0 <= s2 <= s0:\n                o2 = abs(dx1*(y1-y2) - dy1*(x1-x2))\n                dis = min(dis, o2 / sqrt(s0))\n\n        intersection = 0\n    if intersection:\n        print \"%.09f\" % 0\n    else:\n        print \"%.09f\" % dis"
  },
  {
    "language": "Python",
    "code": "import sys\nfrom collections import namedtuple\nfrom itertools import starmap\nreadline = sys.stdin.readline\nEPS = 1e-9\nclass Segment(object):\n    __slots__ = ('fi', 'se')\n    def __init__(self, fi, se):\n        self.fi = fi\n        self.se = se\ndef cross(a, b):\n    return a.real * b.imag - a.imag * b.real\ndef dot(a, b):\n    return a.real * b.real + a.imag * b.imag\ndef norm(base):\n    return abs(base) ** 2\ndef project(s, p2):\n    base = s.fi - s.se\n    r = dot(p2 - s.fi, base) / norm(base)\n    return s.fi + base * r\ndef reflect(s, p):\n    return p + (project(s, p) - p) * 2.0\ndef ccw(p1, p2, p3):\n    a = p2 - p1\n    b = p3 - p1\n    if cross(a, b) > EPS: return 1\n    if cross(a, b) < -EPS: return -1\n    if dot(a, b) < -EPS: return 2\n    if norm(a) < norm(b): return -2\n    return 0\ndef intersect4(p1, p2, p3, p4):\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 and\n\t\t\tccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0)\ndef intersect2(s1, s2):\n    return intersect4(s1.fi, s1.se, s2.fi, s2.se)\ndef getDistance(a, b):  return abs(a - b)\ndef getDistanceLP(l, p):\n    return abs(cross(l.se - l.fi, p - l.fi) / abs(l.se - l.fi))\ndef getDistanceSP(s, p):\n    if dot(s.se - s.fi, p - s.fi) < 0.0: return abs(p - s.fi)\n    if dot(s.fi - s.se, p - s.se) < 0.0: return abs(p - s.se)\n    return getDistanceLP(s, p)\ndef getDistances(s1, s2):\n    if intersect2(s1, s2): return 0.0\n    return min(getDistanceSP(s1, s2.fi), getDistanceSP(s1, s2.se),\n               getDistanceSP(s2, s1.fi), getDistanceSP(s2, s1.se))\nn = int(readline())\nfor _ in [0] * n:\n    p0, p1, p2, p3 = starmap(complex, zip(*[map(int, input().split())] * 2))\n    s1 = Segment(p0, p1)\n    s2 = Segment(p2, p3)\n    print(\"{0:.10f}\".format(getDistances(s1, s2)))"
  },
  {
    "language": "Python",
    "code": "import sys\nfrom collections import namedtuple\nfrom itertools import starmap\nreadline = sys.stdin.readline\nEPS = 1e-9\nclass Segment(object):\n    __slots__ = ('fi', 'se')\n    def __init__(self, fi, se):\n        self.fi = fi\n        self.se = se\ndef cross(a, b):\n    return a.real * b.imag - a.imag * b.real\ndef dot(a, b):\n    return a.real * b.real + a.imag * b.imag\ndef norm(base):\n    return abs(base) ** 2\ndef project(s, p2):\n    base = s.fi - s.se\n    r = dot(p2 - s.fi, base) / norm(base)\n    return s.fi + base * r\ndef reflect(s, p):\n    return p + (project(s, p) - p) * 2.0\ndef ccw(p1, p2, p3):\n    a = p2 - p1\n    b = p3 - p1\n    if cross(a, b) > EPS: return 1\n    if cross(a, b) < -EPS: return -1\n    if dot(a, b) < -EPS: return 2\n    if norm(a) < norm(b): return -2\n    return 0\ndef intersect4(p1, p2, p3, p4):\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 and\n\t\t\tccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0)\ndef intersect2(s1, s2):\n    return intersect4(s1.fi, s1.se, s2.fi, s2.se)\ndef getDistance(a, b):  return abs(a - b)\ndef getDistanceLP(l, p):\n    return abs(cross(l.se - l.fi, p - l.fi) / abs(l.se - l.fi))\ndef getDistanceSP(s, p):\n    if dot(s.se - s.fi, p - s.fi) < 0.0: return abs(p - s.fi)\n    if dot(s.fi - s.se, p - s.se) < 0.0: return abs(p - s.se)\n    return getDistanceLP(s, p)\ndef getDistances(s1, s2):\n    if intersect2(s1, s2): return 0.0\n    return min(getDistanceSP(s1, s2.fi), getDistanceSP(s1, s2.se),\n               getDistanceSP(s2, s1.fi), getDistanceSP(s2, s1.se))\nn = int(readline())\nfor _ in [0] * n:\n    li = tuple(map(int, readline().split()))\n    p0, p1, p2, p3 = (x + y * 1j for x, y in zip(li[::2], li[1::2]))\n    s1 = Segment(p0, p1)\n    s2 = Segment(p2, p3)\n    print(\"{0:.10f}\".format(getDistances(s1, s2)))"
  },
  {
    "language": "Python",
    "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\ninput:\n3\n0 0 1 0 0 1 1 1\n0 0 1 0 2 1 1 2\n-1 0 1 0 0 1 0 -1\n\noutput:\n1.0000000000\n1.4142135624\n0.0000000000\n\"\"\"\n\nimport sys\n\n\nclass Segment(object):\n    __slots__ = ('source', 'target')\n\n    def __init__(self, source, target):\n        self.source = complex(source)\n        self.target = complex(target)\n\n\ndef cross(a, b):\n    return a.real * b.imag - a.imag * b.real\n\n\ndef dot(a, b):\n    return a.real * b.real + a.imag * b.imag\n\n\ndef get_distance_lp(l, p):\n    return abs(cross(l.target - l.source, p - l.source) / abs(l.target - l.source))\n\n\ndef get_distance_sp(s, p):\n    if dot(s.target - s.source, p - s.source) < 0:\n        return abs(p - s.source)\n    elif dot(s.source - s.target, p - s.target) < 0:\n        return abs(p - s.target)\n    else:\n        return get_distance_lp(s, p)\n\n\ndef calc_distance(line_info):\n    for line_pair in line_info:\n        line_axis = tuple(map(int, line_pair))\n        p0, p1, p2, p3 = (x + y * 1j for x, y in zip(line_axis[::2], line_axis[1::2]))\n        s1, s2 = Segment(p0, p1), Segment(p2, p3)\n        # TODO: check intersection of segments: s1, s2\n        distance = min(min(get_distance_sp(s1, s2.source), get_distance_sp(s1, s2.target)),\n                       min(get_distance_sp(s2, s1.source), get_distance_sp(s2, s1.target))\n                       )\n        print('{0:.10f}'.format(distance))\n\n    return None\n\n\nif __name__ == '__main__':\n    _input = sys.stdin.readlines()\n    questions = int(_input[0])\n    lines = map(lambda x: x.split(), _input[1:])\n    calc_distance(lines)"
  },
  {
    "language": "Python",
    "code": "import math\n\nclass Point():\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def distance(self, pnt):\n        return math.sqrt((self.x - pnt.x)**2 + (self.y - pnt.y)**2)\n\nclass Segment():\n    def __init__(self, x1, y1, x2, y2):\n        self.p1 = Point(x1, y1)\n        self.p2 = Point(x2, y2)\n        if self.p1.x == self.p2.x:\n            self.a = float('inf')\n            self.b = None\n        else:\n            self.a = (self.p1.y - self.p2.y)/(self.p1.x - self.p2.x)\n            self.b = self.p1.y - self.a*self.p1.x\n\n    def is_intersect(self, seg):\n        a = (seg.p1.x - seg.p2.x) * (self.p1.y - seg.p1.y) + (seg.p1.y - seg.p2.y) * (seg.p1.x - self.p1.x)\n        b = (seg.p1.x - seg.p2.x) * (self.p2.y - seg.p1.y) + (seg.p1.y - seg.p2.y) * (seg.p1.x - self.p2.x)\n        c = (self.p1.x - self.p2.x) * (seg.p1.y - self.p1.y) + (self.p1.y - self.p2.y) * (self.p1.x - seg.p1.x)\n        d = (self.p1.x - self.p2.x) * (seg.p2.y - self.p1.y) + (self.p1.y - self.p2.y) * (self.p1.x - seg.p2.x)\n        e = (self.p1.x - seg.p1.x)*(self.p2.x - seg.p2.x)\n        f = (self.p1.x - seg.p2.x)*(self.p2.x - seg.p1.x)\n        g = (self.p1.y - seg.p1.y)*(self.p2.y - seg.p2.y)\n        h = (self.p1.y - seg.p2.y)*(self.p2.y - seg.p1.y)\n        return a*b <= 0 and c*d <= 0 and (e <= 0 or f <= 0) and (g <= 0 or h <= 0)\n\n    def cross_point(self, seg):\n        if self.is_intersect(seg) == False: return None\n        if self.a == float('inf'):\n            return self.p1.x, seg.a * self.p1.x + seg.b\n        elif seg.a == float('inf'):\n            return seg.p1.x, self.a * seg.p1.x + self.b\n        else:\n            x = -(self.b - seg.b)/(self.a - seg.a)\n            y = seg.a * x + seg.b\n            return x, y\n\n    def distance_with_point(self, pnt):\n        if self.a == float('inf'):\n            return abs(pnt.x - self.p1.x)\n        dist = abs(pnt.y - self.a*pnt.x - self.b)/math.sqrt(1 + self.a**2)\n        a, b = pnt.distance(self.p1), pnt.distance(self.p2)\n        lower_bound = min(a, b)\n        if lower_bound < dist:\n            return dist\n        else:\n            return lower_bound\n\n    def distance(self, seg):\n        if self.is_intersect(seg): return 0\n        a = self.distance_with_point(seg.p1)\n        b = self.distance_with_point(seg.p2)\n        c = seg.distance_with_point(self.p1)\n        d = seg.distance_with_point(self.p2)\n        return min(a, b, c, d)\n\nq = int(input())\nfor i in range(q):\n    x0, y0, x1, y1, x2, y2, x3, y3 = list(map(int, input().split(' ')))\n    line1, line2 = Segment(x0, y0, x1, y1), Segment(x2, y2, x3, y3)\n    dist = line1.distance(line2)\n    print('%.9f'%dist)\n"
  },
  {
    "language": "Python",
    "code": "from functools import singledispatch\nimport math\n\nEPS = 1e-10\n\nCOUNTER_CLOCKWISE = 1\nCLOCKWISE = -1\nONLINE_BACK = 2\nONLINE_FRONT = -2\nON_SEGMENT = 0\n\nclass Segment():\n    def __init__(self, p1, p2):\n        self.p1 = p1\n        self.p2 = p2\n\nclass Point():\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __add__(self, point):\n        # + 演算子での挙動を指定\n        return Point(self.x+point.x, self.y+point.y)\n\n    def __sub__(self, point):\n        # - 演算子での挙動を指定\n        return Point(self.x-point.x, self.y-point.y)\n\n    def __mul__(self, a):\n        # * 演算子での挙動を指定\n        return Point(a*self.x, a*self.y)\n\n    def __truediv__(self, a):\n        # / 演算子での挙動を指定\n        return Point(self.x/a, self.y/a)\n\n    def __abs__(self):\n        # abs関数での挙動を指定\n        return math.sqrt(self.norm())\n\n    def norm(self):\n        return self.x**2+self.y**2\n\n    def __eq__(self, point):\n        # == 演算子での挙動を指定\n        return abs(self.x-point.x) < EPS and abs(self.y-point.y) <EPS\n\ndef dot(a, b):\n    return a.x*b.x+a.y*b.y\n\ndef cross(a, b):\n    return a.x*b.y - a.y*b.x\n\ndef isOrthogonal(a, b):\n    return dot(a, b) == 0\n\ndef isParallel(a, b):\n    return cross(a, b) == 0\n\ndef project(s, p):\n    #s: Segment(), p: Point()\n    base = s.p2 - s.p1\n    r = dot(p-s.p1, base)/base.norm()\n    return s.p1+base*r\n\ndef reflect(s, p):\n    return p+(project(s, p)-p)*2\n\n@singledispatch\ndef get_distance(a, b):\n    return abs(a-b)\n\ndef get_distance_lp(l, p):\n    return abs(cross(l.p2-l.p1, p-l.p1)/abs(l.p2-l.p1))\n\ndef get_distance_sp(s, p):\n    if dot(s.p2-s.p1, p-s.p1) < 0:\n        return abs(p-s.p1)\n    if dot(s.p1-s.p2, p-s.p2) < 0:\n        return abs(p-s.p2)\n    return get_distance_lp(s, p)\n    \n@get_distance.register(Segment)\ndef _(s1, s2):\n    if intersect(s1, s2):\n        return 0\n    return min([get_distance_sp(s1, s2.p1), get_distance_sp(s1, s2.p2),\n                get_distance_sp(s2, s1.p1), get_distance_sp(s2, s1.p2)])\n\ndef ccw(p0, p1, p2):\n    a = p1 - p0\n    b = p2 - p0\n    if cross(a, b) > EPS:\n        return COUNTER_CLOCKWISE\n    if cross(a, b) < -EPS:\n        return CLOCKWISE\n    if dot(a, b) < -EPS:\n        return ONLINE_BACK\n    if a.norm() < b.norm():\n        return ONLINE_FRONT\n    return ON_SEGMENT\n\n@singledispatch\ndef intersect(p1, p2, p3, p4):\n    return (ccw(p1, p2, p3)*ccw(p1, p2, p4) <= 0\n            and ccw(p3, p4, p1)*ccw(p3, p4, p2) <= 0)\n\n@intersect.register(Segment)\ndef _(s1, s2):\n    return intersect(s1.p1, s1.p2, s2.p1, s2.p2)\n\n\nif __name__ == '__main__':\n    from sys import stdin\n    input = stdin.readline\n\n    q = int(input())\n    for _ in range(q):\n        x0, y0, x1, y1, x2, y2, x3, y3 = map(int, input().split())\n        p0 = Point(x0, y0)\n        p1 = Point(x1, y1)\n        p2 = Point(x2, y2)\n        p3 = Point(x3, y3)\n        s1 = Segment(p0, p1)\n        s2 = Segment(p2, p3)\n        print(get_distance(s1, s2))\n"
  },
  {
    "language": "Rust",
    "code": "macro_rules ! input { ( source = $ s : expr , $ ( $ r : tt ) * ) => { let mut iter = $ s . split_whitespace ( ) ; input_inner ! { iter , $ ( $ r ) * } } ; ( iter = $ iter : ident , $ ( $ r : tt ) * ) => { let s = { use std :: io :: Read ; let mut s = String :: new ( ) ; std :: io :: stdin ( ) . read_to_string ( & mut s ) . unwrap ( ) ; s } ; let mut $ iter = s . split_whitespace ( ) ; input_inner ! { $ iter , $ ( $ r ) * } } ; ( $ ( $ r : tt ) * ) => { let s = { use std :: io :: Read ; let mut s = String :: new ( ) ; std :: io :: stdin ( ) . read_to_string ( & mut s ) . unwrap ( ) ; s } ; let mut iter = s . split_whitespace ( ) ; input_inner ! { iter , $ ( $ r ) * } } ; }\nmacro_rules ! input_inner { ( $ iter : expr ) => { } ; ( $ iter : expr , ) => { } ; ( $ iter : expr , mut $ var : ident : $ t : tt $ ( $ r : tt ) * ) => { let mut $ var = read_value ! ( $ iter , $ t ) ; input_inner ! { $ iter $ ( $ r ) * } } ; ( $ iter : expr , mut $ var : ident $ ( $ r : tt ) * ) => { input_inner ! { $ iter , mut $ var : usize $ ( $ r ) * } } ; ( $ iter : expr , $ var : ident : $ t : tt $ ( $ r : tt ) * ) => { let $ var = read_value ! ( $ iter , $ t ) ; input_inner ! { $ iter $ ( $ r ) * } } ; ( $ iter : expr , $ var : ident $ ( $ r : tt ) * ) => { input_inner ! { $ iter , $ var : usize $ ( $ r ) * } } ; }\nmacro_rules ! read_value { ( $ iter : expr , ( $ ( $ t : tt ) ,* ) ) => { ( $ ( read_value ! ( $ iter , $ t ) ) ,* ) } ; ( $ iter : expr , [ $ t : tt ; $ len : expr ] ) => { ( 0 ..$ len ) . map ( | _ | read_value ! ( $ iter , $ t ) ) . collect ::< Vec < _ >> ( ) } ; ( $ iter : expr , { chars : $ base : expr } ) => { read_value ! ( $ iter , String ) . chars ( ) . map ( | c | ( c as u8 - $ base as u8 ) as usize ) . collect ::< Vec < usize >> ( ) } ; ( $ iter : expr , { char : $ base : expr } ) => { read_value ! ( $ iter , { chars : $ base } ) [ 0 ] } ; ( $ iter : expr , chars ) => { read_value ! ( $ iter , String ) . chars ( ) . collect ::< Vec < char >> ( ) } ; ( $ iter : expr , char ) => { read_value ! ( $ iter , chars ) [ 0 ] } ; ( $ iter : expr , usize1 ) => { read_value ! ( $ iter , usize ) - 1 } ; ( $ iter : expr , $ t : ty ) => { $ iter . next ( ) . unwrap ( ) . parse ::<$ t > ( ) . unwrap ( ) } ; }\nuse std::ops::{Add, Div, Mul, Neg, Sub};\n#[derive(Clone, Copy, Debug, Default, PartialEq, Eq, Hash)]\npub struct Complex<T> {\n    pub re: T,\n    pub im: T,\n}\nimpl<T> Complex<T> {\n    #[inline]\n    pub fn new(re: T, im: T) -> Complex<T> {\n        Complex { re: re, im: im }\n    }\n}\nimpl<T: Neg<Output = T>> Complex<T> {\n    #[inline]\n    pub fn conjugate(self) -> Complex<T> {\n        Self::new(self.re, -self.im)\n    }\n}\nimpl<T: Add<Output = T> + Mul<Output = T>> Complex<T> {\n    #[inline]\n    pub fn dot(self, other: Self) -> T {\n        self.re * other.re + self.im * other.im\n    }\n}\nimpl<T: Sub<Output = T> + Mul<Output = T>> Complex<T> {\n    #[inline]\n    pub fn cross(self, other: Self) -> T {\n        self.re * other.im - self.im * other.re\n    }\n}\nimpl Complex<f64> {\n    #[inline]\n    pub fn from_polar(r: f64, theta: f64) -> Self {\n        Complex::new(r * theta.cos(), r * theta.sin())\n    }\n    #[inline]\n    pub fn abs(self) -> f64 {\n        self.re.hypot(self.im)\n    }\n    #[inline]\n    pub fn unit(self) -> Self {\n        self / self.abs()\n    }\n    #[inline]\n    pub fn angle(self) -> f64 {\n        self.im.atan2(self.re)\n    }\n}\nimpl<T: Add<Output = T>> Add for Complex<T> {\n    type Output = Self;\n    fn add(self, other: Self) -> Self::Output {\n        Self::new(self.re + other.re, self.im + other.im)\n    }\n}\nimpl<T: Copy + Add<Output = T>> Add<T> for Complex<T> {\n    type Output = Self;\n    fn add(self, other: T) -> Self::Output {\n        Self::new(self.re + other, self.im + other)\n    }\n}\nimpl<T: Sub<Output = T>> Sub for Complex<T> {\n    type Output = Self;\n    fn sub(self, other: Self) -> Self::Output {\n        Self::new(self.re - other.re, self.im - other.im)\n    }\n}\nimpl<T: Copy + Sub<Output = T>> Sub<T> for Complex<T> {\n    type Output = Self;\n    fn sub(self, other: T) -> Self::Output {\n        Self::new(self.re - other, self.im - other)\n    }\n}\nimpl<T: Copy + Add<Output = T> + Sub<Output = T> + Mul<Output = T>> Mul for Complex<T> {\n    type Output = Self;\n    fn mul(self, other: Self) -> Self::Output {\n        Self::new(\n            self.re * other.re - self.im * other.im,\n            self.re * other.im + self.im * other.re,\n        )\n    }\n}\nimpl<T: Copy + Mul<Output = T>> Mul<T> for Complex<T> {\n    type Output = Self;\n    fn mul(self, other: T) -> Self::Output {\n        Self::new(self.re * other, self.im * other)\n    }\n}\nimpl<T: Copy + Add<Output = T> + Sub<Output = T> + Mul<Output = T> + Div<Output = T>> Div\n    for Complex<T>\n{\n    type Output = Self;\n    fn div(self, other: Self) -> Self::Output {\n        let d = other.re * other.re + other.im * other.im;\n        Self::new(\n            (self.re * other.re + self.im * other.im) / d,\n            (self.im * other.re - self.re * other.im) / d,\n        )\n    }\n}\nimpl<T: Copy + Div<Output = T>> Div<T> for Complex<T> {\n    type Output = Self;\n    fn div(self, other: T) -> Self::Output {\n        Self::new(self.re / other, self.im / other)\n    }\n}\nimpl<T: Neg<Output = T>> Neg for Complex<T> {\n    type Output = Self;\n    fn neg(self) -> Self::Output {\n        Self::new(-self.re, -self.im)\n    }\n}\npub type Point = Complex<f64>;\n#[derive(Clone, Debug, PartialEq)]\npub struct LineSegment {\n    p1: Point,\n    p2: Point,\n}\nimpl LineSegment {\n    pub fn new(p1: Point, p2: Point) -> Self {\n        LineSegment { p1: p1, p2: p2 }\n    }\n    pub fn dir(&self) -> Point {\n        self.p2 - self.p1\n    }\n    pub fn ccw(&self, p: Point) -> CCW {\n        ccw(self.p1, self.p2, p)\n    }\n    pub fn projection(&self, p: Point) -> Point {\n        let e = self.dir().unit();\n        self.p1 + e * (p - self.p1).dot(e)\n    }\n    pub fn reflection(&self, p: Point) -> Point {\n        p + (self.projection(p) - p) * 2.0\n    }\n    pub fn is_parallel(&self, other: &Self) -> bool {\n        Real(self.dir().cross(other.dir())) == Real(0.)\n    }\n    pub fn is_orthogonal(&self, other: &Self) -> bool {\n        Real(self.dir().dot(other.dir())) == Real(0.)\n    }\n    pub fn intersect(&self, other: &Self) -> bool {\n        self.ccw(other.p1) as i8 * self.ccw(other.p2) as i8 <= 0\n            && other.ccw(self.p1) as i8 * other.ccw(self.p2) as i8 <= 0\n    }\n    pub fn intersect_point(&self, p: Point) -> bool {\n        self.ccw(p) == CCW::OnSegment\n    }\n    pub fn cross_point(&self, other: &Self) -> Option<Point> {\n        if self.intersect(other) {\n            let a = self.dir().cross(other.dir());\n            let b = self.dir().cross(self.p2 - other.p1);\n            if Real(a.abs()) == Real(0.) && Real(b.abs()) == Real(0.) {\n                Some(other.p1)\n            } else {\n                Some(other.p1 + (other.dir() * b / a))\n            }\n        } else {\n            None\n        }\n    }\n    pub fn distance_point(&self, p: Point) -> f64 {\n        let r = self.projection(p);\n        if self.intersect_point(r) {\n            (r - p).abs()\n        } else {\n            std::cmp::min(TotalOrd((self.p1 - p).abs()), TotalOrd((self.p2 - p).abs())).0\n        }\n    }\n    pub fn distance(&self, other: &Self) -> f64 {\n        use std::cmp::min;\n        if self.intersect(other) {\n            0.\n        } else {\n            min(\n                min(\n                    TotalOrd(self.distance_point(other.p1)),\n                    TotalOrd(self.distance_point(other.p2)),\n                ),\n                min(\n                    TotalOrd(other.distance_point(self.p1)),\n                    TotalOrd(other.distance_point(self.p2)),\n                ),\n            )\n            .0\n        }\n    }\n}\n\npub const EPS: f64 = 1e-8;\n#[derive(Clone, Debug)]\npub struct Real(pub f64);\nimpl PartialEq for Real {\n    fn eq(&self, other: &Real) -> bool {\n        (self.0 - other.0).abs() < EPS\n    }\n}\nimpl PartialOrd for Real {\n    fn partial_cmp(&self, other: &Real) -> Option<std::cmp::Ordering> {\n        if self == other {\n            Some(std::cmp::Ordering::Equal)\n        } else {\n            self.0.partial_cmp(&other.0)\n        }\n    }\n}\n\n#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]\npub enum CCW {\n    #[doc = \" a--b--c\"]\n    OnlineFront = -2,\n    #[doc = \" a--b-vc\"]\n    Clockwise = -1,\n    #[doc = \" a--c--b\"]\n    OnSegment = 0,\n    #[doc = \" a--b-^c\"]\n    CounterClockwise = 1,\n    #[doc = \" c--a--b\"]\n    OnlineBack = 2,\n}\npub fn ccw(a: Point, b: Point, c: Point) -> CCW {\n    let x = b - a;\n    let y = c - a;\n    if Real(x.cross(y)) > Real(0.) {\n        CCW::CounterClockwise\n    } else if Real(x.cross(y)) < Real(0.) {\n        CCW::Clockwise\n    } else if Real(x.dot(y)) < Real(0.) {\n        CCW::OnlineBack\n    } else if Real(x.abs()) < Real(y.abs()) {\n        CCW::OnlineFront\n    } else {\n        CCW::OnSegment\n    }\n}\n#[derive(PartialEq, PartialOrd)]\npub struct TotalOrd<T>(pub T);\nimpl<T: PartialEq> Eq for TotalOrd<T> {}\nimpl<T: PartialOrd> Ord for TotalOrd<T> {\n    fn cmp(&self, other: &TotalOrd<T>) -> std::cmp::Ordering {\n        self.0.partial_cmp(&other.0).unwrap()\n    }\n}\nfn main() {\n    input! { q, qs: [[(f64, f64); 4]; q] };\n    for ps in &qs {\n        let l1 = LineSegment::new(Point::new(ps[0].0, ps[0].1), Point::new(ps[1].0, ps[1].1));\n        let l2 = LineSegment::new(Point::new(ps[2].0, ps[2].1), Point::new(ps[3].0, ps[3].1));\n        let x = l1.distance(&l2);\n        println!(\"{}\", x);\n    }\n}\n\n"
  },
  {
    "language": "Rust",
    "code": "use std::f64::consts::PI;\n\nconst EPS: f64 = 1e-8;\n\nfn main() {\n    let mut sc = Scanner::new();\n\n    let q = sc.next::<usize>();\n    for _ in 0..q {\n        let p0 = sc.next::<Pt>();\n        let p1 = sc.next::<Pt>();\n        let p2 = sc.next::<Pt>();\n        let p3 = sc.next::<Pt>();\n\n        let ans = distance_segments(&LineSegment(p0, p1), &LineSegment(p2, p3));\n        println!(\"{:.12}\", ans);\n    }\n}\n\n//==========\n\npub fn cross(a: Pt, b: Pt) -> f64 {\n    (a.conj() * b).im\n}\n\npub fn dot(a: Pt, b: Pt) -> f64 {\n    (a.conj() * b).re\n}\n\n#[derive(Debug, PartialEq, Eq, Clone, Copy)]\npub enum CCW {\n    /// a->b->c is counter clockwise\n    CounterClockwise = 1,\n    /// a->b->c is counter clockwise\n    Clockwise = -1,\n    /// c--a--b\n    OnLineBack = 2,\n    /// a--b--c\n    OnLineFront = -2,\n    /// a--c--b\n    OnSegment = 0,\n}\n\npub fn ccw(a: Pt, b: Pt, c: Pt) -> CCW {\n    let b = b - a;\n    let c = c - a;\n    if cross(b, c) > 0.0 {\n        CCW::CounterClockwise\n    } else if cross(b, c) < 0.0 {\n        CCW::Clockwise\n    } else if dot(b, c) < 0.0 {\n        CCW::OnLineBack\n    } else if b.norm() < c.norm() {\n        CCW::OnLineFront\n    } else {\n        CCW::OnSegment\n    }\n}\n\n/// Signed area of triangle\npub fn triangle_signed_area(a: Pt, b: Pt, c: Pt) -> f64 {\n    cross(b - a, c - a) / 2.0\n}\n\npub fn projection(l: &LineSegment, p: Pt) -> Pt {\n    let t = dot(p - l.0, l.0 - l.1) / (l.0 - l.1).norm_sqr();\n    l.0 + (l.0 - l.1) * t\n}\n\npub struct Line(Pt, Pt);\npub struct LineSegment(Pt, Pt);\n\npub fn intersect_lines(a: &Line, b: &Line) -> bool {\n    cross(a.1 - a.0, b.1 - b.0) > EPS || cross(a.1 - a.0, b.0 - b.1) < EPS\n}\n\npub fn intersect_segment_pt(a: &LineSegment, p: Pt) -> bool {\n    (a.0 - p).norm() + (a.1 - p).norm() - (a.1 - a.0).norm() < EPS\n}\n\npub fn intersect_segments(a: &LineSegment, b: &LineSegment) -> bool {\n    ccw(a.0, a.1, b.0) as i32 * ccw(a.0, a.1, b.1) as i32 <= 0\n        && ccw(b.0, b.1, a.0) as i32 * ccw(b.0, b.1, a.1) as i32 <= 0\n}\n\npub fn distance_segment_pt(a: &LineSegment, p: Pt) -> f64 {\n    let r = projection(a, p);\n    if intersect_segment_pt(a, r) {\n        (r - p).norm()\n    } else {\n        (a.0 - p).norm().min((a.1 - p).norm())\n    }\n}\n\npub fn distance_segments(a: &LineSegment, b: &LineSegment) -> f64 {\n    if intersect_segments(a, b) {\n        return 0.0;\n    }\n    distance_segment_pt(a, b.0)\n        .min(distance_segment_pt(a, b.1))\n        .min(distance_segment_pt(b, a.0))\n        .min(distance_segment_pt(b, a.1))\n}\n\n#[derive(Debug)]\npub enum CrossLineSegment {\n    None,\n    Many,\n    One(Pt),\n}\n\nimpl CrossLineSegment {\n    fn ok(&self) -> Option<Pt> {\n        match self {\n            &CrossLineSegment::One(p) => Some(p.clone()),\n            _ => None,\n        }\n    }\n}\n\npub fn cross_line_segment(a: &LineSegment, b: &LineSegment) -> CrossLineSegment {\n    use CrossLineSegment::*;\n\n    let ccw_a_b0 = ccw(a.0, a.1, b.0);\n    let ccw_a_b1 = ccw(a.0, a.1, b.1);\n\n    let ccw_b_a0 = ccw(b.0, b.1, a.0);\n    let ccw_b_a1 = ccw(b.0, b.1, a.1);\n\n    if ccw_a_b0 as i32 * ccw_a_b1 as i32 == 0 {\n        if ccw_a_b1 == CCW::CounterClockwise || ccw_a_b1 == CCW::Clockwise {\n            return One(b.0);\n        } else if ccw_a_b0 == CCW::CounterClockwise || ccw_a_b0 == CCW::Clockwise {\n            return One(b.1);\n        } else {\n            return Many;\n        }\n    }\n\n    if ccw_b_a0 as i32 * ccw_b_a1 as i32 == 0 {\n        if ccw_b_a1 == CCW::CounterClockwise || ccw_b_a1 == CCW::Clockwise {\n            return One(a.0);\n        } else if ccw_b_a0 == CCW::CounterClockwise || ccw_b_a0 == CCW::Clockwise {\n            return One(a.1);\n        } else {\n            return Many;\n        }\n    }\n\n    if ccw_a_b0 as i32 * ccw_a_b1 as i32 == -4 || ccw_b_a0 as i32 * ccw_b_a1 as i32 == -4 {\n        return Many;\n    }\n    if ccw_a_b0 as i32 * ccw_a_b1 as i32 > 0 || ccw_b_a0 as i32 * ccw_b_a1 as i32 > 0 {\n        return None;\n    }\n\n    assert!(ccw_a_b0 as i32 * ccw_a_b1 as i32 == -1);\n    assert!(ccw_b_a0 as i32 * ccw_b_a1 as i32 == -1);\n\n    // normalize a to [(0, 0), (0, 1)]\n    let b0 = b.0 - a.0;\n    let b1 = b.1 - a.0;\n    let va = a.1 - a.0;\n\n    let b0 = b0 / va;\n    let b1 = b1 / va;\n    let vb = b1 - b0;\n\n    let t = -b0.im / vb.im;\n    assert!(t >= 0.0 && t <= 1.0);\n\n    One(b.0 + (b.1 - b.0) * t)\n}\n\n//==========\n\nuse std::fmt::Debug;\nuse std::ops::{Add, Div, Mul, Sub};\n\n#[derive(PartialEq, Eq, Copy, Clone, Hash, Debug, Default)]\n#[repr(C)]\npub struct Complex<T> {\n    /// Real portion of the complex number\n    pub re: T,\n    /// Imaginary portion of the complex number\n    pub im: T,\n}\n\nimpl<T> Complex<T> {\n    #[inline]\n    pub fn new(re: T, im: T) -> Self {\n        Complex { re, im }\n    }\n}\n\nimpl Complex<f64> {\n    #[inline]\n    pub fn conj(&self) -> Self {\n        Self::new(self.re.clone(), -self.im.clone())\n    }\n\n    #[inline]\n    pub fn norm(&self) -> f64 {\n        self.re.hypot(self.im)\n    }\n\n    #[inline]\n    pub fn norm_sqr(&self) -> f64 {\n        self.re.clone() * self.re.clone() + self.im.clone() * self.im.clone()\n    }\n\n    #[inline]\n    pub fn arg(&self) -> f64 {\n        self.im.atan2(self.re)\n    }\n}\n\nimpl<T: Add<Output = T>> Add for Complex<T> {\n    type Output = Self;\n    fn add(self, rhs: Self) -> Self::Output {\n        Self::new(self.re + rhs.re, self.im + rhs.im)\n    }\n}\n\nimpl<T: Sub<Output = T>> Sub for Complex<T> {\n    type Output = Self;\n    fn sub(self, rhs: Self) -> Self::Output {\n        Self::new(self.re - rhs.re, self.im - rhs.im)\n    }\n}\n\nimpl<T: Copy + Add<Output = T> + Sub<Output = T> + Mul<Output = T>> Mul for Complex<T> {\n    type Output = Self;\n    fn mul(self, rhs: Self) -> Self::Output {\n        Self::new(\n            self.re * rhs.re - self.im * rhs.im,\n            self.re * rhs.im + self.im * rhs.re,\n        )\n    }\n}\n\nimpl<T: Copy + Mul<Output = T>> Mul<T> for Complex<T> {\n    type Output = Self;\n    fn mul(self, rhs: T) -> Self::Output {\n        Self::new(self.re * rhs, self.im * rhs)\n    }\n}\n\nimpl<T: Copy + Add<Output = T> + Sub<Output = T> + Mul<Output = T> + Div<Output = T>> Div\n    for Complex<T>\n{\n    type Output = Self;\n    fn div(self, rhs: Self) -> Self::Output {\n        let d = rhs.re * rhs.re + rhs.im * rhs.im;\n        Self::new(\n            (self.re * rhs.re + self.im * rhs.im) / d,\n            (self.im * rhs.re - self.re * rhs.im) / d,\n        )\n    }\n}\n\nimpl<T: Copy + Div<Output = T>> Div<T> for Complex<T> {\n    type Output = Self;\n    fn div(self, rhs: T) -> Self::Output {\n        Self::new(self.re / rhs, self.im / rhs)\n    }\n}\n\ntype Pt = Complex<f64>;\n\n//==========\n\npub struct Scanner {\n    buf: Vec<char>,\n    cur: usize,\n}\n\nimpl Scanner {\n    pub fn new() -> Scanner {\n        Scanner {\n            buf: vec![],\n            cur: 0,\n        }\n    }\n\n    fn fill(&mut self) {\n        let mut s = String::new();\n        let len = std::io::stdin().read_line(&mut s).unwrap();\n        if len == 0 {\n            panic!(\"unexpected EOF\");\n        }\n        for c in s.chars() {\n            self.buf.push(c);\n        }\n    }\n\n    pub fn next_char(&mut self) -> char {\n        'outer: loop {\n            if self.cur >= self.buf.len() {\n                self.fill();\n            }\n            while self.cur < self.buf.len() {\n                if !self.buf[self.cur].is_whitespace() {\n                    break 'outer;\n                }\n                self.cur += 1;\n            }\n        }\n        let ret = self.buf[self.cur];\n        self.cur += 1;\n        ret\n    }\n\n    pub fn next_word(&mut self) -> String {\n        'outer: loop {\n            if self.cur >= self.buf.len() {\n                self.fill();\n            }\n            while self.cur < self.buf.len() {\n                if !self.buf[self.cur].is_whitespace() {\n                    break 'outer;\n                }\n                self.cur += 1;\n            }\n        }\n\n        let mut s = String::new();\n        while self.cur < self.buf.len() && !self.buf[self.cur].is_whitespace() {\n            s.push(self.buf[self.cur]);\n            self.cur += 1;\n        }\n        s\n    }\n\n    pub fn next<T: Reader>(&mut self) -> T {\n        T::read(self)\n    }\n\n    pub fn next_vec_len<T: Reader>(&mut self) -> Vec<T> {\n        let n: usize = self.next();\n        self.next_vec(n)\n    }\n\n    pub fn next_vec<T: Reader>(&mut self, n: usize) -> Vec<T> {\n        (0..n).map(|_| self.next()).collect()\n    }\n}\n\npub trait Reader {\n    fn read(sc: &mut Scanner) -> Self;\n}\n\nimpl<T: Reader> Reader for Complex<T> {\n    fn read(sc: &mut Scanner) -> Self {\n        Self::new(sc.next(), sc.next())\n    }\n}\n\nimpl Reader for char {\n    fn read(sc: &mut Scanner) -> Self {\n        sc.next_char()\n    }\n}\n\nmacro_rules! impl_for_from_str {\n    ($typ:ty) => {\n        impl Reader for $typ {\n            fn read(sc: &mut Scanner) -> Self {\n                sc.next_word().parse().unwrap()\n            }\n        }\n    };\n}\n\nimpl_for_from_str!(i8);\nimpl_for_from_str!(u8);\nimpl_for_from_str!(i16);\nimpl_for_from_str!(u16);\nimpl_for_from_str!(i32);\nimpl_for_from_str!(u32);\nimpl_for_from_str!(i64);\nimpl_for_from_str!(u64);\n// impl_for_from_str!(i128);\n// impl_for_from_str!(u128);\nimpl_for_from_str!(isize);\nimpl_for_from_str!(usize);\nimpl_for_from_str!(f32);\nimpl_for_from_str!(f64);\nimpl_for_from_str!(String);\n\n"
  }
]