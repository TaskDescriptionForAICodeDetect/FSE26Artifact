[
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n\n#define MAX_GEMS 100\n#define GRID_SIZE 21\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nint main() {\n    int N, M;\n    scanf(\"%d\", &N);\n    Point gems[MAX_GEMS];\n    bool grid[GRID_SIZE][GRID_SIZE] = {false};\n\n    for (int i = 0; i < N; i++) {\n        scanf(\"%d %d\", &gems[i].x, &gems[i].y);\n        grid[gems[i].x][gems[i].y] = true;\n    }\n\n    scanf(\"%d\", &M);\n    char commands[M + 1];\n    scanf(\"%s\", commands);\n\n    Point robot = {10, 10};\n    if (grid[robot.x][robot.y]) {\n        grid[robot.x][robot.y] = false;\n        N--;\n    }\n\n    for (int i = 0; i < M && N > 0; i++) {\n        switch (commands[i]) {\n            case 'U':\n                robot.y += 1;\n                break;\n            case 'D':\n                robot.y -= 1;\n                break;\n            case 'L':\n                robot.x -= 1;\n                break;\n            case 'R':\n                robot.x += 1;\n                break;\n        }\n\n        if (robot.x < 0 || robot.x > 20 || robot.y < 0 || robot.y > 20) {\n            printf(\"No\\n\");\n            return 0;\n        }\n\n        if (grid[robot.x][robot.y]) {\n            grid[robot.x][robot.y] = false;\n            N--;\n        }\n    }\n\n    printf(N == 0 ? \"Yes\\n\" : \"No\\n\");\n    return 0;\n}",
    "timestamp": "2025-08-05 21:05:09"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <set>\n#include <utility>\n\nusing namespace std;\n\nbool canCollectAllGems(const vector<pair<int, int>>& gems, const string& commands) {\n    set<pair<int, int>> gemSet(gems.begin(), gems.end());\n    int x = 10, y = 10;\n    \n    if (gemSet.count({x, y})) {\n        gemSet.erase({x, y});\n    }\n    \n    for (char cmd : commands) {\n        switch (cmd) {\n            case 'U': y += 1; break;\n            case 'D': y -= 1; break;\n            case 'L': x -= 1; break;\n            case 'R': x += 1; break;\n            default: break;\n        }\n        \n        if (x < 0 || x > 20 || y < 0 || y > 20) {\n            return false;\n        }\n        \n        if (gemSet.count({x, y})) {\n            gemSet.erase({x, y});\n        }\n        \n        if (gemSet.empty()) {\n            return true;\n        }\n    }\n    \n    return gemSet.empty();\n}\n\nint main() {\n    int N;\n    cin >> N;\n    vector<pair<int, int>> gems(N);\n    for (int i = 0; i < N; ++i) {\n        cin >> gems[i].first >> gems[i].second;\n    }\n    string commands;\n    cin >> commands;\n    \n    if (canCollectAllGems(gems, commands)) {\n        cout << \"YES\" << endl;\n    } else {\n        cout << \"NO\" << endl;\n    }\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 21:05:25"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class GemCollection {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        scanner.nextLine(); // Consume newline\n        \n        Set<String> gems = new HashSet<>();\n        for (int i = 0; i < n; i++) {\n            String[] parts = scanner.nextLine().split(\" \");\n            int x = Integer.parseInt(parts[0]);\n            int y = Integer.parseInt(parts[1]);\n            gems.add(x + \",\" + y);\n        }\n        \n        String commands = scanner.nextLine();\n        \n        int x = 10, y = 10;\n        if (gems.contains(x + \",\" + y)) {\n            gems.remove(x + \",\" + y);\n        }\n        \n        for (char c : commands.toCharArray()) {\n            switch (c) {\n                case 'U': y++; break;\n                case 'D': y--; break;\n                case 'L': x--; break;\n                case 'R': x++; break;\n            }\n            \n            if (x < 0 || x > 20 || y < 0 || y > 20) {\n                System.out.println(\"No\");\n                return;\n            }\n            \n            if (gems.contains(x + \",\" + y)) {\n                gems.remove(x + \",\" + y);\n            }\n        }\n        \n        System.out.println(gems.isEmpty() ? \"Yes\" : \"No\");\n    }\n}",
    "timestamp": "2025-08-05 21:05:37"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class GemCollectionRobot {\n    public static boolean canCollectAllGems(String[] commands, int[][] gems) {\n        int x = 10, y = 10;\n        Set<String> collectedGems = new HashSet<>();\n\n        for (String command : commands) {\n            switch (command) {\n                case \"UP\":\n                    if (y < 20) y++;\n                    break;\n                case \"DOWN\":\n                    if (y > 0) y--;\n                    break;\n                case \"LEFT\":\n                    if (x > 0) x--;\n                    break;\n                case \"RIGHT\":\n                    if (x < 20) x++;\n                    break;\n            }\n\n            for (int[] gem : gems) {\n                if (gem[0] == x && gem[1] == y) {\n                    collectedGems.add(x + \",\" + y);\n                }\n            }\n        }\n\n        return collectedGems.size() == gems.length;\n    }\n\n    public static void main(String[] args) {\n        int[][] gems = {{5, 5}, {15, 15}, {10, 8}};\n        String[] commands = {\"UP\", \"RIGHT\", \"DOWN\", \"LEFT\"};\n        System.out.println(canCollectAllGems(commands, gems));\n    }\n}",
    "timestamp": "2025-08-05 21:05:42"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdbool.h>\n#include <stdlib.h>\n\n#define GRID_SIZE 21\n#define START_X 10\n#define START_Y 10\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nbool isValidMove(int x, int y) {\n    return x >= 0 && x < GRID_SIZE && y >= 0 && y < GRID_SIZE;\n}\n\nbool collectGems(int gems[GRID_SIZE][GRID_SIZE], char* moves) {\n    Point robot = {START_X, START_Y};\n    int gemsCollected = 0;\n\n    // Count initial gems\n    for (int i = 0; i < GRID_SIZE; i++) {\n        for (int j = 0; j < GRID_SIZE; j++) {\n            if (gems[i][j] > 0) {\n                gemsCollected++;\n            }\n        }\n    }\n\n    int collectedCount = 0;\n\n    for (int i = 0; moves[i] != '\\0'; i++) {\n        Point newPos = robot;\n\n        switch (moves[i]) {\n            case 'U': newPos.y--; break;\n            case 'D': newPos.y++; break;\n            case 'L': newPos.x--; break;\n            case 'R': newPos.x++; break;\n        }\n\n        if (!isValidMove(newPos.x, newPos.y)) {\n            return false;\n        }\n\n        robot = newPos;\n\n        if (gems[robot.y][robot.x] > 0) {\n            gems[robot.y][robot.x] = 0;\n            collectedCount++;\n        }\n    }\n\n    return collectedCount == gemsCollected;\n}\n\nint main() {\n    int gems[GRID_SIZE][GRID_SIZE] = {0};\n    \n    // Example gem placement\n    gems[5][5] = 1;\n    gems[15][15] = 1;\n    gems[7][12] = 1;\n\n    char moves[] = \"RULDDRURUL\";\n\n    bool success = collectGems(gems, moves);\n    printf(\"%s\\n\", success ? \"All gems collected\" : \"Failed to collect all gems\");\n\n    return 0;\n}",
    "timestamp": "2025-08-05 21:05:51"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <unordered_set>\n#include <utility>\n\nclass GemCollectionRobot {\nprivate:\n    int x, y;\n    std::unordered_set<std::pair<int, int>, PairHash> gems;\n    std::unordered_set<std::pair<int, int>, PairHash> visited;\n\n    struct PairHash {\n        template <class T1, class T2>\n        std::size_t operator () (const std::pair<T1, T2>& p) const {\n            auto h1 = std::hash<T1>{}(p.first);\n            auto h2 = std::hash<T2>{}(p.second);\n            return h1 ^ h2;\n        }\n    };\n\npublic:\n    GemCollectionRobot() : x(10), y(10) {}\n\n    void addGem(int gemX, int gemY) {\n        gems.insert({gemX, gemY});\n    }\n\n    bool isValidMove(int newX, int newY) {\n        return newX >= 0 && newX <= 20 && newY >= 0 && newY <= 20;\n    }\n\n    bool collectGems(const std::vector<std::pair<int, int>>& moves) {\n        for (const auto& move : moves) {\n            int newX = x + move.first;\n            int newY = y + move.second;\n\n            if (!isValidMove(newX, newY)) return false;\n\n            x = newX;\n            y = newY;\n\n            if (gems.count({x, y}) > 0) {\n                gems.erase({x, y});\n            }\n        }\n\n        return gems.empty();\n    }\n};\n\nint main() {\n    GemCollectionRobot robot;\n    \n    // Add gem locations\n    robot.addGem(5, 5);\n    robot.addGem(15, 15);\n    robot.addGem(7, 12);\n\n    // Movement commands: {dx, dy}\n    std::vector<std::pair<int, int>> moves = {\n        {-5, -5},   // Move to gem at (5, 5)\n        {10, 10},   // Move to gem at (15, 15)\n        {-8, -3}    // Move to gem at (7, 12)\n    };\n\n    bool success = robot.collectGems(moves);\n    std::cout << (success ? \"All gems collected!\" : \"Unable to collect all gems.\") << std::endl;\n\n    return 0;\n}",
    "timestamp": "2025-08-05 21:06:01"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def can_collect_all_gems(commands, gems):\n    robot_position = (10, 10)\n    direction_map = {'U': (0, 1), 'D': (0, -1), 'L': (-1, 0), 'R': (1, 0)}\n    gems = set(gems)\n\n    for command in commands:\n        dx, dy = direction_map.get(command, (0, 0))\n        new_position = (robot_position[0] + dx, robot_position[1] + dy)\n\n        if 0 <= new_position[0] <= 20 and 0 <= new_position[1] <= 20:\n            robot_position = new_position\n            if robot_position in gems:\n                gems.remove(robot_position)\n\n    return len(gems) == 0\n\n# Example usage:\ncommands = \"RRULDD\"\ngems = [(11, 10), (10, 9), (12, 12)]\nprint(can_collect_all_gems(commands, gems))  # Output: Depends on the commands and gems.",
    "timestamp": "2025-08-13 04:54:27"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "java",
    "code": "import java.util.Set;\nimport java.util.HashSet;\n\npublic class GemCollection {\n    private static final int GRID_SIZE = 21; // 0 to 20 inclusive\n    private static int robotX = 10;\n    private static int robotY = 10;\n    private static Set<Point> gems = new HashSet<>();\n\n    public static void main(String[] args) {\n        // Example gem positions, assuming inputs are valid within the grid\n        gems.add(new Point(12, 12));\n        gems.add(new Point(8, 8));\n        // Add more gem positions as needed\n\n        String commands = \"UUDDLRLR\"; // Example command string\n\n        if (canCollectAllGems(commands)) {\n            System.out.println(\"Robot can collect all gems.\");\n        } else {\n            System.out.println(\"Robot cannot collect all gems.\");\n        }\n    }\n\n    private static boolean canCollectAllGems(String commands) {\n        for (char command : commands.toCharArray()) {\n            moveRobot(command);\n            gems.remove(new Point(robotX, robotY));\n            if (gems.isEmpty()) {\n                return true;\n            }\n        }\n        return gems.isEmpty();\n    }\n\n    private static void moveRobot(char command) {\n        switch (command) {\n            case 'U':\n                if (robotY < GRID_SIZE - 1) robotY++;\n                break;\n            case 'D':\n                if (robotY > 0) robotY--;\n                break;\n            case 'L':\n                if (robotX > 0) robotX--;\n                break;\n            case 'R':\n                if (robotX < GRID_SIZE - 1) robotX++;\n                break;\n        }\n    }\n\n    private static class Point {\n        int x, y;\n\n        Point(int x, int y) {\n            this.x = x;\n            this.y = y;\n        }\n\n        @Override\n        public boolean equals(Object obj) {\n            if (this == obj) return true;\n            if (obj == null || getClass() != obj.getClass()) return false;\n            Point point = (Point) obj;\n            return x == point.x && y == point.y;\n        }\n\n        @Override\n        public int hashCode() {\n            return 31 * x + y;\n        }\n    }\n}",
    "timestamp": "2025-08-13 04:54:34"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c",
    "code": "#include <stdio.h>\n#include <stdbool.h>\n\n#define SIZE 21\n\nbool canCollectAllGems(int grid[SIZE][SIZE], char *commands) {\n    int x = 10, y = 10;\n    char *cmd = commands;\n    \n    // Assume the starting point has a gem, collected in the beginning.\n    grid[x][y] = 0;\n    \n    while (*cmd) {\n        switch (*cmd) {\n            case 'U': if (y < 20) y++; break;\n            case 'D': if (y > 0) y--; break;\n            case 'L': if (x > 0) x--; break;\n            case 'R': if (x < 20) x++; break;\n        }\n        grid[x][y] = 0; // Collect the gem\n        cmd++;\n    }\n    \n    for (int i = 0; i < SIZE; i++) {\n        for (int j = 0; j < SIZE; j++) {\n            if (grid[i][j] == 1) {\n                return false; // There's still a gem left\n            }\n        }\n    }\n    \n    return true; // All gems collected\n}\n\nint main() {\n    int grid[SIZE][SIZE] = {0}; \n    // Assume function initializes grid with gems (here, by default no gems).\n    // The robot should collect all 1's.\n    \n    // Example initialization to place a few gems (not all required to be set):\n    grid[10][10] = 1; \n    grid[11][10] = 1; \n    grid[11][11] = 1; \n    // Add more as needed per the problem constraints...\n    \n    // Example command sequence\n    char commands[] = \"RURDL\";\n    \n    if (canCollectAllGems(grid, commands)) {\n        printf(\"All gems collected!\\n\");\n    } else {\n        printf(\"Some gems were left behind.\\n\");\n    }\n    \n    return 0;\n}",
    "timestamp": "2025-08-13 04:54:41"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def can_collect_all_gems(commands, gems):\n    x, y = 10, 10\n    collected_gems = set()\n\n    for command in commands:\n        if command == 'U':\n            y += 1\n        elif command == 'D':\n            y -= 1\n        elif command == 'L':\n            x -= 1\n        elif command == 'R':\n            x += 1\n\n        if not (0 <= x <= 20 and 0 <= y <= 20):\n            return False\n\n        for gem in gems:\n            if (x, y) == gem and gem not in collected_gems:\n                collected_gems.add(gem)\n\n    return len(collected_gems) == len(gems)",
    "timestamp": "2025-08-13 04:54:51"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def can_collect_all_gems(commands, gems):\n    x, y = 10, 10\n    collected = set()\n    gem_positions = set((gx, gy) for gx, gy in gems)\n    \n    for cmd in commands:\n        direction, steps = cmd[0], int(cmd[1:])\n        for _ in range(steps):\n            if direction == 'N':\n                y += 1\n            elif direction == 'S':\n                y -= 1\n            elif direction == 'E':\n                x += 1\n            elif direction == 'W':\n                x -= 1\n            \n            if (x, y) in gem_positions:\n                collected.add((x, y))\n            \n            if x < 0 or x > 20 or y < 0 or y > 20:\n                return False\n    \n    return len(collected) == len(gem_positions)",
    "timestamp": "2025-08-13 04:55:00"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c++",
    "code": "#include <iostream>\n#include <set>\n#include <vector>\n\nusing namespace std;\n\n// Function to check if the robot can collect all gems\nbool canCollectAllGems(const vector<pair<int, int>>& gems, const string& commands) {\n    // Store all gems in a set for quick lookup\n    set<pair<int, int>> gemSet(gems.begin(), gems.end());\n    \n    // Starting position of the robot\n    int x = 10, y = 10;\n    \n    // Process each command\n    for (char command : commands) {\n        switch (command) {\n            case 'U': y = min(y + 1, 20); break; // Move up\n            case 'D': y = max(y - 1, 0); break; // Move down\n            case 'L': x = max(x - 1, 0); break; // Move left\n            case 'R': x = min(x + 1, 20); break; // Move right\n        }\n        \n        // If the current position is a gem, remove it from the set\n        gemSet.erase({x, y});\n        \n        // Exit early if all gems are collected\n        if (gemSet.empty()) {\n            return true;\n        }\n    }\n    \n    // Check if there are remaining uncollected gems\n    return gemSet.empty();\n}\n\nint main() {\n    // Number of gems\n    int n;\n    cin >> n;\n    vector<pair<int, int>> gems(n);\n    \n    // Input gem positions\n    for (int i = 0; i < n; ++i) {\n        cin >> gems[i].first >> gems[i].second;\n    }\n    \n    // Movement commands for the robot\n    string commands;\n    cin >> commands;\n    \n    // Check if the robot can collect all gems\n    if (canCollectAllGems(gems, commands)) {\n        cout << \"All gems collected\" << endl;\n    } else {\n        cout << \"Could not collect all gems\" << endl;\n    }\n    \n    return 0;\n}",
    "timestamp": "2025-08-13 11:22:03"
  }
]