[
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAX_QUERIES 100000\n\ntypedef struct {\n    int x, y;\n} Position;\n\ntypedef struct {\n    Position pos;\n    int active;\n} Invader;\n\nInvader invaders[MAX_QUERIES];\nint invader_count = 0;\n\nvoid add_invader(int x, int y) {\n    invaders[invader_count].pos.x = x;\n    invaders[invader_count].pos.y = y;\n    invaders[invader_count].active = 1;\n    invader_count++;\n}\n\nvoid move_invader(int idx, int dx, int dy) {\n    if (idx < 0 || idx >= invader_count || !invaders[idx].active) return;\n    invaders[idx].pos.x += dx;\n    invaders[idx].pos.y += dy;\n}\n\nvoid sniper_attack(int x, int y) {\n    for (int i = 0; i < invader_count; i++) {\n        if (invaders[i].active && invaders[i].pos.x == x && invaders[i].pos.y == y) {\n            invaders[i].active = 0;\n            printf(\"sniper: (%d, %d)\\n\", x, y);\n            return;\n        }\n    }\n    printf(\"sniper: miss\\n\");\n}\n\nvoid grenade_attack(int x, int y, int r) {\n    printf(\"grenade: \");\n    int hit = 0;\n    for (int i = 0; i < invader_count; i++) {\n        if (invaders[i].active) {\n            int dx = invaders[i].pos.x - x;\n            int dy = invaders[i].pos.y - y;\n            if (dx * dx + dy * dy <= r * r) {\n                if (hit) printf(\" \");\n                printf(\"(%d, %d)\", invaders[i].pos.x, invaders[i].pos.y);\n                invaders[i].active = 0;\n                hit = 1;\n            }\n        }\n    }\n    if (!hit) printf(\"miss\");\n    printf(\"\\n\");\n}\n\nint main() {\n    int Q;\n    scanf(\"%d\", &Q);\n    \n    while (Q--) {\n        char command[10];\n        scanf(\"%s\", command);\n        \n        if (strcmp(command, \"add\") == 0) {\n            int x, y;\n            scanf(\"%d %d\", &x, &y);\n            add_invader(x, y);\n        } else if (strcmp(command, \"move\") == 0) {\n            int idx, dx, dy;\n            scanf(\"%d %d %d\", &idx, &dx, &dy);\n            move_invader(idx - 1, dx, dy);\n        } else if (strcmp(command, \"sniper\") == 0) {\n            int x, y;\n            scanf(\"%d %d\", &x, &y);\n            sniper_attack(x, y);\n        } else if (strcmp(command, \"grenade\") == 0) {\n            int x, y, r;\n            scanf(\"%d %d %d\", &x, &y, &r);\n            grenade_attack(x, y, r);\n        }\n    }\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 20:59:23"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <map>\n#include <algorithm>\n\nusing namespace std;\n\nstruct Invader {\n    int id;\n    int x;\n    int y;\n    bool alive;\n};\n\nmap<int, Invader> invaders;\nint next_id = 1;\n\nvoid add_invader(int x, int y) {\n    Invader invader = {next_id, x, y, true};\n    invaders[next_id] = invader;\n    next_id++;\n}\n\nvoid move_invader(int id, int new_x, int new_y) {\n    if (invaders.find(id) != invaders.end() && invaders[id].alive) {\n        invaders[id].x = new_x;\n        invaders[id].y = new_y;\n    }\n}\n\nvoid snipe_invader(int x, int y) {\n    for (auto& pair : invaders) {\n        Invader& invader = pair.second;\n        if (invader.alive && invader.x == x && invader.y == y) {\n            invader.alive = false;\n            break;\n        }\n    }\n}\n\nvoid grenade_explosion(int x, int y, int radius) {\n    for (auto& pair : invaders) {\n        Invader& invader = pair.second;\n        if (invader.alive) {\n            int dx = invader.x - x;\n            int dy = invader.y - y;\n            if (dx * dx + dy * dy <= radius * radius) {\n                invader.alive = false;\n            }\n        }\n    }\n}\n\nvoid print_status() {\n    vector<int> alive_ids;\n    for (const auto& pair : invaders) {\n        if (pair.second.alive) {\n            alive_ids.push_back(pair.second.id);\n        }\n    }\n    sort(alive_ids.begin(), alive_ids.end());\n    cout << alive_ids.size() << \" \";\n    for (int id : alive_ids) {\n        cout << id << \" \";\n    }\n    cout << endl;\n}\n\nint main() {\n    int Q;\n    cin >> Q;\n    while (Q--) {\n        string query;\n        cin >> query;\n        if (query == \"add\") {\n            int x, y;\n            cin >> x >> y;\n            add_invader(x, y);\n        } else if (query == \"move\") {\n            int id, x, y;\n            cin >> id >> x >> y;\n            move_invader(id, x, y);\n        } else if (query == \"snipe\") {\n            int x, y;\n            cin >> x >> y;\n            snipe_invader(x, y);\n        } else if (query == \"grenade\") {\n            int x, y, r;\n            cin >> x >> y >> r;\n            grenade_explosion(x, y, r);\n        } else if (query == \"status\") {\n            print_status();\n        }\n    }\n    return 0;\n}",
    "timestamp": "2025-08-05 20:59:47"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\nclass Invader {\n    int id;\n    int x;\n    int y;\n    boolean alive;\n\n    public Invader(int id, int x, int y) {\n        this.id = id;\n        this.x = x;\n        this.y = y;\n        this.alive = true;\n    }\n}\n\npublic class BaseDefense {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        Map<Integer, Invader> invaders = new HashMap<>();\n        int baseX = 0;\n        int baseY = 0;\n        int sniperRange = 1000;\n        int grenadeRadius = 5;\n\n        int Q = scanner.nextInt();\n        for (int i = 0; i < Q; i++) {\n            String query = scanner.next();\n            switch (query) {\n                case \"BASE\":\n                    baseX = scanner.nextInt();\n                    baseY = scanner.nextInt();\n                    break;\n                case \"NEW\":\n                    int id = scanner.nextInt();\n                    int x = scanner.nextInt();\n                    int y = scanner.nextInt();\n                    invaders.put(id, new Invader(id, x, y));\n                    break;\n                case \"MOVE\":\n                    id = scanner.nextInt();\n                    int dx = scanner.nextInt();\n                    int dy = scanner.nextInt();\n                    if (invaders.containsKey(id) && invaders.get(id).alive) {\n                        Invader invader = invaders.get(id);\n                        invader.x += dx;\n                        invader.y += dy;\n                    }\n                    break;\n                case \"SHOOT\":\n                    id = scanner.nextInt();\n                    String weapon = scanner.next();\n                    if (invaders.containsKey(id) && invaders.get(id).alive) {\n                        Invader invader = invaders.get(id);\n                        double distance = Math.sqrt(Math.pow(invader.x - baseX, 2) + Math.pow(invader.y - baseY, 2));\n                        if (weapon.equals(\"SNIPER\") && distance <= sniperRange) {\n                            invader.alive = false;\n                        } else if (weapon.equals(\"GRENADE\") && distance <= grenadeRadius) {\n                            invader.alive = false;\n                        }\n                    }\n                    break;\n                case \"KILLED\":\n                    id = scanner.nextInt();\n                    if (invaders.containsKey(id)) {\n                        invaders.get(id).alive = false;\n                    }\n                    break;\n                case \"STATUS\":\n                    int aliveCount = 0;\n                    for (Invader invader : invaders.values()) {\n                        if (invader.alive) {\n                            aliveCount++;\n                        }\n                    }\n                    System.out.println(aliveCount);\n                    break;\n            }\n        }\n        scanner.close();\n    }\n}",
    "timestamp": "2025-08-05 21:00:12"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\nclass InvaderDefenseSim {\n    private Map<Integer, String> invaderPositions;\n    private List<String> baseActions;\n\n    public InvaderDefenseSim() {\n        invaderPositions = new HashMap<>();\n        baseActions = new ArrayList<>();\n    }\n\n    public void placeInvader(int position, String invaderType) {\n        invaderPositions.put(position, invaderType);\n    }\n\n    public void moveInvader(int fromPosition, int toPosition) {\n        if (invaderPositions.containsKey(fromPosition)) {\n            String invaderType = invaderPositions.remove(fromPosition);\n            invaderPositions.put(toPosition, invaderType);\n            baseActions.add(\"Invader moved from \" + fromPosition + \" to \" + toPosition);\n        }\n    }\n\n    public void attack(int position, String weaponType) {\n        if (invaderPositions.containsKey(position)) {\n            String result = weaponType.equals(\"sniper\") ? \n                \"Precision eliminated \" + invaderPositions.get(position) :\n                \"Launcher destroyed area with \" + invaderPositions.get(position);\n            \n            invaderPositions.remove(position);\n            baseActions.add(result);\n        }\n    }\n\n    public List<String> getBaseActions() {\n        return new ArrayList<>(baseActions);\n    }\n\n    public Map<Integer, String> getCurrentInvaderPositions() {\n        return new HashMap<>(invaderPositions);\n    }\n}",
    "timestamp": "2025-08-05 21:00:18"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAX_INVADERS 100\n#define MAX_ACTIONS 1000\n\ntypedef struct {\n    int id;\n    int x;\n    int y;\n    int health;\n} Invader;\n\ntypedef struct {\n    char type[20];\n    int x;\n    int y;\n} Action;\n\nInvader invaders[MAX_INVADERS];\nAction base_actions[MAX_ACTIONS];\nint invader_count = 0;\nint action_count = 0;\n\nvoid add_invader(int id, int x, int y) {\n    if (invader_count < MAX_INVADERS) {\n        invaders[invader_count].id = id;\n        invaders[invader_count].x = x;\n        invaders[invader_count].y = y;\n        invaders[invader_count].health = 100;\n        invader_count++;\n    }\n}\n\nvoid move_invader(int id, int new_x, int new_y) {\n    for (int i = 0; i < invader_count; i++) {\n        if (invaders[i].id == id) {\n            invaders[i].x = new_x;\n            invaders[i].y = new_y;\n            break;\n        }\n    }\n}\n\nvoid record_base_action(char* type, int x, int y) {\n    if (action_count < MAX_ACTIONS) {\n        strcpy(base_actions[action_count].type, type);\n        base_actions[action_count].x = x;\n        base_actions[action_count].y = y;\n        action_count++;\n    }\n}\n\nvoid attack_invader(char* weapon, int x, int y) {\n    for (int i = 0; i < invader_count; i++) {\n        if (invaders[i].x == x && invaders[i].y == y) {\n            if (strcmp(weapon, \"sniper_rifle\") == 0) {\n                invaders[i].health -= 50;\n            } else if (strcmp(weapon, \"grenade_launcher\") == 0) {\n                invaders[i].health -= 75;\n            }\n            \n            if (invaders[i].health <= 0) {\n                for (int j = i; j < invader_count - 1; j++) {\n                    invaders[j] = invaders[j + 1];\n                }\n                invader_count--;\n            }\n            break;\n        }\n    }\n}\n\nvoid print_status() {\n    printf(\"Remaining Invaders: %d\\n\", invader_count);\n    for (int i = 0; i < invader_count; i++) {\n        printf(\"Invader %d: Position (%d, %d), Health %d\\n\", \n               invaders[i].id, invaders[i].x, invaders[i].y, invaders[i].health);\n    }\n}\n\nint main() {\n    int Q;\n    scanf(\"%d\", &Q);\n\n    while (Q--) {\n        char query[20];\n        scanf(\"%s\", query);\n\n        if (strcmp(query, \"ADD\") == 0) {\n            int id, x, y;\n            scanf(\"%d %d %d\", &id, &x, &y);\n            add_invader(id, x, y);\n        } \n        else if (strcmp(query, \"MOVE\") == 0) {\n            int id, new_x, new_y;\n            scanf(\"%d %d %d\", &id, &new_x, &new_y);\n            move_invader(id, new_x, new_y);\n        } \n        else if (strcmp(query, \"ATTACK\") == 0) {\n            char weapon[20];\n            int x, y;\n            scanf(\"%s %d %d\", weapon, &x, &y);\n            record_base_action(weapon, x, y);\n            attack_invader(weapon, x, y);\n        }\n        else if (strcmp(query, \"STATUS\") == 0) {\n            print_status();\n        }\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-05 21:00:30"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <unordered_map>\n#include <algorithm>\n\nclass Base {\nprivate:\n    std::unordered_map<std::string, int> invaderPositions;\n    std::vector<std::string> actionLog;\n\npublic:\n    void recordInvaderMovement(const std::string& invader, int position) {\n        invaderPositions[invader] = position;\n        actionLog.push_back(\"Invader \" + invader + \" at position \" + std::to_string(position));\n    }\n\n    void sniperAttack(const std::string& invader) {\n        if (invaderPositions.find(invader) != invaderPositions.end()) {\n            int position = invaderPositions[invader];\n            actionLog.push_back(\"Sniper attack on \" + invader + \" at position \" + std::to_string(position));\n            invaderPositions.erase(invader);\n        }\n    }\n\n    void grenadeLauncherAttack(const std::string& invader) {\n        if (invaderPositions.find(invader) != invaderPositions.end()) {\n            int position = invaderPositions[invader];\n            actionLog.push_back(\"Grenade launcher attack on \" + invader + \" at position \" + std::to_string(position));\n            invaderPositions.erase(invader);\n        }\n    }\n\n    void printActionLog() {\n        for (const auto& action : actionLog) {\n            std::cout << action << std::endl;\n        }\n    }\n\n    std::vector<std::string> getCurrentInvaders() {\n        std::vector<std::string> invaders;\n        for (const auto& invader : invaderPositions) {\n            invaders.push_back(invader.first);\n        }\n        return invaders;\n    }\n};\n\nint main() {\n    Base defensiveBase;\n    int queries;\n    std::cin >> queries;\n\n    while (queries--) {\n        std::string command;\n        std::cin >> command;\n\n        if (command == \"MOVE\") {\n            std::string invader;\n            int position;\n            std::cin >> invader >> position;\n            defensiveBase.recordInvaderMovement(invader, position);\n        }\n        else if (command == \"SNIPER\") {\n            std::string invader;\n            std::cin >> invader;\n            defensiveBase.sniperAttack(invader);\n        }\n        else if (command == \"GRENADE\") {\n            std::string invader;\n            std::cin >> invader;\n            defensiveBase.grenadeLauncherAttack(invader);\n        }\n    }\n\n    std::vector<std::string> remainingInvaders = defensiveBase.getCurrentInvaders();\n    std::cout << \"Remaining Invaders: \" << remainingInvaders.size() << std::endl;\n    for (const auto& invader : remainingInvaders) {\n        std::cout << invader << std::endl;\n    }\n\n    defensiveBase.printActionLog();\n\n    return 0;\n}",
    "timestamp": "2025-08-05 21:00:40"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "class BaseDefenseSimulator:\n    def __init__(self):\n        self.invaders = {}\n    \n    def process_query(self, query):\n        result = None\n        command = query[0]\n        \n        if command == \"INVADER_APPEARS\":\n            _, invader_id, x, y = query\n            self.invaders[invader_id] = (x, y)\n        \n        elif command == \"SNIPER_SHOT\":\n            _, invader_id = query\n            if invader_id in self.invaders:\n                del self.invaders[invader_id]\n                result = f\"Invader {invader_id} eliminated with sniper\"\n            else:\n                result = f\"Invader {invader_id} not found\"\n        \n        elif command == \"GRENADE_SHOT\":\n            _, x, y, radius = query\n            eliminated = []\n            for invader_id, position in list(self.invaders.items()):\n                invader_x, invader_y = position\n                if (invader_x - x) ** 2 + (invader_y - y) ** 2 <= radius ** 2:\n                    eliminated.append(invader_id)\n                    del self.invaders[invader_id]\n            if eliminated:\n                result = f\"Invaders eliminated with grenade: {', '.join(eliminated)}\"\n            else:\n                result = \"No invader eliminated with grenade\"\n        \n        elif command == \"MOVE\":\n            _, invader_id, x, y = query\n            if invader_id in self.invaders:\n                self.invaders[invader_id] = (x, y)\n            else:\n                result = f\"Invader {invader_id} not found\"\n        \n        elif command == \"STATUS\":\n            if self.invaders:\n                result = \"Current Invaders: \" + \", \".join(\n                    f\"{invader_id} at {pos}\" for invader_id, pos in self.invaders.items()\n                )\n            else:\n                result = \"No invaders present\"\n        \n        return result\n\n\n# Example usage:\n\ndefense_simulator = BaseDefenseSimulator()\nqueries = [\n    (\"INVADER_APPEARS\", \"A1\", 5, 5),\n    (\"SNIPER_SHOT\", \"A1\"),\n    (\"INVADER_APPEARS\", \"A2\", 10, 10),\n    (\"MOVE\", \"A2\", 12, 12),\n    (\"STATUS\",),\n    (\"GRENADE_SHOT\", 12, 12, 3),\n]\n\nfor query in queries:\n    result = defense_simulator.process_query(query)\n    if result:\n        print(result)",
    "timestamp": "2025-08-13 04:27:17"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "java",
    "code": "import java.util.*;\n\nclass BaseDefenseSimulation {\n\n    static class Invader {\n        int x, y;\n        \n        Invader(int x, int y) {\n            this.x = x;\n            this.y = y;\n        }\n        \n        void move(int dx, int dy) {\n            this.x += dx;\n            this.y += dy;\n        }\n    }\n    \n    static class Base {\n        List<Invader> invaders = new ArrayList<>();\n        List<String> responses = new ArrayList<>();\n        \n        void addInvader(int x, int y) {\n            invaders.add(new Invader(x, y));\n        }\n        \n        void moveInvader(int index, int dx, int dy) {\n            if (index < invaders.size()) {\n                invaders.get(index).move(dx, dy);\n            }\n        }\n        \n        void attack(String weapon, int x, int y) {\n            if (weapon.equals(\"sniper\")) {\n                handleSniperAttack(x, y);\n            } else if (weapon.equals(\"grenade\")) {\n                handleGrenadeAttack(x, y);\n            }\n        }\n        \n        void handleSniperAttack(int x, int y) {\n            Iterator<Invader> iterator = invaders.iterator();\n            while (iterator.hasNext()) {\n                Invader invader = iterator.next();\n                if (invader.x == x && invader.y == y) {\n                    iterator.remove();\n                    responses.add(\"Sniper attack successful at (\" + x + \", \" + y + \")\");\n                    return;\n                }\n            }\n            responses.add(\"Sniper attack missed at (\" + x + \", \" + y + \")\");\n        }\n        \n        void handleGrenadeAttack(int x, int y) {\n            boolean attacked = false;\n            Iterator<Invader> iterator = invaders.iterator();\n            while (iterator.hasNext()) {\n                Invader invader = iterator.next();\n                if (Math.abs(invader.x - x) <= 1 && Math.abs(invader.y - y) <= 1) {\n                    iterator.remove();\n                    attacked = true;\n                }\n            }\n            if (attacked) {\n                responses.add(\"Grenade attack successful at (\" + x + \", \" + y + \")\");\n            } else {\n                responses.add(\"Grenade attack missed at (\" + x + \", \" + y + \")\");\n            }\n        }\n        \n        void queryResponses() {\n            for (String response : responses) {\n                System.out.println(response);\n            }\n            responses.clear();\n        }\n    }\n    \n    public static void main(String[] args) {\n        Base base = new Base();\n        \n        base.addInvader(2, 3);\n        base.addInvader(5, 5);\n        base.moveInvader(0, 1, 0);\n        base.attack(\"sniper\", 3, 3);\n        base.attack(\"grenade\", 5, 5);\n        \n        base.queryResponses();\n    }\n}",
    "timestamp": "2025-08-13 04:27:25"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAX_INVADERS 1000\n#define MAX_NAME_LEN 50\n\ntypedef struct {\n    char name[MAX_NAME_LEN];\n    int x, y;\n    int alive;\n} Invader;\n\nInvader invaders[MAX_INVADERS];\nint invader_count = 0;\n\nvoid add_invader(char *name, int x, int y) {\n    strcpy(invaders[invader_count].name, name);\n    invaders[invader_count].x = x;\n    invaders[invader_count].y = y;\n    invaders[invader_count].alive = 1;\n    invader_count++;\n}\n\nvoid move_invader(char *name, int dx, int dy) {\n    for (int i = 0; i < invader_count; i++) {\n        if (invaders[i].alive && strcmp(invaders[i].name, name) == 0) {\n            invaders[i].x += dx;\n            invaders[i].y += dy;\n            break;\n        }\n    }\n}\n\nvoid sniper_attack(int x, int y) {\n    for (int i = 0; i < invader_count; i++) {\n        if (invaders[i].alive && invaders[i].x == x && invaders[i].y == y) {\n            invaders[i].alive = 0;\n            printf(\"Sniper attack at (%d, %d): Invader %s killed\\n\", x, y, invaders[i].name);\n            return;\n        }\n    }\n    printf(\"Sniper attack at (%d, %d): Miss\\n\", x, y);\n}\n\nvoid grenade_attack(int x, int y) {\n    int killed = 0;\n    for (int i = 0; i < invader_count; i++) {\n        if (invaders[i].alive && abs(invaders[i].x - x) <= 1 && abs(invaders[i].y - y) <= 1) {\n            invaders[i].alive = 0;\n            printf(\"Grenade attack at (%d, %d): Invader %s killed\\n\", x, y, invaders[i].name);\n            killed = 1;\n        }\n    }\n    if (!killed) {\n        printf(\"Grenade attack at (%d, %d): Miss\\n\", x, y);\n    }\n}\n\nvoid process_query(char *query) {\n    char command[20], name[MAX_NAME_LEN];\n    int x, y, dx, dy;\n    sscanf(query, \"%s\", command);\n\n    if (strcmp(command, \"ADD\") == 0) {\n        sscanf(query, \"%*s %s %d %d\", name, &x, &y);\n        add_invader(name, x, y);\n    } else if (strcmp(command, \"MOVE\") == 0) {\n        sscanf(query, \"%*s %s %d %d\", name, &dx, &dy);\n        move_invader(name, dx, dy);\n    } else if (strcmp(command, \"SNIPER\") == 0) {\n        sscanf(query, \"%*s %d %d\", &x, &y);\n        sniper_attack(x, y);\n    } else if (strcmp(command, \"GRENADE\") == 0) {\n        sscanf(query, \"%*s %d %d\", &x, &y);\n        grenade_attack(x, y);\n    }\n}\n\nint main() {\n    char query[100];\n\n    while (fgets(query, sizeof(query), stdin)) {\n        process_query(query);\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-13 04:27:34"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "class AlienInvasionSimulation:\n    def __init__(self):\n        self.base_position = 0\n        self.invader_positions = []\n        self.defense_log = []\n\n    def record_invader(self, position):\n        self.invader_positions.append(position)\n        self.defense_log.append(f\"Invader detected at position {position}\")\n\n    def move_base(self, new_position):\n        self.base_position = new_position\n        self.defense_log.append(f\"Base moved to position {new_position}\")\n\n    def sniper_attack(self, target_position):\n        if target_position in self.invader_positions:\n            self.invader_positions.remove(target_position)\n            self.defense_log.append(f\"Sniper eliminated invader at position {target_position}\")\n            return True\n        return False\n\n    def grenade_launcher_attack(self, target_position):\n        eliminated = [pos for pos in self.invader_positions if abs(pos - target_position) <= 1]\n        for pos in eliminated:\n            self.invader_positions.remove(pos)\n        \n        if eliminated:\n            self.defense_log.append(f\"Grenade launcher eliminated {len(eliminated)} invaders near position {target_position}\")\n            return True\n        return False\n\n    def get_defense_log(self):\n        return self.defense_log\n\n    def get_remaining_invaders(self):\n        return self.invader_positions",
    "timestamp": "2025-08-13 04:27:47"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "import sys\nfrom collections import defaultdict\n\ndef main():\n    input = sys.stdin.read().split()\n    ptr = 0\n    N = int(input[ptr])\n    ptr += 1\n    Q = int(input[ptr])\n    ptr += 1\n    \n    invaders = defaultdict(int)\n    sniper_kills = 0\n    grenade_kills = 0\n    \n    for _ in range(Q):\n        query = input[ptr]\n        ptr += 1\n        if query == '1':\n            x = int(input[ptr])\n            ptr += 1\n            invaders[x] += 1\n        elif query == '2':\n            x = int(input[ptr])\n            ptr += 1\n            if x in invaders:\n                if invaders[x] > 0:\n                    sniper_kills += 1\n                    invaders[x] -= 1\n        elif query == '3':\n            l = int(input[ptr])\n            ptr += 1\n            r = int(input[ptr])\n            ptr += 1\n            to_remove = []\n            total = 0\n            for pos in list(invaders.keys()):\n                if l <= pos <= r:\n                    total += invaders[pos]\n                    to_remove.append(pos)\n            for pos in to_remove:\n                del invaders[pos]\n            grenade_kills += total\n    \n    print(sniper_kills, grenade_kills)\n\nif __name__ == '__main__':\n    main()",
    "timestamp": "2025-08-13 04:28:00"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstruct Invader {\n    int x, y;\n    bool alive;\n};\n\nclass BaseDefense {\npublic:\n    void addInvader(int x, int y) {\n        invaders.push_back({x, y, true});\n    }\n\n    void moveInvader(int index, int newX, int newY) {\n        if (index >= 0 && index < invaders.size() && invaders[index].alive) {\n            invaders[index].x = newX;\n            invaders[index].y = newY;\n        }\n    }\n\n    void sniperAttack(int index) {\n        if (index >= 0 && index < invaders.size() && invaders[index].alive) {\n            invaders[index].alive = false;\n            cout << \"Sniper attack on invader \" << index << \": Success\\n\";\n        } else {\n            cout << \"Sniper attack on invader \" << index << \": Failed\\n\";\n        }\n    }\n\n    void grenadeLauncherAttack(int x, int y) {\n        bool hit = false;\n        for (auto& invader : invaders) {\n            if (invader.alive && invader.x == x && invader.y == y) {\n                invader.alive = false;\n                hit = true;\n            }\n        }\n        cout << \"Grenade launcher attack at (\" << x << \", \" << y << \"): \" << (hit ? \"Success\\n\" : \"Failed\\n\");\n    }\n\n    void report() {\n        for (size_t i = 0; i < invaders.size(); ++i) {\n            if (invaders[i].alive) {\n                cout << \"Invader \" << i << \" is at (\" << invaders[i].x << \", \" << invaders[i].y << \").\\n\";\n            } else {\n                cout << \"Invader \" << i << \" is dead.\\n\";\n            }\n        }\n    }\n\nprivate:\n    vector<Invader> invaders;\n};\n\nint main() {\n    BaseDefense base;\n    string command;\n    while (cin >> command) {\n        if (command == \"add\") {\n            int x, y;\n            cin >> x >> y;\n            base.addInvader(x, y);\n        } else if (command == \"move\") {\n            int index, x, y;\n            cin >> index >> x >> y;\n            base.moveInvader(index, x, y);\n        } else if (command == \"sniper\") {\n            int index;\n            cin >> index;\n            base.sniperAttack(index);\n        } else if (command == \"grenade\") {\n            int x, y;\n            cin >> x >> y;\n            base.grenadeLauncherAttack(x, y);\n        } else if (command == \"report\") {\n            base.report();\n        } else if (command == \"quit\") {\n            break;\n        }\n    }\n    return 0;\n}",
    "timestamp": "2025-08-13 11:19:43"
  }
]