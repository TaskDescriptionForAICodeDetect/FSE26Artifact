[
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdbool.h>\n\nbool checkRow(int grid[9][9], int row) {\n    bool seen[10] = {false};\n    for (int col = 0; col < 9; col++) {\n        int num = grid[row][col];\n        if (num < 1 || num > 9 || seen[num]) {\n            return false;\n        }\n        seen[num] = true;\n    }\n    return true;\n}\n\nbool checkCol(int grid[9][9], int col) {\n    bool seen[10] = {false};\n    for (int row = 0; row < 9; row++) {\n        int num = grid[row][col];\n        if (num < 1 || num > 9 || seen[num]) {\n            return false;\n        }\n        seen[num] = true;\n    }\n    return true;\n}\n\nbool checkSubgrid(int grid[9][9], int startRow, int startCol) {\n    bool seen[10] = {false};\n    for (int row = 0; row < 3; row++) {\n        for (int col = 0; col < 3; col++) {\n            int num = grid[startRow + row][startCol + col];\n            if (num < 1 || num > 9 || seen[num]) {\n                return false;\n            }\n            seen[num] = true;\n        }\n    }\n    return true;\n}\n\nvoid checkGrid(int grid[9][9], bool errors[9][9]) {\n    for (int i = 0; i < 9; i++) {\n        for (int j = 0; j < 9; j++) {\n            errors[i][j] = false;\n        }\n    }\n\n    for (int i = 0; i < 9; i++) {\n        if (!checkRow(grid, i)) {\n            for (int j = 0; j < 9; j++) {\n                errors[i][j] = true;\n            }\n        }\n    }\n\n    for (int j = 0; j < 9; j++) {\n        if (!checkCol(grid, j)) {\n            for (int i = 0; i < 9; i++) {\n                errors[i][j] = true;\n            }\n        }\n    }\n\n    for (int i = 0; i < 9; i += 3) {\n        for (int j = 0; j < 9; j += 3) {\n            if (!checkSubgrid(grid, i, j)) {\n                for (int row = i; row < i + 3; row++) {\n                    for (int col = j; col < j + 3; col++) {\n                        errors[row][col] = true;\n                    }\n                }\n            }\n        }\n    }\n}\n\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    while (n--) {\n        int grid[9][9];\n        bool errors[9][9];\n        \n        for (int i = 0; i < 9; i++) {\n            for (int j = 0; j < 9; j++) {\n                scanf(\"%d\", &grid[i][j]);\n            }\n        }\n        \n        checkGrid(grid, errors);\n        \n        for (int i = 0; i < 9; i++) {\n            for (int j = 0; j < 9; j++) {\n                printf(\"%c%d\", errors[i][j] ? '*' : ' ', grid[i][j]);\n            }\n            printf(\"\\n\");\n        }\n        \n        if (n > 0) {\n            printf(\"\\n\");\n        }\n    }\n    return 0;\n}",
    "timestamp": "2025-08-05 18:28:41"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class SudokuValidator {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        \n        for (int dataset = 0; dataset < n; dataset++) {\n            int[][] grid = new int[9][9];\n            for (int i = 0; i < 9; i++) {\n                for (int j = 0; j < 9; j++) {\n                    grid[i][j] = scanner.nextInt();\n                }\n            }\n            \n            boolean[][] rowCheck = new boolean[9][10];\n            boolean[][] colCheck = new boolean[9][10];\n            boolean[][] subgridCheck = new boolean[9][10];\n            \n            for (int i = 0; i < 9; i++) {\n                for (int j = 0; j < 9; j++) {\n                    int num = grid[i][j];\n                    int subgridIndex = (i / 3) * 3 + (j / 3);\n                    \n                    if (rowCheck[i][num]) {\n                        grid[i][j] *= -1;\n                    }\n                    rowCheck[i][num] = true;\n                    \n                    if (colCheck[j][num]) {\n                        grid[i][j] *= -1;\n                    }\n                    colCheck[j][num] = true;\n                    \n                    if (subgridCheck[subgridIndex][num]) {\n                        grid[i][j] *= -1;\n                    }\n                    subgridCheck[subgridIndex][num] = true;\n                }\n            }\n            \n            for (int i = 0; i < 9; i++) {\n                for (int j = 0; j < 9; j++) {\n                    if (grid[i][j] < 0) {\n                        System.out.print(\"*\" + Math.abs(grid[i][j]) + \" \");\n                    } else {\n                        System.out.print(\" \" + grid[i][j] + \" \");\n                    }\n                }\n                System.out.println();\n            }\n            \n            if (dataset < n - 1) {\n                System.out.println();\n            }\n        }\n        \n        scanner.close();\n    }\n}",
    "timestamp": "2025-08-05 18:28:49"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <cstring>\n\nusing namespace std;\n\nbool checkRow(const vector<vector<int>>& grid, int row) {\n    bool seen[10] = {false};\n    for (int i = 0; i < 9; ++i) {\n        int num = grid[row][i];\n        if (num == 0) continue;\n        if (seen[num]) return false;\n        seen[num] = true;\n    }\n    return true;\n}\n\nbool checkCol(const vector<vector<int>>& grid, int col) {\n    bool seen[10] = {false};\n    for (int i = 0; i < 9; ++i) {\n        int num = grid[i][col];\n        if (num == 0) continue;\n        if (seen[num]) return false;\n        seen[num] = true;\n    }\n    return true;\n}\n\nbool checkSubgrid(const vector<vector<int>>& grid, int startRow, int startCol) {\n    bool seen[10] = {false};\n    for (int i = 0; i < 3; ++i) {\n        for (int j = 0; j < 3; ++j) {\n            int num = grid[startRow + i][startCol + j];\n            if (num == 0) continue;\n            if (seen[num]) return false;\n            seen[num] = true;\n        }\n    }\n    return true;\n}\n\nint main() {\n    int n;\n    cin >> n;\n    while (n--) {\n        vector<vector<int>> grid(9, vector<int>(9));\n        for (int i = 0; i < 9; ++i) {\n            for (int j = 0; j < 9; ++j) {\n                cin >> grid[i][j];\n            }\n        }\n\n        vector<vector<bool>> mark(9, vector<bool>(9, false));\n        for (int i = 0; i < 9; ++i) {\n            for (int j = 0; j < 9; ++j) {\n                if (grid[i][j] == 0) continue;\n                bool conflict = false;\n                for (int k = 0; k < 9; ++k) {\n                    if (k != j && grid[i][k] == grid[i][j]) {\n                        conflict = true;\n                        break;\n                    }\n                }\n                if (!conflict) {\n                    for (int k = 0; k < 9; ++k) {\n                        if (k != i && grid[k][j] == grid[i][j]) {\n                            conflict = true;\n                            break;\n                        }\n                    }\n                }\n                if (!conflict) {\n                    int subgridRow = (i / 3) * 3;\n                    int subgridCol = (j / 3) * 3;\n                    for (int k = subgridRow; k < subgridRow + 3; ++k) {\n                        for (int l = subgridCol; l < subgridCol + 3; ++l) {\n                            if ((k != i || l != j) && grid[k][l] == grid[i][j]) {\n                                conflict = true;\n                                break;\n                            }\n                        }\n                        if (conflict) break;\n                    }\n                }\n                mark[i][j] = conflict;\n            }\n        }\n\n        for (int i = 0; i < 9; ++i) {\n            for (int j = 0; j < 9; ++j) {\n                if (mark[i][j]) {\n                    cout << \"*\" << grid[i][j];\n                } else {\n                    cout << \" \" << grid[i][j];\n                }\n            }\n            cout << endl;\n        }\n        if (n > 0) cout << endl;\n    }\n    return 0;\n}",
    "timestamp": "2025-08-05 18:29:22"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n\nint main() {\n    int n, dataset;\n    char grid[9][10];\n    int row_check[9][10];\n    int col_check[9][10];\n    int subgrid_check[9][10];\n\n    scanf(\"%d\", &n);\n\n    for (dataset = 1; dataset <= n; dataset++) {\n        // Reset check arrays\n        memset(row_check, 0, sizeof(row_check));\n        memset(col_check, 0, sizeof(col_check));\n        memset(subgrid_check, 0, sizeof(subgrid_check));\n\n        // Read grid\n        for (int i = 0; i < 9; i++) {\n            scanf(\"%s\", grid[i]);\n        }\n\n        // Check rows, columns, and subgrids\n        for (int i = 0; i < 9; i++) {\n            for (int j = 0; j < 9; j++) {\n                int num = grid[i][j] - '0';\n                int subgrid_index = (i / 3) * 3 + (j / 3);\n\n                row_check[i][num]++;\n                col_check[j][num]++;\n                subgrid_check[subgrid_index][num]++;\n            }\n        }\n\n        // Print corrected grid\n        for (int i = 0; i < 9; i++) {\n            for (int j = 0; j < 9; j++) {\n                int num = grid[i][j] - '0';\n                int subgrid_index = (i / 3) * 3 + (j / 3);\n\n                if (row_check[i][num] > 1 || col_check[j][num] > 1 || subgrid_check[subgrid_index][num] > 1) {\n                    printf(\"*%c\", grid[i][j]);\n                } else {\n                    printf(\" %c\", grid[i][j]);\n                }\n            }\n            printf(\"\\n\");\n        }\n\n        // Print blank line between datasets\n        if (dataset < n) {\n            printf(\"\\n\");\n        }\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-05 18:29:30"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <set>\n\nusing namespace std;\n\nbool checkRowValidity(vector<vector<int>>& grid, int row) {\n    set<int> nums;\n    for (int col = 0; col < 9; col++) {\n        if (grid[row][col] != 0) {\n            if (nums.count(grid[row][col])) return false;\n            nums.insert(grid[row][col]);\n        }\n    }\n    return true;\n}\n\nbool checkColumnValidity(vector<vector<int>>& grid, int col) {\n    set<int> nums;\n    for (int row = 0; row < 9; row++) {\n        if (grid[row][col] != 0) {\n            if (nums.count(grid[row][col])) return false;\n            nums.insert(grid[row][col]);\n        }\n    }\n    return true;\n}\n\nbool checkSubGridValidity(vector<vector<int>>& grid, int startRow, int startCol) {\n    set<int> nums;\n    for (int row = startRow; row < startRow + 3; row++) {\n        for (int col = startCol; col < startCol + 3; col++) {\n            if (grid[row][col] != 0) {\n                if (nums.count(grid[row][col])) return false;\n                nums.insert(grid[row][col]);\n            }\n        }\n    }\n    return true;\n}\n\nvoid processDataset() {\n    vector<vector<int>> grid(9, vector<int>(9));\n    for (int row = 0; row < 9; row++) {\n        for (int col = 0; col < 9; col++) {\n            cin >> grid[row][col];\n        }\n    }\n\n    vector<vector<char>> output(9, vector<char>(9, ' '));\n\n    for (int row = 0; row < 9; row++) {\n        bool rowValid = checkRowValidity(grid, row);\n        for (int col = 0; col < 9; col++) {\n            if (!rowValid || \n                !checkColumnValidity(grid, col) || \n                !checkSubGridValidity(grid, (row/3)*3, (col/3)*3)) {\n                output[row][col] = '*';\n            }\n        }\n    }\n\n    for (int row = 0; row < 9; row++) {\n        for (int col = 0; col < 9; col++) {\n            cout << output[row][col] << grid[row][col];\n            if (col == 8) cout << endl;\n        }\n    }\n}\n\nint main() {\n    int n;\n    cin >> n;\n\n    for (int i = 0; i < n; i++) {\n        processDataset();\n        if (i < n - 1) cout << endl;\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-05 18:29:41"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class SudokuChecker {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        scanner.nextLine(); // consume the newline after the integer\n        \n        for (int dataset = 0; dataset < n; dataset++) {\n            if (dataset > 0) {\n                System.out.println(); // blank line between datasets\n            }\n            \n            int[][] grid = new int[9][9];\n            for (int i = 0; i < 9; i++) {\n                String line = scanner.nextLine();\n                for (int j = 0; j < 9; j++) {\n                    grid[i][j] = line.charAt(j) - '0';\n                }\n            }\n            \n            boolean[][] rowError = new boolean[9][9];\n            boolean[][] colError = new boolean[9][9];\n            boolean[][] subgridError = new boolean[9][9];\n            \n            // Check rows\n            for (int i = 0; i < 9; i++) {\n                boolean[] seen = new boolean[9];\n                for (int j = 0; j < 9; j++) {\n                    int num = grid[i][j] - 1;\n                    if (seen[num]) {\n                        rowError[i][j] = true;\n                    }\n                    seen[num] = true;\n                }\n            }\n            \n            // Check columns\n            for (int j = 0; j < 9; j++) {\n                boolean[] seen = new boolean[9];\n                for (int i = 0; i < 9; i++) {\n                    int num = grid[i][j] - 1;\n                    if (seen[num]) {\n                        colError[i][j] = true;\n                    }\n                    seen[num] = true;\n                }\n            }\n            \n            // Check subgrids\n            for (int sg = 0; sg < 9; sg++) {\n                boolean[] seen = new boolean[9];\n                int startRow = (sg / 3) * 3;\n                int startCol = (sg % 3) * 3;\n                for (int i = startRow; i < startRow + 3; i++) {\n                    for (int j = startCol; j < startCol + 3; j++) {\n                        int num = grid[i][j] - 1;\n                        if (seen[num]) {\n                            subgridError[i][j] = true;\n                        }\n                        seen[num] = true;\n                    }\n                }\n            }\n            \n            // Output the grid with asterisks\n            for (int i = 0; i < 9; i++) {\n                StringBuilder line = new StringBuilder();\n                for (int j = 0; j < 9; j++) {\n                    if (rowError[i][j] || colError[i][j] || subgridError[i][j]) {\n                        line.append('*');\n                    } else {\n                        line.append(' ');\n                    }\n                    line.append(grid[i][j]);\n                }\n                System.out.println(line.toString());\n            }\n        }\n        scanner.close();\n    }\n}",
    "timestamp": "2025-08-05 18:30:10"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def check_sudoku(datasets):\n    # Function to check and format a single sudoku grid\n    def format_sudoku(grid):\n        row_errors = [set() for _ in range(9)]\n        col_errors = [set() for _ in range(9)]\n        box_errors = [set() for _ in range(9)]\n        \n        # Sets to keep track of seen numbers in each row, column, and square\n        rows = [set() for _ in range(9)]\n        cols = [set() for _ in range(9)]\n        boxes = [set() for _ in range(9)]\n        \n        # Check each number in the grid\n        for i in range(9):\n            for j in range(9):\n                num = grid[i][j]\n                box_index = (i // 3) * 3 + (j // 3)\n                \n                # Identify errors\n                if num in rows[i]:\n                    row_errors[i].add(num)\n                if num in cols[j]:\n                    col_errors[j].add(num)\n                if num in boxes[box_index]:\n                    box_errors[box_index].add(num)\n                \n                # Add number to tracking sets\n                rows[i].add(num)\n                cols[j].add(num)\n                boxes[box_index].add(num)\n\n        # Format the grid with errors annotated by '*'\n        formatted_grid = []\n        for i in range(9):\n            formatted_line = ''\n            for j in range(9):\n                num = grid[i][j]\n                box_index = (i // 3) * 3 + (j // 3)\n                if num in row_errors[i] or num in col_errors[j] or num in box_errors[box_index]:\n                    formatted_line += f\"*{num}\"\n                else:\n                    formatted_line += f\" {num}\"\n            formatted_grid.append(formatted_line)\n\n        return formatted_grid\n\n    results = []\n    for data in datasets:\n        formatted_data = format_sudoku(data)\n        results.extend(formatted_data)\n        results.append(\"\")  # Add blank line between datasets\n\n    # Print results, joining by new line\n    print(\"\\n\".join(results).strip())\n\n# Example usage with multiple datasets\nn = int(input().strip())\ndatasets = []\n\nfor _ in range(n):\n    dataset = []\n    for __ in range(9):\n        line = input().strip().split()\n        dataset.append(line)\n    datasets.append(dataset)\n\ncheck_sudoku(datasets)",
    "timestamp": "2025-08-12 23:23:28"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "java",
    "code": "import java.util.*;\n\npublic class TaroPuzzleChecker {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int datasets = Integer.parseInt(scanner.nextLine());\n\n        for (int d = 0; d < datasets; d++) {\n            int[][] grid = new int[9][9];\n            for (int i = 0; i < 9; i++) {\n                String[] row = scanner.nextLine().split(\" \");\n                for (int j = 0; j < 9; j++) {\n                    grid[i][j] = Integer.parseInt(row[j]);\n                }\n            }\n            checkAndPrintGrid(grid);\n            if (d < datasets - 1) {\n                System.out.println();\n            }\n        }\n        scanner.close();\n    }\n\n    private static void checkAndPrintGrid(int[][] grid) {\n        for (int i = 0; i < 9; i++) {\n            Set<Integer> rowSet = new HashSet<>();\n            Set<Integer> colSet = new HashSet<>();\n            Set<Integer>[] boxSet = new HashSet[3];\n            for (int k = 0; k < 3; k++) {\n                boxSet[k] = new HashSet<>();\n            }\n            for (int j = 0; j < 9; j++) {\n                int number = grid[i][j];\n                boolean rowDuplicate = !rowSet.add(number);\n                boolean colDuplicate = !colSet.add(grid[j][i]);\n\n                int boxIndex = (i / 3) * 3 + j / 3;\n                boolean boxDuplicate = !boxSet[boxIndex % 3].add(number);\n\n                if (rowDuplicate || colDuplicate || boxDuplicate) {\n                    System.out.print(\"*\" + number + \" \");\n                } else {\n                    System.out.print(\" \" + number + \" \");\n                }\n            }\n            System.out.println();\n        }\n    }\n}",
    "timestamp": "2025-08-12 23:23:35"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c",
    "code": "#include <stdio.h>\n\nint check_row(int grid[9][9], int row) {\n    int count[10] = {0};\n    for (int j = 0; j < 9; j++) {\n        count[grid[row][j]]++;\n    }\n    for (int j = 0; j < 9; j++) {\n        if (count[grid[row][j]] > 1) return 0;\n    }\n    return 1;\n}\n\nint check_col(int grid[9][9], int col) {\n    int count[10] = {0};\n    for (int i = 0; i < 9; i++) {\n        count[grid[i][col]]++;\n    }\n    for (int i = 0; i < 9; i++) {\n        if (count[grid[i][col]] > 1) return 0;\n    }\n    return 1;\n}\n\nint check_subgrid(int grid[9][9], int startRow, int startCol) {\n    int count[10] = {0};\n    for (int i = 0; i < 3; i++) {\n        for (int j = 0; j < 3; j++) {\n            count[grid[startRow + i][startCol + j]]++;\n        }\n    }\n    for (int i = 0; i < 3; i++) {\n        for (int j = 0; j < 3; j++) {\n            if (count[grid[startRow + i][startCol + j]] > 1) return 0;\n        }\n    }\n    return 1;\n}\n\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n\n    for (int d = 0; d < n; d++) {\n        int grid[9][9];\n\n        for (int i = 0; i < 9; i++) {\n            for (int j = 0; j < 9; j++) {\n                scanf(\"%d\", &grid[i][j]);\n            }\n        }\n\n        for (int i = 0; i < 9; i++) {\n            int valid_row = check_row(grid, i);\n            for (int j = 0; j < 9; j++) {\n                int valid_col = check_col(grid, j);\n                int valid_subgrid = check_subgrid(grid, (i / 3) * 3, (j / 3) * 3);\n\n                if (valid_row && valid_col && valid_subgrid)\n                    printf(\" %d\", grid[i][j]);\n                else\n                    printf(\"*%d\", grid[i][j]);\n            }\n            printf(\"\\n\");\n        }\n\n        if (d < n - 1) {\n            printf(\"\\n\");\n        }\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-12 23:23:43"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def check_sudoku(grid):\n    # Check rows\n    row_status = [' '] * 9\n    for i in range(9):\n        row_set = set()\n        for j in range(9):\n            num = grid[i][j]\n            if num in row_set:\n                row_status[i] = '*'\n            row_set.add(num)\n    \n    # Check columns\n    col_status = [' '] * 9\n    for j in range(9):\n        col_set = set()\n        for i in range(9):\n            num = grid[i][j]\n            if num in col_set:\n                col_status[j] = '*'\n            col_set.add(num)\n    \n    # Check 3x3 sub-grids\n    subgrid_status = [' '] * 9\n    for block_row in range(0, 9, 3):\n        for block_col in range(0, 9, 3):\n            subgrid_set = set()\n            block_num = (block_row // 3) * 3 + (block_col // 3)\n            for i in range(block_row, block_row + 3):\n                for j in range(block_col, block_col + 3):\n                    num = grid[i][j]\n                    if num in subgrid_set:\n                        subgrid_status[block_num] = '*'\n                    subgrid_set.add(num)\n    \n    # Prepare output\n    output = []\n    for i in range(9):\n        row_output = row_status[i]\n        for j in range(9):\n            row_output += str(grid[i][j])\n        output.append(row_output)\n    \n    return output\n\ndef main():\n    n = int(input())\n    for _ in range(n):\n        grid = []\n        for _ in range(9):\n            row = list(map(int, list(input())))\n            grid.append(row)\n        \n        result = check_sudoku(grid)\n        \n        for line in result:\n            print(line)\n        \n        if _ < n - 1:\n            print()\n\nif __name__ == \"__main__\":\n    main()",
    "timestamp": "2025-08-12 23:24:00"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def solve():\n    n = int(input())\n    for _ in range(n):\n        grid = []\n        for _ in range(9):\n            line = input().strip()\n            grid.append([int(c) for c in line])\n        \n        # Initialize output grid with spaces\n        output = [[' ' for _ in range(9)] for _ in range(9)]\n        \n        # Check rows\n        for i in range(9):\n            seen = set()\n            for j in range(9):\n                num = grid[i][j]\n                if num in seen:\n                    output[i][j] = '*'\n                seen.add(num)\n        \n        # Check columns\n        for j in range(9):\n            seen = set()\n            for i in range(9):\n                num = grid[i][j]\n                if num in seen:\n                    output[i][j] = '*'\n                seen.add(num)\n        \n        # Check 3x3 subgrids\n        for box_i in range(0, 9, 3):\n            for box_j in range(0, 9, 3):\n                seen = set()\n                for i in range(box_i, box_i + 3):\n                    for j in range(box_j, box_j + 3):\n                        num = grid[i][j]\n                        if num in seen:\n                            output[i][j] = '*'\n                        seen.add(num)\n        \n        # Print the output\n        for i in range(9):\n            line = ''.join([output[i][j] + str(grid[i][j]) for j in range(9)])\n            print(line)\n        \n        # Print blank line between datasets\n        if _ != n - 1:\n            print()\n\nsolve()",
    "timestamp": "2025-08-12 23:24:19"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c++",
    "code": "#include <iostream>\n#include <vector>\n#include <set>\nusing namespace std;\n\nbool isValidGrid(vector<vector<int>>& grid) {\n    for(int i = 0; i < 9; ++i) {\n        set<int> rowSet, colSet, boxSet;\n        for(int j = 0; j < 9; ++j) {\n            int rowVal = grid[i][j];\n            int colVal = grid[j][i];\n            int boxVal = grid[(i/3)*3 + j/3][(i%3)*3 + j%3];\n            \n            if(rowVal != 0 && rowSet.count(rowVal)) return false;\n            if(rowVal != 0) rowSet.insert(rowVal);\n\n            if(colVal != 0 && colSet.count(colVal)) return false;\n            if(colVal != 0) colSet.insert(colVal);\n\n            if(boxVal != 0 && boxSet.count(boxVal)) return false;\n            if(boxVal != 0) boxSet.insert(boxVal);\n        }\n    }\n    return true;\n}\n\nvoid printGrid(vector<vector<int>>& grid) {\n    for(int i = 0; i < 9; ++i) {\n        set<int> seenRow;\n        for(int j = 0; j < 9; ++j) {\n            if(seenRow.count(grid[i][j])) {\n                cout << \"*\" << grid[i][j] << \" \";\n            } else {\n                cout << \" \" << grid[i][j] << \" \";\n                seenRow.insert(grid[i][j]);\n            }\n        }\n        cout << \"\\n\";\n    }\n}\n\nvoid readAndProcessPuzzle() {\n    int numDatasets;\n    cin >> numDatasets;\n\n    for(int d = 0; d < numDatasets; ++d) {\n        vector<vector<int>> grid(9, vector<int>(9));\n\n        for(int i = 0; i < 9; ++i) {\n            for(int j = 0; j < 9; ++j) {\n                cin >> grid[i][j];\n            }\n        }\n\n        if(!isValidGrid(grid)) {\n            cout << \"Invalid Puzzle\" << endl;\n        } else {\n            printGrid(grid);\n        }\n\n        if(d != numDatasets - 1) {\n            cout << endl;\n        }\n    }\n}\n\nint main() {\n    readAndProcessPuzzle();\n    return 0;\n}",
    "timestamp": "2025-08-13 10:50:05"
  }
]