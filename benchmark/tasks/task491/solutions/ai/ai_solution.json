[
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\n#define MAX_AIRPORTS 100\n#define MAX_NAME_LEN 100\n\nbool is_vowel(char c) {\n    return c == 'a' || c == 'i' || c == 'u' || c == 'e' || c == 'o';\n}\n\nvoid generate_code(char* name, char* code, int k) {\n    int code_len = 0;\n    code[0] = name[0];\n    code_len++;\n\n    for (int i = 0; name[i] != '\\0'; i++) {\n        if (is_vowel(name[i]) && name[i+1] != '\\0') {\n            code[code_len++] = name[i+1];\n            if (code_len == k) break;\n        }\n    }\n    code[code_len] = '\\0';\n}\n\nbool check_unique_codes(char codes[][MAX_NAME_LEN], int n, int k) {\n    for (int i = 0; i < n; i++) {\n        for (int j = i+1; j < n; j++) {\n            if (strncmp(codes[i], codes[j], k) == 0) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nint main() {\n    int n;\n    char names[MAX_AIRPORTS][MAX_NAME_LEN];\n    char codes[MAX_AIRPORTS][MAX_NAME_LEN];\n\n    scanf(\"%d\", &n);\n    for (int i = 0; i < n; i++) {\n        scanf(\"%s\", names[i]);\n    }\n\n    for (int k = 1; k <= MAX_NAME_LEN; k++) {\n        for (int i = 0; i < n; i++) {\n            generate_code(names[i], codes[i], k);\n        }\n\n        if (check_unique_codes(codes, n, k)) {\n            printf(\"%d\\n\", k);\n            return 0;\n        }\n    }\n\n    printf(\"impossible\\n\");\n    return 0;\n}",
    "timestamp": "2025-08-05 21:53:26"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\n#define MAX_N 100000\n#define MAX_LEN 50\n\nint is_vowel(char c) {\n    return c == 'a' || c == 'i' || c == 'u' || c == 'e' || c == 'o';\n}\n\nchar* get_code(const char* name, int k) {\n    int len = strlen(name);\n    char* code = (char*)malloc((k + 1) * sizeof(char));\n    int code_len = 0;\n    code[code_len++] = name[0];\n    for (int i = 1; i < len && code_len < k; ++i) {\n        if (is_vowel(name[i - 1])) {\n            code[code_len++] = name[i];\n        }\n    }\n    if (code_len < k) {\n        code[k] = '\\0';\n        return code;\n    }\n    code[k] = '\\0';\n    return code;\n}\n\nint compare_strings(const void* a, const void* b) {\n    return strcmp(*(const char**)a, *(const char**)b);\n}\n\nint is_possible(int n, char names[][MAX_LEN], int k) {\n    char** codes = (char**)malloc(n * sizeof(char*));\n    for (int i = 0; i < n; ++i) {\n        codes[i] = get_code(names[i], k);\n    }\n    qsort(codes, n, sizeof(char*), compare_strings);\n    int possible = 1;\n    for (int i = 1; i < n; ++i) {\n        if (strcmp(codes[i], codes[i - 1]) == 0) {\n            possible = 0;\n            break;\n        }\n    }\n    for (int i = 0; i < n; ++i) {\n        free(codes[i]);\n    }\n    free(codes);\n    return possible;\n}\n\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    char names[MAX_N][MAX_LEN];\n    for (int i = 0; i < n; ++i) {\n        scanf(\"%s\", names[i]);\n    }\n    int max_len = 0;\n    for (int i = 0; i < n; ++i) {\n        int len = strlen(names[i]);\n        if (len > max_len) {\n            max_len = len;\n        }\n    }\n    int min_k = -1;\n    for (int k = 1; k <= max_len; ++k) {\n        if (is_possible(n, names, k)) {\n            min_k = k;\n            break;\n        }\n    }\n    if (min_k == -1) {\n        printf(\"-1\\n\");\n    } else {\n        printf(\"%d\\n\", min_k);\n    }\n    return 0;\n}",
    "timestamp": "2025-08-05 21:53:53"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <unordered_set>\n#include <algorithm>\n\nusing namespace std;\n\nbool isVowel(char c) {\n    return c == 'a' || c == 'i' || c == 'u' || c == 'e' || c == 'o';\n}\n\nstring generateCode(const string& name, int k) {\n    string code;\n    code += name[0];\n    for (size_t i = 1; i < name.size(); ++i) {\n        if (isVowel(name[i - 1])) {\n            code += name[i];\n        }\n        if (code.size() >= k) {\n            break;\n        }\n    }\n    return code.substr(0, k);\n}\n\nint findMinK(const vector<string>& names) {\n    int max_len = 0;\n    for (const auto& name : names) {\n        max_len = max(max_len, (int)name.size());\n    }\n\n    for (int k = 1; k <= max_len; ++k) {\n        unordered_set<string> codes;\n        bool valid = true;\n        for (const auto& name : names) {\n            string code = generateCode(name, k);\n            if (codes.find(code) != codes.end()) {\n                valid = false;\n                break;\n            }\n            codes.insert(code);\n        }\n        if (valid) {\n            return k;\n        }\n    }\n    return -1;\n}\n\nint main() {\n    int n;\n    cin >> n;\n    vector<string> names(n);\n    for (int i = 0; i < n; ++i) {\n        cin >> names[i];\n    }\n\n    int k = findMinK(names);\n    if (k != -1) {\n        cout << k << endl;\n    } else {\n        cout << \"-1\" << endl;\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-05 21:54:15"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class AirportCodes {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        scanner.nextLine();\n        String[] names = new String[n];\n        for (int i = 0; i < n; i++) {\n            names[i] = scanner.nextLine();\n        }\n\n        int minK = Integer.MAX_VALUE;\n        boolean possible = false;\n\n        for (int k = 1; k <= 20; k++) {\n            Set<String> codes = new HashSet<>();\n            boolean allUnique = true;\n            for (String name : names) {\n                StringBuilder code = new StringBuilder();\n                code.append(name.charAt(0));\n                for (int i = 1; i < name.length(); i++) {\n                    char prev = name.charAt(i - 1);\n                    if (prev == 'a' || prev == 'i' || prev == 'u' || prev == 'e' || prev == 'o') {\n                        code.append(name.charAt(i));\n                    }\n                }\n                String finalCode = code.length() >= k ? code.substring(0, k) : code.toString();\n                if (codes.contains(finalCode)) {\n                    allUnique = false;\n                    break;\n                }\n                codes.add(finalCode);\n            }\n            if (allUnique) {\n                possible = true;\n                if (k < minK) {\n                    minK = k;\n                }\n            }\n        }\n\n        if (possible) {\n            System.out.println(minK);\n        } else {\n            System.out.println(-1);\n        }\n    }\n}",
    "timestamp": "2025-08-05 21:54:30"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class AirportCodeAssignment {\n    public static int findMinUniqueCodeLength(String[] airportNames) {\n        for (int k = 1; k <= 10; k++) {\n            Set<String> uniqueCodes = new HashSet<>();\n            boolean allUnique = true;\n\n            for (String name : airportNames) {\n                String code = generateAirportCode(name, k);\n                if (!uniqueCodes.add(code)) {\n                    allUnique = false;\n                    break;\n                }\n            }\n\n            if (allUnique) {\n                return k;\n            }\n        }\n\n        return -1;\n    }\n\n    private static String generateAirportCode(String name, int k) {\n        StringBuilder code = new StringBuilder();\n        code.append(name.charAt(0));\n\n        for (int i = 1; i < name.length(); i++) {\n            if (isVowel(name.charAt(i - 1))) {\n                code.append(name.charAt(i));\n            }\n        }\n\n        return code.length() > k ? code.substring(0, k) : code.toString();\n    }\n\n    private static boolean isVowel(char c) {\n        return \"aiueo\".indexOf(c) != -1;\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        String[] airportNames = new String[n];\n\n        for (int i = 0; i < n; i++) {\n            airportNames[i] = scanner.next();\n        }\n\n        int result = findMinUniqueCodeLength(airportNames);\n        System.out.println(result == -1 ? \"IMPOSSIBLE\" : result);\n    }\n}",
    "timestamp": "2025-08-05 21:54:36"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <set>\n#include <algorithm>\n\nusing namespace std;\n\nbool isVowel(char c) {\n    return c == 'a' || c == 'i' || c == 'u' || c == 'e' || c == 'o';\n}\n\nstring generateCode(const string& name, int k) {\n    string code;\n    code += name[0];\n    \n    for (int i = 1; i < name.length(); i++) {\n        if (isVowel(name[i-1])) {\n            code += name[i];\n        }\n        \n        if (code.length() == k) break;\n    }\n    \n    return code.substr(0, k);\n}\n\nint findMinK(const vector<string>& airports) {\n    for (int k = 1; k <= 10; k++) {\n        set<string> uniqueCodes;\n        bool allUnique = true;\n        \n        for (const string& airport : airports) {\n            string code = generateCode(airport, k);\n            \n            if (uniqueCodes.count(code)) {\n                allUnique = false;\n                break;\n            }\n            \n            uniqueCodes.insert(code);\n        }\n        \n        if (allUnique) return k;\n    }\n    \n    return -1;\n}\n\nint main() {\n    int n;\n    cin >> n;\n    \n    vector<string> airports(n);\n    for (int i = 0; i < n; i++) {\n        cin >> airports[i];\n    }\n    \n    int result = findMinK(airports);\n    \n    if (result == -1) {\n        cout << \"Impossible\" << endl;\n    } else {\n        cout << result << endl;\n    }\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 21:54:42"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def assign_airport_codes(airport_names):\n    vowels = {'a', 'i', 'u', 'e', 'o'}\n    \n    def generate_code(name, k):\n        code = [name[0]]  # Start with the first letter\n        for i in range(1, len(name)):\n            if name[i] in vowels:\n                if i + 1 < len(name):\n                    code.append(name[i + 1])\n            if len(code) >= k:\n                break\n        return ''.join(code[:k])\n    \n    def is_unique_for_k(k):\n        codes = set()\n        for name in airport_names:\n            code = generate_code(name, k)\n            if code in codes:\n                return False\n            codes.add(code)\n        return True\n    \n    # Try increasing k until the codes are unique\n    k = 1\n    while not is_unique_for_k(k):\n        k += 1\n        if k > len(min(airport_names, key=len)):  # Upper bound on k is the length of the shortest name\n            return \"Impossible\"\n    \n    return k\n\n# Example:\nairport_names = [\"alpha\", \"beta\", \"gamma\", \"delta\"]\nprint(assign_airport_codes(airport_names))",
    "timestamp": "2025-08-13 08:00:35"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "java",
    "code": "import java.util.*;\n\npublic class AirportCodeGenerator {\n\n    public static int findMinimumK(List<String> airportNames) {\n        int n = airportNames.size();\n        for (int k = 1; k <= 100; k++) { // Upper limit assumption for k\n            Set<String> codes = new HashSet<>();\n            boolean isUnique = true;\n\n            for (String name : airportNames) {\n                String code = generateCode(name, k);\n                if (codes.contains(code)) {\n                    isUnique = false;\n                    break;\n                }\n                codes.add(code);\n            }\n\n            if (isUnique) {\n                return k;\n            }\n        }\n        return -1; // Impossible case\n    }\n\n    private static String generateCode(String name, int k) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name.charAt(0));\n\n        for (int i = 1; i < name.length() && sb.length() < k; i++) {\n            char c = name.charAt(i);\n            if (isVowel(c) && i + 1 < name.length()) {\n                sb.append(name.charAt(i + 1));\n                i++; // Skip the next character since it's already used\n            }\n        }\n        \n        // Ensure the resulting string has length of k if possible\n        while (sb.length() < k && sb.length() < name.length()) {\n            sb.append(name.charAt(sb.length()));\n        }\n\n        return sb.length() <= k ? sb.toString() : sb.substring(0, k);\n    }\n\n    private static boolean isVowel(char c) {\n        return c == 'a' || c == 'i' || c == 'u' || c == 'e' || c == 'o';\n    }\n\n    public static void main(String[] args) {\n        List<String> airportNames = Arrays.asList(\"atlanta\", \"boston\", \"chicago\", \"denver\", \"houston\");\n        int result = findMinimumK(airportNames);\n        if (result != -1) {\n            System.out.println(\"Minimum k for unique codes: \" + result);\n        } else {\n            System.out.println(\"Impossible to assign unique codes.\");\n        }\n    }\n}",
    "timestamp": "2025-08-13 08:00:44"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c",
    "code": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\n#define MAX_AIRPORTS 1000\n#define MAX_NAME_LENGTH 100\n\nchar* generate_code(const char* name, int k) {\n    char* code = (char*)malloc(MAX_NAME_LENGTH * sizeof(char));\n    int len = strlen(name);\n    int code_index = 0;\n\n    code[code_index++] = name[0]; // first letter\n\n    for (int i = 1; i < len; i++) {\n        if (name[i] == 'a' || name[i] == 'e' || name[i] == 'i' || name[i] == 'o' || name[i] == 'u') {\n            if (i+1 < len) {\n                code[code_index++] = name[i+1];\n            }\n        }\n        if (code_index >= k) break;\n    }\n\n    code[code_index] = '\\0';\n    return code;\n}\n\nint is_unique_codes(char airport_names[MAX_AIRPORTS][MAX_NAME_LENGTH], int n, int k) {\n    char codes[MAX_AIRPORTS][MAX_NAME_LENGTH];\n    for (int i = 0; i < n; i++) {\n        strcpy(codes[i], generate_code(airport_names[i], k));\n    }\n\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (strcmp(codes[i], codes[j]) == 0) {\n                return 0; // not unique\n            }\n        }\n    }\n\n    return 1; // unique\n}\n\nint find_min_k(char airport_names[MAX_AIRPORTS][MAX_NAME_LENGTH], int n) {\n    for (int k = 1; k < MAX_NAME_LENGTH; k++) {\n        if (is_unique_codes(airport_names, n, k)) {\n            return k;\n        }\n    }\n    return -1; // impossible\n}\n\nint main() {\n    int n;\n    char airport_names[MAX_AIRPORTS][MAX_NAME_LENGTH];\n\n    scanf(\"%d\", &n);\n    for (int i = 0; i < n; i++) {\n        scanf(\"%s\", airport_names[i]);\n    }\n\n    int result = find_min_k(airport_names, n);\n    if (result == -1) {\n        printf(\"Impossible\\n\");\n    } else {\n        printf(\"%d\\n\", result);\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-13 08:00:49"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def solution(airport_names):\n    def generate_code(name, k):\n        code = name[0]\n        for i in range(len(name)):\n            if name[i] in 'aiueo' and i + 1 < len(name):\n                code += name[i + 1]\n        return code[:k]\n\n    for k in range(1, 11):  # Assuming a reasonable max k\n        codes = set()\n        unique = True\n        for name in airport_names:\n            code = generate_code(name, k)\n            if code in codes:\n                unique = False\n                break\n            codes.add(code)\n        \n        if unique:\n            return k\n    \n    return -1",
    "timestamp": "2025-08-13 08:00:56"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def is_possible(names, k):\n    codes = set()\n    for name in names:\n        code = []\n        if not name:\n            return False\n        code.append(name[0])\n        for i in range(len(name) - 1):\n            if name[i] in {'a', 'i', 'u', 'e', 'o'}:\n                code.append(name[i+1])\n        code_str = ''.join(code)\n        if len(code_str) >= k:\n            code_str = code_str[:k]\n        else:\n            code_str = code_str\n        if code_str in codes:\n            return False\n        codes.add(code_str)\n    return True\n\ndef find_min_k(names):\n    max_possible_k = 0\n    for name in names:\n        code_len = 1\n        for c in name[:-1]:\n            if c in {'a', 'i', 'u', 'e', 'o'}:\n                code_len += 1\n        max_possible_k = max(max_possible_k, code_len)\n    \n    for k in range(1, max_possible_k + 1):\n        if is_possible(names, k):\n            return k\n    return -1\n\nn = int(input())\nnames = [input().strip() for _ in range(n)]\nresult = find_min_k(names)\nif result != -1:\n    print(result)\nelse:\n    print(-1)",
    "timestamp": "2025-08-13 08:01:07"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c++",
    "code": "#include <iostream>\n#include <vector>\n#include <unordered_set>\n#include <string>\nusing namespace std;\n\n// Function to generate the airport code based on the given rules\nstring generateCode(const string& name, int k) {\n    string code;\n    code += name[0];\n    size_t index = 1;\n    while (code.length() < k && index < name.length()) {\n        if (name[index - 1] == 'a' || name[index - 1] == 'i' || name[index - 1] == 'u' || name[index - 1] == 'e' || name[index - 1] == 'o') {\n            code += name[index];\n        }\n        ++index;\n    }\n    return code.substr(0, k);\n}\n\n// Function to check if it's possible to generate unique codes of length k\nbool canGenerateUniqueCodes(const vector<string>& names, int k) {\n    unordered_set<string> codes;\n    for (const string& name : names) {\n        string code = generateCode(name, k);\n        if (codes.find(code) != codes.end()) {\n            return false;\n        }\n        codes.insert(code);\n    }\n    return true;\n}\n\n// Main function to find the minimum k\nint findMinimumK(const vector<string>& names) {\n    int maxK = 1000;  // Arbitrary large number that exceeds the likely length of any result\n    for (int k = 1; k <= maxK; ++k) {\n        if (canGenerateUniqueCodes(names, k)) {\n            return k;\n        }\n    }\n    return -1;  // Impossible to make all codes unique\n}\n\nint main() {\n    int n;\n    cin >> n;\n    vector<string> names(n);\n\n    for (int i = 0; i < n; ++i) {\n        cin >> names[i];\n    }\n\n    int result = findMinimumK(names);\n    if (result != -1) {\n        cout << result << endl;\n    } else {\n        cout << \"Impossible\" << endl;\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-13 11:42:49"
  }
]