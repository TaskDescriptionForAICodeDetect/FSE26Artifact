[
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nint solve(int* cards, int n) {\n    int points = 0;\n    \n    for (int i = 0; i < n - 1; i++) {\n        int window[5];\n        for (int j = 0; j < 5; j++) {\n            window[j] = cards[i + j];\n        }\n        \n        int max_local_points = 0;\n        \n        for (int p1 = 0; p1 < 5; p1++) {\n            for (int p2 = 0; p2 < 5; p2++) {\n                if (p1 == p2) continue;\n                for (int p3 = 0; p3 < 5; p3++) {\n                    if (p3 == p1 || p3 == p2) continue;\n                    \n                    int local_points = 0;\n                    if (window[p1] == window[p2] && window[p2] == window[p3]) {\n                        local_points = 1;\n                    }\n                    max_local_points = (local_points > max_local_points) ? local_points : max_local_points;\n                }\n            }\n        }\n        \n        points += max_local_points;\n        \n        for (int j = 0; j < n - 5; j++) {\n            cards[j] = cards[j + 3];\n        }\n        n -= 3;\n    }\n    \n    if (cards[0] == cards[1] && cards[1] == cards[2]) {\n        points++;\n    }\n    \n    return points;\n}\n\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    \n    int cards[3 * n];\n    for (int i = 0; i < 3 * n; i++) {\n        scanf(\"%d\", &cards[i]);\n    }\n    \n    int result = solve(cards, 3 * n);\n    printf(\"%d\\n\", result);\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 22:25:45"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n\nint max_points = 0;\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nvoid permute(int arr[], int l, int r, int *cards, int N, int points) {\n    if (l == r) {\n        int new_points = points;\n        if (cards[0] == cards[1] && cards[1] == cards[2]) {\n            new_points++;\n        }\n        int new_cards[3*N - 3];\n        for (int i = 3; i < 3*N; i++) {\n            new_cards[i - 3] = cards[i];\n        }\n        new_cards[0] = arr[0];\n        new_cards[1] = arr[1];\n        if (3*N - 3 == 3) {\n            if (new_cards[0] == new_cards[1] && new_cards[1] == new_cards[2]) {\n                new_points++;\n            }\n            if (new_points > max_points) {\n                max_points = new_points;\n            }\n            return;\n        }\n        int next_arr[5];\n        for (int i = 0; i < 5; i++) {\n            next_arr[i] = new_cards[i];\n        }\n        permute(next_arr, 0, 4, new_cards, N - 1, new_points);\n    } else {\n        for (int i = l; i <= r; i++) {\n            swap(&arr[l], &arr[i]);\n            permute(arr, l + 1, r, cards, N, points);\n            swap(&arr[l], &arr[i]);\n        }\n    }\n}\n\nint main() {\n    int N;\n    scanf(\"%d\", &N);\n    int cards[3*N];\n    for (int i = 0; i < 3*N; i++) {\n        scanf(\"%d\", &cards[i]);\n    }\n    if (N == 1) {\n        if (cards[0] == cards[1] && cards[1] == cards[2]) {\n            printf(\"1\\n\");\n        } else {\n            printf(\"0\\n\");\n        }\n        return 0;\n    }\n    int arr[5];\n    for (int i = 0; i < 5; i++) {\n        arr[i] = cards[i];\n    }\n    permute(arr, 0, 4, cards, N, 0);\n    printf(\"%d\\n\", max_points);\n    return 0;\n}",
    "timestamp": "2025-08-05 22:26:11"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nint max_points(vector<int>& cards) {\n    int N = cards.size() / 3;\n    int points = 0;\n    vector<int> temp(5);\n\n    for (int op = 0; op < N - 1; ++op) {\n        for (int i = 0; i < 5; ++i) {\n            temp[i] = cards[i];\n        }\n        sort(temp.begin(), temp.end());\n        if (temp[0] == temp[2] || temp[1] == temp[3] || temp[2] == temp[4]) {\n            points++;\n            if (temp[2] == temp[0]) {\n                cards.erase(cards.begin(), cards.begin() + 3);\n            } else if (temp[2] == temp[4]) {\n                cards.erase(cards.begin() + 2, cards.begin() + 5);\n                cards.erase(cards.begin(), cards.begin() + 2);\n            } else {\n                cards.erase(cards.begin() + 1, cards.begin() + 4);\n                cards.erase(cards.begin());\n            }\n        } else {\n            cards.erase(cards.begin(), cards.begin() + 3);\n        }\n    }\n\n    if (cards[0] == cards[1] && cards[1] == cards[2]) {\n        points++;\n    }\n\n    return points;\n}\n\nint main() {\n    int N;\n    cin >> N;\n    vector<int> cards(3 * N);\n    for (int i = 0; i < 3 * N; ++i) {\n        cin >> cards[i];\n    }\n    cout << max_points(cards) << endl;\n    return 0;\n}",
    "timestamp": "2025-08-05 22:26:29"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class CardGame {\n    public static int maxPoints(int[] cards) {\n        int N = cards.length / 3;\n        int[] freq = new int[N + 1];\n        for (int card : cards) {\n            freq[card]++;\n        }\n        \n        int maxTriplets = 0;\n        for (int count : freq) {\n            maxTriplets += count / 3;\n        }\n        \n        return Math.min(maxTriplets, N);\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int N = scanner.nextInt();\n        int[] cards = new int[3 * N];\n        for (int i = 0; i < 3 * N; i++) {\n            cards[i] = scanner.nextInt();\n        }\n        System.out.println(maxPoints(cards));\n    }\n}",
    "timestamp": "2025-08-05 22:26:37"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "class Solution {\n    public int maxScore(int[] cardPoints) {\n        int n = cardPoints.length;\n        int points = 0;\n        \n        for (int operation = 0; operation < n / 3; operation++) {\n            int[] first5 = Arrays.copyOfRange(cardPoints, 0, 5);\n            Arrays.sort(first5);\n            \n            if (first5[0] == first5[2]) {\n                points++;\n            }\n            \n            cardPoints = removeFirstThree(cardPoints);\n        }\n        \n        if (cardPoints[0] == cardPoints[1] && cardPoints[1] == cardPoints[2]) {\n            points++;\n        }\n        \n        return points;\n    }\n    \n    private int[] removeFirstThree(int[] arr) {\n        return Arrays.copyOfRange(arr, 3, arr.length);\n    }\n}",
    "timestamp": "2025-08-05 22:26:41"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "class Solution {\npublic:\n    int maxScore(vector<int>& cardPoints) {\n        int n = cardPoints.size() / 3;\n        int points = 0;\n        \n        // Try all possible permutations of first 5 cards\n        for (int i = 0; i < (1 << 5); i++) {\n            vector<int> temp = cardPoints;\n            int currPoints = 0;\n            \n            // Rearrange first 5 cards\n            vector<int> firstFive;\n            for (int j = 0; j < 5; j++) {\n                if (i & (1 << j)) {\n                    firstFive.push_back(temp[j]);\n                }\n            }\n            while (firstFive.size() < 5) {\n                for (int j = 0; j < 5; j++) {\n                    if (!(i & (1 << j))) {\n                        firstFive.push_back(temp[j]);\n                        if (firstFive.size() == 5) break;\n                    }\n                }\n            }\n            \n            // Perform N-1 operations\n            for (int op = 0; op < n - 1; op++) {\n                // Check if removed 3 cards are equal\n                if (firstFive[0] == firstFive[1] && firstFive[1] == firstFive[2]) {\n                    currPoints++;\n                }\n                \n                // Remove first 3 cards\n                temp.erase(temp.begin(), temp.begin() + 3);\n                firstFive.erase(firstFive.begin(), firstFive.begin() + 3);\n                \n                // Add next card from remaining cards\n                firstFive.push_back(temp[1]);\n            }\n            \n            // Check final 3 cards\n            if (temp[0] == temp[1] && temp[1] == temp[2]) {\n                currPoints++;\n            }\n            \n            points = max(points, currPoints);\n        }\n        \n        return points;\n    }\n};",
    "timestamp": "2025-08-05 22:26:48"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "from collections import Counter\n\ndef max_points(cards, N):\n    def can_rearrange_equal(cards):\n        count = Counter(cards[:5])\n        for num in count:\n            if count[num] >= 3:\n                return True\n        return False\n\n    points = 0\n    for _ in range(N-1):\n        if can_rearrange_equal(cards):\n            points += 1\n        cards = cards[3:]\n    \n    if len(set(cards)) == 1:\n        points += 1\n        \n    return points\n\n# Example usage:\n# N = 3\n# cards = [1, 1, 2, 1, 2, 3, 2, 3, 3]\n# print(max_points(cards, N))",
    "timestamp": "2025-08-13 10:45:32"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "java",
    "code": "import java.util.HashMap;\n\npublic class CardGame {\n\n    public static int maxPoints(int[] cards) {\n        int N = cards.length / 3;\n        int points = 0;\n\n        HashMap<Integer, Integer> countMap = new HashMap<>();\n\n        for (int i = 0; i < cards.length; i++) {\n            countMap.put(cards[i], countMap.getOrDefault(cards[i], 0) + 1);\n        }\n\n        for (int i = 0; i < N - 1; i++) {\n            int maxCount = 0;\n            int maxValue = 0;\n\n            // Find the most frequent card in the first five positions\n            for (int j = 0; j < 5; j++) {\n                int card = cards[j];\n                if (countMap.get(card) > maxCount) {\n                    maxCount = countMap.get(card);\n                    maxValue = card;\n                }\n            }\n\n            // Remove three cards\n            for (int j = 0; j < 3; j++) {\n                countMap.put(cards[j], countMap.get(cards[j]) - 1);\n            }\n\n            // Count the points if all three are equal\n            if (cards[0] == cards[1] && cards[1] == cards[2]) {\n                points++;\n            }\n\n            // Shift the remaining cards\n            System.arraycopy(cards, 3, cards, 0, cards.length - 3);\n        }\n\n        // Check the last remaining three cards\n        if (cards[0] == cards[1] && cards[1] == cards[2]) {\n            points++;\n        }\n\n        return points;\n    }\n\n    public static void main(String[] args) {\n        int[] cards = {1, 2, 3, 1, 2, 3, 1, 2, 3}; // Example input\n        System.out.println(maxPoints(cards)); // Outputs the maximum points\n    }\n}",
    "timestamp": "2025-08-13 10:45:38"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c",
    "code": "#include <stdio.h>\n\nint maxPoints(int* cards, int N) {\n    int points = 0;\n    int freq[N + 1];\n\n    for (int i = 0; i < N; ++i) {\n        for (int j = 1; j <= N; ++j) freq[j] = 0;\n        for (int j = 0; j < 5; ++j) freq[cards[j]]++;\n\n        for (int j = 1; j <= N; ++j) {\n            if (freq[j] >= 3) {\n                points++;\n                break;\n            }\n        }\n\n        for (int j = 0; j < 5; ++j) cards[j] = cards[j + 5];\n    }\n\n    if (cards[0] == cards[1] && cards[1] == cards[2]) points++;\n\n    return points;\n}\n\nint main() {\n    int N;\n    scanf(\"%d\", &N);\n    int cards[3 * N];\n    for (int i = 0; i < 3 * N; ++i) {\n        scanf(\"%d\", &cards[i]);\n    }\n\n    printf(\"%d\\n\", maxPoints(cards, N));\n\n    return 0;\n}",
    "timestamp": "2025-08-13 10:45:43"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def maxPoints(cards):\n    N = len(cards) // 3\n    \n    def solve(curr_cards):\n        if len(curr_cards) == 3:\n            return 1 if len(set(curr_cards)) == 1 else 0\n        \n        max_points = 0\n        \n        for p1 in range(5):\n            for p2 in range(p1+1, 5):\n                for p3 in range(p2+1, 5):\n                    # Create a copy of current cards and rearrange\n                    temp_cards = curr_cards.copy()\n                    subarray = temp_cards[:5]\n                    subarray[p1], subarray[p2], subarray[p3] = subarray[p3], subarray[p1], subarray[p2]\n                    temp_cards[:5] = subarray\n                    \n                    # Check if removed cards are equal\n                    points = 1 if len(set(temp_cards[:3])) == 1 else 0\n                    \n                    # Recursively solve remaining cards\n                    points += solve(temp_cards[3:])\n                    \n                    max_points = max(max_points, points)\n        \n        return max_points\n    \n    return solve(cards)\n\ndef main():\n    N = int(input())\n    cards = list(map(int, input().split()))\n    print(maxPoints(cards))\n\nif __name__ == \"__main__\":\n    main()",
    "timestamp": "2025-08-13 10:45:55"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def max_points(N, cards):\n    from collections import defaultdict\n\n    count = defaultdict(int)\n    for card in cards:\n        count[card] += 1\n\n    max_possible = 0\n    for c in count:\n        max_possible += count[c] // 3\n\n    return min(max_possible, N)",
    "timestamp": "2025-08-13 10:46:05"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <map>\n\nint maxPoints(std::vector<int>& cards, int N) {\n    int points = 0;\n    for(int i = 0; i < N - 1; ++i) {\n        std::map<int, int> count;\n        \n        for(int j = 0; j < 5; ++j) {\n            count[cards[j]]++;\n        }\n        \n        int maxEqual = 0;\n        for(const auto& pair : count) {\n            maxEqual = std::max(maxEqual, pair.second);\n        }\n\n        if(maxEqual >= 3) {\n            points++;\n        }\n        \n        for(int j = 0; j < 3; ++j) {\n            cards.erase(cards.begin());\n        }\n    }\n\n    if(cards[0] == cards[1] && cards[1] == cards[2]) {\n        points++;\n    }\n\n    return points;\n}\n\nint main() {\n    int N;\n    std::cin >> N;\n    std::vector<int> cards(3 * N);\n    for (int i = 0; i < 3 * N; ++i) {\n        std::cin >> cards[i];\n    }\n    \n    std::cout << maxPoints(cards, N) << std::endl;\n    return 0;\n}",
    "timestamp": "2025-08-13 12:00:30"
  }
]