[
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <limits.h>\n\n#define MAX_V 100\n#define INF 1000000000\n\nint n, m;\nint dist[MAX_V][MAX_V];\n\nvoid floyd_warshall() {\n    for (int k = 0; k < n; k++) {\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (dist[i][k] != INF && dist[k][j] != INF && \n                    dist[i][k] + dist[k][j] < dist[i][j]) {\n                    dist[i][j] = dist[i][k] + dist[k][j];\n                }\n            }\n        }\n    }\n\n    for (int i = 0; i < n; i++) {\n        if (dist[i][i] < 0) {\n            printf(\"NEGATIVE CYCLE\\n\");\n            return;\n        }\n    }\n\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            if (dist[i][j] == INF) printf(\"INF \");\n            else printf(\"%d \", dist[i][j]);\n        }\n        printf(\"\\n\");\n    }\n}\n\nint main() {\n    scanf(\"%d %d\", &n, &m);\n\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            dist[i][j] = (i == j) ? 0 : INF;\n        }\n    }\n\n    for (int i = 0; i < m; i++) {\n        int x, y, w;\n        scanf(\"%d %d %d\", &x, &y, &w);\n        dist[x-1][y-1] = w;\n    }\n\n    floyd_warshall();\n\n    return 0;\n}",
    "timestamp": "2025-08-05 22:19:51"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <limits.h>\n\n#define INF INT_MAX\n\nvoid floydWarshall(int n, int **dist) {\n    int i, j, k;\n    for (k = 0; k < n; k++) {\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n; j++) {\n                if (dist[i][k] != INF && dist[k][j] != INF && dist[i][j] > dist[i][k] + dist[k][j]) {\n                    dist[i][j] = dist[i][k] + dist[k][j];\n                }\n            }\n        }\n    }\n\n    for (i = 0; i < n; i++) {\n        if (dist[i][i] < 0) {\n            printf(\"NEGATIVE CYCLE\\n\");\n            return;\n        }\n    }\n\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            if (dist[i][j] == INF) {\n                printf(\"INF\");\n            } else {\n                printf(\"%d\", dist[i][j]);\n            }\n            if (j != n - 1) {\n                printf(\" \");\n            }\n        }\n        printf(\"\\n\");\n    }\n}\n\nint main() {\n    int n, m, u, v, w;\n    scanf(\"%d %d\", &n, &m);\n\n    int **dist = (int **)malloc(n * sizeof(int *));\n    for (int i = 0; i < n; i++) {\n        dist[i] = (int *)malloc(n * sizeof(int));\n        for (int j = 0; j < n; j++) {\n            dist[i][j] = (i == j) ? 0 : INF;\n        }\n    }\n\n    for (int i = 0; i < m; i++) {\n        scanf(\"%d %d %d\", &u, &v, &w);\n        dist[u][v] = w;\n    }\n\n    floydWarshall(n, dist);\n\n    for (int i = 0; i < n; i++) {\n        free(dist[i]);\n    }\n    free(dist);\n\n    return 0;\n}",
    "timestamp": "2025-08-05 22:20:11"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <climits>\n\nusing namespace std;\n\nconst long long INF = LLONG_MAX;\n\nvoid floydWarshall(vector<vector<long long>>& dist, int V) {\n    for (int k = 0; k < V; ++k) {\n        for (int i = 0; i < V; ++i) {\n            for (int j = 0; j < V; ++j) {\n                if (dist[i][k] != INF && dist[k][j] != INF && dist[i][j] > dist[i][k] + dist[k][j]) {\n                    dist[i][j] = dist[i][k] + dist[k][j];\n                }\n            }\n        }\n    }\n\n    for (int i = 0; i < V; ++i) {\n        if (dist[i][i] < 0) {\n            cout << \"NEGATIVE CYCLE\" << endl;\n            return;\n        }\n    }\n\n    for (int i = 0; i < V; ++i) {\n        for (int j = 0; j < V; ++j) {\n            if (dist[i][j] == INF) {\n                cout << \"INF\";\n            } else {\n                cout << dist[i][j];\n            }\n            if (j != V - 1) {\n                cout << \" \";\n            }\n        }\n        cout << endl;\n    }\n}\n\nint main() {\n    int V, E;\n    cin >> V >> E;\n\n    vector<vector<long long>> dist(V, vector<long long>(V, INF));\n    for (int i = 0; i < V; ++i) {\n        dist[i][i] = 0;\n    }\n\n    for (int i = 0; i < E; ++i) {\n        int u, v;\n        long long w;\n        cin >> u >> v >> w;\n        if (dist[u][v] > w) {\n            dist[u][v] = w;\n        }\n    }\n\n    floydWarshall(dist, V);\n\n    return 0;\n}",
    "timestamp": "2025-08-05 22:20:32"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class FloydWarshall {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int V = scanner.nextInt();\n        int E = scanner.nextInt();\n        long[][] dist = new long[V][V];\n        final long INF = Long.MAX_VALUE / 2;\n\n        for (int i = 0; i < V; i++) {\n            Arrays.fill(dist[i], INF);\n            dist[i][i] = 0;\n        }\n\n        for (int i = 0; i < E; i++) {\n            int u = scanner.nextInt();\n            int v = scanner.nextInt();\n            int w = scanner.nextInt();\n            dist[u][v] = Math.min(dist[u][v], w);\n        }\n\n        for (int k = 0; k < V; k++) {\n            for (int i = 0; i < V; i++) {\n                for (int j = 0; j < V; j++) {\n                    if (dist[i][k] + dist[k][j] < dist[i][j]) {\n                        dist[i][j] = dist[i][k] + dist[k][j];\n                    }\n                }\n            }\n        }\n\n        boolean hasNegativeCycle = false;\n        for (int i = 0; i < V; i++) {\n            if (dist[i][i] < 0) {\n                hasNegativeCycle = true;\n                break;\n            }\n        }\n\n        if (hasNegativeCycle) {\n            System.out.println(\"NEGATIVE CYCLE\");\n        } else {\n            for (int i = 0; i < V; i++) {\n                for (int j = 0; j < V; j++) {\n                    if (dist[i][j] >= INF / 2) {\n                        System.out.print(\"INF\");\n                    } else {\n                        System.out.print(dist[i][j]);\n                    }\n                    if (j < V - 1) {\n                        System.out.print(\" \");\n                    }\n                }\n                System.out.println();\n            }\n        }\n    }\n}",
    "timestamp": "2025-08-05 22:20:56"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\nimport java.io.*;\n\npublic class ShortestPaths {\n    private static final long INF = Long.MAX_VALUE / 2;\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        StringTokenizer st = new StringTokenizer(br.readLine());\n        \n        int n = Integer.parseInt(st.nextToken());\n        int m = Integer.parseInt(st.nextToken());\n        \n        long[][] dist = new long[n][n];\n        \n        for (long[] row : dist) {\n            Arrays.fill(row, INF);\n        }\n        \n        for (int i = 0; i < n; i++) {\n            dist[i][i] = 0;\n        }\n        \n        for (int i = 0; i < m; i++) {\n            st = new StringTokenizer(br.readLine());\n            int a = Integer.parseInt(st.nextToken()) - 1;\n            int b = Integer.parseInt(st.nextToken()) - 1;\n            long w = Long.parseLong(st.nextToken());\n            dist[a][b] = Math.min(dist[a][b], w);\n        }\n        \n        for (int k = 0; k < n; k++) {\n            for (int i = 0; i < n; i++) {\n                for (int j = 0; j < n; j++) {\n                    if (dist[i][k] != INF && dist[k][j] != INF) {\n                        dist[i][j] = Math.min(dist[i][j], dist[i][k] + dist[k][j]);\n                    }\n                }\n            }\n        }\n        \n        for (int i = 0; i < n; i++) {\n            if (dist[i][i] < 0) {\n                System.out.println(\"NEGATIVE CYCLE\");\n                return;\n            }\n        }\n        \n        long totalCost = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (dist[i][j] == INF) {\n                    totalCost += INF;\n                } else {\n                    totalCost += dist[i][j];\n                }\n            }\n        }\n        \n        System.out.println(totalCost);\n    }\n}",
    "timestamp": "2025-08-05 22:21:03"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <limits>\n\nusing namespace std;\n\nconst long long INF = 1e15;\n\nvoid floydWarshall(vector<vector<long long>>& dist) {\n    int n = dist.size();\n    \n    for (int k = 0; k < n; k++) {\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (dist[i][k] != INF && dist[k][j] != INF) {\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]);\n                }\n            }\n        }\n    }\n    \n    // Check for negative cycles\n    for (int i = 0; i < n; i++) {\n        if (dist[i][i] < 0) {\n            cout << \"NEGATIVE CYCLE\" << endl;\n            return;\n        }\n    }\n    \n    // Output shortest path costs\n    long long total = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            if (dist[i][j] == INF) {\n                total += 1e15;\n            } else {\n                total += dist[i][j];\n            }\n        }\n    }\n    \n    cout << total << endl;\n}\n\nint main() {\n    int n, m;\n    cin >> n >> m;\n    \n    vector<vector<long long>> dist(n, vector<long long>(n, INF));\n    \n    for (int i = 0; i < n; i++) {\n        dist[i][i] = 0;\n    }\n    \n    for (int i = 0; i < m; i++) {\n        int a, b;\n        long long w;\n        cin >> a >> b >> w;\n        dist[a-1][b-1] = min(dist[a-1][b-1], w);\n    }\n    \n    floydWarshall(dist);\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 22:21:11"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def floyd_warshall(n, edges):\n    # Initialize distance matrix\n    dist = [[float('inf')] * n for _ in range(n)]\n    \n    # Set distance to self as 0\n    for i in range(n):\n        dist[i][i] = 0\n    \n    # Set distances based on edges\n    for u, v, w in edges:\n        dist[u][v] = w\n    \n    # Floyd-Warshall algorithm\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                if dist[i][k] < float('inf') and dist[k][j] < float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    \n    # Check for negative cycle\n    for i in range(n):\n        if dist[i][i] < 0:\n            return 'NEGATIVE CYCLE'\n    \n    # Return the distances matrix\n    return dist\n\n# Example usage\nn = 4  # Number of vertices\nedges = [\n    (0, 1, 5),\n    (0, 3, 10),\n    (1, 2, 3),\n    (2, 3, 1),\n    (3, 1, -8)\n]\n\nresult = floyd_warshall(n, edges)\nprint(result)",
    "timestamp": "2025-08-13 10:05:52"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "java",
    "code": "import java.util.Arrays;\n\npublic class FloydWarshall {\n    static final int INF = 1000000000;\n\n    public static void floydWarshall(int[][] graph, int n) {\n        int[][] dist = new int[n][n];\n        for (int i = 0; i < n; i++) {\n            dist[i] = Arrays.copyOf(graph[i], n);\n        }\n\n        for (int k = 0; k < n; k++) {\n            for (int i = 0; i < n; i++) {\n                for (int j = 0; j < n; j++) {\n                    if (dist[i][k] != INF && dist[k][j] != INF) {\n                        dist[i][j] = Math.min(dist[i][j], dist[i][k] + dist[k][j]);\n                    }\n                }\n            }\n        }\n\n        for (int i = 0; i < n; i++) {\n            if (dist[i][i] < 0) {\n                System.out.println(\"NEGATIVE CYCLE\");\n                return;\n            }\n        }\n\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (dist[i][j] == INF) {\n                    System.out.print(\"INF \");\n                } else {\n                    System.out.print(dist[i][j] + \" \");\n                }\n            }\n            System.out.println();\n        }\n    }\n\n    public static void main(String[] args) {\n        int[][] graph = {\n            {0, 3, INF, INF},\n            {2, 0, INF, INF},\n            {INF, 7, 0, 1},\n            {6, INF, INF, 0}\n        };\n        int n = graph.length;\n\n        floydWarshall(graph, n);\n    }\n}",
    "timestamp": "2025-08-13 10:05:56"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c",
    "code": "#include <stdio.h>\n#include <limits.h>\n\n#define MAX_V 100\n#define INF INT_MAX\n\nint dist[MAX_V][MAX_V];\n\nvoid floydWarshall(int V) {\n    for (int k = 0; k < V; k++) {\n        for (int i = 0; i < V; i++) {\n            for (int j = 0; j < V; j++) {\n                if (dist[i][k] != INF && dist[k][j] != INF) {\n                    if (dist[i][j] > dist[i][k] + dist[k][j]) {\n                        dist[i][j] = dist[i][k] + dist[k][j];\n                    }\n                }\n            }\n        }\n    }\n\n    for (int i = 0; i < V; i++) {\n        if (dist[i][i] < 0) {\n            printf(\"NEGATIVE CYCLE\\n\");\n            return;\n        }\n    }\n\n    for (int i = 0; i < V; i++) {\n        for (int j = 0; j < V; j++) {\n            if (dist[i][j] == INF) {\n                printf(\"INF \");\n            } else {\n                printf(\"%d \", dist[i][j]);\n            }\n        }\n        printf(\"\\n\");\n    }\n}\n\nint main() {\n    int V, E;\n    scanf(\"%d %d\", &V, &E);\n\n    for (int i = 0; i < V; i++) {\n        for (int j = 0; j < V; j++) {\n            if (i == j) {\n                dist[i][j] = 0;\n            } else {\n                dist[i][j] = INF;\n            }\n        }\n    }\n\n    for (int i = 0; i < E; i++) {\n        int u, v, w;\n        scanf(\"%d %d %d\", &u, &v, &w);\n        dist[u][v] = w;\n    }\n\n    floydWarshall(V);\n\n    return 0;\n}",
    "timestamp": "2025-08-13 10:06:08"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def floyd_warshall(graph):\n    n = len(graph)\n    dist = [[float('inf')] * n for _ in range(n)]\n    \n    for i in range(n):\n        dist[i][i] = 0\n    \n    for u in range(n):\n        for v in range(n):\n            if graph[u][v] != float('inf'):\n                dist[u][v] = graph[u][v]\n    \n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    \n    for i in range(n):\n        if dist[i][i] < 0:\n            return 'NEGATIVE CYCLE'\n    \n    return dist\n\ndef main():\n    n, m = map(int, input().split())\n    graph = [[float('inf')] * n for _ in range(n)]\n    \n    for _ in range(m):\n        u, v, w = map(int, input().split())\n        graph[u-1][v-1] = w\n    \n    result = floyd_warshall(graph)\n    \n    if result == 'NEGATIVE CYCLE':\n        print(result)\n    else:\n        total_cost = 0\n        for row in result:\n            for val in row:\n                if val != float('inf'):\n                    total_cost += val\n        print(total_cost)\n\nif __name__ == \"__main__\":\n    main()",
    "timestamp": "2025-08-13 10:06:19"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "import sys\n\ndef floyd_warshall(n, edges):\n    dist = [[float('inf')] * n for _ in range(n)]\n    for i in range(n):\n        dist[i][i] = 0\n    for u, v, w in edges:\n        if dist[u][v] > w:\n            dist[u][v] = w\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                if dist[i][k] + dist[k][j] < dist[i][j]:\n                    dist[i][j] = dist[i][k] + dist[k][j]\n    for i in range(n):\n        if dist[i][i] < 0:\n            return None\n    return dist\n\ndef main():\n    input = sys.stdin.read().split()\n    ptr = 0\n    n = int(input[ptr])\n    ptr += 1\n    m = int(input[ptr])\n    ptr += 1\n    edges = []\n    for _ in range(m):\n        u = int(input[ptr])\n        ptr += 1\n        v = int(input[ptr])\n        ptr += 1\n        w = int(input[ptr])\n        ptr += 1\n        edges.append((u, v, w))\n    result = floyd_warshall(n, edges)\n    if result is None:\n        print(\"NEGATIVE CYCLE\")\n    else:\n        for i in range(n):\n            line = []\n            for j in range(n):\n                if result[i][j] == float('inf'):\n                    line.append(\"INF\")\n                else:\n                    line.append(str(result[i][j]))\n            print(' '.join(line))\n\nif __name__ == \"__main__\":\n    main()",
    "timestamp": "2025-08-13 10:06:37"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c++",
    "code": "#include <iostream>\n#include <vector>\n#include <limits>\n\nusing namespace std;\n\nconst int INF = numeric_limits<int>::max();\n\nvoid floydWarshall(int n, vector<vector<int>>& graph) {\n    vector<vector<int>> dist = graph;\n\n    for (int k = 0; k < n; ++k) {\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < n; ++j) {\n                if (dist[i][k] != INF && dist[k][j] != INF) {\n                    if (dist[i][k] + dist[k][j] < dist[i][j]) {\n                        dist[i][j] = dist[i][k] + dist[k][j];\n                    }\n                }\n            }\n        }\n    }\n\n    for (int i = 0; i < n; ++i) {\n        if (dist[i][i] < 0) {\n            cout << \"NEGATIVE CYCLE\" << endl;\n            return;\n        }\n    }\n\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < n; ++j) {\n            if (dist[i][j] == INF) {\n                cout << \"INF \";\n            } else {\n                cout << dist[i][j] << \" \";\n            }\n        }\n        cout << endl;\n    }\n}\n\nint main() {\n    int n, m;\n    cin >> n >> m;\n    vector<vector<int>> graph(n, vector<int>(n, INF));\n\n    for (int i = 0; i < n; ++i) {\n        graph[i][i] = 0;\n    }\n\n    for (int i = 0; i < m; ++i) {\n        int u, v, w;\n        cin >> u >> v >> w;\n        graph[u][v] = w;\n    }\n\n    floydWarshall(n, graph);\n\n    return 0;\n}",
    "timestamp": "2025-08-13 11:57:16"
  }
]