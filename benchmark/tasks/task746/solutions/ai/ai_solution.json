[
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    int N, K;\n    scanf(\"%d %d\", &N, &K);\n    \n    int* sequence = malloc(N * sizeof(int));\n    for (int i = 0; i < N; i++) {\n        scanf(\"%d\", &sequence[i]);\n    }\n    \n    int* result = malloc(K * sizeof(int));\n    int result_size = 0;\n    \n    for (int i = 0; i < N; i++) {\n        int current = sequence[i];\n        int exists = 0;\n        \n        for (int j = 0; j < result_size; j++) {\n            if (result[j] == current) {\n                exists = 1;\n                result_size--;\n                break;\n            }\n        }\n        \n        if (!exists) {\n            if (result_size < K) {\n                result[result_size] = current;\n                result_size++;\n            }\n        }\n    }\n    \n    printf(\"%d\\n\", result_size);\n    for (int i = 0; i < result_size; i++) {\n        printf(\"%d \", result[i]);\n    }\n    printf(\"\\n\");\n    \n    free(sequence);\n    free(result);\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 22:46:03"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    int N, K;\n    scanf(\"%d %d\", &N, &K);\n    \n    int *A = (int *)malloc(N * sizeof(int));\n    for (int i = 0; i < N; i++) {\n        scanf(\"%d\", &A[i]);\n    }\n    \n    int *stack = (int *)malloc(N * sizeof(int));\n    int top = -1;\n    int *visited = (int *)calloc(K + 1, sizeof(int));\n    \n    for (int i = 0; i < N; i++) {\n        int num = A[i];\n        if (visited[num]) {\n            while (top >= 0 && stack[top] == num) {\n                visited[stack[top]] = 0;\n                top--;\n            }\n        } else {\n            stack[++top] = num;\n            visited[num] = 1;\n        }\n    }\n    \n    for (int i = 0; i <= top; i++) {\n        printf(\"%d \", stack[i]);\n    }\n    printf(\"\\n\");\n    \n    free(A);\n    free(stack);\n    free(visited);\n    return 0;\n}",
    "timestamp": "2025-08-05 22:46:16"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <unordered_set>\n\nusing namespace std;\n\nint main() {\n    int N, K;\n    cin >> N >> K;\n    vector<int> A(N);\n    for (int i = 0; i < N; ++i) {\n        cin >> A[i];\n    }\n\n    vector<int> sequence;\n    unordered_set<int> elements;\n\n    for (int num : A) {\n        if (elements.find(num) == elements.end()) {\n            sequence.push_back(num);\n            elements.insert(num);\n        } else {\n            if (!sequence.empty() && sequence.back() == num) {\n                sequence.pop_back();\n                elements.erase(num);\n            }\n        }\n    }\n\n    for (int i = 0; i < sequence.size(); ++i) {\n        if (i > 0) cout << \" \";\n        cout << sequence[i];\n    }\n    cout << endl;\n\n    return 0;\n}",
    "timestamp": "2025-08-05 22:46:26"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int N = scanner.nextInt();\n        int K = scanner.nextInt();\n        int[] A = new int[N];\n        for (int i = 0; i < N; i++) {\n            A[i] = scanner.nextInt();\n        }\n        \n        Deque<Integer> deque = new ArrayDeque<>();\n        Set<Integer> set = new HashSet<>();\n        \n        for (int num : A) {\n            if (!set.contains(num)) {\n                deque.addLast(num);\n                set.add(num);\n                if (deque.size() > K) {\n                    int removed = deque.removeFirst();\n                    set.remove(removed);\n                }\n            } else {\n                if (!deque.isEmpty() && deque.peekLast() == num) {\n                    deque.removeLast();\n                    set.remove(num);\n                }\n            }\n        }\n        \n        List<Integer> result = new ArrayList<>(deque);\n        Collections.reverse(result);\n        System.out.println(result.size());\n        for (int i = 0; i < result.size(); i++) {\n            if (i > 0) {\n                System.out.print(\" \");\n            }\n            System.out.print(result.get(i));\n        }\n        System.out.println();\n    }\n}",
    "timestamp": "2025-08-05 22:46:38"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class SnukeSequence {\n    public static List<Integer> getFinalSequence(int[] operations, int k) {\n        List<Integer> sequence = new ArrayList<>();\n        \n        for (int op : operations) {\n            if (sequence.contains(op)) {\n                sequence.remove(sequence.size() - 1);\n            } else {\n                sequence.add(op);\n                if (sequence.size() > k) {\n                    sequence.remove(0);\n                }\n            }\n        }\n        \n        return sequence;\n    }\n    \n    public static void main(String[] args) {\n        // Example usage\n        int[] operations = {1, 2, 3, 2, 1};\n        int k = 3;\n        List<Integer> result = getFinalSequence(operations, k);\n        System.out.println(result);\n    }\n}",
    "timestamp": "2025-08-05 22:46:41"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint main() {\n    int N, K;\n    cin >> N >> K;\n    \n    vector<int> sequence(N);\n    for (int i = 0; i < N; i++) {\n        cin >> sequence[i];\n    }\n    \n    vector<int> result;\n    \n    for (int i = 0; i < N; i++) {\n        if (!result.empty() && result.back() == sequence[i]) {\n            result.pop_back();\n        } else {\n            result.push_back(sequence[i]);\n        }\n    }\n    \n    cout << result.size() << endl;\n    for (int num : result) {\n        cout << num << \" \";\n    }\n    cout << endl;\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 22:46:45"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def final_sequence(operations):\n    sequence = []\n    for op in operations:\n        if op in sequence:\n            sequence.pop()\n        else:\n            sequence.append(op)\n    return sequence\n\n# Example usage:\noperations = [1, 2, 3, 2, 1, 4]  # Example input\nresult = final_sequence(operations)\nprint(result)  # Prints the final sequence",
    "timestamp": "2025-08-13 12:28:50"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "java",
    "code": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SnukeSequence {\n\n    public static List<Integer> performOperations(int[] sequence, int k) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (int num : sequence) {\n            for (int i = 0; i < k; i++) {\n                if (result.contains(num)) {\n                    result.remove(result.size() - 1);\n                } else {\n                    result.add(num);\n                }\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        int[] sequence = {3, 1, 4, 1, 5};\n        int k = 3;\n        List<Integer> finalSequence = performOperations(sequence, k);\n        System.out.println(finalSequence);\n    }\n}",
    "timestamp": "2025-08-13 12:28:52"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* finalSequence(int* arr, int n, int* returnSize) {\n    int* stack = (int*)malloc(n * sizeof(int));\n    int top = -1;\n    for (int i = 0; i < n; ++i) {\n        if (top >= 0 && stack[top] == arr[i]) {\n            --top;\n        } else {\n            stack[++top] = arr[i];\n        }\n    }\n    *returnSize = top + 1;\n    return stack;\n}\n\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n\n    int* arr = (int*)malloc(n * sizeof(int));\n    for (int i = 0; i < n; ++i) {\n        scanf(\"%d\", &arr[i]);\n    }\n\n    int returnSize;\n    int* result = finalSequence(arr, n, &returnSize);\n\n    for (int i = 0; i < returnSize; ++i) {\n        printf(\"%d \", result[i]);\n    }\n    printf(\"\\n\");\n\n    free(arr);\n    free(result);\n    return 0;\n}",
    "timestamp": "2025-08-13 12:28:59"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c++",
    "code": "#include <iostream>\n#include <vector>\n#include <unordered_set>\n\nint main() {\n    int n, k;\n    std::cin >> n >> k;\n    std::vector<int> sequence(n);\n    std::vector<int> result;\n    std::unordered_set<int> seen;\n\n    for (int i = 0; i < n; ++i) {\n        std::cin >> sequence[i];\n    }\n    \n    for (int i = 0; i < sequence.size(); ++i) {\n        int element = sequence[i];\n        \n        if (seen.count(element) == 0) {\n            result.push_back(element);\n            seen.insert(element);\n        } else {\n            if (!result.empty() && result.back() == element) {\n                result.pop_back();\n                seen.erase(element);\n            }\n        }\n    }\n\n    for (int i = 0; i < result.size(); ++i) {\n        std::cout << result[i] << \" \";\n    }\n    std::cout << std::endl;\n\n    return 0;\n}",
    "timestamp": "2025-08-13 12:29:03"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def solve_sequence_operations(N, K, sequence):\n    result = []\n    for num in sequence:\n        if not result or result[-1] != num:\n            result.append(num)\n        else:\n            result.pop()\n    return result\n\n# Read input\nN, K = map(int, input().split())\nsequence = list(map(int, input().split()))\n\n# Get the final sequence\nfinal_sequence = solve_sequence_operations(N, K, sequence)\n\n# Print the result\nprint(len(final_sequence))\nprint(*final_sequence)",
    "timestamp": "2025-08-13 12:29:07"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    idx = 0\n    N, K = map(int, data[idx:idx+2])\n    idx +=2\n    A = list(map(int, data[idx:idx+N]))\n    idx +=N\n    \n    stack = []\n    last_pos = {}\n    \n    for num in A:\n        if num in last_pos:\n            while stack and stack[-1] != num:\n                del last_pos[stack.pop()]\n            if stack:\n                stack.pop()\n                del last_pos[num]\n        else:\n            stack.append(num)\n            last_pos[num] = len(stack) - 1\n    \n    print(' '.join(map(str, stack)))\n\nsolve()",
    "timestamp": "2025-08-13 12:29:12"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "js",
    "code": "function performOperations(N, K, sequence) {\n    const result = [];\n    for (let i = 0; i < N; i++) {\n        const operations = sequence[i];\n        for (let j = 0; j < K; j++) {\n            if (operations === result[result.length - 1]) {\n                result.pop();\n            } else {\n                result.push(operations);\n            }\n        }\n    }\n    return result;\n}\n\n// Example usage:\n// const N = 3;\n// const K = 2;\n// const sequence = [1, 2, 3];\n// console.log(performOperations(N, K, sequence)); // Output: [1, 1, 2, 2, 3, 3]",
    "timestamp": "2025-08-13 12:29:24"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "js",
    "code": "function processSequence(N, K, sequence) {\n    let result = [];\n    \n    for (let num of sequence) {\n        if (result.length > 0 && result[result.length - 1] === num) {\n            result.pop();\n        } else {\n            result.push(num);\n        }\n    }\n    \n    return result;\n}",
    "timestamp": "2025-08-13 12:29:26"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "js",
    "code": "function solve(N, K, operations) {\n    let sequence = [];\n    let lastOccurrence = new Map();\n\n    for (let op of operations) {\n        if (lastOccurrence.has(op)) {\n            let lastIndex = lastOccurrence.get(op);\n            if (sequence[sequence.length - 1] === op) {\n                sequence.pop();\n                lastOccurrence.delete(op);\n            }\n        } else {\n            sequence.push(op);\n            lastOccurrence.set(op, sequence.length - 1);\n        }\n    }\n\n    return sequence;\n}",
    "timestamp": "2025-08-13 12:29:31"
  }
]