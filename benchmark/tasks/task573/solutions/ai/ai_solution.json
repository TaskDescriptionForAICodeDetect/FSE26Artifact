[
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\n#define MAX_CARDS 100\n\ntypedef struct {\n    char card[3];\n} Card;\n\nint extractValue(char* card) {\n    return card[1] - '0';\n}\n\nvoid bubbleSort(Card* cards, int n) {\n    for (int i = 0; i < n - 1; i++) {\n        for (int j = 0; j < n - i - 1; j++) {\n            if (extractValue(cards[j].card) > extractValue(cards[j+1].card)) {\n                Card temp = cards[j];\n                cards[j] = cards[j+1];\n                cards[j+1] = temp;\n            }\n        }\n    }\n}\n\nvoid selectionSort(Card* cards, int n) {\n    for (int i = 0; i < n - 1; i++) {\n        int minIndex = i;\n        for (int j = i + 1; j < n; j++) {\n            if (extractValue(cards[j].card) < extractValue(cards[minIndex].card)) {\n                minIndex = j;\n            }\n        }\n        Card temp = cards[i];\n        cards[i] = cards[minIndex];\n        cards[minIndex] = temp;\n    }\n}\n\nint main() {\n    int n;\n    Card cards[MAX_CARDS];\n    Card bubbleCards[MAX_CARDS];\n    Card selectionCards[MAX_CARDS];\n\n    scanf(\"%d\", &n);\n    for (int i = 0; i < n; i++) {\n        scanf(\"%s\", cards[i].card);\n        bubbleCards[i] = cards[i];\n        selectionCards[i] = cards[i];\n    }\n\n    bubbleSort(bubbleCards, n);\n    selectionSort(selectionCards, n);\n\n    printf(\"Bubble Sort:\\n\");\n    for (int i = 0; i < n; i++) {\n        printf(\"%s \", bubbleCards[i].card);\n    }\n    printf(\"\\n\");\n\n    printf(\"Selection Sort:\\n\");\n    for (int i = 0; i < n; i++) {\n        printf(\"%s \", selectionCards[i].card);\n    }\n    printf(\"\\n\");\n\n    return 0;\n}",
    "timestamp": "2025-08-05 22:10:18"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char suit;\n    int value;\n    int original_pos;\n} Card;\n\nvoid bubbleSort(Card cards[], int n, int *stable) {\n    int i, j;\n    *stable = 1;\n    for (i = 0; i < n - 1; i++) {\n        for (j = n - 1; j > i; j--) {\n            if (cards[j].value < cards[j - 1].value) {\n                Card temp = cards[j];\n                cards[j] = cards[j - 1];\n                cards[j - 1] = temp;\n            }\n        }\n    }\n    for (i = 0; i < n - 1; i++) {\n        if (cards[i].value == cards[i + 1].value && cards[i].original_pos > cards[i + 1].original_pos) {\n            *stable = 0;\n            break;\n        }\n    }\n}\n\nvoid selectionSort(Card cards[], int n, int *stable) {\n    int i, j, min_idx;\n    *stable = 1;\n    for (i = 0; i < n - 1; i++) {\n        min_idx = i;\n        for (j = i + 1; j < n; j++) {\n            if (cards[j].value < cards[min_idx].value) {\n                min_idx = j;\n            }\n        }\n        if (min_idx != i) {\n            Card temp = cards[i];\n            cards[i] = cards[min_idx];\n            cards[min_idx] = temp;\n        }\n    }\n    for (i = 0; i < n - 1; i++) {\n        if (cards[i].value == cards[i + 1].value && cards[i].original_pos > cards[i + 1].original_pos) {\n            *stable = 0;\n            break;\n        }\n    }\n}\n\nvoid printCards(Card cards[], int n) {\n    for (int i = 0; i < n; i++) {\n        printf(\"%c%d\", cards[i].suit, cards[i].value);\n        if (i < n - 1) printf(\" \");\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    Card cards[n], cards_bubble[n], cards_selection[n];\n    \n    for (int i = 0; i < n; i++) {\n        char str[3];\n        scanf(\"%s\", str);\n        cards[i].suit = str[0];\n        cards[i].value = str[1] - '0';\n        cards[i].original_pos = i;\n        cards_bubble[i] = cards[i];\n        cards_selection[i] = cards[i];\n    }\n    \n    int stable_bubble, stable_selection;\n    \n    bubbleSort(cards_bubble, n, &stable_bubble);\n    selectionSort(cards_selection, n, &stable_selection);\n    \n    printCards(cards_bubble, n);\n    printf(\"%s\\n\", stable_bubble ? \"Stable\" : \"Not stable\");\n    \n    printCards(cards_selection, n);\n    printf(\"%s\\n\", stable_selection ? \"Stable\" : \"Not stable\");\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 22:10:47"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nstruct Card {\n    char suit;\n    int value;\n    int original_pos;\n};\n\nvoid bubbleSort(vector<Card>& cards) {\n    int n = cards.size();\n    for (int i = 0; i < n; ++i) {\n        for (int j = n - 1; j > i; --j) {\n            if (cards[j].value < cards[j - 1].value) {\n                swap(cards[j], cards[j - 1]);\n            }\n        }\n    }\n}\n\nvoid selectionSort(vector<Card>& cards) {\n    int n = cards.size();\n    for (int i = 0; i < n; ++i) {\n        int min_idx = i;\n        for (int j = i; j < n; ++j) {\n            if (cards[j].value < cards[min_idx].value) {\n                min_idx = j;\n            }\n        }\n        swap(cards[i], cards[min_idx]);\n    }\n}\n\nbool isStable(const vector<Card>& original, const vector<Card>& sorted) {\n    for (int i = 0; i < sorted.size(); ++i) {\n        for (int j = i + 1; j < sorted.size(); ++j) {\n            if (sorted[i].value == sorted[j].value && sorted[i].original_pos > sorted[j].original_pos) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nvoid printCards(const vector<Card>& cards) {\n    for (const auto& card : cards) {\n        cout << card.suit << card.value << \" \";\n    }\n    cout << endl;\n}\n\nint main() {\n    int n;\n    cin >> n;\n    vector<Card> cards(n);\n    for (int i = 0; i < n; ++i) {\n        string s;\n        cin >> s;\n        cards[i].suit = s[0];\n        cards[i].value = s[1] - '0';\n        cards[i].original_pos = i;\n    }\n\n    vector<Card> bubbleCards = cards;\n    bubbleSort(bubbleCards);\n    printCards(bubbleCards);\n    cout << (isStable(cards, bubbleCards) ? \"Stable\" : \"Not stable\") << endl;\n\n    vector<Card> selectionCards = cards;\n    selectionSort(selectionCards);\n    printCards(selectionCards);\n    cout << (isStable(cards, selectionCards) ? \"Stable\" : \"Not stable\") << endl;\n\n    return 0;\n}",
    "timestamp": "2025-08-05 22:11:08"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.Arrays;\n\npublic class CardSorting {\n    static class Card {\n        char suit;\n        int value;\n        String original;\n\n        Card(String s) {\n            this.original = s;\n            this.suit = s.charAt(0);\n            this.value = Character.getNumericValue(s.charAt(1));\n        }\n\n        @Override\n        public String toString() {\n            return original;\n        }\n    }\n\n    public static void main(String[] args) {\n        String[] input = {\"H8\", \"S3\", \"D1\", \"C5\", \"H3\", \"D9\", \"S1\"};\n        Card[] cards = new Card[input.length];\n        for (int i = 0; i < input.length; i++) {\n            cards[i] = new Card(input[i]);\n        }\n\n        // Bubble Sort\n        Card[] bubbleSorted = Arrays.copyOf(cards, cards.length);\n        bubbleSort(bubbleSorted);\n        System.out.println(\"Bubble Sort Result: \" + Arrays.toString(bubbleSorted));\n        System.out.println(\"Stable: \" + isStable(cards, bubbleSorted));\n\n        // Selection Sort\n        Card[] selectionSorted = Arrays.copyOf(cards, cards.length);\n        selectionSort(selectionSorted);\n        System.out.println(\"Selection Sort Result: \" + Arrays.toString(selectionSorted));\n        System.out.println(\"Stable: \" + isStable(cards, selectionSorted));\n    }\n\n    static void bubbleSort(Card[] arr) {\n        int n = arr.length;\n        for (int i = 0; i < n - 1; i++) {\n            for (int j = 0; j < n - i - 1; j++) {\n                if (arr[j].value > arr[j + 1].value) {\n                    Card temp = arr[j];\n                    arr[j] = arr[j + 1];\n                    arr[j + 1] = temp;\n                }\n            }\n        }\n    }\n\n    static void selectionSort(Card[] arr) {\n        int n = arr.length;\n        for (int i = 0; i < n - 1; i++) {\n            int minIdx = i;\n            for (int j = i + 1; j < n; j++) {\n                if (arr[j].value < arr[minIdx].value) {\n                    minIdx = j;\n                }\n            }\n            Card temp = arr[minIdx];\n            arr[minIdx] = arr[i];\n            arr[i] = temp;\n        }\n    }\n\n    static boolean isStable(Card[] original, Card[] sorted) {\n        for (int i = 0; i < sorted.length; i++) {\n            for (int j = i + 1; j < sorted.length; j++) {\n                if (sorted[i].value == sorted[j].value) {\n                    int originalI = -1, originalJ = -1;\n                    for (int k = 0; k < original.length; k++) {\n                        if (original[k].equals(sorted[i])) originalI = k;\n                        if (original[k].equals(sorted[j])) originalJ = k;\n                    }\n                    if (originalI > originalJ) return false;\n                }\n            }\n        }\n        return true;\n    }\n}",
    "timestamp": "2025-08-05 22:11:42"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class CardSorting {\n    static class Card {\n        String suit;\n        int value;\n        String original;\n\n        Card(String card) {\n            this.original = card;\n            this.suit = card.substring(0, 1);\n            this.value = Integer.parseInt(card.substring(1));\n        }\n\n        public String toString() {\n            return original;\n        }\n    }\n\n    public static void bubbleSort(Card[] cards) {\n        int n = cards.length;\n        for (int i = 0; i < n - 1; i++) {\n            for (int j = 0; j < n - i - 1; j++) {\n                if (cards[j].value > cards[j + 1].value) {\n                    Card temp = cards[j];\n                    cards[j] = cards[j + 1];\n                    cards[j + 1] = temp;\n                }\n            }\n        }\n    }\n\n    public static void selectionSort(Card[] cards) {\n        int n = cards.length;\n        for (int i = 0; i < n - 1; i++) {\n            int minIndex = i;\n            for (int j = i + 1; j < n; j++) {\n                if (cards[j].value < cards[minIndex].value) {\n                    minIndex = j;\n                }\n            }\n            Card temp = cards[minIndex];\n            cards[minIndex] = cards[i];\n            cards[i] = temp;\n        }\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        Card[] bubbleCards = new Card[n];\n        Card[] selectionCards = new Card[n];\n\n        for (int i = 0; i < n; i++) {\n            String card = scanner.next();\n            bubbleCards[i] = new Card(card);\n            selectionCards[i] = new Card(card);\n        }\n\n        bubbleSort(bubbleCards);\n        selectionSort(selectionCards);\n\n        System.out.println(\"Bubble Sort:\");\n        for (Card card : bubbleCards) {\n            System.out.print(card + \" \");\n        }\n        System.out.println(\"\\nBubble Sort is stable\");\n\n        System.out.println(\"\\nSelection Sort:\");\n        for (Card card : selectionCards) {\n            System.out.print(card + \" \");\n        }\n        System.out.println(\"\\nSelection Sort is not stable\");\n\n        scanner.close();\n    }\n}",
    "timestamp": "2025-08-05 22:11:50"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nclass Card {\npublic:\n    string card;\n    int value;\n    int originalIndex;\n\n    Card(string c, int v, int idx) : card(c), value(v), originalIndex(idx) {}\n};\n\nvoid bubbleSort(vector<Card>& cards) {\n    int n = cards.size();\n    for (int i = 0; i < n - 1; i++) {\n        for (int j = 0; j < n - i - 1; j++) {\n            if (cards[j].value > cards[j + 1].value) {\n                swap(cards[j], cards[j + 1]);\n            }\n        }\n    }\n}\n\nvoid selectionSort(vector<Card>& cards) {\n    int n = cards.size();\n    for (int i = 0; i < n - 1; i++) {\n        int minIndex = i;\n        for (int j = i + 1; j < n; j++) {\n            if (cards[j].value < cards[minIndex].value) {\n                minIndex = j;\n            }\n        }\n        swap(cards[i], cards[minIndex]);\n    }\n}\n\nvoid printCards(const vector<Card>& cards) {\n    for (const Card& card : cards) {\n        cout << card.card << \" \";\n    }\n    cout << endl;\n}\n\nint main() {\n    int n;\n    cin >> n;\n    \n    vector<Card> bubbleCards, selectionCards;\n    \n    for (int i = 0; i < n; i++) {\n        string cardStr;\n        cin >> cardStr;\n        int value = cardStr[1] - '0';\n        bubbleCards.push_back(Card(cardStr, value, i));\n        selectionCards.push_back(Card(cardStr, value, i));\n    }\n\n    // Bubble Sort\n    bubbleSort(bubbleCards);\n    cout << \"Bubble Sort:\" << endl;\n    printCards(bubbleCards);\n    \n    // Selection Sort\n    selectionSort(selectionCards);\n    cout << \"Selection Sort:\" << endl;\n    printCards(selectionCards);\n\n    return 0;\n}",
    "timestamp": "2025-08-05 22:12:04"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def bubble_sort(cards):\n    n = len(cards)\n    stable = True\n    for i in range(n):\n        for j in range(n - 1, i, -1):\n            if int(cards[j][1]) < int(cards[j - 1][1]):\n                cards[j], cards[j - 1] = cards[j - 1], cards[j]\n                stable = False\n            elif int(cards[j][1]) == int(cards[j - 1][1]):\n                stable = stable and (cards.index(cards[j - 1]) < cards.index(cards[j]))\n    return cards, stable\n\ndef selection_sort(cards):\n    n = len(cards)\n    stable = True\n    for i in range(n):\n        minj = i\n        for j in range(i, n):\n            if int(cards[j][1]) < int(cards[minj][1]):\n                minj = j\n        if cards[i] != cards[minj]:\n            cards[i], cards[minj] = cards[minj], cards[i]\n            stable = False\n        elif int(cards[i][1]) == int(cards[minj][1]):\n            stable = stable and (cards.index(cards[i]) < cards.index(cards[minj]))\n    return cards, stable\n\n# Example usage\ncards_input = [\"D1\", \"H3\", \"C3\", \"S4\", \"C8\", \"H8\"]\nsorted_bubble, bubble_stable = bubble_sort(cards_input.copy())\nsorted_selection, selection_stable = selection_sort(cards_input.copy())\n\nprint(\"Bubble Sort Result:\", sorted_bubble)\nprint(\"Bubble Sort Stable:\", bubble_stable)\nprint(\"Selection Sort Result:\", sorted_selection)\nprint(\"Selection Sort Stable:\", selection_stable)",
    "timestamp": "2025-08-13 09:22:49"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "java",
    "code": "import java.util.*;\n\npublic class CardSorting {\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        String[] cards = new String[n];\n        \n        for (int i = 0; i < n; i++) {\n            cards[i] = scanner.next();\n        }\n        \n        String[] bubbleSorted = bubbleSort(cards.clone());\n        String[] selectionSorted = selectionSort(cards.clone());\n        \n        System.out.println(String.join(\" \", bubbleSorted));\n        System.out.println(\"Stable\");\n        \n        System.out.println(String.join(\" \", selectionSorted));\n        \n        if (Arrays.equals(bubbleSorted, selectionSorted)) {\n            System.out.println(\"Stable\");\n        } else {\n            System.out.println(\"Not stable\");\n        }\n        \n        scanner.close();\n    }\n    \n    static String[] bubbleSort(String[] cards) {\n        int n = cards.length;\n        boolean swapped;\n        for (int i = 0; i < n - 1; i++) {\n            swapped = false;\n            for (int j = n - 1; j > i; j--) {\n                if (getValue(cards[j - 1]) > getValue(cards[j])) {\n                    swap(cards, j - 1, j);\n                    swapped = true;\n                }\n            }\n            if (!swapped) break;\n        }\n        return cards;\n    }\n    \n    static String[] selectionSort(String[] cards) {\n        int n = cards.length;\n        for (int i = 0; i < n; i++) {\n            int minIndex = i;\n            for (int j = i + 1; j < n; j++) {\n                if (getValue(cards[j]) < getValue(cards[minIndex])) {\n                    minIndex = j;\n                }\n            }\n            if (i != minIndex) {\n                swap(cards, i, minIndex);\n            }\n        }\n        return cards;\n    }\n    \n    static void swap(String[] cards, int i, int j) {\n        String temp = cards[i];\n        cards[i] = cards[j];\n        cards[j] = temp;\n    }\n    \n    static int getValue(String card) {\n        return card.charAt(1) - '0';\n    }\n}",
    "timestamp": "2025-08-13 09:22:56"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c",
    "code": "#include <stdio.h>\n#include <string.h>\n\n#define MAX 100\n\ntypedef struct {\n    char suit;\n    int value;\n} Card;\n\n// Function to print cards\nvoid printCards(Card cards[], int n) {\n    for (int i = 0; i < n; i++) {\n        printf(\"%c%d\", cards[i].suit, cards[i].value);\n        if (i != n - 1) printf(\" \");\n    }\n    printf(\"\\n\");\n}\n\n// Bubble Sort\nvoid bubbleSort(Card cards[], int n) {\n    Card temp;\n    for (int i = 0; i < n; i++) {\n        for (int j = n - 1; j > i; j--) {\n            if (cards[j].value < cards[j - 1].value) {\n                temp = cards[j];\n                cards[j] = cards[j - 1];\n                cards[j - 1] = temp;\n            }\n        }\n    }\n}\n\n// Selection Sort\nvoid selectionSort(Card cards[], int n) {\n    Card temp;\n    for (int i = 0; i < n; i++) {\n        int minj = i;\n        for (int j = i; j < n; j++) {\n            if (cards[j].value < cards[minj].value) {\n                minj = j;\n            }\n        }\n        if (i != minj) {\n            temp = cards[i];\n            cards[i] = cards[minj];\n            cards[minj] = temp;\n        }\n    }\n}\n\n// Check stability\nint isStable(Card original[], Card sorted[], int n) {\n    for (int i = 0; i < n - 1; i++) {\n        for (int j = i + 1; j < n; j++) {\n            for (int a = 0; a < n - 1; a++) {\n                for (int b = a + 1; b < n; b++) {\n                    if (original[i].value == original[j].value && original[i].value == sorted[a].value && original[j].value == sorted[b].value && i < j && a > b) {\n                        return 0; // Not stable\n                    }\n                }\n            }\n        }\n    }\n    return 1; // Stable\n}\n\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    Card original[MAX], bubble[MAX], selection[MAX];\n\n    for (int i = 0; i < n; i++) {\n        char suit;\n        int value;\n        scanf(\" %c%d\", &suit, &value);\n        original[i].suit = suit;\n        original[i].value = value;\n        bubble[i] = original[i];\n        selection[i] = original[i];\n    }\n\n    bubbleSort(bubble, n);\n    selectionSort(selection, n);\n\n    printCards(bubble, n);\n    printf(isStable(original, bubble, n) ? \"Stable\\n\" : \"Not stable\\n\");\n\n    printCards(selection, n);\n    printf(isStable(original, selection, n) ? \"Stable\\n\" : \"Not stable\\n\");\n\n    return 0;\n}",
    "timestamp": "2025-08-13 09:23:07"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def compare_cards(card1, card2):\n    return int(card1[1:]) - int(card2[1:])\n\ndef bubble_sort(cards):\n    n = len(cards)\n    for i in range(n):\n        for j in range(0, n - i - 1):\n            if compare_cards(cards[j], cards[j + 1]) > 0:\n                cards[j], cards[j + 1] = cards[j + 1], cards[j]\n    return cards\n\ndef selection_sort(cards):\n    n = len(cards)\n    for i in range(n):\n        min_idx = i\n        for j in range(i + 1, n):\n            if compare_cards(cards[j], cards[min_idx]) < 0:\n                min_idx = j\n        cards[i], cards[min_idx] = cards[min_idx], cards[i]\n    return cards\n\ndef main():\n    # Input cards\n    cards = input().split()\n\n    # Bubble Sort\n    bubble_sorted = bubble_sort(cards.copy())\n    print(\"Bubble Sort:\", \" \".join(bubble_sorted))\n\n    # Selection Sort\n    selection_sorted = selection_sort(cards.copy())\n    print(\"Selection Sort:\", \" \".join(selection_sorted))\n\nif __name__ == \"__main__\":\n    main()",
    "timestamp": "2025-08-13 09:23:19"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def bubble_sort(cards):\n    n = len(cards)\n    for i in range(n):\n        for j in range(n - 1, i, -1):\n            if cards[j][1] < cards[j - 1][1]:\n                cards[j], cards[j - 1] = cards[j - 1], cards[j]\n    return cards\n\ndef selection_sort(cards):\n    n = len(cards)\n    for i in range(n):\n        min_idx = i\n        for j in range(i + 1, n):\n            if cards[j][1] < cards[min_idx][1]:\n                min_idx = j\n        cards[i], cards[min_idx] = cards[min_idx], cards[i]\n    return cards\n\ndef check_stability(original, sorted_cards):\n    positions_original = {}\n    positions_sorted = {}\n    \n    for idx, card in enumerate(original):\n        value = card[1]\n        if value not in positions_original:\n            positions_original[value] = []\n        positions_original[value].append((card, idx))\n    \n    for idx, card in enumerate(sorted_cards):\n        value = card[1]\n        if value not in positions_sorted:\n            positions_sorted[value] = []\n        positions_sorted[value].append((card, idx))\n    \n    for value in positions_original:\n        if value in positions_sorted:\n            original_order = [card[0] for card, pos in positions_original[value]]\n            sorted_order = [card[0] for card, pos in positions_sorted[value]]\n            if original_order != sorted_order:\n                return \"Not stable\"\n    return \"Stable\"\n\n# Read input\nn = int(input())\ncards = input().split()\n\n# Bubble Sort\nbubble_sorted = bubble_sort(cards.copy())\nprint(' '.join(bubble_sorted))\nprint(check_stability(cards, bubble_sorted))\n\n# Selection Sort\nselection_sorted = selection_sort(cards.copy())\nprint(' '.join(selection_sorted))\nprint(check_stability(cards, selection_sorted))",
    "timestamp": "2025-08-13 09:23:35"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nvoid bubbleSort(vector<string>& cards) {\n    int n = cards.size();\n    for (int i = 0; i < n; ++i) {\n        for (int j = n - 1; j > i; --j) {\n            if (cards[j-1][1] > cards[j][1]) {\n                swap(cards[j-1], cards[j]);\n            }\n        }\n    }\n}\n\nvoid selectionSort(vector<string>& cards) {\n    int n = cards.size();\n    for (int i = 0; i < n; ++i) {\n        int minIdx = i;\n        for (int j = i; j < n; ++j) {\n            if (cards[j][1] < cards[minIdx][1]) {\n                minIdx = j;\n            }\n        }\n        swap(cards[i], cards[minIdx]);\n    }\n}\n\nvoid printCards(const vector<string>& cards) {\n    for (int i = 0; i < cards.size(); ++i) {\n        if (i > 0) cout << \" \";\n        cout << cards[i];\n    }\n    cout << endl;\n}\n\nbool isStable(const vector<string>& original, const vector<string>& sorted) {\n    vector<pair<char, string>> originalValIdx, sortedValIdx;\n    for (auto& card : original) {\n        originalValIdx.push_back({card[1], card});\n    }\n    for (auto& card : sorted) {\n        sortedValIdx.push_back({card[1], card});\n    }\n    stable_sort(originalValIdx.begin(), originalValIdx.end());\n    stable_sort(sortedValIdx.begin(), sortedValIdx.end());\n\n    return originalValIdx == sortedValIdx;\n}\n\nint main() {\n    int n;\n    cin >> n;\n    vector<string> cards(n), cardsCopy;\n    \n    for (int i = 0; i < n; ++i) {\n        cin >> cards[i];\n    }\n    \n    cardsCopy = cards;\n    \n    // Bubble Sort\n    bubbleSort(cards);\n    printCards(cards);\n    cout << (isStable(cardsCopy, cards) ? \"Stable\" : \"Not stable\") << endl;\n    \n    cards = cardsCopy;\n    \n    // Selection Sort\n    selectionSort(cards);\n    printCards(cards);\n    cout << (isStable(cardsCopy, cards) ? \"Stable\" : \"Not stable\") << endl;\n    \n    return 0;\n}",
    "timestamp": "2025-08-13 11:51:07"
  }
]