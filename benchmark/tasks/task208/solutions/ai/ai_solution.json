[
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nchar matrix[MAX_SIZE][MAX_SIZE];\nint visited[MAX_SIZE][MAX_SIZE];\nint rows, cols;\nchar max_num[MAX_SIZE * MAX_SIZE];\nchar current_num[MAX_SIZE * MAX_SIZE];\n\nvoid dfs(int i, int j, int pos) {\n    if (i < 0 || i >= rows || j < 0 || j >= cols || visited[i][j] || !isdigit(matrix[i][j])) {\n        return;\n    }\n    \n    current_num[pos] = matrix[i][j];\n    current_num[pos + 1] = '\\0';\n    \n    if (strlen(current_num) > strlen(max_num) || \n        (strlen(current_num) == strlen(max_num) && strcmp(current_num, max_num) > 0)) {\n        strcpy(max_num, current_num);\n    }\n    \n    visited[i][j] = 1;\n    \n    dfs(i, j + 1, pos + 1);\n    dfs(i + 1, j, pos + 1);\n    \n    visited[i][j] = 0;\n}\n\nvoid find_secret_number() {\n    strcpy(max_num, \"\");\n    for (int i = 0; i < rows; i++) {\n        for (int j = 0; j < cols; j++) {\n            if (isdigit(matrix[i][j])) {\n                strcpy(current_num, \"\");\n                dfs(i, j, 0);\n            }\n        }\n    }\n    \n    // Remove leading zeros\n    char *ptr = max_num;\n    while (*ptr == '0' && *(ptr + 1) != '\\0') {\n        ptr++;\n    }\n    printf(\"%s\\n\", ptr);\n}\n\nint main() {\n    while (1) {\n        scanf(\"%d %d\", &rows, &cols);\n        if (rows == 0 && cols == 0) {\n            break;\n        }\n        \n        for (int i = 0; i < rows; i++) {\n            scanf(\"%s\", matrix[i]);\n        }\n        \n        memset(visited, 0, sizeof(visited));\n        find_secret_number();\n    }\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 19:05:28"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class SecretNumberFinder {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        \n        while (scanner.hasNextInt()) {\n            int rows = scanner.nextInt();\n            int cols = scanner.nextInt();\n            \n            if (rows == 0 && cols == 0) break;\n            \n            char[][] matrix = new char[rows][cols];\n            \n            for (int i = 0; i < rows; i++) {\n                String row = scanner.next();\n                for (int j = 0; j < cols; j++) {\n                    matrix[i][j] = row.charAt(j);\n                }\n            }\n            \n            long maxNumber = findSecretNumber(matrix);\n            System.out.println(maxNumber);\n        }\n        \n        scanner.close();\n    }\n    \n    private static long findSecretNumber(char[][] matrix) {\n        long maxNumber = 0;\n        int rows = matrix.length;\n        int cols = matrix[0].length;\n        \n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                maxNumber = Math.max(maxNumber, findHorizontalNumber(matrix, i, j));\n                maxNumber = Math.max(maxNumber, findVerticalNumber(matrix, i, j));\n            }\n        }\n        \n        return maxNumber;\n    }\n    \n    private static long findHorizontalNumber(char[][] matrix, int startRow, int startCol) {\n        long maxNumber = 0;\n        int rows = matrix.length;\n        int cols = matrix[0].length;\n        \n        for (int j = startCol; j < cols; j++) {\n            if (!Character.isDigit(matrix[startRow][j])) break;\n            \n            long currentNumber = 0;\n            for (int k = j; k < cols; k++) {\n                if (!Character.isDigit(matrix[startRow][k])) break;\n                \n                currentNumber = currentNumber * 10 + (matrix[startRow][k] - '0');\n                maxNumber = Math.max(maxNumber, currentNumber);\n            }\n        }\n        \n        return maxNumber;\n    }\n    \n    private static long findVerticalNumber(char[][] matrix, int startRow, int startCol) {\n        long maxNumber = 0;\n        int rows = matrix.length;\n        int cols = matrix[0].length;\n        \n        for (int i = startRow; i < rows; i++) {\n            if (!Character.isDigit(matrix[i][startCol])) break;\n            \n            long currentNumber = 0;\n            for (int k = i; k < rows; k++) {\n                if (!Character.isDigit(matrix[k][startCol])) break;\n                \n                currentNumber = currentNumber * 10 + (matrix[k][startCol] - '0');\n                maxNumber = Math.max(maxNumber, currentNumber);\n            }\n        }\n        \n        return maxNumber;\n    }\n}",
    "timestamp": "2025-08-05 19:05:38"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nvector<string> matrix;\nvector<vector<bool>> visited;\nstring current;\nstring max_num;\n\nvoid dfs(int i, int j) {\n    if (i < 0 || i >= matrix.size() || j < 0 || j >= matrix[0].size() || visited[i][j]) {\n        return;\n    }\n    char c = matrix[i][j];\n    if (!isdigit(c)) {\n        return;\n    }\n    visited[i][j] = true;\n    current.push_back(c);\n    if (current.length() > max_num.length() || (current.length() == max_num.length() && current > max_num)) {\n        max_num = current;\n    }\n    dfs(i, j + 1);\n    dfs(i + 1, j);\n    visited[i][j] = false;\n    current.pop_back();\n}\n\nstring find_secret_number() {\n    max_num = \"\";\n    int rows = matrix.size();\n    if (rows == 0) return \"0\";\n    int cols = matrix[0].size();\n    visited.assign(rows, vector<bool>(cols, false));\n    for (int i = 0; i < rows; ++i) {\n        for (int j = 0; j < cols; ++j) {\n            if (isdigit(matrix[i][j])) {\n                dfs(i, j);\n            }\n        }\n    }\n    if (max_num.empty()) return \"0\";\n    // Remove leading zeros\n    size_t non_zero = max_num.find_first_not_of('0');\n    if (non_zero == string::npos) {\n        return \"0\";\n    }\n    return max_num.substr(non_zero);\n}\n\nint main() {\n    int rows, cols;\n    while (cin >> rows >> cols) {\n        if (rows == 0 && cols == 0) break;\n        matrix.resize(rows);\n        for (int i = 0; i < rows; ++i) {\n            cin >> matrix[i];\n        }\n        string secret = find_secret_number();\n        cout << secret << endl;\n    }\n    return 0;\n}",
    "timestamp": "2025-08-05 19:06:00"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\n#define MAX_SIZE 100\n\nvoid findSecretNumber(char matrix[MAX_SIZE][MAX_SIZE], int rows, int cols) {\n    char largestNumber[MAX_SIZE * MAX_SIZE + 1] = {0};\n    char currentNumber[MAX_SIZE * MAX_SIZE + 1] = {0};\n    int numberLen = 0;\n\n    // Horizontal sequences\n    for (int i = 0; i < rows; i++) {\n        numberLen = 0;\n        memset(currentNumber, 0, sizeof(currentNumber));\n        \n        for (int j = 0; j < cols; j++) {\n            if (matrix[i][j] >= '0' && matrix[i][j] <= '9') {\n                currentNumber[numberLen++] = matrix[i][j];\n            } else {\n                if (numberLen > 0) {\n                    if (strcmp(currentNumber, largestNumber) > 0) {\n                        strcpy(largestNumber, currentNumber);\n                    }\n                    numberLen = 0;\n                    memset(currentNumber, 0, sizeof(currentNumber));\n                }\n            }\n        }\n        \n        if (numberLen > 0 && strcmp(currentNumber, largestNumber) > 0) {\n            strcpy(largestNumber, currentNumber);\n        }\n    }\n\n    // Vertical sequences\n    for (int j = 0; j < cols; j++) {\n        numberLen = 0;\n        memset(currentNumber, 0, sizeof(currentNumber));\n        \n        for (int i = 0; i < rows; i++) {\n            if (matrix[i][j] >= '0' && matrix[i][j] <= '9') {\n                currentNumber[numberLen++] = matrix[i][j];\n            } else {\n                if (numberLen > 0) {\n                    if (strcmp(currentNumber, largestNumber) > 0) {\n                        strcpy(largestNumber, currentNumber);\n                    }\n                    numberLen = 0;\n                    memset(currentNumber, 0, sizeof(currentNumber));\n                }\n            }\n        }\n        \n        if (numberLen > 0 && strcmp(currentNumber, largestNumber) > 0) {\n            strcpy(largestNumber, currentNumber);\n        }\n    }\n\n    // Remove leading zeros\n    int start = 0;\n    while (largestNumber[start] == '0') {\n        start++;\n    }\n    \n    if (start == strlen(largestNumber)) {\n        printf(\"0\\n\");\n    } else {\n        printf(\"%s\\n\", largestNumber + start);\n    }\n}\n\nint main() {\n    int datasets;\n    scanf(\"%d\", &datasets);\n\n    for (int d = 0; d < datasets; d++) {\n        int rows, cols;\n        scanf(\"%d %d\", &rows, &cols);\n        \n        char matrix[MAX_SIZE][MAX_SIZE];\n        for (int i = 0; i < rows; i++) {\n            scanf(\"%s\", matrix[i]);\n        }\n\n        findSecretNumber(matrix, rows, cols);\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-05 19:06:10"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\nint findLargestNumber(vector<string>& matrix) {\n    int rows = matrix.size();\n    int cols = matrix[0].length();\n    int maxNum = 0;\n\n    // Horizontal checks\n    for (int r = 0; r < rows; r++) {\n        string current = \"\";\n        for (int c = 0; c < cols; c++) {\n            if (isdigit(matrix[r][c])) {\n                current += matrix[r][c];\n            } else {\n                if (!current.empty()) {\n                    maxNum = max(maxNum, stoi(current));\n                    current = \"\";\n                }\n            }\n        }\n        if (!current.empty()) {\n            maxNum = max(maxNum, stoi(current));\n        }\n    }\n\n    // Vertical checks\n    for (int c = 0; c < cols; c++) {\n        string current = \"\";\n        for (int r = 0; r < rows; r++) {\n            if (isdigit(matrix[r][c])) {\n                current += matrix[r][c];\n            } else {\n                if (!current.empty()) {\n                    maxNum = max(maxNum, stoi(current));\n                    current = \"\";\n                }\n            }\n        }\n        if (!current.empty()) {\n            maxNum = max(maxNum, stoi(current));\n        }\n    }\n\n    return maxNum;\n}\n\nint main() {\n    int T;\n    cin >> T;\n\n    for (int t = 0; t < T; t++) {\n        int rows, cols;\n        cin >> rows >> cols;\n\n        vector<string> matrix(rows);\n        for (int r = 0; r < rows; r++) {\n            cin >> matrix[r];\n        }\n\n        cout << findLargestNumber(matrix) << endl;\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-05 19:06:17"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.Scanner;\n\npublic class SecretNumberFinder {\n    private static int maxNumber = 0;\n    private static int rows, cols;\n    private static char[][] matrix;\n    private static boolean[][] visited;\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        while (scanner.hasNext()) {\n            rows = scanner.nextInt();\n            cols = scanner.nextInt();\n            if (rows == 0 && cols == 0) break;\n            \n            matrix = new char[rows][cols];\n            visited = new boolean[rows][cols];\n            maxNumber = 0;\n            \n            for (int i = 0; i < rows; i++) {\n                String line = scanner.next();\n                for (int j = 0; j < cols; j++) {\n                    matrix[i][j] = line.charAt(j);\n                }\n            }\n            \n            for (int i = 0; i < rows; i++) {\n                for (int j = 0; j < cols; j++) {\n                    if (Character.isDigit(matrix[i][j])) {\n                        dfs(i, j, 0);\n                    }\n                }\n            }\n            System.out.println(maxNumber);\n        }\n        scanner.close();\n    }\n\n    private static void dfs(int i, int j, int current) {\n        if (i < 0 || i >= rows || j < 0 || j >= cols || visited[i][j] || !Character.isDigit(matrix[i][j])) {\n            return;\n        }\n        \n        visited[i][j] = true;\n        current = current * 10 + (matrix[i][j] - '0');\n        if (current > maxNumber) {\n            maxNumber = current;\n        }\n        \n        dfs(i + 1, j, current);\n        dfs(i, j + 1, current);\n        \n        visited[i][j] = false;\n    }\n}",
    "timestamp": "2025-08-05 19:06:36"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def find_largest_number(matrix):\n    def dfs(x, y, current_number):\n        nonlocal max_number\n        if (x < 0 or x >= len(matrix) or \n            y < 0 or y >= len(matrix[0]) or \n            not matrix[x][y].isdigit() or (x, y) in visited):\n            return\n        visited.add((x, y))\n        current_number += matrix[x][y]\n        max_number = max(max_number, int(current_number))\n        # Move right\n        dfs(x, y + 1, current_number)\n        # Move down\n        dfs(x + 1, y, current_number)\n        visited.remove((x, y))\n\n    max_number = 0\n    visited = set()\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if matrix[i][j].isdigit():\n                dfs(i, j, \"\")\n    return max_number\n\ndef main():\n    datasets = int(input().strip())\n    for _ in range(datasets):\n        rows, cols = map(int, input().strip().split())\n        matrix = [input().strip() for _ in range(rows)]\n        print(find_largest_number(matrix))\n\nmain()",
    "timestamp": "2025-08-13 02:26:16"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "java",
    "code": "import java.util.Scanner;\n\npublic class SecretNumberFinder {\n    private static int rows, cols;\n    private static char[][] grid;\n    private static boolean[][] visited;\n    private static String maxSecretNumber;\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        while (scanner.hasNextInt()) {\n            rows = scanner.nextInt();\n            cols = scanner.nextInt();\n            grid = new char[rows][cols];\n            visited = new boolean[rows][cols];\n            maxSecretNumber = \"\";\n\n            // Read the grid\n            for (int i = 0; i < rows; i++) {\n                String line = scanner.next();\n                grid[i] = line.toCharArray();\n            }\n\n            // Find max number\n            for (int i = 0; i < rows; i++) {\n                for (int j = 0; j < cols; j++) {\n                    if (Character.isDigit(grid[i][j]) && grid[i][j] != '0') {\n                        dfs(i, j, new StringBuilder());\n                    }\n                }\n            }\n\n            // Output result\n            System.out.println(maxSecretNumber.isEmpty() ? \"0\" : maxSecretNumber);\n        }\n        scanner.close();\n    }\n\n    private static void dfs(int row, int col, StringBuilder current) {\n        visited[row][col] = true;\n        current.append(grid[row][col]);\n\n        int[] rowOffsets = {0, 1};\n        int[] colOffsets = {1, 0};\n\n        for (int d = 0; d < 2; d++) {\n            int newRow = row + rowOffsets[d];\n            int newCol = col + colOffsets[d];\n\n            if (isValid(newRow, newCol) && Character.isDigit(grid[newRow][newCol])) {\n                dfs(newRow, newCol, current);\n            }\n        }\n\n        if (current.length() > 0 && leadingZeroSuppressedAndGreater(current.toString())) {\n            maxSecretNumber = current.toString();\n        }\n        \n        current.deleteCharAt(current.length() - 1);\n        visited[row][col] = false;\n    }\n\n    private static boolean isValid(int newRow, int newCol) {\n        return newRow >= 0 && newRow < rows && newCol >= 0 && newCol < cols && !visited[newRow][newCol];\n    }\n\n    private static boolean leadingZeroSuppressedAndGreater(String number) {\n        String suppressed = number.replaceFirst(\"^0+(?!$)\", \"\");\n        return suppressed.compareTo(maxSecretNumber) > 0;\n    }\n}",
    "timestamp": "2025-08-13 02:26:45"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <ctype.h>\n#include <string.h>\n\n#define MAX_ROWS 100\n#define MAX_COLS 100\n\nchar matrix[MAX_ROWS][MAX_COLS];\nint rows, cols;\nchar visited[MAX_ROWS][MAX_COLS];\n\nvoid find_max_number(char* current_num, int x, int y, char* max_num) {\n    if (x < 0 || x >= rows || y < 0 || y >= cols || visited[x][y] || !isdigit(matrix[x][y])) {\n        return;\n    }\n    \n    size_t len = strlen(current_num);\n    current_num[len] = matrix[x][y];\n    current_num[len + 1] = '\\0';\n    \n    if (atoi(current_num) > atoi(max_num)) {\n        strcpy(max_num, current_num);\n    }\n    \n    visited[x][y] = 1;\n    \n    find_max_number(current_num, x + 1, y, max_num);\n    find_max_number(current_num, x - 1, y, max_num);\n    find_max_number(current_num, x, y + 1, max_num);\n    find_max_number(current_num, x, y - 1, max_num);\n    \n    visited[x][y] = 0;\n    current_num[len] = '\\0';\n}\n\nchar* get_largest_number() {\n    char max_num[1024] = \"0\";\n    char current_num[1024];\n\n    memset(visited, 0, sizeof(visited));\n    \n    for (int i = 0; i < rows; i++) {\n        for (int j = 0; j < cols; j++) {\n            if (isdigit(matrix[i][j])) {\n                memset(current_num, 0, sizeof(current_num));\n                find_max_number(current_num, i, j, max_num);\n            }\n        }\n    }\n    \n    return max_num;\n}\n\nint main() {\n    while (scanf(\"%d %d\", &rows, &cols) == 2) {\n        for (int i = 0; i < rows; i++) {\n            scanf(\"%s\", matrix[i]);\n        }\n        \n        char* secret_number = get_largest_number();\n        printf(\"%s\\n\", secret_number);\n    }\n    \n    return 0;\n}",
    "timestamp": "2025-08-13 02:26:51"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def find_secret_number(matrix):\n    rows, cols = len(matrix), len(matrix[0])\n    max_num = 0\n\n    # Check horizontal sequences\n    for r in range(rows):\n        current_num = 0\n        for c in range(cols):\n            if matrix[r][c].isdigit():\n                current_num = current_num * 10 + int(matrix[r][c])\n                max_num = max(max_num, current_num)\n            else:\n                current_num = 0\n\n    # Check vertical sequences\n    for c in range(cols):\n        current_num = 0\n        for r in range(rows):\n            if matrix[r][c].isdigit():\n                current_num = current_num * 10 + int(matrix[r][c])\n                max_num = max(max_num, current_num)\n            else:\n                current_num = 0\n\n    return max_num\n\ndef main():\n    while True:\n        # Read matrix dimensions\n        try:\n            rows, cols = map(int, input().split())\n        except EOFError:\n            break\n\n        # Read matrix\n        matrix = []\n        for _ in range(rows):\n            matrix.append(list(input().strip()))\n\n        # Find and print secret number\n        print(find_secret_number(matrix))\n\nif __name__ == \"__main__\":\n    main()",
    "timestamp": "2025-08-13 02:27:01"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "import sys\n\ndef solve():\n    while True:\n        line = sys.stdin.readline()\n        if not line:\n            break\n        H, W = map(int, line.strip().split())\n        if H == 0 and W == 0:\n            break\n        grid = []\n        for _ in range(H):\n            row = sys.stdin.readline().strip()\n            grid.append(row)\n        \n        visited = [[False for _ in range(W)] for _ in range(H)]\n        max_num = \"\"\n        \n        def dfs(i, j, current):\n            nonlocal max_num\n            visited[i][j] = True\n            current += grid[i][j]\n            \n            if len(current) > len(max_num) or (len(current) == len(max_num) and current > max_num):\n                max_num = current\n            \n            # Right\n            if j + 1 < W and grid[i][j+1].isdigit() and not visited[i][j+1]:\n                dfs(i, j+1, current)\n            # Down\n            if i + 1 < H and grid[i+1][j].isdigit() and not visited[i+1][j]:\n                dfs(i+1, j, current)\n            \n            visited[i][j] = False\n        \n        for i in range(H):\n            for j in range(W):\n                if grid[i][j].isdigit() and grid[i][j] != '0':\n                    dfs(i, j, \"\")\n        \n        # Handle leading zeros in the max_num (though dfs starts with non-zero)\n        # Also handle cases where all digits are zero\n        if not max_num:\n            # Check if there's any '0' in the grid\n            has_zero = any('0' in row for row in grid)\n            if has_zero:\n                max_num = \"0\"\n        print(max_num if max_num else \"0\")\n\nsolve()",
    "timestamp": "2025-08-13 02:27:19"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nint rows, cols;\nvector<string> matrix;\n\n// Directions for right and down\nint dx[] = {0, 1};\nint dy[] = {1, 0};\n\nbool isDigit(char ch) {\n    return ch >= '0' && ch <= '9';\n}\n\nvoid findLargestNumber(int x, int y, string current, string &largest) {\n    // Add the current character to the number if it's a digit\n    if (isDigit(matrix[x][y])) {\n        current += matrix[x][y];\n    } else {\n        // If we hit a letter, compare and reset current\n        if (!current.empty()) {\n            if (current[0] != '0') {\n                unique(largest.begin(), largest.end());\n                if (stoll(current) > stoll(largest)) {\n                    largest = current;\n                }\n            }\n            current = \"\";\n        }\n    }\n\n    // Check if the current sequence forms the largest number\n    if (current[0] != '0' && !current.empty()) {\n        if (stoll(current) > stoll(largest)) {\n            largest = current;\n        }\n    }\n\n    for (int dir = 0; dir < 2; ++dir) {\n        int nx = x + dx[dir];\n        int ny = y + dy[dir];\n        if (nx < rows && ny < cols && isDigit(matrix[nx][ny])) {\n            findLargestNumber(nx, ny, current, largest);\n        }\n    }\n}\n\nstring findSecretNumber() {\n    string largest = \"0\";\n    for (int i = 0; i < rows; ++i) {\n        for (int j = 0; j < cols; ++j) {\n            string current = \"\";\n            findLargestNumber(i, j, current, largest);\n        }\n    }\n    return largest;\n}\n\nint main() {\n    while (cin >> rows >> cols && rows > 0 && cols > 0) {\n        matrix.resize(rows);\n        for (int i = 0; i < rows; ++i) {\n            cin >> matrix[i];\n        }\n        cout << findSecretNumber() << endl;\n    }\n    return 0;\n}",
    "timestamp": "2025-08-13 11:05:55"
  }
]