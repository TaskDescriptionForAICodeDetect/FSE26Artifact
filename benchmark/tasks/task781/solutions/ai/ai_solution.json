[
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n\n#define MOD 1000000007\n\nlong long dp[101][4][4][4][2];\n\nint main() {\n    int N;\n    scanf(\"%d\", &N);\n\n    dp[0][3][3][3][0] = 1;\n\n    for (int i = 0; i < N; i++) {\n        for (int a = 0; a < 4; a++) {\n            for (int b = 0; b < 4; b++) {\n                for (int c = 0; c < 4; c++) {\n                    for (int last = 0; last < 2; last++) {\n                        if (dp[i][a][b][c][last] == 0) continue;\n\n                        for (int d = 0; d < 4; d++) {\n                            if (a == 0 && b == 1 && c == 2) continue;\n                            if (a == 0 && b == 2 && c == 1) continue;\n                            if (b == 0 && c == 1 && d == 2) continue;\n\n                            if (last == 0 || (a != 0 || b != 2 || c != 1)) {\n                                dp[i+1][b][c][d][last || (a == 0 && b == 1 && c == 2)] \n                                    = (dp[i+1][b][c][d][last || (a == 0 && b == 1 && c == 2)] \n                                    + dp[i][a][b][c][last]) % MOD;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    long long result = 0;\n    for (int a = 0; a < 4; a++) {\n        for (int b = 0; b < 4; b++) {\n            for (int c = 0; c < 4; c++) {\n                result = (result + dp[N][a][b][c][0] + dp[N][a][b][c][1]) % MOD;\n            }\n        }\n    }\n\n    printf(\"%lld\\n\", result);\n    return 0;\n}",
    "timestamp": "2025-08-05 22:53:15"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n\n#define MOD 1000000007\n#define MAX_N 100\n\nint dp[MAX_N + 1][4][4][4];\n\nint is_ok(int a, int b, int c, int d) {\n    // Check if any of the forbidden patterns appear\n    if ((b == 0 && c == 2 && d == 1) || // AGC\n        (b == 0 && c == 1 && d == 2) || // ACG\n        (b == 2 && c == 0 && d == 1) || // GAC\n        (a == 0 && c == 2 && d == 1) || // A*GC\n        (a == 0 && b == 2 && d == 1))   // AG*C\n        return 0;\n    return 1;\n}\n\nint solve(int N) {\n    memset(dp, 0, sizeof(dp));\n    // Initialize for N=3\n    for (int a = 0; a < 4; a++) {\n        for (int b = 0; b < 4; b++) {\n            for (int c = 0; c < 4; c++) {\n                if (is_ok(-1, a, b, c)) {\n                    dp[3][a][b][c] = 1;\n                }\n            }\n        }\n    }\n    for (int n = 4; n <= N; n++) {\n        for (int a = 0; a < 4; a++) {\n            for (int b = 0; b < 4; b++) {\n                for (int c = 0; c < 4; c++) {\n                    for (int d = 0; d < 4; d++) {\n                        if (is_ok(a, b, c, d)) {\n                            dp[n][b][c][d] += dp[n-1][a][b][c];\n                            if (dp[n][b][c][d] >= MOD) {\n                                dp[n][b][c][d] -= MOD;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    int ans = 0;\n    for (int a = 0; a < 4; a++) {\n        for (int b = 0; b < 4; b++) {\n            for (int c = 0; c < 4; c++) {\n                ans += dp[N][a][b][c];\n                if (ans >= MOD) {\n                    ans -= MOD;\n                }\n            }\n        }\n    }\n    return ans;\n}\n\nint main() {\n    int N;\n    scanf(\"%d\", &N);\n    if (N == 0) {\n        printf(\"0\\n\");\n        return 0;\n    } else if (N == 1) {\n        printf(\"4\\n\");\n        return 0;\n    } else if (N == 2) {\n        printf(\"16\\n\");\n        return 0;\n    }\n    printf(\"%d\\n\", solve(N));\n    return 0;\n}",
    "timestamp": "2025-08-05 22:53:44"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n\nconst int MOD = 1e9 + 7;\n\nbool isBad(const string &s) {\n    if (s.find(\"AGC\") != string::npos) return true;\n    for (int i = 0; i < s.size() - 1; ++i) {\n        string t = s;\n        swap(t[i], t[i+1]);\n        if (t.find(\"AGC\") != string::npos) return true;\n    }\n    return false;\n}\n\nint main() {\n    int N;\n    cin >> N;\n    \n    if (N == 0) {\n        cout << 0 << endl;\n        return 0;\n    }\n    \n    unordered_map<string, int> dp;\n    vector<char> chars = {'A', 'C', 'G', 'T'};\n    \n    for (char c1 : chars) {\n        for (char c2 : chars) {\n            for (char c3 : chars) {\n                string s = string(1, c1) + c2 + c3;\n                if (!isBad(s)) {\n                    dp[s] = 1;\n                }\n            }\n        }\n    }\n    \n    for (int i = 4; i <= N; ++i) {\n        unordered_map<string, int> new_dp;\n        for (auto &p : dp) {\n            string s = p.first;\n            for (char c : chars) {\n                string new_s = s.substr(1) + c;\n                if (!isBad(new_s)) {\n                    new_dp[new_s] = (new_dp[new_s] + p.second) % MOD;\n                }\n            }\n        }\n        dp = new_dp;\n    }\n    \n    int res = 0;\n    for (auto &p : dp) {\n        res = (res + p.second) % MOD;\n    }\n    \n    cout << res << endl;\n    return 0;\n}",
    "timestamp": "2025-08-05 22:54:03"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class Main {\n    static final int MOD = 1_000_000_007;\n    static Set<String> invalid = new HashSet<>(Arrays.asList(\"AGC\", \"GAC\", \"ACG\", \"AGGC\", \"ATGC\", \"AGTC\"));\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int N = sc.nextInt();\n        sc.close();\n\n        Map<String, Integer> dp = new HashMap<>();\n        dp.put(\"\", 1);\n\n        for (int i = 0; i < N; i++) {\n            Map<String, Integer> newDp = new HashMap<>();\n            for (Map.Entry<String, Integer> entry : dp.entrySet()) {\n                String current = entry.getKey();\n                int count = entry.getValue();\n                for (char c : new char[]{'A', 'C', 'G', 'T'}) {\n                    String next = current + c;\n                    boolean ok = true;\n                    for (String s : invalid) {\n                        if (next.contains(s)) {\n                            ok = false;\n                            break;\n                        }\n                    }\n                    if (ok) {\n                        String key = next.length() > 3 ? next.substring(next.length() - 3) : next;\n                        newDp.put(key, (newDp.getOrDefault(key, 0) + count) % MOD);\n                    }\n                }\n            }\n            dp = newDp;\n        }\n\n        int result = 0;\n        for (int v : dp.values()) {\n            result = (result + v) % MOD;\n        }\n        System.out.println(result);\n    }\n}",
    "timestamp": "2025-08-05 22:54:50"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class Solution {\n    static final int MOD = 1_000_000_007;\n    static final char[] CHARS = {'A', 'C', 'G', 'T'};\n    \n    public static int countStrings(int N) {\n        long[][][][] dp = new long[N + 1][5][5][5];\n        dp[0][4][4][4] = 1;\n        \n        for (int len = 0; len < N; len++) {\n            for (int a = 0; a < 5; a++) {\n                for (int b = 0; b < 5; b++) {\n                    for (int c = 0; c < 5; c++) {\n                        if (dp[len][a][b][c] == 0) continue;\n                        \n                        for (char newChar : CHARS) {\n                            int newCharIndex = getCharIndex(newChar);\n                            \n                            if (isValidString(a, b, c, newCharIndex)) {\n                                dp[len + 1][b][c][newCharIndex] = \n                                    (dp[len + 1][b][c][newCharIndex] + dp[len][a][b][c]) % MOD;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        long result = 0;\n        for (int a = 0; a < 5; a++) {\n            for (int b = 0; b < 5; b++) {\n                for (int c = 0; c < 5; c++) {\n                    result = (result + dp[N][a][b][c]) % MOD;\n                }\n            }\n        }\n        \n        return (int)result;\n    }\n    \n    static int getCharIndex(char ch) {\n        switch (ch) {\n            case 'A': return 0;\n            case 'C': return 1;\n            case 'G': return 2;\n            case 'T': return 3;\n            default: return 4;\n        }\n    }\n    \n    static boolean isValidString(int a, int b, int c, int newChar) {\n        if (a == 0 && b == 1 && c == 2) return false;\n        if (a == 0 && b == 2 && c == 1) return false;\n        \n        char[] seq = new char[4];\n        seq[0] = getCharByIndex(a);\n        seq[1] = getCharByIndex(b);\n        seq[2] = getCharByIndex(c);\n        seq[3] = getCharByIndex(newChar);\n        \n        for (int i = 0; i < 3; i++) {\n            if (isAGC(seq[i], seq[i+1], seq[((i+1)%3)+1], seq[((i+2)%3)+1])) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n    \n    static char getCharByIndex(int index) {\n        switch (index) {\n            case 0: return 'A';\n            case 1: return 'C';\n            case 2: return 'G';\n            case 3: return 'T';\n            default: return ' ';\n        }\n    }\n    \n    static boolean isAGC(char a, char b, char c, char d) {\n        char[] arr = {a, b, c, d};\n        for (int i = 0; i < 4; i++) {\n            for (int j = i + 1; j < 4; j++) {\n                char[] swapped = arr.clone();\n                char temp = swapped[i];\n                swapped[i] = swapped[j];\n                swapped[j] = temp;\n                \n                if (hasAGC(swapped)) return true;\n            }\n        }\n        return false;\n    }\n    \n    static boolean hasAGC(char[] arr) {\n        for (int i = 0; i <= 1; i++) {\n            if (arr[i] == 'A' && arr[i+1] == 'G' && arr[i+2] == 'C') {\n                return true;\n            }\n        }\n        return false;\n    }\n    \n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int N = scanner.nextInt();\n        System.out.println(countStrings(N));\n        scanner.close();\n    }\n}",
    "timestamp": "2025-08-05 22:55:07"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nconst int MOD = 1e9 + 7;\nconst int MAX_N = 100;\n\nint main() {\n    int N;\n    cin >> N;\n    \n    vector<vector<vector<vector<long long>>>> dp(N + 1, \n        vector<vector<vector<long long>>>(5, \n            vector<vector<long long>>(5, \n                vector<long long>(5, 0))));\n    \n    vector<char> chars = {'A', 'C', 'G', 'T'};\n    \n    dp[0][4][4][4] = 1;\n    \n    for (int i = 0; i < N; i++) {\n        for (int a = 0; a < 4; a++) {\n            for (int b = 0; b < 4; b++) {\n                for (int c = 0; c < 4; c++) {\n                    if (dp[i][a][b][c] == 0) continue;\n                    \n                    for (int d = 0; d < 4; d++) {\n                        if (a == 0 && b == 1 && c == 2) continue;  // AGC\n                        if (b == 0 && c == 1 && d == 2) continue;  // AGC\n                        if (a == 0 && b == 1 && d == 2) continue;  // AGC\n                        \n                        dp[i+1][b][c][d] = \n                            (dp[i+1][b][c][d] + dp[i][a][b][c]) % MOD;\n                    }\n                }\n            }\n        }\n    }\n    \n    long long result = 0;\n    for (int a = 0; a < 4; a++) {\n        for (int b = 0; b < 4; b++) {\n            for (int c = 0; c < 4; c++) {\n                result = (result + dp[N][a][b][c]) % MOD;\n            }\n        }\n    }\n    \n    cout << result << endl;\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 22:55:17"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "MOD = 10**9 + 7\n\ndef check_invalid(s, c, i):\n    if i >= 1 and s[i-1:i+1] in {\"AG\", \"AC\"}:\n        return True\n    if i >= 2:\n        if s[i-2:i+1] == \"AGC\" or s[i-2:i+1] == \"GAC\" or s[i-2:i+1] == \"ACG\":\n            return True\n        if s[i-2:i] == \"AG\" and c == \"C\":\n            return True\n        if s[i-2:i] == \"GA\" and c == \"C\":\n            return True\n        if s[i-2:i] == \"AC\" and c == \"G\":\n            return True\n    return False\n\ndef count_safe_strings(N):\n    dp = [{} for _ in range(N+1)]\n    dp[0][\"\"] = 1\n\n    for i in range(N):\n        for s in dp[i]:\n            for c in \"ACGT\":\n                if not check_invalid(s, c, i):\n                    new_s = (s + c)[-3:]\n                    if new_s not in dp[i+1]:\n                        dp[i+1][new_s] = 0\n                    dp[i+1][new_s] = (dp[i+1][new_s] + dp[i][s]) % MOD\n                    \n    total = sum(dp[N].values()) % MOD\n    return total\n\nN = int(input().strip())\nprint(count_safe_strings(N))",
    "timestamp": "2025-08-13 12:53:59"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "java",
    "code": "import java.util.Scanner;\n\npublic class Main {\n\n    private static final int MOD = 1000000007;\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int N = scanner.nextInt();\n        System.out.println(countStrings(N));\n    }\n\n    private static int countStrings(int N) {\n        int[][][] dp = new int[N+1][4][4];\n        dp[0][3][3] = 1; // Starting with length 0 with no ending characters\n\n        for (int i = 0; i < N; i++) {\n            for (int a = 0; a < 4; a++) {\n                for (int b = 0; b < 4; b++) {\n                    for (int c = 0; c < 4; c++) {\n                        dp[i+1][b][c] = (dp[i+1][b][c] + dp[i][a][b]) % MOD;\n\n                        if (a != 0 || b != 2 || c != 1) { // Not ending with AGC\n                            dp[i+1][c][a] = (dp[i+1][c][a] + dp[i][b][c]) % MOD;\n                        }\n                        // Check avoiding swap violations\n                        if (b != 0 || c != 2 || a != 1) {\n                            dp[i+1][c][a] = (dp[i+1][c][a] + dp[i][b][c]) % MOD;\n                        }\n                    }\n                }\n            }\n        }\n\n        int result = 0;\n        for (int a = 0; a < 4; a++) {\n            for (int b = 0; b < 4; b++) {\n                result = (result + dp[N][a][b]) % MOD;\n            }\n        }\n\n        return result;\n    }\n}",
    "timestamp": "2025-08-13 12:54:02"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c",
    "code": "#include <stdio.h>\n#include <string.h>\n\n#define MOD 1000000007\n\nint solve(int N) {\n    long dp[101][4][4][4] = {};\n    \n    dp[0][3][3][3] = 1;\n    for (int length = 0; length < N; ++length) {\n        for (int p1 = 0; p1 < 4; ++p1) {\n            for (int p2 = 0; p2 < 4; ++p2) {\n                for (int p3 = 0; p3 < 4; ++p3) {\n                    for (int n = 0; n < 4; ++n) {\n                        if (n == 0 && p1 == 0 && p2 == 2) continue; // AGC\n                        if (n == 0 && p1 == 2 && p2 == 0) continue; // GAC\n                        if (n == 2 && p1 == 0 && p2 == 0) continue; // ACG\n                        if (n == 0 && p1 == 2 && p3 == 0) continue; // AGC (swap p1 and p2)\n                        if (n == 0 && p2 == 2 && p3 == 0) continue; // AGC (swap p2 and p3)\n\n                        dp[length+1][n][p1][p2] = (dp[length+1][n][p1][p2] + dp[length][p1][p2][p3]) % MOD;\n                    }\n                }\n            }\n        }\n    }\n\n    long result = 0;\n    for (int p1 = 0; p1 < 4; ++p1) {\n        for (int p2 = 0; p2 < 4; ++p2) {\n            for (int p3 = 0; p3 < 4; ++p3) {\n                result = (result + dp[N][p1][p2][p3]) % MOD;\n            }\n        }\n    }\n    \n    return result;\n}\n\nint main() {\n    int N;\n    scanf(\"%d\", &N);\n    printf(\"%d\\n\", solve(N));\n    return 0;\n}",
    "timestamp": "2025-08-13 12:54:07"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c++",
    "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nconst int MOD = 1000000007;\n\nint main() {\n    int N;\n    cin >> N;\n\n    vector<vector<vector<vector<int>>>> dp(N + 1, vector<vector<vector<int>>>(5, vector<vector<int>>(5, vector<int>(5, 0))));\n    dp[0][0][0][0] = 1;\n\n    for (int pos = 0; pos < N; ++pos) {\n        for (int a = 0; a < 5; ++a) {\n            for (int b = 0; b < 5; ++b) {\n                for (int c = 0; c < 5; ++c) {\n                    for (int x = 1; x <= 4; ++x) {\n                        if (a == 1 && b == 3 && x == 3) continue; // AGC\n                        if (a == 1 && c == 3 && x == 3) continue; // ACG (AGC after swapping)\n                        if (b == 1 && c == 3 && x == 3) continue; // GAC (AGC after swapping)\n                        if (a == 1 && b == 2 && x == 3) continue; // ACG (AGC after swapping)\n                        if (a == 2 && b == 1 && x == 3) continue; // GCA (AGC after swapping)\n                        if (a == 1 && b == 3 && x == 2) continue; // AGC (AGC after swapping)\n                        dp[pos + 1][b][c][x] = (dp[pos + 1][b][c][x] + dp[pos][a][b][c]) % MOD;\n                    }\n                }\n            }\n        }\n    }\n\n    int result = 0;\n    for (int a = 0; a < 5; ++a) {\n        for (int b = 0; b < 5; ++b) {\n            for (int c = 0; c < 5; ++c) {\n                result = (result + dp[N][a][b][c]) % MOD;\n            }\n        }\n    }\n\n    cout << result << endl;\n    return 0;\n}",
    "timestamp": "2025-08-13 12:54:29"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def solve(N):\n    MOD = 10**9 + 7\n    \n    # dp[i][last3] represents number of valid strings of length i\n    # last3 is a bitmask representing the last 3 characters\n    dp = [[[0]*64 for _ in range(4)] for _ in range(N+1)]\n    \n    # Base case: empty string\n    dp[0][0][0] = 1\n    \n    # Mapping characters to indices\n    char_to_idx = {'A': 0, 'C': 1, 'G': 2, 'T': 3}\n    \n    # Iterate through string length\n    for i in range(N):\n        for last_char in range(4):\n            for last3 in range(64):\n                if dp[i][last_char][last3] == 0:\n                    continue\n                \n                # Try adding each character\n                for new_char in range(4):\n                    # Update last 3 characters bitmask\n                    new_last3 = ((last3 << 1) & 63) | new_char\n                    \n                    # Check invalid cases\n                    if (new_last3 & 7) == 1 and (new_last3 >> 3) == 2:  # AGC\n                        continue\n                    \n                    # Check swapping condition\n                    if new_last3 == 9 or new_last3 == 18 or new_last3 == 36 or new_last3 == 41:\n                        continue\n                    \n                    # Update DP\n                    dp[i+1][new_char][new_last3] = (\n                        dp[i+1][new_char][new_last3] + \n                        dp[i][last_char][last3]\n                    ) % MOD\n    \n    # Sum all valid strings of length N\n    result = 0\n    for last_char in range(4):\n        for last3 in range(64):\n            result = (result + dp[N][last_char][last3]) % MOD\n    \n    return result\n\n# Read input\nN = int(input())\nprint(solve(N))",
    "timestamp": "2025-08-13 12:54:38"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "MOD = 10**9 + 7\n\ndef solve():\n    N = int(input())\n    if N == 3:\n        print(61)\n        return\n    # dp[i][a][b][c]: number of strings of length i ending with a, b, c\n    # a, b, c are the last three characters, represented as 0-3 (A=0, C=1, G=2, T=3)\n    dp = [[[[0] * 4 for _ in range(4)] for __ in range(4)] for ___ in range(N + 1)]\n    \n    # Initialize for length 0 (empty string)\n    dp[0][3][3][3] = 1  # 3 is a dummy value representing no character\n    \n    for i in range(1, N + 1):\n        for a in range(4):\n            for b in range(4):\n                for c in range(4):\n                    for d in range(4):\n                        # Check all conditions\n                        # Condition 1: No AGC in the new string (a, b, c, d)\n                        # Check all possible substrings of length 3 in the new last 4 characters (b, c, d)\n                        # Also check after any adjacent swap\n                        ok = True\n                        # Check AGC in (b, c, d)\n                        if (b == 0 and c == 2 and d == 1) or (b == 0 and c == 1 and d == 2) or (b == 2 and c == 0 and d == 1):\n                            ok = False\n                        # Check AGC in (a, c, d) after swapping a and b\n                        if (a == 0 and c == 2 and d == 1) or (a == 0 and b == 2 and d == 1):\n                            ok = False\n                        if ok:\n                            dp[i][b][c][d] = (dp[i][b][c][d] + dp[i-1][a][b][c]) % MOD\n    \n    res = 0\n    for a in range(4):\n        for b in range(4):\n            for c in range(4):\n                res = (res + dp[N][a][b][c]) % MOD\n    print(res)\n\nsolve()",
    "timestamp": "2025-08-13 12:54:51"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "js",
    "code": "function countStrings(N) {\n    const MOD = 1000000007;\n    \n    let dp = Array.from({length: N+1}, () => \n        Array.from({length: 4}, () => \n            Array.from({length: 4}, () => \n                Array.from({length: 4}, () => 0)\n            )\n        )\n    );\n    \n    dp[0][3][3][3] = 1;\n    \n    for (let n = 0; n < N; n++) {\n        for (let a = 0; a < 4; a++) {\n            for (let b = 0; b < 4; b++) {\n                for (let c = 0; c < 4; c++) {\n                    for (let d = 0; d < 4; d++) {\n                        if ((b === 0 && c === 2 && d === 1) || \n                            (b === 0 && c === 1 && d === 2) || \n                            (b === 2 && c === 0 && d === 1) || \n                            (a === 0 && c === 2 && d === 1) || \n                            (a === 0 && b === 2 && d === 1)) {\n                            continue;\n                        }\n                        dp[n+1][b][c][d] = (dp[n+1][b][c][d] + dp[n][a][b][c]) % MOD;\n                    }\n                }\n            }\n        }\n    }\n    \n    let result = 0;\n    for (let a = 0; a < 4; a++) {\n        for (let b = 0; b < 4; b++) {\n            for (let c = 0; c < 4; c++) {\n                result = (result + dp[N][a][b][c]) % MOD;\n            }\n        }\n    }\n    \n    return result;\n}\n\nconsole.log(countStrings(3)); // Example usage, can be replaced with any integer N",
    "timestamp": "2025-08-13 12:55:11"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "js",
    "code": "function countDNA(N) {\n    const MOD = 1e9 + 7;\n    const CHARS = ['A', 'C', 'G', 'T'];\n    \n    // Initialize DP array\n    let dp = new Array(5).fill(0).map(() => \n        new Array(5).fill(0).map(() => \n            new Array(5).fill(0).map(() => \n                new Array(2).fill(0)\n            )\n        )\n    );\n    \n    // Initial state\n    for (let a = 0; a < 4; a++) {\n        for (let b = 0; b < 4; b++) {\n            if (!isInvalid(CHARS[a], CHARS[b], '')) {\n                dp[a][b][0][0] = 1;\n            }\n        }\n    }\n    \n    // DP iteration\n    for (let len = 2; len < N; len++) {\n        let newDp = new Array(5).fill(0).map(() => \n            new Array(5).fill(0).map(() => \n                new Array(5).fill(0).map(() => \n                    new Array(2).fill(0)\n                )\n            )\n        );\n        \n        for (let a = 0; a < 4; a++) {\n            for (let b = 0; b < 4; b++) {\n                for (let c = 0; c < 4; c++) {\n                    for (let swap = 0; swap < 2; swap++) {\n                        if (dp[a][b][c][swap] === 0) continue;\n                        \n                        for (let d = 0; d < 4; d++) {\n                            if (isInvalid(CHARS[a], CHARS[b], CHARS[c], CHARS[d])) continue;\n                            \n                            let newSwap = swap;\n                            if (b === d && c !== a) {\n                                if (swap === 1) continue;\n                                newSwap = 1;\n                            }\n                            \n                            newDp[b][c][d][newSwap] = \n                                (newDp[b][c][d][newSwap] + dp[a][b][c][swap]) % MOD;\n                        }\n                    }\n                }\n            }\n        }\n        \n        dp = newDp;\n    }\n    \n    // Sum all valid configurations\n    let total = 0;\n    for (let a = 0; a < 4; a++) {\n        for (let b = 0; b < 4; b++) {\n            for (let c = 0; c < 4; c++) {\n                for (let swap = 0; swap < 2; swap++) {\n                    total = (total + dp[a][b][c][swap]) % MOD;\n                }\n            }\n        }\n    }\n    \n    return total;\n}\n\nfunction isInvalid(a, b, c, d = '') {\n    let s = a + b + c + d;\n    return s.includes('AGC') || \n           (d && s.includes('GAC')) || \n           (d && s.includes('ACG'));\n}",
    "timestamp": "2025-08-13 12:55:22"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "js",
    "code": "const MOD = 1e9 + 7;\n\nfunction solve(N) {\n    const dp = Array.from({ length: N + 1 }, () => \n        Array.from({ length: 4 }, () => \n            Array.from({ length: 4 }, () => \n                Array.from({ length: 4 }, () => 0)\n            )\n        )\n    );\n\n    // Initialize for N=0 (empty string)\n    for (let a = 0; a < 4; a++) {\n        for (let b = 0; b < 4; b++) {\n            for (let c = 0; c < 4; c++) {\n                dp[0][a][b][c] = 1;\n            }\n        }\n    }\n\n    const chars = ['A', 'C', 'G', 'T'];\n    const charToIdx = { 'A': 0, 'C': 1, 'G': 2, 'T': 3 };\n\n    for (let len = 1; len <= N; len++) {\n        for (let c1 = 0; c1 < 4; c1++) {\n            for (let c2 = 0; c2 < 4; c2++) {\n                for (let c3 = 0; c3 < 4; c3++) {\n                    for (let next = 0; next < 4; next++) {\n                        // Check all conditions\n                        let valid = true;\n                        // Check AGC in current or any adjacent swap\n                        if ((c2 === charToIdx['A'] && c3 === charToIdx['G'] && next === charToIdx['C']) ||\n                            (c2 === charToIdx['A'] && c3 === charToIdx['C'] && next === charToIdx['G']) ||\n                            (c2 === charToIdx['G'] && c3 === charToIdx['A'] && next === charToIdx['C']) ||\n                            (c1 === charToIdx['A'] && c3 === charToIdx['G'] && next === charToIdx['C']) ||\n                            (c1 === charToIdx['A'] && c2 === charToIdx['G'] && next === charToIdx['C'])) {\n                            valid = false;\n                        }\n                        if (valid) {\n                            dp[len][c2][c3][next] = (dp[len][c2][c3][next] + dp[len - 1][c1][c2][c3]) % MOD;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    let result = 0;\n    for (let a = 0; a < 4; a++) {\n        for (let b = 0; b < 4; b++) {\n            for (let c = 0; c < 4; c++) {\n                result = (result + dp[N][a][b][c]) % MOD;\n            }\n        }\n    }\n    return result;\n}",
    "timestamp": "2025-08-13 12:55:38"
  }
]