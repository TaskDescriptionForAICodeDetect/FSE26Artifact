[
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#define MOD 1000000007\n\nlong long factorial(int n) {\n    long long res = 1;\n    for (int i = 2; i <= n; i++) {\n        res = (res * i) % MOD;\n    }\n    return res;\n}\n\nlong long power(int base, int exp) {\n    long long res = 1;\n    for (int i = 0; i < exp; i++) {\n        res = (res * base) % MOD;\n    }\n    return res;\n}\n\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    char cards[n][12]; // Assuming max length of a number is 11 digits\n    for (int i = 0; i < n; i++) {\n        scanf(\"%s\", cards[i]);\n    }\n\n    long long total_sum = 0;\n    for (int k = 1; k <= n; k++) {\n        long long fact_n = factorial(n);\n        long long fact_k = factorial(k);\n        long long fact_nk = factorial(n - k);\n        long long ways = (fact_n / (fact_k * fact_nk)) % MOD;\n        ways = (ways * fact_k) % MOD;\n\n        long long digit_sum = 0;\n        for (int i = 0; i < n; i++) {\n            int len = strlen(cards[i]);\n            for (int d = 0; d < len; d++) {\n                int digit = cards[i][d] - '0';\n                digit_sum = (digit_sum + digit * power(10, len - 1 - d)) % MOD;\n            }\n        }\n\n        long long multiplier = power(10, k - 1);\n        long long partial_sum = (digit_sum * multiplier) % MOD;\n        partial_sum = (partial_sum * ways) % MOD;\n        total_sum = (total_sum + partial_sum) % MOD;\n    }\n\n    printf(\"%lld\\n\", total_sum);\n    return 0;\n}",
    "timestamp": "2025-08-05 21:32:14"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nconst int MOD = 1e9 + 7;\n\nlong long factorial(int n) {\n    long long res = 1;\n    for (int i = 2; i <= n; ++i) {\n        res = (res * i) % MOD;\n    }\n    return res;\n}\n\nlong long power(long long base, long long exp) {\n    long long res = 1;\n    while (exp > 0) {\n        if (exp % 2 == 1) {\n            res = (res * base) % MOD;\n        }\n        base = (base * base) % MOD;\n        exp /= 2;\n    }\n    return res;\n}\n\nint main() {\n    int n;\n    cin >> n;\n    vector<int> cards(n);\n    for (int i = 0; i < n; ++i) {\n        cin >> cards[i];\n    }\n\n    long long total_sum = 0;\n    long long fact_n = factorial(n);\n    long long sum_digits = 0;\n    for (int d : cards) {\n        sum_digits = (sum_digits + d) % MOD;\n    }\n\n    for (int k = 1; k <= n; ++k) {\n        long long term = fact_n;\n        term = (term * power(n - k + 1, MOD - 2)) % MOD;\n        term = (term * sum_digits) % MOD;\n        long long pow10 = power(10, k - 1);\n        term = (term * pow10) % MOD;\n        total_sum = (total_sum + term) % MOD;\n    }\n\n    cout << total_sum << endl;\n    return 0;\n}",
    "timestamp": "2025-08-05 21:32:29"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class CardNumberSum {\n    private static final int MOD = 1_000_000_007;\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        int[] cards = new int[n];\n        for (int i = 0; i < n; i++) {\n            cards[i] = scanner.nextInt();\n        }\n        System.out.println(calculateSum(cards));\n    }\n\n    private static long calculateSum(int[] cards) {\n        int n = cards.length;\n        long[] fact = new long[n + 1];\n        fact[0] = 1;\n        for (int i = 1; i <= n; i++) {\n            fact[i] = (fact[i - 1] * i) % MOD;\n        }\n\n        long[] pow10 = new long[16]; // Assuming max digits per number is 15\n        pow10[0] = 1;\n        for (int i = 1; i < 16; i++) {\n            pow10[i] = (pow10[i - 1] * 10) % MOD;\n        }\n\n        long sum = 0;\n        for (int k = 1; k <= n; k++) {\n            long ways = fact[n] % MOD;\n            long invFactNK = modInverse(fact[n - k], MOD);\n            ways = (ways * invFactNK) % MOD;\n\n            for (int i = 0; i < n; i++) {\n                int num = cards[i];\n                int d = String.valueOf(num).length();\n                for (int pos = 0; pos < k; pos++) {\n                    long contribution = (num * pow10[pos]) % MOD;\n                    contribution = (contribution * ways) % MOD;\n                    sum = (sum + contribution) % MOD;\n                }\n            }\n        }\n        return sum;\n    }\n\n    private static long modInverse(long a, int mod) {\n        return power(a, mod - 2, mod);\n    }\n\n    private static long power(long x, int y, int mod) {\n        long res = 1;\n        x = x % mod;\n        while (y > 0) {\n            if (y % 2 == 1) {\n                res = (res * x) % mod;\n            }\n            y = y >> 1;\n            x = (x * x) % mod;\n        }\n        return res;\n    }\n}",
    "timestamp": "2025-08-05 21:32:51"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class CardNumberSum {\n    static final int MOD = 1_000_000_007;\n\n    public static long sumAllCardNumbers(int[] cards) {\n        int n = cards.length;\n        long totalSum = 0;\n\n        // Generate all possible subsets\n        for (int mask = 1; mask < (1 << n); mask++) {\n            List<Integer> subset = new ArrayList<>();\n            \n            // Collect cards in current subset\n            for (int j = 0; j < n; j++) {\n                if ((mask & (1 << j)) > 0) {\n                    subset.add(cards[j]);\n                }\n            }\n\n            // Generate all permutations\n            totalSum += generatePermutationsAndSum(subset);\n            totalSum %= MOD;\n        }\n\n        return totalSum;\n    }\n\n    static long generatePermutationsAndSum(List<Integer> subset) {\n        long sum = 0;\n        List<List<Integer>> permutations = new ArrayList<>();\n        generatePermutations(subset, new ArrayList<>(), permutations);\n\n        for (List<Integer> perm : permutations) {\n            sum += constructNumber(perm);\n            sum %= MOD;\n        }\n\n        return sum;\n    }\n\n    static void generatePermutations(List<Integer> subset, List<Integer> current, List<List<Integer>> result) {\n        if (subset.isEmpty()) {\n            if (!current.isEmpty()) {\n                result.add(new ArrayList<>(current));\n            }\n            return;\n        }\n\n        for (int i = 0; i < subset.size(); i++) {\n            int num = subset.get(i);\n            current.add(num);\n            \n            List<Integer> remainingSubset = new ArrayList<>(subset);\n            remainingSubset.remove(i);\n            \n            generatePermutations(remainingSubset, current, result);\n            current.remove(current.size() - 1);\n        }\n    }\n\n    static long constructNumber(List<Integer> digits) {\n        long number = 0;\n        for (int digit : digits) {\n            number = number * 10 + digit;\n        }\n        return number;\n    }\n\n    public static void main(String[] args) {\n        int[] cards1 = {1, 2};\n        System.out.println(sumAllCardNumbers(cards1)); // Expected: 36\n\n        int[] cards2 = {1, 11};\n        System.out.println(sumAllCardNumbers(cards2)); // Expected: 223\n    }\n}",
    "timestamp": "2025-08-05 21:33:00"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <math.h>\n\n#define MOD 1000000007\n#define MAX_CARDS 15\n\nlong long factorial(int n) {\n    long long result = 1;\n    for (int i = 2; i <= n; i++) {\n        result = (result * i) % MOD;\n    }\n    return result;\n}\n\nlong long solve(char** cards, int n) {\n    long long total_sum = 0;\n    \n    // Generate all possible subsets\n    for (int mask = 1; mask < (1 << n); mask++) {\n        int subset_size = 0;\n        char* subset_cards[MAX_CARDS];\n        \n        // Collect cards in this subset\n        for (int i = 0; i < n; i++) {\n            if (mask & (1 << i)) {\n                subset_cards[subset_size++] = cards[i];\n            }\n        }\n        \n        // Generate all permutations of this subset\n        int* perm = malloc(subset_size * sizeof(int));\n        for (int i = 0; i < subset_size; i++) {\n            perm[i] = i;\n        }\n        \n        do {\n            // Create number from current permutation\n            char number[100] = {0};\n            for (int i = 0; i < subset_size; i++) {\n                strcat(number, subset_cards[perm[i]]);\n            }\n            \n            // If not starting with 0\n            if (number[0] != '0') {\n                total_sum = (total_sum + atoll(number)) % MOD;\n            }\n        } while (next_permutation(perm, subset_size));\n        \n        free(perm);\n    }\n    \n    return total_sum;\n}\n\nint next_permutation(int* perm, int size) {\n    int i = size - 2;\n    while (i >= 0 && perm[i] >= perm[i + 1]) {\n        i--;\n    }\n    \n    if (i < 0) return 0;\n    \n    int j = size - 1;\n    while (perm[j] <= perm[i]) {\n        j--;\n    }\n    \n    int temp = perm[i];\n    perm[i] = perm[j];\n    perm[j] = temp;\n    \n    int left = i + 1, right = size - 1;\n    while (left < right) {\n        temp = perm[left];\n        perm[left] = perm[right];\n        perm[right] = temp;\n        left++;\n        right--;\n    }\n    \n    return 1;\n}\n\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    \n    char* cards[MAX_CARDS];\n    for (int i = 0; i < n; i++) {\n        cards[i] = malloc(20 * sizeof(char));\n        scanf(\"%s\", cards[i]);\n    }\n    \n    long long result = solve(cards, n);\n    printf(\"%lld\\n\", result);\n    \n    for (int i = 0; i < n; i++) {\n        free(cards[i]);\n    }\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 21:33:11"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nconst int MOD = 1e9 + 7;\n\nclass Solution {\npublic:\n    int sumOfNumbersFromCards(vector<int>& cards) {\n        int n = cards.size();\n        long long totalSum = 0;\n        \n        // Generate all possible non-empty subsets\n        for (int mask = 1; mask < (1 << n); mask++) {\n            vector<int> subset;\n            for (int j = 0; j < n; j++) {\n                if (mask & (1 << j)) {\n                    subset.push_back(cards[j]);\n                }\n            }\n            \n            // Generate all permutations of the subset\n            sort(subset.begin(), subset.end());\n            do {\n                long long number = 0;\n                for (int card : subset) {\n                    number = number * 10 + card;\n                }\n                totalSum = (totalSum + number) % MOD;\n            } while (next_permutation(subset.begin(), subset.end()));\n        }\n        \n        return totalSum;\n    }\n};",
    "timestamp": "2025-08-05 21:33:18"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def sum_of_all_numbers(cards):\n    from itertools import permutations\n\n    MOD = 1_000_000_007\n    \n    # Convert cards to strings for concatenation\n    cards = list(map(str, cards))\n    n = len(cards)\n\n    total_sum = 0\n\n    for r in range(1, n + 1):\n        # Generate all permutations of length r\n        for perm in permutations(cards, r):\n            if perm[0] != '0':  # Leading zero check\n                num = int(''.join(perm))\n                total_sum = (total_sum + num) % MOD\n\n    return total_sum\n\n# Sample usage\nn = 2\ncards = [1, 2]\nprint(sum_of_all_numbers(cards))",
    "timestamp": "2025-08-13 07:00:56"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "java",
    "code": "import java.util.*;\n\npublic class CardNumberSum {\n    private static final int MOD = 1_000_000_007;\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        int[] cards = new int[n];\n        for (int i = 0; i < n; i++) {\n            cards[i] = scanner.nextInt();\n        }\n        System.out.println(sumOfNumbers(cards));\n        scanner.close();\n    }\n\n    private static long sumOfNumbers(int[] cards) {\n        long result = 0;\n        int n = cards.length;\n        Arrays.sort(cards);\n\n        for (int len = 1; len <= n; len++) {\n            boolean[] visited = new boolean[n];\n            result = (result + permuteAndCalculate(cards, new int[len], visited, 0)) % MOD;\n        }\n\n        return result;\n    }\n\n    private static long permuteAndCalculate(int[] cards, int[] current, boolean[] visited, int depth) {\n        if (depth == current.length) {\n            long number = constructNumber(current);\n            return number;\n        }\n        \n        long sum = 0;\n        for (int i = 0; i < cards.length; i++) {\n            if (visited[i]) continue;\n            visited[i] = true;\n            current[depth] = cards[i];\n            sum = (sum + permuteAndCalculate(cards, current, visited, depth + 1)) % MOD;\n            visited[i] = false;\n        }\n        \n        return sum;\n    }\n\n    private static long constructNumber(int[] arr) {\n        long num = 0;\n        for (int a : arr) {\n            num = (num * 10 + a) % MOD;\n        }\n        return num;\n    }\n}",
    "timestamp": "2025-08-13 07:01:01"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c",
    "code": "#include <stdio.h>\n#include <string.h>\n\n#define MOD 1000000007\n\nlong long power(int base, int exp) {\n    long long result = 1;\n    long long base_pow = base;\n    while (exp) {\n        if (exp % 2) result = (result * base_pow) % MOD;\n        base_pow = (base_pow * base_pow) % MOD;\n        exp /= 2;\n    }\n    return result;\n}\n\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    \n    int cards[n];\n    for (int i = 0; i < n; i++) {\n        scanf(\"%d\", &cards[i]);\n    }\n    \n    long long totalSum = 0;\n    \n    for (int length = 1; length <= n; length++) {\n        long long factorial = 1;\n        for (int i = 1; i <= length; i++) {\n            factorial = (factorial * i) % MOD;\n        }\n        \n        long long sumForLength = 0;\n        \n        for (int mask = 1; mask < (1 << n); mask++) {\n            if (__builtin_popcount(mask) == length) {\n                long long sumOfSubset = 0;\n                int digitsCount[10] = {0};\n                int len = 0;\n                \n                for (int i = 0; i < n; i++) {\n                    if (mask & (1 << i)) {\n                        int number = cards[i];\n                        while (number > 0) {\n                            digitsCount[number % 10]++;\n                            number /= 10;\n                            len++;\n                        }\n                    }\n                }\n                \n                for (int digit = 0; digit < 10; digit++) {\n                    for (int count = 0; count < digitsCount[digit]; count++) {\n                        sumOfSubset = (sumOfSubset * 10 + digit) % MOD;\n                    }\n                }\n                \n                sumForLength = (sumForLength + sumOfSubset * factorial) % MOD;\n            }\n        }\n        \n        totalSum = (totalSum + sumForLength) % MOD;\n    }\n    \n    printf(\"%lld\\n\", totalSum);\n\n    return 0;\n}",
    "timestamp": "2025-08-13 07:01:19"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def solve_card_combination_sum(cards):\n    MOD = 10**9 + 7\n    cards.sort()\n    n = len(cards)\n    \n    # Compute total sum of all possible arrangements\n    total_sum = 0\n    \n    # Generate all possible non-empty subsets\n    for mask in range(1, 1 << n):\n        subset = []\n        for j in range(n):\n            if mask & (1 << j):\n                subset.append(cards[j])\n        \n        # Generate all permutations of the subset\n        from itertools import permutations\n        for perm in set(permutations(subset)):\n            # Convert permutation to number\n            num_str = ''.join(map(str, perm))\n            num = int(num_str)\n            total_sum += num\n    \n    return total_sum % MOD",
    "timestamp": "2025-08-13 07:01:32"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "import sys\nfrom itertools import permutations\n\nMOD = 10**9 + 7\n\ndef solve():\n    n = int(sys.stdin.readline())\n    cards = sys.stdin.readline().split()\n    \n    total = 0\n    \n    for k in range(1, n + 1):\n        for subset in permutations(cards, k):\n            num_str = ''.join(subset)\n            if num_str[0] == '0':\n                continue\n            num = int(num_str) % MOD\n            total = (total + num) % MOD\n    \n    print(total % MOD)\n\nsolve()",
    "timestamp": "2025-08-13 07:01:41"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nconst int MOD = 1000000007;\n\nlong long power(long long base, long long exp, long long mod) {\n    long long result = 1;\n    while (exp > 0) {\n        if (exp % 2 == 1) {\n            result = (result * base) % mod;\n        }\n        base = (base * base) % mod;\n        exp /= 2;\n    }\n    return result;\n}\n\nint main() {\n    int n;\n    cin >> n;\n    vector<string> cards(n);\n    for (int i = 0; i < n; ++i) {\n        cin >> cards[i];\n    }\n\n    long long totalSum = 0;\n    long long factor = 0;\n\n    for (const auto &card : cards) {\n        long long numVal = 0;\n        for (char c : card) {\n            numVal = (numVal * 10 + (c - '0')) % MOD;\n        }\n        \n        int len = card.size();\n        factor = (factor * power(10, len, MOD) % MOD + numVal) % MOD; \n    }\n    \n    long long subsetCount = power(2, n - 1, MOD);\n\n    totalSum = (factor * subsetCount) % MOD;\n\n    cout << totalSum << endl;\n    \n    return 0;\n}",
    "timestamp": "2025-08-13 11:35:29"
  }
]