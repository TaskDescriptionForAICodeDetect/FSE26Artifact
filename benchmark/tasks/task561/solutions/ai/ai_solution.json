[
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "int solve(char* S, char* T) {\n    int len = strlen(S);\n    long long total_sum = 0;\n    const int MOD = 1000000007;\n\n    for (int mask = 0; mask < (1 << (2 * len)); mask++) {\n        char T_prime[len + 1];\n        strcpy(T_prime, T);\n        int valid = 1;\n\n        for (int i = 0; i < len; i++) {\n            if (T_prime[i] == '?') {\n                int digit = (mask >> (2 * i)) & 3;\n                T_prime[i] = digit + '0';\n            }\n\n            if (T_prime[i] > S[i]) {\n                valid = 0;\n                break;\n            }\n        }\n\n        if (valid) {\n            long long num = atoll(T_prime);\n            total_sum = (total_sum + num) % MOD;\n        }\n    }\n\n    return total_sum;\n}",
    "timestamp": "2025-08-05 22:08:30"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\n#define MOD 1000000007\n\nint solve(char* S, char* T) {\n    int n = strlen(S);\n    long long dp[n+1][2];\n    memset(dp, 0, sizeof(dp));\n    dp[0][0] = 1;\n    \n    for (int i = 0; i < n; i++) {\n        for (int tight = 0; tight < 2; tight++) {\n            if (dp[i][tight] == 0) continue;\n            \n            int max_digit = tight ? (S[i] - '0') : 9;\n            \n            if (T[i] == '?') {\n                for (int d = 0; d <= max_digit; d++) {\n                    int new_tight = tight && (d == (S[i] - '0'));\n                    dp[i+1][new_tight] = (dp[i+1][new_tight] + dp[i][tight]) % MOD;\n                }\n            } else {\n                int d = T[i] - '0';\n                if (d > max_digit) continue;\n                int new_tight = tight && (d == (S[i] - '0'));\n                dp[i+1][new_tight] = (dp[i+1][new_tight] + dp[i][tight]) % MOD;\n            }\n        }\n    }\n    \n    long long total = (dp[n][0] + dp[n][1]) % MOD;\n    if (total == 0) return 0;\n    \n    memset(dp, 0, sizeof(dp));\n    dp[0][0] = 0;\n    dp[0][1] = 0;\n    \n    for (int i = 0; i < n; i++) {\n        for (int tight = 0; tight < 2; tight++) {\n            if (i == 0 && tight == 0) continue;\n            \n            int max_digit = tight ? (S[i] - '0') : 9;\n            \n            if (T[i] == '?') {\n                for (int d = 0; d <= max_digit; d++) {\n                    int new_tight = tight && (d == (S[i] - '0'));\n                    long long pow = 1;\n                    for (int k = 0; k < n - i - 1; k++) {\n                        pow = (pow * 10) % MOD;\n                    }\n                    long long contribution = (d * pow) % MOD;\n                    dp[i+1][new_tight] = (dp[i+1][new_tight] + dp[i][tight] + contribution * ((i == 0 && tight == 1) ? 1 : dp[i][tight])) % MOD;\n                }\n            } else {\n                int d = T[i] - '0';\n                if (d > max_digit) continue;\n                int new_tight = tight && (d == (S[i] - '0'));\n                long long pow = 1;\n                for (int k = 0; k < n - i - 1; k++) {\n                    pow = (pow * 10) % MOD;\n                }\n                long long contribution = (d * pow) % MOD;\n                dp[i+1][new_tight] = (dp[i+1][new_tight] + dp[i][tight] + contribution * ((i == 0 && tight == 1) ? 1 : dp[i][tight])) % MOD;\n            }\n        }\n    }\n    \n    long long sum = (dp[n][0] + dp[n][1]) % MOD;\n    return sum;\n}\n\nint main() {\n    char S[100], T[100];\n    scanf(\"%s %s\", S, T);\n    printf(\"%d\\n\", solve(S, T));\n    return 0;\n}",
    "timestamp": "2025-08-05 22:09:07"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\nconst int MOD = 1e9 + 7;\n\nint solve(string S, string T) {\n    int n = S.size();\n    vector<vector<int>> dp(n + 1, vector<int>(2, 0));\n    dp[0][0] = 1;\n    for (int i = 0; i < n; ++i) {\n        char s = S[i];\n        char t = T[i];\n        for (int tight = 0; tight < 2; ++tight) {\n            if (dp[i][tight] == 0) continue;\n            int max_digit = (tight ? s - '0' : 9);\n            if (t == '?') {\n                for (int d = 0; d <= max_digit; ++d) {\n                    int new_tight = tight && (d == max_digit);\n                    dp[i+1][new_tight] = (dp[i+1][new_tight] + dp[i][tight]) % MOD;\n                }\n            } else {\n                int d = t - '0';\n                if (d > max_digit) continue;\n                int new_tight = tight && (d == max_digit);\n                dp[i+1][new_tight] = (dp[i+1][new_tight] + dp[i][tight]) % MOD;\n            }\n        }\n    }\n    int total = (dp[n][0] + dp[n][1]) % MOD;\n    if (total == 1) return 0; // Only the initial state, no valid T'\n    return total - 1; // Subtract the initial state (all digits zero)\n}\n\nint main() {\n    string S, T;\n    cin >> S >> T;\n    cout << solve(S, T) << endl;\n    return 0;\n}",
    "timestamp": "2025-08-05 22:09:28"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class Solution {\n    private static final int MOD = 1000000007;\n\n    public static int solve(String S, String T) {\n        int n = S.length();\n        long[][] dp = new long[n + 1][2];\n        dp[0][0] = 1;\n\n        for (int i = 0; i < n; i++) {\n            char sChar = S.charAt(i);\n            char tChar = T.charAt(i);\n            int sDigit = sChar - '0';\n\n            for (int isTight = 0; isTight < 2; isTight++) {\n                if (dp[i][isTight] == 0) continue;\n\n                int maxDigit;\n                if (isTight == 1) {\n                    maxDigit = sDigit;\n                } else {\n                    maxDigit = 9;\n                }\n\n                if (tChar == '?') {\n                    for (int d = 0; d <= maxDigit; d++) {\n                        int newIsTight = (isTight == 1 && d == maxDigit) ? 1 : 0;\n                        dp[i + 1][newIsTight] = (dp[i + 1][newIsTight] + dp[i][isTight] * d) % MOD;\n                    }\n                } else {\n                    int d = tChar - '0';\n                    if (d > maxDigit) continue;\n                    int newIsTight = (isTight == 1 && d == maxDigit) ? 1 : 0;\n                    dp[i + 1][newIsTight] = (dp[i + 1][newIsTight] + dp[i][isTight] * d) % MOD;\n                }\n            }\n        }\n\n        long result = (dp[n][0] + dp[n][1]) % MOD;\n        return (int) result;\n    }\n}",
    "timestamp": "2025-08-05 22:09:45"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "class Solution {\n    public int numMatchingSubseq(String S, String T) {\n        int mod = 1000000007;\n        int n = S.length();\n        long totalSum = 0;\n        \n        // Convert S to long for easier comparison\n        long sValue = Long.parseLong(S);\n        \n        // Recursively generate all possible T' values\n        return (int)(dfs(S, T, 0, 0, sValue) % mod);\n    }\n    \n    private long dfs(String S, String T, int index, long currentNum, long maxValue) {\n        // Base case: reached the end of the string\n        if (index == S.length()) {\n            return currentNum;\n        }\n        \n        long sum = 0;\n        \n        // Current character in T\n        char currChar = T.charAt(index);\n        \n        if (currChar == '?') {\n            // Try all possible digits\n            for (int digit = 0; digit <= 9; digit++) {\n                long newNum = currentNum * 10 + digit;\n                \n                // Prune if new number exceeds maxValue\n                if (newNum > maxValue) break;\n                \n                sum += dfs(S, T, index + 1, newNum, maxValue);\n            }\n        } else {\n            // Fixed digit\n            long newNum = currentNum * 10 + (currChar - '0');\n            \n            // Prune if new number exceeds maxValue\n            if (newNum <= maxValue) {\n                sum += dfs(S, T, index + 1, newNum, maxValue);\n            }\n        }\n        \n        return sum % 1000000007;\n    }\n}",
    "timestamp": "2025-08-05 22:09:52"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "class Solution {\npublic:\n    int findMaxValueSum(string S, string T) {\n        int n = S.length();\n        long long mod = 1e9 + 7;\n        long long total_sum = 0;\n        \n        vector<vector<vector<long long>>> dp(n + 1, vector<vector<long long>>(2, vector<long long>(2, 0)));\n        dp[0][0][0] = 1;\n        \n        for (int i = 0; i < n; i++) {\n            for (int tight = 0; tight < 2; tight++) {\n                for (int leading_zero = 0; leading_zero < 2; leading_zero++) {\n                    if (dp[i][tight][leading_zero] == 0) continue;\n                    \n                    int s_digit = S[i] - '0';\n                    \n                    if (T[i] != '?') {\n                        int t_digit = T[i] - '0';\n                        \n                        if (!tight || t_digit <= s_digit) {\n                            int new_tight = tight && (t_digit == s_digit);\n                            int new_leading_zero = leading_zero && (t_digit == 0);\n                            \n                            dp[i+1][new_tight][new_leading_zero] += dp[i][tight][leading_zero];\n                            dp[i+1][new_tight][new_leading_zero] %= mod;\n                            \n                            if (!leading_zero || t_digit != 0) {\n                                total_sum += (long long)t_digit * pow(10, n-i-1) * dp[i][tight][leading_zero];\n                                total_sum %= mod;\n                            }\n                        }\n                    } else {\n                        for (int d = 0; d <= 9; d++) {\n                            if (!tight || d <= s_digit) {\n                                int new_tight = tight && (d == s_digit);\n                                int new_leading_zero = leading_zero && (d == 0);\n                                \n                                dp[i+1][new_tight][new_leading_zero] += dp[i][tight][leading_zero];\n                                dp[i+1][new_tight][new_leading_zero] %= mod;\n                                \n                                if (!leading_zero || d != 0) {\n                                    total_sum += (long long)d * pow(10, n-i-1) * dp[i][tight][leading_zero];\n                                    total_sum %= mod;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        return total_sum;\n    }\n};",
    "timestamp": "2025-08-05 22:10:01"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def sum_possible_T(S, T):\n    MOD = 10**9 + 7\n    n = len(S)\n    \n    def dfs(idx, smaller):\n        if idx == n:\n            return 1\n        \n        if dp[idx][smaller] != -1:\n            return dp[idx][smaller]\n\n        max_digit = int(S[idx]) if smaller == 0 else 9\n        total = 0\n\n        for d in range(10):\n            if (T[idx] == '?' or T[idx] == str(d)) and d <= max_digit:\n                total = (total + dfs(idx + 1, smaller or (d < max_digit))) % MOD\n\n        dp[idx][smaller] = total\n        return total\n\n    dp = [[-1] * 2 for _ in range(n)]\n    result = 0\n    \n    for i in range(10):\n        if T[0] == '?' or T[0] == str(i):\n            if i <= int(S[0]):\n                result = (result + dfs(1, i < int(S[0]))) % MOD\n\n    valid_cases = result\n    result = 0\n\n    def add_to_result(idx, value, smaller):\n        nonlocal result\n        if idx == n:\n            result = (result + value) % MOD\n            return\n\n        max_digit = int(S[idx]) if smaller == 0 else 9\n\n        for d in range(10):\n            if (T[idx] == '?' or T[idx] == str(d)) and d <= max_digit:\n                add_to_result(idx + 1, (value * 10 + d) % MOD, smaller or (d < max_digit))\n\n    for i in range(10):\n        if T[0] == '?' or T[0] == str(i):\n            if i <= int(S[0]):\n                add_to_result(1, i, i < int(S[0]))\n\n    return result if valid_cases > 0 else 0\n\n# Example usage:\n# S = \"123\"\n# T = \"1?3\"\n# print(sum_possible_T(S, T))  # Output will be a calculated integer",
    "timestamp": "2025-08-13 09:10:14"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "java",
    "code": "import java.math.BigInteger;\n\npublic class Solution {\n\n    private static final int MOD = 1000000007;\n\n    public int sumOfAllPossibleValues(String S, String T) {\n        int length = S.length();\n        BigInteger limit = new BigInteger(S);\n        return sumValues(T.toCharArray(), 0, new char[length], limit).mod(BigInteger.valueOf(MOD)).intValue();\n    }\n\n    private BigInteger sumValues(char[] T, int pos, char[] current, BigInteger limit) {\n        if (pos == T.length) {\n            BigInteger number = new BigInteger(new String(current));\n            return number.compareTo(limit) <= 0 ? number : BigInteger.ZERO;\n        }\n\n        BigInteger total = BigInteger.ZERO;\n        for (char c = (T[pos] == '?' ? '0' : T[pos]); c <= (T[pos] == '?' ? '9' : T[pos]); c++) {\n            current[pos] = c;\n            total = total.add(sumValues(T, pos + 1, current, limit));\n        }\n\n        return total;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.sumOfAllPossibleValues(\"123\", \"1?3\")); // Example\n    }\n}",
    "timestamp": "2025-08-13 09:10:18"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c",
    "code": "#include <stdio.h>\n#include <string.h>\n\n#define MOD 1000000007\n\nlong long solve(const char* S, const char* T) {\n    int n = strlen(S);\n    long long sum = 0;\n    long long factor = 1;\n\n    for (int i = n - 1; i >= 0; --i) {\n        long long digit_sum = 0;\n\n        if (T[i] == '?') {\n            for (int d = 0; d <= 9; ++d) {\n                if (d <= (S[i] - '0')) {\n                    digit_sum += d;\n                }\n            }\n            digit_sum = (digit_sum * factor) % MOD;\n            factor = (factor * 10) % MOD;\n        } else {\n            if ((T[i] - '0') <= (S[i] - '0')) {\n                digit_sum = ((T[i] - '0') * factor) % MOD;\n                factor = (factor * 10) % MOD;\n            } else {\n                return 0;\n            }\n        }\n\n        sum = (sum + digit_sum) % MOD;\n    }\n\n    return sum;\n}\n\nint main() {\n    const char* S = \"123\";\n    const char* T = \"1?3\";\n    printf(\"%lld\\n\", solve(S, T));\n\n    return 0;\n}",
    "timestamp": "2025-08-13 09:10:22"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "class Solution:\n    def numOfWays(self, S: str, T: str) -> int:\n        MOD = 10**9 + 7\n        n = len(S)\n        \n        def is_valid(t_prime):\n            for i in range(n):\n                if int(t_prime[i]) > int(S[i]):\n                    return False\n            return True\n        \n        def count_ways(index, t_prime):\n            if index == n:\n                return 1 if is_valid(t_prime) else 0\n            \n            if T[index] != '?':\n                return count_ways(index + 1, t_prime + T[index])\n            \n            total_ways = 0\n            for digit in range(10):\n                total_ways += count_ways(index + 1, t_prime + str(digit))\n                total_ways %= MOD\n            \n            return total_ways\n        \n        return count_ways(0, '')",
    "timestamp": "2025-08-13 09:10:36"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "MOD = 10**9 + 7\n\ndef solve(S, T):\n    n = len(S)\n    dp = [[0] * 2 for _ in range(n + 1)]\n    dp[0][0] = 1\n    \n    for i in range(n):\n        s_digit = int(S[i])\n        t_char = T[i]\n        \n        for is_less in [0, 1]:\n            if dp[i][is_less] == 0:\n                continue\n            \n            if t_char == '?':\n                choices = range(10)\n            else:\n                choices = [int(t_char)]\n            \n            for d in choices:\n                new_is_less = is_less\n                if not is_less:\n                    if d > s_digit:\n                        continue\n                    if d < s_digit:\n                        new_is_less = 1\n                \n                dp[i+1][new_is_less] = (dp[i+1][new_is_less] + dp[i][is_less]) % MOD\n    \n    total = (dp[n][0] + dp[n][1]) % MOD\n    return total\n\nS = input().strip()\nT = input().strip()\nprint(solve(S, T))",
    "timestamp": "2025-08-13 09:10:49"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nconst int MOD = 1000000007;\n\nint solve(const std::string &S, const std::string &T) {\n    int n = S.length();\n    std::vector<std::vector<int>> dp(n + 1, std::vector<int>(2, 0));\n    dp[0][1] = 1;\n\n    for (int i = 1; i <= n; ++i) {\n        int s_digit = S[i - 1] - '0';\n        if (T[i - 1] == '?') {\n            for (int d = 0; d < 10; ++d) {\n                dp[i][0] = (dp[i][0] + dp[i - 1][0]) % MOD;\n                if (d < s_digit) {\n                    dp[i][0] = (dp[i][0] + dp[i - 1][1]) % MOD;\n                } else if (d == s_digit) {\n                    dp[i][1] = (dp[i][1] + dp[i - 1][1]) % MOD;\n                }\n            }\n        } else {\n            int t_digit = T[i - 1] - '0';\n            dp[i][0] = dp[i - 1][0];\n            if (t_digit < s_digit) {\n                dp[i][0] = (dp[i][0] + dp[i - 1][1]) % MOD;\n            } else if (t_digit == s_digit) {\n                dp[i][1] = dp[i - 1][1];\n            }\n        }\n    }\n\n    long long total_sum = 0;\n    long long pow10 = 1;\n    for (int i = n - 1; i >= 0; --i) {\n        int t_digit;\n        if (T[i] == '?') {\n            t_digit = 0;\n        } else {\n            t_digit = T[i] - '0';\n        }\n        long long current_sum = (long long)t_digit * pow10 % MOD * (dp[i + 1][0] + dp[i + 1][1]) % MOD;\n        total_sum = (total_sum + current_sum) % MOD;\n        pow10 = pow10 * 10 % MOD;\n    }\n\n    return total_sum;\n}\n\nint main() {\n    std::string S, T;\n    std::cin >> S >> T;\n    std::cout << solve(S, T) << std::endl;\n    return 0;\n}",
    "timestamp": "2025-08-13 11:49:57"
  }
]