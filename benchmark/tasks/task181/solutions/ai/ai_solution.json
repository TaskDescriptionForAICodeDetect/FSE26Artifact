[
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int id;\n    int affiliation;\n    int correct;\n    int penalty;\n} Team;\n\nint compare(const void *a, const void *b) {\n    Team *teamA = (Team *)a;\n    Team *teamB = (Team *)b;\n    if (teamA->correct != teamB->correct) {\n        return teamB->correct - teamA->correct;\n    } else if (teamA->penalty != teamB->penalty) {\n        return teamA->penalty - teamB->penalty;\n    } else {\n        return teamA->id - teamB->id;\n    }\n}\n\nint main() {\n    int n;\n    while (scanf(\"%d\", &n) == 1 && n != 0) {\n        Team teams[300];\n        for (int i = 0; i < n; i++) {\n            scanf(\"%d %d %d %d\", &teams[i].id, &teams[i].affiliation, &teams[i].correct, &teams[i].penalty);\n        }\n        qsort(teams, n, sizeof(Team), compare);\n        \n        int selected[300];\n        int selectedCount = 0;\n        int affiliations[1001] = {0}; // Track selected teams per affiliation\n        \n        for (int i = 0; i < n && selectedCount < 26; i++) {\n            int aff = teams[i].affiliation;\n            if (selectedCount < 10) {\n                if (affiliations[aff] < 3) {\n                    selected[selectedCount++] = teams[i].id;\n                    affiliations[aff]++;\n                }\n            } else if (selectedCount < 20) {\n                if (affiliations[aff] < 2) {\n                    selected[selectedCount++] = teams[i].id;\n                    affiliations[aff]++;\n                }\n            } else {\n                if (affiliations[aff] == 0) {\n                    selected[selectedCount++] = teams[i].id;\n                    affiliations[aff]++;\n                }\n            }\n        }\n        \n        for (int i = 0; i < selectedCount; i++) {\n            printf(\"%d\\n\", selected[i]);\n        }\n    }\n    return 0;\n}",
    "timestamp": "2025-08-05 18:57:53"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class TeamSelection {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        \n        while (true) {\n            int n = scanner.nextInt();\n            if (n == 0) break;\n            \n            List<Team> teams = new ArrayList<>();\n            for (int i = 0; i < n; i++) {\n                int id = scanner.nextInt();\n                int affiliation = scanner.nextInt();\n                int correctAnswers = scanner.nextInt();\n                int penalty = scanner.nextInt();\n                teams.add(new Team(id, affiliation, correctAnswers, penalty));\n            }\n            \n            Collections.sort(teams, (a, b) -> {\n                if (a.correctAnswers != b.correctAnswers) \n                    return b.correctAnswers - a.correctAnswers;\n                if (a.penalty != b.penalty)\n                    return a.penalty - b.penalty;\n                return a.id - b.id;\n            });\n            \n            List<Integer> selectedTeams = new ArrayList<>();\n            Map<Integer, Integer> affiliationCount = new HashMap<>();\n            \n            for (Team team : teams) {\n                int currentSelectedCount = selectedTeams.size();\n                int currentAffiliationCount = affiliationCount.getOrDefault(team.affiliation, 0);\n                \n                if (currentSelectedCount < 10 && currentAffiliationCount < 3) {\n                    selectedTeams.add(team.id);\n                    affiliationCount.put(team.affiliation, currentAffiliationCount + 1);\n                } else if (currentSelectedCount < 20 && currentAffiliationCount < 2) {\n                    selectedTeams.add(team.id);\n                    affiliationCount.put(team.affiliation, currentAffiliationCount + 1);\n                } else if (currentSelectedCount < 26 && currentAffiliationCount < 1) {\n                    selectedTeams.add(team.id);\n                    affiliationCount.put(team.affiliation, currentAffiliationCount + 1);\n                }\n                \n                if (selectedTeams.size() == 26) break;\n            }\n            \n            for (int id : selectedTeams) {\n                System.out.println(id);\n            }\n        }\n        \n        scanner.close();\n    }\n    \n    static class Team {\n        int id;\n        int affiliation;\n        int correctAnswers;\n        int penalty;\n        \n        Team(int id, int affiliation, int correctAnswers, int penalty) {\n            this.id = id;\n            this.affiliation = affiliation;\n            this.correctAnswers = correctAnswers;\n            this.penalty = penalty;\n        }\n    }\n}",
    "timestamp": "2025-08-05 18:58:03"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <map>\n\nusing namespace std;\n\nstruct Team {\n    int id;\n    int affiliation;\n    int correctAnswers;\n    int penalty;\n};\n\nbool compareTeams(const Team &a, const Team &b) {\n    if (a.correctAnswers != b.correctAnswers) {\n        return a.correctAnswers > b.correctAnswers;\n    } else if (a.penalty != b.penalty) {\n        return a.penalty < b.penalty;\n    } else {\n        return a.id < b.id;\n    }\n}\n\nint main() {\n    int n;\n    while (cin >> n && n != 0) {\n        vector<Team> teams(n);\n        for (int i = 0; i < n; ++i) {\n            cin >> teams[i].id >> teams[i].affiliation >> teams[i].correctAnswers >> teams[i].penalty;\n        }\n        \n        sort(teams.begin(), teams.end(), compareTeams);\n        \n        vector<int> selected;\n        map<int, int> affiliationCount;\n        \n        for (const Team &team : teams) {\n            int currentSelected = selected.size();\n            int sameAffiliation = affiliationCount[team.affiliation];\n            \n            if (currentSelected < 10) {\n                if (sameAffiliation < 3) {\n                    selected.push_back(team.id);\n                    affiliationCount[team.affiliation]++;\n                }\n            } else if (currentSelected < 20) {\n                if (sameAffiliation < 2) {\n                    selected.push_back(team.id);\n                    affiliationCount[team.affiliation]++;\n                }\n            } else if (currentSelected < 26) {\n                if (sameAffiliation == 0) {\n                    selected.push_back(team.id);\n                    affiliationCount[team.affiliation]++;\n                }\n            } else {\n                break;\n            }\n        }\n        \n        for (int id : selected) {\n            cout << id << endl;\n        }\n    }\n    return 0;\n}",
    "timestamp": "2025-08-05 18:58:20"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int id;\n    int affiliation;\n    int correct_answers;\n    int penalty;\n    int selected;\n} Team;\n\nint compare_teams(const void* a, const void* b) {\n    Team* team1 = (Team*)a;\n    Team* team2 = (Team*)b;\n    \n    if (team1->correct_answers != team2->correct_answers)\n        return team2->correct_answers - team1->correct_answers;\n    \n    if (team1->penalty != team2->penalty)\n        return team1->penalty - team2->penalty;\n    \n    return team1->id - team2->id;\n}\n\nint main() {\n    int n;\n    while (scanf(\"%d\", &n) && n != 0) {\n        Team teams[300];\n        int team_count[1001] = {0};\n        int selected_count = 0;\n        \n        for (int i = 0; i < n; i++) {\n            scanf(\"%d %d %d %d\", &teams[i].id, &teams[i].affiliation, \n                  &teams[i].correct_answers, &teams[i].penalty);\n            teams[i].selected = 0;\n        }\n        \n        qsort(teams, n, sizeof(Team), compare_teams);\n        \n        for (int i = 0; i < n; i++) {\n            if (selected_count < 10 && team_count[teams[i].affiliation] < 3) {\n                teams[i].selected = 1;\n                team_count[teams[i].affiliation]++;\n                selected_count++;\n            }\n            else if (selected_count < 20 && team_count[teams[i].affiliation] < 2) {\n                teams[i].selected = 1;\n                team_count[teams[i].affiliation]++;\n                selected_count++;\n            }\n            else if (selected_count < 26 && team_count[teams[i].affiliation] < 1) {\n                teams[i].selected = 1;\n                team_count[teams[i].affiliation]++;\n                selected_count++;\n            }\n        }\n        \n        for (int i = 0; i < n; i++) {\n            if (teams[i].selected)\n                printf(\"%d\\n\", teams[i].id);\n        }\n    }\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 18:58:28"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nstruct Team {\n    int id, affiliation, correct_answers, penalty;\n    bool selected = false;\n};\n\nbool compareTeams(const Team& a, const Team& b) {\n    if (a.correct_answers != b.correct_answers)\n        return a.correct_answers > b.correct_answers;\n    if (a.penalty != b.penalty)\n        return a.penalty < b.penalty;\n    return a.id < b.id;\n}\n\nint main() {\n    int n;\n    while (std::cin >> n && n != 0) {\n        std::vector<Team> teams(n);\n        for (int i = 0; i < n; ++i) {\n            std::cin >> teams[i].id >> teams[i].affiliation \n                    >> teams[i].correct_answers >> teams[i].penalty;\n        }\n\n        std::sort(teams.begin(), teams.end(), compareTeams);\n\n        std::vector<int> selected_ids;\n        std::vector<int> affiliation_count(1001, 0);\n\n        for (auto& team : teams) {\n            int selected_count = selected_ids.size();\n            int team_aff_count = affiliation_count[team.affiliation];\n\n            if (selected_count < 10 && team_aff_count < 3) {\n                selected_ids.push_back(team.id);\n                affiliation_count[team.affiliation]++;\n            }\n            else if (selected_count < 20 && team_aff_count < 2) {\n                selected_ids.push_back(team.id);\n                affiliation_count[team.affiliation]++;\n            }\n            else if (selected_count < 26 && team_aff_count < 1) {\n                selected_ids.push_back(team.id);\n                affiliation_count[team.affiliation]++;\n            }\n\n            if (selected_ids.size() == 26) break;\n        }\n\n        for (int id : selected_ids) {\n            std::cout << id << std::endl;\n        }\n    }\n    return 0;\n}",
    "timestamp": "2025-08-05 18:58:36"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\nclass Team {\n    int id;\n    int affiliation;\n    int correctAnswers;\n    int penalty;\n\n    public Team(int id, int affiliation, int correctAnswers, int penalty) {\n        this.id = id;\n        this.affiliation = affiliation;\n        this.correctAnswers = correctAnswers;\n        this.penalty = penalty;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        while (true) {\n            int n = scanner.nextInt();\n            if (n == 0) break;\n            List<Team> teams = new ArrayList<>();\n            for (int i = 0; i < n; i++) {\n                int id = scanner.nextInt();\n                int affiliation = scanner.nextInt();\n                int correctAnswers = scanner.nextInt();\n                int penalty = scanner.nextInt();\n                teams.add(new Team(id, affiliation, correctAnswers, penalty));\n            }\n\n            Collections.sort(teams, (a, b) -> {\n                if (a.correctAnswers != b.correctAnswers) {\n                    return b.correctAnswers - a.correctAnswers;\n                } else if (a.penalty != b.penalty) {\n                    return a.penalty - b.penalty;\n                } else {\n                    return a.id - b.id;\n                }\n            });\n\n            List<Integer> selected = new ArrayList<>();\n            Map<Integer, Integer> affiliationCount = new HashMap<>();\n\n            for (Team team : teams) {\n                int count = affiliationCount.getOrDefault(team.affiliation, 0);\n                if (selected.size() < 10) {\n                    if (count < 3) {\n                        selected.add(team.id);\n                        affiliationCount.put(team.affiliation, count + 1);\n                    }\n                } else if (selected.size() < 20) {\n                    if (count < 2) {\n                        selected.add(team.id);\n                        affiliationCount.put(team.affiliation, count + 1);\n                    }\n                } else if (selected.size() < 26) {\n                    if (count == 0) {\n                        selected.add(team.id);\n                        affiliationCount.put(team.affiliation, count + 1);\n                    }\n                } else {\n                    break;\n                }\n            }\n\n            for (int id : selected) {\n                System.out.println(id);\n            }\n        }\n    }\n}",
    "timestamp": "2025-08-05 18:58:56"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def select_teams():\n    import sys\n\n    for line in sys.stdin:\n        line = line.strip()\n        if line == \"0\":\n            break\n\n        n = int(line)\n        teams = []\n\n        for _ in range(n):\n            team_data = sys.stdin.readline().strip().split()\n            team_id, affiliation, correct_answers, penalty = map(int, team_data)\n            teams.append((team_id, affiliation, correct_answers, penalty))\n\n        # Sorting teams based on the performance ranking rules\n        teams.sort(key=lambda x: (-x[2], x[3], x[0]))\n\n        selected_teams = []\n        affiliation_count = {}\n\n        for team_id, affiliation, correct_answers, penalty in teams:\n            if len(selected_teams) < 10:\n                if affiliation_count.get(affiliation, 0) < 3:\n                    selected_teams.append(team_id)\n                    affiliation_count[affiliation] = affiliation_count.get(affiliation, 0) + 1\n            elif len(selected_teams) < 20:\n                if affiliation_count.get(affiliation, 0) < 2:\n                    selected_teams.append(team_id)\n                    affiliation_count[affiliation] = affiliation_count.get(affiliation, 0) + 1\n            elif len(selected_teams) < 26:\n                if affiliation_count.get(affiliation, 0) < 1:\n                    selected_teams.append(team_id)\n                    affiliation_count[affiliation] = affiliation_count.get(affiliation, 0) + 1\n\n        for team_id in selected_teams:\n            print(team_id)\n\nselect_teams()",
    "timestamp": "2025-08-13 01:42:08"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "java",
    "code": "import java.util.*;\n\npublic class Main {\n    static class Team {\n        int id;\n        int affiliation;\n        int correctAnswers;\n        int penalty;\n\n        Team(int id, int affiliation, int correctAnswers, int penalty) {\n            this.id = id;\n            this.affiliation = affiliation;\n            this.correctAnswers = correctAnswers;\n            this.penalty = penalty;\n        }\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        while (true) {\n            int n = scanner.nextInt();\n            if (n == 0) break;\n\n            List<Team> teams = new ArrayList<>();\n            for (int i = 0; i < n; i++) {\n                int id = scanner.nextInt();\n                int affiliation = scanner.nextInt();\n                int correctAnswers = scanner.nextInt();\n                int penalty = scanner.nextInt();\n                teams.add(new Team(id, affiliation, correctAnswers, penalty));\n            }\n\n            // Sort teams by performance, then by ID for tie-breaking\n            teams.sort((a, b) -> {\n                if (a.correctAnswers != b.correctAnswers) return b.correctAnswers - a.correctAnswers;\n                if (a.penalty != b.penalty) return a.penalty - b.penalty;\n                return a.id - b.id;\n            });\n\n            List<Integer> selectedTeams = new ArrayList<>();\n            Map<Integer, Integer> affiliationCounts = new HashMap<>();\n\n            for (Team team : teams) {\n                int count = affiliationCounts.getOrDefault(team.affiliation, 0);\n                int selectedCount = selectedTeams.size();\n\n                boolean selectTeam = false;\n\n                if (selectedCount < 10 && count < 3) {\n                    selectTeam = true;\n                } else if (selectedCount < 20 && count < 2) {\n                    selectTeam = true;\n                } else if (selectedCount < 26 && count < 1) {\n                    selectTeam = true;\n                }\n\n                if (selectTeam) {\n                    selectedTeams.add(team.id);\n                    affiliationCounts.put(team.affiliation, count + 1);\n                }\n            }\n\n            for (int id : selectedTeams) {\n                System.out.println(id);\n            }\n        }\n        \n        scanner.close();\n    }\n}",
    "timestamp": "2025-08-13 01:42:16"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int id;\n    int affiliation;\n    int correctAnswers;\n    int penalty;\n} Team;\n\nint compareTeams(const void *a, const void *b) {\n    Team *teamA = (Team *)a;\n    Team *teamB = (Team *)b;\n\n    if (teamA->correctAnswers != teamB->correctAnswers)\n        return teamB->correctAnswers - teamA->correctAnswers;\n    \n    if (teamA->penalty != teamB->penalty)\n        return teamA->penalty - teamB->penalty;\n\n    return teamA->id - teamB->id;\n}\n\nint main() {\n    int n;\n    while (scanf(\"%d\", &n) && n != 0) {\n        Team teams[n];\n        for (int i = 0; i < n; i++) {\n            scanf(\"%d %d %d %d\", &teams[i].id, &teams[i].affiliation, &teams[i].correctAnswers, &teams[i].penalty);\n        }\n\n        qsort(teams, n, sizeof(Team), compareTeams);\n\n        int selectedCount = 0;\n        int selectedIds[n];\n        int affiliationCount[1001] = {0};\n\n        for (int i = 0; i < n && selectedCount < 26; i++) {\n            int currentAffiliationCount = affiliationCount[teams[i].affiliation];\n\n            if (selectedCount < 10 && currentAffiliationCount < 3) {\n                selectedIds[selectedCount++] = teams[i].id;\n                affiliationCount[teams[i].affiliation]++;\n            } else if (selectedCount < 20 && currentAffiliationCount < 2) {\n                selectedIds[selectedCount++] = teams[i].id;\n                affiliationCount[teams[i].affiliation]++;\n            } else if (selectedCount < 26 && currentAffiliationCount < 1) {\n                selectedIds[selectedCount++] = teams[i].id;\n                affiliationCount[teams[i].affiliation]++;\n            }\n        }\n\n        for (int i = 0; i < selectedCount; i++) {\n            printf(\"%d\\n\", selectedIds[i]);\n        }\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-13 01:42:24"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def select_teams(teams):\n    # Sort teams by performance (correct answers descending, penalty ascending, ID ascending)\n    teams.sort(key=lambda x: (-x[2], x[3], x[0]))\n    \n    selected = []\n    affiliation_counts = {}\n    \n    for team in teams:\n        team_id, affiliation, correct_answers, penalty = team\n        \n        if len(selected) < 10:\n            if affiliation_counts.get(affiliation, 0) < 3:\n                selected.append(team_id)\n                affiliation_counts[affiliation] = affiliation_counts.get(affiliation, 0) + 1\n        \n        elif len(selected) < 20:\n            if affiliation_counts.get(affiliation, 0) < 2:\n                selected.append(team_id)\n                affiliation_counts[affiliation] = affiliation_counts.get(affiliation, 0) + 1\n        \n        elif len(selected) < 26:\n            if affiliation not in affiliation_counts:\n                selected.append(team_id)\n                affiliation_counts[affiliation] = 1\n        \n        if len(selected) == 26:\n            break\n    \n    return selected\n\ndef main():\n    while True:\n        n = int(input())\n        if n == 0:\n            break\n        \n        teams = []\n        for _ in range(n):\n            team_info = list(map(int, input().split()))\n            teams.append(team_info)\n        \n        selected_teams = select_teams(teams)\n        \n        for team_id in selected_teams:\n            print(team_id)\n\nif __name__ == \"__main__\":\n    main()",
    "timestamp": "2025-08-13 01:42:40"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "import sys\n\ndef solve():\n    while True:\n        n = int(sys.stdin.readline())\n        if n == 0:\n            break\n        teams = []\n        for _ in range(n):\n            parts = list(map(int, sys.stdin.readline().split()))\n            teams.append(parts)\n        # Sort by correct answers (desc), penalty (asc), ID (asc)\n        teams.sort(key=lambda x: (-x[2], x[3], x[0]))\n        selected = []\n        university_counts = {}\n        for team in teams:\n            team_id, uni, correct, penalty = team\n            if len(selected) < 10:\n                if uni not in university_counts:\n                    university_counts[uni] = 0\n                if university_counts[uni] < 3:\n                    selected.append(team_id)\n                    university_counts[uni] += 1\n            elif len(selected) < 20:\n                if uni not in university_counts:\n                    university_counts[uni] = 0\n                if university_counts[uni] < 2:\n                    selected.append(team_id)\n                    university_counts[uni] += 1\n            elif len(selected) < 26:\n                if uni not in university_counts or university_counts[uni] == 0:\n                    selected.append(team_id)\n                    university_counts[uni] = 1\n        for team_id in selected:\n            print(team_id)\n\nsolve()",
    "timestamp": "2025-08-13 01:43:02"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <map>\n\nstruct Team {\n    int id;\n    int affiliation;\n    int correctAnswers;\n    int penalty;\n};\n\nbool compareTeams(const Team &a, const Team &b) {\n    if (a.correctAnswers != b.correctAnswers)\n        return a.correctAnswers > b.correctAnswers;\n    if (a.penalty != b.penalty)\n        return a.penalty < b.penalty;\n    return a.id < b.id;\n}\n\nint main() {\n    int n;\n    while (std::cin >> n && n != 0) {\n        std::vector<Team> teams(n);\n        for (int i = 0; i < n; ++i) {\n            std::cin >> teams[i].id >> teams[i].affiliation >> teams[i].correctAnswers >> teams[i].penalty;\n        }\n\n        std::sort(teams.begin(), teams.end(), compareTeams);\n\n        std::vector<int> selectedTeams;\n        std::map<int, int> affiliationCounts;\n\n        for (const auto &team : teams) {\n            int currentSelectedCount = selectedTeams.size();\n            int currentAffiliationCount = affiliationCounts[team.affiliation];\n\n            if (currentSelectedCount < 10 && currentAffiliationCount < 3) {\n                selectedTeams.push_back(team.id);\n                ++affiliationCounts[team.affiliation];\n            } else if (currentSelectedCount < 20 && currentAffiliationCount < 2) {\n                selectedTeams.push_back(team.id);\n                ++affiliationCounts[team.affiliation];\n            } else if (currentSelectedCount < 26 && currentAffiliationCount == 0) {\n                selectedTeams.push_back(team.id);\n                ++affiliationCounts[team.affiliation];\n            }\n        }\n\n        for (const auto &id : selectedTeams) {\n            std::cout << id << std::endl;\n        }\n    }\n    return 0;\n}",
    "timestamp": "2025-08-13 11:01:53"
  }
]