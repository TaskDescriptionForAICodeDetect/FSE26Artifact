[
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\n#define MAX_N 100000\n#define MAX_M 10000\n\nint main() {\n    int n, m;\n    while (scanf(\"%d %d\", &n, &m) == 2) {\n        if (n == 0 && m == 0) break;\n        \n        char steps[MAX_N + 1];\n        char song[MAX_M + 1];\n        scanf(\"%s\", steps);\n        scanf(\"%s\", song);\n        \n        bool found = false;\n        for (int i = 0; i <= n - m; ++i) {\n            bool match = true;\n            for (int j = 0; j < m - 1; ++j) {\n                int step1, step2;\n                switch (steps[i + j]) {\n                    case 'C': step1 = 0; break;\n                    case 'D': step1 = 2; break;\n                    case 'E': step1 = 4; break;\n                    case 'F': step1 = 5; break;\n                    case 'G': step1 = 7; break;\n                    case 'A': step1 = 9; break;\n                    case 'B': step1 = 11; break;\n                    case '#': \n                        step1 = (steps[i + j - 1] == 'C') ? 1 :\n                                (steps[i + j - 1] == 'D') ? 3 :\n                                (steps[i + j - 1] == 'F') ? 6 :\n                                (steps[i + j - 1] == 'G') ? 8 :\n                                (steps[i + j - 1] == 'A') ? 10 : -1;\n                        break;\n                    default: step1 = -1; break;\n                }\n                switch (steps[i + j + 1]) {\n                    case 'C': step2 = 0; break;\n                    case 'D': step2 = 2; break;\n                    case 'E': step2 = 4; break;\n                    case 'F': step2 = 5; break;\n                    case 'G': step2 = 7; break;\n                    case 'A': step2 = 9; break;\n                    case 'B': step2 = 11; break;\n                    case '#': \n                        step2 = (steps[i + j] == 'C') ? 1 :\n                                (steps[i + j] == 'D') ? 3 :\n                                (steps[i + j] == 'F') ? 6 :\n                                (steps[i + j] == 'G') ? 8 :\n                                (steps[i + j] == 'A') ? 10 : -1;\n                        break;\n                    default: step2 = -1; break;\n                }\n                int diff = (step2 - step1 + 12) % 12;\n                \n                int song_diff;\n                switch (song[j]) {\n                    case '0': song_diff = 0; break;\n                    case '1': song_diff = 1; break;\n                    case '2': song_diff = 2; break;\n                    case '3': song_diff = 3; break;\n                    case '4': song_diff = 4; break;\n                    case '5': song_diff = 5; break;\n                    case '6': song_diff = 6; break;\n                    case '7': song_diff = 7; break;\n                    case '8': song_diff = 8; break;\n                    case '9': song_diff = 9; break;\n                    case 'A': song_diff = 10; break;\n                    case 'B': song_diff = 11; break;\n                    default: song_diff = -1; break;\n                }\n                \n                if (diff != song_diff) {\n                    match = false;\n                    break;\n                }\n            }\n            if (match) {\n                found = true;\n                break;\n            }\n        }\n        printf(\"%s\\n\", found ? \"Yes\" : \"No\");\n    }\n    return 0;\n}",
    "timestamp": "2025-08-05 21:13:36"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <map>\n\nusing namespace std;\n\nconst vector<string> notes = {\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"};\n\nmap<string, int> createNoteMap() {\n    map<string, int> noteMap;\n    for (int i = 0; i < notes.size(); ++i) {\n        noteMap[notes[i]] = i;\n    }\n    return noteMap;\n}\n\nbool canPlaySong(const vector<int>& staircase, const vector<int>& song, int pos, int songPos, vector<vector<bool>>& memo) {\n    if (songPos == song.size()) return true;\n    if (pos < 0 || pos >= staircase.size()) return false;\n    if (memo[pos][songPos]) return false;\n    \n    memo[pos][songPos] = true;\n    \n    if (staircase[pos] == song[songPos]) {\n        if (canPlaySong(staircase, song, pos - 1, songPos + 1, memo) || \n            canPlaySong(staircase, song, pos + 1, songPos + 1, memo)) {\n            return true;\n        }\n    }\n    \n    return canPlaySong(staircase, song, pos - 1, songPos, memo) || \n           canPlaySong(staircase, song, pos + 1, songPos, memo);\n}\n\nint main() {\n    map<string, int> noteMap = createNoteMap();\n    int n, m;\n    while (cin >> n >> m, n || m) {\n        vector<int> staircase(n);\n        for (int i = 0; i < n; ++i) {\n            string note;\n            cin >> note;\n            staircase[i] = noteMap[note];\n        }\n        \n        vector<int> song(m);\n        for (int i = 0; i < m; ++i) {\n            string note;\n            cin >> note;\n            song[i] = noteMap[note];\n        }\n        \n        bool found = false;\n        for (int start = 0; start < n && !found; ++start) {\n            if (staircase[start] == song[0]) {\n                vector<vector<bool>> memo(n, vector<bool>(m, false));\n                if (canPlaySong(staircase, song, start, 0, memo)) {\n                    found = true;\n                }\n            }\n        }\n        \n        cout << (found ? \"Yes\" : \"No\") << endl;\n    }\n    return 0;\n}",
    "timestamp": "2025-08-05 21:13:59"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.Scanner;\n\npublic class AngelStaircase {\n    private static final String[] NOTES = {\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"};\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        while (scanner.hasNext()) {\n            int n = scanner.nextInt();\n            int m = scanner.nextInt();\n            if (n == 0 && m == 0) break;\n            \n            int[] stair = new int[n];\n            for (int i = 0; i < n; i++) {\n                String note = scanner.next();\n                stair[i] = findNoteIndex(note);\n            }\n            \n            int[] song = new int[m];\n            for (int i = 0; i < m; i++) {\n                String note = scanner.next();\n                song[i] = findNoteIndex(note);\n            }\n            \n            boolean found = false;\n            for (int i = 0; i <= n - m; i++) {\n                int semitone = (stair[i] - song[0] + 12) % 12;\n                boolean match = true;\n                for (int j = 1; j < m; j++) {\n                    int expected = (song[j] + semitone) % 12;\n                    if (stair[i + j] != expected) {\n                        match = false;\n                        break;\n                    }\n                }\n                if (match) {\n                    found = true;\n                    break;\n                }\n            }\n            System.out.println(found ? \"Yes\" : \"No\");\n        }\n        scanner.close();\n    }\n    \n    private static int findNoteIndex(String note) {\n        for (int i = 0; i < NOTES.length; i++) {\n            if (NOTES[i].equals(note)) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}",
    "timestamp": "2025-08-05 21:14:18"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class CloudMusicStairs {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        \n        while (true) {\n            int n = scanner.nextInt();\n            if (n == 0) break;\n            \n            String[] stairs = new String[n];\n            for (int i = 0; i < n; i++) {\n                stairs[i] = scanner.next();\n            }\n            \n            String song = scanner.next();\n            \n            if (canPlaySong(stairs, song)) {\n                System.out.println(\"Yes\");\n            } else {\n                System.out.println(\"No\");\n            }\n        }\n        \n        scanner.close();\n    }\n    \n    static boolean canPlaySong(String[] stairs, String song) {\n        int[][] dp = new int[stairs.length][song.length()];\n        \n        for (int i = 0; i < stairs.length; i++) {\n            if (stairs[i].equals(song.charAt(0) + \"\")) {\n                dp[i][0] = 1;\n            }\n        }\n        \n        for (int j = 1; j < song.length(); j++) {\n            for (int i = 0; i < stairs.length; i++) {\n                if (!stairs[i].equals(song.charAt(j) + \"\")) continue;\n                \n                for (int k = 0; k < stairs.length; k++) {\n                    if (Math.abs(getIndex(stairs[i]) - getIndex(stairs[k])) <= 1) {\n                        if (dp[k][j-1] == 1) {\n                            dp[i][j] = 1;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        \n        for (int i = 0; i < stairs.length; i++) {\n            if (dp[i][song.length() - 1] == 1) {\n                return true;\n            }\n        }\n        \n        return false;\n    }\n    \n    static int getIndex(String note) {\n        String[] notes = {\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"};\n        for (int i = 0; i < notes.length; i++) {\n            if (notes[i].equals(note)) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}",
    "timestamp": "2025-08-05 21:14:25"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n\n#define MAX_NOTES 100\n#define MAX_SONG 100\n\nint main() {\n    int n, m;\n    char staircase[MAX_NOTES];\n    char song[MAX_SONG];\n\n    while (scanf(\"%d %d\", &n, &m) == 2 && n != 0 && m != 0) {\n        scanf(\"%s\", staircase);\n        scanf(\"%s\", song);\n\n        int can_play = 1;\n        int current_pos = 0;\n\n        for (int i = 0; i < m; i++) {\n            int found = 0;\n            for (int j = current_pos; j < n; j++) {\n                if (staircase[j] == song[i]) {\n                    current_pos = j;\n                    found = 1;\n                    break;\n                }\n            }\n\n            if (!found) {\n                can_play = 0;\n                break;\n            }\n        }\n\n        printf(\"%s\\n\", can_play ? \"Yes\" : \"No\");\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-05 21:14:30"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <unordered_map>\n\nusing namespace std;\n\nbool canPlaySong(vector<string>& staircase, string& song) {\n    int n = staircase.size();\n    vector<vector<bool>> dp(n, vector<bool>(song.length(), false));\n    \n    // Initialize first note matching\n    for (int j = 0; j < n; j++) {\n        if (staircase[j] == string(1, song[0])) {\n            dp[j][0] = true;\n        }\n    }\n    \n    // Dynamic programming to track possible paths\n    for (int i = 1; i < song.length(); i++) {\n        for (int j = 0; j < n; j++) {\n            if (staircase[j] == string(1, song[i])) {\n                for (int k = max(0, j-1); k <= min(n-1, j+1); k++) {\n                    if (dp[k][i-1]) {\n                        dp[j][i] = true;\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    \n    // Check if last note can be reached\n    for (int j = 0; j < n; j++) {\n        if (dp[j][song.length()-1]) {\n            return true;\n        }\n    }\n    \n    return false;\n}\n\nint main() {\n    int t;\n    cin >> t;\n    \n    while (t--) {\n        int n, m;\n        cin >> n >> m;\n        \n        vector<string> staircase(n);\n        for (int i = 0; i < n; i++) {\n            cin >> staircase[i];\n        }\n        \n        string song;\n        cin >> song;\n        \n        cout << (canPlaySong(staircase, song) ? \"Yes\" : \"No\") << endl;\n    }\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 21:14:37"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def can_play_song(staircase, song):\n    notes_map = {\n        'C': 0, 'C#': 1, 'D': 2, 'D#': 3, 'E': 4, 'F': 5, 'F#': 6,\n        'G': 7, 'G#': 8, 'A': 9, 'A#': 10, 'B': 11\n    }\n    \n    n = len(staircase)\n    m = len(song)\n    \n    # Convert notes to numerical values based on semitones\n    staircase_semitones = [notes_map[note] for note in staircase]\n    song_semitones = [notes_map[note] for note in song]\n    \n    current_step = 0\n    for i in range(m):\n        found = False\n        while current_step < n:\n            if staircase_semitones[current_step] == song_semitones[i]:\n                found = True\n                current_step += 1\n                break\n            current_step += 1\n        \n        if not found:\n            return 'No'\n    \n    return 'Yes'\n\ndef process_datasets(datasets):\n    results = []\n    for dataset in datasets:\n        staircase, song = dataset\n        result = can_play_song(staircase, song)\n        results.append(result)\n    return results\n\n# Example of how you might receive the datasets\ndatasets = [\n    ([\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\", \"C#\", \"D#\", \"E#\", \"F#\", \"G#\"], [\"C\", \"E\", \"G\"]),\n    ([\"C#\", \"E#\", \"G#\", \"A#\", \"B\"], [\"C#\", \"B\", \"G#\", \"A#\"])\n]\n\n# Execute and get results\nresults = process_datasets(datasets)\nfor result in results:\n    print(result)",
    "timestamp": "2025-08-13 05:32:24"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "java",
    "code": "import java.util.Scanner;\n\npublic class AngelSteps {\n\n    private static final String[] NOTES = {\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"};\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        while (scanner.hasNext()) {\n            int n = scanner.nextInt();\n            String[] stairs = new String[n];\n            for (int i = 0; i < n; i++) {\n                stairs[i] = scanner.next();\n            }\n\n            int m = scanner.nextInt();\n            String[] song = new String[m];\n            for (int i = 0; i < m; i++) {\n                song[i] = scanner.next();\n            }\n\n            if (canPlaySong(stairs, song)) {\n                System.out.println(\"Yes\");\n            } else {\n                System.out.println(\"No\");\n            }\n        }\n        scanner.close();\n    }\n\n    private static boolean canPlaySong(String[] stairs, String[] song) {\n        int n = stairs.length;\n        int m = song.length;\n\n        for (int start = 0; start <= n - m; start++) {\n            if (stairs[start].equals(song[0])) {\n                if (checkDescending(stairs, song, start, 1)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    private static boolean checkDescending(String[] stairs, String[] song, int currentIndex, int songIndex) {\n        if (songIndex == song.length) {\n            return true;\n        }\n        if (currentIndex + 1 < stairs.length && stairs[currentIndex + 1].equals(song[songIndex])) {\n            if (checkDescending(stairs, song, currentIndex + 1, songIndex + 1)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}",
    "timestamp": "2025-08-13 05:32:40"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c",
    "code": "#include <stdio.h>\n#include <string.h>\n\n#define MAX_STEPS 100\n#define MAX_SONG 100\n\n// Notes mapping to semitone indices\nint note_index(char* note) {\n    if (strcmp(note, \"C\") == 0) return 0;\n    if (strcmp(note, \"C#\") == 0) return 1;\n    if (strcmp(note, \"D\") == 0) return 2;\n    if (strcmp(note, \"D#\") == 0) return 3;\n    if (strcmp(note, \"E\") == 0) return 4;\n    if (strcmp(note, \"F\") == 0) return 5;\n    if (strcmp(note, \"F#\") == 0) return 6;\n    if (strcmp(note, \"G\") == 0) return 7;\n    if (strcmp(note, \"G#\") == 0) return 8;\n    if (strcmp(note, \"A\") == 0) return 9;\n    if (strcmp(note, \"A#\") == 0) return 10;\n    if (strcmp(note, \"B\") == 0) return 11;\n    return -1;\n}\n\nint canPlaySong(int steps[], int n, int song[], int m) {\n    for (int start = 0; start <= n - m; ++start) {\n        int canPlay = 1;\n        for (int j = 0; j < m; ++j) {\n            if (steps[start + j] != song[j]) {\n                canPlay = 0;\n                break;\n            }\n        }\n        if (canPlay) return 1;\n    }\n    return 0;\n}\n\nint main() {\n    int n, m;\n    char step_notes[MAX_STEPS][4];\n    char song_notes[MAX_SONG][4];\n    int steps[MAX_STEPS], song[MAX_SONG];\n    \n    while (scanf(\"%d\", &n) != EOF) {\n        for (int i = 0; i < n; i++) {\n            scanf(\"%s\", step_notes[i]);\n            steps[i] = note_index(step_notes[i]);\n        }\n\n        scanf(\"%d\", &m);\n        for (int i = 0; i < m; i++) {\n            scanf(\"%s\", song_notes[i]);\n            song[i] = note_index(song_notes[i]);\n        }\n\n        if (canPlaySong(steps, n, song, m)) {\n            printf(\"Yes\\n\");\n        } else {\n            printf(\"No\\n\");\n        }\n    }\n    \n    return 0;\n}",
    "timestamp": "2025-08-13 05:32:50"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def can_play_song(n, plates, song):\n    # Initialize DP table\n    dp = [[False] * 12 for _ in range(len(song) + 1)]\n    \n    # Initialize starting positions based on first step's note\n    for note in range(12):\n        if plates[0] == note:\n            dp[1][note] = True\n    \n    # Dynamic programming\n    for step in range(1, len(song)):\n        for curr_note in range(12):\n            if plates[step] != curr_note:\n                continue\n            \n            for prev_note in range(12):\n                # Check adjacent notes (semitone difference)\n                if abs(curr_note - prev_note) == 1 or abs(curr_note - prev_note) == 11:\n                    if dp[step][prev_note]:\n                        dp[step + 1][curr_note] = True\n    \n    # Check if song can be played\n    for note in range(12):\n        if dp[len(song)][note]:\n            return 'Yes'\n    \n    return 'No'\n\ndef main():\n    while True:\n        # Read number of steps\n        n = int(input())\n        if n == 0:\n            break\n        \n        # Read notes on plates\n        plates = list(map(lambda x: ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'].index(x), input().split()))\n        \n        # Read song\n        song = list(map(lambda x: ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'].index(x), input().split()))\n        \n        # Output result\n        print(can_play_song(n, plates, song))\n\nif __name__ == \"__main__\":\n    main()",
    "timestamp": "2025-08-13 05:33:13"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def solve():\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    note_to_index = {note: idx for idx, note in enumerate(notes)}\n    \n    while True:\n        try:\n            n, m = map(int, input().split())\n            if n == 0 and m == 0:\n                break\n            staircase = input().split()\n            song = input().split()\n            \n            # Precompute the note indices\n            stair_indices = [note_to_index[note] for note in staircase]\n            song_indices = [note_to_index[note] for note in song]\n            \n            # Check if the song can be played\n            possible = False\n            for start in range(n - m + 1):\n                match = True\n                for k in range(m):\n                    if (stair_indices[start + k] - stair_indices[start]) % 12 != (song_indices[k] - song_indices[0]) % 12:\n                        match = False\n                        break\n                if match:\n                    possible = True\n                    break\n            print(\"Yes\" if possible else \"No\")\n        except EOFError:\n            break\n\nsolve()",
    "timestamp": "2025-08-13 05:33:29"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c++",
    "code": "#include <iostream>\n#include <unordered_map>\n#include <vector>\n#include <string>\n\nbool canPlaySong(const std::vector<std::string>& staircase, const std::vector<std::string>& song) {\n    int n = staircase.size();\n    int m = song.size();\n    if (m > n) return false;\n    \n    std::unordered_map<std::string, int> noteMap = {\n        {\"C\", 0}, {\"C#\", 1}, {\"D\", 2}, {\"D#\", 3},\n        {\"E\", 4}, {\"F\", 5}, {\"F#\", 6}, {\"G\", 7},\n        {\"G#\", 8}, {\"A\", 9}, {\"A#\", 10}, {\"B\", 11}\n    };\n    \n    for (int i = 0; i <= n - m; ++i) {\n        bool canPlay = true;\n        for (int j = 0; j < m; ++j) {\n            if (staircase[i + j] != song[j]) {\n                canPlay = false;\n                break;\n            }\n        }\n        if (canPlay) return true;\n    }\n    \n    return false;\n}\n\nint main() {\n    int t;\n    std::cin >> t;\n    while (t--) {\n        int n, m;\n        std::cin >> n >> m;\n        \n        std::vector<std::string> staircase(n);\n        std::vector<std::string> song(m);\n        \n        for (int i = 0; i < n; ++i) {\n            std::cin >> staircase[i];\n        }\n        \n        for (int i = 0; i < m; ++i) {\n            std::cin >> song[i];\n        }\n        \n        if (canPlaySong(staircase, song)) {\n            std::cout << \"Yes\" << std::endl;\n        } else {\n            std::cout << \"No\" << std::endl;\n        }\n    }\n    \n    return 0;\n}",
    "timestamp": "2025-08-13 11:25:46"
  }
]