[
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAX_POSTS 1001\n#define MAX_MESSAGE_LENGTH 101\n\ntypedef struct Post {\n    int id;\n    int parent_id;\n    char message[MAX_MESSAGE_LENGTH];\n    struct Post* children[MAX_POSTS];\n    int child_count;\n} Post;\n\nPost* posts[MAX_POSTS];\nint post_count = 0;\n\nPost* create_post(int id, int parent_id, const char* message) {\n    Post* new_post = malloc(sizeof(Post));\n    new_post->id = id;\n    new_post->parent_id = parent_id;\n    strncpy(new_post->message, message, MAX_MESSAGE_LENGTH - 1);\n    new_post->message[MAX_MESSAGE_LENGTH - 1] = '\\0';\n    new_post->child_count = 0;\n    return new_post;\n}\n\nvoid add_child(Post* parent, Post* child) {\n    parent->children[parent->child_count++] = child;\n}\n\nvoid print_thread(Post* post, int depth) {\n    for (int i = 0; i < depth; i++) {\n        printf(\".\");\n    }\n    printf(\"%s\\n\", post->message);\n\n    for (int i = 0; i < post->child_count; i++) {\n        print_thread(post->children[i], depth + 1);\n    }\n}\n\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n\n    for (int i = 0; i < n; i++) {\n        int id, parent_id;\n        char message[MAX_MESSAGE_LENGTH];\n        scanf(\"%d %d %[^\\n]\", &id, &parent_id, message);\n\n        Post* new_post = create_post(id, parent_id, message);\n        posts[post_count++] = new_post;\n\n        if (parent_id != 0) {\n            for (int j = 0; j < post_count - 1; j++) {\n                if (posts[j]->id == parent_id) {\n                    add_child(posts[j], new_post);\n                    break;\n                }\n            }\n        }\n    }\n\n    for (int i = 0; i < post_count; i++) {\n        if (posts[i]->parent_id == 0) {\n            print_thread(posts[i], 0);\n        }\n    }\n\n    for (int i = 0; i < post_count; i++) {\n        free(posts[i]);\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-05 21:50:06"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct Post {\n    int id;\n    int parent_id;\n    char message[100];\n    int depth;\n    struct Post* next;\n} Post;\n\nPost* createPost(int id, int parent_id, const char* message) {\n    Post* post = (Post*)malloc(sizeof(Post));\n    post->id = id;\n    post->parent_id = parent_id;\n    strcpy(post->message, message);\n    post->depth = 0;\n    post->next = NULL;\n    return post;\n}\n\nvoid setDepths(Post* posts, int n) {\n    for (int i = 0; i < n; i++) {\n        Post* current = &posts[i];\n        int depth = 0;\n        int parent_id = current->parent_id;\n        while (parent_id != -1) {\n            depth++;\n            for (int j = 0; j < n; j++) {\n                if (posts[j].id == parent_id) {\n                    parent_id = posts[j].parent_id;\n                    break;\n                }\n            }\n        }\n        current->depth = depth;\n    }\n}\n\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    Post* posts = (Post*)malloc(n * sizeof(Post));\n\n    for (int i = 0; i < n; i++) {\n        int id, parent_id;\n        char message[100];\n        scanf(\"%d %d \", &id, &parent_id);\n        fgets(message, sizeof(message), stdin);\n        message[strcspn(message, \"\\n\")] = '\\0';\n        posts[i] = *createPost(id, parent_id, message);\n    }\n\n    setDepths(posts, n);\n\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < posts[i].depth; j++) {\n            printf(\".\");\n        }\n        printf(\"%s\\n\", posts[i].message);\n    }\n\n    free(posts);\n    return 0;\n}",
    "timestamp": "2025-08-05 21:50:25"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nstruct Post {\n    int parent;\n    string message;\n    vector<int> children;\n};\n\nvoid printPost(const vector<Post>& posts, int index, int depth) {\n    for (int i = 0; i < depth; ++i) {\n        cout << \".\";\n    }\n    cout << posts[index].message << endl;\n    for (int child : posts[index].children) {\n        printPost(posts, child, depth + 1);\n    }\n}\n\nint main() {\n    int N;\n    cin >> N;\n    vector<Post> posts(N);\n    int root = -1;\n\n    for (int i = 0; i < N; ++i) {\n        int parent;\n        cin >> parent;\n        posts[i].parent = parent;\n        getline(cin, posts[i].message); // Read the rest of the line as message\n        posts[i].message = posts[i].message.substr(1); // Remove leading space\n\n        if (parent == -1) {\n            root = i;\n        } else {\n            posts[parent].children.push_back(i);\n        }\n    }\n\n    if (root != -1) {\n        printPost(posts, root, 0);\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-05 21:50:40"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class Main {\n    static class Post {\n        int id;\n        String message;\n        List<Post> replies;\n        \n        Post(int id, String message) {\n            this.id = id;\n            this.message = message;\n            this.replies = new ArrayList<>();\n        }\n    }\n    \n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int N = scanner.nextInt();\n        Map<Integer, Post> postMap = new HashMap<>();\n        Post root = null;\n        \n        for (int i = 0; i < N; i++) {\n            int id = scanner.nextInt();\n            String message = scanner.nextLine().trim();\n            Post post = new Post(id, message);\n            postMap.put(id, post);\n            if (i == 0) {\n                root = post;\n            }\n        }\n        \n        for (int i = 1; i < N; i++) {\n            int parentId = scanner.nextInt();\n            int childId = scanner.nextInt();\n            Post parent = postMap.get(parentId);\n            Post child = postMap.get(childId);\n            parent.replies.add(child);\n        }\n        \n        printThread(root, 0);\n    }\n    \n    private static void printThread(Post post, int depth) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < depth; i++) {\n            sb.append(\".\");\n        }\n        sb.append(post.message);\n        System.out.println(sb.toString());\n        for (Post reply : post.replies) {\n            printThread(reply, depth + 1);\n        }\n    }\n}",
    "timestamp": "2025-08-05 21:50:54"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class ThreadedView {\n    static class Post {\n        int id;\n        int parentId;\n        String message;\n        List<Post> replies;\n\n        Post(int id, int parentId, String message) {\n            this.id = id;\n            this.parentId = parentId;\n            this.message = message;\n            this.replies = new ArrayList<>();\n        }\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        scanner.nextLine();\n\n        Map<Integer, Post> posts = new HashMap<>();\n        Post root = null;\n\n        for (int i = 0; i < n; i++) {\n            int id = scanner.nextInt();\n            int parentId = scanner.nextInt();\n            String message = scanner.nextLine().trim();\n\n            Post post = new Post(id, parentId, message);\n            posts.put(id, post);\n\n            if (parentId == 0) {\n                root = post;\n            } else {\n                posts.get(parentId).replies.add(post);\n            }\n        }\n\n        printThreadedView(root, 0);\n    }\n\n    static void printThreadedView(Post post, int depth) {\n        if (post == null) return;\n\n        for (int i = 0; i < depth; i++) {\n            System.out.print(\".\");\n        }\n        System.out.println(post.message);\n\n        post.replies.sort(Comparator.comparingInt(p -> p.id));\n        for (Post reply : post.replies) {\n            printThreadedView(reply, depth + 1);\n        }\n    }\n}",
    "timestamp": "2025-08-05 21:51:00"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <unordered_map>\n#include <algorithm>\n\nusing namespace std;\n\nvoid printThread(int id, unordered_map<int, vector<int>>& replies, \n                 unordered_map<int, string>& messages, \n                 int depth = 0) {\n    string indent(depth * 2, '.');\n    cout << indent << messages[id] << endl;\n\n    if (replies.count(id)) {\n        for (int reply : replies[id]) {\n            printThread(reply, replies, messages, depth + 1);\n        }\n    }\n}\n\nint main() {\n    int n;\n    cin >> n;\n\n    unordered_map<int, vector<int>> replies;\n    unordered_map<int, string> messages;\n    vector<int> roots;\n\n    for (int i = 0; i < n; ++i) {\n        int parent, id;\n        string message;\n        cin >> parent >> id >> message;\n\n        messages[id] = message;\n\n        if (parent == 0) {\n            roots.push_back(id);\n        } else {\n            replies[parent].push_back(id);\n        }\n    }\n\n    sort(roots.begin(), roots.end());\n\n    for (int root : roots) {\n        printThread(root, replies, messages);\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-05 21:51:05"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def print_threaded_view(num_posts, post_data):\n    from collections import defaultdict\n\n    # Parse input data\n    posts = defaultdict(list)\n    messages = {}\n    for parent_id, post_id, message in post_data:\n        posts[parent_id].append(post_id)\n        messages[post_id] = message\n\n    # Recursive function to print posts\n    def print_post(post_id, depth):\n        print(f\"{'.' * depth}{messages[post_id]}\")\n        for reply_id in posts[post_id]:\n            print_post(reply_id, depth + 1)\n\n    # Start printing from the root (assumption: root has parent_id 0)\n    for post_id in posts[0]:\n        print_post(post_id, 0)\n\n# Example usage\nnum_posts = 7\npost_data = [\n    (0, 1, \"Root post\"),\n    (1, 2, \"Reply to root\"),\n    (1, 3, \"Another reply to root\"),\n    (2, 4, \"Reply to reply\"),\n    (3, 5, \"Reply to another reply\"),\n    (0, 6, \"Another root post\"),\n    (6, 7, \"Reply to another root post\")\n]\n\nprint_threaded_view(num_posts, post_data)",
    "timestamp": "2025-08-13 07:44:56"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "java",
    "code": "import java.util.*;\n\npublic class ThreadedView {\n\n    static class Post {\n        int id;\n        String message;\n        List<Post> replies;\n\n        Post(int id, String message) {\n            this.id = id;\n            this.message = message;\n            this.replies = new ArrayList<>();\n        }\n    }\n\n    public static void printThreadedView(Post post, int depth) {\n        if (post == null) {\n            return;\n        }\n        \n        System.out.println(\".\".repeat(depth) + post.message);\n        \n        for (Post reply : post.replies) {\n            printThreadedView(reply, depth + 1);\n        }\n    }\n    \n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int numberOfPosts = scanner.nextInt();\n        Map<Integer, Post> postMap = new HashMap<>();\n\n        while (scanner.hasNextInt()) {\n            int parentId = scanner.nextInt();\n            int replyId = scanner.nextInt();\n            scanner.nextLine();  // Consume newline\n            String message = scanner.nextLine();\n            \n            Post replyPost = new Post(replyId, message);\n            postMap.put(replyId, replyPost);\n            \n            if (parentId == -1) {\n                // Top-level post with no parent\n                continue;\n            }\n            \n            postMap.get(parentId).replies.add(replyPost);\n        }\n        \n        for (Post post : postMap.values()) {\n            if (!postMap.containsKey(post.id)) {\n                printThreadedView(post, 0);\n            }\n        }\n        \n        scanner.close();\n    }\n}",
    "timestamp": "2025-08-13 07:45:03"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct Post {\n    int id;\n    int parentId;\n    char message[256];\n    struct Post *next;\n    struct Post *firstChild;\n} Post;\n\n// Function to create a new post\nPost* createPost(int id, int parentId, char *message) {\n    Post *newPost = (Post*)malloc(sizeof(Post));\n    newPost->id = id;\n    newPost->parentId = parentId;\n    strcpy(newPost->message, message);\n    newPost->next = NULL;\n    newPost->firstChild = NULL;\n    return newPost;\n}\n\n// Function to insert the post in the tree\nvoid insertPost(Post **posts, int id, int parentId, char *message) {\n    Post *newPost = createPost(id, parentId, message);\n    if (parentId == 0) { // Root post\n        newPost->next = *posts;\n        *posts = newPost;\n        return;\n    }\n    // Find the parent post\n    Post *parent = *posts;\n    while (parent != NULL && parent->id != parentId) {\n        if (parent->firstChild != NULL) {\n            parent = parent->firstChild;\n        } else {\n            parent = parent->next;\n        }\n    }\n    if (parent != NULL) {\n        // Insert new post as the first child\n        newPost->next = parent->firstChild;\n        parent->firstChild = newPost;\n    }\n}\n\n// Function to print the tree in threaded view format\nvoid printThreadedView(Post *post, int depth) {\n    while (post != NULL) {\n        for (int i = 0; i < depth; i++) {\n            printf(\".\");\n        }\n        printf(\"%s\\n\", post->message);\n        if (post->firstChild != NULL) {\n            printThreadedView(post->firstChild, depth + 1);\n        }\n        post = post->next;\n    }\n}\n\nint main() {\n    int n, id, parentId;\n    char message[256];\n    \n    scanf(\"%d\", &n);\n    Post *posts = NULL;\n    \n    for (int i = 0; i < n; i++) {\n        scanf(\"%d %d %[^\\n]\", &id, &parentId, message);\n        insertPost(&posts, id, parentId, message);\n    }\n\n    printThreadedView(posts, 0);\n\n    // Free allocated memory (not requested, but good practice)\n    Post *tempPost;\n    while (posts) {\n        tempPost = posts;\n        posts = posts->next;\n        free(tempPost);\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-13 07:45:08"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def print_threaded_view(n, posts):\n    # Create a dictionary to store posts by their parent ID\n    thread_dict = {}\n    for parent, message in posts:\n        if parent not in thread_dict:\n            thread_dict[parent] = []\n        thread_dict[parent].append(message)\n    \n    # Recursive function to print threads\n    def print_thread(post_id, depth=0):\n        if post_id in thread_dict:\n            for message in thread_dict[post_id]:\n                print('.' * depth + message)\n                print_thread(message, depth + 1)\n    \n    # Start printing from root (0)\n    print_thread(0)\n\n# Read input\nn = int(input())\nposts = []\nfor _ in range(n):\n    parent, message = input().split(maxsplit=1)\n    posts.append((parent, message))\n\nprint_threaded_view(n, posts)",
    "timestamp": "2025-08-13 07:45:20"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "n = int(input())\nposts = []\nfor _ in range(n):\n    parts = input().split(maxsplit=1)\n    parent = int(parts[0])\n    message = parts[1]\n    posts.append((parent, message))\n\n# Build the tree structure\ntree = {}\nfor i in range(n):\n    parent, message = posts[i]\n    if parent not in tree:\n        tree[parent] = []\n    tree[parent].append((i + 1, message))  # i+1 is the post number (1-based)\n\n# Perform DFS to print the tree\ndef dfs(node, depth):\n    if node not in tree:\n        return\n    for child_num, message in tree[node]:\n        print('.' * depth + message)\n        dfs(child_num, depth + 1)\n\n# Start from the root (parent 0)\ndfs(0, 0)",
    "timestamp": "2025-08-13 07:45:30"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c++",
    "code": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n\nstruct Post {\n    int id;\n    string message;\n    vector<Post*> replies;\n};\n\nvoid printThread(Post* post, int depth = 0) {\n    for (int i = 0; i < depth; i++) cout << \".\";\n    cout << post->message << endl;\n    for (Post* reply : post->replies) {\n        printThread(reply, depth + 1);\n    }\n}\n\nint main() {\n    int n;\n    cin >> n;\n    unordered_map<int, Post*> posts;\n    \n    int id;\n    string message;\n    for (int i = 0; i < n; i++) {\n        cin >> id;\n        cin.ignore();\n        getline(cin, message);\n        \n        posts[id] = new Post{id, message, {}};\n    }\n    \n    vector<Post*> roots;\n    for (int i = 0; i < n - 1; i++) {\n        int parent, child;\n        cin >> parent >> child;\n        posts[parent]->replies.push_back(posts[child]);\n    }\n    \n    for (const auto& pair : posts) {\n        bool isRoot = true;\n        for (const auto& p : posts) {\n            for (Post* r : p.second->replies) {\n                if (r->id == pair.first) {\n                    isRoot = false;\n                    break;\n                }\n            }\n            if (!isRoot) break;\n        }\n        if (isRoot) roots.push_back(pair.second);\n    }\n    \n    for (Post* root : roots) {\n        printThread(root);\n    }\n    \n    for (auto& pair : posts) {\n        delete pair.second;\n    }\n    \n    return 0;\n}",
    "timestamp": "2025-08-13 11:40:38"
  }
]