[
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Python",
    "code": "def solve(n, schedule):\n    start = -1\n    for i in range(n):\n        if schedule[i] == 1:\n            start = i\n            break\n    \n    if start == -1:\n        return 0\n    \n    end = -1\n    for i in range(n-1, -1, -1):\n        if schedule[i] == 1:\n            end = i\n            break\n    \n    pairs_at_uni = 0\n    for i in range(start, end+1):\n        if schedule[i] == 0:\n            # Check if break is 2 or more pairs\n            if i+1 < n and schedule[i+1] == 0:\n                continue\n            if i-1 >= 0 and schedule[i-1] == 0:\n                continue\n        pairs_at_uni += 1\n    \n    return pairs_at_uni\n\n# Read input\nn = int(input())\nschedule = list(map(int, input().split()))\n\n# Print output\nprint(solve(n, schedule))",
    "timestamp": "2025-08-05 17:33:26"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Python",
    "code": "n = int(input())\nschedule = list(map(int, input().split()))\nstay = 0\ni = 0\n\n# Find the first pair with class\nwhile i < n and schedule[i] == 0:\n    i += 1\n\nif i == n:\n    print(0)\nelse:\n    stay += 1\n    i += 1\n    while i < n:\n        if schedule[i] == 1:\n            stay += 1\n            i += 1\n        else:\n            # Check if there are two consecutive 0s\n            if i + 1 < n and schedule[i+1] == 0:\n                break\n            else:\n                stay += 1\n                i += 1\n    print(stay)",
    "timestamp": "2025-08-05 17:34:15"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "n = int(input().strip())\npairs = list(map(int, input().strip().split()))\n\nfirst_class_index = next((i for i, x in enumerate(pairs) if x == 1), n)\nlast_class_index = next((i for i, x in enumerate(reversed(pairs)) if x == 1), n)\n\nif first_class_index == n:\n    print(0)\nelse:\n    print(sum(pairs[first_class_index:n - last_class_index]))",
    "timestamp": "2025-08-12 21:55:18"
  }
]