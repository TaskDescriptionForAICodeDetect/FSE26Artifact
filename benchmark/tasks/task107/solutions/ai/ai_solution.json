[
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int baktun;\n    int katun;\n    int tun;\n    int uinal;\n    int kin;\n} MayaDate;\n\ntypedef struct {\n    int year;\n    int month;\n    int day;\n} GregorianDate;\n\nconst GregorianDate MAYAN_EPOCH = {3114, 8, 11};\nconst int DAYS_IN_MONTH[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n\nint isLeapYear(int year) {\n    if (year % 4 != 0) return 0;\n    if (year % 100 != 0) return 1;\n    return (year % 400 == 0);\n}\n\nint daysInMonth(int year, int month) {\n    if (month == 2 && isLeapYear(year)) return 29;\n    return DAYS_IN_MONTH[month - 1];\n}\n\nlong gregorianToJulian(GregorianDate date) {\n    int y = date.year;\n    int m = date.month;\n    int d = date.day;\n    return (1461 * (y + 4800 + (m - 14) / 12)) / 4 +\n           (367 * (m - 2 - 12 * ((m - 14) / 12))) / 12 -\n           (3 * ((y + 4900 + (m - 14) / 12) / 100)) / 4 + d - 32075;\n}\n\nGregorianDate julianToGregorian(long jd) {\n    long x, n, i, j;\n    GregorianDate date;\n    x = jd + 68569;\n    n = 4 * x / 146097;\n    x -= (146097 * n + 3) / 4;\n    i = (4000 * (x + 1)) / 1461001;\n    x -= 1461 * i / 4 - 31;\n    j = 80 * x / 2447;\n    date.day = x - 2447 * j / 80;\n    x = j / 11;\n    date.month = j + 2 - 12 * x;\n    date.year = 100 * (n - 49) + i + x;\n    return date;\n}\n\nlong mayanToDays(MayaDate maya) {\n    return maya.baktun * 144000L + maya.katun * 7200L + maya.tun * 360L + maya.uinal * 20L + maya.kin;\n}\n\nMayaDate daysToMayan(long days) {\n    MayaDate maya;\n    maya.baktun = days / 144000L;\n    days %= 144000L;\n    maya.katun = days / 7200L;\n    days %= 7200L;\n    maya.tun = days / 360L;\n    days %= 360L;\n    maya.uinal = days / 20L;\n    maya.kin = days % 20L;\n    return maya;\n}\n\nGregorianDate mayanToGregorian(MayaDate maya) {\n    long days = mayanToDays(maya);\n    long julian = gregorianToJulian(MAYAN_EPOCH) + days;\n    return julianToGregorian(julian);\n}\n\nMayaDate gregorianToMayan(GregorianDate date) {\n    long julian = gregorianToJulian(date);\n    long epochJulian = gregorianToJulian(MAYAN_EPOCH);\n    long days = julian - epochJulian;\n    return daysToMayan(days);\n}\n\nint main() {\n    char line[100];\n    while (fgets(line, sizeof(line), stdin)) {\n        if (line[0] == '#') break;\n        int a, b, c, d, e;\n        if (sscanf(line, \"%d.%d.%d\", &a, &b, &c) == 3) {\n            GregorianDate greg = {a, b, c};\n            MayaDate maya = gregorianToMayan(greg);\n            printf(\"%d.%d.%d.%d.%d\\n\", maya.baktun, maya.katun, maya.tun, maya.uinal, maya.kin);\n        } else if (sscanf(line, \"%d.%d.%d.%d.%d\", &a, &b, &c, &d, &e) == 5) {\n            MayaDate maya = {a, b, c, d, e};\n            GregorianDate greg = mayanToGregorian(maya);\n            printf(\"%d.%d.%d\\n\", greg.year, greg.month, greg.day);\n        }\n    }\n    return 0;\n}",
    "timestamp": "2025-08-05 18:38:55"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.time.LocalDate;\nimport java.time.temporal.ChronoUnit;\nimport java.util.Scanner;\n\npublic class MayaCalendarConverter {\n    private static final LocalDate MAYA_EPOCH = LocalDate.of(3114, 8, 11);\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        \n        while (true) {\n            String input = scanner.nextLine();\n            \n            if (input.equals(\"#\")) {\n                break;\n            }\n            \n            if (input.contains(\".\") && input.split(\"\\\\.\").length == 3) {\n                convertGregorianToMaya(input);\n            } else if (input.contains(\".\") && input.split(\"\\\\.\").length == 5) {\n                convertMayaToGregorian(input);\n            }\n        }\n        \n        scanner.close();\n    }\n    \n    private static void convertGregorianToMaya(String gregorianDate) {\n        String[] parts = gregorianDate.split(\"\\\\.\");\n        int year = Integer.parseInt(parts[0]);\n        int month = Integer.parseInt(parts[1]);\n        int day = Integer.parseInt(parts[2]);\n        \n        LocalDate inputDate = LocalDate.of(year, month, day);\n        long daysSinceMayaEpoch = ChronoUnit.DAYS.between(MAYA_EPOCH, inputDate);\n        \n        int ki = (int) (daysSinceMayaEpoch % 20);\n        int w = (int) ((daysSinceMayaEpoch / 20) % 18);\n        int t = (int) ((daysSinceMayaEpoch / (20 * 18)) % 20);\n        int ka = (int) ((daysSinceMayaEpoch / (20 * 18 * 20)) % 20);\n        int b = (int) (daysSinceMayaEpoch / (20 * 18 * 20 * 20));\n        \n        System.out.printf(\"%d.%d.%d.%d.%d%n\", b, ka, t, w, ki);\n    }\n    \n    private static void convertMayaToGregorian(String mayaDate) {\n        String[] parts = mayaDate.split(\"\\\\.\");\n        int b = Integer.parseInt(parts[0]);\n        int ka = Integer.parseInt(parts[1]);\n        int t = Integer.parseInt(parts[2]);\n        int w = Integer.parseInt(parts[3]);\n        int ki = Integer.parseInt(parts[4]);\n        \n        long daysSinceMayaEpoch = ki \n            + w * 20 \n            + t * 20 * 18 \n            + ka * 20 * 18 * 20 \n            + b * 20 * 18 * 20 * 20;\n        \n        LocalDate gregorianDate = MAYA_EPOCH.plusDays(daysSinceMayaEpoch);\n        \n        System.out.printf(\"%d.%d.%d%n\", \n            gregorianDate.getYear(), \n            gregorianDate.getMonthValue(), \n            gregorianDate.getDayOfMonth());\n    }\n}",
    "timestamp": "2025-08-05 18:39:10"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <sstream>\n#include <cmath>\n\nusing namespace std;\n\nstruct GregorianDate {\n    int year;\n    int month;\n    int day;\n};\n\nstruct MayaDate {\n    int baktun;\n    int katun;\n    int tun;\n    int uinal;\n    int kin;\n};\n\nconst int GREGORIAN_EPOCH = 1721426; // 1.1.1 Gregorian\nconst int MAYAN_EPOCH = 584285;      // 0.0.0.0.0 Maya\nconst double MAYAN_DAY_COUNT = 1872000.0; // 13 baktuns in days\n\nbool isGregorianLeapYear(int year) {\n    if (year % 4 != 0) return false;\n    if (year % 100 != 0) return true;\n    return (year % 400 == 0);\n}\n\nint gregorianToJulianDay(const GregorianDate &date) {\n    int a = (14 - date.month) / 12;\n    int y = date.year + 4800 - a;\n    int m = date.month + 12 * a - 3;\n    return date.day + (153 * m + 2) / 5 + 365 * y + y / 4 - y / 100 + y / 400 - 32045;\n}\n\nGregorianDate julianDayToGregorian(int jd) {\n    int a = jd + 32044;\n    int b = (4 * a + 3) / 146097;\n    int c = a - (146097 * b) / 4;\n    int d = (4 * c + 3) / 1461;\n    int e = c - (1461 * d) / 4;\n    int m = (5 * e + 2) / 153;\n    \n    GregorianDate date;\n    date.day = e - (153 * m + 2) / 5 + 1;\n    date.month = m + 3 - 12 * (m / 10);\n    date.year = 100 * b + d - 4800 + (m / 10);\n    return date;\n}\n\nlong mayaToLongCountDays(const MayaDate &date) {\n    return date.baktun * 144000 + date.katun * 7200 + date.tun * 360 + date.uinal * 20 + date.kin;\n}\n\nMayaDate longCountDaysToMaya(long days) {\n    MayaDate date;\n    date.baktun = days / 144000;\n    days %= 144000;\n    date.katun = days / 7200;\n    days %= 7200;\n    date.tun = days / 360;\n    days %= 360;\n    date.uinal = days / 20;\n    days %= 20;\n    date.kin = days;\n    return date;\n}\n\nGregorianDate mayaToGregorian(const MayaDate &maya) {\n    long mayaDays = mayaToLongCountDays(maya);\n    int julianDay = MAYAN_EPOCH + mayaDays;\n    return julianDayToGregorian(julianDay);\n}\n\nMayaDate gregorianToMaya(const GregorianDate &greg) {\n    int julianDay = gregorianToJulianDay(greg);\n    long mayaDays = julianDay - MAYAN_EPOCH;\n    return longCountDaysToMaya(mayaDays);\n}\n\nvector<string> split(const string &s, char delimiter) {\n    vector<string> tokens;\n    string token;\n    istringstream tokenStream(s);\n    while (getline(tokenStream, token, delimiter)) {\n        tokens.push_back(token);\n    }\n    return tokens;\n}\n\nint main() {\n    string line;\n    while (getline(cin, line)) {\n        if (line == \"#\") break;\n        if (line.find('.') != string::npos) {\n            vector<string> parts = split(line, '.');\n            if (parts.size() == 3) {\n                GregorianDate greg;\n                greg.year = stoi(parts[0]);\n                greg.month = stoi(parts[1]);\n                greg.day = stoi(parts[2]);\n                MayaDate maya = gregorianToMaya(greg);\n                cout << maya.baktun << \".\" << maya.katun << \".\" << maya.tun << \".\" << maya.uinal << \".\" << maya.kin << endl;\n            } else if (parts.size() == 5) {\n                MayaDate maya;\n                maya.baktun = stoi(parts[0]);\n                maya.katun = stoi(parts[1]);\n                maya.tun = stoi(parts[2]);\n                maya.uinal = stoi(parts[3]);\n                maya.kin = stoi(parts[4]);\n                GregorianDate greg = mayaToGregorian(maya);\n                cout << greg.year << \".\" << greg.month << \".\" << greg.day << endl;\n            }\n        }\n    }\n    return 0;\n}",
    "timestamp": "2025-08-05 18:40:15"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAYA_BASE_YEAR 3114\n#define MAYA_BASE_MONTH 8\n#define MAYA_BASE_DAY 11\n\n// Function to check if a year is a leap year\nint isLeapYear(int year) {\n    return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);\n}\n\n// Days in each month\nint daysInMonth[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n\n// Calculate total days since base date\nint calculateDaysSinceMayaBase(int b, int ka, int t, int w, int ki) {\n    return b * 144000 + ka * 7200 + t * 360 + w * 20 + ki;\n}\n\n// Convert Maya Long Count to Gregorian date\nvoid mayaToGregorian(int b, int ka, int t, int w, int ki) {\n    int totalDays = calculateDaysSinceMayaBase(b, ka, t, w, ki);\n    \n    int year = MAYA_BASE_YEAR;\n    int month = MAYA_BASE_MONTH;\n    int day = MAYA_BASE_DAY;\n\n    for (int days = 0; days < totalDays; days++) {\n        day++;\n        if (month == 2 && isLeapYear(year)) {\n            if (day > 29) {\n                day = 1;\n                month++;\n            }\n        } else if (day > daysInMonth[month - 1]) {\n            day = 1;\n            month++;\n        }\n\n        if (month > 12) {\n            month = 1;\n            year++;\n        }\n    }\n\n    printf(\"%d.%02d.%02d\\n\", year, month, day);\n}\n\n// Convert Gregorian date to Maya Long Count\nvoid gregorianToMaya(int year, int month, int day) {\n    int totalDays = 0;\n\n    // Calculate days from base date\n    for (int y = MAYA_BASE_YEAR; y < year; y++) {\n        totalDays += (isLeapYear(y) ? 366 : 365);\n    }\n\n    for (int m = 1; m < month; m++) {\n        if (m == 2 && isLeapYear(year)) {\n            totalDays += 29;\n        } else {\n            totalDays += daysInMonth[m - 1];\n        }\n    }\n\n    totalDays += day - MAYA_BASE_DAY;\n\n    // Convert to Maya Long Count\n    int b = totalDays / 144000;\n    totalDays %= 144000;\n    int ka = totalDays / 7200;\n    totalDays %= 7200;\n    int t = totalDays / 360;\n    totalDays %= 360;\n    int w = totalDays / 20;\n    int ki = totalDays % 20;\n\n    printf(\"%d.%d.%d.%d.%d\\n\", b, ka, t, w, ki);\n}\n\nint main() {\n    char input[20];\n    \n    while (1) {\n        fgets(input, sizeof(input), stdin);\n        input[strcspn(input, \"\\n\")] = 0;\n\n        if (input[0] == '#') break;\n\n        // Check if input is Maya or Gregorian\n        if (strchr(input, '.')) {\n            int parts = 0;\n            for (char* p = strtok(input, \".\"); p; p = strtok(NULL, \".\")) {\n                parts++;\n            }\n\n            if (parts == 3) {\n                int year, month, day;\n                sscanf(input, \"%d.%d.%d\", &year, &month, &day);\n                gregorianToMaya(year, month, day);\n            } else if (parts == 5) {\n                int b, ka, t, w, ki;\n                sscanf(input, \"%d.%d.%d.%d.%d\", &b, &ka, &t, &w, &ki);\n                mayaToGregorian(b, ka, t, w, ki);\n            }\n        }\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-05 18:40:36"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <sstream>\n#include <string>\n#include <vector>\n#include <cmath>\n\nusing namespace std;\n\nclass MayaCalendarConverter {\nprivate:\n    long long gregorianToMayaDays(int year, int month, int day) {\n        vector<int> monthDays = {0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334};\n        \n        // Adjust for leap years\n        if (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0)) {\n            for (int i = 2; i < 12; ++i) {\n                monthDays[i]++;\n            }\n        }\n        \n        long long totalDays = (year - 1) * 365 + (year - 1) / 4 - (year - 1) / 100 + (year - 1) / 400;\n        totalDays += monthDays[month - 1] + day - 1;\n        \n        // Adjust to Maya calendar base date (August 11, 3114 BCE)\n        long long mayaBaseYear = -3113;\n        long long mayaBaseMonth = 8;\n        long long mayaBaseDay = 11;\n        \n        long long baseTotalDays = (mayaBaseYear - 1) * 365 + (mayaBaseYear - 1) / 4 - (mayaBaseYear - 1) / 100 + (mayaBaseYear - 1) / 400;\n        baseTotalDays += monthDays[mayaBaseMonth - 1] + mayaBaseDay - 1;\n        \n        return totalDays - baseTotalDays;\n    }\n    \n    vector<int> mayaToGregorianDate(long long mayaDays) {\n        long long mayaBaseYear = -3113;\n        vector<int> monthDays = {0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334};\n        \n        long long year = mayaBaseYear;\n        long long days = mayaDays;\n        \n        while (true) {\n            long long yearDays = 365;\n            if (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0)) {\n                yearDays = 366;\n            }\n            \n            if (days < yearDays) {\n                break;\n            }\n            \n            days -= yearDays;\n            year++;\n        }\n        \n        // Adjust for leap years in month days\n        if (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0)) {\n            for (int i = 2; i < 12; ++i) {\n                monthDays[i]++;\n            }\n        }\n        \n        int month = 1;\n        while (days >= monthDays[month]) {\n            days -= monthDays[month - 1];\n            month++;\n        }\n        \n        int day = days + 1;\n        \n        return {year, month, day};\n    }\n\npublic:\n    void convert() {\n        string input;\n        while (getline(cin, input) && input != \"#\") {\n            if (input.find('.') != string::npos) {\n                // Gregorian to Maya\n                int year, month, day;\n                char dot;\n                stringstream ss(input);\n                ss >> year >> dot >> month >> dot >> day;\n                \n                long long mayaDays = gregorianToMayaDays(year, month, day);\n                \n                int baktun = mayaDays / (144000);\n                mayaDays %= 144000;\n                int katun = mayaDays / (7200);\n                mayaDays %= 7200;\n                int tun = mayaDays / (360);\n                mayaDays %= 360;\n                int winal = mayaDays / (20);\n                int kin = mayaDays % 20;\n                \n                cout << baktun << \".\" << katun << \".\" << tun << \".\" << winal << \".\" << kin << endl;\n            } else {\n                // Maya to Gregorian\n                int baktun, katun, tun, winal, kin;\n                char dot;\n                stringstream ss(input);\n                ss >> baktun >> dot >> katun >> dot >> tun >> dot >> winal >> dot >> kin;\n                \n                long long mayaDays = baktun * 144000 + katun * 7200 + tun * 360 + winal * 20 + kin;\n                \n                vector<int> gregorianDate = mayaToGregorianDate(mayaDays);\n                \n                cout << gregorianDate[0] << \".\" << gregorianDate[1] << \".\" << gregorianDate[2] << endl;\n            }\n        }\n    }\n};\n\nint main() {\n    MayaCalendarConverter converter;\n    converter.convert();\n    return 0;\n}",
    "timestamp": "2025-08-05 18:40:57"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.Scanner;\n\npublic class MayaGregorianConverter {\n    private static final long MAYAN_EPOCH = -1137142; // 3114 BCE August 11 in the Gregorian proleptic calendar\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        while (true) {\n            String line = scanner.nextLine().trim();\n            if (line.equals(\"#\")) {\n                break;\n            }\n            String[] parts = line.split(\"\\\\s+\");\n            if (parts.length != 2) {\n                continue;\n            }\n            String date1 = parts[0];\n            String date2 = parts[1];\n            if (date1.contains(\".\") && date2.contains(\".\")) {\n                if (date1.matches(\"\\\\d+\\\\.\\\\d+\\\\.\\\\d+\")) {\n                    // Gregorian to Maya\n                    String[] gregParts = date1.split(\"\\\\.\");\n                    int year = Integer.parseInt(gregParts[0]);\n                    int month = Integer.parseInt(gregParts[1]);\n                    int day = Integer.parseInt(gregParts[2]);\n                    long jd = gregorianToJulian(year, month, day);\n                    long mayanDays = jd - MAYAN_EPOCH;\n                    String mayanDate = julianToMayan(mayanDays);\n                    System.out.println(mayanDate + \" \" + date2);\n                } else if (date2.matches(\"\\\\d+\\\\.\\\\d+\\\\.\\\\d+\")) {\n                    // Maya to Gregorian\n                    String[] mayaParts = date1.split(\"\\\\.\");\n                    long baktun = Long.parseLong(mayaParts[0]);\n                    long katun = Long.parseLong(mayaParts[1]);\n                    long tun = Long.parseLong(mayaParts[2]);\n                    long uinal = Long.parseLong(mayaParts[3]);\n                    long kin = Long.parseLong(mayaParts[4]);\n                    long mayanDays = baktun * 144000 + katun * 7200 + tun * 360 + uinal * 20 + kin;\n                    long jd = MAYAN_EPOCH + mayanDays;\n                    String gregorianDate = julianToGregorian(jd);\n                    System.out.println(gregorianDate + \" \" + date2);\n                }\n            }\n        }\n        scanner.close();\n    }\n\n    private static long gregorianToJulian(int year, int month, int day) {\n        if (month < 3) {\n            year--;\n            month += 12;\n        }\n        long a = year / 100;\n        long b = a / 4;\n        long c = 2 - a + b;\n        long e = (long) (365.25 * (year + 4716));\n        long f = (long) (30.6001 * (month + 1));\n        return c + day + e + f - 1524;\n    }\n\n    private static String julianToGregorian(long jd) {\n        long q = jd + 0.5;\n        long z = q / 146097;\n        long r = q % 146097;\n        if (r < 0) {\n            r += 146097;\n        }\n        long g = r / 36524;\n        long s = r % 36524;\n        if (s < 0) {\n            s += 36524;\n        }\n        long b = s / 1461;\n        long t = s % 1461;\n        if (t < 0) {\n            t += 1461;\n        }\n        long c = t / 365;\n        if (c == 4) {\n            c = 3;\n        }\n        long year = 400 * z + 100 * g + 4 * b + c;\n        long d = t - 365 * c;\n        long e = d / 306;\n        long day = d % 306;\n        if (day < 0) {\n            day += 306;\n        }\n        long month = e + 2;\n        if (month >= 12) {\n            month -= 12;\n            year++;\n        }\n        month++;\n        day++;\n        return year + \".\" + month + \".\" + day;\n    }\n\n    private static String julianToMayan(long days) {\n        long baktun = days / 144000;\n        days %= 144000;\n        long katun = days / 7200;\n        days %= 7200;\n        long tun = days / 360;\n        days %= 360;\n        long uinal = days / 20;\n        long kin = days % 20;\n        return baktun + \".\" + katun + \".\" + tun + \".\" + uinal + \".\" + kin;\n    }\n}",
    "timestamp": "2025-08-05 18:41:36"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def maya_to_gregorian(maya_date):\n    b, ka, t, w, ki = map(int, maya_date.split('.'))\n    total_days = b * 144000 + ka * 7200 + t * 360 + w * 20 + ki\n    base_gregorian_days = 584283\n    target_days = base_gregorian_days + total_days\n    return julian_to_gregorian(target_days)\n\ndef julian_to_gregorian(julian_day):\n    j = julian_day + 32044\n    g = j // 146097\n    dg = j % 146097\n    c = (dg // 36524 + 1) * 3 // 4\n    dc = dg - c * 36524\n    b = dc // 1461\n    db = dc % 1461\n    a = (db // 365 + 1) * 3 // 4\n    da = db - a * 365\n    y = g * 400 + c * 100 + b * 4 + a\n    m = (da * 5 + 308) // 153 - 2\n    d = da - (m + 4) * 153 // 5 + 122\n    year = y - 4800 + (m + 2) // 12\n    month = (m + 2) % 12 + 1\n    day = d + 1\n    return f\"{year}.{month}.{day}\"\n\ndef gregorian_to_julian(year, month, day):\n    a = (14 - month) // 12\n    y = year + 4800 - a\n    m = month + 12 * a - 3\n    return day + (153 * m + 2) // 5 + 365 * y + y // 4 - y // 100 + y // 400 - 32045\n\ndef gregorian_to_maya(gregorian_date):\n    year, month, day = map(int, gregorian_date.split('.'))\n    julian_day = gregorian_to_julian(year, month, day)\n    base_gregorian_days = 584283\n    days_since_maya, long_count = julian_day - base_gregorian_days, []\n    for factor in [144000, 7200, 360, 20]:\n        long_count.append(days_since_maya // factor)\n        days_since_maya %= factor\n    long_count.append(days_since_maya)\n    return '.'.join(map(str, long_count))\n\ndef main():\n    import sys\n    data = sys.stdin.read().strip().split('\\n')\n    results = []\n    for line in data:\n        if line == '#':\n            break\n        if '.' in line:\n            if line.count('.') == 4:  # Maya date\n                results.append(maya_to_gregorian(line))\n            elif line.count('.') == 2:  # Gregorian date\n                results.append(gregorian_to_maya(line))\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()",
    "timestamp": "2025-08-13 00:21:45"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "java",
    "code": "import java.util.Scanner;\n\npublic class MayaGregorianConverter {\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String input;\n        \n        while (!(input = scanner.nextLine()).equals(\"#\")) {\n            if (input.contains(\".\")) {\n                String[] dateParts = input.split(\"\\\\.\");\n                if (dateParts.length == 3) {\n                    // Gregorian date conversion to Maya Long Count\n                    int year = Integer.parseInt(dateParts[0]);\n                    int month = Integer.parseInt(dateParts[1]);\n                    int day = Integer.parseInt(dateParts[2]);\n                    mayaFromGregorian(year, month, day);\n                } else {\n                    // Maya Long Count conversion to Gregorian date\n                    int baktun = Integer.parseInt(dateParts[0]);\n                    int katun = Integer.parseInt(dateParts[1]);\n                    int tun = Integer.parseInt(dateParts[2]);\n                    int winal = Integer.parseInt(dateParts[3]);\n                    int kin = Integer.parseInt(dateParts[4]);\n                    gregorianFromMaya(baktun, katun, tun, winal, kin);\n                }\n            }\n        }\n        scanner.close();\n    }\n\n    private static void mayaFromGregorian(int year, int month, int day) {\n        int gDays = daysFromGregorianStart(year, month, day);\n        int mDays = gDays - 584283;\n        \n        int baktun = mDays / 144000;\n        int katun = (mDays % 144000) / 7200;\n        int tun = (mDays % 7200) / 360;\n        int winal = (mDays % 360) / 20;\n        int kin = mDays % 20;\n        \n        System.out.println(baktun + \".\" + katun + \".\" + tun + \".\" + winal + \".\" + kin);\n    }\n\n    private static void gregorianFromMaya(int baktun, int katun, int tun, int winal, int kin) {\n        int mDays = baktun * 144000 + katun * 7200 + tun * 360 + winal * 20 + kin;\n        int gDays = mDays + 584283;\n        \n        int[] gregorianDate = gregorianFromDays(gDays);\n        System.out.println(gregorianDate[0] + \".\" + gregorianDate[1] + \".\" + gregorianDate[2]);\n    }\n\n    private static int daysFromGregorianStart(int y, int m, int d) {\n        int days = 0;\n        days += 365 * y + leapYearCount(y - 1) - 1;  // Leap years until last year\n        int[] monthDays = isLeapYear(y) ? new int[]{0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335}\n                                        : new int[]{0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334};\n        days += monthDays[m - 1];\n        days += d;\n        return days;\n    }\n\n    private static int[] gregorianFromDays(int gDays) {\n        int y = 0;\n        while (gDays > 365) {\n            y++;\n            gDays -= isLeapYear(y) ? 366 : 365;\n        }\n        int[] monthDays = isLeapYear(y) ? new int[]{31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}\n                                        : new int[]{31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n        int m = 0;\n        while (gDays > monthDays[m]) {\n            gDays -= monthDays[m];\n            m++;\n        }\n        int d = gDays;\n\n        return new int[]{y, m + 1, d};\n    }\n\n    private static boolean isLeapYear(int year) {\n        return (year % 4 == 0) && (year % 100 != 0 || year % 400 == 0);\n    }\n\n    private static int leapYearCount(int year) {\n        return year / 4 - year / 100 + year / 400;\n    }\n}",
    "timestamp": "2025-08-13 00:22:01"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c",
    "code": "#include <stdio.h>\n\ntypedef struct {\n    int baktun, katun, tun, winal, kin;\n} MayaDate;\n\ntypedef struct {\n    int year, month, day;\n} GregorianDate;\n\nvoid gregorianToMaya(int year, int month, int day, MayaDate *mayaDate) {\n    int jd = (1461 * (year + 4800 + (month - 14) / 12)) / 4 + (367 * (month - 2 - (month - 14) / 12 * 12)) / 12 - (3 * ((year + 4900 + (month - 14) / 12) / 100)) / 4 + day - 32075;\n    int diffJDN = jd - 584283; // days between Maya and Gregorian start\n    mayaDate->baktun = diffJDN / 144000;\n    diffJDN %= 144000;\n    mayaDate->katun = diffJDN / 7200;\n    diffJDN %= 7200;\n    mayaDate->tun = diffJDN / 360;\n    diffJDN %= 360;\n    mayaDate->winal = diffJDN / 20;\n    diffJDN %= 20;\n    mayaDate->kin = diffJDN;\n}\n\nvoid mayaToGregorian(int baktun, int katun, int tun, int winal, int kin, GregorianDate *gregDate) {\n    int totalDays = baktun * 144000 + katun * 7200 + tun * 360 + winal * 20 + kin;\n    totalDays += 584283; // days difference for Gregorian base\n\n    int j = totalDays + 32044;\n    int g = j / 146097;\n    int dg = j % 146097;\n    int c = (dg / 36524 + 1) * 3 / 4;\n    int dc = dg - c * 36524;\n    int b = dc / 1461;\n    int db = dc % 1461;\n    int a = (db / 365 + 1) * 3 / 4;\n    int da = db - a * 365;\n    int y = g * 400 + c * 100 + b * 4 + a;\n    int m = (da * 5 + 308) / 153 - 2;\n    int d = da - (m + 4) * 153 / 5 + 122;\n    gregDate->year = y - 4800 + (m + 14) / 12;\n    gregDate->month = (m + 2) % 12 + 1;\n    gregDate->day = d + 1;\n}\n\nint main() {\n    char input[256];\n    while (1) {\n        scanf(\"%s\", input);\n        if (input[0] == '#') {\n            break;\n        }\n        if (strchr(input, '.') != NULL) {\n            GregorianDate gregDate;\n            sscanf(input, \"%d.%d.%d\", &gregDate.year, &gregDate.month, &gregDate.day);\n            MayaDate mayaDate;\n            gregorianToMaya(gregDate.year, gregDate.month, gregDate.day, &mayaDate);\n            printf(\"%d.%d.%d.%d.%d\\n\", mayaDate.baktun, mayaDate.katun, mayaDate.tun, mayaDate.winal, mayaDate.kin);\n        } else {\n            MayaDate mayaDate;\n            sscanf(input, \"%d.%d.%d.%d.%d\", &mayaDate.baktun, &mayaDate.katun, &mayaDate.tun, &mayaDate.winal, &mayaDate.kin);\n            GregorianDate gregDate;\n            mayaToGregorian(mayaDate.baktun, mayaDate.katun, mayaDate.tun, mayaDate.winal, mayaDate.kin, &gregDate);\n            printf(\"%d.%d.%d\\n\", gregDate.year, gregDate.month, gregDate.day);\n        }\n    }\n    return 0;\n}",
    "timestamp": "2025-08-13 00:22:11"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "from datetime import datetime, timedelta\n\ndef maya_to_gregorian(maya_date):\n    b, ka, t, w, ki = map(int, maya_date.split('.'))\n    \n    # Reference date: 4 Ajaw 8 Kumk'u (August 11, 3114 BCE in Gregorian)\n    base_date = datetime(-3114, 8, 11)\n    \n    # Calculate total days\n    total_days = (b * 144000) + (ka * 7200) + (t * 360) + (w * 20) + ki\n    \n    # Add calculated days to base date\n    gregorian_date = base_date + timedelta(days=total_days)\n    \n    return gregorian_date.strftime(\"%Y.%m.%d\")\n\ndef gregorian_to_maya(gregorian_date):\n    y, m, d = map(int, gregorian_date.split('.'))\n    \n    # Reference date: 4 Ajaw 8 Kumk'u (August 11, 3114 BCE in Gregorian)\n    base_date = datetime(-3114, 8, 11)\n    current_date = datetime(y, m, d)\n    \n    # Calculate days between dates\n    days_passed = (current_date - base_date).days\n    \n    # Convert to Maya Long Count\n    b = days_passed // 144000\n    days_passed %= 144000\n    \n    ka = days_passed // 7200\n    days_passed %= 7200\n    \n    t = days_passed // 360\n    days_passed %= 360\n    \n    w = days_passed // 20\n    ki = days_passed % 20\n    \n    return f\"{b}.{ka}.{t}.{w}.{ki}\"\n\ndef main():\n    while True:\n        input_date = input(\"Enter date (Maya or Gregorian, or '#' to exit): \")\n        \n        if input_date == '#':\n            break\n        \n        try:\n            if '.' in input_date:\n                parts = input_date.split('.')\n                \n                if len(parts) == 3:\n                    # Gregorian to Maya\n                    maya_result = gregorian_to_maya(input_date)\n                    print(f\"Maya Long Count: {maya_result}\")\n                \n                elif len(parts) == 5:\n                    # Maya to Gregorian\n                    gregorian_result = maya_to_gregorian(input_date)\n                    print(f\"Gregorian Date: {gregorian_result}\")\n                \n                else:\n                    print(\"Invalid date format\")\n            \n            else:\n                print(\"Invalid input\")\n        \n        except Exception as e:\n            print(f\"Error processing date: {e}\")\n\nif __name__ == \"__main__\":\n    main()",
    "timestamp": "2025-08-13 00:22:31"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "import sys\nimport math\n\ndef gregorian_to_julian_day(y, m, d):\n    if m <= 2:\n        y -= 1\n        m += 12\n    a = y // 100\n    b = 2 - a + a // 4\n    jd = math.floor(365.25 * (y + 4716)) + math.floor(30.6001 * (m + 1)) + d + b - 1524.5\n    return jd\n\ndef julian_day_to_gregorian(jd):\n    jd += 0.5\n    z = math.floor(jd)\n    f = jd - z\n    if z < 2299161:\n        a = z\n    else:\n        alpha = math.floor((z - 1867216.25) / 36524.25)\n        a = z + 1 + alpha - math.floor(alpha / 4)\n    b = a + 1524\n    c = math.floor((b - 122.1) / 365.25)\n    d = math.floor(365.25 * c)\n    e = math.floor((b - d) / 30.6001)\n    day = b - d - math.floor(30.6001 * e) + f\n    if e < 14:\n        month = e - 1\n    else:\n        month = e - 13\n    if month > 2:\n        year = c - 4716\n    else:\n        year = c - 4715\n    return year, month, day\n\ndef maya_to_julian_day(b, ka, t, w, ki):\n    return 584283 + b * 144000 + ka * 7200 + t * 360 + w * 20 + ki\n\ndef julian_day_to_maya(jd):\n    days = jd - 584283\n    b = days // 144000\n    days %= 144000\n    ka = days // 7200\n    days %= 7200\n    t = days // 360\n    days %= 360\n    w = days // 20\n    ki = days % 20\n    return b, ka, t, w, ki\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        if line == '#':\n            break\n        parts = line.split()\n        if len(parts) == 3:\n            y, m, d = map(int, parts[0].split('.'))\n            jd = gregorian_to_julian_day(y, m, d)\n            b, ka, t, w, ki = julian_day_to_maya(jd)\n            print(f\"{b}.{ka}.{t}.{w}.{ki}\")\n        elif len(parts) == 5:\n            b, ka, t, w, ki = map(int, parts[0].split('.'))\n            jd = maya_to_julian_day(b, ka, t, w, ki)\n            y, m, d = julian_day_to_gregorian(jd)\n            print(f\"{y}.{m}.{int(d)}\")\n\nif __name__ == \"__main__\":\n    main()",
    "timestamp": "2025-08-13 00:22:59"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\n#include <cmath>\n\nusing namespace std;\n\nconst int MAYA_START_OFFSET = 584283; // Correlation constant\nconst int DAYS_PER_WEEK = 7;\nconst int DAYS_IN_MONTHS[] = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };\n\nbool isLeapYear(int year) {\n    return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);\n}\n\nint gregorianToJulianDate(int year, int month, int day) {\n    if (month <= 2) {\n        year--;\n        month += 12;\n    }\n    int A = year / 100;\n    int B = 2 - A + A / 4;\n    int julianDate = int(365.25 * (year + 4716)) + int(30.6001 * (month + 1)) + day + B - 1524;\n    return julianDate;\n}\n\nvoid julianDateToMayaLongCount(int julianDate, vector<int>& mayaDate) {\n    int daysSinceMaya = julianDate - MAYA_START_OFFSET;\n    mayaDate[0] = daysSinceMaya / 144000; // baktun\n    daysSinceMaya %= 144000;\n    mayaDate[1] = daysSinceMaya / 7200; // katun\n    daysSinceMaya %= 7200;\n    mayaDate[2] = daysSinceMaya / 360; // tun\n    daysSinceMaya %= 360;\n    mayaDate[3] = daysSinceMaya / 20; // winal\n    mayaDate[4] = daysSinceMaya % 20; // kin\n}\n\nint mayaLongCountToJulianDate(vector<int>& mayaDate) {\n    return MAYA_START_OFFSET + mayaDate[0] * 144000 + mayaDate[1] * 7200 + mayaDate[2] * 360 + mayaDate[3] * 20 + mayaDate[4];\n}\n\nvoid julianDateToGregorian(int julianDate, int& year, int& month, int& day) {\n    int J = julianDate + 32044;\n    int g = J / 146097;\n    int dg = J % 146097;\n    int c = (dg / 36524 + 1) * 3 / 4;\n    int dc = dg - c * 36524;\n    int b = dc / 1461;\n    int db = dc % 1461;\n    int a = (db / 365 + 1) * 3 / 4;\n    int da = db - a * 365;\n    int y = g * 400 + c * 100 + b * 4 + a;\n    int m = (da * 5 + 308) / 153 - 2;\n    int d = da - (m + 4) * 153 / 5 + 122;\n    year = y - 4800 + (m + 2) / 12;\n    month = (m + 2) % 12 + 1;\n    day = d + 1;\n}\n\nvector<int> parseMayaDate(const string& date) {\n    vector<int> mayaDate(5, 0);\n    replace(date.begin(), date.end(), '.', ' ');\n    istringstream iss(date);\n    for (int i = 0; i < 5; ++i) {\n        iss >> mayaDate[i];\n    }\n    return mayaDate;\n}\n\nstring convertToMayaDate(const string& gregorianDate) {\n    stringstream ss(gregorianDate);\n    int year, month, day;\n    char dot;\n    ss >> year >> dot >> month >> dot >> day;\n    \n    int julianDate = gregorianToJulianDate(year, month, day);\n    vector<int> mayaDate(5, 0);\n    julianDateToMayaLongCount(julianDate, mayaDate);\n\n    return to_string(mayaDate[0]) + \".\" + to_string(mayaDate[1]) + \".\" + to_string(mayaDate[2]) + \".\" +\n           to_string(mayaDate[3]) + \".\" + to_string(mayaDate[4]);\n}\n\nstring convertToGregorianDate(const string& mayaDateString) {\n    vector<int> mayaDate = parseMayaDate(mayaDateString);\n    int julianDate = mayaLongCountToJulianDate(mayaDate);\n    \n    int year, month, day;\n    julianDateToGregorian(julianDate, year, month, day);\n    \n    return to_string(year) + \".\" + to_string(month) + \".\" + to_string(day);\n}\n\nint main() {\n    string input;\n    while (true) {\n        cin >> input;\n        if (input == \"#\") {\n            break;\n        }\n\n        if (count(input.begin(), input.end(), '.') == 2) {\n            cout << convertToMayaDate(input) << endl;\n        } else if (count(input.begin(), input.end(), '.') == 4) {\n            cout << convertToGregorianDate(input) << endl;\n        }\n    }\n    return 0;\n}",
    "timestamp": "2025-08-13 10:53:42"
  }
]