[
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nvoid reverse_message(char *message) {\n    int len = strlen(message);\n    for (int i = 0; i < len / 2; i++) {\n        char temp = message[i];\n        message[i] = message[len - 1 - i];\n        message[len - 1 - i] = temp;\n    }\n}\n\nvoid rotate_message(char *message, int steps) {\n    int len = strlen(message);\n    steps = steps % len;\n    if (steps < 0) steps += len;\n    char temp[len + 1];\n    strcpy(temp, message);\n    for (int i = 0; i < len; i++) {\n        message[(i + steps) % len] = temp[i];\n    }\n}\n\nvoid swap_halves(char *message) {\n    int len = strlen(message);\n    int half = len / 2;\n    char temp[len + 1];\n    strcpy(temp, message);\n    for (int i = 0; i < half; i++) {\n        message[i] = temp[(i + half) % len];\n        message[(i + half) % len] = temp[i];\n    }\n}\n\nvoid increment_digits(char *message, int amount) {\n    for (int i = 0; message[i]; i++) {\n        if (isdigit(message[i])) {\n            message[i] = ((message[i] - '0' + amount) % 10 + 10) % 10 + '0';\n        }\n    }\n}\n\nvoid process_messenger(char *message, const char *messenger) {\n    if (strcmp(messenger, \"reverse\") == 0) {\n        reverse_message(message);\n    } else if (strncmp(messenger, \"rotate\", 6) == 0) {\n        int steps;\n        sscanf(messenger, \"rotate %d\", &steps);\n        rotate_message(message, steps);\n    } else if (strcmp(messenger, \"swap\") == 0) {\n        swap_halves(message);\n    } else if (strncmp(messenger, \"increment\", 9) == 0) {\n        int amount;\n        sscanf(messenger, \"increment %d\", &amount);\n        increment_digits(message, amount);\n    } else if (strncmp(messenger, \"decrement\", 9) == 0) {\n        int amount;\n        sscanf(messenger, \"decrement %d\", &amount);\n        increment_digits(message, -amount);\n    }\n}\n\nvoid undo_messenger(char *message, const char *messenger) {\n    if (strcmp(messenger, \"reverse\") == 0) {\n        reverse_message(message);\n    } else if (strncmp(messenger, \"rotate\", 6) == 0) {\n        int steps;\n        sscanf(messenger, \"rotate %d\", &steps);\n        rotate_message(message, -steps);\n    } else if (strcmp(messenger, \"swap\") == 0) {\n        swap_halves(message);\n    } else if (strncmp(messenger, \"increment\", 9) == 0) {\n        int amount;\n        sscanf(messenger, \"increment %d\", &amount);\n        increment_digits(message, -amount);\n    } else if (strncmp(messenger, \"decrement\", 9) == 0) {\n        int amount;\n        sscanf(messenger, \"decrement %d\", &amount);\n        increment_digits(message, amount);\n    }\n}\n\nint main() {\n    char message[1001];\n    int n;\n    scanf(\"%[^\\n]%*c\", message);\n    scanf(\"%d\", &n);\n    char messengers[n][20];\n    for (int i = 0; i < n; i++) {\n        scanf(\" %[^\\n]%*c\", messengers[i]);\n    }\n    for (int i = n - 1; i >= 0; i--) {\n        undo_messenger(message, messengers[i]);\n    }\n    printf(\"%s\\n\", message);\n    return 0;\n}",
    "timestamp": "2025-08-05 19:15:11"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class MessageDecoder {\n    public static String decodeMessage(String finalMessage, List<Messenger> messengers) {\n        String currentMessage = finalMessage;\n        \n        for (int i = messengers.size() - 1; i >= 0; i--) {\n            Messenger messenger = messengers.get(i);\n            currentMessage = messenger.reverseTransformation(currentMessage);\n        }\n        \n        return currentMessage;\n    }\n\n    interface Messenger {\n        String reverseTransformation(String message);\n    }\n\n    static class RotationMessenger implements Messenger {\n        private int rotation;\n\n        public RotationMessenger(int rotation) {\n            this.rotation = rotation;\n        }\n\n        @Override\n        public String reverseTransformation(String message) {\n            StringBuilder result = new StringBuilder();\n            for (char c : message.toCharArray()) {\n                if (Character.isLetter(c)) {\n                    char base = Character.isUpperCase(c) ? 'A' : 'a';\n                    result.append((char) (base + (c - base - rotation + 26) % 26));\n                } else {\n                    result.append(c);\n                }\n            }\n            return result.toString();\n        }\n    }\n\n    static class HalfSwapMessenger implements Messenger {\n        @Override\n        public String reverseTransformation(String message) {\n            int mid = message.length() / 2;\n            return message.substring(mid) + message.substring(0, mid);\n        }\n    }\n\n    static class ReverseMessenger implements Messenger {\n        @Override\n        public String reverseTransformation(String message) {\n            return new StringBuilder(message).reverse().toString();\n        }\n    }\n\n    static class DigitIncrementMessenger implements Messenger {\n        private boolean increment;\n\n        public DigitIncrementMessenger(boolean increment) {\n            this.increment = increment;\n        }\n\n        @Override\n        public String reverseTransformation(String message) {\n            StringBuilder result = new StringBuilder();\n            for (char c : message.toCharArray()) {\n                if (Character.isDigit(c)) {\n                    int digit = c - '0';\n                    digit = increment ? (digit - 1 + 10) % 10 : (digit + 1) % 10;\n                    result.append(digit);\n                } else {\n                    result.append(c);\n                }\n            }\n            return result.toString();\n        }\n    }\n\n    public static void main(String[] args) {\n        List<Messenger> messengers = new ArrayList<>();\n        messengers.add(new RotationMessenger(3));\n        messengers.add(new HalfSwapMessenger());\n        messengers.add(new ReverseMessenger());\n        messengers.add(new DigitIncrementMessenger(true));\n\n        String finalMessage = \"Decoded123\";\n        String originalMessage = decodeMessage(finalMessage, messengers);\n        System.out.println(\"Original Message: \" + originalMessage);\n    }\n}",
    "timestamp": "2025-08-05 19:15:20"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cctype>\n\nusing namespace std;\n\nstring reverseTransformation(const string& message, const string& messenger) {\n    string msg = message;\n    if (messenger == \"ROT\") {\n        for (char &c : msg) {\n            if (isalpha(c)) {\n                char base = isupper(c) ? 'A' : 'a';\n                c = (c - base - 1 + 26) % 26 + base;\n            }\n        }\n    } else if (messenger == \"SWP\") {\n        int half = msg.size() / 2;\n        string first = msg.substr(0, half);\n        string second = msg.substr(half);\n        msg = second + first;\n    } else if (messenger == \"REV\") {\n        reverse(msg.begin(), msg.end());\n    } else if (messenger == \"INC\") {\n        for (char &c : msg) {\n            if (isdigit(c)) {\n                c = (c - '0' - 1 + 10) % 10 + '0';\n            }\n        }\n    } else if (messenger == \"DEC\") {\n        for (char &c : msg) {\n            if (isdigit(c)) {\n                c = (c - '0' + 1) % 10 + '0';\n            }\n        }\n    }\n    return msg;\n}\n\nint main() {\n    string message;\n    int N;\n    cin >> message;\n    cin >> N;\n    vector<string> messengers(N);\n    for (int i = 0; i < N; ++i) {\n        cin >> messengers[i];\n    }\n    \n    for (int i = N - 1; i >= 0; --i) {\n        message = reverseTransformation(message, messengers[i]);\n    }\n    \n    cout << message << endl;\n    return 0;\n}",
    "timestamp": "2025-08-05 19:15:35"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\n#define MAX_MESSAGE_LENGTH 1000\n\n// Messenger transformation function types\ntypedef enum {\n    ROTATE,\n    SWAP_HALVES,\n    REVERSE,\n    INCREMENT_DIGITS,\n    DECREMENT_DIGITS\n} TransformationType;\n\n// Function to rotate characters\nvoid rotateMessage(char* message, int direction) {\n    int len = strlen(message);\n    char temp[MAX_MESSAGE_LENGTH];\n    strcpy(temp, message);\n    \n    if (direction > 0) {\n        for (int i = 0; i < len; i++) {\n            message[(i + direction) % len] = temp[i];\n        }\n    } else {\n        for (int i = 0; i < len; i++) {\n            message[(i - direction) % len] = temp[i];\n        }\n    }\n}\n\n// Function to swap message halves\nvoid swapHalves(char* message) {\n    int len = strlen(message);\n    int half = len / 2;\n    char temp[MAX_MESSAGE_LENGTH];\n    strcpy(temp, message);\n    \n    strcpy(message, temp + half);\n    strncpy(message + (len - half), temp, half);\n    message[len] = '\\0';\n}\n\n// Function to reverse message\nvoid reverseMessage(char* message) {\n    int len = strlen(message);\n    for (int i = 0; i < len / 2; i++) {\n        char temp = message[i];\n        message[i] = message[len - 1 - i];\n        message[len - 1 - i] = temp;\n    }\n}\n\n// Function to increment/decrement digits\nvoid transformDigits(char* message, int increment) {\n    for (int i = 0; message[i]; i++) {\n        if (message[i] >= '0' && message[i] <= '9') {\n            message[i] += increment;\n            if (message[i] > '9') message[i] = '0';\n            if (message[i] < '0') message[i] = '9';\n        }\n    }\n}\n\n// Function to reconstruct original message\nvoid reconstructMessage(char* message, TransformationType* transformations, int* transformParams, int messengers) {\n    for (int i = messengers - 1; i >= 0; i--) {\n        switch (transformations[i]) {\n            case ROTATE:\n                rotateMessage(message, -transformParams[i]);\n                break;\n            case SWAP_HALVES:\n                swapHalves(message);\n                break;\n            case REVERSE:\n                reverseMessage(message);\n                break;\n            case INCREMENT_DIGITS:\n                transformDigits(message, -1);\n                break;\n            case DECREMENT_DIGITS:\n                transformDigits(message, 1);\n                break;\n        }\n    }\n}\n\nint main() {\n    char message[MAX_MESSAGE_LENGTH];\n    TransformationType transformations[MAX_MESSAGE_LENGTH];\n    int transformParams[MAX_MESSAGE_LENGTH];\n    int messengers;\n\n    // Input final message\n    scanf(\"%s\", message);\n\n    // Input number of messengers\n    scanf(\"%d\", &messengers);\n\n    // Input transformation details\n    for (int i = 0; i < messengers; i++) {\n        int type, param;\n        scanf(\"%d %d\", &type, &param);\n        transformations[i] = type;\n        transformParams[i] = param;\n    }\n\n    // Reconstruct original message\n    reconstructMessage(message, transformations, transformParams, messengers);\n\n    // Output original message\n    printf(\"%s\\n\", message);\n\n    return 0;\n}",
    "timestamp": "2025-08-05 19:15:47"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n\nclass Messenger {\npublic:\n    virtual std::string reverse(const std::string& msg) = 0;\n    virtual ~Messenger() {}\n};\n\nclass RotationMessenger : public Messenger {\nprivate:\n    int rotationAmount;\n\npublic:\n    RotationMessenger(int rotation) : rotationAmount(rotation) {}\n\n    std::string reverse(const std::string& msg) override {\n        std::string result = msg;\n        for (char& c : result) {\n            if (isalpha(c)) {\n                char base = isupper(c) ? 'A' : 'a';\n                c = base + (c - base - rotationAmount + 26) % 26;\n            }\n        }\n        return result;\n    }\n};\n\nclass SwapMessenger : public Messenger {\npublic:\n    std::string reverse(const std::string& msg) override {\n        int mid = msg.length() / 2;\n        return msg.substr(mid) + msg.substr(0, mid);\n    }\n};\n\nclass ReverseMessenger : public Messenger {\npublic:\n    std::string reverse(const std::string& msg) override {\n        return std::string(msg.rbegin(), msg.rend());\n    }\n};\n\nclass DigitMessenger : public Messenger {\nprivate:\n    bool incrementing;\n\npublic:\n    DigitMessenger(bool inc) : incrementing(inc) {}\n\n    std::string reverse(const std::string& msg) override {\n        std::string result = msg;\n        for (char& c : result) {\n            if (isdigit(c)) {\n                c = incrementing ? c - 1 : c + 1;\n            }\n        }\n        return result;\n    }\n};\n\nclass MessageDecoder {\nprivate:\n    std::vector<Messenger*> messengers;\n\npublic:\n    void addMessenger(Messenger* messenger) {\n        messengers.push_back(messenger);\n    }\n\n    std::string decodeMessage(const std::string& finalMessage) {\n        std::string currentMessage = finalMessage;\n        for (auto it = messengers.rbegin(); it != messengers.rend(); ++it) {\n            currentMessage = (*it)->reverse(currentMessage);\n        }\n        return currentMessage;\n    }\n\n    ~MessageDecoder() {\n        for (auto messenger : messengers) {\n            delete messenger;\n        }\n    }\n};\n\nint main() {\n    MessageDecoder decoder;\n    \n    // Example usage\n    decoder.addMessenger(new RotationMessenger(3));\n    decoder.addMessenger(new SwapMessenger());\n    decoder.addMessenger(new ReverseMessenger());\n    decoder.addMessenger(new DigitMessenger(false));\n\n    std::string finalMessage = \"Hello123\";\n    std::string originalMessage = decoder.decodeMessage(finalMessage);\n    \n    std::cout << \"Original Message: \" << originalMessage << std::endl;\n\n    return 0;\n}",
    "timestamp": "2025-08-05 19:15:58"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class MessageDecoder {\n    public static String decodeMessage(String finalMessage, List<String> messengers) {\n        String message = finalMessage;\n        for (int i = messengers.size() - 1; i >= 0; i--) {\n            String messenger = messengers.get(i);\n            switch (messenger) {\n                case \"rotate\":\n                    message = rotateReverse(message);\n                    break;\n                case \"swap\":\n                    message = swapReverse(message);\n                    break;\n                case \"reverse\":\n                    message = reverse(message);\n                    break;\n                case \"increment\":\n                    message = decrementDigits(message);\n                    break;\n                case \"decrement\":\n                    message = incrementDigits(message);\n                    break;\n            }\n        }\n        return message;\n    }\n\n    private static String rotateReverse(String s) {\n        if (s.isEmpty()) return s;\n        return s.substring(1) + s.charAt(0);\n    }\n\n    private static String swapReverse(String s) {\n        int half = s.length() / 2;\n        return s.substring(half) + s.substring(0, half);\n    }\n\n    private static String reverse(String s) {\n        return new StringBuilder(s).reverse().toString();\n    }\n\n    private static String incrementDigits(String s) {\n        char[] chars = s.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isDigit(chars[i])) {\n                if (chars[i] == '9') chars[i] = '0';\n                else chars[i]++;\n            }\n        }\n        return new String(chars);\n    }\n\n    private static String decrementDigits(String s) {\n        char[] chars = s.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isDigit(chars[i])) {\n                if (chars[i] == '0') chars[i] = '9';\n                else chars[i]--;\n            }\n        }\n        return new String(chars);\n    }\n}",
    "timestamp": "2025-08-05 19:16:17"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def rotate_characters(message, rotation):\n    result = []\n    for char in message:\n        if 'a' <= char <= 'z':\n            new_char = chr((ord(char) - ord('a') - rotation) % 26 + ord('a'))\n        elif 'A' <= char <= 'Z':\n            new_char = chr((ord(char) - ord('A') - rotation) % 26 + ord('A'))\n        else:\n            new_char = char\n        result.append(new_char)\n    return ''.join(result)\n\ndef swap_halves(message):\n    mid = len(message) // 2\n    if len(message) % 2 == 0:\n        return message[mid:] + message[:mid]\n    else:\n        return message[mid + 1:] + message[mid] + message[:mid]\n\ndef reverse_message(message):\n    return message[::-1]\n\ndef increment_digits(message, increment):\n    result = []\n    for char in message:\n        if '0' <= char <= '9':\n            new_char = chr((ord(char) - ord('0') - increment) % 10 + ord('0'))\n        else:\n            new_char = char\n        result.append(new_char)\n    return ''.join(result)\n\ndef decrypt_message(final_message, transformations):\n    original_message = final_message\n    for transformation in reversed(transformations):\n        if transformation['type'] == 'rotate':\n            original_message = rotate_characters(original_message, transformation['value'])\n        elif transformation['type'] == 'swap_halves':\n            original_message = swap_halves(original_message)\n        elif transformation['type'] == 'reverse':\n            original_message = reverse_message(original_message)\n        elif transformation['type'] == 'increment_digits':\n            original_message = increment_digits(original_message, transformation['value'])\n        elif transformation['type'] == 'decrement_digits':\n            original_message = increment_digits(original_message, -transformation['value'])\n    return original_message\n\n# Example usage:\nfinal_message = \"bnm\"\ntransformations = [\n    {'type': 'rotate', 'value': 2},\n    {'type': 'reverse'},\n    {'type': 'swap_halves'}\n]\noriginal_message = decrypt_message(final_message, transformations)\nprint(original_message)",
    "timestamp": "2025-08-13 03:14:45"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "java",
    "code": "import java.util.Arrays;\n\npublic class MessageInferer {\n    // Enum for messenger operations\n    enum MessengerType {\n        ROTATE, SWAP_HALVES, REVERSE, INCREMENT, DECREMENT\n    }\n    \n    // Reverse the operation of rotating characters\n    private static String reverseRotate(String message, int offset) {\n        int len = message.length();\n        offset = ((len - offset) % len + len) % len; // Normalize the offset\n        return message.substring(offset) + message.substring(0, offset);\n    }\n    \n    // Reverse the operation of swapping halves\n    private static String reverseSwapHalves(String message) {\n        int len = message.length();\n        int mid = len / 2;\n        return message.substring(mid) + message.substring(0, mid);\n    }\n    \n    // Reverse the operation of reversing the message\n    private static String reverseReverse(String message) {\n        return new StringBuilder(message).reverse().toString();\n    }\n    \n    // Reverse the operation of incrementing digits\n    private static String reverseIncrement(String message) {\n        char[] chars = message.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isDigit(chars[i])) {\n                chars[i] = (char) ((chars[i] - '0' - 1 + 10) % 10 + '0');\n            }\n        }\n        return new String(chars);\n    }\n    \n    // Reverse the operation of decrementing digits\n    private static String reverseDecrement(String message) {\n        char[] chars = message.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isDigit(chars[i])) {\n                chars[i] = (char) ((chars[i] - '0' + 1) % 10 + '0');\n            }\n        }\n        return new String(chars);\n    }\n    \n    // Function to infer the original message\n    public static String inferOriginalMessage(String finalMessage, MessengerType[] messengers, int[] offsets) {\n        String message = finalMessage;\n        for (int i = messengers.length - 1; i >= 0; i--) {\n            switch (messengers[i]) {\n                case ROTATE:\n                    message = reverseRotate(message, offsets[i]);\n                    break;\n                case SWAP_HALVES:\n                    message = reverseSwapHalves(message);\n                    break;\n                case REVERSE:\n                    message = reverseReverse(message);\n                    break;\n                case INCREMENT:\n                    message = reverseIncrement(message);\n                    break;\n                case DECREMENT:\n                    message = reverseDecrement(message);\n                    break;\n            }\n        }\n        return message;\n    }\n    \n    public static void main(String[] args) {\n        // Example usage\n        String finalMessage = \"d3cb2\";\n        MessengerType[] messengers = {MessengerType.INCREMENT, MessengerType.ROTATE, MessengerType.REVERSE};\n        int[] offsets = {0, 3, 0};\n        String originalMessage = inferOriginalMessage(finalMessage, messengers, offsets);\n        System.out.println(originalMessage);\n    }\n}",
    "timestamp": "2025-08-13 03:14:58"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c",
    "code": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\n// Function prototypes\nvoid reverseMessage(char *message);\nvoid rotateCharacters(char *message, int steps);\nvoid swapHalves(char *message);\nvoid incrementDigits(char *message, int increment);\nvoid decrementDigits(char *message, int decrement);\n\n// Reverse the effects of each messenger in sequence\nvoid undoMessengerEffects(char *message, char messengers[][20], int numMessengers) {\n    for (int i = numMessengers - 1; i >= 0; i--) {\n        if (strcmp(messengers[i], \"reverse\") == 0) {\n            reverseMessage(message);\n        } else if (strncmp(messengers[i], \"rotate\", 6) == 0) {\n            int steps = atoi(&messengers[i][7]);\n            rotateCharacters(message, -steps);\n        } else if (strcmp(messengers[i], \"swap\") == 0) {\n            swapHalves(message);\n        } else if (strncmp(messengers[i], \"increment\", 9) == 0) {\n            int increment = atoi(&messengers[i][10]);\n            incrementDigits(message, -increment);\n        } else if (strncmp(messengers[i], \"decrement\", 9) == 0) {\n            int decrement = atoi(&messengers[i][10]);\n            decrementDigits(message, -decrement);\n        }\n    }\n}\n\n// Reverse the message\nvoid reverseMessage(char *message) {\n    int len = strlen(message);\n    for (int i = 0; i < len / 2; i++) {\n        char temp = message[i];\n        message[i] = message[len - i - 1];\n        message[len - i - 1] = temp;\n    }\n}\n\n// Rotate characters right by given steps\nvoid rotateCharacters(char *message, int steps) {\n    int len = strlen(message);\n    steps = (steps % len + len) % len;\n\n    char rotated[len + 1];\n    strncpy(rotated, message + len - steps, steps);\n    strncpy(rotated + steps, message, len - steps);\n    rotated[len] = '\\0';\n\n    strcpy(message, rotated);\n}\n\n// Swap halves of the message\nvoid swapHalves(char *message) {\n    int len = strlen(message);\n    int half = len / 2 + len % 2;\n    char temp[len + 1];\n    \n    strcpy(temp, message);\n    strncpy(message, temp + half, len - half);\n    strncpy(message + len - half, temp, half);\n}\n\n// Increment numeric digits in the message\nvoid incrementDigits(char *message, int increment) {\n    for (int i = 0; message[i]; i++) {\n        if (isdigit(message[i])) {\n            message[i] = '0' + ((message[i] - '0' + increment + 10) % 10);\n        }\n    }\n}\n\n// Decrement numeric digits in the message\nvoid decrementDigits(char *message, int decrement) {\n    incrementDigits(message, -decrement);\n}\n\nint main() {\n    char message[] = \"2hxtsu\";\n    char messengers[][20] = {\"increment1\", \"swap\", \"rotate1\", \"reverse\"};\n    undoMessengerEffects(message, messengers, 4);\n    printf(\"Original Message: %s\\n\", message);\n    return 0;\n}",
    "timestamp": "2025-08-13 03:15:05"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def decode_message(final_message, messengers):\n    current_message = final_message\n    \n    for messenger in reversed(messengers):\n        messenger_type, param = messenger\n        \n        if messenger_type == 'rotate':\n            current_message = current_message[-param:] + current_message[:-param]\n        \n        elif messenger_type == 'swap_halves':\n            mid = len(current_message) // 2\n            current_message = current_message[mid:] + current_message[:mid]\n        \n        elif messenger_type == 'reverse':\n            current_message = current_message[::-1]\n        \n        elif messenger_type == 'increment_digits':\n            decoded_message = ''\n            for char in current_message:\n                if char.isdigit():\n                    decoded_digit = str((int(char) - param + 10) % 10)\n                    decoded_message += decoded_digit\n                else:\n                    decoded_message += char\n            current_message = decoded_message\n        \n        elif messenger_type == 'decrement_digits':\n            decoded_message = ''\n            for char in current_message:\n                if char.isdigit():\n                    decoded_digit = str((int(char) + param) % 10)\n                    decoded_message += decoded_digit\n                else:\n                    decoded_message += char\n            current_message = decoded_message\n    \n    return current_message",
    "timestamp": "2025-08-13 03:15:14"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def infer_original_message(final_message, messengers):\n    message = final_message\n    for messenger in reversed(messengers):\n        if messenger == 'rotate':\n            if len(message) > 0:\n                message = message[-1] + message[:-1]\n        elif messenger == 'swap':\n            half = len(message) // 2\n            if len(message) % 2 == 0:\n                message = message[half:] + message[:half]\n            else:\n                message = message[half+1:] + message[half] + message[:half]\n        elif messenger == 'reverse':\n            message = message[::-1]\n        elif messenger == 'increment':\n            new_message = []\n            for c in message:\n                if c.isdigit():\n                    new_digit = str((int(c) + 1) % 10)\n                    new_message.append(new_digit)\n                else:\n                    new_message.append(c)\n            message = ''.join(new_message)\n        elif messenger == 'decrement':\n            new_message = []\n            for c in message:\n                if c.isdigit():\n                    new_digit = str((int(c) - 1) % 10)\n                    new_message.append(new_digit)\n                else:\n                    new_message.append(c)\n            message = ''.join(new_message)\n    return message",
    "timestamp": "2025-08-13 03:15:25"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c++",
    "code": "#include <iostream>\n#include <string>\n#include <algorithm>\n\nstd::string reverse_message(const std::string &msg) {\n    return std::string(msg.rbegin(), msg.rend());\n}\n\nstd::string swap_halves(const std::string &msg) {\n    int len = msg.length() / 2;\n    if (msg.length() % 2 == 0) {\n        return msg.substr(len) + msg.substr(0, len);\n    } else {\n        return msg.substr(len + 1) + msg[len] + msg.substr(0, len);\n    }\n}\n\nstd::string rotate_characters(const std::string &msg, int shift) {\n    std::string result;\n    for (char c : msg) {\n        if (isalpha(c)) {\n            char base = isupper(c) ? 'A' : 'a';\n            result += (c - base - shift + 26) % 26 + base;\n        } else if (isdigit(c)) {\n            result += (c - '0' - shift + 10) % 10 + '0';\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\n\nstd::string increment_decrement_digits(const std::string &msg, int change) {\n    std::string result;\n    for (char c : msg) {\n        if (isdigit(c)) {\n            result += (c - '0' - change + 10) % 10 + '0';\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\n\nint main() {\n    std::string final_message;\n    std::cout << \"Enter the final message: \";\n    std::getline(std::cin, final_message);\n\n    int num_messengers;\n    std::cout << \"Enter the number of messengers: \";\n    std::cin >> num_messengers;\n\n    std::vector<std::pair<std::string, int>> messengers;\n    std::string method;\n    int parameter;\n\n    for (int i = 0; i < num_messengers; ++i) {\n        std::cout << \"Enter messenger \" << i + 1 << \" method and parameter: \";\n        std::cin >> method >> parameter;\n        messengers.emplace_back(method, parameter);\n    }\n\n    std::string current_message = final_message;\n    for (int i = num_messengers - 1; i >= 0; --i) {\n        const auto &messenger = messengers[i];\n        if (messenger.first == \"reverse\") {\n            current_message = reverse_message(current_message);\n        } else if (messenger.first == \"swap\") {\n            current_message = swap_halves(current_message);\n        } else if (messenger.first == \"rotate\") {\n            current_message = rotate_characters(current_message, messenger.second);\n        } else if (messenger.first == \"increment\" || messenger.first == \"decrement\") {\n            int change = messenger.second;\n            if (messenger.first == \"decrement\") {\n                change = -change;\n            }\n            current_message = increment_decrement_digits(current_message, change);\n        }\n    }\n\n    std::cout << \"Original message: \" << current_message << std::endl;\n\n    return 0;\n}",
    "timestamp": "2025-08-13 11:10:36"
  }
]