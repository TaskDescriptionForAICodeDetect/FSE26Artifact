[
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n\nint min_votes_to_win(int* voters, int stages) {\n    int total = 0;\n    int needed = 1; // To win the final stage, need at least 1 sub-district\n\n    for (int i = stages - 1; i >= 0; i--) {\n        int districts = voters[i];\n        int half = (districts / 2) + 1;\n        total += needed * half;\n        needed *= districts;\n    }\n\n    return total;\n}\n\nint main() {\n    int datasets;\n    scanf(\"%d\", &datasets);\n\n    for (int d = 0; d < datasets; d++) {\n        int stages;\n        scanf(\"%d\", &stages);\n\n        int* voters = (int*)malloc(stages * sizeof(int));\n        for (int i = 0; i < stages; i++) {\n            scanf(\"%d\", &voters[i]);\n        }\n\n        int result = min_votes_to_win(voters, stages);\n        printf(\"%d\\n\", result);\n\n        free(voters);\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-05 19:12:16"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class PresidentialElection {\n    static class District {\n        int totalVoters;\n        List<District> subDistricts;\n        \n        District(int voters) {\n            this.totalVoters = voters;\n            this.subDistricts = new ArrayList<>();\n        }\n    }\n    \n    public static int calculateMinVotesRequired(District root) {\n        return calculateMinVotes(root, root.totalVoters);\n    }\n    \n    private static int calculateMinVotes(District district, int parentTotalVoters) {\n        if (district.subDistricts.isEmpty()) {\n            return (district.totalVoters / 2) + 1;\n        }\n        \n        int requiredSubDistrictWins = (district.subDistricts.size() / 2) + 1;\n        int minVotesRequired = 0;\n        \n        for (District subDistrict : district.subDistricts) {\n            int subMinVotes = calculateMinVotes(subDistrict, district.totalVoters);\n            minVotesRequired += subMinVotes;\n        }\n        \n        return Math.min(\n            (parentTotalVoters / 2) + 1, \n            minVotesRequired\n        );\n    }\n    \n    public static void main(String[] args) {\n        // Example usage\n        District nationalLevel = new District(1000000);\n        District stateA = new District(500000);\n        District stateB = new District(500000);\n        \n        District countyA1 = new District(250000);\n        District countyA2 = new District(250000);\n        District countyB1 = new District(250000);\n        District countyB2 = new District(250000);\n        \n        stateA.subDistricts.add(countyA1);\n        stateA.subDistricts.add(countyA2);\n        stateB.subDistricts.add(countyB1);\n        stateB.subDistricts.add(countyB2);\n        \n        nationalLevel.subDistricts.add(stateA);\n        nationalLevel.subDistricts.add(stateB);\n        \n        int minVotes = calculateMinVotesRequired(nationalLevel);\n        System.out.println(\"Minimum votes required: \" + minVotes);\n    }\n}",
    "timestamp": "2025-08-05 19:12:24"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nint calculate_min_votes(vector<int>& voters, int k) {\n    sort(voters.begin(), voters.end());\n    int min_votes = 0;\n    int required = (k / 2) + 1;\n    for (int i = 0; i < required; ++i) {\n        min_votes += (voters[i] / 2) + 1;\n    }\n    return min_votes;\n}\n\nint main() {\n    int datasets;\n    cin >> datasets;\n    while (datasets--) {\n        int levels;\n        cin >> levels;\n        vector<int> voters;\n        int k = 1;\n        for (int i = 0; i < levels; ++i) {\n            int districts;\n            cin >> districts;\n            k *= districts;\n            vector<int> temp(districts);\n            for (int j = 0; j < districts; ++j) {\n                cin >> temp[j];\n            }\n            if (i == levels - 1) {\n                voters = temp;\n            }\n        }\n        int result = calculate_min_votes(voters, k);\n        cout << result << endl;\n    }\n    return 0;\n}",
    "timestamp": "2025-08-05 19:13:09"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_DISTRICTS 100\n#define MAX_SUBDISTRICTS 1000\n\ntypedef struct {\n    int total_voters;\n    int votes_needed;\n} District;\n\nint calculate_minimum_votes(District districts[], int num_districts) {\n    int min_votes = 0;\n    \n    for (int i = 0; i < num_districts; i++) {\n        districts[i].votes_needed = (districts[i].total_voters / 2) + 1;\n        min_votes += districts[i].votes_needed;\n    }\n    \n    return min_votes;\n}\n\nint main() {\n    int num_datasets;\n    scanf(\"%d\", &num_datasets);\n    \n    for (int dataset = 1; dataset <= num_datasets; dataset++) {\n        int num_districts;\n        scanf(\"%d\", &num_districts);\n        \n        District districts[MAX_DISTRICTS];\n        \n        for (int i = 0; i < num_districts; i++) {\n            scanf(\"%d\", &districts[i].total_voters);\n        }\n        \n        int minimum_votes = calculate_minimum_votes(districts, num_districts);\n        \n        printf(\"Dataset %d: %d\\n\", dataset, minimum_votes);\n    }\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 19:13:14"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <cmath>\n#include <algorithm>\n\nusing namespace std;\n\nint calculateMinVotes(int numDistricts, vector<int>& votersPerDistrict) {\n    int totalVoters = 0;\n    for (int voters : votersPerDistrict) {\n        totalVoters += voters;\n    }\n    \n    int minVotes = 0;\n    int remainingDistricts = numDistricts;\n    \n    while (remainingDistricts > 1) {\n        int requiredWins = ceil(remainingDistricts / 2.0);\n        minVotes += requiredWins * (votersPerDistrict[requiredWins - 1] + 1);\n        remainingDistricts = requiredWins;\n    }\n    \n    return minVotes;\n}\n\nint main() {\n    int testCases;\n    cin >> testCases;\n    \n    while (testCases--) {\n        int numDistricts;\n        cin >> numDistricts;\n        \n        vector<int> votersPerDistrict(numDistricts);\n        for (int i = 0; i < numDistricts; i++) {\n            cin >> votersPerDistrict[i];\n        }\n        \n        sort(votersPerDistrict.rbegin(), votersPerDistrict.rend());\n        \n        int minVotesRequired = calculateMinVotes(numDistricts, votersPerDistrict);\n        cout << minVotesRequired << endl;\n    }\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 19:13:20"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class ElectionVotes {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int T = scanner.nextInt();\n        for (int t = 0; t < T; t++) {\n            int N = scanner.nextInt();\n            int[] voters = new int[N];\n            for (int i = 0; i < N; i++) {\n                voters[i] = scanner.nextInt();\n            }\n            System.out.println(calculateMinVotes(voters));\n        }\n        scanner.close();\n    }\n\n    private static int calculateMinVotes(int[] voters) {\n        List<Integer> currentLevel = new ArrayList<>();\n        for (int v : voters) {\n            currentLevel.add((v / 2) + 1);\n        }\n        while (currentLevel.size() > 1) {\n            List<Integer> nextLevel = new ArrayList<>();\n            for (int i = 0; i < currentLevel.size(); i += 2) {\n                if (i + 1 < currentLevel.size()) {\n                    nextLevel.add(currentLevel.get(i) + currentLevel.get(i + 1));\n                } else {\n                    nextLevel.add(currentLevel.get(i));\n                }\n            }\n            currentLevel = nextLevel;\n        }\n        return currentLevel.get(0);\n    }\n}",
    "timestamp": "2025-08-05 19:13:32"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def min_votes_to_win(electoral_structure, voters_distribution, level=0):\n    if level >= len(electoral_structure):\n        return 0\n    \n    num_subdistricts = electoral_structure[level]\n    min_votes = 0\n    voters_per_subdistrict = voters_distribution[level]\n    \n    # Calculate minimum votes required to win in current level's subdistricts\n    votes_to_win_subdistrict = (voters_per_subdistrict // 2) + 1\n    subdistricts_to_win = (num_subdistricts // 2) + 1\n    \n    # Accumulate votes needed for winning needed subdistricts\n    for _ in range(subdistricts_to_win):\n        min_votes += votes_to_win_subdistrict\n    \n    # Calculate votes to win in higher level subdistricts by recursion\n    min_votes += subdistricts_to_win * min_votes_to_win(\n        electoral_structure, voters_distribution, level + 1\n    )\n    \n    return min_votes\n\n# Example Usage:\nelectoral_structure = [5, 3]  # Example structure of districts\nvoters_distribution = [100, 300]  # Example number of eligible voters per district\n\nresult = min_votes_to_win(electoral_structure, voters_distribution)\nprint(result)",
    "timestamp": "2025-08-13 02:59:49"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "java",
    "code": "import java.util.Scanner;\n\npublic class ElectionCalculator {\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int t = scanner.nextInt(); // number of test cases\n        while (t-- > 0) {\n            int stages = scanner.nextInt(); // number of stages\n            int[][] voters = new int[stages][]; // voters in each district of each stage\n            \n            for (int i = 0; i < stages; i++) {\n                int districts = scanner.nextInt(); // number of districts in stage i\n                voters[i] = new int[districts];\n                for (int j = 0; j < districts; j++) {\n                    voters[i][j] = scanner.nextInt(); // number of voters in district j\n                }\n            }\n            \n            int minVotesToWin = calculateMinVotes(voters, stages);\n            System.out.println(minVotesToWin);\n        }\n        \n        scanner.close();\n    }\n\n    private static int calculateMinVotes(int[][] voters, int stages) {\n        // Calculate minimum votes needed to win the last stage\n        int[] stageWins = new int[voters[stages-1].length];\n        \n        for (int i = 0; i < voters[stages-1].length; i++) {\n            stageWins[i] = (voters[stages-1][i] / 2) + 1;\n        }\n        \n        // Repeat for all stages in reverse order\n        for (int stage = stages - 2; stage >= 0; stage--) {\n            int[] newStageWins = new int[voters[stage].length];\n            int i = 0, j = 0;\n\n            while (i < voters[stage].length) {\n                int districtsToWin = (voters[stage][i] / 2) + 1;\n                newStageWins[i] = 0;\n                for (int k = 0; k < districtsToWin; k++) {\n                    newStageWins[i] += stageWins[j++];\n                }\n                i++;\n            }\n            stageWins = newStageWins;\n        }\n        int minVotes = 0;\n        for (int votes : stageWins) {\n            minVotes += votes;\n        }\n        return minVotes;\n    }\n}",
    "timestamp": "2025-08-13 02:59:54"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int voter_count;\n    int sub_dis_count;\n} District;\n\nint min_votes_to_win(District *districts, int n) {\n    if (n == 0) return 0;\n    \n    int sub_district_wins = (districts->sub_dis_count / 2) + 1;\n    int votes_per_sub_district = (districts->voter_count / 2) + 1;\n    \n    return sub_district_wins * votes_per_sub_district + min_votes_to_win(districts + 1, n - 1);\n}\n\nint main(void) {\n    int test_cases;\n    scanf(\"%d\", &test_cases);\n    \n    while (test_cases--) {\n        int stages;\n        scanf(\"%d\", &stages);\n        \n        District *districts = malloc(sizeof(District) * stages);\n        \n        for (int i = 0; i < stages; i++) {\n            scanf(\"%d %d\", &districts[i].voter_count, &districts[i].sub_dis_count);\n        }\n        \n        int min_votes = min_votes_to_win(districts, stages);\n        printf(\"%d\\n\", min_votes);\n        \n        free(districts);\n    }\n    \n    return 0;\n}",
    "timestamp": "2025-08-13 02:59:58"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def min_votes_to_win(districts):\n    def solve_stage(stage):\n        total_sub_districts = len(stage)\n        wins_needed = total_sub_districts // 2 + 1\n        min_votes = 0\n        \n        for sub_district in stage:\n            total_voters = sub_district[0]\n            majority_votes = total_voters // 2 + 1\n            min_votes += majority_votes\n        \n        return min_votes, wins_needed\n    \n    current_stage = districts\n    while len(current_stage) > 1:\n        min_votes, wins_needed = solve_stage(current_stage)\n        \n        next_stage = []\n        for i in range(0, len(current_stage), 2):\n            if i + 1 < len(current_stage):\n                next_stage.append([min_votes, wins_needed])\n            else:\n                next_stage.append(current_stage[i])\n        \n        current_stage = next_stage\n    \n    return min_votes\n\n# Example usage\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    districts = []\n    for _ in range(n):\n        voters = int(input())\n        districts.append([voters])\n    \n    result = min_votes_to_win(districts)\n    print(result)",
    "timestamp": "2025-08-13 03:00:08"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    idx = 0\n    T = int(data[idx])\n    idx += 1\n    results = []\n    \n    for _ in range(T):\n        N = int(data[idx])\n        idx += 1\n        districts = []\n        for _ in range(N):\n            V = int(data[idx])\n            idx += 1\n            districts.append(V)\n        \n        districts.sort()\n        min_votes = 0\n        k = 1\n        for V in districts:\n            needed = (V // 2) + 1\n            if k == N:\n                min_votes += needed\n            else:\n                min_votes += needed\n                k += 1\n        results.append(min_votes)\n    \n    for result in results:\n        print(result)\n\nsolve()",
    "timestamp": "2025-08-13 03:00:20"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\n// Function to calculate minimum votes to win in each stage\nint minVotesToWin(vector<int>& voters) {\n    int n = voters.size();\n    vector<int> winVotes(n);\n    // Calculate minimum votes needed to win each district\n    for (int i = 0; i < n; ++i) {\n        winVotes[i] = (voters[i] / 2) + 1;\n    }\n    sort(winVotes.begin(), winVotes.end());\n    // Calculate minimum votes needed to win overall\n    int minVotes = 0;\n    for (int i = 0; i < (n / 2) + 1; ++i) {\n        minVotes += winVotes[i];\n    }\n    return minVotes;\n}\n\nint main() {\n    int stages;\n    cin >> stages;\n    vector<vector<int>> stageVoters(stages);\n    // Input stage data\n    for (int i = 0; i < stages; ++i) {\n        int districts;\n        cin >> districts;\n        stageVoters[i].resize(districts);\n        for (int j = 0; j < districts; ++j) {\n            cin >> stageVoters[i][j];\n        }\n    }\n\n    vector<int> minVotesNeeded(stages);\n    // Calculate votes needed for each stage\n    for (int i = 0; i < stages; ++i) {\n        minVotesNeeded[i] = minVotesToWin(stageVoters[i]);\n    }\n\n    // Output the minimum votes needed for each stage\n    for (int i = 0; i < stages; ++i) {\n        cout << \"Stage \" << i + 1 << \": \" << minVotesNeeded[i] << \" votes needed\" << endl;\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-13 11:09:06"
  }
]